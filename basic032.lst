00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 9C D6 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 30 B7 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 68 B4 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 38 A5 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 48 A7 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 A0 A2 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 AC 0F 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 88 AE 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 14 41 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 C4 68 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 7C 66 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 54 78 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 60 49 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     D4 E6 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     08 F8 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     E8 E5 05 F1 | 	add	objptr, ##41960
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     E8 E5 85 F1 | 	sub	objptr, ##41960
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     00 FB B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     54 02 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     4C FC B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     10 FA B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     24 CC B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     E8 E5 05 F1 | 	add	objptr, ##41960
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     E8 E5 85 F1 | 	sub	objptr, ##41960
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     1C CA B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     BC C9 B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F0 E5 05 F1 | 	add	objptr, ##41968
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     B2 E5 85 F1 | 	sub	objptr, ##41906
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     B4 E5 05 F1 | 	add	objptr, ##41908
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     B2 E5 85 F1 | 	sub	objptr, ##41906
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     4C C9 B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     1C E1 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F0 E5 05 F1 | 	add	objptr, ##41968
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F0 E5 85 F1 | 	sub	objptr, ##41968
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     38 E4 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     3C F7 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     90 FE B1 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     8C F8 B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     80 01 00 FF 
00ccc     1E 49 06 F6 | 	mov	local22, ##@LR__5007
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     E0 C7 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     6C 1D B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     7C FB B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     88 E8 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     B8 EA B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     C8 F5 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     1C FD B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     18 F7 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     7C C6 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     F8 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     EC DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     7C DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     48 DF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     68 DF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     58 DF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     20 C5 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     CC C4 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     9C C4 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F0 E5 05 F1 | 	add	objptr, ##41968
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     B2 E5 85 F1 | 	sub	objptr, ##41906
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     B4 E5 05 F1 | 	add	objptr, ##41908
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     B2 E5 85 F1 | 	sub	objptr, ##41906
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     34 C4 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     04 DC B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F0 E5 05 F1 | 	add	objptr, ##41968
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F0 E5 85 F1 | 	sub	objptr, ##41968
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     E0 DC B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     1C C3 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     C8 C2 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     98 C2 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F0 E5 05 F1 | 	add	objptr, ##41968
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     B2 E5 85 F1 | 	sub	objptr, ##41906
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     B4 E5 05 F1 | 	add	objptr, ##41908
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     B2 E5 85 F1 | 	sub	objptr, ##41906
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     30 C2 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     00 DA B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F0 E5 05 F1 | 	add	objptr, ##41968
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F0 E5 85 F1 | 	sub	objptr, ##41968
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     80 01 00 FF 
01328     1F 49 06 F6 | 	mov	local22, ##@LR__5008
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 34 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1A 29 02 F6 | 	mov	local06, local12
01394     14 13 02 F6 | 	mov	arg01, local06
01398     28 DB B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 32 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 34 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1A 29 02 F6 | 	mov	local06, local12
013f4     14 13 02 F6 | 	mov	arg01, local06
013f8     C8 DA B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 32 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 28 E2 FA | 	rdword	local06, objptr
0140c     02 28 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 28 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 2C 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     16 2B 02 F6 | 	mov	local07, local08
01434     15 29 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 28 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 28 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 34 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1A 29 02 F6 | 	mov	local06, local12
01470     14 13 02 F6 | 	mov	arg01, local06
01474     1C DA B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 32 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 28 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     14 13 02 F6 | 	mov	arg01, local06
014d0     C0 D9 B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 32 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 28 02 FB | 	rdlong	local06, objptr
014e8     14 35 22 F6 | 	not	local12, local06
014ec     F2 34 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 34 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 28 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     0C C8 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 28 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     FC C7 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 24 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     D0 F5 B1 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     A8 F5 B1 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     80 F5 B1 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 1E 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 20 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     10 13 02 F6 | 	mov	arg01, local02
01650     D8 EA B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     10 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     28 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 22 02 F6 | 	mov	local03, result1
0166c     10 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     18 EB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 22 06 F1 | 	add	local03, ##49152
01680     0F 22 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     11 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     0F 23 02 F6 | 	mov	local03, local01
016a4     02 22 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 22 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     11 15 62 FC | 	wrlong	arg02, local03
016c0     0F 23 02 F6 | 	mov	local03, local01
016c4     02 22 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 22 02 F1 | 	add	local03, objptr
016d0     10 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     7C EA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     11 FB 61 FC | 	wrlong	result1, local03
016e4     01 1E 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 20 06 F1 | 	add	local02, #1
016ec     07 20 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 1E 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     0F 23 02 F6 | 	mov	local03, local01
01704     02 22 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 22 02 F1 | 	add	local03, objptr
01714     11 01 68 FC | 	wrlong	#0, local03
01718     0F 23 02 F6 | 	mov	local03, local01
0171c     02 22 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 22 02 F1 | 	add	local03, objptr
01728     11 01 68 FC | 	wrlong	#0, local03
0172c     01 1E 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     2F 4A 05 F6 | 	mov	COUNT_, #47
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     7C F0 07 F1 | 	add	ptra, ##636
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     E0 15 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     18 15 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 1E 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 20 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     10 23 02 F6 | 	mov	local03, local02
017c4     02 22 66 F0 | 	shl	local03, #2
017c8     A7 22 02 F1 | 	add	local03, fp
017cc     11 01 68 FC | 	wrlong	#0, local03
017d0     01 20 06 F1 | 	add	local02, #1
017d4     7E 20 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 20 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     10 25 02 F6 | 	mov	local04, local02
017f4     03 24 66 F0 | 	shl	local04, #3
017f8     F2 24 02 F1 | 	add	local04, objptr
017fc     80 01 00 FF 
01800     20 17 06 F6 | 	mov	arg03, ##@LR__5009
01804     12 17 62 FC | 	wrlong	arg03, local04
01808     10 25 02 F6 | 	mov	local04, local02
0180c     03 24 66 F0 | 	shl	local04, #3
01810     F2 26 02 F6 | 	mov	local05, objptr
01814     F2 24 02 F1 | 	add	local04, objptr
01818     00 28 06 F6 | 	mov	local06, #0
0181c     04 24 06 F1 | 	add	local04, #4
01820     12 01 68 FC | 	wrlong	#0, local04
01824     01 20 06 F1 | 	add	local02, #1
01828     7E 20 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     08 15 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     40 14 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     80 01 00 FF 
01860     21 25 06 F6 | 	mov	local04, ##@LR__5010
01864     1A 00 00 FF 
01868     D8 E5 05 F1 | 	add	objptr, ##13784
0186c     F2 24 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     D8 E5 85 F1 | 	sub	objptr, ##13784
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 2B 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     15 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 2A 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 2B 8A F1 | 	sub	local07, arg01 wz
0189c     51 00 00 FF 
018a0     F8 E5 05 F1 | 	add	objptr, ##41976
018a4     F2 2A 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     51 00 00 FF 
018ac     F8 E5 85 F1 | 	sub	objptr, ##41976
018b0     60 24 90 AD |  if_e	jmp	#LR__0198
018b4     00 2C 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 20 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 2B 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     15 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 2A 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 2B 82 F1 | 	sub	local07, arg01
018e8     15 2F 02 F6 | 	mov	local09, local07
018ec     01 2E 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     17 21 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     10 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     C0 10 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     80 01 00 FF 
01920     22 15 06 F6 | 	mov	arg02, ##@LR__5011
01924     44 EF B1 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 2C 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     10 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     80 10 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     80 01 00 FF 
01960     24 15 06 F6 | 	mov	arg02, ##@LR__5012
01964     04 EF B1 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 2C 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     10 25 02 F6 | 	mov	local04, local02
01978     03 24 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 26 02 F6 | 	mov	local05, objptr
01988     F2 24 02 F1 | 	add	local04, objptr
0198c     04 24 06 F1 | 	add	local04, #4
01990     12 2D 62 FC | 	wrlong	local08, local04
01994     01 20 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 20 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     10 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     10 10 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     80 01 00 FF 
019d0     26 31 06 F6 | 	mov	local10, ##@LR__5013
019d4     18 15 02 F6 | 	mov	arg02, local10
019d8     90 EE B1 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     10 27 02 F6 | 	mov	local05, local02
019e8     03 26 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 28 02 F6 | 	mov	local06, objptr
019f8     F2 26 02 F1 | 	add	local05, objptr
019fc     04 26 06 F1 | 	add	local05, #4
01a00     13 33 02 FB | 	rdlong	local11, local05
01a04     04 26 86 F1 | 	sub	local05, #4
01a08     19 35 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     51 00 00 FF 
01a1c     F8 E5 05 F1 | 	add	objptr, ##41976
01a20     F2 36 02 FB | 	rdlong	local13, objptr
01a24     51 00 00 FF 
01a28     F8 E5 85 F1 | 	sub	objptr, ##41976
01a2c     1B 39 02 F6 | 	mov	local14, local13
01a30     1C 21 52 F2 | 	cmps	local02, local14 wc
01a34     01 20 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     51 00 00 FF 
01a40     F8 E5 05 F1 | 	add	objptr, ##41976
01a44     F2 24 02 FB | 	rdlong	local04, objptr
01a48     51 00 00 FF 
01a4c     F8 E5 85 F1 | 	sub	objptr, ##41976
01a50     12 21 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 28 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     14 13 02 F6 | 	mov	arg01, local06
01a70     09 2B 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     15 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 2A 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 2B 82 F1 | 	sub	local07, arg01
01a88     15 27 02 F6 | 	mov	local05, local07
01a8c     13 15 02 F6 | 	mov	arg02, local05
01a90     10 15 82 F1 | 	sub	arg02, local02
01a94     14 13 02 F6 | 	mov	arg01, local06
01a98     AC 0E B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     AC 12 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     E4 11 B2 FD | 	call	#__system__LTrim_S
01aac     51 00 00 FF 
01ab0     FC E5 05 F1 | 	add	objptr, ##41980
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E0 E5 85 F1 | 	sub	objptr, ##13792
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 20 86 F1 | 	sub	local02, #1
01ad0     10 15 02 F6 | 	mov	arg02, local02
01ad4     E8 0D B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     70 12 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     A8 11 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     80 01 00 FF 
01b04     28 25 06 F6 | 	mov	local04, ##@LR__5014
01b08     51 00 00 FF 
01b0c     FC E5 05 F1 | 	add	objptr, ##41980
01b10     F2 24 62 FC | 	wrlong	local04, objptr
01b14     51 00 00 FF 
01b18     FC E5 85 F1 | 	sub	objptr, ##41980
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 24 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     51 00 00 FF 
01b40     FC E5 05 F1 | 	add	objptr, ##41980
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     51 00 00 FF 
01b4c     FC E5 85 F1 | 	sub	objptr, ##41980
01b50     80 01 00 FF 
01b54     29 29 06 F6 | 	mov	local06, ##@LR__5015
01b58     14 15 02 F6 | 	mov	arg02, local06
01b5c     0C ED B1 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 24 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     51 00 00 FF 
01ba0     FC E5 05 F1 | 	add	objptr, ##41980
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     51 00 00 FF 
01bac     FC E5 85 F1 | 	sub	objptr, ##41980
01bb0     80 01 00 FF 
01bb4     2A 15 06 F6 | 	mov	arg02, ##@LR__5016
01bb8     B0 EC B1 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 24 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 24 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     51 00 00 FF 
01bf8     FC E5 05 F1 | 	add	objptr, ##41980
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     51 00 00 FF 
01c04     FC E5 85 F1 | 	sub	objptr, ##41980
01c08     80 01 00 FF 
01c0c     2B 15 06 F6 | 	mov	arg02, ##@LR__5017
01c10     58 EC B1 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 24 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 24 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     51 00 00 FF 
01c50     FC E5 05 F1 | 	add	objptr, ##41980
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     51 00 00 FF 
01c5c     FC E5 85 F1 | 	sub	objptr, ##41980
01c60     80 01 00 FF 
01c64     2C 15 06 F6 | 	mov	arg02, ##@LR__5018
01c68     00 EC B1 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 20 06 F6 | 	mov	local02, #0
01c94     01 3A 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 20 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     10 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     1C 0D B2 FD | 	call	#__system__Mid_S
01cbc     FD 3C 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     1E 13 02 F6 | 	mov	arg01, local16
01cc4     2C 28 B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     1D 23 02 F6 | 	mov	local03, local15
01cd4     02 22 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 22 02 F1 | 	add	local03, fp
01ce0     11 21 62 FC | 	wrlong	local02, local03
01ce4     01 3A 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     51 00 00 FF 
01cf0     F8 E5 05 F1 | 	add	objptr, ##41976
01cf4     F2 24 02 FB | 	rdlong	local04, objptr
01cf8     51 00 00 FF 
01cfc     F8 E5 85 F1 | 	sub	objptr, ##41976
01d00     12 21 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     1D 23 02 F6 | 	mov	local03, local15
01d0c     02 22 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 30 02 F6 | 	mov	local10, fp
01d18     A7 22 02 F1 | 	add	local03, fp
01d1c     11 21 62 FC | 	wrlong	local02, local03
01d20     00 3E 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 20 06 F6 | 	mov	local02, #0
01d28     1D 41 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     20 21 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     10 23 02 F6 | 	mov	local03, local02
01d3c     02 22 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 22 02 F1 | 	add	local03, fp
01d48     11 27 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     04 E4 05 F1 | 	add	objptr, ##41988
01d54     F2 26 62 FC | 	wrlong	local05, objptr
01d58     10 23 02 F6 | 	mov	local03, local02
01d5c     01 22 06 F1 | 	add	local03, #1
01d60     02 22 66 F0 | 	shl	local03, #2
01d64     A7 30 02 F6 | 	mov	local10, fp
01d68     A7 22 02 F1 | 	add	local03, fp
01d6c     11 27 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 26 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 24 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##41988
01d88     01 24 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     E8 E5 05 F1 | 	add	objptr, ##13800
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##41988
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     1C 0C B2 FD | 	call	#__system__Mid_S
01dbc     FD 42 02 F6 | 	mov	local19, result1
01dc0     80 01 00 FF 
01dc4     2D 15 06 F6 | 	mov	arg02, ##@LR__5019
01dc8     21 13 02 F6 | 	mov	arg01, local19
01dcc     9C EA B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     1F 31 02 F6 | 	mov	local10, local17
01ddc     03 30 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 30 02 F1 | 	add	local10, objptr
01dec     18 43 62 FC | 	wrlong	local19, local10
01df0     01 3E 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     E8 E5 05 F1 | 	add	objptr, ##13800
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 32 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     04 E4 85 F1 | 	sub	objptr, ##41988
01e30     19 35 02 F6 | 	mov	local12, local11
01e34     1A 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     98 0B B2 FD | 	call	#__system__Mid_S
01e40     FD 42 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     80 01 00 FF 
01e48     2E 15 06 F6 | 	mov	arg02, ##@LR__5020
01e4c     21 13 02 F6 | 	mov	arg01, local19
01e50     18 EA B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     1F 31 02 F6 | 	mov	local10, local17
01e60     03 30 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 30 02 F1 | 	add	local10, objptr
01e70     18 43 62 FC | 	wrlong	local19, local10
01e74     01 3E 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 20 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 24 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 32 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     19 13 02 F6 | 	mov	arg01, local11
01ed0     44 46 B0 FD | 	call	#_isdec
01ed4     FD 34 02 F6 | 	mov	local12, result1
01ed8     1A 29 22 F6 | 	not	local06, local12
01edc     00 28 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     1F 21 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     10 27 02 F6 | 	mov	local05, local02
01ef8     01 26 86 F1 | 	sub	local05, #1
01efc     03 26 66 F0 | 	shl	local05, #3
01f00     F2 26 02 F1 | 	add	local05, objptr
01f04     13 25 02 FB | 	rdlong	local04, local05
01f08     10 29 02 F6 | 	mov	local06, local02
01f0c     01 28 86 F1 | 	sub	local06, #1
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     04 28 06 F1 | 	add	local06, #4
01f1c     14 23 02 FB | 	rdlong	local03, local06
01f20     10 29 02 F6 | 	mov	local06, local02
01f24     03 28 66 F0 | 	shl	local06, #3
01f28     F2 34 02 F6 | 	mov	local12, objptr
01f2c     F2 28 02 F1 | 	add	local06, objptr
01f30     14 25 62 FC | 	wrlong	local04, local06
01f34     10 33 02 F6 | 	mov	local11, local02
01f38     19 37 02 F6 | 	mov	local13, local11
01f3c     03 36 66 F0 | 	shl	local13, #3
01f40     F2 36 02 F1 | 	add	local13, objptr
01f44     04 36 06 F1 | 	add	local13, #4
01f48     1B 23 62 FC | 	wrlong	local03, local13
01f4c     01 20 86 F1 | 	sub	local02, #1
01f50     01 20 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     80 01 00 FF 
01f5c     2F 25 06 F6 | 	mov	local04, ##@LR__5021
01f60     F2 24 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 3E 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 20 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     10 27 02 F6 | 	mov	local05, local02
01f78     03 26 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 26 02 F1 | 	add	local05, objptr
01f88     13 13 02 FB | 	rdlong	arg01, local05
01f8c     80 01 00 FF 
01f90     31 15 06 F6 | 	mov	arg02, ##@LR__5022
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     CC E8 B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 20 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     10 45 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     10 31 02 F6 | 	mov	local10, local02
01fb4     01 30 06 F1 | 	add	local10, #1
01fb8     03 30 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 30 02 F1 | 	add	local10, objptr
01fc8     18 43 02 FB | 	rdlong	local19, local10
01fcc     22 31 02 F6 | 	mov	local10, local20
01fd0     03 30 66 F0 | 	shl	local10, #3
01fd4     F2 30 02 F1 | 	add	local10, objptr
01fd8     22 33 02 F6 | 	mov	local11, local20
01fdc     19 39 02 F6 | 	mov	local14, local11
01fe0     03 38 66 F0 | 	shl	local14, #3
01fe4     F2 38 02 F1 | 	add	local14, objptr
01fe8     1C 13 02 FB | 	rdlong	arg01, local14
01fec     21 35 02 F6 | 	mov	local12, local19
01ff0     1A 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     A0 E8 B1 FD | 	call	#__system___string_concat
02000     18 FB 61 FC | 	wrlong	result1, local10
02004     10 3B 02 F6 | 	mov	local15, local02
02008     01 3A 06 F1 | 	add	local15, #1
0200c     1F 47 02 F6 | 	mov	local21, local17
02010     01 46 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     23 3B 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     1D 27 02 F6 | 	mov	local05, local15
02024     01 26 06 F1 | 	add	local05, #1
02028     03 26 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 26 02 F1 | 	add	local05, objptr
02038     13 25 02 FB | 	rdlong	local04, local05
0203c     1D 29 02 F6 | 	mov	local06, local15
02040     01 28 06 F1 | 	add	local06, #1
02044     03 28 66 F0 | 	shl	local06, #3
02048     F2 28 02 F1 | 	add	local06, objptr
0204c     04 28 06 F1 | 	add	local06, #4
02050     14 23 02 FB | 	rdlong	local03, local06
02054     1D 29 02 F6 | 	mov	local06, local15
02058     03 28 66 F0 | 	shl	local06, #3
0205c     F2 34 02 F6 | 	mov	local12, objptr
02060     F2 28 02 F1 | 	add	local06, objptr
02064     14 25 62 FC | 	wrlong	local04, local06
02068     1D 33 02 F6 | 	mov	local11, local15
0206c     19 37 02 F6 | 	mov	local13, local11
02070     03 36 66 F0 | 	shl	local13, #3
02074     F2 36 02 F1 | 	add	local13, objptr
02078     04 36 06 F1 | 	add	local13, #4
0207c     1B 23 62 FC | 	wrlong	local03, local13
02080     01 3A 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 3E 86 F1 | 	sub	local17, #1
02094     80 01 00 FF 
02098     33 15 06 F6 | 	mov	arg02, ##@LR__5023
0209c     21 13 02 F6 | 	mov	arg01, local19
020a0     C8 E7 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     80 01 00 FF 
020b4     35 15 06 F6 | 	mov	arg02, ##@LR__5024
020b8     21 13 02 F6 | 	mov	arg01, local19
020bc     AC E7 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 3E 06 51 |  if_ne	add	local17, #1
020c8     01 20 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     1F 21 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 20 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     10 27 02 F6 | 	mov	local05, local02
020dc     03 26 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 28 02 F6 | 	mov	local06, objptr
020ec     F2 26 02 F1 | 	add	local05, objptr
020f0     13 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     44 08 B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     80 01 00 FF 
0210c     37 15 06 F6 | 	mov	arg02, ##@LR__5025
02110     58 E7 B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     10 29 02 F6 | 	mov	local06, local02
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 34 02 F6 | 	mov	local12, objptr
02134     F2 28 02 F1 | 	add	local06, objptr
02138     14 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     74 07 B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     80 01 00 FF 
02154     39 15 06 F6 | 	mov	arg02, ##@LR__5026
02158     10 E7 B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     10 31 02 F6 | 	mov	local10, local02
02168     03 30 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 30 02 F1 | 	add	local10, objptr
02178     10 39 02 F6 | 	mov	local14, local02
0217c     03 38 66 F0 | 	shl	local14, #3
02180     F2 38 02 F1 | 	add	local14, objptr
02184     1C 29 02 FB | 	rdlong	local06, local14
02188     10 37 02 F6 | 	mov	local13, local02
0218c     01 36 06 F1 | 	add	local13, #1
02190     03 36 66 F0 | 	shl	local13, #3
02194     F2 36 02 F1 | 	add	local13, objptr
02198     1B 35 02 FB | 	rdlong	local12, local13
0219c     10 49 02 F6 | 	mov	local22, local02
021a0     01 48 06 F1 | 	add	local22, #1
021a4     24 4B 02 F6 | 	mov	local23, local22
021a8     03 4A 66 F0 | 	shl	local23, #3
021ac     F2 4C 02 F6 | 	mov	local24, objptr
021b0     F2 4A 02 F1 | 	add	local23, objptr
021b4     25 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 2B 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 2A 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 2B 82 F1 | 	sub	local07, arg01
021d8     15 33 02 F6 | 	mov	local11, local07
021dc     01 32 86 F1 | 	sub	local11, #1
021e0     1A 13 02 F6 | 	mov	arg01, local12
021e4     19 15 02 F6 | 	mov	arg02, local11
021e8     5C 07 B2 FD | 	call	#__system__Right_S
021ec     FD 34 02 F6 | 	mov	local12, result1
021f0     14 13 02 F6 | 	mov	arg01, local06
021f4     1A 15 02 F6 | 	mov	arg02, local12
021f8     A4 E6 B1 FD | 	call	#__system___string_concat
021fc     FD 28 02 F6 | 	mov	local06, result1
02200     18 29 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     10 3B 02 F6 | 	mov	local15, local02
02208     01 3A 06 F1 | 	add	local15, #1
0220c     1F 4F 02 F6 | 	mov	local25, local17
02210     01 4E 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     27 3B 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     1D 27 02 F6 | 	mov	local05, local15
02224     01 26 06 F1 | 	add	local05, #1
02228     03 26 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 26 02 F1 | 	add	local05, objptr
02238     13 25 02 FB | 	rdlong	local04, local05
0223c     1D 29 02 F6 | 	mov	local06, local15
02240     01 28 06 F1 | 	add	local06, #1
02244     03 28 66 F0 | 	shl	local06, #3
02248     F2 28 02 F1 | 	add	local06, objptr
0224c     04 28 06 F1 | 	add	local06, #4
02250     14 23 02 FB | 	rdlong	local03, local06
02254     1D 29 02 F6 | 	mov	local06, local15
02258     03 28 66 F0 | 	shl	local06, #3
0225c     F2 34 02 F6 | 	mov	local12, objptr
02260     F2 28 02 F1 | 	add	local06, objptr
02264     14 25 62 FC | 	wrlong	local04, local06
02268     1D 33 02 F6 | 	mov	local11, local15
0226c     19 37 02 F6 | 	mov	local13, local11
02270     03 36 66 F0 | 	shl	local13, #3
02274     F2 36 02 F1 | 	add	local13, objptr
02278     04 36 06 F1 | 	add	local13, #4
0227c     1B 23 62 FC | 	wrlong	local03, local13
02280     01 3A 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 20 86 F1 | 	sub	local02, #1
02294     01 3E 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 20 06 F1 | 	add	local02, #1
0229c     1F 21 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 20 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     10 31 02 F6 | 	mov	local10, local02
022ac     03 30 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 30 02 F1 | 	add	local10, objptr
022bc     18 51 02 FB | 	rdlong	local26, local10
022c0     10 31 02 F6 | 	mov	local10, local02
022c4     01 30 06 F1 | 	add	local10, #1
022c8     03 30 66 F0 | 	shl	local10, #3
022cc     F2 30 02 F1 | 	add	local10, objptr
022d0     18 53 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     80 01 00 FF 
022d8     3B 15 06 F6 | 	mov	arg02, ##@LR__5027
022dc     28 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     80 E5 B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     80 01 00 FF 
022f8     3D 15 06 F6 | 	mov	arg02, ##@LR__5028
022fc     28 13 02 F6 | 	mov	arg01, local26
02300     68 E5 B1 FD | 	call	#__system___string_cmp
02304     FD 22 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     80 01 00 FF 
02310     3F 29 06 F6 | 	mov	local06, ##@LR__5029
02314     28 13 02 F6 | 	mov	arg01, local26
02318     14 15 02 F6 | 	mov	arg02, local06
0231c     4C E5 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     80 01 00 FF 
0232c     41 35 06 F6 | 	mov	local12, ##@LR__5030
02330     28 13 02 F6 | 	mov	arg01, local26
02334     1A 15 02 F6 | 	mov	arg02, local12
02338     30 E5 B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     80 01 00 FF 
02348     43 33 06 F6 | 	mov	local11, ##@LR__5031
0234c     19 35 02 F6 | 	mov	local12, local11
02350     28 13 02 F6 | 	mov	arg01, local26
02354     1A 15 02 F6 | 	mov	arg02, local12
02358     10 E5 B1 FD | 	call	#__system___string_cmp
0235c     FD 28 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     80 01 00 FF 
02368     45 33 06 F6 | 	mov	local11, ##@LR__5032
0236c     28 13 02 F6 | 	mov	arg01, local26
02370     19 15 02 F6 | 	mov	arg02, local11
02374     F4 E4 B1 FD | 	call	#__system___string_cmp
02378     FD 34 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     80 01 00 FF 
02384     47 39 06 F6 | 	mov	local14, ##@LR__5033
02388     28 13 02 F6 | 	mov	arg01, local26
0238c     1C 15 02 F6 | 	mov	arg02, local14
02390     D8 E4 B1 FD | 	call	#__system___string_cmp
02394     FD 32 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     80 01 00 FF 
023a0     49 55 06 F6 | 	mov	local28, ##@LR__5034
023a4     2A 37 02 F6 | 	mov	local13, local28
023a8     29 13 02 F6 | 	mov	arg01, local27
023ac     1B 15 02 F6 | 	mov	arg02, local13
023b0     B8 E4 B1 FD | 	call	#__system___string_cmp
023b4     FD 38 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     80 01 00 FF 
023c0     4B 55 06 F6 | 	mov	local28, ##@LR__5035
023c4     28 13 02 F6 | 	mov	arg01, local26
023c8     2A 15 02 F6 | 	mov	arg02, local28
023cc     9C E4 B1 FD | 	call	#__system___string_cmp
023d0     FD 36 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     80 01 00 FF 
023dc     4D 4B 06 F6 | 	mov	local23, ##@LR__5036
023e0     25 49 02 F6 | 	mov	local22, local23
023e4     29 13 02 F6 | 	mov	arg01, local27
023e8     24 15 02 F6 | 	mov	arg02, local22
023ec     7C E4 B1 FD | 	call	#__system___string_cmp
023f0     FD 54 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     80 01 00 FF 
023fc     4F 4B 06 F6 | 	mov	local23, ##@LR__5037
02400     28 13 02 F6 | 	mov	arg01, local26
02404     25 15 02 F6 | 	mov	arg02, local23
02408     60 E4 B1 FD | 	call	#__system___string_cmp
0240c     FD 48 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     80 01 00 FF 
02418     51 57 06 F6 | 	mov	local29, ##@LR__5038
0241c     2B 4D 02 F6 | 	mov	local24, local29
02420     29 13 02 F6 | 	mov	arg01, local27
02424     26 15 02 F6 | 	mov	arg02, local24
02428     40 E4 B1 FD | 	call	#__system___string_cmp
0242c     FD 4A 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     80 01 00 FF 
02438     53 59 06 F6 | 	mov	local30, ##@LR__5039
0243c     2C 57 02 F6 | 	mov	local29, local30
02440     28 13 02 F6 | 	mov	arg01, local26
02444     2B 15 02 F6 | 	mov	arg02, local29
02448     20 E4 B1 FD | 	call	#__system___string_cmp
0244c     FD 4C 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     80 01 00 FF 
02458     55 5B 06 F6 | 	mov	local31, ##@LR__5040
0245c     2D 59 02 F6 | 	mov	local30, local31
02460     29 13 02 F6 | 	mov	arg01, local27
02464     2C 15 02 F6 | 	mov	arg02, local30
02468     00 E4 B1 FD | 	call	#__system___string_cmp
0246c     FD 56 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     10 31 02 F6 | 	mov	local10, local02
02478     03 30 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 30 02 F1 | 	add	local10, objptr
02488     29 35 02 F6 | 	mov	local12, local27
0248c     28 13 02 F6 | 	mov	arg01, local26
02490     1A 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     00 E4 B1 FD | 	call	#__system___string_concat
024a0     18 FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     10 3B 02 F6 | 	mov	local15, local02
024a8     01 3A 06 F1 | 	add	local15, #1
024ac     1F 5D 02 F6 | 	mov	local32, local17
024b0     01 5C 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     2E 3B 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     1D 27 02 F6 | 	mov	local05, local15
024c4     01 26 06 F1 | 	add	local05, #1
024c8     03 26 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 26 02 F1 | 	add	local05, objptr
024d8     13 25 02 FB | 	rdlong	local04, local05
024dc     1D 29 02 F6 | 	mov	local06, local15
024e0     01 28 06 F1 | 	add	local06, #1
024e4     03 28 66 F0 | 	shl	local06, #3
024e8     F2 28 02 F1 | 	add	local06, objptr
024ec     04 28 06 F1 | 	add	local06, #4
024f0     14 23 02 FB | 	rdlong	local03, local06
024f4     1D 29 02 F6 | 	mov	local06, local15
024f8     03 28 66 F0 | 	shl	local06, #3
024fc     F2 34 02 F6 | 	mov	local12, objptr
02500     F2 28 02 F1 | 	add	local06, objptr
02504     14 25 62 FC | 	wrlong	local04, local06
02508     1D 33 02 F6 | 	mov	local11, local15
0250c     19 39 02 F6 | 	mov	local14, local11
02510     1C 37 02 F6 | 	mov	local13, local14
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 54 02 F6 | 	mov	local28, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     04 36 06 F1 | 	add	local13, #4
02524     1B 23 62 FC | 	wrlong	local03, local13
02528     04 36 86 F1 | 	sub	local13, #4
0252c     01 3A 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 20 86 F1 | 	sub	local02, #1
02540     01 3E 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 20 06 F1 | 	add	local02, #1
02548     1F 21 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 20 06 F6 | 	mov	local02, #0
02554     1F 5F 02 F6 | 	mov	local33, local17
02558     01 5E 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     2F 21 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     10 31 02 F6 | 	mov	local10, local02
02568     03 30 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 30 02 F1 | 	add	local10, objptr
02578     10 35 02 F6 | 	mov	local12, local02
0257c     1A 33 02 F6 | 	mov	local11, local12
02580     19 39 02 F6 | 	mov	local14, local11
02584     03 38 66 F0 | 	shl	local14, #3
02588     F2 36 02 F6 | 	mov	local13, objptr
0258c     F2 38 02 F1 | 	add	local14, objptr
02590     1C 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     B0 07 B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     E8 06 B2 FD | 	call	#__system__LTrim_S
025a8     18 FB 61 FC | 	wrlong	result1, local10
025ac     01 20 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 20 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     10 27 02 F6 | 	mov	local05, local02
025c0     03 26 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 26 02 F1 | 	add	local05, objptr
025d0     13 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 2B 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 2A 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 2B 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     1F 25 02 F6 | 	mov	local04, local17
025f8     01 24 86 F1 | 	sub	local04, #1
025fc     12 21 0A F2 | 	cmp	local02, local04 wz
02600     01 3E 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     1F 25 02 F6 | 	mov	local04, local17
0260c     01 24 86 F1 | 	sub	local04, #1
02610     12 21 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     10 3B 02 F6 | 	mov	local15, local02
0261c     1F 61 02 F6 | 	mov	local34, local17
02620     01 60 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     30 3B 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     1D 27 02 F6 | 	mov	local05, local15
02630     01 26 06 F1 | 	add	local05, #1
02634     03 26 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 26 02 F1 | 	add	local05, objptr
02644     13 25 02 FB | 	rdlong	local04, local05
02648     1D 29 02 F6 | 	mov	local06, local15
0264c     01 28 06 F1 | 	add	local06, #1
02650     03 28 66 F0 | 	shl	local06, #3
02654     F2 28 02 F1 | 	add	local06, objptr
02658     04 28 06 F1 | 	add	local06, #4
0265c     14 23 02 FB | 	rdlong	local03, local06
02660     1D 31 02 F6 | 	mov	local10, local15
02664     18 29 02 F6 | 	mov	local06, local10
02668     03 28 66 F0 | 	shl	local06, #3
0266c     F2 34 02 F6 | 	mov	local12, objptr
02670     F2 28 02 F1 | 	add	local06, objptr
02674     14 25 62 FC | 	wrlong	local04, local06
02678     1D 33 02 F6 | 	mov	local11, local15
0267c     19 39 02 F6 | 	mov	local14, local11
02680     1C 37 02 F6 | 	mov	local13, local14
02684     03 36 66 F0 | 	shl	local13, #3
02688     F2 54 02 F6 | 	mov	local28, objptr
0268c     F2 36 02 F1 | 	add	local13, objptr
02690     04 36 06 F1 | 	add	local13, #4
02694     1B 23 62 FC | 	wrlong	local03, local13
02698     04 36 86 F1 | 	sub	local13, #4
0269c     01 3A 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 3E 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 20 56 F2 | 	cmps	local02, #1 wc
026b4     01 20 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 20 06 F1 | 	add	local02, #1
026bc     1F 25 02 F6 | 	mov	local04, local17
026c0     01 24 86 F1 | 	sub	local04, #1
026c4     12 21 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 3A 06 F6 | 	mov	local15, #0
026d0     1F 63 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     31 3B 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     1D 27 02 F6 | 	mov	local05, local15
026e0     03 26 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 26 02 F1 | 	add	local05, objptr
026f0     13 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     BC 01 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     80 01 00 FF 
0270c     57 15 06 F6 | 	mov	arg02, ##@LR__5041
02710     58 E1 B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     1D 29 02 F6 | 	mov	local06, local15
02720     03 28 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 34 02 F6 | 	mov	local12, objptr
02730     F2 28 02 F1 | 	add	local06, objptr
02734     14 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     00 02 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     80 01 00 FF 
02750     59 15 06 F6 | 	mov	arg02, ##@LR__5042
02754     14 E1 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     1D 31 02 F6 | 	mov	local10, local15
02764     03 30 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 30 02 F1 | 	add	local10, objptr
02774     1D 33 02 F6 | 	mov	local11, local15
02778     19 39 02 F6 | 	mov	local14, local11
0277c     03 38 66 F0 | 	shl	local14, #3
02780     F2 36 02 F6 | 	mov	local13, objptr
02784     F2 38 02 F1 | 	add	local14, objptr
02788     1C 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     38 04 B2 FD | 	call	#__system__LCase_S
02798     18 FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 3A 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 20 06 F6 | 	mov	local02, #0
027a8     1F 65 02 F6 | 	mov	local36, local17
027ac     01 64 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     32 21 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     10 31 02 F6 | 	mov	local10, local02
027c0     03 30 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 30 02 F1 | 	add	local10, objptr
027d0     04 30 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     18 FF 6B FC | 	wrlong	##-1, local10
027dc     01 20 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     14 3D B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 66 06 56 |  if_ne	mov	local37, #1
0280c     00 66 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     80 01 00 FF 
02828     5B 15 06 F6 | 	mov	arg02, ##@LR__5043
0282c     3C E0 B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 66 06 A6 |  if_e	mov	local37, #1
02838     00 20 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     80 01 00 FF 
02858     60 15 06 F6 | 	mov	arg02, ##@LR__5044
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     04 E0 B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 20 06 F1 | 	add	local02, #1
02874     1F 21 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     1F 21 52 F2 | 	cmps	local02, local17 wc
02880     10 67 02 C6 |  if_b	mov	local37, local02
02884     01 66 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     33 29 02 F6 | 	mov	local06, local37
02894     03 28 66 F0 | 	shl	local06, #3
02898     F2 34 02 F6 | 	mov	local12, objptr
0289c     F2 28 02 F1 | 	add	local06, objptr
028a0     14 15 02 FB | 	rdlong	arg02, local06
028a4     80 01 00 FF 
028a8     65 17 06 F6 | 	mov	arg03, ##@LR__5045
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     4C 05 B2 FD | 	call	#__system__Instr
028bc     FD 68 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 68 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     33 27 02 F6 | 	mov	local05, local37
028cc     03 26 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 26 02 F1 | 	add	local05, objptr
028dc     13 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 2B 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     15 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 2A 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 2B 82 F1 | 	sub	local07, arg01
02900     15 69 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 3E 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     1F 21 02 F6 | 	mov	local02, local17
02910     33 6B 02 F6 | 	mov	local39, local37
02914     01 6A 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     10 27 02 F6 | 	mov	local05, local02
02928     01 26 86 F1 | 	sub	local05, #1
0292c     03 26 66 F0 | 	shl	local05, #3
02930     F2 26 02 F1 | 	add	local05, objptr
02934     13 25 02 FB | 	rdlong	local04, local05
02938     10 29 02 F6 | 	mov	local06, local02
0293c     01 28 86 F1 | 	sub	local06, #1
02940     03 28 66 F0 | 	shl	local06, #3
02944     F2 28 02 F1 | 	add	local06, objptr
02948     04 28 06 F1 | 	add	local06, #4
0294c     14 23 02 FB | 	rdlong	local03, local06
02950     10 29 02 F6 | 	mov	local06, local02
02954     03 28 66 F0 | 	shl	local06, #3
02958     F2 28 02 F1 | 	add	local06, objptr
0295c     14 25 62 FC | 	wrlong	local04, local06
02960     10 37 02 F6 | 	mov	local13, local02
02964     03 36 66 F0 | 	shl	local13, #3
02968     F2 36 02 F1 | 	add	local13, objptr
0296c     04 36 06 F1 | 	add	local13, #4
02970     1B 23 62 FC | 	wrlong	local03, local13
02974     01 20 86 F1 | 	sub	local02, #1
02978     35 21 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     33 31 02 F6 | 	mov	local10, local37
02984     01 30 06 F1 | 	add	local10, #1
02988     03 30 66 F0 | 	shl	local10, #3
0298c     F2 30 02 F1 | 	add	local10, objptr
02990     33 39 02 F6 | 	mov	local14, local37
02994     03 38 66 F0 | 	shl	local14, #3
02998     F2 38 02 F1 | 	add	local14, objptr
0299c     1C 29 02 FB | 	rdlong	local06, local14
029a0     33 55 02 F6 | 	mov	local28, local37
029a4     2A 49 02 F6 | 	mov	local22, local28
029a8     03 48 66 F0 | 	shl	local22, #3
029ac     F2 4A 02 F6 | 	mov	local23, objptr
029b0     F2 48 02 F1 | 	add	local22, objptr
029b4     24 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 2B 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 2A 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 2B 82 F1 | 	sub	local07, arg01
029d8     15 15 02 F6 | 	mov	arg02, local07
029dc     34 15 82 F1 | 	sub	arg02, local38
029e0     14 13 02 F6 | 	mov	arg01, local06
029e4     60 FF B1 FD | 	call	#__system__Right_S
029e8     18 FB 61 FC | 	wrlong	result1, local10
029ec     33 31 02 F6 | 	mov	local10, local37
029f0     03 30 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 30 02 F1 | 	add	local10, objptr
02a00     33 33 02 F6 | 	mov	local11, local37
02a04     19 39 02 F6 | 	mov	local14, local11
02a08     03 38 66 F0 | 	shl	local14, #3
02a0c     F2 36 02 F6 | 	mov	local13, objptr
02a10     F2 38 02 F1 | 	add	local14, objptr
02a14     1C 13 02 FB | 	rdlong	arg01, local14
02a18     34 35 02 F6 | 	mov	local12, local38
02a1c     1A 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     94 FE B1 FD | 	call	#__system__Left_S
02a2c     18 FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     33 27 02 F6 | 	mov	local05, local37
02a34     03 26 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 26 02 F1 | 	add	local05, objptr
02a44     13 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     68 FE B1 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     80 01 00 FF 
02a60     67 15 06 F6 | 	mov	arg02, ##@LR__5046
02a64     04 DE B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     33 29 02 F6 | 	mov	local06, local37
02a74     03 28 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 34 02 F6 | 	mov	local12, objptr
02a84     F2 28 02 F1 | 	add	local06, objptr
02a88     14 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 2B 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 2A 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 2B 82 F1 | 	sub	local07, arg01
02aac     02 2A 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 3E 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     1F 21 02 F6 | 	mov	local02, local17
02abc     33 6D 02 F6 | 	mov	local40, local37
02ac0     01 6C 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     10 27 02 F6 | 	mov	local05, local02
02ad4     01 26 86 F1 | 	sub	local05, #1
02ad8     03 26 66 F0 | 	shl	local05, #3
02adc     F2 26 02 F1 | 	add	local05, objptr
02ae0     13 25 02 FB | 	rdlong	local04, local05
02ae4     10 29 02 F6 | 	mov	local06, local02
02ae8     01 28 86 F1 | 	sub	local06, #1
02aec     03 28 66 F0 | 	shl	local06, #3
02af0     F2 28 02 F1 | 	add	local06, objptr
02af4     04 28 06 F1 | 	add	local06, #4
02af8     14 23 02 FB | 	rdlong	local03, local06
02afc     10 29 02 F6 | 	mov	local06, local02
02b00     03 28 66 F0 | 	shl	local06, #3
02b04     F2 28 02 F1 | 	add	local06, objptr
02b08     14 25 62 FC | 	wrlong	local04, local06
02b0c     10 37 02 F6 | 	mov	local13, local02
02b10     03 36 66 F0 | 	shl	local13, #3
02b14     F2 36 02 F1 | 	add	local13, objptr
02b18     04 36 06 F1 | 	add	local13, #4
02b1c     1B 23 62 FC | 	wrlong	local03, local13
02b20     01 20 86 F1 | 	sub	local02, #1
02b24     36 21 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     33 31 02 F6 | 	mov	local10, local37
02b30     01 30 06 F1 | 	add	local10, #1
02b34     03 30 66 F0 | 	shl	local10, #3
02b38     F2 30 02 F1 | 	add	local10, objptr
02b3c     33 39 02 F6 | 	mov	local14, local37
02b40     03 38 66 F0 | 	shl	local14, #3
02b44     F2 38 02 F1 | 	add	local14, objptr
02b48     1C 29 02 FB | 	rdlong	local06, local14
02b4c     33 37 02 F6 | 	mov	local13, local37
02b50     1B 55 02 F6 | 	mov	local28, local13
02b54     2A 49 02 F6 | 	mov	local22, local28
02b58     03 48 66 F0 | 	shl	local22, #3
02b5c     F2 4A 02 F6 | 	mov	local23, objptr
02b60     F2 48 02 F1 | 	add	local22, objptr
02b64     24 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 2B 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     15 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 2A 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 2B 82 F1 | 	sub	local07, arg01
02b88     15 39 02 F6 | 	mov	local14, local07
02b8c     1C 33 02 F6 | 	mov	local11, local14
02b90     01 32 86 F1 | 	sub	local11, #1
02b94     19 35 02 F6 | 	mov	local12, local11
02b98     14 13 02 F6 | 	mov	arg01, local06
02b9c     1A 15 02 F6 | 	mov	arg02, local12
02ba0     A4 FD B1 FD | 	call	#__system__Right_S
02ba4     18 FB 61 FC | 	wrlong	result1, local10
02ba8     33 31 02 F6 | 	mov	local10, local37
02bac     03 30 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 30 02 F1 | 	add	local10, objptr
02bbc     80 01 00 FF 
02bc0     69 29 06 F6 | 	mov	local06, ##@LR__5047
02bc4     18 29 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     33 31 02 F6 | 	mov	local10, local37
02bd4     03 30 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 30 02 F1 | 	add	local10, objptr
02be4     18 6F 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     80 01 00 FF 
02bec     6B 15 06 F6 | 	mov	arg02, ##@LR__5048
02bf0     37 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     6C DC B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     80 01 00 FF 
02c0c     71 15 06 F6 | 	mov	arg02, ##@LR__5049
02c10     37 13 02 F6 | 	mov	arg01, local41
02c14     54 DC B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     80 01 00 FF 
02c24     78 15 06 F6 | 	mov	arg02, ##@LR__5050
02c28     37 13 02 F6 | 	mov	arg01, local41
02c2c     3C DC B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     33 27 02 F6 | 	mov	local05, local37
02c3c     01 26 06 F1 | 	add	local05, #1
02c40     03 26 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     13 13 02 FB | 	rdlong	arg01, local05
02c54     80 01 00 FF 
02c58     7E 15 06 F6 | 	mov	arg02, ##@LR__5051
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     04 DC B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     33 31 02 F6 | 	mov	local10, local37
02c74     01 30 06 F1 | 	add	local10, #1
02c78     03 30 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 30 02 F1 | 	add	local10, objptr
02c88     80 01 00 FF 
02c8c     81 29 06 F6 | 	mov	local06, ##@LR__5052
02c90     18 29 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     33 27 02 F6 | 	mov	local05, local37
02cac     01 26 06 F1 | 	add	local05, #1
02cb0     03 26 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 26 02 F1 | 	add	local05, objptr
02cc0     13 13 02 FB | 	rdlong	arg01, local05
02cc4     80 01 00 FF 
02cc8     83 15 06 F6 | 	mov	arg02, ##@LR__5053
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     94 DB B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     33 31 02 F6 | 	mov	local10, local37
02ce4     01 30 06 F1 | 	add	local10, #1
02ce8     03 30 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 30 02 F1 | 	add	local10, objptr
02cf8     80 01 00 FF 
02cfc     87 29 06 F6 | 	mov	local06, ##@LR__5054
02d00     18 29 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     80 01 00 FF 
02d1c     89 15 06 F6 | 	mov	arg02, ##@LR__5055
02d20     37 13 02 F6 | 	mov	arg01, local41
02d24     44 DB B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     80 01 00 FF 
02d34     8E 15 06 F6 | 	mov	arg02, ##@LR__5056
02d38     37 13 02 F6 | 	mov	arg01, local41
02d3c     2C DB B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     33 27 02 F6 | 	mov	local05, local37
02d4c     01 26 06 F1 | 	add	local05, #1
02d50     03 26 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 26 02 F1 | 	add	local05, objptr
02d60     13 13 02 FB | 	rdlong	arg01, local05
02d64     80 01 00 FF 
02d68     91 15 06 F6 | 	mov	arg02, ##@LR__5057
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     F4 DA B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     33 31 02 F6 | 	mov	local10, local37
02d84     01 30 06 F1 | 	add	local10, #1
02d88     03 30 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 30 02 F1 | 	add	local10, objptr
02d98     80 01 00 FF 
02d9c     97 29 06 F6 | 	mov	local06, ##@LR__5058
02da0     18 29 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     33 27 02 F6 | 	mov	local05, local37
02db0     01 26 06 F1 | 	add	local05, #1
02db4     03 26 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 26 02 F1 | 	add	local05, objptr
02dc4     13 13 02 FB | 	rdlong	arg01, local05
02dc8     80 01 00 FF 
02dcc     99 15 06 F6 | 	mov	arg02, ##@LR__5059
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     90 DA B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     33 31 02 F6 | 	mov	local10, local37
02de8     01 30 06 F1 | 	add	local10, #1
02dec     03 30 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 30 02 F1 | 	add	local10, objptr
02dfc     80 01 00 FF 
02e00     A2 29 06 F6 | 	mov	local06, ##@LR__5060
02e04     18 29 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     33 27 02 F6 | 	mov	local05, local37
02e14     01 26 06 F1 | 	add	local05, #1
02e18     03 26 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 26 02 F1 | 	add	local05, objptr
02e28     13 13 02 FB | 	rdlong	arg01, local05
02e2c     80 01 00 FF 
02e30     A4 15 06 F6 | 	mov	arg02, ##@LR__5061
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     2C DA B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     33 31 02 F6 | 	mov	local10, local37
02e4c     01 30 06 F1 | 	add	local10, #1
02e50     03 30 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 30 02 F1 | 	add	local10, objptr
02e60     80 01 00 FF 
02e64     AD 29 06 F6 | 	mov	local06, ##@LR__5062
02e68     18 29 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     33 27 02 F6 | 	mov	local05, local37
02e78     01 26 06 F1 | 	add	local05, #1
02e7c     03 26 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 26 02 F1 | 	add	local05, objptr
02e8c     13 13 02 FB | 	rdlong	arg01, local05
02e90     80 01 00 FF 
02e94     AF 15 06 F6 | 	mov	arg02, ##@LR__5063
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     C8 D9 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     33 31 02 F6 | 	mov	local10, local37
02eb0     01 30 06 F1 | 	add	local10, #1
02eb4     03 30 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 30 02 F1 | 	add	local10, objptr
02ec4     80 01 00 FF 
02ec8     B8 29 06 F6 | 	mov	local06, ##@LR__5064
02ecc     18 29 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     33 27 02 F6 | 	mov	local05, local37
02edc     01 26 06 F1 | 	add	local05, #1
02ee0     03 26 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 26 02 F1 | 	add	local05, objptr
02ef0     13 13 02 FB | 	rdlong	arg01, local05
02ef4     80 01 00 FF 
02ef8     BA 15 06 F6 | 	mov	arg02, ##@LR__5065
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     64 D9 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     33 31 02 F6 | 	mov	local10, local37
02f14     01 30 06 F1 | 	add	local10, #1
02f18     03 30 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 30 02 F1 | 	add	local10, objptr
02f28     80 01 00 FF 
02f2c     BD 29 06 F6 | 	mov	local06, ##@LR__5066
02f30     18 29 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 20 06 F6 | 	mov	local02, #0
02f40     1F 71 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     38 21 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     10 31 02 F6 | 	mov	local10, local02
02f50     03 30 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 30 02 F1 | 	add	local10, objptr
02f60     10 33 02 F6 | 	mov	local11, local02
02f64     19 39 02 F6 | 	mov	local14, local11
02f68     1C 37 02 F6 | 	mov	local13, local14
02f6c     03 36 66 F0 | 	shl	local13, #3
02f70     F2 36 02 F1 | 	add	local13, objptr
02f74     1B 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     70 15 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 30 06 F1 | 	add	local10, #4
02f8c     18 FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     10 31 02 F6 | 	mov	local10, local02
02f94     03 30 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 30 02 F1 | 	add	local10, objptr
02fa4     04 30 06 F1 | 	add	local10, #4
02fa8     18 35 02 FB | 	rdlong	local12, local10
02fac     01 34 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     10 31 02 F6 | 	mov	local10, local02
02fc0     03 30 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 30 02 F1 | 	add	local10, objptr
02fd0     10 33 02 F6 | 	mov	local11, local02
02fd4     19 39 02 F6 | 	mov	local14, local11
02fd8     1C 37 02 F6 | 	mov	local13, local14
02fdc     03 36 66 F0 | 	shl	local13, #3
02fe0     F2 36 02 F1 | 	add	local13, objptr
02fe4     1B 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     4C 0D B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 30 06 F1 | 	add	local10, #4
02ffc     18 FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     10 31 02 F6 | 	mov	local10, local02
03004     03 30 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 30 02 F1 | 	add	local10, objptr
03014     04 30 06 F1 | 	add	local10, #4
03018     18 35 02 FB | 	rdlong	local12, local10
0301c     01 34 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     10 31 02 F6 | 	mov	local10, local02
03030     03 30 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 30 02 F1 | 	add	local10, objptr
03040     10 33 02 F6 | 	mov	local11, local02
03044     19 39 02 F6 | 	mov	local14, local11
03048     1C 37 02 F6 | 	mov	local13, local14
0304c     03 36 66 F0 | 	shl	local13, #3
03050     F2 36 02 F1 | 	add	local13, objptr
03054     1B 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     81 01 00 FF 
03064     92 14 06 F6 | 	mov	arg02, ##@LR__5143
03068     00 D8 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 30 06 F1 | 	add	local10, #4
03080     18 FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     10 31 02 F6 | 	mov	local10, local02
03088     03 30 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 30 02 F1 | 	add	local10, objptr
03098     04 30 06 F1 | 	add	local10, #4
0309c     18 35 02 FB | 	rdlong	local12, local10
030a0     01 34 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     10 31 02 F6 | 	mov	local10, local02
030b4     03 30 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 30 02 F1 | 	add	local10, objptr
030c4     10 33 02 F6 | 	mov	local11, local02
030c8     19 39 02 F6 | 	mov	local14, local11
030cc     1C 37 02 F6 | 	mov	local13, local14
030d0     03 36 66 F0 | 	shl	local13, #3
030d4     F2 36 02 F1 | 	add	local13, objptr
030d8     1B 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     0C 16 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 30 06 F1 | 	add	local10, #4
030f0     18 FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     10 31 02 F6 | 	mov	local10, local02
030f8     03 30 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 30 02 F1 | 	add	local10, objptr
03108     04 30 06 F1 | 	add	local10, #4
0310c     18 35 02 FB | 	rdlong	local12, local10
03110     01 34 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     10 31 02 F6 | 	mov	local10, local02
03124     03 30 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 30 02 F1 | 	add	local10, objptr
03134     10 33 02 F6 | 	mov	local11, local02
03138     19 39 02 F6 | 	mov	local14, local11
0313c     1C 37 02 F6 | 	mov	local13, local14
03140     03 36 66 F0 | 	shl	local13, #3
03144     F2 54 02 F6 | 	mov	local28, objptr
03148     F2 36 02 F1 | 	add	local13, objptr
0314c     1B 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     18 25 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 30 06 F1 | 	add	local10, #4
03164     18 FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     10 31 02 F6 | 	mov	local10, local02
0316c     03 30 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 30 02 F1 | 	add	local10, objptr
0317c     04 30 06 F1 | 	add	local10, #4
03180     18 35 02 FB | 	rdlong	local12, local10
03184     01 34 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     10 31 02 F6 | 	mov	local10, local02
03198     03 30 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 30 02 F1 | 	add	local10, objptr
031a8     10 33 02 F6 | 	mov	local11, local02
031ac     19 39 02 F6 | 	mov	local14, local11
031b0     03 38 66 F0 | 	shl	local14, #3
031b4     F2 36 02 F6 | 	mov	local13, objptr
031b8     F2 38 02 F1 | 	add	local14, objptr
031bc     1C 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     BC 0F B0 FD | 	call	#_isnotename
031cc     04 30 06 F1 | 	add	local10, #4
031d0     18 FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     10 31 02 F6 | 	mov	local10, local02
031d8     03 30 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 30 02 F1 | 	add	local10, objptr
031e8     04 30 06 F1 | 	add	local10, #4
031ec     18 29 02 FB | 	rdlong	local06, local10
031f0     01 28 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     10 27 02 F6 | 	mov	local05, local02
03204     03 26 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 26 02 F1 | 	add	local05, objptr
03214     04 26 06 F1 | 	add	local05, #4
03218     13 35 02 FB | 	rdlong	local12, local05
0321c     1A 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     10 34 B0 FD | 	call	#_getnoteval
0322c     FD 72 02 F6 | 	mov	local43, result1
03230     10 31 02 F6 | 	mov	local10, local02
03234     03 30 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 30 02 F1 | 	add	local10, objptr
03244     39 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     64 F8 B1 FD | 	call	#__system__str_S
03254     18 FB 61 FC | 	wrlong	result1, local10
03258     10 25 02 F6 | 	mov	local04, local02
0325c     12 23 02 F6 | 	mov	local03, local04
03260     11 31 02 F6 | 	mov	local10, local03
03264     03 30 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 30 02 F1 | 	add	local10, objptr
03274     04 30 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     18 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     10 31 02 F6 | 	mov	local10, local02
03290     03 30 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 30 02 F1 | 	add	local10, objptr
032a0     10 39 02 F6 | 	mov	local14, local02
032a4     03 38 66 F0 | 	shl	local14, #3
032a8     F2 38 02 F1 | 	add	local14, objptr
032ac     1C 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     64 0D B0 FD | 	call	#_ischannel
032bc     04 30 06 F1 | 	add	local10, #4
032c0     18 FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     10 31 02 F6 | 	mov	local10, local02
032c8     03 30 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 30 02 F1 | 	add	local10, objptr
032d8     04 30 06 F1 | 	add	local10, #4
032dc     18 29 02 FB | 	rdlong	local06, local10
032e0     01 28 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     10 31 02 F6 | 	mov	local10, local02
032f4     03 30 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 30 02 F1 | 	add	local10, objptr
03304     10 33 02 F6 | 	mov	local11, local02
03308     19 39 02 F6 | 	mov	local14, local11
0330c     03 38 66 F0 | 	shl	local14, #3
03310     F2 36 02 F6 | 	mov	local13, objptr
03314     F2 38 02 F1 | 	add	local14, objptr
03318     1C 13 02 FB | 	rdlong	arg01, local14
0331c     01 34 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     18 F6 B1 FD | 	call	#__system__Right_S
03330     18 FB 61 FC | 	wrlong	result1, local10
03334     10 25 02 F6 | 	mov	local04, local02
03338     12 23 02 F6 | 	mov	local03, local04
0333c     11 31 02 F6 | 	mov	local10, local03
03340     03 30 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 30 02 F1 | 	add	local10, objptr
03350     04 30 06 F1 | 	add	local10, #4
03354     18 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     10 31 02 F6 | 	mov	local10, local02
03368     03 30 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 30 02 F1 | 	add	local10, objptr
03378     10 33 02 F6 | 	mov	local11, local02
0337c     19 39 02 F6 | 	mov	local14, local11
03380     03 38 66 F0 | 	shl	local14, #3
03384     F2 36 02 F6 | 	mov	local13, objptr
03388     F2 38 02 F1 | 	add	local14, objptr
0338c     1C 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     6C 0D B0 FD | 	call	#_isconstant
0339c     04 30 06 F1 | 	add	local10, #4
033a0     18 FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     10 31 02 F6 | 	mov	local10, local02
033a8     03 30 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 30 02 F1 | 	add	local10, objptr
033b8     04 30 06 F1 | 	add	local10, #4
033bc     18 35 02 FB | 	rdlong	local12, local10
033c0     01 34 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     10 31 02 F6 | 	mov	local10, local02
033d4     03 30 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 30 02 F1 | 	add	local10, objptr
033e4     10 35 02 F6 | 	mov	local12, local02
033e8     1A 33 02 F6 | 	mov	local11, local12
033ec     19 39 02 F6 | 	mov	local14, local11
033f0     03 38 66 F0 | 	shl	local14, #3
033f4     F2 36 02 F6 | 	mov	local13, objptr
033f8     F2 38 02 F1 | 	add	local14, objptr
033fc     04 38 06 F1 | 	add	local14, #4
03400     1C 13 02 FB | 	rdlong	arg01, local14
03404     04 38 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 74 C6 C9 |  if_b	decod	local44, #31
03418     00 74 06 36 |  if_ae	mov	local44, #0
0341c     D4 FB B1 FD | 	call	#__system___float_fromuns
03420     3A FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     8C F6 B1 FD | 	call	#__system__str_S
0342c     18 FB 61 FC | 	wrlong	result1, local10
03430     10 25 02 F6 | 	mov	local04, local02
03434     12 23 02 F6 | 	mov	local03, local04
03438     11 31 02 F6 | 	mov	local10, local03
0343c     03 30 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 30 02 F1 | 	add	local10, objptr
0344c     04 30 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     18 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     10 27 02 F6 | 	mov	local05, local02
03468     03 26 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 26 02 F1 | 	add	local05, objptr
03478     13 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     00 2A B0 FD | 	call	#_isnum
03488     FD 76 02 F6 | 	mov	local45, result1
0348c     10 27 02 F6 | 	mov	local05, local02
03490     03 26 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 26 02 F1 | 	add	local05, objptr
034a0     13 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     C4 2D B0 FD | 	call	#_isint
034b0     FD 78 02 F6 | 	mov	local46, result1
034b4     10 27 02 F6 | 	mov	local05, local02
034b8     03 26 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 26 02 F1 | 	add	local05, objptr
034c8     13 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     40 30 B0 FD | 	call	#_isdec
034d8     FD 7A 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 76 0E F2 | 	cmp	local45, #0 wz
034e0     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     10 25 02 F6 | 	mov	local04, local02
034f0     12 23 02 F6 | 	mov	local03, local04
034f4     11 31 02 F6 | 	mov	local10, local03
034f8     03 30 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 30 02 F1 | 	add	local10, objptr
03508     04 30 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     18 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 76 0E F2 | 	cmp	local45, #0 wz
03524     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03528     3D 25 22 56 |  if_ne	not	local04, local47
0352c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     10 25 02 F6 | 	mov	local04, local02
03538     12 23 02 F6 | 	mov	local03, local04
0353c     11 31 02 F6 | 	mov	local10, local03
03540     03 30 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 30 02 F1 | 	add	local10, objptr
03550     04 30 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     18 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 76 0E F2 | 	cmp	local45, #0 wz
0356c     3C 25 22 56 |  if_ne	not	local04, local46
03570     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03574     3D 23 22 56 |  if_ne	not	local03, local47
03578     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     10 25 02 F6 | 	mov	local04, local02
03584     12 23 02 F6 | 	mov	local03, local04
03588     11 31 02 F6 | 	mov	local10, local03
0358c     03 30 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 30 02 F1 | 	add	local10, objptr
0359c     04 30 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     18 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     10 27 02 F6 | 	mov	local05, local02
035b8     03 26 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 26 02 F1 | 	add	local05, objptr
035c8     13 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     00 30 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     10 31 02 F6 | 	mov	local10, local02
035e4     03 30 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 30 02 F1 | 	add	local10, objptr
035f4     04 30 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     18 07 68 FC | 	wrlong	##515, local10
03600     10 25 02 F6 | 	mov	local04, local02
03604     12 23 02 F6 | 	mov	local03, local04
03608     11 31 02 F6 | 	mov	local10, local03
0360c     03 30 66 F0 | 	shl	local10, #3
03610     F2 30 02 F1 | 	add	local10, objptr
03614     10 39 02 F6 | 	mov	local14, local02
03618     03 38 66 F0 | 	shl	local14, #3
0361c     F2 38 02 F1 | 	add	local14, objptr
03620     1C 29 02 FB | 	rdlong	local06, local14
03624     02 34 06 F6 | 	mov	local12, #2
03628     10 49 02 F6 | 	mov	local22, local02
0362c     24 4B 02 F6 | 	mov	local23, local22
03630     03 4A 66 F0 | 	shl	local23, #3
03634     F2 4C 02 F6 | 	mov	local24, objptr
03638     F2 4A 02 F1 | 	add	local23, objptr
0363c     25 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 2B 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     15 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 2A 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 2B 82 F1 | 	sub	local07, arg01
03660     15 37 02 F6 | 	mov	local13, local07
03664     1B 39 02 F6 | 	mov	local14, local13
03668     02 38 86 F1 | 	sub	local14, #2
0366c     1C 33 02 F6 | 	mov	local11, local14
03670     14 13 02 F6 | 	mov	arg01, local06
03674     1A 15 02 F6 | 	mov	arg02, local12
03678     19 17 02 F6 | 	mov	arg03, local11
0367c     58 F3 B1 FD | 	call	#__system__Mid_S
03680     18 FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     10 23 02 F6 | 	mov	local03, local02
0368c     11 27 02 F6 | 	mov	local05, local03
03690     03 26 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 26 02 F1 | 	add	local05, objptr
036a0     13 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     64 25 B0 FD | 	call	#_isname
036b0     FD 24 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     10 25 02 F6 | 	mov	local04, local02
036bc     12 23 02 F6 | 	mov	local03, local04
036c0     11 31 02 F6 | 	mov	local10, local03
036c4     03 30 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 30 02 F1 | 	add	local10, objptr
036d4     04 30 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     18 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 20 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     1F 31 02 F6 | 	mov	local10, local17
036f4     03 30 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 30 02 F1 | 	add	local10, objptr
03704     04 30 06 F1 | 	add	local10, #4
03708     18 FD 6B FC | 	wrlong	#510, local10
0370c     1F 31 02 F6 | 	mov	local10, local17
03710     03 30 66 F0 | 	shl	local10, #3
03714     F2 26 02 F6 | 	mov	local05, objptr
03718     F2 30 02 F1 | 	add	local10, objptr
0371c     80 01 00 FF 
03720     BF 29 06 F6 | 	mov	local06, ##@LR__5067
03724     18 29 62 FC | 	wrlong	local06, local10
03728     10 00 00 FF 
0372c     54 E4 05 F1 | 	add	objptr, ##8276
03730     F2 3E 62 FC | 	wrlong	local17, objptr
03734     45 00 00 FF 
03738     60 E4 85 F1 | 	sub	objptr, ##35424
0373c                 | ' 
0373c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0373c                 | ' 
0373c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0373c                 | '  
0373c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0373c     80 01 00 FF 
03740     C0 31 06 F6 | 	mov	local10, ##@LR__5068
03744     37 13 02 F6 | 	mov	arg01, local41
03748     18 15 02 F6 | 	mov	arg02, local10
0374c     1C D1 B1 FD | 	call	#__system___string_cmp
03750     00 FA 0D F2 | 	cmp	result1, #0 wz
03754     FC 00 90 AD |  if_e	jmp	#LR__0184
03758     80 01 00 FF 
0375c     C5 27 06 F6 | 	mov	local05, ##@LR__5069
03760     13 31 02 F6 | 	mov	local10, local05
03764     37 13 02 F6 | 	mov	arg01, local41
03768     18 15 02 F6 | 	mov	arg02, local10
0376c     FC D0 B1 FD | 	call	#__system___string_cmp
03770     00 FA 0D F2 | 	cmp	result1, #0 wz
03774     DC 00 90 AD |  if_e	jmp	#LR__0184
03778     80 01 00 FF 
0377c     CA 29 06 F6 | 	mov	local06, ##@LR__5070
03780     14 27 02 F6 | 	mov	local05, local06
03784     37 13 02 F6 | 	mov	arg01, local41
03788     13 15 02 F6 | 	mov	arg02, local05
0378c     DC D0 B1 FD | 	call	#__system___string_cmp
03790     FD 30 0A F6 | 	mov	local10, result1 wz
03794     BC 00 90 AD |  if_e	jmp	#LR__0184
03798     80 01 00 FF 
0379c     CF 35 06 F6 | 	mov	local12, ##@LR__5071
037a0     1A 29 02 F6 | 	mov	local06, local12
037a4     37 13 02 F6 | 	mov	arg01, local41
037a8     14 15 02 F6 | 	mov	arg02, local06
037ac     BC D0 B1 FD | 	call	#__system___string_cmp
037b0     FD 26 0A F6 | 	mov	local05, result1 wz
037b4     9C 00 90 AD |  if_e	jmp	#LR__0184
037b8     80 01 00 FF 
037bc     D3 33 06 F6 | 	mov	local11, ##@LR__5072
037c0     19 35 02 F6 | 	mov	local12, local11
037c4     37 13 02 F6 | 	mov	arg01, local41
037c8     1A 15 02 F6 | 	mov	arg02, local12
037cc     9C D0 B1 FD | 	call	#__system___string_cmp
037d0     FD 28 0A F6 | 	mov	local06, result1 wz
037d4     7C 00 90 AD |  if_e	jmp	#LR__0184
037d8     80 01 00 FF 
037dc     D7 39 06 F6 | 	mov	local14, ##@LR__5073
037e0     1C 33 02 F6 | 	mov	local11, local14
037e4     37 13 02 F6 | 	mov	arg01, local41
037e8     19 15 02 F6 | 	mov	arg02, local11
037ec     7C D0 B1 FD | 	call	#__system___string_cmp
037f0     FD 34 0A F6 | 	mov	local12, result1 wz
037f4     5C 00 90 AD |  if_e	jmp	#LR__0184
037f8     80 01 00 FF 
037fc     DA 37 06 F6 | 	mov	local13, ##@LR__5074
03800     1B 39 02 F6 | 	mov	local14, local13
03804     37 13 02 F6 | 	mov	arg01, local41
03808     1C 15 02 F6 | 	mov	arg02, local14
0380c     5C D0 B1 FD | 	call	#__system___string_cmp
03810     FD 32 0A F6 | 	mov	local11, result1 wz
03814     3C 00 90 AD |  if_e	jmp	#LR__0184
03818     80 01 00 FF 
0381c     DE 37 06 F6 | 	mov	local13, ##@LR__5075
03820     37 13 02 F6 | 	mov	arg01, local41
03824     1B 15 02 F6 | 	mov	arg02, local13
03828     40 D0 B1 FD | 	call	#__system___string_cmp
0382c     FD 38 0A F6 | 	mov	local14, result1 wz
03830     20 00 90 AD |  if_e	jmp	#LR__0184
03834     80 01 00 FF 
03838     E4 49 06 F6 | 	mov	local22, ##@LR__5076
0383c     24 55 02 F6 | 	mov	local28, local22
03840     37 13 02 F6 | 	mov	arg01, local41
03844     2A 15 02 F6 | 	mov	arg02, local28
03848     20 D0 B1 FD | 	call	#__system___string_cmp
0384c     FD 36 0A F6 | 	mov	local13, result1 wz
03850     84 00 90 5D |  if_ne	jmp	#LR__0185
03854                 | LR__0184
03854     33 55 02 F6 | 	mov	local28, local37
03858     01 54 06 F1 | 	add	local28, #1
0385c     2A 49 02 F6 | 	mov	local22, local28
03860     24 4B 02 F6 | 	mov	local23, local22
03864     03 4A 66 F0 | 	shl	local23, #3
03868     35 00 00 FF 
0386c     0C E4 05 F1 | 	add	objptr, ##27148
03870     F2 4C 02 F6 | 	mov	local24, objptr
03874     F2 4A 02 F1 | 	add	local23, objptr
03878     04 4A 06 F1 | 	add	local23, #4
0387c     25 59 02 FB | 	rdlong	local30, local23
03880     04 4A 86 F1 | 	sub	local23, #4
03884     2C 57 02 F6 | 	mov	local29, local30
03888     01 00 00 FF 
0388c     04 56 0E F2 | 	cmp	local29, ##516 wz
03890     35 00 00 FF 
03894     0C E4 85 F1 | 	sub	objptr, ##27148
03898     3C 00 90 5D |  if_ne	jmp	#LR__0185
0389c     33 31 02 F6 | 	mov	local10, local37
038a0     01 30 06 F1 | 	add	local10, #1
038a4     03 30 66 F0 | 	shl	local10, #3
038a8     35 00 00 FF 
038ac     0C E4 05 F1 | 	add	objptr, ##27148
038b0     F2 26 02 F6 | 	mov	local05, objptr
038b4     F2 30 02 F1 | 	add	local10, objptr
038b8     01 00 00 FF 
038bc     03 28 06 F6 | 	mov	local06, ##515
038c0     04 30 06 F1 | 	add	local10, #4
038c4     01 00 80 FF 
038c8     18 07 68 FC | 	wrlong	##515, local10
038cc     04 30 86 F1 | 	sub	local10, #4
038d0     35 00 00 FF 
038d4     0C E4 85 F1 | 	sub	objptr, ##27148
038d8                 | LR__0185
038d8                 | ' 
038d8                 | ' ' determine a type of the line and compile it
038d8                 | ' 
038d8                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
038d8     35 00 00 FF 
038dc     0C E4 05 F1 | 	add	objptr, ##27148
038e0     F2 12 02 FB | 	rdlong	arg01, objptr
038e4     35 00 00 FF 
038e8     0C E4 85 F1 | 	sub	objptr, ##27148
038ec     28 2C B0 FD | 	call	#_isdec
038f0     00 FA 0D F2 | 	cmp	result1, #0 wz
038f4     30 00 90 AD |  if_e	jmp	#LR__0186
038f8     35 00 00 FF 
038fc     0C E4 05 F1 | 	add	objptr, ##27148
03900     F2 12 02 FB | 	rdlong	arg01, objptr
03904     35 00 00 FF 
03908     0C E4 85 F1 | 	sub	objptr, ##27148
0390c     00 14 06 F6 | 	mov	arg02, #0
03910     5C 01 B2 FD | 	call	#__system____builtin_atoi
03914     51 00 00 FF 
03918     C4 E5 05 F1 | 	add	objptr, ##41924
0391c     F2 FA 61 FC | 	wrlong	result1, objptr
03920     51 00 00 FF 
03924     C4 E5 85 F1 | 	sub	objptr, ##41924
03928                 | LR__0186
03928                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03928     51 00 00 FF 
0392c     C4 E5 05 F1 | 	add	objptr, ##41924
03930     F2 24 02 FB | 	rdlong	local04, objptr
03934     51 00 00 FF 
03938     C4 E5 85 F1 | 	sub	objptr, ##41924
0393c     01 24 16 F2 | 	cmp	local04, #1 wc
03940     40 00 90 CD |  if_b	jmp	#LR__0187
03944     01 3E 0E F2 | 	cmp	local17, #1 wz
03948     37 00 00 AF 
0394c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03950     F2 26 02 AB |  if_e	rdlong	local05, objptr
03954     37 00 00 AF 
03958     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0395c     13 31 02 A6 |  if_e	mov	local10, local05
03960     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03964     1C 00 90 5D |  if_ne	jmp	#LR__0187
03968     51 00 00 FF 
0396c     C4 E5 05 F1 | 	add	objptr, ##41924
03970     F2 12 02 FB | 	rdlong	arg01, objptr
03974     51 00 00 FF 
03978     C4 E5 85 F1 | 	sub	objptr, ##41924
0397c     44 2D B0 FD | 	call	#_deleteline
03980     70 03 90 FD | 	jmp	#LR__0197
03984                 | LR__0187
03984                 | ' 
03984                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03984     37 00 00 FF 
03988     24 E4 05 F1 | 	add	objptr, ##28196
0398c     F2 24 0A FB | 	rdlong	local04, objptr wz
03990     37 00 00 FF 
03994     24 E4 85 F1 | 	sub	objptr, ##28196
03998     37 00 00 5F 
0399c     24 E4 05 51 |  if_ne	add	objptr, ##28196
039a0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039a4     37 00 00 5F 
039a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039ac     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
039b0     AC 00 90 5D |  if_ne	jmp	#LR__0189
039b4     35 00 00 FF 
039b8     20 E4 05 F1 | 	add	objptr, ##27168
039bc     F2 34 02 FB | 	rdlong	local12, objptr
039c0     35 00 00 FF 
039c4     20 E4 85 F1 | 	sub	objptr, ##27168
039c8     1B 34 0E F2 | 	cmp	local12, #27 wz
039cc     90 00 90 AD |  if_e	jmp	#LR__0189
039d0     51 00 00 FF 
039d4     C4 E5 05 F1 | 	add	objptr, ##41924
039d8     F2 12 02 FB | 	rdlong	arg01, objptr
039dc     1A 00 00 FF 
039e0     A0 E5 85 F1 | 	sub	objptr, ##13728
039e4     F2 16 02 FB | 	rdlong	arg03, objptr
039e8     37 00 00 FF 
039ec     24 E4 85 F1 | 	sub	objptr, ##28196
039f0     00 14 06 F6 | 	mov	arg02, #0
039f4     70 40 B0 FD | 	call	#_compile
039f8     FD 1E 0A F6 | 	mov	local01, result1 wz
039fc                 | '   err=compile(linenum,0,cont) 
039fc                 | '   if err<>0 then printerror(err): goto 101
039fc     0C 00 90 AD |  if_e	jmp	#LR__0188
03a00     0F 13 02 F6 | 	mov	arg01, local01
03a04     AC 98 B1 FD | 	call	#_printerror
03a08     08 03 90 FD | 	jmp	#LR__0198
03a0c                 | LR__0188
03a0c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03a0c     51 00 00 FF 
03a10     FC E5 05 F1 | 	add	objptr, ##41980
03a14     F2 12 02 FB | 	rdlong	arg01, objptr
03a18     51 00 00 FF 
03a1c     FC E5 85 F1 | 	sub	objptr, ##41980
03a20     80 01 00 FF 
03a24     E7 15 06 F6 | 	mov	arg02, ##@LR__5077
03a28     40 CE B1 FD | 	call	#__system___string_cmp
03a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a30     C0 02 90 AD |  if_e	jmp	#LR__0197
03a34     51 00 00 FF 
03a38     FC E5 05 F1 | 	add	objptr, ##41980
03a3c     F2 24 02 FB | 	rdlong	local04, objptr
03a40     1A 00 00 FF 
03a44     E0 E5 85 F1 | 	sub	objptr, ##13792
03a48     F2 24 62 FC | 	wrlong	local04, objptr
03a4c     08 E4 05 F1 | 	add	objptr, #8
03a50     F2 08 68 FC | 	wrlong	#4, objptr
03a54     37 00 00 FF 
03a58     24 E4 85 F1 | 	sub	objptr, ##28196
03a5c     54 DD 9F FD | 	jmp	#LR__0070
03a60                 | LR__0189
03a60                 | '       							
03a60                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03a60     37 00 00 FF 
03a64     24 E4 05 F1 | 	add	objptr, ##28196
03a68     F2 24 02 FB | 	rdlong	local04, objptr
03a6c     37 00 00 FF 
03a70     24 E4 85 F1 | 	sub	objptr, ##28196
03a74     01 24 0E F2 | 	cmp	local04, #1 wz
03a78     37 00 00 5F 
03a7c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a80     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a84     37 00 00 5F 
03a88     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a8c     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03a90     AC 00 90 5D |  if_ne	jmp	#LR__0191
03a94     35 00 00 FF 
03a98     18 E4 05 F1 | 	add	objptr, ##27160
03a9c     F2 34 02 FB | 	rdlong	local12, objptr
03aa0     35 00 00 FF 
03aa4     18 E4 85 F1 | 	sub	objptr, ##27160
03aa8     1B 34 0E F2 | 	cmp	local12, #27 wz
03aac     90 00 90 AD |  if_e	jmp	#LR__0191
03ab0     51 00 00 FF 
03ab4     C4 E5 05 F1 | 	add	objptr, ##41924
03ab8     F2 12 02 FB | 	rdlong	arg01, objptr
03abc     1A 00 00 FF 
03ac0     A0 E5 85 F1 | 	sub	objptr, ##13728
03ac4     F2 16 02 FB | 	rdlong	arg03, objptr
03ac8     37 00 00 FF 
03acc     24 E4 85 F1 | 	sub	objptr, ##28196
03ad0     00 14 06 F6 | 	mov	arg02, #0
03ad4     90 3F B0 FD | 	call	#_compile
03ad8     FD 1E 0A F6 | 	mov	local01, result1 wz
03adc                 | '   err=compile(linenum,0,cont) 
03adc                 | '   if err<>0 then printerror(err): goto 101
03adc     0C 00 90 AD |  if_e	jmp	#LR__0190
03ae0     0F 13 02 F6 | 	mov	arg01, local01
03ae4     CC 97 B1 FD | 	call	#_printerror
03ae8     28 02 90 FD | 	jmp	#LR__0198
03aec                 | LR__0190
03aec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03aec     51 00 00 FF 
03af0     FC E5 05 F1 | 	add	objptr, ##41980
03af4     F2 12 02 FB | 	rdlong	arg01, objptr
03af8     51 00 00 FF 
03afc     FC E5 85 F1 | 	sub	objptr, ##41980
03b00     80 01 00 FF 
03b04     E8 15 06 F6 | 	mov	arg02, ##@LR__5078
03b08     60 CD B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     E0 01 90 AD |  if_e	jmp	#LR__0197
03b14     51 00 00 FF 
03b18     FC E5 05 F1 | 	add	objptr, ##41980
03b1c     F2 24 02 FB | 	rdlong	local04, objptr
03b20     1A 00 00 FF 
03b24     E0 E5 85 F1 | 	sub	objptr, ##13792
03b28     F2 24 62 FC | 	wrlong	local04, objptr
03b2c     08 E4 05 F1 | 	add	objptr, #8
03b30     F2 08 68 FC | 	wrlong	#4, objptr
03b34     37 00 00 FF 
03b38     24 E4 85 F1 | 	sub	objptr, ##28196
03b3c     74 DC 9F FD | 	jmp	#LR__0070
03b40                 | LR__0191
03b40                 | ' 							 
03b40                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03b40     37 00 00 FF 
03b44     24 E4 05 F1 | 	add	objptr, ##28196
03b48     F2 24 0A FB | 	rdlong	local04, objptr wz
03b4c     37 00 00 FF 
03b50     24 E4 85 F1 | 	sub	objptr, ##28196
03b54     37 00 00 5F 
03b58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b5c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b60     37 00 00 5F 
03b64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b68     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03b6c     35 00 00 AF 
03b70     20 E4 05 A1 |  if_e	add	objptr, ##27168
03b74     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b78     35 00 00 AF 
03b7c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03b80     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b84     90 00 90 5D |  if_ne	jmp	#LR__0193
03b88     51 00 00 FF 
03b8c     C4 E5 05 F1 | 	add	objptr, ##41924
03b90     F2 12 02 FB | 	rdlong	arg01, objptr
03b94     1A 00 00 FF 
03b98     A0 E5 85 F1 | 	sub	objptr, ##13728
03b9c     F2 16 02 FB | 	rdlong	arg03, objptr
03ba0     37 00 00 FF 
03ba4     24 E4 85 F1 | 	sub	objptr, ##28196
03ba8     00 14 06 F6 | 	mov	arg02, #0
03bac     80 3F B0 FD | 	call	#_compile_assign
03bb0     FD 1E 0A F6 | 	mov	local01, result1 wz
03bb4                 | '   err=compile_assign(linenum,0,cont)
03bb4                 | '   if err<>0 then printerror(err): goto 101
03bb4     0C 00 90 AD |  if_e	jmp	#LR__0192
03bb8     0F 13 02 F6 | 	mov	arg01, local01
03bbc     F4 96 B1 FD | 	call	#_printerror
03bc0     50 01 90 FD | 	jmp	#LR__0198
03bc4                 | LR__0192
03bc4                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03bc4     51 00 00 FF 
03bc8     FC E5 05 F1 | 	add	objptr, ##41980
03bcc     F2 12 02 FB | 	rdlong	arg01, objptr
03bd0     51 00 00 FF 
03bd4     FC E5 85 F1 | 	sub	objptr, ##41980
03bd8     80 01 00 FF 
03bdc     E9 15 06 F6 | 	mov	arg02, ##@LR__5079
03be0     88 CC B1 FD | 	call	#__system___string_cmp
03be4     00 FA 0D F2 | 	cmp	result1, #0 wz
03be8     08 01 90 AD |  if_e	jmp	#LR__0197
03bec     51 00 00 FF 
03bf0     FC E5 05 F1 | 	add	objptr, ##41980
03bf4     F2 24 02 FB | 	rdlong	local04, objptr
03bf8     1A 00 00 FF 
03bfc     E0 E5 85 F1 | 	sub	objptr, ##13792
03c00     F2 24 62 FC | 	wrlong	local04, objptr
03c04     08 E4 05 F1 | 	add	objptr, #8
03c08     F2 08 68 FC | 	wrlong	#4, objptr
03c0c     37 00 00 FF 
03c10     24 E4 85 F1 | 	sub	objptr, ##28196
03c14     9C DB 9F FD | 	jmp	#LR__0070
03c18                 | LR__0193
03c18                 | '     							 
03c18                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03c18     37 00 00 FF 
03c1c     24 E4 05 F1 | 	add	objptr, ##28196
03c20     F2 24 02 FB | 	rdlong	local04, objptr
03c24     37 00 00 FF 
03c28     24 E4 85 F1 | 	sub	objptr, ##28196
03c2c     01 24 0E F2 | 	cmp	local04, #1 wz
03c30     37 00 00 5F 
03c34     24 E4 05 51 |  if_ne	add	objptr, ##28196
03c38     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03c3c     37 00 00 5F 
03c40     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03c44     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03c48     35 00 00 AF 
03c4c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03c50     F2 34 02 AB |  if_e	rdlong	local12, objptr
03c54     35 00 00 AF 
03c58     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03c5c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03c60     90 00 90 5D |  if_ne	jmp	#LR__0196
03c64     51 00 00 FF 
03c68     C4 E5 05 F1 | 	add	objptr, ##41924
03c6c     F2 12 02 FB | 	rdlong	arg01, objptr
03c70     1A 00 00 FF 
03c74     A0 E5 85 F1 | 	sub	objptr, ##13728
03c78     F2 16 02 FB | 	rdlong	arg03, objptr
03c7c     37 00 00 FF 
03c80     24 E4 85 F1 | 	sub	objptr, ##28196
03c84     00 14 06 F6 | 	mov	arg02, #0
03c88     A4 3E B0 FD | 	call	#_compile_assign
03c8c     FD 1E 0A F6 | 	mov	local01, result1 wz
03c90                 | '   err=compile_assign(linenum,0,cont) 
03c90                 | '   if err<>0 then printerror(err): goto 101
03c90     0C 00 90 AD |  if_e	jmp	#LR__0194
03c94     0F 13 02 F6 | 	mov	arg01, local01
03c98     18 96 B1 FD | 	call	#_printerror
03c9c     74 00 90 FD | 	jmp	#LR__0198
03ca0                 | LR__0194
03ca0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03ca0     51 00 00 FF 
03ca4     FC E5 05 F1 | 	add	objptr, ##41980
03ca8     F2 12 02 FB | 	rdlong	arg01, objptr
03cac     51 00 00 FF 
03cb0     FC E5 85 F1 | 	sub	objptr, ##41980
03cb4     80 01 00 FF 
03cb8     EA 15 06 F6 | 	mov	arg02, ##@LR__5080
03cbc     AC CB B1 FD | 	call	#__system___string_cmp
03cc0     00 FA 4D F2 | 	cmps	result1, #0 wz
03cc4     2C 00 90 AD |  if_e	jmp	#LR__0195
03cc8     51 00 00 FF 
03ccc     FC E5 05 F1 | 	add	objptr, ##41980
03cd0     F2 24 02 FB | 	rdlong	local04, objptr
03cd4     1A 00 00 FF 
03cd8     E0 E5 85 F1 | 	sub	objptr, ##13792
03cdc     F2 24 62 FC | 	wrlong	local04, objptr
03ce0     08 E4 05 F1 | 	add	objptr, #8
03ce4     F2 08 68 FC | 	wrlong	#4, objptr
03ce8     37 00 00 FF 
03cec     24 E4 85 F1 | 	sub	objptr, ##28196
03cf0     C0 DA 9F FD | 	jmp	#LR__0070
03cf4                 | LR__0195
03cf4                 | LR__0196
03cf4                 | LR__0197
03cf4                 | ' 
03cf4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03cf4     51 00 00 FF 
03cf8     C4 E5 05 F1 | 	add	objptr, ##41924
03cfc     F2 24 0A FB | 	rdlong	local04, objptr wz
03d00     51 00 00 FF 
03d04     C4 E5 85 F1 | 	sub	objptr, ##41924
03d08     28 00 90 5D |  if_ne	jmp	#LR__0199
03d0c     02 12 06 F6 | 	mov	arg01, #2
03d10     A4 75 B0 FD | 	call	#_execute_line
03d14                 | LR__0198
03d14     80 01 00 FF 
03d18     EB 13 06 F6 | 	mov	arg01, ##@LR__5081
03d1c                 | ' 
03d1c                 | ' write(text)
03d1c     08 B6 B1 FD | 	call	#_hg010b_spin2_write
03d20                 | ' crlf
03d20     04 BB B1 FD | 	call	#_hg010b_spin2_crlf
03d24     80 01 00 FF 
03d28     EC 13 06 F6 | 	mov	arg01, ##@LR__5082
03d2c                 | ' 
03d2c                 | ' write(text)
03d2c     F8 B5 B1 FD | 	call	#_hg010b_spin2_write
03d30                 | ' crlf
03d30     F4 BA B1 FD | 	call	#_hg010b_spin2_crlf
03d34                 | LR__0199
03d34     A7 F0 03 F6 | 	mov	ptra, fp
03d38     B2 00 A0 FD | 	call	#popregs_
03d3c                 | _interpret_ret
03d3c     2D 00 64 FD | 	ret
03d40                 | 
03d40                 | ' 
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' '
03d40                 | ' '                          END OF TOKENIZER MAIN CODE
03d40                 | ' '
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' 
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03d40                 | ' '---------------------------------------------------------------------------------------------------------------------
03d40                 | ' 
03d40                 | ' ' Check if the part is an operator, return a token or 0 if not found
03d40                 | ' 
03d40                 | ' function isoperator(s as string) as ubyte
03d40                 | _isoperator
03d40     01 4A 05 F6 | 	mov	COUNT_, #1
03d44     A8 00 A0 FD | 	call	#pushregs_
03d48                 | ' 
03d48                 | ' select case s
03d48     09 1F 02 F6 | 	mov	local01, arg01
03d4c     80 01 00 FF 
03d50     F2 15 06 F6 | 	mov	arg02, ##@LR__5083
03d54     0F 13 02 F6 | 	mov	arg01, local01
03d58     10 CB B1 FD | 	call	#__system___string_cmp
03d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d60     FC 01 90 AD |  if_e	jmp	#LR__0200
03d64     80 01 00 FF 
03d68     F4 15 06 F6 | 	mov	arg02, ##@LR__5084
03d6c     0F 13 02 F6 | 	mov	arg01, local01
03d70     F8 CA B1 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     EC 01 90 AD |  if_e	jmp	#LR__0201
03d7c     80 01 00 FF 
03d80     F6 15 06 F6 | 	mov	arg02, ##@LR__5085
03d84     0F 13 02 F6 | 	mov	arg01, local01
03d88     E0 CA B1 FD | 	call	#__system___string_cmp
03d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d90     DC 01 90 AD |  if_e	jmp	#LR__0202
03d94     80 01 00 FF 
03d98     F9 15 06 F6 | 	mov	arg02, ##@LR__5086
03d9c     0F 13 02 F6 | 	mov	arg01, local01
03da0     C8 CA B1 FD | 	call	#__system___string_cmp
03da4     00 FA 0D F2 | 	cmp	result1, #0 wz
03da8     CC 01 90 AD |  if_e	jmp	#LR__0203
03dac     80 01 00 FF 
03db0     FD 15 06 F6 | 	mov	arg02, ##@LR__5087
03db4     0F 13 02 F6 | 	mov	arg01, local01
03db8     B0 CA B1 FD | 	call	#__system___string_cmp
03dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc0     BC 01 90 AD |  if_e	jmp	#LR__0204
03dc4     80 01 00 FF 
03dc8     FF 15 06 F6 | 	mov	arg02, ##@LR__5088
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     98 CA B1 FD | 	call	#__system___string_cmp
03dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd8     AC 01 90 AD |  if_e	jmp	#LR__0205
03ddc     81 01 00 FF 
03de0     01 14 06 F6 | 	mov	arg02, ##@LR__5089
03de4     0F 13 02 F6 | 	mov	arg01, local01
03de8     80 CA B1 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     9C 01 90 AD |  if_e	jmp	#LR__0206
03df4     81 01 00 FF 
03df8     05 14 06 F6 | 	mov	arg02, ##@LR__5090
03dfc     0F 13 02 F6 | 	mov	arg01, local01
03e00     68 CA B1 FD | 	call	#__system___string_cmp
03e04     00 FA 0D F2 | 	cmp	result1, #0 wz
03e08     8C 01 90 AD |  if_e	jmp	#LR__0207
03e0c     81 01 00 FF 
03e10     09 14 06 F6 | 	mov	arg02, ##@LR__5091
03e14     0F 13 02 F6 | 	mov	arg01, local01
03e18     50 CA B1 FD | 	call	#__system___string_cmp
03e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e20     7C 01 90 AD |  if_e	jmp	#LR__0208
03e24     81 01 00 FF 
03e28     0D 14 06 F6 | 	mov	arg02, ##@LR__5092
03e2c     0F 13 02 F6 | 	mov	arg01, local01
03e30     38 CA B1 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     6C 01 90 AD |  if_e	jmp	#LR__0209
03e3c     81 01 00 FF 
03e40     11 14 06 F6 | 	mov	arg02, ##@LR__5093
03e44     0F 13 02 F6 | 	mov	arg01, local01
03e48     20 CA B1 FD | 	call	#__system___string_cmp
03e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e50     5C 01 90 AD |  if_e	jmp	#LR__0210
03e54     81 01 00 FF 
03e58     15 14 06 F6 | 	mov	arg02, ##@LR__5094
03e5c     0F 13 02 F6 | 	mov	arg01, local01
03e60     08 CA B1 FD | 	call	#__system___string_cmp
03e64     00 FA 0D F2 | 	cmp	result1, #0 wz
03e68     4C 01 90 AD |  if_e	jmp	#LR__0211
03e6c     81 01 00 FF 
03e70     17 14 06 F6 | 	mov	arg02, ##@LR__5095
03e74     0F 13 02 F6 | 	mov	arg01, local01
03e78     F0 C9 B1 FD | 	call	#__system___string_cmp
03e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e80     3C 01 90 AD |  if_e	jmp	#LR__0212
03e84     81 01 00 FF 
03e88     1B 14 06 F6 | 	mov	arg02, ##@LR__5096
03e8c     0F 13 02 F6 | 	mov	arg01, local01
03e90     D8 C9 B1 FD | 	call	#__system___string_cmp
03e94     00 FA 0D F2 | 	cmp	result1, #0 wz
03e98     2C 01 90 AD |  if_e	jmp	#LR__0213
03e9c     81 01 00 FF 
03ea0     1D 14 06 F6 | 	mov	arg02, ##@LR__5097
03ea4     0F 13 02 F6 | 	mov	arg01, local01
03ea8     C0 C9 B1 FD | 	call	#__system___string_cmp
03eac     00 FA 0D F2 | 	cmp	result1, #0 wz
03eb0     1C 01 90 AD |  if_e	jmp	#LR__0214
03eb4     81 01 00 FF 
03eb8     1F 14 06 F6 | 	mov	arg02, ##@LR__5098
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     A8 C9 B1 FD | 	call	#__system___string_cmp
03ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec8     0C 01 90 AD |  if_e	jmp	#LR__0215
03ecc     81 01 00 FF 
03ed0     22 14 06 F6 | 	mov	arg02, ##@LR__5099
03ed4     0F 13 02 F6 | 	mov	arg01, local01
03ed8     90 C9 B1 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     FC 00 90 AD |  if_e	jmp	#LR__0216
03ee4     81 01 00 FF 
03ee8     25 14 06 F6 | 	mov	arg02, ##@LR__5100
03eec     0F 13 02 F6 | 	mov	arg01, local01
03ef0     78 C9 B1 FD | 	call	#__system___string_cmp
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     EC 00 90 AD |  if_e	jmp	#LR__0217
03efc     81 01 00 FF 
03f00     27 14 06 F6 | 	mov	arg02, ##@LR__5101
03f04     0F 13 02 F6 | 	mov	arg01, local01
03f08     60 C9 B1 FD | 	call	#__system___string_cmp
03f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f10     DC 00 90 AD |  if_e	jmp	#LR__0218
03f14     81 01 00 FF 
03f18     29 14 06 F6 | 	mov	arg02, ##@LR__5102
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     48 C9 B1 FD | 	call	#__system___string_cmp
03f24     00 FA 0D F2 | 	cmp	result1, #0 wz
03f28     CC 00 90 AD |  if_e	jmp	#LR__0219
03f2c     81 01 00 FF 
03f30     2C 14 06 F6 | 	mov	arg02, ##@LR__5103
03f34     0F 13 02 F6 | 	mov	arg01, local01
03f38     30 C9 B1 FD | 	call	#__system___string_cmp
03f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f40     BC 00 90 AD |  if_e	jmp	#LR__0220
03f44     81 01 00 FF 
03f48     2F 14 06 F6 | 	mov	arg02, ##@LR__5104
03f4c     0F 13 02 F6 | 	mov	arg01, local01
03f50     18 C9 B1 FD | 	call	#__system___string_cmp
03f54     00 FA 0D F2 | 	cmp	result1, #0 wz
03f58     AC 00 90 AD |  if_e	jmp	#LR__0221
03f5c     B0 00 90 FD | 	jmp	#LR__0222
03f60                 | LR__0200
03f60     01 FA 05 F6 | 	mov	result1, #1
03f64     AC 00 90 FD | 	jmp	#LR__0223
03f68                 | LR__0201
03f68     02 FA 05 F6 | 	mov	result1, #2
03f6c     A4 00 90 FD | 	jmp	#LR__0223
03f70                 | LR__0202
03f70     03 FA 05 F6 | 	mov	result1, #3
03f74     9C 00 90 FD | 	jmp	#LR__0223
03f78                 | LR__0203
03f78     04 FA 05 F6 | 	mov	result1, #4
03f7c     94 00 90 FD | 	jmp	#LR__0223
03f80                 | LR__0204
03f80     05 FA 05 F6 | 	mov	result1, #5
03f84     8C 00 90 FD | 	jmp	#LR__0223
03f88                 | LR__0205
03f88     06 FA 05 F6 | 	mov	result1, #6
03f8c     84 00 90 FD | 	jmp	#LR__0223
03f90                 | LR__0206
03f90     07 FA 05 F6 | 	mov	result1, #7
03f94     7C 00 90 FD | 	jmp	#LR__0223
03f98                 | LR__0207
03f98     08 FA 05 F6 | 	mov	result1, #8
03f9c     74 00 90 FD | 	jmp	#LR__0223
03fa0                 | LR__0208
03fa0     09 FA 05 F6 | 	mov	result1, #9
03fa4     6C 00 90 FD | 	jmp	#LR__0223
03fa8                 | LR__0209
03fa8     0A FA 05 F6 | 	mov	result1, #10
03fac     64 00 90 FD | 	jmp	#LR__0223
03fb0                 | LR__0210
03fb0     0B FA 05 F6 | 	mov	result1, #11
03fb4     5C 00 90 FD | 	jmp	#LR__0223
03fb8                 | LR__0211
03fb8     0C FA 05 F6 | 	mov	result1, #12
03fbc     54 00 90 FD | 	jmp	#LR__0223
03fc0                 | LR__0212
03fc0     0D FA 05 F6 | 	mov	result1, #13
03fc4     4C 00 90 FD | 	jmp	#LR__0223
03fc8                 | LR__0213
03fc8     0E FA 05 F6 | 	mov	result1, #14
03fcc     44 00 90 FD | 	jmp	#LR__0223
03fd0                 | LR__0214
03fd0     1B FA 05 F6 | 	mov	result1, #27
03fd4     3C 00 90 FD | 	jmp	#LR__0223
03fd8                 | LR__0215
03fd8     27 FA 05 F6 | 	mov	result1, #39
03fdc     34 00 90 FD | 	jmp	#LR__0223
03fe0                 | LR__0216
03fe0     26 FA 05 F6 | 	mov	result1, #38
03fe4     2C 00 90 FD | 	jmp	#LR__0223
03fe8                 | LR__0217
03fe8     10 FA 05 F6 | 	mov	result1, #16
03fec     24 00 90 FD | 	jmp	#LR__0223
03ff0                 | LR__0218
03ff0     0F FA 05 F6 | 	mov	result1, #15
03ff4     1C 00 90 FD | 	jmp	#LR__0223
03ff8                 | LR__0219
03ff8     2A FA 05 F6 | 	mov	result1, #42
03ffc     14 00 90 FD | 	jmp	#LR__0223
04000                 | LR__0220
04000     28 FA 05 F6 | 	mov	result1, #40
04004     0C 00 90 FD | 	jmp	#LR__0223
04008                 | LR__0221
04008     29 FA 05 F6 | 	mov	result1, #41
0400c     04 00 90 FD | 	jmp	#LR__0223
04010                 | LR__0222
04010     00 FA 05 F6 | 	mov	result1, #0
04014                 | LR__0223
04014     A7 F0 03 F6 | 	mov	ptra, fp
04018     B2 00 A0 FD | 	call	#popregs_
0401c                 | _isoperator_ret
0401c     2D 00 64 FD | 	ret
04020                 | 
04020                 | ' 
04020                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04020                 | ' 
04020                 | ' function ischannel(s as string) as ulong
04020                 | _ischannel
04020     02 4A 05 F6 | 	mov	COUNT_, #2
04024     A8 00 A0 FD | 	call	#pushregs_
04028                 | ' if left$(s,1)<>"#" then return 0
04028     09 1F 02 F6 | 	mov	local01, arg01
0402c     01 14 06 F6 | 	mov	arg02, #1
04030     8C E8 B1 FD | 	call	#__system__Left_S
04034     FD 12 02 F6 | 	mov	arg01, result1
04038     81 01 00 FF 
0403c     32 14 06 F6 | 	mov	arg02, ##@LR__5105
04040     28 C8 B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     00 FA 05 56 |  if_ne	mov	result1, #0
0404c     AC 00 90 5D |  if_ne	jmp	#LR__0234
04050                 | ' if len(s)<>2 then return 0
04050     0F 13 02 F6 | 	mov	arg01, local01
04054     09 21 02 F6 | 	mov	local02, arg01
04058     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
0405c                 | LR__0230
0405c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04060     01 20 06 51 |  if_ne	add	local02, #1
04064     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
04068                 | LR__0231
04068     09 21 82 F1 | 	sub	local02, arg01
0406c     10 FB 01 F6 | 	mov	result1, local02
04070     02 FA 0D F2 | 	cmp	result1, #2 wz
04074     00 FA 05 56 |  if_ne	mov	result1, #0
04078     80 00 90 5D |  if_ne	jmp	#LR__0234
0407c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     01 14 06 F6 | 	mov	arg02, #1
04084     C0 E8 B1 FD | 	call	#__system__Right_S
04088     FD 12 02 F6 | 	mov	arg01, result1
0408c     81 01 00 FF 
04090     34 14 06 F6 | 	mov	arg02, ##@LR__5106
04094     D4 C7 B1 FD | 	call	#__system___string_cmp
04098     00 FA 55 F2 | 	cmps	result1, #0 wc
0409c     24 00 90 CD |  if_b	jmp	#LR__0232
040a0     0F 13 02 F6 | 	mov	arg01, local01
040a4     01 14 06 F6 | 	mov	arg02, #1
040a8     9C E8 B1 FD | 	call	#__system__Right_S
040ac     FD 12 02 F6 | 	mov	arg01, result1
040b0     81 01 00 FF 
040b4     36 14 06 F6 | 	mov	arg02, ##@LR__5107
040b8     B0 C7 B1 FD | 	call	#__system___string_cmp
040bc     01 FA 55 F2 | 	cmps	result1, #1 wc
040c0     08 00 90 CD |  if_b	jmp	#LR__0233
040c4                 | LR__0232
040c4     00 FA 05 F6 | 	mov	result1, #0
040c8     30 00 90 FD | 	jmp	#LR__0234
040cc                 | LR__0233
040cc                 | ' return token_channel+val(right$(s,1))
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     01 14 06 F6 | 	mov	arg02, #1
040d4     70 E8 B1 FD | 	call	#__system__Right_S
040d8     FD 12 02 F6 | 	mov	arg01, result1
040dc     24 FB B1 FD | 	call	#__system____builtin_atof
040e0     FD 14 02 F6 | 	mov	arg02, result1
040e4     00 18 21 FF 
040e8     00 12 06 F6 | 	mov	arg01, ##1110441984
040ec     38 EF B1 FD | 	call	#__system___float_add
040f0     FD 12 02 F6 | 	mov	arg01, result1
040f4     00 14 06 F6 | 	mov	arg02, #0
040f8     C4 F7 B1 FD | 	call	#__system___float_tointeger
040fc                 | LR__0234
040fc     A7 F0 03 F6 | 	mov	ptra, fp
04100     B2 00 A0 FD | 	call	#popregs_
04104                 | _ischannel_ret
04104     2D 00 64 FD | 	ret
04108                 | 
04108                 | ' 
04108                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04108                 | ' ' todo: add spin2/pasm constants for pin control
04108                 | ' 
04108                 | ' function isconstant(s as string) as integer
04108                 | _isconstant
04108     01 4A 05 F6 | 	mov	COUNT_, #1
0410c     A8 00 A0 FD | 	call	#pushregs_
04110                 | ' 
04110                 | ' select case s
04110     09 1F 02 F6 | 	mov	local01, arg01
04114     81 01 00 FF 
04118     38 14 06 F6 | 	mov	arg02, ##@LR__5108
0411c     0F 13 02 F6 | 	mov	arg01, local01
04120     48 C7 B1 FD | 	call	#__system___string_cmp
04124     00 FA 0D F2 | 	cmp	result1, #0 wz
04128     34 00 90 AD |  if_e	jmp	#LR__0240
0412c     81 01 00 FF 
04130     3E 14 06 F6 | 	mov	arg02, ##@LR__5109
04134     0F 13 02 F6 | 	mov	arg01, local01
04138     30 C7 B1 FD | 	call	#__system___string_cmp
0413c     00 FA 0D F2 | 	cmp	result1, #0 wz
04140     24 00 90 AD |  if_e	jmp	#LR__0241
04144     81 01 00 FF 
04148     45 14 06 F6 | 	mov	arg02, ##@LR__5110
0414c     0F 13 02 F6 | 	mov	arg01, local01
04150     18 C7 B1 FD | 	call	#__system___string_cmp
04154     00 FA 0D F2 | 	cmp	result1, #0 wz
04158     14 00 90 AD |  if_e	jmp	#LR__0242
0415c     18 00 90 FD | 	jmp	#LR__0243
04160                 | LR__0240
04160     01 FA 05 F6 | 	mov	result1, #1
04164     14 00 90 FD | 	jmp	#LR__0244
04168                 | LR__0241
04168     02 FA 05 F6 | 	mov	result1, #2
0416c     0C 00 90 FD | 	jmp	#LR__0244
04170                 | LR__0242
04170     04 FA 05 F6 | 	mov	result1, #4
04174     04 00 90 FD | 	jmp	#LR__0244
04178                 | LR__0243
04178     00 FA 05 F6 | 	mov	result1, #0
0417c                 | LR__0244
0417c     A7 F0 03 F6 | 	mov	ptra, fp
04180     B2 00 A0 FD | 	call	#popregs_
04184                 | _isconstant_ret
04184     2D 00 64 FD | 	ret
04188                 | 
04188                 | ' 
04188                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04188                 | ' 
04188                 | ' function isnotename(s as string) as ulong
04188                 | _isnotename
04188     07 4A 05 F6 | 	mov	COUNT_, #7
0418c     A8 00 A0 FD | 	call	#pushregs_
04190                 | ' if left$(s,1)<>"#" then return 0
04190     09 1F 02 F6 | 	mov	local01, arg01
04194     01 14 06 F6 | 	mov	arg02, #1
04198     24 E7 B1 FD | 	call	#__system__Left_S
0419c     FD 12 02 F6 | 	mov	arg01, result1
041a0     81 01 00 FF 
041a4     4D 14 06 F6 | 	mov	arg02, ##@LR__5111
041a8     C0 C6 B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     00 FA 05 56 |  if_ne	mov	result1, #0
041b4     30 03 90 5D |  if_ne	jmp	#LR__0273
041b8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
041b8     0F 13 02 F6 | 	mov	arg01, local01
041bc     03 14 06 F6 | 	mov	arg02, #3
041c0     01 16 06 F6 | 	mov	arg03, #1
041c4     10 E8 B1 FD | 	call	#__system__Mid_S
041c8     FD 12 02 F6 | 	mov	arg01, result1
041cc     81 01 00 FF 
041d0     4F 14 06 F6 | 	mov	arg02, ##@LR__5112
041d4     94 C6 B1 FD | 	call	#__system___string_cmp
041d8     00 FA 0D F2 | 	cmp	result1, #0 wz
041dc     18 00 90 5D |  if_ne	jmp	#LR__0250
041e0     0F 13 02 F6 | 	mov	arg01, local01
041e4     02 14 06 F6 | 	mov	arg02, #2
041e8     02 16 06 F6 | 	mov	arg03, #2
041ec     E8 E7 B1 FD | 	call	#__system__Mid_S
041f0     FD 20 02 F6 | 	mov	local02, result1
041f4     14 00 90 FD | 	jmp	#LR__0251
041f8                 | LR__0250
041f8     0F 13 02 F6 | 	mov	arg01, local01
041fc     02 14 06 F6 | 	mov	arg02, #2
04200     01 16 06 F6 | 	mov	arg03, #1
04204     D0 E7 B1 FD | 	call	#__system__Mid_S
04208     FD 20 02 F6 | 	mov	local02, result1
0420c                 | LR__0251
0420c                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
0420c     0F 13 02 F6 | 	mov	arg01, local01
04210     09 23 02 F6 | 	mov	local03, arg01
04214     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04218                 | LR__0252
04218     11 FB C9 FA | 	rdbyte	result1, local03 wz
0421c     01 22 06 51 |  if_ne	add	local03, #1
04220     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
04224                 | LR__0253
04224     09 23 82 F1 | 	sub	local03, arg01
04228     11 15 02 F6 | 	mov	arg02, local03
0422c     01 14 86 F1 | 	sub	arg02, #1
04230     0F 13 02 F6 | 	mov	arg01, local01
04234     01 16 06 F6 | 	mov	arg03, #1
04238     9C E7 B1 FD | 	call	#__system__Mid_S
0423c     FD 12 02 F6 | 	mov	arg01, result1
04240     81 01 00 FF 
04244     51 14 06 F6 | 	mov	arg02, ##@LR__5113
04248     20 C6 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     28 00 90 AD |  if_e	jmp	#LR__0254
04254     0F 13 02 F6 | 	mov	arg01, local01
04258     01 14 06 F6 | 	mov	arg02, #1
0425c     E8 E6 B1 FD | 	call	#__system__Right_S
04260     FD 12 02 F6 | 	mov	arg01, result1
04264     9C F9 B1 FD | 	call	#__system____builtin_atof
04268     FD 12 02 F6 | 	mov	arg01, result1
0426c     00 14 06 F6 | 	mov	arg02, #0
04270     4C F6 B1 FD | 	call	#__system___float_tointeger
04274     FD 24 02 F6 | 	mov	local04, result1
04278     34 00 90 FD | 	jmp	#LR__0255
0427c                 | LR__0254
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     01 14 06 F6 | 	mov	arg02, #1
04284     C0 E6 B1 FD | 	call	#__system__Right_S
04288     FD 12 02 F6 | 	mov	arg01, result1
0428c     74 F9 B1 FD | 	call	#__system____builtin_atof
04290     FD 14 02 F6 | 	mov	arg02, result1
04294     00 C0 5F FF 
04298     00 12 06 F6 | 	mov	arg01, ##-1082130432
0429c     58 F1 B1 FD | 	call	#__system___float_mul
042a0     FD 12 02 F6 | 	mov	arg01, result1
042a4     00 14 06 F6 | 	mov	arg02, #0
042a8     14 F6 B1 FD | 	call	#__system___float_tointeger
042ac     FD 24 02 F6 | 	mov	local04, result1
042b0                 | LR__0255
042b0                 | ' 
042b0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
042b0     00 24 0E F2 | 	cmp	local04, #0 wz
042b4     24 00 90 5D |  if_ne	jmp	#LR__0256
042b8     0F 13 02 F6 | 	mov	arg01, local01
042bc     01 14 06 F6 | 	mov	arg02, #1
042c0     84 E6 B1 FD | 	call	#__system__Right_S
042c4     FD 12 02 F6 | 	mov	arg01, result1
042c8     81 01 00 FF 
042cc     53 14 06 F6 | 	mov	arg02, ##@LR__5114
042d0     98 C5 B1 FD | 	call	#__system___string_cmp
042d4     00 FA 0D F2 | 	cmp	result1, #0 wz
042d8     04 24 06 56 |  if_ne	mov	local04, #4
042dc                 | LR__0256
042dc                 | ' 
042dc                 | ' select case s1
042dc     10 27 02 F6 | 	mov	local05, local02
042e0     81 01 00 FF 
042e4     55 14 06 F6 | 	mov	arg02, ##@LR__5115
042e8     13 13 02 F6 | 	mov	arg01, local05
042ec     7C C5 B1 FD | 	call	#__system___string_cmp
042f0     00 FA 0D F2 | 	cmp	result1, #0 wz
042f4     24 01 90 AD |  if_e	jmp	#LR__0257
042f8     81 01 00 FF 
042fc     57 14 06 F6 | 	mov	arg02, ##@LR__5116
04300     13 13 02 F6 | 	mov	arg01, local05
04304     64 C5 B1 FD | 	call	#__system___string_cmp
04308     00 FA 0D F2 | 	cmp	result1, #0 wz
0430c     18 01 90 AD |  if_e	jmp	#LR__0258
04310     81 01 00 FF 
04314     5A 14 06 F6 | 	mov	arg02, ##@LR__5117
04318     13 13 02 F6 | 	mov	arg01, local05
0431c     4C C5 B1 FD | 	call	#__system___string_cmp
04320     00 FA 0D F2 | 	cmp	result1, #0 wz
04324     0C 01 90 AD |  if_e	jmp	#LR__0259
04328     81 01 00 FF 
0432c     5C 14 06 F6 | 	mov	arg02, ##@LR__5118
04330     13 13 02 F6 | 	mov	arg01, local05
04334     34 C5 B1 FD | 	call	#__system___string_cmp
04338     00 FA 0D F2 | 	cmp	result1, #0 wz
0433c     00 01 90 AD |  if_e	jmp	#LR__0260
04340     81 01 00 FF 
04344     5F 14 06 F6 | 	mov	arg02, ##@LR__5119
04348     13 13 02 F6 | 	mov	arg01, local05
0434c     1C C5 B1 FD | 	call	#__system___string_cmp
04350     00 FA 0D F2 | 	cmp	result1, #0 wz
04354     F4 00 90 AD |  if_e	jmp	#LR__0261
04358     81 01 00 FF 
0435c     61 14 06 F6 | 	mov	arg02, ##@LR__5120
04360     13 13 02 F6 | 	mov	arg01, local05
04364     04 C5 B1 FD | 	call	#__system___string_cmp
04368     00 FA 0D F2 | 	cmp	result1, #0 wz
0436c     E8 00 90 AD |  if_e	jmp	#LR__0262
04370     81 01 00 FF 
04374     63 14 06 F6 | 	mov	arg02, ##@LR__5121
04378     13 13 02 F6 | 	mov	arg01, local05
0437c     EC C4 B1 FD | 	call	#__system___string_cmp
04380     00 FA 0D F2 | 	cmp	result1, #0 wz
04384     DC 00 90 AD |  if_e	jmp	#LR__0263
04388     81 01 00 FF 
0438c     66 14 06 F6 | 	mov	arg02, ##@LR__5122
04390     13 13 02 F6 | 	mov	arg01, local05
04394     D4 C4 B1 FD | 	call	#__system___string_cmp
04398     00 FA 0D F2 | 	cmp	result1, #0 wz
0439c     D0 00 90 AD |  if_e	jmp	#LR__0264
043a0     81 01 00 FF 
043a4     68 14 06 F6 | 	mov	arg02, ##@LR__5123
043a8     13 13 02 F6 | 	mov	arg01, local05
043ac     BC C4 B1 FD | 	call	#__system___string_cmp
043b0     00 FA 0D F2 | 	cmp	result1, #0 wz
043b4     C4 00 90 AD |  if_e	jmp	#LR__0265
043b8     81 01 00 FF 
043bc     6B 14 06 F6 | 	mov	arg02, ##@LR__5124
043c0     13 13 02 F6 | 	mov	arg01, local05
043c4     A4 C4 B1 FD | 	call	#__system___string_cmp
043c8     00 FA 0D F2 | 	cmp	result1, #0 wz
043cc     B8 00 90 AD |  if_e	jmp	#LR__0266
043d0     81 01 00 FF 
043d4     6D 14 06 F6 | 	mov	arg02, ##@LR__5125
043d8     13 13 02 F6 | 	mov	arg01, local05
043dc     8C C4 B1 FD | 	call	#__system___string_cmp
043e0     00 FA 0D F2 | 	cmp	result1, #0 wz
043e4     AC 00 90 AD |  if_e	jmp	#LR__0267
043e8     81 01 00 FF 
043ec     70 14 06 F6 | 	mov	arg02, ##@LR__5126
043f0     13 13 02 F6 | 	mov	arg01, local05
043f4     74 C4 B1 FD | 	call	#__system___string_cmp
043f8     00 FA 0D F2 | 	cmp	result1, #0 wz
043fc     A0 00 90 AD |  if_e	jmp	#LR__0268
04400     81 01 00 FF 
04404     72 14 06 F6 | 	mov	arg02, ##@LR__5127
04408     13 13 02 F6 | 	mov	arg01, local05
0440c     5C C4 B1 FD | 	call	#__system___string_cmp
04410     00 FA 0D F2 | 	cmp	result1, #0 wz
04414     94 00 90 AD |  if_e	jmp	#LR__0269
04418     9C 00 90 FD | 	jmp	#LR__0270
0441c                 | LR__0257
0441c     01 00 00 FF 
04420     00 29 06 F6 | 	mov	local06, ##768
04424     98 00 90 FD | 	jmp	#LR__0271
04428                 | LR__0258
04428     01 00 00 FF 
0442c     01 29 06 F6 | 	mov	local06, ##769
04430     8C 00 90 FD | 	jmp	#LR__0271
04434                 | LR__0259
04434     01 00 00 FF 
04438     02 29 06 F6 | 	mov	local06, ##770
0443c     80 00 90 FD | 	jmp	#LR__0271
04440                 | LR__0260
04440     01 00 00 FF 
04444     03 29 06 F6 | 	mov	local06, ##771
04448     74 00 90 FD | 	jmp	#LR__0271
0444c                 | LR__0261
0444c     01 00 00 FF 
04450     04 29 06 F6 | 	mov	local06, ##772
04454     68 00 90 FD | 	jmp	#LR__0271
04458                 | LR__0262
04458     01 00 00 FF 
0445c     05 29 06 F6 | 	mov	local06, ##773
04460     5C 00 90 FD | 	jmp	#LR__0271
04464                 | LR__0263
04464     01 00 00 FF 
04468     06 29 06 F6 | 	mov	local06, ##774
0446c     50 00 90 FD | 	jmp	#LR__0271
04470                 | LR__0264
04470     01 00 00 FF 
04474     07 29 06 F6 | 	mov	local06, ##775
04478     44 00 90 FD | 	jmp	#LR__0271
0447c                 | LR__0265
0447c     01 00 00 FF 
04480     08 29 06 F6 | 	mov	local06, ##776
04484     38 00 90 FD | 	jmp	#LR__0271
04488                 | LR__0266
04488     01 00 00 FF 
0448c     09 29 06 F6 | 	mov	local06, ##777
04490     2C 00 90 FD | 	jmp	#LR__0271
04494                 | LR__0267
04494     01 00 00 FF 
04498     0A 29 06 F6 | 	mov	local06, ##778
0449c     20 00 90 FD | 	jmp	#LR__0271
044a0                 | LR__0268
044a0     01 00 00 FF 
044a4     0B 29 06 F6 | 	mov	local06, ##779
044a8     14 00 90 FD | 	jmp	#LR__0271
044ac                 | LR__0269
044ac     01 00 00 FF 
044b0     0B 29 06 F6 | 	mov	local06, ##779
044b4     08 00 90 FD | 	jmp	#LR__0271
044b8                 | LR__0270
044b8     00 FA 05 F6 | 	mov	result1, #0
044bc     28 00 90 FD | 	jmp	#LR__0273
044c0                 | LR__0271
044c0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
044c0     FF FF 7F FF 
044c4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
044c8     18 00 90 CD |  if_b	jmp	#LR__0272
044cc     0A 24 56 F2 | 	cmps	local04, #10 wc
044d0     12 2B 02 C6 |  if_b	mov	local07, local04
044d4     01 2A 66 C0 |  if_b	shl	local07, #1
044d8     12 2B 02 C1 |  if_b	add	local07, local04
044dc     02 2A 66 C0 |  if_b	shl	local07, #2
044e0     15 29 02 C1 |  if_b	add	local06, local07
044e4                 | LR__0272
044e4                 | ' return token
044e4     14 FB 01 F6 | 	mov	result1, local06
044e8                 | LR__0273
044e8     A7 F0 03 F6 | 	mov	ptra, fp
044ec     B2 00 A0 FD | 	call	#popregs_
044f0                 | _isnotename_ret
044f0     2D 00 64 FD | 	ret
044f4                 | 
044f4                 | ' 
044f4                 | ' ' Check if the part is a separator, return a token or 0 if not found
044f4                 | ' 
044f4                 | ' function isseparator(s as string) as ubyte
044f4                 | _isseparator
044f4     01 4A 05 F6 | 	mov	COUNT_, #1
044f8     A8 00 A0 FD | 	call	#pushregs_
044fc                 | ' 
044fc                 | ' select case s
044fc     09 1F 02 F6 | 	mov	local01, arg01
04500     81 01 00 FF 
04504     74 14 06 F6 | 	mov	arg02, ##@LR__5128
04508     0F 13 02 F6 | 	mov	arg01, local01
0450c     5C C3 B1 FD | 	call	#__system___string_cmp
04510     00 FA 0D F2 | 	cmp	result1, #0 wz
04514     54 01 90 AD |  if_e	jmp	#LR__0280
04518     81 01 00 FF 
0451c     76 14 06 F6 | 	mov	arg02, ##@LR__5129
04520     0F 13 02 F6 | 	mov	arg01, local01
04524     44 C3 B1 FD | 	call	#__system___string_cmp
04528     00 FA 0D F2 | 	cmp	result1, #0 wz
0452c     44 01 90 AD |  if_e	jmp	#LR__0281
04530     81 01 00 FF 
04534     78 14 06 F6 | 	mov	arg02, ##@LR__5130
04538     0F 13 02 F6 | 	mov	arg01, local01
0453c     2C C3 B1 FD | 	call	#__system___string_cmp
04540     00 FA 0D F2 | 	cmp	result1, #0 wz
04544     34 01 90 AD |  if_e	jmp	#LR__0282
04548     81 01 00 FF 
0454c     7A 14 06 F6 | 	mov	arg02, ##@LR__5131
04550     0F 13 02 F6 | 	mov	arg01, local01
04554     14 C3 B1 FD | 	call	#__system___string_cmp
04558     00 FA 0D F2 | 	cmp	result1, #0 wz
0455c     24 01 90 AD |  if_e	jmp	#LR__0283
04560     81 01 00 FF 
04564     7C 14 06 F6 | 	mov	arg02, ##@LR__5132
04568     0F 13 02 F6 | 	mov	arg01, local01
0456c     FC C2 B1 FD | 	call	#__system___string_cmp
04570     00 FA 0D F2 | 	cmp	result1, #0 wz
04574     14 01 90 AD |  if_e	jmp	#LR__0284
04578     81 01 00 FF 
0457c     7E 14 06 F6 | 	mov	arg02, ##@LR__5133
04580     0F 13 02 F6 | 	mov	arg01, local01
04584     E4 C2 B1 FD | 	call	#__system___string_cmp
04588     00 FA 0D F2 | 	cmp	result1, #0 wz
0458c     04 01 90 AD |  if_e	jmp	#LR__0285
04590     81 01 00 FF 
04594     80 14 06 F6 | 	mov	arg02, ##@LR__5134
04598     0F 13 02 F6 | 	mov	arg01, local01
0459c     CC C2 B1 FD | 	call	#__system___string_cmp
045a0     00 FA 0D F2 | 	cmp	result1, #0 wz
045a4     F4 00 90 AD |  if_e	jmp	#LR__0286
045a8     81 01 00 FF 
045ac     82 14 06 F6 | 	mov	arg02, ##@LR__5135
045b0     0F 13 02 F6 | 	mov	arg01, local01
045b4     B4 C2 B1 FD | 	call	#__system___string_cmp
045b8     00 FA 0D F2 | 	cmp	result1, #0 wz
045bc     E4 00 90 AD |  if_e	jmp	#LR__0287
045c0     81 01 00 FF 
045c4     84 14 06 F6 | 	mov	arg02, ##@LR__5136
045c8     0F 13 02 F6 | 	mov	arg01, local01
045cc     9C C2 B1 FD | 	call	#__system___string_cmp
045d0     00 FA 0D F2 | 	cmp	result1, #0 wz
045d4     D4 00 90 AD |  if_e	jmp	#LR__0288
045d8     81 01 00 FF 
045dc     86 14 06 F6 | 	mov	arg02, ##@LR__5137
045e0     0F 13 02 F6 | 	mov	arg01, local01
045e4     84 C2 B1 FD | 	call	#__system___string_cmp
045e8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ec     C4 00 90 AD |  if_e	jmp	#LR__0289
045f0     81 01 00 FF 
045f4     88 14 06 F6 | 	mov	arg02, ##@LR__5138
045f8     0F 13 02 F6 | 	mov	arg01, local01
045fc     6C C2 B1 FD | 	call	#__system___string_cmp
04600     00 FA 0D F2 | 	cmp	result1, #0 wz
04604     B4 00 90 AD |  if_e	jmp	#LR__0290
04608     81 01 00 FF 
0460c     8A 14 06 F6 | 	mov	arg02, ##@LR__5139
04610     0F 13 02 F6 | 	mov	arg01, local01
04614     54 C2 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     A4 00 90 AD |  if_e	jmp	#LR__0291
04620     81 01 00 FF 
04624     8C 14 06 F6 | 	mov	arg02, ##@LR__5140
04628     0F 13 02 F6 | 	mov	arg01, local01
0462c     3C C2 B1 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     94 00 90 AD |  if_e	jmp	#LR__0292
04638     81 01 00 FF 
0463c     8E 14 06 F6 | 	mov	arg02, ##@LR__5141
04640     0F 13 02 F6 | 	mov	arg01, local01
04644     24 C2 B1 FD | 	call	#__system___string_cmp
04648     00 FA 0D F2 | 	cmp	result1, #0 wz
0464c     84 00 90 AD |  if_e	jmp	#LR__0293
04650     81 01 00 FF 
04654     90 14 06 F6 | 	mov	arg02, ##@LR__5142
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     0C C2 B1 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     74 00 90 AD |  if_e	jmp	#LR__0294
04668     78 00 90 FD | 	jmp	#LR__0295
0466c                 | LR__0280
0466c     01 FA 05 F6 | 	mov	result1, #1
04670     74 00 90 FD | 	jmp	#LR__0296
04674                 | LR__0281
04674     02 FA 05 F6 | 	mov	result1, #2
04678     6C 00 90 FD | 	jmp	#LR__0296
0467c                 | LR__0282
0467c     1B FA 05 F6 | 	mov	result1, #27
04680     64 00 90 FD | 	jmp	#LR__0296
04684                 | LR__0283
04684     11 FA 05 F6 | 	mov	result1, #17
04688     5C 00 90 FD | 	jmp	#LR__0296
0468c                 | LR__0284
0468c     05 FA 05 F6 | 	mov	result1, #5
04690     54 00 90 FD | 	jmp	#LR__0296
04694                 | LR__0285
04694     06 FA 05 F6 | 	mov	result1, #6
04698     4C 00 90 FD | 	jmp	#LR__0296
0469c                 | LR__0286
0469c     12 FA 05 F6 | 	mov	result1, #18
046a0     44 00 90 FD | 	jmp	#LR__0296
046a4                 | LR__0287
046a4     13 FA 05 F6 | 	mov	result1, #19
046a8     3C 00 90 FD | 	jmp	#LR__0296
046ac                 | LR__0288
046ac     0C FA 05 F6 | 	mov	result1, #12
046b0     34 00 90 FD | 	jmp	#LR__0296
046b4                 | LR__0289
046b4     14 FA 05 F6 | 	mov	result1, #20
046b8     2C 00 90 FD | 	jmp	#LR__0296
046bc                 | LR__0290
046bc     15 FA 05 F6 | 	mov	result1, #21
046c0     24 00 90 FD | 	jmp	#LR__0296
046c4                 | LR__0291
046c4     16 FA 05 F6 | 	mov	result1, #22
046c8     1C 00 90 FD | 	jmp	#LR__0296
046cc                 | LR__0292
046cc     FF FB 05 F6 | 	mov	result1, #511
046d0     14 00 90 FD | 	jmp	#LR__0296
046d4                 | LR__0293
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     0C 00 90 FD | 	jmp	#LR__0296
046dc                 | LR__0294
046dc     10 FA 05 F6 | 	mov	result1, #16
046e0     04 00 90 FD | 	jmp	#LR__0296
046e4                 | LR__0295
046e4     00 FA 05 F6 | 	mov	result1, #0
046e8                 | LR__0296
046e8     A7 F0 03 F6 | 	mov	ptra, fp
046ec     B2 00 A0 FD | 	call	#popregs_
046f0                 | _isseparator_ret
046f0     2D 00 64 FD | 	ret
046f4                 | 
046f4                 | ' 
046f4                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
046f4                 | ' 
046f4                 | ' function iscommand(s as string) as ubyte
046f4                 | _iscommand
046f4     01 4A 05 F6 | 	mov	COUNT_, #1
046f8     A8 00 A0 FD | 	call	#pushregs_
046fc                 | ' 
046fc                 | ' select case s
046fc     09 1F 02 F6 | 	mov	local01, arg01
04700     81 01 00 FF 
04704     94 14 06 F6 | 	mov	arg02, ##@LR__5144
04708     0F 13 02 F6 | 	mov	arg01, local01
0470c     5C C1 B1 FD | 	call	#__system___string_cmp
04710     00 FA 0D F2 | 	cmp	result1, #0 wz
04714     74 0B 90 AD |  if_e	jmp	#LR__0300
04718     81 01 00 FF 
0471c     99 14 06 F6 | 	mov	arg02, ##@LR__5145
04720     0F 13 02 F6 | 	mov	arg01, local01
04724     44 C1 B1 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     64 0B 90 AD |  if_e	jmp	#LR__0301
04730     81 01 00 FF 
04734     9C 14 06 F6 | 	mov	arg02, ##@LR__5146
04738     0F 13 02 F6 | 	mov	arg01, local01
0473c     2C C1 B1 FD | 	call	#__system___string_cmp
04740     00 FA 0D F2 | 	cmp	result1, #0 wz
04744     54 0B 90 AD |  if_e	jmp	#LR__0302
04748     81 01 00 FF 
0474c     A0 14 06 F6 | 	mov	arg02, ##@LR__5147
04750     0F 13 02 F6 | 	mov	arg01, local01
04754     14 C1 B1 FD | 	call	#__system___string_cmp
04758     00 FA 0D F2 | 	cmp	result1, #0 wz
0475c     44 0B 90 AD |  if_e	jmp	#LR__0303
04760     81 01 00 FF 
04764     A5 14 06 F6 | 	mov	arg02, ##@LR__5148
04768     0F 13 02 F6 | 	mov	arg01, local01
0476c     FC C0 B1 FD | 	call	#__system___string_cmp
04770     00 FA 0D F2 | 	cmp	result1, #0 wz
04774     34 0B 90 AD |  if_e	jmp	#LR__0304
04778     81 01 00 FF 
0477c     A9 14 06 F6 | 	mov	arg02, ##@LR__5149
04780     0F 13 02 F6 | 	mov	arg01, local01
04784     E4 C0 B1 FD | 	call	#__system___string_cmp
04788     00 FA 0D F2 | 	cmp	result1, #0 wz
0478c     24 0B 90 AD |  if_e	jmp	#LR__0305
04790     81 01 00 FF 
04794     AC 14 06 F6 | 	mov	arg02, ##@LR__5150
04798     0F 13 02 F6 | 	mov	arg01, local01
0479c     CC C0 B1 FD | 	call	#__system___string_cmp
047a0     00 FA 0D F2 | 	cmp	result1, #0 wz
047a4     14 0B 90 AD |  if_e	jmp	#LR__0306
047a8     81 01 00 FF 
047ac     B7 14 06 F6 | 	mov	arg02, ##@LR__5151
047b0     0F 13 02 F6 | 	mov	arg01, local01
047b4     B4 C0 B1 FD | 	call	#__system___string_cmp
047b8     00 FA 0D F2 | 	cmp	result1, #0 wz
047bc     04 0B 90 AD |  if_e	jmp	#LR__0307
047c0     81 01 00 FF 
047c4     BB 14 06 F6 | 	mov	arg02, ##@LR__5152
047c8     0F 13 02 F6 | 	mov	arg01, local01
047cc     9C C0 B1 FD | 	call	#__system___string_cmp
047d0     00 FA 0D F2 | 	cmp	result1, #0 wz
047d4     F4 0A 90 AD |  if_e	jmp	#LR__0308
047d8     81 01 00 FF 
047dc     C5 14 06 F6 | 	mov	arg02, ##@LR__5153
047e0     0F 13 02 F6 | 	mov	arg01, local01
047e4     84 C0 B1 FD | 	call	#__system___string_cmp
047e8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ec     E4 0A 90 AD |  if_e	jmp	#LR__0309
047f0     81 01 00 FF 
047f4     C9 14 06 F6 | 	mov	arg02, ##@LR__5154
047f8     0F 13 02 F6 | 	mov	arg01, local01
047fc     6C C0 B1 FD | 	call	#__system___string_cmp
04800     00 FA 0D F2 | 	cmp	result1, #0 wz
04804     D4 0A 90 AD |  if_e	jmp	#LR__0310
04808     81 01 00 FF 
0480c     D3 14 06 F6 | 	mov	arg02, ##@LR__5155
04810     0F 13 02 F6 | 	mov	arg01, local01
04814     54 C0 B1 FD | 	call	#__system___string_cmp
04818     00 FA 0D F2 | 	cmp	result1, #0 wz
0481c     C4 0A 90 AD |  if_e	jmp	#LR__0311
04820     81 01 00 FF 
04824     D7 14 06 F6 | 	mov	arg02, ##@LR__5156
04828     0F 13 02 F6 | 	mov	arg01, local01
0482c     3C C0 B1 FD | 	call	#__system___string_cmp
04830     00 FA 0D F2 | 	cmp	result1, #0 wz
04834     B4 0A 90 AD |  if_e	jmp	#LR__0312
04838     81 01 00 FF 
0483c     E2 14 06 F6 | 	mov	arg02, ##@LR__5157
04840     0F 13 02 F6 | 	mov	arg01, local01
04844     24 C0 B1 FD | 	call	#__system___string_cmp
04848     00 FA 0D F2 | 	cmp	result1, #0 wz
0484c     A4 0A 90 AD |  if_e	jmp	#LR__0313
04850     81 01 00 FF 
04854     E6 14 06 F6 | 	mov	arg02, ##@LR__5158
04858     0F 13 02 F6 | 	mov	arg01, local01
0485c     0C C0 B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     94 0A 90 AD |  if_e	jmp	#LR__0314
04868     81 01 00 FF 
0486c     ED 14 06 F6 | 	mov	arg02, ##@LR__5159
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     F4 BF B1 FD | 	call	#__system___string_cmp
04878     00 FA 0D F2 | 	cmp	result1, #0 wz
0487c     84 0A 90 AD |  if_e	jmp	#LR__0315
04880     81 01 00 FF 
04884     F1 14 06 F6 | 	mov	arg02, ##@LR__5160
04888     0F 13 02 F6 | 	mov	arg01, local01
0488c     DC BF B1 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     74 0A 90 AD |  if_e	jmp	#LR__0316
04898     81 01 00 FF 
0489c     F7 14 06 F6 | 	mov	arg02, ##@LR__5161
048a0     0F 13 02 F6 | 	mov	arg01, local01
048a4     C4 BF B1 FD | 	call	#__system___string_cmp
048a8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ac     64 0A 90 AD |  if_e	jmp	#LR__0317
048b0     81 01 00 FF 
048b4     FD 14 06 F6 | 	mov	arg02, ##@LR__5162
048b8     0F 13 02 F6 | 	mov	arg01, local01
048bc     AC BF B1 FD | 	call	#__system___string_cmp
048c0     00 FA 0D F2 | 	cmp	result1, #0 wz
048c4     54 0A 90 AD |  if_e	jmp	#LR__0318
048c8     81 01 00 FF 
048cc     01 15 06 F6 | 	mov	arg02, ##@LR__5163
048d0     0F 13 02 F6 | 	mov	arg01, local01
048d4     94 BF B1 FD | 	call	#__system___string_cmp
048d8     00 FA 0D F2 | 	cmp	result1, #0 wz
048dc     44 0A 90 AD |  if_e	jmp	#LR__0319
048e0     81 01 00 FF 
048e4     07 15 06 F6 | 	mov	arg02, ##@LR__5164
048e8     0F 13 02 F6 | 	mov	arg01, local01
048ec     7C BF B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     34 0A 90 AD |  if_e	jmp	#LR__0320
048f8     81 01 00 FF 
048fc     0A 15 06 F6 | 	mov	arg02, ##@LR__5165
04900     0F 13 02 F6 | 	mov	arg01, local01
04904     64 BF B1 FD | 	call	#__system___string_cmp
04908     00 FA 0D F2 | 	cmp	result1, #0 wz
0490c     24 0A 90 AD |  if_e	jmp	#LR__0321
04910     81 01 00 FF 
04914     10 15 06 F6 | 	mov	arg02, ##@LR__5166
04918     0F 13 02 F6 | 	mov	arg01, local01
0491c     4C BF B1 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     14 0A 90 AD |  if_e	jmp	#LR__0322
04928     81 01 00 FF 
0492c     14 15 06 F6 | 	mov	arg02, ##@LR__5167
04930     0F 13 02 F6 | 	mov	arg01, local01
04934     34 BF B1 FD | 	call	#__system___string_cmp
04938     00 FA 0D F2 | 	cmp	result1, #0 wz
0493c     04 0A 90 AD |  if_e	jmp	#LR__0323
04940     81 01 00 FF 
04944     1B 15 06 F6 | 	mov	arg02, ##@LR__5168
04948     0F 13 02 F6 | 	mov	arg01, local01
0494c     1C BF B1 FD | 	call	#__system___string_cmp
04950     00 FA 0D F2 | 	cmp	result1, #0 wz
04954     F4 09 90 AD |  if_e	jmp	#LR__0324
04958     81 01 00 FF 
0495c     22 15 06 F6 | 	mov	arg02, ##@LR__5169
04960     0F 13 02 F6 | 	mov	arg01, local01
04964     04 BF B1 FD | 	call	#__system___string_cmp
04968     00 FA 0D F2 | 	cmp	result1, #0 wz
0496c     E4 09 90 AD |  if_e	jmp	#LR__0325
04970     81 01 00 FF 
04974     29 15 06 F6 | 	mov	arg02, ##@LR__5170
04978     0F 13 02 F6 | 	mov	arg01, local01
0497c     EC BE B1 FD | 	call	#__system___string_cmp
04980     00 FA 0D F2 | 	cmp	result1, #0 wz
04984     D4 09 90 AD |  if_e	jmp	#LR__0326
04988     81 01 00 FF 
0498c     33 15 06 F6 | 	mov	arg02, ##@LR__5171
04990     0F 13 02 F6 | 	mov	arg01, local01
04994     D4 BE B1 FD | 	call	#__system___string_cmp
04998     00 FA 0D F2 | 	cmp	result1, #0 wz
0499c     C4 09 90 AD |  if_e	jmp	#LR__0327
049a0     81 01 00 FF 
049a4     37 15 06 F6 | 	mov	arg02, ##@LR__5172
049a8     0F 13 02 F6 | 	mov	arg01, local01
049ac     BC BE B1 FD | 	call	#__system___string_cmp
049b0     00 FA 0D F2 | 	cmp	result1, #0 wz
049b4     B4 09 90 AD |  if_e	jmp	#LR__0328
049b8     81 01 00 FF 
049bc     3B 15 06 F6 | 	mov	arg02, ##@LR__5173
049c0     0F 13 02 F6 | 	mov	arg01, local01
049c4     A4 BE B1 FD | 	call	#__system___string_cmp
049c8     00 FA 0D F2 | 	cmp	result1, #0 wz
049cc     A4 09 90 AD |  if_e	jmp	#LR__0329
049d0     81 01 00 FF 
049d4     3F 15 06 F6 | 	mov	arg02, ##@LR__5174
049d8     0F 13 02 F6 | 	mov	arg01, local01
049dc     8C BE B1 FD | 	call	#__system___string_cmp
049e0     00 FA 0D F2 | 	cmp	result1, #0 wz
049e4     94 09 90 AD |  if_e	jmp	#LR__0330
049e8     81 01 00 FF 
049ec     43 15 06 F6 | 	mov	arg02, ##@LR__5175
049f0     0F 13 02 F6 | 	mov	arg01, local01
049f4     74 BE B1 FD | 	call	#__system___string_cmp
049f8     00 FA 0D F2 | 	cmp	result1, #0 wz
049fc     84 09 90 AD |  if_e	jmp	#LR__0331
04a00     81 01 00 FF 
04a04     49 15 06 F6 | 	mov	arg02, ##@LR__5176
04a08     0F 13 02 F6 | 	mov	arg01, local01
04a0c     5C BE B1 FD | 	call	#__system___string_cmp
04a10     00 FA 0D F2 | 	cmp	result1, #0 wz
04a14     74 09 90 AD |  if_e	jmp	#LR__0332
04a18     81 01 00 FF 
04a1c     4E 15 06 F6 | 	mov	arg02, ##@LR__5177
04a20     0F 13 02 F6 | 	mov	arg01, local01
04a24     44 BE B1 FD | 	call	#__system___string_cmp
04a28     00 FA 0D F2 | 	cmp	result1, #0 wz
04a2c     64 09 90 AD |  if_e	jmp	#LR__0333
04a30     81 01 00 FF 
04a34     52 15 06 F6 | 	mov	arg02, ##@LR__5178
04a38     0F 13 02 F6 | 	mov	arg01, local01
04a3c     2C BE B1 FD | 	call	#__system___string_cmp
04a40     00 FA 0D F2 | 	cmp	result1, #0 wz
04a44     54 09 90 AD |  if_e	jmp	#LR__0334
04a48     81 01 00 FF 
04a4c     57 15 06 F6 | 	mov	arg02, ##@LR__5179
04a50     0F 13 02 F6 | 	mov	arg01, local01
04a54     14 BE B1 FD | 	call	#__system___string_cmp
04a58     00 FA 0D F2 | 	cmp	result1, #0 wz
04a5c     44 09 90 AD |  if_e	jmp	#LR__0335
04a60     81 01 00 FF 
04a64     5B 15 06 F6 | 	mov	arg02, ##@LR__5180
04a68     0F 13 02 F6 | 	mov	arg01, local01
04a6c     FC BD B1 FD | 	call	#__system___string_cmp
04a70     00 FA 0D F2 | 	cmp	result1, #0 wz
04a74     34 09 90 AD |  if_e	jmp	#LR__0336
04a78     81 01 00 FF 
04a7c     61 15 06 F6 | 	mov	arg02, ##@LR__5181
04a80     0F 13 02 F6 | 	mov	arg01, local01
04a84     E4 BD B1 FD | 	call	#__system___string_cmp
04a88     00 FA 0D F2 | 	cmp	result1, #0 wz
04a8c     24 09 90 AD |  if_e	jmp	#LR__0337
04a90     81 01 00 FF 
04a94     64 15 06 F6 | 	mov	arg02, ##@LR__5182
04a98     0F 13 02 F6 | 	mov	arg01, local01
04a9c     CC BD B1 FD | 	call	#__system___string_cmp
04aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa4     14 09 90 AD |  if_e	jmp	#LR__0338
04aa8     81 01 00 FF 
04aac     6C 15 06 F6 | 	mov	arg02, ##@LR__5183
04ab0     0F 13 02 F6 | 	mov	arg01, local01
04ab4     B4 BD B1 FD | 	call	#__system___string_cmp
04ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
04abc     04 09 90 AD |  if_e	jmp	#LR__0339
04ac0     81 01 00 FF 
04ac4     70 15 06 F6 | 	mov	arg02, ##@LR__5184
04ac8     0F 13 02 F6 | 	mov	arg01, local01
04acc     9C BD B1 FD | 	call	#__system___string_cmp
04ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad4     F4 08 90 AD |  if_e	jmp	#LR__0340
04ad8     81 01 00 FF 
04adc     75 15 06 F6 | 	mov	arg02, ##@LR__5185
04ae0     0F 13 02 F6 | 	mov	arg01, local01
04ae4     84 BD B1 FD | 	call	#__system___string_cmp
04ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
04aec     E4 08 90 AD |  if_e	jmp	#LR__0341
04af0     81 01 00 FF 
04af4     79 15 06 F6 | 	mov	arg02, ##@LR__5186
04af8     0F 13 02 F6 | 	mov	arg01, local01
04afc     6C BD B1 FD | 	call	#__system___string_cmp
04b00     00 FA 0D F2 | 	cmp	result1, #0 wz
04b04     D4 08 90 AD |  if_e	jmp	#LR__0342
04b08     81 01 00 FF 
04b0c     7E 15 06 F6 | 	mov	arg02, ##@LR__5187
04b10     0F 13 02 F6 | 	mov	arg01, local01
04b14     54 BD B1 FD | 	call	#__system___string_cmp
04b18     00 FA 0D F2 | 	cmp	result1, #0 wz
04b1c     C4 08 90 AD |  if_e	jmp	#LR__0343
04b20     81 01 00 FF 
04b24     82 15 06 F6 | 	mov	arg02, ##@LR__5188
04b28     0F 13 02 F6 | 	mov	arg01, local01
04b2c     3C BD B1 FD | 	call	#__system___string_cmp
04b30     00 FA 0D F2 | 	cmp	result1, #0 wz
04b34     B4 08 90 AD |  if_e	jmp	#LR__0344
04b38     81 01 00 FF 
04b3c     85 15 06 F6 | 	mov	arg02, ##@LR__5189
04b40     0F 13 02 F6 | 	mov	arg01, local01
04b44     24 BD B1 FD | 	call	#__system___string_cmp
04b48     00 FA 0D F2 | 	cmp	result1, #0 wz
04b4c     A4 08 90 AD |  if_e	jmp	#LR__0345
04b50     81 01 00 FF 
04b54     8B 15 06 F6 | 	mov	arg02, ##@LR__5190
04b58     0F 13 02 F6 | 	mov	arg01, local01
04b5c     0C BD B1 FD | 	call	#__system___string_cmp
04b60     00 FA 0D F2 | 	cmp	result1, #0 wz
04b64     94 08 90 AD |  if_e	jmp	#LR__0346
04b68     81 01 00 FF 
04b6c     8F 15 06 F6 | 	mov	arg02, ##@LR__5191
04b70     0F 13 02 F6 | 	mov	arg01, local01
04b74     F4 BC B1 FD | 	call	#__system___string_cmp
04b78     00 FA 0D F2 | 	cmp	result1, #0 wz
04b7c     84 08 90 AD |  if_e	jmp	#LR__0347
04b80     81 01 00 FF 
04b84     93 15 06 F6 | 	mov	arg02, ##@LR__5192
04b88     0F 13 02 F6 | 	mov	arg01, local01
04b8c     DC BC B1 FD | 	call	#__system___string_cmp
04b90     00 FA 0D F2 | 	cmp	result1, #0 wz
04b94     74 08 90 AD |  if_e	jmp	#LR__0348
04b98     81 01 00 FF 
04b9c     99 15 06 F6 | 	mov	arg02, ##@LR__5193
04ba0     0F 13 02 F6 | 	mov	arg01, local01
04ba4     C4 BC B1 FD | 	call	#__system___string_cmp
04ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bac     64 08 90 AD |  if_e	jmp	#LR__0349
04bb0     81 01 00 FF 
04bb4     9E 15 06 F6 | 	mov	arg02, ##@LR__5194
04bb8     0F 13 02 F6 | 	mov	arg01, local01
04bbc     AC BC B1 FD | 	call	#__system___string_cmp
04bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc4     54 08 90 AD |  if_e	jmp	#LR__0350
04bc8     81 01 00 FF 
04bcc     A1 15 06 F6 | 	mov	arg02, ##@LR__5195
04bd0     0F 13 02 F6 | 	mov	arg01, local01
04bd4     94 BC B1 FD | 	call	#__system___string_cmp
04bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bdc     44 08 90 AD |  if_e	jmp	#LR__0351
04be0     81 01 00 FF 
04be4     A4 15 06 F6 | 	mov	arg02, ##@LR__5196
04be8     0F 13 02 F6 | 	mov	arg01, local01
04bec     7C BC B1 FD | 	call	#__system___string_cmp
04bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf4     34 08 90 AD |  if_e	jmp	#LR__0352
04bf8     81 01 00 FF 
04bfc     A8 15 06 F6 | 	mov	arg02, ##@LR__5197
04c00     0F 13 02 F6 | 	mov	arg01, local01
04c04     64 BC B1 FD | 	call	#__system___string_cmp
04c08     00 FA 0D F2 | 	cmp	result1, #0 wz
04c0c     24 08 90 AD |  if_e	jmp	#LR__0353
04c10     81 01 00 FF 
04c14     AB 15 06 F6 | 	mov	arg02, ##@LR__5198
04c18     0F 13 02 F6 | 	mov	arg01, local01
04c1c     4C BC B1 FD | 	call	#__system___string_cmp
04c20     00 FA 0D F2 | 	cmp	result1, #0 wz
04c24     14 08 90 AD |  if_e	jmp	#LR__0354
04c28     81 01 00 FF 
04c2c     B0 15 06 F6 | 	mov	arg02, ##@LR__5199
04c30     0F 13 02 F6 | 	mov	arg01, local01
04c34     34 BC B1 FD | 	call	#__system___string_cmp
04c38     00 FA 0D F2 | 	cmp	result1, #0 wz
04c3c     04 08 90 AD |  if_e	jmp	#LR__0355
04c40     81 01 00 FF 
04c44     B3 15 06 F6 | 	mov	arg02, ##@LR__5200
04c48     0F 13 02 F6 | 	mov	arg01, local01
04c4c     1C BC B1 FD | 	call	#__system___string_cmp
04c50     00 FA 0D F2 | 	cmp	result1, #0 wz
04c54     F4 07 90 AD |  if_e	jmp	#LR__0356
04c58     81 01 00 FF 
04c5c     B8 15 06 F6 | 	mov	arg02, ##@LR__5201
04c60     0F 13 02 F6 | 	mov	arg01, local01
04c64     04 BC B1 FD | 	call	#__system___string_cmp
04c68     00 FA 0D F2 | 	cmp	result1, #0 wz
04c6c     E4 07 90 AD |  if_e	jmp	#LR__0357
04c70     81 01 00 FF 
04c74     BC 15 06 F6 | 	mov	arg02, ##@LR__5202
04c78     0F 13 02 F6 | 	mov	arg01, local01
04c7c     EC BB B1 FD | 	call	#__system___string_cmp
04c80     00 FA 0D F2 | 	cmp	result1, #0 wz
04c84     D4 07 90 AD |  if_e	jmp	#LR__0358
04c88     81 01 00 FF 
04c8c     C2 15 06 F6 | 	mov	arg02, ##@LR__5203
04c90     0F 13 02 F6 | 	mov	arg01, local01
04c94     D4 BB B1 FD | 	call	#__system___string_cmp
04c98     00 FA 0D F2 | 	cmp	result1, #0 wz
04c9c     C4 07 90 AD |  if_e	jmp	#LR__0359
04ca0     81 01 00 FF 
04ca4     C7 15 06 F6 | 	mov	arg02, ##@LR__5204
04ca8     0F 13 02 F6 | 	mov	arg01, local01
04cac     BC BB B1 FD | 	call	#__system___string_cmp
04cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb4     B4 07 90 AD |  if_e	jmp	#LR__0360
04cb8     81 01 00 FF 
04cbc     CA 15 06 F6 | 	mov	arg02, ##@LR__5205
04cc0     0F 13 02 F6 | 	mov	arg01, local01
04cc4     A4 BB B1 FD | 	call	#__system___string_cmp
04cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ccc     A4 07 90 AD |  if_e	jmp	#LR__0361
04cd0     81 01 00 FF 
04cd4     D0 15 06 F6 | 	mov	arg02, ##@LR__5206
04cd8     0F 13 02 F6 | 	mov	arg01, local01
04cdc     8C BB B1 FD | 	call	#__system___string_cmp
04ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce4     94 07 90 AD |  if_e	jmp	#LR__0362
04ce8     81 01 00 FF 
04cec     D4 15 06 F6 | 	mov	arg02, ##@LR__5207
04cf0     0F 13 02 F6 | 	mov	arg01, local01
04cf4     74 BB B1 FD | 	call	#__system___string_cmp
04cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cfc     84 07 90 AD |  if_e	jmp	#LR__0363
04d00     81 01 00 FF 
04d04     D9 15 06 F6 | 	mov	arg02, ##@LR__5208
04d08     0F 13 02 F6 | 	mov	arg01, local01
04d0c     5C BB B1 FD | 	call	#__system___string_cmp
04d10     00 FA 0D F2 | 	cmp	result1, #0 wz
04d14     74 07 90 AD |  if_e	jmp	#LR__0364
04d18     81 01 00 FF 
04d1c     DC 15 06 F6 | 	mov	arg02, ##@LR__5209
04d20     0F 13 02 F6 | 	mov	arg01, local01
04d24     44 BB B1 FD | 	call	#__system___string_cmp
04d28     00 FA 0D F2 | 	cmp	result1, #0 wz
04d2c     64 07 90 AD |  if_e	jmp	#LR__0365
04d30     81 01 00 FF 
04d34     E1 15 06 F6 | 	mov	arg02, ##@LR__5210
04d38     0F 13 02 F6 | 	mov	arg01, local01
04d3c     2C BB B1 FD | 	call	#__system___string_cmp
04d40     00 FA 0D F2 | 	cmp	result1, #0 wz
04d44     54 07 90 AD |  if_e	jmp	#LR__0366
04d48     81 01 00 FF 
04d4c     E7 15 06 F6 | 	mov	arg02, ##@LR__5211
04d50     0F 13 02 F6 | 	mov	arg01, local01
04d54     14 BB B1 FD | 	call	#__system___string_cmp
04d58     00 FA 0D F2 | 	cmp	result1, #0 wz
04d5c     44 07 90 AD |  if_e	jmp	#LR__0367
04d60     81 01 00 FF 
04d64     EB 15 06 F6 | 	mov	arg02, ##@LR__5212
04d68     0F 13 02 F6 | 	mov	arg01, local01
04d6c     FC BA B1 FD | 	call	#__system___string_cmp
04d70     00 FA 0D F2 | 	cmp	result1, #0 wz
04d74     34 07 90 AD |  if_e	jmp	#LR__0368
04d78     81 01 00 FF 
04d7c     F4 15 06 F6 | 	mov	arg02, ##@LR__5213
04d80     0F 13 02 F6 | 	mov	arg01, local01
04d84     E4 BA B1 FD | 	call	#__system___string_cmp
04d88     00 FA 0D F2 | 	cmp	result1, #0 wz
04d8c     24 07 90 AD |  if_e	jmp	#LR__0369
04d90     81 01 00 FF 
04d94     FA 15 06 F6 | 	mov	arg02, ##@LR__5214
04d98     0F 13 02 F6 | 	mov	arg01, local01
04d9c     CC BA B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     14 07 90 AD |  if_e	jmp	#LR__0370
04da8     82 01 00 FF 
04dac     00 14 06 F6 | 	mov	arg02, ##@LR__5215
04db0     0F 13 02 F6 | 	mov	arg01, local01
04db4     B4 BA B1 FD | 	call	#__system___string_cmp
04db8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dbc     04 07 90 AD |  if_e	jmp	#LR__0371
04dc0     82 01 00 FF 
04dc4     09 14 06 F6 | 	mov	arg02, ##@LR__5216
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     9C BA B1 FD | 	call	#__system___string_cmp
04dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd4     F4 06 90 AD |  if_e	jmp	#LR__0372
04dd8     82 01 00 FF 
04ddc     13 14 06 F6 | 	mov	arg02, ##@LR__5217
04de0     0F 13 02 F6 | 	mov	arg01, local01
04de4     84 BA B1 FD | 	call	#__system___string_cmp
04de8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dec     E4 06 90 AD |  if_e	jmp	#LR__0373
04df0     82 01 00 FF 
04df4     1C 14 06 F6 | 	mov	arg02, ##@LR__5218
04df8     0F 13 02 F6 | 	mov	arg01, local01
04dfc     6C BA B1 FD | 	call	#__system___string_cmp
04e00     00 FA 0D F2 | 	cmp	result1, #0 wz
04e04     D4 06 90 AD |  if_e	jmp	#LR__0374
04e08     82 01 00 FF 
04e0c     21 14 06 F6 | 	mov	arg02, ##@LR__5219
04e10     0F 13 02 F6 | 	mov	arg01, local01
04e14     54 BA B1 FD | 	call	#__system___string_cmp
04e18     00 FA 0D F2 | 	cmp	result1, #0 wz
04e1c     C4 06 90 AD |  if_e	jmp	#LR__0375
04e20     82 01 00 FF 
04e24     24 14 06 F6 | 	mov	arg02, ##@LR__5220
04e28     0F 13 02 F6 | 	mov	arg01, local01
04e2c     3C BA B1 FD | 	call	#__system___string_cmp
04e30     00 FA 0D F2 | 	cmp	result1, #0 wz
04e34     B4 06 90 AD |  if_e	jmp	#LR__0376
04e38     82 01 00 FF 
04e3c     29 14 06 F6 | 	mov	arg02, ##@LR__5221
04e40     0F 13 02 F6 | 	mov	arg01, local01
04e44     24 BA B1 FD | 	call	#__system___string_cmp
04e48     00 FA 0D F2 | 	cmp	result1, #0 wz
04e4c     A4 06 90 AD |  if_e	jmp	#LR__0377
04e50     82 01 00 FF 
04e54     2D 14 06 F6 | 	mov	arg02, ##@LR__5222
04e58     0F 13 02 F6 | 	mov	arg01, local01
04e5c     0C BA B1 FD | 	call	#__system___string_cmp
04e60     00 FA 0D F2 | 	cmp	result1, #0 wz
04e64     94 06 90 AD |  if_e	jmp	#LR__0378
04e68     82 01 00 FF 
04e6c     32 14 06 F6 | 	mov	arg02, ##@LR__5223
04e70     0F 13 02 F6 | 	mov	arg01, local01
04e74     F4 B9 B1 FD | 	call	#__system___string_cmp
04e78     00 FA 0D F2 | 	cmp	result1, #0 wz
04e7c     84 06 90 AD |  if_e	jmp	#LR__0379
04e80     82 01 00 FF 
04e84     36 14 06 F6 | 	mov	arg02, ##@LR__5224
04e88     0F 13 02 F6 | 	mov	arg01, local01
04e8c     DC B9 B1 FD | 	call	#__system___string_cmp
04e90     00 FA 0D F2 | 	cmp	result1, #0 wz
04e94     74 06 90 AD |  if_e	jmp	#LR__0380
04e98     82 01 00 FF 
04e9c     3F 14 06 F6 | 	mov	arg02, ##@LR__5225
04ea0     0F 13 02 F6 | 	mov	arg01, local01
04ea4     C4 B9 B1 FD | 	call	#__system___string_cmp
04ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eac     64 06 90 AD |  if_e	jmp	#LR__0381
04eb0     82 01 00 FF 
04eb4     44 14 06 F6 | 	mov	arg02, ##@LR__5226
04eb8     0F 13 02 F6 | 	mov	arg01, local01
04ebc     AC B9 B1 FD | 	call	#__system___string_cmp
04ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec4     54 06 90 AD |  if_e	jmp	#LR__0382
04ec8     82 01 00 FF 
04ecc     4A 14 06 F6 | 	mov	arg02, ##@LR__5227
04ed0     0F 13 02 F6 | 	mov	arg01, local01
04ed4     94 B9 B1 FD | 	call	#__system___string_cmp
04ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
04edc     44 06 90 AD |  if_e	jmp	#LR__0383
04ee0     82 01 00 FF 
04ee4     4C 14 06 F6 | 	mov	arg02, ##@LR__5228
04ee8     0F 13 02 F6 | 	mov	arg01, local01
04eec     7C B9 B1 FD | 	call	#__system___string_cmp
04ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef4     34 06 90 AD |  if_e	jmp	#LR__0384
04ef8     82 01 00 FF 
04efc     50 14 06 F6 | 	mov	arg02, ##@LR__5229
04f00     0F 13 02 F6 | 	mov	arg01, local01
04f04     64 B9 B1 FD | 	call	#__system___string_cmp
04f08     00 FA 0D F2 | 	cmp	result1, #0 wz
04f0c     24 06 90 AD |  if_e	jmp	#LR__0385
04f10     82 01 00 FF 
04f14     54 14 06 F6 | 	mov	arg02, ##@LR__5230
04f18     0F 13 02 F6 | 	mov	arg01, local01
04f1c     4C B9 B1 FD | 	call	#__system___string_cmp
04f20     00 FA 0D F2 | 	cmp	result1, #0 wz
04f24     14 06 90 AD |  if_e	jmp	#LR__0386
04f28     82 01 00 FF 
04f2c     5C 14 06 F6 | 	mov	arg02, ##@LR__5231
04f30     0F 13 02 F6 | 	mov	arg01, local01
04f34     34 B9 B1 FD | 	call	#__system___string_cmp
04f38     00 FA 0D F2 | 	cmp	result1, #0 wz
04f3c     04 06 90 AD |  if_e	jmp	#LR__0387
04f40     82 01 00 FF 
04f44     60 14 06 F6 | 	mov	arg02, ##@LR__5232
04f48     0F 13 02 F6 | 	mov	arg01, local01
04f4c     1C B9 B1 FD | 	call	#__system___string_cmp
04f50     00 FA 0D F2 | 	cmp	result1, #0 wz
04f54     F4 05 90 AD |  if_e	jmp	#LR__0388
04f58     82 01 00 FF 
04f5c     62 14 06 F6 | 	mov	arg02, ##@LR__5233
04f60     0F 13 02 F6 | 	mov	arg01, local01
04f64     04 B9 B1 FD | 	call	#__system___string_cmp
04f68     00 FA 0D F2 | 	cmp	result1, #0 wz
04f6c     E4 05 90 AD |  if_e	jmp	#LR__0389
04f70     82 01 00 FF 
04f74     69 14 06 F6 | 	mov	arg02, ##@LR__5234
04f78     0F 13 02 F6 | 	mov	arg01, local01
04f7c     EC B8 B1 FD | 	call	#__system___string_cmp
04f80     00 FA 0D F2 | 	cmp	result1, #0 wz
04f84     D4 05 90 AD |  if_e	jmp	#LR__0390
04f88     82 01 00 FF 
04f8c     6D 14 06 F6 | 	mov	arg02, ##@LR__5235
04f90     0F 13 02 F6 | 	mov	arg01, local01
04f94     D4 B8 B1 FD | 	call	#__system___string_cmp
04f98     00 FA 0D F2 | 	cmp	result1, #0 wz
04f9c     C4 05 90 AD |  if_e	jmp	#LR__0391
04fa0     82 01 00 FF 
04fa4     72 14 06 F6 | 	mov	arg02, ##@LR__5236
04fa8     0F 13 02 F6 | 	mov	arg01, local01
04fac     BC B8 B1 FD | 	call	#__system___string_cmp
04fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb4     B4 05 90 AD |  if_e	jmp	#LR__0392
04fb8     82 01 00 FF 
04fbc     75 14 06 F6 | 	mov	arg02, ##@LR__5237
04fc0     0F 13 02 F6 | 	mov	arg01, local01
04fc4     A4 B8 B1 FD | 	call	#__system___string_cmp
04fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fcc     A4 05 90 AD |  if_e	jmp	#LR__0393
04fd0     82 01 00 FF 
04fd4     7E 14 06 F6 | 	mov	arg02, ##@LR__5238
04fd8     0F 13 02 F6 | 	mov	arg01, local01
04fdc     8C B8 B1 FD | 	call	#__system___string_cmp
04fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe4     94 05 90 AD |  if_e	jmp	#LR__0394
04fe8     82 01 00 FF 
04fec     82 14 06 F6 | 	mov	arg02, ##@LR__5239
04ff0     0F 13 02 F6 | 	mov	arg01, local01
04ff4     74 B8 B1 FD | 	call	#__system___string_cmp
04ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ffc     84 05 90 AD |  if_e	jmp	#LR__0395
05000     82 01 00 FF 
05004     89 14 06 F6 | 	mov	arg02, ##@LR__5240
05008     0F 13 02 F6 | 	mov	arg01, local01
0500c     5C B8 B1 FD | 	call	#__system___string_cmp
05010     00 FA 0D F2 | 	cmp	result1, #0 wz
05014     74 05 90 AD |  if_e	jmp	#LR__0396
05018     82 01 00 FF 
0501c     8D 14 06 F6 | 	mov	arg02, ##@LR__5241
05020     0F 13 02 F6 | 	mov	arg01, local01
05024     44 B8 B1 FD | 	call	#__system___string_cmp
05028     00 FA 0D F2 | 	cmp	result1, #0 wz
0502c     64 05 90 AD |  if_e	jmp	#LR__0397
05030     82 01 00 FF 
05034     94 14 06 F6 | 	mov	arg02, ##@LR__5242
05038     0F 13 02 F6 | 	mov	arg01, local01
0503c     2C B8 B1 FD | 	call	#__system___string_cmp
05040     00 FA 0D F2 | 	cmp	result1, #0 wz
05044     54 05 90 AD |  if_e	jmp	#LR__0398
05048     82 01 00 FF 
0504c     98 14 06 F6 | 	mov	arg02, ##@LR__5243
05050     0F 13 02 F6 | 	mov	arg01, local01
05054     14 B8 B1 FD | 	call	#__system___string_cmp
05058     00 FA 0D F2 | 	cmp	result1, #0 wz
0505c     44 05 90 AD |  if_e	jmp	#LR__0399
05060     82 01 00 FF 
05064     9F 14 06 F6 | 	mov	arg02, ##@LR__5244
05068     0F 13 02 F6 | 	mov	arg01, local01
0506c     FC B7 B1 FD | 	call	#__system___string_cmp
05070     00 FA 0D F2 | 	cmp	result1, #0 wz
05074     34 05 90 AD |  if_e	jmp	#LR__0400
05078     82 01 00 FF 
0507c     A2 14 06 F6 | 	mov	arg02, ##@LR__5245
05080     0F 13 02 F6 | 	mov	arg01, local01
05084     E4 B7 B1 FD | 	call	#__system___string_cmp
05088     00 FA 0D F2 | 	cmp	result1, #0 wz
0508c     24 05 90 AD |  if_e	jmp	#LR__0401
05090     82 01 00 FF 
05094     AD 14 06 F6 | 	mov	arg02, ##@LR__5246
05098     0F 13 02 F6 | 	mov	arg01, local01
0509c     CC B7 B1 FD | 	call	#__system___string_cmp
050a0     00 FA 0D F2 | 	cmp	result1, #0 wz
050a4     14 05 90 AD |  if_e	jmp	#LR__0402
050a8     82 01 00 FF 
050ac     B1 14 06 F6 | 	mov	arg02, ##@LR__5247
050b0     0F 13 02 F6 | 	mov	arg01, local01
050b4     B4 B7 B1 FD | 	call	#__system___string_cmp
050b8     00 FA 0D F2 | 	cmp	result1, #0 wz
050bc     04 05 90 AD |  if_e	jmp	#LR__0403
050c0     82 01 00 FF 
050c4     B8 14 06 F6 | 	mov	arg02, ##@LR__5248
050c8     0F 13 02 F6 | 	mov	arg01, local01
050cc     9C B7 B1 FD | 	call	#__system___string_cmp
050d0     00 FA 0D F2 | 	cmp	result1, #0 wz
050d4     F4 04 90 AD |  if_e	jmp	#LR__0404
050d8     82 01 00 FF 
050dc     BC 14 06 F6 | 	mov	arg02, ##@LR__5249
050e0     0F 13 02 F6 | 	mov	arg01, local01
050e4     84 B7 B1 FD | 	call	#__system___string_cmp
050e8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ec     E4 04 90 AD |  if_e	jmp	#LR__0405
050f0     82 01 00 FF 
050f4     C4 14 06 F6 | 	mov	arg02, ##@LR__5250
050f8     0F 13 02 F6 | 	mov	arg01, local01
050fc     6C B7 B1 FD | 	call	#__system___string_cmp
05100     00 FA 0D F2 | 	cmp	result1, #0 wz
05104     D4 04 90 AD |  if_e	jmp	#LR__0406
05108     82 01 00 FF 
0510c     C8 14 06 F6 | 	mov	arg02, ##@LR__5251
05110     0F 13 02 F6 | 	mov	arg01, local01
05114     54 B7 B1 FD | 	call	#__system___string_cmp
05118     00 FA 0D F2 | 	cmp	result1, #0 wz
0511c     C4 04 90 AD |  if_e	jmp	#LR__0407
05120     82 01 00 FF 
05124     CF 14 06 F6 | 	mov	arg02, ##@LR__5252
05128     0F 13 02 F6 | 	mov	arg01, local01
0512c     3C B7 B1 FD | 	call	#__system___string_cmp
05130     00 FA 0D F2 | 	cmp	result1, #0 wz
05134     B4 04 90 AD |  if_e	jmp	#LR__0408
05138     82 01 00 FF 
0513c     D6 14 06 F6 | 	mov	arg02, ##@LR__5253
05140     0F 13 02 F6 | 	mov	arg01, local01
05144     24 B7 B1 FD | 	call	#__system___string_cmp
05148     00 FA 0D F2 | 	cmp	result1, #0 wz
0514c     A4 04 90 AD |  if_e	jmp	#LR__0409
05150     82 01 00 FF 
05154     DA 14 06 F6 | 	mov	arg02, ##@LR__5254
05158     0F 13 02 F6 | 	mov	arg01, local01
0515c     0C B7 B1 FD | 	call	#__system___string_cmp
05160     00 FA 0D F2 | 	cmp	result1, #0 wz
05164     94 04 90 AD |  if_e	jmp	#LR__0410
05168     82 01 00 FF 
0516c     E0 14 06 F6 | 	mov	arg02, ##@LR__5255
05170     0F 13 02 F6 | 	mov	arg01, local01
05174     F4 B6 B1 FD | 	call	#__system___string_cmp
05178     00 FA 0D F2 | 	cmp	result1, #0 wz
0517c     84 04 90 AD |  if_e	jmp	#LR__0411
05180     82 01 00 FF 
05184     E4 14 06 F6 | 	mov	arg02, ##@LR__5256
05188     0F 13 02 F6 | 	mov	arg01, local01
0518c     DC B6 B1 FD | 	call	#__system___string_cmp
05190     00 FA 0D F2 | 	cmp	result1, #0 wz
05194     74 04 90 AD |  if_e	jmp	#LR__0412
05198     82 01 00 FF 
0519c     EB 14 06 F6 | 	mov	arg02, ##@LR__5257
051a0     0F 13 02 F6 | 	mov	arg01, local01
051a4     C4 B6 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     64 04 90 AD |  if_e	jmp	#LR__0413
051b0     82 01 00 FF 
051b4     F0 14 06 F6 | 	mov	arg02, ##@LR__5258
051b8     0F 13 02 F6 | 	mov	arg01, local01
051bc     AC B6 B1 FD | 	call	#__system___string_cmp
051c0     00 FA 0D F2 | 	cmp	result1, #0 wz
051c4     54 04 90 AD |  if_e	jmp	#LR__0414
051c8     82 01 00 FF 
051cc     F5 14 06 F6 | 	mov	arg02, ##@LR__5259
051d0     0F 13 02 F6 | 	mov	arg01, local01
051d4     94 B6 B1 FD | 	call	#__system___string_cmp
051d8     00 FA 0D F2 | 	cmp	result1, #0 wz
051dc     44 04 90 AD |  if_e	jmp	#LR__0415
051e0     82 01 00 FF 
051e4     FC 14 06 F6 | 	mov	arg02, ##@LR__5260
051e8     0F 13 02 F6 | 	mov	arg01, local01
051ec     7C B6 B1 FD | 	call	#__system___string_cmp
051f0     00 FA 0D F2 | 	cmp	result1, #0 wz
051f4     34 04 90 AD |  if_e	jmp	#LR__0416
051f8     82 01 00 FF 
051fc     FF 14 06 F6 | 	mov	arg02, ##@LR__5261
05200     0F 13 02 F6 | 	mov	arg01, local01
05204     64 B6 B1 FD | 	call	#__system___string_cmp
05208     00 FA 0D F2 | 	cmp	result1, #0 wz
0520c     24 04 90 AD |  if_e	jmp	#LR__0417
05210     82 01 00 FF 
05214     09 15 06 F6 | 	mov	arg02, ##@LR__5262
05218     0F 13 02 F6 | 	mov	arg01, local01
0521c     4C B6 B1 FD | 	call	#__system___string_cmp
05220     00 FA 0D F2 | 	cmp	result1, #0 wz
05224     14 04 90 AD |  if_e	jmp	#LR__0418
05228     82 01 00 FF 
0522c     0D 15 06 F6 | 	mov	arg02, ##@LR__5263
05230     0F 13 02 F6 | 	mov	arg01, local01
05234     34 B6 B1 FD | 	call	#__system___string_cmp
05238     00 FA 0D F2 | 	cmp	result1, #0 wz
0523c     04 04 90 AD |  if_e	jmp	#LR__0419
05240     82 01 00 FF 
05244     15 15 06 F6 | 	mov	arg02, ##@LR__5264
05248     0F 13 02 F6 | 	mov	arg01, local01
0524c     1C B6 B1 FD | 	call	#__system___string_cmp
05250     00 FA 0D F2 | 	cmp	result1, #0 wz
05254     F4 03 90 AD |  if_e	jmp	#LR__0420
05258     82 01 00 FF 
0525c     19 15 06 F6 | 	mov	arg02, ##@LR__5265
05260     0F 13 02 F6 | 	mov	arg01, local01
05264     04 B6 B1 FD | 	call	#__system___string_cmp
05268     00 FA 0D F2 | 	cmp	result1, #0 wz
0526c     E4 03 90 AD |  if_e	jmp	#LR__0421
05270     82 01 00 FF 
05274     1F 15 06 F6 | 	mov	arg02, ##@LR__5266
05278     0F 13 02 F6 | 	mov	arg01, local01
0527c     EC B5 B1 FD | 	call	#__system___string_cmp
05280     00 FA 0D F2 | 	cmp	result1, #0 wz
05284     D4 03 90 AD |  if_e	jmp	#LR__0422
05288     D8 03 90 FD | 	jmp	#LR__0423
0528c                 | LR__0300
0528c     5C FA 05 F6 | 	mov	result1, #92
05290     D4 03 90 FD | 	jmp	#LR__0424
05294                 | LR__0301
05294     5C FA 05 F6 | 	mov	result1, #92
05298     CC 03 90 FD | 	jmp	#LR__0424
0529c                 | LR__0302
0529c     47 FA 05 F6 | 	mov	result1, #71
052a0     C4 03 90 FD | 	jmp	#LR__0424
052a4                 | LR__0303
052a4     59 FA 05 F6 | 	mov	result1, #89
052a8     BC 03 90 FD | 	jmp	#LR__0424
052ac                 | LR__0304
052ac     59 FA 05 F6 | 	mov	result1, #89
052b0     B4 03 90 FD | 	jmp	#LR__0424
052b4                 | LR__0305
052b4     C3 FA 05 F6 | 	mov	result1, #195
052b8     AC 03 90 FD | 	jmp	#LR__0424
052bc                 | LR__0306
052bc     AE FA 05 F6 | 	mov	result1, #174
052c0     A4 03 90 FD | 	jmp	#LR__0424
052c4                 | LR__0307
052c4     AE FA 05 F6 | 	mov	result1, #174
052c8     9C 03 90 FD | 	jmp	#LR__0424
052cc                 | LR__0308
052cc     B1 FA 05 F6 | 	mov	result1, #177
052d0     94 03 90 FD | 	jmp	#LR__0424
052d4                 | LR__0309
052d4     B1 FA 05 F6 | 	mov	result1, #177
052d8     8C 03 90 FD | 	jmp	#LR__0424
052dc                 | LR__0310
052dc     AF FA 05 F6 | 	mov	result1, #175
052e0     84 03 90 FD | 	jmp	#LR__0424
052e4                 | LR__0311
052e4     AF FA 05 F6 | 	mov	result1, #175
052e8     7C 03 90 FD | 	jmp	#LR__0424
052ec                 | LR__0312
052ec     B0 FA 05 F6 | 	mov	result1, #176
052f0     74 03 90 FD | 	jmp	#LR__0424
052f4                 | LR__0313
052f4     B0 FA 05 F6 | 	mov	result1, #176
052f8     6C 03 90 FD | 	jmp	#LR__0424
052fc                 | LR__0314
052fc     45 FA 05 F6 | 	mov	result1, #69
05300     64 03 90 FD | 	jmp	#LR__0424
05304                 | LR__0315
05304     45 FA 05 F6 | 	mov	result1, #69
05308     5C 03 90 FD | 	jmp	#LR__0424
0530c                 | LR__0316
0530c     69 FA 05 F6 | 	mov	result1, #105
05310     54 03 90 FD | 	jmp	#LR__0424
05314                 | LR__0317
05314     B4 FA 05 F6 | 	mov	result1, #180
05318     4C 03 90 FD | 	jmp	#LR__0424
0531c                 | LR__0318
0531c     40 FA 05 F6 | 	mov	result1, #64
05320     44 03 90 FD | 	jmp	#LR__0424
05324                 | LR__0319
05324     49 FA 05 F6 | 	mov	result1, #73
05328     3C 03 90 FD | 	jmp	#LR__0424
0532c                 | LR__0320
0532c     49 FA 05 F6 | 	mov	result1, #73
05330     34 03 90 FD | 	jmp	#LR__0424
05334                 | LR__0321
05334     50 FA 05 F6 | 	mov	result1, #80
05338     2C 03 90 FD | 	jmp	#LR__0424
0533c                 | LR__0322
0533c     50 FA 05 F6 | 	mov	result1, #80
05340     24 03 90 FD | 	jmp	#LR__0424
05344                 | LR__0323
05344     68 FA 05 F6 | 	mov	result1, #104
05348     1C 03 90 FD | 	jmp	#LR__0424
0534c                 | LR__0324
0534c     73 FA 05 F6 | 	mov	result1, #115
05350     14 03 90 FD | 	jmp	#LR__0424
05354                 | LR__0325
05354     74 FA 05 F6 | 	mov	result1, #116
05358     0C 03 90 FD | 	jmp	#LR__0424
0535c                 | LR__0326
0535c     6C FA 05 F6 | 	mov	result1, #108
05360     04 03 90 FD | 	jmp	#LR__0424
05364                 | LR__0327
05364     6C FA 05 F6 | 	mov	result1, #108
05368     FC 02 90 FD | 	jmp	#LR__0424
0536c                 | LR__0328
0536c     89 FA 05 F6 | 	mov	result1, #137
05370     F4 02 90 FD | 	jmp	#LR__0424
05374                 | LR__0329
05374     72 FA 05 F6 | 	mov	result1, #114
05378     EC 02 90 FD | 	jmp	#LR__0424
0537c                 | LR__0330
0537c     5D FA 05 F6 | 	mov	result1, #93
05380     E4 02 90 FD | 	jmp	#LR__0424
05384                 | LR__0331
05384     96 FA 05 F6 | 	mov	result1, #150
05388     DC 02 90 FD | 	jmp	#LR__0424
0538c                 | LR__0332
0538c     43 FA 05 F6 | 	mov	result1, #67
05390     D4 02 90 FD | 	jmp	#LR__0424
05394                 | LR__0333
05394     43 FA 05 F6 | 	mov	result1, #67
05398     CC 02 90 FD | 	jmp	#LR__0424
0539c                 | LR__0334
0539c     5A FA 05 F6 | 	mov	result1, #90
053a0     C4 02 90 FD | 	jmp	#LR__0424
053a4                 | LR__0335
053a4     AB FA 05 F6 | 	mov	result1, #171
053a8     BC 02 90 FD | 	jmp	#LR__0424
053ac                 | LR__0336
053ac     BD FA 05 F6 | 	mov	result1, #189
053b0     B4 02 90 FD | 	jmp	#LR__0424
053b4                 | LR__0337
053b4     BD FA 05 F6 | 	mov	result1, #189
053b8     AC 02 90 FD | 	jmp	#LR__0424
053bc                 | LR__0338
053bc     46 FA 05 F6 | 	mov	result1, #70
053c0     A4 02 90 FD | 	jmp	#LR__0424
053c4                 | LR__0339
053c4     46 FA 05 F6 | 	mov	result1, #70
053c8     9C 02 90 FD | 	jmp	#LR__0424
053cc                 | LR__0340
053cc     71 FA 05 F6 | 	mov	result1, #113
053d0     94 02 90 FD | 	jmp	#LR__0424
053d4                 | LR__0341
053d4     71 FA 05 F6 | 	mov	result1, #113
053d8     8C 02 90 FD | 	jmp	#LR__0424
053dc                 | LR__0342
053dc     60 FA 05 F6 | 	mov	result1, #96
053e0     84 02 90 FD | 	jmp	#LR__0424
053e4                 | LR__0343
053e4     4A FA 05 F6 | 	mov	result1, #74
053e8     7C 02 90 FD | 	jmp	#LR__0424
053ec                 | LR__0344
053ec     4A FA 05 F6 | 	mov	result1, #74
053f0     74 02 90 FD | 	jmp	#LR__0424
053f4                 | LR__0345
053f4     48 FA 05 F6 | 	mov	result1, #72
053f8     6C 02 90 FD | 	jmp	#LR__0424
053fc                 | LR__0346
053fc     48 FA 05 F6 | 	mov	result1, #72
05400     64 02 90 FD | 	jmp	#LR__0424
05404                 | LR__0347
05404     BB FA 05 F6 | 	mov	result1, #187
05408     5C 02 90 FD | 	jmp	#LR__0424
0540c                 | LR__0348
0540c     A9 FA 05 F6 | 	mov	result1, #169
05410     54 02 90 FD | 	jmp	#LR__0424
05414                 | LR__0349
05414     4E FA 05 F6 | 	mov	result1, #78
05418     4C 02 90 FD | 	jmp	#LR__0424
0541c                 | LR__0350
0541c     4E FA 05 F6 | 	mov	result1, #78
05420     44 02 90 FD | 	jmp	#LR__0424
05424                 | LR__0351
05424     58 FA 05 F6 | 	mov	result1, #88
05428     3C 02 90 FD | 	jmp	#LR__0424
0542c                 | LR__0352
0542c     5F FA 05 F6 | 	mov	result1, #95
05430     34 02 90 FD | 	jmp	#LR__0424
05434                 | LR__0353
05434     5F FA 05 F6 | 	mov	result1, #95
05438     2C 02 90 FD | 	jmp	#LR__0424
0543c                 | LR__0354
0543c     4C FA 05 F6 | 	mov	result1, #76
05440     24 02 90 FD | 	jmp	#LR__0424
05444                 | LR__0355
05444     4C FA 05 F6 | 	mov	result1, #76
05448     1C 02 90 FD | 	jmp	#LR__0424
0544c                 | LR__0356
0544c     52 FA 05 F6 | 	mov	result1, #82
05450     14 02 90 FD | 	jmp	#LR__0424
05454                 | LR__0357
05454     52 FA 05 F6 | 	mov	result1, #82
05458     0C 02 90 FD | 	jmp	#LR__0424
0545c                 | LR__0358
0545c     97 FA 05 F6 | 	mov	result1, #151
05460     04 02 90 FD | 	jmp	#LR__0424
05464                 | LR__0359
05464     61 FA 05 F6 | 	mov	result1, #97
05468     FC 01 90 FD | 	jmp	#LR__0424
0546c                 | LR__0360
0546c     61 FA 05 F6 | 	mov	result1, #97
05470     F4 01 90 FD | 	jmp	#LR__0424
05474                 | LR__0361
05474     63 FA 05 F6 | 	mov	result1, #99
05478     EC 01 90 FD | 	jmp	#LR__0424
0547c                 | LR__0362
0547c     41 FA 05 F6 | 	mov	result1, #65
05480     E4 01 90 FD | 	jmp	#LR__0424
05484                 | LR__0363
05484     4B FA 05 F6 | 	mov	result1, #75
05488     DC 01 90 FD | 	jmp	#LR__0424
0548c                 | LR__0364
0548c     4B FA 05 F6 | 	mov	result1, #75
05490     D4 01 90 FD | 	jmp	#LR__0424
05494                 | LR__0365
05494     B3 FA 05 F6 | 	mov	result1, #179
05498     CC 01 90 FD | 	jmp	#LR__0424
0549c                 | LR__0366
0549c     5E FA 05 F6 | 	mov	result1, #94
054a0     C4 01 90 FD | 	jmp	#LR__0424
054a4                 | LR__0367
054a4     5E FA 05 F6 | 	mov	result1, #94
054a8     BC 01 90 FD | 	jmp	#LR__0424
054ac                 | LR__0368
054ac     7C FA 05 F6 | 	mov	result1, #124
054b0     B4 01 90 FD | 	jmp	#LR__0424
054b4                 | LR__0369
054b4     7E FA 05 F6 | 	mov	result1, #126
054b8     AC 01 90 FD | 	jmp	#LR__0424
054bc                 | LR__0370
054bc     7D FA 05 F6 | 	mov	result1, #125
054c0     A4 01 90 FD | 	jmp	#LR__0424
054c4                 | LR__0371
054c4     7F FA 05 F6 | 	mov	result1, #127
054c8     9C 01 90 FD | 	jmp	#LR__0424
054cc                 | LR__0372
054cc     80 FA 05 F6 | 	mov	result1, #128
054d0     94 01 90 FD | 	jmp	#LR__0424
054d4                 | LR__0373
054d4     55 FA 05 F6 | 	mov	result1, #85
054d8     8C 01 90 FD | 	jmp	#LR__0424
054dc                 | LR__0374
054dc     75 FA 05 F6 | 	mov	result1, #117
054e0     84 01 90 FD | 	jmp	#LR__0424
054e4                 | LR__0375
054e4     75 FA 05 F6 | 	mov	result1, #117
054e8     7C 01 90 FD | 	jmp	#LR__0424
054ec                 | LR__0376
054ec     42 FA 05 F6 | 	mov	result1, #66
054f0     74 01 90 FD | 	jmp	#LR__0424
054f4                 | LR__0377
054f4     42 FA 05 F6 | 	mov	result1, #66
054f8     6C 01 90 FD | 	jmp	#LR__0424
054fc                 | LR__0378
054fc     95 FA 05 F6 | 	mov	result1, #149
05500     64 01 90 FD | 	jmp	#LR__0424
05504                 | LR__0379
05504     AC FA 05 F6 | 	mov	result1, #172
05508     5C 01 90 FD | 	jmp	#LR__0424
0550c                 | LR__0380
0550c     81 FA 05 F6 | 	mov	result1, #129
05510     54 01 90 FD | 	jmp	#LR__0424
05514                 | LR__0381
05514     81 FA 05 F6 | 	mov	result1, #129
05518     4C 01 90 FD | 	jmp	#LR__0424
0551c                 | LR__0382
0551c     44 FA 05 F6 | 	mov	result1, #68
05520     44 01 90 FD | 	jmp	#LR__0424
05524                 | LR__0383
05524     44 FA 05 F6 | 	mov	result1, #68
05528     3C 01 90 FD | 	jmp	#LR__0424
0552c                 | LR__0384
0552c     BC FA 05 F6 | 	mov	result1, #188
05530     34 01 90 FD | 	jmp	#LR__0424
05534                 | LR__0385
05534     88 FA 05 F6 | 	mov	result1, #136
05538     2C 01 90 FD | 	jmp	#LR__0424
0553c                 | LR__0386
0553c     92 FA 05 F6 | 	mov	result1, #146
05540     24 01 90 FD | 	jmp	#LR__0424
05544                 | LR__0387
05544     BE FA 05 F6 | 	mov	result1, #190
05548     1C 01 90 FD | 	jmp	#LR__0424
0554c                 | LR__0388
0554c     BE FA 05 F6 | 	mov	result1, #190
05550     14 01 90 FD | 	jmp	#LR__0424
05554                 | LR__0389
05554     AA FA 05 F6 | 	mov	result1, #170
05558     0C 01 90 FD | 	jmp	#LR__0424
0555c                 | LR__0390
0555c     4D FA 05 F6 | 	mov	result1, #77
05560     04 01 90 FD | 	jmp	#LR__0424
05564                 | LR__0391
05564     51 FA 05 F6 | 	mov	result1, #81
05568     FC 00 90 FD | 	jmp	#LR__0424
0556c                 | LR__0392
0556c     51 FA 05 F6 | 	mov	result1, #81
05570     F4 00 90 FD | 	jmp	#LR__0424
05574                 | LR__0393
05574     8E FA 05 F6 | 	mov	result1, #142
05578     EC 00 90 FD | 	jmp	#LR__0424
0557c                 | LR__0394
0557c     8E FA 05 F6 | 	mov	result1, #142
05580     E4 00 90 FD | 	jmp	#LR__0424
05584                 | LR__0395
05584     90 FA 05 F6 | 	mov	result1, #144
05588     DC 00 90 FD | 	jmp	#LR__0424
0558c                 | LR__0396
0558c     90 FA 05 F6 | 	mov	result1, #144
05590     D4 00 90 FD | 	jmp	#LR__0424
05594                 | LR__0397
05594     8D FA 05 F6 | 	mov	result1, #141
05598     CC 00 90 FD | 	jmp	#LR__0424
0559c                 | LR__0398
0559c     8D FA 05 F6 | 	mov	result1, #141
055a0     C4 00 90 FD | 	jmp	#LR__0424
055a4                 | LR__0399
055a4     8C FA 05 F6 | 	mov	result1, #140
055a8     BC 00 90 FD | 	jmp	#LR__0424
055ac                 | LR__0400
055ac     8C FA 05 F6 | 	mov	result1, #140
055b0     B4 00 90 FD | 	jmp	#LR__0424
055b4                 | LR__0401
055b4     91 FA 05 F6 | 	mov	result1, #145
055b8     AC 00 90 FD | 	jmp	#LR__0424
055bc                 | LR__0402
055bc     91 FA 05 F6 | 	mov	result1, #145
055c0     A4 00 90 FD | 	jmp	#LR__0424
055c4                 | LR__0403
055c4     8B FA 05 F6 | 	mov	result1, #139
055c8     9C 00 90 FD | 	jmp	#LR__0424
055cc                 | LR__0404
055cc     8B FA 05 F6 | 	mov	result1, #139
055d0     94 00 90 FD | 	jmp	#LR__0424
055d4                 | LR__0405
055d4     8F FA 05 F6 | 	mov	result1, #143
055d8     8C 00 90 FD | 	jmp	#LR__0424
055dc                 | LR__0406
055dc     8F FA 05 F6 | 	mov	result1, #143
055e0     84 00 90 FD | 	jmp	#LR__0424
055e4                 | LR__0407
055e4     8F FA 05 F6 | 	mov	result1, #143
055e8     7C 00 90 FD | 	jmp	#LR__0424
055ec                 | LR__0408
055ec     B2 FA 05 F6 | 	mov	result1, #178
055f0     74 00 90 FD | 	jmp	#LR__0424
055f4                 | LR__0409
055f4     B2 FA 05 F6 | 	mov	result1, #178
055f8     6C 00 90 FD | 	jmp	#LR__0424
055fc                 | LR__0410
055fc     75 FA 05 F6 | 	mov	result1, #117
05600     64 00 90 FD | 	jmp	#LR__0424
05604                 | LR__0411
05604     75 FA 05 F6 | 	mov	result1, #117
05608     5C 00 90 FD | 	jmp	#LR__0424
0560c                 | LR__0412
0560c     6D FA 05 F6 | 	mov	result1, #109
05610     54 00 90 FD | 	jmp	#LR__0424
05614                 | LR__0413
05614     6D FA 05 F6 | 	mov	result1, #109
05618     4C 00 90 FD | 	jmp	#LR__0424
0561c                 | LR__0414
0561c     5B FA 05 F6 | 	mov	result1, #91
05620     44 00 90 FD | 	jmp	#LR__0424
05624                 | LR__0415
05624     56 FA 05 F6 | 	mov	result1, #86
05628     3C 00 90 FD | 	jmp	#LR__0424
0562c                 | LR__0416
0562c     56 FA 05 F6 | 	mov	result1, #86
05630     34 00 90 FD | 	jmp	#LR__0424
05634                 | LR__0417
05634     70 FA 05 F6 | 	mov	result1, #112
05638     2C 00 90 FD | 	jmp	#LR__0424
0563c                 | LR__0418
0563c     70 FA 05 F6 | 	mov	result1, #112
05640     24 00 90 FD | 	jmp	#LR__0424
05644                 | LR__0419
05644     57 FA 05 F6 | 	mov	result1, #87
05648     1C 00 90 FD | 	jmp	#LR__0424
0564c                 | LR__0420
0564c     57 FA 05 F6 | 	mov	result1, #87
05650     14 00 90 FD | 	jmp	#LR__0424
05654                 | LR__0421
05654     77 FA 05 F6 | 	mov	result1, #119
05658     0C 00 90 FD | 	jmp	#LR__0424
0565c                 | LR__0422
0565c     78 FA 05 F6 | 	mov	result1, #120
05660     04 00 90 FD | 	jmp	#LR__0424
05664                 | LR__0423
05664     00 FA 05 F6 | 	mov	result1, #0
05668                 | LR__0424
05668     A7 F0 03 F6 | 	mov	ptra, fp
0566c     B2 00 A0 FD | 	call	#popregs_
05670                 | _iscommand_ret
05670     2D 00 64 FD | 	ret
05674                 | 
05674                 | ' 
05674                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05674                 | ' 
05674                 | ' function isfunction(s as string) as ubyte
05674                 | _isfunction
05674     01 4A 05 F6 | 	mov	COUNT_, #1
05678     A8 00 A0 FD | 	call	#pushregs_
0567c                 | ' 
0567c                 | ' select case s
0567c     09 1F 02 F6 | 	mov	local01, arg01
05680     82 01 00 FF 
05684     25 15 06 F6 | 	mov	arg02, ##@LR__5267
05688     0F 13 02 F6 | 	mov	arg01, local01
0568c     DC B1 B1 FD | 	call	#__system___string_cmp
05690     00 FA 0D F2 | 	cmp	result1, #0 wz
05694     0C 04 90 AD |  if_e	jmp	#LR__0430
05698     82 01 00 FF 
0569c     29 15 06 F6 | 	mov	arg02, ##@LR__5268
056a0     0F 13 02 F6 | 	mov	arg01, local01
056a4     C4 B1 B1 FD | 	call	#__system___string_cmp
056a8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ac     FC 03 90 AD |  if_e	jmp	#LR__0431
056b0     82 01 00 FF 
056b4     2E 15 06 F6 | 	mov	arg02, ##@LR__5269
056b8     0F 13 02 F6 | 	mov	arg01, local01
056bc     AC B1 B1 FD | 	call	#__system___string_cmp
056c0     00 FA 0D F2 | 	cmp	result1, #0 wz
056c4     EC 03 90 AD |  if_e	jmp	#LR__0432
056c8     82 01 00 FF 
056cc     32 15 06 F6 | 	mov	arg02, ##@LR__5270
056d0     0F 13 02 F6 | 	mov	arg01, local01
056d4     94 B1 B1 FD | 	call	#__system___string_cmp
056d8     00 FA 0D F2 | 	cmp	result1, #0 wz
056dc     DC 03 90 AD |  if_e	jmp	#LR__0433
056e0     82 01 00 FF 
056e4     37 15 06 F6 | 	mov	arg02, ##@LR__5271
056e8     0F 13 02 F6 | 	mov	arg01, local01
056ec     7C B1 B1 FD | 	call	#__system___string_cmp
056f0     00 FA 0D F2 | 	cmp	result1, #0 wz
056f4     CC 03 90 AD |  if_e	jmp	#LR__0434
056f8     82 01 00 FF 
056fc     3B 15 06 F6 | 	mov	arg02, ##@LR__5272
05700     0F 13 02 F6 | 	mov	arg01, local01
05704     64 B1 B1 FD | 	call	#__system___string_cmp
05708     00 FA 0D F2 | 	cmp	result1, #0 wz
0570c     BC 03 90 AD |  if_e	jmp	#LR__0435
05710     82 01 00 FF 
05714     40 15 06 F6 | 	mov	arg02, ##@LR__5273
05718     0F 13 02 F6 | 	mov	arg01, local01
0571c     4C B1 B1 FD | 	call	#__system___string_cmp
05720     00 FA 0D F2 | 	cmp	result1, #0 wz
05724     AC 03 90 AD |  if_e	jmp	#LR__0436
05728     82 01 00 FF 
0572c     44 15 06 F6 | 	mov	arg02, ##@LR__5274
05730     0F 13 02 F6 | 	mov	arg01, local01
05734     34 B1 B1 FD | 	call	#__system___string_cmp
05738     00 FA 0D F2 | 	cmp	result1, #0 wz
0573c     9C 03 90 AD |  if_e	jmp	#LR__0437
05740     82 01 00 FF 
05744     49 15 06 F6 | 	mov	arg02, ##@LR__5275
05748     0F 13 02 F6 | 	mov	arg01, local01
0574c     1C B1 B1 FD | 	call	#__system___string_cmp
05750     00 FA 0D F2 | 	cmp	result1, #0 wz
05754     8C 03 90 AD |  if_e	jmp	#LR__0438
05758     82 01 00 FF 
0575c     4E 15 06 F6 | 	mov	arg02, ##@LR__5276
05760     0F 13 02 F6 | 	mov	arg01, local01
05764     04 B1 B1 FD | 	call	#__system___string_cmp
05768     00 FA 0D F2 | 	cmp	result1, #0 wz
0576c     7C 03 90 AD |  if_e	jmp	#LR__0439
05770     82 01 00 FF 
05774     52 15 06 F6 | 	mov	arg02, ##@LR__5277
05778     0F 13 02 F6 | 	mov	arg01, local01
0577c     EC B0 B1 FD | 	call	#__system___string_cmp
05780     00 FA 0D F2 | 	cmp	result1, #0 wz
05784     6C 03 90 AD |  if_e	jmp	#LR__0440
05788     82 01 00 FF 
0578c     58 15 06 F6 | 	mov	arg02, ##@LR__5278
05790     0F 13 02 F6 | 	mov	arg01, local01
05794     D4 B0 B1 FD | 	call	#__system___string_cmp
05798     00 FA 0D F2 | 	cmp	result1, #0 wz
0579c     5C 03 90 AD |  if_e	jmp	#LR__0441
057a0     82 01 00 FF 
057a4     5C 15 06 F6 | 	mov	arg02, ##@LR__5279
057a8     0F 13 02 F6 | 	mov	arg01, local01
057ac     BC B0 B1 FD | 	call	#__system___string_cmp
057b0     00 FA 0D F2 | 	cmp	result1, #0 wz
057b4     4C 03 90 AD |  if_e	jmp	#LR__0442
057b8     82 01 00 FF 
057bc     65 15 06 F6 | 	mov	arg02, ##@LR__5280
057c0     0F 13 02 F6 | 	mov	arg01, local01
057c4     A4 B0 B1 FD | 	call	#__system___string_cmp
057c8     00 FA 0D F2 | 	cmp	result1, #0 wz
057cc     3C 03 90 AD |  if_e	jmp	#LR__0443
057d0     82 01 00 FF 
057d4     69 15 06 F6 | 	mov	arg02, ##@LR__5281
057d8     0F 13 02 F6 | 	mov	arg01, local01
057dc     8C B0 B1 FD | 	call	#__system___string_cmp
057e0     00 FA 0D F2 | 	cmp	result1, #0 wz
057e4     2C 03 90 AD |  if_e	jmp	#LR__0444
057e8     82 01 00 FF 
057ec     77 15 06 F6 | 	mov	arg02, ##@LR__5282
057f0     0F 13 02 F6 | 	mov	arg01, local01
057f4     74 B0 B1 FD | 	call	#__system___string_cmp
057f8     00 FA 0D F2 | 	cmp	result1, #0 wz
057fc     1C 03 90 AD |  if_e	jmp	#LR__0445
05800     82 01 00 FF 
05804     84 15 06 F6 | 	mov	arg02, ##@LR__5283
05808     0F 13 02 F6 | 	mov	arg01, local01
0580c     5C B0 B1 FD | 	call	#__system___string_cmp
05810     00 FA 0D F2 | 	cmp	result1, #0 wz
05814     0C 03 90 AD |  if_e	jmp	#LR__0446
05818     82 01 00 FF 
0581c     8C 15 06 F6 | 	mov	arg02, ##@LR__5284
05820     0F 13 02 F6 | 	mov	arg01, local01
05824     44 B0 B1 FD | 	call	#__system___string_cmp
05828     00 FA 0D F2 | 	cmp	result1, #0 wz
0582c     FC 02 90 AD |  if_e	jmp	#LR__0447
05830     82 01 00 FF 
05834     91 15 06 F6 | 	mov	arg02, ##@LR__5285
05838     0F 13 02 F6 | 	mov	arg01, local01
0583c     2C B0 B1 FD | 	call	#__system___string_cmp
05840     00 FA 0D F2 | 	cmp	result1, #0 wz
05844     EC 02 90 AD |  if_e	jmp	#LR__0448
05848     82 01 00 FF 
0584c     98 15 06 F6 | 	mov	arg02, ##@LR__5286
05850     0F 13 02 F6 | 	mov	arg01, local01
05854     14 B0 B1 FD | 	call	#__system___string_cmp
05858     00 FA 0D F2 | 	cmp	result1, #0 wz
0585c     DC 02 90 AD |  if_e	jmp	#LR__0449
05860     82 01 00 FF 
05864     9C 15 06 F6 | 	mov	arg02, ##@LR__5287
05868     0F 13 02 F6 | 	mov	arg01, local01
0586c     FC AF B1 FD | 	call	#__system___string_cmp
05870     00 FA 0D F2 | 	cmp	result1, #0 wz
05874     CC 02 90 AD |  if_e	jmp	#LR__0450
05878     82 01 00 FF 
0587c     A2 15 06 F6 | 	mov	arg02, ##@LR__5288
05880     0F 13 02 F6 | 	mov	arg01, local01
05884     E4 AF B1 FD | 	call	#__system___string_cmp
05888     00 FA 0D F2 | 	cmp	result1, #0 wz
0588c     BC 02 90 AD |  if_e	jmp	#LR__0451
05890     82 01 00 FF 
05894     A6 15 06 F6 | 	mov	arg02, ##@LR__5289
05898     0F 13 02 F6 | 	mov	arg01, local01
0589c     CC AF B1 FD | 	call	#__system___string_cmp
058a0     00 FA 0D F2 | 	cmp	result1, #0 wz
058a4     AC 02 90 AD |  if_e	jmp	#LR__0452
058a8     82 01 00 FF 
058ac     AA 15 06 F6 | 	mov	arg02, ##@LR__5290
058b0     0F 13 02 F6 | 	mov	arg01, local01
058b4     B4 AF B1 FD | 	call	#__system___string_cmp
058b8     00 FA 0D F2 | 	cmp	result1, #0 wz
058bc     9C 02 90 AD |  if_e	jmp	#LR__0453
058c0     82 01 00 FF 
058c4     B0 15 06 F6 | 	mov	arg02, ##@LR__5291
058c8     0F 13 02 F6 | 	mov	arg01, local01
058cc     9C AF B1 FD | 	call	#__system___string_cmp
058d0     00 FA 0D F2 | 	cmp	result1, #0 wz
058d4     8C 02 90 AD |  if_e	jmp	#LR__0454
058d8     82 01 00 FF 
058dc     B5 15 06 F6 | 	mov	arg02, ##@LR__5292
058e0     0F 13 02 F6 | 	mov	arg01, local01
058e4     84 AF B1 FD | 	call	#__system___string_cmp
058e8     00 FA 0D F2 | 	cmp	result1, #0 wz
058ec     7C 02 90 AD |  if_e	jmp	#LR__0455
058f0     82 01 00 FF 
058f4     BC 15 06 F6 | 	mov	arg02, ##@LR__5293
058f8     0F 13 02 F6 | 	mov	arg01, local01
058fc     6C AF B1 FD | 	call	#__system___string_cmp
05900     00 FA 0D F2 | 	cmp	result1, #0 wz
05904     6C 02 90 AD |  if_e	jmp	#LR__0456
05908     82 01 00 FF 
0590c     C3 15 06 F6 | 	mov	arg02, ##@LR__5294
05910     0F 13 02 F6 | 	mov	arg01, local01
05914     54 AF B1 FD | 	call	#__system___string_cmp
05918     00 FA 0D F2 | 	cmp	result1, #0 wz
0591c     5C 02 90 AD |  if_e	jmp	#LR__0457
05920     82 01 00 FF 
05924     CA 15 06 F6 | 	mov	arg02, ##@LR__5295
05928     0F 13 02 F6 | 	mov	arg01, local01
0592c     3C AF B1 FD | 	call	#__system___string_cmp
05930     00 FA 0D F2 | 	cmp	result1, #0 wz
05934     4C 02 90 AD |  if_e	jmp	#LR__0458
05938     82 01 00 FF 
0593c     D1 15 06 F6 | 	mov	arg02, ##@LR__5296
05940     0F 13 02 F6 | 	mov	arg01, local01
05944     24 AF B1 FD | 	call	#__system___string_cmp
05948     00 FA 0D F2 | 	cmp	result1, #0 wz
0594c     3C 02 90 AD |  if_e	jmp	#LR__0459
05950     82 01 00 FF 
05954     D6 15 06 F6 | 	mov	arg02, ##@LR__5297
05958     0F 13 02 F6 | 	mov	arg01, local01
0595c     0C AF B1 FD | 	call	#__system___string_cmp
05960     00 FA 0D F2 | 	cmp	result1, #0 wz
05964     2C 02 90 AD |  if_e	jmp	#LR__0460
05968     82 01 00 FF 
0596c     DE 15 06 F6 | 	mov	arg02, ##@LR__5298
05970     0F 13 02 F6 | 	mov	arg01, local01
05974     F4 AE B1 FD | 	call	#__system___string_cmp
05978     00 FA 0D F2 | 	cmp	result1, #0 wz
0597c     1C 02 90 AD |  if_e	jmp	#LR__0461
05980     82 01 00 FF 
05984     E4 15 06 F6 | 	mov	arg02, ##@LR__5299
05988     0F 13 02 F6 | 	mov	arg01, local01
0598c     DC AE B1 FD | 	call	#__system___string_cmp
05990     00 FA 0D F2 | 	cmp	result1, #0 wz
05994     0C 02 90 AD |  if_e	jmp	#LR__0462
05998     82 01 00 FF 
0599c     EB 15 06 F6 | 	mov	arg02, ##@LR__5300
059a0     0F 13 02 F6 | 	mov	arg01, local01
059a4     C4 AE B1 FD | 	call	#__system___string_cmp
059a8     00 FA 0D F2 | 	cmp	result1, #0 wz
059ac     FC 01 90 AD |  if_e	jmp	#LR__0463
059b0     82 01 00 FF 
059b4     F1 15 06 F6 | 	mov	arg02, ##@LR__5301
059b8     0F 13 02 F6 | 	mov	arg01, local01
059bc     AC AE B1 FD | 	call	#__system___string_cmp
059c0     00 FA 0D F2 | 	cmp	result1, #0 wz
059c4     EC 01 90 AD |  if_e	jmp	#LR__0464
059c8     82 01 00 FF 
059cc     F7 15 06 F6 | 	mov	arg02, ##@LR__5302
059d0     0F 13 02 F6 | 	mov	arg01, local01
059d4     94 AE B1 FD | 	call	#__system___string_cmp
059d8     00 FA 0D F2 | 	cmp	result1, #0 wz
059dc     DC 01 90 AD |  if_e	jmp	#LR__0465
059e0     82 01 00 FF 
059e4     FB 15 06 F6 | 	mov	arg02, ##@LR__5303
059e8     0F 13 02 F6 | 	mov	arg01, local01
059ec     7C AE B1 FD | 	call	#__system___string_cmp
059f0     00 FA 0D F2 | 	cmp	result1, #0 wz
059f4     CC 01 90 AD |  if_e	jmp	#LR__0466
059f8     82 01 00 FF 
059fc     FF 15 06 F6 | 	mov	arg02, ##@LR__5304
05a00     0F 13 02 F6 | 	mov	arg01, local01
05a04     64 AE B1 FD | 	call	#__system___string_cmp
05a08     00 FA 0D F2 | 	cmp	result1, #0 wz
05a0c     BC 01 90 AD |  if_e	jmp	#LR__0467
05a10     83 01 00 FF 
05a14     03 14 06 F6 | 	mov	arg02, ##@LR__5305
05a18     0F 13 02 F6 | 	mov	arg01, local01
05a1c     4C AE B1 FD | 	call	#__system___string_cmp
05a20     00 FA 0D F2 | 	cmp	result1, #0 wz
05a24     AC 01 90 AD |  if_e	jmp	#LR__0468
05a28     83 01 00 FF 
05a2c     09 14 06 F6 | 	mov	arg02, ##@LR__5306
05a30     0F 13 02 F6 | 	mov	arg01, local01
05a34     34 AE B1 FD | 	call	#__system___string_cmp
05a38     00 FA 0D F2 | 	cmp	result1, #0 wz
05a3c     9C 01 90 AD |  if_e	jmp	#LR__0469
05a40     83 01 00 FF 
05a44     0F 14 06 F6 | 	mov	arg02, ##@LR__5307
05a48     0F 13 02 F6 | 	mov	arg01, local01
05a4c     1C AE B1 FD | 	call	#__system___string_cmp
05a50     00 FA 0D F2 | 	cmp	result1, #0 wz
05a54     8C 01 90 AD |  if_e	jmp	#LR__0470
05a58     83 01 00 FF 
05a5c     14 14 06 F6 | 	mov	arg02, ##@LR__5308
05a60     0F 13 02 F6 | 	mov	arg01, local01
05a64     04 AE B1 FD | 	call	#__system___string_cmp
05a68     00 FA 0D F2 | 	cmp	result1, #0 wz
05a6c     7C 01 90 AD |  if_e	jmp	#LR__0471
05a70     83 01 00 FF 
05a74     18 14 06 F6 | 	mov	arg02, ##@LR__5309
05a78     0F 13 02 F6 | 	mov	arg01, local01
05a7c     EC AD B1 FD | 	call	#__system___string_cmp
05a80     00 FA 0D F2 | 	cmp	result1, #0 wz
05a84     6C 01 90 AD |  if_e	jmp	#LR__0472
05a88     83 01 00 FF 
05a8c     1C 14 06 F6 | 	mov	arg02, ##@LR__5310
05a90     0F 13 02 F6 | 	mov	arg01, local01
05a94     D4 AD B1 FD | 	call	#__system___string_cmp
05a98     00 FA 0D F2 | 	cmp	result1, #0 wz
05a9c     5C 01 90 AD |  if_e	jmp	#LR__0473
05aa0     60 01 90 FD | 	jmp	#LR__0474
05aa4                 | LR__0430
05aa4     9E FA 05 F6 | 	mov	result1, #158
05aa8     5C 01 90 FD | 	jmp	#LR__0475
05aac                 | LR__0431
05aac     85 FA 05 F6 | 	mov	result1, #133
05ab0     54 01 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0432
05ab4     9B FA 05 F6 | 	mov	result1, #155
05ab8     4C 01 90 FD | 	jmp	#LR__0475
05abc                 | LR__0433
05abc     9B FA 05 F6 | 	mov	result1, #155
05ac0     44 01 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0434
05ac4     A7 FA 05 F6 | 	mov	result1, #167
05ac8     3C 01 90 FD | 	jmp	#LR__0475
05acc                 | LR__0435
05acc     84 FA 05 F6 | 	mov	result1, #132
05ad0     34 01 90 FD | 	jmp	#LR__0475
05ad4                 | LR__0436
05ad4     86 FA 05 F6 | 	mov	result1, #134
05ad8     2C 01 90 FD | 	jmp	#LR__0475
05adc                 | LR__0437
05adc     A2 FA 05 F6 | 	mov	result1, #162
05ae0     24 01 90 FD | 	jmp	#LR__0475
05ae4                 | LR__0438
05ae4     9F FA 05 F6 | 	mov	result1, #159
05ae8     1C 01 90 FD | 	jmp	#LR__0475
05aec                 | LR__0439
05aec     82 FA 05 F6 | 	mov	result1, #130
05af0     14 01 90 FD | 	jmp	#LR__0475
05af4                 | LR__0440
05af4     99 FA 05 F6 | 	mov	result1, #153
05af8     0C 01 90 FD | 	jmp	#LR__0475
05afc                 | LR__0441
05afc     9C FA 05 F6 | 	mov	result1, #156
05b00     04 01 90 FD | 	jmp	#LR__0475
05b04                 | LR__0442
05b04     6F FA 05 F6 | 	mov	result1, #111
05b08     FC 00 90 FD | 	jmp	#LR__0475
05b0c                 | LR__0443
05b0c     6F FA 05 F6 | 	mov	result1, #111
05b10     F4 00 90 FD | 	jmp	#LR__0475
05b14                 | LR__0444
05b14     93 FA 05 F6 | 	mov	result1, #147
05b18     EC 00 90 FD | 	jmp	#LR__0475
05b1c                 | LR__0445
05b1c     94 FA 05 F6 | 	mov	result1, #148
05b20     E4 00 90 FD | 	jmp	#LR__0475
05b24                 | LR__0446
05b24     62 FA 05 F6 | 	mov	result1, #98
05b28     DC 00 90 FD | 	jmp	#LR__0475
05b2c                 | LR__0447
05b2c     A3 FA 05 F6 | 	mov	result1, #163
05b30     D4 00 90 FD | 	jmp	#LR__0475
05b34                 | LR__0448
05b34     9D FA 05 F6 | 	mov	result1, #157
05b38     CC 00 90 FD | 	jmp	#LR__0475
05b3c                 | LR__0449
05b3c     8A FA 05 F6 | 	mov	result1, #138
05b40     C4 00 90 FD | 	jmp	#LR__0475
05b44                 | LR__0450
05b44     A4 FA 05 F6 | 	mov	result1, #164
05b48     BC 00 90 FD | 	jmp	#LR__0475
05b4c                 | LR__0451
05b4c     A8 FA 05 F6 | 	mov	result1, #168
05b50     B4 00 90 FD | 	jmp	#LR__0475
05b54                 | LR__0452
05b54     AD FA 05 F6 | 	mov	result1, #173
05b58     AC 00 90 FD | 	jmp	#LR__0475
05b5c                 | LR__0453
05b5c     9A FA 05 F6 | 	mov	result1, #154
05b60     A4 00 90 FD | 	jmp	#LR__0475
05b64                 | LR__0454
05b64     A6 FA 05 F6 | 	mov	result1, #166
05b68     9C 00 90 FD | 	jmp	#LR__0475
05b6c                 | LR__0455
05b6c     66 FA 05 F6 | 	mov	result1, #102
05b70     94 00 90 FD | 	jmp	#LR__0475
05b74                 | LR__0456
05b74     67 FA 05 F6 | 	mov	result1, #103
05b78     8C 00 90 FD | 	jmp	#LR__0475
05b7c                 | LR__0457
05b7c     64 FA 05 F6 | 	mov	result1, #100
05b80     84 00 90 FD | 	jmp	#LR__0475
05b84                 | LR__0458
05b84     65 FA 05 F6 | 	mov	result1, #101
05b88     7C 00 90 FD | 	jmp	#LR__0475
05b8c                 | LR__0459
05b8c     98 FA 05 F6 | 	mov	result1, #152
05b90     74 00 90 FD | 	jmp	#LR__0475
05b94                 | LR__0460
05b94     7B FA 05 F6 | 	mov	result1, #123
05b98     6C 00 90 FD | 	jmp	#LR__0475
05b9c                 | LR__0461
05b9c     76 FA 05 F6 | 	mov	result1, #118
05ba0     64 00 90 FD | 	jmp	#LR__0475
05ba4                 | LR__0462
05ba4     A5 FA 05 F6 | 	mov	result1, #165
05ba8     5C 00 90 FD | 	jmp	#LR__0475
05bac                 | LR__0463
05bac     7A FA 05 F6 | 	mov	result1, #122
05bb0     54 00 90 FD | 	jmp	#LR__0475
05bb4                 | LR__0464
05bb4     BF FA 05 F6 | 	mov	result1, #191
05bb8     4C 00 90 FD | 	jmp	#LR__0475
05bbc                 | LR__0465
05bbc     54 FA 05 F6 | 	mov	result1, #84
05bc0     44 00 90 FD | 	jmp	#LR__0475
05bc4                 | LR__0466
05bc4     6B FA 05 F6 | 	mov	result1, #107
05bc8     3C 00 90 FD | 	jmp	#LR__0475
05bcc                 | LR__0467
05bcc     87 FA 05 F6 | 	mov	result1, #135
05bd0     34 00 90 FD | 	jmp	#LR__0475
05bd4                 | LR__0468
05bd4     6A FA 05 F6 | 	mov	result1, #106
05bd8     2C 00 90 FD | 	jmp	#LR__0475
05bdc                 | LR__0469
05bdc     6E FA 05 F6 | 	mov	result1, #110
05be0     24 00 90 FD | 	jmp	#LR__0475
05be4                 | LR__0470
05be4     A1 FA 05 F6 | 	mov	result1, #161
05be8     1C 00 90 FD | 	jmp	#LR__0475
05bec                 | LR__0471
05bec     83 FA 05 F6 | 	mov	result1, #131
05bf0     14 00 90 FD | 	jmp	#LR__0475
05bf4                 | LR__0472
05bf4     A0 FA 05 F6 | 	mov	result1, #160
05bf8     0C 00 90 FD | 	jmp	#LR__0475
05bfc                 | LR__0473
05bfc     9B FA 05 F6 | 	mov	result1, #155
05c00     04 00 90 FD | 	jmp	#LR__0475
05c04                 | LR__0474
05c04     00 FA 05 F6 | 	mov	result1, #0
05c08                 | LR__0475
05c08     A7 F0 03 F6 | 	mov	ptra, fp
05c0c     B2 00 A0 FD | 	call	#popregs_
05c10                 | _isfunction_ret
05c10     2D 00 64 FD | 	ret
05c14                 | 
05c14                 | ' 
05c14                 | ' ' Check if the part is a name
05c14                 | ' 
05c14                 | ' function isname(s as string) as boolean
05c14                 | _isname
05c14     0D 4A 05 F6 | 	mov	COUNT_, #13
05c18     A8 00 A0 FD | 	call	#pushregs_
05c1c     09 1F 02 F6 | 	mov	local01, arg01
05c20     09 21 02 F6 | 	mov	local02, arg01
05c24     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05c28                 | LR__0480
05c28     10 FB C9 FA | 	rdbyte	result1, local02 wz
05c2c     01 20 06 51 |  if_ne	add	local02, #1
05c30     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05c34                 | LR__0481
05c34     09 21 82 F1 | 	sub	local02, arg01
05c38     10 FB 01 F6 | 	mov	result1, local02
05c3c     FD 22 0A F6 | 	mov	local03, result1 wz
05c40     00 FA 05 A6 |  if_e	mov	result1, #0
05c44     34 02 90 AD |  if_e	jmp	#LR__0493
05c48     0F 13 02 F6 | 	mov	arg01, local01
05c4c     01 14 06 F6 | 	mov	arg02, #1
05c50     01 16 06 F6 | 	mov	arg03, #1
05c54     80 CD B1 FD | 	call	#__system__Mid_S
05c58     FD 24 02 F6 | 	mov	local04, result1
05c5c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05c5c     83 01 00 FF 
05c60     23 14 06 F6 | 	mov	arg02, ##@LR__5311
05c64     12 13 02 F6 | 	mov	arg01, local04
05c68     00 AC B1 FD | 	call	#__system___string_cmp
05c6c     00 FA 55 F2 | 	cmps	result1, #0 wc
05c70     18 00 90 CD |  if_b	jmp	#LR__0482
05c74     83 01 00 FF 
05c78     25 14 06 F6 | 	mov	arg02, ##@LR__5312
05c7c     12 13 02 F6 | 	mov	arg01, local04
05c80     E8 AB B1 FD | 	call	#__system___string_cmp
05c84     01 FA 55 F2 | 	cmps	result1, #1 wc
05c88     1C 00 90 CD |  if_b	jmp	#LR__0483
05c8c                 | LR__0482
05c8c     83 01 00 FF 
05c90     27 14 06 F6 | 	mov	arg02, ##@LR__5313
05c94     12 13 02 F6 | 	mov	arg01, local04
05c98     D0 AB B1 FD | 	call	#__system___string_cmp
05c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05ca0     00 FA 05 56 |  if_ne	mov	result1, #0
05ca4     D4 01 90 5D |  if_ne	jmp	#LR__0493
05ca8                 | LR__0483
05ca8                 | ' if l>2 then 
05ca8     03 22 56 F2 | 	cmps	local03, #3 wc
05cac     C8 01 90 CD |  if_b	jmp	#LR__0492
05cb0                 | '   for i=2 to l
05cb0     02 26 06 F6 | 	mov	local05, #2
05cb4     11 29 02 F6 | 	mov	local06, local03
05cb8     01 28 06 F1 | 	add	local06, #1
05cbc                 | LR__0484
05cbc     14 27 52 F2 | 	cmps	local05, local06 wc
05cc0     B4 01 90 3D |  if_ae	jmp	#LR__0491
05cc4     0F 13 02 F6 | 	mov	arg01, local01
05cc8     13 15 02 F6 | 	mov	arg02, local05
05ccc     01 16 06 F6 | 	mov	arg03, #1
05cd0     04 CD B1 FD | 	call	#__system__Mid_S
05cd4     FD 24 02 F6 | 	mov	local04, result1
05cd8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05cd8     11 27 52 F2 | 	cmps	local05, local03 wc
05cdc     9C 00 90 3D |  if_ae	jmp	#LR__0487
05ce0     83 01 00 FF 
05ce4     29 14 06 F6 | 	mov	arg02, ##@LR__5314
05ce8     12 13 02 F6 | 	mov	arg01, local04
05cec     7C AB B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 55 F2 | 	cmps	result1, #0 wc
05cf4     18 00 90 CD |  if_b	jmp	#LR__0485
05cf8     83 01 00 FF 
05cfc     2B 14 06 F6 | 	mov	arg02, ##@LR__5315
05d00     12 13 02 F6 | 	mov	arg01, local04
05d04     64 AB B1 FD | 	call	#__system___string_cmp
05d08     01 FA 55 F2 | 	cmps	result1, #1 wc
05d0c     6C 00 90 CD |  if_b	jmp	#LR__0487
05d10                 | LR__0485
05d10     83 01 00 FF 
05d14     2D 14 06 F6 | 	mov	arg02, ##@LR__5316
05d18     12 13 02 F6 | 	mov	arg01, local04
05d1c     4C AB B1 FD | 	call	#__system___string_cmp
05d20     00 FA 55 F2 | 	cmps	result1, #0 wc
05d24     18 00 90 CD |  if_b	jmp	#LR__0486
05d28     83 01 00 FF 
05d2c     2F 14 06 F6 | 	mov	arg02, ##@LR__5317
05d30     12 13 02 F6 | 	mov	arg01, local04
05d34     34 AB B1 FD | 	call	#__system___string_cmp
05d38     01 FA 55 F2 | 	cmps	result1, #1 wc
05d3c     3C 00 90 CD |  if_b	jmp	#LR__0487
05d40                 | LR__0486
05d40     83 01 00 FF 
05d44     31 2A 06 F6 | 	mov	local07, ##@LR__5318
05d48     12 13 02 F6 | 	mov	arg01, local04
05d4c     15 15 02 F6 | 	mov	arg02, local07
05d50     18 AB B1 FD | 	call	#__system___string_cmp
05d54     00 FA 0D F2 | 	cmp	result1, #0 wz
05d58     20 00 90 AD |  if_e	jmp	#LR__0487
05d5c     83 01 00 FF 
05d60     33 2C 06 F6 | 	mov	local08, ##@LR__5319
05d64     12 13 02 F6 | 	mov	arg01, local04
05d68     16 15 02 F6 | 	mov	arg02, local08
05d6c     FC AA B1 FD | 	call	#__system___string_cmp
05d70     FD 2E 0A F6 | 	mov	local09, result1 wz
05d74     00 FA 05 56 |  if_ne	mov	result1, #0
05d78     00 01 90 5D |  if_ne	jmp	#LR__0493
05d7c                 | LR__0487
05d7c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05d7c     11 27 0A F2 | 	cmp	local05, local03 wz
05d80     EC 00 90 5D |  if_ne	jmp	#LR__0490
05d84     83 01 00 FF 
05d88     35 30 06 F6 | 	mov	local10, ##@LR__5320
05d8c     12 13 02 F6 | 	mov	arg01, local04
05d90     18 15 02 F6 | 	mov	arg02, local10
05d94     D4 AA B1 FD | 	call	#__system___string_cmp
05d98     FD 32 02 F6 | 	mov	local11, result1
05d9c     00 32 56 F2 | 	cmps	local11, #0 wc
05da0     1C 00 90 CD |  if_b	jmp	#LR__0488
05da4     83 01 00 FF 
05da8     37 14 06 F6 | 	mov	arg02, ##@LR__5321
05dac     12 13 02 F6 | 	mov	arg01, local04
05db0     B8 AA B1 FD | 	call	#__system___string_cmp
05db4     FD 30 02 F6 | 	mov	local10, result1
05db8     01 30 56 F2 | 	cmps	local10, #1 wc
05dbc     B0 00 90 CD |  if_b	jmp	#LR__0490
05dc0                 | LR__0488
05dc0     83 01 00 FF 
05dc4     39 14 06 F6 | 	mov	arg02, ##@LR__5322
05dc8     12 13 02 F6 | 	mov	arg01, local04
05dcc     9C AA B1 FD | 	call	#__system___string_cmp
05dd0     00 FA 55 F2 | 	cmps	result1, #0 wc
05dd4     1C 00 90 CD |  if_b	jmp	#LR__0489
05dd8     83 01 00 FF 
05ddc     3B 2E 06 F6 | 	mov	local09, ##@LR__5323
05de0     12 13 02 F6 | 	mov	arg01, local04
05de4     17 15 02 F6 | 	mov	arg02, local09
05de8     80 AA B1 FD | 	call	#__system___string_cmp
05dec     01 FA 55 F2 | 	cmps	result1, #1 wc
05df0     7C 00 90 CD |  if_b	jmp	#LR__0490
05df4                 | LR__0489
05df4     83 01 00 FF 
05df8     3D 2E 06 F6 | 	mov	local09, ##@LR__5324
05dfc     12 13 02 F6 | 	mov	arg01, local04
05e00     17 15 02 F6 | 	mov	arg02, local09
05e04     64 AA B1 FD | 	call	#__system___string_cmp
05e08     00 FA 4D F2 | 	cmps	result1, #0 wz
05e0c     60 00 90 AD |  if_e	jmp	#LR__0490
05e10     83 01 00 FF 
05e14     3F 2C 06 F6 | 	mov	local08, ##@LR__5325
05e18     12 13 02 F6 | 	mov	arg01, local04
05e1c     16 15 02 F6 | 	mov	arg02, local08
05e20     48 AA B1 FD | 	call	#__system___string_cmp
05e24     FD 2E 0A F6 | 	mov	local09, result1 wz
05e28     44 00 90 AD |  if_e	jmp	#LR__0490
05e2c     83 01 00 FF 
05e30     41 34 06 F6 | 	mov	local12, ##@LR__5326
05e34     1A 2D 02 F6 | 	mov	local08, local12
05e38     12 13 02 F6 | 	mov	arg01, local04
05e3c     16 15 02 F6 | 	mov	arg02, local08
05e40     28 AA B1 FD | 	call	#__system___string_cmp
05e44     FD 2A 0A F6 | 	mov	local07, result1 wz
05e48     24 00 90 AD |  if_e	jmp	#LR__0490
05e4c     83 01 00 FF 
05e50     43 36 06 F6 | 	mov	local13, ##@LR__5327
05e54     1B 35 02 F6 | 	mov	local12, local13
05e58     12 13 02 F6 | 	mov	arg01, local04
05e5c     1A 15 02 F6 | 	mov	arg02, local12
05e60     08 AA B1 FD | 	call	#__system___string_cmp
05e64     FD 2C 0A F6 | 	mov	local08, result1 wz
05e68     00 FA 05 56 |  if_ne	mov	result1, #0
05e6c     0C 00 90 5D |  if_ne	jmp	#LR__0493
05e70                 | LR__0490
05e70     01 26 06 F1 | 	add	local05, #1
05e74     44 FE 9F FD | 	jmp	#LR__0484
05e78                 | LR__0491
05e78                 | LR__0492
05e78                 | ' return true
05e78     01 FA 65 F6 | 	neg	result1, #1
05e7c                 | LR__0493
05e7c     A7 F0 03 F6 | 	mov	ptra, fp
05e80     B2 00 A0 FD | 	call	#popregs_
05e84                 | _isname_ret
05e84     2D 00 64 FD | 	ret
05e88                 | 
05e88                 | ' 
05e88                 | ' ' Check if the part is a number.  
05e88                 | ' 
05e88                 | ' function isnum(s as string) as boolean 
05e88                 | _isnum
05e88     13 4A 05 F6 | 	mov	COUNT_, #19
05e8c     A8 00 A0 FD | 	call	#pushregs_
05e90     09 1F 02 F6 | 	mov	local01, arg01
05e94     00 20 06 F6 | 	mov	local02, #0
05e98     00 22 06 F6 | 	mov	local03, #0
05e9c     0F 13 02 F6 | 	mov	arg01, local01
05ea0     09 25 02 F6 | 	mov	local04, arg01
05ea4     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05ea8                 | LR__0500
05ea8     12 FB C9 FA | 	rdbyte	result1, local04 wz
05eac     01 24 06 51 |  if_ne	add	local04, #1
05eb0     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05eb4                 | LR__0501
05eb4     09 25 82 F1 | 	sub	local04, arg01
05eb8     12 FB 01 F6 | 	mov	result1, local04
05ebc     FD 26 0A F6 | 	mov	local05, result1 wz
05ec0     00 FA 05 A6 |  if_e	mov	result1, #0
05ec4     A0 03 90 AD |  if_e	jmp	#LR__0516
05ec8     0F 13 02 F6 | 	mov	arg01, local01
05ecc     01 14 06 F6 | 	mov	arg02, #1
05ed0     01 16 06 F6 | 	mov	arg03, #1
05ed4     00 CB B1 FD | 	call	#__system__Mid_S
05ed8     FD 28 02 F6 | 	mov	local06, result1
05edc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05edc     83 01 00 FF 
05ee0     45 14 06 F6 | 	mov	arg02, ##@LR__5328
05ee4     14 13 02 F6 | 	mov	arg01, local06
05ee8     80 A9 B1 FD | 	call	#__system___string_cmp
05eec     00 FA 55 F2 | 	cmps	result1, #0 wc
05ef0     1C 00 90 CD |  if_b	jmp	#LR__0502
05ef4     83 01 00 FF 
05ef8     47 2A 06 F6 | 	mov	local07, ##@LR__5329
05efc     14 13 02 F6 | 	mov	arg01, local06
05f00     15 15 02 F6 | 	mov	arg02, local07
05f04     64 A9 B1 FD | 	call	#__system___string_cmp
05f08     01 FA 55 F2 | 	cmps	result1, #1 wc
05f0c     84 00 90 CD |  if_b	jmp	#LR__0503
05f10                 | LR__0502
05f10     83 01 00 FF 
05f14     49 2C 06 F6 | 	mov	local08, ##@LR__5330
05f18     16 2B 02 F6 | 	mov	local07, local08
05f1c     14 13 02 F6 | 	mov	arg01, local06
05f20     15 15 02 F6 | 	mov	arg02, local07
05f24     44 A9 B1 FD | 	call	#__system___string_cmp
05f28     00 FA 0D F2 | 	cmp	result1, #0 wz
05f2c     64 00 90 AD |  if_e	jmp	#LR__0503
05f30     83 01 00 FF 
05f34     4B 2E 06 F6 | 	mov	local09, ##@LR__5331
05f38     17 2D 02 F6 | 	mov	local08, local09
05f3c     14 13 02 F6 | 	mov	arg01, local06
05f40     16 15 02 F6 | 	mov	arg02, local08
05f44     24 A9 B1 FD | 	call	#__system___string_cmp
05f48     FD 2A 0A F6 | 	mov	local07, result1 wz
05f4c     44 00 90 AD |  if_e	jmp	#LR__0503
05f50     83 01 00 FF 
05f54     4D 30 06 F6 | 	mov	local10, ##@LR__5332
05f58     18 2F 02 F6 | 	mov	local09, local10
05f5c     14 13 02 F6 | 	mov	arg01, local06
05f60     17 15 02 F6 | 	mov	arg02, local09
05f64     04 A9 B1 FD | 	call	#__system___string_cmp
05f68     FD 2C 0A F6 | 	mov	local08, result1 wz
05f6c     24 00 90 AD |  if_e	jmp	#LR__0503
05f70     83 01 00 FF 
05f74     4F 32 06 F6 | 	mov	local11, ##@LR__5333
05f78     19 31 02 F6 | 	mov	local10, local11
05f7c     14 13 02 F6 | 	mov	arg01, local06
05f80     18 15 02 F6 | 	mov	arg02, local10
05f84     E4 A8 B1 FD | 	call	#__system___string_cmp
05f88     FD 2E 0A F6 | 	mov	local09, result1 wz
05f8c     00 FA 05 56 |  if_ne	mov	result1, #0
05f90     D4 02 90 5D |  if_ne	jmp	#LR__0516
05f94                 | LR__0503
05f94                 | ' if m$="." then ds=1
05f94     83 01 00 FF 
05f98     51 14 06 F6 | 	mov	arg02, ##@LR__5334
05f9c     14 13 02 F6 | 	mov	arg01, local06
05fa0     C8 A8 B1 FD | 	call	#__system___string_cmp
05fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa8     01 20 06 A6 |  if_e	mov	local02, #1
05fac                 | ' if m$="$" then hex=1 else hex=0
05fac     83 01 00 FF 
05fb0     53 14 06 F6 | 	mov	arg02, ##@LR__5335
05fb4     14 13 02 F6 | 	mov	arg01, local06
05fb8     B0 A8 B1 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     01 34 06 A6 |  if_e	mov	local12, #1
05fc4     00 34 06 56 |  if_ne	mov	local12, #0
05fc8                 | ' if m$="%" then bin=1 else bin=0
05fc8     83 01 00 FF 
05fcc     55 14 06 F6 | 	mov	arg02, ##@LR__5336
05fd0     14 13 02 F6 | 	mov	arg01, local06
05fd4     94 A8 B1 FD | 	call	#__system___string_cmp
05fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fdc     01 36 06 A6 |  if_e	mov	local13, #1
05fe0     00 36 06 56 |  if_ne	mov	local13, #0
05fe4                 | ' if l>1 then 
05fe4     02 26 56 F2 | 	cmps	local05, #2 wc
05fe8     78 02 90 CD |  if_b	jmp	#LR__0515
05fec                 | '   for i=2 to l
05fec     02 38 06 F6 | 	mov	local14, #2
05ff0     13 3B 02 F6 | 	mov	local15, local05
05ff4     01 3A 06 F1 | 	add	local15, #1
05ff8                 | LR__0504
05ff8     1D 39 52 F2 | 	cmps	local14, local15 wc
05ffc     64 02 90 3D |  if_ae	jmp	#LR__0514
06000     0F 13 02 F6 | 	mov	arg01, local01
06004     1C 15 02 F6 | 	mov	arg02, local14
06008     01 16 06 F6 | 	mov	arg03, #1
0600c     C8 C9 B1 FD | 	call	#__system__Mid_S
06010     FD 28 02 F6 | 	mov	local06, result1
06014     00 3C 06 F6 | 	mov	local16, #0
06018                 | '     m$=mid$(s,i,1) : b=false
06018                 | '     if m$>="0" andalso m$<="9" then b=true  
06018     83 01 00 FF 
0601c     57 14 06 F6 | 	mov	arg02, ##@LR__5337
06020     14 13 02 F6 | 	mov	arg01, local06
06024     44 A8 B1 FD | 	call	#__system___string_cmp
06028     00 FA 55 F2 | 	cmps	result1, #0 wc
0602c     1C 00 90 CD |  if_b	jmp	#LR__0505
06030     83 01 00 FF 
06034     59 2A 06 F6 | 	mov	local07, ##@LR__5338
06038     14 13 02 F6 | 	mov	arg01, local06
0603c     15 15 02 F6 | 	mov	arg02, local07
06040     28 A8 B1 FD | 	call	#__system___string_cmp
06044     01 FA 55 F2 | 	cmps	result1, #1 wc
06048     01 3C 66 C6 |  if_b	neg	local16, #1
0604c                 | LR__0505
0604c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0604c     83 01 00 FF 
06050     5B 14 06 F6 | 	mov	arg02, ##@LR__5339
06054     14 13 02 F6 | 	mov	arg01, local06
06058     10 A8 B1 FD | 	call	#__system___string_cmp
0605c     00 FA 0D F2 | 	cmp	result1, #0 wz
06060     7C 00 90 AD |  if_e	jmp	#LR__0506
06064     83 01 00 FF 
06068     5D 2A 06 F6 | 	mov	local07, ##@LR__5340
0606c     14 13 02 F6 | 	mov	arg01, local06
06070     15 15 02 F6 | 	mov	arg02, local07
06074     F4 A7 B1 FD | 	call	#__system___string_cmp
06078     00 FA 0D F2 | 	cmp	result1, #0 wz
0607c     60 00 90 AD |  if_e	jmp	#LR__0506
06080     83 01 00 FF 
06084     5F 2C 06 F6 | 	mov	local08, ##@LR__5341
06088     16 2B 02 F6 | 	mov	local07, local08
0608c     14 13 02 F6 | 	mov	arg01, local06
06090     15 15 02 F6 | 	mov	arg02, local07
06094     D4 A7 B1 FD | 	call	#__system___string_cmp
06098     00 FA 0D F2 | 	cmp	result1, #0 wz
0609c     40 00 90 AD |  if_e	jmp	#LR__0506
060a0     83 01 00 FF 
060a4     61 2E 06 F6 | 	mov	local09, ##@LR__5342
060a8     17 2D 02 F6 | 	mov	local08, local09
060ac     14 13 02 F6 | 	mov	arg01, local06
060b0     16 15 02 F6 | 	mov	arg02, local08
060b4     B4 A7 B1 FD | 	call	#__system___string_cmp
060b8     FD 2A 0A F6 | 	mov	local07, result1 wz
060bc     20 00 90 AD |  if_e	jmp	#LR__0506
060c0     83 01 00 FF 
060c4     63 30 06 F6 | 	mov	local10, ##@LR__5343
060c8     18 2F 02 F6 | 	mov	local09, local10
060cc     14 13 02 F6 | 	mov	arg01, local06
060d0     17 15 02 F6 | 	mov	arg02, local09
060d4     94 A7 B1 FD | 	call	#__system___string_cmp
060d8     FD 2C 0A F6 | 	mov	local08, result1 wz
060dc     04 00 90 5D |  if_ne	jmp	#LR__0507
060e0                 | LR__0506
060e0     01 3C 66 F6 | 	neg	local16, #1
060e4                 | LR__0507
060e4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
060e4     01 34 0E F2 | 	cmp	local12, #1 wz
060e8     34 00 90 5D |  if_ne	jmp	#LR__0508
060ec     83 01 00 FF 
060f0     65 14 06 F6 | 	mov	arg02, ##@LR__5344
060f4     14 13 02 F6 | 	mov	arg01, local06
060f8     70 A7 B1 FD | 	call	#__system___string_cmp
060fc     00 FA 55 F2 | 	cmps	result1, #0 wc
06100     1C 00 90 CD |  if_b	jmp	#LR__0508
06104     83 01 00 FF 
06108     67 2A 06 F6 | 	mov	local07, ##@LR__5345
0610c     14 13 02 F6 | 	mov	arg01, local06
06110     15 15 02 F6 | 	mov	arg02, local07
06114     54 A7 B1 FD | 	call	#__system___string_cmp
06118     01 FA 55 F2 | 	cmps	result1, #1 wc
0611c     01 3C 66 C6 |  if_b	neg	local16, #1
06120                 | LR__0508
06120                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06120     01 36 0E F2 | 	cmp	local13, #1 wz
06124     58 00 90 5D |  if_ne	jmp	#LR__0510
06128     83 01 00 FF 
0612c     69 14 06 F6 | 	mov	arg02, ##@LR__5346
06130     14 13 02 F6 | 	mov	arg01, local06
06134     34 A7 B1 FD | 	call	#__system___string_cmp
06138     00 FA 55 F2 | 	cmps	result1, #0 wc
0613c     1C 00 90 CD |  if_b	jmp	#LR__0509
06140     83 01 00 FF 
06144     6B 2A 06 F6 | 	mov	local07, ##@LR__5347
06148     14 13 02 F6 | 	mov	arg01, local06
0614c     15 15 02 F6 | 	mov	arg02, local07
06150     18 A7 B1 FD | 	call	#__system___string_cmp
06154     01 FA 55 F2 | 	cmps	result1, #1 wc
06158     24 00 90 CD |  if_b	jmp	#LR__0510
0615c                 | LR__0509
0615c     83 01 00 FF 
06160     6D 2C 06 F6 | 	mov	local08, ##@LR__5348
06164     16 2B 02 F6 | 	mov	local07, local08
06168     14 13 02 F6 | 	mov	arg01, local06
0616c     15 15 02 F6 | 	mov	arg02, local07
06170     F8 A6 B1 FD | 	call	#__system___string_cmp
06174     00 FA 0D F2 | 	cmp	result1, #0 wz
06178     00 FA 05 56 |  if_ne	mov	result1, #0
0617c     E8 00 90 5D |  if_ne	jmp	#LR__0516
06180                 | LR__0510
06180                 | '     if not b then return false
06180     1E 3D 22 F6 | 	not	local16, local16
06184     00 3C 0E F2 | 	cmp	local16, #0 wz
06188     00 FA 05 56 |  if_ne	mov	result1, #0
0618c     D8 00 90 5D |  if_ne	jmp	#LR__0516
06190                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06190     83 01 00 FF 
06194     6F 14 06 F6 | 	mov	arg02, ##@LR__5349
06198     14 13 02 F6 | 	mov	arg01, local06
0619c     CC A6 B1 FD | 	call	#__system___string_cmp
061a0     00 FA 0D F2 | 	cmp	result1, #0 wz
061a4     3C 00 90 5D |  if_ne	jmp	#LR__0511
061a8     1C 15 02 F6 | 	mov	arg02, local14
061ac     01 14 86 F1 | 	sub	arg02, #1
061b0     0F 13 02 F6 | 	mov	arg01, local01
061b4     01 16 06 F6 | 	mov	arg03, #1
061b8     1C C8 B1 FD | 	call	#__system__Mid_S
061bc     FD 12 02 F6 | 	mov	arg01, result1
061c0     0C CA B1 FD | 	call	#__system__LCase_S
061c4     FD 12 02 F6 | 	mov	arg01, result1
061c8     83 01 00 FF 
061cc     71 2A 06 F6 | 	mov	local07, ##@LR__5350
061d0     15 15 02 F6 | 	mov	arg02, local07
061d4     94 A6 B1 FD | 	call	#__system___string_cmp
061d8     00 FA 0D F2 | 	cmp	result1, #0 wz
061dc     00 FA 05 56 |  if_ne	mov	result1, #0
061e0     84 00 90 5D |  if_ne	jmp	#LR__0516
061e4                 | LR__0511
061e4                 | '     if m$="." then ds+=1: if ds>1 then return false
061e4     83 01 00 FF 
061e8     73 14 06 F6 | 	mov	arg02, ##@LR__5351
061ec     14 13 02 F6 | 	mov	arg01, local06
061f0     78 A6 B1 FD | 	call	#__system___string_cmp
061f4     00 FA 0D F2 | 	cmp	result1, #0 wz
061f8     01 20 06 A1 |  if_e	add	local02, #1
061fc     02 20 56 A2 |  if_e	cmps	local02, #2 wc
06200     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06204     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
06208                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06208     83 01 00 FF 
0620c     75 3E 06 F6 | 	mov	local17, ##@LR__5352
06210     1F 41 02 F6 | 	mov	local18, local17
06214     14 13 02 F6 | 	mov	arg01, local06
06218     20 15 02 F6 | 	mov	arg02, local18
0621c     4C A6 B1 FD | 	call	#__system___string_cmp
06220     FD 42 0A F6 | 	mov	local19, result1 wz
06224     20 00 90 AD |  if_e	jmp	#LR__0512
06228     83 01 00 FF 
0622c     77 2A 06 F6 | 	mov	local07, ##@LR__5353
06230     15 3F 02 F6 | 	mov	local17, local07
06234     14 13 02 F6 | 	mov	arg01, local06
06238     1F 15 02 F6 | 	mov	arg02, local17
0623c     2C A6 B1 FD | 	call	#__system___string_cmp
06240     FD 40 0A F6 | 	mov	local18, result1 wz
06244     14 00 90 5D |  if_ne	jmp	#LR__0513
06248                 | LR__0512
06248     01 22 06 F1 | 	add	local03, #1
0624c     00 34 0E F2 | 	cmp	local12, #0 wz
06250     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06254     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06258     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
0625c                 | LR__0513
0625c     01 38 06 F1 | 	add	local14, #1
06260     94 FD 9F FD | 	jmp	#LR__0504
06264                 | LR__0514
06264                 | LR__0515
06264                 | ' return true
06264     01 FA 65 F6 | 	neg	result1, #1
06268                 | LR__0516
06268     A7 F0 03 F6 | 	mov	ptra, fp
0626c     B2 00 A0 FD | 	call	#popregs_
06270                 | _isnum_ret
06270     2D 00 64 FD | 	ret
06274                 | 
06274                 | '   
06274                 | ' ' Check if the part is an integer number.    
06274                 | '   
06274                 | ' function isint(s as string) as boolean
06274                 | _isint
06274     0E 4A 05 F6 | 	mov	COUNT_, #14
06278     A8 00 A0 FD | 	call	#pushregs_
0627c     09 1F 02 F6 | 	mov	local01, arg01
06280     09 21 02 F6 | 	mov	local02, arg01
06284     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06288                 | LR__0520
06288     10 FB C9 FA | 	rdbyte	result1, local02 wz
0628c     01 20 06 51 |  if_ne	add	local02, #1
06290     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06294                 | LR__0521
06294     09 21 82 F1 | 	sub	local02, arg01
06298     10 FB 01 F6 | 	mov	result1, local02
0629c     FD 22 0A F6 | 	mov	local03, result1 wz
062a0     00 FA 05 A6 |  if_e	mov	result1, #0
062a4     64 02 90 AD |  if_e	jmp	#LR__0534
062a8     0F 13 02 F6 | 	mov	arg01, local01
062ac     01 14 06 F6 | 	mov	arg02, #1
062b0     01 16 06 F6 | 	mov	arg03, #1
062b4     20 C7 B1 FD | 	call	#__system__Mid_S
062b8     FD 24 02 F6 | 	mov	local04, result1
062bc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
062bc     83 01 00 FF 
062c0     79 14 06 F6 | 	mov	arg02, ##@LR__5354
062c4     12 13 02 F6 | 	mov	arg01, local04
062c8     A0 A5 B1 FD | 	call	#__system___string_cmp
062cc     00 FA 55 F2 | 	cmps	result1, #0 wc
062d0     1C 00 90 CD |  if_b	jmp	#LR__0522
062d4     83 01 00 FF 
062d8     7B 26 06 F6 | 	mov	local05, ##@LR__5355
062dc     12 13 02 F6 | 	mov	arg01, local04
062e0     13 15 02 F6 | 	mov	arg02, local05
062e4     84 A5 B1 FD | 	call	#__system___string_cmp
062e8     01 FA 55 F2 | 	cmps	result1, #1 wc
062ec     64 00 90 CD |  if_b	jmp	#LR__0523
062f0                 | LR__0522
062f0     83 01 00 FF 
062f4     7D 28 06 F6 | 	mov	local06, ##@LR__5356
062f8     14 27 02 F6 | 	mov	local05, local06
062fc     12 13 02 F6 | 	mov	arg01, local04
06300     13 15 02 F6 | 	mov	arg02, local05
06304     64 A5 B1 FD | 	call	#__system___string_cmp
06308     00 FA 0D F2 | 	cmp	result1, #0 wz
0630c     44 00 90 AD |  if_e	jmp	#LR__0523
06310     83 01 00 FF 
06314     7F 2A 06 F6 | 	mov	local07, ##@LR__5357
06318     15 29 02 F6 | 	mov	local06, local07
0631c     12 13 02 F6 | 	mov	arg01, local04
06320     14 15 02 F6 | 	mov	arg02, local06
06324     44 A5 B1 FD | 	call	#__system___string_cmp
06328     FD 26 0A F6 | 	mov	local05, result1 wz
0632c     24 00 90 AD |  if_e	jmp	#LR__0523
06330     83 01 00 FF 
06334     81 2C 06 F6 | 	mov	local08, ##@LR__5358
06338     16 2B 02 F6 | 	mov	local07, local08
0633c     12 13 02 F6 | 	mov	arg01, local04
06340     15 15 02 F6 | 	mov	arg02, local07
06344     24 A5 B1 FD | 	call	#__system___string_cmp
06348     FD 28 0A F6 | 	mov	local06, result1 wz
0634c     00 FA 05 56 |  if_ne	mov	result1, #0
06350     B8 01 90 5D |  if_ne	jmp	#LR__0534
06354                 | LR__0523
06354                 | ' if m$="$" then hex=1 else hex=0
06354     83 01 00 FF 
06358     83 14 06 F6 | 	mov	arg02, ##@LR__5359
0635c     12 13 02 F6 | 	mov	arg01, local04
06360     08 A5 B1 FD | 	call	#__system___string_cmp
06364     00 FA 0D F2 | 	cmp	result1, #0 wz
06368     01 2E 06 A6 |  if_e	mov	local09, #1
0636c     00 2E 06 56 |  if_ne	mov	local09, #0
06370                 | ' if m$="%" then bin=1 else bin=0
06370     83 01 00 FF 
06374     85 14 06 F6 | 	mov	arg02, ##@LR__5360
06378     12 13 02 F6 | 	mov	arg01, local04
0637c     EC A4 B1 FD | 	call	#__system___string_cmp
06380     00 FA 0D F2 | 	cmp	result1, #0 wz
06384     01 30 06 A6 |  if_e	mov	local10, #1
06388     00 30 06 56 |  if_ne	mov	local10, #0
0638c                 | ' if l>1 then 
0638c     02 22 56 F2 | 	cmps	local03, #2 wc
06390     74 01 90 CD |  if_b	jmp	#LR__0533
06394                 | '   for i=2 to l
06394     02 32 06 F6 | 	mov	local11, #2
06398     11 35 02 F6 | 	mov	local12, local03
0639c     01 34 06 F1 | 	add	local12, #1
063a0                 | LR__0524
063a0     1A 33 52 F2 | 	cmps	local11, local12 wc
063a4     60 01 90 3D |  if_ae	jmp	#LR__0532
063a8     0F 13 02 F6 | 	mov	arg01, local01
063ac     19 15 02 F6 | 	mov	arg02, local11
063b0     01 16 06 F6 | 	mov	arg03, #1
063b4     20 C6 B1 FD | 	call	#__system__Mid_S
063b8     FD 24 02 F6 | 	mov	local04, result1
063bc                 | '     m$=mid$(s,i,1) 
063bc                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
063bc     00 2E 0E F2 | 	cmp	local09, #0 wz
063c0     50 00 90 5D |  if_ne	jmp	#LR__0526
063c4     83 01 00 FF 
063c8     87 14 06 F6 | 	mov	arg02, ##@LR__5361
063cc     12 13 02 F6 | 	mov	arg01, local04
063d0     98 A4 B1 FD | 	call	#__system___string_cmp
063d4     00 FA 55 F2 | 	cmps	result1, #0 wc
063d8     18 00 90 CD |  if_b	jmp	#LR__0525
063dc     83 01 00 FF 
063e0     89 14 06 F6 | 	mov	arg02, ##@LR__5362
063e4     12 13 02 F6 | 	mov	arg01, local04
063e8     80 A4 B1 FD | 	call	#__system___string_cmp
063ec     01 FA 55 F2 | 	cmps	result1, #1 wc
063f0     20 00 90 CD |  if_b	jmp	#LR__0526
063f4                 | LR__0525
063f4     83 01 00 FF 
063f8     8B 28 06 F6 | 	mov	local06, ##@LR__5363
063fc     12 13 02 F6 | 	mov	arg01, local04
06400     14 15 02 F6 | 	mov	arg02, local06
06404     64 A4 B1 FD | 	call	#__system___string_cmp
06408     00 FA 0D F2 | 	cmp	result1, #0 wz
0640c     00 FA 05 56 |  if_ne	mov	result1, #0
06410     F8 00 90 5D |  if_ne	jmp	#LR__0534
06414                 | LR__0526
06414                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06414     01 2E 0E F2 | 	cmp	local09, #1 wz
06418     90 00 90 5D |  if_ne	jmp	#LR__0529
0641c     83 01 00 FF 
06420     8D 14 06 F6 | 	mov	arg02, ##@LR__5364
06424     12 13 02 F6 | 	mov	arg01, local04
06428     40 A4 B1 FD | 	call	#__system___string_cmp
0642c     00 FA 55 F2 | 	cmps	result1, #0 wc
06430     1C 00 90 CD |  if_b	jmp	#LR__0527
06434     83 01 00 FF 
06438     8F 14 06 F6 | 	mov	arg02, ##@LR__5365
0643c     12 13 02 F6 | 	mov	arg01, local04
06440     28 A4 B1 FD | 	call	#__system___string_cmp
06444     FD 36 02 F6 | 	mov	local13, result1
06448     01 36 56 F2 | 	cmps	local13, #1 wc
0644c     5C 00 90 CD |  if_b	jmp	#LR__0529
06450                 | LR__0527
06450     83 01 00 FF 
06454     91 26 06 F6 | 	mov	local05, ##@LR__5366
06458     12 13 02 F6 | 	mov	arg01, local04
0645c     13 15 02 F6 | 	mov	arg02, local05
06460     08 A4 B1 FD | 	call	#__system___string_cmp
06464     FD 38 02 F6 | 	mov	local14, result1
06468     00 38 56 F2 | 	cmps	local14, #0 wc
0646c     1C 00 90 CD |  if_b	jmp	#LR__0528
06470     83 01 00 FF 
06474     93 2A 06 F6 | 	mov	local07, ##@LR__5367
06478     12 13 02 F6 | 	mov	arg01, local04
0647c     15 15 02 F6 | 	mov	arg02, local07
06480     E8 A3 B1 FD | 	call	#__system___string_cmp
06484     01 FA 55 F2 | 	cmps	result1, #1 wc
06488     20 00 90 CD |  if_b	jmp	#LR__0529
0648c                 | LR__0528
0648c     83 01 00 FF 
06490     95 2C 06 F6 | 	mov	local08, ##@LR__5368
06494     12 13 02 F6 | 	mov	arg01, local04
06498     16 15 02 F6 | 	mov	arg02, local08
0649c     CC A3 B1 FD | 	call	#__system___string_cmp
064a0     00 FA 0D F2 | 	cmp	result1, #0 wz
064a4     00 FA 05 56 |  if_ne	mov	result1, #0
064a8     60 00 90 5D |  if_ne	jmp	#LR__0534
064ac                 | LR__0529
064ac                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
064ac     01 30 0E F2 | 	cmp	local10, #1 wz
064b0     4C 00 90 5D |  if_ne	jmp	#LR__0531
064b4     83 01 00 FF 
064b8     97 14 06 F6 | 	mov	arg02, ##@LR__5369
064bc     12 13 02 F6 | 	mov	arg01, local04
064c0     A8 A3 B1 FD | 	call	#__system___string_cmp
064c4     00 FA 55 F2 | 	cmps	result1, #0 wc
064c8     18 00 90 CD |  if_b	jmp	#LR__0530
064cc     83 01 00 FF 
064d0     99 14 06 F6 | 	mov	arg02, ##@LR__5370
064d4     12 13 02 F6 | 	mov	arg01, local04
064d8     90 A3 B1 FD | 	call	#__system___string_cmp
064dc     01 FA 55 F2 | 	cmps	result1, #1 wc
064e0     1C 00 90 CD |  if_b	jmp	#LR__0531
064e4                 | LR__0530
064e4     83 01 00 FF 
064e8     9B 14 06 F6 | 	mov	arg02, ##@LR__5371
064ec     12 13 02 F6 | 	mov	arg01, local04
064f0     78 A3 B1 FD | 	call	#__system___string_cmp
064f4     00 FA 0D F2 | 	cmp	result1, #0 wz
064f8     00 FA 05 56 |  if_ne	mov	result1, #0
064fc     0C 00 90 5D |  if_ne	jmp	#LR__0534
06500                 | LR__0531
06500     01 32 06 F1 | 	add	local11, #1
06504     98 FE 9F FD | 	jmp	#LR__0524
06508                 | LR__0532
06508                 | LR__0533
06508                 | ' return true
06508     01 FA 65 F6 | 	neg	result1, #1
0650c                 | LR__0534
0650c     A7 F0 03 F6 | 	mov	ptra, fp
06510     B2 00 A0 FD | 	call	#popregs_
06514                 | _isint_ret
06514     2D 00 64 FD | 	ret
06518                 | 
06518                 | ' 
06518                 | ' ' Check if the part is a positive decimal number.  
06518                 | ' 
06518                 | ' function isdec(s as string) as boolean
06518                 | _isdec
06518     05 4A 05 F6 | 	mov	COUNT_, #5
0651c     A8 00 A0 FD | 	call	#pushregs_
06520     09 1F 02 F6 | 	mov	local01, arg01
06524     09 21 02 F6 | 	mov	local02, arg01
06528     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0652c                 | LR__0540
0652c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06530     01 20 06 51 |  if_ne	add	local02, #1
06534     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06538                 | LR__0541
06538     09 21 82 F1 | 	sub	local02, arg01
0653c     10 FB 01 F6 | 	mov	result1, local02
06540     FD 20 0A F6 | 	mov	local02, result1 wz
06544     00 FA 05 A6 |  if_e	mov	result1, #0
06548     80 00 90 AD |  if_e	jmp	#LR__0546
0654c                 | ' for i=1 to l
0654c     01 22 06 F6 | 	mov	local03, #1
06550     10 25 02 F6 | 	mov	local04, local02
06554     01 24 06 F1 | 	add	local04, #1
06558                 | LR__0542
06558     12 23 52 F2 | 	cmps	local03, local04 wc
0655c     68 00 90 3D |  if_ae	jmp	#LR__0545
06560     0F 13 02 F6 | 	mov	arg01, local01
06564     11 15 02 F6 | 	mov	arg02, local03
06568     01 16 06 F6 | 	mov	arg03, #1
0656c     68 C4 B1 FD | 	call	#__system__Mid_S
06570     FD 26 02 F6 | 	mov	local05, result1
06574                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06574     83 01 00 FF 
06578     9D 14 06 F6 | 	mov	arg02, ##@LR__5372
0657c     13 13 02 F6 | 	mov	arg01, local05
06580     E8 A2 B1 FD | 	call	#__system___string_cmp
06584     00 FA 55 F2 | 	cmps	result1, #0 wc
06588     18 00 90 CD |  if_b	jmp	#LR__0543
0658c     83 01 00 FF 
06590     9F 14 06 F6 | 	mov	arg02, ##@LR__5373
06594     13 13 02 F6 | 	mov	arg01, local05
06598     D0 A2 B1 FD | 	call	#__system___string_cmp
0659c     01 FA 55 F2 | 	cmps	result1, #1 wc
065a0     1C 00 90 CD |  if_b	jmp	#LR__0544
065a4                 | LR__0543
065a4     83 01 00 FF 
065a8     A1 14 06 F6 | 	mov	arg02, ##@LR__5374
065ac     13 13 02 F6 | 	mov	arg01, local05
065b0     B8 A2 B1 FD | 	call	#__system___string_cmp
065b4     00 FA 0D F2 | 	cmp	result1, #0 wz
065b8     00 FA 05 56 |  if_ne	mov	result1, #0
065bc     0C 00 90 5D |  if_ne	jmp	#LR__0546
065c0                 | LR__0544
065c0     01 22 06 F1 | 	add	local03, #1
065c4     90 FF 9F FD | 	jmp	#LR__0542
065c8                 | LR__0545
065c8                 | ' return true
065c8     01 FA 65 F6 | 	neg	result1, #1
065cc                 | LR__0546
065cc     A7 F0 03 F6 | 	mov	ptra, fp
065d0     B2 00 A0 FD | 	call	#popregs_
065d4                 | _isdec_ret
065d4     2D 00 64 FD | 	ret
065d8                 | 
065d8                 | ' 
065d8                 | ' ' Check if the part is a string.  
065d8                 | ' 
065d8                 | ' function isstring(s as string) as boolean
065d8                 | _isstring
065d8     01 4A 05 F6 | 	mov	COUNT_, #1
065dc     A8 00 A0 FD | 	call	#pushregs_
065e0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
065e0     09 1F 02 F6 | 	mov	local01, arg01
065e4     01 14 06 F6 | 	mov	arg02, #1
065e8     D4 C2 B1 FD | 	call	#__system__Left_S
065ec     FD 12 02 F6 | 	mov	arg01, result1
065f0     83 01 00 FF 
065f4     A3 14 06 F6 | 	mov	arg02, ##@LR__5375
065f8     70 A2 B1 FD | 	call	#__system___string_cmp
065fc     00 FA 4D F2 | 	cmps	result1, #0 wz
06600     28 00 90 5D |  if_ne	jmp	#LR__0550
06604     0F 13 02 F6 | 	mov	arg01, local01
06608     01 14 06 F6 | 	mov	arg02, #1
0660c     38 C3 B1 FD | 	call	#__system__Right_S
06610     FD 12 02 F6 | 	mov	arg01, result1
06614     83 01 00 FF 
06618     A5 14 06 F6 | 	mov	arg02, ##@LR__5376
0661c     4C A2 B1 FD | 	call	#__system___string_cmp
06620     00 FA 4D F2 | 	cmps	result1, #0 wz
06624     01 FA 65 A6 |  if_e	neg	result1, #1
06628     04 00 90 AD |  if_e	jmp	#LR__0551
0662c                 | LR__0550
0662c     00 FA 05 F6 | 	mov	result1, #0
06630                 | LR__0551
06630     A7 F0 03 F6 | 	mov	ptra, fp
06634     B2 00 A0 FD | 	call	#popregs_
06638                 | _isstring_ret
06638     2D 00 64 FD | 	ret
0663c                 | 
0663c                 | ' 
0663c                 | ' ' getnoteval. Returns the frequency of note token
0663c                 | ' 
0663c                 | ' function getnoteval(token) as single
0663c                 | _getnoteval
0663c     02 4A 05 F6 | 	mov	COUNT_, #2
06640     A8 00 A0 FD | 	call	#pushregs_
06644     01 00 00 FF 
06648     00 13 86 F1 | 	sub	arg01, ##768
0664c     09 15 52 F6 | 	abs	arg02, arg01 wc
06650     0C 14 16 FD | 	qdiv	arg02, #12
06654     14 00 00 FF 
06658     D8 E4 05 F1 | 	add	objptr, ##10456
0665c     19 14 62 FD | 	getqy	arg02
06660     0A 15 82 F6 | 	negc	arg02, arg02
06664     02 14 66 F0 | 	shl	arg02, #2
06668     F2 14 02 F1 | 	add	arg02, objptr
0666c     0A 1F 02 FB | 	rdlong	local01, arg02
06670     09 15 52 F6 | 	abs	arg02, arg01 wc
06674     0C 14 16 FD | 	qdiv	arg02, #12
06678     14 00 00 FF 
0667c     D8 E4 85 F1 | 	sub	objptr, ##10456
06680     01 12 06 F6 | 	mov	arg01, #1
06684                 | ' noteexp=1+(note/12) 
06684                 | ' return (2.0^noteexp)*notebase
06684     18 14 62 FD | 	getqx	arg02
06688     0A 13 82 F3 | 	sumc	arg01, arg02
0668c     09 13 52 F6 | 	abs	arg01, arg01 wc
06690     1F 20 C6 C9 |  if_b	decod	local02, #31
06694     00 20 06 36 |  if_ae	mov	local02, #0
06698     58 C9 B1 FD | 	call	#__system___float_fromuns
0669c     10 FB 61 F5 | 	xor	result1, local02
066a0     FD 14 02 F6 | 	mov	arg02, result1
066a4     1E 12 C6 F9 | 	decod	arg01, #30
066a8     54 DC B1 FD | 	call	#__system____builtin_powf
066ac     FD 12 02 F6 | 	mov	arg01, result1
066b0     0F 15 02 F6 | 	mov	arg02, local01
066b4     40 CD B1 FD | 	call	#__system___float_mul
066b8     A7 F0 03 F6 | 	mov	ptra, fp
066bc     B2 00 A0 FD | 	call	#popregs_
066c0                 | _getnoteval_ret
066c0     2D 00 64 FD | 	ret
066c4                 | 
066c4                 | ' 
066c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066c4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
066c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066c4                 | ' 
066c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066c4                 | ' '
066c4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
066c4                 | ' '
066c4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
066c4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
066c4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
066c4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
066c4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
066c4                 | ' ' 
066c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066c4                 | ' 
066c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066c4                 | ' ' Helper functions to manage program lines
066c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
066c4                 | ' 
066c4                 | ' '----- delete a line from a program
066c4                 | ' 
066c4                 | ' function deleteline(aline as ulong) as integer
066c4                 | _deleteline
066c4     02 4A 05 F6 | 	mov	COUNT_, #2
066c8     A8 00 A0 FD | 	call	#pushregs_
066cc     2C F0 07 F1 | 	add	ptra, #44
066d0     04 4E 05 F1 | 	add	fp, #4
066d4     A7 12 62 FC | 	wrlong	arg01, fp
066d8     4A 00 00 FF 
066dc     88 E4 05 F1 | 	add	objptr, ##38024
066e0     F2 1E 02 FB | 	rdlong	local01, objptr
066e4     0C 4E 05 F1 | 	add	fp, #12
066e8     A7 1E 62 FC | 	wrlong	local01, fp
066ec     10 4E 85 F1 | 	sub	fp, #16
066f0                 | ' 
066f0                 | ' searchptr=programstart
066f0                 | ' do
066f0     3E 00 00 FF 
066f4     BC E5 85 F1 | 	sub	objptr, ##32188
066f8                 | LR__0560
066f8     14 4E 05 F1 | 	add	fp, #20
066fc     A7 12 02 F6 | 	mov	arg01, fp
06700     04 4E 85 F1 | 	sub	fp, #4
06704     A7 14 02 FB | 	rdlong	arg02, fp
06708     10 4E 85 F1 | 	sub	fp, #16
0670c     18 16 06 F6 | 	mov	arg03, #24
06710     F0 94 B1 FD | 	call	#_psram_spin2_read1
06714     10 4E 05 F1 | 	add	fp, #16
06718     A7 1E 02 FB | 	rdlong	local01, fp
0671c     08 4E 85 F1 | 	sub	fp, #8
06720     A7 1E 62 FC | 	wrlong	local01, fp
06724     20 4E 05 F1 | 	add	fp, #32
06728     A7 1E 02 FB | 	rdlong	local01, fp
0672c     18 4E 85 F1 | 	sub	fp, #24
06730     A7 1E 62 FC | 	wrlong	local01, fp
06734     04 4E 05 F1 | 	add	fp, #4
06738     A7 1E 02 FB | 	rdlong	local01, fp
0673c     10 4E 85 F1 | 	sub	fp, #16
06740     A7 16 02 FB | 	rdlong	arg03, fp
06744     04 4E 85 F1 | 	sub	fp, #4
06748     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0674c     28 4E 05 C1 |  if_b	add	fp, #40
06750     A7 20 02 CB |  if_b	rdlong	local02, fp
06754     28 4E 85 C1 |  if_b	sub	fp, #40
06758     FF FF 3F CF 
0675c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06760     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
06764     0B 00 00 FF 
06768     CC E4 85 F1 | 	sub	objptr, ##5836
0676c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
0676c     14 4E 05 F1 | 	add	fp, #20
06770     A7 1E 02 FB | 	rdlong	local01, fp
06774     10 4E 85 F1 | 	sub	fp, #16
06778     A7 20 02 FB | 	rdlong	local02, fp
0677c     04 4E 85 F1 | 	sub	fp, #4
06780     10 1F 0A F2 | 	cmp	local01, local02 wz
06784     01 FA 65 56 |  if_ne	neg	result1, #1
06788     34 02 90 5D |  if_ne	jmp	#LR__0565
0678c     08 4E 05 F1 | 	add	fp, #8
06790     A7 12 02 FB | 	rdlong	arg01, fp
06794     08 4E 85 F1 | 	sub	fp, #8
06798     01 14 66 F6 | 	neg	arg02, #1
0679c     78 6C B1 FD | 	call	#_pslpoke
067a0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
067a0                 | ' 
067a0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
067a0     28 4E 05 F1 | 	add	fp, #40
067a4     A7 1E 02 FB | 	rdlong	local01, fp
067a8     28 4E 85 F1 | 	sub	fp, #40
067ac     FF FF 3F FF 
067b0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
067b4     24 4E 05 A1 |  if_e	add	fp, #36
067b8     A7 20 02 AB |  if_e	rdlong	local02, fp
067bc     24 4E 85 A1 |  if_e	sub	fp, #36
067c0     FF FF 7F AF 
067c4     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
067c8     88 00 90 5D |  if_ne	jmp	#LR__0561
067cc     4A 00 00 FF 
067d0     88 E4 05 F1 | 	add	objptr, ##38024
067d4     00 04 80 FF 
067d8     F2 00 68 FC | 	wrlong	##524288, objptr
067dc     07 00 00 FF 
067e0     2C E4 85 F1 | 	sub	objptr, ##3628
067e4     00 04 80 FF 
067e8     F2 00 68 FC | 	wrlong	##524288, objptr
067ec     07 00 00 FF 
067f0     30 E4 05 F1 | 	add	objptr, ##3632
067f4     F2 00 68 FC | 	wrlong	#0, objptr
067f8     04 E4 05 F1 | 	add	objptr, #4
067fc     FF FF FF FF 
06800     F2 FE 6B FC | 	wrlong	##-1, objptr
06804     4A 00 00 FF 
06808     90 E4 85 F1 | 	sub	objptr, ##38032
0680c     00 12 06 F6 | 	mov	arg01, #0
06810     01 14 66 F6 | 	neg	arg02, #1
06814     00 6C B1 FD | 	call	#_pslpoke
06818     10 12 06 F6 | 	mov	arg01, #16
0681c     01 14 66 F6 | 	neg	arg02, #1
06820     F4 6B B1 FD | 	call	#_pslpoke
06824     14 12 06 F6 | 	mov	arg01, #20
06828     1E 14 CE F9 | 	bmask	arg02, #30
0682c     E8 6B B1 FD | 	call	#_pslpoke
06830     50 00 00 FF 
06834     B8 E4 05 F1 | 	add	objptr, ##41144
06838     00 04 80 FF 
0683c     F2 00 68 FC | 	wrlong	##524288, objptr
06840     04 E4 05 F1 | 	add	objptr, #4
06844     00 04 80 FF 
06848     F2 00 68 FC | 	wrlong	##524288, objptr
0684c     50 00 00 FF 
06850     BC E4 85 F1 | 	sub	objptr, ##41148
06854                 | LR__0561
06854                 | ' 
06854                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06854     28 4E 05 F1 | 	add	fp, #40
06858     A7 1E 02 FB | 	rdlong	local01, fp
0685c     28 4E 85 F1 | 	sub	fp, #40
06860     FF FF 3F FF 
06864     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06868     74 00 90 5D |  if_ne	jmp	#LR__0562
0686c     24 4E 05 F1 | 	add	fp, #36
06870     A7 20 02 FB | 	rdlong	local02, fp
06874     24 4E 85 F1 | 	sub	fp, #36
06878     FF FF 7F FF 
0687c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06880     5C 00 90 AD |  if_e	jmp	#LR__0562
06884     24 4E 05 F1 | 	add	fp, #36
06888     A7 12 02 FB | 	rdlong	arg01, fp
0688c     24 4E 85 F1 | 	sub	fp, #36
06890     14 12 06 F1 | 	add	arg01, #20
06894     1E 14 CE F9 | 	bmask	arg02, #30
06898     7C 6B B1 FD | 	call	#_pslpoke
0689c     24 4E 05 F1 | 	add	fp, #36
068a0     A7 1E 02 FB | 	rdlong	local01, fp
068a4     4A 00 00 FF 
068a8     90 E4 05 F1 | 	add	objptr, ##38032
068ac     F2 1E 62 FC | 	wrlong	local01, objptr
068b0     4A 00 00 FF 
068b4     90 E4 85 F1 | 	sub	objptr, ##38032
068b8     A7 12 02 FB | 	rdlong	arg01, fp
068bc     24 4E 85 F1 | 	sub	fp, #36
068c0     84 6C B1 FD | 	call	#_pslpeek
068c4     4A 00 00 FF 
068c8     8C E4 05 F1 | 	add	objptr, ##38028
068cc     F2 FA 61 FC | 	wrlong	result1, objptr
068d0     4A 00 00 FF 
068d4     8C E4 85 F1 | 	sub	objptr, ##38028
068d8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
068d8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
068d8                 | '   lastline=pslpeek(header(4))
068d8                 | '   return 0
068d8     00 FA 05 F6 | 	mov	result1, #0
068dc     E0 00 90 FD | 	jmp	#LR__0565
068e0                 | LR__0562
068e0                 | ' 
068e0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
068e0     28 4E 05 F1 | 	add	fp, #40
068e4     A7 1E 02 FB | 	rdlong	local01, fp
068e8     28 4E 85 F1 | 	sub	fp, #40
068ec     FF FF 3F FF 
068f0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
068f4     58 00 90 AD |  if_e	jmp	#LR__0563
068f8     24 4E 05 F1 | 	add	fp, #36
068fc     A7 20 02 FB | 	rdlong	local02, fp
06900     24 4E 85 F1 | 	sub	fp, #36
06904     FF FF 7F FF 
06908     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0690c     40 00 90 5D |  if_ne	jmp	#LR__0563
06910     28 4E 05 F1 | 	add	fp, #40
06914     A7 12 02 FB | 	rdlong	arg01, fp
06918     28 4E 85 F1 | 	sub	fp, #40
0691c     10 12 06 F1 | 	add	arg01, #16
06920     01 14 66 F6 | 	neg	arg02, #1
06924     F0 6A B1 FD | 	call	#_pslpoke
06928     28 4E 05 F1 | 	add	fp, #40
0692c     A7 1E 02 FB | 	rdlong	local01, fp
06930     28 4E 85 F1 | 	sub	fp, #40
06934     4A 00 00 FF 
06938     88 E4 05 F1 | 	add	objptr, ##38024
0693c     F2 1E 62 FC | 	wrlong	local01, objptr
06940     4A 00 00 FF 
06944     88 E4 85 F1 | 	sub	objptr, ##38024
06948                 | ' '   print "deleted first line"
06948                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06948                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06948                 | '   return 0
06948     00 FA 05 F6 | 	mov	result1, #0
0694c     70 00 90 FD | 	jmp	#LR__0565
06950                 | LR__0563
06950                 | ' 
06950                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06950     28 4E 05 F1 | 	add	fp, #40
06954     A7 1E 02 FB | 	rdlong	local01, fp
06958     28 4E 85 F1 | 	sub	fp, #40
0695c     FF FF 3F FF 
06960     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06964     24 4E 05 51 |  if_ne	add	fp, #36
06968     A7 20 02 5B |  if_ne	rdlong	local02, fp
0696c     24 4E 85 51 |  if_ne	sub	fp, #36
06970     FF FF 7F 5F 
06974     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
06978     40 00 90 AD |  if_e	jmp	#LR__0564
0697c     28 4E 05 F1 | 	add	fp, #40
06980     A7 12 02 FB | 	rdlong	arg01, fp
06984     10 12 06 F1 | 	add	arg01, #16
06988     04 4E 85 F1 | 	sub	fp, #4
0698c     A7 14 02 FB | 	rdlong	arg02, fp
06990     24 4E 85 F1 | 	sub	fp, #36
06994     80 6A B1 FD | 	call	#_pslpoke
06998     24 4E 05 F1 | 	add	fp, #36
0699c     A7 12 02 FB | 	rdlong	arg01, fp
069a0     14 12 06 F1 | 	add	arg01, #20
069a4     04 4E 05 F1 | 	add	fp, #4
069a8     A7 14 02 FB | 	rdlong	arg02, fp
069ac     28 4E 85 F1 | 	sub	fp, #40
069b0     64 6A B1 FD | 	call	#_pslpoke
069b4                 | '    pslpoke(header(5)+16,header(4))  
069b4                 | '    pslpoke(header(4)+20, header(5))
069b4                 | '    return 0
069b4     00 FA 05 F6 | 	mov	result1, #0
069b8     04 00 90 FD | 	jmp	#LR__0565
069bc                 | LR__0564
069bc     00 FA 05 F6 | 	mov	result1, #0
069c0                 | LR__0565
069c0     A7 F0 03 F6 | 	mov	ptra, fp
069c4     B2 00 A0 FD | 	call	#popregs_
069c8                 | _deleteline_ret
069c8     2D 00 64 FD | 	ret
069cc                 | 
069cc                 | ' 
069cc                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
069cc                 | ' 
069cc                 | ' sub save_line
069cc                 | _save_line
069cc     03 4A 05 F6 | 	mov	COUNT_, #3
069d0     A8 00 A0 FD | 	call	#pushregs_
069d4     4A 00 00 FF 
069d8     7C E4 05 F1 | 	add	objptr, ##38012
069dc     F2 16 02 FB | 	rdlong	arg03, objptr
069e0     01 16 06 F1 | 	add	arg03, #1
069e4     05 00 00 FF 
069e8     18 E4 85 F1 | 	sub	objptr, ##2584
069ec     F2 14 02 FB | 	rdlong	arg02, objptr
069f0     0B 15 02 FD | 	qmul	arg02, arg03
069f4     0E 00 00 FF 
069f8     44 E4 85 F1 | 	sub	objptr, ##7236
069fc     F2 12 02 FB | 	rdlong	arg01, objptr
06a00     37 00 00 FF 
06a04     20 E4 85 F1 | 	sub	objptr, ##28192
06a08     09 1F 02 F6 | 	mov	local01, arg01
06a0c     18 20 62 FD | 	getqx	local02
06a10     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06a14                 | LR__0570
06a14     0F FB C9 FA | 	rdbyte	result1, local01 wz
06a18     01 1E 06 51 |  if_ne	add	local01, #1
06a1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06a20                 | LR__0571
06a20     09 1F 82 F1 | 	sub	local01, arg01
06a24     03 1E CE F7 | 	test	local01, #3 wz
06a28     02 1E 46 50 |  if_ne	shr	local01, #2
06a2c     01 1E 06 51 |  if_ne	add	local01, #1
06a30     02 1E 66 50 |  if_ne	shl	local01, #2
06a34     10 23 02 F6 | 	mov	local03, local02
06a38     0F 23 02 F1 | 	add	local03, local01
06a3c     43 00 00 FF 
06a40     5C E4 05 F1 | 	add	objptr, ##34396
06a44     F2 16 02 FB | 	rdlong	arg03, objptr
06a48     10 17 02 F1 | 	add	arg03, local02
06a4c     04 00 00 FF 
06a50     28 E4 05 F1 | 	add	objptr, ##2088
06a54     F2 16 62 FC | 	wrlong	arg03, objptr
06a58     04 E4 05 F1 | 	add	objptr, #4
06a5c     F2 1E 62 FC | 	wrlong	local01, objptr
06a60     0C E4 85 F1 | 	sub	objptr, #12
06a64     F2 12 02 F6 | 	mov	arg01, objptr
06a68     04 00 00 FF 
06a6c     20 E4 85 F1 | 	sub	objptr, ##2080
06a70     F2 14 02 FB | 	rdlong	arg02, objptr
06a74     10 17 02 F6 | 	mov	arg03, local02
06a78     37 00 00 FF 
06a7c     90 E5 85 F1 | 	sub	objptr, ##28560
06a80     1C 92 B1 FD | 	call	#_psram_spin2_write
06a84     2B 00 00 FF 
06a88     54 E5 05 F1 | 	add	objptr, ##22356
06a8c     F2 12 02 FB | 	rdlong	arg01, objptr
06a90     0C 00 00 FF 
06a94     3C E4 05 F1 | 	add	objptr, ##6204
06a98     F2 14 02 FB | 	rdlong	arg02, objptr
06a9c     10 15 02 F1 | 	add	arg02, local02
06aa0     0F 17 02 F6 | 	mov	arg03, local01
06aa4     37 00 00 FF 
06aa8     90 E5 85 F1 | 	sub	objptr, ##28560
06aac     F0 91 B1 FD | 	call	#_psram_spin2_write
06ab0     37 00 00 FF 
06ab4     90 E5 05 F1 | 	add	objptr, ##28560
06ab8     F2 1E 02 FB | 	rdlong	local01, objptr
06abc     11 1F 02 F1 | 	add	local01, local03
06ac0     F2 1E 62 FC | 	wrlong	local01, objptr
06ac4     43 00 00 FF 
06ac8     5C E4 85 F1 | 	sub	objptr, ##34396
06acc     A7 F0 03 F6 | 	mov	ptra, fp
06ad0     B2 00 A0 FD | 	call	#popregs_
06ad4                 | _save_line_ret
06ad4     2D 00 64 FD | 	ret
06ad8                 | 
06ad8                 | ' 
06ad8                 | ' '----- Insert a new line into the middle of the program
06ad8                 | ' 
06ad8                 | ' function insertline(aline as ulong) as integer
06ad8                 | _insertline
06ad8     02 4A 05 F6 | 	mov	COUNT_, #2
06adc     A8 00 A0 FD | 	call	#pushregs_
06ae0     28 F0 07 F1 | 	add	ptra, #40
06ae4     04 4E 05 F1 | 	add	fp, #4
06ae8     A7 12 62 FC | 	wrlong	arg01, fp
06aec     4A 00 00 FF 
06af0     88 E4 05 F1 | 	add	objptr, ##38024
06af4     F2 1E 02 FB | 	rdlong	local01, objptr
06af8     04 4E 05 F1 | 	add	fp, #4
06afc     A7 1E 62 FC | 	wrlong	local01, fp
06b00     08 4E 85 F1 | 	sub	fp, #8
06b04                 | ' 
06b04                 | ' do
06b04     3E 00 00 FF 
06b08     BC E5 85 F1 | 	sub	objptr, ##32188
06b0c                 | LR__0580
06b0c     10 4E 05 F1 | 	add	fp, #16
06b10     A7 12 02 F6 | 	mov	arg01, fp
06b14     08 4E 85 F1 | 	sub	fp, #8
06b18     A7 14 02 FB | 	rdlong	arg02, fp
06b1c     08 4E 85 F1 | 	sub	fp, #8
06b20     18 16 06 F6 | 	mov	arg03, #24
06b24     DC 90 B1 FD | 	call	#_psram_spin2_read1
06b28     08 4E 05 F1 | 	add	fp, #8
06b2c     A7 1E 02 FB | 	rdlong	local01, fp
06b30     04 4E 05 F1 | 	add	fp, #4
06b34     A7 1E 62 FC | 	wrlong	local01, fp
06b38     18 4E 05 F1 | 	add	fp, #24
06b3c     A7 1E 02 FB | 	rdlong	local01, fp
06b40     1C 4E 85 F1 | 	sub	fp, #28
06b44     A7 1E 62 FC | 	wrlong	local01, fp
06b48     08 4E 05 F1 | 	add	fp, #8
06b4c     A7 1E 02 FB | 	rdlong	local01, fp
06b50     0C 4E 85 F1 | 	sub	fp, #12
06b54     A7 16 02 FB | 	rdlong	arg03, fp
06b58     04 4E 85 F1 | 	sub	fp, #4
06b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b60     24 4E 05 C1 |  if_b	add	fp, #36
06b64     A7 20 02 CB |  if_b	rdlong	local02, fp
06b68     24 4E 85 C1 |  if_b	sub	fp, #36
06b6c     FF FF 3F CF 
06b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06b78     0B 00 00 FF 
06b7c     CC E4 85 F1 | 	sub	objptr, ##5836
06b80                 | ' 
06b80                 | ' if header(0)=aline then return -1 				' delete it first
06b80     10 4E 05 F1 | 	add	fp, #16
06b84     A7 1E 02 FB | 	rdlong	local01, fp
06b88     0C 4E 85 F1 | 	sub	fp, #12
06b8c     A7 20 02 FB | 	rdlong	local02, fp
06b90     04 4E 85 F1 | 	sub	fp, #4
06b94     10 1F 0A F2 | 	cmp	local01, local02 wz
06b98     01 FA 65 A6 |  if_e	neg	result1, #1
06b9c     48 01 90 AD |  if_e	jmp	#LR__0583
06ba0                 | ' if header(0)<aline then return -2 				' end of program reached
06ba0     10 4E 05 F1 | 	add	fp, #16
06ba4     A7 1E 02 FB | 	rdlong	local01, fp
06ba8     0C 4E 85 F1 | 	sub	fp, #12
06bac     A7 16 02 FB | 	rdlong	arg03, fp
06bb0     04 4E 85 F1 | 	sub	fp, #4
06bb4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06bb8     02 FA 65 C6 |  if_b	neg	result1, #2
06bbc     28 01 90 CD |  if_b	jmp	#LR__0583
06bc0                 | ' 
06bc0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06bc0     20 4E 05 F1 | 	add	fp, #32
06bc4     A7 1E 02 FB | 	rdlong	local01, fp
06bc8     20 4E 85 F1 | 	sub	fp, #32
06bcc     FF FF 7F FF 
06bd0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06bd4     78 00 90 5D |  if_ne	jmp	#LR__0581
06bd8     43 00 00 FF 
06bdc     5C E4 05 F1 | 	add	objptr, ##34396
06be0     F2 1E 02 FB | 	rdlong	local01, objptr
06be4     07 00 00 FF 
06be8     2C E4 05 F1 | 	add	objptr, ##3628
06bec     F2 1E 62 FC | 	wrlong	local01, objptr
06bf0     0C 4E 05 F1 | 	add	fp, #12
06bf4     A7 12 02 FB | 	rdlong	arg01, fp
06bf8     0C 4E 85 F1 | 	sub	fp, #12
06bfc     10 12 06 F1 | 	add	arg01, #16
06c00     07 00 00 FF 
06c04     2C E4 85 F1 | 	sub	objptr, ##3628
06c08     F2 14 02 FB | 	rdlong	arg02, objptr
06c0c     43 00 00 FF 
06c10     5C E4 85 F1 | 	sub	objptr, ##34396
06c14     00 68 B1 FD | 	call	#_pslpoke
06c18     47 00 00 FF 
06c1c     8C E4 05 F1 | 	add	objptr, ##36492
06c20     FF FF FF FF 
06c24     F2 FE 6B FC | 	wrlong	##-1, objptr
06c28     0C 4E 05 F1 | 	add	fp, #12
06c2c     A7 1E 02 FB | 	rdlong	local01, fp
06c30     0C 4E 85 F1 | 	sub	fp, #12
06c34     04 E4 05 F1 | 	add	objptr, #4
06c38     F2 1E 62 FC | 	wrlong	local01, objptr
06c3c     47 00 00 FF 
06c40     90 E4 85 F1 | 	sub	objptr, ##36496
06c44     84 FD BF FD | 	call	#_save_line
06c48                 | '   programstart=programptr
06c48                 | '   pslpoke(lineptr2+16,programptr)
06c48                 | '   ucompiledline(4)=$FFFF_FFFF
06c48                 | '   ucompiledline(5)=lineptr2
06c48                 | '   save_line
06c48                 | '   return 0
06c48     00 FA 05 F6 | 	mov	result1, #0
06c4c     98 00 90 FD | 	jmp	#LR__0583
06c50                 | LR__0581
06c50                 | ' 
06c50                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06c50     20 4E 05 F1 | 	add	fp, #32
06c54     A7 1E 02 FB | 	rdlong	local01, fp
06c58     20 4E 85 F1 | 	sub	fp, #32
06c5c     FF FF 7F FF 
06c60     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06c64     7C 00 90 AD |  if_e	jmp	#LR__0582
06c68     20 4E 05 F1 | 	add	fp, #32
06c6c     A7 1E 02 FB | 	rdlong	local01, fp
06c70     47 00 00 FF 
06c74     8C E4 05 F1 | 	add	objptr, ##36492
06c78     F2 1E 62 FC | 	wrlong	local01, objptr
06c7c     14 4E 85 F1 | 	sub	fp, #20
06c80     A7 1E 02 FB | 	rdlong	local01, fp
06c84     04 E4 05 F1 | 	add	objptr, #4
06c88     F2 1E 62 FC | 	wrlong	local01, objptr
06c8c     A7 12 02 FB | 	rdlong	arg01, fp
06c90     0C 4E 85 F1 | 	sub	fp, #12
06c94     10 12 06 F1 | 	add	arg01, #16
06c98     04 00 00 FF 
06c9c     34 E4 85 F1 | 	sub	objptr, ##2100
06ca0     F2 14 02 FB | 	rdlong	arg02, objptr
06ca4     43 00 00 FF 
06ca8     5C E4 85 F1 | 	sub	objptr, ##34396
06cac     68 67 B1 FD | 	call	#_pslpoke
06cb0     20 4E 05 F1 | 	add	fp, #32
06cb4     A7 12 02 FB | 	rdlong	arg01, fp
06cb8     20 4E 85 F1 | 	sub	fp, #32
06cbc     14 12 06 F1 | 	add	arg01, #20
06cc0     43 00 00 FF 
06cc4     5C E4 05 F1 | 	add	objptr, ##34396
06cc8     F2 14 02 FB | 	rdlong	arg02, objptr
06ccc     43 00 00 FF 
06cd0     5C E4 85 F1 | 	sub	objptr, ##34396
06cd4     40 67 B1 FD | 	call	#_pslpoke
06cd8     F0 FC BF FD | 	call	#_save_line
06cdc                 | '   ucompiledline(4)=header(4)
06cdc                 | '   ucompiledline(5)=lineptr2
06cdc                 | '   pslpoke(lineptr2+16,programptr)
06cdc                 | '   pslpoke(header(4)+20,programptr)
06cdc                 | '   save_line
06cdc                 | '   return 0
06cdc     00 FA 05 F6 | 	mov	result1, #0
06ce0     04 00 90 FD | 	jmp	#LR__0583
06ce4                 | LR__0582
06ce4     00 FA 05 F6 | 	mov	result1, #0
06ce8                 | LR__0583
06ce8     A7 F0 03 F6 | 	mov	ptra, fp
06cec     B2 00 A0 FD | 	call	#popregs_
06cf0                 | _insertline_ret
06cf0     2D 00 64 FD | 	ret
06cf4                 | 
06cf4                 | ' 
06cf4                 | ' '----- Adds a new line at the end of the program
06cf4                 | ' 
06cf4                 | ' sub add_line_at_end(aline) 
06cf4                 | _add_line_at_end
06cf4     4A 00 00 FF 
06cf8     8C E4 05 F1 | 	add	objptr, ##38028
06cfc     F2 12 62 FC | 	wrlong	arg01, objptr
06d00     04 E4 05 F1 | 	add	objptr, #4
06d04     F2 14 02 FB | 	rdlong	arg02, objptr
06d08     03 00 00 FF 
06d0c     04 E4 85 F1 | 	sub	objptr, ##1540
06d10     F2 14 62 FC | 	wrlong	arg02, objptr
06d14     03 00 00 FF 
06d18     04 E4 05 F1 | 	add	objptr, ##1540
06d1c     F2 12 02 FB | 	rdlong	arg01, objptr
06d20     14 12 06 F1 | 	add	arg01, #20
06d24     07 00 00 FF 
06d28     34 E4 85 F1 | 	sub	objptr, ##3636
06d2c     F2 14 02 FB | 	rdlong	arg02, objptr
06d30     43 00 00 FF 
06d34     5C E4 85 F1 | 	sub	objptr, ##34396
06d38     DC 66 B1 FD | 	call	#_pslpoke
06d3c     43 00 00 FF 
06d40     5C E4 05 F1 | 	add	objptr, ##34396
06d44     F2 14 02 FB | 	rdlong	arg02, objptr
06d48     07 00 00 FF 
06d4c     34 E4 05 F1 | 	add	objptr, ##3636
06d50     F2 14 62 FC | 	wrlong	arg02, objptr
06d54     03 00 00 FF 
06d58     00 E4 85 F1 | 	sub	objptr, ##1536
06d5c     FF FF BF FF 
06d60     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06d64                 | ' 
06d64                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06d64                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06d64     04 00 00 FF 
06d68     34 E4 85 F1 | 	sub	objptr, ##2100
06d6c     F2 14 02 FB | 	rdlong	arg02, objptr
06d70     43 00 00 FF 
06d74     5C E4 85 F1 | 	sub	objptr, ##34396
06d78     00 04 00 FF 
06d7c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06d80     47 00 00 AF 
06d84     8C E4 05 A1 |  if_e	add	objptr, ##36492
06d88     FF FF FF AF 
06d8c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06d90     47 00 00 AF 
06d94     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06d98     30 FC BF FD | 	call	#_save_line
06d9c     43 00 00 FF 
06da0     5C E4 05 F1 | 	add	objptr, ##34396
06da4     F2 12 02 FB | 	rdlong	arg01, objptr
06da8     43 00 00 FF 
06dac     5C E4 85 F1 | 	sub	objptr, ##34396
06db0     01 14 66 F6 | 	neg	arg02, #1
06db4     60 66 B1 FD | 	call	#_pslpoke
06db8                 | _add_line_at_end_ret
06db8     2D 00 64 FD | 	ret
06dbc                 | 
06dbc                 | ' 
06dbc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06dbc                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
06dbc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06dbc                 | ' 
06dbc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06dbc                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
06dbc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06dbc                 | ' 
06dbc                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
06dbc                 | ' 
06dbc                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
06dbc                 | _compile_immediate
06dbc     0A 4A 05 F6 | 	mov	COUNT_, #10
06dc0     A8 00 A0 FD | 	call	#pushregs_
06dc4                 | _compile_immediate_enter
06dc4     09 25 02 F6 | 	mov	local04, arg01
06dc8     0A 27 02 F6 | 	mov	local05, arg02
06dcc     00 28 06 F6 | 	mov	local06, #0
06dd0     00 2A 06 F6 | 	mov	local07, #0
06dd4     00 2C 06 F6 | 	mov	local08, #0
06dd8                 | ' 
06dd8                 | ' ' linetype=cont+1
06dd8                 | ' ' 1 : this is the first part of the line that will continue
06dd8                 | ' ' 2 - this is the continuation of the line
06dd8                 | ' ' 3 - this is the last continued line
06dd8                 | ' ' 4 - this is the one and only part
06dd8                 | ' ' 5 - continued after if/else
06dd8                 | ' 
06dd8                 | ' err=0
06dd8                 | ' cmd=0
06dd8                 | ' vars=0
06dd8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
06dd8     02 24 0E F2 | 	cmp	local04, #2 wz
06ddc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06de0     24 00 90 5D |  if_ne	jmp	#LR__0590
06de4     35 00 00 FF 
06de8     10 E4 05 F1 | 	add	objptr, ##27152
06dec     F2 2A 02 FB | 	rdlong	local07, objptr
06df0     01 2E 06 F6 | 	mov	local09, #1
06df4     02 00 00 FF 
06df8     34 E4 05 F1 | 	add	objptr, ##1076
06dfc     F2 02 68 FC | 	wrlong	#1, objptr
06e00     37 00 00 FF 
06e04     44 E4 85 F1 | 	sub	objptr, ##28228
06e08                 | LR__0590
06e08                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06e08     04 24 0E F2 | 	cmp	local04, #4 wz
06e0c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06e10     30 00 90 5D |  if_ne	jmp	#LR__0591
06e14     35 00 00 FF 
06e18     18 E4 05 F1 | 	add	objptr, ##27160
06e1c     F2 2A 02 FB | 	rdlong	local07, objptr
06e20     02 2E 06 F6 | 	mov	local09, #2
06e24     02 00 00 FF 
06e28     2C E4 05 F1 | 	add	objptr, ##1068
06e2c     F2 04 68 FC | 	wrlong	#2, objptr
06e30     13 00 00 FF 
06e34     38 E4 05 F1 | 	add	objptr, ##9784
06e38     F2 04 68 FC | 	wrlong	#2, objptr
06e3c     4A 00 00 FF 
06e40     7C E4 85 F1 | 	sub	objptr, ##38012
06e44                 | LR__0591
06e44                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
06e44     05 24 0E F2 | 	cmp	local04, #5 wz
06e48     40 00 90 5D |  if_ne	jmp	#LR__0592
06e4c     37 00 00 FF 
06e50     44 E4 05 F1 | 	add	objptr, ##28228
06e54     F2 FC 01 FB | 	rdlong	result2, objptr
06e58     FE 2E 02 F6 | 	mov	local09, result2
06e5c     03 2E 66 F0 | 	shl	local09, #3
06e60     02 00 00 FF 
06e64     38 E4 85 F1 | 	sub	objptr, ##1080
06e68     F2 2E 02 F1 | 	add	local09, objptr
06e6c     04 2E 06 F1 | 	add	local09, #4
06e70     17 2B 02 FB | 	rdlong	local07, local09
06e74     01 FC 05 F1 | 	add	result2, #1
06e78     02 00 00 FF 
06e7c     38 E4 05 F1 | 	add	objptr, ##1080
06e80     F2 FC 61 FC | 	wrlong	result2, objptr
06e84     37 00 00 FF 
06e88     44 E4 85 F1 | 	sub	objptr, ##28228
06e8c                 | LR__0592
06e8c                 | ' 
06e8c                 | ' 'print  "In compile_immediate cmd=:", cmd
06e8c                 | ' 451 select case cmd
06e8c     5C 2A 0E F2 | 	cmp	local07, #92 wz
06e90     80 02 90 AD |  if_e	jmp	#LR__0593
06e94     47 2A 0E F2 | 	cmp	local07, #71 wz
06e98     84 02 90 AD |  if_e	jmp	#LR__0594
06e9c     59 2A 0E F2 | 	cmp	local07, #89 wz
06ea0     8C 02 90 AD |  if_e	jmp	#LR__0595
06ea4     45 2A 0E F2 | 	cmp	local07, #69 wz
06ea8     94 02 90 AD |  if_e	jmp	#LR__0596
06eac     69 2A 0E F2 | 	cmp	local07, #105 wz
06eb0     9C 02 90 AD |  if_e	jmp	#LR__0597
06eb4     40 2A 0E F2 | 	cmp	local07, #64 wz
06eb8     28 06 90 AD |  if_e	jmp	#LR__0665
06ebc     B4 2A 0E F2 | 	cmp	local07, #180 wz
06ec0     98 02 90 AD |  if_e	jmp	#LR__0598
06ec4     49 2A 0E F2 | 	cmp	local07, #73 wz
06ec8     9C 02 90 AD |  if_e	jmp	#LR__0599
06ecc     50 2A 0E F2 | 	cmp	local07, #80 wz
06ed0     A0 02 90 AD |  if_e	jmp	#LR__0600
06ed4     AE 2A 0E F2 | 	cmp	local07, #174 wz
06ed8     A8 02 90 AD |  if_e	jmp	#LR__0601
06edc     B0 2A 0E F2 | 	cmp	local07, #176 wz
06ee0     AC 02 90 AD |  if_e	jmp	#LR__0602
06ee4     AF 2A 0E F2 | 	cmp	local07, #175 wz
06ee8     B0 02 90 AD |  if_e	jmp	#LR__0603
06eec     B1 2A 0E F2 | 	cmp	local07, #177 wz
06ef0     B4 02 90 AD |  if_e	jmp	#LR__0604
06ef4     68 2A 0E F2 | 	cmp	local07, #104 wz
06ef8     B8 02 90 AD |  if_e	jmp	#LR__0605
06efc     74 2A 0E F2 | 	cmp	local07, #116 wz
06f00     BC 02 90 AD |  if_e	jmp	#LR__0606
06f04     73 2A 0E F2 | 	cmp	local07, #115 wz
06f08     C4 02 90 AD |  if_e	jmp	#LR__0607
06f0c     6C 2A 0E F2 | 	cmp	local07, #108 wz
06f10     CC 02 90 AD |  if_e	jmp	#LR__0608
06f14     89 2A 0E F2 | 	cmp	local07, #137 wz
06f18     C8 05 90 AD |  if_e	jmp	#LR__0665
06f1c     72 2A 0E F2 | 	cmp	local07, #114 wz
06f20     CC 02 90 AD |  if_e	jmp	#LR__0609
06f24     5D 2A 0E F2 | 	cmp	local07, #93 wz
06f28     D0 02 90 AD |  if_e	jmp	#LR__0610
06f2c     96 2A 0E F2 | 	cmp	local07, #150 wz
06f30     D8 02 90 AD |  if_e	jmp	#LR__0611
06f34     43 2A 0E F2 | 	cmp	local07, #67 wz
06f38     DC 02 90 AD |  if_e	jmp	#LR__0612
06f3c     5A 2A 0E F2 | 	cmp	local07, #90 wz
06f40     E4 02 90 AD |  if_e	jmp	#LR__0613
06f44     AB 2A 0E F2 | 	cmp	local07, #171 wz
06f48     98 05 90 AD |  if_e	jmp	#LR__0665
06f4c     BD 2A 0E F2 | 	cmp	local07, #189 wz
06f50     E4 02 90 AD |  if_e	jmp	#LR__0614
06f54     BB 2A 0E F2 | 	cmp	local07, #187 wz
06f58     EC 02 90 AD |  if_e	jmp	#LR__0615
06f5c     4E 2A 0E F2 | 	cmp	local07, #78 wz
06f60     F4 02 90 AD |  if_e	jmp	#LR__0616
06f64     A9 2A 0E F2 | 	cmp	local07, #169 wz
06f68     08 03 90 AD |  if_e	jmp	#LR__0618
06f6c     46 2A 0E F2 | 	cmp	local07, #70 wz
06f70     1C 03 90 AD |  if_e	jmp	#LR__0620
06f74     71 2A 0E F2 | 	cmp	local07, #113 wz
06f78     24 03 90 AD |  if_e	jmp	#LR__0621
06f7c     60 2A 0E F2 | 	cmp	local07, #96 wz
06f80     28 03 90 AD |  if_e	jmp	#LR__0622
06f84     4A 2A 0E F2 | 	cmp	local07, #74 wz
06f88     2C 03 90 AD |  if_e	jmp	#LR__0623
06f8c     48 2A 0E F2 | 	cmp	local07, #72 wz
06f90     30 03 90 AD |  if_e	jmp	#LR__0624
06f94     58 2A 0E F2 | 	cmp	local07, #88 wz
06f98     38 03 90 AD |  if_e	jmp	#LR__0625
06f9c     5F 2A 0E F2 | 	cmp	local07, #95 wz
06fa0     40 03 90 AD |  if_e	jmp	#LR__0626
06fa4     8A 2A 0E F2 | 	cmp	local07, #138 wz
06fa8     44 03 90 AD |  if_e	jmp	#LR__0627
06fac     4C 2A 0E F2 | 	cmp	local07, #76 wz
06fb0     48 03 90 AD |  if_e	jmp	#LR__0628
06fb4     52 2A 0E F2 | 	cmp	local07, #82 wz
06fb8     50 03 90 AD |  if_e	jmp	#LR__0629
06fbc     97 2A 0E F2 | 	cmp	local07, #151 wz
06fc0     58 03 90 AD |  if_e	jmp	#LR__0630
06fc4     61 2A 0E F2 | 	cmp	local07, #97 wz
06fc8     5C 03 90 AD |  if_e	jmp	#LR__0631
06fcc     63 2A 0E F2 | 	cmp	local07, #99 wz
06fd0     60 03 90 AD |  if_e	jmp	#LR__0632
06fd4     41 2A 0E F2 | 	cmp	local07, #65 wz
06fd8     08 05 90 AD |  if_e	jmp	#LR__0665
06fdc     4B 2A 0E F2 | 	cmp	local07, #75 wz
06fe0     5C 03 90 AD |  if_e	jmp	#LR__0633
06fe4     B3 2A 0E F2 | 	cmp	local07, #179 wz
06fe8     60 03 90 AD |  if_e	jmp	#LR__0634
06fec     5E 2A 0E F2 | 	cmp	local07, #94 wz
06ff0     64 03 90 AD |  if_e	jmp	#LR__0635
06ff4     7C 2A 0E F2 | 	cmp	local07, #124 wz
06ff8     68 03 90 AD |  if_e	jmp	#LR__0636
06ffc     7D 2A 0E F2 | 	cmp	local07, #125 wz
07000     6C 03 90 AD |  if_e	jmp	#LR__0637
07004     7E 2A 0E F2 | 	cmp	local07, #126 wz
07008     70 03 90 AD |  if_e	jmp	#LR__0638
0700c     7F 2A 0E F2 | 	cmp	local07, #127 wz
07010     74 03 90 AD |  if_e	jmp	#LR__0639
07014     80 2A 0E F2 | 	cmp	local07, #128 wz
07018     78 03 90 AD |  if_e	jmp	#LR__0640
0701c     55 2A 0E F2 | 	cmp	local07, #85 wz
07020     7C 03 90 AD |  if_e	jmp	#LR__0641
07024     75 2A 0E F2 | 	cmp	local07, #117 wz
07028     80 03 90 AD |  if_e	jmp	#LR__0642
0702c     42 2A 0E F2 | 	cmp	local07, #66 wz
07030     88 03 90 AD |  if_e	jmp	#LR__0643
07034     95 2A 0E F2 | 	cmp	local07, #149 wz
07038     90 03 90 AD |  if_e	jmp	#LR__0644
0703c     AC 2A 0E F2 | 	cmp	local07, #172 wz
07040     A0 04 90 AD |  if_e	jmp	#LR__0665
07044     81 2A 0E F2 | 	cmp	local07, #129 wz
07048     8C 03 90 AD |  if_e	jmp	#LR__0645
0704c     44 2A 0E F2 | 	cmp	local07, #68 wz
07050     90 03 90 AD |  if_e	jmp	#LR__0646
07054     BC 2A 0E F2 | 	cmp	local07, #188 wz
07058     94 03 90 AD |  if_e	jmp	#LR__0647
0705c     88 2A 0E F2 | 	cmp	local07, #136 wz
07060     80 04 90 AD |  if_e	jmp	#LR__0665
07064     92 2A 0E F2 | 	cmp	local07, #146 wz
07068     94 03 90 AD |  if_e	jmp	#LR__0648
0706c     BE 2A 0E F2 | 	cmp	local07, #190 wz
07070     2C 05 90 AD |  if_e	jmp	#LR__0666
07074     AA 2A 0E F2 | 	cmp	local07, #170 wz
07078     68 04 90 AD |  if_e	jmp	#LR__0665
0707c     4D 2A 0E F2 | 	cmp	local07, #77 wz
07080     88 03 90 AD |  if_e	jmp	#LR__0649
07084     51 2A 0E F2 | 	cmp	local07, #81 wz
07088     90 03 90 AD |  if_e	jmp	#LR__0650
0708c     8E 2A 0E F2 | 	cmp	local07, #142 wz
07090     98 03 90 AD |  if_e	jmp	#LR__0651
07094     90 2A 0E F2 | 	cmp	local07, #144 wz
07098     9C 03 90 AD |  if_e	jmp	#LR__0652
0709c     8D 2A 0E F2 | 	cmp	local07, #141 wz
070a0     A0 03 90 AD |  if_e	jmp	#LR__0653
070a4     8C 2A 0E F2 | 	cmp	local07, #140 wz
070a8     A4 03 90 AD |  if_e	jmp	#LR__0654
070ac     91 2A 0E F2 | 	cmp	local07, #145 wz
070b0     A8 03 90 AD |  if_e	jmp	#LR__0655
070b4     8B 2A 0E F2 | 	cmp	local07, #139 wz
070b8     AC 03 90 AD |  if_e	jmp	#LR__0656
070bc     8F 2A 0E F2 | 	cmp	local07, #143 wz
070c0     B0 03 90 AD |  if_e	jmp	#LR__0657
070c4     B2 2A 0E F2 | 	cmp	local07, #178 wz
070c8     B4 03 90 AD |  if_e	jmp	#LR__0658
070cc     6D 2A 0E F2 | 	cmp	local07, #109 wz
070d0     BC 03 90 AD |  if_e	jmp	#LR__0659
070d4     70 2A 0E F2 | 	cmp	local07, #112 wz
070d8     08 04 90 AD |  if_e	jmp	#LR__0665
070dc     56 2A 0E F2 | 	cmp	local07, #86 wz
070e0     B8 03 90 AD |  if_e	jmp	#LR__0660
070e4     57 2A 0E F2 | 	cmp	local07, #87 wz
070e8     F8 03 90 AD |  if_e	jmp	#LR__0665
070ec     79 2A 0E F2 | 	cmp	local07, #121 wz
070f0     B4 03 90 AD |  if_e	jmp	#LR__0661
070f4     77 2A 0E F2 | 	cmp	local07, #119 wz
070f8     B8 03 90 AD |  if_e	jmp	#LR__0662
070fc     78 2A 0E F2 | 	cmp	local07, #120 wz
07100     BC 03 90 AD |  if_e	jmp	#LR__0663
07104     01 00 00 FF 
07108     04 2A 0E F2 | 	cmp	local07, ##516 wz
0710c     BC 03 90 AD |  if_e	jmp	#LR__0664
07110     8C 04 90 FD | 	jmp	#LR__0666
07114                 | LR__0593
07114     D8 0A B0 FD | 	call	#_compile_fun_2p
07118     FD 28 02 F6 | 	mov	local06, result1
0711c     C4 03 90 FD | 	jmp	#LR__0665
07120                 | LR__0594
07120     9C 0D B0 FD | 	call	#_compile_fun_varp
07124     FD 2C 02 F6 | 	mov	local08, result1
07128     FE 28 02 F6 | 	mov	local06, result2
0712c     B4 03 90 FD | 	jmp	#LR__0665
07130                 | LR__0595
07130     8C 0D B0 FD | 	call	#_compile_fun_varp
07134     FD 2C 02 F6 | 	mov	local08, result1
07138     FE 28 02 F6 | 	mov	local06, result2
0713c     A4 03 90 FD | 	jmp	#LR__0665
07140                 | LR__0596
07140     7C 0D B0 FD | 	call	#_compile_fun_varp
07144     FD 2C 02 F6 | 	mov	local08, result1
07148     FE 28 02 F6 | 	mov	local06, result2
0714c     94 03 90 FD | 	jmp	#LR__0665
07150                 | LR__0597
07150                 | ' return expr()
07150     4C 2A B0 FD | 	call	#_expr
07154     FD 28 02 F6 | 	mov	local06, result1
07158     88 03 90 FD | 	jmp	#LR__0665
0715c                 | LR__0598
0715c                 | ' return expr()
0715c     40 2A B0 FD | 	call	#_expr
07160     FD 28 02 F6 | 	mov	local06, result1
07164     7C 03 90 FD | 	jmp	#LR__0665
07168                 | LR__0599
07168                 | ' return expr()
07168     34 2A B0 FD | 	call	#_expr
0716c     FD 28 02 F6 | 	mov	local06, result1
07170     70 03 90 FD | 	jmp	#LR__0665
07174                 | LR__0600
07174     48 0D B0 FD | 	call	#_compile_fun_varp
07178     FD 2C 02 F6 | 	mov	local08, result1
0717c     FE 28 02 F6 | 	mov	local06, result2
07180     60 03 90 FD | 	jmp	#LR__0665
07184                 | LR__0601
07184     68 0A B0 FD | 	call	#_compile_fun_2p
07188     FD 28 02 F6 | 	mov	local06, result1
0718c     54 03 90 FD | 	jmp	#LR__0665
07190                 | LR__0602
07190     5C 0A B0 FD | 	call	#_compile_fun_2p
07194     FD 28 02 F6 | 	mov	local06, result1
07198     48 03 90 FD | 	jmp	#LR__0665
0719c                 | LR__0603
0719c     50 0A B0 FD | 	call	#_compile_fun_2p
071a0     FD 28 02 F6 | 	mov	local06, result1
071a4     3C 03 90 FD | 	jmp	#LR__0665
071a8                 | LR__0604
071a8     44 0A B0 FD | 	call	#_compile_fun_2p
071ac     FD 28 02 F6 | 	mov	local06, result1
071b0     30 03 90 FD | 	jmp	#LR__0665
071b4                 | LR__0605
071b4                 | ' return expr()
071b4     E8 29 B0 FD | 	call	#_expr
071b8     FD 28 02 F6 | 	mov	local06, result1
071bc     24 03 90 FD | 	jmp	#LR__0665
071c0                 | LR__0606
071c0     FC 0C B0 FD | 	call	#_compile_fun_varp
071c4     FD 2C 02 F6 | 	mov	local08, result1
071c8     FE 28 02 F6 | 	mov	local06, result2
071cc     14 03 90 FD | 	jmp	#LR__0665
071d0                 | LR__0607
071d0     EC 0C B0 FD | 	call	#_compile_fun_varp
071d4     FD 2C 02 F6 | 	mov	local08, result1
071d8     FE 28 02 F6 | 	mov	local06, result2
071dc     04 03 90 FD | 	jmp	#LR__0665
071e0                 | LR__0608
071e0     DC 0C B0 FD | 	call	#_compile_fun_varp
071e4     FD 2C 02 F6 | 	mov	local08, result1
071e8     FE 28 02 F6 | 	mov	local06, result2
071ec     F4 02 90 FD | 	jmp	#LR__0665
071f0                 | LR__0609
071f0     A0 19 B0 FD | 	call	#_compile_dim
071f4     FD 28 02 F6 | 	mov	local06, result1
071f8     A4 03 90 FD | 	jmp	#LR__0666
071fc                 | LR__0610
071fc     C0 0C B0 FD | 	call	#_compile_fun_varp
07200     FD 2C 02 F6 | 	mov	local08, result1
07204     FE 28 02 F6 | 	mov	local06, result2
07208     D8 02 90 FD | 	jmp	#LR__0665
0720c                 | LR__0611
0720c     E0 09 B0 FD | 	call	#_compile_fun_2p
07210     FD 28 02 F6 | 	mov	local06, result1
07214     CC 02 90 FD | 	jmp	#LR__0665
07218                 | LR__0612
07218     A4 0C B0 FD | 	call	#_compile_fun_varp
0721c     FD 2C 02 F6 | 	mov	local08, result1
07220     FE 28 02 F6 | 	mov	local06, result2
07224     BC 02 90 FD | 	jmp	#LR__0665
07228                 | LR__0613
07228     13 13 02 F6 | 	mov	arg01, local05
0722c     2C 18 B0 FD | 	call	#_compile_else
07230     FD 28 02 F6 | 	mov	local06, result1
07234     68 03 90 FD | 	jmp	#LR__0666
07238                 | LR__0614
07238     84 0C B0 FD | 	call	#_compile_fun_varp
0723c     FD 2C 02 F6 | 	mov	local08, result1
07240     FE 28 02 F6 | 	mov	local06, result2
07244     9C 02 90 FD | 	jmp	#LR__0665
07248                 | LR__0615
07248     74 0C B0 FD | 	call	#_compile_fun_varp
0724c     FD 2C 02 F6 | 	mov	local08, result1
07250     FE 28 02 F6 | 	mov	local06, result2
07254     8C 02 90 FD | 	jmp	#LR__0665
07258                 | LR__0616
07258     01 26 16 F2 | 	cmp	local05, #1 wc
0725c     08 00 90 CD |  if_b	jmp	#LR__0617
07260     4C 25 B0 FD | 	call	#_compile_goto
07264     38 03 90 FD | 	jmp	#LR__0666
07268                 | LR__0617
07268     19 12 06 F6 | 	mov	arg01, #25
0726c     44 60 B1 FD | 	call	#_printerror
07270     2C 03 90 FD | 	jmp	#LR__0666
07274                 | LR__0618
07274     01 26 16 F2 | 	cmp	local05, #1 wc
07278     08 00 90 CD |  if_b	jmp	#LR__0619
0727c     CC 24 B0 FD | 	call	#_compile_gosub
07280     1C 03 90 FD | 	jmp	#LR__0666
07284                 | LR__0619
07284     19 12 06 F6 | 	mov	arg01, #25
07288     28 60 B1 FD | 	call	#_printerror
0728c     10 03 90 FD | 	jmp	#LR__0666
07290                 | LR__0620
07290     2C 0C B0 FD | 	call	#_compile_fun_varp
07294     FD 2C 02 F6 | 	mov	local08, result1
07298     FE 28 02 F6 | 	mov	local06, result2
0729c     44 02 90 FD | 	jmp	#LR__0665
072a0                 | LR__0621
072a0     C4 0A B0 FD | 	call	#_compile_fun_4p
072a4     FD 28 02 F6 | 	mov	local06, result1
072a8     38 02 90 FD | 	jmp	#LR__0665
072ac                 | LR__0622
072ac                 | ' return expr()
072ac     F0 28 B0 FD | 	call	#_expr
072b0     FD 28 02 F6 | 	mov	local06, result1
072b4     2C 02 90 FD | 	jmp	#LR__0665
072b8                 | LR__0623
072b8     B4 1F B0 FD | 	call	#_compile_for
072bc     FD 28 02 F6 | 	mov	local06, result1
072c0     DC 02 90 FD | 	jmp	#LR__0666
072c4                 | LR__0624
072c4     F8 0B B0 FD | 	call	#_compile_fun_varp
072c8     FD 2C 02 F6 | 	mov	local08, result1
072cc     FE 28 02 F6 | 	mov	local06, result2
072d0     10 02 90 FD | 	jmp	#LR__0665
072d4                 | LR__0625
072d4     13 13 02 F6 | 	mov	arg01, local05
072d8     F8 15 B0 FD | 	call	#_compile_if
072dc     FD 28 02 F6 | 	mov	local06, result1
072e0     BC 02 90 FD | 	jmp	#LR__0666
072e4                 | LR__0626
072e4                 | ' return expr()
072e4     B8 28 B0 FD | 	call	#_expr
072e8     FD 28 02 F6 | 	mov	local06, result1
072ec     F4 01 90 FD | 	jmp	#LR__0665
072f0                 | LR__0627
072f0                 | ' return expr()
072f0     AC 28 B0 FD | 	call	#_expr
072f4     FD 28 02 F6 | 	mov	local06, result1
072f8     E8 01 90 FD | 	jmp	#LR__0665
072fc                 | LR__0628
072fc     C0 0B B0 FD | 	call	#_compile_fun_varp
07300     FD 2C 02 F6 | 	mov	local08, result1
07304     FE 28 02 F6 | 	mov	local06, result2
07308     D8 01 90 FD | 	jmp	#LR__0665
0730c                 | LR__0629
0730c     B0 0B B0 FD | 	call	#_compile_fun_varp
07310     FD 2C 02 F6 | 	mov	local08, result1
07314     FE 28 02 F6 | 	mov	local06, result2
07318     C8 01 90 FD | 	jmp	#LR__0665
0731c                 | LR__0630
0731c     D0 08 B0 FD | 	call	#_compile_fun_2p
07320     FD 28 02 F6 | 	mov	local06, result1
07324     BC 01 90 FD | 	jmp	#LR__0665
07328                 | LR__0631
07328                 | ' return expr()
07328     74 28 B0 FD | 	call	#_expr
0732c     FD 28 02 F6 | 	mov	local06, result1
07330     B0 01 90 FD | 	jmp	#LR__0665
07334                 | LR__0632
07334                 | ' return expr()
07334     68 28 B0 FD | 	call	#_expr
07338     FD 28 02 F6 | 	mov	local06, result1
0733c     A4 01 90 FD | 	jmp	#LR__0665
07340                 | LR__0633
07340     70 22 B0 FD | 	call	#_compile_next
07344     FD 28 02 F6 | 	mov	local06, result1
07348     54 02 90 FD | 	jmp	#LR__0666
0734c                 | LR__0634
0734c     28 09 B0 FD | 	call	#_compile_fun_3p
07350     FD 28 02 F6 | 	mov	local06, result1
07354     8C 01 90 FD | 	jmp	#LR__0665
07358                 | LR__0635
07358                 | ' return expr()
07358     44 28 B0 FD | 	call	#_expr
0735c     FD 28 02 F6 | 	mov	local06, result1
07360     80 01 90 FD | 	jmp	#LR__0665
07364                 | LR__0636
07364                 | ' return expr()
07364     38 28 B0 FD | 	call	#_expr
07368     FD 28 02 F6 | 	mov	local06, result1
0736c     74 01 90 FD | 	jmp	#LR__0665
07370                 | LR__0637
07370                 | ' return expr()
07370     2C 28 B0 FD | 	call	#_expr
07374     FD 28 02 F6 | 	mov	local06, result1
07378     68 01 90 FD | 	jmp	#LR__0665
0737c                 | LR__0638
0737c                 | ' return expr()
0737c     20 28 B0 FD | 	call	#_expr
07380     FD 28 02 F6 | 	mov	local06, result1
07384     5C 01 90 FD | 	jmp	#LR__0665
07388                 | LR__0639
07388     DC 09 B0 FD | 	call	#_compile_fun_4p
0738c     FD 28 02 F6 | 	mov	local06, result1
07390     50 01 90 FD | 	jmp	#LR__0665
07394                 | LR__0640
07394                 | ' return expr()
07394     08 28 B0 FD | 	call	#_expr
07398     FD 28 02 F6 | 	mov	local06, result1
0739c     44 01 90 FD | 	jmp	#LR__0665
073a0                 | LR__0641
073a0     4C 08 B0 FD | 	call	#_compile_fun_2p
073a4     FD 28 02 F6 | 	mov	local06, result1
073a8     38 01 90 FD | 	jmp	#LR__0665
073ac                 | LR__0642
073ac     10 0B B0 FD | 	call	#_compile_fun_varp
073b0     FD 2C 02 F6 | 	mov	local08, result1
073b4     FE 28 02 F6 | 	mov	local06, result2
073b8     28 01 90 FD | 	jmp	#LR__0665
073bc                 | LR__0643
073bc     00 0B B0 FD | 	call	#_compile_fun_varp
073c0     FD 2C 02 F6 | 	mov	local08, result1
073c4     FE 28 02 F6 | 	mov	local06, result2
073c8     18 01 90 FD | 	jmp	#LR__0665
073cc                 | LR__0644
073cc     20 08 B0 FD | 	call	#_compile_fun_2p
073d0     FD 28 02 F6 | 	mov	local06, result1
073d4     0C 01 90 FD | 	jmp	#LR__0665
073d8                 | LR__0645
073d8     14 08 B0 FD | 	call	#_compile_fun_2p
073dc     FD 28 02 F6 | 	mov	local06, result1
073e0     00 01 90 FD | 	jmp	#LR__0665
073e4                 | LR__0646
073e4     14 0E B0 FD | 	call	#_compile_print
073e8     FD 28 02 F6 | 	mov	local06, result1
073ec     B0 01 90 FD | 	jmp	#LR__0666
073f0                 | LR__0647
073f0     CC 0A B0 FD | 	call	#_compile_fun_varp
073f4     FD 2C 02 F6 | 	mov	local08, result1
073f8     FE 28 02 F6 | 	mov	local06, result2
073fc     E4 00 90 FD | 	jmp	#LR__0665
07400                 | LR__0648
07400                 | ' return expr()
07400     9C 27 B0 FD | 	call	#_expr
07404     FD 28 02 F6 | 	mov	local06, result1
07408     D8 00 90 FD | 	jmp	#LR__0665
0740c                 | LR__0649
0740c     B0 0A B0 FD | 	call	#_compile_fun_varp
07410     FD 2C 02 F6 | 	mov	local08, result1
07414     FE 28 02 F6 | 	mov	local06, result2
07418     C8 00 90 FD | 	jmp	#LR__0665
0741c                 | LR__0650
0741c     A0 0A B0 FD | 	call	#_compile_fun_varp
07420     FD 2C 02 F6 | 	mov	local08, result1
07424     FE 28 02 F6 | 	mov	local06, result2
07428     B8 00 90 FD | 	jmp	#LR__0665
0742c                 | LR__0651
0742c     C0 07 B0 FD | 	call	#_compile_fun_2p
07430     FD 28 02 F6 | 	mov	local06, result1
07434     AC 00 90 FD | 	jmp	#LR__0665
07438                 | LR__0652
07438     B4 07 B0 FD | 	call	#_compile_fun_2p
0743c     FD 28 02 F6 | 	mov	local06, result1
07440     A0 00 90 FD | 	jmp	#LR__0665
07444                 | LR__0653
07444     A8 07 B0 FD | 	call	#_compile_fun_2p
07448     FD 28 02 F6 | 	mov	local06, result1
0744c     94 00 90 FD | 	jmp	#LR__0665
07450                 | LR__0654
07450     9C 07 B0 FD | 	call	#_compile_fun_2p
07454     FD 28 02 F6 | 	mov	local06, result1
07458     88 00 90 FD | 	jmp	#LR__0665
0745c                 | LR__0655
0745c     90 07 B0 FD | 	call	#_compile_fun_2p
07460     FD 28 02 F6 | 	mov	local06, result1
07464     7C 00 90 FD | 	jmp	#LR__0665
07468                 | LR__0656
07468     84 07 B0 FD | 	call	#_compile_fun_2p
0746c     FD 28 02 F6 | 	mov	local06, result1
07470     70 00 90 FD | 	jmp	#LR__0665
07474                 | LR__0657
07474     78 07 B0 FD | 	call	#_compile_fun_2p
07478     FD 28 02 F6 | 	mov	local06, result1
0747c     64 00 90 FD | 	jmp	#LR__0665
07480                 | LR__0658
07480     3C 0A B0 FD | 	call	#_compile_fun_varp
07484     FD 2C 02 F6 | 	mov	local08, result1
07488     FE 28 02 F6 | 	mov	local06, result2
0748c     54 00 90 FD | 	jmp	#LR__0665
07490                 | LR__0659
07490     E4 07 B0 FD | 	call	#_compile_fun_3p
07494     FD 28 02 F6 | 	mov	local06, result1
07498     48 00 90 FD | 	jmp	#LR__0665
0749c                 | LR__0660
0749c                 | ' return expr()
0749c     00 27 B0 FD | 	call	#_expr
074a0     FD 28 02 F6 | 	mov	local06, result1
074a4     3C 00 90 FD | 	jmp	#LR__0665
074a8                 | LR__0661
074a8     44 07 B0 FD | 	call	#_compile_fun_2p
074ac     FD 28 02 F6 | 	mov	local06, result1
074b0     30 00 90 FD | 	jmp	#LR__0665
074b4                 | LR__0662
074b4     38 07 B0 FD | 	call	#_compile_fun_2p
074b8     FD 28 02 F6 | 	mov	local06, result1
074bc     24 00 90 FD | 	jmp	#LR__0665
074c0                 | LR__0663
074c0     2C 07 B0 FD | 	call	#_compile_fun_2p
074c4     FD 28 02 F6 | 	mov	local06, result1
074c8     18 00 90 FD | 	jmp	#LR__0665
074cc                 | LR__0664
074cc     CC 0A B0 FD | 	call	#_compile_array_assign
074d0     FD 28 02 F6 | 	mov	local06, result1
074d4     0E 28 0E F2 | 	cmp	local06, #14 wz
074d8     C4 00 90 5D |  if_ne	jmp	#LR__0666
074dc                 | ' return 23
074dc     17 28 06 F6 | 	mov	local06, #23
074e0     BC 00 90 FD | 	jmp	#LR__0666
074e4                 | ' return 23
074e4                 | LR__0665
074e4     15 23 02 F6 | 	mov	local03, local07
074e8     16 1F 02 F6 | 	mov	local01, local08
074ec     0F 2F 02 F6 | 	mov	local09, local01
074f0     10 31 02 F6 | 	mov	local10, local02
074f4     11 2B 02 F6 | 	mov	local07, local03
074f8     4A 00 00 FF 
074fc     7C E4 05 F1 | 	add	objptr, ##38012
07500     F2 1E 02 FB | 	rdlong	local01, objptr
07504     0F 2D 02 F6 | 	mov	local08, local01
07508     01 2C 66 F0 | 	shl	local08, #1
0750c     0F 2D 02 F1 | 	add	local08, local01
07510     02 2C 66 F0 | 	shl	local08, #2
07514     03 00 00 FF 
07518     00 E4 85 F1 | 	sub	objptr, ##1536
0751c     F2 2C 02 F1 | 	add	local08, objptr
07520     16 2F 62 FC | 	wrlong	local09, local08
07524     03 00 00 FF 
07528     00 E4 05 F1 | 	add	objptr, ##1536
0752c     F2 1E 02 FB | 	rdlong	local01, objptr
07530     0F 2F 02 F6 | 	mov	local09, local01
07534     01 2E 66 F0 | 	shl	local09, #1
07538     0F 2F 02 F1 | 	add	local09, local01
0753c     02 2E 66 F0 | 	shl	local09, #2
07540     03 00 00 FF 
07544     00 E4 85 F1 | 	sub	objptr, ##1536
07548     F2 2E 02 F1 | 	add	local09, objptr
0754c     04 2E 06 F1 | 	add	local09, #4
07550     17 31 62 FC | 	wrlong	local10, local09
07554     03 00 00 FF 
07558     00 E4 05 F1 | 	add	objptr, ##1536
0755c     F2 1E 02 FB | 	rdlong	local01, objptr
07560     0F 31 02 F6 | 	mov	local10, local01
07564     01 30 66 F0 | 	shl	local10, #1
07568     0F 31 02 F1 | 	add	local10, local01
0756c     02 30 66 F0 | 	shl	local10, #2
07570     03 00 00 FF 
07574     00 E4 85 F1 | 	sub	objptr, ##1536
07578     F2 30 02 F1 | 	add	local10, objptr
0757c     08 30 06 F1 | 	add	local10, #8
07580     18 2B 62 FC | 	wrlong	local07, local10
07584     03 00 00 FF 
07588     00 E4 05 F1 | 	add	objptr, ##1536
0758c     F2 2E 02 FB | 	rdlong	local09, objptr
07590     01 2E 06 F1 | 	add	local09, #1
07594     F2 2E 62 FC | 	wrlong	local09, objptr
07598     4A 00 00 FF 
0759c     7C E4 85 F1 | 	sub	objptr, ##38012
075a0                 | LR__0666
075a0                 | ' 
075a0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
075a0                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
075a0     03 24 0E F2 | 	cmp	local04, #3 wz
075a4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
075a8     38 00 90 5D |  if_ne	jmp	#LR__0667
075ac     4A 00 00 FF 
075b0     7C E4 05 F1 | 	add	objptr, ##38012
075b4     F2 30 02 FB | 	rdlong	local10, objptr
075b8     18 1F 02 F6 | 	mov	local01, local10
075bc     01 1E 66 F0 | 	shl	local01, #1
075c0     18 1F 02 F1 | 	add	local01, local10
075c4     02 1E 66 F0 | 	shl	local01, #2
075c8     03 00 00 FF 
075cc     00 E4 85 F1 | 	sub	objptr, ##1536
075d0     F2 1E 02 F1 | 	add	local01, objptr
075d4     08 1E 06 F1 | 	add	local01, #8
075d8     0F FD 6B FC | 	wrlong	#510, local01
075dc     47 00 00 FF 
075e0     7C E4 85 F1 | 	sub	objptr, ##36476
075e4                 | LR__0667
075e4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
075e4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
075e4     4A 00 00 FF 
075e8     7C E4 05 F1 | 	add	objptr, ##38012
075ec     F2 1E 02 FB | 	rdlong	local01, objptr
075f0     4A 00 00 FF 
075f4     7C E4 85 F1 | 	sub	objptr, ##38012
075f8     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
075fc                 | LR__0668
075fc     0F 31 02 F6 | 	mov	local10, local01
07600     01 30 66 F0 | 	shl	local10, #1
07604     0F 31 02 F1 | 	add	local10, local01
07608     02 30 66 F0 | 	shl	local10, #2
0760c     47 00 00 FF 
07610     7C E4 05 F1 | 	add	objptr, ##36476
07614     F2 30 02 F1 | 	add	local10, objptr
07618     08 30 06 F1 | 	add	local10, #8
0761c     18 31 02 FB | 	rdlong	local10, local10
07620     9B 30 0E F2 | 	cmp	local10, #155 wz
07624     47 00 00 FF 
07628     7C E4 85 F1 | 	sub	objptr, ##36476
0762c     70 00 90 5D |  if_ne	jmp	#LR__0669
07630     0F 2F 02 F6 | 	mov	local09, local01
07634     01 2E 86 F1 | 	sub	local09, #1
07638     17 31 02 F6 | 	mov	local10, local09
0763c     01 30 66 F0 | 	shl	local10, #1
07640     17 31 02 F1 | 	add	local10, local09
07644     02 30 66 F0 | 	shl	local10, #2
07648     47 00 00 FF 
0764c     7C E4 05 F1 | 	add	objptr, ##36476
07650     F2 30 02 F1 | 	add	local10, objptr
07654     08 30 06 F1 | 	add	local10, #8
07658     18 31 02 FB | 	rdlong	local10, local10
0765c     11 30 0E F2 | 	cmp	local10, #17 wz
07660     47 00 00 FF 
07664     7C E4 85 F1 | 	sub	objptr, ##36476
07668     34 00 90 5D |  if_ne	jmp	#LR__0669
0766c     0F 2F 02 F6 | 	mov	local09, local01
07670     01 2E 86 F1 | 	sub	local09, #1
07674     17 31 02 F6 | 	mov	local10, local09
07678     01 30 66 F0 | 	shl	local10, #1
0767c     17 31 02 F1 | 	add	local10, local09
07680     02 30 66 F0 | 	shl	local10, #2
07684     47 00 00 FF 
07688     7C E4 05 F1 | 	add	objptr, ##36476
0768c     F2 30 02 F1 | 	add	local10, objptr
07690     08 30 06 F1 | 	add	local10, #8
07694     18 25 68 FC | 	wrlong	#18, local10
07698     47 00 00 FF 
0769c     7C E4 85 F1 | 	sub	objptr, ##36476
076a0                 | LR__0669
076a0     01 1E 86 F1 | 	sub	local01, #1
076a4     01 1E 56 F2 | 	cmps	local01, #1 wc
076a8     50 FF 9F 3D |  if_ae	jmp	#LR__0668
076ac                 | LR__0670
076ac                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
076ac                 | ' return err
076ac     14 FB 01 F6 | 	mov	result1, local06
076b0     A7 F0 03 F6 | 	mov	ptra, fp
076b4     B2 00 A0 FD | 	call	#popregs_
076b8                 | _compile_immediate_ret
076b8     2D 00 64 FD | 	ret
076bc                 | 
076bc                 | ' 
076bc                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
076bc                 | ' 
076bc                 | ' function compile_immediate_assign(linetype as ulong) as ulong
076bc                 | _compile_immediate_assign
076bc     0C 4A 05 F6 | 	mov	COUNT_, #12
076c0     A8 00 A0 FD | 	call	#pushregs_
076c4     09 25 02 F6 | 	mov	local04, arg01
076c8     FF 22 06 F6 | 	mov	local03, #255
076cc     01 26 66 F6 | 	neg	local05, #1
076d0     00 28 06 F6 | 	mov	local06, #0
076d4                 | ' 
076d4                 | ' t1.result_type=result_error : t1.result.uresult=0
076d4                 | ' i=-1: j=-1 : err=0
076d4                 | ' 
076d4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
076d4     02 24 0E F2 | 	cmp	local04, #2 wz
076d8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
076dc     35 00 00 AF 
076e0     0C E4 05 A1 |  if_e	add	objptr, ##27148
076e4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
076e8     02 00 00 AF 
076ec     38 E4 05 A1 |  if_e	add	objptr, ##1080
076f0     F2 04 68 AC |  if_e	wrlong	#2, objptr
076f4     37 00 00 AF 
076f8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
076fc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
076fc     04 24 0E F2 | 	cmp	local04, #4 wz
07700     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07704     2C 00 90 5D |  if_ne	jmp	#LR__0680
07708     35 00 00 FF 
0770c     14 E4 05 F1 | 	add	objptr, ##27156
07710     F2 2A 02 FB | 	rdlong	local07, objptr
07714     02 00 00 FF 
07718     30 E4 05 F1 | 	add	objptr, ##1072
0771c     F2 06 68 FC | 	wrlong	#3, objptr
07720     13 00 00 FF 
07724     38 E4 05 F1 | 	add	objptr, ##9784
07728     F2 04 68 FC | 	wrlong	#2, objptr
0772c     4A 00 00 FF 
07730     7C E4 85 F1 | 	sub	objptr, ##38012
07734                 | LR__0680
07734                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07734     05 24 0E F2 | 	cmp	local04, #5 wz
07738     3C 00 90 5D |  if_ne	jmp	#LR__0681
0773c     37 00 00 FF 
07740     44 E4 05 F1 | 	add	objptr, ##28228
07744     F2 FA 01 FB | 	rdlong	result1, objptr
07748     FD 2A 02 F6 | 	mov	local07, result1
0774c     03 2A 66 F0 | 	shl	local07, #3
07750     02 00 00 FF 
07754     38 E4 85 F1 | 	sub	objptr, ##1080
07758     F2 2A 02 F1 | 	add	local07, objptr
0775c     15 2B 02 FB | 	rdlong	local07, local07
07760     02 FA 05 F1 | 	add	result1, #2
07764     02 00 00 FF 
07768     38 E4 05 F1 | 	add	objptr, ##1080
0776c     F2 FA 61 FC | 	wrlong	result1, objptr
07770     37 00 00 FF 
07774     44 E4 85 F1 | 	sub	objptr, ##28228
07778                 | LR__0681
07778     15 13 02 F6 | 	mov	arg01, local07
0777c     01 14 06 F6 | 	mov	arg02, #1
07780     C4 B1 B1 FD | 	call	#__system__Right_S
07784     FD 2C 02 F6 | 	mov	local08, result1
07788     14 24 B0 FD | 	call	#_expr
0778c                 | ' 
0778c                 | ' suffix2$=right$(varname2$,1)
0778c                 | ' expr()
0778c                 | ' if varnum>0 then					' try to find a variable
0778c     35 00 00 FF 
07790     08 E4 05 F1 | 	add	objptr, ##27144
07794     F2 2E 02 FB | 	rdlong	local09, objptr
07798     35 00 00 FF 
0779c     08 E4 85 F1 | 	sub	objptr, ##27144
077a0     01 2E 56 F2 | 	cmps	local09, #1 wc
077a4     58 00 90 CD |  if_b	jmp	#LR__0684
077a8                 | '   for i=0 to varnum-1
077a8     00 30 06 F6 | 	mov	local10, #0
077ac     35 00 00 FF 
077b0     08 E4 05 F1 | 	add	objptr, ##27144
077b4     F2 32 02 FB | 	rdlong	local11, objptr
077b8     35 00 00 FF 
077bc     08 E4 85 F1 | 	sub	objptr, ##27144
077c0                 | LR__0682
077c0     19 31 52 F2 | 	cmps	local10, local11 wc
077c4     38 00 90 3D |  if_ae	jmp	#LR__0683
077c8                 | '     if variables(i).name=varname2$ then j=i : exit
077c8     18 2F 02 F6 | 	mov	local09, local10
077cc     04 2E 66 F0 | 	shl	local09, #4
077d0     14 00 00 FF 
077d4     F8 E5 05 F1 | 	add	objptr, ##10744
077d8     F2 2E 02 F1 | 	add	local09, objptr
077dc     17 13 02 FB | 	rdlong	arg01, local09
077e0     15 15 02 F6 | 	mov	arg02, local07
077e4     14 00 00 FF 
077e8     F8 E5 85 F1 | 	sub	objptr, ##10744
077ec     7C 90 B1 FD | 	call	#__system___string_cmp
077f0     00 FA 0D F2 | 	cmp	result1, #0 wz
077f4     18 27 02 A6 |  if_e	mov	local05, local10
077f8     01 30 06 51 |  if_ne	add	local10, #1
077fc     C0 FF 9F 5D |  if_ne	jmp	#LR__0682
07800                 | LR__0683
07800                 | LR__0684
07800                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07800     FF FF 7F FF 
07804     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07808     60 00 90 5D |  if_ne	jmp	#LR__0685
0780c     35 00 00 FF 
07810     08 E4 05 F1 | 	add	objptr, ##27144
07814     F2 2E 02 FB | 	rdlong	local09, objptr
07818     35 00 00 FF 
0781c     08 E4 85 F1 | 	sub	objptr, ##27144
07820     02 00 00 FF 
07824     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07828     40 00 90 3D |  if_ae	jmp	#LR__0685
0782c     35 00 00 FF 
07830     08 E4 05 F1 | 	add	objptr, ##27144
07834     F2 32 02 FB | 	rdlong	local11, objptr
07838     04 32 66 F0 | 	shl	local11, #4
0783c     20 00 00 FF 
07840     10 E4 85 F1 | 	sub	objptr, ##16400
07844     F2 32 02 F1 | 	add	local11, objptr
07848     19 2B 62 FC | 	wrlong	local07, local11
0784c     20 00 00 FF 
07850     10 E4 05 F1 | 	add	objptr, ##16400
07854     F2 2E 02 FB | 	rdlong	local09, objptr
07858     17 27 02 F6 | 	mov	local05, local09
0785c     01 2E 06 F1 | 	add	local09, #1
07860     F2 2E 62 FC | 	wrlong	local09, objptr
07864     35 00 00 FF 
07868     08 E4 85 F1 | 	sub	objptr, ##27144
0786c                 | LR__0685
0786c                 | ' if varnum>=maxvars then
0786c     35 00 00 FF 
07870     08 E4 05 F1 | 	add	objptr, ##27144
07874     F2 2E 02 FB | 	rdlong	local09, objptr
07878     35 00 00 FF 
0787c     08 E4 85 F1 | 	sub	objptr, ##27144
07880     02 00 00 FF 
07884     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07888     2D 28 06 36 |  if_ae	mov	local06, #45
0788c     C8 01 90 3D |  if_ae	jmp	#LR__0690
07890     13 1F 02 F6 | 	mov	local01, local05
07894     17 22 06 F6 | 	mov	local03, #23
07898     0F 2F 02 F6 | 	mov	local09, local01
0789c     10 35 02 F6 | 	mov	local12, local02
078a0     11 1F 02 F6 | 	mov	local01, local03
078a4     4A 00 00 FF 
078a8     7C E4 05 F1 | 	add	objptr, ##38012
078ac     F2 32 02 FB | 	rdlong	local11, objptr
078b0     19 31 02 F6 | 	mov	local10, local11
078b4     01 30 66 F0 | 	shl	local10, #1
078b8     19 31 02 F1 | 	add	local10, local11
078bc     02 30 66 F0 | 	shl	local10, #2
078c0     03 00 00 FF 
078c4     00 E4 85 F1 | 	sub	objptr, ##1536
078c8     F2 30 02 F1 | 	add	local10, objptr
078cc     18 2F 62 FC | 	wrlong	local09, local10
078d0     03 00 00 FF 
078d4     00 E4 05 F1 | 	add	objptr, ##1536
078d8     F2 2E 02 FB | 	rdlong	local09, objptr
078dc     17 33 02 F6 | 	mov	local11, local09
078e0     01 32 66 F0 | 	shl	local11, #1
078e4     17 33 02 F1 | 	add	local11, local09
078e8     02 32 66 F0 | 	shl	local11, #2
078ec     03 00 00 FF 
078f0     00 E4 85 F1 | 	sub	objptr, ##1536
078f4     F2 32 02 F1 | 	add	local11, objptr
078f8     04 32 06 F1 | 	add	local11, #4
078fc     19 35 62 FC | 	wrlong	local12, local11
07900     03 00 00 FF 
07904     00 E4 05 F1 | 	add	objptr, ##1536
07908     F2 2E 02 FB | 	rdlong	local09, objptr
0790c     17 35 02 F6 | 	mov	local12, local09
07910     01 34 66 F0 | 	shl	local12, #1
07914     17 35 02 F1 | 	add	local12, local09
07918     02 34 66 F0 | 	shl	local12, #2
0791c     03 00 00 FF 
07920     00 E4 85 F1 | 	sub	objptr, ##1536
07924     F2 34 02 F1 | 	add	local12, objptr
07928     08 34 06 F1 | 	add	local12, #8
0792c     1A 1F 62 FC | 	wrlong	local01, local12
07930     03 00 00 FF 
07934     00 E4 05 F1 | 	add	objptr, ##1536
07938     F2 2E 02 FB | 	rdlong	local09, objptr
0793c     01 2E 06 F1 | 	add	local09, #1
07940     F2 2E 62 FC | 	wrlong	local09, objptr
07944     4A 00 00 FF 
07948     7C E4 85 F1 | 	sub	objptr, ##38012
0794c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0794c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0794c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0794c     03 24 0E F2 | 	cmp	local04, #3 wz
07950     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07954     38 00 90 5D |  if_ne	jmp	#LR__0686
07958     4A 00 00 FF 
0795c     7C E4 05 F1 | 	add	objptr, ##38012
07960     F2 34 02 FB | 	rdlong	local12, objptr
07964     1A 1F 02 F6 | 	mov	local01, local12
07968     01 1E 66 F0 | 	shl	local01, #1
0796c     1A 1F 02 F1 | 	add	local01, local12
07970     02 1E 66 F0 | 	shl	local01, #2
07974     03 00 00 FF 
07978     00 E4 85 F1 | 	sub	objptr, ##1536
0797c     F2 1E 02 F1 | 	add	local01, objptr
07980     08 1E 06 F1 | 	add	local01, #8
07984     0F FD 6B FC | 	wrlong	#510, local01
07988     47 00 00 FF 
0798c     7C E4 85 F1 | 	sub	objptr, ##36476
07990                 | LR__0686
07990                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07990     4A 00 00 FF 
07994     7C E4 05 F1 | 	add	objptr, ##38012
07998     F2 30 02 FB | 	rdlong	local10, objptr
0799c     4A 00 00 FF 
079a0     7C E4 85 F1 | 	sub	objptr, ##38012
079a4     97 58 48 FB | 	callpa	#(@LR__0689-@LR__0687)>>2,fcache_load_ptr_
079a8                 | LR__0687
079a8     18 35 02 F6 | 	mov	local12, local10
079ac     01 34 66 F0 | 	shl	local12, #1
079b0     18 35 02 F1 | 	add	local12, local10
079b4     02 34 66 F0 | 	shl	local12, #2
079b8     47 00 00 FF 
079bc     7C E4 05 F1 | 	add	objptr, ##36476
079c0     F2 34 02 F1 | 	add	local12, objptr
079c4     08 34 06 F1 | 	add	local12, #8
079c8     1A 35 02 FB | 	rdlong	local12, local12
079cc     9B 34 0E F2 | 	cmp	local12, #155 wz
079d0     47 00 00 FF 
079d4     7C E4 85 F1 | 	sub	objptr, ##36476
079d8     70 00 90 5D |  if_ne	jmp	#LR__0688
079dc     18 35 02 F6 | 	mov	local12, local10
079e0     01 34 86 F1 | 	sub	local12, #1
079e4     1A 1F 02 F6 | 	mov	local01, local12
079e8     01 1E 66 F0 | 	shl	local01, #1
079ec     1A 1F 02 F1 | 	add	local01, local12
079f0     02 1E 66 F0 | 	shl	local01, #2
079f4     47 00 00 FF 
079f8     7C E4 05 F1 | 	add	objptr, ##36476
079fc     F2 1E 02 F1 | 	add	local01, objptr
07a00     08 1E 06 F1 | 	add	local01, #8
07a04     0F 1F 02 FB | 	rdlong	local01, local01
07a08     11 1E 0E F2 | 	cmp	local01, #17 wz
07a0c     47 00 00 FF 
07a10     7C E4 85 F1 | 	sub	objptr, ##36476
07a14     34 00 90 5D |  if_ne	jmp	#LR__0688
07a18     18 35 02 F6 | 	mov	local12, local10
07a1c     01 34 86 F1 | 	sub	local12, #1
07a20     1A 1F 02 F6 | 	mov	local01, local12
07a24     01 1E 66 F0 | 	shl	local01, #1
07a28     1A 1F 02 F1 | 	add	local01, local12
07a2c     02 1E 66 F0 | 	shl	local01, #2
07a30     47 00 00 FF 
07a34     7C E4 05 F1 | 	add	objptr, ##36476
07a38     F2 1E 02 F1 | 	add	local01, objptr
07a3c     08 1E 06 F1 | 	add	local01, #8
07a40     0F 25 68 FC | 	wrlong	#18, local01
07a44     47 00 00 FF 
07a48     7C E4 85 F1 | 	sub	objptr, ##36476
07a4c                 | LR__0688
07a4c     01 30 86 F1 | 	sub	local10, #1
07a50     01 30 56 F2 | 	cmps	local10, #1 wc
07a54     50 FF 9F 3D |  if_ae	jmp	#LR__0687
07a58                 | LR__0689
07a58                 | LR__0690
07a58                 | ' return err
07a58     14 FB 01 F6 | 	mov	result1, local06
07a5c     A7 F0 03 F6 | 	mov	ptra, fp
07a60     B2 00 A0 FD | 	call	#popregs_
07a64                 | _compile_immediate_assign_ret
07a64     2D 00 64 FD | 	ret
07a68                 | 
07a68                 | ' 
07a68                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07a68                 | ' 
07a68                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07a68                 | _compile
07a68     03 4A 05 F6 | 	mov	COUNT_, #3
07a6c     A8 00 A0 FD | 	call	#pushregs_
07a70     09 1F 02 F6 | 	mov	local01, arg01
07a74     0B 21 02 F6 | 	mov	local02, arg03
07a78     47 00 00 FF 
07a7c     7C E4 05 F1 | 	add	objptr, ##36476
07a80     F2 1E 62 FC | 	wrlong	local01, objptr
07a84     04 E4 05 F1 | 	add	objptr, #4
07a88     F2 14 62 FC | 	wrlong	arg02, objptr
07a8c     47 00 00 FF 
07a90     80 E4 85 F1 | 	sub	objptr, ##36480
07a94     10 13 02 F6 | 	mov	arg01, local02
07a98     01 12 06 F1 | 	add	arg01, #1
07a9c     0F 15 02 F6 | 	mov	arg02, local01
07aa0     18 F3 BF FD | 	call	#_compile_immediate
07aa4     FD 22 0A F6 | 	mov	local03, result1 wz
07aa8                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07aa8                 | ' ucompiledline(0)=alinemajor
07aa8                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07aa8                 | ' 
07aa8                 | ' ' cont: 
07aa8                 | ' ' 0 - this is the first part of the line that will continue
07aa8                 | ' ' 1 - this is the continuation of the line
07aa8                 | ' ' 2 - this is the last continued line
07aa8                 | ' ' 3 - this is the one and only part
07aa8                 | ' 
07aa8                 | ' err=compile_immediate(cont+1,alinemajor) 
07aa8                 | ' if err=0 andalso alinemajor>0 then
07aa8     74 00 90 5D |  if_ne	jmp	#LR__0705
07aac     01 1E 16 F2 | 	cmp	local01, #1 wc
07ab0     6C 00 90 CD |  if_b	jmp	#LR__0705
07ab4                 | '   if cont=3 orelse cont=2 then 
07ab4     03 20 0E F2 | 	cmp	local02, #3 wz
07ab8     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07abc     60 00 90 5D |  if_ne	jmp	#LR__0704
07ac0                 | '     if alinemajor >lastline then 
07ac0     4A 00 00 FF 
07ac4     8C E4 05 F1 | 	add	objptr, ##38028
07ac8     F2 14 02 FB | 	rdlong	arg02, objptr
07acc     4A 00 00 FF 
07ad0     8C E4 85 F1 | 	sub	objptr, ##38028
07ad4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ad8     0C 00 90 ED |  if_be	jmp	#LR__0700
07adc     0F 13 02 F6 | 	mov	arg01, local01
07ae0     10 F2 BF FD | 	call	#_add_line_at_end
07ae4     38 00 90 FD | 	jmp	#LR__0703
07ae8                 | LR__0700
07ae8     0F 13 02 F6 | 	mov	arg01, local01
07aec     D4 EB BF FD | 	call	#_deleteline
07af0                 | '       deleteline(alinemajor)  
07af0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07af0     4A 00 00 FF 
07af4     8C E4 05 F1 | 	add	objptr, ##38028
07af8     F2 14 02 FB | 	rdlong	arg02, objptr
07afc     4A 00 00 FF 
07b00     8C E4 85 F1 | 	sub	objptr, ##38028
07b04     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07b08     0C 00 90 ED |  if_be	jmp	#LR__0701
07b0c     0F 13 02 F6 | 	mov	arg01, local01
07b10     E0 F1 BF FD | 	call	#_add_line_at_end
07b14     08 00 90 FD | 	jmp	#LR__0702
07b18                 | LR__0701
07b18     0F 13 02 F6 | 	mov	arg01, local01
07b1c     B8 EF BF FD | 	call	#_insertline
07b20                 | LR__0702
07b20                 | LR__0703
07b20                 | LR__0704
07b20                 | LR__0705
07b20                 | ' return err
07b20     11 FB 01 F6 | 	mov	result1, local03
07b24     A7 F0 03 F6 | 	mov	ptra, fp
07b28     B2 00 A0 FD | 	call	#popregs_
07b2c                 | _compile_ret
07b2c     2D 00 64 FD | 	ret
07b30                 | 
07b30                 | ' 
07b30                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07b30                 | ' 
07b30                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07b30                 | _compile_assign
07b30     03 4A 05 F6 | 	mov	COUNT_, #3
07b34     A8 00 A0 FD | 	call	#pushregs_
07b38     09 1F 02 F6 | 	mov	local01, arg01
07b3c     0B 21 02 F6 | 	mov	local02, arg03
07b40     47 00 00 FF 
07b44     7C E4 05 F1 | 	add	objptr, ##36476
07b48     F2 1E 62 FC | 	wrlong	local01, objptr
07b4c     04 E4 05 F1 | 	add	objptr, #4
07b50     F2 14 62 FC | 	wrlong	arg02, objptr
07b54     47 00 00 FF 
07b58     80 E4 85 F1 | 	sub	objptr, ##36480
07b5c     10 13 02 F6 | 	mov	arg01, local02
07b60     01 12 06 F1 | 	add	arg01, #1
07b64     54 FB BF FD | 	call	#_compile_immediate_assign
07b68     FD 22 02 F6 | 	mov	local03, result1
07b6c                 | ' 
07b6c                 | ' ucompiledline(0)=alinemajor
07b6c                 | ' ucompiledline(1)=alineminor
07b6c                 | ' 
07b6c                 | ' err=compile_immediate_assign(cont+1) 
07b6c                 | ' if alinemajor>0 then
07b6c     01 1E 16 F2 | 	cmp	local01, #1 wc
07b70     6C 00 90 CD |  if_b	jmp	#LR__0715
07b74                 | '   if cont=3 orelse cont=2 then 
07b74     03 20 0E F2 | 	cmp	local02, #3 wz
07b78     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07b7c     60 00 90 5D |  if_ne	jmp	#LR__0714
07b80                 | '     if alinemajor >lastline then 
07b80     4A 00 00 FF 
07b84     8C E4 05 F1 | 	add	objptr, ##38028
07b88     F2 14 02 FB | 	rdlong	arg02, objptr
07b8c     4A 00 00 FF 
07b90     8C E4 85 F1 | 	sub	objptr, ##38028
07b94     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07b98     0C 00 90 ED |  if_be	jmp	#LR__0710
07b9c     0F 13 02 F6 | 	mov	arg01, local01
07ba0     50 F1 BF FD | 	call	#_add_line_at_end
07ba4     38 00 90 FD | 	jmp	#LR__0713
07ba8                 | LR__0710
07ba8     0F 13 02 F6 | 	mov	arg01, local01
07bac     14 EB BF FD | 	call	#_deleteline
07bb0                 | '       deleteline(alinemajor)  
07bb0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07bb0     4A 00 00 FF 
07bb4     8C E4 05 F1 | 	add	objptr, ##38028
07bb8     F2 14 02 FB | 	rdlong	arg02, objptr
07bbc     4A 00 00 FF 
07bc0     8C E4 85 F1 | 	sub	objptr, ##38028
07bc4     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07bc8     0C 00 90 ED |  if_be	jmp	#LR__0711
07bcc     0F 13 02 F6 | 	mov	arg01, local01
07bd0     20 F1 BF FD | 	call	#_add_line_at_end
07bd4     08 00 90 FD | 	jmp	#LR__0712
07bd8                 | LR__0711
07bd8     0F 13 02 F6 | 	mov	arg01, local01
07bdc     F8 EE BF FD | 	call	#_insertline
07be0                 | LR__0712
07be0                 | LR__0713
07be0                 | LR__0714
07be0                 | LR__0715
07be0                 | ' return err
07be0     11 FB 01 F6 | 	mov	result1, local03
07be4     A7 F0 03 F6 | 	mov	ptra, fp
07be8     B2 00 A0 FD | 	call	#popregs_
07bec                 | _compile_assign_ret
07bec     2D 00 64 FD | 	ret
07bf0                 | 
07bf0                 | ' 
07bf0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
07bf0                 | ' 
07bf0                 | ' function compile_fun_2p() as ulong
07bf0                 | _compile_fun_2p
07bf0     01 4A 05 F6 | 	mov	COUNT_, #1
07bf4     A8 00 A0 FD | 	call	#pushregs_
07bf8     A4 1F B0 FD | 	call	#_expr
07bfc     FD 1E 02 F6 | 	mov	local01, result1
07c00                 | ' err=expr() : if err>0 then return err
07c00     01 1E 16 F2 | 	cmp	local01, #1 wc
07c04     0F FB 01 36 |  if_ae	mov	result1, local01
07c08     60 00 90 3D |  if_ae	jmp	#LR__0720
07c0c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07c0c     37 00 00 FF 
07c10     44 E4 05 F1 | 	add	objptr, ##28228
07c14     F2 1E 02 FB | 	rdlong	local01, objptr
07c18     03 1E 66 F0 | 	shl	local01, #3
07c1c     02 00 00 FF 
07c20     38 E4 85 F1 | 	sub	objptr, ##1080
07c24     F2 1E 02 F1 | 	add	local01, objptr
07c28     04 1E 06 F1 | 	add	local01, #4
07c2c     0F 1F 02 FB | 	rdlong	local01, local01
07c30     11 1E 0E F2 | 	cmp	local01, #17 wz
07c34     35 00 00 FF 
07c38     0C E4 85 F1 | 	sub	objptr, ##27148
07c3c     15 FA 05 56 |  if_ne	mov	result1, #21
07c40     28 00 90 5D |  if_ne	jmp	#LR__0720
07c44     37 00 00 FF 
07c48     44 E4 05 F1 | 	add	objptr, ##28228
07c4c     F2 1E 02 FB | 	rdlong	local01, objptr
07c50     01 1E 06 F1 | 	add	local01, #1
07c54     F2 1E 62 FC | 	wrlong	local01, objptr
07c58     37 00 00 FF 
07c5c     44 E4 85 F1 | 	sub	objptr, ##28228
07c60     3C 1F B0 FD | 	call	#_expr
07c64                 | ' err=expr() : if err>0 then return err
07c64     01 FA 15 F2 | 	cmp	result1, #1 wc
07c68                 | ' return 0
07c68     00 FA 05 C6 |  if_b	mov	result1, #0
07c6c                 | LR__0720
07c6c     A7 F0 03 F6 | 	mov	ptra, fp
07c70     B2 00 A0 FD | 	call	#popregs_
07c74                 | _compile_fun_2p_ret
07c74     2D 00 64 FD | 	ret
07c78                 | 
07c78                 | ' 
07c78                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
07c78                 | ' 
07c78                 | ' function compile_fun_3p() as ulong
07c78                 | _compile_fun_3p
07c78     01 4A 05 F6 | 	mov	COUNT_, #1
07c7c     A8 00 A0 FD | 	call	#pushregs_
07c80     1C 1F B0 FD | 	call	#_expr
07c84     FD 1E 02 F6 | 	mov	local01, result1
07c88                 | ' err=expr() : if err>0 then return err
07c88     01 1E 16 F2 | 	cmp	local01, #1 wc
07c8c     0F FB 01 36 |  if_ae	mov	result1, local01
07c90     C8 00 90 3D |  if_ae	jmp	#LR__0730
07c94                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07c94     37 00 00 FF 
07c98     44 E4 05 F1 | 	add	objptr, ##28228
07c9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ca0     03 1E 66 F0 | 	shl	local01, #3
07ca4     02 00 00 FF 
07ca8     38 E4 85 F1 | 	sub	objptr, ##1080
07cac     F2 1E 02 F1 | 	add	local01, objptr
07cb0     04 1E 06 F1 | 	add	local01, #4
07cb4     0F 1F 02 FB | 	rdlong	local01, local01
07cb8     11 1E 0E F2 | 	cmp	local01, #17 wz
07cbc     35 00 00 FF 
07cc0     0C E4 85 F1 | 	sub	objptr, ##27148
07cc4     15 FA 05 56 |  if_ne	mov	result1, #21
07cc8     90 00 90 5D |  if_ne	jmp	#LR__0730
07ccc     37 00 00 FF 
07cd0     44 E4 05 F1 | 	add	objptr, ##28228
07cd4     F2 1E 02 FB | 	rdlong	local01, objptr
07cd8     01 1E 06 F1 | 	add	local01, #1
07cdc     F2 1E 62 FC | 	wrlong	local01, objptr
07ce0     37 00 00 FF 
07ce4     44 E4 85 F1 | 	sub	objptr, ##28228
07ce8     B4 1E B0 FD | 	call	#_expr
07cec     FD 1E 02 F6 | 	mov	local01, result1
07cf0                 | ' err=expr() : if err>0 then return err
07cf0     01 1E 16 F2 | 	cmp	local01, #1 wc
07cf4     0F FB 01 36 |  if_ae	mov	result1, local01
07cf8     60 00 90 3D |  if_ae	jmp	#LR__0730
07cfc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07cfc     37 00 00 FF 
07d00     44 E4 05 F1 | 	add	objptr, ##28228
07d04     F2 1E 02 FB | 	rdlong	local01, objptr
07d08     03 1E 66 F0 | 	shl	local01, #3
07d0c     02 00 00 FF 
07d10     38 E4 85 F1 | 	sub	objptr, ##1080
07d14     F2 1E 02 F1 | 	add	local01, objptr
07d18     04 1E 06 F1 | 	add	local01, #4
07d1c     0F 1F 02 FB | 	rdlong	local01, local01
07d20     11 1E 0E F2 | 	cmp	local01, #17 wz
07d24     35 00 00 FF 
07d28     0C E4 85 F1 | 	sub	objptr, ##27148
07d2c     15 FA 05 56 |  if_ne	mov	result1, #21
07d30     28 00 90 5D |  if_ne	jmp	#LR__0730
07d34     37 00 00 FF 
07d38     44 E4 05 F1 | 	add	objptr, ##28228
07d3c     F2 1E 02 FB | 	rdlong	local01, objptr
07d40     01 1E 06 F1 | 	add	local01, #1
07d44     F2 1E 62 FC | 	wrlong	local01, objptr
07d48     37 00 00 FF 
07d4c     44 E4 85 F1 | 	sub	objptr, ##28228
07d50     4C 1E B0 FD | 	call	#_expr
07d54                 | ' err=expr() : if err>0 then return err
07d54     01 FA 15 F2 | 	cmp	result1, #1 wc
07d58                 | ' return 0
07d58     00 FA 05 C6 |  if_b	mov	result1, #0
07d5c                 | LR__0730
07d5c     A7 F0 03 F6 | 	mov	ptra, fp
07d60     B2 00 A0 FD | 	call	#popregs_
07d64                 | _compile_fun_3p_ret
07d64     2D 00 64 FD | 	ret
07d68                 | 
07d68                 | ' 
07d68                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
07d68                 | ' 
07d68                 | ' function compile_fun_4p() as ulong
07d68                 | _compile_fun_4p
07d68     01 4A 05 F6 | 	mov	COUNT_, #1
07d6c     A8 00 A0 FD | 	call	#pushregs_
07d70     2C 1E B0 FD | 	call	#_expr
07d74     FD 1E 02 F6 | 	mov	local01, result1
07d78                 | ' err=expr() : if err>0 then return err
07d78     01 1E 16 F2 | 	cmp	local01, #1 wc
07d7c     0F FB 01 36 |  if_ae	mov	result1, local01
07d80     30 01 90 3D |  if_ae	jmp	#LR__0740
07d84                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07d84     37 00 00 FF 
07d88     44 E4 05 F1 | 	add	objptr, ##28228
07d8c     F2 1E 02 FB | 	rdlong	local01, objptr
07d90     03 1E 66 F0 | 	shl	local01, #3
07d94     02 00 00 FF 
07d98     38 E4 85 F1 | 	sub	objptr, ##1080
07d9c     F2 1E 02 F1 | 	add	local01, objptr
07da0     04 1E 06 F1 | 	add	local01, #4
07da4     0F 1F 02 FB | 	rdlong	local01, local01
07da8     11 1E 0E F2 | 	cmp	local01, #17 wz
07dac     35 00 00 FF 
07db0     0C E4 85 F1 | 	sub	objptr, ##27148
07db4     15 FA 05 56 |  if_ne	mov	result1, #21
07db8     F8 00 90 5D |  if_ne	jmp	#LR__0740
07dbc     37 00 00 FF 
07dc0     44 E4 05 F1 | 	add	objptr, ##28228
07dc4     F2 1E 02 FB | 	rdlong	local01, objptr
07dc8     01 1E 06 F1 | 	add	local01, #1
07dcc     F2 1E 62 FC | 	wrlong	local01, objptr
07dd0     37 00 00 FF 
07dd4     44 E4 85 F1 | 	sub	objptr, ##28228
07dd8     C4 1D B0 FD | 	call	#_expr
07ddc     FD 1E 02 F6 | 	mov	local01, result1
07de0                 | ' err=expr() : if err>0 then return err
07de0     01 1E 16 F2 | 	cmp	local01, #1 wc
07de4     0F FB 01 36 |  if_ae	mov	result1, local01
07de8     C8 00 90 3D |  if_ae	jmp	#LR__0740
07dec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
07dec     37 00 00 FF 
07df0     44 E4 05 F1 | 	add	objptr, ##28228
07df4     F2 1E 02 FB | 	rdlong	local01, objptr
07df8     03 1E 66 F0 | 	shl	local01, #3
07dfc     02 00 00 FF 
07e00     38 E4 85 F1 | 	sub	objptr, ##1080
07e04     F2 1E 02 F1 | 	add	local01, objptr
07e08     04 1E 06 F1 | 	add	local01, #4
07e0c     0F 1F 02 FB | 	rdlong	local01, local01
07e10     11 1E 0E F2 | 	cmp	local01, #17 wz
07e14     35 00 00 FF 
07e18     0C E4 85 F1 | 	sub	objptr, ##27148
07e1c     15 FA 05 56 |  if_ne	mov	result1, #21
07e20     90 00 90 5D |  if_ne	jmp	#LR__0740
07e24     37 00 00 FF 
07e28     44 E4 05 F1 | 	add	objptr, ##28228
07e2c     F2 1E 02 FB | 	rdlong	local01, objptr
07e30     01 1E 06 F1 | 	add	local01, #1
07e34     F2 1E 62 FC | 	wrlong	local01, objptr
07e38     37 00 00 FF 
07e3c     44 E4 85 F1 | 	sub	objptr, ##28228
07e40     5C 1D B0 FD | 	call	#_expr
07e44     FD 1E 02 F6 | 	mov	local01, result1
07e48                 | ' err=expr() : if err>0 then return err
07e48     01 1E 16 F2 | 	cmp	local01, #1 wc
07e4c     0F FB 01 36 |  if_ae	mov	result1, local01
07e50     60 00 90 3D |  if_ae	jmp	#LR__0740
07e54                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
07e54     37 00 00 FF 
07e58     44 E4 05 F1 | 	add	objptr, ##28228
07e5c     F2 1E 02 FB | 	rdlong	local01, objptr
07e60     03 1E 66 F0 | 	shl	local01, #3
07e64     02 00 00 FF 
07e68     38 E4 85 F1 | 	sub	objptr, ##1080
07e6c     F2 1E 02 F1 | 	add	local01, objptr
07e70     04 1E 06 F1 | 	add	local01, #4
07e74     0F 1F 02 FB | 	rdlong	local01, local01
07e78     11 1E 0E F2 | 	cmp	local01, #17 wz
07e7c     35 00 00 FF 
07e80     0C E4 85 F1 | 	sub	objptr, ##27148
07e84     15 FA 05 56 |  if_ne	mov	result1, #21
07e88     28 00 90 5D |  if_ne	jmp	#LR__0740
07e8c     37 00 00 FF 
07e90     44 E4 05 F1 | 	add	objptr, ##28228
07e94     F2 1E 02 FB | 	rdlong	local01, objptr
07e98     01 1E 06 F1 | 	add	local01, #1
07e9c     F2 1E 62 FC | 	wrlong	local01, objptr
07ea0     37 00 00 FF 
07ea4     44 E4 85 F1 | 	sub	objptr, ##28228
07ea8     F4 1C B0 FD | 	call	#_expr
07eac                 | ' err=expr() : if err>0 then return err
07eac     01 FA 15 F2 | 	cmp	result1, #1 wc
07eb0                 | ' return 0
07eb0     00 FA 05 C6 |  if_b	mov	result1, #0
07eb4                 | LR__0740
07eb4     A7 F0 03 F6 | 	mov	ptra, fp
07eb8     B2 00 A0 FD | 	call	#popregs_
07ebc                 | _compile_fun_4p_ret
07ebc     2D 00 64 FD | 	ret
07ec0                 | 
07ec0                 | ' 
07ec0                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
07ec0                 | ' 
07ec0                 | ' function compile_fun_varp() as ulong,ulong 
07ec0                 | _compile_fun_varp
07ec0     03 4A 05 F6 | 	mov	COUNT_, #3
07ec4     A8 00 A0 FD | 	call	#pushregs_
07ec8     00 1E 06 F6 | 	mov	local01, #0
07ecc                 | ' 
07ecc                 | ' i=0 : err=0
07ecc                 | ' if lparts(ct).token<>token_end then
07ecc     37 00 00 FF 
07ed0     44 E4 05 F1 | 	add	objptr, ##28228
07ed4     F2 20 02 FB | 	rdlong	local02, objptr
07ed8     03 20 66 F0 | 	shl	local02, #3
07edc     02 00 00 FF 
07ee0     38 E4 85 F1 | 	sub	objptr, ##1080
07ee4     F2 20 02 F1 | 	add	local02, objptr
07ee8     04 20 06 F1 | 	add	local02, #4
07eec     10 21 02 FB | 	rdlong	local02, local02
07ef0     FE 21 0E F2 | 	cmp	local02, #510 wz
07ef4     35 00 00 FF 
07ef8     0C E4 85 F1 | 	sub	objptr, ##27148
07efc     88 00 90 AD |  if_e	jmp	#LR__0751
07f00                 | '   do
07f00                 | LR__0750
07f00     9C 1C B0 FD | 	call	#_expr
07f04     01 1E 06 F1 | 	add	local01, #1
07f08                 | '     expr()
07f08                 | '     i+=1
07f08                 | '     if lparts(ct).token=token_comma then ct+=1
07f08     37 00 00 FF 
07f0c     44 E4 05 F1 | 	add	objptr, ##28228
07f10     F2 20 02 FB | 	rdlong	local02, objptr
07f14     03 20 66 F0 | 	shl	local02, #3
07f18     02 00 00 FF 
07f1c     38 E4 85 F1 | 	sub	objptr, ##1080
07f20     F2 20 02 F1 | 	add	local02, objptr
07f24     04 20 06 F1 | 	add	local02, #4
07f28     10 21 02 FB | 	rdlong	local02, local02
07f2c     11 20 0E F2 | 	cmp	local02, #17 wz
07f30     35 00 00 FF 
07f34     0C E4 85 F1 | 	sub	objptr, ##27148
07f38     37 00 00 AF 
07f3c     44 E4 05 A1 |  if_e	add	objptr, ##28228
07f40     F2 22 02 AB |  if_e	rdlong	local03, objptr
07f44     01 22 06 A1 |  if_e	add	local03, #1
07f48     F2 22 62 AC |  if_e	wrlong	local03, objptr
07f4c     37 00 00 AF 
07f50     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07f54                 | '     if lparts(ct).token=token_end then exit loop
07f54     37 00 00 FF 
07f58     44 E4 05 F1 | 	add	objptr, ##28228
07f5c     F2 20 02 FB | 	rdlong	local02, objptr
07f60     03 20 66 F0 | 	shl	local02, #3
07f64     02 00 00 FF 
07f68     38 E4 85 F1 | 	sub	objptr, ##1080
07f6c     F2 20 02 F1 | 	add	local02, objptr
07f70     04 20 06 F1 | 	add	local02, #4
07f74     10 21 02 FB | 	rdlong	local02, local02
07f78     FE 21 0E F2 | 	cmp	local02, #510 wz
07f7c     35 00 00 FF 
07f80     0C E4 85 F1 | 	sub	objptr, ##27148
07f84     78 FF 9F 5D |  if_ne	jmp	#LR__0750
07f88                 | LR__0751
07f88                 | ' return i,err
07f88     0F FB 01 F6 | 	mov	result1, local01
07f8c     00 FC 05 F6 | 	mov	result2, #0
07f90     A7 F0 03 F6 | 	mov	ptra, fp
07f94     B2 00 A0 FD | 	call	#popregs_
07f98                 | _compile_fun_varp_ret
07f98     2D 00 64 FD | 	ret
07f9c                 | 
07f9c                 | ' 
07f9c                 | ' '----- compile assign to an array element
07f9c                 | ' 
07f9c                 | ' function compile_array_assign() as ulong 
07f9c                 | _compile_array_assign
07f9c     0B 4A 05 F6 | 	mov	COUNT_, #11
07fa0     A8 00 A0 FD | 	call	#pushregs_
07fa4     00 24 06 F6 | 	mov	local04, #0
07fa8     00 26 06 F6 | 	mov	local05, #0
07fac     37 00 00 FF 
07fb0     44 E4 05 F1 | 	add	objptr, ##28228
07fb4     F2 28 02 FB | 	rdlong	local06, objptr
07fb8     14 FB 01 F6 | 	mov	result1, local06
07fbc     01 FA 85 F1 | 	sub	result1, #1
07fc0     03 FA 65 F0 | 	shl	result1, #3
07fc4     02 00 00 FF 
07fc8     38 E4 85 F1 | 	sub	objptr, ##1080
07fcc     F2 FA 01 F1 | 	add	result1, objptr
07fd0     FD 2A 02 FB | 	rdlong	local07, result1
07fd4                 | ' numpar=0 : err=0
07fd4                 | ' varname$=lparts(ct-1).part$
07fd4                 | ' if lparts(ct).token=token_lpar then
07fd4     03 28 66 F0 | 	shl	local06, #3
07fd8     F2 28 02 F1 | 	add	local06, objptr
07fdc     04 28 06 F1 | 	add	local06, #4
07fe0     14 29 02 FB | 	rdlong	local06, local06
07fe4     15 28 0E F2 | 	cmp	local06, #21 wz
07fe8     35 00 00 FF 
07fec     0C E4 85 F1 | 	sub	objptr, ##27148
07ff0     F4 01 90 5D |  if_ne	jmp	#LR__0764
07ff4     37 00 00 FF 
07ff8     44 E4 05 F1 | 	add	objptr, ##28228
07ffc     F2 2C 02 FB | 	rdlong	local08, objptr
08000     01 2C 06 F1 | 	add	local08, #1
08004     F2 2C 62 FC | 	wrlong	local08, objptr
08008     37 00 00 FF 
0800c     44 E4 85 F1 | 	sub	objptr, ##28228
08010                 | '   ct+=1 											' omit this lpar, this is for expr list
08010                 | '   do
08010                 | LR__0760
08010     8C 1B B0 FD | 	call	#_expr
08014     37 00 00 FF 
08018     44 E4 05 F1 | 	add	objptr, ##28228
0801c     F2 28 02 FB | 	rdlong	local06, objptr
08020     01 28 06 F1 | 	add	local06, #1
08024     F2 28 62 FC | 	wrlong	local06, objptr
08028     01 24 06 F1 | 	add	local04, #1
0802c     01 28 86 F1 | 	sub	local06, #1
08030     03 28 66 F0 | 	shl	local06, #3
08034     02 00 00 FF 
08038     38 E4 85 F1 | 	sub	objptr, ##1080
0803c     F2 28 02 F1 | 	add	local06, objptr
08040     04 28 06 F1 | 	add	local06, #4
08044     14 2D 02 FB | 	rdlong	local08, local06
08048     14 2C 0E F2 | 	cmp	local08, #20 wz
0804c     35 00 00 FF 
08050     0C E4 85 F1 | 	sub	objptr, ##27148
08054     34 00 90 AD |  if_e	jmp	#LR__0761
08058     37 00 00 FF 
0805c     44 E4 05 F1 | 	add	objptr, ##28228
08060     F2 2C 02 FB | 	rdlong	local08, objptr
08064     03 2C 66 F0 | 	shl	local08, #3
08068     02 00 00 FF 
0806c     38 E4 85 F1 | 	sub	objptr, ##1080
08070     F2 2C 02 F1 | 	add	local08, objptr
08074     04 2C 06 F1 | 	add	local08, #4
08078     16 2D 02 FB | 	rdlong	local08, local08
0807c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08080     35 00 00 FF 
08084     0C E4 85 F1 | 	sub	objptr, ##27148
08088     84 FF 9F 5D |  if_ne	jmp	#LR__0760
0808c                 | LR__0761
0808c     37 00 00 FF 
08090     44 E4 05 F1 | 	add	objptr, ##28228
08094     F2 2C 02 FB | 	rdlong	local08, objptr
08098     01 2C 06 F1 | 	add	local08, #1
0809c     F2 2C 62 FC | 	wrlong	local08, objptr
080a0     37 00 00 FF 
080a4     44 E4 85 F1 | 	sub	objptr, ##28228
080a8     F4 1A B0 FD | 	call	#_expr
080ac     01 2E 66 F6 | 	neg	local09, #1
080b0     00 30 06 F6 | 	mov	local10, #0
080b4                 | '   ct+=1 : expr()
080b4                 | '   j=-1 : i=0 
080b4                 | '   do 
080b4                 | LR__0762
080b4                 | '     if variables(i).name=varname$ then j=i: exit loop
080b4     18 29 02 F6 | 	mov	local06, local10
080b8     04 28 66 F0 | 	shl	local06, #4
080bc     14 00 00 FF 
080c0     F8 E5 05 F1 | 	add	objptr, ##10744
080c4     F2 28 02 F1 | 	add	local06, objptr
080c8     14 13 02 FB | 	rdlong	arg01, local06
080cc     15 15 02 F6 | 	mov	arg02, local07
080d0     14 00 00 FF 
080d4     F8 E5 85 F1 | 	sub	objptr, ##10744
080d8     90 87 B1 FD | 	call	#__system___string_cmp
080dc     00 FA 0D F2 | 	cmp	result1, #0 wz
080e0     18 2F 02 A6 |  if_e	mov	local09, local10
080e4     20 00 90 AD |  if_e	jmp	#LR__0763
080e8     01 30 06 F1 | 	add	local10, #1
080ec     35 00 00 FF 
080f0     08 E4 05 F1 | 	add	objptr, ##27144
080f4     F2 2C 02 FB | 	rdlong	local08, objptr
080f8     35 00 00 FF 
080fc     08 E4 85 F1 | 	sub	objptr, ##27144
08100     16 31 5A F2 | 	cmps	local10, local08 wcz
08104     AC FF 9F ED |  if_be	jmp	#LR__0762
08108                 | LR__0763
08108     17 1F 02 F6 | 	mov	local01, local09
0810c     12 21 02 F6 | 	mov	local02, local04
08110     17 22 06 F6 | 	mov	local03, #23
08114     0F 2D 02 F6 | 	mov	local08, local01
08118     10 33 02 F6 | 	mov	local11, local02
0811c     11 2B 02 F6 | 	mov	local07, local03
08120     4A 00 00 FF 
08124     7C E4 05 F1 | 	add	objptr, ##38012
08128     F2 1E 02 FB | 	rdlong	local01, objptr
0812c     0F 2F 02 F6 | 	mov	local09, local01
08130     01 2E 66 F0 | 	shl	local09, #1
08134     0F 2F 02 F1 | 	add	local09, local01
08138     02 2E 66 F0 | 	shl	local09, #2
0813c     03 00 00 FF 
08140     00 E4 85 F1 | 	sub	objptr, ##1536
08144     F2 2E 02 F1 | 	add	local09, objptr
08148     17 2D 62 FC | 	wrlong	local08, local09
0814c     03 00 00 FF 
08150     00 E4 05 F1 | 	add	objptr, ##1536
08154     F2 1E 02 FB | 	rdlong	local01, objptr
08158     0F 2F 02 F6 | 	mov	local09, local01
0815c     01 2E 66 F0 | 	shl	local09, #1
08160     0F 2F 02 F1 | 	add	local09, local01
08164     02 2E 66 F0 | 	shl	local09, #2
08168     03 00 00 FF 
0816c     00 E4 85 F1 | 	sub	objptr, ##1536
08170     F2 2E 02 F1 | 	add	local09, objptr
08174     04 2E 06 F1 | 	add	local09, #4
08178     17 33 62 FC | 	wrlong	local11, local09
0817c     03 00 00 FF 
08180     00 E4 05 F1 | 	add	objptr, ##1536
08184     F2 32 02 FB | 	rdlong	local11, objptr
08188     19 1F 02 F6 | 	mov	local01, local11
0818c     01 1E 66 F0 | 	shl	local01, #1
08190     19 1F 02 F1 | 	add	local01, local11
08194     02 1E 66 F0 | 	shl	local01, #2
08198     03 00 00 FF 
0819c     00 E4 85 F1 | 	sub	objptr, ##1536
081a0     F2 1E 02 F1 | 	add	local01, objptr
081a4     08 1E 06 F1 | 	add	local01, #8
081a8     0F 2B 62 FC | 	wrlong	local07, local01
081ac     03 00 00 FF 
081b0     00 E4 05 F1 | 	add	objptr, ##1536
081b4     F2 2C 02 FB | 	rdlong	local08, objptr
081b8     01 2C 06 F1 | 	add	local08, #1
081bc     F2 2C 62 FC | 	wrlong	local08, objptr
081c0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
081c0                 | '   if numpar>3 then err=45
081c0     04 24 16 F2 | 	cmp	local04, #4 wc
081c4     2D 26 06 36 |  if_ae	mov	local05, #45
081c8                 | '   if i>varnum then err=20
081c8     15 00 00 FF 
081cc     74 E4 85 F1 | 	sub	objptr, ##10868
081d0     F2 2C 02 FB | 	rdlong	local08, objptr
081d4     35 00 00 FF 
081d8     08 E4 85 F1 | 	sub	objptr, ##27144
081dc     16 31 5A F2 | 	cmps	local10, local08 wcz
081e0     14 26 06 16 |  if_a	mov	local05, #20
081e4     04 00 90 FD | 	jmp	#LR__0765
081e8                 | LR__0764
081e8     0E 26 06 F6 | 	mov	local05, #14
081ec                 | LR__0765
081ec                 | ' return err
081ec     13 FB 01 F6 | 	mov	result1, local05
081f0     A7 F0 03 F6 | 	mov	ptra, fp
081f4     B2 00 A0 FD | 	call	#popregs_
081f8                 | _compile_array_assign_ret
081f8     2D 00 64 FD | 	ret
081fc                 | 
081fc                 | ' 
081fc                 | ' '----- compile print command with its ";" and "," modifiers
081fc                 | ' 
081fc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
081fc                 | _compile_print
081fc     0B 4A 05 F6 | 	mov	COUNT_, #11
08200     A8 00 A0 FD | 	call	#pushregs_
08204     00 1E 06 F6 | 	mov	local01, #0
08208     1D 22 06 F6 | 	mov	local03, #29
0820c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0820c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0820c     37 00 00 FF 
08210     44 E4 05 F1 | 	add	objptr, ##28228
08214     F2 24 02 FB | 	rdlong	local04, objptr
08218     03 24 66 F0 | 	shl	local04, #3
0821c     02 00 00 FF 
08220     38 E4 85 F1 | 	sub	objptr, ##1080
08224     F2 24 02 F1 | 	add	local04, objptr
08228     04 24 06 F1 | 	add	local04, #4
0822c     12 25 02 FB | 	rdlong	local04, local04
08230     FE 25 0E F2 | 	cmp	local04, #510 wz
08234     35 00 00 FF 
08238     0C E4 85 F1 | 	sub	objptr, ##27148
0823c     68 01 90 5D |  if_ne	jmp	#LR__0770
08240     20 22 06 F6 | 	mov	local03, #32
08244     0F 27 02 F6 | 	mov	local05, local01
08248     10 29 02 F6 | 	mov	local06, local02
0824c     11 2B 02 F6 | 	mov	local07, local03
08250     4A 00 00 FF 
08254     7C E4 05 F1 | 	add	objptr, ##38012
08258     F2 2C 02 FB | 	rdlong	local08, objptr
0825c     16 2F 02 F6 | 	mov	local09, local08
08260     01 2E 66 F0 | 	shl	local09, #1
08264     16 2F 02 F1 | 	add	local09, local08
08268     02 2E 66 F0 | 	shl	local09, #2
0826c     03 00 00 FF 
08270     00 E4 85 F1 | 	sub	objptr, ##1536
08274     F2 2E 02 F1 | 	add	local09, objptr
08278     17 27 62 FC | 	wrlong	local05, local09
0827c     03 00 00 FF 
08280     00 E4 05 F1 | 	add	objptr, ##1536
08284     F2 26 02 FB | 	rdlong	local05, objptr
08288     13 31 02 F6 | 	mov	local10, local05
0828c     01 30 66 F0 | 	shl	local10, #1
08290     13 31 02 F1 | 	add	local10, local05
08294     02 30 66 F0 | 	shl	local10, #2
08298     03 00 00 FF 
0829c     00 E4 85 F1 | 	sub	objptr, ##1536
082a0     F2 30 02 F1 | 	add	local10, objptr
082a4     04 30 06 F1 | 	add	local10, #4
082a8     18 29 62 FC | 	wrlong	local06, local10
082ac     03 00 00 FF 
082b0     00 E4 05 F1 | 	add	objptr, ##1536
082b4     F2 26 02 FB | 	rdlong	local05, objptr
082b8     13 33 02 F6 | 	mov	local11, local05
082bc     01 32 66 F0 | 	shl	local11, #1
082c0     13 33 02 F1 | 	add	local11, local05
082c4     02 32 66 F0 | 	shl	local11, #2
082c8     03 00 00 FF 
082cc     00 E4 85 F1 | 	sub	objptr, ##1536
082d0     F2 32 02 F1 | 	add	local11, objptr
082d4     08 32 06 F1 | 	add	local11, #8
082d8     19 2B 62 FC | 	wrlong	local07, local11
082dc     03 00 00 FF 
082e0     00 E4 05 F1 | 	add	objptr, ##1536
082e4     F2 26 02 FB | 	rdlong	local05, objptr
082e8     01 26 06 F1 | 	add	local05, #1
082ec     F2 26 62 FC | 	wrlong	local05, objptr
082f0     44 22 06 F6 | 	mov	local03, #68
082f4     0F 27 02 F6 | 	mov	local05, local01
082f8     10 29 02 F6 | 	mov	local06, local02
082fc     11 2B 02 F6 | 	mov	local07, local03
08300     F2 2C 02 FB | 	rdlong	local08, objptr
08304     16 2F 02 F6 | 	mov	local09, local08
08308     01 2E 66 F0 | 	shl	local09, #1
0830c     16 2F 02 F1 | 	add	local09, local08
08310     02 2E 66 F0 | 	shl	local09, #2
08314     03 00 00 FF 
08318     00 E4 85 F1 | 	sub	objptr, ##1536
0831c     F2 2E 02 F1 | 	add	local09, objptr
08320     17 27 62 FC | 	wrlong	local05, local09
08324     03 00 00 FF 
08328     00 E4 05 F1 | 	add	objptr, ##1536
0832c     F2 32 02 FB | 	rdlong	local11, objptr
08330     19 31 02 F6 | 	mov	local10, local11
08334     01 30 66 F0 | 	shl	local10, #1
08338     19 31 02 F1 | 	add	local10, local11
0833c     02 30 66 F0 | 	shl	local10, #2
08340     03 00 00 FF 
08344     00 E4 85 F1 | 	sub	objptr, ##1536
08348     F2 30 02 F1 | 	add	local10, objptr
0834c     04 30 06 F1 | 	add	local10, #4
08350     18 29 62 FC | 	wrlong	local06, local10
08354     03 00 00 FF 
08358     00 E4 05 F1 | 	add	objptr, ##1536
0835c     F2 30 02 FB | 	rdlong	local10, objptr
08360     18 33 02 F6 | 	mov	local11, local10
08364     01 32 66 F0 | 	shl	local11, #1
08368     18 33 02 F1 | 	add	local11, local10
0836c     02 32 66 F0 | 	shl	local11, #2
08370     03 00 00 FF 
08374     00 E4 85 F1 | 	sub	objptr, ##1536
08378     F2 32 02 F1 | 	add	local11, objptr
0837c     08 32 06 F1 | 	add	local11, #8
08380     19 2B 62 FC | 	wrlong	local07, local11
08384     03 00 00 FF 
08388     00 E4 05 F1 | 	add	objptr, ##1536
0838c     F2 26 02 FB | 	rdlong	local05, objptr
08390     01 26 06 F1 | 	add	local05, #1
08394     F2 26 62 FC | 	wrlong	local05, objptr
08398     4A 00 00 FF 
0839c     7C E4 85 F1 | 	sub	objptr, ##38012
083a0     00 FA 05 F6 | 	mov	result1, #0
083a4     20 05 90 FD | 	jmp	#LR__0777
083a8                 | LR__0770
083a8                 | ' do
083a8                 | LR__0771
083a8     F4 17 B0 FD | 	call	#_expr
083ac                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
083ac                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
083ac     37 00 00 FF 
083b0     44 E4 05 F1 | 	add	objptr, ##28228
083b4     F2 24 02 FB | 	rdlong	local04, objptr
083b8     03 24 66 F0 | 	shl	local04, #3
083bc     02 00 00 FF 
083c0     38 E4 85 F1 | 	sub	objptr, ##1080
083c4     F2 24 02 F1 | 	add	local04, objptr
083c8     04 24 06 F1 | 	add	local04, #4
083cc     12 2D 02 FB | 	rdlong	local08, local04
083d0     11 2C 0E F2 | 	cmp	local08, #17 wz
083d4     35 00 00 FF 
083d8     0C E4 85 F1 | 	sub	objptr, ##27148
083dc     60 01 90 5D |  if_ne	jmp	#LR__0772
083e0     21 22 06 F6 | 	mov	local03, #33
083e4     0F 27 02 F6 | 	mov	local05, local01
083e8     10 29 02 F6 | 	mov	local06, local02
083ec     11 2B 02 F6 | 	mov	local07, local03
083f0     4A 00 00 FF 
083f4     7C E4 05 F1 | 	add	objptr, ##38012
083f8     F2 2C 02 FB | 	rdlong	local08, objptr
083fc     16 2F 02 F6 | 	mov	local09, local08
08400     01 2E 66 F0 | 	shl	local09, #1
08404     16 2F 02 F1 | 	add	local09, local08
08408     02 2E 66 F0 | 	shl	local09, #2
0840c     03 00 00 FF 
08410     00 E4 85 F1 | 	sub	objptr, ##1536
08414     F2 2E 02 F1 | 	add	local09, objptr
08418     17 27 62 FC | 	wrlong	local05, local09
0841c     03 00 00 FF 
08420     00 E4 05 F1 | 	add	objptr, ##1536
08424     F2 32 02 FB | 	rdlong	local11, objptr
08428     19 31 02 F6 | 	mov	local10, local11
0842c     01 30 66 F0 | 	shl	local10, #1
08430     19 31 02 F1 | 	add	local10, local11
08434     02 30 66 F0 | 	shl	local10, #2
08438     03 00 00 FF 
0843c     00 E4 85 F1 | 	sub	objptr, ##1536
08440     F2 30 02 F1 | 	add	local10, objptr
08444     04 30 06 F1 | 	add	local10, #4
08448     18 29 62 FC | 	wrlong	local06, local10
0844c     03 00 00 FF 
08450     00 E4 05 F1 | 	add	objptr, ##1536
08454     F2 26 02 FB | 	rdlong	local05, objptr
08458     13 33 02 F6 | 	mov	local11, local05
0845c     01 32 66 F0 | 	shl	local11, #1
08460     13 33 02 F1 | 	add	local11, local05
08464     02 32 66 F0 | 	shl	local11, #2
08468     03 00 00 FF 
0846c     00 E4 85 F1 | 	sub	objptr, ##1536
08470     F2 32 02 F1 | 	add	local11, objptr
08474     08 32 06 F1 | 	add	local11, #8
08478     19 2B 62 FC | 	wrlong	local07, local11
0847c     03 00 00 FF 
08480     00 E4 05 F1 | 	add	objptr, ##1536
08484     F2 26 02 FB | 	rdlong	local05, objptr
08488     01 26 06 F1 | 	add	local05, #1
0848c     F2 26 62 FC | 	wrlong	local05, objptr
08490     44 22 06 F6 | 	mov	local03, #68
08494     0F 27 02 F6 | 	mov	local05, local01
08498     10 29 02 F6 | 	mov	local06, local02
0849c     11 2B 02 F6 | 	mov	local07, local03
084a0     F2 2C 02 FB | 	rdlong	local08, objptr
084a4     16 2F 02 F6 | 	mov	local09, local08
084a8     01 2E 66 F0 | 	shl	local09, #1
084ac     16 2F 02 F1 | 	add	local09, local08
084b0     02 2E 66 F0 | 	shl	local09, #2
084b4     03 00 00 FF 
084b8     00 E4 85 F1 | 	sub	objptr, ##1536
084bc     F2 2E 02 F1 | 	add	local09, objptr
084c0     17 27 62 FC | 	wrlong	local05, local09
084c4     03 00 00 FF 
084c8     00 E4 05 F1 | 	add	objptr, ##1536
084cc     F2 32 02 FB | 	rdlong	local11, objptr
084d0     19 31 02 F6 | 	mov	local10, local11
084d4     01 30 66 F0 | 	shl	local10, #1
084d8     19 31 02 F1 | 	add	local10, local11
084dc     02 30 66 F0 | 	shl	local10, #2
084e0     03 00 00 FF 
084e4     00 E4 85 F1 | 	sub	objptr, ##1536
084e8     F2 30 02 F1 | 	add	local10, objptr
084ec     04 30 06 F1 | 	add	local10, #4
084f0     18 29 62 FC | 	wrlong	local06, local10
084f4     03 00 00 FF 
084f8     00 E4 05 F1 | 	add	objptr, ##1536
084fc     F2 30 02 FB | 	rdlong	local10, objptr
08500     18 33 02 F6 | 	mov	local11, local10
08504     01 32 66 F0 | 	shl	local11, #1
08508     18 33 02 F1 | 	add	local11, local10
0850c     02 32 66 F0 | 	shl	local11, #2
08510     03 00 00 FF 
08514     00 E4 85 F1 | 	sub	objptr, ##1536
08518     F2 32 02 F1 | 	add	local11, objptr
0851c     08 32 06 F1 | 	add	local11, #8
08520     19 2B 62 FC | 	wrlong	local07, local11
08524     03 00 00 FF 
08528     00 E4 05 F1 | 	add	objptr, ##1536
0852c     F2 26 02 FB | 	rdlong	local05, objptr
08530     01 26 06 F1 | 	add	local05, #1
08534     F2 26 62 FC | 	wrlong	local05, objptr
08538     4A 00 00 FF 
0853c     7C E4 85 F1 | 	sub	objptr, ##38012
08540                 | LR__0772
08540                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08540     37 00 00 FF 
08544     44 E4 05 F1 | 	add	objptr, ##28228
08548     F2 24 02 FB | 	rdlong	local04, objptr
0854c     03 24 66 F0 | 	shl	local04, #3
08550     02 00 00 FF 
08554     38 E4 85 F1 | 	sub	objptr, ##1080
08558     F2 24 02 F1 | 	add	local04, objptr
0855c     04 24 06 F1 | 	add	local04, #4
08560     12 2D 02 FB | 	rdlong	local08, local04
08564     12 2C 0E F2 | 	cmp	local08, #18 wz
08568     35 00 00 FF 
0856c     0C E4 85 F1 | 	sub	objptr, ##27148
08570     60 01 90 5D |  if_ne	jmp	#LR__0773
08574     22 22 06 F6 | 	mov	local03, #34
08578     0F 27 02 F6 | 	mov	local05, local01
0857c     10 29 02 F6 | 	mov	local06, local02
08580     11 2B 02 F6 | 	mov	local07, local03
08584     4A 00 00 FF 
08588     7C E4 05 F1 | 	add	objptr, ##38012
0858c     F2 2C 02 FB | 	rdlong	local08, objptr
08590     16 2F 02 F6 | 	mov	local09, local08
08594     01 2E 66 F0 | 	shl	local09, #1
08598     16 2F 02 F1 | 	add	local09, local08
0859c     02 2E 66 F0 | 	shl	local09, #2
085a0     03 00 00 FF 
085a4     00 E4 85 F1 | 	sub	objptr, ##1536
085a8     F2 2E 02 F1 | 	add	local09, objptr
085ac     17 27 62 FC | 	wrlong	local05, local09
085b0     03 00 00 FF 
085b4     00 E4 05 F1 | 	add	objptr, ##1536
085b8     F2 32 02 FB | 	rdlong	local11, objptr
085bc     19 31 02 F6 | 	mov	local10, local11
085c0     01 30 66 F0 | 	shl	local10, #1
085c4     19 31 02 F1 | 	add	local10, local11
085c8     02 30 66 F0 | 	shl	local10, #2
085cc     03 00 00 FF 
085d0     00 E4 85 F1 | 	sub	objptr, ##1536
085d4     F2 30 02 F1 | 	add	local10, objptr
085d8     04 30 06 F1 | 	add	local10, #4
085dc     18 29 62 FC | 	wrlong	local06, local10
085e0     03 00 00 FF 
085e4     00 E4 05 F1 | 	add	objptr, ##1536
085e8     F2 26 02 FB | 	rdlong	local05, objptr
085ec     13 33 02 F6 | 	mov	local11, local05
085f0     01 32 66 F0 | 	shl	local11, #1
085f4     13 33 02 F1 | 	add	local11, local05
085f8     02 32 66 F0 | 	shl	local11, #2
085fc     03 00 00 FF 
08600     00 E4 85 F1 | 	sub	objptr, ##1536
08604     F2 32 02 F1 | 	add	local11, objptr
08608     08 32 06 F1 | 	add	local11, #8
0860c     19 2B 62 FC | 	wrlong	local07, local11
08610     03 00 00 FF 
08614     00 E4 05 F1 | 	add	objptr, ##1536
08618     F2 26 02 FB | 	rdlong	local05, objptr
0861c     01 26 06 F1 | 	add	local05, #1
08620     F2 26 62 FC | 	wrlong	local05, objptr
08624     44 22 06 F6 | 	mov	local03, #68
08628     0F 27 02 F6 | 	mov	local05, local01
0862c     10 29 02 F6 | 	mov	local06, local02
08630     11 2B 02 F6 | 	mov	local07, local03
08634     F2 2C 02 FB | 	rdlong	local08, objptr
08638     16 2F 02 F6 | 	mov	local09, local08
0863c     01 2E 66 F0 | 	shl	local09, #1
08640     16 2F 02 F1 | 	add	local09, local08
08644     02 2E 66 F0 | 	shl	local09, #2
08648     03 00 00 FF 
0864c     00 E4 85 F1 | 	sub	objptr, ##1536
08650     F2 2E 02 F1 | 	add	local09, objptr
08654     17 27 62 FC | 	wrlong	local05, local09
08658     03 00 00 FF 
0865c     00 E4 05 F1 | 	add	objptr, ##1536
08660     F2 32 02 FB | 	rdlong	local11, objptr
08664     19 31 02 F6 | 	mov	local10, local11
08668     01 30 66 F0 | 	shl	local10, #1
0866c     19 31 02 F1 | 	add	local10, local11
08670     02 30 66 F0 | 	shl	local10, #2
08674     03 00 00 FF 
08678     00 E4 85 F1 | 	sub	objptr, ##1536
0867c     F2 30 02 F1 | 	add	local10, objptr
08680     04 30 06 F1 | 	add	local10, #4
08684     18 29 62 FC | 	wrlong	local06, local10
08688     03 00 00 FF 
0868c     00 E4 05 F1 | 	add	objptr, ##1536
08690     F2 30 02 FB | 	rdlong	local10, objptr
08694     18 33 02 F6 | 	mov	local11, local10
08698     01 32 66 F0 | 	shl	local11, #1
0869c     18 33 02 F1 | 	add	local11, local10
086a0     02 32 66 F0 | 	shl	local11, #2
086a4     03 00 00 FF 
086a8     00 E4 85 F1 | 	sub	objptr, ##1536
086ac     F2 32 02 F1 | 	add	local11, objptr
086b0     08 32 06 F1 | 	add	local11, #8
086b4     19 2B 62 FC | 	wrlong	local07, local11
086b8     03 00 00 FF 
086bc     00 E4 05 F1 | 	add	objptr, ##1536
086c0     F2 26 02 FB | 	rdlong	local05, objptr
086c4     01 26 06 F1 | 	add	local05, #1
086c8     F2 26 62 FC | 	wrlong	local05, objptr
086cc     4A 00 00 FF 
086d0     7C E4 85 F1 | 	sub	objptr, ##38012
086d4                 | LR__0773
086d4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
086d4     37 00 00 FF 
086d8     44 E4 05 F1 | 	add	objptr, ##28228
086dc     F2 24 02 FB | 	rdlong	local04, objptr
086e0     03 24 66 F0 | 	shl	local04, #3
086e4     02 00 00 FF 
086e8     38 E4 85 F1 | 	sub	objptr, ##1080
086ec     F2 24 02 F1 | 	add	local04, objptr
086f0     04 24 06 F1 | 	add	local04, #4
086f4     12 2D 02 FB | 	rdlong	local08, local04
086f8     FE 2D 0E F2 | 	cmp	local08, #510 wz
086fc     35 00 00 FF 
08700     0C E4 85 F1 | 	sub	objptr, ##27148
08704     B8 00 90 5D |  if_ne	jmp	#LR__0774
08708     44 22 06 F6 | 	mov	local03, #68
0870c     0F 27 02 F6 | 	mov	local05, local01
08710     10 29 02 F6 | 	mov	local06, local02
08714     11 2B 02 F6 | 	mov	local07, local03
08718     4A 00 00 FF 
0871c     7C E4 05 F1 | 	add	objptr, ##38012
08720     F2 2C 02 FB | 	rdlong	local08, objptr
08724     16 2F 02 F6 | 	mov	local09, local08
08728     01 2E 66 F0 | 	shl	local09, #1
0872c     16 2F 02 F1 | 	add	local09, local08
08730     02 2E 66 F0 | 	shl	local09, #2
08734     03 00 00 FF 
08738     00 E4 85 F1 | 	sub	objptr, ##1536
0873c     F2 2E 02 F1 | 	add	local09, objptr
08740     17 27 62 FC | 	wrlong	local05, local09
08744     03 00 00 FF 
08748     00 E4 05 F1 | 	add	objptr, ##1536
0874c     F2 32 02 FB | 	rdlong	local11, objptr
08750     19 31 02 F6 | 	mov	local10, local11
08754     01 30 66 F0 | 	shl	local10, #1
08758     19 31 02 F1 | 	add	local10, local11
0875c     02 30 66 F0 | 	shl	local10, #2
08760     03 00 00 FF 
08764     00 E4 85 F1 | 	sub	objptr, ##1536
08768     F2 30 02 F1 | 	add	local10, objptr
0876c     04 30 06 F1 | 	add	local10, #4
08770     18 29 62 FC | 	wrlong	local06, local10
08774     03 00 00 FF 
08778     00 E4 05 F1 | 	add	objptr, ##1536
0877c     F2 30 02 FB | 	rdlong	local10, objptr
08780     18 33 02 F6 | 	mov	local11, local10
08784     01 32 66 F0 | 	shl	local11, #1
08788     18 33 02 F1 | 	add	local11, local10
0878c     02 32 66 F0 | 	shl	local11, #2
08790     03 00 00 FF 
08794     00 E4 85 F1 | 	sub	objptr, ##1536
08798     F2 32 02 F1 | 	add	local11, objptr
0879c     08 32 06 F1 | 	add	local11, #8
087a0     19 2B 62 FC | 	wrlong	local07, local11
087a4     03 00 00 FF 
087a8     00 E4 05 F1 | 	add	objptr, ##1536
087ac     F2 26 02 FB | 	rdlong	local05, objptr
087b0     01 26 06 F1 | 	add	local05, #1
087b4     F2 26 62 FC | 	wrlong	local05, objptr
087b8     4A 00 00 FF 
087bc     7C E4 85 F1 | 	sub	objptr, ##38012
087c0                 | LR__0774
087c0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
087c0     37 00 00 FF 
087c4     44 E4 05 F1 | 	add	objptr, ##28228
087c8     F2 24 02 FB | 	rdlong	local04, objptr
087cc     03 24 66 F0 | 	shl	local04, #3
087d0     02 00 00 FF 
087d4     38 E4 85 F1 | 	sub	objptr, ##1080
087d8     F2 24 02 F1 | 	add	local04, objptr
087dc     04 24 06 F1 | 	add	local04, #4
087e0     12 2D 02 FB | 	rdlong	local08, local04
087e4     11 2C 0E F2 | 	cmp	local08, #17 wz
087e8     35 00 00 FF 
087ec     0C E4 85 F1 | 	sub	objptr, ##27148
087f0     6C 00 90 AD |  if_e	jmp	#LR__0775
087f4     37 00 00 FF 
087f8     44 E4 05 F1 | 	add	objptr, ##28228
087fc     F2 2C 02 FB | 	rdlong	local08, objptr
08800     03 2C 66 F0 | 	shl	local08, #3
08804     02 00 00 FF 
08808     38 E4 85 F1 | 	sub	objptr, ##1080
0880c     F2 2C 02 F1 | 	add	local08, objptr
08810     04 2C 06 F1 | 	add	local08, #4
08814     16 2D 02 FB | 	rdlong	local08, local08
08818     12 2C 0E F2 | 	cmp	local08, #18 wz
0881c     35 00 00 FF 
08820     0C E4 85 F1 | 	sub	objptr, ##27148
08824     38 00 90 AD |  if_e	jmp	#LR__0775
08828     37 00 00 FF 
0882c     44 E4 05 F1 | 	add	objptr, ##28228
08830     F2 32 02 FB | 	rdlong	local11, objptr
08834     03 32 66 F0 | 	shl	local11, #3
08838     02 00 00 FF 
0883c     38 E4 85 F1 | 	sub	objptr, ##1080
08840     F2 32 02 F1 | 	add	local11, objptr
08844     04 32 06 F1 | 	add	local11, #4
08848     19 33 02 FB | 	rdlong	local11, local11
0884c     FE 33 0E F2 | 	cmp	local11, #510 wz
08850     35 00 00 FF 
08854     0C E4 85 F1 | 	sub	objptr, ##27148
08858     16 FA 05 56 |  if_ne	mov	result1, #22
0885c     68 00 90 5D |  if_ne	jmp	#LR__0777
08860                 | LR__0775
08860     37 00 00 FF 
08864     44 E4 05 F1 | 	add	objptr, ##28228
08868     F2 24 02 FB | 	rdlong	local04, objptr
0886c     01 24 06 F1 | 	add	local04, #1
08870     F2 24 62 FC | 	wrlong	local04, objptr
08874     03 24 66 F0 | 	shl	local04, #3
08878     02 00 00 FF 
0887c     38 E4 85 F1 | 	sub	objptr, ##1080
08880     F2 24 02 F1 | 	add	local04, objptr
08884     04 24 06 F1 | 	add	local04, #4
08888     12 2D 02 FB | 	rdlong	local08, local04
0888c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08890     35 00 00 FF 
08894     0C E4 85 F1 | 	sub	objptr, ##27148
08898     28 00 90 AD |  if_e	jmp	#LR__0776
0889c     37 00 00 FF 
088a0     44 E4 05 F1 | 	add	objptr, ##28228
088a4     F2 32 02 FB | 	rdlong	local11, objptr
088a8     0E 00 00 FF 
088ac     1C E4 05 F1 | 	add	objptr, ##7196
088b0     F2 30 02 FB | 	rdlong	local10, objptr
088b4     45 00 00 FF 
088b8     60 E4 85 F1 | 	sub	objptr, ##35424
088bc     18 33 52 F2 | 	cmps	local11, local10 wc
088c0     E4 FA 9F CD |  if_b	jmp	#LR__0771
088c4                 | LR__0776
088c4                 | ' return 0
088c4     00 FA 05 F6 | 	mov	result1, #0
088c8                 | LR__0777
088c8     A7 F0 03 F6 | 	mov	ptra, fp
088cc     B2 00 A0 FD | 	call	#popregs_
088d0                 | _compile_print_ret
088d0     2D 00 64 FD | 	ret
088d4                 | 
088d4                 | ' 
088d4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
088d4                 | ' 
088d4                 | ' function compile_if(aline as ulong) as ulong  
088d4                 | _compile_if
088d4     09 4A 05 F6 | 	mov	COUNT_, #9
088d8     A8 00 A0 FD | 	call	#pushregs_
088dc                 | _compile_if_enter
088dc     09 25 02 F6 | 	mov	local04, arg01
088e0                 | ' return expr()
088e0     BC 12 B0 FD | 	call	#_expr
088e4     37 00 00 FF 
088e8     44 E4 05 F1 | 	add	objptr, ##28228
088ec     F2 14 02 FB | 	rdlong	arg02, objptr
088f0     0A 27 02 F6 | 	mov	local05, arg02
088f4     03 26 66 F0 | 	shl	local05, #3
088f8     02 00 00 FF 
088fc     38 E4 85 F1 | 	sub	objptr, ##1080
08900     F2 26 02 F1 | 	add	local05, objptr
08904     04 26 06 F1 | 	add	local05, #4
08908     13 27 02 FB | 	rdlong	local05, local05
0890c     01 14 06 F1 | 	add	arg02, #1
08910     02 00 00 FF 
08914     38 E4 05 F1 | 	add	objptr, ##1080
08918     F2 14 62 FC | 	wrlong	arg02, objptr
0891c     37 00 00 FF 
08920     44 E4 85 F1 | 	sub	objptr, ##28228
08924                 | ' 
08924                 | ' err=compile_fun_1p()
08924                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08924     5B 26 0E F2 | 	cmp	local05, #91 wz
08928     34 FA 05 56 |  if_ne	mov	result1, #52
0892c     20 01 90 5D |  if_ne	jmp	#LR__0782
08930     58 22 06 F6 | 	mov	local03, #88
08934     0F 29 02 F6 | 	mov	local06, local01
08938     10 2B 02 F6 | 	mov	local07, local02
0893c     11 15 02 F6 | 	mov	arg02, local03
08940     4A 00 00 FF 
08944     7C E4 05 F1 | 	add	objptr, ##38012
08948     F2 12 02 FB | 	rdlong	arg01, objptr
0894c     09 2D 02 F6 | 	mov	local08, arg01
08950     01 2C 66 F0 | 	shl	local08, #1
08954     09 2D 02 F1 | 	add	local08, arg01
08958     02 2C 66 F0 | 	shl	local08, #2
0895c     03 00 00 FF 
08960     00 E4 85 F1 | 	sub	objptr, ##1536
08964     F2 2C 02 F1 | 	add	local08, objptr
08968     16 29 62 FC | 	wrlong	local06, local08
0896c     03 00 00 FF 
08970     00 E4 05 F1 | 	add	objptr, ##1536
08974     F2 28 02 FB | 	rdlong	local06, objptr
08978     14 13 02 F6 | 	mov	arg01, local06
0897c     01 12 66 F0 | 	shl	arg01, #1
08980     14 13 02 F1 | 	add	arg01, local06
08984     02 12 66 F0 | 	shl	arg01, #2
08988     03 00 00 FF 
0898c     00 E4 85 F1 | 	sub	objptr, ##1536
08990     F2 12 02 F1 | 	add	arg01, objptr
08994     04 12 06 F1 | 	add	arg01, #4
08998     09 2B 62 FC | 	wrlong	local07, arg01
0899c     03 00 00 FF 
089a0     00 E4 05 F1 | 	add	objptr, ##1536
089a4     F2 28 02 FB | 	rdlong	local06, objptr
089a8     14 13 02 F6 | 	mov	arg01, local06
089ac     01 12 66 F0 | 	shl	arg01, #1
089b0     14 13 02 F1 | 	add	arg01, local06
089b4     02 12 66 F0 | 	shl	arg01, #2
089b8     03 00 00 FF 
089bc     00 E4 85 F1 | 	sub	objptr, ##1536
089c0     F2 12 02 F1 | 	add	arg01, objptr
089c4     08 12 06 F1 | 	add	arg01, #8
089c8     09 15 62 FC | 	wrlong	arg02, arg01
089cc     03 00 00 FF 
089d0     00 E4 05 F1 | 	add	objptr, ##1536
089d4     F2 28 02 FB | 	rdlong	local06, objptr
089d8     01 28 06 F1 | 	add	local06, #1
089dc     F2 28 62 FC | 	wrlong	local06, objptr
089e0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
089e0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
089e0     13 00 00 FF 
089e4     38 E4 85 F1 | 	sub	objptr, ##9784
089e8     F2 14 02 FB | 	rdlong	arg02, objptr
089ec     01 14 06 F1 | 	add	arg02, #1
089f0     03 14 66 F0 | 	shl	arg02, #3
089f4     02 00 00 FF 
089f8     38 E4 85 F1 | 	sub	objptr, ##1080
089fc     F2 14 02 F1 | 	add	arg02, objptr
08a00     0A 13 02 FB | 	rdlong	arg01, arg02
08a04     35 00 00 FF 
08a08     0C E4 85 F1 | 	sub	objptr, ##27148
08a0c                 | ' 
08a0c                 | ' select case s
08a0c     81 01 00 FF 
08a10     92 14 06 F6 | 	mov	arg02, ##@LR__5143
08a14     54 7E B1 FD | 	call	#__system___string_cmp
08a18     00 FA 0D F2 | 	cmp	result1, #0 wz
08a1c     1B FA 05 A6 |  if_e	mov	result1, #27
08a20     00 FA 05 56 |  if_ne	mov	result1, #0
08a24     00 FA 0D F2 | 	cmp	result1, #0 wz
08a28     10 00 90 AD |  if_e	jmp	#LR__0780
08a2c     05 12 06 F6 | 	mov	arg01, #5
08a30     88 EC BF FD | 	call	#_compile_immediate_assign
08a34     FD 2E 02 F6 | 	mov	local09, result1
08a38     10 00 90 FD | 	jmp	#LR__0781
08a3c                 | LR__0780
08a3c     05 12 06 F6 | 	mov	arg01, #5
08a40     12 15 02 F6 | 	mov	arg02, local04
08a44     74 E3 BF FD | 	call	#_compile_immediate
08a48     FD 2E 02 F6 | 	mov	local09, result1
08a4c                 | LR__0781
08a4c                 | ' return err
08a4c     17 FB 01 F6 | 	mov	result1, local09
08a50                 | LR__0782
08a50     A7 F0 03 F6 | 	mov	ptra, fp
08a54     B2 00 A0 FD | 	call	#popregs_
08a58                 | _compile_if_ret
08a58     2D 00 64 FD | 	ret
08a5c                 | 
08a5c                 | ' 
08a5c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08a5c                 | ' 
08a5c                 | ' function compile_else(aline as ulong) as ulong  
08a5c                 | _compile_else
08a5c     07 4A 05 F6 | 	mov	COUNT_, #7
08a60     A8 00 A0 FD | 	call	#pushregs_
08a64                 | _compile_else_enter
08a64     09 25 02 F6 | 	mov	local04, arg01
08a68     5A 22 06 F6 | 	mov	local03, #90
08a6c     0F 27 02 F6 | 	mov	local05, local01
08a70     10 29 02 F6 | 	mov	local06, local02
08a74     11 1F 02 F6 | 	mov	local01, local03
08a78     4A 00 00 FF 
08a7c     7C E4 05 F1 | 	add	objptr, ##38012
08a80     F2 14 02 FB | 	rdlong	arg02, objptr
08a84     0A 13 02 F6 | 	mov	arg01, arg02
08a88     01 12 66 F0 | 	shl	arg01, #1
08a8c     0A 13 02 F1 | 	add	arg01, arg02
08a90     02 12 66 F0 | 	shl	arg01, #2
08a94     03 00 00 FF 
08a98     00 E4 85 F1 | 	sub	objptr, ##1536
08a9c     F2 12 02 F1 | 	add	arg01, objptr
08aa0     09 27 62 FC | 	wrlong	local05, arg01
08aa4     03 00 00 FF 
08aa8     00 E4 05 F1 | 	add	objptr, ##1536
08aac     F2 26 02 FB | 	rdlong	local05, objptr
08ab0     13 15 02 F6 | 	mov	arg02, local05
08ab4     01 14 66 F0 | 	shl	arg02, #1
08ab8     13 15 02 F1 | 	add	arg02, local05
08abc     02 14 66 F0 | 	shl	arg02, #2
08ac0     03 00 00 FF 
08ac4     00 E4 85 F1 | 	sub	objptr, ##1536
08ac8     F2 14 02 F1 | 	add	arg02, objptr
08acc     04 14 06 F1 | 	add	arg02, #4
08ad0     0A 29 62 FC | 	wrlong	local06, arg02
08ad4     03 00 00 FF 
08ad8     00 E4 05 F1 | 	add	objptr, ##1536
08adc     F2 28 02 FB | 	rdlong	local06, objptr
08ae0     14 27 02 F6 | 	mov	local05, local06
08ae4     01 26 66 F0 | 	shl	local05, #1
08ae8     14 27 02 F1 | 	add	local05, local06
08aec     02 26 66 F0 | 	shl	local05, #2
08af0     03 00 00 FF 
08af4     00 E4 85 F1 | 	sub	objptr, ##1536
08af8     F2 26 02 F1 | 	add	local05, objptr
08afc     08 26 06 F1 | 	add	local05, #8
08b00     13 1F 62 FC | 	wrlong	local01, local05
08b04     03 00 00 FF 
08b08     00 E4 05 F1 | 	add	objptr, ##1536
08b0c     F2 26 02 FB | 	rdlong	local05, objptr
08b10     01 26 06 F1 | 	add	local05, #1
08b14     F2 26 62 FC | 	wrlong	local05, objptr
08b18                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08b18                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08b18     13 00 00 FF 
08b1c     38 E4 85 F1 | 	sub	objptr, ##9784
08b20     F2 28 02 FB | 	rdlong	local06, objptr
08b24     01 28 06 F1 | 	add	local06, #1
08b28     03 28 66 F0 | 	shl	local06, #3
08b2c     02 00 00 FF 
08b30     38 E4 85 F1 | 	sub	objptr, ##1080
08b34     F2 28 02 F1 | 	add	local06, objptr
08b38     14 13 02 FB | 	rdlong	arg01, local06
08b3c     35 00 00 FF 
08b40     0C E4 85 F1 | 	sub	objptr, ##27148
08b44                 | ' 
08b44                 | ' select case s
08b44     81 01 00 FF 
08b48     92 14 06 F6 | 	mov	arg02, ##@LR__5143
08b4c     1C 7D B1 FD | 	call	#__system___string_cmp
08b50     00 FA 0D F2 | 	cmp	result1, #0 wz
08b54     1B FA 05 A6 |  if_e	mov	result1, #27
08b58     00 FA 05 56 |  if_ne	mov	result1, #0
08b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
08b60     10 00 90 AD |  if_e	jmp	#LR__0790
08b64     05 12 06 F6 | 	mov	arg01, #5
08b68     50 EB BF FD | 	call	#_compile_immediate_assign
08b6c     FD 2A 02 F6 | 	mov	local07, result1
08b70     10 00 90 FD | 	jmp	#LR__0791
08b74                 | LR__0790
08b74     05 12 06 F6 | 	mov	arg01, #5
08b78     12 15 02 F6 | 	mov	arg02, local04
08b7c     3C E2 BF FD | 	call	#_compile_immediate
08b80     FD 2A 02 F6 | 	mov	local07, result1
08b84                 | LR__0791
08b84                 | ' return err
08b84     15 FB 01 F6 | 	mov	result1, local07
08b88     A7 F0 03 F6 | 	mov	ptra, fp
08b8c     B2 00 A0 FD | 	call	#popregs_
08b90                 | _compile_else_ret
08b90     2D 00 64 FD | 	ret
08b94                 | 
08b94                 | ' 
08b94                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
08b94                 | ' 
08b94                 | ' function compile_dim() as ulong  
08b94                 | _compile_dim
08b94     11 4A 05 F6 | 	mov	COUNT_, #17
08b98     A8 00 A0 FD | 	call	#pushregs_
08b9c     01 1E 06 F6 | 	mov	local01, #1
08ba0     01 20 06 F6 | 	mov	local02, #1
08ba4     01 22 06 F6 | 	mov	local03, #1
08ba8                 | ' 
08ba8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08ba8                 | ' if isname(lparts(ct).part$) then 
08ba8     37 00 00 FF 
08bac     44 E4 05 F1 | 	add	objptr, ##28228
08bb0     F2 18 02 FB | 	rdlong	arg04, objptr
08bb4     03 18 66 F0 | 	shl	arg04, #3
08bb8     02 00 00 FF 
08bbc     38 E4 85 F1 | 	sub	objptr, ##1080
08bc0     F2 18 02 F1 | 	add	arg04, objptr
08bc4     0C 13 02 FB | 	rdlong	arg01, arg04
08bc8     35 00 00 FF 
08bcc     0C E4 85 F1 | 	sub	objptr, ##27148
08bd0     40 D0 BF FD | 	call	#_isname
08bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
08bd8     80 05 90 AD |  if_e	jmp	#LR__0823
08bdc     37 00 00 FF 
08be0     44 E4 05 F1 | 	add	objptr, ##28228
08be4     F2 24 02 FB | 	rdlong	local04, objptr
08be8     03 24 66 F0 | 	shl	local04, #3
08bec     02 00 00 FF 
08bf0     38 E4 85 F1 | 	sub	objptr, ##1080
08bf4     F2 24 02 F1 | 	add	local04, objptr
08bf8     12 27 02 FB | 	rdlong	local05, local04
08bfc     01 28 66 F6 | 	neg	local06, #1
08c00                 | '   varname2$=lparts(ct).part$ 
08c00                 | '   j=-1
08c00                 | '   if varnum>0 then
08c00     04 E4 85 F1 | 	sub	objptr, #4
08c04     F2 2A 02 FB | 	rdlong	local07, objptr
08c08     35 00 00 FF 
08c0c     08 E4 85 F1 | 	sub	objptr, ##27144
08c10     01 2A 56 F2 | 	cmps	local07, #1 wc
08c14     58 00 90 CD |  if_b	jmp	#LR__0802
08c18                 | '     for i=0 to varnum-1
08c18     00 2C 06 F6 | 	mov	local08, #0
08c1c     35 00 00 FF 
08c20     08 E4 05 F1 | 	add	objptr, ##27144
08c24     F2 2E 02 FB | 	rdlong	local09, objptr
08c28     35 00 00 FF 
08c2c     08 E4 85 F1 | 	sub	objptr, ##27144
08c30                 | LR__0800
08c30     17 2D 52 F2 | 	cmps	local08, local09 wc
08c34     38 00 90 3D |  if_ae	jmp	#LR__0801
08c38                 | '       if variables(i).name=varname2$ then j=i : exit
08c38     16 25 02 F6 | 	mov	local04, local08
08c3c     04 24 66 F0 | 	shl	local04, #4
08c40     14 00 00 FF 
08c44     F8 E5 05 F1 | 	add	objptr, ##10744
08c48     F2 24 02 F1 | 	add	local04, objptr
08c4c     12 13 02 FB | 	rdlong	arg01, local04
08c50     13 15 02 F6 | 	mov	arg02, local05
08c54     14 00 00 FF 
08c58     F8 E5 85 F1 | 	sub	objptr, ##10744
08c5c     0C 7C B1 FD | 	call	#__system___string_cmp
08c60     00 FA 0D F2 | 	cmp	result1, #0 wz
08c64     16 29 02 A6 |  if_e	mov	local06, local08
08c68     01 2C 06 51 |  if_ne	add	local08, #1
08c6c     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08c70                 | LR__0801
08c70                 | LR__0802
08c70                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08c70     FF FF 7F FF 
08c74     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08c78     35 00 00 AF 
08c7c     08 E4 05 A1 |  if_e	add	objptr, ##27144
08c80     F2 28 02 AB |  if_e	rdlong	local06, objptr
08c84     35 00 00 AF 
08c88     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08c8c     78 00 90 AD |  if_e	jmp	#LR__0803
08c90     00 12 06 F6 | 	mov	arg01, #0
08c94     10 D6 B1 FD | 	call	#__system___getiolock_0542
08c98     FD 12 02 F6 | 	mov	arg01, result1
08c9c     A4 7B B1 FD | 	call	#__system___lockmem
08ca0     83 01 00 FF 
08ca4     A7 14 06 F6 | 	mov	arg02, ##@LR__5377
08ca8     00 12 06 F6 | 	mov	arg01, #0
08cac     00 16 06 F6 | 	mov	arg03, #0
08cb0     84 88 B1 FD | 	call	#__system___basic_print_string
08cb4     51 00 00 FF 
08cb8     C4 E5 05 F1 | 	add	objptr, ##41924
08cbc     F2 14 02 FB | 	rdlong	arg02, objptr
08cc0     51 00 00 FF 
08cc4     C4 E5 85 F1 | 	sub	objptr, ##41924
08cc8     00 12 06 F6 | 	mov	arg01, #0
08ccc     00 16 06 F6 | 	mov	arg03, #0
08cd0     0A 18 06 F6 | 	mov	arg04, #10
08cd4     E4 88 B1 FD | 	call	#__system___basic_print_unsigned
08cd8     83 01 00 FF 
08cdc     B5 14 06 F6 | 	mov	arg02, ##@LR__5378
08ce0     00 12 06 F6 | 	mov	arg01, #0
08ce4     00 16 06 F6 | 	mov	arg03, #0
08ce8     4C 88 B1 FD | 	call	#__system___basic_print_string
08cec     00 12 06 F6 | 	mov	arg01, #0
08cf0     0A 14 06 F6 | 	mov	arg02, #10
08cf4     00 16 06 F6 | 	mov	arg03, #0
08cf8     E4 87 B1 FD | 	call	#__system___basic_print_char
08cfc     00 12 06 F6 | 	mov	arg01, #0
08d00     A4 D5 B1 FD | 	call	#__system___getiolock_0542
08d04     FD 00 68 FC | 	wrlong	#0, result1
08d08                 | LR__0803
08d08                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
08d08     37 00 00 FF 
08d0c     44 E4 05 F1 | 	add	objptr, ##28228
08d10     F2 14 02 FB | 	rdlong	arg02, objptr
08d14     01 14 06 F1 | 	add	arg02, #1
08d18     03 14 66 F0 | 	shl	arg02, #3
08d1c     02 00 00 FF 
08d20     38 E4 85 F1 | 	sub	objptr, ##1080
08d24     F2 14 02 F1 | 	add	arg02, objptr
08d28     0A 13 02 FB | 	rdlong	arg01, arg02
08d2c     83 01 00 FF 
08d30     D6 14 06 F6 | 	mov	arg02, ##@LR__5379
08d34     35 00 00 FF 
08d38     0C E4 85 F1 | 	sub	objptr, ##27148
08d3c     2C 7B B1 FD | 	call	#__system___string_cmp
08d40     00 FA 0D F2 | 	cmp	result1, #0 wz
08d44     44 00 90 AD |  if_e	jmp	#LR__0804
08d48     37 00 00 FF 
08d4c     44 E4 05 F1 | 	add	objptr, ##28228
08d50     F2 2E 02 FB | 	rdlong	local09, objptr
08d54     01 2E 06 F1 | 	add	local09, #1
08d58     03 2E 66 F0 | 	shl	local09, #3
08d5c     02 00 00 FF 
08d60     38 E4 85 F1 | 	sub	objptr, ##1080
08d64     F2 2E 02 F1 | 	add	local09, objptr
08d68     17 13 02 FB | 	rdlong	arg01, local09
08d6c     83 01 00 FF 
08d70     D8 14 06 F6 | 	mov	arg02, ##@LR__5380
08d74     35 00 00 FF 
08d78     0C E4 85 F1 | 	sub	objptr, ##27148
08d7c     EC 7A B1 FD | 	call	#__system___string_cmp
08d80     00 FA 0D F2 | 	cmp	result1, #0 wz
08d84     2B FA 05 56 |  if_ne	mov	result1, #43
08d88     D8 04 90 5D |  if_ne	jmp	#LR__0825
08d8c                 | LR__0804
08d8c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
08d8c     37 00 00 FF 
08d90     44 E4 05 F1 | 	add	objptr, ##28228
08d94     F2 14 02 FB | 	rdlong	arg02, objptr
08d98     01 14 06 F1 | 	add	arg02, #1
08d9c     03 14 66 F0 | 	shl	arg02, #3
08da0     02 00 00 FF 
08da4     38 E4 85 F1 | 	sub	objptr, ##1080
08da8     F2 14 02 F1 | 	add	arg02, objptr
08dac     0A 13 02 FB | 	rdlong	arg01, arg02
08db0     83 01 00 FF 
08db4     DB 14 06 F6 | 	mov	arg02, ##@LR__5381
08db8     35 00 00 FF 
08dbc     0C E4 85 F1 | 	sub	objptr, ##27148
08dc0     A8 7A B1 FD | 	call	#__system___string_cmp
08dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
08dc8     37 00 00 AF 
08dcc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08dd0     F2 30 02 AB |  if_e	rdlong	local10, objptr
08dd4     37 00 00 AF 
08dd8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08ddc     01 30 06 A1 |  if_e	add	local10, #1
08de0     5C 01 90 AD |  if_e	jmp	#LR__0809
08de4     37 00 00 FF 
08de8     44 E4 05 F1 | 	add	objptr, ##28228
08dec     F2 30 02 FB | 	rdlong	local10, objptr
08df0     37 00 00 FF 
08df4     44 E4 85 F1 | 	sub	objptr, ##28228
08df8     02 30 06 F1 | 	add	local10, #2
08dfc     00 32 06 F6 | 	mov	local11, #0
08e00                 | '   l=ct+2 : m=0 : do
08e00                 | LR__0805
08e00                 | '   if isdec(lparts(l).part$) then 
08e00     18 25 02 F6 | 	mov	local04, local10
08e04     03 24 66 F0 | 	shl	local04, #3
08e08     35 00 00 FF 
08e0c     0C E4 05 F1 | 	add	objptr, ##27148
08e10     F2 24 02 F1 | 	add	local04, objptr
08e14     12 13 02 FB | 	rdlong	arg01, local04
08e18     35 00 00 FF 
08e1c     0C E4 85 F1 | 	sub	objptr, ##27148
08e20     F4 D6 BF FD | 	call	#_isdec
08e24     00 FA 0D F2 | 	cmp	result1, #0 wz
08e28     44 00 90 AD |  if_e	jmp	#LR__0806
08e2c     19 35 02 F6 | 	mov	local12, local11
08e30     0F 35 06 F1 | 	add	local12, #local01
08e34     18 2F 02 F6 | 	mov	local09, local10
08e38     03 2E 66 F0 | 	shl	local09, #3
08e3c     35 00 00 FF 
08e40     0C E4 05 F1 | 	add	objptr, ##27148
08e44     F2 2E 02 F1 | 	add	local09, objptr
08e48     17 13 02 FB | 	rdlong	arg01, local09
08e4c     00 14 06 F6 | 	mov	arg02, #0
08e50     35 00 00 FF 
08e54     0C E4 85 F1 | 	sub	objptr, ##27148
08e58     14 AC B1 FD | 	call	#__system____builtin_atoi
08e5c     FD 36 02 F6 | 	mov	local13, result1
08e60                 | 	'.live	local13
08e60                 | 	'.live	local12
08e60     00 34 8E F9 | 	altd	local12, #0
08e64     1B 35 02 F6 | 	mov	local12, local13
08e68     01 32 06 F1 | 	add	local11, #1
08e6c     08 00 90 FD | 	jmp	#LR__0807
08e70                 | LR__0806
08e70                 | '     return(17)
08e70     11 FA 05 F6 | 	mov	result1, #17
08e74     EC 03 90 FD | 	jmp	#LR__0825
08e78                 | LR__0807
08e78                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
08e78     18 25 02 F6 | 	mov	local04, local10
08e7c     01 24 06 F1 | 	add	local04, #1
08e80     03 24 66 F0 | 	shl	local04, #3
08e84     35 00 00 FF 
08e88     0C E4 05 F1 | 	add	objptr, ##27148
08e8c     F2 24 02 F1 | 	add	local04, objptr
08e90     12 13 02 FB | 	rdlong	arg01, local04
08e94     83 01 00 FF 
08e98     DE 14 06 F6 | 	mov	arg02, ##@LR__5382
08e9c     35 00 00 FF 
08ea0     0C E4 85 F1 | 	sub	objptr, ##27148
08ea4     C4 79 B1 FD | 	call	#__system___string_cmp
08ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
08eac     3C 00 90 AD |  if_e	jmp	#LR__0808
08eb0     18 37 02 F6 | 	mov	local13, local10
08eb4     01 36 06 F1 | 	add	local13, #1
08eb8     03 36 66 F0 | 	shl	local13, #3
08ebc     35 00 00 FF 
08ec0     0C E4 05 F1 | 	add	objptr, ##27148
08ec4     F2 36 02 F1 | 	add	local13, objptr
08ec8     1B 13 02 FB | 	rdlong	arg01, local13
08ecc     83 01 00 FF 
08ed0     E0 14 06 F6 | 	mov	arg02, ##@LR__5383
08ed4     35 00 00 FF 
08ed8     0C E4 85 F1 | 	sub	objptr, ##27148
08edc     8C 79 B1 FD | 	call	#__system___string_cmp
08ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ee4     2C FA 05 56 |  if_ne	mov	result1, #44
08ee8     78 03 90 5D |  if_ne	jmp	#LR__0825
08eec                 | LR__0808
08eec     02 30 06 F1 | 	add	local10, #2
08ef0     18 25 02 F6 | 	mov	local04, local10
08ef4     01 24 86 F1 | 	sub	local04, #1
08ef8     03 24 66 F0 | 	shl	local04, #3
08efc     35 00 00 FF 
08f00     0C E4 05 F1 | 	add	objptr, ##27148
08f04     F2 24 02 F1 | 	add	local04, objptr
08f08     12 13 02 FB | 	rdlong	arg01, local04
08f0c     83 01 00 FF 
08f10     E2 14 06 F6 | 	mov	arg02, ##@LR__5384
08f14     35 00 00 FF 
08f18     0C E4 85 F1 | 	sub	objptr, ##27148
08f1c     4C 79 B1 FD | 	call	#__system___string_cmp
08f20     00 FA 0D F2 | 	cmp	result1, #0 wz
08f24     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08f28     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08f2c                 | '   if m>3 then return 45
08f2c     04 32 56 F2 | 	cmps	local11, #4 wc
08f30     2D FA 05 36 |  if_ae	mov	result1, #45
08f34     2C 03 90 3D |  if_ae	jmp	#LR__0825
08f38     00 39 06 F6 | 	mov	local14, #256
08f3c     0C 3A 06 F6 | 	mov	local15, #12
08f40                 | LR__0809
08f40                 | '   arraytype=array_no_type : esize=12
08f40                 | ' 1350 
08f40                 | '   if lparts(l).part$="as" then
08f40     18 25 02 F6 | 	mov	local04, local10
08f44     03 24 66 F0 | 	shl	local04, #3
08f48     35 00 00 FF 
08f4c     0C E4 05 F1 | 	add	objptr, ##27148
08f50     F2 24 02 F1 | 	add	local04, objptr
08f54     12 13 02 FB | 	rdlong	arg01, local04
08f58     83 01 00 FF 
08f5c     E4 14 06 F6 | 	mov	arg02, ##@LR__5385
08f60     35 00 00 FF 
08f64     0C E4 85 F1 | 	sub	objptr, ##27148
08f68     00 79 B1 FD | 	call	#__system___string_cmp
08f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f70     F0 01 90 5D |  if_ne	jmp	#LR__0824
08f74                 | '     select case lparts(l+1).part$
08f74     18 35 02 F6 | 	mov	local12, local10
08f78     01 34 06 F1 | 	add	local12, #1
08f7c     03 34 66 F0 | 	shl	local12, #3
08f80     35 00 00 FF 
08f84     0C E4 05 F1 | 	add	objptr, ##27148
08f88     F2 34 02 F1 | 	add	local12, objptr
08f8c     1A 3D 02 FB | 	rdlong	local16, local12
08f90     83 01 00 FF 
08f94     E7 14 06 F6 | 	mov	arg02, ##@LR__5386
08f98     1E 13 02 F6 | 	mov	arg01, local16
08f9c     35 00 00 FF 
08fa0     0C E4 85 F1 | 	sub	objptr, ##27148
08fa4     C4 78 B1 FD | 	call	#__system___string_cmp
08fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fac     0C 01 90 AD |  if_e	jmp	#LR__0810
08fb0     83 01 00 FF 
08fb4     EC 14 06 F6 | 	mov	arg02, ##@LR__5387
08fb8     1E 13 02 F6 | 	mov	arg01, local16
08fbc     AC 78 B1 FD | 	call	#__system___string_cmp
08fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
08fc4     00 01 90 AD |  if_e	jmp	#LR__0811
08fc8     83 01 00 FF 
08fcc     F2 14 06 F6 | 	mov	arg02, ##@LR__5388
08fd0     1E 13 02 F6 | 	mov	arg01, local16
08fd4     94 78 B1 FD | 	call	#__system___string_cmp
08fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fdc     F4 00 90 AD |  if_e	jmp	#LR__0812
08fe0     83 01 00 FF 
08fe4     F8 14 06 F6 | 	mov	arg02, ##@LR__5389
08fe8     1E 13 02 F6 | 	mov	arg01, local16
08fec     7C 78 B1 FD | 	call	#__system___string_cmp
08ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ff4     E8 00 90 AD |  if_e	jmp	#LR__0813
08ff8     83 01 00 FF 
08ffc     FF 14 06 F6 | 	mov	arg02, ##@LR__5390
09000     1E 13 02 F6 | 	mov	arg01, local16
09004     64 78 B1 FD | 	call	#__system___string_cmp
09008     00 FA 0D F2 | 	cmp	result1, #0 wz
0900c     DC 00 90 AD |  if_e	jmp	#LR__0814
09010     83 01 00 FF 
09014     04 15 06 F6 | 	mov	arg02, ##@LR__5391
09018     1E 13 02 F6 | 	mov	arg01, local16
0901c     4C 78 B1 FD | 	call	#__system___string_cmp
09020     00 FA 0D F2 | 	cmp	result1, #0 wz
09024     D0 00 90 AD |  if_e	jmp	#LR__0815
09028     83 01 00 FF 
0902c     0C 15 06 F6 | 	mov	arg02, ##@LR__5392
09030     1E 13 02 F6 | 	mov	arg01, local16
09034     34 78 B1 FD | 	call	#__system___string_cmp
09038     00 FA 0D F2 | 	cmp	result1, #0 wz
0903c     C4 00 90 AD |  if_e	jmp	#LR__0816
09040     83 01 00 FF 
09044     12 15 06 F6 | 	mov	arg02, ##@LR__5393
09048     1E 13 02 F6 | 	mov	arg01, local16
0904c     1C 78 B1 FD | 	call	#__system___string_cmp
09050     00 FA 0D F2 | 	cmp	result1, #0 wz
09054     B8 00 90 AD |  if_e	jmp	#LR__0817
09058     83 01 00 FF 
0905c     18 15 06 F6 | 	mov	arg02, ##@LR__5394
09060     1E 13 02 F6 | 	mov	arg01, local16
09064     04 78 B1 FD | 	call	#__system___string_cmp
09068     00 FA 0D F2 | 	cmp	result1, #0 wz
0906c     AC 00 90 AD |  if_e	jmp	#LR__0818
09070     83 01 00 FF 
09074     1F 15 06 F6 | 	mov	arg02, ##@LR__5395
09078     1E 13 02 F6 | 	mov	arg01, local16
0907c     EC 77 B1 FD | 	call	#__system___string_cmp
09080     00 FA 0D F2 | 	cmp	result1, #0 wz
09084     A0 00 90 AD |  if_e	jmp	#LR__0819
09088     83 01 00 FF 
0908c     26 15 06 F6 | 	mov	arg02, ##@LR__5396
09090     1E 13 02 F6 | 	mov	arg01, local16
09094     D4 77 B1 FD | 	call	#__system___string_cmp
09098     00 FA 0D F2 | 	cmp	result1, #0 wz
0909c     94 00 90 AD |  if_e	jmp	#LR__0820
090a0     83 01 00 FF 
090a4     2D 15 06 F6 | 	mov	arg02, ##@LR__5397
090a8     1E 13 02 F6 | 	mov	arg01, local16
090ac     BC 77 B1 FD | 	call	#__system___string_cmp
090b0     00 FA 0D F2 | 	cmp	result1, #0 wz
090b4     88 00 90 AD |  if_e	jmp	#LR__0821
090b8     90 00 90 FD | 	jmp	#LR__0822
090bc                 | LR__0810
090bc     01 39 06 F6 | 	mov	local14, #257
090c0     01 3A 06 F6 | 	mov	local15, #1
090c4     9C 00 90 FD | 	jmp	#LR__0824
090c8                 | LR__0811
090c8     02 39 06 F6 | 	mov	local14, #258
090cc     01 3A 06 F6 | 	mov	local15, #1
090d0     90 00 90 FD | 	jmp	#LR__0824
090d4                 | LR__0812
090d4     03 39 06 F6 | 	mov	local14, #259
090d8     02 3A 06 F6 | 	mov	local15, #2
090dc     84 00 90 FD | 	jmp	#LR__0824
090e0                 | LR__0813
090e0     04 39 06 F6 | 	mov	local14, #260
090e4     02 3A 06 F6 | 	mov	local15, #2
090e8     78 00 90 FD | 	jmp	#LR__0824
090ec                 | LR__0814
090ec     05 39 06 F6 | 	mov	local14, #261
090f0     04 3A 06 F6 | 	mov	local15, #4
090f4     6C 00 90 FD | 	jmp	#LR__0824
090f8                 | LR__0815
090f8     05 39 06 F6 | 	mov	local14, #261
090fc     04 3A 06 F6 | 	mov	local15, #4
09100     60 00 90 FD | 	jmp	#LR__0824
09104                 | LR__0816
09104     06 39 06 F6 | 	mov	local14, #262
09108     04 3A 06 F6 | 	mov	local15, #4
0910c     54 00 90 FD | 	jmp	#LR__0824
09110                 | LR__0817
09110     07 39 06 F6 | 	mov	local14, #263
09114     08 3A 06 F6 | 	mov	local15, #8
09118     48 00 90 FD | 	jmp	#LR__0824
0911c                 | LR__0818
0911c     08 39 06 F6 | 	mov	local14, #264
09120     08 3A 06 F6 | 	mov	local15, #8
09124     3C 00 90 FD | 	jmp	#LR__0824
09128                 | LR__0819
09128     09 39 06 F6 | 	mov	local14, #265
0912c     04 3A 06 F6 | 	mov	local15, #4
09130     30 00 90 FD | 	jmp	#LR__0824
09134                 | LR__0820
09134     0A 39 06 F6 | 	mov	local14, #266
09138     08 3A 06 F6 | 	mov	local15, #8
0913c     24 00 90 FD | 	jmp	#LR__0824
09140                 | LR__0821
09140     0B 39 06 F6 | 	mov	local14, #267
09144     04 3A 06 F6 | 	mov	local15, #4
09148     18 00 90 FD | 	jmp	#LR__0824
0914c                 | LR__0822
0914c     2F 12 06 F6 | 	mov	arg01, #47
09150     60 41 B1 FD | 	call	#_printerror
09154     2F FA 05 F6 | 	mov	result1, #47
09158     08 01 90 FD | 	jmp	#LR__0825
0915c                 | LR__0823
0915c                 | '   return 46
0915c     2E FA 05 F6 | 	mov	result1, #46
09160     00 01 90 FD | 	jmp	#LR__0825
09164                 | LR__0824
09164     0F 3B 02 FD | 	qmul	local15, local01
09168     18 2A 62 FD | 	getqx	local07
0916c     10 2B 02 FD | 	qmul	local07, local02
09170     18 3C 62 FD | 	getqx	local16
09174     11 3D 02 FD | 	qmul	local16, local03
09178     51 00 00 FF 
0917c     AC E5 05 F1 | 	add	objptr, ##41900
09180     F2 3E 02 FB | 	rdlong	local17, objptr
09184     1C 15 02 F6 | 	mov	arg02, local14
09188     18 3C 62 FD | 	getqx	local16
0918c     1E 3F 82 F1 | 	sub	local17, local16
09190     10 3E 86 F1 | 	sub	local17, #16
09194     0F 3E 26 F5 | 	andn	local17, #15
09198     F2 3E 62 FC | 	wrlong	local17, objptr
0919c     51 00 00 FF 
091a0     AC E5 85 F1 | 	sub	objptr, ##41900
091a4     1F 13 02 F6 | 	mov	arg01, local17
091a8     B4 42 B1 FD | 	call	#_psdpoke
091ac     1F 13 02 F6 | 	mov	arg01, local17
091b0     02 12 06 F1 | 	add	arg01, #2
091b4     1D 15 02 F6 | 	mov	arg02, local15
091b8     A4 42 B1 FD | 	call	#_psdpoke
091bc     1F 13 02 F6 | 	mov	arg01, local17
091c0     04 12 06 F1 | 	add	arg01, #4
091c4     0F 15 02 F6 | 	mov	arg02, local01
091c8     4C 42 B1 FD | 	call	#_pslpoke
091cc     1F 13 02 F6 | 	mov	arg01, local17
091d0     08 12 06 F1 | 	add	arg01, #8
091d4     10 15 02 F6 | 	mov	arg02, local02
091d8     3C 42 B1 FD | 	call	#_pslpoke
091dc     1F 13 02 F6 | 	mov	arg01, local17
091e0     0C 12 06 F1 | 	add	arg01, #12
091e4     11 15 02 F6 | 	mov	arg02, local03
091e8     2C 42 B1 FD | 	call	#_pslpoke
091ec     14 35 02 F6 | 	mov	local12, local06
091f0     04 34 66 F0 | 	shl	local12, #4
091f4     14 00 00 FF 
091f8     F8 E5 05 F1 | 	add	objptr, ##10744
091fc     F2 34 02 F1 | 	add	local12, objptr
09200     1A 27 62 FC | 	wrlong	local05, local12
09204     14 35 02 F6 | 	mov	local12, local06
09208     04 34 66 F0 | 	shl	local12, #4
0920c     F2 34 02 F1 | 	add	local12, objptr
09210     04 34 06 F1 | 	add	local12, #4
09214     1A 3F 62 FC | 	wrlong	local17, local12
09218     14 35 02 F6 | 	mov	local12, local06
0921c     04 34 66 F0 | 	shl	local12, #4
09220     F2 34 02 F1 | 	add	local12, objptr
09224     0C 34 06 F1 | 	add	local12, #12
09228     1A 39 62 FC | 	wrlong	local14, local12
0922c                 | ' memtop=arrayptr
0922c                 | ' psdpoke arrayptr,arraytype 
0922c                 | ' psdpoke arrayptr+2,esize 
0922c                 | ' pslpoke arrayptr+4,dims(0)
0922c                 | ' pslpoke arrayptr+8,dims(1)
0922c                 | ' pslpoke arrayptr+12,dims(2)
0922c                 | ' variables(j).name=varname2$
0922c                 | ' variables(j).value.uresult=arrayptr
0922c                 | ' variables(j).vartype=arraytype
0922c                 | ' if j=varnum then varnum+=1
0922c     20 00 00 FF 
09230     10 E4 05 F1 | 	add	objptr, ##16400
09234     F2 2A 02 FB | 	rdlong	local07, objptr
09238     35 00 00 FF 
0923c     08 E4 85 F1 | 	sub	objptr, ##27144
09240     15 29 0A F2 | 	cmp	local06, local07 wz
09244     35 00 00 AF 
09248     08 E4 05 A1 |  if_e	add	objptr, ##27144
0924c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
09250     01 2A 06 A1 |  if_e	add	local07, #1
09254     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09258     35 00 00 AF 
0925c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09260                 | ' return 0
09260     00 FA 05 F6 | 	mov	result1, #0
09264                 | LR__0825
09264     A7 F0 03 F6 | 	mov	ptra, fp
09268     B2 00 A0 FD | 	call	#popregs_
0926c                 | _compile_dim_ret
0926c     2D 00 64 FD | 	ret
09270                 | 
09270                 | ' 
09270                 | ' '----- compile 'for' command. 
09270                 | ' 
09270                 | ' function compile_for() as ulong  
09270                 | _compile_for
09270     05 4A 05 F6 | 	mov	COUNT_, #5
09274     A8 00 A0 FD | 	call	#pushregs_
09278                 | ' 
09278                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09278     37 00 00 FF 
0927c     44 E4 05 F1 | 	add	objptr, ##28228
09280     F2 14 02 FB | 	rdlong	arg02, objptr
09284     01 14 06 F1 | 	add	arg02, #1
09288     03 14 66 F0 | 	shl	arg02, #3
0928c     02 00 00 FF 
09290     38 E4 85 F1 | 	sub	objptr, ##1080
09294     F2 14 02 F1 | 	add	arg02, objptr
09298     0A 13 02 FB | 	rdlong	arg01, arg02
0929c     35 00 00 FF 
092a0     0C E4 85 F1 | 	sub	objptr, ##27148
092a4                 | ' 
092a4                 | ' select case s
092a4     81 01 00 FF 
092a8     92 14 06 F6 | 	mov	arg02, ##@LR__5143
092ac     BC 75 B1 FD | 	call	#__system___string_cmp
092b0     00 FA 0D F2 | 	cmp	result1, #0 wz
092b4     1B FA 05 A6 |  if_e	mov	result1, #27
092b8     00 FA 05 56 |  if_ne	mov	result1, #0
092bc     00 FA 0D F2 | 	cmp	result1, #0 wz
092c0     0C 00 90 AD |  if_e	jmp	#LR__0830
092c4     05 12 06 F6 | 	mov	arg01, #5
092c8     F0 E3 BF FD | 	call	#_compile_immediate_assign
092cc     08 00 90 FD | 	jmp	#LR__0831
092d0                 | LR__0830
092d0     20 FA 05 F6 | 	mov	result1, #32
092d4     D0 02 90 FD | 	jmp	#LR__0835
092d8                 | LR__0831
092d8     4A 00 00 FF 
092dc     7C E4 05 F1 | 	add	objptr, ##38012
092e0     F2 14 02 FB | 	rdlong	arg02, objptr
092e4     0A 13 02 F6 | 	mov	arg01, arg02
092e8     01 12 86 F1 | 	sub	arg01, #1
092ec     09 25 02 F6 | 	mov	local04, arg01
092f0     01 24 66 F0 | 	shl	local04, #1
092f4     09 25 02 F1 | 	add	local04, arg01
092f8     02 24 66 F0 | 	shl	local04, #2
092fc     03 00 00 FF 
09300     00 E4 85 F1 | 	sub	objptr, ##1536
09304     F2 24 02 F1 | 	add	local04, objptr
09308     12 1F 02 FB | 	rdlong	local01, local04
0930c     04 24 06 F1 | 	add	local04, #4
09310     12 25 02 FB | 	rdlong	local04, local04
09314     01 14 86 F1 | 	sub	arg02, #1
09318     0A 13 02 F6 | 	mov	arg01, arg02
0931c     01 12 66 F0 | 	shl	arg01, #1
09320     0A 13 02 F1 | 	add	arg01, arg02
09324     02 12 66 F0 | 	shl	arg01, #2
09328     F2 12 02 F1 | 	add	arg01, objptr
0932c     08 12 06 F1 | 	add	arg01, #8
09330     09 15 02 FB | 	rdlong	arg02, arg01
09334     12 21 02 F6 | 	mov	local02, local04
09338     0A 23 02 F6 | 	mov	local03, arg02
0933c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0933c     17 22 0E F2 | 	cmp	local03, #23 wz
09340     47 00 00 FF 
09344     7C E4 85 F1 | 	sub	objptr, ##36476
09348     22 FA 05 56 |  if_ne	mov	result1, #34
0934c     58 02 90 5D |  if_ne	jmp	#LR__0835
09350     0F 27 02 F6 | 	mov	local05, local01
09354                 | ' varnum=t1.result.uresult
09354                 | ' if lparts(ct).part$<>"to" then return 33
09354     37 00 00 FF 
09358     44 E4 05 F1 | 	add	objptr, ##28228
0935c     F2 1E 02 FB | 	rdlong	local01, objptr
09360     03 1E 66 F0 | 	shl	local01, #3
09364     02 00 00 FF 
09368     38 E4 85 F1 | 	sub	objptr, ##1080
0936c     F2 1E 02 F1 | 	add	local01, objptr
09370     0F 13 02 FB | 	rdlong	arg01, local01
09374     83 01 00 FF 
09378     34 15 06 F6 | 	mov	arg02, ##@LR__5398
0937c     35 00 00 FF 
09380     0C E4 85 F1 | 	sub	objptr, ##27148
09384     E4 74 B1 FD | 	call	#__system___string_cmp
09388     00 FA 0D F2 | 	cmp	result1, #0 wz
0938c     21 FA 05 56 |  if_ne	mov	result1, #33
09390     14 02 90 5D |  if_ne	jmp	#LR__0835
09394     37 00 00 FF 
09398     44 E4 05 F1 | 	add	objptr, ##28228
0939c     F2 24 02 FB | 	rdlong	local04, objptr
093a0     01 24 06 F1 | 	add	local04, #1
093a4     F2 24 62 FC | 	wrlong	local04, objptr
093a8     37 00 00 FF 
093ac     44 E4 85 F1 | 	sub	objptr, ##28228
093b0     EC 07 B0 FD | 	call	#_expr
093b4                 | ' ct+=1
093b4                 | ' expr()  										' there is "to" value pushed on the stack
093b4                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
093b4     37 00 00 FF 
093b8     44 E4 05 F1 | 	add	objptr, ##28228
093bc     F2 24 02 FB | 	rdlong	local04, objptr
093c0     03 24 66 F0 | 	shl	local04, #3
093c4     02 00 00 FF 
093c8     38 E4 85 F1 | 	sub	objptr, ##1080
093cc     F2 24 02 F1 | 	add	local04, objptr
093d0     12 13 02 FB | 	rdlong	arg01, local04
093d4     83 01 00 FF 
093d8     37 15 06 F6 | 	mov	arg02, ##@LR__5399
093dc     35 00 00 FF 
093e0     0C E4 85 F1 | 	sub	objptr, ##27148
093e4     84 74 B1 FD | 	call	#__system___string_cmp
093e8     00 FA 0D F2 | 	cmp	result1, #0 wz
093ec     3C 00 90 AD |  if_e	jmp	#LR__0832
093f0     37 00 00 FF 
093f4     44 E4 05 F1 | 	add	objptr, ##28228
093f8     F2 24 02 FB | 	rdlong	local04, objptr
093fc     03 24 66 F0 | 	shl	local04, #3
09400     02 00 00 FF 
09404     38 E4 85 F1 | 	sub	objptr, ##1080
09408     F2 24 02 F1 | 	add	local04, objptr
0940c     12 13 02 FB | 	rdlong	arg01, local04
09410     83 01 00 FF 
09414     3C 15 06 F6 | 	mov	arg02, ##@LR__5400
09418     35 00 00 FF 
0941c     0C E4 85 F1 | 	sub	objptr, ##27148
09420     48 74 B1 FD | 	call	#__system___string_cmp
09424     00 FA 0D F2 | 	cmp	result1, #0 wz
09428     24 00 90 5D |  if_ne	jmp	#LR__0833
0942c                 | LR__0832
0942c     37 00 00 FF 
09430     44 E4 05 F1 | 	add	objptr, ##28228
09434     F2 1E 02 FB | 	rdlong	local01, objptr
09438     01 1E 06 F1 | 	add	local01, #1
0943c     F2 1E 62 FC | 	wrlong	local01, objptr
09440     37 00 00 FF 
09444     44 E4 85 F1 | 	sub	objptr, ##28228
09448     54 07 B0 FD | 	call	#_expr
0944c     78 00 90 FD | 	jmp	#LR__0834
09450                 | LR__0833
09450     4A 00 00 FF 
09454     7C E4 05 F1 | 	add	objptr, ##38012
09458     F2 1E 02 FB | 	rdlong	local01, objptr
0945c     0F 25 02 F6 | 	mov	local04, local01
09460     01 24 66 F0 | 	shl	local04, #1
09464     0F 25 02 F1 | 	add	local04, local01
09468     02 24 66 F0 | 	shl	local04, #2
0946c     03 00 00 FF 
09470     00 E4 85 F1 | 	sub	objptr, ##1536
09474     F2 24 02 F1 | 	add	local04, objptr
09478     08 24 06 F1 | 	add	local04, #8
0947c     12 39 68 FC | 	wrlong	#28, local04
09480     03 00 00 FF 
09484     00 E4 05 F1 | 	add	objptr, ##1536
09488     F2 1E 02 FB | 	rdlong	local01, objptr
0948c     0F 25 02 F6 | 	mov	local04, local01
09490     01 24 66 F0 | 	shl	local04, #1
09494     0F 25 02 F1 | 	add	local04, local01
09498     02 24 66 F0 | 	shl	local04, #2
0949c     03 00 00 FF 
094a0     00 E4 85 F1 | 	sub	objptr, ##1536
094a4     F2 24 02 F1 | 	add	local04, objptr
094a8     12 03 68 FC | 	wrlong	#1, local04
094ac     03 00 00 FF 
094b0     00 E4 05 F1 | 	add	objptr, ##1536
094b4     F2 1E 02 FB | 	rdlong	local01, objptr
094b8     01 1E 06 F1 | 	add	local01, #1
094bc     F2 1E 62 FC | 	wrlong	local01, objptr
094c0     4A 00 00 FF 
094c4     7C E4 85 F1 | 	sub	objptr, ##38012
094c8                 | LR__0834
094c8     4A 00 00 FF 
094cc     7C E4 05 F1 | 	add	objptr, ##38012
094d0     F2 1E 02 FB | 	rdlong	local01, objptr
094d4     0F 25 02 F6 | 	mov	local04, local01
094d8     01 24 66 F0 | 	shl	local04, #1
094dc     0F 25 02 F1 | 	add	local04, local01
094e0     02 24 66 F0 | 	shl	local04, #2
094e4     03 00 00 FF 
094e8     00 E4 85 F1 | 	sub	objptr, ##1536
094ec     F2 24 02 F1 | 	add	local04, objptr
094f0     08 24 06 F1 | 	add	local04, #8
094f4     12 39 68 FC | 	wrlong	#28, local04
094f8     03 00 00 FF 
094fc     00 E4 05 F1 | 	add	objptr, ##1536
09500     F2 1E 02 FB | 	rdlong	local01, objptr
09504     0F 25 02 F6 | 	mov	local04, local01
09508     01 24 66 F0 | 	shl	local04, #1
0950c     0F 25 02 F1 | 	add	local04, local01
09510     02 24 66 F0 | 	shl	local04, #2
09514     03 00 00 FF 
09518     00 E4 85 F1 | 	sub	objptr, ##1536
0951c     F2 24 02 F1 | 	add	local04, objptr
09520     12 27 62 FC | 	wrlong	local05, local04
09524     03 00 00 FF 
09528     00 E4 05 F1 | 	add	objptr, ##1536
0952c     F2 26 02 FB | 	rdlong	local05, objptr
09530     01 26 06 F1 | 	add	local05, #1
09534     F2 26 62 FC | 	wrlong	local05, objptr
09538     13 1F 02 F6 | 	mov	local01, local05
0953c     01 1E 66 F0 | 	shl	local01, #1
09540     13 1F 02 F1 | 	add	local01, local05
09544     02 1E 66 F0 | 	shl	local01, #2
09548     03 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1536
09550     F2 1E 02 F1 | 	add	local01, objptr
09554     08 1E 06 F1 | 	add	local01, #8
09558     0F 95 68 FC | 	wrlong	#74, local01
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 26 02 FB | 	rdlong	local05, objptr
09568     13 1F 02 F6 | 	mov	local01, local05
0956c     01 1E 66 F0 | 	shl	local01, #1
09570     13 1F 02 F1 | 	add	local01, local05
09574     02 1E 66 F0 | 	shl	local01, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 1E 02 F1 | 	add	local01, objptr
09584     0F 01 68 FC | 	wrlong	#0, local01
09588     03 00 00 FF 
0958c     00 E4 05 F1 | 	add	objptr, ##1536
09590     F2 26 02 FB | 	rdlong	local05, objptr
09594     01 26 06 F1 | 	add	local05, #1
09598     F2 26 62 FC | 	wrlong	local05, objptr
0959c     4A 00 00 FF 
095a0     7C E4 85 F1 | 	sub	objptr, ##38012
095a4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
095a4                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
095a4                 | ' return 0
095a4     00 FA 05 F6 | 	mov	result1, #0
095a8                 | LR__0835
095a8     A7 F0 03 F6 | 	mov	ptra, fp
095ac     B2 00 A0 FD | 	call	#popregs_
095b0                 | _compile_for_ret
095b0     2D 00 64 FD | 	ret
095b4                 | 
095b4                 | ' 
095b4                 | ' '----- compile 'next' command. 
095b4                 | ' 
095b4                 | ' function compile_next() as ulong
095b4                 | _compile_next
095b4     04 4A 05 F6 | 	mov	COUNT_, #4
095b8     A8 00 A0 FD | 	call	#pushregs_
095bc     37 00 00 FF 
095c0     44 E4 05 F1 | 	add	objptr, ##28228
095c4     F2 14 02 FB | 	rdlong	arg02, objptr
095c8     03 14 66 F0 | 	shl	arg02, #3
095cc     02 00 00 FF 
095d0     38 E4 85 F1 | 	sub	objptr, ##1080
095d4     F2 14 02 F1 | 	add	arg02, objptr
095d8     0A 1F 02 FB | 	rdlong	local01, arg02
095dc                 | ' 
095dc                 | ' varname$=lparts(ct).part$ 
095dc                 | ' if varnum=0 then return 35
095dc     04 E4 85 F1 | 	sub	objptr, #4
095e0     F2 14 0A FB | 	rdlong	arg02, objptr wz
095e4     35 00 00 FF 
095e8     08 E4 85 F1 | 	sub	objptr, ##27144
095ec     23 FA 05 A6 |  if_e	mov	result1, #35
095f0     4C 01 90 AD |  if_e	jmp	#LR__0842
095f4     01 20 66 F6 | 	neg	local02, #1
095f8                 | ' j=-1
095f8                 | ' for i=0 to varnum-1
095f8     00 22 06 F6 | 	mov	local03, #0
095fc     35 00 00 FF 
09600     08 E4 05 F1 | 	add	objptr, ##27144
09604     F2 24 02 FB | 	rdlong	local04, objptr
09608     35 00 00 FF 
0960c     08 E4 85 F1 | 	sub	objptr, ##27144
09610                 | LR__0840
09610     12 23 12 F2 | 	cmp	local03, local04 wc
09614     38 00 90 3D |  if_ae	jmp	#LR__0841
09618                 | '   if variables(i).name=varname$ then j=i : exit
09618     11 15 02 F6 | 	mov	arg02, local03
0961c     04 14 66 F0 | 	shl	arg02, #4
09620     14 00 00 FF 
09624     F8 E5 05 F1 | 	add	objptr, ##10744
09628     F2 14 02 F1 | 	add	arg02, objptr
0962c     0A 13 02 FB | 	rdlong	arg01, arg02
09630     0F 15 02 F6 | 	mov	arg02, local01
09634     14 00 00 FF 
09638     F8 E5 85 F1 | 	sub	objptr, ##10744
0963c     2C 72 B1 FD | 	call	#__system___string_cmp
09640     00 FA 0D F2 | 	cmp	result1, #0 wz
09644     11 21 02 A6 |  if_e	mov	local02, local03
09648     01 22 06 51 |  if_ne	add	local03, #1
0964c     C0 FF 9F 5D |  if_ne	jmp	#LR__0840
09650                 | LR__0841
09650                 | ' if j=-1 then return 35
09650     FF FF 7F FF 
09654     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09658     23 FA 05 A6 |  if_e	mov	result1, #35
0965c     E0 00 90 AD |  if_e	jmp	#LR__0842
09660     4A 00 00 FF 
09664     7C E4 05 F1 | 	add	objptr, ##38012
09668     F2 24 02 FB | 	rdlong	local04, objptr
0966c     12 23 02 F6 | 	mov	local03, local04
09670     01 22 66 F0 | 	shl	local03, #1
09674     12 23 02 F1 | 	add	local03, local04
09678     02 22 66 F0 | 	shl	local03, #2
0967c     03 00 00 FF 
09680     00 E4 85 F1 | 	sub	objptr, ##1536
09684     F2 22 02 F1 | 	add	local03, objptr
09688     08 22 06 F1 | 	add	local03, #8
0968c     11 39 68 FC | 	wrlong	#28, local03
09690     03 00 00 FF 
09694     00 E4 05 F1 | 	add	objptr, ##1536
09698     F2 24 02 FB | 	rdlong	local04, objptr
0969c     12 23 02 F6 | 	mov	local03, local04
096a0     01 22 66 F0 | 	shl	local03, #1
096a4     12 23 02 F1 | 	add	local03, local04
096a8     02 22 66 F0 | 	shl	local03, #2
096ac     03 00 00 FF 
096b0     00 E4 85 F1 | 	sub	objptr, ##1536
096b4     F2 22 02 F1 | 	add	local03, objptr
096b8     11 21 62 FC | 	wrlong	local02, local03
096bc     03 00 00 FF 
096c0     00 E4 05 F1 | 	add	objptr, ##1536
096c4     F2 24 02 FB | 	rdlong	local04, objptr
096c8     01 24 06 F1 | 	add	local04, #1
096cc     F2 24 62 FC | 	wrlong	local04, objptr
096d0     12 23 02 F6 | 	mov	local03, local04
096d4     01 22 66 F0 | 	shl	local03, #1
096d8     12 23 02 F1 | 	add	local03, local04
096dc     02 22 66 F0 | 	shl	local03, #2
096e0     03 00 00 FF 
096e4     00 E4 85 F1 | 	sub	objptr, ##1536
096e8     F2 22 02 F1 | 	add	local03, objptr
096ec     08 22 06 F1 | 	add	local03, #8
096f0     11 97 68 FC | 	wrlong	#75, local03
096f4     03 00 00 FF 
096f8     00 E4 05 F1 | 	add	objptr, ##1536
096fc     F2 24 02 FB | 	rdlong	local04, objptr
09700     12 23 02 F6 | 	mov	local03, local04
09704     01 22 66 F0 | 	shl	local03, #1
09708     12 23 02 F1 | 	add	local03, local04
0970c     02 22 66 F0 | 	shl	local03, #2
09710     03 00 00 FF 
09714     00 E4 85 F1 | 	sub	objptr, ##1536
09718     F2 22 02 F1 | 	add	local03, objptr
0971c     11 01 68 FC | 	wrlong	#0, local03
09720     03 00 00 FF 
09724     00 E4 05 F1 | 	add	objptr, ##1536
09728     F2 24 02 FB | 	rdlong	local04, objptr
0972c     01 24 06 F1 | 	add	local04, #1
09730     F2 24 62 FC | 	wrlong	local04, objptr
09734     4A 00 00 FF 
09738     7C E4 85 F1 | 	sub	objptr, ##38012
0973c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0973c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0973c                 | ' return 0
0973c     00 FA 05 F6 | 	mov	result1, #0
09740                 | LR__0842
09740     A7 F0 03 F6 | 	mov	ptra, fp
09744     B2 00 A0 FD | 	call	#popregs_
09748                 | _compile_next_ret
09748     2D 00 64 FD | 	ret
0974c                 | 
0974c                 | ' 
0974c                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0974c                 | ' 
0974c                 | ' function compile_gosub() as ulong
0974c                 | _compile_gosub
0974c     02 4A 05 F6 | 	mov	COUNT_, #2
09750     A8 00 A0 FD | 	call	#pushregs_
09754     4A 00 00 FF 
09758     7C E4 05 F1 | 	add	objptr, ##38012
0975c     F2 1E 02 FB | 	rdlong	local01, objptr
09760     0F 21 02 F6 | 	mov	local02, local01
09764     01 20 66 F0 | 	shl	local02, #1
09768     0F 21 02 F1 | 	add	local02, local01
0976c     02 20 66 F0 | 	shl	local02, #2
09770     03 00 00 FF 
09774     00 E4 85 F1 | 	sub	objptr, ##1536
09778     F2 20 02 F1 | 	add	local02, objptr
0977c     08 20 06 F1 | 	add	local02, #8
09780     10 53 69 FC | 	wrlong	#169, local02
09784     03 00 00 FF 
09788     00 E4 05 F1 | 	add	objptr, ##1536
0978c     F2 20 02 FB | 	rdlong	local02, objptr
09790     01 20 06 F1 | 	add	local02, #1
09794     F2 20 62 FC | 	wrlong	local02, objptr
09798     4A 00 00 FF 
0979c     7C E4 85 F1 | 	sub	objptr, ##38012
097a0     0C 00 B0 FD | 	call	#_compile_goto
097a4                 | ' compiledline(lineptr).result_type=token_gosub
097a4                 | ' lineptr+=1
097a4                 | ' err=compile_goto()
097a4                 | ' return err
097a4     A7 F0 03 F6 | 	mov	ptra, fp
097a8     B2 00 A0 FD | 	call	#popregs_
097ac                 | _compile_gosub_ret
097ac     2D 00 64 FD | 	ret
097b0                 | 
097b0                 | ' 
097b0                 | ' '----- compile 'goto' 
097b0                 | ' 
097b0                 | ' function compile_goto( ) as ulong
097b0                 | _compile_goto
097b0     03 4A 05 F6 | 	mov	COUNT_, #3
097b4     A8 00 A0 FD | 	call	#pushregs_
097b8     34 F0 07 F1 | 	add	ptra, #52
097bc                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
097bc     37 00 00 FF 
097c0     44 E4 05 F1 | 	add	objptr, ##28228
097c4     F2 16 02 FB | 	rdlong	arg03, objptr
097c8     03 16 66 F0 | 	shl	arg03, #3
097cc     02 00 00 FF 
097d0     38 E4 85 F1 | 	sub	objptr, ##1080
097d4     F2 16 02 F1 | 	add	arg03, objptr
097d8     04 16 06 F1 | 	add	arg03, #4
097dc     0B 17 02 FB | 	rdlong	arg03, arg03
097e0     01 00 00 FF 
097e4     00 16 0E F2 | 	cmp	arg03, ##512 wz
097e8     35 00 00 FF 
097ec     0C E4 85 F1 | 	sub	objptr, ##27148
097f0     CC 02 90 5D |  if_ne	jmp	#LR__0855
097f4     37 00 00 FF 
097f8     44 E4 05 F1 | 	add	objptr, ##28228
097fc     F2 16 02 FB | 	rdlong	arg03, objptr
09800     01 16 06 F1 | 	add	arg03, #1
09804     03 16 66 F0 | 	shl	arg03, #3
09808     02 00 00 FF 
0980c     38 E4 85 F1 | 	sub	objptr, ##1080
09810     F2 16 02 F1 | 	add	arg03, objptr
09814     04 16 06 F1 | 	add	arg03, #4
09818     0B 17 02 FB | 	rdlong	arg03, arg03
0981c     FE 17 0E F2 | 	cmp	arg03, #510 wz
09820     35 00 00 FF 
09824     0C E4 85 F1 | 	sub	objptr, ##27148
09828     94 02 90 5D |  if_ne	jmp	#LR__0855
0982c     37 00 00 FF 
09830     44 E4 05 F1 | 	add	objptr, ##28228
09834     F2 16 02 FB | 	rdlong	arg03, objptr
09838     03 16 66 F0 | 	shl	arg03, #3
0983c     02 00 00 FF 
09840     38 E4 85 F1 | 	sub	objptr, ##1080
09844     F2 16 02 F1 | 	add	arg03, objptr
09848     0B 13 02 FB | 	rdlong	arg01, arg03
0984c     00 14 06 F6 | 	mov	arg02, #0
09850     35 00 00 FF 
09854     0C E4 85 F1 | 	sub	objptr, ##27148
09858     14 A2 B1 FD | 	call	#__system____builtin_atoi
0985c     04 4E 05 F1 | 	add	fp, #4
09860     A7 FA 61 FC | 	wrlong	result1, fp
09864     4A 00 00 FF 
09868     7C E4 05 F1 | 	add	objptr, ##38012
0986c     F2 1E 02 FB | 	rdlong	local01, objptr
09870     0F 21 02 F6 | 	mov	local02, local01
09874     01 20 66 F0 | 	shl	local02, #1
09878     0F 21 02 F1 | 	add	local02, local01
0987c     02 20 66 F0 | 	shl	local02, #2
09880     03 00 00 FF 
09884     00 E4 85 F1 | 	sub	objptr, ##1536
09888     F2 20 02 F1 | 	add	local02, objptr
0988c     08 20 06 F1 | 	add	local02, #8
09890     10 9D 68 FC | 	wrlong	#78, local02
09894     03 00 00 FF 
09898     0C E4 05 F1 | 	add	objptr, ##1548
0989c     F2 22 02 FB | 	rdlong	local03, objptr
098a0     4A 00 00 FF 
098a4     88 E4 85 F1 | 	sub	objptr, ##38024
098a8     04 4E 05 F1 | 	add	fp, #4
098ac     A7 22 62 FC | 	wrlong	local03, fp
098b0     08 4E 85 F1 | 	sub	fp, #8
098b4                 | '   gotoline=val%(lparts(ct).part$) 
098b4                 | '   compiledline(lineptr).result_type=token_fast_goto
098b4                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
098b4                 | '   do
098b4                 | LR__0850
098b4     10 4E 05 F1 | 	add	fp, #16
098b8     A7 12 02 F6 | 	mov	arg01, fp
098bc     08 4E 85 F1 | 	sub	fp, #8
098c0     A7 14 02 FB | 	rdlong	arg02, fp
098c4     08 4E 85 F1 | 	sub	fp, #8
098c8     18 16 06 F6 | 	mov	arg03, #24
098cc     0B 00 00 FF 
098d0     CC E4 05 F1 | 	add	objptr, ##5836
098d4     2C 63 B1 FD | 	call	#_psram_spin2_read1
098d8     0B 00 00 FF 
098dc     CC E4 85 F1 | 	sub	objptr, ##5836
098e0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
098e0                 | '     if gotoheader(0)<>$FFFFFFFF then
098e0     10 4E 05 F1 | 	add	fp, #16
098e4     A7 22 02 FB | 	rdlong	local03, fp
098e8     10 4E 85 F1 | 	sub	fp, #16
098ec     FF FF 7F FF 
098f0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
098f4     24 00 90 AD |  if_e	jmp	#LR__0851
098f8     08 4E 05 F1 | 	add	fp, #8
098fc     A7 22 02 FB | 	rdlong	local03, fp
09900     04 4E 05 F1 | 	add	fp, #4
09904     A7 22 62 FC | 	wrlong	local03, fp
09908     18 4E 05 F1 | 	add	fp, #24
0990c     A7 22 02 FB | 	rdlong	local03, fp
09910     1C 4E 85 F1 | 	sub	fp, #28
09914     A7 22 62 FC | 	wrlong	local03, fp
09918     08 4E 85 F1 | 	sub	fp, #8
0991c                 | LR__0851
0991c     24 4E 05 F1 | 	add	fp, #36
09920     A7 22 02 FB | 	rdlong	local03, fp
09924     24 4E 85 F1 | 	sub	fp, #36
09928     FF FF 3F FF 
0992c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09930     10 4E 05 51 |  if_ne	add	fp, #16
09934     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09938     10 4E 85 51 |  if_ne	sub	fp, #16
0993c     FF FF 7F 5F 
09940     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09944     1C 00 90 AD |  if_e	jmp	#LR__0852
09948     10 4E 05 F1 | 	add	fp, #16
0994c     A7 22 02 FB | 	rdlong	local03, fp
09950     0C 4E 85 F1 | 	sub	fp, #12
09954     A7 20 02 FB | 	rdlong	local02, fp
09958     04 4E 85 F1 | 	sub	fp, #4
0995c     10 23 0A F2 | 	cmp	local03, local02 wz
09960     50 FF 9F 5D |  if_ne	jmp	#LR__0850
09964                 | LR__0852
09964                 | '   if gotoheader(0)=gotoline then
09964     10 4E 05 F1 | 	add	fp, #16
09968     A7 22 02 FB | 	rdlong	local03, fp
0996c     0C 4E 85 F1 | 	sub	fp, #12
09970     A7 1E 02 FB | 	rdlong	local01, fp
09974     04 4E 85 F1 | 	sub	fp, #4
09978     0F 23 0A F2 | 	cmp	local03, local01 wz
0997c     7C 00 90 5D |  if_ne	jmp	#LR__0853
09980     4A 00 00 FF 
09984     7C E4 05 F1 | 	add	objptr, ##38012
09988     F2 1E 02 FB | 	rdlong	local01, objptr
0998c     0F 21 02 F6 | 	mov	local02, local01
09990     01 20 66 F0 | 	shl	local02, #1
09994     0F 21 02 F1 | 	add	local02, local01
09998     02 20 66 F0 | 	shl	local02, #2
0999c     03 00 00 FF 
099a0     00 E4 85 F1 | 	sub	objptr, ##1536
099a4     F2 20 02 F1 | 	add	local02, objptr
099a8     0C 4E 05 F1 | 	add	fp, #12
099ac     A7 22 02 FB | 	rdlong	local03, fp
099b0     10 23 62 FC | 	wrlong	local03, local02
099b4     03 00 00 FF 
099b8     00 E4 05 F1 | 	add	objptr, ##1536
099bc     F2 1E 02 FB | 	rdlong	local01, objptr
099c0     0F 21 02 F6 | 	mov	local02, local01
099c4     01 20 66 F0 | 	shl	local02, #1
099c8     0F 21 02 F1 | 	add	local02, local01
099cc     02 20 66 F0 | 	shl	local02, #2
099d0     03 00 00 FF 
099d4     00 E4 85 F1 | 	sub	objptr, ##1536
099d8     F2 20 02 F1 | 	add	local02, objptr
099dc     08 4E 85 F1 | 	sub	fp, #8
099e0     A7 22 02 FB | 	rdlong	local03, fp
099e4     04 4E 85 F1 | 	sub	fp, #4
099e8     04 20 06 F1 | 	add	local02, #4
099ec     10 23 62 FC | 	wrlong	local03, local02
099f0     47 00 00 FF 
099f4     7C E4 85 F1 | 	sub	objptr, ##36476
099f8     A4 00 90 FD | 	jmp	#LR__0854
099fc                 | LR__0853
099fc     4A 00 00 FF 
09a00     7C E4 05 F1 | 	add	objptr, ##38012
09a04     F2 1E 02 FB | 	rdlong	local01, objptr
09a08     0F 21 02 F6 | 	mov	local02, local01
09a0c     01 20 66 F0 | 	shl	local02, #1
09a10     0F 21 02 F1 | 	add	local02, local01
09a14     02 20 66 F0 | 	shl	local02, #2
09a18     03 00 00 FF 
09a1c     00 E4 85 F1 | 	sub	objptr, ##1536
09a20     F2 20 02 F1 | 	add	local02, objptr
09a24     00 00 C0 FF 
09a28     10 01 68 FC | 	wrlong	##-2147483648, local02
09a2c     03 00 00 FF 
09a30     00 E4 05 F1 | 	add	objptr, ##1536
09a34     F2 1E 02 FB | 	rdlong	local01, objptr
09a38     0F 21 02 F6 | 	mov	local02, local01
09a3c     01 20 66 F0 | 	shl	local02, #1
09a40     0F 21 02 F1 | 	add	local02, local01
09a44     02 20 66 F0 | 	shl	local02, #2
09a48     03 00 00 FF 
09a4c     00 E4 85 F1 | 	sub	objptr, ##1536
09a50     F2 20 02 F1 | 	add	local02, objptr
09a54     04 4E 05 F1 | 	add	fp, #4
09a58     A7 22 02 FB | 	rdlong	local03, fp
09a5c     04 4E 85 F1 | 	sub	fp, #4
09a60     04 20 06 F1 | 	add	local02, #4
09a64     10 23 62 FC | 	wrlong	local03, local02
09a68     03 00 00 FF 
09a6c     00 E4 05 F1 | 	add	objptr, ##1536
09a70     F2 1E 02 FB | 	rdlong	local01, objptr
09a74     0F 21 02 F6 | 	mov	local02, local01
09a78     01 20 66 F0 | 	shl	local02, #1
09a7c     0F 21 02 F1 | 	add	local02, local01
09a80     02 20 66 F0 | 	shl	local02, #2
09a84     03 00 00 FF 
09a88     00 E4 85 F1 | 	sub	objptr, ##1536
09a8c     F2 20 02 F1 | 	add	local02, objptr
09a90     08 20 06 F1 | 	add	local02, #8
09a94     10 A7 68 FC | 	wrlong	#83, local02
09a98     47 00 00 FF 
09a9c     7C E4 85 F1 | 	sub	objptr, ##36476
09aa0                 | LR__0854
09aa0     4A 00 00 FF 
09aa4     7C E4 05 F1 | 	add	objptr, ##38012
09aa8     F2 22 02 FB | 	rdlong	local03, objptr
09aac     01 22 06 F1 | 	add	local03, #1
09ab0     F2 22 62 FC | 	wrlong	local03, objptr
09ab4     4A 00 00 FF 
09ab8     7C E4 85 F1 | 	sub	objptr, ##38012
09abc     D0 00 90 FD | 	jmp	#LR__0856
09ac0                 | LR__0855
09ac0     DC 00 B0 FD | 	call	#_expr
09ac4     30 4E 05 F1 | 	add	fp, #48
09ac8     A7 9E 68 FC | 	wrlong	#79, fp
09acc     08 4E 85 F1 | 	sub	fp, #8
09ad0     A7 00 68 FC | 	wrlong	#0, fp
09ad4     04 4E 05 F1 | 	add	fp, #4
09ad8     A7 22 02 FB | 	rdlong	local03, fp
09adc     04 4E 05 F1 | 	add	fp, #4
09ae0     A7 1E 02 FB | 	rdlong	local01, fp
09ae4     30 4E 85 F1 | 	sub	fp, #48
09ae8     4A 00 00 FF 
09aec     7C E4 05 F1 | 	add	objptr, ##38012
09af0     F2 20 02 FB | 	rdlong	local02, objptr
09af4     10 17 02 F6 | 	mov	arg03, local02
09af8     01 16 66 F0 | 	shl	arg03, #1
09afc     10 17 02 F1 | 	add	arg03, local02
09b00     02 16 66 F0 | 	shl	arg03, #2
09b04     03 00 00 FF 
09b08     00 E4 85 F1 | 	sub	objptr, ##1536
09b0c     F2 16 02 F1 | 	add	arg03, objptr
09b10     0B 01 68 FC | 	wrlong	#0, arg03
09b14     03 00 00 FF 
09b18     00 E4 05 F1 | 	add	objptr, ##1536
09b1c     F2 20 02 FB | 	rdlong	local02, objptr
09b20     10 17 02 F6 | 	mov	arg03, local02
09b24     01 16 66 F0 | 	shl	arg03, #1
09b28     10 17 02 F1 | 	add	arg03, local02
09b2c     02 16 66 F0 | 	shl	arg03, #2
09b30     03 00 00 FF 
09b34     00 E4 85 F1 | 	sub	objptr, ##1536
09b38     F2 16 02 F1 | 	add	arg03, objptr
09b3c     04 16 06 F1 | 	add	arg03, #4
09b40     0B 23 62 FC | 	wrlong	local03, arg03
09b44     03 00 00 FF 
09b48     00 E4 05 F1 | 	add	objptr, ##1536
09b4c     F2 22 02 FB | 	rdlong	local03, objptr
09b50     11 21 02 F6 | 	mov	local02, local03
09b54     01 20 66 F0 | 	shl	local02, #1
09b58     11 21 02 F1 | 	add	local02, local03
09b5c     02 20 66 F0 | 	shl	local02, #2
09b60     03 00 00 FF 
09b64     00 E4 85 F1 | 	sub	objptr, ##1536
09b68     F2 20 02 F1 | 	add	local02, objptr
09b6c     08 20 06 F1 | 	add	local02, #8
09b70     10 1F 62 FC | 	wrlong	local01, local02
09b74     03 00 00 FF 
09b78     00 E4 05 F1 | 	add	objptr, ##1536
09b7c     F2 22 02 FB | 	rdlong	local03, objptr
09b80     01 22 06 F1 | 	add	local03, #1
09b84     F2 22 62 FC | 	wrlong	local03, objptr
09b88     4A 00 00 FF 
09b8c     7C E4 85 F1 | 	sub	objptr, ##38012
09b90                 | LR__0856
09b90                 | ' return 0
09b90     00 FA 05 F6 | 	mov	result1, #0
09b94     A7 F0 03 F6 | 	mov	ptra, fp
09b98     B2 00 A0 FD | 	call	#popregs_
09b9c                 | _compile_goto_ret
09b9c     2D 00 64 FD | 	ret
09ba0                 | 
09ba0                 | ' 
09ba0                 | ' 
09ba0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ba0                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09ba0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ba0                 | ' 
09ba0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ba0                 | ' '
09ba0                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09ba0                 | ' '
09ba0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09ba0                 | ' 
09ba0                 | ' function expr() as ulong 
09ba0                 | _expr
09ba0     07 4A 05 F6 | 	mov	COUNT_, #7
09ba4     A8 00 A0 FD | 	call	#pushregs_
09ba8                 | _expr_enter
09ba8     37 00 00 FF 
09bac     44 E4 05 F1 | 	add	objptr, ##28228
09bb0     F2 24 02 FB | 	rdlong	local04, objptr
09bb4     03 24 66 F0 | 	shl	local04, #3
09bb8     02 00 00 FF 
09bbc     38 E4 85 F1 | 	sub	objptr, ##1080
09bc0     F2 24 02 F1 | 	add	local04, objptr
09bc4     04 24 06 F1 | 	add	local04, #4
09bc8     12 27 02 FB | 	rdlong	local05, local04
09bcc                 | ' 
09bcc                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09bcc     FE 27 0E F2 | 	cmp	local05, #510 wz
09bd0     35 00 00 FF 
09bd4     0C E4 85 F1 | 	sub	objptr, ##27148
09bd8     C4 00 90 5D |  if_ne	jmp	#LR__0860
09bdc     1D 1E 06 F6 | 	mov	local01, #29
09be0     FF 22 06 F6 | 	mov	local03, #255
09be4     0F 29 02 F6 | 	mov	local06, local01
09be8     10 2B 02 F6 | 	mov	local07, local02
09bec     11 1F 02 F6 | 	mov	local01, local03
09bf0     4A 00 00 FF 
09bf4     7C E4 05 F1 | 	add	objptr, ##38012
09bf8     F2 26 02 FB | 	rdlong	local05, objptr
09bfc     13 25 02 F6 | 	mov	local04, local05
09c00     01 24 66 F0 | 	shl	local04, #1
09c04     13 25 02 F1 | 	add	local04, local05
09c08     02 24 66 F0 | 	shl	local04, #2
09c0c     03 00 00 FF 
09c10     00 E4 85 F1 | 	sub	objptr, ##1536
09c14     F2 24 02 F1 | 	add	local04, objptr
09c18     12 29 62 FC | 	wrlong	local06, local04
09c1c     03 00 00 FF 
09c20     00 E4 05 F1 | 	add	objptr, ##1536
09c24     F2 28 02 FB | 	rdlong	local06, objptr
09c28     14 27 02 F6 | 	mov	local05, local06
09c2c     01 26 66 F0 | 	shl	local05, #1
09c30     14 27 02 F1 | 	add	local05, local06
09c34     02 26 66 F0 | 	shl	local05, #2
09c38     03 00 00 FF 
09c3c     00 E4 85 F1 | 	sub	objptr, ##1536
09c40     F2 26 02 F1 | 	add	local05, objptr
09c44     04 26 06 F1 | 	add	local05, #4
09c48     13 2B 62 FC | 	wrlong	local07, local05
09c4c     03 00 00 FF 
09c50     00 E4 05 F1 | 	add	objptr, ##1536
09c54     F2 2A 02 FB | 	rdlong	local07, objptr
09c58     15 29 02 F6 | 	mov	local06, local07
09c5c     01 28 66 F0 | 	shl	local06, #1
09c60     15 29 02 F1 | 	add	local06, local07
09c64     02 28 66 F0 | 	shl	local06, #2
09c68     03 00 00 FF 
09c6c     00 E4 85 F1 | 	sub	objptr, ##1536
09c70     F2 28 02 F1 | 	add	local06, objptr
09c74     08 28 06 F1 | 	add	local06, #8
09c78     14 1F 62 FC | 	wrlong	local01, local06
09c7c     03 00 00 FF 
09c80     00 E4 05 F1 | 	add	objptr, ##1536
09c84     F2 28 02 FB | 	rdlong	local06, objptr
09c88     01 28 06 F1 | 	add	local06, #1
09c8c     F2 28 62 FC | 	wrlong	local06, objptr
09c90     4A 00 00 FF 
09c94     7C E4 85 F1 | 	sub	objptr, ##38012
09c98     1D FA 05 F6 | 	mov	result1, #29
09c9c     64 01 90 FD | 	jmp	#LR__0863
09ca0                 | LR__0860
09ca0     00 1E 06 F6 | 	mov	local01, #0
09ca4     68 01 B0 FD | 	call	#_addsub
09ca8                 | ' t3.result.uresult=0
09ca8                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
09ca8                 | ' if err>0 then return err
09ca8     01 FA 15 F2 | 	cmp	result1, #1 wc
09cac     54 01 90 3D |  if_ae	jmp	#LR__0863
09cb0     37 00 00 FF 
09cb4     44 E4 05 F1 | 	add	objptr, ##28228
09cb8     F2 24 02 FB | 	rdlong	local04, objptr
09cbc     03 24 66 F0 | 	shl	local04, #3
09cc0     02 00 00 FF 
09cc4     38 E4 85 F1 | 	sub	objptr, ##1080
09cc8     F2 24 02 F1 | 	add	local04, objptr
09ccc     04 24 06 F1 | 	add	local04, #4
09cd0     12 27 02 FB | 	rdlong	local05, local04
09cd4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
09cd4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09cd4     35 00 00 FF 
09cd8     0C E4 85 F1 | 	sub	objptr, ##27148
09cdc                 | LR__0861
09cdc     1B 26 0E F2 | 	cmp	local05, #27 wz
09ce0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09ce4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09ce8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09cec     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09cf0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09cf4     08 01 90 5D |  if_ne	jmp	#LR__0862
09cf8     37 00 00 FF 
09cfc     44 E4 05 F1 | 	add	objptr, ##28228
09d00     F2 28 02 FB | 	rdlong	local06, objptr
09d04     01 28 06 F1 | 	add	local06, #1
09d08     F2 28 62 FC | 	wrlong	local06, objptr
09d0c     37 00 00 FF 
09d10     44 E4 85 F1 | 	sub	objptr, ##28228
09d14     F8 00 B0 FD | 	call	#_addsub
09d18                 | '   ct+=1
09d18                 | '   err=addsub() : if err>0 then return err
09d18     01 FA 15 F2 | 	cmp	result1, #1 wc
09d1c     E4 00 90 3D |  if_ae	jmp	#LR__0863
09d20     13 23 02 F6 | 	mov	local03, local05
09d24     0F 29 02 F6 | 	mov	local06, local01
09d28     10 2B 02 F6 | 	mov	local07, local02
09d2c     11 27 02 F6 | 	mov	local05, local03
09d30     4A 00 00 FF 
09d34     7C E4 05 F1 | 	add	objptr, ##38012
09d38     F2 24 02 FB | 	rdlong	local04, objptr
09d3c     12 FB 01 F6 | 	mov	result1, local04
09d40     01 FA 65 F0 | 	shl	result1, #1
09d44     12 FB 01 F1 | 	add	result1, local04
09d48     02 FA 65 F0 | 	shl	result1, #2
09d4c     03 00 00 FF 
09d50     00 E4 85 F1 | 	sub	objptr, ##1536
09d54     F2 FA 01 F1 | 	add	result1, objptr
09d58     FD 28 62 FC | 	wrlong	local06, result1
09d5c     03 00 00 FF 
09d60     00 E4 05 F1 | 	add	objptr, ##1536
09d64     F2 28 02 FB | 	rdlong	local06, objptr
09d68     14 25 02 F6 | 	mov	local04, local06
09d6c     01 24 66 F0 | 	shl	local04, #1
09d70     14 25 02 F1 | 	add	local04, local06
09d74     02 24 66 F0 | 	shl	local04, #2
09d78     03 00 00 FF 
09d7c     00 E4 85 F1 | 	sub	objptr, ##1536
09d80     F2 24 02 F1 | 	add	local04, objptr
09d84     04 24 06 F1 | 	add	local04, #4
09d88     12 2B 62 FC | 	wrlong	local07, local04
09d8c     03 00 00 FF 
09d90     00 E4 05 F1 | 	add	objptr, ##1536
09d94     F2 2A 02 FB | 	rdlong	local07, objptr
09d98     15 29 02 F6 | 	mov	local06, local07
09d9c     01 28 66 F0 | 	shl	local06, #1
09da0     15 29 02 F1 | 	add	local06, local07
09da4     02 28 66 F0 | 	shl	local06, #2
09da8     03 00 00 FF 
09dac     00 E4 85 F1 | 	sub	objptr, ##1536
09db0     F2 28 02 F1 | 	add	local06, objptr
09db4     08 28 06 F1 | 	add	local06, #8
09db8     14 27 62 FC | 	wrlong	local05, local06
09dbc     03 00 00 FF 
09dc0     00 E4 05 F1 | 	add	objptr, ##1536
09dc4     F2 28 02 FB | 	rdlong	local06, objptr
09dc8     01 28 06 F1 | 	add	local06, #1
09dcc     F2 28 62 FC | 	wrlong	local06, objptr
09dd0     13 00 00 FF 
09dd4     38 E4 85 F1 | 	sub	objptr, ##9784
09dd8     F2 24 02 FB | 	rdlong	local04, objptr
09ddc     03 24 66 F0 | 	shl	local04, #3
09de0     02 00 00 FF 
09de4     38 E4 85 F1 | 	sub	objptr, ##1080
09de8     F2 24 02 F1 | 	add	local04, objptr
09dec     04 24 06 F1 | 	add	local04, #4
09df0     12 27 02 FB | 	rdlong	local05, local04
09df4     35 00 00 FF 
09df8     0C E4 85 F1 | 	sub	objptr, ##27148
09dfc     DC FE 9F FD | 	jmp	#LR__0861
09e00                 | LR__0862
09e00                 | ' return 0  
09e00     00 FA 05 F6 | 	mov	result1, #0
09e04                 | LR__0863
09e04     A7 F0 03 F6 | 	mov	ptra, fp
09e08     B2 00 A0 FD | 	call	#popregs_
09e0c                 | _expr_ret
09e0c     2D 00 64 FD | 	ret
09e10                 | 
09e10                 | ' 
09e10                 | ' ' Second level operators : add, sub, logic
09e10                 | ' 
09e10                 | ' function addsub() as ulong
09e10                 | _addsub
09e10     07 4A 05 F6 | 	mov	COUNT_, #7
09e14     A8 00 A0 FD | 	call	#pushregs_
09e18                 | _addsub_enter
09e18     00 1E 06 F6 | 	mov	local01, #0
09e1c     60 01 B0 FD | 	call	#_muldiv
09e20                 | ' 
09e20                 | ' t3.result.uresult=0
09e20                 | ' err=muldiv() : if err>0 then return err           			 
09e20     01 FA 15 F2 | 	cmp	result1, #1 wc
09e24     4C 01 90 3D |  if_ae	jmp	#LR__0872
09e28     37 00 00 FF 
09e2c     44 E4 05 F1 | 	add	objptr, ##28228
09e30     F2 24 02 FB | 	rdlong	local04, objptr
09e34     03 24 66 F0 | 	shl	local04, #3
09e38     02 00 00 FF 
09e3c     38 E4 85 F1 | 	sub	objptr, ##1080
09e40     F2 24 02 F1 | 	add	local04, objptr
09e44     04 24 06 F1 | 	add	local04, #4
09e48     12 27 02 FB | 	rdlong	local05, local04
09e4c                 | ' op = lparts(ct).token				 
09e4c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09e4c     35 00 00 FF 
09e50     0C E4 85 F1 | 	sub	objptr, ##27148
09e54                 | LR__0870
09e54     01 26 0E F2 | 	cmp	local05, #1 wz
09e58     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09e5c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09e60     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09e64     08 01 90 5D |  if_ne	jmp	#LR__0871
09e68     37 00 00 FF 
09e6c     44 E4 05 F1 | 	add	objptr, ##28228
09e70     F2 24 02 FB | 	rdlong	local04, objptr
09e74     01 24 06 F1 | 	add	local04, #1
09e78     F2 24 62 FC | 	wrlong	local04, objptr
09e7c     37 00 00 FF 
09e80     44 E4 85 F1 | 	sub	objptr, ##28228
09e84     F8 00 B0 FD | 	call	#_muldiv
09e88                 | '   ct+=1
09e88                 | '   err=muldiv() : if err>0 then return err   
09e88     01 FA 15 F2 | 	cmp	result1, #1 wc
09e8c     E4 00 90 3D |  if_ae	jmp	#LR__0872
09e90     13 23 02 F6 | 	mov	local03, local05
09e94     0F 29 02 F6 | 	mov	local06, local01
09e98     10 2B 02 F6 | 	mov	local07, local02
09e9c     11 27 02 F6 | 	mov	local05, local03
09ea0     4A 00 00 FF 
09ea4     7C E4 05 F1 | 	add	objptr, ##38012
09ea8     F2 24 02 FB | 	rdlong	local04, objptr
09eac     12 FB 01 F6 | 	mov	result1, local04
09eb0     01 FA 65 F0 | 	shl	result1, #1
09eb4     12 FB 01 F1 | 	add	result1, local04
09eb8     02 FA 65 F0 | 	shl	result1, #2
09ebc     03 00 00 FF 
09ec0     00 E4 85 F1 | 	sub	objptr, ##1536
09ec4     F2 FA 01 F1 | 	add	result1, objptr
09ec8     FD 28 62 FC | 	wrlong	local06, result1
09ecc     03 00 00 FF 
09ed0     00 E4 05 F1 | 	add	objptr, ##1536
09ed4     F2 28 02 FB | 	rdlong	local06, objptr
09ed8     14 25 02 F6 | 	mov	local04, local06
09edc     01 24 66 F0 | 	shl	local04, #1
09ee0     14 25 02 F1 | 	add	local04, local06
09ee4     02 24 66 F0 | 	shl	local04, #2
09ee8     03 00 00 FF 
09eec     00 E4 85 F1 | 	sub	objptr, ##1536
09ef0     F2 24 02 F1 | 	add	local04, objptr
09ef4     04 24 06 F1 | 	add	local04, #4
09ef8     12 2B 62 FC | 	wrlong	local07, local04
09efc     03 00 00 FF 
09f00     00 E4 05 F1 | 	add	objptr, ##1536
09f04     F2 2A 02 FB | 	rdlong	local07, objptr
09f08     15 29 02 F6 | 	mov	local06, local07
09f0c     01 28 66 F0 | 	shl	local06, #1
09f10     15 29 02 F1 | 	add	local06, local07
09f14     02 28 66 F0 | 	shl	local06, #2
09f18     03 00 00 FF 
09f1c     00 E4 85 F1 | 	sub	objptr, ##1536
09f20     F2 28 02 F1 | 	add	local06, objptr
09f24     08 28 06 F1 | 	add	local06, #8
09f28     14 27 62 FC | 	wrlong	local05, local06
09f2c     03 00 00 FF 
09f30     00 E4 05 F1 | 	add	objptr, ##1536
09f34     F2 28 02 FB | 	rdlong	local06, objptr
09f38     01 28 06 F1 | 	add	local06, #1
09f3c     F2 28 62 FC | 	wrlong	local06, objptr
09f40     13 00 00 FF 
09f44     38 E4 85 F1 | 	sub	objptr, ##9784
09f48     F2 24 02 FB | 	rdlong	local04, objptr
09f4c     03 24 66 F0 | 	shl	local04, #3
09f50     02 00 00 FF 
09f54     38 E4 85 F1 | 	sub	objptr, ##1080
09f58     F2 24 02 F1 | 	add	local04, objptr
09f5c     04 24 06 F1 | 	add	local04, #4
09f60     12 27 02 FB | 	rdlong	local05, local04
09f64     35 00 00 FF 
09f68     0C E4 85 F1 | 	sub	objptr, ##27148
09f6c     E4 FE 9F FD | 	jmp	#LR__0870
09f70                 | LR__0871
09f70                 | ' return 0
09f70     00 FA 05 F6 | 	mov	result1, #0
09f74                 | LR__0872
09f74     A7 F0 03 F6 | 	mov	ptra, fp
09f78     B2 00 A0 FD | 	call	#popregs_
09f7c                 | _addsub_ret
09f7c     2D 00 64 FD | 	ret
09f80                 | 
09f80                 | ' 
09f80                 | ' ' Third level operators : mul,div,shift,power
09f80                 | ' 
09f80                 | ' function muldiv() as ulong
09f80                 | _muldiv
09f80     07 4A 05 F6 | 	mov	COUNT_, #7
09f84     A8 00 A0 FD | 	call	#pushregs_
09f88                 | _muldiv_enter
09f88     00 1E 06 F6 | 	mov	local01, #0
09f8c     6C 01 B0 FD | 	call	#_getvalue
09f90                 | ' 
09f90                 | ' t3.result.uresult=0
09f90                 | ' err=getvalue() : if err>0 then return err     
09f90     01 FA 15 F2 | 	cmp	result1, #1 wc
09f94     58 01 90 3D |  if_ae	jmp	#LR__0882
09f98     37 00 00 FF 
09f9c     44 E4 05 F1 | 	add	objptr, ##28228
09fa0     F2 24 02 FB | 	rdlong	local04, objptr
09fa4     03 24 66 F0 | 	shl	local04, #3
09fa8     02 00 00 FF 
09fac     38 E4 85 F1 | 	sub	objptr, ##1080
09fb0     F2 24 02 F1 | 	add	local04, objptr
09fb4     04 24 06 F1 | 	add	local04, #4
09fb8     12 27 02 FB | 	rdlong	local05, local04
09fbc                 | ' op = lparts(ct).token
09fbc                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09fbc     35 00 00 FF 
09fc0     0C E4 85 F1 | 	sub	objptr, ##27148
09fc4                 | LR__0880
09fc4     05 26 0E F2 | 	cmp	local05, #5 wz
09fc8     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09fcc     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09fd0     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09fd4     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09fd8     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09fdc     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09fe0     08 01 90 5D |  if_ne	jmp	#LR__0881
09fe4     37 00 00 FF 
09fe8     44 E4 05 F1 | 	add	objptr, ##28228
09fec     F2 24 02 FB | 	rdlong	local04, objptr
09ff0     01 24 06 F1 | 	add	local04, #1
09ff4     F2 24 62 FC | 	wrlong	local04, objptr
09ff8     37 00 00 FF 
09ffc     44 E4 85 F1 | 	sub	objptr, ##28228
0a000     F8 00 B0 FD | 	call	#_getvalue
0a004                 | '   ct+=1
0a004                 | '   err=getvalue() :if err>0 then return err   
0a004     01 FA 15 F2 | 	cmp	result1, #1 wc
0a008     E4 00 90 3D |  if_ae	jmp	#LR__0882
0a00c     13 23 02 F6 | 	mov	local03, local05
0a010     0F 29 02 F6 | 	mov	local06, local01
0a014     10 2B 02 F6 | 	mov	local07, local02
0a018     11 27 02 F6 | 	mov	local05, local03
0a01c     4A 00 00 FF 
0a020     7C E4 05 F1 | 	add	objptr, ##38012
0a024     F2 24 02 FB | 	rdlong	local04, objptr
0a028     12 FB 01 F6 | 	mov	result1, local04
0a02c     01 FA 65 F0 | 	shl	result1, #1
0a030     12 FB 01 F1 | 	add	result1, local04
0a034     02 FA 65 F0 | 	shl	result1, #2
0a038     03 00 00 FF 
0a03c     00 E4 85 F1 | 	sub	objptr, ##1536
0a040     F2 FA 01 F1 | 	add	result1, objptr
0a044     FD 28 62 FC | 	wrlong	local06, result1
0a048     03 00 00 FF 
0a04c     00 E4 05 F1 | 	add	objptr, ##1536
0a050     F2 28 02 FB | 	rdlong	local06, objptr
0a054     14 25 02 F6 | 	mov	local04, local06
0a058     01 24 66 F0 | 	shl	local04, #1
0a05c     14 25 02 F1 | 	add	local04, local06
0a060     02 24 66 F0 | 	shl	local04, #2
0a064     03 00 00 FF 
0a068     00 E4 85 F1 | 	sub	objptr, ##1536
0a06c     F2 24 02 F1 | 	add	local04, objptr
0a070     04 24 06 F1 | 	add	local04, #4
0a074     12 2B 62 FC | 	wrlong	local07, local04
0a078     03 00 00 FF 
0a07c     00 E4 05 F1 | 	add	objptr, ##1536
0a080     F2 2A 02 FB | 	rdlong	local07, objptr
0a084     15 29 02 F6 | 	mov	local06, local07
0a088     01 28 66 F0 | 	shl	local06, #1
0a08c     15 29 02 F1 | 	add	local06, local07
0a090     02 28 66 F0 | 	shl	local06, #2
0a094     03 00 00 FF 
0a098     00 E4 85 F1 | 	sub	objptr, ##1536
0a09c     F2 28 02 F1 | 	add	local06, objptr
0a0a0     08 28 06 F1 | 	add	local06, #8
0a0a4     14 27 62 FC | 	wrlong	local05, local06
0a0a8     03 00 00 FF 
0a0ac     00 E4 05 F1 | 	add	objptr, ##1536
0a0b0     F2 28 02 FB | 	rdlong	local06, objptr
0a0b4     01 28 06 F1 | 	add	local06, #1
0a0b8     F2 28 62 FC | 	wrlong	local06, objptr
0a0bc     13 00 00 FF 
0a0c0     38 E4 85 F1 | 	sub	objptr, ##9784
0a0c4     F2 24 02 FB | 	rdlong	local04, objptr
0a0c8     03 24 66 F0 | 	shl	local04, #3
0a0cc     02 00 00 FF 
0a0d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a0d4     F2 24 02 F1 | 	add	local04, objptr
0a0d8     04 24 06 F1 | 	add	local04, #4
0a0dc     12 27 02 FB | 	rdlong	local05, local04
0a0e0     35 00 00 FF 
0a0e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0e8     D8 FE 9F FD | 	jmp	#LR__0880
0a0ec                 | LR__0881
0a0ec                 | ' return 0
0a0ec     00 FA 05 F6 | 	mov	result1, #0
0a0f0                 | LR__0882
0a0f0     A7 F0 03 F6 | 	mov	ptra, fp
0a0f4     B2 00 A0 FD | 	call	#popregs_
0a0f8                 | _muldiv_ret
0a0f8     2D 00 64 FD | 	ret
0a0fc                 | 
0a0fc                 | ' 
0a0fc                 | ' ' Get a value for operations
0a0fc                 | ' 
0a0fc                 | ' function getvalue()  as ulong
0a0fc                 | _getvalue
0a0fc     0B 4A 05 F6 | 	mov	COUNT_, #11
0a100     A8 00 A0 FD | 	call	#pushregs_
0a104                 | _getvalue_enter
0a104     01 24 06 F6 | 	mov	local04, #1
0a108     00 1E 06 F6 | 	mov	local01, #0
0a10c     1D 22 06 F6 | 	mov	local03, #29
0a110     37 00 00 FF 
0a114     44 E4 05 F1 | 	add	objptr, ##28228
0a118     F2 16 02 FB | 	rdlong	arg03, objptr
0a11c     03 16 66 F0 | 	shl	arg03, #3
0a120     02 00 00 FF 
0a124     38 E4 85 F1 | 	sub	objptr, ##1080
0a128     F2 16 02 F1 | 	add	arg03, objptr
0a12c     04 16 06 F1 | 	add	arg03, #4
0a130     0B 27 02 FB | 	rdlong	local05, arg03
0a134                 | ' 
0a134                 | ' m=1											' for negative numbers
0a134                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a134                 | ' op=lparts(ct).token
0a134                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a134     02 26 0E F2 | 	cmp	local05, #2 wz
0a138     35 00 00 FF 
0a13c     0C E4 85 F1 | 	sub	objptr, ##27148
0a140     38 00 90 5D |  if_ne	jmp	#LR__0890
0a144     01 24 66 F6 | 	neg	local04, #1
0a148     37 00 00 FF 
0a14c     44 E4 05 F1 | 	add	objptr, ##28228
0a150     F2 26 02 FB | 	rdlong	local05, objptr
0a154     01 26 06 F1 | 	add	local05, #1
0a158     F2 26 62 FC | 	wrlong	local05, objptr
0a15c     03 26 66 F0 | 	shl	local05, #3
0a160     02 00 00 FF 
0a164     38 E4 85 F1 | 	sub	objptr, ##1080
0a168     F2 26 02 F1 | 	add	local05, objptr
0a16c     04 26 06 F1 | 	add	local05, #4
0a170     13 27 02 FB | 	rdlong	local05, local05
0a174     35 00 00 FF 
0a178     0C E4 85 F1 | 	sub	objptr, ##27148
0a17c                 | LR__0890
0a17c                 | ' select case op
0a17c     01 00 00 FF 
0a180     00 26 0E F2 | 	cmp	local05, ##512 wz
0a184     44 00 90 AD |  if_e	jmp	#LR__0891
0a188     01 00 00 FF 
0a18c     01 26 0E F2 | 	cmp	local05, ##513 wz
0a190     90 01 90 AD |  if_e	jmp	#LR__0894
0a194     01 00 00 FF 
0a198     02 26 0E F2 | 	cmp	local05, ##514 wz
0a19c     44 04 90 AD |  if_e	jmp	#LR__0901
0a1a0     01 00 00 FF 
0a1a4     03 26 0E F2 | 	cmp	local05, ##515 wz
0a1a8     A8 05 90 AD |  if_e	jmp	#LR__0904
0a1ac     2C 26 0E F2 | 	cmp	local05, #44 wz
0a1b0     78 07 90 AD |  if_e	jmp	#LR__0909
0a1b4     01 00 00 FF 
0a1b8     04 26 0E F2 | 	cmp	local05, ##516 wz
0a1bc     70 08 90 AD |  if_e	jmp	#LR__0910
0a1c0     15 26 0E F2 | 	cmp	local05, #21 wz
0a1c4     98 08 90 AD |  if_e	jmp	#LR__0911
0a1c8     10 09 90 FD | 	jmp	#LR__0912
0a1cc                 | LR__0891
0a1cc                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a1cc     01 24 0E F2 | 	cmp	local04, #1 wz
0a1d0     3C 00 90 5D |  if_ne	jmp	#LR__0892
0a1d4     37 00 00 FF 
0a1d8     44 E4 05 F1 | 	add	objptr, ##28228
0a1dc     F2 26 02 FB | 	rdlong	local05, objptr
0a1e0     03 26 66 F0 | 	shl	local05, #3
0a1e4     02 00 00 FF 
0a1e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a1ec     F2 26 02 F1 | 	add	local05, objptr
0a1f0     13 13 02 FB | 	rdlong	arg01, local05
0a1f4     00 14 06 F6 | 	mov	arg02, #0
0a1f8     35 00 00 FF 
0a1fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a200     6C 98 B1 FD | 	call	#__system____builtin_atoi
0a204     FD 24 02 FD | 	qmul	local04, result1
0a208     18 1E 62 FD | 	getqx	local01
0a20c     1C 22 06 F6 | 	mov	local03, #28
0a210                 | LR__0892
0a210                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a210     FF FF 7F FF 
0a214     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a218     3C 00 90 5D |  if_ne	jmp	#LR__0893
0a21c     37 00 00 FF 
0a220     44 E4 05 F1 | 	add	objptr, ##28228
0a224     F2 26 02 FB | 	rdlong	local05, objptr
0a228     03 26 66 F0 | 	shl	local05, #3
0a22c     02 00 00 FF 
0a230     38 E4 85 F1 | 	sub	objptr, ##1080
0a234     F2 26 02 F1 | 	add	local05, objptr
0a238     13 13 02 FB | 	rdlong	arg01, local05
0a23c     00 14 06 F6 | 	mov	arg02, #0
0a240     35 00 00 FF 
0a244     0C E4 85 F1 | 	sub	objptr, ##27148
0a248     24 98 B1 FD | 	call	#__system____builtin_atoi
0a24c     FD 24 02 FD | 	qmul	local04, result1
0a250     18 1E 62 FD | 	getqx	local01
0a254     1C 22 06 F6 | 	mov	local03, #28
0a258                 | LR__0893
0a258     0F 29 02 F6 | 	mov	local06, local01
0a25c     10 2B 02 F6 | 	mov	local07, local02
0a260     11 27 02 F6 | 	mov	local05, local03
0a264     4A 00 00 FF 
0a268     7C E4 05 F1 | 	add	objptr, ##38012
0a26c     F2 1E 02 FB | 	rdlong	local01, objptr
0a270     0F 25 02 F6 | 	mov	local04, local01
0a274     01 24 66 F0 | 	shl	local04, #1
0a278     0F 25 02 F1 | 	add	local04, local01
0a27c     02 24 66 F0 | 	shl	local04, #2
0a280     03 00 00 FF 
0a284     00 E4 85 F1 | 	sub	objptr, ##1536
0a288     F2 24 02 F1 | 	add	local04, objptr
0a28c     12 29 62 FC | 	wrlong	local06, local04
0a290     03 00 00 FF 
0a294     00 E4 05 F1 | 	add	objptr, ##1536
0a298     F2 28 02 FB | 	rdlong	local06, objptr
0a29c     14 1F 02 F6 | 	mov	local01, local06
0a2a0     01 1E 66 F0 | 	shl	local01, #1
0a2a4     14 1F 02 F1 | 	add	local01, local06
0a2a8     02 1E 66 F0 | 	shl	local01, #2
0a2ac     03 00 00 FF 
0a2b0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2b4     F2 1E 02 F1 | 	add	local01, objptr
0a2b8     04 1E 06 F1 | 	add	local01, #4
0a2bc     0F 2B 62 FC | 	wrlong	local07, local01
0a2c0     03 00 00 FF 
0a2c4     00 E4 05 F1 | 	add	objptr, ##1536
0a2c8     F2 2A 02 FB | 	rdlong	local07, objptr
0a2cc     15 29 02 F6 | 	mov	local06, local07
0a2d0     01 28 66 F0 | 	shl	local06, #1
0a2d4     15 29 02 F1 | 	add	local06, local07
0a2d8     02 28 66 F0 | 	shl	local06, #2
0a2dc     03 00 00 FF 
0a2e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2e4     F2 28 02 F1 | 	add	local06, objptr
0a2e8     08 28 06 F1 | 	add	local06, #8
0a2ec     14 27 62 FC | 	wrlong	local05, local06
0a2f0     03 00 00 FF 
0a2f4     00 E4 05 F1 | 	add	objptr, ##1536
0a2f8     F2 28 02 FB | 	rdlong	local06, objptr
0a2fc     01 28 06 F1 | 	add	local06, #1
0a300     F2 28 62 FC | 	wrlong	local06, objptr
0a304     13 00 00 FF 
0a308     38 E4 85 F1 | 	sub	objptr, ##9784
0a30c     F2 28 02 FB | 	rdlong	local06, objptr
0a310     01 28 06 F1 | 	add	local06, #1
0a314     F2 28 62 FC | 	wrlong	local06, objptr
0a318     37 00 00 FF 
0a31c     44 E4 85 F1 | 	sub	objptr, ##28228
0a320     E4 07 90 FD | 	jmp	#LR__0913
0a324                 | LR__0894
0a324                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a324     37 00 00 FF 
0a328     44 E4 05 F1 | 	add	objptr, ##28228
0a32c     F2 16 02 FB | 	rdlong	arg03, objptr
0a330     03 16 66 F0 | 	shl	arg03, #3
0a334     02 00 00 FF 
0a338     38 E4 85 F1 | 	sub	objptr, ##1080
0a33c     F2 16 02 F1 | 	add	arg03, objptr
0a340     0B 13 02 FB | 	rdlong	arg01, arg03
0a344     01 14 06 F6 | 	mov	arg02, #1
0a348     35 00 00 FF 
0a34c     0C E4 85 F1 | 	sub	objptr, ##27148
0a350     6C 85 B1 FD | 	call	#__system__Left_S
0a354     FD 12 02 F6 | 	mov	arg01, result1
0a358     83 01 00 FF 
0a35c     3F 15 06 F6 | 	mov	arg02, ##@LR__5401
0a360     08 65 B1 FD | 	call	#__system___string_cmp
0a364     00 FA 0D F2 | 	cmp	result1, #0 wz
0a368     94 00 90 5D |  if_ne	jmp	#LR__0897
0a36c     37 00 00 FF 
0a370     44 E4 05 F1 | 	add	objptr, ##28228
0a374     F2 2A 02 FB | 	rdlong	local07, objptr
0a378     15 29 02 F6 | 	mov	local06, local07
0a37c     03 28 66 F0 | 	shl	local06, #3
0a380     02 00 00 FF 
0a384     38 E4 85 F1 | 	sub	objptr, ##1080
0a388     F2 28 02 F1 | 	add	local06, objptr
0a38c     83 01 00 FF 
0a390     41 27 06 F6 | 	mov	local05, ##@LR__5402
0a394     03 2A 66 F0 | 	shl	local07, #3
0a398     F2 2A 02 F1 | 	add	local07, objptr
0a39c     15 2B 02 FB | 	rdlong	local07, local07
0a3a0     02 00 00 FF 
0a3a4     38 E4 05 F1 | 	add	objptr, ##1080
0a3a8     F2 1E 02 FB | 	rdlong	local01, objptr
0a3ac     03 1E 66 F0 | 	shl	local01, #3
0a3b0     02 00 00 FF 
0a3b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a3b8     F2 1E 02 F1 | 	add	local01, objptr
0a3bc     0F 13 02 FB | 	rdlong	arg01, local01
0a3c0     35 00 00 FF 
0a3c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a3c8     09 2D 02 F6 | 	mov	local08, arg01
0a3cc     97 06 48 FB | 	callpa	#(@LR__0896-@LR__0895)>>2,fcache_load_ptr_
0a3d0                 | LR__0895
0a3d0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a3d4     01 2C 06 51 |  if_ne	add	local08, #1
0a3d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0895
0a3dc                 | LR__0896
0a3dc     09 2D 82 F1 | 	sub	local08, arg01
0a3e0     16 15 02 F6 | 	mov	arg02, local08
0a3e4     01 14 86 F1 | 	sub	arg02, #1
0a3e8     15 13 02 F6 | 	mov	arg01, local07
0a3ec     58 85 B1 FD | 	call	#__system__Right_S
0a3f0     FD 14 02 F6 | 	mov	arg02, result1
0a3f4     13 13 02 F6 | 	mov	arg01, local05
0a3f8     A4 64 B1 FD | 	call	#__system___string_concat
0a3fc     14 FB 61 FC | 	wrlong	result1, local06
0a400                 | LR__0897
0a400                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a400     37 00 00 FF 
0a404     44 E4 05 F1 | 	add	objptr, ##28228
0a408     F2 16 02 FB | 	rdlong	arg03, objptr
0a40c     03 16 66 F0 | 	shl	arg03, #3
0a410     02 00 00 FF 
0a414     38 E4 85 F1 | 	sub	objptr, ##1080
0a418     F2 16 02 F1 | 	add	arg03, objptr
0a41c     0B 13 02 FB | 	rdlong	arg01, arg03
0a420     01 14 06 F6 | 	mov	arg02, #1
0a424     35 00 00 FF 
0a428     0C E4 85 F1 | 	sub	objptr, ##27148
0a42c     90 84 B1 FD | 	call	#__system__Left_S
0a430     FD 12 02 F6 | 	mov	arg01, result1
0a434     83 01 00 FF 
0a438     44 15 06 F6 | 	mov	arg02, ##@LR__5403
0a43c     2C 64 B1 FD | 	call	#__system___string_cmp
0a440     00 FA 0D F2 | 	cmp	result1, #0 wz
0a444     94 00 90 5D |  if_ne	jmp	#LR__0900
0a448     37 00 00 FF 
0a44c     44 E4 05 F1 | 	add	objptr, ##28228
0a450     F2 2A 02 FB | 	rdlong	local07, objptr
0a454     15 29 02 F6 | 	mov	local06, local07
0a458     03 28 66 F0 | 	shl	local06, #3
0a45c     02 00 00 FF 
0a460     38 E4 85 F1 | 	sub	objptr, ##1080
0a464     F2 28 02 F1 | 	add	local06, objptr
0a468     83 01 00 FF 
0a46c     46 27 06 F6 | 	mov	local05, ##@LR__5404
0a470     03 2A 66 F0 | 	shl	local07, #3
0a474     F2 2A 02 F1 | 	add	local07, objptr
0a478     15 2B 02 FB | 	rdlong	local07, local07
0a47c     02 00 00 FF 
0a480     38 E4 05 F1 | 	add	objptr, ##1080
0a484     F2 1E 02 FB | 	rdlong	local01, objptr
0a488     03 1E 66 F0 | 	shl	local01, #3
0a48c     02 00 00 FF 
0a490     38 E4 85 F1 | 	sub	objptr, ##1080
0a494     F2 1E 02 F1 | 	add	local01, objptr
0a498     0F 13 02 FB | 	rdlong	arg01, local01
0a49c     35 00 00 FF 
0a4a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a4a4     09 2D 02 F6 | 	mov	local08, arg01
0a4a8     97 06 48 FB | 	callpa	#(@LR__0899-@LR__0898)>>2,fcache_load_ptr_
0a4ac                 | LR__0898
0a4ac     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a4b0     01 2C 06 51 |  if_ne	add	local08, #1
0a4b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0898
0a4b8                 | LR__0899
0a4b8     09 2D 82 F1 | 	sub	local08, arg01
0a4bc     16 15 02 F6 | 	mov	arg02, local08
0a4c0     01 14 86 F1 | 	sub	arg02, #1
0a4c4     15 13 02 F6 | 	mov	arg01, local07
0a4c8     7C 84 B1 FD | 	call	#__system__Right_S
0a4cc     FD 14 02 F6 | 	mov	arg02, result1
0a4d0     13 13 02 F6 | 	mov	arg01, local05
0a4d4     C8 63 B1 FD | 	call	#__system___string_concat
0a4d8     14 FB 61 FC | 	wrlong	result1, local06
0a4dc                 | LR__0900
0a4dc     37 00 00 FF 
0a4e0     44 E4 05 F1 | 	add	objptr, ##28228
0a4e4     F2 28 02 FB | 	rdlong	local06, objptr
0a4e8     03 28 66 F0 | 	shl	local06, #3
0a4ec     02 00 00 FF 
0a4f0     38 E4 85 F1 | 	sub	objptr, ##1080
0a4f4     F2 28 02 F1 | 	add	local06, objptr
0a4f8     14 13 02 FB | 	rdlong	arg01, local06
0a4fc     00 14 06 F6 | 	mov	arg02, #0
0a500     35 00 00 FF 
0a504     0C E4 85 F1 | 	sub	objptr, ##27148
0a508     64 95 B1 FD | 	call	#__system____builtin_atoi
0a50c     FD 24 02 FD | 	qmul	local04, result1
0a510     4A 00 00 FF 
0a514     7C E4 05 F1 | 	add	objptr, ##38012
0a518     F2 28 02 FB | 	rdlong	local06, objptr
0a51c     14 2F 02 F6 | 	mov	local09, local06
0a520     01 2E 66 F0 | 	shl	local09, #1
0a524     14 2F 02 F1 | 	add	local09, local06
0a528     02 2E 66 F0 | 	shl	local09, #2
0a52c     03 00 00 FF 
0a530     00 E4 85 F1 | 	sub	objptr, ##1536
0a534     F2 2E 02 F1 | 	add	local09, objptr
0a538     03 00 00 FF 
0a53c     00 E4 05 F1 | 	add	objptr, ##1536
0a540     18 1E 62 FD | 	getqx	local01
0a544     1C 22 06 F6 | 	mov	local03, #28
0a548     0F 29 02 F6 | 	mov	local06, local01
0a54c     10 2B 02 F6 | 	mov	local07, local02
0a550     17 29 62 FC | 	wrlong	local06, local09
0a554     11 2F 02 F6 | 	mov	local09, local03
0a558     F2 28 02 FB | 	rdlong	local06, objptr
0a55c     14 27 02 F6 | 	mov	local05, local06
0a560     01 26 66 F0 | 	shl	local05, #1
0a564     14 27 02 F1 | 	add	local05, local06
0a568     02 26 66 F0 | 	shl	local05, #2
0a56c     03 00 00 FF 
0a570     00 E4 85 F1 | 	sub	objptr, ##1536
0a574     F2 26 02 F1 | 	add	local05, objptr
0a578     04 26 06 F1 | 	add	local05, #4
0a57c     13 2B 62 FC | 	wrlong	local07, local05
0a580     03 00 00 FF 
0a584     00 E4 05 F1 | 	add	objptr, ##1536
0a588     F2 2A 02 FB | 	rdlong	local07, objptr
0a58c     15 29 02 F6 | 	mov	local06, local07
0a590     01 28 66 F0 | 	shl	local06, #1
0a594     15 29 02 F1 | 	add	local06, local07
0a598     02 28 66 F0 | 	shl	local06, #2
0a59c     03 00 00 FF 
0a5a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a5a4     F2 28 02 F1 | 	add	local06, objptr
0a5a8     08 28 06 F1 | 	add	local06, #8
0a5ac     14 2F 62 FC | 	wrlong	local09, local06
0a5b0     03 00 00 FF 
0a5b4     00 E4 05 F1 | 	add	objptr, ##1536
0a5b8     F2 28 02 FB | 	rdlong	local06, objptr
0a5bc     01 28 06 F1 | 	add	local06, #1
0a5c0     F2 28 62 FC | 	wrlong	local06, objptr
0a5c4     13 00 00 FF 
0a5c8     38 E4 85 F1 | 	sub	objptr, ##9784
0a5cc     F2 28 02 FB | 	rdlong	local06, objptr
0a5d0     01 28 06 F1 | 	add	local06, #1
0a5d4     F2 28 62 FC | 	wrlong	local06, objptr
0a5d8     37 00 00 FF 
0a5dc     44 E4 85 F1 | 	sub	objptr, ##28228
0a5e0     24 05 90 FD | 	jmp	#LR__0913
0a5e4                 | LR__0901
0a5e4                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a5e4     01 24 0E F2 | 	cmp	local04, #1 wz
0a5e8     48 00 90 5D |  if_ne	jmp	#LR__0902
0a5ec     00 C0 1F FF 
0a5f0     00 28 06 F6 | 	mov	local06, ##1065353216
0a5f4     37 00 00 FF 
0a5f8     44 E4 05 F1 | 	add	objptr, ##28228
0a5fc     F2 2E 02 FB | 	rdlong	local09, objptr
0a600     03 2E 66 F0 | 	shl	local09, #3
0a604     02 00 00 FF 
0a608     38 E4 85 F1 | 	sub	objptr, ##1080
0a60c     F2 2E 02 F1 | 	add	local09, objptr
0a610     17 13 02 FB | 	rdlong	arg01, local09
0a614     35 00 00 FF 
0a618     0C E4 85 F1 | 	sub	objptr, ##27148
0a61c     E4 95 B1 FD | 	call	#__system____builtin_atof
0a620     FD 14 02 F6 | 	mov	arg02, result1
0a624     14 13 02 F6 | 	mov	arg01, local06
0a628     CC 8D B1 FD | 	call	#__system___float_mul
0a62c     FD 1E 02 F6 | 	mov	local01, result1
0a630     1E 22 06 F6 | 	mov	local03, #30
0a634                 | LR__0902
0a634                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a634     FF FF 7F FF 
0a638     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a63c     48 00 90 5D |  if_ne	jmp	#LR__0903
0a640     00 C0 5F FF 
0a644     00 28 06 F6 | 	mov	local06, ##-1082130432
0a648     37 00 00 FF 
0a64c     44 E4 05 F1 | 	add	objptr, ##28228
0a650     F2 2E 02 FB | 	rdlong	local09, objptr
0a654     03 2E 66 F0 | 	shl	local09, #3
0a658     02 00 00 FF 
0a65c     38 E4 85 F1 | 	sub	objptr, ##1080
0a660     F2 2E 02 F1 | 	add	local09, objptr
0a664     17 13 02 FB | 	rdlong	arg01, local09
0a668     35 00 00 FF 
0a66c     0C E4 85 F1 | 	sub	objptr, ##27148
0a670     90 95 B1 FD | 	call	#__system____builtin_atof
0a674     FD 14 02 F6 | 	mov	arg02, result1
0a678     14 13 02 F6 | 	mov	arg01, local06
0a67c     78 8D B1 FD | 	call	#__system___float_mul
0a680     FD 1E 02 F6 | 	mov	local01, result1
0a684     1E 22 06 F6 | 	mov	local03, #30
0a688                 | LR__0903
0a688     0F 29 02 F6 | 	mov	local06, local01
0a68c     10 2B 02 F6 | 	mov	local07, local02
0a690     11 27 02 F6 | 	mov	local05, local03
0a694     4A 00 00 FF 
0a698     7C E4 05 F1 | 	add	objptr, ##38012
0a69c     F2 1E 02 FB | 	rdlong	local01, objptr
0a6a0     0F 2F 02 F6 | 	mov	local09, local01
0a6a4     01 2E 66 F0 | 	shl	local09, #1
0a6a8     0F 2F 02 F1 | 	add	local09, local01
0a6ac     02 2E 66 F0 | 	shl	local09, #2
0a6b0     03 00 00 FF 
0a6b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6b8     F2 2E 02 F1 | 	add	local09, objptr
0a6bc     17 29 62 FC | 	wrlong	local06, local09
0a6c0     03 00 00 FF 
0a6c4     00 E4 05 F1 | 	add	objptr, ##1536
0a6c8     F2 2E 02 FB | 	rdlong	local09, objptr
0a6cc     17 29 02 F6 | 	mov	local06, local09
0a6d0     01 28 66 F0 | 	shl	local06, #1
0a6d4     17 29 02 F1 | 	add	local06, local09
0a6d8     02 28 66 F0 | 	shl	local06, #2
0a6dc     03 00 00 FF 
0a6e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6e4     F2 28 02 F1 | 	add	local06, objptr
0a6e8     04 28 06 F1 | 	add	local06, #4
0a6ec     14 2B 62 FC | 	wrlong	local07, local06
0a6f0     03 00 00 FF 
0a6f4     00 E4 05 F1 | 	add	objptr, ##1536
0a6f8     F2 2E 02 FB | 	rdlong	local09, objptr
0a6fc     17 2B 02 F6 | 	mov	local07, local09
0a700     01 2A 66 F0 | 	shl	local07, #1
0a704     17 2B 02 F1 | 	add	local07, local09
0a708     02 2A 66 F0 | 	shl	local07, #2
0a70c     03 00 00 FF 
0a710     00 E4 85 F1 | 	sub	objptr, ##1536
0a714     F2 2A 02 F1 | 	add	local07, objptr
0a718     08 2A 06 F1 | 	add	local07, #8
0a71c     15 27 62 FC | 	wrlong	local05, local07
0a720     03 00 00 FF 
0a724     00 E4 05 F1 | 	add	objptr, ##1536
0a728     F2 28 02 FB | 	rdlong	local06, objptr
0a72c     01 28 06 F1 | 	add	local06, #1
0a730     F2 28 62 FC | 	wrlong	local06, objptr
0a734     13 00 00 FF 
0a738     38 E4 85 F1 | 	sub	objptr, ##9784
0a73c     F2 28 02 FB | 	rdlong	local06, objptr
0a740     01 28 06 F1 | 	add	local06, #1
0a744     F2 28 62 FC | 	wrlong	local06, objptr
0a748     37 00 00 FF 
0a74c     44 E4 85 F1 | 	sub	objptr, ##28228
0a750     B4 03 90 FD | 	jmp	#LR__0913
0a754                 | LR__0904
0a754     37 00 00 FF 
0a758     44 E4 05 F1 | 	add	objptr, ##28228
0a75c     F2 16 02 FB | 	rdlong	arg03, objptr
0a760     03 16 66 F0 | 	shl	arg03, #3
0a764     02 00 00 FF 
0a768     38 E4 85 F1 | 	sub	objptr, ##1080
0a76c     F2 16 02 F1 | 	add	arg03, objptr
0a770     0B 13 02 FB | 	rdlong	arg01, arg03
0a774     35 00 00 FF 
0a778     0C E4 85 F1 | 	sub	objptr, ##27148
0a77c     09 2D 02 F6 | 	mov	local08, arg01
0a780     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a784                 | LR__0905
0a784     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a788     01 2C 06 51 |  if_ne	add	local08, #1
0a78c     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a790                 | LR__0906
0a790     09 2D 82 F1 | 	sub	local08, arg01
0a794     16 FB 01 F6 | 	mov	result1, local08
0a798     51 00 00 FF 
0a79c     F8 E5 05 F1 | 	add	objptr, ##41976
0a7a0     F2 FA 61 FC | 	wrlong	result1, objptr
0a7a4     4C E4 85 F1 | 	sub	objptr, #76
0a7a8     F2 12 02 FB | 	rdlong	arg01, objptr
0a7ac     FD 12 82 F1 | 	sub	arg01, result1
0a7b0     04 12 86 F1 | 	sub	arg01, #4
0a7b4     03 12 26 F5 | 	andn	arg01, #3
0a7b8     F2 12 62 FC | 	wrlong	arg01, objptr
0a7bc     4C E4 05 F1 | 	add	objptr, #76
0a7c0     F2 14 02 FB | 	rdlong	arg02, objptr
0a7c4     51 00 00 FF 
0a7c8     F8 E5 85 F1 | 	sub	objptr, ##41976
0a7cc     48 2C B1 FD | 	call	#_pslpoke
0a7d0                 | '     pslpoke memtop,l
0a7d0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a7d0     01 30 06 F6 | 	mov	local10, #1
0a7d4     51 00 00 FF 
0a7d8     F8 E5 05 F1 | 	add	objptr, ##41976
0a7dc     F2 32 02 FB | 	rdlong	local11, objptr
0a7e0     51 00 00 FF 
0a7e4     F8 E5 85 F1 | 	sub	objptr, ##41976
0a7e8     01 32 06 F1 | 	add	local11, #1
0a7ec                 | LR__0907
0a7ec     19 31 52 F2 | 	cmps	local10, local11 wc
0a7f0     5C 00 90 3D |  if_ae	jmp	#LR__0908
0a7f4     51 00 00 FF 
0a7f8     AC E5 05 F1 | 	add	objptr, ##41900
0a7fc     F2 2A 02 FB | 	rdlong	local07, objptr
0a800     03 2A 06 F1 | 	add	local07, #3
0a804     18 2B 02 F1 | 	add	local07, local10
0a808     1A 00 00 FF 
0a80c     68 E5 85 F1 | 	sub	objptr, ##13672
0a810     F2 2E 02 FB | 	rdlong	local09, objptr
0a814     03 2E 66 F0 | 	shl	local09, #3
0a818     02 00 00 FF 
0a81c     38 E4 85 F1 | 	sub	objptr, ##1080
0a820     F2 2E 02 F1 | 	add	local09, objptr
0a824     17 13 02 FB | 	rdlong	arg01, local09
0a828     18 15 02 F6 | 	mov	arg02, local10
0a82c     01 16 06 F6 | 	mov	arg03, #1
0a830     35 00 00 FF 
0a834     0C E4 85 F1 | 	sub	objptr, ##27148
0a838     9C 81 B1 FD | 	call	#__system__Mid_S
0a83c     FD 14 C2 FA | 	rdbyte	arg02, result1
0a840     15 13 02 F6 | 	mov	arg01, local07
0a844     60 2C B1 FD | 	call	#_pspoke
0a848     01 30 06 F1 | 	add	local10, #1
0a84c     9C FF 9F FD | 	jmp	#LR__0907
0a850                 | LR__0908
0a850     51 00 00 FF 
0a854     AC E5 05 F1 | 	add	objptr, ##41900
0a858     F2 1E 02 FB | 	rdlong	local01, objptr
0a85c     2B 22 06 F6 | 	mov	local03, #43
0a860     0F 29 02 F6 | 	mov	local06, local01
0a864     10 2B 02 F6 | 	mov	local07, local02
0a868     11 33 02 F6 | 	mov	local11, local03
0a86c     07 00 00 FF 
0a870     30 E5 85 F1 | 	sub	objptr, ##3888
0a874     F2 30 02 FB | 	rdlong	local10, objptr
0a878     18 2F 02 F6 | 	mov	local09, local10
0a87c     01 2E 66 F0 | 	shl	local09, #1
0a880     18 2F 02 F1 | 	add	local09, local10
0a884     02 2E 66 F0 | 	shl	local09, #2
0a888     03 00 00 FF 
0a88c     00 E4 85 F1 | 	sub	objptr, ##1536
0a890     F2 2E 02 F1 | 	add	local09, objptr
0a894     17 29 62 FC | 	wrlong	local06, local09
0a898     03 00 00 FF 
0a89c     00 E4 05 F1 | 	add	objptr, ##1536
0a8a0     F2 30 02 FB | 	rdlong	local10, objptr
0a8a4     18 2F 02 F6 | 	mov	local09, local10
0a8a8     01 2E 66 F0 | 	shl	local09, #1
0a8ac     18 2F 02 F1 | 	add	local09, local10
0a8b0     02 2E 66 F0 | 	shl	local09, #2
0a8b4     03 00 00 FF 
0a8b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a8bc     F2 2E 02 F1 | 	add	local09, objptr
0a8c0     04 2E 06 F1 | 	add	local09, #4
0a8c4     17 2B 62 FC | 	wrlong	local07, local09
0a8c8     03 00 00 FF 
0a8cc     00 E4 05 F1 | 	add	objptr, ##1536
0a8d0     F2 30 02 FB | 	rdlong	local10, objptr
0a8d4     18 2F 02 F6 | 	mov	local09, local10
0a8d8     01 2E 66 F0 | 	shl	local09, #1
0a8dc     18 2F 02 F1 | 	add	local09, local10
0a8e0     02 2E 66 F0 | 	shl	local09, #2
0a8e4     03 00 00 FF 
0a8e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a8ec     F2 2E 02 F1 | 	add	local09, objptr
0a8f0     08 2E 06 F1 | 	add	local09, #8
0a8f4     17 33 62 FC | 	wrlong	local11, local09
0a8f8     03 00 00 FF 
0a8fc     00 E4 05 F1 | 	add	objptr, ##1536
0a900     F2 28 02 FB | 	rdlong	local06, objptr
0a904     01 28 06 F1 | 	add	local06, #1
0a908     F2 28 62 FC | 	wrlong	local06, objptr
0a90c     13 00 00 FF 
0a910     38 E4 85 F1 | 	sub	objptr, ##9784
0a914     F2 28 02 FB | 	rdlong	local06, objptr
0a918     01 28 06 F1 | 	add	local06, #1
0a91c     F2 28 62 FC | 	wrlong	local06, objptr
0a920     37 00 00 FF 
0a924     44 E4 85 F1 | 	sub	objptr, ##28228
0a928     DC 01 90 FD | 	jmp	#LR__0913
0a92c                 | LR__0909
0a92c     2C 22 06 F6 | 	mov	local03, #44
0a930     37 00 00 FF 
0a934     44 E4 05 F1 | 	add	objptr, ##28228
0a938     F2 28 02 FB | 	rdlong	local06, objptr
0a93c     03 28 66 F0 | 	shl	local06, #3
0a940     02 00 00 FF 
0a944     38 E4 85 F1 | 	sub	objptr, ##1080
0a948     F2 28 02 F1 | 	add	local06, objptr
0a94c     14 13 02 FB | 	rdlong	arg01, local06
0a950     00 14 06 F6 | 	mov	arg02, #0
0a954     35 00 00 FF 
0a958     0C E4 85 F1 | 	sub	objptr, ##27148
0a95c     10 91 B1 FD | 	call	#__system____builtin_atoi
0a960     FD 1E 02 F6 | 	mov	local01, result1
0a964     0F 29 02 F6 | 	mov	local06, local01
0a968     10 2B 02 F6 | 	mov	local07, local02
0a96c     11 33 02 F6 | 	mov	local11, local03
0a970     4A 00 00 FF 
0a974     7C E4 05 F1 | 	add	objptr, ##38012
0a978     F2 30 02 FB | 	rdlong	local10, objptr
0a97c     18 2F 02 F6 | 	mov	local09, local10
0a980     01 2E 66 F0 | 	shl	local09, #1
0a984     18 2F 02 F1 | 	add	local09, local10
0a988     02 2E 66 F0 | 	shl	local09, #2
0a98c     03 00 00 FF 
0a990     00 E4 85 F1 | 	sub	objptr, ##1536
0a994     F2 2E 02 F1 | 	add	local09, objptr
0a998     17 29 62 FC | 	wrlong	local06, local09
0a99c     03 00 00 FF 
0a9a0     00 E4 05 F1 | 	add	objptr, ##1536
0a9a4     F2 30 02 FB | 	rdlong	local10, objptr
0a9a8     18 2F 02 F6 | 	mov	local09, local10
0a9ac     01 2E 66 F0 | 	shl	local09, #1
0a9b0     18 2F 02 F1 | 	add	local09, local10
0a9b4     02 2E 66 F0 | 	shl	local09, #2
0a9b8     03 00 00 FF 
0a9bc     00 E4 85 F1 | 	sub	objptr, ##1536
0a9c0     F2 2E 02 F1 | 	add	local09, objptr
0a9c4     04 2E 06 F1 | 	add	local09, #4
0a9c8     17 2B 62 FC | 	wrlong	local07, local09
0a9cc     03 00 00 FF 
0a9d0     00 E4 05 F1 | 	add	objptr, ##1536
0a9d4     F2 30 02 FB | 	rdlong	local10, objptr
0a9d8     18 2F 02 F6 | 	mov	local09, local10
0a9dc     01 2E 66 F0 | 	shl	local09, #1
0a9e0     18 2F 02 F1 | 	add	local09, local10
0a9e4     02 2E 66 F0 | 	shl	local09, #2
0a9e8     03 00 00 FF 
0a9ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a9f0     F2 2E 02 F1 | 	add	local09, objptr
0a9f4     08 2E 06 F1 | 	add	local09, #8
0a9f8     17 33 62 FC | 	wrlong	local11, local09
0a9fc     03 00 00 FF 
0aa00     00 E4 05 F1 | 	add	objptr, ##1536
0aa04     F2 28 02 FB | 	rdlong	local06, objptr
0aa08     01 28 06 F1 | 	add	local06, #1
0aa0c     F2 28 62 FC | 	wrlong	local06, objptr
0aa10     13 00 00 FF 
0aa14     38 E4 85 F1 | 	sub	objptr, ##9784
0aa18     F2 28 02 FB | 	rdlong	local06, objptr
0aa1c     01 28 06 F1 | 	add	local06, #1
0aa20     F2 28 62 FC | 	wrlong	local06, objptr
0aa24     37 00 00 FF 
0aa28     44 E4 85 F1 | 	sub	objptr, ##28228
0aa2c     D8 00 90 FD | 	jmp	#LR__0913
0aa30                 | LR__0910
0aa30     12 13 02 F6 | 	mov	arg01, local04
0aa34     24 04 B0 FD | 	call	#_getvar
0aa38     37 00 00 FF 
0aa3c     44 E4 05 F1 | 	add	objptr, ##28228
0aa40     F2 28 02 FB | 	rdlong	local06, objptr
0aa44     01 28 06 F1 | 	add	local06, #1
0aa48     F2 28 62 FC | 	wrlong	local06, objptr
0aa4c     37 00 00 FF 
0aa50     44 E4 85 F1 | 	sub	objptr, ##28228
0aa54                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0aa54     01 FA 55 F2 | 	cmps	result1, #1 wc
0aa58     B0 00 90 3D |  if_ae	jmp	#LR__0914
0aa5c     A8 00 90 FD | 	jmp	#LR__0913
0aa60                 | LR__0911
0aa60     37 00 00 FF 
0aa64     44 E4 05 F1 | 	add	objptr, ##28228
0aa68     F2 28 02 FB | 	rdlong	local06, objptr
0aa6c     01 28 06 F1 | 	add	local06, #1
0aa70     F2 28 62 FC | 	wrlong	local06, objptr
0aa74     37 00 00 FF 
0aa78     44 E4 85 F1 | 	sub	objptr, ##28228
0aa7c     20 F1 BF FD | 	call	#_expr
0aa80                 | '     ct+=1
0aa80                 | '     err=expr() : if err>0 then return err 
0aa80     01 FA 55 F2 | 	cmps	result1, #1 wc
0aa84     84 00 90 3D |  if_ae	jmp	#LR__0914
0aa88                 | '     if lparts(ct).token=token_rpar then ct+=1
0aa88     37 00 00 FF 
0aa8c     44 E4 05 F1 | 	add	objptr, ##28228
0aa90     F2 32 02 FB | 	rdlong	local11, objptr
0aa94     03 32 66 F0 | 	shl	local11, #3
0aa98     02 00 00 FF 
0aa9c     38 E4 85 F1 | 	sub	objptr, ##1080
0aaa0     F2 32 02 F1 | 	add	local11, objptr
0aaa4     04 32 06 F1 | 	add	local11, #4
0aaa8     19 33 02 FB | 	rdlong	local11, local11
0aaac     14 32 0E F2 | 	cmp	local11, #20 wz
0aab0     35 00 00 FF 
0aab4     0C E4 85 F1 | 	sub	objptr, ##27148
0aab8     4C 00 90 5D |  if_ne	jmp	#LR__0913
0aabc     37 00 00 FF 
0aac0     44 E4 05 F1 | 	add	objptr, ##28228
0aac4     F2 28 02 FB | 	rdlong	local06, objptr
0aac8     01 28 06 F1 | 	add	local06, #1
0aacc     F2 28 62 FC | 	wrlong	local06, objptr
0aad0     37 00 00 FF 
0aad4     44 E4 85 F1 | 	sub	objptr, ##28228
0aad8     2C 00 90 FD | 	jmp	#LR__0913
0aadc                 | LR__0912
0aadc     12 13 02 F6 | 	mov	arg01, local04
0aae0     34 00 B0 FD | 	call	#_getfun
0aae4     37 00 00 FF 
0aae8     44 E4 05 F1 | 	add	objptr, ##28228
0aaec     F2 28 02 FB | 	rdlong	local06, objptr
0aaf0     01 28 06 F1 | 	add	local06, #1
0aaf4     F2 28 62 FC | 	wrlong	local06, objptr
0aaf8     37 00 00 FF 
0aafc     44 E4 85 F1 | 	sub	objptr, ##28228
0ab00                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ab00     01 FA 55 F2 | 	cmps	result1, #1 wc
0ab04     04 00 90 3D |  if_ae	jmp	#LR__0914
0ab08                 | LR__0913
0ab08                 | ' return 0  
0ab08     00 FA 05 F6 | 	mov	result1, #0
0ab0c                 | LR__0914
0ab0c     A7 F0 03 F6 | 	mov	ptra, fp
0ab10     B2 00 A0 FD | 	call	#popregs_
0ab14                 | _getvalue_ret
0ab14     2D 00 64 FD | 	ret
0ab18                 | 
0ab18                 | ' 
0ab18                 | ' ' Get a function result 
0ab18                 | ' 
0ab18                 | ' function getfun(m as integer) as ulong
0ab18                 | _getfun
0ab18     0F 4A 05 F6 | 	mov	COUNT_, #15
0ab1c     A8 00 A0 FD | 	call	#pushregs_
0ab20                 | _getfun_enter
0ab20     09 25 02 F6 | 	mov	local04, arg01
0ab24     37 00 00 FF 
0ab28     44 E4 05 F1 | 	add	objptr, ##28228
0ab2c     F2 26 02 FB | 	rdlong	local05, objptr
0ab30     13 29 02 F6 | 	mov	local06, local05
0ab34     00 2A 06 F6 | 	mov	local07, #0
0ab38                 | ' oldct=ct
0ab38                 | ' numpar=0
0ab38                 | ' if lparts(ct+1).token=token_lpar then
0ab38     01 26 06 F1 | 	add	local05, #1
0ab3c     03 26 66 F0 | 	shl	local05, #3
0ab40     02 00 00 FF 
0ab44     38 E4 85 F1 | 	sub	objptr, ##1080
0ab48     F2 26 02 F1 | 	add	local05, objptr
0ab4c     04 26 06 F1 | 	add	local05, #4
0ab50     13 27 02 FB | 	rdlong	local05, local05
0ab54     15 26 0E F2 | 	cmp	local05, #21 wz
0ab58     35 00 00 FF 
0ab5c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab60     54 01 90 5D |  if_ne	jmp	#LR__0924
0ab64     37 00 00 FF 
0ab68     44 E4 05 F1 | 	add	objptr, ##28228
0ab6c     F2 2C 02 FB | 	rdlong	local08, objptr
0ab70     01 2C 06 F1 | 	add	local08, #1
0ab74     F2 2C 62 FC | 	wrlong	local08, objptr
0ab78     37 00 00 FF 
0ab7c     44 E4 85 F1 | 	sub	objptr, ##28228
0ab80                 | '   ct+=1 											' omit this lpar, this is for expr list
0ab80                 | '   do
0ab80                 | LR__0920
0ab80     37 00 00 FF 
0ab84     44 E4 05 F1 | 	add	objptr, ##28228
0ab88     F2 26 02 FB | 	rdlong	local05, objptr
0ab8c     01 26 06 F1 | 	add	local05, #1
0ab90     F2 26 62 FC | 	wrlong	local05, objptr
0ab94                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ab94                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0ab94     03 26 66 F0 | 	shl	local05, #3
0ab98     02 00 00 FF 
0ab9c     38 E4 85 F1 | 	sub	objptr, ##1080
0aba0     F2 26 02 F1 | 	add	local05, objptr
0aba4     04 26 06 F1 | 	add	local05, #4
0aba8     13 2D 02 FB | 	rdlong	local08, local05
0abac     15 2C 0E F2 | 	cmp	local08, #21 wz
0abb0     35 00 00 FF 
0abb4     0C E4 85 F1 | 	sub	objptr, ##27148
0abb8     44 00 90 5D |  if_ne	jmp	#LR__0921
0abbc     37 00 00 FF 
0abc0     44 E4 05 F1 | 	add	objptr, ##28228
0abc4     F2 2C 02 FB | 	rdlong	local08, objptr
0abc8     01 2C 06 F1 | 	add	local08, #1
0abcc     F2 2C 62 FC | 	wrlong	local08, objptr
0abd0     37 00 00 FF 
0abd4     44 E4 85 F1 | 	sub	objptr, ##28228
0abd8     C4 EF BF FD | 	call	#_expr
0abdc     FD 2E 02 F6 | 	mov	local09, result1
0abe0     37 00 00 FF 
0abe4     44 E4 05 F1 | 	add	objptr, ##28228
0abe8     F2 2C 02 FB | 	rdlong	local08, objptr
0abec     01 2C 06 F1 | 	add	local08, #1
0abf0     F2 2C 62 FC | 	wrlong	local08, objptr
0abf4     37 00 00 FF 
0abf8     44 E4 85 F1 | 	sub	objptr, ##28228
0abfc     08 00 90 FD | 	jmp	#LR__0922
0ac00                 | LR__0921
0ac00     9C EF BF FD | 	call	#_expr
0ac04     FD 2E 02 F6 | 	mov	local09, result1
0ac08                 | LR__0922
0ac08                 | '     if err>0 then return err
0ac08     01 2E 16 F2 | 	cmp	local09, #1 wc
0ac0c     17 FB 01 36 |  if_ae	mov	result1, local09
0ac10     3C 02 90 3D |  if_ae	jmp	#LR__0926
0ac14     01 2A 06 F1 | 	add	local07, #1
0ac18     37 00 00 FF 
0ac1c     44 E4 05 F1 | 	add	objptr, ##28228
0ac20     F2 26 02 FB | 	rdlong	local05, objptr
0ac24     03 26 66 F0 | 	shl	local05, #3
0ac28     02 00 00 FF 
0ac2c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac30     F2 26 02 F1 | 	add	local05, objptr
0ac34     04 26 06 F1 | 	add	local05, #4
0ac38     13 2F 02 FB | 	rdlong	local09, local05
0ac3c     14 2E 0E F2 | 	cmp	local09, #20 wz
0ac40     35 00 00 FF 
0ac44     0C E4 85 F1 | 	sub	objptr, ##27148
0ac48     34 00 90 AD |  if_e	jmp	#LR__0923
0ac4c     37 00 00 FF 
0ac50     44 E4 05 F1 | 	add	objptr, ##28228
0ac54     F2 2E 02 FB | 	rdlong	local09, objptr
0ac58     03 2E 66 F0 | 	shl	local09, #3
0ac5c     02 00 00 FF 
0ac60     38 E4 85 F1 | 	sub	objptr, ##1080
0ac64     F2 2E 02 F1 | 	add	local09, objptr
0ac68     04 2E 06 F1 | 	add	local09, #4
0ac6c     17 2F 02 FB | 	rdlong	local09, local09
0ac70     FE 2F 0E F2 | 	cmp	local09, #510 wz
0ac74     35 00 00 FF 
0ac78     0C E4 85 F1 | 	sub	objptr, ##27148
0ac7c     00 FF 9F 5D |  if_ne	jmp	#LR__0920
0ac80                 | LR__0923
0ac80                 | '   if lparts(ct).token=token_end then return 14
0ac80     37 00 00 FF 
0ac84     44 E4 05 F1 | 	add	objptr, ##28228
0ac88     F2 26 02 FB | 	rdlong	local05, objptr
0ac8c     03 26 66 F0 | 	shl	local05, #3
0ac90     02 00 00 FF 
0ac94     38 E4 85 F1 | 	sub	objptr, ##1080
0ac98     F2 26 02 F1 | 	add	local05, objptr
0ac9c     04 26 06 F1 | 	add	local05, #4
0aca0     13 2F 02 FB | 	rdlong	local09, local05
0aca4     FE 2F 0E F2 | 	cmp	local09, #510 wz
0aca8     35 00 00 FF 
0acac     0C E4 85 F1 | 	sub	objptr, ##27148
0acb0     0E FA 05 A6 |  if_e	mov	result1, #14
0acb4     98 01 90 AD |  if_e	jmp	#LR__0926
0acb8                 | LR__0924
0acb8     15 1F 02 F6 | 	mov	local01, local07
0acbc     03 28 66 F0 | 	shl	local06, #3
0acc0     35 00 00 FF 
0acc4     0C E4 05 F1 | 	add	objptr, ##27148
0acc8     F2 28 02 F1 | 	add	local06, objptr
0accc     04 28 06 F1 | 	add	local06, #4
0acd0     14 23 02 FB | 	rdlong	local03, local06
0acd4     0F 2D 02 F6 | 	mov	local08, local01
0acd8     10 31 02 F6 | 	mov	local10, local02
0acdc     11 33 02 F6 | 	mov	local11, local03
0ace0     15 00 00 FF 
0ace4     70 E4 05 F1 | 	add	objptr, ##10864
0ace8     F2 34 02 FB | 	rdlong	local12, objptr
0acec     1A 37 02 F6 | 	mov	local13, local12
0acf0     01 36 66 F0 | 	shl	local13, #1
0acf4     1A 37 02 F1 | 	add	local13, local12
0acf8     02 36 66 F0 | 	shl	local13, #2
0acfc     03 00 00 FF 
0ad00     00 E4 85 F1 | 	sub	objptr, ##1536
0ad04     F2 36 02 F1 | 	add	local13, objptr
0ad08     1B 2D 62 FC | 	wrlong	local08, local13
0ad0c     03 00 00 FF 
0ad10     00 E4 05 F1 | 	add	objptr, ##1536
0ad14     F2 2C 02 FB | 	rdlong	local08, objptr
0ad18     16 39 02 F6 | 	mov	local14, local08
0ad1c     01 38 66 F0 | 	shl	local14, #1
0ad20     16 39 02 F1 | 	add	local14, local08
0ad24     02 38 66 F0 | 	shl	local14, #2
0ad28     03 00 00 FF 
0ad2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad30     F2 38 02 F1 | 	add	local14, objptr
0ad34     04 38 06 F1 | 	add	local14, #4
0ad38     1C 31 62 FC | 	wrlong	local10, local14
0ad3c     03 00 00 FF 
0ad40     00 E4 05 F1 | 	add	objptr, ##1536
0ad44     F2 2C 02 FB | 	rdlong	local08, objptr
0ad48     16 3B 02 F6 | 	mov	local15, local08
0ad4c     01 3A 66 F0 | 	shl	local15, #1
0ad50     16 3B 02 F1 | 	add	local15, local08
0ad54     02 3A 66 F0 | 	shl	local15, #2
0ad58     03 00 00 FF 
0ad5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad60     F2 3A 02 F1 | 	add	local15, objptr
0ad64     08 3A 06 F1 | 	add	local15, #8
0ad68     1D 33 62 FC | 	wrlong	local11, local15
0ad6c     03 00 00 FF 
0ad70     00 E4 05 F1 | 	add	objptr, ##1536
0ad74     F2 2C 02 FB | 	rdlong	local08, objptr
0ad78     01 2C 06 F1 | 	add	local08, #1
0ad7c     F2 2C 62 FC | 	wrlong	local08, objptr
0ad80     4A 00 00 FF 
0ad84     7C E4 85 F1 | 	sub	objptr, ##38012
0ad88                 | ' t2.result.uresult=numpar
0ad88                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0ad88                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0ad88                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0ad88     FF FF 7F FF 
0ad8c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ad90     B8 00 90 5D |  if_ne	jmp	#LR__0925
0ad94     15 22 06 F6 | 	mov	local03, #21
0ad98     0F 2D 02 F6 | 	mov	local08, local01
0ad9c     10 31 02 F6 | 	mov	local10, local02
0ada0     11 33 02 F6 | 	mov	local11, local03
0ada4     4A 00 00 FF 
0ada8     7C E4 05 F1 | 	add	objptr, ##38012
0adac     F2 34 02 FB | 	rdlong	local12, objptr
0adb0     1A 37 02 F6 | 	mov	local13, local12
0adb4     01 36 66 F0 | 	shl	local13, #1
0adb8     1A 37 02 F1 | 	add	local13, local12
0adbc     02 36 66 F0 | 	shl	local13, #2
0adc0     03 00 00 FF 
0adc4     00 E4 85 F1 | 	sub	objptr, ##1536
0adc8     F2 36 02 F1 | 	add	local13, objptr
0adcc     1B 2D 62 FC | 	wrlong	local08, local13
0add0     03 00 00 FF 
0add4     00 E4 05 F1 | 	add	objptr, ##1536
0add8     F2 3A 02 FB | 	rdlong	local15, objptr
0addc     1D 39 02 F6 | 	mov	local14, local15
0ade0     01 38 66 F0 | 	shl	local14, #1
0ade4     1D 39 02 F1 | 	add	local14, local15
0ade8     02 38 66 F0 | 	shl	local14, #2
0adec     03 00 00 FF 
0adf0     00 E4 85 F1 | 	sub	objptr, ##1536
0adf4     F2 38 02 F1 | 	add	local14, objptr
0adf8     04 38 06 F1 | 	add	local14, #4
0adfc     1C 31 62 FC | 	wrlong	local10, local14
0ae00     03 00 00 FF 
0ae04     00 E4 05 F1 | 	add	objptr, ##1536
0ae08     F2 38 02 FB | 	rdlong	local14, objptr
0ae0c     1C 3B 02 F6 | 	mov	local15, local14
0ae10     01 3A 66 F0 | 	shl	local15, #1
0ae14     1C 3B 02 F1 | 	add	local15, local14
0ae18     02 3A 66 F0 | 	shl	local15, #2
0ae1c     03 00 00 FF 
0ae20     00 E4 85 F1 | 	sub	objptr, ##1536
0ae24     F2 3A 02 F1 | 	add	local15, objptr
0ae28     08 3A 06 F1 | 	add	local15, #8
0ae2c     1D 33 62 FC | 	wrlong	local11, local15
0ae30     03 00 00 FF 
0ae34     00 E4 05 F1 | 	add	objptr, ##1536
0ae38     F2 2C 02 FB | 	rdlong	local08, objptr
0ae3c     01 2C 06 F1 | 	add	local08, #1
0ae40     F2 2C 62 FC | 	wrlong	local08, objptr
0ae44     4A 00 00 FF 
0ae48     7C E4 85 F1 | 	sub	objptr, ##38012
0ae4c                 | LR__0925
0ae4c                 | ' return 0
0ae4c     00 FA 05 F6 | 	mov	result1, #0
0ae50                 | LR__0926
0ae50     A7 F0 03 F6 | 	mov	ptra, fp
0ae54     B2 00 A0 FD | 	call	#popregs_
0ae58                 | _getfun_ret
0ae58     2D 00 64 FD | 	ret
0ae5c                 | 
0ae5c                 | '   
0ae5c                 | '   
0ae5c                 | ' function getvar(m as integer) as ulong
0ae5c                 | _getvar
0ae5c     11 4A 05 F6 | 	mov	COUNT_, #17
0ae60     A8 00 A0 FD | 	call	#pushregs_
0ae64                 | _getvar_enter
0ae64     09 25 02 F6 | 	mov	local04, arg01
0ae68     37 00 00 FF 
0ae6c     44 E4 05 F1 | 	add	objptr, ##28228
0ae70     F2 26 02 FB | 	rdlong	local05, objptr
0ae74     03 26 66 F0 | 	shl	local05, #3
0ae78     02 00 00 FF 
0ae7c     38 E4 85 F1 | 	sub	objptr, ##1080
0ae80     F2 26 02 F1 | 	add	local05, objptr
0ae84     13 29 02 FB | 	rdlong	local06, local05
0ae88     01 2A 66 F6 | 	neg	local07, #1
0ae8c                 | ' 
0ae8c                 | ' varname$=lparts(ct).part$
0ae8c                 | ' j=-1
0ae8c                 | ' 
0ae8c                 | ' for i=0 to varnum-1
0ae8c     00 2C 06 F6 | 	mov	local08, #0
0ae90     04 E4 85 F1 | 	sub	objptr, #4
0ae94     F2 2E 02 FB | 	rdlong	local09, objptr
0ae98     35 00 00 FF 
0ae9c     08 E4 85 F1 | 	sub	objptr, ##27144
0aea0                 | LR__0930
0aea0     17 2D 52 F2 | 	cmps	local08, local09 wc
0aea4     38 00 90 3D |  if_ae	jmp	#LR__0931
0aea8                 | '   if variables(i).name=varname$ then j=i : exit
0aea8     16 27 02 F6 | 	mov	local05, local08
0aeac     04 26 66 F0 | 	shl	local05, #4
0aeb0     14 00 00 FF 
0aeb4     F8 E5 05 F1 | 	add	objptr, ##10744
0aeb8     F2 26 02 F1 | 	add	local05, objptr
0aebc     13 13 02 FB | 	rdlong	arg01, local05
0aec0     14 15 02 F6 | 	mov	arg02, local06
0aec4     14 00 00 FF 
0aec8     F8 E5 85 F1 | 	sub	objptr, ##10744
0aecc     9C 59 B1 FD | 	call	#__system___string_cmp
0aed0     00 FA 0D F2 | 	cmp	result1, #0 wz
0aed4     16 2B 02 A6 |  if_e	mov	local07, local08
0aed8     01 2C 06 51 |  if_ne	add	local08, #1
0aedc     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0aee0                 | LR__0931
0aee0                 | ' if  j=-1 andalso varnum<maxvars then   
0aee0     FF FF 7F FF 
0aee4     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0aee8     A8 00 90 5D |  if_ne	jmp	#LR__0932
0aeec     35 00 00 FF 
0aef0     08 E4 05 F1 | 	add	objptr, ##27144
0aef4     F2 2E 02 FB | 	rdlong	local09, objptr
0aef8     35 00 00 FF 
0aefc     08 E4 85 F1 | 	sub	objptr, ##27144
0af00     02 00 00 FF 
0af04     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0af08     88 00 90 3D |  if_ae	jmp	#LR__0932
0af0c     35 00 00 FF 
0af10     08 E4 05 F1 | 	add	objptr, ##27144
0af14     F2 26 02 FB | 	rdlong	local05, objptr
0af18     04 26 66 F0 | 	shl	local05, #4
0af1c     20 00 00 FF 
0af20     10 E4 85 F1 | 	sub	objptr, ##16400
0af24     F2 26 02 F1 | 	add	local05, objptr
0af28     13 29 62 FC | 	wrlong	local06, local05
0af2c     20 00 00 FF 
0af30     10 E4 05 F1 | 	add	objptr, ##16400
0af34     F2 26 02 FB | 	rdlong	local05, objptr
0af38     04 26 66 F0 | 	shl	local05, #4
0af3c     20 00 00 FF 
0af40     10 E4 85 F1 | 	sub	objptr, ##16400
0af44     F2 26 02 F1 | 	add	local05, objptr
0af48     04 26 06 F1 | 	add	local05, #4
0af4c     13 01 68 FC | 	wrlong	#0, local05
0af50     20 00 00 FF 
0af54     10 E4 05 F1 | 	add	objptr, ##16400
0af58     F2 26 02 FB | 	rdlong	local05, objptr
0af5c     04 26 66 F0 | 	shl	local05, #4
0af60     20 00 00 FF 
0af64     10 E4 85 F1 | 	sub	objptr, ##16400
0af68     F2 26 02 F1 | 	add	local05, objptr
0af6c     0C 26 06 F1 | 	add	local05, #12
0af70     13 39 68 FC | 	wrlong	#28, local05
0af74     20 00 00 FF 
0af78     10 E4 05 F1 | 	add	objptr, ##16400
0af7c     F2 2E 02 FB | 	rdlong	local09, objptr
0af80     17 2B 02 F6 | 	mov	local07, local09
0af84     01 2E 06 F1 | 	add	local09, #1
0af88     F2 2E 62 FC | 	wrlong	local09, objptr
0af8c     35 00 00 FF 
0af90     08 E4 85 F1 | 	sub	objptr, ##27144
0af94                 | LR__0932
0af94     00 2E 06 F6 | 	mov	local09, #0
0af98                 | ' numpar=0
0af98                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0af98     37 00 00 FF 
0af9c     44 E4 05 F1 | 	add	objptr, ##28228
0afa0     F2 26 02 FB | 	rdlong	local05, objptr
0afa4     01 26 06 F1 | 	add	local05, #1
0afa8     03 26 66 F0 | 	shl	local05, #3
0afac     02 00 00 FF 
0afb0     38 E4 85 F1 | 	sub	objptr, ##1080
0afb4     F2 26 02 F1 | 	add	local05, objptr
0afb8     04 26 06 F1 | 	add	local05, #4
0afbc     13 2D 02 FB | 	rdlong	local08, local05
0afc0     15 2C 0E F2 | 	cmp	local08, #21 wz
0afc4     35 00 00 FF 
0afc8     0C E4 85 F1 | 	sub	objptr, ##27148
0afcc     54 01 90 5D |  if_ne	jmp	#LR__0937
0afd0     37 00 00 FF 
0afd4     44 E4 05 F1 | 	add	objptr, ##28228
0afd8     F2 30 02 FB | 	rdlong	local10, objptr
0afdc     01 30 06 F1 | 	add	local10, #1
0afe0     F2 30 62 FC | 	wrlong	local10, objptr
0afe4     37 00 00 FF 
0afe8     44 E4 85 F1 | 	sub	objptr, ##28228
0afec                 | '   ct+=1 											' omit this lpar, this is for expr list
0afec                 | '   do
0afec                 | LR__0933
0afec     37 00 00 FF 
0aff0     44 E4 05 F1 | 	add	objptr, ##28228
0aff4     F2 26 02 FB | 	rdlong	local05, objptr
0aff8     01 26 06 F1 | 	add	local05, #1
0affc     F2 26 62 FC | 	wrlong	local05, objptr
0b000                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b000                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b000     03 26 66 F0 | 	shl	local05, #3
0b004     02 00 00 FF 
0b008     38 E4 85 F1 | 	sub	objptr, ##1080
0b00c     F2 26 02 F1 | 	add	local05, objptr
0b010     04 26 06 F1 | 	add	local05, #4
0b014     13 31 02 FB | 	rdlong	local10, local05
0b018     15 30 0E F2 | 	cmp	local10, #21 wz
0b01c     35 00 00 FF 
0b020     0C E4 85 F1 | 	sub	objptr, ##27148
0b024     44 00 90 5D |  if_ne	jmp	#LR__0934
0b028     37 00 00 FF 
0b02c     44 E4 05 F1 | 	add	objptr, ##28228
0b030     F2 30 02 FB | 	rdlong	local10, objptr
0b034     01 30 06 F1 | 	add	local10, #1
0b038     F2 30 62 FC | 	wrlong	local10, objptr
0b03c     37 00 00 FF 
0b040     44 E4 85 F1 | 	sub	objptr, ##28228
0b044     58 EB BF FD | 	call	#_expr
0b048     FD 32 02 F6 | 	mov	local11, result1
0b04c     37 00 00 FF 
0b050     44 E4 05 F1 | 	add	objptr, ##28228
0b054     F2 30 02 FB | 	rdlong	local10, objptr
0b058     01 30 06 F1 | 	add	local10, #1
0b05c     F2 30 62 FC | 	wrlong	local10, objptr
0b060     37 00 00 FF 
0b064     44 E4 85 F1 | 	sub	objptr, ##28228
0b068     08 00 90 FD | 	jmp	#LR__0935
0b06c                 | LR__0934
0b06c     30 EB BF FD | 	call	#_expr
0b070     FD 32 02 F6 | 	mov	local11, result1
0b074                 | LR__0935
0b074                 | '     if err>0 then return err
0b074     01 32 56 F2 | 	cmps	local11, #1 wc
0b078     19 FB 01 36 |  if_ae	mov	result1, local11
0b07c     2C 02 90 3D |  if_ae	jmp	#LR__0939
0b080     01 2E 06 F1 | 	add	local09, #1
0b084     37 00 00 FF 
0b088     44 E4 05 F1 | 	add	objptr, ##28228
0b08c     F2 26 02 FB | 	rdlong	local05, objptr
0b090     03 26 66 F0 | 	shl	local05, #3
0b094     02 00 00 FF 
0b098     38 E4 85 F1 | 	sub	objptr, ##1080
0b09c     F2 26 02 F1 | 	add	local05, objptr
0b0a0     04 26 06 F1 | 	add	local05, #4
0b0a4     13 33 02 FB | 	rdlong	local11, local05
0b0a8     14 32 0E F2 | 	cmp	local11, #20 wz
0b0ac     35 00 00 FF 
0b0b0     0C E4 85 F1 | 	sub	objptr, ##27148
0b0b4     34 00 90 AD |  if_e	jmp	#LR__0936
0b0b8     37 00 00 FF 
0b0bc     44 E4 05 F1 | 	add	objptr, ##28228
0b0c0     F2 32 02 FB | 	rdlong	local11, objptr
0b0c4     03 32 66 F0 | 	shl	local11, #3
0b0c8     02 00 00 FF 
0b0cc     38 E4 85 F1 | 	sub	objptr, ##1080
0b0d0     F2 32 02 F1 | 	add	local11, objptr
0b0d4     04 32 06 F1 | 	add	local11, #4
0b0d8     19 33 02 FB | 	rdlong	local11, local11
0b0dc     FE 33 0E F2 | 	cmp	local11, #510 wz
0b0e0     35 00 00 FF 
0b0e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b0e8     00 FF 9F 5D |  if_ne	jmp	#LR__0933
0b0ec                 | LR__0936
0b0ec                 | '     if lparts(ct).token=token_end then return 14
0b0ec     37 00 00 FF 
0b0f0     44 E4 05 F1 | 	add	objptr, ##28228
0b0f4     F2 26 02 FB | 	rdlong	local05, objptr
0b0f8     03 26 66 F0 | 	shl	local05, #3
0b0fc     02 00 00 FF 
0b100     38 E4 85 F1 | 	sub	objptr, ##1080
0b104     F2 26 02 F1 | 	add	local05, objptr
0b108     04 26 06 F1 | 	add	local05, #4
0b10c     13 33 02 FB | 	rdlong	local11, local05
0b110     FE 33 0E F2 | 	cmp	local11, #510 wz
0b114     35 00 00 FF 
0b118     0C E4 85 F1 | 	sub	objptr, ##27148
0b11c     0E FA 05 A6 |  if_e	mov	result1, #14
0b120     88 01 90 AD |  if_e	jmp	#LR__0939
0b124                 | LR__0937
0b124     17 21 02 F6 | 	mov	local02, local09
0b128     11 22 06 F6 | 	mov	local03, #17
0b12c     15 1F 02 F6 | 	mov	local01, local07
0b130     0F 31 02 F6 | 	mov	local10, local01
0b134     10 35 02 F6 | 	mov	local12, local02
0b138     11 37 02 F6 | 	mov	local13, local03
0b13c     4A 00 00 FF 
0b140     7C E4 05 F1 | 	add	objptr, ##38012
0b144     F2 38 02 FB | 	rdlong	local14, objptr
0b148     1C 3B 02 F6 | 	mov	local15, local14
0b14c     01 3A 66 F0 | 	shl	local15, #1
0b150     1C 3B 02 F1 | 	add	local15, local14
0b154     02 3A 66 F0 | 	shl	local15, #2
0b158     03 00 00 FF 
0b15c     00 E4 85 F1 | 	sub	objptr, ##1536
0b160     F2 3A 02 F1 | 	add	local15, objptr
0b164     1D 31 62 FC | 	wrlong	local10, local15
0b168     03 00 00 FF 
0b16c     00 E4 05 F1 | 	add	objptr, ##1536
0b170     F2 30 02 FB | 	rdlong	local10, objptr
0b174     18 3D 02 F6 | 	mov	local16, local10
0b178     01 3C 66 F0 | 	shl	local16, #1
0b17c     18 3D 02 F1 | 	add	local16, local10
0b180     02 3C 66 F0 | 	shl	local16, #2
0b184     03 00 00 FF 
0b188     00 E4 85 F1 | 	sub	objptr, ##1536
0b18c     F2 3C 02 F1 | 	add	local16, objptr
0b190     04 3C 06 F1 | 	add	local16, #4
0b194     1E 35 62 FC | 	wrlong	local12, local16
0b198     03 00 00 FF 
0b19c     00 E4 05 F1 | 	add	objptr, ##1536
0b1a0     F2 30 02 FB | 	rdlong	local10, objptr
0b1a4     18 3F 02 F6 | 	mov	local17, local10
0b1a8     01 3E 66 F0 | 	shl	local17, #1
0b1ac     18 3F 02 F1 | 	add	local17, local10
0b1b0     02 3E 66 F0 | 	shl	local17, #2
0b1b4     03 00 00 FF 
0b1b8     00 E4 85 F1 | 	sub	objptr, ##1536
0b1bc     F2 3E 02 F1 | 	add	local17, objptr
0b1c0     08 3E 06 F1 | 	add	local17, #8
0b1c4     1F 37 62 FC | 	wrlong	local13, local17
0b1c8     03 00 00 FF 
0b1cc     00 E4 05 F1 | 	add	objptr, ##1536
0b1d0     F2 30 02 FB | 	rdlong	local10, objptr
0b1d4     01 30 06 F1 | 	add	local10, #1
0b1d8     F2 30 62 FC | 	wrlong	local10, objptr
0b1dc     4A 00 00 FF 
0b1e0     7C E4 85 F1 | 	sub	objptr, ##38012
0b1e4                 | ' t2.result.twowords(1)=numpar
0b1e4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b1e4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b1e4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b1e4     FF FF 7F FF 
0b1e8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b1ec     B8 00 90 5D |  if_ne	jmp	#LR__0938
0b1f0     15 22 06 F6 | 	mov	local03, #21
0b1f4     0F 31 02 F6 | 	mov	local10, local01
0b1f8     10 35 02 F6 | 	mov	local12, local02
0b1fc     11 37 02 F6 | 	mov	local13, local03
0b200     4A 00 00 FF 
0b204     7C E4 05 F1 | 	add	objptr, ##38012
0b208     F2 38 02 FB | 	rdlong	local14, objptr
0b20c     1C 3B 02 F6 | 	mov	local15, local14
0b210     01 3A 66 F0 | 	shl	local15, #1
0b214     1C 3B 02 F1 | 	add	local15, local14
0b218     02 3A 66 F0 | 	shl	local15, #2
0b21c     03 00 00 FF 
0b220     00 E4 85 F1 | 	sub	objptr, ##1536
0b224     F2 3A 02 F1 | 	add	local15, objptr
0b228     1D 31 62 FC | 	wrlong	local10, local15
0b22c     03 00 00 FF 
0b230     00 E4 05 F1 | 	add	objptr, ##1536
0b234     F2 3E 02 FB | 	rdlong	local17, objptr
0b238     1F 3D 02 F6 | 	mov	local16, local17
0b23c     01 3C 66 F0 | 	shl	local16, #1
0b240     1F 3D 02 F1 | 	add	local16, local17
0b244     02 3C 66 F0 | 	shl	local16, #2
0b248     03 00 00 FF 
0b24c     00 E4 85 F1 | 	sub	objptr, ##1536
0b250     F2 3C 02 F1 | 	add	local16, objptr
0b254     04 3C 06 F1 | 	add	local16, #4
0b258     1E 35 62 FC | 	wrlong	local12, local16
0b25c     03 00 00 FF 
0b260     00 E4 05 F1 | 	add	objptr, ##1536
0b264     F2 3C 02 FB | 	rdlong	local16, objptr
0b268     1E 3F 02 F6 | 	mov	local17, local16
0b26c     01 3E 66 F0 | 	shl	local17, #1
0b270     1E 3F 02 F1 | 	add	local17, local16
0b274     02 3E 66 F0 | 	shl	local17, #2
0b278     03 00 00 FF 
0b27c     00 E4 85 F1 | 	sub	objptr, ##1536
0b280     F2 3E 02 F1 | 	add	local17, objptr
0b284     08 3E 06 F1 | 	add	local17, #8
0b288     1F 37 62 FC | 	wrlong	local13, local17
0b28c     03 00 00 FF 
0b290     00 E4 05 F1 | 	add	objptr, ##1536
0b294     F2 30 02 FB | 	rdlong	local10, objptr
0b298     01 30 06 F1 | 	add	local10, #1
0b29c     F2 30 62 FC | 	wrlong	local10, objptr
0b2a0     4A 00 00 FF 
0b2a4     7C E4 85 F1 | 	sub	objptr, ##38012
0b2a8                 | LR__0938
0b2a8                 | ' return 0
0b2a8     00 FA 05 F6 | 	mov	result1, #0
0b2ac                 | LR__0939
0b2ac     A7 F0 03 F6 | 	mov	ptra, fp
0b2b0     B2 00 A0 FD | 	call	#popregs_
0b2b4                 | _getvar_ret
0b2b4     2D 00 64 FD | 	ret
0b2b8                 | 
0b2b8                 | ' 
0b2b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b2b8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b2b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b2b8                 | ' 
0b2b8                 | ' 
0b2b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b2b8                 | ' '                                                                                                                                       -
0b2b8                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b2b8                 | ' '                                                                                                                                       -
0b2b8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b2b8                 | ' 
0b2b8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b2b8                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b2b8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b2b8                 | ' 
0b2b8                 | ' function execute_line (astart=0 as integer) as integer
0b2b8                 | _execute_line
0b2b8     04 4A 05 F6 | 	mov	COUNT_, #4
0b2bc     A8 00 A0 FD | 	call	#pushregs_
0b2c0     50 00 00 FF 
0b2c4     BC E4 05 F1 | 	add	objptr, ##41148
0b2c8     F2 00 68 FC | 	wrlong	#0, objptr
0b2cc                 | ' 
0b2cc                 | ' runptr2=0
0b2cc                 | ' for lineptr_e=astart to lineptr-1
0b2cc     06 00 00 FF 
0b2d0     3C E4 85 F1 | 	sub	objptr, ##3132
0b2d4     F2 12 62 FC | 	wrlong	arg01, objptr
0b2d8     04 E4 85 F1 | 	sub	objptr, #4
0b2dc     F2 1E 02 FB | 	rdlong	local01, objptr
0b2e0     4A 00 00 FF 
0b2e4     7C E4 85 F1 | 	sub	objptr, ##38012
0b2e8                 | LR__0940
0b2e8     4A 00 00 FF 
0b2ec     80 E4 05 F1 | 	add	objptr, ##38016
0b2f0     F2 FA 01 FB | 	rdlong	result1, objptr
0b2f4     4A 00 00 FF 
0b2f8     80 E4 85 F1 | 	sub	objptr, ##38016
0b2fc     0F FB 51 F2 | 	cmps	result1, local01 wc
0b300     98 00 90 3D |  if_ae	jmp	#LR__0941
0b304     4A 00 00 FF 
0b308     80 E4 05 F1 | 	add	objptr, ##38016
0b30c     F2 FA 01 FB | 	rdlong	result1, objptr
0b310     FD 20 02 F6 | 	mov	local02, result1
0b314     01 20 66 F0 | 	shl	local02, #1
0b318     FD 20 02 F1 | 	add	local02, result1
0b31c     02 20 66 F0 | 	shl	local02, #2
0b320     03 00 00 FF 
0b324     04 E4 85 F1 | 	sub	objptr, ##1540
0b328     F2 20 02 F1 | 	add	local02, objptr
0b32c     08 20 06 F1 | 	add	local02, #8
0b330     10 21 02 FB | 	rdlong	local02, local02
0b334     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b338     02 20 66 F0 | 	shl	local02, #2
0b33c     04 00 00 FF 
0b340     1C E4 85 F1 | 	sub	objptr, ##2076
0b344     F2 20 02 F1 | 	add	local02, objptr
0b348     10 21 02 FB | 	rdlong	local02, local02
0b34c     10 23 02 F6 | 	mov	local03, local02
0b350     13 20 46 F7 | 	zerox	local02, #19
0b354     14 22 46 F0 | 	shr	local03, #20
0b358     02 22 66 F0 | 	shl	local03, #2
0b35c     ED 22 02 F1 | 	add	local03, __methods__
0b360     11 23 02 FB | 	rdlong	local03, local03
0b364     43 00 00 FF 
0b368     60 E4 85 F1 | 	sub	objptr, ##34400
0b36c     F2 24 02 F6 | 	mov	local04, objptr
0b370     10 E5 01 F6 | 	mov	objptr, local02
0b374     2D 22 62 FD | 	call	local03
0b378     12 E5 01 F6 | 	mov	objptr, local04
0b37c     4A 00 00 FF 
0b380     80 E4 05 F1 | 	add	objptr, ##38016
0b384     F2 24 02 FB | 	rdlong	local04, objptr
0b388     01 24 06 F1 | 	add	local04, #1
0b38c     F2 24 62 FC | 	wrlong	local04, objptr
0b390     4A 00 00 FF 
0b394     80 E4 85 F1 | 	sub	objptr, ##38016
0b398     4C FF 9F FD | 	jmp	#LR__0940
0b39c                 | LR__0941
0b39c                 | ' return runptr2
0b39c     50 00 00 FF 
0b3a0     BC E4 05 F1 | 	add	objptr, ##41148
0b3a4     F2 FA 01 FB | 	rdlong	result1, objptr
0b3a8     50 00 00 FF 
0b3ac     BC E4 85 F1 | 	sub	objptr, ##41148
0b3b0     A7 F0 03 F6 | 	mov	ptra, fp
0b3b4     B2 00 A0 FD | 	call	#popregs_
0b3b8                 | _execute_line_ret
0b3b8     2D 00 64 FD | 	ret
0b3bc                 | 
0b3bc                 | ' 
0b3bc                 | ' 
0b3bc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b3bc                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b3bc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b3bc                 | ' 
0b3bc                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b3bc                 | ' 
0b3bc                 | ' function pop() as expr_result
0b3bc                 | _pop
0b3bc                 | ' if stackpointer=0 then
0b3bc     43 00 00 FF 
0b3c0     58 E4 05 F1 | 	add	objptr, ##34392
0b3c4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b3c8     43 00 00 FF 
0b3cc     58 E4 85 F1 | 	sub	objptr, ##34392
0b3d0     FF 04 06 A6 |  if_e	mov	_var03, #255
0b3d4     18 00 06 A6 |  if_e	mov	_var01, #24
0b3d8     68 00 90 AD |  if_e	jmp	#LR__0950
0b3dc     43 00 00 FF 
0b3e0     58 E4 05 F1 | 	add	objptr, ##34392
0b3e4     F2 FA 01 FB | 	rdlong	result1, objptr
0b3e8     01 FA 85 F1 | 	sub	result1, #1
0b3ec     F2 FA 61 FC | 	wrlong	result1, objptr
0b3f0     FD FE 01 F6 | 	mov	result3, result1
0b3f4     01 FE 65 F0 | 	shl	result3, #1
0b3f8     FD FE 01 F1 | 	add	result3, result1
0b3fc     02 FE 65 F0 | 	shl	result3, #2
0b400     0C 00 00 FF 
0b404     0C E4 85 F1 | 	sub	objptr, ##6156
0b408     F2 FE 01 F1 | 	add	result3, objptr
0b40c     FF 00 02 FB | 	rdlong	_var01, result3
0b410     04 FE 05 F1 | 	add	result3, #4
0b414     FF FE 01 FB | 	rdlong	result3, result3
0b418     FD FC 01 F6 | 	mov	result2, result1
0b41c     01 FC 65 F0 | 	shl	result2, #1
0b420     FD FC 01 F1 | 	add	result2, result1
0b424     02 FC 65 F0 | 	shl	result2, #2
0b428     F2 FC 01 F1 | 	add	result2, objptr
0b42c     08 FC 05 F1 | 	add	result2, #8
0b430     FE FA 01 FB | 	rdlong	result1, result2
0b434     FF 02 02 F6 | 	mov	_var02, result3
0b438     FD 04 02 F6 | 	mov	_var03, result1
0b43c     37 00 00 FF 
0b440     4C E4 85 F1 | 	sub	objptr, ##28236
0b444                 | LR__0950
0b444                 | ' return t1
0b444     01 FD 01 F6 | 	mov	result2, _var02
0b448     02 FF 01 F6 | 	mov	result3, _var03
0b44c     00 FB 01 F6 | 	mov	result1, _var01
0b450                 | _pop_ret
0b450     2D 00 64 FD | 	ret
0b454                 | 
0b454                 | ' 
0b454                 | ' sub push(t1 as expr_result )
0b454                 | _push
0b454                 | ' if stackpointer<maxstack then 
0b454     43 00 00 FF 
0b458     58 E4 05 F1 | 	add	objptr, ##34392
0b45c     F2 00 02 FB | 	rdlong	_var01, objptr
0b460     43 00 00 FF 
0b464     58 E4 85 F1 | 	sub	objptr, ##34392
0b468     01 00 00 FF 
0b46c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b470     BC 00 90 3D |  if_ae	jmp	#LR__0960
0b474     09 01 02 FB | 	rdlong	_var01, arg01
0b478     04 12 06 F1 | 	add	arg01, #4
0b47c     09 03 02 FB | 	rdlong	_var02, arg01
0b480     04 12 06 F1 | 	add	arg01, #4
0b484     09 13 02 FB | 	rdlong	arg01, arg01
0b488     43 00 00 FF 
0b48c     58 E4 05 F1 | 	add	objptr, ##34392
0b490     F2 04 02 FB | 	rdlong	_var03, objptr
0b494     02 07 02 F6 | 	mov	_var04, _var03
0b498     01 06 66 F0 | 	shl	_var04, #1
0b49c     02 07 02 F1 | 	add	_var04, _var03
0b4a0     02 06 66 F0 | 	shl	_var04, #2
0b4a4     0C 00 00 FF 
0b4a8     0C E4 85 F1 | 	sub	objptr, ##6156
0b4ac     F2 06 02 F1 | 	add	_var04, objptr
0b4b0     03 01 62 FC | 	wrlong	_var01, _var04
0b4b4     0C 00 00 FF 
0b4b8     0C E4 05 F1 | 	add	objptr, ##6156
0b4bc     F2 06 02 FB | 	rdlong	_var04, objptr
0b4c0     03 05 02 F6 | 	mov	_var03, _var04
0b4c4     01 04 66 F0 | 	shl	_var03, #1
0b4c8     03 05 02 F1 | 	add	_var03, _var04
0b4cc     02 04 66 F0 | 	shl	_var03, #2
0b4d0     0C 00 00 FF 
0b4d4     0C E4 85 F1 | 	sub	objptr, ##6156
0b4d8     F2 04 02 F1 | 	add	_var03, objptr
0b4dc     04 04 06 F1 | 	add	_var03, #4
0b4e0     02 03 62 FC | 	wrlong	_var02, _var03
0b4e4     0C 00 00 FF 
0b4e8     0C E4 05 F1 | 	add	objptr, ##6156
0b4ec     F2 06 02 FB | 	rdlong	_var04, objptr
0b4f0     03 05 02 F6 | 	mov	_var03, _var04
0b4f4     01 04 66 F0 | 	shl	_var03, #1
0b4f8     03 05 02 F1 | 	add	_var03, _var04
0b4fc     02 04 66 F0 | 	shl	_var03, #2
0b500     0C 00 00 FF 
0b504     0C E4 85 F1 | 	sub	objptr, ##6156
0b508     F2 04 02 F1 | 	add	_var03, objptr
0b50c     08 04 06 F1 | 	add	_var03, #8
0b510     02 13 62 FC | 	wrlong	arg01, _var03
0b514     0C 00 00 FF 
0b518     0C E4 05 F1 | 	add	objptr, ##6156
0b51c     F2 00 02 FB | 	rdlong	_var01, objptr
0b520     01 00 06 F1 | 	add	_var01, #1
0b524     F2 00 62 FC | 	wrlong	_var01, objptr
0b528     43 00 00 FF 
0b52c     58 E4 85 F1 | 	sub	objptr, ##34392
0b530                 | LR__0960
0b530                 | _push_ret
0b530     2D 00 64 FD | 	ret
0b534                 | 
0b534                 | ' 
0b534                 | ' ' -------------------------------- Runtime converting functions
0b534                 | ' 
0b534                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b534                 | ' 
0b534                 | ' function  convertstring(psaddr as ulong) as string
0b534                 | _convertstring
0b534     04 4A 05 F6 | 	mov	COUNT_, #4
0b538     A8 00 A0 FD | 	call	#pushregs_
0b53c     09 1F 02 F6 | 	mov	local01, arg01
0b540     04 20 B1 FD | 	call	#_pslpeek
0b544     FD 20 02 F6 | 	mov	local02, result1
0b548     83 01 00 FF 
0b54c     49 23 06 F6 | 	mov	local03, ##@LR__5405
0b550                 | ' l=pslpeek(psaddr)
0b550                 | ' s="" 
0b550                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b550     01 24 06 F6 | 	mov	local04, #1
0b554     01 20 06 F1 | 	add	local02, #1
0b558                 | LR__0970
0b558     10 25 52 F2 | 	cmps	local04, local02 wc
0b55c     30 00 90 3D |  if_ae	jmp	#LR__0971
0b560     0F 13 02 F6 | 	mov	arg01, local01
0b564     03 12 06 F1 | 	add	arg01, #3
0b568     12 13 02 F1 | 	add	arg01, local04
0b56c     80 1F B1 FD | 	call	#_pspeek
0b570     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b574     0C 75 B1 FD | 	call	#__system__Chr_S
0b578     FD 14 02 F6 | 	mov	arg02, result1
0b57c     11 13 02 F6 | 	mov	arg01, local03
0b580     1C 53 B1 FD | 	call	#__system___string_concat
0b584     FD 22 02 F6 | 	mov	local03, result1
0b588     01 24 06 F1 | 	add	local04, #1
0b58c     C8 FF 9F FD | 	jmp	#LR__0970
0b590                 | LR__0971
0b590                 | ' return s
0b590     11 FB 01 F6 | 	mov	result1, local03
0b594     A7 F0 03 F6 | 	mov	ptra, fp
0b598     B2 00 A0 FD | 	call	#popregs_
0b59c                 | _convertstring_ret
0b59c     2D 00 64 FD | 	ret
0b5a0                 | 
0b5a0                 | ' 
0b5a0                 | ' ' converts a variable to an integer
0b5a0                 | ' 
0b5a0                 | ' function converttoint (t1 as expr_result) as integer 
0b5a0                 | _converttoint
0b5a0     02 4A 05 F6 | 	mov	COUNT_, #2
0b5a4     A8 00 A0 FD | 	call	#pushregs_
0b5a8     09 1F 02 F6 | 	mov	local01, arg01
0b5ac                 | ' 
0b5ac                 | ' select case t1.result_type
0b5ac     08 1E 06 F1 | 	add	local01, #8
0b5b0     0F 21 02 FB | 	rdlong	local02, local01
0b5b4     08 1E 86 F1 | 	sub	local01, #8
0b5b8     1C 20 0E F2 | 	cmp	local02, #28 wz
0b5bc     2C 00 90 AD |  if_e	jmp	#LR__0980
0b5c0     1D 20 0E F2 | 	cmp	local02, #29 wz
0b5c4     2C 00 90 AD |  if_e	jmp	#LR__0981
0b5c8     1E 20 0E F2 | 	cmp	local02, #30 wz
0b5cc     2C 00 90 AD |  if_e	jmp	#LR__0982
0b5d0     1F 20 0E F2 | 	cmp	local02, #31 wz
0b5d4     34 00 90 AD |  if_e	jmp	#LR__0983
0b5d8     2B 20 0E F2 | 	cmp	local02, #43 wz
0b5dc     44 00 90 AD |  if_e	jmp	#LR__0984
0b5e0     2C 20 0E F2 | 	cmp	local02, #44 wz
0b5e4     5C 00 90 AD |  if_e	jmp	#LR__0985
0b5e8     60 00 90 FD | 	jmp	#LR__0986
0b5ec                 | LR__0980
0b5ec     0F FB 01 FB | 	rdlong	result1, local01
0b5f0     5C 00 90 FD | 	jmp	#LR__0987
0b5f4                 | LR__0981
0b5f4     0F FB 01 FB | 	rdlong	result1, local01
0b5f8     54 00 90 FD | 	jmp	#LR__0987
0b5fc                 | LR__0982
0b5fc     0F 13 02 FB | 	rdlong	arg01, local01
0b600     01 14 06 F6 | 	mov	arg02, #1
0b604     B8 82 B1 FD | 	call	#__system___float_tointeger
0b608     44 00 90 FD | 	jmp	#LR__0987
0b60c                 | LR__0983
0b60c     0F 13 02 FB | 	rdlong	arg01, local01
0b610     F0 85 B1 FD | 	call	#__system____builtin_atof
0b614     FD 12 02 F6 | 	mov	arg01, result1
0b618     01 14 06 F6 | 	mov	arg02, #1
0b61c     A0 82 B1 FD | 	call	#__system___float_tointeger
0b620     2C 00 90 FD | 	jmp	#LR__0987
0b624                 | LR__0984
0b624     0F 13 02 FB | 	rdlong	arg01, local01
0b628     08 FF BF FD | 	call	#_convertstring
0b62c     FD 12 02 F6 | 	mov	arg01, result1
0b630     D0 85 B1 FD | 	call	#__system____builtin_atof
0b634     FD 12 02 F6 | 	mov	arg01, result1
0b638     01 14 06 F6 | 	mov	arg02, #1
0b63c     80 82 B1 FD | 	call	#__system___float_tointeger
0b640     0C 00 90 FD | 	jmp	#LR__0987
0b644                 | LR__0985
0b644     0F FB 01 FB | 	rdlong	result1, local01
0b648     04 00 90 FD | 	jmp	#LR__0987
0b64c                 | LR__0986
0b64c     00 FA 05 F6 | 	mov	result1, #0
0b650                 | LR__0987
0b650     A7 F0 03 F6 | 	mov	ptra, fp
0b654     B2 00 A0 FD | 	call	#popregs_
0b658                 | _converttoint_ret
0b658     2D 00 64 FD | 	ret
0b65c                 | 
0b65c                 | ' 
0b65c                 | ' ' converts a variable to float
0b65c                 | ' 
0b65c                 | ' function converttofloat (t1 as expr_result) as single
0b65c                 | _converttofloat
0b65c     03 4A 05 F6 | 	mov	COUNT_, #3
0b660     A8 00 A0 FD | 	call	#pushregs_
0b664     09 1F 02 F6 | 	mov	local01, arg01
0b668                 | ' 
0b668                 | ' select case t1.result_type
0b668     08 1E 06 F1 | 	add	local01, #8
0b66c     0F 21 02 FB | 	rdlong	local02, local01
0b670     08 1E 86 F1 | 	sub	local01, #8
0b674     1C 20 0E F2 | 	cmp	local02, #28 wz
0b678     24 00 90 AD |  if_e	jmp	#LR__0990
0b67c     1D 20 0E F2 | 	cmp	local02, #29 wz
0b680     38 00 90 AD |  if_e	jmp	#LR__0991
0b684     1E 20 0E F2 | 	cmp	local02, #30 wz
0b688     3C 00 90 AD |  if_e	jmp	#LR__0992
0b68c     1F 20 0E F2 | 	cmp	local02, #31 wz
0b690     3C 00 90 AD |  if_e	jmp	#LR__0993
0b694     2B 20 0E F2 | 	cmp	local02, #43 wz
0b698     40 00 90 AD |  if_e	jmp	#LR__0994
0b69c     50 00 90 FD | 	jmp	#LR__0995
0b6a0                 | LR__0990
0b6a0     0F 13 02 FB | 	rdlong	arg01, local01
0b6a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b6a8     1F 22 C6 C9 |  if_b	decod	local03, #31
0b6ac     00 22 06 36 |  if_ae	mov	local03, #0
0b6b0     40 79 B1 FD | 	call	#__system___float_fromuns
0b6b4     11 FB 61 F5 | 	xor	result1, local03
0b6b8     38 00 90 FD | 	jmp	#LR__0996
0b6bc                 | LR__0991
0b6bc     0F 13 02 FB | 	rdlong	arg01, local01
0b6c0     30 79 B1 FD | 	call	#__system___float_fromuns
0b6c4     2C 00 90 FD | 	jmp	#LR__0996
0b6c8                 | LR__0992
0b6c8     0F FB 01 FB | 	rdlong	result1, local01
0b6cc     24 00 90 FD | 	jmp	#LR__0996
0b6d0                 | LR__0993
0b6d0     0F 13 02 FB | 	rdlong	arg01, local01
0b6d4     2C 85 B1 FD | 	call	#__system____builtin_atof
0b6d8     18 00 90 FD | 	jmp	#LR__0996
0b6dc                 | LR__0994
0b6dc     0F 13 02 FB | 	rdlong	arg01, local01
0b6e0     50 FE BF FD | 	call	#_convertstring
0b6e4     FD 12 02 F6 | 	mov	arg01, result1
0b6e8     18 85 B1 FD | 	call	#__system____builtin_atof
0b6ec     04 00 90 FD | 	jmp	#LR__0996
0b6f0                 | LR__0995
0b6f0     00 FA 05 F6 | 	mov	result1, #0
0b6f4                 | LR__0996
0b6f4     A7 F0 03 F6 | 	mov	ptra, fp
0b6f8     B2 00 A0 FD | 	call	#popregs_
0b6fc                 | _converttofloat_ret
0b6fc     2D 00 64 FD | 	ret
0b700                 | 
0b700                 | ' 
0b700                 | ' '----------------- End of converting 
0b700                 | ' 
0b700                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b700                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0b700                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b700                 | ' 
0b700                 | ' sub csave_block(address as ulong)
0b700                 | _csave_block
0b700     09 01 02 F6 | 	mov	_var01, arg01
0b704                 | ' 
0b704                 | ' for i=0 to 63 step 2
0b704     00 02 06 F6 | 	mov	_var02, #0
0b708                 | LR__1000
0b708                 | '   do: loop until lpeek(base+64*7)>32768
0b708     37 00 00 FF 
0b70c     10 E4 05 F1 | 	add	objptr, ##28176
0b710     97 0C 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0b714                 | LR__1001
0b714     F2 12 02 FB | 	rdlong	arg01, objptr
0b718     C0 13 06 F1 | 	add	arg01, #448
0b71c     09 FB 01 FB | 	rdlong	result1, arg01
0b720     40 00 00 FF 
0b724     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b728     E8 FF 9F CD |  if_b	jmp	#LR__1001
0b72c                 | LR__1002
0b72c     00 13 02 F6 | 	mov	arg01, _var01
0b730     01 05 02 F6 | 	mov	_var03, _var02
0b734     02 04 66 F0 | 	shl	_var03, #2
0b738     02 13 02 F1 | 	add	arg01, _var03
0b73c     09 07 02 FB | 	rdlong	_var04, arg01
0b740     1B 00 00 FF 
0b744     00 E4 05 F1 | 	add	objptr, ##13824
0b748     F2 06 62 FC | 	wrlong	_var04, objptr
0b74c     52 00 00 FF 
0b750     10 E4 85 F1 | 	sub	objptr, ##42000
0b754                 | '   q=lpeek(address+4*i)
0b754                 | '      for bit=0 to 31
0b754     00 08 06 F6 | 	mov	_var05, #0
0b758     97 84 48 FB | 	callpa	#(@LR__1007-@LR__1003)>>2,fcache_load_ptr_
0b75c                 | LR__1003
0b75c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0b75c     52 00 00 FF 
0b760     10 E4 05 F1 | 	add	objptr, ##42000
0b764     F2 06 02 FB | 	rdlong	_var04, objptr
0b768     52 00 00 FF 
0b76c     10 E4 85 F1 | 	sub	objptr, ##42000
0b770     04 05 C2 F9 | 	decod	_var03, _var05
0b774     02 07 CA F7 | 	test	_var04, _var03 wz
0b778     60 00 90 AD |  if_e	jmp	#LR__1004
0b77c     04 05 02 F6 | 	mov	_var03, _var05
0b780     02 04 66 F0 | 	shl	_var03, #2
0b784     4D 00 00 FF 
0b788     B4 E5 05 F1 | 	add	objptr, ##39860
0b78c     F2 04 02 F1 | 	add	_var03, objptr
0b790     02 FF 48 FC | 	wrbyte	#127, _var03
0b794     04 05 02 F6 | 	mov	_var03, _var05
0b798     02 04 66 F0 | 	shl	_var03, #2
0b79c     01 04 06 F1 | 	add	_var03, #1
0b7a0     F2 04 02 F1 | 	add	_var03, objptr
0b7a4     02 01 49 FC | 	wrbyte	#128, _var03
0b7a8     04 05 02 F6 | 	mov	_var03, _var05
0b7ac     02 04 66 F0 | 	shl	_var03, #2
0b7b0     02 04 06 F1 | 	add	_var03, #2
0b7b4     F2 04 02 F1 | 	add	_var03, objptr
0b7b8     02 FF 48 FC | 	wrbyte	#127, _var03
0b7bc     04 05 02 F6 | 	mov	_var03, _var05
0b7c0     02 04 66 F0 | 	shl	_var03, #2
0b7c4     03 04 06 F1 | 	add	_var03, #3
0b7c8     F2 04 02 F1 | 	add	_var03, objptr
0b7cc     02 01 49 FC | 	wrbyte	#128, _var03
0b7d0     4D 00 00 FF 
0b7d4     B4 E5 85 F1 | 	sub	objptr, ##39860
0b7d8     5C 00 90 FD | 	jmp	#LR__1005
0b7dc                 | LR__1004
0b7dc     04 05 02 F6 | 	mov	_var03, _var05
0b7e0     02 04 66 F0 | 	shl	_var03, #2
0b7e4     4D 00 00 FF 
0b7e8     B4 E5 05 F1 | 	add	objptr, ##39860
0b7ec     F2 04 02 F1 | 	add	_var03, objptr
0b7f0     02 01 49 FC | 	wrbyte	#128, _var03
0b7f4     04 05 02 F6 | 	mov	_var03, _var05
0b7f8     02 04 66 F0 | 	shl	_var03, #2
0b7fc     01 04 06 F1 | 	add	_var03, #1
0b800     F2 04 02 F1 | 	add	_var03, objptr
0b804     02 01 49 FC | 	wrbyte	#128, _var03
0b808     04 05 02 F6 | 	mov	_var03, _var05
0b80c     02 04 66 F0 | 	shl	_var03, #2
0b810     02 04 06 F1 | 	add	_var03, #2
0b814     F2 04 02 F1 | 	add	_var03, objptr
0b818     02 FF 48 FC | 	wrbyte	#127, _var03
0b81c     04 05 02 F6 | 	mov	_var03, _var05
0b820     02 04 66 F0 | 	shl	_var03, #2
0b824     03 04 06 F1 | 	add	_var03, #3
0b828     F2 04 02 F1 | 	add	_var03, objptr
0b82c     02 FF 48 FC | 	wrbyte	#127, _var03
0b830     4D 00 00 FF 
0b834     B4 E5 85 F1 | 	sub	objptr, ##39860
0b838                 | LR__1005
0b838     01 08 06 F1 | 	add	_var05, #1
0b83c     20 08 56 F2 | 	cmps	_var05, #32 wc
0b840     18 FF 9F CD |  if_b	jmp	#LR__1003
0b844                 | '   do: loop until lpeek(base+64*7)<32768
0b844     37 00 00 FF 
0b848     10 E4 05 F1 | 	add	objptr, ##28176
0b84c                 | LR__1006
0b84c     F2 12 02 FB | 	rdlong	arg01, objptr
0b850     C0 13 06 F1 | 	add	arg01, #448
0b854     09 FB 01 FB | 	rdlong	result1, arg01
0b858     40 00 00 FF 
0b85c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b860     E8 FF 9F 3D |  if_ae	jmp	#LR__1006
0b864                 | LR__1007
0b864     00 13 02 F6 | 	mov	arg01, _var01
0b868     04 12 06 F1 | 	add	arg01, #4
0b86c     01 05 02 F6 | 	mov	_var03, _var02
0b870     02 04 66 F0 | 	shl	_var03, #2
0b874     02 13 02 F1 | 	add	arg01, _var03
0b878     09 07 02 FB | 	rdlong	_var04, arg01
0b87c     1B 00 00 FF 
0b880     00 E4 05 F1 | 	add	objptr, ##13824
0b884     F2 06 62 FC | 	wrlong	_var04, objptr
0b888     52 00 00 FF 
0b88c     10 E4 85 F1 | 	sub	objptr, ##42000
0b890                 | '   q=lpeek(address+4+4*i)
0b890                 | '      for bit=0 to 31
0b890     00 08 06 F6 | 	mov	_var05, #0
0b894     97 94 48 FB | 	callpa	#(@LR__1011-@LR__1008)>>2,fcache_load_ptr_
0b898                 | LR__1008
0b898                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0b898     52 00 00 FF 
0b89c     10 E4 05 F1 | 	add	objptr, ##42000
0b8a0     F2 06 02 FB | 	rdlong	_var04, objptr
0b8a4     52 00 00 FF 
0b8a8     10 E4 85 F1 | 	sub	objptr, ##42000
0b8ac     04 05 C2 F9 | 	decod	_var03, _var05
0b8b0     02 07 CA F7 | 	test	_var04, _var03 wz
0b8b4     80 00 90 AD |  if_e	jmp	#LR__1009
0b8b8     04 0B 02 F6 | 	mov	_var06, _var05
0b8bc     02 0A 66 F0 | 	shl	_var06, #2
0b8c0     80 04 06 F6 | 	mov	_var03, #128
0b8c4     05 05 02 F1 | 	add	_var03, _var06
0b8c8     4D 00 00 FF 
0b8cc     B4 E5 05 F1 | 	add	objptr, ##39860
0b8d0     F2 04 02 F1 | 	add	_var03, objptr
0b8d4     02 FF 48 FC | 	wrbyte	#127, _var03
0b8d8     04 0B 02 F6 | 	mov	_var06, _var05
0b8dc     02 0A 66 F0 | 	shl	_var06, #2
0b8e0     80 04 06 F6 | 	mov	_var03, #128
0b8e4     05 05 02 F1 | 	add	_var03, _var06
0b8e8     01 04 06 F1 | 	add	_var03, #1
0b8ec     F2 04 02 F1 | 	add	_var03, objptr
0b8f0     02 01 49 FC | 	wrbyte	#128, _var03
0b8f4     04 0B 02 F6 | 	mov	_var06, _var05
0b8f8     02 0A 66 F0 | 	shl	_var06, #2
0b8fc     80 04 06 F6 | 	mov	_var03, #128
0b900     05 05 02 F1 | 	add	_var03, _var06
0b904     02 04 06 F1 | 	add	_var03, #2
0b908     F2 04 02 F1 | 	add	_var03, objptr
0b90c     02 FF 48 FC | 	wrbyte	#127, _var03
0b910     04 0B 02 F6 | 	mov	_var06, _var05
0b914     02 0A 66 F0 | 	shl	_var06, #2
0b918     80 04 06 F6 | 	mov	_var03, #128
0b91c     05 05 02 F1 | 	add	_var03, _var06
0b920     03 04 06 F1 | 	add	_var03, #3
0b924     F2 04 02 F1 | 	add	_var03, objptr
0b928     02 01 49 FC | 	wrbyte	#128, _var03
0b92c     4D 00 00 FF 
0b930     B4 E5 85 F1 | 	sub	objptr, ##39860
0b934     7C 00 90 FD | 	jmp	#LR__1010
0b938                 | LR__1009
0b938     04 0B 02 F6 | 	mov	_var06, _var05
0b93c     02 0A 66 F0 | 	shl	_var06, #2
0b940     80 04 06 F6 | 	mov	_var03, #128
0b944     05 05 02 F1 | 	add	_var03, _var06
0b948     4D 00 00 FF 
0b94c     B4 E5 05 F1 | 	add	objptr, ##39860
0b950     F2 04 02 F1 | 	add	_var03, objptr
0b954     02 01 49 FC | 	wrbyte	#128, _var03
0b958     04 0B 02 F6 | 	mov	_var06, _var05
0b95c     02 0A 66 F0 | 	shl	_var06, #2
0b960     80 04 06 F6 | 	mov	_var03, #128
0b964     05 05 02 F1 | 	add	_var03, _var06
0b968     01 04 06 F1 | 	add	_var03, #1
0b96c     F2 04 02 F1 | 	add	_var03, objptr
0b970     02 01 49 FC | 	wrbyte	#128, _var03
0b974     04 0B 02 F6 | 	mov	_var06, _var05
0b978     02 0A 66 F0 | 	shl	_var06, #2
0b97c     80 04 06 F6 | 	mov	_var03, #128
0b980     05 05 02 F1 | 	add	_var03, _var06
0b984     02 04 06 F1 | 	add	_var03, #2
0b988     F2 04 02 F1 | 	add	_var03, objptr
0b98c     02 FF 48 FC | 	wrbyte	#127, _var03
0b990     04 0B 02 F6 | 	mov	_var06, _var05
0b994     02 0A 66 F0 | 	shl	_var06, #2
0b998     80 04 06 F6 | 	mov	_var03, #128
0b99c     05 05 02 F1 | 	add	_var03, _var06
0b9a0     03 04 06 F1 | 	add	_var03, #3
0b9a4     F2 04 02 F1 | 	add	_var03, objptr
0b9a8     02 FF 48 FC | 	wrbyte	#127, _var03
0b9ac     4D 00 00 FF 
0b9b0     B4 E5 85 F1 | 	sub	objptr, ##39860
0b9b4                 | LR__1010
0b9b4     01 08 06 F1 | 	add	_var05, #1
0b9b8     20 08 56 F2 | 	cmps	_var05, #32 wc
0b9bc     D8 FE 9F CD |  if_b	jmp	#LR__1008
0b9c0                 | LR__1011
0b9c0     02 02 06 F1 | 	add	_var02, #2
0b9c4     40 02 56 F2 | 	cmps	_var02, #64 wc
0b9c8     3C FD 9F CD |  if_b	jmp	#LR__1000
0b9cc                 | ' do: loop until lpeek(base+64*7)>32768
0b9cc     37 00 00 FF 
0b9d0     10 E4 05 F1 | 	add	objptr, ##28176
0b9d4     97 84 48 FB | 	callpa	#(@LR__1020-@LR__1012)>>2,fcache_load_ptr_
0b9d8                 | LR__1012
0b9d8     F2 12 02 FB | 	rdlong	arg01, objptr
0b9dc     C0 13 06 F1 | 	add	arg01, #448
0b9e0     09 FB 01 FB | 	rdlong	result1, arg01
0b9e4     40 00 00 FF 
0b9e8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b9ec     E8 FF 9F CD |  if_b	jmp	#LR__1012
0b9f0     37 00 00 FF 
0b9f4     10 E4 85 F1 | 	sub	objptr, ##28176
0b9f8                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b9f8     00 02 06 F6 | 	mov	_var02, #0
0b9fc                 | LR__1013
0b9fc     01 07 52 F6 | 	abs	_var04, _var02 wc
0ba00     07 06 06 F5 | 	and	_var04, #7
0ba04     03 07 82 F6 | 	negc	_var04, _var04
0ba08     04 06 56 F2 | 	cmps	_var04, #4 wc
0ba0c     20 00 90 3D |  if_ae	jmp	#LR__1014
0ba10     01 0B 02 F6 | 	mov	_var06, _var02
0ba14     4D 00 00 FF 
0ba18     B4 E5 05 F1 | 	add	objptr, ##39860
0ba1c     F2 0A 02 F1 | 	add	_var06, objptr
0ba20     05 FF 48 FC | 	wrbyte	#127, _var06
0ba24     4D 00 00 FF 
0ba28     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba2c     1C 00 90 FD | 	jmp	#LR__1015
0ba30                 | LR__1014
0ba30     01 0B 02 F6 | 	mov	_var06, _var02
0ba34     4D 00 00 FF 
0ba38     B4 E5 05 F1 | 	add	objptr, ##39860
0ba3c     F2 0A 02 F1 | 	add	_var06, objptr
0ba40     05 01 49 FC | 	wrbyte	#128, _var06
0ba44     4D 00 00 FF 
0ba48     B4 E5 85 F1 | 	sub	objptr, ##39860
0ba4c                 | LR__1015
0ba4c     01 02 06 F1 | 	add	_var02, #1
0ba50     80 02 56 F2 | 	cmps	_var02, #128 wc
0ba54     A4 FF 9F CD |  if_b	jmp	#LR__1013
0ba58                 | ' 
0ba58                 | ' do: loop until lpeek(base+64*7)<32768
0ba58     37 00 00 FF 
0ba5c     10 E4 05 F1 | 	add	objptr, ##28176
0ba60                 | LR__1016
0ba60     F2 12 02 FB | 	rdlong	arg01, objptr
0ba64     C0 13 06 F1 | 	add	arg01, #448
0ba68     09 FB 01 FB | 	rdlong	result1, arg01
0ba6c     40 00 00 FF 
0ba70     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ba74     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0ba78     37 00 00 FF 
0ba7c     10 E4 85 F1 | 	sub	objptr, ##28176
0ba80                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ba80     80 02 06 F6 | 	mov	_var02, #128
0ba84                 | LR__1017
0ba84     01 07 52 F6 | 	abs	_var04, _var02 wc
0ba88     07 06 06 F5 | 	and	_var04, #7
0ba8c     03 07 82 F6 | 	negc	_var04, _var04
0ba90     04 06 56 F2 | 	cmps	_var04, #4 wc
0ba94     20 00 90 3D |  if_ae	jmp	#LR__1018
0ba98     01 0B 02 F6 | 	mov	_var06, _var02
0ba9c     4D 00 00 FF 
0baa0     B4 E5 05 F1 | 	add	objptr, ##39860
0baa4     F2 0A 02 F1 | 	add	_var06, objptr
0baa8     05 FF 48 FC | 	wrbyte	#127, _var06
0baac     4D 00 00 FF 
0bab0     B4 E5 85 F1 | 	sub	objptr, ##39860
0bab4     1C 00 90 FD | 	jmp	#LR__1019
0bab8                 | LR__1018
0bab8     01 0B 02 F6 | 	mov	_var06, _var02
0babc     4D 00 00 FF 
0bac0     B4 E5 05 F1 | 	add	objptr, ##39860
0bac4     F2 0A 02 F1 | 	add	_var06, objptr
0bac8     05 01 49 FC | 	wrbyte	#128, _var06
0bacc     4D 00 00 FF 
0bad0     B4 E5 85 F1 | 	sub	objptr, ##39860
0bad4                 | LR__1019
0bad4     01 02 06 F1 | 	add	_var02, #1
0bad8     00 03 16 F2 | 	cmp	_var02, #256 wc
0badc     A4 FF 9F CD |  if_b	jmp	#LR__1017
0bae0                 | LR__1020
0bae0                 | _csave_block_ret
0bae0     2D 00 64 FD | 	ret
0bae4                 | 
0bae4                 | ' 
0bae4                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0bae4                 | _csave_addtoblock
0bae4     04 4A 05 F6 | 	mov	COUNT_, #4
0bae8     A8 00 A0 FD | 	call	#pushregs_
0baec     09 1F 02 F6 | 	mov	local01, arg01
0baf0                 | ' 
0baf0                 | ' if force=0 then
0baf0     07 14 4E F7 | 	zerox	arg02, #7 wz
0baf4     78 00 90 5D |  if_ne	jmp	#LR__1030
0baf8     50 00 00 FF 
0bafc     B4 E4 05 F1 | 	add	objptr, ##41140
0bb00     F2 14 02 FB | 	rdlong	arg02, objptr
0bb04     02 00 00 FF 
0bb08     00 E4 85 F1 | 	sub	objptr, ##1024
0bb0c     F2 14 02 F1 | 	add	arg02, objptr
0bb10     0A 1F 42 FC | 	wrbyte	local01, arg02
0bb14     02 00 00 FF 
0bb18     00 E4 05 F1 | 	add	objptr, ##1024
0bb1c     F2 1E 02 FB | 	rdlong	local01, objptr
0bb20     01 1E 06 F1 | 	add	local01, #1
0bb24     F2 1E 62 FC | 	wrlong	local01, objptr
0bb28                 | '   block(blockptr)=d
0bb28                 | '   blockptr+=1
0bb28                 | '   if blockptr>=255 then
0bb28     50 00 00 FF 
0bb2c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb30     FF 1E 16 F2 | 	cmp	local01, #255 wc
0bb34     E4 00 90 CD |  if_b	jmp	#LR__1034
0bb38     4E 00 00 FF 
0bb3c     B4 E4 05 F1 | 	add	objptr, ##40116
0bb40     F2 12 02 F6 | 	mov	arg01, objptr
0bb44     4E 00 00 FF 
0bb48     B4 E4 85 F1 | 	sub	objptr, ##40116
0bb4c     B0 FB BF FD | 	call	#_csave_block
0bb50     50 00 00 FF 
0bb54     B4 E4 05 F1 | 	add	objptr, ##41140
0bb58     F2 00 68 FC | 	wrlong	#0, objptr
0bb5c     50 00 00 FF 
0bb60     B4 E4 85 F1 | 	sub	objptr, ##41140
0bb64     2C 13 06 F6 | 	mov	arg01, #300
0bb68     CC 4F B1 FD | 	call	#__system___waitms
0bb6c     AC 00 90 FD | 	jmp	#LR__1034
0bb70                 | LR__1030
0bb70     50 00 00 FF 
0bb74     B4 E4 05 F1 | 	add	objptr, ##41140
0bb78     F2 20 02 FB | 	rdlong	local02, objptr
0bb7c     02 00 00 FF 
0bb80     00 E4 85 F1 | 	sub	objptr, ##1024
0bb84     F2 20 02 F1 | 	add	local02, objptr
0bb88     10 1F 42 FC | 	wrbyte	local01, local02
0bb8c                 | '   block(blockptr)=d
0bb8c                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0bb8c     02 00 00 FF 
0bb90     00 E4 05 F1 | 	add	objptr, ##1024
0bb94     F2 22 02 FB | 	rdlong	local03, objptr
0bb98     50 00 00 FF 
0bb9c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bba0     FF 22 16 F2 | 	cmp	local03, #255 wc
0bba4     40 00 90 3D |  if_ae	jmp	#LR__1033
0bba8     50 00 00 FF 
0bbac     B4 E4 05 F1 | 	add	objptr, ##41140
0bbb0     F2 24 02 FB | 	rdlong	local04, objptr
0bbb4     50 00 00 FF 
0bbb8     B4 E4 85 F1 | 	sub	objptr, ##41140
0bbbc                 | LR__1031
0bbbc     00 25 56 F2 | 	cmps	local04, #256 wc
0bbc0     24 00 90 3D |  if_ae	jmp	#LR__1032
0bbc4     12 21 02 F6 | 	mov	local02, local04
0bbc8     4E 00 00 FF 
0bbcc     B4 E4 05 F1 | 	add	objptr, ##40116
0bbd0     F2 20 02 F1 | 	add	local02, objptr
0bbd4     10 01 48 FC | 	wrbyte	#0, local02
0bbd8     01 24 06 F1 | 	add	local04, #1
0bbdc     4E 00 00 FF 
0bbe0     B4 E4 85 F1 | 	sub	objptr, ##40116
0bbe4     D4 FF 9F FD | 	jmp	#LR__1031
0bbe8                 | LR__1032
0bbe8                 | LR__1033
0bbe8     4E 00 00 FF 
0bbec     B4 E4 05 F1 | 	add	objptr, ##40116
0bbf0     F2 12 02 F6 | 	mov	arg01, objptr
0bbf4     4E 00 00 FF 
0bbf8     B4 E4 85 F1 | 	sub	objptr, ##40116
0bbfc     00 FB BF FD | 	call	#_csave_block
0bc00     50 00 00 FF 
0bc04     B4 E4 05 F1 | 	add	objptr, ##41140
0bc08     F2 00 68 FC | 	wrlong	#0, objptr
0bc0c     50 00 00 FF 
0bc10     B4 E4 85 F1 | 	sub	objptr, ##41140
0bc14     2C 13 06 F6 | 	mov	arg01, #300
0bc18     1C 4F B1 FD | 	call	#__system___waitms
0bc1c                 | LR__1034
0bc1c     A7 F0 03 F6 | 	mov	ptra, fp
0bc20     B2 00 A0 FD | 	call	#popregs_
0bc24                 | _csave_addtoblock_ret
0bc24     2D 00 64 FD | 	ret
0bc28                 | 
0bc28                 | ' 
0bc28                 | ' '----------------------- csave
0bc28                 | ' 
0bc28                 | ' sub test_csave
0bc28                 | _test_csave
0bc28     04 4A 05 F6 | 	mov	COUNT_, #4
0bc2c     A8 00 A0 FD | 	call	#pushregs_
0bc30     C0 F0 07 F1 | 	add	ptra, #192
0bc34                 | ' 'dim fileheader,savestart, saveptr as ulong
0bc34                 | ' 
0bc34                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0bc34     4A 00 00 FF 
0bc38     88 E4 05 F1 | 	add	objptr, ##38024
0bc3c     F2 12 02 FB | 	rdlong	arg01, objptr
0bc40     4A 00 00 FF 
0bc44     88 E4 85 F1 | 	sub	objptr, ##38024
0bc48     FC 18 B1 FD | 	call	#_pslpeek
0bc4c     FF FF 7F FF 
0bc50     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0bc54     0C 00 90 5D |  if_ne	jmp	#LR__1040
0bc58     1B 12 06 F6 | 	mov	arg01, #27
0bc5c     54 16 B1 FD | 	call	#_printerror
0bc60     1C 03 90 FD | 	jmp	#LR__1054
0bc64                 | LR__1040
0bc64     54 F7 BF FD | 	call	#_pop
0bc68     90 4E 05 F1 | 	add	fp, #144
0bc6c     A7 FA 61 FC | 	wrlong	result1, fp
0bc70     04 4E 05 F1 | 	add	fp, #4
0bc74     A7 FC 61 FC | 	wrlong	result2, fp
0bc78     04 4E 05 F1 | 	add	fp, #4
0bc7c     A7 FE 61 FC | 	wrlong	result3, fp
0bc80                 | ' t1=pop()
0bc80                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0bc80     98 4E 85 F1 | 	sub	fp, #152
0bc84     1F FE 0D F2 | 	cmp	result3, #31 wz
0bc88     24 00 90 AD |  if_e	jmp	#LR__1041
0bc8c     51 00 00 FF 
0bc90     D8 E5 05 F1 | 	add	objptr, ##41944
0bc94     F2 1C 02 FB | 	rdlong	arg06, objptr
0bc98     51 00 00 FF 
0bc9c     D8 E5 85 F1 | 	sub	objptr, ##41944
0bca0     8C 4E 05 F1 | 	add	fp, #140
0bca4     A7 1C 62 FC | 	wrlong	arg06, fp
0bca8     8C 4E 85 F1 | 	sub	fp, #140
0bcac     14 00 90 FD | 	jmp	#LR__1042
0bcb0                 | LR__1041
0bcb0     90 4E 05 F1 | 	add	fp, #144
0bcb4     A7 1C 02 FB | 	rdlong	arg06, fp
0bcb8     04 4E 85 F1 | 	sub	fp, #4
0bcbc     A7 1C 62 FC | 	wrlong	arg06, fp
0bcc0     8C 4E 85 F1 | 	sub	fp, #140
0bcc4                 | LR__1042
0bcc4                 | ' 
0bcc4                 | ' ' prepare 1 kHz header wave
0bcc4                 | ' 
0bcc4                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bcc4     A7 00 68 FC | 	wrlong	#0, fp
0bcc8     97 34 48 FB | 	callpa	#(@LR__1046-@LR__1043)>>2,fcache_load_ptr_
0bccc                 | LR__1043
0bccc     A7 1C 02 FB | 	rdlong	arg06, fp
0bcd0     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0bcd4     07 1A 06 F5 | 	and	arg05, #7
0bcd8     0D 1B 82 F6 | 	negc	arg05, arg05
0bcdc     04 1A 56 F2 | 	cmps	arg05, #4 wc
0bce0     20 00 90 3D |  if_ae	jmp	#LR__1044
0bce4     A7 1A 02 FB | 	rdlong	arg05, fp
0bce8     4D 00 00 FF 
0bcec     B4 E5 05 F1 | 	add	objptr, ##39860
0bcf0     F2 1A 02 F1 | 	add	arg05, objptr
0bcf4     0D FF 48 FC | 	wrbyte	#127, arg05
0bcf8     4D 00 00 FF 
0bcfc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd00     1C 00 90 FD | 	jmp	#LR__1045
0bd04                 | LR__1044
0bd04     A7 1A 02 FB | 	rdlong	arg05, fp
0bd08     4D 00 00 FF 
0bd0c     B4 E5 05 F1 | 	add	objptr, ##39860
0bd10     F2 1A 02 F1 | 	add	arg05, objptr
0bd14     0D 01 49 FC | 	wrbyte	#128, arg05
0bd18     4D 00 00 FF 
0bd1c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd20                 | LR__1045
0bd20     A7 1A 02 FB | 	rdlong	arg05, fp
0bd24     01 1A 06 F1 | 	add	arg05, #1
0bd28     A7 1A 62 FC | 	wrlong	arg05, fp
0bd2c     00 1B 56 F2 | 	cmps	arg05, #256 wc
0bd30     98 FF 9F CD |  if_b	jmp	#LR__1043
0bd34                 | LR__1046
0bd34     4D 00 00 FF 
0bd38     B4 E5 05 F1 | 	add	objptr, ##39860
0bd3c     F2 14 02 F6 | 	mov	arg02, objptr
0bd40     07 12 06 F6 | 	mov	arg01, #7
0bd44     0F 00 00 FF 
0bd48     40 17 06 F6 | 	mov	arg03, ##8000
0bd4c     0E 18 C6 F9 | 	decod	arg04, #14
0bd50     00 1B 06 F6 | 	mov	arg05, #256
0bd54     00 1C 06 F6 | 	mov	arg06, #0
0bd58     42 00 00 FF 
0bd5c     E8 E4 85 F1 | 	sub	objptr, ##34024
0bd60     3C 47 B1 FD | 	call	#_audio096_spin2_play8
0bd64     0B 00 00 FF 
0bd68     CC E4 85 F1 | 	sub	objptr, ##5836
0bd6c     05 00 00 FF 
0bd70     B8 13 06 F6 | 	mov	arg01, ##3000
0bd74     C0 4D B1 FD | 	call	#__system___waitms
0bd78     50 00 00 FF 
0bd7c     B4 E4 05 F1 | 	add	objptr, ##41140
0bd80     F2 00 68 FC | 	wrlong	#0, objptr
0bd84     50 00 00 FF 
0bd88     B4 E4 85 F1 | 	sub	objptr, ##41140
0bd8c     72 12 06 F6 | 	mov	arg01, #114
0bd90     00 14 06 F6 | 	mov	arg02, #0
0bd94     4C FD BF FD | 	call	#_csave_addtoblock
0bd98     62 12 06 F6 | 	mov	arg01, #98
0bd9c     00 14 06 F6 | 	mov	arg02, #0
0bda0     40 FD BF FD | 	call	#_csave_addtoblock
0bda4     61 12 06 F6 | 	mov	arg01, #97
0bda8     00 14 06 F6 | 	mov	arg02, #0
0bdac     34 FD BF FD | 	call	#_csave_addtoblock
0bdb0     0D 12 06 F6 | 	mov	arg01, #13
0bdb4     00 14 06 F6 | 	mov	arg02, #0
0bdb8     28 FD BF FD | 	call	#_csave_addtoblock
0bdbc                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0bdbc                 | ' waitms 3000 
0bdbc                 | ' 
0bdbc                 | ' blockptr=0
0bdbc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0bdbc                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0bdbc     A7 02 68 FC | 	wrlong	#1, fp
0bdc0     8C 4E 05 F1 | 	add	fp, #140
0bdc4     A7 12 02 FB | 	rdlong	arg01, fp
0bdc8     8C 4E 85 F1 | 	sub	fp, #140
0bdcc     09 1F 02 F6 | 	mov	local01, arg01
0bdd0     97 06 48 FB | 	callpa	#(@LR__1048-@LR__1047)>>2,fcache_load_ptr_
0bdd4                 | LR__1047
0bdd4     0F FB C9 FA | 	rdbyte	result1, local01 wz
0bdd8     01 1E 06 51 |  if_ne	add	local01, #1
0bddc     F4 FF 9F 5D |  if_ne	jmp	#LR__1047
0bde0                 | LR__1048
0bde0     09 1F 82 F1 | 	sub	local01, arg01
0bde4     0F 21 02 F6 | 	mov	local02, local01
0bde8     01 20 06 F1 | 	add	local02, #1
0bdec                 | LR__1049
0bdec     A7 1A 02 FB | 	rdlong	arg05, fp
0bdf0     10 1B 52 F2 | 	cmps	arg05, local02 wc
0bdf4     34 00 90 3D |  if_ae	jmp	#LR__1050
0bdf8     8C 4E 05 F1 | 	add	fp, #140
0bdfc     A7 12 02 FB | 	rdlong	arg01, fp
0be00     8C 4E 85 F1 | 	sub	fp, #140
0be04     A7 14 02 FB | 	rdlong	arg02, fp
0be08     01 16 06 F6 | 	mov	arg03, #1
0be0c     C8 6B B1 FD | 	call	#__system__Mid_S
0be10     FD 12 C2 FA | 	rdbyte	arg01, result1
0be14     00 14 06 F6 | 	mov	arg02, #0
0be18     C8 FC BF FD | 	call	#_csave_addtoblock
0be1c     A7 1A 02 FB | 	rdlong	arg05, fp
0be20     01 1A 06 F1 | 	add	arg05, #1
0be24     A7 1A 62 FC | 	wrlong	arg05, fp
0be28     C0 FF 9F FD | 	jmp	#LR__1049
0be2c                 | LR__1050
0be2c     00 12 06 F6 | 	mov	arg01, #0
0be30     00 14 06 F6 | 	mov	arg02, #0
0be34     AC FC BF FD | 	call	#_csave_addtoblock
0be38     72 12 06 F6 | 	mov	arg01, #114
0be3c     00 14 06 F6 | 	mov	arg02, #0
0be40     A0 FC BF FD | 	call	#_csave_addtoblock
0be44     62 12 06 F6 | 	mov	arg01, #98
0be48     00 14 06 F6 | 	mov	arg02, #0
0be4c     94 FC BF FD | 	call	#_csave_addtoblock
0be50     73 12 06 F6 | 	mov	arg01, #115
0be54     00 14 06 F6 | 	mov	arg02, #0
0be58     88 FC BF FD | 	call	#_csave_addtoblock
0be5c     0D 12 06 F6 | 	mov	arg01, #13
0be60     00 14 06 F6 | 	mov	arg02, #0
0be64     7C FC BF FD | 	call	#_csave_addtoblock
0be68     4A 00 00 FF 
0be6c     88 E4 05 F1 | 	add	objptr, ##38024
0be70     F2 22 02 FB | 	rdlong	local03, objptr
0be74     4A 00 00 FF 
0be78     88 E4 85 F1 | 	sub	objptr, ##38024
0be7c     9C 4E 05 F1 | 	add	fp, #156
0be80     A7 22 62 FC | 	wrlong	local03, fp
0be84     9C 4E 85 F1 | 	sub	fp, #156
0be88                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0be88                 | ' 
0be88                 | ' saveptr=programstart
0be88                 | ' do
0be88                 | LR__1051
0be88     A0 4E 05 F1 | 	add	fp, #160
0be8c     A7 12 02 F6 | 	mov	arg01, fp
0be90     04 4E 85 F1 | 	sub	fp, #4
0be94     A7 14 02 FB | 	rdlong	arg02, fp
0be98     9C 4E 85 F1 | 	sub	fp, #156
0be9c     18 16 06 F6 | 	mov	arg03, #24
0bea0     0B 00 00 FF 
0bea4     CC E4 05 F1 | 	add	objptr, ##5836
0bea8     58 3D B1 FD | 	call	#_psram_spin2_read1
0beac     0C 4E 05 F1 | 	add	fp, #12
0beb0     A7 12 02 F6 | 	mov	arg01, fp
0beb4     9C 4E 05 F1 | 	add	fp, #156
0beb8     A7 14 02 FB | 	rdlong	arg02, fp
0bebc     04 4E 05 F1 | 	add	fp, #4
0bec0     A7 16 02 FB | 	rdlong	arg03, fp
0bec4     AC 4E 85 F1 | 	sub	fp, #172
0bec8     38 3D B1 FD | 	call	#_psram_spin2_read1
0becc     0B 00 00 FF 
0bed0     CC E4 85 F1 | 	sub	objptr, ##5836
0bed4     AC 4E 05 F1 | 	add	fp, #172
0bed8     A7 12 02 FB | 	rdlong	arg01, fp
0bedc     AC 4E 85 F1 | 	sub	fp, #172
0bee0     00 14 06 F6 | 	mov	arg02, #0
0bee4     FC FB BF FD | 	call	#_csave_addtoblock
0bee8                 | ' 
0bee8                 | '   psram.read1(varptr(header(0)),saveptr,24)
0bee8                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0bee8                 | '   csave_addtoblock(header(3),0) ' that's always <255
0bee8                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0bee8     A7 00 68 FC | 	wrlong	#0, fp
0beec     AC 4E 05 F1 | 	add	fp, #172
0bef0     A7 24 02 FB | 	rdlong	local04, fp
0bef4     AC 4E 85 F1 | 	sub	fp, #172
0bef8                 | LR__1052
0bef8     A7 22 02 FB | 	rdlong	local03, fp
0befc     12 23 52 F2 | 	cmps	local03, local04 wc
0bf00     2C 00 90 3D |  if_ae	jmp	#LR__1053
0bf04     A7 22 02 FB | 	rdlong	local03, fp
0bf08     0C 4E 05 F1 | 	add	fp, #12
0bf0c     A7 22 02 F1 | 	add	local03, fp
0bf10     11 13 C2 FA | 	rdbyte	arg01, local03
0bf14     00 14 06 F6 | 	mov	arg02, #0
0bf18     0C 4E 85 F1 | 	sub	fp, #12
0bf1c     C4 FB BF FD | 	call	#_csave_addtoblock
0bf20     A7 22 02 FB | 	rdlong	local03, fp
0bf24     01 22 06 F1 | 	add	local03, #1
0bf28     A7 22 62 FC | 	wrlong	local03, fp
0bf2c     C8 FF 9F FD | 	jmp	#LR__1052
0bf30                 | LR__1053
0bf30     B4 4E 05 F1 | 	add	fp, #180
0bf34     A7 22 02 FB | 	rdlong	local03, fp
0bf38     18 4E 85 F1 | 	sub	fp, #24
0bf3c     A7 22 62 FC | 	wrlong	local03, fp
0bf40     18 4E 05 F1 | 	add	fp, #24
0bf44     A7 22 02 FB | 	rdlong	local03, fp
0bf48     B4 4E 85 F1 | 	sub	fp, #180
0bf4c     FF FF 3F FF 
0bf50     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0bf54     30 FF 9F 5D |  if_ne	jmp	#LR__1051
0bf58     00 12 06 F6 | 	mov	arg01, #0
0bf5c     01 14 06 F6 | 	mov	arg02, #1
0bf60     80 FB BF FD | 	call	#_csave_addtoblock
0bf64     37 00 00 FF 
0bf68     10 E4 05 F1 | 	add	objptr, ##28176
0bf6c     F2 12 02 FB | 	rdlong	arg01, objptr
0bf70     37 00 00 FF 
0bf74     10 E4 85 F1 | 	sub	objptr, ##28176
0bf78     D4 13 06 F1 | 	add	arg01, #468
0bf7c     09 01 58 FC | 	wrword	#0, arg01
0bf80                 | LR__1054
0bf80     A7 F0 03 F6 | 	mov	ptra, fp
0bf84     B2 00 A0 FD | 	call	#popregs_
0bf88                 | _test_csave_ret
0bf88     2D 00 64 FD | 	ret
0bf8c                 | 
0bf8c                 | ' 
0bf8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf8c                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0bf8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf8c                 | ' 
0bf8c                 | ' 
0bf8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf8c                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0bf8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bf8c                 | ' 
0bf8c                 | ' '-------------------- abs
0bf8c                 | ' 
0bf8c                 | ' sub do_abs
0bf8c                 | _do_abs
0bf8c     01 4A 05 F6 | 	mov	COUNT_, #1
0bf90     A8 00 A0 FD | 	call	#pushregs_
0bf94     0C F0 07 F1 | 	add	ptra, #12
0bf98     20 F4 BF FD | 	call	#_pop
0bf9c     FF 1E 02 F6 | 	mov	local01, result3
0bfa0     A7 FA 61 FC | 	wrlong	result1, fp
0bfa4     04 4E 05 F1 | 	add	fp, #4
0bfa8     A7 FC 61 FC | 	wrlong	result2, fp
0bfac     04 4E 05 F1 | 	add	fp, #4
0bfb0     A7 1E 62 FC | 	wrlong	local01, fp
0bfb4                 | ' 
0bfb4                 | ' t1=pop()
0bfb4                 | ' if t1.result_type=result_int then 
0bfb4     08 4E 85 F1 | 	sub	fp, #8
0bfb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bfbc     A7 12 02 AB |  if_e	rdlong	arg01, fp
0bfc0     09 1F 42 A6 |  if_e	abs	local01, arg01
0bfc4     A7 1E 62 AC |  if_e	wrlong	local01, fp
0bfc8     2C 00 90 AD |  if_e	jmp	#LR__1060
0bfcc     08 4E 05 F1 | 	add	fp, #8
0bfd0     A7 1E 02 FB | 	rdlong	local01, fp
0bfd4     08 4E 85 F1 | 	sub	fp, #8
0bfd8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bfdc     A7 FA 01 AB |  if_e	rdlong	result1, fp
0bfe0     1F FA 05 A4 |  if_e	bitl	result1, #31
0bfe4     A7 FA 61 AC |  if_e	wrlong	result1, fp
0bfe8     08 4E 05 51 |  if_ne	add	fp, #8
0bfec     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bff0     08 4E 85 51 |  if_ne	sub	fp, #8
0bff4     A7 50 68 5C |  if_ne	wrlong	#40, fp
0bff8                 | LR__1060
0bff8     A7 12 02 F6 | 	mov	arg01, fp
0bffc     54 F4 BF FD | 	call	#_push
0c000     A7 F0 03 F6 | 	mov	ptra, fp
0c004     B2 00 A0 FD | 	call	#popregs_
0c008                 | _do_abs_ret
0c008     2D 00 64 FD | 	ret
0c00c                 | 
0c00c                 | ' 
0c00c                 | ' '-------------------- acos
0c00c                 | ' 
0c00c                 | ' sub do_acos
0c00c                 | _do_acos
0c00c     01 4A 05 F6 | 	mov	COUNT_, #1
0c010     A8 00 A0 FD | 	call	#pushregs_
0c014     10 F0 07 F1 | 	add	ptra, #16
0c018     4A 00 00 FF 
0c01c     80 E4 05 F1 | 	add	objptr, ##38016
0c020     F2 1E 02 FB | 	rdlong	local01, objptr
0c024     0F 17 02 F6 | 	mov	arg03, local01
0c028     01 16 66 F0 | 	shl	arg03, #1
0c02c     0F 17 02 F1 | 	add	arg03, local01
0c030     02 16 66 F0 | 	shl	arg03, #2
0c034     03 00 00 FF 
0c038     04 E4 85 F1 | 	sub	objptr, ##1540
0c03c     F2 16 02 F1 | 	add	arg03, objptr
0c040     0B 17 02 FB | 	rdlong	arg03, arg03
0c044     0C 4E 05 F1 | 	add	fp, #12
0c048     A7 16 62 FC | 	wrlong	arg03, fp
0c04c                 | ' 
0c04c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c04c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c04c     0C 4E 85 F1 | 	sub	fp, #12
0c050     02 16 16 F2 | 	cmp	arg03, #2 wc
0c054     47 00 00 FF 
0c058     7C E4 85 F1 | 	sub	objptr, ##36476
0c05c     0C 4E 05 C1 |  if_b	add	fp, #12
0c060     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c064     0C 4E 85 C1 |  if_b	sub	fp, #12
0c068     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1070
0c06c     00 12 06 F6 | 	mov	arg01, #0
0c070     34 A2 B1 FD | 	call	#__system___getiolock_0542
0c074     FD 12 02 F6 | 	mov	arg01, result1
0c078     C8 47 B1 FD | 	call	#__system___lockmem
0c07c     83 01 00 FF 
0c080     4A 15 06 F6 | 	mov	arg02, ##@LR__5406
0c084     00 12 06 F6 | 	mov	arg01, #0
0c088     00 16 06 F6 | 	mov	arg03, #0
0c08c     A8 54 B1 FD | 	call	#__system___basic_print_string
0c090     00 12 06 F6 | 	mov	arg01, #0
0c094     10 A2 B1 FD | 	call	#__system___getiolock_0542
0c098     FD 00 68 FC | 	wrlong	#0, result1
0c09c     27 12 06 F6 | 	mov	arg01, #39
0c0a0     10 12 B1 FD | 	call	#_printerror
0c0a4     64 00 90 FD | 	jmp	#LR__1071
0c0a8                 | LR__1070
0c0a8     10 F3 BF FD | 	call	#_pop
0c0ac     FF 1E 02 F6 | 	mov	local01, result3
0c0b0     A7 FA 61 FC | 	wrlong	result1, fp
0c0b4     04 4E 05 F1 | 	add	fp, #4
0c0b8     A7 FC 61 FC | 	wrlong	result2, fp
0c0bc     04 4E 05 F1 | 	add	fp, #4
0c0c0     A7 1E 62 FC | 	wrlong	local01, fp
0c0c4     08 4E 85 F1 | 	sub	fp, #8
0c0c8     A7 12 02 F6 | 	mov	arg01, fp
0c0cc     8C F5 BF FD | 	call	#_converttofloat
0c0d0     FD 12 02 F6 | 	mov	arg01, result1
0c0d4     60 7E B1 FD | 	call	#__system____builtin_acosf
0c0d8     FD 12 02 F6 | 	mov	arg01, result1
0c0dc     51 00 00 FF 
0c0e0     C0 E5 05 F1 | 	add	objptr, ##41920
0c0e4     F2 14 02 FB | 	rdlong	arg02, objptr
0c0e8     51 00 00 FF 
0c0ec     C0 E5 85 F1 | 	sub	objptr, ##41920
0c0f0     04 73 B1 FD | 	call	#__system___float_mul
0c0f4     A7 FA 61 FC | 	wrlong	result1, fp
0c0f8     08 4E 05 F1 | 	add	fp, #8
0c0fc     A7 3C 68 FC | 	wrlong	#30, fp
0c100     08 4E 85 F1 | 	sub	fp, #8
0c104     A7 12 02 F6 | 	mov	arg01, fp
0c108     48 F3 BF FD | 	call	#_push
0c10c                 | LR__1071
0c10c     A7 F0 03 F6 | 	mov	ptra, fp
0c110     B2 00 A0 FD | 	call	#popregs_
0c114                 | _do_acos_ret
0c114     2D 00 64 FD | 	ret
0c118                 | 
0c118                 | ' 
0c118                 | ' '-------------------- asc
0c118                 | ' 
0c118                 | ' sub do_asc
0c118                 | _do_asc
0c118     01 4A 05 F6 | 	mov	COUNT_, #1
0c11c     A8 00 A0 FD | 	call	#pushregs_
0c120     14 F0 07 F1 | 	add	ptra, #20
0c124     4A 00 00 FF 
0c128     80 E4 05 F1 | 	add	objptr, ##38016
0c12c     F2 1E 02 FB | 	rdlong	local01, objptr
0c130     0F 17 02 F6 | 	mov	arg03, local01
0c134     01 16 66 F0 | 	shl	arg03, #1
0c138     0F 17 02 F1 | 	add	arg03, local01
0c13c     02 16 66 F0 | 	shl	arg03, #2
0c140     03 00 00 FF 
0c144     04 E4 85 F1 | 	sub	objptr, ##1540
0c148     F2 16 02 F1 | 	add	arg03, objptr
0c14c     0B 17 02 FB | 	rdlong	arg03, arg03
0c150     0C 4E 05 F1 | 	add	fp, #12
0c154     A7 16 62 FC | 	wrlong	arg03, fp
0c158                 | ' 
0c158                 | ' numpar=compiledline(lineptr_e).result.uresult
0c158                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c158     0C 4E 85 F1 | 	sub	fp, #12
0c15c     02 16 16 F2 | 	cmp	arg03, #2 wc
0c160     47 00 00 FF 
0c164     7C E4 85 F1 | 	sub	objptr, ##36476
0c168     0C 4E 05 C1 |  if_b	add	fp, #12
0c16c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c170     0C 4E 85 C1 |  if_b	sub	fp, #12
0c174     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c178     00 12 06 F6 | 	mov	arg01, #0
0c17c     28 A1 B1 FD | 	call	#__system___getiolock_0542
0c180     FD 12 02 F6 | 	mov	arg01, result1
0c184     BC 46 B1 FD | 	call	#__system___lockmem
0c188     83 01 00 FF 
0c18c     51 15 06 F6 | 	mov	arg02, ##@LR__5407
0c190     00 12 06 F6 | 	mov	arg01, #0
0c194     00 16 06 F6 | 	mov	arg03, #0
0c198     9C 53 B1 FD | 	call	#__system___basic_print_string
0c19c     00 12 06 F6 | 	mov	arg01, #0
0c1a0     04 A1 B1 FD | 	call	#__system___getiolock_0542
0c1a4     FD 00 68 FC | 	wrlong	#0, result1
0c1a8     27 12 06 F6 | 	mov	arg01, #39
0c1ac     04 11 B1 FD | 	call	#_printerror
0c1b0     B0 00 90 FD | 	jmp	#LR__1083
0c1b4                 | LR__1080
0c1b4     04 F2 BF FD | 	call	#_pop
0c1b8     FF 16 02 F6 | 	mov	arg03, result3
0c1bc     A7 FA 61 FC | 	wrlong	result1, fp
0c1c0     04 4E 05 F1 | 	add	fp, #4
0c1c4     A7 FC 61 FC | 	wrlong	result2, fp
0c1c8     04 4E 05 F1 | 	add	fp, #4
0c1cc     A7 16 62 FC | 	wrlong	arg03, fp
0c1d0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c1d0     08 4E 85 F1 | 	sub	fp, #8
0c1d4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c1d8     18 00 90 5D |  if_ne	jmp	#LR__1081
0c1dc     A7 12 02 FB | 	rdlong	arg01, fp
0c1e0     50 F3 BF FD | 	call	#_convertstring
0c1e4     A7 FA 61 FC | 	wrlong	result1, fp
0c1e8     08 4E 05 F1 | 	add	fp, #8
0c1ec     A7 3E 68 FC | 	wrlong	#31, fp
0c1f0     08 4E 85 F1 | 	sub	fp, #8
0c1f4                 | LR__1081
0c1f4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c1f4     08 4E 05 F1 | 	add	fp, #8
0c1f8     A7 16 02 FB | 	rdlong	arg03, fp
0c1fc     08 4E 85 F1 | 	sub	fp, #8
0c200     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c204     3C 00 90 AD |  if_e	jmp	#LR__1082
0c208     00 12 06 F6 | 	mov	arg01, #0
0c20c     98 A0 B1 FD | 	call	#__system___getiolock_0542
0c210     FD 12 02 F6 | 	mov	arg01, result1
0c214     2C 46 B1 FD | 	call	#__system___lockmem
0c218     83 01 00 FF 
0c21c     57 15 06 F6 | 	mov	arg02, ##@LR__5408
0c220     00 12 06 F6 | 	mov	arg01, #0
0c224     00 16 06 F6 | 	mov	arg03, #0
0c228     0C 53 B1 FD | 	call	#__system___basic_print_string
0c22c     00 12 06 F6 | 	mov	arg01, #0
0c230     74 A0 B1 FD | 	call	#__system___getiolock_0542
0c234     FD 00 68 FC | 	wrlong	#0, result1
0c238     0F 12 06 F6 | 	mov	arg01, #15
0c23c     74 10 B1 FD | 	call	#_printerror
0c240     20 00 90 FD | 	jmp	#LR__1083
0c244                 | LR__1082
0c244     A7 1E 02 FB | 	rdlong	local01, fp
0c248     0F 1F C2 FA | 	rdbyte	local01, local01
0c24c     A7 1E 62 FC | 	wrlong	local01, fp
0c250     08 4E 05 F1 | 	add	fp, #8
0c254     A7 38 68 FC | 	wrlong	#28, fp
0c258     08 4E 85 F1 | 	sub	fp, #8
0c25c     A7 12 02 F6 | 	mov	arg01, fp
0c260     F0 F1 BF FD | 	call	#_push
0c264                 | LR__1083
0c264     A7 F0 03 F6 | 	mov	ptra, fp
0c268     B2 00 A0 FD | 	call	#popregs_
0c26c                 | _do_asc_ret
0c26c     2D 00 64 FD | 	ret
0c270                 | 
0c270                 | ' 
0c270                 | ' '-------------------- asin
0c270                 | ' 
0c270                 | ' sub do_asin
0c270                 | _do_asin
0c270     01 4A 05 F6 | 	mov	COUNT_, #1
0c274     A8 00 A0 FD | 	call	#pushregs_
0c278     10 F0 07 F1 | 	add	ptra, #16
0c27c     4A 00 00 FF 
0c280     80 E4 05 F1 | 	add	objptr, ##38016
0c284     F2 1E 02 FB | 	rdlong	local01, objptr
0c288     0F 17 02 F6 | 	mov	arg03, local01
0c28c     01 16 66 F0 | 	shl	arg03, #1
0c290     0F 17 02 F1 | 	add	arg03, local01
0c294     02 16 66 F0 | 	shl	arg03, #2
0c298     03 00 00 FF 
0c29c     04 E4 85 F1 | 	sub	objptr, ##1540
0c2a0     F2 16 02 F1 | 	add	arg03, objptr
0c2a4     0B 17 02 FB | 	rdlong	arg03, arg03
0c2a8     0C 4E 05 F1 | 	add	fp, #12
0c2ac     A7 16 62 FC | 	wrlong	arg03, fp
0c2b0                 | ' 
0c2b0                 | ' numpar=compiledline(lineptr_e).result.uresult
0c2b0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c2b0     0C 4E 85 F1 | 	sub	fp, #12
0c2b4     02 16 16 F2 | 	cmp	arg03, #2 wc
0c2b8     47 00 00 FF 
0c2bc     7C E4 85 F1 | 	sub	objptr, ##36476
0c2c0     0C 4E 05 C1 |  if_b	add	fp, #12
0c2c4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c2c8     0C 4E 85 C1 |  if_b	sub	fp, #12
0c2cc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c2d0     00 12 06 F6 | 	mov	arg01, #0
0c2d4     D0 9F B1 FD | 	call	#__system___getiolock_0542
0c2d8     FD 12 02 F6 | 	mov	arg01, result1
0c2dc     64 45 B1 FD | 	call	#__system___lockmem
0c2e0     83 01 00 FF 
0c2e4     5D 15 06 F6 | 	mov	arg02, ##@LR__5409
0c2e8     00 12 06 F6 | 	mov	arg01, #0
0c2ec     00 16 06 F6 | 	mov	arg03, #0
0c2f0     44 52 B1 FD | 	call	#__system___basic_print_string
0c2f4     00 12 06 F6 | 	mov	arg01, #0
0c2f8     AC 9F B1 FD | 	call	#__system___getiolock_0542
0c2fc     FD 00 68 FC | 	wrlong	#0, result1
0c300     27 12 06 F6 | 	mov	arg01, #39
0c304     AC 0F B1 FD | 	call	#_printerror
0c308     64 00 90 FD | 	jmp	#LR__1091
0c30c                 | LR__1090
0c30c     AC F0 BF FD | 	call	#_pop
0c310     FF 1E 02 F6 | 	mov	local01, result3
0c314     A7 FA 61 FC | 	wrlong	result1, fp
0c318     04 4E 05 F1 | 	add	fp, #4
0c31c     A7 FC 61 FC | 	wrlong	result2, fp
0c320     04 4E 05 F1 | 	add	fp, #4
0c324     A7 1E 62 FC | 	wrlong	local01, fp
0c328     08 4E 85 F1 | 	sub	fp, #8
0c32c     A7 12 02 F6 | 	mov	arg01, fp
0c330     28 F3 BF FD | 	call	#_converttofloat
0c334     FD 12 02 F6 | 	mov	arg01, result1
0c338     B0 7B B1 FD | 	call	#__system____builtin_asinf
0c33c     FD 12 02 F6 | 	mov	arg01, result1
0c340     51 00 00 FF 
0c344     C0 E5 05 F1 | 	add	objptr, ##41920
0c348     F2 14 02 FB | 	rdlong	arg02, objptr
0c34c     51 00 00 FF 
0c350     C0 E5 85 F1 | 	sub	objptr, ##41920
0c354     A0 70 B1 FD | 	call	#__system___float_mul
0c358     A7 FA 61 FC | 	wrlong	result1, fp
0c35c     08 4E 05 F1 | 	add	fp, #8
0c360     A7 3C 68 FC | 	wrlong	#30, fp
0c364     08 4E 85 F1 | 	sub	fp, #8
0c368     A7 12 02 F6 | 	mov	arg01, fp
0c36c     E4 F0 BF FD | 	call	#_push
0c370                 | LR__1091
0c370     A7 F0 03 F6 | 	mov	ptra, fp
0c374     B2 00 A0 FD | 	call	#popregs_
0c378                 | _do_asin_ret
0c378     2D 00 64 FD | 	ret
0c37c                 | 
0c37c                 | ' 
0c37c                 | ' '-------------------- atn
0c37c                 | ' 
0c37c                 | ' sub do_atn
0c37c                 | _do_atn
0c37c     01 4A 05 F6 | 	mov	COUNT_, #1
0c380     A8 00 A0 FD | 	call	#pushregs_
0c384     10 F0 07 F1 | 	add	ptra, #16
0c388     4A 00 00 FF 
0c38c     80 E4 05 F1 | 	add	objptr, ##38016
0c390     F2 1E 02 FB | 	rdlong	local01, objptr
0c394     0F 17 02 F6 | 	mov	arg03, local01
0c398     01 16 66 F0 | 	shl	arg03, #1
0c39c     0F 17 02 F1 | 	add	arg03, local01
0c3a0     02 16 66 F0 | 	shl	arg03, #2
0c3a4     03 00 00 FF 
0c3a8     04 E4 85 F1 | 	sub	objptr, ##1540
0c3ac     F2 16 02 F1 | 	add	arg03, objptr
0c3b0     0B 17 02 FB | 	rdlong	arg03, arg03
0c3b4     0C 4E 05 F1 | 	add	fp, #12
0c3b8     A7 16 62 FC | 	wrlong	arg03, fp
0c3bc                 | ' 
0c3bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0c3bc                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c3bc     0C 4E 85 F1 | 	sub	fp, #12
0c3c0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c3c4     47 00 00 FF 
0c3c8     7C E4 85 F1 | 	sub	objptr, ##36476
0c3cc     0C 4E 05 C1 |  if_b	add	fp, #12
0c3d0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c3d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0c3d8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c3dc     00 12 06 F6 | 	mov	arg01, #0
0c3e0     C4 9E B1 FD | 	call	#__system___getiolock_0542
0c3e4     FD 12 02 F6 | 	mov	arg01, result1
0c3e8     58 44 B1 FD | 	call	#__system___lockmem
0c3ec     83 01 00 FF 
0c3f0     64 15 06 F6 | 	mov	arg02, ##@LR__5410
0c3f4     00 12 06 F6 | 	mov	arg01, #0
0c3f8     00 16 06 F6 | 	mov	arg03, #0
0c3fc     38 51 B1 FD | 	call	#__system___basic_print_string
0c400     00 12 06 F6 | 	mov	arg01, #0
0c404     A0 9E B1 FD | 	call	#__system___getiolock_0542
0c408     FD 00 68 FC | 	wrlong	#0, result1
0c40c     27 12 06 F6 | 	mov	arg01, #39
0c410     A0 0E B1 FD | 	call	#_printerror
0c414     6C 00 90 FD | 	jmp	#LR__1101
0c418                 | LR__1100
0c418     A0 EF BF FD | 	call	#_pop
0c41c     FF 1E 02 F6 | 	mov	local01, result3
0c420     A7 FA 61 FC | 	wrlong	result1, fp
0c424     04 4E 05 F1 | 	add	fp, #4
0c428     A7 FC 61 FC | 	wrlong	result2, fp
0c42c     04 4E 05 F1 | 	add	fp, #4
0c430     A7 1E 62 FC | 	wrlong	local01, fp
0c434     08 4E 85 F1 | 	sub	fp, #8
0c438     A7 12 02 F6 | 	mov	arg01, fp
0c43c     1C F2 BF FD | 	call	#_converttofloat
0c440     FD 12 02 F6 | 	mov	arg01, result1
0c444     00 C0 1F FF 
0c448     00 14 06 F6 | 	mov	arg02, ##1065353216
0c44c     34 7B B1 FD | 	call	#__system____builtin_atan2f
0c450     FD 12 02 F6 | 	mov	arg01, result1
0c454     51 00 00 FF 
0c458     C0 E5 05 F1 | 	add	objptr, ##41920
0c45c     F2 14 02 FB | 	rdlong	arg02, objptr
0c460     51 00 00 FF 
0c464     C0 E5 85 F1 | 	sub	objptr, ##41920
0c468     8C 6F B1 FD | 	call	#__system___float_mul
0c46c     A7 FA 61 FC | 	wrlong	result1, fp
0c470     08 4E 05 F1 | 	add	fp, #8
0c474     A7 3C 68 FC | 	wrlong	#30, fp
0c478     08 4E 85 F1 | 	sub	fp, #8
0c47c     A7 12 02 F6 | 	mov	arg01, fp
0c480     D0 EF BF FD | 	call	#_push
0c484                 | LR__1101
0c484     A7 F0 03 F6 | 	mov	ptra, fp
0c488     B2 00 A0 FD | 	call	#popregs_
0c48c                 | _do_atn_ret
0c48c     2D 00 64 FD | 	ret
0c490                 | 
0c490                 | ' 
0c490                 | ' '-------------------- beep
0c490                 | ' 
0c490                 | ' sub do_beep
0c490                 | _do_beep
0c490     02 4A 05 F6 | 	mov	COUNT_, #2
0c494     A8 00 A0 FD | 	call	#pushregs_
0c498     20 F0 07 F1 | 	add	ptra, #32
0c49c     1C EF BF FD | 	call	#_pop
0c4a0     FD 1E 02 F6 | 	mov	local01, result1
0c4a4     FE 1C 02 F6 | 	mov	arg06, result2
0c4a8     FF 20 02 F6 | 	mov	local02, result3
0c4ac     0C 4E 05 F1 | 	add	fp, #12
0c4b0     A7 1E 62 FC | 	wrlong	local01, fp
0c4b4     04 4E 05 F1 | 	add	fp, #4
0c4b8     A7 1C 62 FC | 	wrlong	arg06, fp
0c4bc     04 4E 05 F1 | 	add	fp, #4
0c4c0     A7 20 62 FC | 	wrlong	local02, fp
0c4c4     14 4E 85 F1 | 	sub	fp, #20
0c4c8     F0 EE BF FD | 	call	#_pop
0c4cc     A7 FA 61 FC | 	wrlong	result1, fp
0c4d0     04 4E 05 F1 | 	add	fp, #4
0c4d4     A7 FC 61 FC | 	wrlong	result2, fp
0c4d8     04 4E 05 F1 | 	add	fp, #4
0c4dc     A7 FE 61 FC | 	wrlong	result3, fp
0c4e0                 | ' 
0c4e0                 | ' t2=pop()
0c4e0                 | ' t1=pop()
0c4e0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c4e0     08 4E 85 F1 | 	sub	fp, #8
0c4e4     1C FE 0D F2 | 	cmp	result3, #28 wz
0c4e8     08 4E 05 51 |  if_ne	add	fp, #8
0c4ec     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c4f0     08 4E 85 51 |  if_ne	sub	fp, #8
0c4f4     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0c4f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c4fc     18 4E 05 A1 |  if_e	add	fp, #24
0c500     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c504     18 4E 85 A1 |  if_e	sub	fp, #24
0c508     14 00 90 AD |  if_e	jmp	#LR__1110
0c50c     A7 12 02 F6 | 	mov	arg01, fp
0c510     8C F0 BF FD | 	call	#_converttoint
0c514     18 4E 05 F1 | 	add	fp, #24
0c518     A7 FA 61 FC | 	wrlong	result1, fp
0c51c     18 4E 85 F1 | 	sub	fp, #24
0c520                 | LR__1110
0c520     1C 4E 05 F1 | 	add	fp, #28
0c524     A7 FE 48 FC | 	wrbyte	#127, fp
0c528     01 4E 05 F1 | 	add	fp, #1
0c52c     A7 00 49 FC | 	wrbyte	#128, fp
0c530     01 4E 85 F1 | 	sub	fp, #1
0c534     A7 14 02 F6 | 	mov	arg02, fp
0c538     04 4E 85 F1 | 	sub	fp, #4
0c53c     A7 16 02 FB | 	rdlong	arg03, fp
0c540     18 4E 85 F1 | 	sub	fp, #24
0c544     01 16 66 F0 | 	shl	arg03, #1
0c548     07 12 06 F6 | 	mov	arg01, #7
0c54c     0E 18 C6 F9 | 	decod	arg04, #14
0c550     02 1A 06 F6 | 	mov	arg05, #2
0c554     00 1C 06 F6 | 	mov	arg06, #0
0c558     0B 00 00 FF 
0c55c     CC E4 05 F1 | 	add	objptr, ##5836
0c560     3C 3F B1 FD | 	call	#_audio096_spin2_play8
0c564     0B 00 00 FF 
0c568     CC E4 85 F1 | 	sub	objptr, ##5836
0c56c     0C 4E 05 F1 | 	add	fp, #12
0c570     A7 12 02 F6 | 	mov	arg01, fp
0c574     0C 4E 85 F1 | 	sub	fp, #12
0c578     D8 EE BF FD | 	call	#_push
0c57c     4C A6 B0 FD | 	call	#_do_waitms
0c580     07 12 06 F6 | 	mov	arg01, #7
0c584     0B 00 00 FF 
0c588     CC E4 05 F1 | 	add	objptr, ##5836
0c58c     B4 3F B1 FD | 	call	#_audio096_spin2_stop
0c590     0B 00 00 FF 
0c594     CC E4 85 F1 | 	sub	objptr, ##5836
0c598     A7 F0 03 F6 | 	mov	ptra, fp
0c59c     B2 00 A0 FD | 	call	#popregs_
0c5a0                 | _do_beep_ret
0c5a0     2D 00 64 FD | 	ret
0c5a4                 | 
0c5a4                 | ' 
0c5a4                 | ' '-------------------- bin$
0c5a4                 | ' 
0c5a4                 | ' sub do_bin
0c5a4                 | _do_bin
0c5a4     01 4A 05 F6 | 	mov	COUNT_, #1
0c5a8     A8 00 A0 FD | 	call	#pushregs_
0c5ac     18 F0 07 F1 | 	add	ptra, #24
0c5b0     4A 00 00 FF 
0c5b4     80 E4 05 F1 | 	add	objptr, ##38016
0c5b8     F2 1E 02 FB | 	rdlong	local01, objptr
0c5bc     0F 17 02 F6 | 	mov	arg03, local01
0c5c0     01 16 66 F0 | 	shl	arg03, #1
0c5c4     0F 17 02 F1 | 	add	arg03, local01
0c5c8     02 16 66 F0 | 	shl	arg03, #2
0c5cc     03 00 00 FF 
0c5d0     04 E4 85 F1 | 	sub	objptr, ##1540
0c5d4     F2 16 02 F1 | 	add	arg03, objptr
0c5d8     0B 17 02 FB | 	rdlong	arg03, arg03
0c5dc     0C 4E 05 F1 | 	add	fp, #12
0c5e0     A7 16 62 FC | 	wrlong	arg03, fp
0c5e4                 | ' 
0c5e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5e4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0c5e4     0C 4E 85 F1 | 	sub	fp, #12
0c5e8     03 16 16 F2 | 	cmp	arg03, #3 wc
0c5ec     47 00 00 FF 
0c5f0     7C E4 85 F1 | 	sub	objptr, ##36476
0c5f4     0C 4E 05 C1 |  if_b	add	fp, #12
0c5f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c5fc     0C 4E 85 C1 |  if_b	sub	fp, #12
0c600     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0c604     00 12 06 F6 | 	mov	arg01, #0
0c608     9C 9C B1 FD | 	call	#__system___getiolock_0542
0c60c     FD 12 02 F6 | 	mov	arg01, result1
0c610     30 42 B1 FD | 	call	#__system___lockmem
0c614     83 01 00 FF 
0c618     6A 15 06 F6 | 	mov	arg02, ##@LR__5411
0c61c     00 12 06 F6 | 	mov	arg01, #0
0c620     00 16 06 F6 | 	mov	arg03, #0
0c624     10 4F B1 FD | 	call	#__system___basic_print_string
0c628     00 12 06 F6 | 	mov	arg01, #0
0c62c     78 9C B1 FD | 	call	#__system___getiolock_0542
0c630     FD 00 68 FC | 	wrlong	#0, result1
0c634     27 12 06 F6 | 	mov	arg01, #39
0c638     78 0C B1 FD | 	call	#_printerror
0c63c     B8 00 90 FD | 	jmp	#LR__1123
0c640                 | LR__1120
0c640                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0c640     0C 4E 05 F1 | 	add	fp, #12
0c644     A7 1E 02 FB | 	rdlong	local01, fp
0c648     0C 4E 85 F1 | 	sub	fp, #12
0c64c     02 1E 0E F2 | 	cmp	local01, #2 wz
0c650     38 00 90 5D |  if_ne	jmp	#LR__1121
0c654     64 ED BF FD | 	call	#_pop
0c658     FF 1E 02 F6 | 	mov	local01, result3
0c65c     A7 FA 61 FC | 	wrlong	result1, fp
0c660     04 4E 05 F1 | 	add	fp, #4
0c664     A7 FC 61 FC | 	wrlong	result2, fp
0c668     04 4E 05 F1 | 	add	fp, #4
0c66c     A7 1E 62 FC | 	wrlong	local01, fp
0c670     08 4E 85 F1 | 	sub	fp, #8
0c674     A7 12 02 F6 | 	mov	arg01, fp
0c678     24 EF BF FD | 	call	#_converttoint
0c67c     14 4E 05 F1 | 	add	fp, #20
0c680     A7 FA 61 FC | 	wrlong	result1, fp
0c684     14 4E 85 F1 | 	sub	fp, #20
0c688     0C 00 90 FD | 	jmp	#LR__1122
0c68c                 | LR__1121
0c68c     14 4E 05 F1 | 	add	fp, #20
0c690     A7 00 68 FC | 	wrlong	#0, fp
0c694     14 4E 85 F1 | 	sub	fp, #20
0c698                 | LR__1122
0c698     20 ED BF FD | 	call	#_pop
0c69c     FF 1E 02 F6 | 	mov	local01, result3
0c6a0     A7 FA 61 FC | 	wrlong	result1, fp
0c6a4     04 4E 05 F1 | 	add	fp, #4
0c6a8     A7 FC 61 FC | 	wrlong	result2, fp
0c6ac     04 4E 05 F1 | 	add	fp, #4
0c6b0     A7 1E 62 FC | 	wrlong	local01, fp
0c6b4     08 4E 85 F1 | 	sub	fp, #8
0c6b8     A7 12 02 F6 | 	mov	arg01, fp
0c6bc     E0 EE BF FD | 	call	#_converttoint
0c6c0     10 4E 05 F1 | 	add	fp, #16
0c6c4     A7 FA 61 FC | 	wrlong	result1, fp
0c6c8     FD 12 02 F6 | 	mov	arg01, result1
0c6cc     04 4E 05 F1 | 	add	fp, #4
0c6d0     A7 14 02 FB | 	rdlong	arg02, fp
0c6d4     14 4E 85 F1 | 	sub	fp, #20
0c6d8     02 16 06 F6 | 	mov	arg03, #2
0c6dc     34 64 B1 FD | 	call	#__system__Number_S
0c6e0     A7 FA 61 FC | 	wrlong	result1, fp
0c6e4     08 4E 05 F1 | 	add	fp, #8
0c6e8     A7 3E 68 FC | 	wrlong	#31, fp
0c6ec     08 4E 85 F1 | 	sub	fp, #8
0c6f0     A7 12 02 F6 | 	mov	arg01, fp
0c6f4     5C ED BF FD | 	call	#_push
0c6f8                 | LR__1123
0c6f8     A7 F0 03 F6 | 	mov	ptra, fp
0c6fc     B2 00 A0 FD | 	call	#popregs_
0c700                 | _do_bin_ret
0c700     2D 00 64 FD | 	ret
0c704                 | 
0c704                 | ' 
0c704                 | ' '-------------------- box
0c704                 | ' 
0c704                 | ' sub do_box
0c704                 | _do_box
0c704     03 4A 05 F6 | 	mov	COUNT_, #3
0c708     A8 00 A0 FD | 	call	#pushregs_
0c70c     30 F0 07 F1 | 	add	ptra, #48
0c710     A8 EC BF FD | 	call	#_pop
0c714     FD 1A 02 F6 | 	mov	arg05, result1
0c718     FE 18 02 F6 | 	mov	arg04, result2
0c71c     FF 16 02 F6 | 	mov	arg03, result3
0c720     24 4E 05 F1 | 	add	fp, #36
0c724     A7 1A 62 FC | 	wrlong	arg05, fp
0c728     04 4E 05 F1 | 	add	fp, #4
0c72c     A7 18 62 FC | 	wrlong	arg04, fp
0c730     04 4E 05 F1 | 	add	fp, #4
0c734     A7 16 62 FC | 	wrlong	arg03, fp
0c738     2C 4E 85 F1 | 	sub	fp, #44
0c73c     7C EC BF FD | 	call	#_pop
0c740     FD 1A 02 F6 | 	mov	arg05, result1
0c744     FE 18 02 F6 | 	mov	arg04, result2
0c748     FF 16 02 F6 | 	mov	arg03, result3
0c74c     18 4E 05 F1 | 	add	fp, #24
0c750     A7 1A 62 FC | 	wrlong	arg05, fp
0c754     04 4E 05 F1 | 	add	fp, #4
0c758     A7 18 62 FC | 	wrlong	arg04, fp
0c75c     04 4E 05 F1 | 	add	fp, #4
0c760     A7 16 62 FC | 	wrlong	arg03, fp
0c764     20 4E 85 F1 | 	sub	fp, #32
0c768     50 EC BF FD | 	call	#_pop
0c76c     FD 1A 02 F6 | 	mov	arg05, result1
0c770     FE 18 02 F6 | 	mov	arg04, result2
0c774     FF 1E 02 F6 | 	mov	local01, result3
0c778     0C 4E 05 F1 | 	add	fp, #12
0c77c     A7 1A 62 FC | 	wrlong	arg05, fp
0c780     04 4E 05 F1 | 	add	fp, #4
0c784     A7 18 62 FC | 	wrlong	arg04, fp
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 1E 62 FC | 	wrlong	local01, fp
0c790     14 4E 85 F1 | 	sub	fp, #20
0c794     24 EC BF FD | 	call	#_pop
0c798     A7 FA 61 FC | 	wrlong	result1, fp
0c79c     04 4E 05 F1 | 	add	fp, #4
0c7a0     A7 FC 61 FC | 	wrlong	result2, fp
0c7a4     04 4E 05 F1 | 	add	fp, #4
0c7a8     A7 FE 61 FC | 	wrlong	result3, fp
0c7ac                 | ' 
0c7ac                 | ' t4=pop()
0c7ac                 | ' t3=pop()
0c7ac                 | ' t2=pop()
0c7ac                 | ' t1=pop()
0c7ac                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0c7ac     FF 1A 02 F6 | 	mov	arg05, result3
0c7b0     08 4E 85 F1 | 	sub	fp, #8
0c7b4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0c7b8     08 4E 05 51 |  if_ne	add	fp, #8
0c7bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c7c0     08 4E 85 51 |  if_ne	sub	fp, #8
0c7c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0c7c8     A8 00 90 5D |  if_ne	jmp	#LR__1130
0c7cc     14 4E 05 F1 | 	add	fp, #20
0c7d0     A7 1E 02 FB | 	rdlong	local01, fp
0c7d4     14 4E 85 F1 | 	sub	fp, #20
0c7d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c7dc     14 4E 05 51 |  if_ne	add	fp, #20
0c7e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c7e4     14 4E 85 51 |  if_ne	sub	fp, #20
0c7e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c7ec     84 00 90 5D |  if_ne	jmp	#LR__1130
0c7f0     20 4E 05 F1 | 	add	fp, #32
0c7f4     A7 1E 02 FB | 	rdlong	local01, fp
0c7f8     20 4E 85 F1 | 	sub	fp, #32
0c7fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c800     20 4E 05 51 |  if_ne	add	fp, #32
0c804     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c808     20 4E 85 51 |  if_ne	sub	fp, #32
0c80c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c810     60 00 90 5D |  if_ne	jmp	#LR__1130
0c814     2C 4E 05 F1 | 	add	fp, #44
0c818     A7 1E 02 FB | 	rdlong	local01, fp
0c81c     2C 4E 85 F1 | 	sub	fp, #44
0c820     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c824     2C 4E 05 51 |  if_ne	add	fp, #44
0c828     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0c82c     2C 4E 85 51 |  if_ne	sub	fp, #44
0c830     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0c834     3C 00 90 5D |  if_ne	jmp	#LR__1130
0c838     A7 12 02 FB | 	rdlong	arg01, fp
0c83c     0C 4E 05 F1 | 	add	fp, #12
0c840     A7 14 02 FB | 	rdlong	arg02, fp
0c844     0C 4E 05 F1 | 	add	fp, #12
0c848     A7 16 02 FB | 	rdlong	arg03, fp
0c84c     0C 4E 05 F1 | 	add	fp, #12
0c850     A7 18 02 FB | 	rdlong	arg04, fp
0c854     24 4E 85 F1 | 	sub	fp, #36
0c858     37 00 00 FF 
0c85c     28 E4 05 F1 | 	add	objptr, ##28200
0c860     F2 1A 02 FB | 	rdlong	arg05, objptr
0c864     37 00 00 FF 
0c868     28 E4 85 F1 | 	sub	objptr, ##28200
0c86c     30 24 B1 FD | 	call	#_hg010b_spin2_box
0c870                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0c870     6C 00 90 FD | 	jmp	#LR__1131
0c874                 | LR__1130
0c874     A7 12 02 F6 | 	mov	arg01, fp
0c878     24 ED BF FD | 	call	#_converttoint
0c87c     FD 20 02 F6 | 	mov	local02, result1
0c880     0C 4E 05 F1 | 	add	fp, #12
0c884     A7 12 02 F6 | 	mov	arg01, fp
0c888     0C 4E 85 F1 | 	sub	fp, #12
0c88c     10 ED BF FD | 	call	#_converttoint
0c890     FD 22 02 F6 | 	mov	local03, result1
0c894     18 4E 05 F1 | 	add	fp, #24
0c898     A7 12 02 F6 | 	mov	arg01, fp
0c89c     18 4E 85 F1 | 	sub	fp, #24
0c8a0     FC EC BF FD | 	call	#_converttoint
0c8a4     FD 1E 02 F6 | 	mov	local01, result1
0c8a8     24 4E 05 F1 | 	add	fp, #36
0c8ac     A7 12 02 F6 | 	mov	arg01, fp
0c8b0     24 4E 85 F1 | 	sub	fp, #36
0c8b4     E8 EC BF FD | 	call	#_converttoint
0c8b8     FD 18 02 F6 | 	mov	arg04, result1
0c8bc     37 00 00 FF 
0c8c0     28 E4 05 F1 | 	add	objptr, ##28200
0c8c4     F2 1A 02 FB | 	rdlong	arg05, objptr
0c8c8     37 00 00 FF 
0c8cc     28 E4 85 F1 | 	sub	objptr, ##28200
0c8d0     10 13 02 F6 | 	mov	arg01, local02
0c8d4     11 15 02 F6 | 	mov	arg02, local03
0c8d8     0F 17 02 F6 | 	mov	arg03, local01
0c8dc     C0 23 B1 FD | 	call	#_hg010b_spin2_box
0c8e0                 | LR__1131
0c8e0     A7 F0 03 F6 | 	mov	ptra, fp
0c8e4     B2 00 A0 FD | 	call	#popregs_
0c8e8                 | _do_box_ret
0c8e8     2D 00 64 FD | 	ret
0c8ec                 | 
0c8ec                 | ' 
0c8ec                 | ' '-------------------- brun
0c8ec                 | ' 
0c8ec                 | ' sub do_brun
0c8ec                 | _do_brun
0c8ec     08 4A 05 F6 | 	mov	COUNT_, #8
0c8f0     A8 00 A0 FD | 	call	#pushregs_
0c8f4     C4 EA BF FD | 	call	#_pop
0c8f8     FE 1A 02 F6 | 	mov	arg05, result2
0c8fc     FF 18 02 F6 | 	mov	arg04, result3
0c900     FD 1E 02 F6 | 	mov	local01, result1
0c904     0D 21 02 F6 | 	mov	local02, arg05
0c908     0C 23 02 F6 | 	mov	local03, arg04
0c90c                 | ' 
0c90c                 | ' t1=pop() 
0c90c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c90c     2B 22 0E F2 | 	cmp	local03, #43 wz
0c910     10 00 90 5D |  if_ne	jmp	#LR__1140
0c914     0F 13 02 F6 | 	mov	arg01, local01
0c918     18 EC BF FD | 	call	#_convertstring
0c91c     FD 1E 02 F6 | 	mov	local01, result1
0c920     1F 22 06 F6 | 	mov	local03, #31
0c924                 | LR__1140
0c924                 | ' if t1.result_type=result_string then
0c924     1F 22 0E F2 | 	cmp	local03, #31 wz
0c928     EC 01 90 5D |  if_ne	jmp	#LR__1144
0c92c     0F 25 02 F6 | 	mov	local04, local01
0c930                 | '   filename=t1.result.sresult
0c930                 | '   if left$(filename,1)="/" then 
0c930     12 13 02 F6 | 	mov	arg01, local04
0c934     01 14 06 F6 | 	mov	arg02, #1
0c938     84 5F B1 FD | 	call	#__system__Left_S
0c93c     FD 12 02 F6 | 	mov	arg01, result1
0c940     83 01 00 FF 
0c944     71 15 06 F6 | 	mov	arg02, ##@LR__5412
0c948     20 3F B1 FD | 	call	#__system___string_cmp
0c94c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c950     12 27 02 A6 |  if_e	mov	local05, local04
0c954     14 00 90 AD |  if_e	jmp	#LR__1141
0c958     83 01 00 FF 
0c95c     73 13 06 F6 | 	mov	arg01, ##@LR__5413
0c960     12 15 02 F6 | 	mov	arg02, local04
0c964     38 3F B1 FD | 	call	#__system___string_concat
0c968     FD 26 02 F6 | 	mov	local05, result1
0c96c                 | LR__1141
0c96c                 | '   open fullfilename for input as #9
0c96c     09 12 06 F6 | 	mov	arg01, #9
0c970     13 15 02 F6 | 	mov	arg02, local05
0c974     00 16 06 F6 | 	mov	arg03, #0
0c978     CC 4A B1 FD | 	call	#__system___basic_open_string
0c97c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c980     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0c984     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c988     FD 28 0A F6 | 	mov	local06, result1 wz
0c98c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0c98c     8C 00 90 AD |  if_e	jmp	#LR__1142
0c990     00 12 06 F6 | 	mov	arg01, #0
0c994     10 99 B1 FD | 	call	#__system___getiolock_0542
0c998     FD 12 02 F6 | 	mov	arg01, result1
0c99c     A4 3E B1 FD | 	call	#__system___lockmem
0c9a0     83 01 00 FF 
0c9a4     7C 15 06 F6 | 	mov	arg02, ##@LR__5414
0c9a8     00 12 06 F6 | 	mov	arg01, #0
0c9ac     00 16 06 F6 | 	mov	arg03, #0
0c9b0     84 4B B1 FD | 	call	#__system___basic_print_string
0c9b4     00 12 06 F6 | 	mov	arg01, #0
0c9b8     14 15 02 F6 | 	mov	arg02, local06
0c9bc     00 16 06 F6 | 	mov	arg03, #0
0c9c0     0A 18 06 F6 | 	mov	arg04, #10
0c9c4     B4 4B B1 FD | 	call	#__system___basic_print_integer
0c9c8     83 01 00 FF 
0c9cc     8A 15 06 F6 | 	mov	arg02, ##@LR__5415
0c9d0     00 12 06 F6 | 	mov	arg01, #0
0c9d4     00 16 06 F6 | 	mov	arg03, #0
0c9d8     5C 4B B1 FD | 	call	#__system___basic_print_string
0c9dc     14 13 02 F6 | 	mov	arg01, local06
0c9e0     28 65 B1 FD | 	call	#__system___strerror
0c9e4     FD 14 02 F6 | 	mov	arg02, result1
0c9e8     00 12 06 F6 | 	mov	arg01, #0
0c9ec     00 16 06 F6 | 	mov	arg03, #0
0c9f0     44 4B B1 FD | 	call	#__system___basic_print_string
0c9f4     00 12 06 F6 | 	mov	arg01, #0
0c9f8     0A 14 06 F6 | 	mov	arg02, #10
0c9fc     00 16 06 F6 | 	mov	arg03, #0
0ca00     DC 4A B1 FD | 	call	#__system___basic_print_char
0ca04     00 12 06 F6 | 	mov	arg01, #0
0ca08     9C 98 B1 FD | 	call	#__system___getiolock_0542
0ca0c     FD 00 68 FC | 	wrlong	#0, result1
0ca10     09 12 06 F6 | 	mov	arg01, #9
0ca14     C0 8E B1 FD | 	call	#__system__close
0ca18     FC 00 90 FD | 	jmp	#LR__1145
0ca1c                 | LR__1142
0ca1c     01 2A 06 F6 | 	mov	local07, #1
0ca20     00 2C 06 F6 | 	mov	local08, #0
0ca24                 | '   do
0ca24                 | LR__1143
0ca24                 | '     get #9,pos,block(0),1024,r : pos+=r	
0ca24     4E 00 00 FF 
0ca28     B4 E4 05 F1 | 	add	objptr, ##40116
0ca2c     F2 16 02 F6 | 	mov	arg03, objptr
0ca30     4E 00 00 FF 
0ca34     B4 E4 85 F1 | 	sub	objptr, ##40116
0ca38     09 12 06 F6 | 	mov	arg01, #9
0ca3c     15 15 02 F6 | 	mov	arg02, local07
0ca40     0A 18 C6 F9 | 	decod	arg04, #10
0ca44     01 1A 06 F6 | 	mov	arg05, #1
0ca48     68 4C B1 FD | 	call	#__system___basic_get
0ca4c     FD 28 02 F6 | 	mov	local06, result1
0ca50     FD 2A 02 F1 | 	add	local07, result1
0ca54     4E 00 00 FF 
0ca58     B4 E4 05 F1 | 	add	objptr, ##40116
0ca5c     F2 12 02 F6 | 	mov	arg01, objptr
0ca60     16 15 02 F6 | 	mov	arg02, local08
0ca64     0A 16 C6 F9 | 	decod	arg03, #10
0ca68     42 00 00 FF 
0ca6c     E8 E5 85 F1 | 	sub	objptr, ##34280
0ca70     2C 32 B1 FD | 	call	#_psram_spin2_write
0ca74     0B 00 00 FF 
0ca78     CC E4 85 F1 | 	sub	objptr, ##5836
0ca7c     14 2D 02 F1 | 	add	local08, local06
0ca80     02 00 00 FF 
0ca84     00 28 0E F2 | 	cmp	local06, ##1024 wz
0ca88     E0 03 00 AF 
0ca8c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0ca90     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1143
0ca94     36 00 00 FF 
0ca98     FC E5 05 F1 | 	add	objptr, ##28156
0ca9c     F2 12 02 FB | 	rdlong	arg01, objptr
0caa0     03 12 62 FD | 	cogstop	arg01
0caa4     04 E4 05 F1 | 	add	objptr, #4
0caa8     F2 12 02 FB | 	rdlong	arg01, objptr
0caac     03 12 62 FD | 	cogstop	arg01
0cab0     04 E4 05 F1 | 	add	objptr, #4
0cab4     F2 12 02 FB | 	rdlong	arg01, objptr
0cab8     03 12 62 FD | 	cogstop	arg01
0cabc     19 00 00 FF 
0cac0     14 E5 05 F1 | 	add	objptr, ##13076
0cac4     F2 12 02 FB | 	rdlong	arg01, objptr
0cac8     03 12 62 FD | 	cogstop	arg01
0cacc     18 00 00 FF 
0cad0     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0cad4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0cad8     18 00 00 FF 
0cadc     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0cae0     19 00 00 FF 
0cae4     0C E5 85 F1 | 	sub	objptr, ##13068
0cae8     1E 2C 06 F6 | 	mov	local08, #30
0caec     28 E4 61 FD | 	setq	objptr
0caf0     0A 2D F2 FC | 	coginit	local08, arg02 wc
0caf4     01 2C 66 C6 |  if_b	neg	local08, #1
0caf8     1B 00 00 FF 
0cafc     14 E4 05 F1 | 	add	objptr, ##13844
0cb00     F2 2C 62 FC | 	wrlong	local08, objptr
0cb04     52 00 00 FF 
0cb08     20 E4 85 F1 | 	sub	objptr, ##42016
0cb0c     00 12 06 F6 | 	mov	arg01, #0
0cb10     01 12 62 FD | 	cogid	arg01
0cb14     03 12 62 FD | 	cogstop	arg01
0cb18                 | LR__1144
0cb18                 | LR__1145
0cb18     A7 F0 03 F6 | 	mov	ptra, fp
0cb1c     B2 00 A0 FD | 	call	#popregs_
0cb20                 | _do_brun_ret
0cb20     2D 00 64 FD | 	ret
0cb24                 | 
0cb24                 | ' 
0cb24                 | ' '-------------------- changefreq
0cb24                 | ' 
0cb24                 | ' sub do_changefreq
0cb24                 | _do_changefreq
0cb24     04 4A 05 F6 | 	mov	COUNT_, #4
0cb28     A8 00 A0 FD | 	call	#pushregs_
0cb2c     28 F0 07 F1 | 	add	ptra, #40
0cb30     88 E8 BF FD | 	call	#_pop
0cb34     FF 14 02 F6 | 	mov	arg02, result3
0cb38     A7 FA 61 FC | 	wrlong	result1, fp
0cb3c     04 4E 05 F1 | 	add	fp, #4
0cb40     A7 FC 61 FC | 	wrlong	result2, fp
0cb44     04 4E 05 F1 | 	add	fp, #4
0cb48     A7 14 62 FC | 	wrlong	arg02, fp
0cb4c     08 4E 85 F1 | 	sub	fp, #8
0cb50     A7 12 02 F6 | 	mov	arg01, fp
0cb54     04 EB BF FD | 	call	#_converttofloat
0cb58     24 4E 05 F1 | 	add	fp, #36
0cb5c     A7 FA 61 FC | 	wrlong	result1, fp
0cb60     24 4E 85 F1 | 	sub	fp, #36
0cb64     FD 14 02 F6 | 	mov	arg02, result1
0cb68     FC 16 20 FF 
0cb6c     54 12 06 F6 | 	mov	arg01, ##1076754516
0cb70     54 78 B1 FD | 	call	#__system____builtin_logbase
0cb74     FD 1E 02 F6 | 	mov	local01, result1
0cb78     1E 14 C6 F9 | 	decod	arg02, #30
0cb7c     FC 16 20 FF 
0cb80     54 12 06 F6 | 	mov	arg01, ##1076754516
0cb84     40 78 B1 FD | 	call	#__system____builtin_logbase
0cb88     FD 14 02 F6 | 	mov	arg02, result1
0cb8c     0F 13 02 F6 | 	mov	arg01, local01
0cb90     68 6A B1 FD | 	call	#__system___float_div
0cb94     FD 12 02 F6 | 	mov	arg01, result1
0cb98     00 14 06 F6 | 	mov	arg02, #0
0cb9c     20 6D B1 FD | 	call	#__system___float_tointeger
0cba0     10 4E 05 F1 | 	add	fp, #16
0cba4     A7 FA 61 FC | 	wrlong	result1, fp
0cba8     1E 1E C6 F9 | 	decod	local01, #30
0cbac     FD 12 02 F6 | 	mov	arg01, result1
0cbb0     10 4E 85 F1 | 	sub	fp, #16
0cbb4     05 12 06 F1 | 	add	arg01, #5
0cbb8     09 13 52 F6 | 	abs	arg01, arg01 wc
0cbbc     1F 20 C6 C9 |  if_b	decod	local02, #31
0cbc0     00 20 06 36 |  if_ae	mov	local02, #0
0cbc4     2C 64 B1 FD | 	call	#__system___float_fromuns
0cbc8     10 FB 61 F5 | 	xor	result1, local02
0cbcc     FD 14 02 F6 | 	mov	arg02, result1
0cbd0     0F 13 02 F6 | 	mov	arg01, local01
0cbd4     28 77 B1 FD | 	call	#__system____builtin_powf
0cbd8     FD 12 02 F6 | 	mov	arg01, result1
0cbdc     01 14 06 F6 | 	mov	arg02, #1
0cbe0     DC 6C B1 FD | 	call	#__system___float_tointeger
0cbe4     14 4E 05 F1 | 	add	fp, #20
0cbe8     A7 FA 61 FC | 	wrlong	result1, fp
0cbec                 | ' skip=round(2^(lfreq+5))
0cbec                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0cbec     14 4E 85 F1 | 	sub	fp, #20
0cbf0     40 00 00 FF 
0cbf4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cbf8     30 00 90 CD |  if_b	jmp	#LR__1150
0cbfc     14 4E 05 F1 | 	add	fp, #20
0cc00     A7 1E 02 FB | 	rdlong	local01, fp
0cc04     0F 1F 52 F6 | 	abs	local01, local01 wc
0cc08     0F 1E 46 F0 | 	shr	local01, #15
0cc0c     0F 1F 82 F6 | 	negc	local01, local01
0cc10     04 4E 05 F1 | 	add	fp, #4
0cc14     A7 1E 62 FC | 	wrlong	local01, fp
0cc18     04 4E 85 F1 | 	sub	fp, #4
0cc1c     40 00 80 FF 
0cc20     A7 00 68 FC | 	wrlong	##32768, fp
0cc24     14 4E 85 F1 | 	sub	fp, #20
0cc28     0C 00 90 FD | 	jmp	#LR__1151
0cc2c                 | LR__1150
0cc2c     18 4E 05 F1 | 	add	fp, #24
0cc30     A7 02 68 FC | 	wrlong	#1, fp
0cc34     18 4E 85 F1 | 	sub	fp, #24
0cc38                 | LR__1151
0cc38     24 4E 05 F1 | 	add	fp, #36
0cc3c     A7 14 02 FB | 	rdlong	arg02, fp
0cc40     24 4E 85 F1 | 	sub	fp, #36
0cc44     3E 2C 25 FF 
0cc48     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cc4c     AC 69 B1 FD | 	call	#__system___float_div
0cc50     FD 1E 02 F6 | 	mov	local01, result1
0cc54     18 4E 05 F1 | 	add	fp, #24
0cc58     A7 12 02 FB | 	rdlong	arg01, fp
0cc5c     18 4E 85 F1 | 	sub	fp, #24
0cc60     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc64     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc68     00 20 06 36 |  if_ae	mov	local02, #0
0cc6c     84 63 B1 FD | 	call	#__system___float_fromuns
0cc70     10 FB 61 F5 | 	xor	result1, local02
0cc74     FD 22 02 F6 | 	mov	local03, result1
0cc78     1E 24 C6 F9 | 	decod	local04, #30
0cc7c     0D 12 06 F6 | 	mov	arg01, #13
0cc80     10 4E 05 F1 | 	add	fp, #16
0cc84     A7 14 02 FB | 	rdlong	arg02, fp
0cc88     10 4E 85 F1 | 	sub	fp, #16
0cc8c     0A 13 82 F1 | 	sub	arg01, arg02
0cc90     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc94     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc98     00 20 06 36 |  if_ae	mov	local02, #0
0cc9c     54 63 B1 FD | 	call	#__system___float_fromuns
0cca0     10 FB 61 F5 | 	xor	result1, local02
0cca4     FD 14 02 F6 | 	mov	arg02, result1
0cca8     12 13 02 F6 | 	mov	arg01, local04
0ccac     50 76 B1 FD | 	call	#__system____builtin_powf
0ccb0     FD 14 02 F6 | 	mov	arg02, result1
0ccb4     11 13 02 F6 | 	mov	arg01, local03
0ccb8     3C 67 B1 FD | 	call	#__system___float_mul
0ccbc     FD 14 02 F6 | 	mov	arg02, result1
0ccc0     0F 13 02 F6 | 	mov	arg01, local01
0ccc4     34 69 B1 FD | 	call	#__system___float_div
0ccc8     FD 12 02 F6 | 	mov	arg01, result1
0cccc     01 14 06 F6 | 	mov	arg02, #1
0ccd0     EC 6B B1 FD | 	call	#__system___float_tointeger
0ccd4     FD 1E 02 F6 | 	mov	local01, result1
0ccd8     1C 4E 05 F1 | 	add	fp, #28
0ccdc     A7 1E 62 FC | 	wrlong	local01, fp
0cce0     1C 4E 85 F1 | 	sub	fp, #28
0cce4     D4 E6 BF FD | 	call	#_pop
0cce8     FF 24 02 F6 | 	mov	local04, result3
0ccec     A7 FA 61 FC | 	wrlong	result1, fp
0ccf0     04 4E 05 F1 | 	add	fp, #4
0ccf4     A7 FC 61 FC | 	wrlong	result2, fp
0ccf8     04 4E 05 F1 | 	add	fp, #4
0ccfc     A7 24 62 FC | 	wrlong	local04, fp
0cd00     08 4E 85 F1 | 	sub	fp, #8
0cd04     A7 12 02 F6 | 	mov	arg01, fp
0cd08     94 E8 BF FD | 	call	#_converttoint
0cd0c     FD 22 52 F6 | 	abs	local03, result1 wc
0cd10     07 22 06 F5 | 	and	local03, #7
0cd14     11 23 82 F6 | 	negc	local03, local03
0cd18     0C 4E 05 F1 | 	add	fp, #12
0cd1c     A7 22 62 FC | 	wrlong	local03, fp
0cd20     08 4E 05 F1 | 	add	fp, #8
0cd24     A7 1E 02 FB | 	rdlong	local01, fp
0cd28     10 1E 66 F0 | 	shl	local01, #16
0cd2c     08 4E 05 F1 | 	add	fp, #8
0cd30     A7 24 02 FB | 	rdlong	local04, fp
0cd34     12 1F 02 F1 | 	add	local01, local04
0cd38     04 4E 05 F1 | 	add	fp, #4
0cd3c     A7 1E 62 FC | 	wrlong	local01, fp
0cd40                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0cd40     37 00 00 FF 
0cd44     10 E4 05 F1 | 	add	objptr, ##28176
0cd48     F2 12 02 FB | 	rdlong	arg01, objptr
0cd4c     37 00 00 FF 
0cd50     10 E4 85 F1 | 	sub	objptr, ##28176
0cd54     14 4E 85 F1 | 	sub	fp, #20
0cd58     A7 24 02 FB | 	rdlong	local04, fp
0cd5c     0C 4E 85 F1 | 	sub	fp, #12
0cd60     06 24 66 F0 | 	shl	local04, #6
0cd64     12 13 02 F1 | 	add	arg01, local04
0cd68     08 12 06 F1 | 	add	arg01, #8
0cd6c     09 FB 01 FB | 	rdlong	result1, arg01
0cd70     1B FA 2D F4 | 	testbn	result1, #27 wz
0cd74     3C 00 90 5D |  if_ne	jmp	#LR__1152
0cd78     37 00 00 FF 
0cd7c     10 E4 05 F1 | 	add	objptr, ##28176
0cd80     F2 12 02 FB | 	rdlong	arg01, objptr
0cd84     37 00 00 FF 
0cd88     10 E4 85 F1 | 	sub	objptr, ##28176
0cd8c     0C 4E 05 F1 | 	add	fp, #12
0cd90     A7 24 02 FB | 	rdlong	local04, fp
0cd94     06 24 66 F0 | 	shl	local04, #6
0cd98     12 13 02 F1 | 	add	arg01, local04
0cd9c     18 12 06 F1 | 	add	arg01, #24
0cda0     14 4E 05 F1 | 	add	fp, #20
0cda4     A7 14 02 FB | 	rdlong	arg02, fp
0cda8     20 4E 85 F1 | 	sub	fp, #32
0cdac     09 15 62 FC | 	wrlong	arg02, arg01
0cdb0     80 00 90 FD | 	jmp	#LR__1153
0cdb4                 | LR__1152
0cdb4     37 00 00 FF 
0cdb8     10 E4 05 F1 | 	add	objptr, ##28176
0cdbc     F2 1E 02 FB | 	rdlong	local01, objptr
0cdc0     37 00 00 FF 
0cdc4     10 E4 85 F1 | 	sub	objptr, ##28176
0cdc8     0C 4E 05 F1 | 	add	fp, #12
0cdcc     A7 24 02 FB | 	rdlong	local04, fp
0cdd0     06 24 66 F0 | 	shl	local04, #6
0cdd4     12 1F 02 F1 | 	add	local01, local04
0cdd8     18 1E 06 F1 | 	add	local01, #24
0cddc     18 4E 05 F1 | 	add	fp, #24
0cde0     A7 14 02 FB | 	rdlong	arg02, fp
0cde4     24 4E 85 F1 | 	sub	fp, #36
0cde8     3E 2C 25 FF 
0cdec     3C 12 06 F6 | 	mov	arg01, ##1247312956
0cdf0     08 68 B1 FD | 	call	#__system___float_div
0cdf4     FD 12 02 F6 | 	mov	arg01, result1
0cdf8     01 14 06 F6 | 	mov	arg02, #1
0cdfc     C0 6A B1 FD | 	call	#__system___float_tointeger
0ce00     0F FB 51 FC | 	wrword	result1, local01
0ce04     37 00 00 FF 
0ce08     10 E4 05 F1 | 	add	objptr, ##28176
0ce0c     F2 12 02 FB | 	rdlong	arg01, objptr
0ce10     37 00 00 FF 
0ce14     10 E4 85 F1 | 	sub	objptr, ##28176
0ce18     0C 4E 05 F1 | 	add	fp, #12
0ce1c     A7 24 02 FB | 	rdlong	local04, fp
0ce20     0C 4E 85 F1 | 	sub	fp, #12
0ce24     06 24 66 F0 | 	shl	local04, #6
0ce28     12 13 02 F1 | 	add	arg01, local04
0ce2c     1A 12 06 F1 | 	add	arg01, #26
0ce30     09 01 5A FC | 	wrword	#256, arg01
0ce34                 | LR__1153
0ce34     A7 F0 03 F6 | 	mov	ptra, fp
0ce38     B2 00 A0 FD | 	call	#popregs_
0ce3c                 | _do_changefreq_ret
0ce3c     2D 00 64 FD | 	ret
0ce40                 | 
0ce40                 | ' 
0ce40                 | ' '-------------------- changepan
0ce40                 | ' 
0ce40                 | ' sub do_changepan
0ce40                 | _do_changepan
0ce40     01 4A 05 F6 | 	mov	COUNT_, #1
0ce44     A8 00 A0 FD | 	call	#pushregs_
0ce48     14 F0 07 F1 | 	add	ptra, #20
0ce4c     6C E5 BF FD | 	call	#_pop
0ce50     A7 FA 61 FC | 	wrlong	result1, fp
0ce54     04 4E 05 F1 | 	add	fp, #4
0ce58     A7 FC 61 FC | 	wrlong	result2, fp
0ce5c     04 4E 05 F1 | 	add	fp, #4
0ce60     A7 FE 61 FC | 	wrlong	result3, fp
0ce64     08 4E 85 F1 | 	sub	fp, #8
0ce68     00 00 23 FF 
0ce6c     00 1E 06 F6 | 	mov	local01, ##1174405120
0ce70     A7 12 02 F6 | 	mov	arg01, fp
0ce74     E4 E7 BF FD | 	call	#_converttofloat
0ce78     FD 14 02 F6 | 	mov	arg02, result1
0ce7c     0F 13 02 F6 | 	mov	arg01, local01
0ce80     74 65 B1 FD | 	call	#__system___float_mul
0ce84     FD 12 02 F6 | 	mov	arg01, result1
0ce88     01 14 06 F6 | 	mov	arg02, #1
0ce8c     30 6A B1 FD | 	call	#__system___float_tointeger
0ce90     0D 1E C6 F9 | 	decod	local01, #13
0ce94     FD 1E 02 F1 | 	add	local01, result1
0ce98     10 4E 05 F1 | 	add	fp, #16
0ce9c     A7 1E 62 FC | 	wrlong	local01, fp
0cea0                 | ' 
0cea0                 | ' t1=pop()
0cea0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0cea0                 | ' if pan<0 then pan=0
0cea0     10 4E 85 F1 | 	sub	fp, #16
0cea4     00 1E 56 F2 | 	cmps	local01, #0 wc
0cea8     10 4E 05 C1 |  if_b	add	fp, #16
0ceac     A7 00 68 CC |  if_b	wrlong	#0, fp
0ceb0     10 4E 85 C1 |  if_b	sub	fp, #16
0ceb4                 | ' if pan>16384 then pan=16384
0ceb4     10 4E 05 F1 | 	add	fp, #16
0ceb8     A7 1E 02 FB | 	rdlong	local01, fp
0cebc     10 4E 85 F1 | 	sub	fp, #16
0cec0     20 00 00 FF 
0cec4     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0cec8     10 4E 05 31 |  if_ae	add	fp, #16
0cecc     20 00 80 3F 
0ced0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ced4     10 4E 85 31 |  if_ae	sub	fp, #16
0ced8     E0 E4 BF FD | 	call	#_pop
0cedc     FF 1E 02 F6 | 	mov	local01, result3
0cee0     A7 FA 61 FC | 	wrlong	result1, fp
0cee4     04 4E 05 F1 | 	add	fp, #4
0cee8     A7 FC 61 FC | 	wrlong	result2, fp
0ceec     04 4E 05 F1 | 	add	fp, #4
0cef0     A7 1E 62 FC | 	wrlong	local01, fp
0cef4     08 4E 85 F1 | 	sub	fp, #8
0cef8     A7 12 02 F6 | 	mov	arg01, fp
0cefc     A0 E6 BF FD | 	call	#_converttoint
0cf00     FD 1E 52 F6 | 	abs	local01, result1 wc
0cf04     07 1E 06 F5 | 	and	local01, #7
0cf08     0F 1F 82 F6 | 	negc	local01, local01
0cf0c     0C 4E 05 F1 | 	add	fp, #12
0cf10     A7 1E 62 FC | 	wrlong	local01, fp
0cf14     37 00 00 FF 
0cf18     10 E4 05 F1 | 	add	objptr, ##28176
0cf1c     F2 12 02 FB | 	rdlong	arg01, objptr
0cf20     37 00 00 FF 
0cf24     10 E4 85 F1 | 	sub	objptr, ##28176
0cf28     06 1E 66 F0 | 	shl	local01, #6
0cf2c     0F 13 02 F1 | 	add	arg01, local01
0cf30     16 12 06 F1 | 	add	arg01, #22
0cf34     04 4E 05 F1 | 	add	fp, #4
0cf38     A7 14 02 FB | 	rdlong	arg02, fp
0cf3c     10 4E 85 F1 | 	sub	fp, #16
0cf40     09 15 52 FC | 	wrword	arg02, arg01
0cf44     A7 F0 03 F6 | 	mov	ptra, fp
0cf48     B2 00 A0 FD | 	call	#popregs_
0cf4c                 | _do_changepan_ret
0cf4c     2D 00 64 FD | 	ret
0cf50                 | 
0cf50                 | ' 
0cf50                 | ' '-------------------- changevol
0cf50                 | ' 
0cf50                 | ' sub do_changevol
0cf50                 | _do_changevol
0cf50     00 4A 05 F6 | 	mov	COUNT_, #0
0cf54     A8 00 A0 FD | 	call	#pushregs_
0cf58     14 F0 07 F1 | 	add	ptra, #20
0cf5c     5C E4 BF FD | 	call	#_pop
0cf60     FF 14 02 F6 | 	mov	arg02, result3
0cf64     A7 FA 61 FC | 	wrlong	result1, fp
0cf68     04 4E 05 F1 | 	add	fp, #4
0cf6c     A7 FC 61 FC | 	wrlong	result2, fp
0cf70     04 4E 05 F1 | 	add	fp, #4
0cf74     A7 14 62 FC | 	wrlong	arg02, fp
0cf78     08 4E 85 F1 | 	sub	fp, #8
0cf7c     A7 12 02 F6 | 	mov	arg01, fp
0cf80     D8 E6 BF FD | 	call	#_converttofloat
0cf84     FD 12 02 F6 | 	mov	arg01, result1
0cf88     00 3D 22 FF 
0cf8c     00 14 06 F6 | 	mov	arg02, ##1148846080
0cf90     64 64 B1 FD | 	call	#__system___float_mul
0cf94     FD 12 02 F6 | 	mov	arg01, result1
0cf98     01 14 06 F6 | 	mov	arg02, #1
0cf9c     20 69 B1 FD | 	call	#__system___float_tointeger
0cfa0     FD 14 52 F6 | 	abs	arg02, result1 wc
0cfa4     0D 14 46 F7 | 	zerox	arg02, #13
0cfa8     0A 15 82 F6 | 	negc	arg02, arg02
0cfac     10 4E 05 F1 | 	add	fp, #16
0cfb0     A7 14 62 FC | 	wrlong	arg02, fp
0cfb4     10 4E 85 F1 | 	sub	fp, #16
0cfb8     00 E4 BF FD | 	call	#_pop
0cfbc     FF 14 02 F6 | 	mov	arg02, result3
0cfc0     A7 FA 61 FC | 	wrlong	result1, fp
0cfc4     04 4E 05 F1 | 	add	fp, #4
0cfc8     A7 FC 61 FC | 	wrlong	result2, fp
0cfcc     04 4E 05 F1 | 	add	fp, #4
0cfd0     A7 14 62 FC | 	wrlong	arg02, fp
0cfd4     08 4E 85 F1 | 	sub	fp, #8
0cfd8     A7 12 02 F6 | 	mov	arg01, fp
0cfdc     C0 E5 BF FD | 	call	#_converttoint
0cfe0     FD 14 52 F6 | 	abs	arg02, result1 wc
0cfe4     07 14 06 F5 | 	and	arg02, #7
0cfe8     0A 15 82 F6 | 	negc	arg02, arg02
0cfec     0C 4E 05 F1 | 	add	fp, #12
0cff0     A7 14 62 FC | 	wrlong	arg02, fp
0cff4     37 00 00 FF 
0cff8     10 E4 05 F1 | 	add	objptr, ##28176
0cffc     F2 12 02 FB | 	rdlong	arg01, objptr
0d000     37 00 00 FF 
0d004     10 E4 85 F1 | 	sub	objptr, ##28176
0d008     06 14 66 F0 | 	shl	arg02, #6
0d00c     0A 13 02 F1 | 	add	arg01, arg02
0d010     14 12 06 F1 | 	add	arg01, #20
0d014     04 4E 05 F1 | 	add	fp, #4
0d018     A7 14 02 FB | 	rdlong	arg02, fp
0d01c     10 4E 85 F1 | 	sub	fp, #16
0d020     09 15 52 FC | 	wrword	arg02, arg01
0d024     A7 F0 03 F6 | 	mov	ptra, fp
0d028     B2 00 A0 FD | 	call	#popregs_
0d02c                 | _do_changevol_ret
0d02c     2D 00 64 FD | 	ret
0d030                 | 
0d030                 | ' 
0d030                 | ' '-------------------- changewav
0d030                 | ' 
0d030                 | ' sub do_changewav
0d030                 | _do_changewav
0d030     00 4A 05 F6 | 	mov	COUNT_, #0
0d034     A8 00 A0 FD | 	call	#pushregs_
0d038     14 F0 07 F1 | 	add	ptra, #20
0d03c     7C E3 BF FD | 	call	#_pop
0d040     FF 14 02 F6 | 	mov	arg02, result3
0d044     A7 FA 61 FC | 	wrlong	result1, fp
0d048     04 4E 05 F1 | 	add	fp, #4
0d04c     A7 FC 61 FC | 	wrlong	result2, fp
0d050     04 4E 05 F1 | 	add	fp, #4
0d054     A7 14 62 FC | 	wrlong	arg02, fp
0d058     08 4E 85 F1 | 	sub	fp, #8
0d05c     A7 12 02 F6 | 	mov	arg01, fp
0d060     3C E5 BF FD | 	call	#_converttoint
0d064     10 4E 05 F1 | 	add	fp, #16
0d068     A7 FA 61 FC | 	wrlong	result1, fp
0d06c                 | ' 
0d06c                 | ' t1=pop()
0d06c                 | ' wave=converttoint(t1)
0d06c                 | ' if wave<0 then wave=0
0d06c     FD 14 02 F6 | 	mov	arg02, result1
0d070     10 4E 85 F1 | 	sub	fp, #16
0d074     00 14 56 F2 | 	cmps	arg02, #0 wc
0d078     10 4E 05 C1 |  if_b	add	fp, #16
0d07c     A7 00 68 CC |  if_b	wrlong	#0, fp
0d080     10 4E 85 C1 |  if_b	sub	fp, #16
0d084     34 E3 BF FD | 	call	#_pop
0d088     FF 14 02 F6 | 	mov	arg02, result3
0d08c     A7 FA 61 FC | 	wrlong	result1, fp
0d090     04 4E 05 F1 | 	add	fp, #4
0d094     A7 FC 61 FC | 	wrlong	result2, fp
0d098     04 4E 05 F1 | 	add	fp, #4
0d09c     A7 14 62 FC | 	wrlong	arg02, fp
0d0a0     08 4E 85 F1 | 	sub	fp, #8
0d0a4     A7 12 02 F6 | 	mov	arg01, fp
0d0a8     F4 E4 BF FD | 	call	#_converttoint
0d0ac     FD 14 52 F6 | 	abs	arg02, result1 wc
0d0b0     07 14 06 F5 | 	and	arg02, #7
0d0b4     0A 15 82 F6 | 	negc	arg02, arg02
0d0b8     0C 4E 05 F1 | 	add	fp, #12
0d0bc     A7 14 62 FC | 	wrlong	arg02, fp
0d0c0                 | ' if wave <32 then 
0d0c0     04 4E 05 F1 | 	add	fp, #4
0d0c4     A7 14 02 FB | 	rdlong	arg02, fp
0d0c8     10 4E 85 F1 | 	sub	fp, #16
0d0cc     20 14 56 F2 | 	cmps	arg02, #32 wc
0d0d0     48 00 90 3D |  if_ae	jmp	#LR__1160
0d0d4     37 00 00 FF 
0d0d8     10 E4 05 F1 | 	add	objptr, ##28176
0d0dc     F2 12 02 FB | 	rdlong	arg01, objptr
0d0e0     37 00 00 FF 
0d0e4     10 E4 85 F1 | 	sub	objptr, ##28176
0d0e8     0C 4E 05 F1 | 	add	fp, #12
0d0ec     A7 14 02 FB | 	rdlong	arg02, fp
0d0f0     06 14 66 F0 | 	shl	arg02, #6
0d0f4     0A 13 02 F1 | 	add	arg01, arg02
0d0f8     08 12 06 F1 | 	add	arg01, #8
0d0fc     04 4E 05 F1 | 	add	fp, #4
0d100     A7 14 02 FB | 	rdlong	arg02, fp
0d104     10 4E 85 F1 | 	sub	fp, #16
0d108     0B 14 66 F0 | 	shl	arg02, #11
0d10c     00 00 40 FF 
0d110     00 14 06 F1 | 	add	arg02, ##-2147483648
0d114     09 15 62 FC | 	wrlong	arg02, arg01
0d118     34 00 90 FD | 	jmp	#LR__1161
0d11c                 | LR__1160
0d11c     37 00 00 FF 
0d120     10 E4 05 F1 | 	add	objptr, ##28176
0d124     F2 12 02 FB | 	rdlong	arg01, objptr
0d128     37 00 00 FF 
0d12c     10 E4 85 F1 | 	sub	objptr, ##28176
0d130     0C 4E 05 F1 | 	add	fp, #12
0d134     A7 14 02 FB | 	rdlong	arg02, fp
0d138     0C 4E 85 F1 | 	sub	fp, #12
0d13c     06 14 66 F0 | 	shl	arg02, #6
0d140     0A 13 02 F1 | 	add	arg01, arg02
0d144     08 12 06 F1 | 	add	arg01, #8
0d148     00 00 C4 FF 
0d14c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0d150                 | LR__1161
0d150     A7 F0 03 F6 | 	mov	ptra, fp
0d154     B2 00 A0 FD | 	call	#popregs_
0d158                 | _do_changewav_ret
0d158     2D 00 64 FD | 	ret
0d15c                 | 
0d15c                 | ' 
0d15c                 | ' '-------------------- chr$
0d15c                 | ' 
0d15c                 | ' sub do_chr
0d15c                 | _do_chr
0d15c     01 4A 05 F6 | 	mov	COUNT_, #1
0d160     A8 00 A0 FD | 	call	#pushregs_
0d164     14 F0 07 F1 | 	add	ptra, #20
0d168     4A 00 00 FF 
0d16c     80 E4 05 F1 | 	add	objptr, ##38016
0d170     F2 1E 02 FB | 	rdlong	local01, objptr
0d174     0F 17 02 F6 | 	mov	arg03, local01
0d178     01 16 66 F0 | 	shl	arg03, #1
0d17c     0F 17 02 F1 | 	add	arg03, local01
0d180     02 16 66 F0 | 	shl	arg03, #2
0d184     03 00 00 FF 
0d188     04 E4 85 F1 | 	sub	objptr, ##1540
0d18c     F2 16 02 F1 | 	add	arg03, objptr
0d190     0B 17 02 FB | 	rdlong	arg03, arg03
0d194     0C 4E 05 F1 | 	add	fp, #12
0d198     A7 16 62 FC | 	wrlong	arg03, fp
0d19c                 | ' 
0d19c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d19c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0d19c     0C 4E 85 F1 | 	sub	fp, #12
0d1a0     02 16 16 F2 | 	cmp	arg03, #2 wc
0d1a4     47 00 00 FF 
0d1a8     7C E4 85 F1 | 	sub	objptr, ##36476
0d1ac     0C 4E 05 C1 |  if_b	add	fp, #12
0d1b0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d1b4     0C 4E 85 C1 |  if_b	sub	fp, #12
0d1b8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0d1bc     00 12 06 F6 | 	mov	arg01, #0
0d1c0     E4 90 B1 FD | 	call	#__system___getiolock_0542
0d1c4     FD 12 02 F6 | 	mov	arg01, result1
0d1c8     78 36 B1 FD | 	call	#__system___lockmem
0d1cc     83 01 00 FF 
0d1d0     8D 15 06 F6 | 	mov	arg02, ##@LR__5416
0d1d4     00 12 06 F6 | 	mov	arg01, #0
0d1d8     00 16 06 F6 | 	mov	arg03, #0
0d1dc     58 43 B1 FD | 	call	#__system___basic_print_string
0d1e0     00 12 06 F6 | 	mov	arg01, #0
0d1e4     C0 90 B1 FD | 	call	#__system___getiolock_0542
0d1e8     FD 00 68 FC | 	wrlong	#0, result1
0d1ec     27 12 06 F6 | 	mov	arg01, #39
0d1f0     C0 00 B1 FD | 	call	#_printerror
0d1f4     54 00 90 FD | 	jmp	#LR__1171
0d1f8                 | LR__1170
0d1f8     C0 E1 BF FD | 	call	#_pop
0d1fc     FF 1E 02 F6 | 	mov	local01, result3
0d200     A7 FA 61 FC | 	wrlong	result1, fp
0d204     04 4E 05 F1 | 	add	fp, #4
0d208     A7 FC 61 FC | 	wrlong	result2, fp
0d20c     04 4E 05 F1 | 	add	fp, #4
0d210     A7 1E 62 FC | 	wrlong	local01, fp
0d214     08 4E 85 F1 | 	sub	fp, #8
0d218     A7 12 02 F6 | 	mov	arg01, fp
0d21c     80 E3 BF FD | 	call	#_converttoint
0d220     10 4E 05 F1 | 	add	fp, #16
0d224     A7 FA 61 FC | 	wrlong	result1, fp
0d228     FD 12 02 F6 | 	mov	arg01, result1
0d22c     10 4E 85 F1 | 	sub	fp, #16
0d230     50 58 B1 FD | 	call	#__system__Chr_S
0d234     A7 FA 61 FC | 	wrlong	result1, fp
0d238     08 4E 05 F1 | 	add	fp, #8
0d23c     A7 3E 68 FC | 	wrlong	#31, fp
0d240     08 4E 85 F1 | 	sub	fp, #8
0d244     A7 12 02 F6 | 	mov	arg01, fp
0d248     08 E2 BF FD | 	call	#_push
0d24c                 | LR__1171
0d24c     A7 F0 03 F6 | 	mov	ptra, fp
0d250     B2 00 A0 FD | 	call	#popregs_
0d254                 | _do_chr_ret
0d254     2D 00 64 FD | 	ret
0d258                 | 
0d258                 | ' 
0d258                 | ' '-------------------- circle
0d258                 | ' 
0d258                 | ' sub do_circle
0d258                 | _do_circle
0d258     02 4A 05 F6 | 	mov	COUNT_, #2
0d25c     A8 00 A0 FD | 	call	#pushregs_
0d260     24 F0 07 F1 | 	add	ptra, #36
0d264     54 E1 BF FD | 	call	#_pop
0d268     FD 18 02 F6 | 	mov	arg04, result1
0d26c     FE 16 02 F6 | 	mov	arg03, result2
0d270     FF 14 02 F6 | 	mov	arg02, result3
0d274     18 4E 05 F1 | 	add	fp, #24
0d278     A7 18 62 FC | 	wrlong	arg04, fp
0d27c     04 4E 05 F1 | 	add	fp, #4
0d280     A7 16 62 FC | 	wrlong	arg03, fp
0d284     04 4E 05 F1 | 	add	fp, #4
0d288     A7 14 62 FC | 	wrlong	arg02, fp
0d28c     20 4E 85 F1 | 	sub	fp, #32
0d290     28 E1 BF FD | 	call	#_pop
0d294     FD 18 02 F6 | 	mov	arg04, result1
0d298     FE 16 02 F6 | 	mov	arg03, result2
0d29c     FF 1E 02 F6 | 	mov	local01, result3
0d2a0     0C 4E 05 F1 | 	add	fp, #12
0d2a4     A7 18 62 FC | 	wrlong	arg04, fp
0d2a8     04 4E 05 F1 | 	add	fp, #4
0d2ac     A7 16 62 FC | 	wrlong	arg03, fp
0d2b0     04 4E 05 F1 | 	add	fp, #4
0d2b4     A7 1E 62 FC | 	wrlong	local01, fp
0d2b8     14 4E 85 F1 | 	sub	fp, #20
0d2bc     FC E0 BF FD | 	call	#_pop
0d2c0     A7 FA 61 FC | 	wrlong	result1, fp
0d2c4     04 4E 05 F1 | 	add	fp, #4
0d2c8     A7 FC 61 FC | 	wrlong	result2, fp
0d2cc     04 4E 05 F1 | 	add	fp, #4
0d2d0     A7 FE 61 FC | 	wrlong	result3, fp
0d2d4                 | ' 
0d2d4                 | ' t3=pop()
0d2d4                 | ' t2=pop()
0d2d4                 | ' t1=pop()
0d2d4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0d2d4     FF 18 02 F6 | 	mov	arg04, result3
0d2d8     08 4E 85 F1 | 	sub	fp, #8
0d2dc     1C 18 0E F2 | 	cmp	arg04, #28 wz
0d2e0     08 4E 05 51 |  if_ne	add	fp, #8
0d2e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d2e8     08 4E 85 51 |  if_ne	sub	fp, #8
0d2ec     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0d2f0     7C 00 90 5D |  if_ne	jmp	#LR__1180
0d2f4     14 4E 05 F1 | 	add	fp, #20
0d2f8     A7 1E 02 FB | 	rdlong	local01, fp
0d2fc     14 4E 85 F1 | 	sub	fp, #20
0d300     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d304     14 4E 05 51 |  if_ne	add	fp, #20
0d308     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d30c     14 4E 85 51 |  if_ne	sub	fp, #20
0d310     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d314     58 00 90 5D |  if_ne	jmp	#LR__1180
0d318     20 4E 05 F1 | 	add	fp, #32
0d31c     A7 1E 02 FB | 	rdlong	local01, fp
0d320     20 4E 85 F1 | 	sub	fp, #32
0d324     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d328     20 4E 05 51 |  if_ne	add	fp, #32
0d32c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0d330     20 4E 85 51 |  if_ne	sub	fp, #32
0d334     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0d338     34 00 90 5D |  if_ne	jmp	#LR__1180
0d33c     A7 12 02 FB | 	rdlong	arg01, fp
0d340     0C 4E 05 F1 | 	add	fp, #12
0d344     A7 14 02 FB | 	rdlong	arg02, fp
0d348     0C 4E 05 F1 | 	add	fp, #12
0d34c     A7 16 02 FB | 	rdlong	arg03, fp
0d350     18 4E 85 F1 | 	sub	fp, #24
0d354     37 00 00 FF 
0d358     28 E4 05 F1 | 	add	objptr, ##28200
0d35c     F2 18 02 FB | 	rdlong	arg04, objptr
0d360     37 00 00 FF 
0d364     28 E4 85 F1 | 	sub	objptr, ##28200
0d368     68 17 B1 FD | 	call	#_hg010b_spin2_circle
0d36c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0d36c     54 00 90 FD | 	jmp	#LR__1181
0d370                 | LR__1180
0d370     A7 12 02 F6 | 	mov	arg01, fp
0d374     28 E2 BF FD | 	call	#_converttoint
0d378     FD 1E 02 F6 | 	mov	local01, result1
0d37c     0C 4E 05 F1 | 	add	fp, #12
0d380     A7 12 02 F6 | 	mov	arg01, fp
0d384     0C 4E 85 F1 | 	sub	fp, #12
0d388     14 E2 BF FD | 	call	#_converttoint
0d38c     FD 20 02 F6 | 	mov	local02, result1
0d390     18 4E 05 F1 | 	add	fp, #24
0d394     A7 12 02 F6 | 	mov	arg01, fp
0d398     18 4E 85 F1 | 	sub	fp, #24
0d39c     00 E2 BF FD | 	call	#_converttoint
0d3a0     FD 16 02 F6 | 	mov	arg03, result1
0d3a4     37 00 00 FF 
0d3a8     28 E4 05 F1 | 	add	objptr, ##28200
0d3ac     F2 18 02 FB | 	rdlong	arg04, objptr
0d3b0     37 00 00 FF 
0d3b4     28 E4 85 F1 | 	sub	objptr, ##28200
0d3b8     0F 13 02 F6 | 	mov	arg01, local01
0d3bc     10 15 02 F6 | 	mov	arg02, local02
0d3c0     10 17 B1 FD | 	call	#_hg010b_spin2_circle
0d3c4                 | LR__1181
0d3c4     A7 F0 03 F6 | 	mov	ptra, fp
0d3c8     B2 00 A0 FD | 	call	#popregs_
0d3cc                 | _do_circle_ret
0d3cc     2D 00 64 FD | 	ret
0d3d0                 | 
0d3d0                 | ' 
0d3d0                 | ' '-------------------- click
0d3d0                 | ' 
0d3d0                 | ' sub do_click
0d3d0                 | _do_click
0d3d0     E8 DF BF FD | 	call	#_pop
0d3d4     00 FA 4D F2 | 	cmps	result1, #0 wz
0d3d8                 | ' 
0d3d8                 | ' t1=pop()
0d3d8                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0d3d8     50 00 00 AF 
0d3dc     14 E5 05 A1 |  if_e	add	objptr, ##41236
0d3e0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0d3e4     50 00 00 FF 
0d3e8     14 E5 C5 F3 | 	sumz	objptr, ##41236
0d3ec     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0d3f0     50 00 00 5F 
0d3f4     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0d3f8                 | _do_click_ret
0d3f8     2D 00 64 FD | 	ret
0d3fc                 | 
0d3fc                 | ' 
0d3fc                 | ' '-------------------- close
0d3fc                 | ' 
0d3fc                 | ' sub do_close
0d3fc                 | _do_close
0d3fc     03 4A 05 F6 | 	mov	COUNT_, #3
0d400     A8 00 A0 FD | 	call	#pushregs_
0d404     B4 DF BF FD | 	call	#_pop
0d408     FD 1E 02 F6 | 	mov	local01, result1
0d40c     FF 16 02 F6 | 	mov	arg03, result3
0d410     FE 20 02 F6 | 	mov	local02, result2
0d414     0B 23 02 F6 | 	mov	local03, arg03
0d418                 | ' 
0d418                 | ' numpar=compiledline(lineptr_e).result.uresult
0d418                 | ' t1=pop()
0d418                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0d418     2C 22 0E F2 | 	cmp	local03, #44 wz
0d41c     44 00 90 AD |  if_e	jmp	#LR__1190
0d420     00 12 06 F6 | 	mov	arg01, #0
0d424     80 8E B1 FD | 	call	#__system___getiolock_0542
0d428     FD 12 02 F6 | 	mov	arg01, result1
0d42c     14 34 B1 FD | 	call	#__system___lockmem
0d430     83 01 00 FF 
0d434     94 15 06 F6 | 	mov	arg02, ##@LR__5417
0d438     00 12 06 F6 | 	mov	arg01, #0
0d43c     00 16 06 F6 | 	mov	arg03, #0
0d440     F4 40 B1 FD | 	call	#__system___basic_print_string
0d444     00 12 06 F6 | 	mov	arg01, #0
0d448     0A 14 06 F6 | 	mov	arg02, #10
0d44c     00 16 06 F6 | 	mov	arg03, #0
0d450     8C 40 B1 FD | 	call	#__system___basic_print_char
0d454     00 12 06 F6 | 	mov	arg01, #0
0d458     4C 8E B1 FD | 	call	#__system___getiolock_0542
0d45c     FD 00 68 FC | 	wrlong	#0, result1
0d460     08 00 90 FD | 	jmp	#LR__1191
0d464                 | LR__1190
0d464                 | ' channel  = t1.result.iresult
0d464                 | ' close #channel
0d464     0F 13 02 F6 | 	mov	arg01, local01
0d468     6C 84 B1 FD | 	call	#__system__close
0d46c                 | LR__1191
0d46c     A7 F0 03 F6 | 	mov	ptra, fp
0d470     B2 00 A0 FD | 	call	#popregs_
0d474                 | _do_close_ret
0d474     2D 00 64 FD | 	ret
0d478                 | 
0d478                 | ' 
0d478                 | ' '-------------------- cls
0d478                 | ' 
0d478                 | ' sub do_cls
0d478                 | _do_cls
0d478     37 00 00 FF 
0d47c     3C E4 05 F1 | 	add	objptr, ##28220
0d480     F2 12 02 FB | 	rdlong	arg01, objptr
0d484     04 E4 85 F1 | 	sub	objptr, #4
0d488     F2 14 02 FB | 	rdlong	arg02, objptr
0d48c     37 00 00 FF 
0d490     38 E4 85 F1 | 	sub	objptr, ##28216
0d494     D0 1A B1 FD | 	call	#_hg010b_spin2_cls
0d498     37 00 00 FF 
0d49c     3C E4 05 F1 | 	add	objptr, ##28220
0d4a0     F2 14 02 FB | 	rdlong	arg02, objptr
0d4a4     14 E4 85 F1 | 	sub	objptr, #20
0d4a8     F2 14 62 FC | 	wrlong	arg02, objptr
0d4ac     37 00 00 FF 
0d4b0     28 E4 85 F1 | 	sub	objptr, ##28200
0d4b4                 | _do_cls_ret
0d4b4     2D 00 64 FD | 	ret
0d4b8                 | 
0d4b8                 | ' 
0d4b8                 | ' '-------------------- color
0d4b8                 | ' 
0d4b8                 | ' sub do_color
0d4b8                 | _do_color
0d4b8     03 4A 05 F6 | 	mov	COUNT_, #3
0d4bc     A8 00 A0 FD | 	call	#pushregs_
0d4c0     F8 DE BF FD | 	call	#_pop
0d4c4     FD 1E 02 F6 | 	mov	local01, result1
0d4c8     FE 20 02 F6 | 	mov	local02, result2
0d4cc     FF 22 02 F6 | 	mov	local03, result3
0d4d0     37 00 00 FF 
0d4d4     28 E4 05 F1 | 	add	objptr, ##28200
0d4d8     F2 1E 62 FC | 	wrlong	local01, objptr
0d4dc     37 00 00 FF 
0d4e0     28 E4 85 F1 | 	sub	objptr, ##28200
0d4e4     A7 F0 03 F6 | 	mov	ptra, fp
0d4e8     B2 00 A0 FD | 	call	#popregs_
0d4ec                 | _do_color_ret
0d4ec     2D 00 64 FD | 	ret
0d4f0                 | 
0d4f0                 | ' 
0d4f0                 | ' '-------------------- cos
0d4f0                 | ' 
0d4f0                 | ' sub do_cos
0d4f0                 | _do_cos
0d4f0     01 4A 05 F6 | 	mov	COUNT_, #1
0d4f4     A8 00 A0 FD | 	call	#pushregs_
0d4f8     10 F0 07 F1 | 	add	ptra, #16
0d4fc     4A 00 00 FF 
0d500     80 E4 05 F1 | 	add	objptr, ##38016
0d504     F2 1E 02 FB | 	rdlong	local01, objptr
0d508     0F 17 02 F6 | 	mov	arg03, local01
0d50c     01 16 66 F0 | 	shl	arg03, #1
0d510     0F 17 02 F1 | 	add	arg03, local01
0d514     02 16 66 F0 | 	shl	arg03, #2
0d518     03 00 00 FF 
0d51c     04 E4 85 F1 | 	sub	objptr, ##1540
0d520     F2 16 02 F1 | 	add	arg03, objptr
0d524     0B 17 02 FB | 	rdlong	arg03, arg03
0d528     0C 4E 05 F1 | 	add	fp, #12
0d52c     A7 16 62 FC | 	wrlong	arg03, fp
0d530                 | ' 
0d530                 | ' numpar=compiledline(lineptr_e).result.uresult
0d530                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0d530     0C 4E 85 F1 | 	sub	fp, #12
0d534     02 16 16 F2 | 	cmp	arg03, #2 wc
0d538     47 00 00 FF 
0d53c     7C E4 85 F1 | 	sub	objptr, ##36476
0d540     0C 4E 05 C1 |  if_b	add	fp, #12
0d544     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d548     0C 4E 85 C1 |  if_b	sub	fp, #12
0d54c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0d550     00 12 06 F6 | 	mov	arg01, #0
0d554     50 8D B1 FD | 	call	#__system___getiolock_0542
0d558     FD 12 02 F6 | 	mov	arg01, result1
0d55c     E4 32 B1 FD | 	call	#__system___lockmem
0d560     83 01 00 FF 
0d564     A6 15 06 F6 | 	mov	arg02, ##@LR__5418
0d568     00 12 06 F6 | 	mov	arg01, #0
0d56c     00 16 06 F6 | 	mov	arg03, #0
0d570     C4 3F B1 FD | 	call	#__system___basic_print_string
0d574     00 12 06 F6 | 	mov	arg01, #0
0d578     2C 8D B1 FD | 	call	#__system___getiolock_0542
0d57c     FD 00 68 FC | 	wrlong	#0, result1
0d580     27 12 06 F6 | 	mov	arg01, #39
0d584     2C FD B0 FD | 	call	#_printerror
0d588     78 00 90 FD | 	jmp	#LR__1201
0d58c                 | LR__1200
0d58c     2C DE BF FD | 	call	#_pop
0d590     A7 FA 61 FC | 	wrlong	result1, fp
0d594     04 4E 05 F1 | 	add	fp, #4
0d598     A7 FC 61 FC | 	wrlong	result2, fp
0d59c     04 4E 05 F1 | 	add	fp, #4
0d5a0     A7 FE 61 FC | 	wrlong	result3, fp
0d5a4     08 4E 85 F1 | 	sub	fp, #8
0d5a8     51 00 00 FF 
0d5ac     BC E5 05 F1 | 	add	objptr, ##41916
0d5b0     F2 1E 02 FB | 	rdlong	local01, objptr
0d5b4     51 00 00 FF 
0d5b8     BC E5 85 F1 | 	sub	objptr, ##41916
0d5bc     A7 12 02 F6 | 	mov	arg01, fp
0d5c0     98 E0 BF FD | 	call	#_converttofloat
0d5c4     FD 14 02 F6 | 	mov	arg02, result1
0d5c8     0F 13 02 F6 | 	mov	arg01, local01
0d5cc     28 5E B1 FD | 	call	#__system___float_mul
0d5d0     FD 14 02 F6 | 	mov	arg02, result1
0d5d4     87 E4 1F FF 
0d5d8     DB 13 06 F6 | 	mov	arg01, ##1070141403
0d5dc     1F 14 E6 F4 | 	bitnot	arg02, #31
0d5e0     44 5A B1 FD | 	call	#__system___float_add
0d5e4     FD 12 02 F6 | 	mov	arg01, result1
0d5e8     6C 67 B1 FD | 	call	#__system____builtin_sinf
0d5ec     A7 FA 61 FC | 	wrlong	result1, fp
0d5f0     08 4E 05 F1 | 	add	fp, #8
0d5f4     A7 3C 68 FC | 	wrlong	#30, fp
0d5f8     08 4E 85 F1 | 	sub	fp, #8
0d5fc     A7 12 02 F6 | 	mov	arg01, fp
0d600     50 DE BF FD | 	call	#_push
0d604                 | LR__1201
0d604     A7 F0 03 F6 | 	mov	ptra, fp
0d608     B2 00 A0 FD | 	call	#popregs_
0d60c                 | _do_cos_ret
0d60c     2D 00 64 FD | 	ret
0d610                 | 
0d610                 | ' 
0d610                 | ' '-------------------- cursor
0d610                 | ' 
0d610                 | ' sub do_cursor
0d610                 | _do_cursor
0d610     A8 DD BF FD | 	call	#_pop
0d614     00 FA 4D F2 | 	cmps	result1, #0 wz
0d618                 | ' t1=pop()
0d618                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0d618     14 00 90 5D |  if_ne	jmp	#LR__1210
0d61c     11 12 06 F6 | 	mov	arg01, #17
0d620     00 14 06 F6 | 	mov	arg02, #0
0d624     00 16 06 F6 | 	mov	arg03, #0
0d628     1C 0C B1 FD | 	call	#_hg010b_spin2_setspritesize
0d62c     10 00 90 FD | 	jmp	#LR__1211
0d630                 | LR__1210
0d630     11 12 06 F6 | 	mov	arg01, #17
0d634     08 14 06 F6 | 	mov	arg02, #8
0d638     10 16 06 F6 | 	mov	arg03, #16
0d63c     08 0C B1 FD | 	call	#_hg010b_spin2_setspritesize
0d640                 | LR__1211
0d640                 | _do_cursor_ret
0d640     2D 00 64 FD | 	ret
0d644                 | 
0d644                 | ' 
0d644                 | ' '-------------------- defenv
0d644                 | ' 
0d644                 | ' sub do_defenv
0d644                 | _do_defenv
0d644     08 4A 05 F6 | 	mov	COUNT_, #8
0d648     A8 00 A0 FD | 	call	#pushregs_
0d64c     58 F0 07 F1 | 	add	ptra, #88
0d650     4A 00 00 FF 
0d654     80 E4 05 F1 | 	add	objptr, ##38016
0d658     F2 1E 02 FB | 	rdlong	local01, objptr
0d65c     0F 1B 02 F6 | 	mov	arg05, local01
0d660     01 1A 66 F0 | 	shl	arg05, #1
0d664     0F 1B 02 F1 | 	add	arg05, local01
0d668     02 1A 66 F0 | 	shl	arg05, #2
0d66c     03 00 00 FF 
0d670     04 E4 85 F1 | 	sub	objptr, ##1540
0d674     F2 1A 02 F1 | 	add	arg05, objptr
0d678     0D 1B 02 FB | 	rdlong	arg05, arg05
0d67c     10 4E 05 F1 | 	add	fp, #16
0d680     A7 1A 62 FC | 	wrlong	arg05, fp
0d684                 | ' 
0d684                 | ' numpar=compiledline(lineptr_e).result.uresult
0d684                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0d684     10 4E 85 F1 | 	sub	fp, #16
0d688     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d68c     47 00 00 FF 
0d690     7C E4 85 F1 | 	sub	objptr, ##36476
0d694     10 4E 05 51 |  if_ne	add	fp, #16
0d698     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d69c     10 4E 85 51 |  if_ne	sub	fp, #16
0d6a0     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d6a4     8C 0A 90 5D |  if_ne	jmp	#LR__1241
0d6a8                 | ' 
0d6a8                 | ' if numpar=2 then						' env from .h2 or from a pointer
0d6a8     10 4E 05 F1 | 	add	fp, #16
0d6ac     A7 1E 02 FB | 	rdlong	local01, fp
0d6b0     10 4E 85 F1 | 	sub	fp, #16
0d6b4     02 1E 0E F2 | 	cmp	local01, #2 wz
0d6b8     24 04 90 5D |  if_ne	jmp	#LR__1233
0d6bc     FC DC BF FD | 	call	#_pop
0d6c0     FF 1A 02 F6 | 	mov	arg05, result3
0d6c4     40 4E 05 F1 | 	add	fp, #64
0d6c8     A7 FA 61 FC | 	wrlong	result1, fp
0d6cc     04 4E 05 F1 | 	add	fp, #4
0d6d0     A7 FC 61 FC | 	wrlong	result2, fp
0d6d4     04 4E 05 F1 | 	add	fp, #4
0d6d8     A7 1A 62 FC | 	wrlong	arg05, fp
0d6dc                 | '   t1=pop()
0d6dc                 | '   if t1.result_type=result_string2 then 
0d6dc     48 4E 85 F1 | 	sub	fp, #72
0d6e0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d6e4     20 00 90 5D |  if_ne	jmp	#LR__1220
0d6e8     40 4E 05 F1 | 	add	fp, #64
0d6ec     A7 12 02 FB | 	rdlong	arg01, fp
0d6f0     40 4E 85 F1 | 	sub	fp, #64
0d6f4     3C DE BF FD | 	call	#_convertstring
0d6f8     4C 4E 05 F1 | 	add	fp, #76
0d6fc     A7 FA 61 FC | 	wrlong	result1, fp
0d700     4C 4E 85 F1 | 	sub	fp, #76
0d704     58 00 90 FD | 	jmp	#LR__1223
0d708                 | LR__1220
0d708     48 4E 05 F1 | 	add	fp, #72
0d70c     A7 1E 02 FB | 	rdlong	local01, fp
0d710     48 4E 85 F1 | 	sub	fp, #72
0d714     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d718     18 00 90 5D |  if_ne	jmp	#LR__1221
0d71c     40 4E 05 F1 | 	add	fp, #64
0d720     A7 1E 02 FB | 	rdlong	local01, fp
0d724     0C 4E 05 F1 | 	add	fp, #12
0d728     A7 1E 62 FC | 	wrlong	local01, fp
0d72c     4C 4E 85 F1 | 	sub	fp, #76
0d730     2C 00 90 FD | 	jmp	#LR__1222
0d734                 | LR__1221
0d734     83 01 00 FF 
0d738     AC 1F 06 F6 | 	mov	local01, ##@LR__5419
0d73c     4C 4E 05 F1 | 	add	fp, #76
0d740     A7 1E 62 FC | 	wrlong	local01, fp
0d744     0C 4E 85 F1 | 	sub	fp, #12
0d748     A7 12 02 F6 | 	mov	arg01, fp
0d74c     40 4E 85 F1 | 	sub	fp, #64
0d750     4C DE BF FD | 	call	#_converttoint
0d754     1C 4E 05 F1 | 	add	fp, #28
0d758     A7 FA 61 FC | 	wrlong	result1, fp
0d75c     1C 4E 85 F1 | 	sub	fp, #28
0d760                 | LR__1222
0d760                 | LR__1223
0d760                 | '   if s1<>"" then 
0d760     4C 4E 05 F1 | 	add	fp, #76
0d764     A7 12 02 FB | 	rdlong	arg01, fp
0d768     4C 4E 85 F1 | 	sub	fp, #76
0d76c     83 01 00 FF 
0d770     AD 15 06 F6 | 	mov	arg02, ##@LR__5420
0d774     F4 30 B1 FD | 	call	#__system___string_cmp
0d778     00 FA 0D F2 | 	cmp	result1, #0 wz
0d77c     24 02 90 AD |  if_e	jmp	#LR__1227
0d780     38 DC BF FD | 	call	#_pop
0d784     FF 1E 02 F6 | 	mov	local01, result3
0d788     40 4E 05 F1 | 	add	fp, #64
0d78c     A7 FA 61 FC | 	wrlong	result1, fp
0d790     04 4E 05 F1 | 	add	fp, #4
0d794     A7 FC 61 FC | 	wrlong	result2, fp
0d798     04 4E 05 F1 | 	add	fp, #4
0d79c     A7 1E 62 FC | 	wrlong	local01, fp
0d7a0     08 4E 85 F1 | 	sub	fp, #8
0d7a4     A7 12 02 F6 | 	mov	arg01, fp
0d7a8     40 4E 85 F1 | 	sub	fp, #64
0d7ac     F0 DD BF FD | 	call	#_converttoint
0d7b0     18 4E 05 F1 | 	add	fp, #24
0d7b4     A7 FA 61 FC | 	wrlong	result1, fp
0d7b8     18 4E 85 F1 | 	sub	fp, #24
0d7bc                 | '     t1=pop()
0d7bc                 | '     channel=converttoint(t1) 
0d7bc                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d7bc     09 12 06 F6 | 	mov	arg01, #9
0d7c0     14 81 B1 FD | 	call	#__system__close
0d7c4     09 1E 06 F6 | 	mov	local01, #9
0d7c8     83 01 00 FF 
0d7cc     AE 13 06 F6 | 	mov	arg01, ##@LR__5421
0d7d0     4C 4E 05 F1 | 	add	fp, #76
0d7d4     A7 14 02 FB | 	rdlong	arg02, fp
0d7d8     4C 4E 85 F1 | 	sub	fp, #76
0d7dc     C0 30 B1 FD | 	call	#__system___string_concat
0d7e0     FD 14 02 F6 | 	mov	arg02, result1
0d7e4     0F 13 02 F6 | 	mov	arg01, local01
0d7e8     00 16 06 F6 | 	mov	arg03, #0
0d7ec     58 3C B1 FD | 	call	#__system___basic_open_string
0d7f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d7f4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d7f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d7fc     0C 4E 05 F1 | 	add	fp, #12
0d800     A7 FA 61 FC | 	wrlong	result1, fp
0d804                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d804     0C 4E 85 F1 | 	sub	fp, #12
0d808     A0 00 90 AD |  if_e	jmp	#LR__1224
0d80c     00 12 06 F6 | 	mov	arg01, #0
0d810     94 8A B1 FD | 	call	#__system___getiolock_0542
0d814     FD 12 02 F6 | 	mov	arg01, result1
0d818     28 30 B1 FD | 	call	#__system___lockmem
0d81c     83 01 00 FF 
0d820     BB 15 06 F6 | 	mov	arg02, ##@LR__5422
0d824     00 12 06 F6 | 	mov	arg01, #0
0d828     00 16 06 F6 | 	mov	arg03, #0
0d82c     08 3D B1 FD | 	call	#__system___basic_print_string
0d830     0C 4E 05 F1 | 	add	fp, #12
0d834     A7 14 02 FB | 	rdlong	arg02, fp
0d838     0C 4E 85 F1 | 	sub	fp, #12
0d83c     00 12 06 F6 | 	mov	arg01, #0
0d840     00 16 06 F6 | 	mov	arg03, #0
0d844     0A 18 06 F6 | 	mov	arg04, #10
0d848     30 3D B1 FD | 	call	#__system___basic_print_integer
0d84c     83 01 00 FF 
0d850     C9 15 06 F6 | 	mov	arg02, ##@LR__5423
0d854     00 12 06 F6 | 	mov	arg01, #0
0d858     00 16 06 F6 | 	mov	arg03, #0
0d85c     D8 3C B1 FD | 	call	#__system___basic_print_string
0d860     00 1E 06 F6 | 	mov	local01, #0
0d864     0C 4E 05 F1 | 	add	fp, #12
0d868     A7 12 02 FB | 	rdlong	arg01, fp
0d86c     0C 4E 85 F1 | 	sub	fp, #12
0d870     98 56 B1 FD | 	call	#__system___strerror
0d874     FD 14 02 F6 | 	mov	arg02, result1
0d878     0F 13 02 F6 | 	mov	arg01, local01
0d87c     00 16 06 F6 | 	mov	arg03, #0
0d880     B4 3C B1 FD | 	call	#__system___basic_print_string
0d884     00 12 06 F6 | 	mov	arg01, #0
0d888     0A 14 06 F6 | 	mov	arg02, #10
0d88c     00 16 06 F6 | 	mov	arg03, #0
0d890     4C 3C B1 FD | 	call	#__system___basic_print_char
0d894     00 12 06 F6 | 	mov	arg01, #0
0d898     0C 8A B1 FD | 	call	#__system___getiolock_0542
0d89c     FD 00 68 FC | 	wrlong	#0, result1
0d8a0     09 12 06 F6 | 	mov	arg01, #9
0d8a4     30 80 B1 FD | 	call	#__system__close
0d8a8     88 08 90 FD | 	jmp	#LR__1241
0d8ac                 | LR__1224
0d8ac                 | '     get #9,17,envbuf8(channel,0),256
0d8ac     18 4E 05 F1 | 	add	fp, #24
0d8b0     A7 1A 02 FB | 	rdlong	arg05, fp
0d8b4     18 4E 85 F1 | 	sub	fp, #24
0d8b8     0D 17 02 F6 | 	mov	arg03, arg05
0d8bc     09 16 66 F0 | 	shl	arg03, #9
0d8c0     0D 17 02 F1 | 	add	arg03, arg05
0d8c4     0C 00 00 FF 
0d8c8     D8 E4 05 F1 | 	add	objptr, ##6360
0d8cc     F2 16 02 F1 | 	add	arg03, objptr
0d8d0     09 12 06 F6 | 	mov	arg01, #9
0d8d4     11 14 06 F6 | 	mov	arg02, #17
0d8d8     00 19 06 F6 | 	mov	arg04, #256
0d8dc     01 1A 06 F6 | 	mov	arg05, #1
0d8e0     0C 00 00 FF 
0d8e4     D8 E4 85 F1 | 	sub	objptr, ##6360
0d8e8     C8 3D B1 FD | 	call	#__system___basic_get
0d8ec                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d8ec     14 4E 05 F1 | 	add	fp, #20
0d8f0     A7 FE 69 FC | 	wrlong	#255, fp
0d8f4     14 4E 85 F1 | 	sub	fp, #20
0d8f8     0C 00 00 FF 
0d8fc     D8 E4 05 F1 | 	add	objptr, ##6360
0d900     97 30 48 FB | 	callpa	#(@LR__1226-@LR__1225)>>2,fcache_load_ptr_
0d904                 | LR__1225
0d904     18 4E 05 F1 | 	add	fp, #24
0d908     A7 16 02 FB | 	rdlong	arg03, fp
0d90c     0B 1F 02 F6 | 	mov	local01, arg03
0d910     09 1E 66 F0 | 	shl	local01, #9
0d914     F2 1E 02 F1 | 	add	local01, objptr
0d918     04 4E 85 F1 | 	sub	fp, #4
0d91c     A7 1A 02 FB | 	rdlong	arg05, fp
0d920     0D 19 02 F6 | 	mov	arg04, arg05
0d924     01 18 66 F0 | 	shl	arg04, #1
0d928     0F 19 02 F1 | 	add	arg04, local01
0d92c     0B 1F 02 F6 | 	mov	local01, arg03
0d930     09 1E 66 F0 | 	shl	local01, #9
0d934     0B 1F 02 F1 | 	add	local01, arg03
0d938     F2 1E 02 F1 | 	add	local01, objptr
0d93c     0F 1B 02 F1 | 	add	arg05, local01
0d940     0D 1F C2 FA | 	rdbyte	local01, arg05
0d944     00 1F 06 FA | 	mul	local01, #256
0d948     0C 1F 52 FC | 	wrword	local01, arg04
0d94c     A7 1E 02 FB | 	rdlong	local01, fp
0d950     01 1E 86 F1 | 	sub	local01, #1
0d954     A7 1E 62 FC | 	wrlong	local01, fp
0d958     14 4E 85 F1 | 	sub	fp, #20
0d95c     00 1E 56 F2 | 	cmps	local01, #0 wc
0d960     A0 FF 9F 3D |  if_ae	jmp	#LR__1225
0d964                 | LR__1226
0d964     0C 00 00 FF 
0d968     D8 E4 85 F1 | 	sub	objptr, ##6360
0d96c                 | '     close #9
0d96c     09 12 06 F6 | 	mov	arg01, #9
0d970     64 7F B1 FD | 	call	#__system__close
0d974     18 4E 05 F1 | 	add	fp, #24
0d978     A7 1E 02 FB | 	rdlong	local01, fp
0d97c     18 4E 85 F1 | 	sub	fp, #24
0d980     09 1E 66 F0 | 	shl	local01, #9
0d984     0C 00 00 FF 
0d988     D8 E4 05 F1 | 	add	objptr, ##6360
0d98c     F2 1E 02 F1 | 	add	local01, objptr
0d990     FE 1F 06 F1 | 	add	local01, #510
0d994     0F 01 58 FC | 	wrword	#0, local01
0d998                 | '     envbuf(channel,255)=0                                                              
0d998                 | '     return
0d998     0C 00 00 FF 
0d99c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d9a0     90 07 90 FD | 	jmp	#LR__1241
0d9a4                 | LR__1227
0d9a4                 | '     if wptr < $80000 then 
0d9a4     1C 4E 05 F1 | 	add	fp, #28
0d9a8     A7 20 02 FB | 	rdlong	local02, fp
0d9ac     1C 4E 85 F1 | 	sub	fp, #28
0d9b0     00 04 00 FF 
0d9b4     00 20 56 F2 | 	cmps	local02, ##524288 wc
0d9b8     7C 00 90 3D |  if_ae	jmp	#LR__1230
0d9bc                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d9bc     14 4E 05 F1 | 	add	fp, #20
0d9c0     A7 00 68 FC | 	wrlong	#0, fp
0d9c4     14 4E 85 F1 | 	sub	fp, #20
0d9c8     0C 00 00 FF 
0d9cc     D8 E4 05 F1 | 	add	objptr, ##6360
0d9d0     97 2C 48 FB | 	callpa	#(@LR__1229-@LR__1228)>>2,fcache_load_ptr_
0d9d4                 | LR__1228
0d9d4     18 4E 05 F1 | 	add	fp, #24
0d9d8     A7 20 02 FB | 	rdlong	local02, fp
0d9dc     09 20 66 F0 | 	shl	local02, #9
0d9e0     F2 20 02 F1 | 	add	local02, objptr
0d9e4     04 4E 85 F1 | 	sub	fp, #4
0d9e8     A7 1E 02 FB | 	rdlong	local01, fp
0d9ec     0F 1B 02 F6 | 	mov	arg05, local01
0d9f0     01 1A 66 F0 | 	shl	arg05, #1
0d9f4     10 1B 02 F1 | 	add	arg05, local02
0d9f8     08 4E 05 F1 | 	add	fp, #8
0d9fc     A7 12 02 FB | 	rdlong	arg01, fp
0da00     01 1E 66 F0 | 	shl	local01, #1
0da04     0F 13 02 F1 | 	add	arg01, local01
0da08     09 FB E1 FA | 	rdword	result1, arg01
0da0c     0D FB 51 FC | 	wrword	result1, arg05
0da10     08 4E 85 F1 | 	sub	fp, #8
0da14     A7 20 02 FB | 	rdlong	local02, fp
0da18     01 20 06 F1 | 	add	local02, #1
0da1c     A7 20 62 FC | 	wrlong	local02, fp
0da20     14 4E 85 F1 | 	sub	fp, #20
0da24     00 21 56 F2 | 	cmps	local02, #256 wc
0da28     A8 FF 9F CD |  if_b	jmp	#LR__1228
0da2c                 | LR__1229
0da2c     0C 00 00 FF 
0da30     D8 E4 85 F1 | 	sub	objptr, ##6360
0da34     78 00 90 FD | 	jmp	#LR__1232
0da38                 | LR__1230
0da38                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0da38     14 4E 05 F1 | 	add	fp, #20
0da3c     A7 00 68 FC | 	wrlong	#0, fp
0da40     14 4E 85 F1 | 	sub	fp, #20
0da44                 | LR__1231
0da44     18 4E 05 F1 | 	add	fp, #24
0da48     A7 20 02 FB | 	rdlong	local02, fp
0da4c     09 20 66 F0 | 	shl	local02, #9
0da50     0C 00 00 FF 
0da54     D8 E4 05 F1 | 	add	objptr, ##6360
0da58     F2 20 02 F1 | 	add	local02, objptr
0da5c     04 4E 85 F1 | 	sub	fp, #4
0da60     A7 1E 02 FB | 	rdlong	local01, fp
0da64     0F 23 02 F6 | 	mov	local03, local01
0da68     01 22 66 F0 | 	shl	local03, #1
0da6c     10 23 02 F1 | 	add	local03, local02
0da70     08 4E 05 F1 | 	add	fp, #8
0da74     A7 12 02 FB | 	rdlong	arg01, fp
0da78     1C 4E 85 F1 | 	sub	fp, #28
0da7c     01 1E 66 F0 | 	shl	local01, #1
0da80     0F 13 02 F1 | 	add	arg01, local01
0da84     0C 00 00 FF 
0da88     D8 E4 85 F1 | 	sub	objptr, ##6360
0da8c     10 FB B0 FD | 	call	#_psdpeek
0da90     11 FB 51 FC | 	wrword	result1, local03
0da94     14 4E 05 F1 | 	add	fp, #20
0da98     A7 22 02 FB | 	rdlong	local03, fp
0da9c     01 22 06 F1 | 	add	local03, #1
0daa0     A7 22 62 FC | 	wrlong	local03, fp
0daa4     14 4E 85 F1 | 	sub	fp, #20
0daa8     00 23 56 F2 | 	cmps	local03, #256 wc
0daac     94 FF 9F CD |  if_b	jmp	#LR__1231
0dab0                 | LR__1232
0dab0     18 4E 05 F1 | 	add	fp, #24
0dab4     A7 22 02 FB | 	rdlong	local03, fp
0dab8     18 4E 85 F1 | 	sub	fp, #24
0dabc     09 22 66 F0 | 	shl	local03, #9
0dac0     0C 00 00 FF 
0dac4     D8 E4 05 F1 | 	add	objptr, ##6360
0dac8     F2 22 02 F1 | 	add	local03, objptr
0dacc     FE 23 06 F1 | 	add	local03, #510
0dad0     11 01 58 FC | 	wrword	#0, local03
0dad4                 | '     envbuf(channel,255)=0
0dad4                 | '     return   
0dad4     0C 00 00 FF 
0dad8     D8 E4 85 F1 | 	sub	objptr, ##6360
0dadc     54 06 90 FD | 	jmp	#LR__1241
0dae0                 | LR__1233
0dae0                 | ' 
0dae0                 | ' if numpar=5 then   						 'simple adsr
0dae0     10 4E 05 F1 | 	add	fp, #16
0dae4     A7 20 02 FB | 	rdlong	local02, fp
0dae8     10 4E 85 F1 | 	sub	fp, #16
0daec     05 20 0E F2 | 	cmp	local02, #5 wz
0daf0     14 06 90 5D |  if_ne	jmp	#LR__1240
0daf4     C4 D8 BF FD | 	call	#_pop
0daf8     FF 1E 02 F6 | 	mov	local01, result3
0dafc     40 4E 05 F1 | 	add	fp, #64
0db00     A7 FA 61 FC | 	wrlong	result1, fp
0db04     04 4E 05 F1 | 	add	fp, #4
0db08     A7 FC 61 FC | 	wrlong	result2, fp
0db0c     04 4E 05 F1 | 	add	fp, #4
0db10     A7 1E 62 FC | 	wrlong	local01, fp
0db14     08 4E 85 F1 | 	sub	fp, #8
0db18     A7 12 02 F6 | 	mov	arg01, fp
0db1c     40 4E 85 F1 | 	sub	fp, #64
0db20     38 DB BF FD | 	call	#_converttofloat
0db24     FD 20 02 F6 | 	mov	local02, result1
0db28     2C 4E 05 F1 | 	add	fp, #44
0db2c     A7 20 62 FC | 	wrlong	local02, fp
0db30     2C 4E 85 F1 | 	sub	fp, #44
0db34     84 D8 BF FD | 	call	#_pop
0db38     FF 1E 02 F6 | 	mov	local01, result3
0db3c     40 4E 05 F1 | 	add	fp, #64
0db40     A7 FA 61 FC | 	wrlong	result1, fp
0db44     04 4E 05 F1 | 	add	fp, #4
0db48     A7 FC 61 FC | 	wrlong	result2, fp
0db4c     04 4E 05 F1 | 	add	fp, #4
0db50     A7 1E 62 FC | 	wrlong	local01, fp
0db54     08 4E 85 F1 | 	sub	fp, #8
0db58     A7 12 02 F6 | 	mov	arg01, fp
0db5c     40 4E 85 F1 | 	sub	fp, #64
0db60     F8 DA BF FD | 	call	#_converttofloat
0db64     FD 20 02 F6 | 	mov	local02, result1
0db68     28 4E 05 F1 | 	add	fp, #40
0db6c     A7 20 62 FC | 	wrlong	local02, fp
0db70     28 4E 85 F1 | 	sub	fp, #40
0db74     44 D8 BF FD | 	call	#_pop
0db78     FF 1E 02 F6 | 	mov	local01, result3
0db7c     40 4E 05 F1 | 	add	fp, #64
0db80     A7 FA 61 FC | 	wrlong	result1, fp
0db84     04 4E 05 F1 | 	add	fp, #4
0db88     A7 FC 61 FC | 	wrlong	result2, fp
0db8c     04 4E 05 F1 | 	add	fp, #4
0db90     A7 1E 62 FC | 	wrlong	local01, fp
0db94     08 4E 85 F1 | 	sub	fp, #8
0db98     A7 12 02 F6 | 	mov	arg01, fp
0db9c     40 4E 85 F1 | 	sub	fp, #64
0dba0     B8 DA BF FD | 	call	#_converttofloat
0dba4     FD 20 02 F6 | 	mov	local02, result1
0dba8     24 4E 05 F1 | 	add	fp, #36
0dbac     A7 20 62 FC | 	wrlong	local02, fp
0dbb0     24 4E 85 F1 | 	sub	fp, #36
0dbb4     04 D8 BF FD | 	call	#_pop
0dbb8     FF 1E 02 F6 | 	mov	local01, result3
0dbbc     40 4E 05 F1 | 	add	fp, #64
0dbc0     A7 FA 61 FC | 	wrlong	result1, fp
0dbc4     04 4E 05 F1 | 	add	fp, #4
0dbc8     A7 FC 61 FC | 	wrlong	result2, fp
0dbcc     04 4E 05 F1 | 	add	fp, #4
0dbd0     A7 1E 62 FC | 	wrlong	local01, fp
0dbd4     08 4E 85 F1 | 	sub	fp, #8
0dbd8     A7 12 02 F6 | 	mov	arg01, fp
0dbdc     40 4E 85 F1 | 	sub	fp, #64
0dbe0     78 DA BF FD | 	call	#_converttofloat
0dbe4     FD 20 02 F6 | 	mov	local02, result1
0dbe8     20 4E 05 F1 | 	add	fp, #32
0dbec     A7 20 62 FC | 	wrlong	local02, fp
0dbf0     20 4E 85 F1 | 	sub	fp, #32
0dbf4     C4 D7 BF FD | 	call	#_pop
0dbf8     FF 1E 02 F6 | 	mov	local01, result3
0dbfc     40 4E 05 F1 | 	add	fp, #64
0dc00     A7 FA 61 FC | 	wrlong	result1, fp
0dc04     04 4E 05 F1 | 	add	fp, #4
0dc08     A7 FC 61 FC | 	wrlong	result2, fp
0dc0c     04 4E 05 F1 | 	add	fp, #4
0dc10     A7 1E 62 FC | 	wrlong	local01, fp
0dc14     08 4E 85 F1 | 	sub	fp, #8
0dc18     A7 12 02 F6 | 	mov	arg01, fp
0dc1c     40 4E 85 F1 | 	sub	fp, #64
0dc20     7C D9 BF FD | 	call	#_converttoint
0dc24     18 4E 05 F1 | 	add	fp, #24
0dc28     A7 FA 61 FC | 	wrlong	result1, fp
0dc2c                 | '   t1=pop() : rr=converttofloat(t1)
0dc2c                 | '   t1=pop() : ss=converttofloat(t1) 
0dc2c                 | '   t1=pop() : dd=converttofloat(t1)
0dc2c                 | '   t1=pop() : aa=converttofloat(t1)
0dc2c                 | '   t1=pop() : channel=converttoint(t1)
0dc2c                 | '   if ss<0.0 then ss=0.0 
0dc2c     10 4E 05 F1 | 	add	fp, #16
0dc30     A7 12 02 FB | 	rdlong	arg01, fp
0dc34     28 4E 85 F1 | 	sub	fp, #40
0dc38     00 14 06 F6 | 	mov	arg02, #0
0dc3c     01 16 06 F6 | 	mov	arg03, #1
0dc40     E8 5B B1 FD | 	call	#__system___float_cmp
0dc44     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc48     28 4E 05 C1 |  if_b	add	fp, #40
0dc4c     A7 00 68 CC |  if_b	wrlong	#0, fp
0dc50     28 4E 85 C1 |  if_b	sub	fp, #40
0dc54                 | '   if ss>1.0 then ss=1.0
0dc54     28 4E 05 F1 | 	add	fp, #40
0dc58     A7 12 02 FB | 	rdlong	arg01, fp
0dc5c     28 4E 85 F1 | 	sub	fp, #40
0dc60     00 C0 1F FF 
0dc64     00 14 06 F6 | 	mov	arg02, ##1065353216
0dc68     01 16 66 F6 | 	neg	arg03, #1
0dc6c     BC 5B B1 FD | 	call	#__system___float_cmp
0dc70     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc74     28 4E 05 31 |  if_ae	add	fp, #40
0dc78     00 C0 9F 3F 
0dc7c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0dc80     28 4E 85 31 |  if_ae	sub	fp, #40
0dc84     20 4E 05 F1 | 	add	fp, #32
0dc88     A7 12 02 FB | 	rdlong	arg01, fp
0dc8c     04 4E 05 F1 | 	add	fp, #4
0dc90     A7 14 02 FB | 	rdlong	arg02, fp
0dc94     24 4E 85 F1 | 	sub	fp, #36
0dc98     8C 53 B1 FD | 	call	#__system___float_add
0dc9c     FD 12 02 F6 | 	mov	arg01, result1
0dca0     2C 4E 05 F1 | 	add	fp, #44
0dca4     A7 14 02 FB | 	rdlong	arg02, fp
0dca8     2C 4E 85 F1 | 	sub	fp, #44
0dcac     78 53 B1 FD | 	call	#__system___float_add
0dcb0     30 4E 05 F1 | 	add	fp, #48
0dcb4     A7 FA 61 FC | 	wrlong	result1, fp
0dcb8     FD 14 02 F6 | 	mov	arg02, result1
0dcbc     30 4E 85 F1 | 	sub	fp, #48
0dcc0     00 C0 21 FF 
0dcc4     00 12 06 F6 | 	mov	arg01, ##1132462080
0dcc8     30 59 B1 FD | 	call	#__system___float_div
0dccc     34 4E 05 F1 | 	add	fp, #52
0dcd0     A7 FA 61 FC | 	wrlong	result1, fp
0dcd4     14 4E 85 F1 | 	sub	fp, #20
0dcd8     A7 12 02 FB | 	rdlong	arg01, fp
0dcdc     FD 14 02 F6 | 	mov	arg02, result1
0dce0     20 4E 85 F1 | 	sub	fp, #32
0dce4     10 57 B1 FD | 	call	#__system___float_mul
0dce8     FD 12 02 F6 | 	mov	arg01, result1
0dcec     01 14 06 F6 | 	mov	arg02, #1
0dcf0     CC 5B B1 FD | 	call	#__system___float_tointeger
0dcf4     A7 FA 61 FC | 	wrlong	result1, fp
0dcf8     24 4E 05 F1 | 	add	fp, #36
0dcfc     A7 12 02 FB | 	rdlong	arg01, fp
0dd00     10 4E 05 F1 | 	add	fp, #16
0dd04     A7 14 02 FB | 	rdlong	arg02, fp
0dd08     34 4E 85 F1 | 	sub	fp, #52
0dd0c     E8 56 B1 FD | 	call	#__system___float_mul
0dd10     FD 12 02 F6 | 	mov	arg01, result1
0dd14     01 14 06 F6 | 	mov	arg02, #1
0dd18     A4 5B B1 FD | 	call	#__system___float_tointeger
0dd1c     04 4E 05 F1 | 	add	fp, #4
0dd20     A7 FA 61 FC | 	wrlong	result1, fp
0dd24     28 4E 05 F1 | 	add	fp, #40
0dd28     A7 12 02 FB | 	rdlong	arg01, fp
0dd2c     08 4E 05 F1 | 	add	fp, #8
0dd30     A7 14 02 FB | 	rdlong	arg02, fp
0dd34     34 4E 85 F1 | 	sub	fp, #52
0dd38     BC 56 B1 FD | 	call	#__system___float_mul
0dd3c     FD 12 02 F6 | 	mov	arg01, result1
0dd40     01 14 06 F6 | 	mov	arg02, #1
0dd44     78 5B B1 FD | 	call	#__system___float_tointeger
0dd48     0C 4E 05 F1 | 	add	fp, #12
0dd4c     A7 FA 61 FC | 	wrlong	result1, fp
0dd50     0C 4E 85 F1 | 	sub	fp, #12
0dd54     F8 BF 23 FF 
0dd58     00 20 06 F6 | 	mov	local02, ##1199566848
0dd5c     A7 12 02 FB | 	rdlong	arg01, fp
0dd60     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd64     1F 24 C6 C9 |  if_b	decod	local04, #31
0dd68     00 24 06 36 |  if_ae	mov	local04, #0
0dd6c     84 52 B1 FD | 	call	#__system___float_fromuns
0dd70     12 FB 61 F5 | 	xor	result1, local04
0dd74     FD 14 02 F6 | 	mov	arg02, result1
0dd78     10 13 02 F6 | 	mov	arg01, local02
0dd7c     7C 58 B1 FD | 	call	#__system___float_div
0dd80     38 4E 05 F1 | 	add	fp, #56
0dd84     A7 FA 61 FC | 	wrlong	result1, fp
0dd88     F8 BF 23 FF 
0dd8c     00 20 06 F6 | 	mov	local02, ##1199566848
0dd90     10 4E 85 F1 | 	sub	fp, #16
0dd94     A7 14 02 FB | 	rdlong	arg02, fp
0dd98     28 4E 85 F1 | 	sub	fp, #40
0dd9c     F8 BF 23 FF 
0dda0     00 12 06 F6 | 	mov	arg01, ##1199566848
0dda4     50 56 B1 FD | 	call	#__system___float_mul
0dda8     FD 14 02 F6 | 	mov	arg02, result1
0ddac     10 13 02 F6 | 	mov	arg01, local02
0ddb0     1F 14 E6 F4 | 	bitnot	arg02, #31
0ddb4     70 52 B1 FD | 	call	#__system___float_add
0ddb8     FD 20 02 F6 | 	mov	local02, result1
0ddbc     04 4E 05 F1 | 	add	fp, #4
0ddc0     A7 12 02 FB | 	rdlong	arg01, fp
0ddc4     04 4E 85 F1 | 	sub	fp, #4
0ddc8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddcc     1F 24 C6 C9 |  if_b	decod	local04, #31
0ddd0     00 24 06 36 |  if_ae	mov	local04, #0
0ddd4     1C 52 B1 FD | 	call	#__system___float_fromuns
0ddd8     12 FB 61 F5 | 	xor	result1, local04
0dddc     FD 14 02 F6 | 	mov	arg02, result1
0dde0     10 13 02 F6 | 	mov	arg01, local02
0dde4     14 58 B1 FD | 	call	#__system___float_div
0dde8     24 4E 05 F1 | 	add	fp, #36
0ddec     A7 FA 61 FC | 	wrlong	result1, fp
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 14 02 FB | 	rdlong	arg02, fp
0ddf8     28 4E 85 F1 | 	sub	fp, #40
0ddfc     F8 BF 23 FF 
0de00     00 12 06 F6 | 	mov	arg01, ##1199566848
0de04     F0 55 B1 FD | 	call	#__system___float_mul
0de08     FD 20 02 F6 | 	mov	local02, result1
0de0c     0C 4E 05 F1 | 	add	fp, #12
0de10     A7 12 02 FB | 	rdlong	arg01, fp
0de14     0C 4E 85 F1 | 	sub	fp, #12
0de18     09 13 52 F6 | 	abs	arg01, arg01 wc
0de1c     1F 24 C6 C9 |  if_b	decod	local04, #31
0de20     00 24 06 36 |  if_ae	mov	local04, #0
0de24     CC 51 B1 FD | 	call	#__system___float_fromuns
0de28     12 FB 61 F5 | 	xor	result1, local04
0de2c     FD 14 02 F6 | 	mov	arg02, result1
0de30     10 13 02 F6 | 	mov	arg01, local02
0de34     C4 57 B1 FD | 	call	#__system___float_div
0de38     3C 4E 05 F1 | 	add	fp, #60
0de3c     A7 FA 61 FC | 	wrlong	result1, fp
0de40     24 4E 85 F1 | 	sub	fp, #36
0de44     A7 26 02 FB | 	rdlong	local05, fp
0de48     18 4E 85 F1 | 	sub	fp, #24
0de4c     01 26 66 F0 | 	shl	local05, #1
0de50     51 00 00 FF 
0de54     C8 E5 05 F1 | 	add	objptr, ##41928
0de58     F2 26 02 F1 | 	add	local05, objptr
0de5c     A7 28 02 FB | 	rdlong	local06, fp
0de60     04 4E 05 F1 | 	add	fp, #4
0de64     A7 22 02 FB | 	rdlong	local03, fp
0de68     11 29 02 F1 | 	add	local06, local03
0de6c     13 29 52 FC | 	wrword	local06, local05
0de70     1C 4E 05 F1 | 	add	fp, #28
0de74     A7 00 68 FC | 	wrlong	#0, fp
0de78                 | '   fulltime=aa+dd+rr
0de78                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0de78                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0de78                 | '   suspoints(channel)=a+d
0de78                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0de78     0C 4E 85 F1 | 	sub	fp, #12
0de7c     A7 00 68 FC | 	wrlong	#0, fp
0de80     14 4E 85 F1 | 	sub	fp, #20
0de84     A7 2A 02 FB | 	rdlong	local07, fp
0de88     51 00 00 FF 
0de8c     C8 E5 85 F1 | 	sub	objptr, ##41928
0de90                 | LR__1234
0de90     14 4E 05 F1 | 	add	fp, #20
0de94     A7 20 02 FB | 	rdlong	local02, fp
0de98     14 4E 85 F1 | 	sub	fp, #20
0de9c     15 21 52 F2 | 	cmps	local02, local07 wc
0dea0     80 00 90 3D |  if_ae	jmp	#LR__1235
0dea4     18 4E 05 F1 | 	add	fp, #24
0dea8     A7 28 02 FB | 	rdlong	local06, fp
0deac     09 28 66 F0 | 	shl	local06, #9
0deb0     0C 00 00 FF 
0deb4     D8 E4 05 F1 | 	add	objptr, ##6360
0deb8     F2 28 02 F1 | 	add	local06, objptr
0debc     04 4E 85 F1 | 	sub	fp, #4
0dec0     A7 26 02 FB | 	rdlong	local05, fp
0dec4     01 26 66 F0 | 	shl	local05, #1
0dec8     14 27 02 F1 | 	add	local05, local06
0decc     0C 4E 05 F1 | 	add	fp, #12
0ded0     A7 12 02 FB | 	rdlong	arg01, fp
0ded4     20 4E 85 F1 | 	sub	fp, #32
0ded8     0C 00 00 FF 
0dedc     D8 E4 85 F1 | 	sub	objptr, ##6360
0dee0     01 14 06 F6 | 	mov	arg02, #1
0dee4     D8 59 B1 FD | 	call	#__system___float_tointeger
0dee8     13 FB 51 FC | 	wrword	result1, local05
0deec     20 4E 05 F1 | 	add	fp, #32
0def0     A7 12 02 FB | 	rdlong	arg01, fp
0def4     18 4E 05 F1 | 	add	fp, #24
0def8     A7 14 02 FB | 	rdlong	arg02, fp
0defc     38 4E 85 F1 | 	sub	fp, #56
0df00     24 51 B1 FD | 	call	#__system___float_add
0df04     20 4E 05 F1 | 	add	fp, #32
0df08     A7 FA 61 FC | 	wrlong	result1, fp
0df0c     0C 4E 85 F1 | 	sub	fp, #12
0df10     A7 28 02 FB | 	rdlong	local06, fp
0df14     01 28 06 F1 | 	add	local06, #1
0df18     A7 28 62 FC | 	wrlong	local06, fp
0df1c     14 4E 85 F1 | 	sub	fp, #20
0df20     6C FF 9F FD | 	jmp	#LR__1234
0df24                 | LR__1235
0df24                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0df24     A7 20 02 FB | 	rdlong	local02, fp
0df28     14 4E 05 F1 | 	add	fp, #20
0df2c     A7 20 62 FC | 	wrlong	local02, fp
0df30     14 4E 85 F1 | 	sub	fp, #20
0df34     A7 2C 02 FB | 	rdlong	local08, fp
0df38     04 4E 05 F1 | 	add	fp, #4
0df3c     A7 20 02 FB | 	rdlong	local02, fp
0df40     04 4E 85 F1 | 	sub	fp, #4
0df44     10 2D 02 F1 | 	add	local08, local02
0df48                 | LR__1236
0df48     14 4E 05 F1 | 	add	fp, #20
0df4c     A7 20 02 FB | 	rdlong	local02, fp
0df50     14 4E 85 F1 | 	sub	fp, #20
0df54     16 21 52 F2 | 	cmps	local02, local08 wc
0df58     A8 00 90 3D |  if_ae	jmp	#LR__1237
0df5c     18 4E 05 F1 | 	add	fp, #24
0df60     A7 2A 02 FB | 	rdlong	local07, fp
0df64     09 2A 66 F0 | 	shl	local07, #9
0df68     0C 00 00 FF 
0df6c     D8 E4 05 F1 | 	add	objptr, ##6360
0df70     F2 2A 02 F1 | 	add	local07, objptr
0df74     04 4E 85 F1 | 	sub	fp, #4
0df78     A7 28 02 FB | 	rdlong	local06, fp
0df7c     01 28 66 F0 | 	shl	local06, #1
0df80     15 29 02 F1 | 	add	local06, local07
0df84     0C 4E 05 F1 | 	add	fp, #12
0df88     A7 12 02 FB | 	rdlong	arg01, fp
0df8c     20 4E 85 F1 | 	sub	fp, #32
0df90     0C 00 00 FF 
0df94     D8 E4 85 F1 | 	sub	objptr, ##6360
0df98     01 14 06 F6 | 	mov	arg02, #1
0df9c     20 59 B1 FD | 	call	#__system___float_tointeger
0dfa0     14 FB 51 FC | 	wrword	result1, local06
0dfa4     20 4E 05 F1 | 	add	fp, #32
0dfa8     A7 12 02 FB | 	rdlong	arg01, fp
0dfac     04 4E 05 F1 | 	add	fp, #4
0dfb0     A7 14 02 FB | 	rdlong	arg02, fp
0dfb4     24 4E 85 F1 | 	sub	fp, #36
0dfb8     1F 14 E6 F4 | 	bitnot	arg02, #31
0dfbc     68 50 B1 FD | 	call	#__system___float_add
0dfc0     20 4E 05 F1 | 	add	fp, #32
0dfc4     A7 FA 61 FC | 	wrlong	result1, fp
0dfc8     20 4E 85 F1 | 	sub	fp, #32
0dfcc     FD 12 02 F6 | 	mov	arg01, result1
0dfd0     00 14 06 F6 | 	mov	arg02, #0
0dfd4     01 16 06 F6 | 	mov	arg03, #1
0dfd8     50 58 B1 FD | 	call	#__system___float_cmp
0dfdc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfe0     20 4E 05 C1 |  if_b	add	fp, #32
0dfe4     A7 00 68 CC |  if_b	wrlong	#0, fp
0dfe8     20 4E 85 C1 |  if_b	sub	fp, #32
0dfec     14 4E 05 F1 | 	add	fp, #20
0dff0     A7 2A 02 FB | 	rdlong	local07, fp
0dff4     01 2A 06 F1 | 	add	local07, #1
0dff8     A7 2A 62 FC | 	wrlong	local07, fp
0dffc     14 4E 85 F1 | 	sub	fp, #20
0e000     44 FF 9F FD | 	jmp	#LR__1236
0e004                 | LR__1237
0e004                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0e004     A7 20 02 FB | 	rdlong	local02, fp
0e008     04 4E 05 F1 | 	add	fp, #4
0e00c     A7 2C 02 FB | 	rdlong	local08, fp
0e010     16 21 02 F1 | 	add	local02, local08
0e014     10 4E 05 F1 | 	add	fp, #16
0e018     A7 20 62 FC | 	wrlong	local02, fp
0e01c     14 4E 85 F1 | 	sub	fp, #20
0e020                 | LR__1238
0e020     14 4E 05 F1 | 	add	fp, #20
0e024     A7 26 02 FB | 	rdlong	local05, fp
0e028     14 4E 85 F1 | 	sub	fp, #20
0e02c     00 27 56 F2 | 	cmps	local05, #256 wc
0e030     A8 00 90 3D |  if_ae	jmp	#LR__1239
0e034     18 4E 05 F1 | 	add	fp, #24
0e038     A7 2C 02 FB | 	rdlong	local08, fp
0e03c     09 2C 66 F0 | 	shl	local08, #9
0e040     0C 00 00 FF 
0e044     D8 E4 05 F1 | 	add	objptr, ##6360
0e048     F2 2C 02 F1 | 	add	local08, objptr
0e04c     04 4E 85 F1 | 	sub	fp, #4
0e050     A7 2A 02 FB | 	rdlong	local07, fp
0e054     01 2A 66 F0 | 	shl	local07, #1
0e058     16 2B 02 F1 | 	add	local07, local08
0e05c     0C 4E 05 F1 | 	add	fp, #12
0e060     A7 12 02 FB | 	rdlong	arg01, fp
0e064     20 4E 85 F1 | 	sub	fp, #32
0e068     0C 00 00 FF 
0e06c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e070     01 14 06 F6 | 	mov	arg02, #1
0e074     48 58 B1 FD | 	call	#__system___float_tointeger
0e078     15 FB 51 FC | 	wrword	result1, local07
0e07c     20 4E 05 F1 | 	add	fp, #32
0e080     A7 12 02 FB | 	rdlong	arg01, fp
0e084     1C 4E 05 F1 | 	add	fp, #28
0e088     A7 14 02 FB | 	rdlong	arg02, fp
0e08c     3C 4E 85 F1 | 	sub	fp, #60
0e090     1F 14 E6 F4 | 	bitnot	arg02, #31
0e094     90 4F B1 FD | 	call	#__system___float_add
0e098     20 4E 05 F1 | 	add	fp, #32
0e09c     A7 FA 61 FC | 	wrlong	result1, fp
0e0a0     20 4E 85 F1 | 	sub	fp, #32
0e0a4     FD 12 02 F6 | 	mov	arg01, result1
0e0a8     00 14 06 F6 | 	mov	arg02, #0
0e0ac     01 16 06 F6 | 	mov	arg03, #1
0e0b0     78 57 B1 FD | 	call	#__system___float_cmp
0e0b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0e0b8     20 4E 05 C1 |  if_b	add	fp, #32
0e0bc     A7 00 68 CC |  if_b	wrlong	#0, fp
0e0c0     20 4E 85 C1 |  if_b	sub	fp, #32
0e0c4     14 4E 05 F1 | 	add	fp, #20
0e0c8     A7 2C 02 FB | 	rdlong	local08, fp
0e0cc     01 2C 06 F1 | 	add	local08, #1
0e0d0     A7 2C 62 FC | 	wrlong	local08, fp
0e0d4     14 4E 85 F1 | 	sub	fp, #20
0e0d8     44 FF 9F FD | 	jmp	#LR__1238
0e0dc                 | LR__1239
0e0dc     18 4E 05 F1 | 	add	fp, #24
0e0e0     A7 26 02 FB | 	rdlong	local05, fp
0e0e4     18 4E 85 F1 | 	sub	fp, #24
0e0e8     09 26 66 F0 | 	shl	local05, #9
0e0ec     0C 00 00 FF 
0e0f0     D8 E4 05 F1 | 	add	objptr, ##6360
0e0f4     F2 26 02 F1 | 	add	local05, objptr
0e0f8     FE 27 06 F1 | 	add	local05, #510
0e0fc     13 01 58 FC | 	wrword	#0, local05
0e100     0C 00 00 FF 
0e104     D8 E4 85 F1 | 	sub	objptr, ##6360
0e108                 | LR__1240
0e108     18 4E 05 F1 | 	add	fp, #24
0e10c     A7 26 02 FB | 	rdlong	local05, fp
0e110     18 4E 85 F1 | 	sub	fp, #24
0e114     09 26 66 F0 | 	shl	local05, #9
0e118     0C 00 00 FF 
0e11c     D8 E4 05 F1 | 	add	objptr, ##6360
0e120     F2 26 02 F1 | 	add	local05, objptr
0e124     FE 27 06 F1 | 	add	local05, #510
0e128     13 01 58 FC | 	wrword	#0, local05
0e12c     0C 00 00 FF 
0e130     D8 E4 85 F1 | 	sub	objptr, ##6360
0e134                 | LR__1241
0e134     A7 F0 03 F6 | 	mov	ptra, fp
0e138     B2 00 A0 FD | 	call	#popregs_
0e13c                 | _do_defenv_ret
0e13c     2D 00 64 FD | 	ret
0e140                 | 
0e140                 | ' 
0e140                 | ' '-------------------- defsnd
0e140                 | ' 
0e140                 | ' sub do_defsnd
0e140                 | _do_defsnd
0e140     04 4A 05 F6 | 	mov	COUNT_, #4
0e144     A8 00 A0 FD | 	call	#pushregs_
0e148     88 F0 07 F1 | 	add	ptra, #136
0e14c     4A 00 00 FF 
0e150     80 E4 05 F1 | 	add	objptr, ##38016
0e154     F2 1A 02 FB | 	rdlong	arg05, objptr
0e158     0D 19 02 F6 | 	mov	arg04, arg05
0e15c     01 18 66 F0 | 	shl	arg04, #1
0e160     0D 19 02 F1 | 	add	arg04, arg05
0e164     02 18 66 F0 | 	shl	arg04, #2
0e168     03 00 00 FF 
0e16c     04 E4 85 F1 | 	sub	objptr, ##1540
0e170     F2 18 02 F1 | 	add	arg04, objptr
0e174     0C 1B 02 FB | 	rdlong	arg05, arg04
0e178     A7 1A 62 FC | 	wrlong	arg05, fp
0e17c                 | ' 
0e17c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e17c                 | ' 
0e17c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0e17c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0e17c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0e17c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0e17c                 | ' 
0e17c                 | ' if numpar<2 then return
0e17c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0e180     47 00 00 FF 
0e184     7C E4 85 F1 | 	sub	objptr, ##36476
0e188     94 08 90 CD |  if_b	jmp	#LR__1273
0e18c                 | '  
0e18c                 | ' if numpar=2 then
0e18c     A7 1A 02 FB | 	rdlong	arg05, fp
0e190     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e194     A0 03 90 5D |  if_ne	jmp	#LR__1260
0e198     20 D2 BF FD | 	call	#_pop
0e19c     FF 1A 02 F6 | 	mov	arg05, result3
0e1a0     2C 4E 05 F1 | 	add	fp, #44
0e1a4     A7 FA 61 FC | 	wrlong	result1, fp
0e1a8     04 4E 05 F1 | 	add	fp, #4
0e1ac     A7 FC 61 FC | 	wrlong	result2, fp
0e1b0     04 4E 05 F1 | 	add	fp, #4
0e1b4     A7 1A 62 FC | 	wrlong	arg05, fp
0e1b8                 | '   t1=pop()
0e1b8                 | '   if t1.result_type=result_string2 then 
0e1b8     34 4E 85 F1 | 	sub	fp, #52
0e1bc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e1c0     20 00 90 5D |  if_ne	jmp	#LR__1250
0e1c4     2C 4E 05 F1 | 	add	fp, #44
0e1c8     A7 12 02 FB | 	rdlong	arg01, fp
0e1cc     2C 4E 85 F1 | 	sub	fp, #44
0e1d0     60 D3 BF FD | 	call	#_convertstring
0e1d4     38 4E 05 F1 | 	add	fp, #56
0e1d8     A7 FA 61 FC | 	wrlong	result1, fp
0e1dc     38 4E 85 F1 | 	sub	fp, #56
0e1e0     58 00 90 FD | 	jmp	#LR__1253
0e1e4                 | LR__1250
0e1e4     34 4E 05 F1 | 	add	fp, #52
0e1e8     A7 1A 02 FB | 	rdlong	arg05, fp
0e1ec     34 4E 85 F1 | 	sub	fp, #52
0e1f0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0e1f4     18 00 90 5D |  if_ne	jmp	#LR__1251
0e1f8     2C 4E 05 F1 | 	add	fp, #44
0e1fc     A7 1A 02 FB | 	rdlong	arg05, fp
0e200     0C 4E 05 F1 | 	add	fp, #12
0e204     A7 1A 62 FC | 	wrlong	arg05, fp
0e208     38 4E 85 F1 | 	sub	fp, #56
0e20c     2C 00 90 FD | 	jmp	#LR__1252
0e210                 | LR__1251
0e210     83 01 00 FF 
0e214     CC 1B 06 F6 | 	mov	arg05, ##@LR__5424
0e218     38 4E 05 F1 | 	add	fp, #56
0e21c     A7 1A 62 FC | 	wrlong	arg05, fp
0e220     0C 4E 85 F1 | 	sub	fp, #12
0e224     A7 12 02 F6 | 	mov	arg01, fp
0e228     2C 4E 85 F1 | 	sub	fp, #44
0e22c     70 D3 BF FD | 	call	#_converttoint
0e230     14 4E 05 F1 | 	add	fp, #20
0e234     A7 FA 61 FC | 	wrlong	result1, fp
0e238     14 4E 85 F1 | 	sub	fp, #20
0e23c                 | LR__1252
0e23c                 | LR__1253
0e23c                 | '   if s<>"" then 
0e23c     38 4E 05 F1 | 	add	fp, #56
0e240     A7 12 02 FB | 	rdlong	arg01, fp
0e244     38 4E 85 F1 | 	sub	fp, #56
0e248     83 01 00 FF 
0e24c     CD 15 06 F6 | 	mov	arg02, ##@LR__5425
0e250     18 26 B1 FD | 	call	#__system___string_cmp
0e254     00 FA 0D F2 | 	cmp	result1, #0 wz
0e258     E0 01 90 AD |  if_e	jmp	#LR__1256
0e25c     5C D1 BF FD | 	call	#_pop
0e260     FF 1A 02 F6 | 	mov	arg05, result3
0e264     2C 4E 05 F1 | 	add	fp, #44
0e268     A7 FA 61 FC | 	wrlong	result1, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 FC 61 FC | 	wrlong	result2, fp
0e274     04 4E 05 F1 | 	add	fp, #4
0e278     A7 1A 62 FC | 	wrlong	arg05, fp
0e27c     08 4E 85 F1 | 	sub	fp, #8
0e280     A7 12 02 F6 | 	mov	arg01, fp
0e284     2C 4E 85 F1 | 	sub	fp, #44
0e288     14 D3 BF FD | 	call	#_converttoint
0e28c     10 4E 05 F1 | 	add	fp, #16
0e290     A7 FA 61 FC | 	wrlong	result1, fp
0e294                 | '     t1=pop()
0e294                 | '     channel=converttoint(t1) : if channel>31 then return
0e294     FD 1A 02 F6 | 	mov	arg05, result1
0e298     10 4E 85 F1 | 	sub	fp, #16
0e29c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0e2a0     7C 07 90 3D |  if_ae	jmp	#LR__1273
0e2a4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0e2a4     09 12 06 F6 | 	mov	arg01, #9
0e2a8     2C 76 B1 FD | 	call	#__system__close
0e2ac     09 1E 06 F6 | 	mov	local01, #9
0e2b0     83 01 00 FF 
0e2b4     CE 13 06 F6 | 	mov	arg01, ##@LR__5426
0e2b8     38 4E 05 F1 | 	add	fp, #56
0e2bc     A7 14 02 FB | 	rdlong	arg02, fp
0e2c0     38 4E 85 F1 | 	sub	fp, #56
0e2c4     D8 25 B1 FD | 	call	#__system___string_concat
0e2c8     FD 14 02 F6 | 	mov	arg02, result1
0e2cc     0F 13 02 F6 | 	mov	arg01, local01
0e2d0     00 16 06 F6 | 	mov	arg03, #0
0e2d4     70 31 B1 FD | 	call	#__system___basic_open_string
0e2d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e2dc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e2e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e2e4     52 00 00 FF 
0e2e8     18 E4 05 F1 | 	add	objptr, ##42008
0e2ec     F2 FA 61 FC | 	wrlong	result1, objptr
0e2f0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e2f0     52 00 00 FF 
0e2f4     18 E4 85 F1 | 	sub	objptr, ##42008
0e2f8     B0 00 90 AD |  if_e	jmp	#LR__1254
0e2fc     00 12 06 F6 | 	mov	arg01, #0
0e300     A4 7F B1 FD | 	call	#__system___getiolock_0542
0e304     FD 12 02 F6 | 	mov	arg01, result1
0e308     38 25 B1 FD | 	call	#__system___lockmem
0e30c     83 01 00 FF 
0e310     DB 15 06 F6 | 	mov	arg02, ##@LR__5427
0e314     00 12 06 F6 | 	mov	arg01, #0
0e318     00 16 06 F6 | 	mov	arg03, #0
0e31c     18 32 B1 FD | 	call	#__system___basic_print_string
0e320     52 00 00 FF 
0e324     18 E4 05 F1 | 	add	objptr, ##42008
0e328     F2 14 02 FB | 	rdlong	arg02, objptr
0e32c     52 00 00 FF 
0e330     18 E4 85 F1 | 	sub	objptr, ##42008
0e334     00 12 06 F6 | 	mov	arg01, #0
0e338     00 16 06 F6 | 	mov	arg03, #0
0e33c     0A 18 06 F6 | 	mov	arg04, #10
0e340     38 32 B1 FD | 	call	#__system___basic_print_integer
0e344     83 01 00 FF 
0e348     E9 15 06 F6 | 	mov	arg02, ##@LR__5428
0e34c     00 12 06 F6 | 	mov	arg01, #0
0e350     00 16 06 F6 | 	mov	arg03, #0
0e354     E0 31 B1 FD | 	call	#__system___basic_print_string
0e358     00 1E 06 F6 | 	mov	local01, #0
0e35c     52 00 00 FF 
0e360     18 E4 05 F1 | 	add	objptr, ##42008
0e364     F2 12 02 FB | 	rdlong	arg01, objptr
0e368     52 00 00 FF 
0e36c     18 E4 85 F1 | 	sub	objptr, ##42008
0e370     98 4B B1 FD | 	call	#__system___strerror
0e374     FD 14 02 F6 | 	mov	arg02, result1
0e378     0F 13 02 F6 | 	mov	arg01, local01
0e37c     00 16 06 F6 | 	mov	arg03, #0
0e380     B4 31 B1 FD | 	call	#__system___basic_print_string
0e384     00 12 06 F6 | 	mov	arg01, #0
0e388     0A 14 06 F6 | 	mov	arg02, #10
0e38c     00 16 06 F6 | 	mov	arg03, #0
0e390     4C 31 B1 FD | 	call	#__system___basic_print_char
0e394     00 12 06 F6 | 	mov	arg01, #0
0e398     0C 7F B1 FD | 	call	#__system___getiolock_0542
0e39c     FD 00 68 FC | 	wrlong	#0, result1
0e3a0     09 12 06 F6 | 	mov	arg01, #9
0e3a4     30 75 B1 FD | 	call	#__system__close
0e3a8     74 06 90 FD | 	jmp	#LR__1273
0e3ac                 | LR__1254
0e3ac                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0e3ac     04 4E 05 F1 | 	add	fp, #4
0e3b0     A7 00 68 FC | 	wrlong	#0, fp
0e3b4                 | LR__1255
0e3b4     A7 1E 02 FB | 	rdlong	local01, fp
0e3b8     01 1E 66 F0 | 	shl	local01, #1
0e3bc     11 14 06 F6 | 	mov	arg02, #17
0e3c0     0F 15 02 F1 | 	add	arg02, local01
0e3c4     78 4E 05 F1 | 	add	fp, #120
0e3c8     A7 16 02 F6 | 	mov	arg03, fp
0e3cc     7C 4E 85 F1 | 	sub	fp, #124
0e3d0     09 12 06 F6 | 	mov	arg01, #9
0e3d4     01 18 06 F6 | 	mov	arg04, #1
0e3d8     02 1A 06 F6 | 	mov	arg05, #2
0e3dc     D4 32 B1 FD | 	call	#__system___basic_get
0e3e0     10 4E 05 F1 | 	add	fp, #16
0e3e4     A7 12 02 FB | 	rdlong	arg01, fp
0e3e8     0B 12 66 F0 | 	shl	arg01, #11
0e3ec     0C 4E 85 F1 | 	sub	fp, #12
0e3f0     A7 1E 02 FB | 	rdlong	local01, fp
0e3f4     01 1E 66 F0 | 	shl	local01, #1
0e3f8     0F 13 02 F1 | 	add	arg01, local01
0e3fc     78 4E 05 F1 | 	add	fp, #120
0e400     A7 14 E2 FA | 	rdword	arg02, fp
0e404     7C 4E 85 F1 | 	sub	fp, #124
0e408     0F 14 66 F7 | 	signx	arg02, #15
0e40c     50 F0 B0 FD | 	call	#_psdpoke
0e410     04 4E 05 F1 | 	add	fp, #4
0e414     A7 1E 02 FB | 	rdlong	local01, fp
0e418     01 1E 06 F1 | 	add	local01, #1
0e41c     A7 1E 62 FC | 	wrlong	local01, fp
0e420     02 00 00 FF 
0e424     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0e428     88 FF 9F CD |  if_b	jmp	#LR__1255
0e42c     04 4E 85 F1 | 	sub	fp, #4
0e430                 | '     close #9
0e430     09 12 06 F6 | 	mov	arg01, #9
0e434     A0 74 B1 FD | 	call	#__system__close
0e438                 | '     return
0e438     E4 05 90 FD | 	jmp	#LR__1273
0e43c                 | LR__1256
0e43c                 | '     if wptr < ($80000 - 2048) then 
0e43c     14 4E 05 F1 | 	add	fp, #20
0e440     A7 1E 02 FB | 	rdlong	local01, fp
0e444     14 4E 85 F1 | 	sub	fp, #20
0e448     FC 03 00 FF 
0e44c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0e450     70 00 90 3D |  if_ae	jmp	#LR__1258
0e454                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0e454     04 4E 05 F1 | 	add	fp, #4
0e458     A7 00 68 FC | 	wrlong	#0, fp
0e45c     04 4E 85 F1 | 	sub	fp, #4
0e460                 | LR__1257
0e460     10 4E 05 F1 | 	add	fp, #16
0e464     A7 1E 02 FB | 	rdlong	local01, fp
0e468     0B 1E 66 F0 | 	shl	local01, #11
0e46c     0C 4E 85 F1 | 	sub	fp, #12
0e470     A7 1A 02 FB | 	rdlong	arg05, fp
0e474     0D 19 02 F6 | 	mov	arg04, arg05
0e478     01 18 66 F0 | 	shl	arg04, #1
0e47c     0C 1F 02 F1 | 	add	local01, arg04
0e480     10 4E 05 F1 | 	add	fp, #16
0e484     A7 12 02 FB | 	rdlong	arg01, fp
0e488     14 4E 85 F1 | 	sub	fp, #20
0e48c     01 1A 66 F0 | 	shl	arg05, #1
0e490     0D 13 02 F1 | 	add	arg01, arg05
0e494     09 15 E2 FA | 	rdword	arg02, arg01
0e498     0F 13 02 F6 | 	mov	arg01, local01
0e49c     C0 EF B0 FD | 	call	#_psdpoke
0e4a0     04 4E 05 F1 | 	add	fp, #4
0e4a4     A7 1E 02 FB | 	rdlong	local01, fp
0e4a8     01 1E 06 F1 | 	add	local01, #1
0e4ac     A7 1E 62 FC | 	wrlong	local01, fp
0e4b0     04 4E 85 F1 | 	sub	fp, #4
0e4b4     02 00 00 FF 
0e4b8     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e4bc     A0 FF 9F CD |  if_b	jmp	#LR__1257
0e4c0     5C 05 90 FD | 	jmp	#LR__1273
0e4c4                 | LR__1258
0e4c4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0e4c4     04 4E 05 F1 | 	add	fp, #4
0e4c8     A7 00 68 FC | 	wrlong	#0, fp
0e4cc     04 4E 85 F1 | 	sub	fp, #4
0e4d0                 | LR__1259
0e4d0     10 4E 05 F1 | 	add	fp, #16
0e4d4     A7 1E 02 FB | 	rdlong	local01, fp
0e4d8     0B 1E 66 F0 | 	shl	local01, #11
0e4dc     0C 4E 85 F1 | 	sub	fp, #12
0e4e0     A7 1A 02 FB | 	rdlong	arg05, fp
0e4e4     0D 19 02 F6 | 	mov	arg04, arg05
0e4e8     01 18 66 F0 | 	shl	arg04, #1
0e4ec     0C 1F 02 F1 | 	add	local01, arg04
0e4f0     10 4E 05 F1 | 	add	fp, #16
0e4f4     A7 12 02 FB | 	rdlong	arg01, fp
0e4f8     14 4E 85 F1 | 	sub	fp, #20
0e4fc     01 1A 66 F0 | 	shl	arg05, #1
0e500     0D 13 02 F1 | 	add	arg01, arg05
0e504     98 F0 B0 FD | 	call	#_psdpeek
0e508     FD 14 02 F6 | 	mov	arg02, result1
0e50c     0F 13 02 F6 | 	mov	arg01, local01
0e510     4C EF B0 FD | 	call	#_psdpoke
0e514     04 4E 05 F1 | 	add	fp, #4
0e518     A7 1E 02 FB | 	rdlong	local01, fp
0e51c     01 1E 06 F1 | 	add	local01, #1
0e520     A7 1E 62 FC | 	wrlong	local01, fp
0e524     04 4E 85 F1 | 	sub	fp, #4
0e528     02 00 00 FF 
0e52c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0e530     9C FF 9F CD |  if_b	jmp	#LR__1259
0e534                 | '     return 
0e534     E8 04 90 FD | 	jmp	#LR__1273
0e538                 | '   return
0e538                 | LR__1260
0e538                 | ' for i=0 to 15 : harm(i)=0: next i  
0e538     04 4E 05 F1 | 	add	fp, #4
0e53c     A7 00 68 FC | 	wrlong	#0, fp
0e540     97 16 48 FB | 	callpa	#(@LR__1262-@LR__1261)>>2,fcache_load_ptr_
0e544                 | LR__1261
0e544     A7 1E 02 FB | 	rdlong	local01, fp
0e548     02 1E 66 F0 | 	shl	local01, #2
0e54c     38 4E 05 F1 | 	add	fp, #56
0e550     A7 1E 02 F1 | 	add	local01, fp
0e554     0F 01 68 FC | 	wrlong	#0, local01
0e558     38 4E 85 F1 | 	sub	fp, #56
0e55c     A7 1E 02 FB | 	rdlong	local01, fp
0e560     01 1E 06 F1 | 	add	local01, #1
0e564     A7 1E 62 FC | 	wrlong	local01, fp
0e568     10 1E 56 F2 | 	cmps	local01, #16 wc
0e56c     D4 FF 9F CD |  if_b	jmp	#LR__1261
0e570                 | LR__1262
0e570     04 4E 85 F1 | 	sub	fp, #4
0e574                 | ' for i=numpar to 2 step -1 
0e574     A7 1E 02 FB | 	rdlong	local01, fp
0e578     04 4E 05 F1 | 	add	fp, #4
0e57c     A7 1E 62 FC | 	wrlong	local01, fp
0e580     04 4E 85 F1 | 	sub	fp, #4
0e584                 | LR__1263
0e584     34 CE BF FD | 	call	#_pop
0e588     2C 4E 05 F1 | 	add	fp, #44
0e58c     A7 FA 61 FC | 	wrlong	result1, fp
0e590     04 4E 05 F1 | 	add	fp, #4
0e594     A7 FC 61 FC | 	wrlong	result2, fp
0e598     04 4E 05 F1 | 	add	fp, #4
0e59c     A7 FE 61 FC | 	wrlong	result3, fp
0e5a0     30 4E 85 F1 | 	sub	fp, #48
0e5a4     A7 1E 02 FB | 	rdlong	local01, fp
0e5a8     02 1E 86 F1 | 	sub	local01, #2
0e5ac     02 1E 66 F0 | 	shl	local01, #2
0e5b0     38 4E 05 F1 | 	add	fp, #56
0e5b4     A7 1E 02 F1 | 	add	local01, fp
0e5b8     10 4E 85 F1 | 	sub	fp, #16
0e5bc     A7 12 02 F6 | 	mov	arg01, fp
0e5c0     2C 4E 85 F1 | 	sub	fp, #44
0e5c4     94 D0 BF FD | 	call	#_converttofloat
0e5c8     0F FB 61 FC | 	wrlong	result1, local01
0e5cc     04 4E 05 F1 | 	add	fp, #4
0e5d0     A7 1E 02 FB | 	rdlong	local01, fp
0e5d4     01 1E 86 F1 | 	sub	local01, #1
0e5d8     A7 1E 62 FC | 	wrlong	local01, fp
0e5dc     04 4E 85 F1 | 	sub	fp, #4
0e5e0     02 1E 56 F2 | 	cmps	local01, #2 wc
0e5e4     9C FF 9F 3D |  if_ae	jmp	#LR__1263
0e5e8     D0 CD BF FD | 	call	#_pop
0e5ec     FF 1E 02 F6 | 	mov	local01, result3
0e5f0     2C 4E 05 F1 | 	add	fp, #44
0e5f4     A7 FA 61 FC | 	wrlong	result1, fp
0e5f8     04 4E 05 F1 | 	add	fp, #4
0e5fc     A7 FC 61 FC | 	wrlong	result2, fp
0e600     04 4E 05 F1 | 	add	fp, #4
0e604     A7 1E 62 FC | 	wrlong	local01, fp
0e608     08 4E 85 F1 | 	sub	fp, #8
0e60c     A7 12 02 F6 | 	mov	arg01, fp
0e610     2C 4E 85 F1 | 	sub	fp, #44
0e614     88 CF BF FD | 	call	#_converttoint
0e618     10 4E 05 F1 | 	add	fp, #16
0e61c     A7 FA 61 FC | 	wrlong	result1, fp
0e620                 | ' t1=pop()
0e620                 | ' channel=converttoint(t1) : : if channel>31 then return
0e620     FD 1E 02 F6 | 	mov	local01, result1
0e624     10 4E 85 F1 | 	sub	fp, #16
0e628     20 1E 56 F2 | 	cmps	local01, #32 wc
0e62c     F0 03 90 3D |  if_ae	jmp	#LR__1273
0e630     20 4E 05 F1 | 	add	fp, #32
0e634     A7 00 68 FC | 	wrlong	#0, fp
0e638                 | ' max=0
0e638                 | ' if harm(0)<0 then
0e638     1C 4E 05 F1 | 	add	fp, #28
0e63c     A7 12 02 FB | 	rdlong	arg01, fp
0e640     3C 4E 85 F1 | 	sub	fp, #60
0e644     00 14 06 F6 | 	mov	arg02, #0
0e648     01 16 06 F6 | 	mov	arg03, #1
0e64c     DC 51 B1 FD | 	call	#__system___float_cmp
0e650     00 FA 55 F2 | 	cmps	result1, #0 wc
0e654     04 01 90 3D |  if_ae	jmp	#LR__1266
0e658     3C 4E 05 F1 | 	add	fp, #60
0e65c     A7 FA 01 FB | 	rdlong	result1, fp
0e660     1F FA 05 F4 | 	bitl	result1, #31
0e664     24 4E 85 F1 | 	sub	fp, #36
0e668     A7 FA 61 FC | 	wrlong	result1, fp
0e66c     28 4E 05 F1 | 	add	fp, #40
0e670     A7 FA 01 FB | 	rdlong	result1, fp
0e674     1F FA 05 F4 | 	bitl	result1, #31
0e678     24 4E 85 F1 | 	sub	fp, #36
0e67c     A7 FA 61 FC | 	wrlong	result1, fp
0e680     20 4E 05 F1 | 	add	fp, #32
0e684     00 C0 9F FF 
0e688     A7 00 68 FC | 	wrlong	##1065353216, fp
0e68c     24 4E 85 F1 | 	sub	fp, #36
0e690     A7 1E 02 FB | 	rdlong	local01, fp
0e694     28 4E 05 F1 | 	add	fp, #40
0e698     A7 1E 62 FC | 	wrlong	local01, fp
0e69c     24 4E 85 F1 | 	sub	fp, #36
0e6a0     A7 1E 02 FB | 	rdlong	local01, fp
0e6a4     28 4E 05 F1 | 	add	fp, #40
0e6a8     A7 1E 62 FC | 	wrlong	local01, fp
0e6ac                 | '   harm(0)=1
0e6ac                 | '   harm(1)=even
0e6ac                 | '   harm(2)=odd
0e6ac                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0e6ac     40 4E 85 F1 | 	sub	fp, #64
0e6b0     A7 06 68 FC | 	wrlong	#3, fp
0e6b4                 | LR__1264
0e6b4     A7 1A 02 FB | 	rdlong	arg05, fp
0e6b8     0D 21 02 F6 | 	mov	local02, arg05
0e6bc     02 20 66 F0 | 	shl	local02, #2
0e6c0     38 4E 05 F1 | 	add	fp, #56
0e6c4     A7 20 02 F1 | 	add	local02, fp
0e6c8     02 1A 86 F1 | 	sub	arg05, #2
0e6cc     02 1A 66 F0 | 	shl	arg05, #2
0e6d0     A7 1A 02 F1 | 	add	arg05, fp
0e6d4     0D 13 02 FB | 	rdlong	arg01, arg05
0e6d8     24 4E 85 F1 | 	sub	fp, #36
0e6dc     A7 14 02 FB | 	rdlong	arg02, fp
0e6e0     18 4E 85 F1 | 	sub	fp, #24
0e6e4     10 4D B1 FD | 	call	#__system___float_mul
0e6e8     10 FB 61 FC | 	wrlong	result1, local02
0e6ec     04 4E 05 F1 | 	add	fp, #4
0e6f0     A7 22 02 FB | 	rdlong	local03, fp
0e6f4     02 22 06 F1 | 	add	local03, #2
0e6f8     A7 22 62 FC | 	wrlong	local03, fp
0e6fc     10 22 56 F2 | 	cmps	local03, #16 wc
0e700     B0 FF 9F CD |  if_b	jmp	#LR__1264
0e704                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0e704     A7 08 68 FC | 	wrlong	#4, fp
0e708                 | LR__1265
0e708     A7 22 02 FB | 	rdlong	local03, fp
0e70c     11 21 02 F6 | 	mov	local02, local03
0e710     02 20 66 F0 | 	shl	local02, #2
0e714     38 4E 05 F1 | 	add	fp, #56
0e718     A7 20 02 F1 | 	add	local02, fp
0e71c     02 22 86 F1 | 	sub	local03, #2
0e720     02 22 66 F0 | 	shl	local03, #2
0e724     A7 22 02 F1 | 	add	local03, fp
0e728     11 13 02 FB | 	rdlong	arg01, local03
0e72c     20 4E 85 F1 | 	sub	fp, #32
0e730     A7 14 02 FB | 	rdlong	arg02, fp
0e734     1C 4E 85 F1 | 	sub	fp, #28
0e738     BC 4C B1 FD | 	call	#__system___float_mul
0e73c     10 FB 61 FC | 	wrlong	result1, local02
0e740     04 4E 05 F1 | 	add	fp, #4
0e744     A7 22 02 FB | 	rdlong	local03, fp
0e748     02 22 06 F1 | 	add	local03, #2
0e74c     A7 22 62 FC | 	wrlong	local03, fp
0e750     0F 22 56 F2 | 	cmps	local03, #15 wc
0e754     B0 FF 9F CD |  if_b	jmp	#LR__1265
0e758     04 4E 85 F1 | 	sub	fp, #4
0e75c                 | LR__1266
0e75c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e75c     3C 4E 05 F1 | 	add	fp, #60
0e760     A7 12 02 FB | 	rdlong	arg01, fp
0e764     3C 4E 85 F1 | 	sub	fp, #60
0e768     00 14 06 F6 | 	mov	arg02, #0
0e76c     01 16 66 F6 | 	neg	arg03, #1
0e770     B8 50 B1 FD | 	call	#__system___float_cmp
0e774     00 FA 55 F2 | 	cmps	result1, #0 wc
0e778     A4 02 90 CD |  if_b	jmp	#LR__1272
0e77c                 | '   for i=0 to 1023
0e77c     04 4E 05 F1 | 	add	fp, #4
0e780     A7 00 68 FC | 	wrlong	#0, fp
0e784     04 4E 85 F1 | 	sub	fp, #4
0e788                 | LR__1267
0e788     24 4E 05 F1 | 	add	fp, #36
0e78c     A7 00 68 FC | 	wrlong	#0, fp
0e790                 | '     spl=0
0e790                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e790     1C 4E 85 F1 | 	sub	fp, #28
0e794     A7 00 68 FC | 	wrlong	#0, fp
0e798                 | LR__1268
0e798     A7 20 02 FB | 	rdlong	local02, fp
0e79c     02 20 66 F0 | 	shl	local02, #2
0e7a0     34 4E 05 F1 | 	add	fp, #52
0e7a4     A7 20 02 F1 | 	add	local02, fp
0e7a8     10 23 02 FB | 	rdlong	local03, local02
0e7ac     87 E4 1D FF 
0e7b0     DB 21 06 F6 | 	mov	local02, ##1003032539
0e7b4     38 4E 85 F1 | 	sub	fp, #56
0e7b8     A7 12 02 FB | 	rdlong	arg01, fp
0e7bc     04 4E 85 F1 | 	sub	fp, #4
0e7c0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7c4     1F 24 C6 C9 |  if_b	decod	local04, #31
0e7c8     00 24 06 36 |  if_ae	mov	local04, #0
0e7cc     24 48 B1 FD | 	call	#__system___float_fromuns
0e7d0     12 FB 61 F5 | 	xor	result1, local04
0e7d4     FD 14 02 F6 | 	mov	arg02, result1
0e7d8     10 13 02 F6 | 	mov	arg01, local02
0e7dc     18 4C B1 FD | 	call	#__system___float_mul
0e7e0     FD 20 02 F6 | 	mov	local02, result1
0e7e4     08 4E 05 F1 | 	add	fp, #8
0e7e8     A7 12 02 FB | 	rdlong	arg01, fp
0e7ec     08 4E 85 F1 | 	sub	fp, #8
0e7f0     01 12 06 F1 | 	add	arg01, #1
0e7f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7f8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e7fc     00 24 06 36 |  if_ae	mov	local04, #0
0e800     F0 47 B1 FD | 	call	#__system___float_fromuns
0e804     12 FB 61 F5 | 	xor	result1, local04
0e808     FD 14 02 F6 | 	mov	arg02, result1
0e80c     10 13 02 F6 | 	mov	arg01, local02
0e810     E4 4B B1 FD | 	call	#__system___float_mul
0e814     FD 12 02 F6 | 	mov	arg01, result1
0e818     3C 55 B1 FD | 	call	#__system____builtin_sinf
0e81c     FD 14 02 F6 | 	mov	arg02, result1
0e820     11 13 02 F6 | 	mov	arg01, local03
0e824     D0 4B B1 FD | 	call	#__system___float_mul
0e828     FD 14 02 F6 | 	mov	arg02, result1
0e82c     24 4E 05 F1 | 	add	fp, #36
0e830     A7 12 02 FB | 	rdlong	arg01, fp
0e834     24 4E 85 F1 | 	sub	fp, #36
0e838     EC 47 B1 FD | 	call	#__system___float_add
0e83c     24 4E 05 F1 | 	add	fp, #36
0e840     A7 FA 61 FC | 	wrlong	result1, fp
0e844     1C 4E 85 F1 | 	sub	fp, #28
0e848     A7 16 02 FB | 	rdlong	arg03, fp
0e84c     01 16 06 F1 | 	add	arg03, #1
0e850     A7 16 62 FC | 	wrlong	arg03, fp
0e854     10 16 56 F2 | 	cmps	arg03, #16 wc
0e858     3C FF 9F CD |  if_b	jmp	#LR__1268
0e85c                 | '     if abs(spl)>max then max=abs(spl)  
0e85c     1C 4E 05 F1 | 	add	fp, #28
0e860     A7 12 02 FB | 	rdlong	arg01, fp
0e864     1F 12 06 F4 | 	bitl	arg01, #31
0e868     04 4E 85 F1 | 	sub	fp, #4
0e86c     A7 14 02 FB | 	rdlong	arg02, fp
0e870     20 4E 85 F1 | 	sub	fp, #32
0e874     01 16 66 F6 | 	neg	arg03, #1
0e878     B0 4F B1 FD | 	call	#__system___float_cmp
0e87c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e880     18 00 90 CD |  if_b	jmp	#LR__1269
0e884     24 4E 05 F1 | 	add	fp, #36
0e888     A7 FA 01 FB | 	rdlong	result1, fp
0e88c     1F FA 05 F4 | 	bitl	result1, #31
0e890     04 4E 85 F1 | 	sub	fp, #4
0e894     A7 FA 61 FC | 	wrlong	result1, fp
0e898     20 4E 85 F1 | 	sub	fp, #32
0e89c                 | LR__1269
0e89c     04 4E 05 F1 | 	add	fp, #4
0e8a0     A7 22 02 FB | 	rdlong	local03, fp
0e8a4     01 22 06 F1 | 	add	local03, #1
0e8a8     A7 22 62 FC | 	wrlong	local03, fp
0e8ac     04 4E 85 F1 | 	sub	fp, #4
0e8b0     02 00 00 FF 
0e8b4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e8b8     CC FE 9F CD |  if_b	jmp	#LR__1267
0e8bc                 | '   for i=0 to 1023
0e8bc     04 4E 05 F1 | 	add	fp, #4
0e8c0     A7 00 68 FC | 	wrlong	#0, fp
0e8c4     04 4E 85 F1 | 	sub	fp, #4
0e8c8                 | LR__1270
0e8c8     24 4E 05 F1 | 	add	fp, #36
0e8cc     A7 00 68 FC | 	wrlong	#0, fp
0e8d0                 | '     spl=0
0e8d0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0e8d0     1C 4E 85 F1 | 	sub	fp, #28
0e8d4     A7 00 68 FC | 	wrlong	#0, fp
0e8d8                 | LR__1271
0e8d8     A7 22 02 FB | 	rdlong	local03, fp
0e8dc     02 22 66 F0 | 	shl	local03, #2
0e8e0     34 4E 05 F1 | 	add	fp, #52
0e8e4     A7 22 02 F1 | 	add	local03, fp
0e8e8     11 23 02 FB | 	rdlong	local03, local03
0e8ec     1C 4E 85 F1 | 	sub	fp, #28
0e8f0     A7 14 02 FB | 	rdlong	arg02, fp
0e8f4     20 4E 85 F1 | 	sub	fp, #32
0e8f8     58 7F 23 FF 
0e8fc     00 12 06 F6 | 	mov	arg01, ##1191096320
0e900     F8 4C B1 FD | 	call	#__system___float_div
0e904     FD 14 02 F6 | 	mov	arg02, result1
0e908     11 13 02 F6 | 	mov	arg01, local03
0e90c     E8 4A B1 FD | 	call	#__system___float_mul
0e910     FD 22 02 F6 | 	mov	local03, result1
0e914     87 E4 1D FF 
0e918     DB 21 06 F6 | 	mov	local02, ##1003032539
0e91c     04 4E 05 F1 | 	add	fp, #4
0e920     A7 12 02 FB | 	rdlong	arg01, fp
0e924     04 4E 85 F1 | 	sub	fp, #4
0e928     09 13 52 F6 | 	abs	arg01, arg01 wc
0e92c     1F 24 C6 C9 |  if_b	decod	local04, #31
0e930     00 24 06 36 |  if_ae	mov	local04, #0
0e934     BC 46 B1 FD | 	call	#__system___float_fromuns
0e938     12 FB 61 F5 | 	xor	result1, local04
0e93c     FD 14 02 F6 | 	mov	arg02, result1
0e940     10 13 02 F6 | 	mov	arg01, local02
0e944     B0 4A B1 FD | 	call	#__system___float_mul
0e948     FD 20 02 F6 | 	mov	local02, result1
0e94c     08 4E 05 F1 | 	add	fp, #8
0e950     A7 12 02 FB | 	rdlong	arg01, fp
0e954     08 4E 85 F1 | 	sub	fp, #8
0e958     01 12 06 F1 | 	add	arg01, #1
0e95c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e960     1F 24 C6 C9 |  if_b	decod	local04, #31
0e964     00 24 06 36 |  if_ae	mov	local04, #0
0e968     88 46 B1 FD | 	call	#__system___float_fromuns
0e96c     12 FB 61 F5 | 	xor	result1, local04
0e970     FD 14 02 F6 | 	mov	arg02, result1
0e974     10 13 02 F6 | 	mov	arg01, local02
0e978     7C 4A B1 FD | 	call	#__system___float_mul
0e97c     FD 12 02 F6 | 	mov	arg01, result1
0e980     D4 53 B1 FD | 	call	#__system____builtin_sinf
0e984     FD 14 02 F6 | 	mov	arg02, result1
0e988     11 13 02 F6 | 	mov	arg01, local03
0e98c     68 4A B1 FD | 	call	#__system___float_mul
0e990     FD 14 02 F6 | 	mov	arg02, result1
0e994     24 4E 05 F1 | 	add	fp, #36
0e998     A7 12 02 FB | 	rdlong	arg01, fp
0e99c     24 4E 85 F1 | 	sub	fp, #36
0e9a0     84 46 B1 FD | 	call	#__system___float_add
0e9a4     24 4E 05 F1 | 	add	fp, #36
0e9a8     A7 FA 61 FC | 	wrlong	result1, fp
0e9ac     1C 4E 85 F1 | 	sub	fp, #28
0e9b0     A7 22 02 FB | 	rdlong	local03, fp
0e9b4     01 22 06 F1 | 	add	local03, #1
0e9b8     A7 22 62 FC | 	wrlong	local03, fp
0e9bc     10 22 56 F2 | 	cmps	local03, #16 wc
0e9c0     14 FF 9F CD |  if_b	jmp	#LR__1271
0e9c4     08 4E 05 F1 | 	add	fp, #8
0e9c8     A7 22 02 FB | 	rdlong	local03, fp
0e9cc     0B 22 66 F0 | 	shl	local03, #11
0e9d0     0C 4E 85 F1 | 	sub	fp, #12
0e9d4     A7 20 02 FB | 	rdlong	local02, fp
0e9d8     01 20 66 F0 | 	shl	local02, #1
0e9dc     10 23 02 F1 | 	add	local03, local02
0e9e0     20 4E 05 F1 | 	add	fp, #32
0e9e4     A7 12 02 FB | 	rdlong	arg01, fp
0e9e8     24 4E 85 F1 | 	sub	fp, #36
0e9ec     01 14 06 F6 | 	mov	arg02, #1
0e9f0     CC 4E B1 FD | 	call	#__system___float_tointeger
0e9f4     FD 14 02 F6 | 	mov	arg02, result1
0e9f8     11 13 02 F6 | 	mov	arg01, local03
0e9fc     60 EA B0 FD | 	call	#_psdpoke
0ea00     04 4E 05 F1 | 	add	fp, #4
0ea04     A7 22 02 FB | 	rdlong	local03, fp
0ea08     01 22 06 F1 | 	add	local03, #1
0ea0c     A7 22 62 FC | 	wrlong	local03, fp
0ea10     04 4E 85 F1 | 	sub	fp, #4
0ea14     02 00 00 FF 
0ea18     00 22 56 F2 | 	cmps	local03, ##1024 wc
0ea1c     A8 FE 9F CD |  if_b	jmp	#LR__1270
0ea20                 | LR__1272
0ea20                 | LR__1273
0ea20     A7 F0 03 F6 | 	mov	ptra, fp
0ea24     B2 00 A0 FD | 	call	#popregs_
0ea28                 | _do_defsnd_ret
0ea28     2D 00 64 FD | 	ret
0ea2c                 | 
0ea2c                 | ' 
0ea2c                 | ' '-------------------- defsprite
0ea2c                 | ' 
0ea2c                 | ' sub do_defsprite
0ea2c                 | _do_defsprite
0ea2c     07 4A 05 F6 | 	mov	COUNT_, #7
0ea30     A8 00 A0 FD | 	call	#pushregs_
0ea34     60 F0 07 F1 | 	add	ptra, #96
0ea38     80 C9 BF FD | 	call	#_pop
0ea3c     FD 16 02 F6 | 	mov	arg03, result1
0ea40     FE 14 02 F6 | 	mov	arg02, result2
0ea44     FF 12 02 F6 | 	mov	arg01, result3
0ea48     30 4E 05 F1 | 	add	fp, #48
0ea4c     A7 16 62 FC | 	wrlong	arg03, fp
0ea50     04 4E 05 F1 | 	add	fp, #4
0ea54     A7 14 62 FC | 	wrlong	arg02, fp
0ea58     04 4E 05 F1 | 	add	fp, #4
0ea5c     A7 12 62 FC | 	wrlong	arg01, fp
0ea60     38 4E 85 F1 | 	sub	fp, #56
0ea64     54 C9 BF FD | 	call	#_pop
0ea68     FD 16 02 F6 | 	mov	arg03, result1
0ea6c     FE 14 02 F6 | 	mov	arg02, result2
0ea70     FF 12 02 F6 | 	mov	arg01, result3
0ea74     24 4E 05 F1 | 	add	fp, #36
0ea78     A7 16 62 FC | 	wrlong	arg03, fp
0ea7c     04 4E 05 F1 | 	add	fp, #4
0ea80     A7 14 62 FC | 	wrlong	arg02, fp
0ea84     04 4E 05 F1 | 	add	fp, #4
0ea88     A7 12 62 FC | 	wrlong	arg01, fp
0ea8c     2C 4E 85 F1 | 	sub	fp, #44
0ea90     28 C9 BF FD | 	call	#_pop
0ea94     FD 16 02 F6 | 	mov	arg03, result1
0ea98     FE 14 02 F6 | 	mov	arg02, result2
0ea9c     FF 12 02 F6 | 	mov	arg01, result3
0eaa0     18 4E 05 F1 | 	add	fp, #24
0eaa4     A7 16 62 FC | 	wrlong	arg03, fp
0eaa8     04 4E 05 F1 | 	add	fp, #4
0eaac     A7 14 62 FC | 	wrlong	arg02, fp
0eab0     04 4E 05 F1 | 	add	fp, #4
0eab4     A7 12 62 FC | 	wrlong	arg01, fp
0eab8     20 4E 85 F1 | 	sub	fp, #32
0eabc     FC C8 BF FD | 	call	#_pop
0eac0     FD 16 02 F6 | 	mov	arg03, result1
0eac4     FE 14 02 F6 | 	mov	arg02, result2
0eac8     FF 12 02 F6 | 	mov	arg01, result3
0eacc     0C 4E 05 F1 | 	add	fp, #12
0ead0     A7 16 62 FC | 	wrlong	arg03, fp
0ead4     04 4E 05 F1 | 	add	fp, #4
0ead8     A7 14 62 FC | 	wrlong	arg02, fp
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 12 62 FC | 	wrlong	arg01, fp
0eae4     14 4E 85 F1 | 	sub	fp, #20
0eae8     D0 C8 BF FD | 	call	#_pop
0eaec     FF 16 02 F6 | 	mov	arg03, result3
0eaf0     A7 FA 61 FC | 	wrlong	result1, fp
0eaf4     04 4E 05 F1 | 	add	fp, #4
0eaf8     A7 FC 61 FC | 	wrlong	result2, fp
0eafc     04 4E 05 F1 | 	add	fp, #4
0eb00     A7 16 62 FC | 	wrlong	arg03, fp
0eb04     08 4E 85 F1 | 	sub	fp, #8
0eb08     A7 12 02 F6 | 	mov	arg01, fp
0eb0c     90 CA BF FD | 	call	#_converttoint
0eb10     3C 4E 05 F1 | 	add	fp, #60
0eb14     A7 FA 61 FC | 	wrlong	result1, fp
0eb18     30 4E 85 F1 | 	sub	fp, #48
0eb1c     A7 12 02 F6 | 	mov	arg01, fp
0eb20     0C 4E 85 F1 | 	sub	fp, #12
0eb24     78 CA BF FD | 	call	#_converttoint
0eb28     40 4E 05 F1 | 	add	fp, #64
0eb2c     A7 FA 61 FC | 	wrlong	result1, fp
0eb30     28 4E 85 F1 | 	sub	fp, #40
0eb34     A7 12 02 F6 | 	mov	arg01, fp
0eb38     18 4E 85 F1 | 	sub	fp, #24
0eb3c     60 CA BF FD | 	call	#_converttoint
0eb40     44 4E 05 F1 | 	add	fp, #68
0eb44     A7 FA 61 FC | 	wrlong	result1, fp
0eb48     20 4E 85 F1 | 	sub	fp, #32
0eb4c     A7 12 02 F6 | 	mov	arg01, fp
0eb50     24 4E 85 F1 | 	sub	fp, #36
0eb54     48 CA BF FD | 	call	#_converttoint
0eb58     48 4E 05 F1 | 	add	fp, #72
0eb5c     A7 FA 61 FC | 	wrlong	result1, fp
0eb60     18 4E 85 F1 | 	sub	fp, #24
0eb64     A7 12 02 F6 | 	mov	arg01, fp
0eb68     30 4E 85 F1 | 	sub	fp, #48
0eb6c     30 CA BF FD | 	call	#_converttoint
0eb70     4C 4E 05 F1 | 	add	fp, #76
0eb74     A7 FA 61 FC | 	wrlong	result1, fp
0eb78                 | ' 
0eb78                 | ' t5=pop()
0eb78                 | ' t4=pop()
0eb78                 | ' t3=pop()
0eb78                 | ' t2=pop()
0eb78                 | ' t1=pop()
0eb78                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0eb78                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0eb78     10 4E 85 F1 | 	sub	fp, #16
0eb7c     A7 16 02 FB | 	rdlong	arg03, fp
0eb80     3C 4E 85 F1 | 	sub	fp, #60
0eb84     02 16 66 F0 | 	shl	arg03, #2
0eb88     51 00 00 FF 
0eb8c     68 E5 05 F1 | 	add	objptr, ##41832
0eb90     F2 16 02 F1 | 	add	arg03, objptr
0eb94     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0eb98     51 00 00 FF 
0eb9c     68 E5 85 F1 | 	sub	objptr, ##41832
0eba0     2C 00 90 AD |  if_e	jmp	#LR__1280
0eba4     3C 4E 05 F1 | 	add	fp, #60
0eba8     A7 16 02 FB | 	rdlong	arg03, fp
0ebac     3C 4E 85 F1 | 	sub	fp, #60
0ebb0     02 16 66 F0 | 	shl	arg03, #2
0ebb4     51 00 00 FF 
0ebb8     68 E5 05 F1 | 	add	objptr, ##41832
0ebbc     F2 16 02 F1 | 	add	arg03, objptr
0ebc0     0B 13 02 FB | 	rdlong	arg01, arg03
0ebc4     51 00 00 FF 
0ebc8     68 E5 85 F1 | 	sub	objptr, ##41832
0ebcc     8C 5C B1 FD | 	call	#__system___gc_free
0ebd0                 | LR__1280
0ebd0     3C 4E 05 F1 | 	add	fp, #60
0ebd4     A7 1E 02 FB | 	rdlong	local01, fp
0ebd8     0C 4E 05 F1 | 	add	fp, #12
0ebdc     A7 16 02 FB | 	rdlong	arg03, fp
0ebe0     04 4E 05 F1 | 	add	fp, #4
0ebe4     A7 14 02 FB | 	rdlong	arg02, fp
0ebe8     0A 17 02 FD | 	qmul	arg03, arg02
0ebec     02 1E 66 F0 | 	shl	local01, #2
0ebf0     51 00 00 FF 
0ebf4     68 E5 05 F1 | 	add	objptr, ##41832
0ebf8     F2 1E 02 F1 | 	add	local01, objptr
0ebfc     4C 4E 85 F1 | 	sub	fp, #76
0ec00     51 00 00 FF 
0ec04     68 E5 85 F1 | 	sub	objptr, ##41832
0ec08     18 12 62 FD | 	getqx	arg01
0ec0c     10 5B B1 FD | 	call	#__system___gc_alloc_managed
0ec10     0F FB 61 FC | 	wrlong	result1, local01
0ec14                 | ' for y=a3 to a3+a5-1
0ec14     44 4E 05 F1 | 	add	fp, #68
0ec18     A7 20 02 FB | 	rdlong	local02, fp
0ec1c     0C 4E 05 F1 | 	add	fp, #12
0ec20     A7 20 62 FC | 	wrlong	local02, fp
0ec24     0C 4E 85 F1 | 	sub	fp, #12
0ec28     A7 22 02 FB | 	rdlong	local03, fp
0ec2c     08 4E 05 F1 | 	add	fp, #8
0ec30     A7 24 02 FB | 	rdlong	local04, fp
0ec34     4C 4E 85 F1 | 	sub	fp, #76
0ec38     12 23 02 F1 | 	add	local03, local04
0ec3c                 | LR__1281
0ec3c     50 4E 05 F1 | 	add	fp, #80
0ec40     A7 20 02 FB | 	rdlong	local02, fp
0ec44     50 4E 85 F1 | 	sub	fp, #80
0ec48     11 21 52 F2 | 	cmps	local02, local03 wc
0ec4c     F4 00 90 3D |  if_ae	jmp	#LR__1284
0ec50                 | '   for x=a2 to a4+a2-1
0ec50     40 4E 05 F1 | 	add	fp, #64
0ec54     A7 1E 02 FB | 	rdlong	local01, fp
0ec58     14 4E 05 F1 | 	add	fp, #20
0ec5c     A7 1E 62 FC | 	wrlong	local01, fp
0ec60     0C 4E 85 F1 | 	sub	fp, #12
0ec64     A7 26 02 FB | 	rdlong	local05, fp
0ec68     08 4E 85 F1 | 	sub	fp, #8
0ec6c     A7 28 02 FB | 	rdlong	local06, fp
0ec70     40 4E 85 F1 | 	sub	fp, #64
0ec74     14 27 02 F1 | 	add	local05, local06
0ec78                 | LR__1282
0ec78     54 4E 05 F1 | 	add	fp, #84
0ec7c     A7 1E 02 FB | 	rdlong	local01, fp
0ec80     54 4E 85 F1 | 	sub	fp, #84
0ec84     13 1F 52 F2 | 	cmps	local01, local05 wc
0ec88     A0 00 90 3D |  if_ae	jmp	#LR__1283
0ec8c     3C 4E 05 F1 | 	add	fp, #60
0ec90     A7 28 02 FB | 	rdlong	local06, fp
0ec94     18 4E 05 F1 | 	add	fp, #24
0ec98     A7 24 02 FB | 	rdlong	local04, fp
0ec9c     14 4E 85 F1 | 	sub	fp, #20
0eca0     A7 20 02 FB | 	rdlong	local02, fp
0eca4     10 4E 05 F1 | 	add	fp, #16
0eca8     A7 1E 02 FB | 	rdlong	local01, fp
0ecac     0F 17 02 F6 | 	mov	arg03, local01
0ecb0     0C 4E 85 F1 | 	sub	fp, #12
0ecb4     A7 14 02 FB | 	rdlong	arg02, fp
0ecb8     0A 17 82 F1 | 	sub	arg03, arg02
0ecbc     04 4E 05 F1 | 	add	fp, #4
0ecc0     A7 14 02 FB | 	rdlong	arg02, fp
0ecc4     0A 17 02 FD | 	qmul	arg03, arg02
0ecc8     02 28 66 F0 | 	shl	local06, #2
0eccc     51 00 00 FF 
0ecd0     68 E5 05 F1 | 	add	objptr, ##41832
0ecd4     F2 28 02 F1 | 	add	local06, objptr
0ecd8     14 29 02 FB | 	rdlong	local06, local06
0ecdc     12 2B 02 F6 | 	mov	local07, local04
0ece0     10 2B 82 F1 | 	sub	local07, local02
0ece4     51 00 00 FF 
0ece8     68 E5 85 F1 | 	sub	objptr, ##41832
0ecec     F2 12 02 FB | 	rdlong	arg01, objptr
0ecf0     12 13 02 F1 | 	add	arg01, local04
0ecf4     48 4E 85 F1 | 	sub	fp, #72
0ecf8     0A 1E 66 F0 | 	shl	local01, #10
0ecfc     0F 13 02 F1 | 	add	arg01, local01
0ed00     18 24 62 FD | 	getqx	local04
0ed04     12 2B 02 F1 | 	add	local07, local04
0ed08     14 2B 02 F1 | 	add	local07, local06
0ed0c     E0 E7 B0 FD | 	call	#_pspeek
0ed10     15 FB 41 FC | 	wrbyte	result1, local07
0ed14     54 4E 05 F1 | 	add	fp, #84
0ed18     A7 2A 02 FB | 	rdlong	local07, fp
0ed1c     01 2A 06 F1 | 	add	local07, #1
0ed20     A7 2A 62 FC | 	wrlong	local07, fp
0ed24     54 4E 85 F1 | 	sub	fp, #84
0ed28     4C FF 9F FD | 	jmp	#LR__1282
0ed2c                 | LR__1283
0ed2c     50 4E 05 F1 | 	add	fp, #80
0ed30     A7 2A 02 FB | 	rdlong	local07, fp
0ed34     01 2A 06 F1 | 	add	local07, #1
0ed38     A7 2A 62 FC | 	wrlong	local07, fp
0ed3c     50 4E 85 F1 | 	sub	fp, #80
0ed40     F8 FE 9F FD | 	jmp	#LR__1281
0ed44                 | LR__1284
0ed44     3C 4E 05 F1 | 	add	fp, #60
0ed48     A7 2A 02 FB | 	rdlong	local07, fp
0ed4c     15 13 02 F6 | 	mov	arg01, local07
0ed50     3C 4E 85 F1 | 	sub	fp, #60
0ed54     02 2A 66 F0 | 	shl	local07, #2
0ed58     51 00 00 FF 
0ed5c     68 E5 05 F1 | 	add	objptr, ##41832
0ed60     F2 2A 02 F1 | 	add	local07, objptr
0ed64     15 15 02 FB | 	rdlong	arg02, local07
0ed68     51 00 00 FF 
0ed6c     68 E5 85 F1 | 	sub	objptr, ##41832
0ed70     44 F4 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0ed74     3C 4E 05 F1 | 	add	fp, #60
0ed78     A7 12 02 FB | 	rdlong	arg01, fp
0ed7c     0C 4E 05 F1 | 	add	fp, #12
0ed80     A7 14 02 FB | 	rdlong	arg02, fp
0ed84     04 4E 05 F1 | 	add	fp, #4
0ed88     A7 16 02 FB | 	rdlong	arg03, fp
0ed8c     4C 4E 85 F1 | 	sub	fp, #76
0ed90     B4 F4 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ed94     A7 F0 03 F6 | 	mov	ptra, fp
0ed98     B2 00 A0 FD | 	call	#popregs_
0ed9c                 | _do_defsprite_ret
0ed9c     2D 00 64 FD | 	ret
0eda0                 | 
0eda0                 | ' 
0eda0                 | ' '-------------------- deg
0eda0                 | ' 
0eda0                 | ' sub do_deg
0eda0                 | _do_deg
0eda0     51 00 00 FF 
0eda4     BC E5 05 F1 | 	add	objptr, ##41916
0eda8     7D 47 9E FF 
0edac     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0edb0     04 E4 05 F1 | 	add	objptr, #4
0edb4     97 32 A1 FF 
0edb8     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0edbc     51 00 00 FF 
0edc0     C0 E5 85 F1 | 	sub	objptr, ##41920
0edc4                 | _do_deg_ret
0edc4     2D 00 64 FD | 	ret
0edc8                 | 
0edc8                 | ' 
0edc8                 | ' '-------------------- dir
0edc8                 | ' 
0edc8                 | ' sub do_dir
0edc8                 | _do_dir
0edc8     13 4A 05 F6 | 	mov	COUNT_, #19
0edcc     A8 00 A0 FD | 	call	#pushregs_
0edd0     01 00 00 FF 
0edd4     38 F0 07 F1 | 	add	ptra, ##568
0edd8                 | ' 
0edd8                 | ' print "Current directory: "; currentdir$ 
0edd8     00 12 06 F6 | 	mov	arg01, #0
0eddc     C8 74 B1 FD | 	call	#__system___getiolock_0542
0ede0     FD 12 02 F6 | 	mov	arg01, result1
0ede4     5C 1A B1 FD | 	call	#__system___lockmem
0ede8     83 01 00 FF 
0edec     EC 15 06 F6 | 	mov	arg02, ##@LR__5429
0edf0     00 12 06 F6 | 	mov	arg01, #0
0edf4     00 16 06 F6 | 	mov	arg03, #0
0edf8     3C 27 B1 FD | 	call	#__system___basic_print_string
0edfc     4A 00 00 FF 
0ee00     94 E4 05 F1 | 	add	objptr, ##38036
0ee04     F2 14 02 FB | 	rdlong	arg02, objptr
0ee08     4A 00 00 FF 
0ee0c     94 E4 85 F1 | 	sub	objptr, ##38036
0ee10     00 12 06 F6 | 	mov	arg01, #0
0ee14     00 16 06 F6 | 	mov	arg03, #0
0ee18     1C 27 B1 FD | 	call	#__system___basic_print_string
0ee1c     00 12 06 F6 | 	mov	arg01, #0
0ee20     0A 14 06 F6 | 	mov	arg02, #10
0ee24     00 16 06 F6 | 	mov	arg03, #0
0ee28     B4 26 B1 FD | 	call	#__system___basic_print_char
0ee2c     01 1E 06 F6 | 	mov	local01, #1
0ee30     00 12 06 F6 | 	mov	arg01, #0
0ee34     70 74 B1 FD | 	call	#__system___getiolock_0542
0ee38     FD 00 68 FC | 	wrlong	#0, result1
0ee3c     00 20 06 F6 | 	mov	local02, #0
0ee40     00 22 06 F6 | 	mov	local03, #0
0ee44                 | ' px=0
0ee44                 | ' for i=0 to 127: filelist(i)="" : next i
0ee44     00 24 06 F6 | 	mov	local04, #0
0ee48     1C 4E 05 F1 | 	add	fp, #28
0ee4c     97 12 48 FB | 	callpa	#(@LR__1291-@LR__1290)>>2,fcache_load_ptr_
0ee50                 | LR__1290
0ee50     12 27 02 F6 | 	mov	local05, local04
0ee54     02 26 66 F0 | 	shl	local05, #2
0ee58     A7 26 02 F1 | 	add	local05, fp
0ee5c     84 01 00 FF 
0ee60     00 28 06 F6 | 	mov	local06, ##@LR__5430
0ee64     13 29 62 FC | 	wrlong	local06, local05
0ee68     01 24 06 F1 | 	add	local04, #1
0ee6c     80 24 56 F2 | 	cmps	local04, #128 wc
0ee70     DC FF 9F CD |  if_b	jmp	#LR__1290
0ee74                 | LR__1291
0ee74     1C 4E 85 F1 | 	sub	fp, #28
0ee78     84 01 00 FF 
0ee7c     01 12 06 F6 | 	mov	arg01, ##@LR__5431
0ee80     10 14 06 F6 | 	mov	arg02, #16
0ee84     58 75 B1 FD | 	call	#__system___basic_dir
0ee88     FD 2A 02 F6 | 	mov	local07, result1
0ee8c     00 2C 06 F6 | 	mov	local08, #0
0ee90                 | ' filename=dir$("*", fbDirectory)
0ee90                 | ' n=0
0ee90                 | ' while filename <> "" andalso filename <> nil andalso n<128
0ee90                 | LR__1292
0ee90     84 01 00 FF 
0ee94     03 2E 06 F6 | 	mov	local09, ##@LR__5432
0ee98     15 13 02 F6 | 	mov	arg01, local07
0ee9c     17 15 02 F6 | 	mov	arg02, local09
0eea0     C8 19 B1 FD | 	call	#__system___string_cmp
0eea4     00 FA 0D F2 | 	cmp	result1, #0 wz
0eea8     68 00 90 AD |  if_e	jmp	#LR__1293
0eeac     00 2E 06 F6 | 	mov	local09, #0
0eeb0     15 13 02 F6 | 	mov	arg01, local07
0eeb4     00 14 06 F6 | 	mov	arg02, #0
0eeb8     B0 19 B1 FD | 	call	#__system___string_cmp
0eebc     00 FA 0D F2 | 	cmp	result1, #0 wz
0eec0     50 00 90 AD |  if_e	jmp	#LR__1293
0eec4     80 2C 56 F2 | 	cmps	local08, #128 wc
0eec8     48 00 90 3D |  if_ae	jmp	#LR__1293
0eecc     84 01 00 FF 
0eed0     04 12 06 F6 | 	mov	arg01, ##@LR__5433
0eed4     15 15 02 F6 | 	mov	arg02, local07
0eed8     C4 19 B1 FD | 	call	#__system___string_concat
0eedc     FD 2A 02 F6 | 	mov	local07, result1
0eee0     16 27 02 F6 | 	mov	local05, local08
0eee4     02 26 66 F0 | 	shl	local05, #2
0eee8     1C 4E 05 F1 | 	add	fp, #28
0eeec     A7 26 02 F1 | 	add	local05, fp
0eef0     13 2B 62 FC | 	wrlong	local07, local05
0eef4     01 2C 06 F1 | 	add	local08, #1
0eef8     00 26 06 F6 | 	mov	local05, #0
0eefc     00 12 06 F6 | 	mov	arg01, #0
0ef00     00 14 06 F6 | 	mov	arg02, #0
0ef04     1C 4E 85 F1 | 	sub	fp, #28
0ef08     D4 74 B1 FD | 	call	#__system___basic_dir
0ef0c     FD 2A 02 F6 | 	mov	local07, result1
0ef10     7C FF 9F FD | 	jmp	#LR__1292
0ef14                 | LR__1293
0ef14                 | ' for i=0 to n-1			' now sort this
0ef14     00 24 06 F6 | 	mov	local04, #0
0ef18     16 31 02 F6 | 	mov	local10, local08
0ef1c                 | LR__1294
0ef1c     18 25 52 F2 | 	cmps	local04, local10 wc
0ef20     DC 00 90 3D |  if_ae	jmp	#LR__1298
0ef24     00 32 06 F6 | 	mov	local11, #0
0ef28                 | '   swapped=false
0ef28                 | '   for j=0 to n-i-2
0ef28     00 34 06 F6 | 	mov	local12, #0
0ef2c     16 37 02 F6 | 	mov	local13, local08
0ef30     12 37 82 F1 | 	sub	local13, local04
0ef34     01 36 86 F1 | 	sub	local13, #1
0ef38                 | LR__1295
0ef38     1B 35 52 F2 | 	cmps	local12, local13 wc
0ef3c     B0 00 90 3D |  if_ae	jmp	#LR__1297
0ef40                 | '     if filelist(j) > filelist(j+1) then
0ef40     1A 2F 02 F6 | 	mov	local09, local12
0ef44     02 2E 66 F0 | 	shl	local09, #2
0ef48     1C 4E 05 F1 | 	add	fp, #28
0ef4c     A7 2E 02 F1 | 	add	local09, fp
0ef50     17 13 02 FB | 	rdlong	arg01, local09
0ef54     1A 2F 02 F6 | 	mov	local09, local12
0ef58     01 2E 06 F1 | 	add	local09, #1
0ef5c     17 29 02 F6 | 	mov	local06, local09
0ef60     02 28 66 F0 | 	shl	local06, #2
0ef64     A7 1E 02 F6 | 	mov	local01, fp
0ef68     A7 28 02 F1 | 	add	local06, fp
0ef6c     14 27 02 FB | 	rdlong	local05, local06
0ef70     13 15 02 F6 | 	mov	arg02, local05
0ef74     1C 4E 85 F1 | 	sub	fp, #28
0ef78     F0 18 B1 FD | 	call	#__system___string_cmp
0ef7c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ef80     64 00 90 CD |  if_b	jmp	#LR__1296
0ef84     1A 2F 02 F6 | 	mov	local09, local12
0ef88     01 2E 06 F1 | 	add	local09, #1
0ef8c     02 2E 66 F0 | 	shl	local09, #2
0ef90     1C 4E 05 F1 | 	add	fp, #28
0ef94     A7 2E 02 F1 | 	add	local09, fp
0ef98     17 33 02 FB | 	rdlong	local11, local09
0ef9c     1A 29 02 F6 | 	mov	local06, local12
0efa0     02 28 66 F0 | 	shl	local06, #2
0efa4     A7 28 02 F1 | 	add	local06, fp
0efa8     14 27 02 FB | 	rdlong	local05, local06
0efac     1A 2F 02 F6 | 	mov	local09, local12
0efb0     17 29 02 F6 | 	mov	local06, local09
0efb4     02 28 66 F0 | 	shl	local06, #2
0efb8     A7 1E 02 F6 | 	mov	local01, fp
0efbc     A7 28 02 F1 | 	add	local06, fp
0efc0     14 33 62 FC | 	wrlong	local11, local06
0efc4     1A 21 02 F6 | 	mov	local02, local12
0efc8     01 20 06 F1 | 	add	local02, #1
0efcc     10 39 02 F6 | 	mov	local14, local02
0efd0     02 38 66 F0 | 	shl	local14, #2
0efd4     A7 3A 02 F6 | 	mov	local15, fp
0efd8     A7 38 02 F1 | 	add	local14, fp
0efdc     1C 27 62 FC | 	wrlong	local05, local14
0efe0     01 32 66 F6 | 	neg	local11, #1
0efe4     1C 4E 85 F1 | 	sub	fp, #28
0efe8                 | LR__1296
0efe8     01 34 06 F1 | 	add	local12, #1
0efec     48 FF 9F FD | 	jmp	#LR__1295
0eff0                 | LR__1297
0eff0                 | ' if not swapped then exit for
0eff0     19 3D 22 F6 | 	not	local16, local11
0eff4     00 3C 0E F2 | 	cmp	local16, #0 wz
0eff8     01 24 06 A1 |  if_e	add	local04, #1
0effc     1C FF 9F AD |  if_e	jmp	#LR__1294
0f000                 | LR__1298
0f000                 | ' for i=0 to n-1
0f000     00 24 06 F6 | 	mov	local04, #0
0f004     16 3F 02 F6 | 	mov	local17, local08
0f008                 | LR__1299
0f008     1F 25 52 F2 | 	cmps	local04, local17 wc
0f00c     94 00 90 3D |  if_ae	jmp	#LR__1301
0f010                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0f010     00 12 06 F6 | 	mov	arg01, #0
0f014     90 72 B1 FD | 	call	#__system___getiolock_0542
0f018     FD 12 02 F6 | 	mov	arg01, result1
0f01c     24 18 B1 FD | 	call	#__system___lockmem
0f020     12 21 02 F6 | 	mov	local02, local04
0f024     02 20 66 F0 | 	shl	local02, #2
0f028     1C 4E 05 F1 | 	add	fp, #28
0f02c     A7 38 02 F6 | 	mov	local14, fp
0f030     A7 20 02 F1 | 	add	local02, fp
0f034     10 15 02 FB | 	rdlong	arg02, local02
0f038     00 1E 06 F6 | 	mov	local01, #0
0f03c     00 12 06 F6 | 	mov	arg01, #0
0f040     00 16 06 F6 | 	mov	arg03, #0
0f044     1C 4E 85 F1 | 	sub	fp, #28
0f048     EC 24 B1 FD | 	call	#__system___basic_print_string
0f04c     00 12 06 F6 | 	mov	arg01, #0
0f050     54 72 B1 FD | 	call	#__system___getiolock_0542
0f054     FD 00 68 FC | 	wrlong	#0, result1
0f058     40 22 06 F1 | 	add	local03, #64
0f05c     11 13 02 F6 | 	mov	arg01, local03
0f060     30 FE B0 FD | 	call	#_hg010b_spin2_setcursorx
0f064     00 23 56 F2 | 	cmps	local03, #256 wc
0f068     30 00 90 CD |  if_b	jmp	#LR__1300
0f06c     00 22 06 F6 | 	mov	local03, #0
0f070     00 12 06 F6 | 	mov	arg01, #0
0f074     30 72 B1 FD | 	call	#__system___getiolock_0542
0f078     FD 12 02 F6 | 	mov	arg01, result1
0f07c     C4 17 B1 FD | 	call	#__system___lockmem
0f080     00 12 06 F6 | 	mov	arg01, #0
0f084     0A 14 06 F6 | 	mov	arg02, #10
0f088     00 16 06 F6 | 	mov	arg03, #0
0f08c     50 24 B1 FD | 	call	#__system___basic_print_char
0f090     00 12 06 F6 | 	mov	arg01, #0
0f094     10 72 B1 FD | 	call	#__system___getiolock_0542
0f098     FD 00 68 FC | 	wrlong	#0, result1
0f09c                 | LR__1300
0f09c     01 24 06 F1 | 	add	local04, #1
0f0a0     64 FF 9F FD | 	jmp	#LR__1299
0f0a4                 | LR__1301
0f0a4                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f0a4     80 2C 56 F2 | 	cmps	local08, #128 wc
0f0a8     44 00 90 CD |  if_b	jmp	#LR__1302
0f0ac     00 12 06 F6 | 	mov	arg01, #0
0f0b0     F4 71 B1 FD | 	call	#__system___getiolock_0542
0f0b4     FD 12 02 F6 | 	mov	arg01, result1
0f0b8     88 17 B1 FD | 	call	#__system___lockmem
0f0bc     84 01 00 FF 
0f0c0     0B 14 06 F6 | 	mov	arg02, ##@LR__5434
0f0c4     00 12 06 F6 | 	mov	arg01, #0
0f0c8     00 16 06 F6 | 	mov	arg03, #0
0f0cc     68 24 B1 FD | 	call	#__system___basic_print_string
0f0d0     00 12 06 F6 | 	mov	arg01, #0
0f0d4     0A 14 06 F6 | 	mov	arg02, #10
0f0d8     00 16 06 F6 | 	mov	arg03, #0
0f0dc     00 24 B1 FD | 	call	#__system___basic_print_char
0f0e0     00 12 06 F6 | 	mov	arg01, #0
0f0e4     C0 71 B1 FD | 	call	#__system___getiolock_0542
0f0e8     FD 00 68 FC | 	wrlong	#0, result1
0f0ec     00 1E 06 F6 | 	mov	local01, #0
0f0f0                 | LR__1302
0f0f0                 | ' print
0f0f0     00 12 06 F6 | 	mov	arg01, #0
0f0f4     B0 71 B1 FD | 	call	#__system___getiolock_0542
0f0f8     FD 12 02 F6 | 	mov	arg01, result1
0f0fc     44 17 B1 FD | 	call	#__system___lockmem
0f100     00 12 06 F6 | 	mov	arg01, #0
0f104     0A 14 06 F6 | 	mov	arg02, #10
0f108     00 16 06 F6 | 	mov	arg03, #0
0f10c     D0 23 B1 FD | 	call	#__system___basic_print_char
0f110     00 12 06 F6 | 	mov	arg01, #0
0f114     90 71 B1 FD | 	call	#__system___getiolock_0542
0f118     FD 00 68 FC | 	wrlong	#0, result1
0f11c     00 28 06 F6 | 	mov	local06, #0
0f120     00 2C 06 F6 | 	mov	local08, #0
0f124     00 22 06 F6 | 	mov	local03, #0
0f128                 | ' return cursor_y
0f128     3E E4 05 F1 | 	add	objptr, #62
0f12c     F2 40 C2 FA | 	rdbyte	local18, objptr
0f130     3E E4 85 F1 | 	sub	objptr, #62
0f134     84 01 00 FF 
0f138     3D 12 06 F6 | 	mov	arg01, ##@LR__5435
0f13c     21 14 06 F6 | 	mov	arg02, #33
0f140     9C 72 B1 FD | 	call	#__system___basic_dir
0f144     FD 2A 02 F6 | 	mov	local07, result1
0f148                 | ' n=0
0f148                 | ' px=0: py=v.getcursory()
0f148                 | ' filename = dir$("*", fbNormal )   
0f148                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0f148                 | LR__1303
0f148     84 01 00 FF 
0f14c     3F 2E 06 F6 | 	mov	local09, ##@LR__5436
0f150     15 13 02 F6 | 	mov	arg01, local07
0f154     17 15 02 F6 | 	mov	arg02, local09
0f158     10 17 B1 FD | 	call	#__system___string_cmp
0f15c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f160     54 00 90 AD |  if_e	jmp	#LR__1304
0f164     00 2E 06 F6 | 	mov	local09, #0
0f168     15 13 02 F6 | 	mov	arg01, local07
0f16c     00 14 06 F6 | 	mov	arg02, #0
0f170     F8 16 B1 FD | 	call	#__system___string_cmp
0f174     00 FA 0D F2 | 	cmp	result1, #0 wz
0f178     3C 00 90 AD |  if_e	jmp	#LR__1304
0f17c     80 2C 56 F2 | 	cmps	local08, #128 wc
0f180     34 00 90 3D |  if_ae	jmp	#LR__1304
0f184     16 27 02 F6 | 	mov	local05, local08
0f188     02 26 66 F0 | 	shl	local05, #2
0f18c     1C 4E 05 F1 | 	add	fp, #28
0f190     A7 26 02 F1 | 	add	local05, fp
0f194     13 2B 62 FC | 	wrlong	local07, local05
0f198     01 2C 06 F1 | 	add	local08, #1
0f19c     00 26 06 F6 | 	mov	local05, #0
0f1a0     00 12 06 F6 | 	mov	arg01, #0
0f1a4     00 14 06 F6 | 	mov	arg02, #0
0f1a8     1C 4E 85 F1 | 	sub	fp, #28
0f1ac     30 72 B1 FD | 	call	#__system___basic_dir
0f1b0     FD 2A 02 F6 | 	mov	local07, result1
0f1b4     90 FF 9F FD | 	jmp	#LR__1303
0f1b8                 | LR__1304
0f1b8                 | ' for i =0 to n-1
0f1b8     00 24 06 F6 | 	mov	local04, #0
0f1bc                 | LR__1305
0f1bc     16 25 52 F2 | 	cmps	local04, local08 wc
0f1c0     D8 00 90 3D |  if_ae	jmp	#LR__1309
0f1c4     00 32 06 F6 | 	mov	local11, #0
0f1c8                 | '   swapped=false
0f1c8                 | '   for j=0 to n-i-2
0f1c8     00 34 06 F6 | 	mov	local12, #0
0f1cc     16 43 02 F6 | 	mov	local19, local08
0f1d0     12 43 82 F1 | 	sub	local19, local04
0f1d4     01 42 86 F1 | 	sub	local19, #1
0f1d8                 | LR__1306
0f1d8     21 35 52 F2 | 	cmps	local12, local19 wc
0f1dc     AC 00 90 3D |  if_ae	jmp	#LR__1308
0f1e0                 | '     if filelist(j) > filelist(j+1) then
0f1e0     1A 2F 02 F6 | 	mov	local09, local12
0f1e4     02 2E 66 F0 | 	shl	local09, #2
0f1e8     1C 4E 05 F1 | 	add	fp, #28
0f1ec     A7 2E 02 F1 | 	add	local09, fp
0f1f0     17 13 02 FB | 	rdlong	arg01, local09
0f1f4     1A 2F 02 F6 | 	mov	local09, local12
0f1f8     01 2E 06 F1 | 	add	local09, #1
0f1fc     17 29 02 F6 | 	mov	local06, local09
0f200     02 28 66 F0 | 	shl	local06, #2
0f204     A7 1E 02 F6 | 	mov	local01, fp
0f208     A7 28 02 F1 | 	add	local06, fp
0f20c     14 27 02 FB | 	rdlong	local05, local06
0f210     13 15 02 F6 | 	mov	arg02, local05
0f214     1C 4E 85 F1 | 	sub	fp, #28
0f218     50 16 B1 FD | 	call	#__system___string_cmp
0f21c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f220     60 00 90 CD |  if_b	jmp	#LR__1307
0f224     1A 2F 02 F6 | 	mov	local09, local12
0f228     01 2E 06 F1 | 	add	local09, #1
0f22c     02 2E 66 F0 | 	shl	local09, #2
0f230     1C 4E 05 F1 | 	add	fp, #28
0f234     A7 2E 02 F1 | 	add	local09, fp
0f238     17 3D 02 FB | 	rdlong	local16, local09
0f23c     1A 29 02 F6 | 	mov	local06, local12
0f240     02 28 66 F0 | 	shl	local06, #2
0f244     A7 28 02 F1 | 	add	local06, fp
0f248     14 27 02 FB | 	rdlong	local05, local06
0f24c     1A 2F 02 F6 | 	mov	local09, local12
0f250     17 29 02 F6 | 	mov	local06, local09
0f254     02 28 66 F0 | 	shl	local06, #2
0f258     A7 1E 02 F6 | 	mov	local01, fp
0f25c     A7 28 02 F1 | 	add	local06, fp
0f260     14 3D 62 FC | 	wrlong	local16, local06
0f264     1A 39 02 F6 | 	mov	local14, local12
0f268     01 38 06 F1 | 	add	local14, #1
0f26c     02 38 66 F0 | 	shl	local14, #2
0f270     A7 3A 02 F6 | 	mov	local15, fp
0f274     A7 38 02 F1 | 	add	local14, fp
0f278     1C 27 62 FC | 	wrlong	local05, local14
0f27c     01 32 66 F6 | 	neg	local11, #1
0f280     1C 4E 85 F1 | 	sub	fp, #28
0f284                 | LR__1307
0f284     01 34 06 F1 | 	add	local12, #1
0f288     4C FF 9F FD | 	jmp	#LR__1306
0f28c                 | LR__1308
0f28c                 | ' if not swapped then exit for
0f28c     19 3D 22 F6 | 	not	local16, local11
0f290     00 3C 0E F2 | 	cmp	local16, #0 wz
0f294     01 24 06 A1 |  if_e	add	local04, #1
0f298     20 FF 9F AD |  if_e	jmp	#LR__1305
0f29c                 | LR__1309
0f29c                 | ' for i=0 to n-1
0f29c     00 24 06 F6 | 	mov	local04, #0
0f2a0                 | LR__1310
0f2a0     16 25 52 F2 | 	cmps	local04, local08 wc
0f2a4     8C 00 90 3D |  if_ae	jmp	#LR__1312
0f2a8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0f2a8     00 12 06 F6 | 	mov	arg01, #0
0f2ac     F8 6F B1 FD | 	call	#__system___getiolock_0542
0f2b0     FD 12 02 F6 | 	mov	arg01, result1
0f2b4     8C 15 B1 FD | 	call	#__system___lockmem
0f2b8     12 21 02 F6 | 	mov	local02, local04
0f2bc     02 20 66 F0 | 	shl	local02, #2
0f2c0     1C 4E 05 F1 | 	add	fp, #28
0f2c4     A7 20 02 F1 | 	add	local02, fp
0f2c8     10 15 02 FB | 	rdlong	arg02, local02
0f2cc     00 12 06 F6 | 	mov	arg01, #0
0f2d0     00 16 06 F6 | 	mov	arg03, #0
0f2d4     1C 4E 85 F1 | 	sub	fp, #28
0f2d8     5C 22 B1 FD | 	call	#__system___basic_print_string
0f2dc     00 12 06 F6 | 	mov	arg01, #0
0f2e0     C4 6F B1 FD | 	call	#__system___getiolock_0542
0f2e4     FD 00 68 FC | 	wrlong	#0, result1
0f2e8     40 22 06 F1 | 	add	local03, #64
0f2ec     11 13 02 F6 | 	mov	arg01, local03
0f2f0     A0 FB B0 FD | 	call	#_hg010b_spin2_setcursorx
0f2f4     00 23 56 F2 | 	cmps	local03, #256 wc
0f2f8     30 00 90 CD |  if_b	jmp	#LR__1311
0f2fc     00 22 06 F6 | 	mov	local03, #0
0f300     00 12 06 F6 | 	mov	arg01, #0
0f304     A0 6F B1 FD | 	call	#__system___getiolock_0542
0f308     FD 12 02 F6 | 	mov	arg01, result1
0f30c     34 15 B1 FD | 	call	#__system___lockmem
0f310     00 12 06 F6 | 	mov	arg01, #0
0f314     0A 14 06 F6 | 	mov	arg02, #10
0f318     00 16 06 F6 | 	mov	arg03, #0
0f31c     C0 21 B1 FD | 	call	#__system___basic_print_char
0f320     00 12 06 F6 | 	mov	arg01, #0
0f324     80 6F B1 FD | 	call	#__system___getiolock_0542
0f328     FD 00 68 FC | 	wrlong	#0, result1
0f32c                 | LR__1311
0f32c     01 24 06 F1 | 	add	local04, #1
0f330     6C FF 9F FD | 	jmp	#LR__1310
0f334                 | LR__1312
0f334                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f334     80 2C 56 F2 | 	cmps	local08, #128 wc
0f338     40 00 90 CD |  if_b	jmp	#LR__1313
0f33c     00 12 06 F6 | 	mov	arg01, #0
0f340     64 6F B1 FD | 	call	#__system___getiolock_0542
0f344     FD 12 02 F6 | 	mov	arg01, result1
0f348     F8 14 B1 FD | 	call	#__system___lockmem
0f34c     84 01 00 FF 
0f350     40 14 06 F6 | 	mov	arg02, ##@LR__5437
0f354     00 12 06 F6 | 	mov	arg01, #0
0f358     00 16 06 F6 | 	mov	arg03, #0
0f35c     D8 21 B1 FD | 	call	#__system___basic_print_string
0f360     00 12 06 F6 | 	mov	arg01, #0
0f364     0A 14 06 F6 | 	mov	arg02, #10
0f368     00 16 06 F6 | 	mov	arg03, #0
0f36c     70 21 B1 FD | 	call	#__system___basic_print_char
0f370     00 12 06 F6 | 	mov	arg01, #0
0f374     30 6F B1 FD | 	call	#__system___getiolock_0542
0f378     FD 00 68 FC | 	wrlong	#0, result1
0f37c                 | LR__1313
0f37c                 | ' print
0f37c     00 12 06 F6 | 	mov	arg01, #0
0f380     24 6F B1 FD | 	call	#__system___getiolock_0542
0f384     FD 12 02 F6 | 	mov	arg01, result1
0f388     B8 14 B1 FD | 	call	#__system___lockmem
0f38c     00 12 06 F6 | 	mov	arg01, #0
0f390     0A 14 06 F6 | 	mov	arg02, #10
0f394     00 16 06 F6 | 	mov	arg03, #0
0f398     44 21 B1 FD | 	call	#__system___basic_print_char
0f39c     00 12 06 F6 | 	mov	arg01, #0
0f3a0     04 6F B1 FD | 	call	#__system___getiolock_0542
0f3a4     FD 00 68 FC | 	wrlong	#0, result1
0f3a8     A7 F0 03 F6 | 	mov	ptra, fp
0f3ac     B2 00 A0 FD | 	call	#popregs_
0f3b0                 | _do_dir_ret
0f3b0     2D 00 64 FD | 	ret
0f3b4                 | 
0f3b4                 | ' 
0f3b4                 | ' '-------------------- dpeek
0f3b4                 | ' 
0f3b4                 | ' sub do_dpeek
0f3b4                 | _do_dpeek
0f3b4     00 4A 05 F6 | 	mov	COUNT_, #0
0f3b8     A8 00 A0 FD | 	call	#pushregs_
0f3bc     14 F0 07 F1 | 	add	ptra, #20
0f3c0     F8 BF BF FD | 	call	#_pop
0f3c4     A7 FA 61 FC | 	wrlong	result1, fp
0f3c8     04 4E 05 F1 | 	add	fp, #4
0f3cc     A7 FC 61 FC | 	wrlong	result2, fp
0f3d0     04 4E 05 F1 | 	add	fp, #4
0f3d4     A7 FE 61 FC | 	wrlong	result3, fp
0f3d8     08 4E 85 F1 | 	sub	fp, #8
0f3dc     A7 12 02 F6 | 	mov	arg01, fp
0f3e0     BC C1 BF FD | 	call	#_converttoint
0f3e4     0C 4E 05 F1 | 	add	fp, #12
0f3e8     A7 FA 61 FC | 	wrlong	result1, fp
0f3ec                 | ' 
0f3ec                 | ' t1=pop()
0f3ec                 | ' a=converttoint(t1)
0f3ec                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
0f3ec     0C 4E 85 F1 | 	sub	fp, #12
0f3f0     00 04 00 FF 
0f3f4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f3f8     1C 00 90 3D |  if_ae	jmp	#LR__1320
0f3fc     0C 4E 05 F1 | 	add	fp, #12
0f400     A7 12 02 FB | 	rdlong	arg01, fp
0f404     09 FB E1 FA | 	rdword	result1, arg01
0f408     04 4E 05 F1 | 	add	fp, #4
0f40c     A7 FA 61 FC | 	wrlong	result1, fp
0f410     10 4E 85 F1 | 	sub	fp, #16
0f414     1C 00 90 FD | 	jmp	#LR__1321
0f418                 | LR__1320
0f418     0C 4E 05 F1 | 	add	fp, #12
0f41c     A7 12 02 FB | 	rdlong	arg01, fp
0f420     0C 4E 85 F1 | 	sub	fp, #12
0f424     78 E1 B0 FD | 	call	#_psdpeek
0f428     10 4E 05 F1 | 	add	fp, #16
0f42c     A7 FA 61 FC | 	wrlong	result1, fp
0f430     10 4E 85 F1 | 	sub	fp, #16
0f434                 | LR__1321
0f434     08 4E 05 F1 | 	add	fp, #8
0f438     A7 3A 68 FC | 	wrlong	#29, fp
0f43c     08 4E 05 F1 | 	add	fp, #8
0f440     A7 12 02 FB | 	rdlong	arg01, fp
0f444     10 4E 85 F1 | 	sub	fp, #16
0f448     A7 12 62 FC | 	wrlong	arg01, fp
0f44c     A7 12 02 F6 | 	mov	arg01, fp
0f450     00 C0 BF FD | 	call	#_push
0f454     A7 F0 03 F6 | 	mov	ptra, fp
0f458     B2 00 A0 FD | 	call	#popregs_
0f45c                 | _do_dpeek_ret
0f45c     2D 00 64 FD | 	ret
0f460                 | 
0f460                 | ' 
0f460                 | ' '-------------------- dpoke
0f460                 | ' 
0f460                 | ' sub do_dpoke
0f460                 | _do_dpoke
0f460     01 4A 05 F6 | 	mov	COUNT_, #1
0f464     A8 00 A0 FD | 	call	#pushregs_
0f468     20 F0 07 F1 | 	add	ptra, #32
0f46c     4C BF BF FD | 	call	#_pop
0f470     FD 14 02 F6 | 	mov	arg02, result1
0f474     FE 12 02 F6 | 	mov	arg01, result2
0f478     FF 1E 02 F6 | 	mov	local01, result3
0f47c     A7 14 62 FC | 	wrlong	arg02, fp
0f480     04 4E 05 F1 | 	add	fp, #4
0f484     A7 12 62 FC | 	wrlong	arg01, fp
0f488     04 4E 05 F1 | 	add	fp, #4
0f48c     A7 1E 62 FC | 	wrlong	local01, fp
0f490     08 4E 85 F1 | 	sub	fp, #8
0f494     24 BF BF FD | 	call	#_pop
0f498     FF 1E 02 F6 | 	mov	local01, result3
0f49c     0C 4E 05 F1 | 	add	fp, #12
0f4a0     A7 FA 61 FC | 	wrlong	result1, fp
0f4a4     04 4E 05 F1 | 	add	fp, #4
0f4a8     A7 FC 61 FC | 	wrlong	result2, fp
0f4ac     04 4E 05 F1 | 	add	fp, #4
0f4b0     A7 1E 62 FC | 	wrlong	local01, fp
0f4b4     08 4E 85 F1 | 	sub	fp, #8
0f4b8     A7 12 02 F6 | 	mov	arg01, fp
0f4bc     0C 4E 85 F1 | 	sub	fp, #12
0f4c0     DC C0 BF FD | 	call	#_converttoint
0f4c4     18 4E 05 F1 | 	add	fp, #24
0f4c8     A7 FA 61 FC | 	wrlong	result1, fp
0f4cc     18 4E 85 F1 | 	sub	fp, #24
0f4d0     A7 12 02 F6 | 	mov	arg01, fp
0f4d4     C8 C0 BF FD | 	call	#_converttoint
0f4d8     1C 4E 05 F1 | 	add	fp, #28
0f4dc     A7 FA 61 FC | 	wrlong	result1, fp
0f4e0                 | ' 
0f4e0                 | ' t1=pop() 'value
0f4e0                 | ' t2=pop() 
0f4e0                 | ' a=converttoint(t2) : v=converttoint(t1)
0f4e0                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
0f4e0     04 4E 85 F1 | 	sub	fp, #4
0f4e4     A7 1E 02 FB | 	rdlong	local01, fp
0f4e8     18 4E 85 F1 | 	sub	fp, #24
0f4ec     00 04 00 FF 
0f4f0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
0f4f4     1C 00 90 3D |  if_ae	jmp	#LR__1330
0f4f8     18 4E 05 F1 | 	add	fp, #24
0f4fc     A7 12 02 FB | 	rdlong	arg01, fp
0f500     04 4E 05 F1 | 	add	fp, #4
0f504     A7 14 02 FB | 	rdlong	arg02, fp
0f508     1C 4E 85 F1 | 	sub	fp, #28
0f50c     09 15 52 FC | 	wrword	arg02, arg01
0f510     18 00 90 FD | 	jmp	#LR__1331
0f514                 | LR__1330
0f514     18 4E 05 F1 | 	add	fp, #24
0f518     A7 12 02 FB | 	rdlong	arg01, fp
0f51c     04 4E 05 F1 | 	add	fp, #4
0f520     A7 14 02 FB | 	rdlong	arg02, fp
0f524     1C 4E 85 F1 | 	sub	fp, #28
0f528     34 DF B0 FD | 	call	#_psdpoke
0f52c                 | LR__1331
0f52c     A7 F0 03 F6 | 	mov	ptra, fp
0f530     B2 00 A0 FD | 	call	#popregs_
0f534                 | _do_dpoke_ret
0f534     2D 00 64 FD | 	ret
0f538                 | 
0f538                 | ' '-------------------- draw
0f538                 | ' 
0f538                 | ' sub do_draw
0f538                 | _do_draw
0f538     00 4A 05 F6 | 	mov	COUNT_, #0
0f53c     A8 00 A0 FD | 	call	#pushregs_
0f540     20 F0 07 F1 | 	add	ptra, #32
0f544     74 BE BF FD | 	call	#_pop
0f548     FD 1A 02 F6 | 	mov	arg05, result1
0f54c     FE 18 02 F6 | 	mov	arg04, result2
0f550     FF 16 02 F6 | 	mov	arg03, result3
0f554     0C 4E 05 F1 | 	add	fp, #12
0f558     A7 1A 62 FC | 	wrlong	arg05, fp
0f55c     04 4E 05 F1 | 	add	fp, #4
0f560     A7 18 62 FC | 	wrlong	arg04, fp
0f564     04 4E 05 F1 | 	add	fp, #4
0f568     A7 16 62 FC | 	wrlong	arg03, fp
0f56c     14 4E 85 F1 | 	sub	fp, #20
0f570     48 BE BF FD | 	call	#_pop
0f574     FF 1A 02 F6 | 	mov	arg05, result3
0f578     A7 FA 61 FC | 	wrlong	result1, fp
0f57c     04 4E 05 F1 | 	add	fp, #4
0f580     A7 FC 61 FC | 	wrlong	result2, fp
0f584     04 4E 05 F1 | 	add	fp, #4
0f588     A7 1A 62 FC | 	wrlong	arg05, fp
0f58c     08 4E 85 F1 | 	sub	fp, #8
0f590     A7 12 02 F6 | 	mov	arg01, fp
0f594     08 C0 BF FD | 	call	#_converttoint
0f598     18 4E 05 F1 | 	add	fp, #24
0f59c     A7 FA 61 FC | 	wrlong	result1, fp
0f5a0     0C 4E 85 F1 | 	sub	fp, #12
0f5a4     A7 12 02 F6 | 	mov	arg01, fp
0f5a8     0C 4E 85 F1 | 	sub	fp, #12
0f5ac     F0 BF BF FD | 	call	#_converttoint
0f5b0     1C 4E 05 F1 | 	add	fp, #28
0f5b4     A7 FA 61 FC | 	wrlong	result1, fp
0f5b8     37 00 00 FF 
0f5bc     2C E4 05 F1 | 	add	objptr, ##28204
0f5c0     F2 12 02 FB | 	rdlong	arg01, objptr
0f5c4     04 E4 05 F1 | 	add	objptr, #4
0f5c8     F2 14 02 FB | 	rdlong	arg02, objptr
0f5cc     04 4E 85 F1 | 	sub	fp, #4
0f5d0     A7 16 02 FB | 	rdlong	arg03, fp
0f5d4     FD 18 02 F6 | 	mov	arg04, result1
0f5d8     18 4E 85 F1 | 	sub	fp, #24
0f5dc     08 E4 85 F1 | 	sub	objptr, #8
0f5e0     F2 1A 02 FB | 	rdlong	arg05, objptr
0f5e4     37 00 00 FF 
0f5e8     28 E4 85 F1 | 	sub	objptr, ##28200
0f5ec     54 EF B0 FD | 	call	#_hg010b_spin2_draw
0f5f0     18 4E 05 F1 | 	add	fp, #24
0f5f4     A7 1A 02 FB | 	rdlong	arg05, fp
0f5f8     37 00 00 FF 
0f5fc     2C E4 05 F1 | 	add	objptr, ##28204
0f600     F2 1A 62 FC | 	wrlong	arg05, objptr
0f604     04 4E 05 F1 | 	add	fp, #4
0f608     A7 1A 02 FB | 	rdlong	arg05, fp
0f60c     1C 4E 85 F1 | 	sub	fp, #28
0f610     04 E4 05 F1 | 	add	objptr, #4
0f614     F2 1A 62 FC | 	wrlong	arg05, objptr
0f618     37 00 00 FF 
0f61c     30 E4 85 F1 | 	sub	objptr, ##28208
0f620     A7 F0 03 F6 | 	mov	ptra, fp
0f624     B2 00 A0 FD | 	call	#popregs_
0f628                 | _do_draw_ret
0f628     2D 00 64 FD | 	ret
0f62c                 | 
0f62c                 | ' 
0f62c                 | ' '-------------------- else
0f62c                 | ' 
0f62c                 | ' sub do_else
0f62c                 | _do_else
0f62c     4A 00 00 FF 
0f630     7C E4 05 F1 | 	add	objptr, ##38012
0f634     F2 00 02 FB | 	rdlong	_var01, objptr
0f638     01 00 86 F1 | 	sub	_var01, #1
0f63c     04 E4 05 F1 | 	add	objptr, #4
0f640     F2 00 62 FC | 	wrlong	_var01, objptr
0f644     4A 00 00 FF 
0f648     80 E4 85 F1 | 	sub	objptr, ##38016
0f64c                 | _do_else_ret
0f64c     2D 00 64 FD | 	ret
0f650                 | 
0f650                 | ' 
0f650                 | ' '-------------------- end
0f650                 | ' 
0f650                 | ' sub do_end
0f650                 | _do_end
0f650     4A 00 00 FF 
0f654     7C E4 05 F1 | 	add	objptr, ##38012
0f658     F2 00 02 FB | 	rdlong	_var01, objptr
0f65c     01 00 86 F1 | 	sub	_var01, #1
0f660     04 E4 05 F1 | 	add	objptr, #4
0f664     F2 00 62 FC | 	wrlong	_var01, objptr
0f668     06 00 00 FF 
0f66c     38 E4 05 F1 | 	add	objptr, ##3128
0f670     FF FF BF FF 
0f674     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0f678     50 00 00 FF 
0f67c     B8 E4 85 F1 | 	sub	objptr, ##41144
0f680                 | _do_end_ret
0f680     2D 00 64 FD | 	ret
0f684                 | 
0f684                 | ' 
0f684                 | ' '-------------------- enter
0f684                 | ' 
0f684                 | ' sub do_enter
0f684                 | _do_enter
0f684     02 00 00 FF 
0f688     D2 12 06 F6 | 	mov	arg01, ##1234
0f68c     44 22 B0 FD | 	call	#_do_load
0f690                 | _do_enter_ret
0f690     2D 00 64 FD | 	ret
0f694                 | 
0f694                 | ' 
0f694                 | ' '------------------- error processing
0f694                 | ' 
0f694                 | ' sub do_error
0f694                 | _do_error
0f694     01 4A 05 F6 | 	mov	COUNT_, #1
0f698     A8 00 A0 FD | 	call	#pushregs_
0f69c     4A 00 00 FF 
0f6a0     80 E4 05 F1 | 	add	objptr, ##38016
0f6a4     F2 18 02 FB | 	rdlong	arg04, objptr
0f6a8     0C 17 02 F6 | 	mov	arg03, arg04
0f6ac     01 16 66 F0 | 	shl	arg03, #1
0f6b0     0C 17 02 F1 | 	add	arg03, arg04
0f6b4     02 16 66 F0 | 	shl	arg03, #2
0f6b8     03 00 00 FF 
0f6bc     04 E4 85 F1 | 	sub	objptr, ##1540
0f6c0     F2 16 02 F1 | 	add	arg03, objptr
0f6c4     0B 1F 02 FB | 	rdlong	local01, arg03
0f6c8                 | ' r=compiledline(lineptr_e).result.uresult
0f6c8                 | ' print "Error ";r;": ";errors$(r)
0f6c8     00 12 06 F6 | 	mov	arg01, #0
0f6cc     47 00 00 FF 
0f6d0     7C E4 85 F1 | 	sub	objptr, ##36476
0f6d4     D0 6B B1 FD | 	call	#__system___getiolock_0542
0f6d8     FD 12 02 F6 | 	mov	arg01, result1
0f6dc     64 11 B1 FD | 	call	#__system___lockmem
0f6e0     84 01 00 FF 
0f6e4     72 14 06 F6 | 	mov	arg02, ##@LR__5438
0f6e8     00 12 06 F6 | 	mov	arg01, #0
0f6ec     00 16 06 F6 | 	mov	arg03, #0
0f6f0     44 1E B1 FD | 	call	#__system___basic_print_string
0f6f4     00 12 06 F6 | 	mov	arg01, #0
0f6f8     0F 15 02 F6 | 	mov	arg02, local01
0f6fc     00 16 06 F6 | 	mov	arg03, #0
0f700     0A 18 06 F6 | 	mov	arg04, #10
0f704     B4 1E B1 FD | 	call	#__system___basic_print_unsigned
0f708     84 01 00 FF 
0f70c     79 14 06 F6 | 	mov	arg02, ##@LR__5439
0f710     00 12 06 F6 | 	mov	arg01, #0
0f714     00 16 06 F6 | 	mov	arg03, #0
0f718     1C 1E B1 FD | 	call	#__system___basic_print_string
0f71c     02 1E 66 F0 | 	shl	local01, #2
0f720     45 00 00 FF 
0f724     7C E4 05 F1 | 	add	objptr, ##35452
0f728     F2 1E 02 F1 | 	add	local01, objptr
0f72c     0F 15 02 FB | 	rdlong	arg02, local01
0f730     00 12 06 F6 | 	mov	arg01, #0
0f734     00 16 06 F6 | 	mov	arg03, #0
0f738     45 00 00 FF 
0f73c     7C E4 85 F1 | 	sub	objptr, ##35452
0f740     F4 1D B1 FD | 	call	#__system___basic_print_string
0f744     00 12 06 F6 | 	mov	arg01, #0
0f748     0A 14 06 F6 | 	mov	arg02, #10
0f74c     00 16 06 F6 | 	mov	arg03, #0
0f750     8C 1D B1 FD | 	call	#__system___basic_print_char
0f754     00 12 06 F6 | 	mov	arg01, #0
0f758     4C 6B B1 FD | 	call	#__system___getiolock_0542
0f75c     FD 00 68 FC | 	wrlong	#0, result1
0f760     A7 F0 03 F6 | 	mov	ptra, fp
0f764     B2 00 A0 FD | 	call	#popregs_
0f768                 | _do_error_ret
0f768     2D 00 64 FD | 	ret
0f76c                 | 
0f76c                 | ' 
0f76c                 | ' '-------------------- fcircle
0f76c                 | ' 
0f76c                 | ' sub do_fcircle
0f76c                 | _do_fcircle
0f76c     02 4A 05 F6 | 	mov	COUNT_, #2
0f770     A8 00 A0 FD | 	call	#pushregs_
0f774     24 F0 07 F1 | 	add	ptra, #36
0f778     40 BC BF FD | 	call	#_pop
0f77c     FD 14 02 F6 | 	mov	arg02, result1
0f780     FE 18 02 F6 | 	mov	arg04, result2
0f784     FF 16 02 F6 | 	mov	arg03, result3
0f788     18 4E 05 F1 | 	add	fp, #24
0f78c     A7 14 62 FC | 	wrlong	arg02, fp
0f790     04 4E 05 F1 | 	add	fp, #4
0f794     A7 18 62 FC | 	wrlong	arg04, fp
0f798     04 4E 05 F1 | 	add	fp, #4
0f79c     A7 16 62 FC | 	wrlong	arg03, fp
0f7a0     20 4E 85 F1 | 	sub	fp, #32
0f7a4     14 BC BF FD | 	call	#_pop
0f7a8     FD 14 02 F6 | 	mov	arg02, result1
0f7ac     FE 18 02 F6 | 	mov	arg04, result2
0f7b0     FF 16 02 F6 | 	mov	arg03, result3
0f7b4     0C 4E 05 F1 | 	add	fp, #12
0f7b8     A7 14 62 FC | 	wrlong	arg02, fp
0f7bc     04 4E 05 F1 | 	add	fp, #4
0f7c0     A7 18 62 FC | 	wrlong	arg04, fp
0f7c4     04 4E 05 F1 | 	add	fp, #4
0f7c8     A7 16 62 FC | 	wrlong	arg03, fp
0f7cc     14 4E 85 F1 | 	sub	fp, #20
0f7d0     E8 BB BF FD | 	call	#_pop
0f7d4     FF 14 02 F6 | 	mov	arg02, result3
0f7d8     A7 FA 61 FC | 	wrlong	result1, fp
0f7dc     04 4E 05 F1 | 	add	fp, #4
0f7e0     A7 FC 61 FC | 	wrlong	result2, fp
0f7e4     04 4E 05 F1 | 	add	fp, #4
0f7e8     A7 14 62 FC | 	wrlong	arg02, fp
0f7ec     08 4E 85 F1 | 	sub	fp, #8
0f7f0     A7 12 02 F6 | 	mov	arg01, fp
0f7f4     A8 BD BF FD | 	call	#_converttoint
0f7f8     FD 1E 02 F6 | 	mov	local01, result1
0f7fc     0C 4E 05 F1 | 	add	fp, #12
0f800     A7 12 02 F6 | 	mov	arg01, fp
0f804     0C 4E 85 F1 | 	sub	fp, #12
0f808     94 BD BF FD | 	call	#_converttoint
0f80c     FD 20 02 F6 | 	mov	local02, result1
0f810     18 4E 05 F1 | 	add	fp, #24
0f814     A7 12 02 F6 | 	mov	arg01, fp
0f818     18 4E 85 F1 | 	sub	fp, #24
0f81c     80 BD BF FD | 	call	#_converttoint
0f820     FD 16 02 F6 | 	mov	arg03, result1
0f824     37 00 00 FF 
0f828     28 E4 05 F1 | 	add	objptr, ##28200
0f82c     F2 18 02 FB | 	rdlong	arg04, objptr
0f830     37 00 00 FF 
0f834     28 E4 85 F1 | 	sub	objptr, ##28200
0f838     0F 13 02 F6 | 	mov	arg01, local01
0f83c     10 15 02 F6 | 	mov	arg02, local02
0f840     84 F1 B0 FD | 	call	#_hg010b_spin2_fcircle
0f844     A7 F0 03 F6 | 	mov	ptra, fp
0f848     B2 00 A0 FD | 	call	#popregs_
0f84c                 | _do_fcircle_ret
0f84c     2D 00 64 FD | 	ret
0f850                 | 
0f850                 | ' 
0f850                 | ' '-------------------- fill
0f850                 | ' 
0f850                 | ' sub do_fill
0f850                 | _do_fill
0f850     03 4A 05 F6 | 	mov	COUNT_, #3
0f854     A8 00 A0 FD | 	call	#pushregs_
0f858     30 F0 07 F1 | 	add	ptra, #48
0f85c     5C BB BF FD | 	call	#_pop
0f860     FD 16 02 F6 | 	mov	arg03, result1
0f864     FE 14 02 F6 | 	mov	arg02, result2
0f868     FF 18 02 F6 | 	mov	arg04, result3
0f86c     24 4E 05 F1 | 	add	fp, #36
0f870     A7 16 62 FC | 	wrlong	arg03, fp
0f874     04 4E 05 F1 | 	add	fp, #4
0f878     A7 14 62 FC | 	wrlong	arg02, fp
0f87c     04 4E 05 F1 | 	add	fp, #4
0f880     A7 18 62 FC | 	wrlong	arg04, fp
0f884     2C 4E 85 F1 | 	sub	fp, #44
0f888     30 BB BF FD | 	call	#_pop
0f88c     FD 16 02 F6 | 	mov	arg03, result1
0f890     FE 14 02 F6 | 	mov	arg02, result2
0f894     FF 18 02 F6 | 	mov	arg04, result3
0f898     18 4E 05 F1 | 	add	fp, #24
0f89c     A7 16 62 FC | 	wrlong	arg03, fp
0f8a0     04 4E 05 F1 | 	add	fp, #4
0f8a4     A7 14 62 FC | 	wrlong	arg02, fp
0f8a8     04 4E 05 F1 | 	add	fp, #4
0f8ac     A7 18 62 FC | 	wrlong	arg04, fp
0f8b0     20 4E 85 F1 | 	sub	fp, #32
0f8b4     04 BB BF FD | 	call	#_pop
0f8b8     FD 16 02 F6 | 	mov	arg03, result1
0f8bc     FE 14 02 F6 | 	mov	arg02, result2
0f8c0     FF 18 02 F6 | 	mov	arg04, result3
0f8c4     0C 4E 05 F1 | 	add	fp, #12
0f8c8     A7 16 62 FC | 	wrlong	arg03, fp
0f8cc     04 4E 05 F1 | 	add	fp, #4
0f8d0     A7 14 62 FC | 	wrlong	arg02, fp
0f8d4     04 4E 05 F1 | 	add	fp, #4
0f8d8     A7 18 62 FC | 	wrlong	arg04, fp
0f8dc     14 4E 85 F1 | 	sub	fp, #20
0f8e0     D8 BA BF FD | 	call	#_pop
0f8e4     FF 16 02 F6 | 	mov	arg03, result3
0f8e8     A7 FA 61 FC | 	wrlong	result1, fp
0f8ec     04 4E 05 F1 | 	add	fp, #4
0f8f0     A7 FC 61 FC | 	wrlong	result2, fp
0f8f4     04 4E 05 F1 | 	add	fp, #4
0f8f8     A7 16 62 FC | 	wrlong	arg03, fp
0f8fc     08 4E 85 F1 | 	sub	fp, #8
0f900     A7 12 02 F6 | 	mov	arg01, fp
0f904     98 BC BF FD | 	call	#_converttoint
0f908     FD 1E 02 F6 | 	mov	local01, result1
0f90c     0C 4E 05 F1 | 	add	fp, #12
0f910     A7 12 02 F6 | 	mov	arg01, fp
0f914     0C 4E 85 F1 | 	sub	fp, #12
0f918     84 BC BF FD | 	call	#_converttoint
0f91c     FD 20 02 F6 | 	mov	local02, result1
0f920     18 4E 05 F1 | 	add	fp, #24
0f924     A7 12 02 F6 | 	mov	arg01, fp
0f928     18 4E 85 F1 | 	sub	fp, #24
0f92c     70 BC BF FD | 	call	#_converttoint
0f930     FD 22 02 F6 | 	mov	local03, result1
0f934     24 4E 05 F1 | 	add	fp, #36
0f938     A7 12 02 F6 | 	mov	arg01, fp
0f93c     24 4E 85 F1 | 	sub	fp, #36
0f940     5C BC BF FD | 	call	#_converttoint
0f944     FD 18 02 F6 | 	mov	arg04, result1
0f948     0F 13 02 F6 | 	mov	arg01, local01
0f94c     10 15 02 F6 | 	mov	arg02, local02
0f950     11 17 02 F6 | 	mov	arg03, local03
0f954     DC ED B0 FD | 	call	#_hg010b_spin2_fill
0f958     A7 F0 03 F6 | 	mov	ptra, fp
0f95c     B2 00 A0 FD | 	call	#popregs_
0f960                 | _do_fill_ret
0f960     2D 00 64 FD | 	ret
0f964                 | 
0f964                 | ' 
0f964                 | ' '-------------------- font
0f964                 | ' 
0f964                 | ' sub do_font
0f964                 | _do_font
0f964     03 4A 05 F6 | 	mov	COUNT_, #3
0f968     A8 00 A0 FD | 	call	#pushregs_
0f96c     4C BA BF FD | 	call	#_pop
0f970     FD 1E 02 F6 | 	mov	local01, result1
0f974     FE 20 02 F6 | 	mov	local02, result2
0f978     FF 22 02 F6 | 	mov	local03, result3
0f97c                 | ' 
0f97c                 | ' t1=pop() 
0f97c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0f97c     1E 22 0E F2 | 	cmp	local03, #30 wz
0f980     10 00 90 5D |  if_ne	jmp	#LR__1340
0f984     0F 13 02 F6 | 	mov	arg01, local01
0f988     00 14 06 F6 | 	mov	arg02, #0
0f98c     30 3F B1 FD | 	call	#__system___float_tointeger
0f990     FD 1E 02 F6 | 	mov	local01, result1
0f994                 | LR__1340
0f994                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0f994     1F 22 0E F2 | 	cmp	local03, #31 wz
0f998     18 00 90 5D |  if_ne	jmp	#LR__1341
0f99c     0F 13 02 F6 | 	mov	arg01, local01
0f9a0     60 42 B1 FD | 	call	#__system____builtin_atof
0f9a4     FD 12 02 F6 | 	mov	arg01, result1
0f9a8     00 14 06 F6 | 	mov	arg02, #0
0f9ac     10 3F B1 FD | 	call	#__system___float_tointeger
0f9b0     FD 1E 02 F6 | 	mov	local01, result1
0f9b4                 | LR__1341
0f9b4     37 00 00 FF 
0f9b8     40 E4 05 F1 | 	add	objptr, ##28224
0f9bc     F2 1E 62 FC | 	wrlong	local01, objptr
0f9c0     37 00 00 FF 
0f9c4     40 E4 85 F1 | 	sub	objptr, ##28224
0f9c8     02 1E 66 F0 | 	shl	local01, #2
0f9cc     0F 13 02 F6 | 	mov	arg01, local01
0f9d0     44 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
0f9d4     A7 F0 03 F6 | 	mov	ptra, fp
0f9d8     B2 00 A0 FD | 	call	#popregs_
0f9dc                 | _do_font_ret
0f9dc     2D 00 64 FD | 	ret
0f9e0                 | 
0f9e0                 | ' 
0f9e0                 | ' '-------------------- for
0f9e0                 | ' 
0f9e0                 | ' sub do_for()
0f9e0                 | _do_for
0f9e0     01 4A 05 F6 | 	mov	COUNT_, #1
0f9e4     A8 00 A0 FD | 	call	#pushregs_
0f9e8     10 F0 07 F1 | 	add	ptra, #16
0f9ec     50 00 00 FF 
0f9f0     08 E5 05 F1 | 	add	objptr, ##41224
0f9f4     F2 12 02 FB | 	rdlong	arg01, objptr
0f9f8     01 12 06 F1 | 	add	arg01, #1
0f9fc     F2 12 62 FC | 	wrlong	arg01, objptr
0fa00     50 00 00 FF 
0fa04     08 E5 85 F1 | 	sub	objptr, ##41224
0fa08     B0 B9 BF FD | 	call	#_pop
0fa0c     A7 FA 61 FC | 	wrlong	result1, fp
0fa10     04 4E 05 F1 | 	add	fp, #4
0fa14     A7 FC 61 FC | 	wrlong	result2, fp
0fa18     04 4E 05 F1 | 	add	fp, #4
0fa1c     A7 FE 61 FC | 	wrlong	result3, fp
0fa20     08 4E 85 F1 | 	sub	fp, #8
0fa24     50 00 00 FF 
0fa28     08 E5 05 F1 | 	add	objptr, ##41224
0fa2c     F2 12 02 FB | 	rdlong	arg01, objptr
0fa30     09 1F 02 F6 | 	mov	local01, arg01
0fa34     02 1E 66 F0 | 	shl	local01, #2
0fa38     09 1F 02 F1 | 	add	local01, arg01
0fa3c     02 1E 66 F0 | 	shl	local01, #2
0fa40     06 00 00 FF 
0fa44     70 E4 85 F1 | 	sub	objptr, ##3184
0fa48     F2 1E 02 F1 | 	add	local01, objptr
0fa4c     A7 12 02 FB | 	rdlong	arg01, fp
0fa50     08 1E 06 F1 | 	add	local01, #8
0fa54     0F 13 62 FC | 	wrlong	arg01, local01
0fa58     4A 00 00 FF 
0fa5c     98 E4 85 F1 | 	sub	objptr, ##38040
0fa60     58 B9 BF FD | 	call	#_pop
0fa64     A7 FA 61 FC | 	wrlong	result1, fp
0fa68     04 4E 05 F1 | 	add	fp, #4
0fa6c     A7 FC 61 FC | 	wrlong	result2, fp
0fa70     04 4E 05 F1 | 	add	fp, #4
0fa74     A7 FE 61 FC | 	wrlong	result3, fp
0fa78     08 4E 85 F1 | 	sub	fp, #8
0fa7c     50 00 00 FF 
0fa80     08 E5 05 F1 | 	add	objptr, ##41224
0fa84     F2 12 02 FB | 	rdlong	arg01, objptr
0fa88     09 1F 02 F6 | 	mov	local01, arg01
0fa8c     02 1E 66 F0 | 	shl	local01, #2
0fa90     09 1F 02 F1 | 	add	local01, arg01
0fa94     02 1E 66 F0 | 	shl	local01, #2
0fa98     06 00 00 FF 
0fa9c     70 E4 85 F1 | 	sub	objptr, ##3184
0faa0     F2 1E 02 F1 | 	add	local01, objptr
0faa4     A7 12 02 F6 | 	mov	arg01, fp
0faa8     4A 00 00 FF 
0faac     98 E4 85 F1 | 	sub	objptr, ##38040
0fab0     EC BA BF FD | 	call	#_converttoint
0fab4     FD 12 02 F6 | 	mov	arg01, result1
0fab8     0C 1E 06 F1 | 	add	local01, #12
0fabc     0F 13 62 FC | 	wrlong	arg01, local01
0fac0     F8 B8 BF FD | 	call	#_pop
0fac4     A7 FA 61 FC | 	wrlong	result1, fp
0fac8     04 4E 05 F1 | 	add	fp, #4
0facc     A7 FC 61 FC | 	wrlong	result2, fp
0fad0     04 4E 05 F1 | 	add	fp, #4
0fad4     A7 FE 61 FC | 	wrlong	result3, fp
0fad8     08 4E 85 F1 | 	sub	fp, #8
0fadc     50 00 00 FF 
0fae0     08 E5 05 F1 | 	add	objptr, ##41224
0fae4     F2 12 02 FB | 	rdlong	arg01, objptr
0fae8     09 1F 02 F6 | 	mov	local01, arg01
0faec     02 1E 66 F0 | 	shl	local01, #2
0faf0     09 1F 02 F1 | 	add	local01, arg01
0faf4     02 1E 66 F0 | 	shl	local01, #2
0faf8     06 00 00 FF 
0fafc     70 E4 85 F1 | 	sub	objptr, ##3184
0fb00     F2 1E 02 F1 | 	add	local01, objptr
0fb04     A7 12 02 F6 | 	mov	arg01, fp
0fb08     4A 00 00 FF 
0fb0c     98 E4 85 F1 | 	sub	objptr, ##38040
0fb10     8C BA BF FD | 	call	#_converttoint
0fb14     10 1E 06 F1 | 	add	local01, #16
0fb18     0F FB 61 FC | 	wrlong	result1, local01
0fb1c                 | ' fortop+=1
0fb1c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
0fb1c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
0fb1c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
0fb1c                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
0fb1c     4A 00 00 FF 
0fb20     80 E4 05 F1 | 	add	objptr, ##38016
0fb24     F2 12 02 FB | 	rdlong	arg01, objptr
0fb28     09 1F 02 F6 | 	mov	local01, arg01
0fb2c     01 1E 66 F0 | 	shl	local01, #1
0fb30     09 1F 02 F1 | 	add	local01, arg01
0fb34     02 1E 66 F0 | 	shl	local01, #2
0fb38     03 00 00 FF 
0fb3c     04 E4 85 F1 | 	sub	objptr, ##1540
0fb40     F2 1E 02 F1 | 	add	local01, objptr
0fb44     08 1E 06 F1 | 	add	local01, #8
0fb48     0F 1F 02 FB | 	rdlong	local01, local01
0fb4c     FE 1F 0E F2 | 	cmp	local01, #510 wz
0fb50     47 00 00 FF 
0fb54     7C E4 85 F1 | 	sub	objptr, ##36476
0fb58     70 00 90 5D |  if_ne	jmp	#LR__1350
0fb5c     50 00 00 FF 
0fb60     08 E5 05 F1 | 	add	objptr, ##41224
0fb64     F2 12 02 FB | 	rdlong	arg01, objptr
0fb68     09 1F 02 F6 | 	mov	local01, arg01
0fb6c     02 1E 66 F0 | 	shl	local01, #2
0fb70     09 1F 02 F1 | 	add	local01, arg01
0fb74     02 1E 66 F0 | 	shl	local01, #2
0fb78     06 00 00 FF 
0fb7c     70 E4 85 F1 | 	sub	objptr, ##3184
0fb80     F2 1E 02 F1 | 	add	local01, objptr
0fb84     06 00 00 FF 
0fb88     20 E4 05 F1 | 	add	objptr, ##3104
0fb8c     F2 12 02 FB | 	rdlong	arg01, objptr
0fb90     0F 13 62 FC | 	wrlong	arg01, local01
0fb94     50 E4 05 F1 | 	add	objptr, #80
0fb98     F2 12 02 FB | 	rdlong	arg01, objptr
0fb9c     09 1F 02 F6 | 	mov	local01, arg01
0fba0     02 1E 66 F0 | 	shl	local01, #2
0fba4     09 1F 02 F1 | 	add	local01, arg01
0fba8     02 1E 66 F0 | 	shl	local01, #2
0fbac     06 00 00 FF 
0fbb0     70 E4 85 F1 | 	sub	objptr, ##3184
0fbb4     F2 1E 02 F1 | 	add	local01, objptr
0fbb8     04 1E 06 F1 | 	add	local01, #4
0fbbc     0F 01 68 FC | 	wrlong	#0, local01
0fbc0     4A 00 00 FF 
0fbc4     98 E4 85 F1 | 	sub	objptr, ##38040
0fbc8     78 00 90 FD | 	jmp	#LR__1351
0fbcc                 | LR__1350
0fbcc     50 00 00 FF 
0fbd0     08 E5 05 F1 | 	add	objptr, ##41224
0fbd4     F2 12 02 FB | 	rdlong	arg01, objptr
0fbd8     09 1F 02 F6 | 	mov	local01, arg01
0fbdc     02 1E 66 F0 | 	shl	local01, #2
0fbe0     09 1F 02 F1 | 	add	local01, arg01
0fbe4     02 1E 66 F0 | 	shl	local01, #2
0fbe8     06 00 00 FF 
0fbec     70 E4 85 F1 | 	sub	objptr, ##3184
0fbf0     F2 1E 02 F1 | 	add	local01, objptr
0fbf4     06 00 00 FF 
0fbf8     28 E4 05 F1 | 	add	objptr, ##3112
0fbfc     F2 12 02 FB | 	rdlong	arg01, objptr
0fc00     0F 13 62 FC | 	wrlong	arg01, local01
0fc04     48 E4 05 F1 | 	add	objptr, #72
0fc08     F2 12 02 FB | 	rdlong	arg01, objptr
0fc0c     09 1F 02 F6 | 	mov	local01, arg01
0fc10     02 1E 66 F0 | 	shl	local01, #2
0fc14     09 1F 02 F1 | 	add	local01, arg01
0fc18     02 1E 66 F0 | 	shl	local01, #2
0fc1c     06 00 00 FF 
0fc20     70 E4 85 F1 | 	sub	objptr, ##3184
0fc24     F2 1E 02 F1 | 	add	local01, objptr
0fc28     18 E4 85 F1 | 	sub	objptr, #24
0fc2c     F2 12 02 FB | 	rdlong	arg01, objptr
0fc30     4A 00 00 FF 
0fc34     80 E4 85 F1 | 	sub	objptr, ##38016
0fc38     01 12 06 F1 | 	add	arg01, #1
0fc3c     04 1E 06 F1 | 	add	local01, #4
0fc40     0F 13 62 FC | 	wrlong	arg01, local01
0fc44                 | LR__1351
0fc44     A7 F0 03 F6 | 	mov	ptra, fp
0fc48     B2 00 A0 FD | 	call	#popregs_
0fc4c                 | _do_for_ret
0fc4c     2D 00 64 FD | 	ret
0fc50                 | 
0fc50                 | ' 
0fc50                 | ' '-------------------- frame
0fc50                 | ' 
0fc50                 | ' sub do_frame
0fc50                 | _do_frame
0fc50     03 4A 05 F6 | 	mov	COUNT_, #3
0fc54     A8 00 A0 FD | 	call	#pushregs_
0fc58     30 F0 07 F1 | 	add	ptra, #48
0fc5c     5C B7 BF FD | 	call	#_pop
0fc60     FD 16 02 F6 | 	mov	arg03, result1
0fc64     FE 14 02 F6 | 	mov	arg02, result2
0fc68     FF 1A 02 F6 | 	mov	arg05, result3
0fc6c     24 4E 05 F1 | 	add	fp, #36
0fc70     A7 16 62 FC | 	wrlong	arg03, fp
0fc74     04 4E 05 F1 | 	add	fp, #4
0fc78     A7 14 62 FC | 	wrlong	arg02, fp
0fc7c     04 4E 05 F1 | 	add	fp, #4
0fc80     A7 1A 62 FC | 	wrlong	arg05, fp
0fc84     2C 4E 85 F1 | 	sub	fp, #44
0fc88     30 B7 BF FD | 	call	#_pop
0fc8c     FD 16 02 F6 | 	mov	arg03, result1
0fc90     FE 14 02 F6 | 	mov	arg02, result2
0fc94     FF 1A 02 F6 | 	mov	arg05, result3
0fc98     18 4E 05 F1 | 	add	fp, #24
0fc9c     A7 16 62 FC | 	wrlong	arg03, fp
0fca0     04 4E 05 F1 | 	add	fp, #4
0fca4     A7 14 62 FC | 	wrlong	arg02, fp
0fca8     04 4E 05 F1 | 	add	fp, #4
0fcac     A7 1A 62 FC | 	wrlong	arg05, fp
0fcb0     20 4E 85 F1 | 	sub	fp, #32
0fcb4     04 B7 BF FD | 	call	#_pop
0fcb8     FD 16 02 F6 | 	mov	arg03, result1
0fcbc     FE 14 02 F6 | 	mov	arg02, result2
0fcc0     FF 1A 02 F6 | 	mov	arg05, result3
0fcc4     0C 4E 05 F1 | 	add	fp, #12
0fcc8     A7 16 62 FC | 	wrlong	arg03, fp
0fccc     04 4E 05 F1 | 	add	fp, #4
0fcd0     A7 14 62 FC | 	wrlong	arg02, fp
0fcd4     04 4E 05 F1 | 	add	fp, #4
0fcd8     A7 1A 62 FC | 	wrlong	arg05, fp
0fcdc     14 4E 85 F1 | 	sub	fp, #20
0fce0     D8 B6 BF FD | 	call	#_pop
0fce4     FF 16 02 F6 | 	mov	arg03, result3
0fce8     A7 FA 61 FC | 	wrlong	result1, fp
0fcec     04 4E 05 F1 | 	add	fp, #4
0fcf0     A7 FC 61 FC | 	wrlong	result2, fp
0fcf4     04 4E 05 F1 | 	add	fp, #4
0fcf8     A7 16 62 FC | 	wrlong	arg03, fp
0fcfc     08 4E 85 F1 | 	sub	fp, #8
0fd00     A7 12 02 F6 | 	mov	arg01, fp
0fd04     98 B8 BF FD | 	call	#_converttoint
0fd08     FD 1E 02 F6 | 	mov	local01, result1
0fd0c     0C 4E 05 F1 | 	add	fp, #12
0fd10     A7 12 02 F6 | 	mov	arg01, fp
0fd14     0C 4E 85 F1 | 	sub	fp, #12
0fd18     84 B8 BF FD | 	call	#_converttoint
0fd1c     FD 20 02 F6 | 	mov	local02, result1
0fd20     18 4E 05 F1 | 	add	fp, #24
0fd24     A7 12 02 F6 | 	mov	arg01, fp
0fd28     18 4E 85 F1 | 	sub	fp, #24
0fd2c     70 B8 BF FD | 	call	#_converttoint
0fd30     FD 22 02 F6 | 	mov	local03, result1
0fd34     24 4E 05 F1 | 	add	fp, #36
0fd38     A7 12 02 F6 | 	mov	arg01, fp
0fd3c     24 4E 85 F1 | 	sub	fp, #36
0fd40     5C B8 BF FD | 	call	#_converttoint
0fd44     FD 18 02 F6 | 	mov	arg04, result1
0fd48     37 00 00 FF 
0fd4c     28 E4 05 F1 | 	add	objptr, ##28200
0fd50     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd54     37 00 00 FF 
0fd58     28 E4 85 F1 | 	sub	objptr, ##28200
0fd5c     0F 13 02 F6 | 	mov	arg01, local01
0fd60     10 15 02 F6 | 	mov	arg02, local02
0fd64     11 17 02 F6 | 	mov	arg03, local03
0fd68     B4 EE B0 FD | 	call	#_hg010b_spin2_frame
0fd6c     A7 F0 03 F6 | 	mov	ptra, fp
0fd70     B2 00 A0 FD | 	call	#popregs_
0fd74                 | _do_frame_ret
0fd74     2D 00 64 FD | 	ret
0fd78                 | 
0fd78                 | ' 
0fd78                 | ' '-------------------- fre
0fd78                 | ' 
0fd78                 | ' sub do_fre
0fd78                 | _do_fre
0fd78     01 4A 05 F6 | 	mov	COUNT_, #1
0fd7c     A8 00 A0 FD | 	call	#pushregs_
0fd80     0C F0 07 F1 | 	add	ptra, #12
0fd84     51 00 00 FF 
0fd88     AC E5 05 F1 | 	add	objptr, ##41900
0fd8c     F2 12 02 FB | 	rdlong	arg01, objptr
0fd90     0E 00 00 FF 
0fd94     50 E5 85 F1 | 	sub	objptr, ##7504
0fd98     F2 1E 02 FB | 	rdlong	local01, objptr
0fd9c     0F 13 82 F1 | 	sub	arg01, local01
0fda0     0E 00 00 FF 
0fda4     BC E5 05 F1 | 	add	objptr, ##7612
0fda8     F2 12 62 FC | 	wrlong	arg01, objptr
0fdac     08 4E 05 F1 | 	add	fp, #8
0fdb0     A7 3A 68 FC | 	wrlong	#29, fp
0fdb4     08 4E 85 F1 | 	sub	fp, #8
0fdb8     F2 1E 02 FB | 	rdlong	local01, objptr
0fdbc     52 00 00 FF 
0fdc0     18 E4 85 F1 | 	sub	objptr, ##42008
0fdc4     A7 1E 62 FC | 	wrlong	local01, fp
0fdc8     A7 12 02 F6 | 	mov	arg01, fp
0fdcc     84 B6 BF FD | 	call	#_push
0fdd0     A7 F0 03 F6 | 	mov	ptra, fp
0fdd4     B2 00 A0 FD | 	call	#popregs_
0fdd8                 | _do_fre_ret
0fdd8     2D 00 64 FD | 	ret
0fddc                 | 
0fddc                 | ' 
0fddc                 | ' '-------------------- get
0fddc                 | ' 
0fddc                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
0fddc                 | _do_get
0fddc     09 4A 05 F6 | 	mov	COUNT_, #9
0fde0     A8 00 A0 FD | 	call	#pushregs_
0fde4     40 F0 07 F1 | 	add	ptra, #64
0fde8     4A 00 00 FF 
0fdec     80 E4 05 F1 | 	add	objptr, ##38016
0fdf0     F2 1A 02 FB | 	rdlong	arg05, objptr
0fdf4     0D 19 02 F6 | 	mov	arg04, arg05
0fdf8     01 18 66 F0 | 	shl	arg04, #1
0fdfc     0D 19 02 F1 | 	add	arg04, arg05
0fe00     02 18 66 F0 | 	shl	arg04, #2
0fe04     03 00 00 FF 
0fe08     04 E4 85 F1 | 	sub	objptr, ##1540
0fe0c     F2 18 02 F1 | 	add	arg04, objptr
0fe10     0C 1B 02 FB | 	rdlong	arg05, arg04
0fe14     A7 1A 62 FC | 	wrlong	arg05, fp
0fe18                 | ' 
0fe18                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe18                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
0fe18     04 1A 0E F2 | 	cmp	arg05, #4 wz
0fe1c     47 00 00 FF 
0fe20     7C E4 85 F1 | 	sub	objptr, ##36476
0fe24     48 00 90 5D |  if_ne	jmp	#LR__1360
0fe28     90 B5 BF FD | 	call	#_pop
0fe2c     FF 1A 02 F6 | 	mov	arg05, result3
0fe30     1C 4E 05 F1 | 	add	fp, #28
0fe34     A7 FA 61 FC | 	wrlong	result1, fp
0fe38     04 4E 05 F1 | 	add	fp, #4
0fe3c     A7 FC 61 FC | 	wrlong	result2, fp
0fe40     04 4E 05 F1 | 	add	fp, #4
0fe44     A7 1A 62 FC | 	wrlong	arg05, fp
0fe48     08 4E 85 F1 | 	sub	fp, #8
0fe4c     A7 12 02 F6 | 	mov	arg01, fp
0fe50     1C 4E 85 F1 | 	sub	fp, #28
0fe54     48 B7 BF FD | 	call	#_converttoint
0fe58     52 00 00 FF 
0fe5c     14 E4 05 F1 | 	add	objptr, ##42004
0fe60     F2 FA 61 FC | 	wrlong	result1, objptr
0fe64     52 00 00 FF 
0fe68     14 E4 85 F1 | 	sub	objptr, ##42004
0fe6c     18 00 90 FD | 	jmp	#LR__1361
0fe70                 | LR__1360
0fe70     52 00 00 FF 
0fe74     14 E4 05 F1 | 	add	objptr, ##42004
0fe78     FF FF FF FF 
0fe7c     F2 FE 6B FC | 	wrlong	##-1, objptr
0fe80     52 00 00 FF 
0fe84     14 E4 85 F1 | 	sub	objptr, ##42004
0fe88                 | LR__1361
0fe88                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
0fe88     A7 16 02 FB | 	rdlong	arg03, fp
0fe8c     03 16 56 F2 | 	cmps	arg03, #3 wc
0fe90     40 00 90 CD |  if_b	jmp	#LR__1362
0fe94     24 B5 BF FD | 	call	#_pop
0fe98     FF 16 02 F6 | 	mov	arg03, result3
0fe9c     1C 4E 05 F1 | 	add	fp, #28
0fea0     A7 FA 61 FC | 	wrlong	result1, fp
0fea4     04 4E 05 F1 | 	add	fp, #4
0fea8     A7 FC 61 FC | 	wrlong	result2, fp
0feac     04 4E 05 F1 | 	add	fp, #4
0feb0     A7 16 62 FC | 	wrlong	arg03, fp
0feb4     08 4E 85 F1 | 	sub	fp, #8
0feb8     A7 12 02 F6 | 	mov	arg01, fp
0febc     1C 4E 85 F1 | 	sub	fp, #28
0fec0     DC B6 BF FD | 	call	#_converttoint
0fec4     08 4E 05 F1 | 	add	fp, #8
0fec8     A7 FA 61 FC | 	wrlong	result1, fp
0fecc     08 4E 85 F1 | 	sub	fp, #8
0fed0     0C 00 90 FD | 	jmp	#LR__1363
0fed4                 | LR__1362
0fed4     08 4E 05 F1 | 	add	fp, #8
0fed8     A7 02 68 FC | 	wrlong	#1, fp
0fedc     08 4E 85 F1 | 	sub	fp, #8
0fee0                 | LR__1363
0fee0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
0fee0     A7 16 02 FB | 	rdlong	arg03, fp
0fee4     02 16 56 F2 | 	cmps	arg03, #2 wc
0fee8     3C 00 90 CD |  if_b	jmp	#LR__1364
0feec     CC B4 BF FD | 	call	#_pop
0fef0     FF 16 02 F6 | 	mov	arg03, result3
0fef4     1C 4E 05 F1 | 	add	fp, #28
0fef8     A7 FA 61 FC | 	wrlong	result1, fp
0fefc     04 4E 05 F1 | 	add	fp, #4
0ff00     A7 FC 61 FC | 	wrlong	result2, fp
0ff04     04 4E 05 F1 | 	add	fp, #4
0ff08     A7 16 62 FC | 	wrlong	arg03, fp
0ff0c     08 4E 85 F1 | 	sub	fp, #8
0ff10     A7 12 02 F6 | 	mov	arg01, fp
0ff14     1C 4E 85 F1 | 	sub	fp, #28
0ff18     84 B6 BF FD | 	call	#_converttoint
0ff1c     0C 4E 05 F1 | 	add	fp, #12
0ff20     A7 FA 61 FC | 	wrlong	result1, fp
0ff24     0C 4E 85 F1 | 	sub	fp, #12
0ff28                 | LR__1364
0ff28     90 B4 BF FD | 	call	#_pop
0ff2c     FF 16 02 F6 | 	mov	arg03, result3
0ff30     1C 4E 05 F1 | 	add	fp, #28
0ff34     A7 FA 61 FC | 	wrlong	result1, fp
0ff38     04 4E 05 F1 | 	add	fp, #4
0ff3c     A7 FC 61 FC | 	wrlong	result2, fp
0ff40     04 4E 05 F1 | 	add	fp, #4
0ff44     A7 16 62 FC | 	wrlong	arg03, fp
0ff48     08 4E 85 F1 | 	sub	fp, #8
0ff4c     A7 12 02 F6 | 	mov	arg01, fp
0ff50     1C 4E 85 F1 | 	sub	fp, #28
0ff54     48 B6 BF FD | 	call	#_converttoint
0ff58     04 4E 05 F1 | 	add	fp, #4
0ff5c     A7 FA 61 FC | 	wrlong	result1, fp
0ff60     10 4E 05 F1 | 	add	fp, #16
0ff64     A7 16 02 FB | 	rdlong	arg03, fp
0ff68     14 4E 85 F1 | 	sub	fp, #20
0ff6c     02 16 66 F0 | 	shl	arg03, #2
0ff70     50 00 00 FF 
0ff74     C4 E4 05 F1 | 	add	objptr, ##41156
0ff78     F2 1E 02 F6 | 	mov	local01, objptr
0ff7c     F2 16 02 F1 | 	add	arg03, objptr
0ff80     0B 01 68 FC | 	wrlong	#0, arg03
0ff84                 | ' t1=pop() : channel=converttoint(t1)
0ff84                 | ' getres(j)=0
0ff84                 | ' if pos>=0 then
0ff84     01 00 00 FF 
0ff88     50 E5 05 F1 | 	add	objptr, ##848
0ff8c     F2 20 02 FB | 	rdlong	local02, objptr
0ff90     52 00 00 FF 
0ff94     14 E4 85 F1 | 	sub	objptr, ##42004
0ff98     00 20 56 F2 | 	cmps	local02, #0 wc
0ff9c     F0 01 90 CD |  if_b	jmp	#LR__1371
0ffa0                 | '   for i=0 to  amount/1024
0ffa0     10 4E 05 F1 | 	add	fp, #16
0ffa4     A7 00 68 FC | 	wrlong	#0, fp
0ffa8     08 4E 85 F1 | 	sub	fp, #8
0ffac     A7 22 02 FB | 	rdlong	local03, fp
0ffb0     08 4E 85 F1 | 	sub	fp, #8
0ffb4     11 25 52 F6 | 	abs	local04, local03 wc
0ffb8     0A 24 46 F0 | 	shr	local04, #10
0ffbc     12 25 82 F6 | 	negc	local04, local04
0ffc0     01 24 06 F1 | 	add	local04, #1
0ffc4                 | LR__1365
0ffc4     10 4E 05 F1 | 	add	fp, #16
0ffc8     A7 22 02 FB | 	rdlong	local03, fp
0ffcc     10 4E 85 F1 | 	sub	fp, #16
0ffd0     12 23 52 F2 | 	cmps	local03, local04 wc
0ffd4     9C 03 90 3D |  if_ae	jmp	#LR__1379
0ffd8                 | '     get #channel,pos+1,block(0),amount,r
0ffd8     04 4E 05 F1 | 	add	fp, #4
0ffdc     A7 12 02 FB | 	rdlong	arg01, fp
0ffe0     52 00 00 FF 
0ffe4     14 E4 05 F1 | 	add	objptr, ##42004
0ffe8     F2 14 02 FB | 	rdlong	arg02, objptr
0ffec     01 14 06 F1 | 	add	arg02, #1
0fff0     03 00 00 FF 
0fff4     60 E5 85 F1 | 	sub	objptr, ##1888
0fff8     F2 16 02 F6 | 	mov	arg03, objptr
0fffc     4E 00 00 FF 
10000     B4 E4 85 F1 | 	sub	objptr, ##40116
10004     04 4E 05 F1 | 	add	fp, #4
10008     A7 18 02 FB | 	rdlong	arg04, fp
1000c     08 4E 85 F1 | 	sub	fp, #8
10010     01 1A 06 F6 | 	mov	arg05, #1
10014     9C 16 B1 FD | 	call	#__system___basic_get
10018     18 4E 05 F1 | 	add	fp, #24
1001c     A7 FA 61 FC | 	wrlong	result1, fp
10020                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10020     0C 4E 85 F1 | 	sub	fp, #12
10024     A7 20 02 FB | 	rdlong	local02, fp
10028     0C 4E 85 F1 | 	sub	fp, #12
1002c     00 04 00 FF 
10030     00 20 56 F2 | 	cmps	local02, ##524288 wc
10034     7C 00 90 3D |  if_ae	jmp	#LR__1367
10038     14 4E 05 F1 | 	add	fp, #20
1003c     A7 00 68 FC | 	wrlong	#0, fp
10040     04 4E 05 F1 | 	add	fp, #4
10044     A7 26 02 FB | 	rdlong	local05, fp
10048     18 4E 85 F1 | 	sub	fp, #24
1004c                 | LR__1366
1004c     14 4E 05 F1 | 	add	fp, #20
10050     A7 20 02 FB | 	rdlong	local02, fp
10054     14 4E 85 F1 | 	sub	fp, #20
10058     13 21 52 F2 | 	cmps	local02, local05 wc
1005c     D8 00 90 3D |  if_ae	jmp	#LR__1370
10060     0C 4E 05 F1 | 	add	fp, #12
10064     A7 12 02 FB | 	rdlong	arg01, fp
10068     04 4E 05 F1 | 	add	fp, #4
1006c     A7 22 02 FB | 	rdlong	local03, fp
10070     0A 22 66 F0 | 	shl	local03, #10
10074     11 13 02 F1 | 	add	arg01, local03
10078     04 4E 05 F1 | 	add	fp, #4
1007c     A7 22 02 FB | 	rdlong	local03, fp
10080     11 13 02 F1 | 	add	arg01, local03
10084     4E 00 00 FF 
10088     B4 E4 05 F1 | 	add	objptr, ##40116
1008c     F2 22 02 F1 | 	add	local03, objptr
10090     11 15 C2 FA | 	rdbyte	arg02, local03
10094     09 15 42 FC | 	wrbyte	arg02, arg01
10098     4E 00 00 FF 
1009c     B4 E4 85 F1 | 	sub	objptr, ##40116
100a0     A7 22 02 FB | 	rdlong	local03, fp
100a4     01 22 06 F1 | 	add	local03, #1
100a8     A7 22 62 FC | 	wrlong	local03, fp
100ac     14 4E 85 F1 | 	sub	fp, #20
100b0     98 FF 9F FD | 	jmp	#LR__1366
100b4                 | LR__1367
100b4     14 4E 05 F1 | 	add	fp, #20
100b8     A7 00 68 FC | 	wrlong	#0, fp
100bc     04 4E 05 F1 | 	add	fp, #4
100c0     A7 28 02 FB | 	rdlong	local06, fp
100c4     18 4E 85 F1 | 	sub	fp, #24
100c8                 | LR__1368
100c8     14 4E 05 F1 | 	add	fp, #20
100cc     A7 20 02 FB | 	rdlong	local02, fp
100d0     14 4E 85 F1 | 	sub	fp, #20
100d4     14 21 52 F2 | 	cmps	local02, local06 wc
100d8     5C 00 90 3D |  if_ae	jmp	#LR__1369
100dc     0C 4E 05 F1 | 	add	fp, #12
100e0     A7 12 02 FB | 	rdlong	arg01, fp
100e4     04 4E 05 F1 | 	add	fp, #4
100e8     A7 26 02 FB | 	rdlong	local05, fp
100ec     0A 26 66 F0 | 	shl	local05, #10
100f0     13 13 02 F1 | 	add	arg01, local05
100f4     04 4E 05 F1 | 	add	fp, #4
100f8     A7 26 02 FB | 	rdlong	local05, fp
100fc     13 13 02 F1 | 	add	arg01, local05
10100     14 4E 85 F1 | 	sub	fp, #20
10104     4E 00 00 FF 
10108     B4 E4 05 F1 | 	add	objptr, ##40116
1010c     F2 26 02 F1 | 	add	local05, objptr
10110     13 15 C2 FA | 	rdbyte	arg02, local05
10114     4E 00 00 FF 
10118     B4 E4 85 F1 | 	sub	objptr, ##40116
1011c     88 D3 B0 FD | 	call	#_pspoke
10120     14 4E 05 F1 | 	add	fp, #20
10124     A7 26 02 FB | 	rdlong	local05, fp
10128     01 26 06 F1 | 	add	local05, #1
1012c     A7 26 62 FC | 	wrlong	local05, fp
10130     14 4E 85 F1 | 	sub	fp, #20
10134     90 FF 9F FD | 	jmp	#LR__1368
10138                 | LR__1369
10138                 | LR__1370
10138     14 4E 05 F1 | 	add	fp, #20
1013c     A7 28 02 FB | 	rdlong	local06, fp
10140     14 23 02 F6 | 	mov	local03, local06
10144     02 22 66 F0 | 	shl	local03, #2
10148     50 00 00 FF 
1014c     C4 E4 05 F1 | 	add	objptr, ##41156
10150     F2 22 02 F1 | 	add	local03, objptr
10154     02 28 66 F0 | 	shl	local06, #2
10158     F2 28 02 F1 | 	add	local06, objptr
1015c     14 29 02 FB | 	rdlong	local06, local06
10160     04 4E 05 F1 | 	add	fp, #4
10164     A7 26 02 FB | 	rdlong	local05, fp
10168     13 29 02 F1 | 	add	local06, local05
1016c     11 29 62 FC | 	wrlong	local06, local03
10170     08 4E 85 F1 | 	sub	fp, #8
10174     A7 28 02 FB | 	rdlong	local06, fp
10178     01 28 06 F1 | 	add	local06, #1
1017c     A7 28 62 FC | 	wrlong	local06, fp
10180     10 4E 85 F1 | 	sub	fp, #16
10184     50 00 00 FF 
10188     C4 E4 85 F1 | 	sub	objptr, ##41156
1018c     34 FE 9F FD | 	jmp	#LR__1365
10190                 | LR__1371
10190                 | '   for i=0 to  amount/1024
10190     10 4E 05 F1 | 	add	fp, #16
10194     A7 00 68 FC | 	wrlong	#0, fp
10198     08 4E 85 F1 | 	sub	fp, #8
1019c     A7 22 02 FB | 	rdlong	local03, fp
101a0     08 4E 85 F1 | 	sub	fp, #8
101a4     11 2B 52 F6 | 	abs	local07, local03 wc
101a8     0A 2A 46 F0 | 	shr	local07, #10
101ac     15 2B 82 F6 | 	negc	local07, local07
101b0     01 2A 06 F1 | 	add	local07, #1
101b4                 | LR__1372
101b4     10 4E 05 F1 | 	add	fp, #16
101b8     A7 22 02 FB | 	rdlong	local03, fp
101bc     10 4E 85 F1 | 	sub	fp, #16
101c0     15 23 52 F2 | 	cmps	local03, local07 wc
101c4     AC 01 90 3D |  if_ae	jmp	#LR__1378
101c8                 | '     get #channel,,block(0),amount,r
101c8     04 4E 05 F1 | 	add	fp, #4
101cc     A7 12 02 FB | 	rdlong	arg01, fp
101d0     4E 00 00 FF 
101d4     B4 E4 05 F1 | 	add	objptr, ##40116
101d8     F2 16 02 F6 | 	mov	arg03, objptr
101dc     4E 00 00 FF 
101e0     B4 E4 85 F1 | 	sub	objptr, ##40116
101e4     04 4E 05 F1 | 	add	fp, #4
101e8     A7 18 02 FB | 	rdlong	arg04, fp
101ec     08 4E 85 F1 | 	sub	fp, #8
101f0     00 14 06 F6 | 	mov	arg02, #0
101f4     01 1A 06 F6 | 	mov	arg05, #1
101f8     B8 14 B1 FD | 	call	#__system___basic_get
101fc     18 4E 05 F1 | 	add	fp, #24
10200     A7 FA 61 FC | 	wrlong	result1, fp
10204                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10204     0C 4E 85 F1 | 	sub	fp, #12
10208     A7 20 02 FB | 	rdlong	local02, fp
1020c     0C 4E 85 F1 | 	sub	fp, #12
10210     00 04 00 FF 
10214     00 20 56 F2 | 	cmps	local02, ##524288 wc
10218     7C 00 90 3D |  if_ae	jmp	#LR__1374
1021c     14 4E 05 F1 | 	add	fp, #20
10220     A7 00 68 FC | 	wrlong	#0, fp
10224     04 4E 05 F1 | 	add	fp, #4
10228     A7 2C 02 FB | 	rdlong	local08, fp
1022c     18 4E 85 F1 | 	sub	fp, #24
10230                 | LR__1373
10230     14 4E 05 F1 | 	add	fp, #20
10234     A7 20 02 FB | 	rdlong	local02, fp
10238     14 4E 85 F1 | 	sub	fp, #20
1023c     16 21 52 F2 | 	cmps	local02, local08 wc
10240     D8 00 90 3D |  if_ae	jmp	#LR__1377
10244     0C 4E 05 F1 | 	add	fp, #12
10248     A7 12 02 FB | 	rdlong	arg01, fp
1024c     04 4E 05 F1 | 	add	fp, #4
10250     A7 28 02 FB | 	rdlong	local06, fp
10254     0A 28 66 F0 | 	shl	local06, #10
10258     14 13 02 F1 | 	add	arg01, local06
1025c     04 4E 05 F1 | 	add	fp, #4
10260     A7 28 02 FB | 	rdlong	local06, fp
10264     14 13 02 F1 | 	add	arg01, local06
10268     4E 00 00 FF 
1026c     B4 E4 05 F1 | 	add	objptr, ##40116
10270     F2 28 02 F1 | 	add	local06, objptr
10274     14 15 C2 FA | 	rdbyte	arg02, local06
10278     09 15 42 FC | 	wrbyte	arg02, arg01
1027c     4E 00 00 FF 
10280     B4 E4 85 F1 | 	sub	objptr, ##40116
10284     A7 28 02 FB | 	rdlong	local06, fp
10288     01 28 06 F1 | 	add	local06, #1
1028c     A7 28 62 FC | 	wrlong	local06, fp
10290     14 4E 85 F1 | 	sub	fp, #20
10294     98 FF 9F FD | 	jmp	#LR__1373
10298                 | LR__1374
10298     14 4E 05 F1 | 	add	fp, #20
1029c     A7 00 68 FC | 	wrlong	#0, fp
102a0     04 4E 05 F1 | 	add	fp, #4
102a4     A7 2E 02 FB | 	rdlong	local09, fp
102a8     18 4E 85 F1 | 	sub	fp, #24
102ac                 | LR__1375
102ac     14 4E 05 F1 | 	add	fp, #20
102b0     A7 20 02 FB | 	rdlong	local02, fp
102b4     14 4E 85 F1 | 	sub	fp, #20
102b8     17 21 52 F2 | 	cmps	local02, local09 wc
102bc     5C 00 90 3D |  if_ae	jmp	#LR__1376
102c0     0C 4E 05 F1 | 	add	fp, #12
102c4     A7 12 02 FB | 	rdlong	arg01, fp
102c8     04 4E 05 F1 | 	add	fp, #4
102cc     A7 2C 02 FB | 	rdlong	local08, fp
102d0     0A 2C 66 F0 | 	shl	local08, #10
102d4     16 13 02 F1 | 	add	arg01, local08
102d8     04 4E 05 F1 | 	add	fp, #4
102dc     A7 2C 02 FB | 	rdlong	local08, fp
102e0     16 13 02 F1 | 	add	arg01, local08
102e4     14 4E 85 F1 | 	sub	fp, #20
102e8     4E 00 00 FF 
102ec     B4 E4 05 F1 | 	add	objptr, ##40116
102f0     F2 2C 02 F1 | 	add	local08, objptr
102f4     16 15 C2 FA | 	rdbyte	arg02, local08
102f8     4E 00 00 FF 
102fc     B4 E4 85 F1 | 	sub	objptr, ##40116
10300     A4 D1 B0 FD | 	call	#_pspoke
10304     14 4E 05 F1 | 	add	fp, #20
10308     A7 2C 02 FB | 	rdlong	local08, fp
1030c     01 2C 06 F1 | 	add	local08, #1
10310     A7 2C 62 FC | 	wrlong	local08, fp
10314     14 4E 85 F1 | 	sub	fp, #20
10318     90 FF 9F FD | 	jmp	#LR__1375
1031c                 | LR__1376
1031c                 | LR__1377
1031c     14 4E 05 F1 | 	add	fp, #20
10320     A7 2E 02 FB | 	rdlong	local09, fp
10324     17 29 02 F6 | 	mov	local06, local09
10328     02 28 66 F0 | 	shl	local06, #2
1032c     50 00 00 FF 
10330     C4 E4 05 F1 | 	add	objptr, ##41156
10334     F2 28 02 F1 | 	add	local06, objptr
10338     02 2E 66 F0 | 	shl	local09, #2
1033c     F2 2E 02 F1 | 	add	local09, objptr
10340     17 2F 02 FB | 	rdlong	local09, local09
10344     04 4E 05 F1 | 	add	fp, #4
10348     A7 2C 02 FB | 	rdlong	local08, fp
1034c     16 2F 02 F1 | 	add	local09, local08
10350     14 2F 62 FC | 	wrlong	local09, local06
10354     08 4E 85 F1 | 	sub	fp, #8
10358     A7 2E 02 FB | 	rdlong	local09, fp
1035c     01 2E 06 F1 | 	add	local09, #1
10360     A7 2E 62 FC | 	wrlong	local09, fp
10364     10 4E 85 F1 | 	sub	fp, #16
10368     50 00 00 FF 
1036c     C4 E4 85 F1 | 	sub	objptr, ##41156
10370     40 FE 9F FD | 	jmp	#LR__1372
10374                 | LR__1378
10374                 | LR__1379
10374     A7 F0 03 F6 | 	mov	ptra, fp
10378     B2 00 A0 FD | 	call	#popregs_
1037c                 | _do_get_ret
1037c     2D 00 64 FD | 	ret
10380                 | 
10380                 | ' 
10380                 | ' '-------------------- getenvsustain
10380                 | ' 
10380                 | ' sub do_getenvsustain
10380                 | _do_getenvsustain
10380     01 4A 05 F6 | 	mov	COUNT_, #1
10384     A8 00 A0 FD | 	call	#pushregs_
10388     10 F0 07 F1 | 	add	ptra, #16
1038c     4A 00 00 FF 
10390     80 E4 05 F1 | 	add	objptr, ##38016
10394     F2 1E 02 FB | 	rdlong	local01, objptr
10398     0F 17 02 F6 | 	mov	arg03, local01
1039c     01 16 66 F0 | 	shl	arg03, #1
103a0     0F 17 02 F1 | 	add	arg03, local01
103a4     02 16 66 F0 | 	shl	arg03, #2
103a8     03 00 00 FF 
103ac     04 E4 85 F1 | 	sub	objptr, ##1540
103b0     F2 16 02 F1 | 	add	arg03, objptr
103b4     0B 17 02 FB | 	rdlong	arg03, arg03
103b8     0C 4E 05 F1 | 	add	fp, #12
103bc     A7 16 62 FC | 	wrlong	arg03, fp
103c0                 | ' 
103c0                 | ' numpar=compiledline(lineptr_e).result.uresult
103c0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
103c0     0C 4E 85 F1 | 	sub	fp, #12
103c4     02 16 16 F2 | 	cmp	arg03, #2 wc
103c8     47 00 00 FF 
103cc     7C E4 85 F1 | 	sub	objptr, ##36476
103d0     0C 4E 05 C1 |  if_b	add	fp, #12
103d4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
103d8     0C 4E 85 C1 |  if_b	sub	fp, #12
103dc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1380
103e0     00 12 06 F6 | 	mov	arg01, #0
103e4     C0 5E B1 FD | 	call	#__system___getiolock_0542
103e8     FD 12 02 F6 | 	mov	arg01, result1
103ec     54 04 B1 FD | 	call	#__system___lockmem
103f0     84 01 00 FF 
103f4     7C 14 06 F6 | 	mov	arg02, ##@LR__5440
103f8     00 12 06 F6 | 	mov	arg01, #0
103fc     00 16 06 F6 | 	mov	arg03, #0
10400     34 11 B1 FD | 	call	#__system___basic_print_string
10404     00 12 06 F6 | 	mov	arg01, #0
10408     9C 5E B1 FD | 	call	#__system___getiolock_0542
1040c     FD 00 68 FC | 	wrlong	#0, result1
10410     27 12 06 F6 | 	mov	arg01, #39
10414     9C CE B0 FD | 	call	#_printerror
10418     64 00 90 FD | 	jmp	#LR__1381
1041c                 | LR__1380
1041c     9C AF BF FD | 	call	#_pop
10420     FD 1E 02 F6 | 	mov	local01, result1
10424     FE 16 02 F6 | 	mov	arg03, result2
10428     A7 1E 62 FC | 	wrlong	local01, fp
1042c     04 4E 05 F1 | 	add	fp, #4
10430     A7 16 62 FC | 	wrlong	arg03, fp
10434     04 4E 05 F1 | 	add	fp, #4
10438     A7 FE 61 FC | 	wrlong	result3, fp
1043c     08 4E 85 F1 | 	sub	fp, #8
10440     A7 12 02 F6 | 	mov	arg01, fp
10444     58 B1 BF FD | 	call	#_converttoint
10448     FD 1E 02 F6 | 	mov	local01, result1
1044c     01 1E 66 F0 | 	shl	local01, #1
10450     51 00 00 FF 
10454     C8 E5 05 F1 | 	add	objptr, ##41928
10458     F2 1E 02 F1 | 	add	local01, objptr
1045c     0F 1F E2 FA | 	rdword	local01, local01
10460     A7 1E 62 FC | 	wrlong	local01, fp
10464     08 4E 05 F1 | 	add	fp, #8
10468     A7 38 68 FC | 	wrlong	#28, fp
1046c     08 4E 85 F1 | 	sub	fp, #8
10470     A7 12 02 F6 | 	mov	arg01, fp
10474     51 00 00 FF 
10478     C8 E5 85 F1 | 	sub	objptr, ##41928
1047c     D4 AF BF FD | 	call	#_push
10480                 | LR__1381
10480     A7 F0 03 F6 | 	mov	ptra, fp
10484     B2 00 A0 FD | 	call	#popregs_
10488                 | _do_getenvsustain_ret
10488     2D 00 64 FD | 	ret
1048c                 | 
1048c                 | ' 
1048c                 | ' '-------------------- getnotevalue
1048c                 | ' 
1048c                 | ' sub do_getnotevalue
1048c                 | _do_getnotevalue
1048c     01 4A 05 F6 | 	mov	COUNT_, #1
10490     A8 00 A0 FD | 	call	#pushregs_
10494     1C F0 07 F1 | 	add	ptra, #28
10498     20 AF BF FD | 	call	#_pop
1049c     FF 14 02 F6 | 	mov	arg02, result3
104a0     10 4E 05 F1 | 	add	fp, #16
104a4     A7 FA 61 FC | 	wrlong	result1, fp
104a8     04 4E 05 F1 | 	add	fp, #4
104ac     A7 FC 61 FC | 	wrlong	result2, fp
104b0     04 4E 05 F1 | 	add	fp, #4
104b4     A7 14 62 FC | 	wrlong	arg02, fp
104b8     08 4E 85 F1 | 	sub	fp, #8
104bc     A7 12 02 F6 | 	mov	arg01, fp
104c0     10 4E 85 F1 | 	sub	fp, #16
104c4     D8 B0 BF FD | 	call	#_converttoint
104c8     FD 14 52 F6 | 	abs	arg02, result1 wc
104cc     0C 14 16 FD | 	qdiv	arg02, #12
104d0     0C 4E 05 F1 | 	add	fp, #12
104d4     A7 FA 61 FC | 	wrlong	result1, fp
104d8     14 00 00 FF 
104dc     D8 E4 05 F1 | 	add	objptr, ##10456
104e0     08 4E 85 F1 | 	sub	fp, #8
104e4     19 14 62 FD | 	getqy	arg02
104e8     0A 15 82 F6 | 	negc	arg02, arg02
104ec     02 14 66 F0 | 	shl	arg02, #2
104f0     F2 14 02 F1 | 	add	arg02, objptr
104f4     0A 15 02 FB | 	rdlong	arg02, arg02
104f8     A7 14 62 FC | 	wrlong	arg02, fp
104fc     08 4E 05 F1 | 	add	fp, #8
10500     A7 14 02 FB | 	rdlong	arg02, fp
10504     0A 15 52 F6 | 	abs	arg02, arg02 wc
10508     0C 14 16 FD | 	qdiv	arg02, #12
1050c     0C 4E 85 F1 | 	sub	fp, #12
10510     14 00 00 FF 
10514     D8 E4 85 F1 | 	sub	objptr, ##10456
10518     18 14 62 FD | 	getqx	arg02
1051c     0A 13 82 F6 | 	negc	arg01, arg02
10520     09 13 52 F6 | 	abs	arg01, arg01 wc
10524     1F 1E C6 C9 |  if_b	decod	local01, #31
10528     00 1E 06 36 |  if_ae	mov	local01, #0
1052c     C4 2A B1 FD | 	call	#__system___float_fromuns
10530     0F FB 61 F5 | 	xor	result1, local01
10534     08 4E 05 F1 | 	add	fp, #8
10538     A7 FA 61 FC | 	wrlong	result1, fp
1053c     FD 14 02 F6 | 	mov	arg02, result1
10540     08 4E 85 F1 | 	sub	fp, #8
10544     1E 12 C6 F9 | 	decod	arg01, #30
10548     B4 3D B1 FD | 	call	#__system____builtin_powf
1054c     FD 12 02 F6 | 	mov	arg01, result1
10550     04 4E 05 F1 | 	add	fp, #4
10554     A7 14 02 FB | 	rdlong	arg02, fp
10558     04 4E 85 F1 | 	sub	fp, #4
1055c     98 2E B1 FD | 	call	#__system___float_mul
10560     A7 FA 61 FC | 	wrlong	result1, fp
10564     10 4E 05 F1 | 	add	fp, #16
10568     A7 FA 61 FC | 	wrlong	result1, fp
1056c     08 4E 05 F1 | 	add	fp, #8
10570     A7 3C 68 FC | 	wrlong	#30, fp
10574     08 4E 85 F1 | 	sub	fp, #8
10578     A7 12 02 F6 | 	mov	arg01, fp
1057c     10 4E 85 F1 | 	sub	fp, #16
10580     D0 AE BF FD | 	call	#_push
10584     A7 F0 03 F6 | 	mov	ptra, fp
10588     B2 00 A0 FD | 	call	#popregs_
1058c                 | _do_getnotevalue_ret
1058c     2D 00 64 FD | 	ret
10590                 | 
10590                 | ' 
10590                 | ' '-------------------- getpixel
10590                 | ' 
10590                 | ' sub do_getpixel
10590                 | _do_getpixel
10590     00 4A 05 F6 | 	mov	COUNT_, #0
10594     A8 00 A0 FD | 	call	#pushregs_
10598     24 F0 07 F1 | 	add	ptra, #36
1059c     4A 00 00 FF 
105a0     80 E4 05 F1 | 	add	objptr, ##38016
105a4     F2 16 02 FB | 	rdlong	arg03, objptr
105a8     0B 15 02 F6 | 	mov	arg02, arg03
105ac     01 14 66 F0 | 	shl	arg02, #1
105b0     0B 15 02 F1 | 	add	arg02, arg03
105b4     02 14 66 F0 | 	shl	arg02, #2
105b8     03 00 00 FF 
105bc     04 E4 85 F1 | 	sub	objptr, ##1540
105c0     F2 14 02 F1 | 	add	arg02, objptr
105c4     0A 17 02 FB | 	rdlong	arg03, arg02
105c8     18 4E 05 F1 | 	add	fp, #24
105cc     A7 16 62 FC | 	wrlong	arg03, fp
105d0                 | ' 
105d0                 | ' numpar=compiledline(lineptr_e).result.uresult
105d0                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
105d0     18 4E 85 F1 | 	sub	fp, #24
105d4     02 16 0E F2 | 	cmp	arg03, #2 wz
105d8     47 00 00 FF 
105dc     7C E4 85 F1 | 	sub	objptr, ##36476
105e0     3C 00 90 AD |  if_e	jmp	#LR__1390
105e4     00 12 06 F6 | 	mov	arg01, #0
105e8     BC 5C B1 FD | 	call	#__system___getiolock_0542
105ec     FD 12 02 F6 | 	mov	arg01, result1
105f0     50 02 B1 FD | 	call	#__system___lockmem
105f4     84 01 00 FF 
105f8     8C 14 06 F6 | 	mov	arg02, ##@LR__5441
105fc     00 12 06 F6 | 	mov	arg01, #0
10600     00 16 06 F6 | 	mov	arg03, #0
10604     30 0F B1 FD | 	call	#__system___basic_print_string
10608     00 12 06 F6 | 	mov	arg01, #0
1060c     98 5C B1 FD | 	call	#__system___getiolock_0542
10610     FD 00 68 FC | 	wrlong	#0, result1
10614     27 12 06 F6 | 	mov	arg01, #39
10618     98 CC B0 FD | 	call	#_printerror
1061c     B4 00 90 FD | 	jmp	#LR__1391
10620                 | LR__1390
10620     98 AD BF FD | 	call	#_pop
10624     FD 16 02 F6 | 	mov	arg03, result1
10628     FE 14 02 F6 | 	mov	arg02, result2
1062c     FF 12 02 F6 | 	mov	arg01, result3
10630     0C 4E 05 F1 | 	add	fp, #12
10634     A7 16 62 FC | 	wrlong	arg03, fp
10638     04 4E 05 F1 | 	add	fp, #4
1063c     A7 14 62 FC | 	wrlong	arg02, fp
10640     04 4E 05 F1 | 	add	fp, #4
10644     A7 12 62 FC | 	wrlong	arg01, fp
10648     14 4E 85 F1 | 	sub	fp, #20
1064c     6C AD BF FD | 	call	#_pop
10650     FF 16 02 F6 | 	mov	arg03, result3
10654     A7 FA 61 FC | 	wrlong	result1, fp
10658     04 4E 05 F1 | 	add	fp, #4
1065c     A7 FC 61 FC | 	wrlong	result2, fp
10660     04 4E 05 F1 | 	add	fp, #4
10664     A7 16 62 FC | 	wrlong	arg03, fp
10668     08 4E 85 F1 | 	sub	fp, #8
1066c     A7 12 02 F6 | 	mov	arg01, fp
10670     2C AF BF FD | 	call	#_converttoint
10674     1C 4E 05 F1 | 	add	fp, #28
10678     A7 FA 61 FC | 	wrlong	result1, fp
1067c     10 4E 85 F1 | 	sub	fp, #16
10680     A7 12 02 F6 | 	mov	arg01, fp
10684     0C 4E 85 F1 | 	sub	fp, #12
10688     14 AF BF FD | 	call	#_converttoint
1068c     FD 16 02 F6 | 	mov	arg03, result1
10690     20 4E 05 F1 | 	add	fp, #32
10694     A7 16 62 FC | 	wrlong	arg03, fp
10698     F2 12 02 FB | 	rdlong	arg01, objptr
1069c     04 4E 85 F1 | 	sub	fp, #4
106a0     A7 FE 01 FB | 	rdlong	result3, fp
106a4     FF 12 02 F1 | 	add	arg01, result3
106a8     1C 4E 85 F1 | 	sub	fp, #28
106ac     0A 16 66 F0 | 	shl	arg03, #10
106b0     0B 13 02 F1 | 	add	arg01, arg03
106b4     38 CE B0 FD | 	call	#_pspeek
106b8     FD FA E1 F8 | 	getbyte	result1, result1, #0
106bc     A7 FA 61 FC | 	wrlong	result1, fp
106c0     08 4E 05 F1 | 	add	fp, #8
106c4     A7 3A 68 FC | 	wrlong	#29, fp
106c8     08 4E 85 F1 | 	sub	fp, #8
106cc     A7 12 02 F6 | 	mov	arg01, fp
106d0     80 AD BF FD | 	call	#_push
106d4                 | LR__1391
106d4     A7 F0 03 F6 | 	mov	ptra, fp
106d8     B2 00 A0 FD | 	call	#popregs_
106dc                 | _do_getpixel_ret
106dc     2D 00 64 FD | 	ret
106e0                 | 
106e0                 | ' 
106e0                 | ' '-------------------- gettime
106e0                 | ' 
106e0                 | ' sub do_gettime
106e0                 | _do_gettime
106e0     02 4A 05 F6 | 	mov	COUNT_, #2
106e4     A8 00 A0 FD | 	call	#pushregs_
106e8     14 F0 07 F1 | 	add	ptra, #20
106ec                 | ' 
106ec                 | ' const asm 
106ec     1A 1E 72 FD | 	getct	local01 wc
106f0     1A 20 62 FD | 	getct	local02
106f4                 | ' return hi1, lo1
106f4     10 FD 01 F6 | 	mov	result2, local02
106f8     A7 1E 62 FC | 	wrlong	local01, fp
106fc     04 4E 05 F1 | 	add	fp, #4
10700     A7 FC 61 FC | 	wrlong	result2, fp
10704     0C 4E 05 F1 | 	add	fp, #12
10708     A7 3A 68 FC | 	wrlong	#29, fp
1070c     0C 4E 85 F1 | 	sub	fp, #12
10710     A7 12 02 FB | 	rdlong	arg01, fp
10714     04 4E 05 F1 | 	add	fp, #4
10718     A7 12 62 FC | 	wrlong	arg01, fp
1071c     08 4E 85 F1 | 	sub	fp, #8
10720     A7 12 02 FB | 	rdlong	arg01, fp
10724     0C 4E 05 F1 | 	add	fp, #12
10728     A7 12 62 FC | 	wrlong	arg01, fp
1072c     04 4E 85 F1 | 	sub	fp, #4
10730     A7 12 02 F6 | 	mov	arg01, fp
10734     08 4E 85 F1 | 	sub	fp, #8
10738     18 AD BF FD | 	call	#_push
1073c     A7 F0 03 F6 | 	mov	ptra, fp
10740     B2 00 A0 FD | 	call	#popregs_
10744                 | _do_gettime_ret
10744     2D 00 64 FD | 	ret
10748                 | 
10748                 | ' 
10748                 | ' '-------------------- gosub
10748                 | ' 
10748                 | ' sub do_gosub()
10748                 | _do_gosub
10748     50 00 00 FF 
1074c     0C E5 05 F1 | 	add	objptr, ##41228
10750     F2 00 02 FB | 	rdlong	_var01, objptr
10754     01 00 06 F1 | 	add	_var01, #1
10758     F2 00 62 FC | 	wrlong	_var01, objptr
1075c                 | ' gosubtop+=1
1075c                 | ' if compiledline(lineptr_e+1).result_type=token_end then
1075c     06 00 00 FF 
10760     8C E4 85 F1 | 	sub	objptr, ##3212
10764     F2 00 02 FB | 	rdlong	_var01, objptr
10768     01 00 06 F1 | 	add	_var01, #1
1076c     00 03 02 F6 | 	mov	_var02, _var01
10770     01 02 66 F0 | 	shl	_var02, #1
10774     00 03 02 F1 | 	add	_var02, _var01
10778     02 02 66 F0 | 	shl	_var02, #2
1077c     03 00 00 FF 
10780     04 E4 85 F1 | 	sub	objptr, ##1540
10784     F2 02 02 F1 | 	add	_var02, objptr
10788     08 02 06 F1 | 	add	_var02, #8
1078c     01 03 02 FB | 	rdlong	_var02, _var02
10790     FE 03 0E F2 | 	cmp	_var02, #510 wz
10794     47 00 00 FF 
10798     7C E4 85 F1 | 	sub	objptr, ##36476
1079c     58 00 90 5D |  if_ne	jmp	#LR__1400
107a0     50 00 00 FF 
107a4     0C E5 05 F1 | 	add	objptr, ##41228
107a8     F2 02 02 FB | 	rdlong	_var02, objptr
107ac     03 02 66 F0 | 	shl	_var02, #3
107b0     03 00 00 FF 
107b4     60 E5 85 F1 | 	sub	objptr, ##1888
107b8     F2 02 02 F1 | 	add	_var02, objptr
107bc     03 00 00 FF 
107c0     0C E5 05 F1 | 	add	objptr, ##1804
107c4     F2 00 02 FB | 	rdlong	_var01, objptr
107c8     01 01 62 FC | 	wrlong	_var01, _var02
107cc     54 E4 05 F1 | 	add	objptr, #84
107d0     F2 02 02 FB | 	rdlong	_var02, objptr
107d4     03 02 66 F0 | 	shl	_var02, #3
107d8     03 00 00 FF 
107dc     60 E5 85 F1 | 	sub	objptr, ##1888
107e0     F2 02 02 F1 | 	add	_var02, objptr
107e4     04 02 06 F1 | 	add	_var02, #4
107e8     01 01 68 FC | 	wrlong	#0, _var02
107ec     4C 00 00 FF 
107f0     AC E5 85 F1 | 	sub	objptr, ##39340
107f4     64 00 90 FD | 	jmp	#LR__1401
107f8                 | LR__1400
107f8     50 00 00 FF 
107fc     0C E5 05 F1 | 	add	objptr, ##41228
10800     F2 02 02 FB | 	rdlong	_var02, objptr
10804     03 02 66 F0 | 	shl	_var02, #3
10808     03 00 00 FF 
1080c     60 E5 85 F1 | 	sub	objptr, ##1888
10810     F2 02 02 F1 | 	add	_var02, objptr
10814     03 00 00 FF 
10818     14 E5 05 F1 | 	add	objptr, ##1812
1081c     F2 00 02 FB | 	rdlong	_var01, objptr
10820     01 01 62 FC | 	wrlong	_var01, _var02
10824     4C E4 05 F1 | 	add	objptr, #76
10828     F2 02 02 FB | 	rdlong	_var02, objptr
1082c     03 02 66 F0 | 	shl	_var02, #3
10830     03 00 00 FF 
10834     60 E5 85 F1 | 	sub	objptr, ##1888
10838     F2 02 02 F1 | 	add	_var02, objptr
1083c     02 00 00 FF 
10840     2C E5 85 F1 | 	sub	objptr, ##1324
10844     F2 00 02 FB | 	rdlong	_var01, objptr
10848     4A 00 00 FF 
1084c     80 E4 85 F1 | 	sub	objptr, ##38016
10850     02 00 06 F1 | 	add	_var01, #2
10854     04 02 06 F1 | 	add	_var02, #4
10858     01 01 62 FC | 	wrlong	_var01, _var02
1085c                 | LR__1401
1085c                 | _do_gosub_ret
1085c     2D 00 64 FD | 	ret
10860                 | 
10860                 | ' 
10860                 | ' '--------------------- goto
10860                 | ' 
10860                 | ' '------- fast goto
10860                 | ' 
10860                 | ' sub do_fast_goto
10860                 | _do_fast_goto
10860     02 4A 05 F6 | 	mov	COUNT_, #2
10864     A8 00 A0 FD | 	call	#pushregs_
10868                 | _do_fast_goto_enter
10868     4A 00 00 FF 
1086c     80 E4 05 F1 | 	add	objptr, ##38016
10870     F2 12 02 FB | 	rdlong	arg01, objptr
10874     09 1F 02 F6 | 	mov	local01, arg01
10878     01 1E 66 F0 | 	shl	local01, #1
1087c     09 1F 02 F1 | 	add	local01, arg01
10880     02 1E 66 F0 | 	shl	local01, #2
10884     03 00 00 FF 
10888     04 E4 85 F1 | 	sub	objptr, ##1540
1088c     F2 1E 02 F1 | 	add	local01, objptr
10890     0F 21 02 FB | 	rdlong	local02, local01
10894     10 13 02 F6 | 	mov	arg01, local02
10898     47 00 00 FF 
1089c     7C E4 85 F1 | 	sub	objptr, ##36476
108a0     A4 CC B0 FD | 	call	#_pslpeek
108a4     FD 12 02 F6 | 	mov	arg01, result1
108a8                 | ' 
108a8                 | ' testptr=compiledline(lineptr_e).result.uresult
108a8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
108a8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
108a8     4A 00 00 FF 
108ac     80 E4 05 F1 | 	add	objptr, ##38016
108b0     F2 FA 01 FB | 	rdlong	result1, objptr
108b4     FD 1E 02 F6 | 	mov	local01, result1
108b8     01 1E 66 F0 | 	shl	local01, #1
108bc     FD 1E 02 F1 | 	add	local01, result1
108c0     02 1E 66 F0 | 	shl	local01, #2
108c4     03 00 00 FF 
108c8     04 E4 85 F1 | 	sub	objptr, ##1540
108cc     F2 1E 02 F1 | 	add	local01, objptr
108d0     04 1E 06 F1 | 	add	local01, #4
108d4     0F 1F 02 FB | 	rdlong	local01, local01
108d8     0F 13 0A F2 | 	cmp	arg01, local01 wz
108dc     47 00 00 FF 
108e0     7C E4 85 F1 | 	sub	objptr, ##36476
108e4     58 00 90 5D |  if_ne	jmp	#LR__1410
108e8     50 00 00 FF 
108ec     B8 E4 05 F1 | 	add	objptr, ##41144
108f0     F2 20 62 FC | 	wrlong	local02, objptr
108f4     06 00 00 FF 
108f8     3C E4 85 F1 | 	sub	objptr, ##3132
108fc     F2 20 02 FB | 	rdlong	local02, objptr
10900     01 20 86 F1 | 	sub	local02, #1
10904     04 E4 05 F1 | 	add	objptr, #4
10908     F2 20 62 FC | 	wrlong	local02, objptr
1090c                 | '   runptr=testptr
1090c                 | '   lineptr_e=lineptr-1
1090c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
1090c     06 00 00 FF 
10910     84 E4 05 F1 | 	add	objptr, ##3204
10914     F2 20 02 FB | 	rdlong	local02, objptr
10918     50 00 00 FF 
1091c     04 E5 85 F1 | 	sub	objptr, ##41220
10920     FF FF 3F FF 
10924     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10928     50 00 00 AF 
1092c     04 E5 05 A1 |  if_e	add	objptr, ##41220
10930     F2 00 68 AC |  if_e	wrlong	#0, objptr
10934     50 00 00 AF 
10938     04 E5 85 A1 |  if_e	sub	objptr, ##41220
1093c     04 00 90 FD | 	jmp	#LR__1411
10940                 | LR__1410
10940     0C 00 B0 FD | 	call	#_do_find_goto
10944                 | LR__1411
10944     A7 F0 03 F6 | 	mov	ptra, fp
10948     B2 00 A0 FD | 	call	#popregs_
1094c                 | _do_fast_goto_ret
1094c     2D 00 64 FD | 	ret
10950                 | 
10950                 | ' 
10950                 | ' '------- find goto  
10950                 | ' 
10950                 | ' sub do_find_goto
10950                 | _do_find_goto
10950     03 4A 05 F6 | 	mov	COUNT_, #3
10954     A8 00 A0 FD | 	call	#pushregs_
10958     24 F0 07 F1 | 	add	ptra, #36
1095c                 | _do_find_goto_enter
1095c     4A 00 00 FF 
10960     80 E4 05 F1 | 	add	objptr, ##38016
10964     F2 1E 02 FB | 	rdlong	local01, objptr
10968     0F 21 02 F6 | 	mov	local02, local01
1096c     01 20 66 F0 | 	shl	local02, #1
10970     0F 21 02 F1 | 	add	local02, local01
10974     02 20 66 F0 | 	shl	local02, #2
10978     03 00 00 FF 
1097c     04 E4 85 F1 | 	sub	objptr, ##1540
10980     F2 20 02 F1 | 	add	local02, objptr
10984     04 20 06 F1 | 	add	local02, #4
10988     10 21 02 FB | 	rdlong	local02, local02
1098c     A7 20 62 FC | 	wrlong	local02, fp
10990     03 00 00 FF 
10994     0C E4 05 F1 | 	add	objptr, ##1548
10998     F2 22 02 FB | 	rdlong	local03, objptr
1099c     4A 00 00 FF 
109a0     88 E4 85 F1 | 	sub	objptr, ##38024
109a4     04 4E 05 F1 | 	add	fp, #4
109a8     A7 22 62 FC | 	wrlong	local03, fp
109ac     04 4E 85 F1 | 	sub	fp, #4
109b0                 | ' 
109b0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
109b0                 | ' gotoptr=programstart
109b0                 | ' do
109b0                 | LR__1420
109b0     0C 4E 05 F1 | 	add	fp, #12
109b4     A7 12 02 F6 | 	mov	arg01, fp
109b8     08 4E 85 F1 | 	sub	fp, #8
109bc     A7 14 02 FB | 	rdlong	arg02, fp
109c0     04 4E 85 F1 | 	sub	fp, #4
109c4     18 16 06 F6 | 	mov	arg03, #24
109c8     0B 00 00 FF 
109cc     CC E4 05 F1 | 	add	objptr, ##5836
109d0     30 F2 B0 FD | 	call	#_psram_spin2_read1
109d4     0B 00 00 FF 
109d8     CC E4 85 F1 | 	sub	objptr, ##5836
109dc                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
109dc                 | '   if gotoheader(0)<>$FFFFFFFF then
109dc     0C 4E 05 F1 | 	add	fp, #12
109e0     A7 22 02 FB | 	rdlong	local03, fp
109e4     0C 4E 85 F1 | 	sub	fp, #12
109e8     FF FF 7F FF 
109ec     FF 23 0E F2 | 	cmp	local03, ##-1 wz
109f0     24 00 90 AD |  if_e	jmp	#LR__1421
109f4     04 4E 05 F1 | 	add	fp, #4
109f8     A7 22 02 FB | 	rdlong	local03, fp
109fc     04 4E 05 F1 | 	add	fp, #4
10a00     A7 22 62 FC | 	wrlong	local03, fp
10a04     18 4E 05 F1 | 	add	fp, #24
10a08     A7 22 02 FB | 	rdlong	local03, fp
10a0c     1C 4E 85 F1 | 	sub	fp, #28
10a10     A7 22 62 FC | 	wrlong	local03, fp
10a14     04 4E 85 F1 | 	sub	fp, #4
10a18                 | LR__1421
10a18     20 4E 05 F1 | 	add	fp, #32
10a1c     A7 22 02 FB | 	rdlong	local03, fp
10a20     20 4E 85 F1 | 	sub	fp, #32
10a24     FF FF 3F FF 
10a28     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
10a2c     0C 4E 05 51 |  if_ne	add	fp, #12
10a30     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10a34     0C 4E 85 51 |  if_ne	sub	fp, #12
10a38     FF FF 7F 5F 
10a3c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10a40     18 00 90 AD |  if_e	jmp	#LR__1422
10a44     0C 4E 05 F1 | 	add	fp, #12
10a48     A7 22 02 FB | 	rdlong	local03, fp
10a4c     0C 4E 85 F1 | 	sub	fp, #12
10a50     A7 20 02 FB | 	rdlong	local02, fp
10a54     10 23 0A F2 | 	cmp	local03, local02 wz
10a58     54 FF 9F 5D |  if_ne	jmp	#LR__1420
10a5c                 | LR__1422
10a5c                 | ' 
10a5c                 | ' if gotoheader(0)=gotoline then
10a5c     0C 4E 05 F1 | 	add	fp, #12
10a60     A7 22 02 FB | 	rdlong	local03, fp
10a64     0C 4E 85 F1 | 	sub	fp, #12
10a68     A7 1E 02 FB | 	rdlong	local01, fp
10a6c     0F 23 0A F2 | 	cmp	local03, local01 wz
10a70     D8 00 90 5D |  if_ne	jmp	#LR__1423
10a74     4A 00 00 FF 
10a78     80 E4 05 F1 | 	add	objptr, ##38016
10a7c     F2 1E 02 FB | 	rdlong	local01, objptr
10a80     0F 21 02 F6 | 	mov	local02, local01
10a84     01 20 66 F0 | 	shl	local02, #1
10a88     0F 21 02 F1 | 	add	local02, local01
10a8c     02 20 66 F0 | 	shl	local02, #2
10a90     03 00 00 FF 
10a94     04 E4 85 F1 | 	sub	objptr, ##1540
10a98     F2 20 02 F1 | 	add	local02, objptr
10a9c     08 4E 05 F1 | 	add	fp, #8
10aa0     A7 22 02 FB | 	rdlong	local03, fp
10aa4     10 23 62 FC | 	wrlong	local03, local02
10aa8     03 00 00 FF 
10aac     04 E4 05 F1 | 	add	objptr, ##1540
10ab0     F2 1E 02 FB | 	rdlong	local01, objptr
10ab4     0F 21 02 F6 | 	mov	local02, local01
10ab8     01 20 66 F0 | 	shl	local02, #1
10abc     0F 21 02 F1 | 	add	local02, local01
10ac0     02 20 66 F0 | 	shl	local02, #2
10ac4     03 00 00 FF 
10ac8     04 E4 85 F1 | 	sub	objptr, ##1540
10acc     F2 20 02 F1 | 	add	local02, objptr
10ad0     08 20 06 F1 | 	add	local02, #8
10ad4     10 9D 68 FC | 	wrlong	#78, local02
10ad8     03 00 00 FF 
10adc     04 E4 05 F1 | 	add	objptr, ##1540
10ae0     F2 20 02 FB | 	rdlong	local02, objptr
10ae4     10 13 02 F6 | 	mov	arg01, local02
10ae8     01 12 66 F0 | 	shl	arg01, #1
10aec     10 13 02 F1 | 	add	arg01, local02
10af0     02 12 66 F0 | 	shl	arg01, #2
10af4     03 00 00 FF 
10af8     04 E4 85 F1 | 	sub	objptr, ##1540
10afc     F2 12 02 F1 | 	add	arg01, objptr
10b00     09 00 00 FF 
10b04     44 E4 05 F1 | 	add	objptr, ##4676
10b08     F2 14 02 FB | 	rdlong	arg02, objptr
10b0c     02 22 06 F6 | 	mov	local03, #2
10b10     10 23 02 F1 | 	add	local03, local02
10b14     0B 00 00 FF 
10b18     5C E4 85 F1 | 	sub	objptr, ##5724
10b1c     F2 16 02 FB | 	rdlong	arg03, objptr
10b20     0B 23 02 FD | 	qmul	local03, arg03
10b24     08 4E 85 F1 | 	sub	fp, #8
10b28     39 00 00 FF 
10b2c     98 E5 85 F1 | 	sub	objptr, ##29592
10b30     18 22 62 FD | 	getqx	local03
10b34     11 15 02 F1 | 	add	arg02, local03
10b38     64 F1 B0 FD | 	call	#_psram_spin2_write
10b3c     0B 00 00 FF 
10b40     CC E4 85 F1 | 	sub	objptr, ##5836
10b44     18 FD BF FD | 	call	#_do_fast_goto
10b48     08 00 90 FD | 	jmp	#LR__1424
10b4c                 | LR__1423
10b4c     26 12 06 F6 | 	mov	arg01, #38
10b50     60 C7 B0 FD | 	call	#_printerror
10b54                 | LR__1424
10b54     A7 F0 03 F6 | 	mov	ptra, fp
10b58     B2 00 A0 FD | 	call	#popregs_
10b5c                 | _do_find_goto_ret
10b5c     2D 00 64 FD | 	ret
10b60                 | 
10b60                 | ' 
10b60                 | ' '------- slow goto  
10b60                 | ' 
10b60                 | ' sub do_slow_goto
10b60                 | _do_slow_goto
10b60     02 4A 05 F6 | 	mov	COUNT_, #2
10b64     A8 00 A0 FD | 	call	#pushregs_
10b68     30 F0 07 F1 | 	add	ptra, #48
10b6c     4C A8 BF FD | 	call	#_pop
10b70     FF 1E 02 F6 | 	mov	local01, result3
10b74     24 4E 05 F1 | 	add	fp, #36
10b78     A7 FA 61 FC | 	wrlong	result1, fp
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 FC 61 FC | 	wrlong	result2, fp
10b84     04 4E 05 F1 | 	add	fp, #4
10b88     A7 1E 62 FC | 	wrlong	local01, fp
10b8c     08 4E 85 F1 | 	sub	fp, #8
10b90     A7 12 02 F6 | 	mov	arg01, fp
10b94     24 4E 85 F1 | 	sub	fp, #36
10b98     04 AA BF FD | 	call	#_converttoint
10b9c     A7 FA 61 FC | 	wrlong	result1, fp
10ba0     4A 00 00 FF 
10ba4     88 E4 05 F1 | 	add	objptr, ##38024
10ba8     F2 20 02 FB | 	rdlong	local02, objptr
10bac     4A 00 00 FF 
10bb0     88 E4 85 F1 | 	sub	objptr, ##38024
10bb4     04 4E 05 F1 | 	add	fp, #4
10bb8     A7 20 62 FC | 	wrlong	local02, fp
10bbc     04 4E 85 F1 | 	sub	fp, #4
10bc0                 | ' 
10bc0                 | ' t1=pop() : gotoline=converttoint(t1)
10bc0                 | ' gotoptr=programstart
10bc0                 | ' do
10bc0                 | LR__1430
10bc0     0C 4E 05 F1 | 	add	fp, #12
10bc4     A7 12 02 F6 | 	mov	arg01, fp
10bc8     08 4E 85 F1 | 	sub	fp, #8
10bcc     A7 14 02 FB | 	rdlong	arg02, fp
10bd0     04 4E 85 F1 | 	sub	fp, #4
10bd4     18 16 06 F6 | 	mov	arg03, #24
10bd8     0B 00 00 FF 
10bdc     CC E4 05 F1 | 	add	objptr, ##5836
10be0     20 F0 B0 FD | 	call	#_psram_spin2_read1
10be4     0B 00 00 FF 
10be8     CC E4 85 F1 | 	sub	objptr, ##5836
10bec                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10bec                 | '   if gotoheader(0)<>$FFFFFFFF then
10bec     0C 4E 05 F1 | 	add	fp, #12
10bf0     A7 20 02 FB | 	rdlong	local02, fp
10bf4     0C 4E 85 F1 | 	sub	fp, #12
10bf8     FF FF 7F FF 
10bfc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
10c00     24 00 90 AD |  if_e	jmp	#LR__1431
10c04     04 4E 05 F1 | 	add	fp, #4
10c08     A7 20 02 FB | 	rdlong	local02, fp
10c0c     04 4E 05 F1 | 	add	fp, #4
10c10     A7 20 62 FC | 	wrlong	local02, fp
10c14     18 4E 05 F1 | 	add	fp, #24
10c18     A7 20 02 FB | 	rdlong	local02, fp
10c1c     1C 4E 85 F1 | 	sub	fp, #28
10c20     A7 20 62 FC | 	wrlong	local02, fp
10c24     04 4E 85 F1 | 	sub	fp, #4
10c28                 | LR__1431
10c28     20 4E 05 F1 | 	add	fp, #32
10c2c     A7 20 02 FB | 	rdlong	local02, fp
10c30     20 4E 85 F1 | 	sub	fp, #32
10c34     FF FF 3F FF 
10c38     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10c3c     0C 4E 05 51 |  if_ne	add	fp, #12
10c40     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10c44     0C 4E 85 51 |  if_ne	sub	fp, #12
10c48     FF FF 7F 5F 
10c4c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10c50     18 00 90 AD |  if_e	jmp	#LR__1432
10c54     0C 4E 05 F1 | 	add	fp, #12
10c58     A7 20 02 FB | 	rdlong	local02, fp
10c5c     0C 4E 85 F1 | 	sub	fp, #12
10c60     A7 16 02 FB | 	rdlong	arg03, fp
10c64     0B 21 0A F2 | 	cmp	local02, arg03 wz
10c68     54 FF 9F 5D |  if_ne	jmp	#LR__1430
10c6c                 | LR__1432
10c6c                 | ' if gotoheader(0)=gotoline then  
10c6c     0C 4E 05 F1 | 	add	fp, #12
10c70     A7 20 02 FB | 	rdlong	local02, fp
10c74     0C 4E 85 F1 | 	sub	fp, #12
10c78     A7 1E 02 FB | 	rdlong	local01, fp
10c7c     0F 21 0A F2 | 	cmp	local02, local01 wz
10c80     60 00 90 5D |  if_ne	jmp	#LR__1433
10c84     08 4E 05 F1 | 	add	fp, #8
10c88     A7 20 02 FB | 	rdlong	local02, fp
10c8c     08 4E 85 F1 | 	sub	fp, #8
10c90     50 00 00 FF 
10c94     B8 E4 05 F1 | 	add	objptr, ##41144
10c98     F2 20 62 FC | 	wrlong	local02, objptr
10c9c     06 00 00 FF 
10ca0     3C E4 85 F1 | 	sub	objptr, ##3132
10ca4     F2 20 02 FB | 	rdlong	local02, objptr
10ca8     01 20 86 F1 | 	sub	local02, #1
10cac     04 E4 05 F1 | 	add	objptr, #4
10cb0     F2 20 62 FC | 	wrlong	local02, objptr
10cb4                 | '    runptr=oldgotoptr
10cb4                 | '    lineptr_e=lineptr-1
10cb4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
10cb4     06 00 00 FF 
10cb8     84 E4 05 F1 | 	add	objptr, ##3204
10cbc     F2 20 02 FB | 	rdlong	local02, objptr
10cc0     50 00 00 FF 
10cc4     04 E5 85 F1 | 	sub	objptr, ##41220
10cc8     FF FF 3F FF 
10ccc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10cd0     50 00 00 AF 
10cd4     04 E5 05 A1 |  if_e	add	objptr, ##41220
10cd8     F2 00 68 AC |  if_e	wrlong	#0, objptr
10cdc     50 00 00 AF 
10ce0     04 E5 85 A1 |  if_e	sub	objptr, ##41220
10ce4                 | LR__1433
10ce4     A7 F0 03 F6 | 	mov	ptra, fp
10ce8     B2 00 A0 FD | 	call	#popregs_
10cec                 | _do_slow_goto_ret
10cec     2D 00 64 FD | 	ret
10cf0                 | 
10cf0                 | ' 
10cf0                 | ' ' ----------------  hex$
10cf0                 | ' 
10cf0                 | ' sub do_hex
10cf0                 | _do_hex
10cf0     01 4A 05 F6 | 	mov	COUNT_, #1
10cf4     A8 00 A0 FD | 	call	#pushregs_
10cf8     18 F0 07 F1 | 	add	ptra, #24
10cfc     4A 00 00 FF 
10d00     80 E4 05 F1 | 	add	objptr, ##38016
10d04     F2 1E 02 FB | 	rdlong	local01, objptr
10d08     0F 17 02 F6 | 	mov	arg03, local01
10d0c     01 16 66 F0 | 	shl	arg03, #1
10d10     0F 17 02 F1 | 	add	arg03, local01
10d14     02 16 66 F0 | 	shl	arg03, #2
10d18     03 00 00 FF 
10d1c     04 E4 85 F1 | 	sub	objptr, ##1540
10d20     F2 16 02 F1 | 	add	arg03, objptr
10d24     0B 17 02 FB | 	rdlong	arg03, arg03
10d28     0C 4E 05 F1 | 	add	fp, #12
10d2c     A7 16 62 FC | 	wrlong	arg03, fp
10d30                 | ' 
10d30                 | ' numpar=compiledline(lineptr_e).result.uresult
10d30                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
10d30     0C 4E 85 F1 | 	sub	fp, #12
10d34     03 16 16 F2 | 	cmp	arg03, #3 wc
10d38     47 00 00 FF 
10d3c     7C E4 85 F1 | 	sub	objptr, ##36476
10d40     0C 4E 05 C1 |  if_b	add	fp, #12
10d44     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10d48     0C 4E 85 C1 |  if_b	sub	fp, #12
10d4c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1440
10d50     00 12 06 F6 | 	mov	arg01, #0
10d54     50 55 B1 FD | 	call	#__system___getiolock_0542
10d58     FD 12 02 F6 | 	mov	arg01, result1
10d5c     E4 FA B0 FD | 	call	#__system___lockmem
10d60     84 01 00 FF 
10d64     97 14 06 F6 | 	mov	arg02, ##@LR__5442
10d68     00 12 06 F6 | 	mov	arg01, #0
10d6c     00 16 06 F6 | 	mov	arg03, #0
10d70     C4 07 B1 FD | 	call	#__system___basic_print_string
10d74     00 12 06 F6 | 	mov	arg01, #0
10d78     2C 55 B1 FD | 	call	#__system___getiolock_0542
10d7c     FD 00 68 FC | 	wrlong	#0, result1
10d80     27 12 06 F6 | 	mov	arg01, #39
10d84     2C C5 B0 FD | 	call	#_printerror
10d88     B8 00 90 FD | 	jmp	#LR__1443
10d8c                 | LR__1440
10d8c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
10d8c     0C 4E 05 F1 | 	add	fp, #12
10d90     A7 1E 02 FB | 	rdlong	local01, fp
10d94     0C 4E 85 F1 | 	sub	fp, #12
10d98     02 1E 0E F2 | 	cmp	local01, #2 wz
10d9c     38 00 90 5D |  if_ne	jmp	#LR__1441
10da0     18 A6 BF FD | 	call	#_pop
10da4     FF 1E 02 F6 | 	mov	local01, result3
10da8     A7 FA 61 FC | 	wrlong	result1, fp
10dac     04 4E 05 F1 | 	add	fp, #4
10db0     A7 FC 61 FC | 	wrlong	result2, fp
10db4     04 4E 05 F1 | 	add	fp, #4
10db8     A7 1E 62 FC | 	wrlong	local01, fp
10dbc     08 4E 85 F1 | 	sub	fp, #8
10dc0     A7 12 02 F6 | 	mov	arg01, fp
10dc4     D8 A7 BF FD | 	call	#_converttoint
10dc8     14 4E 05 F1 | 	add	fp, #20
10dcc     A7 FA 61 FC | 	wrlong	result1, fp
10dd0     14 4E 85 F1 | 	sub	fp, #20
10dd4     0C 00 90 FD | 	jmp	#LR__1442
10dd8                 | LR__1441
10dd8     14 4E 05 F1 | 	add	fp, #20
10ddc     A7 10 68 FC | 	wrlong	#8, fp
10de0     14 4E 85 F1 | 	sub	fp, #20
10de4                 | LR__1442
10de4     D4 A5 BF FD | 	call	#_pop
10de8     FF 1E 02 F6 | 	mov	local01, result3
10dec     A7 FA 61 FC | 	wrlong	result1, fp
10df0     04 4E 05 F1 | 	add	fp, #4
10df4     A7 FC 61 FC | 	wrlong	result2, fp
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 1E 62 FC | 	wrlong	local01, fp
10e00     08 4E 85 F1 | 	sub	fp, #8
10e04     A7 12 02 F6 | 	mov	arg01, fp
10e08     94 A7 BF FD | 	call	#_converttoint
10e0c     10 4E 05 F1 | 	add	fp, #16
10e10     A7 FA 61 FC | 	wrlong	result1, fp
10e14     FD 12 02 F6 | 	mov	arg01, result1
10e18     04 4E 05 F1 | 	add	fp, #4
10e1c     A7 14 02 FB | 	rdlong	arg02, fp
10e20     14 4E 85 F1 | 	sub	fp, #20
10e24     10 16 06 F6 | 	mov	arg03, #16
10e28     E8 1C B1 FD | 	call	#__system__Number_S
10e2c     A7 FA 61 FC | 	wrlong	result1, fp
10e30     08 4E 05 F1 | 	add	fp, #8
10e34     A7 3E 68 FC | 	wrlong	#31, fp
10e38     08 4E 85 F1 | 	sub	fp, #8
10e3c     A7 12 02 F6 | 	mov	arg01, fp
10e40     10 A6 BF FD | 	call	#_push
10e44                 | LR__1443
10e44     A7 F0 03 F6 | 	mov	ptra, fp
10e48     B2 00 A0 FD | 	call	#popregs_
10e4c                 | _do_hex_ret
10e4c     2D 00 64 FD | 	ret
10e50                 | 
10e50                 | ' 
10e50                 | ' ' ----------------  if
10e50                 | ' 
10e50                 | ' sub do_if
10e50                 | _do_if
10e50     05 4A 05 F6 | 	mov	COUNT_, #5
10e54     A8 00 A0 FD | 	call	#pushregs_
10e58     60 A5 BF FD | 	call	#_pop
10e5c     FD 1E 0A F6 | 	mov	local01, result1 wz
10e60     FE 20 02 F6 | 	mov	local02, result2
10e64     FF 22 02 F6 | 	mov	local03, result3
10e68                 | ' t1=pop()
10e68                 | ' ' if uresult=0, jump over else
10e68                 | ' if t1.result.uresult = 0 then 
10e68     BC 00 90 5D |  if_ne	jmp	#LR__1452
10e6c                 | '   for i=lineptr_e to lineptr-1
10e6c     4A 00 00 FF 
10e70     80 E4 05 F1 | 	add	objptr, ##38016
10e74     F2 24 02 FB | 	rdlong	local04, objptr
10e78     04 E4 85 F1 | 	sub	objptr, #4
10e7c     F2 26 02 FB | 	rdlong	local05, objptr
10e80     4A 00 00 FF 
10e84     7C E4 85 F1 | 	sub	objptr, ##38012
10e88                 | LR__1450
10e88     13 25 52 F2 | 	cmps	local04, local05 wc
10e8c     78 00 90 3D |  if_ae	jmp	#LR__1451
10e90     12 FF 01 F6 | 	mov	result3, local04
10e94     01 FE 65 F0 | 	shl	result3, #1
10e98     12 FF 01 F1 | 	add	result3, local04
10e9c     02 FE 65 F0 | 	shl	result3, #2
10ea0     47 00 00 FF 
10ea4     7C E4 05 F1 | 	add	objptr, ##36476
10ea8     F2 FE 01 F1 | 	add	result3, objptr
10eac     FF 1E 02 FB | 	rdlong	local01, result3
10eb0     04 FE 05 F1 | 	add	result3, #4
10eb4     FF FC 01 FB | 	rdlong	result2, result3
10eb8     12 FF 01 F6 | 	mov	result3, local04
10ebc     01 FE 65 F0 | 	shl	result3, #1
10ec0     12 FF 01 F1 | 	add	result3, local04
10ec4     02 FE 65 F0 | 	shl	result3, #2
10ec8     F2 FE 01 F1 | 	add	result3, objptr
10ecc     08 FE 05 F1 | 	add	result3, #8
10ed0     FF FE 01 FB | 	rdlong	result3, result3
10ed4     FE 20 02 F6 | 	mov	local02, result2
10ed8     FF 22 02 F6 | 	mov	local03, result3
10edc                 | '     t1=compiledline(i)
10edc                 | '     if t1.result_type=token_else then lineptr_e=i : return
10edc     5A 22 0E F2 | 	cmp	local03, #90 wz
10ee0     47 00 00 FF 
10ee4     7C E4 85 F1 | 	sub	objptr, ##36476
10ee8     4A 00 00 AF 
10eec     80 E4 05 A1 |  if_e	add	objptr, ##38016
10ef0     F2 24 62 AC |  if_e	wrlong	local04, objptr
10ef4     4A 00 00 AF 
10ef8     80 E4 85 A1 |  if_e	sub	objptr, ##38016
10efc     28 00 90 AD |  if_e	jmp	#LR__1453
10f00     01 24 06 F1 | 	add	local04, #1
10f04     80 FF 9F FD | 	jmp	#LR__1450
10f08                 | LR__1451
10f08     4A 00 00 FF 
10f0c     7C E4 05 F1 | 	add	objptr, ##38012
10f10     F2 26 02 FB | 	rdlong	local05, objptr
10f14     01 26 86 F1 | 	sub	local05, #1
10f18     04 E4 05 F1 | 	add	objptr, #4
10f1c     F2 26 62 FC | 	wrlong	local05, objptr
10f20     4A 00 00 FF 
10f24     80 E4 85 F1 | 	sub	objptr, ##38016
10f28                 | LR__1452
10f28                 | LR__1453
10f28     A7 F0 03 F6 | 	mov	ptra, fp
10f2c     B2 00 A0 FD | 	call	#popregs_
10f30                 | _do_if_ret
10f30     2D 00 64 FD | 	ret
10f34                 | 
10f34                 | ' 
10f34                 | ' ' ----------------  inkey$
10f34                 | ' 
10f34                 | ' sub do_inkey
10f34                 | _do_inkey
10f34     02 4A 05 F6 | 	mov	COUNT_, #2
10f38     A8 00 A0 FD | 	call	#pushregs_
10f3c     0C F0 07 F1 | 	add	ptra, #12
10f40     EC F0 B0 FD | 	call	#_usbnew_spin2_get_key
10f44     45 00 00 FF 
10f48     74 E4 05 F1 | 	add	objptr, ##35444
10f4c     F2 FA 61 FC | 	wrlong	result1, objptr
10f50                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
10f50     45 00 00 FF 
10f54     74 E4 85 F1 | 	sub	objptr, ##35444
10f58     00 FA 0D F2 | 	cmp	result1, #0 wz
10f5c     94 00 90 AD |  if_e	jmp	#LR__1461
10f60     45 00 00 FF 
10f64     74 E4 05 F1 | 	add	objptr, ##35444
10f68     F2 1C 02 FB | 	rdlong	arg06, objptr
10f6c     45 00 00 FF 
10f70     74 E4 85 F1 | 	sub	objptr, ##35444
10f74     00 00 40 FF 
10f78     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
10f7c     45 00 00 CF 
10f80     74 E4 05 C1 |  if_b	add	objptr, ##35444
10f84     F2 1E 02 CB |  if_b	rdlong	local01, objptr
10f88     45 00 00 CF 
10f8c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
10f90     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
10f94     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
10f98     58 00 90 3D |  if_ae	jmp	#LR__1461
10f9c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
10f9c     50 00 00 FF 
10fa0     14 E5 05 F1 | 	add	objptr, ##41236
10fa4     F2 1C 02 FB | 	rdlong	arg06, objptr
10fa8     50 00 00 FF 
10fac     14 E5 85 F1 | 	sub	objptr, ##41236
10fb0     01 1C 0E F2 | 	cmp	arg06, #1 wz
10fb4     3C 00 90 5D |  if_ne	jmp	#LR__1460
10fb8     51 00 00 FF 
10fbc     B8 E5 05 F1 | 	add	objptr, ##41912
10fc0     F2 14 02 FB | 	rdlong	arg02, objptr
10fc4     04 E4 85 F1 | 	sub	objptr, #4
10fc8     F2 1A 02 FB | 	rdlong	arg05, objptr
10fcc     07 12 06 F6 | 	mov	arg01, #7
10fd0     56 00 00 FF 
10fd4     44 16 06 F6 | 	mov	arg03, ##44100
10fd8     0C 18 C6 F9 | 	decod	arg04, #12
10fdc     01 1C 66 F6 | 	neg	arg06, #1
10fe0     46 00 00 FF 
10fe4     E8 E4 85 F1 | 	sub	objptr, ##36072
10fe8     E8 F3 B0 FD | 	call	#_audio096_spin2_play
10fec     0B 00 00 FF 
10ff0     CC E4 85 F1 | 	sub	objptr, ##5836
10ff4                 | LR__1460
10ff4                 | LR__1461
10ff4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
10ff4     45 00 00 FF 
10ff8     74 E4 05 F1 | 	add	objptr, ##35444
10ffc     F2 1C 0A FB | 	rdlong	arg06, objptr wz
11000     45 00 00 FF 
11004     74 E4 85 F1 | 	sub	objptr, ##35444
11008     D4 01 90 AD |  if_e	jmp	#LR__1470
1100c     45 00 00 FF 
11010     74 E4 05 F1 | 	add	objptr, ##35444
11014     F2 1C 02 FB | 	rdlong	arg06, objptr
11018     45 00 00 FF 
1101c     74 E4 85 F1 | 	sub	objptr, ##35444
11020     00 00 40 FF 
11024     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11028     45 00 00 CF 
1102c     74 E4 05 C1 |  if_b	add	objptr, ##35444
11030     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11034     45 00 00 CF 
11038     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1103c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
11040     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11044     98 01 90 3D |  if_ae	jmp	#LR__1470
11048                 | '   if leds and 2 = 2 then 
11048     51 00 00 FF 
1104c     E8 E5 05 F1 | 	add	objptr, ##41960
11050     F2 1E 0A FB | 	rdlong	local01, objptr wz
11054     51 00 00 FF 
11058     E8 E5 85 F1 | 	sub	objptr, ##41960
1105c     58 01 90 AD |  if_e	jmp	#LR__1469
11060                 | '     if key>96 andalso key<123 then
11060     45 00 00 FF 
11064     74 E4 05 F1 | 	add	objptr, ##35444
11068     F2 1E 02 FB | 	rdlong	local01, objptr
1106c     45 00 00 FF 
11070     74 E4 85 F1 | 	sub	objptr, ##35444
11074     61 1E 16 F2 | 	cmp	local01, #97 wc
11078     3C 00 90 CD |  if_b	jmp	#LR__1462
1107c     45 00 00 FF 
11080     74 E4 05 F1 | 	add	objptr, ##35444
11084     F2 1E 02 FB | 	rdlong	local01, objptr
11088     45 00 00 FF 
1108c     74 E4 85 F1 | 	sub	objptr, ##35444
11090     7B 1E 16 F2 | 	cmp	local01, #123 wc
11094     20 00 90 3D |  if_ae	jmp	#LR__1462
11098     45 00 00 FF 
1109c     74 E4 05 F1 | 	add	objptr, ##35444
110a0     F2 1E 02 FB | 	rdlong	local01, objptr
110a4     20 1E 86 F1 | 	sub	local01, #32
110a8     F2 1E 62 FC | 	wrlong	local01, objptr
110ac     45 00 00 FF 
110b0     74 E4 85 F1 | 	sub	objptr, ##35444
110b4     00 01 90 FD | 	jmp	#LR__1468
110b8                 | LR__1462
110b8     45 00 00 FF 
110bc     74 E4 05 F1 | 	add	objptr, ##35444
110c0     F2 1E 02 FB | 	rdlong	local01, objptr
110c4     45 00 00 FF 
110c8     74 E4 85 F1 | 	sub	objptr, ##35444
110cc     41 1E 16 F2 | 	cmp	local01, #65 wc
110d0     3C 00 90 CD |  if_b	jmp	#LR__1463
110d4     45 00 00 FF 
110d8     74 E4 05 F1 | 	add	objptr, ##35444
110dc     F2 1E 02 FB | 	rdlong	local01, objptr
110e0     45 00 00 FF 
110e4     74 E4 85 F1 | 	sub	objptr, ##35444
110e8     5B 1E 16 F2 | 	cmp	local01, #91 wc
110ec     20 00 90 3D |  if_ae	jmp	#LR__1463
110f0     45 00 00 FF 
110f4     74 E4 05 F1 | 	add	objptr, ##35444
110f8     F2 1E 02 FB | 	rdlong	local01, objptr
110fc     20 1E 06 F1 | 	add	local01, #32
11100     F2 1E 62 FC | 	wrlong	local01, objptr
11104     45 00 00 FF 
11108     74 E4 85 F1 | 	sub	objptr, ##35444
1110c     A8 00 90 FD | 	jmp	#LR__1467
11110                 | LR__1463
11110     45 00 00 FF 
11114     74 E4 05 F1 | 	add	objptr, ##35444
11118     F2 1E 02 FB | 	rdlong	local01, objptr
1111c     45 00 00 FF 
11120     74 E4 85 F1 | 	sub	objptr, ##35444
11124     17 1E 16 F2 | 	cmp	local01, #23 wc
11128     3C 00 90 CD |  if_b	jmp	#LR__1464
1112c     45 00 00 FF 
11130     74 E4 05 F1 | 	add	objptr, ##35444
11134     F2 1E 02 FB | 	rdlong	local01, objptr
11138     45 00 00 FF 
1113c     74 E4 85 F1 | 	sub	objptr, ##35444
11140     20 1E 16 F2 | 	cmp	local01, #32 wc
11144     20 00 90 3D |  if_ae	jmp	#LR__1464
11148     45 00 00 FF 
1114c     74 E4 05 F1 | 	add	objptr, ##35444
11150     F2 1E 02 FB | 	rdlong	local01, objptr
11154     09 1E 86 F1 | 	sub	local01, #9
11158     F2 1E 62 FC | 	wrlong	local01, objptr
1115c     45 00 00 FF 
11160     74 E4 85 F1 | 	sub	objptr, ##35444
11164     50 00 90 FD | 	jmp	#LR__1466
11168                 | LR__1464
11168     45 00 00 FF 
1116c     74 E4 05 F1 | 	add	objptr, ##35444
11170     F2 20 02 FB | 	rdlong	local02, objptr
11174     45 00 00 FF 
11178     74 E4 85 F1 | 	sub	objptr, ##35444
1117c     0E 20 16 F2 | 	cmp	local02, #14 wc
11180     34 00 90 CD |  if_b	jmp	#LR__1465
11184     45 00 00 FF 
11188     74 E4 05 F1 | 	add	objptr, ##35444
1118c     F2 1E 02 FB | 	rdlong	local01, objptr
11190     45 00 00 FF 
11194     74 E4 85 F1 | 	sub	objptr, ##35444
11198     17 1E 16 F2 | 	cmp	local01, #23 wc
1119c     51 00 00 CF 
111a0     EC E5 05 C1 |  if_b	add	objptr, ##41964
111a4     F2 20 02 CB |  if_b	rdlong	local02, objptr
111a8     27 20 06 C1 |  if_b	add	local02, #39
111ac     F2 20 62 CC |  if_b	wrlong	local02, objptr
111b0     51 00 00 CF 
111b4     EC E5 85 C1 |  if_b	sub	objptr, ##41964
111b8                 | LR__1465
111b8                 | LR__1466
111b8                 | LR__1467
111b8                 | LR__1468
111b8                 | LR__1469
111b8     45 00 00 FF 
111bc     74 E4 05 F1 | 	add	objptr, ##35444
111c0     F2 12 02 FB | 	rdlong	arg01, objptr
111c4     45 00 00 FF 
111c8     74 E4 85 F1 | 	sub	objptr, ##35444
111cc     28 C4 B0 FD | 	call	#_scantochar
111d0     FD 12 02 F6 | 	mov	arg01, result1
111d4     AC 18 B1 FD | 	call	#__system__Chr_S
111d8     A7 FA 61 FC | 	wrlong	result1, fp
111dc     0C 00 90 FD | 	jmp	#LR__1471
111e0                 | LR__1470
111e0     84 01 00 FF 
111e4     9E 20 06 F6 | 	mov	local02, ##@LR__5443
111e8     A7 20 62 FC | 	wrlong	local02, fp
111ec                 | LR__1471
111ec     08 4E 05 F1 | 	add	fp, #8
111f0     A7 3E 68 FC | 	wrlong	#31, fp
111f4     08 4E 85 F1 | 	sub	fp, #8
111f8     A7 12 02 F6 | 	mov	arg01, fp
111fc     54 A2 BF FD | 	call	#_push
11200     A7 F0 03 F6 | 	mov	ptra, fp
11204     B2 00 A0 FD | 	call	#popregs_
11208                 | _do_inkey_ret
11208     2D 00 64 FD | 	ret
1120c                 | 
1120c                 | ' 
1120c                 | ' ' ----------------  ink
1120c                 | ' 
1120c                 | ' sub do_ink
1120c                 | _do_ink
1120c     00 4A 05 F6 | 	mov	COUNT_, #0
11210     A8 00 A0 FD | 	call	#pushregs_
11214     0C F0 07 F1 | 	add	ptra, #12
11218     A0 A1 BF FD | 	call	#_pop
1121c     FF 14 02 F6 | 	mov	arg02, result3
11220     A7 FA 61 FC | 	wrlong	result1, fp
11224     04 4E 05 F1 | 	add	fp, #4
11228     A7 FC 61 FC | 	wrlong	result2, fp
1122c     04 4E 05 F1 | 	add	fp, #4
11230     A7 14 62 FC | 	wrlong	arg02, fp
11234     08 4E 85 F1 | 	sub	fp, #8
11238     A7 12 02 F6 | 	mov	arg01, fp
1123c     60 A3 BF FD | 	call	#_converttoint
11240     37 00 00 FF 
11244     3C E4 05 F1 | 	add	objptr, ##28220
11248     F2 FA 61 FC | 	wrlong	result1, objptr
1124c     04 E4 85 F1 | 	sub	objptr, #4
11250     F2 14 02 FB | 	rdlong	arg02, objptr
11254                 | ' 
11254                 | ' write_color:=ff
11254     36 00 00 FF 
11258     F7 E5 85 F1 | 	sub	objptr, ##28151
1125c     F2 FA 61 FC | 	wrlong	result1, objptr
11260                 | ' write_background:=bb
11260     04 E4 05 F1 | 	add	objptr, #4
11264     F2 14 62 FC | 	wrlong	arg02, objptr
11268     36 00 00 FF 
1126c     F7 E5 05 F1 | 	add	objptr, ##28151
11270     F2 12 02 FB | 	rdlong	arg01, objptr
11274     37 00 00 FF 
11278     3C E4 85 F1 | 	sub	objptr, ##28220
1127c     54 CB B0 FD | 	call	#_hg010b_spin2_setcursorcolor
11280     A7 F0 03 F6 | 	mov	ptra, fp
11284     B2 00 A0 FD | 	call	#popregs_
11288                 | _do_ink_ret
11288     2D 00 64 FD | 	ret
1128c                 | 
1128c                 | ' 
1128c                 | ' ' ----------------  int
1128c                 | ' 
1128c                 | ' sub do_int
1128c                 | _do_int
1128c     02 4A 05 F6 | 	mov	COUNT_, #2
11290     A8 00 A0 FD | 	call	#pushregs_
11294     10 F0 07 F1 | 	add	ptra, #16
11298     20 A1 BF FD | 	call	#_pop
1129c     FE 1E 02 F6 | 	mov	local01, result2
112a0     FF 20 02 F6 | 	mov	local02, result3
112a4     A7 FA 61 FC | 	wrlong	result1, fp
112a8     04 4E 05 F1 | 	add	fp, #4
112ac     A7 1E 62 FC | 	wrlong	local01, fp
112b0     04 4E 05 F1 | 	add	fp, #4
112b4     A7 20 62 FC | 	wrlong	local02, fp
112b8                 | ' 
112b8                 | ' t1=pop()
112b8                 | ' select case t1.result_type
112b8     08 4E 85 F1 | 	sub	fp, #8
112bc     1E 20 0E F2 | 	cmp	local02, #30 wz
112c0     14 00 90 AD |  if_e	jmp	#LR__1480
112c4     1F 20 0E F2 | 	cmp	local02, #31 wz
112c8     20 00 90 AD |  if_e	jmp	#LR__1481
112cc     2B 20 0E F2 | 	cmp	local02, #43 wz
112d0     34 00 90 AD |  if_e	jmp	#LR__1482
112d4     50 00 90 FD | 	jmp	#LR__1483
112d8                 | LR__1480
112d8     A7 12 02 FB | 	rdlong	arg01, fp
112dc     00 14 06 F6 | 	mov	arg02, #0
112e0     DC 25 B1 FD | 	call	#__system___float_tointeger
112e4     A7 FA 61 FC | 	wrlong	result1, fp
112e8     3C 00 90 FD | 	jmp	#LR__1483
112ec                 | LR__1481
112ec     A7 12 02 FB | 	rdlong	arg01, fp
112f0     10 29 B1 FD | 	call	#__system____builtin_atof
112f4     FD 12 02 F6 | 	mov	arg01, result1
112f8     00 14 06 F6 | 	mov	arg02, #0
112fc     C0 25 B1 FD | 	call	#__system___float_tointeger
11300     A7 FA 61 FC | 	wrlong	result1, fp
11304     20 00 90 FD | 	jmp	#LR__1483
11308                 | LR__1482
11308     A7 12 02 FB | 	rdlong	arg01, fp
1130c     24 A2 BF FD | 	call	#_convertstring
11310     FD 12 02 F6 | 	mov	arg01, result1
11314     EC 28 B1 FD | 	call	#__system____builtin_atof
11318     FD 12 02 F6 | 	mov	arg01, result1
1131c     00 14 06 F6 | 	mov	arg02, #0
11320     9C 25 B1 FD | 	call	#__system___float_tointeger
11324     A7 FA 61 FC | 	wrlong	result1, fp
11328                 | LR__1483
11328     08 4E 05 F1 | 	add	fp, #8
1132c     A7 38 68 FC | 	wrlong	#28, fp
11330     08 4E 85 F1 | 	sub	fp, #8
11334     A7 12 02 F6 | 	mov	arg01, fp
11338     18 A1 BF FD | 	call	#_push
1133c     A7 F0 03 F6 | 	mov	ptra, fp
11340     B2 00 A0 FD | 	call	#popregs_
11344                 | _do_int_ret
11344     2D 00 64 FD | 	ret
11348                 | 
11348                 | ' 
11348                 | ' ' ----------------  left$
11348                 | ' 
11348                 | ' sub do_left
11348                 | _do_left
11348     00 4A 05 F6 | 	mov	COUNT_, #0
1134c     A8 00 A0 FD | 	call	#pushregs_
11350     14 F0 07 F1 | 	add	ptra, #20
11354     4A 00 00 FF 
11358     80 E4 05 F1 | 	add	objptr, ##38016
1135c     F2 16 02 FB | 	rdlong	arg03, objptr
11360     0B 15 02 F6 | 	mov	arg02, arg03
11364     01 14 66 F0 | 	shl	arg02, #1
11368     0B 15 02 F1 | 	add	arg02, arg03
1136c     02 14 66 F0 | 	shl	arg02, #2
11370     03 00 00 FF 
11374     04 E4 85 F1 | 	sub	objptr, ##1540
11378     F2 14 02 F1 | 	add	arg02, objptr
1137c     0A 17 02 FB | 	rdlong	arg03, arg02
11380     0C 4E 05 F1 | 	add	fp, #12
11384     A7 16 62 FC | 	wrlong	arg03, fp
11388                 | ' 
11388                 | ' numpar=compiledline(lineptr_e).result.uresult
11388                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
11388     0C 4E 85 F1 | 	sub	fp, #12
1138c     02 16 0E F2 | 	cmp	arg03, #2 wz
11390     47 00 00 FF 
11394     7C E4 85 F1 | 	sub	objptr, ##36476
11398     3C 00 90 AD |  if_e	jmp	#LR__1490
1139c     00 12 06 F6 | 	mov	arg01, #0
113a0     04 4F B1 FD | 	call	#__system___getiolock_0542
113a4     FD 12 02 F6 | 	mov	arg01, result1
113a8     98 F4 B0 FD | 	call	#__system___lockmem
113ac     84 01 00 FF 
113b0     9F 14 06 F6 | 	mov	arg02, ##@LR__5444
113b4     00 12 06 F6 | 	mov	arg01, #0
113b8     00 16 06 F6 | 	mov	arg03, #0
113bc     78 01 B1 FD | 	call	#__system___basic_print_string
113c0     00 12 06 F6 | 	mov	arg01, #0
113c4     E0 4E B1 FD | 	call	#__system___getiolock_0542
113c8     FD 00 68 FC | 	wrlong	#0, result1
113cc     27 12 06 F6 | 	mov	arg01, #39
113d0     E0 BE B0 FD | 	call	#_printerror
113d4     E8 00 90 FD | 	jmp	#LR__1493
113d8                 | LR__1490
113d8     E0 9F BF FD | 	call	#_pop
113dc     FF 16 02 F6 | 	mov	arg03, result3
113e0     A7 FA 61 FC | 	wrlong	result1, fp
113e4     04 4E 05 F1 | 	add	fp, #4
113e8     A7 FC 61 FC | 	wrlong	result2, fp
113ec     04 4E 05 F1 | 	add	fp, #4
113f0     A7 16 62 FC | 	wrlong	arg03, fp
113f4     08 4E 85 F1 | 	sub	fp, #8
113f8     A7 12 02 F6 | 	mov	arg01, fp
113fc     A0 A1 BF FD | 	call	#_converttoint
11400     FD 16 02 F6 | 	mov	arg03, result1
11404     10 4E 05 F1 | 	add	fp, #16
11408     A7 16 62 FC | 	wrlong	arg03, fp
1140c     10 4E 85 F1 | 	sub	fp, #16
11410     A8 9F BF FD | 	call	#_pop
11414     FF 16 02 F6 | 	mov	arg03, result3
11418     A7 FA 61 FC | 	wrlong	result1, fp
1141c     04 4E 05 F1 | 	add	fp, #4
11420     A7 FC 61 FC | 	wrlong	result2, fp
11424     04 4E 05 F1 | 	add	fp, #4
11428     A7 16 62 FC | 	wrlong	arg03, fp
1142c                 | ' t1=pop() : arg=converttoint(t1)
1142c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1142c     08 4E 85 F1 | 	sub	fp, #8
11430     2B 16 0E F2 | 	cmp	arg03, #43 wz
11434     18 00 90 5D |  if_ne	jmp	#LR__1491
11438     A7 12 02 FB | 	rdlong	arg01, fp
1143c     F4 A0 BF FD | 	call	#_convertstring
11440     A7 FA 61 FC | 	wrlong	result1, fp
11444     08 4E 05 F1 | 	add	fp, #8
11448     A7 3E 68 FC | 	wrlong	#31, fp
1144c     08 4E 85 F1 | 	sub	fp, #8
11450                 | LR__1491
11450                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
11450     08 4E 05 F1 | 	add	fp, #8
11454     A7 16 02 FB | 	rdlong	arg03, fp
11458     08 4E 85 F1 | 	sub	fp, #8
1145c     1F 16 0E F2 | 	cmp	arg03, #31 wz
11460     3C 00 90 AD |  if_e	jmp	#LR__1492
11464     00 12 06 F6 | 	mov	arg01, #0
11468     3C 4E B1 FD | 	call	#__system___getiolock_0542
1146c     FD 12 02 F6 | 	mov	arg01, result1
11470     D0 F3 B0 FD | 	call	#__system___lockmem
11474     84 01 00 FF 
11478     A7 14 06 F6 | 	mov	arg02, ##@LR__5445
1147c     00 12 06 F6 | 	mov	arg01, #0
11480     00 16 06 F6 | 	mov	arg03, #0
11484     B0 00 B1 FD | 	call	#__system___basic_print_string
11488     00 12 06 F6 | 	mov	arg01, #0
1148c     18 4E B1 FD | 	call	#__system___getiolock_0542
11490     FD 00 68 FC | 	wrlong	#0, result1
11494     0F 12 06 F6 | 	mov	arg01, #15
11498     18 BE B0 FD | 	call	#_printerror
1149c     20 00 90 FD | 	jmp	#LR__1493
114a0                 | LR__1492
114a0     A7 12 02 FB | 	rdlong	arg01, fp
114a4     10 4E 05 F1 | 	add	fp, #16
114a8     A7 14 02 FB | 	rdlong	arg02, fp
114ac     10 4E 85 F1 | 	sub	fp, #16
114b0     0C 14 B1 FD | 	call	#__system__Left_S
114b4     A7 FA 61 FC | 	wrlong	result1, fp
114b8     A7 12 02 F6 | 	mov	arg01, fp
114bc     94 9F BF FD | 	call	#_push
114c0                 | LR__1493
114c0     A7 F0 03 F6 | 	mov	ptra, fp
114c4     B2 00 A0 FD | 	call	#popregs_
114c8                 | _do_left_ret
114c8     2D 00 64 FD | 	ret
114cc                 | 
114cc                 | ' 
114cc                 | ' ' ----------------  len
114cc                 | ' 
114cc                 | ' sub do_len
114cc                 | _do_len
114cc     02 4A 05 F6 | 	mov	COUNT_, #2
114d0     A8 00 A0 FD | 	call	#pushregs_
114d4     14 F0 07 F1 | 	add	ptra, #20
114d8     4A 00 00 FF 
114dc     80 E4 05 F1 | 	add	objptr, ##38016
114e0     F2 1E 02 FB | 	rdlong	local01, objptr
114e4     0F 17 02 F6 | 	mov	arg03, local01
114e8     01 16 66 F0 | 	shl	arg03, #1
114ec     0F 17 02 F1 | 	add	arg03, local01
114f0     02 16 66 F0 | 	shl	arg03, #2
114f4     03 00 00 FF 
114f8     04 E4 85 F1 | 	sub	objptr, ##1540
114fc     F2 16 02 F1 | 	add	arg03, objptr
11500     0B 17 02 FB | 	rdlong	arg03, arg03
11504     0C 4E 05 F1 | 	add	fp, #12
11508     A7 16 62 FC | 	wrlong	arg03, fp
1150c                 | ' 
1150c                 | ' numpar=compiledline(lineptr_e).result.uresult
1150c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1150c     0C 4E 85 F1 | 	sub	fp, #12
11510     02 16 16 F2 | 	cmp	arg03, #2 wc
11514     47 00 00 FF 
11518     7C E4 85 F1 | 	sub	objptr, ##36476
1151c     0C 4E 05 C1 |  if_b	add	fp, #12
11520     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11524     0C 4E 85 C1 |  if_b	sub	fp, #12
11528     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1500
1152c     00 12 06 F6 | 	mov	arg01, #0
11530     74 4D B1 FD | 	call	#__system___getiolock_0542
11534     FD 12 02 F6 | 	mov	arg01, result1
11538     08 F3 B0 FD | 	call	#__system___lockmem
1153c     84 01 00 FF 
11540     AF 14 06 F6 | 	mov	arg02, ##@LR__5446
11544     00 12 06 F6 | 	mov	arg01, #0
11548     00 16 06 F6 | 	mov	arg03, #0
1154c     E8 FF B0 FD | 	call	#__system___basic_print_string
11550     00 12 06 F6 | 	mov	arg01, #0
11554     50 4D B1 FD | 	call	#__system___getiolock_0542
11558     FD 00 68 FC | 	wrlong	#0, result1
1155c     27 12 06 F6 | 	mov	arg01, #39
11560     50 BD B0 FD | 	call	#_printerror
11564     C4 00 90 FD | 	jmp	#LR__1505
11568                 | LR__1500
11568     50 9E BF FD | 	call	#_pop
1156c     FF 16 02 F6 | 	mov	arg03, result3
11570     A7 FA 61 FC | 	wrlong	result1, fp
11574     04 4E 05 F1 | 	add	fp, #4
11578     A7 FC 61 FC | 	wrlong	result2, fp
1157c     04 4E 05 F1 | 	add	fp, #4
11580     A7 16 62 FC | 	wrlong	arg03, fp
11584                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11584     08 4E 85 F1 | 	sub	fp, #8
11588     2B 16 0E F2 | 	cmp	arg03, #43 wz
1158c     18 00 90 5D |  if_ne	jmp	#LR__1501
11590     A7 12 02 FB | 	rdlong	arg01, fp
11594     9C 9F BF FD | 	call	#_convertstring
11598     A7 FA 61 FC | 	wrlong	result1, fp
1159c     08 4E 05 F1 | 	add	fp, #8
115a0     A7 3E 68 FC | 	wrlong	#31, fp
115a4     08 4E 85 F1 | 	sub	fp, #8
115a8                 | LR__1501
115a8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
115a8     08 4E 05 F1 | 	add	fp, #8
115ac     A7 16 02 FB | 	rdlong	arg03, fp
115b0     08 4E 85 F1 | 	sub	fp, #8
115b4     1F 16 0E F2 | 	cmp	arg03, #31 wz
115b8     3C 00 90 AD |  if_e	jmp	#LR__1502
115bc     00 12 06 F6 | 	mov	arg01, #0
115c0     E4 4C B1 FD | 	call	#__system___getiolock_0542
115c4     FD 12 02 F6 | 	mov	arg01, result1
115c8     78 F2 B0 FD | 	call	#__system___lockmem
115cc     84 01 00 FF 
115d0     B5 14 06 F6 | 	mov	arg02, ##@LR__5447
115d4     00 12 06 F6 | 	mov	arg01, #0
115d8     00 16 06 F6 | 	mov	arg03, #0
115dc     58 FF B0 FD | 	call	#__system___basic_print_string
115e0     00 12 06 F6 | 	mov	arg01, #0
115e4     C0 4C B1 FD | 	call	#__system___getiolock_0542
115e8     FD 00 68 FC | 	wrlong	#0, result1
115ec     0F 12 06 F6 | 	mov	arg01, #15
115f0     C0 BC B0 FD | 	call	#_printerror
115f4     34 00 90 FD | 	jmp	#LR__1505
115f8                 | LR__1502
115f8     A7 12 02 FB | 	rdlong	arg01, fp
115fc     09 21 02 F6 | 	mov	local02, arg01
11600     97 06 48 FB | 	callpa	#(@LR__1504-@LR__1503)>>2,fcache_load_ptr_
11604                 | LR__1503
11604     10 FB C9 FA | 	rdbyte	result1, local02 wz
11608     01 20 06 51 |  if_ne	add	local02, #1
1160c     F4 FF 9F 5D |  if_ne	jmp	#LR__1503
11610                 | LR__1504
11610     09 21 82 F1 | 	sub	local02, arg01
11614     A7 20 62 FC | 	wrlong	local02, fp
11618     08 4E 05 F1 | 	add	fp, #8
1161c     A7 38 68 FC | 	wrlong	#28, fp
11620     08 4E 85 F1 | 	sub	fp, #8
11624     A7 12 02 F6 | 	mov	arg01, fp
11628     28 9E BF FD | 	call	#_push
1162c                 | LR__1505
1162c     A7 F0 03 F6 | 	mov	ptra, fp
11630     B2 00 A0 FD | 	call	#popregs_
11634                 | _do_len_ret
11634     2D 00 64 FD | 	ret
11638                 | 
11638                 | ' 
11638                 | ' ' ----------------  list
11638                 | ' 
11638                 | ' sub do_list
11638                 | _do_list
11638     02 4A 05 F6 | 	mov	COUNT_, #2
1163c     A8 00 A0 FD | 	call	#pushregs_
11640     B8 F0 07 F1 | 	add	ptra, #184
11644     04 4E 05 F1 | 	add	fp, #4
11648     A7 00 68 FC | 	wrlong	#0, fp
1164c     04 4E 05 F1 | 	add	fp, #4
11650     FF FF BF FF 
11654     A7 FE 6B FC | 	wrlong	##2147483647, fp
11658     08 4E 85 F1 | 	sub	fp, #8
1165c     4A 00 00 FF 
11660     80 E4 05 F1 | 	add	objptr, ##38016
11664     F2 1E 02 FB | 	rdlong	local01, objptr
11668     0F 17 02 F6 | 	mov	arg03, local01
1166c     01 16 66 F0 | 	shl	arg03, #1
11670     0F 17 02 F1 | 	add	arg03, local01
11674     02 16 66 F0 | 	shl	arg03, #2
11678     03 00 00 FF 
1167c     04 E4 85 F1 | 	sub	objptr, ##1540
11680     F2 16 02 F1 | 	add	arg03, objptr
11684     0B 17 02 FB | 	rdlong	arg03, arg03
11688     A7 16 62 FC | 	wrlong	arg03, fp
1168c                 | ' 
1168c                 | ' startline=0 : endline=$7FFFFFFF
1168c                 | ' numpar=compiledline(lineptr_e).result.uresult
1168c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
1168c     01 16 0E F2 | 	cmp	arg03, #1 wz
11690     47 00 00 FF 
11694     7C E4 85 F1 | 	sub	objptr, ##36476
11698     3C 00 90 5D |  if_ne	jmp	#LR__1510
1169c     1C 9D BF FD | 	call	#_pop
116a0     FF 1E 02 F6 | 	mov	local01, result3
116a4     0C 4E 05 F1 | 	add	fp, #12
116a8     A7 FA 61 FC | 	wrlong	result1, fp
116ac     04 4E 05 F1 | 	add	fp, #4
116b0     A7 FC 61 FC | 	wrlong	result2, fp
116b4     04 4E 05 F1 | 	add	fp, #4
116b8     A7 1E 62 FC | 	wrlong	local01, fp
116bc     08 4E 85 F1 | 	sub	fp, #8
116c0     A7 12 02 F6 | 	mov	arg01, fp
116c4     0C 4E 85 F1 | 	sub	fp, #12
116c8     D4 9E BF FD | 	call	#_converttoint
116cc     04 4E 05 F1 | 	add	fp, #4
116d0     A7 FA 61 FC | 	wrlong	result1, fp
116d4     04 4E 85 F1 | 	sub	fp, #4
116d8                 | LR__1510
116d8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
116d8     A7 16 02 FB | 	rdlong	arg03, fp
116dc     02 16 0E F2 | 	cmp	arg03, #2 wz
116e0     7C 00 90 5D |  if_ne	jmp	#LR__1511
116e4     D4 9C BF FD | 	call	#_pop
116e8     FF 1E 02 F6 | 	mov	local01, result3
116ec     0C 4E 05 F1 | 	add	fp, #12
116f0     A7 FA 61 FC | 	wrlong	result1, fp
116f4     04 4E 05 F1 | 	add	fp, #4
116f8     A7 FC 61 FC | 	wrlong	result2, fp
116fc     04 4E 05 F1 | 	add	fp, #4
11700     A7 1E 62 FC | 	wrlong	local01, fp
11704     08 4E 85 F1 | 	sub	fp, #8
11708     A7 12 02 F6 | 	mov	arg01, fp
1170c     0C 4E 85 F1 | 	sub	fp, #12
11710     8C 9E BF FD | 	call	#_converttoint
11714     FD 1E 02 F6 | 	mov	local01, result1
11718     08 4E 05 F1 | 	add	fp, #8
1171c     A7 1E 62 FC | 	wrlong	local01, fp
11720     08 4E 85 F1 | 	sub	fp, #8
11724     94 9C BF FD | 	call	#_pop
11728     FF 1E 02 F6 | 	mov	local01, result3
1172c     0C 4E 05 F1 | 	add	fp, #12
11730     A7 FA 61 FC | 	wrlong	result1, fp
11734     04 4E 05 F1 | 	add	fp, #4
11738     A7 FC 61 FC | 	wrlong	result2, fp
1173c     04 4E 05 F1 | 	add	fp, #4
11740     A7 1E 62 FC | 	wrlong	local01, fp
11744     08 4E 85 F1 | 	sub	fp, #8
11748     A7 12 02 F6 | 	mov	arg01, fp
1174c     0C 4E 85 F1 | 	sub	fp, #12
11750     4C 9E BF FD | 	call	#_converttoint
11754     04 4E 05 F1 | 	add	fp, #4
11758     A7 FA 61 FC | 	wrlong	result1, fp
1175c     04 4E 85 F1 | 	sub	fp, #4
11760                 | LR__1511
11760                 | ' 
11760                 | ' 
11760                 | ' print
11760     00 12 06 F6 | 	mov	arg01, #0
11764     40 4B B1 FD | 	call	#__system___getiolock_0542
11768     FD 12 02 F6 | 	mov	arg01, result1
1176c     D4 F0 B0 FD | 	call	#__system___lockmem
11770     00 12 06 F6 | 	mov	arg01, #0
11774     0A 14 06 F6 | 	mov	arg02, #10
11778     00 16 06 F6 | 	mov	arg03, #0
1177c     60 FD B0 FD | 	call	#__system___basic_print_char
11780     00 12 06 F6 | 	mov	arg01, #0
11784     20 4B B1 FD | 	call	#__system___getiolock_0542
11788     FD 00 68 FC | 	wrlong	#0, result1
1178c     4A 00 00 FF 
11790     88 E4 05 F1 | 	add	objptr, ##38024
11794     F2 20 02 FB | 	rdlong	local02, objptr
11798     07 00 00 FF 
1179c     9C E5 05 F1 | 	add	objptr, ##3996
117a0     F2 20 62 FC | 	wrlong	local02, objptr
117a4     52 00 00 FF 
117a8     24 E4 85 F1 | 	sub	objptr, ##42020
117ac                 | ' do 
117ac                 | LR__1512
117ac     20 4E 05 F1 | 	add	fp, #32
117b0     A7 12 02 F6 | 	mov	arg01, fp
117b4     20 4E 85 F1 | 	sub	fp, #32
117b8     52 00 00 FF 
117bc     24 E4 05 F1 | 	add	objptr, ##42020
117c0     F2 14 02 FB | 	rdlong	arg02, objptr
117c4     18 16 06 F6 | 	mov	arg03, #24
117c8     46 00 00 FF 
117cc     58 E5 85 F1 | 	sub	objptr, ##36184
117d0     30 E4 B0 FD | 	call	#_psram_spin2_read1
117d4     0B 00 00 FF 
117d8     CC E4 85 F1 | 	sub	objptr, ##5836
117dc                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
117dc                 | '   
117dc                 | '   if header(0)<> $FFFFFFFF then
117dc     20 4E 05 F1 | 	add	fp, #32
117e0     A7 20 02 FB | 	rdlong	local02, fp
117e4     20 4E 85 F1 | 	sub	fp, #32
117e8     FF FF 7F FF 
117ec     FF 21 0E F2 | 	cmp	local02, ##-1 wz
117f0     A8 00 90 AD |  if_e	jmp	#LR__1514
117f4     38 4E 05 F1 | 	add	fp, #56
117f8     3F 16 06 F6 | 	mov	arg03, #63
117fc     28 16 62 FD | 	setq	arg03
11800     A7 00 68 FC | 	wrlong	#0, fp
11804     A7 12 02 F6 | 	mov	arg01, fp
11808     10 4E 85 F1 | 	sub	fp, #16
1180c     A7 14 02 FB | 	rdlong	arg02, fp
11810     04 4E 05 F1 | 	add	fp, #4
11814     A7 16 02 FB | 	rdlong	arg03, fp
11818     2C 4E 85 F1 | 	sub	fp, #44
1181c     0B 00 00 FF 
11820     CC E4 05 F1 | 	add	objptr, ##5836
11824     DC E3 B0 FD | 	call	#_psram_spin2_read1
11828     0B 00 00 FF 
1182c     CC E4 85 F1 | 	sub	objptr, ##5836
11830                 | '     longfill(linebuf,0,64)
11830                 | '     psram.read1(varptr(linebuf),header(2),header(3))
11830                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
11830     20 4E 05 F1 | 	add	fp, #32
11834     A7 20 02 FB | 	rdlong	local02, fp
11838     1C 4E 85 F1 | 	sub	fp, #28
1183c     A7 1E 02 FB | 	rdlong	local01, fp
11840     04 4E 85 F1 | 	sub	fp, #4
11844     0F 21 52 F2 | 	cmps	local02, local01 wc
11848     30 00 90 CD |  if_b	jmp	#LR__1513
1184c     20 4E 05 F1 | 	add	fp, #32
11850     A7 20 02 FB | 	rdlong	local02, fp
11854     18 4E 85 F1 | 	sub	fp, #24
11858     A7 16 02 FB | 	rdlong	arg03, fp
1185c     08 4E 85 F1 | 	sub	fp, #8
11860     0B 21 5A F2 | 	cmps	local02, arg03 wcz
11864     14 00 90 1D |  if_a	jmp	#LR__1513
11868     38 4E 05 F1 | 	add	fp, #56
1186c     A7 12 02 F6 | 	mov	arg01, fp
11870     38 4E 85 F1 | 	sub	fp, #56
11874                 | ' 
11874                 | ' write(text)
11874     B0 DA B0 FD | 	call	#_hg010b_spin2_write
11878                 | ' crlf
11878     AC DF B0 FD | 	call	#_hg010b_spin2_crlf
1187c                 | LR__1513
1187c     34 4E 05 F1 | 	add	fp, #52
11880     A7 20 02 FB | 	rdlong	local02, fp
11884     34 4E 85 F1 | 	sub	fp, #52
11888     52 00 00 FF 
1188c     24 E4 05 F1 | 	add	objptr, ##42020
11890     F2 20 62 FC | 	wrlong	local02, objptr
11894     52 00 00 FF 
11898     24 E4 85 F1 | 	sub	objptr, ##42020
1189c                 | LR__1514
1189c     34 4E 05 F1 | 	add	fp, #52
118a0     A7 20 02 FB | 	rdlong	local02, fp
118a4     34 4E 85 F1 | 	sub	fp, #52
118a8     FF FF 3F FF 
118ac     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
118b0     20 4E 05 51 |  if_ne	add	fp, #32
118b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
118b8     20 4E 85 51 |  if_ne	sub	fp, #32
118bc     FF FF 7F 5F 
118c0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
118c4     E4 FE 9F 5D |  if_ne	jmp	#LR__1512
118c8     A7 F0 03 F6 | 	mov	ptra, fp
118cc     B2 00 A0 FD | 	call	#popregs_
118d0                 | _do_list_ret
118d0     2D 00 64 FD | 	ret
118d4                 | 
118d4                 | ' 
118d4                 | ' '-------------------- load
118d4                 | ' 
118d4                 | ' sub do_load(amode=0 as integer)  
118d4                 | _do_load
118d4     01 4A 05 F6 | 	mov	COUNT_, #1
118d8     A8 00 A0 FD | 	call	#pushregs_
118dc     AC F0 07 F1 | 	add	ptra, #172
118e0     A7 12 62 FC | 	wrlong	arg01, fp
118e4     4A 00 00 FF 
118e8     80 E4 05 F1 | 	add	objptr, ##38016
118ec     F2 14 02 FB | 	rdlong	arg02, objptr
118f0     0A 13 02 F6 | 	mov	arg01, arg02
118f4     01 12 66 F0 | 	shl	arg01, #1
118f8     0A 13 02 F1 | 	add	arg01, arg02
118fc     02 12 66 F0 | 	shl	arg01, #2
11900     03 00 00 FF 
11904     04 E4 85 F1 | 	sub	objptr, ##1540
11908     F2 12 02 F1 | 	add	arg01, objptr
1190c     09 15 02 FB | 	rdlong	arg02, arg01
11910     1C 4E 05 F1 | 	add	fp, #28
11914     A7 14 62 FC | 	wrlong	arg02, fp
11918     8C 4E 05 F1 | 	add	fp, #140
1191c     A7 12 02 F6 | 	mov	arg01, fp
11920     47 00 00 FF 
11924     7C E4 85 F1 | 	sub	objptr, ##36476
11928     80 4E 85 F1 | 	sub	fp, #128
1192c     09 4F 61 FC | 	wrlong	fp, arg01
11930                 | ' numpar=compiledline(lineptr_e).result.uresult
11930                 | ' lpoke varptr(line2$),varptr(line2)
11930                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
11930     0C 4E 85 F1 | 	sub	fp, #12
11934     A7 1E 02 FB | 	rdlong	local01, fp
11938     1C 4E 85 F1 | 	sub	fp, #28
1193c     01 1E 56 F2 | 	cmps	local01, #1 wc
11940     24 00 90 CD |  if_b	jmp	#LR__1520
11944     74 9A BF FD | 	call	#_pop
11948     04 4E 05 F1 | 	add	fp, #4
1194c     A7 FA 61 FC | 	wrlong	result1, fp
11950     04 4E 05 F1 | 	add	fp, #4
11954     A7 FC 61 FC | 	wrlong	result2, fp
11958     04 4E 05 F1 | 	add	fp, #4
1195c     A7 FE 61 FC | 	wrlong	result3, fp
11960     0C 4E 85 F1 | 	sub	fp, #12
11964     28 00 90 FD | 	jmp	#LR__1521
11968                 | LR__1520
11968     51 00 00 FF 
1196c     D8 E5 05 F1 | 	add	objptr, ##41944
11970     F2 1E 02 FB | 	rdlong	local01, objptr
11974     51 00 00 FF 
11978     D8 E5 85 F1 | 	sub	objptr, ##41944
1197c     04 4E 05 F1 | 	add	fp, #4
11980     A7 1E 62 FC | 	wrlong	local01, fp
11984     08 4E 05 F1 | 	add	fp, #8
11988     A7 3E 68 FC | 	wrlong	#31, fp
1198c     0C 4E 85 F1 | 	sub	fp, #12
11990                 | LR__1521
11990                 | ' 'print "popped "; t1.result.uresult, t1.result_type
11990                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
11990     0C 4E 05 F1 | 	add	fp, #12
11994     A7 1E 02 FB | 	rdlong	local01, fp
11998     0C 4E 85 F1 | 	sub	fp, #12
1199c     2B 1E 0E F2 | 	cmp	local01, #43 wz
119a0     24 00 90 5D |  if_ne	jmp	#LR__1522
119a4     04 4E 05 F1 | 	add	fp, #4
119a8     A7 12 02 FB | 	rdlong	arg01, fp
119ac     04 4E 85 F1 | 	sub	fp, #4
119b0     80 9B BF FD | 	call	#_convertstring
119b4     04 4E 05 F1 | 	add	fp, #4
119b8     A7 FA 61 FC | 	wrlong	result1, fp
119bc     08 4E 05 F1 | 	add	fp, #8
119c0     A7 3E 68 FC | 	wrlong	#31, fp
119c4     0C 4E 85 F1 | 	sub	fp, #12
119c8                 | LR__1522
119c8                 | ' if t1.result_type=result_string then
119c8     0C 4E 05 F1 | 	add	fp, #12
119cc     A7 1E 02 FB | 	rdlong	local01, fp
119d0     0C 4E 85 F1 | 	sub	fp, #12
119d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
119d8     E0 02 90 5D |  if_ne	jmp	#LR__1528
119dc                 | '   if amode<>1234 then do_new
119dc     A7 1E 02 FB | 	rdlong	local01, fp
119e0     02 00 00 FF 
119e4     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
119e8     24 0D B0 5D |  if_ne	call	#_do_new
119ec                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
119ec     04 4E 05 F1 | 	add	fp, #4
119f0     A7 12 02 FB | 	rdlong	arg01, fp
119f4     04 4E 85 F1 | 	sub	fp, #4
119f8     84 01 00 FF 
119fc     BB 14 06 F6 | 	mov	arg02, ##@LR__5448
11a00     68 EE B0 FD | 	call	#__system___string_cmp
11a04     00 FA 0D F2 | 	cmp	result1, #0 wz
11a08     24 00 90 5D |  if_ne	jmp	#LR__1523
11a0c     51 00 00 FF 
11a10     D8 E5 05 F1 | 	add	objptr, ##41944
11a14     F2 1E 02 FB | 	rdlong	local01, objptr
11a18     51 00 00 FF 
11a1c     D8 E5 85 F1 | 	sub	objptr, ##41944
11a20     04 4E 05 F1 | 	add	fp, #4
11a24     A7 1E 62 FC | 	wrlong	local01, fp
11a28     04 4E 85 F1 | 	sub	fp, #4
11a2c     20 00 90 FD | 	jmp	#LR__1524
11a30                 | LR__1523
11a30     04 4E 05 F1 | 	add	fp, #4
11a34     A7 1E 02 FB | 	rdlong	local01, fp
11a38     04 4E 85 F1 | 	sub	fp, #4
11a3c     51 00 00 FF 
11a40     D8 E5 05 F1 | 	add	objptr, ##41944
11a44     F2 1E 62 FC | 	wrlong	local01, objptr
11a48     51 00 00 FF 
11a4c     D8 E5 85 F1 | 	sub	objptr, ##41944
11a50                 | LR__1524
11a50                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
11a50     09 12 06 F6 | 	mov	arg01, #9
11a54     80 3E B1 FD | 	call	#__system__close
11a58     09 1E 06 F6 | 	mov	local01, #9
11a5c     4A 00 00 FF 
11a60     94 E4 05 F1 | 	add	objptr, ##38036
11a64     F2 12 02 FB | 	rdlong	arg01, objptr
11a68     4A 00 00 FF 
11a6c     94 E4 85 F1 | 	sub	objptr, ##38036
11a70     84 01 00 FF 
11a74     BC 14 06 F6 | 	mov	arg02, ##@LR__5449
11a78     24 EE B0 FD | 	call	#__system___string_concat
11a7c     FD 12 02 F6 | 	mov	arg01, result1
11a80     04 4E 05 F1 | 	add	fp, #4
11a84     A7 14 02 FB | 	rdlong	arg02, fp
11a88     04 4E 85 F1 | 	sub	fp, #4
11a8c     10 EE B0 FD | 	call	#__system___string_concat
11a90     FD 14 02 F6 | 	mov	arg02, result1
11a94     0F 13 02 F6 | 	mov	arg01, local01
11a98     00 16 06 F6 | 	mov	arg03, #0
11a9c     A8 F9 B0 FD | 	call	#__system___basic_open_string
11aa0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11aa4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11aa8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11aac     14 4E 05 F1 | 	add	fp, #20
11ab0     A7 FA 61 FC | 	wrlong	result1, fp
11ab4                 | '   r=geterr() 
11ab4                 | '   if r then 
11ab4     14 4E 85 F1 | 	sub	fp, #20
11ab8     50 01 90 AD |  if_e	jmp	#LR__1526
11abc                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
11abc     09 12 06 F6 | 	mov	arg01, #9
11ac0     14 3E B1 FD | 	call	#__system__close
11ac4     09 1E 06 F6 | 	mov	local01, #9
11ac8     4A 00 00 FF 
11acc     94 E4 05 F1 | 	add	objptr, ##38036
11ad0     F2 12 02 FB | 	rdlong	arg01, objptr
11ad4     4A 00 00 FF 
11ad8     94 E4 85 F1 | 	sub	objptr, ##38036
11adc     84 01 00 FF 
11ae0     BE 14 06 F6 | 	mov	arg02, ##@LR__5450
11ae4     B8 ED B0 FD | 	call	#__system___string_concat
11ae8     FD 12 02 F6 | 	mov	arg01, result1
11aec     04 4E 05 F1 | 	add	fp, #4
11af0     A7 14 02 FB | 	rdlong	arg02, fp
11af4     04 4E 85 F1 | 	sub	fp, #4
11af8     A4 ED B0 FD | 	call	#__system___string_concat
11afc     FD 12 02 F6 | 	mov	arg01, result1
11b00     84 01 00 FF 
11b04     C0 14 06 F6 | 	mov	arg02, ##@LR__5451
11b08     94 ED B0 FD | 	call	#__system___string_concat
11b0c     FD 14 02 F6 | 	mov	arg02, result1
11b10     0F 13 02 F6 | 	mov	arg01, local01
11b14     00 16 06 F6 | 	mov	arg03, #0
11b18     2C F9 B0 FD | 	call	#__system___basic_open_string
11b1c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11b20     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
11b24     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11b28     14 4E 05 F1 | 	add	fp, #20
11b2c     A7 FA 61 FC | 	wrlong	result1, fp
11b30                 | '     r=geterr() 
11b30                 | '     if r then 
11b30     14 4E 85 F1 | 	sub	fp, #20
11b34     A0 00 90 AD |  if_e	jmp	#LR__1525
11b38                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
11b38     00 12 06 F6 | 	mov	arg01, #0
11b3c     68 47 B1 FD | 	call	#__system___getiolock_0542
11b40     FD 12 02 F6 | 	mov	arg01, result1
11b44     FC EC B0 FD | 	call	#__system___lockmem
11b48     84 01 00 FF 
11b4c     C5 14 06 F6 | 	mov	arg02, ##@LR__5452
11b50     00 12 06 F6 | 	mov	arg01, #0
11b54     00 16 06 F6 | 	mov	arg03, #0
11b58     DC F9 B0 FD | 	call	#__system___basic_print_string
11b5c     14 4E 05 F1 | 	add	fp, #20
11b60     A7 14 02 FB | 	rdlong	arg02, fp
11b64     14 4E 85 F1 | 	sub	fp, #20
11b68     00 12 06 F6 | 	mov	arg01, #0
11b6c     00 16 06 F6 | 	mov	arg03, #0
11b70     0A 18 06 F6 | 	mov	arg04, #10
11b74     04 FA B0 FD | 	call	#__system___basic_print_integer
11b78     84 01 00 FF 
11b7c     D3 14 06 F6 | 	mov	arg02, ##@LR__5453
11b80     00 12 06 F6 | 	mov	arg01, #0
11b84     00 16 06 F6 | 	mov	arg03, #0
11b88     AC F9 B0 FD | 	call	#__system___basic_print_string
11b8c     00 1E 06 F6 | 	mov	local01, #0
11b90     14 4E 05 F1 | 	add	fp, #20
11b94     A7 12 02 FB | 	rdlong	arg01, fp
11b98     14 4E 85 F1 | 	sub	fp, #20
11b9c     6C 13 B1 FD | 	call	#__system___strerror
11ba0     FD 14 02 F6 | 	mov	arg02, result1
11ba4     0F 13 02 F6 | 	mov	arg01, local01
11ba8     00 16 06 F6 | 	mov	arg03, #0
11bac     88 F9 B0 FD | 	call	#__system___basic_print_string
11bb0     00 12 06 F6 | 	mov	arg01, #0
11bb4     0A 14 06 F6 | 	mov	arg02, #10
11bb8     00 16 06 F6 | 	mov	arg03, #0
11bbc     20 F9 B0 FD | 	call	#__system___basic_print_char
11bc0     00 12 06 F6 | 	mov	arg01, #0
11bc4     E0 46 B1 FD | 	call	#__system___getiolock_0542
11bc8     FD 00 68 FC | 	wrlong	#0, result1
11bcc     09 12 06 F6 | 	mov	arg01, #9
11bd0     04 3D B1 FD | 	call	#__system__close
11bd4     7C 01 90 FD | 	jmp	#LR__1530
11bd8                 | LR__1525
11bd8     51 00 00 FF 
11bdc     D8 E5 05 F1 | 	add	objptr, ##41944
11be0     F2 12 02 FB | 	rdlong	arg01, objptr
11be4     51 00 00 FF 
11be8     D8 E5 85 F1 | 	sub	objptr, ##41944
11bec     84 01 00 FF 
11bf0     D6 14 06 F6 | 	mov	arg02, ##@LR__5454
11bf4     A8 EC B0 FD | 	call	#__system___string_concat
11bf8     51 00 00 FF 
11bfc     D8 E5 05 F1 | 	add	objptr, ##41944
11c00     F2 FA 61 FC | 	wrlong	result1, objptr
11c04     51 00 00 FF 
11c08     D8 E5 85 F1 | 	sub	objptr, ##41944
11c0c                 | LR__1526
11c0c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
11c0c     09 12 06 F6 | 	mov	arg01, #9
11c10     C4 3C B1 FD | 	call	#__system__close
11c14     09 1E 06 F6 | 	mov	local01, #9
11c18     4A 00 00 FF 
11c1c     94 E4 05 F1 | 	add	objptr, ##38036
11c20     F2 12 02 FB | 	rdlong	arg01, objptr
11c24     4A 00 00 FF 
11c28     94 E4 85 F1 | 	sub	objptr, ##38036
11c2c     84 01 00 FF 
11c30     DB 14 06 F6 | 	mov	arg02, ##@LR__5455
11c34     68 EC B0 FD | 	call	#__system___string_concat
11c38     FD 12 02 F6 | 	mov	arg01, result1
11c3c     51 00 00 FF 
11c40     D8 E5 05 F1 | 	add	objptr, ##41944
11c44     F2 14 02 FB | 	rdlong	arg02, objptr
11c48     51 00 00 FF 
11c4c     D8 E5 85 F1 | 	sub	objptr, ##41944
11c50     4C EC B0 FD | 	call	#__system___string_concat
11c54     FD 14 02 F6 | 	mov	arg02, result1
11c58     0F 13 02 F6 | 	mov	arg01, local01
11c5c     00 16 06 F6 | 	mov	arg03, #0
11c60     E4 F7 B0 FD | 	call	#__system___basic_open_string
11c64                 | '   do
11c64                 | LR__1527
11c64     09 12 06 F6 | 	mov	arg01, #9
11c68     E4 ED B0 FD | 	call	#__system___basic_read_line
11c6c     FD 1E 02 F6 | 	mov	local01, result1
11c70     37 00 00 FF 
11c74     1C E4 05 F1 | 	add	objptr, ##28188
11c78     F2 1E 62 FC | 	wrlong	local01, objptr
11c7c     37 00 00 FF 
11c80     1C E4 85 F1 | 	sub	objptr, ##28188
11c84     C0 FA BE FD | 	call	#_interpret
11c88     37 00 00 FF 
11c8c     1C E4 05 F1 | 	add	objptr, ##28188
11c90     F2 12 02 FB | 	rdlong	arg01, objptr
11c94     37 00 00 FF 
11c98     1C E4 85 F1 | 	sub	objptr, ##28188
11c9c     84 01 00 FF 
11ca0     DD 14 06 F6 | 	mov	arg02, ##@LR__5456
11ca4     C4 EB B0 FD | 	call	#__system___string_cmp
11ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
11cac     B4 FF 9F 5D |  if_ne	jmp	#LR__1527
11cb0                 | '   close #9   
11cb0     09 12 06 F6 | 	mov	arg01, #9
11cb4     20 3C B1 FD | 	call	#__system__close
11cb8     08 00 90 FD | 	jmp	#LR__1529
11cbc                 | LR__1528
11cbc     1E 12 06 F6 | 	mov	arg01, #30
11cc0     F0 B5 B0 FD | 	call	#_printerror
11cc4                 | LR__1529
11cc4                 | ' print "Loaded ";currentdir$+"/"+loadname
11cc4     00 12 06 F6 | 	mov	arg01, #0
11cc8     DC 45 B1 FD | 	call	#__system___getiolock_0542
11ccc     FD 12 02 F6 | 	mov	arg01, result1
11cd0     70 EB B0 FD | 	call	#__system___lockmem
11cd4     84 01 00 FF 
11cd8     DE 14 06 F6 | 	mov	arg02, ##@LR__5457
11cdc     00 12 06 F6 | 	mov	arg01, #0
11ce0     00 16 06 F6 | 	mov	arg03, #0
11ce4     50 F8 B0 FD | 	call	#__system___basic_print_string
11ce8     00 1E 06 F6 | 	mov	local01, #0
11cec     4A 00 00 FF 
11cf0     94 E4 05 F1 | 	add	objptr, ##38036
11cf4     F2 12 02 FB | 	rdlong	arg01, objptr
11cf8     4A 00 00 FF 
11cfc     94 E4 85 F1 | 	sub	objptr, ##38036
11d00     84 01 00 FF 
11d04     E6 14 06 F6 | 	mov	arg02, ##@LR__5458
11d08     94 EB B0 FD | 	call	#__system___string_concat
11d0c     FD 12 02 F6 | 	mov	arg01, result1
11d10     51 00 00 FF 
11d14     D8 E5 05 F1 | 	add	objptr, ##41944
11d18     F2 14 02 FB | 	rdlong	arg02, objptr
11d1c     51 00 00 FF 
11d20     D8 E5 85 F1 | 	sub	objptr, ##41944
11d24     78 EB B0 FD | 	call	#__system___string_concat
11d28     FD 14 02 F6 | 	mov	arg02, result1
11d2c     0F 13 02 F6 | 	mov	arg01, local01
11d30     00 16 06 F6 | 	mov	arg03, #0
11d34     00 F8 B0 FD | 	call	#__system___basic_print_string
11d38     00 12 06 F6 | 	mov	arg01, #0
11d3c     0A 14 06 F6 | 	mov	arg02, #10
11d40     00 16 06 F6 | 	mov	arg03, #0
11d44     98 F7 B0 FD | 	call	#__system___basic_print_char
11d48     00 12 06 F6 | 	mov	arg01, #0
11d4c     58 45 B1 FD | 	call	#__system___getiolock_0542
11d50     FD 00 68 FC | 	wrlong	#0, result1
11d54                 | LR__1530
11d54     A7 F0 03 F6 | 	mov	ptra, fp
11d58     B2 00 A0 FD | 	call	#popregs_
11d5c                 | _do_load_ret
11d5c     2D 00 64 FD | 	ret
11d60                 | 
11d60                 | ' 
11d60                 | ' '-------------------- log
11d60                 | ' 
11d60                 | ' sub do_log
11d60                 | _do_log
11d60     01 4A 05 F6 | 	mov	COUNT_, #1
11d64     A8 00 A0 FD | 	call	#pushregs_
11d68     14 F0 07 F1 | 	add	ptra, #20
11d6c     4A 00 00 FF 
11d70     80 E4 05 F1 | 	add	objptr, ##38016
11d74     F2 1E 02 FB | 	rdlong	local01, objptr
11d78     0F 17 02 F6 | 	mov	arg03, local01
11d7c     01 16 66 F0 | 	shl	arg03, #1
11d80     0F 17 02 F1 | 	add	arg03, local01
11d84     02 16 66 F0 | 	shl	arg03, #2
11d88     03 00 00 FF 
11d8c     04 E4 85 F1 | 	sub	objptr, ##1540
11d90     F2 16 02 F1 | 	add	arg03, objptr
11d94     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11d98     0C 4E 05 F1 | 	add	fp, #12
11d9c     A7 16 62 FC | 	wrlong	arg03, fp
11da0                 | ' 
11da0                 | ' numpar=compiledline(lineptr_e).result.uresult
11da0                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
11da0     0C 4E 85 F1 | 	sub	fp, #12
11da4     47 00 00 FF 
11da8     7C E4 85 F1 | 	sub	objptr, ##36476
11dac     0C 4E 05 51 |  if_ne	add	fp, #12
11db0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11db4     0C 4E 85 51 |  if_ne	sub	fp, #12
11db8     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
11dbc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
11dc0     00 12 06 F6 | 	mov	arg01, #0
11dc4     E0 44 B1 FD | 	call	#__system___getiolock_0542
11dc8     FD 12 02 F6 | 	mov	arg01, result1
11dcc     74 EA B0 FD | 	call	#__system___lockmem
11dd0     84 01 00 FF 
11dd4     E8 14 06 F6 | 	mov	arg02, ##@LR__5459
11dd8     00 12 06 F6 | 	mov	arg01, #0
11ddc     00 16 06 F6 | 	mov	arg03, #0
11de0     54 F7 B0 FD | 	call	#__system___basic_print_string
11de4     00 12 06 F6 | 	mov	arg01, #0
11de8     BC 44 B1 FD | 	call	#__system___getiolock_0542
11dec     FD 00 68 FC | 	wrlong	#0, result1
11df0     27 12 06 F6 | 	mov	arg01, #39
11df4     BC B4 B0 FD | 	call	#_printerror
11df8     D0 00 90 FD | 	jmp	#LR__1543
11dfc                 | LR__1540
11dfc                 | ' if numpar=2 then 
11dfc     0C 4E 05 F1 | 	add	fp, #12
11e00     A7 1E 02 FB | 	rdlong	local01, fp
11e04     0C 4E 85 F1 | 	sub	fp, #12
11e08     02 1E 0E F2 | 	cmp	local01, #2 wz
11e0c     48 00 90 5D |  if_ne	jmp	#LR__1541
11e10     A8 95 BF FD | 	call	#_pop
11e14     FF 1E 02 F6 | 	mov	local01, result3
11e18     A7 FA 61 FC | 	wrlong	result1, fp
11e1c     04 4E 05 F1 | 	add	fp, #4
11e20     A7 FC 61 FC | 	wrlong	result2, fp
11e24     04 4E 05 F1 | 	add	fp, #4
11e28     A7 1E 62 FC | 	wrlong	local01, fp
11e2c     08 4E 85 F1 | 	sub	fp, #8
11e30     A7 12 02 F6 | 	mov	arg01, fp
11e34     24 98 BF FD | 	call	#_converttofloat
11e38     FD 14 02 F6 | 	mov	arg02, result1
11e3c     FC 16 20 FF 
11e40     54 12 06 F6 | 	mov	arg01, ##1076754516
11e44     80 25 B1 FD | 	call	#__system____builtin_logbase
11e48     10 4E 05 F1 | 	add	fp, #16
11e4c     A7 FA 61 FC | 	wrlong	result1, fp
11e50     10 4E 85 F1 | 	sub	fp, #16
11e54     10 00 90 FD | 	jmp	#LR__1542
11e58                 | LR__1541
11e58     10 4E 05 F1 | 	add	fp, #16
11e5c     00 C0 9F FF 
11e60     A7 00 68 FC | 	wrlong	##1065353216, fp
11e64     10 4E 85 F1 | 	sub	fp, #16
11e68                 | LR__1542
11e68     50 95 BF FD | 	call	#_pop
11e6c     FF 1E 02 F6 | 	mov	local01, result3
11e70     A7 FA 61 FC | 	wrlong	result1, fp
11e74     04 4E 05 F1 | 	add	fp, #4
11e78     A7 FC 61 FC | 	wrlong	result2, fp
11e7c     04 4E 05 F1 | 	add	fp, #4
11e80     A7 1E 62 FC | 	wrlong	local01, fp
11e84     08 4E 85 F1 | 	sub	fp, #8
11e88     A7 12 02 F6 | 	mov	arg01, fp
11e8c     CC 97 BF FD | 	call	#_converttofloat
11e90     FD 14 02 F6 | 	mov	arg02, result1
11e94     FC 16 20 FF 
11e98     54 12 06 F6 | 	mov	arg01, ##1076754516
11e9c     28 25 B1 FD | 	call	#__system____builtin_logbase
11ea0     FD 12 02 F6 | 	mov	arg01, result1
11ea4     10 4E 05 F1 | 	add	fp, #16
11ea8     A7 14 02 FB | 	rdlong	arg02, fp
11eac     10 4E 85 F1 | 	sub	fp, #16
11eb0     48 17 B1 FD | 	call	#__system___float_div
11eb4     A7 FA 61 FC | 	wrlong	result1, fp
11eb8     08 4E 05 F1 | 	add	fp, #8
11ebc     A7 3C 68 FC | 	wrlong	#30, fp
11ec0     08 4E 85 F1 | 	sub	fp, #8
11ec4     A7 12 02 F6 | 	mov	arg01, fp
11ec8     88 95 BF FD | 	call	#_push
11ecc                 | LR__1543
11ecc     A7 F0 03 F6 | 	mov	ptra, fp
11ed0     B2 00 A0 FD | 	call	#popregs_
11ed4                 | _do_log_ret
11ed4     2D 00 64 FD | 	ret
11ed8                 | 
11ed8                 | ' 
11ed8                 | ' '-------------------- lpeek
11ed8                 | ' 
11ed8                 | ' sub do_lpeek
11ed8                 | _do_lpeek
11ed8     00 4A 05 F6 | 	mov	COUNT_, #0
11edc     A8 00 A0 FD | 	call	#pushregs_
11ee0     14 F0 07 F1 | 	add	ptra, #20
11ee4     D4 94 BF FD | 	call	#_pop
11ee8     A7 FA 61 FC | 	wrlong	result1, fp
11eec     04 4E 05 F1 | 	add	fp, #4
11ef0     A7 FC 61 FC | 	wrlong	result2, fp
11ef4     04 4E 05 F1 | 	add	fp, #4
11ef8     A7 FE 61 FC | 	wrlong	result3, fp
11efc     08 4E 85 F1 | 	sub	fp, #8
11f00     A7 12 02 F6 | 	mov	arg01, fp
11f04     98 96 BF FD | 	call	#_converttoint
11f08     0C 4E 05 F1 | 	add	fp, #12
11f0c     A7 FA 61 FC | 	wrlong	result1, fp
11f10                 | ' 
11f10                 | ' t1=pop()
11f10                 | ' a=converttoint(t1)
11f10                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
11f10     0C 4E 85 F1 | 	sub	fp, #12
11f14     00 04 00 FF 
11f18     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11f1c     1C 00 90 3D |  if_ae	jmp	#LR__1550
11f20     0C 4E 05 F1 | 	add	fp, #12
11f24     A7 12 02 FB | 	rdlong	arg01, fp
11f28     09 FB 01 FB | 	rdlong	result1, arg01
11f2c     04 4E 05 F1 | 	add	fp, #4
11f30     A7 FA 61 FC | 	wrlong	result1, fp
11f34     10 4E 85 F1 | 	sub	fp, #16
11f38     1C 00 90 FD | 	jmp	#LR__1551
11f3c                 | LR__1550
11f3c     0C 4E 05 F1 | 	add	fp, #12
11f40     A7 12 02 FB | 	rdlong	arg01, fp
11f44     0C 4E 85 F1 | 	sub	fp, #12
11f48     FC B5 B0 FD | 	call	#_pslpeek
11f4c     10 4E 05 F1 | 	add	fp, #16
11f50     A7 FA 61 FC | 	wrlong	result1, fp
11f54     10 4E 85 F1 | 	sub	fp, #16
11f58                 | LR__1551
11f58     08 4E 05 F1 | 	add	fp, #8
11f5c     A7 3A 68 FC | 	wrlong	#29, fp
11f60     08 4E 05 F1 | 	add	fp, #8
11f64     A7 12 02 FB | 	rdlong	arg01, fp
11f68     10 4E 85 F1 | 	sub	fp, #16
11f6c     A7 12 62 FC | 	wrlong	arg01, fp
11f70     A7 12 02 F6 | 	mov	arg01, fp
11f74     DC 94 BF FD | 	call	#_push
11f78     A7 F0 03 F6 | 	mov	ptra, fp
11f7c     B2 00 A0 FD | 	call	#popregs_
11f80                 | _do_lpeek_ret
11f80     2D 00 64 FD | 	ret
11f84                 | 
11f84                 | ' 
11f84                 | ' '-------------------- lpoke
11f84                 | ' 
11f84                 | ' sub do_lpoke
11f84                 | _do_lpoke
11f84     01 4A 05 F6 | 	mov	COUNT_, #1
11f88     A8 00 A0 FD | 	call	#pushregs_
11f8c     20 F0 07 F1 | 	add	ptra, #32
11f90     28 94 BF FD | 	call	#_pop
11f94     FD 14 02 F6 | 	mov	arg02, result1
11f98     FE 12 02 F6 | 	mov	arg01, result2
11f9c     FF 1E 02 F6 | 	mov	local01, result3
11fa0     A7 14 62 FC | 	wrlong	arg02, fp
11fa4     04 4E 05 F1 | 	add	fp, #4
11fa8     A7 12 62 FC | 	wrlong	arg01, fp
11fac     04 4E 05 F1 | 	add	fp, #4
11fb0     A7 1E 62 FC | 	wrlong	local01, fp
11fb4     08 4E 85 F1 | 	sub	fp, #8
11fb8     00 94 BF FD | 	call	#_pop
11fbc     FF 1E 02 F6 | 	mov	local01, result3
11fc0     0C 4E 05 F1 | 	add	fp, #12
11fc4     A7 FA 61 FC | 	wrlong	result1, fp
11fc8     04 4E 05 F1 | 	add	fp, #4
11fcc     A7 FC 61 FC | 	wrlong	result2, fp
11fd0     04 4E 05 F1 | 	add	fp, #4
11fd4     A7 1E 62 FC | 	wrlong	local01, fp
11fd8     08 4E 85 F1 | 	sub	fp, #8
11fdc     A7 12 02 F6 | 	mov	arg01, fp
11fe0     0C 4E 85 F1 | 	sub	fp, #12
11fe4     B8 95 BF FD | 	call	#_converttoint
11fe8     18 4E 05 F1 | 	add	fp, #24
11fec     A7 FA 61 FC | 	wrlong	result1, fp
11ff0     18 4E 85 F1 | 	sub	fp, #24
11ff4     A7 12 02 F6 | 	mov	arg01, fp
11ff8     A4 95 BF FD | 	call	#_converttoint
11ffc     1C 4E 05 F1 | 	add	fp, #28
12000     A7 FA 61 FC | 	wrlong	result1, fp
12004                 | ' 
12004                 | ' t1=pop() 'value
12004                 | ' t2=pop() 
12004                 | ' a=converttoint(t2) : v=converttoint(t1)
12004                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
12004     04 4E 85 F1 | 	sub	fp, #4
12008     A7 1E 02 FB | 	rdlong	local01, fp
1200c     18 4E 85 F1 | 	sub	fp, #24
12010     00 04 00 FF 
12014     00 1E 16 F2 | 	cmp	local01, ##524288 wc
12018     1C 00 90 3D |  if_ae	jmp	#LR__1560
1201c     18 4E 05 F1 | 	add	fp, #24
12020     A7 12 02 FB | 	rdlong	arg01, fp
12024     04 4E 05 F1 | 	add	fp, #4
12028     A7 14 02 FB | 	rdlong	arg02, fp
1202c     1C 4E 85 F1 | 	sub	fp, #28
12030     09 15 62 FC | 	wrlong	arg02, arg01
12034     18 00 90 FD | 	jmp	#LR__1561
12038                 | LR__1560
12038     18 4E 05 F1 | 	add	fp, #24
1203c     A7 12 02 FB | 	rdlong	arg01, fp
12040     04 4E 05 F1 | 	add	fp, #4
12044     A7 14 02 FB | 	rdlong	arg02, fp
12048     1C 4E 85 F1 | 	sub	fp, #28
1204c     C8 B3 B0 FD | 	call	#_pslpoke
12050                 | LR__1561
12050     A7 F0 03 F6 | 	mov	ptra, fp
12054     B2 00 A0 FD | 	call	#popregs_
12058                 | _do_lpoke_ret
12058     2D 00 64 FD | 	ret
1205c                 | 
1205c                 | ' 
1205c                 | ' '-------------------- mid$
1205c                 | ' 
1205c                 | ' sub do_mid
1205c                 | _do_mid
1205c     00 4A 05 F6 | 	mov	COUNT_, #0
12060     A8 00 A0 FD | 	call	#pushregs_
12064     18 F0 07 F1 | 	add	ptra, #24
12068     4A 00 00 FF 
1206c     80 E4 05 F1 | 	add	objptr, ##38016
12070     F2 16 02 FB | 	rdlong	arg03, objptr
12074     0B 15 02 F6 | 	mov	arg02, arg03
12078     01 14 66 F0 | 	shl	arg02, #1
1207c     0B 15 02 F1 | 	add	arg02, arg03
12080     02 14 66 F0 | 	shl	arg02, #2
12084     03 00 00 FF 
12088     04 E4 85 F1 | 	sub	objptr, ##1540
1208c     F2 14 02 F1 | 	add	arg02, objptr
12090     0A 17 02 FB | 	rdlong	arg03, arg02
12094     0C 4E 05 F1 | 	add	fp, #12
12098     A7 16 62 FC | 	wrlong	arg03, fp
1209c                 | ' 
1209c                 | ' numpar=compiledline(lineptr_e).result.uresult
1209c                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
1209c     0C 4E 85 F1 | 	sub	fp, #12
120a0     03 16 0E F2 | 	cmp	arg03, #3 wz
120a4     47 00 00 FF 
120a8     7C E4 85 F1 | 	sub	objptr, ##36476
120ac     3C 00 90 AD |  if_e	jmp	#LR__1570
120b0     00 12 06 F6 | 	mov	arg01, #0
120b4     F0 41 B1 FD | 	call	#__system___getiolock_0542
120b8     FD 12 02 F6 | 	mov	arg01, result1
120bc     84 E7 B0 FD | 	call	#__system___lockmem
120c0     84 01 00 FF 
120c4     EE 14 06 F6 | 	mov	arg02, ##@LR__5460
120c8     00 12 06 F6 | 	mov	arg01, #0
120cc     00 16 06 F6 | 	mov	arg03, #0
120d0     64 F4 B0 FD | 	call	#__system___basic_print_string
120d4     00 12 06 F6 | 	mov	arg01, #0
120d8     CC 41 B1 FD | 	call	#__system___getiolock_0542
120dc     FD 00 68 FC | 	wrlong	#0, result1
120e0     27 12 06 F6 | 	mov	arg01, #39
120e4     CC B1 B0 FD | 	call	#_printerror
120e8     28 01 90 FD | 	jmp	#LR__1573
120ec                 | LR__1570
120ec     CC 92 BF FD | 	call	#_pop
120f0     FF 16 02 F6 | 	mov	arg03, result3
120f4     A7 FA 61 FC | 	wrlong	result1, fp
120f8     04 4E 05 F1 | 	add	fp, #4
120fc     A7 FC 61 FC | 	wrlong	result2, fp
12100     04 4E 05 F1 | 	add	fp, #4
12104     A7 16 62 FC | 	wrlong	arg03, fp
12108     08 4E 85 F1 | 	sub	fp, #8
1210c     A7 12 02 F6 | 	mov	arg01, fp
12110     8C 94 BF FD | 	call	#_converttoint
12114     FD 16 02 F6 | 	mov	arg03, result1
12118     14 4E 05 F1 | 	add	fp, #20
1211c     A7 16 62 FC | 	wrlong	arg03, fp
12120     14 4E 85 F1 | 	sub	fp, #20
12124     94 92 BF FD | 	call	#_pop
12128     FF 16 02 F6 | 	mov	arg03, result3
1212c     A7 FA 61 FC | 	wrlong	result1, fp
12130     04 4E 05 F1 | 	add	fp, #4
12134     A7 FC 61 FC | 	wrlong	result2, fp
12138     04 4E 05 F1 | 	add	fp, #4
1213c     A7 16 62 FC | 	wrlong	arg03, fp
12140     08 4E 85 F1 | 	sub	fp, #8
12144     A7 12 02 F6 | 	mov	arg01, fp
12148     54 94 BF FD | 	call	#_converttoint
1214c     FD 16 02 F6 | 	mov	arg03, result1
12150     10 4E 05 F1 | 	add	fp, #16
12154     A7 16 62 FC | 	wrlong	arg03, fp
12158     10 4E 85 F1 | 	sub	fp, #16
1215c     5C 92 BF FD | 	call	#_pop
12160     FF 16 02 F6 | 	mov	arg03, result3
12164     A7 FA 61 FC | 	wrlong	result1, fp
12168     04 4E 05 F1 | 	add	fp, #4
1216c     A7 FC 61 FC | 	wrlong	result2, fp
12170     04 4E 05 F1 | 	add	fp, #4
12174     A7 16 62 FC | 	wrlong	arg03, fp
12178                 | ' t1=pop() : arg2=converttoint(t1)
12178                 | ' t1=pop() : arg1=converttoint(t1)
12178                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12178     08 4E 85 F1 | 	sub	fp, #8
1217c     2B 16 0E F2 | 	cmp	arg03, #43 wz
12180     18 00 90 5D |  if_ne	jmp	#LR__1571
12184     A7 12 02 FB | 	rdlong	arg01, fp
12188     A8 93 BF FD | 	call	#_convertstring
1218c     A7 FA 61 FC | 	wrlong	result1, fp
12190     08 4E 05 F1 | 	add	fp, #8
12194     A7 3E 68 FC | 	wrlong	#31, fp
12198     08 4E 85 F1 | 	sub	fp, #8
1219c                 | LR__1571
1219c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
1219c     08 4E 05 F1 | 	add	fp, #8
121a0     A7 16 02 FB | 	rdlong	arg03, fp
121a4     08 4E 85 F1 | 	sub	fp, #8
121a8     1F 16 0E F2 | 	cmp	arg03, #31 wz
121ac     3C 00 90 AD |  if_e	jmp	#LR__1572
121b0     00 12 06 F6 | 	mov	arg01, #0
121b4     F0 40 B1 FD | 	call	#__system___getiolock_0542
121b8     FD 12 02 F6 | 	mov	arg01, result1
121bc     84 E6 B0 FD | 	call	#__system___lockmem
121c0     84 01 00 FF 
121c4     F5 14 06 F6 | 	mov	arg02, ##@LR__5461
121c8     00 12 06 F6 | 	mov	arg01, #0
121cc     00 16 06 F6 | 	mov	arg03, #0
121d0     64 F3 B0 FD | 	call	#__system___basic_print_string
121d4     00 12 06 F6 | 	mov	arg01, #0
121d8     CC 40 B1 FD | 	call	#__system___getiolock_0542
121dc     FD 00 68 FC | 	wrlong	#0, result1
121e0     0F 12 06 F6 | 	mov	arg01, #15
121e4     CC B0 B0 FD | 	call	#_printerror
121e8     28 00 90 FD | 	jmp	#LR__1573
121ec                 | LR__1572
121ec     A7 12 02 FB | 	rdlong	arg01, fp
121f0     10 4E 05 F1 | 	add	fp, #16
121f4     A7 14 02 FB | 	rdlong	arg02, fp
121f8     04 4E 05 F1 | 	add	fp, #4
121fc     A7 16 02 FB | 	rdlong	arg03, fp
12200     14 4E 85 F1 | 	sub	fp, #20
12204     D0 07 B1 FD | 	call	#__system__Mid_S
12208     A7 FA 61 FC | 	wrlong	result1, fp
1220c     A7 12 02 F6 | 	mov	arg01, fp
12210     40 92 BF FD | 	call	#_push
12214                 | LR__1573
12214     A7 F0 03 F6 | 	mov	ptra, fp
12218     B2 00 A0 FD | 	call	#popregs_
1221c                 | _do_mid_ret
1221c     2D 00 64 FD | 	ret
12220                 | 
12220                 | ' 
12220                 | ' '-------------------- mode
12220                 | ' 
12220                 | ' sub do_mode
12220                 | _do_mode
12220     05 4A 05 F6 | 	mov	COUNT_, #5
12224     A8 00 A0 FD | 	call	#pushregs_
12228     90 91 BF FD | 	call	#_pop
1222c     FD 1E 02 F6 | 	mov	local01, result1
12230     FE 20 02 F6 | 	mov	local02, result2
12234     FF 22 02 F6 | 	mov	local03, result3
12238                 | ' t1=pop() 
12238                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12238     1E 22 0E F2 | 	cmp	local03, #30 wz
1223c     10 00 90 5D |  if_ne	jmp	#LR__1580
12240     0F 13 02 F6 | 	mov	arg01, local01
12244     00 14 06 F6 | 	mov	arg02, #0
12248     74 16 B1 FD | 	call	#__system___float_tointeger
1224c     FD 1E 02 F6 | 	mov	local01, result1
12250                 | LR__1580
12250                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12250     1F 22 0E F2 | 	cmp	local03, #31 wz
12254     18 00 90 5D |  if_ne	jmp	#LR__1581
12258     0F 13 02 F6 | 	mov	arg01, local01
1225c     A4 19 B1 FD | 	call	#__system____builtin_atof
12260     FD 12 02 F6 | 	mov	arg01, result1
12264     00 14 06 F6 | 	mov	arg02, #0
12268     54 16 B1 FD | 	call	#__system___float_tointeger
1226c     FD 1E 02 F6 | 	mov	local01, result1
12270                 | LR__1581
12270                 | ' select case t1.result.iresult
12270     0F 25 02 F6 | 	mov	local04, local01
12274     05 24 26 F3 | 	fle	local04, #5
12278     30 24 62 FD | 	jmprel	local04
1227c                 | LR__1582
1227c     14 00 90 FD | 	jmp	#LR__1583
12280     A8 00 90 FD | 	jmp	#LR__1584
12284     10 01 90 FD | 	jmp	#LR__1585
12288     78 01 90 FD | 	jmp	#LR__1586
1228c     E0 01 90 FD | 	jmp	#LR__1587
12290     70 02 90 FD | 	jmp	#LR__1588
12294                 | LR__1583
12294     37 00 00 FF 
12298     40 E4 05 F1 | 	add	objptr, ##28224
1229c     F2 02 68 FC | 	wrlong	#1, objptr
122a0     04 E4 85 F1 | 	sub	objptr, #4
122a4     F2 34 69 FC | 	wrlong	#154, objptr
122a8     19 00 00 FF 
122ac     D8 E4 05 F1 | 	add	objptr, ##13016
122b0     F2 02 68 FC | 	wrlong	#1, objptr
122b4     19 00 00 FF 
122b8     DC E4 85 F1 | 	sub	objptr, ##13020
122bc     F2 26 69 FC | 	wrlong	#147, objptr
122c0     37 00 00 FF 
122c4     38 E4 85 F1 | 	sub	objptr, ##28216
122c8     04 12 06 F6 | 	mov	arg01, #4
122cc     48 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
122d0     37 00 00 FF 
122d4     3C E4 05 F1 | 	add	objptr, ##28220
122d8     F2 12 02 FB | 	rdlong	arg01, objptr
122dc     04 E4 85 F1 | 	sub	objptr, #4
122e0     F2 14 02 FB | 	rdlong	arg02, objptr
122e4                 | ' 
122e4                 | ' write_color:=ff
122e4     36 00 00 FF 
122e8     F7 E5 85 F1 | 	sub	objptr, ##28151
122ec     F2 12 62 FC | 	wrlong	arg01, objptr
122f0                 | ' write_background:=bb
122f0     04 E4 05 F1 | 	add	objptr, #4
122f4     F2 14 62 FC | 	wrlong	arg02, objptr
122f8     01 00 00 FF 
122fc     00 EA 05 F1 | 	add	ptr__dat__, ##512
12300     51 00 00 FF 
12304     73 E5 05 F1 | 	add	objptr, ##41843
12308     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1230c     04 E4 85 F1 | 	sub	objptr, #4
12310     03 00 80 FF 
12314     F2 30 69 FC | 	wrlong	##1688, objptr
12318     51 00 00 FF 
1231c     B4 E5 85 F1 | 	sub	objptr, ##41908
12320     01 00 00 FF 
12324     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12328     D8 01 90 FD | 	jmp	#LR__1588
1232c                 | LR__1584
1232c     37 00 00 FF 
12330     40 E4 05 F1 | 	add	objptr, ##28224
12334     F2 00 68 FC | 	wrlong	#0, objptr
12338     04 E4 85 F1 | 	sub	objptr, #4
1233c     F2 2E 68 FC | 	wrlong	#23, objptr
12340     19 00 00 FF 
12344     D8 E4 05 F1 | 	add	objptr, ##13016
12348     F2 00 68 FC | 	wrlong	#0, objptr
1234c     19 00 00 FF 
12350     DC E4 85 F1 | 	sub	objptr, ##13020
12354     F2 00 68 FC | 	wrlong	#0, objptr
12358     37 00 00 FF 
1235c     38 E4 85 F1 | 	sub	objptr, ##28216
12360     00 12 06 F6 | 	mov	arg01, #0
12364     B0 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
12368     37 00 00 FF 
1236c     3C E4 05 F1 | 	add	objptr, ##28220
12370     F2 12 02 FB | 	rdlong	arg01, objptr
12374     04 E4 85 F1 | 	sub	objptr, #4
12378     F2 14 02 FB | 	rdlong	arg02, objptr
1237c                 | ' 
1237c                 | ' write_color:=ff
1237c     36 00 00 FF 
12380     F7 E5 85 F1 | 	sub	objptr, ##28151
12384     F2 12 62 FC | 	wrlong	arg01, objptr
12388                 | ' write_background:=bb
12388     04 E4 05 F1 | 	add	objptr, #4
1238c     F2 14 62 FC | 	wrlong	arg02, objptr
12390     45 E4 85 F1 | 	sub	objptr, #69
12394     6C 01 90 FD | 	jmp	#LR__1588
12398                 | LR__1585
12398     37 00 00 FF 
1239c     40 E4 05 F1 | 	add	objptr, ##28224
123a0     F2 00 68 FC | 	wrlong	#0, objptr
123a4     04 E4 85 F1 | 	sub	objptr, #4
123a8     F2 6A 69 FC | 	wrlong	#181, objptr
123ac     19 00 00 FF 
123b0     D8 E4 05 F1 | 	add	objptr, ##13016
123b4     F2 00 68 FC | 	wrlong	#0, objptr
123b8     19 00 00 FF 
123bc     DC E4 85 F1 | 	sub	objptr, ##13020
123c0     F2 00 68 FC | 	wrlong	#0, objptr
123c4     37 00 00 FF 
123c8     38 E4 85 F1 | 	sub	objptr, ##28216
123cc     00 12 06 F6 | 	mov	arg01, #0
123d0     44 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
123d4     37 00 00 FF 
123d8     3C E4 05 F1 | 	add	objptr, ##28220
123dc     F2 12 02 FB | 	rdlong	arg01, objptr
123e0     04 E4 85 F1 | 	sub	objptr, #4
123e4     F2 14 02 FB | 	rdlong	arg02, objptr
123e8                 | ' 
123e8                 | ' write_color:=ff
123e8     36 00 00 FF 
123ec     F7 E5 85 F1 | 	sub	objptr, ##28151
123f0     F2 12 62 FC | 	wrlong	arg01, objptr
123f4                 | ' write_background:=bb
123f4     04 E4 05 F1 | 	add	objptr, #4
123f8     F2 14 62 FC | 	wrlong	arg02, objptr
123fc     45 E4 85 F1 | 	sub	objptr, #69
12400     00 01 90 FD | 	jmp	#LR__1588
12404                 | LR__1586
12404     37 00 00 FF 
12408     40 E4 05 F1 | 	add	objptr, ##28224
1240c     F2 00 68 FC | 	wrlong	#0, objptr
12410     04 E4 85 F1 | 	sub	objptr, #4
12414     F2 1E 68 FC | 	wrlong	#15, objptr
12418     19 00 00 FF 
1241c     D8 E4 05 F1 | 	add	objptr, ##13016
12420     F2 00 68 FC | 	wrlong	#0, objptr
12424     19 00 00 FF 
12428     DC E4 85 F1 | 	sub	objptr, ##13020
1242c     F2 00 68 FC | 	wrlong	#0, objptr
12430     37 00 00 FF 
12434     38 E4 85 F1 | 	sub	objptr, ##28216
12438     00 12 06 F6 | 	mov	arg01, #0
1243c     D8 C9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12440     37 00 00 FF 
12444     3C E4 05 F1 | 	add	objptr, ##28220
12448     F2 12 02 FB | 	rdlong	arg01, objptr
1244c     04 E4 85 F1 | 	sub	objptr, #4
12450     F2 14 02 FB | 	rdlong	arg02, objptr
12454                 | ' 
12454                 | ' write_color:=ff
12454     36 00 00 FF 
12458     F7 E5 85 F1 | 	sub	objptr, ##28151
1245c     F2 12 62 FC | 	wrlong	arg01, objptr
12460                 | ' write_background:=bb
12460     04 E4 05 F1 | 	add	objptr, #4
12464     F2 14 62 FC | 	wrlong	arg02, objptr
12468     45 E4 85 F1 | 	sub	objptr, #69
1246c     94 00 90 FD | 	jmp	#LR__1588
12470                 | LR__1587
12470     37 00 00 FF 
12474     40 E4 05 F1 | 	add	objptr, ##28224
12478     F2 02 68 FC | 	wrlong	#1, objptr
1247c     04 E4 85 F1 | 	sub	objptr, #4
12480     F2 02 68 FC | 	wrlong	#1, objptr
12484     19 00 00 FF 
12488     D8 E4 05 F1 | 	add	objptr, ##13016
1248c     F2 02 68 FC | 	wrlong	#1, objptr
12490     19 00 00 FF 
12494     DC E4 85 F1 | 	sub	objptr, ##13020
12498     F2 1C 68 FC | 	wrlong	#14, objptr
1249c     37 00 00 FF 
124a0     38 E4 85 F1 | 	sub	objptr, ##28216
124a4     04 12 06 F6 | 	mov	arg01, #4
124a8     6C C9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
124ac     37 00 00 FF 
124b0     3C E4 05 F1 | 	add	objptr, ##28220
124b4     F2 12 02 FB | 	rdlong	arg01, objptr
124b8     04 E4 85 F1 | 	sub	objptr, #4
124bc     F2 14 02 FB | 	rdlong	arg02, objptr
124c0                 | ' 
124c0                 | ' write_color:=ff
124c0     36 00 00 FF 
124c4     F7 E5 85 F1 | 	sub	objptr, ##28151
124c8     F2 12 62 FC | 	wrlong	arg01, objptr
124cc                 | ' write_background:=bb
124cc     04 E4 05 F1 | 	add	objptr, #4
124d0     F2 14 62 FC | 	wrlong	arg02, objptr
124d4     07 00 00 FF 
124d8     82 EB 05 F1 | 	add	ptr__dat__, ##3970
124dc     51 00 00 FF 
124e0     73 E5 05 F1 | 	add	objptr, ##41843
124e4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
124e8     04 E4 85 F1 | 	sub	objptr, #4
124ec     03 00 80 FF 
124f0     F2 30 69 FC | 	wrlong	##1688, objptr
124f4     51 00 00 FF 
124f8     B4 E5 85 F1 | 	sub	objptr, ##41908
124fc     07 00 00 FF 
12500     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
12504                 | LR__1588
12504     51 00 00 FF 
12508     B0 E5 05 F1 | 	add	objptr, ##41904
1250c     F2 1E 62 FC | 	wrlong	local01, objptr
12510     04 E4 85 F1 | 	sub	objptr, #4
12514     F2 12 02 FB | 	rdlong	arg01, objptr
12518     0E 00 00 FF 
1251c     50 E5 85 F1 | 	sub	objptr, ##7504
12520     F2 26 02 FB | 	rdlong	local05, objptr
12524     43 00 00 FF 
12528     5C E4 85 F1 | 	sub	objptr, ##34396
1252c     13 13 82 F1 | 	sub	arg01, local05
12530     00 14 06 F6 | 	mov	arg02, #0
12534     0A 16 06 F6 | 	mov	arg03, #10
12538     D8 05 B1 FD | 	call	#__system__Number_S
1253c     FD 12 02 F6 | 	mov	arg01, result1
12540     84 01 00 FF 
12544     FC 14 06 F6 | 	mov	arg02, ##@LR__5462
12548     54 E3 B0 FD | 	call	#__system___string_concat
1254c     50 00 00 FF 
12550     10 E5 05 F1 | 	add	objptr, ##41232
12554     F2 FA 61 FC | 	wrlong	result1, objptr
12558     19 00 00 FF 
1255c     D4 E4 85 F1 | 	sub	objptr, ##13012
12560     F2 12 02 FB | 	rdlong	arg01, objptr
12564     04 E4 85 F1 | 	sub	objptr, #4
12568     F2 14 02 FB | 	rdlong	arg02, objptr
1256c     37 00 00 FF 
12570     38 E4 85 F1 | 	sub	objptr, ##28216
12574     F0 C9 B0 FD | 	call	#_hg010b_spin2_cls
12578     84 01 00 FF 
1257c     0E 13 06 F6 | 	mov	arg01, ##@LR__5463
12580                 | ' 
12580                 | ' write(text)
12580     A4 CD B0 FD | 	call	#_hg010b_spin2_write
12584                 | ' crlf
12584     A0 D2 B0 FD | 	call	#_hg010b_spin2_crlf
12588     18 00 00 FF 
1258c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
12590     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
12594     18 00 00 FF 
12598     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1259c                 | ' 
1259c                 | ' write(text)
1259c     88 CD B0 FD | 	call	#_hg010b_spin2_write
125a0                 | ' crlf
125a0     84 D2 B0 FD | 	call	#_hg010b_spin2_crlf
125a4     50 00 00 FF 
125a8     10 E5 05 F1 | 	add	objptr, ##41232
125ac     F2 12 02 FB | 	rdlong	arg01, objptr
125b0     50 00 00 FF 
125b4     10 E5 85 F1 | 	sub	objptr, ##41232
125b8                 | ' 
125b8                 | ' write(text)
125b8     6C CD B0 FD | 	call	#_hg010b_spin2_write
125bc                 | ' crlf
125bc     68 D2 B0 FD | 	call	#_hg010b_spin2_crlf
125c0     A7 F0 03 F6 | 	mov	ptra, fp
125c4     B2 00 A0 FD | 	call	#popregs_
125c8                 | _do_mode_ret
125c8     2D 00 64 FD | 	ret
125cc                 | 
125cc                 | ' 
125cc                 | ' '-------------------- mouse
125cc                 | ' 
125cc                 | ' sub do_mouse
125cc                 | _do_mouse
125cc     EC 8D BF FD | 	call	#_pop
125d0     00 FA 4D F2 | 	cmps	result1, #0 wz
125d4                 | ' 
125d4                 | ' t1=pop()
125d4                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
125d4     14 00 90 5D |  if_ne	jmp	#LR__1590
125d8     10 12 06 F6 | 	mov	arg01, #16
125dc     00 14 06 F6 | 	mov	arg02, #0
125e0     00 16 06 F6 | 	mov	arg03, #0
125e4     60 BC B0 FD | 	call	#_hg010b_spin2_setspritesize
125e8     10 00 90 FD | 	jmp	#LR__1591
125ec                 | LR__1590
125ec     10 12 06 F6 | 	mov	arg01, #16
125f0     20 14 06 F6 | 	mov	arg02, #32
125f4     20 16 06 F6 | 	mov	arg03, #32
125f8     4C BC B0 FD | 	call	#_hg010b_spin2_setspritesize
125fc                 | LR__1591
125fc                 | _do_mouse_ret
125fc     2D 00 64 FD | 	ret
12600                 | 
12600                 | ' 
12600                 | ' '-------------------- mousek
12600                 | ' 
12600                 | ' sub do_mousek
12600                 | _do_mousek
12600     00 4A 05 F6 | 	mov	COUNT_, #0
12604     A8 00 A0 FD | 	call	#pushregs_
12608     0C F0 07 F1 | 	add	ptra, #12
1260c     08 4E 05 F1 | 	add	fp, #8
12610     A7 3A 68 FC | 	wrlong	#29, fp
12614     08 4E 85 F1 | 	sub	fp, #8
12618     51 00 00 FF 
1261c     28 E5 05 F1 | 	add	objptr, ##41768
12620     F2 12 02 FB | 	rdlong	arg01, objptr
12624     51 00 00 FF 
12628     28 E5 85 F1 | 	sub	objptr, ##41768
1262c     A7 12 62 FC | 	wrlong	arg01, fp
12630     A7 12 02 F6 | 	mov	arg01, fp
12634     1C 8E BF FD | 	call	#_push
12638     A7 F0 03 F6 | 	mov	ptra, fp
1263c     B2 00 A0 FD | 	call	#popregs_
12640                 | _do_mousek_ret
12640     2D 00 64 FD | 	ret
12644                 | 
12644                 | ' 
12644                 | ' '-------------------- mousew
12644                 | ' 
12644                 | ' sub do_mousew
12644                 | _do_mousew
12644     00 4A 05 F6 | 	mov	COUNT_, #0
12648     A8 00 A0 FD | 	call	#pushregs_
1264c     0C F0 07 F1 | 	add	ptra, #12
12650     08 4E 05 F1 | 	add	fp, #8
12654     A7 38 68 FC | 	wrlong	#28, fp
12658     08 4E 85 F1 | 	sub	fp, #8
1265c     51 00 00 FF 
12660     2C E5 05 F1 | 	add	objptr, ##41772
12664     F2 12 02 FB | 	rdlong	arg01, objptr
12668     51 00 00 FF 
1266c     2C E5 85 F1 | 	sub	objptr, ##41772
12670     A7 12 62 FC | 	wrlong	arg01, fp
12674     A7 12 02 F6 | 	mov	arg01, fp
12678     D8 8D BF FD | 	call	#_push
1267c     A7 F0 03 F6 | 	mov	ptra, fp
12680     B2 00 A0 FD | 	call	#popregs_
12684                 | _do_mousew_ret
12684     2D 00 64 FD | 	ret
12688                 | 
12688                 | ' 
12688                 | ' '-------------------- mousex
12688                 | ' 
12688                 | ' sub do_mousex
12688                 | _do_mousex
12688     00 4A 05 F6 | 	mov	COUNT_, #0
1268c     A8 00 A0 FD | 	call	#pushregs_
12690     0C F0 07 F1 | 	add	ptra, #12
12694     08 4E 05 F1 | 	add	fp, #8
12698     A7 3A 68 FC | 	wrlong	#29, fp
1269c     08 4E 85 F1 | 	sub	fp, #8
126a0     51 00 00 FF 
126a4     20 E5 05 F1 | 	add	objptr, ##41760
126a8     F2 12 02 FB | 	rdlong	arg01, objptr
126ac     51 00 00 FF 
126b0     20 E5 85 F1 | 	sub	objptr, ##41760
126b4     A7 12 62 FC | 	wrlong	arg01, fp
126b8     A7 12 02 F6 | 	mov	arg01, fp
126bc     94 8D BF FD | 	call	#_push
126c0     A7 F0 03 F6 | 	mov	ptra, fp
126c4     B2 00 A0 FD | 	call	#popregs_
126c8                 | _do_mousex_ret
126c8     2D 00 64 FD | 	ret
126cc                 | 
126cc                 | ' 
126cc                 | ' '-------------------- mousey
126cc                 | ' 
126cc                 | ' sub do_mousey
126cc                 | _do_mousey
126cc     00 4A 05 F6 | 	mov	COUNT_, #0
126d0     A8 00 A0 FD | 	call	#pushregs_
126d4     0C F0 07 F1 | 	add	ptra, #12
126d8     08 4E 05 F1 | 	add	fp, #8
126dc     A7 3A 68 FC | 	wrlong	#29, fp
126e0     08 4E 85 F1 | 	sub	fp, #8
126e4     51 00 00 FF 
126e8     24 E5 05 F1 | 	add	objptr, ##41764
126ec     F2 12 02 FB | 	rdlong	arg01, objptr
126f0     51 00 00 FF 
126f4     24 E5 85 F1 | 	sub	objptr, ##41764
126f8     A7 12 62 FC | 	wrlong	arg01, fp
126fc     A7 12 02 F6 | 	mov	arg01, fp
12700     50 8D BF FD | 	call	#_push
12704     A7 F0 03 F6 | 	mov	ptra, fp
12708     B2 00 A0 FD | 	call	#popregs_
1270c                 | _do_mousey_ret
1270c     2D 00 64 FD | 	ret
12710                 | 
12710                 | ' 
12710                 | ' '------------------ new
12710                 | ' 
12710                 | ' sub do_new
12710                 | _do_new
12710     03 4A 05 F6 | 	mov	COUNT_, #3
12714     A8 00 A0 FD | 	call	#pushregs_
12718     13 12 C6 F9 | 	decod	arg01, #19
1271c     01 14 66 F6 | 	neg	arg02, #1
12720     F4 AC B0 FD | 	call	#_pslpoke
12724     35 00 00 FF 
12728     08 E4 05 F1 | 	add	objptr, ##27144
1272c     F2 00 68 FC | 	wrlong	#0, objptr
12730                 | ' 
12730                 | ' pslpoke(memlo,$FFFFFFFF)
12730                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
12730     00 1E 06 F6 | 	mov	local01, #0
12734     20 00 00 FF 
12738     10 E4 85 F1 | 	sub	objptr, ##16400
1273c     97 1E 48 FB | 	callpa	#(@LR__1601-@LR__1600)>>2,fcache_load_ptr_
12740                 | LR__1600
12740     0F 17 02 F6 | 	mov	arg03, local01
12744     04 16 66 F0 | 	shl	arg03, #4
12748     F2 16 02 F1 | 	add	arg03, objptr
1274c     84 01 00 FF 
12750     0F 15 06 F6 | 	mov	arg02, ##@LR__5464
12754     0B 15 62 FC | 	wrlong	arg02, arg03
12758     0F 21 02 F6 | 	mov	local02, local01
1275c     04 20 66 F0 | 	shl	local02, #4
12760     F2 20 02 F1 | 	add	local02, objptr
12764     0C 20 06 F1 | 	add	local02, #12
12768     10 01 68 FC | 	wrlong	#0, local02
1276c     01 1E 06 F1 | 	add	local01, #1
12770     02 00 00 FF 
12774     01 1E 56 F2 | 	cmps	local01, ##1025 wc
12778     C4 FF 9F CD |  if_b	jmp	#LR__1600
1277c                 | LR__1601
1277c     35 00 00 FF 
12780     90 E4 05 F1 | 	add	objptr, ##27280
12784     00 04 80 FF 
12788     F2 00 68 FC | 	wrlong	##524288, objptr
1278c     06 00 00 FF 
12790     30 E4 05 F1 | 	add	objptr, ##3120
12794     00 04 80 FF 
12798     F2 00 68 FC | 	wrlong	##524288, objptr
1279c     04 E4 05 F1 | 	add	objptr, #4
127a0     00 04 80 FF 
127a4     F2 00 68 FC | 	wrlong	##524288, objptr
127a8     0D 00 00 FF 
127ac     64 E4 85 F1 | 	sub	objptr, ##6756
127b0     F2 00 68 FC | 	wrlong	#0, objptr
127b4     07 00 00 FF 
127b8     24 E4 05 F1 | 	add	objptr, ##3620
127bc     F2 00 68 FC | 	wrlong	#0, objptr
127c0     07 00 00 FF 
127c4     20 E4 85 F1 | 	sub	objptr, ##3616
127c8     00 04 80 FF 
127cc     F2 00 68 FC | 	wrlong	##524288, objptr
127d0     07 00 00 FF 
127d4     30 E4 05 F1 | 	add	objptr, ##3632
127d8     F2 00 68 FC | 	wrlong	#0, objptr
127dc     04 E4 05 F1 | 	add	objptr, #4
127e0     FF FF FF FF 
127e4     F2 FE 6B FC | 	wrlong	##-1, objptr
127e8     06 00 00 FF 
127ec     78 E4 05 F1 | 	add	objptr, ##3192
127f0     F2 00 68 FC | 	wrlong	#0, objptr
127f4     04 E4 05 F1 | 	add	objptr, #4
127f8     F2 00 68 FC | 	wrlong	#0, objptr
127fc                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
127fc                 | ' stackpointer=0
127fc                 | ' lineptr=0 
127fc                 | ' programptr=memlo ': stringptr=0
127fc                 | ' 
127fc                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
127fc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
127fc     00 1E 06 F6 | 	mov	local01, #0
12800     06 00 00 FF 
12804     74 E4 85 F1 | 	sub	objptr, ##3188
12808     97 16 48 FB | 	callpa	#(@LR__1603-@LR__1602)>>2,fcache_load_ptr_
1280c                 | LR__1602
1280c     0F 21 02 F6 | 	mov	local02, local01
12810     02 20 66 F0 | 	shl	local02, #2
12814     0F 21 02 F1 | 	add	local02, local01
12818     02 20 66 F0 | 	shl	local02, #2
1281c     F2 20 02 F1 | 	add	local02, objptr
12820     08 20 06 F1 | 	add	local02, #8
12824     FF FF FF FF 
12828     10 FF 6B FC | 	wrlong	##-1, local02
1282c     01 1E 06 F1 | 	add	local01, #1
12830     41 1E 56 F2 | 	cmps	local01, #65 wc
12834     D4 FF 9F CD |  if_b	jmp	#LR__1602
12838                 | LR__1603
12838     4A 00 00 FF 
1283c     98 E4 85 F1 | 	sub	objptr, ##38040
12840                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
12840     00 1E 06 F6 | 	mov	local01, #0
12844                 | LR__1604
12844     0F 21 02 F6 | 	mov	local02, local01
12848     02 20 66 F0 | 	shl	local02, #2
1284c     51 00 00 FF 
12850     68 E5 05 F1 | 	add	objptr, ##41832
12854     F2 20 02 F1 | 	add	local02, objptr
12858     10 23 0A FB | 	rdlong	local03, local02 wz
1285c     51 00 00 FF 
12860     68 E5 85 F1 | 	sub	objptr, ##41832
12864     34 00 90 AD |  if_e	jmp	#LR__1605
12868     0F 13 02 F6 | 	mov	arg01, local01
1286c     00 14 06 F6 | 	mov	arg02, #0
12870     00 16 06 F6 | 	mov	arg03, #0
12874     D0 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
12878     0F 21 02 F6 | 	mov	local02, local01
1287c     02 20 66 F0 | 	shl	local02, #2
12880     51 00 00 FF 
12884     68 E5 05 F1 | 	add	objptr, ##41832
12888     F2 20 02 F1 | 	add	local02, objptr
1288c     10 13 02 FB | 	rdlong	arg01, local02
12890     51 00 00 FF 
12894     68 E5 85 F1 | 	sub	objptr, ##41832
12898     C0 1F B1 FD | 	call	#__system___gc_free
1289c                 | LR__1605
1289c     01 1E 06 F1 | 	add	local01, #1
128a0     10 1E 56 F2 | 	cmps	local01, #16 wc
128a4     9C FF 9F CD |  if_b	jmp	#LR__1604
128a8     51 00 00 FF 
128ac     BC E5 05 F1 | 	add	objptr, ##41916
128b0     00 C0 9F FF 
128b4     F2 00 68 FC | 	wrlong	##1065353216, objptr
128b8     04 E4 05 F1 | 	add	objptr, #4
128bc     00 C0 9F FF 
128c0     F2 00 68 FC | 	wrlong	##1065353216, objptr
128c4     51 00 00 FF 
128c8     BC E5 85 F1 | 	sub	objptr, ##41916
128cc     F2 22 02 FB | 	rdlong	local03, objptr
128d0     51 00 00 FF 
128d4     A8 E5 05 F1 | 	add	objptr, ##41896
128d8     F2 22 62 FC | 	wrlong	local03, objptr
128dc     51 00 00 FF 
128e0     AC E5 85 F1 | 	sub	objptr, ##41900
128e4     11 12 06 F6 | 	mov	arg01, #17
128e8     08 14 06 F6 | 	mov	arg02, #8
128ec     10 16 06 F6 | 	mov	arg03, #16
128f0     54 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
128f4     10 12 06 F6 | 	mov	arg01, #16
128f8     20 14 06 F6 | 	mov	arg02, #32
128fc     20 16 06 F6 | 	mov	arg03, #32
12900     44 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
12904     84 01 00 FF 
12908     10 23 06 F6 | 	mov	local03, ##@LR__5465
1290c     51 00 00 FF 
12910     D8 E5 05 F1 | 	add	objptr, ##41944
12914     F2 22 62 FC | 	wrlong	local03, objptr
12918     51 00 00 FF 
1291c     D8 E5 85 F1 | 	sub	objptr, ##41944
12920     B8 9D B0 FD | 	call	#_init_audio
12924     A7 F0 03 F6 | 	mov	ptra, fp
12928     B2 00 A0 FD | 	call	#popregs_
1292c                 | _do_new_ret
1292c     2D 00 64 FD | 	ret
12930                 | 
12930                 | ' 
12930                 | ' '-------------------- next
12930                 | ' 
12930                 | ' sub do_next()
12930                 | _do_next
12930     04 4A 05 F6 | 	mov	COUNT_, #4
12934     A8 00 A0 FD | 	call	#pushregs_
12938     80 8A BF FD | 	call	#_pop
1293c     FD 1E 02 F6 | 	mov	local01, result1
12940     FE 20 02 F6 | 	mov	local02, result2
12944     FF 22 02 F6 | 	mov	local03, result3
12948                 | ' t1=pop() :varnum=t1.result.uresult
12948                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
12948     50 00 00 FF 
1294c     08 E5 05 F1 | 	add	objptr, ##41224
12950     F2 12 02 FB | 	rdlong	arg01, objptr
12954     09 15 02 F6 | 	mov	arg02, arg01
12958     02 14 66 F0 | 	shl	arg02, #2
1295c     09 15 02 F1 | 	add	arg02, arg01
12960     02 14 66 F0 | 	shl	arg02, #2
12964     06 00 00 FF 
12968     70 E4 85 F1 | 	sub	objptr, ##3184
1296c     F2 14 02 F1 | 	add	arg02, objptr
12970     08 14 06 F1 | 	add	arg02, #8
12974     0A 15 02 FB | 	rdlong	arg02, arg02
12978     0F 15 0A F2 | 	cmp	arg02, local01 wz
1297c     4A 00 00 FF 
12980     98 E4 85 F1 | 	sub	objptr, ##38040
12984     0C 00 90 AD |  if_e	jmp	#LR__1610
12988     25 12 06 F6 | 	mov	arg01, #37
1298c     24 A9 B0 FD | 	call	#_printerror
12990     54 03 90 FD | 	jmp	#LR__1617
12994                 | LR__1610
12994                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
12994     0F 15 02 F6 | 	mov	arg02, local01
12998     04 14 66 F0 | 	shl	arg02, #4
1299c     14 00 00 FF 
129a0     F8 E5 05 F1 | 	add	objptr, ##10744
129a4     F2 14 02 F1 | 	add	arg02, objptr
129a8     0C 14 06 F1 | 	add	arg02, #12
129ac     0A 15 02 FB | 	rdlong	arg02, arg02
129b0     1E 14 0E F2 | 	cmp	arg02, #30 wz
129b4     14 00 00 FF 
129b8     F8 E5 85 F1 | 	sub	objptr, ##10744
129bc     54 00 90 5D |  if_ne	jmp	#LR__1611
129c0     0F 15 02 F6 | 	mov	arg02, local01
129c4     04 14 66 F0 | 	shl	arg02, #4
129c8     14 00 00 FF 
129cc     F8 E5 05 F1 | 	add	objptr, ##10744
129d0     F2 14 02 F1 | 	add	arg02, objptr
129d4     0C 14 06 F1 | 	add	arg02, #12
129d8     0A 39 68 FC | 	wrlong	#28, arg02
129dc     0F 25 02 F6 | 	mov	local04, local01
129e0     04 24 66 F0 | 	shl	local04, #4
129e4     F2 24 02 F1 | 	add	local04, objptr
129e8     0F 13 02 F6 | 	mov	arg01, local01
129ec     04 12 66 F0 | 	shl	arg01, #4
129f0     F2 12 02 F1 | 	add	arg01, objptr
129f4     04 12 06 F1 | 	add	arg01, #4
129f8     09 13 02 FB | 	rdlong	arg01, arg01
129fc     14 00 00 FF 
12a00     F8 E5 85 F1 | 	sub	objptr, ##10744
12a04     01 14 06 F6 | 	mov	arg02, #1
12a08     B4 0E B1 FD | 	call	#__system___float_tointeger
12a0c     04 24 06 F1 | 	add	local04, #4
12a10     12 FB 61 FC | 	wrlong	result1, local04
12a14                 | LR__1611
12a14     50 00 00 FF 
12a18     08 E5 05 F1 | 	add	objptr, ##41224
12a1c     F2 12 02 FB | 	rdlong	arg01, objptr
12a20     09 25 02 F6 | 	mov	local04, arg01
12a24     02 24 66 F0 | 	shl	local04, #2
12a28     09 25 02 F1 | 	add	local04, arg01
12a2c     02 24 66 F0 | 	shl	local04, #2
12a30     06 00 00 FF 
12a34     70 E4 85 F1 | 	sub	objptr, ##3184
12a38     F2 24 02 F1 | 	add	local04, objptr
12a3c     0C 24 06 F1 | 	add	local04, #12
12a40     12 25 02 FB | 	rdlong	local04, local04
12a44     0F 13 02 F6 | 	mov	arg01, local01
12a48     04 12 66 F0 | 	shl	arg01, #4
12a4c     35 00 00 FF 
12a50     A0 E4 85 F1 | 	sub	objptr, ##27296
12a54     F2 12 02 F1 | 	add	arg01, objptr
12a58     0F FF 01 F6 | 	mov	result3, local01
12a5c     04 FE 65 F0 | 	shl	result3, #4
12a60     F2 FE 01 F1 | 	add	result3, objptr
12a64     04 FE 05 F1 | 	add	result3, #4
12a68     FF FE 01 FB | 	rdlong	result3, result3
12a6c     12 FF 01 F1 | 	add	result3, local04
12a70     04 12 06 F1 | 	add	arg01, #4
12a74     09 FF 61 FC | 	wrlong	result3, arg01
12a78                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
12a78                 | ' if fortable(fortop).stepval>=0 then
12a78     3B 00 00 FF 
12a7c     10 E5 05 F1 | 	add	objptr, ##30480
12a80     F2 12 02 FB | 	rdlong	arg01, objptr
12a84     09 25 02 F6 | 	mov	local04, arg01
12a88     02 24 66 F0 | 	shl	local04, #2
12a8c     09 25 02 F1 | 	add	local04, arg01
12a90     02 24 66 F0 | 	shl	local04, #2
12a94     06 00 00 FF 
12a98     70 E4 85 F1 | 	sub	objptr, ##3184
12a9c     F2 24 02 F1 | 	add	local04, objptr
12aa0     0C 24 06 F1 | 	add	local04, #12
12aa4     12 25 02 FB | 	rdlong	local04, local04
12aa8     00 24 56 F2 | 	cmps	local04, #0 wc
12aac     4A 00 00 FF 
12ab0     98 E4 85 F1 | 	sub	objptr, ##38040
12ab4     78 00 90 CD |  if_b	jmp	#LR__1612
12ab8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
12ab8     04 1E 66 F0 | 	shl	local01, #4
12abc     14 00 00 FF 
12ac0     F8 E5 05 F1 | 	add	objptr, ##10744
12ac4     F2 1E 02 F1 | 	add	local01, objptr
12ac8     3B 00 00 FF 
12acc     10 E5 05 F1 | 	add	objptr, ##30480
12ad0     F2 24 02 FB | 	rdlong	local04, objptr
12ad4     12 13 02 F6 | 	mov	arg01, local04
12ad8     02 12 66 F0 | 	shl	arg01, #2
12adc     12 13 02 F1 | 	add	arg01, local04
12ae0     02 12 66 F0 | 	shl	arg01, #2
12ae4     06 00 00 FF 
12ae8     70 E4 85 F1 | 	sub	objptr, ##3184
12aec     F2 12 02 F1 | 	add	arg01, objptr
12af0     04 1E 06 F1 | 	add	local01, #4
12af4     0F 25 02 FB | 	rdlong	local04, local01
12af8     10 12 06 F1 | 	add	arg01, #16
12afc     09 13 02 FB | 	rdlong	arg01, arg01
12b00     09 25 5A F2 | 	cmps	local04, arg01 wcz
12b04     4A 00 00 FF 
12b08     98 E4 85 F1 | 	sub	objptr, ##38040
12b0c     9C 00 90 ED |  if_be	jmp	#LR__1614
12b10     50 00 00 FF 
12b14     08 E5 05 F1 | 	add	objptr, ##41224
12b18     F2 24 02 FB | 	rdlong	local04, objptr
12b1c     01 24 86 F1 | 	sub	local04, #1
12b20     F2 24 62 FC | 	wrlong	local04, objptr
12b24     50 00 00 FF 
12b28     08 E5 85 F1 | 	sub	objptr, ##41224
12b2c     B8 01 90 FD | 	jmp	#LR__1617
12b30                 | LR__1612
12b30                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
12b30     0F 13 02 F6 | 	mov	arg01, local01
12b34     04 12 66 F0 | 	shl	arg01, #4
12b38     14 00 00 FF 
12b3c     F8 E5 05 F1 | 	add	objptr, ##10744
12b40     F2 12 02 F1 | 	add	arg01, objptr
12b44     3B 00 00 FF 
12b48     10 E5 05 F1 | 	add	objptr, ##30480
12b4c     F2 24 02 FB | 	rdlong	local04, objptr
12b50     12 1F 02 F6 | 	mov	local01, local04
12b54     02 1E 66 F0 | 	shl	local01, #2
12b58     12 1F 02 F1 | 	add	local01, local04
12b5c     02 1E 66 F0 | 	shl	local01, #2
12b60     06 00 00 FF 
12b64     70 E4 85 F1 | 	sub	objptr, ##3184
12b68     F2 1E 02 F1 | 	add	local01, objptr
12b6c     04 12 06 F1 | 	add	arg01, #4
12b70     09 13 02 FB | 	rdlong	arg01, arg01
12b74     10 1E 06 F1 | 	add	local01, #16
12b78     0F 1F 02 FB | 	rdlong	local01, local01
12b7c     0F 13 52 F2 | 	cmps	arg01, local01 wc
12b80     4A 00 00 FF 
12b84     98 E4 85 F1 | 	sub	objptr, ##38040
12b88     20 00 90 3D |  if_ae	jmp	#LR__1613
12b8c     50 00 00 FF 
12b90     08 E5 05 F1 | 	add	objptr, ##41224
12b94     F2 24 02 FB | 	rdlong	local04, objptr
12b98     01 24 86 F1 | 	sub	local04, #1
12b9c     F2 24 62 FC | 	wrlong	local04, objptr
12ba0     50 00 00 FF 
12ba4     08 E5 85 F1 | 	sub	objptr, ##41224
12ba8     3C 01 90 FD | 	jmp	#LR__1617
12bac                 | LR__1613
12bac                 | LR__1614
12bac                 | ' ' if not returned, goto pointer 
12bac                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
12bac     50 00 00 FF 
12bb0     EC E4 05 F1 | 	add	objptr, ##41196
12bb4     F2 24 02 FB | 	rdlong	local04, objptr
12bb8     50 00 00 FF 
12bbc     EC E4 85 F1 | 	sub	objptr, ##41196
12bc0     01 24 16 F2 | 	cmp	local04, #1 wc
12bc4     DC 00 90 CD |  if_b	jmp	#LR__1615
12bc8     50 00 00 FF 
12bcc     08 E5 05 F1 | 	add	objptr, ##41224
12bd0     F2 1E 02 FB | 	rdlong	local01, objptr
12bd4     0F 25 02 F6 | 	mov	local04, local01
12bd8     02 24 66 F0 | 	shl	local04, #2
12bdc     0F 25 02 F1 | 	add	local04, local01
12be0     02 24 66 F0 | 	shl	local04, #2
12be4     06 00 00 FF 
12be8     70 E4 85 F1 | 	sub	objptr, ##3184
12bec     F2 24 02 F1 | 	add	local04, objptr
12bf0     06 00 00 FF 
12bf4     20 E4 05 F1 | 	add	objptr, ##3104
12bf8     F2 1E 02 FB | 	rdlong	local01, objptr
12bfc     50 00 00 FF 
12c00     B8 E4 85 F1 | 	sub	objptr, ##41144
12c04     12 25 02 FB | 	rdlong	local04, local04
12c08     12 1F 0A F2 | 	cmp	local01, local04 wz
12c0c     94 00 90 AD |  if_e	jmp	#LR__1615
12c10     50 00 00 FF 
12c14     08 E5 05 F1 | 	add	objptr, ##41224
12c18     F2 1E 02 FB | 	rdlong	local01, objptr
12c1c     0F 25 02 F6 | 	mov	local04, local01
12c20     02 24 66 F0 | 	shl	local04, #2
12c24     0F 25 02 F1 | 	add	local04, local01
12c28     02 24 66 F0 | 	shl	local04, #2
12c2c     06 00 00 FF 
12c30     70 E4 85 F1 | 	sub	objptr, ##3184
12c34     F2 24 02 F1 | 	add	local04, objptr
12c38     12 25 02 FB | 	rdlong	local04, local04
12c3c     06 00 00 FF 
12c40     20 E4 05 F1 | 	add	objptr, ##3104
12c44     F2 24 62 FC | 	wrlong	local04, objptr
12c48     50 E4 05 F1 | 	add	objptr, #80
12c4c     F2 1E 02 FB | 	rdlong	local01, objptr
12c50     0F 25 02 F6 | 	mov	local04, local01
12c54     02 24 66 F0 | 	shl	local04, #2
12c58     0F 25 02 F1 | 	add	local04, local01
12c5c     02 24 66 F0 | 	shl	local04, #2
12c60     06 00 00 FF 
12c64     70 E4 85 F1 | 	sub	objptr, ##3184
12c68     F2 24 02 F1 | 	add	local04, objptr
12c6c     04 24 06 F1 | 	add	local04, #4
12c70     12 25 02 FB | 	rdlong	local04, local04
12c74     06 00 00 FF 
12c78     24 E4 05 F1 | 	add	objptr, ##3108
12c7c     F2 24 62 FC | 	wrlong	local04, objptr
12c80     06 00 00 FF 
12c84     40 E4 85 F1 | 	sub	objptr, ##3136
12c88     F2 24 02 FB | 	rdlong	local04, objptr
12c8c     01 24 86 F1 | 	sub	local04, #1
12c90     04 E4 05 F1 | 	add	objptr, #4
12c94     F2 24 62 FC | 	wrlong	local04, objptr
12c98     4A 00 00 FF 
12c9c     80 E4 85 F1 | 	sub	objptr, ##38016
12ca0     44 00 90 FD | 	jmp	#LR__1616
12ca4                 | LR__1615
12ca4     50 00 00 FF 
12ca8     08 E5 05 F1 | 	add	objptr, ##41224
12cac     F2 24 02 FB | 	rdlong	local04, objptr
12cb0     12 1F 02 F6 | 	mov	local01, local04
12cb4     02 1E 66 F0 | 	shl	local01, #2
12cb8     12 1F 02 F1 | 	add	local01, local04
12cbc     02 1E 66 F0 | 	shl	local01, #2
12cc0     06 00 00 FF 
12cc4     70 E4 85 F1 | 	sub	objptr, ##3184
12cc8     F2 1E 02 F1 | 	add	local01, objptr
12ccc     04 1E 06 F1 | 	add	local01, #4
12cd0     0F 1F 02 FB | 	rdlong	local01, local01
12cd4     01 1E 86 F1 | 	sub	local01, #1
12cd8     18 E4 85 F1 | 	sub	objptr, #24
12cdc     F2 1E 62 FC | 	wrlong	local01, objptr
12ce0     4A 00 00 FF 
12ce4     80 E4 85 F1 | 	sub	objptr, ##38016
12ce8                 | LR__1616
12ce8                 | LR__1617
12ce8     A7 F0 03 F6 | 	mov	ptra, fp
12cec     B2 00 A0 FD | 	call	#popregs_
12cf0                 | _do_next_ret
12cf0     2D 00 64 FD | 	ret
12cf4                 | 
12cf4                 | ' 
12cf4                 | ' '-------------------- no command (print "Unknown command")
12cf4                 | ' 
12cf4                 | ' sub do_no_command
12cf4                 | _do_no_command
12cf4     17 12 06 F6 | 	mov	arg01, #23
12cf8     B8 A5 B0 FD | 	call	#_printerror
12cfc                 | _do_no_command_ret
12cfc     2D 00 64 FD | 	ret
12d00                 | 
12d00                 | ' 
12d00                 | ' '-------------------- nothing
12d00                 | ' 
12d00                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
12d00                 | _do_nothing
12d00                 | _do_nothing_ret
12d00     2D 00 64 FD | 	ret
12d04                 | 
12d04                 | ' 
12d04                 | ' '-------------------- open
12d04                 | ' 
12d04                 | ' sub do_open
12d04                 | _do_open
12d04     02 4A 05 F6 | 	mov	COUNT_, #2
12d08     A8 00 A0 FD | 	call	#pushregs_
12d0c     20 F0 07 F1 | 	add	ptra, #32
12d10     4A 00 00 FF 
12d14     80 E4 05 F1 | 	add	objptr, ##38016
12d18     F2 16 02 FB | 	rdlong	arg03, objptr
12d1c     0B 15 02 F6 | 	mov	arg02, arg03
12d20     01 14 66 F0 | 	shl	arg02, #1
12d24     0B 15 02 F1 | 	add	arg02, arg03
12d28     02 14 66 F0 | 	shl	arg02, #2
12d2c     03 00 00 FF 
12d30     04 E4 85 F1 | 	sub	objptr, ##1540
12d34     F2 14 02 F1 | 	add	arg02, objptr
12d38     0A 17 02 FB | 	rdlong	arg03, arg02
12d3c     10 4E 05 F1 | 	add	fp, #16
12d40     A7 16 62 FC | 	wrlong	arg03, fp
12d44     10 4E 85 F1 | 	sub	fp, #16
12d48     47 00 00 FF 
12d4c     7C E4 85 F1 | 	sub	objptr, ##36476
12d50     68 86 BF FD | 	call	#_pop
12d54     FF 16 02 F6 | 	mov	arg03, result3
12d58     A7 FA 61 FC | 	wrlong	result1, fp
12d5c     04 4E 05 F1 | 	add	fp, #4
12d60     A7 FC 61 FC | 	wrlong	result2, fp
12d64     04 4E 05 F1 | 	add	fp, #4
12d68     A7 16 62 FC | 	wrlong	arg03, fp
12d6c                 | ' 
12d6c                 | ' numpar=compiledline(lineptr_e).result.uresult
12d6c                 | ' 
12d6c                 | ' t1=pop()
12d6c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12d6c     08 4E 85 F1 | 	sub	fp, #8
12d70     2B 16 0E F2 | 	cmp	arg03, #43 wz
12d74     18 00 90 5D |  if_ne	jmp	#LR__1620
12d78     A7 12 02 FB | 	rdlong	arg01, fp
12d7c     B4 87 BF FD | 	call	#_convertstring
12d80     A7 FA 61 FC | 	wrlong	result1, fp
12d84     08 4E 05 F1 | 	add	fp, #8
12d88     A7 3E 68 FC | 	wrlong	#31, fp
12d8c     08 4E 85 F1 | 	sub	fp, #8
12d90                 | LR__1620
12d90                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
12d90     08 4E 05 F1 | 	add	fp, #8
12d94     A7 16 02 FB | 	rdlong	arg03, fp
12d98     08 4E 85 F1 | 	sub	fp, #8
12d9c     1F 16 0E F2 | 	cmp	arg03, #31 wz
12da0     44 00 90 AD |  if_e	jmp	#LR__1621
12da4     00 12 06 F6 | 	mov	arg01, #0
12da8     FC 34 B1 FD | 	call	#__system___getiolock_0542
12dac     FD 12 02 F6 | 	mov	arg01, result1
12db0     90 DA B0 FD | 	call	#__system___lockmem
12db4     84 01 00 FF 
12db8     1B 15 06 F6 | 	mov	arg02, ##@LR__5466
12dbc     00 12 06 F6 | 	mov	arg01, #0
12dc0     00 16 06 F6 | 	mov	arg03, #0
12dc4     70 E7 B0 FD | 	call	#__system___basic_print_string
12dc8     00 12 06 F6 | 	mov	arg01, #0
12dcc     0A 14 06 F6 | 	mov	arg02, #10
12dd0     00 16 06 F6 | 	mov	arg03, #0
12dd4     08 E7 B0 FD | 	call	#__system___basic_print_char
12dd8     00 12 06 F6 | 	mov	arg01, #0
12ddc     C8 34 B1 FD | 	call	#__system___getiolock_0542
12de0     FD 00 68 FC | 	wrlong	#0, result1
12de4     28 02 90 FD | 	jmp	#LR__1632
12de8                 | LR__1621
12de8     A7 16 02 FB | 	rdlong	arg03, fp
12dec     0C 4E 05 F1 | 	add	fp, #12
12df0     A7 16 62 FC | 	wrlong	arg03, fp
12df4     0C 4E 85 F1 | 	sub	fp, #12
12df8     C0 85 BF FD | 	call	#_pop
12dfc     FF 16 02 F6 | 	mov	arg03, result3
12e00     A7 FA 61 FC | 	wrlong	result1, fp
12e04     04 4E 05 F1 | 	add	fp, #4
12e08     A7 FC 61 FC | 	wrlong	result2, fp
12e0c     04 4E 05 F1 | 	add	fp, #4
12e10     A7 16 62 FC | 	wrlong	arg03, fp
12e14                 | ' filename=t1.result.sresult
12e14                 | ' t1=pop()
12e14                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12e14     08 4E 85 F1 | 	sub	fp, #8
12e18     2B 16 0E F2 | 	cmp	arg03, #43 wz
12e1c     18 00 90 5D |  if_ne	jmp	#LR__1622
12e20     A7 12 02 FB | 	rdlong	arg01, fp
12e24     0C 87 BF FD | 	call	#_convertstring
12e28     A7 FA 61 FC | 	wrlong	result1, fp
12e2c     08 4E 05 F1 | 	add	fp, #8
12e30     A7 3E 68 FC | 	wrlong	#31, fp
12e34     08 4E 85 F1 | 	sub	fp, #8
12e38                 | LR__1622
12e38     14 4E 05 F1 | 	add	fp, #20
12e3c     A7 00 68 FC | 	wrlong	#0, fp
12e40                 | ' mode=0
12e40                 | ' if t1.result_type=result_string then
12e40     0C 4E 85 F1 | 	sub	fp, #12
12e44     A7 14 02 FB | 	rdlong	arg02, fp
12e48     08 4E 85 F1 | 	sub	fp, #8
12e4c     1F 14 0E F2 | 	cmp	arg02, #31 wz
12e50     64 00 90 5D |  if_ne	jmp	#LR__1623
12e54                 | '   if t1.result.sresult="read" then mode=1
12e54     A7 12 02 FB | 	rdlong	arg01, fp
12e58     84 01 00 FF 
12e5c     2D 15 06 F6 | 	mov	arg02, ##@LR__5467
12e60     08 DA B0 FD | 	call	#__system___string_cmp
12e64     00 FA 0D F2 | 	cmp	result1, #0 wz
12e68     14 4E 05 A1 |  if_e	add	fp, #20
12e6c     A7 02 68 AC |  if_e	wrlong	#1, fp
12e70     14 4E 85 A1 |  if_e	sub	fp, #20
12e74                 | '   if t1.result.sresult="write" then mode=2
12e74     A7 12 02 FB | 	rdlong	arg01, fp
12e78     84 01 00 FF 
12e7c     32 15 06 F6 | 	mov	arg02, ##@LR__5468
12e80     E8 D9 B0 FD | 	call	#__system___string_cmp
12e84     00 FA 0D F2 | 	cmp	result1, #0 wz
12e88     14 4E 05 A1 |  if_e	add	fp, #20
12e8c     A7 04 68 AC |  if_e	wrlong	#2, fp
12e90     14 4E 85 A1 |  if_e	sub	fp, #20
12e94                 | '   if t1.result.sresult="append" then mode=4
12e94     A7 12 02 FB | 	rdlong	arg01, fp
12e98     84 01 00 FF 
12e9c     38 15 06 F6 | 	mov	arg02, ##@LR__5469
12ea0     C8 D9 B0 FD | 	call	#__system___string_cmp
12ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
12ea8     14 4E 05 A1 |  if_e	add	fp, #20
12eac     A7 08 68 AC |  if_e	wrlong	#4, fp
12eb0     14 4E 85 A1 |  if_e	sub	fp, #20
12eb4     14 00 90 FD | 	jmp	#LR__1624
12eb8                 | LR__1623
12eb8     A7 12 02 F6 | 	mov	arg01, fp
12ebc     E0 86 BF FD | 	call	#_converttoint
12ec0     14 4E 05 F1 | 	add	fp, #20
12ec4     A7 FA 61 FC | 	wrlong	result1, fp
12ec8     14 4E 85 F1 | 	sub	fp, #20
12ecc                 | LR__1624
12ecc     EC 84 BF FD | 	call	#_pop
12ed0     FF 16 02 F6 | 	mov	arg03, result3
12ed4     A7 FA 61 FC | 	wrlong	result1, fp
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 FC 61 FC | 	wrlong	result2, fp
12ee0     04 4E 05 F1 | 	add	fp, #4
12ee4     A7 16 62 FC | 	wrlong	arg03, fp
12ee8                 | ' t1=pop()
12ee8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
12ee8     08 4E 85 F1 | 	sub	fp, #8
12eec     2C 16 0E F2 | 	cmp	arg03, #44 wz
12ef0     44 00 90 AD |  if_e	jmp	#LR__1625
12ef4     00 12 06 F6 | 	mov	arg01, #0
12ef8     AC 33 B1 FD | 	call	#__system___getiolock_0542
12efc     FD 12 02 F6 | 	mov	arg01, result1
12f00     40 D9 B0 FD | 	call	#__system___lockmem
12f04     84 01 00 FF 
12f08     3F 15 06 F6 | 	mov	arg02, ##@LR__5470
12f0c     00 12 06 F6 | 	mov	arg01, #0
12f10     00 16 06 F6 | 	mov	arg03, #0
12f14     20 E6 B0 FD | 	call	#__system___basic_print_string
12f18     00 12 06 F6 | 	mov	arg01, #0
12f1c     0A 14 06 F6 | 	mov	arg02, #10
12f20     00 16 06 F6 | 	mov	arg03, #0
12f24     B8 E5 B0 FD | 	call	#__system___basic_print_char
12f28     00 12 06 F6 | 	mov	arg01, #0
12f2c     78 33 B1 FD | 	call	#__system___getiolock_0542
12f30     FD 00 68 FC | 	wrlong	#0, result1
12f34     D8 00 90 FD | 	jmp	#LR__1632
12f38                 | LR__1625
12f38     A7 1E 02 FB | 	rdlong	local01, fp
12f3c     18 4E 05 F1 | 	add	fp, #24
12f40     A7 1E 62 FC | 	wrlong	local01, fp
12f44                 | ' channel  = t1.result.iresult
12f44                 | ' select case  mode
12f44     04 4E 85 F1 | 	sub	fp, #4
12f48     A7 20 02 FB | 	rdlong	local02, fp
12f4c     14 4E 85 F1 | 	sub	fp, #20
12f50     01 20 86 F1 | 	sub	local02, #1
12f54     04 20 26 F3 | 	fle	local02, #4
12f58     30 20 62 FD | 	jmprel	local02
12f5c                 | LR__1626
12f5c     10 00 90 FD | 	jmp	#LR__1627
12f60     2C 00 90 FD | 	jmp	#LR__1628
12f64     68 00 90 FD | 	jmp	#LR__1630
12f68     44 00 90 FD | 	jmp	#LR__1629
12f6c     60 00 90 FD | 	jmp	#LR__1630
12f70                 | LR__1627
12f70     18 4E 05 F1 | 	add	fp, #24
12f74     A7 12 02 FB | 	rdlong	arg01, fp
12f78     0C 4E 85 F1 | 	sub	fp, #12
12f7c     A7 14 02 FB | 	rdlong	arg02, fp
12f80     0C 4E 85 F1 | 	sub	fp, #12
12f84     00 16 06 F6 | 	mov	arg03, #0
12f88     BC E4 B0 FD | 	call	#__system___basic_open_string
12f8c     80 00 90 FD | 	jmp	#LR__1631
12f90                 | LR__1628
12f90     18 4E 05 F1 | 	add	fp, #24
12f94     A7 12 02 FB | 	rdlong	arg01, fp
12f98     0C 4E 85 F1 | 	sub	fp, #12
12f9c     A7 14 02 FB | 	rdlong	arg02, fp
12fa0     0C 4E 85 F1 | 	sub	fp, #12
12fa4     0D 16 06 F6 | 	mov	arg03, #13
12fa8     9C E4 B0 FD | 	call	#__system___basic_open_string
12fac     60 00 90 FD | 	jmp	#LR__1631
12fb0                 | LR__1629
12fb0     18 4E 05 F1 | 	add	fp, #24
12fb4     A7 12 02 FB | 	rdlong	arg01, fp
12fb8     0C 4E 85 F1 | 	sub	fp, #12
12fbc     A7 14 02 FB | 	rdlong	arg02, fp
12fc0     0C 4E 85 F1 | 	sub	fp, #12
12fc4     25 16 06 F6 | 	mov	arg03, #37
12fc8     7C E4 B0 FD | 	call	#__system___basic_open_string
12fcc     40 00 90 FD | 	jmp	#LR__1631
12fd0                 | LR__1630
12fd0     00 12 06 F6 | 	mov	arg01, #0
12fd4     D0 32 B1 FD | 	call	#__system___getiolock_0542
12fd8     FD 12 02 F6 | 	mov	arg01, result1
12fdc     64 D8 B0 FD | 	call	#__system___lockmem
12fe0     84 01 00 FF 
12fe4     51 15 06 F6 | 	mov	arg02, ##@LR__5471
12fe8     00 12 06 F6 | 	mov	arg01, #0
12fec     00 16 06 F6 | 	mov	arg03, #0
12ff0     44 E5 B0 FD | 	call	#__system___basic_print_string
12ff4     00 12 06 F6 | 	mov	arg01, #0
12ff8     0A 14 06 F6 | 	mov	arg02, #10
12ffc     00 16 06 F6 | 	mov	arg03, #0
13000     DC E4 B0 FD | 	call	#__system___basic_print_char
13004     00 12 06 F6 | 	mov	arg01, #0
13008     9C 32 B1 FD | 	call	#__system___getiolock_0542
1300c     FD 00 68 FC | 	wrlong	#0, result1
13010                 | LR__1631
13010                 | LR__1632
13010     A7 F0 03 F6 | 	mov	ptra, fp
13014     B2 00 A0 FD | 	call	#popregs_
13018                 | _do_open_ret
13018     2D 00 64 FD | 	ret
1301c                 | 
1301c                 | ' 
1301c                 | ' '-------------------- paper
1301c                 | ' 
1301c                 | ' sub do_paper
1301c                 | _do_paper
1301c     03 4A 05 F6 | 	mov	COUNT_, #3
13020     A8 00 A0 FD | 	call	#pushregs_
13024     94 83 BF FD | 	call	#_pop
13028     FD 1E 02 F6 | 	mov	local01, result1
1302c     FE 20 02 F6 | 	mov	local02, result2
13030     FF 22 02 F6 | 	mov	local03, result3
13034                 | ' t1=pop() 
13034                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13034     1E 22 0E F2 | 	cmp	local03, #30 wz
13038     10 00 90 5D |  if_ne	jmp	#LR__1640
1303c     0F 13 02 F6 | 	mov	arg01, local01
13040     00 14 06 F6 | 	mov	arg02, #0
13044     78 08 B1 FD | 	call	#__system___float_tointeger
13048     FD 1E 02 F6 | 	mov	local01, result1
1304c                 | LR__1640
1304c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1304c     1F 22 0E F2 | 	cmp	local03, #31 wz
13050     18 00 90 5D |  if_ne	jmp	#LR__1641
13054     0F 13 02 F6 | 	mov	arg01, local01
13058     A8 0B B1 FD | 	call	#__system____builtin_atof
1305c     FD 12 02 F6 | 	mov	arg01, result1
13060     00 14 06 F6 | 	mov	arg02, #0
13064     58 08 B1 FD | 	call	#__system___float_tointeger
13068     FD 1E 02 F6 | 	mov	local01, result1
1306c                 | LR__1641
1306c     37 00 00 FF 
13070     38 E4 05 F1 | 	add	objptr, ##28216
13074     F2 1E 62 FC | 	wrlong	local01, objptr
13078     04 E4 05 F1 | 	add	objptr, #4
1307c     F2 12 02 FB | 	rdlong	arg01, objptr
13080                 | ' 
13080                 | ' write_color:=ff
13080     36 00 00 FF 
13084     FB E5 85 F1 | 	sub	objptr, ##28155
13088     F2 12 62 FC | 	wrlong	arg01, objptr
1308c                 | ' write_background:=bb
1308c     04 E4 05 F1 | 	add	objptr, #4
13090     F2 1E 62 FC | 	wrlong	local01, objptr
13094     45 E4 85 F1 | 	sub	objptr, #69
13098     A7 F0 03 F6 | 	mov	ptra, fp
1309c     B2 00 A0 FD | 	call	#popregs_
130a0                 | _do_paper_ret
130a0     2D 00 64 FD | 	ret
130a4                 | 
130a4                 | ' 
130a4                 | ' '-------------------- peek
130a4                 | ' 
130a4                 | ' sub do_peek
130a4                 | _do_peek
130a4     00 4A 05 F6 | 	mov	COUNT_, #0
130a8     A8 00 A0 FD | 	call	#pushregs_
130ac     14 F0 07 F1 | 	add	ptra, #20
130b0     08 83 BF FD | 	call	#_pop
130b4     A7 FA 61 FC | 	wrlong	result1, fp
130b8     04 4E 05 F1 | 	add	fp, #4
130bc     A7 FC 61 FC | 	wrlong	result2, fp
130c0     04 4E 05 F1 | 	add	fp, #4
130c4     A7 FE 61 FC | 	wrlong	result3, fp
130c8     08 4E 85 F1 | 	sub	fp, #8
130cc     A7 12 02 F6 | 	mov	arg01, fp
130d0     CC 84 BF FD | 	call	#_converttoint
130d4     0C 4E 05 F1 | 	add	fp, #12
130d8     A7 FA 61 FC | 	wrlong	result1, fp
130dc                 | ' 
130dc                 | ' t1=pop()
130dc                 | ' a=converttoint(t1)
130dc                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
130dc     0C 4E 85 F1 | 	sub	fp, #12
130e0     00 04 00 FF 
130e4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
130e8     1C 00 90 3D |  if_ae	jmp	#LR__1650
130ec     0C 4E 05 F1 | 	add	fp, #12
130f0     A7 12 02 FB | 	rdlong	arg01, fp
130f4     09 FB C1 FA | 	rdbyte	result1, arg01
130f8     04 4E 05 F1 | 	add	fp, #4
130fc     A7 FA 61 FC | 	wrlong	result1, fp
13100     10 4E 85 F1 | 	sub	fp, #16
13104     20 00 90 FD | 	jmp	#LR__1651
13108                 | LR__1650
13108     0C 4E 05 F1 | 	add	fp, #12
1310c     A7 12 02 FB | 	rdlong	arg01, fp
13110     0C 4E 85 F1 | 	sub	fp, #12
13114     D8 A3 B0 FD | 	call	#_pspeek
13118     FD FA E1 F8 | 	getbyte	result1, result1, #0
1311c     10 4E 05 F1 | 	add	fp, #16
13120     A7 FA 61 FC | 	wrlong	result1, fp
13124     10 4E 85 F1 | 	sub	fp, #16
13128                 | LR__1651
13128     08 4E 05 F1 | 	add	fp, #8
1312c     A7 3A 68 FC | 	wrlong	#29, fp
13130     08 4E 05 F1 | 	add	fp, #8
13134     A7 12 02 FB | 	rdlong	arg01, fp
13138     10 4E 85 F1 | 	sub	fp, #16
1313c     A7 12 62 FC | 	wrlong	arg01, fp
13140     A7 12 02 F6 | 	mov	arg01, fp
13144     0C 83 BF FD | 	call	#_push
13148     A7 F0 03 F6 | 	mov	ptra, fp
1314c     B2 00 A0 FD | 	call	#popregs_
13150                 | _do_peek_ret
13150     2D 00 64 FD | 	ret
13154                 | 
13154                 | ' 
13154                 | ' '-------------------- pinfloat
13154                 | ' 
13154                 | ' sub do_pinfloat
13154                 | _do_pinfloat
13154     00 4A 05 F6 | 	mov	COUNT_, #0
13158     A8 00 A0 FD | 	call	#pushregs_
1315c     0C F0 07 F1 | 	add	ptra, #12
13160     58 82 BF FD | 	call	#_pop
13164     A7 FA 61 FC | 	wrlong	result1, fp
13168     04 4E 05 F1 | 	add	fp, #4
1316c     A7 FC 61 FC | 	wrlong	result2, fp
13170     04 4E 05 F1 | 	add	fp, #4
13174     A7 FE 61 FC | 	wrlong	result3, fp
13178     08 4E 85 F1 | 	sub	fp, #8
1317c     A7 12 02 F6 | 	mov	arg01, fp
13180     1C 84 BF FD | 	call	#_converttoint
13184     50 FA 61 FD | 	fltl	result1
13188     A7 F0 03 F6 | 	mov	ptra, fp
1318c     B2 00 A0 FD | 	call	#popregs_
13190                 | _do_pinfloat_ret
13190     2D 00 64 FD | 	ret
13194                 | 
13194                 | ' 
13194                 | ' '-------------------- pinhi
13194                 | ' 
13194                 | ' sub do_pinhi
13194                 | _do_pinhi
13194     00 4A 05 F6 | 	mov	COUNT_, #0
13198     A8 00 A0 FD | 	call	#pushregs_
1319c     0C F0 07 F1 | 	add	ptra, #12
131a0     18 82 BF FD | 	call	#_pop
131a4     A7 FA 61 FC | 	wrlong	result1, fp
131a8     04 4E 05 F1 | 	add	fp, #4
131ac     A7 FC 61 FC | 	wrlong	result2, fp
131b0     04 4E 05 F1 | 	add	fp, #4
131b4     A7 FE 61 FC | 	wrlong	result3, fp
131b8     08 4E 85 F1 | 	sub	fp, #8
131bc     A7 12 02 F6 | 	mov	arg01, fp
131c0     DC 83 BF FD | 	call	#_converttoint
131c4     59 FA 61 FD | 	drvh	result1
131c8     A7 F0 03 F6 | 	mov	ptra, fp
131cc     B2 00 A0 FD | 	call	#popregs_
131d0                 | _do_pinhi_ret
131d0     2D 00 64 FD | 	ret
131d4                 | 
131d4                 | ' 
131d4                 | ' '-------------------- pinlo
131d4                 | ' 
131d4                 | ' sub do_pinlo
131d4                 | _do_pinlo
131d4     00 4A 05 F6 | 	mov	COUNT_, #0
131d8     A8 00 A0 FD | 	call	#pushregs_
131dc     0C F0 07 F1 | 	add	ptra, #12
131e0     D8 81 BF FD | 	call	#_pop
131e4     A7 FA 61 FC | 	wrlong	result1, fp
131e8     04 4E 05 F1 | 	add	fp, #4
131ec     A7 FC 61 FC | 	wrlong	result2, fp
131f0     04 4E 05 F1 | 	add	fp, #4
131f4     A7 FE 61 FC | 	wrlong	result3, fp
131f8     08 4E 85 F1 | 	sub	fp, #8
131fc     A7 12 02 F6 | 	mov	arg01, fp
13200     9C 83 BF FD | 	call	#_converttoint
13204     58 FA 61 FD | 	drvl	result1
13208     A7 F0 03 F6 | 	mov	ptra, fp
1320c     B2 00 A0 FD | 	call	#popregs_
13210                 | _do_pinlo_ret
13210     2D 00 64 FD | 	ret
13214                 | 
13214                 | ' 
13214                 | ' '-------------------- pinread
13214                 | ' 
13214                 | ' sub do_pinread
13214                 | _do_pinread
13214     00 4A 05 F6 | 	mov	COUNT_, #0
13218     A8 00 A0 FD | 	call	#pushregs_
1321c     0C F0 07 F1 | 	add	ptra, #12
13220     98 81 BF FD | 	call	#_pop
13224     A7 FA 61 FC | 	wrlong	result1, fp
13228     04 4E 05 F1 | 	add	fp, #4
1322c     A7 FC 61 FC | 	wrlong	result2, fp
13230     04 4E 05 F1 | 	add	fp, #4
13234     A7 FE 61 FC | 	wrlong	result3, fp
13238     08 4E 85 F1 | 	sub	fp, #8
1323c     A7 12 02 F6 | 	mov	arg01, fp
13240     5C 83 BF FD | 	call	#_converttoint
13244     FD 12 02 F6 | 	mov	arg01, result1
13248     20 12 CE F7 | 	test	arg01, #32 wz
1324c     FF FB 01 56 |  if_ne	mov	result1, inb
13250     FE FB 01 A6 |  if_e	mov	result1, ina
13254     09 FB 41 F0 | 	shr	result1, arg01
13258     06 12 46 F0 | 	shr	arg01, #6
1325c     09 FB 41 F7 | 	zerox	result1, arg01
13260     52 00 00 FF 
13264     18 E4 05 F1 | 	add	objptr, ##42008
13268     F2 FA 61 FC | 	wrlong	result1, objptr
1326c     52 00 00 FF 
13270     18 E4 85 F1 | 	sub	objptr, ##42008
13274     08 4E 05 F1 | 	add	fp, #8
13278     A7 3A 68 FC | 	wrlong	#29, fp
1327c     08 4E 85 F1 | 	sub	fp, #8
13280     A7 08 68 FC | 	wrlong	#4, fp
13284     A7 12 02 F6 | 	mov	arg01, fp
13288     C8 81 BF FD | 	call	#_push
1328c     A7 F0 03 F6 | 	mov	ptra, fp
13290     B2 00 A0 FD | 	call	#popregs_
13294                 | _do_pinread_ret
13294     2D 00 64 FD | 	ret
13298                 | 
13298                 | ' 
13298                 | ' '-------------------- pinstart
13298                 | ' 
13298                 | ' sub do_pinstart
13298                 | _do_pinstart
13298     03 4A 05 F6 | 	mov	COUNT_, #3
1329c     A8 00 A0 FD | 	call	#pushregs_
132a0     30 F0 07 F1 | 	add	ptra, #48
132a4     14 81 BF FD | 	call	#_pop
132a8     FD 16 02 F6 | 	mov	arg03, result1
132ac     FE 14 02 F6 | 	mov	arg02, result2
132b0     FF 18 02 F6 | 	mov	arg04, result3
132b4     A7 16 62 FC | 	wrlong	arg03, fp
132b8     04 4E 05 F1 | 	add	fp, #4
132bc     A7 14 62 FC | 	wrlong	arg02, fp
132c0     04 4E 05 F1 | 	add	fp, #4
132c4     A7 18 62 FC | 	wrlong	arg04, fp
132c8     08 4E 85 F1 | 	sub	fp, #8
132cc     EC 80 BF FD | 	call	#_pop
132d0     FD 16 02 F6 | 	mov	arg03, result1
132d4     FE 14 02 F6 | 	mov	arg02, result2
132d8     FF 18 02 F6 | 	mov	arg04, result3
132dc     0C 4E 05 F1 | 	add	fp, #12
132e0     A7 16 62 FC | 	wrlong	arg03, fp
132e4     04 4E 05 F1 | 	add	fp, #4
132e8     A7 14 62 FC | 	wrlong	arg02, fp
132ec     04 4E 05 F1 | 	add	fp, #4
132f0     A7 18 62 FC | 	wrlong	arg04, fp
132f4     14 4E 85 F1 | 	sub	fp, #20
132f8     C0 80 BF FD | 	call	#_pop
132fc     FD 16 02 F6 | 	mov	arg03, result1
13300     FE 14 02 F6 | 	mov	arg02, result2
13304     FF 18 02 F6 | 	mov	arg04, result3
13308     18 4E 05 F1 | 	add	fp, #24
1330c     A7 16 62 FC | 	wrlong	arg03, fp
13310     04 4E 05 F1 | 	add	fp, #4
13314     A7 14 62 FC | 	wrlong	arg02, fp
13318     04 4E 05 F1 | 	add	fp, #4
1331c     A7 18 62 FC | 	wrlong	arg04, fp
13320     20 4E 85 F1 | 	sub	fp, #32
13324     94 80 BF FD | 	call	#_pop
13328     FF 16 02 F6 | 	mov	arg03, result3
1332c     24 4E 05 F1 | 	add	fp, #36
13330     A7 FA 61 FC | 	wrlong	result1, fp
13334     04 4E 05 F1 | 	add	fp, #4
13338     A7 FC 61 FC | 	wrlong	result2, fp
1333c     04 4E 05 F1 | 	add	fp, #4
13340     A7 16 62 FC | 	wrlong	arg03, fp
13344     08 4E 85 F1 | 	sub	fp, #8
13348     A7 12 02 F6 | 	mov	arg01, fp
1334c     24 4E 85 F1 | 	sub	fp, #36
13350     4C 82 BF FD | 	call	#_converttoint
13354     FD 1E 02 F6 | 	mov	local01, result1
13358     18 4E 05 F1 | 	add	fp, #24
1335c     A7 12 02 F6 | 	mov	arg01, fp
13360     18 4E 85 F1 | 	sub	fp, #24
13364     38 82 BF FD | 	call	#_converttoint
13368     FD 20 02 F6 | 	mov	local02, result1
1336c     0C 4E 05 F1 | 	add	fp, #12
13370     A7 12 02 F6 | 	mov	arg01, fp
13374     0C 4E 85 F1 | 	sub	fp, #12
13378     24 82 BF FD | 	call	#_converttoint
1337c     FD 22 02 F6 | 	mov	local03, result1
13380     A7 12 02 F6 | 	mov	arg01, fp
13384     18 82 BF FD | 	call	#_converttoint
13388     40 1E 62 FD | 	dirl	local01
1338c     0F 21 02 FC | 	wrpin	local02, local01
13390     0F 23 12 FC | 	wxpin	local03, local01
13394     0F FB 21 FC | 	wypin	result1, local01
13398     41 1E 62 FD | 	dirh	local01
1339c     A7 F0 03 F6 | 	mov	ptra, fp
133a0     B2 00 A0 FD | 	call	#popregs_
133a4                 | _do_pinstart_ret
133a4     2D 00 64 FD | 	ret
133a8                 | 
133a8                 | ' 
133a8                 | ' '-------------------- pintoggle
133a8                 | ' 
133a8                 | ' sub do_pintoggle
133a8                 | _do_pintoggle
133a8     00 4A 05 F6 | 	mov	COUNT_, #0
133ac     A8 00 A0 FD | 	call	#pushregs_
133b0     0C F0 07 F1 | 	add	ptra, #12
133b4     04 80 BF FD | 	call	#_pop
133b8     A7 FA 61 FC | 	wrlong	result1, fp
133bc     04 4E 05 F1 | 	add	fp, #4
133c0     A7 FC 61 FC | 	wrlong	result2, fp
133c4     04 4E 05 F1 | 	add	fp, #4
133c8     A7 FE 61 FC | 	wrlong	result3, fp
133cc     08 4E 85 F1 | 	sub	fp, #8
133d0     A7 12 02 F6 | 	mov	arg01, fp
133d4     C8 81 BF FD | 	call	#_converttoint
133d8     5F FA 61 FD | 	drvnot	result1
133dc     A7 F0 03 F6 | 	mov	ptra, fp
133e0     B2 00 A0 FD | 	call	#popregs_
133e4                 | _do_pintoggle_ret
133e4     2D 00 64 FD | 	ret
133e8                 | 
133e8                 | ' 
133e8                 | ' '-------------------- pinwrite
133e8                 | ' 
133e8                 | ' sub do_pinwrite
133e8                 | _do_pinwrite
133e8     01 4A 05 F6 | 	mov	COUNT_, #1
133ec     A8 00 A0 FD | 	call	#pushregs_
133f0     18 F0 07 F1 | 	add	ptra, #24
133f4     C4 7F BF FD | 	call	#_pop
133f8     FD 14 02 F6 | 	mov	arg02, result1
133fc     FE 12 02 F6 | 	mov	arg01, result2
13400     FF 1E 02 F6 | 	mov	local01, result3
13404     A7 14 62 FC | 	wrlong	arg02, fp
13408     04 4E 05 F1 | 	add	fp, #4
1340c     A7 12 62 FC | 	wrlong	arg01, fp
13410     04 4E 05 F1 | 	add	fp, #4
13414     A7 1E 62 FC | 	wrlong	local01, fp
13418     08 4E 85 F1 | 	sub	fp, #8
1341c     9C 7F BF FD | 	call	#_pop
13420     FF 1E 02 F6 | 	mov	local01, result3
13424     0C 4E 05 F1 | 	add	fp, #12
13428     A7 FA 61 FC | 	wrlong	result1, fp
1342c     04 4E 05 F1 | 	add	fp, #4
13430     A7 FC 61 FC | 	wrlong	result2, fp
13434     04 4E 05 F1 | 	add	fp, #4
13438     A7 1E 62 FC | 	wrlong	local01, fp
1343c     08 4E 85 F1 | 	sub	fp, #8
13440     A7 12 02 F6 | 	mov	arg01, fp
13444     0C 4E 85 F1 | 	sub	fp, #12
13448     54 81 BF FD | 	call	#_converttoint
1344c     FD 1E 02 F6 | 	mov	local01, result1
13450     A7 12 02 F6 | 	mov	arg01, fp
13454     48 81 BF FD | 	call	#_converttoint
13458     FD 14 02 F6 | 	mov	arg02, result1
1345c     0F 13 02 F6 | 	mov	arg01, local01
13460     94 D5 B0 FD | 	call	#__system___pinwrite
13464     A7 F0 03 F6 | 	mov	ptra, fp
13468     B2 00 A0 FD | 	call	#popregs_
1346c                 | _do_pinwrite_ret
1346c     2D 00 64 FD | 	ret
13470                 | 
13470                 | ' 
13470                 | ' '-------------------- play
13470                 | ' 
13470                 | ' sub do_play
13470                 | _do_play
13470     08 4A 05 F6 | 	mov	COUNT_, #8
13474     A8 00 A0 FD | 	call	#pushregs_
13478     7C F0 07 F1 | 	add	ptra, #124
1347c     68 4E 05 F1 | 	add	fp, #104
13480     77 CC A1 FF 
13484     A7 7C 6B FC | 	wrlong	##1134096318, fp
13488                 | ' speed_coeff=305.873
13488                 | ' 
13488                 | ' for i=0 to 8 : params(i)=-2.0 : next i
13488     64 4E 85 F1 | 	sub	fp, #100
1348c     A7 00 68 FC | 	wrlong	#0, fp
13490     97 18 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
13494                 | LR__1660
13494     A7 16 02 FB | 	rdlong	arg03, fp
13498     02 16 66 F0 | 	shl	arg03, #2
1349c     34 4E 05 F1 | 	add	fp, #52
134a0     A7 16 02 F1 | 	add	arg03, fp
134a4     00 00 E0 FF 
134a8     0B 01 68 FC | 	wrlong	##-1073741824, arg03
134ac     34 4E 85 F1 | 	sub	fp, #52
134b0     A7 1E 02 FB | 	rdlong	local01, fp
134b4     01 1E 06 F1 | 	add	local01, #1
134b8     A7 1E 62 FC | 	wrlong	local01, fp
134bc     09 1E 56 F2 | 	cmps	local01, #9 wc
134c0     D0 FF 9F CD |  if_b	jmp	#LR__1660
134c4                 | LR__1661
134c4     04 4E 85 F1 | 	sub	fp, #4
134c8     4A 00 00 FF 
134cc     80 E4 05 F1 | 	add	objptr, ##38016
134d0     F2 20 02 FB | 	rdlong	local02, objptr
134d4     10 23 02 F6 | 	mov	local03, local02
134d8     01 22 66 F0 | 	shl	local03, #1
134dc     10 23 02 F1 | 	add	local03, local02
134e0     02 22 66 F0 | 	shl	local03, #2
134e4     03 00 00 FF 
134e8     04 E4 85 F1 | 	sub	objptr, ##1540
134ec     F2 22 02 F1 | 	add	local03, objptr
134f0     11 25 02 FB | 	rdlong	local04, local03
134f4     A7 24 62 FC | 	wrlong	local04, fp
134f8                 | ' numpar=compiledline(lineptr_e).result.uresult
134f8                 | ' for i=numpar to 1 step -1 
134f8     04 4E 05 F1 | 	add	fp, #4
134fc     A7 24 62 FC | 	wrlong	local04, fp
13500     04 4E 85 F1 | 	sub	fp, #4
13504     47 00 00 FF 
13508     7C E4 85 F1 | 	sub	objptr, ##36476
1350c                 | LR__1662
1350c     AC 7E BF FD | 	call	#_pop
13510     5C 4E 05 F1 | 	add	fp, #92
13514     A7 FA 61 FC | 	wrlong	result1, fp
13518     04 4E 05 F1 | 	add	fp, #4
1351c     A7 FC 61 FC | 	wrlong	result2, fp
13520     04 4E 05 F1 | 	add	fp, #4
13524     A7 FE 61 FC | 	wrlong	result3, fp
13528     60 4E 85 F1 | 	sub	fp, #96
1352c     A7 22 02 FB | 	rdlong	local03, fp
13530     01 22 86 F1 | 	sub	local03, #1
13534     02 22 66 F0 | 	shl	local03, #2
13538     34 4E 05 F1 | 	add	fp, #52
1353c     A7 22 02 F1 | 	add	local03, fp
13540     24 4E 05 F1 | 	add	fp, #36
13544     A7 26 02 F6 | 	mov	local05, fp
13548     13 13 02 F6 | 	mov	arg01, local05
1354c     5C 4E 85 F1 | 	sub	fp, #92
13550     08 81 BF FD | 	call	#_converttofloat
13554     11 FB 61 FC | 	wrlong	result1, local03
13558     04 4E 05 F1 | 	add	fp, #4
1355c     A7 1E 02 FB | 	rdlong	local01, fp
13560     01 1E 86 F1 | 	sub	local01, #1
13564     A7 1E 62 FC | 	wrlong	local01, fp
13568     04 4E 85 F1 | 	sub	fp, #4
1356c     01 1E 56 F2 | 	cmps	local01, #1 wc
13570     98 FF 9F 3D |  if_ae	jmp	#LR__1662
13574                 | ' 
13574                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
13574     38 4E 05 F1 | 	add	fp, #56
13578     A7 12 02 FB | 	rdlong	arg01, fp
1357c     38 4E 85 F1 | 	sub	fp, #56
13580     00 14 06 F6 | 	mov	arg02, #0
13584     01 16 06 F6 | 	mov	arg03, #1
13588     A0 02 B1 FD | 	call	#__system___float_cmp
1358c     00 FA 55 F2 | 	cmps	result1, #0 wc
13590     0C 4E 05 C1 |  if_b	add	fp, #12
13594     A7 00 68 CC |  if_b	wrlong	#0, fp
13598     0C 4E 85 C1 |  if_b	sub	fp, #12
1359c     2C 00 90 CD |  if_b	jmp	#LR__1663
135a0     38 4E 05 F1 | 	add	fp, #56
135a4     A7 12 02 FB | 	rdlong	arg01, fp
135a8     38 4E 85 F1 | 	sub	fp, #56
135ac     01 14 06 F6 | 	mov	arg02, #1
135b0     0C 03 B1 FD | 	call	#__system___float_tointeger
135b4     FD 1E 52 F6 | 	abs	local01, result1 wc
135b8     07 1E 06 F5 | 	and	local01, #7
135bc     0F 1F 82 F6 | 	negc	local01, local01
135c0     0C 4E 05 F1 | 	add	fp, #12
135c4     A7 1E 62 FC | 	wrlong	local01, fp
135c8     0C 4E 85 F1 | 	sub	fp, #12
135cc                 | LR__1663
135cc                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
135cc     3C 4E 05 F1 | 	add	fp, #60
135d0     A7 12 02 FB | 	rdlong	arg01, fp
135d4     3C 4E 85 F1 | 	sub	fp, #60
135d8     00 14 06 F6 | 	mov	arg02, #0
135dc     01 16 06 F6 | 	mov	arg03, #1
135e0     48 02 B1 FD | 	call	#__system___float_cmp
135e4     00 FA 55 F2 | 	cmps	result1, #0 wc
135e8     40 00 90 3D |  if_ae	jmp	#LR__1664
135ec     0C 4E 05 F1 | 	add	fp, #12
135f0     A7 20 02 FB | 	rdlong	local02, fp
135f4     10 23 02 F6 | 	mov	local03, local02
135f8     01 22 66 F0 | 	shl	local03, #1
135fc     10 23 02 F1 | 	add	local03, local02
13600     03 22 66 F0 | 	shl	local03, #3
13604     14 00 00 FF 
13608     38 E5 05 F1 | 	add	objptr, ##10552
1360c     F2 22 02 F1 | 	add	local03, objptr
13610     11 29 02 FB | 	rdlong	local06, local03
13614     60 4E 05 F1 | 	add	fp, #96
13618     A7 28 62 FC | 	wrlong	local06, fp
1361c     6C 4E 85 F1 | 	sub	fp, #108
13620     14 00 00 FF 
13624     38 E5 85 F1 | 	sub	objptr, ##10552
13628     44 00 90 FD | 	jmp	#LR__1665
1362c                 | LR__1664
1362c     3C 4E 05 F1 | 	add	fp, #60
13630     A7 24 02 FB | 	rdlong	local04, fp
13634     30 4E 05 F1 | 	add	fp, #48
13638     A7 24 62 FC | 	wrlong	local04, fp
1363c     60 4E 85 F1 | 	sub	fp, #96
13640     A7 20 02 FB | 	rdlong	local02, fp
13644     10 23 02 F6 | 	mov	local03, local02
13648     01 22 66 F0 | 	shl	local03, #1
1364c     10 23 02 F1 | 	add	local03, local02
13650     03 22 66 F0 | 	shl	local03, #3
13654     14 00 00 FF 
13658     38 E5 05 F1 | 	add	objptr, ##10552
1365c     F2 22 02 F1 | 	add	local03, objptr
13660     0C 4E 85 F1 | 	sub	fp, #12
13664     11 25 62 FC | 	wrlong	local04, local03
13668     14 00 00 FF 
1366c     38 E5 85 F1 | 	sub	objptr, ##10552
13670                 | LR__1665
13670                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
13670     40 4E 05 F1 | 	add	fp, #64
13674     A7 12 02 FB | 	rdlong	arg01, fp
13678     40 4E 85 F1 | 	sub	fp, #64
1367c     00 14 06 F6 | 	mov	arg02, #0
13680     01 16 06 F6 | 	mov	arg03, #1
13684     A4 01 B1 FD | 	call	#__system___float_cmp
13688     00 FA 55 F2 | 	cmps	result1, #0 wc
1368c     24 00 90 CD |  if_b	jmp	#LR__1666
13690     40 4E 05 F1 | 	add	fp, #64
13694     A7 12 02 FB | 	rdlong	arg01, fp
13698     40 4E 85 F1 | 	sub	fp, #64
1369c     20 0E 23 FF 
136a0     00 14 06 F6 | 	mov	arg02, ##1176256512
136a4     01 16 66 F6 | 	neg	arg03, #1
136a8     80 01 B1 FD | 	call	#__system___float_cmp
136ac     01 FA 55 F2 | 	cmps	result1, #1 wc
136b0     48 00 90 CD |  if_b	jmp	#LR__1667
136b4                 | LR__1666
136b4     0C 4E 05 F1 | 	add	fp, #12
136b8     A7 22 02 FB | 	rdlong	local03, fp
136bc     11 2B 02 F6 | 	mov	local07, local03
136c0     01 2A 66 F0 | 	shl	local07, #1
136c4     11 2B 02 F1 | 	add	local07, local03
136c8     03 2A 66 F0 | 	shl	local07, #3
136cc     14 00 00 FF 
136d0     38 E5 05 F1 | 	add	objptr, ##10552
136d4     F2 2A 02 F1 | 	add	local07, objptr
136d8     06 2A 06 F1 | 	add	local07, #6
136dc     15 27 E2 FA | 	rdword	local05, local07
136e0     13 25 32 F9 | 	getword	local04, local05, #0
136e4     1C 4E 05 F1 | 	add	fp, #28
136e8     A7 24 62 FC | 	wrlong	local04, fp
136ec     28 4E 85 F1 | 	sub	fp, #40
136f0     14 00 00 FF 
136f4     38 E5 85 F1 | 	sub	objptr, ##10552
136f8     54 00 90 FD | 	jmp	#LR__1668
136fc                 | LR__1667
136fc     40 4E 05 F1 | 	add	fp, #64
13700     A7 12 02 FB | 	rdlong	arg01, fp
13704     40 4E 85 F1 | 	sub	fp, #64
13708     01 14 06 F6 | 	mov	arg02, #1
1370c     B0 01 B1 FD | 	call	#__system___float_tointeger
13710     28 4E 05 F1 | 	add	fp, #40
13714     A7 FA 61 FC | 	wrlong	result1, fp
13718     1C 4E 85 F1 | 	sub	fp, #28
1371c     A7 20 02 FB | 	rdlong	local02, fp
13720     10 23 02 F6 | 	mov	local03, local02
13724     01 22 66 F0 | 	shl	local03, #1
13728     10 23 02 F1 | 	add	local03, local02
1372c     03 22 66 F0 | 	shl	local03, #3
13730     14 00 00 FF 
13734     38 E5 05 F1 | 	add	objptr, ##10552
13738     F2 22 02 F1 | 	add	local03, objptr
1373c     0C 4E 85 F1 | 	sub	fp, #12
13740     06 22 06 F1 | 	add	local03, #6
13744     11 FB 51 FC | 	wrword	result1, local03
13748     14 00 00 FF 
1374c     38 E5 85 F1 | 	sub	objptr, ##10552
13750                 | LR__1668
13750                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
13750     44 4E 05 F1 | 	add	fp, #68
13754     A7 12 02 FB | 	rdlong	arg01, fp
13758     44 4E 85 F1 | 	sub	fp, #68
1375c     00 14 06 F6 | 	mov	arg02, #0
13760     01 16 06 F6 | 	mov	arg03, #1
13764     C4 00 B1 FD | 	call	#__system___float_cmp
13768     00 FA 55 F2 | 	cmps	result1, #0 wc
1376c     24 00 90 CD |  if_b	jmp	#LR__1669
13770     44 4E 05 F1 | 	add	fp, #68
13774     A7 12 02 FB | 	rdlong	arg01, fp
13778     44 4E 85 F1 | 	sub	fp, #68
1377c     89 C1 20 FF 
13780     6F 14 06 F6 | 	mov	arg02, ##1099108975
13784     01 16 66 F6 | 	neg	arg03, #1
13788     A0 00 B1 FD | 	call	#__system___float_cmp
1378c     01 FA 55 F2 | 	cmps	result1, #1 wc
13790     44 00 90 CD |  if_b	jmp	#LR__1670
13794                 | LR__1669
13794     0C 4E 05 F1 | 	add	fp, #12
13798     A7 20 02 FB | 	rdlong	local02, fp
1379c     10 23 02 F6 | 	mov	local03, local02
137a0     01 22 66 F0 | 	shl	local03, #1
137a4     10 23 02 F1 | 	add	local03, local02
137a8     03 22 66 F0 | 	shl	local03, #3
137ac     14 00 00 FF 
137b0     38 E5 05 F1 | 	add	objptr, ##10552
137b4     F2 22 02 F1 | 	add	local03, objptr
137b8     0C 22 06 F1 | 	add	local03, #12
137bc     11 29 02 FB | 	rdlong	local06, local03
137c0     68 4E 05 F1 | 	add	fp, #104
137c4     A7 28 62 FC | 	wrlong	local06, fp
137c8     74 4E 85 F1 | 	sub	fp, #116
137cc     14 00 00 FF 
137d0     38 E5 85 F1 | 	sub	objptr, ##10552
137d4     48 00 90 FD | 	jmp	#LR__1671
137d8                 | LR__1670
137d8     44 4E 05 F1 | 	add	fp, #68
137dc     A7 24 02 FB | 	rdlong	local04, fp
137e0     30 4E 05 F1 | 	add	fp, #48
137e4     A7 24 62 FC | 	wrlong	local04, fp
137e8     68 4E 85 F1 | 	sub	fp, #104
137ec     A7 20 02 FB | 	rdlong	local02, fp
137f0     10 23 02 F6 | 	mov	local03, local02
137f4     01 22 66 F0 | 	shl	local03, #1
137f8     10 23 02 F1 | 	add	local03, local02
137fc     03 22 66 F0 | 	shl	local03, #3
13800     14 00 00 FF 
13804     38 E5 05 F1 | 	add	objptr, ##10552
13808     F2 22 02 F1 | 	add	local03, objptr
1380c     0C 4E 85 F1 | 	sub	fp, #12
13810     0C 22 06 F1 | 	add	local03, #12
13814     11 25 62 FC | 	wrlong	local04, local03
13818     14 00 00 FF 
1381c     38 E5 85 F1 | 	sub	objptr, ##10552
13820                 | LR__1671
13820                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
13820     48 4E 05 F1 | 	add	fp, #72
13824     A7 12 02 FB | 	rdlong	arg01, fp
13828     48 4E 85 F1 | 	sub	fp, #72
1382c     00 14 06 F6 | 	mov	arg02, #0
13830     01 16 06 F6 | 	mov	arg03, #1
13834     F4 FF B0 FD | 	call	#__system___float_cmp
13838     00 FA 55 F2 | 	cmps	result1, #0 wc
1383c     24 00 90 CD |  if_b	jmp	#LR__1672
13840     48 4E 05 F1 | 	add	fp, #72
13844     A7 12 02 FB | 	rdlong	arg01, fp
13848     48 4E 85 F1 | 	sub	fp, #72
1384c     00 00 21 FF 
13850     00 14 06 F6 | 	mov	arg02, ##1107296256
13854     01 16 66 F6 | 	neg	arg03, #1
13858     D0 FF B0 FD | 	call	#__system___float_cmp
1385c     01 FA 55 F2 | 	cmps	result1, #1 wc
13860     48 00 90 CD |  if_b	jmp	#LR__1673
13864                 | LR__1672
13864     0C 4E 05 F1 | 	add	fp, #12
13868     A7 22 02 FB | 	rdlong	local03, fp
1386c     11 2B 02 F6 | 	mov	local07, local03
13870     01 2A 66 F0 | 	shl	local07, #1
13874     11 2B 02 F1 | 	add	local07, local03
13878     03 2A 66 F0 | 	shl	local07, #3
1387c     14 00 00 FF 
13880     38 E5 05 F1 | 	add	objptr, ##10552
13884     F2 2A 02 F1 | 	add	local07, objptr
13888     04 2A 06 F1 | 	add	local07, #4
1388c     15 27 C2 FA | 	rdbyte	local05, local07
13890     13 25 E2 F8 | 	getbyte	local04, local05, #0
13894     14 4E 05 F1 | 	add	fp, #20
13898     A7 24 62 FC | 	wrlong	local04, fp
1389c     20 4E 85 F1 | 	sub	fp, #32
138a0     14 00 00 FF 
138a4     38 E5 85 F1 | 	sub	objptr, ##10552
138a8     54 00 90 FD | 	jmp	#LR__1674
138ac                 | LR__1673
138ac     48 4E 05 F1 | 	add	fp, #72
138b0     A7 12 02 FB | 	rdlong	arg01, fp
138b4     48 4E 85 F1 | 	sub	fp, #72
138b8     01 14 06 F6 | 	mov	arg02, #1
138bc     00 00 B1 FD | 	call	#__system___float_tointeger
138c0     20 4E 05 F1 | 	add	fp, #32
138c4     A7 FA 61 FC | 	wrlong	result1, fp
138c8     14 4E 85 F1 | 	sub	fp, #20
138cc     A7 20 02 FB | 	rdlong	local02, fp
138d0     10 23 02 F6 | 	mov	local03, local02
138d4     01 22 66 F0 | 	shl	local03, #1
138d8     10 23 02 F1 | 	add	local03, local02
138dc     03 22 66 F0 | 	shl	local03, #3
138e0     14 00 00 FF 
138e4     38 E5 05 F1 | 	add	objptr, ##10552
138e8     F2 22 02 F1 | 	add	local03, objptr
138ec     0C 4E 85 F1 | 	sub	fp, #12
138f0     04 22 06 F1 | 	add	local03, #4
138f4     11 FB 41 FC | 	wrbyte	result1, local03
138f8     14 00 00 FF 
138fc     38 E5 85 F1 | 	sub	objptr, ##10552
13900                 | LR__1674
13900                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
13900     4C 4E 05 F1 | 	add	fp, #76
13904     A7 12 02 FB | 	rdlong	arg01, fp
13908     4C 4E 85 F1 | 	sub	fp, #76
1390c     00 14 06 F6 | 	mov	arg02, #0
13910     01 16 06 F6 | 	mov	arg03, #1
13914     14 FF B0 FD | 	call	#__system___float_cmp
13918     00 FA 55 F2 | 	cmps	result1, #0 wc
1391c     24 00 90 CD |  if_b	jmp	#LR__1675
13920     4C 4E 05 F1 | 	add	fp, #76
13924     A7 12 02 FB | 	rdlong	arg01, fp
13928     4C 4E 85 F1 | 	sub	fp, #76
1392c     00 80 20 FF 
13930     00 14 06 F6 | 	mov	arg02, ##1090519040
13934     01 16 66 F6 | 	neg	arg03, #1
13938     F0 FE B0 FD | 	call	#__system___float_cmp
1393c     01 FA 55 F2 | 	cmps	result1, #1 wc
13940     48 00 90 CD |  if_b	jmp	#LR__1676
13944                 | LR__1675
13944     0C 4E 05 F1 | 	add	fp, #12
13948     A7 22 02 FB | 	rdlong	local03, fp
1394c     11 2B 02 F6 | 	mov	local07, local03
13950     01 2A 66 F0 | 	shl	local07, #1
13954     11 2B 02 F1 | 	add	local07, local03
13958     03 2A 66 F0 | 	shl	local07, #3
1395c     14 00 00 FF 
13960     38 E5 05 F1 | 	add	objptr, ##10552
13964     F2 2A 02 F1 | 	add	local07, objptr
13968     05 2A 06 F1 | 	add	local07, #5
1396c     15 27 C2 FA | 	rdbyte	local05, local07
13970     13 25 E2 F8 | 	getbyte	local04, local05, #0
13974     18 4E 05 F1 | 	add	fp, #24
13978     A7 24 62 FC | 	wrlong	local04, fp
1397c     24 4E 85 F1 | 	sub	fp, #36
13980     14 00 00 FF 
13984     38 E5 85 F1 | 	sub	objptr, ##10552
13988     54 00 90 FD | 	jmp	#LR__1677
1398c                 | LR__1676
1398c     4C 4E 05 F1 | 	add	fp, #76
13990     A7 12 02 FB | 	rdlong	arg01, fp
13994     4C 4E 85 F1 | 	sub	fp, #76
13998     01 14 06 F6 | 	mov	arg02, #1
1399c     20 FF B0 FD | 	call	#__system___float_tointeger
139a0     24 4E 05 F1 | 	add	fp, #36
139a4     A7 FA 61 FC | 	wrlong	result1, fp
139a8     18 4E 85 F1 | 	sub	fp, #24
139ac     A7 20 02 FB | 	rdlong	local02, fp
139b0     10 23 02 F6 | 	mov	local03, local02
139b4     01 22 66 F0 | 	shl	local03, #1
139b8     10 23 02 F1 | 	add	local03, local02
139bc     03 22 66 F0 | 	shl	local03, #3
139c0     14 00 00 FF 
139c4     38 E5 05 F1 | 	add	objptr, ##10552
139c8     F2 22 02 F1 | 	add	local03, objptr
139cc     0C 4E 85 F1 | 	sub	fp, #12
139d0     05 22 06 F1 | 	add	local03, #5
139d4     11 FB 41 FC | 	wrbyte	result1, local03
139d8     14 00 00 FF 
139dc     38 E5 85 F1 | 	sub	objptr, ##10552
139e0                 | LR__1677
139e0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
139e0     50 4E 05 F1 | 	add	fp, #80
139e4     A7 12 02 FB | 	rdlong	arg01, fp
139e8     50 4E 85 F1 | 	sub	fp, #80
139ec     00 14 06 F6 | 	mov	arg02, #0
139f0     01 16 06 F6 | 	mov	arg03, #1
139f4     34 FE B0 FD | 	call	#__system___float_cmp
139f8     00 FA 55 F2 | 	cmps	result1, #0 wc
139fc     24 00 90 CD |  if_b	jmp	#LR__1678
13a00     50 4E 05 F1 | 	add	fp, #80
13a04     A7 12 02 FB | 	rdlong	arg01, fp
13a08     50 4E 85 F1 | 	sub	fp, #80
13a0c     00 3D 22 FF 
13a10     00 14 06 F6 | 	mov	arg02, ##1148846080
13a14     01 16 66 F6 | 	neg	arg03, #1
13a18     10 FE B0 FD | 	call	#__system___float_cmp
13a1c     01 FA 55 F2 | 	cmps	result1, #1 wc
13a20     44 00 90 CD |  if_b	jmp	#LR__1679
13a24                 | LR__1678
13a24     0C 4E 05 F1 | 	add	fp, #12
13a28     A7 20 02 FB | 	rdlong	local02, fp
13a2c     10 23 02 F6 | 	mov	local03, local02
13a30     01 22 66 F0 | 	shl	local03, #1
13a34     10 23 02 F1 | 	add	local03, local02
13a38     03 22 66 F0 | 	shl	local03, #3
13a3c     14 00 00 FF 
13a40     38 E5 05 F1 | 	add	objptr, ##10552
13a44     F2 22 02 F1 | 	add	local03, objptr
13a48     08 22 06 F1 | 	add	local03, #8
13a4c     11 29 02 FB | 	rdlong	local06, local03
13a50     6C 4E 05 F1 | 	add	fp, #108
13a54     A7 28 62 FC | 	wrlong	local06, fp
13a58     78 4E 85 F1 | 	sub	fp, #120
13a5c     14 00 00 FF 
13a60     38 E5 85 F1 | 	sub	objptr, ##10552
13a64     48 00 90 FD | 	jmp	#LR__1680
13a68                 | LR__1679
13a68     50 4E 05 F1 | 	add	fp, #80
13a6c     A7 28 02 FB | 	rdlong	local06, fp
13a70     28 4E 05 F1 | 	add	fp, #40
13a74     A7 28 62 FC | 	wrlong	local06, fp
13a78     6C 4E 85 F1 | 	sub	fp, #108
13a7c     A7 20 02 FB | 	rdlong	local02, fp
13a80     10 23 02 F6 | 	mov	local03, local02
13a84     01 22 66 F0 | 	shl	local03, #1
13a88     10 23 02 F1 | 	add	local03, local02
13a8c     03 22 66 F0 | 	shl	local03, #3
13a90     14 00 00 FF 
13a94     38 E5 05 F1 | 	add	objptr, ##10552
13a98     F2 22 02 F1 | 	add	local03, objptr
13a9c     0C 4E 85 F1 | 	sub	fp, #12
13aa0     08 22 06 F1 | 	add	local03, #8
13aa4     11 29 62 FC | 	wrlong	local06, local03
13aa8     14 00 00 FF 
13aac     38 E5 85 F1 | 	sub	objptr, ##10552
13ab0                 | LR__1680
13ab0                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
13ab0     54 4E 05 F1 | 	add	fp, #84
13ab4     A7 12 02 FB | 	rdlong	arg01, fp
13ab8     54 4E 85 F1 | 	sub	fp, #84
13abc     00 C0 5F FF 
13ac0     00 14 06 F6 | 	mov	arg02, ##-1082130432
13ac4     01 16 06 F6 | 	mov	arg03, #1
13ac8     60 FD B0 FD | 	call	#__system___float_cmp
13acc     00 FA 55 F2 | 	cmps	result1, #0 wc
13ad0     24 00 90 CD |  if_b	jmp	#LR__1681
13ad4     54 4E 05 F1 | 	add	fp, #84
13ad8     A7 12 02 FB | 	rdlong	arg01, fp
13adc     54 4E 85 F1 | 	sub	fp, #84
13ae0     00 C0 1F FF 
13ae4     00 14 06 F6 | 	mov	arg02, ##1065353216
13ae8     01 16 66 F6 | 	neg	arg03, #1
13aec     3C FD B0 FD | 	call	#__system___float_cmp
13af0     01 FA 55 F2 | 	cmps	result1, #1 wc
13af4     44 00 90 CD |  if_b	jmp	#LR__1682
13af8                 | LR__1681
13af8     0C 4E 05 F1 | 	add	fp, #12
13afc     A7 20 02 FB | 	rdlong	local02, fp
13b00     10 23 02 F6 | 	mov	local03, local02
13b04     01 22 66 F0 | 	shl	local03, #1
13b08     10 23 02 F1 | 	add	local03, local02
13b0c     03 22 66 F0 | 	shl	local03, #3
13b10     14 00 00 FF 
13b14     38 E5 05 F1 | 	add	objptr, ##10552
13b18     F2 22 02 F1 | 	add	local03, objptr
13b1c     10 22 06 F1 | 	add	local03, #16
13b20     11 29 02 FB | 	rdlong	local06, local03
13b24     64 4E 05 F1 | 	add	fp, #100
13b28     A7 28 62 FC | 	wrlong	local06, fp
13b2c     70 4E 85 F1 | 	sub	fp, #112
13b30     14 00 00 FF 
13b34     38 E5 85 F1 | 	sub	objptr, ##10552
13b38     48 00 90 FD | 	jmp	#LR__1683
13b3c                 | LR__1682
13b3c     54 4E 05 F1 | 	add	fp, #84
13b40     A7 28 02 FB | 	rdlong	local06, fp
13b44     1C 4E 05 F1 | 	add	fp, #28
13b48     A7 28 62 FC | 	wrlong	local06, fp
13b4c     64 4E 85 F1 | 	sub	fp, #100
13b50     A7 20 02 FB | 	rdlong	local02, fp
13b54     10 23 02 F6 | 	mov	local03, local02
13b58     01 22 66 F0 | 	shl	local03, #1
13b5c     10 23 02 F1 | 	add	local03, local02
13b60     03 22 66 F0 | 	shl	local03, #3
13b64     14 00 00 FF 
13b68     38 E5 05 F1 | 	add	objptr, ##10552
13b6c     F2 22 02 F1 | 	add	local03, objptr
13b70     0C 4E 85 F1 | 	sub	fp, #12
13b74     10 22 06 F1 | 	add	local03, #16
13b78     11 29 62 FC | 	wrlong	local06, local03
13b7c     14 00 00 FF 
13b80     38 E5 85 F1 | 	sub	objptr, ##10552
13b84                 | LR__1683
13b84                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
13b84     58 4E 05 F1 | 	add	fp, #88
13b88     A7 12 02 FB | 	rdlong	arg01, fp
13b8c     58 4E 85 F1 | 	sub	fp, #88
13b90     00 14 06 F6 | 	mov	arg02, #0
13b94     01 16 06 F6 | 	mov	arg03, #1
13b98     90 FC B0 FD | 	call	#__system___float_cmp
13b9c     00 FA 55 F2 | 	cmps	result1, #0 wc
13ba0     24 00 90 CD |  if_b	jmp	#LR__1684
13ba4     58 4E 05 F1 | 	add	fp, #88
13ba8     A7 12 02 FB | 	rdlong	arg01, fp
13bac     58 4E 85 F1 | 	sub	fp, #88
13bb0     80 BF 21 FF 
13bb4     00 14 06 F6 | 	mov	arg02, ##1132396544
13bb8     01 16 66 F6 | 	neg	arg03, #1
13bbc     6C FC B0 FD | 	call	#__system___float_cmp
13bc0     01 FA 55 F2 | 	cmps	result1, #1 wc
13bc4     44 00 90 CD |  if_b	jmp	#LR__1685
13bc8                 | LR__1684
13bc8     0C 4E 05 F1 | 	add	fp, #12
13bcc     A7 22 02 FB | 	rdlong	local03, fp
13bd0     11 2B 02 F6 | 	mov	local07, local03
13bd4     01 2A 66 F0 | 	shl	local07, #1
13bd8     11 2B 02 F1 | 	add	local07, local03
13bdc     03 2A 66 F0 | 	shl	local07, #3
13be0     14 00 00 FF 
13be4     38 E5 05 F1 | 	add	objptr, ##10552
13be8     F2 2A 02 F1 | 	add	local07, objptr
13bec     14 2A 06 F1 | 	add	local07, #20
13bf0     15 25 E2 FA | 	rdword	local04, local07
13bf4     20 4E 05 F1 | 	add	fp, #32
13bf8     A7 24 62 FC | 	wrlong	local04, fp
13bfc     2C 4E 85 F1 | 	sub	fp, #44
13c00     14 00 00 FF 
13c04     38 E5 85 F1 | 	sub	objptr, ##10552
13c08     54 00 90 FD | 	jmp	#LR__1686
13c0c                 | LR__1685
13c0c     58 4E 05 F1 | 	add	fp, #88
13c10     A7 12 02 FB | 	rdlong	arg01, fp
13c14     58 4E 85 F1 | 	sub	fp, #88
13c18     01 14 06 F6 | 	mov	arg02, #1
13c1c     A0 FC B0 FD | 	call	#__system___float_tointeger
13c20     2C 4E 05 F1 | 	add	fp, #44
13c24     A7 FA 61 FC | 	wrlong	result1, fp
13c28     20 4E 85 F1 | 	sub	fp, #32
13c2c     A7 20 02 FB | 	rdlong	local02, fp
13c30     10 23 02 F6 | 	mov	local03, local02
13c34     01 22 66 F0 | 	shl	local03, #1
13c38     10 23 02 F1 | 	add	local03, local02
13c3c     03 22 66 F0 | 	shl	local03, #3
13c40     14 00 00 FF 
13c44     38 E5 05 F1 | 	add	objptr, ##10552
13c48     F2 22 02 F1 | 	add	local03, objptr
13c4c     0C 4E 85 F1 | 	sub	fp, #12
13c50     14 22 06 F1 | 	add	local03, #20
13c54     11 FB 51 FC | 	wrword	result1, local03
13c58     14 00 00 FF 
13c5c     38 E5 85 F1 | 	sub	objptr, ##10552
13c60                 | LR__1686
13c60     6C 4E 05 F1 | 	add	fp, #108
13c64     A7 14 02 FB | 	rdlong	arg02, fp
13c68     6C 4E 85 F1 | 	sub	fp, #108
13c6c     FC 16 20 FF 
13c70     54 12 06 F6 | 	mov	arg01, ##1076754516
13c74     50 07 B1 FD | 	call	#__system____builtin_logbase
13c78     FD 24 02 F6 | 	mov	local04, result1
13c7c     1E 14 C6 F9 | 	decod	arg02, #30
13c80     FC 16 20 FF 
13c84     54 12 06 F6 | 	mov	arg01, ##1076754516
13c88     3C 07 B1 FD | 	call	#__system____builtin_logbase
13c8c     FD 14 02 F6 | 	mov	arg02, result1
13c90     12 13 02 F6 | 	mov	arg01, local04
13c94     64 F9 B0 FD | 	call	#__system___float_div
13c98     FD 12 02 F6 | 	mov	arg01, result1
13c9c     00 14 06 F6 | 	mov	arg02, #0
13ca0     1C FC B0 FD | 	call	#__system___float_tointeger
13ca4     30 4E 05 F1 | 	add	fp, #48
13ca8     A7 FA 61 FC | 	wrlong	result1, fp
13cac     1E 24 C6 F9 | 	decod	local04, #30
13cb0     FD 12 02 F6 | 	mov	arg01, result1
13cb4     30 4E 85 F1 | 	sub	fp, #48
13cb8     05 12 06 F1 | 	add	arg01, #5
13cbc     09 13 52 F6 | 	abs	arg01, arg01 wc
13cc0     1F 2C C6 C9 |  if_b	decod	local08, #31
13cc4     00 2C 06 36 |  if_ae	mov	local08, #0
13cc8     28 F3 B0 FD | 	call	#__system___float_fromuns
13ccc     16 FB 61 F5 | 	xor	result1, local08
13cd0     FD 14 02 F6 | 	mov	arg02, result1
13cd4     12 13 02 F6 | 	mov	arg01, local04
13cd8     24 06 B1 FD | 	call	#__system____builtin_powf
13cdc     FD 12 02 F6 | 	mov	arg01, result1
13ce0     01 14 06 F6 | 	mov	arg02, #1
13ce4     D8 FB B0 FD | 	call	#__system___float_tointeger
13ce8     10 4E 05 F1 | 	add	fp, #16
13cec     A7 FA 61 FC | 	wrlong	result1, fp
13cf0                 | ' skip=round(2^(lfreq+5))
13cf0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
13cf0     10 4E 85 F1 | 	sub	fp, #16
13cf4     40 00 00 FF 
13cf8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
13cfc     30 00 90 CD |  if_b	jmp	#LR__1687
13d00     10 4E 05 F1 | 	add	fp, #16
13d04     A7 1E 02 FB | 	rdlong	local01, fp
13d08     0F 25 52 F6 | 	abs	local04, local01 wc
13d0c     0F 24 46 F0 | 	shr	local04, #15
13d10     12 25 82 F6 | 	negc	local04, local04
13d14     0C 4E 85 F1 | 	sub	fp, #12
13d18     A7 24 62 FC | 	wrlong	local04, fp
13d1c     0C 4E 05 F1 | 	add	fp, #12
13d20     40 00 80 FF 
13d24     A7 00 68 FC | 	wrlong	##32768, fp
13d28     10 4E 85 F1 | 	sub	fp, #16
13d2c     0C 00 90 FD | 	jmp	#LR__1688
13d30                 | LR__1687
13d30     04 4E 05 F1 | 	add	fp, #4
13d34     A7 02 68 FC | 	wrlong	#1, fp
13d38     04 4E 85 F1 | 	sub	fp, #4
13d3c                 | LR__1688
13d3c     6C 4E 05 F1 | 	add	fp, #108
13d40     A7 14 02 FB | 	rdlong	arg02, fp
13d44     6C 4E 85 F1 | 	sub	fp, #108
13d48     3E 2C 25 FF 
13d4c     3C 12 06 F6 | 	mov	arg01, ##1247312956
13d50     A8 F8 B0 FD | 	call	#__system___float_div
13d54     FD 24 02 F6 | 	mov	local04, result1
13d58     04 4E 05 F1 | 	add	fp, #4
13d5c     A7 12 02 FB | 	rdlong	arg01, fp
13d60     04 4E 85 F1 | 	sub	fp, #4
13d64     09 13 52 F6 | 	abs	arg01, arg01 wc
13d68     1F 2C C6 C9 |  if_b	decod	local08, #31
13d6c     00 2C 06 36 |  if_ae	mov	local08, #0
13d70     80 F2 B0 FD | 	call	#__system___float_fromuns
13d74     16 FB 61 F5 | 	xor	result1, local08
13d78     FD 1E 02 F6 | 	mov	local01, result1
13d7c     1E 20 C6 F9 | 	decod	local02, #30
13d80     0D 12 06 F6 | 	mov	arg01, #13
13d84     30 4E 05 F1 | 	add	fp, #48
13d88     A7 28 02 FB | 	rdlong	local06, fp
13d8c     30 4E 85 F1 | 	sub	fp, #48
13d90     14 13 82 F1 | 	sub	arg01, local06
13d94     09 13 52 F6 | 	abs	arg01, arg01 wc
13d98     1F 2C C6 C9 |  if_b	decod	local08, #31
13d9c     00 2C 06 36 |  if_ae	mov	local08, #0
13da0     50 F2 B0 FD | 	call	#__system___float_fromuns
13da4     16 FB 61 F5 | 	xor	result1, local08
13da8     FD 14 02 F6 | 	mov	arg02, result1
13dac     10 13 02 F6 | 	mov	arg01, local02
13db0     4C 05 B1 FD | 	call	#__system____builtin_powf
13db4     FD 14 02 F6 | 	mov	arg02, result1
13db8     0F 13 02 F6 | 	mov	arg01, local01
13dbc     38 F6 B0 FD | 	call	#__system___float_mul
13dc0     FD 14 02 F6 | 	mov	arg02, result1
13dc4     12 13 02 F6 | 	mov	arg01, local04
13dc8     30 F8 B0 FD | 	call	#__system___float_div
13dcc     FD 12 02 F6 | 	mov	arg01, result1
13dd0     01 14 06 F6 | 	mov	arg02, #1
13dd4     E8 FA B0 FD | 	call	#__system___float_tointeger
13dd8     34 4E 05 F1 | 	add	fp, #52
13ddc     A7 FA 61 FC | 	wrlong	result1, fp
13de0     34 4E 05 F1 | 	add	fp, #52
13de4     A7 12 02 FB | 	rdlong	arg01, fp
13de8     10 4E 05 F1 | 	add	fp, #16
13dec     A7 14 02 FB | 	rdlong	arg02, fp
13df0     78 4E 85 F1 | 	sub	fp, #120
13df4     04 F8 B0 FD | 	call	#__system___float_div
13df8     FD 12 02 F6 | 	mov	arg01, result1
13dfc     01 14 06 F6 | 	mov	arg02, #1
13e00     BC FA B0 FD | 	call	#__system___float_tointeger
13e04     FD 24 02 F6 | 	mov	local04, result1
13e08     14 4E 05 F1 | 	add	fp, #20
13e0c     A7 24 62 FC | 	wrlong	local04, fp
13e10     5C 4E 05 F1 | 	add	fp, #92
13e14     A7 14 02 FB | 	rdlong	arg02, fp
13e18     70 4E 85 F1 | 	sub	fp, #112
13e1c     00 00 23 FF 
13e20     00 12 06 F6 | 	mov	arg01, ##1174405120
13e24     D0 F5 B0 FD | 	call	#__system___float_mul
13e28     FD 12 02 F6 | 	mov	arg01, result1
13e2c     01 14 06 F6 | 	mov	arg02, #1
13e30     8C FA B0 FD | 	call	#__system___float_tointeger
13e34     0D 24 C6 F9 | 	decod	local04, #13
13e38     FD 24 02 F1 | 	add	local04, result1
13e3c     18 4E 05 F1 | 	add	fp, #24
13e40     A7 24 62 FC | 	wrlong	local04, fp
13e44     5C 4E 05 F1 | 	add	fp, #92
13e48     A7 14 02 FB | 	rdlong	arg02, fp
13e4c     74 4E 85 F1 | 	sub	fp, #116
13e50     00 3D 22 FF 
13e54     00 12 06 F6 | 	mov	arg01, ##1148846080
13e58     9C F5 B0 FD | 	call	#__system___float_mul
13e5c     FD 12 02 F6 | 	mov	arg01, result1
13e60     01 14 06 F6 | 	mov	arg02, #1
13e64     58 FA B0 FD | 	call	#__system___float_tointeger
13e68     1C 4E 05 F1 | 	add	fp, #28
13e6c     A7 FA 61 FC | 	wrlong	result1, fp
13e70     37 00 00 FF 
13e74     10 E4 05 F1 | 	add	objptr, ##28176
13e78     F2 24 02 FB | 	rdlong	local04, objptr
13e7c     37 00 00 FF 
13e80     10 E4 85 F1 | 	sub	objptr, ##28176
13e84     10 4E 85 F1 | 	sub	fp, #16
13e88     A7 20 02 FB | 	rdlong	local02, fp
13e8c     06 20 66 F0 | 	shl	local02, #6
13e90     10 25 02 F1 | 	add	local04, local02
13e94     04 4E 85 F1 | 	sub	fp, #4
13e98     A7 24 62 FC | 	wrlong	local04, fp
13e9c                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
13e9c                 | ' speed=round(speed_coeff/slen)
13e9c                 | ' ipan=8192+round(8192*pan)
13e9c                 | ' ivol=round(1000.0*vol)
13e9c                 | ' base2=base+64*channel
13e9c                 | ' if wave <32 then 
13e9c     18 4E 05 F1 | 	add	fp, #24
13ea0     A7 24 02 FB | 	rdlong	local04, fp
13ea4     20 4E 85 F1 | 	sub	fp, #32
13ea8     20 24 56 F2 | 	cmps	local04, #32 wc
13eac     2C 00 90 3D |  if_ae	jmp	#LR__1689
13eb0     08 4E 05 F1 | 	add	fp, #8
13eb4     A7 12 02 FB | 	rdlong	arg01, fp
13eb8     08 12 06 F1 | 	add	arg01, #8
13ebc     18 4E 05 F1 | 	add	fp, #24
13ec0     A7 14 02 FB | 	rdlong	arg02, fp
13ec4     20 4E 85 F1 | 	sub	fp, #32
13ec8     0B 14 66 F0 | 	shl	arg02, #11
13ecc     00 00 60 FF 
13ed0     00 14 06 F1 | 	add	arg02, ##-1073741824
13ed4     09 15 62 FC | 	wrlong	arg02, arg01
13ed8     18 00 90 FD | 	jmp	#LR__1690
13edc                 | LR__1689
13edc     08 4E 05 F1 | 	add	fp, #8
13ee0     A7 12 02 FB | 	rdlong	arg01, fp
13ee4     08 4E 85 F1 | 	sub	fp, #8
13ee8     08 12 06 F1 | 	add	arg01, #8
13eec     00 00 E4 FF 
13ef0     09 01 68 FC | 	wrlong	##-939524096, arg01
13ef4                 | LR__1690
13ef4     08 4E 05 F1 | 	add	fp, #8
13ef8     A7 12 02 FB | 	rdlong	arg01, fp
13efc     10 12 06 F1 | 	add	arg01, #16
13f00     04 00 80 FF 
13f04     09 01 68 FC | 	wrlong	##2048, arg01
13f08     A7 12 02 FB | 	rdlong	arg01, fp
13f0c     0C 12 06 F1 | 	add	arg01, #12
13f10     09 01 68 FC | 	wrlong	#0, arg01
13f14     A7 12 02 FB | 	rdlong	arg01, fp
13f18     14 12 06 F1 | 	add	arg01, #20
13f1c     14 4E 05 F1 | 	add	fp, #20
13f20     A7 14 02 FB | 	rdlong	arg02, fp
13f24     09 15 52 FC | 	wrword	arg02, arg01
13f28     14 4E 85 F1 | 	sub	fp, #20
13f2c     A7 12 02 FB | 	rdlong	arg01, fp
13f30     16 12 06 F1 | 	add	arg01, #22
13f34     10 4E 05 F1 | 	add	fp, #16
13f38     A7 14 02 FB | 	rdlong	arg02, fp
13f3c     09 15 52 FC | 	wrword	arg02, arg01
13f40                 | ' lpoke base2+16,2048
13f40                 | ' lpoke base2+12,0
13f40                 | ' dpoke base2+20,ivol 
13f40                 | ' dpoke base2+22,ipan 
13f40                 | ' if wave<32 then
13f40     08 4E 05 F1 | 	add	fp, #8
13f44     A7 24 02 FB | 	rdlong	local04, fp
13f48     20 4E 85 F1 | 	sub	fp, #32
13f4c     20 24 56 F2 | 	cmps	local04, #32 wc
13f50     38 00 90 3D |  if_ae	jmp	#LR__1691
13f54     08 4E 05 F1 | 	add	fp, #8
13f58     A7 12 02 FB | 	rdlong	arg01, fp
13f5c     18 12 06 F1 | 	add	arg01, #24
13f60     2C 4E 05 F1 | 	add	fp, #44
13f64     A7 14 02 FB | 	rdlong	arg02, fp
13f68     09 15 52 FC | 	wrword	arg02, arg01
13f6c     2C 4E 85 F1 | 	sub	fp, #44
13f70     A7 12 02 FB | 	rdlong	arg01, fp
13f74     1A 12 06 F1 | 	add	arg01, #26
13f78     08 4E 05 F1 | 	add	fp, #8
13f7c     A7 14 02 FB | 	rdlong	arg02, fp
13f80     10 4E 85 F1 | 	sub	fp, #16
13f84     09 15 52 FC | 	wrword	arg02, arg01
13f88     48 00 90 FD | 	jmp	#LR__1692
13f8c                 | LR__1691
13f8c     08 4E 05 F1 | 	add	fp, #8
13f90     A7 24 02 FB | 	rdlong	local04, fp
13f94     18 24 06 F1 | 	add	local04, #24
13f98     64 4E 05 F1 | 	add	fp, #100
13f9c     A7 14 02 FB | 	rdlong	arg02, fp
13fa0     6C 4E 85 F1 | 	sub	fp, #108
13fa4     3E 2C 25 FF 
13fa8     3C 12 06 F6 | 	mov	arg01, ##1247312956
13fac     4C F6 B0 FD | 	call	#__system___float_div
13fb0     FD 12 02 F6 | 	mov	arg01, result1
13fb4     01 14 06 F6 | 	mov	arg02, #1
13fb8     04 F9 B0 FD | 	call	#__system___float_tointeger
13fbc     12 FB 51 FC | 	wrword	result1, local04
13fc0     08 4E 05 F1 | 	add	fp, #8
13fc4     A7 12 02 FB | 	rdlong	arg01, fp
13fc8     08 4E 85 F1 | 	sub	fp, #8
13fcc     1A 12 06 F1 | 	add	arg01, #26
13fd0     09 01 5A FC | 	wrword	#256, arg01
13fd4                 | LR__1692
13fd4     08 4E 05 F1 | 	add	fp, #8
13fd8     A7 12 02 FB | 	rdlong	arg01, fp
13fdc     1C 12 06 F1 | 	add	arg01, #28
13fe0     09 01 68 FC | 	wrlong	#0, arg01
13fe4     A7 12 02 FB | 	rdlong	arg01, fp
13fe8     20 12 06 F1 | 	add	arg01, #32
13fec     09 01 68 FC | 	wrlong	#0, arg01
13ff0                 | ' lpoke base2+28,$0000_0000
13ff0                 | ' lpoke base2+32,0 
13ff0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
13ff0     1C 4E 05 F1 | 	add	fp, #28
13ff4     A7 24 02 FB | 	rdlong	local04, fp
13ff8     24 4E 85 F1 | 	sub	fp, #36
13ffc     08 24 0E F2 | 	cmp	local04, #8 wz
14000     18 00 90 5D |  if_ne	jmp	#LR__1693
14004     08 4E 05 F1 | 	add	fp, #8
14008     A7 12 02 FB | 	rdlong	arg01, fp
1400c     08 4E 85 F1 | 	sub	fp, #8
14010     24 12 06 F1 | 	add	arg01, #36
14014     09 01 68 FC | 	wrlong	#0, arg01
14018     34 00 90 FD | 	jmp	#LR__1694
1401c                 | LR__1693
1401c     08 4E 05 F1 | 	add	fp, #8
14020     A7 12 02 FB | 	rdlong	arg01, fp
14024     24 12 06 F1 | 	add	arg01, #36
14028     1C 4E 05 F1 | 	add	fp, #28
1402c     A7 14 02 FB | 	rdlong	arg02, fp
14030     24 4E 85 F1 | 	sub	fp, #36
14034     09 14 66 F0 | 	shl	arg02, #9
14038     0C 00 00 FF 
1403c     D8 E4 05 F1 | 	add	objptr, ##6360
14040     F2 14 02 F1 | 	add	arg02, objptr
14044     0C 00 00 FF 
14048     D8 E4 85 F1 | 	sub	objptr, ##6360
1404c     09 15 62 FC | 	wrlong	arg02, arg01
14050                 | LR__1694
14050     08 4E 05 F1 | 	add	fp, #8
14054     A7 12 02 FB | 	rdlong	arg01, fp
14058     28 12 06 F1 | 	add	arg01, #40
1405c     0C 4E 05 F1 | 	add	fp, #12
14060     A7 14 02 FB | 	rdlong	arg02, fp
14064     09 15 62 FC | 	wrlong	arg02, arg01
14068     0C 4E 85 F1 | 	sub	fp, #12
1406c     A7 12 02 FB | 	rdlong	arg01, fp
14070     2C 12 06 F1 | 	add	arg01, #44
14074     24 4E 05 F1 | 	add	fp, #36
14078     A7 14 02 FB | 	rdlong	arg02, fp
1407c     09 15 62 FC | 	wrlong	arg02, arg01
14080                 | ' lpoke base2+40,speed 
14080                 | ' lpoke base2+44,sus 
14080                 | ' if delay>0 then waitms(delay) 
14080     04 4E 85 F1 | 	sub	fp, #4
14084     A7 24 02 FB | 	rdlong	local04, fp
14088     28 4E 85 F1 | 	sub	fp, #40
1408c     01 24 56 F2 | 	cmps	local04, #1 wc
14090     28 4E 05 31 |  if_ae	add	fp, #40
14094     A7 12 02 3B |  if_ae	rdlong	arg01, fp
14098     28 4E 85 31 |  if_ae	sub	fp, #40
1409c     98 CA B0 3D |  if_ae	call	#__system___waitms
140a0     A7 F0 03 F6 | 	mov	ptra, fp
140a4     B2 00 A0 FD | 	call	#popregs_
140a8                 | _do_play_ret
140a8     2D 00 64 FD | 	ret
140ac                 | 
140ac                 | ' 
140ac                 | ' '-------------------- plot
140ac                 | ' 
140ac                 | ' sub do_plot
140ac                 | _do_plot
140ac     00 4A 05 F6 | 	mov	COUNT_, #0
140b0     A8 00 A0 FD | 	call	#pushregs_
140b4     20 F0 07 F1 | 	add	ptra, #32
140b8     00 73 BF FD | 	call	#_pop
140bc     FD 16 02 F6 | 	mov	arg03, result1
140c0     FE 14 02 F6 | 	mov	arg02, result2
140c4     FF 12 02 F6 | 	mov	arg01, result3
140c8     0C 4E 05 F1 | 	add	fp, #12
140cc     A7 16 62 FC | 	wrlong	arg03, fp
140d0     04 4E 05 F1 | 	add	fp, #4
140d4     A7 14 62 FC | 	wrlong	arg02, fp
140d8     04 4E 05 F1 | 	add	fp, #4
140dc     A7 12 62 FC | 	wrlong	arg01, fp
140e0     14 4E 85 F1 | 	sub	fp, #20
140e4     D4 72 BF FD | 	call	#_pop
140e8     FF 16 02 F6 | 	mov	arg03, result3
140ec     A7 FA 61 FC | 	wrlong	result1, fp
140f0     04 4E 05 F1 | 	add	fp, #4
140f4     A7 FC 61 FC | 	wrlong	result2, fp
140f8     04 4E 05 F1 | 	add	fp, #4
140fc     A7 16 62 FC | 	wrlong	arg03, fp
14100     08 4E 85 F1 | 	sub	fp, #8
14104     A7 12 02 F6 | 	mov	arg01, fp
14108     94 74 BF FD | 	call	#_converttoint
1410c     18 4E 05 F1 | 	add	fp, #24
14110     A7 FA 61 FC | 	wrlong	result1, fp
14114     0C 4E 85 F1 | 	sub	fp, #12
14118     A7 12 02 F6 | 	mov	arg01, fp
1411c     0C 4E 85 F1 | 	sub	fp, #12
14120     7C 74 BF FD | 	call	#_converttoint
14124     1C 4E 05 F1 | 	add	fp, #28
14128     A7 FA 61 FC | 	wrlong	result1, fp
1412c     04 4E 85 F1 | 	sub	fp, #4
14130     A7 16 02 FB | 	rdlong	arg03, fp
14134     37 00 00 FF 
14138     2C E4 05 F1 | 	add	objptr, ##28204
1413c     F2 16 62 FC | 	wrlong	arg03, objptr
14140     04 4E 05 F1 | 	add	fp, #4
14144     A7 14 02 FB | 	rdlong	arg02, fp
14148     1C 4E 85 F1 | 	sub	fp, #28
1414c     04 E4 05 F1 | 	add	objptr, #4
14150     F2 14 62 FC | 	wrlong	arg02, objptr
14154     04 E4 85 F1 | 	sub	objptr, #4
14158     F2 12 02 FB | 	rdlong	arg01, objptr
1415c     04 E4 85 F1 | 	sub	objptr, #4
14160     F2 16 02 FB | 	rdlong	arg03, objptr
14164     37 00 00 FF 
14168     28 E4 85 F1 | 	sub	objptr, ##28200
1416c     24 A1 B0 FD | 	call	#_hg010b_spin2_putpixel
14170     A7 F0 03 F6 | 	mov	ptra, fp
14174     B2 00 A0 FD | 	call	#popregs_
14178                 | _do_plot_ret
14178     2D 00 64 FD | 	ret
1417c                 | 
1417c                 | ' 
1417c                 | ' '-------------------- poke
1417c                 | ' 
1417c                 | ' sub do_poke
1417c                 | _do_poke
1417c     01 4A 05 F6 | 	mov	COUNT_, #1
14180     A8 00 A0 FD | 	call	#pushregs_
14184     20 F0 07 F1 | 	add	ptra, #32
14188     30 72 BF FD | 	call	#_pop
1418c     FD 14 02 F6 | 	mov	arg02, result1
14190     FE 12 02 F6 | 	mov	arg01, result2
14194     FF 1E 02 F6 | 	mov	local01, result3
14198     A7 14 62 FC | 	wrlong	arg02, fp
1419c     04 4E 05 F1 | 	add	fp, #4
141a0     A7 12 62 FC | 	wrlong	arg01, fp
141a4     04 4E 05 F1 | 	add	fp, #4
141a8     A7 1E 62 FC | 	wrlong	local01, fp
141ac     08 4E 85 F1 | 	sub	fp, #8
141b0     08 72 BF FD | 	call	#_pop
141b4     FF 1E 02 F6 | 	mov	local01, result3
141b8     0C 4E 05 F1 | 	add	fp, #12
141bc     A7 FA 61 FC | 	wrlong	result1, fp
141c0     04 4E 05 F1 | 	add	fp, #4
141c4     A7 FC 61 FC | 	wrlong	result2, fp
141c8     04 4E 05 F1 | 	add	fp, #4
141cc     A7 1E 62 FC | 	wrlong	local01, fp
141d0     08 4E 85 F1 | 	sub	fp, #8
141d4     A7 12 02 F6 | 	mov	arg01, fp
141d8     0C 4E 85 F1 | 	sub	fp, #12
141dc     C0 73 BF FD | 	call	#_converttoint
141e0     18 4E 05 F1 | 	add	fp, #24
141e4     A7 FA 61 FC | 	wrlong	result1, fp
141e8     18 4E 85 F1 | 	sub	fp, #24
141ec     A7 12 02 F6 | 	mov	arg01, fp
141f0     AC 73 BF FD | 	call	#_converttoint
141f4     1C 4E 05 F1 | 	add	fp, #28
141f8     A7 FA 61 FC | 	wrlong	result1, fp
141fc                 | ' t1=pop() 'value
141fc                 | ' t2=pop() 
141fc                 | ' a=converttoint(t2) : v=converttoint(t1)
141fc                 | ' if a<$80000 then poke a,v else pspoke a,v
141fc     04 4E 85 F1 | 	sub	fp, #4
14200     A7 1E 02 FB | 	rdlong	local01, fp
14204     18 4E 85 F1 | 	sub	fp, #24
14208     00 04 00 FF 
1420c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
14210     1C 00 90 3D |  if_ae	jmp	#LR__1700
14214     18 4E 05 F1 | 	add	fp, #24
14218     A7 12 02 FB | 	rdlong	arg01, fp
1421c     04 4E 05 F1 | 	add	fp, #4
14220     A7 14 02 FB | 	rdlong	arg02, fp
14224     1C 4E 85 F1 | 	sub	fp, #28
14228     09 15 42 FC | 	wrbyte	arg02, arg01
1422c     18 00 90 FD | 	jmp	#LR__1701
14230                 | LR__1700
14230     18 4E 05 F1 | 	add	fp, #24
14234     A7 12 02 FB | 	rdlong	arg01, fp
14238     04 4E 05 F1 | 	add	fp, #4
1423c     A7 14 02 FB | 	rdlong	arg02, fp
14240     1C 4E 85 F1 | 	sub	fp, #28
14244     60 92 B0 FD | 	call	#_pspoke
14248                 | LR__1701
14248     A7 F0 03 F6 | 	mov	ptra, fp
1424c     B2 00 A0 FD | 	call	#popregs_
14250                 | _do_poke_ret
14250     2D 00 64 FD | 	ret
14254                 | 
14254                 | ' 
14254                 | ' '-------------------- pop
14254                 | ' 
14254                 | ' sub do_pop()
14254                 | _do_pop
14254                 | ' if gosubtop>0 then  gosubtop -=1 
14254     50 00 00 FF 
14258     0C E5 05 F1 | 	add	objptr, ##41228
1425c     F2 00 02 FB | 	rdlong	_var01, objptr
14260     50 00 00 FF 
14264     0C E5 85 F1 | 	sub	objptr, ##41228
14268     01 00 56 F2 | 	cmps	_var01, #1 wc
1426c     50 00 00 3F 
14270     0C E5 05 31 |  if_ae	add	objptr, ##41228
14274     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
14278     01 00 86 31 |  if_ae	sub	_var01, #1
1427c     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
14280     50 00 00 3F 
14284     0C E5 85 31 |  if_ae	sub	objptr, ##41228
14288                 | _do_pop_ret
14288     2D 00 64 FD | 	ret
1428c                 | 
1428c                 | ' 
1428c                 | ' '-------------------- position
1428c                 | ' 
1428c                 | ' sub do_position
1428c                 | _do_position
1428c     01 4A 05 F6 | 	mov	COUNT_, #1
14290     A8 00 A0 FD | 	call	#pushregs_
14294     18 F0 07 F1 | 	add	ptra, #24
14298     20 71 BF FD | 	call	#_pop
1429c     FD 14 02 F6 | 	mov	arg02, result1
142a0     FE 12 02 F6 | 	mov	arg01, result2
142a4     FF 1E 02 F6 | 	mov	local01, result3
142a8     A7 14 62 FC | 	wrlong	arg02, fp
142ac     04 4E 05 F1 | 	add	fp, #4
142b0     A7 12 62 FC | 	wrlong	arg01, fp
142b4     04 4E 05 F1 | 	add	fp, #4
142b8     A7 1E 62 FC | 	wrlong	local01, fp
142bc     08 4E 85 F1 | 	sub	fp, #8
142c0     F8 70 BF FD | 	call	#_pop
142c4     FF 1E 02 F6 | 	mov	local01, result3
142c8     0C 4E 05 F1 | 	add	fp, #12
142cc     A7 FA 61 FC | 	wrlong	result1, fp
142d0     04 4E 05 F1 | 	add	fp, #4
142d4     A7 FC 61 FC | 	wrlong	result2, fp
142d8     04 4E 05 F1 | 	add	fp, #4
142dc     A7 1E 62 FC | 	wrlong	local01, fp
142e0     08 4E 85 F1 | 	sub	fp, #8
142e4     A7 12 02 F6 | 	mov	arg01, fp
142e8     0C 4E 85 F1 | 	sub	fp, #12
142ec     B0 72 BF FD | 	call	#_converttoint
142f0     FD 1E 02 F6 | 	mov	local01, result1
142f4     A7 12 02 F6 | 	mov	arg01, fp
142f8     A4 72 BF FD | 	call	#_converttoint
142fc     FD 14 02 F6 | 	mov	arg02, result1
14300     0F 13 02 F6 | 	mov	arg01, local01
14304     50 AB B0 FD | 	call	#_hg010b_spin2_setcursorpos
14308     A7 F0 03 F6 | 	mov	ptra, fp
1430c     B2 00 A0 FD | 	call	#popregs_
14310                 | _do_position_ret
14310     2D 00 64 FD | 	ret
14314                 | 
14314                 | ' 
14314                 | ' '-------------------- print
14314                 | ' 
14314                 | ' sub do_print  
14314                 | _do_print
14314     0B 4A 05 F6 | 	mov	COUNT_, #11
14318     A8 00 A0 FD | 	call	#pushregs_
1431c     00 24 06 F6 | 	mov	local04, #0
14320     98 70 BF FD | 	call	#_pop
14324     FD 26 02 F6 | 	mov	local05, result1
14328     FE 28 02 F6 | 	mov	local06, result2
1432c     FF 2A 02 F6 | 	mov	local07, result3
14330     13 1F 02 F6 | 	mov	local01, local05
14334     14 21 02 F6 | 	mov	local02, local06
14338     15 23 02 F6 | 	mov	local03, local07
1433c                 | '  
1433c                 | ' r=0
1433c                 | ' t1=pop() 
1433c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1433c     21 22 0E F2 | 	cmp	local03, #33 wz
14340     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14344     20 00 90 5D |  if_ne	jmp	#LR__1710
14348     11 25 02 F6 | 	mov	local04, local03
1434c     6C 70 BF FD | 	call	#_pop
14350     FD 26 02 F6 | 	mov	local05, result1
14354     FE 28 02 F6 | 	mov	local06, result2
14358     FF 2A 02 F6 | 	mov	local07, result3
1435c     13 1F 02 F6 | 	mov	local01, local05
14360     14 21 02 F6 | 	mov	local02, local06
14364     15 23 02 F6 | 	mov	local03, local07
14368                 | LR__1710
14368                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14368     20 22 0E F2 | 	cmp	local03, #32 wz
1436c     11 25 02 A6 |  if_e	mov	local04, local03
14370                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14370     FF 22 0E F2 | 	cmp	local03, #255 wz
14374     0C 00 90 5D |  if_ne	jmp	#LR__1711
14378     0F 13 02 F6 | 	mov	arg01, local01
1437c     34 8F B0 FD | 	call	#_printerror
14380     D4 04 90 FD | 	jmp	#LR__1730
14384                 | LR__1711
14384                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
14384     2B 22 0E F2 | 	cmp	local03, #43 wz
14388     14 00 90 5D |  if_ne	jmp	#LR__1712
1438c     0F 13 02 F6 | 	mov	arg01, local01
14390     A0 71 BF FD | 	call	#_convertstring
14394     FD 26 02 F6 | 	mov	local05, result1
14398     13 1F 02 F6 | 	mov	local01, local05
1439c     1F 22 06 F6 | 	mov	local03, #31
143a0                 | LR__1712
143a0                 | ' 
143a0                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
143a0     2C 22 0E F2 | 	cmp	local03, #44 wz
143a4     80 00 90 5D |  if_ne	jmp	#LR__1713
143a8     00 12 06 F6 | 	mov	arg01, #0
143ac     F8 1E B1 FD | 	call	#__system___getiolock_0542
143b0     FD 12 02 F6 | 	mov	arg01, result1
143b4     8C C4 B0 FD | 	call	#__system___lockmem
143b8     84 01 00 FF 
143bc     64 15 06 F6 | 	mov	arg02, ##@LR__5472
143c0     00 12 06 F6 | 	mov	arg01, #0
143c4     00 16 06 F6 | 	mov	arg03, #0
143c8     6C D1 B0 FD | 	call	#__system___basic_print_string
143cc     0A 2C 06 F6 | 	mov	local08, #10
143d0     00 12 06 F6 | 	mov	arg01, #0
143d4     0F 15 02 F6 | 	mov	arg02, local01
143d8     00 16 06 F6 | 	mov	arg03, #0
143dc     0A 18 06 F6 | 	mov	arg04, #10
143e0     98 D1 B0 FD | 	call	#__system___basic_print_integer
143e4     FD 2E 02 F6 | 	mov	local09, result1
143e8     00 12 06 F6 | 	mov	arg01, #0
143ec     0A 14 06 F6 | 	mov	arg02, #10
143f0     00 16 06 F6 | 	mov	arg03, #0
143f4     E8 D0 B0 FD | 	call	#__system___basic_print_char
143f8     01 30 06 F6 | 	mov	local10, #1
143fc     00 12 06 F6 | 	mov	arg01, #0
14400     A4 1E B1 FD | 	call	#__system___getiolock_0542
14404     FD 00 68 FC | 	wrlong	#0, result1
14408     00 32 06 F6 | 	mov	local11, #0
1440c     AC 6F BF FD | 	call	#_pop
14410     FD 26 02 F6 | 	mov	local05, result1
14414     FE 28 02 F6 | 	mov	local06, result2
14418     FF 2A 02 F6 | 	mov	local07, result3
1441c     13 1F 02 F6 | 	mov	local01, local05
14420     14 21 02 F6 | 	mov	local02, local06
14424     15 23 02 F6 | 	mov	local03, local07
14428                 | LR__1713
14428                 | ' 
14428                 | ' if r=print_mod_comma  then
14428     21 24 0E F2 | 	cmp	local04, #33 wz
1442c     AC 01 90 5D |  if_ne	jmp	#LR__1718
14430                 | '   if t1.result_type=result_int then print t1.result.iresult,
14430     1C 22 0E F2 | 	cmp	local03, #28 wz
14434     64 00 90 5D |  if_ne	jmp	#LR__1714
14438     00 12 06 F6 | 	mov	arg01, #0
1443c     68 1E B1 FD | 	call	#__system___getiolock_0542
14440     FD 12 02 F6 | 	mov	arg01, result1
14444     FC C3 B0 FD | 	call	#__system___lockmem
14448     00 28 06 F6 | 	mov	local06, #0
1444c     00 12 06 F6 | 	mov	arg01, #0
14450     0F 15 02 F6 | 	mov	arg02, local01
14454     00 16 06 F6 | 	mov	arg03, #0
14458     0A 18 06 F6 | 	mov	arg04, #10
1445c     1C D1 B0 FD | 	call	#__system___basic_print_integer
14460     FD 2A 02 F6 | 	mov	local07, result1
14464     14 27 02 F6 | 	mov	local05, local06
14468     15 27 02 F1 | 	add	local05, local07
1446c     00 32 06 F6 | 	mov	local11, #0
14470     00 12 06 F6 | 	mov	arg01, #0
14474     09 14 06 F6 | 	mov	arg02, #9
14478     00 16 06 F6 | 	mov	arg03, #0
1447c     60 D0 B0 FD | 	call	#__system___basic_print_char
14480     FD 2E 02 F6 | 	mov	local09, result1
14484     FD 26 02 F1 | 	add	local05, result1
14488     00 12 06 F6 | 	mov	arg01, #0
1448c     18 1E B1 FD | 	call	#__system___getiolock_0542
14490     FD 00 68 FC | 	wrlong	#0, result1
14494     00 FA 05 F6 | 	mov	result1, #0
14498     00 30 06 F6 | 	mov	local10, #0
1449c                 | LR__1714
1449c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1449c     1D 22 0E F2 | 	cmp	local03, #29 wz
144a0     64 00 90 5D |  if_ne	jmp	#LR__1715
144a4     00 12 06 F6 | 	mov	arg01, #0
144a8     FC 1D B1 FD | 	call	#__system___getiolock_0542
144ac     FD 12 02 F6 | 	mov	arg01, result1
144b0     90 C3 B0 FD | 	call	#__system___lockmem
144b4     00 28 06 F6 | 	mov	local06, #0
144b8     00 12 06 F6 | 	mov	arg01, #0
144bc     0F 15 02 F6 | 	mov	arg02, local01
144c0     00 16 06 F6 | 	mov	arg03, #0
144c4     0A 18 06 F6 | 	mov	arg04, #10
144c8     F0 D0 B0 FD | 	call	#__system___basic_print_unsigned
144cc     FD 2A 02 F6 | 	mov	local07, result1
144d0     14 27 02 F6 | 	mov	local05, local06
144d4     15 27 02 F1 | 	add	local05, local07
144d8     00 32 06 F6 | 	mov	local11, #0
144dc     00 12 06 F6 | 	mov	arg01, #0
144e0     09 14 06 F6 | 	mov	arg02, #9
144e4     00 16 06 F6 | 	mov	arg03, #0
144e8     F4 CF B0 FD | 	call	#__system___basic_print_char
144ec     FD 2E 02 F6 | 	mov	local09, result1
144f0     FD 26 02 F1 | 	add	local05, result1
144f4     00 12 06 F6 | 	mov	arg01, #0
144f8     AC 1D B1 FD | 	call	#__system___getiolock_0542
144fc     FD 00 68 FC | 	wrlong	#0, result1
14500     00 FA 05 F6 | 	mov	result1, #0
14504     00 30 06 F6 | 	mov	local10, #0
14508                 | LR__1715
14508                 | '   if t1.result_type=result_float then print t1.result.fresult,
14508     1E 22 0E F2 | 	cmp	local03, #30 wz
1450c     64 00 90 5D |  if_ne	jmp	#LR__1716
14510     00 12 06 F6 | 	mov	arg01, #0
14514     90 1D B1 FD | 	call	#__system___getiolock_0542
14518     FD 12 02 F6 | 	mov	arg01, result1
1451c     24 C3 B0 FD | 	call	#__system___lockmem
14520     00 28 06 F6 | 	mov	local06, #0
14524     00 12 06 F6 | 	mov	arg01, #0
14528     0F 15 02 F6 | 	mov	arg02, local01
1452c     00 16 06 F6 | 	mov	arg03, #0
14530     23 18 06 F6 | 	mov	arg04, #35
14534     D8 F4 B0 FD | 	call	#__system___basic_print_float
14538     FD 2A 02 F6 | 	mov	local07, result1
1453c     14 27 02 F6 | 	mov	local05, local06
14540     15 27 02 F1 | 	add	local05, local07
14544     00 32 06 F6 | 	mov	local11, #0
14548     00 12 06 F6 | 	mov	arg01, #0
1454c     09 14 06 F6 | 	mov	arg02, #9
14550     00 16 06 F6 | 	mov	arg03, #0
14554     88 CF B0 FD | 	call	#__system___basic_print_char
14558     FD 2E 02 F6 | 	mov	local09, result1
1455c     FD 26 02 F1 | 	add	local05, result1
14560     00 12 06 F6 | 	mov	arg01, #0
14564     40 1D B1 FD | 	call	#__system___getiolock_0542
14568     FD 00 68 FC | 	wrlong	#0, result1
1456c     00 FA 05 F6 | 	mov	result1, #0
14570     00 30 06 F6 | 	mov	local10, #0
14574                 | LR__1716
14574                 | '   if t1.result_type=result_string then print t1.result.sresult,
14574     1F 22 0E F2 | 	cmp	local03, #31 wz
14578     60 00 90 5D |  if_ne	jmp	#LR__1717
1457c     00 12 06 F6 | 	mov	arg01, #0
14580     24 1D B1 FD | 	call	#__system___getiolock_0542
14584     FD 12 02 F6 | 	mov	arg01, result1
14588     B8 C2 B0 FD | 	call	#__system___lockmem
1458c     00 28 06 F6 | 	mov	local06, #0
14590     00 12 06 F6 | 	mov	arg01, #0
14594     0F 15 02 F6 | 	mov	arg02, local01
14598     00 16 06 F6 | 	mov	arg03, #0
1459c     98 CF B0 FD | 	call	#__system___basic_print_string
145a0     FD 2A 02 F6 | 	mov	local07, result1
145a4     14 27 02 F6 | 	mov	local05, local06
145a8     15 27 02 F1 | 	add	local05, local07
145ac     00 32 06 F6 | 	mov	local11, #0
145b0     00 12 06 F6 | 	mov	arg01, #0
145b4     09 14 06 F6 | 	mov	arg02, #9
145b8     00 16 06 F6 | 	mov	arg03, #0
145bc     20 CF B0 FD | 	call	#__system___basic_print_char
145c0     FD 2E 02 F6 | 	mov	local09, result1
145c4     FD 26 02 F1 | 	add	local05, result1
145c8     00 12 06 F6 | 	mov	arg01, #0
145cc     D8 1C B1 FD | 	call	#__system___getiolock_0542
145d0     FD 00 68 FC | 	wrlong	#0, result1
145d4     00 FA 05 F6 | 	mov	result1, #0
145d8     00 30 06 F6 | 	mov	local10, #0
145dc                 | LR__1717
145dc                 | LR__1718
145dc                 | ' if r=print_mod_semicolon then 
145dc     22 24 0E F2 | 	cmp	local04, #34 wz
145e0     1C 01 90 5D |  if_ne	jmp	#LR__1723
145e4                 | '   if t1.result_type=result_int then print t1.result.iresult;
145e4     1C 22 0E F2 | 	cmp	local03, #28 wz
145e8     50 00 90 5D |  if_ne	jmp	#LR__1719
145ec     00 12 06 F6 | 	mov	arg01, #0
145f0     B4 1C B1 FD | 	call	#__system___getiolock_0542
145f4     FD 12 02 F6 | 	mov	arg01, result1
145f8     48 C2 B0 FD | 	call	#__system___lockmem
145fc     00 28 06 F6 | 	mov	local06, #0
14600     00 30 06 F6 | 	mov	local10, #0
14604     0A 32 06 F6 | 	mov	local11, #10
14608     00 12 06 F6 | 	mov	arg01, #0
1460c     0F 15 02 F6 | 	mov	arg02, local01
14610     00 16 06 F6 | 	mov	arg03, #0
14614     0A 18 06 F6 | 	mov	arg04, #10
14618     60 CF B0 FD | 	call	#__system___basic_print_integer
1461c     FD 2A 02 F6 | 	mov	local07, result1
14620     14 27 02 F6 | 	mov	local05, local06
14624     15 27 02 F1 | 	add	local05, local07
14628     00 12 06 F6 | 	mov	arg01, #0
1462c     78 1C B1 FD | 	call	#__system___getiolock_0542
14630     FD 00 68 FC | 	wrlong	#0, result1
14634     00 FA 05 F6 | 	mov	result1, #0
14638     00 2E 06 F6 | 	mov	local09, #0
1463c                 | LR__1719
1463c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1463c     1D 22 0E F2 | 	cmp	local03, #29 wz
14640     50 00 90 5D |  if_ne	jmp	#LR__1720
14644     00 12 06 F6 | 	mov	arg01, #0
14648     5C 1C B1 FD | 	call	#__system___getiolock_0542
1464c     FD 12 02 F6 | 	mov	arg01, result1
14650     F0 C1 B0 FD | 	call	#__system___lockmem
14654     00 28 06 F6 | 	mov	local06, #0
14658     00 30 06 F6 | 	mov	local10, #0
1465c     0A 32 06 F6 | 	mov	local11, #10
14660     00 12 06 F6 | 	mov	arg01, #0
14664     0F 15 02 F6 | 	mov	arg02, local01
14668     00 16 06 F6 | 	mov	arg03, #0
1466c     0A 18 06 F6 | 	mov	arg04, #10
14670     48 CF B0 FD | 	call	#__system___basic_print_unsigned
14674     FD 2A 02 F6 | 	mov	local07, result1
14678     14 27 02 F6 | 	mov	local05, local06
1467c     15 27 02 F1 | 	add	local05, local07
14680     00 12 06 F6 | 	mov	arg01, #0
14684     20 1C B1 FD | 	call	#__system___getiolock_0542
14688     FD 00 68 FC | 	wrlong	#0, result1
1468c     00 FA 05 F6 | 	mov	result1, #0
14690     00 2E 06 F6 | 	mov	local09, #0
14694                 | LR__1720
14694                 | '   if t1.result_type=result_float then print t1.result.fresult;
14694     1E 22 0E F2 | 	cmp	local03, #30 wz
14698     30 00 90 5D |  if_ne	jmp	#LR__1721
1469c     00 12 06 F6 | 	mov	arg01, #0
146a0     04 1C B1 FD | 	call	#__system___getiolock_0542
146a4     FD 12 02 F6 | 	mov	arg01, result1
146a8     98 C1 B0 FD | 	call	#__system___lockmem
146ac     00 12 06 F6 | 	mov	arg01, #0
146b0     0F 15 02 F6 | 	mov	arg02, local01
146b4     00 16 06 F6 | 	mov	arg03, #0
146b8     23 18 06 F6 | 	mov	arg04, #35
146bc     50 F3 B0 FD | 	call	#__system___basic_print_float
146c0     00 12 06 F6 | 	mov	arg01, #0
146c4     E0 1B B1 FD | 	call	#__system___getiolock_0542
146c8     FD 00 68 FC | 	wrlong	#0, result1
146cc                 | LR__1721
146cc                 | '   if t1.result_type=result_string then print t1.result.sresult;
146cc     1F 22 0E F2 | 	cmp	local03, #31 wz
146d0     2C 00 90 5D |  if_ne	jmp	#LR__1722
146d4     00 12 06 F6 | 	mov	arg01, #0
146d8     CC 1B B1 FD | 	call	#__system___getiolock_0542
146dc     FD 12 02 F6 | 	mov	arg01, result1
146e0     60 C1 B0 FD | 	call	#__system___lockmem
146e4     00 12 06 F6 | 	mov	arg01, #0
146e8     0F 15 02 F6 | 	mov	arg02, local01
146ec     00 16 06 F6 | 	mov	arg03, #0
146f0     44 CE B0 FD | 	call	#__system___basic_print_string
146f4     00 12 06 F6 | 	mov	arg01, #0
146f8     AC 1B B1 FD | 	call	#__system___getiolock_0542
146fc     FD 00 68 FC | 	wrlong	#0, result1
14700                 | LR__1722
14700                 | LR__1723
14700                 | ' if r=0 then 
14700     00 24 0E F2 | 	cmp	local04, #0 wz
14704     1C 01 90 5D |  if_ne	jmp	#LR__1728
14708                 | '   if t1.result_type=result_int then print t1.result.iresult
14708     1C 22 0E F2 | 	cmp	local03, #28 wz
1470c     40 00 90 5D |  if_ne	jmp	#LR__1724
14710     00 12 06 F6 | 	mov	arg01, #0
14714     90 1B B1 FD | 	call	#__system___getiolock_0542
14718     FD 12 02 F6 | 	mov	arg01, result1
1471c     24 C1 B0 FD | 	call	#__system___lockmem
14720     00 12 06 F6 | 	mov	arg01, #0
14724     0F 15 02 F6 | 	mov	arg02, local01
14728     00 16 06 F6 | 	mov	arg03, #0
1472c     0A 18 06 F6 | 	mov	arg04, #10
14730     48 CE B0 FD | 	call	#__system___basic_print_integer
14734     00 12 06 F6 | 	mov	arg01, #0
14738     0A 14 06 F6 | 	mov	arg02, #10
1473c     00 16 06 F6 | 	mov	arg03, #0
14740     9C CD B0 FD | 	call	#__system___basic_print_char
14744     00 12 06 F6 | 	mov	arg01, #0
14748     5C 1B B1 FD | 	call	#__system___getiolock_0542
1474c     FD 00 68 FC | 	wrlong	#0, result1
14750                 | LR__1724
14750                 | '   if t1.result_type=result_uint then print t1.result.uresult
14750     1D 22 0E F2 | 	cmp	local03, #29 wz
14754     40 00 90 5D |  if_ne	jmp	#LR__1725
14758     00 12 06 F6 | 	mov	arg01, #0
1475c     48 1B B1 FD | 	call	#__system___getiolock_0542
14760     FD 12 02 F6 | 	mov	arg01, result1
14764     DC C0 B0 FD | 	call	#__system___lockmem
14768     00 12 06 F6 | 	mov	arg01, #0
1476c     0F 15 02 F6 | 	mov	arg02, local01
14770     00 16 06 F6 | 	mov	arg03, #0
14774     0A 18 06 F6 | 	mov	arg04, #10
14778     40 CE B0 FD | 	call	#__system___basic_print_unsigned
1477c     00 12 06 F6 | 	mov	arg01, #0
14780     0A 14 06 F6 | 	mov	arg02, #10
14784     00 16 06 F6 | 	mov	arg03, #0
14788     54 CD B0 FD | 	call	#__system___basic_print_char
1478c     00 12 06 F6 | 	mov	arg01, #0
14790     14 1B B1 FD | 	call	#__system___getiolock_0542
14794     FD 00 68 FC | 	wrlong	#0, result1
14798                 | LR__1725
14798                 | '   if t1.result_type=result_float then print t1.result.fresult
14798     1E 22 0E F2 | 	cmp	local03, #30 wz
1479c     40 00 90 5D |  if_ne	jmp	#LR__1726
147a0     00 12 06 F6 | 	mov	arg01, #0
147a4     00 1B B1 FD | 	call	#__system___getiolock_0542
147a8     FD 12 02 F6 | 	mov	arg01, result1
147ac     94 C0 B0 FD | 	call	#__system___lockmem
147b0     00 12 06 F6 | 	mov	arg01, #0
147b4     0F 15 02 F6 | 	mov	arg02, local01
147b8     00 16 06 F6 | 	mov	arg03, #0
147bc     23 18 06 F6 | 	mov	arg04, #35
147c0     4C F2 B0 FD | 	call	#__system___basic_print_float
147c4     00 12 06 F6 | 	mov	arg01, #0
147c8     0A 14 06 F6 | 	mov	arg02, #10
147cc     00 16 06 F6 | 	mov	arg03, #0
147d0     0C CD B0 FD | 	call	#__system___basic_print_char
147d4     00 12 06 F6 | 	mov	arg01, #0
147d8     CC 1A B1 FD | 	call	#__system___getiolock_0542
147dc     FD 00 68 FC | 	wrlong	#0, result1
147e0                 | LR__1726
147e0                 | '   if t1.result_type=result_string then print t1.result.sresult
147e0     1F 22 0E F2 | 	cmp	local03, #31 wz
147e4     3C 00 90 5D |  if_ne	jmp	#LR__1727
147e8     00 12 06 F6 | 	mov	arg01, #0
147ec     B8 1A B1 FD | 	call	#__system___getiolock_0542
147f0     FD 12 02 F6 | 	mov	arg01, result1
147f4     4C C0 B0 FD | 	call	#__system___lockmem
147f8     00 12 06 F6 | 	mov	arg01, #0
147fc     0F 15 02 F6 | 	mov	arg02, local01
14800     00 16 06 F6 | 	mov	arg03, #0
14804     30 CD B0 FD | 	call	#__system___basic_print_string
14808     00 12 06 F6 | 	mov	arg01, #0
1480c     0A 14 06 F6 | 	mov	arg02, #10
14810     00 16 06 F6 | 	mov	arg03, #0
14814     C8 CC B0 FD | 	call	#__system___basic_print_char
14818     00 12 06 F6 | 	mov	arg01, #0
1481c     88 1A B1 FD | 	call	#__system___getiolock_0542
14820     FD 00 68 FC | 	wrlong	#0, result1
14824                 | LR__1727
14824                 | LR__1728
14824                 | ' if r=print_mod_empty then print
14824     20 24 0E F2 | 	cmp	local04, #32 wz
14828     2C 00 90 5D |  if_ne	jmp	#LR__1729
1482c     00 12 06 F6 | 	mov	arg01, #0
14830     74 1A B1 FD | 	call	#__system___getiolock_0542
14834     FD 12 02 F6 | 	mov	arg01, result1
14838     08 C0 B0 FD | 	call	#__system___lockmem
1483c     00 12 06 F6 | 	mov	arg01, #0
14840     0A 14 06 F6 | 	mov	arg02, #10
14844     00 16 06 F6 | 	mov	arg03, #0
14848     94 CC B0 FD | 	call	#__system___basic_print_char
1484c     00 12 06 F6 | 	mov	arg01, #0
14850     54 1A B1 FD | 	call	#__system___getiolock_0542
14854     FD 00 68 FC | 	wrlong	#0, result1
14858                 | LR__1729
14858                 | LR__1730
14858     A7 F0 03 F6 | 	mov	ptra, fp
1485c     B2 00 A0 FD | 	call	#popregs_
14860                 | _do_print_ret
14860     2D 00 64 FD | 	ret
14864                 | 
14864                 | ' 
14864                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
14864                 | ' 
14864                 | ' sub do_push
14864                 | _do_push
14864                 | ' if stackpointer<maxstack then 
14864     43 00 00 FF 
14868     58 E4 05 F1 | 	add	objptr, ##34392
1486c     F2 00 02 FB | 	rdlong	_var01, objptr
14870     43 00 00 FF 
14874     58 E4 85 F1 | 	sub	objptr, ##34392
14878     01 00 00 FF 
1487c     00 00 56 F2 | 	cmps	_var01, ##512 wc
14880     F8 00 90 3D |  if_ae	jmp	#LR__1740
14884     4A 00 00 FF 
14888     80 E4 05 F1 | 	add	objptr, ##38016
1488c     F2 02 02 FB | 	rdlong	_var02, objptr
14890     01 05 02 F6 | 	mov	_var03, _var02
14894     01 04 66 F0 | 	shl	_var03, #1
14898     01 05 02 F1 | 	add	_var03, _var02
1489c     02 04 66 F0 | 	shl	_var03, #2
148a0     03 00 00 FF 
148a4     04 E4 85 F1 | 	sub	objptr, ##1540
148a8     F2 04 02 F1 | 	add	_var03, objptr
148ac     02 01 02 FB | 	rdlong	_var01, _var03
148b0     04 04 06 F1 | 	add	_var03, #4
148b4     02 07 02 FB | 	rdlong	_var04, _var03
148b8     01 05 02 F6 | 	mov	_var03, _var02
148bc     01 04 66 F0 | 	shl	_var03, #1
148c0     01 05 02 F1 | 	add	_var03, _var02
148c4     02 04 66 F0 | 	shl	_var03, #2
148c8     F2 04 02 F1 | 	add	_var03, objptr
148cc     08 04 06 F1 | 	add	_var03, #8
148d0     02 03 02 FB | 	rdlong	_var02, _var03
148d4     04 00 00 FF 
148d8     24 E4 85 F1 | 	sub	objptr, ##2084
148dc     F2 04 02 FB | 	rdlong	_var03, objptr
148e0     02 09 02 F6 | 	mov	_var05, _var03
148e4     01 08 66 F0 | 	shl	_var05, #1
148e8     02 09 02 F1 | 	add	_var05, _var03
148ec     02 08 66 F0 | 	shl	_var05, #2
148f0     0C 00 00 FF 
148f4     0C E4 85 F1 | 	sub	objptr, ##6156
148f8     F2 08 02 F1 | 	add	_var05, objptr
148fc     04 01 62 FC | 	wrlong	_var01, _var05
14900     0C 00 00 FF 
14904     0C E4 05 F1 | 	add	objptr, ##6156
14908     F2 08 02 FB | 	rdlong	_var05, objptr
1490c     04 05 02 F6 | 	mov	_var03, _var05
14910     01 04 66 F0 | 	shl	_var03, #1
14914     04 05 02 F1 | 	add	_var03, _var05
14918     02 04 66 F0 | 	shl	_var03, #2
1491c     0C 00 00 FF 
14920     0C E4 85 F1 | 	sub	objptr, ##6156
14924     F2 04 02 F1 | 	add	_var03, objptr
14928     04 04 06 F1 | 	add	_var03, #4
1492c     02 07 62 FC | 	wrlong	_var04, _var03
14930     0C 00 00 FF 
14934     0C E4 05 F1 | 	add	objptr, ##6156
14938     F2 08 02 FB | 	rdlong	_var05, objptr
1493c     04 07 02 F6 | 	mov	_var04, _var05
14940     01 06 66 F0 | 	shl	_var04, #1
14944     04 07 02 F1 | 	add	_var04, _var05
14948     02 06 66 F0 | 	shl	_var04, #2
1494c     0C 00 00 FF 
14950     0C E4 85 F1 | 	sub	objptr, ##6156
14954     F2 06 02 F1 | 	add	_var04, objptr
14958     08 06 06 F1 | 	add	_var04, #8
1495c     03 03 62 FC | 	wrlong	_var02, _var04
14960     0C 00 00 FF 
14964     0C E4 05 F1 | 	add	objptr, ##6156
14968     F2 00 02 FB | 	rdlong	_var01, objptr
1496c     01 00 06 F1 | 	add	_var01, #1
14970     F2 00 62 FC | 	wrlong	_var01, objptr
14974     43 00 00 FF 
14978     58 E4 85 F1 | 	sub	objptr, ##34392
1497c                 | LR__1740
1497c                 | _do_push_ret
1497c     2D 00 64 FD | 	ret
14980                 | 
14980                 | ' 
14980                 | ' '-------------------- put
14980                 | ' 
14980                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
14980                 | _do_put
14980     03 4A 05 F6 | 	mov	COUNT_, #3
14984     A8 00 A0 FD | 	call	#pushregs_
14988     28 F0 07 F1 | 	add	ptra, #40
1498c     4A 00 00 FF 
14990     80 E4 05 F1 | 	add	objptr, ##38016
14994     F2 1A 02 FB | 	rdlong	arg05, objptr
14998     0D 19 02 F6 | 	mov	arg04, arg05
1499c     01 18 66 F0 | 	shl	arg04, #1
149a0     0D 19 02 F1 | 	add	arg04, arg05
149a4     02 18 66 F0 | 	shl	arg04, #2
149a8     03 00 00 FF 
149ac     04 E4 85 F1 | 	sub	objptr, ##1540
149b0     F2 18 02 F1 | 	add	arg04, objptr
149b4     0C 1B 02 FB | 	rdlong	arg05, arg04
149b8     A7 1A 62 FC | 	wrlong	arg05, fp
149bc                 | ' 
149bc                 | ' numpar=compiledline(lineptr_e).result.uresult
149bc                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
149bc     04 1A 0E F2 | 	cmp	arg05, #4 wz
149c0     47 00 00 FF 
149c4     7C E4 85 F1 | 	sub	objptr, ##36476
149c8     48 00 90 5D |  if_ne	jmp	#LR__1750
149cc     EC 69 BF FD | 	call	#_pop
149d0     FF 1A 02 F6 | 	mov	arg05, result3
149d4     1C 4E 05 F1 | 	add	fp, #28
149d8     A7 FA 61 FC | 	wrlong	result1, fp
149dc     04 4E 05 F1 | 	add	fp, #4
149e0     A7 FC 61 FC | 	wrlong	result2, fp
149e4     04 4E 05 F1 | 	add	fp, #4
149e8     A7 1A 62 FC | 	wrlong	arg05, fp
149ec     08 4E 85 F1 | 	sub	fp, #8
149f0     A7 12 02 F6 | 	mov	arg01, fp
149f4     1C 4E 85 F1 | 	sub	fp, #28
149f8     A4 6B BF FD | 	call	#_converttoint
149fc     52 00 00 FF 
14a00     14 E4 05 F1 | 	add	objptr, ##42004
14a04     F2 FA 61 FC | 	wrlong	result1, objptr
14a08     52 00 00 FF 
14a0c     14 E4 85 F1 | 	sub	objptr, ##42004
14a10     18 00 90 FD | 	jmp	#LR__1751
14a14                 | LR__1750
14a14     52 00 00 FF 
14a18     14 E4 05 F1 | 	add	objptr, ##42004
14a1c     FF FF FF FF 
14a20     F2 FE 6B FC | 	wrlong	##-1, objptr
14a24     52 00 00 FF 
14a28     14 E4 85 F1 | 	sub	objptr, ##42004
14a2c                 | LR__1751
14a2c                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
14a2c     A7 1A 02 FB | 	rdlong	arg05, fp
14a30     03 1A 56 F2 | 	cmps	arg05, #3 wc
14a34     40 00 90 CD |  if_b	jmp	#LR__1752
14a38     80 69 BF FD | 	call	#_pop
14a3c     FF 1A 02 F6 | 	mov	arg05, result3
14a40     1C 4E 05 F1 | 	add	fp, #28
14a44     A7 FA 61 FC | 	wrlong	result1, fp
14a48     04 4E 05 F1 | 	add	fp, #4
14a4c     A7 FC 61 FC | 	wrlong	result2, fp
14a50     04 4E 05 F1 | 	add	fp, #4
14a54     A7 1A 62 FC | 	wrlong	arg05, fp
14a58     08 4E 85 F1 | 	sub	fp, #8
14a5c     A7 12 02 F6 | 	mov	arg01, fp
14a60     1C 4E 85 F1 | 	sub	fp, #28
14a64     38 6B BF FD | 	call	#_converttoint
14a68     08 4E 05 F1 | 	add	fp, #8
14a6c     A7 FA 61 FC | 	wrlong	result1, fp
14a70     08 4E 85 F1 | 	sub	fp, #8
14a74     0C 00 90 FD | 	jmp	#LR__1753
14a78                 | LR__1752
14a78     08 4E 05 F1 | 	add	fp, #8
14a7c     A7 02 68 FC | 	wrlong	#1, fp
14a80     08 4E 85 F1 | 	sub	fp, #8
14a84                 | LR__1753
14a84                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
14a84     A7 18 02 FB | 	rdlong	arg04, fp
14a88     02 18 56 F2 | 	cmps	arg04, #2 wc
14a8c     3C 00 90 CD |  if_b	jmp	#LR__1754
14a90     28 69 BF FD | 	call	#_pop
14a94     FF 18 02 F6 | 	mov	arg04, result3
14a98     1C 4E 05 F1 | 	add	fp, #28
14a9c     A7 FA 61 FC | 	wrlong	result1, fp
14aa0     04 4E 05 F1 | 	add	fp, #4
14aa4     A7 FC 61 FC | 	wrlong	result2, fp
14aa8     04 4E 05 F1 | 	add	fp, #4
14aac     A7 18 62 FC | 	wrlong	arg04, fp
14ab0     08 4E 85 F1 | 	sub	fp, #8
14ab4     A7 12 02 F6 | 	mov	arg01, fp
14ab8     1C 4E 85 F1 | 	sub	fp, #28
14abc     E0 6A BF FD | 	call	#_converttoint
14ac0     0C 4E 05 F1 | 	add	fp, #12
14ac4     A7 FA 61 FC | 	wrlong	result1, fp
14ac8     0C 4E 85 F1 | 	sub	fp, #12
14acc                 | LR__1754
14acc     EC 68 BF FD | 	call	#_pop
14ad0     FF 18 02 F6 | 	mov	arg04, result3
14ad4     1C 4E 05 F1 | 	add	fp, #28
14ad8     A7 FA 61 FC | 	wrlong	result1, fp
14adc     04 4E 05 F1 | 	add	fp, #4
14ae0     A7 FC 61 FC | 	wrlong	result2, fp
14ae4     04 4E 05 F1 | 	add	fp, #4
14ae8     A7 18 62 FC | 	wrlong	arg04, fp
14aec     08 4E 85 F1 | 	sub	fp, #8
14af0     A7 12 02 F6 | 	mov	arg01, fp
14af4     1C 4E 85 F1 | 	sub	fp, #28
14af8     A4 6A BF FD | 	call	#_converttoint
14afc     04 4E 05 F1 | 	add	fp, #4
14b00     A7 FA 61 FC | 	wrlong	result1, fp
14b04     10 4E 05 F1 | 	add	fp, #16
14b08     A7 1E 02 FB | 	rdlong	local01, fp
14b0c     14 4E 85 F1 | 	sub	fp, #20
14b10     02 1E 66 F0 | 	shl	local01, #2
14b14     50 00 00 FF 
14b18     C4 E4 05 F1 | 	add	objptr, ##41156
14b1c     F2 1E 02 F1 | 	add	local01, objptr
14b20     0F 01 68 FC | 	wrlong	#0, local01
14b24                 | ' t1=pop() : channel=converttoint(t1)
14b24                 | ' getres(j)=0
14b24                 | ' if pos>=0 then
14b24     01 00 00 FF 
14b28     50 E5 05 F1 | 	add	objptr, ##848
14b2c     F2 20 02 FB | 	rdlong	local02, objptr
14b30     52 00 00 FF 
14b34     14 E4 85 F1 | 	sub	objptr, ##42004
14b38     00 20 56 F2 | 	cmps	local02, #0 wc
14b3c     C0 01 90 CD |  if_b	jmp	#LR__1760
14b40     10 4E 05 F1 | 	add	fp, #16
14b44     A7 00 68 FC | 	wrlong	#0, fp
14b48     10 4E 85 F1 | 	sub	fp, #16
14b4c                 | '    i=0: do
14b4c                 | LR__1755
14b4c     14 4E 05 F1 | 	add	fp, #20
14b50     A7 00 68 FC | 	wrlong	#0, fp
14b54     14 4E 85 F1 | 	sub	fp, #20
14b58                 | '    j=0: do    
14b58                 | LR__1756
14b58                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
14b58     0C 4E 05 F1 | 	add	fp, #12
14b5c     A7 20 02 FB | 	rdlong	local02, fp
14b60     0C 4E 85 F1 | 	sub	fp, #12
14b64     00 04 00 FF 
14b68     00 20 56 F2 | 	cmps	local02, ##524288 wc
14b6c     4C 00 90 3D |  if_ae	jmp	#LR__1757
14b70     14 4E 05 F1 | 	add	fp, #20
14b74     A7 20 02 FB | 	rdlong	local02, fp
14b78     10 1F 02 F6 | 	mov	local01, local02
14b7c     4E 00 00 FF 
14b80     B4 E4 05 F1 | 	add	objptr, ##40116
14b84     F2 1E 02 F1 | 	add	local01, objptr
14b88     08 4E 85 F1 | 	sub	fp, #8
14b8c     A7 12 02 FB | 	rdlong	arg01, fp
14b90     04 4E 05 F1 | 	add	fp, #4
14b94     A7 18 02 FB | 	rdlong	arg04, fp
14b98     0A 18 66 F0 | 	shl	arg04, #10
14b9c     0C 13 02 F1 | 	add	arg01, arg04
14ba0     10 4E 85 F1 | 	sub	fp, #16
14ba4     10 13 02 F1 | 	add	arg01, local02
14ba8     09 FB C1 FA | 	rdbyte	result1, arg01
14bac     4E 00 00 FF 
14bb0     B4 E4 85 F1 | 	sub	objptr, ##40116
14bb4     0F FB 41 FC | 	wrbyte	result1, local01
14bb8     48 00 90 FD | 	jmp	#LR__1758
14bbc                 | LR__1757
14bbc     14 4E 05 F1 | 	add	fp, #20
14bc0     A7 20 02 FB | 	rdlong	local02, fp
14bc4     10 1F 02 F6 | 	mov	local01, local02
14bc8     4E 00 00 FF 
14bcc     B4 E4 05 F1 | 	add	objptr, ##40116
14bd0     F2 1E 02 F1 | 	add	local01, objptr
14bd4     08 4E 85 F1 | 	sub	fp, #8
14bd8     A7 12 02 FB | 	rdlong	arg01, fp
14bdc     04 4E 05 F1 | 	add	fp, #4
14be0     A7 18 02 FB | 	rdlong	arg04, fp
14be4     0A 18 66 F0 | 	shl	arg04, #10
14be8     0C 13 02 F1 | 	add	arg01, arg04
14bec     10 4E 85 F1 | 	sub	fp, #16
14bf0     10 13 02 F1 | 	add	arg01, local02
14bf4     4E 00 00 FF 
14bf8     B4 E4 85 F1 | 	sub	objptr, ##40116
14bfc     F0 88 B0 FD | 	call	#_pspeek
14c00     0F FB 41 FC | 	wrbyte	result1, local01
14c04                 | LR__1758
14c04     14 4E 05 F1 | 	add	fp, #20
14c08     A7 20 02 FB | 	rdlong	local02, fp
14c0c     01 20 06 F1 | 	add	local02, #1
14c10     A7 20 62 FC | 	wrlong	local02, fp
14c14     14 4E 85 F1 | 	sub	fp, #20
14c18     02 00 00 FF 
14c1c     00 20 56 F2 | 	cmps	local02, ##1024 wc
14c20     2C 00 90 3D |  if_ae	jmp	#LR__1759
14c24     10 4E 05 F1 | 	add	fp, #16
14c28     A7 1E 02 FB | 	rdlong	local01, fp
14c2c     0A 1E 66 F0 | 	shl	local01, #10
14c30     04 4E 05 F1 | 	add	fp, #4
14c34     A7 20 02 FB | 	rdlong	local02, fp
14c38     10 1F 02 F1 | 	add	local01, local02
14c3c     0C 4E 85 F1 | 	sub	fp, #12
14c40     A7 20 02 FB | 	rdlong	local02, fp
14c44     08 4E 85 F1 | 	sub	fp, #8
14c48     10 1F 5A F2 | 	cmps	local01, local02 wcz
14c4c     08 FF 9F ED |  if_be	jmp	#LR__1756
14c50                 | LR__1759
14c50                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
14c50     04 4E 05 F1 | 	add	fp, #4
14c54     A7 12 02 FB | 	rdlong	arg01, fp
14c58     52 00 00 FF 
14c5c     14 E4 05 F1 | 	add	objptr, ##42004
14c60     F2 14 02 FB | 	rdlong	arg02, objptr
14c64     01 14 06 F1 | 	add	arg02, #1
14c68     03 00 00 FF 
14c6c     60 E5 85 F1 | 	sub	objptr, ##1888
14c70     F2 16 02 F6 | 	mov	arg03, objptr
14c74     4E 00 00 FF 
14c78     B4 E4 85 F1 | 	sub	objptr, ##40116
14c7c     04 4E 05 F1 | 	add	fp, #4
14c80     A7 18 02 FB | 	rdlong	arg04, fp
14c84     08 4E 85 F1 | 	sub	fp, #8
14c88     01 1A 06 F6 | 	mov	arg05, #1
14c8c     B8 C9 B0 FD | 	call	#__system___basic_put
14c90     18 4E 05 F1 | 	add	fp, #24
14c94     A7 FA 61 FC | 	wrlong	result1, fp
14c98     14 4E 85 F1 | 	sub	fp, #20
14c9c     A7 1E 02 FB | 	rdlong	local01, fp
14ca0     02 1E 66 F0 | 	shl	local01, #2
14ca4     50 00 00 FF 
14ca8     C4 E4 05 F1 | 	add	objptr, ##41156
14cac     F2 1E 02 F1 | 	add	local01, objptr
14cb0     0F FB 61 FC | 	wrlong	result1, local01
14cb4                 | '    if 1024*i+j>amount then exit loop
14cb4     0C 4E 05 F1 | 	add	fp, #12
14cb8     A7 20 02 FB | 	rdlong	local02, fp
14cbc     0A 20 66 F0 | 	shl	local02, #10
14cc0     04 4E 05 F1 | 	add	fp, #4
14cc4     A7 1E 02 FB | 	rdlong	local01, fp
14cc8     0F 21 02 F1 | 	add	local02, local01
14ccc     0C 4E 85 F1 | 	sub	fp, #12
14cd0     A7 1E 02 FB | 	rdlong	local01, fp
14cd4     08 4E 85 F1 | 	sub	fp, #8
14cd8     0F 21 5A F2 | 	cmps	local02, local01 wcz
14cdc     50 00 00 FF 
14ce0     C4 E4 85 F1 | 	sub	objptr, ##41156
14ce4     CC 01 90 1D |  if_a	jmp	#LR__1767
14ce8     10 4E 05 F1 | 	add	fp, #16
14cec     A7 20 02 FB | 	rdlong	local02, fp
14cf0     01 20 06 F1 | 	add	local02, #1
14cf4     A7 20 62 FC | 	wrlong	local02, fp
14cf8     10 4E 85 F1 | 	sub	fp, #16
14cfc     4C FE 9F FD | 	jmp	#LR__1755
14d00                 | LR__1760
14d00     10 4E 05 F1 | 	add	fp, #16
14d04     A7 00 68 FC | 	wrlong	#0, fp
14d08     10 4E 85 F1 | 	sub	fp, #16
14d0c                 | '    i=0: do
14d0c                 | LR__1761
14d0c     14 4E 05 F1 | 	add	fp, #20
14d10     A7 00 68 FC | 	wrlong	#0, fp
14d14     14 4E 85 F1 | 	sub	fp, #20
14d18                 | '    j=0: do  
14d18                 | LR__1762
14d18                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
14d18     0C 4E 05 F1 | 	add	fp, #12
14d1c     A7 20 02 FB | 	rdlong	local02, fp
14d20     0C 4E 85 F1 | 	sub	fp, #12
14d24     00 04 00 FF 
14d28     00 20 56 F2 | 	cmps	local02, ##524288 wc
14d2c     4C 00 90 3D |  if_ae	jmp	#LR__1763
14d30     14 4E 05 F1 | 	add	fp, #20
14d34     A7 20 02 FB | 	rdlong	local02, fp
14d38     10 1F 02 F6 | 	mov	local01, local02
14d3c     4E 00 00 FF 
14d40     B4 E4 05 F1 | 	add	objptr, ##40116
14d44     F2 1E 02 F1 | 	add	local01, objptr
14d48     08 4E 85 F1 | 	sub	fp, #8
14d4c     A7 12 02 FB | 	rdlong	arg01, fp
14d50     04 4E 05 F1 | 	add	fp, #4
14d54     A7 18 02 FB | 	rdlong	arg04, fp
14d58     0A 18 66 F0 | 	shl	arg04, #10
14d5c     0C 13 02 F1 | 	add	arg01, arg04
14d60     10 4E 85 F1 | 	sub	fp, #16
14d64     10 13 02 F1 | 	add	arg01, local02
14d68     09 FB C1 FA | 	rdbyte	result1, arg01
14d6c     4E 00 00 FF 
14d70     B4 E4 85 F1 | 	sub	objptr, ##40116
14d74     0F FB 41 FC | 	wrbyte	result1, local01
14d78     48 00 90 FD | 	jmp	#LR__1764
14d7c                 | LR__1763
14d7c     14 4E 05 F1 | 	add	fp, #20
14d80     A7 20 02 FB | 	rdlong	local02, fp
14d84     10 1F 02 F6 | 	mov	local01, local02
14d88     4E 00 00 FF 
14d8c     B4 E4 05 F1 | 	add	objptr, ##40116
14d90     F2 1E 02 F1 | 	add	local01, objptr
14d94     08 4E 85 F1 | 	sub	fp, #8
14d98     A7 12 02 FB | 	rdlong	arg01, fp
14d9c     04 4E 05 F1 | 	add	fp, #4
14da0     A7 18 02 FB | 	rdlong	arg04, fp
14da4     0A 18 66 F0 | 	shl	arg04, #10
14da8     0C 13 02 F1 | 	add	arg01, arg04
14dac     10 4E 85 F1 | 	sub	fp, #16
14db0     10 13 02 F1 | 	add	arg01, local02
14db4     4E 00 00 FF 
14db8     B4 E4 85 F1 | 	sub	objptr, ##40116
14dbc     30 87 B0 FD | 	call	#_pspeek
14dc0     0F FB 41 FC | 	wrbyte	result1, local01
14dc4                 | LR__1764
14dc4     14 4E 05 F1 | 	add	fp, #20
14dc8     A7 20 02 FB | 	rdlong	local02, fp
14dcc     01 20 06 F1 | 	add	local02, #1
14dd0     A7 20 62 FC | 	wrlong	local02, fp
14dd4     14 4E 85 F1 | 	sub	fp, #20
14dd8     02 00 00 FF 
14ddc     00 20 56 F2 | 	cmps	local02, ##1024 wc
14de0     2C 00 90 3D |  if_ae	jmp	#LR__1765
14de4     10 4E 05 F1 | 	add	fp, #16
14de8     A7 1E 02 FB | 	rdlong	local01, fp
14dec     0A 1E 66 F0 | 	shl	local01, #10
14df0     04 4E 05 F1 | 	add	fp, #4
14df4     A7 20 02 FB | 	rdlong	local02, fp
14df8     10 1F 02 F1 | 	add	local01, local02
14dfc     0C 4E 85 F1 | 	sub	fp, #12
14e00     A7 20 02 FB | 	rdlong	local02, fp
14e04     08 4E 85 F1 | 	sub	fp, #8
14e08     10 1F 5A F2 | 	cmps	local01, local02 wcz
14e0c     08 FF 9F ED |  if_be	jmp	#LR__1762
14e10                 | LR__1765
14e10                 | '    put #channel,,block(0),amount, r : getres(channel)=r
14e10     04 4E 05 F1 | 	add	fp, #4
14e14     A7 12 02 FB | 	rdlong	arg01, fp
14e18     4E 00 00 FF 
14e1c     B4 E4 05 F1 | 	add	objptr, ##40116
14e20     F2 16 02 F6 | 	mov	arg03, objptr
14e24     4E 00 00 FF 
14e28     B4 E4 85 F1 | 	sub	objptr, ##40116
14e2c     04 4E 05 F1 | 	add	fp, #4
14e30     A7 18 02 FB | 	rdlong	arg04, fp
14e34     08 4E 85 F1 | 	sub	fp, #8
14e38     00 14 06 F6 | 	mov	arg02, #0
14e3c     01 1A 06 F6 | 	mov	arg05, #1
14e40     04 C8 B0 FD | 	call	#__system___basic_put
14e44     18 4E 05 F1 | 	add	fp, #24
14e48     A7 FA 61 FC | 	wrlong	result1, fp
14e4c     14 4E 85 F1 | 	sub	fp, #20
14e50     A7 1E 02 FB | 	rdlong	local01, fp
14e54     02 1E 66 F0 | 	shl	local01, #2
14e58     50 00 00 FF 
14e5c     C4 E4 05 F1 | 	add	objptr, ##41156
14e60     F2 1E 02 F1 | 	add	local01, objptr
14e64     0F FB 61 FC | 	wrlong	result1, local01
14e68                 | '    if 1024*i+j>amount then exit loop
14e68     0C 4E 05 F1 | 	add	fp, #12
14e6c     A7 20 02 FB | 	rdlong	local02, fp
14e70     0A 20 66 F0 | 	shl	local02, #10
14e74     04 4E 05 F1 | 	add	fp, #4
14e78     A7 1E 02 FB | 	rdlong	local01, fp
14e7c     0F 21 02 F1 | 	add	local02, local01
14e80     0C 4E 85 F1 | 	sub	fp, #12
14e84     A7 22 02 FB | 	rdlong	local03, fp
14e88     08 4E 85 F1 | 	sub	fp, #8
14e8c     11 21 5A F2 | 	cmps	local02, local03 wcz
14e90     50 00 00 FF 
14e94     C4 E4 85 F1 | 	sub	objptr, ##41156
14e98     18 00 90 1D |  if_a	jmp	#LR__1766
14e9c     10 4E 05 F1 | 	add	fp, #16
14ea0     A7 20 02 FB | 	rdlong	local02, fp
14ea4     01 20 06 F1 | 	add	local02, #1
14ea8     A7 20 62 FC | 	wrlong	local02, fp
14eac     10 4E 85 F1 | 	sub	fp, #16
14eb0     58 FE 9F FD | 	jmp	#LR__1761
14eb4                 | LR__1766
14eb4                 | LR__1767
14eb4     A7 F0 03 F6 | 	mov	ptra, fp
14eb8     B2 00 A0 FD | 	call	#popregs_
14ebc                 | _do_put_ret
14ebc     2D 00 64 FD | 	ret
14ec0                 | 
14ec0                 | ' 
14ec0                 | ' '-------------------- rad
14ec0                 | ' 
14ec0                 | ' sub do_rad
14ec0                 | _do_rad
14ec0     51 00 00 FF 
14ec4     BC E5 05 F1 | 	add	objptr, ##41916
14ec8     00 C0 9F FF 
14ecc     F2 00 68 FC | 	wrlong	##1065353216, objptr
14ed0     04 E4 05 F1 | 	add	objptr, #4
14ed4     00 C0 9F FF 
14ed8     F2 00 68 FC | 	wrlong	##1065353216, objptr
14edc     51 00 00 FF 
14ee0     C0 E5 85 F1 | 	sub	objptr, ##41920
14ee4                 | _do_rad_ret
14ee4     2D 00 64 FD | 	ret
14ee8                 | 
14ee8                 | ' 
14ee8                 | ' '-------------------- rdpin
14ee8                 | ' 
14ee8                 | ' sub do_rdpin
14ee8                 | _do_rdpin
14ee8     00 4A 05 F6 | 	mov	COUNT_, #0
14eec     A8 00 A0 FD | 	call	#pushregs_
14ef0     0C F0 07 F1 | 	add	ptra, #12
14ef4     C4 64 BF FD | 	call	#_pop
14ef8     A7 FA 61 FC | 	wrlong	result1, fp
14efc     04 4E 05 F1 | 	add	fp, #4
14f00     A7 FC 61 FC | 	wrlong	result2, fp
14f04     04 4E 05 F1 | 	add	fp, #4
14f08     A7 FE 61 FC | 	wrlong	result3, fp
14f0c     08 4E 85 F1 | 	sub	fp, #8
14f10     A7 12 02 F6 | 	mov	arg01, fp
14f14     88 66 BF FD | 	call	#_converttoint
14f18     FD FA 89 FA | 	rdpin	result1, result1
14f1c     52 00 00 FF 
14f20     18 E4 05 F1 | 	add	objptr, ##42008
14f24     F2 FA 61 FC | 	wrlong	result1, objptr
14f28     52 00 00 FF 
14f2c     18 E4 85 F1 | 	sub	objptr, ##42008
14f30     08 4E 05 F1 | 	add	fp, #8
14f34     A7 3A 68 FC | 	wrlong	#29, fp
14f38     08 4E 85 F1 | 	sub	fp, #8
14f3c     A7 08 68 FC | 	wrlong	#4, fp
14f40     A7 12 02 F6 | 	mov	arg01, fp
14f44     0C 65 BF FD | 	call	#_push
14f48     A7 F0 03 F6 | 	mov	ptra, fp
14f4c     B2 00 A0 FD | 	call	#popregs_
14f50                 | _do_rdpin_ret
14f50     2D 00 64 FD | 	ret
14f54                 | 
14f54                 | ' 
14f54                 | ' '------------------- release
14f54                 | ' 
14f54                 | ' sub do_release
14f54                 | _do_release
14f54     00 4A 05 F6 | 	mov	COUNT_, #0
14f58     A8 00 A0 FD | 	call	#pushregs_
14f5c     10 F0 07 F1 | 	add	ptra, #16
14f60     58 64 BF FD | 	call	#_pop
14f64     FF 14 02 F6 | 	mov	arg02, result3
14f68     A7 FA 61 FC | 	wrlong	result1, fp
14f6c     04 4E 05 F1 | 	add	fp, #4
14f70     A7 FC 61 FC | 	wrlong	result2, fp
14f74     04 4E 05 F1 | 	add	fp, #4
14f78     A7 14 62 FC | 	wrlong	arg02, fp
14f7c     08 4E 85 F1 | 	sub	fp, #8
14f80     A7 12 02 F6 | 	mov	arg01, fp
14f84     18 66 BF FD | 	call	#_converttoint
14f88     0C 4E 05 F1 | 	add	fp, #12
14f8c     A7 FA 61 FC | 	wrlong	result1, fp
14f90                 | ' 
14f90                 | ' t1=pop()
14f90                 | ' channel=converttoint(t1)
14f90                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
14f90     0C 4E 85 F1 | 	sub	fp, #12
14f94     00 FA 55 F2 | 	cmps	result1, #0 wc
14f98     44 00 90 CD |  if_b	jmp	#LR__1770
14f9c     0C 4E 05 F1 | 	add	fp, #12
14fa0     A7 14 02 FB | 	rdlong	arg02, fp
14fa4     0C 4E 85 F1 | 	sub	fp, #12
14fa8     08 14 56 F2 | 	cmps	arg02, #8 wc
14fac     30 00 90 3D |  if_ae	jmp	#LR__1770
14fb0     37 00 00 FF 
14fb4     10 E4 05 F1 | 	add	objptr, ##28176
14fb8     F2 12 02 FB | 	rdlong	arg01, objptr
14fbc     37 00 00 FF 
14fc0     10 E4 85 F1 | 	sub	objptr, ##28176
14fc4     0C 4E 05 F1 | 	add	fp, #12
14fc8     A7 14 02 FB | 	rdlong	arg02, fp
14fcc     0C 4E 85 F1 | 	sub	fp, #12
14fd0     06 14 66 F0 | 	shl	arg02, #6
14fd4     0A 13 02 F1 | 	add	arg01, arg02
14fd8     2C 12 06 F1 | 	add	arg01, #44
14fdc     09 FF 69 FC | 	wrlong	#255, arg01
14fe0                 | LR__1770
14fe0     A7 F0 03 F6 | 	mov	ptra, fp
14fe4     B2 00 A0 FD | 	call	#popregs_
14fe8                 | _do_release_ret
14fe8     2D 00 64 FD | 	ret
14fec                 | 
14fec                 | ' 
14fec                 | ' '------------------- return
14fec                 | ' 
14fec                 | ' sub do_return()
14fec                 | _do_return
14fec                 | ' if gosubtop>0 then
14fec     50 00 00 FF 
14ff0     0C E5 05 F1 | 	add	objptr, ##41228
14ff4     F2 00 02 FB | 	rdlong	_var01, objptr
14ff8     50 00 00 FF 
14ffc     0C E5 85 F1 | 	sub	objptr, ##41228
15000     01 00 56 F2 | 	cmps	_var01, #1 wc
15004     8C 00 90 CD |  if_b	jmp	#LR__1780
15008     50 00 00 FF 
1500c     0C E5 05 F1 | 	add	objptr, ##41228
15010     F2 00 02 FB | 	rdlong	_var01, objptr
15014     03 00 66 F0 | 	shl	_var01, #3
15018     03 00 00 FF 
1501c     60 E5 85 F1 | 	sub	objptr, ##1888
15020     F2 00 02 F1 | 	add	_var01, objptr
15024     00 01 02 FB | 	rdlong	_var01, _var01
15028     03 00 00 FF 
1502c     0C E5 05 F1 | 	add	objptr, ##1804
15030     F2 00 62 FC | 	wrlong	_var01, objptr
15034     54 E4 05 F1 | 	add	objptr, #84
15038     F2 00 02 FB | 	rdlong	_var01, objptr
1503c     03 00 66 F0 | 	shl	_var01, #3
15040     03 00 00 FF 
15044     60 E5 85 F1 | 	sub	objptr, ##1888
15048     F2 00 02 F1 | 	add	_var01, objptr
1504c     04 00 06 F1 | 	add	_var01, #4
15050     00 01 02 FB | 	rdlong	_var01, _var01
15054     03 00 00 FF 
15058     10 E5 05 F1 | 	add	objptr, ##1808
1505c     F2 00 62 FC | 	wrlong	_var01, objptr
15060     06 00 00 FF 
15064     40 E4 85 F1 | 	sub	objptr, ##3136
15068     F2 00 02 FB | 	rdlong	_var01, objptr
1506c     01 00 86 F1 | 	sub	_var01, #1
15070     04 E4 05 F1 | 	add	objptr, #4
15074     F2 00 62 FC | 	wrlong	_var01, objptr
15078     06 00 00 FF 
1507c     8C E4 05 F1 | 	add	objptr, ##3212
15080     F2 00 02 FB | 	rdlong	_var01, objptr
15084     01 00 86 F1 | 	sub	_var01, #1
15088     F2 00 62 FC | 	wrlong	_var01, objptr
1508c     50 00 00 FF 
15090     0C E5 85 F1 | 	sub	objptr, ##41228
15094                 | LR__1780
15094                 | _do_return_ret
15094     2D 00 64 FD | 	ret
15098                 | 
15098                 | ' 
15098                 | ' '------------------- right$
15098                 | ' 
15098                 | ' sub do_right
15098                 | _do_right
15098     00 4A 05 F6 | 	mov	COUNT_, #0
1509c     A8 00 A0 FD | 	call	#pushregs_
150a0     14 F0 07 F1 | 	add	ptra, #20
150a4     4A 00 00 FF 
150a8     80 E4 05 F1 | 	add	objptr, ##38016
150ac     F2 16 02 FB | 	rdlong	arg03, objptr
150b0     0B 15 02 F6 | 	mov	arg02, arg03
150b4     01 14 66 F0 | 	shl	arg02, #1
150b8     0B 15 02 F1 | 	add	arg02, arg03
150bc     02 14 66 F0 | 	shl	arg02, #2
150c0     03 00 00 FF 
150c4     04 E4 85 F1 | 	sub	objptr, ##1540
150c8     F2 14 02 F1 | 	add	arg02, objptr
150cc     0A 17 02 FB | 	rdlong	arg03, arg02
150d0     0C 4E 05 F1 | 	add	fp, #12
150d4     A7 16 62 FC | 	wrlong	arg03, fp
150d8                 | ' 
150d8                 | ' numpar=compiledline(lineptr_e).result.uresult
150d8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
150d8     0C 4E 85 F1 | 	sub	fp, #12
150dc     02 16 0E F2 | 	cmp	arg03, #2 wz
150e0     47 00 00 FF 
150e4     7C E4 85 F1 | 	sub	objptr, ##36476
150e8     3C 00 90 AD |  if_e	jmp	#LR__1790
150ec     00 12 06 F6 | 	mov	arg01, #0
150f0     B4 11 B1 FD | 	call	#__system___getiolock_0542
150f4     FD 12 02 F6 | 	mov	arg01, result1
150f8     48 B7 B0 FD | 	call	#__system___lockmem
150fc     84 01 00 FF 
15100     8B 15 06 F6 | 	mov	arg02, ##@LR__5473
15104     00 12 06 F6 | 	mov	arg01, #0
15108     00 16 06 F6 | 	mov	arg03, #0
1510c     28 C4 B0 FD | 	call	#__system___basic_print_string
15110     00 12 06 F6 | 	mov	arg01, #0
15114     90 11 B1 FD | 	call	#__system___getiolock_0542
15118     FD 00 68 FC | 	wrlong	#0, result1
1511c     27 12 06 F6 | 	mov	arg01, #39
15120     90 81 B0 FD | 	call	#_printerror
15124     E8 00 90 FD | 	jmp	#LR__1793
15128                 | LR__1790
15128     90 62 BF FD | 	call	#_pop
1512c     FF 16 02 F6 | 	mov	arg03, result3
15130     A7 FA 61 FC | 	wrlong	result1, fp
15134     04 4E 05 F1 | 	add	fp, #4
15138     A7 FC 61 FC | 	wrlong	result2, fp
1513c     04 4E 05 F1 | 	add	fp, #4
15140     A7 16 62 FC | 	wrlong	arg03, fp
15144     08 4E 85 F1 | 	sub	fp, #8
15148     A7 12 02 F6 | 	mov	arg01, fp
1514c     50 64 BF FD | 	call	#_converttoint
15150     FD 16 02 F6 | 	mov	arg03, result1
15154     10 4E 05 F1 | 	add	fp, #16
15158     A7 16 62 FC | 	wrlong	arg03, fp
1515c     10 4E 85 F1 | 	sub	fp, #16
15160     58 62 BF FD | 	call	#_pop
15164     FF 16 02 F6 | 	mov	arg03, result3
15168     A7 FA 61 FC | 	wrlong	result1, fp
1516c     04 4E 05 F1 | 	add	fp, #4
15170     A7 FC 61 FC | 	wrlong	result2, fp
15174     04 4E 05 F1 | 	add	fp, #4
15178     A7 16 62 FC | 	wrlong	arg03, fp
1517c                 | ' t1=pop() : arg=converttoint(t1)
1517c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1517c     08 4E 85 F1 | 	sub	fp, #8
15180     2B 16 0E F2 | 	cmp	arg03, #43 wz
15184     18 00 90 5D |  if_ne	jmp	#LR__1791
15188     A7 12 02 FB | 	rdlong	arg01, fp
1518c     A4 63 BF FD | 	call	#_convertstring
15190     A7 FA 61 FC | 	wrlong	result1, fp
15194     08 4E 05 F1 | 	add	fp, #8
15198     A7 3E 68 FC | 	wrlong	#31, fp
1519c     08 4E 85 F1 | 	sub	fp, #8
151a0                 | LR__1791
151a0                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
151a0     08 4E 05 F1 | 	add	fp, #8
151a4     A7 16 02 FB | 	rdlong	arg03, fp
151a8     08 4E 85 F1 | 	sub	fp, #8
151ac     1F 16 0E F2 | 	cmp	arg03, #31 wz
151b0     3C 00 90 AD |  if_e	jmp	#LR__1792
151b4     00 12 06 F6 | 	mov	arg01, #0
151b8     EC 10 B1 FD | 	call	#__system___getiolock_0542
151bc     FD 12 02 F6 | 	mov	arg01, result1
151c0     80 B6 B0 FD | 	call	#__system___lockmem
151c4     84 01 00 FF 
151c8     94 15 06 F6 | 	mov	arg02, ##@LR__5474
151cc     00 12 06 F6 | 	mov	arg01, #0
151d0     00 16 06 F6 | 	mov	arg03, #0
151d4     60 C3 B0 FD | 	call	#__system___basic_print_string
151d8     00 12 06 F6 | 	mov	arg01, #0
151dc     C8 10 B1 FD | 	call	#__system___getiolock_0542
151e0     FD 00 68 FC | 	wrlong	#0, result1
151e4     0F 12 06 F6 | 	mov	arg01, #15
151e8     C8 80 B0 FD | 	call	#_printerror
151ec     20 00 90 FD | 	jmp	#LR__1793
151f0                 | LR__1792
151f0     A7 12 02 FB | 	rdlong	arg01, fp
151f4     10 4E 05 F1 | 	add	fp, #16
151f8     A7 14 02 FB | 	rdlong	arg02, fp
151fc     10 4E 85 F1 | 	sub	fp, #16
15200     44 D7 B0 FD | 	call	#__system__Right_S
15204     A7 FA 61 FC | 	wrlong	result1, fp
15208     A7 12 02 F6 | 	mov	arg01, fp
1520c     44 62 BF FD | 	call	#_push
15210                 | LR__1793
15210     A7 F0 03 F6 | 	mov	ptra, fp
15214     B2 00 A0 FD | 	call	#popregs_
15218                 | _do_right_ret
15218     2D 00 64 FD | 	ret
1521c                 | 
1521c                 | ' 
1521c                 | ' '------------------- rnd
1521c                 | ' 
1521c                 | ' sub do_rnd
1521c                 | _do_rnd
1521c     01 4A 05 F6 | 	mov	COUNT_, #1
15220     A8 00 A0 FD | 	call	#pushregs_
15224     10 F0 07 F1 | 	add	ptra, #16
15228     4A 00 00 FF 
1522c     80 E4 05 F1 | 	add	objptr, ##38016
15230     F2 1E 02 FB | 	rdlong	local01, objptr
15234     0F 17 02 F6 | 	mov	arg03, local01
15238     01 16 66 F0 | 	shl	arg03, #1
1523c     0F 17 02 F1 | 	add	arg03, local01
15240     02 16 66 F0 | 	shl	arg03, #2
15244     03 00 00 FF 
15248     04 E4 85 F1 | 	sub	objptr, ##1540
1524c     F2 16 02 F1 | 	add	arg03, objptr
15250     0B 17 02 FB | 	rdlong	arg03, arg03
15254     0C 4E 05 F1 | 	add	fp, #12
15258     A7 16 62 FC | 	wrlong	arg03, fp
1525c                 | ' 
1525c                 | ' numpar=compiledline(lineptr_e).result.uresult
1525c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1525c     0C 4E 85 F1 | 	sub	fp, #12
15260     02 16 16 F2 | 	cmp	arg03, #2 wc
15264     47 00 00 FF 
15268     7C E4 85 F1 | 	sub	objptr, ##36476
1526c     3C 00 90 CD |  if_b	jmp	#LR__1800
15270     00 12 06 F6 | 	mov	arg01, #0
15274     30 10 B1 FD | 	call	#__system___getiolock_0542
15278     FD 12 02 F6 | 	mov	arg01, result1
1527c     C4 B5 B0 FD | 	call	#__system___lockmem
15280     84 01 00 FF 
15284     9D 15 06 F6 | 	mov	arg02, ##@LR__5475
15288     00 12 06 F6 | 	mov	arg01, #0
1528c     00 16 06 F6 | 	mov	arg03, #0
15290     A4 C2 B0 FD | 	call	#__system___basic_print_string
15294     00 12 06 F6 | 	mov	arg01, #0
15298     0C 10 B1 FD | 	call	#__system___getiolock_0542
1529c     FD 00 68 FC | 	wrlong	#0, result1
152a0     27 12 06 F6 | 	mov	arg01, #39
152a4     0C 80 B0 FD | 	call	#_printerror
152a8     2C 01 90 FD | 	jmp	#LR__1807
152ac                 | LR__1800
152ac                 | ' if numpar=0 then
152ac     0C 4E 05 F1 | 	add	fp, #12
152b0     A7 FE 09 FB | 	rdlong	result3, fp wz
152b4     0C 4E 85 F1 | 	sub	fp, #12
152b8     20 00 90 5D |  if_ne	jmp	#LR__1801
152bc     08 4E 05 F1 | 	add	fp, #8
152c0     A7 3A 68 FC | 	wrlong	#29, fp
152c4     08 4E 85 F1 | 	sub	fp, #8
152c8     1B FA 61 FD | 	getrnd	result1
152cc     A7 FA 61 FC | 	wrlong	result1, fp
152d0     A7 12 02 F6 | 	mov	arg01, fp
152d4     7C 61 BF FD | 	call	#_push
152d8     FC 00 90 FD | 	jmp	#LR__1806
152dc                 | LR__1801
152dc     DC 60 BF FD | 	call	#_pop
152e0     A7 FA 61 FC | 	wrlong	result1, fp
152e4     04 4E 05 F1 | 	add	fp, #4
152e8     A7 FC 61 FC | 	wrlong	result2, fp
152ec     04 4E 05 F1 | 	add	fp, #4
152f0     A7 FE 61 FC | 	wrlong	result3, fp
152f4                 | '   t1=pop()
152f4                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
152f4     08 4E 85 F1 | 	sub	fp, #8
152f8     1C FE 0D F2 | 	cmp	result3, #28 wz
152fc     08 4E 05 51 |  if_ne	add	fp, #8
15300     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15304     08 4E 85 51 |  if_ne	sub	fp, #8
15308     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1530c     2C 00 90 5D |  if_ne	jmp	#LR__1802
15310     1B FA 61 FD | 	getrnd	result1
15314     A7 1E 02 FB | 	rdlong	local01, fp
15318     0F FB 11 FD | 	qdiv	result1, local01
1531c     A7 12 02 F6 | 	mov	arg01, fp
15320     19 1E 62 FD | 	getqy	local01
15324     A7 1E 62 FC | 	wrlong	local01, fp
15328     08 4E 05 F1 | 	add	fp, #8
1532c     A7 3A 68 FC | 	wrlong	#29, fp
15330     08 4E 85 F1 | 	sub	fp, #8
15334     1C 61 BF FD | 	call	#_push
15338     9C 00 90 FD | 	jmp	#LR__1805
1533c                 | LR__1802
1533c     08 4E 05 F1 | 	add	fp, #8
15340     A7 1E 02 FB | 	rdlong	local01, fp
15344     08 4E 85 F1 | 	sub	fp, #8
15348     1E 1E 0E F2 | 	cmp	local01, #30 wz
1534c     48 00 90 5D |  if_ne	jmp	#LR__1803
15350     A7 12 02 FB | 	rdlong	arg01, fp
15354     00 C0 24 FF 
15358     00 14 06 F6 | 	mov	arg02, ##1233125376
1535c     9C E2 B0 FD | 	call	#__system___float_div
15360     FD 1E 02 F6 | 	mov	local01, result1
15364     1B 12 62 FD | 	getrnd	arg01
15368     74 13 06 F4 | 	bitl	arg01, #372
1536c     84 DC B0 FD | 	call	#__system___float_fromuns
15370     FD 14 02 F6 | 	mov	arg02, result1
15374     0F 13 02 F6 | 	mov	arg01, local01
15378     7C E0 B0 FD | 	call	#__system___float_mul
1537c     A7 FA 61 FC | 	wrlong	result1, fp
15380     08 4E 05 F1 | 	add	fp, #8
15384     A7 3C 68 FC | 	wrlong	#30, fp
15388     08 4E 85 F1 | 	sub	fp, #8
1538c     A7 12 02 F6 | 	mov	arg01, fp
15390     C0 60 BF FD | 	call	#_push
15394     40 00 90 FD | 	jmp	#LR__1804
15398                 | LR__1803
15398                 | '     print "rnd: "; : printerror(40) 
15398     00 12 06 F6 | 	mov	arg01, #0
1539c     08 0F B1 FD | 	call	#__system___getiolock_0542
153a0     FD 12 02 F6 | 	mov	arg01, result1
153a4     9C B4 B0 FD | 	call	#__system___lockmem
153a8     84 01 00 FF 
153ac     A3 15 06 F6 | 	mov	arg02, ##@LR__5476
153b0     00 12 06 F6 | 	mov	arg01, #0
153b4     00 16 06 F6 | 	mov	arg03, #0
153b8     7C C1 B0 FD | 	call	#__system___basic_print_string
153bc     00 12 06 F6 | 	mov	arg01, #0
153c0     E4 0E B1 FD | 	call	#__system___getiolock_0542
153c4     FD 00 68 FC | 	wrlong	#0, result1
153c8     28 12 06 F6 | 	mov	arg01, #40
153cc     E4 7E B0 FD | 	call	#_printerror
153d0     A7 12 02 F6 | 	mov	arg01, fp
153d4     7C 60 BF FD | 	call	#_push
153d8                 | LR__1804
153d8                 | LR__1805
153d8                 | LR__1806
153d8                 | LR__1807
153d8     A7 F0 03 F6 | 	mov	ptra, fp
153dc     B2 00 A0 FD | 	call	#popregs_
153e0                 | _do_rnd_ret
153e0     2D 00 64 FD | 	ret
153e4                 | 
153e4                 | ' 
153e4                 | ' '-------------------- round
153e4                 | ' 
153e4                 | ' sub do_round
153e4                 | _do_round
153e4     00 4A 05 F6 | 	mov	COUNT_, #0
153e8     A8 00 A0 FD | 	call	#pushregs_
153ec     0C F0 07 F1 | 	add	ptra, #12
153f0     C8 5F BF FD | 	call	#_pop
153f4     A7 FA 61 FC | 	wrlong	result1, fp
153f8     04 4E 05 F1 | 	add	fp, #4
153fc     A7 FC 61 FC | 	wrlong	result2, fp
15400     04 4E 05 F1 | 	add	fp, #4
15404     A7 FE 61 FC | 	wrlong	result3, fp
15408     08 4E 85 F1 | 	sub	fp, #8
1540c     A7 12 02 F6 | 	mov	arg01, fp
15410     8C 61 BF FD | 	call	#_converttoint
15414     A7 FA 61 FC | 	wrlong	result1, fp
15418     08 4E 05 F1 | 	add	fp, #8
1541c     A7 38 68 FC | 	wrlong	#28, fp
15420     08 4E 85 F1 | 	sub	fp, #8
15424     A7 12 02 F6 | 	mov	arg01, fp
15428     28 60 BF FD | 	call	#_push
1542c     A7 F0 03 F6 | 	mov	ptra, fp
15430     B2 00 A0 FD | 	call	#popregs_
15434                 | _do_round_ret
15434     2D 00 64 FD | 	ret
15438                 | 
15438                 | ' 
15438                 | ' '-------------------- rqpin
15438                 | ' 
15438                 | ' sub do_rqpin
15438                 | _do_rqpin
15438     00 4A 05 F6 | 	mov	COUNT_, #0
1543c     A8 00 A0 FD | 	call	#pushregs_
15440     0C F0 07 F1 | 	add	ptra, #12
15444     74 5F BF FD | 	call	#_pop
15448     A7 FA 61 FC | 	wrlong	result1, fp
1544c     04 4E 05 F1 | 	add	fp, #4
15450     A7 FC 61 FC | 	wrlong	result2, fp
15454     04 4E 05 F1 | 	add	fp, #4
15458     A7 FE 61 FC | 	wrlong	result3, fp
1545c     08 4E 85 F1 | 	sub	fp, #8
15460     A7 12 02 F6 | 	mov	arg01, fp
15464     38 61 BF FD | 	call	#_converttoint
15468     FD 12 02 F6 | 	mov	arg01, result1
1546c     00 FA 05 F6 | 	mov	result1, #0
15470     09 FB 81 FA | 	rqpin	result1, arg01
15474     52 00 00 FF 
15478     18 E4 05 F1 | 	add	objptr, ##42008
1547c     F2 FA 61 FC | 	wrlong	result1, objptr
15480     52 00 00 FF 
15484     18 E4 85 F1 | 	sub	objptr, ##42008
15488     08 4E 05 F1 | 	add	fp, #8
1548c     A7 3A 68 FC | 	wrlong	#29, fp
15490     08 4E 85 F1 | 	sub	fp, #8
15494     A7 08 68 FC | 	wrlong	#4, fp
15498     A7 12 02 F6 | 	mov	arg01, fp
1549c     B4 5F BF FD | 	call	#_push
154a0     A7 F0 03 F6 | 	mov	ptra, fp
154a4     B2 00 A0 FD | 	call	#popregs_
154a8                 | _do_rqpin_ret
154a8     2D 00 64 FD | 	ret
154ac                 | 
154ac                 | ' 
154ac                 | ' ' ------------------ run
154ac                 | ' 
154ac                 | ' sub do_run
154ac                 | _do_run
154ac     04 4A 05 F6 | 	mov	COUNT_, #4
154b0     A8 00 A0 FD | 	call	#pushregs_
154b4     4A 00 00 FF 
154b8     80 E4 05 F1 | 	add	objptr, ##38016
154bc     F2 1E 02 FB | 	rdlong	local01, objptr
154c0     06 00 00 FF 
154c4     38 E4 05 F1 | 	add	objptr, ##3128
154c8     F2 20 02 FB | 	rdlong	local02, objptr
154cc     04 E4 05 F1 | 	add	objptr, #4
154d0     F2 22 02 FB | 	rdlong	local03, objptr
154d4     0F 19 02 F6 | 	mov	arg04, local01
154d8     0C 17 02 F6 | 	mov	arg03, arg04
154dc     01 16 66 F0 | 	shl	arg03, #1
154e0     0C 17 02 F1 | 	add	arg03, arg04
154e4     02 16 66 F0 | 	shl	arg03, #2
154e8     09 00 00 FF 
154ec     40 E4 85 F1 | 	sub	objptr, ##4672
154f0     F2 16 02 F1 | 	add	arg03, objptr
154f4     0B 15 02 FB | 	rdlong	arg02, arg03
154f8                 | ' 
154f8                 | ' r_lineptr_e=lineptr_e
154f8                 | ' r_runptr=runptr
154f8                 | ' r_runptr2=runptr2
154f8                 | ' 
154f8                 | ' numpar=compiledline(lineptr_e).result.uresult
154f8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
154f8     01 14 0E F2 | 	cmp	arg02, #1 wz
154fc     47 00 00 FF 
15500     7C E4 85 F1 | 	sub	objptr, ##36476
15504     00 12 06 A6 |  if_e	mov	arg01, #0
15508     C8 C3 BF AD |  if_e	call	#_do_load
1550c     4A 00 00 FF 
15510     88 E4 05 F1 | 	add	objptr, ##38024
15514     F2 18 02 FB | 	rdlong	arg04, objptr
15518     06 00 00 FF 
1551c     30 E4 05 F1 | 	add	objptr, ##3120
15520     F2 18 62 FC | 	wrlong	arg04, objptr
15524     04 E4 05 F1 | 	add	objptr, #4
15528     F2 00 68 FC | 	wrlong	#0, objptr
1552c     04 E4 05 F1 | 	add	objptr, #4
15530     FF FF FF FF 
15534     F2 FE 6B FC | 	wrlong	##-1, objptr
15538                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
15538                 | ' if inrun>0 then 
15538     2C E4 05 F1 | 	add	objptr, #44
1553c     F2 18 02 FB | 	rdlong	arg04, objptr
15540     50 00 00 FF 
15544     EC E4 85 F1 | 	sub	objptr, ##41196
15548     01 18 16 F2 | 	cmp	arg04, #1 wc
1554c     30 00 90 CD |  if_b	jmp	#LR__1810
15550     50 00 00 FF 
15554     F0 E4 05 F1 | 	add	objptr, ##41200
15558     F2 12 02 F6 | 	mov	arg01, objptr
1555c     38 E4 85 F1 | 	sub	objptr, #56
15560     F2 14 02 FB | 	rdlong	arg02, objptr
15564     18 16 06 F6 | 	mov	arg03, #24
15568     44 00 00 FF 
1556c     EC E5 85 F1 | 	sub	objptr, ##35308
15570     90 A6 B0 FD | 	call	#_psram_spin2_read1
15574     0B 00 00 FF 
15578     CC E4 85 F1 | 	sub	objptr, ##5836
1557c                 | '   psram.read1(varptr(runheader),runptr,24)  
1557c                 | '   return
1557c     D4 02 90 FD | 	jmp	#LR__1816
15580                 | LR__1810
15580     50 00 00 FF 
15584     EC E4 05 F1 | 	add	objptr, ##41196
15588     F2 02 68 FC | 	wrlong	#1, objptr
1558c     04 E4 05 F1 | 	add	objptr, #4
15590     F2 12 02 F6 | 	mov	arg01, objptr
15594     38 E4 85 F1 | 	sub	objptr, #56
15598     F2 14 02 FB | 	rdlong	arg02, objptr
1559c     18 16 06 F6 | 	mov	arg03, #24
155a0     44 00 00 FF 
155a4     EC E5 85 F1 | 	sub	objptr, ##35308
155a8     58 A6 B0 FD | 	call	#_psram_spin2_read1
155ac                 | ' inrun=1
155ac                 | ' psram.read1(varptr(runheader),runptr,24) 
155ac                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
155ac     45 00 00 FF 
155b0     24 E4 05 F1 | 	add	objptr, ##35364
155b4     F2 24 02 FB | 	rdlong	local04, objptr
155b8     50 00 00 FF 
155bc     F0 E4 85 F1 | 	sub	objptr, ##41200
155c0     FF FF 7F FF 
155c4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
155c8     50 00 00 AF 
155cc     EC E4 05 A1 |  if_e	add	objptr, ##41196
155d0     F2 00 68 AC |  if_e	wrlong	#0, objptr
155d4     50 00 00 AF 
155d8     EC E4 85 A1 |  if_e	sub	objptr, ##41196
155dc     74 02 90 AD |  if_e	jmp	#LR__1816
155e0                 | ' do 
155e0                 | LR__1811
155e0                 | '   if runptr<>oldrunptr then
155e0     50 00 00 FF 
155e4     B8 E4 05 F1 | 	add	objptr, ##41144
155e8     F2 24 02 FB | 	rdlong	local04, objptr
155ec     08 E4 05 F1 | 	add	objptr, #8
155f0     F2 18 02 FB | 	rdlong	arg04, objptr
155f4     50 00 00 FF 
155f8     C0 E4 85 F1 | 	sub	objptr, ##41152
155fc     0C 25 0A F2 | 	cmp	local04, arg04 wz
15600     CC 00 90 AD |  if_e	jmp	#LR__1812
15604     50 00 00 FF 
15608     F0 E4 05 F1 | 	add	objptr, ##41200
1560c     F2 12 02 F6 | 	mov	arg01, objptr
15610     38 E4 85 F1 | 	sub	objptr, #56
15614     F2 14 02 FB | 	rdlong	arg02, objptr
15618     18 16 06 F6 | 	mov	arg03, #24
1561c     44 00 00 FF 
15620     EC E5 85 F1 | 	sub	objptr, ##35308
15624     DC A5 B0 FD | 	call	#_psram_spin2_read1
15628     3B 00 00 FF 
1562c     B0 E5 05 F1 | 	add	objptr, ##30640
15630     F2 12 02 F6 | 	mov	arg01, objptr
15634     09 00 00 FF 
15638     3C E4 05 F1 | 	add	objptr, ##4668
1563c     F2 14 02 FB | 	rdlong	arg02, objptr
15640     0B 00 00 FF 
15644     54 E4 85 F1 | 	sub	objptr, ##5716
15648     F2 24 02 FB | 	rdlong	local04, objptr
1564c     01 24 66 F0 | 	shl	local04, #1
15650     12 15 02 F1 | 	add	arg02, local04
15654     0B 00 00 FF 
15658     94 E4 05 F1 | 	add	objptr, ##5780
1565c     F2 16 02 FB | 	rdlong	arg03, objptr
15660     40 E4 85 F1 | 	sub	objptr, #64
15664     F2 24 02 FB | 	rdlong	local04, objptr
15668     12 17 82 F1 | 	sub	arg03, local04
1566c     44 00 00 FF 
15670     EC E5 85 F1 | 	sub	objptr, ##35308
15674     8C A5 B0 FD | 	call	#_psram_spin2_read1
15678     45 00 00 FF 
1567c     2C E4 05 F1 | 	add	objptr, ##35372
15680     F2 24 02 FB | 	rdlong	local04, objptr
15684     40 E4 85 F1 | 	sub	objptr, #64
15688     F2 14 02 FB | 	rdlong	arg02, objptr
1568c     0A 25 82 F1 | 	sub	local04, arg02
15690     0B 00 00 FF 
15694     54 E4 85 F1 | 	sub	objptr, ##5716
15698     F2 14 02 FB | 	rdlong	arg02, objptr
1569c     0A 25 12 FD | 	qdiv	local04, arg02
156a0     05 00 00 FF 
156a4     18 E4 05 F1 | 	add	objptr, ##2584
156a8     18 24 62 FD | 	getqx	local04
156ac     03 24 86 F1 | 	sub	local04, #3
156b0     F2 24 62 FC | 	wrlong	local04, objptr
156b4     06 00 00 FF 
156b8     3C E4 05 F1 | 	add	objptr, ##3132
156bc     F2 24 02 FB | 	rdlong	local04, objptr
156c0     08 E4 05 F1 | 	add	objptr, #8
156c4     F2 24 62 FC | 	wrlong	local04, objptr
156c8     50 00 00 FF 
156cc     C0 E4 85 F1 | 	sub	objptr, ##41152
156d0                 | LR__1812
156d0     50 00 00 FF 
156d4     04 E5 05 F1 | 	add	objptr, ##41220
156d8     F2 24 02 FB | 	rdlong	local04, objptr
156dc     4C E4 85 F1 | 	sub	objptr, #76
156e0     F2 24 62 FC | 	wrlong	local04, objptr
156e4     04 E4 05 F1 | 	add	objptr, #4
156e8     F2 12 02 FB | 	rdlong	arg01, objptr
156ec     50 00 00 FF 
156f0     BC E4 85 F1 | 	sub	objptr, ##41148
156f4     C0 5B BF FD | 	call	#_execute_line
156f8     50 00 00 FF 
156fc     BC E4 05 F1 | 	add	objptr, ##41148
15700     F2 FA 61 FC | 	wrlong	result1, objptr
15704     04 E4 85 F1 | 	sub	objptr, #4
15708     F2 24 02 FB | 	rdlong	local04, objptr
1570c     50 00 00 FF 
15710     B8 E4 85 F1 | 	sub	objptr, ##41144
15714     FF FF 3F FF 
15718     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
1571c     30 00 90 AD |  if_e	jmp	#LR__1814
15720     E0 12 06 F6 | 	mov	arg01, #224
15724     6C A8 B0 FD | 	call	#_usbnew_spin2_keystate
15728     00 FA 0D F2 | 	cmp	result1, #0 wz
1572c     10 00 90 5D |  if_ne	jmp	#LR__1813
15730     E4 12 06 F6 | 	mov	arg01, #228
15734     5C A8 B0 FD | 	call	#_usbnew_spin2_keystate
15738     00 FA 0D F2 | 	cmp	result1, #0 wz
1573c     A0 FE 9F AD |  if_e	jmp	#LR__1811
15740                 | LR__1813
15740     06 12 06 F6 | 	mov	arg01, #6
15744     4C A8 B0 FD | 	call	#_usbnew_spin2_keystate
15748     00 FA 0D F2 | 	cmp	result1, #0 wz
1574c     90 FE 9F AD |  if_e	jmp	#LR__1811
15750                 | LR__1814
15750                 | '   ''do whatever kbm.peek_latest_key()=$106 
15750                 | ' if runptr<>$7FFF_FFFF then 
15750     50 00 00 FF 
15754     B8 E4 05 F1 | 	add	objptr, ##41144
15758     F2 24 02 FB | 	rdlong	local04, objptr
1575c     50 00 00 FF 
15760     B8 E4 85 F1 | 	sub	objptr, ##41144
15764     FF FF 3F FF 
15768     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
1576c     90 00 90 AD |  if_e	jmp	#LR__1815
15770                 | '   print: print "Stopped at line ";runheader(0) 
15770     00 12 06 F6 | 	mov	arg01, #0
15774     30 0B B1 FD | 	call	#__system___getiolock_0542
15778     FD 12 02 F6 | 	mov	arg01, result1
1577c     C4 B0 B0 FD | 	call	#__system___lockmem
15780     00 12 06 F6 | 	mov	arg01, #0
15784     0A 14 06 F6 | 	mov	arg02, #10
15788     00 16 06 F6 | 	mov	arg03, #0
1578c     50 BD B0 FD | 	call	#__system___basic_print_char
15790     00 12 06 F6 | 	mov	arg01, #0
15794     10 0B B1 FD | 	call	#__system___getiolock_0542
15798     FD 00 68 FC | 	wrlong	#0, result1
1579c     00 12 06 F6 | 	mov	arg01, #0
157a0     04 0B B1 FD | 	call	#__system___getiolock_0542
157a4     FD 12 02 F6 | 	mov	arg01, result1
157a8     98 B0 B0 FD | 	call	#__system___lockmem
157ac     84 01 00 FF 
157b0     A9 15 06 F6 | 	mov	arg02, ##@LR__5477
157b4     00 12 06 F6 | 	mov	arg01, #0
157b8     00 16 06 F6 | 	mov	arg03, #0
157bc     78 BD B0 FD | 	call	#__system___basic_print_string
157c0     50 00 00 FF 
157c4     F0 E4 05 F1 | 	add	objptr, ##41200
157c8     F2 14 02 FB | 	rdlong	arg02, objptr
157cc     50 00 00 FF 
157d0     F0 E4 85 F1 | 	sub	objptr, ##41200
157d4     00 12 06 F6 | 	mov	arg01, #0
157d8     00 16 06 F6 | 	mov	arg03, #0
157dc     0A 18 06 F6 | 	mov	arg04, #10
157e0     D8 BD B0 FD | 	call	#__system___basic_print_unsigned
157e4     00 12 06 F6 | 	mov	arg01, #0
157e8     0A 14 06 F6 | 	mov	arg02, #10
157ec     00 16 06 F6 | 	mov	arg03, #0
157f0     EC BC B0 FD | 	call	#__system___basic_print_char
157f4     00 12 06 F6 | 	mov	arg01, #0
157f8     AC 0A B1 FD | 	call	#__system___getiolock_0542
157fc     FD 00 68 FC | 	wrlong	#0, result1
15800                 | LR__1815
15800     50 00 00 FF 
15804     EC E4 05 F1 | 	add	objptr, ##41196
15808     F2 00 68 FC | 	wrlong	#0, objptr
1580c     06 00 00 FF 
15810     6C E4 85 F1 | 	sub	objptr, ##3180
15814     F2 1E 62 FC | 	wrlong	local01, objptr
15818     06 00 00 FF 
1581c     38 E4 05 F1 | 	add	objptr, ##3128
15820     F2 20 62 FC | 	wrlong	local02, objptr
15824     04 E4 05 F1 | 	add	objptr, #4
15828     F2 22 62 FC | 	wrlong	local03, objptr
1582c     50 00 00 FF 
15830     BC E4 85 F1 | 	sub	objptr, ##41148
15834     11 12 06 F6 | 	mov	arg01, #17
15838     08 14 06 F6 | 	mov	arg02, #8
1583c     10 16 06 F6 | 	mov	arg03, #16
15840     04 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
15844     10 12 06 F6 | 	mov	arg01, #16
15848     20 14 06 F6 | 	mov	arg02, #32
1584c     20 16 06 F6 | 	mov	arg03, #32
15850     F4 89 B0 FD | 	call	#_hg010b_spin2_setspritesize
15854                 | LR__1816
15854     A7 F0 03 F6 | 	mov	ptra, fp
15858     B2 00 A0 FD | 	call	#popregs_
1585c                 | _do_run_ret
1585c     2D 00 64 FD | 	ret
15860                 | 
15860                 | ' 
15860                 | ' ' ------------------ save
15860                 | ' 
15860                 | ' sub do_save                        
15860                 | _do_save
15860     04 4A 05 F6 | 	mov	COUNT_, #4
15864     A8 00 A0 FD | 	call	#pushregs_
15868     B8 F0 07 F1 | 	add	ptra, #184
1586c     4A 00 00 FF 
15870     80 E4 05 F1 | 	add	objptr, ##38016
15874     F2 1E 02 FB | 	rdlong	local01, objptr
15878     0F 21 02 F6 | 	mov	local02, local01
1587c     01 20 66 F0 | 	shl	local02, #1
15880     0F 21 02 F1 | 	add	local02, local01
15884     02 20 66 F0 | 	shl	local02, #2
15888     03 00 00 FF 
1588c     04 E4 85 F1 | 	sub	objptr, ##1540
15890     F2 20 02 F1 | 	add	local02, objptr
15894     10 23 02 FB | 	rdlong	local03, local02
15898     10 4E 05 F1 | 	add	fp, #16
1589c     A7 22 62 FC | 	wrlong	local03, fp
158a0                 | ' 
158a0                 | ' numpar=compiledline(lineptr_e).result.uresult
158a0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
158a0     10 4E 85 F1 | 	sub	fp, #16
158a4     01 22 56 F2 | 	cmps	local03, #1 wc
158a8     47 00 00 FF 
158ac     7C E4 85 F1 | 	sub	objptr, ##36476
158b0     20 00 90 CD |  if_b	jmp	#LR__1820
158b4     04 5B BF FD | 	call	#_pop
158b8     A7 FA 61 FC | 	wrlong	result1, fp
158bc     04 4E 05 F1 | 	add	fp, #4
158c0     A7 FC 61 FC | 	wrlong	result2, fp
158c4     04 4E 05 F1 | 	add	fp, #4
158c8     A7 FE 61 FC | 	wrlong	result3, fp
158cc     08 4E 85 F1 | 	sub	fp, #8
158d0     24 00 90 FD | 	jmp	#LR__1821
158d4                 | LR__1820
158d4     51 00 00 FF 
158d8     D8 E5 05 F1 | 	add	objptr, ##41944
158dc     F2 22 02 FB | 	rdlong	local03, objptr
158e0     51 00 00 FF 
158e4     D8 E5 85 F1 | 	sub	objptr, ##41944
158e8     A7 22 62 FC | 	wrlong	local03, fp
158ec     08 4E 05 F1 | 	add	fp, #8
158f0     A7 3E 68 FC | 	wrlong	#31, fp
158f4     08 4E 85 F1 | 	sub	fp, #8
158f8                 | LR__1821
158f8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
158f8     4A 00 00 FF 
158fc     88 E4 05 F1 | 	add	objptr, ##38024
15900     F2 12 02 FB | 	rdlong	arg01, objptr
15904     4A 00 00 FF 
15908     88 E4 85 F1 | 	sub	objptr, ##38024
1590c     38 7C B0 FD | 	call	#_pslpeek
15910     FF FF 7F FF 
15914     FF FB 0D F2 | 	cmp	result1, ##-1 wz
15918     0C 00 90 5D |  if_ne	jmp	#LR__1822
1591c     1B 12 06 F6 | 	mov	arg01, #27
15920     90 79 B0 FD | 	call	#_printerror
15924     CC 02 90 FD | 	jmp	#LR__1828
15928                 | LR__1822
15928                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
15928     08 4E 05 F1 | 	add	fp, #8
1592c     A7 22 02 FB | 	rdlong	local03, fp
15930     08 4E 85 F1 | 	sub	fp, #8
15934     2B 22 0E F2 | 	cmp	local03, #43 wz
15938     18 00 90 5D |  if_ne	jmp	#LR__1823
1593c     A7 12 02 FB | 	rdlong	arg01, fp
15940     F0 5B BF FD | 	call	#_convertstring
15944     A7 FA 61 FC | 	wrlong	result1, fp
15948     08 4E 05 F1 | 	add	fp, #8
1594c     A7 3E 68 FC | 	wrlong	#31, fp
15950     08 4E 85 F1 | 	sub	fp, #8
15954                 | LR__1823
15954                 | ' if t1.result_type=result_string then
15954     08 4E 05 F1 | 	add	fp, #8
15958     A7 22 02 FB | 	rdlong	local03, fp
1595c     08 4E 85 F1 | 	sub	fp, #8
15960     1F 22 0E F2 | 	cmp	local03, #31 wz
15964     8C 02 90 5D |  if_ne	jmp	#LR__1827
15968                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
15968     A7 12 02 FB | 	rdlong	arg01, fp
1596c     84 01 00 FF 
15970     BA 15 06 F6 | 	mov	arg02, ##@LR__5478
15974     F4 AE B0 FD | 	call	#__system___string_cmp
15978     00 FA 0D F2 | 	cmp	result1, #0 wz
1597c     51 00 00 AF 
15980     D8 E5 05 A1 |  if_e	add	objptr, ##41944
15984     F2 22 02 AB |  if_e	rdlong	local03, objptr
15988     A7 22 62 AC |  if_e	wrlong	local03, fp
1598c     51 00 00 AF 
15990     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
15994     A7 22 02 5B |  if_ne	rdlong	local03, fp
15998     51 00 00 5F 
1599c     D8 E5 05 51 |  if_ne	add	objptr, ##41944
159a0     F2 22 62 5C |  if_ne	wrlong	local03, objptr
159a4     51 00 00 5F 
159a8     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
159ac                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
159ac     09 12 06 F6 | 	mov	arg01, #9
159b0     24 FF B0 FD | 	call	#__system__close
159b4     09 22 06 F6 | 	mov	local03, #9
159b8     4A 00 00 FF 
159bc     94 E4 05 F1 | 	add	objptr, ##38036
159c0     F2 12 02 FB | 	rdlong	arg01, objptr
159c4     4A 00 00 FF 
159c8     94 E4 85 F1 | 	sub	objptr, ##38036
159cc     84 01 00 FF 
159d0     BB 15 06 F6 | 	mov	arg02, ##@LR__5479
159d4     C8 AE B0 FD | 	call	#__system___string_concat
159d8     FD 12 02 F6 | 	mov	arg01, result1
159dc     A7 14 02 FB | 	rdlong	arg02, fp
159e0     BC AE B0 FD | 	call	#__system___string_concat
159e4     FD 14 02 F6 | 	mov	arg02, result1
159e8     11 13 02 F6 | 	mov	arg01, local03
159ec     0D 16 06 F6 | 	mov	arg03, #13
159f0     54 BA B0 FD | 	call	#__system___basic_open_string
159f4     4A 00 00 FF 
159f8     88 E4 05 F1 | 	add	objptr, ##38024
159fc     F2 22 02 FB | 	rdlong	local03, objptr
15a00     4A 00 00 FF 
15a04     88 E4 85 F1 | 	sub	objptr, ##38024
15a08     B0 4E 05 F1 | 	add	fp, #176
15a0c     A7 22 62 FC | 	wrlong	local03, fp
15a10     B0 4E 85 F1 | 	sub	fp, #176
15a14                 | '   saveptr=programstart
15a14                 | '   do
15a14                 | LR__1824
15a14     14 4E 05 F1 | 	add	fp, #20
15a18     A7 12 02 F6 | 	mov	arg01, fp
15a1c     9C 4E 05 F1 | 	add	fp, #156
15a20     A7 14 02 FB | 	rdlong	arg02, fp
15a24     B0 4E 85 F1 | 	sub	fp, #176
15a28     18 16 06 F6 | 	mov	arg03, #24
15a2c     0B 00 00 FF 
15a30     CC E4 05 F1 | 	add	objptr, ##5836
15a34     CC A1 B0 FD | 	call	#_psram_spin2_read1
15a38     2C 4E 05 F1 | 	add	fp, #44
15a3c     A7 12 02 F6 | 	mov	arg01, fp
15a40     10 4E 85 F1 | 	sub	fp, #16
15a44     A7 14 02 FB | 	rdlong	arg02, fp
15a48     04 4E 05 F1 | 	add	fp, #4
15a4c     A7 16 02 FB | 	rdlong	arg03, fp
15a50     20 4E 85 F1 | 	sub	fp, #32
15a54     AC A1 B0 FD | 	call	#_psram_spin2_read1
15a58     0B 00 00 FF 
15a5c     CC E4 85 F1 | 	sub	objptr, ##5836
15a60     84 01 00 FF 
15a64     BD 23 06 F6 | 	mov	local03, ##@LR__5480
15a68     AC 4E 05 F1 | 	add	fp, #172
15a6c     A7 22 62 FC | 	wrlong	local03, fp
15a70                 | '     psram.read1(varptr(header(0)),saveptr,24)
15a70                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
15a70                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
15a70     A0 4E 85 F1 | 	sub	fp, #160
15a74     A7 02 68 FC | 	wrlong	#1, fp
15a78     14 4E 05 F1 | 	add	fp, #20
15a7c     A7 24 02 FB | 	rdlong	local04, fp
15a80     20 4E 85 F1 | 	sub	fp, #32
15a84     01 24 06 F1 | 	add	local04, #1
15a88                 | LR__1825
15a88     0C 4E 05 F1 | 	add	fp, #12
15a8c     A7 22 02 FB | 	rdlong	local03, fp
15a90     0C 4E 85 F1 | 	sub	fp, #12
15a94     12 23 52 F2 | 	cmps	local03, local04 wc
15a98     54 00 90 3D |  if_ae	jmp	#LR__1826
15a9c     AC 4E 05 F1 | 	add	fp, #172
15aa0     A7 1E 02 FB | 	rdlong	local01, fp
15aa4     A0 4E 85 F1 | 	sub	fp, #160
15aa8     A7 22 02 FB | 	rdlong	local03, fp
15aac     01 22 86 F1 | 	sub	local03, #1
15ab0     20 4E 05 F1 | 	add	fp, #32
15ab4     A7 22 02 F1 | 	add	local03, fp
15ab8     11 13 C2 FA | 	rdbyte	arg01, local03
15abc     2C 4E 85 F1 | 	sub	fp, #44
15ac0     C0 CF B0 FD | 	call	#__system__Chr_S
15ac4     FD 14 02 F6 | 	mov	arg02, result1
15ac8     0F 13 02 F6 | 	mov	arg01, local01
15acc     D0 AD B0 FD | 	call	#__system___string_concat
15ad0     AC 4E 05 F1 | 	add	fp, #172
15ad4     A7 FA 61 FC | 	wrlong	result1, fp
15ad8     A0 4E 85 F1 | 	sub	fp, #160
15adc     A7 22 02 FB | 	rdlong	local03, fp
15ae0     01 22 06 F1 | 	add	local03, #1
15ae4     A7 22 62 FC | 	wrlong	local03, fp
15ae8     0C 4E 85 F1 | 	sub	fp, #12
15aec     98 FF 9F FD | 	jmp	#LR__1825
15af0                 | LR__1826
15af0                 | '     print #9, saveline$
15af0     09 12 06 F6 | 	mov	arg01, #9
15af4     B0 07 B1 FD | 	call	#__system___getiolock_0542
15af8     FD 12 02 F6 | 	mov	arg01, result1
15afc     44 AD B0 FD | 	call	#__system___lockmem
15b00     AC 4E 05 F1 | 	add	fp, #172
15b04     A7 14 02 FB | 	rdlong	arg02, fp
15b08     AC 4E 85 F1 | 	sub	fp, #172
15b0c     09 12 06 F6 | 	mov	arg01, #9
15b10     00 16 06 F6 | 	mov	arg03, #0
15b14     20 BA B0 FD | 	call	#__system___basic_print_string
15b18     09 12 06 F6 | 	mov	arg01, #9
15b1c     0A 14 06 F6 | 	mov	arg02, #10
15b20     00 16 06 F6 | 	mov	arg03, #0
15b24     B8 B9 B0 FD | 	call	#__system___basic_print_char
15b28     09 12 06 F6 | 	mov	arg01, #9
15b2c     78 07 B1 FD | 	call	#__system___getiolock_0542
15b30     FD 00 68 FC | 	wrlong	#0, result1
15b34     28 4E 05 F1 | 	add	fp, #40
15b38     A7 22 02 FB | 	rdlong	local03, fp
15b3c     88 4E 05 F1 | 	add	fp, #136
15b40     A7 22 62 FC | 	wrlong	local03, fp
15b44     88 4E 85 F1 | 	sub	fp, #136
15b48     A7 22 02 FB | 	rdlong	local03, fp
15b4c     28 4E 85 F1 | 	sub	fp, #40
15b50     FF FF 3F FF 
15b54     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
15b58     B8 FE 9F 5D |  if_ne	jmp	#LR__1824
15b5c                 | '   close #9  
15b5c     09 12 06 F6 | 	mov	arg01, #9
15b60     74 FD B0 FD | 	call	#__system__close
15b64                 | '   print "Saved as ";currentdir$+"/"+loadname
15b64     00 12 06 F6 | 	mov	arg01, #0
15b68     3C 07 B1 FD | 	call	#__system___getiolock_0542
15b6c     FD 12 02 F6 | 	mov	arg01, result1
15b70     D0 AC B0 FD | 	call	#__system___lockmem
15b74     84 01 00 FF 
15b78     BE 15 06 F6 | 	mov	arg02, ##@LR__5481
15b7c     00 12 06 F6 | 	mov	arg01, #0
15b80     00 16 06 F6 | 	mov	arg03, #0
15b84     B0 B9 B0 FD | 	call	#__system___basic_print_string
15b88     00 20 06 F6 | 	mov	local02, #0
15b8c     4A 00 00 FF 
15b90     94 E4 05 F1 | 	add	objptr, ##38036
15b94     F2 12 02 FB | 	rdlong	arg01, objptr
15b98     4A 00 00 FF 
15b9c     94 E4 85 F1 | 	sub	objptr, ##38036
15ba0     84 01 00 FF 
15ba4     C8 15 06 F6 | 	mov	arg02, ##@LR__5482
15ba8     F4 AC B0 FD | 	call	#__system___string_concat
15bac     FD 12 02 F6 | 	mov	arg01, result1
15bb0     51 00 00 FF 
15bb4     D8 E5 05 F1 | 	add	objptr, ##41944
15bb8     F2 14 02 FB | 	rdlong	arg02, objptr
15bbc     51 00 00 FF 
15bc0     D8 E5 85 F1 | 	sub	objptr, ##41944
15bc4     D8 AC B0 FD | 	call	#__system___string_concat
15bc8     FD 14 02 F6 | 	mov	arg02, result1
15bcc     10 13 02 F6 | 	mov	arg01, local02
15bd0     00 16 06 F6 | 	mov	arg03, #0
15bd4     60 B9 B0 FD | 	call	#__system___basic_print_string
15bd8     00 12 06 F6 | 	mov	arg01, #0
15bdc     0A 14 06 F6 | 	mov	arg02, #10
15be0     00 16 06 F6 | 	mov	arg03, #0
15be4     F8 B8 B0 FD | 	call	#__system___basic_print_char
15be8     00 12 06 F6 | 	mov	arg01, #0
15bec     B8 06 B1 FD | 	call	#__system___getiolock_0542
15bf0     FD 00 68 FC | 	wrlong	#0, result1
15bf4                 | LR__1827
15bf4                 | LR__1828
15bf4     A7 F0 03 F6 | 	mov	ptra, fp
15bf8     B2 00 A0 FD | 	call	#popregs_
15bfc                 | _do_save_ret
15bfc     2D 00 64 FD | 	ret
15c00                 | 
15c00                 | ' 
15c00                 | ' ' ------------------ setdelay
15c00                 | ' 
15c00                 | ' sub do_setdelay
15c00                 | _do_setdelay
15c00     02 4A 05 F6 | 	mov	COUNT_, #2
15c04     A8 00 A0 FD | 	call	#pushregs_
15c08     18 F0 07 F1 | 	add	ptra, #24
15c0c     AC 57 BF FD | 	call	#_pop
15c10     FD 12 02 F6 | 	mov	arg01, result1
15c14     FE 1E 02 F6 | 	mov	local01, result2
15c18     FF 20 02 F6 | 	mov	local02, result3
15c1c     A7 12 62 FC | 	wrlong	arg01, fp
15c20     04 4E 05 F1 | 	add	fp, #4
15c24     A7 1E 62 FC | 	wrlong	local01, fp
15c28     04 4E 05 F1 | 	add	fp, #4
15c2c     A7 20 62 FC | 	wrlong	local02, fp
15c30     08 4E 85 F1 | 	sub	fp, #8
15c34     84 57 BF FD | 	call	#_pop
15c38     FD 20 02 F6 | 	mov	local02, result1
15c3c     0C 4E 05 F1 | 	add	fp, #12
15c40     A7 20 62 FC | 	wrlong	local02, fp
15c44     04 4E 05 F1 | 	add	fp, #4
15c48     A7 FC 61 FC | 	wrlong	result2, fp
15c4c     04 4E 05 F1 | 	add	fp, #4
15c50     A7 FE 61 FC | 	wrlong	result3, fp
15c54     08 4E 85 F1 | 	sub	fp, #8
15c58     A7 12 02 F6 | 	mov	arg01, fp
15c5c     0C 4E 85 F1 | 	sub	fp, #12
15c60     3C 59 BF FD | 	call	#_converttoint
15c64     FD 20 02 F6 | 	mov	local02, result1
15c68     10 1F 02 F6 | 	mov	local01, local02
15c6c     01 1E 66 F0 | 	shl	local01, #1
15c70     10 1F 02 F1 | 	add	local01, local02
15c74     03 1E 66 F0 | 	shl	local01, #3
15c78     14 00 00 FF 
15c7c     38 E5 05 F1 | 	add	objptr, ##10552
15c80     F2 1E 02 F1 | 	add	local01, objptr
15c84     A7 12 02 F6 | 	mov	arg01, fp
15c88     14 00 00 FF 
15c8c     38 E5 85 F1 | 	sub	objptr, ##10552
15c90     0C 59 BF FD | 	call	#_converttoint
15c94     06 1E 06 F1 | 	add	local01, #6
15c98     0F FB 51 FC | 	wrword	result1, local01
15c9c     A7 F0 03 F6 | 	mov	ptra, fp
15ca0     B2 00 A0 FD | 	call	#popregs_
15ca4                 | _do_setdelay_ret
15ca4     2D 00 64 FD | 	ret
15ca8                 | 
15ca8                 | ' 
15ca8                 | ' ' ------------------ setenv
15ca8                 | ' 
15ca8                 | ' sub do_setenv
15ca8                 | _do_setenv
15ca8     02 4A 05 F6 | 	mov	COUNT_, #2
15cac     A8 00 A0 FD | 	call	#pushregs_
15cb0     18 F0 07 F1 | 	add	ptra, #24
15cb4     04 57 BF FD | 	call	#_pop
15cb8     FD 12 02 F6 | 	mov	arg01, result1
15cbc     FE 1E 02 F6 | 	mov	local01, result2
15cc0     FF 20 02 F6 | 	mov	local02, result3
15cc4     A7 12 62 FC | 	wrlong	arg01, fp
15cc8     04 4E 05 F1 | 	add	fp, #4
15ccc     A7 1E 62 FC | 	wrlong	local01, fp
15cd0     04 4E 05 F1 | 	add	fp, #4
15cd4     A7 20 62 FC | 	wrlong	local02, fp
15cd8     08 4E 85 F1 | 	sub	fp, #8
15cdc     DC 56 BF FD | 	call	#_pop
15ce0     FD 20 02 F6 | 	mov	local02, result1
15ce4     0C 4E 05 F1 | 	add	fp, #12
15ce8     A7 20 62 FC | 	wrlong	local02, fp
15cec     04 4E 05 F1 | 	add	fp, #4
15cf0     A7 FC 61 FC | 	wrlong	result2, fp
15cf4     04 4E 05 F1 | 	add	fp, #4
15cf8     A7 FE 61 FC | 	wrlong	result3, fp
15cfc     08 4E 85 F1 | 	sub	fp, #8
15d00     A7 12 02 F6 | 	mov	arg01, fp
15d04     0C 4E 85 F1 | 	sub	fp, #12
15d08     94 58 BF FD | 	call	#_converttoint
15d0c     FD 20 02 F6 | 	mov	local02, result1
15d10     10 1F 02 F6 | 	mov	local01, local02
15d14     01 1E 66 F0 | 	shl	local01, #1
15d18     10 1F 02 F1 | 	add	local01, local02
15d1c     03 1E 66 F0 | 	shl	local01, #3
15d20     14 00 00 FF 
15d24     38 E5 05 F1 | 	add	objptr, ##10552
15d28     F2 1E 02 F1 | 	add	local01, objptr
15d2c     A7 12 02 F6 | 	mov	arg01, fp
15d30     14 00 00 FF 
15d34     38 E5 85 F1 | 	sub	objptr, ##10552
15d38     64 58 BF FD | 	call	#_converttoint
15d3c     05 1E 06 F1 | 	add	local01, #5
15d40     0F FB 41 FC | 	wrbyte	result1, local01
15d44     A7 F0 03 F6 | 	mov	ptra, fp
15d48     B2 00 A0 FD | 	call	#popregs_
15d4c                 | _do_setenv_ret
15d4c     2D 00 64 FD | 	ret
15d50                 | 
15d50                 | ' 
15d50                 | ' ' ------------------ setlen
15d50                 | ' 
15d50                 | ' sub do_setlen
15d50                 | _do_setlen
15d50     02 4A 05 F6 | 	mov	COUNT_, #2
15d54     A8 00 A0 FD | 	call	#pushregs_
15d58     18 F0 07 F1 | 	add	ptra, #24
15d5c     5C 56 BF FD | 	call	#_pop
15d60     FD 12 02 F6 | 	mov	arg01, result1
15d64     FE 1E 02 F6 | 	mov	local01, result2
15d68     FF 20 02 F6 | 	mov	local02, result3
15d6c     A7 12 62 FC | 	wrlong	arg01, fp
15d70     04 4E 05 F1 | 	add	fp, #4
15d74     A7 1E 62 FC | 	wrlong	local01, fp
15d78     04 4E 05 F1 | 	add	fp, #4
15d7c     A7 20 62 FC | 	wrlong	local02, fp
15d80     08 4E 85 F1 | 	sub	fp, #8
15d84     34 56 BF FD | 	call	#_pop
15d88     FD 20 02 F6 | 	mov	local02, result1
15d8c     0C 4E 05 F1 | 	add	fp, #12
15d90     A7 20 62 FC | 	wrlong	local02, fp
15d94     04 4E 05 F1 | 	add	fp, #4
15d98     A7 FC 61 FC | 	wrlong	result2, fp
15d9c     04 4E 05 F1 | 	add	fp, #4
15da0     A7 FE 61 FC | 	wrlong	result3, fp
15da4     08 4E 85 F1 | 	sub	fp, #8
15da8     A7 12 02 F6 | 	mov	arg01, fp
15dac     0C 4E 85 F1 | 	sub	fp, #12
15db0     EC 57 BF FD | 	call	#_converttoint
15db4     FD 20 02 F6 | 	mov	local02, result1
15db8     10 1F 02 F6 | 	mov	local01, local02
15dbc     01 1E 66 F0 | 	shl	local01, #1
15dc0     10 1F 02 F1 | 	add	local01, local02
15dc4     03 1E 66 F0 | 	shl	local01, #3
15dc8     14 00 00 FF 
15dcc     38 E5 05 F1 | 	add	objptr, ##10552
15dd0     F2 1E 02 F1 | 	add	local01, objptr
15dd4     A7 12 02 F6 | 	mov	arg01, fp
15dd8     14 00 00 FF 
15ddc     38 E5 85 F1 | 	sub	objptr, ##10552
15de0     78 58 BF FD | 	call	#_converttofloat
15de4     08 1E 06 F1 | 	add	local01, #8
15de8     0F FB 61 FC | 	wrlong	result1, local01
15dec     A7 F0 03 F6 | 	mov	ptra, fp
15df0     B2 00 A0 FD | 	call	#popregs_
15df4                 | _do_setlen_ret
15df4     2D 00 64 FD | 	ret
15df8                 | 
15df8                 | ' 
15df8                 | ' ' ------------------ setpan
15df8                 | ' 
15df8                 | ' sub do_setpan
15df8                 | _do_setpan
15df8     02 4A 05 F6 | 	mov	COUNT_, #2
15dfc     A8 00 A0 FD | 	call	#pushregs_
15e00     18 F0 07 F1 | 	add	ptra, #24
15e04     B4 55 BF FD | 	call	#_pop
15e08     FD 12 02 F6 | 	mov	arg01, result1
15e0c     FE 1E 02 F6 | 	mov	local01, result2
15e10     FF 20 02 F6 | 	mov	local02, result3
15e14     A7 12 62 FC | 	wrlong	arg01, fp
15e18     04 4E 05 F1 | 	add	fp, #4
15e1c     A7 1E 62 FC | 	wrlong	local01, fp
15e20     04 4E 05 F1 | 	add	fp, #4
15e24     A7 20 62 FC | 	wrlong	local02, fp
15e28     08 4E 85 F1 | 	sub	fp, #8
15e2c     8C 55 BF FD | 	call	#_pop
15e30     FD 20 02 F6 | 	mov	local02, result1
15e34     0C 4E 05 F1 | 	add	fp, #12
15e38     A7 20 62 FC | 	wrlong	local02, fp
15e3c     04 4E 05 F1 | 	add	fp, #4
15e40     A7 FC 61 FC | 	wrlong	result2, fp
15e44     04 4E 05 F1 | 	add	fp, #4
15e48     A7 FE 61 FC | 	wrlong	result3, fp
15e4c     08 4E 85 F1 | 	sub	fp, #8
15e50     A7 12 02 F6 | 	mov	arg01, fp
15e54     0C 4E 85 F1 | 	sub	fp, #12
15e58     44 57 BF FD | 	call	#_converttoint
15e5c     FD 20 02 F6 | 	mov	local02, result1
15e60     10 1F 02 F6 | 	mov	local01, local02
15e64     01 1E 66 F0 | 	shl	local01, #1
15e68     10 1F 02 F1 | 	add	local01, local02
15e6c     03 1E 66 F0 | 	shl	local01, #3
15e70     14 00 00 FF 
15e74     38 E5 05 F1 | 	add	objptr, ##10552
15e78     F2 1E 02 F1 | 	add	local01, objptr
15e7c     A7 12 02 F6 | 	mov	arg01, fp
15e80     14 00 00 FF 
15e84     38 E5 85 F1 | 	sub	objptr, ##10552
15e88     D0 57 BF FD | 	call	#_converttofloat
15e8c     10 1E 06 F1 | 	add	local01, #16
15e90     0F FB 61 FC | 	wrlong	result1, local01
15e94     A7 F0 03 F6 | 	mov	ptra, fp
15e98     B2 00 A0 FD | 	call	#popregs_
15e9c                 | _do_setpan_ret
15e9c     2D 00 64 FD | 	ret
15ea0                 | 
15ea0                 | ' 
15ea0                 | ' ' ------------------ setsustain
15ea0                 | ' 
15ea0                 | ' sub do_setsustain
15ea0                 | _do_setsustain
15ea0     02 4A 05 F6 | 	mov	COUNT_, #2
15ea4     A8 00 A0 FD | 	call	#pushregs_
15ea8     18 F0 07 F1 | 	add	ptra, #24
15eac     0C 55 BF FD | 	call	#_pop
15eb0     FD 12 02 F6 | 	mov	arg01, result1
15eb4     FE 1E 02 F6 | 	mov	local01, result2
15eb8     FF 20 02 F6 | 	mov	local02, result3
15ebc     A7 12 62 FC | 	wrlong	arg01, fp
15ec0     04 4E 05 F1 | 	add	fp, #4
15ec4     A7 1E 62 FC | 	wrlong	local01, fp
15ec8     04 4E 05 F1 | 	add	fp, #4
15ecc     A7 20 62 FC | 	wrlong	local02, fp
15ed0     08 4E 85 F1 | 	sub	fp, #8
15ed4     E4 54 BF FD | 	call	#_pop
15ed8     FD 20 02 F6 | 	mov	local02, result1
15edc     0C 4E 05 F1 | 	add	fp, #12
15ee0     A7 20 62 FC | 	wrlong	local02, fp
15ee4     04 4E 05 F1 | 	add	fp, #4
15ee8     A7 FC 61 FC | 	wrlong	result2, fp
15eec     04 4E 05 F1 | 	add	fp, #4
15ef0     A7 FE 61 FC | 	wrlong	result3, fp
15ef4     08 4E 85 F1 | 	sub	fp, #8
15ef8     A7 12 02 F6 | 	mov	arg01, fp
15efc     0C 4E 85 F1 | 	sub	fp, #12
15f00     9C 56 BF FD | 	call	#_converttoint
15f04     FD 20 02 F6 | 	mov	local02, result1
15f08     10 1F 02 F6 | 	mov	local01, local02
15f0c     01 1E 66 F0 | 	shl	local01, #1
15f10     10 1F 02 F1 | 	add	local01, local02
15f14     03 1E 66 F0 | 	shl	local01, #3
15f18     14 00 00 FF 
15f1c     38 E5 05 F1 | 	add	objptr, ##10552
15f20     F2 1E 02 F1 | 	add	local01, objptr
15f24     A7 12 02 F6 | 	mov	arg01, fp
15f28     14 00 00 FF 
15f2c     38 E5 85 F1 | 	sub	objptr, ##10552
15f30     6C 56 BF FD | 	call	#_converttoint
15f34     14 1E 06 F1 | 	add	local01, #20
15f38     0F FB 51 FC | 	wrword	result1, local01
15f3c     A7 F0 03 F6 | 	mov	ptra, fp
15f40     B2 00 A0 FD | 	call	#popregs_
15f44                 | _do_setsustain_ret
15f44     2D 00 64 FD | 	ret
15f48                 | 
15f48                 | ' 
15f48                 | ' ' ------------------ setvol
15f48                 | ' 
15f48                 | ' sub do_setvol
15f48                 | _do_setvol
15f48     02 4A 05 F6 | 	mov	COUNT_, #2
15f4c     A8 00 A0 FD | 	call	#pushregs_
15f50     18 F0 07 F1 | 	add	ptra, #24
15f54     64 54 BF FD | 	call	#_pop
15f58     FD 12 02 F6 | 	mov	arg01, result1
15f5c     FE 1E 02 F6 | 	mov	local01, result2
15f60     FF 20 02 F6 | 	mov	local02, result3
15f64     A7 12 62 FC | 	wrlong	arg01, fp
15f68     04 4E 05 F1 | 	add	fp, #4
15f6c     A7 1E 62 FC | 	wrlong	local01, fp
15f70     04 4E 05 F1 | 	add	fp, #4
15f74     A7 20 62 FC | 	wrlong	local02, fp
15f78     08 4E 85 F1 | 	sub	fp, #8
15f7c     3C 54 BF FD | 	call	#_pop
15f80     FD 20 02 F6 | 	mov	local02, result1
15f84     0C 4E 05 F1 | 	add	fp, #12
15f88     A7 20 62 FC | 	wrlong	local02, fp
15f8c     04 4E 05 F1 | 	add	fp, #4
15f90     A7 FC 61 FC | 	wrlong	result2, fp
15f94     04 4E 05 F1 | 	add	fp, #4
15f98     A7 FE 61 FC | 	wrlong	result3, fp
15f9c     08 4E 85 F1 | 	sub	fp, #8
15fa0     A7 12 02 F6 | 	mov	arg01, fp
15fa4     0C 4E 85 F1 | 	sub	fp, #12
15fa8     F4 55 BF FD | 	call	#_converttoint
15fac     FD 20 02 F6 | 	mov	local02, result1
15fb0     10 1F 02 F6 | 	mov	local01, local02
15fb4     01 1E 66 F0 | 	shl	local01, #1
15fb8     10 1F 02 F1 | 	add	local01, local02
15fbc     03 1E 66 F0 | 	shl	local01, #3
15fc0     14 00 00 FF 
15fc4     38 E5 05 F1 | 	add	objptr, ##10552
15fc8     F2 1E 02 F1 | 	add	local01, objptr
15fcc     A7 12 02 F6 | 	mov	arg01, fp
15fd0     14 00 00 FF 
15fd4     38 E5 85 F1 | 	sub	objptr, ##10552
15fd8     80 56 BF FD | 	call	#_converttofloat
15fdc     0C 1E 06 F1 | 	add	local01, #12
15fe0     0F FB 61 FC | 	wrlong	result1, local01
15fe4     A7 F0 03 F6 | 	mov	ptra, fp
15fe8     B2 00 A0 FD | 	call	#popregs_
15fec                 | _do_setvol_ret
15fec     2D 00 64 FD | 	ret
15ff0                 | 
15ff0                 | ' 
15ff0                 | ' ' ------------------ setwave
15ff0                 | ' 
15ff0                 | ' sub do_setwave
15ff0                 | _do_setwave
15ff0     02 4A 05 F6 | 	mov	COUNT_, #2
15ff4     A8 00 A0 FD | 	call	#pushregs_
15ff8     18 F0 07 F1 | 	add	ptra, #24
15ffc     BC 53 BF FD | 	call	#_pop
16000     FD 12 02 F6 | 	mov	arg01, result1
16004     FE 1E 02 F6 | 	mov	local01, result2
16008     FF 20 02 F6 | 	mov	local02, result3
1600c     A7 12 62 FC | 	wrlong	arg01, fp
16010     04 4E 05 F1 | 	add	fp, #4
16014     A7 1E 62 FC | 	wrlong	local01, fp
16018     04 4E 05 F1 | 	add	fp, #4
1601c     A7 20 62 FC | 	wrlong	local02, fp
16020     08 4E 85 F1 | 	sub	fp, #8
16024     94 53 BF FD | 	call	#_pop
16028     FD 20 02 F6 | 	mov	local02, result1
1602c     0C 4E 05 F1 | 	add	fp, #12
16030     A7 20 62 FC | 	wrlong	local02, fp
16034     04 4E 05 F1 | 	add	fp, #4
16038     A7 FC 61 FC | 	wrlong	result2, fp
1603c     04 4E 05 F1 | 	add	fp, #4
16040     A7 FE 61 FC | 	wrlong	result3, fp
16044     08 4E 85 F1 | 	sub	fp, #8
16048     A7 12 02 F6 | 	mov	arg01, fp
1604c     0C 4E 85 F1 | 	sub	fp, #12
16050     4C 55 BF FD | 	call	#_converttoint
16054     FD 20 02 F6 | 	mov	local02, result1
16058     10 1F 02 F6 | 	mov	local01, local02
1605c     01 1E 66 F0 | 	shl	local01, #1
16060     10 1F 02 F1 | 	add	local01, local02
16064     03 1E 66 F0 | 	shl	local01, #3
16068     14 00 00 FF 
1606c     38 E5 05 F1 | 	add	objptr, ##10552
16070     F2 1E 02 F1 | 	add	local01, objptr
16074     A7 12 02 F6 | 	mov	arg01, fp
16078     14 00 00 FF 
1607c     38 E5 85 F1 | 	sub	objptr, ##10552
16080     1C 55 BF FD | 	call	#_converttoint
16084     04 1E 06 F1 | 	add	local01, #4
16088     0F FB 41 FC | 	wrbyte	result1, local01
1608c     A7 F0 03 F6 | 	mov	ptra, fp
16090     B2 00 A0 FD | 	call	#popregs_
16094                 | _do_setwave_ret
16094     2D 00 64 FD | 	ret
16098                 | 
16098                 | ' 
16098                 | ' ' ------------------ shutup
16098                 | ' 
16098                 | ' sub do_shutup
16098                 | _do_shutup
16098     03 4A 05 F6 | 	mov	COUNT_, #3
1609c     A8 00 A0 FD | 	call	#pushregs_
160a0     18 F0 07 F1 | 	add	ptra, #24
160a4     4A 00 00 FF 
160a8     80 E4 05 F1 | 	add	objptr, ##38016
160ac     F2 1E 02 FB | 	rdlong	local01, objptr
160b0     0F 21 02 F6 | 	mov	local02, local01
160b4     01 20 66 F0 | 	shl	local02, #1
160b8     0F 21 02 F1 | 	add	local02, local01
160bc     02 20 66 F0 | 	shl	local02, #2
160c0     03 00 00 FF 
160c4     04 E4 85 F1 | 	sub	objptr, ##1540
160c8     F2 20 02 F1 | 	add	local02, objptr
160cc     10 23 0A FB | 	rdlong	local03, local02 wz
160d0     14 4E 05 F1 | 	add	fp, #20
160d4     A7 22 62 FC | 	wrlong	local03, fp
160d8                 | ' 
160d8                 | ' numpar=compiledline(lineptr_e).result.uresult
160d8                 | ' if numpar=0 then
160d8     14 4E 85 F1 | 	sub	fp, #20
160dc     47 00 00 FF 
160e0     7C E4 85 F1 | 	sub	objptr, ##36476
160e4     50 00 90 5D |  if_ne	jmp	#LR__1832
160e8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
160e8     10 4E 05 F1 | 	add	fp, #16
160ec     A7 00 68 FC | 	wrlong	#0, fp
160f0     37 00 00 FF 
160f4     10 E4 05 F1 | 	add	objptr, ##28176
160f8     97 16 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
160fc                 | LR__1830
160fc     F2 12 02 FB | 	rdlong	arg01, objptr
16100     A7 22 02 FB | 	rdlong	local03, fp
16104     06 22 66 F0 | 	shl	local03, #6
16108     11 13 02 F1 | 	add	arg01, local03
1610c     14 12 06 F1 | 	add	arg01, #20
16110     09 01 58 FC | 	wrword	#0, arg01
16114     A7 22 02 FB | 	rdlong	local03, fp
16118     01 22 06 F1 | 	add	local03, #1
1611c     A7 22 62 FC | 	wrlong	local03, fp
16120     08 22 56 F2 | 	cmps	local03, #8 wc
16124     D4 FF 9F CD |  if_b	jmp	#LR__1830
16128                 | LR__1831
16128     37 00 00 FF 
1612c     10 E4 85 F1 | 	sub	objptr, ##28176
16130     10 4E 85 F1 | 	sub	fp, #16
16134     64 00 90 FD | 	jmp	#LR__1833
16138                 | LR__1832
16138     80 52 BF FD | 	call	#_pop
1613c     FF 1E 02 F6 | 	mov	local01, result3
16140     A7 FA 61 FC | 	wrlong	result1, fp
16144     04 4E 05 F1 | 	add	fp, #4
16148     A7 FC 61 FC | 	wrlong	result2, fp
1614c     04 4E 05 F1 | 	add	fp, #4
16150     A7 1E 62 FC | 	wrlong	local01, fp
16154     08 4E 85 F1 | 	sub	fp, #8
16158     A7 12 02 F6 | 	mov	arg01, fp
1615c     40 54 BF FD | 	call	#_converttoint
16160     FD 22 52 F6 | 	abs	local03, result1 wc
16164     07 22 06 F5 | 	and	local03, #7
16168     11 21 82 F6 | 	negc	local02, local03
1616c     0C 4E 05 F1 | 	add	fp, #12
16170     A7 20 62 FC | 	wrlong	local02, fp
16174     37 00 00 FF 
16178     10 E4 05 F1 | 	add	objptr, ##28176
1617c     F2 12 02 FB | 	rdlong	arg01, objptr
16180     37 00 00 FF 
16184     10 E4 85 F1 | 	sub	objptr, ##28176
16188     0C 4E 85 F1 | 	sub	fp, #12
1618c     06 20 66 F0 | 	shl	local02, #6
16190     10 13 02 F1 | 	add	arg01, local02
16194     14 12 06 F1 | 	add	arg01, #20
16198     09 01 58 FC | 	wrword	#0, arg01
1619c                 | LR__1833
1619c     A7 F0 03 F6 | 	mov	ptra, fp
161a0     B2 00 A0 FD | 	call	#popregs_
161a4                 | _do_shutup_ret
161a4     2D 00 64 FD | 	ret
161a8                 | 
161a8                 | ' 
161a8                 | ' ' ------------------ sin
161a8                 | ' 
161a8                 | ' sub do_sin
161a8                 | _do_sin
161a8     01 4A 05 F6 | 	mov	COUNT_, #1
161ac     A8 00 A0 FD | 	call	#pushregs_
161b0     10 F0 07 F1 | 	add	ptra, #16
161b4     4A 00 00 FF 
161b8     80 E4 05 F1 | 	add	objptr, ##38016
161bc     F2 1E 02 FB | 	rdlong	local01, objptr
161c0     0F 17 02 F6 | 	mov	arg03, local01
161c4     01 16 66 F0 | 	shl	arg03, #1
161c8     0F 17 02 F1 | 	add	arg03, local01
161cc     02 16 66 F0 | 	shl	arg03, #2
161d0     03 00 00 FF 
161d4     04 E4 85 F1 | 	sub	objptr, ##1540
161d8     F2 16 02 F1 | 	add	arg03, objptr
161dc     0B 17 02 FB | 	rdlong	arg03, arg03
161e0     0C 4E 05 F1 | 	add	fp, #12
161e4     A7 16 62 FC | 	wrlong	arg03, fp
161e8                 | ' 
161e8                 | ' numpar=compiledline(lineptr_e).result.uresult
161e8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
161e8     0C 4E 85 F1 | 	sub	fp, #12
161ec     02 16 16 F2 | 	cmp	arg03, #2 wc
161f0     47 00 00 FF 
161f4     7C E4 85 F1 | 	sub	objptr, ##36476
161f8     0C 4E 05 C1 |  if_b	add	fp, #12
161fc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16200     0C 4E 85 C1 |  if_b	sub	fp, #12
16204     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
16208     00 12 06 F6 | 	mov	arg01, #0
1620c     98 00 B1 FD | 	call	#__system___getiolock_0542
16210     FD 12 02 F6 | 	mov	arg01, result1
16214     2C A6 B0 FD | 	call	#__system___lockmem
16218     84 01 00 FF 
1621c     CA 15 06 F6 | 	mov	arg02, ##@LR__5483
16220     00 12 06 F6 | 	mov	arg01, #0
16224     00 16 06 F6 | 	mov	arg03, #0
16228     0C B3 B0 FD | 	call	#__system___basic_print_string
1622c     00 12 06 F6 | 	mov	arg01, #0
16230     74 00 B1 FD | 	call	#__system___getiolock_0542
16234     FD 00 68 FC | 	wrlong	#0, result1
16238     27 12 06 F6 | 	mov	arg01, #39
1623c     74 70 B0 FD | 	call	#_printerror
16240     64 00 90 FD | 	jmp	#LR__1841
16244                 | LR__1840
16244     74 51 BF FD | 	call	#_pop
16248     A7 FA 61 FC | 	wrlong	result1, fp
1624c     04 4E 05 F1 | 	add	fp, #4
16250     A7 FC 61 FC | 	wrlong	result2, fp
16254     04 4E 05 F1 | 	add	fp, #4
16258     A7 FE 61 FC | 	wrlong	result3, fp
1625c     08 4E 85 F1 | 	sub	fp, #8
16260     51 00 00 FF 
16264     BC E5 05 F1 | 	add	objptr, ##41916
16268     F2 1E 02 FB | 	rdlong	local01, objptr
1626c     51 00 00 FF 
16270     BC E5 85 F1 | 	sub	objptr, ##41916
16274     A7 12 02 F6 | 	mov	arg01, fp
16278     E0 53 BF FD | 	call	#_converttofloat
1627c     FD 14 02 F6 | 	mov	arg02, result1
16280     0F 13 02 F6 | 	mov	arg01, local01
16284     70 D1 B0 FD | 	call	#__system___float_mul
16288     FD 12 02 F6 | 	mov	arg01, result1
1628c     C8 DA B0 FD | 	call	#__system____builtin_sinf
16290     A7 FA 61 FC | 	wrlong	result1, fp
16294     08 4E 05 F1 | 	add	fp, #8
16298     A7 3C 68 FC | 	wrlong	#30, fp
1629c     08 4E 85 F1 | 	sub	fp, #8
162a0     A7 12 02 F6 | 	mov	arg01, fp
162a4     AC 51 BF FD | 	call	#_push
162a8                 | LR__1841
162a8     A7 F0 03 F6 | 	mov	ptra, fp
162ac     B2 00 A0 FD | 	call	#popregs_
162b0                 | _do_sin_ret
162b0     2D 00 64 FD | 	ret
162b4                 | 
162b4                 | ' 
162b4                 | ' ' ------------------ sprite
162b4                 | ' 
162b4                 | ' sub do_sprite
162b4                 | _do_sprite
162b4     00 4A 05 F6 | 	mov	COUNT_, #0
162b8     A8 00 A0 FD | 	call	#pushregs_
162bc     30 F0 07 F1 | 	add	ptra, #48
162c0     F8 50 BF FD | 	call	#_pop
162c4     FD 16 02 F6 | 	mov	arg03, result1
162c8     FE 14 02 F6 | 	mov	arg02, result2
162cc     FF 12 02 F6 | 	mov	arg01, result3
162d0     18 4E 05 F1 | 	add	fp, #24
162d4     A7 16 62 FC | 	wrlong	arg03, fp
162d8     04 4E 05 F1 | 	add	fp, #4
162dc     A7 14 62 FC | 	wrlong	arg02, fp
162e0     04 4E 05 F1 | 	add	fp, #4
162e4     A7 12 62 FC | 	wrlong	arg01, fp
162e8     20 4E 85 F1 | 	sub	fp, #32
162ec     CC 50 BF FD | 	call	#_pop
162f0     FD 16 02 F6 | 	mov	arg03, result1
162f4     FE 14 02 F6 | 	mov	arg02, result2
162f8     FF 12 02 F6 | 	mov	arg01, result3
162fc     0C 4E 05 F1 | 	add	fp, #12
16300     A7 16 62 FC | 	wrlong	arg03, fp
16304     04 4E 05 F1 | 	add	fp, #4
16308     A7 14 62 FC | 	wrlong	arg02, fp
1630c     04 4E 05 F1 | 	add	fp, #4
16310     A7 12 62 FC | 	wrlong	arg01, fp
16314     14 4E 85 F1 | 	sub	fp, #20
16318     A0 50 BF FD | 	call	#_pop
1631c     FF 16 02 F6 | 	mov	arg03, result3
16320     A7 FA 61 FC | 	wrlong	result1, fp
16324     04 4E 05 F1 | 	add	fp, #4
16328     A7 FC 61 FC | 	wrlong	result2, fp
1632c     04 4E 05 F1 | 	add	fp, #4
16330     A7 16 62 FC | 	wrlong	arg03, fp
16334     08 4E 85 F1 | 	sub	fp, #8
16338     A7 12 02 F6 | 	mov	arg01, fp
1633c     60 52 BF FD | 	call	#_converttoint
16340     24 4E 05 F1 | 	add	fp, #36
16344     A7 FA 61 FC | 	wrlong	result1, fp
16348     18 4E 85 F1 | 	sub	fp, #24
1634c     A7 12 02 F6 | 	mov	arg01, fp
16350     0C 4E 85 F1 | 	sub	fp, #12
16354     48 52 BF FD | 	call	#_converttoint
16358     28 4E 05 F1 | 	add	fp, #40
1635c     A7 FA 61 FC | 	wrlong	result1, fp
16360     10 4E 85 F1 | 	sub	fp, #16
16364     A7 12 02 F6 | 	mov	arg01, fp
16368     18 4E 85 F1 | 	sub	fp, #24
1636c     30 52 BF FD | 	call	#_converttoint
16370     2C 4E 05 F1 | 	add	fp, #44
16374     A7 FA 61 FC | 	wrlong	result1, fp
16378     08 4E 85 F1 | 	sub	fp, #8
1637c     A7 12 02 FB | 	rdlong	arg01, fp
16380     04 4E 05 F1 | 	add	fp, #4
16384     A7 14 02 FB | 	rdlong	arg02, fp
16388     FD 16 02 F6 | 	mov	arg03, result1
1638c     28 4E 85 F1 | 	sub	fp, #40
16390     4C 7E B0 FD | 	call	#_hg010b_spin2_setspritepos
16394     A7 F0 03 F6 | 	mov	ptra, fp
16398     B2 00 A0 FD | 	call	#popregs_
1639c                 | _do_sprite_ret
1639c     2D 00 64 FD | 	ret
163a0                 | 
163a0                 | ' 
163a0                 | ' ' ------------------ sqr
163a0                 | ' 
163a0                 | ' sub do_sqr
163a0                 | _do_sqr
163a0     01 4A 05 F6 | 	mov	COUNT_, #1
163a4     A8 00 A0 FD | 	call	#pushregs_
163a8     10 F0 07 F1 | 	add	ptra, #16
163ac     4A 00 00 FF 
163b0     80 E4 05 F1 | 	add	objptr, ##38016
163b4     F2 1E 02 FB | 	rdlong	local01, objptr
163b8     0F 17 02 F6 | 	mov	arg03, local01
163bc     01 16 66 F0 | 	shl	arg03, #1
163c0     0F 17 02 F1 | 	add	arg03, local01
163c4     02 16 66 F0 | 	shl	arg03, #2
163c8     03 00 00 FF 
163cc     04 E4 85 F1 | 	sub	objptr, ##1540
163d0     F2 16 02 F1 | 	add	arg03, objptr
163d4     0B 17 02 FB | 	rdlong	arg03, arg03
163d8     0C 4E 05 F1 | 	add	fp, #12
163dc     A7 16 62 FC | 	wrlong	arg03, fp
163e0                 | ' 
163e0                 | ' numpar=compiledline(lineptr_e).result.uresult
163e0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
163e0     0C 4E 85 F1 | 	sub	fp, #12
163e4     02 16 16 F2 | 	cmp	arg03, #2 wc
163e8     47 00 00 FF 
163ec     7C E4 85 F1 | 	sub	objptr, ##36476
163f0     0C 4E 05 C1 |  if_b	add	fp, #12
163f4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
163f8     0C 4E 85 C1 |  if_b	sub	fp, #12
163fc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
16400     00 12 06 F6 | 	mov	arg01, #0
16404     A0 FE B0 FD | 	call	#__system___getiolock_0542
16408     FD 12 02 F6 | 	mov	arg01, result1
1640c     34 A4 B0 FD | 	call	#__system___lockmem
16410     84 01 00 FF 
16414     D0 15 06 F6 | 	mov	arg02, ##@LR__5484
16418     00 12 06 F6 | 	mov	arg01, #0
1641c     00 16 06 F6 | 	mov	arg03, #0
16420     14 B1 B0 FD | 	call	#__system___basic_print_string
16424     00 12 06 F6 | 	mov	arg01, #0
16428     7C FE B0 FD | 	call	#__system___getiolock_0542
1642c     FD 00 68 FC | 	wrlong	#0, result1
16430     27 12 06 F6 | 	mov	arg01, #39
16434     7C 6E B0 FD | 	call	#_printerror
16438     48 00 90 FD | 	jmp	#LR__1851
1643c                 | LR__1850
1643c     7C 4F BF FD | 	call	#_pop
16440     FF 1E 02 F6 | 	mov	local01, result3
16444     A7 FA 61 FC | 	wrlong	result1, fp
16448     04 4E 05 F1 | 	add	fp, #4
1644c     A7 FC 61 FC | 	wrlong	result2, fp
16450     04 4E 05 F1 | 	add	fp, #4
16454     A7 1E 62 FC | 	wrlong	local01, fp
16458     08 4E 85 F1 | 	sub	fp, #8
1645c     A7 12 02 F6 | 	mov	arg01, fp
16460     F8 51 BF FD | 	call	#_converttofloat
16464     FD 12 02 F6 | 	mov	arg01, result1
16468     B4 CE B0 FD | 	call	#__system___float_sqrt
1646c     A7 FA 61 FC | 	wrlong	result1, fp
16470     08 4E 05 F1 | 	add	fp, #8
16474     A7 3C 68 FC | 	wrlong	#30, fp
16478     08 4E 85 F1 | 	sub	fp, #8
1647c     A7 12 02 F6 | 	mov	arg01, fp
16480     D0 4F BF FD | 	call	#_push
16484                 | LR__1851
16484     A7 F0 03 F6 | 	mov	ptra, fp
16488     B2 00 A0 FD | 	call	#popregs_
1648c                 | _do_sqr_ret
1648c     2D 00 64 FD | 	ret
16490                 | 
16490                 | ' 
16490                 | ' ' ------------------ stick
16490                 | ' 
16490                 | ' sub do_stick
16490                 | _do_stick
16490     01 4A 05 F6 | 	mov	COUNT_, #1
16494     A8 00 A0 FD | 	call	#pushregs_
16498     10 F0 07 F1 | 	add	ptra, #16
1649c     4A 00 00 FF 
164a0     80 E4 05 F1 | 	add	objptr, ##38016
164a4     F2 1E 02 FB | 	rdlong	local01, objptr
164a8     0F 17 02 F6 | 	mov	arg03, local01
164ac     01 16 66 F0 | 	shl	arg03, #1
164b0     0F 17 02 F1 | 	add	arg03, local01
164b4     02 16 66 F0 | 	shl	arg03, #2
164b8     03 00 00 FF 
164bc     04 E4 85 F1 | 	sub	objptr, ##1540
164c0     F2 16 02 F1 | 	add	arg03, objptr
164c4     0B 17 02 FB | 	rdlong	arg03, arg03
164c8     0C 4E 05 F1 | 	add	fp, #12
164cc     A7 16 62 FC | 	wrlong	arg03, fp
164d0                 | ' 
164d0                 | ' numpar=compiledline(lineptr_e).result.uresult
164d0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
164d0     0C 4E 85 F1 | 	sub	fp, #12
164d4     02 16 16 F2 | 	cmp	arg03, #2 wc
164d8     47 00 00 FF 
164dc     7C E4 85 F1 | 	sub	objptr, ##36476
164e0     3C 00 90 CD |  if_b	jmp	#LR__1860
164e4     00 12 06 F6 | 	mov	arg01, #0
164e8     BC FD B0 FD | 	call	#__system___getiolock_0542
164ec     FD 12 02 F6 | 	mov	arg01, result1
164f0     50 A3 B0 FD | 	call	#__system___lockmem
164f4     84 01 00 FF 
164f8     D6 15 06 F6 | 	mov	arg02, ##@LR__5485
164fc     00 12 06 F6 | 	mov	arg01, #0
16500     00 16 06 F6 | 	mov	arg03, #0
16504     30 B0 B0 FD | 	call	#__system___basic_print_string
16508     00 12 06 F6 | 	mov	arg01, #0
1650c     98 FD B0 FD | 	call	#__system___getiolock_0542
16510     FD 00 68 FC | 	wrlong	#0, result1
16514     27 12 06 F6 | 	mov	arg01, #39
16518     98 6D B0 FD | 	call	#_printerror
1651c     E8 00 90 FD | 	jmp	#LR__1864
16520                 | LR__1860
16520                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
16520     0C 4E 05 F1 | 	add	fp, #12
16524     A7 FE 09 FB | 	rdlong	result3, fp wz
16528     0C 4E 85 F1 | 	sub	fp, #12
1652c     30 00 90 5D |  if_ne	jmp	#LR__1861
16530     51 00 00 FF 
16534     30 E5 05 F1 | 	add	objptr, ##41776
16538     F2 1E 02 FB | 	rdlong	local01, objptr
1653c     51 00 00 FF 
16540     30 E5 85 F1 | 	sub	objptr, ##41776
16544     A7 1E 62 FC | 	wrlong	local01, fp
16548     08 4E 05 F1 | 	add	fp, #8
1654c     A7 3A 68 FC | 	wrlong	#29, fp
16550     08 4E 85 F1 | 	sub	fp, #8
16554     A7 12 02 F6 | 	mov	arg01, fp
16558     F8 4E BF FD | 	call	#_push
1655c     A8 00 90 FD | 	jmp	#LR__1864
16560                 | LR__1861
16560     58 4E BF FD | 	call	#_pop
16564     A7 FA 61 FC | 	wrlong	result1, fp
16568     04 4E 05 F1 | 	add	fp, #4
1656c     A7 FC 61 FC | 	wrlong	result2, fp
16570     04 4E 05 F1 | 	add	fp, #4
16574     A7 FE 61 FC | 	wrlong	result3, fp
16578                 | ' t1=pop()
16578                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16578     08 4E 85 F1 | 	sub	fp, #8
1657c     1C FE 0D F2 | 	cmp	result3, #28 wz
16580     08 4E 05 51 |  if_ne	add	fp, #8
16584     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16588     08 4E 85 51 |  if_ne	sub	fp, #8
1658c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16590     6C 00 90 5D |  if_ne	jmp	#LR__1863
16594     A7 1E 02 FB | 	rdlong	local01, fp
16598     52 00 00 FF 
1659c     10 E4 05 F1 | 	add	objptr, ##42000
165a0     F2 1E 62 FC | 	wrlong	local01, objptr
165a4                 | '   q=t1.result.uresult
165a4                 | '   if q<7 then 
165a4     52 00 00 FF 
165a8     10 E4 85 F1 | 	sub	objptr, ##42000
165ac     07 1E 56 F2 | 	cmps	local01, #7 wc
165b0     40 00 90 3D |  if_ae	jmp	#LR__1862
165b4     52 00 00 FF 
165b8     10 E4 05 F1 | 	add	objptr, ##42000
165bc     F2 1E 02 FB | 	rdlong	local01, objptr
165c0     02 1E 66 F0 | 	shl	local01, #2
165c4     E0 E4 85 F1 | 	sub	objptr, #224
165c8     F2 1E 02 F1 | 	add	local01, objptr
165cc     0F 1F 02 FB | 	rdlong	local01, local01
165d0     A7 1E 62 FC | 	wrlong	local01, fp
165d4     08 4E 05 F1 | 	add	fp, #8
165d8     A7 3A 68 FC | 	wrlong	#29, fp
165dc     08 4E 85 F1 | 	sub	fp, #8
165e0     A7 12 02 F6 | 	mov	arg01, fp
165e4     51 00 00 FF 
165e8     30 E5 85 F1 | 	sub	objptr, ##41776
165ec     64 4E BF FD | 	call	#_push
165f0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
165f0     14 00 90 FD | 	jmp	#LR__1864
165f4                 | LR__1862
165f4     29 12 06 F6 | 	mov	arg01, #41
165f8     B8 6C B0 FD | 	call	#_printerror
165fc                 | '      printerror(41) : return
165fc     08 00 90 FD | 	jmp	#LR__1864
16600                 | LR__1863
16600     29 12 06 F6 | 	mov	arg01, #41
16604     AC 6C B0 FD | 	call	#_printerror
16608                 | LR__1864
16608     A7 F0 03 F6 | 	mov	ptra, fp
1660c     B2 00 A0 FD | 	call	#popregs_
16610                 | _do_stick_ret
16610     2D 00 64 FD | 	ret
16614                 | 
16614                 | ' 
16614                 | ' ' ------------------ strig
16614                 | ' 
16614                 | ' sub do_strig
16614                 | _do_strig
16614     01 4A 05 F6 | 	mov	COUNT_, #1
16618     A8 00 A0 FD | 	call	#pushregs_
1661c     10 F0 07 F1 | 	add	ptra, #16
16620     4A 00 00 FF 
16624     80 E4 05 F1 | 	add	objptr, ##38016
16628     F2 1E 02 FB | 	rdlong	local01, objptr
1662c     0F 17 02 F6 | 	mov	arg03, local01
16630     01 16 66 F0 | 	shl	arg03, #1
16634     0F 17 02 F1 | 	add	arg03, local01
16638     02 16 66 F0 | 	shl	arg03, #2
1663c     03 00 00 FF 
16640     04 E4 85 F1 | 	sub	objptr, ##1540
16644     F2 16 02 F1 | 	add	arg03, objptr
16648     0B 17 02 FB | 	rdlong	arg03, arg03
1664c     0C 4E 05 F1 | 	add	fp, #12
16650     A7 16 62 FC | 	wrlong	arg03, fp
16654                 | ' 
16654                 | ' numpar=compiledline(lineptr_e).result.uresult
16654                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
16654     0C 4E 85 F1 | 	sub	fp, #12
16658     02 16 16 F2 | 	cmp	arg03, #2 wc
1665c     47 00 00 FF 
16660     7C E4 85 F1 | 	sub	objptr, ##36476
16664     3C 00 90 CD |  if_b	jmp	#LR__1870
16668     00 12 06 F6 | 	mov	arg01, #0
1666c     38 FC B0 FD | 	call	#__system___getiolock_0542
16670     FD 12 02 F6 | 	mov	arg01, result1
16674     CC A1 B0 FD | 	call	#__system___lockmem
16678     84 01 00 FF 
1667c     DE 15 06 F6 | 	mov	arg02, ##@LR__5486
16680     00 12 06 F6 | 	mov	arg01, #0
16684     00 16 06 F6 | 	mov	arg03, #0
16688     AC AE B0 FD | 	call	#__system___basic_print_string
1668c     00 12 06 F6 | 	mov	arg01, #0
16690     14 FC B0 FD | 	call	#__system___getiolock_0542
16694     FD 00 68 FC | 	wrlong	#0, result1
16698     27 12 06 F6 | 	mov	arg01, #39
1669c     14 6C B0 FD | 	call	#_printerror
166a0     E8 00 90 FD | 	jmp	#LR__1874
166a4                 | LR__1870
166a4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
166a4     0C 4E 05 F1 | 	add	fp, #12
166a8     A7 FE 09 FB | 	rdlong	result3, fp wz
166ac     0C 4E 85 F1 | 	sub	fp, #12
166b0     30 00 90 5D |  if_ne	jmp	#LR__1871
166b4     51 00 00 FF 
166b8     4C E5 05 F1 | 	add	objptr, ##41804
166bc     F2 1E 02 FB | 	rdlong	local01, objptr
166c0     51 00 00 FF 
166c4     4C E5 85 F1 | 	sub	objptr, ##41804
166c8     A7 1E 62 FC | 	wrlong	local01, fp
166cc     08 4E 05 F1 | 	add	fp, #8
166d0     A7 3A 68 FC | 	wrlong	#29, fp
166d4     08 4E 85 F1 | 	sub	fp, #8
166d8     A7 12 02 F6 | 	mov	arg01, fp
166dc     74 4D BF FD | 	call	#_push
166e0     A8 00 90 FD | 	jmp	#LR__1874
166e4                 | LR__1871
166e4     D4 4C BF FD | 	call	#_pop
166e8     A7 FA 61 FC | 	wrlong	result1, fp
166ec     04 4E 05 F1 | 	add	fp, #4
166f0     A7 FC 61 FC | 	wrlong	result2, fp
166f4     04 4E 05 F1 | 	add	fp, #4
166f8     A7 FE 61 FC | 	wrlong	result3, fp
166fc                 | ' t1=pop()
166fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
166fc     08 4E 85 F1 | 	sub	fp, #8
16700     1C FE 0D F2 | 	cmp	result3, #28 wz
16704     08 4E 05 51 |  if_ne	add	fp, #8
16708     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1670c     08 4E 85 51 |  if_ne	sub	fp, #8
16710     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16714     6C 00 90 5D |  if_ne	jmp	#LR__1873
16718     A7 1E 02 FB | 	rdlong	local01, fp
1671c     52 00 00 FF 
16720     10 E4 05 F1 | 	add	objptr, ##42000
16724     F2 1E 62 FC | 	wrlong	local01, objptr
16728                 | '   q=t1.result.uresult
16728                 | '   if q<7 then 
16728     52 00 00 FF 
1672c     10 E4 85 F1 | 	sub	objptr, ##42000
16730     07 1E 56 F2 | 	cmps	local01, #7 wc
16734     40 00 90 3D |  if_ae	jmp	#LR__1872
16738     52 00 00 FF 
1673c     10 E4 05 F1 | 	add	objptr, ##42000
16740     F2 1E 02 FB | 	rdlong	local01, objptr
16744     02 1E 66 F0 | 	shl	local01, #2
16748     C4 E4 85 F1 | 	sub	objptr, #196
1674c     F2 1E 02 F1 | 	add	local01, objptr
16750     0F 1F 02 FB | 	rdlong	local01, local01
16754     A7 1E 62 FC | 	wrlong	local01, fp
16758     08 4E 05 F1 | 	add	fp, #8
1675c     A7 3A 68 FC | 	wrlong	#29, fp
16760     08 4E 85 F1 | 	sub	fp, #8
16764     A7 12 02 F6 | 	mov	arg01, fp
16768     51 00 00 FF 
1676c     4C E5 85 F1 | 	sub	objptr, ##41804
16770     E0 4C BF FD | 	call	#_push
16774                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
16774     14 00 90 FD | 	jmp	#LR__1874
16778                 | LR__1872
16778     29 12 06 F6 | 	mov	arg01, #41
1677c     34 6B B0 FD | 	call	#_printerror
16780                 | '      printerror(41) : return
16780     08 00 90 FD | 	jmp	#LR__1874
16784                 | LR__1873
16784     29 12 06 F6 | 	mov	arg01, #41
16788     28 6B B0 FD | 	call	#_printerror
1678c                 | LR__1874
1678c     A7 F0 03 F6 | 	mov	ptra, fp
16790     B2 00 A0 FD | 	call	#popregs_
16794                 | _do_strig_ret
16794     2D 00 64 FD | 	ret
16798                 | 
16798                 | ' 
16798                 | ' ' ------------------ tan
16798                 | ' 
16798                 | ' sub do_tan
16798                 | _do_tan
16798     01 4A 05 F6 | 	mov	COUNT_, #1
1679c     A8 00 A0 FD | 	call	#pushregs_
167a0     10 F0 07 F1 | 	add	ptra, #16
167a4     4A 00 00 FF 
167a8     80 E4 05 F1 | 	add	objptr, ##38016
167ac     F2 1E 02 FB | 	rdlong	local01, objptr
167b0     0F 17 02 F6 | 	mov	arg03, local01
167b4     01 16 66 F0 | 	shl	arg03, #1
167b8     0F 17 02 F1 | 	add	arg03, local01
167bc     02 16 66 F0 | 	shl	arg03, #2
167c0     03 00 00 FF 
167c4     04 E4 85 F1 | 	sub	objptr, ##1540
167c8     F2 16 02 F1 | 	add	arg03, objptr
167cc     0B 17 02 FB | 	rdlong	arg03, arg03
167d0     0C 4E 05 F1 | 	add	fp, #12
167d4     A7 16 62 FC | 	wrlong	arg03, fp
167d8                 | ' 
167d8                 | ' numpar=compiledline(lineptr_e).result.uresult
167d8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
167d8     0C 4E 85 F1 | 	sub	fp, #12
167dc     02 16 16 F2 | 	cmp	arg03, #2 wc
167e0     47 00 00 FF 
167e4     7C E4 85 F1 | 	sub	objptr, ##36476
167e8     0C 4E 05 C1 |  if_b	add	fp, #12
167ec     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
167f0     0C 4E 85 C1 |  if_b	sub	fp, #12
167f4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
167f8     00 12 06 F6 | 	mov	arg01, #0
167fc     A8 FA B0 FD | 	call	#__system___getiolock_0542
16800     FD 12 02 F6 | 	mov	arg01, result1
16804     3C A0 B0 FD | 	call	#__system___lockmem
16808     84 01 00 FF 
1680c     E6 15 06 F6 | 	mov	arg02, ##@LR__5487
16810     00 12 06 F6 | 	mov	arg01, #0
16814     00 16 06 F6 | 	mov	arg03, #0
16818     1C AD B0 FD | 	call	#__system___basic_print_string
1681c     00 12 06 F6 | 	mov	arg01, #0
16820     84 FA B0 FD | 	call	#__system___getiolock_0542
16824     FD 00 68 FC | 	wrlong	#0, result1
16828     27 12 06 F6 | 	mov	arg01, #39
1682c     84 6A B0 FD | 	call	#_printerror
16830     64 00 90 FD | 	jmp	#LR__1881
16834                 | LR__1880
16834     84 4B BF FD | 	call	#_pop
16838     A7 FA 61 FC | 	wrlong	result1, fp
1683c     04 4E 05 F1 | 	add	fp, #4
16840     A7 FC 61 FC | 	wrlong	result2, fp
16844     04 4E 05 F1 | 	add	fp, #4
16848     A7 FE 61 FC | 	wrlong	result3, fp
1684c     08 4E 85 F1 | 	sub	fp, #8
16850     51 00 00 FF 
16854     BC E5 05 F1 | 	add	objptr, ##41916
16858     F2 1E 02 FB | 	rdlong	local01, objptr
1685c     51 00 00 FF 
16860     BC E5 85 F1 | 	sub	objptr, ##41916
16864     A7 12 02 F6 | 	mov	arg01, fp
16868     F0 4D BF FD | 	call	#_converttofloat
1686c     FD 14 02 F6 | 	mov	arg02, result1
16870     0F 13 02 F6 | 	mov	arg01, local01
16874     80 CB B0 FD | 	call	#__system___float_mul
16878     FD 12 02 F6 | 	mov	arg01, result1
1687c     24 D6 B0 FD | 	call	#__system____builtin_tanf
16880     A7 FA 61 FC | 	wrlong	result1, fp
16884     08 4E 05 F1 | 	add	fp, #8
16888     A7 3C 68 FC | 	wrlong	#30, fp
1688c     08 4E 85 F1 | 	sub	fp, #8
16890     A7 12 02 F6 | 	mov	arg01, fp
16894     BC 4B BF FD | 	call	#_push
16898                 | LR__1881
16898     A7 F0 03 F6 | 	mov	ptra, fp
1689c     B2 00 A0 FD | 	call	#popregs_
168a0                 | _do_tan_ret
168a0     2D 00 64 FD | 	ret
168a4                 | 
168a4                 | ' 
168a4                 | ' ' ------------------ val
168a4                 | ' 
168a4                 | ' sub do_val
168a4                 | _do_val
168a4     03 4A 05 F6 | 	mov	COUNT_, #3
168a8     A8 00 A0 FD | 	call	#pushregs_
168ac     20 F0 07 F1 | 	add	ptra, #32
168b0     4A 00 00 FF 
168b4     80 E4 05 F1 | 	add	objptr, ##38016
168b8     F2 16 02 FB | 	rdlong	arg03, objptr
168bc     0B 1F 02 F6 | 	mov	local01, arg03
168c0     01 1E 66 F0 | 	shl	local01, #1
168c4     0B 1F 02 F1 | 	add	local01, arg03
168c8     02 1E 66 F0 | 	shl	local01, #2
168cc     03 00 00 FF 
168d0     04 E4 85 F1 | 	sub	objptr, ##1540
168d4     F2 1E 02 F1 | 	add	local01, objptr
168d8     0F 17 02 FB | 	rdlong	arg03, local01
168dc     0C 4E 05 F1 | 	add	fp, #12
168e0     A7 16 62 FC | 	wrlong	arg03, fp
168e4                 | ' 
168e4                 | ' numpar=compiledline(lineptr_e).result.uresult
168e4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
168e4     0C 4E 85 F1 | 	sub	fp, #12
168e8     02 16 16 F2 | 	cmp	arg03, #2 wc
168ec     47 00 00 FF 
168f0     7C E4 85 F1 | 	sub	objptr, ##36476
168f4     0C 4E 05 C1 |  if_b	add	fp, #12
168f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
168fc     0C 4E 85 C1 |  if_b	sub	fp, #12
16900     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16904     00 12 06 F6 | 	mov	arg01, #0
16908     9C F9 B0 FD | 	call	#__system___getiolock_0542
1690c     FD 12 02 F6 | 	mov	arg01, result1
16910     30 9F B0 FD | 	call	#__system___lockmem
16914     84 01 00 FF 
16918     EC 15 06 F6 | 	mov	arg02, ##@LR__5488
1691c     00 12 06 F6 | 	mov	arg01, #0
16920     00 16 06 F6 | 	mov	arg03, #0
16924     10 AC B0 FD | 	call	#__system___basic_print_string
16928     00 12 06 F6 | 	mov	arg01, #0
1692c     78 F9 B0 FD | 	call	#__system___getiolock_0542
16930     FD 00 68 FC | 	wrlong	#0, result1
16934     27 12 06 F6 | 	mov	arg01, #39
16938     78 69 B0 FD | 	call	#_printerror
1693c     5C 02 90 FD | 	jmp	#LR__1903
16940                 | LR__1890
16940     78 4A BF FD | 	call	#_pop
16944     FF 16 02 F6 | 	mov	arg03, result3
16948     A7 FA 61 FC | 	wrlong	result1, fp
1694c     04 4E 05 F1 | 	add	fp, #4
16950     A7 FC 61 FC | 	wrlong	result2, fp
16954     04 4E 05 F1 | 	add	fp, #4
16958     A7 16 62 FC | 	wrlong	arg03, fp
1695c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1695c     08 4E 85 F1 | 	sub	fp, #8
16960     2B 16 0E F2 | 	cmp	arg03, #43 wz
16964     18 00 90 5D |  if_ne	jmp	#LR__1891
16968     A7 12 02 FB | 	rdlong	arg01, fp
1696c     C4 4B BF FD | 	call	#_convertstring
16970     A7 FA 61 FC | 	wrlong	result1, fp
16974     08 4E 05 F1 | 	add	fp, #8
16978     A7 3E 68 FC | 	wrlong	#31, fp
1697c     08 4E 85 F1 | 	sub	fp, #8
16980                 | LR__1891
16980                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
16980     08 4E 05 F1 | 	add	fp, #8
16984     A7 16 02 FB | 	rdlong	arg03, fp
16988     08 4E 85 F1 | 	sub	fp, #8
1698c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16990     3C 00 90 AD |  if_e	jmp	#LR__1892
16994     00 12 06 F6 | 	mov	arg01, #0
16998     0C F9 B0 FD | 	call	#__system___getiolock_0542
1699c     FD 12 02 F6 | 	mov	arg01, result1
169a0     A0 9E B0 FD | 	call	#__system___lockmem
169a4     84 01 00 FF 
169a8     F2 15 06 F6 | 	mov	arg02, ##@LR__5489
169ac     00 12 06 F6 | 	mov	arg01, #0
169b0     00 16 06 F6 | 	mov	arg03, #0
169b4     80 AB B0 FD | 	call	#__system___basic_print_string
169b8     00 12 06 F6 | 	mov	arg01, #0
169bc     E8 F8 B0 FD | 	call	#__system___getiolock_0542
169c0     FD 00 68 FC | 	wrlong	#0, result1
169c4     0F 12 06 F6 | 	mov	arg01, #15
169c8     E8 68 B0 FD | 	call	#_printerror
169cc     CC 01 90 FD | 	jmp	#LR__1903
169d0                 | LR__1892
169d0                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
169d0     A7 12 02 FB | 	rdlong	arg01, fp
169d4     01 14 06 F6 | 	mov	arg02, #1
169d8     E4 BE B0 FD | 	call	#__system__Left_S
169dc     FD 12 02 F6 | 	mov	arg01, result1
169e0     84 01 00 FF 
169e4     F8 15 06 F6 | 	mov	arg02, ##@LR__5490
169e8     80 9E B0 FD | 	call	#__system___string_cmp
169ec     00 FA 0D F2 | 	cmp	result1, #0 wz
169f0     48 00 90 5D |  if_ne	jmp	#LR__1895
169f4     84 01 00 FF 
169f8     FA 1F 06 F6 | 	mov	local01, ##@LR__5491
169fc     A7 16 02 FB | 	rdlong	arg03, fp
16a00     0B 13 02 F6 | 	mov	arg01, arg03
16a04     09 21 02 F6 | 	mov	local02, arg01
16a08     97 06 48 FB | 	callpa	#(@LR__1894-@LR__1893)>>2,fcache_load_ptr_
16a0c                 | LR__1893
16a0c     10 FB C9 FA | 	rdbyte	result1, local02 wz
16a10     01 20 06 51 |  if_ne	add	local02, #1
16a14     F4 FF 9F 5D |  if_ne	jmp	#LR__1893
16a18                 | LR__1894
16a18     09 21 82 F1 | 	sub	local02, arg01
16a1c     10 15 02 F6 | 	mov	arg02, local02
16a20     01 14 86 F1 | 	sub	arg02, #1
16a24     0B 13 02 F6 | 	mov	arg01, arg03
16a28     1C BF B0 FD | 	call	#__system__Right_S
16a2c     FD 14 02 F6 | 	mov	arg02, result1
16a30     0F 13 02 F6 | 	mov	arg01, local01
16a34     68 9E B0 FD | 	call	#__system___string_concat
16a38     A7 FA 61 FC | 	wrlong	result1, fp
16a3c                 | LR__1895
16a3c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16a3c     A7 12 02 FB | 	rdlong	arg01, fp
16a40     01 14 06 F6 | 	mov	arg02, #1
16a44     78 BE B0 FD | 	call	#__system__Left_S
16a48     FD 12 02 F6 | 	mov	arg01, result1
16a4c     84 01 00 FF 
16a50     FD 15 06 F6 | 	mov	arg02, ##@LR__5492
16a54     14 9E B0 FD | 	call	#__system___string_cmp
16a58     00 FA 0D F2 | 	cmp	result1, #0 wz
16a5c     48 00 90 5D |  if_ne	jmp	#LR__1898
16a60     84 01 00 FF 
16a64     FF 1F 06 F6 | 	mov	local01, ##@LR__5493
16a68     A7 16 02 FB | 	rdlong	arg03, fp
16a6c     0B 13 02 F6 | 	mov	arg01, arg03
16a70     09 21 02 F6 | 	mov	local02, arg01
16a74     97 06 48 FB | 	callpa	#(@LR__1897-@LR__1896)>>2,fcache_load_ptr_
16a78                 | LR__1896
16a78     10 FB C9 FA | 	rdbyte	result1, local02 wz
16a7c     01 20 06 51 |  if_ne	add	local02, #1
16a80     F4 FF 9F 5D |  if_ne	jmp	#LR__1896
16a84                 | LR__1897
16a84     09 21 82 F1 | 	sub	local02, arg01
16a88     10 15 02 F6 | 	mov	arg02, local02
16a8c     01 14 86 F1 | 	sub	arg02, #1
16a90     0B 13 02 F6 | 	mov	arg01, arg03
16a94     B0 BE B0 FD | 	call	#__system__Right_S
16a98     FD 14 02 F6 | 	mov	arg02, result1
16a9c     0F 13 02 F6 | 	mov	arg01, local01
16aa0     FC 9D B0 FD | 	call	#__system___string_concat
16aa4     A7 FA 61 FC | 	wrlong	result1, fp
16aa8                 | LR__1898
16aa8     A7 12 02 FB | 	rdlong	arg01, fp
16aac     54 D1 B0 FD | 	call	#__system____builtin_atof
16ab0     1C 4E 05 F1 | 	add	fp, #28
16ab4     A7 FA 61 FC | 	wrlong	result1, fp
16ab8     1C 4E 85 F1 | 	sub	fp, #28
16abc     A7 12 02 FB | 	rdlong	arg01, fp
16ac0     00 14 06 F6 | 	mov	arg02, #0
16ac4     A8 CF B0 FD | 	call	#__system____builtin_atoi
16ac8     18 4E 05 F1 | 	add	fp, #24
16acc     A7 FA 61 FC | 	wrlong	result1, fp
16ad0                 | ' fval=val(t1.result.sresult)
16ad0                 | ' ival=val%(t1.result.sresult)
16ad0                 | ' if fval=ival then
16ad0     04 4E 05 F1 | 	add	fp, #4
16ad4     A7 1E 02 FB | 	rdlong	local01, fp
16ad8     1C 4E 85 F1 | 	sub	fp, #28
16adc     FD 12 52 F6 | 	abs	arg01, result1 wc
16ae0     1F 22 C6 C9 |  if_b	decod	local03, #31
16ae4     00 22 06 36 |  if_ae	mov	local03, #0
16ae8     08 C5 B0 FD | 	call	#__system___float_fromuns
16aec     11 FB 61 F5 | 	xor	result1, local03
16af0     FD 14 02 F6 | 	mov	arg02, result1
16af4     0F 13 02 F6 | 	mov	arg01, local01
16af8     01 16 06 F6 | 	mov	arg03, #1
16afc     2C CD B0 FD | 	call	#__system___float_cmp
16b00     00 FA 0D F2 | 	cmp	result1, #0 wz
16b04     20 00 90 5D |  if_ne	jmp	#LR__1899
16b08     18 4E 05 F1 | 	add	fp, #24
16b0c     A7 1E 02 FB | 	rdlong	local01, fp
16b10     18 4E 85 F1 | 	sub	fp, #24
16b14     A7 1E 62 FC | 	wrlong	local01, fp
16b18     08 4E 05 F1 | 	add	fp, #8
16b1c     A7 38 68 FC | 	wrlong	#28, fp
16b20     08 4E 85 F1 | 	sub	fp, #8
16b24     6C 00 90 FD | 	jmp	#LR__1902
16b28                 | LR__1899
16b28                 | '   if fval=0 andalso ival<>0 then
16b28     1C 4E 05 F1 | 	add	fp, #28
16b2c     A7 12 02 FB | 	rdlong	arg01, fp
16b30     1C 4E 85 F1 | 	sub	fp, #28
16b34     00 14 06 F6 | 	mov	arg02, #0
16b38     01 16 06 F6 | 	mov	arg03, #1
16b3c     EC CC B0 FD | 	call	#__system___float_cmp
16b40     00 FA 0D F2 | 	cmp	result1, #0 wz
16b44     30 00 90 5D |  if_ne	jmp	#LR__1900
16b48     18 4E 05 F1 | 	add	fp, #24
16b4c     A7 1E 0A FB | 	rdlong	local01, fp wz
16b50     18 4E 85 F1 | 	sub	fp, #24
16b54     20 00 90 AD |  if_e	jmp	#LR__1900
16b58     18 4E 05 F1 | 	add	fp, #24
16b5c     A7 1E 02 FB | 	rdlong	local01, fp
16b60     18 4E 85 F1 | 	sub	fp, #24
16b64     A7 1E 62 FC | 	wrlong	local01, fp
16b68     08 4E 05 F1 | 	add	fp, #8
16b6c     A7 38 68 FC | 	wrlong	#28, fp
16b70     08 4E 85 F1 | 	sub	fp, #8
16b74     1C 00 90 FD | 	jmp	#LR__1901
16b78                 | LR__1900
16b78     1C 4E 05 F1 | 	add	fp, #28
16b7c     A7 1E 02 FB | 	rdlong	local01, fp
16b80     1C 4E 85 F1 | 	sub	fp, #28
16b84     A7 1E 62 FC | 	wrlong	local01, fp
16b88     08 4E 05 F1 | 	add	fp, #8
16b8c     A7 3C 68 FC | 	wrlong	#30, fp
16b90     08 4E 85 F1 | 	sub	fp, #8
16b94                 | LR__1901
16b94                 | LR__1902
16b94     A7 12 02 F6 | 	mov	arg01, fp
16b98     B8 48 BF FD | 	call	#_push
16b9c                 | LR__1903
16b9c     A7 F0 03 F6 | 	mov	ptra, fp
16ba0     B2 00 A0 FD | 	call	#popregs_
16ba4                 | _do_val_ret
16ba4     2D 00 64 FD | 	ret
16ba8                 | 
16ba8                 | ' 
16ba8                 | ' ' ------------------ waitclock
16ba8                 | ' 
16ba8                 | ' sub do_waitclock
16ba8                 | _do_waitclock
16ba8     51 00 00 FF 
16bac     A8 E5 05 F1 | 	add	objptr, ##41896
16bb0     F2 00 02 FB | 	rdlong	_var01, objptr
16bb4                 | ' c=hkcnt
16bb4                 | ' do: loop until hkcnt<>c
16bb4                 | LR__1910
16bb4     F2 02 02 FB | 	rdlong	_var02, objptr
16bb8     00 03 0A F2 | 	cmp	_var02, _var01 wz
16bbc     F4 FF 9F AD |  if_e	jmp	#LR__1910
16bc0     51 00 00 FF 
16bc4     A8 E5 85 F1 | 	sub	objptr, ##41896
16bc8                 | _do_waitclock_ret
16bc8     2D 00 64 FD | 	ret
16bcc                 | 
16bcc                 | ' 
16bcc                 | ' ' ------------------ waitms
16bcc                 | ' 
16bcc                 | ' sub do_waitms
16bcc                 | _do_waitms
16bcc     01 4A 05 F6 | 	mov	COUNT_, #1
16bd0     A8 00 A0 FD | 	call	#pushregs_
16bd4     18 F0 07 F1 | 	add	ptra, #24
16bd8     E0 47 BF FD | 	call	#_pop
16bdc     A7 FA 61 FC | 	wrlong	result1, fp
16be0     04 4E 05 F1 | 	add	fp, #4
16be4     A7 FC 61 FC | 	wrlong	result2, fp
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 FE 61 FC | 	wrlong	result3, fp
16bf0     08 4E 85 F1 | 	sub	fp, #8
16bf4     A7 12 02 F6 | 	mov	arg01, fp
16bf8     A4 49 BF FD | 	call	#_converttoint
16bfc     0C 4E 05 F1 | 	add	fp, #12
16c00     A7 FA 61 FC | 	wrlong	result1, fp
16c04                 | ' 
16c04                 | ' t1=pop()  
16c04                 | ' t=converttoint(t1)
16c04                 | ' if t<0 then return
16c04     0C 4E 85 F1 | 	sub	fp, #12
16c08     00 FA 55 F2 | 	cmps	result1, #0 wc
16c0c     E4 00 90 CD |  if_b	jmp	#LR__1926
16c10                 | ' if t < 1000 then 
16c10     0C 4E 05 F1 | 	add	fp, #12
16c14     A7 12 02 FB | 	rdlong	arg01, fp
16c18     0C 4E 85 F1 | 	sub	fp, #12
16c1c     01 00 00 FF 
16c20     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
16c24     14 00 90 3D |  if_ae	jmp	#LR__1920
16c28     0C 4E 05 F1 | 	add	fp, #12
16c2c     A7 12 02 FB | 	rdlong	arg01, fp
16c30     0C 4E 85 F1 | 	sub	fp, #12
16c34     00 9F B0 FD | 	call	#__system___waitms
16c38     B8 00 90 FD | 	jmp	#LR__1925
16c3c                 | LR__1920
16c3c     10 4E 05 F1 | 	add	fp, #16
16c40     A7 02 68 FC | 	wrlong	#1, fp
16c44     04 4E 85 F1 | 	sub	fp, #4
16c48     A7 12 02 FB | 	rdlong	arg01, fp
16c4c     09 13 52 F6 | 	abs	arg01, arg01 wc
16c50     01 00 00 FF 
16c54     E8 13 16 FD | 	qdiv	arg01, ##1000
16c58                 | '   for i=1 to t/1000
16c58     0C 4E 85 F1 | 	sub	fp, #12
16c5c     18 1E 62 FD | 	getqx	local01
16c60     0F 1F 82 F6 | 	negc	local01, local01
16c64     01 1E 06 F1 | 	add	local01, #1
16c68                 | LR__1921
16c68     10 4E 05 F1 | 	add	fp, #16
16c6c     A7 12 02 FB | 	rdlong	arg01, fp
16c70     10 4E 85 F1 | 	sub	fp, #16
16c74     0F 13 52 F2 | 	cmps	arg01, local01 wc
16c78     54 00 90 3D |  if_ae	jmp	#LR__1924
16c7c     01 00 00 FF 
16c80     E8 13 06 F6 | 	mov	arg01, ##1000
16c84     B0 9E B0 FD | 	call	#__system___waitms
16c88                 | '     waitms(1000)
16c88                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
16c88     E0 12 06 F6 | 	mov	arg01, #224
16c8c     04 93 B0 FD | 	call	#_usbnew_spin2_keystate
16c90     00 FA 0D F2 | 	cmp	result1, #0 wz
16c94     10 00 90 5D |  if_ne	jmp	#LR__1922
16c98     E4 12 06 F6 | 	mov	arg01, #228
16c9c     F4 92 B0 FD | 	call	#_usbnew_spin2_keystate
16ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
16ca4     10 00 90 AD |  if_e	jmp	#LR__1923
16ca8                 | LR__1922
16ca8     06 12 06 F6 | 	mov	arg01, #6
16cac     E4 92 B0 FD | 	call	#_usbnew_spin2_keystate
16cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
16cb4     3C 00 90 5D |  if_ne	jmp	#LR__1926
16cb8                 | LR__1923
16cb8     10 4E 05 F1 | 	add	fp, #16
16cbc     A7 12 02 FB | 	rdlong	arg01, fp
16cc0     01 12 06 F1 | 	add	arg01, #1
16cc4     A7 12 62 FC | 	wrlong	arg01, fp
16cc8     10 4E 85 F1 | 	sub	fp, #16
16ccc     98 FF 9F FD | 	jmp	#LR__1921
16cd0                 | LR__1924
16cd0     0C 4E 05 F1 | 	add	fp, #12
16cd4     A7 1E 02 FB | 	rdlong	local01, fp
16cd8     0F 1F 52 F6 | 	abs	local01, local01 wc
16cdc     01 00 00 FF 
16ce0     E8 1F 16 FD | 	qdiv	local01, ##1000
16ce4     0C 4E 85 F1 | 	sub	fp, #12
16ce8     19 1E 62 FD | 	getqy	local01
16cec     0F 13 82 F6 | 	negc	arg01, local01
16cf0     44 9E B0 FD | 	call	#__system___waitms
16cf4                 | LR__1925
16cf4                 | LR__1926
16cf4     A7 F0 03 F6 | 	mov	ptra, fp
16cf8     B2 00 A0 FD | 	call	#popregs_
16cfc                 | _do_waitms_ret
16cfc     2D 00 64 FD | 	ret
16d00                 | 
16d00                 | ' 
16d00                 | ' ' ------------------ waitvbl
16d00                 | ' 
16d00                 | ' sub do_waitvbl
16d00                 | _do_waitvbl
16d00     01 12 06 F6 | 	mov	arg01, #1
16d04     F0 81 B0 FD | 	call	#_hg010b_spin2_waitvbl
16d08                 | _do_waitvbl_ret
16d08     2D 00 64 FD | 	ret
16d0c                 | 
16d0c                 | ' 
16d0c                 | ' ' ------------------ wrpin
16d0c                 | ' 
16d0c                 | ' sub do_wrpin
16d0c                 | _do_wrpin
16d0c     01 4A 05 F6 | 	mov	COUNT_, #1
16d10     A8 00 A0 FD | 	call	#pushregs_
16d14     18 F0 07 F1 | 	add	ptra, #24
16d18     A0 46 BF FD | 	call	#_pop
16d1c     FD 14 02 F6 | 	mov	arg02, result1
16d20     FE 12 02 F6 | 	mov	arg01, result2
16d24     FF 1E 02 F6 | 	mov	local01, result3
16d28     A7 14 62 FC | 	wrlong	arg02, fp
16d2c     04 4E 05 F1 | 	add	fp, #4
16d30     A7 12 62 FC | 	wrlong	arg01, fp
16d34     04 4E 05 F1 | 	add	fp, #4
16d38     A7 1E 62 FC | 	wrlong	local01, fp
16d3c     08 4E 85 F1 | 	sub	fp, #8
16d40     78 46 BF FD | 	call	#_pop
16d44     FF 1E 02 F6 | 	mov	local01, result3
16d48     0C 4E 05 F1 | 	add	fp, #12
16d4c     A7 FA 61 FC | 	wrlong	result1, fp
16d50     04 4E 05 F1 | 	add	fp, #4
16d54     A7 FC 61 FC | 	wrlong	result2, fp
16d58     04 4E 05 F1 | 	add	fp, #4
16d5c     A7 1E 62 FC | 	wrlong	local01, fp
16d60     08 4E 85 F1 | 	sub	fp, #8
16d64     A7 12 02 F6 | 	mov	arg01, fp
16d68     0C 4E 85 F1 | 	sub	fp, #12
16d6c     30 48 BF FD | 	call	#_converttoint
16d70     FD 1E 02 F6 | 	mov	local01, result1
16d74     A7 12 02 F6 | 	mov	arg01, fp
16d78     24 48 BF FD | 	call	#_converttoint
16d7c     0F FB 01 FC | 	wrpin	result1, local01
16d80     A7 F0 03 F6 | 	mov	ptra, fp
16d84     B2 00 A0 FD | 	call	#popregs_
16d88                 | _do_wrpin_ret
16d88     2D 00 64 FD | 	ret
16d8c                 | 
16d8c                 | ' 
16d8c                 | ' ' ------------------ wxpin
16d8c                 | ' 
16d8c                 | ' sub do_wxpin
16d8c                 | _do_wxpin
16d8c     01 4A 05 F6 | 	mov	COUNT_, #1
16d90     A8 00 A0 FD | 	call	#pushregs_
16d94     18 F0 07 F1 | 	add	ptra, #24
16d98     20 46 BF FD | 	call	#_pop
16d9c     FD 14 02 F6 | 	mov	arg02, result1
16da0     FE 12 02 F6 | 	mov	arg01, result2
16da4     FF 1E 02 F6 | 	mov	local01, result3
16da8     A7 14 62 FC | 	wrlong	arg02, fp
16dac     04 4E 05 F1 | 	add	fp, #4
16db0     A7 12 62 FC | 	wrlong	arg01, fp
16db4     04 4E 05 F1 | 	add	fp, #4
16db8     A7 1E 62 FC | 	wrlong	local01, fp
16dbc     08 4E 85 F1 | 	sub	fp, #8
16dc0     F8 45 BF FD | 	call	#_pop
16dc4     FF 1E 02 F6 | 	mov	local01, result3
16dc8     0C 4E 05 F1 | 	add	fp, #12
16dcc     A7 FA 61 FC | 	wrlong	result1, fp
16dd0     04 4E 05 F1 | 	add	fp, #4
16dd4     A7 FC 61 FC | 	wrlong	result2, fp
16dd8     04 4E 05 F1 | 	add	fp, #4
16ddc     A7 1E 62 FC | 	wrlong	local01, fp
16de0     08 4E 85 F1 | 	sub	fp, #8
16de4     A7 12 02 F6 | 	mov	arg01, fp
16de8     0C 4E 85 F1 | 	sub	fp, #12
16dec     B0 47 BF FD | 	call	#_converttoint
16df0     FD 1E 02 F6 | 	mov	local01, result1
16df4     A7 12 02 F6 | 	mov	arg01, fp
16df8     A4 47 BF FD | 	call	#_converttoint
16dfc     0F FB 11 FC | 	wxpin	result1, local01
16e00     A7 F0 03 F6 | 	mov	ptra, fp
16e04     B2 00 A0 FD | 	call	#popregs_
16e08                 | _do_wxpin_ret
16e08     2D 00 64 FD | 	ret
16e0c                 | 
16e0c                 | ' 
16e0c                 | ' ' ------------------ wypin
16e0c                 | ' 
16e0c                 | ' sub do_wypin
16e0c                 | _do_wypin
16e0c     01 4A 05 F6 | 	mov	COUNT_, #1
16e10     A8 00 A0 FD | 	call	#pushregs_
16e14     18 F0 07 F1 | 	add	ptra, #24
16e18     A0 45 BF FD | 	call	#_pop
16e1c     FD 14 02 F6 | 	mov	arg02, result1
16e20     FE 12 02 F6 | 	mov	arg01, result2
16e24     FF 1E 02 F6 | 	mov	local01, result3
16e28     A7 14 62 FC | 	wrlong	arg02, fp
16e2c     04 4E 05 F1 | 	add	fp, #4
16e30     A7 12 62 FC | 	wrlong	arg01, fp
16e34     04 4E 05 F1 | 	add	fp, #4
16e38     A7 1E 62 FC | 	wrlong	local01, fp
16e3c     08 4E 85 F1 | 	sub	fp, #8
16e40     78 45 BF FD | 	call	#_pop
16e44     FF 1E 02 F6 | 	mov	local01, result3
16e48     0C 4E 05 F1 | 	add	fp, #12
16e4c     A7 FA 61 FC | 	wrlong	result1, fp
16e50     04 4E 05 F1 | 	add	fp, #4
16e54     A7 FC 61 FC | 	wrlong	result2, fp
16e58     04 4E 05 F1 | 	add	fp, #4
16e5c     A7 1E 62 FC | 	wrlong	local01, fp
16e60     08 4E 85 F1 | 	sub	fp, #8
16e64     A7 12 02 F6 | 	mov	arg01, fp
16e68     0C 4E 85 F1 | 	sub	fp, #12
16e6c     30 47 BF FD | 	call	#_converttoint
16e70     FD 1E 02 F6 | 	mov	local01, result1
16e74     A7 12 02 F6 | 	mov	arg01, fp
16e78     24 47 BF FD | 	call	#_converttoint
16e7c     0F FB 21 FC | 	wypin	result1, local01
16e80     A7 F0 03 F6 | 	mov	ptra, fp
16e84     B2 00 A0 FD | 	call	#popregs_
16e88                 | _do_wypin_ret
16e88     2D 00 64 FD | 	ret
16e8c                 | 
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16e8c                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
16e8c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
16e8c                 | ' 
16e8c                 | ' 
16e8c                 | ' '------------------ Assign
16e8c                 | ' 
16e8c                 | ' sub do_assign
16e8c                 | _do_assign
16e8c     05 4A 05 F6 | 	mov	COUNT_, #5
16e90     A8 00 A0 FD | 	call	#pushregs_
16e94     44 F0 07 F1 | 	add	ptra, #68
16e98     4A 00 00 FF 
16e9c     80 E4 05 F1 | 	add	objptr, ##38016
16ea0     F2 16 02 FB | 	rdlong	arg03, objptr
16ea4     0B 15 02 F6 | 	mov	arg02, arg03
16ea8     01 14 66 F0 | 	shl	arg02, #1
16eac     0B 15 02 F1 | 	add	arg02, arg03
16eb0     02 14 66 F0 | 	shl	arg02, #2
16eb4     03 00 00 FF 
16eb8     04 E4 85 F1 | 	sub	objptr, ##1540
16ebc     F2 14 02 F1 | 	add	arg02, objptr
16ec0     0A 15 02 FB | 	rdlong	arg02, arg02
16ec4     18 4E 05 F1 | 	add	fp, #24
16ec8     A7 14 62 FC | 	wrlong	arg02, fp
16ecc                 | ' 
16ecc                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
16ecc                 | ' if variables(varnum).vartype<array_no_type then 
16ecc     18 4E 85 F1 | 	sub	fp, #24
16ed0     04 14 66 F0 | 	shl	arg02, #4
16ed4     32 00 00 FF 
16ed8     84 E4 85 F1 | 	sub	objptr, ##25732
16edc     F2 14 02 F1 | 	add	arg02, objptr
16ee0     0C 14 06 F1 | 	add	arg02, #12
16ee4     0A 17 02 FB | 	rdlong	arg03, arg02
16ee8     00 17 16 F2 | 	cmp	arg03, #256 wc
16eec     14 00 00 FF 
16ef0     F8 E5 85 F1 | 	sub	objptr, ##10744
16ef4     18 01 90 3D |  if_ae	jmp	#LR__1930
16ef8     C0 44 BF FD | 	call	#_pop
16efc     A7 FA 61 FC | 	wrlong	result1, fp
16f00     04 4E 05 F1 | 	add	fp, #4
16f04     A7 FC 61 FC | 	wrlong	result2, fp
16f08     04 4E 05 F1 | 	add	fp, #4
16f0c     A7 FE 61 FC | 	wrlong	result3, fp
16f10     08 4E 85 F1 | 	sub	fp, #8
16f14     A7 16 02 FB | 	rdlong	arg03, fp
16f18     04 4E 05 F1 | 	add	fp, #4
16f1c     A7 14 02 FB | 	rdlong	arg02, fp
16f20     14 4E 05 F1 | 	add	fp, #20
16f24     A7 12 02 FB | 	rdlong	arg01, fp
16f28     04 12 66 F0 | 	shl	arg01, #4
16f2c     14 00 00 FF 
16f30     F8 E5 05 F1 | 	add	objptr, ##10744
16f34     F2 12 02 F1 | 	add	arg01, objptr
16f38     04 12 06 F1 | 	add	arg01, #4
16f3c     09 17 62 FC | 	wrlong	arg03, arg01
16f40     A7 16 02 FB | 	rdlong	arg03, fp
16f44     04 16 66 F0 | 	shl	arg03, #4
16f48     F2 16 02 F1 | 	add	arg03, objptr
16f4c     08 16 06 F1 | 	add	arg03, #8
16f50     0B 15 62 FC | 	wrlong	arg02, arg03
16f54     A7 16 02 FB | 	rdlong	arg03, fp
16f58     04 16 66 F0 | 	shl	arg03, #4
16f5c     F2 16 02 F1 | 	add	arg03, objptr
16f60     10 4E 85 F1 | 	sub	fp, #16
16f64     A7 14 02 FB | 	rdlong	arg02, fp
16f68     0C 16 06 F1 | 	add	arg03, #12
16f6c     0B 15 62 FC | 	wrlong	arg02, arg03
16f70                 | '   t1=pop() 
16f70                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
16f70                 | '   if variables(varnum).vartype<>result_string2 then return
16f70     10 4E 05 F1 | 	add	fp, #16
16f74     A7 16 02 FB | 	rdlong	arg03, fp
16f78     18 4E 85 F1 | 	sub	fp, #24
16f7c     04 16 66 F0 | 	shl	arg03, #4
16f80     F2 16 02 F1 | 	add	arg03, objptr
16f84     0C 16 06 F1 | 	add	arg03, #12
16f88     0B 17 02 FB | 	rdlong	arg03, arg03
16f8c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16f90     14 00 00 FF 
16f94     F8 E5 85 F1 | 	sub	objptr, ##10744
16f98     E4 04 90 5D |  if_ne	jmp	#LR__1953
16f9c     18 4E 05 F1 | 	add	fp, #24
16fa0     A7 16 02 FB | 	rdlong	arg03, fp
16fa4     0B 1F 02 F6 | 	mov	local01, arg03
16fa8     04 1E 66 F0 | 	shl	local01, #4
16fac     14 00 00 FF 
16fb0     F8 E5 05 F1 | 	add	objptr, ##10744
16fb4     F2 1E 02 F1 | 	add	local01, objptr
16fb8     18 4E 85 F1 | 	sub	fp, #24
16fbc     04 16 66 F0 | 	shl	arg03, #4
16fc0     F2 16 02 F1 | 	add	arg03, objptr
16fc4     04 16 06 F1 | 	add	arg03, #4
16fc8     0B 13 02 FB | 	rdlong	arg01, arg03
16fcc     14 00 00 FF 
16fd0     F8 E5 85 F1 | 	sub	objptr, ##10744
16fd4     5C 45 BF FD | 	call	#_convertstring
16fd8     04 1E 06 F1 | 	add	local01, #4
16fdc     0F FB 61 FC | 	wrlong	result1, local01
16fe0     18 4E 05 F1 | 	add	fp, #24
16fe4     A7 1E 02 FB | 	rdlong	local01, fp
16fe8     18 4E 85 F1 | 	sub	fp, #24
16fec     04 1E 66 F0 | 	shl	local01, #4
16ff0     14 00 00 FF 
16ff4     F8 E5 05 F1 | 	add	objptr, ##10744
16ff8     F2 1E 02 F1 | 	add	local01, objptr
16ffc     0C 1E 06 F1 | 	add	local01, #12
17000     0F 3F 68 FC | 	wrlong	#31, local01
17004                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
17004                 | '   variables(varnum).vartype=result_string
17004                 | '   return
17004     14 00 00 FF 
17008     F8 E5 85 F1 | 	sub	objptr, ##10744
1700c     70 04 90 FD | 	jmp	#LR__1953
17010                 | LR__1930
17010                 | ' for i=0 to 2 : arrid(i)=0 : next i
17010     1C 4E 05 F1 | 	add	fp, #28
17014     A7 00 68 FC | 	wrlong	#0, fp
17018     97 16 48 FB | 	callpa	#(@LR__1932-@LR__1931)>>2,fcache_load_ptr_
1701c                 | LR__1931
1701c     A7 1E 02 FB | 	rdlong	local01, fp
17020     02 1E 66 F0 | 	shl	local01, #2
17024     18 4E 05 F1 | 	add	fp, #24
17028     A7 1E 02 F1 | 	add	local01, fp
1702c     0F 01 68 FC | 	wrlong	#0, local01
17030     18 4E 85 F1 | 	sub	fp, #24
17034     A7 1E 02 FB | 	rdlong	local01, fp
17038     01 1E 06 F1 | 	add	local01, #1
1703c     A7 1E 62 FC | 	wrlong	local01, fp
17040     03 1E 16 F2 | 	cmp	local01, #3 wc
17044     D4 FF 9F CD |  if_b	jmp	#LR__1931
17048                 | LR__1932
17048     4A 00 00 FF 
1704c     80 E4 05 F1 | 	add	objptr, ##38016
17050     F2 16 02 FB | 	rdlong	arg03, objptr
17054     0B 1F 02 F6 | 	mov	local01, arg03
17058     01 1E 66 F0 | 	shl	local01, #1
1705c     0B 1F 02 F1 | 	add	local01, arg03
17060     02 1E 66 F0 | 	shl	local01, #2
17064     03 00 00 FF 
17068     04 E4 85 F1 | 	sub	objptr, ##1540
1706c     F2 1E 02 F1 | 	add	local01, objptr
17070     04 1E 06 F1 | 	add	local01, #4
17074     0F 21 02 FB | 	rdlong	local02, local01
17078     04 4E 05 F1 | 	add	fp, #4
1707c     A7 20 62 FC | 	wrlong	local02, fp
17080     20 4E 85 F1 | 	sub	fp, #32
17084     47 00 00 FF 
17088     7C E4 85 F1 | 	sub	objptr, ##36476
1708c     2C 43 BF FD | 	call	#_pop
17090     A7 FA 61 FC | 	wrlong	result1, fp
17094     04 4E 05 F1 | 	add	fp, #4
17098     A7 FC 61 FC | 	wrlong	result2, fp
1709c     04 4E 05 F1 | 	add	fp, #4
170a0     A7 FE 61 FC | 	wrlong	result3, fp
170a4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
170a4                 | ' t1=pop() ' var value
170a4                 | ' if numpar>0 then
170a4     18 4E 05 F1 | 	add	fp, #24
170a8     A7 22 02 FB | 	rdlong	local03, fp
170ac     20 4E 85 F1 | 	sub	fp, #32
170b0     01 22 16 F2 | 	cmp	local03, #1 wc
170b4     78 00 90 CD |  if_b	jmp	#LR__1935
170b8                 | '   for i=numpar to 1 step -1
170b8     20 4E 05 F1 | 	add	fp, #32
170bc     A7 24 0A FB | 	rdlong	local04, fp wz
170c0     04 4E 85 F1 | 	sub	fp, #4
170c4     A7 24 62 FC | 	wrlong	local04, fp
170c8     1C 4E 85 F1 | 	sub	fp, #28
170cc     60 00 90 AD |  if_e	jmp	#LR__1934
170d0                 | LR__1933
170d0     E8 42 BF FD | 	call	#_pop
170d4     0C 4E 05 F1 | 	add	fp, #12
170d8     A7 FA 61 FC | 	wrlong	result1, fp
170dc     04 4E 05 F1 | 	add	fp, #4
170e0     A7 FC 61 FC | 	wrlong	result2, fp
170e4     04 4E 05 F1 | 	add	fp, #4
170e8     A7 FE 61 FC | 	wrlong	result3, fp
170ec     08 4E 05 F1 | 	add	fp, #8
170f0     A7 22 02 FB | 	rdlong	local03, fp
170f4     01 22 86 F1 | 	sub	local03, #1
170f8     02 22 66 F0 | 	shl	local03, #2
170fc     18 4E 05 F1 | 	add	fp, #24
17100     A7 22 02 F1 | 	add	local03, fp
17104     28 4E 85 F1 | 	sub	fp, #40
17108     A7 12 02 F6 | 	mov	arg01, fp
1710c     0C 4E 85 F1 | 	sub	fp, #12
17110     8C 44 BF FD | 	call	#_converttoint
17114     11 FB 61 FC | 	wrlong	result1, local03
17118     1C 4E 05 F1 | 	add	fp, #28
1711c     A7 24 02 FB | 	rdlong	local04, fp
17120     01 24 8E F1 | 	sub	local04, #1 wz
17124     A7 24 62 FC | 	wrlong	local04, fp
17128     1C 4E 85 F1 | 	sub	fp, #28
1712c     A0 FF 9F 5D |  if_ne	jmp	#LR__1933
17130                 | LR__1934
17130                 | LR__1935
17130     18 4E 05 F1 | 	add	fp, #24
17134     A7 1E 02 FB | 	rdlong	local01, fp
17138     04 1E 66 F0 | 	shl	local01, #4
1713c     14 00 00 FF 
17140     F8 E5 05 F1 | 	add	objptr, ##10744
17144     F2 1E 02 F1 | 	add	local01, objptr
17148     04 1E 06 F1 | 	add	local01, #4
1714c     0F 13 02 FB | 	rdlong	arg01, local01
17150     0C 4E 05 F1 | 	add	fp, #12
17154     A7 12 62 FC | 	wrlong	arg01, fp
17158     24 4E 85 F1 | 	sub	fp, #36
1715c     14 00 00 FF 
17160     F8 E5 85 F1 | 	sub	objptr, ##10744
17164     E0 63 B0 FD | 	call	#_pslpeek
17168     FD 24 32 F9 | 	getword	local04, result1, #0
1716c     28 4E 05 F1 | 	add	fp, #40
17170     A7 24 62 FC | 	wrlong	local04, fp
17174     04 4E 85 F1 | 	sub	fp, #4
17178     A7 12 02 FB | 	rdlong	arg01, fp
1717c     24 4E 85 F1 | 	sub	fp, #36
17180     02 12 06 F1 | 	add	arg01, #2
17184     68 63 B0 FD | 	call	#_pspeek
17188     FD FA E1 F8 | 	getbyte	result1, result1, #0
1718c     2C 4E 05 F1 | 	add	fp, #44
17190     A7 FA 61 FC | 	wrlong	result1, fp
17194                 | ' esize=pspeek(arrptr+2)
17194                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
17194     08 4E 85 F1 | 	sub	fp, #8
17198     A7 12 02 FB | 	rdlong	arg01, fp
1719c     24 4E 85 F1 | 	sub	fp, #36
171a0     04 12 06 F1 | 	add	arg01, #4
171a4     A0 63 B0 FD | 	call	#_pslpeek
171a8     FD 24 02 F6 | 	mov	local04, result1
171ac     34 4E 05 F1 | 	add	fp, #52
171b0     A7 1E 02 FB | 	rdlong	local01, fp
171b4     34 4E 85 F1 | 	sub	fp, #52
171b8     12 1F 12 F2 | 	cmp	local01, local04 wc
171bc     54 00 90 3D |  if_ae	jmp	#LR__1936
171c0     24 4E 05 F1 | 	add	fp, #36
171c4     A7 12 02 FB | 	rdlong	arg01, fp
171c8     24 4E 85 F1 | 	sub	fp, #36
171cc     08 12 06 F1 | 	add	arg01, #8
171d0     74 63 B0 FD | 	call	#_pslpeek
171d4     FD 1E 02 F6 | 	mov	local01, result1
171d8     38 4E 05 F1 | 	add	fp, #56
171dc     A7 24 02 FB | 	rdlong	local04, fp
171e0     38 4E 85 F1 | 	sub	fp, #56
171e4     0F 25 12 F2 | 	cmp	local04, local01 wc
171e8     28 00 90 3D |  if_ae	jmp	#LR__1936
171ec     24 4E 05 F1 | 	add	fp, #36
171f0     A7 12 02 FB | 	rdlong	arg01, fp
171f4     24 4E 85 F1 | 	sub	fp, #36
171f8     0C 12 06 F1 | 	add	arg01, #12
171fc     48 63 B0 FD | 	call	#_pslpeek
17200     3C 4E 05 F1 | 	add	fp, #60
17204     A7 24 02 FB | 	rdlong	local04, fp
17208     3C 4E 85 F1 | 	sub	fp, #60
1720c     FD 24 12 F2 | 	cmp	local04, result1 wc
17210     0C 00 90 CD |  if_b	jmp	#LR__1937
17214                 | LR__1936
17214     31 12 06 F6 | 	mov	arg01, #49
17218     98 60 B0 FD | 	call	#_printerror
1721c     60 02 90 FD | 	jmp	#LR__1953
17220                 | LR__1937
17220     24 4E 05 F1 | 	add	fp, #36
17224     A7 12 02 FB | 	rdlong	arg01, fp
17228     09 25 02 F6 | 	mov	local04, arg01
1722c     10 24 06 F1 | 	add	local04, #16
17230     24 4E 85 F1 | 	sub	fp, #36
17234     04 12 06 F1 | 	add	arg01, #4
17238     0C 63 B0 FD | 	call	#_pslpeek
1723c     FD 1E 02 F6 | 	mov	local01, result1
17240     38 4E 05 F1 | 	add	fp, #56
17244     A7 20 02 FB | 	rdlong	local02, fp
17248     10 1F 02 FD | 	qmul	local01, local02
1724c     04 4E 85 F1 | 	sub	fp, #4
17250     A7 22 02 FB | 	rdlong	local03, fp
17254     10 4E 85 F1 | 	sub	fp, #16
17258     A7 12 02 FB | 	rdlong	arg01, fp
1725c     24 4E 85 F1 | 	sub	fp, #36
17260     08 12 06 F1 | 	add	arg01, #8
17264     18 20 62 FD | 	getqx	local02
17268     10 23 02 F1 | 	add	local03, local02
1726c     D8 62 B0 FD | 	call	#_pslpeek
17270     FD 20 02 F6 | 	mov	local02, result1
17274     24 4E 05 F1 | 	add	fp, #36
17278     A7 12 02 FB | 	rdlong	arg01, fp
1727c     24 4E 85 F1 | 	sub	fp, #36
17280     04 12 06 F1 | 	add	arg01, #4
17284     C0 62 B0 FD | 	call	#_pslpeek
17288     FD 20 02 FD | 	qmul	local02, result1
1728c     3C 4E 05 F1 | 	add	fp, #60
17290     A7 20 02 FB | 	rdlong	local02, fp
17294     18 1E 62 FD | 	getqx	local01
17298     10 1F 02 FD | 	qmul	local01, local02
1729c     10 4E 85 F1 | 	sub	fp, #16
172a0     A7 20 02 FB | 	rdlong	local02, fp
172a4     18 1E 62 FD | 	getqx	local01
172a8     0F 23 02 F1 | 	add	local03, local01
172ac     11 21 02 FD | 	qmul	local02, local03
172b0     04 4E 05 F1 | 	add	fp, #4
172b4                 | ' 
172b4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
172b4                 | ' select case arrtype
172b4     18 22 62 FD | 	getqx	local03
172b8     11 25 02 F1 | 	add	local04, local03
172bc     A7 24 62 FC | 	wrlong	local04, fp
172c0     08 4E 85 F1 | 	sub	fp, #8
172c4     A7 26 02 FB | 	rdlong	local05, fp
172c8     28 4E 85 F1 | 	sub	fp, #40
172cc     00 27 86 F1 | 	sub	local05, #256
172d0     0C 26 26 F3 | 	fle	local05, #12
172d4     30 26 62 FD | 	jmprel	local05
172d8                 | LR__1938
172d8     30 00 90 FD | 	jmp	#LR__1939
172dc     58 00 90 FD | 	jmp	#LR__1940
172e0     6C 00 90 FD | 	jmp	#LR__1941
172e4     80 00 90 FD | 	jmp	#LR__1942
172e8     B0 00 90 FD | 	jmp	#LR__1943
172ec     E0 00 90 FD | 	jmp	#LR__1944
172f0     F4 00 90 FD | 	jmp	#LR__1945
172f4     08 01 90 FD | 	jmp	#LR__1946
172f8     1C 01 90 FD | 	jmp	#LR__1947
172fc     30 01 90 FD | 	jmp	#LR__1948
17300     44 01 90 FD | 	jmp	#LR__1949
17304     58 01 90 FD | 	jmp	#LR__1950
17308     6C 01 90 FD | 	jmp	#LR__1951
1730c                 | LR__1939
1730c     A7 12 02 F6 | 	mov	arg01, fp
17310     30 4E 05 F1 | 	add	fp, #48
17314     A7 14 02 FB | 	rdlong	arg02, fp
17318     30 4E 85 F1 | 	sub	fp, #48
1731c     0C 16 06 F6 | 	mov	arg03, #12
17320     0B 00 00 FF 
17324     CC E4 05 F1 | 	add	objptr, ##5836
17328     74 89 B0 FD | 	call	#_psram_spin2_write
1732c     0B 00 00 FF 
17330     CC E4 85 F1 | 	sub	objptr, ##5836
17334     48 01 90 FD | 	jmp	#LR__1952
17338                 | LR__1940
17338     30 4E 05 F1 | 	add	fp, #48
1733c     A7 12 02 FB | 	rdlong	arg01, fp
17340     30 4E 85 F1 | 	sub	fp, #48
17344     A7 14 02 FB | 	rdlong	arg02, fp
17348     5C 61 B0 FD | 	call	#_pspoke
1734c     30 01 90 FD | 	jmp	#LR__1952
17350                 | LR__1941
17350     30 4E 05 F1 | 	add	fp, #48
17354     A7 12 02 FB | 	rdlong	arg01, fp
17358     30 4E 85 F1 | 	sub	fp, #48
1735c     A7 14 02 FB | 	rdlong	arg02, fp
17360     44 61 B0 FD | 	call	#_pspoke
17364     18 01 90 FD | 	jmp	#LR__1952
17368                 | LR__1942
17368     30 4E 05 F1 | 	add	fp, #48
1736c     A7 12 02 FB | 	rdlong	arg01, fp
17370     30 4E 85 F1 | 	sub	fp, #48
17374     A7 14 02 FB | 	rdlong	arg02, fp
17378     2C 61 B0 FD | 	call	#_pspoke
1737c     30 4E 05 F1 | 	add	fp, #48
17380     A7 12 02 FB | 	rdlong	arg01, fp
17384     30 4E 85 F1 | 	sub	fp, #48
17388     01 12 06 F1 | 	add	arg01, #1
1738c     A7 14 02 FB | 	rdlong	arg02, fp
17390     08 14 46 F0 | 	shr	arg02, #8
17394     10 61 B0 FD | 	call	#_pspoke
17398     E4 00 90 FD | 	jmp	#LR__1952
1739c                 | LR__1943
1739c     30 4E 05 F1 | 	add	fp, #48
173a0     A7 12 02 FB | 	rdlong	arg01, fp
173a4     30 4E 85 F1 | 	sub	fp, #48
173a8     A7 14 02 FB | 	rdlong	arg02, fp
173ac     F8 60 B0 FD | 	call	#_pspoke
173b0     30 4E 05 F1 | 	add	fp, #48
173b4     A7 12 02 FB | 	rdlong	arg01, fp
173b8     30 4E 85 F1 | 	sub	fp, #48
173bc     01 12 06 F1 | 	add	arg01, #1
173c0     A7 14 02 FB | 	rdlong	arg02, fp
173c4     08 14 46 F0 | 	shr	arg02, #8
173c8     DC 60 B0 FD | 	call	#_pspoke
173cc     B0 00 90 FD | 	jmp	#LR__1952
173d0                 | LR__1944
173d0     30 4E 05 F1 | 	add	fp, #48
173d4     A7 12 02 FB | 	rdlong	arg01, fp
173d8     30 4E 85 F1 | 	sub	fp, #48
173dc     A7 14 02 FB | 	rdlong	arg02, fp
173e0     34 60 B0 FD | 	call	#_pslpoke
173e4     98 00 90 FD | 	jmp	#LR__1952
173e8                 | LR__1945
173e8     30 4E 05 F1 | 	add	fp, #48
173ec     A7 12 02 FB | 	rdlong	arg01, fp
173f0     30 4E 85 F1 | 	sub	fp, #48
173f4     A7 14 02 FB | 	rdlong	arg02, fp
173f8     1C 60 B0 FD | 	call	#_pslpoke
173fc     80 00 90 FD | 	jmp	#LR__1952
17400                 | LR__1946
17400     30 4E 05 F1 | 	add	fp, #48
17404     A7 12 02 FB | 	rdlong	arg01, fp
17408     30 4E 85 F1 | 	sub	fp, #48
1740c     A7 14 02 FB | 	rdlong	arg02, fp
17410     04 60 B0 FD | 	call	#_pslpoke
17414     68 00 90 FD | 	jmp	#LR__1952
17418                 | LR__1947
17418     30 4E 05 F1 | 	add	fp, #48
1741c     A7 12 02 FB | 	rdlong	arg01, fp
17420     30 4E 85 F1 | 	sub	fp, #48
17424     A7 14 02 FB | 	rdlong	arg02, fp
17428     EC 5F B0 FD | 	call	#_pslpoke
1742c     50 00 90 FD | 	jmp	#LR__1952
17430                 | LR__1948
17430     30 4E 05 F1 | 	add	fp, #48
17434     A7 12 02 FB | 	rdlong	arg01, fp
17438     30 4E 85 F1 | 	sub	fp, #48
1743c     A7 14 02 FB | 	rdlong	arg02, fp
17440     D4 5F B0 FD | 	call	#_pslpoke
17444     38 00 90 FD | 	jmp	#LR__1952
17448                 | LR__1949
17448     30 4E 05 F1 | 	add	fp, #48
1744c     A7 12 02 FB | 	rdlong	arg01, fp
17450     30 4E 85 F1 | 	sub	fp, #48
17454     A7 14 02 FB | 	rdlong	arg02, fp
17458     BC 5F B0 FD | 	call	#_pslpoke
1745c     20 00 90 FD | 	jmp	#LR__1952
17460                 | LR__1950
17460     30 4E 05 F1 | 	add	fp, #48
17464     A7 12 02 FB | 	rdlong	arg01, fp
17468     30 4E 85 F1 | 	sub	fp, #48
1746c     A7 14 02 FB | 	rdlong	arg02, fp
17470     A4 5F B0 FD | 	call	#_pslpoke
17474     08 00 90 FD | 	jmp	#LR__1952
17478                 | LR__1951
17478     32 12 06 F6 | 	mov	arg01, #50
1747c     34 5E B0 FD | 	call	#_printerror
17480                 | LR__1952
17480                 | LR__1953
17480     A7 F0 03 F6 | 	mov	ptra, fp
17484     B2 00 A0 FD | 	call	#popregs_
17488                 | _do_assign_ret
17488     2D 00 64 FD | 	ret
1748c                 | 
1748c                 | ' 
1748c                 | ' 
1748c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1748c                 | ' 
1748c                 | ' sub do_getvar
1748c                 | _do_getvar
1748c     04 4A 05 F6 | 	mov	COUNT_, #4
17490     A8 00 A0 FD | 	call	#pushregs_
17494     3C F0 07 F1 | 	add	ptra, #60
17498                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
17498     4A 00 00 FF 
1749c     80 E4 05 F1 | 	add	objptr, ##38016
174a0     F2 1E 02 FB | 	rdlong	local01, objptr
174a4     0F 17 02 F6 | 	mov	arg03, local01
174a8     01 16 66 F0 | 	shl	arg03, #1
174ac     0F 17 02 F1 | 	add	arg03, local01
174b0     02 16 66 F0 | 	shl	arg03, #2
174b4     03 00 00 FF 
174b8     04 E4 85 F1 | 	sub	objptr, ##1540
174bc     F2 16 02 F1 | 	add	arg03, objptr
174c0     04 16 06 F1 | 	add	arg03, #4
174c4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
174c8     47 00 00 FF 
174cc     7C E4 85 F1 | 	sub	objptr, ##36476
174d0     C4 00 90 5D |  if_ne	jmp	#LR__1961
174d4     4A 00 00 FF 
174d8     80 E4 05 F1 | 	add	objptr, ##38016
174dc     F2 1E 02 FB | 	rdlong	local01, objptr
174e0     0F 13 02 F6 | 	mov	arg01, local01
174e4     01 12 66 F0 | 	shl	arg01, #1
174e8     0F 13 02 F1 | 	add	arg01, local01
174ec     02 12 66 F0 | 	shl	arg01, #2
174f0     03 00 00 FF 
174f4     04 E4 85 F1 | 	sub	objptr, ##1540
174f8     F2 12 02 F1 | 	add	arg01, objptr
174fc     09 1F 02 FB | 	rdlong	local01, arg01
17500     04 1E 66 F0 | 	shl	local01, #4
17504     32 00 00 FF 
17508     84 E4 85 F1 | 	sub	objptr, ##25732
1750c     F2 1E 02 F1 | 	add	local01, objptr
17510     04 1E 06 F1 | 	add	local01, #4
17514     0F 13 02 FB | 	rdlong	arg01, local01
17518     04 1E 06 F1 | 	add	local01, #4
1751c     0F 1F 02 FB | 	rdlong	local01, local01
17520     A7 12 62 FC | 	wrlong	arg01, fp
17524     04 4E 05 F1 | 	add	fp, #4
17528     A7 1E 62 FC | 	wrlong	local01, fp
1752c     35 00 00 FF 
17530     88 E4 05 F1 | 	add	objptr, ##27272
17534     F2 1E 02 FB | 	rdlong	local01, objptr
17538     0F 13 02 F6 | 	mov	arg01, local01
1753c     01 12 66 F0 | 	shl	arg01, #1
17540     0F 13 02 F1 | 	add	arg01, local01
17544     02 12 66 F0 | 	shl	arg01, #2
17548     03 00 00 FF 
1754c     04 E4 85 F1 | 	sub	objptr, ##1540
17550     F2 12 02 F1 | 	add	arg01, objptr
17554     09 1F 02 FB | 	rdlong	local01, arg01
17558     04 1E 66 F0 | 	shl	local01, #4
1755c     32 00 00 FF 
17560     84 E4 85 F1 | 	sub	objptr, ##25732
17564     F2 1E 02 F1 | 	add	local01, objptr
17568     0C 1E 06 F1 | 	add	local01, #12
1756c     0F 1F 02 FB | 	rdlong	local01, local01
17570     04 4E 05 F1 | 	add	fp, #4
17574     A7 1E 62 FC | 	wrlong	local01, fp
17578                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
17578                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
17578                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
17578     08 4E 85 F1 | 	sub	fp, #8
1757c     00 1F 16 F2 | 	cmp	local01, #256 wc
17580     14 00 00 FF 
17584     F8 E5 85 F1 | 	sub	objptr, ##10744
17588     0C 00 90 3D |  if_ae	jmp	#LR__1960
1758c     A7 12 02 F6 | 	mov	arg01, fp
17590     C0 3E BF FD | 	call	#_push
17594     A0 04 90 FD | 	jmp	#LR__1982
17598                 | LR__1960
17598                 | LR__1961
17598     4A 00 00 FF 
1759c     80 E4 05 F1 | 	add	objptr, ##38016
175a0     F2 16 02 FB | 	rdlong	arg03, objptr
175a4     0B 15 02 F6 | 	mov	arg02, arg03
175a8     01 14 66 F0 | 	shl	arg02, #1
175ac     0B 15 02 F1 | 	add	arg02, arg03
175b0     02 14 66 F0 | 	shl	arg02, #2
175b4     03 00 00 FF 
175b8     04 E4 85 F1 | 	sub	objptr, ##1540
175bc     F2 14 02 F1 | 	add	arg02, objptr
175c0     0A 17 02 FB | 	rdlong	arg03, arg02
175c4     04 16 66 F0 | 	shl	arg03, #4
175c8     32 00 00 FF 
175cc     84 E4 85 F1 | 	sub	objptr, ##25732
175d0     F2 16 02 F1 | 	add	arg03, objptr
175d4     04 16 06 F1 | 	add	arg03, #4
175d8     0B 13 02 FB | 	rdlong	arg01, arg03
175dc     0C 4E 05 F1 | 	add	fp, #12
175e0     A7 12 62 FC | 	wrlong	arg01, fp
175e4     0C 4E 85 F1 | 	sub	fp, #12
175e8     14 00 00 FF 
175ec     F8 E5 85 F1 | 	sub	objptr, ##10744
175f0     54 5F B0 FD | 	call	#_pslpeek
175f4     FD FA 31 F9 | 	getword	result1, result1, #0
175f8     10 4E 05 F1 | 	add	fp, #16
175fc     A7 FA 61 FC | 	wrlong	result1, fp
17600     4A 00 00 FF 
17604     80 E4 05 F1 | 	add	objptr, ##38016
17608     F2 16 02 FB | 	rdlong	arg03, objptr
1760c     0B 15 02 F6 | 	mov	arg02, arg03
17610     01 14 66 F0 | 	shl	arg02, #1
17614     0B 15 02 F1 | 	add	arg02, arg03
17618     02 14 66 F0 | 	shl	arg02, #2
1761c     03 00 00 FF 
17620     04 E4 85 F1 | 	sub	objptr, ##1540
17624     F2 14 02 F1 | 	add	arg02, objptr
17628     04 14 06 F1 | 	add	arg02, #4
1762c     0A 17 02 FB | 	rdlong	arg03, arg02
17630     04 4E 05 F1 | 	add	fp, #4
17634     A7 16 62 FC | 	wrlong	arg03, fp
17638     08 4E 85 F1 | 	sub	fp, #8
1763c     A7 12 02 FB | 	rdlong	arg01, fp
17640     0C 4E 85 F1 | 	sub	fp, #12
17644     02 12 06 F1 | 	add	arg01, #2
17648     47 00 00 FF 
1764c     7C E4 85 F1 | 	sub	objptr, ##36476
17650     9C 5E B0 FD | 	call	#_pspeek
17654     FD FA E1 F8 | 	getbyte	result1, result1, #0
17658     18 4E 05 F1 | 	add	fp, #24
1765c     A7 FA 61 FC | 	wrlong	result1, fp
17660     0C 4E 85 F1 | 	sub	fp, #12
17664     A7 12 02 FB | 	rdlong	arg01, fp
17668     0C 4E 85 F1 | 	sub	fp, #12
1766c     04 12 06 F1 | 	add	arg01, #4
17670     D4 5E B0 FD | 	call	#_pslpeek
17674     1C 4E 05 F1 | 	add	fp, #28
17678     A7 FA 61 FC | 	wrlong	result1, fp
1767c     10 4E 85 F1 | 	sub	fp, #16
17680     A7 12 02 FB | 	rdlong	arg01, fp
17684     0C 4E 85 F1 | 	sub	fp, #12
17688     08 12 06 F1 | 	add	arg01, #8
1768c     B8 5E B0 FD | 	call	#_pslpeek
17690     20 4E 05 F1 | 	add	fp, #32
17694     A7 FA 61 FC | 	wrlong	result1, fp
17698     14 4E 85 F1 | 	sub	fp, #20
1769c     A7 12 02 FB | 	rdlong	arg01, fp
176a0     0C 4E 85 F1 | 	sub	fp, #12
176a4     0C 12 06 F1 | 	add	arg01, #12
176a8     9C 5E B0 FD | 	call	#_pslpeek
176ac     24 4E 05 F1 | 	add	fp, #36
176b0     A7 FA 61 FC | 	wrlong	result1, fp
176b4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
176b4                 | ' esize=pspeek(arrptr+2)
176b4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
176b4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
176b4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
176b4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
176b4     10 4E 85 F1 | 	sub	fp, #16
176b8     A7 16 02 FB | 	rdlong	arg03, fp
176bc     14 4E 85 F1 | 	sub	fp, #20
176c0     03 16 16 F2 | 	cmp	arg03, #3 wc
176c4     38 00 90 CD |  if_b	jmp	#LR__1962
176c8     F0 3C BF FD | 	call	#_pop
176cc     FF 16 02 F6 | 	mov	arg03, result3
176d0     A7 FA 61 FC | 	wrlong	result1, fp
176d4     04 4E 05 F1 | 	add	fp, #4
176d8     A7 FC 61 FC | 	wrlong	result2, fp
176dc     04 4E 05 F1 | 	add	fp, #4
176e0     A7 16 62 FC | 	wrlong	arg03, fp
176e4     08 4E 85 F1 | 	sub	fp, #8
176e8     A7 12 02 F6 | 	mov	arg01, fp
176ec     B0 3E BF FD | 	call	#_converttoint
176f0     30 4E 05 F1 | 	add	fp, #48
176f4     A7 FA 61 FC | 	wrlong	result1, fp
176f8     30 4E 85 F1 | 	sub	fp, #48
176fc     0C 00 90 FD | 	jmp	#LR__1963
17700                 | LR__1962
17700     30 4E 05 F1 | 	add	fp, #48
17704     A7 00 68 FC | 	wrlong	#0, fp
17708     30 4E 85 F1 | 	sub	fp, #48
1770c                 | LR__1963
1770c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1770c     14 4E 05 F1 | 	add	fp, #20
17710     A7 16 02 FB | 	rdlong	arg03, fp
17714     14 4E 85 F1 | 	sub	fp, #20
17718     02 16 16 F2 | 	cmp	arg03, #2 wc
1771c     38 00 90 CD |  if_b	jmp	#LR__1964
17720     98 3C BF FD | 	call	#_pop
17724     FF 16 02 F6 | 	mov	arg03, result3
17728     A7 FA 61 FC | 	wrlong	result1, fp
1772c     04 4E 05 F1 | 	add	fp, #4
17730     A7 FC 61 FC | 	wrlong	result2, fp
17734     04 4E 05 F1 | 	add	fp, #4
17738     A7 16 62 FC | 	wrlong	arg03, fp
1773c     08 4E 85 F1 | 	sub	fp, #8
17740     A7 12 02 F6 | 	mov	arg01, fp
17744     58 3E BF FD | 	call	#_converttoint
17748     2C 4E 05 F1 | 	add	fp, #44
1774c     A7 FA 61 FC | 	wrlong	result1, fp
17750     2C 4E 85 F1 | 	sub	fp, #44
17754     0C 00 90 FD | 	jmp	#LR__1965
17758                 | LR__1964
17758     2C 4E 05 F1 | 	add	fp, #44
1775c     A7 00 68 FC | 	wrlong	#0, fp
17760     2C 4E 85 F1 | 	sub	fp, #44
17764                 | LR__1965
17764                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
17764     14 4E 05 F1 | 	add	fp, #20
17768     A7 16 02 FB | 	rdlong	arg03, fp
1776c     14 4E 85 F1 | 	sub	fp, #20
17770     01 16 16 F2 | 	cmp	arg03, #1 wc
17774     38 00 90 CD |  if_b	jmp	#LR__1966
17778     40 3C BF FD | 	call	#_pop
1777c     FF 16 02 F6 | 	mov	arg03, result3
17780     A7 FA 61 FC | 	wrlong	result1, fp
17784     04 4E 05 F1 | 	add	fp, #4
17788     A7 FC 61 FC | 	wrlong	result2, fp
1778c     04 4E 05 F1 | 	add	fp, #4
17790     A7 16 62 FC | 	wrlong	arg03, fp
17794     08 4E 85 F1 | 	sub	fp, #8
17798     A7 12 02 F6 | 	mov	arg01, fp
1779c     00 3E BF FD | 	call	#_converttoint
177a0     28 4E 05 F1 | 	add	fp, #40
177a4     A7 FA 61 FC | 	wrlong	result1, fp
177a8     28 4E 85 F1 | 	sub	fp, #40
177ac     0C 00 90 FD | 	jmp	#LR__1967
177b0                 | LR__1966
177b0     28 4E 05 F1 | 	add	fp, #40
177b4     A7 00 68 FC | 	wrlong	#0, fp
177b8     28 4E 85 F1 | 	sub	fp, #40
177bc                 | LR__1967
177bc     0C 4E 05 F1 | 	add	fp, #12
177c0     A7 20 02 FB | 	rdlong	local02, fp
177c4     1C 4E 05 F1 | 	add	fp, #28
177c8     A7 22 02 FB | 	rdlong	local03, fp
177cc     04 4E 05 F1 | 	add	fp, #4
177d0     A7 FC 01 FB | 	rdlong	result2, fp
177d4     10 4E 85 F1 | 	sub	fp, #16
177d8     A7 FE 01 FB | 	rdlong	result3, fp
177dc     FF FC 01 FD | 	qmul	result2, result3
177e0     10 20 06 F1 | 	add	local02, #16
177e4     14 4E 05 F1 | 	add	fp, #20
177e8     A7 FC 01 FB | 	rdlong	result2, fp
177ec     18 FA 61 FD | 	getqx	result1
177f0     FF FC 01 FD | 	qmul	result2, result3
177f4     FD 22 02 F1 | 	add	local03, result1
177f8     10 4E 85 F1 | 	sub	fp, #16
177fc     A7 FE 01 FB | 	rdlong	result3, fp
17800     18 FC 61 FD | 	getqx	result2
17804     FF FC 01 FD | 	qmul	result2, result3
17808     08 4E 85 F1 | 	sub	fp, #8
1780c     A7 FE 01 FB | 	rdlong	result3, fp
17810     18 FC 61 FD | 	getqx	result2
17814     FE 22 02 F1 | 	add	local03, result2
17818     FF 22 02 FD | 	qmul	local03, result3
1781c     1C 4E 05 F1 | 	add	fp, #28
17820                 | ' 
17820                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
17820                 | ' 
17820                 | ' select case vartype
17820     18 FC 61 FD | 	getqx	result2
17824     FE 20 02 F1 | 	add	local02, result2
17828     A7 20 62 FC | 	wrlong	local02, fp
1782c     24 4E 85 F1 | 	sub	fp, #36
17830     A7 24 02 FB | 	rdlong	local04, fp
17834     10 4E 85 F1 | 	sub	fp, #16
17838     00 25 86 F1 | 	sub	local04, #256
1783c     0C 24 26 F3 | 	fle	local04, #12
17840     30 24 62 FD | 	jmprel	local04
17844                 | LR__1968
17844     30 00 90 FD | 	jmp	#LR__1969
17848     58 00 90 FD | 	jmp	#LR__1970
1784c     8C 00 90 FD | 	jmp	#LR__1971
17850     AC 00 90 FD | 	jmp	#LR__1972
17854     E8 00 90 FD | 	jmp	#LR__1973
17858     08 01 90 FD | 	jmp	#LR__1974
1785c     24 01 90 FD | 	jmp	#LR__1975
17860     40 01 90 FD | 	jmp	#LR__1976
17864     50 01 90 FD | 	jmp	#LR__1977
17868     60 01 90 FD | 	jmp	#LR__1978
1786c     7C 01 90 FD | 	jmp	#LR__1979
17870     8C 01 90 FD | 	jmp	#LR__1980
17874     B8 01 90 FD | 	jmp	#LR__1981
17878                 | LR__1969
17878     A7 12 02 F6 | 	mov	arg01, fp
1787c     34 4E 05 F1 | 	add	fp, #52
17880     A7 14 02 FB | 	rdlong	arg02, fp
17884     34 4E 85 F1 | 	sub	fp, #52
17888     0C 16 06 F6 | 	mov	arg03, #12
1788c     0B 00 00 FF 
17890     CC E4 05 F1 | 	add	objptr, ##5836
17894     6C 83 B0 FD | 	call	#_psram_spin2_read1
17898     0B 00 00 FF 
1789c     CC E4 85 F1 | 	sub	objptr, ##5836
178a0     8C 01 90 FD | 	jmp	#LR__1981
178a4                 | LR__1970
178a4     08 4E 05 F1 | 	add	fp, #8
178a8     A7 38 68 FC | 	wrlong	#28, fp
178ac     2C 4E 05 F1 | 	add	fp, #44
178b0     A7 12 02 FB | 	rdlong	arg01, fp
178b4     34 4E 85 F1 | 	sub	fp, #52
178b8     34 5C B0 FD | 	call	#_pspeek
178bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
178c0     A7 FA 61 FC | 	wrlong	result1, fp
178c4     80 FA 15 F2 | 	cmp	result1, #128 wc
178c8     00 1F 66 36 |  if_ae	neg	local01, #256
178cc     A7 22 02 3B |  if_ae	rdlong	local03, fp
178d0     11 1F 42 35 |  if_ae	or	local01, local03
178d4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
178d8     54 01 90 FD | 	jmp	#LR__1981
178dc                 | LR__1971
178dc     08 4E 05 F1 | 	add	fp, #8
178e0     A7 3A 68 FC | 	wrlong	#29, fp
178e4     2C 4E 05 F1 | 	add	fp, #44
178e8     A7 12 02 FB | 	rdlong	arg01, fp
178ec     34 4E 85 F1 | 	sub	fp, #52
178f0     FC 5B B0 FD | 	call	#_pspeek
178f4     FD FA E1 F8 | 	getbyte	result1, result1, #0
178f8     A7 FA 61 FC | 	wrlong	result1, fp
178fc     30 01 90 FD | 	jmp	#LR__1981
17900                 | LR__1972
17900     08 4E 05 F1 | 	add	fp, #8
17904     A7 38 68 FC | 	wrlong	#28, fp
17908     2C 4E 05 F1 | 	add	fp, #44
1790c     A7 12 02 FB | 	rdlong	arg01, fp
17910     34 4E 85 F1 | 	sub	fp, #52
17914     30 5C B0 FD | 	call	#_pslpeek
17918     FD FA 31 F9 | 	getword	result1, result1, #0
1791c     A7 FA 61 FC | 	wrlong	result1, fp
17920     40 00 00 FF 
17924     00 FA 15 F2 | 	cmp	result1, ##32768 wc
17928     FF 7F 00 3F 
1792c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
17930     A7 22 02 3B |  if_ae	rdlong	local03, fp
17934     11 1F 42 35 |  if_ae	or	local01, local03
17938     A7 1E 62 3C |  if_ae	wrlong	local01, fp
1793c     F0 00 90 FD | 	jmp	#LR__1981
17940                 | LR__1973
17940     08 4E 05 F1 | 	add	fp, #8
17944     A7 3A 68 FC | 	wrlong	#29, fp
17948     2C 4E 05 F1 | 	add	fp, #44
1794c     A7 12 02 FB | 	rdlong	arg01, fp
17950     34 4E 85 F1 | 	sub	fp, #52
17954     F0 5B B0 FD | 	call	#_pslpeek
17958     FD FA 31 F9 | 	getword	result1, result1, #0
1795c     A7 FA 61 FC | 	wrlong	result1, fp
17960     CC 00 90 FD | 	jmp	#LR__1981
17964                 | LR__1974
17964     08 4E 05 F1 | 	add	fp, #8
17968     A7 38 68 FC | 	wrlong	#28, fp
1796c     2C 4E 05 F1 | 	add	fp, #44
17970     A7 12 02 FB | 	rdlong	arg01, fp
17974     34 4E 85 F1 | 	sub	fp, #52
17978     CC 5B B0 FD | 	call	#_pslpeek
1797c     A7 FA 61 FC | 	wrlong	result1, fp
17980     AC 00 90 FD | 	jmp	#LR__1981
17984                 | LR__1975
17984     08 4E 05 F1 | 	add	fp, #8
17988     A7 3A 68 FC | 	wrlong	#29, fp
1798c     2C 4E 05 F1 | 	add	fp, #44
17990     A7 12 02 FB | 	rdlong	arg01, fp
17994     34 4E 85 F1 | 	sub	fp, #52
17998     AC 5B B0 FD | 	call	#_pslpeek
1799c     A7 FA 61 FC | 	wrlong	result1, fp
179a0     8C 00 90 FD | 	jmp	#LR__1981
179a4                 | LR__1976
179a4     08 4E 05 F1 | 	add	fp, #8
179a8     A7 FE 69 FC | 	wrlong	#255, fp
179ac     08 4E 85 F1 | 	sub	fp, #8
179b0     A7 60 68 FC | 	wrlong	#48, fp
179b4     78 00 90 FD | 	jmp	#LR__1981
179b8                 | LR__1977
179b8     08 4E 05 F1 | 	add	fp, #8
179bc     A7 FE 69 FC | 	wrlong	#255, fp
179c0     08 4E 85 F1 | 	sub	fp, #8
179c4     A7 60 68 FC | 	wrlong	#48, fp
179c8     64 00 90 FD | 	jmp	#LR__1981
179cc                 | LR__1978
179cc     08 4E 05 F1 | 	add	fp, #8
179d0     A7 3C 68 FC | 	wrlong	#30, fp
179d4     2C 4E 05 F1 | 	add	fp, #44
179d8     A7 12 02 FB | 	rdlong	arg01, fp
179dc     34 4E 85 F1 | 	sub	fp, #52
179e0     64 5B B0 FD | 	call	#_pslpeek
179e4     A7 FA 61 FC | 	wrlong	result1, fp
179e8     44 00 90 FD | 	jmp	#LR__1981
179ec                 | LR__1979
179ec     08 4E 05 F1 | 	add	fp, #8
179f0     A7 FE 69 FC | 	wrlong	#255, fp
179f4     08 4E 85 F1 | 	sub	fp, #8
179f8     A7 60 68 FC | 	wrlong	#48, fp
179fc     30 00 90 FD | 	jmp	#LR__1981
17a00                 | LR__1980
17a00     08 4E 05 F1 | 	add	fp, #8
17a04     A7 3E 68 FC | 	wrlong	#31, fp
17a08     2C 4E 05 F1 | 	add	fp, #44
17a0c     A7 12 02 FB | 	rdlong	arg01, fp
17a10     34 4E 85 F1 | 	sub	fp, #52
17a14     30 5B B0 FD | 	call	#_pslpeek
17a18     A7 FA 61 FC | 	wrlong	result1, fp
17a1c     00 04 00 FF 
17a20     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17a24     08 4E 05 31 |  if_ae	add	fp, #8
17a28     A7 56 68 3C |  if_ae	wrlong	#43, fp
17a2c     08 4E 85 31 |  if_ae	sub	fp, #8
17a30                 | LR__1981
17a30     A7 12 02 F6 | 	mov	arg01, fp
17a34     1C 3A BF FD | 	call	#_push
17a38                 | LR__1982
17a38     A7 F0 03 F6 | 	mov	ptra, fp
17a3c     B2 00 A0 FD | 	call	#popregs_
17a40                 | _do_getvar_ret
17a40     2D 00 64 FD | 	ret
17a44                 | 
17a44                 | ' 
17a44                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
17a44                 | ' 
17a44                 | ' sub do_getaddr
17a44                 | _do_getaddr
17a44     01 4A 05 F6 | 	mov	COUNT_, #1
17a48     A8 00 A0 FD | 	call	#pushregs_
17a4c     38 F0 07 F1 | 	add	ptra, #56
17a50                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
17a50                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
17a50     4A 00 00 FF 
17a54     80 E4 05 F1 | 	add	objptr, ##38016
17a58     F2 12 02 FB | 	rdlong	arg01, objptr
17a5c     09 FD 01 F6 | 	mov	result2, arg01
17a60     01 FC 65 F0 | 	shl	result2, #1
17a64     09 FD 01 F1 | 	add	result2, arg01
17a68     02 FC 65 F0 | 	shl	result2, #2
17a6c     03 00 00 FF 
17a70     04 E4 85 F1 | 	sub	objptr, ##1540
17a74     F2 FC 01 F1 | 	add	result2, objptr
17a78     04 FC 05 F1 | 	add	result2, #4
17a7c     FE FC 09 FB | 	rdlong	result2, result2 wz
17a80     47 00 00 FF 
17a84     7C E4 85 F1 | 	sub	objptr, ##36476
17a88     C4 00 90 5D |  if_ne	jmp	#LR__1990
17a8c     4A 00 00 FF 
17a90     80 E4 05 F1 | 	add	objptr, ##38016
17a94     F2 12 02 FB | 	rdlong	arg01, objptr
17a98     09 FD 01 F6 | 	mov	result2, arg01
17a9c     01 FC 65 F0 | 	shl	result2, #1
17aa0     09 FD 01 F1 | 	add	result2, arg01
17aa4     02 FC 65 F0 | 	shl	result2, #2
17aa8     03 00 00 FF 
17aac     04 E4 85 F1 | 	sub	objptr, ##1540
17ab0     F2 FC 01 F1 | 	add	result2, objptr
17ab4     FE 12 02 FB | 	rdlong	arg01, result2
17ab8     04 12 66 F0 | 	shl	arg01, #4
17abc     32 00 00 FF 
17ac0     84 E4 85 F1 | 	sub	objptr, ##25732
17ac4     F2 12 02 F1 | 	add	arg01, objptr
17ac8     0C 12 06 F1 | 	add	arg01, #12
17acc     09 13 02 FB | 	rdlong	arg01, arg01
17ad0     08 4E 05 F1 | 	add	fp, #8
17ad4     A7 12 62 FC | 	wrlong	arg01, fp
17ad8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
17ad8                 | '    if t1.result_type>=array_no_type then goto 2200
17ad8     08 4E 85 F1 | 	sub	fp, #8
17adc     00 13 16 F2 | 	cmp	arg01, #256 wc
17ae0     14 00 00 FF 
17ae4     F8 E5 85 F1 | 	sub	objptr, ##10744
17ae8     64 00 90 3D |  if_ae	jmp	#LR__1991
17aec     4A 00 00 FF 
17af0     80 E4 05 F1 | 	add	objptr, ##38016
17af4     F2 12 02 FB | 	rdlong	arg01, objptr
17af8     09 FB 01 F6 | 	mov	result1, arg01
17afc     01 FA 65 F0 | 	shl	result1, #1
17b00     09 FB 01 F1 | 	add	result1, arg01
17b04     02 FA 65 F0 | 	shl	result1, #2
17b08     03 00 00 FF 
17b0c     04 E4 85 F1 | 	sub	objptr, ##1540
17b10     F2 FA 01 F1 | 	add	result1, objptr
17b14     FD FA 01 FB | 	rdlong	result1, result1
17b18     04 FA 65 F0 | 	shl	result1, #4
17b1c     32 00 00 FF 
17b20     84 E4 85 F1 | 	sub	objptr, ##25732
17b24     F2 FA 01 F1 | 	add	result1, objptr
17b28     04 FA 05 F1 | 	add	result1, #4
17b2c     14 00 00 FF 
17b30     F8 E5 85 F1 | 	sub	objptr, ##10744
17b34     A7 FA 61 FC | 	wrlong	result1, fp
17b38     08 4E 05 F1 | 	add	fp, #8
17b3c     A7 3A 68 FC | 	wrlong	#29, fp
17b40     08 4E 85 F1 | 	sub	fp, #8
17b44     A7 12 02 F6 | 	mov	arg01, fp
17b48     08 39 BF FD | 	call	#_push
17b4c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
17b4c                 | '   t1.result_type=result_uint
17b4c                 | '   push t1 : return
17b4c     D8 02 90 FD | 	jmp	#LR__2000
17b50                 | LR__1990
17b50                 | LR__1991
17b50     4A 00 00 FF 
17b54     80 E4 05 F1 | 	add	objptr, ##38016
17b58     F2 FE 01 FB | 	rdlong	result3, objptr
17b5c     FF 12 02 F6 | 	mov	arg01, result3
17b60     01 12 66 F0 | 	shl	arg01, #1
17b64     FF 12 02 F1 | 	add	arg01, result3
17b68     02 12 66 F0 | 	shl	arg01, #2
17b6c     03 00 00 FF 
17b70     04 E4 85 F1 | 	sub	objptr, ##1540
17b74     F2 12 02 F1 | 	add	arg01, objptr
17b78     09 13 02 FB | 	rdlong	arg01, arg01
17b7c     04 12 66 F0 | 	shl	arg01, #4
17b80     32 00 00 FF 
17b84     84 E4 85 F1 | 	sub	objptr, ##25732
17b88     F2 12 02 F1 | 	add	arg01, objptr
17b8c     04 12 06 F1 | 	add	arg01, #4
17b90     09 13 02 FB | 	rdlong	arg01, arg01
17b94     0C 4E 05 F1 | 	add	fp, #12
17b98     A7 12 62 FC | 	wrlong	arg01, fp
17b9c     0C 4E 85 F1 | 	sub	fp, #12
17ba0     14 00 00 FF 
17ba4     F8 E5 85 F1 | 	sub	objptr, ##10744
17ba8     9C 59 B0 FD | 	call	#_pslpeek
17bac     FD FA 31 F9 | 	getword	result1, result1, #0
17bb0     10 4E 05 F1 | 	add	fp, #16
17bb4     A7 FA 61 FC | 	wrlong	result1, fp
17bb8     4A 00 00 FF 
17bbc     80 E4 05 F1 | 	add	objptr, ##38016
17bc0     F2 FE 01 FB | 	rdlong	result3, objptr
17bc4     FF 12 02 F6 | 	mov	arg01, result3
17bc8     01 12 66 F0 | 	shl	arg01, #1
17bcc     FF 12 02 F1 | 	add	arg01, result3
17bd0     02 12 66 F0 | 	shl	arg01, #2
17bd4     03 00 00 FF 
17bd8     04 E4 85 F1 | 	sub	objptr, ##1540
17bdc     F2 12 02 F1 | 	add	arg01, objptr
17be0     04 12 06 F1 | 	add	arg01, #4
17be4     09 13 02 FB | 	rdlong	arg01, arg01
17be8     04 4E 05 F1 | 	add	fp, #4
17bec     A7 12 62 FC | 	wrlong	arg01, fp
17bf0     08 4E 85 F1 | 	sub	fp, #8
17bf4     A7 12 02 FB | 	rdlong	arg01, fp
17bf8     0C 4E 85 F1 | 	sub	fp, #12
17bfc     02 12 06 F1 | 	add	arg01, #2
17c00     47 00 00 FF 
17c04     7C E4 85 F1 | 	sub	objptr, ##36476
17c08     E4 58 B0 FD | 	call	#_pspeek
17c0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
17c10     18 4E 05 F1 | 	add	fp, #24
17c14     A7 FA 61 FC | 	wrlong	result1, fp
17c18     0C 4E 85 F1 | 	sub	fp, #12
17c1c     A7 12 02 FB | 	rdlong	arg01, fp
17c20     0C 4E 85 F1 | 	sub	fp, #12
17c24     04 12 06 F1 | 	add	arg01, #4
17c28     1C 59 B0 FD | 	call	#_pslpeek
17c2c     1C 4E 05 F1 | 	add	fp, #28
17c30     A7 FA 61 FC | 	wrlong	result1, fp
17c34     10 4E 85 F1 | 	sub	fp, #16
17c38     A7 12 02 FB | 	rdlong	arg01, fp
17c3c     0C 4E 85 F1 | 	sub	fp, #12
17c40     08 12 06 F1 | 	add	arg01, #8
17c44     00 59 B0 FD | 	call	#_pslpeek
17c48     20 4E 05 F1 | 	add	fp, #32
17c4c     A7 FA 61 FC | 	wrlong	result1, fp
17c50     14 4E 85 F1 | 	sub	fp, #20
17c54     A7 12 02 FB | 	rdlong	arg01, fp
17c58     0C 4E 85 F1 | 	sub	fp, #12
17c5c     0C 12 06 F1 | 	add	arg01, #12
17c60     E4 58 B0 FD | 	call	#_pslpeek
17c64     24 4E 05 F1 | 	add	fp, #36
17c68     A7 FA 61 FC | 	wrlong	result1, fp
17c6c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
17c6c                 | ' esize=pspeek(arrptr+2)
17c6c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
17c6c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
17c6c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
17c6c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
17c6c     10 4E 85 F1 | 	sub	fp, #16
17c70     A7 12 02 FB | 	rdlong	arg01, fp
17c74     14 4E 85 F1 | 	sub	fp, #20
17c78     03 12 16 F2 | 	cmp	arg01, #3 wc
17c7c     34 00 90 CD |  if_b	jmp	#LR__1992
17c80     38 37 BF FD | 	call	#_pop
17c84     A7 FA 61 FC | 	wrlong	result1, fp
17c88     04 4E 05 F1 | 	add	fp, #4
17c8c     A7 FC 61 FC | 	wrlong	result2, fp
17c90     04 4E 05 F1 | 	add	fp, #4
17c94     A7 FE 61 FC | 	wrlong	result3, fp
17c98     08 4E 85 F1 | 	sub	fp, #8
17c9c     A7 12 02 F6 | 	mov	arg01, fp
17ca0     FC 38 BF FD | 	call	#_converttoint
17ca4     30 4E 05 F1 | 	add	fp, #48
17ca8     A7 FA 61 FC | 	wrlong	result1, fp
17cac     30 4E 85 F1 | 	sub	fp, #48
17cb0     0C 00 90 FD | 	jmp	#LR__1993
17cb4                 | LR__1992
17cb4     30 4E 05 F1 | 	add	fp, #48
17cb8     A7 00 68 FC | 	wrlong	#0, fp
17cbc     30 4E 85 F1 | 	sub	fp, #48
17cc0                 | LR__1993
17cc0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
17cc0     14 4E 05 F1 | 	add	fp, #20
17cc4     A7 12 02 FB | 	rdlong	arg01, fp
17cc8     14 4E 85 F1 | 	sub	fp, #20
17ccc     02 12 16 F2 | 	cmp	arg01, #2 wc
17cd0     34 00 90 CD |  if_b	jmp	#LR__1994
17cd4     E4 36 BF FD | 	call	#_pop
17cd8     A7 FA 61 FC | 	wrlong	result1, fp
17cdc     04 4E 05 F1 | 	add	fp, #4
17ce0     A7 FC 61 FC | 	wrlong	result2, fp
17ce4     04 4E 05 F1 | 	add	fp, #4
17ce8     A7 FE 61 FC | 	wrlong	result3, fp
17cec     08 4E 85 F1 | 	sub	fp, #8
17cf0     A7 12 02 F6 | 	mov	arg01, fp
17cf4     A8 38 BF FD | 	call	#_converttoint
17cf8     2C 4E 05 F1 | 	add	fp, #44
17cfc     A7 FA 61 FC | 	wrlong	result1, fp
17d00     2C 4E 85 F1 | 	sub	fp, #44
17d04     0C 00 90 FD | 	jmp	#LR__1995
17d08                 | LR__1994
17d08     2C 4E 05 F1 | 	add	fp, #44
17d0c     A7 00 68 FC | 	wrlong	#0, fp
17d10     2C 4E 85 F1 | 	sub	fp, #44
17d14                 | LR__1995
17d14                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
17d14     14 4E 05 F1 | 	add	fp, #20
17d18     A7 12 02 FB | 	rdlong	arg01, fp
17d1c     14 4E 85 F1 | 	sub	fp, #20
17d20     01 12 16 F2 | 	cmp	arg01, #1 wc
17d24     34 00 90 CD |  if_b	jmp	#LR__1996
17d28     90 36 BF FD | 	call	#_pop
17d2c     A7 FA 61 FC | 	wrlong	result1, fp
17d30     04 4E 05 F1 | 	add	fp, #4
17d34     A7 FC 61 FC | 	wrlong	result2, fp
17d38     04 4E 05 F1 | 	add	fp, #4
17d3c     A7 FE 61 FC | 	wrlong	result3, fp
17d40     08 4E 85 F1 | 	sub	fp, #8
17d44     A7 12 02 F6 | 	mov	arg01, fp
17d48     54 38 BF FD | 	call	#_converttoint
17d4c     28 4E 05 F1 | 	add	fp, #40
17d50     A7 FA 61 FC | 	wrlong	result1, fp
17d54     28 4E 85 F1 | 	sub	fp, #40
17d58     0C 00 90 FD | 	jmp	#LR__1997
17d5c                 | LR__1996
17d5c     28 4E 05 F1 | 	add	fp, #40
17d60     A7 00 68 FC | 	wrlong	#0, fp
17d64     28 4E 85 F1 | 	sub	fp, #40
17d68                 | LR__1997
17d68                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
17d68                 | ' if numpar>0 then
17d68     14 4E 05 F1 | 	add	fp, #20
17d6c     A7 FE 01 FB | 	rdlong	result3, fp
17d70     14 4E 85 F1 | 	sub	fp, #20
17d74     01 FE 15 F2 | 	cmp	result3, #1 wc
17d78     8C 00 90 CD |  if_b	jmp	#LR__1998
17d7c     0C 4E 05 F1 | 	add	fp, #12
17d80     A7 FC 01 FB | 	rdlong	result2, fp
17d84     1C 4E 05 F1 | 	add	fp, #28
17d88     A7 FE 01 FB | 	rdlong	result3, fp
17d8c     04 4E 05 F1 | 	add	fp, #4
17d90     A7 12 02 FB | 	rdlong	arg01, fp
17d94     10 4E 85 F1 | 	sub	fp, #16
17d98     A7 FA 01 FB | 	rdlong	result1, fp
17d9c     FD 12 02 FD | 	qmul	arg01, result1
17da0     10 FC 05 F1 | 	add	result2, #16
17da4     14 4E 05 F1 | 	add	fp, #20
17da8     A7 1E 02 FB | 	rdlong	local01, fp
17dac     18 12 62 FD | 	getqx	arg01
17db0     FD 1E 02 FD | 	qmul	local01, result1
17db4     09 FF 01 F1 | 	add	result3, arg01
17db8     10 4E 85 F1 | 	sub	fp, #16
17dbc     A7 1E 02 FB | 	rdlong	local01, fp
17dc0     18 FA 61 FD | 	getqx	result1
17dc4     0F FB 01 FD | 	qmul	result1, local01
17dc8     08 4E 85 F1 | 	sub	fp, #8
17dcc     A7 1E 02 FB | 	rdlong	local01, fp
17dd0     18 FA 61 FD | 	getqx	result1
17dd4     FD FE 01 F1 | 	add	result3, result1
17dd8     0F FF 01 FD | 	qmul	result3, local01
17ddc     1C 4E 05 F1 | 	add	fp, #28
17de0     18 1E 62 FD | 	getqx	local01
17de4     0F FD 01 F1 | 	add	result2, local01
17de8     A7 FC 61 FC | 	wrlong	result2, fp
17dec     2C 4E 85 F1 | 	sub	fp, #44
17df0     A7 3A 68 FC | 	wrlong	#29, fp
17df4     2C 4E 05 F1 | 	add	fp, #44
17df8     A7 1E 02 FB | 	rdlong	local01, fp
17dfc     34 4E 85 F1 | 	sub	fp, #52
17e00     A7 1E 62 FC | 	wrlong	local01, fp
17e04     18 00 90 FD | 	jmp	#LR__1999
17e08                 | LR__1998
17e08     08 4E 05 F1 | 	add	fp, #8
17e0c     A7 3A 68 FC | 	wrlong	#29, fp
17e10     04 4E 05 F1 | 	add	fp, #4
17e14     A7 1E 02 FB | 	rdlong	local01, fp
17e18     0C 4E 85 F1 | 	sub	fp, #12
17e1c     A7 1E 62 FC | 	wrlong	local01, fp
17e20                 | LR__1999
17e20     A7 12 02 F6 | 	mov	arg01, fp
17e24     2C 36 BF FD | 	call	#_push
17e28                 | LR__2000
17e28     A7 F0 03 F6 | 	mov	ptra, fp
17e2c     B2 00 A0 FD | 	call	#popregs_
17e30                 | _do_getaddr_ret
17e30     2D 00 64 FD | 	ret
17e34                 | 
17e34                 | ' 
17e34                 | ' 
17e34                 | ' 
17e34                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e34                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
17e34                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e34                 | ' 
17e34                 | ' '--------------------------------- AND 
17e34                 | ' 
17e34                 | ' sub do_and 
17e34                 | _do_and
17e34     03 4A 05 F6 | 	mov	COUNT_, #3
17e38     A8 00 A0 FD | 	call	#pushregs_
17e3c     18 F0 07 F1 | 	add	ptra, #24
17e40     78 35 BF FD | 	call	#_pop
17e44     FD 12 02 F6 | 	mov	arg01, result1
17e48     FE 1E 02 F6 | 	mov	local01, result2
17e4c     FF 20 02 F6 | 	mov	local02, result3
17e50     0C 4E 05 F1 | 	add	fp, #12
17e54     A7 12 62 FC | 	wrlong	arg01, fp
17e58     04 4E 05 F1 | 	add	fp, #4
17e5c     A7 1E 62 FC | 	wrlong	local01, fp
17e60     04 4E 05 F1 | 	add	fp, #4
17e64     A7 20 62 FC | 	wrlong	local02, fp
17e68     14 4E 85 F1 | 	sub	fp, #20
17e6c     4C 35 BF FD | 	call	#_pop
17e70     FF 22 02 F6 | 	mov	local03, result3
17e74     A7 FA 61 FC | 	wrlong	result1, fp
17e78     04 4E 05 F1 | 	add	fp, #4
17e7c     A7 FC 61 FC | 	wrlong	result2, fp
17e80     04 4E 05 F1 | 	add	fp, #4
17e84     A7 22 62 FC | 	wrlong	local03, fp
17e88                 | ' 
17e88                 | ' t2=pop()
17e88                 | ' t1=pop()
17e88                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
17e88     08 4E 85 F1 | 	sub	fp, #8
17e8c     1C 22 0E F2 | 	cmp	local03, #28 wz
17e90     A7 22 02 AB |  if_e	rdlong	local03, fp
17e94     A7 22 62 AC |  if_e	wrlong	local03, fp
17e98     08 4E 05 A1 |  if_e	add	fp, #8
17e9c     A7 3A 68 AC |  if_e	wrlong	#29, fp
17ea0     08 4E 85 A1 |  if_e	sub	fp, #8
17ea4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
17ea4     14 4E 05 F1 | 	add	fp, #20
17ea8     A7 22 02 FB | 	rdlong	local03, fp
17eac     14 4E 85 F1 | 	sub	fp, #20
17eb0     1C 22 0E F2 | 	cmp	local03, #28 wz
17eb4     18 00 90 5D |  if_ne	jmp	#LR__2010
17eb8     0C 4E 05 F1 | 	add	fp, #12
17ebc     A7 22 02 FB | 	rdlong	local03, fp
17ec0     A7 22 62 FC | 	wrlong	local03, fp
17ec4     08 4E 05 F1 | 	add	fp, #8
17ec8     A7 3A 68 FC | 	wrlong	#29, fp
17ecc     14 4E 85 F1 | 	sub	fp, #20
17ed0                 | LR__2010
17ed0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
17ed0     08 4E 05 F1 | 	add	fp, #8
17ed4     A7 22 02 FB | 	rdlong	local03, fp
17ed8     08 4E 85 F1 | 	sub	fp, #8
17edc     1F 22 0E F2 | 	cmp	local03, #31 wz
17ee0     14 4E 05 51 |  if_ne	add	fp, #20
17ee4     A7 20 02 5B |  if_ne	rdlong	local02, fp
17ee8     14 4E 85 51 |  if_ne	sub	fp, #20
17eec     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
17ef0     08 4E 05 51 |  if_ne	add	fp, #8
17ef4     A7 22 02 5B |  if_ne	rdlong	local03, fp
17ef8     08 4E 85 51 |  if_ne	sub	fp, #8
17efc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
17f00     14 4E 05 51 |  if_ne	add	fp, #20
17f04     14 4E 85 51 |  if_ne	sub	fp, #20
17f08     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
17f0c     A7 0C 68 AC |  if_e	wrlong	#6, fp
17f10     08 4E 05 A1 |  if_e	add	fp, #8
17f14     A7 FE 69 AC |  if_e	wrlong	#255, fp
17f18     08 4E 85 A1 |  if_e	sub	fp, #8
17f1c     18 00 90 AD |  if_e	jmp	#LR__2011
17f20     A7 22 02 FB | 	rdlong	local03, fp
17f24     0C 4E 05 F1 | 	add	fp, #12
17f28     A7 1E 02 FB | 	rdlong	local01, fp
17f2c     0C 4E 85 F1 | 	sub	fp, #12
17f30     0F 23 02 F5 | 	and	local03, local01
17f34     A7 22 62 FC | 	wrlong	local03, fp
17f38                 | LR__2011
17f38     A7 12 02 F6 | 	mov	arg01, fp
17f3c     14 35 BF FD | 	call	#_push
17f40     A7 F0 03 F6 | 	mov	ptra, fp
17f44     B2 00 A0 FD | 	call	#popregs_
17f48                 | _do_and_ret
17f48     2D 00 64 FD | 	ret
17f4c                 | 
17f4c                 | ' 
17f4c                 | ' '--------------------------------- DIV (integer divide)
17f4c                 | ' 
17f4c                 | ' sub do_div 
17f4c                 | _do_div
17f4c     01 4A 05 F6 | 	mov	COUNT_, #1
17f50     A8 00 A0 FD | 	call	#pushregs_
17f54     18 F0 07 F1 | 	add	ptra, #24
17f58     60 34 BF FD | 	call	#_pop
17f5c     FD 7E 02 F6 | 	mov	muldivb_, result1
17f60     FE 7C 02 F6 | 	mov	muldiva_, result2
17f64     FF 1E 02 F6 | 	mov	local01, result3
17f68     0C 4E 05 F1 | 	add	fp, #12
17f6c     A7 7E 62 FC | 	wrlong	muldivb_, fp
17f70     04 4E 05 F1 | 	add	fp, #4
17f74     A7 7C 62 FC | 	wrlong	muldiva_, fp
17f78     04 4E 05 F1 | 	add	fp, #4
17f7c     A7 1E 62 FC | 	wrlong	local01, fp
17f80     14 4E 85 F1 | 	sub	fp, #20
17f84     34 34 BF FD | 	call	#_pop
17f88     A7 FA 61 FC | 	wrlong	result1, fp
17f8c     04 4E 05 F1 | 	add	fp, #4
17f90     A7 FC 61 FC | 	wrlong	result2, fp
17f94     04 4E 05 F1 | 	add	fp, #4
17f98     A7 FE 61 FC | 	wrlong	result3, fp
17f9c                 | ' 
17f9c                 | ' t2=pop()
17f9c                 | ' t1=pop()
17f9c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
17f9c     08 4E 85 F1 | 	sub	fp, #8
17fa0     1F FE 0D F2 | 	cmp	result3, #31 wz
17fa4     14 4E 05 51 |  if_ne	add	fp, #20
17fa8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17fac     14 4E 85 51 |  if_ne	sub	fp, #20
17fb0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
17fb4     A7 14 68 AC |  if_e	wrlong	#10, fp
17fb8     08 4E 05 A1 |  if_e	add	fp, #8
17fbc     A7 FE 69 AC |  if_e	wrlong	#255, fp
17fc0     08 4E 85 A1 |  if_e	sub	fp, #8
17fc4     90 01 90 AD |  if_e	jmp	#LR__2026
17fc8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
17fc8     08 4E 05 F1 | 	add	fp, #8
17fcc     A7 7E 02 FB | 	rdlong	muldivb_, fp
17fd0     08 4E 85 F1 | 	sub	fp, #8
17fd4     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
17fd8     1C 00 90 5D |  if_ne	jmp	#LR__2020
17fdc     08 4E 05 F1 | 	add	fp, #8
17fe0     A7 38 68 FC | 	wrlong	#28, fp
17fe4     08 4E 85 F1 | 	sub	fp, #8
17fe8     A7 12 02 FB | 	rdlong	arg01, fp
17fec     00 14 06 F6 | 	mov	arg02, #0
17ff0     CC B8 B0 FD | 	call	#__system___float_tointeger
17ff4     A7 FA 61 FC | 	wrlong	result1, fp
17ff8                 | LR__2020
17ff8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
17ff8     14 4E 05 F1 | 	add	fp, #20
17ffc     A7 7E 02 FB | 	rdlong	muldivb_, fp
18000     14 4E 85 F1 | 	sub	fp, #20
18004     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
18008     28 00 90 5D |  if_ne	jmp	#LR__2021
1800c     14 4E 05 F1 | 	add	fp, #20
18010     A7 38 68 FC | 	wrlong	#28, fp
18014     08 4E 85 F1 | 	sub	fp, #8
18018     A7 12 02 FB | 	rdlong	arg01, fp
1801c     0C 4E 85 F1 | 	sub	fp, #12
18020     00 14 06 F6 | 	mov	arg02, #0
18024     98 B8 B0 FD | 	call	#__system___float_tointeger
18028     0C 4E 05 F1 | 	add	fp, #12
1802c     A7 FA 61 FC | 	wrlong	result1, fp
18030     0C 4E 85 F1 | 	sub	fp, #12
18034                 | LR__2021
18034                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
18034     08 4E 05 F1 | 	add	fp, #8
18038     A7 7E 02 FB | 	rdlong	muldivb_, fp
1803c     08 4E 85 F1 | 	sub	fp, #8
18040     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
18044     14 4E 05 A1 |  if_e	add	fp, #20
18048     A7 1E 02 AB |  if_e	rdlong	local01, fp
1804c     14 4E 85 A1 |  if_e	sub	fp, #20
18050     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18054     20 00 90 5D |  if_ne	jmp	#LR__2022
18058     0C 4E 05 F1 | 	add	fp, #12
1805c     A7 1E 02 FB | 	rdlong	local01, fp
18060     0C 4E 85 F1 | 	sub	fp, #12
18064     A7 7E 02 FB | 	rdlong	muldivb_, fp
18068     0F 7F 12 FD | 	qdiv	muldivb_, local01
1806c     18 1E 62 FD | 	getqx	local01
18070     A7 1E 62 FC | 	wrlong	local01, fp
18074     E0 00 90 FD | 	jmp	#LR__2026
18078                 | LR__2022
18078                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
18078     08 4E 05 F1 | 	add	fp, #8
1807c     A7 7E 02 FB | 	rdlong	muldivb_, fp
18080     08 4E 85 F1 | 	sub	fp, #8
18084     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
18088     14 4E 05 A1 |  if_e	add	fp, #20
1808c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18090     14 4E 85 A1 |  if_e	sub	fp, #20
18094     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18098     2C 00 90 5D |  if_ne	jmp	#LR__2023
1809c     0C 4E 05 F1 | 	add	fp, #12
180a0     A7 1E 02 FB | 	rdlong	local01, fp
180a4     0C 4E 85 F1 | 	sub	fp, #12
180a8     A7 7E 02 FB | 	rdlong	muldivb_, fp
180ac     0F 7F 12 FD | 	qdiv	muldivb_, local01
180b0     18 1E 62 FD | 	getqx	local01
180b4     A7 1E 62 FC | 	wrlong	local01, fp
180b8     08 4E 05 F1 | 	add	fp, #8
180bc     A7 38 68 FC | 	wrlong	#28, fp
180c0     08 4E 85 F1 | 	sub	fp, #8
180c4     90 00 90 FD | 	jmp	#LR__2026
180c8                 | LR__2023
180c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
180c8     08 4E 05 F1 | 	add	fp, #8
180cc     A7 7E 02 FB | 	rdlong	muldivb_, fp
180d0     08 4E 85 F1 | 	sub	fp, #8
180d4     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
180d8     14 4E 05 A1 |  if_e	add	fp, #20
180dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
180e0     14 4E 85 A1 |  if_e	sub	fp, #20
180e4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
180e8     1C 00 90 5D |  if_ne	jmp	#LR__2024
180ec     A7 7C 02 FB | 	rdlong	muldiva_, fp
180f0     0C 4E 05 F1 | 	add	fp, #12
180f4     A7 7E 02 FB | 	rdlong	muldivb_, fp
180f8     0C 4E 85 F1 | 	sub	fp, #12
180fc     BA 00 A0 FD | 	call	#divide_
18100     A7 7E 62 FC | 	wrlong	muldivb_, fp
18104     50 00 90 FD | 	jmp	#LR__2026
18108                 | LR__2024
18108                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
18108     08 4E 05 F1 | 	add	fp, #8
1810c     A7 7E 02 FB | 	rdlong	muldivb_, fp
18110     08 4E 85 F1 | 	sub	fp, #8
18114     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
18118     14 4E 05 A1 |  if_e	add	fp, #20
1811c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18120     14 4E 85 A1 |  if_e	sub	fp, #20
18124     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18128     1C 00 90 5D |  if_ne	jmp	#LR__2025
1812c     A7 7C 02 FB | 	rdlong	muldiva_, fp
18130     0C 4E 05 F1 | 	add	fp, #12
18134     A7 7E 02 FB | 	rdlong	muldivb_, fp
18138     0C 4E 85 F1 | 	sub	fp, #12
1813c     BA 00 A0 FD | 	call	#divide_
18140     A7 7E 62 FC | 	wrlong	muldivb_, fp
18144     10 00 90 FD | 	jmp	#LR__2026
18148                 | LR__2025
18148     A7 16 68 FC | 	wrlong	#11, fp
1814c     08 4E 05 F1 | 	add	fp, #8
18150     A7 FE 69 FC | 	wrlong	#255, fp
18154     08 4E 85 F1 | 	sub	fp, #8
18158                 | LR__2026
18158     A7 12 02 F6 | 	mov	arg01, fp
1815c     F4 32 BF FD | 	call	#_push
18160     A7 F0 03 F6 | 	mov	ptra, fp
18164     B2 00 A0 FD | 	call	#popregs_
18168                 | _do_div_ret
18168     2D 00 64 FD | 	ret
1816c                 | 
1816c                 | ' 
1816c                 | ' '--------------------------------- equal (=)
1816c                 | ' 
1816c                 | ' sub do_eq
1816c                 | _do_eq
1816c     05 4A 05 F6 | 	mov	COUNT_, #5
18170     A8 00 A0 FD | 	call	#pushregs_
18174     18 F0 07 F1 | 	add	ptra, #24
18178     40 32 BF FD | 	call	#_pop
1817c     FD 1E 02 F6 | 	mov	local01, result1
18180     FE 20 02 F6 | 	mov	local02, result2
18184     FF 22 02 F6 | 	mov	local03, result3
18188     0C 4E 05 F1 | 	add	fp, #12
1818c     A7 1E 62 FC | 	wrlong	local01, fp
18190     04 4E 05 F1 | 	add	fp, #4
18194     A7 20 62 FC | 	wrlong	local02, fp
18198     04 4E 05 F1 | 	add	fp, #4
1819c     A7 22 62 FC | 	wrlong	local03, fp
181a0     14 4E 85 F1 | 	sub	fp, #20
181a4     14 32 BF FD | 	call	#_pop
181a8     FF 22 02 F6 | 	mov	local03, result3
181ac     A7 FA 61 FC | 	wrlong	result1, fp
181b0     04 4E 05 F1 | 	add	fp, #4
181b4     A7 FC 61 FC | 	wrlong	result2, fp
181b8     04 4E 05 F1 | 	add	fp, #4
181bc     A7 22 62 FC | 	wrlong	local03, fp
181c0                 | ' 
181c0                 | ' t2=pop()
181c0                 | ' t1=pop()
181c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
181c0     08 4E 85 F1 | 	sub	fp, #8
181c4     1F 22 0E F2 | 	cmp	local03, #31 wz
181c8     14 4E 05 A1 |  if_e	add	fp, #20
181cc     A7 24 02 AB |  if_e	rdlong	local04, fp
181d0     14 4E 85 A1 |  if_e	sub	fp, #20
181d4     12 23 02 A6 |  if_e	mov	local03, local04
181d8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
181dc     28 00 90 5D |  if_ne	jmp	#LR__2030
181e0     00 1E 06 F6 | 	mov	local01, #0
181e4     A7 12 02 FB | 	rdlong	arg01, fp
181e8     0C 4E 05 F1 | 	add	fp, #12
181ec     A7 14 02 FB | 	rdlong	arg02, fp
181f0     0C 4E 85 F1 | 	sub	fp, #12
181f4     74 86 B0 FD | 	call	#__system___string_cmp
181f8     00 FA 0D F2 | 	cmp	result1, #0 wz
181fc     00 1E 26 A6 |  if_e	not	local01, #0
18200     A7 1E 62 FC | 	wrlong	local01, fp
18204     1C 04 90 FD | 	jmp	#LR__2043
18208                 | LR__2030
18208                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
18208     08 4E 05 F1 | 	add	fp, #8
1820c     A7 1E 02 FB | 	rdlong	local01, fp
18210     08 4E 85 F1 | 	sub	fp, #8
18214     1E 1E 0E F2 | 	cmp	local01, #30 wz
18218     14 4E 05 A1 |  if_e	add	fp, #20
1821c     A7 24 02 AB |  if_e	rdlong	local04, fp
18220     14 4E 85 A1 |  if_e	sub	fp, #20
18224     12 23 02 A6 |  if_e	mov	local03, local04
18228     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1822c     2C 00 90 5D |  if_ne	jmp	#LR__2031
18230     00 1E 06 F6 | 	mov	local01, #0
18234     A7 12 02 FB | 	rdlong	arg01, fp
18238     0C 4E 05 F1 | 	add	fp, #12
1823c     A7 14 02 FB | 	rdlong	arg02, fp
18240     0C 4E 85 F1 | 	sub	fp, #12
18244     01 16 06 F6 | 	mov	arg03, #1
18248     E0 B5 B0 FD | 	call	#__system___float_cmp
1824c     00 FA 0D F2 | 	cmp	result1, #0 wz
18250     00 1E 26 A6 |  if_e	not	local01, #0
18254     A7 1E 62 FC | 	wrlong	local01, fp
18258     C8 03 90 FD | 	jmp	#LR__2043
1825c                 | LR__2031
1825c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1825c     08 4E 05 F1 | 	add	fp, #8
18260     A7 1E 02 FB | 	rdlong	local01, fp
18264     08 4E 85 F1 | 	sub	fp, #8
18268     1E 1E 0E F2 | 	cmp	local01, #30 wz
1826c     14 4E 05 A1 |  if_e	add	fp, #20
18270     A7 24 02 AB |  if_e	rdlong	local04, fp
18274     14 4E 85 A1 |  if_e	sub	fp, #20
18278     12 23 02 A6 |  if_e	mov	local03, local04
1827c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18280     48 00 90 5D |  if_ne	jmp	#LR__2032
18284     00 1E 06 F6 | 	mov	local01, #0
18288     A7 20 02 FB | 	rdlong	local02, fp
1828c     0C 4E 05 F1 | 	add	fp, #12
18290     A7 12 02 FB | 	rdlong	arg01, fp
18294     0C 4E 85 F1 | 	sub	fp, #12
18298     09 13 52 F6 | 	abs	arg01, arg01 wc
1829c     1F 26 C6 C9 |  if_b	decod	local05, #31
182a0     00 26 06 36 |  if_ae	mov	local05, #0
182a4     4C AD B0 FD | 	call	#__system___float_fromuns
182a8     13 FB 61 F5 | 	xor	result1, local05
182ac     FD 14 02 F6 | 	mov	arg02, result1
182b0     10 13 02 F6 | 	mov	arg01, local02
182b4     01 16 06 F6 | 	mov	arg03, #1
182b8     70 B5 B0 FD | 	call	#__system___float_cmp
182bc     00 FA 0D F2 | 	cmp	result1, #0 wz
182c0     00 1E 26 A6 |  if_e	not	local01, #0
182c4     A7 1E 62 FC | 	wrlong	local01, fp
182c8     58 03 90 FD | 	jmp	#LR__2043
182cc                 | LR__2032
182cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
182cc     08 4E 05 F1 | 	add	fp, #8
182d0     A7 1E 02 FB | 	rdlong	local01, fp
182d4     08 4E 85 F1 | 	sub	fp, #8
182d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
182dc     14 4E 05 A1 |  if_e	add	fp, #20
182e0     A7 24 02 AB |  if_e	rdlong	local04, fp
182e4     14 4E 85 A1 |  if_e	sub	fp, #20
182e8     12 23 02 A6 |  if_e	mov	local03, local04
182ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
182f0     38 00 90 5D |  if_ne	jmp	#LR__2033
182f4     00 1E 06 F6 | 	mov	local01, #0
182f8     A7 20 02 FB | 	rdlong	local02, fp
182fc     0C 4E 05 F1 | 	add	fp, #12
18300     A7 12 02 FB | 	rdlong	arg01, fp
18304     0C 4E 85 F1 | 	sub	fp, #12
18308     E8 AC B0 FD | 	call	#__system___float_fromuns
1830c     FD 14 02 F6 | 	mov	arg02, result1
18310     10 13 02 F6 | 	mov	arg01, local02
18314     01 16 06 F6 | 	mov	arg03, #1
18318     10 B5 B0 FD | 	call	#__system___float_cmp
1831c     00 FA 0D F2 | 	cmp	result1, #0 wz
18320     00 1E 26 A6 |  if_e	not	local01, #0
18324     A7 1E 62 FC | 	wrlong	local01, fp
18328     F8 02 90 FD | 	jmp	#LR__2043
1832c                 | LR__2033
1832c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1832c     08 4E 05 F1 | 	add	fp, #8
18330     A7 1E 02 FB | 	rdlong	local01, fp
18334     08 4E 85 F1 | 	sub	fp, #8
18338     1C 1E 0E F2 | 	cmp	local01, #28 wz
1833c     14 4E 05 A1 |  if_e	add	fp, #20
18340     A7 24 02 AB |  if_e	rdlong	local04, fp
18344     14 4E 85 A1 |  if_e	sub	fp, #20
18348     12 23 02 A6 |  if_e	mov	local03, local04
1834c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18350     44 00 90 5D |  if_ne	jmp	#LR__2034
18354     00 1E 06 F6 | 	mov	local01, #0
18358     A7 12 02 FB | 	rdlong	arg01, fp
1835c     09 13 52 F6 | 	abs	arg01, arg01 wc
18360     1F 26 C6 C9 |  if_b	decod	local05, #31
18364     00 26 06 36 |  if_ae	mov	local05, #0
18368     88 AC B0 FD | 	call	#__system___float_fromuns
1836c     13 FB 61 F5 | 	xor	result1, local05
18370     FD 12 02 F6 | 	mov	arg01, result1
18374     0C 4E 05 F1 | 	add	fp, #12
18378     A7 14 02 FB | 	rdlong	arg02, fp
1837c     0C 4E 85 F1 | 	sub	fp, #12
18380     01 16 06 F6 | 	mov	arg03, #1
18384     A4 B4 B0 FD | 	call	#__system___float_cmp
18388     00 FA 0D F2 | 	cmp	result1, #0 wz
1838c     00 1E 26 A6 |  if_e	not	local01, #0
18390     A7 1E 62 FC | 	wrlong	local01, fp
18394     8C 02 90 FD | 	jmp	#LR__2043
18398                 | LR__2034
18398                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
18398     08 4E 05 F1 | 	add	fp, #8
1839c     A7 1E 02 FB | 	rdlong	local01, fp
183a0     08 4E 85 F1 | 	sub	fp, #8
183a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
183a8     14 4E 05 A1 |  if_e	add	fp, #20
183ac     A7 24 02 AB |  if_e	rdlong	local04, fp
183b0     14 4E 85 A1 |  if_e	sub	fp, #20
183b4     12 23 02 A6 |  if_e	mov	local03, local04
183b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
183bc     24 00 90 5D |  if_ne	jmp	#LR__2035
183c0     00 1E 06 F6 | 	mov	local01, #0
183c4     A7 20 02 FB | 	rdlong	local02, fp
183c8     0C 4E 05 F1 | 	add	fp, #12
183cc     A7 22 02 FB | 	rdlong	local03, fp
183d0     0C 4E 85 F1 | 	sub	fp, #12
183d4     11 21 0A F2 | 	cmp	local02, local03 wz
183d8     01 1E 66 A6 |  if_e	neg	local01, #1
183dc     A7 1E 62 FC | 	wrlong	local01, fp
183e0     40 02 90 FD | 	jmp	#LR__2043
183e4                 | LR__2035
183e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
183e4     08 4E 05 F1 | 	add	fp, #8
183e8     A7 1E 02 FB | 	rdlong	local01, fp
183ec     08 4E 85 F1 | 	sub	fp, #8
183f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
183f4     14 4E 05 A1 |  if_e	add	fp, #20
183f8     A7 24 02 AB |  if_e	rdlong	local04, fp
183fc     14 4E 85 A1 |  if_e	sub	fp, #20
18400     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18404     24 00 90 5D |  if_ne	jmp	#LR__2036
18408     00 1E 06 F6 | 	mov	local01, #0
1840c     A7 20 02 FB | 	rdlong	local02, fp
18410     0C 4E 05 F1 | 	add	fp, #12
18414     A7 22 02 FB | 	rdlong	local03, fp
18418     0C 4E 85 F1 | 	sub	fp, #12
1841c     11 21 0A F2 | 	cmp	local02, local03 wz
18420     01 1E 66 A6 |  if_e	neg	local01, #1
18424     A7 1E 62 FC | 	wrlong	local01, fp
18428     F8 01 90 FD | 	jmp	#LR__2043
1842c                 | LR__2036
1842c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1842c     08 4E 05 F1 | 	add	fp, #8
18430     A7 1E 02 FB | 	rdlong	local01, fp
18434     08 4E 85 F1 | 	sub	fp, #8
18438     1D 1E 0E F2 | 	cmp	local01, #29 wz
1843c     14 4E 05 A1 |  if_e	add	fp, #20
18440     A7 22 02 AB |  if_e	rdlong	local03, fp
18444     14 4E 85 A1 |  if_e	sub	fp, #20
18448     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1844c     34 00 90 5D |  if_ne	jmp	#LR__2037
18450     00 1E 06 F6 | 	mov	local01, #0
18454     A7 12 02 FB | 	rdlong	arg01, fp
18458     98 AB B0 FD | 	call	#__system___float_fromuns
1845c     FD 12 02 F6 | 	mov	arg01, result1
18460     0C 4E 05 F1 | 	add	fp, #12
18464     A7 14 02 FB | 	rdlong	arg02, fp
18468     0C 4E 85 F1 | 	sub	fp, #12
1846c     01 16 06 F6 | 	mov	arg03, #1
18470     B8 B3 B0 FD | 	call	#__system___float_cmp
18474     00 FA 0D F2 | 	cmp	result1, #0 wz
18478     00 1E 26 A6 |  if_e	not	local01, #0
1847c     A7 1E 62 FC | 	wrlong	local01, fp
18480     A0 01 90 FD | 	jmp	#LR__2043
18484                 | LR__2037
18484                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
18484     08 4E 05 F1 | 	add	fp, #8
18488     A7 1E 02 FB | 	rdlong	local01, fp
1848c     08 4E 85 F1 | 	sub	fp, #8
18490     1D 1E 0E F2 | 	cmp	local01, #29 wz
18494     14 4E 05 A1 |  if_e	add	fp, #20
18498     A7 22 02 AB |  if_e	rdlong	local03, fp
1849c     14 4E 85 A1 |  if_e	sub	fp, #20
184a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
184a4     24 00 90 5D |  if_ne	jmp	#LR__2038
184a8     00 1E 06 F6 | 	mov	local01, #0
184ac     A7 20 02 FB | 	rdlong	local02, fp
184b0     0C 4E 05 F1 | 	add	fp, #12
184b4     A7 22 02 FB | 	rdlong	local03, fp
184b8     0C 4E 85 F1 | 	sub	fp, #12
184bc     11 21 0A F2 | 	cmp	local02, local03 wz
184c0     01 1E 66 A6 |  if_e	neg	local01, #1
184c4     A7 1E 62 FC | 	wrlong	local01, fp
184c8     58 01 90 FD | 	jmp	#LR__2043
184cc                 | LR__2038
184cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
184cc     08 4E 05 F1 | 	add	fp, #8
184d0     A7 1E 02 FB | 	rdlong	local01, fp
184d4     08 4E 85 F1 | 	sub	fp, #8
184d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
184dc     14 4E 05 A1 |  if_e	add	fp, #20
184e0     A7 22 02 AB |  if_e	rdlong	local03, fp
184e4     14 4E 85 A1 |  if_e	sub	fp, #20
184e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
184ec     24 00 90 5D |  if_ne	jmp	#LR__2039
184f0     00 1E 06 F6 | 	mov	local01, #0
184f4     A7 20 02 FB | 	rdlong	local02, fp
184f8     0C 4E 05 F1 | 	add	fp, #12
184fc     A7 22 02 FB | 	rdlong	local03, fp
18500     0C 4E 85 F1 | 	sub	fp, #12
18504     11 21 0A F2 | 	cmp	local02, local03 wz
18508     01 1E 66 A6 |  if_e	neg	local01, #1
1850c     A7 1E 62 FC | 	wrlong	local01, fp
18510     10 01 90 FD | 	jmp	#LR__2043
18514                 | LR__2039
18514                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
18514     08 4E 05 F1 | 	add	fp, #8
18518     A7 1E 02 FB | 	rdlong	local01, fp
1851c     08 4E 85 F1 | 	sub	fp, #8
18520     2B 1E 0E F2 | 	cmp	local01, #43 wz
18524     14 4E 05 A1 |  if_e	add	fp, #20
18528     A7 22 02 AB |  if_e	rdlong	local03, fp
1852c     14 4E 85 A1 |  if_e	sub	fp, #20
18530     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18534     30 00 90 5D |  if_ne	jmp	#LR__2040
18538     00 1E 06 F6 | 	mov	local01, #0
1853c     A7 12 02 FB | 	rdlong	arg01, fp
18540     F0 2F BF FD | 	call	#_convertstring
18544     FD 12 02 F6 | 	mov	arg01, result1
18548     0C 4E 05 F1 | 	add	fp, #12
1854c     A7 14 02 FB | 	rdlong	arg02, fp
18550     0C 4E 85 F1 | 	sub	fp, #12
18554     14 83 B0 FD | 	call	#__system___string_cmp
18558     00 FA 0D F2 | 	cmp	result1, #0 wz
1855c     00 1E 26 A6 |  if_e	not	local01, #0
18560     A7 1E 62 FC | 	wrlong	local01, fp
18564     BC 00 90 FD | 	jmp	#LR__2043
18568                 | LR__2040
18568                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
18568     08 4E 05 F1 | 	add	fp, #8
1856c     A7 1E 02 FB | 	rdlong	local01, fp
18570     08 4E 85 F1 | 	sub	fp, #8
18574     1F 1E 0E F2 | 	cmp	local01, #31 wz
18578     14 4E 05 A1 |  if_e	add	fp, #20
1857c     A7 22 02 AB |  if_e	rdlong	local03, fp
18580     14 4E 85 A1 |  if_e	sub	fp, #20
18584     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18588     34 00 90 5D |  if_ne	jmp	#LR__2041
1858c     00 1E 06 F6 | 	mov	local01, #0
18590     A7 20 02 FB | 	rdlong	local02, fp
18594     0C 4E 05 F1 | 	add	fp, #12
18598     A7 12 02 FB | 	rdlong	arg01, fp
1859c     0C 4E 85 F1 | 	sub	fp, #12
185a0     90 2F BF FD | 	call	#_convertstring
185a4     FD 14 02 F6 | 	mov	arg02, result1
185a8     10 13 02 F6 | 	mov	arg01, local02
185ac     BC 82 B0 FD | 	call	#__system___string_cmp
185b0     00 FA 0D F2 | 	cmp	result1, #0 wz
185b4     00 1E 26 A6 |  if_e	not	local01, #0
185b8     A7 1E 62 FC | 	wrlong	local01, fp
185bc     64 00 90 FD | 	jmp	#LR__2043
185c0                 | LR__2041
185c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
185c0     08 4E 05 F1 | 	add	fp, #8
185c4     A7 1E 02 FB | 	rdlong	local01, fp
185c8     08 4E 85 F1 | 	sub	fp, #8
185cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
185d0     14 4E 05 A1 |  if_e	add	fp, #20
185d4     A7 22 02 AB |  if_e	rdlong	local03, fp
185d8     14 4E 85 A1 |  if_e	sub	fp, #20
185dc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
185e0     3C 00 90 5D |  if_ne	jmp	#LR__2042
185e4     00 1E 06 F6 | 	mov	local01, #0
185e8     A7 12 02 FB | 	rdlong	arg01, fp
185ec     44 2F BF FD | 	call	#_convertstring
185f0     FD 20 02 F6 | 	mov	local02, result1
185f4     0C 4E 05 F1 | 	add	fp, #12
185f8     A7 12 02 FB | 	rdlong	arg01, fp
185fc     0C 4E 85 F1 | 	sub	fp, #12
18600     30 2F BF FD | 	call	#_convertstring
18604     FD 14 02 F6 | 	mov	arg02, result1
18608     10 13 02 F6 | 	mov	arg01, local02
1860c     5C 82 B0 FD | 	call	#__system___string_cmp
18610     00 FA 0D F2 | 	cmp	result1, #0 wz
18614     00 1E 26 A6 |  if_e	not	local01, #0
18618     A7 1E 62 FC | 	wrlong	local01, fp
1861c     04 00 90 FD | 	jmp	#LR__2043
18620                 | LR__2042
18620     A7 00 68 FC | 	wrlong	#0, fp
18624                 | LR__2043
18624     08 4E 05 F1 | 	add	fp, #8
18628     A7 38 68 FC | 	wrlong	#28, fp
1862c     08 4E 85 F1 | 	sub	fp, #8
18630     A7 12 02 F6 | 	mov	arg01, fp
18634     1C 2E BF FD | 	call	#_push
18638     A7 F0 03 F6 | 	mov	ptra, fp
1863c     B2 00 A0 FD | 	call	#popregs_
18640                 | _do_eq_ret
18640     2D 00 64 FD | 	ret
18644                 | 
18644                 | ' 
18644                 | ' '--------------------------------- fdiv (/) - float divide
18644                 | ' 
18644                 | ' sub do_fdiv 
18644                 | _do_fdiv
18644     02 4A 05 F6 | 	mov	COUNT_, #2
18648     A8 00 A0 FD | 	call	#pushregs_
1864c     18 F0 07 F1 | 	add	ptra, #24
18650     68 2D BF FD | 	call	#_pop
18654     FD 14 02 F6 | 	mov	arg02, result1
18658     FE 12 02 F6 | 	mov	arg01, result2
1865c     FF 1E 02 F6 | 	mov	local01, result3
18660     0C 4E 05 F1 | 	add	fp, #12
18664     A7 14 62 FC | 	wrlong	arg02, fp
18668     04 4E 05 F1 | 	add	fp, #4
1866c     A7 12 62 FC | 	wrlong	arg01, fp
18670     04 4E 05 F1 | 	add	fp, #4
18674     A7 1E 62 FC | 	wrlong	local01, fp
18678     14 4E 85 F1 | 	sub	fp, #20
1867c     3C 2D BF FD | 	call	#_pop
18680     A7 FA 61 FC | 	wrlong	result1, fp
18684     04 4E 05 F1 | 	add	fp, #4
18688     A7 FC 61 FC | 	wrlong	result2, fp
1868c     04 4E 05 F1 | 	add	fp, #4
18690     A7 FE 61 FC | 	wrlong	result3, fp
18694                 | ' 
18694                 | ' t2=pop()
18694                 | ' t1=pop()
18694                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
18694     08 4E 85 F1 | 	sub	fp, #8
18698     1F FE 0D F2 | 	cmp	result3, #31 wz
1869c     14 4E 05 51 |  if_ne	add	fp, #20
186a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
186a4     14 4E 85 51 |  if_ne	sub	fp, #20
186a8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
186ac     A7 14 68 AC |  if_e	wrlong	#10, fp
186b0     08 4E 05 A1 |  if_e	add	fp, #8
186b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
186b8     08 4E 85 A1 |  if_e	sub	fp, #8
186bc     38 01 90 AD |  if_e	jmp	#LR__2055
186c0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
186c0     08 4E 05 F1 | 	add	fp, #8
186c4     A7 14 02 FB | 	rdlong	arg02, fp
186c8     08 4E 85 F1 | 	sub	fp, #8
186cc     1C 14 0E F2 | 	cmp	arg02, #28 wz
186d0     28 00 90 5D |  if_ne	jmp	#LR__2050
186d4     08 4E 05 F1 | 	add	fp, #8
186d8     A7 3C 68 FC | 	wrlong	#30, fp
186dc     08 4E 85 F1 | 	sub	fp, #8
186e0     A7 12 02 FB | 	rdlong	arg01, fp
186e4     09 13 52 F6 | 	abs	arg01, arg01 wc
186e8     1F 20 C6 C9 |  if_b	decod	local02, #31
186ec     00 20 06 36 |  if_ae	mov	local02, #0
186f0     00 A9 B0 FD | 	call	#__system___float_fromuns
186f4     10 FB 61 F5 | 	xor	result1, local02
186f8     A7 FA 61 FC | 	wrlong	result1, fp
186fc                 | LR__2050
186fc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
186fc     08 4E 05 F1 | 	add	fp, #8
18700     A7 14 02 FB | 	rdlong	arg02, fp
18704     08 4E 85 F1 | 	sub	fp, #8
18708     1D 14 0E F2 | 	cmp	arg02, #29 wz
1870c     18 00 90 5D |  if_ne	jmp	#LR__2051
18710     08 4E 05 F1 | 	add	fp, #8
18714     A7 3C 68 FC | 	wrlong	#30, fp
18718     08 4E 85 F1 | 	sub	fp, #8
1871c     A7 12 02 FB | 	rdlong	arg01, fp
18720     D0 A8 B0 FD | 	call	#__system___float_fromuns
18724     A7 FA 61 FC | 	wrlong	result1, fp
18728                 | LR__2051
18728                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
18728     14 4E 05 F1 | 	add	fp, #20
1872c     A7 14 02 FB | 	rdlong	arg02, fp
18730     14 4E 85 F1 | 	sub	fp, #20
18734     1C 14 0E F2 | 	cmp	arg02, #28 wz
18738     34 00 90 5D |  if_ne	jmp	#LR__2052
1873c     14 4E 05 F1 | 	add	fp, #20
18740     A7 3C 68 FC | 	wrlong	#30, fp
18744     08 4E 85 F1 | 	sub	fp, #8
18748     A7 12 02 FB | 	rdlong	arg01, fp
1874c     0C 4E 85 F1 | 	sub	fp, #12
18750     09 13 52 F6 | 	abs	arg01, arg01 wc
18754     1F 20 C6 C9 |  if_b	decod	local02, #31
18758     00 20 06 36 |  if_ae	mov	local02, #0
1875c     94 A8 B0 FD | 	call	#__system___float_fromuns
18760     10 FB 61 F5 | 	xor	result1, local02
18764     0C 4E 05 F1 | 	add	fp, #12
18768     A7 FA 61 FC | 	wrlong	result1, fp
1876c     0C 4E 85 F1 | 	sub	fp, #12
18770                 | LR__2052
18770                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
18770     14 4E 05 F1 | 	add	fp, #20
18774     A7 14 02 FB | 	rdlong	arg02, fp
18778     14 4E 85 F1 | 	sub	fp, #20
1877c     1D 14 0E F2 | 	cmp	arg02, #29 wz
18780     24 00 90 5D |  if_ne	jmp	#LR__2053
18784     14 4E 05 F1 | 	add	fp, #20
18788     A7 3C 68 FC | 	wrlong	#30, fp
1878c     08 4E 85 F1 | 	sub	fp, #8
18790     A7 12 02 FB | 	rdlong	arg01, fp
18794     0C 4E 85 F1 | 	sub	fp, #12
18798     58 A8 B0 FD | 	call	#__system___float_fromuns
1879c     0C 4E 05 F1 | 	add	fp, #12
187a0     A7 FA 61 FC | 	wrlong	result1, fp
187a4     0C 4E 85 F1 | 	sub	fp, #12
187a8                 | LR__2053
187a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
187a8     08 4E 05 F1 | 	add	fp, #8
187ac     A7 14 02 FB | 	rdlong	arg02, fp
187b0     08 4E 85 F1 | 	sub	fp, #8
187b4     1E 14 0E F2 | 	cmp	arg02, #30 wz
187b8     14 4E 05 A1 |  if_e	add	fp, #20
187bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
187c0     14 4E 85 A1 |  if_e	sub	fp, #20
187c4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
187c8     1C 00 90 5D |  if_ne	jmp	#LR__2054
187cc     A7 12 02 FB | 	rdlong	arg01, fp
187d0     0C 4E 05 F1 | 	add	fp, #12
187d4     A7 14 02 FB | 	rdlong	arg02, fp
187d8     0C 4E 85 F1 | 	sub	fp, #12
187dc     1C AE B0 FD | 	call	#__system___float_div
187e0     A7 FA 61 FC | 	wrlong	result1, fp
187e4     10 00 90 FD | 	jmp	#LR__2055
187e8                 | LR__2054
187e8     A7 16 68 FC | 	wrlong	#11, fp
187ec     08 4E 05 F1 | 	add	fp, #8
187f0     A7 FE 69 FC | 	wrlong	#255, fp
187f4     08 4E 85 F1 | 	sub	fp, #8
187f8                 | LR__2055
187f8     A7 12 02 F6 | 	mov	arg01, fp
187fc     54 2C BF FD | 	call	#_push
18800     A7 F0 03 F6 | 	mov	ptra, fp
18804     B2 00 A0 FD | 	call	#popregs_
18808                 | _do_fdiv_ret
18808     2D 00 64 FD | 	ret
1880c                 | 
1880c                 | ' 
1880c                 | ' '--------------------------------- greater or equal (>=)
1880c                 | ' 
1880c                 | ' sub do_ge
1880c                 | _do_ge
1880c     05 4A 05 F6 | 	mov	COUNT_, #5
18810     A8 00 A0 FD | 	call	#pushregs_
18814     18 F0 07 F1 | 	add	ptra, #24
18818     A0 2B BF FD | 	call	#_pop
1881c     FD 1E 02 F6 | 	mov	local01, result1
18820     FE 20 02 F6 | 	mov	local02, result2
18824     FF 22 02 F6 | 	mov	local03, result3
18828     0C 4E 05 F1 | 	add	fp, #12
1882c     A7 1E 62 FC | 	wrlong	local01, fp
18830     04 4E 05 F1 | 	add	fp, #4
18834     A7 20 62 FC | 	wrlong	local02, fp
18838     04 4E 05 F1 | 	add	fp, #4
1883c     A7 22 62 FC | 	wrlong	local03, fp
18840     14 4E 85 F1 | 	sub	fp, #20
18844     74 2B BF FD | 	call	#_pop
18848     FF 22 02 F6 | 	mov	local03, result3
1884c     A7 FA 61 FC | 	wrlong	result1, fp
18850     04 4E 05 F1 | 	add	fp, #4
18854     A7 FC 61 FC | 	wrlong	result2, fp
18858     04 4E 05 F1 | 	add	fp, #4
1885c     A7 22 62 FC | 	wrlong	local03, fp
18860                 | ' 
18860                 | ' t2=pop()
18860                 | ' t1=pop()
18860                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
18860     08 4E 85 F1 | 	sub	fp, #8
18864     1F 22 0E F2 | 	cmp	local03, #31 wz
18868     14 4E 05 A1 |  if_e	add	fp, #20
1886c     A7 24 02 AB |  if_e	rdlong	local04, fp
18870     14 4E 85 A1 |  if_e	sub	fp, #20
18874     12 23 02 A6 |  if_e	mov	local03, local04
18878     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1887c     28 00 90 5D |  if_ne	jmp	#LR__2060
18880     00 1E 06 F6 | 	mov	local01, #0
18884     A7 12 02 FB | 	rdlong	arg01, fp
18888     0C 4E 05 F1 | 	add	fp, #12
1888c     A7 14 02 FB | 	rdlong	arg02, fp
18890     0C 4E 85 F1 | 	sub	fp, #12
18894     D4 7F B0 FD | 	call	#__system___string_cmp
18898     00 FA 55 F2 | 	cmps	result1, #0 wc
1889c     00 1E 26 36 |  if_ae	not	local01, #0
188a0     A7 1E 62 FC | 	wrlong	local01, fp
188a4     1C 04 90 FD | 	jmp	#LR__2073
188a8                 | LR__2060
188a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
188a8     08 4E 05 F1 | 	add	fp, #8
188ac     A7 1E 02 FB | 	rdlong	local01, fp
188b0     08 4E 85 F1 | 	sub	fp, #8
188b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
188b8     14 4E 05 A1 |  if_e	add	fp, #20
188bc     A7 24 02 AB |  if_e	rdlong	local04, fp
188c0     14 4E 85 A1 |  if_e	sub	fp, #20
188c4     12 23 02 A6 |  if_e	mov	local03, local04
188c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
188cc     2C 00 90 5D |  if_ne	jmp	#LR__2061
188d0     00 1E 06 F6 | 	mov	local01, #0
188d4     A7 12 02 FB | 	rdlong	arg01, fp
188d8     0C 4E 05 F1 | 	add	fp, #12
188dc     A7 14 02 FB | 	rdlong	arg02, fp
188e0     0C 4E 85 F1 | 	sub	fp, #12
188e4     01 16 66 F6 | 	neg	arg03, #1
188e8     40 AF B0 FD | 	call	#__system___float_cmp
188ec     00 FA 55 F2 | 	cmps	result1, #0 wc
188f0     00 1E 26 36 |  if_ae	not	local01, #0
188f4     A7 1E 62 FC | 	wrlong	local01, fp
188f8     C8 03 90 FD | 	jmp	#LR__2073
188fc                 | LR__2061
188fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
188fc     08 4E 05 F1 | 	add	fp, #8
18900     A7 1E 02 FB | 	rdlong	local01, fp
18904     08 4E 85 F1 | 	sub	fp, #8
18908     1E 1E 0E F2 | 	cmp	local01, #30 wz
1890c     14 4E 05 A1 |  if_e	add	fp, #20
18910     A7 24 02 AB |  if_e	rdlong	local04, fp
18914     14 4E 85 A1 |  if_e	sub	fp, #20
18918     12 23 02 A6 |  if_e	mov	local03, local04
1891c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18920     48 00 90 5D |  if_ne	jmp	#LR__2062
18924     00 1E 06 F6 | 	mov	local01, #0
18928     A7 20 02 FB | 	rdlong	local02, fp
1892c     0C 4E 05 F1 | 	add	fp, #12
18930     A7 12 02 FB | 	rdlong	arg01, fp
18934     0C 4E 85 F1 | 	sub	fp, #12
18938     09 13 52 F6 | 	abs	arg01, arg01 wc
1893c     1F 26 C6 C9 |  if_b	decod	local05, #31
18940     00 26 06 36 |  if_ae	mov	local05, #0
18944     AC A6 B0 FD | 	call	#__system___float_fromuns
18948     13 FB 61 F5 | 	xor	result1, local05
1894c     FD 14 02 F6 | 	mov	arg02, result1
18950     10 13 02 F6 | 	mov	arg01, local02
18954     01 16 66 F6 | 	neg	arg03, #1
18958     D0 AE B0 FD | 	call	#__system___float_cmp
1895c     00 FA 55 F2 | 	cmps	result1, #0 wc
18960     00 1E 26 36 |  if_ae	not	local01, #0
18964     A7 1E 62 FC | 	wrlong	local01, fp
18968     58 03 90 FD | 	jmp	#LR__2073
1896c                 | LR__2062
1896c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1896c     08 4E 05 F1 | 	add	fp, #8
18970     A7 1E 02 FB | 	rdlong	local01, fp
18974     08 4E 85 F1 | 	sub	fp, #8
18978     1E 1E 0E F2 | 	cmp	local01, #30 wz
1897c     14 4E 05 A1 |  if_e	add	fp, #20
18980     A7 24 02 AB |  if_e	rdlong	local04, fp
18984     14 4E 85 A1 |  if_e	sub	fp, #20
18988     12 23 02 A6 |  if_e	mov	local03, local04
1898c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18990     38 00 90 5D |  if_ne	jmp	#LR__2063
18994     00 1E 06 F6 | 	mov	local01, #0
18998     A7 20 02 FB | 	rdlong	local02, fp
1899c     0C 4E 05 F1 | 	add	fp, #12
189a0     A7 12 02 FB | 	rdlong	arg01, fp
189a4     0C 4E 85 F1 | 	sub	fp, #12
189a8     48 A6 B0 FD | 	call	#__system___float_fromuns
189ac     FD 14 02 F6 | 	mov	arg02, result1
189b0     10 13 02 F6 | 	mov	arg01, local02
189b4     01 16 66 F6 | 	neg	arg03, #1
189b8     70 AE B0 FD | 	call	#__system___float_cmp
189bc     00 FA 55 F2 | 	cmps	result1, #0 wc
189c0     00 1E 26 36 |  if_ae	not	local01, #0
189c4     A7 1E 62 FC | 	wrlong	local01, fp
189c8     F8 02 90 FD | 	jmp	#LR__2073
189cc                 | LR__2063
189cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
189cc     08 4E 05 F1 | 	add	fp, #8
189d0     A7 1E 02 FB | 	rdlong	local01, fp
189d4     08 4E 85 F1 | 	sub	fp, #8
189d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
189dc     14 4E 05 A1 |  if_e	add	fp, #20
189e0     A7 24 02 AB |  if_e	rdlong	local04, fp
189e4     14 4E 85 A1 |  if_e	sub	fp, #20
189e8     12 23 02 A6 |  if_e	mov	local03, local04
189ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
189f0     44 00 90 5D |  if_ne	jmp	#LR__2064
189f4     00 1E 06 F6 | 	mov	local01, #0
189f8     A7 12 02 FB | 	rdlong	arg01, fp
189fc     09 13 52 F6 | 	abs	arg01, arg01 wc
18a00     1F 26 C6 C9 |  if_b	decod	local05, #31
18a04     00 26 06 36 |  if_ae	mov	local05, #0
18a08     E8 A5 B0 FD | 	call	#__system___float_fromuns
18a0c     13 FB 61 F5 | 	xor	result1, local05
18a10     FD 12 02 F6 | 	mov	arg01, result1
18a14     0C 4E 05 F1 | 	add	fp, #12
18a18     A7 14 02 FB | 	rdlong	arg02, fp
18a1c     0C 4E 85 F1 | 	sub	fp, #12
18a20     01 16 66 F6 | 	neg	arg03, #1
18a24     04 AE B0 FD | 	call	#__system___float_cmp
18a28     00 FA 55 F2 | 	cmps	result1, #0 wc
18a2c     00 1E 26 36 |  if_ae	not	local01, #0
18a30     A7 1E 62 FC | 	wrlong	local01, fp
18a34     8C 02 90 FD | 	jmp	#LR__2073
18a38                 | LR__2064
18a38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
18a38     08 4E 05 F1 | 	add	fp, #8
18a3c     A7 1E 02 FB | 	rdlong	local01, fp
18a40     08 4E 85 F1 | 	sub	fp, #8
18a44     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a48     14 4E 05 A1 |  if_e	add	fp, #20
18a4c     A7 24 02 AB |  if_e	rdlong	local04, fp
18a50     14 4E 85 A1 |  if_e	sub	fp, #20
18a54     12 23 02 A6 |  if_e	mov	local03, local04
18a58     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18a5c     24 00 90 5D |  if_ne	jmp	#LR__2065
18a60     00 1E 06 F6 | 	mov	local01, #0
18a64     A7 20 02 FB | 	rdlong	local02, fp
18a68     0C 4E 05 F1 | 	add	fp, #12
18a6c     A7 22 02 FB | 	rdlong	local03, fp
18a70     0C 4E 85 F1 | 	sub	fp, #12
18a74     11 21 52 F2 | 	cmps	local02, local03 wc
18a78     01 1E 66 36 |  if_ae	neg	local01, #1
18a7c     A7 1E 62 FC | 	wrlong	local01, fp
18a80     40 02 90 FD | 	jmp	#LR__2073
18a84                 | LR__2065
18a84                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
18a84     08 4E 05 F1 | 	add	fp, #8
18a88     A7 1E 02 FB | 	rdlong	local01, fp
18a8c     08 4E 85 F1 | 	sub	fp, #8
18a90     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a94     14 4E 05 A1 |  if_e	add	fp, #20
18a98     A7 24 02 AB |  if_e	rdlong	local04, fp
18a9c     14 4E 85 A1 |  if_e	sub	fp, #20
18aa0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18aa4     24 00 90 5D |  if_ne	jmp	#LR__2066
18aa8     00 1E 06 F6 | 	mov	local01, #0
18aac     A7 20 02 FB | 	rdlong	local02, fp
18ab0     0C 4E 05 F1 | 	add	fp, #12
18ab4     A7 22 02 FB | 	rdlong	local03, fp
18ab8     0C 4E 85 F1 | 	sub	fp, #12
18abc     11 21 52 F2 | 	cmps	local02, local03 wc
18ac0     01 1E 66 36 |  if_ae	neg	local01, #1
18ac4     A7 1E 62 FC | 	wrlong	local01, fp
18ac8     F8 01 90 FD | 	jmp	#LR__2073
18acc                 | LR__2066
18acc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
18acc     08 4E 05 F1 | 	add	fp, #8
18ad0     A7 1E 02 FB | 	rdlong	local01, fp
18ad4     08 4E 85 F1 | 	sub	fp, #8
18ad8     1D 1E 0E F2 | 	cmp	local01, #29 wz
18adc     14 4E 05 A1 |  if_e	add	fp, #20
18ae0     A7 22 02 AB |  if_e	rdlong	local03, fp
18ae4     14 4E 85 A1 |  if_e	sub	fp, #20
18ae8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18aec     34 00 90 5D |  if_ne	jmp	#LR__2067
18af0     00 1E 06 F6 | 	mov	local01, #0
18af4     A7 12 02 FB | 	rdlong	arg01, fp
18af8     F8 A4 B0 FD | 	call	#__system___float_fromuns
18afc     FD 12 02 F6 | 	mov	arg01, result1
18b00     0C 4E 05 F1 | 	add	fp, #12
18b04     A7 14 02 FB | 	rdlong	arg02, fp
18b08     0C 4E 85 F1 | 	sub	fp, #12
18b0c     01 16 66 F6 | 	neg	arg03, #1
18b10     18 AD B0 FD | 	call	#__system___float_cmp
18b14     00 FA 55 F2 | 	cmps	result1, #0 wc
18b18     00 1E 26 36 |  if_ae	not	local01, #0
18b1c     A7 1E 62 FC | 	wrlong	local01, fp
18b20     A0 01 90 FD | 	jmp	#LR__2073
18b24                 | LR__2067
18b24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
18b24     08 4E 05 F1 | 	add	fp, #8
18b28     A7 1E 02 FB | 	rdlong	local01, fp
18b2c     08 4E 85 F1 | 	sub	fp, #8
18b30     1D 1E 0E F2 | 	cmp	local01, #29 wz
18b34     14 4E 05 A1 |  if_e	add	fp, #20
18b38     A7 22 02 AB |  if_e	rdlong	local03, fp
18b3c     14 4E 85 A1 |  if_e	sub	fp, #20
18b40     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18b44     24 00 90 5D |  if_ne	jmp	#LR__2068
18b48     00 1E 06 F6 | 	mov	local01, #0
18b4c     A7 20 02 FB | 	rdlong	local02, fp
18b50     0C 4E 05 F1 | 	add	fp, #12
18b54     A7 22 02 FB | 	rdlong	local03, fp
18b58     0C 4E 85 F1 | 	sub	fp, #12
18b5c     11 21 52 F2 | 	cmps	local02, local03 wc
18b60     01 1E 66 36 |  if_ae	neg	local01, #1
18b64     A7 1E 62 FC | 	wrlong	local01, fp
18b68     58 01 90 FD | 	jmp	#LR__2073
18b6c                 | LR__2068
18b6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
18b6c     08 4E 05 F1 | 	add	fp, #8
18b70     A7 1E 02 FB | 	rdlong	local01, fp
18b74     08 4E 85 F1 | 	sub	fp, #8
18b78     1D 1E 0E F2 | 	cmp	local01, #29 wz
18b7c     14 4E 05 A1 |  if_e	add	fp, #20
18b80     A7 22 02 AB |  if_e	rdlong	local03, fp
18b84     14 4E 85 A1 |  if_e	sub	fp, #20
18b88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18b8c     24 00 90 5D |  if_ne	jmp	#LR__2069
18b90     00 1E 06 F6 | 	mov	local01, #0
18b94     A7 20 02 FB | 	rdlong	local02, fp
18b98     0C 4E 05 F1 | 	add	fp, #12
18b9c     A7 22 02 FB | 	rdlong	local03, fp
18ba0     0C 4E 85 F1 | 	sub	fp, #12
18ba4     11 21 12 F2 | 	cmp	local02, local03 wc
18ba8     01 1E 66 36 |  if_ae	neg	local01, #1
18bac     A7 1E 62 FC | 	wrlong	local01, fp
18bb0     10 01 90 FD | 	jmp	#LR__2073
18bb4                 | LR__2069
18bb4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
18bb4     08 4E 05 F1 | 	add	fp, #8
18bb8     A7 1E 02 FB | 	rdlong	local01, fp
18bbc     08 4E 85 F1 | 	sub	fp, #8
18bc0     2B 1E 0E F2 | 	cmp	local01, #43 wz
18bc4     14 4E 05 A1 |  if_e	add	fp, #20
18bc8     A7 22 02 AB |  if_e	rdlong	local03, fp
18bcc     14 4E 85 A1 |  if_e	sub	fp, #20
18bd0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18bd4     30 00 90 5D |  if_ne	jmp	#LR__2070
18bd8     00 1E 06 F6 | 	mov	local01, #0
18bdc     A7 12 02 FB | 	rdlong	arg01, fp
18be0     50 29 BF FD | 	call	#_convertstring
18be4     FD 12 02 F6 | 	mov	arg01, result1
18be8     0C 4E 05 F1 | 	add	fp, #12
18bec     A7 14 02 FB | 	rdlong	arg02, fp
18bf0     0C 4E 85 F1 | 	sub	fp, #12
18bf4     74 7C B0 FD | 	call	#__system___string_cmp
18bf8     00 FA 55 F2 | 	cmps	result1, #0 wc
18bfc     00 1E 26 36 |  if_ae	not	local01, #0
18c00     A7 1E 62 FC | 	wrlong	local01, fp
18c04     BC 00 90 FD | 	jmp	#LR__2073
18c08                 | LR__2070
18c08                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
18c08     08 4E 05 F1 | 	add	fp, #8
18c0c     A7 1E 02 FB | 	rdlong	local01, fp
18c10     08 4E 85 F1 | 	sub	fp, #8
18c14     1F 1E 0E F2 | 	cmp	local01, #31 wz
18c18     14 4E 05 A1 |  if_e	add	fp, #20
18c1c     A7 22 02 AB |  if_e	rdlong	local03, fp
18c20     14 4E 85 A1 |  if_e	sub	fp, #20
18c24     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18c28     34 00 90 5D |  if_ne	jmp	#LR__2071
18c2c     00 1E 06 F6 | 	mov	local01, #0
18c30     A7 20 02 FB | 	rdlong	local02, fp
18c34     0C 4E 05 F1 | 	add	fp, #12
18c38     A7 12 02 FB | 	rdlong	arg01, fp
18c3c     0C 4E 85 F1 | 	sub	fp, #12
18c40     F0 28 BF FD | 	call	#_convertstring
18c44     FD 14 02 F6 | 	mov	arg02, result1
18c48     10 13 02 F6 | 	mov	arg01, local02
18c4c     1C 7C B0 FD | 	call	#__system___string_cmp
18c50     00 FA 55 F2 | 	cmps	result1, #0 wc
18c54     00 1E 26 36 |  if_ae	not	local01, #0
18c58     A7 1E 62 FC | 	wrlong	local01, fp
18c5c     64 00 90 FD | 	jmp	#LR__2073
18c60                 | LR__2071
18c60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
18c60     08 4E 05 F1 | 	add	fp, #8
18c64     A7 1E 02 FB | 	rdlong	local01, fp
18c68     08 4E 85 F1 | 	sub	fp, #8
18c6c     2B 1E 0E F2 | 	cmp	local01, #43 wz
18c70     14 4E 05 A1 |  if_e	add	fp, #20
18c74     A7 22 02 AB |  if_e	rdlong	local03, fp
18c78     14 4E 85 A1 |  if_e	sub	fp, #20
18c7c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18c80     3C 00 90 5D |  if_ne	jmp	#LR__2072
18c84     00 1E 06 F6 | 	mov	local01, #0
18c88     A7 12 02 FB | 	rdlong	arg01, fp
18c8c     A4 28 BF FD | 	call	#_convertstring
18c90     FD 20 02 F6 | 	mov	local02, result1
18c94     0C 4E 05 F1 | 	add	fp, #12
18c98     A7 12 02 FB | 	rdlong	arg01, fp
18c9c     0C 4E 85 F1 | 	sub	fp, #12
18ca0     90 28 BF FD | 	call	#_convertstring
18ca4     FD 14 02 F6 | 	mov	arg02, result1
18ca8     10 13 02 F6 | 	mov	arg01, local02
18cac     BC 7B B0 FD | 	call	#__system___string_cmp
18cb0     00 FA 55 F2 | 	cmps	result1, #0 wc
18cb4     00 1E 26 36 |  if_ae	not	local01, #0
18cb8     A7 1E 62 FC | 	wrlong	local01, fp
18cbc     04 00 90 FD | 	jmp	#LR__2073
18cc0                 | LR__2072
18cc0     A7 00 68 FC | 	wrlong	#0, fp
18cc4                 | LR__2073
18cc4     08 4E 05 F1 | 	add	fp, #8
18cc8     A7 38 68 FC | 	wrlong	#28, fp
18ccc     08 4E 85 F1 | 	sub	fp, #8
18cd0     A7 12 02 F6 | 	mov	arg01, fp
18cd4     7C 27 BF FD | 	call	#_push
18cd8     A7 F0 03 F6 | 	mov	ptra, fp
18cdc     B2 00 A0 FD | 	call	#popregs_
18ce0                 | _do_ge_ret
18ce0     2D 00 64 FD | 	ret
18ce4                 | 
18ce4                 | ' 
18ce4                 | ' '--------------------------------- greater than (>)
18ce4                 | ' 
18ce4                 | ' sub do_gt
18ce4                 | _do_gt
18ce4     05 4A 05 F6 | 	mov	COUNT_, #5
18ce8     A8 00 A0 FD | 	call	#pushregs_
18cec     18 F0 07 F1 | 	add	ptra, #24
18cf0     C8 26 BF FD | 	call	#_pop
18cf4     FD 1E 02 F6 | 	mov	local01, result1
18cf8     FE 20 02 F6 | 	mov	local02, result2
18cfc     FF 22 02 F6 | 	mov	local03, result3
18d00     0C 4E 05 F1 | 	add	fp, #12
18d04     A7 1E 62 FC | 	wrlong	local01, fp
18d08     04 4E 05 F1 | 	add	fp, #4
18d0c     A7 20 62 FC | 	wrlong	local02, fp
18d10     04 4E 05 F1 | 	add	fp, #4
18d14     A7 22 62 FC | 	wrlong	local03, fp
18d18     14 4E 85 F1 | 	sub	fp, #20
18d1c     9C 26 BF FD | 	call	#_pop
18d20     FF 22 02 F6 | 	mov	local03, result3
18d24     A7 FA 61 FC | 	wrlong	result1, fp
18d28     04 4E 05 F1 | 	add	fp, #4
18d2c     A7 FC 61 FC | 	wrlong	result2, fp
18d30     04 4E 05 F1 | 	add	fp, #4
18d34     A7 22 62 FC | 	wrlong	local03, fp
18d38                 | ' 
18d38                 | ' t2=pop()
18d38                 | ' t1=pop()
18d38                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
18d38     08 4E 85 F1 | 	sub	fp, #8
18d3c     1F 22 0E F2 | 	cmp	local03, #31 wz
18d40     14 4E 05 A1 |  if_e	add	fp, #20
18d44     A7 24 02 AB |  if_e	rdlong	local04, fp
18d48     14 4E 85 A1 |  if_e	sub	fp, #20
18d4c     12 23 02 A6 |  if_e	mov	local03, local04
18d50     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18d54     28 00 90 5D |  if_ne	jmp	#LR__2080
18d58     00 1E 06 F6 | 	mov	local01, #0
18d5c     A7 12 02 FB | 	rdlong	arg01, fp
18d60     0C 4E 05 F1 | 	add	fp, #12
18d64     A7 14 02 FB | 	rdlong	arg02, fp
18d68     0C 4E 85 F1 | 	sub	fp, #12
18d6c     FC 7A B0 FD | 	call	#__system___string_cmp
18d70     01 FA 55 F2 | 	cmps	result1, #1 wc
18d74     00 1E 26 36 |  if_ae	not	local01, #0
18d78     A7 1E 62 FC | 	wrlong	local01, fp
18d7c     1C 04 90 FD | 	jmp	#LR__2093
18d80                 | LR__2080
18d80                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
18d80     08 4E 05 F1 | 	add	fp, #8
18d84     A7 1E 02 FB | 	rdlong	local01, fp
18d88     08 4E 85 F1 | 	sub	fp, #8
18d8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
18d90     14 4E 05 A1 |  if_e	add	fp, #20
18d94     A7 24 02 AB |  if_e	rdlong	local04, fp
18d98     14 4E 85 A1 |  if_e	sub	fp, #20
18d9c     12 23 02 A6 |  if_e	mov	local03, local04
18da0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18da4     2C 00 90 5D |  if_ne	jmp	#LR__2081
18da8     00 1E 06 F6 | 	mov	local01, #0
18dac     A7 12 02 FB | 	rdlong	arg01, fp
18db0     0C 4E 05 F1 | 	add	fp, #12
18db4     A7 14 02 FB | 	rdlong	arg02, fp
18db8     0C 4E 85 F1 | 	sub	fp, #12
18dbc     01 16 66 F6 | 	neg	arg03, #1
18dc0     68 AA B0 FD | 	call	#__system___float_cmp
18dc4     01 FA 55 F2 | 	cmps	result1, #1 wc
18dc8     00 1E 26 36 |  if_ae	not	local01, #0
18dcc     A7 1E 62 FC | 	wrlong	local01, fp
18dd0     C8 03 90 FD | 	jmp	#LR__2093
18dd4                 | LR__2081
18dd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
18dd4     08 4E 05 F1 | 	add	fp, #8
18dd8     A7 1E 02 FB | 	rdlong	local01, fp
18ddc     08 4E 85 F1 | 	sub	fp, #8
18de0     1E 1E 0E F2 | 	cmp	local01, #30 wz
18de4     14 4E 05 A1 |  if_e	add	fp, #20
18de8     A7 24 02 AB |  if_e	rdlong	local04, fp
18dec     14 4E 85 A1 |  if_e	sub	fp, #20
18df0     12 23 02 A6 |  if_e	mov	local03, local04
18df4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18df8     48 00 90 5D |  if_ne	jmp	#LR__2082
18dfc     00 1E 06 F6 | 	mov	local01, #0
18e00     A7 20 02 FB | 	rdlong	local02, fp
18e04     0C 4E 05 F1 | 	add	fp, #12
18e08     A7 12 02 FB | 	rdlong	arg01, fp
18e0c     0C 4E 85 F1 | 	sub	fp, #12
18e10     09 13 52 F6 | 	abs	arg01, arg01 wc
18e14     1F 26 C6 C9 |  if_b	decod	local05, #31
18e18     00 26 06 36 |  if_ae	mov	local05, #0
18e1c     D4 A1 B0 FD | 	call	#__system___float_fromuns
18e20     13 FB 61 F5 | 	xor	result1, local05
18e24     FD 14 02 F6 | 	mov	arg02, result1
18e28     10 13 02 F6 | 	mov	arg01, local02
18e2c     01 16 66 F6 | 	neg	arg03, #1
18e30     F8 A9 B0 FD | 	call	#__system___float_cmp
18e34     01 FA 55 F2 | 	cmps	result1, #1 wc
18e38     00 1E 26 36 |  if_ae	not	local01, #0
18e3c     A7 1E 62 FC | 	wrlong	local01, fp
18e40     58 03 90 FD | 	jmp	#LR__2093
18e44                 | LR__2082
18e44                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
18e44     08 4E 05 F1 | 	add	fp, #8
18e48     A7 1E 02 FB | 	rdlong	local01, fp
18e4c     08 4E 85 F1 | 	sub	fp, #8
18e50     1E 1E 0E F2 | 	cmp	local01, #30 wz
18e54     14 4E 05 A1 |  if_e	add	fp, #20
18e58     A7 24 02 AB |  if_e	rdlong	local04, fp
18e5c     14 4E 85 A1 |  if_e	sub	fp, #20
18e60     12 23 02 A6 |  if_e	mov	local03, local04
18e64     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18e68     38 00 90 5D |  if_ne	jmp	#LR__2083
18e6c     00 1E 06 F6 | 	mov	local01, #0
18e70     A7 20 02 FB | 	rdlong	local02, fp
18e74     0C 4E 05 F1 | 	add	fp, #12
18e78     A7 12 02 FB | 	rdlong	arg01, fp
18e7c     0C 4E 85 F1 | 	sub	fp, #12
18e80     70 A1 B0 FD | 	call	#__system___float_fromuns
18e84     FD 14 02 F6 | 	mov	arg02, result1
18e88     10 13 02 F6 | 	mov	arg01, local02
18e8c     01 16 66 F6 | 	neg	arg03, #1
18e90     98 A9 B0 FD | 	call	#__system___float_cmp
18e94     01 FA 55 F2 | 	cmps	result1, #1 wc
18e98     00 1E 26 36 |  if_ae	not	local01, #0
18e9c     A7 1E 62 FC | 	wrlong	local01, fp
18ea0     F8 02 90 FD | 	jmp	#LR__2093
18ea4                 | LR__2083
18ea4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
18ea4     08 4E 05 F1 | 	add	fp, #8
18ea8     A7 1E 02 FB | 	rdlong	local01, fp
18eac     08 4E 85 F1 | 	sub	fp, #8
18eb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18eb4     14 4E 05 A1 |  if_e	add	fp, #20
18eb8     A7 24 02 AB |  if_e	rdlong	local04, fp
18ebc     14 4E 85 A1 |  if_e	sub	fp, #20
18ec0     12 23 02 A6 |  if_e	mov	local03, local04
18ec4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18ec8     44 00 90 5D |  if_ne	jmp	#LR__2084
18ecc     00 1E 06 F6 | 	mov	local01, #0
18ed0     A7 12 02 FB | 	rdlong	arg01, fp
18ed4     09 13 52 F6 | 	abs	arg01, arg01 wc
18ed8     1F 26 C6 C9 |  if_b	decod	local05, #31
18edc     00 26 06 36 |  if_ae	mov	local05, #0
18ee0     10 A1 B0 FD | 	call	#__system___float_fromuns
18ee4     13 FB 61 F5 | 	xor	result1, local05
18ee8     FD 12 02 F6 | 	mov	arg01, result1
18eec     0C 4E 05 F1 | 	add	fp, #12
18ef0     A7 14 02 FB | 	rdlong	arg02, fp
18ef4     0C 4E 85 F1 | 	sub	fp, #12
18ef8     01 16 66 F6 | 	neg	arg03, #1
18efc     2C A9 B0 FD | 	call	#__system___float_cmp
18f00     01 FA 55 F2 | 	cmps	result1, #1 wc
18f04     00 1E 26 36 |  if_ae	not	local01, #0
18f08     A7 1E 62 FC | 	wrlong	local01, fp
18f0c     8C 02 90 FD | 	jmp	#LR__2093
18f10                 | LR__2084
18f10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
18f10     08 4E 05 F1 | 	add	fp, #8
18f14     A7 1E 02 FB | 	rdlong	local01, fp
18f18     08 4E 85 F1 | 	sub	fp, #8
18f1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18f20     14 4E 05 A1 |  if_e	add	fp, #20
18f24     A7 24 02 AB |  if_e	rdlong	local04, fp
18f28     14 4E 85 A1 |  if_e	sub	fp, #20
18f2c     12 23 02 A6 |  if_e	mov	local03, local04
18f30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18f34     24 00 90 5D |  if_ne	jmp	#LR__2085
18f38     00 1E 06 F6 | 	mov	local01, #0
18f3c     A7 20 02 FB | 	rdlong	local02, fp
18f40     0C 4E 05 F1 | 	add	fp, #12
18f44     A7 22 02 FB | 	rdlong	local03, fp
18f48     0C 4E 85 F1 | 	sub	fp, #12
18f4c     11 21 5A F2 | 	cmps	local02, local03 wcz
18f50     01 1E 66 16 |  if_a	neg	local01, #1
18f54     A7 1E 62 FC | 	wrlong	local01, fp
18f58     40 02 90 FD | 	jmp	#LR__2093
18f5c                 | LR__2085
18f5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
18f5c     08 4E 05 F1 | 	add	fp, #8
18f60     A7 1E 02 FB | 	rdlong	local01, fp
18f64     08 4E 85 F1 | 	sub	fp, #8
18f68     1C 1E 0E F2 | 	cmp	local01, #28 wz
18f6c     14 4E 05 A1 |  if_e	add	fp, #20
18f70     A7 24 02 AB |  if_e	rdlong	local04, fp
18f74     14 4E 85 A1 |  if_e	sub	fp, #20
18f78     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18f7c     24 00 90 5D |  if_ne	jmp	#LR__2086
18f80     00 1E 06 F6 | 	mov	local01, #0
18f84     A7 20 02 FB | 	rdlong	local02, fp
18f88     0C 4E 05 F1 | 	add	fp, #12
18f8c     A7 22 02 FB | 	rdlong	local03, fp
18f90     0C 4E 85 F1 | 	sub	fp, #12
18f94     11 21 5A F2 | 	cmps	local02, local03 wcz
18f98     01 1E 66 16 |  if_a	neg	local01, #1
18f9c     A7 1E 62 FC | 	wrlong	local01, fp
18fa0     F8 01 90 FD | 	jmp	#LR__2093
18fa4                 | LR__2086
18fa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
18fa4     08 4E 05 F1 | 	add	fp, #8
18fa8     A7 1E 02 FB | 	rdlong	local01, fp
18fac     08 4E 85 F1 | 	sub	fp, #8
18fb0     1D 1E 0E F2 | 	cmp	local01, #29 wz
18fb4     14 4E 05 A1 |  if_e	add	fp, #20
18fb8     A7 22 02 AB |  if_e	rdlong	local03, fp
18fbc     14 4E 85 A1 |  if_e	sub	fp, #20
18fc0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18fc4     34 00 90 5D |  if_ne	jmp	#LR__2087
18fc8     00 1E 06 F6 | 	mov	local01, #0
18fcc     A7 12 02 FB | 	rdlong	arg01, fp
18fd0     20 A0 B0 FD | 	call	#__system___float_fromuns
18fd4     FD 12 02 F6 | 	mov	arg01, result1
18fd8     0C 4E 05 F1 | 	add	fp, #12
18fdc     A7 14 02 FB | 	rdlong	arg02, fp
18fe0     0C 4E 85 F1 | 	sub	fp, #12
18fe4     01 16 66 F6 | 	neg	arg03, #1
18fe8     40 A8 B0 FD | 	call	#__system___float_cmp
18fec     01 FA 55 F2 | 	cmps	result1, #1 wc
18ff0     00 1E 26 36 |  if_ae	not	local01, #0
18ff4     A7 1E 62 FC | 	wrlong	local01, fp
18ff8     A0 01 90 FD | 	jmp	#LR__2093
18ffc                 | LR__2087
18ffc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
18ffc     08 4E 05 F1 | 	add	fp, #8
19000     A7 1E 02 FB | 	rdlong	local01, fp
19004     08 4E 85 F1 | 	sub	fp, #8
19008     1D 1E 0E F2 | 	cmp	local01, #29 wz
1900c     14 4E 05 A1 |  if_e	add	fp, #20
19010     A7 22 02 AB |  if_e	rdlong	local03, fp
19014     14 4E 85 A1 |  if_e	sub	fp, #20
19018     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1901c     24 00 90 5D |  if_ne	jmp	#LR__2088
19020     00 1E 06 F6 | 	mov	local01, #0
19024     A7 20 02 FB | 	rdlong	local02, fp
19028     0C 4E 05 F1 | 	add	fp, #12
1902c     A7 22 02 FB | 	rdlong	local03, fp
19030     0C 4E 85 F1 | 	sub	fp, #12
19034     11 21 5A F2 | 	cmps	local02, local03 wcz
19038     01 1E 66 16 |  if_a	neg	local01, #1
1903c     A7 1E 62 FC | 	wrlong	local01, fp
19040     58 01 90 FD | 	jmp	#LR__2093
19044                 | LR__2088
19044                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
19044     08 4E 05 F1 | 	add	fp, #8
19048     A7 1E 02 FB | 	rdlong	local01, fp
1904c     08 4E 85 F1 | 	sub	fp, #8
19050     1D 1E 0E F2 | 	cmp	local01, #29 wz
19054     14 4E 05 A1 |  if_e	add	fp, #20
19058     A7 22 02 AB |  if_e	rdlong	local03, fp
1905c     14 4E 85 A1 |  if_e	sub	fp, #20
19060     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19064     24 00 90 5D |  if_ne	jmp	#LR__2089
19068     00 1E 06 F6 | 	mov	local01, #0
1906c     A7 20 02 FB | 	rdlong	local02, fp
19070     0C 4E 05 F1 | 	add	fp, #12
19074     A7 22 02 FB | 	rdlong	local03, fp
19078     0C 4E 85 F1 | 	sub	fp, #12
1907c     11 21 1A F2 | 	cmp	local02, local03 wcz
19080     01 1E 66 16 |  if_a	neg	local01, #1
19084     A7 1E 62 FC | 	wrlong	local01, fp
19088     10 01 90 FD | 	jmp	#LR__2093
1908c                 | LR__2089
1908c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1908c     08 4E 05 F1 | 	add	fp, #8
19090     A7 1E 02 FB | 	rdlong	local01, fp
19094     08 4E 85 F1 | 	sub	fp, #8
19098     2B 1E 0E F2 | 	cmp	local01, #43 wz
1909c     14 4E 05 A1 |  if_e	add	fp, #20
190a0     A7 22 02 AB |  if_e	rdlong	local03, fp
190a4     14 4E 85 A1 |  if_e	sub	fp, #20
190a8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
190ac     30 00 90 5D |  if_ne	jmp	#LR__2090
190b0     00 1E 06 F6 | 	mov	local01, #0
190b4     A7 12 02 FB | 	rdlong	arg01, fp
190b8     78 24 BF FD | 	call	#_convertstring
190bc     FD 12 02 F6 | 	mov	arg01, result1
190c0     0C 4E 05 F1 | 	add	fp, #12
190c4     A7 14 02 FB | 	rdlong	arg02, fp
190c8     0C 4E 85 F1 | 	sub	fp, #12
190cc     9C 77 B0 FD | 	call	#__system___string_cmp
190d0     01 FA 55 F2 | 	cmps	result1, #1 wc
190d4     00 1E 26 36 |  if_ae	not	local01, #0
190d8     A7 1E 62 FC | 	wrlong	local01, fp
190dc     BC 00 90 FD | 	jmp	#LR__2093
190e0                 | LR__2090
190e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
190e0     08 4E 05 F1 | 	add	fp, #8
190e4     A7 1E 02 FB | 	rdlong	local01, fp
190e8     08 4E 85 F1 | 	sub	fp, #8
190ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
190f0     14 4E 05 A1 |  if_e	add	fp, #20
190f4     A7 22 02 AB |  if_e	rdlong	local03, fp
190f8     14 4E 85 A1 |  if_e	sub	fp, #20
190fc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19100     34 00 90 5D |  if_ne	jmp	#LR__2091
19104     00 1E 06 F6 | 	mov	local01, #0
19108     A7 20 02 FB | 	rdlong	local02, fp
1910c     0C 4E 05 F1 | 	add	fp, #12
19110     A7 12 02 FB | 	rdlong	arg01, fp
19114     0C 4E 85 F1 | 	sub	fp, #12
19118     18 24 BF FD | 	call	#_convertstring
1911c     FD 14 02 F6 | 	mov	arg02, result1
19120     10 13 02 F6 | 	mov	arg01, local02
19124     44 77 B0 FD | 	call	#__system___string_cmp
19128     01 FA 55 F2 | 	cmps	result1, #1 wc
1912c     00 1E 26 36 |  if_ae	not	local01, #0
19130     A7 1E 62 FC | 	wrlong	local01, fp
19134     64 00 90 FD | 	jmp	#LR__2093
19138                 | LR__2091
19138                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
19138     08 4E 05 F1 | 	add	fp, #8
1913c     A7 1E 02 FB | 	rdlong	local01, fp
19140     08 4E 85 F1 | 	sub	fp, #8
19144     2B 1E 0E F2 | 	cmp	local01, #43 wz
19148     14 4E 05 A1 |  if_e	add	fp, #20
1914c     A7 22 02 AB |  if_e	rdlong	local03, fp
19150     14 4E 85 A1 |  if_e	sub	fp, #20
19154     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19158     3C 00 90 5D |  if_ne	jmp	#LR__2092
1915c     00 1E 06 F6 | 	mov	local01, #0
19160     A7 12 02 FB | 	rdlong	arg01, fp
19164     CC 23 BF FD | 	call	#_convertstring
19168     FD 20 02 F6 | 	mov	local02, result1
1916c     0C 4E 05 F1 | 	add	fp, #12
19170     A7 12 02 FB | 	rdlong	arg01, fp
19174     0C 4E 85 F1 | 	sub	fp, #12
19178     B8 23 BF FD | 	call	#_convertstring
1917c     FD 14 02 F6 | 	mov	arg02, result1
19180     10 13 02 F6 | 	mov	arg01, local02
19184     E4 76 B0 FD | 	call	#__system___string_cmp
19188     01 FA 55 F2 | 	cmps	result1, #1 wc
1918c     00 1E 26 36 |  if_ae	not	local01, #0
19190     A7 1E 62 FC | 	wrlong	local01, fp
19194     04 00 90 FD | 	jmp	#LR__2093
19198                 | LR__2092
19198     A7 00 68 FC | 	wrlong	#0, fp
1919c                 | LR__2093
1919c     08 4E 05 F1 | 	add	fp, #8
191a0     A7 38 68 FC | 	wrlong	#28, fp
191a4     08 4E 85 F1 | 	sub	fp, #8
191a8     A7 12 02 F6 | 	mov	arg01, fp
191ac     A4 22 BF FD | 	call	#_push
191b0     A7 F0 03 F6 | 	mov	ptra, fp
191b4     B2 00 A0 FD | 	call	#popregs_
191b8                 | _do_gt_ret
191b8     2D 00 64 FD | 	ret
191bc                 | 
191bc                 | ' 
191bc                 | ' '--------------------------------- less or equal (<=)
191bc                 | ' 
191bc                 | ' sub do_le
191bc                 | _do_le
191bc     05 4A 05 F6 | 	mov	COUNT_, #5
191c0     A8 00 A0 FD | 	call	#pushregs_
191c4     18 F0 07 F1 | 	add	ptra, #24
191c8     F0 21 BF FD | 	call	#_pop
191cc     FD 1E 02 F6 | 	mov	local01, result1
191d0     FE 20 02 F6 | 	mov	local02, result2
191d4     FF 22 02 F6 | 	mov	local03, result3
191d8     0C 4E 05 F1 | 	add	fp, #12
191dc     A7 1E 62 FC | 	wrlong	local01, fp
191e0     04 4E 05 F1 | 	add	fp, #4
191e4     A7 20 62 FC | 	wrlong	local02, fp
191e8     04 4E 05 F1 | 	add	fp, #4
191ec     A7 22 62 FC | 	wrlong	local03, fp
191f0     14 4E 85 F1 | 	sub	fp, #20
191f4     C4 21 BF FD | 	call	#_pop
191f8     FF 22 02 F6 | 	mov	local03, result3
191fc     A7 FA 61 FC | 	wrlong	result1, fp
19200     04 4E 05 F1 | 	add	fp, #4
19204     A7 FC 61 FC | 	wrlong	result2, fp
19208     04 4E 05 F1 | 	add	fp, #4
1920c     A7 22 62 FC | 	wrlong	local03, fp
19210                 | ' 
19210                 | ' t2=pop()
19210                 | ' t1=pop()
19210                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
19210     08 4E 85 F1 | 	sub	fp, #8
19214     1F 22 0E F2 | 	cmp	local03, #31 wz
19218     14 4E 05 A1 |  if_e	add	fp, #20
1921c     A7 24 02 AB |  if_e	rdlong	local04, fp
19220     14 4E 85 A1 |  if_e	sub	fp, #20
19224     12 23 02 A6 |  if_e	mov	local03, local04
19228     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1922c     28 00 90 5D |  if_ne	jmp	#LR__2100
19230     00 1E 06 F6 | 	mov	local01, #0
19234     A7 12 02 FB | 	rdlong	arg01, fp
19238     0C 4E 05 F1 | 	add	fp, #12
1923c     A7 14 02 FB | 	rdlong	arg02, fp
19240     0C 4E 85 F1 | 	sub	fp, #12
19244     24 76 B0 FD | 	call	#__system___string_cmp
19248     01 FA 55 F2 | 	cmps	result1, #1 wc
1924c     00 1E 26 C6 |  if_b	not	local01, #0
19250     A7 1E 62 FC | 	wrlong	local01, fp
19254     1C 04 90 FD | 	jmp	#LR__2113
19258                 | LR__2100
19258                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
19258     08 4E 05 F1 | 	add	fp, #8
1925c     A7 1E 02 FB | 	rdlong	local01, fp
19260     08 4E 85 F1 | 	sub	fp, #8
19264     1E 1E 0E F2 | 	cmp	local01, #30 wz
19268     14 4E 05 A1 |  if_e	add	fp, #20
1926c     A7 24 02 AB |  if_e	rdlong	local04, fp
19270     14 4E 85 A1 |  if_e	sub	fp, #20
19274     12 23 02 A6 |  if_e	mov	local03, local04
19278     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1927c     2C 00 90 5D |  if_ne	jmp	#LR__2101
19280     00 1E 06 F6 | 	mov	local01, #0
19284     A7 12 02 FB | 	rdlong	arg01, fp
19288     0C 4E 05 F1 | 	add	fp, #12
1928c     A7 14 02 FB | 	rdlong	arg02, fp
19290     0C 4E 85 F1 | 	sub	fp, #12
19294     01 16 06 F6 | 	mov	arg03, #1
19298     90 A5 B0 FD | 	call	#__system___float_cmp
1929c     01 FA 55 F2 | 	cmps	result1, #1 wc
192a0     00 1E 26 C6 |  if_b	not	local01, #0
192a4     A7 1E 62 FC | 	wrlong	local01, fp
192a8     C8 03 90 FD | 	jmp	#LR__2113
192ac                 | LR__2101
192ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
192ac     08 4E 05 F1 | 	add	fp, #8
192b0     A7 1E 02 FB | 	rdlong	local01, fp
192b4     08 4E 85 F1 | 	sub	fp, #8
192b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
192bc     14 4E 05 A1 |  if_e	add	fp, #20
192c0     A7 24 02 AB |  if_e	rdlong	local04, fp
192c4     14 4E 85 A1 |  if_e	sub	fp, #20
192c8     12 23 02 A6 |  if_e	mov	local03, local04
192cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
192d0     48 00 90 5D |  if_ne	jmp	#LR__2102
192d4     00 1E 06 F6 | 	mov	local01, #0
192d8     A7 20 02 FB | 	rdlong	local02, fp
192dc     0C 4E 05 F1 | 	add	fp, #12
192e0     A7 12 02 FB | 	rdlong	arg01, fp
192e4     0C 4E 85 F1 | 	sub	fp, #12
192e8     09 13 52 F6 | 	abs	arg01, arg01 wc
192ec     1F 26 C6 C9 |  if_b	decod	local05, #31
192f0     00 26 06 36 |  if_ae	mov	local05, #0
192f4     FC 9C B0 FD | 	call	#__system___float_fromuns
192f8     13 FB 61 F5 | 	xor	result1, local05
192fc     FD 14 02 F6 | 	mov	arg02, result1
19300     10 13 02 F6 | 	mov	arg01, local02
19304     01 16 06 F6 | 	mov	arg03, #1
19308     20 A5 B0 FD | 	call	#__system___float_cmp
1930c     01 FA 55 F2 | 	cmps	result1, #1 wc
19310     00 1E 26 C6 |  if_b	not	local01, #0
19314     A7 1E 62 FC | 	wrlong	local01, fp
19318     58 03 90 FD | 	jmp	#LR__2113
1931c                 | LR__2102
1931c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1931c     08 4E 05 F1 | 	add	fp, #8
19320     A7 1E 02 FB | 	rdlong	local01, fp
19324     08 4E 85 F1 | 	sub	fp, #8
19328     1E 1E 0E F2 | 	cmp	local01, #30 wz
1932c     14 4E 05 A1 |  if_e	add	fp, #20
19330     A7 24 02 AB |  if_e	rdlong	local04, fp
19334     14 4E 85 A1 |  if_e	sub	fp, #20
19338     12 23 02 A6 |  if_e	mov	local03, local04
1933c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19340     38 00 90 5D |  if_ne	jmp	#LR__2103
19344     00 1E 06 F6 | 	mov	local01, #0
19348     A7 20 02 FB | 	rdlong	local02, fp
1934c     0C 4E 05 F1 | 	add	fp, #12
19350     A7 12 02 FB | 	rdlong	arg01, fp
19354     0C 4E 85 F1 | 	sub	fp, #12
19358     98 9C B0 FD | 	call	#__system___float_fromuns
1935c     FD 14 02 F6 | 	mov	arg02, result1
19360     10 13 02 F6 | 	mov	arg01, local02
19364     01 16 06 F6 | 	mov	arg03, #1
19368     C0 A4 B0 FD | 	call	#__system___float_cmp
1936c     01 FA 55 F2 | 	cmps	result1, #1 wc
19370     00 1E 26 C6 |  if_b	not	local01, #0
19374     A7 1E 62 FC | 	wrlong	local01, fp
19378     F8 02 90 FD | 	jmp	#LR__2113
1937c                 | LR__2103
1937c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1937c     08 4E 05 F1 | 	add	fp, #8
19380     A7 1E 02 FB | 	rdlong	local01, fp
19384     08 4E 85 F1 | 	sub	fp, #8
19388     1C 1E 0E F2 | 	cmp	local01, #28 wz
1938c     14 4E 05 A1 |  if_e	add	fp, #20
19390     A7 24 02 AB |  if_e	rdlong	local04, fp
19394     14 4E 85 A1 |  if_e	sub	fp, #20
19398     12 23 02 A6 |  if_e	mov	local03, local04
1939c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
193a0     44 00 90 5D |  if_ne	jmp	#LR__2104
193a4     00 1E 06 F6 | 	mov	local01, #0
193a8     A7 12 02 FB | 	rdlong	arg01, fp
193ac     09 13 52 F6 | 	abs	arg01, arg01 wc
193b0     1F 26 C6 C9 |  if_b	decod	local05, #31
193b4     00 26 06 36 |  if_ae	mov	local05, #0
193b8     38 9C B0 FD | 	call	#__system___float_fromuns
193bc     13 FB 61 F5 | 	xor	result1, local05
193c0     FD 12 02 F6 | 	mov	arg01, result1
193c4     0C 4E 05 F1 | 	add	fp, #12
193c8     A7 14 02 FB | 	rdlong	arg02, fp
193cc     0C 4E 85 F1 | 	sub	fp, #12
193d0     01 16 06 F6 | 	mov	arg03, #1
193d4     54 A4 B0 FD | 	call	#__system___float_cmp
193d8     01 FA 55 F2 | 	cmps	result1, #1 wc
193dc     00 1E 26 C6 |  if_b	not	local01, #0
193e0     A7 1E 62 FC | 	wrlong	local01, fp
193e4     8C 02 90 FD | 	jmp	#LR__2113
193e8                 | LR__2104
193e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
193e8     08 4E 05 F1 | 	add	fp, #8
193ec     A7 1E 02 FB | 	rdlong	local01, fp
193f0     08 4E 85 F1 | 	sub	fp, #8
193f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
193f8     14 4E 05 A1 |  if_e	add	fp, #20
193fc     A7 24 02 AB |  if_e	rdlong	local04, fp
19400     14 4E 85 A1 |  if_e	sub	fp, #20
19404     12 23 02 A6 |  if_e	mov	local03, local04
19408     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1940c     24 00 90 5D |  if_ne	jmp	#LR__2105
19410     00 1E 06 F6 | 	mov	local01, #0
19414     A7 20 02 FB | 	rdlong	local02, fp
19418     0C 4E 05 F1 | 	add	fp, #12
1941c     A7 22 02 FB | 	rdlong	local03, fp
19420     0C 4E 85 F1 | 	sub	fp, #12
19424     11 21 5A F2 | 	cmps	local02, local03 wcz
19428     01 1E 66 E6 |  if_be	neg	local01, #1
1942c     A7 1E 62 FC | 	wrlong	local01, fp
19430     40 02 90 FD | 	jmp	#LR__2113
19434                 | LR__2105
19434                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
19434     08 4E 05 F1 | 	add	fp, #8
19438     A7 1E 02 FB | 	rdlong	local01, fp
1943c     08 4E 85 F1 | 	sub	fp, #8
19440     1C 1E 0E F2 | 	cmp	local01, #28 wz
19444     14 4E 05 A1 |  if_e	add	fp, #20
19448     A7 24 02 AB |  if_e	rdlong	local04, fp
1944c     14 4E 85 A1 |  if_e	sub	fp, #20
19450     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19454     24 00 90 5D |  if_ne	jmp	#LR__2106
19458     00 1E 06 F6 | 	mov	local01, #0
1945c     A7 20 02 FB | 	rdlong	local02, fp
19460     0C 4E 05 F1 | 	add	fp, #12
19464     A7 22 02 FB | 	rdlong	local03, fp
19468     0C 4E 85 F1 | 	sub	fp, #12
1946c     11 21 5A F2 | 	cmps	local02, local03 wcz
19470     01 1E 66 E6 |  if_be	neg	local01, #1
19474     A7 1E 62 FC | 	wrlong	local01, fp
19478     F8 01 90 FD | 	jmp	#LR__2113
1947c                 | LR__2106
1947c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1947c     08 4E 05 F1 | 	add	fp, #8
19480     A7 1E 02 FB | 	rdlong	local01, fp
19484     08 4E 85 F1 | 	sub	fp, #8
19488     1D 1E 0E F2 | 	cmp	local01, #29 wz
1948c     14 4E 05 A1 |  if_e	add	fp, #20
19490     A7 22 02 AB |  if_e	rdlong	local03, fp
19494     14 4E 85 A1 |  if_e	sub	fp, #20
19498     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1949c     34 00 90 5D |  if_ne	jmp	#LR__2107
194a0     00 1E 06 F6 | 	mov	local01, #0
194a4     A7 12 02 FB | 	rdlong	arg01, fp
194a8     48 9B B0 FD | 	call	#__system___float_fromuns
194ac     FD 12 02 F6 | 	mov	arg01, result1
194b0     0C 4E 05 F1 | 	add	fp, #12
194b4     A7 14 02 FB | 	rdlong	arg02, fp
194b8     0C 4E 85 F1 | 	sub	fp, #12
194bc     01 16 06 F6 | 	mov	arg03, #1
194c0     68 A3 B0 FD | 	call	#__system___float_cmp
194c4     01 FA 55 F2 | 	cmps	result1, #1 wc
194c8     00 1E 26 C6 |  if_b	not	local01, #0
194cc     A7 1E 62 FC | 	wrlong	local01, fp
194d0     A0 01 90 FD | 	jmp	#LR__2113
194d4                 | LR__2107
194d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
194d4     08 4E 05 F1 | 	add	fp, #8
194d8     A7 1E 02 FB | 	rdlong	local01, fp
194dc     08 4E 85 F1 | 	sub	fp, #8
194e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
194e4     14 4E 05 A1 |  if_e	add	fp, #20
194e8     A7 22 02 AB |  if_e	rdlong	local03, fp
194ec     14 4E 85 A1 |  if_e	sub	fp, #20
194f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
194f4     24 00 90 5D |  if_ne	jmp	#LR__2108
194f8     00 1E 06 F6 | 	mov	local01, #0
194fc     A7 20 02 FB | 	rdlong	local02, fp
19500     0C 4E 05 F1 | 	add	fp, #12
19504     A7 22 02 FB | 	rdlong	local03, fp
19508     0C 4E 85 F1 | 	sub	fp, #12
1950c     11 21 5A F2 | 	cmps	local02, local03 wcz
19510     01 1E 66 E6 |  if_be	neg	local01, #1
19514     A7 1E 62 FC | 	wrlong	local01, fp
19518     58 01 90 FD | 	jmp	#LR__2113
1951c                 | LR__2108
1951c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1951c     08 4E 05 F1 | 	add	fp, #8
19520     A7 1E 02 FB | 	rdlong	local01, fp
19524     08 4E 85 F1 | 	sub	fp, #8
19528     1D 1E 0E F2 | 	cmp	local01, #29 wz
1952c     14 4E 05 A1 |  if_e	add	fp, #20
19530     A7 22 02 AB |  if_e	rdlong	local03, fp
19534     14 4E 85 A1 |  if_e	sub	fp, #20
19538     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1953c     24 00 90 5D |  if_ne	jmp	#LR__2109
19540     00 1E 06 F6 | 	mov	local01, #0
19544     A7 20 02 FB | 	rdlong	local02, fp
19548     0C 4E 05 F1 | 	add	fp, #12
1954c     A7 22 02 FB | 	rdlong	local03, fp
19550     0C 4E 85 F1 | 	sub	fp, #12
19554     11 21 1A F2 | 	cmp	local02, local03 wcz
19558     01 1E 66 E6 |  if_be	neg	local01, #1
1955c     A7 1E 62 FC | 	wrlong	local01, fp
19560     10 01 90 FD | 	jmp	#LR__2113
19564                 | LR__2109
19564                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
19564     08 4E 05 F1 | 	add	fp, #8
19568     A7 1E 02 FB | 	rdlong	local01, fp
1956c     08 4E 85 F1 | 	sub	fp, #8
19570     2B 1E 0E F2 | 	cmp	local01, #43 wz
19574     14 4E 05 A1 |  if_e	add	fp, #20
19578     A7 22 02 AB |  if_e	rdlong	local03, fp
1957c     14 4E 85 A1 |  if_e	sub	fp, #20
19580     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19584     30 00 90 5D |  if_ne	jmp	#LR__2110
19588     00 1E 06 F6 | 	mov	local01, #0
1958c     A7 12 02 FB | 	rdlong	arg01, fp
19590     A0 1F BF FD | 	call	#_convertstring
19594     FD 12 02 F6 | 	mov	arg01, result1
19598     0C 4E 05 F1 | 	add	fp, #12
1959c     A7 14 02 FB | 	rdlong	arg02, fp
195a0     0C 4E 85 F1 | 	sub	fp, #12
195a4     C4 72 B0 FD | 	call	#__system___string_cmp
195a8     01 FA 55 F2 | 	cmps	result1, #1 wc
195ac     00 1E 26 C6 |  if_b	not	local01, #0
195b0     A7 1E 62 FC | 	wrlong	local01, fp
195b4     BC 00 90 FD | 	jmp	#LR__2113
195b8                 | LR__2110
195b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
195b8     08 4E 05 F1 | 	add	fp, #8
195bc     A7 1E 02 FB | 	rdlong	local01, fp
195c0     08 4E 85 F1 | 	sub	fp, #8
195c4     1F 1E 0E F2 | 	cmp	local01, #31 wz
195c8     14 4E 05 A1 |  if_e	add	fp, #20
195cc     A7 22 02 AB |  if_e	rdlong	local03, fp
195d0     14 4E 85 A1 |  if_e	sub	fp, #20
195d4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
195d8     34 00 90 5D |  if_ne	jmp	#LR__2111
195dc     00 1E 06 F6 | 	mov	local01, #0
195e0     A7 20 02 FB | 	rdlong	local02, fp
195e4     0C 4E 05 F1 | 	add	fp, #12
195e8     A7 12 02 FB | 	rdlong	arg01, fp
195ec     0C 4E 85 F1 | 	sub	fp, #12
195f0     40 1F BF FD | 	call	#_convertstring
195f4     FD 14 02 F6 | 	mov	arg02, result1
195f8     10 13 02 F6 | 	mov	arg01, local02
195fc     6C 72 B0 FD | 	call	#__system___string_cmp
19600     01 FA 55 F2 | 	cmps	result1, #1 wc
19604     00 1E 26 C6 |  if_b	not	local01, #0
19608     A7 1E 62 FC | 	wrlong	local01, fp
1960c     64 00 90 FD | 	jmp	#LR__2113
19610                 | LR__2111
19610                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
19610     08 4E 05 F1 | 	add	fp, #8
19614     A7 1E 02 FB | 	rdlong	local01, fp
19618     08 4E 85 F1 | 	sub	fp, #8
1961c     2B 1E 0E F2 | 	cmp	local01, #43 wz
19620     14 4E 05 A1 |  if_e	add	fp, #20
19624     A7 22 02 AB |  if_e	rdlong	local03, fp
19628     14 4E 85 A1 |  if_e	sub	fp, #20
1962c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19630     3C 00 90 5D |  if_ne	jmp	#LR__2112
19634     00 1E 06 F6 | 	mov	local01, #0
19638     A7 12 02 FB | 	rdlong	arg01, fp
1963c     F4 1E BF FD | 	call	#_convertstring
19640     FD 20 02 F6 | 	mov	local02, result1
19644     0C 4E 05 F1 | 	add	fp, #12
19648     A7 12 02 FB | 	rdlong	arg01, fp
1964c     0C 4E 85 F1 | 	sub	fp, #12
19650     E0 1E BF FD | 	call	#_convertstring
19654     FD 14 02 F6 | 	mov	arg02, result1
19658     10 13 02 F6 | 	mov	arg01, local02
1965c     0C 72 B0 FD | 	call	#__system___string_cmp
19660     01 FA 55 F2 | 	cmps	result1, #1 wc
19664     00 1E 26 C6 |  if_b	not	local01, #0
19668     A7 1E 62 FC | 	wrlong	local01, fp
1966c     04 00 90 FD | 	jmp	#LR__2113
19670                 | LR__2112
19670     A7 00 68 FC | 	wrlong	#0, fp
19674                 | LR__2113
19674     08 4E 05 F1 | 	add	fp, #8
19678     A7 38 68 FC | 	wrlong	#28, fp
1967c     08 4E 85 F1 | 	sub	fp, #8
19680     A7 12 02 F6 | 	mov	arg01, fp
19684     CC 1D BF FD | 	call	#_push
19688     A7 F0 03 F6 | 	mov	ptra, fp
1968c     B2 00 A0 FD | 	call	#popregs_
19690                 | _do_le_ret
19690     2D 00 64 FD | 	ret
19694                 | 
19694                 | ' 
19694                 | ' '--------------------------------- less than (<)
19694                 | ' 
19694                 | ' sub do_lt
19694                 | _do_lt
19694     05 4A 05 F6 | 	mov	COUNT_, #5
19698     A8 00 A0 FD | 	call	#pushregs_
1969c     18 F0 07 F1 | 	add	ptra, #24
196a0     18 1D BF FD | 	call	#_pop
196a4     FD 1E 02 F6 | 	mov	local01, result1
196a8     FE 20 02 F6 | 	mov	local02, result2
196ac     FF 22 02 F6 | 	mov	local03, result3
196b0     0C 4E 05 F1 | 	add	fp, #12
196b4     A7 1E 62 FC | 	wrlong	local01, fp
196b8     04 4E 05 F1 | 	add	fp, #4
196bc     A7 20 62 FC | 	wrlong	local02, fp
196c0     04 4E 05 F1 | 	add	fp, #4
196c4     A7 22 62 FC | 	wrlong	local03, fp
196c8     14 4E 85 F1 | 	sub	fp, #20
196cc     EC 1C BF FD | 	call	#_pop
196d0     FF 22 02 F6 | 	mov	local03, result3
196d4     A7 FA 61 FC | 	wrlong	result1, fp
196d8     04 4E 05 F1 | 	add	fp, #4
196dc     A7 FC 61 FC | 	wrlong	result2, fp
196e0     04 4E 05 F1 | 	add	fp, #4
196e4     A7 22 62 FC | 	wrlong	local03, fp
196e8                 | ' 
196e8                 | ' t2=pop()
196e8                 | ' t1=pop()
196e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
196e8     08 4E 85 F1 | 	sub	fp, #8
196ec     1F 22 0E F2 | 	cmp	local03, #31 wz
196f0     14 4E 05 A1 |  if_e	add	fp, #20
196f4     A7 24 02 AB |  if_e	rdlong	local04, fp
196f8     14 4E 85 A1 |  if_e	sub	fp, #20
196fc     12 23 02 A6 |  if_e	mov	local03, local04
19700     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19704     28 00 90 5D |  if_ne	jmp	#LR__2120
19708     00 1E 06 F6 | 	mov	local01, #0
1970c     A7 12 02 FB | 	rdlong	arg01, fp
19710     0C 4E 05 F1 | 	add	fp, #12
19714     A7 14 02 FB | 	rdlong	arg02, fp
19718     0C 4E 85 F1 | 	sub	fp, #12
1971c     4C 71 B0 FD | 	call	#__system___string_cmp
19720     00 FA 55 F2 | 	cmps	result1, #0 wc
19724     00 1E 26 C6 |  if_b	not	local01, #0
19728     A7 1E 62 FC | 	wrlong	local01, fp
1972c     0C 04 90 FD | 	jmp	#LR__2133
19730                 | LR__2120
19730                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
19730     08 4E 05 F1 | 	add	fp, #8
19734     A7 1E 02 FB | 	rdlong	local01, fp
19738     08 4E 85 F1 | 	sub	fp, #8
1973c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19740     14 4E 05 A1 |  if_e	add	fp, #20
19744     A7 24 02 AB |  if_e	rdlong	local04, fp
19748     14 4E 85 A1 |  if_e	sub	fp, #20
1974c     12 23 02 A6 |  if_e	mov	local03, local04
19750     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19754     2C 00 90 5D |  if_ne	jmp	#LR__2121
19758     00 1E 06 F6 | 	mov	local01, #0
1975c     A7 12 02 FB | 	rdlong	arg01, fp
19760     0C 4E 05 F1 | 	add	fp, #12
19764     A7 14 02 FB | 	rdlong	arg02, fp
19768     0C 4E 85 F1 | 	sub	fp, #12
1976c     01 16 06 F6 | 	mov	arg03, #1
19770     B8 A0 B0 FD | 	call	#__system___float_cmp
19774     00 FA 55 F2 | 	cmps	result1, #0 wc
19778     00 1E 26 C6 |  if_b	not	local01, #0
1977c     A7 1E 62 FC | 	wrlong	local01, fp
19780     B8 03 90 FD | 	jmp	#LR__2133
19784                 | LR__2121
19784                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
19784     08 4E 05 F1 | 	add	fp, #8
19788     A7 1E 02 FB | 	rdlong	local01, fp
1978c     08 4E 85 F1 | 	sub	fp, #8
19790     1E 1E 0E F2 | 	cmp	local01, #30 wz
19794     14 4E 05 A1 |  if_e	add	fp, #20
19798     A7 24 02 AB |  if_e	rdlong	local04, fp
1979c     14 4E 85 A1 |  if_e	sub	fp, #20
197a0     12 23 02 A6 |  if_e	mov	local03, local04
197a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
197a8     48 00 90 5D |  if_ne	jmp	#LR__2122
197ac     00 1E 06 F6 | 	mov	local01, #0
197b0     A7 20 02 FB | 	rdlong	local02, fp
197b4     0C 4E 05 F1 | 	add	fp, #12
197b8     A7 12 02 FB | 	rdlong	arg01, fp
197bc     0C 4E 85 F1 | 	sub	fp, #12
197c0     09 13 52 F6 | 	abs	arg01, arg01 wc
197c4     1F 26 C6 C9 |  if_b	decod	local05, #31
197c8     00 26 06 36 |  if_ae	mov	local05, #0
197cc     24 98 B0 FD | 	call	#__system___float_fromuns
197d0     13 FB 61 F5 | 	xor	result1, local05
197d4     FD 14 02 F6 | 	mov	arg02, result1
197d8     10 13 02 F6 | 	mov	arg01, local02
197dc     01 16 06 F6 | 	mov	arg03, #1
197e0     48 A0 B0 FD | 	call	#__system___float_cmp
197e4     00 FA 55 F2 | 	cmps	result1, #0 wc
197e8     00 1E 26 C6 |  if_b	not	local01, #0
197ec     A7 1E 62 FC | 	wrlong	local01, fp
197f0     48 03 90 FD | 	jmp	#LR__2133
197f4                 | LR__2122
197f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
197f4     08 4E 05 F1 | 	add	fp, #8
197f8     A7 1E 02 FB | 	rdlong	local01, fp
197fc     08 4E 85 F1 | 	sub	fp, #8
19800     1E 1E 0E F2 | 	cmp	local01, #30 wz
19804     14 4E 05 A1 |  if_e	add	fp, #20
19808     A7 24 02 AB |  if_e	rdlong	local04, fp
1980c     14 4E 85 A1 |  if_e	sub	fp, #20
19810     12 23 02 A6 |  if_e	mov	local03, local04
19814     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19818     38 00 90 5D |  if_ne	jmp	#LR__2123
1981c     00 1E 06 F6 | 	mov	local01, #0
19820     A7 20 02 FB | 	rdlong	local02, fp
19824     0C 4E 05 F1 | 	add	fp, #12
19828     A7 12 02 FB | 	rdlong	arg01, fp
1982c     0C 4E 85 F1 | 	sub	fp, #12
19830     C0 97 B0 FD | 	call	#__system___float_fromuns
19834     FD 14 02 F6 | 	mov	arg02, result1
19838     10 13 02 F6 | 	mov	arg01, local02
1983c     01 16 06 F6 | 	mov	arg03, #1
19840     E8 9F B0 FD | 	call	#__system___float_cmp
19844     00 FA 55 F2 | 	cmps	result1, #0 wc
19848     00 1E 26 C6 |  if_b	not	local01, #0
1984c     A7 1E 62 FC | 	wrlong	local01, fp
19850     E8 02 90 FD | 	jmp	#LR__2133
19854                 | LR__2123
19854                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
19854     08 4E 05 F1 | 	add	fp, #8
19858     A7 1E 02 FB | 	rdlong	local01, fp
1985c     08 4E 85 F1 | 	sub	fp, #8
19860     1C 1E 0E F2 | 	cmp	local01, #28 wz
19864     14 4E 05 A1 |  if_e	add	fp, #20
19868     A7 24 02 AB |  if_e	rdlong	local04, fp
1986c     14 4E 85 A1 |  if_e	sub	fp, #20
19870     12 23 02 A6 |  if_e	mov	local03, local04
19874     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19878     44 00 90 5D |  if_ne	jmp	#LR__2124
1987c     00 1E 06 F6 | 	mov	local01, #0
19880     A7 12 02 FB | 	rdlong	arg01, fp
19884     09 13 52 F6 | 	abs	arg01, arg01 wc
19888     1F 26 C6 C9 |  if_b	decod	local05, #31
1988c     00 26 06 36 |  if_ae	mov	local05, #0
19890     60 97 B0 FD | 	call	#__system___float_fromuns
19894     13 FB 61 F5 | 	xor	result1, local05
19898     FD 12 02 F6 | 	mov	arg01, result1
1989c     0C 4E 05 F1 | 	add	fp, #12
198a0     A7 14 02 FB | 	rdlong	arg02, fp
198a4     0C 4E 85 F1 | 	sub	fp, #12
198a8     01 16 06 F6 | 	mov	arg03, #1
198ac     7C 9F B0 FD | 	call	#__system___float_cmp
198b0     00 FA 55 F2 | 	cmps	result1, #0 wc
198b4     00 1E 26 C6 |  if_b	not	local01, #0
198b8     A7 1E 62 FC | 	wrlong	local01, fp
198bc     7C 02 90 FD | 	jmp	#LR__2133
198c0                 | LR__2124
198c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
198c0     08 4E 05 F1 | 	add	fp, #8
198c4     A7 1E 02 FB | 	rdlong	local01, fp
198c8     08 4E 85 F1 | 	sub	fp, #8
198cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
198d0     14 4E 05 A1 |  if_e	add	fp, #20
198d4     A7 24 02 AB |  if_e	rdlong	local04, fp
198d8     14 4E 85 A1 |  if_e	sub	fp, #20
198dc     12 23 02 A6 |  if_e	mov	local03, local04
198e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
198e4     20 00 90 5D |  if_ne	jmp	#LR__2125
198e8     A7 20 02 FB | 	rdlong	local02, fp
198ec     0C 4E 05 F1 | 	add	fp, #12
198f0     A7 22 02 FB | 	rdlong	local03, fp
198f4     0C 4E 85 F1 | 	sub	fp, #12
198f8     11 21 52 F2 | 	cmps	local02, local03 wc
198fc     0F 1F A2 F1 | 	subx	local01, local01
19900     A7 1E 62 FC | 	wrlong	local01, fp
19904     34 02 90 FD | 	jmp	#LR__2133
19908                 | LR__2125
19908                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
19908     08 4E 05 F1 | 	add	fp, #8
1990c     A7 1E 02 FB | 	rdlong	local01, fp
19910     08 4E 85 F1 | 	sub	fp, #8
19914     1C 1E 0E F2 | 	cmp	local01, #28 wz
19918     14 4E 05 A1 |  if_e	add	fp, #20
1991c     A7 24 02 AB |  if_e	rdlong	local04, fp
19920     14 4E 85 A1 |  if_e	sub	fp, #20
19924     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19928     20 00 90 5D |  if_ne	jmp	#LR__2126
1992c     A7 20 02 FB | 	rdlong	local02, fp
19930     0C 4E 05 F1 | 	add	fp, #12
19934     A7 22 02 FB | 	rdlong	local03, fp
19938     0C 4E 85 F1 | 	sub	fp, #12
1993c     11 21 52 F2 | 	cmps	local02, local03 wc
19940     0F 1F A2 F1 | 	subx	local01, local01
19944     A7 1E 62 FC | 	wrlong	local01, fp
19948     F0 01 90 FD | 	jmp	#LR__2133
1994c                 | LR__2126
1994c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1994c     08 4E 05 F1 | 	add	fp, #8
19950     A7 1E 02 FB | 	rdlong	local01, fp
19954     08 4E 85 F1 | 	sub	fp, #8
19958     1D 1E 0E F2 | 	cmp	local01, #29 wz
1995c     14 4E 05 A1 |  if_e	add	fp, #20
19960     A7 22 02 AB |  if_e	rdlong	local03, fp
19964     14 4E 85 A1 |  if_e	sub	fp, #20
19968     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1996c     34 00 90 5D |  if_ne	jmp	#LR__2127
19970     00 1E 06 F6 | 	mov	local01, #0
19974     A7 12 02 FB | 	rdlong	arg01, fp
19978     78 96 B0 FD | 	call	#__system___float_fromuns
1997c     FD 12 02 F6 | 	mov	arg01, result1
19980     0C 4E 05 F1 | 	add	fp, #12
19984     A7 14 02 FB | 	rdlong	arg02, fp
19988     0C 4E 85 F1 | 	sub	fp, #12
1998c     01 16 06 F6 | 	mov	arg03, #1
19990     98 9E B0 FD | 	call	#__system___float_cmp
19994     00 FA 55 F2 | 	cmps	result1, #0 wc
19998     00 1E 26 C6 |  if_b	not	local01, #0
1999c     A7 1E 62 FC | 	wrlong	local01, fp
199a0     98 01 90 FD | 	jmp	#LR__2133
199a4                 | LR__2127
199a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
199a4     08 4E 05 F1 | 	add	fp, #8
199a8     A7 1E 02 FB | 	rdlong	local01, fp
199ac     08 4E 85 F1 | 	sub	fp, #8
199b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
199b4     14 4E 05 A1 |  if_e	add	fp, #20
199b8     A7 22 02 AB |  if_e	rdlong	local03, fp
199bc     14 4E 85 A1 |  if_e	sub	fp, #20
199c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
199c4     20 00 90 5D |  if_ne	jmp	#LR__2128
199c8     A7 20 02 FB | 	rdlong	local02, fp
199cc     0C 4E 05 F1 | 	add	fp, #12
199d0     A7 22 02 FB | 	rdlong	local03, fp
199d4     0C 4E 85 F1 | 	sub	fp, #12
199d8     11 21 52 F2 | 	cmps	local02, local03 wc
199dc     0F 1F A2 F1 | 	subx	local01, local01
199e0     A7 1E 62 FC | 	wrlong	local01, fp
199e4     54 01 90 FD | 	jmp	#LR__2133
199e8                 | LR__2128
199e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
199e8     08 4E 05 F1 | 	add	fp, #8
199ec     A7 1E 02 FB | 	rdlong	local01, fp
199f0     08 4E 85 F1 | 	sub	fp, #8
199f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
199f8     14 4E 05 A1 |  if_e	add	fp, #20
199fc     A7 22 02 AB |  if_e	rdlong	local03, fp
19a00     14 4E 85 A1 |  if_e	sub	fp, #20
19a04     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19a08     20 00 90 5D |  if_ne	jmp	#LR__2129
19a0c     A7 20 02 FB | 	rdlong	local02, fp
19a10     0C 4E 05 F1 | 	add	fp, #12
19a14     A7 22 02 FB | 	rdlong	local03, fp
19a18     0C 4E 85 F1 | 	sub	fp, #12
19a1c     11 21 12 F2 | 	cmp	local02, local03 wc
19a20     0F 1F A2 F1 | 	subx	local01, local01
19a24     A7 1E 62 FC | 	wrlong	local01, fp
19a28     10 01 90 FD | 	jmp	#LR__2133
19a2c                 | LR__2129
19a2c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
19a2c     08 4E 05 F1 | 	add	fp, #8
19a30     A7 1E 02 FB | 	rdlong	local01, fp
19a34     08 4E 85 F1 | 	sub	fp, #8
19a38     2B 1E 0E F2 | 	cmp	local01, #43 wz
19a3c     14 4E 05 A1 |  if_e	add	fp, #20
19a40     A7 22 02 AB |  if_e	rdlong	local03, fp
19a44     14 4E 85 A1 |  if_e	sub	fp, #20
19a48     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19a4c     30 00 90 5D |  if_ne	jmp	#LR__2130
19a50     00 1E 06 F6 | 	mov	local01, #0
19a54     A7 12 02 FB | 	rdlong	arg01, fp
19a58     D8 1A BF FD | 	call	#_convertstring
19a5c     FD 12 02 F6 | 	mov	arg01, result1
19a60     0C 4E 05 F1 | 	add	fp, #12
19a64     A7 14 02 FB | 	rdlong	arg02, fp
19a68     0C 4E 85 F1 | 	sub	fp, #12
19a6c     FC 6D B0 FD | 	call	#__system___string_cmp
19a70     00 FA 55 F2 | 	cmps	result1, #0 wc
19a74     00 1E 26 C6 |  if_b	not	local01, #0
19a78     A7 1E 62 FC | 	wrlong	local01, fp
19a7c     BC 00 90 FD | 	jmp	#LR__2133
19a80                 | LR__2130
19a80                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
19a80     08 4E 05 F1 | 	add	fp, #8
19a84     A7 1E 02 FB | 	rdlong	local01, fp
19a88     08 4E 85 F1 | 	sub	fp, #8
19a8c     1F 1E 0E F2 | 	cmp	local01, #31 wz
19a90     14 4E 05 A1 |  if_e	add	fp, #20
19a94     A7 22 02 AB |  if_e	rdlong	local03, fp
19a98     14 4E 85 A1 |  if_e	sub	fp, #20
19a9c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19aa0     34 00 90 5D |  if_ne	jmp	#LR__2131
19aa4     00 1E 06 F6 | 	mov	local01, #0
19aa8     A7 20 02 FB | 	rdlong	local02, fp
19aac     0C 4E 05 F1 | 	add	fp, #12
19ab0     A7 12 02 FB | 	rdlong	arg01, fp
19ab4     0C 4E 85 F1 | 	sub	fp, #12
19ab8     78 1A BF FD | 	call	#_convertstring
19abc     FD 14 02 F6 | 	mov	arg02, result1
19ac0     10 13 02 F6 | 	mov	arg01, local02
19ac4     A4 6D B0 FD | 	call	#__system___string_cmp
19ac8     00 FA 55 F2 | 	cmps	result1, #0 wc
19acc     00 1E 26 C6 |  if_b	not	local01, #0
19ad0     A7 1E 62 FC | 	wrlong	local01, fp
19ad4     64 00 90 FD | 	jmp	#LR__2133
19ad8                 | LR__2131
19ad8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
19ad8     08 4E 05 F1 | 	add	fp, #8
19adc     A7 1E 02 FB | 	rdlong	local01, fp
19ae0     08 4E 85 F1 | 	sub	fp, #8
19ae4     2B 1E 0E F2 | 	cmp	local01, #43 wz
19ae8     14 4E 05 A1 |  if_e	add	fp, #20
19aec     A7 22 02 AB |  if_e	rdlong	local03, fp
19af0     14 4E 85 A1 |  if_e	sub	fp, #20
19af4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19af8     3C 00 90 5D |  if_ne	jmp	#LR__2132
19afc     00 1E 06 F6 | 	mov	local01, #0
19b00     A7 12 02 FB | 	rdlong	arg01, fp
19b04     2C 1A BF FD | 	call	#_convertstring
19b08     FD 20 02 F6 | 	mov	local02, result1
19b0c     0C 4E 05 F1 | 	add	fp, #12
19b10     A7 12 02 FB | 	rdlong	arg01, fp
19b14     0C 4E 85 F1 | 	sub	fp, #12
19b18     18 1A BF FD | 	call	#_convertstring
19b1c     FD 14 02 F6 | 	mov	arg02, result1
19b20     10 13 02 F6 | 	mov	arg01, local02
19b24     44 6D B0 FD | 	call	#__system___string_cmp
19b28     00 FA 55 F2 | 	cmps	result1, #0 wc
19b2c     00 1E 26 C6 |  if_b	not	local01, #0
19b30     A7 1E 62 FC | 	wrlong	local01, fp
19b34     04 00 90 FD | 	jmp	#LR__2133
19b38                 | LR__2132
19b38     A7 00 68 FC | 	wrlong	#0, fp
19b3c                 | LR__2133
19b3c     08 4E 05 F1 | 	add	fp, #8
19b40     A7 38 68 FC | 	wrlong	#28, fp
19b44     08 4E 85 F1 | 	sub	fp, #8
19b48     A7 12 02 F6 | 	mov	arg01, fp
19b4c     04 19 BF FD | 	call	#_push
19b50     A7 F0 03 F6 | 	mov	ptra, fp
19b54     B2 00 A0 FD | 	call	#popregs_
19b58                 | _do_lt_ret
19b58     2D 00 64 FD | 	ret
19b5c                 | 
19b5c                 | ' 
19b5c                 | ' '--------------------------------- minus (-)
19b5c                 | ' 
19b5c                 | ' sub do_minus
19b5c                 | _do_minus
19b5c     05 4A 05 F6 | 	mov	COUNT_, #5
19b60     A8 00 A0 FD | 	call	#pushregs_
19b64     18 F0 07 F1 | 	add	ptra, #24
19b68     50 18 BF FD | 	call	#_pop
19b6c     FD 1E 02 F6 | 	mov	local01, result1
19b70     FE 20 02 F6 | 	mov	local02, result2
19b74     FF 22 02 F6 | 	mov	local03, result3
19b78     0C 4E 05 F1 | 	add	fp, #12
19b7c     A7 1E 62 FC | 	wrlong	local01, fp
19b80     04 4E 05 F1 | 	add	fp, #4
19b84     A7 20 62 FC | 	wrlong	local02, fp
19b88     04 4E 05 F1 | 	add	fp, #4
19b8c     A7 22 62 FC | 	wrlong	local03, fp
19b90     14 4E 85 F1 | 	sub	fp, #20
19b94     24 18 BF FD | 	call	#_pop
19b98     FF 22 02 F6 | 	mov	local03, result3
19b9c     A7 FA 61 FC | 	wrlong	result1, fp
19ba0     04 4E 05 F1 | 	add	fp, #4
19ba4     A7 FC 61 FC | 	wrlong	result2, fp
19ba8     04 4E 05 F1 | 	add	fp, #4
19bac     A7 22 62 FC | 	wrlong	local03, fp
19bb0                 | ' 
19bb0                 | ' t2=pop()
19bb0                 | ' t1=pop()
19bb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
19bb0     08 4E 85 F1 | 	sub	fp, #8
19bb4     1D 22 0E F2 | 	cmp	local03, #29 wz
19bb8     14 4E 05 A1 |  if_e	add	fp, #20
19bbc     A7 24 02 AB |  if_e	rdlong	local04, fp
19bc0     14 4E 85 A1 |  if_e	sub	fp, #20
19bc4     12 23 02 A6 |  if_e	mov	local03, local04
19bc8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19bcc     5C 00 90 5D |  if_ne	jmp	#LR__2141
19bd0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
19bd0     0C 4E 05 F1 | 	add	fp, #12
19bd4     A7 1E 02 FB | 	rdlong	local01, fp
19bd8     0C 4E 85 F1 | 	sub	fp, #12
19bdc     A7 22 02 FB | 	rdlong	local03, fp
19be0     11 1F 12 F2 | 	cmp	local01, local03 wc
19be4     1C 00 90 3D |  if_ae	jmp	#LR__2140
19be8     A7 1E 02 FB | 	rdlong	local01, fp
19bec     0C 4E 05 F1 | 	add	fp, #12
19bf0     A7 20 02 FB | 	rdlong	local02, fp
19bf4     0C 4E 85 F1 | 	sub	fp, #12
19bf8     10 1F 82 F1 | 	sub	local01, local02
19bfc     A7 1E 62 FC | 	wrlong	local01, fp
19c00     F4 02 90 FD | 	jmp	#LR__2150
19c04                 | LR__2140
19c04     A7 1E 02 FB | 	rdlong	local01, fp
19c08     0C 4E 05 F1 | 	add	fp, #12
19c0c     A7 20 02 FB | 	rdlong	local02, fp
19c10     0C 4E 85 F1 | 	sub	fp, #12
19c14     10 1F 82 F1 | 	sub	local01, local02
19c18     A7 1E 62 FC | 	wrlong	local01, fp
19c1c     08 4E 05 F1 | 	add	fp, #8
19c20     A7 38 68 FC | 	wrlong	#28, fp
19c24     08 4E 85 F1 | 	sub	fp, #8
19c28     CC 02 90 FD | 	jmp	#LR__2150
19c2c                 | LR__2141
19c2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
19c2c     08 4E 05 F1 | 	add	fp, #8
19c30     A7 1E 02 FB | 	rdlong	local01, fp
19c34     08 4E 85 F1 | 	sub	fp, #8
19c38     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c3c     14 4E 05 A1 |  if_e	add	fp, #20
19c40     A7 24 02 AB |  if_e	rdlong	local04, fp
19c44     14 4E 85 A1 |  if_e	sub	fp, #20
19c48     12 23 02 A6 |  if_e	mov	local03, local04
19c4c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19c50     28 00 90 5D |  if_ne	jmp	#LR__2142
19c54     A7 1E 02 FB | 	rdlong	local01, fp
19c58     0C 4E 05 F1 | 	add	fp, #12
19c5c     A7 20 02 FB | 	rdlong	local02, fp
19c60     0C 4E 85 F1 | 	sub	fp, #12
19c64     10 1F 82 F1 | 	sub	local01, local02
19c68     A7 1E 62 FC | 	wrlong	local01, fp
19c6c     08 4E 05 F1 | 	add	fp, #8
19c70     A7 38 68 FC | 	wrlong	#28, fp
19c74     08 4E 85 F1 | 	sub	fp, #8
19c78     7C 02 90 FD | 	jmp	#LR__2150
19c7c                 | LR__2142
19c7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
19c7c     08 4E 05 F1 | 	add	fp, #8
19c80     A7 1E 02 FB | 	rdlong	local01, fp
19c84     08 4E 85 F1 | 	sub	fp, #8
19c88     1D 1E 0E F2 | 	cmp	local01, #29 wz
19c8c     14 4E 05 A1 |  if_e	add	fp, #20
19c90     A7 24 02 AB |  if_e	rdlong	local04, fp
19c94     14 4E 85 A1 |  if_e	sub	fp, #20
19c98     12 23 02 A6 |  if_e	mov	local03, local04
19c9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19ca0     34 00 90 5D |  if_ne	jmp	#LR__2143
19ca4     A7 12 02 FB | 	rdlong	arg01, fp
19ca8     48 93 B0 FD | 	call	#__system___float_fromuns
19cac     FD 12 02 F6 | 	mov	arg01, result1
19cb0     0C 4E 05 F1 | 	add	fp, #12
19cb4     A7 14 02 FB | 	rdlong	arg02, fp
19cb8     0C 4E 85 F1 | 	sub	fp, #12
19cbc     1F 14 E6 F4 | 	bitnot	arg02, #31
19cc0     64 93 B0 FD | 	call	#__system___float_add
19cc4     A7 FA 61 FC | 	wrlong	result1, fp
19cc8     08 4E 05 F1 | 	add	fp, #8
19ccc     A7 3C 68 FC | 	wrlong	#30, fp
19cd0     08 4E 85 F1 | 	sub	fp, #8
19cd4     20 02 90 FD | 	jmp	#LR__2150
19cd8                 | LR__2143
19cd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
19cd8     08 4E 05 F1 | 	add	fp, #8
19cdc     A7 1E 02 FB | 	rdlong	local01, fp
19ce0     08 4E 85 F1 | 	sub	fp, #8
19ce4     1C 1E 0E F2 | 	cmp	local01, #28 wz
19ce8     14 4E 05 A1 |  if_e	add	fp, #20
19cec     A7 24 02 AB |  if_e	rdlong	local04, fp
19cf0     14 4E 85 A1 |  if_e	sub	fp, #20
19cf4     12 23 02 A6 |  if_e	mov	local03, local04
19cf8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19cfc     1C 00 90 5D |  if_ne	jmp	#LR__2144
19d00     A7 1E 02 FB | 	rdlong	local01, fp
19d04     0C 4E 05 F1 | 	add	fp, #12
19d08     A7 20 02 FB | 	rdlong	local02, fp
19d0c     0C 4E 85 F1 | 	sub	fp, #12
19d10     10 1F 82 F1 | 	sub	local01, local02
19d14     A7 1E 62 FC | 	wrlong	local01, fp
19d18     DC 01 90 FD | 	jmp	#LR__2150
19d1c                 | LR__2144
19d1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
19d1c     08 4E 05 F1 | 	add	fp, #8
19d20     A7 1E 02 FB | 	rdlong	local01, fp
19d24     08 4E 85 F1 | 	sub	fp, #8
19d28     1C 1E 0E F2 | 	cmp	local01, #28 wz
19d2c     14 4E 05 A1 |  if_e	add	fp, #20
19d30     A7 24 02 AB |  if_e	rdlong	local04, fp
19d34     14 4E 85 A1 |  if_e	sub	fp, #20
19d38     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
19d3c     1C 00 90 5D |  if_ne	jmp	#LR__2145
19d40     A7 1E 02 FB | 	rdlong	local01, fp
19d44     0C 4E 05 F1 | 	add	fp, #12
19d48     A7 20 02 FB | 	rdlong	local02, fp
19d4c     0C 4E 85 F1 | 	sub	fp, #12
19d50     10 1F 82 F1 | 	sub	local01, local02
19d54     A7 1E 62 FC | 	wrlong	local01, fp
19d58     9C 01 90 FD | 	jmp	#LR__2150
19d5c                 | LR__2145
19d5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
19d5c     08 4E 05 F1 | 	add	fp, #8
19d60     A7 1E 02 FB | 	rdlong	local01, fp
19d64     08 4E 85 F1 | 	sub	fp, #8
19d68     1C 1E 0E F2 | 	cmp	local01, #28 wz
19d6c     14 4E 05 A1 |  if_e	add	fp, #20
19d70     A7 22 02 AB |  if_e	rdlong	local03, fp
19d74     14 4E 85 A1 |  if_e	sub	fp, #20
19d78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19d7c     44 00 90 5D |  if_ne	jmp	#LR__2146
19d80     A7 12 02 FB | 	rdlong	arg01, fp
19d84     09 13 52 F6 | 	abs	arg01, arg01 wc
19d88     1F 26 C6 C9 |  if_b	decod	local05, #31
19d8c     00 26 06 36 |  if_ae	mov	local05, #0
19d90     60 92 B0 FD | 	call	#__system___float_fromuns
19d94     13 FB 61 F5 | 	xor	result1, local05
19d98     FD 12 02 F6 | 	mov	arg01, result1
19d9c     0C 4E 05 F1 | 	add	fp, #12
19da0     A7 14 02 FB | 	rdlong	arg02, fp
19da4     0C 4E 85 F1 | 	sub	fp, #12
19da8     1F 14 E6 F4 | 	bitnot	arg02, #31
19dac     78 92 B0 FD | 	call	#__system___float_add
19db0     A7 FA 61 FC | 	wrlong	result1, fp
19db4     08 4E 05 F1 | 	add	fp, #8
19db8     A7 3C 68 FC | 	wrlong	#30, fp
19dbc     08 4E 85 F1 | 	sub	fp, #8
19dc0     34 01 90 FD | 	jmp	#LR__2150
19dc4                 | LR__2146
19dc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
19dc4     08 4E 05 F1 | 	add	fp, #8
19dc8     A7 1E 02 FB | 	rdlong	local01, fp
19dcc     08 4E 85 F1 | 	sub	fp, #8
19dd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
19dd4     14 4E 05 A1 |  if_e	add	fp, #20
19dd8     A7 22 02 AB |  if_e	rdlong	local03, fp
19ddc     14 4E 85 A1 |  if_e	sub	fp, #20
19de0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19de4     2C 00 90 5D |  if_ne	jmp	#LR__2147
19de8     A7 1E 02 FB | 	rdlong	local01, fp
19dec     0C 4E 05 F1 | 	add	fp, #12
19df0     A7 12 02 FB | 	rdlong	arg01, fp
19df4     0C 4E 85 F1 | 	sub	fp, #12
19df8     F8 91 B0 FD | 	call	#__system___float_fromuns
19dfc     FD 14 02 F6 | 	mov	arg02, result1
19e00     0F 13 02 F6 | 	mov	arg01, local01
19e04     1F 14 E6 F4 | 	bitnot	arg02, #31
19e08     1C 92 B0 FD | 	call	#__system___float_add
19e0c     A7 FA 61 FC | 	wrlong	result1, fp
19e10     E4 00 90 FD | 	jmp	#LR__2150
19e14                 | LR__2147
19e14                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
19e14     08 4E 05 F1 | 	add	fp, #8
19e18     A7 1E 02 FB | 	rdlong	local01, fp
19e1c     08 4E 85 F1 | 	sub	fp, #8
19e20     1E 1E 0E F2 | 	cmp	local01, #30 wz
19e24     14 4E 05 A1 |  if_e	add	fp, #20
19e28     A7 22 02 AB |  if_e	rdlong	local03, fp
19e2c     14 4E 85 A1 |  if_e	sub	fp, #20
19e30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19e34     3C 00 90 5D |  if_ne	jmp	#LR__2148
19e38     A7 1E 02 FB | 	rdlong	local01, fp
19e3c     0C 4E 05 F1 | 	add	fp, #12
19e40     A7 12 02 FB | 	rdlong	arg01, fp
19e44     0C 4E 85 F1 | 	sub	fp, #12
19e48     09 13 52 F6 | 	abs	arg01, arg01 wc
19e4c     1F 26 C6 C9 |  if_b	decod	local05, #31
19e50     00 26 06 36 |  if_ae	mov	local05, #0
19e54     9C 91 B0 FD | 	call	#__system___float_fromuns
19e58     13 FB 61 F5 | 	xor	result1, local05
19e5c     FD 14 02 F6 | 	mov	arg02, result1
19e60     0F 13 02 F6 | 	mov	arg01, local01
19e64     1F 14 E6 F4 | 	bitnot	arg02, #31
19e68     BC 91 B0 FD | 	call	#__system___float_add
19e6c     A7 FA 61 FC | 	wrlong	result1, fp
19e70     84 00 90 FD | 	jmp	#LR__2150
19e74                 | LR__2148
19e74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
19e74     08 4E 05 F1 | 	add	fp, #8
19e78     A7 1E 02 FB | 	rdlong	local01, fp
19e7c     08 4E 85 F1 | 	sub	fp, #8
19e80     1E 1E 0E F2 | 	cmp	local01, #30 wz
19e84     14 4E 05 A1 |  if_e	add	fp, #20
19e88     A7 22 02 AB |  if_e	rdlong	local03, fp
19e8c     14 4E 85 A1 |  if_e	sub	fp, #20
19e90     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19e94     20 00 90 5D |  if_ne	jmp	#LR__2149
19e98     A7 12 02 FB | 	rdlong	arg01, fp
19e9c     0C 4E 05 F1 | 	add	fp, #12
19ea0     A7 14 02 FB | 	rdlong	arg02, fp
19ea4     0C 4E 85 F1 | 	sub	fp, #12
19ea8     1F 14 E6 F4 | 	bitnot	arg02, #31
19eac     78 91 B0 FD | 	call	#__system___float_add
19eb0     A7 FA 61 FC | 	wrlong	result1, fp
19eb4     40 00 90 FD | 	jmp	#LR__2150
19eb8                 | LR__2149
19eb8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
19eb8     08 4E 05 F1 | 	add	fp, #8
19ebc     A7 1E 02 FB | 	rdlong	local01, fp
19ec0     08 4E 85 F1 | 	sub	fp, #8
19ec4     1F 1E 0E F2 | 	cmp	local01, #31 wz
19ec8     14 4E 05 51 |  if_ne	add	fp, #20
19ecc     A7 22 02 5B |  if_ne	rdlong	local03, fp
19ed0     14 4E 85 51 |  if_ne	sub	fp, #20
19ed4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
19ed8     A7 06 68 AC |  if_e	wrlong	#3, fp
19edc     08 4E 05 A1 |  if_e	add	fp, #8
19ee0     A7 FE 69 AC |  if_e	wrlong	#255, fp
19ee4     08 4E 85 A1 |  if_e	sub	fp, #8
19ee8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
19eec     08 4E 05 51 |  if_ne	add	fp, #8
19ef0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
19ef4     08 4E 85 51 |  if_ne	sub	fp, #8
19ef8                 | LR__2150
19ef8     A7 12 02 F6 | 	mov	arg01, fp
19efc     54 15 BF FD | 	call	#_push
19f00     A7 F0 03 F6 | 	mov	ptra, fp
19f04     B2 00 A0 FD | 	call	#popregs_
19f08                 | _do_minus_ret
19f08     2D 00 64 FD | 	ret
19f0c                 | 
19f0c                 | ' 
19f0c                 | ' '--------------------------------- negative (-), one argument negative
19f0c                 | ' 
19f0c                 | ' sub do_negative
19f0c                 | _do_negative
19f0c     02 4A 05 F6 | 	mov	COUNT_, #2
19f10     A8 00 A0 FD | 	call	#pushregs_
19f14     0C F0 07 F1 | 	add	ptra, #12
19f18     A0 14 BF FD | 	call	#_pop
19f1c     FF 1E 02 F6 | 	mov	local01, result3
19f20     A7 FA 61 FC | 	wrlong	result1, fp
19f24     04 4E 05 F1 | 	add	fp, #4
19f28     A7 FC 61 FC | 	wrlong	result2, fp
19f2c     04 4E 05 F1 | 	add	fp, #4
19f30     A7 1E 62 FC | 	wrlong	local01, fp
19f34                 | ' 
19f34                 | ' t1=pop()
19f34                 | ' if t1.result_type=result_int then 
19f34     08 4E 85 F1 | 	sub	fp, #8
19f38     1C 1E 0E F2 | 	cmp	local01, #28 wz
19f3c     A7 20 02 AB |  if_e	rdlong	local02, fp
19f40     10 1F 62 A6 |  if_e	neg	local01, local02
19f44     A7 1E 62 AC |  if_e	wrlong	local01, fp
19f48     5C 00 90 AD |  if_e	jmp	#LR__2162
19f4c     08 4E 05 F1 | 	add	fp, #8
19f50     A7 1E 02 FB | 	rdlong	local01, fp
19f54     08 4E 85 F1 | 	sub	fp, #8
19f58     1D 1E 0E F2 | 	cmp	local01, #29 wz
19f5c     1C 00 90 5D |  if_ne	jmp	#LR__2160
19f60     A7 20 02 FB | 	rdlong	local02, fp
19f64     10 1F 62 F6 | 	neg	local01, local02
19f68     A7 1E 62 FC | 	wrlong	local01, fp
19f6c     08 4E 05 F1 | 	add	fp, #8
19f70     A7 38 68 FC | 	wrlong	#28, fp
19f74     08 4E 85 F1 | 	sub	fp, #8
19f78     2C 00 90 FD | 	jmp	#LR__2161
19f7c                 | LR__2160
19f7c     08 4E 05 F1 | 	add	fp, #8
19f80     A7 1E 02 FB | 	rdlong	local01, fp
19f84     08 4E 85 F1 | 	sub	fp, #8
19f88     1E 1E 0E F2 | 	cmp	local01, #30 wz
19f8c     A7 FA 01 AB |  if_e	rdlong	result1, fp
19f90     1F FA E5 A4 |  if_e	bitnot	result1, #31
19f94     A7 FA 61 AC |  if_e	wrlong	result1, fp
19f98     08 4E 05 51 |  if_ne	add	fp, #8
19f9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
19fa0     08 4E 85 51 |  if_ne	sub	fp, #8
19fa4     A7 50 68 5C |  if_ne	wrlong	#40, fp
19fa8                 | LR__2161
19fa8                 | LR__2162
19fa8     A7 12 02 F6 | 	mov	arg01, fp
19fac     A4 14 BF FD | 	call	#_push
19fb0     A7 F0 03 F6 | 	mov	ptra, fp
19fb4     B2 00 A0 FD | 	call	#popregs_
19fb8                 | _do_negative_ret
19fb8     2D 00 64 FD | 	ret
19fbc                 | 
19fbc                 | ' 
19fbc                 | ' '--------------------------------- MOD (modulo)
19fbc                 | ' 
19fbc                 | ' sub do_mod 
19fbc                 | _do_mod
19fbc     01 4A 05 F6 | 	mov	COUNT_, #1
19fc0     A8 00 A0 FD | 	call	#pushregs_
19fc4     18 F0 07 F1 | 	add	ptra, #24
19fc8     F0 13 BF FD | 	call	#_pop
19fcc     FD 7E 02 F6 | 	mov	muldivb_, result1
19fd0     FE 7C 02 F6 | 	mov	muldiva_, result2
19fd4     FF 1E 02 F6 | 	mov	local01, result3
19fd8     0C 4E 05 F1 | 	add	fp, #12
19fdc     A7 7E 62 FC | 	wrlong	muldivb_, fp
19fe0     04 4E 05 F1 | 	add	fp, #4
19fe4     A7 7C 62 FC | 	wrlong	muldiva_, fp
19fe8     04 4E 05 F1 | 	add	fp, #4
19fec     A7 1E 62 FC | 	wrlong	local01, fp
19ff0     14 4E 85 F1 | 	sub	fp, #20
19ff4     C4 13 BF FD | 	call	#_pop
19ff8     A7 FA 61 FC | 	wrlong	result1, fp
19ffc     04 4E 05 F1 | 	add	fp, #4
1a000     A7 FC 61 FC | 	wrlong	result2, fp
1a004     04 4E 05 F1 | 	add	fp, #4
1a008     A7 FE 61 FC | 	wrlong	result3, fp
1a00c                 | ' 
1a00c                 | ' t2=pop()
1a00c                 | ' t1=pop()
1a00c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1a00c     08 4E 85 F1 | 	sub	fp, #8
1a010     1F FE 0D F2 | 	cmp	result3, #31 wz
1a014     14 4E 05 51 |  if_ne	add	fp, #20
1a018     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a01c     14 4E 85 51 |  if_ne	sub	fp, #20
1a020     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1a024     A7 14 68 AC |  if_e	wrlong	#10, fp
1a028     08 4E 05 A1 |  if_e	add	fp, #8
1a02c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a030     08 4E 85 A1 |  if_e	sub	fp, #8
1a034     90 01 90 AD |  if_e	jmp	#LR__2176
1a038                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1a038     08 4E 05 F1 | 	add	fp, #8
1a03c     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a040     08 4E 85 F1 | 	sub	fp, #8
1a044     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1a048     1C 00 90 5D |  if_ne	jmp	#LR__2170
1a04c     08 4E 05 F1 | 	add	fp, #8
1a050     A7 38 68 FC | 	wrlong	#28, fp
1a054     08 4E 85 F1 | 	sub	fp, #8
1a058     A7 12 02 FB | 	rdlong	arg01, fp
1a05c     00 14 06 F6 | 	mov	arg02, #0
1a060     5C 98 B0 FD | 	call	#__system___float_tointeger
1a064     A7 FA 61 FC | 	wrlong	result1, fp
1a068                 | LR__2170
1a068                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1a068     14 4E 05 F1 | 	add	fp, #20
1a06c     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a070     14 4E 85 F1 | 	sub	fp, #20
1a074     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1a078     28 00 90 5D |  if_ne	jmp	#LR__2171
1a07c     14 4E 05 F1 | 	add	fp, #20
1a080     A7 38 68 FC | 	wrlong	#28, fp
1a084     08 4E 85 F1 | 	sub	fp, #8
1a088     A7 12 02 FB | 	rdlong	arg01, fp
1a08c     0C 4E 85 F1 | 	sub	fp, #12
1a090     00 14 06 F6 | 	mov	arg02, #0
1a094     28 98 B0 FD | 	call	#__system___float_tointeger
1a098     0C 4E 05 F1 | 	add	fp, #12
1a09c     A7 FA 61 FC | 	wrlong	result1, fp
1a0a0     0C 4E 85 F1 | 	sub	fp, #12
1a0a4                 | LR__2171
1a0a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1a0a4     08 4E 05 F1 | 	add	fp, #8
1a0a8     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a0ac     08 4E 85 F1 | 	sub	fp, #8
1a0b0     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
1a0b4     14 4E 05 A1 |  if_e	add	fp, #20
1a0b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a0bc     14 4E 85 A1 |  if_e	sub	fp, #20
1a0c0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1a0c4     20 00 90 5D |  if_ne	jmp	#LR__2172
1a0c8     0C 4E 05 F1 | 	add	fp, #12
1a0cc     A7 1E 02 FB | 	rdlong	local01, fp
1a0d0     0C 4E 85 F1 | 	sub	fp, #12
1a0d4     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a0d8     0F 7F 12 FD | 	qdiv	muldivb_, local01
1a0dc     19 1E 62 FD | 	getqy	local01
1a0e0     A7 1E 62 FC | 	wrlong	local01, fp
1a0e4     E0 00 90 FD | 	jmp	#LR__2176
1a0e8                 | LR__2172
1a0e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1a0e8     08 4E 05 F1 | 	add	fp, #8
1a0ec     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a0f0     08 4E 85 F1 | 	sub	fp, #8
1a0f4     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
1a0f8     14 4E 05 A1 |  if_e	add	fp, #20
1a0fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a100     14 4E 85 A1 |  if_e	sub	fp, #20
1a104     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1a108     2C 00 90 5D |  if_ne	jmp	#LR__2173
1a10c     0C 4E 05 F1 | 	add	fp, #12
1a110     A7 1E 02 FB | 	rdlong	local01, fp
1a114     0C 4E 85 F1 | 	sub	fp, #12
1a118     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a11c     0F 7F 12 FD | 	qdiv	muldivb_, local01
1a120     19 1E 62 FD | 	getqy	local01
1a124     A7 1E 62 FC | 	wrlong	local01, fp
1a128     08 4E 05 F1 | 	add	fp, #8
1a12c     A7 38 68 FC | 	wrlong	#28, fp
1a130     08 4E 85 F1 | 	sub	fp, #8
1a134     90 00 90 FD | 	jmp	#LR__2176
1a138                 | LR__2173
1a138                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1a138     08 4E 05 F1 | 	add	fp, #8
1a13c     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a140     08 4E 85 F1 | 	sub	fp, #8
1a144     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1a148     14 4E 05 A1 |  if_e	add	fp, #20
1a14c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a150     14 4E 85 A1 |  if_e	sub	fp, #20
1a154     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1a158     1C 00 90 5D |  if_ne	jmp	#LR__2174
1a15c     A7 7C 02 FB | 	rdlong	muldiva_, fp
1a160     0C 4E 05 F1 | 	add	fp, #12
1a164     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a168     0C 4E 85 F1 | 	sub	fp, #12
1a16c     BA 00 A0 FD | 	call	#divide_
1a170     A7 7C 62 FC | 	wrlong	muldiva_, fp
1a174     50 00 90 FD | 	jmp	#LR__2176
1a178                 | LR__2174
1a178                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1a178     08 4E 05 F1 | 	add	fp, #8
1a17c     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a180     08 4E 85 F1 | 	sub	fp, #8
1a184     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1a188     14 4E 05 A1 |  if_e	add	fp, #20
1a18c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a190     14 4E 85 A1 |  if_e	sub	fp, #20
1a194     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1a198     1C 00 90 5D |  if_ne	jmp	#LR__2175
1a19c     A7 7C 02 FB | 	rdlong	muldiva_, fp
1a1a0     0C 4E 05 F1 | 	add	fp, #12
1a1a4     A7 7E 02 FB | 	rdlong	muldivb_, fp
1a1a8     0C 4E 85 F1 | 	sub	fp, #12
1a1ac     BA 00 A0 FD | 	call	#divide_
1a1b0     A7 7C 62 FC | 	wrlong	muldiva_, fp
1a1b4     10 00 90 FD | 	jmp	#LR__2176
1a1b8                 | LR__2175
1a1b8     A7 16 68 FC | 	wrlong	#11, fp
1a1bc     08 4E 05 F1 | 	add	fp, #8
1a1c0     A7 FE 69 FC | 	wrlong	#255, fp
1a1c4     08 4E 85 F1 | 	sub	fp, #8
1a1c8                 | LR__2176
1a1c8     A7 12 02 F6 | 	mov	arg01, fp
1a1cc     84 12 BF FD | 	call	#_push
1a1d0     A7 F0 03 F6 | 	mov	ptra, fp
1a1d4     B2 00 A0 FD | 	call	#popregs_
1a1d8                 | _do_mod_ret
1a1d8     2D 00 64 FD | 	ret
1a1dc                 | 
1a1dc                 | ' 
1a1dc                 | ' '--------------------------------- mul (*)
1a1dc                 | ' 
1a1dc                 | ' sub do_mul
1a1dc                 | _do_mul
1a1dc     05 4A 05 F6 | 	mov	COUNT_, #5
1a1e0     A8 00 A0 FD | 	call	#pushregs_
1a1e4     18 F0 07 F1 | 	add	ptra, #24
1a1e8     D0 11 BF FD | 	call	#_pop
1a1ec     FD 1E 02 F6 | 	mov	local01, result1
1a1f0     FE 20 02 F6 | 	mov	local02, result2
1a1f4     FF 22 02 F6 | 	mov	local03, result3
1a1f8     0C 4E 05 F1 | 	add	fp, #12
1a1fc     A7 1E 62 FC | 	wrlong	local01, fp
1a200     04 4E 05 F1 | 	add	fp, #4
1a204     A7 20 62 FC | 	wrlong	local02, fp
1a208     04 4E 05 F1 | 	add	fp, #4
1a20c     A7 22 62 FC | 	wrlong	local03, fp
1a210     14 4E 85 F1 | 	sub	fp, #20
1a214     A4 11 BF FD | 	call	#_pop
1a218     FF 22 02 F6 | 	mov	local03, result3
1a21c     A7 FA 61 FC | 	wrlong	result1, fp
1a220     04 4E 05 F1 | 	add	fp, #4
1a224     A7 FC 61 FC | 	wrlong	result2, fp
1a228     04 4E 05 F1 | 	add	fp, #4
1a22c     A7 22 62 FC | 	wrlong	local03, fp
1a230                 | ' 
1a230                 | ' t2=pop()
1a230                 | ' t1=pop()
1a230                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1a230     08 4E 85 F1 | 	sub	fp, #8
1a234     1D 22 0E F2 | 	cmp	local03, #29 wz
1a238     14 4E 05 A1 |  if_e	add	fp, #20
1a23c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a240     14 4E 85 A1 |  if_e	sub	fp, #20
1a244     12 23 02 A6 |  if_e	mov	local03, local04
1a248     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a24c     20 00 90 5D |  if_ne	jmp	#LR__2180
1a250     A7 20 02 FB | 	rdlong	local02, fp
1a254     0C 4E 05 F1 | 	add	fp, #12
1a258     A7 22 02 FB | 	rdlong	local03, fp
1a25c     11 21 02 FD | 	qmul	local02, local03
1a260     0C 4E 85 F1 | 	sub	fp, #12
1a264     18 1E 62 FD | 	getqx	local01
1a268     A7 1E 62 FC | 	wrlong	local01, fp
1a26c     C4 02 90 FD | 	jmp	#LR__2189
1a270                 | LR__2180
1a270                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1a270     08 4E 05 F1 | 	add	fp, #8
1a274     A7 1E 02 FB | 	rdlong	local01, fp
1a278     08 4E 85 F1 | 	sub	fp, #8
1a27c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a280     14 4E 05 A1 |  if_e	add	fp, #20
1a284     A7 24 02 AB |  if_e	rdlong	local04, fp
1a288     14 4E 85 A1 |  if_e	sub	fp, #20
1a28c     12 23 02 A6 |  if_e	mov	local03, local04
1a290     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a294     2C 00 90 5D |  if_ne	jmp	#LR__2181
1a298     A7 20 02 FB | 	rdlong	local02, fp
1a29c     0C 4E 05 F1 | 	add	fp, #12
1a2a0     A7 22 02 FB | 	rdlong	local03, fp
1a2a4     11 21 02 FD | 	qmul	local02, local03
1a2a8     0C 4E 85 F1 | 	sub	fp, #12
1a2ac     18 1E 62 FD | 	getqx	local01
1a2b0     A7 1E 62 FC | 	wrlong	local01, fp
1a2b4     08 4E 05 F1 | 	add	fp, #8
1a2b8     A7 38 68 FC | 	wrlong	#28, fp
1a2bc     08 4E 85 F1 | 	sub	fp, #8
1a2c0     70 02 90 FD | 	jmp	#LR__2189
1a2c4                 | LR__2181
1a2c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1a2c4     08 4E 05 F1 | 	add	fp, #8
1a2c8     A7 1E 02 FB | 	rdlong	local01, fp
1a2cc     08 4E 85 F1 | 	sub	fp, #8
1a2d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a2d4     14 4E 05 A1 |  if_e	add	fp, #20
1a2d8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a2dc     14 4E 85 A1 |  if_e	sub	fp, #20
1a2e0     12 23 02 A6 |  if_e	mov	local03, local04
1a2e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a2e8     30 00 90 5D |  if_ne	jmp	#LR__2182
1a2ec     A7 12 02 FB | 	rdlong	arg01, fp
1a2f0     00 8D B0 FD | 	call	#__system___float_fromuns
1a2f4     FD 12 02 F6 | 	mov	arg01, result1
1a2f8     0C 4E 05 F1 | 	add	fp, #12
1a2fc     A7 14 02 FB | 	rdlong	arg02, fp
1a300     0C 4E 85 F1 | 	sub	fp, #12
1a304     F0 90 B0 FD | 	call	#__system___float_mul
1a308     A7 FA 61 FC | 	wrlong	result1, fp
1a30c     08 4E 05 F1 | 	add	fp, #8
1a310     A7 3C 68 FC | 	wrlong	#30, fp
1a314     08 4E 85 F1 | 	sub	fp, #8
1a318     18 02 90 FD | 	jmp	#LR__2189
1a31c                 | LR__2182
1a31c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1a31c     08 4E 05 F1 | 	add	fp, #8
1a320     A7 1E 02 FB | 	rdlong	local01, fp
1a324     08 4E 85 F1 | 	sub	fp, #8
1a328     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a32c     14 4E 05 A1 |  if_e	add	fp, #20
1a330     A7 24 02 AB |  if_e	rdlong	local04, fp
1a334     14 4E 85 A1 |  if_e	sub	fp, #20
1a338     12 23 02 A6 |  if_e	mov	local03, local04
1a33c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a340     20 00 90 5D |  if_ne	jmp	#LR__2183
1a344     A7 20 02 FB | 	rdlong	local02, fp
1a348     0C 4E 05 F1 | 	add	fp, #12
1a34c     A7 22 02 FB | 	rdlong	local03, fp
1a350     11 21 02 FD | 	qmul	local02, local03
1a354     0C 4E 85 F1 | 	sub	fp, #12
1a358     18 1E 62 FD | 	getqx	local01
1a35c     A7 1E 62 FC | 	wrlong	local01, fp
1a360     D0 01 90 FD | 	jmp	#LR__2189
1a364                 | LR__2183
1a364                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1a364     08 4E 05 F1 | 	add	fp, #8
1a368     A7 1E 02 FB | 	rdlong	local01, fp
1a36c     08 4E 85 F1 | 	sub	fp, #8
1a370     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a374     14 4E 05 A1 |  if_e	add	fp, #20
1a378     A7 24 02 AB |  if_e	rdlong	local04, fp
1a37c     14 4E 85 A1 |  if_e	sub	fp, #20
1a380     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1a384     20 00 90 5D |  if_ne	jmp	#LR__2184
1a388     A7 20 02 FB | 	rdlong	local02, fp
1a38c     0C 4E 05 F1 | 	add	fp, #12
1a390     A7 22 02 FB | 	rdlong	local03, fp
1a394     11 21 02 FD | 	qmul	local02, local03
1a398     0C 4E 85 F1 | 	sub	fp, #12
1a39c     18 1E 62 FD | 	getqx	local01
1a3a0     A7 1E 62 FC | 	wrlong	local01, fp
1a3a4     8C 01 90 FD | 	jmp	#LR__2189
1a3a8                 | LR__2184
1a3a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1a3a8     08 4E 05 F1 | 	add	fp, #8
1a3ac     A7 1E 02 FB | 	rdlong	local01, fp
1a3b0     08 4E 85 F1 | 	sub	fp, #8
1a3b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a3b8     14 4E 05 A1 |  if_e	add	fp, #20
1a3bc     A7 22 02 AB |  if_e	rdlong	local03, fp
1a3c0     14 4E 85 A1 |  if_e	sub	fp, #20
1a3c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a3c8     40 00 90 5D |  if_ne	jmp	#LR__2185
1a3cc     A7 12 02 FB | 	rdlong	arg01, fp
1a3d0     09 13 52 F6 | 	abs	arg01, arg01 wc
1a3d4     1F 26 C6 C9 |  if_b	decod	local05, #31
1a3d8     00 26 06 36 |  if_ae	mov	local05, #0
1a3dc     14 8C B0 FD | 	call	#__system___float_fromuns
1a3e0     13 FB 61 F5 | 	xor	result1, local05
1a3e4     FD 12 02 F6 | 	mov	arg01, result1
1a3e8     0C 4E 05 F1 | 	add	fp, #12
1a3ec     A7 14 02 FB | 	rdlong	arg02, fp
1a3f0     0C 4E 85 F1 | 	sub	fp, #12
1a3f4     00 90 B0 FD | 	call	#__system___float_mul
1a3f8     A7 FA 61 FC | 	wrlong	result1, fp
1a3fc     08 4E 05 F1 | 	add	fp, #8
1a400     A7 3C 68 FC | 	wrlong	#30, fp
1a404     08 4E 85 F1 | 	sub	fp, #8
1a408     28 01 90 FD | 	jmp	#LR__2189
1a40c                 | LR__2185
1a40c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1a40c     08 4E 05 F1 | 	add	fp, #8
1a410     A7 1E 02 FB | 	rdlong	local01, fp
1a414     08 4E 85 F1 | 	sub	fp, #8
1a418     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a41c     14 4E 05 A1 |  if_e	add	fp, #20
1a420     A7 22 02 AB |  if_e	rdlong	local03, fp
1a424     14 4E 85 A1 |  if_e	sub	fp, #20
1a428     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a42c     28 00 90 5D |  if_ne	jmp	#LR__2186
1a430     A7 1E 02 FB | 	rdlong	local01, fp
1a434     0C 4E 05 F1 | 	add	fp, #12
1a438     A7 12 02 FB | 	rdlong	arg01, fp
1a43c     0C 4E 85 F1 | 	sub	fp, #12
1a440     B0 8B B0 FD | 	call	#__system___float_fromuns
1a444     FD 14 02 F6 | 	mov	arg02, result1
1a448     0F 13 02 F6 | 	mov	arg01, local01
1a44c     A8 8F B0 FD | 	call	#__system___float_mul
1a450     A7 FA 61 FC | 	wrlong	result1, fp
1a454     DC 00 90 FD | 	jmp	#LR__2189
1a458                 | LR__2186
1a458                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1a458     08 4E 05 F1 | 	add	fp, #8
1a45c     A7 1E 02 FB | 	rdlong	local01, fp
1a460     08 4E 85 F1 | 	sub	fp, #8
1a464     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a468     14 4E 05 A1 |  if_e	add	fp, #20
1a46c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a470     14 4E 85 A1 |  if_e	sub	fp, #20
1a474     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a478     38 00 90 5D |  if_ne	jmp	#LR__2187
1a47c     A7 1E 02 FB | 	rdlong	local01, fp
1a480     0C 4E 05 F1 | 	add	fp, #12
1a484     A7 12 02 FB | 	rdlong	arg01, fp
1a488     0C 4E 85 F1 | 	sub	fp, #12
1a48c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a490     1F 26 C6 C9 |  if_b	decod	local05, #31
1a494     00 26 06 36 |  if_ae	mov	local05, #0
1a498     58 8B B0 FD | 	call	#__system___float_fromuns
1a49c     13 FB 61 F5 | 	xor	result1, local05
1a4a0     FD 14 02 F6 | 	mov	arg02, result1
1a4a4     0F 13 02 F6 | 	mov	arg01, local01
1a4a8     4C 8F B0 FD | 	call	#__system___float_mul
1a4ac     A7 FA 61 FC | 	wrlong	result1, fp
1a4b0     80 00 90 FD | 	jmp	#LR__2189
1a4b4                 | LR__2187
1a4b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1a4b4     08 4E 05 F1 | 	add	fp, #8
1a4b8     A7 1E 02 FB | 	rdlong	local01, fp
1a4bc     08 4E 85 F1 | 	sub	fp, #8
1a4c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a4c4     14 4E 05 A1 |  if_e	add	fp, #20
1a4c8     A7 22 02 AB |  if_e	rdlong	local03, fp
1a4cc     14 4E 85 A1 |  if_e	sub	fp, #20
1a4d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a4d4     1C 00 90 5D |  if_ne	jmp	#LR__2188
1a4d8     A7 12 02 FB | 	rdlong	arg01, fp
1a4dc     0C 4E 05 F1 | 	add	fp, #12
1a4e0     A7 14 02 FB | 	rdlong	arg02, fp
1a4e4     0C 4E 85 F1 | 	sub	fp, #12
1a4e8     0C 8F B0 FD | 	call	#__system___float_mul
1a4ec     A7 FA 61 FC | 	wrlong	result1, fp
1a4f0     40 00 90 FD | 	jmp	#LR__2189
1a4f4                 | LR__2188
1a4f4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1a4f4     08 4E 05 F1 | 	add	fp, #8
1a4f8     A7 1E 02 FB | 	rdlong	local01, fp
1a4fc     08 4E 85 F1 | 	sub	fp, #8
1a500     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a504     14 4E 05 51 |  if_ne	add	fp, #20
1a508     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a50c     14 4E 85 51 |  if_ne	sub	fp, #20
1a510     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1a514     A7 10 68 AC |  if_e	wrlong	#8, fp
1a518     08 4E 05 A1 |  if_e	add	fp, #8
1a51c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a520     08 4E 85 A1 |  if_e	sub	fp, #8
1a524     A7 12 68 5C |  if_ne	wrlong	#9, fp
1a528     08 4E 05 51 |  if_ne	add	fp, #8
1a52c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1a530     08 4E 85 51 |  if_ne	sub	fp, #8
1a534                 | LR__2189
1a534     A7 12 02 F6 | 	mov	arg01, fp
1a538     18 0F BF FD | 	call	#_push
1a53c     A7 F0 03 F6 | 	mov	ptra, fp
1a540     B2 00 A0 FD | 	call	#popregs_
1a544                 | _do_mul_ret
1a544     2D 00 64 FD | 	ret
1a548                 | 
1a548                 | ' 
1a548                 | ' '--------------------------------- not equal (<>)
1a548                 | ' 
1a548                 | ' sub do_ne
1a548                 | _do_ne
1a548     05 4A 05 F6 | 	mov	COUNT_, #5
1a54c     A8 00 A0 FD | 	call	#pushregs_
1a550     18 F0 07 F1 | 	add	ptra, #24
1a554     64 0E BF FD | 	call	#_pop
1a558     FD 1E 02 F6 | 	mov	local01, result1
1a55c     FE 20 02 F6 | 	mov	local02, result2
1a560     FF 22 02 F6 | 	mov	local03, result3
1a564     0C 4E 05 F1 | 	add	fp, #12
1a568     A7 1E 62 FC | 	wrlong	local01, fp
1a56c     04 4E 05 F1 | 	add	fp, #4
1a570     A7 20 62 FC | 	wrlong	local02, fp
1a574     04 4E 05 F1 | 	add	fp, #4
1a578     A7 22 62 FC | 	wrlong	local03, fp
1a57c     14 4E 85 F1 | 	sub	fp, #20
1a580     38 0E BF FD | 	call	#_pop
1a584     FF 22 02 F6 | 	mov	local03, result3
1a588     A7 FA 61 FC | 	wrlong	result1, fp
1a58c     04 4E 05 F1 | 	add	fp, #4
1a590     A7 FC 61 FC | 	wrlong	result2, fp
1a594     04 4E 05 F1 | 	add	fp, #4
1a598     A7 22 62 FC | 	wrlong	local03, fp
1a59c                 | ' 
1a59c                 | ' t2=pop()
1a59c                 | ' t1=pop()
1a59c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1a59c     08 4E 85 F1 | 	sub	fp, #8
1a5a0     1F 22 0E F2 | 	cmp	local03, #31 wz
1a5a4     14 4E 05 A1 |  if_e	add	fp, #20
1a5a8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a5ac     14 4E 85 A1 |  if_e	sub	fp, #20
1a5b0     12 23 02 A6 |  if_e	mov	local03, local04
1a5b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a5b8     28 00 90 5D |  if_ne	jmp	#LR__2190
1a5bc     00 1E 06 F6 | 	mov	local01, #0
1a5c0     A7 12 02 FB | 	rdlong	arg01, fp
1a5c4     0C 4E 05 F1 | 	add	fp, #12
1a5c8     A7 14 02 FB | 	rdlong	arg02, fp
1a5cc     0C 4E 85 F1 | 	sub	fp, #12
1a5d0     98 62 B0 FD | 	call	#__system___string_cmp
1a5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5d8     00 1E 26 56 |  if_ne	not	local01, #0
1a5dc     A7 1E 62 FC | 	wrlong	local01, fp
1a5e0     1C 04 90 FD | 	jmp	#LR__2203
1a5e4                 | LR__2190
1a5e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1a5e4     08 4E 05 F1 | 	add	fp, #8
1a5e8     A7 1E 02 FB | 	rdlong	local01, fp
1a5ec     08 4E 85 F1 | 	sub	fp, #8
1a5f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a5f4     14 4E 05 A1 |  if_e	add	fp, #20
1a5f8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a5fc     14 4E 85 A1 |  if_e	sub	fp, #20
1a600     12 23 02 A6 |  if_e	mov	local03, local04
1a604     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a608     2C 00 90 5D |  if_ne	jmp	#LR__2191
1a60c     00 1E 06 F6 | 	mov	local01, #0
1a610     A7 12 02 FB | 	rdlong	arg01, fp
1a614     0C 4E 05 F1 | 	add	fp, #12
1a618     A7 14 02 FB | 	rdlong	arg02, fp
1a61c     0C 4E 85 F1 | 	sub	fp, #12
1a620     01 16 06 F6 | 	mov	arg03, #1
1a624     04 92 B0 FD | 	call	#__system___float_cmp
1a628     00 FA 0D F2 | 	cmp	result1, #0 wz
1a62c     00 1E 26 56 |  if_ne	not	local01, #0
1a630     A7 1E 62 FC | 	wrlong	local01, fp
1a634     C8 03 90 FD | 	jmp	#LR__2203
1a638                 | LR__2191
1a638                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1a638     08 4E 05 F1 | 	add	fp, #8
1a63c     A7 1E 02 FB | 	rdlong	local01, fp
1a640     08 4E 85 F1 | 	sub	fp, #8
1a644     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a648     14 4E 05 A1 |  if_e	add	fp, #20
1a64c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a650     14 4E 85 A1 |  if_e	sub	fp, #20
1a654     12 23 02 A6 |  if_e	mov	local03, local04
1a658     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a65c     48 00 90 5D |  if_ne	jmp	#LR__2192
1a660     00 1E 06 F6 | 	mov	local01, #0
1a664     A7 20 02 FB | 	rdlong	local02, fp
1a668     0C 4E 05 F1 | 	add	fp, #12
1a66c     A7 12 02 FB | 	rdlong	arg01, fp
1a670     0C 4E 85 F1 | 	sub	fp, #12
1a674     09 13 52 F6 | 	abs	arg01, arg01 wc
1a678     1F 26 C6 C9 |  if_b	decod	local05, #31
1a67c     00 26 06 36 |  if_ae	mov	local05, #0
1a680     70 89 B0 FD | 	call	#__system___float_fromuns
1a684     13 FB 61 F5 | 	xor	result1, local05
1a688     FD 14 02 F6 | 	mov	arg02, result1
1a68c     10 13 02 F6 | 	mov	arg01, local02
1a690     01 16 06 F6 | 	mov	arg03, #1
1a694     94 91 B0 FD | 	call	#__system___float_cmp
1a698     00 FA 0D F2 | 	cmp	result1, #0 wz
1a69c     00 1E 26 56 |  if_ne	not	local01, #0
1a6a0     A7 1E 62 FC | 	wrlong	local01, fp
1a6a4     58 03 90 FD | 	jmp	#LR__2203
1a6a8                 | LR__2192
1a6a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1a6a8     08 4E 05 F1 | 	add	fp, #8
1a6ac     A7 1E 02 FB | 	rdlong	local01, fp
1a6b0     08 4E 85 F1 | 	sub	fp, #8
1a6b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a6b8     14 4E 05 A1 |  if_e	add	fp, #20
1a6bc     A7 24 02 AB |  if_e	rdlong	local04, fp
1a6c0     14 4E 85 A1 |  if_e	sub	fp, #20
1a6c4     12 23 02 A6 |  if_e	mov	local03, local04
1a6c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a6cc     38 00 90 5D |  if_ne	jmp	#LR__2193
1a6d0     00 1E 06 F6 | 	mov	local01, #0
1a6d4     A7 20 02 FB | 	rdlong	local02, fp
1a6d8     0C 4E 05 F1 | 	add	fp, #12
1a6dc     A7 12 02 FB | 	rdlong	arg01, fp
1a6e0     0C 4E 85 F1 | 	sub	fp, #12
1a6e4     0C 89 B0 FD | 	call	#__system___float_fromuns
1a6e8     FD 14 02 F6 | 	mov	arg02, result1
1a6ec     10 13 02 F6 | 	mov	arg01, local02
1a6f0     01 16 06 F6 | 	mov	arg03, #1
1a6f4     34 91 B0 FD | 	call	#__system___float_cmp
1a6f8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a6fc     00 1E 26 56 |  if_ne	not	local01, #0
1a700     A7 1E 62 FC | 	wrlong	local01, fp
1a704     F8 02 90 FD | 	jmp	#LR__2203
1a708                 | LR__2193
1a708                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1a708     08 4E 05 F1 | 	add	fp, #8
1a70c     A7 1E 02 FB | 	rdlong	local01, fp
1a710     08 4E 85 F1 | 	sub	fp, #8
1a714     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a718     14 4E 05 A1 |  if_e	add	fp, #20
1a71c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a720     14 4E 85 A1 |  if_e	sub	fp, #20
1a724     12 23 02 A6 |  if_e	mov	local03, local04
1a728     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a72c     44 00 90 5D |  if_ne	jmp	#LR__2194
1a730     00 1E 06 F6 | 	mov	local01, #0
1a734     A7 12 02 FB | 	rdlong	arg01, fp
1a738     09 13 52 F6 | 	abs	arg01, arg01 wc
1a73c     1F 26 C6 C9 |  if_b	decod	local05, #31
1a740     00 26 06 36 |  if_ae	mov	local05, #0
1a744     AC 88 B0 FD | 	call	#__system___float_fromuns
1a748     13 FB 61 F5 | 	xor	result1, local05
1a74c     FD 12 02 F6 | 	mov	arg01, result1
1a750     0C 4E 05 F1 | 	add	fp, #12
1a754     A7 14 02 FB | 	rdlong	arg02, fp
1a758     0C 4E 85 F1 | 	sub	fp, #12
1a75c     01 16 06 F6 | 	mov	arg03, #1
1a760     C8 90 B0 FD | 	call	#__system___float_cmp
1a764     00 FA 0D F2 | 	cmp	result1, #0 wz
1a768     00 1E 26 56 |  if_ne	not	local01, #0
1a76c     A7 1E 62 FC | 	wrlong	local01, fp
1a770     8C 02 90 FD | 	jmp	#LR__2203
1a774                 | LR__2194
1a774                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1a774     08 4E 05 F1 | 	add	fp, #8
1a778     A7 1E 02 FB | 	rdlong	local01, fp
1a77c     08 4E 85 F1 | 	sub	fp, #8
1a780     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a784     14 4E 05 A1 |  if_e	add	fp, #20
1a788     A7 24 02 AB |  if_e	rdlong	local04, fp
1a78c     14 4E 85 A1 |  if_e	sub	fp, #20
1a790     12 23 02 A6 |  if_e	mov	local03, local04
1a794     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a798     24 00 90 5D |  if_ne	jmp	#LR__2195
1a79c     00 1E 06 F6 | 	mov	local01, #0
1a7a0     A7 20 02 FB | 	rdlong	local02, fp
1a7a4     0C 4E 05 F1 | 	add	fp, #12
1a7a8     A7 22 02 FB | 	rdlong	local03, fp
1a7ac     0C 4E 85 F1 | 	sub	fp, #12
1a7b0     11 21 0A F2 | 	cmp	local02, local03 wz
1a7b4     01 1E 66 56 |  if_ne	neg	local01, #1
1a7b8     A7 1E 62 FC | 	wrlong	local01, fp
1a7bc     40 02 90 FD | 	jmp	#LR__2203
1a7c0                 | LR__2195
1a7c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1a7c0     08 4E 05 F1 | 	add	fp, #8
1a7c4     A7 1E 02 FB | 	rdlong	local01, fp
1a7c8     08 4E 85 F1 | 	sub	fp, #8
1a7cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a7d0     14 4E 05 A1 |  if_e	add	fp, #20
1a7d4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a7d8     14 4E 85 A1 |  if_e	sub	fp, #20
1a7dc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a7e0     24 00 90 5D |  if_ne	jmp	#LR__2196
1a7e4     00 1E 06 F6 | 	mov	local01, #0
1a7e8     A7 20 02 FB | 	rdlong	local02, fp
1a7ec     0C 4E 05 F1 | 	add	fp, #12
1a7f0     A7 22 02 FB | 	rdlong	local03, fp
1a7f4     0C 4E 85 F1 | 	sub	fp, #12
1a7f8     11 21 0A F2 | 	cmp	local02, local03 wz
1a7fc     01 1E 66 56 |  if_ne	neg	local01, #1
1a800     A7 1E 62 FC | 	wrlong	local01, fp
1a804     F8 01 90 FD | 	jmp	#LR__2203
1a808                 | LR__2196
1a808                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1a808     08 4E 05 F1 | 	add	fp, #8
1a80c     A7 1E 02 FB | 	rdlong	local01, fp
1a810     08 4E 85 F1 | 	sub	fp, #8
1a814     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a818     14 4E 05 A1 |  if_e	add	fp, #20
1a81c     A7 22 02 AB |  if_e	rdlong	local03, fp
1a820     14 4E 85 A1 |  if_e	sub	fp, #20
1a824     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a828     34 00 90 5D |  if_ne	jmp	#LR__2197
1a82c     00 1E 06 F6 | 	mov	local01, #0
1a830     A7 12 02 FB | 	rdlong	arg01, fp
1a834     BC 87 B0 FD | 	call	#__system___float_fromuns
1a838     FD 12 02 F6 | 	mov	arg01, result1
1a83c     0C 4E 05 F1 | 	add	fp, #12
1a840     A7 14 02 FB | 	rdlong	arg02, fp
1a844     0C 4E 85 F1 | 	sub	fp, #12
1a848     01 16 06 F6 | 	mov	arg03, #1
1a84c     DC 8F B0 FD | 	call	#__system___float_cmp
1a850     00 FA 0D F2 | 	cmp	result1, #0 wz
1a854     00 1E 26 56 |  if_ne	not	local01, #0
1a858     A7 1E 62 FC | 	wrlong	local01, fp
1a85c     A0 01 90 FD | 	jmp	#LR__2203
1a860                 | LR__2197
1a860                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1a860     08 4E 05 F1 | 	add	fp, #8
1a864     A7 1E 02 FB | 	rdlong	local01, fp
1a868     08 4E 85 F1 | 	sub	fp, #8
1a86c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a870     14 4E 05 A1 |  if_e	add	fp, #20
1a874     A7 22 02 AB |  if_e	rdlong	local03, fp
1a878     14 4E 85 A1 |  if_e	sub	fp, #20
1a87c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a880     24 00 90 5D |  if_ne	jmp	#LR__2198
1a884     00 1E 06 F6 | 	mov	local01, #0
1a888     A7 20 02 FB | 	rdlong	local02, fp
1a88c     0C 4E 05 F1 | 	add	fp, #12
1a890     A7 22 02 FB | 	rdlong	local03, fp
1a894     0C 4E 85 F1 | 	sub	fp, #12
1a898     11 21 0A F2 | 	cmp	local02, local03 wz
1a89c     01 1E 66 56 |  if_ne	neg	local01, #1
1a8a0     A7 1E 62 FC | 	wrlong	local01, fp
1a8a4     58 01 90 FD | 	jmp	#LR__2203
1a8a8                 | LR__2198
1a8a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1a8a8     08 4E 05 F1 | 	add	fp, #8
1a8ac     A7 1E 02 FB | 	rdlong	local01, fp
1a8b0     08 4E 85 F1 | 	sub	fp, #8
1a8b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a8b8     14 4E 05 A1 |  if_e	add	fp, #20
1a8bc     A7 22 02 AB |  if_e	rdlong	local03, fp
1a8c0     14 4E 85 A1 |  if_e	sub	fp, #20
1a8c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a8c8     24 00 90 5D |  if_ne	jmp	#LR__2199
1a8cc     00 1E 06 F6 | 	mov	local01, #0
1a8d0     A7 20 02 FB | 	rdlong	local02, fp
1a8d4     0C 4E 05 F1 | 	add	fp, #12
1a8d8     A7 22 02 FB | 	rdlong	local03, fp
1a8dc     0C 4E 85 F1 | 	sub	fp, #12
1a8e0     11 21 0A F2 | 	cmp	local02, local03 wz
1a8e4     01 1E 66 56 |  if_ne	neg	local01, #1
1a8e8     A7 1E 62 FC | 	wrlong	local01, fp
1a8ec     10 01 90 FD | 	jmp	#LR__2203
1a8f0                 | LR__2199
1a8f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1a8f0     08 4E 05 F1 | 	add	fp, #8
1a8f4     A7 1E 02 FB | 	rdlong	local01, fp
1a8f8     08 4E 85 F1 | 	sub	fp, #8
1a8fc     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a900     14 4E 05 A1 |  if_e	add	fp, #20
1a904     A7 22 02 AB |  if_e	rdlong	local03, fp
1a908     14 4E 85 A1 |  if_e	sub	fp, #20
1a90c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a910     30 00 90 5D |  if_ne	jmp	#LR__2200
1a914     00 1E 06 F6 | 	mov	local01, #0
1a918     A7 12 02 FB | 	rdlong	arg01, fp
1a91c     14 0C BF FD | 	call	#_convertstring
1a920     FD 12 02 F6 | 	mov	arg01, result1
1a924     0C 4E 05 F1 | 	add	fp, #12
1a928     A7 14 02 FB | 	rdlong	arg02, fp
1a92c     0C 4E 85 F1 | 	sub	fp, #12
1a930     38 5F B0 FD | 	call	#__system___string_cmp
1a934     00 FA 0D F2 | 	cmp	result1, #0 wz
1a938     00 1E 26 56 |  if_ne	not	local01, #0
1a93c     A7 1E 62 FC | 	wrlong	local01, fp
1a940     BC 00 90 FD | 	jmp	#LR__2203
1a944                 | LR__2200
1a944                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1a944     08 4E 05 F1 | 	add	fp, #8
1a948     A7 1E 02 FB | 	rdlong	local01, fp
1a94c     08 4E 85 F1 | 	sub	fp, #8
1a950     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a954     14 4E 05 A1 |  if_e	add	fp, #20
1a958     A7 22 02 AB |  if_e	rdlong	local03, fp
1a95c     14 4E 85 A1 |  if_e	sub	fp, #20
1a960     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a964     34 00 90 5D |  if_ne	jmp	#LR__2201
1a968     00 1E 06 F6 | 	mov	local01, #0
1a96c     A7 20 02 FB | 	rdlong	local02, fp
1a970     0C 4E 05 F1 | 	add	fp, #12
1a974     A7 12 02 FB | 	rdlong	arg01, fp
1a978     0C 4E 85 F1 | 	sub	fp, #12
1a97c     B4 0B BF FD | 	call	#_convertstring
1a980     FD 14 02 F6 | 	mov	arg02, result1
1a984     10 13 02 F6 | 	mov	arg01, local02
1a988     E0 5E B0 FD | 	call	#__system___string_cmp
1a98c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a990     00 1E 26 56 |  if_ne	not	local01, #0
1a994     A7 1E 62 FC | 	wrlong	local01, fp
1a998     64 00 90 FD | 	jmp	#LR__2203
1a99c                 | LR__2201
1a99c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1a99c     08 4E 05 F1 | 	add	fp, #8
1a9a0     A7 1E 02 FB | 	rdlong	local01, fp
1a9a4     08 4E 85 F1 | 	sub	fp, #8
1a9a8     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a9ac     14 4E 05 A1 |  if_e	add	fp, #20
1a9b0     A7 22 02 AB |  if_e	rdlong	local03, fp
1a9b4     14 4E 85 A1 |  if_e	sub	fp, #20
1a9b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a9bc     3C 00 90 5D |  if_ne	jmp	#LR__2202
1a9c0     00 1E 06 F6 | 	mov	local01, #0
1a9c4     A7 12 02 FB | 	rdlong	arg01, fp
1a9c8     68 0B BF FD | 	call	#_convertstring
1a9cc     FD 20 02 F6 | 	mov	local02, result1
1a9d0     0C 4E 05 F1 | 	add	fp, #12
1a9d4     A7 12 02 FB | 	rdlong	arg01, fp
1a9d8     0C 4E 85 F1 | 	sub	fp, #12
1a9dc     54 0B BF FD | 	call	#_convertstring
1a9e0     FD 14 02 F6 | 	mov	arg02, result1
1a9e4     10 13 02 F6 | 	mov	arg01, local02
1a9e8     80 5E B0 FD | 	call	#__system___string_cmp
1a9ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9f0     00 1E 26 56 |  if_ne	not	local01, #0
1a9f4     A7 1E 62 FC | 	wrlong	local01, fp
1a9f8     04 00 90 FD | 	jmp	#LR__2203
1a9fc                 | LR__2202
1a9fc     A7 00 68 FC | 	wrlong	#0, fp
1aa00                 | LR__2203
1aa00     08 4E 05 F1 | 	add	fp, #8
1aa04     A7 38 68 FC | 	wrlong	#28, fp
1aa08     08 4E 85 F1 | 	sub	fp, #8
1aa0c     A7 12 02 F6 | 	mov	arg01, fp
1aa10     40 0A BF FD | 	call	#_push
1aa14     A7 F0 03 F6 | 	mov	ptra, fp
1aa18     B2 00 A0 FD | 	call	#popregs_
1aa1c                 | _do_ne_ret
1aa1c     2D 00 64 FD | 	ret
1aa20                 | 
1aa20                 | ' 
1aa20                 | ' '--------------------------------- OR
1aa20                 | ' 
1aa20                 | ' sub do_or 
1aa20                 | _do_or
1aa20     03 4A 05 F6 | 	mov	COUNT_, #3
1aa24     A8 00 A0 FD | 	call	#pushregs_
1aa28     18 F0 07 F1 | 	add	ptra, #24
1aa2c     8C 09 BF FD | 	call	#_pop
1aa30     FD 12 02 F6 | 	mov	arg01, result1
1aa34     FE 1E 02 F6 | 	mov	local01, result2
1aa38     FF 20 02 F6 | 	mov	local02, result3
1aa3c     0C 4E 05 F1 | 	add	fp, #12
1aa40     A7 12 62 FC | 	wrlong	arg01, fp
1aa44     04 4E 05 F1 | 	add	fp, #4
1aa48     A7 1E 62 FC | 	wrlong	local01, fp
1aa4c     04 4E 05 F1 | 	add	fp, #4
1aa50     A7 20 62 FC | 	wrlong	local02, fp
1aa54     14 4E 85 F1 | 	sub	fp, #20
1aa58     60 09 BF FD | 	call	#_pop
1aa5c     FF 22 02 F6 | 	mov	local03, result3
1aa60     A7 FA 61 FC | 	wrlong	result1, fp
1aa64     04 4E 05 F1 | 	add	fp, #4
1aa68     A7 FC 61 FC | 	wrlong	result2, fp
1aa6c     04 4E 05 F1 | 	add	fp, #4
1aa70     A7 22 62 FC | 	wrlong	local03, fp
1aa74                 | ' 
1aa74                 | ' t2=pop()
1aa74                 | ' t1=pop()
1aa74                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1aa74     08 4E 85 F1 | 	sub	fp, #8
1aa78     1C 22 0E F2 | 	cmp	local03, #28 wz
1aa7c     A7 22 02 AB |  if_e	rdlong	local03, fp
1aa80     A7 22 62 AC |  if_e	wrlong	local03, fp
1aa84     08 4E 05 A1 |  if_e	add	fp, #8
1aa88     A7 3A 68 AC |  if_e	wrlong	#29, fp
1aa8c     08 4E 85 A1 |  if_e	sub	fp, #8
1aa90                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1aa90     14 4E 05 F1 | 	add	fp, #20
1aa94     A7 22 02 FB | 	rdlong	local03, fp
1aa98     14 4E 85 F1 | 	sub	fp, #20
1aa9c     1C 22 0E F2 | 	cmp	local03, #28 wz
1aaa0     18 00 90 5D |  if_ne	jmp	#LR__2210
1aaa4     0C 4E 05 F1 | 	add	fp, #12
1aaa8     A7 22 02 FB | 	rdlong	local03, fp
1aaac     A7 22 62 FC | 	wrlong	local03, fp
1aab0     08 4E 05 F1 | 	add	fp, #8
1aab4     A7 3A 68 FC | 	wrlong	#29, fp
1aab8     14 4E 85 F1 | 	sub	fp, #20
1aabc                 | LR__2210
1aabc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1aabc     08 4E 05 F1 | 	add	fp, #8
1aac0     A7 22 02 FB | 	rdlong	local03, fp
1aac4     08 4E 85 F1 | 	sub	fp, #8
1aac8     1F 22 0E F2 | 	cmp	local03, #31 wz
1aacc     14 4E 05 51 |  if_ne	add	fp, #20
1aad0     A7 20 02 5B |  if_ne	rdlong	local02, fp
1aad4     14 4E 85 51 |  if_ne	sub	fp, #20
1aad8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1aadc     08 4E 05 51 |  if_ne	add	fp, #8
1aae0     A7 22 02 5B |  if_ne	rdlong	local03, fp
1aae4     08 4E 85 51 |  if_ne	sub	fp, #8
1aae8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1aaec     14 4E 05 51 |  if_ne	add	fp, #20
1aaf0     14 4E 85 51 |  if_ne	sub	fp, #20
1aaf4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1aaf8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1aafc     08 4E 05 A1 |  if_e	add	fp, #8
1ab00     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ab04     08 4E 85 A1 |  if_e	sub	fp, #8
1ab08     18 00 90 AD |  if_e	jmp	#LR__2211
1ab0c     A7 22 02 FB | 	rdlong	local03, fp
1ab10     0C 4E 05 F1 | 	add	fp, #12
1ab14     A7 1E 02 FB | 	rdlong	local01, fp
1ab18     0C 4E 85 F1 | 	sub	fp, #12
1ab1c     0F 23 42 F5 | 	or	local03, local01
1ab20     A7 22 62 FC | 	wrlong	local03, fp
1ab24                 | LR__2211
1ab24     A7 12 02 F6 | 	mov	arg01, fp
1ab28     28 09 BF FD | 	call	#_push
1ab2c     A7 F0 03 F6 | 	mov	ptra, fp
1ab30     B2 00 A0 FD | 	call	#popregs_
1ab34                 | _do_or_ret
1ab34     2D 00 64 FD | 	ret
1ab38                 | 
1ab38                 | ' 
1ab38                 | ' '--------------------------------- plus (+)
1ab38                 | ' 
1ab38                 | ' sub do_plus 
1ab38                 | _do_plus
1ab38     05 4A 05 F6 | 	mov	COUNT_, #5
1ab3c     A8 00 A0 FD | 	call	#pushregs_
1ab40     18 F0 07 F1 | 	add	ptra, #24
1ab44     74 08 BF FD | 	call	#_pop
1ab48     FD 1E 02 F6 | 	mov	local01, result1
1ab4c     FE 20 02 F6 | 	mov	local02, result2
1ab50     FF 22 02 F6 | 	mov	local03, result3
1ab54     0C 4E 05 F1 | 	add	fp, #12
1ab58     A7 1E 62 FC | 	wrlong	local01, fp
1ab5c     04 4E 05 F1 | 	add	fp, #4
1ab60     A7 20 62 FC | 	wrlong	local02, fp
1ab64     04 4E 05 F1 | 	add	fp, #4
1ab68     A7 22 62 FC | 	wrlong	local03, fp
1ab6c     14 4E 85 F1 | 	sub	fp, #20
1ab70     48 08 BF FD | 	call	#_pop
1ab74     FF 22 02 F6 | 	mov	local03, result3
1ab78     A7 FA 61 FC | 	wrlong	result1, fp
1ab7c     04 4E 05 F1 | 	add	fp, #4
1ab80     A7 FC 61 FC | 	wrlong	result2, fp
1ab84     04 4E 05 F1 | 	add	fp, #4
1ab88     A7 22 62 FC | 	wrlong	local03, fp
1ab8c                 | ' 
1ab8c                 | ' t2=pop()
1ab8c                 | ' t1=pop()
1ab8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1ab8c     08 4E 85 F1 | 	sub	fp, #8
1ab90     1D 22 0E F2 | 	cmp	local03, #29 wz
1ab94     14 4E 05 A1 |  if_e	add	fp, #20
1ab98     A7 24 02 AB |  if_e	rdlong	local04, fp
1ab9c     14 4E 85 A1 |  if_e	sub	fp, #20
1aba0     12 23 02 A6 |  if_e	mov	local03, local04
1aba4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1aba8     1C 00 90 5D |  if_ne	jmp	#LR__2220
1abac     A7 1E 02 FB | 	rdlong	local01, fp
1abb0     0C 4E 05 F1 | 	add	fp, #12
1abb4     A7 20 02 FB | 	rdlong	local02, fp
1abb8     0C 4E 85 F1 | 	sub	fp, #12
1abbc     10 1F 02 F1 | 	add	local01, local02
1abc0     A7 1E 62 FC | 	wrlong	local01, fp
1abc4     48 04 90 FD | 	jmp	#LR__2235
1abc8                 | LR__2220
1abc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1abc8     08 4E 05 F1 | 	add	fp, #8
1abcc     A7 1E 02 FB | 	rdlong	local01, fp
1abd0     08 4E 85 F1 | 	sub	fp, #8
1abd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1abd8     14 4E 05 A1 |  if_e	add	fp, #20
1abdc     A7 24 02 AB |  if_e	rdlong	local04, fp
1abe0     14 4E 85 A1 |  if_e	sub	fp, #20
1abe4     12 23 02 A6 |  if_e	mov	local03, local04
1abe8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1abec     28 00 90 5D |  if_ne	jmp	#LR__2221
1abf0     A7 1E 02 FB | 	rdlong	local01, fp
1abf4     0C 4E 05 F1 | 	add	fp, #12
1abf8     A7 20 02 FB | 	rdlong	local02, fp
1abfc     0C 4E 85 F1 | 	sub	fp, #12
1ac00     10 1F 02 F1 | 	add	local01, local02
1ac04     A7 1E 62 FC | 	wrlong	local01, fp
1ac08     08 4E 05 F1 | 	add	fp, #8
1ac0c     A7 38 68 FC | 	wrlong	#28, fp
1ac10     08 4E 85 F1 | 	sub	fp, #8
1ac14     F8 03 90 FD | 	jmp	#LR__2235
1ac18                 | LR__2221
1ac18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ac18     08 4E 05 F1 | 	add	fp, #8
1ac1c     A7 1E 02 FB | 	rdlong	local01, fp
1ac20     08 4E 85 F1 | 	sub	fp, #8
1ac24     1D 1E 0E F2 | 	cmp	local01, #29 wz
1ac28     14 4E 05 A1 |  if_e	add	fp, #20
1ac2c     A7 24 02 AB |  if_e	rdlong	local04, fp
1ac30     14 4E 85 A1 |  if_e	sub	fp, #20
1ac34     12 23 02 A6 |  if_e	mov	local03, local04
1ac38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ac3c     30 00 90 5D |  if_ne	jmp	#LR__2222
1ac40     A7 12 02 FB | 	rdlong	arg01, fp
1ac44     AC 83 B0 FD | 	call	#__system___float_fromuns
1ac48     FD 12 02 F6 | 	mov	arg01, result1
1ac4c     0C 4E 05 F1 | 	add	fp, #12
1ac50     A7 14 02 FB | 	rdlong	arg02, fp
1ac54     0C 4E 85 F1 | 	sub	fp, #12
1ac58     CC 83 B0 FD | 	call	#__system___float_add
1ac5c     A7 FA 61 FC | 	wrlong	result1, fp
1ac60     08 4E 05 F1 | 	add	fp, #8
1ac64     A7 3C 68 FC | 	wrlong	#30, fp
1ac68     08 4E 85 F1 | 	sub	fp, #8
1ac6c     A0 03 90 FD | 	jmp	#LR__2235
1ac70                 | LR__2222
1ac70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1ac70     08 4E 05 F1 | 	add	fp, #8
1ac74     A7 1E 02 FB | 	rdlong	local01, fp
1ac78     08 4E 85 F1 | 	sub	fp, #8
1ac7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1ac80     14 4E 05 A1 |  if_e	add	fp, #20
1ac84     A7 24 02 AB |  if_e	rdlong	local04, fp
1ac88     14 4E 85 A1 |  if_e	sub	fp, #20
1ac8c     12 23 02 A6 |  if_e	mov	local03, local04
1ac90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ac94     1C 00 90 5D |  if_ne	jmp	#LR__2223
1ac98     A7 1E 02 FB | 	rdlong	local01, fp
1ac9c     0C 4E 05 F1 | 	add	fp, #12
1aca0     A7 20 02 FB | 	rdlong	local02, fp
1aca4     0C 4E 85 F1 | 	sub	fp, #12
1aca8     10 1F 02 F1 | 	add	local01, local02
1acac     A7 1E 62 FC | 	wrlong	local01, fp
1acb0     5C 03 90 FD | 	jmp	#LR__2235
1acb4                 | LR__2223
1acb4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1acb4     08 4E 05 F1 | 	add	fp, #8
1acb8     A7 1E 02 FB | 	rdlong	local01, fp
1acbc     08 4E 85 F1 | 	sub	fp, #8
1acc0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1acc4     14 4E 05 A1 |  if_e	add	fp, #20
1acc8     A7 24 02 AB |  if_e	rdlong	local04, fp
1accc     14 4E 85 A1 |  if_e	sub	fp, #20
1acd0     12 23 02 A6 |  if_e	mov	local03, local04
1acd4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1acd8     1C 00 90 5D |  if_ne	jmp	#LR__2224
1acdc     A7 1E 02 FB | 	rdlong	local01, fp
1ace0     0C 4E 05 F1 | 	add	fp, #12
1ace4     A7 20 02 FB | 	rdlong	local02, fp
1ace8     0C 4E 85 F1 | 	sub	fp, #12
1acec     10 1F 02 F1 | 	add	local01, local02
1acf0     A7 1E 62 FC | 	wrlong	local01, fp
1acf4     18 03 90 FD | 	jmp	#LR__2235
1acf8                 | LR__2224
1acf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1acf8     08 4E 05 F1 | 	add	fp, #8
1acfc     A7 1E 02 FB | 	rdlong	local01, fp
1ad00     08 4E 85 F1 | 	sub	fp, #8
1ad04     1C 1E 0E F2 | 	cmp	local01, #28 wz
1ad08     14 4E 05 A1 |  if_e	add	fp, #20
1ad0c     A7 24 02 AB |  if_e	rdlong	local04, fp
1ad10     14 4E 85 A1 |  if_e	sub	fp, #20
1ad14     12 23 02 A6 |  if_e	mov	local03, local04
1ad18     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ad1c     40 00 90 5D |  if_ne	jmp	#LR__2225
1ad20     A7 12 02 FB | 	rdlong	arg01, fp
1ad24     09 13 52 F6 | 	abs	arg01, arg01 wc
1ad28     1F 26 C6 C9 |  if_b	decod	local05, #31
1ad2c     00 26 06 36 |  if_ae	mov	local05, #0
1ad30     C0 82 B0 FD | 	call	#__system___float_fromuns
1ad34     13 FB 61 F5 | 	xor	result1, local05
1ad38     FD 12 02 F6 | 	mov	arg01, result1
1ad3c     0C 4E 05 F1 | 	add	fp, #12
1ad40     A7 14 02 FB | 	rdlong	arg02, fp
1ad44     0C 4E 85 F1 | 	sub	fp, #12
1ad48     DC 82 B0 FD | 	call	#__system___float_add
1ad4c     A7 FA 61 FC | 	wrlong	result1, fp
1ad50     08 4E 05 F1 | 	add	fp, #8
1ad54     A7 3C 68 FC | 	wrlong	#30, fp
1ad58     08 4E 85 F1 | 	sub	fp, #8
1ad5c     B0 02 90 FD | 	jmp	#LR__2235
1ad60                 | LR__2225
1ad60                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1ad60     08 4E 05 F1 | 	add	fp, #8
1ad64     A7 1E 02 FB | 	rdlong	local01, fp
1ad68     08 4E 85 F1 | 	sub	fp, #8
1ad6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ad70     14 4E 05 A1 |  if_e	add	fp, #20
1ad74     A7 24 02 AB |  if_e	rdlong	local04, fp
1ad78     14 4E 85 A1 |  if_e	sub	fp, #20
1ad7c     12 23 02 A6 |  if_e	mov	local03, local04
1ad80     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ad84     28 00 90 5D |  if_ne	jmp	#LR__2226
1ad88     A7 1E 02 FB | 	rdlong	local01, fp
1ad8c     0C 4E 05 F1 | 	add	fp, #12
1ad90     A7 12 02 FB | 	rdlong	arg01, fp
1ad94     0C 4E 85 F1 | 	sub	fp, #12
1ad98     58 82 B0 FD | 	call	#__system___float_fromuns
1ad9c     FD 14 02 F6 | 	mov	arg02, result1
1ada0     0F 13 02 F6 | 	mov	arg01, local01
1ada4     80 82 B0 FD | 	call	#__system___float_add
1ada8     A7 FA 61 FC | 	wrlong	result1, fp
1adac     60 02 90 FD | 	jmp	#LR__2235
1adb0                 | LR__2226
1adb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1adb0     08 4E 05 F1 | 	add	fp, #8
1adb4     A7 1E 02 FB | 	rdlong	local01, fp
1adb8     08 4E 85 F1 | 	sub	fp, #8
1adbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
1adc0     14 4E 05 A1 |  if_e	add	fp, #20
1adc4     A7 24 02 AB |  if_e	rdlong	local04, fp
1adc8     14 4E 85 A1 |  if_e	sub	fp, #20
1adcc     12 23 02 A6 |  if_e	mov	local03, local04
1add0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1add4     38 00 90 5D |  if_ne	jmp	#LR__2227
1add8     A7 1E 02 FB | 	rdlong	local01, fp
1addc     0C 4E 05 F1 | 	add	fp, #12
1ade0     A7 12 02 FB | 	rdlong	arg01, fp
1ade4     0C 4E 85 F1 | 	sub	fp, #12
1ade8     09 13 52 F6 | 	abs	arg01, arg01 wc
1adec     1F 26 C6 C9 |  if_b	decod	local05, #31
1adf0     00 26 06 36 |  if_ae	mov	local05, #0
1adf4     FC 81 B0 FD | 	call	#__system___float_fromuns
1adf8     13 FB 61 F5 | 	xor	result1, local05
1adfc     FD 14 02 F6 | 	mov	arg02, result1
1ae00     0F 13 02 F6 | 	mov	arg01, local01
1ae04     20 82 B0 FD | 	call	#__system___float_add
1ae08     A7 FA 61 FC | 	wrlong	result1, fp
1ae0c     00 02 90 FD | 	jmp	#LR__2235
1ae10                 | LR__2227
1ae10                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1ae10     08 4E 05 F1 | 	add	fp, #8
1ae14     A7 1E 02 FB | 	rdlong	local01, fp
1ae18     08 4E 85 F1 | 	sub	fp, #8
1ae1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ae20     14 4E 05 A1 |  if_e	add	fp, #20
1ae24     A7 24 02 AB |  if_e	rdlong	local04, fp
1ae28     14 4E 85 A1 |  if_e	sub	fp, #20
1ae2c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
1ae30     1C 00 90 5D |  if_ne	jmp	#LR__2228
1ae34     A7 12 02 FB | 	rdlong	arg01, fp
1ae38     0C 4E 05 F1 | 	add	fp, #12
1ae3c     A7 14 02 FB | 	rdlong	arg02, fp
1ae40     0C 4E 85 F1 | 	sub	fp, #12
1ae44     E0 81 B0 FD | 	call	#__system___float_add
1ae48     A7 FA 61 FC | 	wrlong	result1, fp
1ae4c     C0 01 90 FD | 	jmp	#LR__2235
1ae50                 | LR__2228
1ae50                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ae50     08 4E 05 F1 | 	add	fp, #8
1ae54     A7 1E 02 FB | 	rdlong	local01, fp
1ae58     08 4E 85 F1 | 	sub	fp, #8
1ae5c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1ae60     24 00 90 5D |  if_ne	jmp	#LR__2229
1ae64     14 4E 05 F1 | 	add	fp, #20
1ae68     A7 22 02 FB | 	rdlong	local03, fp
1ae6c     14 4E 85 F1 | 	sub	fp, #20
1ae70     1F 22 0E F2 | 	cmp	local03, #31 wz
1ae74     A7 04 68 5C |  if_ne	wrlong	#2, fp
1ae78     08 4E 05 51 |  if_ne	add	fp, #8
1ae7c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ae80     08 4E 85 51 |  if_ne	sub	fp, #8
1ae84     88 01 90 5D |  if_ne	jmp	#LR__2235
1ae88                 | LR__2229
1ae88                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1ae88     14 4E 05 F1 | 	add	fp, #20
1ae8c     A7 1E 02 FB | 	rdlong	local01, fp
1ae90     14 4E 85 F1 | 	sub	fp, #20
1ae94     1F 1E 0E F2 | 	cmp	local01, #31 wz
1ae98     24 00 90 5D |  if_ne	jmp	#LR__2230
1ae9c     08 4E 05 F1 | 	add	fp, #8
1aea0     A7 22 02 FB | 	rdlong	local03, fp
1aea4     08 4E 85 F1 | 	sub	fp, #8
1aea8     1F 22 0E F2 | 	cmp	local03, #31 wz
1aeac     A7 04 68 5C |  if_ne	wrlong	#2, fp
1aeb0     08 4E 05 51 |  if_ne	add	fp, #8
1aeb4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1aeb8     08 4E 85 51 |  if_ne	sub	fp, #8
1aebc     50 01 90 5D |  if_ne	jmp	#LR__2235
1aec0                 | LR__2230
1aec0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1aec0     08 4E 05 F1 | 	add	fp, #8
1aec4     A7 1E 02 FB | 	rdlong	local01, fp
1aec8     08 4E 85 F1 | 	sub	fp, #8
1aecc     1F 1E 0E F2 | 	cmp	local01, #31 wz
1aed0     14 4E 05 A1 |  if_e	add	fp, #20
1aed4     A7 22 02 AB |  if_e	rdlong	local03, fp
1aed8     14 4E 85 A1 |  if_e	sub	fp, #20
1aedc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1aee0     1C 00 90 5D |  if_ne	jmp	#LR__2231
1aee4     A7 12 02 FB | 	rdlong	arg01, fp
1aee8     0C 4E 05 F1 | 	add	fp, #12
1aeec     A7 14 02 FB | 	rdlong	arg02, fp
1aef0     0C 4E 85 F1 | 	sub	fp, #12
1aef4     A8 59 B0 FD | 	call	#__system___string_concat
1aef8     A7 FA 61 FC | 	wrlong	result1, fp
1aefc     10 01 90 FD | 	jmp	#LR__2235
1af00                 | LR__2231
1af00                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1af00     08 4E 05 F1 | 	add	fp, #8
1af04     A7 1E 02 FB | 	rdlong	local01, fp
1af08     08 4E 85 F1 | 	sub	fp, #8
1af0c     2B 1E 0E F2 | 	cmp	local01, #43 wz
1af10     14 4E 05 A1 |  if_e	add	fp, #20
1af14     A7 22 02 AB |  if_e	rdlong	local03, fp
1af18     14 4E 85 A1 |  if_e	sub	fp, #20
1af1c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1af20     30 00 90 5D |  if_ne	jmp	#LR__2232
1af24     A7 12 02 FB | 	rdlong	arg01, fp
1af28     08 06 BF FD | 	call	#_convertstring
1af2c     FD 12 02 F6 | 	mov	arg01, result1
1af30     0C 4E 05 F1 | 	add	fp, #12
1af34     A7 14 02 FB | 	rdlong	arg02, fp
1af38     0C 4E 85 F1 | 	sub	fp, #12
1af3c     60 59 B0 FD | 	call	#__system___string_concat
1af40     A7 FA 61 FC | 	wrlong	result1, fp
1af44     08 4E 05 F1 | 	add	fp, #8
1af48     A7 3E 68 FC | 	wrlong	#31, fp
1af4c     08 4E 85 F1 | 	sub	fp, #8
1af50     BC 00 90 FD | 	jmp	#LR__2235
1af54                 | LR__2232
1af54                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1af54     08 4E 05 F1 | 	add	fp, #8
1af58     A7 1E 02 FB | 	rdlong	local01, fp
1af5c     08 4E 85 F1 | 	sub	fp, #8
1af60     1F 1E 0E F2 | 	cmp	local01, #31 wz
1af64     14 4E 05 A1 |  if_e	add	fp, #20
1af68     A7 22 02 AB |  if_e	rdlong	local03, fp
1af6c     14 4E 85 A1 |  if_e	sub	fp, #20
1af70     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1af74     28 00 90 5D |  if_ne	jmp	#LR__2233
1af78     A7 1E 02 FB | 	rdlong	local01, fp
1af7c     0C 4E 05 F1 | 	add	fp, #12
1af80     A7 12 02 FB | 	rdlong	arg01, fp
1af84     0C 4E 85 F1 | 	sub	fp, #12
1af88     A8 05 BF FD | 	call	#_convertstring
1af8c     FD 14 02 F6 | 	mov	arg02, result1
1af90     0F 13 02 F6 | 	mov	arg01, local01
1af94     08 59 B0 FD | 	call	#__system___string_concat
1af98     A7 FA 61 FC | 	wrlong	result1, fp
1af9c     70 00 90 FD | 	jmp	#LR__2235
1afa0                 | LR__2233
1afa0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1afa0     08 4E 05 F1 | 	add	fp, #8
1afa4     A7 1E 02 FB | 	rdlong	local01, fp
1afa8     08 4E 85 F1 | 	sub	fp, #8
1afac     2B 1E 0E F2 | 	cmp	local01, #43 wz
1afb0     14 4E 05 A1 |  if_e	add	fp, #20
1afb4     A7 22 02 AB |  if_e	rdlong	local03, fp
1afb8     14 4E 85 A1 |  if_e	sub	fp, #20
1afbc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1afc0     3C 00 90 5D |  if_ne	jmp	#LR__2234
1afc4     A7 12 02 FB | 	rdlong	arg01, fp
1afc8     68 05 BF FD | 	call	#_convertstring
1afcc     FD 1E 02 F6 | 	mov	local01, result1
1afd0     0C 4E 05 F1 | 	add	fp, #12
1afd4     A7 12 02 FB | 	rdlong	arg01, fp
1afd8     0C 4E 85 F1 | 	sub	fp, #12
1afdc     54 05 BF FD | 	call	#_convertstring
1afe0     FD 14 02 F6 | 	mov	arg02, result1
1afe4     0F 13 02 F6 | 	mov	arg01, local01
1afe8     B4 58 B0 FD | 	call	#__system___string_concat
1afec     A7 FA 61 FC | 	wrlong	result1, fp
1aff0     08 4E 05 F1 | 	add	fp, #8
1aff4     A7 3E 68 FC | 	wrlong	#31, fp
1aff8     08 4E 85 F1 | 	sub	fp, #8
1affc     10 00 90 FD | 	jmp	#LR__2235
1b000                 | LR__2234
1b000     A7 08 68 FC | 	wrlong	#4, fp
1b004     08 4E 05 F1 | 	add	fp, #8
1b008     A7 FE 69 FC | 	wrlong	#255, fp
1b00c     08 4E 85 F1 | 	sub	fp, #8
1b010                 | LR__2235
1b010     A7 12 02 F6 | 	mov	arg01, fp
1b014     3C 04 BF FD | 	call	#_push
1b018     A7 F0 03 F6 | 	mov	ptra, fp
1b01c     B2 00 A0 FD | 	call	#popregs_
1b020                 | _do_plus_ret
1b020     2D 00 64 FD | 	ret
1b024                 | 
1b024                 | ' 
1b024                 | ' '--------------------------------- power (^)
1b024                 | ' 
1b024                 | ' sub do_power 
1b024                 | _do_power
1b024     02 4A 05 F6 | 	mov	COUNT_, #2
1b028     A8 00 A0 FD | 	call	#pushregs_
1b02c     18 F0 07 F1 | 	add	ptra, #24
1b030     88 03 BF FD | 	call	#_pop
1b034     FD 14 02 F6 | 	mov	arg02, result1
1b038     FE 12 02 F6 | 	mov	arg01, result2
1b03c     FF 1E 02 F6 | 	mov	local01, result3
1b040     0C 4E 05 F1 | 	add	fp, #12
1b044     A7 14 62 FC | 	wrlong	arg02, fp
1b048     04 4E 05 F1 | 	add	fp, #4
1b04c     A7 12 62 FC | 	wrlong	arg01, fp
1b050     04 4E 05 F1 | 	add	fp, #4
1b054     A7 1E 62 FC | 	wrlong	local01, fp
1b058     14 4E 85 F1 | 	sub	fp, #20
1b05c     5C 03 BF FD | 	call	#_pop
1b060     A7 FA 61 FC | 	wrlong	result1, fp
1b064     04 4E 05 F1 | 	add	fp, #4
1b068     A7 FC 61 FC | 	wrlong	result2, fp
1b06c     04 4E 05 F1 | 	add	fp, #4
1b070     A7 FE 61 FC | 	wrlong	result3, fp
1b074                 | ' 
1b074                 | ' t2=pop()
1b074                 | ' t1=pop()
1b074                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1b074     08 4E 85 F1 | 	sub	fp, #8
1b078     1F FE 0D F2 | 	cmp	result3, #31 wz
1b07c     14 4E 05 51 |  if_ne	add	fp, #20
1b080     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b084     14 4E 85 51 |  if_ne	sub	fp, #20
1b088     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1b08c     A7 18 68 AC |  if_e	wrlong	#12, fp
1b090     08 4E 05 A1 |  if_e	add	fp, #8
1b094     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b098     08 4E 85 A1 |  if_e	sub	fp, #8
1b09c     38 01 90 AD |  if_e	jmp	#LR__2245
1b0a0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1b0a0     08 4E 05 F1 | 	add	fp, #8
1b0a4     A7 14 02 FB | 	rdlong	arg02, fp
1b0a8     08 4E 85 F1 | 	sub	fp, #8
1b0ac     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b0b0     28 00 90 5D |  if_ne	jmp	#LR__2240
1b0b4     08 4E 05 F1 | 	add	fp, #8
1b0b8     A7 3C 68 FC | 	wrlong	#30, fp
1b0bc     08 4E 85 F1 | 	sub	fp, #8
1b0c0     A7 12 02 FB | 	rdlong	arg01, fp
1b0c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1b0c8     1F 20 C6 C9 |  if_b	decod	local02, #31
1b0cc     00 20 06 36 |  if_ae	mov	local02, #0
1b0d0     20 7F B0 FD | 	call	#__system___float_fromuns
1b0d4     10 FB 61 F5 | 	xor	result1, local02
1b0d8     A7 FA 61 FC | 	wrlong	result1, fp
1b0dc                 | LR__2240
1b0dc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1b0dc     08 4E 05 F1 | 	add	fp, #8
1b0e0     A7 14 02 FB | 	rdlong	arg02, fp
1b0e4     08 4E 85 F1 | 	sub	fp, #8
1b0e8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b0ec     18 00 90 5D |  if_ne	jmp	#LR__2241
1b0f0     08 4E 05 F1 | 	add	fp, #8
1b0f4     A7 3C 68 FC | 	wrlong	#30, fp
1b0f8     08 4E 85 F1 | 	sub	fp, #8
1b0fc     A7 12 02 FB | 	rdlong	arg01, fp
1b100     F0 7E B0 FD | 	call	#__system___float_fromuns
1b104     A7 FA 61 FC | 	wrlong	result1, fp
1b108                 | LR__2241
1b108                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1b108     14 4E 05 F1 | 	add	fp, #20
1b10c     A7 14 02 FB | 	rdlong	arg02, fp
1b110     14 4E 85 F1 | 	sub	fp, #20
1b114     1C 14 0E F2 | 	cmp	arg02, #28 wz
1b118     34 00 90 5D |  if_ne	jmp	#LR__2242
1b11c     14 4E 05 F1 | 	add	fp, #20
1b120     A7 3C 68 FC | 	wrlong	#30, fp
1b124     08 4E 85 F1 | 	sub	fp, #8
1b128     A7 12 02 FB | 	rdlong	arg01, fp
1b12c     0C 4E 85 F1 | 	sub	fp, #12
1b130     09 13 52 F6 | 	abs	arg01, arg01 wc
1b134     1F 20 C6 C9 |  if_b	decod	local02, #31
1b138     00 20 06 36 |  if_ae	mov	local02, #0
1b13c     B4 7E B0 FD | 	call	#__system___float_fromuns
1b140     10 FB 61 F5 | 	xor	result1, local02
1b144     0C 4E 05 F1 | 	add	fp, #12
1b148     A7 FA 61 FC | 	wrlong	result1, fp
1b14c     0C 4E 85 F1 | 	sub	fp, #12
1b150                 | LR__2242
1b150                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1b150     14 4E 05 F1 | 	add	fp, #20
1b154     A7 14 02 FB | 	rdlong	arg02, fp
1b158     14 4E 85 F1 | 	sub	fp, #20
1b15c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1b160     24 00 90 5D |  if_ne	jmp	#LR__2243
1b164     14 4E 05 F1 | 	add	fp, #20
1b168     A7 3C 68 FC | 	wrlong	#30, fp
1b16c     08 4E 85 F1 | 	sub	fp, #8
1b170     A7 12 02 FB | 	rdlong	arg01, fp
1b174     0C 4E 85 F1 | 	sub	fp, #12
1b178     78 7E B0 FD | 	call	#__system___float_fromuns
1b17c     0C 4E 05 F1 | 	add	fp, #12
1b180     A7 FA 61 FC | 	wrlong	result1, fp
1b184     0C 4E 85 F1 | 	sub	fp, #12
1b188                 | LR__2243
1b188                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1b188     08 4E 05 F1 | 	add	fp, #8
1b18c     A7 14 02 FB | 	rdlong	arg02, fp
1b190     08 4E 85 F1 | 	sub	fp, #8
1b194     1E 14 0E F2 | 	cmp	arg02, #30 wz
1b198     14 4E 05 A1 |  if_e	add	fp, #20
1b19c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b1a0     14 4E 85 A1 |  if_e	sub	fp, #20
1b1a4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1b1a8     1C 00 90 5D |  if_ne	jmp	#LR__2244
1b1ac     A7 12 02 FB | 	rdlong	arg01, fp
1b1b0     0C 4E 05 F1 | 	add	fp, #12
1b1b4     A7 14 02 FB | 	rdlong	arg02, fp
1b1b8     0C 4E 85 F1 | 	sub	fp, #12
1b1bc     40 91 B0 FD | 	call	#__system____builtin_powf
1b1c0     A7 FA 61 FC | 	wrlong	result1, fp
1b1c4     10 00 90 FD | 	jmp	#LR__2245
1b1c8                 | LR__2244
1b1c8     A7 1A 68 FC | 	wrlong	#13, fp
1b1cc     08 4E 05 F1 | 	add	fp, #8
1b1d0     A7 FE 69 FC | 	wrlong	#255, fp
1b1d4     08 4E 85 F1 | 	sub	fp, #8
1b1d8                 | LR__2245
1b1d8     A7 12 02 F6 | 	mov	arg01, fp
1b1dc     74 02 BF FD | 	call	#_push
1b1e0     A7 F0 03 F6 | 	mov	ptra, fp
1b1e4     B2 00 A0 FD | 	call	#popregs_
1b1e8                 | _do_power_ret
1b1e8     2D 00 64 FD | 	ret
1b1ec                 | 
1b1ec                 | ' 
1b1ec                 | ' '--------------------------------- SHL
1b1ec                 | ' 
1b1ec                 | ' sub do_shl 
1b1ec                 | _do_shl
1b1ec     03 4A 05 F6 | 	mov	COUNT_, #3
1b1f0     A8 00 A0 FD | 	call	#pushregs_
1b1f4     18 F0 07 F1 | 	add	ptra, #24
1b1f8     C0 01 BF FD | 	call	#_pop
1b1fc     FD 12 02 F6 | 	mov	arg01, result1
1b200     FE 1E 02 F6 | 	mov	local01, result2
1b204     FF 20 02 F6 | 	mov	local02, result3
1b208     0C 4E 05 F1 | 	add	fp, #12
1b20c     A7 12 62 FC | 	wrlong	arg01, fp
1b210     04 4E 05 F1 | 	add	fp, #4
1b214     A7 1E 62 FC | 	wrlong	local01, fp
1b218     04 4E 05 F1 | 	add	fp, #4
1b21c     A7 20 62 FC | 	wrlong	local02, fp
1b220     14 4E 85 F1 | 	sub	fp, #20
1b224     94 01 BF FD | 	call	#_pop
1b228     FF 22 02 F6 | 	mov	local03, result3
1b22c     A7 FA 61 FC | 	wrlong	result1, fp
1b230     04 4E 05 F1 | 	add	fp, #4
1b234     A7 FC 61 FC | 	wrlong	result2, fp
1b238     04 4E 05 F1 | 	add	fp, #4
1b23c     A7 22 62 FC | 	wrlong	local03, fp
1b240                 | ' 
1b240                 | ' t2=pop()
1b240                 | ' t1=pop()
1b240                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1b240     08 4E 85 F1 | 	sub	fp, #8
1b244     1C 22 0E F2 | 	cmp	local03, #28 wz
1b248     A7 22 02 AB |  if_e	rdlong	local03, fp
1b24c     A7 22 62 AC |  if_e	wrlong	local03, fp
1b250     08 4E 05 A1 |  if_e	add	fp, #8
1b254     A7 3A 68 AC |  if_e	wrlong	#29, fp
1b258     08 4E 85 A1 |  if_e	sub	fp, #8
1b25c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1b25c     14 4E 05 F1 | 	add	fp, #20
1b260     A7 22 02 FB | 	rdlong	local03, fp
1b264     14 4E 85 F1 | 	sub	fp, #20
1b268     1C 22 0E F2 | 	cmp	local03, #28 wz
1b26c     18 00 90 5D |  if_ne	jmp	#LR__2250
1b270     0C 4E 05 F1 | 	add	fp, #12
1b274     A7 22 02 FB | 	rdlong	local03, fp
1b278     A7 22 62 FC | 	wrlong	local03, fp
1b27c     08 4E 05 F1 | 	add	fp, #8
1b280     A7 3A 68 FC | 	wrlong	#29, fp
1b284     14 4E 85 F1 | 	sub	fp, #20
1b288                 | LR__2250
1b288                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1b288     08 4E 05 F1 | 	add	fp, #8
1b28c     A7 22 02 FB | 	rdlong	local03, fp
1b290     08 4E 85 F1 | 	sub	fp, #8
1b294     1F 22 0E F2 | 	cmp	local03, #31 wz
1b298     14 4E 05 51 |  if_ne	add	fp, #20
1b29c     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b2a0     14 4E 85 51 |  if_ne	sub	fp, #20
1b2a4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1b2a8     08 4E 05 51 |  if_ne	add	fp, #8
1b2ac     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b2b0     08 4E 85 51 |  if_ne	sub	fp, #8
1b2b4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1b2b8     14 4E 05 51 |  if_ne	add	fp, #20
1b2bc     14 4E 85 51 |  if_ne	sub	fp, #20
1b2c0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1b2c4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b2c8     08 4E 05 A1 |  if_e	add	fp, #8
1b2cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b2d0     08 4E 85 A1 |  if_e	sub	fp, #8
1b2d4     18 00 90 AD |  if_e	jmp	#LR__2251
1b2d8     A7 22 02 FB | 	rdlong	local03, fp
1b2dc     0C 4E 05 F1 | 	add	fp, #12
1b2e0     A7 1E 02 FB | 	rdlong	local01, fp
1b2e4     0C 4E 85 F1 | 	sub	fp, #12
1b2e8     0F 23 62 F0 | 	shl	local03, local01
1b2ec     A7 22 62 FC | 	wrlong	local03, fp
1b2f0                 | LR__2251
1b2f0     A7 12 02 F6 | 	mov	arg01, fp
1b2f4     5C 01 BF FD | 	call	#_push
1b2f8     A7 F0 03 F6 | 	mov	ptra, fp
1b2fc     B2 00 A0 FD | 	call	#popregs_
1b300                 | _do_shl_ret
1b300     2D 00 64 FD | 	ret
1b304                 | 
1b304                 | ' 
1b304                 | ' '--------------------------------- SHR
1b304                 | ' 
1b304                 | ' sub do_shr 
1b304                 | _do_shr
1b304     03 4A 05 F6 | 	mov	COUNT_, #3
1b308     A8 00 A0 FD | 	call	#pushregs_
1b30c     18 F0 07 F1 | 	add	ptra, #24
1b310     A8 00 BF FD | 	call	#_pop
1b314     FD 12 02 F6 | 	mov	arg01, result1
1b318     FE 1E 02 F6 | 	mov	local01, result2
1b31c     FF 20 02 F6 | 	mov	local02, result3
1b320     0C 4E 05 F1 | 	add	fp, #12
1b324     A7 12 62 FC | 	wrlong	arg01, fp
1b328     04 4E 05 F1 | 	add	fp, #4
1b32c     A7 1E 62 FC | 	wrlong	local01, fp
1b330     04 4E 05 F1 | 	add	fp, #4
1b334     A7 20 62 FC | 	wrlong	local02, fp
1b338     14 4E 85 F1 | 	sub	fp, #20
1b33c     7C 00 BF FD | 	call	#_pop
1b340     FF 22 02 F6 | 	mov	local03, result3
1b344     A7 FA 61 FC | 	wrlong	result1, fp
1b348     04 4E 05 F1 | 	add	fp, #4
1b34c     A7 FC 61 FC | 	wrlong	result2, fp
1b350     04 4E 05 F1 | 	add	fp, #4
1b354     A7 22 62 FC | 	wrlong	local03, fp
1b358                 | ' 
1b358                 | ' t2=pop()
1b358                 | ' t1=pop()
1b358                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1b358     08 4E 85 F1 | 	sub	fp, #8
1b35c     1C 22 0E F2 | 	cmp	local03, #28 wz
1b360     A7 22 02 AB |  if_e	rdlong	local03, fp
1b364     A7 22 62 AC |  if_e	wrlong	local03, fp
1b368     08 4E 05 A1 |  if_e	add	fp, #8
1b36c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1b370     08 4E 85 A1 |  if_e	sub	fp, #8
1b374                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1b374     14 4E 05 F1 | 	add	fp, #20
1b378     A7 22 02 FB | 	rdlong	local03, fp
1b37c     14 4E 85 F1 | 	sub	fp, #20
1b380     1C 22 0E F2 | 	cmp	local03, #28 wz
1b384     18 00 90 5D |  if_ne	jmp	#LR__2260
1b388     0C 4E 05 F1 | 	add	fp, #12
1b38c     A7 22 02 FB | 	rdlong	local03, fp
1b390     A7 22 62 FC | 	wrlong	local03, fp
1b394     08 4E 05 F1 | 	add	fp, #8
1b398     A7 3A 68 FC | 	wrlong	#29, fp
1b39c     14 4E 85 F1 | 	sub	fp, #20
1b3a0                 | LR__2260
1b3a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1b3a0     08 4E 05 F1 | 	add	fp, #8
1b3a4     A7 22 02 FB | 	rdlong	local03, fp
1b3a8     08 4E 85 F1 | 	sub	fp, #8
1b3ac     1F 22 0E F2 | 	cmp	local03, #31 wz
1b3b0     14 4E 05 51 |  if_ne	add	fp, #20
1b3b4     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b3b8     14 4E 85 51 |  if_ne	sub	fp, #20
1b3bc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1b3c0     08 4E 05 51 |  if_ne	add	fp, #8
1b3c4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b3c8     08 4E 85 51 |  if_ne	sub	fp, #8
1b3cc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1b3d0     14 4E 05 51 |  if_ne	add	fp, #20
1b3d4     14 4E 85 51 |  if_ne	sub	fp, #20
1b3d8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1b3dc     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b3e0     08 4E 05 A1 |  if_e	add	fp, #8
1b3e4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b3e8     08 4E 85 A1 |  if_e	sub	fp, #8
1b3ec     18 00 90 AD |  if_e	jmp	#LR__2261
1b3f0     A7 22 02 FB | 	rdlong	local03, fp
1b3f4     0C 4E 05 F1 | 	add	fp, #12
1b3f8     A7 1E 02 FB | 	rdlong	local01, fp
1b3fc     0C 4E 85 F1 | 	sub	fp, #12
1b400     0F 23 42 F0 | 	shr	local03, local01
1b404     A7 22 62 FC | 	wrlong	local03, fp
1b408                 | LR__2261
1b408     A7 12 02 F6 | 	mov	arg01, fp
1b40c     44 00 BF FD | 	call	#_push
1b410     A7 F0 03 F6 | 	mov	ptra, fp
1b414     B2 00 A0 FD | 	call	#popregs_
1b418                 | _do_shr_ret
1b418     2D 00 64 FD | 	ret
1b41c                 | 
1b41c                 | ' 
1b41c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b41c                 | ' 
1b41c                 | ' ''----------------------------------------------------------------------------------------------------
1b41c                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1b41c                 | ' ''----------------------------------------------------------------------------------------------------
1b41c                 | ' 
1b41c                 | ' ''--------------------------- Command function pointers
1b41c                 | ' 
1b41c                 | ' sub init_commands
1b41c                 | _init_commands
1b41c                 | ' 
1b41c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b41c     00 00 06 F6 | 	mov	_var01, #0
1b420     97 16 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1b424                 | LR__2270
1b424     00 FB 01 F6 | 	mov	result1, _var01
1b428     02 FA 65 F0 | 	shl	result1, #2
1b42c     43 00 00 FF 
1b430     60 E4 05 F1 | 	add	objptr, ##34400
1b434     F2 FA 01 F1 | 	add	result1, objptr
1b438     43 00 00 FF 
1b43c     60 E4 85 F1 | 	sub	objptr, ##34400
1b440     FD E4 61 FC | 	wrlong	objptr, result1
1b444     01 00 06 F1 | 	add	_var01, #1
1b448     00 01 56 F2 | 	cmps	_var01, #256 wc
1b44c     D4 FF 9F CD |  if_b	jmp	#LR__2270
1b450                 | LR__2271
1b450     F2 FA 01 F6 | 	mov	result1, objptr
1b454     14 FA 25 F4 | 	bith	result1, #20
1b458     43 00 00 FF 
1b45c     64 E4 05 F1 | 	add	objptr, ##34404
1b460     F2 FA 61 FC | 	wrlong	result1, objptr
1b464     43 00 00 FF 
1b468     64 E4 85 F1 | 	sub	objptr, ##34404
1b46c     F2 FA 01 F6 | 	mov	result1, objptr
1b470     15 FA 25 F4 | 	bith	result1, #21
1b474     43 00 00 FF 
1b478     68 E4 05 F1 | 	add	objptr, ##34408
1b47c     F2 FA 61 FC | 	wrlong	result1, objptr
1b480     43 00 00 FF 
1b484     68 E4 85 F1 | 	sub	objptr, ##34408
1b488     F2 FA 01 F6 | 	mov	result1, objptr
1b48c     34 FA 25 F4 | 	bith	result1, #52
1b490     43 00 00 FF 
1b494     6C E4 05 F1 | 	add	objptr, ##34412
1b498     F2 FA 61 FC | 	wrlong	result1, objptr
1b49c     43 00 00 FF 
1b4a0     6C E4 85 F1 | 	sub	objptr, ##34412
1b4a4     F2 FA 01 F6 | 	mov	result1, objptr
1b4a8     16 FA 25 F4 | 	bith	result1, #22
1b4ac     43 00 00 FF 
1b4b0     74 E4 05 F1 | 	add	objptr, ##34420
1b4b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b4b8     43 00 00 FF 
1b4bc     74 E4 85 F1 | 	sub	objptr, ##34420
1b4c0     F2 FA 01 F6 | 	mov	result1, objptr
1b4c4     00 28 00 FF 
1b4c8     00 FA 45 F5 | 	or	result1, ##5242880
1b4cc     43 00 00 FF 
1b4d0     78 E4 05 F1 | 	add	objptr, ##34424
1b4d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b4d8     43 00 00 FF 
1b4dc     78 E4 85 F1 | 	sub	objptr, ##34424
1b4e0     F2 FA 01 F6 | 	mov	result1, objptr
1b4e4     35 FA 25 F4 | 	bith	result1, #53
1b4e8     43 00 00 FF 
1b4ec     7C E4 05 F1 | 	add	objptr, ##34428
1b4f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b4f4     43 00 00 FF 
1b4f8     7C E4 85 F1 | 	sub	objptr, ##34428
1b4fc     F2 FA 01 F6 | 	mov	result1, objptr
1b500     54 FA 25 F4 | 	bith	result1, #84
1b504     43 00 00 FF 
1b508     80 E4 05 F1 | 	add	objptr, ##34432
1b50c     F2 FA 61 FC | 	wrlong	result1, objptr
1b510     43 00 00 FF 
1b514     80 E4 85 F1 | 	sub	objptr, ##34432
1b518     F2 FA 01 F6 | 	mov	result1, objptr
1b51c     17 FA 25 F4 | 	bith	result1, #23
1b520     43 00 00 FF 
1b524     84 E4 05 F1 | 	add	objptr, ##34436
1b528     F2 FA 61 FC | 	wrlong	result1, objptr
1b52c     43 00 00 FF 
1b530     84 E4 85 F1 | 	sub	objptr, ##34436
1b534     F2 FA 01 F6 | 	mov	result1, objptr
1b538     00 48 00 FF 
1b53c     00 FA 45 F5 | 	or	result1, ##9437184
1b540     43 00 00 FF 
1b544     88 E4 05 F1 | 	add	objptr, ##34440
1b548     F2 FA 61 FC | 	wrlong	result1, objptr
1b54c     43 00 00 FF 
1b550     88 E4 85 F1 | 	sub	objptr, ##34440
1b554     F2 FA 01 F6 | 	mov	result1, objptr
1b558     00 50 00 FF 
1b55c     00 FA 45 F5 | 	or	result1, ##10485760
1b560     43 00 00 FF 
1b564     8C E4 05 F1 | 	add	objptr, ##34444
1b568     F2 FA 61 FC | 	wrlong	result1, objptr
1b56c     43 00 00 FF 
1b570     8C E4 85 F1 | 	sub	objptr, ##34444
1b574     F2 FA 01 F6 | 	mov	result1, objptr
1b578     00 58 00 FF 
1b57c     00 FA 45 F5 | 	or	result1, ##11534336
1b580     43 00 00 FF 
1b584     90 E4 05 F1 | 	add	objptr, ##34448
1b588     F2 FA 61 FC | 	wrlong	result1, objptr
1b58c     43 00 00 FF 
1b590     90 E4 85 F1 | 	sub	objptr, ##34448
1b594     F2 FA 01 F6 | 	mov	result1, objptr
1b598     36 FA 25 F4 | 	bith	result1, #54
1b59c     43 00 00 FF 
1b5a0     A4 E4 05 F1 | 	add	objptr, ##34468
1b5a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5a8     43 00 00 FF 
1b5ac     A4 E4 85 F1 | 	sub	objptr, ##34468
1b5b0     F2 FA 01 F6 | 	mov	result1, objptr
1b5b4     00 68 00 FF 
1b5b8     00 FA 45 F5 | 	or	result1, ##13631488
1b5bc     43 00 00 FF 
1b5c0     D4 E4 05 F1 | 	add	objptr, ##34516
1b5c4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5c8     43 00 00 FF 
1b5cc     D4 E4 85 F1 | 	sub	objptr, ##34516
1b5d0     F2 FA 01 F6 | 	mov	result1, objptr
1b5d4     00 68 00 FF 
1b5d8     00 FA 45 F5 | 	or	result1, ##13631488
1b5dc     43 00 00 FF 
1b5e0     D0 E4 05 F1 | 	add	objptr, ##34512
1b5e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5e8     43 00 00 FF 
1b5ec     D0 E4 85 F1 | 	sub	objptr, ##34512
1b5f0     F2 FA 01 F6 | 	mov	result1, objptr
1b5f4     00 68 00 FF 
1b5f8     00 FA 45 F5 | 	or	result1, ##13631488
1b5fc     43 00 00 FF 
1b600     D8 E4 05 F1 | 	add	objptr, ##34520
1b604     F2 FA 61 FC | 	wrlong	result1, objptr
1b608     43 00 00 FF 
1b60c     D8 E4 85 F1 | 	sub	objptr, ##34520
1b610     F2 FA 01 F6 | 	mov	result1, objptr
1b614     00 68 00 FF 
1b618     00 FA 45 F5 | 	or	result1, ##13631488
1b61c     43 00 00 FF 
1b620     DC E4 05 F1 | 	add	objptr, ##34524
1b624     F2 FA 61 FC | 	wrlong	result1, objptr
1b628     43 00 00 FF 
1b62c     DC E4 85 F1 | 	sub	objptr, ##34524
1b630     F2 FA 01 F6 | 	mov	result1, objptr
1b634     00 68 00 FF 
1b638     00 FA 45 F5 | 	or	result1, ##13631488
1b63c     43 00 00 FF 
1b640     0C E5 05 F1 | 	add	objptr, ##34572
1b644     F2 FA 61 FC | 	wrlong	result1, objptr
1b648     43 00 00 FF 
1b64c     0C E5 85 F1 | 	sub	objptr, ##34572
1b650     F2 FA 01 F6 | 	mov	result1, objptr
1b654     55 FA 25 F4 | 	bith	result1, #85
1b658     43 00 00 FF 
1b65c     BC E4 05 F1 | 	add	objptr, ##34492
1b660     F2 FA 61 FC | 	wrlong	result1, objptr
1b664     43 00 00 FF 
1b668     BC E4 85 F1 | 	sub	objptr, ##34492
1b66c     F2 FA 01 F6 | 	mov	result1, objptr
1b670     00 68 00 FF 
1b674     00 FA 45 F5 | 	or	result1, ##13631488
1b678     43 00 00 FF 
1b67c     10 E5 05 F1 | 	add	objptr, ##34576
1b680     F2 FA 61 FC | 	wrlong	result1, objptr
1b684     43 00 00 FF 
1b688     10 E5 85 F1 | 	sub	objptr, ##34576
1b68c     F2 FA 01 F6 | 	mov	result1, objptr
1b690     00 68 00 FF 
1b694     00 FA 45 F5 | 	or	result1, ##13631488
1b698     43 00 00 FF 
1b69c     E0 E4 05 F1 | 	add	objptr, ##34528
1b6a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6a4     43 00 00 FF 
1b6a8     E0 E4 85 F1 | 	sub	objptr, ##34528
1b6ac     F2 FA 01 F6 | 	mov	result1, objptr
1b6b0     00 68 00 FF 
1b6b4     00 FA 45 F5 | 	or	result1, ##13631488
1b6b8     43 00 00 FF 
1b6bc     E4 E4 05 F1 | 	add	objptr, ##34532
1b6c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6c4     43 00 00 FF 
1b6c8     E4 E4 85 F1 | 	sub	objptr, ##34532
1b6cc     F2 FA 01 F6 | 	mov	result1, objptr
1b6d0     00 68 00 FF 
1b6d4     00 FA 45 F5 | 	or	result1, ##13631488
1b6d8     43 00 00 FF 
1b6dc     E8 E4 05 F1 | 	add	objptr, ##34536
1b6e0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6e4     43 00 00 FF 
1b6e8     E8 E4 85 F1 | 	sub	objptr, ##34536
1b6ec     F2 FA 01 F6 | 	mov	result1, objptr
1b6f0     74 FA 25 F4 | 	bith	result1, #116
1b6f4     43 00 00 FF 
1b6f8     60 E5 05 F1 | 	add	objptr, ##34656
1b6fc     F2 FA 61 FC | 	wrlong	result1, objptr
1b700     43 00 00 FF 
1b704     60 E5 85 F1 | 	sub	objptr, ##34656
1b708     F2 FA 01 F6 | 	mov	result1, objptr
1b70c     18 FA 25 F4 | 	bith	result1, #24
1b710     43 00 00 FF 
1b714     64 E5 05 F1 | 	add	objptr, ##34660
1b718     F2 FA 61 FC | 	wrlong	result1, objptr
1b71c     43 00 00 FF 
1b720     64 E5 85 F1 | 	sub	objptr, ##34660
1b724     F2 FA 01 F6 | 	mov	result1, objptr
1b728     00 88 00 FF 
1b72c     00 FA 45 F5 | 	or	result1, ##17825792
1b730     43 00 00 FF 
1b734     68 E5 05 F1 | 	add	objptr, ##34664
1b738     F2 FA 61 FC | 	wrlong	result1, objptr
1b73c     43 00 00 FF 
1b740     68 E5 85 F1 | 	sub	objptr, ##34664
1b744     F2 FA 01 F6 | 	mov	result1, objptr
1b748     00 90 00 FF 
1b74c     00 FA 45 F5 | 	or	result1, ##18874368
1b750     43 00 00 FF 
1b754     6C E5 05 F1 | 	add	objptr, ##34668
1b758     F2 FA 61 FC | 	wrlong	result1, objptr
1b75c     43 00 00 FF 
1b760     6C E5 85 F1 | 	sub	objptr, ##34668
1b764     F2 FA 01 F6 | 	mov	result1, objptr
1b768     00 98 00 FF 
1b76c     00 FA 45 F5 | 	or	result1, ##19922944
1b770     43 00 00 FF 
1b774     70 E5 05 F1 | 	add	objptr, ##34672
1b778     F2 FA 61 FC | 	wrlong	result1, objptr
1b77c     43 00 00 FF 
1b780     70 E5 85 F1 | 	sub	objptr, ##34672
1b784     F2 FA 01 F6 | 	mov	result1, objptr
1b788     00 A0 00 FF 
1b78c     00 FA 45 F5 | 	or	result1, ##20971520
1b790     43 00 00 FF 
1b794     74 E5 05 F1 | 	add	objptr, ##34676
1b798     F2 FA 61 FC | 	wrlong	result1, objptr
1b79c     43 00 00 FF 
1b7a0     74 E5 85 F1 | 	sub	objptr, ##34676
1b7a4     F2 FA 01 F6 | 	mov	result1, objptr
1b7a8     00 A8 00 FF 
1b7ac     00 FA 45 F5 | 	or	result1, ##22020096
1b7b0     43 00 00 FF 
1b7b4     78 E5 05 F1 | 	add	objptr, ##34680
1b7b8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7bc     43 00 00 FF 
1b7c0     78 E5 85 F1 | 	sub	objptr, ##34680
1b7c4     F2 FA 01 F6 | 	mov	result1, objptr
1b7c8     00 B0 00 FF 
1b7cc     00 FA 45 F5 | 	or	result1, ##23068672
1b7d0     43 00 00 FF 
1b7d4     7C E5 05 F1 | 	add	objptr, ##34684
1b7d8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7dc     43 00 00 FF 
1b7e0     7C E5 85 F1 | 	sub	objptr, ##34684
1b7e4     F2 FA 01 F6 | 	mov	result1, objptr
1b7e8     00 B8 00 FF 
1b7ec     00 FA 45 F5 | 	or	result1, ##24117248
1b7f0     43 00 00 FF 
1b7f4     80 E5 05 F1 | 	add	objptr, ##34688
1b7f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7fc     43 00 00 FF 
1b800     80 E5 85 F1 | 	sub	objptr, ##34688
1b804     F2 FA 01 F6 | 	mov	result1, objptr
1b808     37 FA 25 F4 | 	bith	result1, #55
1b80c     43 00 00 FF 
1b810     84 E5 05 F1 | 	add	objptr, ##34692
1b814     F2 FA 61 FC | 	wrlong	result1, objptr
1b818     43 00 00 FF 
1b81c     84 E5 85 F1 | 	sub	objptr, ##34692
1b820     F2 FA 01 F6 | 	mov	result1, objptr
1b824     00 C8 00 FF 
1b828     00 FA 45 F5 | 	or	result1, ##26214400
1b82c     43 00 00 FF 
1b830     88 E5 05 F1 | 	add	objptr, ##34696
1b834     F2 FA 61 FC | 	wrlong	result1, objptr
1b838     43 00 00 FF 
1b83c     88 E5 85 F1 | 	sub	objptr, ##34696
1b840     F2 FA 01 F6 | 	mov	result1, objptr
1b844     00 D0 00 FF 
1b848     00 FA 45 F5 | 	or	result1, ##27262976
1b84c     43 00 00 FF 
1b850     8C E5 05 F1 | 	add	objptr, ##34700
1b854     F2 FA 61 FC | 	wrlong	result1, objptr
1b858     43 00 00 FF 
1b85c     8C E5 85 F1 | 	sub	objptr, ##34700
1b860     F2 FA 01 F6 | 	mov	result1, objptr
1b864     00 D8 00 FF 
1b868     00 FA 45 F5 | 	or	result1, ##28311552
1b86c     43 00 00 FF 
1b870     90 E5 05 F1 | 	add	objptr, ##34704
1b874     F2 FA 61 FC | 	wrlong	result1, objptr
1b878     43 00 00 FF 
1b87c     90 E5 85 F1 | 	sub	objptr, ##34704
1b880     F2 FA 01 F6 | 	mov	result1, objptr
1b884     56 FA 25 F4 | 	bith	result1, #86
1b888     43 00 00 FF 
1b88c     94 E5 05 F1 | 	add	objptr, ##34708
1b890     F2 FA 61 FC | 	wrlong	result1, objptr
1b894     43 00 00 FF 
1b898     94 E5 85 F1 | 	sub	objptr, ##34708
1b89c     F2 FA 01 F6 | 	mov	result1, objptr
1b8a0     00 E8 00 FF 
1b8a4     00 FA 45 F5 | 	or	result1, ##30408704
1b8a8     45 00 00 FF 
1b8ac     5C E4 05 F1 | 	add	objptr, ##35420
1b8b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8b4     45 00 00 FF 
1b8b8     5C E4 85 F1 | 	sub	objptr, ##35420
1b8bc     F2 FA 01 F6 | 	mov	result1, objptr
1b8c0     75 FA 25 F4 | 	bith	result1, #117
1b8c4     43 00 00 FF 
1b8c8     98 E5 05 F1 | 	add	objptr, ##34712
1b8cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b8d0     43 00 00 FF 
1b8d4     98 E5 85 F1 | 	sub	objptr, ##34712
1b8d8     F2 FA 01 F6 | 	mov	result1, objptr
1b8dc     94 FA 25 F4 | 	bith	result1, #148
1b8e0     43 00 00 FF 
1b8e4     AC E5 05 F1 | 	add	objptr, ##34732
1b8e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b8ec     43 00 00 FF 
1b8f0     AC E5 85 F1 | 	sub	objptr, ##34732
1b8f4     F2 FA 01 F6 | 	mov	result1, objptr
1b8f8     19 FA 25 F4 | 	bith	result1, #25
1b8fc     43 00 00 FF 
1b900     9C E5 05 F1 | 	add	objptr, ##34716
1b904     F2 FA 61 FC | 	wrlong	result1, objptr
1b908     43 00 00 FF 
1b90c     9C E5 85 F1 | 	sub	objptr, ##34716
1b910     F2 FA 01 F6 | 	mov	result1, objptr
1b914     00 08 01 FF 
1b918     00 FA 45 F5 | 	or	result1, ##34603008
1b91c     43 00 00 FF 
1b920     B8 E4 05 F1 | 	add	objptr, ##34488
1b924     F2 FA 61 FC | 	wrlong	result1, objptr
1b928     43 00 00 FF 
1b92c     B8 E4 85 F1 | 	sub	objptr, ##34488
1b930     F2 FA 01 F6 | 	mov	result1, objptr
1b934     00 10 01 FF 
1b938     00 FA 45 F5 | 	or	result1, ##35651584
1b93c     43 00 00 FF 
1b940     A0 E5 05 F1 | 	add	objptr, ##34720
1b944     F2 FA 61 FC | 	wrlong	result1, objptr
1b948     43 00 00 FF 
1b94c     A0 E5 85 F1 | 	sub	objptr, ##34720
1b950     F2 FA 01 F6 | 	mov	result1, objptr
1b954     00 18 01 FF 
1b958     00 FA 45 F5 | 	or	result1, ##36700160
1b95c     43 00 00 FF 
1b960     A4 E5 05 F1 | 	add	objptr, ##34724
1b964     F2 FA 61 FC | 	wrlong	result1, objptr
1b968     43 00 00 FF 
1b96c     A4 E5 85 F1 | 	sub	objptr, ##34724
1b970     F2 FA 01 F6 | 	mov	result1, objptr
1b974     00 20 01 FF 
1b978     00 FA 45 F5 | 	or	result1, ##37748736
1b97c     43 00 00 FF 
1b980     A8 E5 05 F1 | 	add	objptr, ##34728
1b984     F2 FA 61 FC | 	wrlong	result1, objptr
1b988     43 00 00 FF 
1b98c     A8 E5 85 F1 | 	sub	objptr, ##34728
1b990     F2 FA 01 F6 | 	mov	result1, objptr
1b994     00 28 01 FF 
1b998     00 FA 45 F5 | 	or	result1, ##38797312
1b99c     43 00 00 FF 
1b9a0     B4 E5 05 F1 | 	add	objptr, ##34740
1b9a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9a8     43 00 00 FF 
1b9ac     B4 E5 85 F1 | 	sub	objptr, ##34740
1b9b0     F2 FA 01 F6 | 	mov	result1, objptr
1b9b4     00 30 01 FF 
1b9b8     00 FA 45 F5 | 	or	result1, ##39845888
1b9bc     43 00 00 FF 
1b9c0     B8 E5 05 F1 | 	add	objptr, ##34744
1b9c4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9c8     43 00 00 FF 
1b9cc     B8 E5 85 F1 | 	sub	objptr, ##34744
1b9d0     F2 FA 01 F6 | 	mov	result1, objptr
1b9d4     00 38 01 FF 
1b9d8     00 FA 45 F5 | 	or	result1, ##40894464
1b9dc     43 00 00 FF 
1b9e0     BC E5 05 F1 | 	add	objptr, ##34748
1b9e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9e8     43 00 00 FF 
1b9ec     BC E5 85 F1 | 	sub	objptr, ##34748
1b9f0     F2 FA 01 F6 | 	mov	result1, objptr
1b9f4     00 40 01 FF 
1b9f8     00 FA 45 F5 | 	or	result1, ##41943040
1b9fc     43 00 00 FF 
1ba00     C0 E5 05 F1 | 	add	objptr, ##34752
1ba04     F2 FA 61 FC | 	wrlong	result1, objptr
1ba08     43 00 00 FF 
1ba0c     C0 E5 85 F1 | 	sub	objptr, ##34752
1ba10     F2 FA 01 F6 | 	mov	result1, objptr
1ba14     00 48 01 FF 
1ba18     00 FA 45 F5 | 	or	result1, ##42991616
1ba1c     43 00 00 FF 
1ba20     C8 E5 05 F1 | 	add	objptr, ##34760
1ba24     F2 FA 61 FC | 	wrlong	result1, objptr
1ba28     43 00 00 FF 
1ba2c     C8 E5 85 F1 | 	sub	objptr, ##34760
1ba30     F2 FA 01 F6 | 	mov	result1, objptr
1ba34     00 08 01 FF 
1ba38     00 FA 45 F5 | 	or	result1, ##34603008
1ba3c     43 00 00 FF 
1ba40     CC E5 05 F1 | 	add	objptr, ##34764
1ba44     F2 FA 61 FC | 	wrlong	result1, objptr
1ba48     43 00 00 FF 
1ba4c     CC E5 85 F1 | 	sub	objptr, ##34764
1ba50     F2 FA 01 F6 | 	mov	result1, objptr
1ba54     00 50 01 FF 
1ba58     00 FA 45 F5 | 	or	result1, ##44040192
1ba5c     43 00 00 FF 
1ba60     CC E4 05 F1 | 	add	objptr, ##34508
1ba64     F2 FA 61 FC | 	wrlong	result1, objptr
1ba68     43 00 00 FF 
1ba6c     CC E4 85 F1 | 	sub	objptr, ##34508
1ba70     F2 FA 01 F6 | 	mov	result1, objptr
1ba74     00 58 01 FF 
1ba78     00 FA 45 F5 | 	or	result1, ##45088768
1ba7c     43 00 00 FF 
1ba80     FC E4 05 F1 | 	add	objptr, ##34556
1ba84     F2 FA 61 FC | 	wrlong	result1, objptr
1ba88     43 00 00 FF 
1ba8c     FC E4 85 F1 | 	sub	objptr, ##34556
1ba90     F2 FA 01 F6 | 	mov	result1, objptr
1ba94     00 60 01 FF 
1ba98     00 FA 45 F5 | 	or	result1, ##46137344
1ba9c     43 00 00 FF 
1baa0     F8 E4 05 F1 | 	add	objptr, ##34552
1baa4     F2 FA 61 FC | 	wrlong	result1, objptr
1baa8     43 00 00 FF 
1baac     F8 E4 85 F1 | 	sub	objptr, ##34552
1bab0     F2 FA 01 F6 | 	mov	result1, objptr
1bab4     00 68 01 FF 
1bab8     00 FA 45 F5 | 	or	result1, ##47185920
1babc     43 00 00 FF 
1bac0     9C E4 05 F1 | 	add	objptr, ##34460
1bac4     F2 FA 61 FC | 	wrlong	result1, objptr
1bac8     43 00 00 FF 
1bacc     9C E4 85 F1 | 	sub	objptr, ##34460
1bad0     F2 FA 01 F6 | 	mov	result1, objptr
1bad4     00 70 01 FF 
1bad8     00 FA 45 F5 | 	or	result1, ##48234496
1badc     43 00 00 FF 
1bae0     A0 E4 05 F1 | 	add	objptr, ##34464
1bae4     F2 FA 61 FC | 	wrlong	result1, objptr
1bae8     43 00 00 FF 
1baec     A0 E4 85 F1 | 	sub	objptr, ##34464
1baf0     F2 FA 01 F6 | 	mov	result1, objptr
1baf4     00 78 01 FF 
1baf8     00 FA 45 F5 | 	or	result1, ##49283072
1bafc     43 00 00 FF 
1bb00     08 E5 05 F1 | 	add	objptr, ##34568
1bb04     F2 FA 61 FC | 	wrlong	result1, objptr
1bb08     43 00 00 FF 
1bb0c     08 E5 85 F1 | 	sub	objptr, ##34568
1bb10     F2 FA 01 F6 | 	mov	result1, objptr
1bb14     38 FA 25 F4 | 	bith	result1, #56
1bb18     43 00 00 FF 
1bb1c     B0 E5 05 F1 | 	add	objptr, ##34736
1bb20     F2 FA 61 FC | 	wrlong	result1, objptr
1bb24     43 00 00 FF 
1bb28     B0 E5 85 F1 | 	sub	objptr, ##34736
1bb2c     F2 FA 01 F6 | 	mov	result1, objptr
1bb30     00 88 01 FF 
1bb34     00 FA 45 F5 | 	or	result1, ##51380224
1bb38     43 00 00 FF 
1bb3c     C4 E5 05 F1 | 	add	objptr, ##34756
1bb40     F2 FA 61 FC | 	wrlong	result1, objptr
1bb44     43 00 00 FF 
1bb48     C4 E5 85 F1 | 	sub	objptr, ##34756
1bb4c     F2 FA 01 F6 | 	mov	result1, objptr
1bb50     00 90 01 FF 
1bb54     00 FA 45 F5 | 	or	result1, ##52428800
1bb58     43 00 00 FF 
1bb5c     D0 E5 05 F1 | 	add	objptr, ##34768
1bb60     F2 FA 61 FC | 	wrlong	result1, objptr
1bb64     43 00 00 FF 
1bb68     D0 E5 85 F1 | 	sub	objptr, ##34768
1bb6c     F2 FA 01 F6 | 	mov	result1, objptr
1bb70     00 98 01 FF 
1bb74     00 FA 45 F5 | 	or	result1, ##53477376
1bb78     43 00 00 FF 
1bb7c     D4 E5 05 F1 | 	add	objptr, ##34772
1bb80     F2 FA 61 FC | 	wrlong	result1, objptr
1bb84     43 00 00 FF 
1bb88     D4 E5 85 F1 | 	sub	objptr, ##34772
1bb8c     F2 FA 01 F6 | 	mov	result1, objptr
1bb90     00 A0 01 FF 
1bb94     00 FA 45 F5 | 	or	result1, ##54525952
1bb98     43 00 00 FF 
1bb9c     D8 E5 05 F1 | 	add	objptr, ##34776
1bba0     F2 FA 61 FC | 	wrlong	result1, objptr
1bba4     43 00 00 FF 
1bba8     D8 E5 85 F1 | 	sub	objptr, ##34776
1bbac     F2 FA 01 F6 | 	mov	result1, objptr
1bbb0     00 A8 01 FF 
1bbb4     00 FA 45 F5 | 	or	result1, ##55574528
1bbb8     43 00 00 FF 
1bbbc     DC E5 05 F1 | 	add	objptr, ##34780
1bbc0     F2 FA 61 FC | 	wrlong	result1, objptr
1bbc4     43 00 00 FF 
1bbc8     DC E5 85 F1 | 	sub	objptr, ##34780
1bbcc     F2 FA 01 F6 | 	mov	result1, objptr
1bbd0     00 B0 01 FF 
1bbd4     00 FA 45 F5 | 	or	result1, ##56623104
1bbd8     43 00 00 FF 
1bbdc     E0 E5 05 F1 | 	add	objptr, ##34784
1bbe0     F2 FA 61 FC | 	wrlong	result1, objptr
1bbe4     43 00 00 FF 
1bbe8     E0 E5 85 F1 | 	sub	objptr, ##34784
1bbec     F2 FA 01 F6 | 	mov	result1, objptr
1bbf0     00 B8 01 FF 
1bbf4     00 FA 45 F5 | 	or	result1, ##57671680
1bbf8     43 00 00 FF 
1bbfc     E4 E5 05 F1 | 	add	objptr, ##34788
1bc00     F2 FA 61 FC | 	wrlong	result1, objptr
1bc04     43 00 00 FF 
1bc08     E4 E5 85 F1 | 	sub	objptr, ##34788
1bc0c     F2 FA 01 F6 | 	mov	result1, objptr
1bc10     94 FA 25 F4 | 	bith	result1, #148
1bc14     43 00 00 FF 
1bc18     AC E5 05 F1 | 	add	objptr, ##34732
1bc1c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc20     43 00 00 FF 
1bc24     AC E5 85 F1 | 	sub	objptr, ##34732
1bc28     F2 FA 01 F6 | 	mov	result1, objptr
1bc2c     57 FA 25 F4 | 	bith	result1, #87
1bc30     43 00 00 FF 
1bc34     EC E5 05 F1 | 	add	objptr, ##34796
1bc38     F2 FA 61 FC | 	wrlong	result1, objptr
1bc3c     43 00 00 FF 
1bc40     EC E5 85 F1 | 	sub	objptr, ##34796
1bc44     F2 FA 01 F6 | 	mov	result1, objptr
1bc48     00 C8 01 FF 
1bc4c     00 FA 45 F5 | 	or	result1, ##59768832
1bc50     43 00 00 FF 
1bc54     E8 E5 05 F1 | 	add	objptr, ##34792
1bc58     F2 FA 61 FC | 	wrlong	result1, objptr
1bc5c     43 00 00 FF 
1bc60     E8 E5 85 F1 | 	sub	objptr, ##34792
1bc64     F2 FA 01 F6 | 	mov	result1, objptr
1bc68     00 D0 01 FF 
1bc6c     00 FA 45 F5 | 	or	result1, ##60817408
1bc70     44 00 00 FF 
1bc74     00 E4 05 F1 | 	add	objptr, ##34816
1bc78     F2 FA 61 FC | 	wrlong	result1, objptr
1bc7c     44 00 00 FF 
1bc80     00 E4 85 F1 | 	sub	objptr, ##34816
1bc84     F2 FA 01 F6 | 	mov	result1, objptr
1bc88     00 D8 01 FF 
1bc8c     00 FA 45 F5 | 	or	result1, ##61865984
1bc90     44 00 00 FF 
1bc94     04 E4 05 F1 | 	add	objptr, ##34820
1bc98     F2 FA 61 FC | 	wrlong	result1, objptr
1bc9c     44 00 00 FF 
1bca0     04 E4 85 F1 | 	sub	objptr, ##34820
1bca4     F2 FA 01 F6 | 	mov	result1, objptr
1bca8     76 FA 25 F4 | 	bith	result1, #118
1bcac     43 00 00 FF 
1bcb0     F0 E5 05 F1 | 	add	objptr, ##34800
1bcb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bcb8     43 00 00 FF 
1bcbc     F0 E5 85 F1 | 	sub	objptr, ##34800
1bcc0     F2 FA 01 F6 | 	mov	result1, objptr
1bcc4     00 E8 01 FF 
1bcc8     00 FA 45 F5 | 	or	result1, ##63963136
1bccc     43 00 00 FF 
1bcd0     F4 E5 05 F1 | 	add	objptr, ##34804
1bcd4     F2 FA 61 FC | 	wrlong	result1, objptr
1bcd8     43 00 00 FF 
1bcdc     F4 E5 85 F1 | 	sub	objptr, ##34804
1bce0     F2 FA 01 F6 | 	mov	result1, objptr
1bce4     95 FA 25 F4 | 	bith	result1, #149
1bce8     43 00 00 FF 
1bcec     F8 E5 05 F1 | 	add	objptr, ##34808
1bcf0     F2 FA 61 FC | 	wrlong	result1, objptr
1bcf4     43 00 00 FF 
1bcf8     F8 E5 85 F1 | 	sub	objptr, ##34808
1bcfc     F2 FA 01 F6 | 	mov	result1, objptr
1bd00     B4 FA 25 F4 | 	bith	result1, #180
1bd04     43 00 00 FF 
1bd08     FC E5 05 F1 | 	add	objptr, ##34812
1bd0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd10     43 00 00 FF 
1bd14     FC E5 85 F1 | 	sub	objptr, ##34812
1bd18     F2 FA 01 F6 | 	mov	result1, objptr
1bd1c     1A FA 25 F4 | 	bith	result1, #26
1bd20     44 00 00 FF 
1bd24     0C E4 05 F1 | 	add	objptr, ##34828
1bd28     F2 FA 61 FC | 	wrlong	result1, objptr
1bd2c     44 00 00 FF 
1bd30     0C E4 85 F1 | 	sub	objptr, ##34828
1bd34     F2 FA 01 F6 | 	mov	result1, objptr
1bd38     00 08 02 FF 
1bd3c     00 FA 45 F5 | 	or	result1, ##68157440
1bd40     44 00 00 FF 
1bd44     08 E4 05 F1 | 	add	objptr, ##34824
1bd48     F2 FA 61 FC | 	wrlong	result1, objptr
1bd4c     44 00 00 FF 
1bd50     08 E4 85 F1 | 	sub	objptr, ##34824
1bd54     F2 FA 01 F6 | 	mov	result1, objptr
1bd58     00 10 02 FF 
1bd5c     00 FA 45 F5 | 	or	result1, ##69206016
1bd60     44 00 00 FF 
1bd64     18 E4 05 F1 | 	add	objptr, ##34840
1bd68     F2 FA 61 FC | 	wrlong	result1, objptr
1bd6c     44 00 00 FF 
1bd70     18 E4 85 F1 | 	sub	objptr, ##34840
1bd74     F2 FA 01 F6 | 	mov	result1, objptr
1bd78     00 18 02 FF 
1bd7c     00 FA 45 F5 | 	or	result1, ##70254592
1bd80     44 00 00 FF 
1bd84     14 E4 05 F1 | 	add	objptr, ##34836
1bd88     F2 FA 61 FC | 	wrlong	result1, objptr
1bd8c     44 00 00 FF 
1bd90     14 E4 85 F1 | 	sub	objptr, ##34836
1bd94     F2 FA 01 F6 | 	mov	result1, objptr
1bd98     00 20 02 FF 
1bd9c     00 FA 45 F5 | 	or	result1, ##71303168
1bda0     44 00 00 FF 
1bda4     10 E4 05 F1 | 	add	objptr, ##34832
1bda8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdac     44 00 00 FF 
1bdb0     10 E4 85 F1 | 	sub	objptr, ##34832
1bdb4     F2 FA 01 F6 | 	mov	result1, objptr
1bdb8     00 28 02 FF 
1bdbc     00 FA 45 F5 | 	or	result1, ##72351744
1bdc0     44 00 00 FF 
1bdc4     1C E4 05 F1 | 	add	objptr, ##34844
1bdc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdcc     44 00 00 FF 
1bdd0     1C E4 85 F1 | 	sub	objptr, ##34844
1bdd4     F2 FA 01 F6 | 	mov	result1, objptr
1bdd8     00 30 02 FF 
1bddc     00 FA 45 F5 | 	or	result1, ##73400320
1bde0     44 00 00 FF 
1bde4     20 E4 05 F1 | 	add	objptr, ##34848
1bde8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdec     44 00 00 FF 
1bdf0     20 E4 85 F1 | 	sub	objptr, ##34848
1bdf4     F2 FA 01 F6 | 	mov	result1, objptr
1bdf8     00 38 02 FF 
1bdfc     00 FA 45 F5 | 	or	result1, ##74448896
1be00     43 00 00 FF 
1be04     B4 E4 05 F1 | 	add	objptr, ##34484
1be08     F2 FA 61 FC | 	wrlong	result1, objptr
1be0c     43 00 00 FF 
1be10     B4 E4 85 F1 | 	sub	objptr, ##34484
1be14     F2 FA 01 F6 | 	mov	result1, objptr
1be18     00 40 02 FF 
1be1c     00 FA 45 F5 | 	or	result1, ##75497472
1be20     44 00 00 FF 
1be24     38 E4 05 F1 | 	add	objptr, ##34872
1be28     F2 FA 61 FC | 	wrlong	result1, objptr
1be2c     44 00 00 FF 
1be30     38 E4 85 F1 | 	sub	objptr, ##34872
1be34     F2 FA 01 F6 | 	mov	result1, objptr
1be38     00 48 02 FF 
1be3c     00 FA 45 F5 | 	or	result1, ##76546048
1be40     44 00 00 FF 
1be44     48 E4 05 F1 | 	add	objptr, ##34888
1be48     F2 FA 61 FC | 	wrlong	result1, objptr
1be4c     44 00 00 FF 
1be50     48 E4 85 F1 | 	sub	objptr, ##34888
1be54     F2 FA 01 F6 | 	mov	result1, objptr
1be58     00 50 02 FF 
1be5c     00 FA 45 F5 | 	or	result1, ##77594624
1be60     44 00 00 FF 
1be64     4C E4 05 F1 | 	add	objptr, ##34892
1be68     F2 FA 61 FC | 	wrlong	result1, objptr
1be6c     44 00 00 FF 
1be70     4C E4 85 F1 | 	sub	objptr, ##34892
1be74     F2 FA 01 F6 | 	mov	result1, objptr
1be78     00 58 02 FF 
1be7c     00 FA 45 F5 | 	or	result1, ##78643200
1be80     44 00 00 FF 
1be84     44 E4 05 F1 | 	add	objptr, ##34884
1be88     F2 FA 61 FC | 	wrlong	result1, objptr
1be8c     44 00 00 FF 
1be90     44 E4 85 F1 | 	sub	objptr, ##34884
1be94     F2 FA 01 F6 | 	mov	result1, objptr
1be98     00 60 02 FF 
1be9c     00 FA 45 F5 | 	or	result1, ##79691776
1bea0     44 00 00 FF 
1bea4     3C E4 05 F1 | 	add	objptr, ##34876
1bea8     F2 FA 61 FC | 	wrlong	result1, objptr
1beac     44 00 00 FF 
1beb0     3C E4 85 F1 | 	sub	objptr, ##34876
1beb4     F2 FA 01 F6 | 	mov	result1, objptr
1beb8     00 68 02 FF 
1bebc     00 FA 45 F5 | 	or	result1, ##80740352
1bec0     44 00 00 FF 
1bec4     40 E4 05 F1 | 	add	objptr, ##34880
1bec8     F2 FA 61 FC | 	wrlong	result1, objptr
1becc     44 00 00 FF 
1bed0     40 E4 85 F1 | 	sub	objptr, ##34880
1bed4     F2 FA 01 F6 | 	mov	result1, objptr
1bed8     00 70 02 FF 
1bedc     00 FA 45 F5 | 	or	result1, ##81788928
1bee0     44 00 00 FF 
1bee4     50 E4 05 F1 | 	add	objptr, ##34896
1bee8     F2 FA 61 FC | 	wrlong	result1, objptr
1beec     44 00 00 FF 
1bef0     50 E4 85 F1 | 	sub	objptr, ##34896
1bef4     F2 FA 01 F6 | 	mov	result1, objptr
1bef8     00 78 02 FF 
1befc     00 FA 45 F5 | 	or	result1, ##82837504
1bf00     44 00 00 FF 
1bf04     54 E4 05 F1 | 	add	objptr, ##34900
1bf08     F2 FA 61 FC | 	wrlong	result1, objptr
1bf0c     44 00 00 FF 
1bf10     54 E4 85 F1 | 	sub	objptr, ##34900
1bf14     F2 FA 01 F6 | 	mov	result1, objptr
1bf18     00 80 02 FF 
1bf1c     00 FA 45 F5 | 	or	result1, ##83886080
1bf20     44 00 00 FF 
1bf24     58 E4 05 F1 | 	add	objptr, ##34904
1bf28     F2 FA 61 FC | 	wrlong	result1, objptr
1bf2c     44 00 00 FF 
1bf30     58 E4 85 F1 | 	sub	objptr, ##34904
1bf34     F2 FA 01 F6 | 	mov	result1, objptr
1bf38     00 88 02 FF 
1bf3c     00 FA 45 F5 | 	or	result1, ##84934656
1bf40     44 00 00 FF 
1bf44     5C E4 05 F1 | 	add	objptr, ##34908
1bf48     F2 FA 61 FC | 	wrlong	result1, objptr
1bf4c     44 00 00 FF 
1bf50     5C E4 85 F1 | 	sub	objptr, ##34908
1bf54     F2 FA 01 F6 | 	mov	result1, objptr
1bf58     00 90 02 FF 
1bf5c     00 FA 45 F5 | 	or	result1, ##85983232
1bf60     44 00 00 FF 
1bf64     60 E4 05 F1 | 	add	objptr, ##34912
1bf68     F2 FA 61 FC | 	wrlong	result1, objptr
1bf6c     44 00 00 FF 
1bf70     60 E4 85 F1 | 	sub	objptr, ##34912
1bf74     F2 FA 01 F6 | 	mov	result1, objptr
1bf78     00 98 02 FF 
1bf7c     00 FA 45 F5 | 	or	result1, ##87031808
1bf80     44 00 00 FF 
1bf84     64 E4 05 F1 | 	add	objptr, ##34916
1bf88     F2 FA 61 FC | 	wrlong	result1, objptr
1bf8c     44 00 00 FF 
1bf90     64 E4 85 F1 | 	sub	objptr, ##34916
1bf94     F2 FA 01 F6 | 	mov	result1, objptr
1bf98     00 A0 02 FF 
1bf9c     00 FA 45 F5 | 	or	result1, ##88080384
1bfa0     44 00 00 FF 
1bfa4     68 E4 05 F1 | 	add	objptr, ##34920
1bfa8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfac     44 00 00 FF 
1bfb0     68 E4 85 F1 | 	sub	objptr, ##34920
1bfb4     F2 FA 01 F6 | 	mov	result1, objptr
1bfb8     00 A8 02 FF 
1bfbc     00 FA 45 F5 | 	or	result1, ##89128960
1bfc0     44 00 00 FF 
1bfc4     6C E4 05 F1 | 	add	objptr, ##34924
1bfc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfcc     44 00 00 FF 
1bfd0     6C E4 85 F1 | 	sub	objptr, ##34924
1bfd4     F2 FA 01 F6 | 	mov	result1, objptr
1bfd8     00 B0 02 FF 
1bfdc     00 FA 45 F5 | 	or	result1, ##90177536
1bfe0     44 00 00 FF 
1bfe4     78 E4 05 F1 | 	add	objptr, ##34936
1bfe8     F2 FA 61 FC | 	wrlong	result1, objptr
1bfec     44 00 00 FF 
1bff0     78 E4 85 F1 | 	sub	objptr, ##34936
1bff4     F2 FA 01 F6 | 	mov	result1, objptr
1bff8     00 B8 02 FF 
1bffc     00 FA 45 F5 | 	or	result1, ##91226112
1c000     44 00 00 FF 
1c004     70 E4 05 F1 | 	add	objptr, ##34928
1c008     F2 FA 61 FC | 	wrlong	result1, objptr
1c00c     44 00 00 FF 
1c010     70 E4 85 F1 | 	sub	objptr, ##34928
1c014     F2 FA 01 F6 | 	mov	result1, objptr
1c018     00 C0 02 FF 
1c01c     00 FA 45 F5 | 	or	result1, ##92274688
1c020     44 00 00 FF 
1c024     74 E4 05 F1 | 	add	objptr, ##34932
1c028     F2 FA 61 FC | 	wrlong	result1, objptr
1c02c     44 00 00 FF 
1c030     74 E4 85 F1 | 	sub	objptr, ##34932
1c034     F2 FA 01 F6 | 	mov	result1, objptr
1c038     00 C8 02 FF 
1c03c     00 FA 45 F5 | 	or	result1, ##93323264
1c040     44 00 00 FF 
1c044     7C E4 05 F1 | 	add	objptr, ##34940
1c048     F2 FA 61 FC | 	wrlong	result1, objptr
1c04c     44 00 00 FF 
1c050     7C E4 85 F1 | 	sub	objptr, ##34940
1c054     F2 FA 01 F6 | 	mov	result1, objptr
1c058     00 D0 02 FF 
1c05c     00 FA 45 F5 | 	or	result1, ##94371840
1c060     44 00 00 FF 
1c064     24 E4 05 F1 | 	add	objptr, ##34852
1c068     F2 FA 61 FC | 	wrlong	result1, objptr
1c06c     44 00 00 FF 
1c070     24 E4 85 F1 | 	sub	objptr, ##34852
1c074     F2 FA 01 F6 | 	mov	result1, objptr
1c078     00 D8 02 FF 
1c07c     00 FA 45 F5 | 	or	result1, ##95420416
1c080     44 00 00 FF 
1c084     2C E4 05 F1 | 	add	objptr, ##34860
1c088     F2 FA 61 FC | 	wrlong	result1, objptr
1c08c     44 00 00 FF 
1c090     2C E4 85 F1 | 	sub	objptr, ##34860
1c094     F2 FA 01 F6 | 	mov	result1, objptr
1c098     00 E0 02 FF 
1c09c     00 FA 45 F5 | 	or	result1, ##96468992
1c0a0     44 00 00 FF 
1c0a4     30 E4 05 F1 | 	add	objptr, ##34864
1c0a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0ac     44 00 00 FF 
1c0b0     30 E4 85 F1 | 	sub	objptr, ##34864
1c0b4     F2 FA 01 F6 | 	mov	result1, objptr
1c0b8     00 E8 02 FF 
1c0bc     00 FA 45 F5 | 	or	result1, ##97517568
1c0c0     44 00 00 FF 
1c0c4     80 E4 05 F1 | 	add	objptr, ##34944
1c0c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0cc     44 00 00 FF 
1c0d0     80 E4 85 F1 | 	sub	objptr, ##34944
1c0d4     F2 FA 01 F6 | 	mov	result1, objptr
1c0d8     00 F0 02 FF 
1c0dc     00 FA 45 F5 | 	or	result1, ##98566144
1c0e0     44 00 00 FF 
1c0e4     84 E4 05 F1 | 	add	objptr, ##34948
1c0e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0ec     44 00 00 FF 
1c0f0     84 E4 85 F1 | 	sub	objptr, ##34948
1c0f4     F2 FA 01 F6 | 	mov	result1, objptr
1c0f8     00 F8 02 FF 
1c0fc     00 FA 45 F5 | 	or	result1, ##99614720
1c100     44 00 00 FF 
1c104     88 E4 05 F1 | 	add	objptr, ##34952
1c108     F2 FA 61 FC | 	wrlong	result1, objptr
1c10c     44 00 00 FF 
1c110     88 E4 85 F1 | 	sub	objptr, ##34952
1c114     F2 FA 01 F6 | 	mov	result1, objptr
1c118     39 FA 25 F4 | 	bith	result1, #57
1c11c     44 00 00 FF 
1c120     34 E4 05 F1 | 	add	objptr, ##34868
1c124     F2 FA 61 FC | 	wrlong	result1, objptr
1c128     44 00 00 FF 
1c12c     34 E4 85 F1 | 	sub	objptr, ##34868
1c130     F2 FA 01 F6 | 	mov	result1, objptr
1c134     00 08 03 FF 
1c138     00 FA 45 F5 | 	or	result1, ##101711872
1c13c     44 00 00 FF 
1c140     98 E4 05 F1 | 	add	objptr, ##34968
1c144     F2 FA 61 FC | 	wrlong	result1, objptr
1c148     44 00 00 FF 
1c14c     98 E4 85 F1 | 	sub	objptr, ##34968
1c150     F2 FA 01 F6 | 	mov	result1, objptr
1c154     00 10 03 FF 
1c158     00 FA 45 F5 | 	or	result1, ##102760448
1c15c     44 00 00 FF 
1c160     A0 E4 05 F1 | 	add	objptr, ##34976
1c164     F2 FA 61 FC | 	wrlong	result1, objptr
1c168     44 00 00 FF 
1c16c     A0 E4 85 F1 | 	sub	objptr, ##34976
1c170     F2 FA 01 F6 | 	mov	result1, objptr
1c174     00 18 03 FF 
1c178     00 FA 45 F5 | 	or	result1, ##103809024
1c17c     44 00 00 FF 
1c180     94 E4 05 F1 | 	add	objptr, ##34964
1c184     F2 FA 61 FC | 	wrlong	result1, objptr
1c188     44 00 00 FF 
1c18c     94 E4 85 F1 | 	sub	objptr, ##34964
1c190     F2 FA 01 F6 | 	mov	result1, objptr
1c194     00 20 03 FF 
1c198     00 FA 45 F5 | 	or	result1, ##104857600
1c19c     44 00 00 FF 
1c1a0     90 E4 05 F1 | 	add	objptr, ##34960
1c1a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1a8     44 00 00 FF 
1c1ac     90 E4 85 F1 | 	sub	objptr, ##34960
1c1b0     F2 FA 01 F6 | 	mov	result1, objptr
1c1b4     00 28 03 FF 
1c1b8     00 FA 45 F5 | 	or	result1, ##105906176
1c1bc     44 00 00 FF 
1c1c0     8C E4 05 F1 | 	add	objptr, ##34956
1c1c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1c8     44 00 00 FF 
1c1cc     8C E4 85 F1 | 	sub	objptr, ##34956
1c1d0     F2 FA 01 F6 | 	mov	result1, objptr
1c1d4     00 30 03 FF 
1c1d8     00 FA 45 F5 | 	or	result1, ##106954752
1c1dc     44 00 00 FF 
1c1e0     9C E4 05 F1 | 	add	objptr, ##34972
1c1e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1e8     44 00 00 FF 
1c1ec     9C E4 85 F1 | 	sub	objptr, ##34972
1c1f0     F2 FA 01 F6 | 	mov	result1, objptr
1c1f4     00 38 03 FF 
1c1f8     00 FA 45 F5 | 	or	result1, ##108003328
1c1fc     44 00 00 FF 
1c200     A4 E4 05 F1 | 	add	objptr, ##34980
1c204     F2 FA 61 FC | 	wrlong	result1, objptr
1c208     44 00 00 FF 
1c20c     A4 E4 85 F1 | 	sub	objptr, ##34980
1c210     F2 FA 01 F6 | 	mov	result1, objptr
1c214     00 40 03 FF 
1c218     00 FA 45 F5 | 	or	result1, ##109051904
1c21c     44 00 00 FF 
1c220     A8 E4 05 F1 | 	add	objptr, ##34984
1c224     F2 FA 61 FC | 	wrlong	result1, objptr
1c228     44 00 00 FF 
1c22c     A8 E4 85 F1 | 	sub	objptr, ##34984
1c230     F2 FA 01 F6 | 	mov	result1, objptr
1c234     00 48 03 FF 
1c238     00 FA 45 F5 | 	or	result1, ##110100480
1c23c     44 00 00 FF 
1c240     AC E4 05 F1 | 	add	objptr, ##34988
1c244     F2 FA 61 FC | 	wrlong	result1, objptr
1c248     44 00 00 FF 
1c24c     AC E4 85 F1 | 	sub	objptr, ##34988
1c250     F2 FA 01 F6 | 	mov	result1, objptr
1c254     00 50 03 FF 
1c258     00 FA 45 F5 | 	or	result1, ##111149056
1c25c     44 00 00 FF 
1c260     B4 E4 05 F1 | 	add	objptr, ##34996
1c264     F2 FA 61 FC | 	wrlong	result1, objptr
1c268     44 00 00 FF 
1c26c     B4 E4 85 F1 | 	sub	objptr, ##34996
1c270     F2 FA 01 F6 | 	mov	result1, objptr
1c274     00 58 03 FF 
1c278     00 FA 45 F5 | 	or	result1, ##112197632
1c27c     44 00 00 FF 
1c280     B8 E4 05 F1 | 	add	objptr, ##35000
1c284     F2 FA 61 FC | 	wrlong	result1, objptr
1c288     44 00 00 FF 
1c28c     B8 E4 85 F1 | 	sub	objptr, ##35000
1c290     F2 FA 01 F6 | 	mov	result1, objptr
1c294     00 60 03 FF 
1c298     00 FA 45 F5 | 	or	result1, ##113246208
1c29c     44 00 00 FF 
1c2a0     BC E4 05 F1 | 	add	objptr, ##35004
1c2a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2a8     44 00 00 FF 
1c2ac     BC E4 85 F1 | 	sub	objptr, ##35004
1c2b0     F2 FA 01 F6 | 	mov	result1, objptr
1c2b4     00 68 03 FF 
1c2b8     00 FA 45 F5 | 	or	result1, ##114294784
1c2bc     44 00 00 FF 
1c2c0     C0 E4 05 F1 | 	add	objptr, ##35008
1c2c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2c8     44 00 00 FF 
1c2cc     C0 E4 85 F1 | 	sub	objptr, ##35008
1c2d0     F2 FA 01 F6 | 	mov	result1, objptr
1c2d4     00 70 03 FF 
1c2d8     00 FA 45 F5 | 	or	result1, ##115343360
1c2dc     44 00 00 FF 
1c2e0     C4 E4 05 F1 | 	add	objptr, ##35012
1c2e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2e8     44 00 00 FF 
1c2ec     C4 E4 85 F1 | 	sub	objptr, ##35012
1c2f0     F2 FA 01 F6 | 	mov	result1, objptr
1c2f4     00 78 03 FF 
1c2f8     00 FA 45 F5 | 	or	result1, ##116391936
1c2fc     44 00 00 FF 
1c300     C8 E4 05 F1 | 	add	objptr, ##35016
1c304     F2 FA 61 FC | 	wrlong	result1, objptr
1c308     44 00 00 FF 
1c30c     C8 E4 85 F1 | 	sub	objptr, ##35016
1c310     F2 FA 01 F6 | 	mov	result1, objptr
1c314     00 08 01 FF 
1c318     00 FA 45 F5 | 	or	result1, ##34603008
1c31c     44 00 00 FF 
1c320     CC E4 05 F1 | 	add	objptr, ##35020
1c324     F2 FA 61 FC | 	wrlong	result1, objptr
1c328     44 00 00 FF 
1c32c     CC E4 85 F1 | 	sub	objptr, ##35020
1c330     F2 FA 01 F6 | 	mov	result1, objptr
1c334     58 FA 25 F4 | 	bith	result1, #88
1c338     44 00 00 FF 
1c33c     D0 E4 05 F1 | 	add	objptr, ##35024
1c340     F2 FA 61 FC | 	wrlong	result1, objptr
1c344     44 00 00 FF 
1c348     D0 E4 85 F1 | 	sub	objptr, ##35024
1c34c     F2 FA 01 F6 | 	mov	result1, objptr
1c350     00 88 03 FF 
1c354     00 FA 45 F5 | 	or	result1, ##118489088
1c358     44 00 00 FF 
1c35c     B0 E4 05 F1 | 	add	objptr, ##34992
1c360     F2 FA 61 FC | 	wrlong	result1, objptr
1c364     44 00 00 FF 
1c368     B0 E4 85 F1 | 	sub	objptr, ##34992
1c36c     F2 FA 01 F6 | 	mov	result1, objptr
1c370     00 90 03 FF 
1c374     00 FA 45 F5 | 	or	result1, ##119537664
1c378     43 00 00 FF 
1c37c     A8 E4 05 F1 | 	add	objptr, ##34472
1c380     F2 FA 61 FC | 	wrlong	result1, objptr
1c384     43 00 00 FF 
1c388     A8 E4 85 F1 | 	sub	objptr, ##34472
1c38c     F2 FA 01 F6 | 	mov	result1, objptr
1c390     00 98 03 FF 
1c394     00 FA 45 F5 | 	or	result1, ##120586240
1c398     44 00 00 FF 
1c39c     D4 E4 05 F1 | 	add	objptr, ##35028
1c3a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3a4     44 00 00 FF 
1c3a8     D4 E4 85 F1 | 	sub	objptr, ##35028
1c3ac     F2 FA 01 F6 | 	mov	result1, objptr
1c3b0     00 A0 03 FF 
1c3b4     00 FA 45 F5 | 	or	result1, ##121634816
1c3b8     44 00 00 FF 
1c3bc     D8 E4 05 F1 | 	add	objptr, ##35032
1c3c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3c4     44 00 00 FF 
1c3c8     D8 E4 85 F1 | 	sub	objptr, ##35032
1c3cc     F2 FA 01 F6 | 	mov	result1, objptr
1c3d0     00 A8 03 FF 
1c3d4     00 FA 45 F5 | 	or	result1, ##122683392
1c3d8     44 00 00 FF 
1c3dc     EC E4 05 F1 | 	add	objptr, ##35052
1c3e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3e4     44 00 00 FF 
1c3e8     EC E4 85 F1 | 	sub	objptr, ##35052
1c3ec     F2 FA 01 F6 | 	mov	result1, objptr
1c3f0     00 B0 03 FF 
1c3f4     00 FA 45 F5 | 	or	result1, ##123731968
1c3f8     44 00 00 FF 
1c3fc     E8 E4 05 F1 | 	add	objptr, ##35048
1c400     F2 FA 61 FC | 	wrlong	result1, objptr
1c404     44 00 00 FF 
1c408     E8 E4 85 F1 | 	sub	objptr, ##35048
1c40c     F2 FA 01 F6 | 	mov	result1, objptr
1c410     00 B8 03 FF 
1c414     00 FA 45 F5 | 	or	result1, ##124780544
1c418     44 00 00 FF 
1c41c     E0 E4 05 F1 | 	add	objptr, ##35040
1c420     F2 FA 61 FC | 	wrlong	result1, objptr
1c424     44 00 00 FF 
1c428     E0 E4 85 F1 | 	sub	objptr, ##35040
1c42c     F2 FA 01 F6 | 	mov	result1, objptr
1c430     77 FA 25 F4 | 	bith	result1, #119
1c434     44 00 00 FF 
1c438     DC E4 05 F1 | 	add	objptr, ##35036
1c43c     F2 FA 61 FC | 	wrlong	result1, objptr
1c440     44 00 00 FF 
1c444     DC E4 85 F1 | 	sub	objptr, ##35036
1c448     F2 FA 01 F6 | 	mov	result1, objptr
1c44c     00 C8 03 FF 
1c450     00 FA 45 F5 | 	or	result1, ##126877696
1c454     44 00 00 FF 
1c458     FC E4 05 F1 | 	add	objptr, ##35068
1c45c     F2 FA 61 FC | 	wrlong	result1, objptr
1c460     44 00 00 FF 
1c464     FC E4 85 F1 | 	sub	objptr, ##35068
1c468     F2 FA 01 F6 | 	mov	result1, objptr
1c46c     00 D0 03 FF 
1c470     00 FA 45 F5 | 	or	result1, ##127926272
1c474     44 00 00 FF 
1c478     F0 E4 05 F1 | 	add	objptr, ##35056
1c47c     F2 FA 61 FC | 	wrlong	result1, objptr
1c480     44 00 00 FF 
1c484     F0 E4 85 F1 | 	sub	objptr, ##35056
1c488     F2 FA 01 F6 | 	mov	result1, objptr
1c48c     00 D8 03 FF 
1c490     00 FA 45 F5 | 	or	result1, ##128974848
1c494     44 00 00 FF 
1c498     F4 E4 05 F1 | 	add	objptr, ##35060
1c49c     F2 FA 61 FC | 	wrlong	result1, objptr
1c4a0     44 00 00 FF 
1c4a4     F4 E4 85 F1 | 	sub	objptr, ##35060
1c4a8     F2 FA 01 F6 | 	mov	result1, objptr
1c4ac     96 FA 25 F4 | 	bith	result1, #150
1c4b0     44 00 00 FF 
1c4b4     F8 E4 05 F1 | 	add	objptr, ##35064
1c4b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4bc     44 00 00 FF 
1c4c0     F8 E4 85 F1 | 	sub	objptr, ##35064
1c4c4     F2 FA 01 F6 | 	mov	result1, objptr
1c4c8     00 E8 03 FF 
1c4cc     00 FA 45 F5 | 	or	result1, ##131072000
1c4d0     44 00 00 FF 
1c4d4     00 E5 05 F1 | 	add	objptr, ##35072
1c4d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4dc     44 00 00 FF 
1c4e0     00 E5 85 F1 | 	sub	objptr, ##35072
1c4e4     F2 FA 01 F6 | 	mov	result1, objptr
1c4e8     B5 FA 25 F4 | 	bith	result1, #181
1c4ec     44 00 00 FF 
1c4f0     04 E5 05 F1 | 	add	objptr, ##35076
1c4f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4f8     44 00 00 FF 
1c4fc     04 E5 85 F1 | 	sub	objptr, ##35076
1c500     F2 FA 01 F6 | 	mov	result1, objptr
1c504     D4 FA 25 F4 | 	bith	result1, #212
1c508     44 00 00 FF 
1c50c     08 E5 05 F1 | 	add	objptr, ##35080
1c510     F2 FA 61 FC | 	wrlong	result1, objptr
1c514     44 00 00 FF 
1c518     08 E5 85 F1 | 	sub	objptr, ##35080
1c51c     F2 FA 01 F6 | 	mov	result1, objptr
1c520     1B FA 25 F4 | 	bith	result1, #27
1c524     44 00 00 FF 
1c528     0C E5 05 F1 | 	add	objptr, ##35084
1c52c     F2 FA 61 FC | 	wrlong	result1, objptr
1c530     44 00 00 FF 
1c534     0C E5 85 F1 | 	sub	objptr, ##35084
1c538     F2 FA 01 F6 | 	mov	result1, objptr
1c53c     00 08 04 FF 
1c540     00 FA 45 F5 | 	or	result1, ##135266304
1c544     44 00 00 FF 
1c548     10 E5 05 F1 | 	add	objptr, ##35088
1c54c     F2 FA 61 FC | 	wrlong	result1, objptr
1c550     44 00 00 FF 
1c554     10 E5 85 F1 | 	sub	objptr, ##35088
1c558     F2 FA 01 F6 | 	mov	result1, objptr
1c55c     00 10 04 FF 
1c560     00 FA 45 F5 | 	or	result1, ##136314880
1c564     44 00 00 FF 
1c568     14 E5 05 F1 | 	add	objptr, ##35092
1c56c     F2 FA 61 FC | 	wrlong	result1, objptr
1c570     44 00 00 FF 
1c574     14 E5 85 F1 | 	sub	objptr, ##35092
1c578     F2 FA 01 F6 | 	mov	result1, objptr
1c57c     00 18 04 FF 
1c580     00 FA 45 F5 | 	or	result1, ##137363456
1c584     44 00 00 FF 
1c588     1C E5 05 F1 | 	add	objptr, ##35100
1c58c     F2 FA 61 FC | 	wrlong	result1, objptr
1c590     44 00 00 FF 
1c594     1C E5 85 F1 | 	sub	objptr, ##35100
1c598     F2 FA 01 F6 | 	mov	result1, objptr
1c59c     00 20 04 FF 
1c5a0     00 FA 45 F5 | 	or	result1, ##138412032
1c5a4     44 00 00 FF 
1c5a8     20 E5 05 F1 | 	add	objptr, ##35104
1c5ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b0     44 00 00 FF 
1c5b4     20 E5 85 F1 | 	sub	objptr, ##35104
1c5b8     F2 FA 01 F6 | 	mov	result1, objptr
1c5bc     00 28 04 FF 
1c5c0     00 FA 45 F5 | 	or	result1, ##139460608
1c5c4     44 00 00 FF 
1c5c8     24 E5 05 F1 | 	add	objptr, ##35108
1c5cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c5d0     44 00 00 FF 
1c5d4     24 E5 85 F1 | 	sub	objptr, ##35108
1c5d8     F2 FA 01 F6 | 	mov	result1, objptr
1c5dc     00 30 04 FF 
1c5e0     00 FA 45 F5 | 	or	result1, ##140509184
1c5e4     44 00 00 FF 
1c5e8     18 E5 05 F1 | 	add	objptr, ##35096
1c5ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c5f0     44 00 00 FF 
1c5f4     18 E5 85 F1 | 	sub	objptr, ##35096
1c5f8     F2 FA 01 F6 | 	mov	result1, objptr
1c5fc     00 38 04 FF 
1c600     00 FA 45 F5 | 	or	result1, ##141557760
1c604     44 00 00 FF 
1c608     28 E5 05 F1 | 	add	objptr, ##35112
1c60c     F2 FA 61 FC | 	wrlong	result1, objptr
1c610     44 00 00 FF 
1c614     28 E5 85 F1 | 	sub	objptr, ##35112
1c618     F2 FA 01 F6 | 	mov	result1, objptr
1c61c     00 40 04 FF 
1c620     00 FA 45 F5 | 	or	result1, ##142606336
1c624     44 00 00 FF 
1c628     5C E5 05 F1 | 	add	objptr, ##35164
1c62c     F2 FA 61 FC | 	wrlong	result1, objptr
1c630     44 00 00 FF 
1c634     5C E5 85 F1 | 	sub	objptr, ##35164
1c638     F2 FA 01 F6 | 	mov	result1, objptr
1c63c     00 48 04 FF 
1c640     00 FA 45 F5 | 	or	result1, ##143654912
1c644     44 00 00 FF 
1c648     54 E5 05 F1 | 	add	objptr, ##35156
1c64c     F2 FA 61 FC | 	wrlong	result1, objptr
1c650     44 00 00 FF 
1c654     54 E5 85 F1 | 	sub	objptr, ##35156
1c658     F2 FA 01 F6 | 	mov	result1, objptr
1c65c     00 50 04 FF 
1c660     00 FA 45 F5 | 	or	result1, ##144703488
1c664     44 00 00 FF 
1c668     2C E5 05 F1 | 	add	objptr, ##35116
1c66c     F2 FA 61 FC | 	wrlong	result1, objptr
1c670     44 00 00 FF 
1c674     2C E5 85 F1 | 	sub	objptr, ##35116
1c678     F2 FA 01 F6 | 	mov	result1, objptr
1c67c     00 58 04 FF 
1c680     00 FA 45 F5 | 	or	result1, ##145752064
1c684     44 00 00 FF 
1c688     30 E5 05 F1 | 	add	objptr, ##35120
1c68c     F2 FA 61 FC | 	wrlong	result1, objptr
1c690     44 00 00 FF 
1c694     30 E5 85 F1 | 	sub	objptr, ##35120
1c698     F2 FA 01 F6 | 	mov	result1, objptr
1c69c     00 60 04 FF 
1c6a0     00 FA 45 F5 | 	or	result1, ##146800640
1c6a4     44 00 00 FF 
1c6a8     4C E5 05 F1 | 	add	objptr, ##35148
1c6ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b0     44 00 00 FF 
1c6b4     4C E5 85 F1 | 	sub	objptr, ##35148
1c6b8     F2 FA 01 F6 | 	mov	result1, objptr
1c6bc     00 68 04 FF 
1c6c0     00 FA 45 F5 | 	or	result1, ##147849216
1c6c4     44 00 00 FF 
1c6c8     50 E5 05 F1 | 	add	objptr, ##35152
1c6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d0     44 00 00 FF 
1c6d4     50 E5 85 F1 | 	sub	objptr, ##35152
1c6d8                 | _init_commands_ret
1c6d8     2D 00 64 FD | 	ret
1c6dc                 | 
1c6dc                 | ' 
1c6dc                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1c6dc                 | ' 
1c6dc                 | ' sub init_audio
1c6dc                 | _init_audio
1c6dc     06 4A 05 F6 | 	mov	COUNT_, #6
1c6e0     A8 00 A0 FD | 	call	#pushregs_
1c6e4     00 C0 1F FF 
1c6e8     00 1E 06 F6 | 	mov	local01, ##1065353216
1c6ec                 | ' 
1c6ec                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c6ec     00 20 06 F6 | 	mov	local02, #0
1c6f0                 | LR__2280
1c6f0     10 23 02 F6 | 	mov	local03, local02
1c6f4     01 22 66 F0 | 	shl	local03, #1
1c6f8     58 7F 23 FF 
1c6fc     00 24 06 F6 | 	mov	local04, ##1191096320
1c700     10 13 52 F6 | 	abs	arg01, local02 wc
1c704     1F 26 C6 C9 |  if_b	decod	local05, #31
1c708     00 26 06 36 |  if_ae	mov	local05, #0
1c70c     E4 68 B0 FD | 	call	#__system___float_fromuns
1c710     13 FB 61 F5 | 	xor	result1, local05
1c714     FD 12 02 F6 | 	mov	arg01, result1
1c718     87 24 20 FF 
1c71c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c720     D4 6C B0 FD | 	call	#__system___float_mul
1c724     FD 12 02 F6 | 	mov	arg01, result1
1c728     00 00 22 FF 
1c72c     00 14 06 F6 | 	mov	arg02, ##1140850688
1c730     C8 6E B0 FD | 	call	#__system___float_div
1c734     FD 12 02 F6 | 	mov	arg01, result1
1c738     1C 76 B0 FD | 	call	#__system____builtin_sinf
1c73c     FD 14 02 F6 | 	mov	arg02, result1
1c740     12 13 02 F6 | 	mov	arg01, local04
1c744     B0 6C B0 FD | 	call	#__system___float_mul
1c748     FD 12 02 F6 | 	mov	arg01, result1
1c74c     01 14 06 F6 | 	mov	arg02, #1
1c750     6C 71 B0 FD | 	call	#__system___float_tointeger
1c754     FD 14 02 F6 | 	mov	arg02, result1
1c758     11 13 02 F6 | 	mov	arg01, local03
1c75c     00 0D B0 FD | 	call	#_psdpoke
1c760     01 20 06 F1 | 	add	local02, #1
1c764     02 00 00 FF 
1c768     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c76c     80 FF 9F CD |  if_b	jmp	#LR__2280
1c770                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c770     00 20 06 F6 | 	mov	local02, #0
1c774                 | LR__2281
1c774     10 15 02 F6 | 	mov	arg02, local02
1c778     01 14 66 F0 | 	shl	arg02, #1
1c77c     0B 12 C6 F9 | 	decod	arg01, #11
1c780     0A 13 02 F1 | 	add	arg01, arg02
1c784     10 25 02 F6 | 	mov	local04, local02
1c788     07 24 66 F0 | 	shl	local04, #7
1c78c     10 25 82 F1 | 	sub	local04, local02
1c790     C0 FF 7F FF 
1c794     00 15 06 F6 | 	mov	arg02, ##-32512
1c798     12 15 02 F1 | 	add	arg02, local04
1c79c     C0 0C B0 FD | 	call	#_psdpoke
1c7a0     09 24 C6 F9 | 	decod	local04, #9
1c7a4     10 25 02 F1 | 	add	local04, local02
1c7a8     01 24 66 F0 | 	shl	local04, #1
1c7ac     0B 12 C6 F9 | 	decod	arg01, #11
1c7b0     12 13 02 F1 | 	add	arg01, local04
1c7b4     10 27 02 F6 | 	mov	local05, local02
1c7b8     07 26 66 F0 | 	shl	local05, #7
1c7bc     10 27 82 F1 | 	sub	local05, local02
1c7c0     3F 00 00 FF 
1c7c4     00 15 06 F6 | 	mov	arg02, ##32512
1c7c8     13 15 82 F1 | 	sub	arg02, local05
1c7cc     90 0C B0 FD | 	call	#_psdpoke
1c7d0     01 20 06 F1 | 	add	local02, #1
1c7d4     01 00 00 FF 
1c7d8     00 20 56 F2 | 	cmps	local02, ##512 wc
1c7dc     94 FF 9F CD |  if_b	jmp	#LR__2281
1c7e0                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c7e0     00 20 06 F6 | 	mov	local02, #0
1c7e4                 | LR__2282
1c7e4     10 27 02 F6 | 	mov	local05, local02
1c7e8     01 26 66 F0 | 	shl	local05, #1
1c7ec     0C 12 C6 F9 | 	decod	arg01, #12
1c7f0     13 13 02 F1 | 	add	arg01, local05
1c7f4     10 27 02 F6 | 	mov	local05, local02
1c7f8     06 26 66 F0 | 	shl	local05, #6
1c7fc     10 27 82 F1 | 	sub	local05, local02
1c800     C1 FF 7F FF 
1c804     00 14 06 F6 | 	mov	arg02, ##-32256
1c808     13 15 02 F1 | 	add	arg02, local05
1c80c     50 0C B0 FD | 	call	#_psdpoke
1c810     01 20 06 F1 | 	add	local02, #1
1c814     02 00 00 FF 
1c818     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c81c     C4 FF 9F CD |  if_b	jmp	#LR__2282
1c820                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1c820     00 20 06 F6 | 	mov	local02, #0
1c824                 | LR__2283
1c824     10 27 02 F6 | 	mov	local05, local02
1c828     01 26 66 F0 | 	shl	local05, #1
1c82c     0C 00 00 FF 
1c830     00 12 06 F6 | 	mov	arg01, ##6144
1c834     13 13 02 F1 | 	add	arg01, local05
1c838     C0 FF 7F FF 
1c83c     A8 14 06 F6 | 	mov	arg02, ##-32600
1c840     1C 0C B0 FD | 	call	#_psdpoke
1c844     01 20 06 F1 | 	add	local02, #1
1c848     80 20 56 F2 | 	cmps	local02, #128 wc
1c84c     D4 FF 9F CD |  if_b	jmp	#LR__2283
1c850     80 20 06 F6 | 	mov	local02, #128
1c854                 | LR__2284
1c854     10 27 02 F6 | 	mov	local05, local02
1c858     01 26 66 F0 | 	shl	local05, #1
1c85c     0C 00 00 FF 
1c860     00 12 06 F6 | 	mov	arg01, ##6144
1c864     13 13 02 F1 | 	add	arg01, local05
1c868     3F 00 00 FF 
1c86c     58 15 06 F6 | 	mov	arg02, ##32600
1c870     EC 0B B0 FD | 	call	#_psdpoke
1c874     01 20 06 F1 | 	add	local02, #1
1c878     02 00 00 FF 
1c87c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c880     D0 FF 9F CD |  if_b	jmp	#LR__2284
1c884                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1c884     00 20 06 F6 | 	mov	local02, #0
1c888                 | LR__2285
1c888     10 27 02 F6 | 	mov	local05, local02
1c88c     01 26 66 F0 | 	shl	local05, #1
1c890     0D 12 C6 F9 | 	decod	arg01, #13
1c894     13 13 02 F1 | 	add	arg01, local05
1c898     C0 FF 7F FF 
1c89c     A8 14 06 F6 | 	mov	arg02, ##-32600
1c8a0     BC 0B B0 FD | 	call	#_psdpoke
1c8a4     01 20 06 F1 | 	add	local02, #1
1c8a8     01 00 00 FF 
1c8ac     00 20 56 F2 | 	cmps	local02, ##512 wc
1c8b0     D4 FF 9F CD |  if_b	jmp	#LR__2285
1c8b4     09 20 C6 F9 | 	decod	local02, #9
1c8b8                 | LR__2286
1c8b8     10 27 02 F6 | 	mov	local05, local02
1c8bc     01 26 66 F0 | 	shl	local05, #1
1c8c0     0D 12 C6 F9 | 	decod	arg01, #13
1c8c4     13 13 02 F1 | 	add	arg01, local05
1c8c8     3F 00 00 FF 
1c8cc     58 15 06 F6 | 	mov	arg02, ##32600
1c8d0     8C 0B B0 FD | 	call	#_psdpoke
1c8d4     01 20 06 F1 | 	add	local02, #1
1c8d8     02 00 00 FF 
1c8dc     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c8e0     D4 FF 9F CD |  if_b	jmp	#LR__2286
1c8e4                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1c8e4     00 20 06 F6 | 	mov	local02, #0
1c8e8                 | LR__2287
1c8e8     10 27 02 F6 | 	mov	local05, local02
1c8ec     01 26 66 F0 | 	shl	local05, #1
1c8f0     14 00 00 FF 
1c8f4     00 12 06 F6 | 	mov	arg01, ##10240
1c8f8     13 13 02 F1 | 	add	arg01, local05
1c8fc     C0 FF 7F FF 
1c900     A8 14 06 F6 | 	mov	arg02, ##-32600
1c904     58 0B B0 FD | 	call	#_psdpoke
1c908     01 20 06 F1 | 	add	local02, #1
1c90c     00 21 56 F2 | 	cmps	local02, #256 wc
1c910     D4 FF 9F CD |  if_b	jmp	#LR__2287
1c914     00 21 06 F6 | 	mov	local02, #256
1c918                 | LR__2288
1c918     10 27 02 F6 | 	mov	local05, local02
1c91c     01 26 66 F0 | 	shl	local05, #1
1c920     14 00 00 FF 
1c924     00 12 06 F6 | 	mov	arg01, ##10240
1c928     13 13 02 F1 | 	add	arg01, local05
1c92c     3F 00 00 FF 
1c930     58 15 06 F6 | 	mov	arg02, ##32600
1c934     28 0B B0 FD | 	call	#_psdpoke
1c938     01 20 06 F1 | 	add	local02, #1
1c93c     02 00 00 FF 
1c940     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c944     D0 FF 9F CD |  if_b	jmp	#LR__2288
1c948                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1c948     18 00 00 FF 
1c94c     00 20 06 F6 | 	mov	local02, ##12288
1c950                 | LR__2289
1c950     10 13 02 F6 | 	mov	arg01, local02
1c954     00 14 06 F6 | 	mov	arg02, #0
1c958     BC 0A B0 FD | 	call	#_pslpoke
1c95c     04 20 06 F1 | 	add	local02, #4
1c960     77 00 00 FF 
1c964     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1c968     E4 FF 9F CD |  if_b	jmp	#LR__2289
1c96c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c96c     00 20 06 F6 | 	mov	local02, #0
1c970                 | LR__2290
1c970     10 27 02 F6 | 	mov	local05, local02
1c974     01 26 66 F0 | 	shl	local05, #1
1c978     78 00 00 FF 
1c97c     00 22 06 F6 | 	mov	local03, ##61440
1c980     13 23 02 F1 | 	add	local03, local05
1c984     12 00 00 FF 
1c988     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1c98c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1c990     12 00 00 FF 
1c994     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1c998     10 12 06 F1 | 	add	arg01, #16
1c99c     10 15 02 F6 | 	mov	arg02, local02
1c9a0     01 14 66 F0 | 	shl	arg02, #1
1c9a4     0A 13 02 F1 | 	add	arg01, arg02
1c9a8     09 15 E2 FA | 	rdword	arg02, arg01
1c9ac     11 13 02 F6 | 	mov	arg01, local03
1c9b0     AC 0A B0 FD | 	call	#_psdpoke
1c9b4     01 20 06 F1 | 	add	local02, #1
1c9b8     02 00 00 FF 
1c9bc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c9c0     AC FF 9F CD |  if_b	jmp	#LR__2290
1c9c4                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c9c4     00 20 06 F6 | 	mov	local02, #0
1c9c8                 | LR__2291
1c9c8     10 27 02 F6 | 	mov	local05, local02
1c9cc     01 26 66 F0 | 	shl	local05, #1
1c9d0     7C 00 00 FF 
1c9d4     00 22 06 F6 | 	mov	local03, ##63488
1c9d8     13 23 02 F1 | 	add	local03, local05
1c9dc     0E 00 00 FF 
1c9e0     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1c9e4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1c9e8     0E 00 00 FF 
1c9ec     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1c9f0     10 12 06 F1 | 	add	arg01, #16
1c9f4     10 15 02 F6 | 	mov	arg02, local02
1c9f8     01 14 66 F0 | 	shl	arg02, #1
1c9fc     0A 13 02 F1 | 	add	arg01, arg02
1ca00     09 15 E2 FA | 	rdword	arg02, arg01
1ca04     11 13 02 F6 | 	mov	arg01, local03
1ca08     54 0A B0 FD | 	call	#_psdpoke
1ca0c     01 20 06 F1 | 	add	local02, #1
1ca10     02 00 00 FF 
1ca14     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca18     AC FF 9F CD |  if_b	jmp	#LR__2291
1ca1c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1ca1c     00 20 06 F6 | 	mov	local02, #0
1ca20     0C 00 00 FF 
1ca24     D8 E4 05 F1 | 	add	objptr, ##6360
1ca28     97 18 48 FB | 	callpa	#(@LR__2293-@LR__2292)>>2,fcache_load_ptr_
1ca2c                 | LR__2292
1ca2c     10 27 02 F6 | 	mov	local05, local02
1ca30     01 26 66 F0 | 	shl	local05, #1
1ca34     F2 26 02 F1 | 	add	local05, objptr
1ca38     10 23 02 F6 | 	mov	local03, local02
1ca3c     08 22 66 F0 | 	shl	local03, #8
1ca40     7F 00 00 FF 
1ca44     00 29 06 F6 | 	mov	local06, ##65280
1ca48     11 29 82 F1 | 	sub	local06, local03
1ca4c     13 29 52 FC | 	wrword	local06, local05
1ca50     01 20 06 F1 | 	add	local02, #1
1ca54     00 21 56 F2 | 	cmps	local02, #256 wc
1ca58     D0 FF 9F CD |  if_b	jmp	#LR__2292
1ca5c                 | LR__2293
1ca5c     0C 00 00 FF 
1ca60     D8 E4 85 F1 | 	sub	objptr, ##6360
1ca64                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1ca64     00 20 06 F6 | 	mov	local02, #0
1ca68                 | LR__2294
1ca68     10 27 02 F6 | 	mov	local05, local02
1ca6c     01 26 66 F0 | 	shl	local05, #1
1ca70     0D 00 00 FF 
1ca74     D8 E4 05 F1 | 	add	objptr, ##6872
1ca78     F2 26 02 F1 | 	add	local05, objptr
1ca7c     80 BF 23 FF 
1ca80     00 12 06 F6 | 	mov	arg01, ##1199505408
1ca84     0F 15 02 F6 | 	mov	arg02, local01
1ca88     0D 00 00 FF 
1ca8c     D8 E4 85 F1 | 	sub	objptr, ##6872
1ca90     64 69 B0 FD | 	call	#__system___float_mul
1ca94     FD 12 02 F6 | 	mov	arg01, result1
1ca98     01 14 06 F6 | 	mov	arg02, #1
1ca9c     20 6E B0 FD | 	call	#__system___float_tointeger
1caa0     13 FB 51 FC | 	wrword	result1, local05
1caa4     0F 13 02 F6 | 	mov	arg01, local01
1caa8     CC BC 1F FF 
1caac     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cab0     44 69 B0 FD | 	call	#__system___float_mul
1cab4     FD 1E 02 F6 | 	mov	local01, result1
1cab8     01 20 06 F1 | 	add	local02, #1
1cabc     00 21 56 F2 | 	cmps	local02, #256 wc
1cac0     A4 FF 9F CD |  if_b	jmp	#LR__2294
1cac4     0E 00 00 FF 
1cac8     D6 E4 05 F1 | 	add	objptr, ##7382
1cacc     F2 00 58 FC | 	wrword	#0, objptr
1cad0                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cad0     00 20 06 F6 | 	mov	local02, #0
1cad4     02 E4 05 F1 | 	add	objptr, #2
1cad8     97 10 48 FB | 	callpa	#(@LR__2296-@LR__2295)>>2,fcache_load_ptr_
1cadc                 | LR__2295
1cadc     10 27 02 F6 | 	mov	local05, local02
1cae0     01 26 66 F0 | 	shl	local05, #1
1cae4     F2 26 02 F1 | 	add	local05, objptr
1cae8     7F 00 80 FF 
1caec     13 01 5A FC | 	wrword	##65280, local05
1caf0     01 20 06 F1 | 	add	local02, #1
1caf4     FF 20 56 F2 | 	cmps	local02, #255 wc
1caf8     E0 FF 9F CD |  if_b	jmp	#LR__2295
1cafc                 | LR__2296
1cafc     FE E5 05 F1 | 	add	objptr, #510
1cb00     F2 00 58 FC | 	wrword	#0, objptr
1cb04                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cb04     00 20 06 F6 | 	mov	local02, #0
1cb08     02 E4 05 F1 | 	add	objptr, #2
1cb0c     97 52 48 FB | 	callpa	#(@LR__2301-@LR__2297)>>2,fcache_load_ptr_
1cb10                 | LR__2297
1cb10     10 27 02 F6 | 	mov	local05, local02
1cb14     01 26 66 F0 | 	shl	local05, #1
1cb18     F2 26 02 F1 | 	add	local05, objptr
1cb1c     10 29 02 F6 | 	mov	local06, local02
1cb20     0C 28 66 F0 | 	shl	local06, #12
1cb24     13 29 52 FC | 	wrword	local06, local05
1cb28     01 20 06 F1 | 	add	local02, #1
1cb2c     10 20 56 F2 | 	cmps	local02, #16 wc
1cb30     DC FF 9F CD |  if_b	jmp	#LR__2297
1cb34                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cb34     10 20 06 F6 | 	mov	local02, #16
1cb38                 | LR__2298
1cb38     10 27 02 F6 | 	mov	local05, local02
1cb3c     01 26 66 F0 | 	shl	local05, #1
1cb40     F2 26 02 F1 | 	add	local05, objptr
1cb44     7F 00 80 FF 
1cb48     13 01 5A FC | 	wrword	##65280, local05
1cb4c     01 20 06 F1 | 	add	local02, #1
1cb50     F0 20 16 F2 | 	cmp	local02, #240 wc
1cb54     E0 FF 9F CD |  if_b	jmp	#LR__2298
1cb58                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cb58     F0 20 06 F6 | 	mov	local02, #240
1cb5c                 | LR__2299
1cb5c     10 27 02 F6 | 	mov	local05, local02
1cb60     01 26 66 F0 | 	shl	local05, #1
1cb64     F2 26 02 F1 | 	add	local05, objptr
1cb68     FF 22 06 F6 | 	mov	local03, #255
1cb6c     10 23 82 F1 | 	sub	local03, local02
1cb70     0C 22 66 F0 | 	shl	local03, #12
1cb74     13 23 52 FC | 	wrword	local03, local05
1cb78     01 20 06 F1 | 	add	local02, #1
1cb7c     00 21 16 F2 | 	cmp	local02, #256 wc
1cb80     D8 FF 9F CD |  if_b	jmp	#LR__2299
1cb84                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cb84     00 20 06 F6 | 	mov	local02, #0
1cb88     01 00 00 FF 
1cb8c     00 E4 05 F1 | 	add	objptr, ##512
1cb90                 | LR__2300
1cb90     10 27 02 F6 | 	mov	local05, local02
1cb94     01 26 66 F0 | 	shl	local05, #1
1cb98     F2 26 02 F1 | 	add	local05, objptr
1cb9c     10 29 02 F6 | 	mov	local06, local02
1cba0     08 28 66 F0 | 	shl	local06, #8
1cba4     13 29 52 FC | 	wrword	local06, local05
1cba8     01 20 06 F1 | 	add	local02, #1
1cbac     00 21 56 F2 | 	cmps	local02, #256 wc
1cbb0     DC FF 9F CD |  if_b	jmp	#LR__2300
1cbb4                 | LR__2301
1cbb4     FE E5 05 F1 | 	add	objptr, #510
1cbb8     F2 00 58 FC | 	wrword	#0, objptr
1cbbc                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cbbc     00 20 06 F6 | 	mov	local02, #0
1cbc0     02 E4 05 F1 | 	add	objptr, #2
1cbc4     97 6A 48 FB | 	callpa	#(@LR__2306-@LR__2302)>>2,fcache_load_ptr_
1cbc8                 | LR__2302
1cbc8     10 27 02 F6 | 	mov	local05, local02
1cbcc     01 26 66 F0 | 	shl	local05, #1
1cbd0     F2 26 02 F1 | 	add	local05, objptr
1cbd4     10 29 02 F6 | 	mov	local06, local02
1cbd8     04 28 66 F0 | 	shl	local06, #4
1cbdc     10 29 02 F1 | 	add	local06, local02
1cbe0     04 28 66 F0 | 	shl	local06, #4
1cbe4     13 29 52 FC | 	wrword	local06, local05
1cbe8     01 20 06 F1 | 	add	local02, #1
1cbec     F0 20 56 F2 | 	cmps	local02, #240 wc
1cbf0     D4 FF 9F CD |  if_b	jmp	#LR__2302
1cbf4     F0 20 06 F6 | 	mov	local02, #240
1cbf8                 | LR__2303
1cbf8     10 27 02 F6 | 	mov	local05, local02
1cbfc     01 26 66 F0 | 	shl	local05, #1
1cc00     F2 26 02 F1 | 	add	local05, objptr
1cc04     FF 22 06 F6 | 	mov	local03, #255
1cc08     10 23 82 F1 | 	sub	local03, local02
1cc0c     0C 22 66 F0 | 	shl	local03, #12
1cc10     13 23 52 FC | 	wrword	local03, local05
1cc14     01 20 06 F1 | 	add	local02, #1
1cc18     00 21 16 F2 | 	cmp	local02, #256 wc
1cc1c     D8 FF 9F CD |  if_b	jmp	#LR__2303
1cc20                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1cc20     00 20 06 F6 | 	mov	local02, #0
1cc24     01 00 00 FF 
1cc28     00 E4 05 F1 | 	add	objptr, ##512
1cc2c                 | LR__2304
1cc2c     10 27 02 F6 | 	mov	local05, local02
1cc30     01 26 66 F0 | 	shl	local05, #1
1cc34     F2 26 02 F1 | 	add	local05, objptr
1cc38     10 29 02 F6 | 	mov	local06, local02
1cc3c     09 28 66 F0 | 	shl	local06, #9
1cc40     13 29 52 FC | 	wrword	local06, local05
1cc44     FF 26 06 F6 | 	mov	local05, #255
1cc48     10 27 82 F1 | 	sub	local05, local02
1cc4c     01 26 66 F0 | 	shl	local05, #1
1cc50     F2 26 02 F1 | 	add	local05, objptr
1cc54     10 29 02 F6 | 	mov	local06, local02
1cc58     09 28 66 F0 | 	shl	local06, #9
1cc5c     13 29 52 FC | 	wrword	local06, local05
1cc60     01 20 06 F1 | 	add	local02, #1
1cc64     80 20 56 F2 | 	cmps	local02, #128 wc
1cc68     C0 FF 9F CD |  if_b	jmp	#LR__2304
1cc6c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cc6c     00 20 06 F6 | 	mov	local02, #0
1cc70     01 00 00 FF 
1cc74     00 E4 05 F1 | 	add	objptr, ##512
1cc78                 | LR__2305
1cc78     10 27 02 F6 | 	mov	local05, local02
1cc7c     01 26 66 F0 | 	shl	local05, #1
1cc80     F2 26 02 F1 | 	add	local05, objptr
1cc84     10 29 02 F6 | 	mov	local06, local02
1cc88     0D 28 66 F0 | 	shl	local06, #13
1cc8c     13 29 52 FC | 	wrword	local06, local05
1cc90     01 20 06 F1 | 	add	local02, #1
1cc94     08 20 56 F2 | 	cmps	local02, #8 wc
1cc98     DC FF 9F CD |  if_b	jmp	#LR__2305
1cc9c                 | LR__2306
1cc9c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cc9c     08 20 06 F6 | 	mov	local02, #8
1cca0     97 42 48 FB | 	callpa	#(@LR__2310-@LR__2307)>>2,fcache_load_ptr_
1cca4                 | LR__2307
1cca4     10 27 02 F6 | 	mov	local05, local02
1cca8     01 26 66 F0 | 	shl	local05, #1
1ccac     F2 26 02 F1 | 	add	local05, objptr
1ccb0     10 1F 02 F6 | 	mov	local01, local02
1ccb4     08 1E 86 F1 | 	sub	local01, #8
1ccb8     0B 1E 66 F0 | 	shl	local01, #11
1ccbc     7F 00 00 FF 
1ccc0     00 29 06 F6 | 	mov	local06, ##65280
1ccc4     0F 29 82 F1 | 	sub	local06, local01
1ccc8     13 29 52 FC | 	wrword	local06, local05
1cccc     01 20 06 F1 | 	add	local02, #1
1ccd0     18 20 16 F2 | 	cmp	local02, #24 wc
1ccd4     CC FF 9F CD |  if_b	jmp	#LR__2307
1ccd8                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1ccd8     18 20 06 F6 | 	mov	local02, #24
1ccdc                 | LR__2308
1ccdc     10 27 02 F6 | 	mov	local05, local02
1cce0     01 26 66 F0 | 	shl	local05, #1
1cce4     F2 26 02 F1 | 	add	local05, objptr
1cce8     40 00 80 FF 
1ccec     13 01 58 FC | 	wrword	##32768, local05
1ccf0     01 20 06 F1 | 	add	local02, #1
1ccf4     81 20 16 F2 | 	cmp	local02, #129 wc
1ccf8     E0 FF 9F CD |  if_b	jmp	#LR__2308
1ccfc                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1ccfc     81 20 06 F6 | 	mov	local02, #129
1cd00                 | LR__2309
1cd00     10 27 02 F6 | 	mov	local05, local02
1cd04     01 26 66 F0 | 	shl	local05, #1
1cd08     F2 26 02 F1 | 	add	local05, objptr
1cd0c     FF 22 06 F6 | 	mov	local03, #255
1cd10     10 23 82 F1 | 	sub	local03, local02
1cd14     08 22 66 F0 | 	shl	local03, #8
1cd18     13 23 52 FC | 	wrword	local03, local05
1cd1c     01 20 06 F1 | 	add	local02, #1
1cd20     00 21 16 F2 | 	cmp	local02, #256 wc
1cd24     D8 FF 9F CD |  if_b	jmp	#LR__2309
1cd28                 | LR__2310
1cd28     3E 00 00 FF 
1cd2c     FE E4 05 F1 | 	add	objptr, ##31998
1cd30     F2 00 59 FC | 	wrword	#128, objptr
1cd34     51 00 00 FF 
1cd38     D6 E5 85 F1 | 	sub	objptr, ##41942
1cd3c                 | ' for i=0 to 7
1cd3c     00 20 06 F6 | 	mov	local02, #0
1cd40     97 8E 48 FB | 	callpa	#(@LR__2312-@LR__2311)>>2,fcache_load_ptr_
1cd44                 | LR__2311
1cd44     10 27 02 F6 | 	mov	local05, local02
1cd48     01 26 66 F0 | 	shl	local05, #1
1cd4c     10 27 02 F1 | 	add	local05, local02
1cd50     03 26 66 F0 | 	shl	local05, #3
1cd54     14 00 00 FF 
1cd58     38 E5 05 F1 | 	add	objptr, ##10552
1cd5c     F2 26 02 F1 | 	add	local05, objptr
1cd60     00 EE A1 FF 
1cd64     13 01 68 FC | 	wrlong	##1138491392, local05
1cd68     10 27 02 F6 | 	mov	local05, local02
1cd6c     01 26 66 F0 | 	shl	local05, #1
1cd70     10 27 02 F1 | 	add	local05, local02
1cd74     03 26 66 F0 | 	shl	local05, #3
1cd78     F2 26 02 F1 | 	add	local05, objptr
1cd7c     04 26 06 F1 | 	add	local05, #4
1cd80     13 21 42 FC | 	wrbyte	local02, local05
1cd84     10 27 02 F6 | 	mov	local05, local02
1cd88     01 26 66 F0 | 	shl	local05, #1
1cd8c     10 27 02 F1 | 	add	local05, local02
1cd90     03 26 66 F0 | 	shl	local05, #3
1cd94     F2 26 02 F1 | 	add	local05, objptr
1cd98     05 26 06 F1 | 	add	local05, #5
1cd9c     13 21 42 FC | 	wrbyte	local02, local05
1cda0     10 27 02 F6 | 	mov	local05, local02
1cda4     01 26 66 F0 | 	shl	local05, #1
1cda8     10 27 02 F1 | 	add	local05, local02
1cdac     03 26 66 F0 | 	shl	local05, #3
1cdb0     F2 26 02 F1 | 	add	local05, objptr
1cdb4     06 26 06 F1 | 	add	local05, #6
1cdb8     13 01 58 FC | 	wrword	#0, local05
1cdbc     10 27 02 F6 | 	mov	local05, local02
1cdc0     01 26 66 F0 | 	shl	local05, #1
1cdc4     10 27 02 F1 | 	add	local05, local02
1cdc8     03 26 66 F0 | 	shl	local05, #3
1cdcc     F2 26 02 F1 | 	add	local05, objptr
1cdd0     08 26 06 F1 | 	add	local05, #8
1cdd4     00 C0 9F FF 
1cdd8     13 01 68 FC | 	wrlong	##1065353216, local05
1cddc     10 27 02 F6 | 	mov	local05, local02
1cde0     01 26 66 F0 | 	shl	local05, #1
1cde4     10 27 02 F1 | 	add	local05, local02
1cde8     03 26 66 F0 | 	shl	local05, #3
1cdec     F2 26 02 F1 | 	add	local05, objptr
1cdf0     0C 26 06 F1 | 	add	local05, #12
1cdf4     00 40 A0 FF 
1cdf8     13 01 68 FC | 	wrlong	##1082130432, local05
1cdfc     10 27 02 F6 | 	mov	local05, local02
1ce00     01 26 66 F0 | 	shl	local05, #1
1ce04     10 27 02 F1 | 	add	local05, local02
1ce08     03 26 66 F0 | 	shl	local05, #3
1ce0c     F2 26 02 F1 | 	add	local05, objptr
1ce10     10 26 06 F1 | 	add	local05, #16
1ce14     13 01 68 FC | 	wrlong	#0, local05
1ce18     10 27 02 F6 | 	mov	local05, local02
1ce1c     01 26 66 F0 | 	shl	local05, #1
1ce20     10 27 02 F1 | 	add	local05, local02
1ce24     03 26 66 F0 | 	shl	local05, #3
1ce28     F2 26 02 F1 | 	add	local05, objptr
1ce2c     14 26 06 F1 | 	add	local05, #20
1ce30     13 FF 59 FC | 	wrword	#255, local05
1ce34     10 27 02 F6 | 	mov	local05, local02
1ce38     01 26 66 F0 | 	shl	local05, #1
1ce3c     3D 00 00 FF 
1ce40     90 E4 05 F1 | 	add	objptr, ##31376
1ce44     F2 26 02 F1 | 	add	local05, objptr
1ce48     13 FF 59 FC | 	wrword	#255, local05
1ce4c     01 20 06 F1 | 	add	local02, #1
1ce50     08 20 56 F2 | 	cmps	local02, #8 wc
1ce54     51 00 00 FF 
1ce58     C8 E5 85 F1 | 	sub	objptr, ##41928
1ce5c     E4 FE 9F CD |  if_b	jmp	#LR__2311
1ce60                 | LR__2312
1ce60     00 6E 20 FF 
1ce64     00 28 06 F6 | 	mov	local06, ##1088159744
1ce68                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1ce68     03 26 06 F6 | 	mov	local05, #3
1ce6c                 | LR__2313
1ce6c     14 13 02 F6 | 	mov	arg01, local06
1ce70     CE C3 1F FF 
1ce74     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ce78     7C 65 B0 FD | 	call	#__system___float_mul
1ce7c     FD 28 02 F6 | 	mov	local06, result1
1ce80     FA 27 6E FB | 	djnz	local05, #LR__2313
1ce84     00 20 06 F6 | 	mov	local02, #0
1ce88                 | LR__2314
1ce88     10 25 02 F6 | 	mov	local04, local02
1ce8c     02 24 66 F0 | 	shl	local04, #2
1ce90     14 00 00 FF 
1ce94     D8 E4 05 F1 | 	add	objptr, ##10456
1ce98     F2 24 02 F1 | 	add	local04, objptr
1ce9c     12 29 62 FC | 	wrlong	local06, local04
1cea0     14 13 02 F6 | 	mov	arg01, local06
1cea4     CE C3 1F FF 
1cea8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1ceac     14 00 00 FF 
1ceb0     D8 E4 85 F1 | 	sub	objptr, ##10456
1ceb4     40 65 B0 FD | 	call	#__system___float_mul
1ceb8     FD 28 02 F6 | 	mov	local06, result1
1cebc     01 20 06 F1 | 	add	local02, #1
1cec0     0C 20 56 F2 | 	cmps	local02, #12 wc
1cec4     C0 FF 9F CD |  if_b	jmp	#LR__2314
1cec8     14 00 00 FF 
1cecc     08 E5 05 F1 | 	add	objptr, ##10504
1ced0     F2 50 6B FC | 	wrlong	#424, objptr
1ced4     04 E4 05 F1 | 	add	objptr, #4
1ced8     F2 20 6B FC | 	wrlong	#400, objptr
1cedc     04 E4 05 F1 | 	add	objptr, #4
1cee0     F2 F2 6A FC | 	wrlong	#377, objptr
1cee4     04 E4 05 F1 | 	add	objptr, #4
1cee8     F2 C8 6A FC | 	wrlong	#356, objptr
1ceec     04 E4 05 F1 | 	add	objptr, #4
1cef0     F2 A0 6A FC | 	wrlong	#336, objptr
1cef4     04 E4 05 F1 | 	add	objptr, #4
1cef8     F2 7A 6A FC | 	wrlong	#317, objptr
1cefc     04 E4 05 F1 | 	add	objptr, #4
1cf00     F2 58 6A FC | 	wrlong	#300, objptr
1cf04     04 E4 05 F1 | 	add	objptr, #4
1cf08     F2 36 6A FC | 	wrlong	#283, objptr
1cf0c     04 E4 05 F1 | 	add	objptr, #4
1cf10     F2 16 6A FC | 	wrlong	#267, objptr
1cf14     04 E4 05 F1 | 	add	objptr, #4
1cf18     F2 F8 69 FC | 	wrlong	#252, objptr
1cf1c     04 E4 05 F1 | 	add	objptr, #4
1cf20     F2 DC 69 FC | 	wrlong	#238, objptr
1cf24     04 E4 05 F1 | 	add	objptr, #4
1cf28     F2 C0 69 FC | 	wrlong	#224, objptr
1cf2c     3D 00 00 FF 
1cf30     A2 E4 05 F1 | 	add	objptr, ##31394
1cf34     F2 00 59 FC | 	wrword	#128, objptr
1cf38     02 E4 85 F1 | 	sub	objptr, #2
1cf3c     F2 00 59 FC | 	wrword	#128, objptr
1cf40     51 00 00 FF 
1cf44     D4 E5 85 F1 | 	sub	objptr, ##41940
1cf48     A7 F0 03 F6 | 	mov	ptra, fp
1cf4c     B2 00 A0 FD | 	call	#popregs_
1cf50                 | _init_audio_ret
1cf50     2D 00 64 FD | 	ret
1cf54                 | 
1cf54                 | ' 
1cf54                 | ' '------------------- Error messages
1cf54                 | ' 
1cf54                 | ' sub init_error_strings
1cf54                 | _init_error_strings
1cf54     85 01 00 FF 
1cf58     02 00 06 F6 | 	mov	_var01, ##@LR__5494
1cf5c     45 00 00 FF 
1cf60     7C E4 05 F1 | 	add	objptr, ##35452
1cf64     F2 00 62 FC | 	wrlong	_var01, objptr
1cf68     85 01 00 FF 
1cf6c     03 00 06 F6 | 	mov	_var01, ##@LR__5495
1cf70     04 E4 05 F1 | 	add	objptr, #4
1cf74     F2 00 62 FC | 	wrlong	_var01, objptr
1cf78     85 01 00 FF 
1cf7c     28 00 06 F6 | 	mov	_var01, ##@LR__5496
1cf80     04 E4 05 F1 | 	add	objptr, #4
1cf84     F2 00 62 FC | 	wrlong	_var01, objptr
1cf88     85 01 00 FF 
1cf8c     49 00 06 F6 | 	mov	_var01, ##@LR__5497
1cf90     04 E4 05 F1 | 	add	objptr, #4
1cf94     F2 00 62 FC | 	wrlong	_var01, objptr
1cf98     85 01 00 FF 
1cf9c     63 00 06 F6 | 	mov	_var01, ##@LR__5498
1cfa0     04 E4 05 F1 | 	add	objptr, #4
1cfa4     F2 00 62 FC | 	wrlong	_var01, objptr
1cfa8     85 01 00 FF 
1cfac     7F 00 06 F6 | 	mov	_var01, ##@LR__5499
1cfb0     04 E4 05 F1 | 	add	objptr, #4
1cfb4     F2 00 62 FC | 	wrlong	_var01, objptr
1cfb8     85 01 00 FF 
1cfbc     A1 00 06 F6 | 	mov	_var01, ##@LR__5500
1cfc0     04 E4 05 F1 | 	add	objptr, #4
1cfc4     F2 00 62 FC | 	wrlong	_var01, objptr
1cfc8     85 01 00 FF 
1cfcc     CF 00 06 F6 | 	mov	_var01, ##@LR__5501
1cfd0     04 E4 05 F1 | 	add	objptr, #4
1cfd4     F2 00 62 FC | 	wrlong	_var01, objptr
1cfd8     85 01 00 FF 
1cfdc     FA 00 06 F6 | 	mov	_var01, ##@LR__5502
1cfe0     04 E4 05 F1 | 	add	objptr, #4
1cfe4     F2 00 62 FC | 	wrlong	_var01, objptr
1cfe8     85 01 00 FF 
1cfec     13 01 06 F6 | 	mov	_var01, ##@LR__5503
1cff0     04 E4 05 F1 | 	add	objptr, #4
1cff4     F2 00 62 FC | 	wrlong	_var01, objptr
1cff8     85 01 00 FF 
1cffc     34 01 06 F6 | 	mov	_var01, ##@LR__5504
1d000     04 E4 05 F1 | 	add	objptr, #4
1d004     F2 00 62 FC | 	wrlong	_var01, objptr
1d008     85 01 00 FF 
1d00c     4B 01 06 F6 | 	mov	_var01, ##@LR__5505
1d010     04 E4 05 F1 | 	add	objptr, #4
1d014     F2 00 62 FC | 	wrlong	_var01, objptr
1d018     85 01 00 FF 
1d01c     69 01 06 F6 | 	mov	_var01, ##@LR__5506
1d020     04 E4 05 F1 | 	add	objptr, #4
1d024     F2 00 62 FC | 	wrlong	_var01, objptr
1d028     85 01 00 FF 
1d02c     8D 01 06 F6 | 	mov	_var01, ##@LR__5507
1d030     04 E4 05 F1 | 	add	objptr, #4
1d034     F2 00 62 FC | 	wrlong	_var01, objptr
1d038     85 01 00 FF 
1d03c     B4 01 06 F6 | 	mov	_var01, ##@LR__5508
1d040     04 E4 05 F1 | 	add	objptr, #4
1d044     F2 00 62 FC | 	wrlong	_var01, objptr
1d048     85 01 00 FF 
1d04c     D0 01 06 F6 | 	mov	_var01, ##@LR__5509
1d050     04 E4 05 F1 | 	add	objptr, #4
1d054     F2 00 62 FC | 	wrlong	_var01, objptr
1d058     85 01 00 FF 
1d05c     E1 01 06 F6 | 	mov	_var01, ##@LR__5510
1d060     04 E4 05 F1 | 	add	objptr, #4
1d064     F2 00 62 FC | 	wrlong	_var01, objptr
1d068     85 01 00 FF 
1d06c     F1 01 06 F6 | 	mov	_var01, ##@LR__5511
1d070     04 E4 05 F1 | 	add	objptr, #4
1d074     F2 00 62 FC | 	wrlong	_var01, objptr
1d078     86 01 00 FF 
1d07c     0C 00 06 F6 | 	mov	_var01, ##@LR__5512
1d080     04 E4 05 F1 | 	add	objptr, #4
1d084     F2 00 62 FC | 	wrlong	_var01, objptr
1d088     86 01 00 FF 
1d08c     1E 00 06 F6 | 	mov	_var01, ##@LR__5513
1d090     04 E4 05 F1 | 	add	objptr, #4
1d094     F2 00 62 FC | 	wrlong	_var01, objptr
1d098     86 01 00 FF 
1d09c     36 00 06 F6 | 	mov	_var01, ##@LR__5514
1d0a0     04 E4 05 F1 | 	add	objptr, #4
1d0a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0a8     86 01 00 FF 
1d0ac     4A 00 06 F6 | 	mov	_var01, ##@LR__5515
1d0b0     04 E4 05 F1 | 	add	objptr, #4
1d0b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0b8     86 01 00 FF 
1d0bc     5A 00 06 F6 | 	mov	_var01, ##@LR__5516
1d0c0     04 E4 05 F1 | 	add	objptr, #4
1d0c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0c8     86 01 00 FF 
1d0cc     77 00 06 F6 | 	mov	_var01, ##@LR__5517
1d0d0     04 E4 05 F1 | 	add	objptr, #4
1d0d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0d8     86 01 00 FF 
1d0dc     88 00 06 F6 | 	mov	_var01, ##@LR__5518
1d0e0     04 E4 05 F1 | 	add	objptr, #4
1d0e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0e8     86 01 00 FF 
1d0ec     99 00 06 F6 | 	mov	_var01, ##@LR__5519
1d0f0     04 E4 05 F1 | 	add	objptr, #4
1d0f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d0f8     86 01 00 FF 
1d0fc     CD 00 06 F6 | 	mov	_var01, ##@LR__5520
1d100     04 E4 05 F1 | 	add	objptr, #4
1d104     F2 00 62 FC | 	wrlong	_var01, objptr
1d108     86 01 00 FF 
1d10c     E9 00 06 F6 | 	mov	_var01, ##@LR__5521
1d110     04 E4 05 F1 | 	add	objptr, #4
1d114     F2 00 62 FC | 	wrlong	_var01, objptr
1d118     86 01 00 FF 
1d11c     FF 00 06 F6 | 	mov	_var01, ##@LR__5522
1d120     04 E4 05 F1 | 	add	objptr, #4
1d124     F2 00 62 FC | 	wrlong	_var01, objptr
1d128     86 01 00 FF 
1d12c     0C 01 06 F6 | 	mov	_var01, ##@LR__5523
1d130     04 E4 05 F1 | 	add	objptr, #4
1d134     F2 00 62 FC | 	wrlong	_var01, objptr
1d138     86 01 00 FF 
1d13c     1E 01 06 F6 | 	mov	_var01, ##@LR__5524
1d140     04 E4 05 F1 | 	add	objptr, #4
1d144     F2 00 62 FC | 	wrlong	_var01, objptr
1d148     86 01 00 FF 
1d14c     2F 01 06 F6 | 	mov	_var01, ##@LR__5525
1d150     04 E4 05 F1 | 	add	objptr, #4
1d154     F2 00 62 FC | 	wrlong	_var01, objptr
1d158     86 01 00 FF 
1d15c     4B 01 06 F6 | 	mov	_var01, ##@LR__5526
1d160     04 E4 05 F1 | 	add	objptr, #4
1d164     F2 00 62 FC | 	wrlong	_var01, objptr
1d168     86 01 00 FF 
1d16c     5C 01 06 F6 | 	mov	_var01, ##@LR__5527
1d170     04 E4 05 F1 | 	add	objptr, #4
1d174     F2 00 62 FC | 	wrlong	_var01, objptr
1d178     86 01 00 FF 
1d17c     6B 01 06 F6 | 	mov	_var01, ##@LR__5528
1d180     04 E4 05 F1 | 	add	objptr, #4
1d184     F2 00 62 FC | 	wrlong	_var01, objptr
1d188     86 01 00 FF 
1d18c     86 01 06 F6 | 	mov	_var01, ##@LR__5529
1d190     04 E4 05 F1 | 	add	objptr, #4
1d194     F2 00 62 FC | 	wrlong	_var01, objptr
1d198     86 01 00 FF 
1d19c     BA 01 06 F6 | 	mov	_var01, ##@LR__5530
1d1a0     04 E4 05 F1 | 	add	objptr, #4
1d1a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1a8     86 01 00 FF 
1d1ac     D3 01 06 F6 | 	mov	_var01, ##@LR__5531
1d1b0     04 E4 05 F1 | 	add	objptr, #4
1d1b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1b8     86 01 00 FF 
1d1bc     EF 01 06 F6 | 	mov	_var01, ##@LR__5532
1d1c0     04 E4 05 F1 | 	add	objptr, #4
1d1c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1c8     87 01 00 FF 
1d1cc     0D 00 06 F6 | 	mov	_var01, ##@LR__5533
1d1d0     04 E4 05 F1 | 	add	objptr, #4
1d1d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d8     87 01 00 FF 
1d1dc     26 00 06 F6 | 	mov	_var01, ##@LR__5534
1d1e0     04 E4 05 F1 | 	add	objptr, #4
1d1e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e8     87 01 00 FF 
1d1ec     45 00 06 F6 | 	mov	_var01, ##@LR__5535
1d1f0     04 E4 05 F1 | 	add	objptr, #4
1d1f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f8     87 01 00 FF 
1d1fc     54 00 06 F6 | 	mov	_var01, ##@LR__5536
1d200     04 E4 05 F1 | 	add	objptr, #4
1d204     F2 00 62 FC | 	wrlong	_var01, objptr
1d208     87 01 00 FF 
1d20c     82 00 06 F6 | 	mov	_var01, ##@LR__5537
1d210     04 E4 05 F1 | 	add	objptr, #4
1d214     F2 00 62 FC | 	wrlong	_var01, objptr
1d218     87 01 00 FF 
1d21c     90 00 06 F6 | 	mov	_var01, ##@LR__5538
1d220     04 E4 05 F1 | 	add	objptr, #4
1d224     F2 00 62 FC | 	wrlong	_var01, objptr
1d228     87 01 00 FF 
1d22c     A5 00 06 F6 | 	mov	_var01, ##@LR__5539
1d230     04 E4 05 F1 | 	add	objptr, #4
1d234     F2 00 62 FC | 	wrlong	_var01, objptr
1d238     87 01 00 FF 
1d23c     C9 00 06 F6 | 	mov	_var01, ##@LR__5540
1d240     04 E4 05 F1 | 	add	objptr, #4
1d244     F2 00 62 FC | 	wrlong	_var01, objptr
1d248     87 01 00 FF 
1d24c     E0 00 06 F6 | 	mov	_var01, ##@LR__5541
1d250     04 E4 05 F1 | 	add	objptr, #4
1d254     F2 00 62 FC | 	wrlong	_var01, objptr
1d258     87 01 00 FF 
1d25c     F3 00 06 F6 | 	mov	_var01, ##@LR__5542
1d260     04 E4 05 F1 | 	add	objptr, #4
1d264     F2 00 62 FC | 	wrlong	_var01, objptr
1d268     87 01 00 FF 
1d26c     0A 01 06 F6 | 	mov	_var01, ##@LR__5543
1d270     04 E4 05 F1 | 	add	objptr, #4
1d274     F2 00 62 FC | 	wrlong	_var01, objptr
1d278     87 01 00 FF 
1d27c     23 01 06 F6 | 	mov	_var01, ##@LR__5544
1d280     04 E4 05 F1 | 	add	objptr, #4
1d284     F2 00 62 FC | 	wrlong	_var01, objptr
1d288     87 01 00 FF 
1d28c     45 01 06 F6 | 	mov	_var01, ##@LR__5545
1d290     04 E4 05 F1 | 	add	objptr, #4
1d294     F2 00 62 FC | 	wrlong	_var01, objptr
1d298     87 01 00 FF 
1d29c     58 01 06 F6 | 	mov	_var01, ##@LR__5546
1d2a0     04 E4 05 F1 | 	add	objptr, #4
1d2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a8     45 00 00 FF 
1d2ac     4C E5 85 F1 | 	sub	objptr, ##35660
1d2b0                 | _init_error_strings_ret
1d2b0     2D 00 64 FD | 	ret
1d2b4                 | 
1d2b4                 | '         
1d2b4                 | ' sub printerror(err as integer)
1d2b4                 | _printerror
1d2b4     01 4A 05 F6 | 	mov	COUNT_, #1
1d2b8     A8 00 A0 FD | 	call	#pushregs_
1d2bc     09 1F 02 F6 | 	mov	local01, arg01
1d2c0     87 01 00 FF 
1d2c4     68 13 06 F6 | 	mov	arg01, ##@LR__5547
1d2c8     5C 20 B0 FD | 	call	#_hg010b_spin2_write
1d2cc     0F 13 02 F6 | 	mov	arg01, local01
1d2d0     F8 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1d2d4     FD 12 02 F6 | 	mov	arg01, result1
1d2d8     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1d2dc     87 01 00 FF 
1d2e0     6F 13 06 F6 | 	mov	arg01, ##@LR__5548
1d2e4     40 20 B0 FD | 	call	#_hg010b_spin2_write
1d2e8     02 1E 66 F0 | 	shl	local01, #2
1d2ec     45 00 00 FF 
1d2f0     7C E4 05 F1 | 	add	objptr, ##35452
1d2f4     F2 1E 02 F1 | 	add	local01, objptr
1d2f8     0F 13 02 FB | 	rdlong	arg01, local01
1d2fc     45 00 00 FF 
1d300     7C E4 85 F1 | 	sub	objptr, ##35452
1d304                 | ' 
1d304                 | ' write(text)
1d304     20 20 B0 FD | 	call	#_hg010b_spin2_write
1d308                 | ' crlf
1d308     1C 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d30c     A7 F0 03 F6 | 	mov	ptra, fp
1d310     B2 00 A0 FD | 	call	#popregs_
1d314                 | _printerror_ret
1d314     2D 00 64 FD | 	ret
1d318                 | 
1d318                 | ' 
1d318                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d318                 | ' 
1d318                 | ' sub startpsram
1d318                 | _startpsram
1d318     00 12 06 F6 | 	mov	arg01, #0
1d31c     0A 14 C6 F9 | 	decod	arg02, #10
1d320     0B 16 06 F6 | 	mov	arg03, #11
1d324     07 18 06 F6 | 	mov	arg04, #7
1d328     0B 00 00 FF 
1d32c     CC E4 05 F1 | 	add	objptr, ##5836
1d330     A4 26 B0 FD | 	call	#_psram_spin2_startx
1d334     2B 00 00 FF 
1d338     3C E5 05 F1 | 	add	objptr, ##22332
1d33c     F2 FA 61 FC | 	wrlong	result1, objptr
1d340                 | '     return $7FF00 + cog*12
1d340     0C E4 05 F1 | 	add	objptr, #12
1d344     FF 03 80 FF 
1d348     F2 00 6A FC | 	wrlong	##524032, objptr
1d34c     37 00 00 FF 
1d350     14 E4 85 F1 | 	sub	objptr, ##28180
1d354                 | _startpsram_ret
1d354     2D 00 64 FD | 	ret
1d358                 | 
1d358                 | ' 
1d358                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d358                 | _startvideo
1d358     01 4A 05 F6 | 	mov	COUNT_, #1
1d35c     A8 00 A0 FD | 	call	#pushregs_
1d360     37 00 00 FF 
1d364     14 E4 05 F1 | 	add	objptr, ##28180
1d368     F2 18 02 FB | 	rdlong	arg04, objptr
1d36c     37 00 00 FF 
1d370     14 E4 85 F1 | 	sub	objptr, ##28180
1d374     0A 13 02 F6 | 	mov	arg01, arg02
1d378     0C 15 02 F6 | 	mov	arg02, arg04
1d37c     A0 07 B0 FD | 	call	#_hg010b_spin2_start
1d380     37 00 00 FF 
1d384     00 E4 05 F1 | 	add	objptr, ##28160
1d388     F2 FA 61 FC | 	wrlong	result1, objptr
1d38c                 | ' 
1d38c                 | ' videocog=v.start(pin,mbox)
1d38c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d38c     00 1E 06 F6 | 	mov	local01, #0
1d390     2B 00 00 FF 
1d394     34 E5 85 F1 | 	sub	objptr, ##22324
1d398                 | LR__2320
1d398     0F 13 02 F6 | 	mov	arg01, local01
1d39c     00 28 00 FF 
1d3a0     00 14 06 F6 | 	mov	arg02, ##5242880
1d3a4     88 2A B0 FD | 	call	#_psram_spin2_setQos
1d3a8     01 1E 06 F1 | 	add	local01, #1
1d3ac     08 1E 56 F2 | 	cmps	local01, #8 wc
1d3b0     E4 FF 9F CD |  if_b	jmp	#LR__2320
1d3b4     2B 00 00 FF 
1d3b8     34 E5 05 F1 | 	add	objptr, ##22324
1d3bc     F2 12 02 FB | 	rdlong	arg01, objptr
1d3c0     7A 00 02 FF 
1d3c4     00 14 06 F6 | 	mov	arg02, ##67171328
1d3c8     2B 00 00 FF 
1d3cc     34 E5 85 F1 | 	sub	objptr, ##22324
1d3d0     5C 2A B0 FD | 	call	#_psram_spin2_setQos
1d3d4     0B 00 00 FF 
1d3d8     CC E4 85 F1 | 	sub	objptr, ##5836
1d3dc                 | ' psram.setQoS(videocog, $0400f400) 
1d3dc                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d3dc     F2 14 02 F6 | 	mov	arg02, objptr
1d3e0     00 70 04 FF 
1d3e4     00 14 46 F5 | 	or	arg02, ##148897792
1d3e8     00 16 06 F6 | 	mov	arg03, #0
1d3ec     00 18 06 F6 | 	mov	arg04, #0
1d3f0     00 12 06 F6 | 	mov	arg01, #0
1d3f4     F4 3E B0 FD | 	call	#__system___basic_open
1d3f8                 | ' return videocog
1d3f8     37 00 00 FF 
1d3fc     00 E4 05 F1 | 	add	objptr, ##28160
1d400     F2 FA 01 FB | 	rdlong	result1, objptr
1d404     37 00 00 FF 
1d408     00 E4 85 F1 | 	sub	objptr, ##28160
1d40c     A7 F0 03 F6 | 	mov	ptra, fp
1d410     B2 00 A0 FD | 	call	#popregs_
1d414                 | _startvideo_ret
1d414     2D 00 64 FD | 	ret
1d418                 | 
1d418                 | ' 
1d418                 | ' 
1d418                 | ' 
1d418                 | ' '' ------------------------------- Convenient psram peek/poke
1d418                 | ' 
1d418                 | ' sub pslpoke(addr as ulong,value as ulong)
1d418                 | _pslpoke
1d418     00 4A 05 F6 | 	mov	COUNT_, #0
1d41c     A8 00 A0 FD | 	call	#pushregs_
1d420     08 F0 07 F1 | 	add	ptra, #8
1d424     A7 12 62 FC | 	wrlong	arg01, fp
1d428     04 4E 05 F1 | 	add	fp, #4
1d42c     A7 14 62 FC | 	wrlong	arg02, fp
1d430     A7 12 02 F6 | 	mov	arg01, fp
1d434     04 4E 85 F1 | 	sub	fp, #4
1d438     A7 14 02 FB | 	rdlong	arg02, fp
1d43c     04 16 06 F6 | 	mov	arg03, #4
1d440     0B 00 00 FF 
1d444     CC E4 05 F1 | 	add	objptr, ##5836
1d448     54 28 B0 FD | 	call	#_psram_spin2_write
1d44c     0B 00 00 FF 
1d450     CC E4 85 F1 | 	sub	objptr, ##5836
1d454     A7 F0 03 F6 | 	mov	ptra, fp
1d458     B2 00 A0 FD | 	call	#popregs_
1d45c                 | _pslpoke_ret
1d45c     2D 00 64 FD | 	ret
1d460                 | 
1d460                 | ' 
1d460                 | ' sub psdpoke(addr as ulong,value as ulong)
1d460                 | _psdpoke
1d460     00 4A 05 F6 | 	mov	COUNT_, #0
1d464     A8 00 A0 FD | 	call	#pushregs_
1d468     08 F0 07 F1 | 	add	ptra, #8
1d46c     A7 12 62 FC | 	wrlong	arg01, fp
1d470     04 4E 05 F1 | 	add	fp, #4
1d474     A7 14 62 FC | 	wrlong	arg02, fp
1d478     A7 12 02 F6 | 	mov	arg01, fp
1d47c     04 4E 85 F1 | 	sub	fp, #4
1d480     A7 14 02 FB | 	rdlong	arg02, fp
1d484     02 16 06 F6 | 	mov	arg03, #2
1d488     0B 00 00 FF 
1d48c     CC E4 05 F1 | 	add	objptr, ##5836
1d490     0C 28 B0 FD | 	call	#_psram_spin2_write
1d494     0B 00 00 FF 
1d498     CC E4 85 F1 | 	sub	objptr, ##5836
1d49c     A7 F0 03 F6 | 	mov	ptra, fp
1d4a0     B2 00 A0 FD | 	call	#popregs_
1d4a4                 | _psdpoke_ret
1d4a4     2D 00 64 FD | 	ret
1d4a8                 | 
1d4a8                 | ' 
1d4a8                 | ' sub pspoke(addr as ulong,value as ulong)
1d4a8                 | _pspoke
1d4a8     00 4A 05 F6 | 	mov	COUNT_, #0
1d4ac     A8 00 A0 FD | 	call	#pushregs_
1d4b0     08 F0 07 F1 | 	add	ptra, #8
1d4b4     A7 12 62 FC | 	wrlong	arg01, fp
1d4b8     04 4E 05 F1 | 	add	fp, #4
1d4bc     A7 14 62 FC | 	wrlong	arg02, fp
1d4c0     A7 12 02 F6 | 	mov	arg01, fp
1d4c4     04 4E 85 F1 | 	sub	fp, #4
1d4c8     A7 14 02 FB | 	rdlong	arg02, fp
1d4cc     01 16 06 F6 | 	mov	arg03, #1
1d4d0     0B 00 00 FF 
1d4d4     CC E4 05 F1 | 	add	objptr, ##5836
1d4d8     C4 27 B0 FD | 	call	#_psram_spin2_write
1d4dc     0B 00 00 FF 
1d4e0     CC E4 85 F1 | 	sub	objptr, ##5836
1d4e4     A7 F0 03 F6 | 	mov	ptra, fp
1d4e8     B2 00 A0 FD | 	call	#popregs_
1d4ec                 | _pspoke_ret
1d4ec     2D 00 64 FD | 	ret
1d4f0                 | 
1d4f0                 | ' 
1d4f0                 | ' function pspeek(adr as ulong) as ubyte
1d4f0                 | _pspeek
1d4f0     00 4A 05 F6 | 	mov	COUNT_, #0
1d4f4     A8 00 A0 FD | 	call	#pushregs_
1d4f8     0C F0 07 F1 | 	add	ptra, #12
1d4fc     04 4E 05 F1 | 	add	fp, #4
1d500     A7 12 62 FC | 	wrlong	arg01, fp
1d504     04 4E 05 F1 | 	add	fp, #4
1d508     A7 12 02 F6 | 	mov	arg01, fp
1d50c     04 4E 85 F1 | 	sub	fp, #4
1d510     A7 14 02 FB | 	rdlong	arg02, fp
1d514     04 4E 85 F1 | 	sub	fp, #4
1d518     01 16 06 F6 | 	mov	arg03, #1
1d51c     0B 00 00 FF 
1d520     CC E4 05 F1 | 	add	objptr, ##5836
1d524     DC 26 B0 FD | 	call	#_psram_spin2_read1
1d528     0B 00 00 FF 
1d52c     CC E4 85 F1 | 	sub	objptr, ##5836
1d530                 | ' psram.read1(varptr(res),adr,1)
1d530                 | ' return res
1d530     08 4E 05 F1 | 	add	fp, #8
1d534     A7 FA C1 FA | 	rdbyte	result1, fp
1d538     08 4E 85 F1 | 	sub	fp, #8
1d53c     A7 F0 03 F6 | 	mov	ptra, fp
1d540     B2 00 A0 FD | 	call	#popregs_
1d544                 | _pspeek_ret
1d544     2D 00 64 FD | 	ret
1d548                 | 
1d548                 | ' 
1d548                 | ' function pslpeek(adr as ulong) as ulong
1d548                 | _pslpeek
1d548     00 4A 05 F6 | 	mov	COUNT_, #0
1d54c     A8 00 A0 FD | 	call	#pushregs_
1d550     0C F0 07 F1 | 	add	ptra, #12
1d554     04 4E 05 F1 | 	add	fp, #4
1d558     A7 12 62 FC | 	wrlong	arg01, fp
1d55c     04 4E 05 F1 | 	add	fp, #4
1d560     A7 12 02 F6 | 	mov	arg01, fp
1d564     04 4E 85 F1 | 	sub	fp, #4
1d568     A7 14 02 FB | 	rdlong	arg02, fp
1d56c     04 4E 85 F1 | 	sub	fp, #4
1d570     04 16 06 F6 | 	mov	arg03, #4
1d574     0B 00 00 FF 
1d578     CC E4 05 F1 | 	add	objptr, ##5836
1d57c     84 26 B0 FD | 	call	#_psram_spin2_read1
1d580     0B 00 00 FF 
1d584     CC E4 85 F1 | 	sub	objptr, ##5836
1d588                 | ' psram.read1(varptr(res),adr,4)
1d588                 | ' return res
1d588     08 4E 05 F1 | 	add	fp, #8
1d58c     A7 FA 01 FB | 	rdlong	result1, fp
1d590     08 4E 85 F1 | 	sub	fp, #8
1d594     A7 F0 03 F6 | 	mov	ptra, fp
1d598     B2 00 A0 FD | 	call	#popregs_
1d59c                 | _pslpeek_ret
1d59c     2D 00 64 FD | 	ret
1d5a0                 | 
1d5a0                 | ' 
1d5a0                 | ' function psdpeek(adr as ulong) as ulong
1d5a0                 | _psdpeek
1d5a0     00 4A 05 F6 | 	mov	COUNT_, #0
1d5a4     A8 00 A0 FD | 	call	#pushregs_
1d5a8     0C F0 07 F1 | 	add	ptra, #12
1d5ac     04 4E 05 F1 | 	add	fp, #4
1d5b0     A7 12 62 FC | 	wrlong	arg01, fp
1d5b4     04 4E 05 F1 | 	add	fp, #4
1d5b8     A7 12 02 F6 | 	mov	arg01, fp
1d5bc     04 4E 85 F1 | 	sub	fp, #4
1d5c0     A7 14 02 FB | 	rdlong	arg02, fp
1d5c4     04 4E 85 F1 | 	sub	fp, #4
1d5c8     02 16 06 F6 | 	mov	arg03, #2
1d5cc     0B 00 00 FF 
1d5d0     CC E4 05 F1 | 	add	objptr, ##5836
1d5d4     2C 26 B0 FD | 	call	#_psram_spin2_read1
1d5d8     0B 00 00 FF 
1d5dc     CC E4 85 F1 | 	sub	objptr, ##5836
1d5e0                 | ' psram.read1(varptr(res),adr,2)
1d5e0                 | ' return res
1d5e0     08 4E 05 F1 | 	add	fp, #8
1d5e4     A7 FA E1 FA | 	rdword	result1, fp
1d5e8     08 4E 85 F1 | 	sub	fp, #8
1d5ec     A7 F0 03 F6 | 	mov	ptra, fp
1d5f0     B2 00 A0 FD | 	call	#popregs_
1d5f4                 | _psdpeek_ret
1d5f4     2D 00 64 FD | 	ret
1d5f8                 | 
1d5f8                 | ' 
1d5f8                 | ' '' ------------------------------- USB keyboard scan to char translator
1d5f8                 | ' 
1d5f8                 | ' function scantochar(key)
1d5f8                 | _scantochar
1d5f8                 | ' 
1d5f8                 | ' select case (key shr 8) and 255
1d5f8     09 01 02 F6 | 	mov	_var01, arg01
1d5fc     08 00 C6 F0 | 	sar	_var01, #8
1d600     FF 00 0E F5 | 	and	_var01, #255 wz
1d604     24 00 90 AD |  if_e	jmp	#LR__2330
1d608     02 00 0E F2 | 	cmp	_var01, #2 wz
1d60c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d610     30 00 90 AD |  if_e	jmp	#LR__2331
1d614     40 00 0E F2 | 	cmp	_var01, #64 wz
1d618     44 00 90 AD |  if_e	jmp	#LR__2332
1d61c     42 00 0E F2 | 	cmp	_var01, #66 wz
1d620     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d624     70 00 90 5D |  if_ne	jmp	#LR__2334
1d628     50 00 90 FD | 	jmp	#LR__2333
1d62c                 | LR__2330
1d62c     09 FB 01 F6 | 	mov	result1, arg01
1d630     7F FA 05 F5 | 	and	result1, #127
1d634     02 FA 65 F0 | 	shl	result1, #2
1d638     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d63c     FD FA C1 FA | 	rdbyte	result1, result1
1d640     54 00 90 FD | 	jmp	#_scantochar_ret
1d644                 | LR__2331
1d644     09 FB 01 F6 | 	mov	result1, arg01
1d648     7F FA 05 F5 | 	and	result1, #127
1d64c     02 FA 65 F0 | 	shl	result1, #2
1d650     01 FA 05 F1 | 	add	result1, #1
1d654     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d658     FD FA C1 FA | 	rdbyte	result1, result1
1d65c     38 00 90 FD | 	jmp	#_scantochar_ret
1d660                 | LR__2332
1d660     09 FB 01 F6 | 	mov	result1, arg01
1d664     7F FA 05 F5 | 	and	result1, #127
1d668     02 FA 65 F0 | 	shl	result1, #2
1d66c     02 FA 05 F1 | 	add	result1, #2
1d670     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d674     FD FA C1 FA | 	rdbyte	result1, result1
1d678     1C 00 90 FD | 	jmp	#_scantochar_ret
1d67c                 | LR__2333
1d67c     09 FB 01 F6 | 	mov	result1, arg01
1d680     7F FA 05 F5 | 	and	result1, #127
1d684     02 FA 65 F0 | 	shl	result1, #2
1d688     03 FA 05 F1 | 	add	result1, #3
1d68c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d690     FD FA C1 FA | 	rdbyte	result1, result1
1d694     00 00 90 FD | 	jmp	#_scantochar_ret
1d698                 | LR__2334
1d698                 | _scantochar_ret
1d698     2D 00 64 FD | 	ret
1d69c                 | 
1d69c                 | _program
1d69c     01 4A 05 F6 | 	mov	COUNT_, #1
1d6a0     A8 00 A0 FD | 	call	#pushregs_
1d6a4     70 FC BF FD | 	call	#_startpsram
1d6a8     40 12 06 F6 | 	mov	arg01, #64
1d6ac     00 14 06 F6 | 	mov	arg02, #0
1d6b0     00 16 06 F6 | 	mov	arg03, #0
1d6b4     A0 FC BF FD | 	call	#_startvideo
1d6b8     37 00 00 FF 
1d6bc     14 E4 05 F1 | 	add	objptr, ##28180
1d6c0     F2 12 02 FB | 	rdlong	arg01, objptr
1d6c4     00 14 06 F6 | 	mov	arg02, #0
1d6c8     FB 03 00 FF 
1d6cc     00 17 06 F6 | 	mov	arg03, ##521984
1d6d0     2B 00 00 FF 
1d6d4     48 E5 85 F1 | 	sub	objptr, ##22344
1d6d8     04 2B B0 FD | 	call	#_audio096_spin2_start
1d6dc     FE 16 02 F6 | 	mov	arg03, result2
1d6e0     2B 00 00 FF 
1d6e4     30 E5 05 F1 | 	add	objptr, ##22320
1d6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1d6ec     14 E4 05 F1 | 	add	objptr, #20
1d6f0     F2 16 62 FC | 	wrlong	arg03, objptr
1d6f4     37 00 00 FF 
1d6f8     10 E4 85 F1 | 	sub	objptr, ##28176
1d6fc     32 12 06 F6 | 	mov	arg01, #50
1d700     34 34 B0 FD | 	call	#__system___waitms
1d704     37 00 00 FF 
1d708     10 E4 05 F1 | 	add	objptr, ##28176
1d70c     F2 12 02 FB | 	rdlong	arg01, objptr
1d710     37 00 00 FF 
1d714     10 E4 85 F1 | 	sub	objptr, ##28176
1d718     14 12 06 F1 | 	add	arg01, #20
1d71c     20 00 80 FF 
1d720     09 01 58 FC | 	wrword	##16384, arg01
1d724     10 28 B0 FD | 	call	#_usbnew_spin2_start
1d728     37 00 00 FF 
1d72c     04 E4 05 F1 | 	add	objptr, ##28164
1d730     F2 FA 61 FC | 	wrlong	result1, objptr
1d734                 | '   mouse_limits[0] := xlim
1d734     0F 00 00 FF 
1d738     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d73c     01 00 80 FF 
1d740     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d744                 | '   mouse_limits[1] := ylim
1d744     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d748     01 00 80 FF 
1d74c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d750     36 00 00 FF 
1d754     F3 E4 85 F1 | 	sub	objptr, ##27891
1d758     F2 12 02 F6 | 	mov	arg01, objptr
1d75c     11 E5 85 F1 | 	sub	objptr, #273
1d760     C4 12 06 F1 | 	add	arg01, #196
1d764                 | '   mouse_outptr := ptr
1d764     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d768     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d76c     0F 00 00 FF 
1d770     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d774     16 00 00 FF 
1d778     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1d77c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d780     16 00 00 FF 
1d784     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1d788     10 12 06 F6 | 	mov	arg01, #16
1d78c     28 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d790     10 12 06 F6 | 	mov	arg01, #16
1d794     20 14 06 F6 | 	mov	arg02, #32
1d798     20 16 06 F6 | 	mov	arg03, #32
1d79c     A8 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d7a0     09 12 C6 F9 | 	decod	arg01, #9
1d7a4     2C 15 06 F6 | 	mov	arg02, #300
1d7a8     E4 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d7ac     F2 16 02 F6 | 	mov	arg03, objptr
1d7b0     50 00 00 FF 
1d7b4     1C E5 05 F1 | 	add	objptr, ##41244
1d7b8     F2 14 02 F6 | 	mov	arg02, objptr
1d7bc     0A 17 62 FC | 	wrlong	arg03, arg02
1d7c0     04 14 06 F1 | 	add	arg02, #4
1d7c4     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1d7c8     EF 14 02 F6 | 	mov	arg02, entryptr__
1d7cc     1E FA 05 F6 | 	mov	result1, #30
1d7d0     28 E4 61 FD | 	setq	objptr
1d7d4     0A FB F1 FC | 	coginit	result1, arg02 wc
1d7d8     01 FA 65 C6 |  if_b	neg	result1, #1
1d7dc     04 E4 85 F1 | 	sub	objptr, #4
1d7e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d7e4     01 00 00 FF 
1d7e8     90 E4 05 F1 | 	add	objptr, ##656
1d7ec     F2 00 68 FC | 	wrlong	#0, objptr
1d7f0     1A 00 00 FF 
1d7f4     74 E5 85 F1 | 	sub	objptr, ##13684
1d7f8     F2 04 68 FC | 	wrlong	#2, objptr
1d7fc     04 E4 05 F1 | 	add	objptr, #4
1d800     F2 26 69 FC | 	wrlong	#147, objptr
1d804     04 E4 05 F1 | 	add	objptr, #4
1d808     F2 34 69 FC | 	wrlong	#154, objptr
1d80c     04 E4 05 F1 | 	add	objptr, #4
1d810     F2 08 68 FC | 	wrlong	#4, objptr
1d814     04 E4 85 F1 | 	sub	objptr, #4
1d818     F2 16 02 FB | 	rdlong	arg03, objptr
1d81c     14 E4 85 F1 | 	sub	objptr, #20
1d820     F2 16 62 FC | 	wrlong	arg03, objptr
1d824     04 E4 05 F1 | 	add	objptr, #4
1d828     F2 00 68 FC | 	wrlong	#0, objptr
1d82c     04 E4 05 F1 | 	add	objptr, #4
1d830     F2 00 68 FC | 	wrlong	#0, objptr
1d834     19 00 00 FF 
1d838     E4 E4 05 F1 | 	add	objptr, ##13028
1d83c     F2 02 68 FC | 	wrlong	#1, objptr
1d840     01 00 00 FF 
1d844     9C E4 05 F1 | 	add	objptr, ##668
1d848     F2 00 68 FC | 	wrlong	#0, objptr
1d84c     01 00 00 FF 
1d850     00 EA 05 F1 | 	add	ptr__dat__, ##512
1d854     08 E4 05 F1 | 	add	objptr, #8
1d858     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1d85c     04 E4 85 F1 | 	sub	objptr, #4
1d860     03 00 80 FF 
1d864     F2 3C 69 FC | 	wrlong	##1694, objptr
1d868     0C 00 00 FF 
1d86c     50 E5 85 F1 | 	sub	objptr, ##6480
1d870     F2 18 68 FC | 	wrlong	#12, objptr
1d874     45 00 00 FF 
1d878     64 E4 85 F1 | 	sub	objptr, ##35428
1d87c     01 00 00 FF 
1d880     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1d884     94 DB BF FD | 	call	#_init_commands
1d888     C8 F6 BF FD | 	call	#_init_error_strings
1d88c     4C EE BF FD | 	call	#_init_audio
1d890     7C 4E BF FD | 	call	#_do_new
1d894     37 00 00 FF 
1d898     3C E4 05 F1 | 	add	objptr, ##28220
1d89c     F2 12 02 FB | 	rdlong	arg01, objptr
1d8a0     04 E4 85 F1 | 	sub	objptr, #4
1d8a4     F2 14 02 FB | 	rdlong	arg02, objptr
1d8a8     37 00 00 FF 
1d8ac     38 E4 85 F1 | 	sub	objptr, ##28216
1d8b0     B4 16 B0 FD | 	call	#_hg010b_spin2_cls
1d8b4     37 00 00 FF 
1d8b8     40 E4 05 F1 | 	add	objptr, ##28224
1d8bc     F2 12 02 FB | 	rdlong	arg01, objptr
1d8c0     37 00 00 FF 
1d8c4     40 E4 85 F1 | 	sub	objptr, ##28224
1d8c8     4C 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1d8cc                 | ' 
1d8cc                 | ' leading_spaces:=amount
1d8cc     01 00 00 FF 
1d8d0     B6 E4 05 F1 | 	add	objptr, ##694
1d8d4     F2 04 68 FC | 	wrlong	#2, objptr
1d8d8     01 00 00 FF 
1d8dc     B6 E4 85 F1 | 	sub	objptr, ##694
1d8e0     87 01 00 FF 
1d8e4     72 1F 06 F6 | 	mov	local01, ##@LR__5549
1d8e8     3D 12 06 F6 | 	mov	arg01, #61
1d8ec     3C 14 06 F6 | 	mov	arg02, #60
1d8f0     3B 16 06 F6 | 	mov	arg03, #59
1d8f4     3A 18 06 F6 | 	mov	arg04, #58
1d8f8     08 7A B0 FD | 	call	#__system___vfs_open_sdcardx
1d8fc     FD 14 02 F6 | 	mov	arg02, result1
1d900     0F 13 02 F6 | 	mov	arg01, local01
1d904     08 33 B0 FD | 	call	#__system___mount
1d908     87 01 00 FF 
1d90c     76 13 06 F6 | 	mov	arg01, ##@LR__5550
1d910     BC 35 B0 FD | 	call	#__system___chdir
1d914     87 01 00 FF 
1d918     7E 1F 06 F6 | 	mov	local01, ##@LR__5551
1d91c     4A 00 00 FF 
1d920     94 E4 05 F1 | 	add	objptr, ##38036
1d924     F2 1E 62 FC | 	wrlong	local01, objptr
1d928     13 00 00 FF 
1d92c     60 E4 85 F1 | 	sub	objptr, ##9824
1d930     F2 12 02 FB | 	rdlong	arg01, objptr
1d934     37 00 00 FF 
1d938     34 E4 85 F1 | 	sub	objptr, ##28212
1d93c     01 12 66 F0 | 	shl	arg01, #1
1d940     01 14 06 F6 | 	mov	arg02, #1
1d944     10 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1d948                 | ' init_commands
1d948                 | ' init_error_strings
1d948                 | ' init_audio
1d948                 | ' do_new
1d948                 | ' cls(ink, paper)
1d948                 | ' v.setfontfamily(font) 				' use ST Mono font
1d948                 | ' v.setleadingspaces(2)
1d948                 | ' mount "/sd", _vfs_open_sdcard()
1d948                 | ' chdir "/sd/bas"
1d948                 | ' currentdir$="/sd/bas"
1d948                 | ' position 2*editor_spaces,1 : print ver$
1d948     00 12 06 F6 | 	mov	arg01, #0
1d94c     58 89 B0 FD | 	call	#__system___getiolock_0542
1d950     FD 12 02 F6 | 	mov	arg01, result1
1d954     EC 2E B0 FD | 	call	#__system___lockmem
1d958     18 00 00 FF 
1d95c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1d960     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1d964     18 00 00 FF 
1d968     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1d96c     00 12 06 F6 | 	mov	arg01, #0
1d970     00 16 06 F6 | 	mov	arg03, #0
1d974     C0 3B B0 FD | 	call	#__system___basic_print_string
1d978     00 12 06 F6 | 	mov	arg01, #0
1d97c     0A 14 06 F6 | 	mov	arg02, #10
1d980     00 16 06 F6 | 	mov	arg03, #0
1d984     58 3B B0 FD | 	call	#__system___basic_print_char
1d988     00 12 06 F6 | 	mov	arg01, #0
1d98c     18 89 B0 FD | 	call	#__system___getiolock_0542
1d990     FD 00 68 FC | 	wrlong	#0, result1
1d994     51 00 00 FF 
1d998     AC E5 05 F1 | 	add	objptr, ##41900
1d99c     F2 12 02 FB | 	rdlong	arg01, objptr
1d9a0     0E 00 00 FF 
1d9a4     50 E5 85 F1 | 	sub	objptr, ##7504
1d9a8     F2 1E 02 FB | 	rdlong	local01, objptr
1d9ac     43 00 00 FF 
1d9b0     5C E4 85 F1 | 	sub	objptr, ##34396
1d9b4     0F 13 82 F1 | 	sub	arg01, local01
1d9b8     00 14 06 F6 | 	mov	arg02, #0
1d9bc     0A 16 06 F6 | 	mov	arg03, #10
1d9c0     50 51 B0 FD | 	call	#__system__Number_S
1d9c4     FD 12 02 F6 | 	mov	arg01, result1
1d9c8     87 01 00 FF 
1d9cc     86 15 06 F6 | 	mov	arg02, ##@LR__5552
1d9d0     CC 2E B0 FD | 	call	#__system___string_concat
1d9d4     FD 1E 02 F6 | 	mov	local01, result1
1d9d8     50 00 00 FF 
1d9dc     10 E5 05 F1 | 	add	objptr, ##41232
1d9e0     F2 1E 62 FC | 	wrlong	local01, objptr
1d9e4     50 00 00 FF 
1d9e8     10 E5 85 F1 | 	sub	objptr, ##41232
1d9ec                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1d9ec     00 12 06 F6 | 	mov	arg01, #0
1d9f0     B4 88 B0 FD | 	call	#__system___getiolock_0542
1d9f4     FD 12 02 F6 | 	mov	arg01, result1
1d9f8     48 2E B0 FD | 	call	#__system___lockmem
1d9fc     50 00 00 FF 
1da00     10 E5 05 F1 | 	add	objptr, ##41232
1da04     F2 14 02 FB | 	rdlong	arg02, objptr
1da08     50 00 00 FF 
1da0c     10 E5 85 F1 | 	sub	objptr, ##41232
1da10     00 12 06 F6 | 	mov	arg01, #0
1da14     00 16 06 F6 | 	mov	arg03, #0
1da18     1C 3B B0 FD | 	call	#__system___basic_print_string
1da1c     00 12 06 F6 | 	mov	arg01, #0
1da20     0A 14 06 F6 | 	mov	arg02, #10
1da24     00 16 06 F6 | 	mov	arg03, #0
1da28     B4 3A B0 FD | 	call	#__system___basic_print_char
1da2c     00 12 06 F6 | 	mov	arg01, #0
1da30     74 88 B0 FD | 	call	#__system___getiolock_0542
1da34     FD 00 68 FC | 	wrlong	#0, result1
1da38     37 00 00 FF 
1da3c     34 E4 05 F1 | 	add	objptr, ##28212
1da40     F2 12 02 FB | 	rdlong	arg01, objptr
1da44     37 00 00 FF 
1da48     34 E4 85 F1 | 	sub	objptr, ##28212
1da4c     01 12 66 F0 | 	shl	arg01, #1
1da50     04 14 06 F6 | 	mov	arg02, #4
1da54     00 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1da58                 | ' position 2*editor_spaces,4 : print "Ready"
1da58     00 12 06 F6 | 	mov	arg01, #0
1da5c     48 88 B0 FD | 	call	#__system___getiolock_0542
1da60     FD 12 02 F6 | 	mov	arg01, result1
1da64     DC 2D B0 FD | 	call	#__system___lockmem
1da68     87 01 00 FF 
1da6c     98 15 06 F6 | 	mov	arg02, ##@LR__5553
1da70     00 12 06 F6 | 	mov	arg01, #0
1da74     00 16 06 F6 | 	mov	arg03, #0
1da78     BC 3A B0 FD | 	call	#__system___basic_print_string
1da7c     00 12 06 F6 | 	mov	arg01, #0
1da80     0A 14 06 F6 | 	mov	arg02, #10
1da84     00 16 06 F6 | 	mov	arg03, #0
1da88     54 3A B0 FD | 	call	#__system___basic_print_char
1da8c     00 12 06 F6 | 	mov	arg01, #0
1da90     14 88 B0 FD | 	call	#__system___getiolock_0542
1da94     FD 00 68 FC | 	wrlong	#0, result1
1da98     00 14 06 F6 | 	mov	arg02, #0
1da9c     01 14 D6 F7 | 	test	arg02, #1 wc
1daa0     5A 4C 64 FD | 	drvc	#38
1daa4     01 14 D6 F7 | 	test	arg02, #1 wc
1daa8     5A 4E 64 FD | 	drvc	#39
1daac     87 01 00 FF 
1dab0     9E 1F 06 F6 | 	mov	local01, ##@LR__5554
1dab4     51 00 00 FF 
1dab8     D8 E5 05 F1 | 	add	objptr, ##41944
1dabc     F2 1E 62 FC | 	wrlong	local01, objptr
1dac0     04 E4 05 F1 | 	add	objptr, #4
1dac4     FF FF FF FF 
1dac8     F2 FE 6B FC | 	wrlong	##-1, objptr
1dacc     51 00 00 FF 
1dad0     DC E5 85 F1 | 	sub	objptr, ##41948
1dad4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dad4                 | ' loadname="noname.bas"
1dad4                 | ' do_insert=-1
1dad4                 | ' 
1dad4                 | ' '-------------------------------------------------------------------------------------------------------- 
1dad4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dad4                 | ' '--------------------------------------------------------------------------------------------------------
1dad4                 | ' 
1dad4                 | ' do
1dad4                 | LR__2340
1dad4     2C 2D BE FD | 	call	#_edit
1dad8     FD 1E 02 F6 | 	mov	local01, result1
1dadc     37 00 00 FF 
1dae0     1C E4 05 F1 | 	add	objptr, ##28188
1dae4     F2 1E 62 FC | 	wrlong	local01, objptr
1dae8     37 00 00 FF 
1daec     1C E4 85 F1 | 	sub	objptr, ##28188
1daf0     54 3C BE FD | 	call	#_interpret
1daf4     87 01 00 FF 
1daf8     A9 1F 06 F6 | 	mov	local01, ##@LR__5555
1dafc     37 00 00 FF 
1db00     1C E4 05 F1 | 	add	objptr, ##28188
1db04     F2 1E 62 FC | 	wrlong	local01, objptr
1db08     37 00 00 FF 
1db0c     1C E4 85 F1 | 	sub	objptr, ##28188
1db10     C0 FF 9F FD | 	jmp	#LR__2340
1db14     A7 F0 03 F6 | 	mov	ptra, fp
1db18     B2 00 A0 FD | 	call	#popregs_
1db1c                 | _program_ret
1db1c     2D 00 64 FD | 	ret
1db20                 | 
1db20                 | ' '' this is not a main program.
1db20                 | ' 
1db20                 | ' '****************************************************************************************************************
1db20                 | ' '                                                                                                             	*
1db20                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1db20                 | ' '                                                                                                            	*
1db20                 | ' ' base - HDMI base pin												*
1db20                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1db20                 | ' '														*
1db20                 | ' '														*
1db20                 | ' '****************************************************************************************************************
1db20                 | ' 
1db20                 | ' pub start(base,mb):result |i
1db20                 | _hg010b_spin2_start
1db20                 | ' 
1db20                 | ' '--------------------------- initialize pointers and variables
1db20                 | ' 
1db20                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1db20     34 E4 05 F1 | 	add	objptr, #52
1db24     F2 FA 01 F6 | 	mov	result1, objptr
1db28     28 E4 85 F1 | 	sub	objptr, #40
1db2c     F2 FA 61 FC | 	wrlong	result1, objptr
1db30                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1db30                 | ' hdmibase:=base							' HDMI base pin, 8*n
1db30     18 E4 05 F1 | 	add	objptr, #24
1db34     F2 12 62 FC | 	wrlong	arg01, objptr
1db38                 | ' mailbox_ptr:=mb		
1db38     04 E4 05 F1 | 	add	objptr, #4
1db3c     F2 14 62 FC | 	wrlong	arg02, objptr
1db40                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1db40     C1 E5 05 F1 | 	add	objptr, #449
1db44     F2 14 62 FC | 	wrlong	arg02, objptr
1db48                 | ' sprite_ptr:=@spr1ptr
1db48     D8 E4 85 F1 | 	sub	objptr, #216
1db4c     F2 FA 01 F6 | 	mov	result1, objptr
1db50     E5 E4 85 F1 | 	sub	objptr, #229
1db54     F2 FA 61 FC | 	wrlong	result1, objptr
1db58                 | ' 
1db58                 | ' 		'
1db58                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1db58     E5 E4 05 F1 | 	add	objptr, #229
1db5c     F2 FA 01 FB | 	rdlong	result1, objptr
1db60     D0 FA 05 F1 | 	add	result1, #208
1db64     FD 10 58 FC | 	wrword	#8, result1
1db68                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1db68     F2 16 02 FB | 	rdlong	arg03, objptr
1db6c     D2 16 06 F1 | 	add	arg03, #210
1db70     0B 21 58 FC | 	wrword	#16, arg03
1db74                 | ' leading_spaces:=0				'
1db74     A5 E5 05 F1 | 	add	objptr, #421
1db78     F2 00 68 FC | 	wrlong	#0, objptr
1db7c                 | ' 
1db7c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1db7c     99 E4 85 F1 | 	sub	objptr, #153
1db80     00 00 A0 FF 
1db84     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1db88                 | ' emptydl[1]:=0
1db88     04 E4 05 F1 | 	add	objptr, #4
1db8c     F2 00 68 FC | 	wrlong	#0, objptr
1db90                 | ' 
1db90                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1db90                 | ' 
1db90                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1db90     28 E5 85 F1 | 	sub	objptr, #296
1db94     F2 02 68 FC | 	wrlong	#1, objptr
1db98                 | ' if s_debug<>0
1db98                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1db98     20 00 80 FF 
1db9c     F2 00 68 FC | 	wrlong	##16384, objptr
1dba0     F9 E4 85 F1 | 	sub	objptr, #249
1dba4                 | ' setmode()							' set the mode, see below
1dba4     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1dba8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1dba8     49 E4 05 F1 | 	add	objptr, #73
1dbac     F2 FA 01 F6 | 	mov	result1, objptr
1dbb0     35 E4 85 F1 | 	sub	objptr, #53
1dbb4     F2 FA 61 FC | 	wrlong	result1, objptr
1dbb8                 | ' cursor_ptr:=@cursor_x						
1dbb8     28 E4 05 F1 | 	add	objptr, #40
1dbbc     F2 16 02 F6 | 	mov	arg03, objptr
1dbc0     2C E4 85 F1 | 	sub	objptr, #44
1dbc4     F2 16 62 FC | 	wrlong	arg03, objptr
1dbc8                 | ' fontnum:=0  							' start with a PC type font 
1dbc8     55 E4 05 F1 | 	add	objptr, #85
1dbcc     F2 00 68 FC | 	wrlong	#0, objptr
1dbd0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dbd0     1C E4 05 F1 | 	add	objptr, #28
1dbd4     F2 12 02 F6 | 	mov	arg01, objptr
1dbd8     81 E4 85 F1 | 	sub	objptr, #129
1dbdc     10 00 00 FF 
1dbe0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1dbe4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dbe8     10 00 00 FF 
1dbec     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1dbf0     10 16 06 F6 | 	mov	arg03, #16
1dbf4     6C 2B B0 FD | 	call	#__system____builtin_memmove
1dbf8                 | ' leading_spaces:=0
1dbf8     01 00 00 FF 
1dbfc     B6 E4 05 F1 | 	add	objptr, ##694
1dc00     F2 00 68 FC | 	wrlong	#0, objptr
1dc04     01 00 00 FF 
1dc08     B6 E4 85 F1 | 	sub	objptr, ##694
1dc0c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dc0c                 | ' 
1dc0c                 | ' initcursor(154)
1dc0c     9A 12 06 F6 | 	mov	arg01, #154
1dc10     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1dc14                 | ' 
1dc14                 | ' '---------------------------- start the cog
1dc14                 | ' 
1dc14                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1dc14     10 00 00 FF 
1dc18     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dc1c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dc20     10 00 00 FF 
1dc24     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1dc28     14 E4 05 F1 | 	add	objptr, #20
1dc2c     10 FA 05 F6 | 	mov	result1, #16
1dc30     28 E4 61 FD | 	setq	objptr
1dc34     0A FB F1 FC | 	coginit	result1, arg02 wc
1dc38     01 FA 65 C6 |  if_b	neg	result1, #1
1dc3c     1C E4 05 F1 | 	add	objptr, #28
1dc40     F2 FA 61 FC | 	wrlong	result1, objptr
1dc44     30 E4 85 F1 | 	sub	objptr, #48
1dc48                 | ' waitms(40)							' wait for stabilize
1dc48     28 12 06 F6 | 	mov	arg01, #40
1dc4c     E8 2E B0 FD | 	call	#__system___waitms
1dc50                 | ' return cog							' return the driver's cog #
1dc50     30 E4 05 F1 | 	add	objptr, #48
1dc54     F2 FA 01 FB | 	rdlong	result1, objptr
1dc58     30 E4 85 F1 | 	sub	objptr, #48
1dc5c                 | _hg010b_spin2_start_ret
1dc5c     2D 00 64 FD | 	ret
1dc60                 | 
1dc60                 | ' 
1dc60                 | ' 
1dc60                 | ' '**************************************************************************************************************** 
1dc60                 | ' '                                                                                                             	*
1dc60                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1dc60                 | ' '  Mode number - see start() above or bits below								*
1dc60                 | ' '                                                                                                             	*
1dc60                 | ' '****************************************************************************************************************
1dc60                 | ' 
1dc60                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dc60                 | ' pub initcursor(color) |i
1dc60                 | _hg010b_spin2_initcursor
1dc60     03 4A 05 F6 | 	mov	COUNT_, #3
1dc64     A8 00 A0 FD | 	call	#pushregs_
1dc68     09 1F 02 F6 | 	mov	local01, arg01
1dc6c                 | ' 
1dc6c                 | ' cursor_x:=0							' place the cursor at 0:0
1dc6c     3C E4 05 F1 | 	add	objptr, #60
1dc70     F2 00 58 FC | 	wrword	#0, objptr
1dc74                 | ' cursor_y:=0
1dc74     02 E4 05 F1 | 	add	objptr, #2
1dc78     F2 00 48 FC | 	wrbyte	#0, objptr
1dc7c                 | ' repeat i from 0 to 111
1dc7c     00 20 06 F6 | 	mov	local02, #0
1dc80     F8 E5 05 F1 | 	add	objptr, #504
1dc84     97 1A 48 FB | 	callpa	#(@LR__2352-@LR__2350)>>2,fcache_load_ptr_
1dc88                 | LR__2350
1dc88                 | '   cursor[i]:=0
1dc88     10 23 02 F6 | 	mov	local03, local02
1dc8c     F2 22 02 F1 | 	add	local03, objptr
1dc90     11 01 48 FC | 	wrbyte	#0, local03
1dc94     01 20 06 F1 | 	add	local02, #1
1dc98     70 20 56 F2 | 	cmps	local02, #112 wc
1dc9c     E8 FF 9F CD |  if_b	jmp	#LR__2350
1dca0                 | ' repeat i from 112 to 127
1dca0     70 20 06 F6 | 	mov	local02, #112
1dca4                 | LR__2351
1dca4                 | '   cursor[i]:=color  
1dca4     10 23 02 F6 | 	mov	local03, local02
1dca8     F2 22 02 F1 | 	add	local03, objptr
1dcac     11 1F 42 FC | 	wrbyte	local01, local03
1dcb0     01 20 06 F1 | 	add	local02, #1
1dcb4     80 20 16 F2 | 	cmp	local02, #128 wc
1dcb8     E8 FF 9F CD |  if_b	jmp	#LR__2351
1dcbc                 | LR__2352
1dcbc                 | ' 'repeat i from 0 to 127
1dcbc                 | ' '  if ((i/8)//2)
1dcbc                 | ' '    cursor[i]:=15
1dcbc                 | ' '  else
1dcbc                 | ' '    cursor[i]:=0
1dcbc                 | ' '  if i>=120    
1dcbc                 | ' '    cursor[i]:=40
1dcbc                 | ' setspriteptr(17,@cursor)
1dcbc     F2 14 02 F6 | 	mov	arg02, objptr
1dcc0     01 00 00 FF 
1dcc4     36 E4 85 F1 | 	sub	objptr, ##566
1dcc8     11 12 06 F6 | 	mov	arg01, #17
1dccc     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1dcd0                 | ' setspritesize(17,8,16)
1dcd0     11 12 06 F6 | 	mov	arg01, #17
1dcd4     08 14 06 F6 | 	mov	arg02, #8
1dcd8     10 16 06 F6 | 	mov	arg03, #16
1dcdc     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1dce0                 | ' setspritepos(17,0,0)
1dce0     11 12 06 F6 | 	mov	arg01, #17
1dce4     00 14 06 F6 | 	mov	arg02, #0
1dce8     00 16 06 F6 | 	mov	arg03, #0
1dcec     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1dcf0                 | ' cursorshape:=14
1dcf0     0B 00 00 FF 
1dcf4     C6 E4 05 F1 | 	add	objptr, ##5830
1dcf8     F2 1C 68 FC | 	wrlong	#14, objptr
1dcfc                 | ' cursorcolor:=color
1dcfc     04 E4 85 F1 | 	sub	objptr, #4
1dd00     F2 1E 62 FC | 	wrlong	local01, objptr
1dd04     0B 00 00 FF 
1dd08     C2 E4 85 F1 | 	sub	objptr, ##5826
1dd0c     A7 F0 03 F6 | 	mov	ptra, fp
1dd10     B2 00 A0 FD | 	call	#popregs_
1dd14                 | _hg010b_spin2_initcursor_ret
1dd14     2D 00 64 FD | 	ret
1dd18                 | 
1dd18                 | ' 
1dd18                 | ' pub setcursorshape(shape) | i
1dd18                 | _hg010b_spin2_setcursorshape
1dd18                 | ' 
1dd18                 | ' cursorshape:=shape
1dd18     0B 00 00 FF 
1dd1c     C6 E4 05 F1 | 	add	objptr, ##5830
1dd20     F2 12 62 FC | 	wrlong	arg01, objptr
1dd24                 | ' repeat i from 0 to (8*cursorshape)-1
1dd24     00 00 06 F6 | 	mov	_var01, #0
1dd28     09 03 02 F6 | 	mov	_var02, arg01
1dd2c     03 02 66 F0 | 	shl	_var02, #3
1dd30     01 02 86 F1 | 	sub	_var02, #1
1dd34     00 02 56 F2 | 	cmps	_var02, #0 wc
1dd38     01 04 86 F6 | 	negc	_var03, #1
1dd3c     02 07 02 F6 | 	mov	_var04, _var03
1dd40     02 03 02 F1 | 	add	_var02, _var03
1dd44     0A 00 00 FF 
1dd48     90 E4 85 F1 | 	sub	objptr, ##5264
1dd4c     97 0C 48 FB | 	callpa	#(@LR__2361-@LR__2360)>>2,fcache_load_ptr_
1dd50                 | LR__2360
1dd50                 | '   cursor[i]:=0
1dd50     00 05 02 F6 | 	mov	_var03, _var01
1dd54     F2 04 02 F1 | 	add	_var03, objptr
1dd58     02 01 48 FC | 	wrbyte	#0, _var03
1dd5c     03 01 02 F1 | 	add	_var01, _var04
1dd60     01 01 0A F2 | 	cmp	_var01, _var02 wz
1dd64     E8 FF 9F 5D |  if_ne	jmp	#LR__2360
1dd68                 | LR__2361
1dd68                 | ' repeat i from 8*cursorshape to 127
1dd68     0A 00 00 FF 
1dd6c     90 E4 05 F1 | 	add	objptr, ##5264
1dd70     F2 06 02 FB | 	rdlong	_var04, objptr
1dd74     03 01 02 F6 | 	mov	_var01, _var04
1dd78     03 00 66 F0 | 	shl	_var01, #3
1dd7c     0B 00 00 FF 
1dd80     C6 E4 85 F1 | 	sub	objptr, ##5830
1dd84     03 06 66 F0 | 	shl	_var04, #3
1dd88     80 06 56 F2 | 	cmps	_var04, #128 wc
1dd8c     01 04 A6 F6 | 	negnc	_var03, #1
1dd90     7F 02 06 F6 | 	mov	_var02, #127
1dd94     02 03 02 F1 | 	add	_var02, _var03
1dd98     97 1A 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1dd9c                 | LR__2362
1dd9c                 | '   cursor[i]:=cursorcolor
1dd9c     00 07 02 F6 | 	mov	_var04, _var01
1dda0     01 00 00 FF 
1dda4     36 E4 05 F1 | 	add	objptr, ##566
1dda8     F2 06 02 F1 | 	add	_var04, objptr
1ddac     0A 00 00 FF 
1ddb0     8C E4 05 F1 | 	add	objptr, ##5260
1ddb4     F2 12 02 FB | 	rdlong	arg01, objptr
1ddb8     0B 00 00 FF 
1ddbc     C2 E4 85 F1 | 	sub	objptr, ##5826
1ddc0     03 13 42 FC | 	wrbyte	arg01, _var04
1ddc4     02 01 02 F1 | 	add	_var01, _var03
1ddc8     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ddcc     CC FF 9F 5D |  if_ne	jmp	#LR__2362
1ddd0                 | LR__2363
1ddd0                 | _hg010b_spin2_setcursorshape_ret
1ddd0     2D 00 64 FD | 	ret
1ddd4                 | 
1ddd4                 | ' 
1ddd4                 | ' pub setcursorcolor(color) | i
1ddd4                 | _hg010b_spin2_setcursorcolor
1ddd4                 | ' 
1ddd4                 | ' cursorcolor:=color
1ddd4     0B 00 00 FF 
1ddd8     C2 E4 05 F1 | 	add	objptr, ##5826
1dddc     F2 12 62 FC | 	wrlong	arg01, objptr
1dde0                 | ' repeat i from 0 to (8*cursorshape)-1
1dde0     00 12 06 F6 | 	mov	arg01, #0
1dde4     04 E4 05 F1 | 	add	objptr, #4
1dde8     F2 00 02 FB | 	rdlong	_var01, objptr
1ddec     03 00 66 F0 | 	shl	_var01, #3
1ddf0     01 00 86 F1 | 	sub	_var01, #1
1ddf4     00 00 56 F2 | 	cmps	_var01, #0 wc
1ddf8     01 02 86 F6 | 	negc	_var02, #1
1ddfc     01 05 02 F6 | 	mov	_var03, _var02
1de00     01 01 02 F1 | 	add	_var01, _var02
1de04     0A 00 00 FF 
1de08     90 E4 85 F1 | 	sub	objptr, ##5264
1de0c     97 0C 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1de10                 | LR__2370
1de10                 | '   cursor[i]:=0
1de10     09 03 02 F6 | 	mov	_var02, arg01
1de14     F2 02 02 F1 | 	add	_var02, objptr
1de18     01 01 48 FC | 	wrbyte	#0, _var02
1de1c     02 13 02 F1 | 	add	arg01, _var03
1de20     00 13 0A F2 | 	cmp	arg01, _var01 wz
1de24     E8 FF 9F 5D |  if_ne	jmp	#LR__2370
1de28                 | LR__2371
1de28                 | ' repeat i from 8*cursorshape to 127
1de28     0A 00 00 FF 
1de2c     90 E4 05 F1 | 	add	objptr, ##5264
1de30     F2 04 02 FB | 	rdlong	_var03, objptr
1de34     02 13 02 F6 | 	mov	arg01, _var03
1de38     03 12 66 F0 | 	shl	arg01, #3
1de3c     0B 00 00 FF 
1de40     C6 E4 85 F1 | 	sub	objptr, ##5830
1de44     03 04 66 F0 | 	shl	_var03, #3
1de48     80 04 56 F2 | 	cmps	_var03, #128 wc
1de4c     01 02 A6 F6 | 	negnc	_var02, #1
1de50     7F 00 06 F6 | 	mov	_var01, #127
1de54     01 01 02 F1 | 	add	_var01, _var02
1de58     97 1A 48 FB | 	callpa	#(@LR__2373-@LR__2372)>>2,fcache_load_ptr_
1de5c                 | LR__2372
1de5c                 | '   cursor[i]:=cursorcolor
1de5c     09 05 02 F6 | 	mov	_var03, arg01
1de60     01 00 00 FF 
1de64     36 E4 05 F1 | 	add	objptr, ##566
1de68     F2 04 02 F1 | 	add	_var03, objptr
1de6c     0A 00 00 FF 
1de70     8C E4 05 F1 | 	add	objptr, ##5260
1de74     F2 06 02 FB | 	rdlong	_var04, objptr
1de78     0B 00 00 FF 
1de7c     C2 E4 85 F1 | 	sub	objptr, ##5826
1de80     02 07 42 FC | 	wrbyte	_var04, _var03
1de84     01 13 02 F1 | 	add	arg01, _var02
1de88     00 13 0A F2 | 	cmp	arg01, _var01 wz
1de8c     CC FF 9F 5D |  if_ne	jmp	#LR__2372
1de90                 | LR__2373
1de90                 | _hg010b_spin2_setcursorcolor_ret
1de90     2D 00 64 FD | 	ret
1de94                 | 
1de94                 | '   
1de94                 | '   
1de94                 | '   
1de94                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1de94                 | _hg010b_spin2_setmode
1de94     02 4A 05 F6 | 	mov	COUNT_, #2
1de98     A8 00 A0 FD | 	call	#pushregs_
1de9c                 | ' 
1de9c                 | ' 
1de9c                 | ' dl_ptr:=@emptydl[0]
1de9c     01 00 00 FF 
1dea0     1D E4 05 F1 | 	add	objptr, ##541
1dea4     F2 1A 02 F6 | 	mov	arg05, objptr
1dea8     FD E5 85 F1 | 	sub	objptr, #509
1deac     F2 1A 62 FC | 	wrlong	arg05, objptr
1deb0                 | ' 
1deb0                 | ' if cog>0 
1deb0     10 E4 05 F1 | 	add	objptr, #16
1deb4     F2 1A 02 FB | 	rdlong	arg05, objptr
1deb8     30 E4 85 F1 | 	sub	objptr, #48
1debc     01 1A 56 F2 | 	cmps	arg05, #1 wc
1dec0                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1dec0     01 12 06 36 |  if_ae	mov	arg01, #1
1dec4     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1dec8                 | ' xres:=1024
1dec8     01 00 00 FF 
1decc     26 E4 05 F1 | 	add	objptr, ##550
1ded0     02 00 80 FF 
1ded4     F2 00 68 FC | 	wrlong	##1024, objptr
1ded8                 | ' yres:=600
1ded8     04 E4 05 F1 | 	add	objptr, #4
1dedc     01 00 80 FF 
1dee0     F2 B0 68 FC | 	wrlong	##600, objptr
1dee4                 | ' ppl:=(timings[3])
1dee4     10 00 00 FF 
1dee8     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1deec     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1def0     51 E5 85 F1 | 	sub	objptr, #337
1def4     F2 1A 62 FC | 	wrlong	arg05, objptr
1def8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1def8     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1defc     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1df00     01 1E 66 F0 | 	shl	local01, #1
1df04     80 E4 85 F1 | 	sub	objptr, #128
1df08     F2 1E 62 FC | 	wrlong	local01, objptr
1df0c                 | ' cpl1:=cpl '' todo remove
1df0c     04 E4 05 F1 | 	add	objptr, #4
1df10     F2 1E 62 FC | 	wrlong	local01, objptr
1df14                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1df14     02 00 00 FF 
1df18     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1df1c     41 E4 85 F1 | 	sub	objptr, #65
1df20     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1df24                 | ' repeat i from 0 to 3
1df24     00 20 06 F6 | 	mov	local02, #0
1df28     02 00 00 FF 
1df2c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1df30     08 E4 05 F1 | 	add	objptr, #8
1df34     97 20 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1df38                 | LR__2380
1df38                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1df38     10 1F 02 F6 | 	mov	local01, local02
1df3c     02 1E 66 F0 | 	shl	local01, #2
1df40     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1df44     F2 1A 02 FB | 	rdlong	arg05, objptr
1df48     11 1A 66 F0 | 	shl	arg05, #17
1df4c     0F 1F 02 FB | 	rdlong	local01, local01
1df50     0D 1F 02 F1 | 	add	local01, arg05
1df54     80 40 38 FF 
1df58     00 1E 06 F1 | 	add	local01, ##1887502336
1df5c     10 1B 02 F6 | 	mov	arg05, local02
1df60     02 1A 66 F0 | 	shl	arg05, #2
1df64     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1df68     0D 1F 62 FC | 	wrlong	local01, arg05
1df6c     01 20 06 F1 | 	add	local02, #1
1df70     04 20 56 F2 | 	cmps	local02, #4 wc
1df74     C0 FF 9F CD |  if_b	jmp	#LR__2380
1df78                 | LR__2381
1df78     24 E4 85 F1 | 	sub	objptr, #36
1df7c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1df7c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1df80     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1df84     14 1E 66 FC | 	wrlong	local01, #20
1df88                 | ' hubset(timings[10])
1df88     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1df8c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1df90     10 00 00 FF 
1df94     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1df98     00 12 62 FD | 	hubset	arg01
1df9c                 | ' waitms(1)                                                   	' wait for stabilization
1df9c     01 12 06 F6 | 	mov	arg01, #1
1dfa0     94 2B B0 FD | 	call	#__system___waitms
1dfa4     10 00 00 FF 
1dfa8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1dfac     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1dfb0     61 E4 05 F1 | 	add	objptr, #97
1dfb4     F2 20 62 FC | 	wrlong	local02, objptr
1dfb8     10 1F 52 F6 | 	abs	local01, local02 wc
1dfbc     04 1E 46 F0 | 	shr	local01, #4
1dfc0     0F 1F 82 F6 | 	negc	local01, local01
1dfc4     9C E4 05 F1 | 	add	objptr, #156
1dfc8     F2 1E 62 FC | 	wrlong	local01, objptr
1dfcc     A4 E4 85 F1 | 	sub	objptr, #164
1dfd0     F2 20 02 FB | 	rdlong	local02, objptr
1dfd4     08 E4 05 F1 | 	add	objptr, #8
1dfd8     F2 1E 02 FB | 	rdlong	local01, objptr
1dfdc     0F 21 02 FD | 	qmul	local02, local01
1dfe0                 | ' lines:=timings[11]
1dfe0                 | ' t_lines:=lines/16
1dfe0                 | ' buflen:=cpl*lines						' framebuffer length in longs
1dfe0     29 E4 85 F1 | 	sub	objptr, #41
1dfe4     19 1E C6 F9 | 	decod	local01, #25
1dfe8     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1dfec     18 20 62 FD | 	getqx	local02
1dff0     F2 20 62 FC | 	wrlong	local02, objptr
1dff4     38 E4 85 F1 | 	sub	objptr, #56
1dff8     02 20 66 F0 | 	shl	local02, #2
1dffc     10 1F 82 F1 | 	sub	local01, local02
1e000     F2 1E 62 FC | 	wrlong	local01, objptr
1e004     FD E4 05 F1 | 	add	objptr, #253
1e008     F2 20 02 FB | 	rdlong	local02, objptr
1e00c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e010     0D 21 02 FD | 	qmul	local02, arg05
1e014                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e014                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e014     F9 E4 85 F1 | 	sub	objptr, #249
1e018                 | ' mode_ptr:=@timings						' set pointers to timings
1e018     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e01c                 | ' graphmode:=1024+512+192+48							' det global variable
1e01c                 | ' makedl(graphmode)							' make a DL for the mode
1e01c     03 00 00 FF 
1e020     F0 12 06 F6 | 	mov	arg01, ##1776
1e024     18 20 62 FD | 	getqx	local02
1e028     10 1F 82 F1 | 	sub	local01, local02
1e02c     F2 1E 62 FC | 	wrlong	local01, objptr
1e030     14 E4 05 F1 | 	add	objptr, #20
1e034     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e038     79 E4 05 F1 | 	add	objptr, #121
1e03c     03 00 80 FF 
1e040     F2 E0 69 FC | 	wrlong	##1776, objptr
1e044     91 E4 85 F1 | 	sub	objptr, #145
1e048     10 00 00 FF 
1e04c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e050     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e054                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e054     F2 1E 02 FB | 	rdlong	local01, objptr
1e058     DD E4 05 F1 | 	add	objptr, #221
1e05c     F2 1E 62 FC | 	wrlong	local01, objptr
1e060                 | ' s_font_ptr:=font_ptr
1e060     D5 E4 85 F1 | 	sub	objptr, #213
1e064     F2 1E 02 FB | 	rdlong	local01, objptr
1e068     D9 E4 05 F1 | 	add	objptr, #217
1e06c     F2 1E 62 FC | 	wrlong	local01, objptr
1e070                 | ' s_lines:=lines
1e070     80 E4 85 F1 | 	sub	objptr, #128
1e074     F2 1E 02 FB | 	rdlong	local01, objptr
1e078     84 E4 05 F1 | 	add	objptr, #132
1e07c     F2 1E 62 FC | 	wrlong	local01, objptr
1e080                 | ' s_buflen:=buflen
1e080     AD E4 85 F1 | 	sub	objptr, #173
1e084     F2 1E 02 FB | 	rdlong	local01, objptr
1e088     B5 E4 05 F1 | 	add	objptr, #181
1e08c     F2 1E 62 FC | 	wrlong	local01, objptr
1e090                 | ' s_cpl:=cpl
1e090     94 E4 85 F1 | 	sub	objptr, #148
1e094     F2 1E 02 FB | 	rdlong	local01, objptr
1e098     90 E4 05 F1 | 	add	objptr, #144
1e09c     F2 1E 62 FC | 	wrlong	local01, objptr
1e0a0                 | ' s_cpl1:=cpl
1e0a0     90 E4 85 F1 | 	sub	objptr, #144
1e0a4     F2 1E 02 FB | 	rdlong	local01, objptr
1e0a8     98 E4 05 F1 | 	add	objptr, #152
1e0ac     F2 1E 62 FC | 	wrlong	local01, objptr
1e0b0                 | ' st_lines:=t_lines
1e0b0     0C E4 05 F1 | 	add	objptr, #12
1e0b4     F2 1E 02 FB | 	rdlong	local01, objptr
1e0b8     04 E4 05 F1 | 	add	objptr, #4
1e0bc     F2 1E 62 FC | 	wrlong	local01, objptr
1e0c0                 | ' ppl:=ppl/xzoom  
1e0c0     28 E4 85 F1 | 	sub	objptr, #40
1e0c4     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e0c8     2C E4 05 F1 | 	add	objptr, #44
1e0cc     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e0d0     05 E5 85 F1 | 	sub	objptr, #261
1e0d4     BA 00 A0 FD | 	call	#divide_
1e0d8     D9 E4 05 F1 | 	add	objptr, #217
1e0dc     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e0e0                 | ' s_ppl:=ppl
1e0e0     1C E4 05 F1 | 	add	objptr, #28
1e0e4     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e0e8     F5 E4 85 F1 | 	sub	objptr, #245
1e0ec                 | ' waitms(20)							' wait 
1e0ec     14 12 06 F6 | 	mov	arg01, #20
1e0f0     44 2A B0 FD | 	call	#__system___waitms
1e0f4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e0f4     04 E4 05 F1 | 	add	objptr, #4
1e0f8     F2 12 02 FB | 	rdlong	arg01, objptr
1e0fc     04 E4 85 F1 | 	sub	objptr, #4
1e100     F2 16 02 FB | 	rdlong	arg03, objptr
1e104     09 17 82 F1 | 	sub	arg03, arg01
1e108     20 14 06 F6 | 	mov	arg02, #32
1e10c     00 18 06 F6 | 	mov	arg04, #0
1e110     01 1A 06 F6 | 	mov	arg05, #1
1e114     0B 00 00 FF 
1e118     CC E4 05 F1 | 	add	objptr, ##5836
1e11c     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e120     0B 00 00 FF 
1e124     CC E4 85 F1 | 	sub	objptr, ##5836
1e128     A7 F0 03 F6 | 	mov	ptra, fp
1e12c     B2 00 A0 FD | 	call	#popregs_
1e130                 | _hg010b_spin2_setmode_ret
1e130     2D 00 64 FD | 	ret
1e134                 | 
1e134                 | ' 
1e134                 | ' '****************************************************************************************************************
1e134                 | ' '                                                                                                             	*
1e134                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e134                 | ' '                                                                                                             	*
1e134                 | ' '****************************************************************************************************************
1e134                 | ' 
1e134                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e134                 | _hg010b_spin2_makedl
1e134                 | ' 
1e134                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e134                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e134                 | ' repeat i from 0 to 11                                                           ' clear DL
1e134     00 00 06 F6 | 	mov	_var01, #0
1e138     ED E5 05 F1 | 	add	objptr, #493
1e13c     97 0E 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1e140                 | LR__2390
1e140                 | '   displaylist[i]:=0 
1e140     00 03 02 F6 | 	mov	_var02, _var01
1e144     02 02 66 F0 | 	shl	_var02, #2
1e148     F2 02 02 F1 | 	add	_var02, objptr
1e14c     01 01 68 FC | 	wrlong	#0, _var02
1e150     01 00 06 F1 | 	add	_var01, #1
1e154     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e158     E4 FF 9F CD |  if_b	jmp	#LR__2390
1e15c                 | LR__2391
1e15c                 | '                         ' 
1e15c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e15c     8C E5 85 F1 | 	sub	objptr, #396
1e160     F2 02 02 FB | 	rdlong	_var02, objptr
1e164     14 02 66 F0 | 	shl	_var02, #20
1e168     01 02 06 F1 | 	add	_var02, #1
1e16c     04 E4 85 F1 | 	sub	objptr, #4
1e170     F2 00 02 FB | 	rdlong	_var01, objptr
1e174     02 00 66 F0 | 	shl	_var01, #2
1e178     04 00 66 F0 | 	shl	_var01, #4
1e17c     00 03 02 F1 | 	add	_var02, _var01
1e180     90 E5 05 F1 | 	add	objptr, #400
1e184     F2 02 62 FC | 	wrlong	_var02, objptr
1e188     ED E5 85 F1 | 	sub	objptr, #493
1e18c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e18c     F2 02 02 FB | 	rdlong	_var02, objptr
1e190     04 02 66 F0 | 	shl	_var02, #4
1e194     02 02 06 F1 | 	add	_var02, #2
1e198     F1 E5 05 F1 | 	add	objptr, #497
1e19c     F2 02 62 FC | 	wrlong	_var02, objptr
1e1a0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e1a0     04 E4 85 F1 | 	sub	objptr, #4
1e1a4     F2 02 02 F6 | 	mov	_var02, objptr
1e1a8     CD E5 85 F1 | 	sub	objptr, #461
1e1ac     F2 02 62 FC | 	wrlong	_var02, objptr
1e1b0     20 E4 85 F1 | 	sub	objptr, #32
1e1b4                 | _hg010b_spin2_makedl_ret
1e1b4     2D 00 64 FD | 	ret
1e1b8                 | 
1e1b8                 | ' 
1e1b8                 | ' 
1e1b8                 | ' '****************************************************************************************************************
1e1b8                 | ' '                                                                        					*
1e1b8                 | ' '  Graphic primitives                                                    					*
1e1b8                 | ' '                                                                        					*
1e1b8                 | ' '****************************************************************************************************************
1e1b8                 | ' 
1e1b8                 | ' pub setspriteptr(num,ptr)
1e1b8                 | _hg010b_spin2_setspriteptr
1e1b8                 | ' long[@spr1ptr+12*num]:=ptr
1e1b8     11 E5 05 F1 | 	add	objptr, #273
1e1bc     F2 00 02 F6 | 	mov	_var01, objptr
1e1c0     09 03 02 F6 | 	mov	_var02, arg01
1e1c4     01 02 66 F0 | 	shl	_var02, #1
1e1c8     09 03 02 F1 | 	add	_var02, arg01
1e1cc     02 02 66 F0 | 	shl	_var02, #2
1e1d0     01 01 02 F1 | 	add	_var01, _var02
1e1d4     00 15 62 FC | 	wrlong	arg02, _var01
1e1d8     11 E5 85 F1 | 	sub	objptr, #273
1e1dc                 | _hg010b_spin2_setspriteptr_ret
1e1dc     2D 00 64 FD | 	ret
1e1e0                 | 
1e1e0                 | ' 
1e1e0                 | ' pub setspritepos(num,x,y)
1e1e0                 | _hg010b_spin2_setspritepos
1e1e0                 | ' if y>601
1e1e0     01 00 00 FF 
1e1e4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e1e8                 | '   y:=601
1e1e8     01 00 00 3F 
1e1ec     59 16 06 36 |  if_ae	mov	arg03, ##601
1e1f0                 | ' if x>1024
1e1f0     02 00 00 FF 
1e1f4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e1f8                 | '   x:=1024
1e1f8     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e1fc                 | ' word[@spr1ptr+12*num+4]:=x
1e1fc     11 E5 05 F1 | 	add	objptr, #273
1e200     F2 00 02 F6 | 	mov	_var01, objptr
1e204     09 03 02 F6 | 	mov	_var02, arg01
1e208     01 02 66 F0 | 	shl	_var02, #1
1e20c     09 03 02 F1 | 	add	_var02, arg01
1e210     02 02 66 F0 | 	shl	_var02, #2
1e214     01 01 02 F1 | 	add	_var01, _var02
1e218     04 00 06 F1 | 	add	_var01, #4
1e21c     00 15 52 FC | 	wrword	arg02, _var01
1e220                 | ' word[@spr1ptr+12*num+6]:=y
1e220     F2 00 02 F6 | 	mov	_var01, objptr
1e224     09 03 02 F6 | 	mov	_var02, arg01
1e228     01 02 66 F0 | 	shl	_var02, #1
1e22c     09 03 02 F1 | 	add	_var02, arg01
1e230     02 02 66 F0 | 	shl	_var02, #2
1e234     01 01 02 F1 | 	add	_var01, _var02
1e238     06 00 06 F1 | 	add	_var01, #6
1e23c     00 17 52 FC | 	wrword	arg03, _var01
1e240     11 E5 85 F1 | 	sub	objptr, #273
1e244                 | _hg010b_spin2_setspritepos_ret
1e244     2D 00 64 FD | 	ret
1e248                 | 
1e248                 | ' 
1e248                 | ' pub setspritesize(num,w,h)
1e248                 | _hg010b_spin2_setspritesize
1e248                 | ' word[@spr1ptr+12*num+8]:=w
1e248     11 E5 05 F1 | 	add	objptr, #273
1e24c     F2 00 02 F6 | 	mov	_var01, objptr
1e250     09 03 02 F6 | 	mov	_var02, arg01
1e254     01 02 66 F0 | 	shl	_var02, #1
1e258     09 03 02 F1 | 	add	_var02, arg01
1e25c     02 02 66 F0 | 	shl	_var02, #2
1e260     01 01 02 F1 | 	add	_var01, _var02
1e264     08 00 06 F1 | 	add	_var01, #8
1e268     00 15 52 FC | 	wrword	arg02, _var01
1e26c                 | ' word[@spr1ptr+12*num+10]:=h
1e26c     F2 00 02 F6 | 	mov	_var01, objptr
1e270     09 03 02 F6 | 	mov	_var02, arg01
1e274     01 02 66 F0 | 	shl	_var02, #1
1e278     09 03 02 F1 | 	add	_var02, arg01
1e27c     02 02 66 F0 | 	shl	_var02, #2
1e280     01 01 02 F1 | 	add	_var01, _var02
1e284     0A 00 06 F1 | 	add	_var01, #10
1e288     00 17 52 FC | 	wrword	arg03, _var01
1e28c     11 E5 85 F1 | 	sub	objptr, #273
1e290                 | _hg010b_spin2_setspritesize_ret
1e290     2D 00 64 FD | 	ret
1e294                 | 
1e294                 | ' 
1e294                 | ' 
1e294                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e294                 | ' 
1e294                 | ' 
1e294                 | ' pub putpixel(x,y,c)
1e294                 | _hg010b_spin2_putpixel
1e294     04 4A 05 F6 | 	mov	COUNT_, #4
1e298     A8 00 A0 FD | 	call	#pushregs_
1e29c     09 1F 02 F6 | 	mov	local01, arg01
1e2a0                 | ' 
1e2a0                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e2a0     00 20 06 F6 | 	mov	local02, #0
1e2a4     00 1E 56 F2 | 	cmps	local01, #0 wc
1e2a8     01 20 66 36 |  if_ae	neg	local02, #1
1e2ac     E9 E4 05 F1 | 	add	objptr, #233
1e2b0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e2b4     02 1A 66 F0 | 	shl	arg05, #2
1e2b8     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e2bc     11 23 A2 F1 | 	subx	local03, local03
1e2c0     11 21 02 F5 | 	and	local02, local03
1e2c4     00 22 06 F6 | 	mov	local03, #0
1e2c8     00 14 56 F2 | 	cmps	arg02, #0 wc
1e2cc     01 22 66 36 |  if_ae	neg	local03, #1
1e2d0     11 21 02 F5 | 	and	local02, local03
1e2d4     04 E4 85 F1 | 	sub	objptr, #4
1e2d8     F2 22 02 FB | 	rdlong	local03, objptr
1e2dc     E5 E4 85 F1 | 	sub	objptr, #229
1e2e0     11 15 52 F2 | 	cmps	arg02, local03 wc
1e2e4     12 25 A2 F1 | 	subx	local04, local04
1e2e8     12 21 CA F7 | 	test	local02, local04 wz
1e2ec     48 00 90 AD |  if_e	jmp	#LR__2400
1e2f0     DD E4 05 F1 | 	add	objptr, #221
1e2f4     F2 12 02 FB | 	rdlong	arg01, objptr
1e2f8     14 E4 05 F1 | 	add	objptr, #20
1e2fc     F2 24 02 FB | 	rdlong	local04, objptr
1e300     02 24 66 F0 | 	shl	local04, #2
1e304     0A 25 02 FD | 	qmul	local04, arg02
1e308                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e308     0B 15 02 F6 | 	mov	arg02, arg03
1e30c     01 16 06 F6 | 	mov	arg03, #1
1e310     00 18 06 F6 | 	mov	arg04, #0
1e314     01 1A 06 F6 | 	mov	arg05, #1
1e318     0A 00 00 FF 
1e31c     DB E5 05 F1 | 	add	objptr, ##5595
1e320     18 24 62 FD | 	getqx	local04
1e324     0F 25 02 F1 | 	add	local04, local01
1e328     12 13 02 F1 | 	add	arg01, local04
1e32c     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e330     0B 00 00 FF 
1e334     CC E4 85 F1 | 	sub	objptr, ##5836
1e338                 | LR__2400
1e338     A7 F0 03 F6 | 	mov	ptra, fp
1e33c     B2 00 A0 FD | 	call	#popregs_
1e340                 | _hg010b_spin2_putpixel_ret
1e340     2D 00 64 FD | 	ret
1e344                 | 
1e344                 | ' 
1e344                 | ' pub putpixel2(x,y,c)
1e344                 | _hg010b_spin2_putpixel2
1e344     02 4A 05 F6 | 	mov	COUNT_, #2
1e348     A8 00 A0 FD | 	call	#pushregs_
1e34c     DD E4 05 F1 | 	add	objptr, #221
1e350     F2 1E 02 FB | 	rdlong	local01, objptr
1e354     14 E4 05 F1 | 	add	objptr, #20
1e358     F2 1A 02 FB | 	rdlong	arg05, objptr
1e35c     02 1A 66 F0 | 	shl	arg05, #2
1e360     0A 1B 02 FD | 	qmul	arg05, arg02
1e364                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e364     0B 15 02 F6 | 	mov	arg02, arg03
1e368     01 16 06 F6 | 	mov	arg03, #1
1e36c     00 18 06 F6 | 	mov	arg04, #0
1e370     01 1A 06 F6 | 	mov	arg05, #1
1e374     0A 00 00 FF 
1e378     DB E5 05 F1 | 	add	objptr, ##5595
1e37c     18 20 62 FD | 	getqx	local02
1e380     09 21 02 F1 | 	add	local02, arg01
1e384     10 1F 02 F1 | 	add	local01, local02
1e388     0F 13 02 F6 | 	mov	arg01, local01
1e38c     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e390     0B 00 00 FF 
1e394     CC E4 85 F1 | 	sub	objptr, ##5836
1e398     A7 F0 03 F6 | 	mov	ptra, fp
1e39c     B2 00 A0 FD | 	call	#popregs_
1e3a0                 | _hg010b_spin2_putpixel2_ret
1e3a0     2D 00 64 FD | 	ret
1e3a4                 | 
1e3a4                 | ' 
1e3a4                 | ' pub getpixel2(x,y): c 
1e3a4                 | _hg010b_spin2_getpixel2
1e3a4     02 4A 05 F6 | 	mov	COUNT_, #2
1e3a8     A8 00 A0 FD | 	call	#pushregs_
1e3ac     0C F0 07 F1 | 	add	ptra, #12
1e3b0     04 4E 05 F1 | 	add	fp, #4
1e3b4     A7 12 62 FC | 	wrlong	arg01, fp
1e3b8     04 4E 05 F1 | 	add	fp, #4
1e3bc     A7 14 62 FC | 	wrlong	arg02, fp
1e3c0     08 4E 85 F1 | 	sub	fp, #8
1e3c4     A7 00 68 FC | 	wrlong	#0, fp
1e3c8     A7 12 02 F6 | 	mov	arg01, fp
1e3cc     DD E4 05 F1 | 	add	objptr, #221
1e3d0     F2 14 02 FB | 	rdlong	arg02, objptr
1e3d4     14 E4 05 F1 | 	add	objptr, #20
1e3d8     F2 16 02 FB | 	rdlong	arg03, objptr
1e3dc     02 16 66 F0 | 	shl	arg03, #2
1e3e0     08 4E 05 F1 | 	add	fp, #8
1e3e4     A7 FA 01 FB | 	rdlong	result1, fp
1e3e8     FD 16 02 FD | 	qmul	arg03, result1
1e3ec                 | ' 
1e3ec                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e3ec     04 4E 85 F1 | 	sub	fp, #4
1e3f0     A7 1E 02 FB | 	rdlong	local01, fp
1e3f4     04 4E 85 F1 | 	sub	fp, #4
1e3f8     01 16 06 F6 | 	mov	arg03, #1
1e3fc     0A 00 00 FF 
1e400     DB E5 05 F1 | 	add	objptr, ##5595
1e404     18 20 62 FD | 	getqx	local02
1e408     0F 21 02 F1 | 	add	local02, local01
1e40c     10 15 02 F1 | 	add	arg02, local02
1e410     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e414     0B 00 00 FF 
1e418     CC E4 85 F1 | 	sub	objptr, ##5836
1e41c                 | ' return c
1e41c     A7 FA 01 FB | 	rdlong	result1, fp
1e420     A7 F0 03 F6 | 	mov	ptra, fp
1e424     B2 00 A0 FD | 	call	#popregs_
1e428                 | _hg010b_spin2_getpixel2_ret
1e428     2D 00 64 FD | 	ret
1e42c                 | 
1e42c                 | '   
1e42c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e42c                 | ' 
1e42c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e42c                 | _hg010b_spin2_fastline
1e42c     02 4A 05 F6 | 	mov	COUNT_, #2
1e430     A8 00 A0 FD | 	call	#pushregs_
1e434     09 1F 02 F6 | 	mov	local01, arg01
1e438     0A 21 02 F6 | 	mov	local02, arg02
1e43c                 | ' 
1e43c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e43c     00 16 56 F2 | 	cmps	arg03, #0 wc
1e440     F4 00 90 CD |  if_b	jmp	#LR__2410
1e444     01 00 00 FF 
1e448     2A E4 05 F1 | 	add	objptr, ##554
1e44c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e450     01 00 00 FF 
1e454     2A E4 85 F1 | 	sub	objptr, ##554
1e458     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e45c     D8 00 90 3D |  if_ae	jmp	#LR__2410
1e460     00 1E 56 F2 | 	cmps	local01, #0 wc
1e464     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e468     CC 00 90 CD |  if_b	jmp	#LR__2410
1e46c     01 00 00 FF 
1e470     26 E4 05 F1 | 	add	objptr, ##550
1e474     F2 1A 02 FB | 	rdlong	arg05, objptr
1e478     01 00 00 FF 
1e47c     26 E4 85 F1 | 	sub	objptr, ##550
1e480     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e484     01 00 00 1F 
1e488     26 E4 05 11 |  if_a	add	objptr, ##550
1e48c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e490     01 00 00 1F 
1e494     26 E4 85 11 |  if_a	sub	objptr, ##550
1e498     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e49c                 | '   return
1e49c     98 00 90 1D |  if_a	jmp	#LR__2410
1e4a0     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e4a4     0F 1B 02 16 |  if_a	mov	arg05, local01
1e4a8     10 1F 02 16 |  if_a	mov	local01, local02
1e4ac     0D 21 02 16 |  if_a	mov	local02, arg05
1e4b0     00 1E 56 F2 | 	cmps	local01, #0 wc
1e4b4     00 1E 06 C6 |  if_b	mov	local01, #0
1e4b8     01 00 00 FF 
1e4bc     26 E4 05 F1 | 	add	objptr, ##550
1e4c0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e4c4     01 00 00 FF 
1e4c8     26 E4 85 F1 | 	sub	objptr, ##550
1e4cc     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e4d0     01 00 00 3F 
1e4d4     26 E4 05 31 |  if_ae	add	objptr, ##550
1e4d8     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e4dc     01 00 00 3F 
1e4e0     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e4e4     DD E4 05 F1 | 	add	objptr, #221
1e4e8     F2 12 02 FB | 	rdlong	arg01, objptr
1e4ec     14 E4 05 F1 | 	add	objptr, #20
1e4f0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e4f4     02 1A 66 F0 | 	shl	arg05, #2
1e4f8     0B 1B 02 FD | 	qmul	arg05, arg03
1e4fc                 | ' if x1>x2
1e4fc                 | '   x1,x2:=x2,x1
1e4fc                 | ' if x1<0 
1e4fc                 | '   x1:=0
1e4fc                 | ' if x2>=xres
1e4fc                 | '   x2:=xres-1  
1e4fc     01 20 86 31 |  if_ae	sub	local02, #1
1e500                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e500     01 16 06 F6 | 	mov	arg03, #1
1e504     10 17 02 F1 | 	add	arg03, local02
1e508     0F 17 82 F1 | 	sub	arg03, local01
1e50c     0C 15 02 F6 | 	mov	arg02, arg04
1e510     00 18 06 F6 | 	mov	arg04, #0
1e514     01 1A 06 F6 | 	mov	arg05, #1
1e518     0A 00 00 FF 
1e51c     DB E5 05 F1 | 	add	objptr, ##5595
1e520     18 20 62 FD | 	getqx	local02
1e524     0F 21 02 F1 | 	add	local02, local01
1e528     10 13 02 F1 | 	add	arg01, local02
1e52c     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e530     0B 00 00 FF 
1e534     CC E4 85 F1 | 	sub	objptr, ##5836
1e538                 | LR__2410
1e538     A7 F0 03 F6 | 	mov	ptra, fp
1e53c     B2 00 A0 FD | 	call	#popregs_
1e540                 | _hg010b_spin2_fastline_ret
1e540     2D 00 64 FD | 	ret
1e544                 | 
1e544                 | ' 
1e544                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e544                 | _hg010b_spin2_draw
1e544     0E 4A 05 F6 | 	mov	COUNT_, #14
1e548     A8 00 A0 FD | 	call	#pushregs_
1e54c     09 1F 02 F6 | 	mov	local01, arg01
1e550     0A 21 02 F6 | 	mov	local02, arg02
1e554     0B 23 02 F6 | 	mov	local03, arg03
1e558     0C 25 02 F6 | 	mov	local04, arg04
1e55c     0D 27 02 F6 | 	mov	local05, arg05
1e560                 | ' 
1e560                 | ' if (y1==y2)
1e560     12 21 0A F2 | 	cmp	local02, local04 wz
1e564     18 00 90 5D |  if_ne	jmp	#LR__2420
1e568                 | '   fastline(x1,x2,y1,c)
1e568     0F 13 02 F6 | 	mov	arg01, local01
1e56c     11 15 02 F6 | 	mov	arg02, local03
1e570     10 17 02 F6 | 	mov	arg03, local02
1e574     13 19 02 F6 | 	mov	arg04, local05
1e578     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e57c     F8 00 90 FD | 	jmp	#LR__2426
1e580                 | LR__2420
1e580                 | ' else  
1e580                 | '   x:=x1
1e580     0F 29 02 F6 | 	mov	local06, local01
1e584                 | '   y:=y1
1e584     10 2B 02 F6 | 	mov	local07, local02
1e588                 | ' 
1e588                 | '   if (x1<x2) 
1e588     11 1F 52 F2 | 	cmps	local01, local03 wc
1e58c                 | '     xi:=1
1e58c     01 2C 06 C6 |  if_b	mov	local08, #1
1e590                 | '     dx:=x2-x1
1e590     11 2F 02 C6 |  if_b	mov	local09, local03
1e594     0F 2F 82 C1 |  if_b	sub	local09, local01
1e598                 | '   else
1e598                 | '     xi:=-1
1e598     01 2C 66 36 |  if_ae	neg	local08, #1
1e59c                 | '     dx:=x1-x2
1e59c     11 1F 82 31 |  if_ae	sub	local01, local03
1e5a0     0F 2F 02 36 |  if_ae	mov	local09, local01
1e5a4                 | '   
1e5a4                 | '   if (y1<y2) 
1e5a4     12 21 52 F2 | 	cmps	local02, local04 wc
1e5a8                 | '     yi:=1
1e5a8     01 30 06 C6 |  if_b	mov	local10, #1
1e5ac                 | '     dy:=y2-y1
1e5ac     12 33 02 C6 |  if_b	mov	local11, local04
1e5b0     10 33 82 C1 |  if_b	sub	local11, local02
1e5b4                 | '   else
1e5b4                 | '     yi:=-1
1e5b4     01 30 66 36 |  if_ae	neg	local10, #1
1e5b8                 | '     dy:=y1-y2
1e5b8     12 21 82 31 |  if_ae	sub	local02, local04
1e5bc     10 33 02 36 |  if_ae	mov	local11, local02
1e5c0                 | ' 
1e5c0                 | '   putpixel(x,y,c)
1e5c0     13 17 02 F6 | 	mov	arg03, local05
1e5c4     14 13 02 F6 | 	mov	arg01, local06
1e5c8     15 15 02 F6 | 	mov	arg02, local07
1e5cc     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e5d0                 | ' 
1e5d0                 | '   if (dx>dy)
1e5d0     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e5d4     50 00 90 ED |  if_be	jmp	#LR__2422
1e5d8                 | '     ai:=(dy-dx)*2
1e5d8     19 35 02 F6 | 	mov	local12, local11
1e5dc     17 35 82 F1 | 	sub	local12, local09
1e5e0     01 34 66 F0 | 	shl	local12, #1
1e5e4                 | '     bi:=dy*2
1e5e4     01 32 66 F0 | 	shl	local11, #1
1e5e8     19 37 02 F6 | 	mov	local13, local11
1e5ec                 | '     d:= bi-dx
1e5ec     1B 39 02 F6 | 	mov	local14, local13
1e5f0     17 39 82 F1 | 	sub	local14, local09
1e5f4                 | '     repeat while (x<>x2) 
1e5f4                 | LR__2421
1e5f4     11 29 0A F2 | 	cmp	local06, local03 wz
1e5f8     7C 00 90 AD |  if_e	jmp	#LR__2425
1e5fc                 | '       if (d>=0) 
1e5fc     00 38 56 F2 | 	cmps	local14, #0 wc
1e600                 | '         x+=xi
1e600     16 29 02 31 |  if_ae	add	local06, local08
1e604                 | '         y+=yi
1e604     18 2B 02 31 |  if_ae	add	local07, local10
1e608                 | '         d+=ai
1e608     1A 39 02 31 |  if_ae	add	local14, local12
1e60c                 | '       else
1e60c                 | '         d+=bi
1e60c     1B 39 02 C1 |  if_b	add	local14, local13
1e610                 | '         x+=xi
1e610     16 29 02 C1 |  if_b	add	local06, local08
1e614                 | '       putpixel(x,y,c)
1e614     14 13 02 F6 | 	mov	arg01, local06
1e618     15 15 02 F6 | 	mov	arg02, local07
1e61c     13 17 02 F6 | 	mov	arg03, local05
1e620     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e624     CC FF 9F FD | 	jmp	#LR__2421
1e628                 | LR__2422
1e628                 | '   else
1e628                 | '     ai:=(dx-dy)*2
1e628     17 35 02 F6 | 	mov	local12, local09
1e62c     19 35 82 F1 | 	sub	local12, local11
1e630     01 34 66 F0 | 	shl	local12, #1
1e634                 | '     bi:=dx*2
1e634     01 2E 66 F0 | 	shl	local09, #1
1e638     17 37 02 F6 | 	mov	local13, local09
1e63c                 | '     d:=bi-dy
1e63c     1B 39 02 F6 | 	mov	local14, local13
1e640     19 39 82 F1 | 	sub	local14, local11
1e644                 | '     repeat while (y<>y2)
1e644                 | LR__2423
1e644     12 2B 0A F2 | 	cmp	local07, local04 wz
1e648     2C 00 90 AD |  if_e	jmp	#LR__2424
1e64c                 | '       if (d>=0)
1e64c     00 38 56 F2 | 	cmps	local14, #0 wc
1e650                 | '         x+=xi
1e650     16 29 02 31 |  if_ae	add	local06, local08
1e654                 | '         y+=yi
1e654     18 2B 02 31 |  if_ae	add	local07, local10
1e658                 | '         d+=ai
1e658     1A 39 02 31 |  if_ae	add	local14, local12
1e65c                 | '       else
1e65c                 | '         d+=bi
1e65c     1B 39 02 C1 |  if_b	add	local14, local13
1e660                 | '         y+=yi
1e660     18 2B 02 C1 |  if_b	add	local07, local10
1e664                 | '       putpixel(x, y,c)
1e664     14 13 02 F6 | 	mov	arg01, local06
1e668     15 15 02 F6 | 	mov	arg02, local07
1e66c     13 17 02 F6 | 	mov	arg03, local05
1e670     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e674     CC FF 9F FD | 	jmp	#LR__2423
1e678                 | LR__2424
1e678                 | LR__2425
1e678                 | LR__2426
1e678     A7 F0 03 F6 | 	mov	ptra, fp
1e67c     B2 00 A0 FD | 	call	#popregs_
1e680                 | _hg010b_spin2_draw_ret
1e680     2D 00 64 FD | 	ret
1e684                 | 
1e684                 | '  
1e684                 | ' pub fillpush(val) 
1e684                 | _hg010b_spin2_fillpush
1e684                 | ' fillstack[fillptr]:=val
1e684     0B 00 00 FF 
1e688     BA E4 05 F1 | 	add	objptr, ##5818
1e68c     F2 00 02 FB | 	rdlong	_var01, objptr
1e690     02 00 66 F0 | 	shl	_var01, #2
1e694     0A 00 00 FF 
1e698     00 E4 85 F1 | 	sub	objptr, ##5120
1e69c     F2 00 02 F1 | 	add	_var01, objptr
1e6a0     00 13 62 FC | 	wrlong	arg01, _var01
1e6a4                 | ' fillptr+=1   
1e6a4     0A 00 00 FF 
1e6a8     00 E4 05 F1 | 	add	objptr, ##5120
1e6ac     F2 00 02 FB | 	rdlong	_var01, objptr
1e6b0     01 00 06 F1 | 	add	_var01, #1
1e6b4     F2 00 62 FC | 	wrlong	_var01, objptr
1e6b8     0B 00 00 FF 
1e6bc     BA E4 85 F1 | 	sub	objptr, ##5818
1e6c0                 | _hg010b_spin2_fillpush_ret
1e6c0     2D 00 64 FD | 	ret
1e6c4                 | 
1e6c4                 | ' 
1e6c4                 | '     
1e6c4                 | ' pub fillpop() : val
1e6c4                 | _hg010b_spin2_fillpop
1e6c4                 | ' 
1e6c4                 | ' fillptr-=1
1e6c4     0B 00 00 FF 
1e6c8     BA E4 05 F1 | 	add	objptr, ##5818
1e6cc     F2 FA 01 FB | 	rdlong	result1, objptr
1e6d0     01 FA 85 F1 | 	sub	result1, #1
1e6d4     F2 FA 61 FC | 	wrlong	result1, objptr
1e6d8                 | ' if fillptr<0
1e6d8     0B 00 00 FF 
1e6dc     BA E4 85 F1 | 	sub	objptr, ##5818
1e6e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e6e4                 | '   fillptr:=0
1e6e4     0B 00 00 CF 
1e6e8     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e6ec     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e6f0     0B 00 00 CF 
1e6f4     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e6f8                 | '   val:=-12345
1e6f8     E7 FF 7F CF 
1e6fc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e700     28 00 90 CD |  if_b	jmp	#LR__2430
1e704                 | ' else 
1e704                 | '   val:=fillstack[fillptr]
1e704     0B 00 00 FF 
1e708     BA E4 05 F1 | 	add	objptr, ##5818
1e70c     F2 00 02 FB | 	rdlong	_var01, objptr
1e710     02 00 66 F0 | 	shl	_var01, #2
1e714     0A 00 00 FF 
1e718     00 E4 85 F1 | 	sub	objptr, ##5120
1e71c     F2 00 02 F1 | 	add	_var01, objptr
1e720     00 01 02 FB | 	rdlong	_var01, _var01
1e724     01 00 00 FF 
1e728     BA E4 85 F1 | 	sub	objptr, ##698
1e72c                 | LR__2430
1e72c                 | ' return val
1e72c     00 FB 01 F6 | 	mov	result1, _var01
1e730                 | _hg010b_spin2_fillpop_ret
1e730     2D 00 64 FD | 	ret
1e734                 | 
1e734                 | ' 
1e734                 | '       
1e734                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e734                 | _hg010b_spin2_fill
1e734     0B 4A 05 F6 | 	mov	COUNT_, #11
1e738     A8 00 A0 FD | 	call	#pushregs_
1e73c                 | ' 
1e73c                 | ' newcolor:=newcolor & 255
1e73c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e740                 | ' oldcolor:=oldcolor & 255
1e740     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e744                 | ' 
1e744                 | ' if (oldcolor == newcolor) 
1e744     0F 21 0A F2 | 	cmp	local02, local01 wz
1e748                 | '   return
1e748     70 02 90 AD |  if_e	jmp	#LR__2449
1e74c                 | ' 
1e74c                 | ' fillptr:=0
1e74c     0B 00 00 FF 
1e750     BA E4 05 F1 | 	add	objptr, ##5818
1e754     F2 00 68 FC | 	wrlong	#0, objptr
1e758                 | ' fillmax:=0
1e758     04 E4 05 F1 | 	add	objptr, #4
1e75c     F2 00 68 FC | 	wrlong	#0, objptr
1e760     0B 00 00 FF 
1e764     BE E4 85 F1 | 	sub	objptr, ##5822
1e768                 | ' fillpush(x)
1e768     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e76c                 | ' fillpush(y)
1e76c     0A 13 02 F6 | 	mov	arg01, arg02
1e770     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e774                 | ' y:=fillpop()
1e774     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e778     FD 22 02 F6 | 	mov	local03, result1
1e77c                 | ' x:=fillpop()
1e77c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e780     FD 24 02 F6 | 	mov	local04, result1
1e784                 | ' 'pinhigh(38)
1e784                 | ' repeat while (x>-1)       
1e784                 | LR__2440
1e784     00 24 56 F2 | 	cmps	local04, #0 wc
1e788     30 02 90 CD |  if_b	jmp	#LR__2448
1e78c                 | '  ' pintoggle(39)
1e78c                 | '   x1 := x
1e78c     12 27 02 F6 | 	mov	local05, local04
1e790                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e790                 | LR__2441
1e790     00 28 06 F6 | 	mov	local06, #0
1e794     00 2A 06 F6 | 	mov	local07, #0
1e798     00 26 56 F2 | 	cmps	local05, #0 wc
1e79c     01 2A 66 36 |  if_ae	neg	local07, #1
1e7a0     00 2A 0E F2 | 	cmp	local07, #0 wz
1e7a4     00 28 26 56 |  if_ne	not	local06, #0
1e7a8     00 2C 06 F6 | 	mov	local08, #0
1e7ac     00 2E 06 F6 | 	mov	local09, #0
1e7b0     11 15 02 F6 | 	mov	arg02, local03
1e7b4     13 13 02 F6 | 	mov	arg01, local05
1e7b8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e7bc     10 FB 09 F2 | 	cmp	result1, local02 wz
1e7c0     00 2E 26 A6 |  if_e	not	local09, #0
1e7c4     00 2E 0E F2 | 	cmp	local09, #0 wz
1e7c8     00 2C 26 56 |  if_ne	not	local08, #0
1e7cc     16 29 CA F7 | 	test	local06, local08 wz
1e7d0                 | '     x1--
1e7d0     01 26 86 51 |  if_ne	sub	local05, #1
1e7d4     B8 FF 9F 5D |  if_ne	jmp	#LR__2441
1e7d8                 | '   x1++
1e7d8     01 26 06 F1 | 	add	local05, #1
1e7dc                 | '   spanabove := 0
1e7dc     00 30 06 F6 | 	mov	local10, #0
1e7e0                 | '   spanbelow := 0
1e7e0     00 32 06 F6 | 	mov	local11, #0
1e7e4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1e7e4                 | LR__2442
1e7e4     00 28 06 F6 | 	mov	local06, #0
1e7e8     02 00 00 FF 
1e7ec     00 26 56 F2 | 	cmps	local05, ##1024 wc
1e7f0     00 28 26 C6 |  if_b	not	local06, #0
1e7f4     00 2C 06 F6 | 	mov	local08, #0
1e7f8     00 2E 06 F6 | 	mov	local09, #0
1e7fc     11 15 02 F6 | 	mov	arg02, local03
1e800     13 13 02 F6 | 	mov	arg01, local05
1e804     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e808     10 FB 09 F2 | 	cmp	result1, local02 wz
1e80c     00 2E 26 A6 |  if_e	not	local09, #0
1e810     00 2E 0E F2 | 	cmp	local09, #0 wz
1e814     00 2C 26 56 |  if_ne	not	local08, #0
1e818     16 29 CA F7 | 	test	local06, local08 wz
1e81c     88 01 90 AD |  if_e	jmp	#LR__2447
1e820                 | '     putpixel2 (x1,y, newcolor & 255)
1e820     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1e824     13 13 02 F6 | 	mov	arg01, local05
1e828     11 15 02 F6 | 	mov	arg02, local03
1e82c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1e830                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1e830     00 28 06 F6 | 	mov	local06, #0
1e834     00 2A 06 F6 | 	mov	local07, #0
1e838     00 30 0E F2 | 	cmp	local10, #0 wz
1e83c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1e840     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1e844     00 2A 0E F2 | 	cmp	local07, #0 wz
1e848     00 28 26 56 |  if_ne	not	local06, #0
1e84c     00 2C 06 F6 | 	mov	local08, #0
1e850     00 2E 06 F6 | 	mov	local09, #0
1e854     11 15 02 F6 | 	mov	arg02, local03
1e858     01 14 86 F1 | 	sub	arg02, #1
1e85c     13 13 02 F6 | 	mov	arg01, local05
1e860     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e864     10 FB 09 F2 | 	cmp	result1, local02 wz
1e868     00 2E 26 A6 |  if_e	not	local09, #0
1e86c     00 2E 0E F2 | 	cmp	local09, #0 wz
1e870     00 2C 26 56 |  if_ne	not	local08, #0
1e874     16 29 CA F7 | 	test	local06, local08 wz
1e878     1C 00 90 AD |  if_e	jmp	#LR__2443
1e87c                 | '       fillpush(x1)
1e87c     13 13 02 F6 | 	mov	arg01, local05
1e880     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1e884                 | '       fillpush(y-1)
1e884     11 13 02 F6 | 	mov	arg01, local03
1e888     01 12 86 F1 | 	sub	arg01, #1
1e88c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e890                 | '       spanabove := 1 
1e890     01 30 06 F6 | 	mov	local10, #1
1e894     4C 00 90 FD | 	jmp	#LR__2444
1e898                 | LR__2443
1e898                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1e898     00 28 06 F6 | 	mov	local06, #0
1e89c     00 2A 06 F6 | 	mov	local07, #0
1e8a0     00 30 0E F2 | 	cmp	local10, #0 wz
1e8a4     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1e8a8     01 2A 66 16 |  if_a	neg	local07, #1
1e8ac     00 2A 0E F2 | 	cmp	local07, #0 wz
1e8b0     00 28 26 56 |  if_ne	not	local06, #0
1e8b4     00 2C 06 F6 | 	mov	local08, #0
1e8b8     00 2E 06 F6 | 	mov	local09, #0
1e8bc     11 15 02 F6 | 	mov	arg02, local03
1e8c0     01 14 86 F1 | 	sub	arg02, #1
1e8c4     13 13 02 F6 | 	mov	arg01, local05
1e8c8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e8cc     10 FB 09 F2 | 	cmp	result1, local02 wz
1e8d0     00 2E 26 56 |  if_ne	not	local09, #0
1e8d4     00 2E 0E F2 | 	cmp	local09, #0 wz
1e8d8     00 2C 26 56 |  if_ne	not	local08, #0
1e8dc     16 29 CA F7 | 	test	local06, local08 wz
1e8e0                 | '       spanabove := 0 
1e8e0     00 30 06 56 |  if_ne	mov	local10, #0
1e8e4                 | LR__2444
1e8e4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1e8e4     00 28 06 F6 | 	mov	local06, #0
1e8e8     00 2A 06 F6 | 	mov	local07, #0
1e8ec     00 32 0E F2 | 	cmp	local11, #0 wz
1e8f0     01 00 00 AF 
1e8f4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1e8f8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1e8fc     00 2A 0E F2 | 	cmp	local07, #0 wz
1e900     00 28 26 56 |  if_ne	not	local06, #0
1e904     00 2C 06 F6 | 	mov	local08, #0
1e908     00 2E 06 F6 | 	mov	local09, #0
1e90c     11 15 02 F6 | 	mov	arg02, local03
1e910     01 14 06 F1 | 	add	arg02, #1
1e914     13 13 02 F6 | 	mov	arg01, local05
1e918     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e91c     10 FB 09 F2 | 	cmp	result1, local02 wz
1e920     00 2E 26 A6 |  if_e	not	local09, #0
1e924     00 2E 0E F2 | 	cmp	local09, #0 wz
1e928     00 2C 26 56 |  if_ne	not	local08, #0
1e92c     16 29 CA F7 | 	test	local06, local08 wz
1e930     1C 00 90 AD |  if_e	jmp	#LR__2445
1e934                 | '       fillpush(x1)
1e934     13 13 02 F6 | 	mov	arg01, local05
1e938     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1e93c                 | '       fillpush(y + 1)
1e93c     11 13 02 F6 | 	mov	arg01, local03
1e940     01 12 06 F1 | 	add	arg01, #1
1e944     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1e948                 | '       spanBelow := 1
1e948     01 32 06 F6 | 	mov	local11, #1
1e94c     50 00 90 FD | 	jmp	#LR__2446
1e950                 | LR__2445
1e950                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1e950     00 28 06 F6 | 	mov	local06, #0
1e954     00 2A 06 F6 | 	mov	local07, #0
1e958     00 32 0E F2 | 	cmp	local11, #0 wz
1e95c     01 00 00 5F 
1e960     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1e964     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1e968     00 2A 0E F2 | 	cmp	local07, #0 wz
1e96c     00 28 26 56 |  if_ne	not	local06, #0
1e970     00 2C 06 F6 | 	mov	local08, #0
1e974     00 2E 06 F6 | 	mov	local09, #0
1e978     11 15 02 F6 | 	mov	arg02, local03
1e97c     01 14 06 F1 | 	add	arg02, #1
1e980     13 13 02 F6 | 	mov	arg01, local05
1e984     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1e988     10 FB 09 F2 | 	cmp	result1, local02 wz
1e98c     00 2E 26 56 |  if_ne	not	local09, #0
1e990     00 2E 0E F2 | 	cmp	local09, #0 wz
1e994     00 2C 26 56 |  if_ne	not	local08, #0
1e998     16 29 CA F7 | 	test	local06, local08 wz
1e99c                 | '       spanbelow := 0
1e99c     00 32 06 56 |  if_ne	mov	local11, #0
1e9a0                 | LR__2446
1e9a0                 | '     x1++
1e9a0     01 26 06 F1 | 	add	local05, #1
1e9a4     3C FE 9F FD | 	jmp	#LR__2442
1e9a8                 | LR__2447
1e9a8                 | '   y:=fillpop()
1e9a8     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1e9ac     FD 22 02 F6 | 	mov	local03, result1
1e9b0                 | '   x:=fillpop()
1e9b0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1e9b4     FD 24 02 F6 | 	mov	local04, result1
1e9b8     C8 FD 9F FD | 	jmp	#LR__2440
1e9bc                 | LR__2448
1e9bc                 | LR__2449
1e9bc     A7 F0 03 F6 | 	mov	ptra, fp
1e9c0     B2 00 A0 FD | 	call	#popregs_
1e9c4                 | _hg010b_spin2_fill_ret
1e9c4     2D 00 64 FD | 	ret
1e9c8                 | 
1e9c8                 | ' 'pinlow(38)    
1e9c8                 | ' 
1e9c8                 | ' '-- A filled circle -----------------------------------------------------
1e9c8                 | ' 
1e9c8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1e9c8                 | _hg010b_spin2_fcircle
1e9c8     08 4A 05 F6 | 	mov	COUNT_, #8
1e9cc     A8 00 A0 FD | 	call	#pushregs_
1e9d0     0B 1F 02 F6 | 	mov	local01, arg03
1e9d4     FF FF 7F FF 
1e9d8     FE 1F 06 FD | 	qmul	local01, ##-2
1e9dc     09 21 02 F6 | 	mov	local02, arg01
1e9e0     0A 23 02 F6 | 	mov	local03, arg02
1e9e4     0C 25 02 F6 | 	mov	local04, arg04
1e9e8                 | ' 
1e9e8                 | ' d:=5-4*r
1e9e8     0F 19 02 F6 | 	mov	arg04, local01
1e9ec     02 18 66 F0 | 	shl	arg04, #2
1e9f0     05 26 06 F6 | 	mov	local05, #5
1e9f4     0C 27 82 F1 | 	sub	local05, arg04
1e9f8                 | ' x:=0
1e9f8     00 28 06 F6 | 	mov	local06, #0
1e9fc                 | ' y:=r
1e9fc                 | ' da:=(-2*r+5)*4
1e9fc                 | ' db:=3*4
1e9fc     0C 2A 06 F6 | 	mov	local07, #12
1ea00                 | ' repeat while (x<=y) 
1ea00     18 2C 62 FD | 	getqx	local08
1ea04     05 2C 06 F1 | 	add	local08, #5
1ea08     02 2C 66 F0 | 	shl	local08, #2
1ea0c                 | LR__2450
1ea0c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ea10     B4 00 90 1D |  if_a	jmp	#LR__2452
1ea14                 | '   fastline(x0-x,x0+x,y0-y,c)
1ea14     10 13 02 F6 | 	mov	arg01, local02
1ea18     14 13 82 F1 | 	sub	arg01, local06
1ea1c     10 15 02 F6 | 	mov	arg02, local02
1ea20     14 15 02 F1 | 	add	arg02, local06
1ea24     11 17 02 F6 | 	mov	arg03, local03
1ea28     0F 17 82 F1 | 	sub	arg03, local01
1ea2c     12 19 02 F6 | 	mov	arg04, local04
1ea30     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea34                 | '   fastline(x0-x,x0+x,y0+y,c)
1ea34     10 13 02 F6 | 	mov	arg01, local02
1ea38     14 13 82 F1 | 	sub	arg01, local06
1ea3c     10 15 02 F6 | 	mov	arg02, local02
1ea40     14 15 02 F1 | 	add	arg02, local06
1ea44     11 17 02 F6 | 	mov	arg03, local03
1ea48     0F 17 02 F1 | 	add	arg03, local01
1ea4c     12 19 02 F6 | 	mov	arg04, local04
1ea50     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea54                 | '   fastline(x0-y,x0+y,y0-x,c)
1ea54     10 13 02 F6 | 	mov	arg01, local02
1ea58     0F 13 82 F1 | 	sub	arg01, local01
1ea5c     10 15 02 F6 | 	mov	arg02, local02
1ea60     0F 15 02 F1 | 	add	arg02, local01
1ea64     11 17 02 F6 | 	mov	arg03, local03
1ea68     14 17 82 F1 | 	sub	arg03, local06
1ea6c     12 19 02 F6 | 	mov	arg04, local04
1ea70     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea74                 | '   fastline(x0-y,x0+y,y0+x,c)
1ea74     10 13 02 F6 | 	mov	arg01, local02
1ea78     0F 13 82 F1 | 	sub	arg01, local01
1ea7c     10 15 02 F6 | 	mov	arg02, local02
1ea80     0F 15 02 F1 | 	add	arg02, local01
1ea84     11 17 02 F6 | 	mov	arg03, local03
1ea88     14 17 02 F1 | 	add	arg03, local06
1ea8c     12 19 02 F6 | 	mov	arg04, local04
1ea90     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ea94                 | '   if d>0 
1ea94     01 26 56 F2 | 	cmps	local05, #1 wc
1ea98     18 00 90 CD |  if_b	jmp	#LR__2451
1ea9c                 | '     d+=da
1ea9c     16 27 02 F1 | 	add	local05, local08
1eaa0                 | '     y-=1
1eaa0     01 1E 86 F1 | 	sub	local01, #1
1eaa4                 | '     x+=1
1eaa4     01 28 06 F1 | 	add	local06, #1
1eaa8                 | '     da+=4*4
1eaa8     10 2C 06 F1 | 	add	local08, #16
1eaac                 | '     db+=2*4
1eaac     08 2A 06 F1 | 	add	local07, #8
1eab0     58 FF 9F FD | 	jmp	#LR__2450
1eab4                 | LR__2451
1eab4                 | '   else
1eab4                 | '     d+=db
1eab4     15 27 02 F1 | 	add	local05, local07
1eab8                 | '     x+=1
1eab8     01 28 06 F1 | 	add	local06, #1
1eabc                 | '     da+=2*4
1eabc     08 2C 06 F1 | 	add	local08, #8
1eac0                 | '     db+=2*4
1eac0     08 2A 06 F1 | 	add	local07, #8
1eac4     44 FF 9F FD | 	jmp	#LR__2450
1eac8                 | LR__2452
1eac8     A7 F0 03 F6 | 	mov	ptra, fp
1eacc     B2 00 A0 FD | 	call	#popregs_
1ead0                 | _hg010b_spin2_fcircle_ret
1ead0     2D 00 64 FD | 	ret
1ead4                 | 
1ead4                 | '  
1ead4                 | ' '-- A circle ------------------------------------------------------------ 
1ead4                 | '  
1ead4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ead4                 | _hg010b_spin2_circle
1ead4     08 4A 05 F6 | 	mov	COUNT_, #8
1ead8     A8 00 A0 FD | 	call	#pushregs_
1eadc     0B 1F 02 F6 | 	mov	local01, arg03
1eae0     FF FF 7F FF 
1eae4     FE 1F 06 FD | 	qmul	local01, ##-2
1eae8     09 21 02 F6 | 	mov	local02, arg01
1eaec     0A 23 02 F6 | 	mov	local03, arg02
1eaf0     0C 25 02 F6 | 	mov	local04, arg04
1eaf4                 | ' 
1eaf4                 | '  
1eaf4                 | ' d:=5-4*r
1eaf4     0F 19 02 F6 | 	mov	arg04, local01
1eaf8     02 18 66 F0 | 	shl	arg04, #2
1eafc     05 26 06 F6 | 	mov	local05, #5
1eb00     0C 27 82 F1 | 	sub	local05, arg04
1eb04                 | ' x:=0
1eb04     00 28 06 F6 | 	mov	local06, #0
1eb08                 | ' y:=r
1eb08                 | ' da:=(-2*r+5)*4
1eb08                 | ' db:=3*4
1eb08     0C 2A 06 F6 | 	mov	local07, #12
1eb0c                 | ' repeat while (x<=y) 
1eb0c     18 2C 62 FD | 	getqx	local08
1eb10     05 2C 06 F1 | 	add	local08, #5
1eb14     02 2C 66 F0 | 	shl	local08, #2
1eb18                 | LR__2460
1eb18     0F 29 5A F2 | 	cmps	local06, local01 wcz
1eb1c     F4 00 90 1D |  if_a	jmp	#LR__2462
1eb20                 | '   putpixel(x0-x,y0-y,c)
1eb20     10 13 02 F6 | 	mov	arg01, local02
1eb24     14 13 82 F1 | 	sub	arg01, local06
1eb28     11 15 02 F6 | 	mov	arg02, local03
1eb2c     0F 15 82 F1 | 	sub	arg02, local01
1eb30     12 17 02 F6 | 	mov	arg03, local04
1eb34     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb38                 | '   putpixel(x0-x,y0+y,c)
1eb38     10 13 02 F6 | 	mov	arg01, local02
1eb3c     14 13 82 F1 | 	sub	arg01, local06
1eb40     11 15 02 F6 | 	mov	arg02, local03
1eb44     0F 15 02 F1 | 	add	arg02, local01
1eb48     12 17 02 F6 | 	mov	arg03, local04
1eb4c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb50                 | '   putpixel(x0+x,y0-y,c)
1eb50     10 13 02 F6 | 	mov	arg01, local02
1eb54     14 13 02 F1 | 	add	arg01, local06
1eb58     11 15 02 F6 | 	mov	arg02, local03
1eb5c     0F 15 82 F1 | 	sub	arg02, local01
1eb60     12 17 02 F6 | 	mov	arg03, local04
1eb64     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb68                 | '   putpixel(x0+x,y0+y,c)
1eb68     10 13 02 F6 | 	mov	arg01, local02
1eb6c     14 13 02 F1 | 	add	arg01, local06
1eb70     11 15 02 F6 | 	mov	arg02, local03
1eb74     0F 15 02 F1 | 	add	arg02, local01
1eb78     12 17 02 F6 | 	mov	arg03, local04
1eb7c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eb80                 | '   putpixel(x0-y,y0-x,c)
1eb80     10 13 02 F6 | 	mov	arg01, local02
1eb84     0F 13 82 F1 | 	sub	arg01, local01
1eb88     11 15 02 F6 | 	mov	arg02, local03
1eb8c     14 15 82 F1 | 	sub	arg02, local06
1eb90     12 17 02 F6 | 	mov	arg03, local04
1eb94     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eb98                 | '   putpixel(x0-y,y0+x,c)
1eb98     10 13 02 F6 | 	mov	arg01, local02
1eb9c     0F 13 82 F1 | 	sub	arg01, local01
1eba0     11 15 02 F6 | 	mov	arg02, local03
1eba4     14 15 02 F1 | 	add	arg02, local06
1eba8     12 17 02 F6 | 	mov	arg03, local04
1ebac     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebb0                 | '   putpixel(x0+y,y0-x,c)
1ebb0     10 13 02 F6 | 	mov	arg01, local02
1ebb4     0F 13 02 F1 | 	add	arg01, local01
1ebb8     11 15 02 F6 | 	mov	arg02, local03
1ebbc     14 15 82 F1 | 	sub	arg02, local06
1ebc0     12 17 02 F6 | 	mov	arg03, local04
1ebc4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebc8                 | '   putpixel(x0+y,y0+x,c)
1ebc8     10 13 02 F6 | 	mov	arg01, local02
1ebcc     0F 13 02 F1 | 	add	arg01, local01
1ebd0     11 15 02 F6 | 	mov	arg02, local03
1ebd4     14 15 02 F1 | 	add	arg02, local06
1ebd8     12 17 02 F6 | 	mov	arg03, local04
1ebdc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ebe0                 | '   if d>0 
1ebe0     01 26 56 F2 | 	cmps	local05, #1 wc
1ebe4     18 00 90 CD |  if_b	jmp	#LR__2461
1ebe8                 | '     d+=da
1ebe8     16 27 02 F1 | 	add	local05, local08
1ebec                 | '     y-=1
1ebec     01 1E 86 F1 | 	sub	local01, #1
1ebf0                 | '     x+=1
1ebf0     01 28 06 F1 | 	add	local06, #1
1ebf4                 | '     da+=4*4
1ebf4     10 2C 06 F1 | 	add	local08, #16
1ebf8                 | '     db+=2*4
1ebf8     08 2A 06 F1 | 	add	local07, #8
1ebfc     18 FF 9F FD | 	jmp	#LR__2460
1ec00                 | LR__2461
1ec00                 | '   else
1ec00                 | '     d+=db
1ec00     15 27 02 F1 | 	add	local05, local07
1ec04                 | '     x+=1
1ec04     01 28 06 F1 | 	add	local06, #1
1ec08                 | '     da+=2*4
1ec08     08 2C 06 F1 | 	add	local08, #8
1ec0c                 | '     db+=2*4
1ec0c     08 2A 06 F1 | 	add	local07, #8
1ec10     04 FF 9F FD | 	jmp	#LR__2460
1ec14                 | LR__2462
1ec14     A7 F0 03 F6 | 	mov	ptra, fp
1ec18     B2 00 A0 FD | 	call	#popregs_
1ec1c                 | _hg010b_spin2_circle_ret
1ec1c     2D 00 64 FD | 	ret
1ec20                 | 
1ec20                 | '     
1ec20                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ec20                 | ' 
1ec20                 | ' pub frame(x1,y1,x2,y2,c)
1ec20                 | _hg010b_spin2_frame
1ec20     05 4A 05 F6 | 	mov	COUNT_, #5
1ec24     A8 00 A0 FD | 	call	#pushregs_
1ec28     09 1F 02 F6 | 	mov	local01, arg01
1ec2c     0A 21 02 F6 | 	mov	local02, arg02
1ec30     0B 23 02 F6 | 	mov	local03, arg03
1ec34     0C 25 02 F6 | 	mov	local04, arg04
1ec38     0D 27 02 F6 | 	mov	local05, arg05
1ec3c                 | ' 
1ec3c                 | ' fastline(x1,x2,y1,c)
1ec3c     0F 13 02 F6 | 	mov	arg01, local01
1ec40     11 15 02 F6 | 	mov	arg02, local03
1ec44     10 17 02 F6 | 	mov	arg03, local02
1ec48     13 19 02 F6 | 	mov	arg04, local05
1ec4c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ec50                 | ' fastline(x1,x2,y2,c)
1ec50     0F 13 02 F6 | 	mov	arg01, local01
1ec54     11 15 02 F6 | 	mov	arg02, local03
1ec58     12 17 02 F6 | 	mov	arg03, local04
1ec5c     13 19 02 F6 | 	mov	arg04, local05
1ec60     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ec64                 | ' line(x1,y1,x1,y2,c)
1ec64     0F 13 02 F6 | 	mov	arg01, local01
1ec68     10 15 02 F6 | 	mov	arg02, local02
1ec6c     0F 17 02 F6 | 	mov	arg03, local01
1ec70     12 19 02 F6 | 	mov	arg04, local04
1ec74     13 1B 02 F6 | 	mov	arg05, local05
1ec78                 | ' draw(x1,y1,x2,y2,c)
1ec78     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ec7c                 | ' line(x2,y1,x2,y2,c)
1ec7c     11 13 02 F6 | 	mov	arg01, local03
1ec80     10 15 02 F6 | 	mov	arg02, local02
1ec84     11 17 02 F6 | 	mov	arg03, local03
1ec88     12 19 02 F6 | 	mov	arg04, local04
1ec8c     13 1B 02 F6 | 	mov	arg05, local05
1ec90                 | ' draw(x1,y1,x2,y2,c)
1ec90     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ec94     A7 F0 03 F6 | 	mov	ptra, fp
1ec98     B2 00 A0 FD | 	call	#popregs_
1ec9c                 | _hg010b_spin2_frame_ret
1ec9c     2D 00 64 FD | 	ret
1eca0                 | 
1eca0                 | ' 
1eca0                 | ' '-- A box (a filled rectangle) ----------------------------------------
1eca0                 | ' 
1eca0                 | ' pub box(x1,y1,x2,y2,c) |yy
1eca0                 | _hg010b_spin2_box
1eca0     06 4A 05 F6 | 	mov	COUNT_, #6
1eca4     A8 00 A0 FD | 	call	#pushregs_
1eca8     09 1F 02 F6 | 	mov	local01, arg01
1ecac     0A 21 02 F6 | 	mov	local02, arg02
1ecb0     0B 23 02 F6 | 	mov	local03, arg03
1ecb4     0C 25 02 F6 | 	mov	local04, arg04
1ecb8     0D 27 02 F6 | 	mov	local05, arg05
1ecbc                 | ' 
1ecbc                 | ' repeat yy from y1 to y2
1ecbc     10 25 52 F2 | 	cmps	local04, local02 wc
1ecc0     01 28 86 F6 | 	negc	local06, #1
1ecc4     14 25 02 F1 | 	add	local04, local06
1ecc8                 | LR__2470
1ecc8                 | '   fastline(x1,x2,yy,c)
1ecc8     0F 13 02 F6 | 	mov	arg01, local01
1eccc     11 15 02 F6 | 	mov	arg02, local03
1ecd0     13 19 02 F6 | 	mov	arg04, local05
1ecd4     10 17 02 F6 | 	mov	arg03, local02
1ecd8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ecdc     14 21 02 F1 | 	add	local02, local06
1ece0     12 21 0A F2 | 	cmp	local02, local04 wz
1ece4     E0 FF 9F 5D |  if_ne	jmp	#LR__2470
1ece8     A7 F0 03 F6 | 	mov	ptra, fp
1ecec     B2 00 A0 FD | 	call	#popregs_
1ecf0                 | _hg010b_spin2_box_ret
1ecf0     2D 00 64 FD | 	ret
1ecf4                 | 
1ecf4                 | '       
1ecf4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ecf4                 | _hg010b_spin2_putcharxycgf
1ecf4                 | ' 
1ecf4                 | '  
1ecf4                 | ' repeat yy from 0 to 15
1ecf4     00 00 06 F6 | 	mov	_var01, #0
1ecf8     97 8C 48 FB | 	callpa	#(@LR__2482-@LR__2480)>>2,fcache_load_ptr_
1ecfc                 | LR__2480
1ecfc                 | ' 
1ecfc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ecfc     95 E4 05 F1 | 	add	objptr, #149
1ed00     F2 02 02 FB | 	rdlong	_var02, objptr
1ed04     0A 02 66 F0 | 	shl	_var02, #10
1ed08     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ed0c     01 05 02 F1 | 	add	_var03, _var02
1ed10     0B 03 02 F6 | 	mov	_var02, arg03
1ed14     04 02 66 F0 | 	shl	_var02, #4
1ed18     01 05 02 F1 | 	add	_var03, _var02
1ed1c     00 05 02 F1 | 	add	_var03, _var01
1ed20     02 05 C2 FA | 	rdbyte	_var03, _var03
1ed24                 | '   asm
1ed24     00 04 0E F4 | 	testb	_var03, #0 wz
1ed28     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ed2c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ed30     01 04 0E F4 | 	testb	_var03, #1 wz
1ed34     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ed38     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ed3c     02 04 0E F4 | 	testb	_var03, #2 wz
1ed40     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ed44     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ed48     03 04 0E F4 | 	testb	_var03, #3 wz
1ed4c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ed50     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ed54     04 04 0E F4 | 	testb	_var03, #4 wz
1ed58     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ed5c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ed60     05 04 0E F4 | 	testb	_var03, #5 wz
1ed64     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ed68     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ed6c     06 04 0E F4 | 	testb	_var03, #6 wz
1ed70     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ed74     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ed78     07 04 0E F4 | 	testb	_var03, #7 wz
1ed7c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ed80     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ed84                 | '   
1ed84                 | '   ccc[0]:=c1
1ed84     99 E5 05 F1 | 	add	objptr, #409
1ed88     F2 06 62 FC | 	wrlong	_var04, objptr
1ed8c                 | '   ccc[1]:=c2 
1ed8c     04 E4 05 F1 | 	add	objptr, #4
1ed90     F2 08 62 FC | 	wrlong	_var05, objptr
1ed94                 | '   long[mailbox0][2]:=8
1ed94     49 E4 85 F1 | 	sub	objptr, #73
1ed98     F2 04 02 FB | 	rdlong	_var03, objptr
1ed9c     08 04 06 F1 | 	add	_var03, #8
1eda0     02 11 68 FC | 	wrlong	#8, _var03
1eda4                 | '   long[mailbox0][1]:=@ccc
1eda4     45 E4 05 F1 | 	add	objptr, #69
1eda8     F2 04 02 F6 | 	mov	_var03, objptr
1edac     45 E4 85 F1 | 	sub	objptr, #69
1edb0     F2 02 02 FB | 	rdlong	_var02, objptr
1edb4     04 02 06 F1 | 	add	_var02, #4
1edb8     01 05 62 FC | 	wrlong	_var03, _var02
1edbc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1edbc     0C E5 85 F1 | 	sub	objptr, #268
1edc0     F2 04 02 FB | 	rdlong	_var03, objptr
1edc4     0A 03 02 F6 | 	mov	_var02, arg02
1edc8     00 03 02 F1 | 	add	_var02, _var01
1edcc     0A 02 66 F0 | 	shl	_var02, #10
1edd0     09 0B 02 F6 | 	mov	_var06, arg01
1edd4     02 0A 66 F0 | 	shl	_var06, #2
1edd8     05 03 02 F1 | 	add	_var02, _var06
1eddc     01 05 02 F1 | 	add	_var03, _var02
1ede0     00 00 78 FF 
1ede4     00 04 06 F1 | 	add	_var03, ##-268435456
1ede8     0C E5 05 F1 | 	add	objptr, #268
1edec     F2 0A 02 FB | 	rdlong	_var06, objptr
1edf0     05 05 62 FC | 	wrlong	_var03, _var06
1edf4                 | '   repeat
1edf4                 | LR__2481
1edf4     F2 04 02 FB | 	rdlong	_var03, objptr
1edf8     02 03 02 FB | 	rdlong	_var02, _var03
1edfc     00 02 56 F2 | 	cmps	_var02, #0 wc
1ee00     F0 FF 9F CD |  if_b	jmp	#LR__2481
1ee04     E9 E5 85 F1 | 	sub	objptr, #489
1ee08     01 00 06 F1 | 	add	_var01, #1
1ee0c     10 00 56 F2 | 	cmps	_var01, #16 wc
1ee10     E8 FE 9F CD |  if_b	jmp	#LR__2480
1ee14                 | LR__2482
1ee14                 | _hg010b_spin2_putcharxycgf_ret
1ee14     2D 00 64 FD | 	ret
1ee18                 | 
1ee18                 | ' 
1ee18                 | ' 
1ee18                 | ' '**********************************************************************r***
1ee18                 | ' '                                                                        *
1ee18                 | ' ' Font related functions                                                 *
1ee18                 | ' '                                                                        *
1ee18                 | ' '*************************************************************************
1ee18                 | ' 
1ee18                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ee18                 | ' 
1ee18                 | ' pub setfontfamily(afontnum)
1ee18                 | _hg010b_spin2_setfontfamily
1ee18                 | ' 
1ee18                 | ' font_family:=afontnum
1ee18     95 E4 05 F1 | 	add	objptr, #149
1ee1c     F2 12 62 FC | 	wrlong	arg01, objptr
1ee20     95 E4 85 F1 | 	sub	objptr, #149
1ee24                 | ' 'if afontnum==8
1ee24                 | ' '  font_ptr:=@amiga_font
1ee24                 | ' 
1ee24                 | ' if afontnum==4
1ee24     04 12 0E F2 | 	cmp	arg01, #4 wz
1ee28                 | '   font_ptr:=@st_font
1ee28     08 00 00 AF 
1ee2c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ee30     08 E4 05 A1 |  if_e	add	objptr, #8
1ee34     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ee38     08 E4 85 A1 |  if_e	sub	objptr, #8
1ee3c     08 00 00 AF 
1ee40     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ee44                 | ' if afontnum==0
1ee44     00 12 0E F2 | 	cmp	arg01, #0 wz
1ee48                 | '   font_ptr:=@vga_font
1ee48     08 E4 05 A1 |  if_e	add	objptr, #8
1ee4c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ee50     08 E4 85 A1 |  if_e	sub	objptr, #8
1ee54                 | _hg010b_spin2_setfontfamily_ret
1ee54     2D 00 64 FD | 	ret
1ee58                 | 
1ee58                 | ' 
1ee58                 | ' '*************************************************************************
1ee58                 | ' '                                                                        *
1ee58                 | ' '  Cursor functions                                                      *
1ee58                 | ' '                                                                        *
1ee58                 | ' '*************************************************************************
1ee58                 | ' 
1ee58                 | ' 
1ee58                 | ' pub setcursorpos(x,y)
1ee58                 | _hg010b_spin2_setcursorpos
1ee58                 | ' 
1ee58                 | ' ''---------- Set the (x,y) position of cursor
1ee58                 | ' 
1ee58                 | ' cursor_x:=x
1ee58     3C E4 05 F1 | 	add	objptr, #60
1ee5c     F2 12 52 FC | 	wrword	arg01, objptr
1ee60                 | ' cursor_y:=y
1ee60     02 E4 05 F1 | 	add	objptr, #2
1ee64     F2 14 42 FC | 	wrbyte	arg02, objptr
1ee68                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ee68     02 E4 85 F1 | 	sub	objptr, #2
1ee6c     F2 14 E2 FA | 	rdword	arg02, objptr
1ee70     02 14 66 F0 | 	shl	arg02, #2
1ee74     02 E4 05 F1 | 	add	objptr, #2
1ee78     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ee7c     3E E4 85 F1 | 	sub	objptr, #62
1ee80     04 16 66 F0 | 	shl	arg03, #4
1ee84     04 16 06 F1 | 	add	arg03, #4
1ee88     11 12 06 F6 | 	mov	arg01, #17
1ee8c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ee90                 | _hg010b_spin2_setcursorpos_ret
1ee90     2D 00 64 FD | 	ret
1ee94                 | 
1ee94                 | ' 
1ee94                 | ' pub setcursorx(x)
1ee94                 | _hg010b_spin2_setcursorx
1ee94                 | ' cursor_x:=x
1ee94     3C E4 05 F1 | 	add	objptr, #60
1ee98     F2 12 52 FC | 	wrword	arg01, objptr
1ee9c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ee9c     F2 14 E2 FA | 	rdword	arg02, objptr
1eea0     02 14 66 F0 | 	shl	arg02, #2
1eea4     02 E4 05 F1 | 	add	objptr, #2
1eea8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1eeac     3E E4 85 F1 | 	sub	objptr, #62
1eeb0     04 16 66 F0 | 	shl	arg03, #4
1eeb4     04 16 06 F1 | 	add	arg03, #4
1eeb8     11 12 06 F6 | 	mov	arg01, #17
1eebc     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1eec0                 | _hg010b_spin2_setcursorx_ret
1eec0     2D 00 64 FD | 	ret
1eec4                 | 
1eec4                 | ' 
1eec4                 | ' pub setcursory(y) 
1eec4                 | _hg010b_spin2_setcursory
1eec4                 | ' cursor_y:=y
1eec4     3E E4 05 F1 | 	add	objptr, #62
1eec8     F2 12 42 FC | 	wrbyte	arg01, objptr
1eecc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1eecc     02 E4 85 F1 | 	sub	objptr, #2
1eed0     F2 14 E2 FA | 	rdword	arg02, objptr
1eed4     02 14 66 F0 | 	shl	arg02, #2
1eed8     02 E4 05 F1 | 	add	objptr, #2
1eedc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1eee0     3E E4 85 F1 | 	sub	objptr, #62
1eee4     04 16 66 F0 | 	shl	arg03, #4
1eee8     04 16 06 F1 | 	add	arg03, #4
1eeec     11 12 06 F6 | 	mov	arg01, #17
1eef0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1eef4                 | _hg010b_spin2_setcursory_ret
1eef4     2D 00 64 FD | 	ret
1eef8                 | 
1eef8                 | ' 
1eef8                 | ' '*************************************************************************
1eef8                 | ' '                                                                        *
1eef8                 | ' '  VBlank functions                                                      *
1eef8                 | ' '                                                                        *
1eef8                 | ' '*************************************************************************
1eef8                 | ' 
1eef8                 | ' pub waitvbl(amount) | i
1eef8                 | _hg010b_spin2_waitvbl
1eef8     03 4A 05 F6 | 	mov	COUNT_, #3
1eefc     A8 00 A0 FD | 	call	#pushregs_
1ef00     09 1F 02 F6 | 	mov	local01, arg01
1ef04                 | ' 
1ef04                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1ef04                 | ' 
1ef04                 | ' repeat i from 1 to amount
1ef04     01 20 06 F6 | 	mov	local02, #1
1ef08     01 1E 56 F2 | 	cmps	local01, #1 wc
1ef0c     01 22 86 F6 | 	negc	local03, #1
1ef10     11 1F 02 F1 | 	add	local01, local03
1ef14                 | LR__2490
1ef14                 | '   repeat until vblank==0
1ef14                 | LR__2491
1ef14     49 E4 05 F1 | 	add	objptr, #73
1ef18     F2 12 0A FB | 	rdlong	arg01, objptr wz
1ef1c     49 E4 85 F1 | 	sub	objptr, #73
1ef20     0C 00 90 AD |  if_e	jmp	#LR__2492
1ef24                 | '     waitus(100)
1ef24     64 12 06 F6 | 	mov	arg01, #100
1ef28     78 1C B0 FD | 	call	#__system___waitus
1ef2c     E4 FF 9F FD | 	jmp	#LR__2491
1ef30                 | LR__2492
1ef30                 | '   repeat until vblank==1
1ef30                 | LR__2493
1ef30     49 E4 05 F1 | 	add	objptr, #73
1ef34     F2 12 02 FB | 	rdlong	arg01, objptr
1ef38     49 E4 85 F1 | 	sub	objptr, #73
1ef3c     01 12 0E F2 | 	cmp	arg01, #1 wz
1ef40     0C 00 90 AD |  if_e	jmp	#LR__2494
1ef44                 | '     waitus(100)
1ef44     64 12 06 F6 | 	mov	arg01, #100
1ef48     58 1C B0 FD | 	call	#__system___waitus
1ef4c     E0 FF 9F FD | 	jmp	#LR__2493
1ef50                 | LR__2494
1ef50     11 21 02 F1 | 	add	local02, local03
1ef54     0F 21 0A F2 | 	cmp	local02, local01 wz
1ef58     B8 FF 9F 5D |  if_ne	jmp	#LR__2490
1ef5c     A7 F0 03 F6 | 	mov	ptra, fp
1ef60     B2 00 A0 FD | 	call	#popregs_
1ef64                 | _hg010b_spin2_waitvbl_ret
1ef64     2D 00 64 FD | 	ret
1ef68                 | 
1ef68                 | ' 
1ef68                 | ' 
1ef68                 | ' pub cls(fc,bc)   :c,i
1ef68                 | _hg010b_spin2_cls
1ef68     02 4A 05 F6 | 	mov	COUNT_, #2
1ef6c     A8 00 A0 FD | 	call	#pushregs_
1ef70     09 1F 02 F6 | 	mov	local01, arg01
1ef74     0A 21 02 F6 | 	mov	local02, arg02
1ef78                 | ' 
1ef78                 | ' c:=bc
1ef78                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1ef78     DD E4 05 F1 | 	add	objptr, #221
1ef7c     F2 12 02 FB | 	rdlong	arg01, objptr
1ef80     A5 E4 85 F1 | 	sub	objptr, #165
1ef84     F2 16 02 FB | 	rdlong	arg03, objptr
1ef88     02 16 66 F0 | 	shl	arg03, #2
1ef8c     10 15 02 F6 | 	mov	arg02, local02
1ef90     00 18 06 F6 | 	mov	arg04, #0
1ef94     01 1A 06 F6 | 	mov	arg05, #1
1ef98     0B 00 00 FF 
1ef9c     94 E4 05 F1 | 	add	objptr, ##5780
1efa0     98 0D B0 FD | 	call	#_psram_spin2_fill
1efa4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1efa4     0B 00 00 FF 
1efa8     C8 E4 85 F1 | 	sub	objptr, ##5832
1efac     F2 12 02 FB | 	rdlong	arg01, objptr
1efb0     04 E4 85 F1 | 	sub	objptr, #4
1efb4     F2 16 02 FB | 	rdlong	arg03, objptr
1efb8     09 17 82 F1 | 	sub	arg03, arg01
1efbc     20 14 06 F6 | 	mov	arg02, #32
1efc0     00 18 06 F6 | 	mov	arg04, #0
1efc4     01 1A 06 F6 | 	mov	arg05, #1
1efc8     0B 00 00 FF 
1efcc     CC E4 05 F1 | 	add	objptr, ##5836
1efd0     68 0D B0 FD | 	call	#_psram_spin2_fill
1efd4                 | ' setwritecolors(fc,bc)
1efd4                 | ' 
1efd4                 | ' write_color:=ff
1efd4     0B 00 00 FF 
1efd8     8B E4 85 F1 | 	sub	objptr, ##5771
1efdc     F2 1E 62 FC | 	wrlong	local01, objptr
1efe0                 | ' write_background:=bb
1efe0     04 E4 05 F1 | 	add	objptr, #4
1efe4     F2 20 62 FC | 	wrlong	local02, objptr
1efe8                 | ' cursor_x:=0
1efe8     09 E4 85 F1 | 	sub	objptr, #9
1efec     F2 00 58 FC | 	wrword	#0, objptr
1eff0                 | ' cursor_y:=0
1eff0     02 E4 05 F1 | 	add	objptr, #2
1eff4     F2 00 48 FC | 	wrbyte	#0, objptr
1eff8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1eff8     02 E4 85 F1 | 	sub	objptr, #2
1effc     F2 14 E2 FA | 	rdword	arg02, objptr
1f000     02 14 66 F0 | 	shl	arg02, #2
1f004     02 E4 05 F1 | 	add	objptr, #2
1f008     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f00c     3E E4 85 F1 | 	sub	objptr, #62
1f010     04 16 66 F0 | 	shl	arg03, #4
1f014     04 16 06 F1 | 	add	arg03, #4
1f018     11 12 06 F6 | 	mov	arg01, #17
1f01c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f020                 | ' setcursorcolor(fc)
1f020     0F 13 02 F6 | 	mov	arg01, local01
1f024     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f028     10 FB 01 F6 | 	mov	result1, local02
1f02c     00 FC 05 F6 | 	mov	result2, #0
1f030     A7 F0 03 F6 | 	mov	ptra, fp
1f034     B2 00 A0 FD | 	call	#popregs_
1f038                 | _hg010b_spin2_cls_ret
1f038     2D 00 64 FD | 	ret
1f03c                 | 
1f03c                 | ' 
1f03c                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f03c                 | ' 
1f03c                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f03c                 | _hg010b_spin2_putchar
1f03c     02 4A 05 F6 | 	mov	COUNT_, #2
1f040     A8 00 A0 FD | 	call	#pushregs_
1f044     09 1F 02 F6 | 	mov	local01, arg01
1f048                 | ' 
1f048                 | ' if achar==10
1f048     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f04c                 | '   crlf()
1f04c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f050                 | ' if achar==9
1f050     09 1E 0E F2 | 	cmp	local01, #9 wz
1f054     18 00 90 5D |  if_ne	jmp	#LR__2500
1f058                 | '   cursor_x:=(cursor_x& %11110000)+16
1f058     3C E4 05 F1 | 	add	objptr, #60
1f05c     F2 16 E2 FA | 	rdword	arg03, objptr
1f060     F0 16 06 F5 | 	and	arg03, #240
1f064     10 16 06 F1 | 	add	arg03, #16
1f068     F2 16 52 FC | 	wrword	arg03, objptr
1f06c     3C E4 85 F1 | 	sub	objptr, #60
1f070                 | LR__2500
1f070                 | '   
1f070                 | ' if (achar<>9) && (achar<>10) 
1f070     09 1E 0E F2 | 	cmp	local01, #9 wz
1f074     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f078     A8 00 90 AD |  if_e	jmp	#LR__2501
1f07c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f07c     3C E4 05 F1 | 	add	objptr, #60
1f080     F2 12 E2 FA | 	rdword	arg01, objptr
1f084     02 E4 05 F1 | 	add	objptr, #2
1f088     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f08c     04 14 66 F0 | 	shl	arg02, #4
1f090     04 14 06 F1 | 	add	arg02, #4
1f094     03 E4 05 F1 | 	add	objptr, #3
1f098     F2 18 02 FB | 	rdlong	arg04, objptr
1f09c     04 E4 05 F1 | 	add	objptr, #4
1f0a0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f0a4     45 E4 85 F1 | 	sub	objptr, #69
1f0a8     0F 17 02 F6 | 	mov	arg03, local01
1f0ac     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f0b0     04 E4 05 F1 | 	add	objptr, #4
1f0b4     F2 12 02 FB | 	rdlong	arg01, objptr
1f0b8     10 00 00 FF 
1f0bc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f0c0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f0c4     3A E4 05 F1 | 	add	objptr, #58
1f0c8     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f0cc     0D 17 02 FD | 	qmul	arg03, arg05
1f0d0                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f0d0     10 00 00 FF 
1f0d4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f0d8     02 E4 85 F1 | 	sub	objptr, #2
1f0dc     F2 20 E2 FA | 	rdword	local02, objptr
1f0e0     01 20 46 F0 | 	shr	local02, #1
1f0e4     0F 15 02 F6 | 	mov	arg02, local01
1f0e8     01 16 06 F6 | 	mov	arg03, #1
1f0ec     00 18 06 F6 | 	mov	arg04, #0
1f0f0     01 1A 06 F6 | 	mov	arg05, #1
1f0f4     0B 00 00 FF 
1f0f8     90 E4 05 F1 | 	add	objptr, ##5776
1f0fc     18 1E 62 FD | 	getqx	local01
1f100     10 1F 02 F1 | 	add	local01, local02
1f104     0F 13 02 F1 | 	add	arg01, local01
1f108     30 0C B0 FD | 	call	#_psram_spin2_fill
1f10c                 | '   cursor_x+=2
1f10c     0B 00 00 FF 
1f110     90 E4 85 F1 | 	sub	objptr, ##5776
1f114     F2 20 E2 FA | 	rdword	local02, objptr
1f118     02 20 06 F1 | 	add	local02, #2
1f11c     F2 20 52 FC | 	wrword	local02, objptr
1f120     3C E4 85 F1 | 	sub	objptr, #60
1f124                 | LR__2501
1f124                 | ' 
1f124                 | ' if cursor_x>=256
1f124     3C E4 05 F1 | 	add	objptr, #60
1f128     F2 20 E2 FA | 	rdword	local02, objptr
1f12c     3C E4 85 F1 | 	sub	objptr, #60
1f130     00 21 56 F2 | 	cmps	local02, #256 wc
1f134     64 00 90 CD |  if_b	jmp	#LR__2503
1f138                 | '   cursor_x:=0
1f138     3C E4 05 F1 | 	add	objptr, #60
1f13c     F2 00 58 FC | 	wrword	#0, objptr
1f140                 | '   cursor_y+=1
1f140     02 E4 05 F1 | 	add	objptr, #2
1f144     F2 20 C2 FA | 	rdbyte	local02, objptr
1f148     01 20 06 F1 | 	add	local02, #1
1f14c     F2 20 42 FC | 	wrbyte	local02, objptr
1f150                 | '   if cursor_y>st_lines-1
1f150     C3 E4 05 F1 | 	add	objptr, #195
1f154     F2 20 02 FB | 	rdlong	local02, objptr
1f158     01 20 86 F1 | 	sub	local02, #1
1f15c     C3 E4 85 F1 | 	sub	objptr, #195
1f160     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f164     3E E4 85 F1 | 	sub	objptr, #62
1f168     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f16c     2C 00 90 ED |  if_be	jmp	#LR__2502
1f170                 | '     scrollup2()
1f170     00 12 06 F6 | 	mov	arg01, #0
1f174     01 00 00 FF 
1f178     58 14 06 F6 | 	mov	arg02, ##600
1f17c     10 16 06 F6 | 	mov	arg03, #16
1f180     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f184                 | '     cursor_y:=st_lines-1
1f184     01 E5 05 F1 | 	add	objptr, #257
1f188     F2 20 02 FB | 	rdlong	local02, objptr
1f18c     01 20 86 F1 | 	sub	local02, #1
1f190     C3 E4 85 F1 | 	sub	objptr, #195
1f194     F2 20 42 FC | 	wrbyte	local02, objptr
1f198     3E E4 85 F1 | 	sub	objptr, #62
1f19c                 | LR__2502
1f19c                 | LR__2503
1f19c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f19c     3C E4 05 F1 | 	add	objptr, #60
1f1a0     F2 14 E2 FA | 	rdword	arg02, objptr
1f1a4     02 14 66 F0 | 	shl	arg02, #2
1f1a8     02 E4 05 F1 | 	add	objptr, #2
1f1ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f1b0     3E E4 85 F1 | 	sub	objptr, #62
1f1b4     04 16 66 F0 | 	shl	arg03, #4
1f1b8     04 16 06 F1 | 	add	arg03, #4
1f1bc     11 12 06 F6 | 	mov	arg01, #17
1f1c0     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f1c4     A7 F0 03 F6 | 	mov	ptra, fp
1f1c8     B2 00 A0 FD | 	call	#popregs_
1f1cc                 | _hg010b_spin2_putchar_ret
1f1cc     2D 00 64 FD | 	ret
1f1d0                 | 
1f1d0                 | '     
1f1d0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f1d0                 | ' 
1f1d0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f1d0                 | _hg010b_spin2_putchar2
1f1d0     02 4A 05 F6 | 	mov	COUNT_, #2
1f1d4     A8 00 A0 FD | 	call	#pushregs_
1f1d8     09 1F 02 F6 | 	mov	local01, arg01
1f1dc                 | ' 
1f1dc                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f1dc     3C E4 05 F1 | 	add	objptr, #60
1f1e0     F2 12 E2 FA | 	rdword	arg01, objptr
1f1e4     02 E4 05 F1 | 	add	objptr, #2
1f1e8     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f1ec     04 14 66 F0 | 	shl	arg02, #4
1f1f0     04 14 06 F1 | 	add	arg02, #4
1f1f4     03 E4 05 F1 | 	add	objptr, #3
1f1f8     F2 18 02 FB | 	rdlong	arg04, objptr
1f1fc     04 E4 05 F1 | 	add	objptr, #4
1f200     F2 1A 02 FB | 	rdlong	arg05, objptr
1f204     45 E4 85 F1 | 	sub	objptr, #69
1f208     0F 17 02 F6 | 	mov	arg03, local01
1f20c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f210     04 E4 05 F1 | 	add	objptr, #4
1f214     F2 12 02 FB | 	rdlong	arg01, objptr
1f218     10 00 00 FF 
1f21c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f220     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f224     3A E4 05 F1 | 	add	objptr, #58
1f228     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f22c     0D 17 02 FD | 	qmul	arg03, arg05
1f230                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f230     10 00 00 FF 
1f234     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f238     02 E4 85 F1 | 	sub	objptr, #2
1f23c     F2 20 E2 FA | 	rdword	local02, objptr
1f240     01 20 46 F0 | 	shr	local02, #1
1f244     0F 15 02 F6 | 	mov	arg02, local01
1f248     01 16 06 F6 | 	mov	arg03, #1
1f24c     00 18 06 F6 | 	mov	arg04, #0
1f250     01 1A 06 F6 | 	mov	arg05, #1
1f254     0B 00 00 FF 
1f258     90 E4 05 F1 | 	add	objptr, ##5776
1f25c     18 1E 62 FD | 	getqx	local01
1f260     10 1F 02 F1 | 	add	local01, local02
1f264     0F 13 02 F1 | 	add	arg01, local01
1f268     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f26c                 | ' 
1f26c                 | ' cursor_x+=2
1f26c     0B 00 00 FF 
1f270     90 E4 85 F1 | 	sub	objptr, ##5776
1f274     F2 20 E2 FA | 	rdword	local02, objptr
1f278     02 20 06 F1 | 	add	local02, #2
1f27c     F2 20 52 FC | 	wrword	local02, objptr
1f280                 | ' if cursor_x>=256
1f280     F2 20 E2 FA | 	rdword	local02, objptr
1f284     3C E4 85 F1 | 	sub	objptr, #60
1f288     00 21 56 F2 | 	cmps	local02, #256 wc
1f28c     64 00 90 CD |  if_b	jmp	#LR__2511
1f290                 | '   cursor_x:=0
1f290     3C E4 05 F1 | 	add	objptr, #60
1f294     F2 00 58 FC | 	wrword	#0, objptr
1f298                 | '   cursor_y+=1
1f298     02 E4 05 F1 | 	add	objptr, #2
1f29c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f2a0     01 20 06 F1 | 	add	local02, #1
1f2a4     F2 20 42 FC | 	wrbyte	local02, objptr
1f2a8                 | '   if cursor_y>st_lines-1
1f2a8     C3 E4 05 F1 | 	add	objptr, #195
1f2ac     F2 20 02 FB | 	rdlong	local02, objptr
1f2b0     01 20 86 F1 | 	sub	local02, #1
1f2b4     C3 E4 85 F1 | 	sub	objptr, #195
1f2b8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2bc     3E E4 85 F1 | 	sub	objptr, #62
1f2c0     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f2c4     2C 00 90 ED |  if_be	jmp	#LR__2510
1f2c8                 | '     scrollup2()
1f2c8     00 12 06 F6 | 	mov	arg01, #0
1f2cc     01 00 00 FF 
1f2d0     58 14 06 F6 | 	mov	arg02, ##600
1f2d4     10 16 06 F6 | 	mov	arg03, #16
1f2d8     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f2dc                 | '     cursor_y:=st_lines-1
1f2dc     01 E5 05 F1 | 	add	objptr, #257
1f2e0     F2 20 02 FB | 	rdlong	local02, objptr
1f2e4     01 20 86 F1 | 	sub	local02, #1
1f2e8     C3 E4 85 F1 | 	sub	objptr, #195
1f2ec     F2 20 42 FC | 	wrbyte	local02, objptr
1f2f0     3E E4 85 F1 | 	sub	objptr, #62
1f2f4                 | LR__2510
1f2f4                 | LR__2511
1f2f4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f2f4     3C E4 05 F1 | 	add	objptr, #60
1f2f8     F2 14 E2 FA | 	rdword	arg02, objptr
1f2fc     02 14 66 F0 | 	shl	arg02, #2
1f300     02 E4 05 F1 | 	add	objptr, #2
1f304     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f308     3E E4 85 F1 | 	sub	objptr, #62
1f30c     04 16 66 F0 | 	shl	arg03, #4
1f310     04 16 06 F1 | 	add	arg03, #4
1f314     11 12 06 F6 | 	mov	arg01, #17
1f318     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f31c     A7 F0 03 F6 | 	mov	ptra, fp
1f320     B2 00 A0 FD | 	call	#popregs_
1f324                 | _hg010b_spin2_putchar2_ret
1f324     2D 00 64 FD | 	ret
1f328                 | 
1f328                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f328                 | ' 
1f328                 | ' pub write(text) | iii,c,ncx,ncy
1f328                 | _hg010b_spin2_write
1f328     04 4A 05 F6 | 	mov	COUNT_, #4
1f32c     A8 00 A0 FD | 	call	#pushregs_
1f330     09 1F 02 F6 | 	mov	local01, arg01
1f334                 | ' 
1f334                 | ' repeat iii from 0 to strsize(text)-1
1f334     00 20 06 F6 | 	mov	local02, #0
1f338     0F 13 02 F6 | 	mov	arg01, local01
1f33c     09 23 02 F6 | 	mov	local03, arg01
1f340     97 06 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1f344                 | LR__2520
1f344     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f348     01 22 06 51 |  if_ne	add	local03, #1
1f34c     F4 FF 9F 5D |  if_ne	jmp	#LR__2520
1f350                 | LR__2521
1f350     09 23 82 F1 | 	sub	local03, arg01
1f354     01 22 86 F1 | 	sub	local03, #1
1f358     00 22 56 F2 | 	cmps	local03, #0 wc
1f35c     01 24 86 F6 | 	negc	local04, #1
1f360     12 23 02 F1 | 	add	local03, local04
1f364                 | LR__2522
1f364                 | '   putchar2(byte[text+iii])
1f364     0F 13 02 F6 | 	mov	arg01, local01
1f368     10 13 02 F1 | 	add	arg01, local02
1f36c     09 13 C2 FA | 	rdbyte	arg01, arg01
1f370     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f374     12 21 02 F1 | 	add	local02, local04
1f378     11 21 0A F2 | 	cmp	local02, local03 wz
1f37c     E4 FF 9F 5D |  if_ne	jmp	#LR__2522
1f380     A7 F0 03 F6 | 	mov	ptra, fp
1f384     B2 00 A0 FD | 	call	#popregs_
1f388                 | _hg010b_spin2_write_ret
1f388     2D 00 64 FD | 	ret
1f38c                 | 
1f38c                 | '    
1f38c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f38c                 | ' 
1f38c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f38c                 | _hg010b_spin2_scrollup2
1f38c     03 4A 05 F6 | 	mov	COUNT_, #3
1f390     A8 00 A0 FD | 	call	#pushregs_
1f394                 | ' 	
1f394                 | ' repeat i from 4 to 579 
1f394     04 1E 06 F6 | 	mov	local01, #4
1f398                 | LR__2530
1f398     F9 E4 05 F1 | 	add	objptr, #249
1f39c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3a0     1C E4 85 F1 | 	sub	objptr, #28
1f3a4     F2 14 02 FB | 	rdlong	arg02, objptr
1f3a8     0F 19 02 F6 | 	mov	arg04, local01
1f3ac     10 18 06 F1 | 	add	arg04, #16
1f3b0     02 18 66 F0 | 	shl	arg04, #2
1f3b4     14 E4 05 F1 | 	add	objptr, #20
1f3b8     F2 16 02 FB | 	rdlong	arg03, objptr
1f3bc     0B 19 02 FD | 	qmul	arg04, arg03
1f3c0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f3c0     F6 03 00 FF 
1f3c4     00 12 06 F6 | 	mov	arg01, ##519168
1f3c8     0D 13 82 F1 | 	sub	arg01, arg05
1f3cc     02 16 66 F0 | 	shl	arg03, #2
1f3d0     0A 00 00 FF 
1f3d4     DB E5 05 F1 | 	add	objptr, ##5595
1f3d8     18 1A 62 FD | 	getqx	arg05
1f3dc     0D 15 02 F1 | 	add	arg02, arg05
1f3e0     20 08 B0 FD | 	call	#_psram_spin2_read1
1f3e4     0A 00 00 FF 
1f3e8     D3 E5 85 F1 | 	sub	objptr, ##5587
1f3ec     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3f0     1C E4 85 F1 | 	sub	objptr, #28
1f3f4     F2 14 02 FB | 	rdlong	arg02, objptr
1f3f8     0F 19 02 F6 | 	mov	arg04, local01
1f3fc     02 18 66 F0 | 	shl	arg04, #2
1f400     14 E4 05 F1 | 	add	objptr, #20
1f404     F2 16 02 FB | 	rdlong	arg03, objptr
1f408     0B 19 02 FD | 	qmul	arg04, arg03
1f40c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f40c     F6 03 00 FF 
1f410     00 12 06 F6 | 	mov	arg01, ##519168
1f414     0D 13 82 F1 | 	sub	arg01, arg05
1f418     02 16 66 F0 | 	shl	arg03, #2
1f41c     0A 00 00 FF 
1f420     DB E5 05 F1 | 	add	objptr, ##5595
1f424     18 1A 62 FD | 	getqx	arg05
1f428     0D 15 02 F1 | 	add	arg02, arg05
1f42c     70 08 B0 FD | 	call	#_psram_spin2_write
1f430     0B 00 00 FF 
1f434     CC E4 85 F1 | 	sub	objptr, ##5836
1f438     01 1E 06 F1 | 	add	local01, #1
1f43c     01 00 00 FF 
1f440     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f444     50 FF 9F CD |  if_b	jmp	#LR__2530
1f448                 | ' 
1f448                 | ' repeat i from 580 to 599
1f448     01 00 00 FF 
1f44c     44 1E 06 F6 | 	mov	local01, ##580
1f450                 | LR__2531
1f450                 | '    fastline(0,1023,i,write_background)   
1f450     45 E4 05 F1 | 	add	objptr, #69
1f454     F2 18 02 FB | 	rdlong	arg04, objptr
1f458     45 E4 85 F1 | 	sub	objptr, #69
1f45c     00 12 06 F6 | 	mov	arg01, #0
1f460     09 14 CE F9 | 	bmask	arg02, #9
1f464     0F 17 02 F6 | 	mov	arg03, local01
1f468     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f46c     01 1E 06 F1 | 	add	local01, #1
1f470     01 00 00 FF 
1f474     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f478     D4 FF 9F CD |  if_b	jmp	#LR__2531
1f47c                 | ' repeat i from 0 to 3
1f47c     00 1E 06 F6 | 	mov	local01, #0
1f480                 | LR__2532
1f480                 | '    fastline(0,1023,i,write_background)      
1f480     45 E4 05 F1 | 	add	objptr, #69
1f484     F2 18 02 FB | 	rdlong	arg04, objptr
1f488     45 E4 85 F1 | 	sub	objptr, #69
1f48c     00 12 06 F6 | 	mov	arg01, #0
1f490     09 14 CE F9 | 	bmask	arg02, #9
1f494     0F 17 02 F6 | 	mov	arg03, local01
1f498     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f49c     01 1E 06 F1 | 	add	local01, #1
1f4a0     04 1E 56 F2 | 	cmps	local01, #4 wc
1f4a4     D8 FF 9F CD |  if_b	jmp	#LR__2532
1f4a8                 | ' 
1f4a8                 | ' repeat i from 0 to 35
1f4a8     00 1E 06 F6 | 	mov	local01, #0
1f4ac                 | LR__2533
1f4ac     0F 1B 02 F6 | 	mov	arg05, local01
1f4b0     01 1A 06 F1 | 	add	arg05, #1
1f4b4     10 00 00 FF 
1f4b8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f4bc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f4c0     0B 1B 02 FD | 	qmul	arg05, arg03
1f4c4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f4c4     F6 03 00 FF 
1f4c8     00 12 06 F6 | 	mov	arg01, ##519168
1f4cc     F9 E4 05 F1 | 	add	objptr, #249
1f4d0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4d4     0D 13 82 F1 | 	sub	arg01, arg05
1f4d8     F5 E4 85 F1 | 	sub	objptr, #245
1f4dc     F2 14 02 FB | 	rdlong	arg02, objptr
1f4e0     10 00 00 FF 
1f4e4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f4e8     0B 00 00 FF 
1f4ec     C8 E4 05 F1 | 	add	objptr, ##5832
1f4f0     18 1A 62 FD | 	getqx	arg05
1f4f4     0D 15 02 F1 | 	add	arg02, arg05
1f4f8     08 07 B0 FD | 	call	#_psram_spin2_read1
1f4fc     10 00 00 FF 
1f500     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f504     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f508     0B 1F 02 FD | 	qmul	local01, arg03
1f50c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f50c     F6 03 00 FF 
1f510     00 12 06 F6 | 	mov	arg01, ##519168
1f514     0A 00 00 FF 
1f518     D3 E5 85 F1 | 	sub	objptr, ##5587
1f51c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f520     0D 13 82 F1 | 	sub	arg01, arg05
1f524     F5 E4 85 F1 | 	sub	objptr, #245
1f528     F2 14 02 FB | 	rdlong	arg02, objptr
1f52c     10 00 00 FF 
1f530     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f534     0B 00 00 FF 
1f538     C8 E4 05 F1 | 	add	objptr, ##5832
1f53c     18 1A 62 FD | 	getqx	arg05
1f540     0D 15 02 F1 | 	add	arg02, arg05
1f544     58 07 B0 FD | 	call	#_psram_spin2_write
1f548     0B 00 00 FF 
1f54c     CC E4 85 F1 | 	sub	objptr, ##5836
1f550     01 1E 06 F1 | 	add	local01, #1
1f554     24 1E 56 F2 | 	cmps	local01, #36 wc
1f558     50 FF 9F CD |  if_b	jmp	#LR__2533
1f55c                 | ' repeat i from 0 to timings[7]-1
1f55c     00 1E 06 F6 | 	mov	local01, #0
1f560     10 00 00 FF 
1f564     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f568     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f56c     10 00 00 FF 
1f570     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f574     01 20 86 F1 | 	sub	local02, #1
1f578     00 20 56 F2 | 	cmps	local02, #0 wc
1f57c     01 22 86 F6 | 	negc	local03, #1
1f580     11 21 02 F1 | 	add	local02, local03
1f584                 | LR__2534
1f584                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f584     04 E4 05 F1 | 	add	objptr, #4
1f588     F2 12 02 FB | 	rdlong	arg01, objptr
1f58c     10 00 00 FF 
1f590     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f594     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f598     10 00 00 FF 
1f59c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f5a0     0D 19 02 F6 | 	mov	arg04, arg05
1f5a4     03 18 66 F0 | 	shl	arg04, #3
1f5a8     0D 19 02 F1 | 	add	arg04, arg05
1f5ac     02 18 66 F0 | 	shl	arg04, #2
1f5b0     0F 19 02 F1 | 	add	arg04, local01
1f5b4     0C 13 02 F1 | 	add	arg01, arg04
1f5b8     20 14 06 F6 | 	mov	arg02, #32
1f5bc     01 16 06 F6 | 	mov	arg03, #1
1f5c0     00 18 06 F6 | 	mov	arg04, #0
1f5c4     01 1A 06 F6 | 	mov	arg05, #1
1f5c8     0B 00 00 FF 
1f5cc     C8 E4 05 F1 | 	add	objptr, ##5832
1f5d0     68 07 B0 FD | 	call	#_psram_spin2_fill
1f5d4     0B 00 00 FF 
1f5d8     CC E4 85 F1 | 	sub	objptr, ##5836
1f5dc     11 1F 02 F1 | 	add	local01, local03
1f5e0     10 1F 0A F2 | 	cmp	local01, local02 wz
1f5e4     9C FF 9F 5D |  if_ne	jmp	#LR__2534
1f5e8     A7 F0 03 F6 | 	mov	ptra, fp
1f5ec     B2 00 A0 FD | 	call	#popregs_
1f5f0                 | _hg010b_spin2_scrollup2_ret
1f5f0     2D 00 64 FD | 	ret
1f5f4                 | 
1f5f4                 | '  
1f5f4                 | ' ''----------- Scroll the screen one line down 
1f5f4                 | ' 
1f5f4                 | ' pub scrolldown(start=0) | i
1f5f4                 | _hg010b_spin2_scrolldown
1f5f4     05 4A 05 F6 | 	mov	COUNT_, #5
1f5f8     A8 00 A0 FD | 	call	#pushregs_
1f5fc     09 1F 02 F6 | 	mov	local01, arg01
1f600                 | ' 
1f600                 | ' repeat i from 579 to (start*16)+4
1f600     01 00 00 FF 
1f604     43 20 06 F6 | 	mov	local02, ##579
1f608     0F 23 02 F6 | 	mov	local03, local01
1f60c     04 22 66 F0 | 	shl	local03, #4
1f610     04 22 06 F1 | 	add	local03, #4
1f614     01 00 00 FF 
1f618     43 22 56 F2 | 	cmps	local03, ##579 wc
1f61c     01 24 86 F6 | 	negc	local04, #1
1f620     12 27 02 F6 | 	mov	local05, local04
1f624     12 23 02 F1 | 	add	local03, local04
1f628                 | LR__2540
1f628     F9 E4 05 F1 | 	add	objptr, #249
1f62c     F2 24 02 FB | 	rdlong	local04, objptr
1f630     1C E4 85 F1 | 	sub	objptr, #28
1f634     F2 14 02 FB | 	rdlong	arg02, objptr
1f638     10 1B 02 F6 | 	mov	arg05, local02
1f63c     02 1A 66 F0 | 	shl	arg05, #2
1f640     14 E4 05 F1 | 	add	objptr, #20
1f644     F2 16 02 FB | 	rdlong	arg03, objptr
1f648     0B 1B 02 FD | 	qmul	arg05, arg03
1f64c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f64c     F6 03 00 FF 
1f650     00 12 06 F6 | 	mov	arg01, ##519168
1f654     12 13 82 F1 | 	sub	arg01, local04
1f658     02 16 66 F0 | 	shl	arg03, #2
1f65c     0A 00 00 FF 
1f660     DB E5 05 F1 | 	add	objptr, ##5595
1f664     18 24 62 FD | 	getqx	local04
1f668     12 15 02 F1 | 	add	arg02, local04
1f66c     94 05 B0 FD | 	call	#_psram_spin2_read1
1f670     0A 00 00 FF 
1f674     D3 E5 85 F1 | 	sub	objptr, ##5587
1f678     F2 24 02 FB | 	rdlong	local04, objptr
1f67c     1C E4 85 F1 | 	sub	objptr, #28
1f680     F2 14 02 FB | 	rdlong	arg02, objptr
1f684     10 1B 02 F6 | 	mov	arg05, local02
1f688     10 1A 06 F1 | 	add	arg05, #16
1f68c     02 1A 66 F0 | 	shl	arg05, #2
1f690     14 E4 05 F1 | 	add	objptr, #20
1f694     F2 16 02 FB | 	rdlong	arg03, objptr
1f698     0B 1B 02 FD | 	qmul	arg05, arg03
1f69c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f69c     F6 03 00 FF 
1f6a0     00 12 06 F6 | 	mov	arg01, ##519168
1f6a4     12 13 82 F1 | 	sub	arg01, local04
1f6a8     02 16 66 F0 | 	shl	arg03, #2
1f6ac     0A 00 00 FF 
1f6b0     DB E5 05 F1 | 	add	objptr, ##5595
1f6b4     18 24 62 FD | 	getqx	local04
1f6b8     12 15 02 F1 | 	add	arg02, local04
1f6bc     E0 05 B0 FD | 	call	#_psram_spin2_write
1f6c0     0B 00 00 FF 
1f6c4     CC E4 85 F1 | 	sub	objptr, ##5836
1f6c8     13 21 02 F1 | 	add	local02, local05
1f6cc     11 21 0A F2 | 	cmp	local02, local03 wz
1f6d0     54 FF 9F 5D |  if_ne	jmp	#LR__2540
1f6d4                 | ' 
1f6d4                 | ' repeat i from (start*16)+4 to (start*16)+19
1f6d4     0F 21 02 F6 | 	mov	local02, local01
1f6d8     04 20 66 F0 | 	shl	local02, #4
1f6dc     04 20 06 F1 | 	add	local02, #4
1f6e0     0F 27 02 F6 | 	mov	local05, local01
1f6e4     04 26 66 F0 | 	shl	local05, #4
1f6e8     13 26 06 F1 | 	add	local05, #19
1f6ec     0F 25 02 F6 | 	mov	local04, local01
1f6f0     04 24 66 F0 | 	shl	local04, #4
1f6f4     04 24 06 F1 | 	add	local04, #4
1f6f8     12 27 52 F2 | 	cmps	local05, local04 wc
1f6fc     01 24 86 F6 | 	negc	local04, #1
1f700     12 23 02 F6 | 	mov	local03, local04
1f704     12 27 02 F1 | 	add	local05, local04
1f708                 | LR__2541
1f708                 | '    fastline(0,1023,i,write_background)    
1f708     45 E4 05 F1 | 	add	objptr, #69
1f70c     F2 18 02 FB | 	rdlong	arg04, objptr
1f710     45 E4 85 F1 | 	sub	objptr, #69
1f714     00 12 06 F6 | 	mov	arg01, #0
1f718     09 14 CE F9 | 	bmask	arg02, #9
1f71c     10 17 02 F6 | 	mov	arg03, local02
1f720     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f724     11 21 02 F1 | 	add	local02, local03
1f728     13 21 0A F2 | 	cmp	local02, local05 wz
1f72c     D8 FF 9F 5D |  if_ne	jmp	#LR__2541
1f730                 | '    
1f730                 | ' repeat i from 35 to start
1f730     23 20 06 F6 | 	mov	local02, #35
1f734     23 1E 56 F2 | 	cmps	local01, #35 wc
1f738     01 24 86 F6 | 	negc	local04, #1
1f73c     0F 27 02 F6 | 	mov	local05, local01
1f740     12 27 02 F1 | 	add	local05, local04
1f744                 | LR__2542
1f744                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f744     F6 03 00 FF 
1f748     00 12 06 F6 | 	mov	arg01, ##519168
1f74c     F9 E4 05 F1 | 	add	objptr, #249
1f750     F2 22 02 FB | 	rdlong	local03, objptr
1f754     11 13 82 F1 | 	sub	arg01, local03
1f758     F5 E4 85 F1 | 	sub	objptr, #245
1f75c     F2 14 02 FB | 	rdlong	arg02, objptr
1f760     10 23 02 F6 | 	mov	local03, local02
1f764     07 22 66 F0 | 	shl	local03, #7
1f768     11 15 02 F1 | 	add	arg02, local03
1f76c     80 16 06 F6 | 	mov	arg03, #128
1f770     0B 00 00 FF 
1f774     C8 E4 05 F1 | 	add	objptr, ##5832
1f778     88 04 B0 FD | 	call	#_psram_spin2_read1
1f77c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1f77c     F6 03 00 FF 
1f780     00 12 06 F6 | 	mov	arg01, ##519168
1f784     0A 00 00 FF 
1f788     D3 E5 85 F1 | 	sub	objptr, ##5587
1f78c     F2 22 02 FB | 	rdlong	local03, objptr
1f790     11 13 82 F1 | 	sub	arg01, local03
1f794     F5 E4 85 F1 | 	sub	objptr, #245
1f798     F2 14 02 FB | 	rdlong	arg02, objptr
1f79c     10 23 02 F6 | 	mov	local03, local02
1f7a0     01 22 06 F1 | 	add	local03, #1
1f7a4     07 22 66 F0 | 	shl	local03, #7
1f7a8     11 15 02 F1 | 	add	arg02, local03
1f7ac     80 16 06 F6 | 	mov	arg03, #128
1f7b0     0B 00 00 FF 
1f7b4     C8 E4 05 F1 | 	add	objptr, ##5832
1f7b8     E4 04 B0 FD | 	call	#_psram_spin2_write
1f7bc     0B 00 00 FF 
1f7c0     CC E4 85 F1 | 	sub	objptr, ##5836
1f7c4     12 21 02 F1 | 	add	local02, local04
1f7c8     13 21 0A F2 | 	cmp	local02, local05 wz
1f7cc     74 FF 9F 5D |  if_ne	jmp	#LR__2542
1f7d0                 | ' repeat i from 0 to 127
1f7d0     00 20 06 F6 | 	mov	local02, #0
1f7d4                 | LR__2543
1f7d4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1f7d4     04 E4 05 F1 | 	add	objptr, #4
1f7d8     F2 12 02 FB | 	rdlong	arg01, objptr
1f7dc     0F 27 02 F6 | 	mov	local05, local01
1f7e0     07 26 66 F0 | 	shl	local05, #7
1f7e4     13 13 02 F1 | 	add	arg01, local05
1f7e8     10 13 02 F1 | 	add	arg01, local02
1f7ec     20 14 06 F6 | 	mov	arg02, #32
1f7f0     01 16 06 F6 | 	mov	arg03, #1
1f7f4     00 18 06 F6 | 	mov	arg04, #0
1f7f8     01 1A 06 F6 | 	mov	arg05, #1
1f7fc     0B 00 00 FF 
1f800     C8 E4 05 F1 | 	add	objptr, ##5832
1f804     34 05 B0 FD | 	call	#_psram_spin2_fill
1f808     0B 00 00 FF 
1f80c     CC E4 85 F1 | 	sub	objptr, ##5836
1f810     01 20 06 F1 | 	add	local02, #1
1f814     80 20 56 F2 | 	cmps	local02, #128 wc
1f818     B8 FF 9F CD |  if_b	jmp	#LR__2543
1f81c     A7 F0 03 F6 | 	mov	ptra, fp
1f820     B2 00 A0 FD | 	call	#popregs_
1f824                 | _hg010b_spin2_scrolldown_ret
1f824     2D 00 64 FD | 	ret
1f828                 | 
1f828                 | ' 
1f828                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1f828                 | ' 
1f828                 | ' pub crlf()
1f828                 | _hg010b_spin2_crlf
1f828                 | ' 
1f828                 | ' cursor_x:=leading_spaces*2
1f828     01 00 00 FF 
1f82c     B6 E4 05 F1 | 	add	objptr, ##694
1f830     F2 16 02 FB | 	rdlong	arg03, objptr
1f834     01 16 66 F0 | 	shl	arg03, #1
1f838     01 00 00 FF 
1f83c     7A E4 85 F1 | 	sub	objptr, ##634
1f840     F2 16 52 FC | 	wrword	arg03, objptr
1f844                 | ' cursor_y+=1
1f844     02 E4 05 F1 | 	add	objptr, #2
1f848     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f84c     01 16 06 F1 | 	add	arg03, #1
1f850     F2 16 42 FC | 	wrbyte	arg03, objptr
1f854                 | ' if cursor_y>st_lines-1
1f854     C3 E4 05 F1 | 	add	objptr, #195
1f858     F2 16 02 FB | 	rdlong	arg03, objptr
1f85c     01 16 86 F1 | 	sub	arg03, #1
1f860     C3 E4 85 F1 | 	sub	objptr, #195
1f864     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f868     3E E4 85 F1 | 	sub	objptr, #62
1f86c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1f870     2C 00 90 ED |  if_be	jmp	#LR__2550
1f874                 | '   scrollup2()
1f874     00 12 06 F6 | 	mov	arg01, #0
1f878     01 00 00 FF 
1f87c     58 14 06 F6 | 	mov	arg02, ##600
1f880     10 16 06 F6 | 	mov	arg03, #16
1f884     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1f888                 | '   cursor_y:=st_lines-1
1f888     01 E5 05 F1 | 	add	objptr, #257
1f88c     F2 16 02 FB | 	rdlong	arg03, objptr
1f890     01 16 86 F1 | 	sub	arg03, #1
1f894     C3 E4 85 F1 | 	sub	objptr, #195
1f898     F2 16 42 FC | 	wrbyte	arg03, objptr
1f89c     3E E4 85 F1 | 	sub	objptr, #62
1f8a0                 | LR__2550
1f8a0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1f8a0     3C E4 05 F1 | 	add	objptr, #60
1f8a4     F2 14 E2 FA | 	rdword	arg02, objptr
1f8a8     02 14 66 F0 | 	shl	arg02, #2
1f8ac     02 E4 05 F1 | 	add	objptr, #2
1f8b0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f8b4     3E E4 85 F1 | 	sub	objptr, #62
1f8b8     04 16 66 F0 | 	shl	arg03, #4
1f8bc     04 16 06 F1 | 	add	arg03, #4
1f8c0     11 12 06 F6 | 	mov	arg01, #17
1f8c4     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1f8c8                 | _hg010b_spin2_crlf_ret
1f8c8     2D 00 64 FD | 	ret
1f8cc                 | 
1f8cc                 | ' 
1f8cc                 | ' 
1f8cc                 | ' '*************************************************************************
1f8cc                 | ' '                                                                        *
1f8cc                 | ' '  Conversions                                                           *
1f8cc                 | ' '                                                                        *
1f8cc                 | ' '*************************************************************************
1f8cc                 | ' 
1f8cc                 | ' ''---------- Convert a integer to dec string, return a pointer
1f8cc                 | ' 
1f8cc                 | ' pub inttostr(i):result |q,pos,k,j
1f8cc                 | _hg010b_spin2_inttostr
1f8cc     03 4A 05 F6 | 	mov	COUNT_, #3
1f8d0     A8 00 A0 FD | 	call	#pushregs_
1f8d4     09 1F 0A F6 | 	mov	local01, arg01 wz
1f8d8                 | ' 
1f8d8                 | ' j:=i
1f8d8                 | ' pos:=10
1f8d8     0A 20 06 F6 | 	mov	local02, #10
1f8dc                 | ' k:=0
1f8dc     00 22 06 F6 | 	mov	local03, #0
1f8e0                 | ' 
1f8e0                 | ' if (j==0)
1f8e0     18 00 90 5D |  if_ne	jmp	#LR__2560
1f8e4                 | '   n_string[0]:=48
1f8e4     4D E4 05 F1 | 	add	objptr, #77
1f8e8     F2 60 48 FC | 	wrbyte	#48, objptr
1f8ec                 | '   n_string[1]:=0
1f8ec     01 E4 05 F1 | 	add	objptr, #1
1f8f0     F2 00 48 FC | 	wrbyte	#0, objptr
1f8f4     4E E4 85 F1 | 	sub	objptr, #78
1f8f8     C4 00 90 FD | 	jmp	#LR__2567
1f8fc                 | LR__2560
1f8fc                 | ' 
1f8fc                 | ' else
1f8fc                 | '   if (j<0)
1f8fc     0F 1F 52 F6 | 	abs	local01, local01 wc
1f900                 | '     j:=0-j
1f900                 | '     k:=45
1f900     2D 22 06 C6 |  if_b	mov	local03, #45
1f904                 | ' 
1f904                 | '   n_string[11]:=0
1f904     58 E4 05 F1 | 	add	objptr, #88
1f908     F2 00 48 FC | 	wrbyte	#0, objptr
1f90c     58 E4 85 F1 | 	sub	objptr, #88
1f910     97 24 48 FB | 	callpa	#(@LR__2562-@LR__2561)>>2,fcache_load_ptr_
1f914                 | '   repeat while (pos>-1)
1f914                 | LR__2561
1f914     00 20 56 F2 | 	cmps	local02, #0 wc
1f918     40 00 90 CD |  if_b	jmp	#LR__2563
1f91c     0F FB 51 F6 | 	abs	result1, local01 wc
1f920     0A FA 15 FD | 	qdiv	result1, #10
1f924                 | '     q:=j//10
1f924     19 FA 61 FD | 	getqy	result1
1f928     FD FA 81 F6 | 	negc	result1, result1
1f92c     0F 1F 52 F6 | 	abs	local01, local01 wc
1f930     0A 1E 16 FD | 	qdiv	local01, #10
1f934                 | '     q:=48+q
1f934     30 FA 05 F1 | 	add	result1, #48
1f938                 | '     n_string[pos]:=q
1f938     10 1F 02 F6 | 	mov	local01, local02
1f93c     4D E4 05 F1 | 	add	objptr, #77
1f940     F2 1E 02 F1 | 	add	local01, objptr
1f944     0F FB 41 FC | 	wrbyte	result1, local01
1f948                 | '     j:=j/10
1f948     4D E4 85 F1 | 	sub	objptr, #77
1f94c                 | '     pos-=1
1f94c     01 20 86 F1 | 	sub	local02, #1
1f950     18 1E 62 FD | 	getqx	local01
1f954     0F 1F 82 F6 | 	negc	local01, local01
1f958     B8 FF 9F FD | 	jmp	#LR__2561
1f95c                 | LR__2562
1f95c                 | LR__2563
1f95c                 | '   repeat while n_string[0]==48
1f95c                 | LR__2564
1f95c     4D E4 05 F1 | 	add	objptr, #77
1f960     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f964     4D E4 85 F1 | 	sub	objptr, #77
1f968     30 16 0E F2 | 	cmp	arg03, #48 wz
1f96c     20 00 90 5D |  if_ne	jmp	#LR__2565
1f970                 | '     bytemove(@n_string,@n_string+1,12)
1f970     4D E4 05 F1 | 	add	objptr, #77
1f974     F2 12 02 F6 | 	mov	arg01, objptr
1f978     F2 14 02 F6 | 	mov	arg02, objptr
1f97c     4D E4 85 F1 | 	sub	objptr, #77
1f980     01 14 06 F1 | 	add	arg02, #1
1f984     0C 16 06 F6 | 	mov	arg03, #12
1f988     D8 0D B0 FD | 	call	#__system____builtin_memmove
1f98c     CC FF 9F FD | 	jmp	#LR__2564
1f990                 | LR__2565
1f990                 | ' 
1f990                 | '   if k==45
1f990     2D 22 0E F2 | 	cmp	local03, #45 wz
1f994     28 00 90 5D |  if_ne	jmp	#LR__2566
1f998                 | '      bytemove(@n_string+1,@n_string,12)
1f998     4D E4 05 F1 | 	add	objptr, #77
1f99c     F2 12 02 F6 | 	mov	arg01, objptr
1f9a0     01 12 06 F1 | 	add	arg01, #1
1f9a4     F2 14 02 F6 | 	mov	arg02, objptr
1f9a8     4D E4 85 F1 | 	sub	objptr, #77
1f9ac     0C 16 06 F6 | 	mov	arg03, #12
1f9b0     B0 0D B0 FD | 	call	#__system____builtin_memmove
1f9b4                 | '      n_string[0]:=k
1f9b4     4D E4 05 F1 | 	add	objptr, #77
1f9b8     F2 22 42 FC | 	wrbyte	local03, objptr
1f9bc     4D E4 85 F1 | 	sub	objptr, #77
1f9c0                 | LR__2566
1f9c0                 | LR__2567
1f9c0                 | ' 
1f9c0                 | ' q:=@n_string
1f9c0     4D E4 05 F1 | 	add	objptr, #77
1f9c4     F2 FA 01 F6 | 	mov	result1, objptr
1f9c8     4D E4 85 F1 | 	sub	objptr, #77
1f9cc                 | ' return q
1f9cc     A7 F0 03 F6 | 	mov	ptra, fp
1f9d0     B2 00 A0 FD | 	call	#popregs_
1f9d4                 | _hg010b_spin2_inttostr_ret
1f9d4     2D 00 64 FD | 	ret
1f9d8                 | 
1f9d8                 | ' 
1f9d8                 | ' '..............................................................................
1f9d8                 | ' 
1f9d8                 | ' {{
1f9d8                 | ' }}
1f9d8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1f9d8                 | _psram_spin2_startx
1f9d8     04 4A 05 F6 | 	mov	COUNT_, #4
1f9dc     A8 00 A0 FD | 	call	#pushregs_
1f9e0     09 1F 02 F6 | 	mov	local01, arg01
1f9e4     0B 21 02 F6 | 	mov	local02, arg03
1f9e8     0C 23 02 F6 | 	mov	local03, arg04
1f9ec                 | '     stop() ' restart driver if required
1f9ec     54 01 B0 FD | 	call	#_psram_spin2_stop
1f9f0     00 1E 0E F2 | 	cmp	local01, #0 wz
1f9f4     14 1E 06 AB |  if_e	rdlong	local01, #20
1f9f8     0F 15 52 F6 | 	abs	arg02, local01 wc
1f9fc     A1 07 00 FF 
1fa00     40 14 16 FD | 	qdiv	arg02, ##1000000
1fa04                 | ' 
1fa04                 | '     ' use current frequency if none specified
1fa04                 | ' 
1fa04                 | '     if freq == 0 
1fa04                 | '         freq := clkfreq 
1fa04                 | ' 
1fa04                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fa04                 | ' 
1fa04                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fa04                 | '     if burst < 0
1fa04                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fa04     18 14 62 FD | 	getqx	arg02
1fa08     0A 19 82 F6 | 	negc	arg04, arg02
1fa0c     03 18 66 F0 | 	shl	arg04, #3
1fa10     84 18 86 F1 | 	sub	arg04, #132
1fa14     04 18 46 F0 | 	shr	arg04, #4
1fa18     04 18 66 F0 | 	shl	arg04, #4
1fa1c     00 18 56 F2 | 	cmps	arg04, #0 wc
1fa20     0E FA 65 C6 |  if_b	neg	result1, #14
1fa24     10 01 90 CD |  if_b	jmp	#LR__2573
1fa28                 | ' 
1fa28                 | '     ' compute the input delay
1fa28                 | ' 
1fa28                 | '     if delay <= 0
1fa28     01 20 56 F2 | 	cmps	local02, #1 wc
1fa2c     10 00 90 3D |  if_ae	jmp	#LR__2570
1fa30                 | '         delay := lookupDelay(freq)
1fa30     0F 13 02 F6 | 	mov	arg01, local01
1fa34     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fa38     FD 20 02 F6 | 	mov	local02, result1
1fa3c     04 00 90 FD | 	jmp	#LR__2571
1fa40                 | LR__2570
1fa40                 | '     else
1fa40                 | '         delay <#= $f ' limit to 15
1fa40     0F 20 66 F3 | 	fles	local02, #15
1fa44                 | LR__2571
1fa44                 | ' 
1fa44                 | '     ' create our lock
1fa44                 | ' 
1fa44                 | '     driverlock := LOCKNEW()  
1fa44     00 FA 05 F6 | 	mov	result1, #0
1fa48     04 FA 61 FD | 	locknew	result1
1fa4c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fa50     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fa54                 | '     if driverlock == -1
1fa54     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fa58     FF FF 7F FF 
1fa5c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fa60                 | '         return ERR_NO_LOCK
1fa60     1A FA 65 A6 |  if_e	neg	result1, #26
1fa64     D0 00 90 AD |  if_e	jmp	#LR__2573
1fa68                 | ' 
1fa68                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fa68                 | ' 
1fa68                 | '     long[@startupData][0]:=clkfreq
1fa68     14 1E 06 FB | 	rdlong	local01, #20
1fa6c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fa70     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fa74                 | ' '    long[@startupData][1]:=$1000_0000
1fa74                 | '     long[@startupData][5]:=@deviceData
1fa74     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fa78     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fa7c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fa80     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fa84     14 14 06 F1 | 	add	arg02, #20
1fa88     0A 1F 62 FC | 	wrlong	local01, arg02
1fa8c                 | '     long[@startupData][6]:=@qosData
1fa8c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fa90     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fa94     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fa98     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fa9c     18 14 06 F1 | 	add	arg02, #24
1faa0     0A 1F 62 FC | 	wrlong	local01, arg02
1faa4                 | '     long[@startupData][7]:=$7FF00
1faa4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1faa8     1C 1E 06 F1 | 	add	local01, #28
1faac     FF 03 80 FF 
1fab0     0F 01 6A FC | 	wrlong	##524032, local01
1fab4                 | ' 
1fab4                 | '     ' setup some default bank and QoS parameter values
1fab4                 | ' 
1fab4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fab4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fab8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fabc     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fac0     10 18 66 F0 | 	shl	arg04, #16
1fac4     0C 20 66 F0 | 	shl	local02, #12
1fac8     10 19 42 F5 | 	or	arg04, local02
1facc     18 18 46 F5 | 	or	arg04, #24
1fad0     0C 15 02 F6 | 	mov	arg02, arg04
1fad4     02 16 06 F6 | 	mov	arg03, #2
1fad8     A0 00 A0 FD | 	call	#\builtin_longfill_
1fadc                 | '     longfill(@qosData, $FFFF0000, 8)
1fadc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fae0     07 16 06 F6 | 	mov	arg03, #7
1fae4     28 16 62 FD | 	setq	arg03
1fae8     80 FF FF FF 
1faec     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1faf0                 | ' 
1faf0                 | '     ' get the address of the PSRAM memory driver so we can start it
1faf0                 | ' 
1faf0                 | '     driverAddr:= driver.getDriverAddr()
1faf0                 | '     return @driver_start
1faf0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1faf4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1faf8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fafc                 | ' 
1fafc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fafc                 | ' 
1fafc                 | '     if desiredcog < 0
1fafc     00 22 56 F2 | 	cmps	local03, #0 wc
1fb00                 | '         desiredcog := NEWCOG
1fb00     10 22 06 C6 |  if_b	mov	local03, #16
1fb04                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fb04     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fb08     11 25 02 F6 | 	mov	local04, local03
1fb0c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fb10     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fb14     01 24 66 C6 |  if_b	neg	local04, #1
1fb18     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fb1c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fb20                 | '     repeat until long[@startupData] == 0 
1fb20     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fb24                 | LR__2572
1fb24     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fb28     F8 FF 9F 5D |  if_ne	jmp	#LR__2572
1fb2c                 | ' 
1fb2c                 | '     return drivercog
1fb2c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fb30     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fb34     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb38                 | LR__2573
1fb38     A7 F0 03 F6 | 	mov	ptra, fp
1fb3c     B2 00 A0 FD | 	call	#popregs_
1fb40                 | _psram_spin2_startx_ret
1fb40     2D 00 64 FD | 	ret
1fb44                 | 
1fb44                 | ' 
1fb44                 | ' '..............................................................................
1fb44                 | ' 
1fb44                 | ' {{
1fb44                 | ' }}
1fb44                 | ' PUB stop() : i
1fb44                 | _psram_spin2_stop
1fb44     00 00 06 F6 | 	mov	_var01, #0
1fb48                 | '     if drivercog <> -1
1fb48     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fb4c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fb50     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb54     FF FF 7F FF 
1fb58     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fb5c     70 00 90 AD |  if_e	jmp	#LR__2583
1fb60                 | '         cogstop(drivercog) ' a rather brutal stop
1fb60     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fb64     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fb68     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fb6c     03 12 62 FD | 	cogstop	arg01
1fb70     97 26 48 FB | 	callpa	#(@LR__2582-@LR__2580)>>2,fcache_load_ptr_
1fb74                 | '         repeat i from 0 to 7
1fb74                 | LR__2580
1fb74                 | '             if long[$7FF00][i*3] < 0
1fb74     00 FB 01 F6 | 	mov	result1, _var01
1fb78     01 FA 65 F0 | 	shl	result1, #1
1fb7c     00 FB 01 F1 | 	add	result1, _var01
1fb80     02 FA 65 F0 | 	shl	result1, #2
1fb84     FF 03 00 FF 
1fb88     00 FB 05 F1 | 	add	result1, ##524032
1fb8c     FD FA 01 FB | 	rdlong	result1, result1
1fb90     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb94     1C 00 90 3D |  if_ae	jmp	#LR__2581
1fb98                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fb98     00 FB 01 F6 | 	mov	result1, _var01
1fb9c     01 FA 65 F0 | 	shl	result1, #1
1fba0     00 FB 01 F1 | 	add	result1, _var01
1fba4     02 FA 65 F0 | 	shl	result1, #2
1fba8     FF 03 00 FF 
1fbac     00 FB 05 F1 | 	add	result1, ##524032
1fbb0     FD 20 68 FC | 	wrlong	#16, result1
1fbb4                 | LR__2581
1fbb4     01 00 06 F1 | 	add	_var01, #1
1fbb8     08 00 56 F2 | 	cmps	_var01, #8 wc
1fbbc     B4 FF 9F CD |  if_b	jmp	#LR__2580
1fbc0                 | LR__2582
1fbc0                 | '         drivercog := -1
1fbc0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fbc4     FF FF FF FF 
1fbc8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fbcc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fbd0                 | LR__2583
1fbd0                 | '     if driverlock <> -1
1fbd0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fbd4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fbd8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fbdc     FF FF 7F FF 
1fbe0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fbe4                 | '         LOCKRET(driverlock)
1fbe4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fbe8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fbec     05 12 62 5D |  if_ne	lockret	arg01
1fbf0                 | '         driverlock := -1
1fbf0     FF FF FF 5F 
1fbf4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fbf8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fbfc     00 FB 01 F6 | 	mov	result1, _var01
1fc00                 | _psram_spin2_stop_ret
1fc00     2D 00 64 FD | 	ret
1fc04                 | 
1fc04                 | ' 
1fc04                 | ' '..............................................................................
1fc04                 | ' 
1fc04                 | ' {{
1fc04                 | ' }}
1fc04                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fc04                 | _psram_spin2_read1
1fc04                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fc04                 | '     if drivercog == -1 ' driver must be running
1fc04     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc08     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fc0c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc10     FF FF 7F FF 
1fc14     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fc18                 | '         return ERR_INACTIVE
1fc18     0F FA 65 A6 |  if_e	neg	result1, #15
1fc1c     7C 00 90 AD |  if_e	jmp	#LR__2591
1fc20                 | '     if count == 0 ' don't even bother reading
1fc20     00 16 0E F2 | 	cmp	arg03, #0 wz
1fc24                 | '         return 0
1fc24     00 FA 05 A6 |  if_e	mov	result1, #0
1fc28     70 00 90 AD |  if_e	jmp	#LR__2591
1fc2c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fc2c     00 FA 05 F6 | 	mov	result1, #0
1fc30     01 FA 61 FD | 	cogid	result1
1fc34     FD 00 02 F6 | 	mov	_var01, result1
1fc38     01 00 66 F0 | 	shl	_var01, #1
1fc3c     FD 00 02 F1 | 	add	_var01, result1
1fc40     02 00 66 F0 | 	shl	_var01, #2
1fc44     FF 03 00 FF 
1fc48     00 03 06 F6 | 	mov	_var02, ##524032
1fc4c     00 03 02 F1 | 	add	_var02, _var01
1fc50                 | '     if long[mailbox] < 0
1fc50     01 01 02 FB | 	rdlong	_var01, _var02
1fc54     00 00 56 F2 | 	cmps	_var01, #0 wc
1fc58                 | '         return ERR_MAILBOX_BUSY
1fc58     1C FA 65 C6 |  if_b	neg	result1, #28
1fc5c     3C 00 90 CD |  if_b	jmp	#LR__2591
1fc60                 | '     long[mailbox][2] := count
1fc60     08 02 06 F1 | 	add	_var02, #8
1fc64     01 17 62 FC | 	wrlong	arg03, _var02
1fc68                 | '     long[mailbox][1] := dstHubAddr
1fc68     04 02 86 F1 | 	sub	_var02, #4
1fc6c     01 13 62 FC | 	wrlong	arg01, _var02
1fc70     04 02 86 F1 | 	sub	_var02, #4
1fc74                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fc74     0A 05 02 F6 | 	mov	_var03, arg02
1fc78     D9 04 06 F4 | 	bitl	_var03, #217
1fc7c     00 00 58 FF 
1fc80     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fc84     02 01 02 F1 | 	add	_var01, _var03
1fc88     01 01 62 FC | 	wrlong	_var01, _var02
1fc8c                 | '     repeat
1fc8c                 | LR__2590
1fc8c                 | '         result := long[mailbox]    
1fc8c     01 05 02 FB | 	rdlong	_var03, _var02
1fc90     00 04 56 F2 | 	cmps	_var03, #0 wc
1fc94     F4 FF 9F CD |  if_b	jmp	#LR__2590
1fc98                 | '     while result < 0   
1fc98                 | '     return -result                       'return success or error
1fc98     02 FB 61 F6 | 	neg	result1, _var03
1fc9c                 | LR__2591
1fc9c                 | _psram_spin2_read1_ret
1fc9c     2D 00 64 FD | 	ret
1fca0                 | 
1fca0                 | ' 
1fca0                 | ' '..............................................................................
1fca0                 | ' 
1fca0                 | ' {{
1fca0                 | ' }}
1fca0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fca0                 | _psram_spin2_write
1fca0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fca0                 | '     if drivercog == -1 ' driver must be running
1fca0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fca4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fca8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fcac     FF FF 7F FF 
1fcb0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fcb4                 | '         return ERR_INACTIVE
1fcb4     0F FA 65 A6 |  if_e	neg	result1, #15
1fcb8     7C 00 90 AD |  if_e	jmp	#LR__2601
1fcbc                 | '     if count == 0 ' don't even bother writing
1fcbc     00 16 0E F2 | 	cmp	arg03, #0 wz
1fcc0                 | '         return 0
1fcc0     00 FA 05 A6 |  if_e	mov	result1, #0
1fcc4     70 00 90 AD |  if_e	jmp	#LR__2601
1fcc8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fcc8     00 FA 05 F6 | 	mov	result1, #0
1fccc     01 FA 61 FD | 	cogid	result1
1fcd0     FD 00 02 F6 | 	mov	_var01, result1
1fcd4     01 00 66 F0 | 	shl	_var01, #1
1fcd8     FD 00 02 F1 | 	add	_var01, result1
1fcdc     02 00 66 F0 | 	shl	_var01, #2
1fce0     FF 03 00 FF 
1fce4     00 03 06 F6 | 	mov	_var02, ##524032
1fce8     00 03 02 F1 | 	add	_var02, _var01
1fcec                 | '     if long[mailbox] < 0
1fcec     01 01 02 FB | 	rdlong	_var01, _var02
1fcf0     00 00 56 F2 | 	cmps	_var01, #0 wc
1fcf4                 | '         return ERR_MAILBOX_BUSY
1fcf4     1C FA 65 C6 |  if_b	neg	result1, #28
1fcf8     3C 00 90 CD |  if_b	jmp	#LR__2601
1fcfc                 | '     long[mailbox][2] := count
1fcfc     08 02 06 F1 | 	add	_var02, #8
1fd00     01 17 62 FC | 	wrlong	arg03, _var02
1fd04                 | '     long[mailbox][1] := srcHubAddr
1fd04     04 02 86 F1 | 	sub	_var02, #4
1fd08     01 13 62 FC | 	wrlong	arg01, _var02
1fd0c     04 02 86 F1 | 	sub	_var02, #4
1fd10                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fd10     0A 05 02 F6 | 	mov	_var03, arg02
1fd14     D9 04 06 F4 | 	bitl	_var03, #217
1fd18     00 00 78 FF 
1fd1c     00 00 06 F6 | 	mov	_var01, ##-268435456
1fd20     02 01 02 F1 | 	add	_var01, _var03
1fd24     01 01 62 FC | 	wrlong	_var01, _var02
1fd28                 | '     repeat
1fd28                 | LR__2600
1fd28                 | '         result := long[mailbox]    
1fd28     01 05 02 FB | 	rdlong	_var03, _var02
1fd2c     00 04 56 F2 | 	cmps	_var03, #0 wc
1fd30     F4 FF 9F CD |  if_b	jmp	#LR__2600
1fd34                 | '     while result < 0   
1fd34                 | '     return -result                       'return success or error
1fd34     02 FB 61 F6 | 	neg	result1, _var03
1fd38                 | LR__2601
1fd38                 | _psram_spin2_write_ret
1fd38     2D 00 64 FD | 	ret
1fd3c                 | 
1fd3c                 | ' 
1fd3c                 | ' ' generalized fill
1fd3c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fd3c                 | _psram_spin2_fill
1fd3c     09 01 02 F6 | 	mov	_var01, arg01
1fd40     0A 03 02 F6 | 	mov	_var02, arg02
1fd44     0B 05 02 F6 | 	mov	_var03, arg03
1fd48     0D 07 02 F6 | 	mov	_var04, arg05
1fd4c                 | '     case datasize 
1fd4c     01 06 86 F1 | 	sub	_var04, #1
1fd50     04 06 26 F3 | 	fle	_var04, #4
1fd54     30 06 62 FD | 	jmprel	_var04
1fd58                 | LR__2610
1fd58     10 00 90 FD | 	jmp	#LR__2611
1fd5c     18 00 90 FD | 	jmp	#LR__2612
1fd60     2C 00 90 FD | 	jmp	#LR__2614
1fd64     1C 00 90 FD | 	jmp	#LR__2613
1fd68     24 00 90 FD | 	jmp	#LR__2614
1fd6c                 | LR__2611
1fd6c                 | '         1: req := driver.R_WRITEBYTE
1fd6c     00 00 60 FF 
1fd70     00 08 06 F6 | 	mov	_var05, ##-1073741824
1fd74     20 00 90 FD | 	jmp	#LR__2615
1fd78                 | LR__2612
1fd78                 | '         2: req := driver.R_WRITEWORD
1fd78     00 00 68 FF 
1fd7c     00 08 06 F6 | 	mov	_var05, ##-805306368
1fd80     14 00 90 FD | 	jmp	#LR__2615
1fd84                 | LR__2613
1fd84                 | '         4: req := driver.R_WRITELONG
1fd84     00 00 70 FF 
1fd88     00 08 06 F6 | 	mov	_var05, ##-536870912
1fd8c     08 00 90 FD | 	jmp	#LR__2615
1fd90                 | LR__2614
1fd90                 | '         other : return ERR_INVALID
1fd90     06 FA 65 F6 | 	neg	result1, #6
1fd94     94 00 90 FD | 	jmp	#LR__2617
1fd98                 | LR__2615
1fd98                 | '     if count == 0   ' nothing to do
1fd98     00 04 0E F2 | 	cmp	_var03, #0 wz
1fd9c                 | '         return 0
1fd9c     00 FA 05 A6 |  if_e	mov	result1, #0
1fda0     88 00 90 AD |  if_e	jmp	#LR__2617
1fda4                 | '     if drivercog == -1
1fda4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fda8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1fdac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fdb0     FF FF 7F FF 
1fdb4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1fdb8                 | '         return ERR_INACTIVE
1fdb8     0F FA 65 A6 |  if_e	neg	result1, #15
1fdbc     6C 00 90 AD |  if_e	jmp	#LR__2617
1fdc0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1fdc0     00 FA 05 F6 | 	mov	result1, #0
1fdc4     01 FA 61 FD | 	cogid	result1
1fdc8     FD 06 02 F6 | 	mov	_var04, result1
1fdcc     01 06 66 F0 | 	shl	_var04, #1
1fdd0     FD 06 02 F1 | 	add	_var04, result1
1fdd4     02 06 66 F0 | 	shl	_var04, #2
1fdd8     FF 03 00 FF 
1fddc     00 0B 06 F6 | 	mov	_var06, ##524032
1fde0     03 0B 02 F1 | 	add	_var06, _var04
1fde4                 | '     if long[mailbox] < 0
1fde4     05 07 02 FB | 	rdlong	_var04, _var06
1fde8     00 06 56 F2 | 	cmps	_var04, #0 wc
1fdec                 | '         return ERR_MAILBOX_BUSY
1fdec     1C FA 65 C6 |  if_b	neg	result1, #28
1fdf0     38 00 90 CD |  if_b	jmp	#LR__2617
1fdf4                 | '     long[mailbox][2] := count
1fdf4     08 0A 06 F1 | 	add	_var06, #8
1fdf8     05 05 62 FC | 	wrlong	_var03, _var06
1fdfc                 | '     long[mailbox][1] := pattern
1fdfc     04 0A 86 F1 | 	sub	_var06, #4
1fe00     05 03 62 FC | 	wrlong	_var02, _var06
1fe04     04 0A 86 F1 | 	sub	_var06, #4
1fe08                 | '     long[mailbox] := req + (addr & $1ffffff)
1fe08     04 0D 02 F6 | 	mov	_var07, _var05
1fe0c     00 0F 02 F6 | 	mov	_var08, _var01
1fe10     D9 0E 06 F4 | 	bitl	_var08, #217
1fe14     07 0D 02 F1 | 	add	_var07, _var08
1fe18     05 0D 62 FC | 	wrlong	_var07, _var06
1fe1c                 | '     repeat
1fe1c                 | LR__2616
1fe1c                 | '         r := long[mailbox]
1fe1c     05 0F 02 FB | 	rdlong	_var08, _var06
1fe20     00 0E 56 F2 | 	cmps	_var08, #0 wc
1fe24     F4 FF 9F CD |  if_b	jmp	#LR__2616
1fe28                 | '     while r < 0
1fe28                 | '     return -r                  ' return 0 for success or negated error code
1fe28     07 FB 61 F6 | 	neg	result1, _var08
1fe2c                 | LR__2617
1fe2c                 | _psram_spin2_fill_ret
1fe2c     2D 00 64 FD | 	ret
1fe30                 | 
1fe30                 | ' 
1fe30                 | ' '..............................................................................
1fe30                 | ' 
1fe30                 | ' {{
1fe30                 | ' }}
1fe30                 | ' PUB setQos(cog, qos) : result | mailbox
1fe30                 | _psram_spin2_setQos
1fe30     09 01 02 F6 | 	mov	_var01, arg01
1fe34                 | '     if drivercog == -1 ' driver must be running
1fe34     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe38     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fe3c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe40     FF FF 7F FF 
1fe44     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fe48                 | '         return ERR_INACTIVE
1fe48     0F FA 65 A6 |  if_e	neg	result1, #15
1fe4c     9C 00 90 AD |  if_e	jmp	#LR__2624
1fe50                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1fe50     00 00 56 F2 | 	cmps	_var01, #0 wc
1fe54     08 00 90 CD |  if_b	jmp	#LR__2620
1fe58     08 00 56 F2 | 	cmps	_var01, #8 wc
1fe5c     08 00 90 CD |  if_b	jmp	#LR__2621
1fe60                 | LR__2620
1fe60                 | '         return ERR_INVALID
1fe60     06 FA 65 F6 | 	neg	result1, #6
1fe64     84 00 90 FD | 	jmp	#LR__2624
1fe68                 | LR__2621
1fe68                 | '     long[@qosData][cog] := qos & !$1ff
1fe68     FF 15 26 F5 | 	andn	arg02, #511
1fe6c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fe70     02 00 66 F0 | 	shl	_var01, #2
1fe74     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1fe78     00 15 62 FC | 	wrlong	arg02, _var01
1fe7c                 | '     mailbox := $7FF00 + drivercog*12
1fe7c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1fe80     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1fe84     02 07 02 F6 | 	mov	_var04, _var03
1fe88     01 06 66 F0 | 	shl	_var04, #1
1fe8c     02 07 02 F1 | 	add	_var04, _var03
1fe90     02 06 66 F0 | 	shl	_var04, #2
1fe94     FF 03 00 FF 
1fe98     00 09 06 F6 | 	mov	_var05, ##524032
1fe9c     03 09 02 F1 | 	add	_var05, _var04
1fea0                 | '     repeat until LOCKTRY(driverlock)
1fea0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1fea4                 | LR__2622
1fea4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fea8     06 12 72 FD | 	locktry	arg01 wc
1feac     F4 FF 9F 3D |  if_ae	jmp	#LR__2622
1feb0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1feb4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1feb4     00 06 06 F6 | 	mov	_var04, #0
1feb8     01 06 62 FD | 	cogid	_var04
1febc     00 00 78 FF 
1fec0     00 02 06 F6 | 	mov	_var02, ##-268435456
1fec4     03 03 02 F1 | 	add	_var02, _var04
1fec8     04 03 62 FC | 	wrlong	_var02, _var05
1fecc                 | '     repeat while long[mailbox] < 0
1fecc                 | LR__2623
1fecc     04 03 02 FB | 	rdlong	_var02, _var05
1fed0     00 02 56 F2 | 	cmps	_var02, #0 wc
1fed4     F4 FF 9F CD |  if_b	jmp	#LR__2623
1fed8                 | '     LOCKREL(driverlock)
1fed8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fedc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fee0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fee4     07 12 72 FD | 	lockrel	arg01 wc
1fee8     00 FA 05 F6 | 	mov	result1, #0
1feec                 | LR__2624
1feec                 | _psram_spin2_setQos_ret
1feec     2D 00 64 FD | 	ret
1fef0                 | 
1fef0                 | ' 
1fef0                 | ' '..............................................................................
1fef0                 | ' 
1fef0                 | ' {{
1fef0                 | ' }}
1fef0                 | ' PRI lookupDelay(freq) : delay | profile
1fef0                 | _psram_spin2_lookupDelay
1fef0                 | '     profile := @delayTable
1fef0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1fef4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1fef8                 | '     delay := long[profile][0]
1fef8     00 03 02 FB | 	rdlong	_var02, _var01
1fefc                 | '     repeat while long[profile][1] 
1fefc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1ff00     97 16 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
1ff04                 | LR__2630
1ff04     04 00 06 F1 | 	add	_var01, #4
1ff08     00 FB 09 FB | 	rdlong	result1, _var01 wz
1ff0c     04 00 86 F1 | 	sub	_var01, #4
1ff10     1C 00 90 AD |  if_e	jmp	#LR__2632
1ff14                 | '         if freq +< long[profile][1] 
1ff14     04 00 06 F1 | 	add	_var01, #4
1ff18     00 FB 01 FB | 	rdlong	result1, _var01
1ff1c     04 00 86 F1 | 	sub	_var01, #4
1ff20     FD 12 12 F2 | 	cmp	arg01, result1 wc
1ff24                 | '             quit
1ff24                 | '         profile += 4
1ff24     04 00 06 31 |  if_ae	add	_var01, #4
1ff28                 | '         delay++
1ff28     01 02 06 31 |  if_ae	add	_var02, #1
1ff2c     D4 FF 9F 3D |  if_ae	jmp	#LR__2630
1ff30                 | LR__2631
1ff30                 | LR__2632
1ff30     01 FB 01 F6 | 	mov	result1, _var02
1ff34                 | _psram_spin2_lookupDelay_ret
1ff34     2D 00 64 FD | 	ret
1ff38                 | 
1ff38                 | ' 
1ff38                 | ' PUB start() : r
1ff38                 | _usbnew_spin2_start
1ff38     00 00 06 F6 | 	mov	_var01, #0
1ff3c                 | '   ifnot driver_cog
1ff3c     15 00 00 FF 
1ff40     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1ff44     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1ff48     15 00 00 FF 
1ff4c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1ff50     38 00 90 5D |  if_ne	jmp	#LR__2640
1ff54                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1ff54     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1ff58     10 00 06 F6 | 	mov	_var01, #16
1ff5c     00 16 06 F6 | 	mov	arg03, #0
1ff60     28 16 62 FD | 	setq	arg03
1ff64     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1ff68     01 00 66 C6 |  if_b	neg	_var01, #1
1ff6c                 | '     if r >= 0
1ff6c     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff70                 | '       driver_cog := r+1
1ff70     00 03 02 36 |  if_ae	mov	_var02, _var01
1ff74     01 02 06 31 |  if_ae	add	_var02, #1
1ff78     15 00 00 3F 
1ff7c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1ff80     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1ff84     15 00 00 3F 
1ff88     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1ff8c                 | LR__2640
1ff8c     00 FB 01 F6 | 	mov	result1, _var01
1ff90                 | _usbnew_spin2_start_ret
1ff90     2D 00 64 FD | 	ret
1ff94                 | 
1ff94                 | '     '' (Always enabled)
1ff94                 | ' 
1ff94                 | ' '' Get current pressed state of a keyboard key
1ff94                 | ' PUB keystate(key) : r | buf[2],tmp
1ff94                 | _usbnew_spin2_keystate
1ff94     00 04 06 F6 | 	mov	_var03, #0
1ff98                 | '   if key >= $E0 && key < $E8
1ff98     E0 12 56 F2 | 	cmps	arg01, #224 wc
1ff9c     34 00 90 CD |  if_b	jmp	#LR__2650
1ffa0     E8 12 56 F2 | 	cmps	arg01, #232 wc
1ffa4     2C 00 90 3D |  if_ae	jmp	#LR__2650
1ffa8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1ffa8     00 FA 05 F6 | 	mov	result1, #0
1ffac     13 00 00 FF 
1ffb0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ffb4     09 07 02 F6 | 	mov	_var04, arg01
1ffb8     E0 06 86 F1 | 	sub	_var04, #224
1ffbc     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1ffc0     03 09 4A F0 | 	shr	_var05, _var04 wz
1ffc4     13 00 00 FF 
1ffc8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1ffcc     01 FA 65 56 |  if_ne	neg	result1, #1
1ffd0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1ffd4                 | LR__2650
1ffd4                 | '   else
1ffd4                 | '     '' Do this in inline ASM to ensure atomicity
1ffd4                 | '     tmp := @hkbd_report
1ffd4     13 00 00 FF 
1ffd8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ffdc     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1ffe0                 | '     org
1ffe0     13 00 00 FF 
1ffe4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1ffe8     97 1E 48 FB | 	callpa	#(@LR__2652-@LR__2651)>>2,fcache_load_ptr_
1ffec                 | LR__2651
1ffec 000             | 	org	0
1ffec 000 28 02 64 FD | 	setq	#1
1fff0 001 04 01 02 FB | 	rdlong	_var01, _var05
1fff4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1fff8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1fffc 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
20000 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20004 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20008 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2000c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20010 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20014 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20018 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2001c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20020 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20024 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20028 00f             | LR__2652
20028                 | 	orgh
20028     02 FB 01 F6 | 	mov	result1, _var03
2002c                 | _usbnew_spin2_keystate_ret
2002c     2D 00 64 FD | 	ret
20030                 | 
20030                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20030                 | ' 
20030                 | ' '' Return key event from buffer if there is one
20030                 | ' PUB get_key() : r | tail
20030                 | _usbnew_spin2_get_key
20030                 | '   tail := keyq_tail
20030     0F 00 00 FF 
20034     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20038     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2003c                 | '   if keyq_head == tail
2003c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20040     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20044     0F 00 00 FF 
20048     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2004c     00 03 0A F2 | 	cmp	_var02, _var01 wz
20050                 | '     return 0 ' No event
20050     00 FA 05 A6 |  if_e	mov	result1, #0
20054     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20058                 | '   r := keyq_data[tail]
20058     00 03 02 F6 | 	mov	_var02, _var01
2005c     02 02 66 F0 | 	shl	_var02, #2
20060     0F 00 00 FF 
20064     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20068     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2006c     01 FB 01 FB | 	rdlong	result1, _var02
20070                 | '   if ++tail == KEYQUEUE_SIZE
20070     01 00 06 F1 | 	add	_var01, #1
20074     80 00 0E F2 | 	cmp	_var01, #128 wz
20078                 | '     tail := 0
20078     00 00 06 A6 |  if_e	mov	_var01, #0
2007c                 | '   keyq_tail := tail
2007c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20080     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20084     0F 00 00 FF 
20088     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
2008c                 | _usbnew_spin2_get_key_ret
2008c     2D 00 64 FD | 	ret
20090                 | 
20090                 | ' 
20090                 | ' '' Emulate mouse movement
20090                 | ' PUB mouse_move(x,y)
20090                 | _usbnew_spin2_mouse_move
20090     02 4A 05 F6 | 	mov	COUNT_, #2
20094     A8 00 A0 FD | 	call	#pushregs_
20098     09 1F 02 F6 | 	mov	local01, arg01
2009c     0A 21 02 F6 | 	mov	local02, arg02
200a0                 | '   mouse_lock := 1
200a0     14 00 00 FF 
200a4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
200a8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
200ac     14 00 00 FF 
200b0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
200b4                 | '   waitus(2) ' hope driver is now done
200b4     02 12 06 F6 | 	mov	arg01, #2
200b8     E8 0A B0 FD | 	call	#__system___waitus
200bc                 | '   mouse_xacc := x
200bc     14 00 00 FF 
200c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
200c4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
200c8                 | '   mouse_yacc := y
200c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
200cc     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
200d0                 | '   if mouse_outptr
200d0     04 00 00 FF 
200d4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
200d8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
200dc     0F 00 00 FF 
200e0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
200e4     24 00 90 AD |  if_e	jmp	#LR__2660
200e8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
200e8     10 20 66 F0 | 	shl	local02, #16
200ec     0F 1F 32 F9 | 	getword	local01, local01, #0
200f0     0F 21 42 F5 | 	or	local02, local01
200f4     0F 00 00 FF 
200f8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
200fc     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
20100     0F 00 00 FF 
20104     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20108     0F 21 62 FC | 	wrlong	local02, local01
2010c                 | LR__2660
2010c                 | '   mouse_lock := 0
2010c     14 00 00 FF 
20110     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20114     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20118     14 00 00 FF 
2011c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20120     A7 F0 03 F6 | 	mov	ptra, fp
20124     B2 00 A0 FD | 	call	#popregs_
20128                 | _usbnew_spin2_mouse_move_ret
20128     2D 00 64 FD | 	ret
2012c                 | 
2012c                 | '     '' Set HAVE_HIDPAD to enable.
2012c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
2012c                 | ' 
2012c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
2012c                 | ' PUB hidpad_id(dev) : r
2012c                 | _usbnew_spin2_hidpad_id
2012c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
2012c     13 00 00 FF 
20130     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20134     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20138     09 01 02 F6 | 	mov	_var01, arg01
2013c     03 00 66 F0 | 	shl	_var01, #3
20140     09 01 82 F1 | 	sub	_var01, arg01
20144     02 00 66 F0 | 	shl	_var01, #2
20148     00 FB 01 F1 | 	add	result1, _var01
2014c     FD FA 01 FB | 	rdlong	result1, result1
20150     13 00 00 FF 
20154     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20158                 | _usbnew_spin2_hidpad_id_ret
20158     2D 00 64 FD | 	ret
2015c                 | 
2015c                 | ' 
2015c                 | ' '' Get all button states for a device
2015c                 | ' PUB hidpad_buttons(dev) : r 
2015c                 | _usbnew_spin2_hidpad_buttons
2015c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2015c     13 00 00 FF 
20160     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20164     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20168     09 01 02 F6 | 	mov	_var01, arg01
2016c     03 00 66 F0 | 	shl	_var01, #3
20170     09 01 82 F1 | 	sub	_var01, arg01
20174     02 00 66 F0 | 	shl	_var01, #2
20178     00 FB 01 F1 | 	add	result1, _var01
2017c     14 FA 05 F1 | 	add	result1, #20
20180     FD FA 01 FB | 	rdlong	result1, result1
20184     13 00 00 FF 
20188     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2018c                 | _usbnew_spin2_hidpad_buttons_ret
2018c     2D 00 64 FD | 	ret
20190                 | 
20190                 | ' 
20190                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20190                 | ' PUB hidpad_axis(dev,axnum) : r
20190                 | _usbnew_spin2_hidpad_axis
20190                 | '   if axnum +>= 6
20190     06 14 16 F2 | 	cmp	arg02, #6 wc
20194                 | '     return 0
20194     00 FA 05 36 |  if_ae	mov	result1, #0
20198     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2019c                 | '   else 
2019c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2019c     13 00 00 FF 
201a0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
201a4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
201a8     09 01 02 F6 | 	mov	_var01, arg01
201ac     03 00 66 F0 | 	shl	_var01, #3
201b0     09 01 82 F1 | 	sub	_var01, arg01
201b4     02 00 66 F0 | 	shl	_var01, #2
201b8     00 FB 01 F1 | 	add	result1, _var01
201bc     04 00 06 F6 | 	mov	_var01, #4
201c0     0A 01 02 F1 | 	add	_var01, arg02
201c4     01 00 66 F0 | 	shl	_var01, #1
201c8     FD 00 02 F1 | 	add	_var01, result1
201cc     00 FB E1 FA | 	rdword	result1, _var01
201d0     0F FA 65 F7 | 	signx	result1, #15
201d4     13 00 00 FF 
201d8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
201dc                 | _usbnew_spin2_hidpad_axis_ret
201dc     2D 00 64 FD | 	ret
201e0                 | 
201e0                 | ' 
201e0                 | ' 
201e0                 | ' '--------------------------------------------------------------
201e0                 | ' '---------- Init the variables, start the cog. ----------------
201e0                 | ' '--------------------------------------------------------------
201e0                 | ' 
201e0                 | ' pub start(mbox,scope,cache) :cog,base | iii
201e0                 | _audio096_spin2_start
201e0     04 4A 05 F6 | 	mov	COUNT_, #4
201e4     A8 00 A0 FD | 	call	#pushregs_
201e8     09 1F 02 F6 | 	mov	local01, arg01
201ec                 | ' 
201ec                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
201ec                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
201ec                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
201ec                 | ' 
201ec                 | ' mailboxaddr:=mbox 
201ec     F2 1E 62 FC | 	wrlong	local01, objptr
201f0                 | ' scope_ptr:=scope
201f0     04 E4 05 F1 | 	add	objptr, #4
201f4     F2 14 62 FC | 	wrlong	arg02, objptr
201f8                 | ' cache_ptr:=cache
201f8     04 E4 05 F1 | 	add	objptr, #4
201fc     F2 16 62 FC | 	wrlong	arg03, objptr
20200                 | ' base:=@channel1[0]
20200     04 E4 05 F1 | 	add	objptr, #4
20204     F2 20 02 F6 | 	mov	local02, objptr
20208                 | ' long[$40]:=mbox
20208     40 1E 66 FC | 	wrlong	local01, #64
2020c                 | ' repeat iii from 0 to 7
2020c     00 22 06 F6 | 	mov	local03, #0
20210     02 00 00 FF 
20214     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20218     0C E4 85 F1 | 	sub	objptr, #12
2021c     97 BC 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
20220                 | LR__2670
20220                 | '   long[base+64*iii]:=0
20220     10 1F 02 F6 | 	mov	local01, local02
20224     11 FD 01 F6 | 	mov	result2, local03
20228     06 FC 65 F0 | 	shl	result2, #6
2022c     FE 1E 02 F1 | 	add	local01, result2
20230     0F 01 68 FC | 	wrlong	#0, local01
20234                 | '   long[base+64*iii+4]:=0
20234     10 1F 02 F6 | 	mov	local01, local02
20238     11 FD 01 F6 | 	mov	result2, local03
2023c     06 FC 65 F0 | 	shl	result2, #6
20240     FE 1E 02 F1 | 	add	local01, result2
20244     04 1E 06 F1 | 	add	local01, #4
20248     0F 01 68 FC | 	wrlong	#0, local01
2024c                 | '   long[base+64*iii+12]:=0
2024c     10 25 02 F6 | 	mov	local04, local02
20250     11 1F 02 F6 | 	mov	local01, local03
20254     06 1E 66 F0 | 	shl	local01, #6
20258     0F 25 02 F1 | 	add	local04, local01
2025c     0C 24 06 F1 | 	add	local04, #12
20260     12 01 68 FC | 	wrlong	#0, local04
20264                 | '   long[base+64*iii+16]:=2 
20264     10 25 02 F6 | 	mov	local04, local02
20268     11 1F 02 F6 | 	mov	local01, local03
2026c     06 1E 66 F0 | 	shl	local01, #6
20270     0F 25 02 F1 | 	add	local04, local01
20274     10 24 06 F1 | 	add	local04, #16
20278     12 05 68 FC | 	wrlong	#2, local04
2027c                 | '   word[base+64*iii+20]:=0
2027c     10 25 02 F6 | 	mov	local04, local02
20280     11 1F 02 F6 | 	mov	local01, local03
20284     06 1E 66 F0 | 	shl	local01, #6
20288     0F 25 02 F1 | 	add	local04, local01
2028c     14 24 06 F1 | 	add	local04, #20
20290     12 01 58 FC | 	wrword	#0, local04
20294                 | '   word[base+64*iii+22]:=8192
20294     10 25 02 F6 | 	mov	local04, local02
20298     11 1F 02 F6 | 	mov	local01, local03
2029c     06 1E 66 F0 | 	shl	local01, #6
202a0     0F 25 02 F1 | 	add	local04, local01
202a4     16 24 06 F1 | 	add	local04, #22
202a8     10 00 80 FF 
202ac     12 01 58 FC | 	wrword	##8192, local04
202b0                 | '   word[base+64*iii+24]:=4000+2*iii
202b0     11 25 02 F6 | 	mov	local04, local03
202b4     01 24 66 F0 | 	shl	local04, #1
202b8     07 00 00 FF 
202bc     A0 1F 06 F6 | 	mov	local01, ##4000
202c0     12 1F 02 F1 | 	add	local01, local04
202c4     10 25 02 F6 | 	mov	local04, local02
202c8     11 FD 01 F6 | 	mov	result2, local03
202cc     06 FC 65 F0 | 	shl	result2, #6
202d0     FE 24 02 F1 | 	add	local04, result2
202d4     18 24 06 F1 | 	add	local04, #24
202d8     12 1F 52 FC | 	wrword	local01, local04
202dc                 | '   word[base+64*iii+26]:=2
202dc     10 25 02 F6 | 	mov	local04, local02
202e0     11 1F 02 F6 | 	mov	local01, local03
202e4     06 1E 66 F0 | 	shl	local01, #6
202e8     0F 25 02 F1 | 	add	local04, local01
202ec     1A 24 06 F1 | 	add	local04, #26
202f0     12 05 58 FC | 	wrword	#2, local04
202f4                 | '   long [base+64*iii+8]:=@null | $C0000000
202f4     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
202f8     3E 1E 26 F4 | 	bith	local01, #62
202fc     10 25 02 F6 | 	mov	local04, local02
20300     11 17 02 F6 | 	mov	arg03, local03
20304     06 16 66 F0 | 	shl	arg03, #6
20308     0B 25 02 F1 | 	add	local04, arg03
2030c     08 24 06 F1 | 	add	local04, #8
20310     12 1F 62 FC | 	wrlong	local01, local04
20314                 | '   long[base+64*iii+32]:=0
20314     10 25 02 F6 | 	mov	local04, local02
20318     11 1F 02 F6 | 	mov	local01, local03
2031c     06 1E 66 F0 | 	shl	local01, #6
20320     0F 25 02 F1 | 	add	local04, local01
20324     20 24 06 F1 | 	add	local04, #32
20328     12 01 68 FC | 	wrlong	#0, local04
2032c                 | '   long[base+64*iii+36]:=0
2032c     10 25 02 F6 | 	mov	local04, local02
20330     11 1F 02 F6 | 	mov	local01, local03
20334     06 1E 66 F0 | 	shl	local01, #6
20338     0F 25 02 F1 | 	add	local04, local01
2033c     24 24 06 F1 | 	add	local04, #36
20340     12 01 68 FC | 	wrlong	#0, local04
20344                 | '   long[base+64*iii+40]:=0
20344     10 25 02 F6 | 	mov	local04, local02
20348     11 1F 02 F6 | 	mov	local01, local03
2034c     06 1E 66 F0 | 	shl	local01, #6
20350     0F 25 02 F1 | 	add	local04, local01
20354     28 24 06 F1 | 	add	local04, #40
20358     12 01 68 FC | 	wrlong	#0, local04
2035c                 | '   long[base+64*iii+44]:=0
2035c     10 25 02 F6 | 	mov	local04, local02
20360     11 1F 02 F6 | 	mov	local01, local03
20364     06 1E 66 F0 | 	shl	local01, #6
20368     0F 25 02 F1 | 	add	local04, local01
2036c     2C 24 06 F1 | 	add	local04, #44
20370     12 01 68 FC | 	wrlong	#0, local04
20374                 | '   long[base+64*iii+28]:=0
20374     10 25 02 F6 | 	mov	local04, local02
20378     11 1F 02 F6 | 	mov	local01, local03
2037c     06 1E 66 F0 | 	shl	local01, #6
20380     0F 25 02 F1 | 	add	local04, local01
20384     1C 24 06 F1 | 	add	local04, #28
20388     12 01 68 FC | 	wrlong	#0, local04
2038c     01 22 06 F1 | 	add	local03, #1
20390     08 22 56 F2 | 	cmps	local03, #8 wc
20394     88 FE 9F CD |  if_b	jmp	#LR__2670
20398                 | LR__2671
20398     02 00 00 FF 
2039c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
203a0                 | '   
203a0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
203a0     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
203a4     F2 16 02 F6 | 	mov	arg03, objptr
203a8     10 24 06 F6 | 	mov	local04, #16
203ac     28 16 62 FD | 	setq	arg03
203b0     0A 25 F2 FC | 	coginit	local04, arg02 wc
203b4     01 24 66 C6 |  if_b	neg	local04, #1
203b8                 | ' waitms(100)
203b8     64 12 06 F6 | 	mov	arg01, #100
203bc     78 07 B0 FD | 	call	#__system___waitms
203c0                 | ' return cog,base
203c0     10 FD 01 F6 | 	mov	result2, local02
203c4     12 FB 01 F6 | 	mov	result1, local04
203c8     A7 F0 03 F6 | 	mov	ptra, fp
203cc     B2 00 A0 FD | 	call	#popregs_
203d0                 | _audio096_spin2_start_ret
203d0     2D 00 64 FD | 	ret
203d4                 | 
203d4                 | ' 
203d4                 | ' ' a simple play procedure to not poke everything. 
203d4                 | ' 
203d4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
203d4                 | _audio096_spin2_play
203d4     0C E4 05 F1 | 	add	objptr, #12
203d8     F2 00 02 F6 | 	mov	_var01, objptr
203dc     06 12 66 F0 | 	shl	arg01, #6
203e0     09 01 02 F1 | 	add	_var01, arg01
203e4     00 13 02 F6 | 	mov	arg01, _var01
203e8     0C 12 06 F1 | 	add	arg01, #12
203ec     09 1B 62 FC | 	wrlong	arg05, arg01
203f0     00 1C 56 F2 | 	cmps	arg06, #0 wc
203f4     00 13 02 36 |  if_ae	mov	arg01, _var01
203f8     10 12 06 31 |  if_ae	add	arg01, #16
203fc     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
20400     02 1A 06 C1 |  if_b	add	arg05, #2
20404     00 13 02 C6 |  if_b	mov	arg01, _var01
20408     10 12 06 C1 |  if_b	add	arg01, #16
2040c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
20410     0B 13 52 F6 | 	abs	arg01, arg03 wc
20414     0F 1B 80 FF 
20418     09 1F 1A FD | 	qdiv	##3546895, arg01
2041c                 | ' 
2041c                 | ' base2:=@channel1[0]+64*channel
2041c                 | ' 
2041c                 | ' 
2041c                 | ' long[base2+12]:= len
2041c                 | ' if loop >=0 
2041c                 | '   long[base2+16]:= loop
2041c     0C E4 85 F1 | 	sub	objptr, #12
20420                 | ' else
20420                 | '   long[base2+16]:= len+2
20420                 | ' word[base2+20]:=vol
20420     00 13 02 F6 | 	mov	arg01, _var01
20424     14 12 06 F1 | 	add	arg01, #20
20428     09 19 52 FC | 	wrword	arg04, arg01
2042c                 | ' word[base2+24]:= 3546895/splfreq 
2042c     00 19 02 F6 | 	mov	arg04, _var01
20430     18 18 06 F1 | 	add	arg04, #24
20434                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20434                 | ' long[base2+28]:=$40000000    
20434                 | ' long[base2+32]:=0    
20434                 | ' long[base2+36]:=0    
20434                 | ' long[base2+40]:=0    
20434                 | ' long[base2+44]:=0    
20434                 | ' long[base2+8]:=sample+$C0000000     
20434     00 00 60 FF 
20438     00 14 06 F1 | 	add	arg02, ##-1073741824
2043c     18 12 62 FD | 	getqx	arg01
20440     09 13 82 F6 | 	negc	arg01, arg01
20444     0C 13 52 FC | 	wrword	arg01, arg04
20448     00 13 02 F6 | 	mov	arg01, _var01
2044c     1A 12 06 F1 | 	add	arg01, #26
20450     09 01 5A FC | 	wrword	#256, arg01
20454     00 13 02 F6 | 	mov	arg01, _var01
20458     1C 12 06 F1 | 	add	arg01, #28
2045c     00 00 A0 FF 
20460     09 01 68 FC | 	wrlong	##1073741824, arg01
20464     00 13 02 F6 | 	mov	arg01, _var01
20468     20 12 06 F1 | 	add	arg01, #32
2046c     09 01 68 FC | 	wrlong	#0, arg01
20470     00 13 02 F6 | 	mov	arg01, _var01
20474     24 12 06 F1 | 	add	arg01, #36
20478     09 01 68 FC | 	wrlong	#0, arg01
2047c     00 13 02 F6 | 	mov	arg01, _var01
20480     28 12 06 F1 | 	add	arg01, #40
20484     09 01 68 FC | 	wrlong	#0, arg01
20488     00 13 02 F6 | 	mov	arg01, _var01
2048c     2C 12 06 F1 | 	add	arg01, #44
20490     09 01 68 FC | 	wrlong	#0, arg01
20494     08 00 06 F1 | 	add	_var01, #8
20498     00 15 62 FC | 	wrlong	arg02, _var01
2049c                 | _audio096_spin2_play_ret
2049c     2D 00 64 FD | 	ret
204a0                 | 
204a0                 | ' 
204a0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
204a0                 | _audio096_spin2_play8
204a0                 | ' 
204a0                 | ' base2:=@channel1[0]+64*channel
204a0     0C E4 05 F1 | 	add	objptr, #12
204a4     F2 00 02 F6 | 	mov	_var01, objptr
204a8     06 12 66 F0 | 	shl	arg01, #6
204ac     09 01 02 F1 | 	add	_var01, arg01
204b0                 | ' long[base2]:=0
204b0     00 01 68 FC | 	wrlong	#0, _var01
204b4                 | ' long[base2+8]:=sample+$40000000 
204b4     00 00 20 FF 
204b8     00 14 06 F1 | 	add	arg02, ##1073741824
204bc     00 13 02 F6 | 	mov	arg01, _var01
204c0     08 12 06 F1 | 	add	arg01, #8
204c4     09 15 62 FC | 	wrlong	arg02, arg01
204c8                 | ' if loop>=0
204c8     00 1C 56 F2 | 	cmps	arg06, #0 wc
204cc     0C E4 85 F1 | 	sub	objptr, #12
204d0     1C 00 90 CD |  if_b	jmp	#LR__2680
204d4                 | '   long[base2+12]:=loop
204d4     00 15 02 F6 | 	mov	arg02, _var01
204d8     0C 14 06 F1 | 	add	arg02, #12
204dc     0A 1D 62 FC | 	wrlong	arg06, arg02
204e0                 | '   long[base2+16]:= len
204e0     00 1D 02 F6 | 	mov	arg06, _var01
204e4     10 1C 06 F1 | 	add	arg06, #16
204e8     0E 1B 62 FC | 	wrlong	arg05, arg06
204ec     1C 00 90 FD | 	jmp	#LR__2681
204f0                 | LR__2680
204f0                 | ' else
204f0                 | '   long[base2+12]:= len
204f0     00 1D 02 F6 | 	mov	arg06, _var01
204f4     0C 1C 06 F1 | 	add	arg06, #12
204f8     0E 1B 62 FC | 	wrlong	arg05, arg06
204fc                 | '   long[base2+16]:= len+1
204fc     01 1A 06 F1 | 	add	arg05, #1
20500     00 13 02 F6 | 	mov	arg01, _var01
20504     10 12 06 F1 | 	add	arg01, #16
20508     09 1B 62 FC | 	wrlong	arg05, arg01
2050c                 | LR__2681
2050c     0B 17 52 F6 | 	abs	arg03, arg03 wc
20510     0F 1B 80 FF 
20514     0B 1F 1A FD | 	qdiv	##3546895, arg03
20518                 | ' word[base2+20]:=vol
20518     00 17 02 F6 | 	mov	arg03, _var01
2051c     14 16 06 F1 | 	add	arg03, #20
20520     0B 19 52 FC | 	wrword	arg04, arg03
20524                 | ' word[base2+24]:= 3546895 /splfreq 
20524     00 13 02 F6 | 	mov	arg01, _var01
20528     18 12 06 F1 | 	add	arg01, #24
2052c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2052c     1A 00 06 F1 | 	add	_var01, #26
20530     18 18 62 FD | 	getqx	arg04
20534     0C 19 82 F6 | 	negc	arg04, arg04
20538     09 19 52 FC | 	wrword	arg04, arg01
2053c     00 01 5A FC | 	wrword	#256, _var01
20540                 | _audio096_spin2_play8_ret
20540     2D 00 64 FD | 	ret
20544                 | 
20544                 | ' 'long[base2+28]:=$40000000
20544                 | ' 
20544                 | '     
20544                 | ' pub stop(channel) 'silence it
20544                 | _audio096_spin2_stop
20544                 | ' 
20544                 | ' word[@channel1[0]+64*channel+20]:=0
20544     0C E4 05 F1 | 	add	objptr, #12
20548     F2 00 02 F6 | 	mov	_var01, objptr
2054c     09 03 02 F6 | 	mov	_var02, arg01
20550     06 02 66 F0 | 	shl	_var02, #6
20554     01 01 02 F1 | 	add	_var01, _var02
20558     14 00 06 F1 | 	add	_var01, #20
2055c     00 01 58 FC | 	wrword	#0, _var01
20560                 | ' word[@channel1[0]+64*channel+20]:=0
20560     F2 00 02 F6 | 	mov	_var01, objptr
20564     06 12 66 F0 | 	shl	arg01, #6
20568     09 01 02 F1 | 	add	_var01, arg01
2056c     14 00 06 F1 | 	add	_var01, #20
20570     00 01 58 FC | 	wrword	#0, _var01
20574     0C E4 85 F1 | 	sub	objptr, #12
20578                 | _audio096_spin2_stop_ret
20578     2D 00 64 FD | 	ret
2057c                 | hubexit
2057c     81 00 80 FD | 	jmp	#cogexit
20580                 | 
20580                 | __system___setbaud
20580     14 7C 06 FB | 	rdlong	muldiva_, #20
20584     09 7F 02 F6 | 	mov	muldivb_, arg01
20588     BA 00 A0 FD | 	call	#divide_
2058c     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
20590                 | LR__2690
20590     3E FA 9D FA | 	rdpin	result1, #62 wc
20594     FE FC A1 F1 | 	subx	result2, result2
20598     F4 FF 9F CD |  if_b	jmp	#LR__2690
2059c                 | LR__2691
2059c     40 7C 64 FD | 	dirl	#62
205a0     40 7E 64 FD | 	dirl	#63
205a4     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
205a8     10 7E 66 F0 | 	shl	muldivb_, #16
205ac     07 14 06 F6 | 	mov	arg02, #7
205b0     3F 15 02 F1 | 	add	arg02, muldivb_
205b4     3E F8 0C FC | 	wrpin	#124, #62
205b8     3E 14 16 FC | 	wxpin	arg02, #62
205bc     3F 7C 0C FC | 	wrpin	#62, #63
205c0     14 14 06 F1 | 	add	arg02, #20
205c4     3F 14 16 FC | 	wxpin	arg02, #63
205c8     41 7C 64 FD | 	dirh	#62
205cc     41 7E 64 FD | 	dirh	#63
205d0                 | __system___setbaud_ret
205d0     2D 00 64 FD | 	ret
205d4                 | 
205d4                 | __system___txraw
205d4     01 4A 05 F6 | 	mov	COUNT_, #1
205d8     A8 00 A0 FD | 	call	#pushregs_
205dc     09 1F 02 F6 | 	mov	local01, arg01
205e0     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
205e4                 | LR__2700
205e4     3E FA 9D FA | 	rdpin	result1, #62 wc
205e8     FE FC A1 F1 | 	subx	result2, result2
205ec     F4 FF 9F CD |  if_b	jmp	#LR__2700
205f0                 | LR__2701
205f0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
205f4     C2 01 00 AF 
205f8     00 12 06 A6 |  if_e	mov	arg01, ##230400
205fc     80 FF BF AD |  if_e	call	#__system___setbaud
20600     58 7C 64 FD | 	drvl	#62
20604     3E 1E 26 FC | 	wypin	local01, #62
20608     01 FA 05 F6 | 	mov	result1, #1
2060c     A7 F0 03 F6 | 	mov	ptra, fp
20610     B2 00 A0 FD | 	call	#popregs_
20614                 | __system___txraw_ret
20614     2D 00 64 FD | 	ret
20618                 | 
20618                 | __system___rxraw
20618     0D 4A 05 F6 | 	mov	COUNT_, #13
2061c     A8 00 A0 FD | 	call	#pushregs_
20620     09 1F 02 F6 | 	mov	local01, arg01
20624     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20628     C2 01 00 AF 
2062c     00 12 06 A6 |  if_e	mov	arg01, ##230400
20630     4C FF BF AD |  if_e	call	#__system___setbaud
20634     00 1E 0E F2 | 	cmp	local01, #0 wz
20638     20 00 90 AD |  if_e	jmp	#LR__2710
2063c     14 22 06 FB | 	rdlong	local03, #20
20640     0A 22 46 F0 | 	shr	local03, #10
20644     11 1F 02 FD | 	qmul	local01, local03
20648     1A FA 61 FD | 	getct	result1
2064c     18 24 62 FD | 	getqx	local04
20650     12 FB 01 F1 | 	add	result1, local04
20654     FD 26 02 F6 | 	mov	local05, result1
20658     04 00 90 FD | 	jmp	#LR__2711
2065c                 | LR__2710
2065c     00 26 06 F6 | 	mov	local05, #0
20660                 | LR__2711
20660     01 28 66 F6 | 	neg	local06, #1
20664     3F 2A 06 F6 | 	mov	local07, #63
20668     00 2C 06 F6 | 	mov	local08, #0
2066c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20670     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20674     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20678                 | LR__2712
20678     08 2E 16 F4 | 	testb	local09, #8 wc
2067c     09 2E 76 F4 | 	testbn	local09, #9 andc
20680     0A 2E 46 F0 | 	shr	local09, #10
20684     01 2C 06 C6 |  if_b	mov	local08, #1
20688     40 7E 6C 3D |  if_ae	testp	#63 wz
2068c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20690     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
20694     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
20698                 | LR__2713
20698     00 20 06 F6 | 	mov	local02, #0
2069c     00 2C 0E F2 | 	cmp	local08, #0 wz
206a0     01 20 66 56 |  if_ne	neg	local02, #1
206a4     00 30 06 F6 | 	mov	local10, #0
206a8     00 22 06 F6 | 	mov	local03, #0
206ac     00 1E 0E F2 | 	cmp	local01, #0 wz
206b0     01 22 66 56 |  if_ne	neg	local03, #1
206b4     00 24 06 F6 | 	mov	local04, #0
206b8     00 32 06 F6 | 	mov	local11, #0
206bc     13 35 02 F6 | 	mov	local12, local05
206c0     1A FA 61 FD | 	getct	result1
206c4     FD 36 02 F6 | 	mov	local13, result1
206c8     1B 35 82 F1 | 	sub	local12, local13
206cc     00 34 56 F2 | 	cmps	local12, #0 wc
206d0     00 32 26 C6 |  if_b	not	local11, #0
206d4     00 32 0E F2 | 	cmp	local11, #0 wz
206d8     00 24 26 56 |  if_ne	not	local04, #0
206dc     12 23 CA F7 | 	test	local03, local04 wz
206e0     00 30 26 56 |  if_ne	not	local10, #0
206e4     18 21 4A F5 | 	or	local02, local10 wz
206e8     8C FF 9F AD |  if_e	jmp	#LR__2712
206ec     00 2C 0E F2 | 	cmp	local08, #0 wz
206f0     17 29 02 56 |  if_ne	mov	local06, local09
206f4     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
206f8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
206fc     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
20700     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20704     14 FB 01 F6 | 	mov	result1, local06
20708     A7 F0 03 F6 | 	mov	ptra, fp
2070c     B2 00 A0 FD | 	call	#popregs_
20710                 | __system___rxraw_ret
20710     2D 00 64 FD | 	ret
20714                 | 
20714                 | __system___getus
20714     1A FC 71 FD | 	getct	result2 wc
20718     1A 00 62 FD | 	getct	_var01
2071c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20720     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
20724     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20728     20 00 90 5D |  if_ne	jmp	#LR__2720
2072c     14 02 06 FB | 	rdlong	_var02, #20
20730     A1 07 00 FF 
20734     40 02 16 FD | 	qdiv	_var02, ##1000000
20738     10 E6 05 F1 | 	add	ptr___system__dat__, #16
2073c     18 FA 61 FD | 	getqx	result1
20740     FD 02 02 F6 | 	mov	_var02, result1
20744     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20748     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2074c                 | LR__2720
2074c     01 FD 11 FD | 	qdiv	result2, _var02
20750     19 FC 61 FD | 	getqy	result2
20754     28 FC 61 FD | 	setq	result2
20758     01 01 12 FD | 	qdiv	_var01, _var02
2075c     18 FA 61 FD | 	getqx	result1
20760                 | __system___getus_ret
20760     2D 00 64 FD | 	ret
20764                 | 
20764                 | __system____builtin_memmove
20764     09 01 02 F6 | 	mov	_var01, arg01
20768     0A 13 52 F2 | 	cmps	arg01, arg02 wc
2076c     10 00 90 CD |  if_b	jmp	#LR__2730
20770     0A 03 02 F6 | 	mov	_var02, arg02
20774     0B 03 02 F1 | 	add	_var02, arg03
20778     01 13 52 F2 | 	cmps	arg01, _var02 wc
2077c     48 00 90 CD |  if_b	jmp	#LR__2736
20780                 | LR__2730
20780     0B 05 02 F6 | 	mov	_var03, arg03
20784     02 04 4E F0 | 	shr	_var03, #2 wz
20788     18 00 90 AD |  if_e	jmp	#LR__2735
2078c     97 0A 48 FB | 	callpa	#(@LR__2733-@LR__2731)>>2,fcache_load_ptr_
20790                 | LR__2731
20790     02 09 D8 FC | 	rep	@LR__2734, _var03
20794                 | LR__2732
20794     0A 05 02 FB | 	rdlong	_var03, arg02
20798     09 05 62 FC | 	wrlong	_var03, arg01
2079c     04 12 06 F1 | 	add	arg01, #4
207a0     04 14 06 F1 | 	add	arg02, #4
207a4                 | LR__2733
207a4                 | LR__2734
207a4                 | LR__2735
207a4     02 16 CE F7 | 	test	arg03, #2 wz
207a8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
207ac     09 03 52 5C |  if_ne	wrword	_var02, arg01
207b0     02 12 06 51 |  if_ne	add	arg01, #2
207b4     02 14 06 51 |  if_ne	add	arg02, #2
207b8     01 16 CE F7 | 	test	arg03, #1 wz
207bc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
207c0     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
207c4     28 00 90 FD | 	jmp	#LR__2742
207c8                 | LR__2736
207c8     0B 13 02 F1 | 	add	arg01, arg03
207cc     0B 15 02 F1 | 	add	arg02, arg03
207d0     0B 07 0A F6 | 	mov	_var04, arg03 wz
207d4     18 00 90 AD |  if_e	jmp	#LR__2741
207d8     97 0A 48 FB | 	callpa	#(@LR__2739-@LR__2737)>>2,fcache_load_ptr_
207dc                 | LR__2737
207dc     03 09 D8 FC | 	rep	@LR__2740, _var04
207e0                 | LR__2738
207e0     01 12 86 F1 | 	sub	arg01, #1
207e4     01 14 86 F1 | 	sub	arg02, #1
207e8     0A 03 C2 FA | 	rdbyte	_var02, arg02
207ec     09 03 42 FC | 	wrbyte	_var02, arg01
207f0                 | LR__2739
207f0                 | LR__2740
207f0                 | LR__2741
207f0                 | LR__2742
207f0     00 FB 01 F6 | 	mov	result1, _var01
207f4                 | __system____builtin_memmove_ret
207f4     2D 00 64 FD | 	ret
207f8                 | 
207f8                 | __system____builtin_strcpy
207f8     09 01 02 F6 | 	mov	_var01, arg01
207fc     97 0A 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
20800                 | LR__2750
20800     0A FB C9 FA | 	rdbyte	result1, arg02 wz
20804     09 FB 41 FC | 	wrbyte	result1, arg01
20808     01 14 06 F1 | 	add	arg02, #1
2080c     01 12 06 F1 | 	add	arg01, #1
20810     EC FF 9F 5D |  if_ne	jmp	#LR__2750
20814                 | LR__2751
20814     00 FB 01 F6 | 	mov	result1, _var01
20818                 | __system____builtin_strcpy_ret
20818     2D 00 64 FD | 	ret
2081c                 | 
2081c                 | __system____topofstack
2081c     00 4A 05 F6 | 	mov	COUNT_, #0
20820     A8 00 A0 FD | 	call	#pushregs_
20824     08 F0 07 F1 | 	add	ptra, #8
20828     04 4E 05 F1 | 	add	fp, #4
2082c     A7 12 62 FC | 	wrlong	arg01, fp
20830     A7 FA 01 F6 | 	mov	result1, fp
20834     04 4E 85 F1 | 	sub	fp, #4
20838     A7 F0 03 F6 | 	mov	ptra, fp
2083c     B2 00 A0 FD | 	call	#popregs_
20840                 | __system____topofstack_ret
20840     2D 00 64 FD | 	ret
20844                 | 
20844                 | __system___lockmem
20844     00 FA 05 F6 | 	mov	result1, #0
20848     01 FA 61 FD | 	cogid	result1
2084c     00 FB 05 F1 | 	add	result1, #256
20850                 | LR__2760
20850     09 01 0A FB | 	rdlong	_var01, arg01 wz
20854     09 FB 61 AC |  if_e	wrlong	result1, arg01
20858     09 01 02 AB |  if_e	rdlong	_var01, arg01
2085c     09 01 02 AB |  if_e	rdlong	_var01, arg01
20860     FD 00 0A F2 | 	cmp	_var01, result1 wz
20864     E8 FF 9F 5D |  if_ne	jmp	#LR__2760
20868                 | __system___lockmem_ret
20868     2D 00 64 FD | 	ret
2086c                 | 
2086c                 | __system___string_cmp
2086c     97 14 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
20870                 | LR__2770
20870     09 01 C2 FA | 	rdbyte	_var01, arg01
20874     0A 03 C2 FA | 	rdbyte	_var02, arg02
20878     00 05 02 F6 | 	mov	_var03, _var01
2087c     01 05 8A F1 | 	sub	_var03, _var02 wz
20880     01 12 06 F1 | 	add	arg01, #1
20884     01 14 06 F1 | 	add	arg02, #1
20888     0C 00 90 5D |  if_ne	jmp	#LR__2772
2088c     00 00 0E F2 | 	cmp	_var01, #0 wz
20890     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20894     D8 FF 9F 5D |  if_ne	jmp	#LR__2770
20898                 | LR__2771
20898                 | LR__2772
20898     02 FB 01 F6 | 	mov	result1, _var03
2089c                 | __system___string_cmp_ret
2089c     2D 00 64 FD | 	ret
208a0                 | 
208a0                 | __system___string_concat
208a0     05 4A 05 F6 | 	mov	COUNT_, #5
208a4     A8 00 A0 FD | 	call	#pushregs_
208a8     09 1F 02 F6 | 	mov	local01, arg01
208ac     0A 21 02 F6 | 	mov	local02, arg02
208b0     0F 13 02 F6 | 	mov	arg01, local01
208b4     09 23 02 F6 | 	mov	local03, arg01
208b8     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
208bc                 | LR__2780
208bc     11 FB C9 FA | 	rdbyte	result1, local03 wz
208c0     01 22 06 51 |  if_ne	add	local03, #1
208c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
208c8                 | LR__2781
208c8     09 23 82 F1 | 	sub	local03, arg01
208cc     11 25 02 F6 | 	mov	local04, local03
208d0     10 13 02 F6 | 	mov	arg01, local02
208d4     09 23 02 F6 | 	mov	local03, arg01
208d8     97 06 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
208dc                 | LR__2782
208dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
208e0     01 22 06 51 |  if_ne	add	local03, #1
208e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2782
208e8                 | LR__2783
208e8     09 23 82 F1 | 	sub	local03, arg01
208ec     12 13 02 F6 | 	mov	arg01, local04
208f0     11 13 02 F1 | 	add	arg01, local03
208f4     01 12 06 F1 | 	add	arg01, #1
208f8     24 3E B0 FD | 	call	#__system___gc_alloc_managed
208fc     FD 26 0A F6 | 	mov	local05, result1 wz
20900     28 00 90 AD |  if_e	jmp	#LR__2784
20904     13 13 02 F6 | 	mov	arg01, local05
20908     0F 15 02 F6 | 	mov	arg02, local01
2090c     12 17 02 F6 | 	mov	arg03, local04
20910     50 FE BF FD | 	call	#__system____builtin_memmove
20914     13 13 02 F6 | 	mov	arg01, local05
20918     12 13 02 F1 | 	add	arg01, local04
2091c     01 22 06 F1 | 	add	local03, #1
20920     10 15 02 F6 | 	mov	arg02, local02
20924     11 17 02 F6 | 	mov	arg03, local03
20928     38 FE BF FD | 	call	#__system____builtin_memmove
2092c                 | LR__2784
2092c     13 FB 01 F6 | 	mov	result1, local05
20930     A7 F0 03 F6 | 	mov	ptra, fp
20934     B2 00 A0 FD | 	call	#popregs_
20938                 | __system___string_concat_ret
20938     2D 00 64 FD | 	ret
2093c                 | 
2093c                 | __system___tx
2093c     02 4A 05 F6 | 	mov	COUNT_, #2
20940     A8 00 A0 FD | 	call	#pushregs_
20944     09 1F 02 F6 | 	mov	local01, arg01
20948     0A 1E 0E F2 | 	cmp	local01, #10 wz
2094c     18 00 90 5D |  if_ne	jmp	#LR__2790
20950     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20954     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20958     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2095c     02 20 CE F7 | 	test	local02, #2 wz
20960     0D 12 06 56 |  if_ne	mov	arg01, #13
20964     6C FC BF 5D |  if_ne	call	#__system___txraw
20968                 | LR__2790
20968     0F 13 02 F6 | 	mov	arg01, local01
2096c     64 FC BF FD | 	call	#__system___txraw
20970     A7 F0 03 F6 | 	mov	ptra, fp
20974     B2 00 A0 FD | 	call	#popregs_
20978                 | __system___tx_ret
20978     2D 00 64 FD | 	ret
2097c                 | 
2097c                 | __system___rx
2097c     01 4A 05 F6 | 	mov	COUNT_, #1
20980     A8 00 A0 FD | 	call	#pushregs_
20984                 | LR__2800
20984     00 12 06 F6 | 	mov	arg01, #0
20988     8C FC BF FD | 	call	#__system___rxraw
2098c     FD 1E 02 F6 | 	mov	local01, result1
20990     FF FF 7F FF 
20994     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20998     E8 FF 9F AD |  if_e	jmp	#LR__2800
2099c     0D 1E 0E F2 | 	cmp	local01, #13 wz
209a0     14 00 90 5D |  if_ne	jmp	#LR__2801
209a4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
209a8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
209ac     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
209b0     02 FA CD F7 | 	test	result1, #2 wz
209b4     0A 1E 06 56 |  if_ne	mov	local01, #10
209b8                 | LR__2801
209b8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
209bc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
209c0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
209c4     01 12 CE F7 | 	test	arg01, #1 wz
209c8     1C 00 90 AD |  if_e	jmp	#LR__2804
209cc     7F 1E 0E F2 | 	cmp	local01, #127 wz
209d0     0C 00 90 5D |  if_ne	jmp	#LR__2802
209d4     08 12 06 F6 | 	mov	arg01, #8
209d8     60 FF BF FD | 	call	#__system___tx
209dc     08 00 90 FD | 	jmp	#LR__2803
209e0                 | LR__2802
209e0     0F 13 02 F6 | 	mov	arg01, local01
209e4     54 FF BF FD | 	call	#__system___tx
209e8                 | LR__2803
209e8                 | LR__2804
209e8     0F FB 01 F6 | 	mov	result1, local01
209ec     A7 F0 03 F6 | 	mov	ptra, fp
209f0     B2 00 A0 FD | 	call	#popregs_
209f4                 | __system___rx_ret
209f4     2D 00 64 FD | 	ret
209f8                 | 
209f8                 | __system___pinwrite
209f8     09 01 02 F6 | 	mov	_var01, arg01
209fc     1F 00 06 F5 | 	and	_var01, #31
20a00     20 12 CE F7 | 	test	arg01, #32 wz
20a04     06 12 46 F0 | 	shr	arg01, #6
20a08     09 13 CA F9 | 	bmask	arg01, arg01
20a0c     00 13 62 F0 | 	shl	arg01, _var01
20a10     00 15 62 F0 | 	shl	arg02, _var01
20a14     1C 00 90 AD |  if_e	jmp	#LR__2810
20a18     09 F7 43 F5 | 	or	dirb, arg01
20a1c     FD 01 02 F6 | 	mov	_var01, outb
20a20     09 01 22 F5 | 	andn	_var01, arg01
20a24     09 15 02 F5 | 	and	arg02, arg01
20a28     0A 01 42 F5 | 	or	_var01, arg02
20a2c     00 FB 03 F6 | 	mov	outb, _var01
20a30     18 00 90 FD | 	jmp	#LR__2811
20a34                 | LR__2810
20a34     09 F5 43 F5 | 	or	dira, arg01
20a38     FC 01 02 F6 | 	mov	_var01, outa
20a3c     09 01 22 F5 | 	andn	_var01, arg01
20a40     09 15 02 F5 | 	and	arg02, arg01
20a44     0A 01 42 F5 | 	or	_var01, arg02
20a48     00 F9 03 F6 | 	mov	outa, _var01
20a4c                 | LR__2811
20a4c                 | __system___pinwrite_ret
20a4c     2D 00 64 FD | 	ret
20a50                 | 
20a50                 | __system___basic_read_line
20a50     06 4A 05 F6 | 	mov	COUNT_, #6
20a54     A8 00 A0 FD | 	call	#pushregs_
20a58     09 1F 02 F6 | 	mov	local01, arg01
20a5c     00 20 06 F6 | 	mov	local02, #0
20a60     18 22 06 F6 | 	mov	local03, #24
20a64     00 24 06 F6 | 	mov	local04, #0
20a68     18 12 06 F6 | 	mov	arg01, #24
20a6c     B0 3C B0 FD | 	call	#__system___gc_alloc_managed
20a70     FD 26 0A F6 | 	mov	local05, result1 wz
20a74     13 FB 01 A6 |  if_e	mov	result1, local05
20a78     B0 00 90 AD |  if_e	jmp	#LR__2823
20a7c                 | LR__2820
20a7c     0F 13 02 F6 | 	mov	arg01, local01
20a80     78 0B B0 FD | 	call	#__system___basic_get_char
20a84     FD 28 02 F6 | 	mov	local06, result1
20a88     01 28 56 F2 | 	cmps	local06, #1 wc
20a8c     8C 00 90 CD |  if_b	jmp	#LR__2822
20a90     0A 28 0E F2 | 	cmp	local06, #10 wz
20a94     10 00 90 5D |  if_ne	jmp	#LR__2821
20a98     00 24 0E F2 | 	cmp	local04, #0 wz
20a9c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20aa0     01 20 86 11 |  if_a	sub	local02, #1
20aa4     74 00 90 FD | 	jmp	#LR__2822
20aa8                 | LR__2821
20aa8     0D 28 0E F2 | 	cmp	local06, #13 wz
20aac     01 24 06 A6 |  if_e	mov	local04, #1
20ab0     00 24 06 56 |  if_ne	mov	local04, #0
20ab4     08 28 0E F2 | 	cmp	local06, #8 wz
20ab8     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20abc     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20ac0     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20ac4     B4 FF 9F AD |  if_e	jmp	#LR__2820
20ac8     13 17 02 F6 | 	mov	arg03, local05
20acc     10 17 02 F1 | 	add	arg03, local02
20ad0     0B 29 42 FC | 	wrbyte	local06, arg03
20ad4     01 20 06 F1 | 	add	local02, #1
20ad8     11 21 0A F2 | 	cmp	local02, local03 wz
20adc     9C FF 9F 5D |  if_ne	jmp	#LR__2820
20ae0     11 13 02 F6 | 	mov	arg01, local03
20ae4     20 12 06 F1 | 	add	arg01, #32
20ae8     34 3C B0 FD | 	call	#__system___gc_alloc_managed
20aec     FD 28 0A F6 | 	mov	local06, result1 wz
20af0     14 FB 01 A6 |  if_e	mov	result1, local06
20af4     34 00 90 AD |  if_e	jmp	#LR__2823
20af8     14 13 02 F6 | 	mov	arg01, local06
20afc     13 15 02 F6 | 	mov	arg02, local05
20b00     11 17 02 F6 | 	mov	arg03, local03
20b04     5C FC BF FD | 	call	#__system____builtin_memmove
20b08     20 22 06 F1 | 	add	local03, #32
20b0c     13 13 02 F6 | 	mov	arg01, local05
20b10     48 3D B0 FD | 	call	#__system___gc_free
20b14     14 27 02 F6 | 	mov	local05, local06
20b18     60 FF 9F FD | 	jmp	#LR__2820
20b1c                 | LR__2822
20b1c     13 29 02 F6 | 	mov	local06, local05
20b20     10 29 02 F1 | 	add	local06, local02
20b24     14 01 48 FC | 	wrbyte	#0, local06
20b28     13 FB 01 F6 | 	mov	result1, local05
20b2c                 | LR__2823
20b2c     A7 F0 03 F6 | 	mov	ptra, fp
20b30     B2 00 A0 FD | 	call	#popregs_
20b34                 | __system___basic_read_line_ret
20b34     2D 00 64 FD | 	ret
20b38                 | 
20b38                 | __system___waitms
20b38     09 01 02 F6 | 	mov	_var01, arg01
20b3c     1A 02 62 FD | 	getct	_var02
20b40     14 04 06 FB | 	rdlong	_var03, #20
20b44     97 14 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
20b48                 | LR__2830
20b48     01 00 00 FF 
20b4c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20b50     1C 00 90 CD |  if_b	jmp	#LR__2832
20b54     02 03 02 F1 | 	add	_var02, _var03
20b58     01 13 02 F6 | 	mov	arg01, _var02
20b5c     00 12 66 FA | 	addct1	arg01, #0
20b60     24 22 60 FD | 	waitct1
20b64     01 00 00 FF 
20b68     E8 01 86 F1 | 	sub	_var01, ##1000
20b6c     D8 FF 9F FD | 	jmp	#LR__2830
20b70                 | LR__2831
20b70                 | LR__2832
20b70     01 00 56 F2 | 	cmps	_var01, #1 wc
20b74     28 00 90 CD |  if_b	jmp	#LR__2833
20b78     02 01 02 FD | 	qmul	_var01, _var03
20b7c     01 00 00 FF 
20b80     E8 17 06 F6 | 	mov	arg03, ##1000
20b84     19 FA 61 FD | 	getqy	result1
20b88     18 12 62 FD | 	getqx	arg01
20b8c     28 FA 61 FD | 	setq	result1
20b90     0B 13 12 FD | 	qdiv	arg01, arg03
20b94     18 12 62 FD | 	getqx	arg01
20b98     01 13 62 FA | 	addct1	arg01, _var02
20b9c     24 22 60 FD | 	waitct1
20ba0                 | LR__2833
20ba0                 | __system___waitms_ret
20ba0     2D 00 64 FD | 	ret
20ba4                 | 
20ba4                 | __system___waitus
20ba4     09 01 02 F6 | 	mov	_var01, arg01
20ba8     1A 02 62 FD | 	getct	_var02
20bac     14 04 06 FB | 	rdlong	_var03, #20
20bb0     97 14 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
20bb4                 | LR__2840
20bb4     A1 07 00 FF 
20bb8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20bbc     1C 00 90 CD |  if_b	jmp	#LR__2842
20bc0     02 03 02 F1 | 	add	_var02, _var03
20bc4     01 13 02 F6 | 	mov	arg01, _var02
20bc8     00 12 66 FA | 	addct1	arg01, #0
20bcc     24 22 60 FD | 	waitct1
20bd0     A1 07 00 FF 
20bd4     40 00 86 F1 | 	sub	_var01, ##1000000
20bd8     D8 FF 9F FD | 	jmp	#LR__2840
20bdc                 | LR__2841
20bdc                 | LR__2842
20bdc     01 00 56 F2 | 	cmps	_var01, #1 wc
20be0     28 00 90 CD |  if_b	jmp	#LR__2843
20be4     02 01 02 FD | 	qmul	_var01, _var03
20be8     A1 07 00 FF 
20bec     40 16 06 F6 | 	mov	arg03, ##1000000
20bf0     19 FA 61 FD | 	getqy	result1
20bf4     18 12 62 FD | 	getqx	arg01
20bf8     28 FA 61 FD | 	setq	result1
20bfc     0B 13 12 FD | 	qdiv	arg01, arg03
20c00     18 FA 61 FD | 	getqx	result1
20c04     FD 02 62 FA | 	addct1	_var02, result1
20c08     24 22 60 FD | 	waitct1
20c0c                 | LR__2843
20c0c                 | __system___waitus_ret
20c0c     2D 00 64 FD | 	ret
20c10                 | 
20c10                 | __system___mount
20c10     0B 4A 05 F6 | 	mov	COUNT_, #11
20c14     A8 00 A0 FD | 	call	#pushregs_
20c18     09 1F 02 F6 | 	mov	local01, arg01
20c1c     0A 21 0A F6 | 	mov	local02, arg02 wz
20c20     01 22 66 F6 | 	neg	local03, #1
20c24     01 FA 65 A6 |  if_e	neg	result1, #1
20c28     98 02 90 AD |  if_e	jmp	#LR__2865
20c2c     0F FB C1 FA | 	rdbyte	result1, local01
20c30     2F FA 0D F2 | 	cmp	result1, #47 wz
20c34     28 00 90 5D |  if_ne	jmp	#LR__2852
20c38     0F 13 02 F6 | 	mov	arg01, local01
20c3c     09 25 02 F6 | 	mov	local04, arg01
20c40     97 06 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
20c44                 | LR__2850
20c44     12 FB C9 FA | 	rdbyte	result1, local04 wz
20c48     01 24 06 51 |  if_ne	add	local04, #1
20c4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2850
20c50                 | LR__2851
20c50     09 25 82 F1 | 	sub	local04, arg01
20c54     12 FB 01 F6 | 	mov	result1, local04
20c58     10 FA 55 F2 | 	cmps	result1, #16 wc
20c5c     14 00 90 CD |  if_b	jmp	#LR__2853
20c60                 | LR__2852
20c60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20c64     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20c68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20c6c     01 FA 65 F6 | 	neg	result1, #1
20c70     50 02 90 FD | 	jmp	#LR__2865
20c74                 | LR__2853
20c74     00 26 06 F6 | 	mov	local05, #0
20c78                 | LR__2854
20c78     04 26 56 F2 | 	cmps	local05, #4 wc
20c7c     B0 00 90 3D |  if_ae	jmp	#LR__2859
20c80     13 13 02 F6 | 	mov	arg01, local05
20c84     02 12 66 F0 | 	shl	arg01, #2
20c88     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20c8c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20c90     09 FB 09 FB | 	rdlong	result1, arg01 wz
20c94     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20c98     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20c9c     13 23 02 86 |  if_c_and_z	mov	local03, local05
20ca0     84 00 90 8D |  if_c_and_z	jmp	#LR__2858
20ca4     13 13 02 F6 | 	mov	arg01, local05
20ca8     02 12 66 F0 | 	shl	arg01, #2
20cac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20cb0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20cb4     09 13 02 FB | 	rdlong	arg01, arg01
20cb8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20cbc     09 25 02 F6 | 	mov	local04, arg01
20cc0     97 06 48 FB | 	callpa	#(@LR__2856-@LR__2855)>>2,fcache_load_ptr_
20cc4                 | LR__2855
20cc4     12 FB C9 FA | 	rdbyte	result1, local04 wz
20cc8     01 24 06 51 |  if_ne	add	local04, #1
20ccc     F4 FF 9F 5D |  if_ne	jmp	#LR__2855
20cd0                 | LR__2856
20cd0     09 25 82 F1 | 	sub	local04, arg01
20cd4     12 29 02 F6 | 	mov	local06, local04
20cd8     14 13 02 F6 | 	mov	arg01, local06
20cdc     0F 13 02 F1 | 	add	arg01, local01
20ce0     09 FB C1 FA | 	rdbyte	result1, arg01
20ce4     2F FA 0D F2 | 	cmp	result1, #47 wz
20ce8     14 2B 02 56 |  if_ne	mov	local07, local06
20cec     0F 2B 02 51 |  if_ne	add	local07, local01
20cf0     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20cf4     30 00 90 5D |  if_ne	jmp	#LR__2857
20cf8     13 17 02 F6 | 	mov	arg03, local05
20cfc     02 16 66 F0 | 	shl	arg03, #2
20d00     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20d04     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20d08     0B 15 02 FB | 	rdlong	arg02, arg03
20d0c     0F 13 02 F6 | 	mov	arg01, local01
20d10     14 17 02 F6 | 	mov	arg03, local06
20d14     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20d18     84 4E B0 FD | 	call	#__system__strncmp
20d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
20d20     13 23 02 A6 |  if_e	mov	local03, local05
20d24     08 00 90 AD |  if_e	jmp	#LR__2859
20d28                 | LR__2857
20d28                 | LR__2858
20d28     01 26 06 F1 | 	add	local05, #1
20d2c     48 FF 9F FD | 	jmp	#LR__2854
20d30                 | LR__2859
20d30     FF FF 7F FF 
20d34     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20d38     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20d3c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20d40     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20d44     01 FA 65 A6 |  if_e	neg	result1, #1
20d48     78 01 90 AD |  if_e	jmp	#LR__2865
20d4c     11 27 02 F6 | 	mov	local05, local03
20d50     13 2B 02 F6 | 	mov	local07, local05
20d54     02 2A 66 F0 | 	shl	local07, #2
20d58     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20d5c     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20d60     15 29 0A FB | 	rdlong	local06, local07 wz
20d64     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20d68     58 00 90 AD |  if_e	jmp	#LR__2860
20d6c     4C 28 06 F1 | 	add	local06, #76
20d70     14 2B 0A FB | 	rdlong	local07, local06 wz
20d74     4C 28 86 F1 | 	sub	local06, #76
20d78     48 00 90 AD |  if_e	jmp	#LR__2860
20d7c     4C 28 06 F1 | 	add	local06, #76
20d80     14 2B 02 FB | 	rdlong	local07, local06
20d84     15 23 02 F6 | 	mov	local03, local07
20d88     13 2A 46 F7 | 	zerox	local07, #19
20d8c     14 22 46 F0 | 	shr	local03, #20
20d90     02 22 66 F0 | 	shl	local03, #2
20d94     ED 22 02 F1 | 	add	local03, __methods__
20d98     11 23 02 FB | 	rdlong	local03, local03
20d9c     13 29 02 F6 | 	mov	local06, local05
20da0     02 28 66 F0 | 	shl	local06, #2
20da4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20da8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20dac     14 13 02 FB | 	rdlong	arg01, local06
20db0     F2 28 02 F6 | 	mov	local06, objptr
20db4     15 E5 01 F6 | 	mov	objptr, local07
20db8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20dbc     2D 22 62 FD | 	call	local03
20dc0     14 E5 01 F6 | 	mov	objptr, local06
20dc4                 | LR__2860
20dc4     13 2D 02 F6 | 	mov	local08, local05
20dc8     02 2C 66 F0 | 	shl	local08, #2
20dcc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20dd0     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20dd4     16 21 62 FC | 	wrlong	local02, local08
20dd8     00 20 0E F2 | 	cmp	local02, #0 wz
20ddc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20de0     18 00 90 5D |  if_ne	jmp	#LR__2861
20de4     02 26 66 F0 | 	shl	local05, #2
20de8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20dec     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20df0     13 01 68 FC | 	wrlong	#0, local05
20df4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20df8     C4 00 90 FD | 	jmp	#LR__2864
20dfc                 | LR__2861
20dfc     13 2F 02 F6 | 	mov	local09, local05
20e00     04 2E 66 F0 | 	shl	local09, #4
20e04     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20e08     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20e0c     17 13 02 F6 | 	mov	arg01, local09
20e10     0F 15 02 F6 | 	mov	arg02, local01
20e14     10 16 06 F6 | 	mov	arg03, #16
20e18     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20e1c     D4 4C B0 FD | 	call	#__system__strncpy
20e20     48 20 06 F1 | 	add	local02, #72
20e24     10 2D 0A FB | 	rdlong	local08, local02 wz
20e28     48 20 86 F1 | 	sub	local02, #72
20e2c     7C 00 90 AD |  if_e	jmp	#LR__2863
20e30     48 20 06 F1 | 	add	local02, #72
20e34     10 2D 02 FB | 	rdlong	local08, local02
20e38     16 31 02 F6 | 	mov	local10, local08
20e3c     13 2C 46 F7 | 	zerox	local08, #19
20e40     14 30 46 F0 | 	shr	local10, #20
20e44     02 30 66 F0 | 	shl	local10, #2
20e48     ED 30 02 F1 | 	add	local10, __methods__
20e4c     18 31 02 FB | 	rdlong	local10, local10
20e50     17 13 02 F6 | 	mov	arg01, local09
20e54     F2 32 02 F6 | 	mov	local11, objptr
20e58     16 E5 01 F6 | 	mov	objptr, local08
20e5c     2D 30 62 FD | 	call	local10
20e60     19 E5 01 F6 | 	mov	objptr, local11
20e64     FD 12 0A F6 | 	mov	arg01, result1 wz
20e68     40 00 90 AD |  if_e	jmp	#LR__2862
20e6c     13 2D 02 F6 | 	mov	local08, local05
20e70     02 2C 66 F0 | 	shl	local08, #2
20e74     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20e78     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20e7c     16 01 68 FC | 	wrlong	#0, local08
20e80     02 26 66 F0 | 	shl	local05, #2
20e84     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20e88     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20e8c     13 01 68 FC | 	wrlong	#0, local05
20e90     09 13 6A F6 | 	neg	arg01, arg01 wz
20e94     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
20e98     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20e9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20ea0     01 FA 65 56 |  if_ne	neg	result1, #1
20ea4     00 FA 05 A6 |  if_e	mov	result1, #0
20ea8     18 00 90 FD | 	jmp	#LR__2865
20eac                 | LR__2862
20eac                 | LR__2863
20eac     02 26 66 F0 | 	shl	local05, #2
20eb0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20eb4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20eb8     13 2F 62 FC | 	wrlong	local09, local05
20ebc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ec0                 | LR__2864
20ec0     00 FA 05 F6 | 	mov	result1, #0
20ec4                 | LR__2865
20ec4     A7 F0 03 F6 | 	mov	ptra, fp
20ec8     B2 00 A0 FD | 	call	#popregs_
20ecc                 | __system___mount_ret
20ecc     2D 00 64 FD | 	ret
20ed0                 | 
20ed0                 | __system___chdir
20ed0     00 4A 05 F6 | 	mov	COUNT_, #0
20ed4     A8 00 A0 FD | 	call	#pushregs_
20ed8     40 F0 07 F1 | 	add	ptra, #64
20edc     04 4E 05 F1 | 	add	fp, #4
20ee0     A7 12 62 FC | 	wrlong	arg01, fp
20ee4     04 4E 05 F1 | 	add	fp, #4
20ee8     A7 14 02 F6 | 	mov	arg02, fp
20eec     08 4E 85 F1 | 	sub	fp, #8
20ef0     A4 48 B0 FD | 	call	#__system__stat
20ef4     3C 4E 05 F1 | 	add	fp, #60
20ef8     A7 FA 61 FC | 	wrlong	result1, fp
20efc     3C 4E 85 F1 | 	sub	fp, #60
20f00     00 FA 0D F2 | 	cmp	result1, #0 wz
20f04     3C 4E 05 51 |  if_ne	add	fp, #60
20f08     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20f0c     3C 4E 85 51 |  if_ne	sub	fp, #60
20f10     BC 00 90 5D |  if_ne	jmp	#LR__2872
20f14     10 4E 05 F1 | 	add	fp, #16
20f18     A7 12 02 FB | 	rdlong	arg01, fp
20f1c     10 4E 85 F1 | 	sub	fp, #16
20f20     78 00 00 FF 
20f24     00 12 06 F5 | 	and	arg01, ##61440
20f28     08 00 00 FF 
20f2c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
20f30     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
20f34     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
20f38     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
20f3c     01 FA 65 56 |  if_ne	neg	result1, #1
20f40     8C 00 90 5D |  if_ne	jmp	#LR__2872
20f44     04 4E 05 F1 | 	add	fp, #4
20f48     A7 16 02 FB | 	rdlong	arg03, fp
20f4c     04 4E 85 F1 | 	sub	fp, #4
20f50     0B 17 C2 FA | 	rdbyte	arg03, arg03
20f54     2F 16 0E F2 | 	cmp	arg03, #47 wz
20f58     24 00 90 5D |  if_ne	jmp	#LR__2870
20f5c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20f60     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f64     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20f68     04 4E 05 F1 | 	add	fp, #4
20f6c     A7 14 02 FB | 	rdlong	arg02, fp
20f70     04 4E 85 F1 | 	sub	fp, #4
20f74     00 17 06 F6 | 	mov	arg03, #256
20f78     78 4B B0 FD | 	call	#__system__strncpy
20f7c     4C 00 90 FD | 	jmp	#LR__2871
20f80                 | LR__2870
20f80     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20f84     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20f88     38 4E 05 F1 | 	add	fp, #56
20f8c     A7 12 62 FC | 	wrlong	arg01, fp
20f90     38 4E 85 F1 | 	sub	fp, #56
20f94     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
20f98     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
20f9c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20fa0     00 17 06 F6 | 	mov	arg03, #256
20fa4     4C 4B B0 FD | 	call	#__system__strncpy
20fa8     38 4E 05 F1 | 	add	fp, #56
20fac     A7 12 02 FB | 	rdlong	arg01, fp
20fb0     34 4E 85 F1 | 	sub	fp, #52
20fb4     A7 14 02 FB | 	rdlong	arg02, fp
20fb8     04 4E 85 F1 | 	sub	fp, #4
20fbc     84 E6 05 F1 | 	add	ptr___system__dat__, #132
20fc0     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
20fc4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
20fc8     10 00 B0 FD | 	call	#__system____getvfsforfile
20fcc                 | LR__2871
20fcc     00 FA 05 F6 | 	mov	result1, #0
20fd0                 | LR__2872
20fd0     A7 F0 03 F6 | 	mov	ptra, fp
20fd4     B2 00 A0 FD | 	call	#popregs_
20fd8                 | __system___chdir_ret
20fd8     2D 00 64 FD | 	ret
20fdc                 | 
20fdc                 | __system____getvfsforfile
20fdc     0E 4A 05 F6 | 	mov	COUNT_, #14
20fe0     A8 00 A0 FD | 	call	#pushregs_
20fe4     09 1F 02 F6 | 	mov	local01, arg01
20fe8     0A 21 02 F6 | 	mov	local02, arg02
20fec     0B 23 02 F6 | 	mov	local03, arg03
20ff0     97 10 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20ff4                 | LR__2880
20ff4     10 FB C1 FA | 	rdbyte	result1, local02
20ff8     2F FA 0D F2 | 	cmp	result1, #47 wz
20ffc     01 20 06 A1 |  if_e	add	local02, #1
21000     10 25 C2 AA |  if_e	rdbyte	local04, local02
21004     01 20 86 A1 |  if_e	sub	local02, #1
21008     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
2100c     01 20 06 A1 |  if_e	add	local02, #1
21010     E0 FF 9F AD |  if_e	jmp	#LR__2880
21014                 | LR__2881
21014     10 25 C2 FA | 	rdbyte	local04, local02
21018     2F 24 0E F2 | 	cmp	local04, #47 wz
2101c     14 00 90 5D |  if_ne	jmp	#LR__2882
21020     0F 13 02 F6 | 	mov	arg01, local01
21024     10 15 02 F6 | 	mov	arg02, local02
21028     00 17 06 F6 | 	mov	arg03, #256
2102c     C4 4A B0 FD | 	call	#__system__strncpy
21030     7C 00 90 FD | 	jmp	#LR__2884
21034                 | LR__2882
21034     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21038     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2103c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21040     0F 13 02 F6 | 	mov	arg01, local01
21044     00 17 06 F6 | 	mov	arg03, #256
21048     A8 4A B0 FD | 	call	#__system__strncpy
2104c     10 25 CA FA | 	rdbyte	local04, local02 wz
21050     5C 00 90 AD |  if_e	jmp	#LR__2883
21054     10 25 C2 FA | 	rdbyte	local04, local02
21058     2E 24 0E F2 | 	cmp	local04, #46 wz
2105c     01 20 06 A1 |  if_e	add	local02, #1
21060     10 27 C2 AA |  if_e	rdbyte	local05, local02
21064     01 20 86 A1 |  if_e	sub	local02, #1
21068     13 29 02 A6 |  if_e	mov	local06, local05
2106c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21070     3C 00 90 AD |  if_e	jmp	#LR__2883
21074     0F 27 C2 FA | 	rdbyte	local05, local01
21078     2F 26 0E F2 | 	cmp	local05, #47 wz
2107c     01 1E 06 A1 |  if_e	add	local01, #1
21080     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21084     01 1E 86 A1 |  if_e	sub	local01, #1
21088     00 24 4E A2 |  if_e	cmps	local04, #0 wz
2108c     80 01 00 5F 
21090     8C 14 06 56 |  if_ne	mov	arg02, ##@LR__4980
21094     0F 13 02 56 |  if_ne	mov	arg01, local01
21098     00 17 06 56 |  if_ne	mov	arg03, #256
2109c     A0 4A B0 5D |  if_ne	call	#__system__strncat
210a0     0F 13 02 F6 | 	mov	arg01, local01
210a4     10 15 02 F6 | 	mov	arg02, local02
210a8     00 17 06 F6 | 	mov	arg03, #256
210ac     90 4A B0 FD | 	call	#__system__strncat
210b0                 | LR__2883
210b0                 | LR__2884
210b0     0F 13 02 F6 | 	mov	arg01, local01
210b4     48 4C B0 FD | 	call	#__system___normalizeName
210b8     0F 25 CA FA | 	rdbyte	local04, local01 wz
210bc     1C 00 90 AD |  if_e	jmp	#LR__2885
210c0     0F 25 C2 FA | 	rdbyte	local04, local01
210c4     2F 24 0E F2 | 	cmp	local04, #47 wz
210c8     01 1E 06 A1 |  if_e	add	local01, #1
210cc     0F 29 C2 AA |  if_e	rdbyte	local06, local01
210d0     01 1E 86 A1 |  if_e	sub	local01, #1
210d4     00 28 4E A2 |  if_e	cmps	local06, #0 wz
210d8     18 00 90 5D |  if_ne	jmp	#LR__2886
210dc                 | LR__2885
210dc     01 00 00 FF 
210e0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
210e4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
210e8     01 00 00 FF 
210ec     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
210f0     EC 01 90 FD | 	jmp	#LR__2900
210f4                 | LR__2886
210f4     00 2A 06 F6 | 	mov	local07, #0
210f8                 | LR__2887
210f8     04 2A 56 F2 | 	cmps	local07, #4 wc
210fc     CC 01 90 3D |  if_ae	jmp	#LR__2899
21100     15 29 02 F6 | 	mov	local06, local07
21104     02 28 66 F0 | 	shl	local06, #2
21108     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2110c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21110     14 29 0A FB | 	rdlong	local06, local06 wz
21114     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21118     A8 01 90 AD |  if_e	jmp	#LR__2898
2111c     15 25 02 F6 | 	mov	local04, local07
21120     02 24 66 F0 | 	shl	local04, #2
21124     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21128     F3 24 02 F1 | 	add	local04, ptr___system__dat__
2112c     12 13 02 FB | 	rdlong	arg01, local04
21130     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21134     09 2D 02 F6 | 	mov	local08, arg01
21138     97 06 48 FB | 	callpa	#(@LR__2889-@LR__2888)>>2,fcache_load_ptr_
2113c                 | LR__2888
2113c     16 FB C9 FA | 	rdbyte	result1, local08 wz
21140     01 2C 06 51 |  if_ne	add	local08, #1
21144     F4 FF 9F 5D |  if_ne	jmp	#LR__2888
21148                 | LR__2889
21148     09 2D 82 F1 | 	sub	local08, arg01
2114c     16 2F 02 F6 | 	mov	local09, local08
21150     17 25 02 F6 | 	mov	local04, local09
21154     0F 25 02 F1 | 	add	local04, local01
21158     12 29 C2 FA | 	rdbyte	local06, local04
2115c     2F 28 0E F2 | 	cmp	local06, #47 wz
21160     17 31 02 56 |  if_ne	mov	local10, local09
21164     0F 31 02 51 |  if_ne	add	local10, local01
21168     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
2116c     54 01 90 5D |  if_ne	jmp	#LR__2897
21170     15 17 02 F6 | 	mov	arg03, local07
21174     02 16 66 F0 | 	shl	arg03, #2
21178     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2117c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21180     0B 15 02 FB | 	rdlong	arg02, arg03
21184     17 17 02 F6 | 	mov	arg03, local09
21188     0F 13 02 F6 | 	mov	arg01, local01
2118c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21190     0C 4A B0 FD | 	call	#__system__strncmp
21194     00 FA 4D F2 | 	cmps	result1, #0 wz
21198     28 01 90 5D |  if_ne	jmp	#LR__2897
2119c     15 33 02 F6 | 	mov	local11, local07
211a0     02 32 66 F0 | 	shl	local11, #2
211a4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
211a8     F3 32 02 F1 | 	add	local11, ptr___system__dat__
211ac     19 35 02 FB | 	rdlong	local12, local11
211b0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
211b4     97 22 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
211b8                 | LR__2890
211b8     17 29 02 F6 | 	mov	local06, local09
211bc     01 28 06 F1 | 	add	local06, #1
211c0     0F 29 02 F1 | 	add	local06, local01
211c4     14 33 C2 FA | 	rdbyte	local11, local06
211c8     2E 32 0E F2 | 	cmp	local11, #46 wz
211cc     2C 00 90 5D |  if_ne	jmp	#LR__2892
211d0     17 33 02 F6 | 	mov	local11, local09
211d4     02 32 06 F1 | 	add	local11, #2
211d8     0F 33 02 F1 | 	add	local11, local01
211dc     19 31 C2 FA | 	rdbyte	local10, local11
211e0     2F 30 0E F2 | 	cmp	local10, #47 wz
211e4     17 37 02 56 |  if_ne	mov	local13, local09
211e8     02 36 06 51 |  if_ne	add	local13, #2
211ec     0F 37 02 51 |  if_ne	add	local13, local01
211f0     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
211f4     01 2E 06 A1 |  if_e	add	local09, #1
211f8     BC FF 9F AD |  if_e	jmp	#LR__2890
211fc                 | LR__2891
211fc                 | LR__2892
211fc     00 22 0E F2 | 	cmp	local03, #0 wz
21200     11 13 02 56 |  if_ne	mov	arg01, local03
21204     0F 15 02 56 |  if_ne	mov	arg02, local01
21208     00 17 06 56 |  if_ne	mov	arg03, #256
2120c     E4 48 B0 5D |  if_ne	call	#__system__strncpy
21210     0F 15 02 F6 | 	mov	arg02, local01
21214     17 15 02 F1 | 	add	arg02, local09
21218     01 14 06 F1 | 	add	arg02, #1
2121c     0F 13 02 F6 | 	mov	arg01, local01
21220     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21224     0F 13 02 F6 | 	mov	arg01, local01
21228     09 2D 02 F6 | 	mov	local08, arg01
2122c     97 06 48 FB | 	callpa	#(@LR__2894-@LR__2893)>>2,fcache_load_ptr_
21230                 | LR__2893
21230     16 FB C9 FA | 	rdbyte	result1, local08 wz
21234     01 2C 06 51 |  if_ne	add	local08, #1
21238     F4 FF 9F 5D |  if_ne	jmp	#LR__2893
2123c                 | LR__2894
2123c     09 2D 82 F1 | 	sub	local08, arg01
21240     16 2F 02 F6 | 	mov	local09, local08
21244                 | LR__2895
21244     01 2E 56 F2 | 	cmps	local09, #1 wc
21248     70 00 90 CD |  if_b	jmp	#LR__2896
2124c     17 25 02 F6 | 	mov	local04, local09
21250     0F 25 02 F1 | 	add	local04, local01
21254     12 33 C2 FA | 	rdbyte	local11, local04
21258     2F 32 0E F2 | 	cmp	local11, #47 wz
2125c     17 33 02 A6 |  if_e	mov	local11, local09
21260     0F 33 02 A1 |  if_e	add	local11, local01
21264     19 01 48 AC |  if_e	wrbyte	#0, local11
21268     01 2E 86 A1 |  if_e	sub	local09, #1
2126c     D4 FF 9F AD |  if_e	jmp	#LR__2895
21270     17 25 02 F6 | 	mov	local04, local09
21274     0F 25 02 F1 | 	add	local04, local01
21278     12 33 C2 FA | 	rdbyte	local11, local04
2127c     2E 32 0E F2 | 	cmp	local11, #46 wz
21280     38 00 90 5D |  if_ne	jmp	#LR__2896
21284     02 2E 56 F2 | 	cmps	local09, #2 wc
21288     30 00 90 CD |  if_b	jmp	#LR__2896
2128c     17 39 02 F6 | 	mov	local14, local09
21290     01 38 86 F1 | 	sub	local14, #1
21294     0F 39 02 F1 | 	add	local14, local01
21298     1C 27 C2 FA | 	rdbyte	local05, local14
2129c     2F 26 0E F2 | 	cmp	local05, #47 wz
212a0     18 00 90 5D |  if_ne	jmp	#LR__2896
212a4     17 25 02 F6 | 	mov	local04, local09
212a8     01 24 86 F1 | 	sub	local04, #1
212ac     0F 25 02 F1 | 	add	local04, local01
212b0     12 01 48 FC | 	wrbyte	#0, local04
212b4     02 2E 86 F1 | 	sub	local09, #2
212b8     88 FF 9F FD | 	jmp	#LR__2895
212bc                 | LR__2896
212bc     1A FB 01 F6 | 	mov	result1, local12
212c0     1C 00 90 FD | 	jmp	#LR__2900
212c4                 | LR__2897
212c4                 | LR__2898
212c4     01 2A 06 F1 | 	add	local07, #1
212c8     2C FE 9F FD | 	jmp	#LR__2887
212cc                 | LR__2899
212cc     03 00 00 FF 
212d0     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
212d4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
212d8     03 00 00 FF 
212dc     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
212e0                 | LR__2900
212e0     A7 F0 03 F6 | 	mov	ptra, fp
212e4     B2 00 A0 FD | 	call	#popregs_
212e8                 | __system____getvfsforfile_ret
212e8     2D 00 64 FD | 	ret
212ec                 | 
212ec                 | __system___basic_open
212ec     05 4A 05 F6 | 	mov	COUNT_, #5
212f0     A8 00 A0 FD | 	call	#pushregs_
212f4     0A 1F 02 F6 | 	mov	local01, arg02
212f8     0B 21 02 F6 | 	mov	local02, arg03
212fc     0C 23 02 F6 | 	mov	local03, arg04
21300     00 24 06 F6 | 	mov	local04, #0
21304     C4 47 B0 FD | 	call	#__system____getftab
21308     FD 26 0A F6 | 	mov	local05, result1 wz
2130c     18 00 90 5D |  if_ne	jmp	#LR__2910
21310     EE 12 02 F6 | 	mov	arg01, abortchain
21314     0C 14 06 F6 | 	mov	arg02, #12
21318     01 16 06 F6 | 	mov	arg03, #1
2131c     DA 00 A0 FD | 	call	#__longjmp
21320     01 FA 65 F6 | 	neg	result1, #1
21324     14 01 90 FD | 	jmp	#LR__2919
21328                 | LR__2910
21328     08 26 06 F1 | 	add	local05, #8
2132c     13 FB 09 FB | 	rdlong	result1, local05 wz
21330     08 26 86 F1 | 	sub	local05, #8
21334     13 13 02 56 |  if_ne	mov	arg01, local05
21338     E4 3E B0 5D |  if_ne	call	#__system___closeraw
2133c     00 1E 0E F2 | 	cmp	local01, #0 wz
21340     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21344     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21348     3C 00 90 AD |  if_e	jmp	#LR__2912
2134c     0C 12 06 F6 | 	mov	arg01, #12
21350     CC 33 B0 FD | 	call	#__system___gc_alloc_managed
21354     FD 24 0A F6 | 	mov	local04, result1 wz
21358     18 00 90 5D |  if_ne	jmp	#LR__2911
2135c     EE 12 02 F6 | 	mov	arg01, abortchain
21360     07 14 06 F6 | 	mov	arg02, #7
21364     01 16 06 F6 | 	mov	arg03, #1
21368     DA 00 A0 FD | 	call	#__longjmp
2136c     01 FA 65 F6 | 	neg	result1, #1
21370     C8 00 90 FD | 	jmp	#LR__2919
21374                 | LR__2911
21374     12 01 68 FC | 	wrlong	#0, local04
21378     04 24 06 F1 | 	add	local04, #4
2137c     12 01 68 FC | 	wrlong	#0, local04
21380     04 24 86 F1 | 	sub	local04, #4
21384     13 25 62 FC | 	wrlong	local04, local05
21388                 | LR__2912
21388     00 1E 0E F2 | 	cmp	local01, #0 wz
2138c     20 00 90 AD |  if_e	jmp	#LR__2913
21390     12 1F 62 FC | 	wrlong	local01, local04
21394     12 FB 01 F6 | 	mov	result1, local04
21398     00 78 04 FF 
2139c     00 FA 45 F5 | 	or	result1, ##149946368
213a0     1C 26 06 F1 | 	add	local05, #28
213a4     13 FB 61 FC | 	wrlong	result1, local05
213a8     1C 26 86 F1 | 	sub	local05, #28
213ac     0C 00 90 FD | 	jmp	#LR__2914
213b0                 | LR__2913
213b0     1C 26 06 F1 | 	add	local05, #28
213b4     13 01 68 FC | 	wrlong	#0, local05
213b8     1C 26 86 F1 | 	sub	local05, #28
213bc                 | LR__2914
213bc     00 20 0E F2 | 	cmp	local02, #0 wz
213c0     28 00 90 AD |  if_e	jmp	#LR__2915
213c4     04 24 06 F1 | 	add	local04, #4
213c8     12 21 62 FC | 	wrlong	local02, local04
213cc     04 24 86 F1 | 	sub	local04, #4
213d0     12 FB 01 F6 | 	mov	result1, local04
213d4     00 80 04 FF 
213d8     00 FA 45 F5 | 	or	result1, ##150994944
213dc     20 26 06 F1 | 	add	local05, #32
213e0     13 FB 61 FC | 	wrlong	result1, local05
213e4     20 26 86 F1 | 	sub	local05, #32
213e8     0C 00 90 FD | 	jmp	#LR__2916
213ec                 | LR__2915
213ec     20 26 06 F1 | 	add	local05, #32
213f0     13 01 68 FC | 	wrlong	#0, local05
213f4     20 26 86 F1 | 	sub	local05, #32
213f8                 | LR__2916
213f8     00 22 0E F2 | 	cmp	local03, #0 wz
213fc     24 00 90 AD |  if_e	jmp	#LR__2917
21400     08 24 06 F1 | 	add	local04, #8
21404     12 23 62 FC | 	wrlong	local03, local04
21408     08 24 86 F1 | 	sub	local04, #8
2140c     00 88 04 FF 
21410     00 24 46 F5 | 	or	local04, ##152043520
21414     24 26 06 F1 | 	add	local05, #36
21418     13 25 62 FC | 	wrlong	local04, local05
2141c     24 26 86 F1 | 	sub	local05, #36
21420     0C 00 90 FD | 	jmp	#LR__2918
21424                 | LR__2917
21424     24 26 06 F1 | 	add	local05, #36
21428     13 01 68 FC | 	wrlong	#0, local05
2142c     24 26 86 F1 | 	sub	local05, #36
21430                 | LR__2918
21430     08 26 06 F1 | 	add	local05, #8
21434     13 0F 68 FC | 	wrlong	#7, local05
21438     00 FA 05 F6 | 	mov	result1, #0
2143c                 | LR__2919
2143c     A7 F0 03 F6 | 	mov	ptra, fp
21440     B2 00 A0 FD | 	call	#popregs_
21444                 | __system___basic_open_ret
21444     2D 00 64 FD | 	ret
21448                 | 
21448                 | __system___basic_open_string
21448     04 4A 05 F6 | 	mov	COUNT_, #4
2144c     A8 00 A0 FD | 	call	#pushregs_
21450     0A 1F 02 F6 | 	mov	local01, arg02
21454     0B 21 02 F6 | 	mov	local02, arg03
21458     70 46 B0 FD | 	call	#__system____getftab
2145c     FD 22 0A F6 | 	mov	local03, result1 wz
21460     18 00 90 5D |  if_ne	jmp	#LR__2920
21464     EE 12 02 F6 | 	mov	arg01, abortchain
21468     0C 14 06 F6 | 	mov	arg02, #12
2146c     01 16 06 F6 | 	mov	arg03, #1
21470     DA 00 A0 FD | 	call	#__longjmp
21474     01 FA 65 F6 | 	neg	result1, #1
21478     58 00 90 FD | 	jmp	#LR__2922
2147c                 | LR__2920
2147c     08 22 06 F1 | 	add	local03, #8
21480     11 19 0A FB | 	rdlong	arg04, local03 wz
21484     08 22 86 F1 | 	sub	local03, #8
21488     11 13 02 56 |  if_ne	mov	arg01, local03
2148c     90 3D B0 5D |  if_ne	call	#__system___closeraw
21490     0F 15 02 F6 | 	mov	arg02, local01
21494     10 17 02 F6 | 	mov	arg03, local02
21498     11 13 02 F6 | 	mov	arg01, local03
2149c     B6 19 06 F6 | 	mov	arg04, #438
214a0     78 3A B0 FD | 	call	#__system___openraw
214a4     FD 24 02 F6 | 	mov	local04, result1
214a8     00 24 56 F2 | 	cmps	local04, #0 wc
214ac     20 00 90 3D |  if_ae	jmp	#LR__2921
214b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
214b4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
214b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
214bc     EE 12 02 F6 | 	mov	arg01, abortchain
214c0     01 16 06 F6 | 	mov	arg03, #1
214c4     DA 00 A0 FD | 	call	#__longjmp
214c8     01 FA 65 F6 | 	neg	result1, #1
214cc     04 00 90 FD | 	jmp	#LR__2922
214d0                 | LR__2921
214d0     12 FB 01 F6 | 	mov	result1, local04
214d4                 | LR__2922
214d4     A7 F0 03 F6 | 	mov	ptra, fp
214d8     B2 00 A0 FD | 	call	#popregs_
214dc                 | __system___basic_open_string_ret
214dc     2D 00 64 FD | 	ret
214e0                 | 
214e0                 | __system___basic_print_char
214e0     03 4A 05 F6 | 	mov	COUNT_, #3
214e4     A8 00 A0 FD | 	call	#pushregs_
214e8     0A 1F 02 F6 | 	mov	local01, arg02
214ec     30 4D B0 FD | 	call	#__system___gettxfunc
214f0     FD 20 0A F6 | 	mov	local02, result1 wz
214f4     00 FA 05 A6 |  if_e	mov	result1, #0
214f8     30 00 90 AD |  if_e	jmp	#LR__2930
214fc     10 23 02 F6 | 	mov	local03, local02
21500     13 20 46 F7 | 	zerox	local02, #19
21504     14 22 46 F0 | 	shr	local03, #20
21508     02 22 66 F0 | 	shl	local03, #2
2150c     ED 22 02 F1 | 	add	local03, __methods__
21510     11 23 02 FB | 	rdlong	local03, local03
21514     0F 13 02 F6 | 	mov	arg01, local01
21518     F2 1E 02 F6 | 	mov	local01, objptr
2151c     10 E5 01 F6 | 	mov	objptr, local02
21520     2D 22 62 FD | 	call	local03
21524     0F E5 01 F6 | 	mov	objptr, local01
21528     01 FA 05 F6 | 	mov	result1, #1
2152c                 | LR__2930
2152c     A7 F0 03 F6 | 	mov	ptra, fp
21530     B2 00 A0 FD | 	call	#popregs_
21534                 | __system___basic_print_char_ret
21534     2D 00 64 FD | 	ret
21538                 | 
21538                 | __system___basic_print_string
21538     03 4A 05 F6 | 	mov	COUNT_, #3
2153c     A8 00 A0 FD | 	call	#pushregs_
21540     0A 1F 02 F6 | 	mov	local01, arg02
21544     0B 21 02 F6 | 	mov	local02, arg03
21548     D4 4C B0 FD | 	call	#__system___gettxfunc
2154c     FD 22 0A F6 | 	mov	local03, result1 wz
21550     00 FA 05 A6 |  if_e	mov	result1, #0
21554     18 00 90 AD |  if_e	jmp	#LR__2940
21558     00 1E 0E F2 | 	cmp	local01, #0 wz
2155c     00 FA 05 A6 |  if_e	mov	result1, #0
21560     11 13 02 56 |  if_ne	mov	arg01, local03
21564     10 15 02 56 |  if_ne	mov	arg02, local02
21568     0F 17 02 56 |  if_ne	mov	arg03, local01
2156c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21570                 | LR__2940
21570     A7 F0 03 F6 | 	mov	ptra, fp
21574     B2 00 A0 FD | 	call	#popregs_
21578                 | __system___basic_print_string_ret
21578     2D 00 64 FD | 	ret
2157c                 | 
2157c                 | __system___basic_print_integer
2157c     04 4A 05 F6 | 	mov	COUNT_, #4
21580     A8 00 A0 FD | 	call	#pushregs_
21584     0A 1F 02 F6 | 	mov	local01, arg02
21588     0B 21 02 F6 | 	mov	local02, arg03
2158c     0C 23 02 F6 | 	mov	local03, arg04
21590     8C 4C B0 FD | 	call	#__system___gettxfunc
21594     FD 24 0A F6 | 	mov	local04, result1 wz
21598     00 FA 05 A6 |  if_e	mov	result1, #0
2159c     12 13 02 56 |  if_ne	mov	arg01, local04
215a0     10 15 02 56 |  if_ne	mov	arg02, local02
215a4     0F 17 02 56 |  if_ne	mov	arg03, local01
215a8     11 19 02 56 |  if_ne	mov	arg04, local03
215ac     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
215b0     A7 F0 03 F6 | 	mov	ptra, fp
215b4     B2 00 A0 FD | 	call	#popregs_
215b8                 | __system___basic_print_integer_ret
215b8     2D 00 64 FD | 	ret
215bc                 | 
215bc                 | __system___basic_print_unsigned
215bc     03 4A 05 F6 | 	mov	COUNT_, #3
215c0     A8 00 A0 FD | 	call	#pushregs_
215c4     0A 1F 02 F6 | 	mov	local01, arg02
215c8     0B 21 02 F6 | 	mov	local02, arg03
215cc     0C 23 02 F6 | 	mov	local03, arg04
215d0     4C 4C B0 FD | 	call	#__system___gettxfunc
215d4     FD 12 0A F6 | 	mov	arg01, result1 wz
215d8     00 FA 05 A6 |  if_e	mov	result1, #0
215dc     3A 20 26 54 |  if_ne	bith	local02, #58
215e0     10 15 02 56 |  if_ne	mov	arg02, local02
215e4     0F 17 02 56 |  if_ne	mov	arg03, local01
215e8     11 19 02 56 |  if_ne	mov	arg04, local03
215ec     74 02 B0 5D |  if_ne	call	#__system___fmtnum
215f0     A7 F0 03 F6 | 	mov	ptra, fp
215f4     B2 00 A0 FD | 	call	#popregs_
215f8                 | __system___basic_print_unsigned_ret
215f8     2D 00 64 FD | 	ret
215fc                 | 
215fc                 | __system___basic_get_char
215fc     03 4A 05 F6 | 	mov	COUNT_, #3
21600     A8 00 A0 FD | 	call	#pushregs_
21604     5C 4C B0 FD | 	call	#__system___getrxfunc
21608     FD 1E 0A F6 | 	mov	local01, result1 wz
2160c     01 FA 65 A6 |  if_e	neg	result1, #1
21610     28 00 90 AD |  if_e	jmp	#LR__2950
21614     0F 21 02 F6 | 	mov	local02, local01
21618     13 1E 46 F7 | 	zerox	local01, #19
2161c     14 20 46 F0 | 	shr	local02, #20
21620     02 20 66 F0 | 	shl	local02, #2
21624     ED 20 02 F1 | 	add	local02, __methods__
21628     10 21 02 FB | 	rdlong	local02, local02
2162c     F2 22 02 F6 | 	mov	local03, objptr
21630     0F E5 01 F6 | 	mov	objptr, local01
21634     2D 20 62 FD | 	call	local02
21638     11 E5 01 F6 | 	mov	objptr, local03
2163c                 | LR__2950
2163c     A7 F0 03 F6 | 	mov	ptra, fp
21640     B2 00 A0 FD | 	call	#popregs_
21644                 | __system___basic_get_char_ret
21644     2D 00 64 FD | 	ret
21648                 | 
21648                 | __system___basic_put
21648     04 4A 05 F6 | 	mov	COUNT_, #4
2164c     A8 00 A0 FD | 	call	#pushregs_
21650     0D 1F 02 F6 | 	mov	local01, arg05
21654     0F 19 02 FD | 	qmul	arg04, local01
21658     09 21 02 F6 | 	mov	local02, arg01
2165c     0B 23 02 F6 | 	mov	local03, arg03
21660     00 14 0E F2 | 	cmp	arg02, #0 wz
21664     01 14 86 51 |  if_ne	sub	arg02, #1
21668     10 13 02 56 |  if_ne	mov	arg01, local02
2166c     00 16 06 56 |  if_ne	mov	arg03, #0
21670     18 24 62 FD | 	getqx	local04
21674     9C 42 B0 5D |  if_ne	call	#__system__lseek
21678     11 15 02 F6 | 	mov	arg02, local03
2167c     12 17 02 F6 | 	mov	arg03, local04
21680     10 13 02 F6 | 	mov	arg01, local02
21684     D8 41 B0 FD | 	call	#__system__write
21688     FD 24 02 F6 | 	mov	local04, result1
2168c     01 24 56 F2 | 	cmps	local04, #1 wc
21690     10 00 90 CD |  if_b	jmp	#LR__2960
21694     12 7D 02 F6 | 	mov	muldiva_, local04
21698     0F 7F 02 F6 | 	mov	muldivb_, local01
2169c     BA 00 A0 FD | 	call	#divide_
216a0     3F 25 02 F6 | 	mov	local04, muldivb_
216a4                 | LR__2960
216a4     12 FB 01 F6 | 	mov	result1, local04
216a8     A7 F0 03 F6 | 	mov	ptra, fp
216ac     B2 00 A0 FD | 	call	#popregs_
216b0                 | __system___basic_put_ret
216b0     2D 00 64 FD | 	ret
216b4                 | 
216b4                 | __system___basic_get
216b4     04 4A 05 F6 | 	mov	COUNT_, #4
216b8     A8 00 A0 FD | 	call	#pushregs_
216bc     0D 1F 02 F6 | 	mov	local01, arg05
216c0     0F 19 02 FD | 	qmul	arg04, local01
216c4     09 21 02 F6 | 	mov	local02, arg01
216c8     0B 23 02 F6 | 	mov	local03, arg03
216cc     00 14 0E F2 | 	cmp	arg02, #0 wz
216d0     01 14 86 51 |  if_ne	sub	arg02, #1
216d4     10 13 02 56 |  if_ne	mov	arg01, local02
216d8     00 16 06 56 |  if_ne	mov	arg03, #0
216dc     18 24 62 FD | 	getqx	local04
216e0     30 42 B0 5D |  if_ne	call	#__system__lseek
216e4     11 15 02 F6 | 	mov	arg02, local03
216e8     12 17 02 F6 | 	mov	arg03, local04
216ec     10 13 02 F6 | 	mov	arg01, local02
216f0     A8 41 B0 FD | 	call	#__system__read
216f4     FD 24 02 F6 | 	mov	local04, result1
216f8     01 24 56 F2 | 	cmps	local04, #1 wc
216fc     10 00 90 CD |  if_b	jmp	#LR__2970
21700     12 7D 02 F6 | 	mov	muldiva_, local04
21704     0F 7F 02 F6 | 	mov	muldivb_, local01
21708     BA 00 A0 FD | 	call	#divide_
2170c     3F 25 02 F6 | 	mov	local04, muldivb_
21710                 | LR__2970
21710     12 FB 01 F6 | 	mov	result1, local04
21714     A7 F0 03 F6 | 	mov	ptra, fp
21718     B2 00 A0 FD | 	call	#popregs_
2171c                 | __system___basic_get_ret
2171c     2D 00 64 FD | 	ret
21720                 | 
21720                 | __system___fmtchar
21720     00 4A 05 F6 | 	mov	COUNT_, #0
21724     A8 00 A0 FD | 	call	#pushregs_
21728     10 F0 07 F1 | 	add	ptra, #16
2172c     04 4E 05 F1 | 	add	fp, #4
21730     A7 12 62 FC | 	wrlong	arg01, fp
21734     04 4E 05 F1 | 	add	fp, #4
21738     A7 14 62 FC | 	wrlong	arg02, fp
2173c     04 4E 05 F1 | 	add	fp, #4
21740     A7 16 62 FC | 	wrlong	arg03, fp
21744     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21748     A7 16 62 FC | 	wrlong	arg03, fp
2174c     08 4E 85 F1 | 	sub	fp, #8
21750     A7 12 02 FB | 	rdlong	arg01, fp
21754     04 4E 05 F1 | 	add	fp, #4
21758     A7 14 02 FB | 	rdlong	arg02, fp
2175c     04 4E 05 F1 | 	add	fp, #4
21760     A7 16 02 F6 | 	mov	arg03, fp
21764     0C 4E 85 F1 | 	sub	fp, #12
21768     0C 00 B0 FD | 	call	#__system___fmtstr
2176c     A7 F0 03 F6 | 	mov	ptra, fp
21770     B2 00 A0 FD | 	call	#popregs_
21774                 | __system___fmtchar_ret
21774     2D 00 64 FD | 	ret
21778                 | 
21778                 | __system___fmtstr
21778     09 4A 05 F6 | 	mov	COUNT_, #9
2177c     A8 00 A0 FD | 	call	#pushregs_
21780     09 1F 02 F6 | 	mov	local01, arg01
21784     0A 21 02 F6 | 	mov	local02, arg02
21788     0B 23 02 F6 | 	mov	local03, arg03
2178c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21790     11 13 02 F6 | 	mov	arg01, local03
21794     09 25 02 F6 | 	mov	local04, arg01
21798     97 06 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
2179c                 | LR__2980
2179c     12 FB C9 FA | 	rdbyte	result1, local04 wz
217a0     01 24 06 51 |  if_ne	add	local04, #1
217a4     F4 FF 9F 5D |  if_ne	jmp	#LR__2980
217a8                 | LR__2981
217a8     09 25 82 F1 | 	sub	local04, arg01
217ac     00 18 0E F2 | 	cmp	arg04, #0 wz
217b0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
217b4     10 15 02 F6 | 	mov	arg02, local02
217b8     12 17 02 F6 | 	mov	arg03, local04
217bc     0F 13 02 F6 | 	mov	arg01, local01
217c0     02 18 06 F6 | 	mov	arg04, #2
217c4     F8 46 B0 FD | 	call	#__system___fmtpad
217c8     FD 26 02 F6 | 	mov	local05, result1
217cc     00 26 56 F2 | 	cmps	local05, #0 wc
217d0     13 FB 01 C6 |  if_b	mov	result1, local05
217d4     80 00 90 CD |  if_b	jmp	#LR__2984
217d8     01 24 56 F2 | 	cmps	local04, #1 wc
217dc     50 00 90 CD |  if_b	jmp	#LR__2983
217e0     12 29 02 F6 | 	mov	local06, local04
217e4                 | LR__2982
217e4     0F 2B 02 F6 | 	mov	local07, local01
217e8     0F 2D 02 F6 | 	mov	local08, local01
217ec     13 2A 46 F7 | 	zerox	local07, #19
217f0     14 2C 46 F0 | 	shr	local08, #20
217f4     02 2C 66 F0 | 	shl	local08, #2
217f8     ED 2C 02 F1 | 	add	local08, __methods__
217fc     16 2D 02 FB | 	rdlong	local08, local08
21800     11 13 C2 FA | 	rdbyte	arg01, local03
21804     F2 2E 02 F6 | 	mov	local09, objptr
21808     15 E5 01 F6 | 	mov	objptr, local07
2180c     01 22 06 F1 | 	add	local03, #1
21810     2D 2C 62 FD | 	call	local08
21814     17 E5 01 F6 | 	mov	objptr, local09
21818     FD 2E 02 F6 | 	mov	local09, result1
2181c     00 2E 56 F2 | 	cmps	local09, #0 wc
21820     17 FB 01 C6 |  if_b	mov	result1, local09
21824     30 00 90 CD |  if_b	jmp	#LR__2984
21828     17 27 02 F1 | 	add	local05, local09
2182c     ED 29 6E FB | 	djnz	local06, #LR__2982
21830                 | LR__2983
21830     10 15 02 F6 | 	mov	arg02, local02
21834     12 17 02 F6 | 	mov	arg03, local04
21838     0F 13 02 F6 | 	mov	arg01, local01
2183c     01 18 06 F6 | 	mov	arg04, #1
21840     7C 46 B0 FD | 	call	#__system___fmtpad
21844     FD 2E 02 F6 | 	mov	local09, result1
21848     00 2E 56 F2 | 	cmps	local09, #0 wc
2184c     17 FB 01 C6 |  if_b	mov	result1, local09
21850     17 27 02 31 |  if_ae	add	local05, local09
21854     13 FB 01 36 |  if_ae	mov	result1, local05
21858                 | LR__2984
21858     A7 F0 03 F6 | 	mov	ptra, fp
2185c     B2 00 A0 FD | 	call	#popregs_
21860                 | __system___fmtstr_ret
21860     2D 00 64 FD | 	ret
21864                 | 
21864                 | __system___fmtnum
21864     0B 4A 05 F6 | 	mov	COUNT_, #11
21868     A8 00 A0 FD | 	call	#pushregs_
2186c     09 1F 02 F6 | 	mov	local01, arg01
21870     0A 21 02 F6 | 	mov	local02, arg02
21874     0B 23 02 F6 | 	mov	local03, arg03
21878     0C 25 02 F6 | 	mov	local04, arg04
2187c     F8 27 02 F6 | 	mov	local05, ptra
21880     13 29 02 F6 | 	mov	local06, local05
21884     00 2A 06 F6 | 	mov	local07, #0
21888     10 2D 02 F6 | 	mov	local08, local02
2188c     10 2C 46 F0 | 	shr	local08, #16
21890     3F 2C 06 F5 | 	and	local08, #63
21894     10 2F E2 F8 | 	getbyte	local09, local02, #0
21898     10 31 02 F6 | 	mov	local10, local02
2189c     1A 30 46 F0 | 	shr	local10, #26
218a0     03 30 06 F5 | 	and	local10, #3
218a4     18 33 02 F6 | 	mov	local11, local10
218a8     01 2C 56 F2 | 	cmps	local08, #1 wc
218ac     44 F0 07 F1 | 	add	ptra, #68
218b0     01 2C 86 31 |  if_ae	sub	local08, #1
218b4     41 2E 56 F2 | 	cmps	local09, #65 wc
218b8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
218bc     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
218c0     03 32 0E F2 | 	cmp	local11, #3 wz
218c4     00 32 06 A6 |  if_e	mov	local11, #0
218c8     00 22 56 52 |  if_ne	cmps	local03, #0 wc
218cc     04 32 06 46 |  if_c_and_nz	mov	local11, #4
218d0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
218d4     00 32 0E F2 | 	cmp	local11, #0 wz
218d8     4C 00 90 AD |  if_e	jmp	#LR__2993
218dc     01 2A 06 F6 | 	mov	local07, #1
218e0     17 2D 0A F2 | 	cmp	local08, local09 wz
218e4     18 00 90 5D |  if_ne	jmp	#LR__2991
218e8     05 2C 6E FB | 	djnz	local08, #LR__2990
218ec     0F 13 02 F6 | 	mov	arg01, local01
218f0     10 15 02 F6 | 	mov	arg02, local02
218f4     23 16 06 F6 | 	mov	arg03, #35
218f8     24 FE BF FD | 	call	#__system___fmtchar
218fc     88 00 90 FD | 	jmp	#LR__2997
21900                 | LR__2990
21900                 | LR__2991
21900     02 32 0E F2 | 	cmp	local11, #2 wz
21904     14 31 02 A6 |  if_e	mov	local10, local06
21908     01 28 06 A1 |  if_e	add	local06, #1
2190c     18 41 48 AC |  if_e	wrbyte	#32, local10
21910     14 00 90 AD |  if_e	jmp	#LR__2992
21914     04 32 0E F2 | 	cmp	local11, #4 wz
21918     14 5B 48 AC |  if_e	wrbyte	#45, local06
2191c     01 28 06 A1 |  if_e	add	local06, #1
21920     14 57 48 5C |  if_ne	wrbyte	#43, local06
21924     01 28 06 51 |  if_ne	add	local06, #1
21928                 | LR__2992
21928                 | LR__2993
21928     14 13 02 F6 | 	mov	arg01, local06
2192c     11 15 02 F6 | 	mov	arg02, local03
21930     12 17 02 F6 | 	mov	arg03, local04
21934     16 19 02 F6 | 	mov	arg04, local08
21938     00 1A 06 F6 | 	mov	arg05, #0
2193c     1D 20 2E F4 | 	testbn	local02, #29 wz
21940     01 1A 06 56 |  if_ne	mov	arg05, #1
21944     40 46 B0 FD | 	call	#__system___uitoa
21948     FD 2A 02 F1 | 	add	local07, result1
2194c     17 2B 5A F2 | 	cmps	local07, local09 wcz
21950     24 00 90 ED |  if_be	jmp	#LR__2996
21954     97 0E 48 FB | 	callpa	#(@LR__2995-@LR__2994)>>2,fcache_load_ptr_
21958                 | LR__2994
21958     17 31 02 F6 | 	mov	local10, local09
2195c     01 30 56 F2 | 	cmps	local10, #1 wc
21960     01 2E 86 F1 | 	sub	local09, #1
21964     14 31 02 36 |  if_ae	mov	local10, local06
21968     01 28 06 31 |  if_ae	add	local06, #1
2196c     18 47 48 3C |  if_ae	wrbyte	#35, local10
21970     E4 FF 9F 3D |  if_ae	jmp	#LR__2994
21974                 | LR__2995
21974     14 01 48 FC | 	wrbyte	#0, local06
21978                 | LR__2996
21978     0F 13 02 F6 | 	mov	arg01, local01
2197c     10 15 02 F6 | 	mov	arg02, local02
21980     13 17 02 F6 | 	mov	arg03, local05
21984     F0 FD BF FD | 	call	#__system___fmtstr
21988                 | LR__2997
21988     A7 F0 03 F6 | 	mov	ptra, fp
2198c     B2 00 A0 FD | 	call	#popregs_
21990                 | __system___fmtnum_ret
21990     2D 00 64 FD | 	ret
21994                 | 
21994                 | __system___fmtfloat
21994     10 4A 05 F6 | 	mov	COUNT_, #16
21998     A8 00 A0 FD | 	call	#pushregs_
2199c     24 F1 07 F1 | 	add	ptra, #292
219a0     04 4E 05 F1 | 	add	fp, #4
219a4     A7 12 62 FC | 	wrlong	arg01, fp
219a8     04 4E 05 F1 | 	add	fp, #4
219ac     A7 14 62 FC | 	wrlong	arg02, fp
219b0     04 4E 05 F1 | 	add	fp, #4
219b4     A7 16 62 FC | 	wrlong	arg03, fp
219b8     04 4E 05 F1 | 	add	fp, #4
219bc     A7 18 62 FC | 	wrlong	arg04, fp
219c0     0C 4E 05 F1 | 	add	fp, #12
219c4     A7 14 68 FC | 	wrlong	#10, fp
219c8     08 4E 05 F1 | 	add	fp, #8
219cc     A7 00 68 FC | 	wrlong	#0, fp
219d0     08 4E 05 F1 | 	add	fp, #8
219d4     A7 00 68 FC | 	wrlong	#0, fp
219d8     08 4E 05 F1 | 	add	fp, #8
219dc     A7 00 68 FC | 	wrlong	#0, fp
219e0     04 4E 05 F1 | 	add	fp, #4
219e4     A7 04 68 FC | 	wrlong	#2, fp
219e8     04 4E 05 F1 | 	add	fp, #4
219ec     A7 00 68 FC | 	wrlong	#0, fp
219f0     04 4E 05 F1 | 	add	fp, #4
219f4     A7 00 68 FC | 	wrlong	#0, fp
219f8     04 4E 05 F1 | 	add	fp, #4
219fc     A7 00 68 FC | 	wrlong	#0, fp
21a00     04 4E 05 F1 | 	add	fp, #4
21a04     A7 00 68 FC | 	wrlong	#0, fp
21a08     18 4E 05 F1 | 	add	fp, #24
21a0c     A7 00 68 FC | 	wrlong	#0, fp
21a10     68 4E 05 F1 | 	add	fp, #104
21a14     A7 1E 02 F6 | 	mov	local01, fp
21a18     08 4E 85 F1 | 	sub	fp, #8
21a1c     A7 1E 62 FC | 	wrlong	local01, fp
21a20     04 4E 05 F1 | 	add	fp, #4
21a24     A7 1E 62 FC | 	wrlong	local01, fp
21a28     BC 4E 85 F1 | 	sub	fp, #188
21a2c     A7 1E 02 FB | 	rdlong	local01, fp
21a30     10 1E 46 F0 | 	shr	local01, #16
21a34     3F 1E 06 F5 | 	and	local01, #63
21a38     B0 4E 05 F1 | 	add	fp, #176
21a3c     A7 1E 62 FC | 	wrlong	local01, fp
21a40     B0 4E 85 F1 | 	sub	fp, #176
21a44     A7 1E 02 FB | 	rdlong	local01, fp
21a48     1C 1E 46 F0 | 	shr	local01, #28
21a4c     01 1E 06 F5 | 	and	local01, #1
21a50     08 4F 05 F1 | 	add	fp, #264
21a54     A7 1E 62 FC | 	wrlong	local01, fp
21a58     58 4E 85 F1 | 	sub	fp, #88
21a5c     A7 1E 0A FB | 	rdlong	local01, fp wz
21a60     B8 4E 85 F1 | 	sub	fp, #184
21a64     3C 00 90 5D |  if_ne	jmp	#LR__3001
21a68     10 4E 05 F1 | 	add	fp, #16
21a6c     A7 1E 02 FB | 	rdlong	local01, fp
21a70     10 4E 85 F1 | 	sub	fp, #16
21a74     61 1E 0E F2 | 	cmp	local01, #97 wz
21a78     18 00 90 5D |  if_ne	jmp	#LR__3000
21a7c     B8 4E 05 F1 | 	add	fp, #184
21a80     A7 1A 68 FC | 	wrlong	#13, fp
21a84     84 4E 85 F1 | 	sub	fp, #132
21a88     A7 02 68 FC | 	wrlong	#1, fp
21a8c     34 4E 85 F1 | 	sub	fp, #52
21a90     24 00 90 FD | 	jmp	#LR__3002
21a94                 | LR__3000
21a94     B8 4E 05 F1 | 	add	fp, #184
21a98     A7 0C 68 FC | 	wrlong	#6, fp
21a9c     B8 4E 85 F1 | 	sub	fp, #184
21aa0     14 00 90 FD | 	jmp	#LR__3002
21aa4                 | LR__3001
21aa4     B8 4E 05 F1 | 	add	fp, #184
21aa8     A7 1E 02 FB | 	rdlong	local01, fp
21aac     01 1E 86 F1 | 	sub	local01, #1
21ab0     A7 1E 62 FC | 	wrlong	local01, fp
21ab4     B8 4E 85 F1 | 	sub	fp, #184
21ab8                 | LR__3002
21ab8     08 4E 05 F1 | 	add	fp, #8
21abc     A7 1E 02 FB | 	rdlong	local01, fp
21ac0     16 1E 46 F0 | 	shr	local01, #22
21ac4     03 1E 06 F5 | 	and	local01, #3
21ac8     04 4F 05 F1 | 	add	fp, #260
21acc     A7 1E 62 FC | 	wrlong	local01, fp
21ad0     04 4F 85 F1 | 	sub	fp, #260
21ad4     A7 1E 02 FB | 	rdlong	local01, fp
21ad8     1D 1E 46 F0 | 	shr	local01, #29
21adc     01 1E 06 F5 | 	and	local01, #1
21ae0     B4 4E 05 F1 | 	add	fp, #180
21ae4     A7 1E 62 FC | 	wrlong	local01, fp
21ae8     B4 4E 85 F1 | 	sub	fp, #180
21aec     A7 1E 02 FB | 	rdlong	local01, fp
21af0     0F 1F EA F8 | 	getbyte	local01, local01, #1
21af4     60 4E 05 F1 | 	add	fp, #96
21af8     A7 1E 62 FC | 	wrlong	local01, fp
21afc     60 4E 85 F1 | 	sub	fp, #96
21b00     A7 1E 02 FB | 	rdlong	local01, fp
21b04     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21b08     64 4E 05 F1 | 	add	fp, #100
21b0c     A7 1E 62 FC | 	wrlong	local01, fp
21b10     00 1E 06 F6 | 	mov	local01, #0
21b14     5C 4E 85 F1 | 	sub	fp, #92
21b18     A7 1A 02 FB | 	rdlong	arg05, fp
21b1c     65 1A 0E F2 | 	cmp	arg05, #101 wz
21b20     01 1E 06 A6 |  if_e	mov	local01, #1
21b24     14 4E 05 F1 | 	add	fp, #20
21b28     A7 1E 62 FC | 	wrlong	local01, fp
21b2c     98 4E 05 F1 | 	add	fp, #152
21b30     A7 20 0A FB | 	rdlong	local02, fp wz
21b34     45 1E 06 56 |  if_ne	mov	local01, #69
21b38     65 1E 06 A6 |  if_e	mov	local01, #101
21b3c     8C 4E 85 F1 | 	sub	fp, #140
21b40     A7 1E 62 FC | 	wrlong	local01, fp
21b44     20 4E 85 F1 | 	sub	fp, #32
21b48     A7 1E 02 FB | 	rdlong	local01, fp
21b4c     10 4E 85 F1 | 	sub	fp, #16
21b50     61 1E 0E F2 | 	cmp	local01, #97 wz
21b54     4C 00 90 5D |  if_ne	jmp	#LR__3003
21b58     24 4E 05 F1 | 	add	fp, #36
21b5c     A7 02 68 FC | 	wrlong	#1, fp
21b60     98 4E 05 F1 | 	add	fp, #152
21b64     A7 20 0A FB | 	rdlong	local02, fp wz
21b68     50 1E 06 56 |  if_ne	mov	local01, #80
21b6c     70 1E 06 A6 |  if_e	mov	local01, #112
21b70     8C 4E 85 F1 | 	sub	fp, #140
21b74     A7 1E 62 FC | 	wrlong	local01, fp
21b78     14 4E 85 F1 | 	sub	fp, #20
21b7c     A7 04 68 FC | 	wrlong	#2, fp
21b80     1C 4E 05 F1 | 	add	fp, #28
21b84     A7 02 68 FC | 	wrlong	#1, fp
21b88     84 4E 05 F1 | 	add	fp, #132
21b8c     A7 20 0A FB | 	rdlong	local02, fp wz
21b90     58 1E 06 56 |  if_ne	mov	local01, #88
21b94     78 1E 06 A6 |  if_e	mov	local01, #120
21b98     7C 4E 85 F1 | 	sub	fp, #124
21b9c     A7 1E 62 FC | 	wrlong	local01, fp
21ba0     40 4E 85 F1 | 	sub	fp, #64
21ba4                 | LR__3003
21ba4     10 4E 05 F1 | 	add	fp, #16
21ba8     A7 1E 02 FB | 	rdlong	local01, fp
21bac     10 4E 85 F1 | 	sub	fp, #16
21bb0     23 1E 0E F2 | 	cmp	local01, #35 wz
21bb4     3C 00 90 5D |  if_ne	jmp	#LR__3006
21bb8     48 4E 05 F1 | 	add	fp, #72
21bbc     A7 02 68 FC | 	wrlong	#1, fp
21bc0     C8 4E 05 F1 | 	add	fp, #200
21bc4     A7 1E 0A FB | 	rdlong	local01, fp wz
21bc8     10 4F 85 F1 | 	sub	fp, #272
21bcc     18 00 90 AD |  if_e	jmp	#LR__3004
21bd0     10 4E 05 F1 | 	add	fp, #16
21bd4     A7 CC 68 FC | 	wrlong	#102, fp
21bd8     00 4F 05 F1 | 	add	fp, #256
21bdc     A7 00 68 FC | 	wrlong	#0, fp
21be0     10 4F 85 F1 | 	sub	fp, #272
21be4     0C 00 90 FD | 	jmp	#LR__3005
21be8                 | LR__3004
21be8     10 4F 05 F1 | 	add	fp, #272
21bec     A7 02 68 FC | 	wrlong	#1, fp
21bf0     10 4F 85 F1 | 	sub	fp, #272
21bf4                 | LR__3005
21bf4                 | LR__3006
21bf4     08 4E 05 F1 | 	add	fp, #8
21bf8     A7 1E 02 FB | 	rdlong	local01, fp
21bfc     1A 1E 46 F0 | 	shr	local01, #26
21c00     03 1E 06 F5 | 	and	local01, #3
21c04     5C 4E 05 F1 | 	add	fp, #92
21c08     A7 1E 62 FC | 	wrlong	local01, fp
21c0c     58 4E 85 F1 | 	sub	fp, #88
21c10     A7 FA 01 FB | 	rdlong	result1, fp
21c14     0C 4E 85 F1 | 	sub	fp, #12
21c18     1F FA 4D F0 | 	shr	result1, #31 wz
21c1c     20 00 90 AD |  if_e	jmp	#LR__3007
21c20     2C 4E 05 F1 | 	add	fp, #44
21c24     A7 5A 68 FC | 	wrlong	#45, fp
21c28     20 4E 85 F1 | 	sub	fp, #32
21c2c     A7 FA 01 FB | 	rdlong	result1, fp
21c30     1F FA E5 F4 | 	bitnot	result1, #31
21c34     A7 FA 61 FC | 	wrlong	result1, fp
21c38     0C 4E 85 F1 | 	sub	fp, #12
21c3c     3C 00 90 FD | 	jmp	#LR__3009
21c40                 | LR__3007
21c40     64 4E 05 F1 | 	add	fp, #100
21c44     A7 1E 02 FB | 	rdlong	local01, fp
21c48     64 4E 85 F1 | 	sub	fp, #100
21c4c     01 1E 0E F2 | 	cmp	local01, #1 wz
21c50     2C 4E 05 A1 |  if_e	add	fp, #44
21c54     A7 56 68 AC |  if_e	wrlong	#43, fp
21c58     2C 4E 85 A1 |  if_e	sub	fp, #44
21c5c     1C 00 90 AD |  if_e	jmp	#LR__3008
21c60     64 4E 05 F1 | 	add	fp, #100
21c64     A7 1E 02 FB | 	rdlong	local01, fp
21c68     64 4E 85 F1 | 	sub	fp, #100
21c6c     02 1E 0E F2 | 	cmp	local01, #2 wz
21c70     2C 4E 05 A1 |  if_e	add	fp, #44
21c74     A7 40 68 AC |  if_e	wrlong	#32, fp
21c78     2C 4E 85 A1 |  if_e	sub	fp, #44
21c7c                 | LR__3008
21c7c                 | LR__3009
21c7c     08 4E 05 F1 | 	add	fp, #8
21c80     A7 1E 02 FB | 	rdlong	local01, fp
21c84     18 1E 46 F0 | 	shr	local01, #24
21c88     03 1E 06 F5 | 	and	local01, #3
21c8c     3C 4E 05 F1 | 	add	fp, #60
21c90     A7 1E 62 FC | 	wrlong	local01, fp
21c94     00 1E 06 F6 | 	mov	local01, #0
21c98     18 4E 85 F1 | 	sub	fp, #24
21c9c     A7 22 0A FB | 	rdlong	local03, fp wz
21ca0     2C 4E 85 F1 | 	sub	fp, #44
21ca4     18 00 90 5D |  if_ne	jmp	#LR__3010
21ca8     1C 4E 05 F1 | 	add	fp, #28
21cac     A7 24 02 FB | 	rdlong	local04, fp
21cb0     1C 4E 85 F1 | 	sub	fp, #28
21cb4     12 27 02 F6 | 	mov	local05, local04
21cb8     0A 26 0E F2 | 	cmp	local05, #10 wz
21cbc     04 00 90 AD |  if_e	jmp	#LR__3011
21cc0                 | LR__3010
21cc0     01 1E 66 F5 | 	xor	local01, #1
21cc4                 | LR__3011
21cc4     3C 4E 05 F1 | 	add	fp, #60
21cc8     A7 1E 62 FC | 	wrlong	local01, fp
21ccc     3C 4E 85 F1 | 	sub	fp, #60
21cd0     00 1E 0E F2 | 	cmp	local01, #0 wz
21cd4     0C 01 90 AD |  if_e	jmp	#LR__3013
21cd8     44 4E 05 F1 | 	add	fp, #68
21cdc     A7 26 02 FB | 	rdlong	local05, fp
21ce0     44 4E 85 F1 | 	sub	fp, #68
21ce4     13 23 02 F6 | 	mov	local03, local05
21ce8     02 22 0E F2 | 	cmp	local03, #2 wz
21cec     F4 00 90 5D |  if_ne	jmp	#LR__3013
21cf0     0C 4F 05 F1 | 	add	fp, #268
21cf4     A7 28 02 FB | 	rdlong	local06, fp
21cf8     0C 4F 85 F1 | 	sub	fp, #268
21cfc     14 25 02 F6 | 	mov	local04, local06
21d00     02 24 0E F2 | 	cmp	local04, #2 wz
21d04     DC 00 90 AD |  if_e	jmp	#LR__3013
21d08     C0 4E 05 F1 | 	add	fp, #192
21d0c     A7 12 02 FB | 	rdlong	arg01, fp
21d10     94 4E 85 F1 | 	sub	fp, #148
21d14     A7 14 02 FB | 	rdlong	arg02, fp
21d18     14 4E 05 F1 | 	add	fp, #20
21d1c     A7 16 02 FB | 	rdlong	arg03, fp
21d20     40 4E 85 F1 | 	sub	fp, #64
21d24     C8 44 B0 FD | 	call	#__system__emitsign_0502
21d28     14 4F 05 F1 | 	add	fp, #276
21d2c     A7 FA 61 FC | 	wrlong	result1, fp
21d30     14 4F 85 F1 | 	sub	fp, #276
21d34     00 FA 55 F2 | 	cmps	result1, #0 wc
21d38     14 4F 05 C1 |  if_b	add	fp, #276
21d3c     A7 FA 01 CB |  if_b	rdlong	result1, fp
21d40     14 4F 85 C1 |  if_b	sub	fp, #276
21d44     6C 0B 90 CD |  if_b	jmp	#LR__3063
21d48     C0 4E 05 F1 | 	add	fp, #192
21d4c     A7 1E 02 FB | 	rdlong	local01, fp
21d50     54 4E 05 F1 | 	add	fp, #84
21d54     A7 26 02 FB | 	rdlong	local05, fp
21d58     13 23 02 F6 | 	mov	local03, local05
21d5c     13 1F 02 F1 | 	add	local01, local05
21d60     54 4E 85 F1 | 	sub	fp, #84
21d64     A7 1E 62 FC | 	wrlong	local01, fp
21d68     58 4E 85 F1 | 	sub	fp, #88
21d6c     A7 1E 0A FB | 	rdlong	local01, fp wz
21d70     68 4E 85 F1 | 	sub	fp, #104
21d74     60 00 90 AD |  if_e	jmp	#LR__3012
21d78     68 4E 05 F1 | 	add	fp, #104
21d7c     A7 1E 02 FB | 	rdlong	local01, fp
21d80     AC 4E 05 F1 | 	add	fp, #172
21d84     A7 22 02 FB | 	rdlong	local03, fp
21d88     11 1F 82 F1 | 	sub	local01, local03
21d8c     AC 4E 85 F1 | 	sub	fp, #172
21d90     A7 1E 62 FC | 	wrlong	local01, fp
21d94     68 4E 85 F1 | 	sub	fp, #104
21d98     00 1E 56 F2 | 	cmps	local01, #0 wc
21d9c     68 4E 05 C1 |  if_b	add	fp, #104
21da0     A7 00 68 CC |  if_b	wrlong	#0, fp
21da4     68 4E 85 C1 |  if_b	sub	fp, #104
21da8     08 4E 05 F1 | 	add	fp, #8
21dac     A7 1E 02 FB | 	rdlong	local01, fp
21db0     E8 1E 06 F4 | 	bitl	local01, #232
21db4     A7 1E 62 FC | 	wrlong	local01, fp
21db8     60 4E 05 F1 | 	add	fp, #96
21dbc     A7 26 02 FB | 	rdlong	local05, fp
21dc0     13 23 02 F6 | 	mov	local03, local05
21dc4     08 22 66 F0 | 	shl	local03, #8
21dc8     11 1F 42 F5 | 	or	local01, local03
21dcc     60 4E 85 F1 | 	sub	fp, #96
21dd0     A7 1E 62 FC | 	wrlong	local01, fp
21dd4     08 4E 85 F1 | 	sub	fp, #8
21dd8                 | LR__3012
21dd8     3C 4E 05 F1 | 	add	fp, #60
21ddc     A7 00 68 FC | 	wrlong	#0, fp
21de0     3C 4E 85 F1 | 	sub	fp, #60
21de4                 | LR__3013
21de4     0C 4E 05 F1 | 	add	fp, #12
21de8     A7 12 02 FB | 	rdlong	arg01, fp
21dec     0C 4E 85 F1 | 	sub	fp, #12
21df0     28 1F B0 FD | 	call	#__system____builtin_ilogb
21df4     FF FF 3F FF 
21df8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21dfc     50 00 90 5D |  if_ne	jmp	#LR__3015
21e00     2C 4E 05 F1 | 	add	fp, #44
21e04     A7 1E 0A FB | 	rdlong	local01, fp wz
21e08     2C 4E 85 F1 | 	sub	fp, #44
21e0c     24 00 90 AD |  if_e	jmp	#LR__3014
21e10     C0 4E 05 F1 | 	add	fp, #192
21e14     A7 20 02 FB | 	rdlong	local02, fp
21e18     10 23 02 F6 | 	mov	local03, local02
21e1c     01 22 06 F1 | 	add	local03, #1
21e20     A7 22 62 FC | 	wrlong	local03, fp
21e24     94 4E 85 F1 | 	sub	fp, #148
21e28     A7 24 02 FB | 	rdlong	local04, fp
21e2c     2C 4E 85 F1 | 	sub	fp, #44
21e30     10 25 42 FC | 	wrbyte	local04, local02
21e34                 | LR__3014
21e34     C0 4E 05 F1 | 	add	fp, #192
21e38     A7 12 02 FB | 	rdlong	arg01, fp
21e3c     C0 4E 85 F1 | 	sub	fp, #192
21e40     80 01 00 FF 
21e44     8E 14 06 F6 | 	mov	arg02, ##@LR__4981
21e48     AC E9 BF FD | 	call	#__system____builtin_strcpy
21e4c     A4 08 90 FD | 	jmp	#LR__3051
21e50                 | LR__3015
21e50     0C 4E 05 F1 | 	add	fp, #12
21e54     A7 20 02 FB | 	rdlong	local02, fp
21e58     0C 4E 85 F1 | 	sub	fp, #12
21e5c     10 13 02 F6 | 	mov	arg01, local02
21e60     B8 1E B0 FD | 	call	#__system____builtin_ilogb
21e64     00 00 40 FF 
21e68     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
21e6c     50 00 90 5D |  if_ne	jmp	#LR__3017
21e70     2C 4E 05 F1 | 	add	fp, #44
21e74     A7 1E 0A FB | 	rdlong	local01, fp wz
21e78     2C 4E 85 F1 | 	sub	fp, #44
21e7c     24 00 90 AD |  if_e	jmp	#LR__3016
21e80     C0 4E 05 F1 | 	add	fp, #192
21e84     A7 20 02 FB | 	rdlong	local02, fp
21e88     10 23 02 F6 | 	mov	local03, local02
21e8c     01 22 06 F1 | 	add	local03, #1
21e90     A7 22 62 FC | 	wrlong	local03, fp
21e94     94 4E 85 F1 | 	sub	fp, #148
21e98     A7 24 02 FB | 	rdlong	local04, fp
21e9c     2C 4E 85 F1 | 	sub	fp, #44
21ea0     10 25 42 FC | 	wrbyte	local04, local02
21ea4                 | LR__3016
21ea4     C0 4E 05 F1 | 	add	fp, #192
21ea8     A7 12 02 FB | 	rdlong	arg01, fp
21eac     C0 4E 85 F1 | 	sub	fp, #192
21eb0     80 01 00 FF 
21eb4     92 14 06 F6 | 	mov	arg02, ##@LR__4982
21eb8     3C E9 BF FD | 	call	#__system____builtin_strcpy
21ebc     34 08 90 FD | 	jmp	#LR__3051
21ec0                 | LR__3017
21ec0     10 4E 05 F1 | 	add	fp, #16
21ec4     A7 1E 02 FB | 	rdlong	local01, fp
21ec8     10 4E 85 F1 | 	sub	fp, #16
21ecc     67 1E 0E F2 | 	cmp	local01, #103 wz
21ed0     10 4E 05 51 |  if_ne	add	fp, #16
21ed4     A7 22 02 5B |  if_ne	rdlong	local03, fp
21ed8     10 4E 85 51 |  if_ne	sub	fp, #16
21edc     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
21ee0     94 01 90 5D |  if_ne	jmp	#LR__3022
21ee4     0C 4E 05 F1 | 	add	fp, #12
21ee8     A7 12 02 FB | 	rdlong	arg01, fp
21eec     08 4E 05 F1 | 	add	fp, #8
21ef0     A7 14 02 F6 | 	mov	arg02, fp
21ef4     0C 4E 05 F1 | 	add	fp, #12
21ef8     A7 16 02 F6 | 	mov	arg03, fp
21efc     98 4E 05 F1 | 	add	fp, #152
21f00     A7 18 02 FB | 	rdlong	arg04, fp
21f04     9C 4E 85 F1 | 	sub	fp, #156
21f08     A7 1A 02 FB | 	rdlong	arg05, fp
21f0c     1C 4E 85 F1 | 	sub	fp, #28
21f10     E8 40 B0 FD | 	call	#__system__disassemble_0500
21f14     10 4E 05 F1 | 	add	fp, #16
21f18     A7 1E 02 FB | 	rdlong	local01, fp
21f1c     10 4E 85 F1 | 	sub	fp, #16
21f20     23 1E 0E F2 | 	cmp	local01, #35 wz
21f24     A0 00 90 5D |  if_ne	jmp	#LR__3019
21f28     20 4E 05 F1 | 	add	fp, #32
21f2c     A7 1E 02 FB | 	rdlong	local01, fp
21f30     98 4E 05 F1 | 	add	fp, #152
21f34     A7 22 02 FB | 	rdlong	local03, fp
21f38     B8 4E 85 F1 | 	sub	fp, #184
21f3c     11 1F 5A F2 | 	cmps	local01, local03 wcz
21f40     24 4E 05 11 |  if_a	add	fp, #36
21f44     A7 02 68 1C |  if_a	wrlong	#1, fp
21f48     24 4E 85 11 |  if_a	sub	fp, #36
21f4c     A4 01 90 1D |  if_a	jmp	#LR__3025
21f50     20 4E 05 F1 | 	add	fp, #32
21f54     A7 1E 02 FB | 	rdlong	local01, fp
21f58     20 4E 85 F1 | 	sub	fp, #32
21f5c     00 1E 56 F2 | 	cmps	local01, #0 wc
21f60     2C 00 90 3D |  if_ae	jmp	#LR__3018
21f64     B8 4E 05 F1 | 	add	fp, #184
21f68     A7 1E 02 FB | 	rdlong	local01, fp
21f6c     0F 1F 62 F6 | 	neg	local01, local01
21f70     98 4E 85 F1 | 	sub	fp, #152
21f74     A7 22 02 FB | 	rdlong	local03, fp
21f78     20 4E 85 F1 | 	sub	fp, #32
21f7c     0F 23 5A F2 | 	cmps	local03, local01 wcz
21f80     24 4E 05 E1 |  if_be	add	fp, #36
21f84     A7 02 68 EC |  if_be	wrlong	#1, fp
21f88     24 4E 85 E1 |  if_be	sub	fp, #36
21f8c     64 01 90 FD | 	jmp	#LR__3025
21f90                 | LR__3018
21f90     20 4E 05 F1 | 	add	fp, #32
21f94     A7 1E 02 FB | 	rdlong	local01, fp
21f98     20 4E 85 F1 | 	sub	fp, #32
21f9c     01 1E 56 F2 | 	cmps	local01, #1 wc
21fa0     50 01 90 CD |  if_b	jmp	#LR__3025
21fa4     B8 4E 05 F1 | 	add	fp, #184
21fa8     A7 1E 02 FB | 	rdlong	local01, fp
21fac     98 4E 85 F1 | 	sub	fp, #152
21fb0     A7 22 02 FB | 	rdlong	local03, fp
21fb4     11 1F 82 F1 | 	sub	local01, local03
21fb8     98 4E 05 F1 | 	add	fp, #152
21fbc     A7 1E 62 FC | 	wrlong	local01, fp
21fc0     B8 4E 85 F1 | 	sub	fp, #184
21fc4     2C 01 90 FD | 	jmp	#LR__3025
21fc8                 | LR__3019
21fc8     00 1E 06 F6 | 	mov	local01, #0
21fcc     08 4E 05 F1 | 	add	fp, #8
21fd0     A7 20 02 FB | 	rdlong	local02, fp
21fd4     1C 20 46 F0 | 	shr	local02, #28
21fd8     01 20 0E F5 | 	and	local02, #1 wz
21fdc     01 1E 06 A6 |  if_e	mov	local01, #1
21fe0     2C 4E 05 F1 | 	add	fp, #44
21fe4     A7 1E 62 FC | 	wrlong	local01, fp
21fe8     14 4E 85 F1 | 	sub	fp, #20
21fec     A7 1E 02 FB | 	rdlong	local01, fp
21ff0     98 4E 05 F1 | 	add	fp, #152
21ff4     A7 22 02 FB | 	rdlong	local03, fp
21ff8     B8 4E 85 F1 | 	sub	fp, #184
21ffc     11 1F 52 F2 | 	cmps	local01, local03 wc
22000     18 00 90 3D |  if_ae	jmp	#LR__3020
22004     20 4E 05 F1 | 	add	fp, #32
22008     A7 24 02 FB | 	rdlong	local04, fp
2200c     20 4E 85 F1 | 	sub	fp, #32
22010     FF FF 7F FF 
22014     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22018     10 00 90 3D |  if_ae	jmp	#LR__3021
2201c                 | LR__3020
2201c     24 4E 05 F1 | 	add	fp, #36
22020     A7 02 68 FC | 	wrlong	#1, fp
22024     24 4E 85 F1 | 	sub	fp, #36
22028     C8 00 90 FD | 	jmp	#LR__3025
2202c                 | LR__3021
2202c     B8 4E 05 F1 | 	add	fp, #184
22030     A7 24 02 FB | 	rdlong	local04, fp
22034     98 4E 85 F1 | 	sub	fp, #152
22038     A7 22 02 FB | 	rdlong	local03, fp
2203c     11 25 82 F1 | 	sub	local04, local03
22040     98 4E 05 F1 | 	add	fp, #152
22044     A7 24 62 FC | 	wrlong	local04, fp
22048     AC 4E 85 F1 | 	sub	fp, #172
2204c     A7 12 02 FB | 	rdlong	arg01, fp
22050     08 4E 05 F1 | 	add	fp, #8
22054     A7 14 02 F6 | 	mov	arg02, fp
22058     0C 4E 05 F1 | 	add	fp, #12
2205c     A7 16 02 F6 | 	mov	arg03, fp
22060     12 19 62 F6 | 	neg	arg04, local04
22064     04 4E 85 F1 | 	sub	fp, #4
22068     A7 1A 02 FB | 	rdlong	arg05, fp
2206c     1C 4E 85 F1 | 	sub	fp, #28
22070     88 3F B0 FD | 	call	#__system__disassemble_0500
22074     7C 00 90 FD | 	jmp	#LR__3025
22078                 | LR__3022
22078     24 4E 05 F1 | 	add	fp, #36
2207c     A7 1E 0A FB | 	rdlong	local01, fp wz
22080     24 4E 85 F1 | 	sub	fp, #36
22084     34 00 90 AD |  if_e	jmp	#LR__3023
22088     0C 4E 05 F1 | 	add	fp, #12
2208c     A7 12 02 FB | 	rdlong	arg01, fp
22090     08 4E 05 F1 | 	add	fp, #8
22094     A7 14 02 F6 | 	mov	arg02, fp
22098     0C 4E 05 F1 | 	add	fp, #12
2209c     A7 16 02 F6 | 	mov	arg03, fp
220a0     98 4E 05 F1 | 	add	fp, #152
220a4     A7 18 02 FB | 	rdlong	arg04, fp
220a8     9C 4E 85 F1 | 	sub	fp, #156
220ac     A7 1A 02 FB | 	rdlong	arg05, fp
220b0     1C 4E 85 F1 | 	sub	fp, #28
220b4     44 3F B0 FD | 	call	#__system__disassemble_0500
220b8     38 00 90 FD | 	jmp	#LR__3024
220bc                 | LR__3023
220bc     0C 4E 05 F1 | 	add	fp, #12
220c0     A7 12 02 FB | 	rdlong	arg01, fp
220c4     08 4E 05 F1 | 	add	fp, #8
220c8     A7 14 02 F6 | 	mov	arg02, fp
220cc     0C 4E 05 F1 | 	add	fp, #12
220d0     A7 16 02 F6 | 	mov	arg03, fp
220d4     98 4E 05 F1 | 	add	fp, #152
220d8     A7 24 02 FB | 	rdlong	local04, fp
220dc     01 24 06 F1 | 	add	local04, #1
220e0     12 19 62 F6 | 	neg	arg04, local04
220e4     9C 4E 85 F1 | 	sub	fp, #156
220e8     A7 1A 02 FB | 	rdlong	arg05, fp
220ec     1C 4E 85 F1 | 	sub	fp, #28
220f0     08 3F B0 FD | 	call	#__system__disassemble_0500
220f4                 | LR__3024
220f4                 | LR__3025
220f4     1C 4E 05 F1 | 	add	fp, #28
220f8     A7 1E 02 FB | 	rdlong	local01, fp
220fc     1C 4E 85 F1 | 	sub	fp, #28
22100     02 1E 0E F2 | 	cmp	local01, #2 wz
22104     4C 00 90 5D |  if_ne	jmp	#LR__3028
22108     1C 4E 05 F1 | 	add	fp, #28
2210c     A7 20 68 FC | 	wrlong	#16, fp
22110     1C 4E 85 F1 | 	sub	fp, #28
22114                 | LR__3026
22114     14 4E 05 F1 | 	add	fp, #20
22118     A7 1E 0A FB | 	rdlong	local01, fp wz
2211c     14 4E 85 F1 | 	sub	fp, #20
22120     30 00 90 AD |  if_e	jmp	#LR__3027
22124     14 4E 05 F1 | 	add	fp, #20
22128     A7 22 02 FB | 	rdlong	local03, fp
2212c     14 4E 85 F1 | 	sub	fp, #20
22130     00 80 00 FF 
22134     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22138     18 00 90 3D |  if_ae	jmp	#LR__3027
2213c     14 4E 05 F1 | 	add	fp, #20
22140     A7 1E 02 FB | 	rdlong	local01, fp
22144     01 1E 66 F0 | 	shl	local01, #1
22148     A7 1E 62 FC | 	wrlong	local01, fp
2214c     14 4E 85 F1 | 	sub	fp, #20
22150     C0 FF 9F FD | 	jmp	#LR__3026
22154                 | LR__3027
22154                 | LR__3028
22154     70 4E 05 F1 | 	add	fp, #112
22158     A7 12 02 F6 | 	mov	arg01, fp
2215c     5C 4E 85 F1 | 	sub	fp, #92
22160     A7 14 02 FB | 	rdlong	arg02, fp
22164     08 4E 05 F1 | 	add	fp, #8
22168     A7 16 02 FB | 	rdlong	arg03, fp
2216c     A0 4E 05 F1 | 	add	fp, #160
22170     A7 1A 02 FB | 	rdlong	arg05, fp
22174     BC 4E 85 F1 | 	sub	fp, #188
22178     01 18 06 F6 | 	mov	arg04, #1
2217c     08 3E B0 FD | 	call	#__system___uitoa
22180     58 4E 05 F1 | 	add	fp, #88
22184     A7 FA 61 FC | 	wrlong	result1, fp
22188     38 4E 85 F1 | 	sub	fp, #56
2218c     A7 1E 02 FB | 	rdlong	local01, fp
22190     20 4E 85 F1 | 	sub	fp, #32
22194     00 1E 56 F2 | 	cmps	local01, #0 wc
22198     50 00 90 3D |  if_ae	jmp	#LR__3029
2219c     60 4E 05 F1 | 	add	fp, #96
221a0     A7 5A 68 FC | 	wrlong	#45, fp
221a4     50 4E 05 F1 | 	add	fp, #80
221a8     A7 12 02 F6 | 	mov	arg01, fp
221ac     90 4E 85 F1 | 	sub	fp, #144
221b0     A7 22 02 FB | 	rdlong	local03, fp
221b4     11 15 62 F6 | 	neg	arg02, local03
221b8     18 4E 05 F1 | 	add	fp, #24
221bc     A7 18 02 FB | 	rdlong	arg04, fp
221c0     84 4E 05 F1 | 	add	fp, #132
221c4     A7 28 02 FB | 	rdlong	local06, fp
221c8     BC 4E 85 F1 | 	sub	fp, #188
221cc     14 25 02 F6 | 	mov	local04, local06
221d0     0A 16 06 F6 | 	mov	arg03, #10
221d4     12 1B 02 F6 | 	mov	arg05, local04
221d8     AC 3D B0 FD | 	call	#__system___uitoa
221dc     5C 4E 05 F1 | 	add	fp, #92
221e0     A7 FA 61 FC | 	wrlong	result1, fp
221e4     5C 4E 85 F1 | 	sub	fp, #92
221e8     48 00 90 FD | 	jmp	#LR__3030
221ec                 | LR__3029
221ec     60 4E 05 F1 | 	add	fp, #96
221f0     A7 56 68 FC | 	wrlong	#43, fp
221f4     50 4E 05 F1 | 	add	fp, #80
221f8     A7 12 02 F6 | 	mov	arg01, fp
221fc     90 4E 85 F1 | 	sub	fp, #144
22200     A7 14 02 FB | 	rdlong	arg02, fp
22204     18 4E 05 F1 | 	add	fp, #24
22208     A7 18 02 FB | 	rdlong	arg04, fp
2220c     84 4E 05 F1 | 	add	fp, #132
22210     A7 28 02 FB | 	rdlong	local06, fp
22214     BC 4E 85 F1 | 	sub	fp, #188
22218     14 25 02 F6 | 	mov	local04, local06
2221c     0A 16 06 F6 | 	mov	arg03, #10
22220     12 1B 02 F6 | 	mov	arg05, local04
22224     60 3D B0 FD | 	call	#__system___uitoa
22228     5C 4E 05 F1 | 	add	fp, #92
2222c     A7 FA 61 FC | 	wrlong	result1, fp
22230     5C 4E 85 F1 | 	sub	fp, #92
22234                 | LR__3030
22234     24 4E 05 F1 | 	add	fp, #36
22238     A7 1E 0A FB | 	rdlong	local01, fp wz
2223c     24 4E 85 F1 | 	sub	fp, #36
22240     2C 00 90 AD |  if_e	jmp	#LR__3031
22244     50 4E 05 F1 | 	add	fp, #80
22248     A7 00 68 FC | 	wrlong	#0, fp
2224c     04 4E 85 F1 | 	sub	fp, #4
22250     A7 00 68 FC | 	wrlong	#0, fp
22254     6C 4E 05 F1 | 	add	fp, #108
22258     A7 1E 02 FB | 	rdlong	local01, fp
2225c     01 1E 06 F1 | 	add	local01, #1
22260     64 4E 85 F1 | 	sub	fp, #100
22264     A7 1E 62 FC | 	wrlong	local01, fp
22268     54 4E 85 F1 | 	sub	fp, #84
2226c     88 00 90 FD | 	jmp	#LR__3034
22270                 | LR__3031
22270     20 4E 05 F1 | 	add	fp, #32
22274     A7 1E 02 FB | 	rdlong	local01, fp
22278     20 4E 85 F1 | 	sub	fp, #32
2227c     00 1E 56 F2 | 	cmps	local01, #0 wc
22280     40 00 90 3D |  if_ae	jmp	#LR__3032
22284     20 4E 05 F1 | 	add	fp, #32
22288     A7 20 02 FB | 	rdlong	local02, fp
2228c     30 4E 05 F1 | 	add	fp, #48
22290     A7 20 62 FC | 	wrlong	local02, fp
22294     04 4E 85 F1 | 	sub	fp, #4
22298     A7 20 62 FC | 	wrlong	local02, fp
2229c     2C 4E 85 F1 | 	sub	fp, #44
222a0     A7 1E 02 FB | 	rdlong	local01, fp
222a4     98 4E 05 F1 | 	add	fp, #152
222a8     A7 22 02 FB | 	rdlong	local03, fp
222ac     11 1F 02 F1 | 	add	local01, local03
222b0     01 1E 06 F1 | 	add	local01, #1
222b4     64 4E 85 F1 | 	sub	fp, #100
222b8     A7 1E 62 FC | 	wrlong	local01, fp
222bc     54 4E 85 F1 | 	sub	fp, #84
222c0     34 00 90 FD | 	jmp	#LR__3033
222c4                 | LR__3032
222c4     4C 4E 05 F1 | 	add	fp, #76
222c8     A7 00 68 FC | 	wrlong	#0, fp
222cc     2C 4E 85 F1 | 	sub	fp, #44
222d0     A7 1E 02 FB | 	rdlong	local01, fp
222d4     30 4E 05 F1 | 	add	fp, #48
222d8     A7 1E 62 FC | 	wrlong	local01, fp
222dc     68 4E 05 F1 | 	add	fp, #104
222e0     A7 22 02 FB | 	rdlong	local03, fp
222e4     11 1F 02 F1 | 	add	local01, local03
222e8     01 1E 06 F1 | 	add	local01, #1
222ec     64 4E 85 F1 | 	sub	fp, #100
222f0     A7 1E 62 FC | 	wrlong	local01, fp
222f4     54 4E 85 F1 | 	sub	fp, #84
222f8                 | LR__3033
222f8                 | LR__3034
222f8     54 4E 05 F1 | 	add	fp, #84
222fc     A7 1E 02 FB | 	rdlong	local01, fp
22300     08 4E 85 F1 | 	sub	fp, #8
22304     A7 22 02 FB | 	rdlong	local03, fp
22308     11 1F 82 F1 | 	sub	local01, local03
2230c     01 1E 06 F1 | 	add	local01, #1
22310     24 4E 85 F1 | 	sub	fp, #36
22314     A7 1E 62 FC | 	wrlong	local01, fp
22318     04 4E 05 F1 | 	add	fp, #4
2231c     A7 1E 0A FB | 	rdlong	local01, fp wz
22320     2C 4E 85 F1 | 	sub	fp, #44
22324     28 4E 05 51 |  if_ne	add	fp, #40
22328     A7 22 02 5B |  if_ne	rdlong	local03, fp
2232c     01 22 06 51 |  if_ne	add	local03, #1
22330     A7 22 62 5C |  if_ne	wrlong	local03, fp
22334     28 4E 85 51 |  if_ne	sub	fp, #40
22338     1C 4E 05 F1 | 	add	fp, #28
2233c     A7 1E 02 FB | 	rdlong	local01, fp
22340     1C 4E 85 F1 | 	sub	fp, #28
22344     10 1E 0E F2 | 	cmp	local01, #16 wz
22348     28 4E 05 A1 |  if_e	add	fp, #40
2234c     A7 1E 02 AB |  if_e	rdlong	local01, fp
22350     02 1E 06 A1 |  if_e	add	local01, #2
22354     A7 1E 62 AC |  if_e	wrlong	local01, fp
22358     28 4E 85 A1 |  if_e	sub	fp, #40
2235c     24 4E 05 F1 | 	add	fp, #36
22360     A7 1E 0A FB | 	rdlong	local01, fp wz
22364     24 4E 85 F1 | 	sub	fp, #36
22368     28 00 90 AD |  if_e	jmp	#LR__3035
2236c     28 4E 05 F1 | 	add	fp, #40
22370     A7 1E 02 FB | 	rdlong	local01, fp
22374     02 22 06 F6 | 	mov	local03, #2
22378     34 4E 05 F1 | 	add	fp, #52
2237c     A7 26 02 FB | 	rdlong	local05, fp
22380     13 23 02 F1 | 	add	local03, local05
22384     11 1F 02 F1 | 	add	local01, local03
22388     34 4E 85 F1 | 	sub	fp, #52
2238c     A7 1E 62 FC | 	wrlong	local01, fp
22390     28 4E 85 F1 | 	sub	fp, #40
22394                 | LR__3035
22394     28 4E 05 F1 | 	add	fp, #40
22398     A7 1E 02 FB | 	rdlong	local01, fp
2239c     28 4E 85 F1 | 	sub	fp, #40
223a0     41 1E 56 F2 | 	cmps	local01, #65 wc
223a4     01 FA 65 36 |  if_ae	neg	result1, #1
223a8     08 05 90 3D |  if_ae	jmp	#LR__3063
223ac     3C 4E 05 F1 | 	add	fp, #60
223b0     A7 1E 0A FB | 	rdlong	local01, fp wz
223b4     3C 4E 85 F1 | 	sub	fp, #60
223b8     60 00 90 AD |  if_e	jmp	#LR__3036
223bc     C0 4E 05 F1 | 	add	fp, #192
223c0     A7 12 02 FB | 	rdlong	arg01, fp
223c4     94 4E 85 F1 | 	sub	fp, #148
223c8     A7 14 02 FB | 	rdlong	arg02, fp
223cc     14 4E 05 F1 | 	add	fp, #20
223d0     A7 16 02 FB | 	rdlong	arg03, fp
223d4     40 4E 85 F1 | 	sub	fp, #64
223d8     14 3E B0 FD | 	call	#__system__emitsign_0502
223dc     18 4F 05 F1 | 	add	fp, #280
223e0     A7 FA 61 FC | 	wrlong	result1, fp
223e4     18 4F 85 F1 | 	sub	fp, #280
223e8     00 FA 55 F2 | 	cmps	result1, #0 wc
223ec     18 4F 05 C1 |  if_b	add	fp, #280
223f0     A7 FA 01 CB |  if_b	rdlong	result1, fp
223f4     18 4F 85 C1 |  if_b	sub	fp, #280
223f8     B8 04 90 CD |  if_b	jmp	#LR__3063
223fc     C0 4E 05 F1 | 	add	fp, #192
22400     A7 1E 02 FB | 	rdlong	local01, fp
22404     58 4E 05 F1 | 	add	fp, #88
22408     A7 22 02 FB | 	rdlong	local03, fp
2240c     11 1F 02 F1 | 	add	local01, local03
22410     58 4E 85 F1 | 	sub	fp, #88
22414     A7 1E 62 FC | 	wrlong	local01, fp
22418     C0 4E 85 F1 | 	sub	fp, #192
2241c                 | LR__3036
2241c     4C 4E 05 F1 | 	add	fp, #76
22420     A7 1E 02 FB | 	rdlong	local01, fp
22424     34 4E 85 F1 | 	sub	fp, #52
22428     A7 1E 62 FC | 	wrlong	local01, fp
2242c     18 4E 85 F1 | 	sub	fp, #24
22430     97 9E 48 FB | 	callpa	#(@LR__3042-@LR__3037)>>2,fcache_load_ptr_
22434                 | LR__3037
22434     18 4E 05 F1 | 	add	fp, #24
22438     A7 20 02 FB | 	rdlong	local02, fp
2243c     3C 4E 05 F1 | 	add	fp, #60
22440     A7 26 02 FB | 	rdlong	local05, fp
22444     54 4E 85 F1 | 	sub	fp, #84
22448     13 21 52 F2 | 	cmps	local02, local05 wc
2244c     20 01 90 3D |  if_ae	jmp	#LR__3043
22450     18 4E 05 F1 | 	add	fp, #24
22454     A7 28 02 FB | 	rdlong	local06, fp
22458     18 4E 85 F1 | 	sub	fp, #24
2245c     00 28 56 F2 | 	cmps	local06, #0 wc
22460     58 00 90 CD |  if_b	jmp	#LR__3038
22464     18 4E 05 F1 | 	add	fp, #24
22468     A7 28 02 FB | 	rdlong	local06, fp
2246c     40 4E 05 F1 | 	add	fp, #64
22470     A7 2A 02 FB | 	rdlong	local07, fp
22474     58 4E 85 F1 | 	sub	fp, #88
22478     15 29 52 F2 | 	cmps	local06, local07 wc
2247c     3C 00 90 3D |  if_ae	jmp	#LR__3038
22480     C0 4E 05 F1 | 	add	fp, #192
22484     A7 2C 02 FB | 	rdlong	local08, fp
22488     16 2B 02 F6 | 	mov	local07, local08
2248c     01 2A 06 F1 | 	add	local07, #1
22490     A7 2A 62 FC | 	wrlong	local07, fp
22494     A8 4E 85 F1 | 	sub	fp, #168
22498     A7 2A 02 FB | 	rdlong	local07, fp
2249c     15 2F 02 F6 | 	mov	local09, local07
224a0     58 4E 05 F1 | 	add	fp, #88
224a4     A7 30 02 F6 | 	mov	local10, fp
224a8     A7 2E 02 F1 | 	add	local09, fp
224ac     17 33 C2 FA | 	rdbyte	local11, local09
224b0     16 33 42 FC | 	wrbyte	local11, local08
224b4     70 4E 85 F1 | 	sub	fp, #112
224b8     20 00 90 FD | 	jmp	#LR__3039
224bc                 | LR__3038
224bc     C0 4E 05 F1 | 	add	fp, #192
224c0     A7 2C 02 FB | 	rdlong	local08, fp
224c4     16 2F 02 F6 | 	mov	local09, local08
224c8     01 2E 06 F1 | 	add	local09, #1
224cc     A7 2E 62 FC | 	wrlong	local09, fp
224d0     C0 4E 85 F1 | 	sub	fp, #192
224d4     30 2E 06 F6 | 	mov	local09, #48
224d8     16 61 48 FC | 	wrbyte	#48, local08
224dc                 | LR__3039
224dc     18 4E 05 F1 | 	add	fp, #24
224e0     A7 28 02 FB | 	rdlong	local06, fp
224e4     38 4E 05 F1 | 	add	fp, #56
224e8     A7 34 02 FB | 	rdlong	local12, fp
224ec     50 4E 85 F1 | 	sub	fp, #80
224f0     1A 29 0A F2 | 	cmp	local06, local12 wz
224f4     5C 00 90 5D |  if_ne	jmp	#LR__3041
224f8     10 4F 05 F1 | 	add	fp, #272
224fc     A7 2A 02 FB | 	rdlong	local07, fp
22500     10 4F 85 F1 | 	sub	fp, #272
22504     15 2F 0A F6 | 	mov	local09, local07 wz
22508     28 00 90 5D |  if_ne	jmp	#LR__3040
2250c     54 4E 05 F1 | 	add	fp, #84
22510     A7 32 02 FB | 	rdlong	local11, fp
22514     19 31 02 F6 | 	mov	local10, local11
22518     01 30 86 F1 | 	sub	local10, #1
2251c     3C 4E 85 F1 | 	sub	fp, #60
22520     A7 36 02 FB | 	rdlong	local13, fp
22524     18 4E 85 F1 | 	sub	fp, #24
22528     1B 39 02 F6 | 	mov	local14, local13
2252c     18 39 52 F2 | 	cmps	local14, local10 wc
22530     20 00 90 3D |  if_ae	jmp	#LR__3041
22534                 | LR__3040
22534     C0 4E 05 F1 | 	add	fp, #192
22538     A7 2C 02 FB | 	rdlong	local08, fp
2253c     16 35 02 F6 | 	mov	local12, local08
22540     01 34 06 F1 | 	add	local12, #1
22544     A7 34 62 FC | 	wrlong	local12, fp
22548     C0 4E 85 F1 | 	sub	fp, #192
2254c     2E 2E 06 F6 | 	mov	local09, #46
22550     16 5D 48 FC | 	wrbyte	#46, local08
22554                 | LR__3041
22554     18 4E 05 F1 | 	add	fp, #24
22558     A7 3A 02 FB | 	rdlong	local15, fp
2255c     1D 35 02 F6 | 	mov	local12, local15
22560     01 34 06 F1 | 	add	local12, #1
22564     A7 34 62 FC | 	wrlong	local12, fp
22568     18 4E 85 F1 | 	sub	fp, #24
2256c     C4 FE 9F FD | 	jmp	#LR__3037
22570                 | LR__3042
22570                 | LR__3043
22570     34 4E 05 F1 | 	add	fp, #52
22574     A7 1E 0A FB | 	rdlong	local01, fp wz
22578     34 4E 85 F1 | 	sub	fp, #52
2257c     A0 00 90 AD |  if_e	jmp	#LR__3047
22580     C0 4E 05 F1 | 	add	fp, #192
22584     A7 1E 02 FB | 	rdlong	local01, fp
22588     01 1E 86 F1 | 	sub	local01, #1
2258c     A7 1E 62 FC | 	wrlong	local01, fp
22590     C0 4E 85 F1 | 	sub	fp, #192
22594     97 26 48 FB | 	callpa	#(@LR__3045-@LR__3044)>>2,fcache_load_ptr_
22598                 | LR__3044
22598     C0 4E 05 F1 | 	add	fp, #192
2259c     A7 1E 02 FB | 	rdlong	local01, fp
225a0     04 4E 05 F1 | 	add	fp, #4
225a4     A7 22 02 FB | 	rdlong	local03, fp
225a8     C4 4E 85 F1 | 	sub	fp, #196
225ac     11 1F 5A F2 | 	cmps	local01, local03 wcz
225b0     30 00 90 ED |  if_be	jmp	#LR__3046
225b4     C0 4E 05 F1 | 	add	fp, #192
225b8     A7 28 02 FB | 	rdlong	local06, fp
225bc     C0 4E 85 F1 | 	sub	fp, #192
225c0     14 25 C2 FA | 	rdbyte	local04, local06
225c4     30 24 0E F2 | 	cmp	local04, #48 wz
225c8     18 00 90 5D |  if_ne	jmp	#LR__3046
225cc     C0 4E 05 F1 | 	add	fp, #192
225d0     A7 1E 02 FB | 	rdlong	local01, fp
225d4     01 1E 86 F1 | 	sub	local01, #1
225d8     A7 1E 62 FC | 	wrlong	local01, fp
225dc     C0 4E 85 F1 | 	sub	fp, #192
225e0     B4 FF 9F FD | 	jmp	#LR__3044
225e4                 | LR__3045
225e4                 | LR__3046
225e4     C0 4E 05 F1 | 	add	fp, #192
225e8     A7 20 02 FB | 	rdlong	local02, fp
225ec     C0 4E 85 F1 | 	sub	fp, #192
225f0     10 1F C2 FA | 	rdbyte	local01, local02
225f4     2E 1E 0E F2 | 	cmp	local01, #46 wz
225f8     C0 4E 05 A1 |  if_e	add	fp, #192
225fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
22600     01 1E 86 A1 |  if_e	sub	local01, #1
22604     A7 1E 62 AC |  if_e	wrlong	local01, fp
22608     C0 4E 85 A1 |  if_e	sub	fp, #192
2260c     C0 4E 05 F1 | 	add	fp, #192
22610     A7 22 02 FB | 	rdlong	local03, fp
22614     01 22 06 F1 | 	add	local03, #1
22618     A7 22 62 FC | 	wrlong	local03, fp
2261c     C0 4E 85 F1 | 	sub	fp, #192
22620                 | LR__3047
22620     24 4E 05 F1 | 	add	fp, #36
22624     A7 1E 0A FB | 	rdlong	local01, fp wz
22628     24 4E 85 F1 | 	sub	fp, #36
2262c     B4 00 90 AD |  if_e	jmp	#LR__3050
22630     C0 4E 05 F1 | 	add	fp, #192
22634     A7 20 02 FB | 	rdlong	local02, fp
22638     10 23 02 F6 | 	mov	local03, local02
2263c     01 22 06 F1 | 	add	local03, #1
22640     A7 22 62 FC | 	wrlong	local03, fp
22644     90 4E 85 F1 | 	sub	fp, #144
22648     A7 24 02 FB | 	rdlong	local04, fp
2264c     10 25 42 FC | 	wrbyte	local04, local02
22650     90 4E 05 F1 | 	add	fp, #144
22654     A7 20 02 FB | 	rdlong	local02, fp
22658     10 23 02 F6 | 	mov	local03, local02
2265c     01 22 06 F1 | 	add	local03, #1
22660     A7 22 62 FC | 	wrlong	local03, fp
22664     60 4E 85 F1 | 	sub	fp, #96
22668     A7 24 02 FB | 	rdlong	local04, fp
2266c     10 25 42 FC | 	wrbyte	local04, local02
22670     48 4E 85 F1 | 	sub	fp, #72
22674     A7 00 68 FC | 	wrlong	#0, fp
22678     18 4E 85 F1 | 	sub	fp, #24
2267c                 | LR__3048
2267c     18 4E 05 F1 | 	add	fp, #24
22680     A7 20 02 FB | 	rdlong	local02, fp
22684     44 4E 05 F1 | 	add	fp, #68
22688     A7 26 02 FB | 	rdlong	local05, fp
2268c     5C 4E 85 F1 | 	sub	fp, #92
22690     13 21 52 F2 | 	cmps	local02, local05 wc
22694     4C 00 90 3D |  if_ae	jmp	#LR__3049
22698     C0 4E 05 F1 | 	add	fp, #192
2269c     A7 2C 02 FB | 	rdlong	local08, fp
226a0     16 35 02 F6 | 	mov	local12, local08
226a4     01 34 06 F1 | 	add	local12, #1
226a8     A7 34 62 FC | 	wrlong	local12, fp
226ac     A8 4E 85 F1 | 	sub	fp, #168
226b0     A7 2A 02 FB | 	rdlong	local07, fp
226b4     15 2F 02 F6 | 	mov	local09, local07
226b8     98 4E 05 F1 | 	add	fp, #152
226bc     A7 30 02 F6 | 	mov	local10, fp
226c0     A7 2E 02 F1 | 	add	local09, fp
226c4     17 33 C2 FA | 	rdbyte	local11, local09
226c8     16 33 42 FC | 	wrbyte	local11, local08
226cc     98 4E 85 F1 | 	sub	fp, #152
226d0     A7 34 02 FB | 	rdlong	local12, fp
226d4     01 34 06 F1 | 	add	local12, #1
226d8     A7 34 62 FC | 	wrlong	local12, fp
226dc     18 4E 85 F1 | 	sub	fp, #24
226e0     98 FF 9F FD | 	jmp	#LR__3048
226e4                 | LR__3049
226e4                 | LR__3050
226e4     C0 4E 05 F1 | 	add	fp, #192
226e8     A7 1E 02 FB | 	rdlong	local01, fp
226ec     C0 4E 85 F1 | 	sub	fp, #192
226f0     0F 01 48 FC | 	wrbyte	#0, local01
226f4                 | LR__3051
226f4     6C 4E 05 F1 | 	add	fp, #108
226f8     A7 1E 0A FB | 	rdlong	local01, fp wz
226fc     6C 4E 85 F1 | 	sub	fp, #108
22700     90 01 90 AD |  if_e	jmp	#LR__3062
22704     48 4E 05 F1 | 	add	fp, #72
22708     A7 22 0A FB | 	rdlong	local03, fp wz
2270c     48 4E 85 F1 | 	sub	fp, #72
22710     80 01 90 AD |  if_e	jmp	#LR__3062
22714     C4 4E 05 F1 | 	add	fp, #196
22718     A7 12 02 FB | 	rdlong	arg01, fp
2271c     C4 4E 85 F1 | 	sub	fp, #196
22720     09 3D 02 F6 | 	mov	local16, arg01
22724     97 06 48 FB | 	callpa	#(@LR__3053-@LR__3052)>>2,fcache_load_ptr_
22728                 | LR__3052
22728     1E FB C9 FA | 	rdbyte	result1, local16 wz
2272c     01 3C 06 51 |  if_ne	add	local16, #1
22730     F4 FF 9F 5D |  if_ne	jmp	#LR__3052
22734                 | LR__3053
22734     09 3D 82 F1 | 	sub	local16, arg01
22738     1E 25 02 F6 | 	mov	local04, local16
2273c     6C 4E 05 F1 | 	add	fp, #108
22740     A7 28 02 FB | 	rdlong	local06, fp
22744     6C 4E 85 F1 | 	sub	fp, #108
22748     14 25 5A F2 | 	cmps	local04, local06 wcz
2274c     44 01 90 ED |  if_be	jmp	#LR__3062
22750     C4 4E 05 F1 | 	add	fp, #196
22754     A7 1E 02 FB | 	rdlong	local01, fp
22758     5C 4E 05 F1 | 	add	fp, #92
2275c     A7 1E 62 FC | 	wrlong	local01, fp
22760     FC 4E 85 F1 | 	sub	fp, #252
22764     A7 1E 0A FB | 	rdlong	local01, fp wz
22768     24 4E 85 F1 | 	sub	fp, #36
2276c     20 00 90 AD |  if_e	jmp	#LR__3054
22770     B8 4E 05 F1 | 	add	fp, #184
22774     A7 00 68 FC | 	wrlong	#0, fp
22778     4C 4E 85 F1 | 	sub	fp, #76
2277c     A7 1E 02 FB | 	rdlong	local01, fp
22780     B0 4E 05 F1 | 	add	fp, #176
22784     A7 1E 62 FC | 	wrlong	local01, fp
22788     1C 4F 85 F1 | 	sub	fp, #284
2278c     24 00 90 FD | 	jmp	#LR__3055
22790                 | LR__3054
22790     6C 4E 05 F1 | 	add	fp, #108
22794     A7 1E 02 FB | 	rdlong	local01, fp
22798     01 1E 86 F1 | 	sub	local01, #1
2279c     4C 4E 05 F1 | 	add	fp, #76
227a0     A7 22 02 FB | 	rdlong	local03, fp
227a4     11 1F 82 F1 | 	sub	local01, local03
227a8     64 4E 05 F1 | 	add	fp, #100
227ac     A7 1E 62 FC | 	wrlong	local01, fp
227b0     1C 4F 85 F1 | 	sub	fp, #284
227b4                 | LR__3055
227b4     97 20 48 FB | 	callpa	#(@LR__3057-@LR__3056)>>2,fcache_load_ptr_
227b8                 | LR__3056
227b8     1C 4F 05 F1 | 	add	fp, #284
227bc     A7 1E 0A FB | 	rdlong	local01, fp wz
227c0     1C 4F 85 F1 | 	sub	fp, #284
227c4     30 00 90 AD |  if_e	jmp	#LR__3058
227c8     20 4F 05 F1 | 	add	fp, #288
227cc     A7 20 02 FB | 	rdlong	local02, fp
227d0     10 23 02 F6 | 	mov	local03, local02
227d4     01 22 06 F1 | 	add	local03, #1
227d8     A7 22 62 FC | 	wrlong	local03, fp
227dc     10 55 48 FC | 	wrbyte	#42, local02
227e0     04 4E 85 F1 | 	sub	fp, #4
227e4     A7 1E 02 FB | 	rdlong	local01, fp
227e8     01 1E 86 F1 | 	sub	local01, #1
227ec     A7 1E 62 FC | 	wrlong	local01, fp
227f0     1C 4F 85 F1 | 	sub	fp, #284
227f4     C0 FF 9F FD | 	jmp	#LR__3056
227f8                 | LR__3057
227f8                 | LR__3058
227f8     B8 4E 05 F1 | 	add	fp, #184
227fc     A7 1E 0A FB | 	rdlong	local01, fp wz
22800     B8 4E 85 F1 | 	sub	fp, #184
22804     70 00 90 AD |  if_e	jmp	#LR__3061
22808     20 4F 05 F1 | 	add	fp, #288
2280c     A7 20 02 FB | 	rdlong	local02, fp
22810     10 23 02 F6 | 	mov	local03, local02
22814     01 22 06 F1 | 	add	local03, #1
22818     A7 22 62 FC | 	wrlong	local03, fp
2281c     10 5D 48 FC | 	wrbyte	#46, local02
22820     04 4E 85 F1 | 	sub	fp, #4
22824     A7 00 68 FC | 	wrlong	#0, fp
22828     1C 4F 85 F1 | 	sub	fp, #284
2282c                 | LR__3059
2282c     1C 4F 05 F1 | 	add	fp, #284
22830     A7 20 02 FB | 	rdlong	local02, fp
22834     64 4E 85 F1 | 	sub	fp, #100
22838     A7 26 02 FB | 	rdlong	local05, fp
2283c     B8 4E 85 F1 | 	sub	fp, #184
22840     13 21 52 F2 | 	cmps	local02, local05 wc
22844     30 00 90 3D |  if_ae	jmp	#LR__3060
22848     20 4F 05 F1 | 	add	fp, #288
2284c     A7 2C 02 FB | 	rdlong	local08, fp
22850     16 35 02 F6 | 	mov	local12, local08
22854     01 34 06 F1 | 	add	local12, #1
22858     A7 34 62 FC | 	wrlong	local12, fp
2285c     16 55 48 FC | 	wrbyte	#42, local08
22860     04 4E 85 F1 | 	sub	fp, #4
22864     A7 34 02 FB | 	rdlong	local12, fp
22868     01 34 06 F1 | 	add	local12, #1
2286c     A7 34 62 FC | 	wrlong	local12, fp
22870     1C 4F 85 F1 | 	sub	fp, #284
22874     B4 FF 9F FD | 	jmp	#LR__3059
22878                 | LR__3060
22878                 | LR__3061
22878     20 4F 05 F1 | 	add	fp, #288
2287c     A7 20 02 FB | 	rdlong	local02, fp
22880     10 23 02 F6 | 	mov	local03, local02
22884     01 22 06 F1 | 	add	local03, #1
22888     A7 22 62 FC | 	wrlong	local03, fp
2288c     20 4F 85 F1 | 	sub	fp, #288
22890     10 01 48 FC | 	wrbyte	#0, local02
22894                 | LR__3062
22894     04 4E 05 F1 | 	add	fp, #4
22898     A7 12 02 FB | 	rdlong	arg01, fp
2289c     04 4E 05 F1 | 	add	fp, #4
228a0     A7 14 02 FB | 	rdlong	arg02, fp
228a4     BC 4E 05 F1 | 	add	fp, #188
228a8     A7 16 02 FB | 	rdlong	arg03, fp
228ac     C4 4E 85 F1 | 	sub	fp, #196
228b0     C4 EE BF FD | 	call	#__system___fmtstr
228b4                 | LR__3063
228b4     A7 F0 03 F6 | 	mov	ptra, fp
228b8     B2 00 A0 FD | 	call	#popregs_
228bc                 | __system___fmtfloat_ret
228bc     2D 00 64 FD | 	ret
228c0                 | 
228c0                 | __system__Left_S
228c0     04 4A 05 F6 | 	mov	COUNT_, #4
228c4     A8 00 A0 FD | 	call	#pushregs_
228c8     09 1F 02 F6 | 	mov	local01, arg01
228cc     0A 21 02 F6 | 	mov	local02, arg02
228d0     01 20 56 F2 | 	cmps	local02, #1 wc
228d4     80 01 00 CF 
228d8     96 FA 05 C6 |  if_b	mov	result1, ##@LR__4983
228dc     5C 00 90 CD |  if_b	jmp	#LR__3073
228e0     0F 13 02 F6 | 	mov	arg01, local01
228e4     09 23 02 F6 | 	mov	local03, arg01
228e8     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
228ec                 | LR__3070
228ec     11 FB C9 FA | 	rdbyte	result1, local03 wz
228f0     01 22 06 51 |  if_ne	add	local03, #1
228f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3070
228f8                 | LR__3071
228f8     09 23 82 F1 | 	sub	local03, arg01
228fc     11 FB 01 F6 | 	mov	result1, local03
22900     10 FB 59 F2 | 	cmps	result1, local02 wcz
22904     0F FB 01 E6 |  if_be	mov	result1, local01
22908     30 00 90 ED |  if_be	jmp	#LR__3073
2290c     10 13 02 F6 | 	mov	arg01, local02
22910     02 12 06 F1 | 	add	arg01, #2
22914     08 1E B0 FD | 	call	#__system___gc_alloc_managed
22918     FD 24 0A F6 | 	mov	local04, result1 wz
2291c     18 00 90 AD |  if_e	jmp	#LR__3072
22920     12 13 02 F6 | 	mov	arg01, local04
22924     0F 15 02 F6 | 	mov	arg02, local01
22928     10 17 02 F6 | 	mov	arg03, local02
2292c     34 DE BF FD | 	call	#__system____builtin_memmove
22930     12 21 02 F1 | 	add	local02, local04
22934     10 01 48 FC | 	wrbyte	#0, local02
22938                 | LR__3072
22938     12 FB 01 F6 | 	mov	result1, local04
2293c                 | LR__3073
2293c     A7 F0 03 F6 | 	mov	ptra, fp
22940     B2 00 A0 FD | 	call	#popregs_
22944                 | __system__Left_S_ret
22944     2D 00 64 FD | 	ret
22948                 | 
22948                 | __system__Right_S
22948     05 4A 05 F6 | 	mov	COUNT_, #5
2294c     A8 00 A0 FD | 	call	#pushregs_
22950     09 1F 02 F6 | 	mov	local01, arg01
22954     0A 21 02 F6 | 	mov	local02, arg02
22958     01 20 56 F2 | 	cmps	local02, #1 wc
2295c     80 01 00 CF 
22960     97 FA 05 C6 |  if_b	mov	result1, ##@LR__4984
22964     64 00 90 CD |  if_b	jmp	#LR__3083
22968     0F 13 02 F6 | 	mov	arg01, local01
2296c     09 23 02 F6 | 	mov	local03, arg01
22970     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
22974                 | LR__3080
22974     11 FB C9 FA | 	rdbyte	result1, local03 wz
22978     01 22 06 51 |  if_ne	add	local03, #1
2297c     F4 FF 9F 5D |  if_ne	jmp	#LR__3080
22980                 | LR__3081
22980     09 23 82 F1 | 	sub	local03, arg01
22984     11 FB 01 F6 | 	mov	result1, local03
22988     FD 24 02 F6 | 	mov	local04, result1
2298c     10 25 5A F2 | 	cmps	local04, local02 wcz
22990     0F FB 01 E6 |  if_be	mov	result1, local01
22994     34 00 90 ED |  if_be	jmp	#LR__3083
22998     10 13 02 F6 | 	mov	arg01, local02
2299c     02 12 06 F1 | 	add	arg01, #2
229a0     7C 1D B0 FD | 	call	#__system___gc_alloc_managed
229a4     FD 26 0A F6 | 	mov	local05, result1 wz
229a8     1C 00 90 AD |  if_e	jmp	#LR__3082
229ac     10 25 82 F1 | 	sub	local04, local02
229b0     0F 25 02 F1 | 	add	local04, local01
229b4     01 20 06 F1 | 	add	local02, #1
229b8     13 13 02 F6 | 	mov	arg01, local05
229bc     12 15 02 F6 | 	mov	arg02, local04
229c0     10 17 02 F6 | 	mov	arg03, local02
229c4     9C DD BF FD | 	call	#__system____builtin_memmove
229c8                 | LR__3082
229c8     13 FB 01 F6 | 	mov	result1, local05
229cc                 | LR__3083
229cc     A7 F0 03 F6 | 	mov	ptra, fp
229d0     B2 00 A0 FD | 	call	#popregs_
229d4                 | __system__Right_S_ret
229d4     2D 00 64 FD | 	ret
229d8                 | 
229d8                 | __system__Mid_S
229d8     05 4A 05 F6 | 	mov	COUNT_, #5
229dc     A8 00 A0 FD | 	call	#pushregs_
229e0     09 1F 02 F6 | 	mov	local01, arg01
229e4     0A 21 02 F6 | 	mov	local02, arg02
229e8     01 16 56 F2 | 	cmps	arg03, #1 wc
229ec     80 01 00 CF 
229f0     98 FA 05 C6 |  if_b	mov	result1, ##@LR__4985
229f4     80 00 90 CD |  if_b	jmp	#LR__3093
229f8     01 20 86 F1 | 	sub	local02, #1
229fc     00 20 56 F3 | 	fges	local02, #0 wc
22a00     0F 13 02 F6 | 	mov	arg01, local01
22a04     09 23 02 F6 | 	mov	local03, arg01
22a08     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
22a0c                 | LR__3090
22a0c     11 FB C9 FA | 	rdbyte	result1, local03 wz
22a10     01 22 06 51 |  if_ne	add	local03, #1
22a14     F4 FF 9F 5D |  if_ne	jmp	#LR__3090
22a18                 | LR__3091
22a18     09 23 82 F1 | 	sub	local03, arg01
22a1c     11 FB 01 F6 | 	mov	result1, local03
22a20     FD 14 02 F6 | 	mov	arg02, result1
22a24     10 15 52 F2 | 	cmps	arg02, local02 wc
22a28     80 01 00 CF 
22a2c     99 FA 05 C6 |  if_b	mov	result1, ##@LR__4986
22a30     44 00 90 CD |  if_b	jmp	#LR__3093
22a34     0A 25 02 F6 | 	mov	local04, arg02
22a38     10 25 82 F1 | 	sub	local04, local02
22a3c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22a40     0B 25 02 16 |  if_a	mov	local04, arg03
22a44     12 13 02 F6 | 	mov	arg01, local04
22a48     02 12 06 F1 | 	add	arg01, #2
22a4c     D0 1C B0 FD | 	call	#__system___gc_alloc_managed
22a50     FD 26 0A F6 | 	mov	local05, result1 wz
22a54     1C 00 90 AD |  if_e	jmp	#LR__3092
22a58     0F 21 02 F1 | 	add	local02, local01
22a5c     13 13 02 F6 | 	mov	arg01, local05
22a60     10 15 02 F6 | 	mov	arg02, local02
22a64     12 17 02 F6 | 	mov	arg03, local04
22a68     F8 DC BF FD | 	call	#__system____builtin_memmove
22a6c     13 25 02 F1 | 	add	local04, local05
22a70     12 01 48 FC | 	wrbyte	#0, local04
22a74                 | LR__3092
22a74     13 FB 01 F6 | 	mov	result1, local05
22a78                 | LR__3093
22a78     A7 F0 03 F6 | 	mov	ptra, fp
22a7c     B2 00 A0 FD | 	call	#popregs_
22a80                 | __system__Mid_S_ret
22a80     2D 00 64 FD | 	ret
22a84                 | 
22a84                 | __system__Chr_S
22a84     01 4A 05 F6 | 	mov	COUNT_, #1
22a88     A8 00 A0 FD | 	call	#pushregs_
22a8c     09 1F 02 F6 | 	mov	local01, arg01
22a90     03 12 06 F6 | 	mov	arg01, #3
22a94     88 1C B0 FD | 	call	#__system___gc_alloc_managed
22a98     00 FA 4D F2 | 	cmps	result1, #0 wz
22a9c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22aa0     01 FA 05 51 |  if_ne	add	result1, #1
22aa4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22aa8     01 FA 85 51 |  if_ne	sub	result1, #1
22aac     A7 F0 03 F6 | 	mov	ptra, fp
22ab0     B2 00 A0 FD | 	call	#popregs_
22ab4                 | __system__Chr_S_ret
22ab4     2D 00 64 FD | 	ret
22ab8                 | 
22ab8                 | __system__str_S
22ab8     02 4A 05 F6 | 	mov	COUNT_, #2
22abc     A8 00 A0 FD | 	call	#pushregs_
22ac0     09 1F 02 F6 | 	mov	local01, arg01
22ac4     10 12 06 F6 | 	mov	arg01, #16
22ac8     54 1C B0 FD | 	call	#__system___gc_alloc_managed
22acc     FD 20 0A F6 | 	mov	local02, result1 wz
22ad0     30 00 90 AD |  if_e	jmp	#LR__3100
22ad4     F8 13 02 F6 | 	mov	arg01, ptra
22ad8     08 F0 07 F1 | 	add	ptra, #8
22adc     09 21 62 FC | 	wrlong	local02, arg01
22ae0     04 12 06 F1 | 	add	arg01, #4
22ae4     09 01 68 FC | 	wrlong	#0, arg01
22ae8     04 12 86 F1 | 	sub	arg01, #4
22aec     00 A0 04 FF 
22af0     00 12 46 F5 | 	or	arg01, ##155189248
22af4     00 14 06 F6 | 	mov	arg02, #0
22af8     0F 17 02 F6 | 	mov	arg03, local01
22afc     67 18 06 F6 | 	mov	arg04, #103
22b00     90 EE BF FD | 	call	#__system___fmtfloat
22b04                 | LR__3100
22b04     10 FB 01 F6 | 	mov	result1, local02
22b08     A7 F0 03 F6 | 	mov	ptra, fp
22b0c     B2 00 A0 FD | 	call	#popregs_
22b10                 | __system__str_S_ret
22b10     2D 00 64 FD | 	ret
22b14                 | 
22b14                 | __system__Number_S
22b14     08 4A 05 F6 | 	mov	COUNT_, #8
22b18     A8 00 A0 FD | 	call	#pushregs_
22b1c     09 1F 02 F6 | 	mov	local01, arg01
22b20     0A 21 0A F6 | 	mov	local02, arg02 wz
22b24     0B 23 02 F6 | 	mov	local03, arg03
22b28     3C 00 90 5D |  if_ne	jmp	#LR__3112
22b2c     01 20 06 F6 | 	mov	local02, #1
22b30     11 25 02 F6 | 	mov	local04, local03
22b34     01 26 06 F6 | 	mov	local05, #1
22b38     97 16 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22b3c                 | LR__3110
22b3c     00 28 06 F6 | 	mov	local06, #0
22b40     0F 25 1A F2 | 	cmp	local04, local01 wcz
22b44     01 28 66 E6 |  if_be	neg	local06, #1
22b48     12 27 12 F2 | 	cmp	local05, local04 wc
22b4c     15 2B A2 F1 | 	subx	local07, local07
22b50     15 29 CA F7 | 	test	local06, local07 wz
22b54     11 25 02 5D |  if_ne	qmul	local04, local03
22b58     12 27 02 56 |  if_ne	mov	local05, local04
22b5c     01 20 06 51 |  if_ne	add	local02, #1
22b60     18 24 62 5D |  if_ne	getqx	local04
22b64     D4 FF 9F 5D |  if_ne	jmp	#LR__3110
22b68                 | LR__3111
22b68                 | LR__3112
22b68     20 20 36 F3 | 	fle	local02, #32 wc
22b6c     10 13 02 F6 | 	mov	arg01, local02
22b70     02 12 06 F1 | 	add	arg01, #2
22b74     A8 1B B0 FD | 	call	#__system___gc_alloc_managed
22b78     FD 28 02 F6 | 	mov	local06, result1
22b7c     10 2B 02 F6 | 	mov	local07, local02
22b80     14 2B 02 F1 | 	add	local07, local06
22b84     15 01 48 FC | 	wrbyte	#0, local07
22b88     97 1A 48 FB | 	callpa	#(@LR__3114-@LR__3113)>>2,fcache_load_ptr_
22b8c                 | LR__3113
22b8c     01 20 16 F2 | 	cmp	local02, #1 wc
22b90     2C 00 90 CD |  if_b	jmp	#LR__3115
22b94     11 1F 12 FD | 	qdiv	local01, local03
22b98     01 20 86 F1 | 	sub	local02, #1
22b9c     10 2B 02 F6 | 	mov	local07, local02
22ba0     14 2B 02 F1 | 	add	local07, local06
22ba4     19 2C 62 FD | 	getqy	local08
22ba8     0A 2C 16 F2 | 	cmp	local08, #10 wc
22bac     30 2C 06 C1 |  if_b	add	local08, #48
22bb0     37 2C 06 31 |  if_ae	add	local08, #55
22bb4     15 2D 42 FC | 	wrbyte	local08, local07
22bb8     18 1E 62 FD | 	getqx	local01
22bbc     CC FF 9F FD | 	jmp	#LR__3113
22bc0                 | LR__3114
22bc0                 | LR__3115
22bc0     14 FB 01 F6 | 	mov	result1, local06
22bc4     A7 F0 03 F6 | 	mov	ptra, fp
22bc8     B2 00 A0 FD | 	call	#popregs_
22bcc                 | __system__Number_S_ret
22bcc     2D 00 64 FD | 	ret
22bd0                 | 
22bd0                 | __system__LCase_S
22bd0     07 4A 05 F6 | 	mov	COUNT_, #7
22bd4     A8 00 A0 FD | 	call	#pushregs_
22bd8     09 1F 02 F6 | 	mov	local01, arg01
22bdc     09 21 02 F6 | 	mov	local02, arg01
22be0     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22be4                 | LR__3120
22be4     10 FB C9 FA | 	rdbyte	result1, local02 wz
22be8     01 20 06 51 |  if_ne	add	local02, #1
22bec     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22bf0                 | LR__3121
22bf0     09 21 82 F1 | 	sub	local02, arg01
22bf4     10 FB 01 F6 | 	mov	result1, local02
22bf8     FD 20 0A F6 | 	mov	local02, result1 wz
22bfc     80 01 00 AF 
22c00     9A FA 05 A6 |  if_e	mov	result1, ##@LR__4987
22c04     7C 00 90 AD |  if_e	jmp	#LR__3127
22c08     10 13 02 F6 | 	mov	arg01, local02
22c0c     02 12 06 F1 | 	add	arg01, #2
22c10     0C 1B B0 FD | 	call	#__system___gc_alloc_managed
22c14     FD 22 0A F6 | 	mov	local03, result1 wz
22c18     64 00 90 AD |  if_e	jmp	#LR__3126
22c1c     01 24 66 F6 | 	neg	local04, #1
22c20     97 26 48 FB | 	callpa	#(@LR__3125-@LR__3122)>>2,fcache_load_ptr_
22c24                 | LR__3122
22c24     01 24 06 F1 | 	add	local04, #1
22c28     12 27 02 F6 | 	mov	local05, local04
22c2c     0F 27 02 F1 | 	add	local05, local01
22c30     13 29 C2 FA | 	rdbyte	local06, local05
22c34     41 28 56 F2 | 	cmps	local06, #65 wc
22c38     18 00 90 CD |  if_b	jmp	#LR__3123
22c3c     5B 28 56 F2 | 	cmps	local06, #91 wc
22c40     12 2B 02 C6 |  if_b	mov	local07, local04
22c44     11 2B 02 C1 |  if_b	add	local07, local03
22c48     20 28 06 C1 |  if_b	add	local06, #32
22c4c     15 29 42 CC |  if_b	wrbyte	local06, local07
22c50     0C 00 90 CD |  if_b	jmp	#LR__3124
22c54                 | LR__3123
22c54     12 2B 02 F6 | 	mov	local07, local04
22c58     11 2B 02 F1 | 	add	local07, local03
22c5c     15 29 42 FC | 	wrbyte	local06, local07
22c60                 | LR__3124
22c60     10 29 02 F6 | 	mov	local06, local02
22c64     01 28 86 F1 | 	sub	local06, #1
22c68     14 25 0A F2 | 	cmp	local04, local06 wz
22c6c     B4 FF 9F 5D |  if_ne	jmp	#LR__3122
22c70                 | LR__3125
22c70     11 21 02 F1 | 	add	local02, local03
22c74     10 01 48 FC | 	wrbyte	#0, local02
22c78     11 FB 01 F6 | 	mov	result1, local03
22c7c     04 00 90 FD | 	jmp	#LR__3127
22c80                 | LR__3126
22c80     11 FB 01 F6 | 	mov	result1, local03
22c84                 | LR__3127
22c84     A7 F0 03 F6 | 	mov	ptra, fp
22c88     B2 00 A0 FD | 	call	#popregs_
22c8c                 | __system__LCase_S_ret
22c8c     2D 00 64 FD | 	ret
22c90                 | 
22c90                 | __system__LTrim_S
22c90     05 4A 05 F6 | 	mov	COUNT_, #5
22c94     A8 00 A0 FD | 	call	#pushregs_
22c98     09 1F 02 F6 | 	mov	local01, arg01
22c9c     09 21 02 F6 | 	mov	local02, arg01
22ca0     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22ca4                 | LR__3130
22ca4     10 FB C9 FA | 	rdbyte	result1, local02 wz
22ca8     01 20 06 51 |  if_ne	add	local02, #1
22cac     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22cb0                 | LR__3131
22cb0     09 21 82 F1 | 	sub	local02, arg01
22cb4     10 FB 01 F6 | 	mov	result1, local02
22cb8     FD 20 0A F6 | 	mov	local02, result1 wz
22cbc     80 01 00 AF 
22cc0     9B FA 05 A6 |  if_e	mov	result1, ##@LR__4988
22cc4     7C 00 90 AD |  if_e	jmp	#LR__3136
22cc8     00 22 06 F6 | 	mov	local03, #0
22ccc     10 25 02 F6 | 	mov	local04, local02
22cd0                 | LR__3132
22cd0     12 23 52 F2 | 	cmps	local03, local04 wc
22cd4     68 00 90 3D |  if_ae	jmp	#LR__3135
22cd8     11 17 02 F6 | 	mov	arg03, local03
22cdc     0F 17 02 F1 | 	add	arg03, local01
22ce0     0B 17 C2 FA | 	rdbyte	arg03, arg03
22ce4     20 16 0E F2 | 	cmp	arg03, #32 wz
22ce8     4C 00 90 AD |  if_e	jmp	#LR__3134
22cec     10 13 02 F6 | 	mov	arg01, local02
22cf0     11 13 82 F1 | 	sub	arg01, local03
22cf4     02 12 06 F1 | 	add	arg01, #2
22cf8     24 1A B0 FD | 	call	#__system___gc_alloc_managed
22cfc     FD 26 0A F6 | 	mov	local05, result1 wz
22d00     2C 00 90 AD |  if_e	jmp	#LR__3133
22d04     11 15 02 F6 | 	mov	arg02, local03
22d08     0F 15 02 F1 | 	add	arg02, local01
22d0c     10 17 02 F6 | 	mov	arg03, local02
22d10     11 17 82 F1 | 	sub	arg03, local03
22d14     13 13 02 F6 | 	mov	arg01, local05
22d18     48 DA BF FD | 	call	#__system____builtin_memmove
22d1c     11 21 82 F1 | 	sub	local02, local03
22d20     13 21 02 F1 | 	add	local02, local05
22d24     10 01 48 FC | 	wrbyte	#0, local02
22d28     13 FB 01 F6 | 	mov	result1, local05
22d2c     14 00 90 FD | 	jmp	#LR__3136
22d30                 | LR__3133
22d30     13 FB 01 F6 | 	mov	result1, local05
22d34     0C 00 90 FD | 	jmp	#LR__3136
22d38                 | LR__3134
22d38     01 22 06 F1 | 	add	local03, #1
22d3c     90 FF 9F FD | 	jmp	#LR__3132
22d40                 | LR__3135
22d40     0F FB 01 F6 | 	mov	result1, local01
22d44                 | LR__3136
22d44     A7 F0 03 F6 | 	mov	ptra, fp
22d48     B2 00 A0 FD | 	call	#popregs_
22d4c                 | __system__LTrim_S_ret
22d4c     2D 00 64 FD | 	ret
22d50                 | 
22d50                 | __system__RTrim_S
22d50     04 4A 05 F6 | 	mov	COUNT_, #4
22d54     A8 00 A0 FD | 	call	#pushregs_
22d58     09 1F 02 F6 | 	mov	local01, arg01
22d5c     09 21 02 F6 | 	mov	local02, arg01
22d60     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
22d64                 | LR__3140
22d64     10 FB C9 FA | 	rdbyte	result1, local02 wz
22d68     01 20 06 51 |  if_ne	add	local02, #1
22d6c     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
22d70                 | LR__3141
22d70     09 21 82 F1 | 	sub	local02, arg01
22d74     10 FB 01 F6 | 	mov	result1, local02
22d78     FD 20 0A F6 | 	mov	local02, result1 wz
22d7c     80 01 00 AF 
22d80     9C FA 05 A6 |  if_e	mov	result1, ##@LR__4989
22d84     74 00 90 AD |  if_e	jmp	#LR__3145
22d88     10 23 02 F6 | 	mov	local03, local02
22d8c     01 22 86 F1 | 	sub	local03, #1
22d90                 | LR__3142
22d90     11 15 02 F6 | 	mov	arg02, local03
22d94     0F 15 02 F1 | 	add	arg02, local01
22d98     0A 21 C2 FA | 	rdbyte	local02, arg02
22d9c     20 20 0E F2 | 	cmp	local02, #32 wz
22da0     44 00 90 AD |  if_e	jmp	#LR__3144
22da4     11 13 02 F6 | 	mov	arg01, local03
22da8     02 12 06 F1 | 	add	arg01, #2
22dac     70 19 B0 FD | 	call	#__system___gc_alloc_managed
22db0     FD 24 0A F6 | 	mov	local04, result1 wz
22db4     28 00 90 AD |  if_e	jmp	#LR__3143
22db8     11 17 02 F6 | 	mov	arg03, local03
22dbc     01 16 06 F1 | 	add	arg03, #1
22dc0     12 13 02 F6 | 	mov	arg01, local04
22dc4     0F 15 02 F6 | 	mov	arg02, local01
22dc8     98 D9 BF FD | 	call	#__system____builtin_memmove
22dcc     01 22 06 F1 | 	add	local03, #1
22dd0     12 23 02 F1 | 	add	local03, local04
22dd4     11 01 48 FC | 	wrbyte	#0, local03
22dd8     12 FB 01 F6 | 	mov	result1, local04
22ddc     1C 00 90 FD | 	jmp	#LR__3145
22de0                 | LR__3143
22de0     12 FB 01 F6 | 	mov	result1, local04
22de4     14 00 90 FD | 	jmp	#LR__3145
22de8                 | LR__3144
22de8     01 22 86 F1 | 	sub	local03, #1
22dec     00 22 56 F2 | 	cmps	local03, #0 wc
22df0     9C FF 9F 3D |  if_ae	jmp	#LR__3142
22df4     80 01 00 FF 
22df8     9D FA 05 F6 | 	mov	result1, ##@LR__4990
22dfc                 | LR__3145
22dfc     A7 F0 03 F6 | 	mov	ptra, fp
22e00     B2 00 A0 FD | 	call	#popregs_
22e04                 | __system__RTrim_S_ret
22e04     2D 00 64 FD | 	ret
22e08                 | 
22e08                 | __system__Instr
22e08     07 4A 05 F6 | 	mov	COUNT_, #7
22e0c     A8 00 A0 FD | 	call	#pushregs_
22e10     09 1F 02 F6 | 	mov	local01, arg01
22e14     0A 21 02 F6 | 	mov	local02, arg02
22e18     0B 23 02 F6 | 	mov	local03, arg03
22e1c     11 13 02 F6 | 	mov	arg01, local03
22e20     09 25 02 F6 | 	mov	local04, arg01
22e24     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22e28                 | LR__3150
22e28     12 FB C9 FA | 	rdbyte	result1, local04 wz
22e2c     01 24 06 51 |  if_ne	add	local04, #1
22e30     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
22e34                 | LR__3151
22e34     09 25 82 F1 | 	sub	local04, arg01
22e38     12 27 02 F6 | 	mov	local05, local04
22e3c     10 13 02 F6 | 	mov	arg01, local02
22e40     09 25 02 F6 | 	mov	local04, arg01
22e44     97 06 48 FB | 	callpa	#(@LR__3153-@LR__3152)>>2,fcache_load_ptr_
22e48                 | LR__3152
22e48     12 FB C9 FA | 	rdbyte	result1, local04 wz
22e4c     01 24 06 51 |  if_ne	add	local04, #1
22e50     F4 FF 9F 5D |  if_ne	jmp	#LR__3152
22e54                 | LR__3153
22e54     09 25 82 F1 | 	sub	local04, arg01
22e58     12 FB 01 F6 | 	mov	result1, local04
22e5c     FD 18 0A F6 | 	mov	arg04, result1 wz
22e60     00 FA 05 A6 |  if_e	mov	result1, #0
22e64     98 00 90 AD |  if_e	jmp	#LR__3157
22e68     00 26 0E F2 | 	cmp	local05, #0 wz
22e6c     00 FA 05 A6 |  if_e	mov	result1, #0
22e70     8C 00 90 AD |  if_e	jmp	#LR__3157
22e74     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
22e78     00 FA 05 16 |  if_a	mov	result1, #0
22e7c     80 00 90 1D |  if_a	jmp	#LR__3157
22e80     01 1E 56 F2 | 	cmps	local01, #1 wc
22e84     01 1E 06 C6 |  if_b	mov	local01, #1
22e88     11 29 C2 FA | 	rdbyte	local06, local03
22e8c     01 26 0E F2 | 	cmp	local05, #1 wz
22e90     18 00 90 5D |  if_ne	jmp	#LR__3154
22e94     10 13 02 F6 | 	mov	arg01, local02
22e98     14 15 02 F6 | 	mov	arg02, local06
22e9c     0F 17 02 F6 | 	mov	arg03, local01
22ea0     00 18 06 F6 | 	mov	arg04, #0
22ea4     50 34 B0 FD | 	call	#__system____ScanForChar
22ea8     54 00 90 FD | 	jmp	#LR__3157
22eac                 | LR__3154
22eac     0F 2B 02 F6 | 	mov	local07, local01
22eb0                 | LR__3155
22eb0     10 13 02 F6 | 	mov	arg01, local02
22eb4     14 15 02 F6 | 	mov	arg02, local06
22eb8     15 17 02 F6 | 	mov	arg03, local07
22ebc     00 18 06 F6 | 	mov	arg04, #0
22ec0     34 34 B0 FD | 	call	#__system____ScanForChar
22ec4     FD 2A 0A F6 | 	mov	local07, result1 wz
22ec8     30 00 90 AD |  if_e	jmp	#LR__3156
22ecc     13 17 02 F6 | 	mov	arg03, local05
22ed0     10 13 02 F6 | 	mov	arg01, local02
22ed4     15 15 02 F6 | 	mov	arg02, local07
22ed8     FC FA BF FD | 	call	#__system__Mid_S
22edc     FD 12 02 F6 | 	mov	arg01, result1
22ee0     11 15 02 F6 | 	mov	arg02, local03
22ee4     84 D9 BF FD | 	call	#__system___string_cmp
22ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
22eec     15 FB 01 A6 |  if_e	mov	result1, local07
22ef0     0C 00 90 AD |  if_e	jmp	#LR__3157
22ef4     13 2B 02 F1 | 	add	local07, local05
22ef8     B4 FF 9F FD | 	jmp	#LR__3155
22efc                 | LR__3156
22efc     00 FA 05 F6 | 	mov	result1, #0
22f00                 | LR__3157
22f00     A7 F0 03 F6 | 	mov	ptra, fp
22f04     B2 00 A0 FD | 	call	#popregs_
22f08                 | __system__Instr_ret
22f08     2D 00 64 FD | 	ret
22f0c                 | 
22f0c                 | __system___strerror
22f0c     00 12 56 F2 | 	cmps	arg01, #0 wc
22f10     08 00 90 CD |  if_b	jmp	#LR__3160
22f14     1A 12 56 F2 | 	cmps	arg01, #26 wc
22f18     04 00 90 CD |  if_b	jmp	#LR__3161
22f1c                 | LR__3160
22f1c     19 12 06 F6 | 	mov	arg01, #25
22f20                 | LR__3161
22f20     02 12 66 F0 | 	shl	arg01, #2
22f24     01 00 00 FF 
22f28     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
22f2c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22f30     09 FB 01 FB | 	rdlong	result1, arg01
22f34     01 00 00 FF 
22f38     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
22f3c                 | __system___strerror_ret
22f3c     2D 00 64 FD | 	ret
22f40                 | 
22f40                 | __system___int64_shl
22f40     20 16 CE F7 | 	test	arg03, #32 wz
22f44     09 15 02 56 |  if_ne	mov	arg02, arg01
22f48     00 12 06 56 |  if_ne	mov	arg01, #0
22f4c     1F 16 CE F7 | 	test	arg03, #31 wz
22f50     18 00 90 AD |  if_e	jmp	#LR__3170
22f54     0B 15 62 F0 | 	shl	arg02, arg03
22f58     09 FB 01 F6 | 	mov	result1, arg01
22f5c     0B FD 61 F6 | 	neg	result2, arg03
22f60     FE FA 41 F0 | 	shr	result1, result2
22f64     FD 14 42 F5 | 	or	arg02, result1
22f68     0B 13 62 F0 | 	shl	arg01, arg03
22f6c                 | LR__3170
22f6c     0A FD 01 F6 | 	mov	result2, arg02
22f70     09 FB 01 F6 | 	mov	result1, arg01
22f74                 | __system___int64_shl_ret
22f74     2D 00 64 FD | 	ret
22f78                 | 
22f78                 | __system___usepins
22f78     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22f7c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22f80     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
22f84     00 13 CA F7 | 	test	arg01, _var01 wz
22f88     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
22f8c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
22f90     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
22f94     01 15 CA A7 |  if_e	test	arg02, _var02 wz
22f98     00 FA 05 56 |  if_ne	mov	result1, #0
22f9c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
22fa0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22fa4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22fa8     09 03 42 F5 | 	or	_var02, arg01
22fac     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22fb0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fb4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
22fb8     0A 03 42 F5 | 	or	_var02, arg02
22fbc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22fc0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22fc4     01 FA 65 F6 | 	neg	result1, #1
22fc8                 | __system___usepins_ret
22fc8     2D 00 64 FD | 	ret
22fcc                 | 
22fcc                 | __system___freepins
22fcc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
22fd0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22fd4     09 01 22 F5 | 	andn	_var01, arg01
22fd8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22fdc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22fe0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
22fe4     0A 01 22 F5 | 	andn	_var01, arg02
22fe8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
22fec     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
22ff0                 | __system___freepins_ret
22ff0     2D 00 64 FD | 	ret
22ff4                 | 
22ff4                 | __system___float_fromuns
22ff4     09 17 0A F6 | 	mov	arg03, arg01 wz
22ff8     0B FB 01 A6 |  if_e	mov	result1, arg03
22ffc     24 00 90 AD |  if_e	jmp	#LR__3180
23000     0B 15 92 F7 | 	encod	arg02, arg03 wc
23004     01 14 06 C1 |  if_b	add	arg02, #1
23008     01 14 86 F1 | 	sub	arg02, #1
2300c     1F 12 06 F6 | 	mov	arg01, #31
23010     0A 13 82 F1 | 	sub	arg01, arg02
23014     09 17 62 F0 | 	shl	arg03, arg01
23018     02 16 46 F0 | 	shr	arg03, #2
2301c     00 12 06 F6 | 	mov	arg01, #0
23020     4C 09 B0 FD | 	call	#__system___float_Pack
23024                 | LR__3180
23024                 | __system___float_fromuns_ret
23024     2D 00 64 FD | 	ret
23028                 | 
23028                 | __system___float_add
23028     0F 4A 05 F6 | 	mov	COUNT_, #15
2302c     A8 00 A0 FD | 	call	#pushregs_
23030     09 1F 02 F6 | 	mov	local01, arg01
23034     0A 21 02 F6 | 	mov	local02, arg02
23038     00 22 06 F6 | 	mov	local03, #0
2303c     0F 25 02 F6 | 	mov	local04, local01
23040     12 27 02 F6 | 	mov	local05, local04
23044     16 26 46 F7 | 	zerox	local05, #22
23048     12 29 02 F6 | 	mov	local06, local04
2304c     01 28 66 F0 | 	shl	local06, #1
23050     18 28 46 F0 | 	shr	local06, #24
23054     1F 24 46 F0 | 	shr	local04, #31
23058     10 13 02 F6 | 	mov	arg01, local02
2305c     09 FB 01 F6 | 	mov	result1, arg01
23060     FD 2A 02 F6 | 	mov	local07, result1
23064     15 2D 02 F6 | 	mov	local08, local07
23068     16 2C 46 F7 | 	zerox	local08, #22
2306c     15 2F 02 F6 | 	mov	local09, local07
23070     01 2E 66 F0 | 	shl	local09, #1
23074     18 2E 46 F0 | 	shr	local09, #24
23078     17 31 02 F6 | 	mov	local10, local09
2307c     1F 2A 46 F0 | 	shr	local07, #31
23080     00 32 06 F6 | 	mov	local11, #0
23084     00 34 06 F6 | 	mov	local12, #0
23088     18 29 12 F2 | 	cmp	local06, local10 wc
2308c     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23090     2C 00 90 1D |  if_a	jmp	#LR__3190
23094     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23098     24 00 90 3D |  if_ae	jmp	#LR__3190
2309c     13 37 02 F6 | 	mov	local13, local05
230a0     16 27 02 F6 | 	mov	local05, local08
230a4     1B 2D 02 F6 | 	mov	local08, local13
230a8     14 37 02 F6 | 	mov	local13, local06
230ac     18 29 02 F6 | 	mov	local06, local10
230b0     1B 31 02 F6 | 	mov	local10, local13
230b4     12 37 02 F6 | 	mov	local13, local04
230b8     15 25 02 F6 | 	mov	local04, local07
230bc     1B 2B 02 F6 | 	mov	local07, local13
230c0                 | LR__3190
230c0     FF 28 0E F2 | 	cmp	local06, #255 wz
230c4     70 01 90 AD |  if_e	jmp	#LR__3205
230c8     00 28 0E F2 | 	cmp	local06, #0 wz
230cc     AC 01 90 AD |  if_e	jmp	#LR__3207
230d0     17 26 26 F4 | 	bith	local05, #23
230d4                 | LR__3191
230d4     00 30 0E F2 | 	cmp	local10, #0 wz
230d8     F0 01 90 AD |  if_e	jmp	#LR__3211
230dc     17 2C 26 F4 | 	bith	local08, #23
230e0                 | LR__3192
230e0     7F 28 86 F1 | 	sub	local06, #127
230e4     7F 30 86 F1 | 	sub	local10, #127
230e8     14 39 02 F6 | 	mov	local14, local06
230ec     18 39 82 F1 | 	sub	local14, local10
230f0     97 14 48 FB | 	callpa	#(@LR__3194-@LR__3193)>>2,fcache_load_ptr_
230f4                 | LR__3193
230f4     20 38 56 F2 | 	cmps	local14, #32 wc
230f8     20 00 90 CD |  if_b	jmp	#LR__3195
230fc     16 2F 02 F6 | 	mov	local09, local08
23100     00 32 0E F2 | 	cmp	local11, #0 wz
23104     6F 32 62 FD | 	wrnz	local11
23108     19 2F 42 F5 | 	or	local09, local11
2310c     17 33 02 F6 | 	mov	local11, local09
23110     00 2C 06 F6 | 	mov	local08, #0
23114     20 38 86 F1 | 	sub	local14, #32
23118     D8 FF 9F FD | 	jmp	#LR__3193
2311c                 | LR__3194
2311c                 | LR__3195
2311c     00 38 0E F2 | 	cmp	local14, #0 wz
23120     38 00 90 AD |  if_e	jmp	#LR__3196
23124     16 37 02 F6 | 	mov	local13, local08
23128     20 30 06 F6 | 	mov	local10, #32
2312c     1C 31 82 F1 | 	sub	local10, local14
23130     18 37 62 F0 | 	shl	local13, local10
23134     19 31 02 F6 | 	mov	local10, local11
23138     20 2E 06 F6 | 	mov	local09, #32
2313c     1C 2F 82 F1 | 	sub	local09, local14
23140     17 31 6A F0 | 	shl	local10, local09 wz
23144     1C 33 42 F0 | 	shr	local11, local14
23148     1C 2D 42 F0 | 	shr	local08, local14
2314c     1B 33 42 F5 | 	or	local11, local13
23150     00 3A 06 F6 | 	mov	local15, #0
23154     01 3A 06 56 |  if_ne	mov	local15, #1
23158     1D 33 42 F5 | 	or	local11, local15
2315c                 | LR__3196
2315c     12 3B 02 F6 | 	mov	local15, local04
23160     15 3B 62 F5 | 	xor	local15, local07
23164     01 3A CE F7 | 	test	local15, #1 wz
23168     18 00 90 AD |  if_e	jmp	#LR__3197
2316c     16 2D 22 F6 | 	not	local08, local08
23170     19 33 22 F6 | 	not	local11, local11
23174     01 32 0E F1 | 	add	local11, #1 wz
23178     00 3A 06 F6 | 	mov	local15, #0
2317c     01 3A 06 A6 |  if_e	mov	local15, #1
23180     1D 2D 02 F1 | 	add	local08, local15
23184                 | LR__3197
23184     19 35 12 F1 | 	add	local12, local11 wc
23188     16 27 22 F1 | 	addx	local05, local08
2318c     00 26 56 F2 | 	cmps	local05, #0 wc
23190     1C 00 90 3D |  if_ae	jmp	#LR__3198
23194     01 24 66 F5 | 	xor	local04, #1
23198     13 27 22 F6 | 	not	local05, local05
2319c     1A 35 22 F6 | 	not	local12, local12
231a0     01 34 0E F1 | 	add	local12, #1 wz
231a4     00 3A 06 F6 | 	mov	local15, #0
231a8     01 3A 06 A6 |  if_e	mov	local15, #1
231ac     1D 27 02 F1 | 	add	local05, local15
231b0                 | LR__3198
231b0     00 80 00 FF 
231b4     00 26 16 F2 | 	cmp	local05, ##16777216 wc
231b8     28 00 90 CD |  if_b	jmp	#LR__3199
231bc     01 28 06 F1 | 	add	local06, #1
231c0     1A 39 02 F6 | 	mov	local14, local12
231c4     01 38 06 F5 | 	and	local14, #1
231c8     01 34 46 F0 | 	shr	local12, #1
231cc     13 3B 02 F6 | 	mov	local15, local05
231d0     1F 3A 66 F0 | 	shl	local15, #31
231d4     1D 35 42 F5 | 	or	local12, local15
231d8     1C 35 42 F5 | 	or	local12, local14
231dc     01 26 46 F0 | 	shr	local05, #1
231e0     3C 00 90 FD | 	jmp	#LR__3204
231e4                 | LR__3199
231e4     00 40 00 FF 
231e8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
231ec     30 00 90 3D |  if_ae	jmp	#LR__3203
231f0     00 26 0E F2 | 	cmp	local05, #0 wz
231f4     00 34 0E A2 |  if_e	cmp	local12, #0 wz
231f8     08 24 46 A5 |  if_e	or	local04, #8
231fc     01 24 26 A5 |  if_e	andn	local04, #1
23200     1C 00 90 AD |  if_e	jmp	#LR__3202
23204                 | LR__3200
23204     00 40 00 FF 
23208     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2320c     10 00 90 3D |  if_ae	jmp	#LR__3201
23210     1A 35 12 F1 | 	add	local12, local12 wc
23214     13 27 22 F1 | 	addx	local05, local05
23218     01 28 86 F1 | 	sub	local06, #1
2321c     E4 FF 9F FD | 	jmp	#LR__3200
23220                 | LR__3201
23220                 | LR__3202
23220                 | LR__3203
23220                 | LR__3204
23220     13 13 02 F6 | 	mov	arg01, local05
23224     1A 15 02 F6 | 	mov	arg02, local12
23228     14 17 02 F6 | 	mov	arg03, local06
2322c     12 19 02 F6 | 	mov	arg04, local04
23230     08 35 B0 FD | 	call	#__system__pack_0608
23234     DC 00 90 FD | 	jmp	#LR__3215
23238                 | LR__3205
23238     FF 30 0E F2 | 	cmp	local10, #255 wz
2323c     10 00 90 5D |  if_ne	jmp	#LR__3206
23240     12 2B 0A F2 | 	cmp	local07, local04 wz
23244     00 F8 3F 5F 
23248     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2324c     C4 00 90 5D |  if_ne	jmp	#LR__3215
23250                 | LR__3206
23250     00 26 0E F2 | 	cmp	local05, #0 wz
23254     00 F8 3F 5F 
23258     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2325c     B4 00 90 5D |  if_ne	jmp	#LR__3215
23260     1A 15 02 F6 | 	mov	arg02, local12
23264     14 17 02 F6 | 	mov	arg03, local06
23268     12 19 02 F6 | 	mov	arg04, local04
2326c     02 18 46 F5 | 	or	arg04, #2
23270     13 13 02 F6 | 	mov	arg01, local05
23274     C4 34 B0 FD | 	call	#__system__pack_0608
23278     98 00 90 FD | 	jmp	#LR__3215
2327c                 | LR__3207
2327c     00 26 0E F2 | 	cmp	local05, #0 wz
23280     28 00 90 AD |  if_e	jmp	#LR__3210
23284     01 26 66 F0 | 	shl	local05, #1
23288     97 0E 48 FB | 	callpa	#(@LR__3209-@LR__3208)>>2,fcache_load_ptr_
2328c                 | LR__3208
2328c     00 40 00 FF 
23290     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23294     14 3B 02 C6 |  if_b	mov	local15, local06
23298     01 3A 86 C1 |  if_b	sub	local15, #1
2329c     1D 29 02 C6 |  if_b	mov	local06, local15
232a0     01 26 66 C0 |  if_b	shl	local05, #1
232a4     E4 FF 9F CD |  if_b	jmp	#LR__3208
232a8                 | LR__3209
232a8     28 FE 9F FD | 	jmp	#LR__3191
232ac                 | LR__3210
232ac     15 25 02 F5 | 	and	local04, local07
232b0     12 19 02 F6 | 	mov	arg04, local04
232b4     08 18 46 F5 | 	or	arg04, #8
232b8     00 12 06 F6 | 	mov	arg01, #0
232bc     00 14 06 F6 | 	mov	arg02, #0
232c0     00 16 06 F6 | 	mov	arg03, #0
232c4     74 34 B0 FD | 	call	#__system__pack_0608
232c8     48 00 90 FD | 	jmp	#LR__3215
232cc                 | LR__3211
232cc     00 2C 0E F2 | 	cmp	local08, #0 wz
232d0     28 00 90 AD |  if_e	jmp	#LR__3214
232d4     01 2C 66 F0 | 	shl	local08, #1
232d8     97 0E 48 FB | 	callpa	#(@LR__3213-@LR__3212)>>2,fcache_load_ptr_
232dc                 | LR__3212
232dc     00 40 00 FF 
232e0     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
232e4     18 3B 02 C6 |  if_b	mov	local15, local10
232e8     01 3A 86 C1 |  if_b	sub	local15, #1
232ec     1D 31 02 C6 |  if_b	mov	local10, local15
232f0     01 2C 66 C0 |  if_b	shl	local08, #1
232f4     E4 FF 9F CD |  if_b	jmp	#LR__3212
232f8                 | LR__3213
232f8     E4 FD 9F FD | 	jmp	#LR__3192
232fc                 | LR__3214
232fc     7F 28 86 F1 | 	sub	local06, #127
23300     13 13 02 F6 | 	mov	arg01, local05
23304     1A 15 02 F6 | 	mov	arg02, local12
23308     14 17 02 F6 | 	mov	arg03, local06
2330c     12 19 02 F6 | 	mov	arg04, local04
23310     28 34 B0 FD | 	call	#__system__pack_0608
23314                 | LR__3215
23314     A7 F0 03 F6 | 	mov	ptra, fp
23318     B2 00 A0 FD | 	call	#popregs_
2331c                 | __system___float_add_ret
2331c     2D 00 64 FD | 	ret
23320                 | 
23320                 | __system___float_sqrt
23320     04 4A 05 F6 | 	mov	COUNT_, #4
23324     A8 00 A0 FD | 	call	#pushregs_
23328     09 1F 02 F6 | 	mov	local01, arg01
2332c     09 FB 01 F6 | 	mov	result1, arg01
23330     FD 20 02 F6 | 	mov	local02, result1
23334     10 23 02 F6 | 	mov	local03, local02
23338     16 22 46 F7 | 	zerox	local03, #22
2333c     10 25 02 F6 | 	mov	local04, local02
23340     01 24 66 F0 | 	shl	local04, #1
23344     18 24 4E F0 | 	shr	local04, #24 wz
23348     1F 20 46 F0 | 	shr	local02, #31
2334c     70 00 90 AD |  if_e	jmp	#LR__3221
23350     17 22 26 F4 | 	bith	local03, #23
23354                 | LR__3220
23354     00 20 0E F2 | 	cmp	local02, #0 wz
23358     00 F8 3F 5F 
2335c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23360     88 00 90 5D |  if_ne	jmp	#LR__3224
23364     FF 24 0E F2 | 	cmp	local04, #255 wz
23368     0F FB 01 A6 |  if_e	mov	result1, local01
2336c     7C 00 90 AD |  if_e	jmp	#LR__3224
23370     7F 24 86 F1 | 	sub	local04, #127
23374     01 24 CE F7 | 	test	local04, #1 wz
23378     01 22 66 50 |  if_ne	shl	local03, #1
2337c     05 22 66 F0 | 	shl	local03, #5
23380     11 01 38 FD | 	qsqrt	#0, local03
23384     01 24 86 51 |  if_ne	sub	local04, #1
23388     12 25 52 F6 | 	abs	local04, local04 wc
2338c     01 24 46 F0 | 	shr	local04, #1
23390     12 17 82 F6 | 	negc	arg03, local04
23394     10 19 02 F6 | 	mov	arg04, local02
23398     18 12 62 FD | 	getqx	arg01
2339c     09 15 02 F6 | 	mov	arg02, arg01
233a0     19 14 66 F0 | 	shl	arg02, #25
233a4     07 12 46 F0 | 	shr	arg01, #7
233a8     00 80 00 FF 
233ac     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
233b0     01 16 06 31 |  if_ae	add	arg03, #1
233b4     01 12 46 30 |  if_ae	shr	arg01, #1
233b8     80 33 B0 FD | 	call	#__system__pack_0608
233bc     2C 00 90 FD | 	jmp	#LR__3224
233c0                 | LR__3221
233c0     00 22 0E F2 | 	cmp	local03, #0 wz
233c4     0F FB 01 A6 |  if_e	mov	result1, local01
233c8     20 00 90 AD |  if_e	jmp	#LR__3224
233cc     01 22 66 F0 | 	shl	local03, #1
233d0     97 0A 48 FB | 	callpa	#(@LR__3223-@LR__3222)>>2,fcache_load_ptr_
233d4                 | LR__3222
233d4     00 40 00 FF 
233d8     00 22 16 F2 | 	cmp	local03, ##8388608 wc
233dc     01 24 86 C1 |  if_b	sub	local04, #1
233e0     01 22 66 C0 |  if_b	shl	local03, #1
233e4     EC FF 9F CD |  if_b	jmp	#LR__3222
233e8                 | LR__3223
233e8     68 FF 9F FD | 	jmp	#LR__3220
233ec                 | LR__3224
233ec     A7 F0 03 F6 | 	mov	ptra, fp
233f0     B2 00 A0 FD | 	call	#popregs_
233f4                 | __system___float_sqrt_ret
233f4     2D 00 64 FD | 	ret
233f8                 | 
233f8                 | __system___float_mul
233f8     0B 4A 05 F6 | 	mov	COUNT_, #11
233fc     A8 00 A0 FD | 	call	#pushregs_
23400     09 1F 02 F6 | 	mov	local01, arg01
23404     0A 21 02 F6 | 	mov	local02, arg02
23408     0F 23 02 F6 | 	mov	local03, local01
2340c     11 25 02 F6 | 	mov	local04, local03
23410     16 24 46 F7 | 	zerox	local04, #22
23414     11 27 02 F6 | 	mov	local05, local03
23418     01 26 66 F0 | 	shl	local05, #1
2341c     18 26 46 F0 | 	shr	local05, #24
23420     1F 22 46 F0 | 	shr	local03, #31
23424     10 FB 01 F6 | 	mov	result1, local02
23428     FD 28 02 F6 | 	mov	local06, result1
2342c     14 2B 02 F6 | 	mov	local07, local06
23430     16 2A 46 F7 | 	zerox	local07, #22
23434     14 2D 02 F6 | 	mov	local08, local06
23438     01 2C 66 F0 | 	shl	local08, #1
2343c     18 2C 46 F0 | 	shr	local08, #24
23440     1F 28 46 F0 | 	shr	local06, #31
23444     14 23 62 F5 | 	xor	local03, local06
23448     FF 26 0E F2 | 	cmp	local05, #255 wz
2344c     90 00 90 AD |  if_e	jmp	#LR__3233
23450     FF 2C 0E F2 | 	cmp	local08, #255 wz
23454     D8 00 90 AD |  if_e	jmp	#LR__3235
23458     00 26 0E F2 | 	cmp	local05, #0 wz
2345c     0C 01 90 AD |  if_e	jmp	#LR__3236
23460     17 24 26 F4 | 	bith	local04, #23
23464                 | LR__3230
23464     00 2C 0E F2 | 	cmp	local08, #0 wz
23468     44 01 90 AD |  if_e	jmp	#LR__3240
2346c     17 2A 26 F4 | 	bith	local07, #23
23470                 | LR__3231
23470     12 21 02 F6 | 	mov	local02, local04
23474     04 20 66 F0 | 	shl	local02, #4
23478     15 29 02 F6 | 	mov	local06, local07
2347c     05 28 66 F0 | 	shl	local06, #5
23480     14 21 02 FD | 	qmul	local02, local06
23484     16 27 02 F1 | 	add	local05, local08
23488     FE 26 86 F1 | 	sub	local05, #254
2348c     13 2F 02 F6 | 	mov	local09, local05
23490     04 24 66 F0 | 	shl	local04, #4
23494     05 2A 66 F0 | 	shl	local07, #5
23498     18 30 62 FD | 	getqx	local10
2349c     15 25 02 FD | 	qmul	local04, local07
234a0     19 32 62 FD | 	getqy	local11
234a4     00 80 00 FF 
234a8     00 32 16 F2 | 	cmp	local11, ##16777216 wc
234ac     18 00 90 CD |  if_b	jmp	#LR__3232
234b0     01 2E 06 F1 | 	add	local09, #1
234b4     01 30 46 F0 | 	shr	local10, #1
234b8     19 2D 02 F6 | 	mov	local08, local11
234bc     1F 2C 66 F0 | 	shl	local08, #31
234c0     16 31 42 F5 | 	or	local10, local08
234c4     01 32 46 F0 | 	shr	local11, #1
234c8                 | LR__3232
234c8     19 13 02 F6 | 	mov	arg01, local11
234cc     18 15 02 F6 | 	mov	arg02, local10
234d0     17 17 02 F6 | 	mov	arg03, local09
234d4     11 19 02 F6 | 	mov	arg04, local03
234d8     60 32 B0 FD | 	call	#__system__pack_0608
234dc     10 01 90 FD | 	jmp	#LR__3244
234e0                 | LR__3233
234e0     00 24 0E F2 | 	cmp	local04, #0 wz
234e4     0F FB 01 56 |  if_ne	mov	result1, local01
234e8     04 01 90 5D |  if_ne	jmp	#LR__3244
234ec     FF 2C 56 F2 | 	cmps	local08, #255 wc
234f0     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
234f4     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
234f8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3234
234fc     00 F8 3F CF 
23500     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
23504     E8 00 90 CD |  if_b	jmp	#LR__3244
23508     00 2A 0E F2 | 	cmp	local07, #0 wz
2350c     10 FB 01 56 |  if_ne	mov	result1, local02
23510     DC 00 90 5D |  if_ne	jmp	#LR__3244
23514                 | LR__3234
23514     02 22 46 F5 | 	or	local03, #2
23518     00 12 06 F6 | 	mov	arg01, #0
2351c     00 14 06 F6 | 	mov	arg02, #0
23520     13 17 02 F6 | 	mov	arg03, local05
23524     11 19 02 F6 | 	mov	arg04, local03
23528     10 32 B0 FD | 	call	#__system__pack_0608
2352c     C0 00 90 FD | 	jmp	#LR__3244
23530                 | LR__3235
23530     00 26 0E F2 | 	cmp	local05, #0 wz
23534     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23538     00 F8 3F AF 
2353c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23540     AC 00 90 AD |  if_e	jmp	#LR__3244
23544     00 2A 0E F2 | 	cmp	local07, #0 wz
23548     10 FB 01 56 |  if_ne	mov	result1, local02
2354c     A0 00 90 5D |  if_ne	jmp	#LR__3244
23550     16 17 02 F6 | 	mov	arg03, local08
23554     11 19 02 F6 | 	mov	arg04, local03
23558     02 18 46 F5 | 	or	arg04, #2
2355c     00 12 06 F6 | 	mov	arg01, #0
23560     00 14 06 F6 | 	mov	arg02, #0
23564     D4 31 B0 FD | 	call	#__system__pack_0608
23568     84 00 90 FD | 	jmp	#LR__3244
2356c                 | LR__3236
2356c     00 24 0E F2 | 	cmp	local04, #0 wz
23570     20 00 90 AD |  if_e	jmp	#LR__3239
23574     01 24 66 F0 | 	shl	local04, #1
23578     97 0A 48 FB | 	callpa	#(@LR__3238-@LR__3237)>>2,fcache_load_ptr_
2357c                 | LR__3237
2357c     00 40 00 FF 
23580     00 24 16 F2 | 	cmp	local04, ##8388608 wc
23584     01 26 86 C1 |  if_b	sub	local05, #1
23588     01 24 66 C0 |  if_b	shl	local04, #1
2358c     EC FF 9F CD |  if_b	jmp	#LR__3237
23590                 | LR__3238
23590     D0 FE 9F FD | 	jmp	#LR__3230
23594                 | LR__3239
23594     08 22 46 F5 | 	or	local03, #8
23598     00 12 06 F6 | 	mov	arg01, #0
2359c     00 14 06 F6 | 	mov	arg02, #0
235a0     00 16 06 F6 | 	mov	arg03, #0
235a4     11 19 02 F6 | 	mov	arg04, local03
235a8     90 31 B0 FD | 	call	#__system__pack_0608
235ac     40 00 90 FD | 	jmp	#LR__3244
235b0                 | LR__3240
235b0     00 2A 0E F2 | 	cmp	local07, #0 wz
235b4     20 00 90 AD |  if_e	jmp	#LR__3243
235b8     01 2A 66 F0 | 	shl	local07, #1
235bc     97 0A 48 FB | 	callpa	#(@LR__3242-@LR__3241)>>2,fcache_load_ptr_
235c0                 | LR__3241
235c0     00 40 00 FF 
235c4     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
235c8     01 2C 86 C1 |  if_b	sub	local08, #1
235cc     01 2A 66 C0 |  if_b	shl	local07, #1
235d0     EC FF 9F CD |  if_b	jmp	#LR__3241
235d4                 | LR__3242
235d4     98 FE 9F FD | 	jmp	#LR__3231
235d8                 | LR__3243
235d8     08 22 46 F5 | 	or	local03, #8
235dc     00 12 06 F6 | 	mov	arg01, #0
235e0     00 14 06 F6 | 	mov	arg02, #0
235e4     00 16 06 F6 | 	mov	arg03, #0
235e8     11 19 02 F6 | 	mov	arg04, local03
235ec     4C 31 B0 FD | 	call	#__system__pack_0608
235f0                 | LR__3244
235f0     A7 F0 03 F6 | 	mov	ptra, fp
235f4     B2 00 A0 FD | 	call	#popregs_
235f8                 | __system___float_mul_ret
235f8     2D 00 64 FD | 	ret
235fc                 | 
235fc                 | __system___float_div
235fc     0E 4A 05 F6 | 	mov	COUNT_, #14
23600     A8 00 A0 FD | 	call	#pushregs_
23604     09 23 02 F6 | 	mov	local03, arg01
23608     0A 25 02 F6 | 	mov	local04, arg02
2360c     11 27 02 F6 | 	mov	local05, local03
23610     13 29 02 F6 | 	mov	local06, local05
23614     16 28 46 F7 | 	zerox	local06, #22
23618     13 2B 02 F6 | 	mov	local07, local05
2361c     01 2A 66 F0 | 	shl	local07, #1
23620     18 2A 46 F0 | 	shr	local07, #24
23624     1F 26 46 F0 | 	shr	local05, #31
23628     12 FB 01 F6 | 	mov	result1, local04
2362c     FD 2C 02 F6 | 	mov	local08, result1
23630     16 2F 02 F6 | 	mov	local09, local08
23634     16 2E 46 F7 | 	zerox	local09, #22
23638     16 31 02 F6 | 	mov	local10, local08
2363c     01 30 66 F0 | 	shl	local10, #1
23640     18 30 46 F0 | 	shr	local10, #24
23644     1F 2C 46 F0 | 	shr	local08, #31
23648     16 27 62 F5 | 	xor	local05, local08
2364c     FF 2A 0E F2 | 	cmp	local07, #255 wz
23650     D4 00 90 AD |  if_e	jmp	#LR__3255
23654     FF 30 0E F2 | 	cmp	local10, #255 wz
23658     04 01 90 AD |  if_e	jmp	#LR__3256
2365c     00 2A 0E F2 | 	cmp	local07, #0 wz
23660     24 01 90 AD |  if_e	jmp	#LR__3257
23664     17 28 26 F4 | 	bith	local06, #23
23668                 | LR__3250
23668     00 30 0E F2 | 	cmp	local10, #0 wz
2366c     70 01 90 AD |  if_e	jmp	#LR__3261
23670     17 2E 26 F4 | 	bith	local09, #23
23674                 | LR__3251
23674     18 2B 82 F1 | 	sub	local07, local10
23678     15 33 02 F6 | 	mov	local11, local07
2367c     14 13 02 F6 | 	mov	arg01, local06
23680     02 12 46 F0 | 	shr	arg01, #2
23684     1E 28 66 F0 | 	shl	local06, #30
23688     14 15 02 F6 | 	mov	arg02, local06
2368c     17 17 02 F6 | 	mov	arg03, local09
23690     28 12 62 FD | 	setq	arg01
23694     0B 15 12 FD | 	qdiv	arg02, arg03
23698     00 34 06 F6 | 	mov	local12, #0
2369c     18 1E 62 FD | 	getqx	local01
236a0     19 FC 61 FD | 	getqy	result2
236a4     FE 20 02 F6 | 	mov	local02, result2
236a8     0F 37 02 F6 | 	mov	local13, local01
236ac     00 20 4E F2 | 	cmps	local02, #0 wz
236b0     1B 39 02 F6 | 	mov	local14, local13
236b4     19 38 66 F0 | 	shl	local14, #25
236b8     01 34 06 56 |  if_ne	mov	local12, #1
236bc     1A 39 42 F5 | 	or	local14, local12
236c0     07 36 46 F0 | 	shr	local13, #7
236c4     00 80 00 FF 
236c8     00 36 16 F2 | 	cmp	local13, ##16777216 wc
236cc     1C 00 90 CD |  if_b	jmp	#LR__3252
236d0     01 32 06 F1 | 	add	local11, #1
236d4     01 38 46 F0 | 	shr	local14, #1
236d8     1B 35 02 F6 | 	mov	local12, local13
236dc     1F 34 66 F0 | 	shl	local12, #31
236e0     1A 39 42 F5 | 	or	local14, local12
236e4     01 36 46 F0 | 	shr	local13, #1
236e8     24 00 90 FD | 	jmp	#LR__3254
236ec                 | LR__3252
236ec     00 40 00 FF 
236f0     00 36 16 F2 | 	cmp	local13, ##8388608 wc
236f4     18 00 90 3D |  if_ae	jmp	#LR__3253
236f8     01 32 86 F1 | 	sub	local11, #1
236fc     01 36 66 F0 | 	shl	local13, #1
23700     1C 35 02 F6 | 	mov	local12, local14
23704     1F 34 46 F0 | 	shr	local12, #31
23708     1A 37 42 F5 | 	or	local13, local12
2370c     01 38 66 F0 | 	shl	local14, #1
23710                 | LR__3253
23710                 | LR__3254
23710     1B 13 02 F6 | 	mov	arg01, local13
23714     1C 15 02 F6 | 	mov	arg02, local14
23718     19 17 02 F6 | 	mov	arg03, local11
2371c     13 19 02 F6 | 	mov	arg04, local05
23720     18 30 B0 FD | 	call	#__system__pack_0608
23724     F8 00 90 FD | 	jmp	#LR__3265
23728                 | LR__3255
23728     00 28 0E F2 | 	cmp	local06, #0 wz
2372c     11 FB 01 56 |  if_ne	mov	result1, local03
23730     EC 00 90 5D |  if_ne	jmp	#LR__3265
23734     FF 30 0E F2 | 	cmp	local10, #255 wz
23738     00 F8 3F AF 
2373c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23740     DC 00 90 AD |  if_e	jmp	#LR__3265
23744     02 26 46 F5 | 	or	local05, #2
23748     00 12 06 F6 | 	mov	arg01, #0
2374c     00 14 06 F6 | 	mov	arg02, #0
23750     15 17 02 F6 | 	mov	arg03, local07
23754     13 19 02 F6 | 	mov	arg04, local05
23758     E0 2F B0 FD | 	call	#__system__pack_0608
2375c     C0 00 90 FD | 	jmp	#LR__3265
23760                 | LR__3256
23760     00 2E 0E F2 | 	cmp	local09, #0 wz
23764     12 FB 01 56 |  if_ne	mov	result1, local04
23768     B4 00 90 5D |  if_ne	jmp	#LR__3265
2376c     13 19 02 F6 | 	mov	arg04, local05
23770     08 18 46 F5 | 	or	arg04, #8
23774     00 12 06 F6 | 	mov	arg01, #0
23778     00 14 06 F6 | 	mov	arg02, #0
2377c     00 16 06 F6 | 	mov	arg03, #0
23780     B8 2F B0 FD | 	call	#__system__pack_0608
23784     98 00 90 FD | 	jmp	#LR__3265
23788                 | LR__3257
23788     00 28 0E F2 | 	cmp	local06, #0 wz
2378c     20 00 90 AD |  if_e	jmp	#LR__3260
23790     01 28 66 F0 | 	shl	local06, #1
23794     97 0A 48 FB | 	callpa	#(@LR__3259-@LR__3258)>>2,fcache_load_ptr_
23798                 | LR__3258
23798     00 40 00 FF 
2379c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
237a0     01 2A 86 C1 |  if_b	sub	local07, #1
237a4     01 28 66 C0 |  if_b	shl	local06, #1
237a8     EC FF 9F CD |  if_b	jmp	#LR__3258
237ac                 | LR__3259
237ac     B8 FE 9F FD | 	jmp	#LR__3250
237b0                 | LR__3260
237b0     00 30 0E F2 | 	cmp	local10, #0 wz
237b4     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
237b8     00 F8 3F AF 
237bc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
237c0     5C 00 90 AD |  if_e	jmp	#LR__3265
237c4     13 19 02 F6 | 	mov	arg04, local05
237c8     08 18 46 F5 | 	or	arg04, #8
237cc     00 12 06 F6 | 	mov	arg01, #0
237d0     00 14 06 F6 | 	mov	arg02, #0
237d4     00 16 06 F6 | 	mov	arg03, #0
237d8     60 2F B0 FD | 	call	#__system__pack_0608
237dc     40 00 90 FD | 	jmp	#LR__3265
237e0                 | LR__3261
237e0     00 2E 0E F2 | 	cmp	local09, #0 wz
237e4     20 00 90 AD |  if_e	jmp	#LR__3264
237e8     01 2E 66 F0 | 	shl	local09, #1
237ec     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
237f0                 | LR__3262
237f0     00 40 00 FF 
237f4     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
237f8     01 30 86 C1 |  if_b	sub	local10, #1
237fc     01 2E 66 C0 |  if_b	shl	local09, #1
23800     EC FF 9F CD |  if_b	jmp	#LR__3262
23804                 | LR__3263
23804     6C FE 9F FD | 	jmp	#LR__3251
23808                 | LR__3264
23808     02 26 46 F5 | 	or	local05, #2
2380c     00 12 06 F6 | 	mov	arg01, #0
23810     00 14 06 F6 | 	mov	arg02, #0
23814     00 16 06 F6 | 	mov	arg03, #0
23818     13 19 02 F6 | 	mov	arg04, local05
2381c     1C 2F B0 FD | 	call	#__system__pack_0608
23820                 | LR__3265
23820     A7 F0 03 F6 | 	mov	ptra, fp
23824     B2 00 A0 FD | 	call	#popregs_
23828                 | __system___float_div_ret
23828     2D 00 64 FD | 	ret
2382c                 | 
2382c                 | __system___float_cmp
2382c     00 C0 3F FF 
23830     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23834     00 C0 3F CF 
23838     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2383c     0B FB 01 36 |  if_ae	mov	result1, arg03
23840     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23844     00 C0 7F FF 
23848     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2384c     00 C0 7F CF 
23850     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23854     0B FB 01 36 |  if_ae	mov	result1, arg03
23858     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2385c     00 12 56 F2 | 	cmps	arg01, #0 wc
23860     2C 00 90 3D |  if_ae	jmp	#LR__3270
23864     00 14 56 F2 | 	cmps	arg02, #0 wc
23868     0A FB 01 C6 |  if_b	mov	result1, arg02
2386c     09 FB 81 C1 |  if_b	sub	result1, arg01
23870     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23874     00 14 0E F2 | 	cmp	arg02, #0 wz
23878     00 00 40 AF 
2387c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23880     00 FA 05 A6 |  if_e	mov	result1, #0
23884     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23888     01 FA 65 F6 | 	neg	result1, #1
2388c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23890                 | LR__3270
23890     00 14 56 F2 | 	cmps	arg02, #0 wc
23894     1C 00 90 3D |  if_ae	jmp	#LR__3271
23898     00 12 0E F2 | 	cmp	arg01, #0 wz
2389c     00 00 40 AF 
238a0     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
238a4     00 FA 05 A6 |  if_e	mov	result1, #0
238a8     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
238ac     01 FA 05 F6 | 	mov	result1, #1
238b0     08 00 90 FD | 	jmp	#__system___float_cmp_ret
238b4                 | LR__3271
238b4     0A 13 82 F1 | 	sub	arg01, arg02
238b8     09 FB 01 F6 | 	mov	result1, arg01
238bc                 | __system___float_cmp_ret
238bc     2D 00 64 FD | 	ret
238c0                 | 
238c0                 | __system___float_tointeger
238c0     02 4A 05 F6 | 	mov	COUNT_, #2
238c4     A8 00 A0 FD | 	call	#pushregs_
238c8     50 00 B0 FD | 	call	#__system___float_Unpack
238cc     FF FF 7F FF 
238d0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
238d4     34 00 90 CD |  if_b	jmp	#LR__3280
238d8     1F FC 55 F2 | 	cmps	result2, #31 wc
238dc     2C 00 90 3D |  if_ae	jmp	#LR__3280
238e0     02 FE 65 F0 | 	shl	result3, #2
238e4     1E 1E 06 F6 | 	mov	local01, #30
238e8     FE 1E 82 F1 | 	sub	local01, result2
238ec     0F FF 41 F0 | 	shr	result3, local01
238f0     FF 20 02 F6 | 	mov	local02, result3
238f4     0A 21 02 F1 | 	add	local02, arg02
238f8     01 20 46 F0 | 	shr	local02, #1
238fc     00 FA 0D F2 | 	cmp	result1, #0 wz
23900     10 21 62 56 |  if_ne	neg	local02, local02
23904     10 FB 01 F6 | 	mov	result1, local02
23908     04 00 90 FD | 	jmp	#LR__3281
2390c                 | LR__3280
2390c     00 FA 05 F6 | 	mov	result1, #0
23910                 | LR__3281
23910     A7 F0 03 F6 | 	mov	ptra, fp
23914     B2 00 A0 FD | 	call	#popregs_
23918                 | __system___float_tointeger_ret
23918     2D 00 64 FD | 	ret
2391c                 | 
2391c                 | __system___float_Unpack
2391c     09 01 02 F6 | 	mov	_var01, arg01
23920     1F 00 46 F0 | 	shr	_var01, #31
23924     09 03 02 F6 | 	mov	_var02, arg01
23928     01 02 66 F0 | 	shl	_var02, #1
2392c     18 02 4E F0 | 	shr	_var02, #24 wz
23930     17 13 06 F4 | 	bitl	arg01, #279
23934     06 12 66 50 |  if_ne	shl	arg01, #6
23938     1D 12 26 54 |  if_ne	bith	arg01, #29
2393c     1C 00 90 5D |  if_ne	jmp	#LR__3290
23940     09 05 92 F7 | 	encod	_var03, arg01 wc
23944     01 04 06 C1 |  if_b	add	_var03, #1
23948     17 04 86 F1 | 	sub	_var03, #23
2394c     02 03 02 F6 | 	mov	_var02, _var03
23950     07 FC 05 F6 | 	mov	result2, #7
23954     02 FD 81 F1 | 	sub	result2, _var03
23958     FE 12 62 F0 | 	shl	arg01, result2
2395c                 | LR__3290
2395c     7F 02 86 F1 | 	sub	_var02, #127
23960     09 FF 01 F6 | 	mov	result3, arg01
23964     00 FB 01 F6 | 	mov	result1, _var01
23968     01 FD 01 F6 | 	mov	result2, _var02
2396c                 | __system___float_Unpack_ret
2396c     2D 00 64 FD | 	ret
23970                 | 
23970                 | __system___float_Pack
23970     00 00 06 F6 | 	mov	_var01, #0
23974     00 16 0E F2 | 	cmp	arg03, #0 wz
23978     8C 00 90 AD |  if_e	jmp	#LR__3301
2397c     0B 03 92 F7 | 	encod	_var02, arg03 wc
23980     01 02 06 C1 |  if_b	add	_var02, #1
23984     21 00 06 F6 | 	mov	_var01, #33
23988     01 01 82 F1 | 	sub	_var01, _var02
2398c     00 17 62 F0 | 	shl	arg03, _var01
23990     03 02 06 F6 | 	mov	_var02, #3
23994     00 03 82 F1 | 	sub	_var02, _var01
23998     01 15 02 F1 | 	add	arg02, _var02
2399c     0A 05 02 F6 | 	mov	_var03, arg02
239a0     00 17 06 F1 | 	add	arg03, #256
239a4     0B 03 02 F6 | 	mov	_var02, arg03
239a8     FF 02 2E F5 | 	andn	_var02, #255 wz
239ac     01 04 06 A1 |  if_e	add	_var03, #1
239b0     7F 04 06 F1 | 	add	_var03, #127
239b4     FF FF 7F FF 
239b8     E9 05 46 F3 | 	fges	_var03, ##-23
239bc     FF 04 66 F3 | 	fles	_var03, #255
239c0     01 04 56 F2 | 	cmps	_var03, #1 wc
239c4     1C 00 90 3D |  if_ae	jmp	#LR__3300
239c8     01 16 46 F0 | 	shr	arg03, #1
239cc     1F 02 C6 F9 | 	decod	_var02, #31
239d0     0B 03 02 F1 | 	add	_var02, arg03
239d4     02 05 62 F6 | 	neg	_var03, _var03
239d8     02 03 42 F0 | 	shr	_var02, _var03
239dc     01 17 02 F6 | 	mov	arg03, _var02
239e0     00 04 06 F6 | 	mov	_var03, #0
239e4                 | LR__3300
239e4     09 FB 01 F6 | 	mov	result1, arg01
239e8     1F FA 65 F0 | 	shl	result1, #31
239ec     02 03 02 F6 | 	mov	_var02, _var03
239f0     17 02 66 F0 | 	shl	_var02, #23
239f4     01 FB 41 F5 | 	or	result1, _var02
239f8     0B 07 02 F6 | 	mov	_var04, arg03
239fc     09 06 46 F0 | 	shr	_var04, #9
23a00     03 FB 41 F5 | 	or	result1, _var04
23a04     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23a08                 | LR__3301
23a08     00 FB 01 F6 | 	mov	result1, _var01
23a0c                 | __system___float_Pack_ret
23a0c     2D 00 64 FD | 	ret
23a10                 | 
23a10                 | __system___basic_print_float
23a10     05 4A 05 F6 | 	mov	COUNT_, #5
23a14     A8 00 A0 FD | 	call	#pushregs_
23a18     09 1F 02 F6 | 	mov	local01, arg01
23a1c     0A 21 02 F6 | 	mov	local02, arg02
23a20     0B 23 0A F6 | 	mov	local03, arg03 wz
23a24     0C 25 02 F6 | 	mov	local04, arg04
23a28     14 00 90 5D |  if_ne	jmp	#LR__3310
23a2c     23 24 0E F2 | 	cmp	local04, #35 wz
23a30     80 02 10 AF 
23a34     00 26 06 A6 |  if_e	mov	local05, ##537198592
23a38     1D 26 C6 59 |  if_ne	decod	local05, #29
23a3c     13 23 02 F6 | 	mov	local03, local05
23a40                 | LR__3310
23a40     0F 13 02 F6 | 	mov	arg01, local01
23a44     D8 27 B0 FD | 	call	#__system___gettxfunc
23a48     FD 26 0A F6 | 	mov	local05, result1 wz
23a4c     00 FA 05 A6 |  if_e	mov	result1, #0
23a50     13 13 02 56 |  if_ne	mov	arg01, local05
23a54     11 15 02 56 |  if_ne	mov	arg02, local03
23a58     10 17 02 56 |  if_ne	mov	arg03, local02
23a5c     12 19 02 56 |  if_ne	mov	arg04, local04
23a60     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23a64     A7 F0 03 F6 | 	mov	ptra, fp
23a68     B2 00 A0 FD | 	call	#popregs_
23a6c                 | __system___basic_print_float_ret
23a6c     2D 00 64 FD | 	ret
23a70                 | 
23a70                 | __system____builtin_atoi
23a70     07 4A 05 F6 | 	mov	COUNT_, #7
23a74     A8 00 A0 FD | 	call	#pushregs_
23a78                 | __system____builtin_atoi_enter
23a78     09 1F 02 F6 | 	mov	local01, arg01
23a7c     0A 21 02 F6 | 	mov	local02, arg02
23a80     00 22 06 F6 | 	mov	local03, #0
23a84     00 24 06 F6 | 	mov	local04, #0
23a88     00 26 06 F6 | 	mov	local05, #0
23a8c     97 1C 48 FB | 	callpa	#(@LR__3322-@LR__3320)>>2,fcache_load_ptr_
23a90                 | LR__3320
23a90     0F 29 C2 FA | 	rdbyte	local06, local01
23a94     20 28 0E F2 | 	cmp	local06, #32 wz
23a98     01 1E 06 A1 |  if_e	add	local01, #1
23a9c     F0 FF 9F AD |  if_e	jmp	#LR__3320
23aa0     0F 2B C2 FA | 	rdbyte	local07, local01
23aa4                 | LR__3321
23aa4     2D 2A 0E F2 | 	cmp	local07, #45 wz
23aa8     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23aac     18 00 90 5D |  if_ne	jmp	#LR__3323
23ab0     01 1E 06 F1 | 	add	local01, #1
23ab4     2D 2A 0E F2 | 	cmp	local07, #45 wz
23ab8     01 28 06 A6 |  if_e	mov	local06, #1
23abc     14 27 C2 A2 |  if_e	subr	local05, local06
23ac0     0F 2B C2 FA | 	rdbyte	local07, local01
23ac4     DC FF 9F FD | 	jmp	#LR__3321
23ac8                 | LR__3322
23ac8                 | LR__3323
23ac8     00 20 0E F2 | 	cmp	local02, #0 wz
23acc     1C 00 90 5D |  if_ne	jmp	#LR__3325
23ad0     24 2A 0E F2 | 	cmp	local07, #36 wz
23ad4     10 20 06 A6 |  if_e	mov	local02, #16
23ad8     01 1E 06 A1 |  if_e	add	local01, #1
23adc     0C 00 90 AD |  if_e	jmp	#LR__3324
23ae0     25 2A 0E F2 | 	cmp	local07, #37 wz
23ae4     02 20 06 A6 |  if_e	mov	local02, #2
23ae8     01 1E 06 A1 |  if_e	add	local01, #1
23aec                 | LR__3324
23aec                 | LR__3325
23aec     97 48 48 FB | 	callpa	#(@LR__3333-@LR__3326)>>2,fcache_load_ptr_
23af0                 | LR__3326
23af0                 | LR__3327
23af0     0F 2B C2 FA | 	rdbyte	local07, local01
23af4     5F 2A 0E F2 | 	cmp	local07, #95 wz
23af8     01 1E 06 F1 | 	add	local01, #1
23afc     F0 FF 9F AD |  if_e	jmp	#LR__3327
23b00     30 2A 0E F2 | 	cmp	local07, #48 wz
23b04     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23b08     00 24 06 A6 |  if_e	mov	local04, #0
23b0c     60 00 90 AD |  if_e	jmp	#LR__3332
23b10     31 2A 56 F2 | 	cmps	local07, #49 wc
23b14     18 00 90 CD |  if_b	jmp	#LR__3328
23b18     3A 2A 56 F2 | 	cmps	local07, #58 wc
23b1c     15 25 02 C6 |  if_b	mov	local04, local07
23b20     30 24 86 C1 |  if_b	sub	local04, #48
23b24     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23b28     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23b2c     40 00 90 CD |  if_b	jmp	#LR__3331
23b30                 | LR__3328
23b30     0B 20 56 F2 | 	cmps	local02, #11 wc
23b34     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23b38     14 00 90 CD |  if_b	jmp	#LR__3329
23b3c     67 2A 56 F2 | 	cmps	local07, #103 wc
23b40     61 2A 86 C1 |  if_b	sub	local07, #97
23b44     0A 24 06 C6 |  if_b	mov	local04, #10
23b48     15 25 02 C1 |  if_b	add	local04, local07
23b4c     20 00 90 CD |  if_b	jmp	#LR__3330
23b50                 | LR__3329
23b50     0B 20 56 F2 | 	cmps	local02, #11 wc
23b54     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23b58     24 00 90 CD |  if_b	jmp	#LR__3334
23b5c     47 2A 56 F2 | 	cmps	local07, #71 wc
23b60     41 2A 86 C1 |  if_b	sub	local07, #65
23b64     0A 24 06 C6 |  if_b	mov	local04, #10
23b68     15 25 02 C1 |  if_b	add	local04, local07
23b6c     10 00 90 3D |  if_ae	jmp	#LR__3334
23b70                 | LR__3330
23b70                 | LR__3331
23b70                 | LR__3332
23b70     11 21 02 FD | 	qmul	local02, local03
23b74     18 22 62 FD | 	getqx	local03
23b78     12 23 02 F1 | 	add	local03, local04
23b7c     70 FF 9F FD | 	jmp	#LR__3326
23b80                 | LR__3333
23b80                 | LR__3334
23b80     00 20 0E F2 | 	cmp	local02, #0 wz
23b84     64 00 90 5D |  if_ne	jmp	#LR__3340
23b88     78 2A 0E F2 | 	cmp	local07, #120 wz
23b8c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23b90     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23b94     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23b98     14 00 90 5D |  if_ne	jmp	#LR__3335
23b9c     0F 13 02 F6 | 	mov	arg01, local01
23ba0     10 14 06 F6 | 	mov	arg02, #16
23ba4     C8 FE BF FD | 	call	#__system____builtin_atoi
23ba8     FD 22 02 F6 | 	mov	local03, result1
23bac     3C 00 90 FD | 	jmp	#LR__3339
23bb0                 | LR__3335
23bb0     62 2A 0E F2 | 	cmp	local07, #98 wz
23bb4     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23bb8     14 00 90 5D |  if_ne	jmp	#LR__3336
23bbc     0F 13 02 F6 | 	mov	arg01, local01
23bc0     02 14 06 F6 | 	mov	arg02, #2
23bc4     A8 FE BF FD | 	call	#__system____builtin_atoi
23bc8     FD 22 02 F6 | 	mov	local03, result1
23bcc     1C 00 90 FD | 	jmp	#LR__3338
23bd0                 | LR__3336
23bd0     6F 2A 0E F2 | 	cmp	local07, #111 wz
23bd4     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23bd8     10 00 90 5D |  if_ne	jmp	#LR__3337
23bdc     0F 13 02 F6 | 	mov	arg01, local01
23be0     08 14 06 F6 | 	mov	arg02, #8
23be4     88 FE BF FD | 	call	#__system____builtin_atoi
23be8     FD 22 02 F6 | 	mov	local03, result1
23bec                 | LR__3337
23bec                 | LR__3338
23bec                 | LR__3339
23bec                 | LR__3340
23bec     00 26 0E F2 | 	cmp	local05, #0 wz
23bf0     11 23 62 56 |  if_ne	neg	local03, local03
23bf4     11 FB 01 F6 | 	mov	result1, local03
23bf8     A7 F0 03 F6 | 	mov	ptra, fp
23bfc     B2 00 A0 FD | 	call	#popregs_
23c00                 | __system____builtin_atoi_ret
23c00     2D 00 64 FD | 	ret
23c04                 | 
23c04                 | __system____builtin_atof
23c04     07 4A 05 F6 | 	mov	COUNT_, #7
23c08     A8 00 A0 FD | 	call	#pushregs_
23c0c     09 1F 02 F6 | 	mov	local01, arg01
23c10     00 20 06 F6 | 	mov	local02, #0
23c14     00 22 06 F6 | 	mov	local03, #0
23c18     00 24 06 F6 | 	mov	local04, #0
23c1c     00 26 06 F6 | 	mov	local05, #0
23c20     97 08 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
23c24                 | LR__3350
23c24     0F 17 C2 FA | 	rdbyte	arg03, local01
23c28     20 16 0E F2 | 	cmp	arg03, #32 wz
23c2c     01 1E 06 A1 |  if_e	add	local01, #1
23c30     F0 FF 9F AD |  if_e	jmp	#LR__3350
23c34                 | LR__3351
23c34     0F 29 C2 FA | 	rdbyte	local06, local01
23c38                 | LR__3352
23c38     2B 28 0E F2 | 	cmp	local06, #43 wz
23c3c     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23c40     14 00 90 5D |  if_ne	jmp	#LR__3353
23c44     2D 28 0E F2 | 	cmp	local06, #45 wz
23c48     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23c4c     01 1E 06 F1 | 	add	local01, #1
23c50     0F 29 C2 FA | 	rdbyte	local06, local01
23c54     E0 FF 9F FD | 	jmp	#LR__3352
23c58                 | LR__3353
23c58                 | LR__3354
23c58     97 08 48 FB | 	callpa	#(@LR__3356-@LR__3355)>>2,fcache_load_ptr_
23c5c                 | LR__3355
23c5c     0F 29 C2 FA | 	rdbyte	local06, local01
23c60     5F 28 0E F2 | 	cmp	local06, #95 wz
23c64     01 1E 06 F1 | 	add	local01, #1
23c68     F0 FF 9F AD |  if_e	jmp	#LR__3355
23c6c                 | LR__3356
23c6c     00 28 0E F2 | 	cmp	local06, #0 wz
23c70     5C 00 90 AD |  if_e	jmp	#LR__3358
23c74     30 28 56 F2 | 	cmps	local06, #48 wc
23c78     44 00 90 CD |  if_b	jmp	#LR__3357
23c7c     3A 28 56 F2 | 	cmps	local06, #58 wc
23c80     3C 00 90 3D |  if_ae	jmp	#LR__3357
23c84     10 13 02 F6 | 	mov	arg01, local02
23c88     00 90 20 FF 
23c8c     00 14 06 F6 | 	mov	arg02, ##1092616192
23c90     64 F7 BF FD | 	call	#__system___float_mul
23c94     FD 20 02 F6 | 	mov	local02, result1
23c98     30 28 86 F1 | 	sub	local06, #48
23c9c     14 13 02 F6 | 	mov	arg01, local06
23ca0     50 F3 BF FD | 	call	#__system___float_fromuns
23ca4     FD 14 02 F6 | 	mov	arg02, result1
23ca8     10 13 02 F6 | 	mov	arg01, local02
23cac     78 F3 BF FD | 	call	#__system___float_add
23cb0     FD 20 02 F6 | 	mov	local02, result1
23cb4     00 26 0E F2 | 	cmp	local05, #0 wz
23cb8     01 22 86 51 |  if_ne	sub	local03, #1
23cbc     98 FF 9F FD | 	jmp	#LR__3354
23cc0                 | LR__3357
23cc0     2E 28 0E F2 | 	cmp	local06, #46 wz
23cc4     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23cc8     01 26 06 A6 |  if_e	mov	local05, #1
23ccc     88 FF 9F AD |  if_e	jmp	#LR__3354
23cd0                 | LR__3358
23cd0     45 28 0E F2 | 	cmp	local06, #69 wz
23cd4     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23cd8     18 00 90 5D |  if_ne	jmp	#LR__3359
23cdc     0F 13 02 F6 | 	mov	arg01, local01
23ce0     00 14 06 F6 | 	mov	arg02, #0
23ce4     88 FD BF FD | 	call	#__system____builtin_atoi
23ce8     11 FB 01 F1 | 	add	result1, local03
23cec     FD 2A 02 F6 | 	mov	local07, result1
23cf0     04 00 90 FD | 	jmp	#LR__3360
23cf4                 | LR__3359
23cf4     11 2B 02 F6 | 	mov	local07, local03
23cf8                 | LR__3360
23cf8     15 17 02 F6 | 	mov	arg03, local07
23cfc     10 13 02 F6 | 	mov	arg01, local02
23d00     00 90 20 FF 
23d04     00 14 06 F6 | 	mov	arg02, ##1092616192
23d08     F4 06 B0 FD | 	call	#__system___float_pow_n
23d0c     12 FB 61 F5 | 	xor	result1, local04
23d10     A7 F0 03 F6 | 	mov	ptra, fp
23d14     B2 00 A0 FD | 	call	#popregs_
23d18                 | __system____builtin_atof_ret
23d18     2D 00 64 FD | 	ret
23d1c                 | 
23d1c                 | __system____builtin_ilogb
23d1c     FC FB BF FD | 	call	#__system___float_Unpack
23d20     00 FE 0D F2 | 	cmp	result3, #0 wz
23d24     00 00 40 AF 
23d28     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23d2c     24 00 90 AD |  if_e	jmp	#LR__3371
23d30     80 FC 0D F2 | 	cmp	result2, #128 wz
23d34     18 00 90 5D |  if_ne	jmp	#LR__3370
23d38     00 00 10 FF 
23d3c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23d40     1E FA CD A9 |  if_e	bmask	result1, #30
23d44     0C 00 90 AD |  if_e	jmp	#LR__3371
23d48     1F FA C5 F9 | 	decod	result1, #31
23d4c     04 00 90 FD | 	jmp	#LR__3371
23d50                 | LR__3370
23d50     FE FA 01 F6 | 	mov	result1, result2
23d54                 | LR__3371
23d54                 | __system____builtin_ilogb_ret
23d54     2D 00 64 FD | 	ret
23d58                 | 
23d58                 | __system____builtin_sinf
23d58     03 4A 05 F6 | 	mov	COUNT_, #3
23d5c     A8 00 A0 FD | 	call	#pushregs_
23d60     09 1F 02 F6 | 	mov	local01, arg01
23d64     87 64 20 FF 
23d68     DB 15 06 F6 | 	mov	arg02, ##1086918619
23d6c     8C F8 BF FD | 	call	#__system___float_div
23d70     FD 12 02 F6 | 	mov	arg01, result1
23d74     00 14 06 F6 | 	mov	arg02, #0
23d78     44 FB BF FD | 	call	#__system___float_tointeger
23d7c     FD 16 0A F6 | 	mov	arg03, result1 wz
23d80     44 00 90 AD |  if_e	jmp	#LR__3380
23d84     0B 13 52 F6 | 	abs	arg01, arg03 wc
23d88     1F 20 C6 C9 |  if_b	decod	local02, #31
23d8c     00 20 06 36 |  if_ae	mov	local02, #0
23d90     60 F2 BF FD | 	call	#__system___float_fromuns
23d94     10 FB 61 F5 | 	xor	result1, local02
23d98     FD 12 02 F6 | 	mov	arg01, result1
23d9c     1E 14 C6 F9 | 	decod	arg02, #30
23da0     54 F6 BF FD | 	call	#__system___float_mul
23da4     FD 12 02 F6 | 	mov	arg01, result1
23da8     87 24 20 FF 
23dac     DB 15 06 F6 | 	mov	arg02, ##1078530011
23db0     44 F6 BF FD | 	call	#__system___float_mul
23db4     FD 14 02 F6 | 	mov	arg02, result1
23db8     0F 13 02 F6 | 	mov	arg01, local01
23dbc     1F 14 E6 F4 | 	bitnot	arg02, #31
23dc0     64 F2 BF FD | 	call	#__system___float_add
23dc4     FD 1E 02 F6 | 	mov	local01, result1
23dc8                 | LR__3380
23dc8     0F 13 02 F6 | 	mov	arg01, local01
23dcc     66 E6 1E FF 
23dd0     CD 14 06 F6 | 	mov	arg02, ##1036831949
23dd4     01 16 06 F6 | 	mov	arg03, #1
23dd8     50 FA BF FD | 	call	#__system___float_cmp
23ddc     00 FA 55 F2 | 	cmps	result1, #0 wc
23de0     5C 00 90 3D |  if_ae	jmp	#LR__3381
23de4     0F 13 02 F6 | 	mov	arg01, local01
23de8     66 E6 5E FF 
23dec     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23df0     01 16 66 F6 | 	neg	arg03, #1
23df4     34 FA BF FD | 	call	#__system___float_cmp
23df8     01 FA 55 F2 | 	cmps	result1, #1 wc
23dfc     40 00 90 CD |  if_b	jmp	#LR__3381
23e00     0F 13 02 F6 | 	mov	arg01, local01
23e04     0F 15 02 F6 | 	mov	arg02, local01
23e08     EC F5 BF FD | 	call	#__system___float_mul
23e0c     FD 12 02 F6 | 	mov	arg01, result1
23e10     0F 15 02 F6 | 	mov	arg02, local01
23e14     E0 F5 BF FD | 	call	#__system___float_mul
23e18     FD 12 02 F6 | 	mov	arg01, result1
23e1c     00 60 20 FF 
23e20     00 14 06 F6 | 	mov	arg02, ##1086324736
23e24     D4 F7 BF FD | 	call	#__system___float_div
23e28     FD 14 02 F6 | 	mov	arg02, result1
23e2c     0F 13 02 F6 | 	mov	arg01, local01
23e30     1F 14 E6 F4 | 	bitnot	arg02, #31
23e34     F0 F1 BF FD | 	call	#__system___float_add
23e38     FD 22 02 F6 | 	mov	local03, result1
23e3c     54 00 90 FD | 	jmp	#LR__3382
23e40                 | LR__3381
23e40     0F 13 02 F6 | 	mov	arg01, local01
23e44     7C 91 26 FF 
23e48     83 15 06 F6 | 	mov	arg02, ##1294137731
23e4c     A8 F5 BF FD | 	call	#__system___float_mul
23e50     FD 12 02 F6 | 	mov	arg01, result1
23e54     00 14 06 F6 | 	mov	arg02, #0
23e58     64 FA BF FD | 	call	#__system___float_tointeger
23e5c     02 FA 65 F0 | 	shl	result1, #2
23e60     00 00 A0 FF 
23e64     FD 00 48 FD | 	qrotate	##1073741824, result1
23e68     19 12 62 FD | 	getqy	arg01
23e6c     09 13 52 F6 | 	abs	arg01, arg01 wc
23e70     1F 20 C6 C9 |  if_b	decod	local02, #31
23e74     00 20 06 36 |  if_ae	mov	local02, #0
23e78     78 F1 BF FD | 	call	#__system___float_fromuns
23e7c     10 FB 61 F5 | 	xor	result1, local02
23e80     FD 12 02 F6 | 	mov	arg01, result1
23e84     00 40 27 FF 
23e88     00 14 06 F6 | 	mov	arg02, ##1317011456
23e8c     6C F7 BF FD | 	call	#__system___float_div
23e90     FD 22 02 F6 | 	mov	local03, result1
23e94                 | LR__3382
23e94     11 FB 01 F6 | 	mov	result1, local03
23e98     A7 F0 03 F6 | 	mov	ptra, fp
23e9c     B2 00 A0 FD | 	call	#popregs_
23ea0                 | __system____builtin_sinf_ret
23ea0     2D 00 64 FD | 	ret
23ea4                 | 
23ea4                 | __system____builtin_tanf
23ea4     02 4A 05 F6 | 	mov	COUNT_, #2
23ea8     A8 00 A0 FD | 	call	#pushregs_
23eac     09 1F 02 F6 | 	mov	local01, arg01
23eb0     A4 FE BF FD | 	call	#__system____builtin_sinf
23eb4     FD 20 02 F6 | 	mov	local02, result1
23eb8     0F 15 02 F6 | 	mov	arg02, local01
23ebc     87 E4 1F FF 
23ec0     DB 13 06 F6 | 	mov	arg01, ##1070141403
23ec4     1F 14 E6 F4 | 	bitnot	arg02, #31
23ec8     5C F1 BF FD | 	call	#__system___float_add
23ecc     FD 12 02 F6 | 	mov	arg01, result1
23ed0     84 FE BF FD | 	call	#__system____builtin_sinf
23ed4     FD 14 02 F6 | 	mov	arg02, result1
23ed8     10 13 02 F6 | 	mov	arg01, local02
23edc     1C F7 BF FD | 	call	#__system___float_div
23ee0     A7 F0 03 F6 | 	mov	ptra, fp
23ee4     B2 00 A0 FD | 	call	#popregs_
23ee8                 | __system____builtin_tanf_ret
23ee8     2D 00 64 FD | 	ret
23eec                 | 
23eec                 | __system____builtin_asinf
23eec     01 4A 05 F6 | 	mov	COUNT_, #1
23ef0     A8 00 A0 FD | 	call	#pushregs_
23ef4     09 1F 02 F6 | 	mov	local01, arg01
23ef8     0F 15 02 F6 | 	mov	arg02, local01
23efc     0F 13 02 F6 | 	mov	arg01, local01
23f00     F4 F4 BF FD | 	call	#__system___float_mul
23f04     FD 14 02 F6 | 	mov	arg02, result1
23f08     00 C0 1F FF 
23f0c     00 12 06 F6 | 	mov	arg01, ##1065353216
23f10     1F 14 E6 F4 | 	bitnot	arg02, #31
23f14     10 F1 BF FD | 	call	#__system___float_add
23f18     FD 12 02 F6 | 	mov	arg01, result1
23f1c     00 F4 BF FD | 	call	#__system___float_sqrt
23f20     FD 14 02 F6 | 	mov	arg02, result1
23f24     0F 13 02 F6 | 	mov	arg01, local01
23f28     58 00 B0 FD | 	call	#__system____builtin_atan2f
23f2c     A7 F0 03 F6 | 	mov	ptra, fp
23f30     B2 00 A0 FD | 	call	#popregs_
23f34                 | __system____builtin_asinf_ret
23f34     2D 00 64 FD | 	ret
23f38                 | 
23f38                 | __system____builtin_acosf
23f38     01 4A 05 F6 | 	mov	COUNT_, #1
23f3c     A8 00 A0 FD | 	call	#pushregs_
23f40     09 1F 02 F6 | 	mov	local01, arg01
23f44     0F 15 02 F6 | 	mov	arg02, local01
23f48     0F 13 02 F6 | 	mov	arg01, local01
23f4c     A8 F4 BF FD | 	call	#__system___float_mul
23f50     FD 14 02 F6 | 	mov	arg02, result1
23f54     00 C0 1F FF 
23f58     00 12 06 F6 | 	mov	arg01, ##1065353216
23f5c     1F 14 E6 F4 | 	bitnot	arg02, #31
23f60     C4 F0 BF FD | 	call	#__system___float_add
23f64     FD 12 02 F6 | 	mov	arg01, result1
23f68     B4 F3 BF FD | 	call	#__system___float_sqrt
23f6c     FD 12 02 F6 | 	mov	arg01, result1
23f70     0F 15 02 F6 | 	mov	arg02, local01
23f74     0C 00 B0 FD | 	call	#__system____builtin_atan2f
23f78     A7 F0 03 F6 | 	mov	ptra, fp
23f7c     B2 00 A0 FD | 	call	#popregs_
23f80                 | __system____builtin_acosf_ret
23f80     2D 00 64 FD | 	ret
23f84                 | 
23f84                 | __system____builtin_atan2f
23f84     04 4A 05 F6 | 	mov	COUNT_, #4
23f88     A8 00 A0 FD | 	call	#pushregs_
23f8c     09 1F 02 F6 | 	mov	local01, arg01
23f90     0A 21 02 F6 | 	mov	local02, arg02
23f94     0F 13 02 F6 | 	mov	arg01, local01
23f98     00 14 06 F6 | 	mov	arg02, #0
23f9c     01 16 06 F6 | 	mov	arg03, #1
23fa0     88 F8 BF FD | 	call	#__system___float_cmp
23fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
23fa8     28 00 90 5D |  if_ne	jmp	#LR__3390
23fac     10 13 02 F6 | 	mov	arg01, local02
23fb0     00 14 06 F6 | 	mov	arg02, #0
23fb4     01 16 06 F6 | 	mov	arg03, #1
23fb8     70 F8 BF FD | 	call	#__system___float_cmp
23fbc     00 FA 55 F2 | 	cmps	result1, #0 wc
23fc0     87 24 60 CF 
23fc4     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
23fc8     DC 00 90 CD |  if_b	jmp	#LR__3391
23fcc     00 FA 05 F6 | 	mov	result1, #0
23fd0     D4 00 90 FD | 	jmp	#LR__3391
23fd4                 | LR__3390
23fd4     10 13 02 F6 | 	mov	arg01, local02
23fd8     10 15 02 F6 | 	mov	arg02, local02
23fdc     18 F4 BF FD | 	call	#__system___float_mul
23fe0     FD 22 02 F6 | 	mov	local03, result1
23fe4     0F 13 02 F6 | 	mov	arg01, local01
23fe8     0F 15 02 F6 | 	mov	arg02, local01
23fec     08 F4 BF FD | 	call	#__system___float_mul
23ff0     FD 14 02 F6 | 	mov	arg02, result1
23ff4     11 13 02 F6 | 	mov	arg01, local03
23ff8     2C F0 BF FD | 	call	#__system___float_add
23ffc     FD 12 02 F6 | 	mov	arg01, result1
24000     1C F3 BF FD | 	call	#__system___float_sqrt
24004     FD 22 02 F6 | 	mov	local03, result1
24008     10 13 02 F6 | 	mov	arg01, local02
2400c     11 15 02 F6 | 	mov	arg02, local03
24010     E8 F5 BF FD | 	call	#__system___float_div
24014     FD 20 02 F6 | 	mov	local02, result1
24018     0F 13 02 F6 | 	mov	arg01, local01
2401c     11 15 02 F6 | 	mov	arg02, local03
24020     D8 F5 BF FD | 	call	#__system___float_div
24024     FD 1E 02 F6 | 	mov	local01, result1
24028     00 40 27 FF 
2402c     00 12 06 F6 | 	mov	arg01, ##1317011456
24030     10 15 02 F6 | 	mov	arg02, local02
24034     C0 F3 BF FD | 	call	#__system___float_mul
24038     FD 12 02 F6 | 	mov	arg01, result1
2403c     00 14 06 F6 | 	mov	arg02, #0
24040     7C F8 BF FD | 	call	#__system___float_tointeger
24044     FD 22 02 F6 | 	mov	local03, result1
24048     00 40 27 FF 
2404c     00 12 06 F6 | 	mov	arg01, ##1317011456
24050     0F 15 02 F6 | 	mov	arg02, local01
24054     A0 F3 BF FD | 	call	#__system___float_mul
24058     FD 12 02 F6 | 	mov	arg01, result1
2405c     00 14 06 F6 | 	mov	arg02, #0
24060     5C F8 BF FD | 	call	#__system___float_tointeger
24064     FD 22 52 FD | 	qvector	local03, result1
24068     87 24 20 FF 
2406c     DB 23 06 F6 | 	mov	local03, ##1078530011
24070     19 12 62 FD | 	getqy	arg01
24074     01 12 C6 F0 | 	sar	arg01, #1
24078     09 13 52 F6 | 	abs	arg01, arg01 wc
2407c     1F 24 C6 C9 |  if_b	decod	local04, #31
24080     00 24 06 36 |  if_ae	mov	local04, #0
24084     6C EF BF FD | 	call	#__system___float_fromuns
24088     12 FB 61 F5 | 	xor	result1, local04
2408c     FD 12 02 F6 | 	mov	arg01, result1
24090     00 40 27 FF 
24094     00 14 06 F6 | 	mov	arg02, ##1317011456
24098     60 F5 BF FD | 	call	#__system___float_div
2409c     FD 14 02 F6 | 	mov	arg02, result1
240a0     11 13 02 F6 | 	mov	arg01, local03
240a4     50 F3 BF FD | 	call	#__system___float_mul
240a8                 | LR__3391
240a8     A7 F0 03 F6 | 	mov	ptra, fp
240ac     B2 00 A0 FD | 	call	#popregs_
240b0                 | __system____builtin_atan2f_ret
240b0     2D 00 64 FD | 	ret
240b4                 | 
240b4                 | __system____builtin_exp2f
240b4     04 4A 05 F6 | 	mov	COUNT_, #4
240b8     A8 00 A0 FD | 	call	#pushregs_
240bc     09 1F 02 F6 | 	mov	local01, arg01
240c0     00 7F 21 FF 
240c4     00 14 06 F6 | 	mov	arg02, ##1123942400
240c8     01 16 66 F6 | 	neg	arg03, #1
240cc     5C F7 BF FD | 	call	#__system___float_cmp
240d0     00 FA 55 F2 | 	cmps	result1, #0 wc
240d4     00 C0 3F 3F 
240d8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
240dc     DC 00 90 3D |  if_ae	jmp	#LR__3401
240e0     0F 13 02 F6 | 	mov	arg01, local01
240e4     00 7F 61 FF 
240e8     00 14 06 F6 | 	mov	arg02, ##-1023541248
240ec     01 16 06 F6 | 	mov	arg03, #1
240f0     38 F7 BF FD | 	call	#__system___float_cmp
240f4     00 FA 55 F2 | 	cmps	result1, #0 wc
240f8     00 FA 05 C6 |  if_b	mov	result1, #0
240fc     BC 00 90 CD |  if_b	jmp	#LR__3401
24100     0F 13 02 F6 | 	mov	arg01, local01
24104     00 14 06 F6 | 	mov	arg02, #0
24108     B4 F7 BF FD | 	call	#__system___float_tointeger
2410c     FD 20 02 F6 | 	mov	local02, result1
24110     10 13 52 F6 | 	abs	arg01, local02 wc
24114     1F 22 C6 C9 |  if_b	decod	local03, #31
24118     00 22 06 36 |  if_ae	mov	local03, #0
2411c     D4 EE BF FD | 	call	#__system___float_fromuns
24120     11 FB 61 F5 | 	xor	result1, local03
24124     FD 14 02 F6 | 	mov	arg02, result1
24128     0F 13 02 F6 | 	mov	arg01, local01
2412c     1F 14 E6 F4 | 	bitnot	arg02, #31
24130     F4 EE BF FD | 	call	#__system___float_add
24134     FD 24 02 F6 | 	mov	local04, result1
24138     12 13 02 F6 | 	mov	arg01, local04
2413c     00 14 06 F6 | 	mov	arg02, #0
24140     01 16 06 F6 | 	mov	arg03, #1
24144     E4 F6 BF FD | 	call	#__system___float_cmp
24148     00 FA 55 F2 | 	cmps	result1, #0 wc
2414c     18 00 90 3D |  if_ae	jmp	#LR__3400
24150     12 13 02 F6 | 	mov	arg01, local04
24154     00 C0 1F FF 
24158     00 14 06 F6 | 	mov	arg02, ##1065353216
2415c     C8 EE BF FD | 	call	#__system___float_add
24160     FD 24 02 F6 | 	mov	local04, result1
24164     01 20 86 F1 | 	sub	local02, #1
24168                 | LR__3400
24168     7F 20 06 F1 | 	add	local02, #127
2416c     17 20 66 F0 | 	shl	local02, #23
24170     12 13 02 F6 | 	mov	arg01, local04
24174     00 80 26 FF 
24178     00 14 06 F6 | 	mov	arg02, ##1291845632
2417c     78 F2 BF FD | 	call	#__system___float_mul
24180     FD 12 02 F6 | 	mov	arg01, result1
24184     00 14 06 F6 | 	mov	arg02, #0
24188     34 F7 BF FD | 	call	#__system___float_tointeger
2418c     FD 24 0A F6 | 	mov	local04, result1 wz
24190     10 FB 01 A6 |  if_e	mov	result1, local02
24194     24 00 90 AD |  if_e	jmp	#LR__3401
24198     3E 24 26 F4 | 	bith	local04, #62
2419c     0F 24 62 FD | 	qexp	local04
241a0     10 13 02 F6 | 	mov	arg01, local02
241a4     18 14 62 FD | 	getqx	arg02
241a8     01 14 06 F1 | 	add	arg02, #1
241ac     01 14 46 F0 | 	shr	arg02, #1
241b0     00 80 1F FF 
241b4     00 14 06 F1 | 	add	arg02, ##1056964608
241b8     3C F2 BF FD | 	call	#__system___float_mul
241bc                 | LR__3401
241bc     A7 F0 03 F6 | 	mov	ptra, fp
241c0     B2 00 A0 FD | 	call	#popregs_
241c4                 | __system____builtin_exp2f_ret
241c4     2D 00 64 FD | 	ret
241c8                 | 
241c8                 | __system____builtin_log2f
241c8     06 4A 05 F6 | 	mov	COUNT_, #6
241cc     A8 00 A0 FD | 	call	#pushregs_
241d0     09 1F 02 F6 | 	mov	local01, arg01
241d4     09 21 0A F6 | 	mov	local02, arg01 wz
241d8     00 00 40 5F 
241dc     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
241e0     00 40 00 AF 
241e4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
241e8     08 01 90 AD |  if_e	jmp	#LR__3414
241ec     00 20 56 F2 | 	cmps	local02, #0 wc
241f0     00 E0 3F CF 
241f4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
241f8     F8 00 90 CD |  if_b	jmp	#LR__3414
241fc     0F 13 02 F6 | 	mov	arg01, local01
24200     00 90 20 FF 
24204     00 14 06 F6 | 	mov	arg02, ##1092616192
24208     01 16 06 F6 | 	mov	arg03, #1
2420c     1C F6 BF FD | 	call	#__system___float_cmp
24210     00 FA 0D F2 | 	cmp	result1, #0 wz
24214     4D 2A 20 AF 
24218     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2421c     D4 00 90 AD |  if_e	jmp	#LR__3414
24220     0F 13 02 F6 | 	mov	arg01, local01
24224     FC 16 20 FF 
24228     54 14 06 F6 | 	mov	arg02, ##1076754516
2422c     01 16 06 F6 | 	mov	arg03, #1
24230     F8 F5 BF FD | 	call	#__system___float_cmp
24234     00 FA 0D F2 | 	cmp	result1, #0 wz
24238     55 DC 1F AF 
2423c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24240     B0 00 90 AD |  if_e	jmp	#LR__3414
24244     10 23 02 F6 | 	mov	local03, local02
24248     17 22 46 F0 | 	shr	local03, #23
2424c     11 23 E2 F8 | 	getbyte	local03, local03, #0
24250     17 21 06 F4 | 	bitl	local02, #279
24254     10 25 02 F6 | 	mov	local04, local02
24258     FF 22 0E F2 | 	cmp	local03, #255 wz
2425c     1C 00 90 5D |  if_ne	jmp	#LR__3410
24260     00 24 0E F2 | 	cmp	local04, #0 wz
24264     00 C0 3F 5F 
24268     00 26 06 56 |  if_ne	mov	local05, ##2139095040
2426c     00 E0 3F AF 
24270     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24274     13 FB 01 F6 | 	mov	result1, local05
24278     78 00 90 FD | 	jmp	#LR__3414
2427c                 | LR__3410
2427c     00 22 0E F2 | 	cmp	local03, #0 wz
24280     17 24 26 54 |  if_ne	bith	local04, #23
24284     7F 22 86 51 |  if_ne	sub	local03, #127
24288     28 00 90 5D |  if_ne	jmp	#LR__3413
2428c     00 24 0E F2 | 	cmp	local04, #0 wz
24290     00 40 00 AF 
24294     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24298     58 00 90 AD |  if_e	jmp	#LR__3414
2429c     7E 22 66 F6 | 	neg	local03, #126
242a0     97 08 48 FB | 	callpa	#(@LR__3412-@LR__3411)>>2,fcache_load_ptr_
242a4                 | LR__3411
242a4     17 24 2E F4 | 	testbn	local04, #23 wz
242a8     01 24 66 A0 |  if_e	shl	local04, #1
242ac     01 22 06 A1 |  if_e	add	local03, #1
242b0     F0 FF 9F AD |  if_e	jmp	#LR__3411
242b4                 | LR__3412
242b4                 | LR__3413
242b4     0E 24 62 FD | 	qlog	local04
242b8     01 22 86 F1 | 	sub	local03, #1
242bc     11 13 52 F6 | 	abs	arg01, local03 wc
242c0     1F 28 C6 C9 |  if_b	decod	local06, #31
242c4     00 28 06 36 |  if_ae	mov	local06, #0
242c8     18 26 62 FD | 	getqx	local05
242cc     9B 26 06 F4 | 	bitl	local05, #155
242d0     08 26 06 F1 | 	add	local05, #8
242d4     04 26 46 F0 | 	shr	local05, #4
242d8     00 C0 1F FF 
242dc     00 26 06 F1 | 	add	local05, ##1065353216
242e0     10 ED BF FD | 	call	#__system___float_fromuns
242e4     14 FB 61 F5 | 	xor	result1, local06
242e8     FD 14 02 F6 | 	mov	arg02, result1
242ec     13 13 02 F6 | 	mov	arg01, local05
242f0     34 ED BF FD | 	call	#__system___float_add
242f4                 | LR__3414
242f4     A7 F0 03 F6 | 	mov	ptra, fp
242f8     B2 00 A0 FD | 	call	#popregs_
242fc                 | __system____builtin_log2f_ret
242fc     2D 00 64 FD | 	ret
24300                 | 
24300                 | __system____builtin_powf
24300     04 4A 05 F6 | 	mov	COUNT_, #4
24304     A8 00 A0 FD | 	call	#pushregs_
24308     09 1F 02 F6 | 	mov	local01, arg01
2430c     0A 21 02 F6 | 	mov	local02, arg02
24310     10 13 02 F6 | 	mov	arg01, local02
24314     00 14 06 F6 | 	mov	arg02, #0
24318     A4 F5 BF FD | 	call	#__system___float_tointeger
2431c     FD 22 02 F6 | 	mov	local03, result1
24320     11 13 52 F6 | 	abs	arg01, local03 wc
24324     1F 24 C6 C9 |  if_b	decod	local04, #31
24328     00 24 06 36 |  if_ae	mov	local04, #0
2432c     C4 EC BF FD | 	call	#__system___float_fromuns
24330     12 FB 61 F5 | 	xor	result1, local04
24334     FD 12 02 F6 | 	mov	arg01, result1
24338     10 15 02 F6 | 	mov	arg02, local02
2433c     01 16 06 F6 | 	mov	arg03, #1
24340     E8 F4 BF FD | 	call	#__system___float_cmp
24344     00 FA 0D F2 | 	cmp	result1, #0 wz
24348     18 00 90 5D |  if_ne	jmp	#LR__3420
2434c     00 C0 1F FF 
24350     00 12 06 F6 | 	mov	arg01, ##1065353216
24354     0F 15 02 F6 | 	mov	arg02, local01
24358     11 17 02 F6 | 	mov	arg03, local03
2435c     A0 00 B0 FD | 	call	#__system___float_pow_n
24360     58 00 90 FD | 	jmp	#LR__3421
24364                 | LR__3420
24364     0F 13 02 F6 | 	mov	arg01, local01
24368     00 14 06 F6 | 	mov	arg02, #0
2436c     01 16 06 F6 | 	mov	arg03, #1
24370     B8 F4 BF FD | 	call	#__system___float_cmp
24374     00 FA 55 F2 | 	cmps	result1, #0 wc
24378     00 E0 3F CF 
2437c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24380     38 00 90 CD |  if_b	jmp	#LR__3421
24384     0F 13 02 F6 | 	mov	arg01, local01
24388     00 14 06 F6 | 	mov	arg02, #0
2438c     01 16 06 F6 | 	mov	arg03, #1
24390     98 F4 BF FD | 	call	#__system___float_cmp
24394     00 FA 0D F2 | 	cmp	result1, #0 wz
24398     00 FA 05 A6 |  if_e	mov	result1, #0
2439c     1C 00 90 AD |  if_e	jmp	#LR__3421
243a0     0F 13 02 F6 | 	mov	arg01, local01
243a4     20 FE BF FD | 	call	#__system____builtin_log2f
243a8     FD 12 02 F6 | 	mov	arg01, result1
243ac     10 15 02 F6 | 	mov	arg02, local02
243b0     44 F0 BF FD | 	call	#__system___float_mul
243b4     FD 12 02 F6 | 	mov	arg01, result1
243b8     F8 FC BF FD | 	call	#__system____builtin_exp2f
243bc                 | LR__3421
243bc     A7 F0 03 F6 | 	mov	ptra, fp
243c0     B2 00 A0 FD | 	call	#popregs_
243c4                 | __system____builtin_powf_ret
243c4     2D 00 64 FD | 	ret
243c8                 | 
243c8                 | __system____builtin_logbase
243c8     02 4A 05 F6 | 	mov	COUNT_, #2
243cc     A8 00 A0 FD | 	call	#pushregs_
243d0     09 1F 02 F6 | 	mov	local01, arg01
243d4     0A 13 02 F6 | 	mov	arg01, arg02
243d8     EC FD BF FD | 	call	#__system____builtin_log2f
243dc     FD 20 02 F6 | 	mov	local02, result1
243e0     0F 13 02 F6 | 	mov	arg01, local01
243e4     E0 FD BF FD | 	call	#__system____builtin_log2f
243e8     FD 14 02 F6 | 	mov	arg02, result1
243ec     10 13 02 F6 | 	mov	arg01, local02
243f0     08 F2 BF FD | 	call	#__system___float_div
243f4     A7 F0 03 F6 | 	mov	ptra, fp
243f8     B2 00 A0 FD | 	call	#popregs_
243fc                 | __system____builtin_logbase_ret
243fc     2D 00 64 FD | 	ret
24400                 | 
24400                 | __system___float_pow_n
24400     05 4A 05 F6 | 	mov	COUNT_, #5
24404     A8 00 A0 FD | 	call	#pushregs_
24408     09 1F 02 F6 | 	mov	local01, arg01
2440c     0A 21 02 F6 | 	mov	local02, arg02
24410     0B 23 02 F6 | 	mov	local03, arg03
24414     00 22 56 F2 | 	cmps	local03, #0 wc
24418     18 00 90 3D |  if_ae	jmp	#LR__3430
2441c     01 24 06 F6 | 	mov	local04, #1
24420     11 23 62 F6 | 	neg	local03, local03
24424     00 22 56 F2 | 	cmps	local03, #0 wc
24428     00 FA 05 C6 |  if_b	mov	result1, #0
2442c     94 00 90 CD |  if_b	jmp	#LR__3438
24430     04 00 90 FD | 	jmp	#LR__3431
24434                 | LR__3430
24434     00 24 06 F6 | 	mov	local04, #0
24438                 | LR__3431
24438     00 C0 1F FF 
2443c     00 26 06 F6 | 	mov	local05, ##1065353216
24440                 | LR__3432
24440     01 22 56 F2 | 	cmps	local03, #1 wc
24444     30 00 90 CD |  if_b	jmp	#LR__3434
24448     01 22 CE F7 | 	test	local03, #1 wz
2444c     10 00 90 AD |  if_e	jmp	#LR__3433
24450     13 13 02 F6 | 	mov	arg01, local05
24454     10 15 02 F6 | 	mov	arg02, local02
24458     9C EF BF FD | 	call	#__system___float_mul
2445c     FD 26 02 F6 | 	mov	local05, result1
24460                 | LR__3433
24460     01 22 C6 F0 | 	sar	local03, #1
24464     10 13 02 F6 | 	mov	arg01, local02
24468     10 15 02 F6 | 	mov	arg02, local02
2446c     88 EF BF FD | 	call	#__system___float_mul
24470     FD 20 02 F6 | 	mov	local02, result1
24474     C8 FF 9F FD | 	jmp	#LR__3432
24478                 | LR__3434
24478     00 24 0E F2 | 	cmp	local04, #0 wz
2447c     14 00 90 AD |  if_e	jmp	#LR__3435
24480     0F 13 02 F6 | 	mov	arg01, local01
24484     13 15 02 F6 | 	mov	arg02, local05
24488     70 F1 BF FD | 	call	#__system___float_div
2448c     FD 26 02 F6 | 	mov	local05, result1
24490     2C 00 90 FD | 	jmp	#LR__3437
24494                 | LR__3435
24494     0F 13 02 F6 | 	mov	arg01, local01
24498     00 C0 1F FF 
2449c     00 14 06 F6 | 	mov	arg02, ##1065353216
244a0     01 16 06 F6 | 	mov	arg03, #1
244a4     84 F3 BF FD | 	call	#__system___float_cmp
244a8     00 FA 0D F2 | 	cmp	result1, #0 wz
244ac     10 00 90 AD |  if_e	jmp	#LR__3436
244b0     0F 13 02 F6 | 	mov	arg01, local01
244b4     13 15 02 F6 | 	mov	arg02, local05
244b8     3C EF BF FD | 	call	#__system___float_mul
244bc     FD 26 02 F6 | 	mov	local05, result1
244c0                 | LR__3436
244c0                 | LR__3437
244c0     13 FB 01 F6 | 	mov	result1, local05
244c4                 | LR__3438
244c4     A7 F0 03 F6 | 	mov	ptra, fp
244c8     B2 00 A0 FD | 	call	#popregs_
244cc                 | __system___float_pow_n_ret
244cc     2D 00 64 FD | 	ret
244d0                 | 
244d0                 | __system___gc_ptrs
244d0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
244d4     00 03 02 F6 | 	mov	_var02, _var01
244d8     76 01 00 FF 
244dc     F8 03 06 F1 | 	add	_var02, ##191992
244e0     00 FD 09 FB | 	rdlong	result2, _var01 wz
244e4     74 00 90 5D |  if_ne	jmp	#LR__3440
244e8     01 FD 01 F6 | 	mov	result2, _var02
244ec     00 FD 81 F1 | 	sub	result2, _var01
244f0     00 03 58 FC | 	wrword	#1, _var01
244f4     00 FB 01 F6 | 	mov	result1, _var01
244f8     02 FA 05 F1 | 	add	result1, #2
244fc     36 00 80 FF 
24500     FD 20 59 FC | 	wrword	##27792, result1
24504     00 FB 01 F6 | 	mov	result1, _var01
24508     04 FA 05 F1 | 	add	result1, #4
2450c     FD 00 58 FC | 	wrword	#0, result1
24510     00 FB 01 F6 | 	mov	result1, _var01
24514     06 FA 05 F1 | 	add	result1, #6
24518     FD 02 58 FC | 	wrword	#1, result1
2451c     10 00 06 F1 | 	add	_var01, #16
24520     FE FC 51 F6 | 	abs	result2, result2 wc
24524     04 FC 45 F0 | 	shr	result2, #4
24528     FE FC 81 F6 | 	negc	result2, result2
2452c     00 FD 51 FC | 	wrword	result2, _var01
24530     00 FD 01 F6 | 	mov	result2, _var01
24534     02 FC 05 F1 | 	add	result2, #2
24538     36 00 80 FF 
2453c     FE 1E 59 FC | 	wrword	##27791, result2
24540     00 FD 01 F6 | 	mov	result2, _var01
24544     04 FC 05 F1 | 	add	result2, #4
24548     FE 00 58 FC | 	wrword	#0, result2
2454c     00 FD 01 F6 | 	mov	result2, _var01
24550     06 FC 05 F1 | 	add	result2, #6
24554     FE 00 58 FC | 	wrword	#0, result2
24558     10 00 86 F1 | 	sub	_var01, #16
2455c                 | LR__3440
2455c     00 FB 01 F6 | 	mov	result1, _var01
24560     01 FD 01 F6 | 	mov	result2, _var02
24564                 | __system___gc_ptrs_ret
24564     2D 00 64 FD | 	ret
24568                 | 
24568                 | __system___gc_tryalloc
24568     0B 4A 05 F6 | 	mov	COUNT_, #11
2456c     A8 00 A0 FD | 	call	#pushregs_
24570     09 1F 02 F6 | 	mov	local01, arg01
24574     0A 21 02 F6 | 	mov	local02, arg02
24578     54 FF BF FD | 	call	#__system___gc_ptrs
2457c     FD 22 02 F6 | 	mov	local03, result1
24580     FE 24 02 F6 | 	mov	local04, result2
24584     11 27 02 F6 | 	mov	local05, local03
24588     00 28 06 F6 | 	mov	local06, #0
2458c     97 1E 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
24590                 | LR__3450
24590     13 2B 02 F6 | 	mov	local07, local05
24594     06 26 06 F1 | 	add	local05, #6
24598     13 15 EA FA | 	rdword	arg02, local05 wz
2459c     11 13 02 F6 | 	mov	arg01, local03
245a0     00 FA 05 A6 |  if_e	mov	result1, #0
245a4     04 14 66 50 |  if_ne	shl	arg02, #4
245a8     0A 13 02 51 |  if_ne	add	arg01, arg02
245ac     09 FB 01 56 |  if_ne	mov	result1, arg01
245b0     FD 26 0A F6 | 	mov	local05, result1 wz
245b4     13 29 E2 5A |  if_ne	rdword	local06, local05
245b8     00 26 0E F2 | 	cmp	local05, #0 wz
245bc     12 27 52 52 |  if_ne	cmps	local05, local04 wc
245c0     08 00 90 1D |  if_a	jmp	#LR__3452
245c4     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
245c8     C4 FF 9F 1D |  if_a	jmp	#LR__3450
245cc                 | LR__3451
245cc                 | LR__3452
245cc     00 26 0E F2 | 	cmp	local05, #0 wz
245d0     13 FB 01 A6 |  if_e	mov	result1, local05
245d4     3C 01 90 AD |  if_e	jmp	#LR__3455
245d8     13 FD 01 F6 | 	mov	result2, local05
245dc     06 FC 05 F1 | 	add	result2, #6
245e0     FE 2C E2 FA | 	rdword	local08, result2
245e4     14 1F 52 F2 | 	cmps	local01, local06 wc
245e8     C0 00 90 3D |  if_ae	jmp	#LR__3454
245ec     13 1F 52 FC | 	wrword	local01, local05
245f0     13 13 02 F6 | 	mov	arg01, local05
245f4     0F 2D 02 F6 | 	mov	local08, local01
245f8     04 2C 66 F0 | 	shl	local08, #4
245fc     16 13 02 F1 | 	add	arg01, local08
24600     0F 29 82 F1 | 	sub	local06, local01
24604     09 29 52 FC | 	wrword	local06, arg01
24608     09 2D 02 F6 | 	mov	local08, arg01
2460c     02 2C 06 F1 | 	add	local08, #2
24610     36 00 80 FF 
24614     16 1F 59 FC | 	wrword	##27791, local08
24618     13 15 0A F6 | 	mov	arg02, local05 wz
2461c     00 FA 05 A6 |  if_e	mov	result1, #0
24620     11 15 82 51 |  if_ne	sub	arg02, local03
24624     04 14 46 50 |  if_ne	shr	arg02, #4
24628     0A FB 01 56 |  if_ne	mov	result1, arg02
2462c     09 2D 02 F6 | 	mov	local08, arg01
24630     04 2C 06 F1 | 	add	local08, #4
24634     16 FB 51 FC | 	wrword	result1, local08
24638     13 2D 02 F6 | 	mov	local08, local05
2463c     06 2C 06 F1 | 	add	local08, #6
24640     09 15 02 F6 | 	mov	arg02, arg01
24644     16 2D E2 FA | 	rdword	local08, local08
24648     06 14 06 F1 | 	add	arg02, #6
2464c     0A 2D 52 FC | 	wrword	local08, arg02
24650     09 2F 02 F6 | 	mov	local09, arg01
24654     17 15 0A F6 | 	mov	arg02, local09 wz
24658     00 FA 05 A6 |  if_e	mov	result1, #0
2465c     11 15 82 51 |  if_ne	sub	arg02, local03
24660     04 14 46 50 |  if_ne	shr	arg02, #4
24664     0A FB 01 56 |  if_ne	mov	result1, arg02
24668     FD 2C 02 F6 | 	mov	local08, result1
2466c     09 31 EA FA | 	rdword	local10, arg01 wz
24670     00 FA 05 A6 |  if_e	mov	result1, #0
24674     04 30 66 50 |  if_ne	shl	local10, #4
24678     18 13 02 51 |  if_ne	add	arg01, local10
2467c     09 FB 01 56 |  if_ne	mov	result1, arg01
24680     FD 32 0A F6 | 	mov	local11, result1 wz
24684     24 00 90 AD |  if_e	jmp	#LR__3453
24688     12 33 52 F2 | 	cmps	local11, local04 wc
2468c     1C 00 90 3D |  if_ae	jmp	#LR__3453
24690     17 15 0A F6 | 	mov	arg02, local09 wz
24694     00 FA 05 A6 |  if_e	mov	result1, #0
24698     11 15 82 51 |  if_ne	sub	arg02, local03
2469c     04 14 46 50 |  if_ne	shr	arg02, #4
246a0     0A FB 01 56 |  if_ne	mov	result1, arg02
246a4     04 32 06 F1 | 	add	local11, #4
246a8     19 FB 51 FC | 	wrword	result1, local11
246ac                 | LR__3453
246ac                 | LR__3454
246ac     06 2A 06 F1 | 	add	local07, #6
246b0     15 2D 52 FC | 	wrword	local08, local07
246b4     36 00 00 FF 
246b8     80 2E 06 F6 | 	mov	local09, ##27776
246bc     10 2F 42 F5 | 	or	local09, local02
246c0     00 FA 05 F6 | 	mov	result1, #0
246c4     01 FA 61 FD | 	cogid	result1
246c8     FD 2E 42 F5 | 	or	local09, result1
246cc     13 33 02 F6 | 	mov	local11, local05
246d0     02 32 06 F1 | 	add	local11, #2
246d4     19 2F 52 FC | 	wrword	local09, local11
246d8     11 2F 02 F6 | 	mov	local09, local03
246dc     08 2E 06 F1 | 	add	local09, #8
246e0     13 33 02 F6 | 	mov	local11, local05
246e4     17 2F E2 FA | 	rdword	local09, local09
246e8     06 32 06 F1 | 	add	local11, #6
246ec     19 2F 52 FC | 	wrword	local09, local11
246f0     13 15 0A F6 | 	mov	arg02, local05 wz
246f4     00 FA 05 A6 |  if_e	mov	result1, #0
246f8     11 15 82 51 |  if_ne	sub	arg02, local03
246fc     04 14 46 50 |  if_ne	shr	arg02, #4
24700     0A FB 01 56 |  if_ne	mov	result1, arg02
24704     08 22 06 F1 | 	add	local03, #8
24708     11 FB 51 FC | 	wrword	result1, local03
2470c     08 26 06 F1 | 	add	local05, #8
24710     13 FB 01 F6 | 	mov	result1, local05
24714                 | LR__3455
24714     A7 F0 03 F6 | 	mov	ptra, fp
24718     B2 00 A0 FD | 	call	#popregs_
2471c                 | __system___gc_tryalloc_ret
2471c     2D 00 64 FD | 	ret
24720                 | 
24720                 | __system___gc_alloc_managed
24720     01 4A 05 F6 | 	mov	COUNT_, #1
24724     A8 00 A0 FD | 	call	#pushregs_
24728     09 1F 02 F6 | 	mov	local01, arg01
2472c     00 14 06 F6 | 	mov	arg02, #0
24730     1C 00 B0 FD | 	call	#__system___gc_doalloc
24734     FD 14 0A F6 | 	mov	arg02, result1 wz
24738     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
2473c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24740     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24744     A7 F0 03 F6 | 	mov	ptra, fp
24748     B2 00 A0 FD | 	call	#popregs_
2474c                 | __system___gc_alloc_managed_ret
2474c     2D 00 64 FD | 	ret
24750                 | 
24750                 | __system___gc_doalloc
24750     06 4A 05 F6 | 	mov	COUNT_, #6
24754     A8 00 A0 FD | 	call	#pushregs_
24758     09 1F 0A F6 | 	mov	local01, arg01 wz
2475c     0A 21 02 F6 | 	mov	local02, arg02
24760     00 FA 05 A6 |  if_e	mov	result1, #0
24764     8C 00 90 AD |  if_e	jmp	#LR__3467
24768     17 1E 06 F1 | 	add	local01, #23
2476c     0F 1E 26 F5 | 	andn	local01, #15
24770     04 1E 46 F0 | 	shr	local01, #4
24774     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24778     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2477c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24780     C0 C0 BF FD | 	call	#__system___lockmem
24784     0F 13 02 F6 | 	mov	arg01, local01
24788     10 15 02 F6 | 	mov	arg02, local02
2478c     D8 FD BF FD | 	call	#__system___gc_tryalloc
24790     FD 22 0A F6 | 	mov	local03, result1 wz
24794     14 00 90 5D |  if_ne	jmp	#LR__3460
24798     70 03 B0 FD | 	call	#__system___gc_docollect
2479c     0F 13 02 F6 | 	mov	arg01, local01
247a0     10 15 02 F6 | 	mov	arg02, local02
247a4     C0 FD BF FD | 	call	#__system___gc_tryalloc
247a8     FD 22 02 F6 | 	mov	local03, result1
247ac                 | LR__3460
247ac     1C E6 05 F1 | 	add	ptr___system__dat__, #28
247b0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
247b4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
247b8     09 01 68 FC | 	wrlong	#0, arg01
247bc     00 22 0E F2 | 	cmp	local03, #0 wz
247c0     2C 00 90 AD |  if_e	jmp	#LR__3466
247c4     04 1E 66 F0 | 	shl	local01, #4
247c8     08 1E 86 F1 | 	sub	local01, #8
247cc     0F 25 52 F6 | 	abs	local04, local01 wc
247d0     02 24 46 F0 | 	shr	local04, #2
247d4     12 27 8A F6 | 	negc	local05, local04 wz
247d8     11 29 02 F6 | 	mov	local06, local03
247dc     10 00 90 AD |  if_e	jmp	#LR__3465
247e0     97 06 48 FB | 	callpa	#(@LR__3463-@LR__3461)>>2,fcache_load_ptr_
247e4                 | LR__3461
247e4     13 05 D8 FC | 	rep	@LR__3464, local05
247e8                 | LR__3462
247e8     14 01 68 FC | 	wrlong	#0, local06
247ec     04 28 06 F1 | 	add	local06, #4
247f0                 | LR__3463
247f0                 | LR__3464
247f0                 | LR__3465
247f0                 | LR__3466
247f0     11 FB 01 F6 | 	mov	result1, local03
247f4                 | LR__3467
247f4     A7 F0 03 F6 | 	mov	ptra, fp
247f8     B2 00 A0 FD | 	call	#popregs_
247fc                 | __system___gc_doalloc_ret
247fc     2D 00 64 FD | 	ret
24800                 | 
24800                 | __system___gc_isvalidptr
24800     F8 16 06 F4 | 	bitl	arg03, #248
24804     08 16 86 F1 | 	sub	arg03, #8
24808     09 17 52 F2 | 	cmps	arg03, arg01 wc
2480c     08 00 90 CD |  if_b	jmp	#LR__3470
24810     0A 17 52 F2 | 	cmps	arg03, arg02 wc
24814     08 00 90 CD |  if_b	jmp	#LR__3471
24818                 | LR__3470
24818     00 FA 05 F6 | 	mov	result1, #0
2481c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24820                 | LR__3471
24820     0B 01 02 F6 | 	mov	_var01, arg03
24824     09 01 62 F5 | 	xor	_var01, arg01
24828     0F 00 CE F7 | 	test	_var01, #15 wz
2482c     00 FA 05 56 |  if_ne	mov	result1, #0
24830     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
24834     0B 01 02 F6 | 	mov	_var01, arg03
24838     02 00 06 F1 | 	add	_var01, #2
2483c     00 01 E2 FA | 	rdword	_var01, _var01
24840     7F 00 00 FF 
24844     C0 01 06 F5 | 	and	_var01, ##65472
24848     36 00 00 FF 
2484c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24850     00 FA 05 56 |  if_ne	mov	result1, #0
24854     0B FB 01 A6 |  if_e	mov	result1, arg03
24858                 | __system___gc_isvalidptr_ret
24858     2D 00 64 FD | 	ret
2485c                 | 
2485c                 | __system___gc_free
2485c     09 17 02 F6 | 	mov	arg03, arg01
24860     6C FC BF FD | 	call	#__system___gc_ptrs
24864     FD 12 02 F6 | 	mov	arg01, result1
24868     FE 14 02 F6 | 	mov	arg02, result2
2486c     90 FF BF FD | 	call	#__system___gc_isvalidptr
24870     FD 14 0A F6 | 	mov	arg02, result1 wz
24874     28 00 90 AD |  if_e	jmp	#LR__3480
24878     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2487c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24880     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24884     BC BF BF FD | 	call	#__system___lockmem
24888     0A 13 02 F6 | 	mov	arg01, arg02
2488c     14 00 B0 FD | 	call	#__system___gc_dofree
24890     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24894     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24898     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2489c     09 01 68 FC | 	wrlong	#0, arg01
248a0                 | LR__3480
248a0                 | __system___gc_free_ret
248a0     2D 00 64 FD | 	ret
248a4                 | 
248a4                 | __system___gc_dofree
248a4     06 4A 05 F6 | 	mov	COUNT_, #6
248a8     A8 00 A0 FD | 	call	#pushregs_
248ac     09 1F 02 F6 | 	mov	local01, arg01
248b0     1C FC BF FD | 	call	#__system___gc_ptrs
248b4     FD 20 02 F6 | 	mov	local02, result1
248b8     FE 22 02 F6 | 	mov	local03, result2
248bc     0F 15 02 F6 | 	mov	arg02, local01
248c0     02 14 06 F1 | 	add	arg02, #2
248c4     36 00 80 FF 
248c8     0A 1F 59 FC | 	wrword	##27791, arg02
248cc     0F 25 02 F6 | 	mov	local04, local01
248d0     0F 13 02 F6 | 	mov	arg01, local01
248d4     09 27 EA FA | 	rdword	local05, arg01 wz
248d8     00 FA 05 A6 |  if_e	mov	result1, #0
248dc     04 26 66 50 |  if_ne	shl	local05, #4
248e0     13 13 02 51 |  if_ne	add	arg01, local05
248e4     09 FB 01 56 |  if_ne	mov	result1, arg01
248e8     FD 28 02 F6 | 	mov	local06, result1
248ec     97 24 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
248f0                 | LR__3490
248f0     04 24 06 F1 | 	add	local04, #4
248f4     12 15 EA FA | 	rdword	arg02, local04 wz
248f8     10 13 02 F6 | 	mov	arg01, local02
248fc     00 FA 05 A6 |  if_e	mov	result1, #0
24900     04 14 66 50 |  if_ne	shl	arg02, #4
24904     0A 13 02 51 |  if_ne	add	arg01, arg02
24908     09 FB 01 56 |  if_ne	mov	result1, arg01
2490c     FD 24 0A F6 | 	mov	local04, result1 wz
24910     24 00 90 AD |  if_e	jmp	#LR__3492
24914     12 13 02 F6 | 	mov	arg01, local04
24918     00 FA 05 F6 | 	mov	result1, #0
2491c     02 12 06 F1 | 	add	arg01, #2
24920     09 13 E2 FA | 	rdword	arg01, arg01
24924     36 00 00 FF 
24928     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2492c     01 FA 65 A6 |  if_e	neg	result1, #1
24930     00 FA 0D F2 | 	cmp	result1, #0 wz
24934     B8 FF 9F AD |  if_e	jmp	#LR__3490
24938                 | LR__3491
24938                 | LR__3492
24938     00 24 0E F2 | 	cmp	local04, #0 wz
2493c     10 25 02 A6 |  if_e	mov	local04, local02
24940     12 15 02 F6 | 	mov	arg02, local04
24944     06 14 06 F1 | 	add	arg02, #6
24948     0F 13 02 F6 | 	mov	arg01, local01
2494c     0A 15 E2 FA | 	rdword	arg02, arg02
24950     06 12 06 F1 | 	add	arg01, #6
24954     09 15 52 FC | 	wrword	arg02, arg01
24958     0F 15 0A F6 | 	mov	arg02, local01 wz
2495c     00 FA 05 A6 |  if_e	mov	result1, #0
24960     10 15 82 51 |  if_ne	sub	arg02, local02
24964     04 14 46 50 |  if_ne	shr	arg02, #4
24968     0A FB 01 56 |  if_ne	mov	result1, arg02
2496c     12 15 02 F6 | 	mov	arg02, local04
24970     06 14 06 F1 | 	add	arg02, #6
24974     0A FB 51 FC | 	wrword	result1, arg02
24978     10 25 0A F2 | 	cmp	local04, local02 wz
2497c     A4 00 90 AD |  if_e	jmp	#LR__3495
24980     12 13 02 F6 | 	mov	arg01, local04
24984     09 27 EA FA | 	rdword	local05, arg01 wz
24988     00 FA 05 A6 |  if_e	mov	result1, #0
2498c     04 26 66 50 |  if_ne	shl	local05, #4
24990     13 13 02 51 |  if_ne	add	arg01, local05
24994     09 FB 01 56 |  if_ne	mov	result1, arg01
24998     0F FB 09 F2 | 	cmp	result1, local01 wz
2499c     84 00 90 5D |  if_ne	jmp	#LR__3494
249a0     12 29 E2 FA | 	rdword	local06, local04
249a4     0F 15 E2 FA | 	rdword	arg02, local01
249a8     0A 29 02 F1 | 	add	local06, arg02
249ac     12 29 52 FC | 	wrword	local06, local04
249b0     0F 29 02 F6 | 	mov	local06, local01
249b4     02 28 06 F1 | 	add	local06, #2
249b8     14 01 58 FC | 	wrword	#0, local06
249bc     0F 13 02 F6 | 	mov	arg01, local01
249c0     09 27 EA FA | 	rdword	local05, arg01 wz
249c4     00 FA 05 A6 |  if_e	mov	result1, #0
249c8     04 26 66 50 |  if_ne	shl	local05, #4
249cc     13 13 02 51 |  if_ne	add	arg01, local05
249d0     09 FB 01 56 |  if_ne	mov	result1, arg01
249d4     FD 28 02 F6 | 	mov	local06, result1
249d8     11 29 52 F2 | 	cmps	local06, local03 wc
249dc     20 00 90 3D |  if_ae	jmp	#LR__3493
249e0     12 15 0A F6 | 	mov	arg02, local04 wz
249e4     00 FA 05 A6 |  if_e	mov	result1, #0
249e8     10 15 82 51 |  if_ne	sub	arg02, local02
249ec     04 14 46 50 |  if_ne	shr	arg02, #4
249f0     0A FB 01 56 |  if_ne	mov	result1, arg02
249f4     14 15 02 F6 | 	mov	arg02, local06
249f8     04 14 06 F1 | 	add	arg02, #4
249fc     0A FB 51 FC | 	wrword	result1, arg02
24a00                 | LR__3493
24a00     0F 15 02 F6 | 	mov	arg02, local01
24a04     06 14 06 F1 | 	add	arg02, #6
24a08     12 FD 01 F6 | 	mov	result2, local04
24a0c     0A 15 E2 FA | 	rdword	arg02, arg02
24a10     06 FC 05 F1 | 	add	result2, #6
24a14     FE 14 52 FC | 	wrword	arg02, result2
24a18     06 1E 06 F1 | 	add	local01, #6
24a1c     0F 01 58 FC | 	wrword	#0, local01
24a20     12 1F 02 F6 | 	mov	local01, local04
24a24                 | LR__3494
24a24                 | LR__3495
24a24     0F 13 02 F6 | 	mov	arg01, local01
24a28     09 27 EA FA | 	rdword	local05, arg01 wz
24a2c     00 FA 05 A6 |  if_e	mov	result1, #0
24a30     04 26 66 50 |  if_ne	shl	local05, #4
24a34     13 13 02 51 |  if_ne	add	arg01, local05
24a38     09 FB 01 56 |  if_ne	mov	result1, arg01
24a3c     FD 14 0A F6 | 	mov	arg02, result1 wz
24a40     B8 00 90 AD |  if_e	jmp	#LR__3497
24a44     11 15 52 F2 | 	cmps	arg02, local03 wc
24a48     B0 00 90 3D |  if_ae	jmp	#LR__3497
24a4c     0A 13 02 F6 | 	mov	arg01, arg02
24a50     00 FA 05 F6 | 	mov	result1, #0
24a54     02 12 06 F1 | 	add	arg01, #2
24a58     09 13 E2 FA | 	rdword	arg01, arg01
24a5c     36 00 00 FF 
24a60     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24a64     01 FA 65 A6 |  if_e	neg	result1, #1
24a68     00 FA 0D F2 | 	cmp	result1, #0 wz
24a6c     8C 00 90 AD |  if_e	jmp	#LR__3497
24a70     0F 25 02 F6 | 	mov	local04, local01
24a74     12 29 E2 FA | 	rdword	local06, local04
24a78     0A 13 02 F6 | 	mov	arg01, arg02
24a7c     09 1F E2 FA | 	rdword	local01, arg01
24a80     0F 29 02 F1 | 	add	local06, local01
24a84     12 29 52 FC | 	wrword	local06, local04
24a88     09 29 02 F6 | 	mov	local06, arg01
24a8c     06 28 06 F1 | 	add	local06, #6
24a90     12 1F 02 F6 | 	mov	local01, local04
24a94     14 29 E2 FA | 	rdword	local06, local06
24a98     06 1E 06 F1 | 	add	local01, #6
24a9c     0F 29 52 FC | 	wrword	local06, local01
24aa0     09 29 02 F6 | 	mov	local06, arg01
24aa4     02 28 06 F1 | 	add	local06, #2
24aa8     14 55 59 FC | 	wrword	#170, local06
24aac     09 29 02 F6 | 	mov	local06, arg01
24ab0     06 28 06 F1 | 	add	local06, #6
24ab4     14 01 58 FC | 	wrword	#0, local06
24ab8     09 27 EA FA | 	rdword	local05, arg01 wz
24abc     00 FA 05 A6 |  if_e	mov	result1, #0
24ac0     04 26 66 50 |  if_ne	shl	local05, #4
24ac4     13 13 02 51 |  if_ne	add	arg01, local05
24ac8     09 FB 01 56 |  if_ne	mov	result1, arg01
24acc     FD 28 0A F6 | 	mov	local06, result1 wz
24ad0     28 00 90 AD |  if_e	jmp	#LR__3496
24ad4     11 29 52 F2 | 	cmps	local06, local03 wc
24ad8     20 00 90 3D |  if_ae	jmp	#LR__3496
24adc     12 15 0A F6 | 	mov	arg02, local04 wz
24ae0     00 FA 05 A6 |  if_e	mov	result1, #0
24ae4     10 15 82 51 |  if_ne	sub	arg02, local02
24ae8     04 14 46 50 |  if_ne	shr	arg02, #4
24aec     0A FB 01 56 |  if_ne	mov	result1, arg02
24af0     14 25 02 F6 | 	mov	local04, local06
24af4     04 24 06 F1 | 	add	local04, #4
24af8     12 FB 51 FC | 	wrword	result1, local04
24afc                 | LR__3496
24afc                 | LR__3497
24afc     14 FB 01 F6 | 	mov	result1, local06
24b00     A7 F0 03 F6 | 	mov	ptra, fp
24b04     B2 00 A0 FD | 	call	#popregs_
24b08                 | __system___gc_dofree_ret
24b08     2D 00 64 FD | 	ret
24b0c                 | 
24b0c                 | __system___gc_docollect
24b0c     05 4A 05 F6 | 	mov	COUNT_, #5
24b10     A8 00 A0 FD | 	call	#pushregs_
24b14     B8 F9 BF FD | 	call	#__system___gc_ptrs
24b18     FE 1E 02 F6 | 	mov	local01, result2
24b1c     FD 20 02 F6 | 	mov	local02, result1
24b20     10 13 02 F6 | 	mov	arg01, local02
24b24     09 23 EA FA | 	rdword	local03, arg01 wz
24b28     00 FA 05 A6 |  if_e	mov	result1, #0
24b2c     04 22 66 50 |  if_ne	shl	local03, #4
24b30     11 13 02 51 |  if_ne	add	arg01, local03
24b34     09 FB 01 56 |  if_ne	mov	result1, arg01
24b38     FD 24 0A F6 | 	mov	local04, result1 wz
24b3c     00 FA 05 F6 | 	mov	result1, #0
24b40     01 FA 61 FD | 	cogid	result1
24b44     FD 26 02 F6 | 	mov	local05, result1
24b48     48 00 90 AD |  if_e	jmp	#LR__3502
24b4c     97 22 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
24b50                 | LR__3500
24b50     0F 25 52 F2 | 	cmps	local04, local01 wc
24b54     3C 00 90 3D |  if_ae	jmp	#LR__3502
24b58     12 15 02 F6 | 	mov	arg02, local04
24b5c     02 14 06 F1 | 	add	arg02, #2
24b60     0A 15 E2 FA | 	rdword	arg02, arg02
24b64     20 14 26 F5 | 	andn	arg02, #32
24b68     12 13 02 F6 | 	mov	arg01, local04
24b6c     02 12 06 F1 | 	add	arg01, #2
24b70     09 15 52 FC | 	wrword	arg02, arg01
24b74     12 13 02 F6 | 	mov	arg01, local04
24b78     09 23 EA FA | 	rdword	local03, arg01 wz
24b7c     00 FA 05 A6 |  if_e	mov	result1, #0
24b80     04 22 66 50 |  if_ne	shl	local03, #4
24b84     11 13 02 51 |  if_ne	add	arg01, local03
24b88     09 FB 01 56 |  if_ne	mov	result1, arg01
24b8c     FD 24 0A F6 | 	mov	local04, result1 wz
24b90     BC FF 9F 5D |  if_ne	jmp	#LR__3500
24b94                 | LR__3501
24b94                 | LR__3502
24b94     00 22 06 F6 | 	mov	local03, #0
24b98     00 12 06 F6 | 	mov	arg01, #0
24b9c     7C BC BF FD | 	call	#__system____topofstack
24ba0     FD 14 02 F6 | 	mov	arg02, result1
24ba4     11 13 02 F6 | 	mov	arg01, local03
24ba8     90 00 B0 FD | 	call	#__system___gc_markhub
24bac     1C 01 B0 FD | 	call	#__system___gc_markcog
24bb0     10 13 02 F6 | 	mov	arg01, local02
24bb4     09 23 EA FA | 	rdword	local03, arg01 wz
24bb8     00 FA 05 A6 |  if_e	mov	result1, #0
24bbc     04 22 66 50 |  if_ne	shl	local03, #4
24bc0     11 13 02 51 |  if_ne	add	arg01, local03
24bc4     09 FB 01 56 |  if_ne	mov	result1, arg01
24bc8     FD 20 0A F6 | 	mov	local02, result1 wz
24bcc     60 00 90 AD |  if_e	jmp	#LR__3506
24bd0                 | LR__3503
24bd0     10 25 02 F6 | 	mov	local04, local02
24bd4     12 13 02 F6 | 	mov	arg01, local04
24bd8     09 23 EA FA | 	rdword	local03, arg01 wz
24bdc     00 FA 05 A6 |  if_e	mov	result1, #0
24be0     04 22 66 50 |  if_ne	shl	local03, #4
24be4     11 13 02 51 |  if_ne	add	arg01, local03
24be8     09 FB 01 56 |  if_ne	mov	result1, arg01
24bec     FD 20 02 F6 | 	mov	local02, result1
24bf0     12 15 02 F6 | 	mov	arg02, local04
24bf4     02 14 06 F1 | 	add	arg02, #2
24bf8     0A 15 E2 FA | 	rdword	arg02, arg02
24bfc     20 14 CE F7 | 	test	arg02, #32 wz
24c00     10 14 CE A7 |  if_e	test	arg02, #16 wz
24c04     1C 00 90 5D |  if_ne	jmp	#LR__3505
24c08     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24c0c     13 15 0A F2 | 	cmp	arg02, local05 wz
24c10     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24c14     0C 00 90 5D |  if_ne	jmp	#LR__3504
24c18     12 13 02 F6 | 	mov	arg01, local04
24c1c     84 FC BF FD | 	call	#__system___gc_dofree
24c20     FD 20 02 F6 | 	mov	local02, result1
24c24                 | LR__3504
24c24                 | LR__3505
24c24     00 20 0E F2 | 	cmp	local02, #0 wz
24c28     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24c2c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3503
24c30                 | LR__3506
24c30     A7 F0 03 F6 | 	mov	ptra, fp
24c34     B2 00 A0 FD | 	call	#popregs_
24c38                 | __system___gc_docollect_ret
24c38     2D 00 64 FD | 	ret
24c3c                 | 
24c3c                 | __system___gc_markhub
24c3c     04 4A 05 F6 | 	mov	COUNT_, #4
24c40     A8 00 A0 FD | 	call	#pushregs_
24c44     09 1F 02 F6 | 	mov	local01, arg01
24c48     0A 21 02 F6 | 	mov	local02, arg02
24c4c     80 F8 BF FD | 	call	#__system___gc_ptrs
24c50     FD 22 02 F6 | 	mov	local03, result1
24c54     FE 24 02 F6 | 	mov	local04, result2
24c58                 | LR__3510
24c58     10 1F 52 F2 | 	cmps	local01, local02 wc
24c5c     60 00 90 3D |  if_ae	jmp	#LR__3511
24c60     0F 17 02 FB | 	rdlong	arg03, local01
24c64     04 1E 06 F1 | 	add	local01, #4
24c68     12 15 02 F6 | 	mov	arg02, local04
24c6c     11 13 02 F6 | 	mov	arg01, local03
24c70     8C FB BF FD | 	call	#__system___gc_isvalidptr
24c74     FD 16 0A F6 | 	mov	arg03, result1 wz
24c78     DC FF 9F AD |  if_e	jmp	#LR__3510
24c7c     0B 13 02 F6 | 	mov	arg01, arg03
24c80     00 FA 05 F6 | 	mov	result1, #0
24c84     02 12 06 F1 | 	add	arg01, #2
24c88     09 13 E2 FA | 	rdword	arg01, arg01
24c8c     36 00 00 FF 
24c90     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24c94     01 FA 65 A6 |  if_e	neg	result1, #1
24c98     00 FA 0D F2 | 	cmp	result1, #0 wz
24c9c     B8 FF 9F 5D |  if_ne	jmp	#LR__3510
24ca0     0B FD 01 F6 | 	mov	result2, arg03
24ca4     02 FC 05 F1 | 	add	result2, #2
24ca8     FE FC E1 FA | 	rdword	result2, result2
24cac     0F FC 25 F5 | 	andn	result2, #15
24cb0     2E FC 45 F5 | 	or	result2, #46
24cb4     02 16 06 F1 | 	add	arg03, #2
24cb8     0B FD 51 FC | 	wrword	result2, arg03
24cbc     98 FF 9F FD | 	jmp	#LR__3510
24cc0                 | LR__3511
24cc0     A7 F0 03 F6 | 	mov	ptra, fp
24cc4     B2 00 A0 FD | 	call	#popregs_
24cc8                 | __system___gc_markhub_ret
24cc8     2D 00 64 FD | 	ret
24ccc                 | 
24ccc                 | __system___gc_markcog
24ccc     04 4A 05 F6 | 	mov	COUNT_, #4
24cd0     A8 00 A0 FD | 	call	#pushregs_
24cd4     F8 F7 BF FD | 	call	#__system___gc_ptrs
24cd8     FD 1E 02 F6 | 	mov	local01, result1
24cdc     FE 20 02 F6 | 	mov	local02, result2
24ce0     EF 23 06 F6 | 	mov	local03, #495
24ce4                 | LR__3520
24ce4                 | 	'.live	local03
24ce4     00 22 96 F9 | 	alts	local03, #0
24ce8     11 25 02 F6 | 	mov	local04, local03
24cec     0F 13 02 F6 | 	mov	arg01, local01
24cf0     10 15 02 F6 | 	mov	arg02, local02
24cf4     12 17 02 F6 | 	mov	arg03, local04
24cf8     04 FB BF FD | 	call	#__system___gc_isvalidptr
24cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
24d00     18 00 90 AD |  if_e	jmp	#LR__3521
24d04     FD 24 02 F6 | 	mov	local04, result1
24d08     02 24 06 F1 | 	add	local04, #2
24d0c     12 25 E2 FA | 	rdword	local04, local04
24d10     20 24 46 F5 | 	or	local04, #32
24d14     02 FA 05 F1 | 	add	result1, #2
24d18     FD 24 52 FC | 	wrword	local04, result1
24d1c                 | LR__3521
24d1c     01 22 86 F1 | 	sub	local03, #1
24d20     00 22 56 F2 | 	cmps	local03, #0 wc
24d24     BC FF 9F 3D |  if_ae	jmp	#LR__3520
24d28     A7 F0 03 F6 | 	mov	ptra, fp
24d2c     B2 00 A0 FD | 	call	#popregs_
24d30                 | __system___gc_markcog_ret
24d30     2D 00 64 FD | 	ret
24d34                 | 
24d34                 | __system__opendir
24d34     06 4A 05 F6 | 	mov	COUNT_, #6
24d38     A8 00 A0 FD | 	call	#pushregs_
24d3c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24d40     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24d44     09 15 02 F6 | 	mov	arg02, arg01
24d48     0F 13 02 F6 | 	mov	arg01, local01
24d4c     00 16 06 F6 | 	mov	arg03, #0
24d50     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24d54     84 C2 BF FD | 	call	#__system____getvfsforfile
24d58     FD 20 0A F6 | 	mov	local02, result1 wz
24d5c     10 00 90 AD |  if_e	jmp	#LR__3530
24d60     28 20 06 F1 | 	add	local02, #40
24d64     10 17 0A FB | 	rdlong	arg03, local02 wz
24d68     28 20 86 F1 | 	sub	local02, #40
24d6c     14 00 90 5D |  if_ne	jmp	#LR__3531
24d70                 | LR__3530
24d70     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24d74     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24d78     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24d7c     00 FA 05 F6 | 	mov	result1, #0
24d80     90 00 90 FD | 	jmp	#LR__3533
24d84                 | LR__3531
24d84     5C 12 06 F6 | 	mov	arg01, #92
24d88     10 14 06 F6 | 	mov	arg02, #16
24d8c     C0 F9 BF FD | 	call	#__system___gc_doalloc
24d90     FD 22 0A F6 | 	mov	local03, result1 wz
24d94     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24d98     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24d9c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24da0     00 FA 05 A6 |  if_e	mov	result1, #0
24da4     6C 00 90 AD |  if_e	jmp	#LR__3533
24da8     28 20 06 F1 | 	add	local02, #40
24dac     10 25 02 FB | 	rdlong	local04, local02
24db0     12 27 02 F6 | 	mov	local05, local04
24db4     28 20 86 F1 | 	sub	local02, #40
24db8     13 26 46 F7 | 	zerox	local05, #19
24dbc     14 24 46 F0 | 	shr	local04, #20
24dc0     02 24 66 F0 | 	shl	local04, #2
24dc4     ED 24 02 F1 | 	add	local04, __methods__
24dc8     12 25 02 FB | 	rdlong	local04, local04
24dcc     11 13 02 F6 | 	mov	arg01, local03
24dd0     0F 15 02 F6 | 	mov	arg02, local01
24dd4     F2 28 02 F6 | 	mov	local06, objptr
24dd8     13 E5 01 F6 | 	mov	objptr, local05
24ddc     2D 24 62 FD | 	call	local04
24de0     14 E5 01 F6 | 	mov	objptr, local06
24de4     FD 16 0A F6 | 	mov	arg03, result1 wz
24de8     20 00 90 AD |  if_e	jmp	#LR__3532
24dec     00 16 4E F2 | 	cmps	arg03, #0 wz
24df0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24df4     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24df8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24dfc     11 13 02 F6 | 	mov	arg01, local03
24e00     58 FA BF FD | 	call	#__system___gc_free
24e04     00 FA 05 F6 | 	mov	result1, #0
24e08     08 00 90 FD | 	jmp	#LR__3533
24e0c                 | LR__3532
24e0c     11 21 62 FC | 	wrlong	local02, local03
24e10     11 FB 01 F6 | 	mov	result1, local03
24e14                 | LR__3533
24e14     A7 F0 03 F6 | 	mov	ptra, fp
24e18     B2 00 A0 FD | 	call	#popregs_
24e1c                 | __system__opendir_ret
24e1c     2D 00 64 FD | 	ret
24e20                 | 
24e20                 | __system__closedir
24e20     04 4A 05 F6 | 	mov	COUNT_, #4
24e24     A8 00 A0 FD | 	call	#pushregs_
24e28     09 1F 02 F6 | 	mov	local01, arg01
24e2c     0F 13 02 FB | 	rdlong	arg01, local01
24e30     2C 12 06 F1 | 	add	arg01, #44
24e34     09 21 02 FB | 	rdlong	local02, arg01
24e38     10 23 02 F6 | 	mov	local03, local02
24e3c     13 22 46 F7 | 	zerox	local03, #19
24e40     14 20 46 F0 | 	shr	local02, #20
24e44     02 20 66 F0 | 	shl	local02, #2
24e48     ED 20 02 F1 | 	add	local02, __methods__
24e4c     10 21 02 FB | 	rdlong	local02, local02
24e50     0F 13 02 F6 | 	mov	arg01, local01
24e54     F2 24 02 F6 | 	mov	local04, objptr
24e58     11 E5 01 F6 | 	mov	objptr, local03
24e5c     2D 20 62 FD | 	call	local02
24e60     12 E5 01 F6 | 	mov	objptr, local04
24e64     FD 24 02 F6 | 	mov	local04, result1
24e68     0F 13 02 F6 | 	mov	arg01, local01
24e6c     EC F9 BF FD | 	call	#__system___gc_free
24e70     00 24 4E F2 | 	cmps	local04, #0 wz
24e74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e78     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
24e7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e80     01 FA 65 56 |  if_ne	neg	result1, #1
24e84     00 FA 05 A6 |  if_e	mov	result1, #0
24e88     A7 F0 03 F6 | 	mov	ptra, fp
24e8c     B2 00 A0 FD | 	call	#popregs_
24e90                 | __system__closedir_ret
24e90     2D 00 64 FD | 	ret
24e94                 | 
24e94                 | __system__readdir
24e94     04 4A 05 F6 | 	mov	COUNT_, #4
24e98     A8 00 A0 FD | 	call	#pushregs_
24e9c     09 15 0A FB | 	rdlong	arg02, arg01 wz
24ea0     08 12 06 F1 | 	add	arg01, #8
24ea4     09 1F 02 F6 | 	mov	local01, arg01
24ea8     08 12 86 F1 | 	sub	arg01, #8
24eac     00 FA 05 A6 |  if_e	mov	result1, #0
24eb0     5C 00 90 AD |  if_e	jmp	#LR__3541
24eb4     30 14 06 F1 | 	add	arg02, #48
24eb8     0A 21 02 FB | 	rdlong	local02, arg02
24ebc     10 23 02 F6 | 	mov	local03, local02
24ec0     13 22 46 F7 | 	zerox	local03, #19
24ec4     14 20 46 F0 | 	shr	local02, #20
24ec8     02 20 66 F0 | 	shl	local02, #2
24ecc     ED 20 02 F1 | 	add	local02, __methods__
24ed0     10 21 02 FB | 	rdlong	local02, local02
24ed4     0F 15 02 F6 | 	mov	arg02, local01
24ed8     F2 24 02 F6 | 	mov	local04, objptr
24edc     11 E5 01 F6 | 	mov	objptr, local03
24ee0     2D 20 62 FD | 	call	local02
24ee4     12 E5 01 F6 | 	mov	objptr, local04
24ee8     00 FA 4D F2 | 	cmps	result1, #0 wz
24eec     1C 00 90 AD |  if_e	jmp	#LR__3540
24ef0     01 FA 55 F2 | 	cmps	result1, #1 wc
24ef4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
24ef8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24efc     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
24f00     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24f04     00 FA 05 F6 | 	mov	result1, #0
24f08     04 00 90 FD | 	jmp	#LR__3541
24f0c                 | LR__3540
24f0c     0F FB 01 F6 | 	mov	result1, local01
24f10                 | LR__3541
24f10     A7 F0 03 F6 | 	mov	ptra, fp
24f14     B2 00 A0 FD | 	call	#popregs_
24f18                 | __system__readdir_ret
24f18     2D 00 64 FD | 	ret
24f1c                 | 
24f1c                 | __system___openraw
24f1c     15 4A 05 F6 | 	mov	COUNT_, #21
24f20     A8 00 A0 FD | 	call	#pushregs_
24f24     09 1F 02 F6 | 	mov	local01, arg01
24f28     0A 21 02 F6 | 	mov	local02, arg02
24f2c     0B 23 02 F6 | 	mov	local03, arg03
24f30     0C 25 02 F6 | 	mov	local04, arg04
24f34     04 26 06 F6 | 	mov	local05, #4
24f38     0F 29 02 F6 | 	mov	local06, local01
24f3c     00 2A 06 F6 | 	mov	local07, #0
24f40     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24f44     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
24f48     16 13 02 F6 | 	mov	arg01, local08
24f4c     10 15 02 F6 | 	mov	arg02, local02
24f50     00 16 06 F6 | 	mov	arg03, #0
24f54     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24f58     80 C0 BF FD | 	call	#__system____getvfsforfile
24f5c     FD 2E 0A F6 | 	mov	local09, result1 wz
24f60     10 00 90 AD |  if_e	jmp	#LR__3550
24f64     20 2E 06 F1 | 	add	local09, #32
24f68     17 FB 09 FB | 	rdlong	result1, local09 wz
24f6c     20 2E 86 F1 | 	sub	local09, #32
24f70     14 00 90 5D |  if_ne	jmp	#LR__3551
24f74                 | LR__3550
24f74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f78     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24f7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f80     01 FA 65 F6 | 	neg	result1, #1
24f84     8C 02 90 FD | 	jmp	#LR__3564
24f88                 | LR__3551
24f88     14 13 02 F6 | 	mov	arg01, local06
24f8c     00 14 06 F6 | 	mov	arg02, #0
24f90     34 16 06 F6 | 	mov	arg03, #52
24f94     09 31 02 F6 | 	mov	local10, arg01
24f98     98 00 A0 FD | 	call	#\builtin_bytefill_
24f9c     20 2E 06 F1 | 	add	local09, #32
24fa0     17 33 02 FB | 	rdlong	local11, local09
24fa4     19 35 02 F6 | 	mov	local12, local11
24fa8     19 37 02 F6 | 	mov	local13, local11
24fac     20 2E 86 F1 | 	sub	local09, #32
24fb0     1B 39 02 F6 | 	mov	local14, local13
24fb4     13 34 46 F7 | 	zerox	local12, #19
24fb8     14 38 46 F0 | 	shr	local14, #20
24fbc     02 38 66 F0 | 	shl	local14, #2
24fc0     ED 38 02 F1 | 	add	local14, __methods__
24fc4     1C 39 02 FB | 	rdlong	local14, local14
24fc8     14 3B 02 F6 | 	mov	local15, local06
24fcc     16 3D 02 F6 | 	mov	local16, local08
24fd0     11 3F 02 F6 | 	mov	local17, local03
24fd4     1D 13 02 F6 | 	mov	arg01, local15
24fd8     1E 15 02 F6 | 	mov	arg02, local16
24fdc     1F 17 02 F6 | 	mov	arg03, local17
24fe0     F2 40 02 F6 | 	mov	local18, objptr
24fe4     1A E5 01 F6 | 	mov	objptr, local12
24fe8     2D 38 62 FD | 	call	local14
24fec     20 E5 01 F6 | 	mov	objptr, local18
24ff0     FD 42 0A F6 | 	mov	local19, result1 wz
24ff4     04 22 CE 57 |  if_ne	test	local03, #4 wz
24ff8     58 00 90 AD |  if_e	jmp	#LR__3552
24ffc     24 2E 06 F1 | 	add	local09, #36
25000     17 33 02 FB | 	rdlong	local11, local09
25004     19 35 02 F6 | 	mov	local12, local11
25008     19 37 02 F6 | 	mov	local13, local11
2500c     24 2E 86 F1 | 	sub	local09, #36
25010     1B 39 02 F6 | 	mov	local14, local13
25014     13 34 46 F7 | 	zerox	local12, #19
25018     14 38 46 F0 | 	shr	local14, #20
2501c     02 38 66 F0 | 	shl	local14, #2
25020     ED 38 02 F1 | 	add	local14, __methods__
25024     1C 39 02 FB | 	rdlong	local14, local14
25028     14 3B 02 F6 | 	mov	local15, local06
2502c     16 3D 02 F6 | 	mov	local16, local08
25030     12 3F 02 F6 | 	mov	local17, local04
25034     1D 13 02 F6 | 	mov	arg01, local15
25038     1E 15 02 F6 | 	mov	arg02, local16
2503c     1F 17 02 F6 | 	mov	arg03, local17
25040     F2 40 02 F6 | 	mov	local18, objptr
25044     1A E5 01 F6 | 	mov	objptr, local12
25048     2D 38 62 FD | 	call	local14
2504c     20 E5 01 F6 | 	mov	objptr, local18
25050     FD 42 02 F6 | 	mov	local19, result1
25054                 | LR__3552
25054     00 42 0E F2 | 	cmp	local19, #0 wz
25058     8C 01 90 5D |  if_ne	jmp	#LR__3562
2505c     11 45 02 F6 | 	mov	local20, local03
25060     03 44 0E F5 | 	and	local20, #3 wz
25064     02 26 46 55 |  if_ne	or	local05, #2
25068     01 44 0E F2 | 	cmp	local20, #1 wz
2506c     01 26 46 55 |  if_ne	or	local05, #1
25070     20 22 CE F7 | 	test	local03, #32 wz
25074     C0 26 46 55 |  if_ne	or	local05, #192
25078     08 28 06 F1 | 	add	local06, #8
2507c     14 27 62 FC | 	wrlong	local05, local06
25080     0C 28 06 F1 | 	add	local06, #12
25084     14 47 0A FB | 	rdlong	local21, local06 wz
25088     14 28 86 F1 | 	sub	local06, #20
2508c     18 00 90 5D |  if_ne	jmp	#LR__3553
25090     04 2E 06 F1 | 	add	local09, #4
25094     17 47 02 FB | 	rdlong	local21, local09
25098     04 2E 86 F1 | 	sub	local09, #4
2509c     14 28 06 F1 | 	add	local06, #20
250a0     14 47 62 FC | 	wrlong	local21, local06
250a4     14 28 86 F1 | 	sub	local06, #20
250a8                 | LR__3553
250a8     18 28 06 F1 | 	add	local06, #24
250ac     14 47 0A FB | 	rdlong	local21, local06 wz
250b0     18 28 86 F1 | 	sub	local06, #24
250b4     18 00 90 5D |  if_ne	jmp	#LR__3554
250b8     08 2E 06 F1 | 	add	local09, #8
250bc     17 47 02 FB | 	rdlong	local21, local09
250c0     08 2E 86 F1 | 	sub	local09, #8
250c4     18 28 06 F1 | 	add	local06, #24
250c8     14 47 62 FC | 	wrlong	local21, local06
250cc     18 28 86 F1 | 	sub	local06, #24
250d0                 | LR__3554
250d0     24 28 06 F1 | 	add	local06, #36
250d4     14 47 0A FB | 	rdlong	local21, local06 wz
250d8     24 28 86 F1 | 	sub	local06, #36
250dc     17 47 02 AB |  if_e	rdlong	local21, local09
250e0     24 28 06 A1 |  if_e	add	local06, #36
250e4     14 47 62 AC |  if_e	wrlong	local21, local06
250e8     24 28 86 A1 |  if_e	sub	local06, #36
250ec     28 28 06 F1 | 	add	local06, #40
250f0     14 47 0A FB | 	rdlong	local21, local06 wz
250f4     28 28 86 F1 | 	sub	local06, #40
250f8     18 00 90 5D |  if_ne	jmp	#LR__3555
250fc     10 2E 06 F1 | 	add	local09, #16
25100     17 47 02 FB | 	rdlong	local21, local09
25104     10 2E 86 F1 | 	sub	local09, #16
25108     28 28 06 F1 | 	add	local06, #40
2510c     14 47 62 FC | 	wrlong	local21, local06
25110     28 28 86 F1 | 	sub	local06, #40
25114                 | LR__3555
25114     30 28 06 F1 | 	add	local06, #48
25118     14 47 0A FB | 	rdlong	local21, local06 wz
2511c     30 28 86 F1 | 	sub	local06, #48
25120     18 00 90 5D |  if_ne	jmp	#LR__3556
25124     0C 2E 06 F1 | 	add	local09, #12
25128     17 47 02 FB | 	rdlong	local21, local09
2512c     0C 2E 86 F1 | 	sub	local09, #12
25130     30 28 06 F1 | 	add	local06, #48
25134     14 47 62 FC | 	wrlong	local21, local06
25138     30 28 86 F1 | 	sub	local06, #48
2513c                 | LR__3556
2513c     1C 28 06 F1 | 	add	local06, #28
25140     14 47 0A FB | 	rdlong	local21, local06 wz
25144     1C 28 86 F1 | 	sub	local06, #28
25148     1C 00 90 5D |  if_ne	jmp	#LR__3557
2514c     01 2A 06 F6 | 	mov	local07, #1
25150     F2 12 02 F6 | 	mov	arg01, objptr
25154     00 C8 04 FF 
25158     00 12 46 F5 | 	or	arg01, ##160432128
2515c     1C 28 06 F1 | 	add	local06, #28
25160     14 13 62 FC | 	wrlong	arg01, local06
25164     1C 28 86 F1 | 	sub	local06, #28
25168                 | LR__3557
25168     20 28 06 F1 | 	add	local06, #32
2516c     14 47 0A FB | 	rdlong	local21, local06 wz
25170     20 28 86 F1 | 	sub	local06, #32
25174     1C 00 90 5D |  if_ne	jmp	#LR__3558
25178     01 2A 06 F6 | 	mov	local07, #1
2517c     F2 12 02 F6 | 	mov	arg01, objptr
25180     00 D0 04 FF 
25184     00 12 46 F5 | 	or	arg01, ##161480704
25188     20 28 06 F1 | 	add	local06, #32
2518c     14 13 62 FC | 	wrlong	arg01, local06
25190     20 28 86 F1 | 	sub	local06, #32
25194                 | LR__3558
25194     2C 28 06 F1 | 	add	local06, #44
25198     14 47 0A FB | 	rdlong	local21, local06 wz
2519c     2C 28 86 F1 | 	sub	local06, #44
251a0     44 00 90 5D |  if_ne	jmp	#LR__3561
251a4     14 2E 06 F1 | 	add	local09, #20
251a8     17 47 0A FB | 	rdlong	local21, local09 wz
251ac     14 2E 86 F1 | 	sub	local09, #20
251b0     18 00 90 AD |  if_e	jmp	#LR__3559
251b4     14 2E 06 F1 | 	add	local09, #20
251b8     17 47 02 FB | 	rdlong	local21, local09
251bc     2C 28 06 F1 | 	add	local06, #44
251c0     14 47 62 FC | 	wrlong	local21, local06
251c4     2C 28 86 F1 | 	sub	local06, #44
251c8     1C 00 90 FD | 	jmp	#LR__3560
251cc                 | LR__3559
251cc     01 2A 06 F6 | 	mov	local07, #1
251d0     F2 12 02 F6 | 	mov	arg01, objptr
251d4     00 D8 04 FF 
251d8     00 12 46 F5 | 	or	arg01, ##162529280
251dc     2C 28 06 F1 | 	add	local06, #44
251e0     14 13 62 FC | 	wrlong	arg01, local06
251e4     2C 28 86 F1 | 	sub	local06, #44
251e8                 | LR__3560
251e8                 | LR__3561
251e8                 | LR__3562
251e8     00 2A 0E F2 | 	cmp	local07, #0 wz
251ec     14 13 02 56 |  if_ne	mov	arg01, local06
251f0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
251f4     00 42 0E F2 | 	cmp	local19, #0 wz
251f8     00 12 06 A6 |  if_e	mov	arg01, #0
251fc     10 00 90 5D |  if_ne	jmp	#LR__3563
25200     00 12 4E F2 | 	cmps	arg01, #0 wz
25204     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25208     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2520c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25210                 | LR__3563
25210     21 FB 01 F6 | 	mov	result1, local19
25214                 | LR__3564
25214     A7 F0 03 F6 | 	mov	ptra, fp
25218     B2 00 A0 FD | 	call	#popregs_
2521c                 | __system___openraw_ret
2521c     2D 00 64 FD | 	ret
25220                 | 
25220                 | __system___closeraw
25220     05 4A 05 F6 | 	mov	COUNT_, #5
25224     A8 00 A0 FD | 	call	#pushregs_
25228     09 1F 02 F6 | 	mov	local01, arg01
2522c     00 20 06 F6 | 	mov	local02, #0
25230     08 1E 06 F1 | 	add	local01, #8
25234     0F FB 09 FB | 	rdlong	result1, local01 wz
25238     08 1E 86 F1 | 	sub	local01, #8
2523c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25240     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25244     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25248     01 FA 65 A6 |  if_e	neg	result1, #1
2524c     A8 00 90 AD |  if_e	jmp	#LR__3572
25250     2C 1E 06 F1 | 	add	local01, #44
25254     0F FB 09 FB | 	rdlong	result1, local01 wz
25258     2C 1E 86 F1 | 	sub	local01, #44
2525c     38 00 90 AD |  if_e	jmp	#LR__3570
25260     2C 1E 06 F1 | 	add	local01, #44
25264     0F 23 02 FB | 	rdlong	local03, local01
25268     11 25 02 F6 | 	mov	local04, local03
2526c     2C 1E 86 F1 | 	sub	local01, #44
25270     13 24 46 F7 | 	zerox	local04, #19
25274     14 22 46 F0 | 	shr	local03, #20
25278     02 22 66 F0 | 	shl	local03, #2
2527c     ED 22 02 F1 | 	add	local03, __methods__
25280     11 23 02 FB | 	rdlong	local03, local03
25284     0F 13 02 F6 | 	mov	arg01, local01
25288     F2 26 02 F6 | 	mov	local05, objptr
2528c     12 E5 01 F6 | 	mov	objptr, local04
25290     2D 22 62 FD | 	call	local03
25294     13 E5 01 F6 | 	mov	objptr, local05
25298                 | LR__3570
25298     24 1E 06 F1 | 	add	local01, #36
2529c     0F 27 0A FB | 	rdlong	local05, local01 wz
252a0     24 1E 86 F1 | 	sub	local01, #36
252a4     3C 00 90 AD |  if_e	jmp	#LR__3571
252a8     24 1E 06 F1 | 	add	local01, #36
252ac     0F 23 02 FB | 	rdlong	local03, local01
252b0     11 25 02 F6 | 	mov	local04, local03
252b4     24 1E 86 F1 | 	sub	local01, #36
252b8     13 24 46 F7 | 	zerox	local04, #19
252bc     14 22 46 F0 | 	shr	local03, #20
252c0     02 22 66 F0 | 	shl	local03, #2
252c4     ED 22 02 F1 | 	add	local03, __methods__
252c8     11 23 02 FB | 	rdlong	local03, local03
252cc     0F 13 02 F6 | 	mov	arg01, local01
252d0     F2 26 02 F6 | 	mov	local05, objptr
252d4     12 E5 01 F6 | 	mov	objptr, local04
252d8     2D 22 62 FD | 	call	local03
252dc     13 E5 01 F6 | 	mov	objptr, local05
252e0     FD 20 02 F6 | 	mov	local02, result1
252e4                 | LR__3571
252e4     0F 13 02 F6 | 	mov	arg01, local01
252e8     00 14 06 F6 | 	mov	arg02, #0
252ec     34 16 06 F6 | 	mov	arg03, #52
252f0     98 00 A0 FD | 	call	#\builtin_bytefill_
252f4     10 FB 01 F6 | 	mov	result1, local02
252f8                 | LR__3572
252f8     A7 F0 03 F6 | 	mov	ptra, fp
252fc     B2 00 A0 FD | 	call	#popregs_
25300                 | __system___closeraw_ret
25300     2D 00 64 FD | 	ret
25304                 | 
25304                 | __system___vfs_open_sdcardx
25304     0B 4A 05 F6 | 	mov	COUNT_, #11
25308     A8 00 A0 FD | 	call	#pushregs_
2530c     09 23 02 F6 | 	mov	local03, arg01
25310     0A 25 02 F6 | 	mov	local04, arg02
25314     0B 27 02 F6 | 	mov	local05, arg03
25318     0C 29 02 F6 | 	mov	local06, arg04
2531c     01 00 00 FF 
25320     24 12 06 F6 | 	mov	arg01, ##548
25324     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
25328     FD 2A 02 F6 | 	mov	local07, result1
2532c     01 00 00 FF 
25330     34 12 06 F6 | 	mov	arg01, ##564
25334     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
25338     FD 2C 02 F6 | 	mov	local08, result1
2533c     11 19 02 F6 | 	mov	arg04, local03
25340     1F 18 C6 F0 | 	sar	arg04, #31
25344     11 17 02 F6 | 	mov	arg03, local03
25348     01 12 06 F6 | 	mov	arg01, #1
2534c     00 14 06 F6 | 	mov	arg02, #0
25350     EC DB BF FD | 	call	#__system___int64_shl
25354     FD 1E 02 F6 | 	mov	local01, result1
25358     FE 2E 02 F6 | 	mov	local09, result2
2535c     12 19 02 F6 | 	mov	arg04, local04
25360     1F 18 C6 F0 | 	sar	arg04, #31
25364     12 17 02 F6 | 	mov	arg03, local04
25368     01 12 06 F6 | 	mov	arg01, #1
2536c     00 14 06 F6 | 	mov	arg02, #0
25370     CC DB BF FD | 	call	#__system___int64_shl
25374     FD 1E 42 F5 | 	or	local01, result1
25378     FE 2E 42 F5 | 	or	local09, result2
2537c     13 19 02 F6 | 	mov	arg04, local05
25380     1F 18 C6 F0 | 	sar	arg04, #31
25384     13 17 02 F6 | 	mov	arg03, local05
25388     01 12 06 F6 | 	mov	arg01, #1
2538c     00 14 06 F6 | 	mov	arg02, #0
25390     AC DB BF FD | 	call	#__system___int64_shl
25394     FD 1E 42 F5 | 	or	local01, result1
25398     FE 2E 42 F5 | 	or	local09, result2
2539c     14 19 02 F6 | 	mov	arg04, local06
253a0     1F 18 C6 F0 | 	sar	arg04, #31
253a4     14 17 02 F6 | 	mov	arg03, local06
253a8     01 12 06 F6 | 	mov	arg01, #1
253ac     00 14 06 F6 | 	mov	arg02, #0
253b0     8C DB BF FD | 	call	#__system___int64_shl
253b4     17 15 02 F6 | 	mov	arg02, local09
253b8     FD 1E 42 F5 | 	or	local01, result1
253bc     0A FD 41 F5 | 	or	result2, arg02
253c0     FE 20 02 F6 | 	mov	local02, result2
253c4     0F 13 02 F6 | 	mov	arg01, local01
253c8     10 15 02 F6 | 	mov	arg02, local02
253cc     A8 DB BF FD | 	call	#__system___usepins
253d0     00 FA 0D F2 | 	cmp	result1, #0 wz
253d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
253d8     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
253dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
253e0     00 FA 05 A6 |  if_e	mov	result1, #0
253e4     B4 00 90 AD |  if_e	jmp	#LR__3582
253e8     0F 31 02 F6 | 	mov	local10, local01
253ec     10 2F 02 F6 | 	mov	local09, local02
253f0     01 00 00 FF 
253f4     08 2A 06 F1 | 	add	local07, ##520
253f8     15 31 62 FC | 	wrlong	local10, local07
253fc     04 2A 06 F1 | 	add	local07, #4
25400     15 2F 62 FC | 	wrlong	local09, local07
25404     01 00 00 FF 
25408     0C 2A 86 F1 | 	sub	local07, ##524
2540c     14 1B 02 F6 | 	mov	arg05, local06
25410     00 12 06 F6 | 	mov	arg01, #0
25414     11 15 02 F6 | 	mov	arg02, local03
25418     12 17 02 F6 | 	mov	arg03, local04
2541c     13 19 02 F6 | 	mov	arg04, local05
25420     F2 30 02 F6 | 	mov	local10, objptr
25424     15 E5 01 F6 | 	mov	objptr, local07
25428     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2542c     18 E5 01 F6 | 	mov	objptr, local10
25430     FD 32 0A F6 | 	mov	local11, result1 wz
25434     24 00 90 5D |  if_ne	jmp	#LR__3580
25438     80 01 00 FF 
2543c     F6 14 06 F6 | 	mov	arg02, ##@LR__4997
25440     16 13 02 F6 | 	mov	arg01, local08
25444     00 16 06 F6 | 	mov	arg03, #0
25448     F2 32 02 F6 | 	mov	local11, objptr
2544c     15 E5 01 F6 | 	mov	objptr, local07
25450     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25454     19 E5 01 F6 | 	mov	objptr, local11
25458     FD 32 02 F6 | 	mov	local11, result1
2545c                 | LR__3580
2545c     00 32 0E F2 | 	cmp	local11, #0 wz
25460     24 00 90 AD |  if_e	jmp	#LR__3581
25464     0F 13 02 F6 | 	mov	arg01, local01
25468     10 15 02 F6 | 	mov	arg02, local02
2546c     5C DB BF FD | 	call	#__system___freepins
25470     19 13 6A F6 | 	neg	arg01, local11 wz
25474     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25478     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2547c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25480     00 FA 05 F6 | 	mov	result1, #0
25484     14 00 90 FD | 	jmp	#LR__3582
25488                 | LR__3581
25488     15 13 02 F6 | 	mov	arg01, local07
2548c     F2 32 02 F6 | 	mov	local11, objptr
25490     15 E5 01 F6 | 	mov	objptr, local07
25494     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25498     19 E5 01 F6 | 	mov	objptr, local11
2549c                 | LR__3582
2549c     A7 F0 03 F6 | 	mov	ptra, fp
254a0     B2 00 A0 FD | 	call	#popregs_
254a4                 | __system___vfs_open_sdcardx_ret
254a4     2D 00 64 FD | 	ret
254a8                 | 
254a8                 | __system____default_getc
254a8     03 4A 05 F6 | 	mov	COUNT_, #3
254ac     A8 00 A0 FD | 	call	#pushregs_
254b0     09 1F 02 F6 | 	mov	local01, arg01
254b4     0F 21 02 FB | 	rdlong	local02, local01
254b8     08 20 06 F1 | 	add	local02, #8
254bc     10 23 02 FB | 	rdlong	local03, local02
254c0     02 22 CE F7 | 	test	local03, #2 wz
254c4     0F 13 02 56 |  if_ne	mov	arg01, local01
254c8     00 01 B0 5D |  if_ne	call	#__system____default_flush
254cc     10 23 02 FB | 	rdlong	local03, local02
254d0     01 22 46 F5 | 	or	local03, #1
254d4     10 23 62 FC | 	wrlong	local03, local02
254d8     08 20 86 F1 | 	sub	local02, #8
254dc     10 23 0A FB | 	rdlong	local03, local02 wz
254e0     0C 00 90 5D |  if_ne	jmp	#LR__3590
254e4     0F 13 02 F6 | 	mov	arg01, local01
254e8     68 18 B0 FD | 	call	#__system____default_filbuf
254ec     FD 22 02 F6 | 	mov	local03, result1
254f0                 | LR__3590
254f0     01 22 56 F2 | 	cmps	local03, #1 wc
254f4     01 FA 65 C6 |  if_b	neg	result1, #1
254f8     1C 00 90 CD |  if_b	jmp	#LR__3591
254fc     01 22 86 F1 | 	sub	local03, #1
25500     10 23 62 FC | 	wrlong	local03, local02
25504     04 20 06 F1 | 	add	local02, #4
25508     10 23 02 FB | 	rdlong	local03, local02
2550c     11 FB C1 FA | 	rdbyte	result1, local03
25510     01 22 06 F1 | 	add	local03, #1
25514     10 23 62 FC | 	wrlong	local03, local02
25518                 | LR__3591
25518     A7 F0 03 F6 | 	mov	ptra, fp
2551c     B2 00 A0 FD | 	call	#popregs_
25520                 | __system____default_getc_ret
25520     2D 00 64 FD | 	ret
25524                 | 
25524                 | __system____default_putc
25524     06 4A 05 F6 | 	mov	COUNT_, #6
25528     A8 00 A0 FD | 	call	#pushregs_
2552c     09 1F 02 F6 | 	mov	local01, arg01
25530     0A 21 02 F6 | 	mov	local02, arg02
25534     10 23 02 FB | 	rdlong	local03, local02
25538     08 22 06 F1 | 	add	local03, #8
2553c     11 FB 01 FB | 	rdlong	result1, local03
25540     01 FA CD F7 | 	test	result1, #1 wz
25544     10 13 02 56 |  if_ne	mov	arg01, local02
25548     80 00 B0 5D |  if_ne	call	#__system____default_flush
2554c     11 25 02 FB | 	rdlong	local04, local03
25550     02 24 46 F5 | 	or	local04, #2
25554     11 25 62 FC | 	wrlong	local04, local03
25558     08 22 86 F1 | 	sub	local03, #8
2555c     11 27 02 FB | 	rdlong	local05, local03
25560     10 22 06 F1 | 	add	local03, #16
25564     11 15 02 FB | 	rdlong	arg02, local03
25568     10 22 86 F1 | 	sub	local03, #16
2556c     13 FB 01 F6 | 	mov	result1, local05
25570     0A FB 01 F1 | 	add	result1, arg02
25574     FD 1E 42 FC | 	wrbyte	local01, result1
25578     0F 1F E2 F8 | 	getbyte	local01, local01, #0
2557c     01 26 06 F1 | 	add	local05, #1
25580     11 27 62 FC | 	wrlong	local05, local03
25584     06 20 06 F1 | 	add	local02, #6
25588     10 29 EA FA | 	rdword	local06, local02 wz
2558c     06 20 86 F1 | 	sub	local02, #6
25590     0C 22 06 51 |  if_ne	add	local03, #12
25594     11 25 02 5B |  if_ne	rdlong	local04, local03
25598     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
2559c     0C 00 90 AD |  if_e	jmp	#LR__3600
255a0     0A 1E 0E F2 | 	cmp	local01, #10 wz
255a4     01 28 0E A2 |  if_e	cmp	local06, #1 wz
255a8     10 00 90 5D |  if_ne	jmp	#LR__3601
255ac                 | LR__3600
255ac     10 13 02 F6 | 	mov	arg01, local02
255b0     18 00 B0 FD | 	call	#__system____default_flush
255b4     00 FA 0D F2 | 	cmp	result1, #0 wz
255b8     01 1E 66 56 |  if_ne	neg	local01, #1
255bc                 | LR__3601
255bc     0F FB 01 F6 | 	mov	result1, local01
255c0     A7 F0 03 F6 | 	mov	ptra, fp
255c4     B2 00 A0 FD | 	call	#popregs_
255c8                 | __system____default_putc_ret
255c8     2D 00 64 FD | 	ret
255cc                 | 
255cc                 | __system____default_flush
255cc     06 4A 05 F6 | 	mov	COUNT_, #6
255d0     A8 00 A0 FD | 	call	#pushregs_
255d4     09 1F 02 F6 | 	mov	local01, arg01
255d8     0F 21 02 FB | 	rdlong	local02, local01
255dc     10 23 02 FB | 	rdlong	local03, local02
255e0     08 20 06 F1 | 	add	local02, #8
255e4     10 FB 01 FB | 	rdlong	result1, local02
255e8     08 20 86 F1 | 	sub	local02, #8
255ec     02 FA CD F7 | 	test	result1, #2 wz
255f0     D0 00 90 AD |  if_e	jmp	#LR__3612
255f4     01 22 56 F2 | 	cmps	local03, #1 wc
255f8     20 01 90 CD |  if_b	jmp	#LR__3614
255fc     08 1E 06 F1 | 	add	local01, #8
25600     0F FB 01 FB | 	rdlong	result1, local01
25604     08 1E 86 F1 | 	sub	local01, #8
25608     40 FA CD F7 | 	test	result1, #64 wz
2560c     68 00 90 AD |  if_e	jmp	#LR__3611
25610     08 1E 06 F1 | 	add	local01, #8
25614     0F 17 02 FB | 	rdlong	arg03, local01
25618     08 1E 86 F1 | 	sub	local01, #8
2561c     80 16 CE F7 | 	test	arg03, #128 wz
25620     54 00 90 AD |  if_e	jmp	#LR__3610
25624     30 1E 06 F1 | 	add	local01, #48
25628     0F 25 02 FB | 	rdlong	local04, local01
2562c     12 27 02 F6 | 	mov	local05, local04
25630     30 1E 86 F1 | 	sub	local01, #48
25634     13 26 46 F7 | 	zerox	local05, #19
25638     14 24 46 F0 | 	shr	local04, #20
2563c     02 24 66 F0 | 	shl	local04, #2
25640     ED 24 02 F1 | 	add	local04, __methods__
25644     12 25 02 FB | 	rdlong	local04, local04
25648     0F 13 02 F6 | 	mov	arg01, local01
2564c     00 14 06 F6 | 	mov	arg02, #0
25650     02 16 06 F6 | 	mov	arg03, #2
25654     F2 28 02 F6 | 	mov	local06, objptr
25658     13 E5 01 F6 | 	mov	objptr, local05
2565c     2D 24 62 FD | 	call	local04
25660     14 E5 01 F6 | 	mov	objptr, local06
25664     08 1E 06 F1 | 	add	local01, #8
25668     0F 29 02 FB | 	rdlong	local06, local01
2566c     80 28 26 F5 | 	andn	local06, #128
25670     0F 29 62 FC | 	wrlong	local06, local01
25674     08 1E 86 F1 | 	sub	local01, #8
25678                 | LR__3610
25678                 | LR__3611
25678     18 1E 06 F1 | 	add	local01, #24
2567c     0F 25 02 FB | 	rdlong	local04, local01
25680     12 27 02 F6 | 	mov	local05, local04
25684     18 1E 86 F1 | 	sub	local01, #24
25688     13 26 46 F7 | 	zerox	local05, #19
2568c     14 24 46 F0 | 	shr	local04, #20
25690     02 24 66 F0 | 	shl	local04, #2
25694     ED 24 02 F1 | 	add	local04, __methods__
25698     12 25 02 FB | 	rdlong	local04, local04
2569c     10 20 06 F1 | 	add	local02, #16
256a0     10 15 02 FB | 	rdlong	arg02, local02
256a4     10 20 86 F1 | 	sub	local02, #16
256a8     0F 13 02 F6 | 	mov	arg01, local01
256ac     11 17 02 F6 | 	mov	arg03, local03
256b0     F2 28 02 F6 | 	mov	local06, objptr
256b4     13 E5 01 F6 | 	mov	objptr, local05
256b8     2D 24 62 FD | 	call	local04
256bc     14 E5 01 F6 | 	mov	objptr, local06
256c0     58 00 90 FD | 	jmp	#LR__3614
256c4                 | LR__3612
256c4     08 20 06 F1 | 	add	local02, #8
256c8     10 29 02 FB | 	rdlong	local06, local02
256cc     08 20 86 F1 | 	sub	local02, #8
256d0     01 28 CE F7 | 	test	local06, #1 wz
256d4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
256d8     40 00 90 AD |  if_e	jmp	#LR__3613
256dc     30 1E 06 F1 | 	add	local01, #48
256e0     0F 25 02 FB | 	rdlong	local04, local01
256e4     12 27 02 F6 | 	mov	local05, local04
256e8     30 1E 86 F1 | 	sub	local01, #48
256ec     13 26 46 F7 | 	zerox	local05, #19
256f0     14 24 46 F0 | 	shr	local04, #20
256f4     02 24 66 F0 | 	shl	local04, #2
256f8     ED 24 02 F1 | 	add	local04, __methods__
256fc     12 25 02 FB | 	rdlong	local04, local04
25700     0F 13 02 F6 | 	mov	arg01, local01
25704     11 15 62 F6 | 	neg	arg02, local03
25708     01 16 06 F6 | 	mov	arg03, #1
2570c     F2 28 02 F6 | 	mov	local06, objptr
25710     13 E5 01 F6 | 	mov	objptr, local05
25714     2D 24 62 FD | 	call	local04
25718     14 E5 01 F6 | 	mov	objptr, local06
2571c                 | LR__3613
2571c                 | LR__3614
2571c     10 01 68 FC | 	wrlong	#0, local02
25720     04 20 06 F1 | 	add	local02, #4
25724     10 01 68 FC | 	wrlong	#0, local02
25728     04 20 06 F1 | 	add	local02, #4
2572c     10 01 68 FC | 	wrlong	#0, local02
25730     00 FA 05 F6 | 	mov	result1, #0
25734     A7 F0 03 F6 | 	mov	ptra, fp
25738     B2 00 A0 FD | 	call	#popregs_
2573c                 | __system____default_flush_ret
2573c     2D 00 64 FD | 	ret
25740                 | 
25740                 | __system____default_buffer_init
25740     02 4A 05 F6 | 	mov	COUNT_, #2
25744     A8 00 A0 FD | 	call	#pushregs_
25748     09 1F 02 F6 | 	mov	local01, arg01
2574c     0F 21 02 FB | 	rdlong	local02, local01
25750     0F 13 02 F6 | 	mov	arg01, local01
25754     34 03 B0 FD | 	call	#__system___isatty
25758     00 FA 0D F2 | 	cmp	result1, #0 wz
2575c     06 1E 06 51 |  if_ne	add	local01, #6
25760     0F 0B 58 5C |  if_ne	wrword	#5, local01
25764     06 1E 06 A1 |  if_e	add	local01, #6
25768     0F 0D 58 AC |  if_e	wrword	#6, local01
2576c     14 20 06 F1 | 	add	local02, #20
25770     10 1F 02 F6 | 	mov	local01, local02
25774     04 20 86 F1 | 	sub	local02, #4
25778     10 1F 62 FC | 	wrlong	local01, local02
2577c     04 20 86 F1 | 	sub	local02, #4
25780     02 00 80 FF 
25784     10 01 68 FC | 	wrlong	##1024, local02
25788     00 FA 05 F6 | 	mov	result1, #0
2578c     A7 F0 03 F6 | 	mov	ptra, fp
25790     B2 00 A0 FD | 	call	#popregs_
25794                 | __system____default_buffer_init_ret
25794     2D 00 64 FD | 	ret
25798                 | 
25798                 | __system__stat
25798     04 4A 05 F6 | 	mov	COUNT_, #4
2579c     A8 00 A0 FD | 	call	#pushregs_
257a0     0A 1F 02 F6 | 	mov	local01, arg02
257a4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
257a8     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
257ac     09 15 02 F6 | 	mov	arg02, arg01
257b0     10 13 02 F6 | 	mov	arg01, local02
257b4     00 16 06 F6 | 	mov	arg03, #0
257b8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
257bc     1C B8 BF FD | 	call	#__system____getvfsforfile
257c0     FD 22 0A F6 | 	mov	local03, result1 wz
257c4     10 00 90 AD |  if_e	jmp	#LR__3620
257c8     34 22 06 F1 | 	add	local03, #52
257cc     11 17 0A FB | 	rdlong	arg03, local03 wz
257d0     34 22 86 F1 | 	sub	local03, #52
257d4     14 00 90 5D |  if_ne	jmp	#LR__3621
257d8                 | LR__3620
257d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
257dc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
257e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
257e4     01 FA 65 F6 | 	neg	result1, #1
257e8     68 00 90 FD | 	jmp	#LR__3622
257ec                 | LR__3621
257ec     0F 13 02 F6 | 	mov	arg01, local01
257f0     00 14 06 F6 | 	mov	arg02, #0
257f4     30 16 06 F6 | 	mov	arg03, #48
257f8     09 25 02 F6 | 	mov	local04, arg01
257fc     98 00 A0 FD | 	call	#\builtin_bytefill_
25800     12 FB 01 F6 | 	mov	result1, local04
25804     10 13 CA FA | 	rdbyte	arg01, local02 wz
25808     08 1E 06 A1 |  if_e	add	local01, #8
2580c     08 00 80 AF 
25810     0F FF 6B AC |  if_e	wrlong	##4607, local01
25814     00 FA 05 A6 |  if_e	mov	result1, #0
25818     38 00 90 AD |  if_e	jmp	#LR__3622
2581c     34 22 06 F1 | 	add	local03, #52
25820     11 23 02 FB | 	rdlong	local03, local03
25824     11 25 02 F6 | 	mov	local04, local03
25828     13 22 46 F7 | 	zerox	local03, #19
2582c     14 24 46 F0 | 	shr	local04, #20
25830     02 24 66 F0 | 	shl	local04, #2
25834     ED 24 02 F1 | 	add	local04, __methods__
25838     12 25 02 FB | 	rdlong	local04, local04
2583c     10 13 02 F6 | 	mov	arg01, local02
25840     0F 15 02 F6 | 	mov	arg02, local01
25844     F2 20 02 F6 | 	mov	local02, objptr
25848     11 E5 01 F6 | 	mov	objptr, local03
2584c     2D 24 62 FD | 	call	local04
25850     10 E5 01 F6 | 	mov	objptr, local02
25854                 | LR__3622
25854     A7 F0 03 F6 | 	mov	ptra, fp
25858     B2 00 A0 FD | 	call	#popregs_
2585c                 | __system__stat_ret
2585c     2D 00 64 FD | 	ret
25860                 | 
25860                 | __system__write
25860     0A 12 16 F2 | 	cmp	arg01, #10 wc
25864     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25868     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2586c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25870     01 FA 65 36 |  if_ae	neg	result1, #1
25874     20 00 90 3D |  if_ae	jmp	#LR__3630
25878     34 12 06 FD | 	qmul	arg01, #52
2587c     02 00 00 FF 
25880     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25884     18 12 62 FD | 	getqx	arg01
25888     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2588c     02 00 00 FF 
25890     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25894     0C 10 B0 FD | 	call	#__system___vfswrite
25898                 | LR__3630
25898                 | __system__write_ret
25898     2D 00 64 FD | 	ret
2589c                 | 
2589c                 | __system__read
2589c     0A 12 16 F2 | 	cmp	arg01, #10 wc
258a0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
258a4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
258a8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
258ac     01 FA 65 36 |  if_ae	neg	result1, #1
258b0     20 00 90 3D |  if_ae	jmp	#LR__3640
258b4     34 12 06 FD | 	qmul	arg01, #52
258b8     02 00 00 FF 
258bc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
258c0     18 12 62 FD | 	getqx	arg01
258c4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
258c8     02 00 00 FF 
258cc     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
258d0     98 11 B0 FD | 	call	#__system___vfsread
258d4                 | LR__3640
258d4                 | __system__read_ret
258d4     2D 00 64 FD | 	ret
258d8                 | 
258d8                 | __system__close
258d8     0A 12 16 F2 | 	cmp	arg01, #10 wc
258dc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
258e0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
258e4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
258e8     01 FA 65 36 |  if_ae	neg	result1, #1
258ec     20 00 90 3D |  if_ae	jmp	#LR__3650
258f0     34 12 06 FD | 	qmul	arg01, #52
258f4     02 00 00 FF 
258f8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
258fc     18 12 62 FD | 	getqx	arg01
25900     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25904     02 00 00 FF 
25908     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
2590c     10 F9 BF FD | 	call	#__system___closeraw
25910                 | LR__3650
25910                 | __system__close_ret
25910     2D 00 64 FD | 	ret
25914                 | 
25914                 | __system__lseek
25914     06 4A 05 F6 | 	mov	COUNT_, #6
25918     A8 00 A0 FD | 	call	#pushregs_
2591c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25920     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25924     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25928     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2592c     01 FA 65 36 |  if_ae	neg	result1, #1
25930     C4 00 90 3D |  if_ae	jmp	#LR__3661
25934     34 12 06 FD | 	qmul	arg01, #52
25938     02 00 00 FF 
2593c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25940     18 1E 62 FD | 	getqx	local01
25944     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25948     30 1E 06 F1 | 	add	local01, #48
2594c     0F 13 0A FB | 	rdlong	arg01, local01 wz
25950     30 1E 86 F1 | 	sub	local01, #48
25954     02 00 00 FF 
25958     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
2595c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25960     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25964     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25968     01 FA 65 A6 |  if_e	neg	result1, #1
2596c     88 00 90 AD |  if_e	jmp	#LR__3661
25970     08 1E 06 F1 | 	add	local01, #8
25974     0F 21 02 FB | 	rdlong	local02, local01
25978     08 1E 86 F1 | 	sub	local01, #8
2597c     40 20 CE F7 | 	test	local02, #64 wz
25980     08 1E 06 51 |  if_ne	add	local01, #8
25984     0F 21 02 5B |  if_ne	rdlong	local02, local01
25988     80 20 46 55 |  if_ne	or	local02, #128
2598c     0F 21 62 5C |  if_ne	wrlong	local02, local01
25990     08 1E 86 51 |  if_ne	sub	local01, #8
25994     30 1E 06 F1 | 	add	local01, #48
25998     0F 23 02 FB | 	rdlong	local03, local01
2599c     11 25 02 F6 | 	mov	local04, local03
259a0     30 1E 86 F1 | 	sub	local01, #48
259a4     13 24 46 F7 | 	zerox	local04, #19
259a8     14 22 46 F0 | 	shr	local03, #20
259ac     02 22 66 F0 | 	shl	local03, #2
259b0     ED 22 02 F1 | 	add	local03, __methods__
259b4     11 23 02 FB | 	rdlong	local03, local03
259b8     0F 13 02 F6 | 	mov	arg01, local01
259bc     F2 26 02 F6 | 	mov	local05, objptr
259c0     12 E5 01 F6 | 	mov	objptr, local04
259c4     2D 22 62 FD | 	call	local03
259c8     13 E5 01 F6 | 	mov	objptr, local05
259cc     FD 28 02 F6 | 	mov	local06, result1
259d0     00 28 56 F2 | 	cmps	local06, #0 wc
259d4     1C 00 90 3D |  if_ae	jmp	#LR__3660
259d8     14 13 6A F6 | 	neg	arg01, local06 wz
259dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
259e0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
259e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
259e8     01 FA 65 56 |  if_ne	neg	result1, #1
259ec     00 FA 05 A6 |  if_e	mov	result1, #0
259f0     04 00 90 FD | 	jmp	#LR__3661
259f4                 | LR__3660
259f4     14 FB 01 F6 | 	mov	result1, local06
259f8                 | LR__3661
259f8     A7 F0 03 F6 | 	mov	ptra, fp
259fc     B2 00 A0 FD | 	call	#popregs_
25a00                 | __system__lseek_ret
25a00     2D 00 64 FD | 	ret
25a04                 | 
25a04                 | __system___ioctl
25a04     03 4A 05 F6 | 	mov	COUNT_, #3
25a08     A8 00 A0 FD | 	call	#pushregs_
25a0c     00 12 4E F2 | 	cmps	arg01, #0 wz
25a10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25a14     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25a18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25a1c     01 FA 65 A6 |  if_e	neg	result1, #1
25a20     5C 00 90 AD |  if_e	jmp	#LR__3671
25a24     28 12 06 F1 | 	add	arg01, #40
25a28     09 1F 02 FB | 	rdlong	local01, arg01
25a2c     0F 21 02 F6 | 	mov	local02, local01
25a30     28 12 86 F1 | 	sub	arg01, #40
25a34     13 20 46 F7 | 	zerox	local02, #19
25a38     14 1E 46 F0 | 	shr	local01, #20
25a3c     02 1E 66 F0 | 	shl	local01, #2
25a40     ED 1E 02 F1 | 	add	local01, __methods__
25a44     0F 1F 02 FB | 	rdlong	local01, local01
25a48     F2 22 02 F6 | 	mov	local03, objptr
25a4c     10 E5 01 F6 | 	mov	objptr, local02
25a50     2D 1E 62 FD | 	call	local01
25a54     11 E5 01 F6 | 	mov	objptr, local03
25a58     FD 12 0A F6 | 	mov	arg01, result1 wz
25a5c     1C 00 90 AD |  if_e	jmp	#LR__3670
25a60     00 12 4E F2 | 	cmps	arg01, #0 wz
25a64     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25a68     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25a6c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25a70     01 FA 65 56 |  if_ne	neg	result1, #1
25a74     00 FA 05 A6 |  if_e	mov	result1, #0
25a78     04 00 90 FD | 	jmp	#LR__3671
25a7c                 | LR__3670
25a7c     00 FA 05 F6 | 	mov	result1, #0
25a80                 | LR__3671
25a80     A7 F0 03 F6 | 	mov	ptra, fp
25a84     B2 00 A0 FD | 	call	#popregs_
25a88                 | __system___ioctl_ret
25a88     2D 00 64 FD | 	ret
25a8c                 | 
25a8c                 | __system___isatty
25a8c     00 4A 05 F6 | 	mov	COUNT_, #0
25a90     A8 00 A0 FD | 	call	#pushregs_
25a94     0C F0 07 F1 | 	add	ptra, #12
25a98     04 4E 05 F1 | 	add	fp, #4
25a9c     A7 12 62 FC | 	wrlong	arg01, fp
25aa0     04 4E 05 F1 | 	add	fp, #4
25aa4     A7 16 02 F6 | 	mov	arg03, fp
25aa8     08 4E 85 F1 | 	sub	fp, #8
25aac     00 15 06 F6 | 	mov	arg02, #256
25ab0     50 FF BF FD | 	call	#__system___ioctl
25ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
25ab8     01 FA 05 A6 |  if_e	mov	result1, #1
25abc     00 FA 05 56 |  if_ne	mov	result1, #0
25ac0     A7 F0 03 F6 | 	mov	ptra, fp
25ac4     B2 00 A0 FD | 	call	#popregs_
25ac8                 | __system___isatty_ret
25ac8     2D 00 64 FD | 	ret
25acc                 | 
25acc                 | __system____getftab
25acc     0A 12 16 F2 | 	cmp	arg01, #10 wc
25ad0     34 12 06 CD |  if_b	qmul	arg01, #52
25ad4     00 FA 05 36 |  if_ae	mov	result1, #0
25ad8     02 00 00 CF 
25adc     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25ae0     18 FA 61 CD |  if_b	getqx	result1
25ae4     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25ae8     02 00 00 CF 
25aec     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25af0                 | __system____getftab_ret
25af0     2D 00 64 FD | 	ret
25af4                 | 
25af4                 | __system__strncpy
25af4     09 01 02 F6 | 	mov	_var01, arg01
25af8                 | LR__3680
25af8     01 16 86 F1 | 	sub	arg03, #1
25afc     00 16 56 F2 | 	cmps	arg03, #0 wc
25b00     18 00 90 CD |  if_b	jmp	#LR__3681
25b04     0A FB C1 FA | 	rdbyte	result1, arg02
25b08     00 FB 41 FC | 	wrbyte	result1, _var01
25b0c     01 14 06 F1 | 	add	arg02, #1
25b10     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25b14     01 00 06 F1 | 	add	_var01, #1
25b18     DC FF 9F 5D |  if_ne	jmp	#LR__3680
25b1c                 | LR__3681
25b1c     97 0C 48 FB | 	callpa	#(@LR__3683-@LR__3682)>>2,fcache_load_ptr_
25b20                 | LR__3682
25b20     01 16 86 F1 | 	sub	arg03, #1
25b24     00 16 56 F2 | 	cmps	arg03, #0 wc
25b28     00 03 02 36 |  if_ae	mov	_var02, _var01
25b2c     01 00 06 31 |  if_ae	add	_var01, #1
25b30     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25b34     E8 FF 9F 3D |  if_ae	jmp	#LR__3682
25b38                 | LR__3683
25b38     09 FB 01 F6 | 	mov	result1, arg01
25b3c                 | __system__strncpy_ret
25b3c     2D 00 64 FD | 	ret
25b40                 | 
25b40                 | __system__strncat
25b40     00 14 4E F2 | 	cmps	arg02, #0 wz
25b44     50 00 90 AD |  if_e	jmp	#LR__3694
25b48     01 16 16 F2 | 	cmp	arg03, #1 wc
25b4c     48 00 90 CD |  if_b	jmp	#LR__3694
25b50     09 01 02 F6 | 	mov	_var01, arg01
25b54     97 1E 48 FB | 	callpa	#(@LR__3692-@LR__3690)>>2,fcache_load_ptr_
25b58                 | LR__3690
25b58     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25b5c     01 00 06 51 |  if_ne	add	_var01, #1
25b60     F4 FF 9F 5D |  if_ne	jmp	#LR__3690
25b64     0B 03 02 F6 | 	mov	_var02, arg03
25b68                 | LR__3691
25b68     0A 05 C2 FA | 	rdbyte	_var03, arg02
25b6c     02 07 02 F6 | 	mov	_var04, _var03
25b70     07 06 4E F7 | 	zerox	_var04, #7 wz
25b74     01 14 06 F1 | 	add	arg02, #1
25b78     18 00 90 AD |  if_e	jmp	#LR__3693
25b7c     01 02 86 F1 | 	sub	_var02, #1
25b80     00 02 56 F2 | 	cmps	_var02, #0 wc
25b84     00 07 02 36 |  if_ae	mov	_var04, _var01
25b88     01 00 06 31 |  if_ae	add	_var01, #1
25b8c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25b90     D4 FF 9F 3D |  if_ae	jmp	#LR__3691
25b94                 | LR__3692
25b94                 | LR__3693
25b94     00 01 48 FC | 	wrbyte	#0, _var01
25b98                 | LR__3694
25b98     09 FB 01 F6 | 	mov	result1, arg01
25b9c                 | __system__strncat_ret
25b9c     2D 00 64 FD | 	ret
25ba0                 | 
25ba0                 | __system__strncmp
25ba0     09 01 0A F6 | 	mov	_var01, arg01 wz
25ba4     14 00 90 5D |  if_ne	jmp	#LR__3700
25ba8     00 14 0E F2 | 	cmp	arg02, #0 wz
25bac     01 02 66 56 |  if_ne	neg	_var02, #1
25bb0     00 02 06 A6 |  if_e	mov	_var02, #0
25bb4     01 FB 01 F6 | 	mov	result1, _var02
25bb8     74 00 90 FD | 	jmp	#__system__strncmp_ret
25bbc                 | LR__3700
25bbc     00 14 0E F2 | 	cmp	arg02, #0 wz
25bc0     01 FA 05 A6 |  if_e	mov	result1, #1
25bc4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25bc8     0B 05 02 F6 | 	mov	_var03, arg03
25bcc     97 16 48 FB | 	callpa	#(@LR__3702-@LR__3701)>>2,fcache_load_ptr_
25bd0                 | LR__3701
25bd0     00 07 C2 FA | 	rdbyte	_var04, _var01
25bd4     0A 09 02 F6 | 	mov	_var05, arg02
25bd8     04 0B C2 FA | 	rdbyte	_var06, _var05
25bdc     01 04 86 F1 | 	sub	_var03, #1
25be0     00 04 56 F2 | 	cmps	_var03, #0 wc
25be4     01 00 06 F1 | 	add	_var01, #1
25be8     01 14 06 F1 | 	add	arg02, #1
25bec     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25bf0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3703
25bf4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25bf8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3701
25bfc                 | LR__3702
25bfc                 | LR__3703
25bfc     00 04 56 F2 | 	cmps	_var03, #0 wc
25c00     00 FA 05 C6 |  if_b	mov	result1, #0
25c04     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25c08     05 07 0A F2 | 	cmp	_var04, _var06 wz
25c0c     00 FA 05 A6 |  if_e	mov	result1, #0
25c10     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25c14     00 06 0E F2 | 	cmp	_var04, #0 wz
25c18     01 FA 65 A6 |  if_e	neg	result1, #1
25c1c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25c20     00 0A 0E F2 | 	cmp	_var06, #0 wz
25c24     01 FA 05 A6 |  if_e	mov	result1, #1
25c28     03 FB 01 56 |  if_ne	mov	result1, _var04
25c2c     05 FB 81 51 |  if_ne	sub	result1, _var06
25c30                 | __system__strncmp_ret
25c30     2D 00 64 FD | 	ret
25c34                 | 
25c34                 | __system____root_opendir
25c34     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25c38     04 12 06 F1 | 	add	arg01, #4
25c3c     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25c40     00 FA 05 F6 | 	mov	result1, #0
25c44     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25c48                 | __system____root_opendir_ret
25c48     2D 00 64 FD | 	ret
25c4c                 | 
25c4c                 | __system____root_readdir
25c4c     03 4A 05 F6 | 	mov	COUNT_, #3
25c50     A8 00 A0 FD | 	call	#pushregs_
25c54     09 1F 02 F6 | 	mov	local01, arg01
25c58     0A 21 02 F6 | 	mov	local02, arg02
25c5c     04 1E 06 F1 | 	add	local01, #4
25c60     0F 23 02 FB | 	rdlong	local03, local01
25c64     04 1E 86 F1 | 	sub	local01, #4
25c68                 | LR__3710
25c68     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25c6c     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25c70     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25c74     01 FA 65 A6 |  if_e	neg	result1, #1
25c78     48 00 90 AD |  if_e	jmp	#LR__3711
25c7c     11 17 0A FB | 	rdlong	arg03, local03 wz
25c80     04 22 06 A1 |  if_e	add	local03, #4
25c84     E0 FF 9F AD |  if_e	jmp	#LR__3710
25c88     11 15 02 FB | 	rdlong	arg02, local03
25c8c     01 14 06 F1 | 	add	arg02, #1
25c90     10 13 02 F6 | 	mov	arg01, local02
25c94     40 16 06 F6 | 	mov	arg03, #64
25c98     58 FE BF FD | 	call	#__system__strncpy
25c9c     50 20 06 F1 | 	add	local02, #80
25ca0     10 03 48 FC | 	wrbyte	#1, local02
25ca4     08 20 86 F1 | 	sub	local02, #8
25ca8     10 01 68 FC | 	wrlong	#0, local02
25cac     04 20 06 F1 | 	add	local02, #4
25cb0     10 01 68 FC | 	wrlong	#0, local02
25cb4     04 22 06 F1 | 	add	local03, #4
25cb8     04 1E 06 F1 | 	add	local01, #4
25cbc     0F 23 62 FC | 	wrlong	local03, local01
25cc0     00 FA 05 F6 | 	mov	result1, #0
25cc4                 | LR__3711
25cc4     A7 F0 03 F6 | 	mov	ptra, fp
25cc8     B2 00 A0 FD | 	call	#popregs_
25ccc                 | __system____root_readdir_ret
25ccc     2D 00 64 FD | 	ret
25cd0                 | 
25cd0                 | __system____root_closedir
25cd0     00 FA 05 F6 | 	mov	result1, #0
25cd4                 | __system____root_closedir_ret
25cd4     2D 00 64 FD | 	ret
25cd8                 | 
25cd8                 | __system____root_stat
25cd8     0A 01 02 F6 | 	mov	_var01, arg02
25cdc     00 13 02 F6 | 	mov	arg01, _var01
25ce0     00 14 06 F6 | 	mov	arg02, #0
25ce4     30 16 06 F6 | 	mov	arg03, #48
25ce8     98 00 A0 FD | 	call	#\builtin_bytefill_
25cec     08 00 06 F1 | 	add	_var01, #8
25cf0     08 00 80 FF 
25cf4     00 FF 6B FC | 	wrlong	##4607, _var01
25cf8     00 FA 05 F6 | 	mov	result1, #0
25cfc                 | __system____root_stat_ret
25cfc     2D 00 64 FD | 	ret
25d00                 | 
25d00                 | __system___normalizeName
25d00     00 00 06 F6 | 	mov	_var01, #0
25d04     09 03 02 F6 | 	mov	_var02, arg01
25d08     01 05 02 F6 | 	mov	_var03, _var02
25d0c                 | LR__3720
25d0c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25d10     5C 01 90 AD |  if_e	jmp	#LR__3739
25d14     00 00 0E F2 | 	cmp	_var01, #0 wz
25d18     02 07 02 56 |  if_ne	mov	_var04, _var03
25d1c     01 04 06 51 |  if_ne	add	_var03, #1
25d20     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25d24     00 00 06 56 |  if_ne	mov	_var01, #0
25d28     01 07 C2 FA | 	rdbyte	_var04, _var02
25d2c     2E 06 0E F2 | 	cmp	_var04, #46 wz
25d30     D8 00 90 5D |  if_ne	jmp	#LR__3732
25d34     01 02 06 F1 | 	add	_var02, #1
25d38     01 07 C2 FA | 	rdbyte	_var04, _var02
25d3c     01 02 86 F1 | 	sub	_var02, #1
25d40     2F 06 0E F2 | 	cmp	_var04, #47 wz
25d44     18 00 90 AD |  if_e	jmp	#LR__3721
25d48     01 02 06 F1 | 	add	_var02, #1
25d4c     01 09 C2 FA | 	rdbyte	_var05, _var02
25d50     01 02 86 F1 | 	sub	_var02, #1
25d54     04 0B 02 F6 | 	mov	_var06, _var05
25d58     07 0A 4E F7 | 	zerox	_var06, #7 wz
25d5c     10 00 90 5D |  if_ne	jmp	#LR__3722
25d60                 | LR__3721
25d60     01 0D 02 F6 | 	mov	_var07, _var02
25d64     01 0C 06 F1 | 	add	_var07, #1
25d68     06 03 02 F6 | 	mov	_var02, _var07
25d6c     E0 00 90 FD | 	jmp	#LR__3736
25d70                 | LR__3722
25d70     01 02 06 F1 | 	add	_var02, #1
25d74     01 0D C2 FA | 	rdbyte	_var07, _var02
25d78     01 02 86 F1 | 	sub	_var02, #1
25d7c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25d80     2E 06 0E F2 | 	cmp	_var04, #46 wz
25d84     84 00 90 5D |  if_ne	jmp	#LR__3731
25d88     02 02 06 F1 | 	add	_var02, #2
25d8c     01 0D C2 FA | 	rdbyte	_var07, _var02
25d90     02 02 86 F1 | 	sub	_var02, #2
25d94     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25d98     2F 06 0E F2 | 	cmp	_var04, #47 wz
25d9c     18 00 90 AD |  if_e	jmp	#LR__3723
25da0     02 02 06 F1 | 	add	_var02, #2
25da4     01 09 C2 FA | 	rdbyte	_var05, _var02
25da8     02 02 86 F1 | 	sub	_var02, #2
25dac     04 0B 02 F6 | 	mov	_var06, _var05
25db0     07 0A 4E F7 | 	zerox	_var06, #7 wz
25db4     54 00 90 5D |  if_ne	jmp	#LR__3730
25db8                 | LR__3723
25db8     02 02 06 F1 | 	add	_var02, #2
25dbc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25dc0     40 00 90 ED |  if_be	jmp	#LR__3729
25dc4     02 0F 02 F6 | 	mov	_var08, _var03
25dc8     01 0E 86 F1 | 	sub	_var08, #1
25dcc                 | LR__3724
25dcc     07 07 C2 FA | 	rdbyte	_var04, _var08
25dd0     2F 06 0E F2 | 	cmp	_var04, #47 wz
25dd4     0C 00 90 5D |  if_ne	jmp	#LR__3725
25dd8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25ddc     01 0E 86 11 |  if_a	sub	_var08, #1
25de0     E8 FF 9F 1D |  if_a	jmp	#LR__3724
25de4                 | LR__3725
25de4     97 0C 48 FB | 	callpa	#(@LR__3727-@LR__3726)>>2,fcache_load_ptr_
25de8                 | LR__3726
25de8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25dec     10 00 90 ED |  if_be	jmp	#LR__3728
25df0     07 07 C2 FA | 	rdbyte	_var04, _var08
25df4     2F 06 0E F2 | 	cmp	_var04, #47 wz
25df8     01 0E 86 51 |  if_ne	sub	_var08, #1
25dfc     E8 FF 9F 5D |  if_ne	jmp	#LR__3726
25e00                 | LR__3727
25e00                 | LR__3728
25e00     07 05 02 F6 | 	mov	_var03, _var08
25e04                 | LR__3729
25e04     01 00 06 F6 | 	mov	_var01, #1
25e08     44 00 90 FD | 	jmp	#LR__3736
25e0c                 | LR__3730
25e0c                 | LR__3731
25e0c                 | LR__3732
25e0c     97 18 48 FB | 	callpa	#(@LR__3734-@LR__3733)>>2,fcache_load_ptr_
25e10                 | LR__3733
25e10     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25e14     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25e18     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25e1c     20 00 90 AD |  if_e	jmp	#LR__3735
25e20     01 0B 02 F6 | 	mov	_var06, _var02
25e24     01 09 02 F6 | 	mov	_var05, _var02
25e28     01 08 06 F1 | 	add	_var05, #1
25e2c     05 11 C2 FA | 	rdbyte	_var09, _var06
25e30     04 03 02 F6 | 	mov	_var02, _var05
25e34     02 11 42 FC | 	wrbyte	_var09, _var03
25e38     01 04 06 F1 | 	add	_var03, #1
25e3c     D0 FF 9F FD | 	jmp	#LR__3733
25e40                 | LR__3734
25e40                 | LR__3735
25e40     01 07 C2 FA | 	rdbyte	_var04, _var02
25e44     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e48     C0 FE 9F 5D |  if_ne	jmp	#LR__3720
25e4c     01 00 06 F6 | 	mov	_var01, #1
25e50                 | LR__3736
25e50     97 0C 48 FB | 	callpa	#(@LR__3738-@LR__3737)>>2,fcache_load_ptr_
25e54                 | LR__3737
25e54     01 07 C2 FA | 	rdbyte	_var04, _var02
25e58     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e5c     01 0D 02 A6 |  if_e	mov	_var07, _var02
25e60     01 0C 06 A1 |  if_e	add	_var07, #1
25e64     06 03 02 A6 |  if_e	mov	_var02, _var07
25e68     E8 FF 9F AD |  if_e	jmp	#LR__3737
25e6c                 | LR__3738
25e6c     9C FE 9F FD | 	jmp	#LR__3720
25e70                 | LR__3739
25e70     02 01 48 FC | 	wrbyte	#0, _var03
25e74                 | __system___normalizeName_ret
25e74     2D 00 64 FD | 	ret
25e78                 | 
25e78                 | __system___strrev
25e78     09 01 CA FA | 	rdbyte	_var01, arg01 wz
25e7c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
25e80     09 03 02 F6 | 	mov	_var02, arg01
25e84     97 1A 48 FB | 	callpa	#(@LR__3742-@LR__3740)>>2,fcache_load_ptr_
25e88                 | LR__3740
25e88     01 01 CA FA | 	rdbyte	_var01, _var02 wz
25e8c     01 02 06 51 |  if_ne	add	_var02, #1
25e90     F4 FF 9F 5D |  if_ne	jmp	#LR__3740
25e94     01 02 86 F1 | 	sub	_var02, #1
25e98                 | LR__3741
25e98     09 03 5A F2 | 	cmps	_var02, arg01 wcz
25e9c     1C 00 90 ED |  if_be	jmp	#LR__3743
25ea0     09 01 C2 FA | 	rdbyte	_var01, arg01
25ea4     01 05 C2 FA | 	rdbyte	_var03, _var02
25ea8     09 05 42 FC | 	wrbyte	_var03, arg01
25eac     01 01 42 FC | 	wrbyte	_var01, _var02
25eb0     01 12 06 F1 | 	add	arg01, #1
25eb4     01 02 86 F1 | 	sub	_var02, #1
25eb8     DC FF 9F FD | 	jmp	#LR__3741
25ebc                 | LR__3742
25ebc                 | LR__3743
25ebc                 | __system___strrev_ret
25ebc     2D 00 64 FD | 	ret
25ec0                 | 
25ec0                 | __system___fmtpad
25ec0     06 4A 05 F6 | 	mov	COUNT_, #6
25ec4     A8 00 A0 FD | 	call	#pushregs_
25ec8     09 1F 02 F6 | 	mov	local01, arg01
25ecc     0A 21 02 F6 | 	mov	local02, arg02
25ed0     0B 23 02 F6 | 	mov	local03, arg03
25ed4     10 13 EA F8 | 	getbyte	arg01, local02, #1
25ed8     16 20 46 F0 | 	shr	local02, #22
25edc     03 20 0E F5 | 	and	local02, #3 wz
25ee0     00 24 06 F6 | 	mov	local04, #0
25ee4     01 20 06 A6 |  if_e	mov	local02, #1
25ee8     0C 21 CA F7 | 	test	local02, arg04 wz
25eec     00 FA 05 A6 |  if_e	mov	result1, #0
25ef0     88 00 90 AD |  if_e	jmp	#LR__3753
25ef4     09 23 C2 F2 | 	subr	local03, arg01
25ef8     01 22 56 F2 | 	cmps	local03, #1 wc
25efc     00 FA 05 C6 |  if_b	mov	result1, #0
25f00     78 00 90 CD |  if_b	jmp	#LR__3753
25f04     03 20 0E F2 | 	cmp	local02, #3 wz
25f08     18 00 90 5D |  if_ne	jmp	#LR__3750
25f0c     01 18 0E F2 | 	cmp	arg04, #1 wz
25f10     6E 20 62 FD | 	wrz	local02
25f14     10 23 02 F1 | 	add	local03, local02
25f18     11 23 52 F6 | 	abs	local03, local03 wc
25f1c     01 22 46 F0 | 	shr	local03, #1
25f20     11 23 82 F6 | 	negc	local03, local03
25f24                 | LR__3750
25f24     01 22 56 F2 | 	cmps	local03, #1 wc
25f28     4C 00 90 CD |  if_b	jmp	#LR__3752
25f2c     11 27 02 F6 | 	mov	local05, local03
25f30                 | LR__3751
25f30     0F 21 02 F6 | 	mov	local02, local01
25f34     0F 29 02 F6 | 	mov	local06, local01
25f38     13 20 46 F7 | 	zerox	local02, #19
25f3c     14 28 46 F0 | 	shr	local06, #20
25f40     02 28 66 F0 | 	shl	local06, #2
25f44     ED 28 02 F1 | 	add	local06, __methods__
25f48     14 29 02 FB | 	rdlong	local06, local06
25f4c     20 12 06 F6 | 	mov	arg01, #32
25f50     F2 22 02 F6 | 	mov	local03, objptr
25f54     10 E5 01 F6 | 	mov	objptr, local02
25f58     2D 28 62 FD | 	call	local06
25f5c     11 E5 01 F6 | 	mov	objptr, local03
25f60     FD 28 02 F6 | 	mov	local06, result1
25f64     00 28 56 F2 | 	cmps	local06, #0 wc
25f68     14 FB 01 C6 |  if_b	mov	result1, local06
25f6c     0C 00 90 CD |  if_b	jmp	#LR__3753
25f70     14 25 02 F1 | 	add	local04, local06
25f74     EE 27 6E FB | 	djnz	local05, #LR__3751
25f78                 | LR__3752
25f78     12 FB 01 F6 | 	mov	result1, local04
25f7c                 | LR__3753
25f7c     A7 F0 03 F6 | 	mov	ptra, fp
25f80     B2 00 A0 FD | 	call	#popregs_
25f84                 | __system___fmtpad_ret
25f84     2D 00 64 FD | 	ret
25f88                 | 
25f88                 | __system___uitoa
25f88     04 4A 05 F6 | 	mov	COUNT_, #4
25f8c     A8 00 A0 FD | 	call	#pushregs_
25f90     09 1F 02 F6 | 	mov	local01, arg01
25f94     00 1A 4E F2 | 	cmps	arg05, #0 wz
25f98     0F 1B 02 F6 | 	mov	arg05, local01
25f9c     00 20 06 F6 | 	mov	local02, #0
25fa0     37 22 06 56 |  if_ne	mov	local03, #55
25fa4     57 22 06 A6 |  if_e	mov	local03, #87
25fa8                 | LR__3760
25fa8     0B 15 12 FD | 	qdiv	arg02, arg03
25fac     19 24 62 FD | 	getqy	local04
25fb0     0B 15 12 FD | 	qdiv	arg02, arg03
25fb4     0A 24 16 F2 | 	cmp	local04, #10 wc
25fb8     30 24 06 C1 |  if_b	add	local04, #48
25fbc     11 25 02 31 |  if_ae	add	local04, local03
25fc0     0D 25 42 FC | 	wrbyte	local04, arg05
25fc4     01 1A 06 F1 | 	add	arg05, #1
25fc8     01 20 06 F1 | 	add	local02, #1
25fcc     18 14 62 FD | 	getqx	arg02
25fd0     00 14 0E F2 | 	cmp	arg02, #0 wz
25fd4     D0 FF 9F 5D |  if_ne	jmp	#LR__3760
25fd8     0C 21 12 F2 | 	cmp	local02, arg04 wc
25fdc     C8 FF 9F CD |  if_b	jmp	#LR__3760
25fe0     0D 01 48 FC | 	wrbyte	#0, arg05
25fe4     0F 13 02 F6 | 	mov	arg01, local01
25fe8     8C FE BF FD | 	call	#__system___strrev
25fec     10 FB 01 F6 | 	mov	result1, local02
25ff0     A7 F0 03 F6 | 	mov	ptra, fp
25ff4     B2 00 A0 FD | 	call	#popregs_
25ff8                 | __system___uitoa_ret
25ff8     2D 00 64 FD | 	ret
25ffc                 | 
25ffc                 | __system__disassemble_0500
25ffc     10 4A 05 F6 | 	mov	COUNT_, #16
26000     A8 00 A0 FD | 	call	#pushregs_
26004     09 1F 02 F6 | 	mov	local01, arg01
26008     0A 21 02 F6 | 	mov	local02, arg02
2600c     0B 23 02 F6 | 	mov	local03, arg03
26010     0C 25 02 F6 | 	mov	local04, arg04
26014     0D 27 02 F6 | 	mov	local05, arg05
26018     13 13 52 F6 | 	abs	arg01, local05 wc
2601c     1F 28 C6 C9 |  if_b	decod	local06, #31
26020     00 28 06 36 |  if_ae	mov	local06, #0
26024     CC CF BF FD | 	call	#__system___float_fromuns
26028     14 FB 61 F5 | 	xor	result1, local06
2602c     FD 2A 02 F6 | 	mov	local07, result1
26030     00 2C 06 F6 | 	mov	local08, #0
26034     0F 13 02 F6 | 	mov	arg01, local01
26038     00 14 06 F6 | 	mov	arg02, #0
2603c     01 16 06 F6 | 	mov	arg03, #1
26040     E8 D7 BF FD | 	call	#__system___float_cmp
26044     00 FA 0D F2 | 	cmp	result1, #0 wz
26048     00 2E 06 A6 |  if_e	mov	local09, #0
2604c     10 01 68 AC |  if_e	wrlong	#0, local02
26050     11 2F 62 AC |  if_e	wrlong	local09, local03
26054     8C 01 90 AD |  if_e	jmp	#LR__3782
26058     0F 13 02 F6 | 	mov	arg01, local01
2605c     BC DC BF FD | 	call	#__system____builtin_ilogb
26060     FD 30 02 F6 | 	mov	local10, result1
26064     0A 26 0E F2 | 	cmp	local05, #10 wz
26068     24 00 90 5D |  if_ne	jmp	#LR__3770
2606c     18 2F 02 F6 | 	mov	local09, local10
26070     01 2E 66 F0 | 	shl	local09, #1
26074     18 2F 02 F1 | 	add	local09, local10
26078     17 31 52 F6 | 	abs	local10, local09 wc
2607c     0A 30 16 FD | 	qdiv	local10, #10
26080     09 32 06 F6 | 	mov	local11, #9
26084     18 30 62 FD | 	getqx	local10
26088     18 31 82 F6 | 	negc	local10, local10
2608c     04 00 90 FD | 	jmp	#LR__3771
26090                 | LR__3770
26090     18 32 06 F6 | 	mov	local11, #24
26094                 | LR__3771
26094                 | LR__3772
26094     08 2C 56 F2 | 	cmps	local08, #8 wc
26098     01 2C 06 F1 | 	add	local08, #1
2609c     60 00 90 3D |  if_ae	jmp	#LR__3773
260a0     00 C0 1F FF 
260a4     00 12 06 F6 | 	mov	arg01, ##1065353216
260a8     15 15 02 F6 | 	mov	arg02, local07
260ac     18 17 02 F6 | 	mov	arg03, local10
260b0     4C E3 BF FD | 	call	#__system___float_pow_n
260b4     FD 14 02 F6 | 	mov	arg02, result1
260b8     0F 13 02 F6 | 	mov	arg01, local01
260bc     3C D5 BF FD | 	call	#__system___float_div
260c0     FD 34 02 F6 | 	mov	local12, result1
260c4     1A 13 02 F6 | 	mov	arg01, local12
260c8     00 C0 1F FF 
260cc     00 14 06 F6 | 	mov	arg02, ##1065353216
260d0     01 16 06 F6 | 	mov	arg03, #1
260d4     54 D7 BF FD | 	call	#__system___float_cmp
260d8     00 FA 55 F2 | 	cmps	result1, #0 wc
260dc     01 30 86 C1 |  if_b	sub	local10, #1
260e0     B0 FF 9F CD |  if_b	jmp	#LR__3772
260e4     15 15 02 F6 | 	mov	arg02, local07
260e8     1A 13 02 F6 | 	mov	arg01, local12
260ec     01 16 66 F6 | 	neg	arg03, #1
260f0     38 D7 BF FD | 	call	#__system___float_cmp
260f4     00 FA 55 F2 | 	cmps	result1, #0 wc
260f8     01 30 06 31 |  if_ae	add	local10, #1
260fc     94 FF 9F 3D |  if_ae	jmp	#LR__3772
26100                 | LR__3773
26100     1A 13 02 F6 | 	mov	arg01, local12
26104     14 DC BF FD | 	call	#__system____builtin_ilogb
26108     FD 36 02 F6 | 	mov	local13, result1
2610c     1A 39 02 F6 | 	mov	local14, local12
26110     17 39 06 F4 | 	bitl	local14, #279
26114     17 38 26 F4 | 	bith	local14, #23
26118     1B 39 62 F0 | 	shl	local14, local13
2611c     02 26 0E F2 | 	cmp	local05, #2 wz
26120     02 24 66 A0 |  if_e	shl	local04, #2
26124     00 3A 06 F6 | 	mov	local15, #0
26128     00 24 56 F2 | 	cmps	local04, #0 wc
2612c     10 00 90 3D |  if_ae	jmp	#LR__3774
26130     18 25 C2 F2 | 	subr	local04, local10
26134     00 24 56 F2 | 	cmps	local04, #0 wc
26138     A0 00 90 CD |  if_b	jmp	#LR__3781
2613c     04 00 90 FD | 	jmp	#LR__3775
26140                 | LR__3774
26140     01 24 06 F1 | 	add	local04, #1
26144                 | LR__3775
26144     19 25 7A F3 | 	fles	local04, local11 wcz
26148     01 3C 06 F6 | 	mov	local16, #1
2614c     97 22 48 FB | 	callpa	#(@LR__3777-@LR__3776)>>2,fcache_load_ptr_
26150                 | LR__3776
26150     00 40 00 FF 
26154     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26158     38 00 90 3D |  if_ae	jmp	#LR__3778
2615c     01 24 56 F2 | 	cmps	local04, #1 wc
26160     01 24 86 F1 | 	sub	local04, #1
26164     2C 00 90 CD |  if_b	jmp	#LR__3778
26168     13 3B 02 FD | 	qmul	local15, local05
2616c     1C 37 02 F6 | 	mov	local13, local14
26170     17 36 46 F0 | 	shr	local13, #23
26174     17 39 06 F4 | 	bitl	local14, #279
26178     18 3A 62 FD | 	getqx	local15
2617c     13 3D 02 FD | 	qmul	local16, local05
26180     18 3C 62 FD | 	getqx	local16
26184     13 39 02 FD | 	qmul	local14, local05
26188     1B 3B 02 F1 | 	add	local15, local13
2618c     18 38 62 FD | 	getqx	local14
26190     BC FF 9F FD | 	jmp	#LR__3776
26194                 | LR__3777
26194                 | LR__3778
26194     13 2F 02 F6 | 	mov	local09, local05
26198     17 2E 66 F0 | 	shl	local09, #23
2619c     17 37 52 F6 | 	abs	local13, local09 wc
261a0     01 36 46 F0 | 	shr	local13, #1
261a4     1B 37 82 F6 | 	negc	local13, local13
261a8     1B 39 1A F2 | 	cmp	local14, local13 wcz
261ac     20 00 90 1D |  if_a	jmp	#LR__3779
261b0     17 26 66 F0 | 	shl	local05, #23
261b4     13 37 52 F6 | 	abs	local13, local05 wc
261b8     01 36 46 F0 | 	shr	local13, #1
261bc     1B 37 82 F6 | 	negc	local13, local13
261c0     1B 39 0A F2 | 	cmp	local14, local13 wz
261c4     14 00 90 5D |  if_ne	jmp	#LR__3780
261c8     01 3A CE F7 | 	test	local15, #1 wz
261cc     0C 00 90 AD |  if_e	jmp	#LR__3780
261d0                 | LR__3779
261d0     01 3A 06 F1 | 	add	local15, #1
261d4     1E 3B 0A F2 | 	cmp	local15, local16 wz
261d8     01 30 06 A1 |  if_e	add	local10, #1
261dc                 | LR__3780
261dc                 | LR__3781
261dc     10 3B 62 FC | 	wrlong	local15, local02
261e0     11 31 62 FC | 	wrlong	local10, local03
261e4                 | LR__3782
261e4     A7 F0 03 F6 | 	mov	ptra, fp
261e8     B2 00 A0 FD | 	call	#popregs_
261ec                 | __system__disassemble_0500_ret
261ec     2D 00 64 FD | 	ret
261f0                 | 
261f0                 | __system__emitsign_0502
261f0     00 FA 05 F6 | 	mov	result1, #0
261f4     00 14 0E F2 | 	cmp	arg02, #0 wz
261f8     09 01 02 56 |  if_ne	mov	_var01, arg01
261fc     01 12 06 51 |  if_ne	add	arg01, #1
26200     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
26204     01 FA 05 56 |  if_ne	mov	result1, #1
26208     00 16 0E F2 | 	cmp	arg03, #0 wz
2620c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
26210     01 12 06 51 |  if_ne	add	arg01, #1
26214     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
26218     02 FA 05 51 |  if_ne	add	result1, #2
2621c                 | __system__emitsign_0502_ret
2621c     2D 00 64 FD | 	ret
26220                 | 
26220                 | __system___gettxfunc
26220     01 4A 05 F6 | 	mov	COUNT_, #1
26224     A8 00 A0 FD | 	call	#pushregs_
26228     A0 F8 BF FD | 	call	#__system____getftab
2622c     FD 1E 0A F6 | 	mov	local01, result1 wz
26230     10 00 90 AD |  if_e	jmp	#LR__3790
26234     08 1E 06 F1 | 	add	local01, #8
26238     0F 15 0A FB | 	rdlong	arg02, local01 wz
2623c     08 1E 86 F1 | 	sub	local01, #8
26240     08 00 90 5D |  if_ne	jmp	#LR__3791
26244                 | LR__3790
26244     00 FA 05 F6 | 	mov	result1, #0
26248     0C 00 90 FD | 	jmp	#LR__3792
2624c                 | LR__3791
2624c     00 90 04 FF 
26250     00 1E 46 F5 | 	or	local01, ##153092096
26254     0F FB 01 F6 | 	mov	result1, local01
26258                 | LR__3792
26258     A7 F0 03 F6 | 	mov	ptra, fp
2625c     B2 00 A0 FD | 	call	#popregs_
26260                 | __system___gettxfunc_ret
26260     2D 00 64 FD | 	ret
26264                 | 
26264                 | __system___getrxfunc
26264     01 4A 05 F6 | 	mov	COUNT_, #1
26268     A8 00 A0 FD | 	call	#pushregs_
2626c     5C F8 BF FD | 	call	#__system____getftab
26270     FD 1E 0A F6 | 	mov	local01, result1 wz
26274     10 00 90 AD |  if_e	jmp	#LR__3800
26278     08 1E 06 F1 | 	add	local01, #8
2627c     0F 15 0A FB | 	rdlong	arg02, local01 wz
26280     08 1E 86 F1 | 	sub	local01, #8
26284     08 00 90 5D |  if_ne	jmp	#LR__3801
26288                 | LR__3800
26288     00 FA 05 F6 | 	mov	result1, #0
2628c     0C 00 90 FD | 	jmp	#LR__3802
26290                 | LR__3801
26290     00 98 04 FF 
26294     00 1E 46 F5 | 	or	local01, ##154140672
26298     0F FB 01 F6 | 	mov	result1, local01
2629c                 | LR__3802
2629c     A7 F0 03 F6 | 	mov	ptra, fp
262a0     B2 00 A0 FD | 	call	#popregs_
262a4                 | __system___getrxfunc_ret
262a4     2D 00 64 FD | 	ret
262a8                 | 
262a8                 | __system___getiolock_0542
262a8     01 4A 05 F6 | 	mov	COUNT_, #1
262ac     A8 00 A0 FD | 	call	#pushregs_
262b0     18 F8 BF FD | 	call	#__system____getftab
262b4     FD 1E 0A F6 | 	mov	local01, result1 wz
262b8     10 00 90 AD |  if_e	jmp	#LR__3810
262bc     08 1E 06 F1 | 	add	local01, #8
262c0     0F FB 09 FB | 	rdlong	result1, local01 wz
262c4     08 1E 86 F1 | 	sub	local01, #8
262c8     18 00 90 5D |  if_ne	jmp	#LR__3811
262cc                 | LR__3810
262cc     01 00 00 FF 
262d0     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
262d4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
262d8     01 00 00 FF 
262dc     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
262e0     08 00 90 FD | 	jmp	#LR__3812
262e4                 | LR__3811
262e4     0C 1E 06 F1 | 	add	local01, #12
262e8     0F FB 01 F6 | 	mov	result1, local01
262ec                 | LR__3812
262ec     A7 F0 03 F6 | 	mov	ptra, fp
262f0     B2 00 A0 FD | 	call	#popregs_
262f4                 | __system___getiolock_0542_ret
262f4     2D 00 64 FD | 	ret
262f8                 | 
262f8                 | __system____ScanForChar
262f8     09 01 02 F6 | 	mov	_var01, arg01
262fc     09 03 02 F6 | 	mov	_var02, arg01
26300     97 06 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
26304                 | LR__3820
26304     01 FB C9 FA | 	rdbyte	result1, _var02 wz
26308     01 02 06 51 |  if_ne	add	_var02, #1
2630c     F4 FF 9F 5D |  if_ne	jmp	#LR__3820
26310                 | LR__3821
26310     09 03 82 F1 | 	sub	_var02, arg01
26314     01 FB 01 F6 | 	mov	result1, _var02
26318     FD 12 0A F6 | 	mov	arg01, result1 wz
2631c     00 FA 05 A6 |  if_e	mov	result1, #0
26320     B8 00 90 AD |  if_e	jmp	#LR__3828
26324     0A 05 02 F6 | 	mov	_var03, arg02
26328     07 04 4E F7 | 	zerox	_var03, #7 wz
2632c     00 FA 05 A6 |  if_e	mov	result1, #0
26330     A8 00 90 AD |  if_e	jmp	#LR__3828
26334     01 16 16 F2 | 	cmp	arg03, #1 wc
26338     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2633c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26340     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
26344     94 00 90 4D |  if_c_and_nz	jmp	#LR__3828
26348     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2634c     10 00 90 ED |  if_be	jmp	#LR__3822
26350     00 18 0E F2 | 	cmp	arg04, #0 wz
26354     00 FA 05 A6 |  if_e	mov	result1, #0
26358     80 00 90 AD |  if_e	jmp	#LR__3828
2635c     09 17 02 F6 | 	mov	arg03, arg01
26360                 | LR__3822
26360     01 16 86 F1 | 	sub	arg03, #1
26364     00 18 0E F2 | 	cmp	arg04, #0 wz
26368     38 00 90 5D |  if_ne	jmp	#LR__3824
2636c     0B 07 02 F6 | 	mov	_var04, arg03
26370     09 09 02 F6 | 	mov	_var05, arg01
26374                 | LR__3823
26374     04 07 12 F2 | 	cmp	_var04, _var05 wc
26378     5C 00 90 3D |  if_ae	jmp	#LR__3827
2637c     03 05 02 F6 | 	mov	_var03, _var04
26380     00 05 02 F1 | 	add	_var03, _var01
26384     02 05 C2 FA | 	rdbyte	_var03, _var03
26388     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2638c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26390     01 06 06 A1 |  if_e	add	_var04, #1
26394     03 FB 01 A6 |  if_e	mov	result1, _var04
26398     40 00 90 AD |  if_e	jmp	#LR__3828
2639c     01 06 06 F1 | 	add	_var04, #1
263a0     D0 FF 9F FD | 	jmp	#LR__3823
263a4                 | LR__3824
263a4     0B 07 02 F6 | 	mov	_var04, arg03
263a8                 | LR__3825
263a8     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
263ac     28 00 90 1D |  if_a	jmp	#LR__3826
263b0     03 09 02 F6 | 	mov	_var05, _var04
263b4     00 09 02 F1 | 	add	_var05, _var01
263b8     04 05 C2 FA | 	rdbyte	_var03, _var05
263bc     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
263c0     04 05 0A F2 | 	cmp	_var03, _var05 wz
263c4     01 06 06 A1 |  if_e	add	_var04, #1
263c8     03 FB 01 A6 |  if_e	mov	result1, _var04
263cc     0C 00 90 AD |  if_e	jmp	#LR__3828
263d0     01 06 86 F1 | 	sub	_var04, #1
263d4     D0 FF 9F FD | 	jmp	#LR__3825
263d8                 | LR__3826
263d8                 | LR__3827
263d8     00 FA 05 F6 | 	mov	result1, #0
263dc                 | LR__3828
263dc                 | __system____ScanForChar_ret
263dc     2D 00 64 FD | 	ret
263e0                 | 
263e0                 | __system___basic_dir
263e0     05 4A 05 F6 | 	mov	COUNT_, #5
263e4     A8 00 A0 FD | 	call	#pushregs_
263e8     4C F0 07 F1 | 	add	ptra, #76
263ec     04 4E 05 F1 | 	add	fp, #4
263f0     A7 12 62 FC | 	wrlong	arg01, fp
263f4     04 4E 05 F1 | 	add	fp, #4
263f8     A7 14 62 FC | 	wrlong	arg02, fp
263fc     04 4E 85 F1 | 	sub	fp, #4
26400     A7 14 0A FB | 	rdlong	arg02, fp wz
26404     04 4E 85 F1 | 	sub	fp, #4
26408     04 4E 05 51 |  if_ne	add	fp, #4
2640c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26410     04 4E 85 51 |  if_ne	sub	fp, #4
26414     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
26418     70 00 90 AD |  if_e	jmp	#LR__3830
2641c     03 00 00 FF 
26420     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26424     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26428     03 00 00 FF 
2642c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26430     03 00 00 5F 
26434     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
26438     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2643c     03 00 00 5F 
26440     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
26444     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26448     80 01 00 FF 
2644c     F8 12 06 F6 | 	mov	arg01, ##@LR__4998
26450     E0 E8 BF FD | 	call	#__system__opendir
26454     03 00 00 FF 
26458     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2645c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26460     08 4E 05 F1 | 	add	fp, #8
26464     A7 20 02 FB | 	rdlong	local02, fp
26468     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2646c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26470     04 4E 85 F1 | 	sub	fp, #4
26474     A7 20 02 FB | 	rdlong	local02, fp
26478     04 4E 85 F1 | 	sub	fp, #4
2647c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26480     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26484     03 00 00 FF 
26488     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2648c                 | LR__3830
2648c     03 00 00 FF 
26490     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26494     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26498     03 00 00 FF 
2649c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264a0     80 01 00 AF 
264a4     FA FA 05 A6 |  if_e	mov	result1, ##@LR__4999
264a8     84 02 90 AD |  if_e	jmp	#LR__3843
264ac                 | LR__3831
264ac     03 00 00 FF 
264b0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264b4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
264b8     03 00 00 FF 
264bc     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264c0     D0 E9 BF FD | 	call	#__system__readdir
264c4     0C 4E 05 F1 | 	add	fp, #12
264c8     A7 FA 61 FC | 	wrlong	result1, fp
264cc     0C 4E 85 F1 | 	sub	fp, #12
264d0     00 FA 0D F2 | 	cmp	result1, #0 wz
264d4     38 00 90 5D |  if_ne	jmp	#LR__3832
264d8     03 00 00 FF 
264dc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264e0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
264e4     03 00 00 FF 
264e8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264ec     30 E9 BF FD | 	call	#__system__closedir
264f0     03 00 00 FF 
264f4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264f8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
264fc     03 00 00 FF 
26500     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26504     80 01 00 FF 
26508     FC FA 05 F6 | 	mov	result1, ##@LR__5000
2650c     20 02 90 FD | 	jmp	#LR__3843
26510                 | LR__3832
26510     0C 4E 05 F1 | 	add	fp, #12
26514     A7 12 02 FB | 	rdlong	arg01, fp
26518     0C 4E 85 F1 | 	sub	fp, #12
2651c     03 00 00 FF 
26520     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
26524     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
26528     03 00 00 FF 
2652c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26530     10 09 B0 FD | 	call	#__system___pat_match
26534     00 FA 0D F2 | 	cmp	result1, #0 wz
26538     70 FF 9F AD |  if_e	jmp	#LR__3831
2653c     03 00 00 FF 
26540     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26544     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26548     03 00 00 FF 
2654c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26550     78 01 90 AD |  if_e	jmp	#LR__3839
26554     0C 4E 05 F1 | 	add	fp, #12
26558     A7 12 02 FB | 	rdlong	arg01, fp
2655c     04 4E 05 F1 | 	add	fp, #4
26560     A7 14 02 F6 | 	mov	arg02, fp
26564     10 4E 85 F1 | 	sub	fp, #16
26568     2C F2 BF FD | 	call	#__system__stat
2656c     40 4E 05 F1 | 	add	fp, #64
26570     A7 FA 61 FC | 	wrlong	result1, fp
26574     40 4E 85 F1 | 	sub	fp, #64
26578     00 FA 0D F2 | 	cmp	result1, #0 wz
2657c     80 01 00 5F 
26580     FE FA 05 56 |  if_ne	mov	result1, ##@LR__5001
26584     A8 01 90 5D |  if_ne	jmp	#LR__3843
26588     18 4E 05 F1 | 	add	fp, #24
2658c     A7 20 02 FB | 	rdlong	local02, fp
26590     78 00 00 FF 
26594     00 20 06 F5 | 	and	local02, ##61440
26598     2C 4E 05 F1 | 	add	fp, #44
2659c     A7 20 62 FC | 	wrlong	local02, fp
265a0     38 4E 85 F1 | 	sub	fp, #56
265a4     A7 20 02 FB | 	rdlong	local02, fp
265a8     0C 4E 85 F1 | 	sub	fp, #12
265ac     10 21 C2 FA | 	rdbyte	local02, local02
265b0     2E 20 0E F2 | 	cmp	local02, #46 wz
265b4     08 4E 05 A1 |  if_e	add	fp, #8
265b8     A7 04 68 AC |  if_e	wrlong	#2, fp
265bc     08 4E C5 F3 | 	sumz	fp, #8
265c0     A7 00 68 5C |  if_ne	wrlong	#0, fp
265c4     08 4E 85 51 |  if_ne	sub	fp, #8
265c8     44 4E 05 F1 | 	add	fp, #68
265cc     A7 20 02 FB | 	rdlong	local02, fp
265d0     44 4E 85 F1 | 	sub	fp, #68
265d4     08 00 00 FF 
265d8     00 20 0E F2 | 	cmp	local02, ##4096 wz
265dc     18 00 90 5D |  if_ne	jmp	#LR__3833
265e0     08 4E 05 F1 | 	add	fp, #8
265e4     A7 20 02 FB | 	rdlong	local02, fp
265e8     10 20 46 F5 | 	or	local02, #16
265ec     A7 20 62 FC | 	wrlong	local02, fp
265f0     08 4E 85 F1 | 	sub	fp, #8
265f4     AC 00 90 FD | 	jmp	#LR__3838
265f8                 | LR__3833
265f8     44 4E 05 F1 | 	add	fp, #68
265fc     A7 20 02 FB | 	rdlong	local02, fp
26600     44 4E 85 F1 | 	sub	fp, #68
26604     10 00 00 FF 
26608     00 20 0E F2 | 	cmp	local02, ##8192 wz
2660c     44 4E 05 51 |  if_ne	add	fp, #68
26610     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26614     44 4E 85 51 |  if_ne	sub	fp, #68
26618     18 00 00 5F 
2661c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
26620     44 4E 05 51 |  if_ne	add	fp, #68
26624     0F 23 02 56 |  if_ne	mov	local03, local01
26628     44 4E 85 51 |  if_ne	sub	fp, #68
2662c     20 00 00 5F 
26630     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
26634     18 00 90 5D |  if_ne	jmp	#LR__3834
26638     08 4E 05 F1 | 	add	fp, #8
2663c     A7 20 02 FB | 	rdlong	local02, fp
26640     04 20 46 F5 | 	or	local02, #4
26644     A7 20 62 FC | 	wrlong	local02, fp
26648     08 4E 85 F1 | 	sub	fp, #8
2664c     54 00 90 FD | 	jmp	#LR__3837
26650                 | LR__3834
26650     18 4E 05 F1 | 	add	fp, #24
26654     A7 20 02 FB | 	rdlong	local02, fp
26658     18 4E 85 F1 | 	sub	fp, #24
2665c     92 20 CE F7 | 	test	local02, #146 wz
26660     18 00 90 5D |  if_ne	jmp	#LR__3835
26664     08 4E 05 F1 | 	add	fp, #8
26668     A7 20 02 FB | 	rdlong	local02, fp
2666c     01 20 46 F5 | 	or	local02, #1
26670     A7 20 62 FC | 	wrlong	local02, fp
26674     08 4E 85 F1 | 	sub	fp, #8
26678     28 00 90 FD | 	jmp	#LR__3836
2667c                 | LR__3835
2667c     44 4E 05 F1 | 	add	fp, #68
26680     A7 24 02 FB | 	rdlong	local04, fp
26684     44 4E 85 F1 | 	sub	fp, #68
26688     08 00 00 FF 
2668c     00 24 0E F2 | 	cmp	local04, ##4096 wz
26690     08 4E 05 51 |  if_ne	add	fp, #8
26694     A7 24 02 5B |  if_ne	rdlong	local04, fp
26698     20 24 46 55 |  if_ne	or	local04, #32
2669c     A7 24 62 5C |  if_ne	wrlong	local04, fp
266a0     08 4E 85 51 |  if_ne	sub	fp, #8
266a4                 | LR__3836
266a4                 | LR__3837
266a4                 | LR__3838
266a4     08 4E 05 F1 | 	add	fp, #8
266a8     A7 24 02 FB | 	rdlong	local04, fp
266ac     08 4E 85 F1 | 	sub	fp, #8
266b0     03 00 00 FF 
266b4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
266b8     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
266bc     03 00 00 FF 
266c0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
266c4     0F 25 CA F7 | 	test	local04, local01 wz
266c8     E0 FD 9F AD |  if_e	jmp	#LR__3831
266cc                 | LR__3839
266cc     0C 4E 05 F1 | 	add	fp, #12
266d0     A7 12 02 FB | 	rdlong	arg01, fp
266d4     0C 4E 85 F1 | 	sub	fp, #12
266d8     09 27 02 F6 | 	mov	local05, arg01
266dc     97 06 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
266e0                 | LR__3840
266e0     13 FB C9 FA | 	rdbyte	result1, local05 wz
266e4     01 26 06 51 |  if_ne	add	local05, #1
266e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3840
266ec                 | LR__3841
266ec     13 13 C2 F2 | 	subr	arg01, local05
266f0     01 12 06 F1 | 	add	arg01, #1
266f4     28 E0 BF FD | 	call	#__system___gc_alloc_managed
266f8     48 4E 05 F1 | 	add	fp, #72
266fc     A7 FA 61 FC | 	wrlong	result1, fp
26700     48 4E 85 F1 | 	sub	fp, #72
26704     00 FA 0D F2 | 	cmp	result1, #0 wz
26708     18 00 90 AD |  if_e	jmp	#LR__3842
2670c     48 4E 05 F1 | 	add	fp, #72
26710     A7 12 02 FB | 	rdlong	arg01, fp
26714     3C 4E 85 F1 | 	sub	fp, #60
26718     A7 14 02 FB | 	rdlong	arg02, fp
2671c     0C 4E 85 F1 | 	sub	fp, #12
26720     D4 A0 BF FD | 	call	#__system____builtin_strcpy
26724                 | LR__3842
26724     48 4E 05 F1 | 	add	fp, #72
26728     A7 FA 01 FB | 	rdlong	result1, fp
2672c     48 4E 85 F1 | 	sub	fp, #72
26730                 | LR__3843
26730     A7 F0 03 F6 | 	mov	ptra, fp
26734     B2 00 A0 FD | 	call	#popregs_
26738                 | __system___basic_dir_ret
26738     2D 00 64 FD | 	ret
2673c                 | 
2673c                 | __system__pack_0608
2673c     09 01 02 F6 | 	mov	_var01, arg01
26740     7F 16 06 F1 | 	add	arg03, #127
26744     04 18 CE F7 | 	test	arg04, #4 wz
26748     10 00 90 AD |  if_e	jmp	#LR__3850
2674c     00 00 0E F2 | 	cmp	_var01, #0 wz
26750     16 00 C6 A9 |  if_e	decod	_var01, #22
26754     F7 00 26 F4 | 	bith	_var01, #247
26758     B4 00 90 FD | 	jmp	#LR__3859
2675c                 | LR__3850
2675c     02 18 CE F7 | 	test	arg04, #2 wz
26760     00 C0 3F 5F 
26764     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26768     00 14 06 56 |  if_ne	mov	arg02, #0
2676c     A0 00 90 5D |  if_ne	jmp	#LR__3858
26770     08 18 CE F7 | 	test	arg04, #8 wz
26774     00 00 06 56 |  if_ne	mov	_var01, #0
26778     94 00 90 5D |  if_ne	jmp	#LR__3857
2677c     FF 16 56 F2 | 	cmps	arg03, #255 wc
26780     00 C0 3F 3F 
26784     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26788     00 14 06 36 |  if_ae	mov	arg02, #0
2678c     80 00 90 3D |  if_ae	jmp	#LR__3856
26790     01 16 56 F2 | 	cmps	arg03, #1 wc
26794     6C 00 90 3D |  if_ae	jmp	#LR__3854
26798     01 14 46 F0 | 	shr	arg02, #1
2679c     00 03 02 F6 | 	mov	_var02, _var01
267a0     01 02 06 F5 | 	and	_var02, #1
267a4     1F 02 66 F0 | 	shl	_var02, #31
267a8     01 15 42 F5 | 	or	arg02, _var02
267ac     01 00 46 F0 | 	shr	_var01, #1
267b0     97 1E 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
267b4                 | LR__3851
267b4     00 16 56 F2 | 	cmps	arg03, #0 wc
267b8     34 00 90 3D |  if_ae	jmp	#LR__3853
267bc     00 00 0E F2 | 	cmp	_var01, #0 wz
267c0     2C 00 90 AD |  if_e	jmp	#LR__3853
267c4     0A 13 02 F6 | 	mov	arg01, arg02
267c8     01 12 06 F5 | 	and	arg01, #1
267cc     01 16 06 F1 | 	add	arg03, #1
267d0     01 14 46 F0 | 	shr	arg02, #1
267d4     00 03 02 F6 | 	mov	_var02, _var01
267d8     01 02 06 F5 | 	and	_var02, #1
267dc     1F 02 66 F0 | 	shl	_var02, #31
267e0     01 15 42 F5 | 	or	arg02, _var02
267e4     09 15 42 F5 | 	or	arg02, arg01
267e8     01 00 46 F0 | 	shr	_var01, #1
267ec     C4 FF 9F FD | 	jmp	#LR__3851
267f0                 | LR__3852
267f0                 | LR__3853
267f0     00 16 56 F2 | 	cmps	arg03, #0 wc
267f4     18 00 90 3D |  if_ae	jmp	#LR__3855
267f8     00 14 0E F2 | 	cmp	arg02, #0 wz
267fc     6F 14 62 FD | 	wrnz	arg02
26800     0C 00 90 FD | 	jmp	#LR__3855
26804                 | LR__3854
26804     17 01 06 F4 | 	bitl	_var01, #279
26808     17 16 66 F0 | 	shl	arg03, #23
2680c     0B 01 42 F5 | 	or	_var01, arg03
26810                 | LR__3855
26810                 | LR__3856
26810                 | LR__3857
26810                 | LR__3858
26810                 | LR__3859
26810     01 00 CE F7 | 	test	_var01, #1 wz
26814     01 14 46 55 |  if_ne	or	arg02, #1
26818     0A 17 02 F6 | 	mov	arg03, arg02
2681c     00 02 06 F6 | 	mov	_var02, #0
26820     FF FF 3F FF 
26824     FF 15 06 F1 | 	add	arg02, ##2147483647
26828     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2682c     01 02 06 C6 |  if_b	mov	_var02, #1
26830     01 01 02 F1 | 	add	_var01, _var02
26834     01 18 CE F7 | 	test	arg04, #1 wz
26838     1F 00 26 54 |  if_ne	bith	_var01, #31
2683c     00 FB 01 F6 | 	mov	result1, _var01
26840                 | __system__pack_0608_ret
26840     2D 00 64 FD | 	ret
26844                 | 
26844                 | __system___rxtxioctl_0698
26844     00 15 0E F2 | 	cmp	arg02, #256 wz
26848     0C 00 90 AD |  if_e	jmp	#LR__3860
2684c     01 15 0E F2 | 	cmp	arg02, #257 wz
26850     1C 00 90 AD |  if_e	jmp	#LR__3861
26854     30 00 90 FD | 	jmp	#LR__3862
26858                 | LR__3860
26858     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2685c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26860     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26864     0B FB 61 FC | 	wrlong	result1, arg03
26868     00 FA 05 F6 | 	mov	result1, #0
2686c     28 00 90 FD | 	jmp	#LR__3863
26870                 | LR__3861
26870     0B 13 02 FB | 	rdlong	arg01, arg03
26874     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26878     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2687c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26880     00 FA 05 F6 | 	mov	result1, #0
26884     10 00 90 FD | 	jmp	#LR__3863
26888                 | LR__3862
26888     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2688c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26890     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26894     01 FA 65 F6 | 	neg	result1, #1
26898                 | LR__3863
26898                 | __system___rxtxioctl_0698_ret
26898     2D 00 64 FD | 	ret
2689c                 | 
2689c                 | __system____dummy_flush_0699
2689c     00 FA 05 F6 | 	mov	result1, #0
268a0                 | __system____dummy_flush_0699_ret
268a0     2D 00 64 FD | 	ret
268a4                 | 
268a4                 | __system___vfswrite
268a4     09 4A 05 F6 | 	mov	COUNT_, #9
268a8     A8 00 A0 FD | 	call	#pushregs_
268ac     09 1F 02 F6 | 	mov	local01, arg01
268b0     0A 21 02 F6 | 	mov	local02, arg02
268b4     0B 23 02 F6 | 	mov	local03, arg03
268b8     10 25 02 F6 | 	mov	local04, local02
268bc     08 1E 06 F1 | 	add	local01, #8
268c0     0F 13 02 FB | 	rdlong	arg01, local01
268c4     08 1E 86 F1 | 	sub	local01, #8
268c8     02 12 CE F7 | 	test	arg01, #2 wz
268cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
268d0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
268d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
268d8     01 FA 65 A6 |  if_e	neg	result1, #1
268dc     80 01 90 AD |  if_e	jmp	#LR__3876
268e0     08 1E 06 F1 | 	add	local01, #8
268e4     0F FB 01 FB | 	rdlong	result1, local01
268e8     08 1E 86 F1 | 	sub	local01, #8
268ec     40 FA CD F7 | 	test	result1, #64 wz
268f0     68 00 90 AD |  if_e	jmp	#LR__3871
268f4     08 1E 06 F1 | 	add	local01, #8
268f8     0F 15 02 FB | 	rdlong	arg02, local01
268fc     08 1E 86 F1 | 	sub	local01, #8
26900     80 14 CE F7 | 	test	arg02, #128 wz
26904     54 00 90 AD |  if_e	jmp	#LR__3870
26908     30 1E 06 F1 | 	add	local01, #48
2690c     0F 27 02 FB | 	rdlong	local05, local01
26910     13 29 02 F6 | 	mov	local06, local05
26914     30 1E 86 F1 | 	sub	local01, #48
26918     13 28 46 F7 | 	zerox	local06, #19
2691c     14 26 46 F0 | 	shr	local05, #20
26920     02 26 66 F0 | 	shl	local05, #2
26924     ED 26 02 F1 | 	add	local05, __methods__
26928     13 27 02 FB | 	rdlong	local05, local05
2692c     0F 13 02 F6 | 	mov	arg01, local01
26930     00 14 06 F6 | 	mov	arg02, #0
26934     02 16 06 F6 | 	mov	arg03, #2
26938     F2 2A 02 F6 | 	mov	local07, objptr
2693c     14 E5 01 F6 | 	mov	objptr, local06
26940     2D 26 62 FD | 	call	local05
26944     15 E5 01 F6 | 	mov	objptr, local07
26948     08 1E 06 F1 | 	add	local01, #8
2694c     0F 2B 02 FB | 	rdlong	local07, local01
26950     80 2A 26 F5 | 	andn	local07, #128
26954     0F 2B 62 FC | 	wrlong	local07, local01
26958     08 1E 86 F1 | 	sub	local01, #8
2695c                 | LR__3870
2695c                 | LR__3871
2695c     18 1E 06 F1 | 	add	local01, #24
26960     0F 2B 0A FB | 	rdlong	local07, local01 wz
26964     18 1E 86 F1 | 	sub	local01, #24
26968     80 00 90 AD |  if_e	jmp	#LR__3873
2696c     18 1E 06 F1 | 	add	local01, #24
26970     0F 27 02 FB | 	rdlong	local05, local01
26974     13 29 02 F6 | 	mov	local06, local05
26978     18 1E 86 F1 | 	sub	local01, #24
2697c     13 28 46 F7 | 	zerox	local06, #19
26980     14 26 46 F0 | 	shr	local05, #20
26984     02 26 66 F0 | 	shl	local05, #2
26988     ED 26 02 F1 | 	add	local05, __methods__
2698c     13 27 02 FB | 	rdlong	local05, local05
26990     10 15 02 F6 | 	mov	arg02, local02
26994     11 17 02 F6 | 	mov	arg03, local03
26998     0F 13 02 F6 | 	mov	arg01, local01
2699c     F2 2A 02 F6 | 	mov	local07, objptr
269a0     14 E5 01 F6 | 	mov	objptr, local06
269a4     2D 26 62 FD | 	call	local05
269a8     15 E5 01 F6 | 	mov	objptr, local07
269ac     FD 2C 02 F6 | 	mov	local08, result1
269b0     00 2C 56 F2 | 	cmps	local08, #0 wc
269b4     2C 00 90 3D |  if_ae	jmp	#LR__3872
269b8     08 1E 06 F1 | 	add	local01, #8
269bc     0F 2B 02 FB | 	rdlong	local07, local01
269c0     20 2A 46 F5 | 	or	local07, #32
269c4     0F 2B 62 FC | 	wrlong	local07, local01
269c8     00 2C 4E F2 | 	cmps	local08, #0 wz
269cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
269d0     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
269d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
269d8     01 FA 65 56 |  if_ne	neg	result1, #1
269dc     00 FA 05 A6 |  if_e	mov	result1, #0
269e0     7C 00 90 FD | 	jmp	#LR__3876
269e4                 | LR__3872
269e4     16 FB 01 F6 | 	mov	result1, local08
269e8     74 00 90 FD | 	jmp	#LR__3876
269ec                 | LR__3873
269ec     1C 1E 06 F1 | 	add	local01, #28
269f0     0F 2F 0A FB | 	rdlong	local09, local01 wz
269f4     1C 1E 86 F1 | 	sub	local01, #28
269f8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
269fc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26a00     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a04     01 FA 65 A6 |  if_e	neg	result1, #1
26a08     54 00 90 AD |  if_e	jmp	#LR__3876
26a0c     00 2C 06 F6 | 	mov	local08, #0
26a10                 | LR__3874
26a10     01 22 16 F2 | 	cmp	local03, #1 wc
26a14     44 00 90 CD |  if_b	jmp	#LR__3875
26a18     17 29 02 F6 | 	mov	local06, local09
26a1c     17 27 02 F6 | 	mov	local05, local09
26a20     13 28 46 F7 | 	zerox	local06, #19
26a24     14 26 46 F0 | 	shr	local05, #20
26a28     02 26 66 F0 | 	shl	local05, #2
26a2c     ED 26 02 F1 | 	add	local05, __methods__
26a30     13 27 02 FB | 	rdlong	local05, local05
26a34     12 13 C2 FA | 	rdbyte	arg01, local04
26a38     0F 15 02 F6 | 	mov	arg02, local01
26a3c     F2 2A 02 F6 | 	mov	local07, objptr
26a40     14 E5 01 F6 | 	mov	objptr, local06
26a44     01 24 06 F1 | 	add	local04, #1
26a48     2D 26 62 FD | 	call	local05
26a4c     15 E5 01 F6 | 	mov	objptr, local07
26a50     FD 2C 02 F1 | 	add	local08, result1
26a54     01 22 86 F1 | 	sub	local03, #1
26a58     B4 FF 9F FD | 	jmp	#LR__3874
26a5c                 | LR__3875
26a5c     16 FB 01 F6 | 	mov	result1, local08
26a60                 | LR__3876
26a60     A7 F0 03 F6 | 	mov	ptra, fp
26a64     B2 00 A0 FD | 	call	#popregs_
26a68                 | __system___vfswrite_ret
26a68     2D 00 64 FD | 	ret
26a6c                 | 
26a6c                 | __system___vfsread
26a6c     03 4A 05 F6 | 	mov	COUNT_, #3
26a70     A8 00 A0 FD | 	call	#pushregs_
26a74     28 F0 07 F1 | 	add	ptra, #40
26a78     04 4E 05 F1 | 	add	fp, #4
26a7c     A7 12 62 FC | 	wrlong	arg01, fp
26a80     04 4E 05 F1 | 	add	fp, #4
26a84     A7 14 62 FC | 	wrlong	arg02, fp
26a88     04 4E 05 F1 | 	add	fp, #4
26a8c     A7 16 62 FC | 	wrlong	arg03, fp
26a90     04 4E 85 F1 | 	sub	fp, #4
26a94     A7 FA 01 FB | 	rdlong	result1, fp
26a98     14 4E 05 F1 | 	add	fp, #20
26a9c     A7 FA 61 FC | 	wrlong	result1, fp
26aa0     04 4E 05 F1 | 	add	fp, #4
26aa4     A7 00 68 FC | 	wrlong	#0, fp
26aa8     1C 4E 85 F1 | 	sub	fp, #28
26aac     A7 12 02 FB | 	rdlong	arg01, fp
26ab0     04 4E 85 F1 | 	sub	fp, #4
26ab4     08 12 06 F1 | 	add	arg01, #8
26ab8     09 FB 01 FB | 	rdlong	result1, arg01
26abc     01 FA CD F7 | 	test	result1, #1 wz
26ac0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26ac4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26ac8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26acc     01 FA 65 A6 |  if_e	neg	result1, #1
26ad0     74 02 90 AD |  if_e	jmp	#LR__3886
26ad4     04 4E 05 F1 | 	add	fp, #4
26ad8     A7 12 02 FB | 	rdlong	arg01, fp
26adc     04 4E 85 F1 | 	sub	fp, #4
26ae0     14 12 06 F1 | 	add	arg01, #20
26ae4     09 FB 09 FB | 	rdlong	result1, arg01 wz
26ae8     B8 00 90 AD |  if_e	jmp	#LR__3881
26aec     04 4E 05 F1 | 	add	fp, #4
26af0     A7 12 02 FB | 	rdlong	arg01, fp
26af4     09 17 02 F6 | 	mov	arg03, arg01
26af8     14 16 06 F1 | 	add	arg03, #20
26afc     0B 1F 02 FB | 	rdlong	local01, arg03
26b00     0F 21 02 F6 | 	mov	local02, local01
26b04     13 1E 46 F7 | 	zerox	local01, #19
26b08     14 20 46 F0 | 	shr	local02, #20
26b0c     02 20 66 F0 | 	shl	local02, #2
26b10     ED 20 02 F1 | 	add	local02, __methods__
26b14     10 21 02 FB | 	rdlong	local02, local02
26b18     04 4E 05 F1 | 	add	fp, #4
26b1c     A7 14 02 FB | 	rdlong	arg02, fp
26b20     04 4E 05 F1 | 	add	fp, #4
26b24     A7 16 02 FB | 	rdlong	arg03, fp
26b28     0C 4E 85 F1 | 	sub	fp, #12
26b2c     F2 22 02 F6 | 	mov	local03, objptr
26b30     0F E5 01 F6 | 	mov	objptr, local01
26b34     2D 20 62 FD | 	call	local02
26b38     11 E5 01 F6 | 	mov	objptr, local03
26b3c     10 4E 05 F1 | 	add	fp, #16
26b40     A7 FA 61 FC | 	wrlong	result1, fp
26b44     10 4E 85 F1 | 	sub	fp, #16
26b48     00 FA 55 F2 | 	cmps	result1, #0 wc
26b4c     44 00 90 3D |  if_ae	jmp	#LR__3880
26b50     04 4E 05 F1 | 	add	fp, #4
26b54     A7 22 02 FB | 	rdlong	local03, fp
26b58     11 1F 02 F6 | 	mov	local01, local03
26b5c     08 22 06 F1 | 	add	local03, #8
26b60     11 21 02 FB | 	rdlong	local02, local03
26b64     20 20 46 F5 | 	or	local02, #32
26b68     08 1E 06 F1 | 	add	local01, #8
26b6c     0F 21 62 FC | 	wrlong	local02, local01
26b70     0C 4E 05 F1 | 	add	fp, #12
26b74     A7 12 0A FB | 	rdlong	arg01, fp wz
26b78     10 4E 85 F1 | 	sub	fp, #16
26b7c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b80     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26b84     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b88     01 FA 65 56 |  if_ne	neg	result1, #1
26b8c     00 FA 05 A6 |  if_e	mov	result1, #0
26b90     B4 01 90 FD | 	jmp	#LR__3886
26b94                 | LR__3880
26b94     10 4E 05 F1 | 	add	fp, #16
26b98     A7 FA 01 FB | 	rdlong	result1, fp
26b9c     10 4E 85 F1 | 	sub	fp, #16
26ba0     A4 01 90 FD | 	jmp	#LR__3886
26ba4                 | LR__3881
26ba4     04 4E 05 F1 | 	add	fp, #4
26ba8     A7 12 02 FB | 	rdlong	arg01, fp
26bac     20 12 06 F1 | 	add	arg01, #32
26bb0     09 13 0A FB | 	rdlong	arg01, arg01 wz
26bb4     14 4E 05 F1 | 	add	fp, #20
26bb8     A7 12 62 FC | 	wrlong	arg01, fp
26bbc     18 4E 85 F1 | 	sub	fp, #24
26bc0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26bc4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26bc8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26bcc     01 FA 65 A6 |  if_e	neg	result1, #1
26bd0     74 01 90 AD |  if_e	jmp	#LR__3886
26bd4     04 4E 05 F1 | 	add	fp, #4
26bd8     A7 22 02 FB | 	rdlong	local03, fp
26bdc     04 4E 85 F1 | 	sub	fp, #4
26be0     28 22 06 F1 | 	add	local03, #40
26be4     11 21 0A FB | 	rdlong	local02, local03 wz
26be8     7C 00 90 AD |  if_e	jmp	#LR__3883
26bec     04 4E 05 F1 | 	add	fp, #4
26bf0     A7 12 02 FB | 	rdlong	arg01, fp
26bf4     09 23 02 F6 | 	mov	local03, arg01
26bf8     28 22 06 F1 | 	add	local03, #40
26bfc     11 1F 02 FB | 	rdlong	local01, local03
26c00     0F 21 02 F6 | 	mov	local02, local01
26c04     13 1E 46 F7 | 	zerox	local01, #19
26c08     14 20 46 F0 | 	shr	local02, #20
26c0c     02 20 66 F0 | 	shl	local02, #2
26c10     ED 20 02 F1 | 	add	local02, __methods__
26c14     10 21 02 FB | 	rdlong	local02, local02
26c18     20 4E 05 F1 | 	add	fp, #32
26c1c     A7 16 02 F6 | 	mov	arg03, fp
26c20     24 4E 85 F1 | 	sub	fp, #36
26c24     00 15 06 F6 | 	mov	arg02, #256
26c28     F2 22 02 F6 | 	mov	local03, objptr
26c2c     0F E5 01 F6 | 	mov	objptr, local01
26c30     2D 20 62 FD | 	call	local02
26c34     11 E5 01 F6 | 	mov	objptr, local03
26c38     10 4E 05 F1 | 	add	fp, #16
26c3c     A7 FA 61 FC | 	wrlong	result1, fp
26c40     00 FA 4D F2 | 	cmps	result1, #0 wz
26c44     10 4E 85 F1 | 	sub	fp, #16
26c48     1C 00 90 5D |  if_ne	jmp	#LR__3882
26c4c     24 4E 05 F1 | 	add	fp, #36
26c50     A7 20 02 FB | 	rdlong	local02, fp
26c54     24 4E 85 F1 | 	sub	fp, #36
26c58     02 20 CE F7 | 	test	local02, #2 wz
26c5c     20 4E 05 51 |  if_ne	add	fp, #32
26c60     A7 02 68 5C |  if_ne	wrlong	#1, fp
26c64     20 4E 85 51 |  if_ne	sub	fp, #32
26c68                 | LR__3882
26c68                 | LR__3883
26c68     10 4E 05 F1 | 	add	fp, #16
26c6c     A7 00 68 FC | 	wrlong	#0, fp
26c70     10 4E 85 F1 | 	sub	fp, #16
26c74                 | LR__3884
26c74     0C 4E 05 F1 | 	add	fp, #12
26c78     A7 22 02 FB | 	rdlong	local03, fp
26c7c     0C 4E 85 F1 | 	sub	fp, #12
26c80     01 22 16 F2 | 	cmp	local03, #1 wc
26c84     B4 00 90 CD |  if_b	jmp	#LR__3885
26c88     18 4E 05 F1 | 	add	fp, #24
26c8c     A7 20 02 FB | 	rdlong	local02, fp
26c90     10 23 02 F6 | 	mov	local03, local02
26c94     13 22 46 F7 | 	zerox	local03, #19
26c98     14 20 46 F0 | 	shr	local02, #20
26c9c     02 20 66 F0 | 	shl	local02, #2
26ca0     ED 20 02 F1 | 	add	local02, __methods__
26ca4     10 21 02 FB | 	rdlong	local02, local02
26ca8     14 4E 85 F1 | 	sub	fp, #20
26cac     A7 12 02 FB | 	rdlong	arg01, fp
26cb0     04 4E 85 F1 | 	sub	fp, #4
26cb4     F2 1E 02 F6 | 	mov	local01, objptr
26cb8     11 E5 01 F6 | 	mov	objptr, local03
26cbc     2D 20 62 FD | 	call	local02
26cc0     0F E5 01 F6 | 	mov	objptr, local01
26cc4     14 4E 05 F1 | 	add	fp, #20
26cc8     A7 FA 61 FC | 	wrlong	result1, fp
26ccc     14 4E 85 F1 | 	sub	fp, #20
26cd0     00 FA 55 F2 | 	cmps	result1, #0 wc
26cd4     64 00 90 CD |  if_b	jmp	#LR__3885
26cd8     1C 4E 05 F1 | 	add	fp, #28
26cdc     A7 22 02 FB | 	rdlong	local03, fp
26ce0     11 21 02 F6 | 	mov	local02, local03
26ce4     01 20 06 F1 | 	add	local02, #1
26ce8     A7 20 62 FC | 	wrlong	local02, fp
26cec     08 4E 85 F1 | 	sub	fp, #8
26cf0     A7 20 02 FB | 	rdlong	local02, fp
26cf4     11 21 42 FC | 	wrbyte	local02, local03
26cf8     04 4E 85 F1 | 	sub	fp, #4
26cfc     A7 22 02 FB | 	rdlong	local03, fp
26d00     01 22 06 F1 | 	add	local03, #1
26d04     A7 22 62 FC | 	wrlong	local03, fp
26d08     04 4E 85 F1 | 	sub	fp, #4
26d0c     A7 22 02 FB | 	rdlong	local03, fp
26d10     01 22 86 F1 | 	sub	local03, #1
26d14     A7 22 62 FC | 	wrlong	local03, fp
26d18     14 4E 05 F1 | 	add	fp, #20
26d1c     A7 22 0A FB | 	rdlong	local03, fp wz
26d20     20 4E 85 F1 | 	sub	fp, #32
26d24     4C FF 9F AD |  if_e	jmp	#LR__3884
26d28     14 4E 05 F1 | 	add	fp, #20
26d2c     A7 20 02 FB | 	rdlong	local02, fp
26d30     14 4E 85 F1 | 	sub	fp, #20
26d34     0A 20 0E F2 | 	cmp	local02, #10 wz
26d38     38 FF 9F 5D |  if_ne	jmp	#LR__3884
26d3c                 | LR__3885
26d3c     10 4E 05 F1 | 	add	fp, #16
26d40     A7 FA 01 FB | 	rdlong	result1, fp
26d44     10 4E 85 F1 | 	sub	fp, #16
26d48                 | LR__3886
26d48     A7 F0 03 F6 | 	mov	ptra, fp
26d4c     B2 00 A0 FD | 	call	#popregs_
26d50                 | __system___vfsread_ret
26d50     2D 00 64 FD | 	ret
26d54                 | 
26d54                 | __system____default_filbuf
26d54     04 4A 05 F6 | 	mov	COUNT_, #4
26d58     A8 00 A0 FD | 	call	#pushregs_
26d5c     09 1F 02 F6 | 	mov	local01, arg01
26d60     0F 21 02 FB | 	rdlong	local02, local01
26d64     0C 20 06 F1 | 	add	local02, #12
26d68     10 FB 09 FB | 	rdlong	result1, local02 wz
26d6c     0C 20 86 F1 | 	sub	local02, #12
26d70     20 00 90 5D |  if_ne	jmp	#LR__3890
26d74     14 20 06 F1 | 	add	local02, #20
26d78     10 FB 01 F6 | 	mov	result1, local02
26d7c     04 20 86 F1 | 	sub	local02, #4
26d80     10 FB 61 FC | 	wrlong	result1, local02
26d84     04 20 86 F1 | 	sub	local02, #4
26d88     02 00 80 FF 
26d8c     10 01 68 FC | 	wrlong	##1024, local02
26d90     0C 20 86 F1 | 	sub	local02, #12
26d94                 | LR__3890
26d94     14 1E 06 F1 | 	add	local01, #20
26d98     0F 23 02 FB | 	rdlong	local03, local01
26d9c     11 25 02 F6 | 	mov	local04, local03
26da0     14 1E 86 F1 | 	sub	local01, #20
26da4     13 24 46 F7 | 	zerox	local04, #19
26da8     14 22 46 F0 | 	shr	local03, #20
26dac     02 22 66 F0 | 	shl	local03, #2
26db0     ED 22 02 F1 | 	add	local03, __methods__
26db4     11 23 02 FB | 	rdlong	local03, local03
26db8     10 20 06 F1 | 	add	local02, #16
26dbc     10 15 02 FB | 	rdlong	arg02, local02
26dc0     04 20 86 F1 | 	sub	local02, #4
26dc4     10 17 02 FB | 	rdlong	arg03, local02
26dc8     0C 20 86 F1 | 	sub	local02, #12
26dcc     0F 13 02 F6 | 	mov	arg01, local01
26dd0     F2 1E 02 F6 | 	mov	local01, objptr
26dd4     12 E5 01 F6 | 	mov	objptr, local04
26dd8     2D 22 62 FD | 	call	local03
26ddc     0F E5 01 F6 | 	mov	objptr, local01
26de0     FD 24 02 F6 | 	mov	local04, result1
26de4     00 24 56 F2 | 	cmps	local04, #0 wc
26de8     01 FA 65 C6 |  if_b	neg	result1, #1
26dec     28 00 90 CD |  if_b	jmp	#LR__3891
26df0     10 25 62 FC | 	wrlong	local04, local02
26df4     10 20 06 F1 | 	add	local02, #16
26df8     10 23 02 FB | 	rdlong	local03, local02
26dfc     0C 20 86 F1 | 	sub	local02, #12
26e00     10 23 62 FC | 	wrlong	local03, local02
26e04     04 20 06 F1 | 	add	local02, #4
26e08     10 23 02 FB | 	rdlong	local03, local02
26e0c     01 22 46 F5 | 	or	local03, #1
26e10     10 23 62 FC | 	wrlong	local03, local02
26e14     12 FB 01 F6 | 	mov	result1, local04
26e18                 | LR__3891
26e18     A7 F0 03 F6 | 	mov	ptra, fp
26e1c     B2 00 A0 FD | 	call	#popregs_
26e20                 | __system____default_filbuf_ret
26e20     2D 00 64 FD | 	ret
26e24                 | 
26e24                 | __system__getlower_1084
26e24     41 12 56 F2 | 	cmps	arg01, #65 wc
26e28     10 00 90 CD |  if_b	jmp	#LR__3900
26e2c     5B 12 56 F2 | 	cmps	arg01, #91 wc
26e30     09 FB 01 C6 |  if_b	mov	result1, arg01
26e34     20 FA 05 C1 |  if_b	add	result1, #32
26e38     04 00 90 CD |  if_b	jmp	#__system__getlower_1084_ret
26e3c                 | LR__3900
26e3c     09 FB 01 F6 | 	mov	result1, arg01
26e40                 | __system__getlower_1084_ret
26e40     2D 00 64 FD | 	ret
26e44                 | 
26e44                 | __system___pat_match
26e44     08 4A 05 F6 | 	mov	COUNT_, #8
26e48     A8 00 A0 FD | 	call	#pushregs_
26e4c     09 1F 02 F6 | 	mov	local01, arg01
26e50                 | LR__3910
26e50     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
26e54     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
26e58     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
26e5c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
26e60     2C 00 90 AD |  if_e	jmp	#LR__3911
26e64     0A 13 C2 FA | 	rdbyte	arg01, arg02
26e68     B8 FF BF FD | 	call	#__system__getlower_1084
26e6c     FD 22 02 F6 | 	mov	local03, result1
26e70     0F 13 C2 FA | 	rdbyte	arg01, local01
26e74     AC FF BF FD | 	call	#__system__getlower_1084
26e78     11 FB 09 F2 | 	cmp	result1, local03 wz
26e7c     00 FA 05 56 |  if_ne	mov	result1, #0
26e80     FC 00 90 5D |  if_ne	jmp	#LR__3919
26e84     01 1E 06 F1 | 	add	local01, #1
26e88     01 14 06 F1 | 	add	arg02, #1
26e8c     C0 FF 9F FD | 	jmp	#LR__3910
26e90                 | LR__3911
26e90     0A 23 C2 FA | 	rdbyte	local03, arg02
26e94     2A 22 0E F2 | 	cmp	local03, #42 wz
26e98     D4 00 90 5D |  if_ne	jmp	#LR__3918
26e9c     01 14 06 F1 | 	add	arg02, #1
26ea0     0A 21 C2 FA | 	rdbyte	local02, arg02
26ea4     01 14 86 F1 | 	sub	arg02, #1
26ea8     2E 20 0E F2 | 	cmp	local02, #46 wz
26eac     28 00 90 5D |  if_ne	jmp	#LR__3912
26eb0     02 14 06 F1 | 	add	arg02, #2
26eb4     0A 21 C2 FA | 	rdbyte	local02, arg02
26eb8     02 14 86 F1 | 	sub	arg02, #2
26ebc     2A 20 0E F2 | 	cmp	local02, #42 wz
26ec0     03 14 06 A1 |  if_e	add	arg02, #3
26ec4     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
26ec8     03 14 86 A1 |  if_e	sub	arg02, #3
26ecc     12 27 0A A6 |  if_e	mov	local05, local04 wz
26ed0     01 FA 05 A6 |  if_e	mov	result1, #1
26ed4     A8 00 90 AD |  if_e	jmp	#LR__3919
26ed8                 | LR__3912
26ed8     01 14 06 F1 | 	add	arg02, #1
26edc     00 28 06 F6 | 	mov	local06, #0
26ee0     97 1E 48 FB | 	callpa	#(@LR__3915-@LR__3913)>>2,fcache_load_ptr_
26ee4                 | LR__3913
26ee4     14 2B 02 F6 | 	mov	local07, local06
26ee8     0A 2B 02 F1 | 	add	local07, arg02
26eec     15 2B CA FA | 	rdbyte	local07, local07 wz
26ef0     14 27 02 56 |  if_ne	mov	local05, local06
26ef4     01 26 06 51 |  if_ne	add	local05, #1
26ef8     13 29 02 56 |  if_ne	mov	local06, local05
26efc     E4 FF 9F 5D |  if_ne	jmp	#LR__3913
26f00     00 2C 06 F6 | 	mov	local08, #0
26f04                 | LR__3914
26f04     16 2B 02 F6 | 	mov	local07, local08
26f08     0F 2B 02 F1 | 	add	local07, local01
26f0c     15 2B CA FA | 	rdbyte	local07, local07 wz
26f10     16 27 02 56 |  if_ne	mov	local05, local08
26f14     01 26 06 51 |  if_ne	add	local05, #1
26f18     13 2D 02 56 |  if_ne	mov	local08, local05
26f1c     E4 FF 9F 5D |  if_ne	jmp	#LR__3914
26f20                 | LR__3915
26f20     14 2D 52 F2 | 	cmps	local08, local06 wc
26f24     00 FA 05 C6 |  if_b	mov	result1, #0
26f28     54 00 90 CD |  if_b	jmp	#LR__3919
26f2c     16 21 02 F6 | 	mov	local02, local08
26f30     14 21 82 F1 | 	sub	local02, local06
26f34     10 1F 02 F1 | 	add	local01, local02
26f38                 | LR__3916
26f38     01 28 56 F2 | 	cmps	local06, #1 wc
26f3c     30 00 90 CD |  if_b	jmp	#LR__3917
26f40     0F 13 C2 FA | 	rdbyte	arg01, local01
26f44     DC FE BF FD | 	call	#__system__getlower_1084
26f48     FD 2C 02 F6 | 	mov	local08, result1
26f4c     0A 13 C2 FA | 	rdbyte	arg01, arg02
26f50     D0 FE BF FD | 	call	#__system__getlower_1084
26f54     FD 2C 0A F2 | 	cmp	local08, result1 wz
26f58     00 FA 05 56 |  if_ne	mov	result1, #0
26f5c     20 00 90 5D |  if_ne	jmp	#LR__3919
26f60     01 1E 06 F1 | 	add	local01, #1
26f64     01 14 06 F1 | 	add	arg02, #1
26f68     01 28 86 F1 | 	sub	local06, #1
26f6c     C8 FF 9F FD | 	jmp	#LR__3916
26f70                 | LR__3917
26f70                 | LR__3918
26f70     0A 2D CA FA | 	rdbyte	local08, arg02 wz
26f74     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
26f78     01 FA 05 A6 |  if_e	mov	result1, #1
26f7c     00 FA 05 56 |  if_ne	mov	result1, #0
26f80                 | LR__3919
26f80     A7 F0 03 F6 | 	mov	ptra, fp
26f84     B2 00 A0 FD | 	call	#popregs_
26f88                 | __system___pat_match_ret
26f88     2D 00 64 FD | 	ret
26f8c                 | 
26f8c                 | _fatfs_cc_ff_uni2oem
26f8c     00 00 06 F6 | 	mov	_var01, #0
26f90     80 12 16 F2 | 	cmp	arg01, #128 wc
26f94     09 01 02 C6 |  if_b	mov	_var01, arg01
26f98     58 00 90 CD |  if_b	jmp	#LR__3924
26f9c     80 00 00 FF 
26fa0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
26fa4     4C 00 90 3D |  if_ae	jmp	#LR__3923
26fa8     0A FB 31 F9 | 	getword	result1, arg02, #0
26fac     01 00 00 FF 
26fb0     52 FB 0D F2 | 	cmp	result1, ##850 wz
26fb4     3C 00 90 5D |  if_ne	jmp	#LR__3923
26fb8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
26fb8     00 00 06 F6 | 	mov	_var01, #0
26fbc     97 14 48 FB | 	callpa	#(@LR__3921-@LR__3920)>>2,fcache_load_ptr_
26fc0                 | LR__3920
26fc0     00 FB 31 F9 | 	getword	result1, _var01, #0
26fc4     80 FA 15 F2 | 	cmp	result1, #128 wc
26fc8     1C 00 90 3D |  if_ae	jmp	#LR__3922
26fcc     00 FB 31 F9 | 	getword	result1, _var01, #0
26fd0     01 FA 65 F0 | 	shl	result1, #1
26fd4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
26fd8     FD FA E1 FA | 	rdword	result1, result1
26fdc     FD 12 0A F2 | 	cmp	arg01, result1 wz
26fe0     01 00 06 51 |  if_ne	add	_var01, #1
26fe4     D8 FF 9F 5D |  if_ne	jmp	#LR__3920
26fe8                 | LR__3921
26fe8                 | LR__3922
26fe8     00 01 32 F9 | 	getword	_var01, _var01, #0
26fec     80 00 06 F1 | 	add	_var01, #128
26ff0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
26ff4                 | LR__3923
26ff4                 | LR__3924
26ff4                 | ' 			c = (c + 0x80) & 0xFF;
26ff4                 | ' 		}
26ff4                 | ' 	}
26ff4                 | ' 
26ff4                 | ' 	return c;
26ff4     00 FB 01 F6 | 	mov	result1, _var01
26ff8                 | _fatfs_cc_ff_uni2oem_ret
26ff8     2D 00 64 FD | 	ret
26ffc                 | 
26ffc                 | _fatfs_cc_ff_oem2uni
26ffc     00 00 06 F6 | 	mov	_var01, #0
27000     09 FB 31 F9 | 	getword	result1, arg01, #0
27004     80 FA 15 F2 | 	cmp	result1, #128 wc
27008     09 01 02 C6 |  if_b	mov	_var01, arg01
2700c     2C 00 90 CD |  if_b	jmp	#LR__3931
27010     0A 15 32 F9 | 	getword	arg02, arg02, #0
27014     01 00 00 FF 
27018     52 15 0E F2 | 	cmp	arg02, ##850 wz
2701c     1C 00 90 5D |  if_ne	jmp	#LR__3930
27020     09 FB 31 F9 | 	getword	result1, arg01, #0
27024     00 FB 15 F2 | 	cmp	result1, #256 wc
27028     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2702c     80 12 86 C1 |  if_b	sub	arg01, #128
27030     01 12 66 C0 |  if_b	shl	arg01, #1
27034     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
27038     09 01 E2 CA |  if_b	rdword	_var01, arg01
2703c                 | LR__3930
2703c                 | LR__3931
2703c                 | ' 		}
2703c                 | ' 	}
2703c                 | ' 
2703c                 | ' 	return c;
2703c     00 FB 01 F6 | 	mov	result1, _var01
27040                 | _fatfs_cc_ff_oem2uni_ret
27040     2D 00 64 FD | 	ret
27044                 | 
27044                 | _fatfs_cc_ff_wtoupper
27044     09 01 02 F6 | 	mov	_var01, arg01
27048     80 00 00 FF 
2704c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27050     60 01 90 3D |  if_ae	jmp	#LR__3953
27054     00 03 02 F6 | 	mov	_var02, _var01
27058     01 01 32 F9 | 	getword	_var01, _var02, #0
2705c     08 00 00 FF 
27060     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27064     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27068     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2706c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27070     01 00 00 3F 
27074     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27078     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2707c     01 00 00 3F 
27080     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
27084     02 07 02 F6 | 	mov	_var04, _var03
27088                 | ' 		uc = (WORD)uni;
27088                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27088                 | ' 		for (;;) {
27088                 | LR__3940
27088     03 09 E2 FA | 	rdword	_var05, _var04
2708c     04 05 02 F6 | 	mov	_var03, _var05
27090     0F 04 4E F7 | 	zerox	_var03, #15 wz
27094     02 06 06 F1 | 	add	_var04, #2
27098     14 01 90 AD |  if_e	jmp	#LR__3952
2709c     01 05 32 F9 | 	getword	_var03, _var02, #0
270a0     04 01 32 F9 | 	getword	_var01, _var05, #0
270a4     00 05 12 F2 | 	cmp	_var03, _var01 wc
270a8     04 01 90 CD |  if_b	jmp	#LR__3952
270ac     03 0B E2 FA | 	rdword	_var06, _var04
270b0     05 0D 32 F9 | 	getword	_var07, _var06, #0
270b4     08 0C 46 F0 | 	shr	_var07, #8
270b8     05 0B 32 F9 | 	getword	_var06, _var06, #0
270bc     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
270c0     01 05 32 F9 | 	getword	_var03, _var02, #0
270c4     04 0F 32 F9 | 	getword	_var08, _var05, #0
270c8     05 01 32 F9 | 	getword	_var01, _var06, #0
270cc     00 0F 02 F1 | 	add	_var08, _var01
270d0     07 05 52 F2 | 	cmps	_var03, _var08 wc
270d4     02 06 06 F1 | 	add	_var04, #2
270d8     C4 00 90 3D |  if_ae	jmp	#LR__3951
270dc                 | ' 				switch (cmd) {
270dc     06 11 32 F9 | 	getword	_var09, _var07, #0
270e0     09 10 26 F3 | 	fle	_var09, #9
270e4     30 10 62 FD | 	jmprel	_var09
270e8                 | LR__3941
270e8     24 00 90 FD | 	jmp	#LR__3942
270ec     3C 00 90 FD | 	jmp	#LR__3943
270f0     54 00 90 FD | 	jmp	#LR__3944
270f4     5C 00 90 FD | 	jmp	#LR__3945
270f8     64 00 90 FD | 	jmp	#LR__3946
270fc     6C 00 90 FD | 	jmp	#LR__3947
27100     74 00 90 FD | 	jmp	#LR__3948
27104     7C 00 90 FD | 	jmp	#LR__3949
27108     84 00 90 FD | 	jmp	#LR__3950
2710c     A0 00 90 FD | 	jmp	#LR__3952
27110                 | LR__3942
27110     01 03 32 F9 | 	getword	_var02, _var02, #0
27114     04 09 32 F9 | 	getword	_var05, _var05, #0
27118     04 03 82 F1 | 	sub	_var02, _var05
2711c     01 02 66 F0 | 	shl	_var02, #1
27120     03 03 02 F1 | 	add	_var02, _var04
27124     01 03 E2 FA | 	rdword	_var02, _var02
27128     84 00 90 FD | 	jmp	#LR__3952
2712c                 | LR__3943
2712c     01 05 32 F9 | 	getword	_var03, _var02, #0
27130     01 03 32 F9 | 	getword	_var02, _var02, #0
27134     04 09 32 F9 | 	getword	_var05, _var05, #0
27138     04 03 82 F1 | 	sub	_var02, _var05
2713c     01 02 06 F5 | 	and	_var02, #1
27140     02 03 C2 F2 | 	subr	_var02, _var03
27144     68 00 90 FD | 	jmp	#LR__3952
27148                 | LR__3944
27148     01 03 32 F9 | 	getword	_var02, _var02, #0
2714c     10 02 86 F1 | 	sub	_var02, #16
27150     5C 00 90 FD | 	jmp	#LR__3952
27154                 | LR__3945
27154     01 03 32 F9 | 	getword	_var02, _var02, #0
27158     20 02 86 F1 | 	sub	_var02, #32
2715c     50 00 90 FD | 	jmp	#LR__3952
27160                 | LR__3946
27160     01 03 32 F9 | 	getword	_var02, _var02, #0
27164     30 02 86 F1 | 	sub	_var02, #48
27168     44 00 90 FD | 	jmp	#LR__3952
2716c                 | LR__3947
2716c     01 03 32 F9 | 	getword	_var02, _var02, #0
27170     1A 02 86 F1 | 	sub	_var02, #26
27174     38 00 90 FD | 	jmp	#LR__3952
27178                 | LR__3948
27178     01 03 32 F9 | 	getword	_var02, _var02, #0
2717c     08 02 06 F1 | 	add	_var02, #8
27180     2C 00 90 FD | 	jmp	#LR__3952
27184                 | LR__3949
27184     01 03 32 F9 | 	getword	_var02, _var02, #0
27188     50 02 86 F1 | 	sub	_var02, #80
2718c     20 00 90 FD | 	jmp	#LR__3952
27190                 | LR__3950
27190     01 03 32 F9 | 	getword	_var02, _var02, #0
27194     0E 00 00 FF 
27198     60 02 86 F1 | 	sub	_var02, ##7264
2719c                 | ' 				}
2719c                 | ' 				break;
2719c     10 00 90 FD | 	jmp	#LR__3952
271a0                 | LR__3951
271a0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
271a4     02 0A 06 AA |  if_e	mul	_var06, #2
271a8     05 07 02 A1 |  if_e	add	_var04, _var06
271ac     D8 FE 9F FD | 	jmp	#LR__3940
271b0                 | LR__3952
271b0     01 01 32 F9 | 	getword	_var01, _var02, #0
271b4                 | LR__3953
271b4                 | ' 		}
271b4                 | ' 		uni = uc;
271b4                 | ' 	}
271b4                 | ' 
271b4                 | ' 	return uni;
271b4     00 FB 01 F6 | 	mov	result1, _var01
271b8                 | _fatfs_cc_ff_wtoupper_ret
271b8     2D 00 64 FD | 	ret
271bc                 | 
271bc                 | _fatfs_cc_strncpy
271bc     09 01 02 F6 | 	mov	_var01, arg01
271c0     97 12 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
271c4                 | ' 
271c4                 | ' 	dscan = dst;
271c4                 | ' 	sscan = src;
271c4                 | ' 	count = n;
271c4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
271c4                 | LR__3960
271c4     01 16 86 F1 | 	sub	arg03, #1
271c8     00 16 56 F2 | 	cmps	arg03, #0 wc
271cc     18 00 90 CD |  if_b	jmp	#LR__3962
271d0     0A FB C1 FA | 	rdbyte	result1, arg02
271d4     00 FB 41 FC | 	wrbyte	result1, _var01
271d8     01 14 06 F1 | 	add	arg02, #1
271dc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
271e0                 | ' 		continue;
271e0     01 00 06 F1 | 	add	_var01, #1
271e4     DC FF 9F 5D |  if_ne	jmp	#LR__3960
271e8                 | LR__3961
271e8                 | LR__3962
271e8     97 0C 48 FB | 	callpa	#(@LR__3964-@LR__3963)>>2,fcache_load_ptr_
271ec                 | ' 	while (--count >= 0)
271ec                 | LR__3963
271ec     01 16 86 F1 | 	sub	arg03, #1
271f0     00 16 56 F2 | 	cmps	arg03, #0 wc
271f4     00 03 02 36 |  if_ae	mov	_var02, _var01
271f8     01 00 06 31 |  if_ae	add	_var01, #1
271fc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
27200     E8 FF 9F 3D |  if_ae	jmp	#LR__3963
27204                 | LR__3964
27204                 | ' 		*dscan++ = '\0';
27204                 | ' 	return(dst);
27204     09 FB 01 F6 | 	mov	result1, arg01
27208                 | _fatfs_cc_strncpy_ret
27208     2D 00 64 FD | 	ret
2720c                 | 
2720c                 | _fatfs_cc_memcmp
2720c                 | ' 	for (n = size; n > 0; n--)
2720c     00 16 0E F2 | 	cmp	arg03, #0 wz
27210     28 00 90 AD |  if_e	jmp	#LR__3971
27214                 | LR__3970
27214     09 01 C2 FA | 	rdbyte	_var01, arg01
27218     0A 03 C2 FA | 	rdbyte	_var02, arg02
2721c     01 01 0A F2 | 	cmp	_var01, _var02 wz
27220     01 12 06 A1 |  if_e	add	arg01, #1
27224     01 14 06 A1 |  if_e	add	arg02, #1
27228                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
27228     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2722c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
27230     01 FB 81 51 |  if_ne	sub	result1, _var02
27234     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
27238     F6 17 6E FB | 	djnz	arg03, #LR__3970
2723c                 | LR__3971
2723c                 | ' 
2723c                 | ' 	return(0);
2723c     00 FA 05 F6 | 	mov	result1, #0
27240                 | _fatfs_cc_memcmp_ret
27240     2D 00 64 FD | 	ret
27244                 | 
27244                 | _fatfs_cc_strncmp
27244     09 01 0A F6 | 	mov	_var01, arg01 wz
27248     14 00 90 5D |  if_ne	jmp	#LR__3980
2724c                 | ' 		return scan2 ? -1 : 0;
2724c     00 14 0E F2 | 	cmp	arg02, #0 wz
27250     01 02 66 56 |  if_ne	neg	_var02, #1
27254     00 02 06 A6 |  if_e	mov	_var02, #0
27258     01 FB 01 F6 | 	mov	result1, _var02
2725c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27260                 | LR__3980
27260     00 14 0E F2 | 	cmp	arg02, #0 wz
27264     01 FA 05 A6 |  if_e	mov	result1, #1
27268     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2726c     0B 05 02 F6 | 	mov	_var03, arg03
27270     97 16 48 FB | 	callpa	#(@LR__3982-@LR__3981)>>2,fcache_load_ptr_
27274                 | ' 	count = n;
27274                 | ' 	do {
27274                 | LR__3981
27274     00 07 C2 FA | 	rdbyte	_var04, _var01
27278     0A 09 02 F6 | 	mov	_var05, arg02
2727c     04 0B C2 FA | 	rdbyte	_var06, _var05
27280     01 04 86 F1 | 	sub	_var03, #1
27284     00 04 56 F2 | 	cmps	_var03, #0 wc
27288     01 00 06 F1 | 	add	_var01, #1
2728c     01 14 06 F1 | 	add	arg02, #1
27290     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27294     08 00 90 2D |  if_nc_and_z	jmp	#LR__3983
27298     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2729c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3981
272a0                 | LR__3982
272a0                 | LR__3983
272a0     00 04 56 F2 | 	cmps	_var03, #0 wc
272a4                 | ' 		return(0);
272a4     00 FA 05 C6 |  if_b	mov	result1, #0
272a8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
272ac     05 07 0A F2 | 	cmp	_var04, _var06 wz
272b0                 | ' 		return(0);
272b0     00 FA 05 A6 |  if_e	mov	result1, #0
272b4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
272b8     00 06 0E F2 | 	cmp	_var04, #0 wz
272bc                 | ' 		return(-1);
272bc     01 FA 65 A6 |  if_e	neg	result1, #1
272c0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
272c4     00 0A 0E F2 | 	cmp	_var06, #0 wz
272c8                 | ' 		return(1);
272c8     01 FA 05 A6 |  if_e	mov	result1, #1
272cc                 | ' 		return(c1 - c2);
272cc     03 FB 01 56 |  if_ne	mov	result1, _var04
272d0     05 FB 81 51 |  if_ne	sub	result1, _var06
272d4                 | _fatfs_cc_strncmp_ret
272d4     2D 00 64 FD | 	ret
272d8                 | 
272d8                 | _fatfs_cc_strchr
272d8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
272d8                 | ' 	while ((c = *s++) != (char) charwanted)
272d8                 | LR__3990
272d8     09 01 02 F6 | 	mov	_var01, arg01
272dc     00 03 C2 FA | 	rdbyte	_var02, _var01
272e0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
272e4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
272e8     03 05 0A F2 | 	cmp	_var03, _var04 wz
272ec     01 12 06 F1 | 	add	arg01, #1
272f0     14 00 90 AD |  if_e	jmp	#LR__3991
272f4     01 05 02 F6 | 	mov	_var03, _var02
272f8     07 04 4E F7 | 	zerox	_var03, #7 wz
272fc     00 FA 05 A6 |  if_e	mov	result1, #0
27300     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
27304     D0 FF 9F FD | 	jmp	#LR__3990
27308                 | LR__3991
27308                 | ' 	return((char *)--s);
27308     01 12 86 F1 | 	sub	arg01, #1
2730c     09 FB 01 F6 | 	mov	result1, arg01
27310                 | _fatfs_cc_strchr_ret
27310     2D 00 64 FD | 	ret
27314                 | 
27314                 | _fatfs_cc_disk_initialize
27314     04 4A 05 F6 | 	mov	COUNT_, #4
27318     A8 00 A0 FD | 	call	#pushregs_
2731c     40 F0 07 F1 | 	add	ptra, #64
27320     04 4E 05 F1 | 	add	fp, #4
27324     A7 12 42 FC | 	wrbyte	arg01, fp
27328     01 00 00 FF 
2732c     14 E4 05 F1 | 	add	objptr, ##532
27330     F2 18 02 FB | 	rdlong	arg04, objptr
27334     2C 4E 05 F1 | 	add	fp, #44
27338     A7 18 62 FC | 	wrlong	arg04, fp
2733c     04 E4 85 F1 | 	sub	objptr, #4
27340     F2 18 02 FB | 	rdlong	arg04, objptr
27344     04 4E 05 F1 | 	add	fp, #4
27348     A7 18 62 FC | 	wrlong	arg04, fp
2734c     08 E4 05 F1 | 	add	objptr, #8
27350     F2 18 02 FB | 	rdlong	arg04, objptr
27354     04 4E 05 F1 | 	add	fp, #4
27358     A7 18 62 FC | 	wrlong	arg04, fp
2735c     04 E4 05 F1 | 	add	objptr, #4
27360     F2 18 02 FB | 	rdlong	arg04, objptr
27364     04 4E 05 F1 | 	add	fp, #4
27368     A7 18 62 FC | 	wrlong	arg04, fp
2736c     04 E4 05 F1 | 	add	objptr, #4
27370     F2 02 48 FC | 	wrbyte	#1, objptr
27374     01 00 00 FF 
27378     20 E4 85 F1 | 	sub	objptr, ##544
2737c     38 4E 85 F1 | 	sub	fp, #56
27380     A7 18 CA FA | 	rdbyte	arg04, fp wz
27384     04 4E 85 F1 | 	sub	fp, #4
27388                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
27388                 | '             return RES_NOTRDY;
27388     03 FA 05 56 |  if_ne	mov	result1, #3
2738c     D8 05 90 5D |  if_ne	jmp	#LR__4018
27390     13 00 00 FF 
27394     10 13 06 F6 | 	mov	arg01, ##10000
27398     08 98 BF FD | 	call	#__system___waitus
2739c     30 4E 05 F1 | 	add	fp, #48
273a0     A7 12 02 FB | 	rdlong	arg01, fp
273a4     09 01 08 FC | 	wrpin	#0, arg01
273a8     04 4E 05 F1 | 	add	fp, #4
273ac     A7 12 02 FB | 	rdlong	arg01, fp
273b0     09 01 08 FC | 	wrpin	#0, arg01
273b4     04 4E 05 F1 | 	add	fp, #4
273b8     A7 12 02 FB | 	rdlong	arg01, fp
273bc     09 01 08 FC | 	wrpin	#0, arg01
273c0     04 4E 05 F1 | 	add	fp, #4
273c4     A7 12 02 FB | 	rdlong	arg01, fp
273c8     09 00 80 FF 
273cc     09 01 08 FC | 	wrpin	##4608, arg01
273d0     0C 4E 85 F1 | 	sub	fp, #12
273d4     A7 12 02 FB | 	rdlong	arg01, fp
273d8     59 12 62 FD | 	drvh	arg01
273dc     04 4E 05 F1 | 	add	fp, #4
273e0     A7 12 02 FB | 	rdlong	arg01, fp
273e4     59 12 62 FD | 	drvh	arg01
273e8     04 4E 05 F1 | 	add	fp, #4
273ec     A7 12 02 FB | 	rdlong	arg01, fp
273f0     59 12 62 FD | 	drvh	arg01
273f4     04 4E 05 F1 | 	add	fp, #4
273f8     A7 12 02 FB | 	rdlong	arg01, fp
273fc     59 12 62 FD | 	drvh	arg01
27400     20 4E 85 F1 | 	sub	fp, #32
27404     00 04 80 FF 
27408     A7 20 68 FC | 	wrlong	##524304, fp
2740c     04 4E 05 F1 | 	add	fp, #4
27410     20 03 80 FF 
27414     A7 90 68 FC | 	wrlong	##409672, fp
27418     14 4E 05 F1 | 	add	fp, #20
2741c     A7 1E 02 FB | 	rdlong	local01, fp
27420     18 4E 85 F1 | 	sub	fp, #24
27424     A7 16 02 FB | 	rdlong	arg03, fp
27428     40 1E 62 FD | 	dirl	local01
2742c     A0 03 80 FF 
27430     0F 91 08 FC | 	wrpin	##475208, local01
27434     0F 17 12 FC | 	wxpin	arg03, local01
27438     0F 01 28 FC | 	wypin	#0, local01
2743c     41 1E 62 FD | 	dirh	local01
27440     1C 4E 05 F1 | 	add	fp, #28
27444     A7 20 02 FB | 	rdlong	local02, fp
27448     10 1F 82 F1 | 	sub	local01, local02
2744c     07 1E 06 F5 | 	and	local01, #7
27450     18 1E 66 F0 | 	shl	local01, #24
27454     78 14 06 F6 | 	mov	arg02, #120
27458     0F 15 42 F5 | 	or	arg02, local01
2745c     14 4E 85 F1 | 	sub	fp, #20
27460     A7 14 62 FC | 	wrlong	arg02, fp
27464     14 4E 05 F1 | 	add	fp, #20
27468     A7 12 02 FB | 	rdlong	arg01, fp
2746c     10 14 26 F4 | 	bith	arg02, #16
27470     40 12 62 FD | 	dirl	arg01
27474     09 15 02 FC | 	wrpin	arg02, arg01
27478     09 3F 18 FC | 	wxpin	#31, arg01
2747c     FF FF FF FF 
27480     09 FF 2B FC | 	wypin	##-1, arg01
27484     41 12 62 FD | 	dirh	arg01
27488     04 4E 85 F1 | 	sub	fp, #4
2748c     A7 14 02 FB | 	rdlong	arg02, fp
27490     08 4E 05 F1 | 	add	fp, #8
27494     A7 22 02 FB | 	rdlong	local03, fp
27498     11 15 82 F1 | 	sub	arg02, local03
2749c     07 14 06 F5 | 	and	arg02, #7
274a0     18 14 66 F0 | 	shl	arg02, #24
274a4     14 4E 85 F1 | 	sub	fp, #20
274a8     A7 14 62 FC | 	wrlong	arg02, fp
274ac     29 00 00 FF 
274b0     7A 14 46 F5 | 	or	arg02, ##21114
274b4     A7 14 62 FC | 	wrlong	arg02, fp
274b8     14 4E 05 F1 | 	add	fp, #20
274bc     A7 12 02 FB | 	rdlong	arg01, fp
274c0     40 12 62 FD | 	dirl	arg01
274c4     09 15 02 FC | 	wrpin	arg02, arg01
274c8     09 4F 18 FC | 	wxpin	#39, arg01
274cc     09 01 28 FC | 	wypin	#0, arg01
274d0     41 12 62 FD | 	dirh	arg01
274d4     28 4E 85 F1 | 	sub	fp, #40
274d8     A7 12 02 F6 | 	mov	arg01, fp
274dc     14 4E 85 F1 | 	sub	fp, #20
274e0     0A 14 06 F6 | 	mov	arg02, #10
274e4     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1118
274e8     00 12 06 F6 | 	mov	arg01, #0
274ec     00 14 06 F6 | 	mov	arg02, #0
274f0     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
274f4     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1128
274f8     64 12 06 F6 | 	mov	arg01, #100
274fc     A4 96 BF FD | 	call	#__system___waitus
27500     14 4E 05 F1 | 	add	fp, #20
27504     A7 12 02 F6 | 	mov	arg01, fp
27508     14 4E 85 F1 | 	sub	fp, #20
2750c     0A 14 06 F6 | 	mov	arg02, #10
27510     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1118
27514     0C 4E 05 F1 | 	add	fp, #12
27518     A7 00 48 FC | 	wrbyte	#0, fp
2751c     0C 4E 85 F1 | 	sub	fp, #12
27520     00 12 06 F6 | 	mov	arg01, #0
27524     00 14 06 F6 | 	mov	arg02, #0
27528     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
2752c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
27530     01 18 0E F2 | 	cmp	arg04, #1 wz
27534     B8 03 90 5D |  if_ne	jmp	#LR__4017
27538     08 12 06 F6 | 	mov	arg01, #8
2753c     AA 15 06 F6 | 	mov	arg02, #426
27540     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
27544     FD FA E1 F8 | 	getbyte	result1, result1, #0
27548     01 FA 0D F2 | 	cmp	result1, #1 wz
2754c     98 01 90 5D |  if_ne	jmp	#LR__4003
27550     14 4E 05 F1 | 	add	fp, #20
27554     A7 12 02 F6 | 	mov	arg01, fp
27558     14 4E 85 F1 | 	sub	fp, #20
2755c     04 14 06 F6 | 	mov	arg02, #4
27560     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1118
27564     16 4E 05 F1 | 	add	fp, #22
27568     A7 24 C2 FA | 	rdbyte	local04, fp
2756c     16 4E 85 F1 | 	sub	fp, #22
27570     01 24 0E F2 | 	cmp	local04, #1 wz
27574     17 4E 05 A1 |  if_e	add	fp, #23
27578     A7 22 C2 AA |  if_e	rdbyte	local03, fp
2757c     17 4E 85 A1 |  if_e	sub	fp, #23
27580     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27584     68 03 90 5D |  if_ne	jmp	#LR__4016
27588                 | ' 				for (tmr = 1000; tmr; tmr--) {
27588     18 4E 05 F1 | 	add	fp, #24
2758c     01 00 80 FF 
27590     A7 D0 6B FC | 	wrlong	##1000, fp
27594     18 4E 85 F1 | 	sub	fp, #24
27598                 | LR__4000
27598     18 4E 05 F1 | 	add	fp, #24
2759c     A7 1E 0A FB | 	rdlong	local01, fp wz
275a0     18 4E 85 F1 | 	sub	fp, #24
275a4     3C 00 90 AD |  if_e	jmp	#LR__4001
275a8     A9 12 06 F6 | 	mov	arg01, #169
275ac     1E 14 C6 F9 | 	decod	arg02, #30
275b0     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
275b4     FD 24 02 F6 | 	mov	local04, result1
275b8     07 24 4E F7 | 	zerox	local04, #7 wz
275bc     24 00 90 AD |  if_e	jmp	#LR__4001
275c0     01 00 00 FF 
275c4     E8 13 06 F6 | 	mov	arg01, ##1000
275c8     D8 95 BF FD | 	call	#__system___waitus
275cc     18 4E 05 F1 | 	add	fp, #24
275d0     A7 24 02 FB | 	rdlong	local04, fp
275d4     01 24 86 F1 | 	sub	local04, #1
275d8     A7 24 62 FC | 	wrlong	local04, fp
275dc     18 4E 85 F1 | 	sub	fp, #24
275e0     B4 FF 9F FD | 	jmp	#LR__4000
275e4                 | LR__4001
275e4     18 4E 05 F1 | 	add	fp, #24
275e8     A7 24 0A FB | 	rdlong	local04, fp wz
275ec     18 4E 85 F1 | 	sub	fp, #24
275f0     4C 00 90 AD |  if_e	jmp	#LR__4002
275f4     3A 12 06 F6 | 	mov	arg01, #58
275f8     00 14 06 F6 | 	mov	arg02, #0
275fc     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
27600     FD 22 02 F6 | 	mov	local03, result1
27604     07 22 4E F7 | 	zerox	local03, #7 wz
27608     34 00 90 5D |  if_ne	jmp	#LR__4002
2760c     14 4E 05 F1 | 	add	fp, #20
27610     A7 12 02 F6 | 	mov	arg01, fp
27614     14 4E 85 F1 | 	sub	fp, #20
27618     04 14 06 F6 | 	mov	arg02, #4
2761c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1118
27620     14 4E 05 F1 | 	add	fp, #20
27624     A7 1E C2 FA | 	rdbyte	local01, fp
27628     40 1E CE F7 | 	test	local01, #64 wz
2762c     0C 24 06 56 |  if_ne	mov	local04, #12
27630     04 24 06 A6 |  if_e	mov	local04, #4
27634     08 4E 85 F1 | 	sub	fp, #8
27638     A7 24 42 FC | 	wrbyte	local04, fp
2763c     0C 4E 85 F1 | 	sub	fp, #12
27640                 | LR__4002
27640     14 24 06 FB | 	rdlong	local04, #20
27644     18 4E 05 F1 | 	add	fp, #24
27648     A7 24 62 FC | 	wrlong	local04, fp
2764c     0C 4E 05 F1 | 	add	fp, #12
27650     A7 24 02 FB | 	rdlong	local04, fp
27654     1B 24 26 F4 | 	bith	local04, #27
27658     A7 24 62 FC | 	wrlong	local04, fp
2765c     0C 4E 85 F1 | 	sub	fp, #12
27660     A7 24 02 FB | 	rdlong	local04, fp
27664     18 4E 85 F1 | 	sub	fp, #24
27668     68 78 04 FF 
2766c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27670     1C 4E 05 C1 |  if_b	add	fp, #28
27674     00 01 80 CF 
27678     A7 08 68 CC |  if_b	wrlong	##131076, fp
2767c     1C 4E 85 C1 |  if_b	sub	fp, #28
27680     6C 02 90 CD |  if_b	jmp	#LR__4016
27684     18 4E 05 F1 | 	add	fp, #24
27688     A7 24 02 FB | 	rdlong	local04, fp
2768c     18 4E 85 F1 | 	sub	fp, #24
27690     E1 F5 05 FF 
27694     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27698     1C 4E 05 C1 |  if_b	add	fp, #28
2769c     00 01 80 CF 
276a0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
276a4     1C 4E 85 C1 |  if_b	sub	fp, #28
276a8     44 02 90 CD |  if_b	jmp	#LR__4016
276ac     18 4E 05 F1 | 	add	fp, #24
276b0     A7 24 02 FB | 	rdlong	local04, fp
276b4     18 4E 85 F1 | 	sub	fp, #24
276b8     3B 58 08 FF 
276bc     01 24 16 F2 | 	cmp	local04, ##280000001 wc
276c0     1C 4E 05 C1 |  if_b	add	fp, #28
276c4     00 01 80 CF 
276c8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
276cc     1C 4E 85 C1 |  if_b	sub	fp, #28
276d0     1C 02 90 CD |  if_b	jmp	#LR__4016
276d4     1C 4E 05 F1 | 	add	fp, #28
276d8     80 01 80 FF 
276dc     A7 10 68 FC | 	wrlong	##196616, fp
276e0     1C 4E 85 F1 | 	sub	fp, #28
276e4     08 02 90 FD | 	jmp	#LR__4016
276e8                 | LR__4003
276e8     A9 12 06 F6 | 	mov	arg01, #169
276ec     00 14 06 F6 | 	mov	arg02, #0
276f0     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
276f4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
276f8     02 24 16 F2 | 	cmp	local04, #2 wc
276fc     18 00 90 3D |  if_ae	jmp	#LR__4004
27700     0C 4E 05 F1 | 	add	fp, #12
27704     A7 04 48 FC | 	wrbyte	#2, fp
27708     04 4E 05 F1 | 	add	fp, #4
2770c     A7 52 49 FC | 	wrbyte	#169, fp
27710     10 4E 85 F1 | 	sub	fp, #16
27714     14 00 90 FD | 	jmp	#LR__4005
27718                 | LR__4004
27718     0C 4E 05 F1 | 	add	fp, #12
2771c     A7 02 48 FC | 	wrbyte	#1, fp
27720     04 4E 05 F1 | 	add	fp, #4
27724     A7 02 48 FC | 	wrbyte	#1, fp
27728     10 4E 85 F1 | 	sub	fp, #16
2772c                 | LR__4005
2772c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2772c                 | ' 			}
2772c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2772c     18 4E 05 F1 | 	add	fp, #24
27730     01 00 80 FF 
27734     A7 D0 6B FC | 	wrlong	##1000, fp
27738     18 4E 85 F1 | 	sub	fp, #24
2773c                 | LR__4006
2773c     18 4E 05 F1 | 	add	fp, #24
27740     A7 22 0A FB | 	rdlong	local03, fp wz
27744     18 4E 85 F1 | 	sub	fp, #24
27748     44 00 90 AD |  if_e	jmp	#LR__4007
2774c     10 4E 05 F1 | 	add	fp, #16
27750     A7 12 C2 FA | 	rdbyte	arg01, fp
27754     10 4E 85 F1 | 	sub	fp, #16
27758     00 14 06 F6 | 	mov	arg02, #0
2775c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
27760     FD 24 02 F6 | 	mov	local04, result1
27764     07 24 4E F7 | 	zerox	local04, #7 wz
27768     24 00 90 AD |  if_e	jmp	#LR__4007
2776c     01 00 00 FF 
27770     E8 13 06 F6 | 	mov	arg01, ##1000
27774     2C 94 BF FD | 	call	#__system___waitus
27778     18 4E 05 F1 | 	add	fp, #24
2777c     A7 24 02 FB | 	rdlong	local04, fp
27780     01 24 86 F1 | 	sub	local04, #1
27784     A7 24 62 FC | 	wrlong	local04, fp
27788     18 4E 85 F1 | 	sub	fp, #24
2778c     AC FF 9F FD | 	jmp	#LR__4006
27790                 | LR__4007
27790     18 4E 05 F1 | 	add	fp, #24
27794     A7 24 0A FB | 	rdlong	local04, fp wz
27798     18 4E 85 F1 | 	sub	fp, #24
2779c     14 00 90 AD |  if_e	jmp	#LR__4008
277a0     10 12 06 F6 | 	mov	arg01, #16
277a4     09 14 C6 F9 | 	decod	arg02, #9
277a8     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1142
277ac     07 FA 4D F7 | 	zerox	result1, #7 wz
277b0     0C 00 90 AD |  if_e	jmp	#LR__4009
277b4                 | LR__4008
277b4     0C 4E 05 F1 | 	add	fp, #12
277b8     A7 00 48 FC | 	wrbyte	#0, fp
277bc     0C 4E 85 F1 | 	sub	fp, #12
277c0                 | LR__4009
277c0     14 24 06 FB | 	rdlong	local04, #20
277c4     18 4E 05 F1 | 	add	fp, #24
277c8     A7 24 62 FC | 	wrlong	local04, fp
277cc     18 4E 85 F1 | 	sub	fp, #24
277d0     F0 FA 02 FF 
277d4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
277d8     18 00 90 3D |  if_ae	jmp	#LR__4010
277dc     24 4E 05 F1 | 	add	fp, #36
277e0     A7 24 02 FB | 	rdlong	local04, fp
277e4     1B 24 26 F4 | 	bith	local04, #27
277e8     A7 24 62 FC | 	wrlong	local04, fp
277ec     24 4E 85 F1 | 	sub	fp, #36
277f0     2C 00 90 FD | 	jmp	#LR__4011
277f4                 | LR__4010
277f4     18 4E 05 F1 | 	add	fp, #24
277f8     A7 24 02 FB | 	rdlong	local04, fp
277fc     18 4E 85 F1 | 	sub	fp, #24
27800     E1 F5 05 FF 
27804     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27808     24 4E 05 C1 |  if_b	add	fp, #36
2780c     A7 24 02 CB |  if_b	rdlong	local04, fp
27810     80 00 04 CF 
27814     00 24 46 C5 |  if_b	or	local04, ##134283264
27818     A7 24 62 CC |  if_b	wrlong	local04, fp
2781c     24 4E 85 C1 |  if_b	sub	fp, #36
27820                 | LR__4011
27820     18 4E 05 F1 | 	add	fp, #24
27824     A7 24 02 FB | 	rdlong	local04, fp
27828     18 4E 85 F1 | 	sub	fp, #24
2782c     F0 FA 02 FF 
27830     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27834     1C 4E 05 C1 |  if_b	add	fp, #28
27838     00 01 80 CF 
2783c     A7 08 68 CC |  if_b	wrlong	##131076, fp
27840     1C 4E 85 C1 |  if_b	sub	fp, #28
27844     A8 00 90 CD |  if_b	jmp	#LR__4015
27848     18 4E 05 F1 | 	add	fp, #24
2784c     A7 24 02 FB | 	rdlong	local04, fp
27850     18 4E 85 F1 | 	sub	fp, #24
27854     68 78 04 FF 
27858     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2785c     1C 4E 05 C1 |  if_b	add	fp, #28
27860     80 01 80 CF 
27864     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27868     1C 4E 85 C1 |  if_b	sub	fp, #28
2786c     80 00 90 CD |  if_b	jmp	#LR__4014
27870     18 4E 05 F1 | 	add	fp, #24
27874     A7 24 02 FB | 	rdlong	local04, fp
27878     18 4E 85 F1 | 	sub	fp, #24
2787c     E1 F5 05 FF 
27880     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27884     1C 4E 05 C1 |  if_b	add	fp, #28
27888     00 02 80 CF 
2788c     A7 10 68 CC |  if_b	wrlong	##262152, fp
27890     1C 4E 85 C1 |  if_b	sub	fp, #28
27894     58 00 90 CD |  if_b	jmp	#LR__4013
27898     18 4E 05 F1 | 	add	fp, #24
2789c     A7 24 02 FB | 	rdlong	local04, fp
278a0     18 4E 85 F1 | 	sub	fp, #24
278a4     59 73 07 FF 
278a8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
278ac     1C 4E 05 C1 |  if_b	add	fp, #28
278b0     80 02 80 CF 
278b4     A7 14 68 CC |  if_b	wrlong	##327690, fp
278b8     1C 4E 85 C1 |  if_b	sub	fp, #28
278bc     30 00 90 CD |  if_b	jmp	#LR__4012
278c0     18 4E 05 F1 | 	add	fp, #24
278c4     A7 24 02 FB | 	rdlong	local04, fp
278c8     18 4E 85 F1 | 	sub	fp, #24
278cc     D1 F0 08 FF 
278d0     01 25 16 F2 | 	cmp	local04, ##300000001 wc
278d4     1C 4E 05 C1 |  if_b	add	fp, #28
278d8     00 03 80 CF 
278dc     A7 18 68 CC |  if_b	wrlong	##393228, fp
278e0     1C 4E 85 F3 | 	sumc	fp, #28
278e4     80 03 80 3F 
278e8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
278ec     1C 4E 85 31 |  if_ae	sub	fp, #28
278f0                 | LR__4012
278f0                 | LR__4013
278f0                 | LR__4014
278f0                 | LR__4015
278f0                 | LR__4016
278f0                 | LR__4017
278f0     0C 4E 05 F1 | 	add	fp, #12
278f4     A7 24 C2 FA | 	rdbyte	local04, fp
278f8     01 00 00 FF 
278fc     21 E4 05 F1 | 	add	objptr, ##545
27900     F2 24 42 FC | 	wrbyte	local04, objptr
27904     A7 1E CA FA | 	rdbyte	local01, fp wz
27908     00 24 06 56 |  if_ne	mov	local04, #0
2790c     01 24 06 A6 |  if_e	mov	local04, #1
27910     20 4E 05 F1 | 	add	fp, #32
27914     A7 24 42 FC | 	wrbyte	local04, fp
27918     A7 24 C2 FA | 	rdbyte	local04, fp
2791c     2C 4E 85 F1 | 	sub	fp, #44
27920     01 E4 85 F1 | 	sub	objptr, #1
27924     F2 24 42 FC | 	wrbyte	local04, objptr
27928     01 00 00 FF 
2792c     20 E4 85 F1 | 	sub	objptr, ##544
27930     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1128
27934     34 4E 05 F1 | 	add	fp, #52
27938     A7 12 02 FB | 	rdlong	arg01, fp
2793c     18 4E 85 F1 | 	sub	fp, #24
27940     A7 14 02 FB | 	rdlong	arg02, fp
27944     09 15 12 FC | 	wxpin	arg02, arg01
27948     1C 4E 05 F1 | 	add	fp, #28
2794c     A7 12 02 FB | 	rdlong	arg01, fp
27950     14 4E 85 F1 | 	sub	fp, #20
27954     A7 14 02 FB | 	rdlong	arg02, fp
27958     09 15 02 FC | 	wrpin	arg02, arg01
2795c                 | ' 
2795c                 | ' 		}
2795c                 | ' 	}
2795c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2795c                 | ' 	CardType = ty;
2795c                 | ' 	s = ty ? 0 :  0x01 ;
2795c                 | ' 	Stat = s;
2795c                 | ' 
2795c                 | ' 	deselect();
2795c                 | ' 
2795c                 | ' 
2795c                 | ' 	_wxpin( PIN_CLK, ck_div );
2795c                 | ' 	_wrpin( PIN_DI, spm_tx );
2795c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2795c                 | ' 	return s;
2795c     08 4E 05 F1 | 	add	fp, #8
27960     A7 FA C1 FA | 	rdbyte	result1, fp
27964     2C 4E 85 F1 | 	sub	fp, #44
27968                 | LR__4018
27968     A7 F0 03 F6 | 	mov	ptra, fp
2796c     B2 00 A0 FD | 	call	#popregs_
27970                 | _fatfs_cc_disk_initialize_ret
27970     2D 00 64 FD | 	ret
27974                 | 
27974                 | _fatfs_cc_disk_read
27974     05 4A 05 F6 | 	mov	COUNT_, #5
27978     A8 00 A0 FD | 	call	#pushregs_
2797c     0A 1F 02 F6 | 	mov	local01, arg02
27980     0B 21 02 F6 | 	mov	local02, arg03
27984     0C 23 02 F6 | 	mov	local03, arg04
27988     00 12 0E F2 | 	cmp	arg01, #0 wz
2798c     01 FA 05 56 |  if_ne	mov	result1, #1
27990                 | ' 
27990                 | ' 	return Stat;
27990     01 00 00 AF 
27994     20 E4 05 A1 |  if_e	add	objptr, ##544
27998     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2799c     01 00 00 AF 
279a0     20 E4 85 A1 |  if_e	sub	objptr, ##544
279a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
279a8     01 FA CD F7 | 	test	result1, #1 wz
279ac     03 FA 05 56 |  if_ne	mov	result1, #3
279b0     84 00 90 5D |  if_ne	jmp	#LR__4022
279b4     01 00 00 FF 
279b8     21 E4 05 F1 | 	add	objptr, ##545
279bc     F2 24 C2 FA | 	rdbyte	local04, objptr
279c0     01 00 00 FF 
279c4     21 E4 85 F1 | 	sub	objptr, ##545
279c8     08 24 CE F7 | 	test	local04, #8 wz
279cc     09 20 66 A0 |  if_e	shl	local02, #9
279d0     02 22 16 F2 | 	cmp	local03, #2 wc
279d4     12 24 06 36 |  if_ae	mov	local04, #18
279d8     11 24 06 C6 |  if_b	mov	local04, #17
279dc     10 15 02 F6 | 	mov	arg02, local02
279e0     12 13 02 F6 | 	mov	arg01, local04
279e4     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1142
279e8     FD 26 02 F6 | 	mov	local05, result1
279ec     07 26 4E F7 | 	zerox	local05, #7 wz
279f0     30 00 90 5D |  if_ne	jmp	#LR__4021
279f4                 | ' 		do {
279f4                 | LR__4020
279f4     0F 13 02 F6 | 	mov	arg01, local01
279f8     09 14 C6 F9 | 	decod	arg02, #9
279fc     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1136
27a00     00 FA 0D F2 | 	cmp	result1, #0 wz
27a04     01 00 00 5F 
27a08     00 1E 06 51 |  if_ne	add	local01, ##512
27a0c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4020
27a10     12 25 E2 F8 | 	getbyte	local04, local04, #0
27a14     12 24 0E F2 | 	cmp	local04, #18 wz
27a18     0C 12 06 A6 |  if_e	mov	arg01, #12
27a1c     00 14 06 A6 |  if_e	mov	arg02, #0
27a20     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1142
27a24                 | LR__4021
27a24     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1128
27a28                 | ' 	}
27a28                 | ' 	deselect();
27a28                 | ' 
27a28                 | ' 	return count ? RES_ERROR : RES_OK;
27a28     00 22 0E F2 | 	cmp	local03, #0 wz
27a2c     01 26 06 56 |  if_ne	mov	local05, #1
27a30     00 26 06 A6 |  if_e	mov	local05, #0
27a34     13 FB 01 F6 | 	mov	result1, local05
27a38                 | LR__4022
27a38     A7 F0 03 F6 | 	mov	ptra, fp
27a3c     B2 00 A0 FD | 	call	#popregs_
27a40                 | _fatfs_cc_disk_read_ret
27a40     2D 00 64 FD | 	ret
27a44                 | 
27a44                 | _fatfs_cc_disk_write
27a44     04 4A 05 F6 | 	mov	COUNT_, #4
27a48     A8 00 A0 FD | 	call	#pushregs_
27a4c     0A 1F 02 F6 | 	mov	local01, arg02
27a50     0C 21 02 F6 | 	mov	local02, arg04
27a54     0B 23 02 F6 | 	mov	local03, arg03
27a58     00 12 0E F2 | 	cmp	arg01, #0 wz
27a5c     01 FA 05 56 |  if_ne	mov	result1, #1
27a60                 | ' 
27a60                 | ' 	return Stat;
27a60     01 00 00 AF 
27a64     20 E4 05 A1 |  if_e	add	objptr, ##544
27a68     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27a6c     01 00 00 AF 
27a70     20 E4 85 A1 |  if_e	sub	objptr, ##544
27a74     FD FA E1 F8 | 	getbyte	result1, result1, #0
27a78     01 FA CD F7 | 	test	result1, #1 wz
27a7c     03 FA 05 56 |  if_ne	mov	result1, #3
27a80     D4 00 90 5D |  if_ne	jmp	#LR__4034
27a84     01 00 00 FF 
27a88     21 E4 05 F1 | 	add	objptr, ##545
27a8c     F2 16 C2 FA | 	rdbyte	arg03, objptr
27a90     01 00 00 FF 
27a94     21 E4 85 F1 | 	sub	objptr, ##545
27a98     08 16 CE F7 | 	test	arg03, #8 wz
27a9c     09 22 66 A0 |  if_e	shl	local03, #9
27aa0     01 20 0E F2 | 	cmp	local02, #1 wz
27aa4     30 00 90 5D |  if_ne	jmp	#LR__4030
27aa8     18 12 06 F6 | 	mov	arg01, #24
27aac     11 15 02 F6 | 	mov	arg02, local03
27ab0     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1142
27ab4     FD 24 02 F6 | 	mov	local04, result1
27ab8     07 24 4E F7 | 	zerox	local04, #7 wz
27abc     84 00 90 5D |  if_ne	jmp	#LR__4033
27ac0     0F 13 02 F6 | 	mov	arg01, local01
27ac4     FE 14 06 F6 | 	mov	arg02, #254
27ac8     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1138
27acc     00 FA 0D F2 | 	cmp	result1, #0 wz
27ad0     00 20 06 56 |  if_ne	mov	local02, #0
27ad4     6C 00 90 FD | 	jmp	#LR__4033
27ad8                 | LR__4030
27ad8     01 00 00 FF 
27adc     21 E4 05 F1 | 	add	objptr, ##545
27ae0     F2 24 C2 FA | 	rdbyte	local04, objptr
27ae4     01 00 00 FF 
27ae8     21 E4 85 F1 | 	sub	objptr, ##545
27aec     06 24 CE F7 | 	test	local04, #6 wz
27af0     97 12 06 56 |  if_ne	mov	arg01, #151
27af4     10 15 02 56 |  if_ne	mov	arg02, local02
27af8     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1142
27afc     11 15 02 F6 | 	mov	arg02, local03
27b00     19 12 06 F6 | 	mov	arg01, #25
27b04     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1142
27b08     FD 24 02 F6 | 	mov	local04, result1
27b0c     07 24 4E F7 | 	zerox	local04, #7 wz
27b10     30 00 90 5D |  if_ne	jmp	#LR__4032
27b14                 | ' 			do {
27b14                 | LR__4031
27b14     0F 13 02 F6 | 	mov	arg01, local01
27b18     FC 14 06 F6 | 	mov	arg02, #252
27b1c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1138
27b20     00 FA 0D F2 | 	cmp	result1, #0 wz
27b24     01 00 00 5F 
27b28     00 1E 06 51 |  if_ne	add	local01, ##512
27b2c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4031
27b30     00 12 06 F6 | 	mov	arg01, #0
27b34     FD 14 06 F6 | 	mov	arg02, #253
27b38     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1138
27b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
27b40     01 20 06 A6 |  if_e	mov	local02, #1
27b44                 | LR__4032
27b44                 | LR__4033
27b44     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1128
27b48                 | ' 				count = 1;
27b48                 | ' 		}
27b48                 | ' 	}
27b48                 | ' 	deselect();
27b48                 | ' 
27b48                 | ' 	return count ? RES_ERROR : RES_OK;
27b48     00 20 0E F2 | 	cmp	local02, #0 wz
27b4c     01 24 06 56 |  if_ne	mov	local04, #1
27b50     00 24 06 A6 |  if_e	mov	local04, #0
27b54     12 FB 01 F6 | 	mov	result1, local04
27b58                 | LR__4034
27b58     A7 F0 03 F6 | 	mov	ptra, fp
27b5c     B2 00 A0 FD | 	call	#popregs_
27b60                 | _fatfs_cc_disk_write_ret
27b60     2D 00 64 FD | 	ret
27b64                 | 
27b64                 | _fatfs_cc_disk_ioctl
27b64     01 4A 05 F6 | 	mov	COUNT_, #1
27b68     A8 00 A0 FD | 	call	#pushregs_
27b6c     30 F0 07 F1 | 	add	ptra, #48
27b70     04 4E 05 F1 | 	add	fp, #4
27b74     A7 12 42 FC | 	wrbyte	arg01, fp
27b78     04 4E 05 F1 | 	add	fp, #4
27b7c     A7 14 42 FC | 	wrbyte	arg02, fp
27b80     04 4E 05 F1 | 	add	fp, #4
27b84     A7 16 62 FC | 	wrlong	arg03, fp
27b88     08 4E 85 F1 | 	sub	fp, #8
27b8c     A7 12 CA FA | 	rdbyte	arg01, fp wz
27b90     04 4E 85 F1 | 	sub	fp, #4
27b94     01 FA 05 56 |  if_ne	mov	result1, #1
27b98                 | ' 
27b98                 | ' 	return Stat;
27b98     01 00 00 AF 
27b9c     20 E4 05 A1 |  if_e	add	objptr, ##544
27ba0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27ba4     01 00 00 AF 
27ba8     20 E4 85 A1 |  if_e	sub	objptr, ##544
27bac     FD FA E1 F8 | 	getbyte	result1, result1, #0
27bb0     01 FA CD F7 | 	test	result1, #1 wz
27bb4     03 FA 05 56 |  if_ne	mov	result1, #3
27bb8     E4 01 90 5D |  if_ne	jmp	#LR__4048
27bbc     10 4E 05 F1 | 	add	fp, #16
27bc0     A7 02 68 FC | 	wrlong	#1, fp
27bc4                 | ' 
27bc4                 | ' 	res = RES_ERROR;
27bc4                 | ' 	switch (ctrl) {
27bc4     08 4E 85 F1 | 	sub	fp, #8
27bc8     A7 1E C2 FA | 	rdbyte	local01, fp
27bcc     08 4E 85 F1 | 	sub	fp, #8
27bd0     04 1E 26 F3 | 	fle	local01, #4
27bd4     30 1E 62 FD | 	jmprel	local01
27bd8                 | LR__4040
27bd8     10 00 90 FD | 	jmp	#LR__4041
27bdc     24 00 90 FD | 	jmp	#LR__4042
27be0     A0 01 90 FD | 	jmp	#LR__4046
27be4     80 01 90 FD | 	jmp	#LR__4045
27be8     98 01 90 FD | 	jmp	#LR__4046
27bec                 | LR__4041
27bec     B4 79 B0 FD | 	call	#_fatfs_cc_select_1132
27bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
27bf4     10 4E 05 51 |  if_ne	add	fp, #16
27bf8     A7 00 68 5C |  if_ne	wrlong	#0, fp
27bfc     10 4E 85 51 |  if_ne	sub	fp, #16
27c00                 | ' 			break;
27c00     8C 01 90 FD | 	jmp	#LR__4047
27c04                 | LR__4042
27c04     09 12 06 F6 | 	mov	arg01, #9
27c08     00 14 06 F6 | 	mov	arg02, #0
27c0c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1142
27c10     FD 1E 02 F6 | 	mov	local01, result1
27c14     07 1E 4E F7 | 	zerox	local01, #7 wz
27c18     74 01 90 5D |  if_ne	jmp	#LR__4047
27c1c     18 4E 05 F1 | 	add	fp, #24
27c20     A7 12 02 F6 | 	mov	arg01, fp
27c24     18 4E 85 F1 | 	sub	fp, #24
27c28     10 14 06 F6 | 	mov	arg02, #16
27c2c     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1136
27c30     00 FA 0D F2 | 	cmp	result1, #0 wz
27c34     58 01 90 AD |  if_e	jmp	#LR__4047
27c38     18 4E 05 F1 | 	add	fp, #24
27c3c     A7 1E C2 FA | 	rdbyte	local01, fp
27c40     18 4E 85 F1 | 	sub	fp, #24
27c44     06 1E 46 F0 | 	shr	local01, #6
27c48     01 1E 0E F2 | 	cmp	local01, #1 wz
27c4c     5C 00 90 5D |  if_ne	jmp	#LR__4043
27c50     21 4E 05 F1 | 	add	fp, #33
27c54     A7 1E C2 FA | 	rdbyte	local01, fp
27c58     01 4E 85 F1 | 	sub	fp, #1
27c5c     A7 FA C1 FA | 	rdbyte	result1, fp
27c60     FD FA 31 F9 | 	getword	result1, result1, #0
27c64     08 FA 65 F0 | 	shl	result1, #8
27c68     FD 1E 02 F1 | 	add	local01, result1
27c6c     01 4E 85 F1 | 	sub	fp, #1
27c70     A7 FA C1 FA | 	rdbyte	result1, fp
27c74     3F FA 05 F5 | 	and	result1, #63
27c78     10 FA 65 F0 | 	shl	result1, #16
27c7c     FD 1E 02 F1 | 	add	local01, result1
27c80     01 1E 06 F1 | 	add	local01, #1
27c84     09 4E 05 F1 | 	add	fp, #9
27c88     A7 1E 62 FC | 	wrlong	local01, fp
27c8c     1C 4E 85 F1 | 	sub	fp, #28
27c90     A7 1E 02 FB | 	rdlong	local01, fp
27c94     1C 4E 05 F1 | 	add	fp, #28
27c98     A7 FA 01 FB | 	rdlong	result1, fp
27c9c     28 4E 85 F1 | 	sub	fp, #40
27ca0     0A FA 65 F0 | 	shl	result1, #10
27ca4     0F FB 61 FC | 	wrlong	result1, local01
27ca8     AC 00 90 FD | 	jmp	#LR__4044
27cac                 | LR__4043
27cac     1D 4E 05 F1 | 	add	fp, #29
27cb0     A7 1E C2 FA | 	rdbyte	local01, fp
27cb4     0F 1F 42 F8 | 	getnib	local01, local01, #0
27cb8     05 4E 05 F1 | 	add	fp, #5
27cbc     A7 FA C1 FA | 	rdbyte	result1, fp
27cc0     80 FA 05 F5 | 	and	result1, #128
27cc4     07 FA C5 F0 | 	sar	result1, #7
27cc8     FD 1E 02 F1 | 	add	local01, result1
27ccc     01 4E 85 F1 | 	sub	fp, #1
27cd0     A7 FA C1 FA | 	rdbyte	result1, fp
27cd4     03 FA 05 F5 | 	and	result1, #3
27cd8     01 FA 65 F0 | 	shl	result1, #1
27cdc     FD 1E 02 F1 | 	add	local01, result1
27ce0     02 1E 06 F1 | 	add	local01, #2
27ce4     0D 4E 85 F1 | 	sub	fp, #13
27ce8     A7 1E 42 FC | 	wrbyte	local01, fp
27cec     0C 4E 05 F1 | 	add	fp, #12
27cf0     A7 1E C2 FA | 	rdbyte	local01, fp
27cf4     06 1E 46 F0 | 	shr	local01, #6
27cf8     01 4E 85 F1 | 	sub	fp, #1
27cfc     A7 FA C1 FA | 	rdbyte	result1, fp
27d00     FD FA 31 F9 | 	getword	result1, result1, #0
27d04     02 FA 65 F0 | 	shl	result1, #2
27d08     FD 1E 02 F1 | 	add	local01, result1
27d0c     01 4E 85 F1 | 	sub	fp, #1
27d10     A7 FA C1 FA | 	rdbyte	result1, fp
27d14     03 FA 05 F5 | 	and	result1, #3
27d18     FD FA 31 F9 | 	getword	result1, result1, #0
27d1c     0A FA 65 F0 | 	shl	result1, #10
27d20     FD 1E 02 F1 | 	add	local01, result1
27d24     01 1E 06 F1 | 	add	local01, #1
27d28     0A 4E 05 F1 | 	add	fp, #10
27d2c     A7 1E 62 FC | 	wrlong	local01, fp
27d30     1C 4E 85 F1 | 	sub	fp, #28
27d34     A7 1E 02 FB | 	rdlong	local01, fp
27d38     1C 4E 05 F1 | 	add	fp, #28
27d3c     A7 FA 01 FB | 	rdlong	result1, fp
27d40     14 4E 85 F1 | 	sub	fp, #20
27d44     A7 16 C2 FA | 	rdbyte	arg03, fp
27d48     14 4E 85 F1 | 	sub	fp, #20
27d4c     09 16 86 F1 | 	sub	arg03, #9
27d50     0B FB 61 F0 | 	shl	result1, arg03
27d54     0F FB 61 FC | 	wrlong	result1, local01
27d58                 | LR__4044
27d58     10 4E 05 F1 | 	add	fp, #16
27d5c     A7 00 68 FC | 	wrlong	#0, fp
27d60     10 4E 85 F1 | 	sub	fp, #16
27d64                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27d64                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27d64                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27d64                 | ' 				}
27d64                 | ' 				res = RES_OK;
27d64                 | ' 			}
27d64                 | ' 			break;
27d64     28 00 90 FD | 	jmp	#LR__4047
27d68                 | LR__4045
27d68     0C 4E 05 F1 | 	add	fp, #12
27d6c     A7 1E 02 FB | 	rdlong	local01, fp
27d70     0F 01 69 FC | 	wrlong	#128, local01
27d74     04 4E 05 F1 | 	add	fp, #4
27d78     A7 00 68 FC | 	wrlong	#0, fp
27d7c     10 4E 85 F1 | 	sub	fp, #16
27d80                 | ' 			*(DWORD*)buff = 128;
27d80                 | ' 			res = RES_OK;
27d80                 | ' 			break;
27d80     0C 00 90 FD | 	jmp	#LR__4047
27d84                 | LR__4046
27d84     10 4E 05 F1 | 	add	fp, #16
27d88     A7 08 68 FC | 	wrlong	#4, fp
27d8c     10 4E 85 F1 | 	sub	fp, #16
27d90                 | LR__4047
27d90     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1128
27d94                 | ' 			res = RES_PARERR;
27d94                 | ' 	}
27d94                 | ' 
27d94                 | ' 	deselect();
27d94                 | ' 
27d94                 | ' 	return res;
27d94     10 4E 05 F1 | 	add	fp, #16
27d98     A7 FA 01 FB | 	rdlong	result1, fp
27d9c     10 4E 85 F1 | 	sub	fp, #16
27da0                 | LR__4048
27da0     A7 F0 03 F6 | 	mov	ptra, fp
27da4     B2 00 A0 FD | 	call	#popregs_
27da8                 | _fatfs_cc_disk_ioctl_ret
27da8     2D 00 64 FD | 	ret
27dac                 | 
27dac                 | _fatfs_cc_disk_setpins
27dac     00 12 0E F2 | 	cmp	arg01, #0 wz
27db0     01 FA 65 56 |  if_ne	neg	result1, #1
27db4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27db8     01 00 00 FF 
27dbc     10 E4 05 F1 | 	add	objptr, ##528
27dc0     F2 14 62 FC | 	wrlong	arg02, objptr
27dc4     04 E4 05 F1 | 	add	objptr, #4
27dc8     F2 16 62 FC | 	wrlong	arg03, objptr
27dcc     04 E4 05 F1 | 	add	objptr, #4
27dd0     F2 18 62 FC | 	wrlong	arg04, objptr
27dd4     04 E4 05 F1 | 	add	objptr, #4
27dd8     F2 1A 62 FC | 	wrlong	arg05, objptr
27ddc     01 00 00 FF 
27de0     1C E4 85 F1 | 	sub	objptr, ##540
27de4     00 FA 05 F6 | 	mov	result1, #0
27de8                 | _fatfs_cc_disk_setpins_ret
27de8     2D 00 64 FD | 	ret
27dec                 | 
27dec                 | _fatfs_cc_tchar2uni
27dec     09 01 02 FB | 	rdlong	_var01, arg01
27df0     00 03 02 F6 | 	mov	_var02, _var01
27df4     01 00 06 F1 | 	add	_var01, #1
27df8     00 05 02 F6 | 	mov	_var03, _var01
27dfc     01 07 C2 FA | 	rdbyte	_var04, _var02
27e00     80 06 CE F7 | 	test	_var04, #128 wz
27e04     E8 00 90 AD |  if_e	jmp	#LR__4057
27e08     03 09 02 F6 | 	mov	_var05, _var04
27e0c     E0 08 06 F5 | 	and	_var05, #224
27e10     C0 08 0E F2 | 	cmp	_var05, #192 wz
27e14     1F 06 06 A5 |  if_e	and	_var04, #31
27e18     01 0A 06 A6 |  if_e	mov	_var06, #1
27e1c     34 00 90 AD |  if_e	jmp	#LR__4051
27e20     03 09 02 F6 | 	mov	_var05, _var04
27e24     F0 08 06 F5 | 	and	_var05, #240
27e28     E0 08 0E F2 | 	cmp	_var05, #224 wz
27e2c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27e30     02 0A 06 A6 |  if_e	mov	_var06, #2
27e34     1C 00 90 AD |  if_e	jmp	#LR__4050
27e38     03 09 02 F6 | 	mov	_var05, _var04
27e3c     F8 08 06 F5 | 	and	_var05, #248
27e40     F0 08 0E F2 | 	cmp	_var05, #240 wz
27e44     07 06 06 A5 |  if_e	and	_var04, #7
27e48     03 0A 06 A6 |  if_e	mov	_var06, #3
27e4c                 | ' 			return 0xFFFFFFFF;
27e4c     01 FA 65 56 |  if_ne	neg	result1, #1
27e50     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27e54                 | LR__4050
27e54                 | LR__4051
27e54                 | ' 		}
27e54                 | ' 		do {
27e54                 | LR__4052
27e54     02 0D C2 FA | 	rdbyte	_var07, _var03
27e58     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
27e5c     C0 08 06 F5 | 	and	_var05, #192
27e60     80 08 0E F2 | 	cmp	_var05, #128 wz
27e64     01 04 06 F1 | 	add	_var03, #1
27e68     01 FA 65 56 |  if_ne	neg	result1, #1
27e6c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27e70     06 06 66 F0 | 	shl	_var04, #6
27e74     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
27e78     3F 02 06 F5 | 	and	_var02, #63
27e7c     01 07 42 F5 | 	or	_var04, _var02
27e80     F4 0B 6E FB | 	djnz	_var06, #LR__4052
27e84     80 06 16 F2 | 	cmp	_var04, #128 wc
27e88     24 00 90 CD |  if_b	jmp	#LR__4054
27e8c     6C 00 00 FF 
27e90     00 06 16 F2 | 	cmp	_var04, ##55296 wc
27e94     0C 00 90 CD |  if_b	jmp	#LR__4053
27e98     70 00 00 FF 
27e9c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
27ea0     0C 00 90 CD |  if_b	jmp	#LR__4054
27ea4                 | LR__4053
27ea4     80 08 00 FF 
27ea8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
27eac     08 00 90 CD |  if_b	jmp	#LR__4055
27eb0                 | LR__4054
27eb0     01 FA 65 F6 | 	neg	result1, #1
27eb4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
27eb8                 | LR__4055
27eb8     80 00 00 FF 
27ebc     00 06 16 F2 | 	cmp	_var04, ##65536 wc
27ec0     2C 00 90 CD |  if_b	jmp	#LR__4056
27ec4     03 03 02 F6 | 	mov	_var02, _var04
27ec8     80 00 00 FF 
27ecc     00 02 86 F1 | 	sub	_var02, ##65536
27ed0     06 02 66 F0 | 	shl	_var02, #6
27ed4     80 FF 01 FF 
27ed8     00 02 06 F5 | 	and	_var02, ##67043328
27edc     6E 00 6C FF 
27ee0     00 08 06 F6 | 	mov	_var05, ##-671032320
27ee4     01 09 42 F5 | 	or	_var05, _var02
27ee8     09 06 46 F7 | 	zerox	_var04, #9
27eec     04 07 42 F5 | 	or	_var04, _var05
27ef0                 | LR__4056
27ef0                 | LR__4057
27ef0     09 05 62 FC | 	wrlong	_var03, arg01
27ef4                 | ' 	}
27ef4                 | ' #line 811 "ff.c"
27ef4                 | ' 	*str = p;
27ef4                 | ' 	return uc;
27ef4     03 FB 01 F6 | 	mov	result1, _var04
27ef8                 | _fatfs_cc_tchar2uni_ret
27ef8     2D 00 64 FD | 	ret
27efc                 | 
27efc                 | _fatfs_cc_put_utf
27efc     80 12 16 F2 | 	cmp	arg01, #128 wc
27f00     18 00 90 3D |  if_ae	jmp	#LR__4060
27f04     01 16 16 F2 | 	cmp	arg03, #1 wc
27f08     00 FA 05 C6 |  if_b	mov	result1, #0
27f0c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27f10     0A 13 42 FC | 	wrbyte	arg01, arg02
27f14                 | ' 		*buf = (TCHAR)chr;
27f14                 | ' 		return 1;
27f14     01 FA 05 F6 | 	mov	result1, #1
27f18     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f1c                 | LR__4060
27f1c     04 00 00 FF 
27f20     00 12 16 F2 | 	cmp	arg01, ##2048 wc
27f24     40 00 90 3D |  if_ae	jmp	#LR__4061
27f28     02 16 16 F2 | 	cmp	arg03, #2 wc
27f2c     00 FA 05 C6 |  if_b	mov	result1, #0
27f30     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27f34     09 FB 01 F6 | 	mov	result1, arg01
27f38     06 FA 45 F0 | 	shr	result1, #6
27f3c     1F FA 05 F5 | 	and	result1, #31
27f40     C0 16 06 F6 | 	mov	arg03, #192
27f44     FD 16 42 F5 | 	or	arg03, result1
27f48     0A 17 42 FC | 	wrbyte	arg03, arg02
27f4c     01 14 06 F1 | 	add	arg02, #1
27f50     3F 12 06 F5 | 	and	arg01, #63
27f54     80 FA 05 F6 | 	mov	result1, #128
27f58     09 FB 41 F5 | 	or	result1, arg01
27f5c     0A FB 41 FC | 	wrbyte	result1, arg02
27f60                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
27f60                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27f60                 | ' 		return 2;
27f60     02 FA 05 F6 | 	mov	result1, #2
27f64     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f68                 | LR__4061
27f68     80 00 00 FF 
27f6c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27f70     70 00 90 3D |  if_ae	jmp	#LR__4064
27f74     03 16 16 F2 | 	cmp	arg03, #3 wc
27f78     18 00 90 CD |  if_b	jmp	#LR__4062
27f7c     6C 00 00 FF 
27f80     00 12 16 F2 | 	cmp	arg01, ##55296 wc
27f84     14 00 90 CD |  if_b	jmp	#LR__4063
27f88     70 00 00 FF 
27f8c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
27f90     08 00 90 3D |  if_ae	jmp	#LR__4063
27f94                 | LR__4062
27f94     00 FA 05 F6 | 	mov	result1, #0
27f98     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27f9c                 | LR__4063
27f9c     09 FB 59 F8 | 	getnib	result1, arg01, #3
27fa0     E0 16 06 F6 | 	mov	arg03, #224
27fa4     FD 16 42 F5 | 	or	arg03, result1
27fa8     0A 17 42 FC | 	wrbyte	arg03, arg02
27fac     01 14 06 F1 | 	add	arg02, #1
27fb0     09 FB 01 F6 | 	mov	result1, arg01
27fb4     06 FA 45 F0 | 	shr	result1, #6
27fb8     3F FA 05 F5 | 	and	result1, #63
27fbc     80 16 06 F6 | 	mov	arg03, #128
27fc0     FD 16 42 F5 | 	or	arg03, result1
27fc4     0A 17 42 FC | 	wrbyte	arg03, arg02
27fc8     01 14 06 F1 | 	add	arg02, #1
27fcc     3F 12 06 F5 | 	and	arg01, #63
27fd0     80 FA 05 F6 | 	mov	result1, #128
27fd4     09 FB 41 F5 | 	or	result1, arg01
27fd8     0A FB 41 FC | 	wrbyte	result1, arg02
27fdc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
27fdc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
27fdc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
27fdc                 | ' 		return 3;
27fdc     03 FA 05 F6 | 	mov	result1, #3
27fe0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27fe4                 | LR__4064
27fe4     04 16 16 F2 | 	cmp	arg03, #4 wc
27fe8     00 FA 05 C6 |  if_b	mov	result1, #0
27fec     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27ff0     09 01 02 F6 | 	mov	_var01, arg01
27ff4     E0 01 06 F4 | 	bitl	_var01, #480
27ff8     00 00 6C FF 
27ffc     00 00 86 F1 | 	sub	_var01, ##-671088640
28000     06 00 46 F0 | 	shr	_var01, #6
28004     09 13 32 F9 | 	getword	arg01, arg01, #0
28008     6E 00 00 FF 
2800c     00 12 86 F1 | 	sub	arg01, ##56320
28010     00 08 00 FF 
28014     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
28018     02 00 00 CF 
2801c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
28020     00 FA 05 36 |  if_ae	mov	result1, #0
28024     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
28028     09 01 42 F5 | 	or	_var01, arg01
2802c     80 00 00 FF 
28030     00 00 06 F1 | 	add	_var01, ##65536
28034     00 FB 01 F6 | 	mov	result1, _var01
28038     12 FA 45 F0 | 	shr	result1, #18
2803c     07 FA 05 F5 | 	and	result1, #7
28040     F0 16 06 F6 | 	mov	arg03, #240
28044     FD 16 42 F5 | 	or	arg03, result1
28048     0A 17 42 FC | 	wrbyte	arg03, arg02
2804c     01 14 06 F1 | 	add	arg02, #1
28050     00 FB 01 F6 | 	mov	result1, _var01
28054     0C FA 45 F0 | 	shr	result1, #12
28058     3F FA 05 F5 | 	and	result1, #63
2805c     80 16 06 F6 | 	mov	arg03, #128
28060     FD 16 42 F5 | 	or	arg03, result1
28064     0A 17 42 FC | 	wrbyte	arg03, arg02
28068     01 14 06 F1 | 	add	arg02, #1
2806c     00 FB 01 F6 | 	mov	result1, _var01
28070     06 FA 45 F0 | 	shr	result1, #6
28074     3F FA 05 F5 | 	and	result1, #63
28078     80 16 06 F6 | 	mov	arg03, #128
2807c     FD 16 42 F5 | 	or	arg03, result1
28080     0A 17 42 FC | 	wrbyte	arg03, arg02
28084     01 14 06 F1 | 	add	arg02, #1
28088     3F 00 06 F5 | 	and	_var01, #63
2808c     80 FA 05 F6 | 	mov	result1, #128
28090     00 FB 41 F5 | 	or	result1, _var01
28094     0A FB 41 FC | 	wrbyte	result1, arg02
28098                 | ' 	chr = (hc | chr) + 0x10000;
28098                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28098                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28098                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28098                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28098                 | ' 	return 4;
28098     04 FA 05 F6 | 	mov	result1, #4
2809c                 | _fatfs_cc_put_utf_ret
2809c     2D 00 64 FD | 	ret
280a0                 | 
280a0                 | _fatfs_cc_sync_window
280a0     02 4A 05 F6 | 	mov	COUNT_, #2
280a4     A8 00 A0 FD | 	call	#pushregs_
280a8     09 1F 02 F6 | 	mov	local01, arg01
280ac     00 20 06 F6 | 	mov	local02, #0
280b0     03 1E 06 F1 | 	add	local01, #3
280b4     0F FB C9 FA | 	rdbyte	result1, local01 wz
280b8     03 1E 86 F1 | 	sub	local01, #3
280bc     A4 00 90 AD |  if_e	jmp	#LR__4072
280c0     01 1E 06 F1 | 	add	local01, #1
280c4     0F 13 C2 FA | 	rdbyte	arg01, local01
280c8     33 1E 06 F1 | 	add	local01, #51
280cc     0F 15 02 F6 | 	mov	arg02, local01
280d0     04 1E 86 F1 | 	sub	local01, #4
280d4     0F 17 02 FB | 	rdlong	arg03, local01
280d8     30 1E 86 F1 | 	sub	local01, #48
280dc     01 18 06 F6 | 	mov	arg04, #1
280e0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
280e4     00 FA 0D F2 | 	cmp	result1, #0 wz
280e8     74 00 90 5D |  if_ne	jmp	#LR__4070
280ec     03 1E 06 F1 | 	add	local01, #3
280f0     0F 01 48 FC | 	wrbyte	#0, local01
280f4     2D 1E 06 F1 | 	add	local01, #45
280f8     0F FB 01 FB | 	rdlong	result1, local01
280fc     0C 1E 86 F1 | 	sub	local01, #12
28100     0F 19 02 FB | 	rdlong	arg04, local01
28104     0C FB 81 F1 | 	sub	result1, arg04
28108     08 1E 86 F1 | 	sub	local01, #8
2810c     0F 19 02 FB | 	rdlong	arg04, local01
28110     1C 1E 86 F1 | 	sub	local01, #28
28114     0C FB 11 F2 | 	cmp	result1, arg04 wc
28118     48 00 90 3D |  if_ae	jmp	#LR__4071
2811c     02 1E 06 F1 | 	add	local01, #2
28120     0F 19 C2 FA | 	rdbyte	arg04, local01
28124     02 1E 86 F1 | 	sub	local01, #2
28128     02 18 0E F2 | 	cmp	arg04, #2 wz
2812c     34 00 90 5D |  if_ne	jmp	#LR__4071
28130     01 1E 06 F1 | 	add	local01, #1
28134     0F 13 C2 FA | 	rdbyte	arg01, local01
28138     33 1E 06 F1 | 	add	local01, #51
2813c     0F 15 02 F6 | 	mov	arg02, local01
28140     04 1E 86 F1 | 	sub	local01, #4
28144     0F 17 02 FB | 	rdlong	arg03, local01
28148     14 1E 86 F1 | 	sub	local01, #20
2814c     0F 1F 02 FB | 	rdlong	local01, local01
28150     0F 17 02 F1 | 	add	arg03, local01
28154     01 18 06 F6 | 	mov	arg04, #1
28158     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2815c     04 00 90 FD | 	jmp	#LR__4071
28160                 | LR__4070
28160     01 20 06 F6 | 	mov	local02, #1
28164                 | LR__4071
28164                 | LR__4072
28164                 | ' 			res = FR_DISK_ERR;
28164                 | ' 		}
28164                 | ' 	}
28164                 | ' 	return res;
28164     10 FB 01 F6 | 	mov	result1, local02
28168     A7 F0 03 F6 | 	mov	ptra, fp
2816c     B2 00 A0 FD | 	call	#popregs_
28170                 | _fatfs_cc_sync_window_ret
28170     2D 00 64 FD | 	ret
28174                 | 
28174                 | _fatfs_cc_move_window
28174     03 4A 05 F6 | 	mov	COUNT_, #3
28178     A8 00 A0 FD | 	call	#pushregs_
2817c     09 1F 02 F6 | 	mov	local01, arg01
28180     0A 21 02 F6 | 	mov	local02, arg02
28184     00 22 06 F6 | 	mov	local03, #0
28188     30 1E 06 F1 | 	add	local01, #48
2818c     0F 19 02 FB | 	rdlong	arg04, local01
28190     30 1E 86 F1 | 	sub	local01, #48
28194     0C 21 0A F2 | 	cmp	local02, arg04 wz
28198     40 00 90 AD |  if_e	jmp	#LR__4081
2819c     0F 13 02 F6 | 	mov	arg01, local01
281a0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
281a4     FD 22 0A F6 | 	mov	local03, result1 wz
281a8     30 00 90 5D |  if_ne	jmp	#LR__4080
281ac     01 1E 06 F1 | 	add	local01, #1
281b0     0F 13 C2 FA | 	rdbyte	arg01, local01
281b4     33 1E 06 F1 | 	add	local01, #51
281b8     0F 15 02 F6 | 	mov	arg02, local01
281bc     10 17 02 F6 | 	mov	arg03, local02
281c0     01 18 06 F6 | 	mov	arg04, #1
281c4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
281c8     00 FA 0D F2 | 	cmp	result1, #0 wz
281cc     01 20 66 56 |  if_ne	neg	local02, #1
281d0     01 22 06 56 |  if_ne	mov	local03, #1
281d4     04 1E 86 F1 | 	sub	local01, #4
281d8     0F 21 62 FC | 	wrlong	local02, local01
281dc                 | LR__4080
281dc                 | LR__4081
281dc                 | ' 				sect = (LBA_t)0 - 1;
281dc                 | ' 				res = FR_DISK_ERR;
281dc                 | ' 			}
281dc                 | ' 			fs->winsect = sect;
281dc                 | ' 		}
281dc                 | ' 	}
281dc                 | ' 	return res;
281dc     11 FB 01 F6 | 	mov	result1, local03
281e0     A7 F0 03 F6 | 	mov	ptra, fp
281e4     B2 00 A0 FD | 	call	#popregs_
281e8                 | _fatfs_cc_move_window_ret
281e8     2D 00 64 FD | 	ret
281ec                 | 
281ec                 | _fatfs_cc_sync_fs
281ec     02 4A 05 F6 | 	mov	COUNT_, #2
281f0     A8 00 A0 FD | 	call	#pushregs_
281f4     09 1F 02 F6 | 	mov	local01, arg01
281f8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
281fc     FD 20 0A F6 | 	mov	local02, result1 wz
28200     D8 00 90 5D |  if_ne	jmp	#LR__4091
28204     0F 19 C2 FA | 	rdbyte	arg04, local01
28208     03 18 0E F2 | 	cmp	arg04, #3 wz
2820c     04 1E 06 A1 |  if_e	add	local01, #4
28210     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
28214     04 1E 86 A1 |  if_e	sub	local01, #4
28218     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2821c     A0 00 90 5D |  if_ne	jmp	#LR__4090
28220     34 1E 06 F1 | 	add	local01, #52
28224     0F 13 02 F6 | 	mov	arg01, local01
28228     00 14 06 F6 | 	mov	arg02, #0
2822c     09 16 C6 F9 | 	decod	arg03, #9
28230     98 00 A0 FD | 	call	#\builtin_bytefill_
28234     0F 13 02 F6 | 	mov	arg01, local01
28238     FE 13 06 F1 | 	add	arg01, #510
2823c     55 00 80 FF 
28240     09 AB 58 FC | 	wrword	##43605, arg01
28244     A9 B0 A0 FF 
28248     0F A5 68 FC | 	wrlong	##1096897106, local01
2824c     0F 13 02 F6 | 	mov	arg01, local01
28250     E4 13 06 F1 | 	add	arg01, #484
28254     B9 A0 B0 FF 
28258     09 E5 68 FC | 	wrlong	##1631679090, arg01
2825c     0F 13 02 F6 | 	mov	arg01, local01
28260     E8 13 06 F1 | 	add	arg01, #488
28264     20 1E 86 F1 | 	sub	local01, #32
28268     0F 15 02 FB | 	rdlong	arg02, local01
2826c     09 15 62 FC | 	wrlong	arg02, arg01
28270     20 1E 06 F1 | 	add	local01, #32
28274     0F 13 02 F6 | 	mov	arg01, local01
28278     EC 13 06 F1 | 	add	arg01, #492
2827c     24 1E 86 F1 | 	sub	local01, #36
28280     0F 15 02 FB | 	rdlong	arg02, local01
28284     09 15 62 FC | 	wrlong	arg02, arg01
28288     10 1E 06 F1 | 	add	local01, #16
2828c     0F 17 02 FB | 	rdlong	arg03, local01
28290     01 16 06 F1 | 	add	arg03, #1
28294     10 1E 06 F1 | 	add	local01, #16
28298     0F 17 62 FC | 	wrlong	arg03, local01
2829c     2F 1E 86 F1 | 	sub	local01, #47
282a0     0F 13 C2 FA | 	rdbyte	arg01, local01
282a4     33 1E 06 F1 | 	add	local01, #51
282a8     0F 15 02 F6 | 	mov	arg02, local01
282ac     01 18 06 F6 | 	mov	arg04, #1
282b0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
282b4     30 1E 86 F1 | 	sub	local01, #48
282b8     0F 01 48 FC | 	wrbyte	#0, local01
282bc     04 1E 86 F1 | 	sub	local01, #4
282c0                 | LR__4090
282c0     01 1E 06 F1 | 	add	local01, #1
282c4     0F 13 C2 FA | 	rdbyte	arg01, local01
282c8     00 14 06 F6 | 	mov	arg02, #0
282cc     00 16 06 F6 | 	mov	arg03, #0
282d0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
282d4     00 FA 0D F2 | 	cmp	result1, #0 wz
282d8     01 20 06 56 |  if_ne	mov	local02, #1
282dc                 | LR__4091
282dc                 | ' 	}
282dc                 | ' 
282dc                 | ' 	return res;
282dc     10 FB 01 F6 | 	mov	result1, local02
282e0     A7 F0 03 F6 | 	mov	ptra, fp
282e4     B2 00 A0 FD | 	call	#popregs_
282e8                 | _fatfs_cc_sync_fs_ret
282e8     2D 00 64 FD | 	ret
282ec                 | 
282ec                 | _fatfs_cc_clst2sect
282ec     02 14 86 F1 | 	sub	arg02, #2
282f0     18 12 06 F1 | 	add	arg01, #24
282f4     09 01 02 FB | 	rdlong	_var01, arg01
282f8     18 12 86 F1 | 	sub	arg01, #24
282fc     02 00 86 F1 | 	sub	_var01, #2
28300     00 15 12 F2 | 	cmp	arg02, _var01 wc
28304     00 FA 05 36 |  if_ae	mov	result1, #0
28308     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2830c     0A 12 06 F1 | 	add	arg01, #10
28310     09 01 E2 FA | 	rdword	_var01, arg01
28314     0A 01 02 FD | 	qmul	_var01, arg02
28318                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
28318     22 12 06 F1 | 	add	arg01, #34
2831c     09 FB 01 FB | 	rdlong	result1, arg01
28320     18 00 62 FD | 	getqx	_var01
28324     00 FB 01 F1 | 	add	result1, _var01
28328                 | _fatfs_cc_clst2sect_ret
28328     2D 00 64 FD | 	ret
2832c                 | 
2832c                 | _fatfs_cc_get_fat
2832c     07 4A 05 F6 | 	mov	COUNT_, #7
28330     A8 00 A0 FD | 	call	#pushregs_
28334     0A 1F 02 F6 | 	mov	local01, arg02
28338     09 21 02 FB | 	rdlong	local02, arg01
2833c     02 1E 16 F2 | 	cmp	local01, #2 wc
28340     14 00 90 CD |  if_b	jmp	#LR__4100
28344     18 20 06 F1 | 	add	local02, #24
28348     10 23 02 FB | 	rdlong	local03, local02
2834c     18 20 86 F1 | 	sub	local02, #24
28350     11 1F 12 F2 | 	cmp	local01, local03 wc
28354     08 00 90 CD |  if_b	jmp	#LR__4101
28358                 | LR__4100
28358     01 24 06 F6 | 	mov	local04, #1
2835c     60 01 90 FD | 	jmp	#LR__4108
28360                 | LR__4101
28360     01 24 66 F6 | 	neg	local04, #1
28364                 | ' 		val = 0xFFFFFFFF;
28364                 | ' 
28364                 | ' 		switch (fs->fs_type) {
28364     10 27 C2 FA | 	rdbyte	local05, local02
28368     01 26 86 F1 | 	sub	local05, #1
2836c     03 26 26 F3 | 	fle	local05, #3
28370     30 26 62 FD | 	jmprel	local05
28374                 | LR__4102
28374     0C 00 90 FD | 	jmp	#LR__4103
28378     B8 00 90 FD | 	jmp	#LR__4104
2837c     F8 00 90 FD | 	jmp	#LR__4105
28380     38 01 90 FD | 	jmp	#LR__4106
28384                 | LR__4103
28384     0F 27 02 F6 | 	mov	local05, local01
28388     0F 13 02 F6 | 	mov	arg01, local01
2838c     01 12 46 F0 | 	shr	arg01, #1
28390     09 27 02 F1 | 	add	local05, arg01
28394     10 13 02 F6 | 	mov	arg01, local02
28398     13 29 02 F6 | 	mov	local06, local05
2839c     09 28 46 F0 | 	shr	local06, #9
283a0     24 20 06 F1 | 	add	local02, #36
283a4     10 15 02 FB | 	rdlong	arg02, local02
283a8     24 20 86 F1 | 	sub	local02, #36
283ac     14 15 02 F1 | 	add	arg02, local06
283b0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
283b4     00 FA 0D F2 | 	cmp	result1, #0 wz
283b8     04 01 90 5D |  if_ne	jmp	#LR__4107
283bc     13 29 02 F6 | 	mov	local06, local05
283c0     FF 29 06 F5 | 	and	local06, #511
283c4     34 20 06 F1 | 	add	local02, #52
283c8     10 29 02 F1 | 	add	local06, local02
283cc     14 2B C2 FA | 	rdbyte	local07, local06
283d0     34 20 86 F1 | 	sub	local02, #52
283d4     10 13 02 F6 | 	mov	arg01, local02
283d8     01 26 06 F1 | 	add	local05, #1
283dc     13 29 02 F6 | 	mov	local06, local05
283e0     09 28 46 F0 | 	shr	local06, #9
283e4     24 20 06 F1 | 	add	local02, #36
283e8     10 15 02 FB | 	rdlong	arg02, local02
283ec     24 20 86 F1 | 	sub	local02, #36
283f0     14 15 02 F1 | 	add	arg02, local06
283f4     7C FD BF FD | 	call	#_fatfs_cc_move_window
283f8     00 FA 0D F2 | 	cmp	result1, #0 wz
283fc     C0 00 90 5D |  if_ne	jmp	#LR__4107
28400     FF 27 06 F5 | 	and	local05, #511
28404     34 20 06 F1 | 	add	local02, #52
28408     10 27 02 F1 | 	add	local05, local02
2840c     13 29 C2 FA | 	rdbyte	local06, local05
28410     08 28 66 F0 | 	shl	local06, #8
28414     14 2B 42 F5 | 	or	local07, local06
28418     01 1E CE F7 | 	test	local01, #1 wz
2841c     04 2A 46 50 |  if_ne	shr	local07, #4
28420     15 23 02 56 |  if_ne	mov	local03, local07
28424     0B 2A 46 A7 |  if_e	zerox	local07, #11
28428     15 23 02 A6 |  if_e	mov	local03, local07
2842c     11 25 02 F6 | 	mov	local04, local03
28430                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
28430                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
28430                 | ' 			break;
28430     8C 00 90 FD | 	jmp	#LR__4107
28434                 | LR__4104
28434     10 13 02 F6 | 	mov	arg01, local02
28438     0F 29 02 F6 | 	mov	local06, local01
2843c     08 28 46 F0 | 	shr	local06, #8
28440     24 20 06 F1 | 	add	local02, #36
28444     10 15 02 FB | 	rdlong	arg02, local02
28448     24 20 86 F1 | 	sub	local02, #36
2844c     14 15 02 F1 | 	add	arg02, local06
28450     20 FD BF FD | 	call	#_fatfs_cc_move_window
28454     00 FA 0D F2 | 	cmp	result1, #0 wz
28458     64 00 90 5D |  if_ne	jmp	#LR__4107
2845c     34 20 06 F1 | 	add	local02, #52
28460     01 1E 66 F0 | 	shl	local01, #1
28464     FF 1F 06 F5 | 	and	local01, #511
28468     0F 21 02 F1 | 	add	local02, local01
2846c                 | ' {
2846c                 | ' 
2846c                 | ' 	return *((WORD*)ptr);
2846c     10 FB E1 FA | 	rdword	result1, local02
28470     FD 24 32 F9 | 	getword	local04, result1, #0
28474                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
28474                 | ' 			break;
28474     48 00 90 FD | 	jmp	#LR__4107
28478                 | LR__4105
28478     10 13 02 F6 | 	mov	arg01, local02
2847c     0F 29 02 F6 | 	mov	local06, local01
28480     07 28 46 F0 | 	shr	local06, #7
28484     24 20 06 F1 | 	add	local02, #36
28488     10 15 02 FB | 	rdlong	arg02, local02
2848c     24 20 86 F1 | 	sub	local02, #36
28490     14 15 02 F1 | 	add	arg02, local06
28494     DC FC BF FD | 	call	#_fatfs_cc_move_window
28498     00 FA 0D F2 | 	cmp	result1, #0 wz
2849c     20 00 90 5D |  if_ne	jmp	#LR__4107
284a0     34 20 06 F1 | 	add	local02, #52
284a4     02 1E 66 F0 | 	shl	local01, #2
284a8     FF 1F 06 F5 | 	and	local01, #511
284ac     0F 21 02 F1 | 	add	local02, local01
284b0                 | ' {
284b0                 | ' 
284b0                 | ' 	return *((DWORD*)ptr);
284b0     10 25 02 FB | 	rdlong	local04, local02
284b4     7C 24 06 F4 | 	bitl	local04, #124
284b8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
284b8                 | ' 			break;
284b8     04 00 90 FD | 	jmp	#LR__4107
284bc                 | LR__4106
284bc     01 24 06 F6 | 	mov	local04, #1
284c0                 | LR__4107
284c0                 | LR__4108
284c0                 | ' 			val = 1;
284c0                 | ' 		}
284c0                 | ' 	}
284c0                 | ' 
284c0                 | ' 	return val;
284c0     12 FB 01 F6 | 	mov	result1, local04
284c4     A7 F0 03 F6 | 	mov	ptra, fp
284c8     B2 00 A0 FD | 	call	#popregs_
284cc                 | _fatfs_cc_get_fat_ret
284cc     2D 00 64 FD | 	ret
284d0                 | 
284d0                 | _fatfs_cc_put_fat
284d0     08 4A 05 F6 | 	mov	COUNT_, #8
284d4     A8 00 A0 FD | 	call	#pushregs_
284d8     09 1F 02 F6 | 	mov	local01, arg01
284dc     0A 21 02 F6 | 	mov	local02, arg02
284e0     0B 23 02 F6 | 	mov	local03, arg03
284e4     02 24 06 F6 | 	mov	local04, #2
284e8     02 20 16 F2 | 	cmp	local02, #2 wc
284ec     E0 01 90 CD |  if_b	jmp	#LR__4117
284f0     18 1E 06 F1 | 	add	local01, #24
284f4     0F 27 02 FB | 	rdlong	local05, local01
284f8     18 1E 86 F1 | 	sub	local01, #24
284fc     13 21 12 F2 | 	cmp	local02, local05 wc
28500     CC 01 90 3D |  if_ae	jmp	#LR__4117
28504                 | ' 		switch (fs->fs_type) {
28504     0F 29 C2 FA | 	rdbyte	local06, local01
28508     01 28 86 F1 | 	sub	local06, #1
2850c     03 28 26 F3 | 	fle	local06, #3
28510     30 28 62 FD | 	jmprel	local06
28514                 | LR__4110
28514     0C 00 90 FD | 	jmp	#LR__4111
28518     F8 00 90 FD | 	jmp	#LR__4114
2851c     40 01 90 FD | 	jmp	#LR__4115
28520     AC 01 90 FD | 	jmp	#LR__4116
28524                 | LR__4111
28524     10 2B 02 F6 | 	mov	local07, local02
28528     10 27 02 F6 | 	mov	local05, local02
2852c     01 26 46 F0 | 	shr	local05, #1
28530     13 2B 02 F1 | 	add	local07, local05
28534     0F 13 02 F6 | 	mov	arg01, local01
28538     15 29 02 F6 | 	mov	local06, local07
2853c     09 28 46 F0 | 	shr	local06, #9
28540     24 1E 06 F1 | 	add	local01, #36
28544     0F 15 02 FB | 	rdlong	arg02, local01
28548     24 1E 86 F1 | 	sub	local01, #36
2854c     14 15 02 F1 | 	add	arg02, local06
28550     20 FC BF FD | 	call	#_fatfs_cc_move_window
28554     FD 24 0A F6 | 	mov	local04, result1 wz
28558     74 01 90 5D |  if_ne	jmp	#LR__4116
2855c     34 1E 06 F1 | 	add	local01, #52
28560     0F 2D 02 F6 | 	mov	local08, local01
28564     15 27 02 F6 | 	mov	local05, local07
28568     FF 27 06 F5 | 	and	local05, #511
2856c     13 2D 02 F1 | 	add	local08, local05
28570     01 20 CE F7 | 	test	local02, #1 wz
28574     34 1E 86 F1 | 	sub	local01, #52
28578     01 2A 06 F1 | 	add	local07, #1
2857c     18 00 90 AD |  if_e	jmp	#LR__4112
28580     16 27 C2 FA | 	rdbyte	local05, local08
28584     13 27 42 F8 | 	getnib	local05, local05, #0
28588     11 29 E2 F8 | 	getbyte	local06, local03, #0
2858c     04 28 66 F0 | 	shl	local06, #4
28590     14 27 42 F5 | 	or	local05, local06
28594     04 00 90 FD | 	jmp	#LR__4113
28598                 | LR__4112
28598     11 27 02 F6 | 	mov	local05, local03
2859c                 | LR__4113
2859c     16 27 42 FC | 	wrbyte	local05, local08
285a0     03 1E 06 F1 | 	add	local01, #3
285a4     0F 03 48 FC | 	wrbyte	#1, local01
285a8     03 1E 86 F1 | 	sub	local01, #3
285ac     0F 13 02 F6 | 	mov	arg01, local01
285b0     15 2D 02 F6 | 	mov	local08, local07
285b4     09 2C 46 F0 | 	shr	local08, #9
285b8     24 1E 06 F1 | 	add	local01, #36
285bc     0F 15 02 FB | 	rdlong	arg02, local01
285c0     24 1E 86 F1 | 	sub	local01, #36
285c4     16 15 02 F1 | 	add	arg02, local08
285c8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
285cc     FD 24 0A F6 | 	mov	local04, result1 wz
285d0     FC 00 90 5D |  if_ne	jmp	#LR__4116
285d4     34 1E 06 F1 | 	add	local01, #52
285d8     0F 2D 02 F6 | 	mov	local08, local01
285dc     FF 2B 06 F5 | 	and	local07, #511
285e0     15 2D 02 F1 | 	add	local08, local07
285e4     01 20 CE F7 | 	test	local02, #1 wz
285e8     04 22 46 50 |  if_ne	shr	local03, #4
285ec     11 27 02 56 |  if_ne	mov	local05, local03
285f0     16 27 C2 AA |  if_e	rdbyte	local05, local08
285f4     F0 26 06 A5 |  if_e	and	local05, #240
285f8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
285fc     11 23 42 A8 |  if_e	getnib	local03, local03, #0
28600     11 27 42 A5 |  if_e	or	local05, local03
28604     16 27 42 FC | 	wrbyte	local05, local08
28608     31 1E 86 F1 | 	sub	local01, #49
2860c     0F 03 48 FC | 	wrbyte	#1, local01
28610                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
28610                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
28610                 | ' 			fs->wflag = 1;
28610                 | ' 			break;
28610     BC 00 90 FD | 	jmp	#LR__4116
28614                 | LR__4114
28614     0F 13 02 F6 | 	mov	arg01, local01
28618     10 2D 02 F6 | 	mov	local08, local02
2861c     08 2C 46 F0 | 	shr	local08, #8
28620     24 1E 06 F1 | 	add	local01, #36
28624     0F 15 02 FB | 	rdlong	arg02, local01
28628     24 1E 86 F1 | 	sub	local01, #36
2862c     16 15 02 F1 | 	add	arg02, local08
28630     40 FB BF FD | 	call	#_fatfs_cc_move_window
28634     FD 24 0A F6 | 	mov	local04, result1 wz
28638     94 00 90 5D |  if_ne	jmp	#LR__4116
2863c     34 1E 06 F1 | 	add	local01, #52
28640     0F 13 02 F6 | 	mov	arg01, local01
28644     01 20 66 F0 | 	shl	local02, #1
28648     FF 21 06 F5 | 	and	local02, #511
2864c     10 13 02 F1 | 	add	arg01, local02
28650     09 23 52 FC | 	wrword	local03, arg01
28654     31 1E 86 F1 | 	sub	local01, #49
28658     0F 03 48 FC | 	wrbyte	#1, local01
2865c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2865c                 | ' 			fs->wflag = 1;
2865c                 | ' 			break;
2865c     70 00 90 FD | 	jmp	#LR__4116
28660                 | LR__4115
28660     0F 13 02 F6 | 	mov	arg01, local01
28664     10 2D 02 F6 | 	mov	local08, local02
28668     07 2C 46 F0 | 	shr	local08, #7
2866c     24 1E 06 F1 | 	add	local01, #36
28670     0F 15 02 FB | 	rdlong	arg02, local01
28674     24 1E 86 F1 | 	sub	local01, #36
28678     16 15 02 F1 | 	add	arg02, local08
2867c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28680     FD 24 0A F6 | 	mov	local04, result1 wz
28684     48 00 90 5D |  if_ne	jmp	#LR__4116
28688     7C 22 06 F4 | 	bitl	local03, #124
2868c     34 1E 06 F1 | 	add	local01, #52
28690     10 2D 02 F6 | 	mov	local08, local02
28694     02 2C 66 F0 | 	shl	local08, #2
28698     FF 2D 06 F5 | 	and	local08, #511
2869c     0F 13 02 F6 | 	mov	arg01, local01
286a0     16 13 02 F1 | 	add	arg01, local08
286a4                 | ' {
286a4                 | ' 
286a4                 | ' 	return *((DWORD*)ptr);
286a4     09 2D 02 FB | 	rdlong	local08, arg01
286a8     00 00 78 FF 
286ac     00 2C 06 F5 | 	and	local08, ##-268435456
286b0     16 23 42 F5 | 	or	local03, local08
286b4     0F 13 02 F6 | 	mov	arg01, local01
286b8     02 20 66 F0 | 	shl	local02, #2
286bc     FF 21 06 F5 | 	and	local02, #511
286c0     10 13 02 F1 | 	add	arg01, local02
286c4     09 23 62 FC | 	wrlong	local03, arg01
286c8     31 1E 86 F1 | 	sub	local01, #49
286cc     0F 03 48 FC | 	wrbyte	#1, local01
286d0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
286d0                 | ' 			}
286d0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
286d0                 | ' 			fs->wflag = 1;
286d0                 | ' 			break;
286d0                 | LR__4116
286d0                 | LR__4117
286d0                 | ' 		}
286d0                 | ' 	}
286d0                 | ' 	return res;
286d0     12 FB 01 F6 | 	mov	result1, local04
286d4     A7 F0 03 F6 | 	mov	ptra, fp
286d8     B2 00 A0 FD | 	call	#popregs_
286dc                 | _fatfs_cc_put_fat_ret
286dc     2D 00 64 FD | 	ret
286e0                 | 
286e0                 | _fatfs_cc_remove_chain
286e0     05 4A 05 F6 | 	mov	COUNT_, #5
286e4     A8 00 A0 FD | 	call	#pushregs_
286e8     09 1F 02 F6 | 	mov	local01, arg01
286ec     0A 21 02 F6 | 	mov	local02, arg02
286f0     0B 23 02 F6 | 	mov	local03, arg03
286f4     0F 25 02 FB | 	rdlong	local04, local01
286f8     02 20 16 F2 | 	cmp	local02, #2 wc
286fc     14 00 90 CD |  if_b	jmp	#LR__4120
28700     18 24 06 F1 | 	add	local04, #24
28704     12 FB 01 FB | 	rdlong	result1, local04
28708     18 24 86 F1 | 	sub	local04, #24
2870c     FD 20 12 F2 | 	cmp	local02, result1 wc
28710     08 00 90 CD |  if_b	jmp	#LR__4121
28714                 | LR__4120
28714     02 FA 05 F6 | 	mov	result1, #2
28718     CC 00 90 FD | 	jmp	#LR__4126
2871c                 | LR__4121
2871c     00 22 0E F2 | 	cmp	local03, #0 wz
28720     18 00 90 AD |  if_e	jmp	#LR__4122
28724     11 15 02 F6 | 	mov	arg02, local03
28728     12 13 02 F6 | 	mov	arg01, local04
2872c     01 16 66 F6 | 	neg	arg03, #1
28730     9C FD BF FD | 	call	#_fatfs_cc_put_fat
28734     00 FA 0D F2 | 	cmp	result1, #0 wz
28738     AC 00 90 5D |  if_ne	jmp	#LR__4126
2873c                 | LR__4122
2873c                 | ' 	}
2873c                 | ' 
2873c                 | ' 
2873c                 | ' 	do {
2873c                 | LR__4123
2873c     10 15 02 F6 | 	mov	arg02, local02
28740     0F 13 02 F6 | 	mov	arg01, local01
28744     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28748     FD 26 0A F6 | 	mov	local05, result1 wz
2874c     94 00 90 AD |  if_e	jmp	#LR__4125
28750     01 26 0E F2 | 	cmp	local05, #1 wz
28754     02 FA 05 A6 |  if_e	mov	result1, #2
28758     8C 00 90 AD |  if_e	jmp	#LR__4126
2875c     FF FF 7F FF 
28760     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28764     01 FA 05 A6 |  if_e	mov	result1, #1
28768     7C 00 90 AD |  if_e	jmp	#LR__4126
2876c     10 15 02 F6 | 	mov	arg02, local02
28770     12 13 02 F6 | 	mov	arg01, local04
28774     00 16 06 F6 | 	mov	arg03, #0
28778     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2877c     FD 22 0A F6 | 	mov	local03, result1 wz
28780     11 FB 01 56 |  if_ne	mov	result1, local03
28784     60 00 90 5D |  if_ne	jmp	#LR__4126
28788     18 24 06 F1 | 	add	local04, #24
2878c     12 23 02 FB | 	rdlong	local03, local04
28790     02 22 86 F1 | 	sub	local03, #2
28794     04 24 86 F1 | 	sub	local04, #4
28798     12 21 02 FB | 	rdlong	local02, local04
2879c     14 24 86 F1 | 	sub	local04, #20
287a0     11 21 12 F2 | 	cmp	local02, local03 wc
287a4     24 00 90 3D |  if_ae	jmp	#LR__4124
287a8     14 24 06 F1 | 	add	local04, #20
287ac     12 23 02 FB | 	rdlong	local03, local04
287b0     01 22 06 F1 | 	add	local03, #1
287b4     12 23 62 FC | 	wrlong	local03, local04
287b8     10 24 86 F1 | 	sub	local04, #16
287bc     12 23 C2 FA | 	rdbyte	local03, local04
287c0     01 22 46 F5 | 	or	local03, #1
287c4     12 23 42 FC | 	wrbyte	local03, local04
287c8     04 24 86 F1 | 	sub	local04, #4
287cc                 | LR__4124
287cc     13 21 02 F6 | 	mov	local02, local05
287d0     18 24 06 F1 | 	add	local04, #24
287d4     12 27 02 FB | 	rdlong	local05, local04
287d8     18 24 86 F1 | 	sub	local04, #24
287dc     13 21 12 F2 | 	cmp	local02, local05 wc
287e0     58 FF 9F CD |  if_b	jmp	#LR__4123
287e4                 | LR__4125
287e4                 | ' #line 1500 "ff.c"
287e4                 | ' 	return FR_OK;
287e4     00 FA 05 F6 | 	mov	result1, #0
287e8                 | LR__4126
287e8     A7 F0 03 F6 | 	mov	ptra, fp
287ec     B2 00 A0 FD | 	call	#popregs_
287f0                 | _fatfs_cc_remove_chain_ret
287f0     2D 00 64 FD | 	ret
287f4                 | 
287f4                 | _fatfs_cc_create_chain
287f4     09 4A 05 F6 | 	mov	COUNT_, #9
287f8     A8 00 A0 FD | 	call	#pushregs_
287fc     09 1F 02 F6 | 	mov	local01, arg01
28800     0A 21 0A F6 | 	mov	local02, arg02 wz
28804     0F 23 02 FB | 	rdlong	local03, local01
28808     28 00 90 5D |  if_ne	jmp	#LR__4130
2880c     10 22 06 F1 | 	add	local03, #16
28810     11 25 0A FB | 	rdlong	local04, local03 wz
28814     10 22 86 F1 | 	sub	local03, #16
28818     18 22 06 51 |  if_ne	add	local03, #24
2881c     11 27 02 5B |  if_ne	rdlong	local05, local03
28820     18 22 86 51 |  if_ne	sub	local03, #24
28824     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28828     50 00 90 4D |  if_c_and_nz	jmp	#LR__4131
2882c     01 24 06 F6 | 	mov	local04, #1
28830     48 00 90 FD | 	jmp	#LR__4131
28834                 | LR__4130
28834     10 15 02 F6 | 	mov	arg02, local02
28838     0F 13 02 F6 | 	mov	arg01, local01
2883c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28840     FD 24 02 F6 | 	mov	local04, result1
28844     02 24 16 F2 | 	cmp	local04, #2 wc
28848     01 FA 05 C6 |  if_b	mov	result1, #1
2884c     BC 01 90 CD |  if_b	jmp	#LR__4141
28850     FF FF 7F FF 
28854     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28858     12 FB 01 A6 |  if_e	mov	result1, local04
2885c     AC 01 90 AD |  if_e	jmp	#LR__4141
28860     18 22 06 F1 | 	add	local03, #24
28864     11 27 02 FB | 	rdlong	local05, local03
28868     18 22 86 F1 | 	sub	local03, #24
2886c     13 25 12 F2 | 	cmp	local04, local05 wc
28870     12 FB 01 C6 |  if_b	mov	result1, local04
28874     94 01 90 CD |  if_b	jmp	#LR__4141
28878     10 25 02 F6 | 	mov	local04, local02
2887c                 | LR__4131
2887c     14 22 06 F1 | 	add	local03, #20
28880     11 27 0A FB | 	rdlong	local05, local03 wz
28884     14 22 86 F1 | 	sub	local03, #20
28888     00 FA 05 A6 |  if_e	mov	result1, #0
2888c     7C 01 90 AD |  if_e	jmp	#LR__4141
28890     00 28 06 F6 | 	mov	local06, #0
28894     10 25 0A F2 | 	cmp	local04, local02 wz
28898     74 00 90 5D |  if_ne	jmp	#LR__4134
2889c     12 29 02 F6 | 	mov	local06, local04
288a0     01 28 06 F1 | 	add	local06, #1
288a4     18 22 06 F1 | 	add	local03, #24
288a8     11 27 02 FB | 	rdlong	local05, local03
288ac     18 22 86 F1 | 	sub	local03, #24
288b0     13 29 12 F2 | 	cmp	local06, local05 wc
288b4     02 28 06 36 |  if_ae	mov	local06, #2
288b8     14 15 02 F6 | 	mov	arg02, local06
288bc     0F 13 02 F6 | 	mov	arg01, local01
288c0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
288c4     FD 26 02 F6 | 	mov	local05, result1
288c8     01 26 0E F2 | 	cmp	local05, #1 wz
288cc     FF FF 7F 5F 
288d0     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
288d4     13 FB 01 A6 |  if_e	mov	result1, local05
288d8     30 01 90 AD |  if_e	jmp	#LR__4141
288dc     00 26 0E F2 | 	cmp	local05, #0 wz
288e0     2C 00 90 AD |  if_e	jmp	#LR__4133
288e4     10 22 06 F1 | 	add	local03, #16
288e8     11 2B 02 FB | 	rdlong	local07, local03
288ec     10 22 86 F1 | 	sub	local03, #16
288f0     02 2A 16 F2 | 	cmp	local07, #2 wc
288f4     14 00 90 CD |  if_b	jmp	#LR__4132
288f8     18 22 06 F1 | 	add	local03, #24
288fc     11 27 02 FB | 	rdlong	local05, local03
28900     18 22 86 F1 | 	sub	local03, #24
28904     13 2B 12 F2 | 	cmp	local07, local05 wc
28908     15 25 02 C6 |  if_b	mov	local04, local07
2890c                 | LR__4132
2890c     00 28 06 F6 | 	mov	local06, #0
28910                 | LR__4133
28910                 | LR__4134
28910     00 28 0E F2 | 	cmp	local06, #0 wz
28914     60 00 90 5D |  if_ne	jmp	#LR__4137
28918     12 29 02 F6 | 	mov	local06, local04
2891c                 | ' 			ncl = scl;
2891c                 | ' 			for (;;) {
2891c                 | LR__4135
2891c     01 28 06 F1 | 	add	local06, #1
28920     18 22 06 F1 | 	add	local03, #24
28924     11 27 02 FB | 	rdlong	local05, local03
28928     18 22 86 F1 | 	sub	local03, #24
2892c     13 29 12 F2 | 	cmp	local06, local05 wc
28930     02 28 06 36 |  if_ae	mov	local06, #2
28934     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28938     00 FA 05 16 |  if_a	mov	result1, #0
2893c     CC 00 90 1D |  if_a	jmp	#LR__4141
28940     14 15 02 F6 | 	mov	arg02, local06
28944     0F 13 02 F6 | 	mov	arg01, local01
28948     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2894c     FD 2A 0A F6 | 	mov	local07, result1 wz
28950     24 00 90 AD |  if_e	jmp	#LR__4136
28954     01 2A 0E F2 | 	cmp	local07, #1 wz
28958     FF FF 7F 5F 
2895c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28960     15 FB 01 A6 |  if_e	mov	result1, local07
28964     A4 00 90 AD |  if_e	jmp	#LR__4141
28968     12 29 0A F2 | 	cmp	local06, local04 wz
2896c     00 FA 05 A6 |  if_e	mov	result1, #0
28970     98 00 90 AD |  if_e	jmp	#LR__4141
28974     A4 FF 9F FD | 	jmp	#LR__4135
28978                 | LR__4136
28978                 | LR__4137
28978     11 13 02 F6 | 	mov	arg01, local03
2897c     14 15 02 F6 | 	mov	arg02, local06
28980     01 16 66 F6 | 	neg	arg03, #1
28984     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28988     FD 2C 0A F6 | 	mov	local08, result1 wz
2898c     1C 00 90 5D |  if_ne	jmp	#LR__4138
28990     00 20 0E F2 | 	cmp	local02, #0 wz
28994     14 00 90 AD |  if_e	jmp	#LR__4138
28998     11 13 02 F6 | 	mov	arg01, local03
2899c     10 15 02 F6 | 	mov	arg02, local02
289a0     14 17 02 F6 | 	mov	arg03, local06
289a4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
289a8     FD 2C 02 F6 | 	mov	local08, result1
289ac                 | LR__4138
289ac     00 2C 0E F2 | 	cmp	local08, #0 wz
289b0     4C 00 90 5D |  if_ne	jmp	#LR__4139
289b4     10 22 06 F1 | 	add	local03, #16
289b8     11 29 62 FC | 	wrlong	local06, local03
289bc     08 22 06 F1 | 	add	local03, #8
289c0     11 27 02 FB | 	rdlong	local05, local03
289c4     02 26 86 F1 | 	sub	local05, #2
289c8     04 22 86 F1 | 	sub	local03, #4
289cc     11 2F 02 FB | 	rdlong	local09, local03
289d0     14 22 86 F1 | 	sub	local03, #20
289d4     13 2F 1A F2 | 	cmp	local09, local05 wcz
289d8     14 22 06 E1 |  if_be	add	local03, #20
289dc     11 2F 02 EB |  if_be	rdlong	local09, local03
289e0     01 2E 86 E1 |  if_be	sub	local09, #1
289e4     11 2F 62 EC |  if_be	wrlong	local09, local03
289e8     14 22 86 E1 |  if_be	sub	local03, #20
289ec     04 22 06 F1 | 	add	local03, #4
289f0     11 27 C2 FA | 	rdbyte	local05, local03
289f4     01 26 46 F5 | 	or	local05, #1
289f8     11 27 42 FC | 	wrbyte	local05, local03
289fc     08 00 90 FD | 	jmp	#LR__4140
28a00                 | LR__4139
28a00     01 2C 0E F2 | 	cmp	local08, #1 wz
28a04     01 28 C6 F6 | 	negz	local06, #1
28a08                 | LR__4140
28a08                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28a08                 | ' 	}
28a08                 | ' 
28a08                 | ' 	return ncl;
28a08     14 FB 01 F6 | 	mov	result1, local06
28a0c                 | LR__4141
28a0c     A7 F0 03 F6 | 	mov	ptra, fp
28a10     B2 00 A0 FD | 	call	#popregs_
28a14                 | _fatfs_cc_create_chain_ret
28a14     2D 00 64 FD | 	ret
28a18                 | 
28a18                 | _fatfs_cc_dir_clear
28a18     06 4A 05 F6 | 	mov	COUNT_, #6
28a1c     A8 00 A0 FD | 	call	#pushregs_
28a20     09 1F 02 F6 | 	mov	local01, arg01
28a24     0A 21 02 F6 | 	mov	local02, arg02
28a28     0F 13 02 F6 | 	mov	arg01, local01
28a2c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28a30     00 FA 0D F2 | 	cmp	result1, #0 wz
28a34     01 FA 05 56 |  if_ne	mov	result1, #1
28a38     90 00 90 5D |  if_ne	jmp	#LR__4152
28a3c     0F 13 02 F6 | 	mov	arg01, local01
28a40     10 15 02 F6 | 	mov	arg02, local02
28a44     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28a48     FD 22 02 F6 | 	mov	local03, result1
28a4c     30 1E 06 F1 | 	add	local01, #48
28a50     0F 23 62 FC | 	wrlong	local03, local01
28a54     04 1E 06 F1 | 	add	local01, #4
28a58     0F 13 02 F6 | 	mov	arg01, local01
28a5c     00 14 06 F6 | 	mov	arg02, #0
28a60     09 16 C6 F9 | 	decod	arg03, #9
28a64     98 00 A0 FD | 	call	#\builtin_bytefill_
28a68     0F 25 02 F6 | 	mov	local04, local01
28a6c                 | ' #line 1667 "ff.c"
28a6c                 | ' 	{
28a6c                 | ' 		ibuf = fs->win; szb = 1;
28a6c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28a6c     00 26 06 F6 | 	mov	local05, #0
28a70     34 1E 86 F1 | 	sub	local01, #52
28a74                 | LR__4150
28a74     0A 1E 06 F1 | 	add	local01, #10
28a78     0F 29 E2 FA | 	rdword	local06, local01
28a7c     0A 1E 86 F1 | 	sub	local01, #10
28a80     14 27 12 F2 | 	cmp	local05, local06 wc
28a84     2C 00 90 3D |  if_ae	jmp	#LR__4151
28a88     01 1E 06 F1 | 	add	local01, #1
28a8c     0F 13 C2 FA | 	rdbyte	arg01, local01
28a90     01 1E 86 F1 | 	sub	local01, #1
28a94     12 15 02 F6 | 	mov	arg02, local04
28a98     11 17 02 F6 | 	mov	arg03, local03
28a9c     13 17 02 F1 | 	add	arg03, local05
28aa0     01 18 06 F6 | 	mov	arg04, #1
28aa4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
28aac     01 26 06 A1 |  if_e	add	local05, #1
28ab0     C0 FF 9F AD |  if_e	jmp	#LR__4150
28ab4                 | LR__4151
28ab4                 | ' 	}
28ab4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28ab4     0A 1E 06 F1 | 	add	local01, #10
28ab8     0F 25 E2 FA | 	rdword	local04, local01
28abc     12 27 0A F2 | 	cmp	local05, local04 wz
28ac0     00 28 06 A6 |  if_e	mov	local06, #0
28ac4     01 28 06 56 |  if_ne	mov	local06, #1
28ac8     14 FB 01 F6 | 	mov	result1, local06
28acc                 | LR__4152
28acc     A7 F0 03 F6 | 	mov	ptra, fp
28ad0     B2 00 A0 FD | 	call	#popregs_
28ad4                 | _fatfs_cc_dir_clear_ret
28ad4     2D 00 64 FD | 	ret
28ad8                 | 
28ad8                 | _fatfs_cc_dir_sdi
28ad8     06 4A 05 F6 | 	mov	COUNT_, #6
28adc     A8 00 A0 FD | 	call	#pushregs_
28ae0     09 1F 02 F6 | 	mov	local01, arg01
28ae4     0A 21 02 F6 | 	mov	local02, arg02
28ae8     0F 23 02 FB | 	rdlong	local03, local01
28aec     00 10 00 FF 
28af0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28af4     1F 20 CE C7 |  if_b	test	local02, #31 wz
28af8                 | ' 		return FR_INT_ERR;
28af8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28afc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4166
28b00     10 1E 06 F1 | 	add	local01, #16
28b04     0F 21 62 FC | 	wrlong	local02, local01
28b08     08 1E 86 F1 | 	sub	local01, #8
28b0c     0F 25 0A FB | 	rdlong	local04, local01 wz
28b10     08 1E 86 F1 | 	sub	local01, #8
28b14     11 27 C2 AA |  if_e	rdbyte	local05, local03
28b18     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28b1c     28 22 06 21 |  if_nc_and_z	add	local03, #40
28b20     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28b24     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28b28     00 24 0E F2 | 	cmp	local04, #0 wz
28b2c     3C 00 90 5D |  if_ne	jmp	#LR__4160
28b30     10 27 02 F6 | 	mov	local05, local02
28b34     05 26 46 F0 | 	shr	local05, #5
28b38     08 22 06 F1 | 	add	local03, #8
28b3c     11 15 E2 FA | 	rdword	arg02, local03
28b40     08 22 86 F1 | 	sub	local03, #8
28b44     0A 27 12 F2 | 	cmp	local05, arg02 wc
28b48     02 FA 05 36 |  if_ae	mov	result1, #2
28b4c     E4 00 90 3D |  if_ae	jmp	#LR__4166
28b50     28 22 06 F1 | 	add	local03, #40
28b54     11 27 02 FB | 	rdlong	local05, local03
28b58     28 22 86 F1 | 	sub	local03, #40
28b5c     18 1E 06 F1 | 	add	local01, #24
28b60     0F 27 62 FC | 	wrlong	local05, local01
28b64     18 1E 86 F1 | 	sub	local01, #24
28b68     7C 00 90 FD | 	jmp	#LR__4165
28b6c                 | LR__4160
28b6c     0A 22 06 F1 | 	add	local03, #10
28b70     11 29 E2 FA | 	rdword	local06, local03
28b74     0A 22 86 F1 | 	sub	local03, #10
28b78     09 28 66 F0 | 	shl	local06, #9
28b7c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28b7c                 | ' 		while (ofs >= csz) {
28b7c                 | LR__4161
28b7c     14 21 12 F2 | 	cmp	local02, local06 wc
28b80     4C 00 90 CD |  if_b	jmp	#LR__4164
28b84     0F 13 02 F6 | 	mov	arg01, local01
28b88     12 15 02 F6 | 	mov	arg02, local04
28b8c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28b90     FD 24 02 F6 | 	mov	local04, result1
28b94     FF FF 7F FF 
28b98     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28b9c     01 FA 05 A6 |  if_e	mov	result1, #1
28ba0     90 00 90 AD |  if_e	jmp	#LR__4166
28ba4     02 24 16 F2 | 	cmp	local04, #2 wc
28ba8     14 00 90 CD |  if_b	jmp	#LR__4162
28bac     18 22 06 F1 | 	add	local03, #24
28bb0     11 27 02 FB | 	rdlong	local05, local03
28bb4     18 22 86 F1 | 	sub	local03, #24
28bb8     13 25 12 F2 | 	cmp	local04, local05 wc
28bbc     08 00 90 CD |  if_b	jmp	#LR__4163
28bc0                 | LR__4162
28bc0     02 FA 05 F6 | 	mov	result1, #2
28bc4     6C 00 90 FD | 	jmp	#LR__4166
28bc8                 | LR__4163
28bc8     14 21 82 F1 | 	sub	local02, local06
28bcc     AC FF 9F FD | 	jmp	#LR__4161
28bd0                 | LR__4164
28bd0     11 13 02 F6 | 	mov	arg01, local03
28bd4     12 15 02 F6 | 	mov	arg02, local04
28bd8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28bdc     18 1E 06 F1 | 	add	local01, #24
28be0     0F FB 61 FC | 	wrlong	result1, local01
28be4     18 1E 86 F1 | 	sub	local01, #24
28be8                 | LR__4165
28be8     14 1E 06 F1 | 	add	local01, #20
28bec     0F 25 62 FC | 	wrlong	local04, local01
28bf0     04 1E 06 F1 | 	add	local01, #4
28bf4     0F 27 0A FB | 	rdlong	local05, local01 wz
28bf8     18 1E 86 F1 | 	sub	local01, #24
28bfc     02 FA 05 A6 |  if_e	mov	result1, #2
28c00     30 00 90 AD |  if_e	jmp	#LR__4166
28c04     10 29 02 F6 | 	mov	local06, local02
28c08     09 28 46 F0 | 	shr	local06, #9
28c0c     18 1E 06 F1 | 	add	local01, #24
28c10     0F 27 02 FB | 	rdlong	local05, local01
28c14     14 27 02 F1 | 	add	local05, local06
28c18     0F 27 62 FC | 	wrlong	local05, local01
28c1c     34 22 06 F1 | 	add	local03, #52
28c20     FF 21 06 F5 | 	and	local02, #511
28c24     10 23 02 F1 | 	add	local03, local02
28c28     04 1E 06 F1 | 	add	local01, #4
28c2c     0F 23 62 FC | 	wrlong	local03, local01
28c30                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28c30                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28c30                 | ' 
28c30                 | ' 	return FR_OK;
28c30     00 FA 05 F6 | 	mov	result1, #0
28c34                 | LR__4166
28c34     A7 F0 03 F6 | 	mov	ptra, fp
28c38     B2 00 A0 FD | 	call	#popregs_
28c3c                 | _fatfs_cc_dir_sdi_ret
28c3c     2D 00 64 FD | 	ret
28c40                 | 
28c40                 | _fatfs_cc_dir_next
28c40     05 4A 05 F6 | 	mov	COUNT_, #5
28c44     A8 00 A0 FD | 	call	#pushregs_
28c48     09 1F 02 F6 | 	mov	local01, arg01
28c4c     0A 21 02 F6 | 	mov	local02, arg02
28c50     0F 23 02 FB | 	rdlong	local03, local01
28c54     10 1E 06 F1 | 	add	local01, #16
28c58     0F 25 02 FB | 	rdlong	local04, local01
28c5c     10 1E 86 F1 | 	sub	local01, #16
28c60     20 24 06 F1 | 	add	local04, #32
28c64     00 10 00 FF 
28c68     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28c6c     18 1E 06 31 |  if_ae	add	local01, #24
28c70     0F 01 68 3C |  if_ae	wrlong	#0, local01
28c74     18 1E 86 31 |  if_ae	sub	local01, #24
28c78     18 1E 06 F1 | 	add	local01, #24
28c7c     0F 15 0A FB | 	rdlong	arg02, local01 wz
28c80     18 1E 86 F1 | 	sub	local01, #24
28c84     04 FA 05 A6 |  if_e	mov	result1, #4
28c88     64 01 90 AD |  if_e	jmp	#LR__4175
28c8c     FF 25 CE F7 | 	test	local04, #511 wz
28c90     3C 01 90 5D |  if_ne	jmp	#LR__4174
28c94     18 1E 06 F1 | 	add	local01, #24
28c98     0F 15 02 FB | 	rdlong	arg02, local01
28c9c     01 14 06 F1 | 	add	arg02, #1
28ca0     0F 15 62 FC | 	wrlong	arg02, local01
28ca4     04 1E 86 F1 | 	sub	local01, #4
28ca8     0F 15 0A FB | 	rdlong	arg02, local01 wz
28cac     14 1E 86 F1 | 	sub	local01, #20
28cb0     2C 00 90 5D |  if_ne	jmp	#LR__4170
28cb4     12 15 02 F6 | 	mov	arg02, local04
28cb8     05 14 46 F0 | 	shr	arg02, #5
28cbc     08 22 06 F1 | 	add	local03, #8
28cc0     11 21 E2 FA | 	rdword	local02, local03
28cc4     08 22 86 F1 | 	sub	local03, #8
28cc8     10 15 12 F2 | 	cmp	arg02, local02 wc
28ccc     18 1E 06 31 |  if_ae	add	local01, #24
28cd0     0F 01 68 3C |  if_ae	wrlong	#0, local01
28cd4                 | ' 				dp->sect = 0; return FR_NO_FILE;
28cd4     04 FA 05 36 |  if_ae	mov	result1, #4
28cd8     14 01 90 3D |  if_ae	jmp	#LR__4175
28cdc     F0 00 90 FD | 	jmp	#LR__4173
28ce0                 | LR__4170
28ce0     12 13 02 F6 | 	mov	arg01, local04
28ce4     09 12 46 F0 | 	shr	arg01, #9
28ce8     0A 22 06 F1 | 	add	local03, #10
28cec     11 15 E2 FA | 	rdword	arg02, local03
28cf0     0A 22 86 F1 | 	sub	local03, #10
28cf4     01 14 86 F1 | 	sub	arg02, #1
28cf8     0A 13 CA F7 | 	test	arg01, arg02 wz
28cfc     D0 00 90 5D |  if_ne	jmp	#LR__4172
28d00     0F 13 02 F6 | 	mov	arg01, local01
28d04     14 1E 06 F1 | 	add	local01, #20
28d08     0F 15 02 FB | 	rdlong	arg02, local01
28d0c     14 1E 86 F1 | 	sub	local01, #20
28d10     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28d14     FD 26 02 F6 | 	mov	local05, result1
28d18     02 26 16 F2 | 	cmp	local05, #2 wc
28d1c     02 FA 05 C6 |  if_b	mov	result1, #2
28d20     CC 00 90 CD |  if_b	jmp	#LR__4175
28d24     FF FF 7F FF 
28d28     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28d2c     01 FA 05 A6 |  if_e	mov	result1, #1
28d30     BC 00 90 AD |  if_e	jmp	#LR__4175
28d34     18 22 06 F1 | 	add	local03, #24
28d38     11 15 02 FB | 	rdlong	arg02, local03
28d3c     18 22 86 F1 | 	sub	local03, #24
28d40     0A 27 12 F2 | 	cmp	local05, arg02 wc
28d44     68 00 90 CD |  if_b	jmp	#LR__4171
28d48     00 20 0E F2 | 	cmp	local02, #0 wz
28d4c     18 1E 06 A1 |  if_e	add	local01, #24
28d50     0F 01 68 AC |  if_e	wrlong	#0, local01
28d54                 | ' 						dp->sect = 0; return FR_NO_FILE;
28d54     04 FA 05 A6 |  if_e	mov	result1, #4
28d58     94 00 90 AD |  if_e	jmp	#LR__4175
28d5c     0F 13 02 F6 | 	mov	arg01, local01
28d60     14 1E 06 F1 | 	add	local01, #20
28d64     0F 15 02 FB | 	rdlong	arg02, local01
28d68     14 1E 86 F1 | 	sub	local01, #20
28d6c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28d70     FD 26 0A F6 | 	mov	local05, result1 wz
28d74     07 FA 05 A6 |  if_e	mov	result1, #7
28d78     74 00 90 AD |  if_e	jmp	#LR__4175
28d7c     01 26 0E F2 | 	cmp	local05, #1 wz
28d80     02 FA 05 A6 |  if_e	mov	result1, #2
28d84     68 00 90 AD |  if_e	jmp	#LR__4175
28d88     FF FF 7F FF 
28d8c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28d90     01 FA 05 A6 |  if_e	mov	result1, #1
28d94     58 00 90 AD |  if_e	jmp	#LR__4175
28d98     13 15 02 F6 | 	mov	arg02, local05
28d9c     11 13 02 F6 | 	mov	arg01, local03
28da0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28da4     00 FA 0D F2 | 	cmp	result1, #0 wz
28da8     01 FA 05 56 |  if_ne	mov	result1, #1
28dac     40 00 90 5D |  if_ne	jmp	#LR__4175
28db0                 | LR__4171
28db0     14 1E 06 F1 | 	add	local01, #20
28db4     0F 27 62 FC | 	wrlong	local05, local01
28db8     11 13 02 F6 | 	mov	arg01, local03
28dbc     13 15 02 F6 | 	mov	arg02, local05
28dc0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28dc4     04 1E 06 F1 | 	add	local01, #4
28dc8     0F FB 61 FC | 	wrlong	result1, local01
28dcc     18 1E 86 F1 | 	sub	local01, #24
28dd0                 | LR__4172
28dd0                 | LR__4173
28dd0                 | LR__4174
28dd0     10 1E 06 F1 | 	add	local01, #16
28dd4     0F 25 62 FC | 	wrlong	local04, local01
28dd8     34 22 06 F1 | 	add	local03, #52
28ddc     FF 25 06 F5 | 	and	local04, #511
28de0     12 23 02 F1 | 	add	local03, local04
28de4     0C 1E 06 F1 | 	add	local01, #12
28de8     0F 23 62 FC | 	wrlong	local03, local01
28dec                 | ' #line 1771 "ff.c"
28dec                 | ' 				}
28dec                 | ' 				dp->clust = clst;
28dec                 | ' 				dp->sect = clst2sect(fs, clst);
28dec                 | ' 			}
28dec                 | ' 		}
28dec                 | ' 	}
28dec                 | ' 	dp->dptr = ofs;
28dec                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28dec                 | ' 
28dec                 | ' 	return FR_OK;
28dec     00 FA 05 F6 | 	mov	result1, #0
28df0                 | LR__4175
28df0     A7 F0 03 F6 | 	mov	ptra, fp
28df4     B2 00 A0 FD | 	call	#popregs_
28df8                 | _fatfs_cc_dir_next_ret
28df8     2D 00 64 FD | 	ret
28dfc                 | 
28dfc                 | _fatfs_cc_dir_alloc
28dfc     08 4A 05 F6 | 	mov	COUNT_, #8
28e00     A8 00 A0 FD | 	call	#pushregs_
28e04     09 1F 02 F6 | 	mov	local01, arg01
28e08     0A 21 02 F6 | 	mov	local02, arg02
28e0c     0F 23 02 FB | 	rdlong	local03, local01
28e10     0F 13 02 F6 | 	mov	arg01, local01
28e14     00 14 06 F6 | 	mov	arg02, #0
28e18     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28e1c     FD 24 0A F6 | 	mov	local04, result1 wz
28e20     70 00 90 5D |  if_ne	jmp	#LR__4184
28e24     00 26 06 F6 | 	mov	local05, #0
28e28                 | ' 		n = 0;
28e28                 | ' 		do {
28e28                 | LR__4180
28e28     18 1E 06 F1 | 	add	local01, #24
28e2c     0F 15 02 FB | 	rdlong	arg02, local01
28e30     18 1E 86 F1 | 	sub	local01, #24
28e34     11 13 02 F6 | 	mov	arg01, local03
28e38     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28e3c     FD 24 0A F6 | 	mov	local04, result1 wz
28e40     50 00 90 5D |  if_ne	jmp	#LR__4183
28e44     1C 1E 06 F1 | 	add	local01, #28
28e48     0F 29 02 FB | 	rdlong	local06, local01
28e4c     1C 1E 86 F1 | 	sub	local01, #28
28e50     14 29 C2 FA | 	rdbyte	local06, local06
28e54     E5 28 0E F2 | 	cmp	local06, #229 wz
28e58     1C 1E 06 51 |  if_ne	add	local01, #28
28e5c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
28e60     1C 1E 86 51 |  if_ne	sub	local01, #28
28e64     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
28e68     10 00 90 5D |  if_ne	jmp	#LR__4181
28e6c     01 26 06 F1 | 	add	local05, #1
28e70     10 27 0A F2 | 	cmp	local05, local02 wz
28e74     1C 00 90 AD |  if_e	jmp	#LR__4183
28e78     04 00 90 FD | 	jmp	#LR__4182
28e7c                 | LR__4181
28e7c     00 26 06 F6 | 	mov	local05, #0
28e80                 | LR__4182
28e80     0F 13 02 F6 | 	mov	arg01, local01
28e84     01 14 06 F6 | 	mov	arg02, #1
28e88     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
28e8c     FD 24 0A F6 | 	mov	local04, result1 wz
28e90     94 FF 9F AD |  if_e	jmp	#LR__4180
28e94                 | LR__4183
28e94                 | LR__4184
28e94     04 24 0E F2 | 	cmp	local04, #4 wz
28e98     07 24 06 A6 |  if_e	mov	local04, #7
28e9c                 | ' 	return res;
28e9c     12 FB 01 F6 | 	mov	result1, local04
28ea0     A7 F0 03 F6 | 	mov	ptra, fp
28ea4     B2 00 A0 FD | 	call	#popregs_
28ea8                 | _fatfs_cc_dir_alloc_ret
28ea8     2D 00 64 FD | 	ret
28eac                 | 
28eac                 | _fatfs_cc_ld_clust
28eac     09 01 02 F6 | 	mov	_var01, arg01
28eb0     0A 13 02 F6 | 	mov	arg01, arg02
28eb4     1A 12 06 F1 | 	add	arg01, #26
28eb8                 | ' {
28eb8                 | ' 
28eb8                 | ' 	return *((WORD*)ptr);
28eb8     09 FB E1 FA | 	rdword	result1, arg01
28ebc     FD 12 32 F9 | 	getword	arg01, result1, #0
28ec0     00 01 C2 FA | 	rdbyte	_var01, _var01
28ec4     03 00 0E F2 | 	cmp	_var01, #3 wz
28ec8     14 14 06 A1 |  if_e	add	arg02, #20
28ecc                 | ' {
28ecc                 | ' 
28ecc                 | ' 	return *((WORD*)ptr);
28ecc     0A FB E1 AA |  if_e	rdword	result1, arg02
28ed0     10 FA 65 A0 |  if_e	shl	result1, #16
28ed4     FD 12 42 A5 |  if_e	or	arg01, result1
28ed8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
28ed8                 | ' 	}
28ed8                 | ' 
28ed8                 | ' 	return cl;
28ed8     09 FB 01 F6 | 	mov	result1, arg01
28edc                 | _fatfs_cc_ld_clust_ret
28edc     2D 00 64 FD | 	ret
28ee0                 | 
28ee0                 | _fatfs_cc_st_clust
28ee0     09 01 02 F6 | 	mov	_var01, arg01
28ee4     0A 13 02 F6 | 	mov	arg01, arg02
28ee8     1A 12 06 F1 | 	add	arg01, #26
28eec     09 17 52 FC | 	wrword	arg03, arg01
28ef0     00 01 C2 FA | 	rdbyte	_var01, _var01
28ef4     03 00 0E F2 | 	cmp	_var01, #3 wz
28ef8     14 14 06 A1 |  if_e	add	arg02, #20
28efc     10 16 46 A0 |  if_e	shr	arg03, #16
28f00     0A 17 52 AC |  if_e	wrword	arg03, arg02
28f04                 | _fatfs_cc_st_clust_ret
28f04     2D 00 64 FD | 	ret
28f08                 | 
28f08                 | _fatfs_cc_cmp_lfn
28f08     07 4A 05 F6 | 	mov	COUNT_, #7
28f0c     A8 00 A0 FD | 	call	#pushregs_
28f10     09 1F 02 F6 | 	mov	local01, arg01
28f14     0A 13 02 F6 | 	mov	arg01, arg02
28f18     1A 12 06 F1 | 	add	arg01, #26
28f1c                 | ' {
28f1c                 | ' 
28f1c                 | ' 	return *((WORD*)ptr);
28f1c     09 FB E9 FA | 	rdword	result1, arg01 wz
28f20     00 FA 05 56 |  if_ne	mov	result1, #0
28f24     E0 00 90 5D |  if_ne	jmp	#LR__4196
28f28     0A 21 C2 FA | 	rdbyte	local02, arg02
28f2c     3F 20 06 F5 | 	and	local02, #63
28f30     01 20 86 F1 | 	sub	local02, #1
28f34     0D 20 06 FD | 	qmul	local02, #13
28f38                 | ' 
28f38                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
28f38                 | ' 
28f38                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
28f38     01 22 06 F6 | 	mov	local03, #1
28f3c     00 24 06 F6 | 	mov	local04, #0
28f40     18 26 62 FD | 	getqx	local05
28f44                 | LR__4190
28f44     0D 24 16 F2 | 	cmp	local04, #13 wc
28f48     9C 00 90 3D |  if_ae	jmp	#LR__4195
28f4c     0A 13 02 F6 | 	mov	arg01, arg02
28f50     12 21 02 F6 | 	mov	local02, local04
28f54     01 00 00 FF 
28f58     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
28f5c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
28f60     10 21 C2 FA | 	rdbyte	local02, local02
28f64     01 20 06 FA | 	mul	local02, #1
28f68     10 13 02 F1 | 	add	arg01, local02
28f6c     01 00 00 FF 
28f70     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
28f74                 | ' {
28f74                 | ' 
28f74                 | ' 	return *((WORD*)ptr);
28f74     09 FB E1 FA | 	rdword	result1, arg01
28f78     FD 28 02 F6 | 	mov	local06, result1
28f7c     11 21 02 F6 | 	mov	local02, local03
28f80     0F 20 4E F7 | 	zerox	local02, #15 wz
28f84     44 00 90 AD |  if_e	jmp	#LR__4193
28f88     00 27 16 F2 | 	cmp	local05, #256 wc
28f8c     2C 00 90 3D |  if_ae	jmp	#LR__4191
28f90     14 13 32 F9 | 	getword	arg01, local06, #0
28f94     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28f98     FD 20 02 F6 | 	mov	local02, result1
28f9c     13 23 02 F6 | 	mov	local03, local05
28fa0     01 22 66 F0 | 	shl	local03, #1
28fa4     0F 23 02 F1 | 	add	local03, local01
28fa8     11 13 E2 FA | 	rdword	arg01, local03
28fac     01 26 06 F1 | 	add	local05, #1
28fb0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
28fb4     FD 20 0A F2 | 	cmp	local02, result1 wz
28fb8     08 00 90 AD |  if_e	jmp	#LR__4192
28fbc                 | LR__4191
28fbc                 | ' 				return 0;
28fbc     00 FA 05 F6 | 	mov	result1, #0
28fc0     44 00 90 FD | 	jmp	#LR__4196
28fc4                 | LR__4192
28fc4     14 23 02 F6 | 	mov	local03, local06
28fc8     14 00 90 FD | 	jmp	#LR__4194
28fcc                 | LR__4193
28fcc     14 29 32 F9 | 	getword	local06, local06, #0
28fd0     7F 00 00 FF 
28fd4     FF 29 0E F2 | 	cmp	local06, ##65535 wz
28fd8     00 FA 05 56 |  if_ne	mov	result1, #0
28fdc     28 00 90 5D |  if_ne	jmp	#LR__4196
28fe0                 | LR__4194
28fe0     01 24 06 F1 | 	add	local04, #1
28fe4     5C FF 9F FD | 	jmp	#LR__4190
28fe8                 | LR__4195
28fe8     0A 21 C2 FA | 	rdbyte	local02, arg02
28fec     40 20 CE F7 | 	test	local02, #64 wz
28ff0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
28ff4     01 26 66 50 |  if_ne	shl	local05, #1
28ff8     0F 27 02 51 |  if_ne	add	local05, local01
28ffc     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
29000     00 FA 05 56 |  if_ne	mov	result1, #0
29004                 | ' 
29004                 | ' 	return 1;
29004     01 FA 05 A6 |  if_e	mov	result1, #1
29008                 | LR__4196
29008     A7 F0 03 F6 | 	mov	ptra, fp
2900c     B2 00 A0 FD | 	call	#popregs_
29010                 | _fatfs_cc_cmp_lfn_ret
29010     2D 00 64 FD | 	ret
29014                 | 
29014                 | _fatfs_cc_pick_lfn
29014     09 01 02 F6 | 	mov	_var01, arg01
29018     0A 13 02 F6 | 	mov	arg01, arg02
2901c     1A 12 06 F1 | 	add	arg01, #26
29020                 | ' {
29020                 | ' 
29020                 | ' 	return *((WORD*)ptr);
29020     09 FB E9 FA | 	rdword	result1, arg01 wz
29024     00 FA 05 56 |  if_ne	mov	result1, #0
29028     D4 00 90 5D |  if_ne	jmp	#LR__4205
2902c     0A 03 C2 FA | 	rdbyte	_var02, arg02
29030     40 02 26 F5 | 	andn	_var02, #64
29034     01 02 86 F1 | 	sub	_var02, #1
29038     0D 02 06 FD | 	qmul	_var02, #13
2903c                 | ' 
2903c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2903c                 | ' 
2903c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2903c     01 04 06 F6 | 	mov	_var03, #1
29040     00 06 06 F6 | 	mov	_var04, #0
29044     18 08 62 FD | 	getqx	_var05
29048                 | LR__4200
29048     0D 06 16 F2 | 	cmp	_var04, #13 wc
2904c     80 00 90 3D |  if_ae	jmp	#LR__4203
29050     0A 13 02 F6 | 	mov	arg01, arg02
29054     03 03 02 F6 | 	mov	_var02, _var04
29058     01 00 00 FF 
2905c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29060     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29064     01 03 C2 FA | 	rdbyte	_var02, _var02
29068     01 02 06 FA | 	mul	_var02, #1
2906c     01 13 02 F1 | 	add	arg01, _var02
29070     01 00 00 FF 
29074     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29078                 | ' {
29078                 | ' 
29078                 | ' 	return *((WORD*)ptr);
29078     09 FB E1 FA | 	rdword	result1, arg01
2907c     FD 0A 02 F6 | 	mov	_var06, result1
29080     02 03 02 F6 | 	mov	_var02, _var03
29084     0F 02 4E F7 | 	zerox	_var02, #15 wz
29088     28 00 90 AD |  if_e	jmp	#LR__4201
2908c     00 09 16 F2 | 	cmp	_var05, #256 wc
29090     00 FA 05 36 |  if_ae	mov	result1, #0
29094     68 00 90 3D |  if_ae	jmp	#LR__4205
29098     04 03 02 F6 | 	mov	_var02, _var05
2909c     01 02 66 F0 | 	shl	_var02, #1
290a0     00 03 02 F1 | 	add	_var02, _var01
290a4     05 05 02 F6 | 	mov	_var03, _var06
290a8     01 05 52 FC | 	wrword	_var03, _var02
290ac     01 08 06 F1 | 	add	_var05, #1
290b0     14 00 90 FD | 	jmp	#LR__4202
290b4                 | LR__4201
290b4     05 0B 32 F9 | 	getword	_var06, _var06, #0
290b8     7F 00 00 FF 
290bc     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
290c0     00 FA 05 56 |  if_ne	mov	result1, #0
290c4     38 00 90 5D |  if_ne	jmp	#LR__4205
290c8                 | LR__4202
290c8     01 06 06 F1 | 	add	_var04, #1
290cc     78 FF 9F FD | 	jmp	#LR__4200
290d0                 | LR__4203
290d0     0A 03 C2 FA | 	rdbyte	_var02, arg02
290d4     40 02 CE F7 | 	test	_var02, #64 wz
290d8     02 0D 02 56 |  if_ne	mov	_var07, _var03
290dc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
290e0     18 00 90 AD |  if_e	jmp	#LR__4204
290e4     00 09 16 F2 | 	cmp	_var05, #256 wc
290e8     00 FA 05 36 |  if_ae	mov	result1, #0
290ec     10 00 90 3D |  if_ae	jmp	#LR__4205
290f0     01 08 66 F0 | 	shl	_var05, #1
290f4     00 09 02 F1 | 	add	_var05, _var01
290f8     04 01 58 FC | 	wrword	#0, _var05
290fc                 | LR__4204
290fc                 | ' 		lfnbuf[i] = 0;
290fc                 | ' 	}
290fc                 | ' 
290fc                 | ' 	return 1;
290fc     01 FA 05 F6 | 	mov	result1, #1
29100                 | LR__4205
29100                 | _fatfs_cc_pick_lfn_ret
29100     2D 00 64 FD | 	ret
29104                 | 
29104                 | _fatfs_cc_put_lfn
29104     0D 14 06 F1 | 	add	arg02, #13
29108     0A 19 42 FC | 	wrbyte	arg04, arg02
2910c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
29110     01 18 86 F1 | 	sub	arg04, #1
29114     0D 18 06 FD | 	qmul	arg04, #13
29118     09 01 02 F6 | 	mov	_var01, arg01
2911c     02 14 86 F1 | 	sub	arg02, #2
29120     0A 1F 48 FC | 	wrbyte	#15, arg02
29124     01 14 06 F1 | 	add	arg02, #1
29128     0A 01 48 FC | 	wrbyte	#0, arg02
2912c     0C 14 86 F1 | 	sub	arg02, #12
29130     0A 13 02 F6 | 	mov	arg01, arg02
29134     1A 12 06 F1 | 	add	arg01, #26
29138     09 01 58 FC | 	wrword	#0, arg01
2913c     00 02 06 F6 | 	mov	_var02, #0
29140     00 04 06 F6 | 	mov	_var03, #0
29144                 | ' 	BYTE* dir,
29144                 | ' 	BYTE ord,
29144                 | ' 	BYTE sum
29144                 | ' )
29144                 | ' {
29144                 | ' 	UINT i, s;
29144                 | ' 	WCHAR wc;
29144                 | ' 
29144                 | ' 
29144                 | ' 	dir[ 13 ] = sum;
29144                 | ' 	dir[ 11 ] =  0x0F ;
29144                 | ' 	dir[ 12 ] = 0;
29144                 | ' 	st_word(dir +  26 , 0);
29144                 | ' 
29144                 | ' 	i = (ord - 1) * 13;
29144                 | ' 	s = wc = 0;
29144                 | ' 	do {
29144     01 00 00 FF 
29148     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2914c     18 06 62 FD | 	getqx	_var04
29150     97 2A 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
29154                 | LR__4210
29154     01 19 32 F9 | 	getword	arg04, _var02, #0
29158     7F 00 00 FF 
2915c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29160     03 13 02 56 |  if_ne	mov	arg01, _var04
29164     01 06 06 51 |  if_ne	add	_var04, #1
29168     01 12 66 50 |  if_ne	shl	arg01, #1
2916c     00 13 02 51 |  if_ne	add	arg01, _var01
29170     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29174     0A 13 02 F6 | 	mov	arg01, arg02
29178     02 19 02 F6 | 	mov	arg04, _var03
2917c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29180     0C 19 C2 FA | 	rdbyte	arg04, arg04
29184     01 18 06 FA | 	mul	arg04, #1
29188     0C 13 02 F1 | 	add	arg01, arg04
2918c     09 03 52 FC | 	wrword	_var02, arg01
29190     01 19 02 F6 | 	mov	arg04, _var02
29194     0F 18 4E F7 | 	zerox	arg04, #15 wz
29198     0F 02 CE A9 |  if_e	bmask	_var02, #15
2919c     01 04 06 F1 | 	add	_var03, #1
291a0     0D 04 16 F2 | 	cmp	_var03, #13 wc
291a4     AC FF 9F CD |  if_b	jmp	#LR__4210
291a8                 | LR__4211
291a8     01 00 00 FF 
291ac     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
291b0     01 03 32 F9 | 	getword	_var02, _var02, #0
291b4     7F 00 00 FF 
291b8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
291bc     01 06 66 50 |  if_ne	shl	_var04, #1
291c0     00 07 02 51 |  if_ne	add	_var04, _var01
291c4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
291c8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
291cc     40 16 46 A5 |  if_e	or	arg03, #64
291d0     0A 17 42 FC | 	wrbyte	arg03, arg02
291d4                 | _fatfs_cc_put_lfn_ret
291d4     2D 00 64 FD | 	ret
291d8                 | 
291d8                 | _fatfs_cc_gen_numname
291d8     08 4A 05 F6 | 	mov	COUNT_, #8
291dc     A8 00 A0 FD | 	call	#pushregs_
291e0     2C F0 07 F1 | 	add	ptra, #44
291e4     09 1F 02 F6 | 	mov	local01, arg01
291e8     0A 21 02 F6 | 	mov	local02, arg02
291ec     0B 23 02 F6 | 	mov	local03, arg03
291f0     0C 25 02 F6 | 	mov	local04, arg04
291f4     0F 13 02 F6 | 	mov	arg01, local01
291f8     10 15 02 F6 | 	mov	arg02, local02
291fc     0B 16 06 F6 | 	mov	arg03, #11
29200     60 75 BF FD | 	call	#__system____builtin_memmove
29204     06 24 16 F2 | 	cmp	local04, #6 wc
29208     48 00 90 CD |  if_b	jmp	#LR__4225
2920c     12 27 02 F6 | 	mov	local05, local04
29210     97 1E 48 FB | 	callpa	#(@LR__4223-@LR__4220)>>2,fcache_load_ptr_
29214                 | ' 		sreg = seq;
29214                 | ' 		while (*lfn) {
29214                 | LR__4220
29214     11 29 EA FA | 	rdword	local06, local03 wz
29218     34 00 90 AD |  if_e	jmp	#LR__4224
2921c     11 2B E2 FA | 	rdword	local07, local03
29220                 | ' 			wc = *lfn++;
29220                 | ' 			for (i = 0; i < 16; i++) {
29220     02 22 06 F1 | 	add	local03, #2
29224     10 12 DC FC | 	rep	@LR__4222, #16
29228                 | LR__4221
29228     01 26 66 F0 | 	shl	local05, #1
2922c     15 29 32 F9 | 	getword	local06, local07, #0
29230     01 28 06 F5 | 	and	local06, #1
29234     14 27 02 F1 | 	add	local05, local06
29238     15 2B 32 F9 | 	getword	local07, local07, #0
2923c     01 2A 46 F0 | 	shr	local07, #1
29240     10 26 2E F4 | 	testbn	local05, #16 wz
29244     88 00 00 5F 
29248     21 26 66 55 |  if_ne	xor	local05, ##69665
2924c                 | LR__4222
2924c     C4 FF 9F FD | 	jmp	#LR__4220
29250                 | LR__4223
29250                 | LR__4224
29250     13 25 02 F6 | 	mov	local04, local05
29254                 | LR__4225
29254     07 2A 06 F6 | 	mov	local07, #7
29258                 | ' 			}
29258                 | ' 		}
29258                 | ' 		seq = (UINT)sreg;
29258                 | ' 	}
29258                 | ' 
29258                 | ' 
29258                 | ' 	i = 7;
29258                 | ' 	do {
29258     10 4E 05 F1 | 	add	fp, #16
2925c     97 1A 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
29260                 | LR__4226
29260     12 27 42 F8 | 	getnib	local05, local04, #0
29264     30 26 06 F1 | 	add	local05, #48
29268     04 24 46 F0 | 	shr	local04, #4
2926c     13 29 E2 F8 | 	getbyte	local06, local05, #0
29270     3A 28 16 F2 | 	cmp	local06, #58 wc
29274     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29278     07 26 06 31 |  if_ae	add	local05, #7
2927c     15 29 02 F6 | 	mov	local06, local07
29280     01 2A 8E F1 | 	sub	local07, #1 wz
29284     A7 28 02 F1 | 	add	local06, fp
29288     14 27 42 FC | 	wrbyte	local05, local06
2928c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29290     CC FF 9F 5D |  if_ne	jmp	#LR__4226
29294                 | LR__4227
29294     15 29 02 F6 | 	mov	local06, local07
29298     A7 28 02 F1 | 	add	local06, fp
2929c     14 FD 48 FC | 	wrbyte	#126, local06
292a0                 | ' 	ns[i] = '~';
292a0                 | ' 
292a0                 | ' 
292a0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
292a0     00 26 06 F6 | 	mov	local05, #0
292a4     10 4E 85 F1 | 	sub	fp, #16
292a8     97 2A 48 FB | 	callpa	#(@LR__4230-@LR__4228)>>2,fcache_load_ptr_
292ac                 | LR__4228
292ac     15 27 12 F2 | 	cmp	local05, local07 wc
292b0     4C 00 90 3D |  if_ae	jmp	#LR__4231
292b4     13 29 02 F6 | 	mov	local06, local05
292b8     0F 29 02 F1 | 	add	local06, local01
292bc     14 29 C2 FA | 	rdbyte	local06, local06
292c0     20 28 0E F2 | 	cmp	local06, #32 wz
292c4     38 00 90 AD |  if_e	jmp	#LR__4231
292c8     13 13 02 F6 | 	mov	arg01, local05
292cc     0F 13 02 F1 | 	add	arg01, local01
292d0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
292d4     00 FA 05 56 |  if_ne	mov	result1, #0
292d8                 | ' 
292d8                 | ' 	return 0;
292d8     00 FA 05 A6 |  if_e	mov	result1, #0
292dc     00 FA 0D F2 | 	cmp	result1, #0 wz
292e0     14 00 90 AD |  if_e	jmp	#LR__4229
292e4     15 29 02 F6 | 	mov	local06, local07
292e8     01 28 86 F1 | 	sub	local06, #1
292ec     14 27 0A F2 | 	cmp	local05, local06 wz
292f0     0C 00 90 AD |  if_e	jmp	#LR__4231
292f4     01 26 06 F1 | 	add	local05, #1
292f8                 | LR__4229
292f8     01 26 06 F1 | 	add	local05, #1
292fc     AC FF 9F FD | 	jmp	#LR__4228
29300                 | LR__4230
29300                 | LR__4231
29300     97 20 48 FB | 	callpa	#(@LR__4235-@LR__4232)>>2,fcache_load_ptr_
29304                 | ' 			j++;
29304                 | ' 		}
29304                 | ' 	}
29304                 | ' 	do {
29304                 | LR__4232
29304     13 29 02 F6 | 	mov	local06, local05
29308     0F 29 02 F1 | 	add	local06, local01
2930c     08 2A 16 F2 | 	cmp	local07, #8 wc
29310     01 26 06 F1 | 	add	local05, #1
29314     1C 00 90 3D |  if_ae	jmp	#LR__4233
29318     15 25 02 F6 | 	mov	local04, local07
2931c     10 4E 05 F1 | 	add	fp, #16
29320     A7 24 02 F1 | 	add	local04, fp
29324     12 2D C2 FA | 	rdbyte	local08, local04
29328     01 2A 06 F1 | 	add	local07, #1
2932c     10 4E 85 F1 | 	sub	fp, #16
29330     04 00 90 FD | 	jmp	#LR__4234
29334                 | LR__4233
29334     20 2C 06 F6 | 	mov	local08, #32
29338                 | LR__4234
29338     14 2D 42 FC | 	wrbyte	local08, local06
2933c     08 26 16 F2 | 	cmp	local05, #8 wc
29340     C0 FF 9F CD |  if_b	jmp	#LR__4232
29344                 | LR__4235
29344     A7 F0 03 F6 | 	mov	ptra, fp
29348     B2 00 A0 FD | 	call	#popregs_
2934c                 | _fatfs_cc_gen_numname_ret
2934c     2D 00 64 FD | 	ret
29350                 | 
29350                 | _fatfs_cc_sum_sfn
29350     00 00 06 F6 | 	mov	_var01, #0
29354                 | ' )
29354                 | ' {
29354                 | ' 	BYTE sum = 0;
29354                 | ' 	UINT n = 11;
29354                 | ' 
29354                 | ' 	do {
29354     97 12 48 FB | 	callpa	#(@LR__4242-@LR__4240)>>2,fcache_load_ptr_
29358                 | LR__4240
29358     0B 10 DC FC | 	rep	@LR__4243, #11
2935c                 | LR__4241
2935c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29360     01 FA 45 F0 | 	shr	result1, #1
29364     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29368     07 00 66 F0 | 	shl	_var01, #7
2936c     00 FB 01 F1 | 	add	result1, _var01
29370     09 01 C2 FA | 	rdbyte	_var01, arg01
29374     FD 00 02 F1 | 	add	_var01, result1
29378     01 12 06 F1 | 	add	arg01, #1
2937c                 | LR__4242
2937c                 | LR__4243
2937c                 | ' 	return sum;
2937c     00 FB 01 F6 | 	mov	result1, _var01
29380                 | _fatfs_cc_sum_sfn_ret
29380     2D 00 64 FD | 	ret
29384                 | 
29384                 | _fatfs_cc_dir_read
29384     0C 4A 05 F6 | 	mov	COUNT_, #12
29388     A8 00 A0 FD | 	call	#pushregs_
2938c     09 1F 02 F6 | 	mov	local01, arg01
29390     0A 21 02 F6 | 	mov	local02, arg02
29394     04 22 06 F6 | 	mov	local03, #4
29398     0F 25 02 FB | 	rdlong	local04, local01
2939c     FF 26 06 F6 | 	mov	local05, #255
293a0     FF 28 06 F6 | 	mov	local06, #255
293a4                 | ' )
293a4                 | ' {
293a4                 | ' 	FRESULT res = FR_NO_FILE;
293a4                 | ' 	FATFS *fs = dp->obj.fs;
293a4                 | ' 	BYTE attr, b;
293a4                 | ' 
293a4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
293a4                 | ' 
293a4                 | ' 
293a4                 | ' 	while (dp->sect) {
293a4                 | LR__4250
293a4     18 1E 06 F1 | 	add	local01, #24
293a8     0F FB 09 FB | 	rdlong	result1, local01 wz
293ac     18 1E 86 F1 | 	sub	local01, #24
293b0     AC 01 90 AD |  if_e	jmp	#LR__4260
293b4     18 1E 06 F1 | 	add	local01, #24
293b8     0F 15 02 FB | 	rdlong	arg02, local01
293bc     18 1E 86 F1 | 	sub	local01, #24
293c0     12 13 02 F6 | 	mov	arg01, local04
293c4     AC ED BF FD | 	call	#_fatfs_cc_move_window
293c8     FD 22 0A F6 | 	mov	local03, result1 wz
293cc     90 01 90 5D |  if_ne	jmp	#LR__4260
293d0     1C 1E 06 F1 | 	add	local01, #28
293d4     0F FB 01 FB | 	rdlong	result1, local01
293d8     1C 1E 86 F1 | 	sub	local01, #28
293dc     FD 2A C2 FA | 	rdbyte	local07, result1
293e0     15 FB 01 F6 | 	mov	result1, local07
293e4     07 FA 4D F7 | 	zerox	result1, #7 wz
293e8     04 22 06 A6 |  if_e	mov	local03, #4
293ec                 | ' 			res = FR_NO_FILE; break;
293ec     70 01 90 AD |  if_e	jmp	#LR__4260
293f0     1C 1E 06 F1 | 	add	local01, #28
293f4     0F 2D 02 FB | 	rdlong	local08, local01
293f8     0B 2C 06 F1 | 	add	local08, #11
293fc     16 2F C2 FA | 	rdbyte	local09, local08
29400     3F 2E 06 F5 | 	and	local09, #63
29404     16 1E 86 F1 | 	sub	local01, #22
29408     0F 2F 42 FC | 	wrbyte	local09, local01
2940c     06 1E 86 F1 | 	sub	local01, #6
29410     15 FB E1 F8 | 	getbyte	result1, local07, #0
29414     E5 FA 0D F2 | 	cmp	result1, #229 wz
29418     15 2D 02 56 |  if_ne	mov	local08, local07
2941c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
29420     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
29424     1C 00 90 AD |  if_e	jmp	#LR__4251
29428     00 30 06 F6 | 	mov	local10, #0
2942c     17 2D E2 F8 | 	getbyte	local08, local09, #0
29430     20 2C 26 F5 | 	andn	local08, #32
29434     08 2C 0E F2 | 	cmp	local08, #8 wz
29438     01 30 06 A6 |  if_e	mov	local10, #1
2943c     10 31 0A F2 | 	cmp	local10, local02 wz
29440     08 00 90 AD |  if_e	jmp	#LR__4252
29444                 | LR__4251
29444     FF 26 06 F6 | 	mov	local05, #255
29448     00 01 90 FD | 	jmp	#LR__4259
2944c                 | LR__4252
2944c     17 2F E2 F8 | 	getbyte	local09, local09, #0
29450     0F 2E 0E F2 | 	cmp	local09, #15 wz
29454     B4 00 90 5D |  if_ne	jmp	#LR__4256
29458     15 33 E2 F8 | 	getbyte	local11, local07, #0
2945c     40 32 CE F7 | 	test	local11, #64 wz
29460     30 00 90 AD |  if_e	jmp	#LR__4253
29464     1C 1E 06 F1 | 	add	local01, #28
29468     0F 33 02 FB | 	rdlong	local11, local01
2946c     0D 32 06 F1 | 	add	local11, #13
29470     19 29 C2 FA | 	rdbyte	local06, local11
29474     15 2B E2 F8 | 	getbyte	local07, local07, #0
29478     BF 2A 06 F5 | 	and	local07, #191
2947c     15 27 02 F6 | 	mov	local05, local07
29480     0C 1E 86 F1 | 	sub	local01, #12
29484     0F 33 02 FB | 	rdlong	local11, local01
29488     1C 1E 06 F1 | 	add	local01, #28
2948c     0F 33 62 FC | 	wrlong	local11, local01
29490     2C 1E 86 F1 | 	sub	local01, #44
29494                 | LR__4253
29494     15 2D E2 F8 | 	getbyte	local08, local07, #0
29498     13 31 E2 F8 | 	getbyte	local10, local05, #0
2949c     18 2D 0A F2 | 	cmp	local08, local10 wz
294a0     5C 00 90 5D |  if_ne	jmp	#LR__4254
294a4     14 31 E2 F8 | 	getbyte	local10, local06, #0
294a8     1C 1E 06 F1 | 	add	local01, #28
294ac     0F 2F 02 FB | 	rdlong	local09, local01
294b0     1C 1E 86 F1 | 	sub	local01, #28
294b4     0D 2E 06 F1 | 	add	local09, #13
294b8     17 2D C2 FA | 	rdbyte	local08, local09
294bc     16 2F E2 F8 | 	getbyte	local09, local08, #0
294c0     17 31 0A F2 | 	cmp	local10, local09 wz
294c4     38 00 90 5D |  if_ne	jmp	#LR__4254
294c8     0C 24 06 F1 | 	add	local04, #12
294cc     12 13 02 FB | 	rdlong	arg01, local04
294d0     0C 24 86 F1 | 	sub	local04, #12
294d4     1C 1E 06 F1 | 	add	local01, #28
294d8     0F 35 02 FB | 	rdlong	local12, local01
294dc     1C 1E 86 F1 | 	sub	local01, #28
294e0     1A 15 02 F6 | 	mov	arg02, local12
294e4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
294e8     00 FA 4D F2 | 	cmps	result1, #0 wz
294ec     13 35 02 56 |  if_ne	mov	local12, local05
294f0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
294f4     01 34 86 51 |  if_ne	sub	local12, #1
294f8     1A 33 02 56 |  if_ne	mov	local11, local12
294fc     04 00 90 5D |  if_ne	jmp	#LR__4255
29500                 | LR__4254
29500     FF 32 06 F6 | 	mov	local11, #255
29504                 | LR__4255
29504     19 27 02 F6 | 	mov	local05, local11
29508     40 00 90 FD | 	jmp	#LR__4258
2950c                 | LR__4256
2950c     13 33 02 F6 | 	mov	local11, local05
29510     07 32 4E F7 | 	zerox	local11, #7 wz
29514     20 00 90 5D |  if_ne	jmp	#LR__4257
29518     14 29 E2 F8 | 	getbyte	local06, local06, #0
2951c     1C 1E 06 F1 | 	add	local01, #28
29520     0F 13 02 FB | 	rdlong	arg01, local01
29524     1C 1E 86 F1 | 	sub	local01, #28
29528     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2952c     FD FA E1 F8 | 	getbyte	result1, result1, #0
29530     FD 28 0A F2 | 	cmp	local06, result1 wz
29534     28 00 90 AD |  if_e	jmp	#LR__4260
29538                 | LR__4257
29538     2C 1E 06 F1 | 	add	local01, #44
2953c     FF FF FF FF 
29540     0F FF 6B FC | 	wrlong	##-1, local01
29544     2C 1E 86 F1 | 	sub	local01, #44
29548                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29548                 | ' 					}
29548                 | ' 					break;
29548     14 00 90 FD | 	jmp	#LR__4260
2954c                 | LR__4258
2954c                 | LR__4259
2954c     0F 13 02 F6 | 	mov	arg01, local01
29550     00 14 06 F6 | 	mov	arg02, #0
29554     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29558     FD 22 0A F6 | 	mov	local03, result1 wz
2955c     44 FE 9F AD |  if_e	jmp	#LR__4250
29560                 | LR__4260
29560     00 22 0E F2 | 	cmp	local03, #0 wz
29564     18 1E 06 51 |  if_ne	add	local01, #24
29568     0F 01 68 5C |  if_ne	wrlong	#0, local01
2956c                 | ' 	return res;
2956c     11 FB 01 F6 | 	mov	result1, local03
29570     A7 F0 03 F6 | 	mov	ptra, fp
29574     B2 00 A0 FD | 	call	#popregs_
29578                 | _fatfs_cc_dir_read_ret
29578     2D 00 64 FD | 	ret
2957c                 | 
2957c                 | _fatfs_cc_dir_find
2957c     0B 4A 05 F6 | 	mov	COUNT_, #11
29580     A8 00 A0 FD | 	call	#pushregs_
29584     09 1F 02 F6 | 	mov	local01, arg01
29588     0F 21 02 FB | 	rdlong	local02, local01
2958c     0F 13 02 F6 | 	mov	arg01, local01
29590     00 14 06 F6 | 	mov	arg02, #0
29594     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29598     00 FA 0D F2 | 	cmp	result1, #0 wz
2959c     18 02 90 5D |  if_ne	jmp	#LR__4282
295a0     FF 22 06 F6 | 	mov	local03, #255
295a4     FF 24 06 F6 | 	mov	local04, #255
295a8     2C 1E 06 F1 | 	add	local01, #44
295ac     FF FF FF FF 
295b0     0F FF 6B FC | 	wrlong	##-1, local01
295b4     2C 1E 86 F1 | 	sub	local01, #44
295b8                 | ' #line 2404 "ff.c"
295b8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
295b8                 | ' 
295b8                 | ' 	do {
295b8                 | LR__4270
295b8     18 1E 06 F1 | 	add	local01, #24
295bc     0F 15 02 FB | 	rdlong	arg02, local01
295c0     18 1E 86 F1 | 	sub	local01, #24
295c4     10 13 02 F6 | 	mov	arg01, local02
295c8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
295cc     FD 26 0A F6 | 	mov	local05, result1 wz
295d0     E0 01 90 5D |  if_ne	jmp	#LR__4281
295d4     1C 1E 06 F1 | 	add	local01, #28
295d8     0F 17 02 FB | 	rdlong	arg03, local01
295dc     1C 1E 86 F1 | 	sub	local01, #28
295e0     0B 29 C2 FA | 	rdbyte	local06, arg03
295e4     14 17 02 F6 | 	mov	arg03, local06
295e8     07 16 4E F7 | 	zerox	arg03, #7 wz
295ec     04 26 06 A6 |  if_e	mov	local05, #4
295f0     C0 01 90 AD |  if_e	jmp	#LR__4281
295f4     1C 1E 06 F1 | 	add	local01, #28
295f8     0F 2B 02 FB | 	rdlong	local07, local01
295fc     15 17 02 F6 | 	mov	arg03, local07
29600     0B 16 06 F1 | 	add	arg03, #11
29604     0B 2D C2 FA | 	rdbyte	local08, arg03
29608     3F 2C 06 F5 | 	and	local08, #63
2960c     16 1E 86 F1 | 	sub	local01, #22
29610     0F 2D 42 FC | 	wrbyte	local08, local01
29614     06 1E 86 F1 | 	sub	local01, #6
29618     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2961c     E5 16 0E F2 | 	cmp	arg03, #229 wz
29620     18 00 90 AD |  if_e	jmp	#LR__4271
29624     16 17 E2 F8 | 	getbyte	arg03, local08, #0
29628     08 16 CE F7 | 	test	arg03, #8 wz
2962c     16 2B 02 56 |  if_ne	mov	local07, local08
29630     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
29634     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
29638     18 00 90 AD |  if_e	jmp	#LR__4272
2963c                 | LR__4271
2963c     FF 24 06 F6 | 	mov	local04, #255
29640     2C 1E 06 F1 | 	add	local01, #44
29644     FF FF FF FF 
29648     0F FF 6B FC | 	wrlong	##-1, local01
2964c     2C 1E 86 F1 | 	sub	local01, #44
29650     4C 01 90 FD | 	jmp	#LR__4280
29654                 | LR__4272
29654     16 2D E2 F8 | 	getbyte	local08, local08, #0
29658     0F 2C 0E F2 | 	cmp	local08, #15 wz
2965c     C8 00 90 5D |  if_ne	jmp	#LR__4276
29660     2B 1E 06 F1 | 	add	local01, #43
29664     0F 2D C2 FA | 	rdbyte	local08, local01
29668     2B 1E 86 F1 | 	sub	local01, #43
2966c     40 2C CE F7 | 	test	local08, #64 wz
29670     2C 01 90 5D |  if_ne	jmp	#LR__4279
29674     14 2F E2 F8 | 	getbyte	local09, local06, #0
29678     40 2E CE F7 | 	test	local09, #64 wz
2967c     30 00 90 AD |  if_e	jmp	#LR__4273
29680     1C 1E 06 F1 | 	add	local01, #28
29684     0F 2F 02 FB | 	rdlong	local09, local01
29688     0D 2E 06 F1 | 	add	local09, #13
2968c     17 23 C2 FA | 	rdbyte	local03, local09
29690     14 29 E2 F8 | 	getbyte	local06, local06, #0
29694     BF 28 06 F5 | 	and	local06, #191
29698     14 25 02 F6 | 	mov	local04, local06
2969c     0C 1E 86 F1 | 	sub	local01, #12
296a0     0F 2F 02 FB | 	rdlong	local09, local01
296a4     1C 1E 06 F1 | 	add	local01, #28
296a8     0F 2F 62 FC | 	wrlong	local09, local01
296ac     2C 1E 86 F1 | 	sub	local01, #44
296b0                 | LR__4273
296b0     14 31 E2 F8 | 	getbyte	local10, local06, #0
296b4     12 2B E2 F8 | 	getbyte	local07, local04, #0
296b8     15 31 0A F2 | 	cmp	local10, local07 wz
296bc     5C 00 90 5D |  if_ne	jmp	#LR__4274
296c0     11 2D E2 F8 | 	getbyte	local08, local03, #0
296c4     1C 1E 06 F1 | 	add	local01, #28
296c8     0F 2B 02 FB | 	rdlong	local07, local01
296cc     1C 1E 86 F1 | 	sub	local01, #28
296d0     0D 2A 06 F1 | 	add	local07, #13
296d4     15 29 C2 FA | 	rdbyte	local06, local07
296d8     14 2B E2 F8 | 	getbyte	local07, local06, #0
296dc     15 2D 0A F2 | 	cmp	local08, local07 wz
296e0     38 00 90 5D |  if_ne	jmp	#LR__4274
296e4     0C 20 06 F1 | 	add	local02, #12
296e8     10 13 02 FB | 	rdlong	arg01, local02
296ec     0C 20 86 F1 | 	sub	local02, #12
296f0     1C 1E 06 F1 | 	add	local01, #28
296f4     0F 33 02 FB | 	rdlong	local11, local01
296f8     1C 1E 86 F1 | 	sub	local01, #28
296fc     19 15 02 F6 | 	mov	arg02, local11
29700     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
29704     00 FA 4D F2 | 	cmps	result1, #0 wz
29708     12 33 02 56 |  if_ne	mov	local11, local04
2970c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
29710     01 32 86 51 |  if_ne	sub	local11, #1
29714     19 2F 02 56 |  if_ne	mov	local09, local11
29718     04 00 90 5D |  if_ne	jmp	#LR__4275
2971c                 | LR__4274
2971c     FF 2E 06 F6 | 	mov	local09, #255
29720                 | LR__4275
29720     17 25 02 F6 | 	mov	local04, local09
29724     78 00 90 FD | 	jmp	#LR__4279
29728                 | LR__4276
29728     12 2F 02 F6 | 	mov	local09, local04
2972c     07 2E 4E F7 | 	zerox	local09, #7 wz
29730     20 00 90 5D |  if_ne	jmp	#LR__4277
29734     11 31 E2 F8 | 	getbyte	local10, local03, #0
29738     1C 1E 06 F1 | 	add	local01, #28
2973c     0F 13 02 FB | 	rdlong	arg01, local01
29740     1C 1E 86 F1 | 	sub	local01, #28
29744     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29748     FD FA E1 F8 | 	getbyte	result1, result1, #0
2974c     FD 30 0A F2 | 	cmp	local10, result1 wz
29750     60 00 90 AD |  if_e	jmp	#LR__4281
29754                 | LR__4277
29754     2B 1E 06 F1 | 	add	local01, #43
29758     0F 2F C2 FA | 	rdbyte	local09, local01
2975c     2B 1E 86 F1 | 	sub	local01, #43
29760     01 2E CE F7 | 	test	local09, #1 wz
29764     24 00 90 5D |  if_ne	jmp	#LR__4278
29768     1C 1E 06 F1 | 	add	local01, #28
2976c     0F 13 02 FB | 	rdlong	arg01, local01
29770     04 1E 06 F1 | 	add	local01, #4
29774     0F 15 02 F6 | 	mov	arg02, local01
29778     20 1E 86 F1 | 	sub	local01, #32
2977c     0B 16 06 F6 | 	mov	arg03, #11
29780     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29784     00 FA 0D F2 | 	cmp	result1, #0 wz
29788     28 00 90 AD |  if_e	jmp	#LR__4281
2978c                 | LR__4278
2978c     FF 24 06 F6 | 	mov	local04, #255
29790     2C 1E 06 F1 | 	add	local01, #44
29794     FF FF FF FF 
29798     0F FF 6B FC | 	wrlong	##-1, local01
2979c     2C 1E 86 F1 | 	sub	local01, #44
297a0                 | LR__4279
297a0                 | LR__4280
297a0     0F 13 02 F6 | 	mov	arg01, local01
297a4     00 14 06 F6 | 	mov	arg02, #0
297a8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
297ac     FD 26 0A F6 | 	mov	local05, result1 wz
297b0     04 FE 9F AD |  if_e	jmp	#LR__4270
297b4                 | LR__4281
297b4                 | ' 
297b4                 | ' 	return res;
297b4     13 FB 01 F6 | 	mov	result1, local05
297b8                 | LR__4282
297b8     A7 F0 03 F6 | 	mov	ptra, fp
297bc     B2 00 A0 FD | 	call	#popregs_
297c0                 | _fatfs_cc_dir_find_ret
297c0     2D 00 64 FD | 	ret
297c4                 | 
297c4                 | _fatfs_cc_dir_register
297c4     0A 4A 05 F6 | 	mov	COUNT_, #10
297c8     A8 00 A0 FD | 	call	#pushregs_
297cc     2C F0 07 F1 | 	add	ptra, #44
297d0     04 4E 05 F1 | 	add	fp, #4
297d4     A7 12 62 FC | 	wrlong	arg01, fp
297d8     09 1F 02 FB | 	rdlong	local01, arg01
297dc     08 4E 05 F1 | 	add	fp, #8
297e0     A7 1E 62 FC | 	wrlong	local01, fp
297e4     08 4E 85 F1 | 	sub	fp, #8
297e8     A7 20 02 FB | 	rdlong	local02, fp
297ec     04 4E 85 F1 | 	sub	fp, #4
297f0     2B 20 06 F1 | 	add	local02, #43
297f4     10 21 C2 FA | 	rdbyte	local02, local02
297f8     A0 20 CE F7 | 	test	local02, #160 wz
297fc     06 FA 05 56 |  if_ne	mov	result1, #6
29800     F8 03 90 5D |  if_ne	jmp	#LR__4305
29804                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
29804     14 4E 05 F1 | 	add	fp, #20
29808     A7 00 68 FC | 	wrlong	#0, fp
2980c     14 4E 85 F1 | 	sub	fp, #20
29810     97 28 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
29814                 | LR__4290
29814     0C 4E 05 F1 | 	add	fp, #12
29818     A7 20 02 FB | 	rdlong	local02, fp
2981c     0C 20 06 F1 | 	add	local02, #12
29820     10 23 02 FB | 	rdlong	local03, local02
29824     08 4E 05 F1 | 	add	fp, #8
29828     A7 24 02 FB | 	rdlong	local04, fp
2982c     14 4E 85 F1 | 	sub	fp, #20
29830     01 24 66 F0 | 	shl	local04, #1
29834     11 25 02 F1 | 	add	local04, local03
29838     12 21 EA FA | 	rdword	local02, local04 wz
2983c     24 00 90 AD |  if_e	jmp	#LR__4292
29840     14 4E 05 F1 | 	add	fp, #20
29844     A7 26 02 FB | 	rdlong	local05, fp
29848     13 29 02 F6 | 	mov	local06, local05
2984c     13 2B 02 F6 | 	mov	local07, local05
29850     15 2D 02 F6 | 	mov	local08, local07
29854     01 2C 06 F1 | 	add	local08, #1
29858     A7 2C 62 FC | 	wrlong	local08, fp
2985c     14 4E 85 F1 | 	sub	fp, #20
29860     B0 FF 9F FD | 	jmp	#LR__4290
29864                 | LR__4291
29864                 | LR__4292
29864     1C 4E 05 F1 | 	add	fp, #28
29868     A7 12 02 F6 | 	mov	arg01, fp
2986c     18 4E 85 F1 | 	sub	fp, #24
29870     A7 14 02 FB | 	rdlong	arg02, fp
29874     04 4E 85 F1 | 	sub	fp, #4
29878     20 14 06 F1 | 	add	arg02, #32
2987c     0C 16 06 F6 | 	mov	arg03, #12
29880     E0 6E BF FD | 	call	#__system____builtin_memmove
29884     27 4E 05 F1 | 	add	fp, #39
29888     A7 2E C2 FA | 	rdbyte	local09, fp
2988c     27 4E 85 F1 | 	sub	fp, #39
29890     01 2E CE F7 | 	test	local09, #1 wz
29894     F4 00 90 AD |  if_e	jmp	#LR__4295
29898     04 4E 05 F1 | 	add	fp, #4
2989c     A7 30 02 FB | 	rdlong	local10, fp
298a0     2B 30 06 F1 | 	add	local10, #43
298a4     18 81 48 FC | 	wrbyte	#64, local10
298a8                 | ' 		dp->fn[ 11 ] =  0x40 ;
298a8                 | ' 		for (n = 1; n < 100; n++) {
298a8     0C 4E 05 F1 | 	add	fp, #12
298ac     A7 02 68 FC | 	wrlong	#1, fp
298b0     10 4E 85 F1 | 	sub	fp, #16
298b4                 | LR__4293
298b4     10 4E 05 F1 | 	add	fp, #16
298b8     A7 20 02 FB | 	rdlong	local02, fp
298bc     10 4E 85 F1 | 	sub	fp, #16
298c0     64 20 16 F2 | 	cmp	local02, #100 wc
298c4     70 00 90 3D |  if_ae	jmp	#LR__4294
298c8     04 4E 05 F1 | 	add	fp, #4
298cc     A7 12 02 FB | 	rdlong	arg01, fp
298d0     20 12 06 F1 | 	add	arg01, #32
298d4     18 4E 05 F1 | 	add	fp, #24
298d8     A7 14 02 F6 | 	mov	arg02, fp
298dc     10 4E 85 F1 | 	sub	fp, #16
298e0     A7 30 02 FB | 	rdlong	local10, fp
298e4     0C 30 06 F1 | 	add	local10, #12
298e8     18 17 02 FB | 	rdlong	arg03, local10
298ec     04 4E 05 F1 | 	add	fp, #4
298f0     A7 18 02 FB | 	rdlong	arg04, fp
298f4     10 4E 85 F1 | 	sub	fp, #16
298f8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
298fc     04 4E 05 F1 | 	add	fp, #4
29900     A7 12 02 FB | 	rdlong	arg01, fp
29904     04 4E 85 F1 | 	sub	fp, #4
29908     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2990c     08 4E 05 F1 | 	add	fp, #8
29910     A7 FA 61 FC | 	wrlong	result1, fp
29914     00 FA 4D F2 | 	cmps	result1, #0 wz
29918     08 4E 85 F1 | 	sub	fp, #8
2991c     18 00 90 5D |  if_ne	jmp	#LR__4294
29920     10 4E 05 F1 | 	add	fp, #16
29924     A7 30 02 FB | 	rdlong	local10, fp
29928     01 30 06 F1 | 	add	local10, #1
2992c     A7 30 62 FC | 	wrlong	local10, fp
29930     10 4E 85 F1 | 	sub	fp, #16
29934     7C FF 9F FD | 	jmp	#LR__4293
29938                 | LR__4294
29938     10 4E 05 F1 | 	add	fp, #16
2993c     A7 30 02 FB | 	rdlong	local10, fp
29940     10 4E 85 F1 | 	sub	fp, #16
29944     64 30 0E F2 | 	cmp	local10, #100 wz
29948     07 FA 05 A6 |  if_e	mov	result1, #7
2994c     AC 02 90 AD |  if_e	jmp	#LR__4305
29950     08 4E 05 F1 | 	add	fp, #8
29954     A7 30 02 FB | 	rdlong	local10, fp
29958     08 4E 85 F1 | 	sub	fp, #8
2995c     04 30 0E F2 | 	cmp	local10, #4 wz
29960     08 4E 05 51 |  if_ne	add	fp, #8
29964     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29968     08 4E 85 51 |  if_ne	sub	fp, #8
2996c     8C 02 90 5D |  if_ne	jmp	#LR__4305
29970     04 4E 05 F1 | 	add	fp, #4
29974     A7 30 02 FB | 	rdlong	local10, fp
29978     23 4E 05 F1 | 	add	fp, #35
2997c     A7 1E C2 FA | 	rdbyte	local01, fp
29980     27 4E 85 F1 | 	sub	fp, #39
29984     2B 30 06 F1 | 	add	local10, #43
29988     18 1F 42 FC | 	wrbyte	local01, local10
2998c                 | LR__4295
2998c     27 4E 05 F1 | 	add	fp, #39
29990     A7 20 C2 FA | 	rdbyte	local02, fp
29994     27 4E 85 F1 | 	sub	fp, #39
29998     02 20 CE F7 | 	test	local02, #2 wz
2999c     20 00 90 AD |  if_e	jmp	#LR__4296
299a0     14 4E 05 F1 | 	add	fp, #20
299a4     A7 30 02 FB | 	rdlong	local10, fp
299a8     0C 30 06 F1 | 	add	local10, #12
299ac     0D 30 16 FD | 	qdiv	local10, #13
299b0     14 4E 85 F1 | 	sub	fp, #20
299b4     18 30 62 FD | 	getqx	local10
299b8     01 30 06 F1 | 	add	local10, #1
299bc     04 00 90 FD | 	jmp	#LR__4297
299c0                 | LR__4296
299c0     01 30 06 F6 | 	mov	local10, #1
299c4                 | LR__4297
299c4     18 4E 05 F1 | 	add	fp, #24
299c8     A7 30 62 FC | 	wrlong	local10, fp
299cc     14 4E 85 F1 | 	sub	fp, #20
299d0     A7 12 02 FB | 	rdlong	arg01, fp
299d4     18 15 02 F6 | 	mov	arg02, local10
299d8     04 4E 85 F1 | 	sub	fp, #4
299dc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
299e0     08 4E 05 F1 | 	add	fp, #8
299e4     A7 FA 61 FC | 	wrlong	result1, fp
299e8     08 4E 85 F1 | 	sub	fp, #8
299ec     00 FA 0D F2 | 	cmp	result1, #0 wz
299f0     38 01 90 5D |  if_ne	jmp	#LR__4302
299f4     18 4E 05 F1 | 	add	fp, #24
299f8     A7 30 02 FB | 	rdlong	local10, fp
299fc     01 30 8E F1 | 	sub	local10, #1 wz
29a00     A7 30 62 FC | 	wrlong	local10, fp
29a04     18 4E 85 F1 | 	sub	fp, #24
29a08     20 01 90 AD |  if_e	jmp	#LR__4302
29a0c     04 4E 05 F1 | 	add	fp, #4
29a10     A7 30 02 FB | 	rdlong	local10, fp
29a14     18 13 02 F6 | 	mov	arg01, local10
29a18     14 4E 05 F1 | 	add	fp, #20
29a1c     A7 18 02 FB | 	rdlong	arg04, fp
29a20     18 4E 85 F1 | 	sub	fp, #24
29a24     05 18 66 F0 | 	shl	arg04, #5
29a28     10 30 06 F1 | 	add	local10, #16
29a2c     18 15 02 FB | 	rdlong	arg02, local10
29a30     0C 15 82 F1 | 	sub	arg02, arg04
29a34     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29a38     08 4E 05 F1 | 	add	fp, #8
29a3c     A7 FA 61 FC | 	wrlong	result1, fp
29a40     08 4E 85 F1 | 	sub	fp, #8
29a44     00 FA 0D F2 | 	cmp	result1, #0 wz
29a48     E0 00 90 5D |  if_ne	jmp	#LR__4301
29a4c     04 4E 05 F1 | 	add	fp, #4
29a50     A7 12 02 FB | 	rdlong	arg01, fp
29a54     04 4E 85 F1 | 	sub	fp, #4
29a58     20 12 06 F1 | 	add	arg01, #32
29a5c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29a60     FD 30 02 F6 | 	mov	local10, result1
29a64     28 4E 05 F1 | 	add	fp, #40
29a68     A7 30 42 FC | 	wrbyte	local10, fp
29a6c     28 4E 85 F1 | 	sub	fp, #40
29a70                 | ' 			sum = sum_sfn(dp->fn);
29a70                 | ' 			do {
29a70                 | LR__4298
29a70     0C 4E 05 F1 | 	add	fp, #12
29a74     A7 12 02 FB | 	rdlong	arg01, fp
29a78     08 4E 85 F1 | 	sub	fp, #8
29a7c     A7 1E 02 FB | 	rdlong	local01, fp
29a80     04 4E 85 F1 | 	sub	fp, #4
29a84     18 1E 06 F1 | 	add	local01, #24
29a88     0F 15 02 FB | 	rdlong	arg02, local01
29a8c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29a90     08 4E 05 F1 | 	add	fp, #8
29a94     A7 FA 61 FC | 	wrlong	result1, fp
29a98     00 FA 4D F2 | 	cmps	result1, #0 wz
29a9c     08 4E 85 F1 | 	sub	fp, #8
29aa0     88 00 90 5D |  if_ne	jmp	#LR__4300
29aa4     0C 4E 05 F1 | 	add	fp, #12
29aa8     A7 20 02 FB | 	rdlong	local02, fp
29aac     0C 20 06 F1 | 	add	local02, #12
29ab0     10 13 02 FB | 	rdlong	arg01, local02
29ab4     08 4E 85 F1 | 	sub	fp, #8
29ab8     A7 1E 02 FB | 	rdlong	local01, fp
29abc     1C 1E 06 F1 | 	add	local01, #28
29ac0     0F 15 02 FB | 	rdlong	arg02, local01
29ac4     14 4E 05 F1 | 	add	fp, #20
29ac8     A7 16 02 FB | 	rdlong	arg03, fp
29acc     10 4E 05 F1 | 	add	fp, #16
29ad0     A7 18 C2 FA | 	rdbyte	arg04, fp
29ad4     28 4E 85 F1 | 	sub	fp, #40
29ad8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29adc     0C 4E 05 F1 | 	add	fp, #12
29ae0     A7 30 02 FB | 	rdlong	local10, fp
29ae4     03 30 06 F1 | 	add	local10, #3
29ae8     18 03 48 FC | 	wrbyte	#1, local10
29aec     08 4E 85 F1 | 	sub	fp, #8
29af0     A7 12 02 FB | 	rdlong	arg01, fp
29af4     04 4E 85 F1 | 	sub	fp, #4
29af8     00 14 06 F6 | 	mov	arg02, #0
29afc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29b00     08 4E 05 F1 | 	add	fp, #8
29b04     A7 FA 61 FC | 	wrlong	result1, fp
29b08     00 FA 4D F2 | 	cmps	result1, #0 wz
29b0c     08 4E 85 F1 | 	sub	fp, #8
29b10     18 00 90 5D |  if_ne	jmp	#LR__4299
29b14     18 4E 05 F1 | 	add	fp, #24
29b18     A7 30 02 FB | 	rdlong	local10, fp
29b1c     01 30 8E F1 | 	sub	local10, #1 wz
29b20     A7 30 62 FC | 	wrlong	local10, fp
29b24     18 4E 85 F1 | 	sub	fp, #24
29b28     44 FF 9F 5D |  if_ne	jmp	#LR__4298
29b2c                 | LR__4299
29b2c                 | LR__4300
29b2c                 | LR__4301
29b2c                 | LR__4302
29b2c     08 4E 05 F1 | 	add	fp, #8
29b30     A7 30 0A FB | 	rdlong	local10, fp wz
29b34     08 4E 85 F1 | 	sub	fp, #8
29b38     B4 00 90 5D |  if_ne	jmp	#LR__4304
29b3c     0C 4E 05 F1 | 	add	fp, #12
29b40     A7 12 02 FB | 	rdlong	arg01, fp
29b44     08 4E 85 F1 | 	sub	fp, #8
29b48     A7 1E 02 FB | 	rdlong	local01, fp
29b4c     04 4E 85 F1 | 	sub	fp, #4
29b50     18 1E 06 F1 | 	add	local01, #24
29b54     0F 15 02 FB | 	rdlong	arg02, local01
29b58     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29b5c     08 4E 05 F1 | 	add	fp, #8
29b60     A7 FA 61 FC | 	wrlong	result1, fp
29b64     08 4E 85 F1 | 	sub	fp, #8
29b68     00 FA 0D F2 | 	cmp	result1, #0 wz
29b6c     80 00 90 5D |  if_ne	jmp	#LR__4303
29b70     04 4E 05 F1 | 	add	fp, #4
29b74     A7 20 02 FB | 	rdlong	local02, fp
29b78     04 4E 85 F1 | 	sub	fp, #4
29b7c     1C 20 06 F1 | 	add	local02, #28
29b80     10 13 02 FB | 	rdlong	arg01, local02
29b84     00 14 06 F6 | 	mov	arg02, #0
29b88     20 16 06 F6 | 	mov	arg03, #32
29b8c     98 00 A0 FD | 	call	#\builtin_bytefill_
29b90     04 4E 05 F1 | 	add	fp, #4
29b94     A7 14 02 FB | 	rdlong	arg02, fp
29b98     0A 1F 02 F6 | 	mov	local01, arg02
29b9c     1C 1E 06 F1 | 	add	local01, #28
29ba0     0F 13 02 FB | 	rdlong	arg01, local01
29ba4     04 4E 85 F1 | 	sub	fp, #4
29ba8     20 14 06 F1 | 	add	arg02, #32
29bac     0B 16 06 F6 | 	mov	arg03, #11
29bb0     B0 6B BF FD | 	call	#__system____builtin_memmove
29bb4     04 4E 05 F1 | 	add	fp, #4
29bb8     A7 2E 02 FB | 	rdlong	local09, fp
29bbc     17 31 02 F6 | 	mov	local10, local09
29bc0     1C 30 06 F1 | 	add	local10, #28
29bc4     18 1F 02 FB | 	rdlong	local01, local10
29bc8     2B 2E 06 F1 | 	add	local09, #43
29bcc     17 31 C2 FA | 	rdbyte	local10, local09
29bd0     18 30 06 F5 | 	and	local10, #24
29bd4     0C 1E 06 F1 | 	add	local01, #12
29bd8     0F 31 42 FC | 	wrbyte	local10, local01
29bdc     08 4E 05 F1 | 	add	fp, #8
29be0     A7 30 02 FB | 	rdlong	local10, fp
29be4     0C 4E 85 F1 | 	sub	fp, #12
29be8     03 30 06 F1 | 	add	local10, #3
29bec     18 03 48 FC | 	wrbyte	#1, local10
29bf0                 | LR__4303
29bf0                 | LR__4304
29bf0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29bf0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29bf0                 | ' 
29bf0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29bf0                 | ' 
29bf0                 | ' 			fs->wflag = 1;
29bf0                 | ' 		}
29bf0                 | ' 	}
29bf0                 | ' 
29bf0                 | ' 	return res;
29bf0     08 4E 05 F1 | 	add	fp, #8
29bf4     A7 FA 01 FB | 	rdlong	result1, fp
29bf8     08 4E 85 F1 | 	sub	fp, #8
29bfc                 | LR__4305
29bfc     A7 F0 03 F6 | 	mov	ptra, fp
29c00     B2 00 A0 FD | 	call	#popregs_
29c04                 | _fatfs_cc_dir_register_ret
29c04     2D 00 64 FD | 	ret
29c08                 | 
29c08                 | _fatfs_cc_dir_remove
29c08     05 4A 05 F6 | 	mov	COUNT_, #5
29c0c     A8 00 A0 FD | 	call	#pushregs_
29c10     09 1F 02 F6 | 	mov	local01, arg01
29c14     0F 21 02 FB | 	rdlong	local02, local01
29c18     10 1E 06 F1 | 	add	local01, #16
29c1c     0F 23 02 FB | 	rdlong	local03, local01
29c20     1C 1E 06 F1 | 	add	local01, #28
29c24     0F 15 02 FB | 	rdlong	arg02, local01
29c28     2C 1E 86 F1 | 	sub	local01, #44
29c2c     FF FF 7F FF 
29c30     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29c34     00 24 06 A6 |  if_e	mov	local04, #0
29c38     18 00 90 AD |  if_e	jmp	#LR__4310
29c3c     0F 13 02 F6 | 	mov	arg01, local01
29c40     2C 1E 06 F1 | 	add	local01, #44
29c44     0F 15 02 FB | 	rdlong	arg02, local01
29c48     2C 1E 86 F1 | 	sub	local01, #44
29c4c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29c50     FD 24 02 F6 | 	mov	local04, result1
29c54                 | LR__4310
29c54     12 27 0A F6 | 	mov	local05, local04 wz
29c58     64 00 90 5D |  if_ne	jmp	#LR__4313
29c5c                 | ' 		do {
29c5c                 | LR__4311
29c5c     18 1E 06 F1 | 	add	local01, #24
29c60     0F 15 02 FB | 	rdlong	arg02, local01
29c64     18 1E 86 F1 | 	sub	local01, #24
29c68     10 13 02 F6 | 	mov	arg01, local02
29c6c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29c70     FD 26 0A F6 | 	mov	local05, result1 wz
29c74     40 00 90 5D |  if_ne	jmp	#LR__4312
29c78     1C 1E 06 F1 | 	add	local01, #28
29c7c     0F 25 02 FB | 	rdlong	local04, local01
29c80     12 CB 49 FC | 	wrbyte	#229, local04
29c84     03 20 06 F1 | 	add	local02, #3
29c88     10 03 48 FC | 	wrbyte	#1, local02
29c8c     03 20 86 F1 | 	sub	local02, #3
29c90     0C 1E 86 F1 | 	sub	local01, #12
29c94     0F 25 02 FB | 	rdlong	local04, local01
29c98     10 1E 86 F1 | 	sub	local01, #16
29c9c     11 25 12 F2 | 	cmp	local04, local03 wc
29ca0     14 00 90 3D |  if_ae	jmp	#LR__4312
29ca4     0F 13 02 F6 | 	mov	arg01, local01
29ca8     00 14 06 F6 | 	mov	arg02, #0
29cac     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29cb0     FD 26 0A F6 | 	mov	local05, result1 wz
29cb4     A4 FF 9F AD |  if_e	jmp	#LR__4311
29cb8                 | LR__4312
29cb8     04 26 0E F2 | 	cmp	local05, #4 wz
29cbc     02 26 06 A6 |  if_e	mov	local05, #2
29cc0                 | LR__4313
29cc0                 | ' 	}
29cc0                 | ' #line 2590 "ff.c"
29cc0                 | ' 	return res;
29cc0     13 FB 01 F6 | 	mov	result1, local05
29cc4     A7 F0 03 F6 | 	mov	ptra, fp
29cc8     B2 00 A0 FD | 	call	#popregs_
29ccc                 | _fatfs_cc_dir_remove_ret
29ccc     2D 00 64 FD | 	ret
29cd0                 | 
29cd0                 | _fatfs_cc_get_fileinfo
29cd0     0F 4A 05 F6 | 	mov	COUNT_, #15
29cd4     A8 00 A0 FD | 	call	#pushregs_
29cd8     09 1F 02 F6 | 	mov	local01, arg01
29cdc     0A 21 02 F6 | 	mov	local02, arg02
29ce0     0F 23 02 FB | 	rdlong	local03, local01
29ce4     1C 20 06 F1 | 	add	local02, #28
29ce8     10 01 48 FC | 	wrbyte	#0, local02
29cec     1C 20 86 F1 | 	sub	local02, #28
29cf0     18 1E 06 F1 | 	add	local01, #24
29cf4     0F 25 0A FB | 	rdlong	local04, local01 wz
29cf8     18 1E 86 F1 | 	sub	local01, #24
29cfc     90 03 90 AD |  if_e	jmp	#LR__4334
29d00     2C 1E 06 F1 | 	add	local01, #44
29d04     0F 25 02 FB | 	rdlong	local04, local01
29d08     2C 1E 86 F1 | 	sub	local01, #44
29d0c     FF FF 7F FF 
29d10     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29d14     D8 00 90 AD |  if_e	jmp	#LR__4323
29d18     00 26 06 F6 | 	mov	local05, #0
29d1c     00 28 06 F6 | 	mov	local06, #0
29d20     00 2A 06 F6 | 	mov	local07, #0
29d24                 | ' 			si = di = 0;
29d24                 | ' 			hs = 0;
29d24                 | ' 			while (fs->lfnbuf[si] != 0) {
29d24                 | LR__4320
29d24     0C 22 06 F1 | 	add	local03, #12
29d28     11 25 02 FB | 	rdlong	local04, local03
29d2c     0C 22 86 F1 | 	sub	local03, #12
29d30     14 2D 02 F6 | 	mov	local08, local06
29d34     01 2C 66 F0 | 	shl	local08, #1
29d38     12 2D 02 F1 | 	add	local08, local04
29d3c     16 25 EA FA | 	rdword	local04, local08 wz
29d40     90 00 90 AD |  if_e	jmp	#LR__4322
29d44     0C 22 06 F1 | 	add	local03, #12
29d48     11 2F 02 FB | 	rdlong	local09, local03
29d4c     0C 22 86 F1 | 	sub	local03, #12
29d50     14 31 02 F6 | 	mov	local10, local06
29d54     01 30 66 F0 | 	shl	local10, #1
29d58     17 31 02 F1 | 	add	local10, local09
29d5c     18 33 E2 FA | 	rdword	local11, local10
29d60     15 25 02 F6 | 	mov	local04, local07
29d64     0F 24 4E F7 | 	zerox	local04, #15 wz
29d68     01 28 06 F1 | 	add	local06, #1
29d6c     24 00 90 5D |  if_ne	jmp	#LR__4321
29d70     19 35 32 F9 | 	getword	local12, local11, #0
29d74     6C 00 00 FF 
29d78     00 34 16 F2 | 	cmp	local12, ##55296 wc
29d7c     14 00 90 CD |  if_b	jmp	#LR__4321
29d80     19 37 32 F9 | 	getword	local13, local11, #0
29d84     70 00 00 FF 
29d88     00 36 16 F2 | 	cmp	local13, ##57344 wc
29d8c     19 2B 02 C6 |  if_b	mov	local07, local11
29d90                 | ' 					hs = wc; continue;
29d90     90 FF 9F CD |  if_b	jmp	#LR__4320
29d94                 | LR__4321
29d94     15 13 32 F9 | 	getword	arg01, local07, #0
29d98     10 12 66 F0 | 	shl	arg01, #16
29d9c     19 33 32 F9 | 	getword	local11, local11, #0
29da0     19 13 42 F5 | 	or	arg01, local11
29da4     13 15 02 F6 | 	mov	arg02, local05
29da8     1C 20 06 F1 | 	add	local02, #28
29dac     10 15 02 F1 | 	add	arg02, local02
29db0     FF 16 06 F6 | 	mov	arg03, #255
29db4     13 17 82 F1 | 	sub	arg03, local05
29db8     1C 20 86 F1 | 	sub	local02, #28
29dbc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29dc0     FD 38 0A F6 | 	mov	local14, result1 wz
29dc4     00 26 06 A6 |  if_e	mov	local05, #0
29dc8     1C 27 02 51 |  if_ne	add	local05, local14
29dcc     00 2A 06 56 |  if_ne	mov	local07, #0
29dd0     50 FF 9F 5D |  if_ne	jmp	#LR__4320
29dd4                 | LR__4322
29dd4     15 25 02 F6 | 	mov	local04, local07
29dd8     0F 24 4E F7 | 	zerox	local04, #15 wz
29ddc     00 26 06 56 |  if_ne	mov	local05, #0
29de0     1C 20 06 F1 | 	add	local02, #28
29de4     10 27 02 F1 | 	add	local05, local02
29de8     13 01 48 FC | 	wrbyte	#0, local05
29dec     1C 20 86 F1 | 	sub	local02, #28
29df0                 | LR__4323
29df0     00 26 06 F6 | 	mov	local05, #0
29df4     00 28 06 F6 | 	mov	local06, #0
29df8                 | ' 			fno->fname[di] = 0;
29df8                 | ' 		}
29df8                 | ' 	}
29df8                 | ' 
29df8                 | ' 	si = di = 0;
29df8                 | ' 	while (si < 11) {
29df8                 | LR__4324
29df8     0B 28 16 F2 | 	cmp	local06, #11 wc
29dfc     20 01 90 3D |  if_ae	jmp	#LR__4327
29e00     1C 1E 06 F1 | 	add	local01, #28
29e04     0F 2F 02 FB | 	rdlong	local09, local01
29e08     1C 1E 86 F1 | 	sub	local01, #28
29e0c     14 31 02 F6 | 	mov	local10, local06
29e10     17 31 02 F1 | 	add	local10, local09
29e14     18 33 C2 FA | 	rdbyte	local11, local10
29e18     19 25 32 F9 | 	getword	local04, local11, #0
29e1c     20 24 0E F2 | 	cmp	local04, #32 wz
29e20     01 28 06 F1 | 	add	local06, #1
29e24     D0 FF 9F AD |  if_e	jmp	#LR__4324
29e28     19 25 32 F9 | 	getword	local04, local11, #0
29e2c     05 24 0E F2 | 	cmp	local04, #5 wz
29e30     E5 32 06 A6 |  if_e	mov	local11, #229
29e34     09 28 0E F2 | 	cmp	local06, #9 wz
29e38     20 00 90 5D |  if_ne	jmp	#LR__4325
29e3c     0C 26 16 F2 | 	cmp	local05, #12 wc
29e40     18 00 90 3D |  if_ae	jmp	#LR__4325
29e44     13 37 02 F6 | 	mov	local13, local05
29e48     0C 20 06 F1 | 	add	local02, #12
29e4c     10 37 02 F1 | 	add	local13, local02
29e50     1B 5D 48 FC | 	wrbyte	#46, local13
29e54     01 26 06 F1 | 	add	local05, #1
29e58     0C 20 86 F1 | 	sub	local02, #12
29e5c                 | LR__4325
29e5c     19 13 32 F9 | 	getword	arg01, local11, #0
29e60     07 12 4E F7 | 	zerox	arg01, #7 wz
29e64     00 FA 05 56 |  if_ne	mov	result1, #0
29e68                 | ' 
29e68                 | ' 	return 0;
29e68     00 FA 05 A6 |  if_e	mov	result1, #0
29e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
29e70     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
29e74     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
29e78     50 00 90 AD |  if_e	jmp	#LR__4326
29e7c     1C 1E 06 F1 | 	add	local01, #28
29e80     0F 31 02 FB | 	rdlong	local10, local01
29e84     1C 1E 86 F1 | 	sub	local01, #28
29e88     14 2D 02 F6 | 	mov	local08, local06
29e8c     18 2D 02 F1 | 	add	local08, local10
29e90     16 13 CA FA | 	rdbyte	arg01, local08 wz
29e94     00 FA 05 56 |  if_ne	mov	result1, #0
29e98                 | ' 
29e98                 | ' 	return 0;
29e98     00 FA 05 A6 |  if_e	mov	result1, #0
29e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
29ea0     28 00 90 AD |  if_e	jmp	#LR__4326
29ea4     19 33 32 F9 | 	getword	local11, local11, #0
29ea8     08 32 66 F0 | 	shl	local11, #8
29eac     1C 1E 06 F1 | 	add	local01, #28
29eb0     0F 39 02 FB | 	rdlong	local14, local01
29eb4     1C 1E 86 F1 | 	sub	local01, #28
29eb8     14 2F 02 F6 | 	mov	local09, local06
29ebc     1C 2F 02 F1 | 	add	local09, local14
29ec0     17 35 C2 FA | 	rdbyte	local12, local09
29ec4     1A 33 42 F5 | 	or	local11, local12
29ec8     01 28 06 F1 | 	add	local06, #1
29ecc                 | LR__4326
29ecc     19 13 02 F6 | 	mov	arg01, local11
29ed0     01 00 00 FF 
29ed4     52 15 06 F6 | 	mov	arg02, ##850
29ed8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
29edc     FD 32 02 F6 | 	mov	local11, result1
29ee0     19 25 02 F6 | 	mov	local04, local11
29ee4     0F 24 4E F7 | 	zerox	local04, #15 wz
29ee8     00 26 06 A6 |  if_e	mov	local05, #0
29eec     30 00 90 AD |  if_e	jmp	#LR__4327
29ef0     19 13 32 F9 | 	getword	arg01, local11, #0
29ef4     13 15 02 F6 | 	mov	arg02, local05
29ef8     0C 20 06 F1 | 	add	local02, #12
29efc     10 15 02 F1 | 	add	arg02, local02
29f00     0C 16 06 F6 | 	mov	arg03, #12
29f04     13 17 82 F1 | 	sub	arg03, local05
29f08     0C 20 86 F1 | 	sub	local02, #12
29f0c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
29f10     FD 38 0A F6 | 	mov	local14, result1 wz
29f14     00 26 06 A6 |  if_e	mov	local05, #0
29f18     1C 27 02 51 |  if_ne	add	local05, local14
29f1c     D8 FE 9F 5D |  if_ne	jmp	#LR__4324
29f20                 | LR__4327
29f20     13 25 02 F6 | 	mov	local04, local05
29f24     0C 20 06 F1 | 	add	local02, #12
29f28     10 25 02 F1 | 	add	local04, local02
29f2c     12 01 48 FC | 	wrbyte	#0, local04
29f30     10 20 06 F1 | 	add	local02, #16
29f34     10 25 CA FA | 	rdbyte	local04, local02 wz
29f38     1C 20 86 F1 | 	sub	local02, #28
29f3c     F8 00 90 5D |  if_ne	jmp	#LR__4333
29f40     00 26 0E F2 | 	cmp	local05, #0 wz
29f44     1C 00 90 5D |  if_ne	jmp	#LR__4328
29f48     13 37 02 F6 | 	mov	local13, local05
29f4c     1C 20 06 F1 | 	add	local02, #28
29f50     10 37 02 F1 | 	add	local13, local02
29f54     1B 7F 48 FC | 	wrbyte	#63, local13
29f58     01 26 06 F1 | 	add	local05, #1
29f5c     1C 20 86 F1 | 	sub	local02, #28
29f60     A4 00 90 FD | 	jmp	#LR__4332
29f64                 | LR__4328
29f64                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
29f64     00 26 06 F6 | 	mov	local05, #0
29f68     00 28 06 F6 | 	mov	local06, #0
29f6c     08 3A 06 F6 | 	mov	local15, #8
29f70                 | LR__4329
29f70     14 25 02 F6 | 	mov	local04, local06
29f74     0C 20 06 F1 | 	add	local02, #12
29f78     10 25 02 F1 | 	add	local04, local02
29f7c     12 37 CA FA | 	rdbyte	local13, local04 wz
29f80     0C 20 86 F1 | 	sub	local02, #12
29f84     80 00 90 AD |  if_e	jmp	#LR__4331
29f88     14 2D 02 F6 | 	mov	local08, local06
29f8c     0C 20 06 F1 | 	add	local02, #12
29f90     10 2D 02 F1 | 	add	local08, local02
29f94     16 33 C2 FA | 	rdbyte	local11, local08
29f98     19 39 32 F9 | 	getword	local14, local11, #0
29f9c     2E 38 0E F2 | 	cmp	local14, #46 wz
29fa0     0C 20 86 F1 | 	sub	local02, #12
29fa4     10 3A 06 A6 |  if_e	mov	local15, #16
29fa8     19 39 32 F9 | 	getword	local14, local11, #0
29fac     41 38 16 F2 | 	cmp	local14, #65 wc
29fb0     30 00 90 CD |  if_b	jmp	#LR__4330
29fb4     19 2D 32 F9 | 	getword	local08, local11, #0
29fb8     5B 2C 16 F2 | 	cmp	local08, #91 wc
29fbc     24 00 90 3D |  if_ae	jmp	#LR__4330
29fc0     1C 1E 06 F1 | 	add	local01, #28
29fc4     0F 2F 02 FB | 	rdlong	local09, local01
29fc8     1C 1E 86 F1 | 	sub	local01, #28
29fcc     0C 2E 06 F1 | 	add	local09, #12
29fd0     17 31 C2 FA | 	rdbyte	local10, local09
29fd4     1D 39 E2 F8 | 	getbyte	local14, local15, #0
29fd8     1C 31 CA F7 | 	test	local10, local14 wz
29fdc     19 33 32 59 |  if_ne	getword	local11, local11, #0
29fe0     20 32 06 51 |  if_ne	add	local11, #32
29fe4                 | LR__4330
29fe4     13 39 02 F6 | 	mov	local14, local05
29fe8     1C 20 06 F1 | 	add	local02, #28
29fec     10 39 02 F1 | 	add	local14, local02
29ff0     19 33 32 F9 | 	getword	local11, local11, #0
29ff4     1C 33 42 FC | 	wrbyte	local11, local14
29ff8     01 28 06 F1 | 	add	local06, #1
29ffc     01 26 06 F1 | 	add	local05, #1
2a000     1C 20 86 F1 | 	sub	local02, #28
2a004     68 FF 9F FD | 	jmp	#LR__4329
2a008                 | LR__4331
2a008                 | LR__4332
2a008     1C 20 06 F1 | 	add	local02, #28
2a00c     10 27 02 F1 | 	add	local05, local02
2a010     13 01 48 FC | 	wrbyte	#0, local05
2a014     1C 1E 06 F1 | 	add	local01, #28
2a018     0F 25 02 FB | 	rdlong	local04, local01
2a01c     1C 1E 86 F1 | 	sub	local01, #28
2a020     0C 24 06 F1 | 	add	local04, #12
2a024     12 37 CA FA | 	rdbyte	local13, local04 wz
2a028     1C 20 86 F1 | 	sub	local02, #28
2a02c     0C 20 06 A1 |  if_e	add	local02, #12
2a030     10 01 48 AC |  if_e	wrbyte	#0, local02
2a034     0C 20 86 A1 |  if_e	sub	local02, #12
2a038                 | LR__4333
2a038     1C 1E 06 F1 | 	add	local01, #28
2a03c     0F 35 02 FB | 	rdlong	local12, local01
2a040     0B 34 06 F1 | 	add	local12, #11
2a044     1A 25 C2 FA | 	rdbyte	local04, local12
2a048     3F 24 06 F5 | 	and	local04, #63
2a04c     08 20 06 F1 | 	add	local02, #8
2a050     10 25 42 FC | 	wrbyte	local04, local02
2a054     08 20 86 F1 | 	sub	local02, #8
2a058     0F 13 02 FB | 	rdlong	arg01, local01
2a05c     1C 12 06 F1 | 	add	arg01, #28
2a060                 | ' {
2a060                 | ' 
2a060                 | ' 	return *((DWORD*)ptr);
2a060     09 FB 01 FB | 	rdlong	result1, arg01
2a064     10 FB 61 FC | 	wrlong	result1, local02
2a068     0F 13 02 FB | 	rdlong	arg01, local01
2a06c     16 12 06 F1 | 	add	arg01, #22
2a070                 | ' {
2a070                 | ' 
2a070                 | ' 	return *((WORD*)ptr);
2a070     09 FB E1 FA | 	rdword	result1, arg01
2a074     06 20 06 F1 | 	add	local02, #6
2a078     10 FB 51 FC | 	wrword	result1, local02
2a07c     0F 13 02 FB | 	rdlong	arg01, local01
2a080     18 12 06 F1 | 	add	arg01, #24
2a084                 | ' {
2a084                 | ' 
2a084                 | ' 	return *((WORD*)ptr);
2a084     09 FB E1 FA | 	rdword	result1, arg01
2a088     02 20 86 F1 | 	sub	local02, #2
2a08c     10 FB 51 FC | 	wrword	result1, local02
2a090                 | LR__4334
2a090     A7 F0 03 F6 | 	mov	ptra, fp
2a094     B2 00 A0 FD | 	call	#popregs_
2a098                 | _fatfs_cc_get_fileinfo_ret
2a098     2D 00 64 FD | 	ret
2a09c                 | 
2a09c                 | _fatfs_cc_create_name
2a09c     0D 4A 05 F6 | 	mov	COUNT_, #13
2a0a0     A8 00 A0 FD | 	call	#pushregs_
2a0a4     34 F0 07 F1 | 	add	ptra, #52
2a0a8     04 4E 05 F1 | 	add	fp, #4
2a0ac     A7 12 62 FC | 	wrlong	arg01, fp
2a0b0     04 4E 05 F1 | 	add	fp, #4
2a0b4     A7 14 62 FC | 	wrlong	arg02, fp
2a0b8     0A FB 01 FB | 	rdlong	result1, arg02
2a0bc     28 4E 05 F1 | 	add	fp, #40
2a0c0     A7 FA 61 FC | 	wrlong	result1, fp
2a0c4     2C 4E 85 F1 | 	sub	fp, #44
2a0c8     A7 FA 01 FB | 	rdlong	result1, fp
2a0cc     FD 1E 02 FB | 	rdlong	local01, result1
2a0d0     0C 1E 06 F1 | 	add	local01, #12
2a0d4     0F 21 02 FB | 	rdlong	local02, local01
2a0d8     14 4E 05 F1 | 	add	fp, #20
2a0dc     A7 20 62 FC | 	wrlong	local02, fp
2a0e0     14 4E 05 F1 | 	add	fp, #20
2a0e4     A7 00 68 FC | 	wrlong	#0, fp
2a0e8     2C 4E 85 F1 | 	sub	fp, #44
2a0ec                 | ' 
2a0ec                 | ' 
2a0ec                 | ' 
2a0ec                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a0ec                 | ' 	for (;;) {
2a0ec                 | LR__4340
2a0ec     30 4E 05 F1 | 	add	fp, #48
2a0f0     A7 12 02 F6 | 	mov	arg01, fp
2a0f4     30 4E 85 F1 | 	sub	fp, #48
2a0f8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a0fc     1C 4E 05 F1 | 	add	fp, #28
2a100     A7 FA 61 FC | 	wrlong	result1, fp
2a104     1C 4E 85 F1 | 	sub	fp, #28
2a108     FF FF 7F FF 
2a10c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a110     06 FA 05 A6 |  if_e	mov	result1, #6
2a114     74 08 90 AD |  if_e	jmp	#LR__4380
2a118     1C 4E 05 F1 | 	add	fp, #28
2a11c     A7 1E 02 FB | 	rdlong	local01, fp
2a120     1C 4E 85 F1 | 	sub	fp, #28
2a124     80 00 00 FF 
2a128     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a12c     3C 00 90 CD |  if_b	jmp	#LR__4341
2a130     18 4E 05 F1 | 	add	fp, #24
2a134     A7 22 02 FB | 	rdlong	local03, fp
2a138     14 4E 05 F1 | 	add	fp, #20
2a13c     A7 1E 02 FB | 	rdlong	local01, fp
2a140     0F 25 02 F6 | 	mov	local04, local01
2a144     01 24 06 F1 | 	add	local04, #1
2a148     A7 24 62 FC | 	wrlong	local04, fp
2a14c     01 1E 66 F0 | 	shl	local01, #1
2a150     11 1F 02 F1 | 	add	local01, local03
2a154     10 4E 85 F1 | 	sub	fp, #16
2a158     A7 26 02 FB | 	rdlong	local05, fp
2a15c     1C 4E 85 F1 | 	sub	fp, #28
2a160     13 29 02 F6 | 	mov	local06, local05
2a164     10 28 46 F0 | 	shr	local06, #16
2a168     0F 29 52 FC | 	wrword	local06, local01
2a16c                 | LR__4341
2a16c     1C 4E 05 F1 | 	add	fp, #28
2a170     A7 1E 02 FB | 	rdlong	local01, fp
2a174     08 4E 85 F1 | 	sub	fp, #8
2a178     A7 1E 52 FC | 	wrword	local01, fp
2a17c     A7 1E E2 FA | 	rdword	local01, fp
2a180     14 4E 85 F1 | 	sub	fp, #20
2a184     20 1E 16 F2 | 	cmp	local01, #32 wc
2a188     B0 00 90 CD |  if_b	jmp	#LR__4343
2a18c     14 4E 05 F1 | 	add	fp, #20
2a190     A7 1E E2 FA | 	rdword	local01, fp
2a194     14 4E 85 F1 | 	sub	fp, #20
2a198     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a19c     14 4E 05 51 |  if_ne	add	fp, #20
2a1a0     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a1a4     14 4E 85 51 |  if_ne	sub	fp, #20
2a1a8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a1ac     8C 00 90 AD |  if_e	jmp	#LR__4343
2a1b0     14 4E 05 F1 | 	add	fp, #20
2a1b4     A7 12 E2 FA | 	rdword	arg01, fp
2a1b8     14 4E 85 F1 | 	sub	fp, #20
2a1bc     80 12 16 F2 | 	cmp	arg01, #128 wc
2a1c0     24 00 90 3D |  if_ae	jmp	#LR__4342
2a1c4     80 01 00 FF 
2a1c8     00 13 06 F6 | 	mov	arg01, ##@LR__5002
2a1cc     14 4E 05 F1 | 	add	fp, #20
2a1d0     A7 14 E2 FA | 	rdword	arg02, fp
2a1d4     14 4E 85 F1 | 	sub	fp, #20
2a1d8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a1dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1e0     06 FA 05 56 |  if_ne	mov	result1, #6
2a1e4     A4 07 90 5D |  if_ne	jmp	#LR__4380
2a1e8                 | LR__4342
2a1e8     2C 4E 05 F1 | 	add	fp, #44
2a1ec     A7 28 02 FB | 	rdlong	local06, fp
2a1f0     2C 4E 85 F1 | 	sub	fp, #44
2a1f4     FF 28 16 F2 | 	cmp	local06, #255 wc
2a1f8     06 FA 05 36 |  if_ae	mov	result1, #6
2a1fc     8C 07 90 3D |  if_ae	jmp	#LR__4380
2a200     18 4E 05 F1 | 	add	fp, #24
2a204     A7 22 02 FB | 	rdlong	local03, fp
2a208     14 4E 05 F1 | 	add	fp, #20
2a20c     A7 20 02 FB | 	rdlong	local02, fp
2a210     10 25 02 F6 | 	mov	local04, local02
2a214     01 24 06 F1 | 	add	local04, #1
2a218     A7 24 62 FC | 	wrlong	local04, fp
2a21c     10 1F 02 F6 | 	mov	local01, local02
2a220     01 1E 66 F0 | 	shl	local01, #1
2a224     11 1F 02 F1 | 	add	local01, local03
2a228     18 4E 85 F1 | 	sub	fp, #24
2a22c     A7 28 E2 FA | 	rdword	local06, fp
2a230     14 4E 85 F1 | 	sub	fp, #20
2a234     0F 29 52 FC | 	wrword	local06, local01
2a238     B0 FE 9F FD | 	jmp	#LR__4340
2a23c                 | LR__4343
2a23c     14 4E 05 F1 | 	add	fp, #20
2a240     A7 2A E2 FA | 	rdword	local07, fp
2a244     14 4E 85 F1 | 	sub	fp, #20
2a248     20 2A 16 F2 | 	cmp	local07, #32 wc
2a24c     10 4E 05 C1 |  if_b	add	fp, #16
2a250     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a254     10 4E 85 C1 |  if_b	sub	fp, #16
2a258     74 00 90 CD |  if_b	jmp	#LR__4348
2a25c     97 24 48 FB | 	callpa	#(@LR__4346-@LR__4344)>>2,fcache_load_ptr_
2a260                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a260                 | LR__4344
2a260     30 4E 05 F1 | 	add	fp, #48
2a264     A7 24 02 FB | 	rdlong	local04, fp
2a268     30 4E 85 F1 | 	sub	fp, #48
2a26c     12 2B C2 FA | 	rdbyte	local07, local04
2a270     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a274     18 00 90 AD |  if_e	jmp	#LR__4345
2a278     30 4E 05 F1 | 	add	fp, #48
2a27c     A7 24 02 FB | 	rdlong	local04, fp
2a280     30 4E 85 F1 | 	sub	fp, #48
2a284     12 21 C2 FA | 	rdbyte	local02, local04
2a288     5C 20 0E F2 | 	cmp	local02, #92 wz
2a28c     18 00 90 5D |  if_ne	jmp	#LR__4347
2a290                 | LR__4345
2a290     30 4E 05 F1 | 	add	fp, #48
2a294     A7 1E 02 FB | 	rdlong	local01, fp
2a298     01 1E 06 F1 | 	add	local01, #1
2a29c     A7 1E 62 FC | 	wrlong	local01, fp
2a2a0     30 4E 85 F1 | 	sub	fp, #48
2a2a4     B8 FF 9F FD | 	jmp	#LR__4344
2a2a8                 | LR__4346
2a2a8                 | LR__4347
2a2a8     10 4E 05 F1 | 	add	fp, #16
2a2ac     A7 00 48 FC | 	wrbyte	#0, fp
2a2b0     20 4E 05 F1 | 	add	fp, #32
2a2b4     A7 28 02 FB | 	rdlong	local06, fp
2a2b8     30 4E 85 F1 | 	sub	fp, #48
2a2bc     14 2B C2 FA | 	rdbyte	local07, local06
2a2c0     20 2A 16 F2 | 	cmp	local07, #32 wc
2a2c4     10 4E 05 C1 |  if_b	add	fp, #16
2a2c8     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a2cc     10 4E 85 C1 |  if_b	sub	fp, #16
2a2d0                 | LR__4348
2a2d0     08 4E 05 F1 | 	add	fp, #8
2a2d4     A7 2A 02 FB | 	rdlong	local07, fp
2a2d8     28 4E 05 F1 | 	add	fp, #40
2a2dc     A7 1E 02 FB | 	rdlong	local01, fp
2a2e0     30 4E 85 F1 | 	sub	fp, #48
2a2e4     15 1F 62 FC | 	wrlong	local01, local07
2a2e8     97 38 48 FB | 	callpa	#(@LR__4350-@LR__4349)>>2,fcache_load_ptr_
2a2ec                 | ' 	}
2a2ec                 | ' 	*path = p;
2a2ec                 | ' #line 2862 "ff.c"
2a2ec                 | ' 	while (di) {
2a2ec                 | LR__4349
2a2ec     2C 4E 05 F1 | 	add	fp, #44
2a2f0     A7 2A 0A FB | 	rdlong	local07, fp wz
2a2f4     2C 4E 85 F1 | 	sub	fp, #44
2a2f8     60 00 90 AD |  if_e	jmp	#LR__4351
2a2fc     18 4E 05 F1 | 	add	fp, #24
2a300     A7 28 02 FB | 	rdlong	local06, fp
2a304     14 4E 05 F1 | 	add	fp, #20
2a308     A7 24 02 FB | 	rdlong	local04, fp
2a30c     01 24 86 F1 | 	sub	local04, #1
2a310     01 24 66 F0 | 	shl	local04, #1
2a314     14 25 02 F1 | 	add	local04, local06
2a318     12 29 E2 FA | 	rdword	local06, local04
2a31c     18 4E 85 F1 | 	sub	fp, #24
2a320     A7 28 52 FC | 	wrword	local06, fp
2a324     A7 2A E2 FA | 	rdword	local07, fp
2a328     14 4E 85 F1 | 	sub	fp, #20
2a32c     20 2A 0E F2 | 	cmp	local07, #32 wz
2a330     14 4E 05 51 |  if_ne	add	fp, #20
2a334     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a338     14 4E 85 51 |  if_ne	sub	fp, #20
2a33c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a340     18 00 90 5D |  if_ne	jmp	#LR__4351
2a344     2C 4E 05 F1 | 	add	fp, #44
2a348     A7 1E 02 FB | 	rdlong	local01, fp
2a34c     01 1E 86 F1 | 	sub	local01, #1
2a350     A7 1E 62 FC | 	wrlong	local01, fp
2a354     2C 4E 85 F1 | 	sub	fp, #44
2a358     90 FF 9F FD | 	jmp	#LR__4349
2a35c                 | LR__4350
2a35c                 | LR__4351
2a35c     18 4E 05 F1 | 	add	fp, #24
2a360     A7 2C 02 FB | 	rdlong	local08, fp
2a364     14 4E 05 F1 | 	add	fp, #20
2a368     A7 24 02 FB | 	rdlong	local04, fp
2a36c     01 24 66 F0 | 	shl	local04, #1
2a370     16 25 02 F1 | 	add	local04, local08
2a374     12 01 58 FC | 	wrword	#0, local04
2a378     A7 2A 0A FB | 	rdlong	local07, fp wz
2a37c     2C 4E 85 F1 | 	sub	fp, #44
2a380     06 FA 05 A6 |  if_e	mov	result1, #6
2a384     04 06 90 AD |  if_e	jmp	#LR__4380
2a388                 | ' 
2a388                 | ' 
2a388                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a388     28 4E 05 F1 | 	add	fp, #40
2a38c     A7 00 68 FC | 	wrlong	#0, fp
2a390     28 4E 85 F1 | 	sub	fp, #40
2a394     97 22 48 FB | 	callpa	#(@LR__4353-@LR__4352)>>2,fcache_load_ptr_
2a398                 | LR__4352
2a398     18 4E 05 F1 | 	add	fp, #24
2a39c     A7 2E 02 FB | 	rdlong	local09, fp
2a3a0     10 4E 05 F1 | 	add	fp, #16
2a3a4     A7 30 02 FB | 	rdlong	local10, fp
2a3a8     28 4E 85 F1 | 	sub	fp, #40
2a3ac     01 30 66 F0 | 	shl	local10, #1
2a3b0     17 31 02 F1 | 	add	local10, local09
2a3b4     18 33 E2 FA | 	rdword	local11, local10
2a3b8     20 32 0E F2 | 	cmp	local11, #32 wz
2a3bc     1C 00 90 5D |  if_ne	jmp	#LR__4354
2a3c0     28 4E 05 F1 | 	add	fp, #40
2a3c4     A7 34 02 FB | 	rdlong	local12, fp
2a3c8     1A 27 02 F6 | 	mov	local05, local12
2a3cc     01 26 06 F1 | 	add	local05, #1
2a3d0     A7 26 62 FC | 	wrlong	local05, fp
2a3d4     28 4E 85 F1 | 	sub	fp, #40
2a3d8     BC FF 9F FD | 	jmp	#LR__4352
2a3dc                 | LR__4353
2a3dc                 | LR__4354
2a3dc     28 4E 05 F1 | 	add	fp, #40
2a3e0     A7 2A 02 FB | 	rdlong	local07, fp
2a3e4     28 4E 85 F1 | 	sub	fp, #40
2a3e8     01 2A 16 F2 | 	cmp	local07, #1 wc
2a3ec     28 00 90 3D |  if_ae	jmp	#LR__4355
2a3f0     18 4E 05 F1 | 	add	fp, #24
2a3f4     A7 22 02 FB | 	rdlong	local03, fp
2a3f8     10 4E 05 F1 | 	add	fp, #16
2a3fc     A7 2E 02 FB | 	rdlong	local09, fp
2a400     28 4E 85 F1 | 	sub	fp, #40
2a404     01 2E 66 F0 | 	shl	local09, #1
2a408     11 2F 02 F1 | 	add	local09, local03
2a40c     17 1F E2 FA | 	rdword	local01, local09
2a410     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a414     14 00 90 5D |  if_ne	jmp	#LR__4356
2a418                 | LR__4355
2a418     10 4E 05 F1 | 	add	fp, #16
2a41c     A7 2A C2 FA | 	rdbyte	local07, fp
2a420     03 2A 46 F5 | 	or	local07, #3
2a424     A7 2A 42 FC | 	wrbyte	local07, fp
2a428     10 4E 85 F1 | 	sub	fp, #16
2a42c                 | LR__4356
2a42c     97 2C 48 FB | 	callpa	#(@LR__4358-@LR__4357)>>2,fcache_load_ptr_
2a430                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a430                 | LR__4357
2a430     2C 4E 05 F1 | 	add	fp, #44
2a434     A7 2A 02 FB | 	rdlong	local07, fp
2a438     2C 4E 85 F1 | 	sub	fp, #44
2a43c     01 2A 16 F2 | 	cmp	local07, #1 wc
2a440     44 00 90 CD |  if_b	jmp	#LR__4359
2a444     18 4E 05 F1 | 	add	fp, #24
2a448     A7 28 02 FB | 	rdlong	local06, fp
2a44c     14 4E 05 F1 | 	add	fp, #20
2a450     A7 22 02 FB | 	rdlong	local03, fp
2a454     2C 4E 85 F1 | 	sub	fp, #44
2a458     01 22 86 F1 | 	sub	local03, #1
2a45c     01 22 66 F0 | 	shl	local03, #1
2a460     14 23 02 F1 | 	add	local03, local06
2a464     11 1F E2 FA | 	rdword	local01, local03
2a468     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a46c     18 00 90 AD |  if_e	jmp	#LR__4359
2a470     2C 4E 05 F1 | 	add	fp, #44
2a474     A7 1E 02 FB | 	rdlong	local01, fp
2a478     01 1E 86 F1 | 	sub	local01, #1
2a47c     A7 1E 62 FC | 	wrlong	local01, fp
2a480     2C 4E 85 F1 | 	sub	fp, #44
2a484     A8 FF 9F FD | 	jmp	#LR__4357
2a488                 | LR__4358
2a488                 | LR__4359
2a488     04 4E 05 F1 | 	add	fp, #4
2a48c     A7 12 02 FB | 	rdlong	arg01, fp
2a490     04 4E 85 F1 | 	sub	fp, #4
2a494     20 12 06 F1 | 	add	arg01, #32
2a498     20 14 06 F6 | 	mov	arg02, #32
2a49c     0B 16 06 F6 | 	mov	arg03, #11
2a4a0     09 37 02 F6 | 	mov	local13, arg01
2a4a4     98 00 A0 FD | 	call	#\builtin_bytefill_
2a4a8     1B FB 01 F6 | 	mov	result1, local13
2a4ac     0C 4E 05 F1 | 	add	fp, #12
2a4b0     A7 00 48 FC | 	wrbyte	#0, fp
2a4b4     A7 2A C2 FA | 	rdbyte	local07, fp
2a4b8     14 4E 05 F1 | 	add	fp, #20
2a4bc     A7 2A 62 FC | 	wrlong	local07, fp
2a4c0     04 4E 05 F1 | 	add	fp, #4
2a4c4     A7 10 68 FC | 	wrlong	#8, fp
2a4c8     24 4E 85 F1 | 	sub	fp, #36
2a4cc                 | ' 
2a4cc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a4cc                 | ' 	i = b = 0; ni = 8;
2a4cc                 | ' 	for (;;) {
2a4cc                 | LR__4360
2a4cc     18 4E 05 F1 | 	add	fp, #24
2a4d0     A7 22 02 FB | 	rdlong	local03, fp
2a4d4     10 4E 05 F1 | 	add	fp, #16
2a4d8     A7 2E 02 FB | 	rdlong	local09, fp
2a4dc     17 25 02 F6 | 	mov	local04, local09
2a4e0     01 24 06 F1 | 	add	local04, #1
2a4e4     A7 24 62 FC | 	wrlong	local04, fp
2a4e8     01 2E 66 F0 | 	shl	local09, #1
2a4ec     11 2F 02 F1 | 	add	local09, local03
2a4f0     17 29 E2 FA | 	rdword	local06, local09
2a4f4     14 4E 85 F1 | 	sub	fp, #20
2a4f8     A7 28 52 FC | 	wrword	local06, fp
2a4fc     A7 2A EA FA | 	rdword	local07, fp wz
2a500     14 4E 85 F1 | 	sub	fp, #20
2a504     74 03 90 AD |  if_e	jmp	#LR__4376
2a508     14 4E 05 F1 | 	add	fp, #20
2a50c     A7 2A E2 FA | 	rdword	local07, fp
2a510     14 4E 85 F1 | 	sub	fp, #20
2a514     20 2A 0E F2 | 	cmp	local07, #32 wz
2a518     30 00 90 AD |  if_e	jmp	#LR__4361
2a51c     14 4E 05 F1 | 	add	fp, #20
2a520     A7 1E E2 FA | 	rdword	local01, fp
2a524     14 4E 85 F1 | 	sub	fp, #20
2a528     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a52c     34 00 90 5D |  if_ne	jmp	#LR__4362
2a530     28 4E 05 F1 | 	add	fp, #40
2a534     A7 24 02 FB | 	rdlong	local04, fp
2a538     04 4E 05 F1 | 	add	fp, #4
2a53c     A7 30 02 FB | 	rdlong	local10, fp
2a540     2C 4E 85 F1 | 	sub	fp, #44
2a544     18 25 0A F2 | 	cmp	local04, local10 wz
2a548     18 00 90 AD |  if_e	jmp	#LR__4362
2a54c                 | LR__4361
2a54c     10 4E 05 F1 | 	add	fp, #16
2a550     A7 2A C2 FA | 	rdbyte	local07, fp
2a554     03 2A 46 F5 | 	or	local07, #3
2a558     A7 2A 42 FC | 	wrbyte	local07, fp
2a55c     10 4E 85 F1 | 	sub	fp, #16
2a560                 | ' 			cf |=  0x01  |  0x02 ;
2a560                 | ' 			continue;
2a560     68 FF 9F FD | 	jmp	#LR__4360
2a564                 | LR__4362
2a564     20 4E 05 F1 | 	add	fp, #32
2a568     A7 2A 02 FB | 	rdlong	local07, fp
2a56c     04 4E 05 F1 | 	add	fp, #4
2a570     A7 1E 02 FB | 	rdlong	local01, fp
2a574     24 4E 85 F1 | 	sub	fp, #36
2a578     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a57c     1C 00 90 3D |  if_ae	jmp	#LR__4363
2a580     28 4E 05 F1 | 	add	fp, #40
2a584     A7 2C 02 FB | 	rdlong	local08, fp
2a588     04 4E 05 F1 | 	add	fp, #4
2a58c     A7 30 02 FB | 	rdlong	local10, fp
2a590     2C 4E 85 F1 | 	sub	fp, #44
2a594     18 2D 0A F2 | 	cmp	local08, local10 wz
2a598     B0 00 90 5D |  if_ne	jmp	#LR__4365
2a59c                 | LR__4363
2a59c     24 4E 05 F1 | 	add	fp, #36
2a5a0     A7 2A 02 FB | 	rdlong	local07, fp
2a5a4     24 4E 85 F1 | 	sub	fp, #36
2a5a8     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a5ac     18 00 90 5D |  if_ne	jmp	#LR__4364
2a5b0     10 4E 05 F1 | 	add	fp, #16
2a5b4     A7 2A C2 FA | 	rdbyte	local07, fp
2a5b8     03 2A 46 F5 | 	or	local07, #3
2a5bc     A7 2A 42 FC | 	wrbyte	local07, fp
2a5c0     10 4E 85 F1 | 	sub	fp, #16
2a5c4                 | ' 				cf |=  0x01  |  0x02 ;
2a5c4                 | ' 				break;
2a5c4     B4 02 90 FD | 	jmp	#LR__4376
2a5c8                 | LR__4364
2a5c8     28 4E 05 F1 | 	add	fp, #40
2a5cc     A7 2A 02 FB | 	rdlong	local07, fp
2a5d0     04 4E 05 F1 | 	add	fp, #4
2a5d4     A7 1E 02 FB | 	rdlong	local01, fp
2a5d8     2C 4E 85 F1 | 	sub	fp, #44
2a5dc     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a5e0     10 4E 05 51 |  if_ne	add	fp, #16
2a5e4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a5e8     03 2A 46 55 |  if_ne	or	local07, #3
2a5ec     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a5f0     10 4E 85 51 |  if_ne	sub	fp, #16
2a5f4     28 4E 05 F1 | 	add	fp, #40
2a5f8     A7 2A 02 FB | 	rdlong	local07, fp
2a5fc     04 4E 05 F1 | 	add	fp, #4
2a600     A7 20 02 FB | 	rdlong	local02, fp
2a604     2C 4E 85 F1 | 	sub	fp, #44
2a608     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a60c     6C 02 90 1D |  if_a	jmp	#LR__4376
2a610     2C 4E 05 F1 | 	add	fp, #44
2a614     A7 2A 02 FB | 	rdlong	local07, fp
2a618     04 4E 85 F1 | 	sub	fp, #4
2a61c     A7 2A 62 FC | 	wrlong	local07, fp
2a620     08 4E 85 F1 | 	sub	fp, #8
2a624     A7 10 68 FC | 	wrlong	#8, fp
2a628     04 4E 05 F1 | 	add	fp, #4
2a62c     A7 16 68 FC | 	wrlong	#11, fp
2a630     18 4E 85 F1 | 	sub	fp, #24
2a634     A7 32 C2 FA | 	rdbyte	local11, fp
2a638     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a63c     02 2A 66 F0 | 	shl	local07, #2
2a640     A7 2A 42 FC | 	wrbyte	local07, fp
2a644     0C 4E 85 F1 | 	sub	fp, #12
2a648                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a648                 | ' 			continue;
2a648     80 FE 9F FD | 	jmp	#LR__4360
2a64c                 | LR__4365
2a64c     14 4E 05 F1 | 	add	fp, #20
2a650     A7 2A E2 FA | 	rdword	local07, fp
2a654     14 4E 85 F1 | 	sub	fp, #20
2a658     80 2A 16 F2 | 	cmp	local07, #128 wc
2a65c     6C 00 90 CD |  if_b	jmp	#LR__4367
2a660     10 4E 05 F1 | 	add	fp, #16
2a664     A7 2A C2 FA | 	rdbyte	local07, fp
2a668     02 2A 46 F5 | 	or	local07, #2
2a66c     A7 2A 42 FC | 	wrbyte	local07, fp
2a670     04 4E 05 F1 | 	add	fp, #4
2a674     A7 12 E2 FA | 	rdword	arg01, fp
2a678     14 4E 85 F1 | 	sub	fp, #20
2a67c     01 00 00 FF 
2a680     52 15 06 F6 | 	mov	arg02, ##850
2a684     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a688     14 4E 05 F1 | 	add	fp, #20
2a68c     A7 FA 51 FC | 	wrword	result1, fp
2a690     A7 2A E2 FA | 	rdword	local07, fp
2a694     14 4E 85 F1 | 	sub	fp, #20
2a698     80 2A CE F7 | 	test	local07, #128 wz
2a69c     2C 00 90 AD |  if_e	jmp	#LR__4366
2a6a0     14 4E 05 F1 | 	add	fp, #20
2a6a4     A7 20 E2 FA | 	rdword	local02, fp
2a6a8     7F 20 06 F5 | 	and	local02, #127
2a6ac     01 00 00 FF 
2a6b0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a6b4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a6b8     10 2B C2 FA | 	rdbyte	local07, local02
2a6bc     A7 2A 52 FC | 	wrword	local07, fp
2a6c0     14 4E 85 F1 | 	sub	fp, #20
2a6c4     01 00 00 FF 
2a6c8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a6cc                 | LR__4366
2a6cc                 | LR__4367
2a6cc     14 4E 05 F1 | 	add	fp, #20
2a6d0     A7 2A E2 FA | 	rdword	local07, fp
2a6d4     14 4E 85 F1 | 	sub	fp, #20
2a6d8     00 2B 16 F2 | 	cmp	local07, #256 wc
2a6dc     88 00 90 CD |  if_b	jmp	#LR__4369
2a6e0     24 4E 05 F1 | 	add	fp, #36
2a6e4     A7 2A 02 FB | 	rdlong	local07, fp
2a6e8     01 2A 86 F1 | 	sub	local07, #1
2a6ec     04 4E 85 F1 | 	sub	fp, #4
2a6f0     A7 20 02 FB | 	rdlong	local02, fp
2a6f4     20 4E 85 F1 | 	sub	fp, #32
2a6f8     15 21 12 F2 | 	cmp	local02, local07 wc
2a6fc     2C 00 90 CD |  if_b	jmp	#LR__4368
2a700     10 4E 05 F1 | 	add	fp, #16
2a704     A7 32 C2 FA | 	rdbyte	local11, fp
2a708     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a70c     03 2A 46 F5 | 	or	local07, #3
2a710     A7 2A 42 FC | 	wrbyte	local07, fp
2a714     14 4E 05 F1 | 	add	fp, #20
2a718     A7 2A 02 FB | 	rdlong	local07, fp
2a71c     04 4E 85 F1 | 	sub	fp, #4
2a720     A7 2A 62 FC | 	wrlong	local07, fp
2a724     20 4E 85 F1 | 	sub	fp, #32
2a728                 | ' 				cf |=  0x01  |  0x02 ;
2a728                 | ' 				i = ni; continue;
2a728     A0 FD 9F FD | 	jmp	#LR__4360
2a72c                 | LR__4368
2a72c     04 4E 05 F1 | 	add	fp, #4
2a730     A7 2E 02 FB | 	rdlong	local09, fp
2a734     1C 4E 05 F1 | 	add	fp, #28
2a738     A7 30 02 FB | 	rdlong	local10, fp
2a73c     18 25 02 F6 | 	mov	local04, local10
2a740     01 24 06 F1 | 	add	local04, #1
2a744     A7 24 62 FC | 	wrlong	local04, fp
2a748     20 2E 06 F1 | 	add	local09, #32
2a74c     17 31 02 F1 | 	add	local10, local09
2a750     0C 4E 85 F1 | 	sub	fp, #12
2a754     A7 22 E2 FA | 	rdword	local03, fp
2a758     14 4E 85 F1 | 	sub	fp, #20
2a75c     08 22 46 F0 | 	shr	local03, #8
2a760     18 23 42 FC | 	wrbyte	local03, local10
2a764     D4 00 90 FD | 	jmp	#LR__4375
2a768                 | LR__4369
2a768     14 4E 05 F1 | 	add	fp, #20
2a76c     A7 2A EA FA | 	rdword	local07, fp wz
2a770     14 4E 85 F1 | 	sub	fp, #20
2a774     20 00 90 AD |  if_e	jmp	#LR__4370
2a778     80 01 00 FF 
2a77c     09 13 06 F6 | 	mov	arg01, ##@LR__5003
2a780     14 4E 05 F1 | 	add	fp, #20
2a784     A7 14 E2 FA | 	rdword	arg02, fp
2a788     14 4E 85 F1 | 	sub	fp, #20
2a78c     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a790     00 FA 0D F2 | 	cmp	result1, #0 wz
2a794     20 00 90 AD |  if_e	jmp	#LR__4371
2a798                 | LR__4370
2a798     14 4E 05 F1 | 	add	fp, #20
2a79c     A7 BE 58 FC | 	wrword	#95, fp
2a7a0     04 4E 85 F1 | 	sub	fp, #4
2a7a4     A7 2A C2 FA | 	rdbyte	local07, fp
2a7a8     03 2A 46 F5 | 	or	local07, #3
2a7ac     A7 2A 42 FC | 	wrbyte	local07, fp
2a7b0     10 4E 85 F1 | 	sub	fp, #16
2a7b4     84 00 90 FD | 	jmp	#LR__4374
2a7b8                 | LR__4371
2a7b8     14 4E 05 F1 | 	add	fp, #20
2a7bc     A7 2A E2 FA | 	rdword	local07, fp
2a7c0     14 4E 85 F1 | 	sub	fp, #20
2a7c4     41 2A 16 F2 | 	cmp	local07, #65 wc
2a7c8     24 00 90 CD |  if_b	jmp	#LR__4372
2a7cc     14 4E 05 F1 | 	add	fp, #20
2a7d0     A7 1E E2 FA | 	rdword	local01, fp
2a7d4     14 4E 85 F1 | 	sub	fp, #20
2a7d8     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a7dc     0C 4E 05 C1 |  if_b	add	fp, #12
2a7e0     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a7e4     02 2A 46 C5 |  if_b	or	local07, #2
2a7e8     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a7ec     0C 4E 85 C1 |  if_b	sub	fp, #12
2a7f0                 | LR__4372
2a7f0     14 4E 05 F1 | 	add	fp, #20
2a7f4     A7 2A E2 FA | 	rdword	local07, fp
2a7f8     14 4E 85 F1 | 	sub	fp, #20
2a7fc     61 2A 16 F2 | 	cmp	local07, #97 wc
2a800     38 00 90 CD |  if_b	jmp	#LR__4373
2a804     14 4E 05 F1 | 	add	fp, #20
2a808     A7 1E E2 FA | 	rdword	local01, fp
2a80c     14 4E 85 F1 | 	sub	fp, #20
2a810     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a814     24 00 90 3D |  if_ae	jmp	#LR__4373
2a818     0C 4E 05 F1 | 	add	fp, #12
2a81c     A7 2A C2 FA | 	rdbyte	local07, fp
2a820     01 2A 46 F5 | 	or	local07, #1
2a824     A7 2A 42 FC | 	wrbyte	local07, fp
2a828     08 4E 05 F1 | 	add	fp, #8
2a82c     A7 2A E2 FA | 	rdword	local07, fp
2a830     20 2A 86 F1 | 	sub	local07, #32
2a834     A7 2A 52 FC | 	wrword	local07, fp
2a838     14 4E 85 F1 | 	sub	fp, #20
2a83c                 | LR__4373
2a83c                 | LR__4374
2a83c                 | LR__4375
2a83c     04 4E 05 F1 | 	add	fp, #4
2a840     A7 32 02 FB | 	rdlong	local11, fp
2a844     19 2F 02 F6 | 	mov	local09, local11
2a848     1C 4E 05 F1 | 	add	fp, #28
2a84c     A7 20 02 FB | 	rdlong	local02, fp
2a850     10 25 02 F6 | 	mov	local04, local02
2a854     01 24 06 F1 | 	add	local04, #1
2a858     A7 24 62 FC | 	wrlong	local04, fp
2a85c     10 31 02 F6 | 	mov	local10, local02
2a860     20 2E 06 F1 | 	add	local09, #32
2a864     17 31 02 F1 | 	add	local10, local09
2a868     0C 4E 85 F1 | 	sub	fp, #12
2a86c     A7 22 E2 FA | 	rdword	local03, fp
2a870     14 4E 85 F1 | 	sub	fp, #20
2a874     18 23 42 FC | 	wrbyte	local03, local10
2a878     50 FC 9F FD | 	jmp	#LR__4360
2a87c                 | LR__4376
2a87c     04 4E 05 F1 | 	add	fp, #4
2a880     A7 32 02 FB | 	rdlong	local11, fp
2a884     04 4E 85 F1 | 	sub	fp, #4
2a888     20 32 06 F1 | 	add	local11, #32
2a88c     19 2B C2 FA | 	rdbyte	local07, local11
2a890     E5 2A 0E F2 | 	cmp	local07, #229 wz
2a894     04 4E 05 A1 |  if_e	add	fp, #4
2a898     A7 2A 02 AB |  if_e	rdlong	local07, fp
2a89c     04 4E 85 A1 |  if_e	sub	fp, #4
2a8a0     20 2A 06 A1 |  if_e	add	local07, #32
2a8a4     15 0B 48 AC |  if_e	wrbyte	#5, local07
2a8a8     24 4E 05 F1 | 	add	fp, #36
2a8ac     A7 2A 02 FB | 	rdlong	local07, fp
2a8b0     24 4E 85 F1 | 	sub	fp, #36
2a8b4     08 2A 0E F2 | 	cmp	local07, #8 wz
2a8b8     0C 4E 05 A1 |  if_e	add	fp, #12
2a8bc     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2a8c0     02 2A 66 A0 |  if_e	shl	local07, #2
2a8c4     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2a8c8     0C 4E 85 A1 |  if_e	sub	fp, #12
2a8cc     0C 4E 05 F1 | 	add	fp, #12
2a8d0     A7 2A C2 FA | 	rdbyte	local07, fp
2a8d4     0C 4E 85 F1 | 	sub	fp, #12
2a8d8     0C 2A 06 F5 | 	and	local07, #12
2a8dc     0C 2A 0E F2 | 	cmp	local07, #12 wz
2a8e0     18 00 90 AD |  if_e	jmp	#LR__4377
2a8e4     0C 4E 05 F1 | 	add	fp, #12
2a8e8     A7 1E C2 FA | 	rdbyte	local01, fp
2a8ec     0C 4E 85 F1 | 	sub	fp, #12
2a8f0     03 1E 06 F5 | 	and	local01, #3
2a8f4     03 1E 0E F2 | 	cmp	local01, #3 wz
2a8f8     14 00 90 5D |  if_ne	jmp	#LR__4378
2a8fc                 | LR__4377
2a8fc     10 4E 05 F1 | 	add	fp, #16
2a900     A7 2A C2 FA | 	rdbyte	local07, fp
2a904     02 2A 46 F5 | 	or	local07, #2
2a908     A7 2A 42 FC | 	wrbyte	local07, fp
2a90c     10 4E 85 F1 | 	sub	fp, #16
2a910                 | LR__4378
2a910     10 4E 05 F1 | 	add	fp, #16
2a914     A7 2A C2 FA | 	rdbyte	local07, fp
2a918     10 4E 85 F1 | 	sub	fp, #16
2a91c     02 2A CE F7 | 	test	local07, #2 wz
2a920     48 00 90 5D |  if_ne	jmp	#LR__4379
2a924     0C 4E 05 F1 | 	add	fp, #12
2a928     A7 2A C2 FA | 	rdbyte	local07, fp
2a92c     0C 4E 85 F1 | 	sub	fp, #12
2a930     01 2A CE F7 | 	test	local07, #1 wz
2a934     10 4E 05 51 |  if_ne	add	fp, #16
2a938     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a93c     10 2A 46 55 |  if_ne	or	local07, #16
2a940     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a944     10 4E 85 51 |  if_ne	sub	fp, #16
2a948     0C 4E 05 F1 | 	add	fp, #12
2a94c     A7 2A C2 FA | 	rdbyte	local07, fp
2a950     0C 4E 85 F1 | 	sub	fp, #12
2a954     04 2A CE F7 | 	test	local07, #4 wz
2a958     10 4E 05 51 |  if_ne	add	fp, #16
2a95c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a960     08 2A 46 55 |  if_ne	or	local07, #8
2a964     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a968     10 4E 85 51 |  if_ne	sub	fp, #16
2a96c                 | LR__4379
2a96c     04 4E 05 F1 | 	add	fp, #4
2a970     A7 2A 02 FB | 	rdlong	local07, fp
2a974     0C 4E 05 F1 | 	add	fp, #12
2a978     A7 1E C2 FA | 	rdbyte	local01, fp
2a97c     10 4E 85 F1 | 	sub	fp, #16
2a980     2B 2A 06 F1 | 	add	local07, #43
2a984     15 1F 42 FC | 	wrbyte	local01, local07
2a988                 | ' 	}
2a988                 | ' 
2a988                 | ' 	dp->fn[ 11 ] = cf;
2a988                 | ' 
2a988                 | ' 	return FR_OK;
2a988     00 FA 05 F6 | 	mov	result1, #0
2a98c                 | LR__4380
2a98c     A7 F0 03 F6 | 	mov	ptra, fp
2a990     B2 00 A0 FD | 	call	#popregs_
2a994                 | _fatfs_cc_create_name_ret
2a994     2D 00 64 FD | 	ret
2a998                 | 
2a998                 | _fatfs_cc_follow_path
2a998     02 4A 05 F6 | 	mov	COUNT_, #2
2a99c     A8 00 A0 FD | 	call	#pushregs_
2a9a0     18 F0 07 F1 | 	add	ptra, #24
2a9a4     04 4E 05 F1 | 	add	fp, #4
2a9a8     A7 12 62 FC | 	wrlong	arg01, fp
2a9ac     04 4E 05 F1 | 	add	fp, #4
2a9b0     A7 14 62 FC | 	wrlong	arg02, fp
2a9b4     04 4E 85 F1 | 	sub	fp, #4
2a9b8     A7 FA 01 FB | 	rdlong	result1, fp
2a9bc     FD 1E 02 FB | 	rdlong	local01, result1
2a9c0     10 4E 05 F1 | 	add	fp, #16
2a9c4     A7 1E 62 FC | 	wrlong	local01, fp
2a9c8     14 4E 85 F1 | 	sub	fp, #20
2a9cc     97 24 48 FB | 	callpa	#(@LR__4392-@LR__4390)>>2,fcache_load_ptr_
2a9d0                 | ' )
2a9d0                 | ' {
2a9d0                 | ' 	FRESULT res;
2a9d0                 | ' 	BYTE ns;
2a9d0                 | ' 	FATFS *fs = dp->obj.fs;
2a9d0                 | ' #line 3034 "ff.c"
2a9d0                 | ' 	{
2a9d0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2a9d0                 | LR__4390
2a9d0     08 4E 05 F1 | 	add	fp, #8
2a9d4     A7 1E 02 FB | 	rdlong	local01, fp
2a9d8     08 4E 85 F1 | 	sub	fp, #8
2a9dc     0F 1F C2 FA | 	rdbyte	local01, local01
2a9e0     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a9e4     18 00 90 AD |  if_e	jmp	#LR__4391
2a9e8     08 4E 05 F1 | 	add	fp, #8
2a9ec     A7 1E 02 FB | 	rdlong	local01, fp
2a9f0     08 4E 85 F1 | 	sub	fp, #8
2a9f4     0F 1F C2 FA | 	rdbyte	local01, local01
2a9f8     5C 1E 0E F2 | 	cmp	local01, #92 wz
2a9fc     18 00 90 5D |  if_ne	jmp	#LR__4393
2aa00                 | LR__4391
2aa00     08 4E 05 F1 | 	add	fp, #8
2aa04     A7 1E 02 FB | 	rdlong	local01, fp
2aa08     01 1E 06 F1 | 	add	local01, #1
2aa0c     A7 1E 62 FC | 	wrlong	local01, fp
2aa10     08 4E 85 F1 | 	sub	fp, #8
2aa14     B8 FF 9F FD | 	jmp	#LR__4390
2aa18                 | LR__4392
2aa18                 | LR__4393
2aa18     04 4E 05 F1 | 	add	fp, #4
2aa1c     A7 1E 02 FB | 	rdlong	local01, fp
2aa20     08 1E 06 F1 | 	add	local01, #8
2aa24     0F 01 68 FC | 	wrlong	#0, local01
2aa28     04 4E 05 F1 | 	add	fp, #4
2aa2c     A7 1E 02 FB | 	rdlong	local01, fp
2aa30     08 4E 85 F1 | 	sub	fp, #8
2aa34     0F 1F C2 FA | 	rdbyte	local01, local01
2aa38     20 1E 16 F2 | 	cmp	local01, #32 wc
2aa3c     30 00 90 3D |  if_ae	jmp	#LR__4394
2aa40     04 4E 05 F1 | 	add	fp, #4
2aa44     A7 1E 02 FB | 	rdlong	local01, fp
2aa48     2B 1E 06 F1 | 	add	local01, #43
2aa4c     0F 01 49 FC | 	wrbyte	#128, local01
2aa50     A7 12 02 FB | 	rdlong	arg01, fp
2aa54     04 4E 85 F1 | 	sub	fp, #4
2aa58     00 14 06 F6 | 	mov	arg02, #0
2aa5c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2aa60     0C 4E 05 F1 | 	add	fp, #12
2aa64     A7 FA 61 FC | 	wrlong	result1, fp
2aa68     0C 4E 85 F1 | 	sub	fp, #12
2aa6c     1C 01 90 FD | 	jmp	#LR__4398
2aa70                 | LR__4394
2aa70                 | ' 		for (;;) {
2aa70                 | LR__4395
2aa70     04 4E 05 F1 | 	add	fp, #4
2aa74     A7 12 02 FB | 	rdlong	arg01, fp
2aa78     04 4E 05 F1 | 	add	fp, #4
2aa7c     A7 14 02 F6 | 	mov	arg02, fp
2aa80     08 4E 85 F1 | 	sub	fp, #8
2aa84     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2aa88     0C 4E 05 F1 | 	add	fp, #12
2aa8c     A7 FA 61 FC | 	wrlong	result1, fp
2aa90     00 FA 4D F2 | 	cmps	result1, #0 wz
2aa94     0C 4E 85 F1 | 	sub	fp, #12
2aa98     F0 00 90 5D |  if_ne	jmp	#LR__4397
2aa9c     04 4E 05 F1 | 	add	fp, #4
2aaa0     A7 12 02 FB | 	rdlong	arg01, fp
2aaa4     04 4E 85 F1 | 	sub	fp, #4
2aaa8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2aaac     0C 4E 05 F1 | 	add	fp, #12
2aab0     A7 FA 61 FC | 	wrlong	result1, fp
2aab4     08 4E 85 F1 | 	sub	fp, #8
2aab8     A7 1E 02 FB | 	rdlong	local01, fp
2aabc     2B 1E 06 F1 | 	add	local01, #43
2aac0     0F 1F C2 FA | 	rdbyte	local01, local01
2aac4     0C 4E 05 F1 | 	add	fp, #12
2aac8     A7 1E 42 FC | 	wrbyte	local01, fp
2aacc     04 4E 85 F1 | 	sub	fp, #4
2aad0     A7 1E 0A FB | 	rdlong	local01, fp wz
2aad4     0C 4E 85 F1 | 	sub	fp, #12
2aad8     34 00 90 AD |  if_e	jmp	#LR__4396
2aadc     0C 4E 05 F1 | 	add	fp, #12
2aae0     A7 1E 02 FB | 	rdlong	local01, fp
2aae4     0C 4E 85 F1 | 	sub	fp, #12
2aae8     04 1E 0E F2 | 	cmp	local01, #4 wz
2aaec     9C 00 90 5D |  if_ne	jmp	#LR__4397
2aaf0     10 4E 05 F1 | 	add	fp, #16
2aaf4     A7 1E C2 FA | 	rdbyte	local01, fp
2aaf8     10 4E 85 F1 | 	sub	fp, #16
2aafc     04 1E CE F7 | 	test	local01, #4 wz
2ab00     0C 4E 05 A1 |  if_e	add	fp, #12
2ab04     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ab08     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab0c                 | ' 					}
2ab0c                 | ' 				}
2ab0c                 | ' 				break;
2ab0c     7C 00 90 FD | 	jmp	#LR__4397
2ab10                 | LR__4396
2ab10     10 4E 05 F1 | 	add	fp, #16
2ab14     A7 1E C2 FA | 	rdbyte	local01, fp
2ab18     10 4E 85 F1 | 	sub	fp, #16
2ab1c     04 1E CE F7 | 	test	local01, #4 wz
2ab20     68 00 90 5D |  if_ne	jmp	#LR__4397
2ab24     04 4E 05 F1 | 	add	fp, #4
2ab28     A7 1E 02 FB | 	rdlong	local01, fp
2ab2c     04 4E 85 F1 | 	sub	fp, #4
2ab30     06 1E 06 F1 | 	add	local01, #6
2ab34     0F 1F C2 FA | 	rdbyte	local01, local01
2ab38     10 1E CE F7 | 	test	local01, #16 wz
2ab3c     0C 4E 05 A1 |  if_e	add	fp, #12
2ab40     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ab44     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab48                 | ' 				res = FR_NO_PATH; break;
2ab48     40 00 90 AD |  if_e	jmp	#LR__4397
2ab4c     04 4E 05 F1 | 	add	fp, #4
2ab50     A7 20 02 FB | 	rdlong	local02, fp
2ab54     10 1F 02 F6 | 	mov	local01, local02
2ab58     10 4E 05 F1 | 	add	fp, #16
2ab5c     A7 14 02 FB | 	rdlong	arg02, fp
2ab60     0A 13 02 F6 | 	mov	arg01, arg02
2ab64     34 14 06 F1 | 	add	arg02, #52
2ab68     14 4E 85 F1 | 	sub	fp, #20
2ab6c     10 20 06 F1 | 	add	local02, #16
2ab70     10 21 02 FB | 	rdlong	local02, local02
2ab74     FF 21 06 F5 | 	and	local02, #511
2ab78     10 15 02 F1 | 	add	arg02, local02
2ab7c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ab80     08 1E 06 F1 | 	add	local01, #8
2ab84     0F FB 61 FC | 	wrlong	result1, local01
2ab88     E4 FE 9F FD | 	jmp	#LR__4395
2ab8c                 | LR__4397
2ab8c                 | LR__4398
2ab8c                 | ' 			}
2ab8c                 | ' #line 3090 "ff.c"
2ab8c                 | ' 			{
2ab8c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ab8c                 | ' 			}
2ab8c                 | ' 		}
2ab8c                 | ' 	}
2ab8c                 | ' 
2ab8c                 | ' 	return res;
2ab8c     0C 4E 05 F1 | 	add	fp, #12
2ab90     A7 FA 01 FB | 	rdlong	result1, fp
2ab94     0C 4E 85 F1 | 	sub	fp, #12
2ab98     A7 F0 03 F6 | 	mov	ptra, fp
2ab9c     B2 00 A0 FD | 	call	#popregs_
2aba0                 | _fatfs_cc_follow_path_ret
2aba0     2D 00 64 FD | 	ret
2aba4                 | 
2aba4                 | _fatfs_cc_get_ldnumber
2aba4     01 00 66 F6 | 	neg	_var01, #1
2aba8     09 03 0A FB | 	rdlong	_var02, arg01 wz
2abac     01 05 02 F6 | 	mov	_var03, _var02
2abb0     01 FA 65 A6 |  if_e	neg	result1, #1
2abb4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2abb8     97 10 48 FB | 	callpa	#(@LR__4401-@LR__4400)>>2,fcache_load_ptr_
2abbc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2abbc                 | LR__4400
2abbc     02 07 C2 FA | 	rdbyte	_var04, _var03
2abc0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2abc4     20 FA 15 F2 | 	cmp	result1, #32 wc
2abc8     01 04 06 F1 | 	add	_var03, #1
2abcc     03 09 02 36 |  if_ae	mov	_var05, _var04
2abd0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2abd4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2abd8     E0 FF 9F 1D |  if_a	jmp	#LR__4400
2abdc                 | LR__4401
2abdc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2abe0     3A 06 0E F2 | 	cmp	_var04, #58 wz
2abe4     40 00 90 5D |  if_ne	jmp	#LR__4403
2abe8     01 0A 06 F6 | 	mov	_var06, #1
2abec     01 09 C2 FA | 	rdbyte	_var05, _var02
2abf0     30 08 16 F2 | 	cmp	_var05, #48 wc
2abf4     1C 00 90 CD |  if_b	jmp	#LR__4402
2abf8     01 09 C2 FA | 	rdbyte	_var05, _var02
2abfc     3A 08 16 F2 | 	cmp	_var05, #58 wc
2ac00     01 0D 02 C6 |  if_b	mov	_var07, _var02
2ac04     02 0C 06 C1 |  if_b	add	_var07, #2
2ac08     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ac0c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2ac10     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2ac14                 | LR__4402
2ac14     01 0A 56 F2 | 	cmps	_var06, #1 wc
2ac18     05 01 02 C6 |  if_b	mov	_var01, _var06
2ac1c     09 05 62 CC |  if_b	wrlong	_var03, arg01
2ac20                 | ' 			vol = i;
2ac20                 | ' 			*path = tt;
2ac20                 | ' 		}
2ac20                 | ' 		return vol;
2ac20     00 FB 01 F6 | 	mov	result1, _var01
2ac24     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ac28                 | LR__4403
2ac28                 | ' 	}
2ac28                 | ' #line 3170 "ff.c"
2ac28                 | ' 	vol = 0;
2ac28                 | ' 
2ac28                 | ' 	return vol;
2ac28     00 FA 05 F6 | 	mov	result1, #0
2ac2c                 | _fatfs_cc_get_ldnumber_ret
2ac2c     2D 00 64 FD | 	ret
2ac30                 | 
2ac30                 | _fatfs_cc_check_fs
2ac30     04 4A 05 F6 | 	mov	COUNT_, #4
2ac34     A8 00 A0 FD | 	call	#pushregs_
2ac38     09 1F 02 F6 | 	mov	local01, arg01
2ac3c     03 1E 06 F1 | 	add	local01, #3
2ac40     0F 01 48 FC | 	wrbyte	#0, local01
2ac44     2D 1E 06 F1 | 	add	local01, #45
2ac48     FF FF FF FF 
2ac4c     0F FF 6B FC | 	wrlong	##-1, local01
2ac50     30 1E 86 F1 | 	sub	local01, #48
2ac54     0F 13 02 F6 | 	mov	arg01, local01
2ac58     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ac5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac60     04 FA 05 56 |  if_ne	mov	result1, #4
2ac64     94 01 90 5D |  if_ne	jmp	#LR__4414
2ac68     34 1E 06 F1 | 	add	local01, #52
2ac6c     0F 13 02 F6 | 	mov	arg01, local01
2ac70     FE 13 06 F1 | 	add	arg01, #510
2ac74                 | ' {
2ac74                 | ' 
2ac74                 | ' 	return *((WORD*)ptr);
2ac74     09 21 E2 FA | 	rdword	local02, arg01
2ac78     0F 23 C2 FA | 	rdbyte	local03, local01
2ac7c     34 1E 86 F1 | 	sub	local01, #52
2ac80     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ac84     EB 24 0E F2 | 	cmp	local04, #235 wz
2ac88     11 17 02 56 |  if_ne	mov	arg03, local03
2ac8c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ac90     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2ac94     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2ac98     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2ac9c     44 01 90 5D |  if_ne	jmp	#LR__4413
2aca0     10 25 32 F9 | 	getword	local04, local02, #0
2aca4     55 00 00 FF 
2aca8     55 24 0E F2 | 	cmp	local04, ##43605 wz
2acac     2C 00 90 5D |  if_ne	jmp	#LR__4410
2acb0     34 1E 06 F1 | 	add	local01, #52
2acb4     0F 13 02 F6 | 	mov	arg01, local01
2acb8     34 1E 86 F1 | 	sub	local01, #52
2acbc     52 12 06 F1 | 	add	arg01, #82
2acc0     80 01 00 FF 
2acc4     10 15 06 F6 | 	mov	arg02, ##@LR__5004
2acc8     08 16 06 F6 | 	mov	arg03, #8
2accc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2acd0     00 FA 0D F2 | 	cmp	result1, #0 wz
2acd4                 | ' 			return 0;
2acd4     00 FA 05 A6 |  if_e	mov	result1, #0
2acd8     20 01 90 AD |  if_e	jmp	#LR__4414
2acdc                 | LR__4410
2acdc     34 1E 06 F1 | 	add	local01, #52
2ace0     0F 13 02 F6 | 	mov	arg01, local01
2ace4     0B 12 06 F1 | 	add	arg01, #11
2ace8                 | ' {
2ace8                 | ' 
2ace8                 | ' 	return *((WORD*)ptr);
2ace8     09 FB E1 FA | 	rdword	result1, arg01
2acec     0D 1E 06 F1 | 	add	local01, #13
2acf0     0F 23 C2 FA | 	rdbyte	local03, local01
2acf4     41 1E 86 F1 | 	sub	local01, #65
2acf8     FD 24 32 F9 | 	getword	local04, result1, #0
2acfc     FD 14 32 F9 | 	getword	arg02, result1, #0
2ad00     01 14 86 F1 | 	sub	arg02, #1
2ad04     0A 25 CA F7 | 	test	local04, arg02 wz
2ad08     D8 00 90 5D |  if_ne	jmp	#LR__4412
2ad0c     FD 14 32 F9 | 	getword	arg02, result1, #0
2ad10     01 00 00 FF 
2ad14     00 14 16 F2 | 	cmp	arg02, ##512 wc
2ad18     C8 00 90 CD |  if_b	jmp	#LR__4412
2ad1c     FD 14 32 F9 | 	getword	arg02, result1, #0
2ad20     01 00 00 FF 
2ad24     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ad28     B8 00 90 3D |  if_ae	jmp	#LR__4412
2ad2c     11 13 02 F6 | 	mov	arg01, local03
2ad30     07 12 4E F7 | 	zerox	arg01, #7 wz
2ad34     AC 00 90 AD |  if_e	jmp	#LR__4412
2ad38     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2ad3c     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ad40     01 22 86 F1 | 	sub	local03, #1
2ad44     11 13 CA F7 | 	test	arg01, local03 wz
2ad48     98 00 90 5D |  if_ne	jmp	#LR__4412
2ad4c     34 1E 06 F1 | 	add	local01, #52
2ad50     0F 13 02 F6 | 	mov	arg01, local01
2ad54     34 1E 86 F1 | 	sub	local01, #52
2ad58     0E 12 06 F1 | 	add	arg01, #14
2ad5c                 | ' {
2ad5c                 | ' 
2ad5c                 | ' 	return *((WORD*)ptr);
2ad5c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ad60     80 00 90 AD |  if_e	jmp	#LR__4412
2ad64     44 1E 06 F1 | 	add	local01, #68
2ad68     0F 13 C2 FA | 	rdbyte	arg01, local01
2ad6c     44 1E 86 F1 | 	sub	local01, #68
2ad70     01 12 86 F1 | 	sub	arg01, #1
2ad74     02 12 16 F2 | 	cmp	arg01, #2 wc
2ad78     68 00 90 3D |  if_ae	jmp	#LR__4412
2ad7c     34 1E 06 F1 | 	add	local01, #52
2ad80     0F 13 02 F6 | 	mov	arg01, local01
2ad84     34 1E 86 F1 | 	sub	local01, #52
2ad88     11 12 06 F1 | 	add	arg01, #17
2ad8c                 | ' {
2ad8c                 | ' 
2ad8c                 | ' 	return *((WORD*)ptr);
2ad8c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ad90     50 00 90 AD |  if_e	jmp	#LR__4412
2ad94     34 1E 06 F1 | 	add	local01, #52
2ad98     0F 13 02 F6 | 	mov	arg01, local01
2ad9c     34 1E 86 F1 | 	sub	local01, #52
2ada0     13 12 06 F1 | 	add	arg01, #19
2ada4                 | ' {
2ada4                 | ' 
2ada4                 | ' 	return *((WORD*)ptr);
2ada4     09 FB E1 FA | 	rdword	result1, arg01
2ada8     FD 22 32 F9 | 	getword	local03, result1, #0
2adac     80 22 16 F2 | 	cmp	local03, #128 wc
2adb0     20 00 90 3D |  if_ae	jmp	#LR__4411
2adb4     34 1E 06 F1 | 	add	local01, #52
2adb8     0F 13 02 F6 | 	mov	arg01, local01
2adbc     34 1E 86 F1 | 	sub	local01, #52
2adc0     20 12 06 F1 | 	add	arg01, #32
2adc4                 | ' {
2adc4                 | ' 
2adc4                 | ' 	return *((DWORD*)ptr);
2adc4     09 FB 01 FB | 	rdlong	result1, arg01
2adc8     80 00 00 FF 
2adcc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2add0     10 00 90 CD |  if_b	jmp	#LR__4412
2add4                 | LR__4411
2add4     4A 1E 06 F1 | 	add	local01, #74
2add8                 | ' {
2add8                 | ' 
2add8                 | ' 	return *((WORD*)ptr);
2add8     0F FB E9 FA | 	rdword	result1, local01 wz
2addc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2addc                 | ' 			&& ld_word(fs->win +  14 ) != 0
2addc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2addc                 | ' 			&& ld_word(fs->win +  17 ) != 0
2addc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2addc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2addc                 | ' 				return 0;
2addc     00 FA 05 56 |  if_ne	mov	result1, #0
2ade0     18 00 90 5D |  if_ne	jmp	#LR__4414
2ade4                 | LR__4412
2ade4                 | LR__4413
2ade4                 | ' 		}
2ade4                 | ' 	}
2ade4                 | ' 	return sign == 0xAA55 ? 2 : 3;
2ade4     10 23 32 F9 | 	getword	local03, local02, #0
2ade8     55 00 00 FF 
2adec     55 22 0E F2 | 	cmp	local03, ##43605 wz
2adf0     02 24 06 A6 |  if_e	mov	local04, #2
2adf4     03 24 06 56 |  if_ne	mov	local04, #3
2adf8     12 FB 01 F6 | 	mov	result1, local04
2adfc                 | LR__4414
2adfc     A7 F0 03 F6 | 	mov	ptra, fp
2ae00     B2 00 A0 FD | 	call	#popregs_
2ae04                 | _fatfs_cc_check_fs_ret
2ae04     2D 00 64 FD | 	ret
2ae08                 | 
2ae08                 | _fatfs_cc_find_volume
2ae08     05 4A 05 F6 | 	mov	COUNT_, #5
2ae0c     A8 00 A0 FD | 	call	#pushregs_
2ae10     24 F0 07 F1 | 	add	ptra, #36
2ae14     09 1F 02 F6 | 	mov	local01, arg01
2ae18     0A 21 02 F6 | 	mov	local02, arg02
2ae1c     0F 13 02 F6 | 	mov	arg01, local01
2ae20     00 14 06 F6 | 	mov	arg02, #0
2ae24     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2ae28     02 FA 0D F2 | 	cmp	result1, #2 wz
2ae2c     0C 00 90 AD |  if_e	jmp	#LR__4420
2ae30     03 FA 15 F2 | 	cmp	result1, #3 wc
2ae34     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2ae38     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4428
2ae3c                 | LR__4420
2ae3c                 | ' 	for (i = 0; i < 4; i++) {
2ae3c     00 22 06 F6 | 	mov	local03, #0
2ae40     97 26 48 FB | 	callpa	#(@LR__4422-@LR__4421)>>2,fcache_load_ptr_
2ae44                 | LR__4421
2ae44     04 22 16 F2 | 	cmp	local03, #4 wc
2ae48     44 00 90 3D |  if_ae	jmp	#LR__4423
2ae4c     11 25 02 F6 | 	mov	local04, local03
2ae50     02 24 66 F0 | 	shl	local04, #2
2ae54     14 4E 05 F1 | 	add	fp, #20
2ae58     A7 24 02 F1 | 	add	local04, fp
2ae5c     34 1E 06 F1 | 	add	local01, #52
2ae60     0F 13 02 F6 | 	mov	arg01, local01
2ae64     34 1E 86 F1 | 	sub	local01, #52
2ae68     BE 13 06 F1 | 	add	arg01, #446
2ae6c     11 15 02 F6 | 	mov	arg02, local03
2ae70     04 14 66 F0 | 	shl	arg02, #4
2ae74     0A 13 02 F1 | 	add	arg01, arg02
2ae78     08 12 06 F1 | 	add	arg01, #8
2ae7c                 | ' {
2ae7c                 | ' 
2ae7c                 | ' 	return *((DWORD*)ptr);
2ae7c     09 FB 01 FB | 	rdlong	result1, arg01
2ae80     14 4E 85 F1 | 	sub	fp, #20
2ae84     12 FB 61 FC | 	wrlong	result1, local04
2ae88     01 22 06 F1 | 	add	local03, #1
2ae8c     B4 FF 9F FD | 	jmp	#LR__4421
2ae90                 | LR__4422
2ae90                 | LR__4423
2ae90     00 20 0E F2 | 	cmp	local02, #0 wz
2ae94     10 25 02 56 |  if_ne	mov	local04, local02
2ae98     01 24 86 51 |  if_ne	sub	local04, #1
2ae9c     00 24 06 A6 |  if_e	mov	local04, #0
2aea0     12 23 02 F6 | 	mov	local03, local04
2aea4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2aea4                 | ' 	}
2aea4                 | ' 	i = part ? part - 1 : 0;
2aea4                 | ' 	do {
2aea4                 | LR__4424
2aea4     11 25 02 F6 | 	mov	local04, local03
2aea8     02 24 66 F0 | 	shl	local04, #2
2aeac     14 4E 05 F1 | 	add	fp, #20
2aeb0     A7 24 02 F1 | 	add	local04, fp
2aeb4     12 25 0A FB | 	rdlong	local04, local04 wz
2aeb8     14 4E 85 F1 | 	sub	fp, #20
2aebc     28 00 90 AD |  if_e	jmp	#LR__4425
2aec0     11 25 02 F6 | 	mov	local04, local03
2aec4     02 24 66 F0 | 	shl	local04, #2
2aec8     14 4E 05 F1 | 	add	fp, #20
2aecc     A7 24 02 F1 | 	add	local04, fp
2aed0     12 15 02 FB | 	rdlong	arg02, local04
2aed4     0F 13 02 F6 | 	mov	arg01, local01
2aed8     14 4E 85 F1 | 	sub	fp, #20
2aedc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2aee0     FD 24 02 F6 | 	mov	local04, result1
2aee4     04 00 90 FD | 	jmp	#LR__4426
2aee8                 | LR__4425
2aee8     03 24 06 F6 | 	mov	local04, #3
2aeec                 | LR__4426
2aeec     12 27 02 F6 | 	mov	local05, local04
2aef0     00 20 0E F2 | 	cmp	local02, #0 wz
2aef4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2aef8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4427
2aefc     01 22 06 A1 |  if_e	add	local03, #1
2af00     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2af04     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4424
2af08                 | LR__4427
2af08                 | ' 	return fmt;
2af08     13 FB 01 F6 | 	mov	result1, local05
2af0c                 | LR__4428
2af0c     A7 F0 03 F6 | 	mov	ptra, fp
2af10     B2 00 A0 FD | 	call	#popregs_
2af14                 | _fatfs_cc_find_volume_ret
2af14     2D 00 64 FD | 	ret
2af18                 | 
2af18                 | _fatfs_cc_mount_volume
2af18     0B 4A 05 F6 | 	mov	COUNT_, #11
2af1c     A8 00 A0 FD | 	call	#pushregs_
2af20     0A 1F 02 F6 | 	mov	local01, arg02
2af24     0B 21 02 F6 | 	mov	local02, arg03
2af28     0F 01 68 FC | 	wrlong	#0, local01
2af2c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2af30     FD 22 02 F6 | 	mov	local03, result1
2af34     00 22 56 F2 | 	cmps	local03, #0 wc
2af38     0B FA 05 C6 |  if_b	mov	result1, #11
2af3c     3C 05 90 CD |  if_b	jmp	#LR__4440
2af40     11 17 02 F6 | 	mov	arg03, local03
2af44     02 16 66 F0 | 	shl	arg03, #2
2af48     F2 16 02 F1 | 	add	arg03, objptr
2af4c     0B 25 0A FB | 	rdlong	local04, arg03 wz
2af50     0C FA 05 A6 |  if_e	mov	result1, #12
2af54     24 05 90 AD |  if_e	jmp	#LR__4440
2af58     0F 25 62 FC | 	wrlong	local04, local01
2af5c     10 21 E2 F8 | 	getbyte	local02, local02, #0
2af60     FE 20 06 F5 | 	and	local02, #254
2af64     12 17 CA FA | 	rdbyte	arg03, local04 wz
2af68     4C 00 90 AD |  if_e	jmp	#LR__4431
2af6c     01 24 06 F1 | 	add	local04, #1
2af70     12 13 CA FA | 	rdbyte	arg01, local04 wz
2af74     01 24 86 F1 | 	sub	local04, #1
2af78     01 FA 05 56 |  if_ne	mov	result1, #1
2af7c                 | ' 
2af7c                 | ' 	return Stat;
2af7c     01 00 00 AF 
2af80     20 E4 05 A1 |  if_e	add	objptr, ##544
2af84     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2af88     01 00 00 AF 
2af8c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2af90     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2af94     01 16 CE F7 | 	test	arg03, #1 wz
2af98     1C 00 90 5D |  if_ne	jmp	#LR__4430
2af9c     00 20 0E F2 | 	cmp	local02, #0 wz
2afa0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2afa4     04 FA CD 57 |  if_ne	test	result1, #4 wz
2afa8                 | ' 				return FR_WRITE_PROTECTED;
2afa8     0A FA 05 56 |  if_ne	mov	result1, #10
2afac     CC 04 90 5D |  if_ne	jmp	#LR__4440
2afb0                 | ' 			}
2afb0                 | ' 			return FR_OK;
2afb0     00 FA 05 F6 | 	mov	result1, #0
2afb4     C4 04 90 FD | 	jmp	#LR__4440
2afb8                 | LR__4430
2afb8                 | LR__4431
2afb8     12 01 48 FC | 	wrbyte	#0, local04
2afbc     01 24 06 F1 | 	add	local04, #1
2afc0     12 23 42 FC | 	wrbyte	local03, local04
2afc4     12 13 C2 FA | 	rdbyte	arg01, local04
2afc8     01 24 86 F1 | 	sub	local04, #1
2afcc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2afd0     FD 16 02 F6 | 	mov	arg03, result1
2afd4     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2afd8     01 26 CE F7 | 	test	local05, #1 wz
2afdc                 | ' 		return FR_NOT_READY;
2afdc     03 FA 05 56 |  if_ne	mov	result1, #3
2afe0     98 04 90 5D |  if_ne	jmp	#LR__4440
2afe4     00 20 0E F2 | 	cmp	local02, #0 wz
2afe8     0B 27 02 56 |  if_ne	mov	local05, arg03
2afec     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2aff0     04 26 CE 57 |  if_ne	test	local05, #4 wz
2aff4                 | ' 		return FR_WRITE_PROTECTED;
2aff4     0A FA 05 56 |  if_ne	mov	result1, #10
2aff8     80 04 90 5D |  if_ne	jmp	#LR__4440
2affc     12 13 02 F6 | 	mov	arg01, local04
2b000     00 14 06 F6 | 	mov	arg02, #0
2b004     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b008     FD 12 02 F6 | 	mov	arg01, result1
2b00c     04 12 0E F2 | 	cmp	arg01, #4 wz
2b010     01 FA 05 A6 |  if_e	mov	result1, #1
2b014     64 04 90 AD |  if_e	jmp	#LR__4440
2b018     02 12 16 F2 | 	cmp	arg01, #2 wc
2b01c     0D FA 05 36 |  if_ae	mov	result1, #13
2b020     58 04 90 3D |  if_ae	jmp	#LR__4440
2b024     30 24 06 F1 | 	add	local04, #48
2b028     12 29 02 FB | 	rdlong	local06, local04
2b02c     04 24 06 F1 | 	add	local04, #4
2b030     12 13 02 F6 | 	mov	arg01, local04
2b034     34 24 86 F1 | 	sub	local04, #52
2b038     0B 12 06 F1 | 	add	arg01, #11
2b03c                 | ' {
2b03c                 | ' 
2b03c                 | ' 	return *((WORD*)ptr);
2b03c     09 FB E1 FA | 	rdword	result1, arg01
2b040     01 00 00 FF 
2b044     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b048     0D FA 05 56 |  if_ne	mov	result1, #13
2b04c     2C 04 90 5D |  if_ne	jmp	#LR__4440
2b050     34 24 06 F1 | 	add	local04, #52
2b054     12 13 02 F6 | 	mov	arg01, local04
2b058     34 24 86 F1 | 	sub	local04, #52
2b05c     16 12 06 F1 | 	add	arg01, #22
2b060                 | ' {
2b060                 | ' 
2b060                 | ' 	return *((WORD*)ptr);
2b060     09 FB E1 FA | 	rdword	result1, arg01
2b064     FD 2A 0A F6 | 	mov	local07, result1 wz
2b068     18 00 90 5D |  if_ne	jmp	#LR__4432
2b06c     34 24 06 F1 | 	add	local04, #52
2b070     12 13 02 F6 | 	mov	arg01, local04
2b074     34 24 86 F1 | 	sub	local04, #52
2b078     24 12 06 F1 | 	add	arg01, #36
2b07c                 | ' {
2b07c                 | ' 
2b07c                 | ' 	return *((DWORD*)ptr);
2b07c     09 FB 01 FB | 	rdlong	result1, arg01
2b080     FD 2A 02 F6 | 	mov	local07, result1
2b084                 | LR__4432
2b084     1C 24 06 F1 | 	add	local04, #28
2b088     12 2B 62 FC | 	wrlong	local07, local04
2b08c     28 24 06 F1 | 	add	local04, #40
2b090     12 27 C2 FA | 	rdbyte	local05, local04
2b094     42 24 86 F1 | 	sub	local04, #66
2b098     12 27 42 FC | 	wrbyte	local05, local04
2b09c     12 27 C2 FA | 	rdbyte	local05, local04
2b0a0     02 24 86 F1 | 	sub	local04, #2
2b0a4     01 26 0E F2 | 	cmp	local05, #1 wz
2b0a8     02 24 06 51 |  if_ne	add	local04, #2
2b0ac     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b0b0     02 24 86 51 |  if_ne	sub	local04, #2
2b0b4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b0b8     0D FA 05 56 |  if_ne	mov	result1, #13
2b0bc     BC 03 90 5D |  if_ne	jmp	#LR__4440
2b0c0     02 24 06 F1 | 	add	local04, #2
2b0c4     12 27 C2 FA | 	rdbyte	local05, local04
2b0c8     13 2B 02 FD | 	qmul	local07, local05
2b0cc     3F 24 06 F1 | 	add	local04, #63
2b0d0     12 27 C2 FA | 	rdbyte	local05, local04
2b0d4     37 24 86 F1 | 	sub	local04, #55
2b0d8     12 27 52 FC | 	wrword	local05, local04
2b0dc     12 27 EA FA | 	rdword	local05, local04 wz
2b0e0     0A 24 86 F1 | 	sub	local04, #10
2b0e4     18 2A 62 FD | 	getqx	local07
2b0e8     20 00 90 AD |  if_e	jmp	#LR__4433
2b0ec     0A 24 06 F1 | 	add	local04, #10
2b0f0     12 27 E2 FA | 	rdword	local05, local04
2b0f4     13 23 32 F9 | 	getword	local03, local05, #0
2b0f8     0A 24 86 F1 | 	sub	local04, #10
2b0fc     13 27 32 F9 | 	getword	local05, local05, #0
2b100     01 26 86 F1 | 	sub	local05, #1
2b104     13 23 CA F7 | 	test	local03, local05 wz
2b108     08 00 90 AD |  if_e	jmp	#LR__4434
2b10c                 | LR__4433
2b10c     0D FA 05 F6 | 	mov	result1, #13
2b110     68 03 90 FD | 	jmp	#LR__4440
2b114                 | LR__4434
2b114     34 24 06 F1 | 	add	local04, #52
2b118     12 13 02 F6 | 	mov	arg01, local04
2b11c     11 12 06 F1 | 	add	arg01, #17
2b120                 | ' {
2b120                 | ' 
2b120                 | ' 	return *((WORD*)ptr);
2b120     09 FB E1 FA | 	rdword	result1, arg01
2b124     2C 24 86 F1 | 	sub	local04, #44
2b128     12 FB 51 FC | 	wrword	result1, local04
2b12c     12 27 E2 FA | 	rdword	local05, local04
2b130     08 24 86 F1 | 	sub	local04, #8
2b134     13 13 52 F6 | 	abs	arg01, local05 wc
2b138     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b13c     09 13 8A F6 | 	negc	arg01, arg01 wz
2b140     0D FA 05 56 |  if_ne	mov	result1, #13
2b144     34 03 90 5D |  if_ne	jmp	#LR__4440
2b148     34 24 06 F1 | 	add	local04, #52
2b14c     12 13 02 F6 | 	mov	arg01, local04
2b150     34 24 86 F1 | 	sub	local04, #52
2b154     13 12 06 F1 | 	add	arg01, #19
2b158                 | ' {
2b158                 | ' 
2b158                 | ' 	return *((WORD*)ptr);
2b158     09 FB E1 FA | 	rdword	result1, arg01
2b15c     FD 2C 0A F6 | 	mov	local08, result1 wz
2b160     34 24 06 A1 |  if_e	add	local04, #52
2b164     12 13 02 A6 |  if_e	mov	arg01, local04
2b168     34 24 86 A1 |  if_e	sub	local04, #52
2b16c     20 12 06 A1 |  if_e	add	arg01, #32
2b170                 | ' {
2b170                 | ' 
2b170                 | ' 	return *((DWORD*)ptr);
2b170     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b174     34 24 06 F1 | 	add	local04, #52
2b178     12 13 02 F6 | 	mov	arg01, local04
2b17c     34 24 86 F1 | 	sub	local04, #52
2b180     0E 12 06 F1 | 	add	arg01, #14
2b184                 | ' {
2b184                 | ' 
2b184                 | ' 	return *((WORD*)ptr);
2b184     09 FB E1 FA | 	rdword	result1, arg01
2b188     FD 12 02 F6 | 	mov	arg01, result1
2b18c     09 27 02 F6 | 	mov	local05, arg01
2b190     0F 26 4E F7 | 	zerox	local05, #15 wz
2b194     0D FA 05 A6 |  if_e	mov	result1, #13
2b198     E0 02 90 AD |  if_e	jmp	#LR__4440
2b19c     09 2F 32 F9 | 	getword	local09, arg01, #0
2b1a0     15 2F 02 F1 | 	add	local09, local07
2b1a4     08 24 06 F1 | 	add	local04, #8
2b1a8     12 27 E2 FA | 	rdword	local05, local04
2b1ac     08 24 86 F1 | 	sub	local04, #8
2b1b0     13 27 52 F6 | 	abs	local05, local05 wc
2b1b4     04 26 46 F0 | 	shr	local05, #4
2b1b8     13 2F 82 F3 | 	sumc	local09, local05
2b1bc     17 2D 12 F2 | 	cmp	local08, local09 wc
2b1c0     0D FA 05 C6 |  if_b	mov	result1, #13
2b1c4     B4 02 90 CD |  if_b	jmp	#LR__4440
2b1c8     17 2D 82 F1 | 	sub	local08, local09
2b1cc     0A 24 06 F1 | 	add	local04, #10
2b1d0     12 27 E2 FA | 	rdword	local05, local04
2b1d4     13 2D 12 FD | 	qdiv	local08, local05
2b1d8     0A 24 86 F1 | 	sub	local04, #10
2b1dc     18 26 62 FD | 	getqx	local05
2b1e0     00 26 0E F2 | 	cmp	local05, #0 wz
2b1e4     0D FA 05 A6 |  if_e	mov	result1, #13
2b1e8     90 02 90 AD |  if_e	jmp	#LR__4440
2b1ec     00 30 06 F6 | 	mov	local10, #0
2b1f0     FF FF 07 FF 
2b1f4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b1f8     03 30 06 C6 |  if_b	mov	local10, #3
2b1fc     7F 00 00 FF 
2b200     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b204     02 30 06 C6 |  if_b	mov	local10, #2
2b208     07 00 00 FF 
2b20c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b210     01 30 06 C6 |  if_b	mov	local10, #1
2b214     00 30 0E F2 | 	cmp	local10, #0 wz
2b218     0D FA 05 A6 |  if_e	mov	result1, #13
2b21c     5C 02 90 AD |  if_e	jmp	#LR__4440
2b220     02 26 06 F1 | 	add	local05, #2
2b224     18 24 06 F1 | 	add	local04, #24
2b228     12 27 62 FC | 	wrlong	local05, local04
2b22c     08 24 06 F1 | 	add	local04, #8
2b230     12 29 62 FC | 	wrlong	local06, local04
2b234     14 27 02 F6 | 	mov	local05, local06
2b238     09 13 32 F9 | 	getword	arg01, arg01, #0
2b23c     09 27 02 F1 | 	add	local05, arg01
2b240     04 24 06 F1 | 	add	local04, #4
2b244     12 27 62 FC | 	wrlong	local05, local04
2b248     14 27 02 F6 | 	mov	local05, local06
2b24c     17 27 02 F1 | 	add	local05, local09
2b250     08 24 06 F1 | 	add	local04, #8
2b254     12 27 62 FC | 	wrlong	local05, local04
2b258     2C 24 86 F1 | 	sub	local04, #44
2b25c     03 30 0E F2 | 	cmp	local10, #3 wz
2b260     5C 00 90 5D |  if_ne	jmp	#LR__4435
2b264     34 24 06 F1 | 	add	local04, #52
2b268     12 13 02 F6 | 	mov	arg01, local04
2b26c     34 24 86 F1 | 	sub	local04, #52
2b270     2A 12 06 F1 | 	add	arg01, #42
2b274                 | ' {
2b274                 | ' 
2b274                 | ' 	return *((WORD*)ptr);
2b274     09 FB E9 FA | 	rdword	result1, arg01 wz
2b278     0D FA 05 56 |  if_ne	mov	result1, #13
2b27c     FC 01 90 5D |  if_ne	jmp	#LR__4440
2b280     08 24 06 F1 | 	add	local04, #8
2b284     12 27 EA FA | 	rdword	local05, local04 wz
2b288     08 24 86 F1 | 	sub	local04, #8
2b28c     0D FA 05 56 |  if_ne	mov	result1, #13
2b290     E8 01 90 5D |  if_ne	jmp	#LR__4440
2b294     34 24 06 F1 | 	add	local04, #52
2b298     12 13 02 F6 | 	mov	arg01, local04
2b29c     2C 12 06 F1 | 	add	arg01, #44
2b2a0                 | ' {
2b2a0                 | ' 
2b2a0                 | ' 	return *((DWORD*)ptr);
2b2a0     09 FB 01 FB | 	rdlong	result1, arg01
2b2a4     0C 24 86 F1 | 	sub	local04, #12
2b2a8     12 FB 61 FC | 	wrlong	result1, local04
2b2ac     10 24 86 F1 | 	sub	local04, #16
2b2b0     12 33 02 FB | 	rdlong	local11, local04
2b2b4     18 24 86 F1 | 	sub	local04, #24
2b2b8     02 32 66 F0 | 	shl	local11, #2
2b2bc     6C 00 90 FD | 	jmp	#LR__4437
2b2c0                 | LR__4435
2b2c0     08 24 06 F1 | 	add	local04, #8
2b2c4     12 27 EA FA | 	rdword	local05, local04 wz
2b2c8     08 24 86 F1 | 	sub	local04, #8
2b2cc     0D FA 05 A6 |  if_e	mov	result1, #13
2b2d0     A8 01 90 AD |  if_e	jmp	#LR__4440
2b2d4     24 24 06 F1 | 	add	local04, #36
2b2d8     12 27 02 FB | 	rdlong	local05, local04
2b2dc     15 27 02 F1 | 	add	local05, local07
2b2e0     04 24 06 F1 | 	add	local04, #4
2b2e4     12 27 62 FC | 	wrlong	local05, local04
2b2e8     28 24 86 F1 | 	sub	local04, #40
2b2ec     02 30 0E F2 | 	cmp	local10, #2 wz
2b2f0     18 24 06 A1 |  if_e	add	local04, #24
2b2f4     12 27 02 AB |  if_e	rdlong	local05, local04
2b2f8     18 24 86 A1 |  if_e	sub	local04, #24
2b2fc     01 26 66 A0 |  if_e	shl	local05, #1
2b300     24 00 90 AD |  if_e	jmp	#LR__4436
2b304     18 24 06 F1 | 	add	local04, #24
2b308     12 33 02 FB | 	rdlong	local11, local04
2b30c     19 27 02 F6 | 	mov	local05, local11
2b310     01 26 66 F0 | 	shl	local05, #1
2b314     19 27 02 F1 | 	add	local05, local11
2b318     01 26 46 F0 | 	shr	local05, #1
2b31c     18 24 86 F1 | 	sub	local04, #24
2b320     01 32 06 F5 | 	and	local11, #1
2b324     19 27 02 F1 | 	add	local05, local11
2b328                 | LR__4436
2b328     13 33 02 F6 | 	mov	local11, local05
2b32c                 | LR__4437
2b32c     FF 33 06 F1 | 	add	local11, #511
2b330     09 32 46 F0 | 	shr	local11, #9
2b334     1C 24 06 F1 | 	add	local04, #28
2b338     12 17 02 FB | 	rdlong	arg03, local04
2b33c     1C 24 86 F1 | 	sub	local04, #28
2b340     19 17 12 F2 | 	cmp	arg03, local11 wc
2b344     0D FA 05 C6 |  if_b	mov	result1, #13
2b348     30 01 90 CD |  if_b	jmp	#LR__4440
2b34c     14 24 06 F1 | 	add	local04, #20
2b350     FF FF FF FF 
2b354     12 FF 6B FC | 	wrlong	##-1, local04
2b358     04 24 86 F1 | 	sub	local04, #4
2b35c     FF FF FF FF 
2b360     12 FF 6B FC | 	wrlong	##-1, local04
2b364     0C 24 86 F1 | 	sub	local04, #12
2b368     12 01 49 FC | 	wrbyte	#128, local04
2b36c     04 24 86 F1 | 	sub	local04, #4
2b370     03 30 0E F2 | 	cmp	local10, #3 wz
2b374     D0 00 90 5D |  if_ne	jmp	#LR__4439
2b378     34 24 06 F1 | 	add	local04, #52
2b37c     12 13 02 F6 | 	mov	arg01, local04
2b380     34 24 86 F1 | 	sub	local04, #52
2b384     30 12 06 F1 | 	add	arg01, #48
2b388                 | ' {
2b388                 | ' 
2b388                 | ' 	return *((WORD*)ptr);
2b388     09 FB E1 FA | 	rdword	result1, arg01
2b38c     FD 26 32 F9 | 	getword	local05, result1, #0
2b390     01 26 0E F2 | 	cmp	local05, #1 wz
2b394     B0 00 90 5D |  if_ne	jmp	#LR__4439
2b398     01 28 06 F1 | 	add	local06, #1
2b39c     12 13 02 F6 | 	mov	arg01, local04
2b3a0     14 15 02 F6 | 	mov	arg02, local06
2b3a4     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b3a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b3ac     98 00 90 5D |  if_ne	jmp	#LR__4439
2b3b0     04 24 06 F1 | 	add	local04, #4
2b3b4     12 01 48 FC | 	wrbyte	#0, local04
2b3b8     30 24 06 F1 | 	add	local04, #48
2b3bc     12 13 02 F6 | 	mov	arg01, local04
2b3c0     34 24 86 F1 | 	sub	local04, #52
2b3c4     FE 13 06 F1 | 	add	arg01, #510
2b3c8                 | ' {
2b3c8                 | ' 
2b3c8                 | ' 	return *((WORD*)ptr);
2b3c8     09 FB E1 FA | 	rdword	result1, arg01
2b3cc     FD 26 32 F9 | 	getword	local05, result1, #0
2b3d0     55 00 00 FF 
2b3d4     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b3d8     34 24 06 A1 |  if_e	add	local04, #52
2b3dc     12 13 02 A6 |  if_e	mov	arg01, local04
2b3e0     34 24 86 A1 |  if_e	sub	local04, #52
2b3e4                 | ' {
2b3e4                 | ' 
2b3e4                 | ' 	return *((DWORD*)ptr);
2b3e4     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b3e8     A9 B0 20 AF 
2b3ec     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b3f0     54 00 90 5D |  if_ne	jmp	#LR__4438
2b3f4     34 24 06 F1 | 	add	local04, #52
2b3f8     12 13 02 F6 | 	mov	arg01, local04
2b3fc     34 24 86 F1 | 	sub	local04, #52
2b400     E4 13 06 F1 | 	add	arg01, #484
2b404                 | ' {
2b404                 | ' 
2b404                 | ' 	return *((DWORD*)ptr);
2b404     09 FB 01 FB | 	rdlong	result1, arg01
2b408     B9 A0 30 FF 
2b40c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b410     34 00 90 5D |  if_ne	jmp	#LR__4438
2b414     34 24 06 F1 | 	add	local04, #52
2b418     12 13 02 F6 | 	mov	arg01, local04
2b41c     E8 13 06 F1 | 	add	arg01, #488
2b420                 | ' {
2b420                 | ' 
2b420                 | ' 	return *((DWORD*)ptr);
2b420     09 FB 01 FB | 	rdlong	result1, arg01
2b424     20 24 86 F1 | 	sub	local04, #32
2b428     12 FB 61 FC | 	wrlong	result1, local04
2b42c     20 24 06 F1 | 	add	local04, #32
2b430     12 13 02 F6 | 	mov	arg01, local04
2b434     EC 13 06 F1 | 	add	arg01, #492
2b438                 | ' {
2b438                 | ' 
2b438                 | ' 	return *((DWORD*)ptr);
2b438     09 FB 01 FB | 	rdlong	result1, arg01
2b43c     24 24 86 F1 | 	sub	local04, #36
2b440     12 FB 61 FC | 	wrlong	result1, local04
2b444     10 24 86 F1 | 	sub	local04, #16
2b448                 | LR__4438
2b448                 | LR__4439
2b448     12 31 42 FC | 	wrbyte	local10, local04
2b44c     04 E4 05 F1 | 	add	objptr, #4
2b450     F2 26 E2 FA | 	rdword	local05, objptr
2b454     01 26 06 F1 | 	add	local05, #1
2b458     F2 26 52 FC | 	wrword	local05, objptr
2b45c     F2 32 E2 FA | 	rdword	local11, objptr
2b460     06 24 06 F1 | 	add	local04, #6
2b464     12 33 52 FC | 	wrword	local11, local04
2b468     04 E4 05 F1 | 	add	objptr, #4
2b46c     06 24 06 F1 | 	add	local04, #6
2b470     12 E5 61 FC | 	wrlong	objptr, local04
2b474                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b474                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b474                 | ' 			{
2b474                 | ' 
2b474                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b474                 | ' 
2b474                 | ' 
2b474                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b474                 | ' 
2b474                 | ' 			}
2b474                 | ' 		}
2b474                 | ' 
2b474                 | ' 
2b474                 | ' 	}
2b474                 | ' 
2b474                 | ' 	fs->fs_type = (BYTE)fmt;
2b474                 | ' 	fs->id = ++Fsid;
2b474                 | ' 
2b474                 | ' 	fs->lfnbuf = LfnBuf;
2b474                 | ' #line 3567 "ff.c"
2b474                 | ' 	return FR_OK;
2b474     00 FA 05 F6 | 	mov	result1, #0
2b478     08 E4 85 F1 | 	sub	objptr, #8
2b47c                 | LR__4440
2b47c     A7 F0 03 F6 | 	mov	ptra, fp
2b480     B2 00 A0 FD | 	call	#popregs_
2b484                 | _fatfs_cc_mount_volume_ret
2b484     2D 00 64 FD | 	ret
2b488                 | 
2b488                 | _fatfs_cc_validate
2b488     09 01 0A F6 | 	mov	_var01, arg01 wz
2b48c     09 02 06 F6 | 	mov	_var02, #9
2b490     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b494     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b498     50 00 90 AD |  if_e	jmp	#LR__4450
2b49c     04 00 06 F1 | 	add	_var01, #4
2b4a0     00 07 E2 FA | 	rdword	_var04, _var01
2b4a4     04 00 86 F1 | 	sub	_var01, #4
2b4a8     00 13 02 FB | 	rdlong	arg01, _var01
2b4ac     06 12 06 F1 | 	add	arg01, #6
2b4b0     09 FB E1 FA | 	rdword	result1, arg01
2b4b4     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b4b8     30 00 90 5D |  if_ne	jmp	#LR__4450
2b4bc     00 07 02 FB | 	rdlong	_var04, _var01
2b4c0     01 06 06 F1 | 	add	_var04, #1
2b4c4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b4c8     01 FA 05 56 |  if_ne	mov	result1, #1
2b4cc                 | ' 
2b4cc                 | ' 	return Stat;
2b4cc     01 00 00 AF 
2b4d0     20 E4 05 A1 |  if_e	add	objptr, ##544
2b4d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b4d8     01 00 00 AF 
2b4dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b4e0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b4e4     01 04 CE F7 | 	test	_var03, #1 wz
2b4e8     00 02 06 A6 |  if_e	mov	_var02, #0
2b4ec                 | LR__4450
2b4ec     00 02 0E F2 | 	cmp	_var02, #0 wz
2b4f0     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b4f4     00 04 06 56 |  if_ne	mov	_var03, #0
2b4f8     0A 05 62 FC | 	wrlong	_var03, arg02
2b4fc                 | ' 			res = FR_OK;
2b4fc                 | ' 		}
2b4fc                 | ' 
2b4fc                 | ' 	}
2b4fc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b4fc                 | ' 	return res;
2b4fc     01 FB 01 F6 | 	mov	result1, _var02
2b500                 | _fatfs_cc_validate_ret
2b500     2D 00 64 FD | 	ret
2b504                 | 
2b504                 | _fatfs_cc_f_mount
2b504     01 4A 05 F6 | 	mov	COUNT_, #1
2b508     A8 00 A0 FD | 	call	#pushregs_
2b50c     20 F0 07 F1 | 	add	ptra, #32
2b510     04 4E 05 F1 | 	add	fp, #4
2b514     A7 12 62 FC | 	wrlong	arg01, fp
2b518     04 4E 05 F1 | 	add	fp, #4
2b51c     A7 14 62 FC | 	wrlong	arg02, fp
2b520     04 4E 05 F1 | 	add	fp, #4
2b524     A7 16 42 FC | 	wrbyte	arg03, fp
2b528     04 4E 85 F1 | 	sub	fp, #4
2b52c     A7 16 02 FB | 	rdlong	arg03, fp
2b530     14 4E 05 F1 | 	add	fp, #20
2b534     A7 16 62 FC | 	wrlong	arg03, fp
2b538     A7 12 02 F6 | 	mov	arg01, fp
2b53c     1C 4E 85 F1 | 	sub	fp, #28
2b540     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b544     14 4E 05 F1 | 	add	fp, #20
2b548     A7 FA 61 FC | 	wrlong	result1, fp
2b54c     14 4E 85 F1 | 	sub	fp, #20
2b550     00 FA 55 F2 | 	cmps	result1, #0 wc
2b554     0B FA 05 C6 |  if_b	mov	result1, #11
2b558     C0 00 90 CD |  if_b	jmp	#LR__4461
2b55c     14 4E 05 F1 | 	add	fp, #20
2b560     A7 16 02 FB | 	rdlong	arg03, fp
2b564     02 16 66 F0 | 	shl	arg03, #2
2b568     F2 16 02 F1 | 	add	arg03, objptr
2b56c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b570     04 4E 85 F1 | 	sub	fp, #4
2b574     A7 16 62 FC | 	wrlong	arg03, fp
2b578     10 4E 85 F1 | 	sub	fp, #16
2b57c     28 00 90 AD |  if_e	jmp	#LR__4460
2b580     10 4E 05 F1 | 	add	fp, #16
2b584     A7 16 02 FB | 	rdlong	arg03, fp
2b588     10 4E 85 F1 | 	sub	fp, #16
2b58c     01 16 06 F1 | 	add	arg03, #1
2b590     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b594     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b598     10 4E 05 F1 | 	add	fp, #16
2b59c     A7 16 02 FB | 	rdlong	arg03, fp
2b5a0     10 4E 85 F1 | 	sub	fp, #16
2b5a4     0B 01 48 FC | 	wrbyte	#0, arg03
2b5a8                 | LR__4460
2b5a8     04 4E 05 F1 | 	add	fp, #4
2b5ac     A7 1E 0A FB | 	rdlong	local01, fp wz
2b5b0     04 4E 85 F1 | 	sub	fp, #4
2b5b4     04 4E 05 51 |  if_ne	add	fp, #4
2b5b8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b5bc     04 4E 85 51 |  if_ne	sub	fp, #4
2b5c0     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b5c4     14 4E 05 F1 | 	add	fp, #20
2b5c8     A7 1E 02 FB | 	rdlong	local01, fp
2b5cc     02 1E 66 F0 | 	shl	local01, #2
2b5d0     F2 1E 02 F1 | 	add	local01, objptr
2b5d4     10 4E 85 F1 | 	sub	fp, #16
2b5d8     A7 16 02 FB | 	rdlong	arg03, fp
2b5dc     0F 17 62 FC | 	wrlong	arg03, local01
2b5e0     08 4E 05 F1 | 	add	fp, #8
2b5e4     A7 1E CA FA | 	rdbyte	local01, fp wz
2b5e8     0C 4E 85 F1 | 	sub	fp, #12
2b5ec     00 FA 05 A6 |  if_e	mov	result1, #0
2b5f0     28 00 90 AD |  if_e	jmp	#LR__4461
2b5f4     08 4E 05 F1 | 	add	fp, #8
2b5f8     A7 12 02 F6 | 	mov	arg01, fp
2b5fc     04 4E 85 F1 | 	sub	fp, #4
2b600     A7 14 02 F6 | 	mov	arg02, fp
2b604     04 4E 85 F1 | 	sub	fp, #4
2b608     00 16 06 F6 | 	mov	arg03, #0
2b60c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b610     18 4E 05 F1 | 	add	fp, #24
2b614     A7 FA 61 FC | 	wrlong	result1, fp
2b618                 | ' 
2b618                 | ' 	res = mount_volume(&path, &fs, 0);
2b618                 | ' 	return res ;
2b618     18 4E 85 F1 | 	sub	fp, #24
2b61c                 | LR__4461
2b61c     A7 F0 03 F6 | 	mov	ptra, fp
2b620     B2 00 A0 FD | 	call	#popregs_
2b624                 | _fatfs_cc_f_mount_ret
2b624     2D 00 64 FD | 	ret
2b628                 | 
2b628                 | _fatfs_cc_f_open
2b628     02 4A 05 F6 | 	mov	COUNT_, #2
2b62c     A8 00 A0 FD | 	call	#pushregs_
2b630     60 F0 07 F1 | 	add	ptra, #96
2b634     04 4E 05 F1 | 	add	fp, #4
2b638     A7 12 62 FC | 	wrlong	arg01, fp
2b63c     04 4E 05 F1 | 	add	fp, #4
2b640     A7 14 62 FC | 	wrlong	arg02, fp
2b644     04 4E 05 F1 | 	add	fp, #4
2b648     A7 16 42 FC | 	wrbyte	arg03, fp
2b64c     08 4E 85 F1 | 	sub	fp, #8
2b650     A7 18 0A FB | 	rdlong	arg04, fp wz
2b654     04 4E 85 F1 | 	sub	fp, #4
2b658     09 FA 05 A6 |  if_e	mov	result1, #9
2b65c     98 06 90 AD |  if_e	jmp	#LR__4487
2b660     0C 4E 05 F1 | 	add	fp, #12
2b664     A7 18 C2 FA | 	rdbyte	arg04, fp
2b668     3F 18 06 F5 | 	and	arg04, #63
2b66c     A7 18 42 FC | 	wrbyte	arg04, fp
2b670     04 4E 85 F1 | 	sub	fp, #4
2b674     A7 12 02 F6 | 	mov	arg01, fp
2b678     3C 4E 05 F1 | 	add	fp, #60
2b67c     A7 14 02 F6 | 	mov	arg02, fp
2b680     38 4E 85 F1 | 	sub	fp, #56
2b684     A7 16 C2 FA | 	rdbyte	arg03, fp
2b688     0C 4E 85 F1 | 	sub	fp, #12
2b68c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b690     10 4E 05 F1 | 	add	fp, #16
2b694     A7 FA 61 FC | 	wrlong	result1, fp
2b698     10 4E 85 F1 | 	sub	fp, #16
2b69c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b6a0     2C 06 90 5D |  if_ne	jmp	#LR__4486
2b6a4     44 4E 05 F1 | 	add	fp, #68
2b6a8     A7 18 02 FB | 	rdlong	arg04, fp
2b6ac     30 4E 85 F1 | 	sub	fp, #48
2b6b0     A7 18 62 FC | 	wrlong	arg04, fp
2b6b4     A7 12 02 F6 | 	mov	arg01, fp
2b6b8     0C 4E 85 F1 | 	sub	fp, #12
2b6bc     A7 1E 02 FB | 	rdlong	local01, fp
2b6c0     08 4E 85 F1 | 	sub	fp, #8
2b6c4     0F 15 02 F6 | 	mov	arg02, local01
2b6c8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b6cc     10 4E 05 F1 | 	add	fp, #16
2b6d0     A7 FA 61 FC | 	wrlong	result1, fp
2b6d4     10 4E 85 F1 | 	sub	fp, #16
2b6d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b6dc     1C 00 90 5D |  if_ne	jmp	#LR__4470
2b6e0     3F 4E 05 F1 | 	add	fp, #63
2b6e4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b6e8     3F 4E 85 F1 | 	sub	fp, #63
2b6ec     80 18 CE F7 | 	test	arg04, #128 wz
2b6f0     10 4E 05 51 |  if_ne	add	fp, #16
2b6f4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b6f8     10 4E 85 51 |  if_ne	sub	fp, #16
2b6fc                 | LR__4470
2b6fc     0C 4E 05 F1 | 	add	fp, #12
2b700     A7 18 C2 FA | 	rdbyte	arg04, fp
2b704     0C 4E 85 F1 | 	sub	fp, #12
2b708     1C 18 CE F7 | 	test	arg04, #28 wz
2b70c     F0 01 90 AD |  if_e	jmp	#LR__4475
2b710     10 4E 05 F1 | 	add	fp, #16
2b714     A7 1E 0A FB | 	rdlong	local01, fp wz
2b718     10 4E 85 F1 | 	sub	fp, #16
2b71c     48 00 90 AD |  if_e	jmp	#LR__4472
2b720     10 4E 05 F1 | 	add	fp, #16
2b724     A7 18 02 FB | 	rdlong	arg04, fp
2b728     10 4E 85 F1 | 	sub	fp, #16
2b72c     04 18 0E F2 | 	cmp	arg04, #4 wz
2b730     1C 00 90 5D |  if_ne	jmp	#LR__4471
2b734     14 4E 05 F1 | 	add	fp, #20
2b738     A7 12 02 F6 | 	mov	arg01, fp
2b73c     14 4E 85 F1 | 	sub	fp, #20
2b740     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b744     10 4E 05 F1 | 	add	fp, #16
2b748     A7 FA 61 FC | 	wrlong	result1, fp
2b74c     10 4E 85 F1 | 	sub	fp, #16
2b750                 | LR__4471
2b750     0C 4E 05 F1 | 	add	fp, #12
2b754     A7 1E C2 FA | 	rdbyte	local01, fp
2b758     08 1E 46 F5 | 	or	local01, #8
2b75c     A7 1E 42 FC | 	wrbyte	local01, fp
2b760     0C 4E 85 F1 | 	sub	fp, #12
2b764     3C 00 90 FD | 	jmp	#LR__4474
2b768                 | LR__4472
2b768     1A 4E 05 F1 | 	add	fp, #26
2b76c     A7 1E C2 FA | 	rdbyte	local01, fp
2b770     1A 4E 85 F1 | 	sub	fp, #26
2b774     11 1E CE F7 | 	test	local01, #17 wz
2b778     10 4E 05 51 |  if_ne	add	fp, #16
2b77c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b780     10 4E 85 51 |  if_ne	sub	fp, #16
2b784     1C 00 90 5D |  if_ne	jmp	#LR__4473
2b788     0C 4E 05 F1 | 	add	fp, #12
2b78c     A7 1E C2 FA | 	rdbyte	local01, fp
2b790     0C 4E 85 F1 | 	sub	fp, #12
2b794     04 1E CE F7 | 	test	local01, #4 wz
2b798     10 4E 05 51 |  if_ne	add	fp, #16
2b79c     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b7a0     10 4E 85 51 |  if_ne	sub	fp, #16
2b7a4                 | LR__4473
2b7a4                 | LR__4474
2b7a4     10 4E 05 F1 | 	add	fp, #16
2b7a8     A7 1E 0A FB | 	rdlong	local01, fp wz
2b7ac     10 4E 85 F1 | 	sub	fp, #16
2b7b0     A8 01 90 5D |  if_ne	jmp	#LR__4478
2b7b4     0C 4E 05 F1 | 	add	fp, #12
2b7b8     A7 1E C2 FA | 	rdbyte	local01, fp
2b7bc     0C 4E 85 F1 | 	sub	fp, #12
2b7c0     08 1E CE F7 | 	test	local01, #8 wz
2b7c4     94 01 90 AD |  if_e	jmp	#LR__4478
2b7c8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b7cc     54 4E 05 F1 | 	add	fp, #84
2b7d0     A7 FA 61 FC | 	wrlong	result1, fp
2b7d4     24 4E 85 F1 | 	sub	fp, #36
2b7d8     A7 12 02 FB | 	rdlong	arg01, fp
2b7dc     0E 12 06 F1 | 	add	arg01, #14
2b7e0     09 FB 61 FC | 	wrlong	result1, arg01
2b7e4     A7 12 02 FB | 	rdlong	arg01, fp
2b7e8     16 12 06 F1 | 	add	arg01, #22
2b7ec     24 4E 05 F1 | 	add	fp, #36
2b7f0     A7 14 02 FB | 	rdlong	arg02, fp
2b7f4     09 15 62 FC | 	wrlong	arg02, arg01
2b7f8     10 4E 85 F1 | 	sub	fp, #16
2b7fc     A7 12 02 FB | 	rdlong	arg01, fp
2b800     14 4E 85 F1 | 	sub	fp, #20
2b804     A7 14 02 FB | 	rdlong	arg02, fp
2b808     30 4E 85 F1 | 	sub	fp, #48
2b80c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b810     48 4E 05 F1 | 	add	fp, #72
2b814     A7 FA 61 FC | 	wrlong	result1, fp
2b818     18 4E 85 F1 | 	sub	fp, #24
2b81c     A7 1E 02 FB | 	rdlong	local01, fp
2b820     0B 1E 06 F1 | 	add	local01, #11
2b824     0F 41 48 FC | 	wrbyte	#32, local01
2b828     14 4E 05 F1 | 	add	fp, #20
2b82c     A7 12 02 FB | 	rdlong	arg01, fp
2b830     14 4E 85 F1 | 	sub	fp, #20
2b834     A7 14 02 FB | 	rdlong	arg02, fp
2b838     30 4E 85 F1 | 	sub	fp, #48
2b83c     00 16 06 F6 | 	mov	arg03, #0
2b840     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b844     30 4E 05 F1 | 	add	fp, #48
2b848     A7 12 02 FB | 	rdlong	arg01, fp
2b84c     1C 12 06 F1 | 	add	arg01, #28
2b850     09 01 68 FC | 	wrlong	#0, arg01
2b854     14 4E 05 F1 | 	add	fp, #20
2b858     A7 1E 02 FB | 	rdlong	local01, fp
2b85c     03 1E 06 F1 | 	add	local01, #3
2b860     0F 03 48 FC | 	wrbyte	#1, local01
2b864     04 4E 05 F1 | 	add	fp, #4
2b868     A7 1E 0A FB | 	rdlong	local01, fp wz
2b86c     48 4E 85 F1 | 	sub	fp, #72
2b870     E8 00 90 AD |  if_e	jmp	#LR__4478
2b874     44 4E 05 F1 | 	add	fp, #68
2b878     A7 1E 02 FB | 	rdlong	local01, fp
2b87c     30 1E 06 F1 | 	add	local01, #48
2b880     0F 1F 02 FB | 	rdlong	local01, local01
2b884     14 4E 05 F1 | 	add	fp, #20
2b888     A7 1E 62 FC | 	wrlong	local01, fp
2b88c     44 4E 85 F1 | 	sub	fp, #68
2b890     A7 12 02 F6 | 	mov	arg01, fp
2b894     34 4E 05 F1 | 	add	fp, #52
2b898     A7 14 02 FB | 	rdlong	arg02, fp
2b89c     48 4E 85 F1 | 	sub	fp, #72
2b8a0     00 16 06 F6 | 	mov	arg03, #0
2b8a4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2b8a8     10 4E 05 F1 | 	add	fp, #16
2b8ac     A7 FA 61 FC | 	wrlong	result1, fp
2b8b0     10 4E 85 F1 | 	sub	fp, #16
2b8b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b8b8     A0 00 90 5D |  if_ne	jmp	#LR__4478
2b8bc     44 4E 05 F1 | 	add	fp, #68
2b8c0     A7 12 02 FB | 	rdlong	arg01, fp
2b8c4     14 4E 05 F1 | 	add	fp, #20
2b8c8     A7 14 02 FB | 	rdlong	arg02, fp
2b8cc     58 4E 85 F1 | 	sub	fp, #88
2b8d0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2b8d4     10 4E 05 F1 | 	add	fp, #16
2b8d8     A7 FA 61 FC | 	wrlong	result1, fp
2b8dc     34 4E 05 F1 | 	add	fp, #52
2b8e0     A7 18 02 FB | 	rdlong	arg04, fp
2b8e4     04 4E 05 F1 | 	add	fp, #4
2b8e8     A7 1E 02 FB | 	rdlong	local01, fp
2b8ec     48 4E 85 F1 | 	sub	fp, #72
2b8f0     01 1E 86 F1 | 	sub	local01, #1
2b8f4     10 18 06 F1 | 	add	arg04, #16
2b8f8     0C 1F 62 FC | 	wrlong	local01, arg04
2b8fc     5C 00 90 FD | 	jmp	#LR__4478
2b900                 | LR__4475
2b900     10 4E 05 F1 | 	add	fp, #16
2b904     A7 18 0A FB | 	rdlong	arg04, fp wz
2b908     10 4E 85 F1 | 	sub	fp, #16
2b90c     4C 00 90 5D |  if_ne	jmp	#LR__4477
2b910     1A 4E 05 F1 | 	add	fp, #26
2b914     A7 18 C2 FA | 	rdbyte	arg04, fp
2b918     1A 4E 85 F1 | 	sub	fp, #26
2b91c     10 18 CE F7 | 	test	arg04, #16 wz
2b920     10 4E 05 51 |  if_ne	add	fp, #16
2b924     A7 08 68 5C |  if_ne	wrlong	#4, fp
2b928     10 4E 85 51 |  if_ne	sub	fp, #16
2b92c     2C 00 90 5D |  if_ne	jmp	#LR__4476
2b930     0C 4E 05 F1 | 	add	fp, #12
2b934     A7 18 C2 FA | 	rdbyte	arg04, fp
2b938     0C 4E 85 F1 | 	sub	fp, #12
2b93c     02 18 CE F7 | 	test	arg04, #2 wz
2b940     1A 4E 05 51 |  if_ne	add	fp, #26
2b944     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2b948     1A 4E 85 51 |  if_ne	sub	fp, #26
2b94c     01 1E CE 57 |  if_ne	test	local01, #1 wz
2b950     10 4E 05 51 |  if_ne	add	fp, #16
2b954     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b958     10 4E 85 51 |  if_ne	sub	fp, #16
2b95c                 | LR__4476
2b95c                 | LR__4477
2b95c                 | LR__4478
2b95c     10 4E 05 F1 | 	add	fp, #16
2b960     A7 1E 0A FB | 	rdlong	local01, fp wz
2b964     10 4E 85 F1 | 	sub	fp, #16
2b968     60 00 90 5D |  if_ne	jmp	#LR__4479
2b96c     0C 4E 05 F1 | 	add	fp, #12
2b970     A7 20 C2 FA | 	rdbyte	local02, fp
2b974     0C 4E 85 F1 | 	sub	fp, #12
2b978     08 20 CE F7 | 	test	local02, #8 wz
2b97c     0C 4E 05 51 |  if_ne	add	fp, #12
2b980     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2b984     40 20 46 55 |  if_ne	or	local02, #64
2b988     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2b98c     0C 4E 85 51 |  if_ne	sub	fp, #12
2b990     04 4E 05 F1 | 	add	fp, #4
2b994     A7 20 02 FB | 	rdlong	local02, fp
2b998     40 4E 05 F1 | 	add	fp, #64
2b99c     A7 1E 02 FB | 	rdlong	local01, fp
2b9a0     30 1E 06 F1 | 	add	local01, #48
2b9a4     0F 1F 02 FB | 	rdlong	local01, local01
2b9a8     20 20 06 F1 | 	add	local02, #32
2b9ac     10 1F 62 FC | 	wrlong	local01, local02
2b9b0     40 4E 85 F1 | 	sub	fp, #64
2b9b4     A7 20 02 FB | 	rdlong	local02, fp
2b9b8     2C 4E 05 F1 | 	add	fp, #44
2b9bc     A7 1E 02 FB | 	rdlong	local01, fp
2b9c0     30 4E 85 F1 | 	sub	fp, #48
2b9c4     24 20 06 F1 | 	add	local02, #36
2b9c8     10 1F 62 FC | 	wrlong	local01, local02
2b9cc                 | LR__4479
2b9cc     10 4E 05 F1 | 	add	fp, #16
2b9d0     A7 20 0A FB | 	rdlong	local02, fp wz
2b9d4     10 4E 85 F1 | 	sub	fp, #16
2b9d8     F4 02 90 5D |  if_ne	jmp	#LR__4485
2b9dc     04 4E 05 F1 | 	add	fp, #4
2b9e0     A7 20 02 FB | 	rdlong	local02, fp
2b9e4     40 4E 05 F1 | 	add	fp, #64
2b9e8     A7 12 02 FB | 	rdlong	arg01, fp
2b9ec     14 4E 85 F1 | 	sub	fp, #20
2b9f0     A7 14 02 FB | 	rdlong	arg02, fp
2b9f4     30 4E 85 F1 | 	sub	fp, #48
2b9f8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2b9fc     08 20 06 F1 | 	add	local02, #8
2ba00     10 FB 61 FC | 	wrlong	result1, local02
2ba04     04 4E 05 F1 | 	add	fp, #4
2ba08     A7 20 02 FB | 	rdlong	local02, fp
2ba0c     2C 4E 05 F1 | 	add	fp, #44
2ba10     A7 12 02 FB | 	rdlong	arg01, fp
2ba14     1C 12 06 F1 | 	add	arg01, #28
2ba18                 | ' {
2ba18                 | ' 
2ba18                 | ' 	return *((DWORD*)ptr);
2ba18     09 FB 01 FB | 	rdlong	result1, arg01
2ba1c     0C 20 06 F1 | 	add	local02, #12
2ba20     10 FB 61 FC | 	wrlong	result1, local02
2ba24     2C 4E 85 F1 | 	sub	fp, #44
2ba28     A7 20 02 FB | 	rdlong	local02, fp
2ba2c     40 4E 05 F1 | 	add	fp, #64
2ba30     A7 1E 02 FB | 	rdlong	local01, fp
2ba34     10 1F 62 FC | 	wrlong	local01, local02
2ba38     40 4E 85 F1 | 	sub	fp, #64
2ba3c     A7 20 02 FB | 	rdlong	local02, fp
2ba40     40 4E 05 F1 | 	add	fp, #64
2ba44     A7 1E 02 FB | 	rdlong	local01, fp
2ba48     06 1E 06 F1 | 	add	local01, #6
2ba4c     0F 1F E2 FA | 	rdword	local01, local01
2ba50     04 20 06 F1 | 	add	local02, #4
2ba54     10 1F 52 FC | 	wrword	local01, local02
2ba58     40 4E 85 F1 | 	sub	fp, #64
2ba5c     A7 20 02 FB | 	rdlong	local02, fp
2ba60     08 4E 05 F1 | 	add	fp, #8
2ba64     A7 1E C2 FA | 	rdbyte	local01, fp
2ba68     10 20 06 F1 | 	add	local02, #16
2ba6c     10 1F 42 FC | 	wrbyte	local01, local02
2ba70     08 4E 85 F1 | 	sub	fp, #8
2ba74     A7 20 02 FB | 	rdlong	local02, fp
2ba78     11 20 06 F1 | 	add	local02, #17
2ba7c     10 01 48 FC | 	wrbyte	#0, local02
2ba80     A7 20 02 FB | 	rdlong	local02, fp
2ba84     1C 20 06 F1 | 	add	local02, #28
2ba88     10 01 68 FC | 	wrlong	#0, local02
2ba8c     A7 20 02 FB | 	rdlong	local02, fp
2ba90     14 20 06 F1 | 	add	local02, #20
2ba94     10 01 68 FC | 	wrlong	#0, local02
2ba98     A7 12 02 FB | 	rdlong	arg01, fp
2ba9c     04 4E 85 F1 | 	sub	fp, #4
2baa0     28 12 06 F1 | 	add	arg01, #40
2baa4     00 14 06 F6 | 	mov	arg02, #0
2baa8     09 16 C6 F9 | 	decod	arg03, #9
2baac     98 00 A0 FD | 	call	#\builtin_bytefill_
2bab0     0C 4E 05 F1 | 	add	fp, #12
2bab4     A7 20 C2 FA | 	rdbyte	local02, fp
2bab8     0C 4E 85 F1 | 	sub	fp, #12
2babc     20 20 CE F7 | 	test	local02, #32 wz
2bac0     0C 02 90 AD |  if_e	jmp	#LR__4484
2bac4     04 4E 05 F1 | 	add	fp, #4
2bac8     A7 1E 02 FB | 	rdlong	local01, fp
2bacc     04 4E 85 F1 | 	sub	fp, #4
2bad0     0C 1E 06 F1 | 	add	local01, #12
2bad4     0F 21 02 FB | 	rdlong	local02, local01
2bad8     01 20 16 F2 | 	cmp	local02, #1 wc
2badc     F0 01 90 CD |  if_b	jmp	#LR__4484
2bae0     04 4E 05 F1 | 	add	fp, #4
2bae4     A7 1E 02 FB | 	rdlong	local01, fp
2bae8     0F 21 02 F6 | 	mov	local02, local01
2baec     0C 1E 06 F1 | 	add	local01, #12
2baf0     0F 1F 02 FB | 	rdlong	local01, local01
2baf4     14 20 06 F1 | 	add	local02, #20
2baf8     10 1F 62 FC | 	wrlong	local01, local02
2bafc     40 4E 05 F1 | 	add	fp, #64
2bb00     A7 20 02 FB | 	rdlong	local02, fp
2bb04     0A 20 06 F1 | 	add	local02, #10
2bb08     10 21 E2 FA | 	rdword	local02, local02
2bb0c     09 20 66 F0 | 	shl	local02, #9
2bb10     08 4E 05 F1 | 	add	fp, #8
2bb14     A7 20 62 FC | 	wrlong	local02, fp
2bb18     48 4E 85 F1 | 	sub	fp, #72
2bb1c     A7 20 02 FB | 	rdlong	local02, fp
2bb20     08 20 06 F1 | 	add	local02, #8
2bb24     10 1F 02 FB | 	rdlong	local01, local02
2bb28     4C 4E 05 F1 | 	add	fp, #76
2bb2c     A7 1E 62 FC | 	wrlong	local01, fp
2bb30                 | ' 				fp->fptr = fp->obj.objsize;
2bb30                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bb30                 | ' 				clst = fp->obj.sclust;
2bb30                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bb30     4C 4E 85 F1 | 	sub	fp, #76
2bb34     A7 20 02 FB | 	rdlong	local02, fp
2bb38     0C 20 06 F1 | 	add	local02, #12
2bb3c     10 1F 02 FB | 	rdlong	local01, local02
2bb40     58 4E 05 F1 | 	add	fp, #88
2bb44     A7 1E 62 FC | 	wrlong	local01, fp
2bb48     5C 4E 85 F1 | 	sub	fp, #92
2bb4c                 | LR__4480
2bb4c     10 4E 05 F1 | 	add	fp, #16
2bb50     A7 20 0A FB | 	rdlong	local02, fp wz
2bb54     10 4E 85 F1 | 	sub	fp, #16
2bb58     94 00 90 5D |  if_ne	jmp	#LR__4481
2bb5c     5C 4E 05 F1 | 	add	fp, #92
2bb60     A7 20 02 FB | 	rdlong	local02, fp
2bb64     10 4E 85 F1 | 	sub	fp, #16
2bb68     A7 1E 02 FB | 	rdlong	local01, fp
2bb6c     4C 4E 85 F1 | 	sub	fp, #76
2bb70     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bb74     78 00 90 ED |  if_be	jmp	#LR__4481
2bb78     04 4E 05 F1 | 	add	fp, #4
2bb7c     A7 12 02 FB | 	rdlong	arg01, fp
2bb80     4C 4E 05 F1 | 	add	fp, #76
2bb84     A7 14 02 FB | 	rdlong	arg02, fp
2bb88     50 4E 85 F1 | 	sub	fp, #80
2bb8c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bb90     50 4E 05 F1 | 	add	fp, #80
2bb94     A7 FA 61 FC | 	wrlong	result1, fp
2bb98     50 4E 85 F1 | 	sub	fp, #80
2bb9c     02 FA 15 F2 | 	cmp	result1, #2 wc
2bba0     10 4E 05 C1 |  if_b	add	fp, #16
2bba4     A7 04 68 CC |  if_b	wrlong	#2, fp
2bba8     10 4E 85 C1 |  if_b	sub	fp, #16
2bbac     50 4E 05 F1 | 	add	fp, #80
2bbb0     A7 20 02 FB | 	rdlong	local02, fp
2bbb4     50 4E 85 F1 | 	sub	fp, #80
2bbb8     FF FF 7F FF 
2bbbc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bbc0     10 4E 05 A1 |  if_e	add	fp, #16
2bbc4     A7 02 68 AC |  if_e	wrlong	#1, fp
2bbc8     10 4E 85 A1 |  if_e	sub	fp, #16
2bbcc     5C 4E 05 F1 | 	add	fp, #92
2bbd0     A7 20 02 FB | 	rdlong	local02, fp
2bbd4     10 4E 85 F1 | 	sub	fp, #16
2bbd8     A7 1E 02 FB | 	rdlong	local01, fp
2bbdc     0F 21 82 F1 | 	sub	local02, local01
2bbe0     10 4E 05 F1 | 	add	fp, #16
2bbe4     A7 20 62 FC | 	wrlong	local02, fp
2bbe8     5C 4E 85 F1 | 	sub	fp, #92
2bbec     5C FF 9F FD | 	jmp	#LR__4480
2bbf0                 | LR__4481
2bbf0     04 4E 05 F1 | 	add	fp, #4
2bbf4     A7 20 02 FB | 	rdlong	local02, fp
2bbf8     4C 4E 05 F1 | 	add	fp, #76
2bbfc     A7 1E 02 FB | 	rdlong	local01, fp
2bc00     18 20 06 F1 | 	add	local02, #24
2bc04     10 1F 62 FC | 	wrlong	local01, local02
2bc08     40 4E 85 F1 | 	sub	fp, #64
2bc0c     A7 20 0A FB | 	rdlong	local02, fp wz
2bc10     10 4E 85 F1 | 	sub	fp, #16
2bc14     B8 00 90 5D |  if_ne	jmp	#LR__4483
2bc18     5C 4E 05 F1 | 	add	fp, #92
2bc1c     A7 1E 02 FB | 	rdlong	local01, fp
2bc20     5C 4E 85 F1 | 	sub	fp, #92
2bc24     FF 1F CE F7 | 	test	local01, #511 wz
2bc28     A4 00 90 AD |  if_e	jmp	#LR__4483
2bc2c     44 4E 05 F1 | 	add	fp, #68
2bc30     A7 12 02 FB | 	rdlong	arg01, fp
2bc34     0C 4E 05 F1 | 	add	fp, #12
2bc38     A7 14 02 FB | 	rdlong	arg02, fp
2bc3c     50 4E 85 F1 | 	sub	fp, #80
2bc40     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bc44     58 4E 05 F1 | 	add	fp, #88
2bc48     A7 FA 61 FC | 	wrlong	result1, fp
2bc4c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc50     58 4E 85 F1 | 	sub	fp, #88
2bc54     10 4E 05 A1 |  if_e	add	fp, #16
2bc58     A7 04 68 AC |  if_e	wrlong	#2, fp
2bc5c     10 4E 85 A1 |  if_e	sub	fp, #16
2bc60     6C 00 90 AD |  if_e	jmp	#LR__4482
2bc64     04 4E 05 F1 | 	add	fp, #4
2bc68     A7 20 02 FB | 	rdlong	local02, fp
2bc6c     54 4E 05 F1 | 	add	fp, #84
2bc70     A7 1E 02 FB | 	rdlong	local01, fp
2bc74     04 4E 05 F1 | 	add	fp, #4
2bc78     A7 18 02 FB | 	rdlong	arg04, fp
2bc7c     09 18 46 F0 | 	shr	arg04, #9
2bc80     0C 1F 02 F1 | 	add	local01, arg04
2bc84     1C 20 06 F1 | 	add	local02, #28
2bc88     10 1F 62 FC | 	wrlong	local01, local02
2bc8c     18 4E 85 F1 | 	sub	fp, #24
2bc90     A7 20 02 FB | 	rdlong	local02, fp
2bc94     01 20 06 F1 | 	add	local02, #1
2bc98     10 13 C2 FA | 	rdbyte	arg01, local02
2bc9c     40 4E 85 F1 | 	sub	fp, #64
2bca0     A7 20 02 FB | 	rdlong	local02, fp
2bca4     10 15 02 F6 | 	mov	arg02, local02
2bca8     28 14 06 F1 | 	add	arg02, #40
2bcac     04 4E 85 F1 | 	sub	fp, #4
2bcb0     1C 20 06 F1 | 	add	local02, #28
2bcb4     10 17 02 FB | 	rdlong	arg03, local02
2bcb8     01 18 06 F6 | 	mov	arg04, #1
2bcbc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bcc0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bcc4     10 4E 05 51 |  if_ne	add	fp, #16
2bcc8     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bccc     10 4E 85 51 |  if_ne	sub	fp, #16
2bcd0                 | LR__4482
2bcd0                 | LR__4483
2bcd0                 | LR__4484
2bcd0                 | LR__4485
2bcd0                 | LR__4486
2bcd0     10 4E 05 F1 | 	add	fp, #16
2bcd4     A7 20 0A FB | 	rdlong	local02, fp wz
2bcd8     10 4E 85 F1 | 	sub	fp, #16
2bcdc     04 4E 05 51 |  if_ne	add	fp, #4
2bce0     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bce4     04 4E 85 51 |  if_ne	sub	fp, #4
2bce8     10 01 68 5C |  if_ne	wrlong	#0, local02
2bcec                 | ' 
2bcec                 | ' 	return res ;
2bcec     10 4E 05 F1 | 	add	fp, #16
2bcf0     A7 FA 01 FB | 	rdlong	result1, fp
2bcf4     10 4E 85 F1 | 	sub	fp, #16
2bcf8                 | LR__4487
2bcf8     A7 F0 03 F6 | 	mov	ptra, fp
2bcfc     B2 00 A0 FD | 	call	#popregs_
2bd00                 | _fatfs_cc_f_open_ret
2bd00     2D 00 64 FD | 	ret
2bd04                 | 
2bd04                 | _fatfs_cc_f_read
2bd04     0E 4A 05 F6 | 	mov	COUNT_, #14
2bd08     A8 00 A0 FD | 	call	#pushregs_
2bd0c     38 F0 07 F1 | 	add	ptra, #56
2bd10     04 4E 05 F1 | 	add	fp, #4
2bd14     A7 12 62 FC | 	wrlong	arg01, fp
2bd18     04 4E 05 F1 | 	add	fp, #4
2bd1c     A7 14 62 FC | 	wrlong	arg02, fp
2bd20     04 4E 05 F1 | 	add	fp, #4
2bd24     A7 16 62 FC | 	wrlong	arg03, fp
2bd28     04 4E 05 F1 | 	add	fp, #4
2bd2c     A7 18 62 FC | 	wrlong	arg04, fp
2bd30     08 4E 85 F1 | 	sub	fp, #8
2bd34     A7 FA 01 FB | 	rdlong	result1, fp
2bd38     2C 4E 05 F1 | 	add	fp, #44
2bd3c     A7 FA 61 FC | 	wrlong	result1, fp
2bd40     24 4E 85 F1 | 	sub	fp, #36
2bd44     A7 FA 01 FB | 	rdlong	result1, fp
2bd48     FD 00 68 FC | 	wrlong	#0, result1
2bd4c     0C 4E 85 F1 | 	sub	fp, #12
2bd50     A7 12 02 FB | 	rdlong	arg01, fp
2bd54     14 4E 05 F1 | 	add	fp, #20
2bd58     A7 14 02 F6 | 	mov	arg02, fp
2bd5c     18 4E 85 F1 | 	sub	fp, #24
2bd60     24 F7 BF FD | 	call	#_fatfs_cc_validate
2bd64     14 4E 05 F1 | 	add	fp, #20
2bd68     A7 FA 61 FC | 	wrlong	result1, fp
2bd6c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd70     14 4E 85 F1 | 	sub	fp, #20
2bd74     20 00 90 5D |  if_ne	jmp	#LR__4490
2bd78     04 4E 05 F1 | 	add	fp, #4
2bd7c     A7 14 02 FB | 	rdlong	arg02, fp
2bd80     11 14 06 F1 | 	add	arg02, #17
2bd84     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2bd88     10 4E 05 F1 | 	add	fp, #16
2bd8c     A7 14 62 FC | 	wrlong	arg02, fp
2bd90     14 4E 85 F1 | 	sub	fp, #20
2bd94     10 00 90 AD |  if_e	jmp	#LR__4491
2bd98                 | LR__4490
2bd98     14 4E 05 F1 | 	add	fp, #20
2bd9c     A7 FA 01 FB | 	rdlong	result1, fp
2bda0     14 4E 85 F1 | 	sub	fp, #20
2bda4     EC 05 90 FD | 	jmp	#LR__4510
2bda8                 | LR__4491
2bda8     04 4E 05 F1 | 	add	fp, #4
2bdac     A7 18 02 FB | 	rdlong	arg04, fp
2bdb0     04 4E 85 F1 | 	sub	fp, #4
2bdb4     10 18 06 F1 | 	add	arg04, #16
2bdb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bdbc     01 18 CE F7 | 	test	arg04, #1 wz
2bdc0     07 FA 05 A6 |  if_e	mov	result1, #7
2bdc4     CC 05 90 AD |  if_e	jmp	#LR__4510
2bdc8     04 4E 05 F1 | 	add	fp, #4
2bdcc     A7 1E 02 FB | 	rdlong	local01, fp
2bdd0     0F 21 02 F6 | 	mov	local02, local01
2bdd4     0C 20 06 F1 | 	add	local02, #12
2bdd8     10 23 02 FB | 	rdlong	local03, local02
2bddc     14 1E 06 F1 | 	add	local01, #20
2bde0     0F 1F 02 FB | 	rdlong	local01, local01
2bde4     0F 23 82 F1 | 	sub	local03, local01
2bde8     20 4E 05 F1 | 	add	fp, #32
2bdec     A7 22 62 FC | 	wrlong	local03, fp
2bdf0     18 4E 85 F1 | 	sub	fp, #24
2bdf4     A7 24 02 FB | 	rdlong	local04, fp
2bdf8     0C 4E 85 F1 | 	sub	fp, #12
2bdfc     11 25 1A F2 | 	cmp	local04, local03 wcz
2be00     24 4E 05 11 |  if_a	add	fp, #36
2be04     A7 24 02 1B |  if_a	rdlong	local04, fp
2be08     18 4E 85 11 |  if_a	sub	fp, #24
2be0c     A7 24 62 1C |  if_a	wrlong	local04, fp
2be10     0C 4E 85 11 |  if_a	sub	fp, #12
2be14                 | ' 
2be14                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2be14                 | LR__4492
2be14     0C 4E 05 F1 | 	add	fp, #12
2be18     A7 20 02 FB | 	rdlong	local02, fp
2be1c     0C 4E 85 F1 | 	sub	fp, #12
2be20     10 25 02 F6 | 	mov	local04, local02
2be24     01 24 16 F2 | 	cmp	local04, #1 wc
2be28     64 05 90 CD |  if_b	jmp	#LR__4509
2be2c     04 4E 05 F1 | 	add	fp, #4
2be30     A7 22 02 FB | 	rdlong	local03, fp
2be34     04 4E 85 F1 | 	sub	fp, #4
2be38     14 22 06 F1 | 	add	local03, #20
2be3c     11 23 02 FB | 	rdlong	local03, local03
2be40     FF 23 CE F7 | 	test	local03, #511 wz
2be44     3C 04 90 5D |  if_ne	jmp	#LR__4507
2be48     04 4E 05 F1 | 	add	fp, #4
2be4c     A7 1E 02 FB | 	rdlong	local01, fp
2be50     14 1E 06 F1 | 	add	local01, #20
2be54     0F 23 02 FB | 	rdlong	local03, local01
2be58     09 22 46 F0 | 	shr	local03, #9
2be5c     14 4E 05 F1 | 	add	fp, #20
2be60     A7 26 02 FB | 	rdlong	local05, fp
2be64     13 29 02 F6 | 	mov	local06, local05
2be68     0A 28 06 F1 | 	add	local06, #10
2be6c     14 2B E2 FA | 	rdword	local07, local06
2be70     0A 28 86 F1 | 	sub	local06, #10
2be74     15 2D 32 F9 | 	getword	local08, local07, #0
2be78     01 2C 86 F1 | 	sub	local08, #1
2be7c     16 23 0A F5 | 	and	local03, local08 wz
2be80     18 4E 05 F1 | 	add	fp, #24
2be84     A7 22 62 FC | 	wrlong	local03, fp
2be88     30 4E 85 F1 | 	sub	fp, #48
2be8c     E0 00 90 5D |  if_ne	jmp	#LR__4497
2be90     04 4E 05 F1 | 	add	fp, #4
2be94     A7 22 02 FB | 	rdlong	local03, fp
2be98     04 4E 85 F1 | 	sub	fp, #4
2be9c     14 22 06 F1 | 	add	local03, #20
2bea0     11 23 0A FB | 	rdlong	local03, local03 wz
2bea4     20 00 90 5D |  if_ne	jmp	#LR__4493
2bea8     04 4E 05 F1 | 	add	fp, #4
2beac     A7 22 02 FB | 	rdlong	local03, fp
2beb0     08 22 06 F1 | 	add	local03, #8
2beb4     11 23 02 FB | 	rdlong	local03, local03
2beb8     18 4E 05 F1 | 	add	fp, #24
2bebc     A7 22 62 FC | 	wrlong	local03, fp
2bec0     1C 4E 85 F1 | 	sub	fp, #28
2bec4     28 00 90 FD | 	jmp	#LR__4494
2bec8                 | LR__4493
2bec8     04 4E 05 F1 | 	add	fp, #4
2becc     A7 2C 02 FB | 	rdlong	local08, fp
2bed0     16 13 02 F6 | 	mov	arg01, local08
2bed4     04 4E 85 F1 | 	sub	fp, #4
2bed8     18 2C 06 F1 | 	add	local08, #24
2bedc     16 15 02 FB | 	rdlong	arg02, local08
2bee0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2bee4     1C 4E 05 F1 | 	add	fp, #28
2bee8     A7 FA 61 FC | 	wrlong	result1, fp
2beec     1C 4E 85 F1 | 	sub	fp, #28
2bef0                 | LR__4494
2bef0     1C 4E 05 F1 | 	add	fp, #28
2bef4     A7 22 02 FB | 	rdlong	local03, fp
2bef8     1C 4E 85 F1 | 	sub	fp, #28
2befc     02 22 16 F2 | 	cmp	local03, #2 wc
2bf00     1C 00 90 3D |  if_ae	jmp	#LR__4495
2bf04     04 4E 05 F1 | 	add	fp, #4
2bf08     A7 22 02 FB | 	rdlong	local03, fp
2bf0c     04 4E 85 F1 | 	sub	fp, #4
2bf10     11 22 06 F1 | 	add	local03, #17
2bf14     11 05 48 FC | 	wrbyte	#2, local03
2bf18     02 FA 05 F6 | 	mov	result1, #2
2bf1c     74 04 90 FD | 	jmp	#LR__4510
2bf20                 | LR__4495
2bf20     1C 4E 05 F1 | 	add	fp, #28
2bf24     A7 22 02 FB | 	rdlong	local03, fp
2bf28     1C 4E 85 F1 | 	sub	fp, #28
2bf2c     FF FF 7F FF 
2bf30     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2bf34     1C 00 90 5D |  if_ne	jmp	#LR__4496
2bf38     04 4E 05 F1 | 	add	fp, #4
2bf3c     A7 22 02 FB | 	rdlong	local03, fp
2bf40     04 4E 85 F1 | 	sub	fp, #4
2bf44     11 22 06 F1 | 	add	local03, #17
2bf48     11 03 48 FC | 	wrbyte	#1, local03
2bf4c     01 FA 05 F6 | 	mov	result1, #1
2bf50     40 04 90 FD | 	jmp	#LR__4510
2bf54                 | LR__4496
2bf54     04 4E 05 F1 | 	add	fp, #4
2bf58     A7 22 02 FB | 	rdlong	local03, fp
2bf5c     18 4E 05 F1 | 	add	fp, #24
2bf60     A7 2C 02 FB | 	rdlong	local08, fp
2bf64     1C 4E 85 F1 | 	sub	fp, #28
2bf68     18 22 06 F1 | 	add	local03, #24
2bf6c     11 2D 62 FC | 	wrlong	local08, local03
2bf70                 | LR__4497
2bf70     18 4E 05 F1 | 	add	fp, #24
2bf74     A7 12 02 FB | 	rdlong	arg01, fp
2bf78     14 4E 85 F1 | 	sub	fp, #20
2bf7c     A7 22 02 FB | 	rdlong	local03, fp
2bf80     04 4E 85 F1 | 	sub	fp, #4
2bf84     18 22 06 F1 | 	add	local03, #24
2bf88     11 15 02 FB | 	rdlong	arg02, local03
2bf8c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2bf90     20 4E 05 F1 | 	add	fp, #32
2bf94     A7 FA 61 FC | 	wrlong	result1, fp
2bf98     20 4E 85 F1 | 	sub	fp, #32
2bf9c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bfa0     1C 00 90 5D |  if_ne	jmp	#LR__4498
2bfa4     04 4E 05 F1 | 	add	fp, #4
2bfa8     A7 22 02 FB | 	rdlong	local03, fp
2bfac     04 4E 85 F1 | 	sub	fp, #4
2bfb0     11 22 06 F1 | 	add	local03, #17
2bfb4     11 05 48 FC | 	wrbyte	#2, local03
2bfb8     02 FA 05 F6 | 	mov	result1, #2
2bfbc     D4 03 90 FD | 	jmp	#LR__4510
2bfc0                 | LR__4498
2bfc0     20 4E 05 F1 | 	add	fp, #32
2bfc4     A7 22 02 FB | 	rdlong	local03, fp
2bfc8     10 4E 05 F1 | 	add	fp, #16
2bfcc     A7 2C 02 FB | 	rdlong	local08, fp
2bfd0     16 23 02 F1 | 	add	local03, local08
2bfd4     10 4E 85 F1 | 	sub	fp, #16
2bfd8     A7 22 62 FC | 	wrlong	local03, fp
2bfdc     14 4E 85 F1 | 	sub	fp, #20
2bfe0     A7 22 02 FB | 	rdlong	local03, fp
2bfe4     09 22 46 F0 | 	shr	local03, #9
2bfe8     20 4E 05 F1 | 	add	fp, #32
2bfec     A7 22 62 FC | 	wrlong	local03, fp
2bff0     2C 4E 85 F1 | 	sub	fp, #44
2bff4     01 22 16 F2 | 	cmp	local03, #1 wc
2bff8     5C 01 90 CD |  if_b	jmp	#LR__4502
2bffc     30 4E 05 F1 | 	add	fp, #48
2c000     A7 22 02 FB | 	rdlong	local03, fp
2c004     04 4E 85 F1 | 	sub	fp, #4
2c008     A7 2C 02 FB | 	rdlong	local08, fp
2c00c     16 23 02 F1 | 	add	local03, local08
2c010     14 4E 85 F1 | 	sub	fp, #20
2c014     A7 2C 02 FB | 	rdlong	local08, fp
2c018     18 4E 85 F1 | 	sub	fp, #24
2c01c     0A 2C 06 F1 | 	add	local08, #10
2c020     16 2D E2 FA | 	rdword	local08, local08
2c024     16 23 1A F2 | 	cmp	local03, local08 wcz
2c028     28 00 90 ED |  if_be	jmp	#LR__4499
2c02c     18 4E 05 F1 | 	add	fp, #24
2c030     A7 1E 02 FB | 	rdlong	local01, fp
2c034     0A 1E 06 F1 | 	add	local01, #10
2c038     0F 23 E2 FA | 	rdword	local03, local01
2c03c     18 4E 05 F1 | 	add	fp, #24
2c040     A7 2C 02 FB | 	rdlong	local08, fp
2c044     16 23 82 F1 | 	sub	local03, local08
2c048     04 4E 85 F1 | 	sub	fp, #4
2c04c     A7 22 62 FC | 	wrlong	local03, fp
2c050     2C 4E 85 F1 | 	sub	fp, #44
2c054                 | LR__4499
2c054     18 4E 05 F1 | 	add	fp, #24
2c058     A7 1E 02 FB | 	rdlong	local01, fp
2c05c     01 1E 06 F1 | 	add	local01, #1
2c060     0F 13 C2 FA | 	rdbyte	arg01, local01
2c064     1C 4E 05 F1 | 	add	fp, #28
2c068     A7 14 02 FB | 	rdlong	arg02, fp
2c06c     14 4E 85 F1 | 	sub	fp, #20
2c070     A7 16 02 FB | 	rdlong	arg03, fp
2c074     0C 4E 05 F1 | 	add	fp, #12
2c078     A7 18 02 FB | 	rdlong	arg04, fp
2c07c     2C 4E 85 F1 | 	sub	fp, #44
2c080     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c084     00 FA 0D F2 | 	cmp	result1, #0 wz
2c088     1C 00 90 AD |  if_e	jmp	#LR__4500
2c08c     04 4E 05 F1 | 	add	fp, #4
2c090     A7 22 02 FB | 	rdlong	local03, fp
2c094     04 4E 85 F1 | 	sub	fp, #4
2c098     11 22 06 F1 | 	add	local03, #17
2c09c     11 03 48 FC | 	wrbyte	#1, local03
2c0a0     01 FA 05 F6 | 	mov	result1, #1
2c0a4     EC 02 90 FD | 	jmp	#LR__4510
2c0a8                 | LR__4500
2c0a8     04 4E 05 F1 | 	add	fp, #4
2c0ac     A7 1E 02 FB | 	rdlong	local01, fp
2c0b0     04 4E 85 F1 | 	sub	fp, #4
2c0b4     10 1E 06 F1 | 	add	local01, #16
2c0b8     0F 23 C2 FA | 	rdbyte	local03, local01
2c0bc     80 22 CE F7 | 	test	local03, #128 wz
2c0c0     78 00 90 AD |  if_e	jmp	#LR__4501
2c0c4     04 4E 05 F1 | 	add	fp, #4
2c0c8     A7 2C 02 FB | 	rdlong	local08, fp
2c0cc     1C 2C 06 F1 | 	add	local08, #28
2c0d0     16 2D 02 FB | 	rdlong	local08, local08
2c0d4     1C 4E 05 F1 | 	add	fp, #28
2c0d8     A7 2E 02 FB | 	rdlong	local09, fp
2c0dc     17 2D 82 F1 | 	sub	local08, local09
2c0e0     0C 4E 05 F1 | 	add	fp, #12
2c0e4     A7 30 02 FB | 	rdlong	local10, fp
2c0e8     2C 4E 85 F1 | 	sub	fp, #44
2c0ec     18 33 02 F6 | 	mov	local11, local10
2c0f0     19 2D 12 F2 | 	cmp	local08, local11 wc
2c0f4     44 00 90 3D |  if_ae	jmp	#LR__4501
2c0f8     34 4E 05 F1 | 	add	fp, #52
2c0fc     A7 12 02 FB | 	rdlong	arg01, fp
2c100     30 4E 85 F1 | 	sub	fp, #48
2c104     A7 14 02 FB | 	rdlong	arg02, fp
2c108     0A 33 02 F6 | 	mov	local11, arg02
2c10c     1C 32 06 F1 | 	add	local11, #28
2c110     19 2F 02 FB | 	rdlong	local09, local11
2c114     1C 4E 05 F1 | 	add	fp, #28
2c118     A7 26 02 FB | 	rdlong	local05, fp
2c11c     13 2F 82 F1 | 	sub	local09, local05
2c120     09 2E 66 F0 | 	shl	local09, #9
2c124     17 33 02 F6 | 	mov	local11, local09
2c128     17 13 02 F1 | 	add	arg01, local09
2c12c     20 4E 85 F1 | 	sub	fp, #32
2c130     28 14 06 F1 | 	add	arg02, #40
2c134     09 16 C6 F9 | 	decod	arg03, #9
2c138     28 46 BF FD | 	call	#__system____builtin_memmove
2c13c                 | LR__4501
2c13c     2C 4E 05 F1 | 	add	fp, #44
2c140     A7 22 02 FB | 	rdlong	local03, fp
2c144     09 22 66 F0 | 	shl	local03, #9
2c148     04 4E 85 F1 | 	sub	fp, #4
2c14c     A7 22 62 FC | 	wrlong	local03, fp
2c150     28 4E 85 F1 | 	sub	fp, #40
2c154                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c154                 | ' 				}
2c154                 | ' 
2c154                 | ' 
2c154                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c154                 | ' 				continue;
2c154     B4 01 90 FD | 	jmp	#LR__4508
2c158                 | LR__4502
2c158     04 4E 05 F1 | 	add	fp, #4
2c15c     A7 22 02 FB | 	rdlong	local03, fp
2c160     1C 22 06 F1 | 	add	local03, #28
2c164     11 23 02 FB | 	rdlong	local03, local03
2c168     1C 4E 05 F1 | 	add	fp, #28
2c16c     A7 1E 02 FB | 	rdlong	local01, fp
2c170     20 4E 85 F1 | 	sub	fp, #32
2c174     0F 23 0A F2 | 	cmp	local03, local01 wz
2c178     EC 00 90 AD |  if_e	jmp	#LR__4506
2c17c     04 4E 05 F1 | 	add	fp, #4
2c180     A7 1E 02 FB | 	rdlong	local01, fp
2c184     04 4E 85 F1 | 	sub	fp, #4
2c188     10 1E 06 F1 | 	add	local01, #16
2c18c     0F 23 C2 FA | 	rdbyte	local03, local01
2c190     80 22 CE F7 | 	test	local03, #128 wz
2c194     7C 00 90 AD |  if_e	jmp	#LR__4504
2c198     18 4E 05 F1 | 	add	fp, #24
2c19c     A7 1E 02 FB | 	rdlong	local01, fp
2c1a0     01 1E 06 F1 | 	add	local01, #1
2c1a4     0F 13 C2 FA | 	rdbyte	arg01, local01
2c1a8     14 4E 85 F1 | 	sub	fp, #20
2c1ac     A7 22 02 FB | 	rdlong	local03, fp
2c1b0     11 15 02 F6 | 	mov	arg02, local03
2c1b4     28 14 06 F1 | 	add	arg02, #40
2c1b8     04 4E 85 F1 | 	sub	fp, #4
2c1bc     1C 22 06 F1 | 	add	local03, #28
2c1c0     11 17 02 FB | 	rdlong	arg03, local03
2c1c4     01 18 06 F6 | 	mov	arg04, #1
2c1c8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1d0     1C 00 90 AD |  if_e	jmp	#LR__4503
2c1d4     04 4E 05 F1 | 	add	fp, #4
2c1d8     A7 22 02 FB | 	rdlong	local03, fp
2c1dc     04 4E 85 F1 | 	sub	fp, #4
2c1e0     11 22 06 F1 | 	add	local03, #17
2c1e4     11 03 48 FC | 	wrbyte	#1, local03
2c1e8     01 FA 05 F6 | 	mov	result1, #1
2c1ec     A4 01 90 FD | 	jmp	#LR__4510
2c1f0                 | LR__4503
2c1f0     04 4E 05 F1 | 	add	fp, #4
2c1f4     A7 32 02 FB | 	rdlong	local11, fp
2c1f8     19 23 02 F6 | 	mov	local03, local11
2c1fc     04 4E 85 F1 | 	sub	fp, #4
2c200     10 32 06 F1 | 	add	local11, #16
2c204     19 33 C2 FA | 	rdbyte	local11, local11
2c208     7F 32 06 F5 | 	and	local11, #127
2c20c     10 22 06 F1 | 	add	local03, #16
2c210     11 33 42 FC | 	wrbyte	local11, local03
2c214                 | LR__4504
2c214     18 4E 05 F1 | 	add	fp, #24
2c218     A7 1E 02 FB | 	rdlong	local01, fp
2c21c     01 1E 06 F1 | 	add	local01, #1
2c220     0F 13 C2 FA | 	rdbyte	arg01, local01
2c224     14 4E 85 F1 | 	sub	fp, #20
2c228     A7 14 02 FB | 	rdlong	arg02, fp
2c22c     28 14 06 F1 | 	add	arg02, #40
2c230     1C 4E 05 F1 | 	add	fp, #28
2c234     A7 16 02 FB | 	rdlong	arg03, fp
2c238     20 4E 85 F1 | 	sub	fp, #32
2c23c     01 18 06 F6 | 	mov	arg04, #1
2c240     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c244     00 FA 0D F2 | 	cmp	result1, #0 wz
2c248     1C 00 90 AD |  if_e	jmp	#LR__4505
2c24c     04 4E 05 F1 | 	add	fp, #4
2c250     A7 22 02 FB | 	rdlong	local03, fp
2c254     04 4E 85 F1 | 	sub	fp, #4
2c258     11 22 06 F1 | 	add	local03, #17
2c25c     11 03 48 FC | 	wrbyte	#1, local03
2c260     01 FA 05 F6 | 	mov	result1, #1
2c264     2C 01 90 FD | 	jmp	#LR__4510
2c268                 | LR__4505
2c268                 | LR__4506
2c268     04 4E 05 F1 | 	add	fp, #4
2c26c     A7 22 02 FB | 	rdlong	local03, fp
2c270     1C 4E 05 F1 | 	add	fp, #28
2c274     A7 32 02 FB | 	rdlong	local11, fp
2c278     20 4E 85 F1 | 	sub	fp, #32
2c27c     1C 22 06 F1 | 	add	local03, #28
2c280     11 33 62 FC | 	wrlong	local11, local03
2c284                 | LR__4507
2c284     04 4E 05 F1 | 	add	fp, #4
2c288     A7 1E 02 FB | 	rdlong	local01, fp
2c28c     14 1E 06 F1 | 	add	local01, #20
2c290     0F 33 02 FB | 	rdlong	local11, local01
2c294     FF 33 06 F5 | 	and	local11, #511
2c298     09 22 C6 F9 | 	decod	local03, #9
2c29c     19 23 82 F1 | 	sub	local03, local11
2c2a0     24 4E 05 F1 | 	add	fp, #36
2c2a4     A7 22 62 FC | 	wrlong	local03, fp
2c2a8     1C 4E 85 F1 | 	sub	fp, #28
2c2ac     A7 32 02 FB | 	rdlong	local11, fp
2c2b0     0C 4E 85 F1 | 	sub	fp, #12
2c2b4     19 23 1A F2 | 	cmp	local03, local11 wcz
2c2b8     0C 4E 05 11 |  if_a	add	fp, #12
2c2bc     A7 22 02 1B |  if_a	rdlong	local03, fp
2c2c0     1C 4E 05 11 |  if_a	add	fp, #28
2c2c4     A7 22 62 1C |  if_a	wrlong	local03, fp
2c2c8     28 4E 85 11 |  if_a	sub	fp, #40
2c2cc     34 4E 05 F1 | 	add	fp, #52
2c2d0     A7 12 02 FB | 	rdlong	arg01, fp
2c2d4     30 4E 85 F1 | 	sub	fp, #48
2c2d8     A7 28 02 FB | 	rdlong	local06, fp
2c2dc     14 15 02 F6 | 	mov	arg02, local06
2c2e0     28 14 06 F1 | 	add	arg02, #40
2c2e4     14 28 06 F1 | 	add	local06, #20
2c2e8     14 33 02 FB | 	rdlong	local11, local06
2c2ec     19 2F 02 F6 | 	mov	local09, local11
2c2f0     17 31 02 F6 | 	mov	local10, local09
2c2f4     FF 31 06 F5 | 	and	local10, #511
2c2f8     18 15 02 F1 | 	add	arg02, local10
2c2fc     24 4E 05 F1 | 	add	fp, #36
2c300     A7 16 02 FB | 	rdlong	arg03, fp
2c304     28 4E 85 F1 | 	sub	fp, #40
2c308     58 44 BF FD | 	call	#__system____builtin_memmove
2c30c                 | LR__4508
2c30c     0C 4E 05 F1 | 	add	fp, #12
2c310     A7 22 02 FB | 	rdlong	local03, fp
2c314     1C 4E 05 F1 | 	add	fp, #28
2c318     A7 2C 02 FB | 	rdlong	local08, fp
2c31c     16 23 82 F1 | 	sub	local03, local08
2c320     1C 4E 85 F1 | 	sub	fp, #28
2c324     A7 22 62 FC | 	wrlong	local03, fp
2c328     04 4E 05 F1 | 	add	fp, #4
2c32c     A7 1E 02 FB | 	rdlong	local01, fp
2c330     0F 2B 02 FB | 	rdlong	local07, local01
2c334     18 4E 05 F1 | 	add	fp, #24
2c338     A7 2C 02 FB | 	rdlong	local08, fp
2c33c     16 2B 02 F1 | 	add	local07, local08
2c340     0F 2B 62 FC | 	wrlong	local07, local01
2c344     0C 4E 05 F1 | 	add	fp, #12
2c348     A7 22 02 FB | 	rdlong	local03, fp
2c34c     0C 4E 85 F1 | 	sub	fp, #12
2c350     A7 34 02 FB | 	rdlong	local12, fp
2c354     1A 23 02 F1 | 	add	local03, local12
2c358     0C 4E 05 F1 | 	add	fp, #12
2c35c     A7 22 62 FC | 	wrlong	local03, fp
2c360     30 4E 85 F1 | 	sub	fp, #48
2c364     A7 36 02 FB | 	rdlong	local13, fp
2c368     1B 23 02 F6 | 	mov	local03, local13
2c36c     14 36 06 F1 | 	add	local13, #20
2c370     1B 39 02 FB | 	rdlong	local14, local13
2c374     24 4E 05 F1 | 	add	fp, #36
2c378     A7 28 02 FB | 	rdlong	local06, fp
2c37c     28 4E 85 F1 | 	sub	fp, #40
2c380     14 39 02 F1 | 	add	local14, local06
2c384     14 22 06 F1 | 	add	local03, #20
2c388     11 39 62 FC | 	wrlong	local14, local03
2c38c     84 FA 9F FD | 	jmp	#LR__4492
2c390                 | LR__4509
2c390                 | ' 
2c390                 | ' 
2c390                 | ' 
2c390                 | ' 
2c390                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c390                 | ' 
2c390                 | ' 	}
2c390                 | ' 
2c390                 | ' 	return FR_OK ;
2c390     00 FA 05 F6 | 	mov	result1, #0
2c394                 | LR__4510
2c394     A7 F0 03 F6 | 	mov	ptra, fp
2c398     B2 00 A0 FD | 	call	#popregs_
2c39c                 | _fatfs_cc_f_read_ret
2c39c     2D 00 64 FD | 	ret
2c3a0                 | 
2c3a0                 | _fatfs_cc_f_write
2c3a0     15 4A 05 F6 | 	mov	COUNT_, #21
2c3a4     A8 00 A0 FD | 	call	#pushregs_
2c3a8     34 F0 07 F1 | 	add	ptra, #52
2c3ac     04 4E 05 F1 | 	add	fp, #4
2c3b0     A7 12 62 FC | 	wrlong	arg01, fp
2c3b4     04 4E 05 F1 | 	add	fp, #4
2c3b8     A7 14 62 FC | 	wrlong	arg02, fp
2c3bc     04 4E 05 F1 | 	add	fp, #4
2c3c0     A7 16 62 FC | 	wrlong	arg03, fp
2c3c4     04 4E 05 F1 | 	add	fp, #4
2c3c8     A7 18 62 FC | 	wrlong	arg04, fp
2c3cc     08 4E 85 F1 | 	sub	fp, #8
2c3d0     A7 FA 01 FB | 	rdlong	result1, fp
2c3d4     28 4E 05 F1 | 	add	fp, #40
2c3d8     A7 FA 61 FC | 	wrlong	result1, fp
2c3dc     20 4E 85 F1 | 	sub	fp, #32
2c3e0     A7 FA 01 FB | 	rdlong	result1, fp
2c3e4     FD 00 68 FC | 	wrlong	#0, result1
2c3e8     0C 4E 85 F1 | 	sub	fp, #12
2c3ec     A7 12 02 FB | 	rdlong	arg01, fp
2c3f0     14 4E 05 F1 | 	add	fp, #20
2c3f4     A7 14 02 F6 | 	mov	arg02, fp
2c3f8     18 4E 85 F1 | 	sub	fp, #24
2c3fc     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c400     14 4E 05 F1 | 	add	fp, #20
2c404     A7 FA 61 FC | 	wrlong	result1, fp
2c408     00 FA 4D F2 | 	cmps	result1, #0 wz
2c40c     14 4E 85 F1 | 	sub	fp, #20
2c410     20 00 90 5D |  if_ne	jmp	#LR__4520
2c414     04 4E 05 F1 | 	add	fp, #4
2c418     A7 14 02 FB | 	rdlong	arg02, fp
2c41c     11 14 06 F1 | 	add	arg02, #17
2c420     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c424     10 4E 05 F1 | 	add	fp, #16
2c428     A7 14 62 FC | 	wrlong	arg02, fp
2c42c     14 4E 85 F1 | 	sub	fp, #20
2c430     10 00 90 AD |  if_e	jmp	#LR__4521
2c434                 | LR__4520
2c434     14 4E 05 F1 | 	add	fp, #20
2c438     A7 FA 01 FB | 	rdlong	result1, fp
2c43c     14 4E 85 F1 | 	sub	fp, #20
2c440     44 07 90 FD | 	jmp	#LR__4543
2c444                 | LR__4521
2c444     04 4E 05 F1 | 	add	fp, #4
2c448     A7 14 02 FB | 	rdlong	arg02, fp
2c44c     04 4E 85 F1 | 	sub	fp, #4
2c450     10 14 06 F1 | 	add	arg02, #16
2c454     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c458     02 14 CE F7 | 	test	arg02, #2 wz
2c45c     07 FA 05 A6 |  if_e	mov	result1, #7
2c460     24 07 90 AD |  if_e	jmp	#LR__4543
2c464     04 4E 05 F1 | 	add	fp, #4
2c468     A7 14 02 FB | 	rdlong	arg02, fp
2c46c     0A 13 02 F6 | 	mov	arg01, arg02
2c470     14 12 06 F1 | 	add	arg01, #20
2c474     09 13 02 FB | 	rdlong	arg01, arg01
2c478     08 4E 05 F1 | 	add	fp, #8
2c47c     A7 FA 01 FB | 	rdlong	result1, fp
2c480     FD 12 02 F1 | 	add	arg01, result1
2c484     0C 4E 85 F1 | 	sub	fp, #12
2c488     14 14 06 F1 | 	add	arg02, #20
2c48c     0A FB 01 FB | 	rdlong	result1, arg02
2c490     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c494     24 00 90 3D |  if_ae	jmp	#LR__4522
2c498     04 4E 05 F1 | 	add	fp, #4
2c49c     A7 14 02 FB | 	rdlong	arg02, fp
2c4a0     01 FA 65 F6 | 	neg	result1, #1
2c4a4     14 14 06 F1 | 	add	arg02, #20
2c4a8     0A 15 02 FB | 	rdlong	arg02, arg02
2c4ac     0A FB 81 F1 | 	sub	result1, arg02
2c4b0     08 4E 05 F1 | 	add	fp, #8
2c4b4     A7 FA 61 FC | 	wrlong	result1, fp
2c4b8     0C 4E 85 F1 | 	sub	fp, #12
2c4bc                 | LR__4522
2c4bc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c4bc                 | ' 	}
2c4bc                 | ' 
2c4bc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c4bc                 | LR__4523
2c4bc     0C 4E 05 F1 | 	add	fp, #12
2c4c0     A7 FA 01 FB | 	rdlong	result1, fp
2c4c4     0C 4E 85 F1 | 	sub	fp, #12
2c4c8     01 FA 15 F2 | 	cmp	result1, #1 wc
2c4cc     90 06 90 CD |  if_b	jmp	#LR__4542
2c4d0     04 4E 05 F1 | 	add	fp, #4
2c4d4     A7 FA 01 FB | 	rdlong	result1, fp
2c4d8     04 4E 85 F1 | 	sub	fp, #4
2c4dc     14 FA 05 F1 | 	add	result1, #20
2c4e0     FD FA 01 FB | 	rdlong	result1, result1
2c4e4     FF FB CD F7 | 	test	result1, #511 wz
2c4e8     D8 04 90 5D |  if_ne	jmp	#LR__4538
2c4ec     04 4E 05 F1 | 	add	fp, #4
2c4f0     A7 FA 01 FB | 	rdlong	result1, fp
2c4f4     14 FA 05 F1 | 	add	result1, #20
2c4f8     FD FA 01 FB | 	rdlong	result1, result1
2c4fc     09 FA 45 F0 | 	shr	result1, #9
2c500     14 4E 05 F1 | 	add	fp, #20
2c504     A7 14 02 FB | 	rdlong	arg02, fp
2c508     0A 14 06 F1 | 	add	arg02, #10
2c50c     0A 19 E2 FA | 	rdword	arg04, arg02
2c510     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c514     01 14 86 F1 | 	sub	arg02, #1
2c518     0A FB 09 F5 | 	and	result1, arg02 wz
2c51c     14 4E 05 F1 | 	add	fp, #20
2c520     A7 FA 61 FC | 	wrlong	result1, fp
2c524     2C 4E 85 F1 | 	sub	fp, #44
2c528     44 01 90 5D |  if_ne	jmp	#LR__4529
2c52c     04 4E 05 F1 | 	add	fp, #4
2c530     A7 FA 01 FB | 	rdlong	result1, fp
2c534     04 4E 85 F1 | 	sub	fp, #4
2c538     14 FA 05 F1 | 	add	result1, #20
2c53c     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c540     44 00 90 5D |  if_ne	jmp	#LR__4524
2c544     04 4E 05 F1 | 	add	fp, #4
2c548     A7 14 02 FB | 	rdlong	arg02, fp
2c54c     08 14 06 F1 | 	add	arg02, #8
2c550     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c554     18 4E 05 F1 | 	add	fp, #24
2c558     A7 14 62 FC | 	wrlong	arg02, fp
2c55c     1C 4E 85 F1 | 	sub	fp, #28
2c560     4C 00 90 5D |  if_ne	jmp	#LR__4525
2c564     04 4E 05 F1 | 	add	fp, #4
2c568     A7 12 02 FB | 	rdlong	arg01, fp
2c56c     04 4E 85 F1 | 	sub	fp, #4
2c570     00 14 06 F6 | 	mov	arg02, #0
2c574     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c578     1C 4E 05 F1 | 	add	fp, #28
2c57c     A7 FA 61 FC | 	wrlong	result1, fp
2c580     1C 4E 85 F1 | 	sub	fp, #28
2c584     28 00 90 FD | 	jmp	#LR__4525
2c588                 | LR__4524
2c588     04 4E 05 F1 | 	add	fp, #4
2c58c     A7 18 02 FB | 	rdlong	arg04, fp
2c590     0C 13 02 F6 | 	mov	arg01, arg04
2c594     04 4E 85 F1 | 	sub	fp, #4
2c598     18 18 06 F1 | 	add	arg04, #24
2c59c     0C 15 02 FB | 	rdlong	arg02, arg04
2c5a0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c5a4     1C 4E 05 F1 | 	add	fp, #28
2c5a8     A7 FA 61 FC | 	wrlong	result1, fp
2c5ac     1C 4E 85 F1 | 	sub	fp, #28
2c5b0                 | LR__4525
2c5b0     1C 4E 05 F1 | 	add	fp, #28
2c5b4     A7 FA 09 FB | 	rdlong	result1, fp wz
2c5b8     1C 4E 85 F1 | 	sub	fp, #28
2c5bc     A0 05 90 AD |  if_e	jmp	#LR__4542
2c5c0     1C 4E 05 F1 | 	add	fp, #28
2c5c4     A7 FA 01 FB | 	rdlong	result1, fp
2c5c8     1C 4E 85 F1 | 	sub	fp, #28
2c5cc     01 FA 0D F2 | 	cmp	result1, #1 wz
2c5d0     1C 00 90 5D |  if_ne	jmp	#LR__4526
2c5d4     04 4E 05 F1 | 	add	fp, #4
2c5d8     A7 FA 01 FB | 	rdlong	result1, fp
2c5dc     04 4E 85 F1 | 	sub	fp, #4
2c5e0     11 FA 05 F1 | 	add	result1, #17
2c5e4     FD 04 48 FC | 	wrbyte	#2, result1
2c5e8     02 FA 05 F6 | 	mov	result1, #2
2c5ec     98 05 90 FD | 	jmp	#LR__4543
2c5f0                 | LR__4526
2c5f0     1C 4E 05 F1 | 	add	fp, #28
2c5f4     A7 FA 01 FB | 	rdlong	result1, fp
2c5f8     1C 4E 85 F1 | 	sub	fp, #28
2c5fc     FF FF 7F FF 
2c600     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c604     1C 00 90 5D |  if_ne	jmp	#LR__4527
2c608     04 4E 05 F1 | 	add	fp, #4
2c60c     A7 FA 01 FB | 	rdlong	result1, fp
2c610     04 4E 85 F1 | 	sub	fp, #4
2c614     11 FA 05 F1 | 	add	result1, #17
2c618     FD 02 48 FC | 	wrbyte	#1, result1
2c61c     01 FA 05 F6 | 	mov	result1, #1
2c620     64 05 90 FD | 	jmp	#LR__4543
2c624                 | LR__4527
2c624     04 4E 05 F1 | 	add	fp, #4
2c628     A7 FA 01 FB | 	rdlong	result1, fp
2c62c     18 4E 05 F1 | 	add	fp, #24
2c630     A7 18 02 FB | 	rdlong	arg04, fp
2c634     18 FA 05 F1 | 	add	result1, #24
2c638     FD 18 62 FC | 	wrlong	arg04, result1
2c63c     18 4E 85 F1 | 	sub	fp, #24
2c640     A7 FA 01 FB | 	rdlong	result1, fp
2c644     04 4E 85 F1 | 	sub	fp, #4
2c648     08 FA 05 F1 | 	add	result1, #8
2c64c     FD FA 09 FB | 	rdlong	result1, result1 wz
2c650     1C 00 90 5D |  if_ne	jmp	#LR__4528
2c654     04 4E 05 F1 | 	add	fp, #4
2c658     A7 18 02 FB | 	rdlong	arg04, fp
2c65c     18 4E 05 F1 | 	add	fp, #24
2c660     A7 FA 01 FB | 	rdlong	result1, fp
2c664     1C 4E 85 F1 | 	sub	fp, #28
2c668     08 18 06 F1 | 	add	arg04, #8
2c66c     0C FB 61 FC | 	wrlong	result1, arg04
2c670                 | LR__4528
2c670                 | LR__4529
2c670     04 4E 05 F1 | 	add	fp, #4
2c674     A7 18 02 FB | 	rdlong	arg04, fp
2c678     04 4E 85 F1 | 	sub	fp, #4
2c67c     10 18 06 F1 | 	add	arg04, #16
2c680     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c684     80 18 CE F7 | 	test	arg04, #128 wz
2c688     7C 00 90 AD |  if_e	jmp	#LR__4531
2c68c     18 4E 05 F1 | 	add	fp, #24
2c690     A7 18 02 FB | 	rdlong	arg04, fp
2c694     01 18 06 F1 | 	add	arg04, #1
2c698     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c69c     14 4E 85 F1 | 	sub	fp, #20
2c6a0     A7 18 02 FB | 	rdlong	arg04, fp
2c6a4     0C 15 02 F6 | 	mov	arg02, arg04
2c6a8     28 14 06 F1 | 	add	arg02, #40
2c6ac     04 4E 85 F1 | 	sub	fp, #4
2c6b0     1C 18 06 F1 | 	add	arg04, #28
2c6b4     0C 17 02 FB | 	rdlong	arg03, arg04
2c6b8     01 18 06 F6 | 	mov	arg04, #1
2c6bc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c6c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6c4     1C 00 90 AD |  if_e	jmp	#LR__4530
2c6c8     04 4E 05 F1 | 	add	fp, #4
2c6cc     A7 FA 01 FB | 	rdlong	result1, fp
2c6d0     04 4E 85 F1 | 	sub	fp, #4
2c6d4     11 FA 05 F1 | 	add	result1, #17
2c6d8     FD 02 48 FC | 	wrbyte	#1, result1
2c6dc     01 FA 05 F6 | 	mov	result1, #1
2c6e0     A4 04 90 FD | 	jmp	#LR__4543
2c6e4                 | LR__4530
2c6e4     04 4E 05 F1 | 	add	fp, #4
2c6e8     A7 18 02 FB | 	rdlong	arg04, fp
2c6ec     0C FB 01 F6 | 	mov	result1, arg04
2c6f0     04 4E 85 F1 | 	sub	fp, #4
2c6f4     10 18 06 F1 | 	add	arg04, #16
2c6f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c6fc     7F 18 06 F5 | 	and	arg04, #127
2c700     10 FA 05 F1 | 	add	result1, #16
2c704     FD 18 42 FC | 	wrbyte	arg04, result1
2c708                 | LR__4531
2c708     18 4E 05 F1 | 	add	fp, #24
2c70c     A7 12 02 FB | 	rdlong	arg01, fp
2c710     14 4E 85 F1 | 	sub	fp, #20
2c714     A7 14 02 FB | 	rdlong	arg02, fp
2c718     04 4E 85 F1 | 	sub	fp, #4
2c71c     18 14 06 F1 | 	add	arg02, #24
2c720     0A 15 02 FB | 	rdlong	arg02, arg02
2c724     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c728     20 4E 05 F1 | 	add	fp, #32
2c72c     A7 FA 61 FC | 	wrlong	result1, fp
2c730     20 4E 85 F1 | 	sub	fp, #32
2c734     00 FA 0D F2 | 	cmp	result1, #0 wz
2c738     1C 00 90 5D |  if_ne	jmp	#LR__4532
2c73c     04 4E 05 F1 | 	add	fp, #4
2c740     A7 FA 01 FB | 	rdlong	result1, fp
2c744     04 4E 85 F1 | 	sub	fp, #4
2c748     11 FA 05 F1 | 	add	result1, #17
2c74c     FD 04 48 FC | 	wrbyte	#2, result1
2c750     02 FA 05 F6 | 	mov	result1, #2
2c754     30 04 90 FD | 	jmp	#LR__4543
2c758                 | LR__4532
2c758     20 4E 05 F1 | 	add	fp, #32
2c75c     A7 FA 01 FB | 	rdlong	result1, fp
2c760     0C 4E 05 F1 | 	add	fp, #12
2c764     A7 1E 02 FB | 	rdlong	local01, fp
2c768     0F FB 01 F1 | 	add	result1, local01
2c76c     0C 4E 85 F1 | 	sub	fp, #12
2c770     A7 FA 61 FC | 	wrlong	result1, fp
2c774     14 4E 85 F1 | 	sub	fp, #20
2c778     A7 FA 01 FB | 	rdlong	result1, fp
2c77c     09 FA 45 F0 | 	shr	result1, #9
2c780     1C 4E 05 F1 | 	add	fp, #28
2c784     A7 FA 61 FC | 	wrlong	result1, fp
2c788     28 4E 85 F1 | 	sub	fp, #40
2c78c     01 FA 15 F2 | 	cmp	result1, #1 wc
2c790     60 01 90 CD |  if_b	jmp	#LR__4536
2c794     2C 4E 05 F1 | 	add	fp, #44
2c798     A7 FA 01 FB | 	rdlong	result1, fp
2c79c     04 4E 85 F1 | 	sub	fp, #4
2c7a0     A7 18 02 FB | 	rdlong	arg04, fp
2c7a4     0C FB 01 F1 | 	add	result1, arg04
2c7a8     10 4E 85 F1 | 	sub	fp, #16
2c7ac     A7 18 02 FB | 	rdlong	arg04, fp
2c7b0     18 4E 85 F1 | 	sub	fp, #24
2c7b4     0A 18 06 F1 | 	add	arg04, #10
2c7b8     0C 19 E2 FA | 	rdword	arg04, arg04
2c7bc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c7c0     28 00 90 ED |  if_be	jmp	#LR__4533
2c7c4     18 4E 05 F1 | 	add	fp, #24
2c7c8     A7 FA 01 FB | 	rdlong	result1, fp
2c7cc     0A FA 05 F1 | 	add	result1, #10
2c7d0     FD FA E1 FA | 	rdword	result1, result1
2c7d4     14 4E 05 F1 | 	add	fp, #20
2c7d8     A7 18 02 FB | 	rdlong	arg04, fp
2c7dc     0C FB 81 F1 | 	sub	result1, arg04
2c7e0     04 4E 85 F1 | 	sub	fp, #4
2c7e4     A7 FA 61 FC | 	wrlong	result1, fp
2c7e8     28 4E 85 F1 | 	sub	fp, #40
2c7ec                 | LR__4533
2c7ec     18 4E 05 F1 | 	add	fp, #24
2c7f0     A7 18 02 FB | 	rdlong	arg04, fp
2c7f4     01 18 06 F1 | 	add	arg04, #1
2c7f8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c7fc     18 4E 05 F1 | 	add	fp, #24
2c800     A7 14 02 FB | 	rdlong	arg02, fp
2c804     10 4E 85 F1 | 	sub	fp, #16
2c808     A7 16 02 FB | 	rdlong	arg03, fp
2c80c     08 4E 05 F1 | 	add	fp, #8
2c810     A7 18 02 FB | 	rdlong	arg04, fp
2c814     28 4E 85 F1 | 	sub	fp, #40
2c818     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c81c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c820     1C 00 90 AD |  if_e	jmp	#LR__4534
2c824     04 4E 05 F1 | 	add	fp, #4
2c828     A7 1E 02 FB | 	rdlong	local01, fp
2c82c     04 4E 85 F1 | 	sub	fp, #4
2c830     11 1E 06 F1 | 	add	local01, #17
2c834     0F 03 48 FC | 	wrbyte	#1, local01
2c838     01 FA 05 F6 | 	mov	result1, #1
2c83c     48 03 90 FD | 	jmp	#LR__4543
2c840                 | LR__4534
2c840     04 4E 05 F1 | 	add	fp, #4
2c844     A7 FA 01 FB | 	rdlong	result1, fp
2c848     1C FA 05 F1 | 	add	result1, #28
2c84c     FD FA 01 FB | 	rdlong	result1, result1
2c850     1C 4E 05 F1 | 	add	fp, #28
2c854     A7 20 02 FB | 	rdlong	local02, fp
2c858     10 FB 81 F1 | 	sub	result1, local02
2c85c     08 4E 05 F1 | 	add	fp, #8
2c860     A7 18 02 FB | 	rdlong	arg04, fp
2c864     28 4E 85 F1 | 	sub	fp, #40
2c868     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c86c     68 00 90 3D |  if_ae	jmp	#LR__4535
2c870     04 4E 05 F1 | 	add	fp, #4
2c874     A7 12 02 FB | 	rdlong	arg01, fp
2c878     28 12 06 F1 | 	add	arg01, #40
2c87c     2C 4E 05 F1 | 	add	fp, #44
2c880     A7 14 02 FB | 	rdlong	arg02, fp
2c884     2C 4E 85 F1 | 	sub	fp, #44
2c888     A7 FA 01 FB | 	rdlong	result1, fp
2c88c     1C FA 05 F1 | 	add	result1, #28
2c890     FD 22 02 FB | 	rdlong	local03, result1
2c894     1C 4E 05 F1 | 	add	fp, #28
2c898     A7 18 02 FB | 	rdlong	arg04, fp
2c89c     20 4E 85 F1 | 	sub	fp, #32
2c8a0     0C 23 82 F1 | 	sub	local03, arg04
2c8a4     09 22 66 F0 | 	shl	local03, #9
2c8a8     11 15 02 F1 | 	add	arg02, local03
2c8ac     09 16 C6 F9 | 	decod	arg03, #9
2c8b0     B0 3E BF FD | 	call	#__system____builtin_memmove
2c8b4     04 4E 05 F1 | 	add	fp, #4
2c8b8     A7 18 02 FB | 	rdlong	arg04, fp
2c8bc     0C FB 01 F6 | 	mov	result1, arg04
2c8c0     04 4E 85 F1 | 	sub	fp, #4
2c8c4     10 18 06 F1 | 	add	arg04, #16
2c8c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c8cc     7F 18 06 F5 | 	and	arg04, #127
2c8d0     10 FA 05 F1 | 	add	result1, #16
2c8d4     FD 18 42 FC | 	wrbyte	arg04, result1
2c8d8                 | LR__4535
2c8d8     28 4E 05 F1 | 	add	fp, #40
2c8dc     A7 FA 01 FB | 	rdlong	result1, fp
2c8e0     09 FA 65 F0 | 	shl	result1, #9
2c8e4     04 4E 85 F1 | 	sub	fp, #4
2c8e8     A7 FA 61 FC | 	wrlong	result1, fp
2c8ec     24 4E 85 F1 | 	sub	fp, #36
2c8f0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2c8f0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2c8f0                 | ' 				}
2c8f0                 | ' 
2c8f0                 | ' 
2c8f0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2c8f0                 | ' 				continue;
2c8f0     74 01 90 FD | 	jmp	#LR__4539
2c8f4                 | LR__4536
2c8f4     04 4E 05 F1 | 	add	fp, #4
2c8f8     A7 20 02 FB | 	rdlong	local02, fp
2c8fc     1C 20 06 F1 | 	add	local02, #28
2c900     10 FB 01 FB | 	rdlong	result1, local02
2c904     1C 4E 05 F1 | 	add	fp, #28
2c908     A7 20 02 FB | 	rdlong	local02, fp
2c90c     20 4E 85 F1 | 	sub	fp, #32
2c910     10 FB 09 F2 | 	cmp	result1, local02 wz
2c914     90 00 90 AD |  if_e	jmp	#LR__4537
2c918     04 4E 05 F1 | 	add	fp, #4
2c91c     A7 FA 01 FB | 	rdlong	result1, fp
2c920     FD 22 02 F6 | 	mov	local03, result1
2c924     04 4E 85 F1 | 	sub	fp, #4
2c928     14 22 06 F1 | 	add	local03, #20
2c92c     11 23 02 FB | 	rdlong	local03, local03
2c930     0C FA 05 F1 | 	add	result1, #12
2c934     FD 24 02 FB | 	rdlong	local04, result1
2c938     12 27 02 F6 | 	mov	local05, local04
2c93c     13 23 12 F2 | 	cmp	local03, local05 wc
2c940     64 00 90 3D |  if_ae	jmp	#LR__4537
2c944     18 4E 05 F1 | 	add	fp, #24
2c948     A7 18 02 FB | 	rdlong	arg04, fp
2c94c     01 18 06 F1 | 	add	arg04, #1
2c950     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c954     14 4E 85 F1 | 	sub	fp, #20
2c958     A7 28 02 FB | 	rdlong	local06, fp
2c95c     28 28 06 F1 | 	add	local06, #40
2c960     14 2B 02 F6 | 	mov	local07, local06
2c964     1C 4E 05 F1 | 	add	fp, #28
2c968     A7 2C 02 FB | 	rdlong	local08, fp
2c96c     20 4E 85 F1 | 	sub	fp, #32
2c970     01 2E 06 F6 | 	mov	local09, #1
2c974     15 15 02 F6 | 	mov	arg02, local07
2c978     16 17 02 F6 | 	mov	arg03, local08
2c97c     01 18 06 F6 | 	mov	arg04, #1
2c980     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2c984     FD 30 0A F6 | 	mov	local10, result1 wz
2c988     1C 00 90 AD |  if_e	jmp	#LR__4537
2c98c     04 4E 05 F1 | 	add	fp, #4
2c990     A7 30 02 FB | 	rdlong	local10, fp
2c994     04 4E 85 F1 | 	sub	fp, #4
2c998     11 30 06 F1 | 	add	local10, #17
2c99c     18 03 48 FC | 	wrbyte	#1, local10
2c9a0                 | ' 				fp->fptr < fp->obj.objsize &&
2c9a0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2c9a0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2c9a0     01 FA 05 F6 | 	mov	result1, #1
2c9a4     E0 01 90 FD | 	jmp	#LR__4543
2c9a8                 | LR__4537
2c9a8     04 4E 05 F1 | 	add	fp, #4
2c9ac     A7 18 02 FB | 	rdlong	arg04, fp
2c9b0     1C 4E 05 F1 | 	add	fp, #28
2c9b4     A7 FA 01 FB | 	rdlong	result1, fp
2c9b8     20 4E 85 F1 | 	sub	fp, #32
2c9bc     1C 18 06 F1 | 	add	arg04, #28
2c9c0     0C FB 61 FC | 	wrlong	result1, arg04
2c9c4                 | LR__4538
2c9c4     04 4E 05 F1 | 	add	fp, #4
2c9c8     A7 FA 01 FB | 	rdlong	result1, fp
2c9cc     14 FA 05 F1 | 	add	result1, #20
2c9d0     FD FA 01 FB | 	rdlong	result1, result1
2c9d4     FF FB 05 F5 | 	and	result1, #511
2c9d8     09 32 C6 F9 | 	decod	local11, #9
2c9dc     FD 32 82 F1 | 	sub	local11, result1
2c9e0     20 4E 05 F1 | 	add	fp, #32
2c9e4     A7 32 62 FC | 	wrlong	local11, fp
2c9e8     18 4E 85 F1 | 	sub	fp, #24
2c9ec     A7 FA 01 FB | 	rdlong	result1, fp
2c9f0     0C 4E 85 F1 | 	sub	fp, #12
2c9f4     FD 32 1A F2 | 	cmp	local11, result1 wcz
2c9f8     0C 4E 05 11 |  if_a	add	fp, #12
2c9fc     A7 32 02 1B |  if_a	rdlong	local11, fp
2ca00     18 4E 05 11 |  if_a	add	fp, #24
2ca04     A7 32 62 1C |  if_a	wrlong	local11, fp
2ca08     24 4E 85 11 |  if_a	sub	fp, #36
2ca0c     04 4E 05 F1 | 	add	fp, #4
2ca10     A7 32 02 FB | 	rdlong	local11, fp
2ca14     19 13 02 F6 | 	mov	arg01, local11
2ca18     28 12 06 F1 | 	add	arg01, #40
2ca1c     14 32 06 F1 | 	add	local11, #20
2ca20     19 33 02 FB | 	rdlong	local11, local11
2ca24     FF 33 06 F5 | 	and	local11, #511
2ca28     19 13 02 F1 | 	add	arg01, local11
2ca2c     2C 4E 05 F1 | 	add	fp, #44
2ca30     A7 14 02 FB | 	rdlong	arg02, fp
2ca34     0C 4E 85 F1 | 	sub	fp, #12
2ca38     A7 16 02 FB | 	rdlong	arg03, fp
2ca3c     24 4E 85 F1 | 	sub	fp, #36
2ca40     20 3D BF FD | 	call	#__system____builtin_memmove
2ca44     04 4E 05 F1 | 	add	fp, #4
2ca48     A7 FA 01 FB | 	rdlong	result1, fp
2ca4c     FD 32 02 F6 | 	mov	local11, result1
2ca50     04 4E 85 F1 | 	sub	fp, #4
2ca54     10 FA 05 F1 | 	add	result1, #16
2ca58     FD FA C1 FA | 	rdbyte	result1, result1
2ca5c     80 FA 45 F5 | 	or	result1, #128
2ca60     10 32 06 F1 | 	add	local11, #16
2ca64     19 FB 41 FC | 	wrbyte	result1, local11
2ca68                 | LR__4539
2ca68     0C 4E 05 F1 | 	add	fp, #12
2ca6c     A7 32 02 FB | 	rdlong	local11, fp
2ca70     18 4E 05 F1 | 	add	fp, #24
2ca74     A7 FA 01 FB | 	rdlong	result1, fp
2ca78     FD 32 82 F1 | 	sub	local11, result1
2ca7c     18 4E 85 F1 | 	sub	fp, #24
2ca80     A7 32 62 FC | 	wrlong	local11, fp
2ca84     04 4E 05 F1 | 	add	fp, #4
2ca88     A7 34 02 FB | 	rdlong	local12, fp
2ca8c     1A 33 02 FB | 	rdlong	local11, local12
2ca90     14 4E 05 F1 | 	add	fp, #20
2ca94     A7 36 02 FB | 	rdlong	local13, fp
2ca98     1B 33 02 F1 | 	add	local11, local13
2ca9c     1A 33 62 FC | 	wrlong	local11, local12
2caa0     0C 4E 05 F1 | 	add	fp, #12
2caa4     A7 32 02 FB | 	rdlong	local11, fp
2caa8     0C 4E 85 F1 | 	sub	fp, #12
2caac     A7 38 02 FB | 	rdlong	local14, fp
2cab0     1C 33 02 F1 | 	add	local11, local14
2cab4     0C 4E 05 F1 | 	add	fp, #12
2cab8     A7 32 62 FC | 	wrlong	local11, fp
2cabc     2C 4E 85 F1 | 	sub	fp, #44
2cac0     A7 3A 02 FB | 	rdlong	local15, fp
2cac4     1D 33 02 F6 | 	mov	local11, local15
2cac8     14 3A 06 F1 | 	add	local15, #20
2cacc     1D 3B 02 FB | 	rdlong	local15, local15
2cad0     20 4E 05 F1 | 	add	fp, #32
2cad4     A7 3C 02 FB | 	rdlong	local16, fp
2cad8     1E 3B 02 F1 | 	add	local15, local16
2cadc     14 32 06 F1 | 	add	local11, #20
2cae0     19 3B 62 FC | 	wrlong	local15, local11
2cae4     20 4E 85 F1 | 	sub	fp, #32
2cae8     A7 3E 02 FB | 	rdlong	local17, fp
2caec     1F 33 02 F6 | 	mov	local11, local17
2caf0     1F 41 02 F6 | 	mov	local18, local17
2caf4     04 4E 85 F1 | 	sub	fp, #4
2caf8     14 3E 06 F1 | 	add	local17, #20
2cafc     1F 43 02 FB | 	rdlong	local19, local17
2cb00     0C 40 06 F1 | 	add	local18, #12
2cb04     20 45 02 FB | 	rdlong	local20, local18
2cb08     22 43 1A F2 | 	cmp	local19, local20 wcz
2cb0c     24 00 90 ED |  if_be	jmp	#LR__4540
2cb10     04 4E 05 F1 | 	add	fp, #4
2cb14     A7 26 02 FB | 	rdlong	local05, fp
2cb18     04 4E 85 F1 | 	sub	fp, #4
2cb1c     13 23 02 F6 | 	mov	local03, local05
2cb20     14 22 06 F1 | 	add	local03, #20
2cb24     11 25 02 FB | 	rdlong	local04, local03
2cb28     14 22 86 F1 | 	sub	local03, #20
2cb2c     12 47 02 F6 | 	mov	local21, local04
2cb30     20 00 90 FD | 	jmp	#LR__4541
2cb34                 | LR__4540
2cb34     04 4E 05 F1 | 	add	fp, #4
2cb38     A7 2A 02 FB | 	rdlong	local07, fp
2cb3c     04 4E 85 F1 | 	sub	fp, #4
2cb40     15 31 02 F6 | 	mov	local10, local07
2cb44     0C 30 06 F1 | 	add	local10, #12
2cb48     18 2D 02 FB | 	rdlong	local08, local10
2cb4c     0C 30 86 F1 | 	sub	local10, #12
2cb50     16 47 02 F6 | 	mov	local21, local08
2cb54                 | LR__4541
2cb54     0C 32 06 F1 | 	add	local11, #12
2cb58     19 47 62 FC | 	wrlong	local21, local11
2cb5c     5C F9 9F FD | 	jmp	#LR__4523
2cb60                 | LR__4542
2cb60     04 4E 05 F1 | 	add	fp, #4
2cb64     A7 34 02 FB | 	rdlong	local12, fp
2cb68     1A 1F 02 F6 | 	mov	local01, local12
2cb6c     04 4E 85 F1 | 	sub	fp, #4
2cb70     10 34 06 F1 | 	add	local12, #16
2cb74     1A 33 C2 FA | 	rdbyte	local11, local12
2cb78     40 32 46 F5 | 	or	local11, #64
2cb7c     10 1E 06 F1 | 	add	local01, #16
2cb80     0F 33 42 FC | 	wrbyte	local11, local01
2cb84                 | ' 
2cb84                 | ' 
2cb84                 | ' 
2cb84                 | ' 
2cb84                 | ' 
2cb84                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cb84                 | ' 		fp->flag |=  0x80 ;
2cb84                 | ' 
2cb84                 | ' 	}
2cb84                 | ' 
2cb84                 | ' 	fp->flag |=  0x40 ;
2cb84                 | ' 
2cb84                 | ' 	return FR_OK ;
2cb84     00 FA 05 F6 | 	mov	result1, #0
2cb88                 | LR__4543
2cb88     A7 F0 03 F6 | 	mov	ptra, fp
2cb8c     B2 00 A0 FD | 	call	#popregs_
2cb90                 | _fatfs_cc_f_write_ret
2cb90     2D 00 64 FD | 	ret
2cb94                 | 
2cb94                 | _fatfs_cc_f_sync
2cb94     00 4A 05 F6 | 	mov	COUNT_, #0
2cb98     A8 00 A0 FD | 	call	#pushregs_
2cb9c     18 F0 07 F1 | 	add	ptra, #24
2cba0     04 4E 05 F1 | 	add	fp, #4
2cba4     A7 12 62 FC | 	wrlong	arg01, fp
2cba8     08 4E 05 F1 | 	add	fp, #8
2cbac     A7 14 02 F6 | 	mov	arg02, fp
2cbb0     0C 4E 85 F1 | 	sub	fp, #12
2cbb4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2cbb8     08 4E 05 F1 | 	add	fp, #8
2cbbc     A7 FA 61 FC | 	wrlong	result1, fp
2cbc0     08 4E 85 F1 | 	sub	fp, #8
2cbc4     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbc8     C0 01 90 5D |  if_ne	jmp	#LR__4553
2cbcc     04 4E 05 F1 | 	add	fp, #4
2cbd0     A7 18 02 FB | 	rdlong	arg04, fp
2cbd4     04 4E 85 F1 | 	sub	fp, #4
2cbd8     10 18 06 F1 | 	add	arg04, #16
2cbdc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cbe0     40 18 CE F7 | 	test	arg04, #64 wz
2cbe4     A4 01 90 AD |  if_e	jmp	#LR__4552
2cbe8     04 4E 05 F1 | 	add	fp, #4
2cbec     A7 18 02 FB | 	rdlong	arg04, fp
2cbf0     04 4E 85 F1 | 	sub	fp, #4
2cbf4     10 18 06 F1 | 	add	arg04, #16
2cbf8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cbfc     80 18 CE F7 | 	test	arg04, #128 wz
2cc00     64 00 90 AD |  if_e	jmp	#LR__4550
2cc04     0C 4E 05 F1 | 	add	fp, #12
2cc08     A7 18 02 FB | 	rdlong	arg04, fp
2cc0c     01 18 06 F1 | 	add	arg04, #1
2cc10     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cc14     08 4E 85 F1 | 	sub	fp, #8
2cc18     A7 18 02 FB | 	rdlong	arg04, fp
2cc1c     0C 15 02 F6 | 	mov	arg02, arg04
2cc20     28 14 06 F1 | 	add	arg02, #40
2cc24     04 4E 85 F1 | 	sub	fp, #4
2cc28     1C 18 06 F1 | 	add	arg04, #28
2cc2c     0C 17 02 FB | 	rdlong	arg03, arg04
2cc30     01 18 06 F6 | 	mov	arg04, #1
2cc34     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2cc38     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc3c     01 FA 05 56 |  if_ne	mov	result1, #1
2cc40     54 01 90 5D |  if_ne	jmp	#LR__4554
2cc44     04 4E 05 F1 | 	add	fp, #4
2cc48     A7 18 02 FB | 	rdlong	arg04, fp
2cc4c     0C 17 02 F6 | 	mov	arg03, arg04
2cc50     04 4E 85 F1 | 	sub	fp, #4
2cc54     10 18 06 F1 | 	add	arg04, #16
2cc58     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cc5c     7F 18 06 F5 | 	and	arg04, #127
2cc60     10 16 06 F1 | 	add	arg03, #16
2cc64     0B 19 42 FC | 	wrbyte	arg04, arg03
2cc68                 | LR__4550
2cc68     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cc6c     10 4E 05 F1 | 	add	fp, #16
2cc70     A7 FA 61 FC | 	wrlong	result1, fp
2cc74     04 4E 85 F1 | 	sub	fp, #4
2cc78     A7 12 02 FB | 	rdlong	arg01, fp
2cc7c     08 4E 85 F1 | 	sub	fp, #8
2cc80     A7 18 02 FB | 	rdlong	arg04, fp
2cc84     04 4E 85 F1 | 	sub	fp, #4
2cc88     20 18 06 F1 | 	add	arg04, #32
2cc8c     0C 15 02 FB | 	rdlong	arg02, arg04
2cc90     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cc94     08 4E 05 F1 | 	add	fp, #8
2cc98     A7 FA 61 FC | 	wrlong	result1, fp
2cc9c     08 4E 85 F1 | 	sub	fp, #8
2cca0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cca4     E4 00 90 5D |  if_ne	jmp	#LR__4551
2cca8     04 4E 05 F1 | 	add	fp, #4
2ccac     A7 18 02 FB | 	rdlong	arg04, fp
2ccb0     24 18 06 F1 | 	add	arg04, #36
2ccb4     0C 19 02 FB | 	rdlong	arg04, arg04
2ccb8     10 4E 05 F1 | 	add	fp, #16
2ccbc     A7 18 62 FC | 	wrlong	arg04, fp
2ccc0     0C 17 02 F6 | 	mov	arg03, arg04
2ccc4     0B 16 06 F1 | 	add	arg03, #11
2ccc8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cccc     20 16 46 F5 | 	or	arg03, #32
2ccd0     0B 18 06 F1 | 	add	arg04, #11
2ccd4     0C 17 42 FC | 	wrbyte	arg03, arg04
2ccd8     10 4E 85 F1 | 	sub	fp, #16
2ccdc     A7 18 02 FB | 	rdlong	arg04, fp
2cce0     0C 13 02 FB | 	rdlong	arg01, arg04
2cce4     10 4E 05 F1 | 	add	fp, #16
2cce8     A7 14 02 FB | 	rdlong	arg02, fp
2ccec     14 4E 85 F1 | 	sub	fp, #20
2ccf0     08 18 06 F1 | 	add	arg04, #8
2ccf4     0C 17 02 FB | 	rdlong	arg03, arg04
2ccf8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ccfc     14 4E 05 F1 | 	add	fp, #20
2cd00     A7 12 02 FB | 	rdlong	arg01, fp
2cd04     1C 12 06 F1 | 	add	arg01, #28
2cd08     10 4E 85 F1 | 	sub	fp, #16
2cd0c     A7 18 02 FB | 	rdlong	arg04, fp
2cd10     0C 18 06 F1 | 	add	arg04, #12
2cd14     0C 15 02 FB | 	rdlong	arg02, arg04
2cd18     09 15 62 FC | 	wrlong	arg02, arg01
2cd1c     10 4E 05 F1 | 	add	fp, #16
2cd20     A7 12 02 FB | 	rdlong	arg01, fp
2cd24     16 12 06 F1 | 	add	arg01, #22
2cd28     04 4E 85 F1 | 	sub	fp, #4
2cd2c     A7 14 02 FB | 	rdlong	arg02, fp
2cd30     09 15 62 FC | 	wrlong	arg02, arg01
2cd34     04 4E 05 F1 | 	add	fp, #4
2cd38     A7 12 02 FB | 	rdlong	arg01, fp
2cd3c     12 12 06 F1 | 	add	arg01, #18
2cd40     09 01 58 FC | 	wrword	#0, arg01
2cd44     08 4E 85 F1 | 	sub	fp, #8
2cd48     A7 18 02 FB | 	rdlong	arg04, fp
2cd4c     03 18 06 F1 | 	add	arg04, #3
2cd50     0C 03 48 FC | 	wrbyte	#1, arg04
2cd54     A7 12 02 FB | 	rdlong	arg01, fp
2cd58     0C 4E 85 F1 | 	sub	fp, #12
2cd5c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2cd60     08 4E 05 F1 | 	add	fp, #8
2cd64     A7 FA 61 FC | 	wrlong	result1, fp
2cd68     04 4E 85 F1 | 	sub	fp, #4
2cd6c     A7 18 02 FB | 	rdlong	arg04, fp
2cd70     0C 17 02 F6 | 	mov	arg03, arg04
2cd74     04 4E 85 F1 | 	sub	fp, #4
2cd78     10 18 06 F1 | 	add	arg04, #16
2cd7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd80     BF 18 06 F5 | 	and	arg04, #191
2cd84     10 16 06 F1 | 	add	arg03, #16
2cd88     0B 19 42 FC | 	wrbyte	arg04, arg03
2cd8c                 | LR__4551
2cd8c                 | LR__4552
2cd8c                 | LR__4553
2cd8c                 | ' 					dir = fp->dir_ptr;
2cd8c                 | ' 					dir[ 11 ] |=  0x20 ;
2cd8c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2cd8c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2cd8c                 | ' 					st_dword(dir +  22 , tm);
2cd8c                 | ' 					st_word(dir +  18 , 0);
2cd8c                 | ' 					fs->wflag = 1;
2cd8c                 | ' 					res = sync_fs(fs);
2cd8c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2cd8c                 | ' 				}
2cd8c                 | ' 			}
2cd8c                 | ' 		}
2cd8c                 | ' 	}
2cd8c                 | ' 
2cd8c                 | ' 	return res ;
2cd8c     08 4E 05 F1 | 	add	fp, #8
2cd90     A7 FA 01 FB | 	rdlong	result1, fp
2cd94     08 4E 85 F1 | 	sub	fp, #8
2cd98                 | LR__4554
2cd98     A7 F0 03 F6 | 	mov	ptra, fp
2cd9c     B2 00 A0 FD | 	call	#popregs_
2cda0                 | _fatfs_cc_f_sync_ret
2cda0     2D 00 64 FD | 	ret
2cda4                 | 
2cda4                 | _fatfs_cc_f_close
2cda4     01 4A 05 F6 | 	mov	COUNT_, #1
2cda8     A8 00 A0 FD | 	call	#pushregs_
2cdac     10 F0 07 F1 | 	add	ptra, #16
2cdb0     04 4E 05 F1 | 	add	fp, #4
2cdb4     A7 12 62 FC | 	wrlong	arg01, fp
2cdb8     04 4E 85 F1 | 	sub	fp, #4
2cdbc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2cdc0     08 4E 05 F1 | 	add	fp, #8
2cdc4     A7 FA 61 FC | 	wrlong	result1, fp
2cdc8     08 4E 85 F1 | 	sub	fp, #8
2cdcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdd0     38 00 90 5D |  if_ne	jmp	#LR__4560
2cdd4     04 4E 05 F1 | 	add	fp, #4
2cdd8     A7 12 02 FB | 	rdlong	arg01, fp
2cddc     08 4E 05 F1 | 	add	fp, #8
2cde0     A7 14 02 F6 | 	mov	arg02, fp
2cde4     0C 4E 85 F1 | 	sub	fp, #12
2cde8     9C E6 BF FD | 	call	#_fatfs_cc_validate
2cdec     08 4E 05 F1 | 	add	fp, #8
2cdf0     A7 FA 61 FC | 	wrlong	result1, fp
2cdf4     08 4E 85 F1 | 	sub	fp, #8
2cdf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdfc     04 4E 05 A1 |  if_e	add	fp, #4
2ce00     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ce04     04 4E 85 A1 |  if_e	sub	fp, #4
2ce08     0F 01 68 AC |  if_e	wrlong	#0, local01
2ce0c                 | LR__4560
2ce0c                 | ' 
2ce0c                 | ' 
2ce0c                 | ' 
2ce0c                 | ' 
2ce0c                 | ' 			fp->obj.fs = 0;
2ce0c                 | ' #line 4192 "ff.c"
2ce0c                 | ' 		}
2ce0c                 | ' 	}
2ce0c                 | ' 	return res;
2ce0c     08 4E 05 F1 | 	add	fp, #8
2ce10     A7 FA 01 FB | 	rdlong	result1, fp
2ce14     08 4E 85 F1 | 	sub	fp, #8
2ce18     A7 F0 03 F6 | 	mov	ptra, fp
2ce1c     B2 00 A0 FD | 	call	#popregs_
2ce20                 | _fatfs_cc_f_close_ret
2ce20     2D 00 64 FD | 	ret
2ce24                 | 
2ce24                 | _fatfs_cc_f_lseek
2ce24     00 4A 05 F6 | 	mov	COUNT_, #0
2ce28     A8 00 A0 FD | 	call	#pushregs_
2ce2c     24 F0 07 F1 | 	add	ptra, #36
2ce30     04 4E 05 F1 | 	add	fp, #4
2ce34     A7 12 62 FC | 	wrlong	arg01, fp
2ce38     04 4E 05 F1 | 	add	fp, #4
2ce3c     A7 14 62 FC | 	wrlong	arg02, fp
2ce40     04 4E 85 F1 | 	sub	fp, #4
2ce44     A7 12 02 FB | 	rdlong	arg01, fp
2ce48     0C 4E 05 F1 | 	add	fp, #12
2ce4c     A7 14 02 F6 | 	mov	arg02, fp
2ce50     10 4E 85 F1 | 	sub	fp, #16
2ce54     30 E6 BF FD | 	call	#_fatfs_cc_validate
2ce58     0C 4E 05 F1 | 	add	fp, #12
2ce5c     A7 FA 61 FC | 	wrlong	result1, fp
2ce60     0C 4E 85 F1 | 	sub	fp, #12
2ce64     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce68     1C 00 90 5D |  if_ne	jmp	#LR__4570
2ce6c     04 4E 05 F1 | 	add	fp, #4
2ce70     A7 18 02 FB | 	rdlong	arg04, fp
2ce74     11 18 06 F1 | 	add	arg04, #17
2ce78     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce7c     08 4E 05 F1 | 	add	fp, #8
2ce80     A7 18 62 FC | 	wrlong	arg04, fp
2ce84     0C 4E 85 F1 | 	sub	fp, #12
2ce88                 | LR__4570
2ce88     0C 4E 05 F1 | 	add	fp, #12
2ce8c     A7 18 0A FB | 	rdlong	arg04, fp wz
2ce90     0C 4E 85 F1 | 	sub	fp, #12
2ce94     0C 4E 05 51 |  if_ne	add	fp, #12
2ce98     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2ce9c     0C 4E 85 51 |  if_ne	sub	fp, #12
2cea0     40 06 90 5D |  if_ne	jmp	#LR__4593
2cea4     04 4E 05 F1 | 	add	fp, #4
2cea8     A7 18 02 FB | 	rdlong	arg04, fp
2ceac     04 4E 05 F1 | 	add	fp, #4
2ceb0     A7 16 02 FB | 	rdlong	arg03, fp
2ceb4     08 4E 85 F1 | 	sub	fp, #8
2ceb8     0C 18 06 F1 | 	add	arg04, #12
2cebc     0C 19 02 FB | 	rdlong	arg04, arg04
2cec0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2cec4     3C 00 90 ED |  if_be	jmp	#LR__4571
2cec8     04 4E 05 F1 | 	add	fp, #4
2cecc     A7 16 02 FB | 	rdlong	arg03, fp
2ced0     04 4E 85 F1 | 	sub	fp, #4
2ced4     10 16 06 F1 | 	add	arg03, #16
2ced8     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cedc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2cee0     02 16 CE F7 | 	test	arg03, #2 wz
2cee4     1C 00 90 5D |  if_ne	jmp	#LR__4571
2cee8     04 4E 05 F1 | 	add	fp, #4
2ceec     A7 16 02 FB | 	rdlong	arg03, fp
2cef0     0C 16 06 F1 | 	add	arg03, #12
2cef4     0B 17 02 FB | 	rdlong	arg03, arg03
2cef8     04 4E 05 F1 | 	add	fp, #4
2cefc     A7 16 62 FC | 	wrlong	arg03, fp
2cf00     08 4E 85 F1 | 	sub	fp, #8
2cf04                 | LR__4571
2cf04     04 4E 05 F1 | 	add	fp, #4
2cf08     A7 16 02 FB | 	rdlong	arg03, fp
2cf0c     14 16 06 F1 | 	add	arg03, #20
2cf10     0B 17 02 FB | 	rdlong	arg03, arg03
2cf14     1C 4E 05 F1 | 	add	fp, #28
2cf18     A7 16 62 FC | 	wrlong	arg03, fp
2cf1c     1C 4E 85 F1 | 	sub	fp, #28
2cf20     A7 16 02 FB | 	rdlong	arg03, fp
2cf24     18 4E 05 F1 | 	add	fp, #24
2cf28     A7 00 68 FC | 	wrlong	#0, fp
2cf2c     14 16 06 F1 | 	add	arg03, #20
2cf30     0B 01 68 FC | 	wrlong	#0, arg03
2cf34     14 4E 85 F1 | 	sub	fp, #20
2cf38     A7 16 02 FB | 	rdlong	arg03, fp
2cf3c     08 4E 85 F1 | 	sub	fp, #8
2cf40     01 16 16 F2 | 	cmp	arg03, #1 wc
2cf44     E4 03 90 CD |  if_b	jmp	#LR__4587
2cf48     10 4E 05 F1 | 	add	fp, #16
2cf4c     A7 16 02 FB | 	rdlong	arg03, fp
2cf50     0A 16 06 F1 | 	add	arg03, #10
2cf54     0B 19 E2 FA | 	rdword	arg04, arg03
2cf58     09 18 66 F0 | 	shl	arg04, #9
2cf5c     08 4E 05 F1 | 	add	fp, #8
2cf60     A7 18 62 FC | 	wrlong	arg04, fp
2cf64     08 4E 05 F1 | 	add	fp, #8
2cf68     A7 18 02 FB | 	rdlong	arg04, fp
2cf6c     20 4E 85 F1 | 	sub	fp, #32
2cf70     01 18 16 F2 | 	cmp	arg04, #1 wc
2cf74     AC 00 90 CD |  if_b	jmp	#LR__4572
2cf78     08 4E 05 F1 | 	add	fp, #8
2cf7c     A7 18 02 FB | 	rdlong	arg04, fp
2cf80     01 18 86 F1 | 	sub	arg04, #1
2cf84     10 4E 05 F1 | 	add	fp, #16
2cf88     A7 16 02 FB | 	rdlong	arg03, fp
2cf8c     0B 19 12 FD | 	qdiv	arg04, arg03
2cf90     08 4E 05 F1 | 	add	fp, #8
2cf94     A7 FA 01 FB | 	rdlong	result1, fp
2cf98     01 FA 85 F1 | 	sub	result1, #1
2cf9c     18 18 62 FD | 	getqx	arg04
2cfa0     0B FB 11 FD | 	qdiv	result1, arg03
2cfa4     20 4E 85 F1 | 	sub	fp, #32
2cfa8     18 16 62 FD | 	getqx	arg03
2cfac     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2cfb0     70 00 90 CD |  if_b	jmp	#LR__4572
2cfb4     04 4E 05 F1 | 	add	fp, #4
2cfb8     A7 16 02 FB | 	rdlong	arg03, fp
2cfbc     1C 4E 05 F1 | 	add	fp, #28
2cfc0     A7 FA 01 FB | 	rdlong	result1, fp
2cfc4     01 FA 85 F1 | 	sub	result1, #1
2cfc8     08 4E 85 F1 | 	sub	fp, #8
2cfcc     A7 18 02 FB | 	rdlong	arg04, fp
2cfd0     01 18 86 F1 | 	sub	arg04, #1
2cfd4     0C FB 21 F5 | 	andn	result1, arg04
2cfd8     14 16 06 F1 | 	add	arg03, #20
2cfdc     0B FB 61 FC | 	wrlong	result1, arg03
2cfe0     10 4E 85 F1 | 	sub	fp, #16
2cfe4     A7 16 02 FB | 	rdlong	arg03, fp
2cfe8     04 4E 85 F1 | 	sub	fp, #4
2cfec     A7 18 02 FB | 	rdlong	arg04, fp
2cff0     14 18 06 F1 | 	add	arg04, #20
2cff4     0C 19 02 FB | 	rdlong	arg04, arg04
2cff8     0C 17 82 F1 | 	sub	arg03, arg04
2cffc     04 4E 05 F1 | 	add	fp, #4
2d000     A7 16 62 FC | 	wrlong	arg03, fp
2d004     04 4E 85 F1 | 	sub	fp, #4
2d008     A7 16 02 FB | 	rdlong	arg03, fp
2d00c     18 16 06 F1 | 	add	arg03, #24
2d010     0B 17 02 FB | 	rdlong	arg03, arg03
2d014     10 4E 05 F1 | 	add	fp, #16
2d018     A7 16 62 FC | 	wrlong	arg03, fp
2d01c     14 4E 85 F1 | 	sub	fp, #20
2d020     D0 00 90 FD | 	jmp	#LR__4576
2d024                 | LR__4572
2d024     04 4E 05 F1 | 	add	fp, #4
2d028     A7 16 02 FB | 	rdlong	arg03, fp
2d02c     08 16 06 F1 | 	add	arg03, #8
2d030     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d034     10 4E 05 F1 | 	add	fp, #16
2d038     A7 16 62 FC | 	wrlong	arg03, fp
2d03c     14 4E 85 F1 | 	sub	fp, #20
2d040     94 00 90 5D |  if_ne	jmp	#LR__4575
2d044     04 4E 05 F1 | 	add	fp, #4
2d048     A7 12 02 FB | 	rdlong	arg01, fp
2d04c     04 4E 85 F1 | 	sub	fp, #4
2d050     00 14 06 F6 | 	mov	arg02, #0
2d054     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d058     14 4E 05 F1 | 	add	fp, #20
2d05c     A7 FA 61 FC | 	wrlong	result1, fp
2d060     14 4E 85 F1 | 	sub	fp, #20
2d064     01 FA 0D F2 | 	cmp	result1, #1 wz
2d068     1C 00 90 5D |  if_ne	jmp	#LR__4573
2d06c     04 4E 05 F1 | 	add	fp, #4
2d070     A7 16 02 FB | 	rdlong	arg03, fp
2d074     04 4E 85 F1 | 	sub	fp, #4
2d078     11 16 06 F1 | 	add	arg03, #17
2d07c     0B 05 48 FC | 	wrbyte	#2, arg03
2d080     02 FA 05 F6 | 	mov	result1, #2
2d084     5C 04 90 FD | 	jmp	#LR__4593
2d088                 | LR__4573
2d088     14 4E 05 F1 | 	add	fp, #20
2d08c     A7 FA 01 FB | 	rdlong	result1, fp
2d090     14 4E 85 F1 | 	sub	fp, #20
2d094     FF FF 7F FF 
2d098     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d09c     1C 00 90 5D |  if_ne	jmp	#LR__4574
2d0a0     04 4E 05 F1 | 	add	fp, #4
2d0a4     A7 16 02 FB | 	rdlong	arg03, fp
2d0a8     04 4E 85 F1 | 	sub	fp, #4
2d0ac     11 16 06 F1 | 	add	arg03, #17
2d0b0     0B 03 48 FC | 	wrbyte	#1, arg03
2d0b4     01 FA 05 F6 | 	mov	result1, #1
2d0b8     28 04 90 FD | 	jmp	#LR__4593
2d0bc                 | LR__4574
2d0bc     04 4E 05 F1 | 	add	fp, #4
2d0c0     A7 16 02 FB | 	rdlong	arg03, fp
2d0c4     10 4E 05 F1 | 	add	fp, #16
2d0c8     A7 18 02 FB | 	rdlong	arg04, fp
2d0cc     14 4E 85 F1 | 	sub	fp, #20
2d0d0     08 16 06 F1 | 	add	arg03, #8
2d0d4     0B 19 62 FC | 	wrlong	arg04, arg03
2d0d8                 | LR__4575
2d0d8     04 4E 05 F1 | 	add	fp, #4
2d0dc     A7 16 02 FB | 	rdlong	arg03, fp
2d0e0     10 4E 05 F1 | 	add	fp, #16
2d0e4     A7 18 02 FB | 	rdlong	arg04, fp
2d0e8     14 4E 85 F1 | 	sub	fp, #20
2d0ec     18 16 06 F1 | 	add	arg03, #24
2d0f0     0B 19 62 FC | 	wrlong	arg04, arg03
2d0f4                 | LR__4576
2d0f4     14 4E 05 F1 | 	add	fp, #20
2d0f8     A7 16 0A FB | 	rdlong	arg03, fp wz
2d0fc     14 4E 85 F1 | 	sub	fp, #20
2d100     28 02 90 AD |  if_e	jmp	#LR__4586
2d104                 | ' 				while (ofs > bcs) {
2d104                 | LR__4577
2d104     08 4E 05 F1 | 	add	fp, #8
2d108     A7 18 02 FB | 	rdlong	arg04, fp
2d10c     10 4E 05 F1 | 	add	fp, #16
2d110     A7 16 02 FB | 	rdlong	arg03, fp
2d114     18 4E 85 F1 | 	sub	fp, #24
2d118     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d11c     68 01 90 ED |  if_be	jmp	#LR__4583
2d120     08 4E 05 F1 | 	add	fp, #8
2d124     A7 18 02 FB | 	rdlong	arg04, fp
2d128     10 4E 05 F1 | 	add	fp, #16
2d12c     A7 16 02 FB | 	rdlong	arg03, fp
2d130     0B 19 82 F1 | 	sub	arg04, arg03
2d134     10 4E 85 F1 | 	sub	fp, #16
2d138     A7 18 62 FC | 	wrlong	arg04, fp
2d13c     04 4E 85 F1 | 	sub	fp, #4
2d140     A7 18 02 FB | 	rdlong	arg04, fp
2d144     0C FB 01 F6 | 	mov	result1, arg04
2d148     14 18 06 F1 | 	add	arg04, #20
2d14c     0C 19 02 FB | 	rdlong	arg04, arg04
2d150     14 4E 05 F1 | 	add	fp, #20
2d154     A7 16 02 FB | 	rdlong	arg03, fp
2d158     0B 19 02 F1 | 	add	arg04, arg03
2d15c     14 FA 05 F1 | 	add	result1, #20
2d160     FD 18 62 FC | 	wrlong	arg04, result1
2d164     14 4E 85 F1 | 	sub	fp, #20
2d168     A7 16 02 FB | 	rdlong	arg03, fp
2d16c     04 4E 85 F1 | 	sub	fp, #4
2d170     10 16 06 F1 | 	add	arg03, #16
2d174     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d178     02 16 CE F7 | 	test	arg03, #2 wz
2d17c     3C 00 90 AD |  if_e	jmp	#LR__4578
2d180     04 4E 05 F1 | 	add	fp, #4
2d184     A7 12 02 FB | 	rdlong	arg01, fp
2d188     10 4E 05 F1 | 	add	fp, #16
2d18c     A7 14 02 FB | 	rdlong	arg02, fp
2d190     14 4E 85 F1 | 	sub	fp, #20
2d194     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d198     14 4E 05 F1 | 	add	fp, #20
2d19c     A7 FA 61 FC | 	wrlong	result1, fp
2d1a0     00 FA 4D F2 | 	cmps	result1, #0 wz
2d1a4     14 4E 85 F1 | 	sub	fp, #20
2d1a8     08 4E 05 A1 |  if_e	add	fp, #8
2d1ac     A7 00 68 AC |  if_e	wrlong	#0, fp
2d1b0     08 4E 85 A1 |  if_e	sub	fp, #8
2d1b4                 | ' 							ofs = 0; break;
2d1b4     D0 00 90 AD |  if_e	jmp	#LR__4583
2d1b8     24 00 90 FD | 	jmp	#LR__4579
2d1bc                 | LR__4578
2d1bc     04 4E 05 F1 | 	add	fp, #4
2d1c0     A7 12 02 FB | 	rdlong	arg01, fp
2d1c4     10 4E 05 F1 | 	add	fp, #16
2d1c8     A7 14 02 FB | 	rdlong	arg02, fp
2d1cc     14 4E 85 F1 | 	sub	fp, #20
2d1d0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d1d4     14 4E 05 F1 | 	add	fp, #20
2d1d8     A7 FA 61 FC | 	wrlong	result1, fp
2d1dc     14 4E 85 F1 | 	sub	fp, #20
2d1e0                 | LR__4579
2d1e0     14 4E 05 F1 | 	add	fp, #20
2d1e4     A7 16 02 FB | 	rdlong	arg03, fp
2d1e8     14 4E 85 F1 | 	sub	fp, #20
2d1ec     FF FF 7F FF 
2d1f0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d1f4     1C 00 90 5D |  if_ne	jmp	#LR__4580
2d1f8     04 4E 05 F1 | 	add	fp, #4
2d1fc     A7 16 02 FB | 	rdlong	arg03, fp
2d200     04 4E 85 F1 | 	sub	fp, #4
2d204     11 16 06 F1 | 	add	arg03, #17
2d208     0B 03 48 FC | 	wrbyte	#1, arg03
2d20c     01 FA 05 F6 | 	mov	result1, #1
2d210     D0 02 90 FD | 	jmp	#LR__4593
2d214                 | LR__4580
2d214     14 4E 05 F1 | 	add	fp, #20
2d218     A7 16 02 FB | 	rdlong	arg03, fp
2d21c     14 4E 85 F1 | 	sub	fp, #20
2d220     02 16 16 F2 | 	cmp	arg03, #2 wc
2d224     24 00 90 CD |  if_b	jmp	#LR__4581
2d228     10 4E 05 F1 | 	add	fp, #16
2d22c     A7 18 02 FB | 	rdlong	arg04, fp
2d230     04 4E 05 F1 | 	add	fp, #4
2d234     A7 16 02 FB | 	rdlong	arg03, fp
2d238     14 4E 85 F1 | 	sub	fp, #20
2d23c     18 18 06 F1 | 	add	arg04, #24
2d240     0C 19 02 FB | 	rdlong	arg04, arg04
2d244     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d248     1C 00 90 CD |  if_b	jmp	#LR__4582
2d24c                 | LR__4581
2d24c     04 4E 05 F1 | 	add	fp, #4
2d250     A7 16 02 FB | 	rdlong	arg03, fp
2d254     04 4E 85 F1 | 	sub	fp, #4
2d258     11 16 06 F1 | 	add	arg03, #17
2d25c     0B 05 48 FC | 	wrbyte	#2, arg03
2d260     02 FA 05 F6 | 	mov	result1, #2
2d264     7C 02 90 FD | 	jmp	#LR__4593
2d268                 | LR__4582
2d268     04 4E 05 F1 | 	add	fp, #4
2d26c     A7 18 02 FB | 	rdlong	arg04, fp
2d270     10 4E 05 F1 | 	add	fp, #16
2d274     A7 16 02 FB | 	rdlong	arg03, fp
2d278     14 4E 85 F1 | 	sub	fp, #20
2d27c     18 18 06 F1 | 	add	arg04, #24
2d280     0C 17 62 FC | 	wrlong	arg03, arg04
2d284     7C FE 9F FD | 	jmp	#LR__4577
2d288                 | LR__4583
2d288     04 4E 05 F1 | 	add	fp, #4
2d28c     A7 16 02 FB | 	rdlong	arg03, fp
2d290     0B 13 02 F6 | 	mov	arg01, arg03
2d294     14 16 06 F1 | 	add	arg03, #20
2d298     0B 15 02 FB | 	rdlong	arg02, arg03
2d29c     04 4E 05 F1 | 	add	fp, #4
2d2a0     A7 16 02 FB | 	rdlong	arg03, fp
2d2a4     0B 15 02 F1 | 	add	arg02, arg03
2d2a8     14 12 06 F1 | 	add	arg01, #20
2d2ac     09 15 62 FC | 	wrlong	arg02, arg01
2d2b0     A7 16 02 FB | 	rdlong	arg03, fp
2d2b4     08 4E 85 F1 | 	sub	fp, #8
2d2b8     FF 17 CE F7 | 	test	arg03, #511 wz
2d2bc     6C 00 90 AD |  if_e	jmp	#LR__4585
2d2c0     10 4E 05 F1 | 	add	fp, #16
2d2c4     A7 12 02 FB | 	rdlong	arg01, fp
2d2c8     04 4E 05 F1 | 	add	fp, #4
2d2cc     A7 14 02 FB | 	rdlong	arg02, fp
2d2d0     14 4E 85 F1 | 	sub	fp, #20
2d2d4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d2d8     1C 4E 05 F1 | 	add	fp, #28
2d2dc     A7 FA 61 FC | 	wrlong	result1, fp
2d2e0     1C 4E 85 F1 | 	sub	fp, #28
2d2e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2e8     1C 00 90 5D |  if_ne	jmp	#LR__4584
2d2ec     04 4E 05 F1 | 	add	fp, #4
2d2f0     A7 16 02 FB | 	rdlong	arg03, fp
2d2f4     04 4E 85 F1 | 	sub	fp, #4
2d2f8     11 16 06 F1 | 	add	arg03, #17
2d2fc     0B 05 48 FC | 	wrbyte	#2, arg03
2d300     02 FA 05 F6 | 	mov	result1, #2
2d304     DC 01 90 FD | 	jmp	#LR__4593
2d308                 | LR__4584
2d308     1C 4E 05 F1 | 	add	fp, #28
2d30c     A7 18 02 FB | 	rdlong	arg04, fp
2d310     14 4E 85 F1 | 	sub	fp, #20
2d314     A7 16 02 FB | 	rdlong	arg03, fp
2d318     09 16 46 F0 | 	shr	arg03, #9
2d31c     0B 19 02 F1 | 	add	arg04, arg03
2d320     14 4E 05 F1 | 	add	fp, #20
2d324     A7 18 62 FC | 	wrlong	arg04, fp
2d328     1C 4E 85 F1 | 	sub	fp, #28
2d32c                 | LR__4585
2d32c                 | LR__4586
2d32c                 | LR__4587
2d32c     04 4E 05 F1 | 	add	fp, #4
2d330     A7 18 02 FB | 	rdlong	arg04, fp
2d334     0C 17 02 F6 | 	mov	arg03, arg04
2d338     04 4E 85 F1 | 	sub	fp, #4
2d33c     14 16 06 F1 | 	add	arg03, #20
2d340     0B 17 02 FB | 	rdlong	arg03, arg03
2d344     0C 18 06 F1 | 	add	arg04, #12
2d348     0C 19 02 FB | 	rdlong	arg04, arg04
2d34c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d350     3C 00 90 ED |  if_be	jmp	#LR__4588
2d354     04 4E 05 F1 | 	add	fp, #4
2d358     A7 18 02 FB | 	rdlong	arg04, fp
2d35c     0C 17 02 F6 | 	mov	arg03, arg04
2d360     14 18 06 F1 | 	add	arg04, #20
2d364     0C 19 02 FB | 	rdlong	arg04, arg04
2d368     0C 16 06 F1 | 	add	arg03, #12
2d36c     0B 19 62 FC | 	wrlong	arg04, arg03
2d370     A7 18 02 FB | 	rdlong	arg04, fp
2d374     0C 17 02 F6 | 	mov	arg03, arg04
2d378     04 4E 85 F1 | 	sub	fp, #4
2d37c     10 18 06 F1 | 	add	arg04, #16
2d380     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d384     40 18 46 F5 | 	or	arg04, #64
2d388     10 16 06 F1 | 	add	arg03, #16
2d38c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d390                 | LR__4588
2d390     04 4E 05 F1 | 	add	fp, #4
2d394     A7 16 02 FB | 	rdlong	arg03, fp
2d398     04 4E 85 F1 | 	sub	fp, #4
2d39c     14 16 06 F1 | 	add	arg03, #20
2d3a0     0B 17 02 FB | 	rdlong	arg03, arg03
2d3a4     FF 17 CE F7 | 	test	arg03, #511 wz
2d3a8     2C 01 90 AD |  if_e	jmp	#LR__4592
2d3ac     04 4E 05 F1 | 	add	fp, #4
2d3b0     A7 18 02 FB | 	rdlong	arg04, fp
2d3b4     18 4E 05 F1 | 	add	fp, #24
2d3b8     A7 16 02 FB | 	rdlong	arg03, fp
2d3bc     1C 4E 85 F1 | 	sub	fp, #28
2d3c0     1C 18 06 F1 | 	add	arg04, #28
2d3c4     0C 19 02 FB | 	rdlong	arg04, arg04
2d3c8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d3cc     08 01 90 AD |  if_e	jmp	#LR__4592
2d3d0     04 4E 05 F1 | 	add	fp, #4
2d3d4     A7 16 02 FB | 	rdlong	arg03, fp
2d3d8     04 4E 85 F1 | 	sub	fp, #4
2d3dc     10 16 06 F1 | 	add	arg03, #16
2d3e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d3e4     80 16 CE F7 | 	test	arg03, #128 wz
2d3e8     7C 00 90 AD |  if_e	jmp	#LR__4590
2d3ec     10 4E 05 F1 | 	add	fp, #16
2d3f0     A7 16 02 FB | 	rdlong	arg03, fp
2d3f4     01 16 06 F1 | 	add	arg03, #1
2d3f8     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d3fc     0C 4E 85 F1 | 	sub	fp, #12
2d400     A7 16 02 FB | 	rdlong	arg03, fp
2d404     0B 15 02 F6 | 	mov	arg02, arg03
2d408     28 14 06 F1 | 	add	arg02, #40
2d40c     04 4E 85 F1 | 	sub	fp, #4
2d410     1C 16 06 F1 | 	add	arg03, #28
2d414     0B 17 02 FB | 	rdlong	arg03, arg03
2d418     01 18 06 F6 | 	mov	arg04, #1
2d41c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d420     00 FA 0D F2 | 	cmp	result1, #0 wz
2d424     1C 00 90 AD |  if_e	jmp	#LR__4589
2d428     04 4E 05 F1 | 	add	fp, #4
2d42c     A7 16 02 FB | 	rdlong	arg03, fp
2d430     04 4E 85 F1 | 	sub	fp, #4
2d434     11 16 06 F1 | 	add	arg03, #17
2d438     0B 03 48 FC | 	wrbyte	#1, arg03
2d43c     01 FA 05 F6 | 	mov	result1, #1
2d440     A0 00 90 FD | 	jmp	#LR__4593
2d444                 | LR__4589
2d444     04 4E 05 F1 | 	add	fp, #4
2d448     A7 18 02 FB | 	rdlong	arg04, fp
2d44c     0C 17 02 F6 | 	mov	arg03, arg04
2d450     04 4E 85 F1 | 	sub	fp, #4
2d454     10 18 06 F1 | 	add	arg04, #16
2d458     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d45c     7F 18 06 F5 | 	and	arg04, #127
2d460     10 16 06 F1 | 	add	arg03, #16
2d464     0B 19 42 FC | 	wrbyte	arg04, arg03
2d468                 | LR__4590
2d468     10 4E 05 F1 | 	add	fp, #16
2d46c     A7 16 02 FB | 	rdlong	arg03, fp
2d470     01 16 06 F1 | 	add	arg03, #1
2d474     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d478     0C 4E 85 F1 | 	sub	fp, #12
2d47c     A7 14 02 FB | 	rdlong	arg02, fp
2d480     28 14 06 F1 | 	add	arg02, #40
2d484     18 4E 05 F1 | 	add	fp, #24
2d488     A7 16 02 FB | 	rdlong	arg03, fp
2d48c     1C 4E 85 F1 | 	sub	fp, #28
2d490     01 18 06 F6 | 	mov	arg04, #1
2d494     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d498     00 FA 0D F2 | 	cmp	result1, #0 wz
2d49c     1C 00 90 AD |  if_e	jmp	#LR__4591
2d4a0     04 4E 05 F1 | 	add	fp, #4
2d4a4     A7 16 02 FB | 	rdlong	arg03, fp
2d4a8     04 4E 85 F1 | 	sub	fp, #4
2d4ac     11 16 06 F1 | 	add	arg03, #17
2d4b0     0B 03 48 FC | 	wrbyte	#1, arg03
2d4b4     01 FA 05 F6 | 	mov	result1, #1
2d4b8     28 00 90 FD | 	jmp	#LR__4593
2d4bc                 | LR__4591
2d4bc     04 4E 05 F1 | 	add	fp, #4
2d4c0     A7 18 02 FB | 	rdlong	arg04, fp
2d4c4     18 4E 05 F1 | 	add	fp, #24
2d4c8     A7 16 02 FB | 	rdlong	arg03, fp
2d4cc     1C 4E 85 F1 | 	sub	fp, #28
2d4d0     1C 18 06 F1 | 	add	arg04, #28
2d4d4     0C 17 62 FC | 	wrlong	arg03, arg04
2d4d8                 | LR__4592
2d4d8                 | ' 
2d4d8                 | ' 			fp->sect = nsect;
2d4d8                 | ' 		}
2d4d8                 | ' 	}
2d4d8                 | ' 
2d4d8                 | ' 	return res ;
2d4d8     0C 4E 05 F1 | 	add	fp, #12
2d4dc     A7 FA 01 FB | 	rdlong	result1, fp
2d4e0     0C 4E 85 F1 | 	sub	fp, #12
2d4e4                 | LR__4593
2d4e4     A7 F0 03 F6 | 	mov	ptra, fp
2d4e8     B2 00 A0 FD | 	call	#popregs_
2d4ec                 | _fatfs_cc_f_lseek_ret
2d4ec     2D 00 64 FD | 	ret
2d4f0                 | 
2d4f0                 | _fatfs_cc_f_opendir
2d4f0     01 4A 05 F6 | 	mov	COUNT_, #1
2d4f4     A8 00 A0 FD | 	call	#pushregs_
2d4f8     14 F0 07 F1 | 	add	ptra, #20
2d4fc     04 4E 05 F1 | 	add	fp, #4
2d500     A7 12 62 FC | 	wrlong	arg01, fp
2d504     04 4E 05 F1 | 	add	fp, #4
2d508     A7 14 62 FC | 	wrlong	arg02, fp
2d50c     04 4E 85 F1 | 	sub	fp, #4
2d510     A7 16 0A FB | 	rdlong	arg03, fp wz
2d514     04 4E 85 F1 | 	sub	fp, #4
2d518     09 FA 05 A6 |  if_e	mov	result1, #9
2d51c     78 01 90 AD |  if_e	jmp	#LR__4606
2d520     08 4E 05 F1 | 	add	fp, #8
2d524     A7 12 02 F6 | 	mov	arg01, fp
2d528     08 4E 05 F1 | 	add	fp, #8
2d52c     A7 14 02 F6 | 	mov	arg02, fp
2d530     10 4E 85 F1 | 	sub	fp, #16
2d534     00 16 06 F6 | 	mov	arg03, #0
2d538     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d53c     0C 4E 05 F1 | 	add	fp, #12
2d540     A7 FA 61 FC | 	wrlong	result1, fp
2d544     0C 4E 85 F1 | 	sub	fp, #12
2d548     00 FA 0D F2 | 	cmp	result1, #0 wz
2d54c     20 01 90 5D |  if_ne	jmp	#LR__4605
2d550     04 4E 05 F1 | 	add	fp, #4
2d554     A7 16 02 FB | 	rdlong	arg03, fp
2d558     0C 4E 05 F1 | 	add	fp, #12
2d55c     A7 FA 01 FB | 	rdlong	result1, fp
2d560     0B FB 61 FC | 	wrlong	result1, arg03
2d564     0C 4E 85 F1 | 	sub	fp, #12
2d568     A7 12 02 FB | 	rdlong	arg01, fp
2d56c     04 4E 05 F1 | 	add	fp, #4
2d570     A7 14 02 FB | 	rdlong	arg02, fp
2d574     08 4E 85 F1 | 	sub	fp, #8
2d578     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d57c     0C 4E 05 F1 | 	add	fp, #12
2d580     A7 FA 61 FC | 	wrlong	result1, fp
2d584     0C 4E 85 F1 | 	sub	fp, #12
2d588     00 FA 0D F2 | 	cmp	result1, #0 wz
2d58c     C4 00 90 5D |  if_ne	jmp	#LR__4604
2d590     04 4E 05 F1 | 	add	fp, #4
2d594     A7 16 02 FB | 	rdlong	arg03, fp
2d598     04 4E 85 F1 | 	sub	fp, #4
2d59c     2B 16 06 F1 | 	add	arg03, #43
2d5a0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d5a4     80 16 CE F7 | 	test	arg03, #128 wz
2d5a8     58 00 90 5D |  if_ne	jmp	#LR__4602
2d5ac     04 4E 05 F1 | 	add	fp, #4
2d5b0     A7 16 02 FB | 	rdlong	arg03, fp
2d5b4     04 4E 85 F1 | 	sub	fp, #4
2d5b8     06 16 06 F1 | 	add	arg03, #6
2d5bc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d5c0     10 16 CE F7 | 	test	arg03, #16 wz
2d5c4     30 00 90 AD |  if_e	jmp	#LR__4600
2d5c8     04 4E 05 F1 | 	add	fp, #4
2d5cc     A7 16 02 FB | 	rdlong	arg03, fp
2d5d0     0B 1F 02 F6 | 	mov	local01, arg03
2d5d4     0C 4E 05 F1 | 	add	fp, #12
2d5d8     A7 12 02 FB | 	rdlong	arg01, fp
2d5dc     10 4E 85 F1 | 	sub	fp, #16
2d5e0     1C 16 06 F1 | 	add	arg03, #28
2d5e4     0B 15 02 FB | 	rdlong	arg02, arg03
2d5e8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d5ec     08 1E 06 F1 | 	add	local01, #8
2d5f0     0F FB 61 FC | 	wrlong	result1, local01
2d5f4     0C 00 90 FD | 	jmp	#LR__4601
2d5f8                 | LR__4600
2d5f8     0C 4E 05 F1 | 	add	fp, #12
2d5fc     A7 0A 68 FC | 	wrlong	#5, fp
2d600     0C 4E 85 F1 | 	sub	fp, #12
2d604                 | LR__4601
2d604                 | LR__4602
2d604     0C 4E 05 F1 | 	add	fp, #12
2d608     A7 1E 0A FB | 	rdlong	local01, fp wz
2d60c     0C 4E 85 F1 | 	sub	fp, #12
2d610     40 00 90 5D |  if_ne	jmp	#LR__4603
2d614     04 4E 05 F1 | 	add	fp, #4
2d618     A7 1E 02 FB | 	rdlong	local01, fp
2d61c     0C 4E 05 F1 | 	add	fp, #12
2d620     A7 16 02 FB | 	rdlong	arg03, fp
2d624     06 16 06 F1 | 	add	arg03, #6
2d628     0B 17 E2 FA | 	rdword	arg03, arg03
2d62c     04 1E 06 F1 | 	add	local01, #4
2d630     0F 17 52 FC | 	wrword	arg03, local01
2d634     0C 4E 85 F1 | 	sub	fp, #12
2d638     A7 12 02 FB | 	rdlong	arg01, fp
2d63c     04 4E 85 F1 | 	sub	fp, #4
2d640     00 14 06 F6 | 	mov	arg02, #0
2d644     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d648     0C 4E 05 F1 | 	add	fp, #12
2d64c     A7 FA 61 FC | 	wrlong	result1, fp
2d650     0C 4E 85 F1 | 	sub	fp, #12
2d654                 | LR__4603
2d654                 | LR__4604
2d654     0C 4E 05 F1 | 	add	fp, #12
2d658     A7 1E 02 FB | 	rdlong	local01, fp
2d65c     0C 4E 85 F1 | 	sub	fp, #12
2d660     04 1E 0E F2 | 	cmp	local01, #4 wz
2d664     0C 4E 05 A1 |  if_e	add	fp, #12
2d668     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d66c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d670                 | LR__4605
2d670     0C 4E 05 F1 | 	add	fp, #12
2d674     A7 1E 0A FB | 	rdlong	local01, fp wz
2d678     0C 4E 85 F1 | 	sub	fp, #12
2d67c     04 4E 05 51 |  if_ne	add	fp, #4
2d680     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d684     04 4E 85 51 |  if_ne	sub	fp, #4
2d688     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d68c                 | ' 
2d68c                 | ' 	return res ;
2d68c     0C 4E 05 F1 | 	add	fp, #12
2d690     A7 FA 01 FB | 	rdlong	result1, fp
2d694     0C 4E 85 F1 | 	sub	fp, #12
2d698                 | LR__4606
2d698     A7 F0 03 F6 | 	mov	ptra, fp
2d69c     B2 00 A0 FD | 	call	#popregs_
2d6a0                 | _fatfs_cc_f_opendir_ret
2d6a0     2D 00 64 FD | 	ret
2d6a4                 | 
2d6a4                 | _fatfs_cc_f_closedir
2d6a4     00 4A 05 F6 | 	mov	COUNT_, #0
2d6a8     A8 00 A0 FD | 	call	#pushregs_
2d6ac     10 F0 07 F1 | 	add	ptra, #16
2d6b0     04 4E 05 F1 | 	add	fp, #4
2d6b4     A7 12 62 FC | 	wrlong	arg01, fp
2d6b8     08 4E 05 F1 | 	add	fp, #8
2d6bc     A7 14 02 F6 | 	mov	arg02, fp
2d6c0     0C 4E 85 F1 | 	sub	fp, #12
2d6c4     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d6c8     08 4E 05 F1 | 	add	fp, #8
2d6cc     A7 FA 61 FC | 	wrlong	result1, fp
2d6d0     08 4E 85 F1 | 	sub	fp, #8
2d6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6d8     04 4E 05 A1 |  if_e	add	fp, #4
2d6dc     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d6e0     04 4E 85 A1 |  if_e	sub	fp, #4
2d6e4     FD 00 68 AC |  if_e	wrlong	#0, result1
2d6e8                 | ' 
2d6e8                 | ' 
2d6e8                 | ' 
2d6e8                 | ' 
2d6e8                 | ' 		dp->obj.fs = 0;
2d6e8                 | ' #line 4633 "ff.c"
2d6e8                 | ' 	}
2d6e8                 | ' 	return res;
2d6e8     08 4E 05 F1 | 	add	fp, #8
2d6ec     A7 FA 01 FB | 	rdlong	result1, fp
2d6f0     08 4E 85 F1 | 	sub	fp, #8
2d6f4     A7 F0 03 F6 | 	mov	ptra, fp
2d6f8     B2 00 A0 FD | 	call	#popregs_
2d6fc                 | _fatfs_cc_f_closedir_ret
2d6fc     2D 00 64 FD | 	ret
2d700                 | 
2d700                 | _fatfs_cc_f_readdir
2d700     00 4A 05 F6 | 	mov	COUNT_, #0
2d704     A8 00 A0 FD | 	call	#pushregs_
2d708     14 F0 07 F1 | 	add	ptra, #20
2d70c     04 4E 05 F1 | 	add	fp, #4
2d710     A7 12 62 FC | 	wrlong	arg01, fp
2d714     04 4E 05 F1 | 	add	fp, #4
2d718     A7 14 62 FC | 	wrlong	arg02, fp
2d71c     04 4E 85 F1 | 	sub	fp, #4
2d720     A7 12 02 FB | 	rdlong	arg01, fp
2d724     0C 4E 05 F1 | 	add	fp, #12
2d728     A7 14 02 F6 | 	mov	arg02, fp
2d72c     10 4E 85 F1 | 	sub	fp, #16
2d730     54 DD BF FD | 	call	#_fatfs_cc_validate
2d734     0C 4E 05 F1 | 	add	fp, #12
2d738     A7 FA 61 FC | 	wrlong	result1, fp
2d73c     0C 4E 85 F1 | 	sub	fp, #12
2d740     00 FA 0D F2 | 	cmp	result1, #0 wz
2d744     BC 00 90 5D |  if_ne	jmp	#LR__4613
2d748     08 4E 05 F1 | 	add	fp, #8
2d74c     A7 FA 09 FB | 	rdlong	result1, fp wz
2d750     08 4E 85 F1 | 	sub	fp, #8
2d754     24 00 90 5D |  if_ne	jmp	#LR__4610
2d758     04 4E 05 F1 | 	add	fp, #4
2d75c     A7 12 02 FB | 	rdlong	arg01, fp
2d760     04 4E 85 F1 | 	sub	fp, #4
2d764     00 14 06 F6 | 	mov	arg02, #0
2d768     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d76c     0C 4E 05 F1 | 	add	fp, #12
2d770     A7 FA 61 FC | 	wrlong	result1, fp
2d774     0C 4E 85 F1 | 	sub	fp, #12
2d778     88 00 90 FD | 	jmp	#LR__4612
2d77c                 | LR__4610
2d77c     04 4E 05 F1 | 	add	fp, #4
2d780     A7 12 02 FB | 	rdlong	arg01, fp
2d784     04 4E 85 F1 | 	sub	fp, #4
2d788     00 14 06 F6 | 	mov	arg02, #0
2d78c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d790     0C 4E 05 F1 | 	add	fp, #12
2d794     A7 FA 61 FC | 	wrlong	result1, fp
2d798     0C 4E 85 F1 | 	sub	fp, #12
2d79c     04 FA 0D F2 | 	cmp	result1, #4 wz
2d7a0     0C 4E 05 A1 |  if_e	add	fp, #12
2d7a4     A7 00 68 AC |  if_e	wrlong	#0, fp
2d7a8     0C 4E 85 A1 |  if_e	sub	fp, #12
2d7ac     0C 4E 05 F1 | 	add	fp, #12
2d7b0     A7 FA 09 FB | 	rdlong	result1, fp wz
2d7b4     0C 4E 85 F1 | 	sub	fp, #12
2d7b8     48 00 90 5D |  if_ne	jmp	#LR__4611
2d7bc     04 4E 05 F1 | 	add	fp, #4
2d7c0     A7 12 02 FB | 	rdlong	arg01, fp
2d7c4     04 4E 05 F1 | 	add	fp, #4
2d7c8     A7 14 02 FB | 	rdlong	arg02, fp
2d7cc     08 4E 85 F1 | 	sub	fp, #8
2d7d0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d7d4     04 4E 05 F1 | 	add	fp, #4
2d7d8     A7 12 02 FB | 	rdlong	arg01, fp
2d7dc     04 4E 85 F1 | 	sub	fp, #4
2d7e0     00 14 06 F6 | 	mov	arg02, #0
2d7e4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d7e8     0C 4E 05 F1 | 	add	fp, #12
2d7ec     A7 FA 61 FC | 	wrlong	result1, fp
2d7f0     0C 4E 85 F1 | 	sub	fp, #12
2d7f4     04 FA 0D F2 | 	cmp	result1, #4 wz
2d7f8     0C 4E 05 A1 |  if_e	add	fp, #12
2d7fc     A7 00 68 AC |  if_e	wrlong	#0, fp
2d800     0C 4E 85 A1 |  if_e	sub	fp, #12
2d804                 | LR__4611
2d804                 | LR__4612
2d804                 | LR__4613
2d804                 | ' 			}
2d804                 | ' 			;
2d804                 | ' 		}
2d804                 | ' 	}
2d804                 | ' 	return res ;
2d804     0C 4E 05 F1 | 	add	fp, #12
2d808     A7 FA 01 FB | 	rdlong	result1, fp
2d80c     0C 4E 85 F1 | 	sub	fp, #12
2d810     A7 F0 03 F6 | 	mov	ptra, fp
2d814     B2 00 A0 FD | 	call	#popregs_
2d818                 | _fatfs_cc_f_readdir_ret
2d818     2D 00 64 FD | 	ret
2d81c                 | 
2d81c                 | _fatfs_cc_f_stat
2d81c     00 4A 05 F6 | 	mov	COUNT_, #0
2d820     A8 00 A0 FD | 	call	#pushregs_
2d824     40 F0 07 F1 | 	add	ptra, #64
2d828     04 4E 05 F1 | 	add	fp, #4
2d82c     A7 12 62 FC | 	wrlong	arg01, fp
2d830     04 4E 05 F1 | 	add	fp, #4
2d834     A7 14 62 FC | 	wrlong	arg02, fp
2d838     04 4E 85 F1 | 	sub	fp, #4
2d83c     A7 12 02 F6 | 	mov	arg01, fp
2d840     0C 4E 05 F1 | 	add	fp, #12
2d844     A7 14 02 F6 | 	mov	arg02, fp
2d848     10 4E 85 F1 | 	sub	fp, #16
2d84c     00 16 06 F6 | 	mov	arg03, #0
2d850     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2d854     0C 4E 05 F1 | 	add	fp, #12
2d858     A7 FA 61 FC | 	wrlong	result1, fp
2d85c     0C 4E 85 F1 | 	sub	fp, #12
2d860     00 FA 0D F2 | 	cmp	result1, #0 wz
2d864     74 00 90 5D |  if_ne	jmp	#LR__4623
2d868     10 4E 05 F1 | 	add	fp, #16
2d86c     A7 12 02 F6 | 	mov	arg01, fp
2d870     0C 4E 85 F1 | 	sub	fp, #12
2d874     A7 14 02 FB | 	rdlong	arg02, fp
2d878     04 4E 85 F1 | 	sub	fp, #4
2d87c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2d880     0C 4E 05 F1 | 	add	fp, #12
2d884     A7 FA 61 FC | 	wrlong	result1, fp
2d888     0C 4E 85 F1 | 	sub	fp, #12
2d88c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d890     48 00 90 5D |  if_ne	jmp	#LR__4622
2d894     3B 4E 05 F1 | 	add	fp, #59
2d898     A7 FA C1 FA | 	rdbyte	result1, fp
2d89c     3B 4E 85 F1 | 	sub	fp, #59
2d8a0     80 FA CD F7 | 	test	result1, #128 wz
2d8a4     0C 4E 05 51 |  if_ne	add	fp, #12
2d8a8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d8ac     0C 4E 85 51 |  if_ne	sub	fp, #12
2d8b0     28 00 90 5D |  if_ne	jmp	#LR__4621
2d8b4     08 4E 05 F1 | 	add	fp, #8
2d8b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2d8bc     08 4E 85 F1 | 	sub	fp, #8
2d8c0     18 00 90 AD |  if_e	jmp	#LR__4620
2d8c4     10 4E 05 F1 | 	add	fp, #16
2d8c8     A7 12 02 F6 | 	mov	arg01, fp
2d8cc     08 4E 85 F1 | 	sub	fp, #8
2d8d0     A7 14 02 FB | 	rdlong	arg02, fp
2d8d4     08 4E 85 F1 | 	sub	fp, #8
2d8d8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d8dc                 | LR__4620
2d8dc                 | LR__4621
2d8dc                 | LR__4622
2d8dc                 | LR__4623
2d8dc                 | ' 			}
2d8dc                 | ' 		}
2d8dc                 | ' 		;
2d8dc                 | ' 	}
2d8dc                 | ' 
2d8dc                 | ' 	return res ;
2d8dc     0C 4E 05 F1 | 	add	fp, #12
2d8e0     A7 FA 01 FB | 	rdlong	result1, fp
2d8e4     0C 4E 85 F1 | 	sub	fp, #12
2d8e8     A7 F0 03 F6 | 	mov	ptra, fp
2d8ec     B2 00 A0 FD | 	call	#popregs_
2d8f0                 | _fatfs_cc_f_stat_ret
2d8f0     2D 00 64 FD | 	ret
2d8f4                 | 
2d8f4                 | _fatfs_cc_f_unlink
2d8f4     00 4A 05 F6 | 	mov	COUNT_, #0
2d8f8     A8 00 A0 FD | 	call	#pushregs_
2d8fc     74 F0 07 F1 | 	add	ptra, #116
2d900     04 4E 05 F1 | 	add	fp, #4
2d904     A7 12 62 FC | 	wrlong	arg01, fp
2d908     68 4E 05 F1 | 	add	fp, #104
2d90c     A7 00 68 FC | 	wrlong	#0, fp
2d910     68 4E 85 F1 | 	sub	fp, #104
2d914     A7 12 02 F6 | 	mov	arg01, fp
2d918     6C 4E 05 F1 | 	add	fp, #108
2d91c     A7 14 02 F6 | 	mov	arg02, fp
2d920     70 4E 85 F1 | 	sub	fp, #112
2d924     02 16 06 F6 | 	mov	arg03, #2
2d928     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2d92c     08 4E 05 F1 | 	add	fp, #8
2d930     A7 FA 61 FC | 	wrlong	result1, fp
2d934     08 4E 85 F1 | 	sub	fp, #8
2d938     00 FA 0D F2 | 	cmp	result1, #0 wz
2d93c     E4 01 90 5D |  if_ne	jmp	#LR__4638
2d940     70 4E 05 F1 | 	add	fp, #112
2d944     A7 16 02 FB | 	rdlong	arg03, fp
2d948     64 4E 85 F1 | 	sub	fp, #100
2d94c     A7 16 62 FC | 	wrlong	arg03, fp
2d950     A7 12 02 F6 | 	mov	arg01, fp
2d954     08 4E 85 F1 | 	sub	fp, #8
2d958     A7 14 02 FB | 	rdlong	arg02, fp
2d95c     04 4E 85 F1 | 	sub	fp, #4
2d960     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2d964     08 4E 05 F1 | 	add	fp, #8
2d968     A7 FA 61 FC | 	wrlong	result1, fp
2d96c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d970     08 4E 85 F1 | 	sub	fp, #8
2d974     AC 01 90 5D |  if_ne	jmp	#LR__4637
2d978     37 4E 05 F1 | 	add	fp, #55
2d97c     A7 FA C1 FA | 	rdbyte	result1, fp
2d980     37 4E 85 F1 | 	sub	fp, #55
2d984     80 FA CD F7 | 	test	result1, #128 wz
2d988     08 4E 05 51 |  if_ne	add	fp, #8
2d98c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d990     08 4E 85 51 |  if_ne	sub	fp, #8
2d994     1C 00 90 5D |  if_ne	jmp	#LR__4630
2d998     12 4E 05 F1 | 	add	fp, #18
2d99c     A7 FA C1 FA | 	rdbyte	result1, fp
2d9a0     12 4E 85 F1 | 	sub	fp, #18
2d9a4     01 FA CD F7 | 	test	result1, #1 wz
2d9a8     08 4E 05 51 |  if_ne	add	fp, #8
2d9ac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2d9b0     08 4E 85 51 |  if_ne	sub	fp, #8
2d9b4                 | LR__4630
2d9b4     08 4E 05 F1 | 	add	fp, #8
2d9b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9bc     08 4E 85 F1 | 	sub	fp, #8
2d9c0     C8 00 90 5D |  if_ne	jmp	#LR__4633
2d9c4     70 4E 05 F1 | 	add	fp, #112
2d9c8     A7 12 02 FB | 	rdlong	arg01, fp
2d9cc     48 4E 85 F1 | 	sub	fp, #72
2d9d0     A7 14 02 FB | 	rdlong	arg02, fp
2d9d4     28 4E 85 F1 | 	sub	fp, #40
2d9d8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2d9dc     6C 4E 05 F1 | 	add	fp, #108
2d9e0     A7 FA 61 FC | 	wrlong	result1, fp
2d9e4     5A 4E 85 F1 | 	sub	fp, #90
2d9e8     A7 FA C1 FA | 	rdbyte	result1, fp
2d9ec     12 4E 85 F1 | 	sub	fp, #18
2d9f0     10 FA CD F7 | 	test	result1, #16 wz
2d9f4     94 00 90 AD |  if_e	jmp	#LR__4632
2d9f8     70 4E 05 F1 | 	add	fp, #112
2d9fc     A7 FA 01 FB | 	rdlong	result1, fp
2da00     34 4E 85 F1 | 	sub	fp, #52
2da04     A7 FA 61 FC | 	wrlong	result1, fp
2da08     30 4E 05 F1 | 	add	fp, #48
2da0c     A7 16 02 FB | 	rdlong	arg03, fp
2da10     28 4E 85 F1 | 	sub	fp, #40
2da14     A7 16 62 FC | 	wrlong	arg03, fp
2da18     08 4E 85 F1 | 	sub	fp, #8
2da1c     A7 12 02 F6 | 	mov	arg01, fp
2da20     3C 4E 85 F1 | 	sub	fp, #60
2da24     00 14 06 F6 | 	mov	arg02, #0
2da28     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2da2c     08 4E 05 F1 | 	add	fp, #8
2da30     A7 FA 61 FC | 	wrlong	result1, fp
2da34     08 4E 85 F1 | 	sub	fp, #8
2da38     00 FA 0D F2 | 	cmp	result1, #0 wz
2da3c     4C 00 90 5D |  if_ne	jmp	#LR__4631
2da40     3C 4E 05 F1 | 	add	fp, #60
2da44     A7 12 02 F6 | 	mov	arg01, fp
2da48     3C 4E 85 F1 | 	sub	fp, #60
2da4c     00 14 06 F6 | 	mov	arg02, #0
2da50     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2da54     08 4E 05 F1 | 	add	fp, #8
2da58     A7 FA 61 FC | 	wrlong	result1, fp
2da5c     00 FA 4D F2 | 	cmps	result1, #0 wz
2da60     08 4E 85 F1 | 	sub	fp, #8
2da64     08 4E 05 A1 |  if_e	add	fp, #8
2da68     A7 0E 68 AC |  if_e	wrlong	#7, fp
2da6c     08 4E 85 A1 |  if_e	sub	fp, #8
2da70     08 4E 05 F1 | 	add	fp, #8
2da74     A7 FA 01 FB | 	rdlong	result1, fp
2da78     08 4E 85 F1 | 	sub	fp, #8
2da7c     04 FA 0D F2 | 	cmp	result1, #4 wz
2da80     08 4E 05 A1 |  if_e	add	fp, #8
2da84     A7 00 68 AC |  if_e	wrlong	#0, fp
2da88     08 4E 85 A1 |  if_e	sub	fp, #8
2da8c                 | LR__4631
2da8c                 | LR__4632
2da8c                 | LR__4633
2da8c     08 4E 05 F1 | 	add	fp, #8
2da90     A7 FA 09 FB | 	rdlong	result1, fp wz
2da94     08 4E 85 F1 | 	sub	fp, #8
2da98     88 00 90 5D |  if_ne	jmp	#LR__4636
2da9c     0C 4E 05 F1 | 	add	fp, #12
2daa0     A7 12 02 F6 | 	mov	arg01, fp
2daa4     0C 4E 85 F1 | 	sub	fp, #12
2daa8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2daac     08 4E 05 F1 | 	add	fp, #8
2dab0     A7 FA 61 FC | 	wrlong	result1, fp
2dab4     08 4E 85 F1 | 	sub	fp, #8
2dab8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dabc     38 00 90 5D |  if_ne	jmp	#LR__4634
2dac0     6C 4E 05 F1 | 	add	fp, #108
2dac4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dac8     6C 4E 85 F1 | 	sub	fp, #108
2dacc     28 00 90 AD |  if_e	jmp	#LR__4634
2dad0     0C 4E 05 F1 | 	add	fp, #12
2dad4     A7 12 02 F6 | 	mov	arg01, fp
2dad8     60 4E 05 F1 | 	add	fp, #96
2dadc     A7 14 02 FB | 	rdlong	arg02, fp
2dae0     6C 4E 85 F1 | 	sub	fp, #108
2dae4     00 16 06 F6 | 	mov	arg03, #0
2dae8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2daec     08 4E 05 F1 | 	add	fp, #8
2daf0     A7 FA 61 FC | 	wrlong	result1, fp
2daf4     08 4E 85 F1 | 	sub	fp, #8
2daf8                 | LR__4634
2daf8     08 4E 05 F1 | 	add	fp, #8
2dafc     A7 FA 09 FB | 	rdlong	result1, fp wz
2db00     08 4E 85 F1 | 	sub	fp, #8
2db04     1C 00 90 5D |  if_ne	jmp	#LR__4635
2db08     70 4E 05 F1 | 	add	fp, #112
2db0c     A7 12 02 FB | 	rdlong	arg01, fp
2db10     70 4E 85 F1 | 	sub	fp, #112
2db14     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2db18     08 4E 05 F1 | 	add	fp, #8
2db1c     A7 FA 61 FC | 	wrlong	result1, fp
2db20     08 4E 85 F1 | 	sub	fp, #8
2db24                 | LR__4635
2db24                 | LR__4636
2db24                 | LR__4637
2db24                 | LR__4638
2db24                 | ' 			}
2db24                 | ' 		}
2db24                 | ' 		;
2db24                 | ' 	}
2db24                 | ' 
2db24                 | ' 	return res ;
2db24     08 4E 05 F1 | 	add	fp, #8
2db28     A7 FA 01 FB | 	rdlong	result1, fp
2db2c     08 4E 85 F1 | 	sub	fp, #8
2db30     A7 F0 03 F6 | 	mov	ptra, fp
2db34     B2 00 A0 FD | 	call	#popregs_
2db38                 | _fatfs_cc_f_unlink_ret
2db38     2D 00 64 FD | 	ret
2db3c                 | 
2db3c                 | _fatfs_cc_f_mkdir
2db3c     00 4A 05 F6 | 	mov	COUNT_, #0
2db40     A8 00 A0 FD | 	call	#pushregs_
2db44     5C F0 07 F1 | 	add	ptra, #92
2db48     04 4E 05 F1 | 	add	fp, #4
2db4c     A7 12 62 FC | 	wrlong	arg01, fp
2db50     A7 12 02 F6 | 	mov	arg01, fp
2db54     48 4E 05 F1 | 	add	fp, #72
2db58     A7 14 02 F6 | 	mov	arg02, fp
2db5c     4C 4E 85 F1 | 	sub	fp, #76
2db60     02 16 06 F6 | 	mov	arg03, #2
2db64     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2db68     08 4E 05 F1 | 	add	fp, #8
2db6c     A7 FA 61 FC | 	wrlong	result1, fp
2db70     08 4E 85 F1 | 	sub	fp, #8
2db74     00 FA 0D F2 | 	cmp	result1, #0 wz
2db78     C4 02 90 5D |  if_ne	jmp	#LR__4645
2db7c     4C 4E 05 F1 | 	add	fp, #76
2db80     A7 16 02 FB | 	rdlong	arg03, fp
2db84     40 4E 85 F1 | 	sub	fp, #64
2db88     A7 16 62 FC | 	wrlong	arg03, fp
2db8c     A7 12 02 F6 | 	mov	arg01, fp
2db90     08 4E 85 F1 | 	sub	fp, #8
2db94     A7 14 02 FB | 	rdlong	arg02, fp
2db98     04 4E 85 F1 | 	sub	fp, #4
2db9c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2dba0     08 4E 05 F1 | 	add	fp, #8
2dba4     A7 FA 61 FC | 	wrlong	result1, fp
2dba8     00 FA 4D F2 | 	cmps	result1, #0 wz
2dbac     08 4E 85 F1 | 	sub	fp, #8
2dbb0     08 4E 05 A1 |  if_e	add	fp, #8
2dbb4     A7 10 68 AC |  if_e	wrlong	#8, fp
2dbb8     08 4E 85 A1 |  if_e	sub	fp, #8
2dbbc     08 4E 05 F1 | 	add	fp, #8
2dbc0     A7 FA 01 FB | 	rdlong	result1, fp
2dbc4     08 4E 85 F1 | 	sub	fp, #8
2dbc8     04 FA 0D F2 | 	cmp	result1, #4 wz
2dbcc     70 02 90 5D |  if_ne	jmp	#LR__4644
2dbd0     4C 4E 05 F1 | 	add	fp, #76
2dbd4     A7 16 02 FB | 	rdlong	arg03, fp
2dbd8     10 4E 85 F1 | 	sub	fp, #16
2dbdc     A7 16 62 FC | 	wrlong	arg03, fp
2dbe0     A7 12 02 F6 | 	mov	arg01, fp
2dbe4     3C 4E 85 F1 | 	sub	fp, #60
2dbe8     00 14 06 F6 | 	mov	arg02, #0
2dbec     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dbf0     50 4E 05 F1 | 	add	fp, #80
2dbf4     A7 FA 61 FC | 	wrlong	result1, fp
2dbf8     48 4E 85 F1 | 	sub	fp, #72
2dbfc     A7 00 68 FC | 	wrlong	#0, fp
2dc00     48 4E 05 F1 | 	add	fp, #72
2dc04     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc08     50 4E 85 F1 | 	sub	fp, #80
2dc0c     08 4E 05 A1 |  if_e	add	fp, #8
2dc10     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dc14     08 4E 85 A1 |  if_e	sub	fp, #8
2dc18     50 4E 05 F1 | 	add	fp, #80
2dc1c     A7 FA 01 FB | 	rdlong	result1, fp
2dc20     50 4E 85 F1 | 	sub	fp, #80
2dc24     01 FA 0D F2 | 	cmp	result1, #1 wz
2dc28     08 4E 05 A1 |  if_e	add	fp, #8
2dc2c     A7 04 68 AC |  if_e	wrlong	#2, fp
2dc30     08 4E 85 A1 |  if_e	sub	fp, #8
2dc34     50 4E 05 F1 | 	add	fp, #80
2dc38     A7 16 02 FB | 	rdlong	arg03, fp
2dc3c     50 4E 85 F1 | 	sub	fp, #80
2dc40     FF FF 7F FF 
2dc44     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2dc48     08 4E 05 A1 |  if_e	add	fp, #8
2dc4c     A7 02 68 AC |  if_e	wrlong	#1, fp
2dc50     08 4E 85 A1 |  if_e	sub	fp, #8
2dc54     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2dc58     58 4E 05 F1 | 	add	fp, #88
2dc5c     A7 FA 61 FC | 	wrlong	result1, fp
2dc60     50 4E 85 F1 | 	sub	fp, #80
2dc64     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc68     08 4E 85 F1 | 	sub	fp, #8
2dc6c     1C 01 90 5D |  if_ne	jmp	#LR__4641
2dc70     4C 4E 05 F1 | 	add	fp, #76
2dc74     A7 12 02 FB | 	rdlong	arg01, fp
2dc78     04 4E 05 F1 | 	add	fp, #4
2dc7c     A7 14 02 FB | 	rdlong	arg02, fp
2dc80     50 4E 85 F1 | 	sub	fp, #80
2dc84     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2dc88     08 4E 05 F1 | 	add	fp, #8
2dc8c     A7 FA 61 FC | 	wrlong	result1, fp
2dc90     00 FA 4D F2 | 	cmps	result1, #0 wz
2dc94     08 4E 85 F1 | 	sub	fp, #8
2dc98     F0 00 90 5D |  if_ne	jmp	#LR__4640
2dc9c     4C 4E 05 F1 | 	add	fp, #76
2dca0     A7 12 02 FB | 	rdlong	arg01, fp
2dca4     4C 4E 85 F1 | 	sub	fp, #76
2dca8     34 12 06 F1 | 	add	arg01, #52
2dcac     20 14 06 F6 | 	mov	arg02, #32
2dcb0     0B 16 06 F6 | 	mov	arg03, #11
2dcb4     98 00 A0 FD | 	call	#\builtin_bytefill_
2dcb8     4C 4E 05 F1 | 	add	fp, #76
2dcbc     A7 FA 01 FB | 	rdlong	result1, fp
2dcc0     34 FA 05 F1 | 	add	result1, #52
2dcc4     FD 5C 48 FC | 	wrbyte	#46, result1
2dcc8     A7 16 02 FB | 	rdlong	arg03, fp
2dccc     3F 16 06 F1 | 	add	arg03, #63
2dcd0     0B 21 48 FC | 	wrbyte	#16, arg03
2dcd4     A7 12 02 FB | 	rdlong	arg01, fp
2dcd8     4A 12 06 F1 | 	add	arg01, #74
2dcdc     0C 4E 05 F1 | 	add	fp, #12
2dce0     A7 14 02 FB | 	rdlong	arg02, fp
2dce4     09 15 62 FC | 	wrlong	arg02, arg01
2dce8     0C 4E 85 F1 | 	sub	fp, #12
2dcec     A7 14 02 FB | 	rdlong	arg02, fp
2dcf0     0A 13 02 F6 | 	mov	arg01, arg02
2dcf4     34 14 06 F1 | 	add	arg02, #52
2dcf8     04 4E 05 F1 | 	add	fp, #4
2dcfc     A7 16 02 FB | 	rdlong	arg03, fp
2dd00     50 4E 85 F1 | 	sub	fp, #80
2dd04     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dd08     4C 4E 05 F1 | 	add	fp, #76
2dd0c     A7 14 02 FB | 	rdlong	arg02, fp
2dd10     0A 13 02 F6 | 	mov	arg01, arg02
2dd14     54 12 06 F1 | 	add	arg01, #84
2dd18     4C 4E 85 F1 | 	sub	fp, #76
2dd1c     34 14 06 F1 | 	add	arg02, #52
2dd20     20 16 06 F6 | 	mov	arg03, #32
2dd24     3C 2A BF FD | 	call	#__system____builtin_memmove
2dd28     4C 4E 05 F1 | 	add	fp, #76
2dd2c     A7 16 02 FB | 	rdlong	arg03, fp
2dd30     55 16 06 F1 | 	add	arg03, #85
2dd34     0B 5D 48 FC | 	wrbyte	#46, arg03
2dd38     38 4E 85 F1 | 	sub	fp, #56
2dd3c     A7 16 02 FB | 	rdlong	arg03, fp
2dd40     40 4E 05 F1 | 	add	fp, #64
2dd44     A7 16 62 FC | 	wrlong	arg03, fp
2dd48     08 4E 85 F1 | 	sub	fp, #8
2dd4c     A7 14 02 FB | 	rdlong	arg02, fp
2dd50     0A 13 02 F6 | 	mov	arg01, arg02
2dd54     54 14 06 F1 | 	add	arg02, #84
2dd58     4C 4E 85 F1 | 	sub	fp, #76
2dd5c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dd60     4C 4E 05 F1 | 	add	fp, #76
2dd64     A7 16 02 FB | 	rdlong	arg03, fp
2dd68     03 16 06 F1 | 	add	arg03, #3
2dd6c     0B 03 48 FC | 	wrbyte	#1, arg03
2dd70     40 4E 85 F1 | 	sub	fp, #64
2dd74     A7 12 02 F6 | 	mov	arg01, fp
2dd78     0C 4E 85 F1 | 	sub	fp, #12
2dd7c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2dd80     08 4E 05 F1 | 	add	fp, #8
2dd84     A7 FA 61 FC | 	wrlong	result1, fp
2dd88     08 4E 85 F1 | 	sub	fp, #8
2dd8c                 | LR__4640
2dd8c                 | LR__4641
2dd8c     08 4E 05 F1 | 	add	fp, #8
2dd90     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd94     08 4E 85 F1 | 	sub	fp, #8
2dd98     88 00 90 5D |  if_ne	jmp	#LR__4642
2dd9c     28 4E 05 F1 | 	add	fp, #40
2dda0     A7 12 02 FB | 	rdlong	arg01, fp
2dda4     16 12 06 F1 | 	add	arg01, #22
2dda8     30 4E 05 F1 | 	add	fp, #48
2ddac     A7 14 02 FB | 	rdlong	arg02, fp
2ddb0     09 15 62 FC | 	wrlong	arg02, arg01
2ddb4     0C 4E 85 F1 | 	sub	fp, #12
2ddb8     A7 12 02 FB | 	rdlong	arg01, fp
2ddbc     24 4E 85 F1 | 	sub	fp, #36
2ddc0     A7 14 02 FB | 	rdlong	arg02, fp
2ddc4     28 4E 05 F1 | 	add	fp, #40
2ddc8     A7 16 02 FB | 	rdlong	arg03, fp
2ddcc     50 4E 85 F1 | 	sub	fp, #80
2ddd0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2ddd4     28 4E 05 F1 | 	add	fp, #40
2ddd8     A7 FA 01 FB | 	rdlong	result1, fp
2dddc     0B FA 05 F1 | 	add	result1, #11
2dde0     FD 20 48 FC | 	wrbyte	#16, result1
2dde4     24 4E 05 F1 | 	add	fp, #36
2dde8     A7 FA 01 FB | 	rdlong	result1, fp
2ddec     03 FA 05 F1 | 	add	result1, #3
2ddf0     FD 02 48 FC | 	wrbyte	#1, result1
2ddf4     44 4E 85 F1 | 	sub	fp, #68
2ddf8     A7 FA 09 FB | 	rdlong	result1, fp wz
2ddfc     08 4E 85 F1 | 	sub	fp, #8
2de00     3C 00 90 5D |  if_ne	jmp	#LR__4643
2de04     4C 4E 05 F1 | 	add	fp, #76
2de08     A7 12 02 FB | 	rdlong	arg01, fp
2de0c     4C 4E 85 F1 | 	sub	fp, #76
2de10     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2de14     08 4E 05 F1 | 	add	fp, #8
2de18     A7 FA 61 FC | 	wrlong	result1, fp
2de1c     08 4E 85 F1 | 	sub	fp, #8
2de20     1C 00 90 FD | 	jmp	#LR__4643
2de24                 | LR__4642
2de24     3C 4E 05 F1 | 	add	fp, #60
2de28     A7 12 02 F6 | 	mov	arg01, fp
2de2c     14 4E 05 F1 | 	add	fp, #20
2de30     A7 14 02 FB | 	rdlong	arg02, fp
2de34     50 4E 85 F1 | 	sub	fp, #80
2de38     00 16 06 F6 | 	mov	arg03, #0
2de3c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2de40                 | LR__4643
2de40                 | LR__4644
2de40                 | LR__4645
2de40                 | ' 				remove_chain(&sobj, dcl, 0);
2de40                 | ' 			}
2de40                 | ' 		}
2de40                 | ' 		;
2de40                 | ' 	}
2de40                 | ' 
2de40                 | ' 	return res ;
2de40     08 4E 05 F1 | 	add	fp, #8
2de44     A7 FA 01 FB | 	rdlong	result1, fp
2de48     08 4E 85 F1 | 	sub	fp, #8
2de4c     A7 F0 03 F6 | 	mov	ptra, fp
2de50     B2 00 A0 FD | 	call	#popregs_
2de54                 | _fatfs_cc_f_mkdir_ret
2de54     2D 00 64 FD | 	ret
2de58                 | 
2de58                 | _fatfs_cc_f_rename
2de58     01 4A 05 F6 | 	mov	COUNT_, #1
2de5c     A8 00 A0 FD | 	call	#pushregs_
2de60     9C F0 07 F1 | 	add	ptra, #156
2de64     04 4E 05 F1 | 	add	fp, #4
2de68     A7 12 62 FC | 	wrlong	arg01, fp
2de6c     04 4E 05 F1 | 	add	fp, #4
2de70     A7 14 62 FC | 	wrlong	arg02, fp
2de74     A7 12 02 F6 | 	mov	arg01, fp
2de78     08 4E 85 F1 | 	sub	fp, #8
2de7c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2de80     04 4E 05 F1 | 	add	fp, #4
2de84     A7 12 02 F6 | 	mov	arg01, fp
2de88     6C 4E 05 F1 | 	add	fp, #108
2de8c     A7 14 02 F6 | 	mov	arg02, fp
2de90     70 4E 85 F1 | 	sub	fp, #112
2de94     02 16 06 F6 | 	mov	arg03, #2
2de98     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2de9c     0C 4E 05 F1 | 	add	fp, #12
2dea0     A7 FA 61 FC | 	wrlong	result1, fp
2dea4     0C 4E 85 F1 | 	sub	fp, #12
2dea8     00 FA 0D F2 | 	cmp	result1, #0 wz
2deac     44 03 90 5D |  if_ne	jmp	#LR__4663
2deb0     70 4E 05 F1 | 	add	fp, #112
2deb4     A7 16 02 FB | 	rdlong	arg03, fp
2deb8     60 4E 85 F1 | 	sub	fp, #96
2debc     A7 16 62 FC | 	wrlong	arg03, fp
2dec0     A7 12 02 F6 | 	mov	arg01, fp
2dec4     0C 4E 85 F1 | 	sub	fp, #12
2dec8     A7 14 02 FB | 	rdlong	arg02, fp
2decc     04 4E 85 F1 | 	sub	fp, #4
2ded0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2ded4     0C 4E 05 F1 | 	add	fp, #12
2ded8     A7 FA 61 FC | 	wrlong	result1, fp
2dedc     00 FA 4D F2 | 	cmps	result1, #0 wz
2dee0     0C 4E 85 F1 | 	sub	fp, #12
2dee4     1C 00 90 5D |  if_ne	jmp	#LR__4650
2dee8     3B 4E 05 F1 | 	add	fp, #59
2deec     A7 FA C1 FA | 	rdbyte	result1, fp
2def0     3B 4E 85 F1 | 	sub	fp, #59
2def4     A0 FA CD F7 | 	test	result1, #160 wz
2def8     0C 4E 05 51 |  if_ne	add	fp, #12
2defc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2df00     0C 4E 85 51 |  if_ne	sub	fp, #12
2df04                 | LR__4650
2df04     0C 4E 05 F1 | 	add	fp, #12
2df08     A7 1E 0A FB | 	rdlong	local01, fp wz
2df0c     0C 4E 85 F1 | 	sub	fp, #12
2df10     E0 02 90 5D |  if_ne	jmp	#LR__4662
2df14     74 4E 05 F1 | 	add	fp, #116
2df18     A7 12 02 F6 | 	mov	arg01, fp
2df1c     48 4E 85 F1 | 	sub	fp, #72
2df20     A7 14 02 FB | 	rdlong	arg02, fp
2df24     2C 4E 85 F1 | 	sub	fp, #44
2df28     20 16 06 F6 | 	mov	arg03, #32
2df2c     34 28 BF FD | 	call	#__system____builtin_memmove
2df30     40 4E 05 F1 | 	add	fp, #64
2df34     A7 12 02 F6 | 	mov	arg01, fp
2df38     30 4E 85 F1 | 	sub	fp, #48
2df3c     A7 14 02 F6 | 	mov	arg02, fp
2df40     10 4E 85 F1 | 	sub	fp, #16
2df44     30 16 06 F6 | 	mov	arg03, #48
2df48     18 28 BF FD | 	call	#__system____builtin_memmove
2df4c     40 4E 05 F1 | 	add	fp, #64
2df50     A7 12 02 F6 | 	mov	arg01, fp
2df54     38 4E 85 F1 | 	sub	fp, #56
2df58     A7 14 02 FB | 	rdlong	arg02, fp
2df5c     08 4E 85 F1 | 	sub	fp, #8
2df60     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2df64     0C 4E 05 F1 | 	add	fp, #12
2df68     A7 FA 61 FC | 	wrlong	result1, fp
2df6c     0C 4E 85 F1 | 	sub	fp, #12
2df70     00 FA 0D F2 | 	cmp	result1, #0 wz
2df74     4C 00 90 5D |  if_ne	jmp	#LR__4653
2df78     48 4E 05 F1 | 	add	fp, #72
2df7c     A7 FA 01 FB | 	rdlong	result1, fp
2df80     30 4E 85 F1 | 	sub	fp, #48
2df84     A7 16 02 FB | 	rdlong	arg03, fp
2df88     18 4E 85 F1 | 	sub	fp, #24
2df8c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2df90     20 00 90 5D |  if_ne	jmp	#LR__4651
2df94     50 4E 05 F1 | 	add	fp, #80
2df98     A7 FA 01 FB | 	rdlong	result1, fp
2df9c     30 4E 85 F1 | 	sub	fp, #48
2dfa0     A7 16 02 FB | 	rdlong	arg03, fp
2dfa4     20 4E 85 F1 | 	sub	fp, #32
2dfa8     0B FB 09 F2 | 	cmp	result1, arg03 wz
2dfac     04 1E 06 A6 |  if_e	mov	local01, #4
2dfb0     04 00 90 AD |  if_e	jmp	#LR__4652
2dfb4                 | LR__4651
2dfb4     08 1E 06 F6 | 	mov	local01, #8
2dfb8                 | LR__4652
2dfb8     0C 4E 05 F1 | 	add	fp, #12
2dfbc     A7 1E 62 FC | 	wrlong	local01, fp
2dfc0     0C 4E 85 F1 | 	sub	fp, #12
2dfc4                 | LR__4653
2dfc4     0C 4E 05 F1 | 	add	fp, #12
2dfc8     A7 1E 02 FB | 	rdlong	local01, fp
2dfcc     0C 4E 85 F1 | 	sub	fp, #12
2dfd0     04 1E 0E F2 | 	cmp	local01, #4 wz
2dfd4     CC 01 90 5D |  if_ne	jmp	#LR__4659
2dfd8     40 4E 05 F1 | 	add	fp, #64
2dfdc     A7 12 02 F6 | 	mov	arg01, fp
2dfe0     40 4E 85 F1 | 	sub	fp, #64
2dfe4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2dfe8     0C 4E 05 F1 | 	add	fp, #12
2dfec     A7 FA 61 FC | 	wrlong	result1, fp
2dff0     0C 4E 85 F1 | 	sub	fp, #12
2dff4     00 FA 0D F2 | 	cmp	result1, #0 wz
2dff8     A8 01 90 5D |  if_ne	jmp	#LR__4658
2dffc     5C 4E 05 F1 | 	add	fp, #92
2e000     A7 12 02 FB | 	rdlong	arg01, fp
2e004     38 4E 05 F1 | 	add	fp, #56
2e008     A7 12 62 FC | 	wrlong	arg01, fp
2e00c     0D 12 06 F1 | 	add	arg01, #13
2e010     20 4E 85 F1 | 	sub	fp, #32
2e014     A7 14 02 F6 | 	mov	arg02, fp
2e018     74 4E 85 F1 | 	sub	fp, #116
2e01c     0D 14 06 F1 | 	add	arg02, #13
2e020     13 16 06 F6 | 	mov	arg03, #19
2e024     3C 27 BF FD | 	call	#__system____builtin_memmove
2e028     94 4E 05 F1 | 	add	fp, #148
2e02c     A7 1E 02 FB | 	rdlong	local01, fp
2e030     15 4E 85 F1 | 	sub	fp, #21
2e034     A7 FA C1 FA | 	rdbyte	result1, fp
2e038     0B 1E 06 F1 | 	add	local01, #11
2e03c     0F FB 41 FC | 	wrbyte	result1, local01
2e040     15 4E 05 F1 | 	add	fp, #21
2e044     A7 1E 02 FB | 	rdlong	local01, fp
2e048     94 4E 85 F1 | 	sub	fp, #148
2e04c     0B 1E 06 F1 | 	add	local01, #11
2e050     0F 1F C2 FA | 	rdbyte	local01, local01
2e054     10 1E CE F7 | 	test	local01, #16 wz
2e058     24 00 90 5D |  if_ne	jmp	#LR__4654
2e05c     94 4E 05 F1 | 	add	fp, #148
2e060     A7 FA 01 FB | 	rdlong	result1, fp
2e064     FD 1E 02 F6 | 	mov	local01, result1
2e068     94 4E 85 F1 | 	sub	fp, #148
2e06c     0B FA 05 F1 | 	add	result1, #11
2e070     FD FA C1 FA | 	rdbyte	result1, result1
2e074     20 FA 45 F5 | 	or	result1, #32
2e078     0B 1E 06 F1 | 	add	local01, #11
2e07c     0F FB 41 FC | 	wrbyte	result1, local01
2e080                 | LR__4654
2e080     70 4E 05 F1 | 	add	fp, #112
2e084     A7 1E 02 FB | 	rdlong	local01, fp
2e088     03 1E 06 F1 | 	add	local01, #3
2e08c     0F 03 48 FC | 	wrbyte	#1, local01
2e090     24 4E 05 F1 | 	add	fp, #36
2e094     A7 1E 02 FB | 	rdlong	local01, fp
2e098     94 4E 85 F1 | 	sub	fp, #148
2e09c     0B 1E 06 F1 | 	add	local01, #11
2e0a0     0F 1F C2 FA | 	rdbyte	local01, local01
2e0a4     10 1E CE F7 | 	test	local01, #16 wz
2e0a8     F8 00 90 AD |  if_e	jmp	#LR__4657
2e0ac     18 4E 05 F1 | 	add	fp, #24
2e0b0     A7 16 02 FB | 	rdlong	arg03, fp
2e0b4     30 4E 05 F1 | 	add	fp, #48
2e0b8     A7 1E 02 FB | 	rdlong	local01, fp
2e0bc     48 4E 85 F1 | 	sub	fp, #72
2e0c0     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e0c4     DC 00 90 AD |  if_e	jmp	#LR__4657
2e0c8     70 4E 05 F1 | 	add	fp, #112
2e0cc     A7 12 02 FB | 	rdlong	arg01, fp
2e0d0     09 1F 02 F6 | 	mov	local01, arg01
2e0d4     24 4E 05 F1 | 	add	fp, #36
2e0d8     A7 14 02 FB | 	rdlong	arg02, fp
2e0dc     94 4E 85 F1 | 	sub	fp, #148
2e0e0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e0e4     FD 14 02 F6 | 	mov	arg02, result1
2e0e8     0F 13 02 F6 | 	mov	arg01, local01
2e0ec     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e0f0     98 4E 05 F1 | 	add	fp, #152
2e0f4     A7 FA 61 FC | 	wrlong	result1, fp
2e0f8     00 FA 4D F2 | 	cmps	result1, #0 wz
2e0fc     98 4E 85 F1 | 	sub	fp, #152
2e100     0C 4E 05 A1 |  if_e	add	fp, #12
2e104     A7 04 68 AC |  if_e	wrlong	#2, fp
2e108     0C 4E 85 A1 |  if_e	sub	fp, #12
2e10c     94 00 90 AD |  if_e	jmp	#LR__4656
2e110     70 4E 05 F1 | 	add	fp, #112
2e114     A7 12 02 FB | 	rdlong	arg01, fp
2e118     28 4E 05 F1 | 	add	fp, #40
2e11c     A7 14 02 FB | 	rdlong	arg02, fp
2e120     98 4E 85 F1 | 	sub	fp, #152
2e124     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e128     0C 4E 05 F1 | 	add	fp, #12
2e12c     A7 FA 61 FC | 	wrlong	result1, fp
2e130     64 4E 05 F1 | 	add	fp, #100
2e134     A7 1E 02 FB | 	rdlong	local01, fp
2e138     54 1E 06 F1 | 	add	local01, #84
2e13c     24 4E 05 F1 | 	add	fp, #36
2e140     A7 1E 62 FC | 	wrlong	local01, fp
2e144     88 4E 85 F1 | 	sub	fp, #136
2e148     A7 1E 0A FB | 	rdlong	local01, fp wz
2e14c     0C 4E 85 F1 | 	sub	fp, #12
2e150     50 00 90 5D |  if_ne	jmp	#LR__4655
2e154     94 4E 05 F1 | 	add	fp, #148
2e158     A7 1E 02 FB | 	rdlong	local01, fp
2e15c     94 4E 85 F1 | 	sub	fp, #148
2e160     01 1E 06 F1 | 	add	local01, #1
2e164     0F 1F C2 FA | 	rdbyte	local01, local01
2e168     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e16c     34 00 90 5D |  if_ne	jmp	#LR__4655
2e170     70 4E 05 F1 | 	add	fp, #112
2e174     A7 12 02 FB | 	rdlong	arg01, fp
2e178     24 4E 05 F1 | 	add	fp, #36
2e17c     A7 14 02 FB | 	rdlong	arg02, fp
2e180     4C 4E 85 F1 | 	sub	fp, #76
2e184     A7 16 02 FB | 	rdlong	arg03, fp
2e188     48 4E 85 F1 | 	sub	fp, #72
2e18c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e190     70 4E 05 F1 | 	add	fp, #112
2e194     A7 1E 02 FB | 	rdlong	local01, fp
2e198     70 4E 85 F1 | 	sub	fp, #112
2e19c     03 1E 06 F1 | 	add	local01, #3
2e1a0     0F 03 48 FC | 	wrbyte	#1, local01
2e1a4                 | LR__4655
2e1a4                 | LR__4656
2e1a4                 | LR__4657
2e1a4                 | LR__4658
2e1a4                 | LR__4659
2e1a4     0C 4E 05 F1 | 	add	fp, #12
2e1a8     A7 1E 0A FB | 	rdlong	local01, fp wz
2e1ac     0C 4E 85 F1 | 	sub	fp, #12
2e1b0     40 00 90 5D |  if_ne	jmp	#LR__4661
2e1b4     10 4E 05 F1 | 	add	fp, #16
2e1b8     A7 12 02 F6 | 	mov	arg01, fp
2e1bc     10 4E 85 F1 | 	sub	fp, #16
2e1c0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e1c4     0C 4E 05 F1 | 	add	fp, #12
2e1c8     A7 FA 61 FC | 	wrlong	result1, fp
2e1cc     0C 4E 85 F1 | 	sub	fp, #12
2e1d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1d4     1C 00 90 5D |  if_ne	jmp	#LR__4660
2e1d8     70 4E 05 F1 | 	add	fp, #112
2e1dc     A7 12 02 FB | 	rdlong	arg01, fp
2e1e0     70 4E 85 F1 | 	sub	fp, #112
2e1e4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e1e8     0C 4E 05 F1 | 	add	fp, #12
2e1ec     A7 FA 61 FC | 	wrlong	result1, fp
2e1f0     0C 4E 85 F1 | 	sub	fp, #12
2e1f4                 | LR__4660
2e1f4                 | LR__4661
2e1f4                 | LR__4662
2e1f4                 | LR__4663
2e1f4                 | ' 					res = sync_fs(fs);
2e1f4                 | ' 				}
2e1f4                 | ' 			}
2e1f4                 | ' 
2e1f4                 | ' 		}
2e1f4                 | ' 		;
2e1f4                 | ' 	}
2e1f4                 | ' 
2e1f4                 | ' 	return res ;
2e1f4     0C 4E 05 F1 | 	add	fp, #12
2e1f8     A7 FA 01 FB | 	rdlong	result1, fp
2e1fc     0C 4E 85 F1 | 	sub	fp, #12
2e200     A7 F0 03 F6 | 	mov	ptra, fp
2e204     B2 00 A0 FD | 	call	#popregs_
2e208                 | _fatfs_cc_f_rename_ret
2e208     2D 00 64 FD | 	ret
2e20c                 | 
2e20c                 | _fatfs_cc_time
2e20c     00 4A 05 F6 | 	mov	COUNT_, #0
2e210     A8 00 A0 FD | 	call	#pushregs_
2e214     14 F0 07 F1 | 	add	ptra, #20
2e218     04 4E 05 F1 | 	add	fp, #4
2e21c     A7 12 62 FC | 	wrlong	arg01, fp
2e220     04 4E 05 F1 | 	add	fp, #4
2e224     A7 12 02 F6 | 	mov	arg01, fp
2e228     08 4E 85 F1 | 	sub	fp, #8
2e22c     00 14 06 F6 | 	mov	arg02, #0
2e230     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e234     08 4E 05 F1 | 	add	fp, #8
2e238     A7 FA 01 FB | 	rdlong	result1, fp
2e23c     08 4E 05 F1 | 	add	fp, #8
2e240     A7 FA 61 FC | 	wrlong	result1, fp
2e244     0C 4E 85 F1 | 	sub	fp, #12
2e248     A7 FA 09 FB | 	rdlong	result1, fp wz
2e24c     04 4E 85 F1 | 	sub	fp, #4
2e250     18 00 90 AD |  if_e	jmp	#LR__4670
2e254     04 4E 05 F1 | 	add	fp, #4
2e258     A7 FA 01 FB | 	rdlong	result1, fp
2e25c     0C 4E 05 F1 | 	add	fp, #12
2e260     A7 14 02 FB | 	rdlong	arg02, fp
2e264     10 4E 85 F1 | 	sub	fp, #16
2e268     FD 14 62 FC | 	wrlong	arg02, result1
2e26c                 | LR__4670
2e26c                 | '         *tp = now;
2e26c                 | '     return now;
2e26c     10 4E 05 F1 | 	add	fp, #16
2e270     A7 FA 01 FB | 	rdlong	result1, fp
2e274     10 4E 85 F1 | 	sub	fp, #16
2e278     A7 F0 03 F6 | 	mov	ptra, fp
2e27c     B2 00 A0 FD | 	call	#popregs_
2e280                 | _fatfs_cc_time_ret
2e280     2D 00 64 FD | 	ret
2e284                 | 
2e284                 | _fatfs_cc_mktime
2e284     06 4A 05 F6 | 	mov	COUNT_, #6
2e288     A8 00 A0 FD | 	call	#pushregs_
2e28c     09 1F 02 F6 | 	mov	local01, arg01
2e290     14 1E 06 F1 | 	add	local01, #20
2e294     0F 13 02 FB | 	rdlong	arg01, local01
2e298     14 1E 86 F1 | 	sub	local01, #20
2e29c     46 12 56 F2 | 	cmps	arg01, #70 wc
2e2a0                 | '                 return (time_t) -1;
2e2a0     01 FA 65 C6 |  if_b	neg	result1, #1
2e2a4     7C 01 90 CD |  if_b	jmp	#LR__4684
2e2a8     03 00 00 FF 
2e2ac     6C 21 06 F6 | 	mov	local02, ##1900
2e2b0     14 1E 06 F1 | 	add	local01, #20
2e2b4     0F FB 01 FB | 	rdlong	result1, local01
2e2b8     FD 20 02 F1 | 	add	local02, result1
2e2bc     08 1E 86 F1 | 	sub	local01, #8
2e2c0     0F 23 02 FB | 	rdlong	local03, local01
2e2c4     01 22 86 F1 | 	sub	local03, #1
2e2c8     04 1E 06 F1 | 	add	local01, #4
2e2cc     0F 13 02 FB | 	rdlong	arg01, local01
2e2d0     10 1E 86 F1 | 	sub	local01, #16
2e2d4     02 12 66 F0 | 	shl	arg01, #2
2e2d8     02 00 00 FF 
2e2dc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e2e0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e2e4     09 FB 01 FB | 	rdlong	result1, arg01
2e2e8     FD 22 02 F1 | 	add	local03, result1
2e2ec     10 13 02 F6 | 	mov	arg01, local02
2e2f0     02 00 00 FF 
2e2f4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e2f8     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e2fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e300     1C 00 90 AD |  if_e	jmp	#LR__4680
2e304     00 24 06 F6 | 	mov	local04, #0
2e308     10 1E 06 F1 | 	add	local01, #16
2e30c     0F FB 01 FB | 	rdlong	result1, local01
2e310     10 1E 86 F1 | 	sub	local01, #16
2e314     02 FA 55 F2 | 	cmps	result1, #2 wc
2e318     01 24 06 36 |  if_ae	mov	local04, #1
2e31c     04 00 90 FD | 	jmp	#LR__4681
2e320                 | LR__4680
2e320     00 24 06 F6 | 	mov	local04, #0
2e324                 | LR__4681
2e324     04 1E 06 F1 | 	add	local01, #4
2e328     0F FB 01 FB | 	rdlong	result1, local01
2e32c     04 1E 86 F1 | 	sub	local01, #4
2e330     0F 27 02 FB | 	rdlong	local05, local01
2e334     08 1E 06 F1 | 	add	local01, #8
2e338     0F 13 02 FB | 	rdlong	arg01, local01
2e33c     07 00 00 FF 
2e340     10 12 06 FD | 	qmul	arg01, ##3600
2e344     12 23 02 F1 | 	add	local03, local04
2e348     FD 24 02 F6 | 	mov	local04, result1
2e34c     04 24 66 F0 | 	shl	local04, #4
2e350     FD 24 82 F1 | 	sub	local04, result1
2e354     02 24 66 F0 | 	shl	local04, #2
2e358     12 27 02 F1 | 	add	local05, local04
2e35c     08 1E 86 F1 | 	sub	local01, #8
2e360     18 24 62 FD | 	getqx	local04
2e364     A8 00 00 FF 
2e368     80 23 06 FD | 	qmul	local03, ##86400
2e36c     12 27 02 F1 | 	add	local05, local04
2e370     10 23 02 F6 | 	mov	local03, local02
2e374     03 00 00 FF 
2e378     B2 23 86 F1 | 	sub	local03, ##1970
2e37c     18 24 62 FD | 	getqx	local04
2e380     99 F0 00 FF 
2e384     80 23 06 FD | 	qmul	local03, ##31536000
2e388     12 27 02 F1 | 	add	local05, local04
2e38c     10 23 02 F6 | 	mov	local03, local02
2e390     03 00 00 FF 
2e394     B1 23 86 F1 | 	sub	local03, ##1969
2e398     11 29 52 F6 | 	abs	local06, local03 wc
2e39c     02 28 46 F0 | 	shr	local06, #2
2e3a0     14 29 82 F6 | 	negc	local06, local06
2e3a4     03 00 00 FF 
2e3a8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e3ac     18 24 62 FD | 	getqx	local04
2e3b0     12 27 02 F1 | 	add	local05, local04
2e3b4     18 00 90 CD |  if_b	jmp	#LR__4682
2e3b8     03 00 00 FF 
2e3bc     D0 21 86 F1 | 	sub	local02, ##2000
2e3c0     10 25 52 F6 | 	abs	local04, local02 wc
2e3c4     64 24 16 FD | 	qdiv	local04, #100
2e3c8     18 24 62 FD | 	getqx	local04
2e3cc     12 29 A2 F3 | 	sumnc	local06, local04
2e3d0                 | LR__4682
2e3d0     A8 00 00 FF 
2e3d4     80 29 06 FD | 	qmul	local06, ##86400
2e3d8     18 28 62 FD | 	getqx	local06
2e3dc     14 27 02 F1 | 	add	local05, local06
2e3e0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e3e4     02 00 00 FF 
2e3e8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e3ec     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e3f0     14 27 02 F1 | 	add	local05, local06
2e3f4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e3f8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e3fc     02 00 00 FF 
2e400     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e404     01 22 0E F2 | 	cmp	local03, #1 wz
2e408     14 00 90 5D |  if_ne	jmp	#LR__4683
2e40c     0F 13 02 F6 | 	mov	arg01, local01
2e410     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e414     00 FA 0D F2 | 	cmp	result1, #0 wz
2e418     07 00 00 5F 
2e41c     10 26 86 51 |  if_ne	sub	local05, ##3600
2e420                 | LR__4683
2e420                 | '                 s -=  (3600L) ;
2e420                 | ' 
2e420                 | '         return s;
2e420     13 FB 01 F6 | 	mov	result1, local05
2e424                 | LR__4684
2e424     A7 F0 03 F6 | 	mov	ptra, fp
2e428     B2 00 A0 FD | 	call	#popregs_
2e42c                 | _fatfs_cc_mktime_ret
2e42c     2D 00 64 FD | 	ret
2e430                 | 
2e430                 | _fatfs_cc__gmtime_r
2e430     03 4A 05 F6 | 	mov	COUNT_, #3
2e434     A8 00 A0 FD | 	call	#pushregs_
2e438     09 1F 02 FB | 	rdlong	local01, arg01
2e43c     A8 00 00 FF 
2e440     80 1F 16 FD | 	qdiv	local01, ##86400
2e444     18 FA 61 FD | 	getqx	result1
2e448     04 FA 05 F1 | 	add	result1, #4
2e44c     07 FA 15 FD | 	qdiv	result1, #7
2e450     18 14 06 F1 | 	add	arg02, #24
2e454     D1 7F 27 FF 
2e458     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e45c     D1 7F 27 3F 
2e460     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e464     03 00 00 3F 
2e468     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e46c     03 00 00 CF 
2e470     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e474                 | ' 	  year = 1970;
2e474                 | ' 	}
2e474                 | ' 
2e474                 | ' 	for(;;) {
2e474     19 FA 61 FD | 	getqy	result1
2e478     0A FB 61 FC | 	wrlong	result1, arg02
2e47c     18 14 86 F1 | 	sub	arg02, #24
2e480                 | LR__4690
2e480     10 13 02 F6 | 	mov	arg01, local02
2e484     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e488     00 FA 0D F2 | 	cmp	result1, #0 wz
2e48c     42 F1 00 5F 
2e490     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e494     99 F0 00 AF 
2e498     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e49c     11 1F 12 F2 | 	cmp	local01, local03 wc
2e4a0                 | ' 	    break;
2e4a0     01 20 06 31 |  if_ae	add	local02, #1
2e4a4     11 1F 82 31 |  if_ae	sub	local01, local03
2e4a8     D4 FF 9F 3D |  if_ae	jmp	#LR__4690
2e4ac     A8 00 00 FF 
2e4b0     80 1F 16 FD | 	qdiv	local01, ##86400
2e4b4     10 23 02 F6 | 	mov	local03, local02
2e4b8     03 00 00 FF 
2e4bc     6C 23 86 F1 | 	sub	local03, ##1900
2e4c0     14 14 06 F1 | 	add	arg02, #20
2e4c4     0A 23 62 FC | 	wrlong	local03, arg02
2e4c8     08 14 06 F1 | 	add	arg02, #8
2e4cc     10 13 02 F6 | 	mov	arg01, local02
2e4d0     18 20 62 FD | 	getqx	local02
2e4d4     0A 21 62 FC | 	wrlong	local02, arg02
2e4d8     1C 14 86 F1 | 	sub	arg02, #28
2e4dc     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e4e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4e4     1D 22 06 56 |  if_ne	mov	local03, #29
2e4e8     1C 22 06 A6 |  if_e	mov	local03, #28
2e4ec     02 00 00 FF 
2e4f0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e4f4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e4f8     02 00 00 FF 
2e4fc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e500                 | ' 
2e500                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e500                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e500     00 12 06 F6 | 	mov	arg01, #0
2e504     97 2A 48 FB | 	callpa	#(@LR__4692-@LR__4691)>>2,fcache_load_ptr_
2e508                 | LR__4691
2e508     09 23 02 F6 | 	mov	local03, arg01
2e50c     02 22 66 F0 | 	shl	local03, #2
2e510     02 00 00 FF 
2e514     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e518     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e51c     11 23 02 FB | 	rdlong	local03, local03
2e520     11 21 52 F2 | 	cmps	local02, local03 wc
2e524     02 00 00 FF 
2e528     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e52c     2C 00 90 CD |  if_b	jmp	#LR__4693
2e530     09 23 02 F6 | 	mov	local03, arg01
2e534     02 22 66 F0 | 	shl	local03, #2
2e538     02 00 00 FF 
2e53c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e540     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e544     11 23 02 FB | 	rdlong	local03, local03
2e548     11 21 82 F1 | 	sub	local02, local03
2e54c     01 12 06 F1 | 	add	arg01, #1
2e550     02 00 00 FF 
2e554     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e558     AC FF 9F FD | 	jmp	#LR__4691
2e55c                 | LR__4692
2e55c                 | LR__4693
2e55c     A8 00 00 FF 
2e560     80 1F 16 FD | 	qdiv	local01, ##86400
2e564     10 14 06 F1 | 	add	arg02, #16
2e568     0A 13 62 FC | 	wrlong	arg01, arg02
2e56c     01 20 06 F1 | 	add	local02, #1
2e570     04 14 86 F1 | 	sub	arg02, #4
2e574     0A 21 62 FC | 	wrlong	local02, arg02
2e578     19 1E 62 FD | 	getqy	local01
2e57c     07 00 00 FF 
2e580     10 1E 16 FD | 	qdiv	local01, ##3600
2e584     18 22 62 FD | 	getqx	local03
2e588     07 00 00 FF 
2e58c     10 1E 16 FD | 	qdiv	local01, ##3600
2e590     04 14 86 F1 | 	sub	arg02, #4
2e594     0A 23 62 FC | 	wrlong	local03, arg02
2e598     19 1E 62 FD | 	getqy	local01
2e59c     3C 1E 16 FD | 	qdiv	local01, #60
2e5a0     18 22 62 FD | 	getqx	local03
2e5a4     3C 1E 16 FD | 	qdiv	local01, #60
2e5a8     04 14 86 F1 | 	sub	arg02, #4
2e5ac     0A 23 62 FC | 	wrlong	local03, arg02
2e5b0     04 14 86 F1 | 	sub	arg02, #4
2e5b4                 | '         stm->tm_isdst = 0;
2e5b4                 | ' 
2e5b4                 | ' ;
2e5b4                 | '         return stm;
2e5b4     0A FB 01 F6 | 	mov	result1, arg02
2e5b8     19 22 62 FD | 	getqy	local03
2e5bc     0A 23 62 FC | 	wrlong	local03, arg02
2e5c0     20 14 06 F1 | 	add	arg02, #32
2e5c4     0A 01 68 FC | 	wrlong	#0, arg02
2e5c8     A7 F0 03 F6 | 	mov	ptra, fp
2e5cc     B2 00 A0 FD | 	call	#popregs_
2e5d0                 | _fatfs_cc__gmtime_r_ret
2e5d0     2D 00 64 FD | 	ret
2e5d4                 | 
2e5d4                 | _fatfs_cc__tzset
2e5d4     80 01 00 FF 
2e5d8     19 13 06 F6 | 	mov	arg01, ##@LR__5005
2e5dc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e5e0     FD 12 02 F6 | 	mov	arg01, result1
2e5e4     02 00 00 FF 
2e5e8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e5ec     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e5f0     02 00 00 FF 
2e5f4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e5f8     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e5fc     02 00 00 FF 
2e600     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e604     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e608     02 00 00 FF 
2e60c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e610                 | _fatfs_cc__tzset_ret
2e610     2D 00 64 FD | 	ret
2e614                 | 
2e614                 | _fatfs_cc_getenv
2e614     06 4A 05 F6 | 	mov	COUNT_, #6
2e618     A8 00 A0 FD | 	call	#pushregs_
2e61c     09 1F 02 F6 | 	mov	local01, arg01
2e620     09 21 02 F6 | 	mov	local02, arg01
2e624     97 06 48 FB | 	callpa	#(@LR__4701-@LR__4700)>>2,fcache_load_ptr_
2e628                 | LR__4700
2e628     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e62c     01 20 06 51 |  if_ne	add	local02, #1
2e630     F4 FF 9F 5D |  if_ne	jmp	#LR__4700
2e634                 | LR__4701
2e634     09 21 82 F1 | 	sub	local02, arg01
2e638     10 FB 01 F6 | 	mov	result1, local02
2e63c     02 00 00 FF 
2e640     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e644     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e648     02 00 00 FF 
2e64c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e650                 | '             return 0;
2e650     00 FA 05 A6 |  if_e	mov	result1, #0
2e654     5C 00 90 AD |  if_e	jmp	#LR__4704
2e658                 | ' 
2e658                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e658     02 00 00 FF 
2e65c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e660     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e664     02 00 00 FF 
2e668     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e66c                 | LR__4702
2e66c     11 25 0A FB | 	rdlong	local04, local03 wz
2e670     3C 00 90 AD |  if_e	jmp	#LR__4703
2e674     12 13 02 F6 | 	mov	arg01, local04
2e678     0F 15 02 F6 | 	mov	arg02, local01
2e67c     10 17 02 F6 | 	mov	arg03, local02
2e680     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e684     00 FA 0D F2 | 	cmp	result1, #0 wz
2e688     10 27 02 A6 |  if_e	mov	local05, local02
2e68c     12 27 02 A1 |  if_e	add	local05, local04
2e690     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e694     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e698                 | ' 			return name+len+1;
2e698     10 25 02 A1 |  if_e	add	local04, local02
2e69c     01 24 06 A1 |  if_e	add	local04, #1
2e6a0     12 FB 01 A6 |  if_e	mov	result1, local04
2e6a4     0C 00 90 AD |  if_e	jmp	#LR__4704
2e6a8     04 22 06 F1 | 	add	local03, #4
2e6ac     BC FF 9F FD | 	jmp	#LR__4702
2e6b0                 | LR__4703
2e6b0                 | ' 	}
2e6b0                 | ' 	return 0;
2e6b0     00 FA 05 F6 | 	mov	result1, #0
2e6b4                 | LR__4704
2e6b4     A7 F0 03 F6 | 	mov	ptra, fp
2e6b8     B2 00 A0 FD | 	call	#popregs_
2e6bc                 | _fatfs_cc_getenv_ret
2e6bc     2D 00 64 FD | 	ret
2e6c0                 | 
2e6c0                 | _fatfs_cc__get_fattime
2e6c0     00 4A 05 F6 | 	mov	COUNT_, #0
2e6c4     A8 00 A0 FD | 	call	#pushregs_
2e6c8     34 F0 07 F1 | 	add	ptra, #52
2e6cc     00 12 06 F6 | 	mov	arg01, #0
2e6d0     38 FB BF FD | 	call	#_fatfs_cc_time
2e6d4     04 4E 05 F1 | 	add	fp, #4
2e6d8     A7 FA 61 FC | 	wrlong	result1, fp
2e6dc     A7 12 02 F6 | 	mov	arg01, fp
2e6e0     0C 4E 05 F1 | 	add	fp, #12
2e6e4     A7 14 02 F6 | 	mov	arg02, fp
2e6e8     10 4E 85 F1 | 	sub	fp, #16
2e6ec     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e6f0     24 4E 05 F1 | 	add	fp, #36
2e6f4     A7 14 02 FB | 	rdlong	arg02, fp
2e6f8     50 14 86 F1 | 	sub	arg02, #80
2e6fc     09 14 66 F0 | 	shl	arg02, #9
2e700     04 4E 85 F1 | 	sub	fp, #4
2e704     A7 FA 01 FB | 	rdlong	result1, fp
2e708     01 FA 05 F1 | 	add	result1, #1
2e70c     05 FA 65 F0 | 	shl	result1, #5
2e710     FD 14 42 F5 | 	or	arg02, result1
2e714     04 4E 85 F1 | 	sub	fp, #4
2e718     A7 FA 01 FB | 	rdlong	result1, fp
2e71c     FD 14 42 F5 | 	or	arg02, result1
2e720     14 4E 85 F1 | 	sub	fp, #20
2e724     A7 14 62 FC | 	wrlong	arg02, fp
2e728     10 4E 05 F1 | 	add	fp, #16
2e72c     A7 14 02 FB | 	rdlong	arg02, fp
2e730     0B 14 66 F0 | 	shl	arg02, #11
2e734     04 4E 85 F1 | 	sub	fp, #4
2e738     A7 FA 01 FB | 	rdlong	result1, fp
2e73c     05 FA 65 F0 | 	shl	result1, #5
2e740     FD 14 42 F5 | 	or	arg02, result1
2e744     04 4E 85 F1 | 	sub	fp, #4
2e748     A7 FA 01 FB | 	rdlong	result1, fp
2e74c     FD 14 42 F5 | 	or	arg02, result1
2e750     04 4E 85 F1 | 	sub	fp, #4
2e754     A7 14 62 FC | 	wrlong	arg02, fp
2e758                 | ' 
2e758                 | '     now = time(0);
2e758                 | '     _gmtime_r (&now, &date);
2e758                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e758                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e758                 | '     return (ffdate << 16) | fftime;
2e758     04 4E 85 F1 | 	sub	fp, #4
2e75c     A7 FA 01 FB | 	rdlong	result1, fp
2e760     10 FA 65 F0 | 	shl	result1, #16
2e764     08 4E 85 F1 | 	sub	fp, #8
2e768     0A FB 41 F5 | 	or	result1, arg02
2e76c     A7 F0 03 F6 | 	mov	ptra, fp
2e770     B2 00 A0 FD | 	call	#popregs_
2e774                 | _fatfs_cc__get_fattime_ret
2e774     2D 00 64 FD | 	ret
2e778                 | 
2e778                 | _fatfs_cc_unixtime_0962
2e778     00 4A 05 F6 | 	mov	COUNT_, #0
2e77c     A8 00 A0 FD | 	call	#pushregs_
2e780     34 F0 07 F1 | 	add	ptra, #52
2e784     04 4E 05 F1 | 	add	fp, #4
2e788     A7 12 62 FC | 	wrlong	arg01, fp
2e78c     04 4E 05 F1 | 	add	fp, #4
2e790     A7 14 62 FC | 	wrlong	arg02, fp
2e794     04 4E 85 F1 | 	sub	fp, #4
2e798     A7 14 02 FB | 	rdlong	arg02, fp
2e79c     09 14 46 F0 | 	shr	arg02, #9
2e7a0     7F 14 06 F5 | 	and	arg02, #127
2e7a4     50 FA 05 F6 | 	mov	result1, #80
2e7a8     0A FB 01 F1 | 	add	result1, arg02
2e7ac     20 4E 05 F1 | 	add	fp, #32
2e7b0     A7 FA 61 FC | 	wrlong	result1, fp
2e7b4     20 4E 85 F1 | 	sub	fp, #32
2e7b8     A7 FA 01 FB | 	rdlong	result1, fp
2e7bc     05 FA 45 F0 | 	shr	result1, #5
2e7c0     FD FA 41 F8 | 	getnib	result1, result1, #0
2e7c4     01 FA 85 F1 | 	sub	result1, #1
2e7c8     1C 4E 05 F1 | 	add	fp, #28
2e7cc     A7 FA 61 FC | 	wrlong	result1, fp
2e7d0     1C 4E 85 F1 | 	sub	fp, #28
2e7d4     A7 FA 01 FB | 	rdlong	result1, fp
2e7d8     1F FA 05 F5 | 	and	result1, #31
2e7dc     18 4E 05 F1 | 	add	fp, #24
2e7e0     A7 FA 61 FC | 	wrlong	result1, fp
2e7e4     14 4E 85 F1 | 	sub	fp, #20
2e7e8     A7 FA 01 FB | 	rdlong	result1, fp
2e7ec     0B FA 45 F0 | 	shr	result1, #11
2e7f0     1F FA 05 F5 | 	and	result1, #31
2e7f4     10 4E 05 F1 | 	add	fp, #16
2e7f8     A7 FA 61 FC | 	wrlong	result1, fp
2e7fc     10 4E 85 F1 | 	sub	fp, #16
2e800     A7 FA 01 FB | 	rdlong	result1, fp
2e804     05 FA 45 F0 | 	shr	result1, #5
2e808     3F FA 05 F5 | 	and	result1, #63
2e80c     0C 4E 05 F1 | 	add	fp, #12
2e810     A7 FA 61 FC | 	wrlong	result1, fp
2e814     0C 4E 85 F1 | 	sub	fp, #12
2e818     A7 14 02 FB | 	rdlong	arg02, fp
2e81c     1F 14 06 F5 | 	and	arg02, #31
2e820     01 14 66 F0 | 	shl	arg02, #1
2e824     08 4E 05 F1 | 	add	fp, #8
2e828     A7 14 62 FC | 	wrlong	arg02, fp
2e82c     A7 12 02 F6 | 	mov	arg01, fp
2e830     10 4E 85 F1 | 	sub	fp, #16
2e834     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e838     0C 4E 05 F1 | 	add	fp, #12
2e83c     A7 FA 61 FC | 	wrlong	result1, fp
2e840                 | ' 
2e840                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e840                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e840                 | '     date.tm_mday = (dosdate & 0x1f);
2e840                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e840                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e840                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e840                 | ' 
2e840                 | '     t = mktime(&date);
2e840                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e840                 | '     return t;
2e840     0C 4E 85 F1 | 	sub	fp, #12
2e844     A7 F0 03 F6 | 	mov	ptra, fp
2e848     B2 00 A0 FD | 	call	#popregs_
2e84c                 | _fatfs_cc_unixtime_0962_ret
2e84c     2D 00 64 FD | 	ret
2e850                 | 
2e850                 | _fatfs_cc__set_dos_error_0964
2e850     09 01 02 F6 | 	mov	_var01, arg01
2e854                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e854                 | '     switch (derr) {
2e854     14 00 26 F3 | 	fle	_var01, #20
2e858     30 00 62 FD | 	jmprel	_var01
2e85c                 | LR__4710
2e85c     50 00 90 FD | 	jmp	#LR__4711
2e860     84 00 90 FD | 	jmp	#LR__4725
2e864     80 00 90 FD | 	jmp	#LR__4726
2e868     7C 00 90 FD | 	jmp	#LR__4727
2e86c     48 00 90 FD | 	jmp	#LR__4712
2e870     44 00 90 FD | 	jmp	#LR__4713
2e874     40 00 90 FD | 	jmp	#LR__4714
2e878     44 00 90 FD | 	jmp	#LR__4715
2e87c     48 00 90 FD | 	jmp	#LR__4717
2e880     54 00 90 FD | 	jmp	#LR__4720
2e884     38 00 90 FD | 	jmp	#LR__4716
2e888     4C 00 90 FD | 	jmp	#LR__4721
2e88c     48 00 90 FD | 	jmp	#LR__4722
2e890     44 00 90 FD | 	jmp	#LR__4723
2e894     50 00 90 FD | 	jmp	#LR__4728
2e898     4C 00 90 FD | 	jmp	#LR__4728
2e89c     48 00 90 FD | 	jmp	#LR__4728
2e8a0     2C 00 90 FD | 	jmp	#LR__4718
2e8a4     38 00 90 FD | 	jmp	#LR__4724
2e8a8     2C 00 90 FD | 	jmp	#LR__4719
2e8ac     38 00 90 FD | 	jmp	#LR__4728
2e8b0                 | LR__4711
2e8b0     00 02 06 F6 | 	mov	_var02, #0
2e8b4                 | '         r = 0;
2e8b4                 | '         break;
2e8b4     34 00 90 FD | 	jmp	#LR__4729
2e8b8                 | LR__4712
2e8b8                 | LR__4713
2e8b8                 | LR__4714
2e8b8     04 02 06 F6 | 	mov	_var02, #4
2e8bc                 | '         r =  4 ;
2e8bc                 | '         break;
2e8bc     2C 00 90 FD | 	jmp	#LR__4729
2e8c0                 | LR__4715
2e8c0                 | LR__4716
2e8c0     06 02 06 F6 | 	mov	_var02, #6
2e8c4                 | '         r =  6 ;
2e8c4                 | '         break;
2e8c4     24 00 90 FD | 	jmp	#LR__4729
2e8c8                 | LR__4717
2e8c8     09 02 06 F6 | 	mov	_var02, #9
2e8cc                 | '         r =  9 ;
2e8cc                 | '         break;
2e8cc     1C 00 90 FD | 	jmp	#LR__4729
2e8d0                 | LR__4718
2e8d0     07 02 06 F6 | 	mov	_var02, #7
2e8d4                 | '         r =  7 ;
2e8d4                 | '         break;
2e8d4     14 00 90 FD | 	jmp	#LR__4729
2e8d8                 | LR__4719
2e8d8                 | LR__4720
2e8d8                 | LR__4721
2e8d8                 | LR__4722
2e8d8                 | LR__4723
2e8d8     0A 02 06 F6 | 	mov	_var02, #10
2e8dc                 | '         r =  10 ;
2e8dc                 | '         break;
2e8dc     0C 00 90 FD | 	jmp	#LR__4729
2e8e0                 | LR__4724
2e8e0     0B 02 06 F6 | 	mov	_var02, #11
2e8e4                 | '         r =  11 ;
2e8e4                 | '         break;
2e8e4     04 00 90 FD | 	jmp	#LR__4729
2e8e8                 | LR__4725
2e8e8                 | LR__4726
2e8e8                 | LR__4727
2e8e8                 | LR__4728
2e8e8     0C 02 06 F6 | 	mov	_var02, #12
2e8ec                 | '         r =  12 ;
2e8ec                 | '         break;
2e8ec                 | LR__4729
2e8ec                 | '     }
2e8ec                 | '     return _seterror(r);
2e8ec     00 02 4E F2 | 	cmps	_var02, #0 wz
2e8f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e8f4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2e8f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e8fc     01 FA 65 56 |  if_ne	neg	result1, #1
2e900     00 FA 05 A6 |  if_e	mov	result1, #0
2e904                 | _fatfs_cc__set_dos_error_0964_ret
2e904     2D 00 64 FD | 	ret
2e908                 | 
2e908                 | _fatfs_cc_v_creat
2e908     04 4A 05 F6 | 	mov	COUNT_, #4
2e90c     A8 00 A0 FD | 	call	#pushregs_
2e910     09 1F 02 F6 | 	mov	local01, arg01
2e914     0A 21 02 F6 | 	mov	local02, arg02
2e918     03 00 00 FF 
2e91c     3C 12 06 F6 | 	mov	arg01, ##1596
2e920                 | '     return _gc_alloc(size);
2e920     10 14 06 F6 | 	mov	arg02, #16
2e924     28 5E BF FD | 	call	#__system___gc_doalloc
2e928     FD 22 0A F6 | 	mov	local03, result1 wz
2e92c                 | '       return _seterror( 7 );
2e92c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e930     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2e934     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e938     01 FA 65 A6 |  if_e	neg	result1, #1
2e93c     58 00 90 AD |  if_e	jmp	#LR__4731
2e940     11 13 02 F6 | 	mov	arg01, local03
2e944     00 14 06 F6 | 	mov	arg02, #0
2e948     03 00 00 FF 
2e94c     3C 16 06 F6 | 	mov	arg03, ##1596
2e950     98 00 A0 FD | 	call	#\builtin_bytefill_
2e954     02 00 00 FF 
2e958     14 22 06 F1 | 	add	local03, ##1044
2e95c     11 13 02 F6 | 	mov	arg01, local03
2e960     02 00 00 FF 
2e964     14 22 86 F1 | 	sub	local03, ##1044
2e968     10 15 02 F6 | 	mov	arg02, local02
2e96c     07 16 06 F6 | 	mov	arg03, #7
2e970     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2e974     FD 24 0A F6 | 	mov	local04, result1 wz
2e978     14 00 90 AD |  if_e	jmp	#LR__4730
2e97c     11 13 02 F6 | 	mov	arg01, local03
2e980                 | '     return _gc_free(ptr);
2e980     D8 5E BF FD | 	call	#__system___gc_free
2e984                 | '     free(f);
2e984                 | '     return _set_dos_error(r);
2e984     12 13 02 F6 | 	mov	arg01, local04
2e988     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2e98c     08 00 90 FD | 	jmp	#LR__4731
2e990                 | LR__4730
2e990     0F 23 62 FC | 	wrlong	local03, local01
2e994                 | '   }
2e994                 | '   fil->vfsdata = f;
2e994                 | '   return 0;
2e994     00 FA 05 F6 | 	mov	result1, #0
2e998                 | LR__4731
2e998     A7 F0 03 F6 | 	mov	ptra, fp
2e99c     B2 00 A0 FD | 	call	#popregs_
2e9a0                 | _fatfs_cc_v_creat_ret
2e9a0     2D 00 64 FD | 	ret
2e9a4                 | 
2e9a4                 | _fatfs_cc_v_close
2e9a4     02 4A 05 F6 | 	mov	COUNT_, #2
2e9a8     A8 00 A0 FD | 	call	#pushregs_
2e9ac     09 1F 02 FB | 	rdlong	local01, arg01
2e9b0     02 00 00 FF 
2e9b4     14 1E 06 F1 | 	add	local01, ##1044
2e9b8     0F 13 02 F6 | 	mov	arg01, local01
2e9bc     02 00 00 FF 
2e9c0     14 1E 86 F1 | 	sub	local01, ##1044
2e9c4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2e9c8     FD 20 02 F6 | 	mov	local02, result1
2e9cc     0F 13 02 F6 | 	mov	arg01, local01
2e9d0                 | '     return _gc_free(ptr);
2e9d0     88 5E BF FD | 	call	#__system___gc_free
2e9d4                 | '     FAT_FIL *f = fil->vfsdata;
2e9d4                 | '     r=f_close(&f->fil);
2e9d4                 | '     free(f);
2e9d4                 | '     return _set_dos_error(r);
2e9d4     10 13 02 F6 | 	mov	arg01, local02
2e9d8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2e9dc     A7 F0 03 F6 | 	mov	ptra, fp
2e9e0     B2 00 A0 FD | 	call	#popregs_
2e9e4                 | _fatfs_cc_v_close_ret
2e9e4     2D 00 64 FD | 	ret
2e9e8                 | 
2e9e8                 | _fatfs_cc_v_opendir
2e9e8     04 4A 05 F6 | 	mov	COUNT_, #4
2e9ec     A8 00 A0 FD | 	call	#pushregs_
2e9f0     09 1F 02 F6 | 	mov	local01, arg01
2e9f4     0A 21 02 F6 | 	mov	local02, arg02
2e9f8     30 12 06 F6 | 	mov	arg01, #48
2e9fc                 | '     return _gc_alloc(size);
2e9fc     10 14 06 F6 | 	mov	arg02, #16
2ea00     4C 5D BF FD | 	call	#__system___gc_doalloc
2ea04     FD 22 0A F6 | 	mov	local03, result1 wz
2ea08                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ea08                 | '       return _seterror( 7 );
2ea08     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ea0c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ea10     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ea14     01 FA 65 A6 |  if_e	neg	result1, #1
2ea18     34 00 90 AD |  if_e	jmp	#LR__4741
2ea1c     10 15 02 F6 | 	mov	arg02, local02
2ea20     11 13 02 F6 | 	mov	arg01, local03
2ea24     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ea28     FD 24 0A F6 | 	mov	local04, result1 wz
2ea2c     14 00 90 AD |  if_e	jmp	#LR__4740
2ea30     11 13 02 F6 | 	mov	arg01, local03
2ea34                 | '     return _gc_free(ptr);
2ea34     24 5E BF FD | 	call	#__system___gc_free
2ea38                 | '         free(f);
2ea38                 | '         return _set_dos_error(r);
2ea38     12 13 02 F6 | 	mov	arg01, local04
2ea3c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2ea40     0C 00 90 FD | 	jmp	#LR__4741
2ea44                 | LR__4740
2ea44     04 1E 06 F1 | 	add	local01, #4
2ea48     0F 23 62 FC | 	wrlong	local03, local01
2ea4c                 | '     }
2ea4c                 | '     dir->vfsdata = f;
2ea4c                 | '     return 0;
2ea4c     00 FA 05 F6 | 	mov	result1, #0
2ea50                 | LR__4741
2ea50     A7 F0 03 F6 | 	mov	ptra, fp
2ea54     B2 00 A0 FD | 	call	#popregs_
2ea58                 | _fatfs_cc_v_opendir_ret
2ea58     2D 00 64 FD | 	ret
2ea5c                 | 
2ea5c                 | _fatfs_cc_v_closedir
2ea5c     02 4A 05 F6 | 	mov	COUNT_, #2
2ea60     A8 00 A0 FD | 	call	#pushregs_
2ea64     04 12 06 F1 | 	add	arg01, #4
2ea68     09 1F 02 FB | 	rdlong	local01, arg01
2ea6c     0F 13 02 F6 | 	mov	arg01, local01
2ea70     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ea74     FD 20 02 F6 | 	mov	local02, result1
2ea78     0F 13 02 F6 | 	mov	arg01, local01
2ea7c                 | '     return _gc_free(ptr);
2ea7c     DC 5D BF FD | 	call	#__system___gc_free
2ea80     00 20 0E F2 | 	cmp	local02, #0 wz
2ea84     10 13 02 56 |  if_ne	mov	arg01, local02
2ea88     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0964
2ea8c                 | '     return r;
2ea8c     10 FB 01 F6 | 	mov	result1, local02
2ea90     A7 F0 03 F6 | 	mov	ptra, fp
2ea94     B2 00 A0 FD | 	call	#popregs_
2ea98                 | _fatfs_cc_v_closedir_ret
2ea98     2D 00 64 FD | 	ret
2ea9c                 | 
2ea9c                 | _fatfs_cc_v_readdir
2ea9c     01 4A 05 F6 | 	mov	COUNT_, #1
2eaa0     A8 00 A0 FD | 	call	#pushregs_
2eaa4     2C F1 07 F1 | 	add	ptra, #300
2eaa8     04 4E 05 F1 | 	add	fp, #4
2eaac     A7 12 62 FC | 	wrlong	arg01, fp
2eab0     04 4E 05 F1 | 	add	fp, #4
2eab4     A7 14 62 FC | 	wrlong	arg02, fp
2eab8     04 4E 85 F1 | 	sub	fp, #4
2eabc     A7 16 02 FB | 	rdlong	arg03, fp
2eac0     04 16 06 F1 | 	add	arg03, #4
2eac4     0B 13 02 FB | 	rdlong	arg01, arg03
2eac8     08 4E 05 F1 | 	add	fp, #8
2eacc     A7 14 02 F6 | 	mov	arg02, fp
2ead0     0C 4E 85 F1 | 	sub	fp, #12
2ead4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ead8     28 4F 05 F1 | 	add	fp, #296
2eadc     A7 FA 61 FC | 	wrlong	result1, fp
2eae0     28 4F 85 F1 | 	sub	fp, #296
2eae4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eae8     14 00 90 AD |  if_e	jmp	#LR__4750
2eaec                 | '         return _set_dos_error(r);
2eaec     28 4F 05 F1 | 	add	fp, #296
2eaf0     A7 12 02 FB | 	rdlong	arg01, fp
2eaf4     28 4F 85 F1 | 	sub	fp, #296
2eaf8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2eafc     C4 00 90 FD | 	jmp	#LR__4753
2eb00                 | LR__4750
2eb00     28 4E 05 F1 | 	add	fp, #40
2eb04     A7 16 CA FA | 	rdbyte	arg03, fp wz
2eb08     28 4E 85 F1 | 	sub	fp, #40
2eb0c                 | '         return -1;
2eb0c     01 FA 65 A6 |  if_e	neg	result1, #1
2eb10     B0 00 90 AD |  if_e	jmp	#LR__4753
2eb14     08 4E 05 F1 | 	add	fp, #8
2eb18     A7 12 02 FB | 	rdlong	arg01, fp
2eb1c     20 4E 05 F1 | 	add	fp, #32
2eb20     A7 14 02 F6 | 	mov	arg02, fp
2eb24     28 4E 85 F1 | 	sub	fp, #40
2eb28     3F 16 06 F6 | 	mov	arg03, #63
2eb2c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2eb30     08 4E 05 F1 | 	add	fp, #8
2eb34     A7 16 02 FB | 	rdlong	arg03, fp
2eb38     3F 16 06 F1 | 	add	arg03, #63
2eb3c     0B 01 48 FC | 	wrbyte	#0, arg03
2eb40     0C 4E 05 F1 | 	add	fp, #12
2eb44     A7 16 C2 FA | 	rdbyte	arg03, fp
2eb48     14 4E 85 F1 | 	sub	fp, #20
2eb4c     10 16 CE F7 | 	test	arg03, #16 wz
2eb50     18 00 90 AD |  if_e	jmp	#LR__4751
2eb54     08 4E 05 F1 | 	add	fp, #8
2eb58     A7 16 02 FB | 	rdlong	arg03, fp
2eb5c     08 4E 85 F1 | 	sub	fp, #8
2eb60     50 16 06 F1 | 	add	arg03, #80
2eb64     0B 03 48 FC | 	wrbyte	#1, arg03
2eb68     14 00 90 FD | 	jmp	#LR__4752
2eb6c                 | LR__4751
2eb6c     08 4E 05 F1 | 	add	fp, #8
2eb70     A7 16 02 FB | 	rdlong	arg03, fp
2eb74     08 4E 85 F1 | 	sub	fp, #8
2eb78     50 16 06 F1 | 	add	arg03, #80
2eb7c     0B 01 48 FC | 	wrbyte	#0, arg03
2eb80                 | LR__4752
2eb80     08 4E 05 F1 | 	add	fp, #8
2eb84     A7 16 02 FB | 	rdlong	arg03, fp
2eb88     04 4E 05 F1 | 	add	fp, #4
2eb8c     A7 14 02 FB | 	rdlong	arg02, fp
2eb90     48 16 06 F1 | 	add	arg03, #72
2eb94     0B 15 62 FC | 	wrlong	arg02, arg03
2eb98     04 4E 85 F1 | 	sub	fp, #4
2eb9c     A7 1E 02 FB | 	rdlong	local01, fp
2eba0     08 4E 05 F1 | 	add	fp, #8
2eba4     A7 12 E2 FA | 	rdword	arg01, fp
2eba8     02 4E 05 F1 | 	add	fp, #2
2ebac     A7 14 E2 FA | 	rdword	arg02, fp
2ebb0     12 4E 85 F1 | 	sub	fp, #18
2ebb4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0962
2ebb8     4C 1E 06 F1 | 	add	local01, #76
2ebbc     0F FB 61 FC | 	wrlong	result1, local01
2ebc0                 | '         ent->d_type =  (0) ;
2ebc0                 | '     }
2ebc0                 | '     ent->d_size = finfo.fsize;
2ebc0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ebc0                 | '     return 0;
2ebc0     00 FA 05 F6 | 	mov	result1, #0
2ebc4                 | LR__4753
2ebc4     A7 F0 03 F6 | 	mov	ptra, fp
2ebc8     B2 00 A0 FD | 	call	#popregs_
2ebcc                 | _fatfs_cc_v_readdir_ret
2ebcc     2D 00 64 FD | 	ret
2ebd0                 | 
2ebd0                 | _fatfs_cc_v_stat
2ebd0     03 4A 05 F6 | 	mov	COUNT_, #3
2ebd4     A8 00 A0 FD | 	call	#pushregs_
2ebd8     30 F1 07 F1 | 	add	ptra, #304
2ebdc     04 4E 05 F1 | 	add	fp, #4
2ebe0     A7 12 62 FC | 	wrlong	arg01, fp
2ebe4     04 4E 05 F1 | 	add	fp, #4
2ebe8     A7 14 62 FC | 	wrlong	arg02, fp
2ebec     08 4E 85 F1 | 	sub	fp, #8
2ebf0     0A 13 02 F6 | 	mov	arg01, arg02
2ebf4     00 14 06 F6 | 	mov	arg02, #0
2ebf8     30 16 06 F6 | 	mov	arg03, #48
2ebfc     98 00 A0 FD | 	call	#\builtin_bytefill_
2ec00     04 4E 05 F1 | 	add	fp, #4
2ec04     A7 FA 01 FB | 	rdlong	result1, fp
2ec08     04 4E 85 F1 | 	sub	fp, #4
2ec0c     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ec10     2C 00 90 AD |  if_e	jmp	#LR__4760
2ec14     04 4E 05 F1 | 	add	fp, #4
2ec18     A7 FA 01 FB | 	rdlong	result1, fp
2ec1c     04 4E 85 F1 | 	sub	fp, #4
2ec20     FD FA C1 FA | 	rdbyte	result1, result1
2ec24     2E FA 0D F2 | 	cmp	result1, #46 wz
2ec28     04 4E 05 A1 |  if_e	add	fp, #4
2ec2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ec30     04 4E 85 A1 |  if_e	sub	fp, #4
2ec34     01 1E 06 A1 |  if_e	add	local01, #1
2ec38     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ec3c     18 00 90 5D |  if_ne	jmp	#LR__4761
2ec40                 | LR__4760
2ec40     18 4E 05 F1 | 	add	fp, #24
2ec44     A7 20 48 FC | 	wrbyte	#16, fp
2ec48     0C 4E 85 F1 | 	sub	fp, #12
2ec4c     A7 00 68 FC | 	wrlong	#0, fp
2ec50     0C 4E 85 F1 | 	sub	fp, #12
2ec54     24 00 90 FD | 	jmp	#LR__4762
2ec58                 | LR__4761
2ec58     04 4E 05 F1 | 	add	fp, #4
2ec5c     A7 12 02 FB | 	rdlong	arg01, fp
2ec60     0C 4E 05 F1 | 	add	fp, #12
2ec64     A7 14 02 F6 | 	mov	arg02, fp
2ec68     10 4E 85 F1 | 	sub	fp, #16
2ec6c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ec70     0C 4E 05 F1 | 	add	fp, #12
2ec74     A7 FA 61 FC | 	wrlong	result1, fp
2ec78     0C 4E 85 F1 | 	sub	fp, #12
2ec7c                 | LR__4762
2ec7c     0C 4E 05 F1 | 	add	fp, #12
2ec80     A7 20 0A FB | 	rdlong	local02, fp wz
2ec84     0C 4E 85 F1 | 	sub	fp, #12
2ec88     14 00 90 AD |  if_e	jmp	#LR__4763
2ec8c                 | '         return _set_dos_error(r);
2ec8c     0C 4E 05 F1 | 	add	fp, #12
2ec90     A7 12 02 FB | 	rdlong	arg01, fp
2ec94     0C 4E 85 F1 | 	sub	fp, #12
2ec98     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2ec9c     14 01 90 FD | 	jmp	#LR__4764
2eca0                 | LR__4763
2eca0     2C 4F 05 F1 | 	add	fp, #300
2eca4     A7 48 6A FC | 	wrlong	#292, fp
2eca8     14 4F 85 F1 | 	sub	fp, #276
2ecac     A7 22 C2 FA | 	rdbyte	local03, fp
2ecb0     18 4E 85 F1 | 	sub	fp, #24
2ecb4     01 22 CE F7 | 	test	local03, #1 wz
2ecb8     2C 4F 05 A1 |  if_e	add	fp, #300
2ecbc     A7 22 02 AB |  if_e	rdlong	local03, fp
2ecc0     92 22 46 A5 |  if_e	or	local03, #146
2ecc4     A7 22 62 AC |  if_e	wrlong	local03, fp
2ecc8     2C 4F 85 A1 |  if_e	sub	fp, #300
2eccc     18 4E 05 F1 | 	add	fp, #24
2ecd0     A7 22 C2 FA | 	rdbyte	local03, fp
2ecd4     18 4E 85 F1 | 	sub	fp, #24
2ecd8     10 22 CE F7 | 	test	local03, #16 wz
2ecdc     2C 4F 05 51 |  if_ne	add	fp, #300
2ece0     A7 22 02 5B |  if_ne	rdlong	local03, fp
2ece4     08 00 00 5F 
2ece8     49 22 46 55 |  if_ne	or	local03, ##4169
2ecec     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ecf0     2C 4F 85 51 |  if_ne	sub	fp, #300
2ecf4     08 4E 05 F1 | 	add	fp, #8
2ecf8     A7 22 02 FB | 	rdlong	local03, fp
2ecfc     24 4F 05 F1 | 	add	fp, #292
2ed00     A7 20 02 FB | 	rdlong	local02, fp
2ed04     08 22 06 F1 | 	add	local03, #8
2ed08     11 21 62 FC | 	wrlong	local02, local03
2ed0c     24 4F 85 F1 | 	sub	fp, #292
2ed10     A7 22 02 FB | 	rdlong	local03, fp
2ed14     0C 22 06 F1 | 	add	local03, #12
2ed18     11 03 68 FC | 	wrlong	#1, local03
2ed1c     A7 22 02 FB | 	rdlong	local03, fp
2ed20     08 4E 05 F1 | 	add	fp, #8
2ed24     A7 20 02 FB | 	rdlong	local02, fp
2ed28     18 22 06 F1 | 	add	local03, #24
2ed2c     11 21 62 FC | 	wrlong	local02, local03
2ed30     08 4E 85 F1 | 	sub	fp, #8
2ed34     A7 22 02 FB | 	rdlong	local03, fp
2ed38     1C 22 06 F1 | 	add	local03, #28
2ed3c     01 00 80 FF 
2ed40     11 01 68 FC | 	wrlong	##512, local03
2ed44     A7 20 02 FB | 	rdlong	local02, fp
2ed48     10 23 02 F6 | 	mov	local03, local02
2ed4c     18 20 06 F1 | 	add	local02, #24
2ed50     10 21 02 FB | 	rdlong	local02, local02
2ed54     FF 21 06 F1 | 	add	local02, #511
2ed58     10 21 52 F6 | 	abs	local02, local02 wc
2ed5c     09 20 46 F0 | 	shr	local02, #9
2ed60     10 21 82 F6 | 	negc	local02, local02
2ed64     20 22 06 F1 | 	add	local03, #32
2ed68     11 21 62 FC | 	wrlong	local02, local03
2ed6c     A7 20 02 FB | 	rdlong	local02, fp
2ed70     10 23 02 F6 | 	mov	local03, local02
2ed74     10 1F 02 F6 | 	mov	local01, local02
2ed78     0C 4E 05 F1 | 	add	fp, #12
2ed7c     A7 12 E2 FA | 	rdword	arg01, fp
2ed80     02 4E 05 F1 | 	add	fp, #2
2ed84     A7 14 E2 FA | 	rdword	arg02, fp
2ed88     16 4E 85 F1 | 	sub	fp, #22
2ed8c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0962
2ed90     2C 1E 06 F1 | 	add	local01, #44
2ed94     0F FB 61 FC | 	wrlong	result1, local01
2ed98     28 20 06 F1 | 	add	local02, #40
2ed9c     10 FB 61 FC | 	wrlong	result1, local02
2eda0     24 22 06 F1 | 	add	local03, #36
2eda4     11 FB 61 FC | 	wrlong	result1, local03
2eda8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2eda8                 | '     }
2eda8                 | '     buf->st_mode = mode;
2eda8                 | '     buf->st_nlink = 1;
2eda8                 | '     buf->st_size = finfo.fsize;
2eda8                 | '     buf->st_blksize = 512;
2eda8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2eda8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2eda8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eda8                 | '     return r;
2eda8     0C 4E 05 F1 | 	add	fp, #12
2edac     A7 FA 01 FB | 	rdlong	result1, fp
2edb0     0C 4E 85 F1 | 	sub	fp, #12
2edb4                 | LR__4764
2edb4     A7 F0 03 F6 | 	mov	ptra, fp
2edb8     B2 00 A0 FD | 	call	#popregs_
2edbc                 | _fatfs_cc_v_stat_ret
2edbc     2D 00 64 FD | 	ret
2edc0                 | 
2edc0                 | _fatfs_cc_v_read
2edc0     00 4A 05 F6 | 	mov	COUNT_, #0
2edc4     A8 00 A0 FD | 	call	#pushregs_
2edc8     1C F0 07 F1 | 	add	ptra, #28
2edcc     04 4E 05 F1 | 	add	fp, #4
2edd0     A7 12 62 FC | 	wrlong	arg01, fp
2edd4     04 4E 05 F1 | 	add	fp, #4
2edd8     A7 14 62 FC | 	wrlong	arg02, fp
2eddc     04 4E 05 F1 | 	add	fp, #4
2ede0     A7 16 62 FC | 	wrlong	arg03, fp
2ede4     08 4E 85 F1 | 	sub	fp, #8
2ede8     A7 12 02 FB | 	rdlong	arg01, fp
2edec     09 13 0A FB | 	rdlong	arg01, arg01 wz
2edf0     0C 4E 05 F1 | 	add	fp, #12
2edf4     A7 12 62 FC | 	wrlong	arg01, fp
2edf8     10 4E 85 F1 | 	sub	fp, #16
2edfc                 | '         return _seterror( 5 );
2edfc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ee00     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ee04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ee08     01 FA 65 A6 |  if_e	neg	result1, #1
2ee0c     B8 00 90 AD |  if_e	jmp	#LR__4772
2ee10     10 4E 05 F1 | 	add	fp, #16
2ee14     A7 12 02 FB | 	rdlong	arg01, fp
2ee18     02 00 00 FF 
2ee1c     14 12 06 F1 | 	add	arg01, ##1044
2ee20     08 4E 85 F1 | 	sub	fp, #8
2ee24     A7 14 02 FB | 	rdlong	arg02, fp
2ee28     04 4E 05 F1 | 	add	fp, #4
2ee2c     A7 16 02 FB | 	rdlong	arg03, fp
2ee30     0C 4E 05 F1 | 	add	fp, #12
2ee34     A7 18 02 F6 | 	mov	arg04, fp
2ee38     18 4E 85 F1 | 	sub	fp, #24
2ee3c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ee40     14 4E 05 F1 | 	add	fp, #20
2ee44     A7 FA 61 FC | 	wrlong	result1, fp
2ee48     14 4E 85 F1 | 	sub	fp, #20
2ee4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee50     34 00 90 AD |  if_e	jmp	#LR__4770
2ee54     04 4E 05 F1 | 	add	fp, #4
2ee58     A7 18 02 FB | 	rdlong	arg04, fp
2ee5c     0C 17 02 F6 | 	mov	arg03, arg04
2ee60     08 18 06 F1 | 	add	arg04, #8
2ee64     0C 19 02 FB | 	rdlong	arg04, arg04
2ee68     20 18 46 F5 | 	or	arg04, #32
2ee6c     08 16 06 F1 | 	add	arg03, #8
2ee70     0B 19 62 FC | 	wrlong	arg04, arg03
2ee74                 | '         fil->state |=  (0x20) ;
2ee74                 | '         return _set_dos_error(r);
2ee74     10 4E 05 F1 | 	add	fp, #16
2ee78     A7 12 02 FB | 	rdlong	arg01, fp
2ee7c     14 4E 85 F1 | 	sub	fp, #20
2ee80     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2ee84     40 00 90 FD | 	jmp	#LR__4772
2ee88                 | LR__4770
2ee88     18 4E 05 F1 | 	add	fp, #24
2ee8c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ee90     18 4E 85 F1 | 	sub	fp, #24
2ee94     24 00 90 5D |  if_ne	jmp	#LR__4771
2ee98     04 4E 05 F1 | 	add	fp, #4
2ee9c     A7 FA 01 FB | 	rdlong	result1, fp
2eea0     FD 18 02 F6 | 	mov	arg04, result1
2eea4     04 4E 85 F1 | 	sub	fp, #4
2eea8     08 FA 05 F1 | 	add	result1, #8
2eeac     FD FA 01 FB | 	rdlong	result1, result1
2eeb0     10 FA 45 F5 | 	or	result1, #16
2eeb4     08 18 06 F1 | 	add	arg04, #8
2eeb8     0C FB 61 FC | 	wrlong	result1, arg04
2eebc                 | LR__4771
2eebc                 | '         fil->state |=  (0x10) ;
2eebc                 | '     }
2eebc                 | '     return x;
2eebc     18 4E 05 F1 | 	add	fp, #24
2eec0     A7 FA 01 FB | 	rdlong	result1, fp
2eec4     18 4E 85 F1 | 	sub	fp, #24
2eec8                 | LR__4772
2eec8     A7 F0 03 F6 | 	mov	ptra, fp
2eecc     B2 00 A0 FD | 	call	#popregs_
2eed0                 | _fatfs_cc_v_read_ret
2eed0     2D 00 64 FD | 	ret
2eed4                 | 
2eed4                 | _fatfs_cc_v_write
2eed4     00 4A 05 F6 | 	mov	COUNT_, #0
2eed8     A8 00 A0 FD | 	call	#pushregs_
2eedc     1C F0 07 F1 | 	add	ptra, #28
2eee0     04 4E 05 F1 | 	add	fp, #4
2eee4     A7 12 62 FC | 	wrlong	arg01, fp
2eee8     04 4E 05 F1 | 	add	fp, #4
2eeec     A7 14 62 FC | 	wrlong	arg02, fp
2eef0     04 4E 05 F1 | 	add	fp, #4
2eef4     A7 16 62 FC | 	wrlong	arg03, fp
2eef8     08 4E 85 F1 | 	sub	fp, #8
2eefc     A7 12 02 FB | 	rdlong	arg01, fp
2ef00     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ef04     0C 4E 05 F1 | 	add	fp, #12
2ef08     A7 12 62 FC | 	wrlong	arg01, fp
2ef0c     10 4E 85 F1 | 	sub	fp, #16
2ef10                 | '         return _seterror( 5 );
2ef10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ef14     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ef18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ef1c     01 FA 65 A6 |  if_e	neg	result1, #1
2ef20     84 00 90 AD |  if_e	jmp	#LR__4781
2ef24     10 4E 05 F1 | 	add	fp, #16
2ef28     A7 12 02 FB | 	rdlong	arg01, fp
2ef2c     02 00 00 FF 
2ef30     14 12 06 F1 | 	add	arg01, ##1044
2ef34     08 4E 85 F1 | 	sub	fp, #8
2ef38     A7 14 02 FB | 	rdlong	arg02, fp
2ef3c     04 4E 05 F1 | 	add	fp, #4
2ef40     A7 16 02 FB | 	rdlong	arg03, fp
2ef44     0C 4E 05 F1 | 	add	fp, #12
2ef48     A7 18 02 F6 | 	mov	arg04, fp
2ef4c     18 4E 85 F1 | 	sub	fp, #24
2ef50     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2ef54     14 4E 05 F1 | 	add	fp, #20
2ef58     A7 FA 61 FC | 	wrlong	result1, fp
2ef5c     14 4E 85 F1 | 	sub	fp, #20
2ef60     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef64     34 00 90 AD |  if_e	jmp	#LR__4780
2ef68     04 4E 05 F1 | 	add	fp, #4
2ef6c     A7 18 02 FB | 	rdlong	arg04, fp
2ef70     0C 17 02 F6 | 	mov	arg03, arg04
2ef74     08 18 06 F1 | 	add	arg04, #8
2ef78     0C 19 02 FB | 	rdlong	arg04, arg04
2ef7c     20 18 46 F5 | 	or	arg04, #32
2ef80     08 16 06 F1 | 	add	arg03, #8
2ef84     0B 19 62 FC | 	wrlong	arg04, arg03
2ef88                 | '         fil->state |=  (0x20) ;
2ef88                 | '         return _set_dos_error(r);
2ef88     10 4E 05 F1 | 	add	fp, #16
2ef8c     A7 12 02 FB | 	rdlong	arg01, fp
2ef90     14 4E 85 F1 | 	sub	fp, #20
2ef94     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2ef98     0C 00 90 FD | 	jmp	#LR__4781
2ef9c                 | LR__4780
2ef9c                 | '     }
2ef9c                 | '     return x;
2ef9c     18 4E 05 F1 | 	add	fp, #24
2efa0     A7 FA 01 FB | 	rdlong	result1, fp
2efa4     18 4E 85 F1 | 	sub	fp, #24
2efa8                 | LR__4781
2efa8     A7 F0 03 F6 | 	mov	ptra, fp
2efac     B2 00 A0 FD | 	call	#popregs_
2efb0                 | _fatfs_cc_v_write_ret
2efb0     2D 00 64 FD | 	ret
2efb4                 | 
2efb4                 | _fatfs_cc_v_lseek
2efb4     04 4A 05 F6 | 	mov	COUNT_, #4
2efb8     A8 00 A0 FD | 	call	#pushregs_
2efbc     0A 1F 02 F6 | 	mov	local01, arg02
2efc0     0B 21 02 F6 | 	mov	local02, arg03
2efc4     09 23 02 FB | 	rdlong	local03, arg01
2efc8     02 00 00 FF 
2efcc     14 22 0E F1 | 	add	local03, ##1044 wz
2efd0                 | '         return _seterror( 5 );
2efd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2efd4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2efd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2efdc     01 FA 65 A6 |  if_e	neg	result1, #1
2efe0     4C 00 90 AD |  if_e	jmp	#LR__4792
2efe4     00 20 0E F2 | 	cmp	local02, #0 wz
2efe8     24 00 90 AD |  if_e	jmp	#LR__4790
2efec     01 20 0E F2 | 	cmp	local02, #1 wz
2eff0     14 22 06 A1 |  if_e	add	local03, #20
2eff4     11 25 02 AB |  if_e	rdlong	local04, local03
2eff8     14 22 86 A1 |  if_e	sub	local03, #20
2effc     12 1F 02 A1 |  if_e	add	local01, local04
2f000     0C 22 06 51 |  if_ne	add	local03, #12
2f004     11 25 02 5B |  if_ne	rdlong	local04, local03
2f008     0C 22 86 51 |  if_ne	sub	local03, #12
2f00c     12 1F 02 51 |  if_ne	add	local01, local04
2f010                 | LR__4790
2f010     0F 15 02 F6 | 	mov	arg02, local01
2f014     11 13 02 F6 | 	mov	arg01, local03
2f018     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f01c     FD 12 0A F6 | 	mov	arg01, result1 wz
2f020     08 00 90 AD |  if_e	jmp	#LR__4791
2f024                 | '         return _set_dos_error(result);
2f024     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2f028     04 00 90 FD | 	jmp	#LR__4792
2f02c                 | LR__4791
2f02c                 | '     }
2f02c                 | '     return offset;
2f02c     0F FB 01 F6 | 	mov	result1, local01
2f030                 | LR__4792
2f030     A7 F0 03 F6 | 	mov	ptra, fp
2f034     B2 00 A0 FD | 	call	#popregs_
2f038                 | _fatfs_cc_v_lseek_ret
2f038     2D 00 64 FD | 	ret
2f03c                 | 
2f03c                 | _fatfs_cc_v_ioctl
2f03c                 | ' {
2f03c                 | '     return _seterror( 10 );
2f03c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f040     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f044     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f048     01 FA 65 F6 | 	neg	result1, #1
2f04c                 | _fatfs_cc_v_ioctl_ret
2f04c     2D 00 64 FD | 	ret
2f050                 | 
2f050                 | _fatfs_cc_v_mkdir
2f050     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f054     FD 12 02 F6 | 	mov	arg01, result1
2f058                 | ' 
2f058                 | '     r = f_mkdir(name);
2f058                 | '     return _set_dos_error(r);
2f058     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2f05c                 | _fatfs_cc_v_mkdir_ret
2f05c     2D 00 64 FD | 	ret
2f060                 | 
2f060                 | _fatfs_cc_v_remove
2f060     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f064     FD 12 02 F6 | 	mov	arg01, result1
2f068                 | ' 
2f068                 | '     r = f_unlink(name);
2f068                 | '     return _set_dos_error(r);
2f068     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2f06c                 | _fatfs_cc_v_remove_ret
2f06c     2D 00 64 FD | 	ret
2f070                 | 
2f070                 | _fatfs_cc_v_rmdir
2f070     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f074     FD 12 02 F6 | 	mov	arg01, result1
2f078                 | ' 
2f078                 | '     r = f_unlink(name);
2f078                 | '     return _set_dos_error(r);
2f078     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2f07c                 | _fatfs_cc_v_rmdir_ret
2f07c     2D 00 64 FD | 	ret
2f080                 | 
2f080                 | _fatfs_cc_v_rename
2f080     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f084     FD 12 02 F6 | 	mov	arg01, result1
2f088                 | '     return _set_dos_error(r);
2f088     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2f08c                 | _fatfs_cc_v_rename_ret
2f08c     2D 00 64 FD | 	ret
2f090                 | 
2f090                 | _fatfs_cc_v_open
2f090     07 4A 05 F6 | 	mov	COUNT_, #7
2f094     A8 00 A0 FD | 	call	#pushregs_
2f098     09 1F 02 F6 | 	mov	local01, arg01
2f09c     0A 21 02 F6 | 	mov	local02, arg02
2f0a0     0B 23 02 F6 | 	mov	local03, arg03
2f0a4     03 00 00 FF 
2f0a8     3C 12 06 F6 | 	mov	arg01, ##1596
2f0ac                 | '     return _gc_alloc(size);
2f0ac     10 14 06 F6 | 	mov	arg02, #16
2f0b0     9C 56 BF FD | 	call	#__system___gc_doalloc
2f0b4     FD 24 0A F6 | 	mov	local04, result1 wz
2f0b8                 | '       return _seterror( 7 );
2f0b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f0bc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f0c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f0c4     01 FA 65 A6 |  if_e	neg	result1, #1
2f0c8     98 00 90 AD |  if_e	jmp	#LR__4806
2f0cc     12 13 02 F6 | 	mov	arg01, local04
2f0d0     00 14 06 F6 | 	mov	arg02, #0
2f0d4     03 00 00 FF 
2f0d8     3C 16 06 F6 | 	mov	arg03, ##1596
2f0dc     98 00 A0 FD | 	call	#\builtin_bytefill_
2f0e0                 | '   switch (flags & 3) {
2f0e0     11 27 02 F6 | 	mov	local05, local03
2f0e4     03 26 0E F5 | 	and	local05, #3 wz
2f0e8     0C 00 90 AD |  if_e	jmp	#LR__4800
2f0ec     01 26 0E F2 | 	cmp	local05, #1 wz
2f0f0     0C 00 90 AD |  if_e	jmp	#LR__4801
2f0f4     10 00 90 FD | 	jmp	#LR__4802
2f0f8                 | LR__4800
2f0f8     01 28 06 F6 | 	mov	local06, #1
2f0fc                 | '       fs_flags =  0x01 ;
2f0fc                 | '       break;
2f0fc     0C 00 90 FD | 	jmp	#LR__4803
2f100                 | LR__4801
2f100     02 28 06 F6 | 	mov	local06, #2
2f104                 | '       fs_flags =  0x02 ;
2f104                 | '       break;
2f104     04 00 90 FD | 	jmp	#LR__4803
2f108                 | LR__4802
2f108     03 28 06 F6 | 	mov	local06, #3
2f10c                 | '       fs_flags =  0x01  |  0x02 ;
2f10c                 | '       break;
2f10c                 | LR__4803
2f10c     08 22 CE F7 | 	test	local03, #8 wz
2f110     18 28 46 55 |  if_ne	or	local06, #24
2f114     08 00 90 5D |  if_ne	jmp	#LR__4804
2f118     20 22 CE F7 | 	test	local03, #32 wz
2f11c     30 28 46 55 |  if_ne	or	local06, #48
2f120                 | LR__4804
2f120     02 00 00 FF 
2f124     14 24 06 F1 | 	add	local04, ##1044
2f128     12 13 02 F6 | 	mov	arg01, local04
2f12c     02 00 00 FF 
2f130     14 24 86 F1 | 	sub	local04, ##1044
2f134     10 15 02 F6 | 	mov	arg02, local02
2f138     14 17 02 F6 | 	mov	arg03, local06
2f13c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f140     FD 2A 0A F6 | 	mov	local07, result1 wz
2f144     14 00 90 AD |  if_e	jmp	#LR__4805
2f148     12 13 02 F6 | 	mov	arg01, local04
2f14c                 | '     return _gc_free(ptr);
2f14c     0C 57 BF FD | 	call	#__system___gc_free
2f150                 | '     free(f);
2f150                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f150                 | '     return _set_dos_error(r);
2f150     15 13 02 F6 | 	mov	arg01, local07
2f154     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2f158     08 00 90 FD | 	jmp	#LR__4806
2f15c                 | LR__4805
2f15c     0F 25 62 FC | 	wrlong	local04, local01
2f160                 | '   }
2f160                 | '   fil->vfsdata = f;
2f160                 | '   return 0;
2f160     00 FA 05 F6 | 	mov	result1, #0
2f164                 | LR__4806
2f164     A7 F0 03 F6 | 	mov	ptra, fp
2f168     B2 00 A0 FD | 	call	#popregs_
2f16c                 | _fatfs_cc_v_open_ret
2f16c     2D 00 64 FD | 	ret
2f170                 | 
2f170                 | _fatfs_cc_v_flush
2f170     09 13 02 FB | 	rdlong	arg01, arg01
2f174     02 00 00 FF 
2f178     14 12 0E F1 | 	add	arg01, ##1044 wz
2f17c                 | '         return _seterror( 5 );
2f17c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f180     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f184     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f188     01 FA 65 A6 |  if_e	neg	result1, #1
2f18c     0C 00 90 AD |  if_e	jmp	#LR__4810
2f190     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f194     FD 12 02 F6 | 	mov	arg01, result1
2f198                 | '     }
2f198                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f198                 | '     result = f_sync(f);
2f198                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f198                 | '     return _set_dos_error(result);
2f198     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0964
2f19c                 | LR__4810
2f19c                 | _fatfs_cc_v_flush_ret
2f19c     2D 00 64 FD | 	ret
2f1a0                 | 
2f1a0                 | _fatfs_cc_v_init
2f1a0                 | ' {
2f1a0                 | '     return 0;
2f1a0     00 FA 05 F6 | 	mov	result1, #0
2f1a4                 | _fatfs_cc_v_init_ret
2f1a4     2D 00 64 FD | 	ret
2f1a8                 | 
2f1a8                 | _fatfs_cc_v_deinit
2f1a8     80 01 00 FF 
2f1ac     1C 15 06 F6 | 	mov	arg02, ##@LR__5006
2f1b0     00 12 06 F6 | 	mov	arg01, #0
2f1b4     00 16 06 F6 | 	mov	arg03, #0
2f1b8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f1bc     01 00 00 FF 
2f1c0     08 E4 05 F1 | 	add	objptr, ##520
2f1c4     F2 12 02 FB | 	rdlong	arg01, objptr
2f1c8     04 E4 05 F1 | 	add	objptr, #4
2f1cc     F2 14 02 FB | 	rdlong	arg02, objptr
2f1d0     01 00 00 FF 
2f1d4     0C E4 85 F1 | 	sub	objptr, ##524
2f1d8     F0 3D BF FD | 	call	#__system___freepins
2f1dc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f1dc                 | '     _freepins(f_pinmask);
2f1dc                 | '     return 0;
2f1dc     00 FA 05 F6 | 	mov	result1, #0
2f1e0                 | _fatfs_cc_v_deinit_ret
2f1e0     2D 00 64 FD | 	ret
2f1e4                 | 
2f1e4                 | _fatfs_cc_get_vfs
2f1e4     01 4A 05 F6 | 	mov	COUNT_, #1
2f1e8     A8 00 A0 FD | 	call	#pushregs_
2f1ec     09 1F 02 F6 | 	mov	local01, arg01
2f1f0     50 12 06 F6 | 	mov	arg01, #80
2f1f4     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f1f8     FD 12 02 F6 | 	mov	arg01, result1
2f1fc     F2 FA 01 F6 | 	mov	result1, objptr
2f200     00 E0 04 FF 
2f204     00 FA 45 F5 | 	or	result1, ##163577856
2f208     09 FB 61 FC | 	wrlong	result1, arg01
2f20c     F2 FA 01 F6 | 	mov	result1, objptr
2f210     00 E8 04 FF 
2f214     00 FA 45 F5 | 	or	result1, ##164626432
2f218     04 12 06 F1 | 	add	arg01, #4
2f21c     09 FB 61 FC | 	wrlong	result1, arg01
2f220     F2 FA 01 F6 | 	mov	result1, objptr
2f224     00 F0 04 FF 
2f228     00 FA 45 F5 | 	or	result1, ##165675008
2f22c     04 12 06 F1 | 	add	arg01, #4
2f230     09 FB 61 FC | 	wrlong	result1, arg01
2f234     F2 FA 01 F6 | 	mov	result1, objptr
2f238     00 F8 04 FF 
2f23c     00 FA 45 F5 | 	or	result1, ##166723584
2f240     04 12 06 F1 | 	add	arg01, #4
2f244     09 FB 61 FC | 	wrlong	result1, arg01
2f248     F2 FA 01 F6 | 	mov	result1, objptr
2f24c     00 00 05 FF 
2f250     00 FA 45 F5 | 	or	result1, ##167772160
2f254     04 12 06 F1 | 	add	arg01, #4
2f258     09 FB 61 FC | 	wrlong	result1, arg01
2f25c     04 12 06 F1 | 	add	arg01, #4
2f260     09 01 68 FC | 	wrlong	#0, arg01
2f264     04 12 06 F1 | 	add	arg01, #4
2f268     09 1F 62 FC | 	wrlong	local01, arg01
2f26c     04 12 06 F1 | 	add	arg01, #4
2f270     09 01 68 FC | 	wrlong	#0, arg01
2f274     F2 FA 01 F6 | 	mov	result1, objptr
2f278     00 08 05 FF 
2f27c     00 FA 45 F5 | 	or	result1, ##168820736
2f280     04 12 06 F1 | 	add	arg01, #4
2f284     09 FB 61 FC | 	wrlong	result1, arg01
2f288     F2 FA 01 F6 | 	mov	result1, objptr
2f28c     00 10 05 FF 
2f290     00 FA 45 F5 | 	or	result1, ##169869312
2f294     04 12 06 F1 | 	add	arg01, #4
2f298     09 FB 61 FC | 	wrlong	result1, arg01
2f29c     F2 FA 01 F6 | 	mov	result1, objptr
2f2a0     00 18 05 FF 
2f2a4     00 FA 45 F5 | 	or	result1, ##170917888
2f2a8     04 12 06 F1 | 	add	arg01, #4
2f2ac     09 FB 61 FC | 	wrlong	result1, arg01
2f2b0     F2 FA 01 F6 | 	mov	result1, objptr
2f2b4     00 20 05 FF 
2f2b8     00 FA 45 F5 | 	or	result1, ##171966464
2f2bc     04 12 06 F1 | 	add	arg01, #4
2f2c0     09 FB 61 FC | 	wrlong	result1, arg01
2f2c4     F2 FA 01 F6 | 	mov	result1, objptr
2f2c8     00 28 05 FF 
2f2cc     00 FA 45 F5 | 	or	result1, ##173015040
2f2d0     04 12 06 F1 | 	add	arg01, #4
2f2d4     09 FB 61 FC | 	wrlong	result1, arg01
2f2d8     F2 FA 01 F6 | 	mov	result1, objptr
2f2dc     00 30 05 FF 
2f2e0     00 FA 45 F5 | 	or	result1, ##174063616
2f2e4     04 12 06 F1 | 	add	arg01, #4
2f2e8     09 FB 61 FC | 	wrlong	result1, arg01
2f2ec     F2 FA 01 F6 | 	mov	result1, objptr
2f2f0     00 38 05 FF 
2f2f4     00 FA 45 F5 | 	or	result1, ##175112192
2f2f8     04 12 06 F1 | 	add	arg01, #4
2f2fc     09 FB 61 FC | 	wrlong	result1, arg01
2f300     F2 FA 01 F6 | 	mov	result1, objptr
2f304     00 40 05 FF 
2f308     00 FA 45 F5 | 	or	result1, ##176160768
2f30c     04 12 06 F1 | 	add	arg01, #4
2f310     09 FB 61 FC | 	wrlong	result1, arg01
2f314     F2 FA 01 F6 | 	mov	result1, objptr
2f318     00 48 05 FF 
2f31c     00 FA 45 F5 | 	or	result1, ##177209344
2f320     04 12 06 F1 | 	add	arg01, #4
2f324     09 FB 61 FC | 	wrlong	result1, arg01
2f328     F2 FA 01 F6 | 	mov	result1, objptr
2f32c     00 50 05 FF 
2f330     00 FA 45 F5 | 	or	result1, ##178257920
2f334     04 12 06 F1 | 	add	arg01, #4
2f338     09 FB 61 FC | 	wrlong	result1, arg01
2f33c     F2 FA 01 F6 | 	mov	result1, objptr
2f340     00 58 05 FF 
2f344     00 FA 45 F5 | 	or	result1, ##179306496
2f348     04 12 06 F1 | 	add	arg01, #4
2f34c     09 FB 61 FC | 	wrlong	result1, arg01
2f350     F2 FA 01 F6 | 	mov	result1, objptr
2f354     00 60 05 FF 
2f358     00 FA 45 F5 | 	or	result1, ##180355072
2f35c     04 12 06 F1 | 	add	arg01, #4
2f360     09 FB 61 FC | 	wrlong	result1, arg01
2f364     4C 12 86 F1 | 	sub	arg01, #76
2f368                 | ' 
2f368                 | '     v->close = &v_close;
2f368                 | '     v->read = &v_read;
2f368                 | '     v->write = &v_write;
2f368                 | '     v->lseek = &v_lseek;
2f368                 | '     v->ioctl = &v_ioctl;
2f368                 | '     v->flush = 0;
2f368                 | '     v->vfs_data = ptr;
2f368                 | '     v->reserved = 0;
2f368                 | ' 
2f368                 | '     v->open = &v_open;
2f368                 | '     v->creat = &v_creat;
2f368                 | '     v->opendir = &v_opendir;
2f368                 | '     v->closedir = &v_closedir;
2f368                 | '     v->readdir = &v_readdir;
2f368                 | '     v->stat = &v_stat;
2f368                 | ' 
2f368                 | '     v->mkdir = &v_mkdir;
2f368                 | '     v->rmdir = &v_rmdir;
2f368                 | ' 
2f368                 | '     v->remove = &v_remove;
2f368                 | '     v->rename = &v_rename;
2f368                 | ' 
2f368                 | '     v->init = &v_init;
2f368                 | '     v->deinit = &v_deinit;
2f368                 | ' 
2f368                 | '     return v;
2f368     09 FB 01 F6 | 	mov	result1, arg01
2f36c     A7 F0 03 F6 | 	mov	ptra, fp
2f370     B2 00 A0 FD | 	call	#popregs_
2f374                 | _fatfs_cc_get_vfs_ret
2f374     2D 00 64 FD | 	ret
2f378                 | 
2f378                 | _fatfs_cc_xmit_mmc_1111
2f378     01 00 00 FF 
2f37c     10 E4 05 F1 | 	add	objptr, ##528
2f380     F2 00 02 FB | 	rdlong	_var01, objptr
2f384     08 E4 05 F1 | 	add	objptr, #8
2f388     F2 02 02 FB | 	rdlong	_var02, objptr
2f38c     01 00 00 FF 
2f390     18 E4 85 F1 | 	sub	objptr, ##536
2f394     40 02 62 FD | 	dirl	_var02
2f398     28 02 64 FD | 	setq	#1
2f39c     09 05 02 FB | 	rdlong	_var03, arg01
2f3a0     69 04 62 FD | 	rev	_var03
2f3a4     1B 04 FE F9 | 	movbyts	_var03, #27
2f3a8     01 05 22 FC | 	wypin	_var03, _var02
2f3ac     0A 05 02 F6 | 	mov	_var03, arg02
2f3b0     02 14 4E F0 | 	shr	arg02, #2 wz
2f3b4     03 04 66 F0 | 	shl	_var03, #3
2f3b8     00 05 22 FC | 	wypin	_var03, _var01
2f3bc     41 02 62 FD | 	dirh	_var02
2f3c0     08 12 06 F1 | 	add	arg01, #8
2f3c4     69 06 62 FD | 	rev	_var04
2f3c8     1B 06 FE F9 | 	movbyts	_var04, #27
2f3cc                 | LR__4820
2f3cc     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f3d0     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f3d4     04 12 06 51 |  if_ne	add	arg01, #4
2f3d8     69 06 62 5D |  if_ne	rev	_var04
2f3dc     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f3e0                 | LR__4821
2f3e0     40 02 72 5D |  if_ne	testp	_var02 wc
2f3e4     F8 FF 9F 1D |  if_a	jmp	#LR__4821
2f3e8     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4820
2f3ec                 | LR__4822
2f3ec     40 00 72 FD | 	testp	_var01 wc
2f3f0     F8 FF 9F 3D |  if_ae	jmp	#LR__4822
2f3f4     40 02 62 FD | 	dirl	_var02
2f3f8     FF FF FF FF 
2f3fc     01 FF 2B FC | 	wypin	##-1, _var02
2f400     41 02 62 FD | 	dirh	_var02
2f404                 | _fatfs_cc_xmit_mmc_1111_ret
2f404     2D 00 64 FD | 	ret
2f408                 | 
2f408                 | _fatfs_cc_rcvr_mmc_1118
2f408     01 00 00 FF 
2f40c     10 E4 05 F1 | 	add	objptr, ##528
2f410     F2 00 02 FB | 	rdlong	_var01, objptr
2f414     0C E4 05 F1 | 	add	objptr, #12
2f418     F2 02 02 FB | 	rdlong	_var02, objptr
2f41c     01 00 00 FF 
2f420     1C E4 85 F1 | 	sub	objptr, ##540
2f424     01 03 08 FC | 	akpin	_var02
2f428     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f42c     02 04 4E F0 | 	shr	_var03, #2 wz
2f430     30 00 90 AD |  if_e	jmp	#LR__4832
2f434     02 07 02 F6 | 	mov	_var04, _var03
2f438     05 06 66 F0 | 	shl	_var04, #5
2f43c     00 07 22 FC | 	wypin	_var04, _var01
2f440     01 7F 18 FC | 	wxpin	#63, _var02
2f444                 | LR__4830
2f444                 | LR__4831
2f444     40 02 72 FD | 	testp	_var02 wc
2f448     F8 FF 9F 3D |  if_ae	jmp	#LR__4831
2f44c     01 07 8A FA | 	rdpin	_var04, _var02
2f450     69 06 62 FD | 	rev	_var04
2f454     1B 06 FE F9 | 	movbyts	_var04, #27
2f458     09 07 62 FC | 	wrlong	_var04, arg01
2f45c     04 12 06 F1 | 	add	arg01, #4
2f460     F8 05 6E FB | 	djnz	_var03, #LR__4830
2f464                 | LR__4832
2f464     03 14 0E F5 | 	and	arg02, #3 wz
2f468     24 00 90 AD |  if_e	jmp	#LR__4835
2f46c     01 4F 18 FC | 	wxpin	#39, _var02
2f470                 | LR__4833
2f470     00 11 28 FC | 	wypin	#8, _var01
2f474                 | LR__4834
2f474     40 02 72 FD | 	testp	_var02 wc
2f478     F8 FF 9F 3D |  if_ae	jmp	#LR__4834
2f47c     01 07 8A FA | 	rdpin	_var04, _var02
2f480     69 06 62 FD | 	rev	_var04
2f484     09 07 42 FC | 	wrbyte	_var04, arg01
2f488     01 12 06 F1 | 	add	arg01, #1
2f48c     F8 15 6E FB | 	djnz	arg02, #LR__4833
2f490                 | LR__4835
2f490                 | _fatfs_cc_rcvr_mmc_1118_ret
2f490     2D 00 64 FD | 	ret
2f494                 | 
2f494                 | _fatfs_cc_wait_ready_1122
2f494     01 4A 05 F6 | 	mov	COUNT_, #1
2f498     A8 00 A0 FD | 	call	#pushregs_
2f49c     10 F0 07 F1 | 	add	ptra, #16
2f4a0     1A FA 61 FD | 	getct	result1
2f4a4     08 4E 05 F1 | 	add	fp, #8
2f4a8     A7 FA 61 FC | 	wrlong	result1, fp
2f4ac     14 1E 06 FB | 	rdlong	local01, #20
2f4b0     01 1E 46 F0 | 	shr	local01, #1
2f4b4     04 4E 05 F1 | 	add	fp, #4
2f4b8     A7 1E 62 FC | 	wrlong	local01, fp
2f4bc     0C 4E 85 F1 | 	sub	fp, #12
2f4c0                 | ' {
2f4c0                 | ' 	BYTE d;
2f4c0                 | ' 	UINT tmr, tmout;
2f4c0                 | ' 
2f4c0                 | ' 	tmr = _cnt();
2f4c0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f4c0                 | ' 	for(;;) {
2f4c0                 | LR__4840
2f4c0     04 4E 05 F1 | 	add	fp, #4
2f4c4     A7 12 02 F6 | 	mov	arg01, fp
2f4c8     04 4E 85 F1 | 	sub	fp, #4
2f4cc     01 14 06 F6 | 	mov	arg02, #1
2f4d0     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f4d4     04 4E 05 F1 | 	add	fp, #4
2f4d8     A7 1E C2 FA | 	rdbyte	local01, fp
2f4dc     04 4E 85 F1 | 	sub	fp, #4
2f4e0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f4e4     01 FA 05 A6 |  if_e	mov	result1, #1
2f4e8     28 00 90 AD |  if_e	jmp	#LR__4841
2f4ec     1A FA 61 FD | 	getct	result1
2f4f0     08 4E 05 F1 | 	add	fp, #8
2f4f4     A7 1E 02 FB | 	rdlong	local01, fp
2f4f8     0F FB 81 F1 | 	sub	result1, local01
2f4fc     04 4E 05 F1 | 	add	fp, #4
2f500     A7 1E 02 FB | 	rdlong	local01, fp
2f504     0C 4E 85 F1 | 	sub	fp, #12
2f508     0F FB 11 F2 | 	cmp	result1, local01 wc
2f50c     00 FA 05 36 |  if_ae	mov	result1, #0
2f510     AC FF 9F CD |  if_b	jmp	#LR__4840
2f514                 | LR__4841
2f514     A7 F0 03 F6 | 	mov	ptra, fp
2f518     B2 00 A0 FD | 	call	#popregs_
2f51c                 | _fatfs_cc_wait_ready_1122_ret
2f51c     2D 00 64 FD | 	ret
2f520                 | 
2f520                 | _fatfs_cc_deselect_1128
2f520     00 4A 05 F6 | 	mov	COUNT_, #0
2f524     A8 00 A0 FD | 	call	#pushregs_
2f528     14 F0 07 F1 | 	add	ptra, #20
2f52c     01 00 00 FF 
2f530     14 E4 05 F1 | 	add	objptr, ##532
2f534     F2 14 02 FB | 	rdlong	arg02, objptr
2f538     04 4E 05 F1 | 	add	fp, #4
2f53c     A7 14 62 FC | 	wrlong	arg02, fp
2f540     04 E4 85 F1 | 	sub	objptr, #4
2f544     F2 14 02 FB | 	rdlong	arg02, objptr
2f548     04 4E 05 F1 | 	add	fp, #4
2f54c     A7 14 62 FC | 	wrlong	arg02, fp
2f550     08 E4 05 F1 | 	add	objptr, #8
2f554     F2 14 02 FB | 	rdlong	arg02, objptr
2f558     04 4E 05 F1 | 	add	fp, #4
2f55c     A7 14 62 FC | 	wrlong	arg02, fp
2f560     04 E4 05 F1 | 	add	objptr, #4
2f564     F2 14 02 FB | 	rdlong	arg02, objptr
2f568     01 00 00 FF 
2f56c     1C E4 85 F1 | 	sub	objptr, ##540
2f570     04 4E 05 F1 | 	add	fp, #4
2f574     A7 14 62 FC | 	wrlong	arg02, fp
2f578     0C 4E 85 F1 | 	sub	fp, #12
2f57c     A7 12 02 FB | 	rdlong	arg01, fp
2f580     04 4E 85 F1 | 	sub	fp, #4
2f584     59 12 62 FD | 	drvh	arg01
2f588     1F 20 64 FD | 	waitx	#16
2f58c     A7 12 02 F6 | 	mov	arg01, fp
2f590     01 14 06 F6 | 	mov	arg02, #1
2f594     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f598     A7 F0 03 F6 | 	mov	ptra, fp
2f59c     B2 00 A0 FD | 	call	#popregs_
2f5a0                 | _fatfs_cc_deselect_1128_ret
2f5a0     2D 00 64 FD | 	ret
2f5a4                 | 
2f5a4                 | _fatfs_cc_select_1132
2f5a4     00 4A 05 F6 | 	mov	COUNT_, #0
2f5a8     A8 00 A0 FD | 	call	#pushregs_
2f5ac     10 F0 07 F1 | 	add	ptra, #16
2f5b0     01 00 00 FF 
2f5b4     14 E4 05 F1 | 	add	objptr, ##532
2f5b8     F2 14 02 FB | 	rdlong	arg02, objptr
2f5bc     08 4E 05 F1 | 	add	fp, #8
2f5c0     A7 14 62 FC | 	wrlong	arg02, fp
2f5c4     08 E4 05 F1 | 	add	objptr, #8
2f5c8     F2 12 02 FB | 	rdlong	arg01, objptr
2f5cc     01 00 00 FF 
2f5d0     1C E4 85 F1 | 	sub	objptr, ##540
2f5d4     04 4E 05 F1 | 	add	fp, #4
2f5d8     A7 12 62 FC | 	wrlong	arg01, fp
2f5dc     50 12 62 FD | 	fltl	arg01
2f5e0     04 4E 85 F1 | 	sub	fp, #4
2f5e4     A7 12 02 FB | 	rdlong	arg01, fp
2f5e8     58 12 62 FD | 	drvl	arg01
2f5ec     1F 20 64 FD | 	waitx	#16
2f5f0     04 4E 05 F1 | 	add	fp, #4
2f5f4     A7 12 02 FB | 	rdlong	arg01, fp
2f5f8     41 12 62 FD | 	dirh	arg01
2f5fc     08 4E 85 F1 | 	sub	fp, #8
2f600     A7 12 02 F6 | 	mov	arg01, fp
2f604     04 4E 85 F1 | 	sub	fp, #4
2f608     01 14 06 F6 | 	mov	arg02, #1
2f60c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f610     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1122
2f614     00 FA 0D F2 | 	cmp	result1, #0 wz
2f618     01 FA 05 56 |  if_ne	mov	result1, #1
2f61c     08 00 90 5D |  if_ne	jmp	#LR__4850
2f620     FC FE BF FD | 	call	#_fatfs_cc_deselect_1128
2f624                 | ' 
2f624                 | ' 	deselect();
2f624                 | ' 	return 0;
2f624     00 FA 05 F6 | 	mov	result1, #0
2f628                 | LR__4850
2f628     A7 F0 03 F6 | 	mov	ptra, fp
2f62c     B2 00 A0 FD | 	call	#popregs_
2f630                 | _fatfs_cc_select_1132_ret
2f630     2D 00 64 FD | 	ret
2f634                 | 
2f634                 | _fatfs_cc_rcvr_datablock_1136
2f634     01 4A 05 F6 | 	mov	COUNT_, #1
2f638     A8 00 A0 FD | 	call	#pushregs_
2f63c     18 F0 07 F1 | 	add	ptra, #24
2f640     04 4E 05 F1 | 	add	fp, #4
2f644     A7 12 62 FC | 	wrlong	arg01, fp
2f648     04 4E 05 F1 | 	add	fp, #4
2f64c     A7 14 62 FC | 	wrlong	arg02, fp
2f650     1A FA 61 FD | 	getct	result1
2f654     08 4E 05 F1 | 	add	fp, #8
2f658     A7 FA 61 FC | 	wrlong	result1, fp
2f65c     14 1E 06 FB | 	rdlong	local01, #20
2f660     03 1E 46 F0 | 	shr	local01, #3
2f664     04 4E 05 F1 | 	add	fp, #4
2f668     A7 1E 62 FC | 	wrlong	local01, fp
2f66c     14 4E 85 F1 | 	sub	fp, #20
2f670                 | ' 	BYTE *buff,
2f670                 | ' 	UINT btr
2f670                 | ' )
2f670                 | ' {
2f670                 | ' 	BYTE d[2];
2f670                 | ' 	UINT tmr, tmout;
2f670                 | ' 
2f670                 | ' 	tmr = _cnt();
2f670                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f670                 | ' 	for(;;) {
2f670                 | LR__4860
2f670     0C 4E 05 F1 | 	add	fp, #12
2f674     A7 12 02 F6 | 	mov	arg01, fp
2f678     0C 4E 85 F1 | 	sub	fp, #12
2f67c     01 14 06 F6 | 	mov	arg02, #1
2f680     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f684     0C 4E 05 F1 | 	add	fp, #12
2f688     A7 1E C2 FA | 	rdbyte	local01, fp
2f68c     0C 4E 85 F1 | 	sub	fp, #12
2f690     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f694     28 00 90 5D |  if_ne	jmp	#LR__4861
2f698     1A FA 61 FD | 	getct	result1
2f69c     FD 1E 02 F6 | 	mov	local01, result1
2f6a0     10 4E 05 F1 | 	add	fp, #16
2f6a4     A7 14 02 FB | 	rdlong	arg02, fp
2f6a8     0A 1F 82 F1 | 	sub	local01, arg02
2f6ac     04 4E 05 F1 | 	add	fp, #4
2f6b0     A7 14 02 FB | 	rdlong	arg02, fp
2f6b4     14 4E 85 F1 | 	sub	fp, #20
2f6b8     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f6bc     B0 FF 9F CD |  if_b	jmp	#LR__4860
2f6c0                 | LR__4861
2f6c0     0C 4E 05 F1 | 	add	fp, #12
2f6c4     A7 1E C2 FA | 	rdbyte	local01, fp
2f6c8     0C 4E 85 F1 | 	sub	fp, #12
2f6cc     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f6d0     00 FA 05 56 |  if_ne	mov	result1, #0
2f6d4     30 00 90 5D |  if_ne	jmp	#LR__4862
2f6d8     04 4E 05 F1 | 	add	fp, #4
2f6dc     A7 12 02 FB | 	rdlong	arg01, fp
2f6e0     04 4E 05 F1 | 	add	fp, #4
2f6e4     A7 14 02 FB | 	rdlong	arg02, fp
2f6e8     08 4E 85 F1 | 	sub	fp, #8
2f6ec     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f6f0     0C 4E 05 F1 | 	add	fp, #12
2f6f4     A7 12 02 F6 | 	mov	arg01, fp
2f6f8     0C 4E 85 F1 | 	sub	fp, #12
2f6fc     02 14 06 F6 | 	mov	arg02, #2
2f700     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f704                 | ' 
2f704                 | ' 	rcvr_mmc(buff, btr);
2f704                 | ' 	rcvr_mmc(d, 2);
2f704                 | ' 
2f704                 | ' 	return 1;
2f704     01 FA 05 F6 | 	mov	result1, #1
2f708                 | LR__4862
2f708     A7 F0 03 F6 | 	mov	ptra, fp
2f70c     B2 00 A0 FD | 	call	#popregs_
2f710                 | _fatfs_cc_rcvr_datablock_1136_ret
2f710     2D 00 64 FD | 	ret
2f714                 | 
2f714                 | _fatfs_cc_xmit_datablock_1138
2f714     00 4A 05 F6 | 	mov	COUNT_, #0
2f718     A8 00 A0 FD | 	call	#pushregs_
2f71c     10 F0 07 F1 | 	add	ptra, #16
2f720     04 4E 05 F1 | 	add	fp, #4
2f724     A7 12 62 FC | 	wrlong	arg01, fp
2f728     04 4E 05 F1 | 	add	fp, #4
2f72c     A7 14 42 FC | 	wrbyte	arg02, fp
2f730     08 4E 85 F1 | 	sub	fp, #8
2f734     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1122
2f738     00 FA 0D F2 | 	cmp	result1, #0 wz
2f73c     00 FA 05 A6 |  if_e	mov	result1, #0
2f740     90 00 90 AD |  if_e	jmp	#LR__4871
2f744     08 4E 05 F1 | 	add	fp, #8
2f748     A7 14 C2 FA | 	rdbyte	arg02, fp
2f74c     04 4E 05 F1 | 	add	fp, #4
2f750     A7 14 42 FC | 	wrbyte	arg02, fp
2f754     A7 12 02 F6 | 	mov	arg01, fp
2f758     0C 4E 85 F1 | 	sub	fp, #12
2f75c     01 14 06 F6 | 	mov	arg02, #1
2f760     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1111
2f764     08 4E 05 F1 | 	add	fp, #8
2f768     A7 14 C2 FA | 	rdbyte	arg02, fp
2f76c     08 4E 85 F1 | 	sub	fp, #8
2f770     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f774     58 00 90 AD |  if_e	jmp	#LR__4870
2f778     04 4E 05 F1 | 	add	fp, #4
2f77c     A7 12 02 FB | 	rdlong	arg01, fp
2f780     04 4E 85 F1 | 	sub	fp, #4
2f784     09 14 C6 F9 | 	decod	arg02, #9
2f788     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1111
2f78c     0C 4E 05 F1 | 	add	fp, #12
2f790     A7 12 02 F6 | 	mov	arg01, fp
2f794     0C 4E 85 F1 | 	sub	fp, #12
2f798     02 14 06 F6 | 	mov	arg02, #2
2f79c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f7a0     0C 4E 05 F1 | 	add	fp, #12
2f7a4     A7 12 02 F6 | 	mov	arg01, fp
2f7a8     0C 4E 85 F1 | 	sub	fp, #12
2f7ac     01 14 06 F6 | 	mov	arg02, #1
2f7b0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f7b4     0C 4E 05 F1 | 	add	fp, #12
2f7b8     A7 14 C2 FA | 	rdbyte	arg02, fp
2f7bc     0C 4E 85 F1 | 	sub	fp, #12
2f7c0     1F 14 06 F5 | 	and	arg02, #31
2f7c4     05 14 0E F2 | 	cmp	arg02, #5 wz
2f7c8                 | ' 			return 0;
2f7c8     00 FA 05 56 |  if_ne	mov	result1, #0
2f7cc     04 00 90 5D |  if_ne	jmp	#LR__4871
2f7d0                 | LR__4870
2f7d0                 | ' 	}
2f7d0                 | ' 
2f7d0                 | ' 	return 1;
2f7d0     01 FA 05 F6 | 	mov	result1, #1
2f7d4                 | LR__4871
2f7d4     A7 F0 03 F6 | 	mov	ptra, fp
2f7d8     B2 00 A0 FD | 	call	#popregs_
2f7dc                 | _fatfs_cc_xmit_datablock_1138_ret
2f7dc     2D 00 64 FD | 	ret
2f7e0                 | 
2f7e0                 | _fatfs_cc_send_cmd_1142
2f7e0     01 4A 05 F6 | 	mov	COUNT_, #1
2f7e4     A8 00 A0 FD | 	call	#pushregs_
2f7e8     1C F0 07 F1 | 	add	ptra, #28
2f7ec                 | _fatfs_cc_send_cmd_1142_enter
2f7ec     04 4E 05 F1 | 	add	fp, #4
2f7f0     A7 12 42 FC | 	wrbyte	arg01, fp
2f7f4     04 4E 05 F1 | 	add	fp, #4
2f7f8     A7 14 62 FC | 	wrlong	arg02, fp
2f7fc     04 4E 85 F1 | 	sub	fp, #4
2f800     A7 FA C1 FA | 	rdbyte	result1, fp
2f804     04 4E 85 F1 | 	sub	fp, #4
2f808     80 FA CD F7 | 	test	result1, #128 wz
2f80c     44 00 90 AD |  if_e	jmp	#LR__4880
2f810     04 4E 05 F1 | 	add	fp, #4
2f814     A7 14 C2 FA | 	rdbyte	arg02, fp
2f818     7F 14 06 F5 | 	and	arg02, #127
2f81c     A7 14 42 FC | 	wrbyte	arg02, fp
2f820     04 4E 85 F1 | 	sub	fp, #4
2f824     37 12 06 F6 | 	mov	arg01, #55
2f828     00 14 06 F6 | 	mov	arg02, #0
2f82c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1142
2f830     0C 4E 05 F1 | 	add	fp, #12
2f834     A7 FA 41 FC | 	wrbyte	result1, fp
2f838     A7 14 C2 FA | 	rdbyte	arg02, fp
2f83c     0C 4E 85 F1 | 	sub	fp, #12
2f840     02 14 16 F2 | 	cmp	arg02, #2 wc
2f844     0C 4E 05 31 |  if_ae	add	fp, #12
2f848     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2f84c     0C 4E 85 31 |  if_ae	sub	fp, #12
2f850     6C 01 90 3D |  if_ae	jmp	#LR__4884
2f854                 | LR__4880
2f854     04 4E 05 F1 | 	add	fp, #4
2f858     A7 14 C2 FA | 	rdbyte	arg02, fp
2f85c     04 4E 85 F1 | 	sub	fp, #4
2f860     0C 14 0E F2 | 	cmp	arg02, #12 wz
2f864     14 00 90 AD |  if_e	jmp	#LR__4881
2f868     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1128
2f86c     34 FD BF FD | 	call	#_fatfs_cc_select_1132
2f870     00 FA 0D F2 | 	cmp	result1, #0 wz
2f874     FF FA 05 A6 |  if_e	mov	result1, #255
2f878     44 01 90 AD |  if_e	jmp	#LR__4884
2f87c                 | LR__4881
2f87c     04 4E 05 F1 | 	add	fp, #4
2f880     A7 14 C2 FA | 	rdbyte	arg02, fp
2f884     40 FA 05 F6 | 	mov	result1, #64
2f888     0A FB 41 F5 | 	or	result1, arg02
2f88c     10 4E 05 F1 | 	add	fp, #16
2f890     A7 FA 41 FC | 	wrbyte	result1, fp
2f894     0C 4E 85 F1 | 	sub	fp, #12
2f898     A7 FA 01 FB | 	rdlong	result1, fp
2f89c     18 FA 45 F0 | 	shr	result1, #24
2f8a0     0D 4E 05 F1 | 	add	fp, #13
2f8a4     A7 FA 41 FC | 	wrbyte	result1, fp
2f8a8     0D 4E 85 F1 | 	sub	fp, #13
2f8ac     A7 FA 01 FB | 	rdlong	result1, fp
2f8b0     10 FA 45 F0 | 	shr	result1, #16
2f8b4     0E 4E 05 F1 | 	add	fp, #14
2f8b8     A7 FA 41 FC | 	wrbyte	result1, fp
2f8bc     0E 4E 85 F1 | 	sub	fp, #14
2f8c0     A7 FA 01 FB | 	rdlong	result1, fp
2f8c4     08 FA 45 F0 | 	shr	result1, #8
2f8c8     0F 4E 05 F1 | 	add	fp, #15
2f8cc     A7 FA 41 FC | 	wrbyte	result1, fp
2f8d0     0F 4E 85 F1 | 	sub	fp, #15
2f8d4     A7 FA 01 FB | 	rdlong	result1, fp
2f8d8     10 4E 05 F1 | 	add	fp, #16
2f8dc     A7 FA 41 FC | 	wrbyte	result1, fp
2f8e0     0C 4E 85 F1 | 	sub	fp, #12
2f8e4     A7 02 48 FC | 	wrbyte	#1, fp
2f8e8     08 4E 85 F1 | 	sub	fp, #8
2f8ec     A7 FA C9 FA | 	rdbyte	result1, fp wz
2f8f0     04 4E 85 F1 | 	sub	fp, #4
2f8f4     0C 4E 05 A1 |  if_e	add	fp, #12
2f8f8     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2f8fc     0C 4E 85 A1 |  if_e	sub	fp, #12
2f900     04 4E 05 F1 | 	add	fp, #4
2f904     A7 FA C1 FA | 	rdbyte	result1, fp
2f908     04 4E 85 F1 | 	sub	fp, #4
2f90c     08 FA 0D F2 | 	cmp	result1, #8 wz
2f910     0C 4E 05 A1 |  if_e	add	fp, #12
2f914     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2f918     0C 4E 85 A1 |  if_e	sub	fp, #12
2f91c     0C 4E 05 F1 | 	add	fp, #12
2f920     A7 14 C2 FA | 	rdbyte	arg02, fp
2f924     0D 4E 05 F1 | 	add	fp, #13
2f928     A7 14 42 FC | 	wrbyte	arg02, fp
2f92c     05 4E 85 F1 | 	sub	fp, #5
2f930     A7 12 02 F6 | 	mov	arg01, fp
2f934     14 4E 85 F1 | 	sub	fp, #20
2f938     06 14 06 F6 | 	mov	arg02, #6
2f93c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1111
2f940     04 4E 05 F1 | 	add	fp, #4
2f944     A7 1E C2 FA | 	rdbyte	local01, fp
2f948     04 4E 85 F1 | 	sub	fp, #4
2f94c     0C 1E 0E F2 | 	cmp	local01, #12 wz
2f950     10 4E 05 A1 |  if_e	add	fp, #16
2f954     A7 12 02 A6 |  if_e	mov	arg01, fp
2f958     10 4E 85 A1 |  if_e	sub	fp, #16
2f95c     01 14 06 A6 |  if_e	mov	arg02, #1
2f960     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1118
2f964     0C 4E 05 F1 | 	add	fp, #12
2f968     A7 14 48 FC | 	wrbyte	#10, fp
2f96c     0C 4E 85 F1 | 	sub	fp, #12
2f970                 | ' 	n = 10;
2f970                 | ' 	do
2f970                 | LR__4882
2f970     10 4E 05 F1 | 	add	fp, #16
2f974     A7 12 02 F6 | 	mov	arg01, fp
2f978     10 4E 85 F1 | 	sub	fp, #16
2f97c     01 14 06 F6 | 	mov	arg02, #1
2f980     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1118
2f984     10 4E 05 F1 | 	add	fp, #16
2f988     A7 1E C2 FA | 	rdbyte	local01, fp
2f98c     10 4E 85 F1 | 	sub	fp, #16
2f990     80 1E CE F7 | 	test	local01, #128 wz
2f994     1C 00 90 AD |  if_e	jmp	#LR__4883
2f998     0C 4E 05 F1 | 	add	fp, #12
2f99c     A7 1E C2 FA | 	rdbyte	local01, fp
2f9a0     01 1E 86 F1 | 	sub	local01, #1
2f9a4     A7 1E 42 FC | 	wrbyte	local01, fp
2f9a8     A7 1E CA FA | 	rdbyte	local01, fp wz
2f9ac     0C 4E 85 F1 | 	sub	fp, #12
2f9b0     BC FF 9F 5D |  if_ne	jmp	#LR__4882
2f9b4                 | LR__4883
2f9b4                 | ' 
2f9b4                 | ' 	return d;
2f9b4     10 4E 05 F1 | 	add	fp, #16
2f9b8     A7 FA C1 FA | 	rdbyte	result1, fp
2f9bc     10 4E 85 F1 | 	sub	fp, #16
2f9c0                 | LR__4884
2f9c0     A7 F0 03 F6 | 	mov	ptra, fp
2f9c4     B2 00 A0 FD | 	call	#popregs_
2f9c8                 | _fatfs_cc_send_cmd_1142_ret
2f9c8     2D 00 64 FD | 	ret
2f9cc                 | 
2f9cc                 | _fatfs_cc_disk_deinitialize
2f9cc     03 4A 05 F6 | 	mov	COUNT_, #3
2f9d0     A8 00 A0 FD | 	call	#pushregs_
2f9d4     00 12 4E F2 | 	cmps	arg01, #0 wz
2f9d8     01 00 00 FF 
2f9dc     14 E4 05 F1 | 	add	objptr, ##532
2f9e0     F2 12 02 FB | 	rdlong	arg01, objptr
2f9e4     04 E4 85 F1 | 	sub	objptr, #4
2f9e8     F2 1E 02 FB | 	rdlong	local01, objptr
2f9ec     08 E4 05 F1 | 	add	objptr, #8
2f9f0     F2 20 02 FB | 	rdlong	local02, objptr
2f9f4     04 E4 05 F1 | 	add	objptr, #4
2f9f8     F2 22 02 FB | 	rdlong	local03, objptr
2f9fc     01 00 00 FF 
2fa00     1C E4 85 F1 | 	sub	objptr, ##540
2fa04                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fa04                 | '         return RES_NOTRDY;
2fa04     03 FA 05 56 |  if_ne	mov	result1, #3
2fa08     2C 00 90 5D |  if_ne	jmp	#LR__4890
2fa0c     50 12 62 FD | 	fltl	arg01
2fa10     09 01 08 FC | 	wrpin	#0, arg01
2fa14     50 1E 62 FD | 	fltl	local01
2fa18     0F 01 08 FC | 	wrpin	#0, local01
2fa1c     50 20 62 FD | 	fltl	local02
2fa20     10 01 08 FC | 	wrpin	#0, local02
2fa24     50 22 62 FD | 	fltl	local03
2fa28     11 01 08 FC | 	wrpin	#0, local03
2fa2c     0A 12 06 F6 | 	mov	arg01, #10
2fa30     04 11 BF FD | 	call	#__system___waitms
2fa34                 | '     }
2fa34                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fa34                 | '     _pinclear(PIN_SS);
2fa34                 | '     _pinclear(PIN_CLK);
2fa34                 | '     _pinclear(PIN_DI);
2fa34                 | '     _pinclear(PIN_DO);
2fa34                 | ' 
2fa34                 | '     _waitms(10);
2fa34                 | ' 
2fa34                 | '     return 0;
2fa34     00 FA 05 F6 | 	mov	result1, #0
2fa38                 | LR__4890
2fa38     A7 F0 03 F6 | 	mov	ptra, fp
2fa3c     B2 00 A0 FD | 	call	#popregs_
2fa40                 | _fatfs_cc_disk_deinitialize_ret
2fa40     2D 00 64 FD | 	ret
2fa44                 | 
2fa44                 | _fatfs_cc_gettimeofday
2fa44     04 4A 05 F6 | 	mov	COUNT_, #4
2fa48     A8 00 A0 FD | 	call	#pushregs_
2fa4c     09 1F 02 F6 | 	mov	local01, arg01
2fa50     C0 0C BF FD | 	call	#__system___getus
2fa54     FD 12 02 F6 | 	mov	arg01, result1
2fa58     02 00 00 FF 
2fa5c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fa60     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fa64     09 FB 01 F6 | 	mov	result1, arg01
2fa68     10 FB 81 F1 | 	sub	result1, local02
2fa6c     A1 07 00 FF 
2fa70     40 FA 15 FD | 	qdiv	result1, ##1000000
2fa74     02 00 00 FF 
2fa78     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fa7c     18 20 62 FD | 	getqx	local02
2fa80     A1 07 00 FF 
2fa84     40 FA 15 FD | 	qdiv	result1, ##1000000
2fa88     00 20 0E F2 | 	cmp	local02, #0 wz
2fa8c     19 22 62 FD | 	getqy	local03
2fa90     28 00 90 AD |  if_e	jmp	#LR__4900
2fa94     02 00 00 FF 
2fa98     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fa9c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2faa0     10 25 02 F1 | 	add	local04, local02
2faa4     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2faa8     11 13 82 F1 | 	sub	arg01, local03
2faac     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fab0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fab4     02 00 00 FF 
2fab8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fabc                 | LR__4900
2fabc     02 00 00 FF 
2fac0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fac4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fac8     02 00 00 FF 
2facc     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fad0     0F 25 62 FC | 	wrlong	local04, local01
2fad4     04 1E 06 F1 | 	add	local01, #4
2fad8     0F 23 62 FC | 	wrlong	local03, local01
2fadc                 | '         lastsec += secs;
2fadc                 | '         lastus = now - leftover;
2fadc                 | '     }
2fadc                 | '     tv->tv_sec = lastsec;
2fadc                 | '     tv->tv_usec = leftover;
2fadc                 | '     return 0;
2fadc     00 FA 05 F6 | 	mov	result1, #0
2fae0     A7 F0 03 F6 | 	mov	ptra, fp
2fae4     B2 00 A0 FD | 	call	#popregs_
2fae8                 | _fatfs_cc_gettimeofday_ret
2fae8     2D 00 64 FD | 	ret
2faec                 | 
2faec                 | _fatfs_cc__is_leap_year
2faec     09 FB 51 F6 | 	abs	result1, arg01 wc
2faf0     03 FA 05 F5 | 	and	result1, #3
2faf4     FD FA 89 F6 | 	negc	result1, result1 wz
2faf8     38 00 90 5D |  if_ne	jmp	#LR__4911
2fafc     09 FB 51 F6 | 	abs	result1, arg01 wc
2fb00     64 FA 15 FD | 	qdiv	result1, #100
2fb04     19 FA 61 FD | 	getqy	result1
2fb08     FD FA 89 F6 | 	negc	result1, result1 wz
2fb0c     1C 00 90 5D |  if_ne	jmp	#LR__4910
2fb10     09 FB 51 F6 | 	abs	result1, arg01 wc
2fb14     90 FB 15 FD | 	qdiv	result1, #400
2fb18                 | '       return (0 == y % 400);
2fb18     00 FA 05 F6 | 	mov	result1, #0
2fb1c     19 00 62 FD | 	getqy	_var01
2fb20     00 01 8A F6 | 	negc	_var01, _var01 wz
2fb24     01 FA 05 A6 |  if_e	mov	result1, #1
2fb28     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fb2c                 | LR__4910
2fb2c                 | '     return 1;
2fb2c     01 FA 05 F6 | 	mov	result1, #1
2fb30     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fb34                 | LR__4911
2fb34                 | '   }
2fb34                 | '   return 0;
2fb34     00 FA 05 F6 | 	mov	result1, #0
2fb38                 | _fatfs_cc__is_leap_year_ret
2fb38     2D 00 64 FD | 	ret
2fb3c                 | 
2fb3c                 | _fatfs_cc___tzoffset
2fb3c     09 01 0A F6 | 	mov	_var01, arg01 wz
2fb40     FF FF FF FF 
2fb44     0A FF 6B FC | 	wrlong	##-1, arg02
2fb48     01 02 06 F6 | 	mov	_var02, #1
2fb4c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fb50                 | '                 return 0;
2fb50     00 FA 05 A6 |  if_e	mov	result1, #0
2fb54     94 02 90 AD |  if_e	jmp	#LR__4937
2fb58     0A 01 68 FC | 	wrlong	#0, arg02
2fb5c     02 00 00 FF 
2fb60     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fb64     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fb68                 | ' 
2fb68                 | '        *hasdst = 0;
2fb68                 | ' 
2fb68                 | ' 	n = stdname;
2fb68                 | '         while (*s && isalpha(*s)) {
2fb68     02 00 00 FF 
2fb6c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fb70     97 28 48 FB | 	callpa	#(@LR__4921-@LR__4920)>>2,fcache_load_ptr_
2fb74                 | LR__4920
2fb74     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fb78     48 00 90 AD |  if_e	jmp	#LR__4922
2fb7c     00 13 C2 FA | 	rdbyte	arg01, _var01
2fb80                 | ' {
2fb80                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fb80     80 12 36 F3 | 	fle	arg01, #128 wc
2fb84                 | '     return __ctype[c];
2fb84     02 00 00 FF 
2fb88     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fb8c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fb90     09 FB C1 FA | 	rdbyte	result1, arg01
2fb94     02 00 00 FF 
2fb98     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fb9c     0C FA CD F7 | 	test	result1, #12 wz
2fba0     20 00 90 AD |  if_e	jmp	#LR__4922
2fba4     00 09 02 F6 | 	mov	_var05, _var01
2fba8     00 0B 02 F6 | 	mov	_var06, _var01
2fbac     01 0A 06 F1 | 	add	_var06, #1
2fbb0     04 0D C2 FA | 	rdbyte	_var07, _var05
2fbb4     05 01 02 F6 | 	mov	_var01, _var06
2fbb8     03 0D 42 FC | 	wrbyte	_var07, _var04
2fbbc     01 06 06 F1 | 	add	_var04, #1
2fbc0     B0 FF 9F FD | 	jmp	#LR__4920
2fbc4                 | LR__4921
2fbc4                 | LR__4922
2fbc4     03 01 48 FC | 	wrbyte	#0, _var04
2fbc8     00 0E 06 F6 | 	mov	_var08, #0
2fbcc     00 05 C2 FA | 	rdbyte	_var03, _var01
2fbd0     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fbd4     01 02 66 A6 |  if_e	neg	_var02, #1
2fbd8     01 00 06 A1 |  if_e	add	_var01, #1
2fbdc     97 28 48 FB | 	callpa	#(@LR__4924-@LR__4923)>>2,fcache_load_ptr_
2fbe0                 | '                 sgn = -1;
2fbe0                 | '                 s++;
2fbe0                 | '         }
2fbe0                 | '         while (isdigit(*s)) {
2fbe0                 | LR__4923
2fbe0     00 13 C2 FA | 	rdbyte	arg01, _var01
2fbe4                 | ' {
2fbe4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fbe4     80 12 36 F3 | 	fle	arg01, #128 wc
2fbe8                 | '     return __ctype[c];
2fbe8     02 00 00 FF 
2fbec     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fbf0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fbf4     09 FB C1 FA | 	rdbyte	result1, arg01
2fbf8     02 00 00 FF 
2fbfc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fc00     02 FA CD F7 | 	test	result1, #2 wz
2fc04     28 00 90 AD |  if_e	jmp	#LR__4925
2fc08     07 05 02 F6 | 	mov	_var03, _var08
2fc0c     02 04 66 F0 | 	shl	_var03, #2
2fc10     07 05 02 F1 | 	add	_var03, _var08
2fc14     01 04 66 F0 | 	shl	_var03, #1
2fc18     00 09 C2 FA | 	rdbyte	_var05, _var01
2fc1c     30 08 86 F1 | 	sub	_var05, #48
2fc20     04 05 02 F1 | 	add	_var03, _var05
2fc24     02 0F 02 F6 | 	mov	_var08, _var03
2fc28     01 00 06 F1 | 	add	_var01, #1
2fc2c     B0 FF 9F FD | 	jmp	#LR__4923
2fc30                 | LR__4924
2fc30                 | LR__4925
2fc30     07 00 00 FF 
2fc34     10 0E 06 FD | 	qmul	_var08, ##3600
2fc38     00 05 C2 FA | 	rdbyte	_var03, _var01
2fc3c     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fc40     18 10 62 FD | 	getqx	_var09
2fc44     70 00 90 5D |  if_ne	jmp	#LR__4929
2fc48     00 0E 06 F6 | 	mov	_var08, #0
2fc4c     01 00 06 F1 | 	add	_var01, #1
2fc50     97 28 48 FB | 	callpa	#(@LR__4927-@LR__4926)>>2,fcache_load_ptr_
2fc54                 | '                 x = 0;
2fc54                 | '                 s++;
2fc54                 | '                 while (isdigit(*s)) {
2fc54                 | LR__4926
2fc54     00 13 C2 FA | 	rdbyte	arg01, _var01
2fc58                 | ' {
2fc58                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fc58     80 12 36 F3 | 	fle	arg01, #128 wc
2fc5c                 | '     return __ctype[c];
2fc5c     02 00 00 FF 
2fc60     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fc64     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fc68     09 FB C1 FA | 	rdbyte	result1, arg01
2fc6c     02 00 00 FF 
2fc70     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fc74     02 FA CD F7 | 	test	result1, #2 wz
2fc78     28 00 90 AD |  if_e	jmp	#LR__4928
2fc7c     07 05 02 F6 | 	mov	_var03, _var08
2fc80     02 04 66 F0 | 	shl	_var03, #2
2fc84     07 05 02 F1 | 	add	_var03, _var08
2fc88     01 04 66 F0 | 	shl	_var03, #1
2fc8c     00 09 C2 FA | 	rdbyte	_var05, _var01
2fc90     30 08 86 F1 | 	sub	_var05, #48
2fc94     04 05 02 F1 | 	add	_var03, _var05
2fc98     02 0F 02 F6 | 	mov	_var08, _var03
2fc9c     01 00 06 F1 | 	add	_var01, #1
2fca0     B0 FF 9F FD | 	jmp	#LR__4926
2fca4                 | LR__4927
2fca4                 | LR__4928
2fca4     07 0D 02 F6 | 	mov	_var07, _var08
2fca8     04 0C 66 F0 | 	shl	_var07, #4
2fcac     07 0D 82 F1 | 	sub	_var07, _var08
2fcb0     02 0C 66 F0 | 	shl	_var07, #2
2fcb4     06 11 02 F1 | 	add	_var09, _var07
2fcb8                 | LR__4929
2fcb8     02 00 00 FF 
2fcbc     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fcc0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fcc4     00 13 C2 FA | 	rdbyte	arg01, _var01
2fcc8                 | ' {
2fcc8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fcc8     80 12 36 F3 | 	fle	arg01, #128 wc
2fccc                 | '     return __ctype[c];
2fccc     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fcd0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fcd4     09 FB C1 FA | 	rdbyte	result1, arg01
2fcd8     02 00 00 FF 
2fcdc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fce0     0C FA CD F7 | 	test	result1, #12 wz
2fce4     50 00 90 AD |  if_e	jmp	#LR__4932
2fce8     0A 03 68 FC | 	wrlong	#1, arg02
2fcec                 | '                 *hasdst = 1;
2fcec                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fcec                 | LR__4930
2fcec     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fcf0     44 00 90 AD |  if_e	jmp	#LR__4931
2fcf4     00 13 C2 FA | 	rdbyte	arg01, _var01
2fcf8                 | ' {
2fcf8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fcf8     80 12 36 F3 | 	fle	arg01, #128 wc
2fcfc                 | '     return __ctype[c];
2fcfc     02 00 00 FF 
2fd00     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fd04     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd08     09 FB C1 FA | 	rdbyte	result1, arg01
2fd0c     02 00 00 FF 
2fd10     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd14     0C FA CD F7 | 	test	result1, #12 wz
2fd18     1C 00 90 AD |  if_e	jmp	#LR__4931
2fd1c     00 0B 02 F6 | 	mov	_var06, _var01
2fd20     01 0A 06 F1 | 	add	_var06, #1
2fd24     00 0D C2 FA | 	rdbyte	_var07, _var01
2fd28     05 01 02 F6 | 	mov	_var01, _var06
2fd2c     03 0D 42 FC | 	wrbyte	_var07, _var04
2fd30     01 06 06 F1 | 	add	_var04, #1
2fd34     B4 FF 9F FD | 	jmp	#LR__4930
2fd38                 | LR__4931
2fd38                 | LR__4932
2fd38     03 01 48 FC | 	wrbyte	#0, _var04
2fd3c     02 00 00 FF 
2fd40     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd44     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fd48     02 00 00 FF 
2fd4c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fd50     20 00 90 AD |  if_e	jmp	#LR__4933
2fd54     02 00 00 FF 
2fd58     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd5c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fd60     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2fd64     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fd68     02 00 00 FF 
2fd6c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fd70     1C 00 90 FD | 	jmp	#LR__4934
2fd74                 | LR__4933
2fd74     02 00 00 FF 
2fd78     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fd7c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fd80     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2fd84     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fd88     02 00 00 FF 
2fd8c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fd90                 | LR__4934
2fd90     02 00 00 FF 
2fd94     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fd98     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fd9c     02 00 00 FF 
2fda0     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2fda4     20 00 90 AD |  if_e	jmp	#LR__4935
2fda8     02 00 00 FF 
2fdac     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fdb0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fdb4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2fdb8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fdbc     02 00 00 FF 
2fdc0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fdc4     1C 00 90 FD | 	jmp	#LR__4936
2fdc8                 | LR__4935
2fdc8     02 00 00 FF 
2fdcc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fdd0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fdd4     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2fdd8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fddc     02 00 00 FF 
2fde0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fde4                 | LR__4936
2fde4     08 03 02 FD | 	qmul	_var02, _var09
2fde8                 | ' 		_tzname[1] = stdname;
2fde8                 | ' 
2fde8                 | '         return sgn * off;
2fde8     18 FA 61 FD | 	getqx	result1
2fdec                 | LR__4937
2fdec                 | _fatfs_cc___tzoffset_ret
2fdec     2D 00 64 FD | 	ret
2fdf0                 | 
2fdf0                 | _fatfs_cc___indst
2fdf0     10 12 06 F1 | 	add	arg01, #16
2fdf4     09 01 02 FB | 	rdlong	_var01, arg01
2fdf8     10 12 86 F1 | 	sub	arg01, #16
2fdfc     02 00 0E F2 | 	cmp	_var01, #2 wz
2fe00     30 00 90 5D |  if_ne	jmp	#LR__4940
2fe04     07 00 06 F6 | 	mov	_var01, #7
2fe08     18 12 06 F1 | 	add	arg01, #24
2fe0c     09 03 02 FB | 	rdlong	_var02, arg01
2fe10     01 01 02 F1 | 	add	_var01, _var02
2fe14     0C 12 86 F1 | 	sub	arg01, #12
2fe18     09 05 02 FB | 	rdlong	_var03, arg01
2fe1c     02 01 82 F1 | 	sub	_var01, _var03
2fe20     00 00 56 F2 | 	cmps	_var01, #0 wc
2fe24                 | '                         return 1;
2fe24     01 FA 05 C6 |  if_b	mov	result1, #1
2fe28     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fe2c                 | '                 return 0;
2fe2c     00 FA 05 F6 | 	mov	result1, #0
2fe30     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fe34                 | LR__4940
2fe34     10 12 06 F1 | 	add	arg01, #16
2fe38     09 01 02 FB | 	rdlong	_var01, arg01
2fe3c     10 12 86 F1 | 	sub	arg01, #16
2fe40     0A 00 0E F2 | 	cmp	_var01, #10 wz
2fe44     28 00 90 5D |  if_ne	jmp	#LR__4941
2fe48     18 12 06 F1 | 	add	arg01, #24
2fe4c     09 01 02 FB | 	rdlong	_var01, arg01
2fe50     0C 12 86 F1 | 	sub	arg01, #12
2fe54     09 07 02 FB | 	rdlong	_var04, arg01
2fe58     03 01 82 F1 | 	sub	_var01, _var04
2fe5c     00 00 56 F2 | 	cmps	_var01, #0 wc
2fe60                 | '                         return 0;
2fe60     00 FA 05 C6 |  if_b	mov	result1, #0
2fe64     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2fe68                 | '                 return 1;
2fe68     01 FA 05 F6 | 	mov	result1, #1
2fe6c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fe70                 | LR__4941
2fe70                 | '         }
2fe70                 | ' 
2fe70                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2fe70     00 00 06 F6 | 	mov	_var01, #0
2fe74     10 12 06 F1 | 	add	arg01, #16
2fe78     09 03 02 FB | 	rdlong	_var02, arg01
2fe7c     10 12 86 F1 | 	sub	arg01, #16
2fe80     03 02 56 F2 | 	cmps	_var02, #3 wc
2fe84     10 00 90 CD |  if_b	jmp	#LR__4942
2fe88     10 12 06 F1 | 	add	arg01, #16
2fe8c     09 05 02 FB | 	rdlong	_var03, arg01
2fe90     0A 04 56 F2 | 	cmps	_var03, #10 wc
2fe94     01 00 06 C6 |  if_b	mov	_var01, #1
2fe98                 | LR__4942
2fe98     00 FB 01 F6 | 	mov	result1, _var01
2fe9c                 | _fatfs_cc___indst_ret
2fe9c     2D 00 64 FD | 	ret
2fea0                 | 
2fea0                 | ' 	
2fea0                 | ' 	FUNCTION pfunc(c as integer) as integer
2fea0                 | ___strs_cl_pfunc
2fea0                 | ' 		if (i < 16) then
2fea0     04 E4 05 F1 | 	add	objptr, #4
2fea4     F2 FA 01 FB | 	rdlong	result1, objptr
2fea8     04 E4 85 F1 | 	sub	objptr, #4
2feac     10 FA 55 F2 | 	cmps	result1, #16 wc
2feb0     2C 00 90 3D |  if_ae	jmp	#LR__4950
2feb4     F2 FA 01 FB | 	rdlong	result1, objptr
2feb8     04 E4 05 F1 | 	add	objptr, #4
2febc     F2 00 02 FB | 	rdlong	_var01, objptr
2fec0     FD 00 02 F1 | 	add	_var01, result1
2fec4     00 13 42 FC | 	wrbyte	arg01, _var01
2fec8     F2 FA 01 FB | 	rdlong	result1, objptr
2fecc     01 FA 05 F1 | 	add	result1, #1
2fed0     F2 FA 61 FC | 	wrlong	result1, objptr
2fed4     04 E4 85 F1 | 	sub	objptr, #4
2fed8                 | ' 			p(i) = c
2fed8                 | ' 			i = i+1
2fed8                 | ' 			return 1
2fed8     01 FA 05 F6 | 	mov	result1, #1
2fedc     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2fee0                 | LR__4950
2fee0                 | ' 			return -1
2fee0     01 FA 65 F6 | 	neg	result1, #1
2fee4                 | ___strs_cl_pfunc_ret
2fee4     2D 00 64 FD | 	ret
2fee8                 | 
2fee8                 | __struct__s_vfs_file_t_putchar
2fee8     04 4A 05 F6 | 	mov	COUNT_, #4
2feec     A8 00 A0 FD | 	call	#pushregs_
2fef0     1C E4 05 F1 | 	add	objptr, #28
2fef4     F2 1E 0A FB | 	rdlong	local01, objptr wz
2fef8     1C E4 85 F1 | 	sub	objptr, #28
2fefc     00 FA 05 A6 |  if_e	mov	result1, #0
2ff00     48 00 90 AD |  if_e	jmp	#LR__4960
2ff04     1C E4 05 F1 | 	add	objptr, #28
2ff08     F2 20 02 FB | 	rdlong	local02, objptr
2ff0c     10 23 02 F6 | 	mov	local03, local02
2ff10     1C E4 85 F1 | 	sub	objptr, #28
2ff14     13 22 46 F7 | 	zerox	local03, #19
2ff18     14 20 46 F0 | 	shr	local02, #20
2ff1c     02 20 66 F0 | 	shl	local02, #2
2ff20     ED 20 02 F1 | 	add	local02, __methods__
2ff24     10 21 02 FB | 	rdlong	local02, local02
2ff28     F2 14 02 F6 | 	mov	arg02, objptr
2ff2c     F2 24 02 F6 | 	mov	local04, objptr
2ff30     11 E5 01 F6 | 	mov	objptr, local03
2ff34     2D 20 62 FD | 	call	local02
2ff38     12 E5 01 F6 | 	mov	objptr, local04
2ff3c                 | '     return (i < 0) ? 0 : 1;
2ff3c     00 FA 55 F2 | 	cmps	result1, #0 wc
2ff40     00 1E 06 C6 |  if_b	mov	local01, #0
2ff44     01 1E 06 36 |  if_ae	mov	local01, #1
2ff48     0F FB 01 F6 | 	mov	result1, local01
2ff4c                 | LR__4960
2ff4c     A7 F0 03 F6 | 	mov	ptra, fp
2ff50     B2 00 A0 FD | 	call	#popregs_
2ff54                 | __struct__s_vfs_file_t_putchar_ret
2ff54     2D 00 64 FD | 	ret
2ff58                 | 
2ff58                 | __struct__s_vfs_file_t_getchar
2ff58     03 4A 05 F6 | 	mov	COUNT_, #3
2ff5c     A8 00 A0 FD | 	call	#pushregs_
2ff60     20 E4 05 F1 | 	add	objptr, #32
2ff64     F2 12 0A FB | 	rdlong	arg01, objptr wz
2ff68     20 E4 85 F1 | 	sub	objptr, #32
2ff6c     01 FA 65 A6 |  if_e	neg	result1, #1
2ff70     38 00 90 AD |  if_e	jmp	#LR__4970
2ff74                 | '     return getcf(__this);
2ff74     20 E4 05 F1 | 	add	objptr, #32
2ff78     F2 1E 02 FB | 	rdlong	local01, objptr
2ff7c     0F 21 02 F6 | 	mov	local02, local01
2ff80     20 E4 85 F1 | 	sub	objptr, #32
2ff84     13 20 46 F7 | 	zerox	local02, #19
2ff88     14 1E 46 F0 | 	shr	local01, #20
2ff8c     02 1E 66 F0 | 	shl	local01, #2
2ff90     ED 1E 02 F1 | 	add	local01, __methods__
2ff94     0F 1F 02 FB | 	rdlong	local01, local01
2ff98     F2 12 02 F6 | 	mov	arg01, objptr
2ff9c     F2 22 02 F6 | 	mov	local03, objptr
2ffa0     10 E5 01 F6 | 	mov	objptr, local02
2ffa4     2D 1E 62 FD | 	call	local01
2ffa8     11 E5 01 F6 | 	mov	objptr, local03
2ffac                 | LR__4970
2ffac     A7 F0 03 F6 | 	mov	ptra, fp
2ffb0     B2 00 A0 FD | 	call	#popregs_
2ffb4                 | __struct__s_vfs_file_t_getchar_ret
2ffb4     2D 00 64 FD | 	ret
2ffb8                 | 
2ffb8                 | __struct___bas_wrap_sender_tx
2ffb8     03 4A 05 F6 | 	mov	COUNT_, #3
2ffbc     A8 00 A0 FD | 	call	#pushregs_
2ffc0     F2 1E 02 FB | 	rdlong	local01, objptr
2ffc4     0F 21 02 F6 | 	mov	local02, local01
2ffc8     13 1E 46 F7 | 	zerox	local01, #19
2ffcc     14 20 46 F0 | 	shr	local02, #20
2ffd0     02 20 66 F0 | 	shl	local02, #2
2ffd4     ED 20 02 F1 | 	add	local02, __methods__
2ffd8     10 21 02 FB | 	rdlong	local02, local02
2ffdc     F2 22 02 F6 | 	mov	local03, objptr
2ffe0     0F E5 01 F6 | 	mov	objptr, local01
2ffe4     2D 20 62 FD | 	call	local02
2ffe8     11 E5 01 F6 | 	mov	objptr, local03
2ffec     01 FA 05 F6 | 	mov	result1, #1
2fff0     A7 F0 03 F6 | 	mov	ptra, fp
2fff4     B2 00 A0 FD | 	call	#popregs_
2fff8                 | __struct___bas_wrap_sender_tx_ret
2fff8     2D 00 64 FD | 	ret
2fffc                 | 
2fffc                 | __struct___bas_wrap_sender_rx
2fffc     03 4A 05 F6 | 	mov	COUNT_, #3
30000     A8 00 A0 FD | 	call	#pushregs_
30004     04 E4 05 F1 | 	add	objptr, #4
30008     F2 1E 02 FB | 	rdlong	local01, objptr
3000c     0F 21 02 F6 | 	mov	local02, local01
30010     04 E4 85 F1 | 	sub	objptr, #4
30014     13 20 46 F7 | 	zerox	local02, #19
30018     14 1E 46 F0 | 	shr	local01, #20
3001c     02 1E 66 F0 | 	shl	local01, #2
30020     ED 1E 02 F1 | 	add	local01, __methods__
30024     0F 1F 02 FB | 	rdlong	local01, local01
30028     F2 22 02 F6 | 	mov	local03, objptr
3002c     10 E5 01 F6 | 	mov	objptr, local02
30030     2D 1E 62 FD | 	call	local01
30034     11 E5 01 F6 | 	mov	objptr, local03
30038     A7 F0 03 F6 | 	mov	ptra, fp
3003c     B2 00 A0 FD | 	call	#popregs_
30040                 | __struct___bas_wrap_sender_rx_ret
30040     2D 00 64 FD | 	ret
30044                 | 
30044                 | __struct___bas_wrap_sender_close
30044     03 4A 05 F6 | 	mov	COUNT_, #3
30048     A8 00 A0 FD | 	call	#pushregs_
3004c     08 E4 05 F1 | 	add	objptr, #8
30050     F2 1E 02 FB | 	rdlong	local01, objptr
30054     0F 21 02 F6 | 	mov	local02, local01
30058     08 E4 85 F1 | 	sub	objptr, #8
3005c     13 20 46 F7 | 	zerox	local02, #19
30060     14 1E 46 F0 | 	shr	local01, #20
30064     02 1E 66 F0 | 	shl	local01, #2
30068     ED 1E 02 F1 | 	add	local01, __methods__
3006c     0F 1F 02 FB | 	rdlong	local01, local01
30070     F2 22 02 F6 | 	mov	local03, objptr
30074     10 E5 01 F6 | 	mov	objptr, local02
30078     2D 1E 62 FD | 	call	local01
3007c     11 E5 01 F6 | 	mov	objptr, local03
30080     A7 F0 03 F6 | 	mov	ptra, fp
30084     B2 00 A0 FD | 	call	#popregs_
30088                 | __struct___bas_wrap_sender_close_ret
30088     2D 00 64 FD | 	ret
3008c                 | 
3008c                 | LR__4980
3008c     2F          | 	byte	"/"
3008d     00          | 	byte	0
3008e                 | LR__4981
3008e     69 6E 66    | 	byte	"inf"
30091     00          | 	byte	0
30092                 | LR__4982
30092     6E 61 6E    | 	byte	"nan"
30095     00          | 	byte	0
30096                 | LR__4983
30096                 | 	byte	
30096     00          | 	byte	0
30097                 | LR__4984
30097                 | 	byte	
30097     00          | 	byte	0
30098                 | LR__4985
30098                 | 	byte	
30098     00          | 	byte	0
30099                 | LR__4986
30099                 | 	byte	
30099     00          | 	byte	0
3009a                 | LR__4987
3009a                 | 	byte	
3009a     00          | 	byte	0
3009b                 | LR__4988
3009b                 | 	byte	
3009b     00          | 	byte	0
3009c                 | LR__4989
3009c                 | 	byte	
3009c     00          | 	byte	0
3009d                 | LR__4990
3009d                 | 	byte	
3009d     00          | 	byte	0
3009e                 | LR__4991
3009e     00          | 	byte	0
3009f     00          | 	byte	0
300a0                 | LR__4992
300a0     00          | 	byte	0
300a1     00          | 	byte	0
300a2                 | LR__4993
300a2     00          | 	byte	0
300a3     00          | 	byte	0
300a4                 | LR__4994
300a4     20 21 21 21 
300a8     20 63 6F 72 
300ac     72 75 70 74 
300b0     65 64 20 68 
300b4     65 61 70 3F 
300b8     3F 3F 20 21 
300bc     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
300bf     00          | 	byte	0
300c0                 | LR__4995
300c0     20 21 21 21 
300c4     20 6F 75 74 
300c8     20 6F 66 20 
300cc     68 65 61 70 
300d0     20 6D 65 6D 
300d4     6F 72 79 20 
300d8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
300dc     00          | 	byte	0
300dd                 | LR__4996
300dd     20 21 21 21 
300e1     20 63 6F 72 
300e5     72 75 70 74 
300e9     65 64 20 68 
300ed     65 61 70 20 
300f1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
300f5     00          | 	byte	0
300f6                 | LR__4997
300f6     00          | 	byte	0
300f7     00          | 	byte	0
300f8                 | LR__4998
300f8     2E          | 	byte	"."
300f9     00          | 	byte	0
300fa                 | LR__4999
300fa     00          | 	byte	0
300fb     00          | 	byte	0
300fc                 | LR__5000
300fc     00          | 	byte	0
300fd     00          | 	byte	0
300fe                 | LR__5001
300fe     00          | 	byte	0
300ff     00          | 	byte	0
30100                 | LR__5002
30100     2A 3A 3C 3E 
30104     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
30108     00          | 	byte	0
30109                 | LR__5003
30109     2B 2C 3B 3D 
3010d     5B 5D       | 	byte	"+,;=[]"
3010f     00          | 	byte	0
30110                 | LR__5004
30110     46 41 54 33 
30114     32 20 20 20 | 	byte	"FAT32   "
30118     00          | 	byte	0
30119                 | LR__5005
30119     54 5A       | 	byte	"TZ"
3011b     00          | 	byte	0
3011c                 | LR__5006
3011c     00          | 	byte	0
3011d     00          | 	byte	0
3011e                 | LR__5007
3011e                 | 	byte	
3011e     00          | 	byte	0
3011f                 | LR__5008
3011f                 | 	byte	
3011f     00          | 	byte	0
30120                 | LR__5009
30120                 | 	byte	
30120     00          | 	byte	0
30121                 | LR__5010
30121                 | 	byte	
30121     00          | 	byte	0
30122                 | LR__5011
30122     22          | 	byte	34
30123     00          | 	byte	0
30124                 | LR__5012
30124     22          | 	byte	34
30125     00          | 	byte	0
30126                 | LR__5013
30126     3A          | 	byte	":"
30127     00          | 	byte	0
30128                 | LR__5014
30128                 | 	byte	
30128     00          | 	byte	0
30129                 | LR__5015
30129                 | 	byte	
30129     00          | 	byte	0
3012a                 | LR__5016
3012a                 | 	byte	
3012a     00          | 	byte	0
3012b                 | LR__5017
3012b                 | 	byte	
3012b     00          | 	byte	0
3012c                 | LR__5018
3012c                 | 	byte	
3012c     00          | 	byte	0
3012d                 | LR__5019
3012d                 | 	byte	
3012d     00          | 	byte	0
3012e                 | LR__5020
3012e                 | 	byte	
3012e     00          | 	byte	0
3012f                 | LR__5021
3012f     30          | 	byte	"0"
30130     00          | 	byte	0
30131                 | LR__5022
30131     22          | 	byte	34
30132     00          | 	byte	0
30133                 | LR__5023
30133     22          | 	byte	34
30134     00          | 	byte	0
30135                 | LR__5024
30135     22          | 	byte	34
30136     00          | 	byte	0
30137                 | LR__5025
30137     22          | 	byte	34
30138     00          | 	byte	0
30139                 | LR__5026
30139     22          | 	byte	34
3013a     00          | 	byte	0
3013b                 | LR__5027
3013b     3E          | 	byte	">"
3013c     00          | 	byte	0
3013d                 | LR__5028
3013d     3C          | 	byte	"<"
3013e     00          | 	byte	0
3013f                 | LR__5029
3013f     2B          | 	byte	"+"
30140     00          | 	byte	0
30141                 | LR__5030
30141     2D          | 	byte	"-"
30142     00          | 	byte	0
30143                 | LR__5031
30143     2A          | 	byte	"*"
30144     00          | 	byte	0
30145                 | LR__5032
30145     2F          | 	byte	"/"
30146     00          | 	byte	0
30147                 | LR__5033
30147     5E          | 	byte	"^"
30148     00          | 	byte	0
30149                 | LR__5034
30149     3D          | 	byte	"="
3014a     00          | 	byte	0
3014b                 | LR__5035
3014b     2B          | 	byte	"+"
3014c     00          | 	byte	0
3014d                 | LR__5036
3014d     2B          | 	byte	"+"
3014e     00          | 	byte	0
3014f                 | LR__5037
3014f     2D          | 	byte	"-"
30150     00          | 	byte	0
30151                 | LR__5038
30151     2D          | 	byte	"-"
30152     00          | 	byte	0
30153                 | LR__5039
30153     3C          | 	byte	"<"
30154     00          | 	byte	0
30155                 | LR__5040
30155     3E          | 	byte	">"
30156     00          | 	byte	0
30157                 | LR__5041
30157     22          | 	byte	34
30158     00          | 	byte	0
30159                 | LR__5042
30159     22          | 	byte	34
3015a     00          | 	byte	0
3015b                 | LR__5043
3015b     65 6C 73 65 | 	byte	"else"
3015f     00          | 	byte	0
30160                 | LR__5044
30160     74 68 65 6E | 	byte	"then"
30164     00          | 	byte	0
30165                 | LR__5045
30165     2E          | 	byte	"."
30166     00          | 	byte	0
30167                 | LR__5046
30167     3F          | 	byte	"?"
30168     00          | 	byte	0
30169                 | LR__5047
30169     3F          | 	byte	"?"
3016a     00          | 	byte	0
3016b                 | LR__5048
3016b     6D 6F 75 73 
3016f     65          | 	byte	"mouse"
30170     00          | 	byte	0
30171                 | LR__5049
30171     63 75 72 73 
30175     6F 72       | 	byte	"cursor"
30177     00          | 	byte	0
30178                 | LR__5050
30178     63 6C 69 63 
3017c     6B          | 	byte	"click"
3017d     00          | 	byte	0
3017e                 | LR__5051
3017e     6F 6E       | 	byte	"on"
30180     00          | 	byte	0
30181                 | LR__5052
30181     31          | 	byte	"1"
30182     00          | 	byte	0
30183                 | LR__5053
30183     6F 66 66    | 	byte	"off"
30186     00          | 	byte	0
30187                 | LR__5054
30187     30          | 	byte	"0"
30188     00          | 	byte	0
30189                 | LR__5055
30189     6D 6F 64 65 | 	byte	"mode"
3018d     00          | 	byte	0
3018e                 | LR__5056
3018e     6D 2E       | 	byte	"m."
30190     00          | 	byte	0
30191                 | LR__5057
30191     61 74 61 72 
30195     69          | 	byte	"atari"
30196     00          | 	byte	0
30197                 | LR__5058
30197     30          | 	byte	"0"
30198     00          | 	byte	0
30199                 | LR__5059
30199     70 63 5F 61 
3019d     6D 62 65 72 | 	byte	"pc_amber"
301a1     00          | 	byte	0
301a2                 | LR__5060
301a2     31          | 	byte	"1"
301a3     00          | 	byte	0
301a4                 | LR__5061
301a4     70 63 5F 67 
301a8     72 65 65 6E | 	byte	"pc_green"
301ac     00          | 	byte	0
301ad                 | LR__5062
301ad     32          | 	byte	"2"
301ae     00          | 	byte	0
301af                 | LR__5063
301af     70 63 5F 77 
301b3     68 69 74 65 | 	byte	"pc_white"
301b7     00          | 	byte	0
301b8                 | LR__5064
301b8     33          | 	byte	"3"
301b9     00          | 	byte	0
301ba                 | LR__5065
301ba     73 74       | 	byte	"st"
301bc     00          | 	byte	0
301bd                 | LR__5066
301bd     34          | 	byte	"4"
301be     00          | 	byte	0
301bf                 | LR__5067
301bf                 | 	byte	
301bf     00          | 	byte	0
301c0                 | LR__5068
301c0     6C 6F 61 64 | 	byte	"load"
301c4     00          | 	byte	0
301c5                 | LR__5069
301c5     73 61 76 65 | 	byte	"save"
301c9     00          | 	byte	0
301ca                 | LR__5070
301ca     62 72 75 6E | 	byte	"brun"
301ce     00          | 	byte	0
301cf                 | LR__5071
301cf     72 75 6E    | 	byte	"run"
301d2     00          | 	byte	0
301d3                 | LR__5072
301d3     6C 6F 2E    | 	byte	"lo."
301d6     00          | 	byte	0
301d7                 | LR__5073
301d7     73 2E       | 	byte	"s."
301d9     00          | 	byte	0
301da                 | LR__5074
301da     62 72 2E    | 	byte	"br."
301dd     00          | 	byte	0
301de                 | LR__5075
301de     65 6E 74 65 
301e2     72          | 	byte	"enter"
301e3     00          | 	byte	0
301e4                 | LR__5076
301e4     65 2E       | 	byte	"e."
301e6     00          | 	byte	0
301e7                 | LR__5077
301e7                 | 	byte	
301e7     00          | 	byte	0
301e8                 | LR__5078
301e8                 | 	byte	
301e8     00          | 	byte	0
301e9                 | LR__5079
301e9                 | 	byte	
301e9     00          | 	byte	0
301ea                 | LR__5080
301ea                 | 	byte	
301ea     00          | 	byte	0
301eb                 | LR__5081
301eb                 | 	byte	
301eb     00          | 	byte	0
301ec                 | LR__5082
301ec     52 65 61 64 
301f0     79          | 	byte	"Ready"
301f1     00          | 	byte	0
301f2                 | LR__5083
301f2     2B          | 	byte	"+"
301f3     00          | 	byte	0
301f4                 | LR__5084
301f4     2D          | 	byte	"-"
301f5     00          | 	byte	0
301f6                 | LR__5085
301f6     6F 72       | 	byte	"or"
301f8     00          | 	byte	0
301f9                 | LR__5086
301f9     78 6F 72    | 	byte	"xor"
301fc     00          | 	byte	0
301fd                 | LR__5087
301fd     2A          | 	byte	"*"
301fe     00          | 	byte	0
301ff                 | LR__5088
301ff     2F          | 	byte	"/"
30200     00          | 	byte	0
30201                 | LR__5089
30201     61 6E 64    | 	byte	"and"
30204     00          | 	byte	0
30205                 | LR__5090
30205     64 69 76    | 	byte	"div"
30208     00          | 	byte	0
30209                 | LR__5091
30209     6D 6F 64    | 	byte	"mod"
3020c     00          | 	byte	0
3020d                 | LR__5092
3020d     73 68 6C    | 	byte	"shl"
30210     00          | 	byte	0
30211                 | LR__5093
30211     73 68 72    | 	byte	"shr"
30214     00          | 	byte	0
30215                 | LR__5094
30215     5E          | 	byte	"^"
30216     00          | 	byte	0
30217                 | LR__5095
30217     6E 6F 74    | 	byte	"not"
3021a     00          | 	byte	0
3021b                 | LR__5096
3021b     40          | 	byte	"@"
3021c     00          | 	byte	0
3021d                 | LR__5097
3021d     3D          | 	byte	"="
3021e     00          | 	byte	0
3021f                 | LR__5098
3021f     3E 3D       | 	byte	">="
30221     00          | 	byte	0
30222                 | LR__5099
30222     3C 3D       | 	byte	"<="
30224     00          | 	byte	0
30225                 | LR__5100
30225     3C          | 	byte	"<"
30226     00          | 	byte	0
30227                 | LR__5101
30227     3E          | 	byte	">"
30228     00          | 	byte	0
30229                 | LR__5102
30229     3C 3E       | 	byte	"<>"
3022b     00          | 	byte	0
3022c                 | LR__5103
3022c     2B 2B       | 	byte	"++"
3022e     00          | 	byte	0
3022f                 | LR__5104
3022f     2D 2D       | 	byte	"--"
30231     00          | 	byte	0
30232                 | LR__5105
30232     23          | 	byte	"#"
30233     00          | 	byte	0
30234                 | LR__5106
30234     30          | 	byte	"0"
30235     00          | 	byte	0
30236                 | LR__5107
30236     39          | 	byte	"9"
30237     00          | 	byte	0
30238                 | LR__5108
30238     23 72 65 61 
3023c     64          | 	byte	"#read"
3023d     00          | 	byte	0
3023e                 | LR__5109
3023e     23 77 72 69 
30242     74 65       | 	byte	"#write"
30244     00          | 	byte	0
30245                 | LR__5110
30245     23 61 70 70 
30249     65 6E 64    | 	byte	"#append"
3024c     00          | 	byte	0
3024d                 | LR__5111
3024d     23          | 	byte	"#"
3024e     00          | 	byte	0
3024f                 | LR__5112
3024f     23          | 	byte	"#"
30250     00          | 	byte	0
30251                 | LR__5113
30251     2D          | 	byte	"-"
30252     00          | 	byte	0
30253                 | LR__5114
30253     30          | 	byte	"0"
30254     00          | 	byte	0
30255                 | LR__5115
30255     63          | 	byte	"c"
30256     00          | 	byte	0
30257                 | LR__5116
30257     63 23       | 	byte	"c#"
30259     00          | 	byte	0
3025a                 | LR__5117
3025a     64          | 	byte	"d"
3025b     00          | 	byte	0
3025c                 | LR__5118
3025c     64 23       | 	byte	"d#"
3025e     00          | 	byte	0
3025f                 | LR__5119
3025f     65          | 	byte	"e"
30260     00          | 	byte	0
30261                 | LR__5120
30261     66          | 	byte	"f"
30262     00          | 	byte	0
30263                 | LR__5121
30263     66 23       | 	byte	"f#"
30265     00          | 	byte	0
30266                 | LR__5122
30266     67          | 	byte	"g"
30267     00          | 	byte	0
30268                 | LR__5123
30268     67 23       | 	byte	"g#"
3026a     00          | 	byte	0
3026b                 | LR__5124
3026b     61          | 	byte	"a"
3026c     00          | 	byte	0
3026d                 | LR__5125
3026d     61 23       | 	byte	"a#"
3026f     00          | 	byte	0
30270                 | LR__5126
30270     68          | 	byte	"h"
30271     00          | 	byte	0
30272                 | LR__5127
30272     62          | 	byte	"b"
30273     00          | 	byte	0
30274                 | LR__5128
30274     2B          | 	byte	"+"
30275     00          | 	byte	0
30276                 | LR__5129
30276     2D          | 	byte	"-"
30277     00          | 	byte	0
30278                 | LR__5130
30278     3D          | 	byte	"="
30279     00          | 	byte	0
3027a                 | LR__5131
3027a     2C          | 	byte	","
3027b     00          | 	byte	0
3027c                 | LR__5132
3027c     2A          | 	byte	"*"
3027d     00          | 	byte	0
3027e                 | LR__5133
3027e     2F          | 	byte	"/"
3027f     00          | 	byte	0
30280                 | LR__5134
30280     3B          | 	byte	";"
30281     00          | 	byte	0
30282                 | LR__5135
30282     22          | 	byte	34
30283     00          | 	byte	0
30284                 | LR__5136
30284     5E          | 	byte	"^"
30285     00          | 	byte	0
30286                 | LR__5137
30286     29          | 	byte	")"
30287     00          | 	byte	0
30288                 | LR__5138
30288     28          | 	byte	"("
30289     00          | 	byte	0
3028a                 | LR__5139
3028a     3A          | 	byte	":"
3028b     00          | 	byte	0
3028c                 | LR__5140
3028c     20          | 	byte	" "
3028d     00          | 	byte	0
3028e                 | LR__5141
3028e     3E          | 	byte	">"
3028f     00          | 	byte	0
30290                 | LR__5142
30290     3C          | 	byte	"<"
30291     00          | 	byte	0
30292                 | LR__5143
30292     3D          | 	byte	"="
30293     00          | 	byte	0
30294                 | LR__5144
30294     62 65 65 70 | 	byte	"beep"
30298     00          | 	byte	0
30299                 | LR__5145
30299     62 2E       | 	byte	"b."
3029b     00          | 	byte	0
3029c                 | LR__5146
3029c     62 6F 78    | 	byte	"box"
3029f     00          | 	byte	0
302a0                 | LR__5147
302a0     62 72 75 6E | 	byte	"brun"
302a4     00          | 	byte	0
302a5                 | LR__5148
302a5     62 72 2E    | 	byte	"br."
302a8     00          | 	byte	0
302a9                 | LR__5149
302a9     63 64       | 	byte	"cd"
302ab     00          | 	byte	0
302ac                 | LR__5150
302ac     63 68 61 6E 
302b0     67 65 66 72 
302b4     65 71       | 	byte	"changefreq"
302b6     00          | 	byte	0
302b7                 | LR__5151
302b7     63 66 2E    | 	byte	"cf."
302ba     00          | 	byte	0
302bb                 | LR__5152
302bb     63 68 61 6E 
302bf     67 65 70 61 
302c3     6E          | 	byte	"changepan"
302c4     00          | 	byte	0
302c5                 | LR__5153
302c5     63 70 2E    | 	byte	"cp."
302c8     00          | 	byte	0
302c9                 | LR__5154
302c9     63 68 61 6E 
302cd     67 65 76 6F 
302d1     6C          | 	byte	"changevol"
302d2     00          | 	byte	0
302d3                 | LR__5155
302d3     63 76 2E    | 	byte	"cv."
302d6     00          | 	byte	0
302d7                 | LR__5156
302d7     63 68 61 6E 
302db     67 65 77 61 
302df     76 65       | 	byte	"changewave"
302e1     00          | 	byte	0
302e2                 | LR__5157
302e2     63 77 2E    | 	byte	"cw."
302e5     00          | 	byte	0
302e6                 | LR__5158
302e6     63 69 72 63 
302ea     6C 65       | 	byte	"circle"
302ec     00          | 	byte	0
302ed                 | LR__5159
302ed     63 69 2E    | 	byte	"ci."
302f0     00          | 	byte	0
302f1                 | LR__5160
302f1     63 6C 69 63 
302f5     6B          | 	byte	"click"
302f6     00          | 	byte	0
302f7                 | LR__5161
302f7     63 6C 6F 73 
302fb     65          | 	byte	"close"
302fc     00          | 	byte	0
302fd                 | LR__5162
302fd     63 6C 73    | 	byte	"cls"
30300     00          | 	byte	0
30301                 | LR__5163
30301     63 6F 6C 6F 
30305     72          | 	byte	"color"
30306     00          | 	byte	0
30307                 | LR__5164
30307     63 2E       | 	byte	"c."
30309     00          | 	byte	0
3030a                 | LR__5165
3030a     63 73 61 76 
3030e     65          | 	byte	"csave"
3030f     00          | 	byte	0
30310                 | LR__5166
30310     63 73 2E    | 	byte	"cs."
30313     00          | 	byte	0
30314                 | LR__5167
30314     63 75 72 73 
30318     6F 72       | 	byte	"cursor"
3031a     00          | 	byte	0
3031b                 | LR__5168
3031b     64 65 66 73 
3031f     6E 64       | 	byte	"defsnd"
30321     00          | 	byte	0
30322                 | LR__5169
30322     64 65 66 65 
30326     6E 76       | 	byte	"defenv"
30328     00          | 	byte	0
30329                 | LR__5170
30329     64 65 66 73 
3032d     70 72 69 74 
30331     65          | 	byte	"defsprite"
30332     00          | 	byte	0
30333                 | LR__5171
30333     64 73 2E    | 	byte	"ds."
30336     00          | 	byte	0
30337                 | LR__5172
30337     64 65 67    | 	byte	"deg"
3033a     00          | 	byte	0
3033b                 | LR__5173
3033b     64 69 6D    | 	byte	"dim"
3033e     00          | 	byte	0
3033f                 | LR__5174
3033f     64 69 72    | 	byte	"dir"
30342     00          | 	byte	0
30343                 | LR__5175
30343     64 70 6F 6B 
30347     65          | 	byte	"dpoke"
30348     00          | 	byte	0
30349                 | LR__5176
30349     64 72 61 77 | 	byte	"draw"
3034d     00          | 	byte	0
3034e                 | LR__5177
3034e     64 72 2E    | 	byte	"dr."
30351     00          | 	byte	0
30352                 | LR__5178
30352     65 6C 73 65 | 	byte	"else"
30356     00          | 	byte	0
30357                 | LR__5179
30357     65 6E 64    | 	byte	"end"
3035a     00          | 	byte	0
3035b                 | LR__5180
3035b     65 6E 74 65 
3035f     72          | 	byte	"enter"
30360     00          | 	byte	0
30361                 | LR__5181
30361     65 2E       | 	byte	"e."
30363     00          | 	byte	0
30364                 | LR__5182
30364     66 63 69 72 
30368     63 6C 65    | 	byte	"fcircle"
3036b     00          | 	byte	0
3036c                 | LR__5183
3036c     66 63 2E    | 	byte	"fc."
3036f     00          | 	byte	0
30370                 | LR__5184
30370     66 69 6C 6C | 	byte	"fill"
30374     00          | 	byte	0
30375                 | LR__5185
30375     66 69 2E    | 	byte	"fi."
30378     00          | 	byte	0
30379                 | LR__5186
30379     66 6F 6E 74 | 	byte	"font"
3037d     00          | 	byte	0
3037e                 | LR__5187
3037e     66 6F 72    | 	byte	"for"
30381     00          | 	byte	0
30382                 | LR__5188
30382     66 2E       | 	byte	"f."
30384     00          | 	byte	0
30385                 | LR__5189
30385     66 72 61 6D 
30389     65          | 	byte	"frame"
3038a     00          | 	byte	0
3038b                 | LR__5190
3038b     66 72 2E    | 	byte	"fr."
3038e     00          | 	byte	0
3038f                 | LR__5191
3038f     67 65 74    | 	byte	"get"
30392     00          | 	byte	0
30393                 | LR__5192
30393     67 6F 73 75 
30397     62          | 	byte	"gosub"
30398     00          | 	byte	0
30399                 | LR__5193
30399     67 6F 74 6F | 	byte	"goto"
3039d     00          | 	byte	0
3039e                 | LR__5194
3039e     67 2E       | 	byte	"g."
303a0     00          | 	byte	0
303a1                 | LR__5195
303a1     69 66       | 	byte	"if"
303a3     00          | 	byte	0
303a4                 | LR__5196
303a4     69 6E 6B    | 	byte	"ink"
303a7     00          | 	byte	0
303a8                 | LR__5197
303a8     69 2E       | 	byte	"i."
303aa     00          | 	byte	0
303ab                 | LR__5198
303ab     6C 69 73 74 | 	byte	"list"
303af     00          | 	byte	0
303b0                 | LR__5199
303b0     6C 2E       | 	byte	"l."
303b2     00          | 	byte	0
303b3                 | LR__5200
303b3     6C 6F 61 64 | 	byte	"load"
303b7     00          | 	byte	0
303b8                 | LR__5201
303b8     6C 6F 2E    | 	byte	"lo."
303bb     00          | 	byte	0
303bc                 | LR__5202
303bc     6C 70 6F 6B 
303c0     65          | 	byte	"lpoke"
303c1     00          | 	byte	0
303c2                 | LR__5203
303c2     6D 6F 64 65 | 	byte	"mode"
303c6     00          | 	byte	0
303c7                 | LR__5204
303c7     6D 2E       | 	byte	"m."
303c9     00          | 	byte	0
303ca                 | LR__5205
303ca     6D 6F 75 73 
303ce     65          | 	byte	"mouse"
303cf     00          | 	byte	0
303d0                 | LR__5206
303d0     6E 65 77    | 	byte	"new"
303d3     00          | 	byte	0
303d4                 | LR__5207
303d4     6E 65 78 74 | 	byte	"next"
303d8     00          | 	byte	0
303d9                 | LR__5208
303d9     6E 2E       | 	byte	"n."
303db     00          | 	byte	0
303dc                 | LR__5209
303dc     6F 70 65 6E | 	byte	"open"
303e0     00          | 	byte	0
303e1                 | LR__5210
303e1     70 61 70 65 
303e5     72          | 	byte	"paper"
303e6     00          | 	byte	0
303e7                 | LR__5211
303e7     70 61 2E    | 	byte	"pa."
303ea     00          | 	byte	0
303eb                 | LR__5212
303eb     70 69 6E 66 
303ef     6C 6F 61 74 | 	byte	"pinfloat"
303f3     00          | 	byte	0
303f4                 | LR__5213
303f4     70 69 6E 68 
303f8     69          | 	byte	"pinhi"
303f9     00          | 	byte	0
303fa                 | LR__5214
303fa     70 69 6E 6C 
303fe     6F          | 	byte	"pinlo"
303ff     00          | 	byte	0
30400                 | LR__5215
30400     70 69 6E 73 
30404     74 61 72 74 | 	byte	"pinstart"
30408     00          | 	byte	0
30409                 | LR__5216
30409     70 69 6E 74 
3040d     6F 67 67 6C 
30411     65          | 	byte	"pintoggle"
30412     00          | 	byte	0
30413                 | LR__5217
30413     70 69 6E 77 
30417     72 69 74 65 | 	byte	"pinwrite"
3041b     00          | 	byte	0
3041c                 | LR__5218
3041c     70 6C 61 79 | 	byte	"play"
30420     00          | 	byte	0
30421                 | LR__5219
30421     70 2E       | 	byte	"p."
30423     00          | 	byte	0
30424                 | LR__5220
30424     70 6C 6F 74 | 	byte	"plot"
30428     00          | 	byte	0
30429                 | LR__5221
30429     70 6C 2E    | 	byte	"pl."
3042c     00          | 	byte	0
3042d                 | LR__5222
3042d     70 6F 6B 65 | 	byte	"poke"
30431     00          | 	byte	0
30432                 | LR__5223
30432     70 6F 70    | 	byte	"pop"
30435     00          | 	byte	0
30436                 | LR__5224
30436     70 6F 73 69 
3043a     74 69 6F 6E | 	byte	"position"
3043e     00          | 	byte	0
3043f                 | LR__5225
3043f     70 6F 73 2E | 	byte	"pos."
30443     00          | 	byte	0
30444                 | LR__5226
30444     70 72 69 6E 
30448     74          | 	byte	"print"
30449     00          | 	byte	0
3044a                 | LR__5227
3044a     3F          | 	byte	"?"
3044b     00          | 	byte	0
3044c                 | LR__5228
3044c     70 75 74    | 	byte	"put"
3044f     00          | 	byte	0
30450                 | LR__5229
30450     72 61 64    | 	byte	"rad"
30453     00          | 	byte	0
30454                 | LR__5230
30454     72 65 6C 65 
30458     61 73 65    | 	byte	"release"
3045b     00          | 	byte	0
3045c                 | LR__5231
3045c     72 65 6D    | 	byte	"rem"
3045f     00          | 	byte	0
30460                 | LR__5232
30460     27          | 	byte	"'"
30461     00          | 	byte	0
30462                 | LR__5233
30462     72 65 74 75 
30466     72 6E       | 	byte	"return"
30468     00          | 	byte	0
30469                 | LR__5234
30469     72 75 6E    | 	byte	"run"
3046c     00          | 	byte	0
3046d                 | LR__5235
3046d     73 61 76 65 | 	byte	"save"
30471     00          | 	byte	0
30472                 | LR__5236
30472     73 2E       | 	byte	"s."
30474     00          | 	byte	0
30475                 | LR__5237
30475     73 65 74 64 
30479     65 6C 61 79 | 	byte	"setdelay"
3047d     00          | 	byte	0
3047e                 | LR__5238
3047e     73 64 2E    | 	byte	"sd."
30481     00          | 	byte	0
30482                 | LR__5239
30482     73 65 74 65 
30486     6E 76       | 	byte	"setenv"
30488     00          | 	byte	0
30489                 | LR__5240
30489     73 65 2E    | 	byte	"se."
3048c     00          | 	byte	0
3048d                 | LR__5241
3048d     73 65 74 6C 
30491     65 6E       | 	byte	"setlen"
30493     00          | 	byte	0
30494                 | LR__5242
30494     73 6C 2E    | 	byte	"sl."
30497     00          | 	byte	0
30498                 | LR__5243
30498     73 65 74 70 
3049c     61 6E       | 	byte	"setpan"
3049e     00          | 	byte	0
3049f                 | LR__5244
3049f     73 70       | 	byte	"sp"
304a1     00          | 	byte	0
304a2                 | LR__5245
304a2     73 65 74 73 
304a6     75 73 74 61 
304aa     69 6E       | 	byte	"setsustain"
304ac     00          | 	byte	0
304ad                 | LR__5246
304ad     73 73 2E    | 	byte	"ss."
304b0     00          | 	byte	0
304b1                 | LR__5247
304b1     73 65 74 76 
304b5     6F 6C       | 	byte	"setvol"
304b7     00          | 	byte	0
304b8                 | LR__5248
304b8     73 76 2E    | 	byte	"sv."
304bb     00          | 	byte	0
304bc                 | LR__5249
304bc     73 65 74 77 
304c0     61 76 65    | 	byte	"setwave"
304c3     00          | 	byte	0
304c4                 | LR__5250
304c4     73 77 2E    | 	byte	"sw."
304c7     00          | 	byte	0
304c8                 | LR__5251
304c8     73 65 74 77 
304cc     61 76       | 	byte	"setwav"
304ce     00          | 	byte	0
304cf                 | LR__5252
304cf     73 68 75 74 
304d3     75 70       | 	byte	"shutup"
304d5     00          | 	byte	0
304d6                 | LR__5253
304d6     73 68 2E    | 	byte	"sh."
304d9     00          | 	byte	0
304da                 | LR__5254
304da     73 6F 75 6E 
304de     64          | 	byte	"sound"
304df     00          | 	byte	0
304e0                 | LR__5255
304e0     73 6F 2E    | 	byte	"so."
304e3     00          | 	byte	0
304e4                 | LR__5256
304e4     73 70 72 69 
304e8     74 65       | 	byte	"sprite"
304ea     00          | 	byte	0
304eb                 | LR__5257
304eb     73 70 72 2E | 	byte	"spr."
304ef     00          | 	byte	0
304f0                 | LR__5258
304f0     74 68 65 6E | 	byte	"then"
304f4     00          | 	byte	0
304f5                 | LR__5259
304f5     77 61 69 74 
304f9     6D 73       | 	byte	"waitms"
304fb     00          | 	byte	0
304fc                 | LR__5260
304fc     77 2E       | 	byte	"w."
304fe     00          | 	byte	0
304ff                 | LR__5261
304ff     77 61 69 74 
30503     63 6C 6F 63 
30507     6B          | 	byte	"waitclock"
30508     00          | 	byte	0
30509                 | LR__5262
30509     77 63 2E    | 	byte	"wc."
3050c     00          | 	byte	0
3050d                 | LR__5263
3050d     77 61 69 74 
30511     76 62 6C    | 	byte	"waitvbl"
30514     00          | 	byte	0
30515                 | LR__5264
30515     77 76 2E    | 	byte	"wv."
30518     00          | 	byte	0
30519                 | LR__5265
30519     77 78 70 69 
3051d     6E          | 	byte	"wxpin"
3051e     00          | 	byte	0
3051f                 | LR__5266
3051f     77 79 70 69 
30523     6E          | 	byte	"wypin"
30524     00          | 	byte	0
30525                 | LR__5267
30525     61 62 73    | 	byte	"abs"
30528     00          | 	byte	0
30529                 | LR__5268
30529     61 63 6F 73 | 	byte	"acos"
3052d     00          | 	byte	0
3052e                 | LR__5269
3052e     61 64 72    | 	byte	"adr"
30531     00          | 	byte	0
30532                 | LR__5270
30532     61 64 64 72 | 	byte	"addr"
30536     00          | 	byte	0
30537                 | LR__5271
30537     61 73 63    | 	byte	"asc"
3053a     00          | 	byte	0
3053b                 | LR__5272
3053b     61 73 69 6E | 	byte	"asin"
3053f     00          | 	byte	0
30540                 | LR__5273
30540     61 74 6E    | 	byte	"atn"
30543     00          | 	byte	0
30544                 | LR__5274
30544     62 69 6E 24 | 	byte	"bin$"
30548     00          | 	byte	0
30549                 | LR__5275
30549     63 68 72 24 | 	byte	"chr$"
3054d     00          | 	byte	0
3054e                 | LR__5276
3054e     63 6F 73    | 	byte	"cos"
30551     00          | 	byte	0
30552                 | LR__5277
30552     64 70 65 65 
30556     6B          | 	byte	"dpeek"
30557     00          | 	byte	0
30558                 | LR__5278
30558     66 72 65    | 	byte	"fre"
3055b     00          | 	byte	0
3055c                 | LR__5279
3055c     67 65 74 70 
30560     69 78 65 6C | 	byte	"getpixel"
30564     00          | 	byte	0
30565                 | LR__5280
30565     67 65 2E    | 	byte	"ge."
30568     00          | 	byte	0
30569                 | LR__5281
30569     67 65 74 65 
3056d     6E 76 73 75 
30571     73 74 61 69 
30575     6E          | 	byte	"getenvsustain"
30576     00          | 	byte	0
30577                 | LR__5282
30577     67 65 74 6E 
3057b     6F 74 65 76 
3057f     61 6C 75 65 | 	byte	"getnotevalue"
30583     00          | 	byte	0
30584                 | LR__5283
30584     67 65 74 74 
30588     69 6D 65    | 	byte	"gettime"
3058b     00          | 	byte	0
3058c                 | LR__5284
3058c     68 65 78 24 | 	byte	"hex$"
30590     00          | 	byte	0
30591                 | LR__5285
30591     69 6E 6B 65 
30595     79 24       | 	byte	"inkey$"
30597     00          | 	byte	0
30598                 | LR__5286
30598     69 6E 74    | 	byte	"int"
3059b     00          | 	byte	0
3059c                 | LR__5287
3059c     6C 65 66 74 
305a0     24          | 	byte	"left$"
305a1     00          | 	byte	0
305a2                 | LR__5288
305a2     6C 65 6E    | 	byte	"len"
305a5     00          | 	byte	0
305a6                 | LR__5289
305a6     6C 6F 67    | 	byte	"log"
305a9     00          | 	byte	0
305aa                 | LR__5290
305aa     6C 70 65 65 
305ae     6B          | 	byte	"lpeek"
305af     00          | 	byte	0
305b0                 | LR__5291
305b0     6D 69 64 24 | 	byte	"mid$"
305b4     00          | 	byte	0
305b5                 | LR__5292
305b5     6D 6F 75 73 
305b9     65 6B       | 	byte	"mousek"
305bb     00          | 	byte	0
305bc                 | LR__5293
305bc     6D 6F 75 73 
305c0     65 77       | 	byte	"mousew"
305c2     00          | 	byte	0
305c3                 | LR__5294
305c3     6D 6F 75 73 
305c7     65 78       | 	byte	"mousex"
305c9     00          | 	byte	0
305ca                 | LR__5295
305ca     6D 6F 75 73 
305ce     65 79       | 	byte	"mousey"
305d0     00          | 	byte	0
305d1                 | LR__5296
305d1     70 65 65 6B | 	byte	"peek"
305d5     00          | 	byte	0
305d6                 | LR__5297
305d6     70 69 6E 72 
305da     65 61 64    | 	byte	"pinread"
305dd     00          | 	byte	0
305de                 | LR__5298
305de     72 64 70 69 
305e2     6E          | 	byte	"rdpin"
305e3     00          | 	byte	0
305e4                 | LR__5299
305e4     72 69 67 68 
305e8     74 24       | 	byte	"right$"
305ea     00          | 	byte	0
305eb                 | LR__5300
305eb     72 71 70 69 
305ef     6E          | 	byte	"rqpin"
305f0     00          | 	byte	0
305f1                 | LR__5301
305f1     72 6F 75 6E 
305f5     64          | 	byte	"round"
305f6     00          | 	byte	0
305f7                 | LR__5302
305f7     72 6E 64    | 	byte	"rnd"
305fa     00          | 	byte	0
305fb                 | LR__5303
305fb     73 69 6E    | 	byte	"sin"
305fe     00          | 	byte	0
305ff                 | LR__5304
305ff     73 71 72    | 	byte	"sqr"
30602     00          | 	byte	0
30603                 | LR__5305
30603     73 74 69 63 
30607     6B          | 	byte	"stick"
30608     00          | 	byte	0
30609                 | LR__5306
30609     73 74 72 69 
3060d     67          | 	byte	"strig"
3060e     00          | 	byte	0
3060f                 | LR__5307
3060f     73 74 72 24 | 	byte	"str$"
30613     00          | 	byte	0
30614                 | LR__5308
30614     74 61 6E    | 	byte	"tan"
30617     00          | 	byte	0
30618                 | LR__5309
30618     76 61 6C    | 	byte	"val"
3061b     00          | 	byte	0
3061c                 | LR__5310
3061c     76 61 72 70 
30620     74 72       | 	byte	"varptr"
30622     00          | 	byte	0
30623                 | LR__5311
30623     61          | 	byte	"a"
30624     00          | 	byte	0
30625                 | LR__5312
30625     7A          | 	byte	"z"
30626     00          | 	byte	0
30627                 | LR__5313
30627     5F          | 	byte	"_"
30628     00          | 	byte	0
30629                 | LR__5314
30629     61          | 	byte	"a"
3062a     00          | 	byte	0
3062b                 | LR__5315
3062b     7A          | 	byte	"z"
3062c     00          | 	byte	0
3062d                 | LR__5316
3062d     30          | 	byte	"0"
3062e     00          | 	byte	0
3062f                 | LR__5317
3062f     39          | 	byte	"9"
30630     00          | 	byte	0
30631                 | LR__5318
30631     5F          | 	byte	"_"
30632     00          | 	byte	0
30633                 | LR__5319
30633     2E          | 	byte	"."
30634     00          | 	byte	0
30635                 | LR__5320
30635     61          | 	byte	"a"
30636     00          | 	byte	0
30637                 | LR__5321
30637     7A          | 	byte	"z"
30638     00          | 	byte	0
30639                 | LR__5322
30639     30          | 	byte	"0"
3063a     00          | 	byte	0
3063b                 | LR__5323
3063b     39          | 	byte	"9"
3063c     00          | 	byte	0
3063d                 | LR__5324
3063d     5F          | 	byte	"_"
3063e     00          | 	byte	0
3063f                 | LR__5325
3063f     24          | 	byte	"$"
30640     00          | 	byte	0
30641                 | LR__5326
30641     25          | 	byte	"%"
30642     00          | 	byte	0
30643                 | LR__5327
30643     21          | 	byte	"!"
30644     00          | 	byte	0
30645                 | LR__5328
30645     30          | 	byte	"0"
30646     00          | 	byte	0
30647                 | LR__5329
30647     39          | 	byte	"9"
30648     00          | 	byte	0
30649                 | LR__5330
30649     2E          | 	byte	"."
3064a     00          | 	byte	0
3064b                 | LR__5331
3064b     24          | 	byte	"$"
3064c     00          | 	byte	0
3064d                 | LR__5332
3064d     25          | 	byte	"%"
3064e     00          | 	byte	0
3064f                 | LR__5333
3064f     2D          | 	byte	"-"
30650     00          | 	byte	0
30651                 | LR__5334
30651     2E          | 	byte	"."
30652     00          | 	byte	0
30653                 | LR__5335
30653     24          | 	byte	"$"
30654     00          | 	byte	0
30655                 | LR__5336
30655     25          | 	byte	"%"
30656     00          | 	byte	0
30657                 | LR__5337
30657     30          | 	byte	"0"
30658     00          | 	byte	0
30659                 | LR__5338
30659     39          | 	byte	"9"
3065a     00          | 	byte	0
3065b                 | LR__5339
3065b     5F          | 	byte	"_"
3065c     00          | 	byte	0
3065d                 | LR__5340
3065d     2E          | 	byte	"."
3065e     00          | 	byte	0
3065f                 | LR__5341
3065f     45          | 	byte	"E"
30660     00          | 	byte	0
30661                 | LR__5342
30661     65          | 	byte	"e"
30662     00          | 	byte	0
30663                 | LR__5343
30663     2D          | 	byte	"-"
30664     00          | 	byte	0
30665                 | LR__5344
30665     61          | 	byte	"a"
30666     00          | 	byte	0
30667                 | LR__5345
30667     66          | 	byte	"f"
30668     00          | 	byte	0
30669                 | LR__5346
30669     30          | 	byte	"0"
3066a     00          | 	byte	0
3066b                 | LR__5347
3066b     31          | 	byte	"1"
3066c     00          | 	byte	0
3066d                 | LR__5348
3066d     5F          | 	byte	"_"
3066e     00          | 	byte	0
3066f                 | LR__5349
3066f     2D          | 	byte	"-"
30670     00          | 	byte	0
30671                 | LR__5350
30671     65          | 	byte	"e"
30672     00          | 	byte	0
30673                 | LR__5351
30673     2E          | 	byte	"."
30674     00          | 	byte	0
30675                 | LR__5352
30675     45          | 	byte	"E"
30676     00          | 	byte	0
30677                 | LR__5353
30677     65          | 	byte	"e"
30678     00          | 	byte	0
30679                 | LR__5354
30679     30          | 	byte	"0"
3067a     00          | 	byte	0
3067b                 | LR__5355
3067b     39          | 	byte	"9"
3067c     00          | 	byte	0
3067d                 | LR__5356
3067d     24          | 	byte	"$"
3067e     00          | 	byte	0
3067f                 | LR__5357
3067f     25          | 	byte	"%"
30680     00          | 	byte	0
30681                 | LR__5358
30681     2D          | 	byte	"-"
30682     00          | 	byte	0
30683                 | LR__5359
30683     24          | 	byte	"$"
30684     00          | 	byte	0
30685                 | LR__5360
30685     25          | 	byte	"%"
30686     00          | 	byte	0
30687                 | LR__5361
30687     30          | 	byte	"0"
30688     00          | 	byte	0
30689                 | LR__5362
30689     39          | 	byte	"9"
3068a     00          | 	byte	0
3068b                 | LR__5363
3068b     5F          | 	byte	"_"
3068c     00          | 	byte	0
3068d                 | LR__5364
3068d     30          | 	byte	"0"
3068e     00          | 	byte	0
3068f                 | LR__5365
3068f     39          | 	byte	"9"
30690     00          | 	byte	0
30691                 | LR__5366
30691     61          | 	byte	"a"
30692     00          | 	byte	0
30693                 | LR__5367
30693     66          | 	byte	"f"
30694     00          | 	byte	0
30695                 | LR__5368
30695     5F          | 	byte	"_"
30696     00          | 	byte	0
30697                 | LR__5369
30697     30          | 	byte	"0"
30698     00          | 	byte	0
30699                 | LR__5370
30699     31          | 	byte	"1"
3069a     00          | 	byte	0
3069b                 | LR__5371
3069b     5F          | 	byte	"_"
3069c     00          | 	byte	0
3069d                 | LR__5372
3069d     30          | 	byte	"0"
3069e     00          | 	byte	0
3069f                 | LR__5373
3069f     39          | 	byte	"9"
306a0     00          | 	byte	0
306a1                 | LR__5374
306a1     5F          | 	byte	"_"
306a2     00          | 	byte	0
306a3                 | LR__5375
306a3     22          | 	byte	34
306a4     00          | 	byte	0
306a5                 | LR__5376
306a5     22          | 	byte	34
306a6     00          | 	byte	0
306a7                 | LR__5377
306a7     44 69 6D 3A 
306ab     20 61 74 20 
306af     6C 69 6E 65 
306b3     20          | 	byte	"Dim: at line "
306b4     00          | 	byte	0
306b5                 | LR__5378
306b5     3A 20 77 61 
306b9     72 6E 69 6E 
306bd     67 3A 20 74 
306c1     68 65 20 76 
306c5     61 72 69 61 
306c9     62 6C 65 20 
306cd     65 78 69 73 
306d1     74 65 64 2E | 	byte	": warning: the variable existed."
306d5     00          | 	byte	0
306d6                 | LR__5379
306d6     28          | 	byte	"("
306d7     00          | 	byte	0
306d8                 | LR__5380
306d8     61 73       | 	byte	"as"
306da     00          | 	byte	0
306db                 | LR__5381
306db     61 73       | 	byte	"as"
306dd     00          | 	byte	0
306de                 | LR__5382
306de     2C          | 	byte	","
306df     00          | 	byte	0
306e0                 | LR__5383
306e0     29          | 	byte	")"
306e1     00          | 	byte	0
306e2                 | LR__5384
306e2     29          | 	byte	")"
306e3     00          | 	byte	0
306e4                 | LR__5385
306e4     61 73       | 	byte	"as"
306e6     00          | 	byte	0
306e7                 | LR__5386
306e7     62 79 74 65 | 	byte	"byte"
306eb     00          | 	byte	0
306ec                 | LR__5387
306ec     75 62 79 74 
306f0     65          | 	byte	"ubyte"
306f1     00          | 	byte	0
306f2                 | LR__5388
306f2     73 68 6F 72 
306f6     74          | 	byte	"short"
306f7     00          | 	byte	0
306f8                 | LR__5389
306f8     75 73 68 6F 
306fc     72 74       | 	byte	"ushort"
306fe     00          | 	byte	0
306ff                 | LR__5390
306ff     6C 6F 6E 67 | 	byte	"long"
30703     00          | 	byte	0
30704                 | LR__5391
30704     69 6E 74 65 
30708     67 65 72    | 	byte	"integer"
3070b     00          | 	byte	0
3070c                 | LR__5392
3070c     75 6C 6F 6E 
30710     67          | 	byte	"ulong"
30711     00          | 	byte	0
30712                 | LR__5393
30712     69 6E 74 36 
30716     34          | 	byte	"int64"
30717     00          | 	byte	0
30718                 | LR__5394
30718     75 69 6E 74 
3071c     36 34       | 	byte	"uint64"
3071e     00          | 	byte	0
3071f                 | LR__5395
3071f     73 69 6E 67 
30723     6C 65       | 	byte	"single"
30725     00          | 	byte	0
30726                 | LR__5396
30726     64 6F 75 62 
3072a     6C 65       | 	byte	"double"
3072c     00          | 	byte	0
3072d                 | LR__5397
3072d     73 74 72 69 
30731     6E 67       | 	byte	"string"
30733     00          | 	byte	0
30734                 | LR__5398
30734     74 6F       | 	byte	"to"
30736     00          | 	byte	0
30737                 | LR__5399
30737     73 74 65 70 | 	byte	"step"
3073b     00          | 	byte	0
3073c                 | LR__5400
3073c     73 2E       | 	byte	"s."
3073e     00          | 	byte	0
3073f                 | LR__5401
3073f     24          | 	byte	"$"
30740     00          | 	byte	0
30741                 | LR__5402
30741     26 68       | 	byte	"&h"
30743     00          | 	byte	0
30744                 | LR__5403
30744     25          | 	byte	"%"
30745     00          | 	byte	0
30746                 | LR__5404
30746     26 62       | 	byte	"&b"
30748     00          | 	byte	0
30749                 | LR__5405
30749                 | 	byte	
30749     00          | 	byte	0
3074a                 | LR__5406
3074a     61 63 6F 73 
3074e     3A 20       | 	byte	"acos: "
30750     00          | 	byte	0
30751                 | LR__5407
30751     61 73 63 3A 
30755     20          | 	byte	"asc: "
30756     00          | 	byte	0
30757                 | LR__5408
30757     61 73 63 3A 
3075b     20          | 	byte	"asc: "
3075c     00          | 	byte	0
3075d                 | LR__5409
3075d     61 73 69 6E 
30761     3A 20       | 	byte	"asin: "
30763     00          | 	byte	0
30764                 | LR__5410
30764     61 74 6E 3A 
30768     20          | 	byte	"atn: "
30769     00          | 	byte	0
3076a                 | LR__5411
3076a     62 69 6E 24 
3076e     3A 20       | 	byte	"bin$: "
30770     00          | 	byte	0
30771                 | LR__5412
30771     2F          | 	byte	"/"
30772     00          | 	byte	0
30773                 | LR__5413
30773     2F 73 64 2F 
30777     62 69 6E 2F | 	byte	"/sd/bin/"
3077b     00          | 	byte	0
3077c                 | LR__5414
3077c     53 79 73 74 
30780     65 6D 20 65 
30784     72 72 6F 72 
30788     20          | 	byte	"System error "
30789     00          | 	byte	0
3078a                 | LR__5415
3078a     3A 20       | 	byte	": "
3078c     00          | 	byte	0
3078d                 | LR__5416
3078d     63 68 72 24 
30791     3A 20       | 	byte	"chr$: "
30793     00          | 	byte	0
30794                 | LR__5417
30794     63 68 61 6E 
30798     6E 65 6C 23 
3079c     20 65 78 70 
307a0     65 63 74 65 
307a4     64          | 	byte	"channel# expected"
307a5     00          | 	byte	0
307a6                 | LR__5418
307a6     63 6F 73 3A 
307aa     20          | 	byte	"cos: "
307ab     00          | 	byte	0
307ac                 | LR__5419
307ac                 | 	byte	
307ac     00          | 	byte	0
307ad                 | LR__5420
307ad                 | 	byte	
307ad     00          | 	byte	0
307ae                 | LR__5421
307ae     2F 73 64 2F 
307b2     6D 65 64 69 
307b6     61 2F 68 2F | 	byte	"/sd/media/h/"
307ba     00          | 	byte	0
307bb                 | LR__5422
307bb     53 79 73 74 
307bf     65 6D 20 65 
307c3     72 72 6F 72 
307c7     20          | 	byte	"System error "
307c8     00          | 	byte	0
307c9                 | LR__5423
307c9     3A 20       | 	byte	": "
307cb     00          | 	byte	0
307cc                 | LR__5424
307cc                 | 	byte	
307cc     00          | 	byte	0
307cd                 | LR__5425
307cd                 | 	byte	
307cd     00          | 	byte	0
307ce                 | LR__5426
307ce     2F 73 64 2F 
307d2     6D 65 64 69 
307d6     61 2F 73 2F | 	byte	"/sd/media/s/"
307da     00          | 	byte	0
307db                 | LR__5427
307db     53 79 73 74 
307df     65 6D 20 65 
307e3     72 72 6F 72 
307e7     20          | 	byte	"System error "
307e8     00          | 	byte	0
307e9                 | LR__5428
307e9     3A 20       | 	byte	": "
307eb     00          | 	byte	0
307ec                 | LR__5429
307ec     43 75 72 72 
307f0     65 6E 74 20 
307f4     64 69 72 65 
307f8     63 74 6F 72 
307fc     79 3A 20    | 	byte	"Current directory: "
307ff     00          | 	byte	0
30800                 | LR__5430
30800                 | 	byte	
30800     00          | 	byte	0
30801                 | LR__5431
30801     2A          | 	byte	"*"
30802     00          | 	byte	0
30803                 | LR__5432
30803                 | 	byte	
30803     00          | 	byte	0
30804                 | LR__5433
30804     5B 64 69 72 
30808     5D 20       | 	byte	"[dir] "
3080a     00          | 	byte	0
3080b                 | LR__5434
3080b     4D 6F 72 65 
3080f     20 74 68 61 
30813     6E 20 31 32 
30817     38 20 65 6E 
3081b     74 72 69 65 
3081f     73 20 66 6F 
30823     75 6E 64 3A 
30827     20 63 6C 65 
3082b     61 6E 20 79 
3082f     6F 75 72 20 
30833     64 69 72 65 
30837     63 74 6F 72 
3083b     79          | 	byte	"More than 128 entries found: clean your directory"
3083c     00          | 	byte	0
3083d                 | LR__5435
3083d     2A          | 	byte	"*"
3083e     00          | 	byte	0
3083f                 | LR__5436
3083f                 | 	byte	
3083f     00          | 	byte	0
30840                 | LR__5437
30840     4D 6F 72 65 
30844     20 74 68 61 
30848     6E 20 31 32 
3084c     38 20 65 6E 
30850     74 72 69 65 
30854     73 20 66 6F 
30858     75 6E 64 3A 
3085c     20 63 6C 65 
30860     61 6E 20 79 
30864     6F 75 72 20 
30868     64 69 72 65 
3086c     63 74 6F 72 
30870     79          | 	byte	"More than 128 entries found: clean your directory"
30871     00          | 	byte	0
30872                 | LR__5438
30872     45 72 72 6F 
30876     72 20       | 	byte	"Error "
30878     00          | 	byte	0
30879                 | LR__5439
30879     3A 20       | 	byte	": "
3087b     00          | 	byte	0
3087c                 | LR__5440
3087c     67 65 74 65 
30880     6E 76 73 75 
30884     73 74 61 69 
30888     6E 3A 20    | 	byte	"getenvsustain: "
3088b     00          | 	byte	0
3088c                 | LR__5441
3088c     67 65 74 70 
30890     69 78 65 6C 
30894     3A 20       | 	byte	"getpixel: "
30896     00          | 	byte	0
30897                 | LR__5442
30897     68 65 78 24 
3089b     3A 20       | 	byte	"hex$: "
3089d     00          | 	byte	0
3089e                 | LR__5443
3089e                 | 	byte	
3089e     00          | 	byte	0
3089f                 | LR__5444
3089f     6C 65 66 74 
308a3     24 3A 20    | 	byte	"left$: "
308a6     00          | 	byte	0
308a7                 | LR__5445
308a7     6C 65 66 74 
308ab     24 3A 20    | 	byte	"left$: "
308ae     00          | 	byte	0
308af                 | LR__5446
308af     6C 65 6E 3A 
308b3     20          | 	byte	"len: "
308b4     00          | 	byte	0
308b5                 | LR__5447
308b5     6C 65 6E 3A 
308b9     20          | 	byte	"len: "
308ba     00          | 	byte	0
308bb                 | LR__5448
308bb                 | 	byte	
308bb     00          | 	byte	0
308bc                 | LR__5449
308bc     2F          | 	byte	"/"
308bd     00          | 	byte	0
308be                 | LR__5450
308be     2F          | 	byte	"/"
308bf     00          | 	byte	0
308c0                 | LR__5451
308c0     2E 62 61 73 | 	byte	".bas"
308c4     00          | 	byte	0
308c5                 | LR__5452
308c5     53 79 73 74 
308c9     65 6D 20 65 
308cd     72 72 6F 72 
308d1     20          | 	byte	"System error "
308d2     00          | 	byte	0
308d3                 | LR__5453
308d3     3A 20       | 	byte	": "
308d5     00          | 	byte	0
308d6                 | LR__5454
308d6     2E 62 61 73 | 	byte	".bas"
308da     00          | 	byte	0
308db                 | LR__5455
308db     2F          | 	byte	"/"
308dc     00          | 	byte	0
308dd                 | LR__5456
308dd                 | 	byte	
308dd     00          | 	byte	0
308de                 | LR__5457
308de     4C 6F 61 64 
308e2     65 64 20    | 	byte	"Loaded "
308e5     00          | 	byte	0
308e6                 | LR__5458
308e6     2F          | 	byte	"/"
308e7     00          | 	byte	0
308e8                 | LR__5459
308e8     6C 6F 67 3A 
308ec     20          | 	byte	"log: "
308ed     00          | 	byte	0
308ee                 | LR__5460
308ee     6D 69 64 24 
308f2     3A 20       | 	byte	"mid$: "
308f4     00          | 	byte	0
308f5                 | LR__5461
308f5     6D 69 64 24 
308f9     3A 20       | 	byte	"mid$: "
308fb     00          | 	byte	0
308fc                 | LR__5462
308fc     20 42 41 53 
30900     49 43 20 62 
30904     79 74 65 73 
30908     20 66 72 65 
3090c     65          | 	byte	" BASIC bytes free"
3090d     00          | 	byte	0
3090e                 | LR__5463
3090e                 | 	byte	
3090e     00          | 	byte	0
3090f                 | LR__5464
3090f                 | 	byte	
3090f     00          | 	byte	0
30910                 | LR__5465
30910     6E 6F 6E 61 
30914     6D 65 2E 62 
30918     61 73       | 	byte	"noname.bas"
3091a     00          | 	byte	0
3091b                 | LR__5466
3091b     66 69 6C 65 
3091f     6E 61 6D 65 
30923     20 65 78 70 
30927     65 63 74 65 
3092b     64          | 	byte	"filename expected"
3092c     00          | 	byte	0
3092d                 | LR__5467
3092d     72 65 61 64 | 	byte	"read"
30931     00          | 	byte	0
30932                 | LR__5468
30932     77 72 69 74 
30936     65          | 	byte	"write"
30937     00          | 	byte	0
30938                 | LR__5469
30938     61 70 70 65 
3093c     6E 64       | 	byte	"append"
3093e     00          | 	byte	0
3093f                 | LR__5470
3093f     63 68 61 6E 
30943     6E 65 6C 23 
30947     20 65 78 70 
3094b     65 63 74 65 
3094f     64          | 	byte	"channel# expected"
30950     00          | 	byte	0
30951                 | LR__5471
30951     4F 70 65 6E 
30955     3A 20 69 6E 
30959     76 61 6C 69 
3095d     64 20 6D 6F 
30961     64 65       | 	byte	"Open: invalid mode"
30963     00          | 	byte	0
30964                 | LR__5472
30964     50 72 69 6E 
30968     74 20 74 6F 
3096c     20 63 68 61 
30970     6E 6E 65 6C 
30974     20 28 6E 6F 
30978     74 20 79 65 
3097c     74 20 69 6D 
30980     70 6C 65 6D 
30984     65 6E 74 65 
30988     64 29       | 	byte	"Print to channel (not yet implemented)"
3098a     00          | 	byte	0
3098b                 | LR__5473
3098b     72 69 67 68 
3098f     74 24 3A 20 | 	byte	"right$: "
30993     00          | 	byte	0
30994                 | LR__5474
30994     72 69 67 68 
30998     74 24 3A 20 | 	byte	"right$: "
3099c     00          | 	byte	0
3099d                 | LR__5475
3099d     72 6E 64 3A 
309a1     20          | 	byte	"rnd: "
309a2     00          | 	byte	0
309a3                 | LR__5476
309a3     72 6E 64 3A 
309a7     20          | 	byte	"rnd: "
309a8     00          | 	byte	0
309a9                 | LR__5477
309a9     53 74 6F 70 
309ad     70 65 64 20 
309b1     61 74 20 6C 
309b5     69 6E 65 20 | 	byte	"Stopped at line "
309b9     00          | 	byte	0
309ba                 | LR__5478
309ba                 | 	byte	
309ba     00          | 	byte	0
309bb                 | LR__5479
309bb     2F          | 	byte	"/"
309bc     00          | 	byte	0
309bd                 | LR__5480
309bd                 | 	byte	
309bd     00          | 	byte	0
309be                 | LR__5481
309be     53 61 76 65 
309c2     64 20 61 73 
309c6     20          | 	byte	"Saved as "
309c7     00          | 	byte	0
309c8                 | LR__5482
309c8     2F          | 	byte	"/"
309c9     00          | 	byte	0
309ca                 | LR__5483
309ca     73 69 6E 3A 
309ce     20          | 	byte	"sin: "
309cf     00          | 	byte	0
309d0                 | LR__5484
309d0     73 71 72 3A 
309d4     20          | 	byte	"sqr: "
309d5     00          | 	byte	0
309d6                 | LR__5485
309d6     73 74 69 63 
309da     6B 3A 20    | 	byte	"stick: "
309dd     00          | 	byte	0
309de                 | LR__5486
309de     73 74 72 69 
309e2     67 3A 20    | 	byte	"strig: "
309e5     00          | 	byte	0
309e6                 | LR__5487
309e6     74 61 6E 3A 
309ea     20          | 	byte	"tan: "
309eb     00          | 	byte	0
309ec                 | LR__5488
309ec     76 61 6C 3A 
309f0     20          | 	byte	"val: "
309f1     00          | 	byte	0
309f2                 | LR__5489
309f2     76 61 6C 3A 
309f6     20          | 	byte	"val: "
309f7     00          | 	byte	0
309f8                 | LR__5490
309f8     24          | 	byte	"$"
309f9     00          | 	byte	0
309fa                 | LR__5491
309fa     26 68       | 	byte	"&h"
309fc     00          | 	byte	0
309fd                 | LR__5492
309fd     25          | 	byte	"%"
309fe     00          | 	byte	0
309ff                 | LR__5493
309ff     26 62       | 	byte	"&b"
30a01     00          | 	byte	0
30a02                 | LR__5494
30a02                 | 	byte	
30a02     00          | 	byte	0
30a03                 | LR__5495
30a03     45 78 70 65 
30a07     63 74 65 64 
30a0b     20 6E 75 6D 
30a0f     62 65 72 2C 
30a13     20 67 6F 74 
30a17     20 73 6F 6D 
30a1b     65 74 68 69 
30a1f     6E 67 20 65 
30a23     6C 73 65 2E | 	byte	"Expected number, got something else."
30a27     00          | 	byte	0
30a28                 | LR__5496
30a28     43 61 6E 6E 
30a2c     6F 74 20 61 
30a30     64 64 20 61 
30a34     20 6E 75 6D 
30a38     62 65 72 20 
30a3c     74 6F 20 61 
30a40     20 73 74 72 
30a44     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30a48     00          | 	byte	0
30a49                 | LR__5497
30a49     43 61 6E 6E 
30a4d     6F 74 20 73 
30a51     75 62 73 74 
30a55     72 61 63 74 
30a59     20 73 74 72 
30a5d     69 6E 67 73 
30a61     2E          | 	byte	"Cannot substract strings."
30a62     00          | 	byte	0
30a63                 | LR__5498
30a63     55 6E 6B 6E 
30a67     6F 77 6E 20 
30a6b     65 72 72 6F 
30a6f     72 20 77 68 
30a73     69 6C 65 20 
30a77     61 64 64 69 
30a7b     6E 67 2E    | 	byte	"Unknown error while adding."
30a7e     00          | 	byte	0
30a7f                 | LR__5499
30a7f     55 6E 6B 6E 
30a83     6F 77 6E 20 
30a87     65 72 72 6F 
30a8b     72 20 77 68 
30a8f     69 6C 65 20 
30a93     73 75 62 73 
30a97     74 72 61 63 
30a9b     74 69 6E 67 
30a9f     2E          | 	byte	"Unknown error while substracting."
30aa0     00          | 	byte	0
30aa1                 | LR__5500
30aa1     43 61 6E 6E 
30aa5     6F 74 20 64 
30aa9     6F 20 6C 6F 
30aad     67 69 63 20 
30ab1     6F 70 65 72 
30ab5     61 74 69 6F 
30ab9     6E 20 6F 6E 
30abd     20 73 74 72 
30ac1     69 6E 67 20 
30ac5     6F 72 20 66 
30ac9     6C 6F 61 74 
30acd     2E          | 	byte	"Cannot do logic operation on string or float."
30ace     00          | 	byte	0
30acf                 | LR__5501
30acf     55 6E 6B 6E 
30ad3     6F 77 6E 20 
30ad7     65 72 72 6F 
30adb     72 20 77 68 
30adf     69 6C 65 20 
30ae3     64 6F 69 6E 
30ae7     67 20 6C 6F 
30aeb     67 69 63 20 
30aef     6F 70 65 72 
30af3     61 74 69 6F 
30af7     6E 2E       | 	byte	"Unknown error while doing logic operation."
30af9     00          | 	byte	0
30afa                 | LR__5502
30afa     43 61 6E 6E 
30afe     6F 74 20 6D 
30b02     75 6C 74 69 
30b06     70 6C 79 20 
30b0a     73 74 72 69 
30b0e     6E 67 73 2E | 	byte	"Cannot multiply strings."
30b12     00          | 	byte	0
30b13                 | LR__5503
30b13     55 6E 6B 6E 
30b17     6F 77 6E 20 
30b1b     65 72 72 6F 
30b1f     72 20 77 68 
30b23     69 6C 65 20 
30b27     6D 75 6C 74 
30b2b     69 70 6C 79 
30b2f     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30b33     00          | 	byte	0
30b34                 | LR__5504
30b34     43 61 6E 6E 
30b38     6F 74 20 64 
30b3c     69 76 69 64 
30b40     65 20 73 74 
30b44     72 69 6E 67 
30b48     73 2E       | 	byte	"Cannot divide strings."
30b4a     00          | 	byte	0
30b4b                 | LR__5505
30b4b     55 6E 6B 6E 
30b4f     6F 77 6E 20 
30b53     65 72 72 6F 
30b57     72 20 77 68 
30b5b     69 6C 65 20 
30b5f     64 69 76 69 
30b63     64 69 6E 67 
30b67     2E          | 	byte	"Unknown error while dividing."
30b68     00          | 	byte	0
30b69                 | LR__5506
30b69     43 61 6E 6E 
30b6d     6F 74 20 63 
30b71     6F 6D 70 75 
30b75     74 65 20 61 
30b79     20 70 6F 77 
30b7d     65 72 20 6F 
30b81     66 20 61 20 
30b85     73 74 72 69 
30b89     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30b8c     00          | 	byte	0
30b8d                 | LR__5507
30b8d     55 6E 6B 6E 
30b91     6F 77 6E 20 
30b95     65 72 72 6F 
30b99     72 20 77 68 
30b9d     69 6C 65 20 
30ba1     63 6F 6D 70 
30ba5     75 74 69 6E 
30ba9     67 20 61 20 
30bad     70 6F 77 65 
30bb1     72 2E       | 	byte	"Unknown error while computing a power."
30bb3     00          | 	byte	0
30bb4                 | LR__5508
30bb4     52 69 67 68 
30bb8     74 20 70 61 
30bbc     72 65 6E 74 
30bc0     68 65 73 69 
30bc4     73 20 65 78 
30bc8     70 65 63 74 
30bcc     65 64 2E    | 	byte	"Right parenthesis expected."
30bcf     00          | 	byte	0
30bd0                 | LR__5509
30bd0     45 78 70 65 
30bd4     63 74 65 64 
30bd8     20 73 74 72 
30bdc     69 6E 67 2E | 	byte	"Expected string."
30be0     00          | 	byte	0
30be1                 | LR__5510
30be1     45 78 70 65 
30be5     63 74 65 64 
30be9     20 66 6C 6F 
30bed     61 74 2E    | 	byte	"Expected float."
30bf0     00          | 	byte	0
30bf1                 | LR__5511
30bf1     45 78 70 65 
30bf5     63 74 65 64 
30bf9     20 75 6E 73 
30bfd     69 67 6E 65 
30c01     64 20 69 6E 
30c05     74 65 67 65 
30c09     72 2E       | 	byte	"Expected unsigned integer."
30c0b     00          | 	byte	0
30c0c                 | LR__5512
30c0c     45 78 70 65 
30c10     63 74 65 64 
30c14     20 69 6E 74 
30c18     65 67 65 72 
30c1c     2E          | 	byte	"Expected integer."
30c1d     00          | 	byte	0
30c1e                 | LR__5513
30c1e     4E 6F 20 6D 
30c22     6F 72 65 20 
30c26     76 61 72 69 
30c2a     61 62 6C 65 
30c2e     20 73 6C 6F 
30c32     74 73 2E    | 	byte	"No more variable slots."
30c35     00          | 	byte	0
30c36                 | LR__5514
30c36     56 61 72 69 
30c3a     61 62 6C 65 
30c3e     20 6E 6F 74 
30c42     20 66 6F 75 
30c46     6E 64 2E    | 	byte	"Variable not found."
30c49     00          | 	byte	0
30c4a                 | LR__5515
30c4a     43 6F 6D 6D 
30c4e     61 20 65 78 
30c52     70 65 63 74 
30c56     65 64 2E    | 	byte	"Comma expected."
30c59     00          | 	byte	0
30c5a                 | LR__5516
30c5a     43 6F 6D 6D 
30c5e     61 20 6F 72 
30c62     20 73 65 6D 
30c66     69 63 6F 6C 
30c6a     6F 6E 20 65 
30c6e     78 70 65 63 
30c72     74 65 64 2E | 	byte	"Comma or semicolon expected."
30c76     00          | 	byte	0
30c77                 | LR__5517
30c77     55 6E 6B 6E 
30c7b     6F 77 6E 20 
30c7f     63 6F 6D 6D 
30c83     61 6E 64 2E | 	byte	"Unknown command."
30c87     00          | 	byte	0
30c88                 | LR__5518
30c88     53 74 61 63 
30c8c     6B 20 75 6E 
30c90     64 65 72 66 
30c94     6C 6F 77 2E | 	byte	"Stack underflow."
30c98     00          | 	byte	0
30c99                 | LR__5519
30c99     43 61 6E 6E 
30c9d     6F 74 20 65 
30ca1     78 65 63 75 
30ca5     74 65 20 67 
30ca9     6F 74 6F 20 
30cad     6F 72 20 67 
30cb1     6F 73 75 62 
30cb5     20 69 6E 20 
30cb9     74 68 65 20 
30cbd     69 6D 6D 65 
30cc1     64 69 61 74 
30cc5     65 20 6D 6F 
30cc9     64 65 2E    | 	byte	"Cannot execute goto or gosub in the immediate mode."
30ccc     00          | 	byte	0
30ccd                 | LR__5520
30ccd     43 61 6E 6E 
30cd1     6F 74 20 6C 
30cd5     6F 61 64 20 
30cd9     66 72 6F 6D 
30cdd     20 74 68 69 
30ce1     73 20 66 69 
30ce5     6C 65 2E    | 	byte	"Cannot load from this file."
30ce8     00          | 	byte	0
30ce9                 | LR__5521
30ce9     54 68 65 20 
30ced     70 72 6F 67 
30cf1     72 61 6D 20 
30cf5     69 73 20 65 
30cf9     6D 70 74 79 
30cfd     2E          | 	byte	"The program is empty."
30cfe     00          | 	byte	0
30cff                 | LR__5522
30cff     49 66 20 61 
30d03     66 74 65 72 
30d07     20 69 66 2E | 	byte	"If after if."
30d0b     00          | 	byte	0
30d0c                 | LR__5523
30d0c     45 6D 70 74 
30d10     79 20 65 78 
30d14     70 72 65 73 
30d18     73 69 6F 6E 
30d1c     2E          | 	byte	"Empty expression."
30d1d     00          | 	byte	0
30d1e                 | LR__5524
30d1e     53 74 72 69 
30d22     6E 67 20 65 
30d26     78 70 65 63 
30d2a     74 65 64 2E | 	byte	"String expected."
30d2e     00          | 	byte	0
30d2f                 | LR__5525
30d2f     49 6E 74 65 
30d33     72 70 72 65 
30d37     74 65 72 20 
30d3b     69 6E 74 65 
30d3f     72 6E 61 6C 
30d43     20 65 72 72 
30d47     6F 72 2E    | 	byte	"Interpreter internal error."
30d4a     00          | 	byte	0
30d4b                 | LR__5526
30d4b     45 78 70 65 
30d4f     63 74 65 64 
30d53     20 61 73 73 
30d57     69 67 6E 2E | 	byte	"Expected assign."
30d5b     00          | 	byte	0
30d5c                 | LR__5527
30d5c     45 78 70 65 
30d60     63 74 65 64 
30d64     20 27 74 6F 
30d68     27 2E       | 	byte	"Expected 'to'."
30d6a     00          | 	byte	0
30d6b                 | LR__5528
30d6b     45 78 70 65 
30d6f     63 74 65 64 
30d73     20 69 6E 74 
30d77     65 67 65 72 
30d7b     20 76 61 72 
30d7f     69 61 62 6C 
30d83     65 2E       | 	byte	"Expected integer variable."
30d85     00          | 	byte	0
30d86                 | LR__5529
30d86     55 6E 69 6E 
30d8a     69 74 69 61 
30d8e     6C 69 7A 65 
30d92     64 20 76 61 
30d96     72 69 61 62 
30d9a     6C 65 20 69 
30d9e     6E 20 27 6E 
30da2     65 78 74 27 
30da6     2C 20 75 73 
30daa     65 20 27 66 
30dae     6F 72 27 20 
30db2     62 65 66 6F 
30db6     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30db9     00          | 	byte	0
30dba                 | LR__5530
30dba     4E 6F 20 6D 
30dbe     6F 72 65 20 
30dc2     73 6C 6F 74 
30dc6     73 20 66 6F 
30dca     72 20 27 66 
30dce     6F 72 27 2E | 	byte	"No more slots for 'for'."
30dd2     00          | 	byte	0
30dd3                 | LR__5531
30dd3     27 4E 65 78 
30dd7     74 27 20 64 
30ddb     6F 65 73 6E 
30ddf     27 74 20 6D 
30de3     61 74 63 68 
30de7     20 27 66 6F 
30deb     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30dee     00          | 	byte	0
30def                 | LR__5532
30def     27 47 6F 74 
30df3     6F 27 20 74 
30df7     61 72 67 65 
30dfb     74 20 6C 69 
30dff     6E 65 20 6E 
30e03     6F 74 20 66 
30e07     6F 75 6E 64 
30e0b     2E          | 	byte	"'Goto' target line not found."
30e0c     00          | 	byte	0
30e0d                 | LR__5533
30e0d     42 61 64 20 
30e11     6E 75 6D 62 
30e15     65 72 20 6F 
30e19     66 20 70 61 
30e1d     72 61 6D 65 
30e21     74 65 72 73 | 	byte	"Bad number of parameters"
30e25     00          | 	byte	0
30e26                 | LR__5534
30e26     46 75 6E 63 
30e2a     74 69 6F 6E 
30e2e     20 75 6E 64 
30e32     65 66 69 6E 
30e36     65 64 20 66 
30e3a     6F 72 20 73 
30e3e     74 72 69 6E 
30e42     67 73       | 	byte	"Function undefined for strings"
30e44     00          | 	byte	0
30e45                 | LR__5535
30e45     42 61 64 20 
30e49     70 61 72 61 
30e4d     6D 65 74 65 
30e51     72 2E       | 	byte	"Bad parameter."
30e53     00          | 	byte	0
30e54                 | LR__5536
30e54     43 61 6E 6E 
30e58     6F 74 20 64 
30e5c     65 63 6C 61 
30e60     72 65 20 61 
30e64     6E 20 61 72 
30e68     72 61 79 3A 
30e6c     20 74 68 65 
30e70     20 76 61 72 
30e74     69 61 62 6C 
30e78     65 20 65 78 
30e7c     69 73 74 73 
30e80     2E          | 	byte	"Cannot declare an array: the variable exists."
30e81     00          | 	byte	0
30e82                 | LR__5537
30e82     45 78 70 65 
30e86     63 74 65 64 
30e8a     20 27 28 27 
30e8e     2E          | 	byte	"Expected '('."
30e8f     00          | 	byte	0
30e90                 | LR__5538
30e90     45 78 70 65 
30e94     63 74 65 64 
30e98     20 27 29 27 
30e9c     20 6F 72 20 
30ea0     27 2C 27 2E | 	byte	"Expected ')' or ','."
30ea4     00          | 	byte	0
30ea5                 | LR__5539
30ea5     4E 6F 20 6D 
30ea9     6F 72 65 20 
30ead     74 68 61 6E 
30eb1     20 33 20 64 
30eb5     69 6D 65 6E 
30eb9     73 69 6F 6E 
30ebd     73 20 73 75 
30ec1     70 70 6F 72 
30ec5     74 65 64    | 	byte	"No more than 3 dimensions supported"
30ec8     00          | 	byte	0
30ec9                 | LR__5540
30ec9     56 61 72 69 
30ecd     61 62 6C 65 
30ed1     20 6E 61 6D 
30ed5     65 20 65 78 
30ed9     70 65 63 74 
30edd     65 64       | 	byte	"Variable name expected"
30edf     00          | 	byte	0
30ee0                 | LR__5541
30ee0     54 79 70 65 
30ee4     20 6E 61 6D 
30ee8     65 20 65 78 
30eec     70 65 63 74 
30ef0     65 64       | 	byte	"Type name expected"
30ef2     00          | 	byte	0
30ef3                 | LR__5542
30ef3     54 79 70 65 
30ef7     20 6E 6F 74 
30efb     20 73 75 70 
30eff     70 6F 72 74 
30f03     65 64 20 79 
30f07     65 74       | 	byte	"Type not supported yet"
30f09     00          | 	byte	0
30f0a                 | LR__5543
30f0a     41 72 72 61 
30f0e     79 20 69 6E 
30f12     64 65 78 20 
30f16     6F 75 74 20 
30f1a     6F 66 20 72 
30f1e     61 6E 67 65 | 	byte	"Array index out of range"
30f22     00          | 	byte	0
30f23                 | LR__5544
30f23     42 61 64 20 
30f27     74 79 70 65 
30f2b     20 77 68 69 
30f2f     6C 65 20 61 
30f33     73 73 69 67 
30f37     6E 69 6E 67 
30f3b     20 74 6F 20 
30f3f     61 72 72 61 
30f43     79          | 	byte	"Bad type while assigning to array"
30f44     00          | 	byte	0
30f45                 | LR__5545
30f45     54 6F 6F 20 
30f49     6D 61 6E 79 
30f4d     20 76 61 72 
30f51     69 61 62 6C 
30f55     65 73       | 	byte	"Too many variables"
30f57     00          | 	byte	0
30f58                 | LR__5546
30f58     27 54 68 65 
30f5c     6E 27 20 65 
30f60     78 70 65 63 
30f64     74 65 64    | 	byte	"'Then' expected"
30f67     00          | 	byte	0
30f68                 | LR__5547
30f68     45 72 72 6F 
30f6c     72 20       | 	byte	"Error "
30f6e     00          | 	byte	0
30f6f                 | LR__5548
30f6f     3A 20       | 	byte	": "
30f71     00          | 	byte	0
30f72                 | LR__5549
30f72     2F 73 64    | 	byte	"/sd"
30f75     00          | 	byte	0
30f76                 | LR__5550
30f76     2F 73 64 2F 
30f7a     62 61 73    | 	byte	"/sd/bas"
30f7d     00          | 	byte	0
30f7e                 | LR__5551
30f7e     2F 73 64 2F 
30f82     62 61 73    | 	byte	"/sd/bas"
30f85     00          | 	byte	0
30f86                 | LR__5552
30f86     20 42 41 53 
30f8a     49 43 20 62 
30f8e     79 74 65 73 
30f92     20 66 72 65 
30f96     65          | 	byte	" BASIC bytes free"
30f97     00          | 	byte	0
30f98                 | LR__5553
30f98     52 65 61 64 
30f9c     79          | 	byte	"Ready"
30f9d     00          | 	byte	0
30f9e                 | LR__5554
30f9e     6E 6F 6E 61 
30fa2     6D 65 2E 62 
30fa6     61 73       | 	byte	"noname.bas"
30fa8     00          | 	byte	0
30fa9                 | LR__5555
30fa9                 | 	byte	
30fa9     00          | 	byte	0
30faa     00 00       | 	alignl
30fac                 | _dat_
30fac     00 00 00 00 
30fb0     00 00 00 00 
30fb4     00 00 00 00 
30fb8     00 00 00 00 | 	byte	$00[16]
30fbc     61 41 17 0E 
30fc0     62 42 00 00 
30fc4     63 43 19 10 
30fc8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
30fcc     65 45 18 0F 
30fd0     66 46 00 00 
30fd4     67 47 00 00 
30fd8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
30fdc     69 49 00 00 
30fe0     6A 4A 00 00 
30fe4     6B 4B 00 00 
30fe8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
30fec     6D 4D 00 00 
30ff0     6E 4E 1A 11 
30ff4     6F 4F 1E 15 
30ff8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
30ffc     71 51 00 00 
31000     72 52 00 00 
31004     73 53 1B 12 
31008     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3100c     75 55 00 00 
31010     76 56 00 00 
31014     77 57 00 00 
31018     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3101c     79 59 00 00 
31020     7A 5A 1D 14 
31024     31 21 04 00 
31028     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3102c     33 23 06 00 
31030     34 24 07 00 
31034     35 25 08 00 
31038     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3103c     37 26 0A 00 
31040     38 2A 0B 00 
31044     39 28 0C 00 
31048     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3104c     8D 8D 00 00 
31050     9B 9B 00 00 
31054     88 88 00 00 
31058     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
3105c     20 20 00 00 
31060     2D 5F 00 00 
31064     3D 2B 00 00 
31068     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
3106c     5D 7D 00 00 
31070     5C 7C 00 00 
31074     23 7E 00 00 
31078     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
3107c     27 22 00 00 
31080     60 7E 03 00 
31084     2C 3C 00 00 
31088     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
3108c     2F 3F 00 00 
31090     B9 B9 00 00 
31094     BA 00 00 00 
31098     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
3109c     BC 00 00 00 
310a0     BD 00 00 00 
310a4     BE 00 00 00 
310a8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
310ac     C0 00 00 00 
310b0     C1 00 00 00 
310b4     C2 00 00 00 
310b8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
310bc     C4 00 00 00 
310c0     C5 00 00 00 
310c4     C6 00 00 00 
310c8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
310cc     C8 00 00 00 
310d0     C9 00 00 00 
310d4     CA 00 00 00 
310d8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
310dc     7F 7F 00 00 
310e0     CC 00 00 00 
310e4     CD 00 00 00 
310e8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
310ec     CF 00 00 00 
310f0     D0 00 00 00 
310f4     D1 00 00 00 
310f8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
310fc     2F 2F 00 00 
31100     2A 2A 00 00 
31104     2D 2D 00 00 
31108     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
3110c     8D 8D 00 00 
31110     31 31 00 00 
31114     32 32 00 00 
31118     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3111c     34 34 00 00 
31120     35 35 00 00 
31124     36 36 00 00 
31128     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3112c     38 38 00 00 
31130     39 39 00 00 
31134     30 30 00 00 
31138     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3113c     5C 7C 00 00 
31140     00 00 00 00 
31144     00 00 00 00 
31148     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
3114c     00 00 00 00 
      ...             
311a4     00 00 00 00 
311a8     00 00 00 00 | 	byte	$00[96]
311ac     2B 00 A6 F2 
311b0     24 A7 09 80 
311b4     5B 88 4D 89 
311b8     80 88 A5 88 | atari_spl file "atari.spl"
311bc     6D 88 B8 88 
311c0     80 88 CB 88 
311c4     92 88 A5 88 
311c8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
311cc     A5 88 CA 88 
311d0     A6 88 DD 88 
311d4     B8 88 AB 89 
311d8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
311dc     C8 AD C6 F1 
311e0     91 06 B6 FF 
311e4     13 00 4A 00 
311e8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
311ec     5D 00 5E 00 
311f0     5D 00 5E 00 
311f4     5E 00 5D 00 
311f8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
311fc     38 00 83 00 
31200     25 00 83 00 
31204     C3 FE D1 04 
31208     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3120c     48 88 38 85 
31210     41 8A CB 88 
31214     28 89 B8 88 
31218     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3121c     15 89 03 89 
31220     02 89 15 89 
31224     16 89 15 89 
31228     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3122c     15 89 3A 89 
31230     72 89 E3 89 
31234     52 83 AD 97 
31238     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3123c     0C 02 B6 FF 
31240     E1 00 A8 00 
31244     F3 00 A8 00 
31248     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3124c     CE 00 CD 00 
31250     CD 00 BA 00 
31254     E1 00 BB 00 
31258     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3125c     DF 00 C9 FF 
31260     E6 01 B6 06 
31264     EE DD 8D 98 
31268     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
3126c     97 89 73 89 
31270     3B 89 60 89 
31274     60 89 60 89 
31278     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
3127c     73 89 72 89 
31280     85 89 73 89 
31284     AA 89 60 89 
31288     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
3128c     E8 8A 18 86 
31290     92 88 A5 C2 
31294     E0 00 C3 05 
31298     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
3129c     F2 00 64 01 
312a0     06 01 3E 01 
312a4     2B 01 2B 01 
312a8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
312ac     2B 01 2A 01 
312b0     2B 01 2B 01 
312b4     2B 01 18 01 
312b8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
312bc     39 07 61 F3 
312c0     C0 AF 37 85 
312c4     0F 88 8B 8A 
312c8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
312cc     AB 89 D0 89 
312d0     AB 89 D0 89 
312d4     D0 89 CF 89 
312d8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
312dc     D0 89 F5 89 
312e0     BD 89 08 8A 
312e4     CF 89 E8 8A 
312e8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
312ec     53 B3 0D F8 
312f0     F4 07 38 00 
312f4     63 01 63 01 
312f8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
312fc     88 01 88 01 
31300     76 01 88 01 
31304     88 01 89 01 
31308     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3130c     75 01 AE 01 
31310     76 01 88 01 
31314     4A 00 46 06 
31318     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3131c     08 8A 9A 86 
31320     33 8B 08 8A 
31324     2D 8A F5 89 
31328     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3132c     2D 8A 2D 8A 
31330     2E 8A 1B 8A 
31334     40 8A 2D 8A 
31338     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3133c     2E 8A 79 8A 
31340     66 8A C8 8B 
31344     72 82 2B 97 
31348     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3134c     1D 02 05 01 
31350     F8 01 C0 01 
31354     0B 02 C0 01 
31358     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3135c     F9 01 D3 01 
31360     F8 01 D3 01 
31364     F8 01 D2 01 
31368     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
3136c     E6 01 2B 01 
31370     8E 02 5F 07 
31374     F7 E2 ED 9C 
31378     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
3137c     E8 8A 78 8A 
31380     78 8A 65 8A 
31384     8B 8A 78 8A 
31388     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
3138c     8B 8A 9D 8A 
31390     9D 8A 8B 8A 
31394     C2 8A 78 8A 
31398     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
3139c     70 8C 18 86 
313a0     8B 8A 23 C9 
313a4     CB 03 C4 05 
313a8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
313ac     0B 02 7B 02 
313b0     1E 02 55 02 
313b4     30 02 43 02 
313b8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
313bc     43 02 44 02 
313c0     43 02 30 02 
313c4     68 02 31 02 
313c8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
313cc     07 08 3F F7 
313d0     73 B2 13 85 
313d4     15 89 ED 8B 
313d8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
313dc     B0 8A FB 8A 
313e0     D5 8A FA 8A 
313e4     E8 8A FB 8A 
313e8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
313ec     E8 8A 21 8B 
313f0     E7 8A 33 8B 
313f4     E8 8A 26 8C 
313f8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
313fc     8D B0 27 F6 
31400     9C 08 AD 01 
31404     7B 02 8D 02 
31408     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3140c     A1 02 A0 02 
31410     A1 02 A0 02 
31414     A0 02 A0 02 
31418     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3141c     7B 02 D8 02 
31420     7B 02 C6 02 
31424     3E 01 C3 05 
31428     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3142c     00 8C 2A 86 
31430     E0 8C FA 8A 
31434     6A 8B FB 8A 
31438     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3143c     45 8B 45 8B 
31440     45 8B 6B 8B 
31444     46 8B 59 8B 
31448     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3144c     6B 8B 6B 8B 
31450     6B 8B 6B 8B 
31454     7D 8B 7D 8B 
31458     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3145c     90 8B 91 8B 
31460     90 8B 90 8B 
31464     A3 8B A3 8B 
31468     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3146c     B5 8B B6 8B 
31470     B5 8B B5 8B 
31474     B6 8B C8 8B 
31478     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
3147c     C8 8B DA 8B 
31480     DB 8B DB 8B 
31484     DB 8B DC 8B 
31488     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
3148c     EE 8B EE 8B 
31490     00 8C 01 8C 
31494     00 8C 01 8C 
31498     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
3149c     12 8C 13 8C 
314a0     13 8C 26 8C 
314a4     26 8C 26 8C 
314a8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
314ac     38 8C 38 8C 
314b0     38 8C 38 8C 
314b4     4B 8C 4B 8C 
314b8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
314bc     5E 8C 5E 8C 
314c0     5E 8C 5E 8C 
314c4     70 8C 70 8C 
314c8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
314cc     70 8C 83 8C 
314d0     83 8C 83 8C 
314d4     83 8C 96 8C 
314d8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
314dc     95 8C A9 8C 
314e0     A9 8C A8 8C 
314e4     A8 8C A8 8C 
314e8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
314ec     BB 8C BB 8C 
314f0     BB 8C CE 8C 
314f4     CE 8C CE 8C 
314f8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
314fc     E0 8C E1 8C 
31500     E1 8C E0 8C 
31504     F4 8C F2 8C 
31508     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3150c     05 8D 05 8D 
31510     06 8D 06 8D 
31514     19 8D 19 8D 
31518     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3151c     18 8D 2B 8D 
31520     2B 8D 2B 8D 
31524     2A 8D 3E 8D 
31528     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3152c     3E 8D 51 8D 
31530     50 8D 50 8D 
31534     50 8D 51 8D 
31538     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3153c     63 8D 64 8D 
31540     76 8D 75 8D 
31544     75 8D 76 8D 
31548     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3154c     88 8D 88 8D 
31550     89 8D 9B 8D 
31554     9A 8D 9B 8D 
31558     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3155c     AD 8D AE 8D 
31560     AD 8D AE 8D 
31564     C1 8D C1 8D 
31568     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3156c     D3 8D D3 8D 
31570     D3 8D D3 8D 
31574     D3 8D E6 8D 
31578     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3157c     E6 8D E6 8D 
31580     F9 8D F9 8D 
31584     F9 8D F8 8D 
31588     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
3158c     0B 8E 0B 8E 
31590     1D 8E 1D 8E 
31594     1E 8E 1E 8E 
31598     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
3159c     31 8E 31 8E 
315a0     31 8E 42 8E 
315a4     43 8E 43 8E 
315a8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
315ac     56 8E 56 8E 
315b0     55 8E 56 8E 
315b4     68 8E 69 8E 
315b8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
315bc     69 8E 7B 8E 
315c0     7C 8E 7B 8E 
315c4     7B 8E 8D 8E 
315c8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
315cc     8D 8E A1 8E 
315d0     A0 8E A1 8E 
315d4     A1 8E A0 8E 
315d8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
315dc     B3 8E B3 8E 
315e0     C6 8E C5 8E 
315e4     C6 8E C6 8E 
315e8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
315ec     D8 8E D9 8E 
315f0     D8 8E EC 8E 
315f4     EB 8E EC 8E 
315f8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
315fc     FE 8E FE 8E 
31600     FE 8E FE 8E 
31604     10 8F 10 8F 
31608     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3160c     11 8F 23 8F 
31610     24 8F 23 8F 
31614     24 8F 37 8F 
31618     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3161c     36 8F 36 8F 
31620     48 8F 49 8F 
31624     49 8F 49 8F 
31628     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3162c     5B 8F 5C 8F 
31630     5B 8F 6E 8F 
31634     6E 8F 6E 8F 
31638     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3163c     81 8F 81 8F 
31640     81 8F 81 8F 
31644     93 8F 93 8F 
31648     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3164c     93 8F A6 8F 
31650     A6 8F A6 8F 
31654     A6 8F B9 8F 
31658     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3165c     B9 8F B9 8F 
31660     CC 8F CB 8F 
31664     CB 8F CC 8F 
31668     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3166c     DF 8F DE 8F 
31670     DE 8F F1 8F 
31674     F1 8F F1 8F 
31678     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3167c     03 90 04 90 
31680     04 90 04 90 
31684     16 90 17 90 
31688     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
3168c     29 90 28 90 
31690     29 90 28 90 
31694     29 90 3C 90 
31698     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
3169c     3C 90 4F 90 
316a0     4E 90 4E 90 
316a4     4E 90 4E 90 
316a8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
316ac     61 90 61 90 
316b0     73 90 74 90 
316b4     74 90 74 90 
316b8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
316bc     87 90 86 90 
316c0     87 90 86 90 
316c4     99 90 99 90 
316c8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
316cc     AB 90 AB 90 
316d0     AC 90 AB 90 
316d4     AB 90 BF 90 
316d8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
316dc     BE 90 D1 90 
316e0     D0 90 D1 90 
316e4     D1 90 D1 90 
316e8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
316ec     E3 90 E4 90 
316f0     F6 90 F6 90 
316f4     F6 90 F6 90 
316f8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
316fc     09 91 0A 91 
31700     0A 91 1C 91 
31704     1C 91 1C 91 
31708     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3170c     2F 91 2E 91 
31710     2F 91 2F 91 
31714     2E 91 41 91 
31718     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3171c     41 91 53 91 
31720     54 91 54 91 
31724     53 91 54 91 
31728     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3172c     67 91 67 91 
31730     79 91 7A 91 
31734     79 91 78 91 
31738     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3173c     8C 91 8B 91 
31740     8C 91 8C 91 
31744     9E 91 9E 91 
31748     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3174c     B1 91 B1 91 
31750     B2 91 B1 91 
31754     B1 91 C4 91 
31758     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3175c     C4 91 D6 91 
31760     D7 91 D7 91 
31764     D7 91 D6 91 
31768     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3176c     EA 91 EA 91 
31770     EA 91 FC 91 
31774     FC 91 FB 91 
31778     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3177c     0E 92 0F 92 
31780     0F 92 0E 92 
31784     21 92 21 92 
31788     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3178c     21 92 34 92 
31790     33 92 34 92 
31794     34 92 47 92 
31798     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3179c     46 92 47 92 
317a0     59 92 59 92 
317a4     59 92 59 92 
317a8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
317ac     6C 92 6C 92 
317b0     6B 92 7E 92 
317b4     7E 92 7E 92 
317b8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
317bc     92 92 91 92 
317c0     91 92 90 92 
317c4     91 92 A4 92 
317c8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
317cc     A3 92 B6 92 
317d0     B6 92 B7 92 
317d4     B7 92 B6 92 
317d8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
317dc     CA 92 C9 92 
317e0     CA 92 DC 92 
317e4     DC 92 DC 92 
317e8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
317ec     EF 92 EF 92 
317f0     EF 92 EF 92 
317f4     01 93 01 93 
317f8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
317fc     15 93 14 93 
31800     14 93 14 93 
31804     14 93 27 93 
31808     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3180c     27 93 39 93 
31810     3A 93 39 93 
31814     39 93 39 93 
31818     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3181c     4B 93 4C 93 
31820     5F 93 5F 93 
31824     5F 93 5E 93 
31828     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3182c     5F 93 84 93 
31830     4C 93 96 93 
31834     5F 93 AE 94 
31838     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3183c     7B C1 00 00 
31840     00 00 00 00 
31844     00 00 00 00 
31848     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3184c     00 00 00 00 | 	byte	$00, $00, $00, $00
31850     7A D7 00 80 
31854     87 8A 48 8F 
31858     EC 8C 76 8D 
3185c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31860     3C 8D 82 8D 
31864     42 8D 88 8D 
31868     8C 8D 8E 8D 
3186c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31870     97 8D DE 8D 
31874     E1 8D F1 8E 
31878     D8 8C A3 83 
3187c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
31880     65 71 C9 65 
31884     FC 64 C4 65 
31888     C1 65 BF 65 
3188c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31890     B6 65 B4 65 
31894     B2 65 AE 65 
31898     AC 65 ED 65 
3189c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
318a0     5E 65 25 66 
318a4     FA 62 23 6B 
318a8     B5 6C 61 0A 
318ac     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
318b0     5D 90 BE 8D 
318b4     47 8E C3 8D 
318b8     09 8E C9 8D 
318bc     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
318c0     15 8E 19 8E 
318c4     1B 8E 62 8E 
318c8     64 8E 68 8E 
318cc     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
318d0     B5 8E 4C 90 
318d4     FA 84 3C 9D 
318d8     98 13 79 6D 
318dc     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
318e0     D9 66 50 66 
318e4     D4 66 4B 66 
318e8     8C 66 46 66 
318ec     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
318f0     81 66 3A 66 
318f4     7C 66 36 66 
318f8     76 66 30 66 
318fc     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31900     6B 66 88 72 
31904     BF 37 E7 B7 
31908     75 83 8B 8E 
3190c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31910     94 8E 96 8E 
31914     DD 8E 9C 8E 
31918     E2 8E A2 8E 
3191c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31920     EE 8E AE 8E 
31924     38 8F B5 8E 
31928     3F 8F FD 8E 
3192c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31930     A5 87 1E E3 
31934     6D 5D FA 71 
31938     41 64 25 67 
3193c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31940     D9 66 1A 67 
31944     18 67 15 67 
31948     12 67 0F 67 
3194c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31950     07 67 C0 66 
31954     01 67 BC 66 
31958     B8 66 DE 64 
3195c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31960     43 E5 1F 8B 
31964     14 8A F1 90 
31968     1C 8F 63 8F 
3196c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31970     29 8F 6E 8F 
31974     72 8F 75 8F 
31978     34 8F BE 8F 
3197c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31980     84 8F 87 8F 
31984     CC 8F 56 90 
31988     67 91 49 80 
3198c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31990     46 77 A6 66 
31994     E8 66 B0 67 
31998     AD 67 ED 67 
3199c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
319a0     A2 67 E3 67 
319a4     9D 67 9A 67 
319a8     98 67 94 67 
319ac     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
319b0     49 67 CD 67 
319b4     28 65 5F 6E 
319b8     82 67 3A 01 
319bc     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
319c0     C2 91 A9 8F 
319c4     EF 8F AE 8F 
319c8     F4 8F B5 8F 
319cc     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
319d0     01 90 03 90 
319d4     07 90 09 90 
319d8     0C 90 53 90 
319dc     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
319e0     18 90 44 93 
319e4     85 84 D6 9D 
319e8     87 1F 2F 75 
319ec     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
319f0     C4 68 F6 67 
319f4     BE 68 F1 67 
319f8     76 68 2E 68 
319fc     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31a00     27 68 24 68 
31a04     64 68 1E 68 
31a08     5F 68 19 68 
31a0c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31a10     DC 68 56 72 
31a14     7E 36 C2 B8 
31a18     D7 84 73 90 
31a1c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31a20     7B 90 7F 90 
31a24     82 90 84 90 
31a28     CB 90 8B 90 
31a2c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31a30     D7 90 96 90 
31a34     20 91 59 90 
31a38     25 91 A2 90 
31a3c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31a40     D0 89 40 EE 
31a44     12 64 C4 71 
31a48     29 66 0C 69 
31a4c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31a50     C0 68 02 69 
31a54     FE 68 FB 68 
31a58     F9 68 F6 68 
31a5c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31a60     EE 68 A8 68 
31a64     2C 69 5F 68 
31a68     E2 68 81 66 
31a6c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31a70     1E EB A6 8A 
31a74     73 8B 5E 93 
31a78     7B 90 48 91 
31a7c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31a80     0D 91 11 91 
31a84     14 91 16 91 
31a88     5C 91 1C 91 
31a8c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31a90     68 91 AF 91 
31a94     2A 91 B5 91 
31a98     75 91 1A 94 
31a9c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31aa0     70 0E CB 6C 
31aa4     5D 6E C4 67 
31aa8     99 69 54 69 
31aac     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31ab0     D2 69 49 69 
31ab4     89 69 86 69 
31ab8     40 69 C4 69 
31abc     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31ac0     35 69 76 69 
31ac4     58 67 EB 6D 
31ac8     E9 6D 89 0F 
31acc     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31ad0     33 94 94 91 
31ad4     D9 91 56 91 
31ad8     E0 91 9F 91 
31adc     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31ae0     EC 91 EE 91 
31ae4     F1 91 F4 91 
31ae8     F7 91 3D 92 
31aec     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31af0     46 92 21 94 
31af4     11 89 A4 9D 
31af8     FD 0E 8F 6C 
31afc     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31b00     28 6A E1 69 
31b04     65 6A 1F 6A 
31b08     5F 6A 1A 6A 
31b0c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31b10     54 6A 0F 6A 
31b14     4F 6A 09 6A 
31b18     06 6A 03 6A 
31b1c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31b20     23 68 69 77 
31b24     3A 4D 38 CA 
31b28     38 86 4E 91 
31b2c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31b30     64 92 24 92 
31b34     6A 92 2A 92 
31b38     70 92 30 92 
31b3c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31b40     7B 92 7E 92 
31b44     C5 92 84 92 
31b48     CB 92 8A 92 
31b4c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31b50     4D 8D F9 E2 
31b54     97 59 FE 74 
31b58     DB 68 6D 6A 
31b5c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31b60     A8 6A A5 6A 
31b64     A3 6A 9F 6A 
31b68     9D 6A 9B 6A 
31b6c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31b70     D6 6A 8F 6A 
31b74     CF 6A 46 6A 
31b78     CA 6A E1 67 
31b7c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31b80     D3 F7 15 92 
31b84     90 8C BF 94 
31b88     A6 92 EB 92 
31b8c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31b90     B1 92 F7 92 
31b94     FA 92 FD 92 
31b98     00 93 02 93 
31b9c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31ba0     4F 93 52 93 
31ba4     54 93 22 94 
31ba8     5A 93 8F 88 
31bac     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31bb0     1C 77 07 6C 
31bb4     E8 69 7A 6B 
31bb8     34 6B 75 6B 
31bbc     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31bc0     29 6B 26 6B 
31bc4     24 6B 21 6B 
31bc8     1D 6B 5E 6B 
31bcc     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31bd0     12 6B 52 6B 
31bd4     34 69 34 6E 
31bd8     BA 73 A4 24 
31bdc     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31be0     7A 94 B3 93 
31be4     72 93 31 93 
31be8     78 93 7A 93 
31bec     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31bf0     83 93 86 93 
31bf4     89 93 D0 93 
31bf8     D2 93 D5 93 
31bfc     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31c00     DD 93 40 96 
31c04     30 8B 99 9C 
31c08     52 10 94 71 
31c0c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31c10     46 6C 79 6B 
31c14     40 6C B7 6B 
31c18     F7 6B B1 6B 
31c1c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31c20     EC 6B A5 6B 
31c24     A2 6B 9F 6B 
31c28     9D 6B 9A 6B 
31c2c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31c30     C8 6A E4 76 
31c34     20 4B F9 CE 
31c38     2E 8A 1A 92 
31c3c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31c40     FB 93 BA 93 
31c44     01 94 03 94 
31c48     4A 94 09 94 
31c4c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31c50     55 94 14 94 
31c54     9E 94 1A 94 
31c58     61 94 20 94 
31c5c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31c60     3E 87 E5 CD 
31c64     5F 50 6C 78 
31c68     B5 6A 04 6C 
31c6c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31c70     83 6C 7F 6C 
31c74     7C 6C 36 6C 
31c78     76 6C 74 6C 
31c7c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31c80     6B 6C 25 6C 
31c84     66 6C 1F 6C 
31c88     1D 6C 41 6A 
31c8c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31c90     BA FA FC 94 
31c94     5B 8D 97 96 
31c98     3B 94 C5 94 
31c9c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31ca0     89 94 8C 94 
31ca4     8F 94 92 94 
31ca8     94 94 DB 94 
31cac     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31cb0     E4 94 E7 94 
31cb4     2D 95 74 95 
31cb8     C8 96 15 89 
31cbc     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31cc0     CB 75 31 6F 
31cc4     7E 6B 10 6D 
31cc8     C9 6C 0A 6D 
31ccc     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31cd0     BD 6C FF 6C 
31cd4     FB 6C F9 6C 
31cd8     B2 6C F3 6C 
31cdc     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31ce0     A7 6C E8 6C 
31ce4     0D 6B 85 6F 
31ce8     C7 74 10 28 
31cec     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31cf0     96 96 47 95 
31cf4     06 95 0A 95 
31cf8     0C 95 0F 95 
31cfc     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31d00     17 95 5E 95 
31d04     61 95 63 95 
31d08     22 95 AC 95 
31d0c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31d10     72 95 17 98 
31d14     59 8E 01 96 
31d18     CF FC 5A 68 
31d1c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31d20     96 6D 50 6D 
31d24     D5 6D 4A 6D 
31d28     8C 6D 89 6D 
31d2c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31d30     80 6D 3A 6D 
31d34     7A 6D 77 6D 
31d38     75 6D 71 6D 
31d3c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31d40     18 6C BC 78 
31d44     9A 4F 7E CF 
31d48     1F 89 F1 93 
31d4c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31d50     D2 95 4E 95 
31d54     D7 95 53 95 
31d58     DD 95 E0 95 
31d5c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31d60     A5 95 EB 95 
31d64     EE 95 F0 95 
31d68     37 96 B3 95 
31d6c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31d70     1A 98 D5 8D 
31d74     C5 9F CD 0F 
31d78     0F 71 F3 73 
31d7c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31d80     D9 6D 5E 6E 
31d84     D3 6D 58 6E 
31d88     12 6E 0F 6E 
31d8c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31d90     49 6E BF 6D 
31d94     87 6E 76 6D 
31d98     81 6E 11 6B 
31d9c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31da0     3F 09 44 95 
31da4     E5 8D 3F 99 
31da8     D4 95 A2 96 
31dac     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31db0     23 96 69 96 
31db4     6B 96 6E 96 
31db8     71 96 74 96 
31dbc     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31dc0     BF 96 3C 96 
31dc4     C6 96 C8 96 
31dc8     A3 98 51 8D 
31dcc     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31dd0     CF 75 29 73 
31dd4     90 6C EC 6E 
31dd8     62 6E E7 6E 
31ddc     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31de0     9A 6E 98 6E 
31de4     95 6E 91 6E 
31de8     8E 6E CF 6E 
31dec     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31df0     40 6E C3 6E 
31df4     E8 6C 45 6F 
31df8     A5 7B C9 35 
31dfc     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31e00     2D 98 23 97 
31e04     E1 96 A0 96 
31e08     A4 96 EA 96 
31e0c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31e10     AF 96 F4 96 
31e14     F8 96 3E 97 
31e18     FD 96 43 97 
31e1c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31e20     08 97 6B 99 
31e24     D6 92 88 91 
31e28     D8 EE 84 66 
31e2c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31e30     2E 6F E7 6E 
31e34     6C 6F 24 6F 
31e38     21 6F 1F 6F 
31e3c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31e40     17 6F 13 6F 
31e44     54 6F 0E 6F 
31e48     0B 6F 4B 6F 
31e4c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31e50     27 6D 1C 7B 
31e54     19 59 9F DB 
31e58     66 8E BC 94 
31e5c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31e60     67 97 26 97 
31e64     6D 97 2B 97 
31e68     72 97 32 97 
31e6c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31e70     C1 97 7F 97 
31e74     C6 97 85 97 
31e78     CB 97 CE 97 
31e7c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31e80     EC 8A C4 C6 
31e84     68 4C F4 7D 
31e88     63 6E E8 6E 
31e8c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
31e90     ED 6F A7 6F 
31e94     E7 6F A0 6F 
31e98     E1 6F 9B 6F 
31e9c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
31ea0     D5 6F 8F 6F 
31ea4     CE 6F 45 6F 
31ea8     86 6F 68 6D 
31eac     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
31eb0     C0 13 AD A2 
31eb4     A7 8E 79 99 
31eb8     E6 97 E8 97 
31ebc     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
31ec0     F1 97 F3 97 
31ec4     F6 97 F9 97 
31ec8     FB 97 FE 97 
31ecc     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
31ed0     4A 98 0A 98 
31ed4     93 98 0F 98 
31ed8     7F 9B BF 8C 
31edc     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
31ee0     91 7B 62 73 
31ee4     1A 6E B9 70 
31ee8     EB 6F B3 70 
31eec     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
31ef0     25 70 20 70 
31ef4     1E 70 1B 70 
31ef8     18 70 15 70 
31efc     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
31f00     0D 70 09 70 
31f04     07 70 03 70 
31f08     01 70 FD 6F 
31f0c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
31f10     F6 6F F2 6F 
31f14     EF 6F EC 6F 
31f18     2C 70 E6 6F 
31f1c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
31f20     DD 6F 97 6F 
31f24     D7 6F 84 6E 
31f28     8F 6F 3F 7D 
31f2c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
31f2e     FF FF FF FF 
31f32     FF FF       | atarist_spl file "atarist.spl" '512
31f34     00 00 00 00 
31f38     00 00 00 00 
31f3c     00 00       | 	byte	$00[10]
31f3e     17 7F F2 7F 
31f42     B2 7F 72 7F 
31f46     33 7F F4 7E 
31f4a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
31f4e     36 7E F5 7D 
31f52     E9 51 F2 0D 
31f56     8E 00 F3 FD 
31f5a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
31f5e     57 FD 58 FD 
31f62     5B FD 5C FD 
31f66     5C FD 60 7D 
31f6a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
31f6e     D6 7C 98 7C 
31f72     59 7C 1A 7C 
31f76     DC 7B 9E 7B 
31f7a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
31f7e     F3 05 00 FD 
31f82     41 FB EA FA 
31f86     D9 FA DB FA 
31f8a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
31f8e     E4 FA 9B 36 
31f92     F8 7A C0 7A 
31f96     84 7A 45 7A 
31f9a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
31f9e     8E 79 51 79 
31fa2     15 79 D7 78 
31fa6     3C 1F EB FF 
31faa     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
31fae     6D F8 65 F8 
31fb2     68 F8 6D F8 
31fb6     70 F8 74 F8 
31fba     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
31fbe     AB 60 79 60 
31fc2     4B 60 1A 60 
31fc6     E9 5F B9 5F 
31fca     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
31fce     FB 59 B2 0B 
31fd2     92 FA 3A F7 
31fd6     96 F6 79 F6 
31fda     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
31fde     82 F6 86 F6 
31fe2     8C F6 DB 5D 
31fe6     F1 5E C1 5E 
31fea     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
31fee     34 5E 04 5E 
31ff2     D6 5D A6 5D 
31ff6     78 5D D4 3E 
31ffa     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
31ffe     27 F5 BA F4 
32002     AB F4 AD F4 
32006     B2 F4 B8 F4 
3200a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3200e     26 5D 2B 5D 
32012     FC 5C CD 5C 
32016     9F 5C 70 5C 
3201a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3201e     E5 5B B8 5B 
32022     DB 24 A7 FC 
32026     D1 F4 4D F3 
3202a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3202e     04 F3 0B F3 
32032     11 F3 16 F3 
32036     DE 18 98 5B 
3203a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3203e     4E 4A 29 48 
32042     A0 47 6A 47 
32046     43 47 20 47 
3204a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3204e     E2 F6 98 F2 
32052     C5 F1 A3 F1 
32056     A3 F1 A8 F1 
3205a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3205e     BF F1 00 3D 
32062     EF 46 CD 46 
32066     AA 46 86 46 
3206a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3206e     1C 46 F9 45 
32072     D7 45 EE 43 
32076     DE 02 E8 F3 
3207a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3207e     61 F0 65 F0 
32082     6D F0 74 F0 
32086     7C F0 84 F0 
3208a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3208e     8E 45 6D 45 
32092     49 45 27 45 
32096     05 45 E1 44 
3209a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3209e     F1 2F A9 FB 
320a2     8B F1 9B EF 
320a6     40 EF 36 EF 
320aa     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
320ae     4D EF 56 EF 
320b2     5E EF 7B 44 
320b6     8C 44 69 44 
320ba     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
320be     03 44 E1 43 
320c2     C0 43 F5 37 
320c6     69 33 0F 11 
320ca     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
320ce     66 EE 37 EE 
320d2     38 EE 40 EE 
320d6     48 EE 51 EE 
320da     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
320de     7D 32 6A 32 
320e2     51 32 37 32 
320e6     1F 32 05 32 
320ea     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
320ee     B9 31 A1 31 
320f2     F1 04 F4 F1 
320f6     50 EE A0 ED 
320fa     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
320fe     93 ED 9A ED 
32102     A4 ED AD ED 
32106     F4 27 C1 31 
3210a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3210e     78 31 5F 31 
32112     46 31 2E 31 
32116     15 31 FC 30 
3211a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3211e     C4 EF 4A ED 
32122     DC EC CB EC 
32126     D2 EC DA EC 
3212a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3212e     F9 EC 64 2F 
32132     0A 31 F1 30 
32136     D9 30 C0 30 
3213a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3213e     78 30 5F 30 
32142     46 30 38 23 
32146     A6 F6 19 EE 
3214a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3214e     20 EC 28 EC 
32152     32 EC 3C EC 
32156     47 EC 51 EC 
3215a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3215e     A3 22 93 22 
32162     7F 22 6E 22 
32166     5D 22 4C 22 
3216a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3216e     77 09 76 F1 
32172     CC EC F0 EB 
32176     CD EB CE EB 
3217a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3217e     ED EB F5 EB 
32182     3E F6 6B 22 
32186     5F 22 4E 22 
3218a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3218e     1B 22 0B 22 
32192     FA 21 E9 21 
32196     D8 21 4D FF 
3219a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3219e     92 EB 7B EB 
321a2     82 EB 8C EB 
321a6     97 EB A1 EB 
321aa     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
321ae     15 22 04 22 
321b2     F3 21 E3 21 
321b6     D2 21 C0 21 
321ba     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
321be     8E 21 7D 21 
321c2     9A F8 A4 ED 
321c6     8E EB 2F EB 
321ca     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
321ce     37 EB 42 EB 
321d2     4C EB 57 EB 
321d6     B2 17 22 19 
321da     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
321de     FD 18 EF 18 
321e2     E3 18 D6 18 
321e6     CA 18 BD 18 
321ea     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
321ee     60 EC 35 EB 
321f2     01 EB 01 EB 
321f6     0C EB 16 EB 
321fa     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
321fe     34 EB D0 18 
32202     00 19 F4 18 
32206     E8 18 DA 18 
3220a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3220e     B6 18 A9 18 
32212     9D 18 91 05 
32216     F0 EF CA EB 
3221a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3221e     E8 EA F2 EA 
32222     FE EA 07 EB 
32226     12 EB C2 EF 
3222a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3222e     D9 18 CD 18 
32232     C0 18 B3 18 
32236     A7 18 9B 18 
3223a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3223e     B8 FC 30 EE 
32242     61 EB DC EA 
32246     CD EA D2 EA 
3224a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3224e     F3 EA FE EA 
32252     D2 09 D1 18 
32256     C3 18 17 18 
3225a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3225e     66 11 52 11 
32262     49 11 41 11 
32266     38 11 E0 F4 
3226a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3226e     C9 EA C5 EA 
32272     CF EA DB EA 
32276     E6 EA EF EA 
3227a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3227e     89 11 80 11 
32282     78 11 6E 11 
32286     67 11 5D 11 
3228a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3228e     43 11 32 0D 
32292     9C F1 07 EC 
32296     F8 EA CD EA 
3229a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3229e     E4 EA ED EA 
322a2     F8 EA 02 EB 
322a6     55 11 91 11 
322aa     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
322ae     75 11 6E 11 
322b2     64 11 5E 11 
322b6     54 11 4A 11 
322ba     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
322be     A8 EB F1 EA 
322c2     D9 EA DC EA 
322c6     E8 EA F1 EA 
322ca     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
322ce     A6 EB 9E 11 
322d2     A0 11 96 11 
322d6     8D 11 85 11 
322da     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
322de     6A 11 CA 0D 
322e2     36 0B 57 F8 
322e6     6C ED 57 EB 
322ea     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
322ee     F4 EA FF EA 
322f2     09 EB 15 EB 
322f6     1E EB 1A FD 
322fa     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
322fe     ED 0A E8 0A 
32302     E2 0A DC 0A 
32306     D6 0A D1 0A 
3230a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3230e     F8 F3 BC EC 
32312     57 EB 1E EB 
32316     18 EB 24 EB 
3231a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3231e     42 EB 4D EB 
32322     08 09 20 0B 
32326     1A 0B 14 0B 
3232a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3232e     04 0B FE 0A 
32332     F9 0A F2 0A 
32336     84 08 3A F1 
3233a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3233e     42 EB 42 EB 
32342     4E EB 57 EB 
32346     62 EB 6B EB 
3234a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3234e     48 0B 43 0B 
32352     3C 0B 36 0B 
32356     31 0B 2C 0B 
3235a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3235e     1B 0B 5C 00 
32362     6A EF 1B EC 
32366     81 EB 6A EB 
3236a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3236e     85 EB 8E EB 
32372     99 EB A3 EB 
32376     DD 05 E5 05 
3237a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3237e     DB 05 D8 05 
32382     D5 05 D1 05 
32386     D0 05 CB 05 
3238a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3238e     0C EC BB EB 
32392     B3 EB BB EB 
32396     C5 EB D0 EB 
3239a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3239e     E4 F7 2C 06 
323a2     28 06 24 06 
323a6     22 06 1F 06 
323aa     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
323ae     16 06 14 06 
323b2     0F 06 D0 F3 
323b6     65 ED 2D EC 
323ba     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
323be     01 EC 0A EC 
323c2     14 EC 1E EC 
323c6     29 EC FB 03 
323ca     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
323ce     63 06 60 06 
323d2     5E 06 59 06 
323d6     58 06 54 06 
323da     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
323de     69 F1 21 ED 
323e2     55 EC 33 EC 
323e6     36 EC 40 EC 
323ea     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
323ee     5C EC 68 EC 
323f2     92 02 D9 02 
323f6     D7 02 D7 02 
323fa     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
323fe     D1 02 D1 02 
32402     CE 02 CD 02 
32406     5D FC 80 EF 
3240a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3240e     83 EC 8A EC 
32412     93 EC 9C EC 
32416     A5 EC B1 EC 
3241a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3241e     2B 03 2A 03 
32422     29 03 26 03 
32426     25 03 24 03 
3242a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3242e     1F 03 70 F7 
32432     D0 EE 27 ED 
32436     DB EC D4 EC 
3243a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3243e     F0 EC FA EC 
32442     02 ED F9 F4 
32446     7B 03 7C 03 
3244a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3244e     75 03 73 03 
32452     72 03 70 03 
32456     6D 03 6C 03 
3245a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3245e     54 ED 22 ED 
32462     22 ED 2C ED 
32466     35 ED 3F ED 
3246a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3246e     14 01 C3 03 
32472     C1 03 C0 03 
32476     5F 01 A5 00 
3247a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3247e     7B 00 7C 00 
32482     20 00 85 F1 
32486     2A EE 89 ED 
3248a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3248e     80 ED 87 ED 
32492     90 ED 9A ED 
32496     A3 ED 73 00 
3249a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3249e     D0 00 D0 00 
324a2     D0 00 D0 00 
324a6     D0 00 CF 00 
324aa     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
324ae     80 F0 3D EE 
324b2     D5 ED C7 ED 
324b6     CD ED D6 ED 
324ba     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
324be     F2 ED FA ED 
324c2     1D 01 29 01 
324c6     27 01 27 01 
324ca     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
324ce     25 01 26 01 
324d2     26 01 23 01 
324d6     D0 F7 EC EF 
324da     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
324de     1C EE 24 EE 
324e2     2D EE 37 EE 
324e6     40 EE 47 EE 
324ea     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
324ee     7D 01 7B 01 
324f2     7A 01 7A 01 
324f6     79 01 78 01 
324fa     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
324fe     84 FE DE F3 
32502     6C EF 93 EE 
32506     72 EE 72 EE 
3250a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3250e     8B EE 95 EE 
32512     9E EE 15 FC 
32516     67 FE 67 FE 
3251a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3251e     6B FE 6B FE 
32522     6D FE 6D FE 
32526     6D FE 6F FE 
3252a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3252e     DF EE CC EE 
32532     CF EE D9 EE 
32536     E1 EE EA EE 
3253a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3253e     5A FE C4 FE 
32542     C3 FE C5 FE 
32546     C6 FE C6 FE 
3254a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3254e     C8 FE C7 FE 
32552     DA FB 85 F1 
32556     8D EF 31 EF 
3255a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3255e     34 EF 3E EF 
32562     46 EF 4F EF 
32566     57 EF 0D FF 
3256a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3256e     1F FF 1F FF 
32572     21 FF 21 FF 
32576     21 FF 21 FF 
3257a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3257e     15 F1 BE EF 
32582     84 EF 7E EF 
32586     88 EF 8F EF 
3258a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3258e     A9 EF 06 F2 
32592     A6 FC AB FC 
32596     AD FC AE FC 
3259a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3259e     B2 FC B4 FC 
325a2     B6 FC B7 FC 
325a6     8B F4 BD F0 
325aa     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
325ae     E4 EF EE EF 
325b2     F6 EF FD EF 
325b6     04 F0 0E F0 
325ba     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
325be     0B FD 0D FD 
325c2     0F FD 11 FD 
325c6     11 FD 13 FD 
325ca     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
325ce     17 FD 64 F3 
325d2     CD F0 52 F0 
325d6     41 F0 45 F0 
325da     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
325de     5B F0 64 F0 
325e2     6D F0 FB FC 
325e6     65 FD 68 FD 
325ea     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
325ee     6C FD 6D FD 
325f2     6F FD 70 FD 
325f6     72 FD B3 FB 
325fa     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
325fe     A4 F0 99 F0 
32602     A0 F0 A8 F0 
32606     AE F0 B9 F0 
3260a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3260e     CB FB DD FB 
32612     DE FB E0 FB 
32616     E3 FB E3 FB 
3261a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3261e     E9 FB EC FB 
32622     62 F7 27 F2 
32626     2A F1 FF F0 
3262a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3262e     0C F1 13 F1 
32632     1B F1 23 F1 
32636     33 F2 3C FC 
3263a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3263e     42 FC 45 FC 
32642     47 FC 48 FC 
32646     4A FC 4C FC 
3264a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3264e     20 F2 77 F1 
32652     5C F1 5F F1 
32656     64 F1 6C F1 
3265a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3265e     83 F1 DC F8 
32662     9A FC 9A FC 
32666     9B FC 9E FC 
3266a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3266e     A3 FC A4 FC 
32672     A6 FC A9 FC 
32676     90 F4 33 F2 
3267a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3267e     BA F1 BF F1 
32682     C7 F1 CE F1 
32686     D6 F1 DC F1 
3268a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3268e     F3 FC F5 FC 
32692     FE FB 79 FB 
32696     62 FB 5F FB 
3269a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3269e     6F FA AF F3 
326a2     53 F2 12 F2 
326a6     0F F2 15 F2 
326aa     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
326ae     2A F2 32 F2 
326b2     38 F2 9A FB 
326b6     AF FB B1 FB 
326ba     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
326be     B7 FB B8 FB 
326c2     BA FB BC FB 
326c6     C1 FB 3B F8 
326ca     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
326ce     6E F2 6C F2 
326d2     74 F2 7A F2 
326d6     81 F2 87 F2 
326da     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
326de     06 FC 09 FC 
326e2     0C FC 0E FC 
326e6     0F FC 12 FC 
326ea     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
326ee     17 FC 1A FC 
326f2     B2 F6 7B F3 
326f6     DD F2 C5 F2 
326fa     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
326fe     D4 F2 DB F2 
32702     E0 F2 E8 F2 
32706     28 F8 60 FC 
3270a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3270e     64 FC 66 FC 
32712     68 FC 6A FC 
32716     6D FC 52 FC 
3271a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3271e     78 F3 24 F3 
32722     1A F3 1E F3 
32726     24 F3 2A F3 
3272a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3272e     3D F3 80 FA 
32732     0C FB 0F FB 
32736     10 FB 14 FB 
3273a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3273e     1B FB 1D FB 
32742     1F FB 92 FA 
32746     DE F4 AE F3 
3274a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3274e     79 F3 7E F3 
32752     84 F3 8C F3 
32756     92 F3 97 F3 
3275a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3275e     67 FB 69 FB 
32762     6B FB 6F FB 
32766     71 FB 72 FB 
3276a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3276e     E3 F8 BA F4 
32772     EE F3 CC F3 
32776     CA F3 CF F3 
3277a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3277e     E2 F3 E8 F3 
32782     ED F3 B7 FB 
32786     BC FB BE FB 
3278a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3278e     C4 FB C6 FB 
32792     C8 FB C9 FB 
32796     CC FB 8F F7 
3279a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3279e     1E F4 1E F4 
327a2     24 F4 2A F4 
327a6     30 F4 38 F4 
327aa     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
327ae     AD FA B1 FA 
327b2     B4 FA B6 FA 
327b6     BA FA BB FA 
327ba     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
327be     C2 FA C6 FA 
327c2     55 F6 C6 F4 
327c6     7D F4 72 F4 
327ca     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
327ce     83 F4 89 F4 
327d2     8F F4 94 F4 
327d6     66 FA 03 FB 
327da     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
327de     0A FB 0E FB 
327e2     10 FB 11 FB 
327e6     16 FB 18 FB 
327ea     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
327ee     F9 F4 CA F4 
327f2     C5 F4 CB F4 
327f6     D1 F4 D7 F4 
327fa     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
327fe     E8 F4 3F FB 
32802     56 FB 58 FB 
32806     5A FB 5E FB 
3280a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3280e     64 FB 64 FB 
32812     69 FB 99 F9 
32816     E9 F5 33 F5 
3281a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3281e     1D F5 22 F5 
32822     27 F5 2E F5 
32826     32 F5 37 F5 
3282a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3282e     BC FA BC FA 
32832     C1 FA C2 FA 
32836     C4 FA C8 FA 
3283a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3283e     F9 F7 DB F5 
32842     78 F5 69 F5 
32846     6A F5 70 F5 
3284a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3284e     7F F5 85 F5 
32852     6E F7 06 FB 
32856     0A FB 0B FB 
3285a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3285e     14 FB 15 FB 
32862     18 FB 1B FB 
32866     1D FB 70 F7 
3286a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3286e     B6 F5 BB F5 
32872     C0 F5 C6 F5 
32876     CA F5 CF F5 
3287a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3287e     54 FB 56 FB 
32882     5A FB 5B FB 
32886     5E FB 5F FB 
3288a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3288e     67 FB 52 FB 
32892     29 F7 33 F6 
32896     06 F6 02 F6 
3289a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3289e     10 F6 16 F6 
328a2     1A F6 1F F6 
328a6     81 FB 9F FB 
328aa     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
328ae     51 FB F2 FA 
328b2     E3 FA E3 FA 
328b6     E5 FA E9 FA 
328ba     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
328be     64 F6 4D F6 
328c2     4D F6 53 F6 
328c6     57 F6 5C F6 
328ca     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
328ce     6A F6 19 FB 
328d2     1E FB 22 FB 
328d6     23 FB 24 FB 
328da     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
328de     2C FB 2E FB 
328e2     32 FB F0 F8 
328e6     01 F7 A5 F6 
328ea     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
328ee     9F F6 A3 F6 
328f2     A6 F6 AC F6 
328f6     B0 F6 EB F7 
328fa     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
328fe     68 FB 6C FB 
32902     6E FB 71 FB 
32906     72 FB 74 FB 
3290a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3290e     71 F8 21 F7 
32912     E5 F6 DD F6 
32916     E1 F6 E6 F6 
3291a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3291e     F5 F6 F7 F6 
32922     F7 FA AB FB 
32926     AD FB AF FB 
3292a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3292e     B6 FB B9 FB 
32932     BB FB BC FB 
32936     21 FB 07 F8 
3293a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3293e     22 F7 26 F7 
32942     2B F7 2E F7 
32946     34 F7 38 F7 
3294a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3294e     13 FB 16 FB 
32952     17 FB 1B FB 
32956     1E FB 20 FB 
3295a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3295e     26 FB 77 FA 
32962     F3 F7 7C F7 
32966     67 F7 6A F7 
3296a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3296e     74 F7 7A F7 
32972     7E F7 82 F7 
32976     53 FB 5A FB 
3297a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3297e     5F FB 63 FB 
32982     65 FB 67 FB 
32986     69 FB 6A FB 
3298a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3298e     B5 F7 A9 F7 
32992     AD F7 B0 F7 
32996     B5 F7 B8 F7 
3299a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3299e     6E F8 99 FB 
329a2     9C FB 9D FB 
329a6     9F FB A4 FB 
329aa     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
329ae     A9 FB AB FB 
329b2     AD FB 46 F9 
329b6     26 F8 F0 F7 
329ba     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
329be     F4 F7 F8 F7 
329c2     FB F7 FF F7 
329c6     03 F8 65 FA 
329ca     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
329ce     2B FB 2F FB 
329d2     30 FB 32 FB 
329d6     34 FB 38 FB 
329da     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
329de     E9 F8 4A F8 
329e2     2E F8 2C F8 
329e6     2F F8 36 F8 
329ea     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
329ee     41 F8 44 F8 
329f2     4A FB 67 FB 
329f6     68 FB 6B FB 
329fa     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
329fe     73 FB 74 FB 
32a02     78 FB 7A FB 
32a06     14 FB E7 F8 
32a0a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32a0e     6D F8 70 F8 
32a12     73 F8 78 F8 
32a16     7C F8 80 F8 
32a1a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32a1e     A6 FB A7 FB 
32a22     A9 FB AC FB 
32a26     AF FB B1 FB 
32a2a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32a2e     B7 FB 73 FA 
32a32     F8 F8 B4 F8 
32a36     A9 F8 AB F8 
32a3a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32a3e     B4 F8 B8 F8 
32a42     BB F8 FA F8 
32a46     64 FB 65 FB 
32a4a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32a4e     6D FB 6F FB 
32a52     70 FB 74 FB 
32a56     77 FB 77 FB 
32a5a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32a5e     E9 F8 E4 F8 
32a62     E8 F8 EB F8 
32a66     EE F8 F2 F8 
32a6a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32a6e     B5 FA 9F FB 
32a72     A1 FB A4 FB 
32a76     A5 FB A9 FB 
32a7a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32a7e     AE FB B1 FB 
32a82     B2 FB C7 F9 
32a86     39 F9 22 F9 
32a8a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32a8e     26 F9 2A F9 
32a92     2E F9 32 F9 
32a96     33 F9 BA FB 
32a9a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32a9e     DE FB E1 FB 
32aa2     E2 FB E4 FB 
32aa6     E5 FB E7 FB 
32aaa     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32aae     C5 F9 67 F9 
32ab2     57 F9 56 F9 
32ab6     5B F9 5F F9 
32aba     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32abe     68 F9 6C F9 
32ac2     0B FC 11 FC 
32ac6     14 FC 15 FC 
32aca     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32ace     B5 FB B5 FB 
32ad2     B6 FB B8 FB 
32ad6     E9 FA C8 F9 
32ada     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32ade     90 F9 94 F9 
32ae2     95 F9 99 F9 
32ae6     9D F9 9F F9 
32aea     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32aee     DE FB DF FB 
32af2     E2 FB E4 FB 
32af6     E6 FB E8 FB 
32afa     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32afe     EF FB AC FA 
32b02     E9 F9 C7 F9 
32b06     C3 F9 C8 F9 
32b0a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32b0e     D0 F9 D4 F9 
32b12     D6 F9 0E FB 
32b16     11 FC 13 FC 
32b1a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32b1e     19 FC 1B FC 
32b22     1D FC 1E FC 
32b26     21 FC 22 FC 
32b2a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32b2e     F7 F9 F7 F9 
32b32     FB F9 FE F9 
32b36     00 FA 03 FA 
32b3a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32b3e     1B FC 45 FC 
32b42     46 FC 48 FC 
32b46     4A FC 4B FC 
32b4a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32b4e     52 FC 54 FC 
32b52     F3 FB 82 FA 
32b56     35 FA 28 FA 
32b5a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32b5e     31 FA 32 FA 
32b62     37 FA 37 FA 
32b66     3C FA 00 FC 
32b6a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32b6e     09 FC 0B FC 
32b72     0F FC 12 FC 
32b76     12 FC 15 FC 
32b7a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32b7e     8D FA 60 FA 
32b82     5B FA 5C FA 
32b86     60 FA 61 FA 
32b8a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32b8e     6C FA 6D FA 
32b92     37 FC 3A FC 
32b96     3B FC 3D FC 
32b9a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32b9e     43 FC 44 FC 
32ba2     45 FC 47 FC 
32ba6     51 FB AB FA 
32baa     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32bae     8E FA 91 FA 
32bb2     93 FA 95 FA 
32bb6     98 FA 9B FA 
32bba     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32bbe     68 FC 6A FC 
32bc2     6C FC 6E FC 
32bc6     70 FC 72 FC 
32bca     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32bce     76 FC 3B FB 
32bd2     D0 FA BB FA 
32bd6     B9 FA BD FA 
32bda     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32bde     C4 FA C6 FA 
32be2     CA FA 13 FC 
32be6     3A FC 3A FC 
32bea     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32bee     41 FC 43 FC 
32bf2     44 FC 47 FC 
32bf6     48 FC 3C FC 
32bfa     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32bfe     E6 FA E8 FA 
32c02     EB FA EE FA 
32c06     F0 FA F2 FA 
32c0a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32c0e     61 FC 66 FC 
32c12     68 FC 6B FC 
32c16     6C FC 6E FC 
32c1a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32c1e     73 FC 75 FC 
32c22     13 FC 3F FB 
32c26     17 FB 12 FB 
32c2a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32c2e     1A FB 1D FB 
32c32     1F FB 20 FB 
32c36     23 FB 92 FC 
32c3a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32c3e     96 FC 97 FC 
32c42     9A FC 9C FC 
32c46     9E FC 9F FC 
32c4a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32c4e     5A FB 41 FB 
32c52     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32c56     73 32 00 04 
32c5a     00 00 10 00 
32c5e     00 00 00 00 
32c62     00 00 00 00 | atari2 file "atari2.s2"
32c66     43 87 43 87 
32c6a     43 87 44 87 
32c6e     43 87 44 87 
32c72     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32c76     43 87 43 87 
32c7a     43 87 44 87 
32c7e     43 87 43 87 
32c82     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32c86     44 87 43 87 
32c8a     44 87 43 87 
32c8e     43 87 43 87 
32c92     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32c96     43 87 43 87 
32c9a     44 87 43 87 
32c9e     44 87 44 87 
32ca2     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
32ca6     43 87 43 87 
32caa     44 87 43 87 
32cae     43 87 42 87 
32cb2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
32cb6     43 87 43 87 
32cba     43 87 43 87 
32cbe     44 87 43 87 
32cc2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
32cc6     44 87 44 87 
32cca     43 87 44 87 
32cce     43 87 44 87 
32cd2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
32cd6     44 87 43 87 
32cda     44 87 44 87 
32cde     43 87 43 87 
32ce2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
32ce6     43 87 44 87 
32cea     44 87 43 87 
32cee     43 87 44 87 
32cf2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32cf6     43 87 43 87 
32cfa     43 87 43 87 
32cfe     43 87 43 87 
32d02     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
32d06     42 87 43 87 
32d0a     44 87 42 87 
32d0e     43 87 43 87 
32d12     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
32d16     43 87 44 87 
32d1a     44 87 43 87 
32d1e     43 87 43 87 
32d22     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32d26     43 87 5C 87 
32d2a     EE 86 AC 87 
32d2e     4C 7C A3 78 
32d32     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
32d36     BC 78 BB 78 
32d3a     BD 78 BC 78 
32d3e     BB 78 BD 78 
32d42     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
32d46     BB 78 BB 78 
32d4a     BC 78 BC 78 
32d4e     BC 78 BB 78 
32d52     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
32d56     BC 78 BC 78 
32d5a     BC 78 BC 78 
32d5e     BC 78 BC 78 
32d62     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32d66     BB 78 BC 78 
32d6a     A0 78 4C 7C 
32d6e     11 7A 29 89 
32d72     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
32d76     44 87 43 87 
32d7a     44 87 43 87 
32d7e     43 87 42 87 
32d82     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
32d86     43 87 43 87 
32d8a     44 87 ED 85 
32d8e     71 85 52 79 
32d92     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
32d96     BC 78 BC 78 
32d9a     BC 78 BC 78 
32d9e     BC 78 BC 78 
32da2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32da6     BC 78 BC 78 
32daa     BC 78 A0 78 
32dae     CF 7A B9 81 
32db2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
32db6     44 87 43 87 
32dba     43 87 44 87 
32dbe     43 87 44 87 
32dc2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
32dc6     43 87 43 87 
32dca     43 87 43 87 
32dce     44 87 43 87 
32dd2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
32dd6     43 87 43 87 
32dda     44 87 43 87 
32dde     44 87 43 87 
32de2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
32de6     44 87 43 87 
32dea     43 87 43 87 
32dee     5A 87 39 81 
32df2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
32df6     A5 78 BC 78 
32dfa     BB 78 BC 78 
32dfe     BB 78 BC 78 
32e02     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
32e06     BC 78 BC 78 
32e0a     BC 78 BC 78 
32e0e     BC 78 8F 79 
32e12     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
32e16     09 85 47 87 
32e1a     43 87 43 87 
32e1e     42 87 42 87 
32e22     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
32e26     43 87 43 87 
32e2a     43 87 43 87 
32e2e     43 87 44 87 
32e32     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32e36     43 87 43 87 
32e3a     44 87 43 87 
32e3e     42 87 43 87 
32e42     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
32e46     44 87 43 87 
32e4a     43 87 43 87 
32e4e     44 87 44 87 
32e52     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
32e56     94 78 55 7A 
32e5a     B9 78 BC 78 
32e5e     BC 78 BC 78 
32e62     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32e66     BC 78 BB 78 
32e6a     BC 78 BC 78 
32e6e     BC 78 BC 78 
32e72     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
32e76     BB 78 BC 78 
32e7a     BC 78 BC 78 
32e7e     BB 78 BC 78 
32e82     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
32e86     BC 78 BC 78 
32e8a     BD 78 BC 78 
32e8e     BC 78 BB 78 
32e92     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
32e96     94 78 B3 84 
32e9a     36 84 4A 87 
32e9e     43 87 43 87 
32ea2     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
32ea6     43 87 44 87 
32eaa     43 87 43 87 
32eae     43 87 43 87 
32eb2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
32eb6     43 87 44 87 
32eba     43 87 44 87 
32ebe     43 87 43 87 
32ec2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
32ec6     43 87 43 87 
32eca     43 87 45 87 
32ece     43 87 43 87 
32ed2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
32ed6     43 87 44 87 
32eda     44 87 44 87 
32ede     43 87 43 87 
32ee2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
32ee6     43 87 42 87 
32eea     43 87 43 87 
32eee     44 87 43 87 
32ef2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
32ef6     54 87 3C 82 
32efa     36 83 52 79 
32efe     C6 78 BC 78 
32f02     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
32f06     BB 78 BB 78 
32f0a     BC 78 BC 78 
32f0e     BC 78 BC 78 
32f12     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
32f16     BD 78 ED 78 
32f1a     1B 79 F4 83 
32f1e     4D 83 4E 87 
32f22     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
32f26     44 87 43 87 
32f2a     42 87 44 87 
32f2e     43 87 42 87 
32f32     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
32f36     43 87 54 87 
32f3a     26 82 B3 84 
32f3e     D6 77 BB 78 
32f42     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
32f46     BC 78 BB 78 
32f4a     BB 78 BB 78 
32f4e     BB 78 BB 78 
32f52     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
32f56     BC 78 BC 78 
32f5a     26 79 18 75 
32f5e     36 83 1F 84 
32f62     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
32f66     43 87 43 87 
32f6a     43 87 43 87 
32f6e     43 87 44 87 
32f72     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32f76     43 87 44 87 
32f7a     44 87 43 87 
32f7e     43 87 43 87 
32f82     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
32f86     43 87 43 87 
32f8a     43 87 43 87 
32f8e     44 87 44 87 
32f92     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
32f96     44 87 43 87 
32f9a     43 87 43 87 
32f9e     43 87 44 87 
32fa2     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
32fa6     44 87 44 87 
32faa     44 87 43 87 
32fae     44 87 43 87 
32fb2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
32fb6     43 87 43 87 
32fba     43 87 44 87 
32fbe     44 87 43 87 
32fc2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
32fc6     43 87 43 87 
32fca     43 87 43 87 
32fce     43 87 44 87 
32fd2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
32fd6     43 87 44 87 
32fda     43 87 44 87 
32fde     19 87 7D 86 
32fe2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
32fe6     B1 78 BC 78 
32fea     BC 78 BC 78 
32fee     BC 78 BC 78 
32ff2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
32ff6     BC 78 BC 78 
32ffa     BD 78 BC 78 
32ffe     B7 78 3B 7B 
33002     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33006     96 86 44 87 
3300a     43 87 43 87 
3300e     43 87 43 87 
33012     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33016     44 87 44 87 
3301a     43 87 44 87 
3301e     43 87 44 87 
33022     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33026     43 87 44 87 
3302a     43 87 44 87 
3302e     43 87 44 87 
33032     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33036     43 87 44 87 
3303a     43 87 43 87 
3303e     44 87 43 87 
33042     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33046     44 87 44 87 
3304a     43 87 43 87 
3304e     43 87 44 87 
33052     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33056     43 87 43 87 
3305a     43 87 43 87 
3305e     44 87 44 87 
33062     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
33066     36 83 CF 7A 
3306a     AB 78 BB 78 
3306e     BC 78 BC 78 
33072     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
33076     BB 78 BC 78 
3307a     BC 78 BC 78 
3307e     BC 78 BC 78 
33082     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33086     BC 78 BC 78 
3308a     BC 78 BB 78 
3308e     BC 78 BC 78 
33092     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33096     BB 78 BC 78 
3309a     BB 78 BC 78 
3309e     BC 78 BD 78 
330a2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
330a6     BC 78 BC 78 
330aa     BC 78 BC 78 
330ae     BC 78 BD 78 
330b2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
330b6     BC 78 BB 78 
330ba     BC 78 BB 78 
330be     BB 78 BC 78 
330c2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
330c6     BC 78 BC 78 
330ca     BC 78 BC 78 
330ce     BC 78 BB 78 
330d2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
330d6     BC 78 BC 78 
330da     BC 78 BD 78 
330de     BB 78 BC 78 
330e2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
330e6     BC 78 BC 78 
330ea     BC 78 BB 78 
330ee     BC 78 BB 78 
330f2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
330f6     BB 78 BC 78 
330fa     BC 78 BC 78 
330fe     BC 78 BB 78 
33102     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33106     BC 78 BC 78 
3310a     BC 78 BB 78 
3310e     BC 78 BB 78 
33112     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33116     BC 78 BC 78 
3311a     BC 78 BC 78 
3311e     BB 78 BC 78 
33122     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33126     BC 78 9F 78 
3312a     52 79 B3 84 
3312e     2F 86 60 87 
33132     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33136     44 87 43 87 
3313a     43 87 43 87 
3313e     43 87 43 87 
33142     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33146     43 87 43 87 
3314a     43 87 44 87 
3314e     43 87 43 87 
33152     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33156     43 87 43 87 
3315a     43 87 43 87 
3315e     43 87 44 87 
33162     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33166     44 87 44 87 
3316a     5E 87 BC 80 
3316e     FB 80 94 78 
33172     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
33176     BD 78 BC 78 
3317a     BB 78 BC 78 
3317e     BB 78 BB 78 
33182     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33186     BC 78 BB 78 
3318a     BB 78 6B 79 
3318e     D6 77 AC 87 
33192     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
33196     43 87 44 87 
3319a     43 87 43 87 
3319e     44 87 43 87 
331a2     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
331a6     43 87 44 87 
331aa     43 87 5C 87 
331ae     E7 80 00 80 
331b2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
331b6     BC 78 BD 78 
331ba     BC 78 BC 78 
331be     BC 78 BB 78 
331c2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
331c6     BC 78 BC 78 
331ca     BB 78 BC 78 
331ce     BB 78 BC 78 
331d2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
331d6     BB 78 BC 78 
331da     BC 78 BC 78 
331de     BC 78 BC 78 
331e2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
331e6     BC 78 BC 78 
331ea     BC 78 BC 78 
331ee     A0 78 8D 7B 
331f2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
331f6     60 87 43 87 
331fa     44 87 44 87 
331fe     43 87 43 87 
33202     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33206     44 87 43 87 
3320a     43 87 43 87 
3320e     44 87 73 86 
33212     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33216     51 7B B6 78 
3321a     BC 78 BD 78 
3321e     BC 78 BC 78 
33222     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33226     BB 78 BC 78 
3322a     BD 78 BB 78 
3322e     BC 78 BB 78 
33232     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33236     BC 78 BC 78 
3323a     BC 78 BC 78 
3323e     BB 78 BC 78 
33242     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33246     BC 78 BB 78 
3324a     BB 78 BC 78 
3324e     BC 78 BB 78 
33252     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
33256     22 8C AF 84 
3325a     48 87 43 87 
3325e     44 87 43 87 
33262     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
33266     43 87 42 87 
3326a     43 87 43 87 
3326e     44 87 43 87 
33272     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33276     43 87 43 87 
3327a     44 87 44 87 
3327e     43 87 43 87 
33282     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33286     43 87 43 87 
3328a     43 87 43 87 
3328e     44 87 43 87 
33292     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
33296     9F 8B D6 77 
3329a     16 7C B3 78 
3329e     BC 78 BB 78 
332a2     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
332a6     BB 78 BC 78 
332aa     BB 78 BC 78 
332ae     BC 78 BC 78 
332b2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
332b6     BC 78 BB 78 
332ba     BB 78 BC 78 
332be     BB 78 BC 78 
332c2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
332c6     BB 78 BB 78 
332ca     BC 78 BC 78 
332ce     BC 78 BB 78 
332d2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
332d6     BC 78 BC 78 
332da     BC 78 BD 78 
332de     BB 78 BC 78 
332e2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
332e6     BC 78 BC 78 
332ea     BC 78 BB 78 
332ee     BC 78 BC 78 
332f2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
332f6     A8 78 54 7E 
332fa     F4 83 17 82 
332fe     50 87 43 87 
33302     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33306     44 87 43 87 
3330a     44 87 43 87 
3330e     43 87 44 87 
33312     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33316     43 87 28 87 
3331a     20 85 CF 7A 
3331e     70 7D AD 78 
33322     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33326     BB 78 BC 78 
3332a     BC 78 BC 78 
3332e     BB 78 BB 78 
33332     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33336     BB 78 B2 78 
3333a     9A 7C CF 7A 
3333e     4A 87 0D 87 
33342     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33346     43 87 44 87 
3334a     43 87 44 87 
3334e     43 87 43 87 
33352     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33356     44 87 43 87 
3335a     28 87 51 85 
3335e     11 7A 1E 7D 
33362     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33366     BC 78 BB 78 
3336a     BC 78 BC 78 
3336e     BC 78 BC 78 
33372     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33376     BB 78 BC 78 
3337a     BB 78 BC 78 
3337e     BC 78 BC 78 
33382     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33386     BB 78 BC 78 
3338a     BC 78 BC 78 
3338e     BD 78 BB 78 
33392     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33396     BC 78 BB 78 
3339a     BC 78 BC 78 
3339e     BC 78 BB 78 
333a2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333a6     BC 78 BC 78 
333aa     BC 78 BC 78 
333ae     BB 78 BC 78 
333b2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
333b6     BC 78 BD 78 
333ba     BC 78 BC 78 
333be     BC 78 BB 78 
333c2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333c6     BC 78 BB 78 
333ca     BB 78 BC 78 
333ce     BC 78 BB 78 
333d2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333d6     BB 78 BB 78 
333da     BB 78 BC 78 
333de     B6 78 48 7D 
333e2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
333e6     56 87 43 87 
333ea     42 87 44 87 
333ee     44 87 43 87 
333f2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
333f6     43 87 44 87 
333fa     43 87 44 87 
333fe     4C 87 7E 83 
33402     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33406     F7 78 BC 78 
3340a     BC 78 BB 78 
3340e     BB 78 BC 78 
33412     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33416     BC 78 BB 78 
3341a     BC 78 BC 78 
3341e     BB 78 BC 78 
33422     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33426     BB 78 BC 78 
3342a     BC 78 BC 78 
3342e     BC 78 BB 78 
33432     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33436     BC 78 BC 78 
3343a     BC 78 BC 78 
3343e     BC 78 BB 78 
33442     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33446     BC 78 BB 78 
3344a     BB 78 BC 78 
3344e     BC 78 BB 78 
33452     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33456     BC 78 BC 78 
3345a     BB 78 BC 78 
3345e     BC 78 BC 78 
33462     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33466     73 32 00 04 
3346a     00 00 10 00 
3346e     00 00 00 00 
33472     00 00 00 00 | atari12 file "atari12.s2"
33476     00 6D 00 6D 
3347a     00 6D 00 6D 
3347e     00 6D 00 6D 
33482     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33486     00 6D 00 6D 
3348a     00 6D 00 6D 
3348e     00 6D 00 6D 
33492     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33496     00 6D 00 6D 
3349a     00 6D 00 6D 
3349e     00 6D 00 6D 
334a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
334a6     00 6D 00 6D 
334aa     00 6D 00 6D 
334ae     00 6D 00 6D 
334b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
334b6     00 6D 00 6D 
334ba     00 6D 00 6D 
334be     00 6D 00 6D 
334c2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
334c6     00 6C 00 6C 
334ca     00 6C 00 6C 
334ce     00 6C 00 6C 
334d2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334d6     00 6C 00 6C 
334da     00 6C 00 6C 
334de     00 6C 00 6C 
334e2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334e6     00 6C 00 6C 
334ea     00 6C 00 6C 
334ee     00 6C 00 6C 
334f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
334f6     00 6C 00 6C 
334fa     00 6C 00 6C 
334fe     00 6C 00 6C 
33502     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33506     00 6C 00 6C 
3350a     00 6C 00 6C 
3350e     00 6C 00 6C 
33512     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33516     00 6C 00 6C 
3351a     00 6C 00 6C 
3351e     00 6C 00 6C 
33522     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33526     00 6C 00 6C 
3352a     00 6C 00 6C 
3352e     00 6C 00 6C 
33532     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33536     00 6C 00 6C 
3353a     00 6C 00 6C 
3353e     00 6C 00 6C 
33542     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33546     00 6C 00 6C 
3354a     00 6C 00 6C 
3354e     00 6C 00 6C 
33552     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33556     00 6C 00 6C 
3355a     00 6C 00 6C 
3355e     00 6C 00 6C 
33562     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33566     00 6C 00 6C 
3356a     00 6C 00 6C 
3356e     00 6C 00 6C 
33572     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33576     00 6C 00 6B 
3357a     00 6B 00 6B 
3357e     00 6B 00 6B 
33582     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33586     00 6B 00 6B 
3358a     00 6B 00 6B 
3358e     00 6B 00 6B 
33592     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33596     00 6B 00 6B 
3359a     00 6B 00 6B 
3359e     00 6B 00 6B 
335a2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335a6     00 6B 00 6B 
335aa     00 6B 00 6B 
335ae     00 6B 00 6B 
335b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335b6     00 6B 00 6B 
335ba     00 6B 00 6B 
335be     00 6B 00 6B 
335c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335c6     00 6B 00 6B 
335ca     00 6B 00 6B 
335ce     00 6B 00 6B 
335d2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335d6     00 6B 00 6B 
335da     00 6B 00 6B 
335de     00 6B 00 6B 
335e2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335e6     00 6B 00 6B 
335ea     00 6B 00 6B 
335ee     00 6B 00 6B 
335f2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
335f6     00 6B 00 6B 
335fa     00 6B 00 6B 
335fe     00 6B 00 6B 
33602     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33606     00 6B 00 6B 
3360a     00 6B 00 6B 
3360e     00 6A 00 9D 
33612     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33616     00 9E 00 9E 
3361a     00 9E 00 9E 
3361e     00 9E 00 9E 
33622     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33626     00 9E 00 9E 
3362a     00 9E 00 9E 
3362e     00 9E 00 9E 
33632     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33636     00 9E 00 9E 
3363a     00 9E 00 9E 
3363e     00 9E 00 9E 
33642     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33646     00 9E 00 9E 
3364a     00 9E 00 9E 
3364e     00 9E 00 9E 
33652     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33656     00 9E 00 9E 
3365a     00 9E 00 9E 
3365e     00 9E 00 9E 
33662     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33666     00 9E 00 9E 
3366a     00 9E 00 9E 
3366e     00 9E 00 9E 
33672     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33676     00 9E 00 9E 
3367a     00 9E 00 9E 
3367e     00 9E 00 9E 
33682     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33686     00 9E 00 9E 
3368a     00 9E 00 9E 
3368e     00 9E 00 9E 
33692     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33696     00 9E 00 9E 
3369a     00 9E 00 9E 
3369e     00 9E 00 9E 
336a2     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
336a6     00 9F 00 9F 
336aa     00 9F 00 9F 
336ae     00 9F 00 9F 
336b2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336b6     00 9F 00 9F 
336ba     00 9F 00 9F 
336be     00 9F 00 9F 
336c2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336c6     00 9F 00 9F 
336ca     00 9F 00 9F 
336ce     00 9F 00 9F 
336d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336d6     00 9F 00 9F 
336da     00 9F 00 9F 
336de     00 9F 00 9F 
336e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336e6     00 9F 00 9F 
336ea     00 9F 00 9F 
336ee     00 9F 00 9F 
336f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
336f6     00 9F 00 9F 
336fa     00 9F 00 9F 
336fe     00 9F 00 9F 
33702     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33706     00 9F 00 9F 
3370a     00 9F 00 9F 
3370e     00 9F 00 9F 
33712     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33716     00 9F 00 9F 
3371a     00 9F 00 9F 
3371e     00 9F 00 9F 
33722     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33726     00 9F 00 9F 
3372a     00 9F 00 9F 
3372e     00 9F 00 9F 
33732     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33736     00 9F 00 9F 
3373a     00 9F 00 9F 
3373e     00 9F 00 9F 
33742     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33746     00 9F 00 9F 
3374a     00 9F 00 9F 
3374e     00 9F 00 9F 
33752     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33756     00 9F 00 9F 
3375a     00 9F 00 9F 
3375e     00 9F 00 9F 
33762     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33766     00 9F 00 9F 
3376a     00 9F 00 A0 
3376e     00 A0 00 A0 
33772     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33776     00 A0 00 A0 
3377a     00 A0 00 A0 
3377e     00 A0 00 A0 
33782     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33786     00 A0 00 A0 
3378a     00 A0 00 A0 
3378e     00 A0 00 A0 
33792     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33796     00 A0 00 A0 
3379a     00 A0 00 A0 
3379e     00 A0 00 A0 
337a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337a6     00 A0 00 A0 
337aa     00 A0 00 A0 
337ae     00 A0 00 A0 
337b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337b6     00 A0 00 A0 
337ba     00 A0 00 A0 
337be     00 A0 00 A0 
337c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337c6     00 A0 00 A0 
337ca     00 A0 00 A0 
337ce     00 A0 00 A0 
337d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337d6     00 A0 00 A0 
337da     00 A0 00 A0 
337de     00 A0 00 A0 
337e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337e6     00 A0 00 A0 
337ea     00 A0 00 A0 
337ee     00 A0 00 A0 
337f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
337f6     00 A0 00 A0 
337fa     00 A0 00 A0 
337fe     00 A0 00 A0 
33802     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33806     00 A0 00 A0 
3380a     00 A0 00 A0 
3380e     00 A0 00 A0 
33812     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33816     00 A0 00 A0 
3381a     00 A0 00 A0 
3381e     00 A0 00 A0 
33822     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33826     00 A0 00 A0 
3382a     00 A0 00 A0 
3382e     00 A0 00 A0 
33832     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33836     00 6D 00 6D 
3383a     00 6D 00 6D 
3383e     00 6D 00 6D 
33842     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33846     00 6D 00 6D 
3384a     00 6D 00 6D 
3384e     00 6D 00 6D 
33852     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33856     00 6D 00 6D 
3385a     00 6D 00 6D 
3385e     00 6D 00 6D 
33862     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33866     00 6D 00 6D 
3386a     00 6D 00 6D 
3386e     00 6D 00 6D 
33872     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33876     00 6D 00 6D 
3387a     00 6D 00 6D 
3387e     00 6D 00 6D 
33882     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33886     00 6D 00 6D 
3388a     00 6D 00 6D 
3388e     00 6D 00 6D 
33892     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33896     00 6D 00 6D 
3389a     00 6D 00 6D 
3389e     00 6D 00 6D 
338a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338a6     00 6D 00 6D 
338aa     00 6D 00 6D 
338ae     00 6D 00 6D 
338b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338b6     00 6D 00 6D 
338ba     00 A0 00 A0 
338be     00 A0 00 A0 
338c2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338c6     00 A0 00 A0 
338ca     00 A0 00 A0 
338ce     00 A0 00 A0 
338d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338d6     00 A0 00 A0 
338da     00 A0 00 A0 
338de     00 A0 00 A0 
338e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338e6     00 A0 00 A0 
338ea     00 A0 00 A0 
338ee     00 A0 00 A0 
338f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
338f6     00 A0 00 A0 
338fa     00 A0 00 A0 
338fe     00 A0 00 A0 
33902     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33906     00 A0 00 A0 
3390a     00 A0 00 A0 
3390e     00 A0 00 A0 
33912     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33916     00 A0 00 A0 
3391a     00 A0 00 A0 
3391e     00 A0 00 A0 
33922     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33926     00 A0 00 A0 
3392a     00 A0 00 A0 
3392e     00 A0 00 A0 
33932     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33936     00 A0 00 A0 
3393a     00 A0 00 A0 
3393e     00 A0 00 A0 
33942     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33946     00 6D 00 6D 
3394a     00 6D 00 6D 
3394e     00 6D 00 6D 
33952     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33956     00 6D 00 6D 
3395a     00 6D 00 6D 
3395e     00 6D 00 6D 
33962     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33966     00 6D 00 6D 
3396a     00 6D 00 6D 
3396e     00 6D 00 6D 
33972     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33976     00 6D 00 6D 
3397a     00 6D 00 6D 
3397e     00 6D 00 6D 
33982     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33986     00 6D 00 6D 
3398a     00 6D 00 6D 
3398e     00 6D 00 6D 
33992     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33996     00 6D 00 6D 
3399a     00 6D 00 6D 
3399e     00 6D 00 6D 
339a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339a6     00 6D 00 6D 
339aa     00 6D 00 6D 
339ae     00 6D 00 6D 
339b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339b6     00 6D 00 6D 
339ba     00 6D 00 6D 
339be     00 6D 00 6D 
339c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
339c6     00 6D 00 6D 
339ca     00 6C 00 A0 
339ce     00 9F 00 A0 
339d2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
339d6     00 A0 00 A0 
339da     00 A0 00 A0 
339de     00 A0 00 A0 
339e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
339e6     00 A0 00 A0 
339ea     00 A0 00 A0 
339ee     00 A0 00 A0 
339f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
339f6     00 A0 00 A0 
339fa     00 A0 00 A0 
339fe     00 A0 00 A0 
33a02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a06     00 A0 00 A0 
33a0a     00 A0 00 A0 
33a0e     00 A0 00 A0 
33a12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a16     00 A0 00 A0 
33a1a     00 A0 00 A0 
33a1e     00 A0 00 A0 
33a22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a26     00 A0 00 A0 
33a2a     00 A0 00 A0 
33a2e     00 A0 00 A0 
33a32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a36     00 A0 00 A0 
33a3a     00 A0 00 A0 
33a3e     00 A0 00 A0 
33a42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a46     00 A0 00 A0 
33a4a     00 A0 00 A0 
33a4e     00 A0 00 A0 
33a52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a56     00 A0 00 A0 
33a5a     00 A0 00 A0 
33a5e     00 A0 00 A0 
33a62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a66     00 A0 00 A0 
33a6a     00 A0 00 A0 
33a6e     00 A0 00 A0 
33a72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33a76     00 A0 00 A0 
33a7a     00 A0 00 A0 
33a7e     00 A0 00 A0 
33a82     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
33a86     00 A1 00 A1 
33a8a     00 A1 00 A1 
33a8e     00 A1 00 A1 
33a92     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33a96     00 A1 00 A1 
33a9a     00 A1 00 A1 
33a9e     00 A1 00 A1 
33aa2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33aa6     00 A1 00 A1 
33aaa     00 A1 00 A1 
33aae     00 A1 00 A1 
33ab2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ab6     00 A1 00 A1 
33aba     00 A1 00 A1 
33abe     00 A1 00 A1 
33ac2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ac6     00 A1 00 A1 
33aca     00 A1 00 A1 
33ace     00 A1 00 A1 
33ad2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ad6     00 A1 00 A1 
33ada     00 A1 00 A1 
33ade     00 6E 00 6E 
33ae2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33ae6     00 6E 00 6E 
33aea     00 6E 00 6E 
33aee     00 6E 00 6E 
33af2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33af6     00 6E 00 6E 
33afa     00 6E 00 6E 
33afe     00 6E 00 6E 
33b02     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33b06     00 6E 00 6E 
33b0a     00 6E 00 6E 
33b0e     00 6E 00 6E 
33b12     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33b16     00 6E 00 6D 
33b1a     00 6D 00 6D 
33b1e     00 6D 00 6D 
33b22     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b26     00 6D 00 6D 
33b2a     00 6D 00 6D 
33b2e     00 6D 00 6D 
33b32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b36     00 6D 00 6D 
33b3a     00 6D 00 6D 
33b3e     00 6D 00 6D 
33b42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b46     00 6D 00 6D 
33b4a     00 6D 00 6D 
33b4e     00 6D 00 6D 
33b52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b56     00 6D 00 6D 
33b5a     00 6D 00 6D 
33b5e     00 6D 00 6D 
33b62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b66     00 6D 00 6D 
33b6a     00 6D 00 6D 
33b6e     00 6D 00 6D 
33b72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b76     00 6D 00 6D 
33b7a     00 6D 00 6D 
33b7e     00 6D 00 6D 
33b82     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b86     00 6D 00 6D 
33b8a     00 6D 00 6D 
33b8e     00 6D 00 6D 
33b92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b96     00 6D 00 6D 
33b9a     00 6D 00 6D 
33b9e     00 6D 00 6D 
33ba2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ba6     00 6D 00 6D 
33baa     00 6D 00 6D 
33bae     00 6D 00 6D 
33bb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bb6     00 6D 00 6D 
33bba     00 6D 00 6D 
33bbe     00 6D 00 6D 
33bc2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33bc6     00 6D 00 6D 
33bca     00 6C 00 6C 
33bce     00 6C 00 6C 
33bd2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bd6     00 6C 00 6C 
33bda     00 6C 00 6C 
33bde     00 6C 00 6C 
33be2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33be6     00 6C 00 6C 
33bea     00 6C 00 6C 
33bee     00 9D 00 9F 
33bf2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
33bf6     00 9F 00 9F 
33bfa     00 9F 00 9F 
33bfe     00 A0 00 A0 
33c02     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c06     00 A0 00 A0 
33c0a     00 A0 00 A0 
33c0e     00 A0 00 A0 
33c12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c16     00 A0 00 A0 
33c1a     00 A0 00 A0 
33c1e     00 A0 00 A0 
33c22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c26     00 A0 00 A0 
33c2a     00 A0 00 A0 
33c2e     00 A0 00 A0 
33c32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c36     00 A0 00 A0 
33c3a     00 A0 00 A0 
33c3e     00 A0 00 A0 
33c42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c46     00 A0 00 A0 
33c4a     00 A0 00 A0 
33c4e     00 A0 00 A0 
33c52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c56     00 A0 00 A0 
33c5a     00 A0 00 A0 
33c5e     00 A0 00 A0 
33c62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c66     00 A0 00 A0 
33c6a     00 A0 00 A0 
33c6e     00 A0 00 A0 
33c72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c76     01 00 00 00 
33c7a     00 00 00 00 
33c7e     00 00 00 00 
33c82     00 00 00 00 | mouse  file "mouse2.def"
33c86     00 00 00 00 
33c8a     00 00 00 00 
33c8e     00 00 00 00 
33c92     00 00 00 00 | 	byte	$00[16]
33c96     01 01 00 00 
33c9a     00 00 00 00 
33c9e     00 00 00 00 
33ca2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33ca6     00 00 00 00 
33caa     00 00 00 00 
33cae     00 00 00 00 
33cb2     00 00 00 00 | 	byte	$00[16]
33cb6     01 0D 01 00 
33cba     00 00 00 00 
33cbe     00 00 00 00 
33cc2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33cc6     00 00 00 00 
33cca     00 00 00 00 
33cce     00 00 00 00 
33cd2     00 00 00 00 | 	byte	$00[16]
33cd6     01 0D 0D 01 
33cda     00 00 00 00 
33cde     00 00 00 00 
33ce2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33ce6     00 00 00 00 
33cea     00 00 00 00 
33cee     00 00 00 00 
33cf2     00 00 00 00 | 	byte	$00[16]
33cf6     01 0D 0D 0D 
33cfa     01 00 00 00 
33cfe     00 00 00 00 
33d02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d06     00 00 00 00 
33d0a     00 00 00 00 
33d0e     00 00 00 00 
33d12     00 00 00 00 | 	byte	$00[16]
33d16     01 0D 0D 0D 
33d1a     0D 01 00 00 
33d1e     00 00 00 00 
33d22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d26     00 00 00 00 
33d2a     00 00 00 00 
33d2e     00 00 00 00 
33d32     00 00 00 00 | 	byte	$00[16]
33d36     01 0D 0D 0D 
33d3a     0D 0D 01 00 
33d3e     00 00 00 00 
33d42     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d46     00 00 00 00 
33d4a     00 00 00 00 
33d4e     00 00 00 00 
33d52     00 00 00 00 | 	byte	$00[16]
33d56     01 0D 0D 0D 
33d5a     0D 0D 0D 01 
33d5e     00 00 00 00 
33d62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
33d66     00 00 00 00 
33d6a     00 00 00 00 
33d6e     00 00 00 00 
33d72     00 00 00 00 | 	byte	$00[16]
33d76     01 0D 0D 0D 
33d7a     0D 0D 0D 0C 
33d7e     01 00 00 00 
33d82     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
33d86     00 00 00 00 
33d8a     00 00 00 00 
33d8e     00 00 00 00 
33d92     00 00 00 00 | 	byte	$00[16]
33d96     01 0D 0D 0D 
33d9a     0D 0D 0D 0D 
33d9e     0C 01 00 00 
33da2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
33da6     00 00 00 00 
33daa     00 00 00 00 
33dae     00 00 00 00 
33db2     00 00 00 00 | 	byte	$00[16]
33db6     01 0D 0D 0D 
33dba     0D 0D 0D 0D 
33dbe     0D 0C 01 00 
33dc2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
33dc6     00 00 00 00 
33dca     00 00 00 00 
33dce     00 00 00 00 
33dd2     00 00 00 00 | 	byte	$00[16]
33dd6     01 0D 0D 0D 
33dda     0D 0D 0D 0D 
33dde     0D 0D 0B 01 
33de2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
33de6     00 00 00 00 
33dea     00 00 00 00 
33dee     00 00 00 00 
33df2     00 00 00 00 | 	byte	$00[16]
33df6     01 0D 0D 0D 
33dfa     0C 0D 0D 03 
33dfe     01 01 01 01 
33e02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
33e06     00 00 00 00 
33e0a     00 00 00 00 
33e0e     00 00 00 00 
33e12     00 00 00 00 | 	byte	$00[16]
33e16     01 0D 0D 0C 
33e1a     01 09 0D 03 
33e1e     00 00 00 00 
33e22     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
33e26     00 00 00 00 
33e2a     00 00 00 00 
33e2e     00 00 00 00 
33e32     00 00 00 00 | 	byte	$00[16]
33e36     01 0D 0C 01 
33e3a     00 01 0D 0B 
33e3e     01 00 00 00 
33e42     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
33e46     00 00 00 00 
33e4a     00 00 00 00 
33e4e     00 00 00 00 
33e52     00 00 00 00 | 	byte	$00[16]
33e56     01 0C 01 00 
33e5a     00 01 0A 0D 
33e5e     01 00 00 00 
33e62     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
33e66     00 00 00 00 
33e6a     00 00 00 00 
33e6e     00 00 00 00 
33e72     00 00 00 00 | 	byte	$00[16]
33e76     01 01 00 00 
33e7a     00 00 01 0D 
33e7e     0B 01 00 00 
33e82     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
33e86     00 00 00 00 
33e8a     00 00 00 00 
33e8e     00 00 00 00 
33e92     00 00 00 00 
33e96     00 00 00 00 
33e9a     00 00       | 	byte	$00[22]
33e9c     01 0B 0D 01 
33ea0     00 00 00 00 
33ea4     00 00 00 00 
33ea8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33eac     00 00 00 00 
33eb0     00 00 00 00 
33eb4     00 00 00 00 
33eb8     00 00 00 00 
33ebc     00          | 	byte	$00[17]
33ebd     01 01 00 00 
33ec1     00 00 00 00 
33ec5     00 00 00 00 
33ec9     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33ecd     00 00 00 00 
      ...             
34071     00 00 00 00 
34075     00          | 	byte	$00[425]
34076                 | 
34076     00 00       |              	org
34078 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3407c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
34080 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
34084 003             | 
34084 003 00 30 04 F6 |                 mov     psramaddr,#0
34088 004             | 
34088 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3408c 005 20 00 00 FF 
34090 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
34094 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
34098 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3409c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
340a0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
340a4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
340a8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
340ac 00d             | 
340ac 00d 20 00 00 FF 
340b0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
340b4 00f E0 03 00 FF 
340b8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
340bc 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
340c0 012             | 
340c0 012             |                 
340c0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
340c4 013             |     
340c4 013 01 2C 60 FD |                 cogid 	t11				' get id
340c8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
340cc 015 03 2C 60 FD |                 cogstop t11				' stop the loader
340d0 016             | 
340d0 016 00 00 00 00 | t11 		long 	0
340d4 017 00 FF 07 00 | mailbox 	long 	$7FF00
340d8 018 00 00 00 00 | psramaddr 	long 	0
340dc 019 00 00 00 00 | pslockval	long 	0
340e0 01a 00 00 00 00 | cmd             long    0
340e4 01b 00 00 00 00 | buf1            long    0
340e8 01c 00 40 00 00 | buf2            long    16384
340ec 01d F0 40 03 00 | 	long	@@@_dat_ + 12612
340f0 01e 50 32 20 52 
340f4 01f 65 74 72 6F 
340f8 020 6D 61 63 68 
340fc 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
34100 022 42 41 53 49 
34104 023 43 20 76 65 
34108 024 72 73 69 6F 
3410c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
34110 026 33 32 00 00 | 	byte	$33, $32, $00, $00
34114 027             | 	alignl
34114 027             | _hg010b_spin2_dat_
34114 027             | 
34114 027 00 00 00 00 
34118 028 00 00 00 00 
3411c 029 00 00 00 00 
34120 02a 00 00 00 00 
34124 02b 00 00 00    | vga_font       file "vgafont.def"
34127 02b 7E 81 A5 81 
3412b 02c 81 BD 99 81 
3412f 02d 81 7E 00 00 
34133 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34137 02f 7E FF DB FF 
3413b 030 FF C3 E7 FF 
3413f 031 FF 7E 00 00 
34143 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34147 033 00 36 7F 7F 
3414b 034 7F 7F 3E 1C 
3414f 035 08 00 00 00 
34153 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
34157 037 00 08 1C 3E 
3415b 038 7F 3E 1C 08 
3415f 039 00 00 00 00 
34163 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
34167 03b 18 3C 3C E7 
3416b 03c E7 E7 18 18 
3416f 03d 3C 00 00 00 
34173 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34177 03f 18 3C 7E FF 
3417b 040 FF 7E 18 18 
3417f 041 3C 00 00 00 
34183 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34187 043 00 00 00 18 
3418b 044 3C 3C 18 00 
3418f 045 00 00 00 00 
34193 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
34197 047 FF FF FF E7 
3419b 048 C3 C3 E7 FF 
3419f 049 FF FF FF FF 
341a3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
341a7 04b 00 00 3C 66 
341ab 04c 42 42 66 3C 
341af 04d 00 00 00 00 
341b3 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
341b7 04f FF FF C3 99 
341bb 050 BD BD 99 C3 
341bf 051 FF FF FF FF 
341c3 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
341c7 053 78 70 58 4C 
341cb 054 1E 33 33 33 
341cf 055 33 1E 00 00 
341d3 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
341d7 057 3C 66 66 66 
341db 058 66 3C 18 7E 
341df 059 18 18 00 00 
341e3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
341e7 05b FC CC FC 0C 
341eb 05c 0C 0C 0C 0E 
341ef 05d 0F 07 00 00 
341f3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
341f7 05f FE C6 FE C6 
341fb 060 C6 C6 C6 E6 
341ff 061 E7 67 03 00 
34203 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34207 063 18 18 DB 3C 
3420b 064 E7 3C DB 18 
3420f 065 18 00 00 00 
34213 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34217 067 03 07 0F 1F 
3421b 068 7F 1F 0F 07 
3421f 069 03 01 00 00 
34223 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34227 06b 60 70 78 7C 
3422b 06c 7F 7C 78 70 
3422f 06d 60 40 00 00 
34233 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34237 06f 18 3C 7E 18 
3423b 070 18 18 7E 3C 
3423f 071 18 00 00 00 
34243 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34247 073 66 66 66 66 
3424b 074 66 66 66    | 	byte	$66[7]
3424e 075 00 66 66 00 
34252 076 00 00 00 00 
34256 077 00 FE DB DB 
3425a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3425e 079 D8 D8 D8 00 
34262 07a 00 00 00 3E 
34266 07b 63 06 1C 36 
3426a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3426e 07d 30 63 3E 00 
34272 07e 00 00 00 00 
34276 07f 00 00 00 00 
3427a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3427e 081 7F 7F 7F 00 
34282 082 00 00 00 00 
34286 083 00 18 3C 7E 
3428a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3428e 085 3C 18 7E 00 
34292 086 00 00 00 00 
34296 087 00 18 3C 7E 
3429a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3429e 089 18 18 18 00 
342a2 08a 00 00 00 00 
342a6 08b 00 18 18 18 
342aa 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
342ae 08d 7E 3C 18 00 
342b2 08e 00 00 00 00 
342b6 08f 00 00 00 18 
342ba 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
342be 091 00 00 00 00 
342c2 092 00 00 00 00 
342c6 093 00 00 00    | 	byte	$00[11]
342c9 094 0C 06 7F 06 
342cd 095 0C 00 00 00 
342d1 096 00 00 00 00 
342d5 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
342d9 098 00 03 03 03 
342dd 099 7F 00 00 00 
342e1 09a 00 00 00 00 
342e5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
342e9 09c 14 36 7F 36 
342ed 09d 14 00 00 00 
342f1 09e 00 00 00 00 
342f5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
342f9 0a0 1C 1C 3E 3E 
342fd 0a1 7F 7F 00 00 
34301 0a2 00 00 00 00 
34305 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34309 0a4 7F 3E 3E 1C 
3430d 0a5 1C 08 00 00 
34311 0a6 00 00 00 00 
34315 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34319 0a8 00 00 00 00 
3431d 0a9 00 00 00 00 
34321 0aa 00 00 00 00 
34325 0ab 00 00       | 	byte	$00[14]
34327 0ab 18 3C 3C 3C 
3432b 0ac 18 18 18 00 
3432f 0ad 18 18 00 00 
34333 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34337 0af 66 24 00 00 
3433b 0b0 00 00 00 00 
3433f 0b1 00 00 00 00 
34343 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34347 0b3 00 36 36 7F 
3434b 0b4 36 36 36 7F 
3434f 0b5 36 36 00 00 
34353 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
34357 0b7 3E 63 43 03 
3435b 0b8 3E 60 60 61 
3435f 0b9 63 3E 18 18 
34363 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
34367 0bb 00 00 43 63 
3436b 0bc 30 18 0C 06 
3436f 0bd 63 61 00 00 
34373 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
34377 0bf 1C 36 36 1C 
3437b 0c0 6E 3B 33 33 
3437f 0c1 33 6E 00 00 
34383 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
34387 0c3 0C 0C 0C 06 
3438b 0c4 00 00 00 00 
3438f 0c5 00 00 00 00 
34393 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34397 0c7 30 18 0C 0C 
3439b 0c8 0C 0C 0C 0C 
3439f 0c9 18 30 00 00 
343a3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
343a7 0cb 0C 18 30 30 
343ab 0cc 30 30 30 30 
343af 0cd 18 0C 00 00 
343b3 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
343b7 0cf 00 00 00 66 
343bb 0d0 3C FF 3C 66 
343bf 0d1 00 00 00 00 
343c3 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
343c7 0d3 00 00 00 18 
343cb 0d4 18 7E 18 18 
343cf 0d5 00 00 00 00 
343d3 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
343d7 0d7 00 00 00 00 
343db 0d8 00 00 00 00 | 	byte	$00[8]
343df 0d9 18 18 18 0C 
343e3 0da 00 00 00 00 
343e7 0db 00 00 00 00 
343eb 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
343ef 0dd 00 00 00 00 
343f3 0de 00 00 00 00 
343f7 0df 00 00 00 00 
343fb 0e0 00 00 00 00 | 	byte	$00[16]
343ff 0e1 18 18 00 00 
34403 0e2 00 00 00 00 
34407 0e3 00 00 40 60 
3440b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3440f 0e5 03 01 00 00 
34413 0e6 00 00 00 00 
34417 0e7 1C 36 63 63 
3441b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3441f 0e9 36 1C 00 00 
34423 0ea 00 00 00 00 
34427 0eb 18 1C 1E 18 
3442b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3442f 0ed 18 7E 00 00 
34433 0ee 00 00 00 00 
34437 0ef 3E 63 60 30 
3443b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3443f 0f1 63 7F 00 00 
34443 0f2 00 00 00 00 
34447 0f3 3E 63 60 60 
3444b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3444f 0f5 63 3E 00 00 
34453 0f6 00 00 00 00 
34457 0f7 30 38 3C 36 
3445b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3445f 0f9 30 78 00 00 
34463 0fa 00 00 00 00 
34467 0fb 7F 03 03 03 
3446b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3446f 0fd 63 3E 00 00 
34473 0fe 00 00 00 00 
34477 0ff 1C 06 03 03 
3447b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3447f 101 63 3E 00 00 
34483 102 00 00 00 00 
34487 103 7F 63 60 60 
3448b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3448f 105 0C 0C 00 00 
34493 106 00 00 00 00 
34497 107 3E 63 63 63 
3449b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3449f 109 63 3E 00 00 
344a3 10a 00 00 00 00 
344a7 10b 3E 63 63 63 
344ab 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
344af 10d 30 1E 00 00 
344b3 10e 00 00 00 00 
344b7 10f 00 00 00 18 
344bb 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
344bf 111 18 18 00 00 
344c3 112 00 00 00 00 
344c7 113 00 00 00 18 
344cb 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
344cf 115 18 18 0C 00 
344d3 116 00 00 00 00 
344d7 117 00 60 30 18 
344db 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
344df 119 30 60 00 00 
344e3 11a 00 00 00 00 
344e7 11b 00 00 00 7E 
344eb 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
344ef 11d 00 00 00 00 
344f3 11e 00 00 00 00 
344f7 11f 00          | 	byte	$00[9]
344f8 120 06 0C 18 30 
344fc 121 60 30 18 0C 
34500 122 06 00 00 00 
34504 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34508 124 63 63 30 18 
3450c 125 18 18 00 18 
34510 126 18 00 00 00 
34514 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34518 128 3E 63 63 7B 
3451c 129 7B 7B 3B 03 
34520 12a 3E 00 00 00 
34524 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34528 12c 1C 36 63 63 
3452c 12d 7F 63 63 63 
34530 12e 63 00 00 00 
34534 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34538 130 66 66 66 3E 
3453c 131 66 66 66 66 
34540 132 3F 00 00 00 
34544 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34548 134 66 43 03 03 
3454c 135 03 03 43 66 
34550 136 3C 00 00 00 
34554 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
34558 138 36 66 66 66 
3455c 139 66 66 66 36 
34560 13a 1F 00 00 00 
34564 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
34568 13c 66 46 16 1E 
3456c 13d 16 06 46 66 
34570 13e 7F 00 00 00 
34574 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
34578 140 66 46 16 1E 
3457c 141 16 06 06 06 
34580 142 0F 00 00 00 
34584 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34588 144 66 43 03 03 
3458c 145 7B 63 63 66 
34590 146 5C 00 00 00 
34594 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
34598 148 63 63 63 7F 
3459c 149 63 63 63 63 
345a0 14a 63 00 00 00 
345a4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
345a8 14c 18 18 18 18 
345ac 14d 18 18 18 18 | 	byte	$18[8]
345b0 14e 3C 00 00 00 
345b4 14f 00 00 00 78 
345b8 150 30 30 30 30 
345bc 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
345c0 152 1E 00 00 00 
345c4 153 00 00 00 67 
345c8 154 66 66 36 1E 
345cc 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
345d0 156 67 00 00 00 
345d4 157 00 00 00 0F 
345d8 158 06 06 06 06 
345dc 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
345e0 15a 7F 00 00 00 
345e4 15b 00 00 00 63 
345e8 15c 77 7F 7F 6B 
345ec 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
345f0 15e 63 00 00 00 
345f4 15f 00 00 00 63 
345f8 160 67 6F 7F 7B 
345fc 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
34600 162 63 00 00 00 
34604 163 00 00 00 3E 
34608 164 63 63 63 63 
3460c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34610 166 3E 00 00 00 
34614 167 00 00 00 3F 
34618 168 66 66 66 3E 
3461c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
34620 16a 0F 00 00 00 
34624 16b 00 00 00 3E 
34628 16c 63 63 63 63 
3462c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
34630 16e 3E 30 70 00 
34634 16f 00 00 00 3F 
34638 170 66 66 66 3E 
3463c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
34640 172 67 00 00 00 
34644 173 00 00 00 3E 
34648 174 63 63 06 1C 
3464c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34650 176 3E 00 00 00 
34654 177 00 00 00 7E 
34658 178 7E 5A 18 18 
3465c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34660 17a 3C 00 00 00 
34664 17b 00 00 00 63 
34668 17c 63 63 63 63 
3466c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34670 17e 3E 00 00 00 
34674 17f 00 00 00 63 
34678 180 63 63 63 63 
3467c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
34680 182 08 00 00 00 
34684 183 00 00 00 63 
34688 184 63 63 63 6B 
3468c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
34690 186 36 00 00 00 
34694 187 00 00 00 63 
34698 188 63 36 3E 1C 
3469c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
346a0 18a 63 00 00 00 
346a4 18b 00 00 00 66 
346a8 18c 66 66 66 3C 
346ac 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
346b0 18e 3C 00 00 00 
346b4 18f 00 00 00 7F 
346b8 190 63 61 30 18 
346bc 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
346c0 192 7F 00 00 00 
346c4 193 00 00 00 3C 
346c8 194 0C 0C 0C 0C 
346cc 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
346d0 196 3C 00 00 00 
346d4 197 00 00 00 00 
346d8 198 01 03 07 0E 
346dc 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
346e0 19a 40 00 00 00 
346e4 19b 00 00 00 3C 
346e8 19c 30 30 30 30 
346ec 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
346f0 19e 3C 00 00 00 
346f4 19f 1C 36 00 00 
346f8 1a0 00 00 00 00 
346fc 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34700 1a2 00 00 00 00 
34704 1a3 00 00 00 00 
34708 1a4 00 00 00 00 
3470c 1a5 00 00 00 00 
34710 1a6 00          | 	byte	$00[17]
34711 1a6 FF 00 00 0C 
34715 1a7 18 00 00 00 
34719 1a8 00 00 00 00 
3471d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34721 1aa 00 00 00 00 
34725 1ab 00 00 00 00 
34729 1ac 00          | 	byte	$00[9]
3472a 1ac 1E 30 3E 33 
3472e 1ad 33 33 6E 00 
34732 1ae 00 00 00 00 
34736 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3473a 1b0 1E 36 66 66 
3473e 1b1 66 66 3E 00 
34742 1b2 00 00 00 00 
34746 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3474a 1b4 3E 63 03 03 
3474e 1b5 03 63 3E 00 
34752 1b6 00 00 00 00 
34756 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3475a 1b8 3C 36 33 33 
3475e 1b9 33 33 6E 00 
34762 1ba 00 00 00 00 
34766 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3476a 1bc 3E 63 7F 03 
3476e 1bd 03 63 3E 00 
34772 1be 00 00 00 00 
34776 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3477a 1c0 0C 1E 0C 0C 
3477e 1c1 0C 0C 1E 00 
34782 1c2 00 00 00 00 
34786 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3478a 1c4 6E 33 33 33 
3478e 1c5 33 33 3E 30 
34792 1c6 33 1E 00 00 
34796 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3479a 1c8 36 6E 66 66 
3479e 1c9 66 66 67 00 
347a2 1ca 00 00 00 00 
347a6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
347aa 1cc 1C 18 18 18 
347ae 1cd 18 18 3C 00 
347b2 1ce 00 00 00 00 
347b6 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
347ba 1d0 70 60 60 60 
347be 1d1 60 60 60 66 
347c2 1d2 66 3C 00 00 
347c6 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
347ca 1d4 66 36 1E 1E 
347ce 1d5 36 66 67 00 
347d2 1d6 00 00 00 00 
347d6 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
347da 1d8 18 18 18 18 
347de 1d9 18 18       | 	byte	$18[6]
347e0 1da 3C 00 00 00 
347e4 1db 00 00 00 00 
347e8 1dc 00 00 37 7F 
347ec 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
347f0 1de 63 00 00 00 
347f4 1df 00 00 00 00 
347f8 1e0 00 00 3B 66 
347fc 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34800 1e2 66 00 00 00 
34804 1e3 00 00 00 00 
34808 1e4 00 00 3E 63 
3480c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34810 1e6 3E 00 00 00 
34814 1e7 00 00 00 00 
34818 1e8 00 00 3B 66 
3481c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34820 1ea 3E 06 06 0F 
34824 1eb 00 00 00 00 
34828 1ec 00 00 6E 33 
3482c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
34830 1ee 3E 30 30 78 
34834 1ef 00 00 00 00 
34838 1f0 00 00 3B 6E 
3483c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
34840 1f2 0F 00 00 00 
34844 1f3 00 00 00 00 
34848 1f4 00 00 3E 63 
3484c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
34850 1f6 3E 00 00 00 
34854 1f7 00 00 00 08 
34858 1f8 0C 0C 3F 0C 
3485c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34860 1fa 38 00 00 00 
34864 1fb 00 00 00 00 
34868 1fc 00 00 33 33 
3486c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
34870 1fe 6E 00 00 00 
34874 1ff 00 00 00 00 
34878 200 00 00 63 63 
3487c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34880 202 1C 00 00 00 
34884 203 00 00 00 00 
34888 204 00 00 63 63 
3488c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34890 206 36 00 00 00 
34894 207 00 00 00 00 
34898 208 00 00 63 36 
3489c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
348a0 20a 63 00 00 00 
348a4 20b 00 00 00 00 
348a8 20c 00 00 63 63 
348ac 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
348b0 20e 7E 60 30 1F 
348b4 20f 00 00 00 00 
348b8 210 00 00 7F 33 
348bc 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
348c0 212 7F 00 00 00 
348c4 213 00 00 00 70 
348c8 214 18 18 18 0E 
348cc 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
348d0 216 70 00 00 00 
348d4 217 00 00 00 18 
348d8 218 18 18 18 18 
348dc 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
348e0 21a 18 00 00 00 
348e4 21b 00 00 00 0E 
348e8 21c 18 18 18 70 
348ec 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
348f0 21e 0E 00 00 00 
348f4 21f 6E 3B 00 00 
348f8 220 00 00 00 00 
348fc 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34900 222 00 00 00 00 
34904 223 00 00 00 00 
34908 224 00 00       | 	byte	$00[10]
3490a 224 08 1C 36 63 
3490e 225 63 63 7F 00 
34912 226 00 00 00 00 
34916 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3491a 228 03 03 03 03 
3491e 229 43 66 3C 18 
34922 22a 30 1E 00 00 
34926 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3492a 22c 33 33 33 33 
3492e 22d 33 33       | 	byte	$33[6]
34930 22e 6E 00 00 00 
34934 22f 00 00 60 30 
34938 230 18 00 3E 63 
3493c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34940 232 3E 00 00 00 
34944 233 00 00 08 1C 
34948 234 36 00 1E 30 
3494c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34950 236 6E 00 00 00 
34954 237 00 00 00 00 
34958 238 33 00 1E 30 
3495c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34960 23a 6E 00 00 00 
34964 23b 00 00 1C 36 
34968 23c 1C 00 33 33 
3496c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34970 23e 6E 00 00 00 
34974 23f 00 00 60 30 
34978 240 18 00 3E 63 
3497c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34980 242 3E 00 00 00 
34984 243 00 00 00 00 
34988 244 00 00 3E 63 
3498c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34990 246 3E 18 30 1E 
34994 247 00 00 00 1C 
34998 248 58 78 38 18 
3499c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
349a0 24a 3C 00 00 00 
349a4 24b 00 00 00 00 
349a8 24c 63 00 3E 63 
349ac 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
349b0 24e 3E 00 00 00 
349b4 24f 66 33 00 3E 
349b8 250 63 63 63 63 
349bc 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
349c0 252 3E 00 00 00 
349c4 253 00 00 CC 66 
349c8 254 33 00 3E 63 
349cc 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
349d0 256 3E 00 00 00 
349d4 257 00 00 18 3C 
349d8 258 66 00 1C 18 
349dc 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
349e0 25a 3C 00 00 00 
349e4 25b 30 18 00 7F 
349e8 25c 63 61 30 18 
349ec 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
349f0 25e 7F 00 00 00 
349f4 25f 00 63 00 08 
349f8 260 1C 36 63 63 
349fc 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34a00 262 63 00 00 00 
34a04 263 30 18 00 3C 
34a08 264 66 43 03 03 
34a0c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34a10 266 3C 00 00 00 
34a14 267 30 18 00 7F 
34a18 268 66 46 16 1E 
34a1c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34a20 26a 7F 00 00 00 
34a24 26b 0C 06 00 0F 
34a28 26c 06 06 06 06 
34a2c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34a30 26e 7F 00 00 00 
34a34 26f 30 18 00 1C 
34a38 270 18 18 18 18 
34a3c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34a40 272 3C 00 00 00 
34a44 273 00 00 08 1C 
34a48 274 36 00 3E 63 
34a4c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34a50 276 3E 00 00 00 
34a54 277 00 00 00 00 
34a58 278 63 00 3E 63 
34a5c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34a60 27a 3E 00 00 00 
34a64 27b 00 00 00 6F 
34a68 27c 46 26 06 06 
34a6c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34a70 27e 7F 00 00 00 
34a74 27f 00 00 00 6E 
34a78 280 4C 2C 0C 0C 
34a7c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34a80 282 1E 00 00 00 
34a84 283 30 18 00 3E 
34a88 284 63 63 06 1C 
34a8c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34a90 286 3E 00 00 00 
34a94 287 00 00 60 30 
34a98 288 18 00 3E 63 
34a9c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34aa0 28a 3E 00 00 00 
34aa4 28b 00 63 00 3E 
34aa8 28c 63 63 63 63 
34aac 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34ab0 28e 3E 00 00 00 
34ab4 28f 00 63 00 63 
34ab8 290 63 63 63 63 
34abc 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34ac0 292 3E 00 00 00 
34ac4 293 6C 38 00 7E 
34ac8 294 7E 5A 18 18 
34acc 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34ad0 296 3C 00 00 00 
34ad4 297 00 00 60 48 
34ad8 298 2C 0C 3F 0C 
34adc 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34ae0 29a 38 00 00 00 
34ae4 29b 00 00 00 0F 
34ae8 29c 26 36 1E 0E 
34aec 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34af0 29e 7F 00 00 00 
34af4 29f 00 00 00 00 
34af8 2a0 00 63 36 1C 
34afc 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34b00 2a2 00 00 00 00 
34b04 2a3 00 00       | 	byte	$00[6]
34b06 2a3 36 1C 08 00 
34b0a 2a4 3E 63 03 03 
34b0e 2a5 03 63 3E 00 
34b12 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34b16 2a7 30 18 0C 00 
34b1a 2a8 1E 30 3E 33 
34b1e 2a9 33 33 6E 00 
34b22 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34b26 2ab 60 30 18 00 
34b2a 2ac 1C 18 18 18 
34b2e 2ad 18 18 3C 00 
34b32 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34b36 2af 60 30 18 00 
34b3a 2b0 3E 63 63 63 
34b3e 2b1 63 63 3E 00 
34b42 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34b46 2b3 30 18 0C 00 
34b4a 2b4 33 33 33 33 
34b4e 2b5 33 33 6E 00 
34b52 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34b56 2b7 00 08 1C 36 
34b5a 2b8 63 63 7F 63 
34b5e 2b9 63 63 63 18 
34b62 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34b66 2bb 00 00 00 00 
34b6a 2bc 1E 30 3E 33 
34b6e 2bd 33 33 6E 18 
34b72 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34b76 2bf 00 7F 63 61 
34b7a 2c0 30 18 0C 06 
34b7e 2c1 43 63 7F 00 
34b82 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34b86 2c3 36 1C 08 00 
34b8a 2c4 7F 33 18 0C 
34b8e 2c5 06 63 7F 00 
34b92 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34b96 2c7 00 7F 66 46 
34b9a 2c8 16 1E 16 06 
34b9e 2c9 46 66 7F 18 
34ba2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34ba6 2cb 00 00 00 00 
34baa 2cc 3E 63 7F 03 
34bae 2cd 03 63 3E 18 
34bb2 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34bb6 2cf 00 3C 66 03 
34bba 2d0 1F 03 0F 03 
34bbe 2d1 03 66 3C 00 
34bc2 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34bc6 2d3 60 30 18 00 
34bca 2d4 7F 33 18 0C 
34bce 2d5 06 63 7F 00 
34bd2 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34bd6 2d7 00 3C 66 43 
34bda 2d8 03 03 03 03 
34bde 2d9 43 66 3C 00 
34be2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34be6 2db 00 00 00 00 
34bea 2dc 3E 63 06 1C 
34bee 2dd 30 63 3E 18 
34bf2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34bf6 2df 00 00 00 00 
34bfa 2e0 00 00       | 	byte	$00[6]
34bfc 2e1 6C 36 1B 36 
34c00 2e2 6C 00 00 00 
34c04 2e3 00 00 00 00 
34c08 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34c0c 2e5 1B 36 6C 36 
34c10 2e6 1B 00 00 00 
34c14 2e7 88 22 88 22 
34c18 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34c1c 2e9 88 22 88 22 
34c20 2ea 88 22 88 22 
34c24 2eb AA 55 AA 55 
34c28 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34c2c 2ed AA 55 AA 55 
34c30 2ee AA 55 AA 55 
34c34 2ef BB EE BB EE 
34c38 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34c3c 2f1 BB EE BB EE 
34c40 2f2 BB EE BB EE 
34c44 2f3 18 18 18 18 
34c48 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34c4c 2f5 18 18 18 18 
34c50 2f6 18 18 18 18 
34c54 2f7 18 18 18 18 
34c58 2f8 18 18 18    | 	byte	$18[15]
34c5b 2f8 1F 18 18 18 
34c5f 2f9 18 18 18 18 
34c63 2fa 18 30 18 00 
34c67 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34c6b 2fc 63 7F 63 63 
34c6f 2fd 63 63 00 00 
34c73 2fe 00 1C 36 00 
34c77 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34c7b 300 63 7F 63 63 
34c7f 301 63 63 00 00 
34c83 302 00 36 1C 00 
34c87 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34c8b 304 1E 16 06 46 
34c8f 305 66 7F 00 00 
34c93 306 00 00 00 00 
34c97 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34c9b 308 1C 30 60 63 
34c9f 309 63 3E 18 30 
34ca3 30a 1E 6C 6C 6C 
34ca7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34cab 30c 6F 6C 6C 6C 
34caf 30d 6C 6C 6C 6C 
34cb3 30e 6C 6C 6C 6C 
34cb7 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34cbb 310 6C 6C 6C 6C 
34cbf 311 6C 6C 6C 6C 
34cc3 312 6C          | 	byte	$6c[9]
34cc4 313 00 00 00 00 
34cc8 314 00          | 	byte	$00[5]
34cc9 314 7F 60 6F 6C 
34ccd 315 6C 6C 6C 6C 
34cd1 316 6C 6C 6C 6C 
34cd5 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34cd9 318 6F 60 7F 00 
34cdd 319 00 00 00 00 
34ce1 31a 00 00 00 18 
34ce5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34ce9 31c 61 30 18 0C 
34ced 31d 06 43 63 7F 
34cf1 31e 00 00 00 00 
34cf5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34cf9 320 00 7F 33 18 
34cfd 321 0C 06 63 7F 
34d01 322 00 00 00 00 
34d05 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34d09 324 00 00 1F 18 
34d0d 325 18 18 18 18 
34d11 326 18 18 18 18 
34d15 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d19 328 18 18 F8 00 
34d1d 329 00 00 00 00 
34d21 32a 00 00 00 18 
34d25 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34d29 32c 18 18 FF 00 
34d2d 32d 00 00 00 00 
34d31 32e 00 00 00 00 
34d35 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d39 330 00 00 FF 18 
34d3d 331 18 18 18 18 
34d41 332 18 18 18 18 
34d45 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d49 334 18 18 F8 18 
34d4d 335 18 18 18 18 
34d51 336 18 18 18 00 
34d55 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34d59 338 00 00 FF 00 
34d5d 339 00 00 00 00 
34d61 33a 00 00 00 18 
34d65 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34d69 33c 18 18 FF 18 
34d6d 33d 18 18 18 18 
34d71 33e 18 18 18 63 
34d75 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34d79 340 36 63 63 7F 
34d7d 341 63 63 63 63 
34d81 342 00 00 00 00 
34d85 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34d89 344 00 1E 30 3E 
34d8d 345 33 33 33 6E 
34d91 346 00 00 00 6C 
34d95 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34d99 348 EC 0C FC 00 
34d9d 349 00 00 00 00 
34da1 34a 00 00 00 00 
34da5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34da9 34c FC 0C EC 6C 
34dad 34d 6C 6C 6C 6C 
34db1 34e 6C 6C 6C 6C 
34db5 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34db9 350 EF 00 FF 00 
34dbd 351 00 00 00 00 
34dc1 352 00 00 00 00 
34dc5 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34dc9 354 FF 00 EF 6C 
34dcd 355 6C 6C 6C 6C 
34dd1 356 6C 6C 6C 6C 
34dd5 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34dd9 358 EC 0C EC 6C 
34ddd 359 6C 6C 6C 6C 
34de1 35a 6C 6C 6C 00 
34de5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34de9 35c FF 00 FF 00 
34ded 35d 00 00 00 00 
34df1 35e 00 00 00 6C 
34df5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34df9 360 EF 00 EF 6C 
34dfd 361 6C 6C 6C 6C 
34e01 362 6C 6C 6C 00 
34e05 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34e09 364 63 3E 63 63 
34e0d 365 63 63 3E 63 
34e11 366 00 00 00 00 
34e15 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34e19 368 30 3C 36 33 
34e1d 369 33 33 33 6E 
34e21 36a 00 00 00 00 
34e25 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34e29 36c 66 66 6F 66 
34e2d 36d 66 66 36 1F 
34e31 36e 00 00 00 36 
34e35 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34e39 370 66 66 66 66 
34e3d 371 66 66       | 	byte	$66[6]
34e3f 371 36 1F 00 00 
34e43 372 00 00 63 00 
34e47 373 7F 66 46 16 
34e4b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34e4f 375 66 7F 00 00 
34e53 376 00 6C 38 00 
34e57 377 38 30 30 3C 
34e5b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34e5f 379 33 6E 00 00 
34e63 37a 00 36 1C 00 
34e67 37b 63 67 6F 7F 
34e6b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34e6f 37d 63 63 00 00 
34e73 37e 00 30 18 00 
34e77 37f 3C 18 18 18 
34e7b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34e7f 381 18 3C 00 00 
34e83 382 00 3C 66 00 
34e87 383 3C 18 18 18 
34e8b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34e8f 385 18 3C 00 00 
34e93 386 00 00 00 36 
34e97 387 1C 08 00 3E 
34e9b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
34e9f 389 63 3E 00 00 
34ea3 38a 00 18 18 18 
34ea7 38b 18 18 18 18 
34eab 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
34eaf 38d 00 00 00 00 
34eb3 38e 00 00 00 00 
34eb7 38f 00 00 00 00 | 	byte	$00[12]
34ebb 390 F8 18 18 18 
34ebf 391 18 18 18 18 
34ec3 392 18 FF FF FF 
34ec7 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
34ecb 394 FF FF FF FF 
34ecf 395 FF FF FF FF 
34ed3 396 FF          | 	byte	$ff[9]
34ed4 397 00 00 00 00 
34ed8 398 00 00 00    | 	byte	$00[7]
34edb 398 FF FF FF FF 
34edf 399 FF FF FF FF 
34ee3 39a FF          | 	byte	$ff[9]
34ee4 39b 00 00 00 7E 
34ee8 39c 7E 5A 18 18 
34eec 39d 18 18 18 18 
34ef0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
34ef4 39f 1C 36 1C 63 
34ef8 3a0 63 63 63 63 
34efc 3a1 63 63 63 63 
34f00 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f04 3a3 FF FF FF FF 
34f08 3a4 FF FF FF    | 	byte	$ff[7]
34f0b 3a4 00 00 00 00 
34f0f 3a5 00 00 00 00 
34f13 3a6 00          | 	byte	$00[9]
34f14 3a7 30 18 00 3E 
34f18 3a8 63 63 63 63 
34f1c 3a9 63 63 63 63 
34f20 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f24 3ab 00 00 00 1E 
34f28 3ac 33 33 33 1B 
34f2c 3ad 33 63 63 63 
34f30 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
34f34 3af 1C 36 00 3E 
34f38 3b0 63 63 63 63 
34f3c 3b1 63 63 63 63 
34f40 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f44 3b3 30 18 00 63 
34f48 3b4 67 6F 7F 7B 
34f4c 3b5 73 63 63 63 
34f50 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
34f54 3b7 00 00 60 30 
34f58 3b8 18 00 3B 66 
34f5c 3b9 66 66 66 66 
34f60 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34f64 3bb 00 00 36 1C 
34f68 3bc 08 00 3B 66 
34f6c 3bd 66 66 66 66 
34f70 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34f74 3bf 36 1C 00 3E 
34f78 3c0 63 63 06 1C 
34f7c 3c1 30 60 63 63 
34f80 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
34f84 3c3 00 00 36 1C 
34f88 3c4 08 00 3E 63 
34f8c 3c5 06 1C 30 63 
34f90 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
34f94 3c7 30 18 00 3F 
34f98 3c8 66 66 66 3E 
34f9c 3c9 36 66 66 66 
34fa0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
34fa4 3cb 30 18 00 63 
34fa8 3cc 63 63 63 63 
34fac 3cd 63 63 63 63 
34fb0 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34fb4 3cf 00 00 60 30 
34fb8 3d0 18 00 3B 6E 
34fbc 3d1 66 06 06 06 
34fc0 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
34fc4 3d3 66 33 00 63 
34fc8 3d4 63 63 63 63 
34fcc 3d5 63 63 63 63 
34fd0 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34fd4 3d7 00 00 60 30 
34fd8 3d8 18 00 63 63 
34fdc 3d9 63 63 63 63 
34fe0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
34fe4 3db 30 18 00 66 
34fe8 3dc 66 66 66 3C 
34fec 3dd 18 18 18 18 
34ff0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
34ff4 3df 00 00 00 08 
34ff8 3e0 0C 0C 3F 0C 
34ffc 3e1 0C 0C 0C 6C 
35000 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35004 3e3 30 18 00 00 
35008 3e4 00 00 00 00 
3500c 3e5 00 00 00 00 
35010 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35014 3e7 00 00 00 00 
35018 3e8 00 00 00 00 | 	byte	$00[8]
3501c 3e9 7F 00 00 00 
35020 3ea 00 00 00 00 
35024 3eb 66 33 00 00 
35028 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3502c 3ed 00 00 00 00 
35030 3ee 00 00 00 00 
35034 3ef 00 00 00 00 
35038 3f0 00 00 00 00 
3503c 3f1 00 00 00 00 
35040 3f2 00          | 	byte	$00[21]
35041 3f2 0C 06 3C 36 
35045 3f3 1C 00 00 00 
35049 3f4 00 00 00 00 
3504d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35051 3f6 00 00 00 63 
35055 3f7 3E 00 00 00 
35059 3f8 00 00 00 00 
3505d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35061 3fa 00 00 00 00 
35065 3fb 3E 63 06 1C 
35069 3fc 36 63 63 36 
3506d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
35071 3fe 00 00 00 00 
35075 3ff 00 00 00 00 | 	byte	$00[8]
35079 400 18 00 7E 00 
3507d 401 18 00 00 00 
35081 402 00 00 00 00 
35085 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35089 404 00 00 00 00 
3508d 405 00 00 00 00 | 	byte	$00[8]
35091 406 18 30 1E 00 
35095 407 00 00 1C 36 
35099 408 36 1C 00 00 
3509d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
350a1 40a 00 00 00 00 
350a5 40b 63 00 00 00 
350a9 40c 00 00 00 00 
350ad 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350b1 40e 00 00 00 18 
350b5 40f 18 00 00 00 
350b9 410 00 00 00 00 
350bd 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350c1 412 00 00 00 00 
350c5 413 00          | 	byte	$00[5]
350c6 413 CC 66 33 00 
350ca 414 33 33 33 33 
350ce 415 33 33 6E 00 
350d2 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
350d6 417 00 3F 66 66 
350da 418 66 3E 36 66 
350de 419 66 66 6F 00 
350e2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
350e6 41b 36 1C 08 00 
350ea 41c 3B 6E 66 06 
350ee 41d 06 06 0F 00 
350f2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
350f6 41f 00 00 00 7E 
350fa 420 7E 7E 7E 7E 
350fe 421 7E 7E 00 00 
35102 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35106 423 00 00 00 00 
3510a 424 00 00 00 00 
3510e 425 00 00 00 00 
35112 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35114 427             | 'vga_font       file "vgafont.def"
35114 427 00 00 00 00 
      ...             
35144 433 00 00 00 00 
35148 434 00 00 00    | st_font        file "st4font.def"
3514b 434 FF FF 00 00 
3514f 435 00 00 00 00 
35153 436 00 18 18 18 
35157 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3515b 438 18 18 18 18 
3515f 439 18 18 18 18 
35163 43a 18          | 	byte	$18[9]
35164 43b 00 00 00 00 
35168 43c 00 00 00    | 	byte	$00[7]
3516b 43c FF FF 18 18 
3516f 43d 18 18 18 18 
35173 43e 18 18 18 18 
35177 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3517b 440 FF FF 00 00 
3517f 441 00 00 00 00 
35183 442 00 18 18 18 
35187 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3518b 444 1F 1F 18 18 
3518f 445 18 18 18 18 
35193 446 18 18 18 18 
35197 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3519b 448 F8 F8 18 18 
3519f 449 18 18 18 18 
351a3 44a 18 00 00 00 
351a7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
351ab 44c 1F 1F 18 18 
351af 44d 18 18 18 18 
351b3 44e 18 00 00 00 
351b7 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
351bb 450 F8 F8 18 18 
351bf 451 18 18 18 18 
351c3 452 18 18 18 18 
351c7 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
351cb 454 1F 1F 00 00 
351cf 455 00 00 00 00 
351d3 456 00 18 18 18 
351d7 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351db 458 F8 F8 00 00 
351df 459 00 00 00 00 
351e3 45a 00 18 18 18 
351e7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351eb 45c FF FF 18 18 
351ef 45d 18 18 18 18 
351f3 45e 18 00 00 18 
351f7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
351fb 460 66 7E 7E 66 
351ff 461 66 66 66 30 
35203 462 18 00 00 7E 
35207 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3520b 464 3E 06 06 06 
3520f 465 06 7E 7E 18 
35213 466 0C 30 18 3C 
35217 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3521b 468 06 06 06 66 
3521f 469 66 7E 3C 00 
35223 46a 00 30 18 66 
35227 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3522b 46c 7E 7E 76 76 
3522f 46d 66 66 66 00 
35233 46e 00 30 18 7C 
35237 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3523b 470 1C 38 70 60 
3523f 471 60 7E 3E 00 
35243 472 00 30 18 7E 
35247 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3524b 474 18 0C 0C 06 
3524f 475 06 7E 7E 00 
35253 476 00 18 18 00 
35257 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3525b 478 18 18 0C 0C 
3525f 479 06 7E 7E 00 
35263 47a 00 30 18 3C 
35267 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3526b 47c 66 66 66 66 
3526f 47d 66          | 	byte	$66[5]
35270 47e 7E 3C 00 00 
35274 47f 00 00 06 06 
35278 480 06 06 16 1E 
3527c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
35280 482 7E 7E 00 00 
35284 483 00 00 00 00 
35288 484 00 3C 7C 60 
3528c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
35290 486 7E 7C 30 18 
35294 487 00 00 00 00 
35298 488 00 3C 7E 66 
3529c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
352a0 48a 7E 7C 18 0C 
352a4 48b 00 00 30 18 
352a8 48c 00 3C 3E 06 
352ac 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
352b0 48e 7E 7C 00 00 
352b4 48f 00 00 30 18 
352b8 490 00 3E 7E 66 
352bc 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
352c0 492 66 66 00 00 
352c4 493 00 00 30 18 
352c8 494 00 7C 7E 06 
352cc 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
352d0 496 7E 3E 00 00 
352d4 497 00 00 30 18 
352d8 498 00 7E 7E 30 
352dc 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
352e0 49a 7E 7E 00 00 
352e4 49b 00 00 18 18 
352e8 49c 00 7E 7E 30 
352ec 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
352f0 49e 7E 7E 00 00 
352f4 49f 00 00 30 18 
352f8 4a0 00 3C 7E 66 
352fc 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
35300 4a2 7E 3C 00 00 
35304 4a3 00 00 1C 1C 
35308 4a4 18 18 38 3C 
3530c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
35310 4a6 3C 3C 00 00 
35314 4a7 00 00 00 00 
35318 4a8 00 00 00 00 
3531c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35320 4aa 00 00 00 00 
35324 4ab 00 00       | 	byte	$00[6]
35326 4ab 18 18 18 18 
3532a 4ac 18 18 18 18 | 	byte	$18[8]
3532e 4ad 00 00 18 18 
35332 4ae 00 00 00 00 
35336 4af 66 66 66 66 
3533a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3533e 4b1 00 00 00 00 
35342 4b2 00 00 00 00 
35346 4b3 00          | 	byte	$00[9]
35347 4b3 66 66 FF FF 
3534b 4b4 66 66 FF FF 
3534f 4b5 66 66 00 00 
35353 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
35357 4b7 7C 7E 06 06 
3535b 4b8 3E 7C 60 60 
3535f 4b9 7E 3E 18 18 
35363 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
35367 4bb 66 30 30 18 
3536b 4bc 18 0C 0C 66 
3536f 4bd 66 00 00 00 
35373 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
35377 4bf 66 66 3C 1C 
3537b 4c0 1C FC FE 66 
3537f 4c1 66 FE FC 00 
35383 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
35387 4c3 18 18 18 18 
3538b 4c4 00 00 00 00 
3538f 4c5 00 00 00 00 
35393 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
35397 4c7 18 1C 0C 0C 
3539b 4c8 0C 0C 0C 0C 
3539f 4c9 1C 18 30 00 
353a3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
353a7 4cb 18 38 30 30 
353ab 4cc 30 30 30 30 
353af 4cd 38 18 0C 00 
353b3 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
353b7 4cf 66 66 3C 3C 
353bb 4d0 FF FF 3C 3C 
353bf 4d1 66 66 00 00 
353c3 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
353c7 4d3 00 18 18 18 
353cb 4d4 7E 7E 18 18 
353cf 4d5 18 00 00 00 
353d3 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
353d7 4d7 00 00 00 00 
353db 4d8 00 00       | 	byte	$00[6]
353dd 4d9 18 18 18 18 
353e1 4da 18          | 	byte	$18[5]
353e2 4da 0C 04 00 00 
353e6 4db 00 00 00 00 
353ea 4dc 7E 7E 00 00 
353ee 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
353f2 4de 00 00 00 00 
353f6 4df 00 00 00 00 
353fa 4e0 00 00 00 00 
353fe 4e1 00          | 	byte	$00[13]
353ff 4e1 18 18 18 00 
35403 4e2 00 00 00 60 
35407 4e3 60 60 30 30 
3540b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3540f 4e5 06 06 06 00 
35413 4e6 00 00 00 3C 
35417 4e7 7E 66 66 66 
3541b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3541f 4e9 66 7E 3C 00 
35423 4ea 00 00 00 18 
35427 4eb 18 1C 1C 18 
3542b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3542f 4ed 18 7E 7E 00 
35433 4ee 00 00 00 3C 
35437 4ef 7E 66 66 30 
3543b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3543f 4f1 0C 7E 7E 00 
35443 4f2 00 00 00 7E 
35447 4f3 7E 30 30 18 
3544b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3544f 4f5 66 7E 3C 00 
35453 4f6 00 00 00 30 
35457 4f7 30 38 38 3C 
3545b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3545f 4f9 7E 30 30 00 
35463 4fa 00 00 00 7E 
35467 4fb 7E 06 06 3E 
3546b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3546f 4fd 66 7E 3C 00 
35473 4fe 00 00 00 38 
35477 4ff 3C 0E 06 06 
3547b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3547f 501 66 7E 3C 00 
35483 502 00 00 00 7E 
35487 503 7E 60 60 30 
3548b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3548f 505 0C 0C 0C 00 
35493 506 00 00 00 3C 
35497 507 7E 66 66 3C 
3549b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3549f 509 66 7E 3C 00 
354a3 50a 00 00 00 3C 
354a7 50b 7E 66 66 7E 
354ab 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
354af 50d 70 3C 1C 00 
354b3 50e 00 00 00 00 
354b7 50f 00 00 18 18 
354bb 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
354bf 511 18 18 18 00 
354c3 512 00 00 00 00 
354c7 513 00 00 18 18 
354cb 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
354cf 515 18 18 18 0C 
354d3 516 04 00 00 00 
354d7 517 70 38 1C 0E 
354db 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
354df 519 70 00 00 00 
354e3 51a 00 00 00 00 
354e7 51b 00 00 7E 7E 
354eb 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
354ef 51d 00 00 00 00 
354f3 51e 00 00 00 00 | 	byte	$00[8]
354f7 51f 0E 1C 38 70 
354fb 520 E0 70 38 1C 
354ff 521 0E 00 00 00 
35503 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35507 523 7E 66 66 30 
3550b 524 30 18 18 18 
3550f 525 00 18 18 00 
35513 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35517 527 7E 66 66 66 
3551b 528 66 36 06 66 
3551f 529 66 7E 3C 00 
35523 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35527 52b 3C 7E 66 66 
3552b 52c 66 7E 7E 66 
3552f 52d 66 66 66 00 
35533 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35537 52f 7E 66 66 7E 
3553b 530 3E 66 66 66 
3553f 531 66 7E 3E 00 
35543 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35547 533 7E 66 66 06 
3554b 534 06 06 06 66 
3554f 535 66 7E 3C 00 
35553 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
35557 537 7E 66 66 66 
3555b 538 66 66 66 66 
3555f 539 66 7E 3E 00 
35563 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
35567 53b 7E 06 06 3E 
3556b 53c 3E 06 06 06 
3556f 53d 06 7E 7E 00 
35573 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
35577 53f 7E 06 06 3E 
3557b 540 3E 06 06 06 
3557f 541 06 06 06 00 
35583 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
35587 543 7E 06 06 76 
3558b 544 76 66 66 66 
3558f 545 66 7E 3C 00 
35593 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
35597 547 66 66 66 7E 
3559b 548 7E 66 66 66 
3559f 549 66 66 66 00 
355a3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
355a7 54b 7E 18 18 18 
355ab 54c 18 18 18 18 
355af 54d 18 7E 7E 00 
355b3 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
355b7 54f 60 60 60 60 
355bb 550 60 60 60    | 	byte	$60[7]
355be 551 66 66 7E 3C 
355c2 552 00 00 00 00 
355c6 553 66 66 36 36 
355ca 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
355ce 555 66 66 C6 C6 
355d2 556 00 00 00 00 
355d6 557 06 06 06 06 
355da 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
355de 559 06 06 7E 7E 
355e2 55a 00 00 00 00 
355e6 55b C6 C6 EE EE 
355ea 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
355ee 55d C6 C6 C6 C6 
355f2 55e 00 00 00 00 
355f6 55f 66 66 66 6E 
355fa 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
355fe 561 76 66 66 66 
35602 562 00 00 00 00 
35606 563 3C 7E 66 66 
3560a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3560e 565 66 66 7E 3C 
35612 566 00 00 00 00 
35616 567 3E 7E 66 66 
3561a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3561e 569 06 06 06 06 
35622 56a 00 00 00 00 
35626 56b 3C 7E 66 66 
3562a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3562e 56d 66 56 3E 6C 
35632 56e 00 00 00 00 
35636 56f 3E 7E 66 66 
3563a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3563e 571 66 66 C6 C6 
35642 572 00 00 00 00 
35646 573 7C 7E 06 06 
3564a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3564e 575 60 60 7E 3E 
35652 576 00 00 00 00 
35656 577 7E 7E 18 18 
3565a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3565e 579 18 18 18 18 
35662 57a 00 00 00 00 
35666 57b 66 66 66 66 
3566a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3566e 57d 66 66 7E 3C 
35672 57e 00 00 00 00 
35676 57f 66 66 66 66 
3567a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3567e 581 3C 3C 18 18 
35682 582 00 00 00 00 
35686 583 C6 C6 C6 C6 
3568a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3568e 585 FE EE C6 82 
35692 586 00 00 00 00 
35696 587 66 66 66 3C 
3569a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3569e 589 3C 66 66 66 
356a2 58a 00 00 00 00 
356a6 58b 66 66 66 66 
356aa 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
356ae 58d 18 18 18 18 
356b2 58e 00 00 00 00 
356b6 58f 7E 7E 30 30 
356ba 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
356be 591 06 06 7E 7E 
356c2 592 00 00 00 00 
356c6 593 3C 3C 0C 0C 
356ca 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
356ce 595 0C 0C 3C 3C 
356d2 596 00 00 00 00 
356d6 597 06 06 0C 0C 
356da 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
356de 599 60 60 C0 C0 
356e2 59a 00 00 00 00 
356e6 59b 3C 3C 30 30 
356ea 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
356ee 59d 30 30 3C 3C 
356f2 59e 00 00 00 00 
356f6 59f 18 18 3C 3C 
356fa 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
356fe 5a1 00 00 00 00 
35702 5a2 00 00 00 00 
35706 5a3 00 00 00 00 
3570a 5a4 00 00 00 00 
3570e 5a5 00 00       | 	byte	$00[18]
35710 5a6 FE FE 00 00 
35714 5a7 00 00 0C 0C 
35718 5a8 18 18 00 00 
3571c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
35720 5aa 00 00 00 00 
35724 5ab 00 00 00 00 
35728 5ac 00          | 	byte	$00[9]
35729 5ac 3C 7C 60 7C 
3572d 5ad 7E 66 66 7E 
35731 5ae 7C 00 00 00 
35735 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35739 5b0 3E 7E 66 66 
3573d 5b1 66 66 66 7E 
35741 5b2 3E 00 00 00 
35745 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35749 5b4 3C 3E 06 06 
3574d 5b5 06 06 06 7E 
35751 5b6 7C 00 00 00 
35755 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35759 5b8 7C 7E 66 66 
3575d 5b9 66 66 66 7E 
35761 5ba 7C 00 00 00 
35765 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35769 5bc 3C 7E 66 66 
3576d 5bd 7E 06 06 7E 
35771 5be 7C 00 00 00 
35775 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
35779 5c0 18 7E 7E 18 
3577d 5c1 18 18 18 18 
35781 5c2 18 00 00 00 
35785 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35789 5c4 7C 7E 66 66 
3578d 5c5 66 66 7E 7C 
35791 5c6 60 7E 3E 00 
35795 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35799 5c8 3E 7E 66 66 
3579d 5c9 66 66 66 66 
357a1 5ca 66 00 00 00 
357a5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
357a9 5cc 1C 1C 18 18 
357ad 5cd 18 18 18 3C 
357b1 5ce 3C 00 00 00 
357b5 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
357b9 5d0 30 30 30 30 
357bd 5d1 30 30 30 30 
357c1 5d2 30          | 	byte	$30[9]
357c2 5d2 3E 1E 00 00 
357c6 5d3 06 06 06 36 
357ca 5d4 36 1E 1E 1E 
357ce 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
357d2 5d6 00 00 00 00 
357d6 5d7 1C 1C 18 18 
357da 5d8 18 18 18 18 
357de 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
357e2 5da 00 00 00 00 
357e6 5db 00 00 00    | 	byte	$00[7]
357e9 5dc 6C FE FE D6 
357ed 5dd D6 C6 C6 C6 
357f1 5de C6 00 00 00 
357f5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
357f9 5e0 3E 7E 66 66 
357fd 5e1 66 66 66 66 
35801 5e2 66 00 00 00 
35805 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35809 5e4 3C 7E 66 66 
3580d 5e5 66 66 66 7E 
35811 5e6 3C 00 00 00 
35815 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35819 5e8 3E 7E 66 66 
3581d 5e9 66 66 66 7E 
35821 5ea 3E 06 06 00 
35825 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35829 5ec 7C 7E 66 66 
3582d 5ed 66 66 66 7E 
35831 5ee 7C 60 60 00 
35835 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35839 5f0 3E 7E 66 06 
3583d 5f1 06 06 06 06 
35841 5f2 06 00 00 00 
35845 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35849 5f4 7C 7E 06 0E 
3584d 5f5 3C 70 60 7E 
35851 5f6 3E 00 00 00 
35855 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35859 5f8 7E 7E 18 18 
3585d 5f9 18 18 18 78 
35861 5fa 70 00 00 00 
35865 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35869 5fc 66 66 66 66 
3586d 5fd 66 66 66    | 	byte	$66[7]
35870 5fe 7E 7C 00 00 
35874 5ff 00 00 00 00 
35878 600 00 66 66 66 
3587c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35880 602 18 18 00 00 
35884 603 00 00 00 00 
35888 604 00 C6 C6 D6 
3588c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35890 606 C6 82 00 00 
35894 607 00 00 00 00 
35898 608 00 66 66 3C 
3589c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
358a0 60a 66 66 00 00 
358a4 60b 00 00 00 00 
358a8 60c 00 66 66 66 
358ac 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
358b0 60e 7C 60 7E 3E 
358b4 60f 00 00 00 00 
358b8 610 00 7E 7E 30 
358bc 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
358c0 612 7E 7E 00 00 
358c4 613 00 00 30 18 
358c8 614 18 18 18 0C 
358cc 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
358d0 616 18 30 00 00 
358d4 617 00 00 18 18 
358d8 618 18 18 18 18 
358dc 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
358e0 61a 18 18 00 00 
358e4 61b 00 00 0C 18 
358e8 61c 18 18 18 30 
358ec 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
358f0 61e 18 0C 00 00 
358f4 61f 00 00 6C 7E 
358f8 620 36 00 00 00 
358fc 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
35900 622 00 00 00 00 
35904 623 00 00 00 00 
35908 624 00          | 	byte	$00[9]
35909 624 18 18 18 18 
3590d 625 18 18 00 00 
35911 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35914 627             | 'amiga_font     file "amigafont.def"
35914 627 00 6C FE FE 
35918 628 7C 38 10 00 
3591c 629 18 18 18 F8 
35920 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35924 62b C0 C0 C0 C0 
35928 62c C0 C0 C0 C0 | 	byte	$c0[8]
3592c 62d 18 18 18 1F 
35930 62e 1F 00 00 00 
35934 62f 18 18 18 1F 
35938 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3593c 631 00 00 00 1F 
35940 632 1F 18 18 18 
35944 633 C0 E0 70 38 
35948 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3594c 635 03 07 0E 1C 
35950 636 38 70 E0 C0 
35954 637 80 C0 E0 F0 
35958 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3595c 639 00 00 00 00 
35960 63a F0 F0 F0 F0 
35964 63b 01 03 07 0F 
35968 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3596c 63d F0 F0 F0 F0 
35970 63e 00 00 00 00 
35974 63f 0F 0F 0F 0F 
35978 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3597c 641 FF FF 00 00 
35980 642 00 00 00 00 
35984 643 00 00 00 00 
35988 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3598c 645 00 00 00 00 
35990 646 0F 0F 0F 0F 
35994 647 00 38 38 EE 
35998 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3599c 649 00 00 00 F8 
359a0 64a F8 18 18 18 
359a4 64b 00 00 00 FF 
359a8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
359ac 64d 18 18 18 FF 
359b0 64e FF 18 18 18 
359b4 64f 00 00 3C 7E 
359b8 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
359bc 651 00 00 00 00 
359c0 652 FF FF FF FF 
359c4 653 03 03 03 03 
359c8 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
359cc 655 00 00 00 FF 
359d0 656 FF 18 18 18 
359d4 657 18 18 18 FF 
359d8 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
359dc 659 0F 0F 0F 0F 
359e0 65a 0F 0F 0F 0F | 	byte	$0f[8]
359e4 65b 18 18 18 F8 
359e8 65c F8 00 00 00 
359ec 65d 1E 06 1E 06 
359f0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
359f4 65f 00 18 3C 7E 
359f8 660 18 18 18 00 
359fc 661 00 18 18 18 
35a00 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35a04 663 00 18 0C 7E 
35a08 664 0C 18 00 00 
35a0c 665 00 18 30 7E 
35a10 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35a14 667 00 00 00 00 
35a18 668 00 00 00 00 
35a1c 669 00          | 	byte	$00[9]
35a1d 669 18 18 18 18 
35a21 66a 00 18 00 00 
35a25 66b 66 66 66 00 
35a29 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35a2d 66d 66 FF 66 66 
35a31 66e FF 66 00 18 
35a35 66f 7C 06 3C 60 
35a39 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35a3d 671 66 36 18 0C 
35a41 672 66 62 00 38 
35a45 673 6C 38 1C F6 
35a49 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35a4d 675 18 18 18 00 
35a51 676 00 00 00 00 
35a55 677 70 38 18 18 
35a59 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35a5d 679 0E 1C 18 18 
35a61 67a 1C 0E 00 00 
35a65 67b 66 3C FF 3C 
35a69 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35a6d 67d 18 18 7E 18 
35a71 67e 18 00 00 00 
35a75 67f 00 00 00 00 
35a79 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35a7d 681 00 00 7E 00 
35a81 682 00 00 00 00 
35a85 683 00 00 00 00 
35a89 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35a8d 685 60 30 18 0C 
35a91 686 06 02 00 00 
35a95 687 3C 66 76 6E 
35a99 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35a9d 689 18 1C 18 18 
35aa1 68a 18 7E 00 00 
35aa5 68b 3C 66 30 18 
35aa9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35aad 68d 7E 30 18 30 
35ab1 68e 66 3C 00 00 
35ab5 68f 30 38 3C 36 
35ab9 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35abd 691 7E 06 3E 60 
35ac1 692 66 3C 00 00 
35ac5 693 3C 06 3E 66 
35ac9 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35acd 695 7E 60 30 18 
35ad1 696 0C 0C 00 00 
35ad5 697 3C 66 3C 66 
35ad9 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35add 699 3C 66 7C 60 
35ae1 69a 30 1C 00 00 
35ae5 69b 00 18 18 00 
35ae9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35aed 69d 00 18 18 00 
35af1 69e 18 18 0C 60 
35af5 69f 30 18 0C 18 
35af9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35afd 6a1 00 7E 00 00 
35b01 6a2 7E 00 00 06 
35b05 6a3 0C 18 30 18 
35b09 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35b0d 6a5 3C 66 30 18 
35b11 6a6 00 18 00 00 
35b15 6a7 3C 66 76 76 
35b19 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35b1d 6a9 18 3C 66 66 
35b21 6aa 7E 66 00 00 
35b25 6ab 3E 66 3E 66 
35b29 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35b2d 6ad 3C 66 06 06 
35b31 6ae 66 3C 00 00 
35b35 6af 1E 36 66 66 
35b39 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35b3d 6b1 7E 06 3E 06 
35b41 6b2 06 7E 00 00 
35b45 6b3 7E 06 3E 06 
35b49 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35b4d 6b5 7C 06 06 76 
35b51 6b6 66 7C 00 00 
35b55 6b7 66 66 7E 66 
35b59 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35b5d 6b9 7E 18 18 18 
35b61 6ba 18 7E 00 00 
35b65 6bb 60 60 60 60 
35b69 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35b6d 6bd 66 36 1E 1E 
35b71 6be 36 66 00 00 
35b75 6bf 06 06 06 06 
35b79 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35b7d 6c1 C6 EE FE D6 
35b81 6c2 C6 C6 00 00 
35b85 6c3 66 6E 7E 7E 
35b89 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35b8d 6c5 3C 66 66 66 
35b91 6c6 66 3C 00 00 
35b95 6c7 3E 66 66 3E 
35b99 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35b9d 6c9 3C 66 66 66 
35ba1 6ca 36 6C 00 00 
35ba5 6cb 3E 66 66 3E 
35ba9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35bad 6cd 3C 06 3C 60 
35bb1 6ce 60 3C 00 00 
35bb5 6cf 7E 18 18 18 
35bb9 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35bbd 6d1 66 66 66 66 
35bc1 6d2 66          | 	byte	$66[5]
35bc2 6d2 7E 00 00 66 
35bc6 6d3 66 66 66 3C 
35bca 6d4 18 00 00 C6 
35bce 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35bd2 6d6 C6 00 00 66 
35bd6 6d7 66 3C 3C 66 
35bda 6d8 66 00 00 66 
35bde 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35be2 6da 18 00 00 7E 
35be6 6db 30 18 0C 06 
35bea 6dc 7E 00 00 78 
35bee 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35bf2 6de 78 00 00 02 
35bf6 6df 06 0C 18 30 
35bfa 6e0 60 00 00 1E 
35bfe 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35c02 6e2 1E 00 00 10 
35c06 6e3 38 6C C6 00 
35c0a 6e4 00 00 00 00 
35c0e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35c12 6e6 FF 00 00 18 
35c16 6e7 3C 7E 7E 3C 
35c1a 6e8 18 00 00 00 
35c1e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35c22 6ea 7C 00 00 06 
35c26 6eb 06 3E 66 66 
35c2a 6ec 3E 00 00 00 
35c2e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35c32 6ee 3C 00 00 60 
35c36 6ef 60 7C 66 66 
35c3a 6f0 7C 00 00 00 
35c3e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35c42 6f2 3C 00 00 70 
35c46 6f3 18 7C 18 18 
35c4a 6f4 18 00 00 00 
35c4e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35c52 6f6 60 3E 00 06 
35c56 6f7 06 3E 66 66 
35c5a 6f8 66 00 00 18 
35c5e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35c62 6fa 3C 00 00 60 
35c66 6fb 00 60 60 60 
35c6a 6fc 60 3C 00 06 
35c6e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35c72 6fe 66 00 00 1C 
35c76 6ff 18 18 18 18 
35c7a 700 3C 00 00 00 
35c7e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35c82 702 C6 00 00 00 
35c86 703 3E 66 66 66 
35c8a 704 66 00 00 00 
35c8e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35c92 706 3C 00 00 00 
35c96 707 3E 66 66 3E 
35c9a 708 06 06 00 00 
35c9e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35ca2 70a 60 60 00 00 
35ca6 70b 3E 66 06 06 
35caa 70c 06 00 00 00 
35cae 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35cb2 70e 3E 00 00 18 
35cb6 70f 7E 18 18 18 
35cba 710 70 00 00 00 
35cbe 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35cc2 712 7C 00 00 00 
35cc6 713 66 66 66 3C 
35cca 714 18 00 00 00 
35cce 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35cd2 716 6C 00 00 00 
35cd6 717 66 3C 18 3C 
35cda 718 66 00 00 00 
35cde 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35ce2 71a 30 1E 00 00 
35ce6 71b 7E 30 18 0C 
35cea 71c 7E 00 00 18 
35cee 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35cf2 71e 3C 00 18 18 
35cf6 71f 18 18 18 18 
35cfa 720 18 18 00 7E 
35cfe 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35d02 722 60 00 10 18 
35d06 723 1C 1E 1C 18 
35d0a 724 10 00 08 18 
35d0e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35d12 726 08 00       | 	byte	$08, $00
35d14 727 00 00 00 00 
35d18 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35d19 728 80 00 00 00 
35d1d 729 00 80 00 00 
35d21 72a 80 80 00 00 
35d25 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35d29 72c 80 00 80 00 
35d2d 72d 00 40 80 00 
35d31 72e AA AA AA 00 
35d35 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35d39 730 FF 00 00 00 
35d3d 731 00 FF 00 00 
35d41 732 FF FF 00 00 
35d45 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35d49 734 FF 00 FF 00 
35d4d 735 00 FF FF 00 
35d51 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35d54 737 00 00 00 00 
35d58 738 00          | ataripalette   file "ataripalettep2.def"
35d59 738 11 11 11 00 
35d5d 739 22 22 22 00 
35d61 73a 33 33 33 00 
35d65 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35d69 73c 55 55 55 00 
35d6d 73d 66 66 66 00 
35d71 73e 77 77 77 00 
35d75 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35d79 740 99 99 99 00 
35d7d 741 AA AA AA 00 
35d81 742 BB BB BB 00 
35d85 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35d89 744 DD DD DD 00 
35d8d 745 EE EE EE 00 
35d91 746 FF FF FF 00 
35d95 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35d99 748 00 14 40 00 
35d9d 749 00 1E 60 00 
35da1 74a 00 28 80 00 
35da5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35da9 74c 00 3C BF 00 
35dad 74d 00 46 DF 00 
35db1 74e 00 50 FF 00 
35db5 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35db9 750 39 77 FF 00 
35dbd 751 55 8A FF 00 
35dc1 752 71 9E FF 00 
35dc5 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35dc9 754 AA C5 FF 00 
35dcd 755 C6 D8 FF 00 
35dd1 756 E3 EC FF 00 
35dd5 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35dd9 758 00 00 40 00 
35ddd 759 00 00 60 00 
35de1 75a 00 00 80 00 
35de5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35de9 75c 00 00 BF 00 
35ded 75d 00 00 DF 00 
35df1 75e 00 00 FF 00 
35df5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35df9 760 39 39 FF 00 
35dfd 761 55 55 FF 00 
35e01 762 71 71 FF 00 
35e05 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35e09 764 AA AA FF 00 
35e0d 765 C6 C6 FF 00 
35e11 766 E3 E3 FF 00 
35e15 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35e19 768 20 00 40 00 
35e1d 769 30 00 60 00 
35e21 76a 40 00 80 00 
35e25 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35e29 76c 60 00 BF 00 
35e2d 76d 70 00 DF 00 
35e31 76e 80 00 FF 00 
35e35 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35e39 770 9C 39 FF 00 
35e3d 771 AA 55 FF 00 
35e41 772 B8 71 FF 00 
35e45 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35e49 774 D5 AA FF 00 
35e4d 775 E3 C6 FF 00 
35e51 776 F1 E3 FF 00 
35e55 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35e59 778 40 00 40 00 
35e5d 779 60 00 60 00 
35e61 77a 80 00 80 00 
35e65 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35e69 77c BF 00 BF 00 
35e6d 77d DF 00 DF 00 
35e71 77e FF 00 FF 00 
35e75 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35e79 780 FF 39 FF 00 
35e7d 781 FF 55 FF 00 
35e81 782 FF 71 FF 00 
35e85 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
35e89 784 FF AA FF 00 
35e8d 785 FF C6 FF 00 
35e91 786 FF E3 FF 00 
35e95 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
35e99 788 40 00 20 00 
35e9d 789 60 00 30 00 
35ea1 78a 80 00 40 00 
35ea5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
35ea9 78c BF 00 60 00 
35ead 78d DF 00 70 00 
35eb1 78e FF 00 80 00 
35eb5 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
35eb9 790 FF 39 9C 00 
35ebd 791 FF 55 AA 00 
35ec1 792 FF 71 B8 00 
35ec5 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
35ec9 794 FF AA D5 00 
35ecd 795 FF C6 E3 00 
35ed1 796 FF E3 F1 00 
35ed5 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
35ed9 798 40 00 00 00 
35edd 799 60 00 00 00 
35ee1 79a 80 00 00 00 
35ee5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
35ee9 79c BF 00 00 00 
35eed 79d DF 00 00 00 
35ef1 79e FF 00 00 00 
35ef5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
35ef9 7a0 FF 39 39 00 
35efd 7a1 FF 55 55 00 
35f01 7a2 FF 71 71 00 
35f05 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
35f09 7a4 FF AA AA 00 
35f0d 7a5 FF C6 C6 00 
35f11 7a6 FF E3 E3 00 
35f15 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
35f19 7a8 40 10 00 00 
35f1d 7a9 60 18 00 00 
35f21 7aa 80 20 00 00 
35f25 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
35f29 7ac BF 30 00 00 
35f2d 7ad DF 38 00 00 
35f31 7ae FF 40 00 00 
35f35 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
35f39 7b0 FF 6A 39 00 
35f3d 7b1 FF 80 55 00 
35f41 7b2 FF 95 71 00 
35f45 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
35f49 7b4 FF BF AA 00 
35f4d 7b5 FF D5 C6 00 
35f51 7b6 FF EA E3 00 
35f55 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
35f59 7b8 40 20 00 00 
35f5d 7b9 60 30 00 00 
35f61 7ba 80 40 00 00 
35f65 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
35f69 7bc BF 60 00 00 
35f6d 7bd DF 70 00 00 
35f71 7be FF 80 00 00 
35f75 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
35f79 7c0 FF 9C 39 00 
35f7d 7c1 FF AA 55 00 
35f81 7c2 FF B8 71 00 
35f85 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
35f89 7c4 FF D5 AA 00 
35f8d 7c5 FF E3 C6 00 
35f91 7c6 FF F1 E3 00 
35f95 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
35f99 7c8 40 30 00 00 
35f9d 7c9 60 48 00 00 
35fa1 7ca 80 60 00 00 
35fa5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
35fa9 7cc BF 90 00 00 
35fad 7cd DF A8 00 00 
35fb1 7ce FF C0 00 00 
35fb5 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
35fb9 7d0 FF CE 39 00 
35fbd 7d1 FF D5 55 00 
35fc1 7d2 FF DC 71 00 
35fc5 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
35fc9 7d4 FF EA AA 00 
35fcd 7d5 FF F1 C6 00 
35fd1 7d6 FF F8 E3 00 
35fd5 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
35fd9 7d8 30 40 00 00 
35fdd 7d9 48 60 00 00 
35fe1 7da 60 80 00 00 
35fe5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
35fe9 7dc 90 BF 00 00 
35fed 7dd A8 DF 00 00 
35ff1 7de C0 FF 00 00 
35ff5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
35ff9 7e0 CE FF 39 00 
35ffd 7e1 D5 FF 55 00 
36001 7e2 DC FF 71 00 
36005 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36009 7e4 EA FF AA 00 
3600d 7e5 F1 FF C6 00 
36011 7e6 F8 FF E3 00 
36015 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36019 7e8 00 40 00 00 
3601d 7e9 00 60 00 00 
36021 7ea 00 80 00 00 
36025 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36029 7ec 00 BF 00 00 
3602d 7ed 00 DF 00 00 
36031 7ee 00 FF 00 00 
36035 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36039 7f0 39 FF 39 00 
3603d 7f1 55 FF 55 00 
36041 7f2 71 FF 71 00 
36045 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36049 7f4 AA FF AA 00 
3604d 7f5 C6 FF C6 00 
36051 7f6 E3 FF E3 00 
36055 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36059 7f8 00 40 14 00 
3605d 7f9 00 60 1E 00 
36061 7fa 00 80 28 00 
36065 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36069 7fc 00 BF 3C 00 
3606d 7fd 00 DF 46 00 
36071 7fe 00 FF 50 00 
36075 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
36079 800 39 FF 77 00 
3607d 801 55 FF 8A 00 
36081 802 71 FF 9E 00 
36085 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36089 804 AA FF C5 00 
3608d 805 C6 FF D8 00 
36091 806 E3 FF EC 00 
36095 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
36099 808 00 40 28 00 
3609d 809 00 60 3C 00 
360a1 80a 00 80 50 00 
360a5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
360a9 80c 00 BF 78 00 
360ad 80d 00 DF 8C 00 
360b1 80e 00 FF A0 00 
360b5 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
360b9 810 39 FF B5 00 
360bd 811 55 FF C0 00 
360c1 812 71 FF CA 00 
360c5 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
360c9 814 AA FF DF 00 
360cd 815 C6 FF EA 00 
360d1 816 E3 FF F4 00 
360d5 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
360d9 818 00 40 40 00 
360dd 819 00 60 60 00 
360e1 81a 00 80 80 00 
360e5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
360e9 81c 00 BF BF 00 
360ed 81d 00 DF DF 00 
360f1 81e 00 FF FF 00 
360f5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
360f9 820 39 FF FF 00 
360fd 821 55 FF FF 00 
36101 822 71 FF FF 00 
36105 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36109 824 AA FF FF 00 
3610d 825 C6 FF FF 00 
36111 826 E3 FF FF 00 
36115 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36119 828 00 28 40 00 
3611d 829 00 3C 60 00 
36121 82a 00 50 80 00 
36125 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36129 82c 00 78 BF 00 
3612d 82d 00 8C DF 00 
36131 82e 00 A0 FF 00 
36135 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36139 830 39 B5 FF 00 
3613d 831 55 C0 FF 00 
36141 832 71 CA FF 00 
36145 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36149 834 AA DF FF 00 
3614d 835 C6 EA FF 00 
36151 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
36154 837             | 
36154 837             | '**********************************************************************************
36154 837             | '
36154 837             | '        Timings and colors definitions
36154 837             | '
36154 837             | '**********************************************************************************
36154 837             | 
36154 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
36154 837 08 00 00 00 
36158 838 3C 00 00 00 
3615c 839 08 00 00 00 
36160 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
36164 83b 07 00 00 00 
36168 83c 04 00 00 00 
3616c 83d 01 00 00 00 
36170 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
36174 83f 58 02 00 00 
36178 840 20 9E 4B 14 
3617c 841 FB A8 9E 01 
36180 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36184 843 00 00 00 00 
36188 844 C0 00 00 00 
3618c 845 00 00 00 00 
36190 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36194 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
36194 847 00 75 C7 97 
36198 848 27 47 F6 0A 
3619c 849 05 79 CB 9B 
361a0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
361a4 84b             | 
361a4 84b             | ''--------  Initialization  ----------------------------------------------------------------
361a4 84b             | 
361a4 84b 28 0C 64 FD | hdmi            setq    #6
361a8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
361ac 84d 28 10 64 FD |                 setq    #8
361b0 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
361b4 84f             | 
361b4 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
361b8 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
361bc 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
361c0 852 D6 C6 01 F1 |                 add     t1,hbase
361c4 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
361c8 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
361cc 855 7B 0B 80 5F 
361d0 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
361d4 857 66 66 86 FF 
361d8 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
361dc 859             | '
361dc 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
361e0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
361e4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
361e8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
361ec 85d             | 
361ec 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
361f0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
361f4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
361f8 860             | 
361f8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
361f8 860             | 
361f8 860 28 06 64 FD | p101            setq 	#3
361fc 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
36200 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36204 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36208 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3620c 865 00 A0 05 F6 |                 mov     dlinum, #0
36210 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36214 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36218 868             | 
36218 868             | 
36218 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3621c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
36220 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36224 86b             |                 
36224 86b             | 
36224 86b             | 
36224 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36224 86b             |   
36224 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36228 86c 29 FE 65 3D |          if_nc  setq2   #255
3622c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
36230 86e             | 
36230 86e             | '' -----   up porch (before the picture)
36230 86e             | 
36230 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36234 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36238 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3623c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
36240 872             |  
36240 872             |    
36240 872             |  
36240 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36244 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36248 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3624c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36250 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
36254 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
36258 878             | 
36258 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3625c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
36260 87a 48 00 B0 FD | 		call    #dli
36264 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
36268 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3626c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
36270 87e             |                 	
36270 87e             |                 
36270 87e             | 
36270 87e             |  
36270 87e             | '' ------- the main screen drawing starts here
36270 87e             | 
36270 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
36274 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
36278 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3627c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
36280 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
36284 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36288 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3628c 885             |               
3628c 885             | 
3628c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
36290 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
36294 887             | 
36294 887             | ' ---------------- All visible lines displayed now, start vblank  
36294 887             | 
36294 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
36298 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3629c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
362a0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
362a4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
362a8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
362ac 88d             | 
362ac 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
362ac 88d             | 
362ac 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
362ac 88d             | 
362ac 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
362b0 88e             | 
362b0 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
362b4 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
362b8 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
362bc 891             | 
362bc 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
362c0 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
362c4 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
362c8 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
362cc 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
362d0 896             | 
362d0 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
362d4 897 DD C6 41 F8 |                 getnib  t1,dl,#0
362d8 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
362dc 899 70 00 90 AD |     if_z        jmp     #preload
362e0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
362e4 89b 94 00 90 AD |     if_z        jmp     #preload2
362e8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
362ec 89d 0C 00 90 AD |     if_z        jmp     #p390
362f0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
362f4 89f 28 00 90 AD |     if_z        jmp     #p391  
362f8 8a0             | 
362f8 8a0 2D 00 64 FD | p308            ret
362fc 8a1             |    
362fc 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
36300 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36304 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36308 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3630c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
36310 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36314 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36318 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3631c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
36320 8aa             |  
36320 8aa             | '' --------  Reload palette. To do 
36320 8aa             | 
36320 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36324 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36328 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3632c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
36330 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36334 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36338 8b0 70 FF 9F FD |         	jmp     #dli                
3633c 8b1             |       
3633c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3633c 8b1             | 
3633c 8b1             | 
3633c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3633c 8b1             | 
3633c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
36340 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36344 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36348 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3634c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
36350 8b6             |         
36350 8b6             | '' -------------- Preload a line from PSRAM        
36350 8b6             |         
36350 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
36354 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
36358 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3635c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
36360 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
36364 8bb             | 
36364 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
36368 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3636c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
36370 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
36374 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
36378 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3637c 8c1             |  
3637c 8c1             |  
3637c 8c1             | preload2      '  incmod  dlinum,#3
3637c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
36380 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
36384 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36388 8c4 28 02 64 FD |                 setq	#1
3638c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
36390 8c6             |                 
36390 8c6             | 
36390 8c6             | '' -------------- Draw sprites
36390 8c6             | 
36390 8c6 CF 5C 02 F6 | sprite          mov t8,frames
36394 8c7 10 5C 0E F5 | 		and t8,#16 wz
36398 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3639c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
363a0 8ca             | 		
363a0 8ca             | 
363a0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
363a4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
363a8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
363ac 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
363b0 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
363b4 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
363b8 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
363bc 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
363c0 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
363c4 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
363c8 8d4 01 52 86 F1 |                 sub     sprite_h,#1
363cc 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
363d0 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
363d4 8d7             | 
363d4 8d7             | 
363d4 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
363d8 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
363dc 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
363e0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
363e4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
363e8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
363ec 8dd 00 5E 06 F6 |                 mov 	t9,#0
363f0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
363f4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
363f8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
363fc 8e1             |      
363fc 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
36400 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36404 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36408 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3640c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
36410 8e6             |                 
36410 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36414 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36418 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3641c 8e9             |   		
3641c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
36420 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36424 8eb             | 
36424 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36428 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3642c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
36430 8ee             |  
36430 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36434 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36438 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3643c 8f1             | 	
3643c 8f1             | 	
3643c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
36440 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36444 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36448 8f4             | 
36448 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3644c 8f5             | 
3644c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
36450 8f6 01 58 86 F1 | 	 	sub     t6,#1
36454 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
36458 8f8             | 
36458 8f8 28 58 62 FD |                 setq   	t6
3645c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
36460 8fa 28 5D 02 F6 |                 mov t8,sprite_w
36464 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
36468 8fc 24 00 90 AD |         if_z    jmp #p898
3646c 8fd             |          
3646c 8fd             |         
3646c 8fd 70 5F 06 F6 |                 mov  t9,#368
36470 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
36474 8ff             | 
36474 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
36478 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3647c 901 FF FF 7F FF 
36480 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
36484 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36488 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3648c 905 2D 01 00 F5 |                 and 0-0, t7
36490 906             |                
36490 906             | 
36490 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
36494 907 E5 E0 7A FA |                 wmlong 368,t3				
36498 908             |                 
36498 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3649c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
364a0 90a 2D 00 64 FD |                 ret
364a4 90b             | 	
364a4 90b             | 	
364a4 90b             |                
364a4 90b             |  
364a4 90b             | '' -------------- Graphics line ------------------------------------------------------------
364a4 90b             |  
364a4 90b             | 
364a4 90b             | '' consts and vars
364a4 90b             | 
364a4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
364a8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
364ac 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
364b0 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
364b4 90f             | 
364b4 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
364b8 910             | 
364b8 910             | '------ these longs will be set by setmode function
364b8 910             | 
364b8 910 00 00 00 00 | m_bs            long    0        'blanks before sync
364bc 911 00 00 00 00 | m_sn            long    0        'sync
364c0 912 00 00 00 00 | m_bv            long    0        'blanks before visible
364c4 913 00 00 00 00 | m_vi            long    0        'visible pixels #
364c8 914             | 'm_border        long    0        'left/right borders
364c8 914 00 00 00 00 | i_upporch       long    0        'up porch lines
364cc 915 00 00 00 00 | i_vsync         long    0        'vsync lines
364d0 916 00 00 00 00 | i_downporch     long    0        'down porch lines
364d4 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
364d8 918 00 00 00 00 | i_totalvis      long    0
364dc 919             | 
364dc 919             | '-------------------------------------
364dc 919             |  
364dc 919 00 00 00 00 | linenum         long    0
364e0 91a 00 00 00 00 | frames          long    0
364e4 91b 00 00 00 00 | dlinum long 0
364e8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
364ec 91d             | 
364ec 91d 00 00 00 00 | vblankptr       long    0
364f0 91e 00 00 00 00 | modeptr         long    0
364f4 91f 00 00 00 00 | paletteptr      long    0
364f8 920 00 00 00 00 | dlptr           long    0
364fc 921 01 00 00 00 | hbase           long    1
36500 922 00 00 00 00 | mailbox         long    0
36504 923 00 00 00 00 | spriteptr          long 0
36508 924             | 
36508 924 00 00 00 00 | cmd             long    0
3650c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
36510 926 00 04 00 00 | buf2            long    1024
36514 927 01 00 00 00 | dlptr2          long    1
36518 928 01 00 00 00 | dl              long    1
3651c 929             | 
3651c 929 00 00 00 00 | buf1c long 0
36520 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36524 92b 01 00 00 00 | framebuf2       long    1
36528 92c 01 00 00 00 | hsync0          long    1
3652c 92d 01 00 00 00 | hsync1          long    1
36530 92e             | 
36530 92e 01 00 00 00 | t1              long    1
36534 92f 00 00 00 00 | t2 long 0
36538 930 00 00 00 00 | t3 long 0
3653c 931 00 00 00 00 | t4 long 0
36540 932             | 
36540 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36544 933 00 00 00 00 | rcnt2           long    0
36548 934 00 00 00 00 | rcnt2a          long    0
3654c 935 00 00 00 00 | roffset         long    0
36550 936 00 00 00 00 | rdl             long    0  'dl repeat line
36554 937 00 00 00 00 | dlc             long    0  'dl command
36558 938             | 
36558 938 FF FF FF FF | affffffff       long    $ffffffff
3655c 939 00 00 00 00 | sprite1pointer long 0
36560 93a 00 00 00 00 | sprite1xy      long 0
36564 93b 00 00 00 00 | sprite1wh      long 0
36568 93c 00 00 00 00 | sprite2pointer long 0
3656c 93d 00 00 00 00 | sprite2xy      long 0
36570 93e 00 00 00 00 | sprite2wh      long 0
36574 93f 00 00 00 00 | sprite3pointer long 0
36578 940 00 00 00 00 | sprite3xy      long 0
3657c 941 00 00 00 00 | sprite3wh      long 0
36580 942 00 00 00 00 | sprite4pointer long 0
36584 943 00 00 00 00 | sprite4xy      long 0
36588 944 00 00 00 00 | sprite4wh      long 0
3658c 945 00 00 00 00 | sprite5pointer long 0
36590 946 00 00 00 00 | sprite5xy      long 0
36594 947 00 00 00 00 | sprite5wh      long 0
36598 948 00 00 00 00 | sprite6pointer long 0
3659c 949 00 00 00 00 | sprite6xy      long 0
365a0 94a 00 00 00 00 | sprite6wh      long 0
365a4 94b 00 00 00 00 | sprite7pointer long 0
365a8 94c 00 00 00 00 | sprite7xy      long 0
365ac 94d 00 00 00 00 | sprite7wh      long 0
365b0 94e 00 00 00 00 | sprite8pointer long 0
365b4 94f 00 00 00 00 | sprite8xy      long 0
365b8 950 00 00 00 00 | sprite8wh      long 0
365bc 951 00 00 00 00 | sprite9pointer long 0
365c0 952 00 00 00 00 | sprite9xy      long 0
365c4 953 00 00 00 00 | sprite9wh      long 0
365c8 954 00 00 00 00 | sprite10pointer long 0
365cc 955 00 00 00 00 | sprite10xy      long 0
365d0 956 00 00 00 00 | sprite10wh      long 0
365d4 957 00 00 00 00 | sprite11pointer long 0
365d8 958 00 00 00 00 | sprite11xy      long 0
365dc 959 00 00 00 00 | sprite11wh      long 0
365e0 95a 00 00 00 00 | sprite12pointer long 0
365e4 95b 00 00 00 00 | sprite12xy      long 0
365e8 95c 00 00 00 00 | sprite12wh      long 0
365ec 95d 00 00 00 00 | sprite13pointer long 0
365f0 95e 00 00 00 00 | sprite13xy      long 0
365f4 95f 00 00 00 00 | sprite13wh      long 0
365f8 960 00 00 00 00 | sprite14pointer long 0
365fc 961 00 00 00 00 | sprite14xy      long 0
36600 962 00 00 00 00 | sprite14wh      long 0
36604 963 00 00 00 00 | sprite15pointer long 0
36608 964 00 00 00 00 | sprite15xy      long 0
3660c 965 00 00 00 00 | sprite15wh      long 0
36610 966 00 00 00 00 | sprite16pointer long 0
36614 967 00 00 00 00 | sprite16xy      long 0
36618 968 00 00 00 00 | sprite16wh      long 0
3661c 969 00 00 00 00 | sprite17pointer long 0
36620 96a 00 00 00 00 | sprite17xy      long 0
36624 96b 00 00 00 00 | sprite17wh      long 0
36628 96c 00 00 00 00 | sprite18pointer long 0
3662c 96d 00 00 00 00 | sprite18xy      long 0
36630 96e 00 00 00 00 | sprite18wh      long 0
36634 96f 00 00 00 00 | spritenum long 0
36638 970             | 
36638 970 00 00 00 00 | spriteline long 0
3663c 971 84 03 00 00 | sprite_x long 900
36640 972 00 00 00 00 | sprite_y long 0
36644 973 10 00 00 00 | sprite_w long 16
36648 974 40 00 00 00 | sprite_h long 64
3664c 975 00 00 00 00 | l2 long 0
36650 976 00 00 00 00 | t5 long 0
36654 977 00 00 00 00 | t6 long 0
36658 978 00 00 00 00 | t7 long 0
3665c 979 00 00 00 00 | t8 long 0
36660 97a 00 00 00 00 | t9 long 0
36664 97b 00 00 00 00 | preloadaddr long 0
36668 97c 00 00 00 00 | preloadlineaddr long 0
3666c 97d 00 04 00 00 | a1024 long 1024
36670 97e             | 
36670 97e E0 03 00 00 | aa long 992
36674 97f FF 03 00 00 | a1023 long 1023
36678 980 00 10 00 00 | a4096 long 4096
3667c 981             |  fit 368
3667c 981             | _psram_spin2_dat_
3667c 981 00 00 00 00 
      ...             
36774 9bf 00 00 00 00 
36778 9c0 00 00 00 00 |     listdata long 0[8*8]
3677c 9c1             |             orgh
3677c                 | 
3677c                 | ' driver state
3677c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
36780     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36784                 | 
36784                 | ' delay profile
36784     07 00 00 00 
36788     00 CF 7B 05 
3678c     80 D1 F0 08 
36790     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36794     80 C4 60 0F 
36798     80 39 7A 12 
3679c     40 2D D9 13 
367a0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
367a4                 | 
367a4                 | ' data to be passed to driver when starting it
367a4                 | startupData
367a4     00 00 00 00 |     long    0           ' current frequency
367a8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
367ac     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
367b0     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
367b4     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
367b8     C4 67 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
367bc     44 68 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
367c0     64 68 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
367c4                 | 
367c4                 | ' data for memory
367c4                 | deviceData
367c4                 |     ' 16 bank parameters follow (16MB per bank)
367c4     00 00 00 00 
      ...             
367fc     00 00 00 00 
36800     00 00 00 00 |     long    0[16]                               ' banks 0-15
36804                 |     ' 16 banks of pin parameters follow
36804     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36808     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3680c     FF FF FF FF 
      ...             
3683c     FF FF FF FF 
36840     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36844                 | 
36844                 | ' data for COG polling
36844                 | qosData 
36844     00 00 FF FF 
36848     00 00 FF FF 
3684c     00 00 FF FF 
36850     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36854     00 00 FF FF 
36858     00 00 FF FF 
3685c     00 00 FF FF 
36860     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36864                 |     
36864                 | ' mailbox storage
36864                 | 
36864                 | mailboxes
36864     00 00 00 00 
      ...             
368bc     00 00 00 00 
368c0     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
368c4                 | 	alignl
368c4                 | _psram16drv_spin2_dat_
368c4                 |                             orgh
368c4     00 00 00 00 
      ...             
368dc     00 00 00 00 
368e0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
368e4                 | 
368e4                 | driver_start
368e4                 |                             org
368e4 000             | '..................................................................................................
368e4 000             | ' Memory layout for COG RAM once operational:
368e4 000             | '
368e4 000             | '  COG RAM address      Usage
368e4 000             | '  ---------------      ----
368e4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
368e4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
368e4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
368e4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
368e4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
368e4 000             | '  ~$198-$1F3           State and register variables
368e4 000             | '
368e4 000             | ' Also during driver COG startup:
368e4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
368e4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
368e4 000             | '..................................................................................................
368e4 000             |                             
368e4 000             | ' Mailbox storage after vector initialization
368e4 000             | 
368e4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
368e8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
368ec 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
368f0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
368f4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
368f8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
368fc 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
36900 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36904 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36908 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3690c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36910 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36914 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36918 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3691c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36920 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36924 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36928 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3692c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36930 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36934 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36938 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3693c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36940 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36944 018             | 
36944 018             | ' Mailbox parameter addresses per COG once patched
36944 018             |                             
36944 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36948 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3694c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36950 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36954 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36958 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3695c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36960 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36964 020             | 
36964 020             | '..................................................................................................
36964 020             | ' Per COG request and state setup and service branching
36964 020             |         
36964 020             | cog0                 
36964 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36968 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3696c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36970 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36974 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36978 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3697c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36980 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36984 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36988 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3698c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36990 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36994 02c             | cog1                        
36994 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36998 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3699c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
369a0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
369a4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369a8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369ac 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
369b0 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
369b4 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
369b8 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
369bc 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
369c0 037 33 CA 63 FD |                             execf   request-0               'jump to service
369c4 038             | cog2                         
369c4 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
369c8 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
369cc 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
369d0 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
369d4 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369d8 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369dc 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
369e0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
369e4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
369e8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
369ec 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
369f0 043 33 CA 63 FD |                             execf   request-0               'jump to service
369f4 044             | cog3                        
369f4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
369f8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
369fc 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36a00 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36a04 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a08 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a0c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36a10 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36a14 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36a18 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a1c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a20 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36a24 050             | cog4                        
36a24 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36a28 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36a2c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36a30 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36a34 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a38 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a3c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36a40 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36a44 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36a48 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a4c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a50 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36a54 05c             | cog5                        
36a54 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36a58 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36a5c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36a60 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36a64 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a68 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a6c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36a70 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36a74 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36a78 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a7c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a80 067 33 CA 63 FD |                             execf   request-0               'jump to service
36a84 068             | cog6                        
36a84 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36a88 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36a8c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36a90 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36a94 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a98 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a9c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36aa0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36aa4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36aa8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36aac 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ab0 073 33 CA 63 FD |                             execf   request-0               'jump to service
36ab4 074             | cog7                        
36ab4 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36ab8 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36abc 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36ac0 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36ac4 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ac8 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36acc 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36ad0 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36ad4 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36ad8 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36adc 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ae0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36ae4 080             |                             fit     128
36ae4 080             | 
36ae4 080             |                             fit     128
36ae4 080             | pad                         long    0[128-$]                'align init code to $80
36ae4 080             | 
36ae4 080             | '..................................................................................................
36ae4 080             | 
36ae4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36ae4 080             | 
36ae4 080             | init                        
36ae4 080             |                             ' get driver scratch long address in hub
36ae4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36ae8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36aec 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36af0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36af4 084             |                     
36af4 084             |                             ' read in the additional LUT RAM code
36af4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36af8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36afc 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36b00 087             | 
36b00 087             |                             ' read the startup parameters
36b00 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36b04 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36b08 089             | 
36b08 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36b08 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36b0c 08a             | 
36b0c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36b10 08b 01 00 00 5F 
36b14 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36b18 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36b1c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36b20 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36b24 090             | 
36b24 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36b24 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36b28 091 01 00 00 FF 
36b2c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36b30 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36b34 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36b38 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36b3c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36b40 097 08 DE 47 F5 |                             or      a, #8
36b44 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36b48 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36b4c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36b50 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36b54 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36b58 09d 01 DE 07 F1 |                             add     a, #1
36b5c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36b60 09f             |  
36b60 09f             |                             ' setup device control pin states
36b60 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36b64 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36b68 0a1 01 00 00 FF 
36b6c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36b70 0a3             | 
36b70 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36b74 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36b78 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36b7c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36b80 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36b84 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36b88 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36b8c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36b90 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36b94 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36b98 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36b9c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36ba0 0af             | pinloop
36ba0 0af             |                             ' generate minimum CE high time before access
36ba0 0af A1 07 00 FF 
36ba4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36ba8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36bac 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36bb0 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36bb4 0b4 1F DE 63 FD |                             waitx   a                       'delay
36bb8 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36bbc 0b6             | 
36bbc 0b6             |                             ' setup the COG mailboxes and addresses 
36bbc 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36bc0 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36bc4 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36bc8 0b9             | 
36bc8 0b9 28 2E 64 FD |                             setq    #24-1
36bcc 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36bd0 0bb             | 
36bd0 0bb             |                             ' setup the polling loop for active COGs 
36bd0 0bb 01 C2 63 FD |                             cogid   id
36bd4 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36bd8 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36bdc 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36be0 0bf 0A F0 07 F6 |                             mov     ptra, #10
36be4 0c0 E1 F1 03 FA |                             mul     ptra, id
36be8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36bec 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36bf0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36bf4 0c4 03 C2 07 FA |                             mul     id, #3
36bf8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36bfc 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36c00 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36c04 0c8 D8 01 B0 FD |                             call    #reloadcogs
36c08 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36c0c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36c10 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36c10 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36c14 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36c18 0cd 08 04 DC FC |                             rep     #2, #8
36c1c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36c20 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36c24 0d0             | 
36c24 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36c24 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36c24 0d0 01 C2 63 FD |                             cogid   id
36c28 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36c2c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36c30 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36c34 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36c38 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36c3c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36c40 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36c44 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36c48 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36c4c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36c50 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36c54 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36c58 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36c5c 0de A5 E5 03 F1 |                             add     d, const512
36c60 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36c64 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36c68 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36c6c 0e2             |                             
36c6c 0e2             |                             ' setup register values for control vector loop setup after we return
36c6c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36c70 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36c74 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36c78 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36c7c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36c80 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36c84 0e8 D0 C3 8F F9 |                             altd    id, #id0
36c88 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36c8c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36c90 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36c94 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36c98 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36c9c 0ee             |  
36c9c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36ca0 0ef 07 CA 07 F5 |                             and     request, #7
36ca4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36ca8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36cac 0f2             |                             fit     $100                    'ensure all init code fits this space
36cac 0f2             | 
36cac 0f2             |                             fit     $100                    'ensure all init code fits this space
36cac 0f2             | 
36cac 0f2 00 00 00 00 
      ...             
36cdc 0fe 00 00 00 00 
36ce0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36ce4 100             | 
36ce4 100             | '..................................................................................................
36ce4 100             | ' Error result handling and COG notification of request completion
36ce4 100             | 
36ce4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36ce8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36cec 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36cf0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36cf4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36cf8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36cfc 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36d00 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36d04 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36d08 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36d0c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36d10 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36d14 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36d18 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36d1c 10e             | ' Poller re-starts here after a COG is serviced
36d1c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36d20 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36d24 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36d28 111             | ' Main dynamic polling loop repeats until a request arrives
36d28 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36d2c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36d30 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36d34 114             | 
36d34 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36d38 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36d3c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36d40 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36d44 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36d48 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36d4c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36d50 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36d54 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36d58 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36d5c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36d60 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36d64 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36d68 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36d6c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36d70 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36d74 124             | 
36d74 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36d78 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36d7c 126             |  
36d7c 126             | '..................................................................................................
36d7c 126             | ' List handler                               
36d7c 126             | 
36d7c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36d80 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36d84 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36d88 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36d8c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36d90 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36d94 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36d98 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36d9c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36da0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36da4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36da8 131 33 00 60 FD |                             execf   0-0                     'process the request 
36dac 132             | 
36dac 132             | '..................................................................................................
36dac 132             | ' Restoring per COG state and resuming where we left off
36dac 132             | 
36dac 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36db0 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36db4 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36db8 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36dbc 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36dc0 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36dc4 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36dc8 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36dcc 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36dd0 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36dd4 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36dd8 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36ddc 13e             |                    
36ddc 13e             | '..................................................................................................
36ddc 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36ddc 13e             | 
36ddc 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36de0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36de4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36de8 141 D0 DF B7 F9 |                             setd    a, #id0
36dec 142 D8 DF BF F9 |                             sets    a, #addr1
36df0 143 FE FF FF FF 
36df4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36df8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36dfc 146 3F DE A7 F9 |                             alti    a, #%111_111 
36e00 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36e04 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36e08 149 01 E2 63 FD |                             cogid   c
36e0c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36e10 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36e14 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36e18 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36e1c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36e20 14f 00 E0 03 F6 |                             mov     b, 0-0
36e24 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36e28 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36e2c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36e30 153 0C 00 90 AD |             if_z            jmp     #excluded               
36e34 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36e38 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36e3c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36e40 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36e44 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36e48 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36e4c 15a             | 
36e4c 15a             | 'determine priority cogs and build instructions for the polling sequence
36e4c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36e50 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36e54 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36e58 15d             | 
36e58 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36e5c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36e60 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36e64 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36e68 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36e6c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36e70 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36e74 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36e78 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36e7c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
36e80 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
36e84 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
36e88 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
36e8c 16a             | endprioloop
36e8c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
36e90 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
36e94 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
36e98 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
36e9c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
36ea0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
36ea4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
36ea8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
36eac 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
36eb0 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
36eb4 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
36eb8 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
36ebc 176             | 
36ebc 176             | ' populate the round robin COG polling instructions
36ebc 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
36ec0 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
36ec4 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
36ec8 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
36ecc 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
36ed0 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
36ed4 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
36ed8 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
36edc 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
36ee0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
36ee4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
36ee8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
36eec 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
36ef0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
36ef4 184             | '..................................................................................................
36ef4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
36ef4 184             | 
36ef4 184             | set_latency                                                 '            (a) set latency
36ef4 184             | get_latency                                                 '            (b) get latency
36ef4 184             | set_burst                                                   '            (c) set burst size of bank
36ef4 184             | get_burst                                                   '            (d) get burst size of bank
36ef4 184             |                                                             '            (e) dump state
36ef4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
36ef8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
36efc 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
36f00 187             |                                                             ' | | | | e  account for following AUGS
36f00 187 04 00 00 FF 
36f04 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
36f08 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
36f0c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
36f10 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
36f14 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
36f18 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
36f1c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
36f20 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
36f24 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
36f28 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
36f2c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
36f30 193             | 
36f30 193             | '..................................................................................................
36f30 193             | ' Misc EXECF code
36f30 193             | 
36f30 193 33 72 63 FD | start_read_exec             execf   newburstr
36f34 194 33 7C 63 FD | start_write_exec            execf   resumewrites
36f38 195 33 78 63 FD | continue_read_exec          execf   lockedreads
36f3c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
36f40 197             | 
36f40 197             | '..................................................................................................
36f40 197             | ' Variables
36f40 197             | 
36f40 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
36f44 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
36f48 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
36f4c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
36f50 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
36f54 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
36f58 19d             | 
36f58 19d 00 00 00 80 | xfreq1          long    $80000000
36f5c 19e 00 00 00 40 | xfreq2          long    $40000000
36f60 19f 03 00 00 00 | delay           long    3
36f64 1a0             | 
36f64 1a0             | lutcodeaddr                 
36f64 1a0             | startupparams
36f64 1a0             | excludedcogs                                    'careful: shared register use!
36f64 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
36f68 1a1 00 00 00 00 | flags           long    0
36f6c 1a2             | mask                                            'careful: shared register use!
36f6c 1a2 00 00 00 00 | resetmaskA      long    0
36f70 1a3             | limit                                           'careful: shared register use!
36f70 1a3 00 00 00 00 | resetmaskB      long    0
36f74 1a4 00 00 00 00 | datapins        long    0
36f78 1a5             | const512                                        'careful: shared register use!
36f78 1a5 00 00 00 00 | devicelist      long    0
36f7c 1a6 00 00 00 00 | coglist         long    0
36f80 1a7 00 00 00 00 | mbox            long    0 
36f84 1a8             | 
36f84 1a8             | clkpin                                          'shared with code patched during init
36f84 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
36f88 1a9             | cspin                                           'shared with code patched during init
36f88 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
36f8c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
36f90 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
36f94 1ac 01 00 00 00 | clkdelay        long    1
36f98 1ad 00 00 00 00 | regdatabus      long    0
36f9c 1ae             | 
36f9c 1ae 10 00 00 00 | deviceaddr      long    $10
36fa0 1af             | rrcounter
36fa0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
36fa4 1b0             | 
36fa4 1b0             | ' jump addresses for the per COG handlers
36fa4 1b0 20 00 00 00 | cog0_handler    long    cog0
36fa8 1b1 2C 00 00 00 | cog1_handler    long    cog1
36fac 1b2 38 00 00 00 | cog2_handler    long    cog2
36fb0 1b3 44 00 00 00 | cog3_handler    long    cog3
36fb4 1b4 50 00 00 00 | cog4_handler    long    cog4
36fb8 1b5 5C 00 00 00 | cog5_handler    long    cog5
36fbc 1b6 68 00 00 00 | cog6_handler    long    cog6
36fc0 1b7 74 00 00 00 | cog7_handler    long    cog7
36fc4 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
36fc8 1b9             | 
36fc8 1b9             | ' EXECF sequences
36fc8 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
36fcc 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
36fd0 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
36fd4 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
36fd8 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
36fdc 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
36fe0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
36fe4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
36fe4 1c0             | 
36fe4 1c0             | 
36fe4 1c0             | ' SKIPF sequences
36fe4 1c0             | skiptable
36fe4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
36fe8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
36fec 1c2 00 00 00 00 |                 long    0                      ' read modify write long
36ff0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
36ff4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
36ff8 1c5 00 00 00 00 | pattern2        long    0
36ffc 1c6 00 00 00 00 | pattern3        long    0
37000 1c7 77 02 00 00 | singlelong      long    %1001110111  
37004 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37008 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3700c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
37010 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37014 1cc             | 
37014 1cc             | ' LUT RAM address values
37014 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37018 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3701c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
37020 1cf F6 02 00 00 | noread          long    noread_lut
37024 1d0             | 
37024 1d0 00 00 00 00 | id0             long    0
37028 1d1 01 00 00 00 | id1             long    1
3702c 1d2 02 00 00 00 | id2             long    2
37030 1d3 03 00 00 00 | id3             long    3
37034 1d4 04 00 00 00 | id4             long    4
37038 1d5 05 00 00 00 | id5             long    5
3703c 1d6 06 00 00 00 | id6             long    6
37040 1d7 07 00 00 00 | id7             long    7
37044 1d8             | 
37044 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37044 1d8             | 'and COG updates and need to follow immediately after id0-id7
37044 1d8 00 00 00 00 | addr1           long    0
37048 1d9 00 00 00 00 | hubdata         long    0
3704c 1da 00 00 00 00 | count           long    0
37050 1db 00 00 00 00 | addr2           long    0
37054 1dc 00 00 00 00 | total           long    0
37058 1dd 00 00 00 00 | offset1         long    0
3705c 1de 00 00 00 00 | offset2         long    0
37060 1df 00 00 00 00 | link            long    0
37064 1e0             | 
37064 1e0             | burstwrite                                      'note shared register use during init
37064 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37068 1e1 00 00 00 00 | id              long    0
3706c 1e2             | 
3706c 1e2 00 00 00 00 | header          long    0
37070 1e3 00 00 00 00 | trailer         long    0
37074 1e4 00 00 00 00 | cmdaddr         long    0
37078 1e5 00 00 00 00 | request         long    0
3707c 1e6 00 00 00 00 | rrlimit         long    0
37080 1e7 00 00 00 00 | pinconfig       long    0
37084 1e8 00 00 00 00 | clks            long    0
37088 1e9 00 00 00 00 | resume          long    0
3708c 1ea 00 00 00 00 | orighubsize     long    0
37090 1eb 00 00 00 00 | wrclks          long    0
37094 1ec             | 
37094 1ec 00 00 00 00 | pattern         long    0
37098 1ed 00 00 00 00 | hubscratch      long    0
3709c 1ee 00 10 00 00 | val4k           long    4096
370a0 1ef             | 
370a0 1ef             | ' temporary general purpose regs
370a0 1ef 00 00 00 00 | a               long    0
370a4 1f0 00 00 00 00 | b               long    0
370a8 1f1 00 00 00 00 | c               long    0
370ac 1f2 00 00 00 00 | d               long    0
370b0 1f3             |                 fit     502
370b0 1f3             | 
370b0 1f3             |                 fit     502
370b0 1f3             | 
370b0 1f3             | '..................................................................................................
370b0 1f3             | 
370b0 1f3             |             orgh
370b0                 | 
370b0                 | lut_code
370b0                 | 'HW init code up to 80 longs
370b0                 | 
370b0                 | '..................................................................................................
370b0                 | ' Memory layout for LUT RAM once operational:
370b0                 | '
370b0                 | '  LUT RAM address      Usage
370b0                 | '  ---------------      ----
370b0                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
370b0                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
370b0                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
370b0                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
370b0                 | '
370b0                 | ' Also during driver COG startup:
370b0                 | ' $230-$24F is used for HW init setup
370b0                 | ' $250-$26F is used as temporary vector storage 
370b0                 | '..................................................................................................
370b0                 | 
370b0                 |                 org $230    
370b0 230             | 
370b0 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
370b0 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
370b4 231 24 16 60 FD |                             pollxfi
370b8 232 FF AA 2A FF 
370bc 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
370c0 234 28 00 B0 FD |                             call    #sendqspi
370c4 235 07 F8 07 FF 
370c8 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
370cc 237 28 00 B0 FD |                             call    #sendspi
370d0 238 F8 07 78 FF 
370d4 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
370d8 23a 1C 00 B0 FD |                             call    #sendspi
370dc 23b 7F 78 78 FF 
370e0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
370e4 23d 10 00 B0 FD |                             call    #sendspi 
370e8 23e 2D 00 64 FD |                             ret
370ec 23f             | 
370ec 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
370f0 240 32 0C 64 FD |                             skipf   #%110
370f4 241 9C EF 03 F6 |                             mov     pb, xsendimm
370f8 242             | 
370f8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
370fc 243 97 EF 03 F6 |                             mov     pb, ximm8lut
37100 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37104 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37108 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3710c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
37110 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37114 249 50 48 63 FD |                             fltl    datapins                'float data bus
37118 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3711c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
37120 24c             | 
37120 24c 00 00 00 00 
37124 24d 00 00 00 00 
37128 24e 00 00 00 00 
3712c 24f 00 00 00 00 |                 long    0[$270-32-$]
37130 250             |                 fit     $270-32  ' keep room for 32 vector longs
37130 250             |     
37130 250             |                 fit     $270-32  ' keep room for 32 vector longs
37130 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
37130 250             | rw_vect ' PSRAM jump vectors
37130 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37134 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37138 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3713c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37140 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37144 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37148 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3714c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
37150 258             | ro_vect ' R/O PSRAM jump vectors
37150 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37154 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37158 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3715c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37160 25c 00 01 00 00 |                 long    unsupported
37164 25d 00 01 00 00 |                 long    unsupported
37168 25e 00 01 00 00 |                 long    unsupported
3716c 25f 00 01 00 00 |                 long    unsupported
37170 260             | ctrl_vect ' Control jump vectors
37170 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
37174 261 00 01 00 00 |                 long    unsupported
37178 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3717c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
37180 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37184 265 00 01 00 00 |                 long    unsupported
37188 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3718c 267 3E 01 00 00 |                 long    reconfig 
37190 268             | no_vect ' Invalid bank jump vectors
37190 268 01 01 00 00 |                 long    invalidbank
37194 269 01 01 00 00 |                 long    invalidbank
37198 26a 01 01 00 00 |                 long    invalidbank
3719c 26b 01 01 00 00 |                 long    invalidbank
371a0 26c 01 01 00 00 |                 long    invalidbank
371a4 26d 01 01 00 00 |                 long    invalidbank
371a8 26e 01 01 00 00 |                 long    invalidbank
371ac 26f 01 01 00 00 |                 long    invalidbank
371b0 270             |                 fit     $270
371b0 270             | 
371b0 270             |                 fit     $270
371b0 270             | '..................................................................................................
371b0 270             | ' PSRAM READS
371b0 270             |                                                             ' a b c d e f
371b0 270             |                                                             ' B W L B R L  (a) byte read
371b0 270             |                                                             ' Y O O U E O  (b) word read
371b0 270             |                                                             ' T R N R S C  (c) long read
371b0 270             |                                                             ' E D G S U K  (d) new burst read
371b0 270             |                                                             '       T M E  (e) resumed sub-burst
371b0 270             |                                                             '         E D  (f) locked sub-burst
371b0 270             | 
371b0 270             | 
371b0 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
371b4 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
371b8 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
371bc 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
371c0 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
371c4 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
371c8 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
371cc 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
371d0 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
371d4 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
371d8 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
371dc 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
371e0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
371e4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
371e8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
371ec 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
371f0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
371f4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
371f8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
371fc 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
37200 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37204 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37208 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3720c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
37210 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37214 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37218 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3721c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
37220 28c             | 
37220 28c             |                             ' fall through to read bursts
37220 28c             |                         
37220 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
37220 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37224 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37228 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3722c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37230 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37234 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37238 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3723c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
37240 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37244 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37248 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3724c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
37250 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
37254 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
37258 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3725c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
37260 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
37264 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
37268 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3726c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
37270 2a0 E8 D1 03 F1 |                             add     clks, clks
37274 2a1             | readcommon
37274 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
37278 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3727c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
37280 2a4             | 
37280 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37284 2a5 69 C8 63 FD |                             rev     cmdaddr
37288 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3728c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
37290 2a8             | 
37290 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
37294 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
37298 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
37298 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3729c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
372a0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
372a4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
372a8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
372a8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
372ac 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
372b0 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
372b4 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
372b8 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
372bc 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
372c0 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
372c0 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
372c4 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
372c8 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
372cc 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
372d0 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
372d4 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
372d8 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
372dc 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
372e0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
372e4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
372e8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
372ec 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
372f0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
372f4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
372f8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
372f8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
372fc 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
37300 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37304 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37308 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3730c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
37310 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37314 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37318 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3731c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
37320 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37324 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37328 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3732c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
37330 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37334 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37338 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3733c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
37340 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37344 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37348 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3734c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
37350 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
37354 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
37358 2da 10 03 90 FD |                             jmp     #writecommon
3735c 2db             | 
3735c 2db             | '..................................................................................................
3735c 2db             | ' Burst continuation testing
3735c 2db             | 
3735c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
37360 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
37364 2dd             | continue_read_lut          
37364 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
37368 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3736c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
37370 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
37374 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
37378 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3737c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
37380 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
37384 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37388 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3738c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
37390 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
37394 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
37398 2ea             | 
37398 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3739c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
373a0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
373a4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
373a8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
373ac 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
373b0 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
373b4 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
373b8 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
373bc 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
373c0 2f4 2A 1C 66 0D |             _ret_           push    #poller
373c4 2f5             | 
373c4 2f5             | 
373c4 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
373c8 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
373c8 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
373cc 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
373d0 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
373d4 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
373d8 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
373dc 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
373e0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
373e4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
373e8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
373ec 2ff             | '..................................................................................................
373ec 2ff             | ' Completion of requests
373ec 2ff             | 
373ec 2ff             | complete_rw_lut             
373ec 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
373f0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
373f4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
373f8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
373fc 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
37400 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37404 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37408 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3740c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
37410 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37414 309 32 62 64 AD |             if_z            skipf   #%110001
37418 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3741c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
37420 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37424 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37428 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3742c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
37430 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37434 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37438 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3743c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
37440 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37444 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37448 316             |                                                             ' skipcase (a) gfx copy to/from hub
37448 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37448 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37448 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3744c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
37450 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
37454 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
37458 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3745c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
37460 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
37464 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
37468 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3746c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
37470 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
37474 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
37478 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3747c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
37480 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
37484 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37488 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3748c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
37490 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
37494 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
37498 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3749c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
374a0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
374a4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
374a8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
374ac 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
374b0 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
374b4 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
374b8 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
374bc 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
374c0 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
374c4 335 DF B7 03 A6 |             if_z            mov     addr2, link
374c8 336 34 FF 9F AD |             if_z            jmp     #checknext
374cc 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
374d0 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
374d4 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
374d8 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
374dc 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
374e0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
374e4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
374e8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
374ec 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
374f0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
374f4 341             | 
374f4 341             | '..................................................................................................
374f4 341             | ' PSRAM WRITES
374f4 341             |                                                             '  a b c d e f g h
374f4 341             | 
374f4 341             |                                                             '  B W L F B R L L (a) byte write(s)
374f4 341             |                                                             '  Y O O I U E O O (b) word write(s)
374f4 341             |                                                             '  T R N L R S C C (c) long write(s)
374f4 341             |                                                             '  E D G L S U K K (d) resumed fill
374f4 341             |                                                             '          T M E E (e) new burst write
374f4 341             |                                                             '            E D D (f) resumed burst
374f4 341             |                                                             '              F B (g) locked fill
374f4 341             |                                                             '              I U (h) locked burst write
374f4 341             |                                                             '              L R 
374f4 341             |                                                             '              L S 
374f4 341             |                                                             '                T 
374f4 341             | 
374f4 341             | w_single                   
374f4 341             | w_fill_cont           
374f4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
374f8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
374fc 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
37500 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37504 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37508 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3750c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
37510 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37514 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37518 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3751c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
37520 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37524 34d             |                ' disable call to r_resume_burst for single longs when z=0
37524 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37528 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3752c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
37530 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37534 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37538 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3753c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
37540 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37544 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37548 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3754c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
37550 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
37554 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
37558 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3755c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
37560 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
37564 35d             |         
37564 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
37564 35d             |             '
37564 35d             |             '  At least one of these 3 optional components will be sent
37564 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
37564 35d             |             '     body - N x full longs of data
37564 35d             |             '     trailer - last partial long of data
37564 35d             |             '
37564 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
37564 35d             |             '
37564 35d             |             'Case    Type                           Sends
37564 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
37564 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
37564 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
37564 35d             |             ' 4)     Multiple long fill             body only
37564 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
37564 35d             | 
37564 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
37564 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
37568 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3756c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37570 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37574 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
37578 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3757c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
37580 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
37584 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37588 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3758c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
37590 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
37594 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
37598 36a             |                             
37598 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3759c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
375a0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
375a4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
375a8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
375ac 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
375b0 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
375b4 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
375b8 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
375bc 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
375c0 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
375c4 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
375c8 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
375cc 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
375d0 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
375d4 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
375d8 37a             | 
375d8 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
375dc 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
375e0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
375e4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
375e8 37e             |                  
375e8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
375ec 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
375f0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
375f4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
375f8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
375fc 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
37600 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37604 385             | 
37604 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37608 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3760c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
37610 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37614 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37618 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3761c 38b             | 
3761c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3761c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
37620 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37624 38d 2A B0 63 FD |                             push    addr1                   'save address
37628 38e             | 
37628 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37628 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3762c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
37630 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37634 391             |             
37634 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37638 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3763c 393 2B B0 63 FD |                             pop     addr1                   'restore address
37640 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37644 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37648 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3764c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
37650 398             | 
37650 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
37654 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37658 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3765c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
37660 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
37664 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37668 39e             | 
37668 39e             |                             'trailer is done
37668 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3766c 39f             | 
3766c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
37670 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37674 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
37678 3a2             | 
37678 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3767c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
37680 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37684 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37688 3a6             |                             
37688 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3768c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37690 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
37694 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37698 3aa             |                                                          
37698 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3769c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
376a0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
376a4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
376a8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
376ac 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
376b0 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
376b4 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
376b8 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
376bc 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
376c0 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
376c4 3b5             |  
376c4 3b5 59 52 63 FD |                             drvh    cspin
376c8 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
376cc 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
376d0 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
376d4 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
376d8 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
376dc 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
376e0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
376e4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
376e8 3be EA E5 03 F6 |                             mov     d, orighubsize
376ec 3bf EF E5 63 F0 |                             shl     d, a
376f0 3c0 F2 E3 83 F1 |                             sub     c, d
376f4 3c1 DD E3 03 F1 |                             add     c, offset1
376f8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
376fc 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
37700 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37704 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37708 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3770c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
37710 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37714 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37718 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3771c 3cb BB D3 03 F6 |                             mov     resume, restorefill
37720 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37724 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37728 3ce 6C FC BF CD |             if_c            call    #yield
3772c 3cf 2D 00 64 FD |                             ret
37730 3d0             |                            
37730 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
37730 3d0             |                       '     rczl    pa                      'rotate left into address offset
37730 3d0             |                       '     rczl    c wcz                   'restore count and flags
37730 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37734 3d1 02 EC 67 F0 |                             shl     pa, #2
37738 3d2 28 06 64 AD |             if_z            setq    #3
3773c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
37740 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37744 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37748 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3774c 3d7             | 
3774c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
37750 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37754 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37758 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3775c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
37760 3dc             |                 fit 1024-32
37760 3dc             |         
37760 3dc             | 
37760 3dc             | '..................................................................................................
37760 3dc             | 
37760 3dc             |                 fit 1024-32
37760 3dc 00 00 00 00 
37764 3dd 00 00 00 00 
37768 3de 00 00 00 00 
3776c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
37770 3e0             |                 org 1024-32
37770 000             | 
37770 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
37770 000 00 00 00 00 |                 long $0000
37774 001 11 11 00 00 |                 long $1111
37778 002 22 22 00 00 |                 long $2222
3777c 003 33 33 00 00 |                 long $3333
37780 004 44 44 00 00 |                 long $4444
37784 005 55 55 00 00 |                 long $5555
37788 006 66 66 00 00 |                 long $6666
3778c 007 77 77 00 00 |                 long $7777
37790 008 88 88 00 00 |                 long $8888
37794 009 99 99 00 00 |                 long $9999
37798 00a AA AA 00 00 |                 long $aaaa
3779c 00b BB BB 00 00 |                 long $bbbb
377a0 00c CC CC 00 00 |                 long $cccc
377a4 00d DD DD 00 00 |                 long $dddd
377a8 00e EE EE 00 00 |                 long $eeee
377ac 00f FF FF 00 00 |                 long $ffff
377b0 010             | 
377b0 010             | 'masks
377b0 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
377b4 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
377b8 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
377bc 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
377c0 014             | 
377c0 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
377c4 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
377c8 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
377cc 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
377d0 018             | 
377d0 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
377d4 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
377d8 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
377dc 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
377e0 01c             | 
377e0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
377e4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
377e8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
377ec 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
377f0 020             |         fit 1024
377f0 020             | 
377f0 020             |         fit 1024
377f0 020             | 
377f0 020             | '--------------------------------------------------------------------------------------------------
377f0 020             |         orgh
377f0                 | 
377f0                 | gfxexpansion
377f0                 |                             'simple line drawing graphics expansion of memory driver
377f0                 |                             'jmp     #donerepeats                'just return for now
377f0                 | 
377f0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
377f4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
377f8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
377fc     DD E1 03 F6 |                             mov     b, offset1              'get error term
37800     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37804     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37808     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3780c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37810     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37814     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37818     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3781c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
37820     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37824     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37828     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3782c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
37830     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37834     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37838     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3783c     DC E5 33 F9 |                             getword d, total, #0            'get line width
37840     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37844     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37848     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3784c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
37850     C3 03 80 FD |                             jmp     #readmask               'continue filling
37854                 | 	alignl
37854                 | _usbnew_spin2_dat_
37854                 |                 org     $000
37854 000             | 
37854 000             | usb_host_start
37854 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37858 001             | 
37858 001 03 00 00 FF 
3785c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
37860 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37864 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37868 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3786c 006 29 70 63 FD |                 setq2   htmp
37870 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37874 008             | 
37874 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37878 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3787c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37880 00b             | 
37880 00b             | '------------------------------------------------------------------------------
37880 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37880 00b             | ' special because the receiving function must not respond with either STALL or
37880 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37880 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37880 00b             | ' corrupt packet, it must ignore the transaction
37880 00b             | '------------------------------------------------------------------------------
37880 00b             | ' On entry:
37880 00b             | '   PTRA - start address of the SETUP data struct.
37880 00b             | ' On exit:
37880 00b             | '   retval - PID_ACK on success, otherwise error code.
37880 00b             | '------------------------------------------------------------------------------
37880 00b             | txn_setup
37880 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37884 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37888 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3788c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37890 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37894 010             | .setup
37894 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37898 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3789c 012 2D 00 64 AD |         if_z    ret
378a0 013 7C 0B B0 FD |                 call    #retry_wait
378a4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
378a8 015 2D 00 64 AD |         if_z    ret
378ac 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
378b0 017 E0 FF 9F FD |                 jmp     #.setup
378b4 018             | 
378b4 018             | '------------------------------------------------------------------------------
378b4 018             | ' IN/INTERRUPT transaction.
378b4 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
378b4 018             | '------------------------------------------------------------------------------
378b4 018             | ' On entry:
378b4 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
378b4 018             | '     CRC(b19..23).
378b4 018             | ' On exit:
378b4 018             | '------------------------------------------------------------------------------
378b4 018             | txn_in
378b4 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
378b8 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
378bc 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
378c0 01b             | 
378c0 01b             |                 ' Fall through to urx_packet
378c0 01b             | 
378c0 01b             | '------------------------------------------------------------------------------
378c0 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
378c0 01b             | ' received are handshakes and IN DATAx.
378c0 01b             | '------------------------------------------------------------------------------
378c0 01b             | ' On entry:
378c0 01b             | ' On exit:
378c0 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
378c0 01b             | '     returned.
378c0 01b             | '------------------------------------------------------------------------------
378c0 01b             | urx_packet
378c0 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
378c4 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
378c8 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
378cc 01e 1A 92 63 FD |                 getct   hct2
378d0 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
378d4 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
378d8 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
378dc 022             | .wait_sop
378dc 022 22 A7 8A FA |                 rdpin   urx, dm
378e0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
378e4 024 08 00 90 CD |         if_c    jmp     #.get_pid
378e8 025 FC 25 CC FB |                 jnct2   #.wait_sop
378ec 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
378f0 027             | .get_pid
378f0 027 28 02 B0 FD |                 call    #urx_next
378f4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
378f8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
378fc 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
37900 02b             | .chk_pid
37900 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37904 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37908 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3790c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37910 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37914 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37918 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3791c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37920 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37924 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37928 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3792c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37930 037             | .ack_resend
37930 037 22 A7 82 FA |                 rqpin   urx, dm
37934 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37938 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3793c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37940 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37944 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37948 03d             | .chk_eop
37948 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3794c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37950 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37954 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37958 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3795c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37960 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37964 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37968 045 2D 00 64 FD |                 ret
3796c 046             | .idle
3796c 046 22 A7 82 FA |                 rqpin   urx, dm
37970 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37974 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37978 049 2D 00 64 FD |                 ret
3797c 04a             | 
3797c 04a             | '------------------------------------------------------------------------------
3797c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3797c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3797c 04a             | ' if one is required.
3797c 04a             | '------------------------------------------------------------------------------
3797c 04a             | ' On entry:
3797c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3797c 04a             | ' On exit:
3797c 04a             | '------------------------------------------------------------------------------
3797c 04a             | utx_token
3797c 04a 22 A7 82 FA |                 rqpin   urx, dm
37980 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37984 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37988 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3798c 04e 34 0D B0 CD |         if_c    call    #utx_pre
37990 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37994 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37998 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3799c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
379a0 053             | .next_byte
379a0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
379a4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
379a8 055             | .wait
379a8 055 40 46 72 FD |                 testp   dp                      wc
379ac 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
379b0 057 23 03 08 FC |                 akpin   dp
379b4 058 22 A5 22 FC |                 wypin   utx, dm
379b8 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
379bc 05a             | 
379bc 05a             | '------------------------------------------------------------------------------
379bc 05a             | ' SETUP/OUT/INTERRUPT transaction.
379bc 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
379bc 05a             | '------------------------------------------------------------------------------
379bc 05a             | ' On entry:
379bc 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
379bc 05a             | '     CRC(b19..23).
379bc 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
379bc 05a             | '   pkt_data - count of DATAx payload bytes to send.
379bc 05a             | ' On exit:
379bc 05a             | '------------------------------------------------------------------------------
379bc 05a             | txn_out
379bc 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
379c0 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
379c4 05c 00 00 C0 FF 
379c8 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
379cc 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
379d0 05f             | 
379d0 05f             |                 ' Fall through to utx_data
379d0 05f             | 
379d0 05f             | '------------------------------------------------------------------------------
379d0 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
379d0 05f             | ' calculated while the data byte is being shifted out. Since data stage
379d0 05f             | ' success/fail is not determined until the status stage of the transaction,
379d0 05f             | ' this routine is only concerned about the current DATAx packet.
379d0 05f             | '------------------------------------------------------------------------------
379d0 05f             | ' On entry:
379d0 05f             | '   PTRA - hub start address of the data to read.
379d0 05f             | '   pkt_cnt - data payload size.
379d0 05f             | ' On exit:
379d0 05f             | '------------------------------------------------------------------------------
379d0 05f             | utx_data
379d0 05f 22 A7 82 FA |                 rqpin   urx, dm
379d4 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
379d8 061 F4 FF 9F CD |         if_c    jmp     #utx_data
379dc 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
379e0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
379e4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
379e8 065 D8 0C B0 CD |         if_c    call    #utx_pre
379ec 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
379f0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
379f4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
379f8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
379fc 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37a00 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37a04 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37a08 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37a0c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37a10 06f             | .read_byte
37a10 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37a14 070 F0 00 B0 FD |                 call    #utx_byte
37a18 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37a1c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37a20 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37a24 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37a28 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37a2c 076             | .send_crc
37a2c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37a30 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37a34 078 D0 00 B0 FD |                 call    #utx_byte
37a38 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37a3c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37a40 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37a44 07c             | 
37a44 07c             | '------------------------------------------------------------------------------
37a44 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37a44 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37a44 07c             | ' expects that the packet includes at least the CRC word.
37a44 07c             | '
37a44 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37a44 07c             | ' was requested, which makes it difficult to determine where the data stops
37a44 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37a44 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37a44 07c             | ' USB-16 expected residual value of 0xB001.
37a44 07c             | '
37a44 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37a44 07c             | ' so the caller can verify IN success before writing the data to its final
37a44 07c             | ' destination.
37a44 07c             | '------------------------------------------------------------------------------
37a44 07c             | ' On entry:
37a44 07c             | '   pkt_data - max byte count expected to be in the packet.
37a44 07c             | '   newb_flg - signals new byte ready when toggled.
37a44 07c             | ' On exit:
37a44 07c             | '   pkt_cnt - actual number of bytes read.
37a44 07c             | '------------------------------------------------------------------------------
37a44 07c             | urx_data
37a44 07c F7 75 03 F6 |                 mov     htmp2, pb
37a48 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37a4c 07e 00 00 C0 FF 
37a50 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37a54 080 BA EF 03 F6 |                 mov     pb, htmp2
37a58 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37a5c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37a60 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37a64 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37a68 085             | .wait_byte
37a68 085             | ' In-line rx for max speed
37a68 085 22 A7 82 FA |                 rqpin   urx, dm
37a6c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37a70 087 53 A5 02 F5 |                 and     utx, urx
37a74 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37a78 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37a7c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37a80 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37a84 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37a88 08d DC FF 9F FD |                 jmp     #.wait_byte
37a8c 08e             | .get_byte
37a8c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37a90 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37a94 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37a98 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37a9c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37aa0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37aa4 094             | .end_crc
37aa4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37aa8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37aac 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37ab0 097 2D 00 64 1D |         if_a    ret
37ab4 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37ab4 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37ab4 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37ab4 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37ab4 098 22 A7 82 FA |                 rqpin   urx, dm
37ab8 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37abc 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37ac0 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37ac0 09b             | .chk_crc
37ac0 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37ac4 09c 58 00 00 FF 
37ac8 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37acc 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37ad0 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37ad4 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37ad8 0a1 34 09 B0 FD |                 call    #poll_waitx
37adc 0a2             | 
37adc 0a2             |                 ' Fall through to utx_handshake
37adc 0a2             | 
37adc 0a2             | '------------------------------------------------------------------------------
37adc 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37adc 0a2             | ' the appropriate IP delay has been inserted.
37adc 0a2             | '------------------------------------------------------------------------------
37adc 0a2             | ' On entry:
37adc 0a2             | '   retval - handshake PID to send.
37adc 0a2             | ' On exit:
37adc 0a2             | '   retval unchanged.
37adc 0a2             | '------------------------------------------------------------------------------
37adc 0a2             | utx_handshake
37adc 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37ae0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37ae4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37ae8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37aec 0a6 5F A5 02 F6 |                 mov     utx, retval
37af0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37af4 0a8             | .idle
37af4 0a8 22 A7 82 FA |                 rqpin   urx, dm
37af8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37afc 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37b00 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37b04 0ac 08 09 90 FD |                 jmp     #poll_waitx
37b08 0ad             | 
37b08 0ad             | '------------------------------------------------------------------------------
37b08 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37b08 0ad             | '------------------------------------------------------------------------------
37b08 0ad             | ' On entry:
37b08 0ad             | '   utx - byte to transmit.
37b08 0ad             | ' On exit:
37b08 0ad             | '------------------------------------------------------------------------------
37b08 0ad             | utx_byte
37b08 0ad 40 46 72 FD |                 testp   dp                      wc
37b0c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37b10 0af 23 03 08 FC |                 akpin   dp
37b14 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37b18 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37b1c 0b2             | 
37b1c 0b2             | '------------------------------------------------------------------------------
37b1c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37b1c 0b2             | '------------------------------------------------------------------------------
37b1c 0b2             | ' On entry:
37b1c 0b2             | ' On exit:
37b1c 0b2             | '   retval - the byte read.
37b1c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37b1c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37b1c 0b2             | '     received.
37b1c 0b2             | '------------------------------------------------------------------------------
37b1c 0b2             | urx_next
37b1c 0b2 22 A7 8A FA |                 rdpin   urx, dm
37b20 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37b24 0b4 53 A5 02 F5 |                 and     utx, urx
37b28 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37b2c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37b30 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37b34 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37b38 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b3c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37b40 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37b44 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37b48 0bd 2D 00 64 FD |                 ret
37b4c 0be             | 
37b4c 0be             | '------------------------------------------------------------------------------
37b4c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37b4c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37b4c 0be             | ' length, and the PID is not included in the CRC calculation:
37b4c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37b4c 0be             | '  CRC5  ENDP ADDRESS PID
37b4c 0be             | ' %00000_1111_1111111_xxxxxxxx
37b4c 0be             | '------------------------------------------------------------------------------
37b4c 0be             | ' On entry:
37b4c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37b4c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37b4c 0be             | ' On exit:
37b4c 0be             | '   ep_addr_pid - CRC value appended to the packet.
37b4c 0be             | '------------------------------------------------------------------------------
37b4c 0be             | calc_crc5
37b4c 0be FF 03 00 FF 
37b50 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37b54 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37b58 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37b5c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37b60 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37b64 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37b68 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37b6c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37b70 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37b74 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37b78 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37b7c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37b80 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37b84 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37b88 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37b8c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37b90 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37b94 0d0             | 
37b94 0d0             | '------------------------------------------------------------------------------
37b94 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37b94 0d0             | '------------------------------------------------------------------------------
37b94 0d0             | isr1_fsframe
37b94 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37b98 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37b9c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37ba0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37ba4 0d4             | .wait
37ba4 0d4 40 46 72 FD |                 testp   dp                      wc
37ba8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37bac 0d6 23 03 08 FC |                 akpin   dp
37bb0 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37bb4 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37bb8 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37bbc 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37bc0 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37bc4 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37bc8 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37bcc 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37bd0 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37bd4 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37bd8 0e1 2C FF BF FD |                 call    #utx_byte
37bdc 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37be0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37be4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37be8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37bec 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37bf0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37bf4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37bf8 0e9 5B A5 42 F5 |                 or      utx, icrc
37bfc 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37c00 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37c04 0ec 20 00 90 FD |                 jmp     #isr1_wait
37c08 0ed             | isr1_lsframe
37c08 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37c0c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c10 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37c14 0f0             | .wait
37c14 0f0 40 46 72 FD |                 testp   dp                      wc
37c18 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37c1c 0f2 23 03 08 FC |                 akpin   dp
37c20 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37c24 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37c28 0f5             | isr1_wait
37c28 0f5 22 A5 82 FA |                 rqpin   utx, dm
37c2c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37c30 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37c34 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37c38 0f9 03 00 00 FF 
37c3c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37c40 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37c44 0fc F5 FF 3B FB |                 reti1
37c48 0fd             | 
37c48 0fd             | '------------------------------------------------------------------------------
37c48 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37c48 0fd             | ' transaction will complete before the next frame is triggered.
37c48 0fd             | '------------------------------------------------------------------------------
37c48 0fd             | ' On entry:
37c48 0fd             | ' On exit:
37c48 0fd             | '------------------------------------------------------------------------------
37c48 0fd             | wait_txn_ok
37c48 0fd 1A 74 63 FD |                 getct   htmp2
37c4c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37c50 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37c54 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37c58 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37c5c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37c60 103 2D 00 64 FD |                 ret
37c64 104             | 
37c64 104             | '------------------------------------------------------------------------------
37c64 104             | ' A device connection was detected, or a bus reset was requested by the USB
37c64 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37c64 104             | ' and perform a reset sequence prior to device enumeration.
37c64 104             | '------------------------------------------------------------------------------
37c64 104             | dev_reset
37c64 104 22 A7 82 FA |                 rqpin   urx, dm
37c68 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37c6c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37c70 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37c74 108             | reset
37c74 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37c78 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37c7c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37c80 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37c84 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37c88 10d 1A 92 62 FD |                 getct   iframe_ct_base
37c8c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c90 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37c94 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37c98 111 24 70 07 F1 |                 add     htmp, #36
37c9c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37ca0 113             | .framewait
37ca0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37ca4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37ca8 115 2D 00 64 FD |                 ret
37cac 116             | 
37cac 116             | '------------------------------------------------------------------------------
37cac 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37cac 116             | '------------------------------------------------------------------------------
37cac 116             | ' On entry:
37cac 116             | '   PTRA - source address.
37cac 116             | '   PB - destination address.
37cac 116             | '   hr0 - length of copy, in bytes.
37cac 116             | ' On exit:
37cac 116             | '------------------------------------------------------------------------------
37cac 116             | hmemcpy
37cac 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37cb0 117 F7 71 43 FC |                 wrbyte  htmp, pb
37cb4 118 01 EE 07 F1 |                 add     pb, #1
37cb8 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37cbc 11a             | 
37cbc 11a             | '------------------------------------------------------------------------------
37cbc 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37cbc 11a             | ' loop until the errant device is disconnected.
37cbc 11a             | '------------------------------------------------------------------------------
37cbc 11a             | ' On entry:
37cbc 11a             | ' On exit:
37cbc 11a             | '------------------------------------------------------------------------------
37cbc 11a             | host_error
37cbc 11a             |           if ERROR_LED >= 0
37cbc 11a             |           end
37cbc 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37cc0 11b             | 
37cc0 11b             | '------------------------------------------------------------------------------
37cc0 11b             | ' Get HID descriptor buffer for current port
37cc0 11b             | '------------------------------------------------------------------------------
37cc0 11b             | ' On entry:
37cc0 11b             | ' On exit:
37cc0 11b             | '   PB - HID descriptor buffer pointer
37cc0 11b             | '------------------------------------------------------------------------------
37cc0 11b             | get_hid_descr_buffer
37cc0 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37cc4 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37cc8 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37ccc 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37cd0 11f             | 
37cd0 11f             | 
37cd0 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37cd4 120             | 
37cd4 120             | ' USB commands and error codes
37cd4 120 00 00 00 00 | cmd_data        long    0
37cd8 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37cdc 122             | 
37cdc 122             | ' Parameters block assigned at cog startup
37cdc 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37ce0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37ce4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37ce8 125             | if ACTIVITY_LED >= 0
37ce8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37ce8 125             | end
37ce8 125             | if ERROR_LED >= 0
37ce8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37ce8 125             | end
37ce8 125 00 00 00 00 | hid_descr_p     long    0
37cec 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37cec 126             | 'hkbd_report_p   long    0
37cec 126 00 00 00 00 | hub_descr_p     long    0
37cf0 127 00 00 00 00 | urx_buff_p      long    0
37cf4 128 00 00 00 00 | dev_desc_buff_p long    0
37cf8 129 00 00 00 00 | con_desc_buff_p long    0
37cfc 12a 00 00 00 00 | cache_start_p   long    0
37d00 12b 00 00 00 00 | cache_end_p     long    0
37d04 12c             | if EMUPAD_MAX_PLAYER > 0
37d04 12c             | emupad_out_ptr  long    0
37d04 12c             | end
37d04 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37d08 12d             | 
37d08 12d             | hdev_init_start
37d08 12d             | hdev_port       res     1
37d08 12d             | hdev_port       res     1
37d08 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37d08 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37d08 12d             | kbm_next_datax  res     1
37d08 12d             | kbm_next_datax  res     1
37d08 12d             | hub_intf_num    res     1
37d08 12d             | hub_intf_num    res     1
37d08 12d             | hub_next_datax  res     1
37d08 12d             | hub_next_datax  res     1
37d08 12d             | hub_status_chg  res     1
37d08 12d             | hub_status_chg  res     1
37d08 12d             | hub_port_status res     1
37d08 12d             | hub_port_status res     1
37d08 12d             | if HAVE_MOUSE
37d08 12d             | ms_intf_num     res     1
37d08 12d             | ms_intf_num     res     1
37d08 12d             | ms_in_max_pkt   res     1
37d08 12d             | ms_in_max_pkt   res     1
37d08 12d             | end
37d08 12d             | kb_intf_num     res     1
37d08 12d             | kb_intf_num     res     1
37d08 12d             | kb_interval     res     1
37d08 12d             | kb_interval     res     1
37d08 12d             | kb_in_max_pkt   res     1
37d08 12d             | kb_in_max_pkt   res     1
37d08 12d             | kb_max_index    res     1
37d08 12d             | kb_max_index    res     1
37d08 12d             | kb_led_states   res     1
37d08 12d             | kb_led_states   res     1
37d08 12d             | gp_intf_num     res     1
37d08 12d             | gp_intf_num     res     1
37d08 12d             | gp_interval     res     1
37d08 12d             | gp_interval     res     1
37d08 12d             | gp_max_index    res     1
37d08 12d             | gp_max_index    res     1
37d08 12d             | gp_descr_len    res     1+MAX_DEVICES
37d08 12d             | gp_descr_len    res     1+MAX_DEVICES
37d08 12d             | hdev_init_end
37d08 12d             | 
37d08 12d             | ' Initialized at cog startup:
37d08 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37d08 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37d08 12d             | iframe_ct_new   res     1
37d08 12d             | iframe_ct_new   res     1
37d08 12d             | iframe_ct_base  res     1
37d08 12d             | iframe_ct_base  res     1
37d08 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37d08 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37d08 12d             | 
37d08 12d             | ' This register block is reset to zero when a USB device connects
37d08 12d             | hreg_init_start
37d08 12d             | hstatus         res     1         ' Host status flags
37d08 12d             | hstatus         res     1         ' Host status flags
37d08 12d             | hctwait         res     1         ' Poll-based wait clocks
37d08 12d             | hctwait         res     1         ' Poll-based wait clocks
37d08 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37d08 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37d08 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37d08 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37d08 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37d08 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37d08 12d             | xfer_retry      res     1         ' Control transfer retry count
37d08 12d             | xfer_retry      res     1         ' Control transfer retry count
37d08 12d             | retry           res     1         ' Transaction retry count
37d08 12d             | retry           res     1         ' Transaction retry count
37d08 12d             | utx             res     1         ' Byte to transmit on USB
37d08 12d             | utx             res     1         ' Byte to transmit on USB
37d08 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37d08 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37d08 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37d08 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37d08 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37d08 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37d08 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37d08 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37d08 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37d08 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37d08 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37d08 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37d08 12d             | frame           res     1         ' USB 1ms frame counter value
37d08 12d             | frame           res     1         ' USB 1ms frame counter value
37d08 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37d08 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37d08 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37d08 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37d08 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37d08 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37d08 12d             | crc             res     1         ' Used for CRC16 calculation
37d08 12d             | crc             res     1         ' Used for CRC16 calculation
37d08 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37d08 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37d08 12d             | retval          res     1         ' Global success/fail return parameter
37d08 12d             | retval          res     1         ' Global success/fail return parameter
37d08 12d             | context_retval  res     1         ' Operation contextual return parameter
37d08 12d             | context_retval  res     1         ' Operation contextual return parameter
37d08 12d             | ' Device stuff
37d08 12d             | hdev_id         res     1+MAX_DEVICES
37d08 12d             | hdev_id         res     1+MAX_DEVICES
37d08 12d             | hdev_bcd        res     1
37d08 12d             | hdev_bcd        res     1
37d08 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37d08 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37d08 12d             | ' Keyboard/mouse stuff
37d08 12d             | hctrl_ep_addr   res     1
37d08 12d             | hctrl_ep_addr   res     1
37d08 12d             | hctrl_max_pkt   res     1
37d08 12d             | hctrl_max_pkt   res     1
37d08 12d             | hconfig_base    res     1
37d08 12d             | hconfig_base    res     1
37d08 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37d08 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37d08 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37d08 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37d08 12d             | hdev_class      res     1
37d08 12d             | hdev_class      res     1
37d08 12d             | hdev_subclass   res     1
37d08 12d             | hdev_subclass   res     1
37d08 12d             | hdev_protocol   res     1
37d08 12d             | hdev_protocol   res     1
37d08 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37d08 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37d08 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37d08 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37d08 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37d08 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37d08 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37d08 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37d08 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37d08 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37d08 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37d08 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37d08 12d             | if HAVE_MOUSE
37d08 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37d08 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37d08 12d             | end
37d08 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37d08 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37d08 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37d08 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37d08 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37d08 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37d08 12d             | hdev_out_addr   res     1
37d08 12d             | hdev_out_addr   res     1
37d08 12d             | 
37d08 12d             | if EMUPAD_MAX_PLAYER > 0
37d08 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37d08 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37d08 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37d08 12d             | end
37d08 12d             | 
37d08 12d             | hreg_init_end
37d08 12d             | 
37d08 12d             | hidr_start
37d08 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37d08 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37d08 12d             | hidr_flags      res     1
37d08 12d             | hidr_flags      res     1
37d08 12d             | hidr_axis       res     3
37d08 12d             | hidr_axis       res     3
37d08 12d             | hidr_buttons    res     1
37d08 12d             | hidr_buttons    res     1
37d08 12d             | hidr_hats       res     1
37d08 12d             | hidr_hats       res     1
37d08 12d             | '' Above are actually useful values, 6 longs
37d08 12d             | hidr_id         res     1
37d08 12d             | hidr_id         res     1
37d08 12d             | hidr_state      res     1
37d08 12d             | hidr_state      res     1
37d08 12d             | hidr_size       res     1
37d08 12d             | hidr_size       res     1
37d08 12d             | hidr_count      res     1
37d08 12d             | hidr_count      res     1
37d08 12d             | hidr_offset     res     1
37d08 12d             | hidr_offset     res     1
37d08 12d             | hidr_usage_idx  res     1
37d08 12d             | hidr_usage_idx  res     1
37d08 12d             | hidr_lminmax    res     1
37d08 12d             | hidr_lminmax    res     1
37d08 12d             | hidr_pminmax    res     1
37d08 12d             | hidr_pminmax    res     1
37d08 12d             | hidr_type       res     1
37d08 12d             | hidr_type       res     1
37d08 12d             | hidr_end
37d08 12d             | 
37d08 12d             | ' Variables dependent on the system freqency
37d08 12d             | _var_64_lower_  res     1
37d08 12d             | _var_64_lower_  res     1
37d08 12d             | _var_64_upper_  res     1
37d08 12d             | _var_64_upper_  res     1
37d08 12d             | _12Mbps_        res     1
37d08 12d             | _12Mbps_        res     1
37d08 12d             | _1_5Mbps_       res     1
37d08 12d             | _1_5Mbps_       res     1
37d08 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37d08 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37d08 12d             | _1us_           res     1         ' 1us
37d08 12d             | _1us_           res     1         ' 1us
37d08 12d             | _10us_          res     1         ' 10us
37d08 12d             | _10us_          res     1         ' 10us
37d08 12d             | _33us_          res     1         ' 33us
37d08 12d             | _33us_          res     1         ' 33us
37d08 12d             | _txn_err_       res     1         ' 250us
37d08 12d             | _txn_err_       res     1         ' 250us
37d08 12d             | _500us_         res     1         ' 500us
37d08 12d             | _500us_         res     1         ' 500us
37d08 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37d08 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37d08 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37d08 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37d08 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37d08 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37d08 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37d08 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37d08 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37d08 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37d08 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37d08 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37d08 12d             | _preamble_wait_ res     1
37d08 12d             | _preamble_wait_ res     1
37d08 12d             | _1ms_           res     1         ' 1ms
37d08 12d             | _1ms_           res     1         ' 1ms
37d08 12d             | _2ms_           res     1         ' 2ms
37d08 12d             | _2ms_           res     1         ' 2ms
37d08 12d             | _suspend_wait_  res     1         ' 3ms
37d08 12d             | _suspend_wait_  res     1         ' 3ms
37d08 12d             | _4ms_           res     1         ' 4ms
37d08 12d             | _4ms_           res     1         ' 4ms
37d08 12d             | _xfer_wait_     res     1         ' 5ms
37d08 12d             | _xfer_wait_     res     1         ' 5ms
37d08 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37d08 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37d08 12d             | _reset_hold_    res     1         ' 15ms
37d08 12d             | _reset_hold_    res     1         ' 15ms
37d08 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37d08 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37d08 12d             | _21ms_          res     1         ' 21ms
37d08 12d             | _21ms_          res     1         ' 21ms
37d08 12d             | _100ms_         res     1         ' 100ms
37d08 12d             | _100ms_         res     1         ' 100ms
37d08 12d             | _500ms_         res     1         ' 500ms
37d08 12d             | _500ms_         res     1         ' 500ms
37d08 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37d08 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37d08 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37d08 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37d08 12d             | '------------------------------------------------------------------------------
37d08 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37d08 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37d08 12d             | _usb_d_ls_nco_  res     1
37d08 12d             | _usb_d_ls_nco_  res     1
37d08 12d             | _usb_h_fs_nco_  res     1
37d08 12d             | _usb_h_fs_nco_  res     1
37d08 12d             | _usb_d_fs_nco_  res     1
37d08 12d             | _usb_d_fs_nco_  res     1
37d08 12d             | '------------------------------------------------------------------------------
37d08 12d             | ' Scratch registers
37d08 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37d08 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37d08 12d             | htmp1           res     1
37d08 12d             | htmp1           res     1
37d08 12d             | htmp2           res     1
37d08 12d             | htmp2           res     1
37d08 12d             | htmp3           res     1
37d08 12d             | htmp3           res     1
37d08 12d             | hrep            res     1         ' Repeat count
37d08 12d             | hrep            res     1         ' Repeat count
37d08 12d             | hsave0          res     1         ' Subroutine parameter saves
37d08 12d             | hsave0          res     1         ' Subroutine parameter saves
37d08 12d             | hsave1          res     1
37d08 12d             | hsave1          res     1
37d08 12d             | hsave2          res     1
37d08 12d             | hsave2          res     1
37d08 12d             | isrtmp1         res     1
37d08 12d             | isrtmp1         res     1
37d08 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37d08 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37d08 12d             | hr0             res     1         ' Multi-purpose registers
37d08 12d             | hr0             res     1         ' Multi-purpose registers
37d08 12d             | hr1             res     1
37d08 12d             | hr1             res     1
37d08 12d             | hr2             res     1
37d08 12d             | hr2             res     1
37d08 12d             | hr3             res     1
37d08 12d             | hr3             res     1
37d08 12d             | hpar1           res     1         ' Routine entry/exit parameters
37d08 12d             | hpar1           res     1         ' Routine entry/exit parameters
37d08 12d             | hpar2           res     1
37d08 12d             | hpar2           res     1
37d08 12d             | hpar3           res     1
37d08 12d             | hpar3           res     1
37d08 12d             | hct2            res     1         ' Function response bus turn-around timer
37d08 12d             | hct2            res     1         ' Function response bus turn-around timer
37d08 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37d08 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37d08 12d             | mod_cnt         res     1         ' Used in idle loops
37d08 12d             | mod_cnt         res     1         ' Used in idle loops
37d08 12d             |                 fit     $1F0
37d08 12d             |                 org     $200
37d08 200             | hlut_start
37d08 200             | 
37d08 200             | '------------------------------------------------------------------------------
37d08 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37d08 200             | ' settings to startup defaults.
37d08 200             | '------------------------------------------------------------------------------
37d08 200             | ' On entry:
37d08 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37d08 200             | '------------------------------------------------------------------------------
37d08 200             | set_speed_full
37d08 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37d0c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37d10 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37d14 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37d18 204             | '                ret                             wcz     ' Restore caller flags on exit
37d18 204             | 
37d18 204             | '------------------------------------------------------------------------------
37d18 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37d18 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37d18 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37d18 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37d18 204             | ' putting the smart pins into reset.
37d18 204             | '------------------------------------------------------------------------------
37d18 204             | ' On entry:
37d18 204             | ' On exit: CZ flags restored to caller states
37d18 204             | '------------------------------------------------------------------------------
37d18 204             | set_speed_low
37d18 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37d1c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37d20 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37d24 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37d28 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37d2c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37d30 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37d34 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37d38 20c             | 
37d38 20c             | '------------------------------------------------------------------------------
37d38 20c             | ' Perform configuration stuff required when a device intitially connects.
37d38 20c             | '------------------------------------------------------------------------------
37d38 20c             | ' On entry:
37d38 20c             | ' On exit:
37d38 20c             | '------------------------------------------------------------------------------
37d38 20c             | on_connect
37d38 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37d3c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37d40 20e             | .retry
37d40 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37d44 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37d48 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37d4c 211 00 08 00 FF 
37d50 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37d54 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37d58 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37d5c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37d60 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37d64 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37d68 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37d6c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37d70 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37d74 21b 4C 03 B0 FD |                 call    #poll_waitx
37d78 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37d7c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37d80 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37d84 21f B8 FF 9F FD |                 jmp     #.retry
37d88 220             | .get_dev_desc
37d88 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37d8c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37d90 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37d94 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37d98 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37d9c 225 88 FB BF FD |                 call    #reset
37da0 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37da4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37da8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37dac 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37db0 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37db4 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37db8 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37dbc 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37dc0 22e 04 00 00 FF 
37dc4 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37dc8 230 34 FA BF FD |                 call    #calc_crc5
37dcc 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37dd0 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37dd4 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37dd8 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37ddc 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37de0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37de4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37de8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37dec 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37df0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37df4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37df8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37dfc 23d C4 02 B0 FD |                 call    #poll_waitx
37e00 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37e04 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37e08 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37e0c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37e10 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37e14 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e18 244 2D 00 64 5D |         if_nz   ret
37e1c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37e20 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37e24 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37e28 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37e2c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37e30 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37e34 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37e38 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37e3c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37e40 24e 2C FB 9F CD |         if_b    jmp     #host_error
37e44 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37e48 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37e4c 251 2D EC 63 FD |                 call    pa
37e50 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37e54 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37e58 254 2C EC 63 FD |                 jmp     pa
37e5c 255             | 
37e5c 255             | '------------------------------------------------------------------------------
37e5c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37e5c 255             | ' Status reporting is always in the function-to-host direction.
37e5c 255             | '------------------------------------------------------------------------------
37e5c 255             | ' On entry:
37e5c 255             | '   PTRA - start address of the SETUP data in hub.
37e5c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37e5c 255             | '     stage.
37e5c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37e5c 255             | ' On exit:
37e5c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37e5c 255             | '     contains the count of data stage bytes actually received, which must
37e5c 255             | '     always be <= the count requested.
37e5c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37e5c 255             | '     more specific USB operation error code.
37e5c 255             | '------------------------------------------------------------------------------
37e5c 255             | control_read
37e5c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37e60 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37e64 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37e68 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37e6c 259             | .xfer_start
37e6c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37e70 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37e74 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e78 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37e7c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
37e80 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37e84 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37e88 260 61 00 00 FF 
37e8c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
37e90 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37e94 263             | .data
37e94 263 56 B1 02 F6 |                 mov     pkt_data, total_data
37e98 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
37e9c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37ea0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
37ea4 267             | .nak_retry
37ea4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
37ea8 268             | .in_retry
37ea8 268 BC F6 BF FD |                 call    #txn_in
37eac 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
37eb0 26a 28 00 90 AD |         if_z    jmp     #.commit
37eb4 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37eb8 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37ebc 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37ec0 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37ec4 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
37ec8 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37ecc 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37ed0 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37ed4 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
37ed8 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
37edc 275             | .commit
37edc 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
37ee0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
37ee4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
37ee8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
37eec 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
37ef0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
37ef4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
37ef8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
37efc 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
37f00 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
37f04 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
37f08 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
37f0c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
37f10 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
37f14 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
37f18 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
37f1c 285             | .pre_status
37f1c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
37f20 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
37f24 287 00 B0 06 F6 |                 mov     pkt_data, #0
37f28 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
37f2c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37f30 28a 61 00 00 FF 
37f34 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
37f38 28c             | .out_retry
37f38 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
37f3c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f40 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
37f44 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37f48 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37f4c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37f50 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37f54 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37f58 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37f5c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
37f60 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
37f64 297             | ' I've encountered transfer STALL, even though the data looks correct, and
37f64 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
37f64 297             | ' ControlRead() transfer gets things unstuck most of the time...
37f64 297             | .xfer_retry
37f64 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
37f68 298 58 01 B0 FD |                 call    #poll_waitx
37f6c 299 8C F9 BF FD |                 call    #wait_txn_ok
37f70 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
37f74 29b C7 F1 03 F6 |                 mov     ptra, hpar2
37f78 29c C8 EF 03 F6 |                 mov     pb, hpar3
37f7c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
37f80 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
37f84 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
37f88 2a0             | 
37f88 2a0             | '------------------------------------------------------------------------------
37f88 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
37f88 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
37f88 2a0             | ' the SETUP data struct is filled with the required values.
37f88 2a0             | '------------------------------------------------------------------------------
37f88 2a0             | ' On entry:
37f88 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
37f88 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
37f88 2a0             | '     stage.
37f88 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
37f88 2a0             | ' On exit:
37f88 2a0             | '   retval - used to convey the success/failure of each stage.
37f88 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37f88 2a0             | '     more specific USB operation error code.
37f88 2a0             | '------------------------------------------------------------------------------
37f88 2a0             | control_write
37f88 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
37f8c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37f90 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37f94 2a3             | 
37f94 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37f98 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
37f9c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
37fa0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37fa4 2a7             | .xfer_start
37fa4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
37fa8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37fac 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37fb0 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fb4 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
37fb8 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
37fbc 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37fc0 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37fc4 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
37fc8 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37fcc 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37fd0 2b2             | .data
37fd0 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
37fd4 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
37fd8 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37fdc 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
37fe0 2b6             | .out_retry
37fe0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
37fe4 2b7 88 F6 BF FD |                 call    #txn_out
37fe8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fec 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
37ff0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37ff4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
37ff8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
37ffc 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
38000 2be             | .commit
38000 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38004 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38008 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3800c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38010 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38014 2c3             | pre_status_in
38014 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38018 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3801c 2c5             | .status_retry
3801c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
38020 2c6 44 F5 BF FD |                 call    #txn_in
38024 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38028 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3802c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
38030 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38034 2cb 2D 00 64 AD |         if_z    ret
38038 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3803c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38040 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38044 2cf             | '               ret                                     ' Caller must handle transfer retirement
38044 2cf             | 
38044 2cf             | '------------------------------------------------------------------------------
38044 2cf             | ' Execute an IN interrupt transaction.
38044 2cf             | '------------------------------------------------------------------------------
38044 2cf             | ' On entry:
38044 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38044 2cf             | '   hpar2 - Address of the IN data buffer
38044 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38044 2cf             | ' On exit:
38044 2cf             | '   retval - the result of the operation.
38044 2cf             | '   hpar3 - the count of IN data bytes actually received.
38044 2cf             | '------------------------------------------------------------------------------
38044 2cf             | do_int_in
38044 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38048 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3804c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38050 2d2             | 
38050 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
38054 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38058 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3805c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
38060 2d6             | .retry
38060 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
38064 2d7 00 F5 BF FD |                 call    #txn_in
38068 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3806c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
38070 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
38074 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
38078 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3807c 2dd 54 00 B0 FD |                 call    #retry_wait
38080 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38084 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38088 2e0 D4 FF 9F FD |                 jmp     #.retry
3808c 2e1             | .commit
3808c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
38090 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
38094 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
38098 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3809c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
380a0 2e6             | .post_ret
380a0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
380a4 2e7             | 
380a4 2e7             | 
380a4 2e7             | '------------------------------------------------------------------------------
380a4 2e7             | ' Resets the downstream hub port to FS
380a4 2e7             | '------------------------------------------------------------------------------
380a4 2e7             | dwnstream_reset
380a4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
380a8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
380ac 2e9             | 
380ac 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
380b0 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
380b4 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
380b8 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
380bc 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
380c0 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
380c4 2ef             | 
380c4 2ef             | '------------------------------------------------------------------------------
380c4 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
380c4 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
380c4 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
380c4 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
380c4 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
380c4 2ef             | '------------------------------------------------------------------------------
380c4 2ef             | ' On entry:
380c4 2ef             | '   hctwait - wait interval in sysclocks.
380c4 2ef             | ' On exit:
380c4 2ef             | '------------------------------------------------------------------------------
380c4 2ef             | poll_waitx
380c4 2ef 1A 92 63 FD |                 getct   hct2
380c8 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
380cc 2f1             | .wait
380cc 2f1 FF 25 CC FB |                 jnct2   #.wait
380d0 2f2 2D 00 64 FD |                 ret
380d4 2f3             | 
380d4 2f3             | '------------------------------------------------------------------------------
380d4 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
380d4 2f3             | '------------------------------------------------------------------------------
380d4 2f3             | ' On entry:
380d4 2f3             | '   retval - transaction response PID or error code.
380d4 2f3             | ' On exit:
380d4 2f3             | '------------------------------------------------------------------------------
380d4 2f3             | retry_wait
380d4 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
380d8 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
380dc 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
380e0 2f6 14 00 90 AD |         if_z    jmp     #.nak
380e4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
380e8 2f8 D8 FF BF FD |                 call    #poll_waitx
380ec 2f9             | .dec
380ec 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
380f0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
380f4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
380f8 2fc             | .nak
380f8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
380fc 2fd C4 FF BF FD |                 call    #poll_waitx
38100 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38104 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38108 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3810c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
38110 302 2D 00 64 FD |                 ret
38114 303             | 
38114 303             | host_reset
38114 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38118 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3811c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3811c 305 BD 01 05 FF 
38120 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38124 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38128 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3812c 309             | ' Check to see if the system clock has been changed.
3812c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38130 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38134 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38138 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3813c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38140 30e 40 46 62 FD |                 dirl    dp
38144 30f             | 
38144 30f 28 02 64 FD |                 setq    #1
38148 310 80 00 80 FF 
3814c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38150 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
38154 313             | .enable
38154 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38158 314 41 46 62 FD |                 dirh    dp
3815c 315 1F 36 63 FD |                 waitx   _1us_
38160 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38164 317             | 
38164 317             |                 ' Handle Port protection enable and startup delay
38164 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38168 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3816c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
38170 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
38174 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
38178 31c             | 
38178 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3817c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
38180 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38184 31f 00 00 04 F6 |                 mov     0-0, #0
38188 320             | .regloop
38188 320             | 
38188 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38188 320             | 
38188 320             | discon_entry
38188 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3818c 321             | 
3818c 321             |               
3818c 321             |         if HAVE_HIDPAD
3818c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
38190 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
38194 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38198 324 F7 01 68 FC |                 wrlong  #0,pb
3819c 325             |         end
3819c 325             |         if EMUPAD_MAX_PLAYER > 0
3819c 325             |         end
3819c 325             | 
3819c 325             |                 ' Fall through to disconnected loop
3819c 325             | 
3819c 325             | '-----------------------------------------------------------------------------------------------------------------
3819c 325             | ' Device connect handling (Section 7.1.7.3).
3819c 325             | '-----------------------------------------------------------------------------------------------------------------
3819c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3819c 325             | ' device to connect (Section 7.1.7.3).
3819c 325             | '-----------------------------------------------------------------------------------------------------------------
3819c 325             | disconnected
3819c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
381a0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
381a4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
381a8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
381ac 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
381b0 32a             |         if ACTIVITY_LED >= 0
381b0 32a             |         end
381b0 32a 22 A7 82 FA |                 rqpin   urx, dm
381b4 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
381b8 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
381bc 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
381c0 32e             | .se1_test
381c0 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
381c4 32f FC FE BF FD |                 call    #poll_waitx
381c8 330 22 A7 82 FA |                 rqpin   urx, dm
381cc 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
381d0 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
381d4 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
381d8 334             | .se1            'SE1 is a fatal error condition
381d8 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
381dc 335 E4 FE BF FD |                 call    #poll_waitx
381e0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
381e4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
381e8 338             | .connect_test                                           ' Test lines until stable J/K state seen
381e8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
381ec 339 22 A7 82 FA |                 rqpin   urx, dm
381f0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
381f4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
381f8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
381fc 33d             | connected
381fc 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
38200 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38204 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38208 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3820c 341             | .set_pulse
3820c 341 1A 64 63 FD |                 getct   _pulse_time_
38210 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38214 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38214 343             | ' of 1ms and make a correction, if necessary.
38214 343             | '                mov     htmp, _1ms_
38214 343             | '                subs    htmp, iframe_delta
38214 343             | '                adds    _frame1ms_clks_, htmp
38214 343             | '                debug(udec(_frame1ms_clks_))
38214 343             | 
38214 343             |                 ' Fall through to idle/processing loop
38214 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38218 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3821c 345             | 
3821c 345             | hidle
3821c 345 22 A7 82 FA |                 rqpin   urx, dm
38220 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38224 347 98 00 90 CD |         if_c    jmp     #.se0_test
38228 348 24 06 70 FD |                 pollct3                         wc
3822c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
38230 34a 1A 94 63 FD |                 getct   hct3
38234 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38238 34c             | 
38238 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3823c 34d 00 70 E3 F8 |                 getbyte htmp
38240 34e             | 
38240 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38244 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38248 350 40 00 90 AD |         if_z    jmp     #.poll
3824c 351             | 
3824c 351             |         if _HAVE_GAMEPAD
3824c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
38250 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
38254 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
38258 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3825c 355 2C 00 90 AD |         if_z    jmp     #.poll
38260 356             |         end
38260 356             | 
38260 356             |         if HAVE_MOUSE
38260 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
38264 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
38268 358 20 00 90 AD |         if_z    jmp     #.poll
3826c 359             |         end
3826c 359             | 
3826c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
38270 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
38274 35b 14 00 90 AD |         if_z    jmp     #.poll
38278 35c             | 
38278 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3827c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
38280 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
38284 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38288 360             |         if HAVE_MOUSE
38288 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3828c 361             |         else
3828c 361             |         end
3828c 361             | 
3828c 361             | .poll
3828c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
38290 362 2D EC 63 FD |                 call    pa
38294 363             | .skip_poll
38294 363             | 
38294 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
38298 364             | 
38298 364             | .nopoll
38298 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3829c 365 44 00 90 AD |         if_z    jmp     #hsuspend
382a0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
382a4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
382a8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
382ac 369 1A 84 63 FD |                 getct   hr0
382b0 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
382b4 36b             |         if ACTIVITY_LED >= 0
382b4 36b             |         end
382b4 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
382b8 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
382bc 36d 5C FF 9F FD |                 jmp     #hidle
382c0 36e             | ' Check for extended SE0 state on the bus
382c0 36e             | .se0_test
382c0 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
382c4 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
382c8 370 22 A7 82 FA |                 rqpin   urx, dm
382cc 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
382d0 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
382d4 373 24 F6 BF FD |                 call    #wait_txn_ok
382d8 374 00 00 80 FF 
382dc 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
382e0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
382e0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
382e4 377             | 
382e4 377             | hsuspend
382e4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
382e8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
382ec 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
382f0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
382f4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
382f8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
382fc 37d             | 
382fc 37d             |                 ' Fall through to resume wait loop
382fc 37d             | 
382fc 37d             | hwait_resume
382fc 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
38300 37e 02 86 47 F0 |                 shr     hr1, #2
38304 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38308 380             |         if ACTIVITY_LED >= 0
38308 380             |         end
38308 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3830c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
38310 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38314 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38318 384 18 00 90 AD |         if_z    jmp     #.resume
3831c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
38320 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38324 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38328 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3832c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
38330 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38334 38b             | .resume
38334 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38338 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3833c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
38340 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38344 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38348 390 1F 70 63 FD |                 waitx   htmp
3834c 391 22 07 28 FC |                 wypin   #OUT_J, dm
38350 392 01 70 47 F0 |                 shr     htmp, #1
38354 393 1F 70 63 FD |                 waitx   htmp
38358 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3835c 395 1A 92 62 FD |                 getct   iframe_ct_base
38360 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38364 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38368 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3836c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
38370 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
38374 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
38378 39c             | 
38378 39c             | '------------------------------------------------------------------------------
38378 39c             | ' Send preamble to enable low-speed HUB ports
38378 39c             | '------------------------------------------------------------------------------
38378 39c             | ' On entry:
38378 39c             | ' On exit:
38378 39c             | '   USB baud rate set to low-speed
38378 39c             | '------------------------------------------------------------------------------
38378 39c             | utx_pre
38378 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3837c 39d 40 46 62 FD |                 dirl    dp
38380 39e 28 02 64 FD |                 setq    #1
38384 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38388 3a0 58 44 62 FD |                 drvl    dm
3838c 3a1 59 46 62 FD |                 drvh    dp
38390 3a2             | 
38390 3a2 1E 00 00 FF 
38394 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
38398 3a4             | 
38398 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3839c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
383a0 3a6 28 02 64 3D |         if_nc   setq    #1
383a4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
383a8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
383ac 3a9             | .l1
383ac 3a9             | 
383ac 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
383b0 3aa 40 46 62 FD |                 dirl    dp
383b4 3ab 28 02 64 FD |                 setq    #1
383b8 3ac 80 00 80 FF 
383bc 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
383c0 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
383c4 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
383c8 3b0 41 46 62 FD |                 dirh    dp
383cc 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
383d0 3b2             | 
383d0 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
383d4 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
383d8 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
383dc 3b5             | 
383dc 3b5             | hlut_end
383dc 3b5             |                 fit     $400
383dc 3b5             |                 orgh
383dc                 | if OVERLAP_MEMORY
383dc                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
383dc                 | end
383dc                 | '------------------------------------------------------------------------------
383dc                 | ' Routines called from cog space.
383dc                 | '------------------------------------------------------------------------------
383dc                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
383dc                 | '------------------------------------------------------------------------------
383dc                 | 
383dc                 | '------------------------------------------------------------------------------
383dc                 | ' USB host cog initialization.
383dc                 | '------------------------------------------------------------------------------
383dc                 | usb_host_init
383dc                 |                 ' Initialize buffer pointers
383dc                 |         if OVERLAP_MEMORY
383dc                 |         else
383dc     40 15 B0 FE |                 loc     pb, #hid_descr
383e0                 |         end
383e0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
383e4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
383e4                 |                 {
383e4                 |                 }
383e4                 |         
383e4                 |                 {
383e4                 |                 }
383e4                 |                 'loc     pb,#hkbd_report
383e4                 |                 'mov     hkbd_report_p,pb
383e4                 | 
383e4     08 1D B0 FE |                 loc     pb, #hub_descr
383e8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
383ec     1D 1D B0 FE |                 loc     pb, #urx_buff
383f0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
383f4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
383f8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
383fc     9F 1D B0 FE |                 loc     pb, #con_desc_buff
38400     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38404     18 15 B0 FE |                 loc     pb, #usb_cache_start
38408     F7 55 02 F6 |                 mov     cache_start_p, pb
3840c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
38410     F7 57 02 F6 |                 mov     cache_end_p, pb
38414                 | 
38414                 |         if ERROR_LED >= 0
38414                 |         end
38414                 | 
38414                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38414                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38414                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38414                 | ' Configure and enable the Serial Host USB port.
38414     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38418                 | 
38418                 | '------------------------------------------------------------------------------
38418                 | ' Timing calculations happen before any interrupt(s) are enabled.
38418                 | '------------------------------------------------------------------------------
38418                 | ' On entry:
38418                 | '   htmp - current CLKFREQ value.
38418                 | '------------------------------------------------------------------------------
38418                 | hinit_usb_timings
38418                 | '                getct   htmp2
38418     B8 59 02 F6 |                 mov     save_sysclk, htmp
3841c     8D 5B 80 FF 
38420     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38424     18 30 63 FD |                 getqx   _12Mbps_
38428     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3842c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
38430     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38434     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38438     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3843c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
38440     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38444     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38448     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3844c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
38450     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
38454     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
38458     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3845c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
38460     80 00 00 FF 
38464     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
38468     18 2C 63 FD |                 getqx   _var_64_lower_
3846c     19 2E 63 FD |                 getqy   _var_64_upper_
38470     28 2C 63 FD |                 setq    _var_64_lower_
38474     65 CD 1D FF 
38478     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3847c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
38480     01 00 00 FF 
38484     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38488     18 2C 63 FD |                 getqx   _var_64_lower_
3848c     19 2E 63 FD |                 getqy   _var_64_upper_
38490     28 2C 63 FD |                 setq    _var_64_lower_
38494     A1 07 00 FF 
38498     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3849c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
384a0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
384a4     09 36 57 F0 |                 shr     _1us_, #9               wc
384a8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
384ac     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
384b0     18 38 63 FD |                 getqx   _10us_
384b4     09 38 57 F0 |                 shr     _10us_, #9              wc
384b8     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
384bc     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
384c0     18 3A 63 FD |                 getqx   _33us_
384c4     09 3A 57 F0 |                 shr     _33us_, #9              wc
384c8     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
384cc     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
384d0     18 3C 63 FD |                 getqx   _txn_err_
384d4     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
384d8     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
384dc     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
384e0     18 3E 63 FD |                 getqx   _500us_
384e4     09 3E 57 F0 |                 shr     _500us_, #9             wc
384e8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
384ec     01 00 00 FF 
384f0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
384f4     18 40 63 FD |                 getqx   _txn_ok_ls_
384f8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
384fc     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
38500     01 00 00 FF 
38504     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38508     18 42 63 FD |                 getqx   _txn_ok_fs_
3850c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
38510     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38514     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38518     05 00 00 FF 
3851c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
38520     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38524     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38528     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3852c     1C 00 00 FF 
38530     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38534     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38538     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3853c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
38540     00 00 00 FF 
38544     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38548     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3854c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
38550     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
38554     04 00 00 FF 
38558     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3855c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
38560     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
38564     8D 5B 00 FF 
38568     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3856c     18 4C 63 FD |                 getqx   _preamble_wait_
38570     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
38574     01 00 00 FF 
38578     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3857c     18 2C 63 FD |                 getqx   _var_64_lower_
38580     19 2E 63 FD |                 getqy   _var_64_upper_
38584     28 2C 63 FD |                 setq    _var_64_lower_
38588     01 00 00 FF 
3858c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
38590     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
38594     09 4E 57 F0 |                 shr     _1ms_, #9               wc
38598     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3859c     FF FF 7F FF 
385a0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
385a4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
385a8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
385ac     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
385b0     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
385b4     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
385b8     A7 55 03 F6 |                 mov     _4ms_, _1ms_
385bc     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
385c0     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
385c4     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
385c8     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
385cc     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
385d0     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
385d4     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
385d8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
385dc     A7 59 03 F6 |                 mov     _8ms_, _1ms_
385e0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
385e4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
385e8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
385ec     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
385f0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
385f4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
385f8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
385fc     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
38600     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38604     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38608     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3860c                 | '        _ret_   mov     _1sec_, save_sysclk
3860c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3860c                 | '                ret
3860c                 | {
3860c                 | }
3860c                 | 
3860c                 | '------------------------------------------------------------------------------
3860c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3860c                 | ' one. If it is, start the task progression that will configure the device for
3860c                 | ' use.
3860c                 | '------------------------------------------------------------------------------
3860c                 | ' On entry:
3860c                 | '   hconfig_base - start address of the cached config descriptor chain.
3860c                 | ' On exit:
3860c                 | '------------------------------------------------------------------------------
3860c                 | hparse_con_desc
3860c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
38610     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38614     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38618     4E 70 FF F9 |                 movbyts htmp,#%%1032
3861c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
38620                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
38620                 | 
38620     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38624     6E ED 03 F1 |                 add     pa, hconfig_base
38628     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3862c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3862c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3862c                 | ' that defines a keyboard and/or mouse.
3862c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
38630                 | .next_intf
38630     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38634     BC 01 90 3D |         if_ae   jmp     #hset_config
38638     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3863c     75 F3 03 F1 |                 add     ptrb, hnext_desc
38640     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38644     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38648     0C 00 90 AD |         if_z    jmp     #.intf
3864c     80 71 C7 FA |                 rdbyte  htmp, ptrb
38650     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38654     D8 FF 9F FD |                 jmp     #.next_intf
38658                 | .intf
38658     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3865c     00 90 07 F6 |                 mov     hpar3, #0
38660     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
38664     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38668     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3866c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
38670                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
38670                 | 
38670                 | .endp
38670     80 71 C7 FA |                 rdbyte  htmp, ptrb
38674     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38678     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3867c     78 00 90 3D |         if_ae   jmp     #.get_device
38680     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38684     75 F3 03 F1 |                 add     ptrb, hnext_desc
38688     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3868c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38690     64 00 90 AD |         if_z    jmp     #.get_device
38694     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38698     04 00 90 AD |         if_z    jmp     #.get_ep
3869c     D0 FF 9F FD |                 jmp     #.endp
386a0                 | .get_ep
386a0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
386a4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
386a8     0F 86 67 F0 |                 shl     hr1, #8 + 7
386ac     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
386b0     3F 00 00 FF 
386b4     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
386b8     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
386bc     00 8E 0F F2 |                 cmp     hpar2, #0               wz
386c0     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
386c4     00 90 0F F2 |                 cmp     hpar3, #0               wz
386c8     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
386cc     A0 FF 9F FD |                 jmp     #.endp
386d0                 | .in_ep
386d0     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
386d4     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
386d8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
386d8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
386dc     C2 89 DB F8 |                 setbyte hr2, hr0, #3
386e0     8C FF 9F FD |                 jmp     #.endp
386e4                 | .out_ep
386e4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
386e8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
386ec                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
386ec     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
386f0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
386f4     78 FF 9F FD |                 jmp     #.endp
386f8                 | 
386f8                 | .get_device
386f8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
386fc     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
38700     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38704     68 00 90 AD |         if_z    jmp     #.gamepad
38708     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3870c     AC 00 90 AD |         if_z    jmp     #.hub
38710     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38714     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38718     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3871c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38720     4C 00 90 AD |         if_z    jmp     #.gamepad
38724     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38728     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3872c                 | .keyboard
3872c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
38730                 |         if HAVE_MOUSE
38730     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38734                 |         else
38734                 |         end
38734     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38738     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3873c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38740     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38744     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38748     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3874c                 |                 'debug(udec(kb_intf_num))
3874c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3874c     E0 FE 9F FD |                 jmp     #.next_intf
38750                 | if HAVE_MOUSE
38750                 | .mouse
38750     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38754     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38758     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3875c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
38760     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38764                 |                 'getbyte ms_interval, hr2, #3
38764     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38768     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3876c                 |                 'debug(udec(kb_intf_num))
3876c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3876c     C0 FE 9F FD |                 jmp     #.next_intf
38770                 | end
38770                 | .gamepad
38770     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38774     C7 71 63 F5 |                 xor     htmp, hpar2
38778     3F 00 00 FF 
3877c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38780     AC FE 9F AD |         if_z    jmp     #.next_intf
38784                 |         if HAVE_MOUSE
38784     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38788     C7 71 63 F5 |                 xor     htmp, hpar2
3878c     3F 00 00 FF 
38790     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38794     98 FE 9F AD |         if_z    jmp     #.next_intf
38798                 |         end
38798     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3879c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
387a0     8C FE 9F 5D |         if_nz   jmp     #.next_intf
387a4                 | 
387a4     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
387a8     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
387ac     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
387b0     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
387b4     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
387b8                 |                 'debug(udec(gp_intf_num))
387b8                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
387b8     74 FE 9F FD |                 jmp     #.next_intf
387bc                 | .hub
387bc     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
387c0     6C FE 9F 5D |         if_nz   jmp     #.next_intf
387c4     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
387c8     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
387cc     60 FE 9F 5D |         if_nz   jmp     #.next_intf
387d0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
387d4     58 FE 9F 5D |         if_nz   jmp     #.next_intf
387d8     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
387dc     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
387e0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
387e4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
387e8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
387ec     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
387f0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
387f0     3C FE 9F FD |                 jmp     #.next_intf
387f4                 | 
387f4                 | '------------------------------------------------------------------------------
387f4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
387f4                 | ' it according to its function, or functions. In the case of this boot protocol
387f4                 | ' keyboard/mouse class driver:
387f4                 | ' - SetConfiguration(config_num)
387f4                 | ' - SetProtocol(boot)
387f4                 | ' - SetIdle(indefinite)
387f4                 | ' - Enter the device interrupt IN polling task stage.
387f4                 | '------------------------------------------------------------------------------
387f4                 | ' On entry:
387f4                 | ' On exit:
387f4                 | '------------------------------------------------------------------------------
387f4                 | hset_config
387f4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
387f4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
387f4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
387f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
387fc     00 00 0C F2 |                 cmp     0-0, #0                 wz
38800     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38804                 |         if HAVE_MOUSE
38804     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38808                 |         end
38808     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3880c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38810                 | .set_config
38810     6C 0E D0 FE |                 loc     ptra, #set_config
38814     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38818     6E ED 03 F1 |                 add     pa, hconfig_base
3881c     F6 8D C3 FA |                 rdbyte  hpar1, pa
38820     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38824     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38828     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3882c     A0 02 A0 FD |                 call    #control_write
38830     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38834     2D 00 64 5D |         if_nz   ret
38838                 | .kbd_config
38838     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3883c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
38840                 | 
38840     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38844     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38848     3F 00 00 FF 
3884c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38850     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38854                 | 
38854     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38858     34 0E D0 FE |                 loc     ptra, #set_protocol
3885c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38860     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38864     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38868     A0 02 A0 FD |                 call    #control_write
3886c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38870     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38874     E4 02 90 5D |         if_nz   jmp     #.notify_client
38878     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3887c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38880     30 03 B0 FD |                 call    #hset_idle
38884                 |                 'cmp     retval, #PID_ACK        wz
38884                 |         'if_nz   mov     hkbd_ep_addr, #0
38884                 |         'if_nz   jmp     #.notify_client
38884     A8 99 02 F6 |                 mov     hctwait, _2ms_
38888     EF 02 A0 FD |                 call    #poll_waitx
3888c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38890     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38894     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38898     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3889c     2C 03 B0 FD |                 call    #hset_kbdled_report
388a0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
388a4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
388a8     B0 02 90 5D |         if_nz   jmp     #.notify_client
388ac     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
388b0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
388b4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
388b8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
388bc     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
388c0     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
388c4     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
388c8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
388cc     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
388d0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
388d4     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
388d8                 |         if !!HAVE_MOUSE
388d8                 |         end
388d8                 | 
388d8                 | .mouse_config
388d8                 | if HAVE_MOUSE
388d8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
388dc     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
388e0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
388e4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
388e8     3F 00 00 FF 
388ec     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
388f0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
388f4                 | 
388f4                 |                 debug("mouse passed addr check")
388f4                 | 
388f4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
388f8     00 00 80 FF 
388fc     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
38900     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38904     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38908     55 02 A0 FD |                 call    #control_read
3890c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38910     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38914     44 02 90 5D |         if_nz   jmp     #.notify_client
38918     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3891c     56 01 00 F6 |                 mov     0-0, total_data
38920     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38924                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38924                 | 
38924     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38928     64 0D D0 FE |                 loc     ptra, #set_protocol
3892c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38930     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38934     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38938     A0 02 A0 FD |                 call    #control_write
3893c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38940     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38944     14 02 90 5D |         if_nz   jmp     #.notify_client
38948                 |                 debug("mouse passed SetProtocol")
38948     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3894c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38950     60 02 B0 FD |                 call    #hset_idle
38954                 |                 'cmp     retval, #PID_ACK        wz
38954                 |         'if_nz   mov     hmouse_ep_addr, #0
38954                 |         'if_nz   jmp     #.notify_client
38954                 |                 debug("mouse passed SetIdle")
38954     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38958     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3895c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38960     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38964     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38968     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3896c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38970     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38974     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38978     3F 00 00 FF 
3897c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38980     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38984     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38988     D0 01 90 FD |                 jmp     #.notify_client
3898c                 | end
3898c                 | .gamepad_config
3898c                 | if _HAVE_GAMEPAD
3898c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38990     00 00 0C F2 |                 cmp     0-0, #0                 wz
38994     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38998     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3899c     00 70 03 F6 |                 mov     htmp, 0-0
389a0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
389a4     3F 00 00 FF 
389a8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
389ac     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
389b0                 | 
389b0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
389b4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
389b8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389bc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389c0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
389c4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
389c8     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
389cc     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
389d0     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
389d4     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389d8     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389dc     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
389e0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
389e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
389e8                 | 
389e8                 |                 if EMUPAD_MAX_PLAYER > 0
389e8                 |                 
389e8                 | .rule_loop           
389e8                 |                 end
389e8                 | 
389e8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
389ec     5C 00 90 AD |         if_e    jmp     #.xinput
389f0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
389f4     00 70 03 F6 |                 mov     htmp,0-0
389f8     01 A6 02 FF 
389fc     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38a00     7C 00 90 AD |         if_e    jmp     #.ps3
38a04                 | 
38a04     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38a08     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38a0c     00 00 80 5F 
38a10     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38a14     03 00 80 AF 
38a18     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38a1c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38a20     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a24     55 02 A0 FD |                 call    #control_read
38a28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a2c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38a30     00 00 04 56 |         if_nz   mov     0-0, #0
38a34     24 01 90 5D |         if_nz   jmp     #.notify_client
38a38     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38a3c     56 01 00 F6 |                 mov     0-0, total_data
38a40     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a44                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38a44                 | 
38a44     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38a48     10 01 90 FD |                 jmp     #.notify_client
38a4c                 | .xinput
38a4c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38a50     2D EF 03 F6 |                 mov     pb,hdev_port
38a54     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38a58     03 EE 27 F3 |                 fle     pb,#3
38a5c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38a60     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38a64                 | 
38a64     03 B0 06 F6 |                 mov     pkt_data, #3
38a68     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38a6c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38a70     5A 00 A0 FD |                 call    #txn_out
38a74     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38a78                 | 
38a78     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38a7c     DC 00 90 FD |                 jmp     #.notify_client
38a80                 | .ps3
38a80     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38a84     2D EF 03 F6 |                 mov     pb,hdev_port
38a88     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38a8c     04 EE 27 F3 |                 fle     pb,#4
38a90     F7 EF C3 F9 |                 decod   pb
38a94     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38a98                 | 
38a98     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38a9c     00 0C D0 FE |                 loc     ptra, #set_report
38aa0     01 00 80 FF 
38aa4     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38aa8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38aac     03 61 5C FC |                 wrword  #48, ptra[wLength]
38ab0     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38ab4     A0 02 A0 FD |                 call    #control_write
38ab8                 | 
38ab8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38abc     E0 0B D0 FE |                 loc     ptra, #set_report
38ac0     01 00 80 FF 
38ac4     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38ac8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38acc     03 09 5C FC |                 wrword  #4, ptra[wLength]
38ad0     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38ad4     A0 02 A0 FD |                 call    #control_write
38ad8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38adc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38ae0     00 00 04 56 |         if_nz   mov     0-0, #0
38ae4     74 00 90 5D |         if_nz   jmp     #.notify_client
38ae8                 | 
38ae8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38aec     6C 00 90 FD |                 jmp     #.notify_client
38af0                 | end
38af0                 | 
38af0                 | .hub_config
38af0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38af4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38af8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38afc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38b00     3F 00 00 FF 
38b04     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38b08     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38b0c                 | 
38b0c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38b10     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38b14     26 EF 03 F6 |                 mov     pb, hub_descr_p
38b18     55 02 A0 FD |                 call    #control_read
38b1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b20     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38b24     34 00 90 5D |         if_nz   jmp     #.notify_client
38b28                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38b28                 | 
38b28     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38b2c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38b30     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38b34                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38b34                 | .pwr_loop
38b34     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38b38     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38b3c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38b40     A0 02 A0 FD |                 call    #control_write
38b44     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38b48                 | 
38b48     B1 99 02 F6 |                 mov     hctwait, _500ms_
38b4c     B0 99 02 F1 |                 add     hctwait, _100ms_
38b50     EF 02 A0 FD |                 call    #poll_waitx
38b54                 | 
38b54     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38b58     00 00 90 FD |                 jmp     #.notify_client
38b5c                 | 
38b5c                 | .notify_client
38b5c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38b60     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38b64                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38b64                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38b64     2D 00 64 FD |                 ret
38b68                 | 
38b68                 | '------------------------------------------------------------------------------
38b68                 | ' Initialize the keyboard/mouse data area to start-up values.
38b68                 | '------------------------------------------------------------------------------
38b68                 | ' On entry:
38b68                 | ' On exit:
38b68                 | '------------------------------------------------------------------------------
38b68                 | init_kbdm_data
38b68     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38b6c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38b70                 | 
38b70     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38b74     2B ED 03 F6 |                 mov     pa, cache_end_p
38b78                 | .loop
38b78     61 01 4C FC |                 wrbyte  #0, ptra++
38b7c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38b80     F4 FF 9F CD |         if_b    jmp     #.loop
38b84                 |         
38b84                 |         if EMUPAD_MAX_PLAYER > 0
38b84                 |         end
38b84                 | 
38b84                 | 
38b84     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38b88                 | .regloop
38b88     00 EC 8F F9 |                 altd    pa
38b8c     00 00 04 F6 |                 mov     0-0, #0
38b90     01 EC 07 F1 |                 add     pa, #1
38b94     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38b98     EC FF 9F 5D |         if_nz   jmp     #.regloop
38b9c                 | 
38b9c     E1 E1 61 FF 
38ba0     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38ba4     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38ba8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38bac     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38bb0                 | 
38bb0     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38bb4                 | 
38bb4                 | '------------------------------------------------------------------------------
38bb4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38bb4                 | ' function.
38bb4                 | '------------------------------------------------------------------------------
38bb4                 | ' On entry:
38bb4                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38bb4                 | '   hpar2 - index number of the target interface.
38bb4                 | ' On exit:
38bb4                 | '------------------------------------------------------------------------------
38bb4                 | hset_idle
38bb4     A8 99 02 F6 |                 mov     hctwait, _2ms_
38bb8     EF 02 A0 FD |                 call    #poll_waitx
38bbc     D8 0A D0 FE |                 loc     ptra, #set_idle
38bc0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38bc4     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38bc8     A0 02 80 FD |                 jmp     #control_write
38bcc                 | 
38bcc                 | '------------------------------------------------------------------------------
38bcc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38bcc                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38bcc                 | '------------------------------------------------------------------------------
38bcc                 | ' On entry:
38bcc                 | '   ep_addr_pid - device address and enpoint for the request.
38bcc                 | ' On exit:
38bcc                 | '   retval - transaction result.
38bcc                 | '------------------------------------------------------------------------------
38bcc                 | hset_kbdled_report
38bcc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38bd0     CC 0A D0 FE |                 loc     ptra, #set_report
38bd4     01 00 80 FF 
38bd8     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38bdc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38be0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38be4     27 EF 03 F6 |                 mov     pb, urx_buff_p
38be8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38bec     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38bf0                 | 
38bf0                 | '------------------------------------------------------------------------------
38bf0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38bf0                 | '------------------------------------------------------------------------------
38bf0                 | ' On entry:
38bf0                 | ' On exit:
38bf0                 | '------------------------------------------------------------------------------
38bf0                 | hget_kbd_in_report
38bf0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38bf4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38bf8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38bfc     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38c00     CF 02 A0 FD |                 call    #do_int_in
38c04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c08     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38c0c                 | 
38c0c     00 90 0F F2 |                 cmp     hpar3, #0               wz
38c10     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38c14                 | 
38c14     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38c18     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38c1c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38c20     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38c24                 | 
38c24     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38c28     18 00 B0 FD |                 call    #hkbd_compare
38c2c                 |         if EMUPAD_MAX_PLAYER > 0
38c2c                 |         end
38c2c                 | 
38c2c                 | .led_check
38c2c     3B 71 03 F6 |                 mov     htmp, kb_led_states
38c30     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38c34     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38c38     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38c3c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38c40     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38c44                 | 
38c44                 | '------------------------------------------------------------------------------
38c44                 | ' Compare current and previous keyboard data buffers for keypress changes.
38c44                 | '------------------------------------------------------------------------------
38c44                 | hkbd_compare
38c44     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38c48     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38c4c     61 73 07 FB |                 rdlong  htmp1, ptra++
38c50     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38c54     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38c58     61 73 07 FB |                 rdlong  htmp1, ptra++
38c5c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38c60     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38c64     2D 00 64 AD |         if_z    ret
38c68                 | 
38c68     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38c6c                 | 
38c6c                 |                 ' Handle modifiers
38c6c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38c70     00 87 C7 FA |                 rdbyte  hr1, ptra
38c74     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38c78     63 86 63 FD |                 mergew  hr1
38c7c     08 EC 07 F6 |                 mov     pa,#8
38c80                 | .modloop
38c80     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38c84     E8 8C 07 F6 |                 mov     hpar1,#$E8
38c88     F6 8D 83 F1 |                 sub     hpar1,pa
38c8c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38c90     FB ED 6F FB |                 djnz    pa,#.modloop
38c94                 | 
38c94     6F E0 75 FD | .release        modc    _set    wc
38c98                 |                 'alts    hdev_port, #hid_report_p
38c98                 |                 'mov     ptra, hid_report_p
38c98     02 F0 07 F1 |                 add     ptra, #2
38c9c     06 EC 07 F6 |                 mov     pa, #6
38ca0     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38ca4     20 00 90 AD |         if_z    jmp     #.rl3
38ca8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38cac     02 F2 07 F1 |                 add     ptrb, #2
38cb0     06 EE 07 F6 |                 mov     pb, #6
38cb4     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38cb8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38cbc     08 00 90 AD |         if_z    jmp     #.rl3
38cc0     FC EF 6F FB |                 djnz    pb, #.rl2
38cc4     68 00 B0 FD |                 call    #hkbd_translate
38cc8     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38ccc                 | 
38ccc     00 90 07 F6 |                 mov     hpar3, #0
38cd0     1F 90 27 F4 |                 bith    hpar3, #31
38cd4                 | 
38cd4     6F 00 74 FD | .press          modc    _clr    wc
38cd8     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38cdc     02 F0 07 F1 |                 add     ptra, #2
38ce0     06 EC 07 F6 |                 mov     pa, #6
38ce4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38ce8     20 00 90 AD |         if_z    jmp     #.pl3
38cec     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38cf0     02 F2 07 F1 |                 add     ptrb, #2
38cf4     06 EE 07 F6 |                 mov     pb, #6
38cf8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38cfc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38d00     08 00 90 AD |         if_z    jmp     #.pl3
38d04     FC EF 6F FB |                 djnz    pb, #.pl2
38d08     24 00 B0 FD |                 call    #hkbd_translate
38d0c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38d10                 | 
38d10     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38d14     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38d18     28 02 64 FD |                 setq #1
38d1c     61 73 07 FB |                 rdlong  htmp1, ptra++
38d20     28 02 64 FD |                 setq #1
38d24     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38d28     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38d2c                 | 
38d2c     2D 00 64 FD |                 ret
38d30                 | 
38d30                 | '------------------------------------------------------------------------------
38d30                 | ' Translate keyboard scancode to ASCII
38d30                 | '------------------------------------------------------------------------------
38d30                 | ' On entry:
38d30                 | '   hpar1 - scancode
38d30                 | '   hpar2 - key modifiers state
38d30                 | '       c - pressed (0) or released (1) flag
38d30                 | ' On exit:
38d30                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38d30                 | '               30..17 = unused
38d30                 | '                   18 = scroll-lock state 
38d30                 | '                   17 = caps-lock state
38d30                 | '                   16 = num-lock state 
38d30                 | '                15..8 = key modifiers state
38d30                 | '                 7..0 = scancode
38d30                 | '------------------------------------------------------------------------------
38d30                 | hkbd_translate
38d30     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38d34     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38d38     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38d3c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38d40     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38d44     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38d48                 | 
38d48                 |         if EMUPAD_MAX_PLAYER > 0
38d48                 | 
38d48                 |         if EMUPAD_BT0_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT1_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT2_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT3_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT4_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT5_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT6_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT7_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT8_BIT >= 0
38d48                 |         end
38d48                 |         if EMUPAD_BT9_BIT >= 0
38d48                 |         end
38d48                 | 
38d48                 |         end
38d48     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38d4c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38d50     1F 8C 47 F4 |                 bitc    hpar1, #31
38d54                 |         if KEYQUEUE_SIZE > 0
38d54     C4 09 B0 FE |                 loc pb,#keyq_head
38d58     F7 71 E3 FA |                 rdword htmp,pb
38d5c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38d60     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38d64     B8 75 03 F6 |                 mov htmp2,htmp
38d68     04 74 07 FA |                 mul htmp2,#4
38d6c     F7 75 03 F1 |                 add htmp2,pb
38d70     02 74 07 F1 |                 add htmp2,#2
38d74     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38d78     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38d7c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38d80     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38d84                 |         end
38d84     2D 00 7C FD |                 ret wcz
38d88                 | 
38d88                 | if HAVE_MOUSE
38d88                 | '------------------------------------------------------------------------------
38d88                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38d88                 | '------------------------------------------------------------------------------
38d88                 | ' On entry:
38d88                 | ' On exit:
38d88                 | '------------------------------------------------------------------------------
38d88                 | hget_mouse_in_report
38d88     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38d8c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38d90     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38d94     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38d98     CF 02 A0 FD |                 call    #do_int_in
38d9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38da0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38da4                 | 
38da4     00 90 0F F2 |                 cmp     hpar3, #0               wz
38da8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38dac                 | 
38dac     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38db0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38db4     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38db8     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38dbc                 | 
38dbc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38dc0     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38dc4     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38dc8     01 90 87 31 |         if_ae   sub     hpar3, #1
38dcc                 | 
38dcc     40 09 90 FE |                 loc     pa, #mouse_limits
38dd0     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38dd4                 | 
38dd4                 |                 ' load xacc,yacc,zacc
38dd4     28 04 64 FD |                 setq    #3-1
38dd8     80 87 07 FB |                 rdlong  hr1,ptrb
38ddc                 |                 ' load limits and outptr
38ddc     28 04 64 FD |                 setq    #3-1
38de0     F6 73 03 FB |                 rdlong  htmp1,pa
38de4                 | 
38de4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38de8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38dec     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38df0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38df4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38df8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38dfc     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38e00     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38e04                 |               
38e04                 | 
38e04     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38e08     07 70 67 F7 |                 signx   htmp, #7
38e0c     B8 87 03 F1 |                 add     hr1,htmp
38e10     00 72 0F F2 |                 cmp     htmp1,#0 wz
38e14     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38e18     00 86 47 53 |         if_ne   fges    hr1,#0
38e1c                 | 
38e1c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38e20     07 70 67 F7 |                 signx   htmp, #7
38e24     B8 89 03 F1 |                 add     hr2,htmp
38e28     00 74 0F F2 |                 cmp     htmp2,#0 wz
38e2c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38e30     00 88 47 53 |         if_ne   fges    hr2,#0
38e34                 |                 
38e34                 | 
38e34     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38e38     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38e3c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38e40     B8 8B 03 A1 |         if_z    add     hr3,htmp
38e44                 | 
38e44     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38e48     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38e4c                 | 
38e4c                 |                 ' write back accumulators
38e4c     28 04 64 FD |                 setq    #3-1
38e50     80 87 67 FC |                 wrlong  hr1,ptrb
38e54                 |                 ' if outptr set, write X/Y words
38e54     00 76 0F F2 |                 cmp htmp3,#0                    wz
38e58     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38e5c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38e60     2D 00 64 FD |                 ret
38e64                 | end
38e64                 | 
38e64                 | '------------------------------------------------------------------------------
38e64                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38e64                 | '------------------------------------------------------------------------------
38e64                 | ' On entry:
38e64                 | ' On exit:
38e64                 | '------------------------------------------------------------------------------
38e64                 | if _HAVE_GAMEPAD
38e64                 | hget_gp_in_report
38e64     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38e68     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38e6c                 | 
38e6c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38e70     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38e74     00 90 E3 F8 |                 getbyte hpar3
38e78     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38e7c     CF 02 A0 FD |                 call    #do_int_in
38e80     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e84     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38e88                 | 
38e88     00 90 0F F2 |                 cmp     hpar3, #0               wz
38e8c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38e90                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
38e90                 | 
38e90     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
38e94     00 70 E3 F8 |                 getbyte htmp                            ' |
38e98     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38e9c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
38ea0     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
38ea4     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
38ea8     B8 01 C0 F8 |                 setbyte htmp                            ' |
38eac                 | 
38eac                 | ' Note: the following code compares the current and previous reports
38eac                 | ' and process the data if there are changes to ease the debug output.
38eac                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
38eac                 | ' gpPreReport buffer.
38eac                 | 
38eac                 |                 ' ----- start of block to remove
38eac                 |                 {
38eac                 |                 }
38eac                 |                 ' ----- end of block to remove
38eac     F4 04 90 FE |                 loc pa,#hpad_translate
38eb0     2A EC 63 FD |                 push pa
38eb4                 | 
38eb4                 |                 ' FALL THROUGH !!!!
38eb4                 | 
38eb4                 | '------------------------------------------------------------------------------
38eb4                 | ' Decode controller report
38eb4                 | '------------------------------------------------------------------------------
38eb4                 | hid_decode
38eb4                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
38eb4     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
38eb8     00 04 00 FF 
38ebc     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
38ec0                 | 
38ec0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38ec4                 | 
38ec4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38ec8     00 2A E3 F8 |                 getbyte hidr_type
38ecc     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
38ed0     34 02 90 AD |         if_z    jmp     #hpad_xinput
38ed4     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
38ed8     1C 03 90 AD |         if_z    jmp     #hpad_ps3
38edc     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
38ee0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
38ee4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
38ee8                 |                 
38ee8                 | 
38ee8                 | '------------------------------------------------------------------------------
38ee8                 | ' Handle HID controller (or mouse now
38ee8                 | ' On entry:
38ee8                 | '   ptrb - controller report
38ee8                 | '------------------------------------------------------------------------------
38ee8                 | hpad_hid
38ee8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38eec     F7 F1 03 F6 |                 mov     ptra, pb
38ef0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
38ef4     00 EC 03 F6 |                 mov     pa, 0-0
38ef8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
38ef8     19 2A 3B FF 
38efc     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
38f00                 | 
38f00                 | .next
38f00     00 EC 5F F2 |                 cmps    pa, #0      wcz
38f04     2D 00 7C ED |         if_be   ret     wcz
38f08                 | 
38f08     61 8D C7 FA |                 rdbyte  hpar1, ptra++
38f0c     01 EC 87 F1 |                 sub     pa, #1
38f10     00 8E 07 F6 |                 mov     hpar2, #0
38f14                 | 
38f14     C6 71 03 F6 |                 mov     htmp, hpar1
38f18     03 70 07 F5 |                 and     htmp, #$03
38f1c     01 70 0F F2 |                 cmp     htmp, #1    wz
38f20     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
38f24     07 8E 67 A7 |         if_z    signx   hpar2,#7
38f28     01 EC 87 A1 |         if_z    sub     pa, #1
38f2c     02 70 0F F2 |                 cmp     htmp, #2    wz
38f30     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
38f34     0F 8E 67 A7 |         if_z    signx   hpar2,#15
38f38     02 EC 87 A1 |         if_z    sub     pa, #2
38f3c     03 70 0F F2 |                 cmp     htmp, #3    wz
38f40     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
38f44     04 EC 87 A1 |         if_z    sub     pa, #4
38f48                 | 
38f48     FC 8C 07 F5 |                 and     hpar1, #$FC
38f4c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
38f4c                 | 
38f4c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
38f50     0C 01 90 AD |         if_z    jmp     #.report_id
38f54     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
38f58     24 01 90 AD |         if_z    jmp     #.usage_page
38f5c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
38f60     2C 01 90 AD |         if_z    jmp     #.usage
38f64     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
38f68     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
38f6c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
38f70     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
38f74     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
38f78     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
38f7c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
38f80     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
38f84     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
38f88     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
38f8c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
38f90     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
38f94     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
38f98     64 FF 9F 5D |         if_nz   jmp     #.next
38f9c                 | 
38f9c     D8 1D A7 FB |                 tjf     hidr_state,#.next
38fa0                 | 
38fa0     03 8E 07 F5 |                 and     hpar2, #$03
38fa4     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
38fa8     18 00 90 5D |         if_nz   jmp     #.skip
38fac                 | 
38fac     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
38fb0     20 00 90 AD |         if_z    jmp     #.axes
38fb4     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
38fb8     5C 00 90 AD |         if_z    jmp     #.hats
38fbc     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
38fc0     70 00 90 AD |         if_z    jmp     #.buttons
38fc4                 | .skip
38fc4     8F 71 03 F6 |                 mov     htmp, hidr_size
38fc8     90 71 03 FA |                 mul     htmp, hidr_count
38fcc     B8 23 03 F1 |                 add     hidr_offset, htmp
38fd0     2C FF 9F FD |                 jmp     #.next
38fd4                 | .axes
38fd4                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
38fd4     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
38fd8     90 87 03 F6 |                 mov     hr1, hidr_count
38fdc                 | .l1
38fdc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
38fe0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
38fe4     04 03 B0 FD |                 call    #hpad_getbits
38fe8     64 03 B0 FD |                 call    #hpad_normalize
38fec     06 84 1F F2 |                 cmp     hr0, #6         wcz
38ff0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
38ff4     00 88 43 C8 |         if_b    getnib  hr2
38ff8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
38ffc     5F 01 20 C9 |         if_b    setword retval
39000     01 84 07 C1 |         if_b    add     hr0, #1
39004     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39008     F4 87 6F FB |                 djnz    hr1, #.l1
3900c                 | 
3900c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
39010     01 1C 07 F6 |                 mov     hidr_state, #1
39014     E8 FE 9F FD |                 jmp     #.next
39018                 | .hats
39018                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39018     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3901c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39020     C8 02 B0 FD |                 call    #hpad_getbits
39024     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39028     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3902c     01 1C 07 F6 |                 mov     hidr_state, #1
39030     90 FF 9F FD |                 jmp     #.skip
39034                 | .buttons
39034                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39034     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39038     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3903c     90 8F 03 FA |                 mul     hpar2, hidr_count
39040     A8 02 B0 FD |                 call    #hpad_getbits
39044     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39048     B8 BF 62 F0 |                 shl     retval, htmp
3904c     5F 17 43 F5 |                 or      hidr_buttons, retval
39050     90 71 03 F1 |                 add     htmp, hidr_count
39054     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39058     01 1C 07 F6 |                 mov     hidr_state, #1
3905c     64 FF 9F FD |                 jmp     #.skip
39060                 | .report_id
39060     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
39064     2D 00 7C 5D |         if_nz   ret     wcz
39068     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3906c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
39070     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
39074     01 1C 67 56 |         if_nz   neg     hidr_state,#1
39078     01 F2 87 51 |         if_nz   sub     ptrb,#1
3907c     80 FE 9F FD |                 jmp     #.next
39080                 | .usage_page
39080     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
39084     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39088     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3908c     70 FE 9F FD |                 jmp     #.next
39090                 | .usage
39090     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
39094     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
39098     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3909c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
390a0     5C FE 9F AD |         if_z    jmp     #.next
390a4     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
390a8     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
390ac     01 1C 07 A6 |         if_z    mov     hidr_state, #1
390b0     4C FE 9F AD |         if_z    jmp     #.next
390b4     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
390b8     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
390bc     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
390c0     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
390c4     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
390c8     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
390cc     10 00 90 AD |         if_z    jmp     #.usage_axis
390d0     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
390d4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
390d8     03 1C 07 A6 |         if_z    mov     hidr_state, #3
390dc     20 FE 9F FD |                 jmp     #.next
390e0                 | .usage_axis
390e0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
390e4     18 FE 9F CD |         if_b    jmp     #.next
390e8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
390ec     C7 01 00 F8 |                 setnib  hpar2
390f0                 | 
390f0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
390f4     C7 8F C3 F9 |                 decod   hpar2
390f8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
390fc                 | 
390fc     01 24 07 F1 |                 add     hidr_usage_idx, #1
39100     02 1C 07 F6 |                 mov     hidr_state, #2
39104     F8 FD 9F FD |                 jmp     #.next
39108                 | 
39108                 | '------------------------------------------------------------------------------
39108                 | ' Handle XInput controller
39108                 | ' On entry:
39108                 | '   ptrb - controller report
39108                 | '------------------------------------------------------------------------------
39108                 | '   Default implementation translates the report to a pseudo-defacto hid
39108                 | '   standard and jumps to hpad_translate for actions.
39108                 | '   Implementors may take specific actions for this kind of controller.
39108                 | '------------------------------------------------------------------------------
39108                 | hpad_xinput
39108     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3910c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
39110     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39114     14 70 0F F2 |                 cmp     htmp, #$14      wz
39118     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3911c                 | 
3911c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3911c                 | 
3911c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
39120     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39124                 | 
39124     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39128     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3912c     5F BF 22 F6 |                 not     retval
39130     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39134     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39138     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3913c     5F BF 22 F6 |                 not     retval
39140     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39144                 | 
39144     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39148     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3914c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39150     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
39154     F8 01 B0 FD |                 call    #hpad_normalize
39158     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3915c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
39160     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39164     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39168     E4 01 B0 FD |                 call    #hpad_normalize
3916c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
39170                 | 
39170     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39174     81 BF E6 FA |                 rdword  retval, ptrb[1]
39178     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3917c     00 16 47 F4 |                 bitc    hidr_buttons, #0
39180     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39184     01 16 47 F4 |                 bitc    hidr_buttons, #1
39188     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3918c     02 16 47 F4 |                 bitc    hidr_buttons, #2
39190     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39194     03 16 47 F4 |                 bitc    hidr_buttons, #3
39198     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3919c     04 16 47 F4 |                 bitc    hidr_buttons, #4
391a0     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
391a4     05 16 47 F4 |                 bitc    hidr_buttons, #5
391a8     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
391ac     08 16 47 F4 |                 bitc    hidr_buttons, #8
391b0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
391b4     09 16 47 F4 |                 bitc    hidr_buttons, #9
391b8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
391bc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
391c0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
391c4     0B 16 47 F4 |                 bitc    hidr_buttons, #11
391c8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
391cc     0C 16 47 F4 |                 bitc    hidr_buttons, #12
391d0                 | 
391d0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
391d4     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
391d8     7A BB 7A FF 
391dc     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
391e0     F9 FF 7F FF 
391e4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
391e8     B9 71 5F F9 |                 altgn   htmp, #htmp1
391ec     00 70 43 F8 |                 getnib  htmp
391f0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
391f4                 | 
391f4     AC 01 90 FD |                 jmp     #hpad_translate
391f8                 | 
391f8                 | '------------------------------------------------------------------------------
391f8                 | ' Handle PS3 controller
391f8                 | ' On entry:
391f8                 | '   ptrb - controller report
391f8                 | '------------------------------------------------------------------------------
391f8                 | '   Default implementation translates the report to a pseudo-defacto hid
391f8                 | '   standard and jumps to hpad_translate for actions.
391f8                 | '   Implementors may take specific actions for this kind of controller.
391f8                 | '------------------------------------------------------------------------------
391f8                 | hpad_ps3
391f8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
391fc     01 70 0F F2 |                 cmp     htmp, #$01      wz
39200     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39204                 | 
39204                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39204                 | 
39204     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39208     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3920c     40 01 B0 FD |                 call    #hpad_normalize
39210     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39214     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39218     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3921c     30 01 B0 FD |                 call    #hpad_normalize
39220     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39224     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39228     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3922c     20 01 B0 FD |                 call    #hpad_normalize
39230     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39234     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39238     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3923c     10 01 B0 FD |                 call    #hpad_normalize
39240     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39244     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39248     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3924c                 | 
3924c     08 8C 07 F6 |                 mov     hpar1, #8
39250     13 8E 07 F6 |                 mov     hpar2, #19
39254     94 00 B0 FD |                 call    #hpad_getbits
39258                 | 
39258     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3925c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39260     00 16 47 F4 |                 bitc    hidr_buttons, #0
39264     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39268     01 16 47 F4 |                 bitc    hidr_buttons, #1
3926c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39270     02 16 47 F4 |                 bitc    hidr_buttons, #2
39274     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39278     03 16 47 F4 |                 bitc    hidr_buttons, #3
3927c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
39280     04 16 47 F4 |                 bitc    hidr_buttons, #4
39284     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39288     05 16 47 F4 |                 bitc    hidr_buttons, #5
3928c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
39290     06 16 47 F4 |                 bitc    hidr_buttons, #6
39294     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
39298     07 16 47 F4 |                 bitc    hidr_buttons, #7
3929c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
392a0     08 16 47 F4 |                 bitc    hidr_buttons, #8
392a4     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
392a8     09 16 47 F4 |                 bitc    hidr_buttons, #9
392ac     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
392b0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
392b4     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
392b8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
392bc     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
392c0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
392c4                 | 
392c4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
392c8     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
392cc     09 FA 79 FF 
392d0     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
392d4     FF FA 7F FF 
392d8     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
392dc     B9 71 5F F9 |                 altgn   htmp, #htmp1
392e0     00 70 43 F8 |                 getnib  htmp
392e4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
392e8                 | 
392e8     B8 00 90 FD |                 jmp     #hpad_translate
392ec                 | 
392ec                 | '------------------------------------------------------------------------------
392ec                 | ' Read bits from report data buffer
392ec                 | '------------------------------------------------------------------------------
392ec                 | ' On entry:
392ec                 | '   PTRB - report buffer
392ec                 | '   hpar1 - start bit
392ec                 | '   hpar2 - number of bits
392ec                 | ' On exit:
392ec                 | '   retval - bits
392ec                 | '------------------------------------------------------------------------------
392ec                 | hpad_getbits
392ec     C6 71 03 F6 |                 mov     htmp, hpar1
392f0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
392f4     F9 71 03 F1 |                 add     htmp, ptrb
392f8     B8 BF 02 FB |                 rdlong  retval, htmp
392fc                 | 
392fc     C6 73 03 F6 |                 mov     htmp1, hpar1
39300     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39304     B9 BF 42 F0 |                 shr     retval, htmp1
39308                 | 
39308     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3930c     10 00 90 1D |         if_a    jmp     #.l1
39310                 | 
39310     C7 8F C3 F9 |                 decod   hpar2
39314     01 8E 87 F1 |                 sub     hpar2, #1
39318     C7 BF 02 F5 |                 and     retval, hpar2
3931c     2D 00 64 FD |                 ret
39320                 | .l1
39320     FF 7F 00 FF 
39324     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39328     03 70 07 F1 |                 add     htmp, #3
3932c     B8 75 03 FB |                 rdlong  htmp2, htmp
39330     18 8E 87 F1 |                 sub     hpar2, #24
39334     C7 8F C3 F9 |                 decod   hpar2
39338     01 8E 87 F1 |                 sub     hpar2, #1
3933c     B9 75 43 F0 |                 shr     htmp2, htmp1
39340     C7 75 03 F5 |                 and     htmp2, hpar2
39344     18 74 67 F0 |                 shl     htmp2, #24
39348     BA BF 42 F5 |                 or      retval, htmp2
3934c     2D 00 64 FD |                 ret
39350                 | 
39350                 | '------------------------------------------------------------------------------
39350                 | ' Normalize value to signed word (-32768 / 32767)
39350                 | '------------------------------------------------------------------------------
39350                 | ' On entry:
39350                 | '   retval - value to normalize
39350                 | '   hidr_lminmax - min (word 1) max (word 0) value range
39350                 | '   - or -
39350                 | '   hidr_pminmax - min (word 1) max (word 0) value range
39350                 | '   hidr_size - value bits length
39350                 | ' On exit:
39350                 | '   retval - normalized value
39350                 | '------------------------------------------------------------------------------
39350                 | hpad_normalize
39350     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
39354     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
39358     2D 00 64 AD |         if_z    ret
3935c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
39360     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
39364     0F 72 77 F7 |                 signx   htmp1, #15      wc
39368     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3936c     00 BE 66 C7 |         if_c    signx   retval, #0-0
39370     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
39374     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
39378     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3937c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
39380     B8 71 53 F6 |                 abs     htmp            wc
39384     1F BE 0E F4 |                 testb   retval, #31     wz
39388     5F BF 42 F6 |                 abs     retval
3938c     B8 BF 12 FD |                 qdiv    retval, htmp
39390     18 BE 62 FD |                 getqx   retval
39394     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
39398     C0 FF 7F FF 
3939c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
393a0     2D 00 64 FD |                 ret
393a4                 | 
393a4                 | '------------------------------------------------------------------------------
393a4                 | ' Perform controller actions
393a4                 | ' On entry:
393a4                 | '    hidr_id        report id
393a4                 | '    hidr_axis      axis value (signed word, 2 axes per long)
393a4                 | '                      X = hidr_axis+0, #0
393a4                 | '                      Y = hidr_axis+0, #1
393a4                 | '                      Z = hidr_axis+1, #0
393a4                 | '                     RX = hidr_axis+1, #1
393a4                 | '                     RY = hidr_axis+2, #0
393a4                 | '                     RZ = hidr_axis+2, #1
393a4                 | '    hidr_buttons   buttons state (bits 0 to 31)
393a4                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
393a4                 | '
393a4                 | '                     -------3 -------2 -------1 -------0 byte
393a4                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
393a4                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
393a4                 | '                                zyx||| |||||||| ++++++++ n. buttons
393a4                 | '                                |||||| ||||++++--------- n. axes
393a4                 | '                                |||||| ++++------------- n. hats
393a4                 | '                                ++++++------------------ valid axes
393a4                 | '------------------------------------------------------------------------------
393a4                 | hpad_translate
393a4                 | 
393a4                 | 
393a4                 |         if HAVE_HIDPAD
393a4     84 0C F0 FE |                 loc     ptrb,#hidpad_report
393a8     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
393ac     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
393b0     01 70 E7 F2 |                 cmpsub  htmp,#1
393b4     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
393b8     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
393bc     2D 00 7C 3D |         if_ae   ret     wcz
393c0     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
393c4     B8 F3 03 F1 |                 add     ptrb,htmp
393c8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
393cc     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
393d0     28 0C 64 FD |                 setq    #7-1
393d4     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
393d8                 |         end
393d8                 | 
393d8                 | 
393d8                 |         if EMUPAD_MAX_PLAYER > 0
393d8                 | .emupad_no_hat
393d8                 |         if EMUPAD_BT0_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT1_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT2_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT3_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT4_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT5_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT6_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT7_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT8_BIT >= 0
393d8                 |         end
393d8                 |         if EMUPAD_BT9_BIT >= 0
393d8                 |         end
393d8                 | .emupad_slot_over
393d8                 |         end
393d8                 | 
393d8                 |         if 0
393d8                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
393d8                 | 
393d8                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
393d8                 | 
393d8                 |         end
393d8     2D 00 64 FD |                 ret
393dc                 | end
393dc                 | 
393dc                 | if EMUPAD_MAX_PLAYER > 0
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' Clear EmuPad state
393dc                 | '------------------------------------------------------------------------------
393dc                 | emupad_reset
393dc                 | 
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' Get EmuPad Player number for current device (into retval)
393dc                 | ' Z flag is also set if current device is valid
393dc                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
393dc                 | '------------------------------------------------------------------------------
393dc                 | emupad_getnum
393dc                 | .loop
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
393dc                 | '------------------------------------------------------------------------------
393dc                 | emupad_discon
393dc                 | .loop         
393dc                 |         
393dc                 |         ' FALL THROUGH!!!
393dc                 | 
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' Update EmuPad reports (all of them...)
393dc                 | '------------------------------------------------------------------------------
393dc                 | emupad_write_reports
393dc                 | .devloop
393dc                 | 
393dc                 | end
393dc                 | 
393dc                 | 
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
393dc                 | '------------------------------------------------------------------------------
393dc                 | ' On entry:
393dc                 | ' On exit:
393dc                 | '------------------------------------------------------------------------------
393dc                 | hget_hub_status
393dc     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
393e0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
393e4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
393e8     01 90 2F F9 |                 setword hpar3, #1, #1
393ec     CF 02 A0 FD |                 call    #do_int_in
393f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
393f4     0C 00 90 AD |         if_z    jmp     #.data
393f8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
393fc     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
39400     2D 00 64 FD |                 ret
39404                 | .data
39404     00 90 0F F2 |                 cmp     hpar3, #0               wz
39408     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3940c                 | 
3940c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
39410     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39414     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39418     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3941c                 |                 debug(ubin_long(hub_status_chg))
3941c                 | 
3941c     01 5A 06 F6 |                 mov     hdev_port, #1
39420                 | .loop
39420     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39424     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39428     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3942c     F0 FF 9F 3D |         if_nc   jmp     #.loop
39430     2D 00 64 FD |                 ret
39434                 | 
39434                 | hub_port_handler
39434     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39438     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3943c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39440     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39444     55 02 A0 FD |                 call    #control_read
39448     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3944c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3944c                 | 
3944c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
39450     50 01 90 5D |         if_x0   jmp     #.other
39454     68 02 D0 FE |                 loc     ptra, #clr_port_feat
39458     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3945c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39460     A0 02 A0 FD |                 call    #control_write
39464     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
39468     7C 01 90 5D |         if_x0   jmp     #.disconnect
3946c     B0 99 02 F6 |                 mov     hctwait, _100ms_
39470     EF 02 A0 FD |                 call    #poll_waitx
39474                 | 
39474     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
39478     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3947c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39480     A0 02 A0 FD |                 call    #control_write
39484                 | 
39484     02 76 07 F6 |                 mov     htmp3, #2
39488                 | .wait_reset
39488     AC 99 02 F6 |                 mov     hctwait, _8ms_
3948c     EF 02 A0 FD |                 call    #poll_waitx
39490     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39494     27 EF 03 F6 |                 mov     pb, urx_buff_p
39498     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3949c     55 02 A0 FD |                 call    #control_read
394a0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
394a4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
394a8     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
394ac                 | 
394ac     10 02 D0 FE |                 loc     ptra, #clr_port_feat
394b0     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
394b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394b8     A0 02 A0 FD |                 call    #control_write
394bc                 | 
394bc     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
394c0                 | .wait_recover
394c0     A7 99 02 F6 |                 mov     hctwait, _1ms_
394c4     EF 02 A0 FD |                 call    #poll_waitx
394c8     FD 71 6F FB |                 djnz    htmp,#.wait_recover
394cc                 | 
394cc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
394d0     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
394d4     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
394d8                 | 
394d8     00 08 00 FF 
394dc     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
394e0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
394e4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
394e8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
394ec     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
394f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
394f4     48 01 90 5D |         if_nz   jmp     #.done
394f8                 | .get_dev_desc
394f8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
394fc     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
39500     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39504     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39508     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3950c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
39510     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39514     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39518     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3951c     AC 99 02 F6 |                 mov     hctwait, _8ms_
39520     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39524     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39528     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3952c     BE 00 A0 FD |                 call    #calc_crc5
39530     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39534     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39538     F7 AD C2 FA |                 rdbyte  total_data, pb
3953c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
39540     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39544     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39548     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3954c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
39550     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
39554                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
39554     9F 99 02 F6 |                 mov     hctwait, _500us_
39558     EF 02 A0 FD |                 call    #poll_waitx
3955c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
39560     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
39564     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39568     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3956c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39570     CC 00 90 5D |         if_nz   jmp     #.done
39574     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
39578     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3957c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
39580     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39584     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39588     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3958c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39590     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39594     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39598     A4 00 90 CD |         if_b    jmp     #.done
3959c     6C F0 BF FD |                 call    #hparse_con_desc
395a0     9C 00 90 FD |                 jmp     #.done
395a4                 | 
395a4                 | .other
395a4     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
395a8     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
395ac     28 00 90 AD |         if_x1   jmp     #.reset_feature
395b0     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
395b4     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
395b8     1C 00 90 AD |         if_x1   jmp     #.reset_feature
395bc     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
395c0     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
395c4     10 00 90 AD |         if_x1   jmp     #.reset_feature
395c8     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
395cc     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
395d0     04 00 90 AD |         if_x1   jmp     #.reset_feature
395d4     68 00 90 FD |                 jmp     #.done
395d8                 | .reset_feature
395d8     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
395dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395e0     A0 02 A0 FD |                 call    #control_write
395e4     58 00 90 FD |                 jmp     #.done
395e8                 | .disconnect
395e8                 | 
395e8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
395ec     00 70 E3 F8 |                 getbyte htmp
395f0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
395f4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
395f8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
395fc     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
39600     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39604     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39608                 |         if EMUPAD_MAX_PLAYER > 0
39608                 |         end
39608                 |         if HAVE_MOUSE
39608     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3960c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
39610     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39614                 |         end
39614                 |         if HAVE_HIDPAD
39614     14 0A F0 FE |                 loc ptrb,#hidpad_report
39618     2D 71 03 F6 |                 mov htmp,hdev_port
3961c     01 70 E7 F2 |                 cmpsub htmp,#1
39620     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39624     B8 F3 03 F1 |                 add ptrb,htmp
39628     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3962c     80 01 6C FC |                 wrlong #0,ptrb
39630                 |         end
39630                 | 
39630     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39634     00 00 C4 F8 |                 setbyte #0
39638     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3963c     00 00 04 F6 |                 mov     0-0, #0
39640                 | 
39640                 | .done
39640     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39644     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39648     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3964c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
39650     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39654     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39658                 | 
39658     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3965c     27 EF 03 F6 |                 mov     pb, urx_buff_p
39660     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39664     55 02 A0 FD |                 call    #control_read
39668     00 69 06 FB |                 rdlong  hub_port_status, ptra
3966c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3966c     2D 00 64 FD |                 ret
39670                 | 
39670                 | '------------------------------------------------------------------------------
39670                 | ' Partially populated SETUP packets
39670                 | '------------------------------------------------------------------------------
39670     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39671     06          |                 byte    REQ_GET_DESC
39672     00 01       |                 word    TYPE_DEVICE << 8
39674     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39676     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39678     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39679     06          |                 byte    REQ_GET_DESC
3967a     00 02       |                 word    TYPE_CONFIG << 8
3967c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3967e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39680     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39681     09          |                 byte    REQ_SET_CONFIG
39682     00 00       |                 word    0       ' Configuration value
39684     00 00       |                 word    0       ' Zero
39686     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39688     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39689     05          |                 byte    REQ_SET_ADDR
3968a     00 00       |                 word    0       ' Zero
3968c     00 00       |                 word    0       ' Zero
3968e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
39690                 | '------------------------------------------------------------------------------
39690                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
39690                 | ' wValue field dictates which protocol should be used.
39690                 | '
39690                 | ' When initialized, all devices default to report protocol. However the host
39690                 | ' should not make any assumptions about the device state and should set the
39690                 | ' desired protocol whenever initializing a device.
39690                 | '------------------------------------------------------------------------------
39690     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39691     0B          |                 byte    HID_SET_PROTO
39692     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
39694                 |                                                 ' (HID 1.11 Section 7.2.6).
39694     00 00       |                 word    0               ' Interface index number.
39696     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39698                 | '------------------------------------------------------------------------------
39698     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39699     0A          |                 byte    HID_SET_IDLE
3969a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3969c                 |                                         ' reporting until a change is detected in the report data
3969c                 | 
3969c                 |                                         ' (HID 1.11 Section 7.2.4).
3969c     00 00       |                 word    0       ' Interface index number.
3969e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
396a0     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
396a1     09          |                 byte    HID_SET_REPORT
396a2     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
396a4                 |                                         ' (HID 1.11 Section 7.2.2).
396a4     00 00       |                 word    0       ' Interface index number.
396a6     00 00       |                 word    0       ' Size of the report, in bytes.
396a8     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
396a9     06          |                 byte    REQ_GET_DESC
396aa     00 22       |                 word    TYPE_REPORT << 8
396ac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396b0                 | '------------------------------------------------------------------------------
396b0     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
396b1     06          |                 byte    REQ_GET_DESC
396b2     00 29       |                 word    TYPE_HUB << 8
396b4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396b8     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
396b9     03          |                 byte    REQ_SET_FEATURE
396ba     00 00       |                 word    0       ' port power
396bc     01 00       |                 word    1       ' Port index number (1+)
396be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396c0     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
396c1     01          |                 byte    REQ_CLEAR_FEATURE
396c2     00 00       |                 word    0       ' port power
396c4     01 00       |                 word    1       ' Port index number (1+)
396c6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396c8     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
396c9     00          |                 byte    REQ_GET_STATUS
396ca     00 00       |                 word    0
396cc     01 00       |                 word    1       ' Port index number (1+)
396ce     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
396d0                 | '------------------------------------------------------------------------------
396d0                 | if _HAVE_GAMEPAD
396d0     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
396d4                 | ps3_command_buff
396d4     00 00 00 00 
396d8     00          |                 byte    $00, $00, $00, $00, $00
396d9     00 00 00 00 
396dd     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
396de     FF 27 10 00 
396e2     32          |                 byte    $FF, $27, $10, $00, $32
396e3     FF 27 10 00 
396e7     32          |                 byte    $FF, $27, $10, $00, $32
396e8     FF 27 10 00 
396ec     32          |                 byte    $FF, $27, $10, $00, $32
396ed     FF 27 10 00 
396f1     32          |                 byte    $FF, $27, $10, $00, $32
396f2     00 00 00 00 
396f6     00          |                 byte    $00, $00, $00, $00, $00
396f7     00 00 00 00 
396fb     00          |                 byte    $00, $00, $00, $00, $00
396fc     00 00 00 00 
39700     00          |                 byte    $00, $00, $00, $00, $00
39701     00 00 00    |                 byte    $00, $00, $00
39704                 | '------------------------------------------------------------------------------
39704     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39707                 |                                         ' 0x01 All blinking
39707                 |                                         ' 0x02 1 flashes, then on
39707                 |                                         ' 0x03 2 flashes, then on
39707                 |                                         ' 0x04 3 flashes, then on
39707                 |                                         ' 0x05 4 flashes, then on
39707                 |                                         ' 0x06 1 on
39707                 |                                         ' 0x07 2 on
39707                 |                                         ' 0x08 3 on
39707                 |                                         ' 0x09 4 on
39707                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39707                 |                                         ' 0x0B Blinking*
39707                 |                                         ' 0x0C Slow blinking*
39707                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39707     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3970a     00          |                 byte    $00             ' Left rumble
3970b     00          |                 byte    $00             ' Right rumble
3970c     00 00 00    |                 byte    $00, $00, $00
3970f     00          | end
39710                 | alignl
39710                 | 
39710                 | if HAVE_MOUSE
39710     00 00 00 00 
39714     00 00 00 00 | mouse_limits long 0[2]
39718     00 00 00 00 | mouse_outptr long 0
3971c                 | end
3971c                 | 
3971c                 | if KEYQUEUE_SIZE > 0
3971c     00          | keyq_head byte 0
3971d     00          | keyq_tail byte 0
3971e     00 00 00 00 
      ...             
3991a     00 00 00 00 
3991e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39920                 | alignl
39920                 | end
39920                 | 
39920                 | if EMUPAD_MAX_PLAYER > 0
39920                 | emupad_rule_buffer
39920                 | if EMUPAD_BUILTIN_RULES
39920                 | file "padmap_builtin.dat"
39920                 | end
39920                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39920                 | '' Default rule directly follows!
39920                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39920                 | end
39920                 | 
39920                 | '------------------------------------------------------------------------------
39920                 | ' The USB data cache area gets zero-filled at every device disconnect
39920                 | '------------------------------------------------------------------------------
39920                 | usb_cache_start
39920                 | 
39920                 | ' HID descriptor and report buffers
39920                 | if !!OVERLAP_MEMORY
39920     00 00 00 00 
      ...             
3a018     00 00 00 00 
3a01c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a020                 | end
3a020     00 00 00 00 
3a024     00 00 00 00 | hkbd_report     byte    0[8]
3a028     00 00 00 00 | hkbd_led_rep    byte    0
3a02c                 | alignl
3a02c                 | 
3a02c                 | if HAVE_HIDPAD
3a02c     00 00 00 00 
      ...             
3a0e8     00 00 00 00 
3a0ec     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a0f0                 | end
3a0f0                 | 
3a0f0                 | ' HUB descriptor
3a0f0     00          | hub_descr       byte    0   ' bDescLength
3a0f1     00          |                 byte    0   ' bDescriptorType
3a0f2     00          |                 byte    0   ' bNbrPorts
3a0f3     00 00       |                 word    0   ' wHubCharacteristics
3a0f5     00          |                 byte    0   ' bPwrOn2PwrGood
3a0f6     00          |                 byte    0   ' bHubContrCurrent
3a0f7     00          |                 byte    0   ' DeviceRemoveable
3a0f8     00          |                 byte    0   ' PortPwrCtrlMask
3a0f9                 | 
3a0f9                 | usb_cache_end
3a0f9                 | 
3a0f9                 | if HAVE_MOUSE
3a0f9     00 00 00 00 | mouse_xacc      long 0
3a0fd     00 00 00 00 | mouse_yacc      long 0
3a101     00 00 00 00 | mouse_zacc      long 0
3a105     00          | mouse_bstate    byte 0
3a106     00          | mouse_lpending  byte 0
3a107     00          | mouse_rpending  byte 0
3a108     00          | mouse_mpending  byte 0
3a109     00          | mouse_lock      byte 0
3a10a     00 00 00    |                 byte 0[3] ' padding
3a10d                 | end
3a10d                 | 
3a10d     00 00 00 00 
      ...             
3a185     00 00 00 00 
3a189     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a18d     00 00 00 00 
3a191     00 00 00 00 
3a195     00 00 00 00 
3a199     00 00 00 00 
3a19d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a19f     00 00 00 00 
      ...             
3a297     00 00 00 00 
3a29b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a29f                 | 
3a29f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a2a0                 | 	alignl
3a2a0                 | _audio096_spin2_dat_
3a2a0                 | 
3a2a0                 | audio       org     0
3a2a0                 | 
3a2a0     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a2a4     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a2a8     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a2ac                 |  
3a2ac     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a2b0     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a2b4     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a2b8     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a2bc                 | 
3a2bc     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a2c0     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a2c4     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a2c8     0F 24 06 FC |             wrpin   dac2,#right
3a2cc     0F 00 1E FC |             wxpin   #256,#right    
3a2d0     41 9C 64 FD |             dirh    #left addpins 1
3a2d4     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a2d8     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a2dc     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a2e0                 |             
3a2e0                 | '---------------------------------------------------------------------------------        
3a2e0                 | '----------------- The main loop -------------------------------------------------
3a2e0                 | '---------------------------------------------------------------------------------
3a2e0                 | 
3a2e0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a2e4     10 00 90 CD |       if_c  jmp     #loop1
3a2e8                 |   
3a2e8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a2ec     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a2f0     D5 00 80 F1 |             sub     0-0,a40000000
3a2f4     FD 01 6E FB |             djnz    cn,#p402
3a2f8                 |     
3a2f8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a2fc     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a300     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a304     01 00 06 C6 |     if_c    mov     cn,#1
3a308     DA 02 3A F3 |             fle     ct,time3 wcz
3a30c     02 00 06 C6 |     if_c    mov     cn,#2     
3a310     DB 02 3A F3 |             fle     ct,time4 wcz
3a314     03 00 06 C6 |     if_c    mov     cn,#3
3a318     DC 02 3A F3 |             fle     ct,time5 wcz
3a31c     04 00 06 C6 |     if_c    mov     cn,#4
3a320     DD 02 3A F3 |             fle     ct,time6 wcz
3a324     05 00 06 C6 |     if_c    mov     cn,#5
3a328     DE 02 3A F3 |             fle     ct,time7 wcz
3a32c     06 00 06 C6 |     if_c    mov     cn,#6
3a330     DF 02 3A F3 |             fle     ct,time8 wcz
3a334     07 00 06 C6 |     if_c    mov     cn,#7
3a338                 | 
3a338                 | 
3a338                 | '----------------------------------------------------------------------------------
3a338                 | '------------- Compute channel samples --------------------------------------------
3a338                 | '----------------------------------------------------------------------------------
3a338                 | 
3a338                 | 
3a338     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a33c     06 C0 65 F0 |             shl     channeladd,#6
3a340     E0 F0 03 F1 |             add     ptra,channeladd
3a344                 | 
3a344     28 16 64 FD |             setq    #11                        	' read parameters
3a348     00 D7 05 FB |             rdlong  pointer0,ptra
3a34c                 |     	    
3a34c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a350     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a354     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a358     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a35c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a360     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a364     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a368     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a36c                 |             
3a36c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a370     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a374     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a378                 | 
3a378     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a37c     EC 08 3A F9 |             getword oldrs,sample0,#1
3a380     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a384     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a388     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a38c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a390                 | 
3a390     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a394     00 04 02 F6 |             mov     dt0,0-0    
3a398     D7 04 82 F1 |             sub     dt0,time0
3a39c                 |             
3a39c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a3a0     FB 00 00 F1 |             add     0-0,afreq0  	
3a3a4                 |             
3a3a4                 | '---- envelopes
3a3a4                 |             
3a3a4     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a3a8     20 00 00 AF 
3a3ac     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a3b0     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a3b4                 | 
3a3b4     FB 48 02 F6 |             mov     envs1,afreq0
3a3b8     F5 48 02 FA |             mul     envs1,envspd0
3a3bc     24 E7 01 F1 |             add     envph0,envs1 
3a3c0                 | 
3a3c0     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a3c4     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a3c8     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a3cc     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a3d0     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a3d4     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a3d8     00 46 06 36 |     if_ge   mov     envlo,#0
3a3dc     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a3e0     16 E6 65 30 |     if_ge   shl     envph0,#22
3a3e4                 | 
3a3e4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a3e8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a3ec     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a3f0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a3f4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a3f8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a3fc     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a400     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a404     23 49 02 FA |             mul     envs1,envlo
3a408     25 49 02 F1 |             add     envs1,envs2
3a40c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a410                 |             
3a410     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a414     1B C6 61 AD |     if_z    getrnd  spl
3a418     58 00 90 AD |     if_z    jmp     #p406
3a41c                 |  
3a41c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a420     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a424     08 D6 45 F0 |             shr     pointer0,#8
3a428                 |          
3a428     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a42c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a430     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a434     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a438                 |         
3a438     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a43c     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a440     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a444                 |             
3a444     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a448     ED C4 01 F1 |             add     qq,sstart0            
3a44c                 | 
3a44c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a450     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a454     1C 01 B0 1D |     if_gt   call    #cache_read
3a458                 |          
3a458     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a45c     08 C6 65 50 |     if_nz   shl     spl,#8
3a460     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a464     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a468     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a46c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a470     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a474                 | 
3a474                 | 
3a474     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a478     00 C6 01 F6 |             mov     spl,0-0
3a47c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a480     00 C6 01 F6 |             mov     spl,0-0
3a484                 | 
3a484     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a488     00 0A 02 F6 |             mov     ls0,0-0
3a48c     20 00 00 FF 
3a490     00 C4 05 F6 |             mov     qq,##16384
3a494     FE C4 81 F1 |             sub     qq,apan0
3a498     E2 C6 31 FA |             scas    spl,qq
3a49c     00 0C 02 F6 |             mov     rs0, 0-0
3a4a0                 | 
3a4a0     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a4a4     06 11 02 F1 |             add     rs,rs0
3a4a8     03 0F 82 F1 |             sub     ls,oldls
3a4ac     05 0F 02 F1 |             add     ls,ls0
3a4b0                 |    
3a4b0     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a4b4     05 D9 21 F9 |             setword sample0,ls0,#0
3a4b8                 |             
3a4b8     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a4bc     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a4c0     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a4c4                 |   '  if_z    mov     sample0,#0
3a4c4     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a4c8     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a4cc     04 00 00 AF 
3a4d0     00 B0 05 A1 |     if_z    add     time1,##2048
3a4d4     D8 B2 01 A6 |     if_z    mov     time2,time1
3a4d8     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a4dc                 | 
3a4dc     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a4e0     00 D7 65 FC |             wrlong  pointer0,ptra
3a4e4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a4e8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a4ec                 |                       
3a4ec     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a4f0     FF C3 25 A7 |     if_z    decmod  front, #511          
3a4f4                 |          
3a4f4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a4f8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a4fc     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a500     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a504                 | 	    
3a504                 | 		    
3a504     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a508     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a50c     04 15 02 F6 |             mov     newsample, oldrs       
3a510                 | 
3a510     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a514     02 AF 01 F1 |             add     time0,dt0    
3a518                 |                                      
3a518     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a51c     D8 FD 9F AD |     if_z    jmp     #loop1
3a520     02 C5 01 F6 |             mov     qq,dt0
3a524                 | 
3a524                 |     
3a524                 |             
3a524     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a528     40 00 90 3D |     if_nc   jmp     #p399
3a52c     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a530     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a534     F4 FF 9F AD |     if_e    jmp     #p398   
3a538                 | 		
3a538     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a53c     20 00 90 AD |     if_z    jmp     #p302	   
3a540                 |   
3a540     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a544     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a548     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a54c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a550     60 1E 66 FC |             wrlong  scptr2,#$60
3a554     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a558     01 00 00 CF 
3a55c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a560                 | 			    
3a560     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a564     00 00 00 FF 
3a568     FF C3 05 F7 |             incmod  front, ##511
3a56c     ED C5 6D FB | p399        djnz    qq,#p301
3a570                 |             
3a570     6C FD 9F FD |             jmp     #loop            'loop
3a574                 | 
3a574                 | '----------------------------------------------------------------------------------
3a574                 | '------------- This is the end of the main loop -----------------------------------
3a574                 | '----------------------------------------------------------------------------------
3a574                 | 
3a574                 | '----------------------------------------------------------------------------------
3a574                 | '------------- PSRAM cache ----------- --------------------------------------------
3a574                 | '----------------------------------------------------------------------------------
3a574                 | 
3a574                 | ' There are 8 cache pointers for 8 channels
3a574                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a574                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a574                 | 
3a574                 | 
3a574     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a578                 |             
3a578     E2 40 02 F6 | 	    mov     addrhi,qq		
3a57c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a580     14 01 96 F9 | 	    alts    cn,#cache1            
3a584     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a588     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a58c                 | 	
3a58c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a590     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a594     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a598     08 38 66 F0 | 	    shl     cmd,#8
3a59c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a5a0     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a5a4     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a5a8     13 3B 02 F1 |             add     hubaddr,hubptr 
3a5ac     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a5b0     28 04 64 FD |             setq    #2                          ' write 3 longs
3a5b4     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a5b8     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a5bc     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a5c0                 |             
3a5c0                 | 	
3a5c0     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a5c4     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a5c8     13 C5 01 F1 | 	    add     qq,hubptr
3a5cc     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a5d0     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a5d4                 |           
3a5d4                 | 
3a5d4                 | '--------------------------------------------------------------------------
3a5d4                 | '------ Interrupt service -------------------------------------------------
3a5d4                 | '------ Output the sample, get the next one if exists ---------------------
3a5d4                 | '--------------------------------------------------------------------------
3a5d4                 | 
3a5d4     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a5d8     0F D0 25 FC |             wypin   rsample,#right       '4
3a5dc     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a5e0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a5e4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a5e8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a5ec     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a5f0                 |     
3a5f0     F5 FF 3B FB |             reti1                        '17/19 
3a5f4                 |           
3a5f4                 | '---------------------------------------------------------------------------
3a5f4                 | '-------- End of interrupt -------------------------------------------------
3a5f4                 | '---------------------------------------------------------------------------    
3a5f4                 | 
3a5f4                 | 
3a5f4                 | '---------------------------------------------------------------------------
3a5f4                 | '------- Variables ---------------------------------------------------------
3a5f4                 | '---------------------------------------------------------------------------
3a5f4                 | 
3a5f4                 | ' constants
3a5f4                 | 
3a5f4     00 00 00 40 | a40000000   long $40000000
3a5f8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a5fc                 | 
3a5fc                 | ' Time variables
3a5fc                 | 
3a5fc     00 00 00 00 | time0       long 0    ' Global sample computing time
3a600     01 00 00 00 | time1       long 1    ' Local channels time
3a604     02 00 00 00 | time2       long 2
3a608     03 00 00 00 | time3       long 3
3a60c     04 00 00 00 | time4       long 4
3a610     05 00 00 00 | time5       long 5
3a614     06 00 00 00 | time6       long 6
3a618     07 00 00 00 | time7       long 7
3a61c     08 00 00 00 | time8       long 8
3a620                 | 
3a620     00 00 00 00 | channeladd long 0
3a624                 | 
3a624     00 00 00 00 | front       long 0
3a628                 | 
3a628                 | ' temporary variables 
3a628     00 00 00 00 | qq          long 0
3a62c     00 00 00 00 | spl         long 0
3a630     00 00 00 00 | zero        long 0
3a634     00 00 00 00 | mailbox     long 0
3a638     00 00 00 00 | mailbox2 long 0
3a63c                 | 
3a63c                 | ' Interrupt ISR variables
3a63c                 | 
3a63c     00 00 00 00 | lsample     long 0
3a640     00 00 00 00 | rsample     long 0
3a644     00 00 00 00 | lsnext      long 0
3a648     00 00 00 00 | rsnext      long 0 
3a64c                 | 
3a64c                 | ' channel parameter block
3a64c                 | 
3a64c     00 00 00 00 | pointer0    long 0     
3a650     00 00 00 00 | sample0     long 0
3a654     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a658     00 00 00 00 | lstart0     long 0
3a65c     00 00 00 00 | lend0       long 0
3a660     00 00 00 00 | volpan0     long 0
3a664     00 00 00 00 | freqskip0   long 0
3a668     00 00 00 00 | command0    long 0
3a66c     00 00 00 00 | envph0	    long 0
3a670     00 00 00 00 | envptr0	    long 0
3a674     00 00 00 00 | envspd0	    long 0
3a678     00 00 00 00 | envlen0	    long 0
3a67c     00 00 00 00 | res5	    long 0
3a680     00 00 00 00 | res6	    long 0
3a684     00 00 00 00 | res7	    long 0
3a688     00 00 00 00 | res8	    long 0
3a68c                 | 
3a68c     00 00 00 00 | afreq0      long 0
3a690     00 00 00 00 | askip0      long 0
3a694     00 00 00 00 | avol0       long 0
3a698     00 00 00 00 | apan0       long 0
3a69c                 | 
3a69c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a6a0     00 00 00 00 | cn          long 0
3a6a4     00 00 00 00 | ct          long 0
3a6a8     00 00 00 00 | dt0         long 0
3a6ac                 | 
3a6ac                 | ' Samples
3a6ac     00 00 00 00 | oldls       long 0
3a6b0     00 00 00 00 | oldrs       long 0
3a6b4                 | 
3a6b4     00 00 00 00 | ls0         long 0
3a6b8     00 00 00 00 | rs0         long 0
3a6bc                 | 
3a6bc     00 00 00 00 | ls          long 0    
3a6c0     00 00 00 00 | rs          long 0
3a6c4                 | 
3a6c4     00 00 00 00 | oldsample   long 0
3a6c8     00 00 00 00 | newsample   long 0
3a6cc                 | 
3a6cc     00 00 00 00 | nrsample    long 0
3a6d0     00 00 00 00 | nlsample    long 0
3a6d4                 | 
3a6d4     00 00 00 00 | scbase long 0
3a6d8     00 00 00 00 | scptr long 0
3a6dc     00 00 00 00 | scptr2 long 0
3a6e0     00 00 00 00 | scope long 0
3a6e4                 | 
3a6e4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a6e8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a6ec                 | 
3a6ec     00 18 07 00 | hubptr      long $71800
3a6f0     00 00 00 00 | cache1      long 0
3a6f4     00 00 00 00 | cache2      long 0
3a6f8     00 00 00 00 | cache3      long 0
3a6fc     00 00 00 00 | cache4      long 0
3a700     00 00 00 00 | cache5      long 0
3a704     00 00 00 00 | cache6      long 0
3a708     00 00 00 00 | cache7      long 0
3a70c     00 00 00 00 | cache8      long 0
3a710                 | 
3a710                 | 
3a710     00 00 00 00 | cmd         long 0
3a714     00 00 00 00 | hubaddr     long 0
3a718     00 01 00 00 | count       long 256
3a71c     00 00 00 00 | addrlo long 0
3a720     00 00 00 00 | addrhi long 0
3a724     00 00 00 00 | pointer00 long 0
3a728     00 00 00 00 | envhi long 0
3a72c     00 00 00 00 | envlo long 0
3a730     00 00 00 00 | envs1 long 0
3a734     00 00 00 00 | envs2 long 0
3a738     00 00 00 00 | noise0 long 0
3a73c     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a740     00 00 00 00 
3a744     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a748                 | 	alignl
3a748                 | __system__dat_
3a748     00 00 00 00 
3a74c     00 00 00 00 | 	byte	$00[8]
3a750     03 00 00 00 
3a754     00 00 00 00 
3a758     00 00 00 00 
3a75c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a760     00 00 00 00 
      ...             
3a9ec     00 00 00 00 
3a9f0     00 00 00 00 | 	byte	$00[660]
3a9f4     00 00 50 09 | 	long	(149 {__system____root_opendir})<<20
3a9f8     00 00 60 09 | 	long	(150 {__system____root_closedir})<<20
3a9fc     00 00 70 09 | 	long	(151 {__system____root_readdir})<<20
3aa00     00 00 80 09 | 	long	(152 {__system____root_stat})<<20
3aa04     00 00 00 00 
3aa08     00 00 00 00 
3aa0c     00 00 00 00 
3aa10     00 00 00 00 
3aa14     00 00 00 00 
3aa18     00 00 00 00 
3aa1c     00 00 00 00 | 	byte	$00[28]
3aa20     88 AA 03 00 | 	long	@@@__system__dat_ + 832
3aa24     8B AA 03 00 | 	long	@@@__system__dat_ + 835
3aa28     AC AA 03 00 | 	long	@@@__system__dat_ + 868
3aa2c     C5 AA 03 00 | 	long	@@@__system__dat_ + 893
3aa30     E0 AA 03 00 | 	long	@@@__system__dat_ + 920
3aa34     FA AA 03 00 | 	long	@@@__system__dat_ + 946
3aa38     0A AB 03 00 | 	long	@@@__system__dat_ + 962
3aa3c     1C AB 03 00 | 	long	@@@__system__dat_ + 980
3aa40     2E AB 03 00 | 	long	@@@__system__dat_ + 998
3aa44     40 AB 03 00 | 	long	@@@__system__dat_ + 1016
3aa48     4C AB 03 00 | 	long	@@@__system__dat_ + 1028
3aa4c     5D AB 03 00 | 	long	@@@__system__dat_ + 1045
3aa50     71 AB 03 00 | 	long	@@@__system__dat_ + 1065
3aa54     7B AB 03 00 | 	long	@@@__system__dat_ + 1075
3aa58     8B AB 03 00 | 	long	@@@__system__dat_ + 1091
3aa5c     9A AB 03 00 | 	long	@@@__system__dat_ + 1106
3aa60     B0 AB 03 00 | 	long	@@@__system__dat_ + 1128
3aa64     C9 AB 03 00 | 	long	@@@__system__dat_ + 1153
3aa68     DD AB 03 00 | 	long	@@@__system__dat_ + 1173
3aa6c     EB AB 03 00 | 	long	@@@__system__dat_ + 1187
3aa70     FF AB 03 00 | 	long	@@@__system__dat_ + 1207
3aa74     0B AC 03 00 | 	long	@@@__system__dat_ + 1219
3aa78     1D AC 03 00 | 	long	@@@__system__dat_ + 1237
3aa7c     35 AC 03 00 | 	long	@@@__system__dat_ + 1261
3aa80     47 AC 03 00 | 	long	@@@__system__dat_ + 1279
3aa84     5A AC 03 00 | 	long	@@@__system__dat_ + 1298
3aa88     4F 4B 00 4E 
3aa8c     75 6D 65 72 
3aa90     69 63 61 6C 
3aa94     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3aa98     75 6D 65 6E 
3aa9c     74 20 6F 75 
3aaa0     74 20 6F 66 
3aaa4     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3aaa8     61 69 6E 00 
3aaac     52 65 73 75 
3aab0     6C 74 20 6E 
3aab4     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3aab8     65 70 72 65 
3aabc     73 65 6E 74 
3aac0     61 62 6C 65 
3aac4     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3aac8     65 67 61 6C 
3aacc     20 6D 75 6C 
3aad0     74 69 62 79 
3aad4     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3aad8     65 71 75 65 
3aadc     6E 63 65 00 
3aae0     4E 6F 20 73 
3aae4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3aae8     66 69 6C 65 
3aaec     20 6F 72 20 
3aaf0     64 69 72 65 
3aaf4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3aaf8     79 00 42 61 
3aafc     64 20 66 69 
3ab00     6C 65 20 6E 
3ab04     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ab08     72 00 50 65 
3ab0c     72 6D 69 73 
3ab10     73 69 6F 6E 
3ab14     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ab18     69 65 64 00 
3ab1c     4E 6F 74 20 
3ab20     65 6E 6F 75 
3ab24     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ab28     65 6D 6F 72 
3ab2c     79 00 54 65 
3ab30     6D 70 6F 72 
3ab34     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ab38     66 61 69 6C 
3ab3c     75 72 65 00 
3ab40     46 69 6C 65 
3ab44     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ab48     73 74 73 00 
3ab4c     49 6E 76 61 
3ab50     6C 69 64 20 
3ab54     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ab58     6D 65 6E 74 
3ab5c     00 54 6F 6F 
3ab60     20 6D 61 6E 
3ab64     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ab68     65 6E 20 66 
3ab6c     69 6C 65 73 
3ab70     00 49 2F 4F 
3ab74     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3ab78     6F 72 00 4E 
3ab7c     6F 74 20 61 
3ab80     20 64 69 72 
3ab84     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ab88     72 79 00 49 
3ab8c     73 20 61 20 
3ab90     64 69 72 65 
3ab94     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ab98     79 00 52 65 
3ab9c     61 64 20 6F 
3aba0     6E 6C 79 20 
3aba4     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3aba8     20 73 79 73 
3abac     74 65 6D 00 
3abb0     46 75 6E 63 
3abb4     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3abb8     20 6E 6F 74 
3abbc     20 69 6D 70 
3abc0     6C 65 6D 65 
3abc4     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3abc8     00 44 69 72 
3abcc     65 63 74 6F 
3abd0     72 79 20 6E 
3abd4     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3abd8     6D 70 74 79 
3abdc     00 4E 61 6D 
3abe0     65 20 74 6F 
3abe4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3abe8     6E 67 00 44 
3abec     65 76 69 63 
3abf0     65 20 6E 6F 
3abf4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3abf8     65 6B 61 62 
3abfc     6C 65 00 42 
3ac00     61 64 20 61 
3ac04     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ac08     73 73 00 42 
3ac0c     72 6F 6B 65 
3ac10     6E 20 63 6F 
3ac14     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ac18     74 69 6F 6E 
3ac1c     00 44 65 76 
3ac20     69 63 65 20 
3ac24     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ac28     65 73 6F 75 
3ac2c     72 63 65 20 
3ac30     62 75 73 79 
3ac34     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ac38     73 73 20 64 
3ac3c     65 76 69 63 
3ac40     65 20 6C 69 
3ac44     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ac48     6F 20 73 70 
3ac4c     61 63 65 20 
3ac50     6F 6E 20 64 
3ac54     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ac58     65 00 55 6E 
3ac5c     6B 6E 6F 77 
3ac60     6E 20 65 72 
3ac64     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ac68     00 00 00 00 
3ac6c     00 00 00 00 | 	byte	$00[8]
3ac70     05 00 00 00 
3ac74     00 00 00 00 
3ac78     00 00 00 00 
3ac7c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac80     00 00 00 00 | 	byte	$00, $00, $00, $00
3ac84     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3ac88     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3ac8c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ac90     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0698})<<20
3ac94     00 00 00 0B | 	long	(176 {__system____dummy_flush_0699})<<20
3ac98     00 00 00 00 
3ac9c     00 00 00 00 | 	byte	$00[8]
3aca0     01 00 00 00 
3aca4     06 00 00 00 
3aca8     00 00 00 00 
3acac     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acb0     00 00 00 00 
3acb4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3acb8     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3acbc     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3acc0     00 00 00 00 | 	byte	$00, $00, $00, $00
3acc4     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0698})<<20
3acc8     00 00 00 0B | 	long	(176 {__system____dummy_flush_0699})<<20
3accc     00 00 00 00 
3acd0     00 00 00 00 | 	byte	$00[8]
3acd4     01 00 00 00 
3acd8     06 00 00 00 
3acdc     00 00 00 00 
3ace0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ace4     00 00 00 00 
3ace8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3acec     00 00 D0 0A | 	long	(173 {__system___tx})<<20
3acf0     00 00 E0 0A | 	long	(174 {__system___rx})<<20
3acf4     00 00 00 00 | 	byte	$00, $00, $00, $00
3acf8     00 00 F0 0A | 	long	(175 {__system___rxtxioctl_0698})<<20
3acfc     00 00 00 0B | 	long	(176 {__system____dummy_flush_0699})<<20
3ad00     00 00 00 00 
      ...             
3ae70     00 00 00 00 
3ae74     00 00 00 00 | 	byte	$00[376]
3ae78     7C AE 03 00 | 	long	@@@__system__dat_ + 1844
3ae7c     00 00 00 00 
3ae80     00 00 00 00 
3ae84     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae88                 | 	alignl
3ae88                 | _fatfs_cc_dat_
3ae88     C7 00 FC 00 
3ae8c     E9 00 E2 00 
3ae90     E4 00 E0 00 
3ae94     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3ae98     EA 00 EB 00 
3ae9c     E8 00 EF 00 
3aea0     EE 00 EC 00 
3aea4     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3aea8     C9 00 E6 00 
3aeac     C6 00 F4 00 
3aeb0     F6 00 F2 00 
3aeb4     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3aeb8     FF 00 D6 00 
3aebc     DC 00 F8 00 
3aec0     A3 00 D8 00 
3aec4     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3aec8     E1 00 ED 00 
3aecc     F3 00 FA 00 
3aed0     F1 00 D1 00 
3aed4     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3aed8     BF 00 AE 00 
3aedc     AC 00 BD 00 
3aee0     BC 00 A1 00 
3aee4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3aee8     91 25 92 25 
3aeec     93 25 02 25 
3aef0     24 25 C1 00 
3aef4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3aef8     A9 00 63 25 
3aefc     51 25 57 25 
3af00     5D 25 A2 00 
3af04     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3af08     14 25 34 25 
3af0c     2C 25 1C 25 
3af10     00 25 3C 25 
3af14     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3af18     5A 25 54 25 
3af1c     69 25 66 25 
3af20     60 25 50 25 
3af24     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3af28     F0 00 D0 00 
3af2c     CA 00 CB 00 
3af30     C8 00 31 01 
3af34     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3af38     CF 00 18 25 
3af3c     0C 25 88 25 
3af40     84 25 A6 00 
3af44     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3af48     D3 00 DF 00 
3af4c     D4 00 D2 00 
3af50     F5 00 D5 00 
3af54     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3af58     DE 00 DA 00 
3af5c     DB 00 D9 00 
3af60     FD 00 DD 00 
3af64     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3af68     AD 00 B1 00 
3af6c     17 20 BE 00 
3af70     B6 00 A7 00 
3af74     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3af78     B0 00 A8 00 
3af7c     B7 00 B9 00 
3af80     B3 00 B2 00 
3af84     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3af88     61 00 1A 03 
3af8c     E0 00 17 03 
3af90     F8 00 07 03 
3af94     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3af98     78 01 00 01 
3af9c     30 01 32 01 
3afa0     06 01 39 01 
3afa4     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3afa8     2E 01 79 01 
3afac     06 01 80 01 
3afb0     4D 00 43 02 
3afb4     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3afb8     82 01 84 01 
3afbc     84 01 86 01 
3afc0     87 01 87 01 
3afc4     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3afc8     8B 01 8B 01 
3afcc     8D 01 8E 01 
3afd0     8F 01 90 01 
3afd4     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3afd8     93 01 94 01 
3afdc     F6 01 96 01 
3afe0     97 01 98 01 
3afe4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3afe8     9B 01 9C 01 
3afec     9D 01 20 02 
3aff0     9F 01 A0 01 
3aff4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3aff8     A2 01 A4 01 
3affc     A4 01 A6 01 
3b000     A7 01 A7 01 
3b004     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b008     AB 01 AC 01 
3b00c     AC 01 AE 01 
3b010     AF 01 AF 01 
3b014     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b018     B3 01 B3 01 
3b01c     B5 01 B5 01 
3b020     B7 01 B8 01 
3b024     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b028     BB 01 BC 01 
3b02c     BC 01 BE 01 
3b030     F7 01 C0 01 
3b034     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b038     C3 01 C4 01 
3b03c     C5 01 C4 01 
3b040     C7 01 C8 01 
3b044     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b048     CB 01 CA 01 
3b04c     CD 01 10 01 
3b050     DD 01 01 00 
3b054     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b058     12 01 F3 01 
3b05c     03 00 F1 01 
3b060     F4 01 F4 01 
3b064     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b068     22 02 12 01 
3b06c     3A 02 09 00 
3b070     65 2C 3B 02 
3b074     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b078     66 2C 3F 02 
3b07c     40 02 41 02 
3b080     41 02 46 02 
3b084     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b088     40 00 81 01 
3b08c     86 01 55 02 
3b090     89 01 8A 01 
3b094     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b098     5A 02 90 01 
3b09c     5C 02 5D 02 
3b0a0     5E 02 5F 02 
3b0a4     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b0a8     62 02 94 01 
3b0ac     64 02 65 02 
3b0b0     66 02 67 02 
3b0b4     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b0b8     6A 02 62 2C 
3b0bc     6C 02 6D 02 
3b0c0     6E 02 9C 01 
3b0c4     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b0c8     9D 01 73 02 
3b0cc     74 02 9F 01 
3b0d0     76 02 77 02 
3b0d4     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b0d8     7A 02 7B 02 
3b0dc     7C 02 64 2C 
3b0e0     7E 02 7F 02 
3b0e4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b0e8     82 02 A9 01 
3b0ec     84 02 85 02 
3b0f0     86 02 87 02 
3b0f4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b0f8     B1 01 B2 01 
3b0fc     45 02 8D 02 
3b100     8E 02 8F 02 
3b104     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b108     B7 01 7B 03 
3b10c     03 00 FD 03 
3b110     FE 03 FF 03 
3b114     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b118     86 03 88 03 
3b11c     89 03 8A 03 
3b120     B1 03 11 03 
3b124     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b128     A3 03 A3 03 
3b12c     C4 03 08 03 
3b130     CC 03 03 00 
3b134     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b138     8F 03 D8 03 
3b13c     18 01 F2 03 
3b140     0A 00 F9 03 
3b144     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b148     F5 03 F6 03 
3b14c     F7 03 F7 03 
3b150     F9 03 FA 03 
3b154     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b158     20 03 50 04 
3b15c     10 07 60 04 
3b160     22 01 8A 04 
3b164     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b168     0E 01 CF 04 
3b16c     01 00 C0 04 
3b170     D0 04 44 01 
3b174     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b178     00 00 7D 1D 
3b17c     01 00 63 2C 
3b180     00 1E 96 01 
3b184     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b188     00 1F 08 06 
3b18c     10 1F 06 06 
3b190     20 1F 08 06 
3b194     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b198     40 1F 06 06 
3b19c     51 1F 07 00 
3b1a0     59 1F 52 1F 
3b1a4     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b1a8     5D 1F 56 1F 
3b1ac     5F 1F 60 1F 
3b1b0     08 06 70 1F 
3b1b4     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b1b8     BB 1F C8 1F 
3b1bc     C9 1F CA 1F 
3b1c0     CB 1F DA 1F 
3b1c4     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b1c8     F9 1F EA 1F 
3b1cc     EB 1F FA 1F 
3b1d0     FB 1F 80 1F 
3b1d4     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b1d8     08 06 A0 1F 
3b1dc     08 06 B0 1F 
3b1e0     04 00 B8 1F 
3b1e4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b1e8     BC 1F CC 1F 
3b1ec     01 00 C3 1F 
3b1f0     D0 1F 02 06 
3b1f4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b1f8     E5 1F 01 00 
3b1fc     EC 1F F3 1F 
3b200     01 00 FC 1F 
3b204     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b208     32 21 70 21 
3b20c     10 02 84 21 
3b210     01 00 83 21 
3b214     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b218     30 2C 2F 04 
3b21c     60 2C 02 01 
3b220     67 2C 06 01 
3b224     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b228     80 2C 64 01 
3b22c     00 2D 26 08 
3b230     41 FF 1A 03 
3b234     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b238     05 07 09 0E 
3b23c     10 12 14 16 
3b240     18 1C 1E 43 
3b244     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b248     41 41 43 45 
3b24c     45 45 49 49 
3b250     49 41 41 45 
3b254     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b258     4F 55 55 59 
3b25c     4F 55 4F 9C 
3b260     4F 9E 9F 41 
3b264     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b268     A5 A6 A7 A8 
3b26c     A9 AA AB AC 
3b270     AD AE AF B0 
3b274     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b278     41 41 41 B8 
3b27c     B9 BA BB BC 
3b280     BD BE BF C0 
3b284     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b288     C5 41 41 C8 
3b28c     C9 CA CB CC 
3b290     CD CE CF D1 
3b294     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b298     49 49 49 49 
3b29c     D9 DA DB DC 
3b2a0     DD 49 DF 4F 
3b2a4     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b2a8     4F E6 E8 E8 
3b2ac     55 55 55 59 
3b2b0     59 EE EF F0 
3b2b4     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b2b8     F5 F6 F7 F8 
3b2bc     F9 FA FB FC 
3b2c0     FD FE FF 00 
3b2c4     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b2c8     00 00 00 00 | 	byte	$00, $00, $00, $00
3b2cc     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_close})<<20
3b2d0     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_read})<<20
3b2d4     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_write})<<20
3b2d8     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_lseek})<<20
3b2dc     00 00 00 0A | 	long	(160 {_fatfs_cc_v_ioctl})<<20
3b2e0     00 00 10 0B | 	long	(177 {_fatfs_cc_v_flush})<<20
3b2e4     00 00 00 00 
3b2e8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b2ec     00 00 10 0A | 	long	(161 {_fatfs_cc_v_open})<<20
3b2f0     00 00 20 0A | 	long	(162 {_fatfs_cc_v_creat})<<20
3b2f4     00 00 30 0A | 	long	(163 {_fatfs_cc_v_opendir})<<20
3b2f8     00 00 40 0A | 	long	(164 {_fatfs_cc_v_closedir})<<20
3b2fc     00 00 50 0A | 	long	(165 {_fatfs_cc_v_readdir})<<20
3b300     00 00 60 0A | 	long	(166 {_fatfs_cc_v_stat})<<20
3b304     00 00 70 0A | 	long	(167 {_fatfs_cc_v_mkdir})<<20
3b308     00 00 80 0A | 	long	(168 {_fatfs_cc_v_rmdir})<<20
3b30c     00 00 90 0A | 	long	(169 {_fatfs_cc_v_remove})<<20
3b310     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_rename})<<20
3b314     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_init})<<20
3b318     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_deinit})<<20
3b31c     FF FF FF FF 
3b320     1F 00 00 00 
3b324     1C 00 00 00 
3b328     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b32c     1E 00 00 00 
3b330     1F 00 00 00 
3b334     1E 00 00 00 
3b338     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b33c     1F 00 00 00 
3b340     1E 00 00 00 
3b344     1F 00 00 00 
3b348     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b34c     1F 00 00 00 
3b350     00 00 00 00 
3b354     1F 00 00 00 
3b358     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b35c     5A 00 00 00 
3b360     78 00 00 00 
3b364     97 00 00 00 
3b368     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b36c     D4 00 00 00 
3b370     F3 00 00 00 
3b374     11 01 00 00 
3b378     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b37c     4E 01 00 00 
3b380     6D 01 00 00 
3b384     FF FF FF FF 
3b388     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b38c     00 00 00 00 
      ...             
3b3a4     00 00 00 00 
3b3a8     00 00 00 00 | 	byte	$00[32]
3b3ac     CA B3 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b3b0     CE B3 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b3b4     00 00 00 00 
3b3b8     00 00 00 00 
3b3bc     00 00 00 00 
3b3c0     00 00 00 00 
3b3c4     00 00       | 	byte	$00[18]
3b3c6     3F 3F 3F 00 
3b3ca     55 43 54 00 
3b3ce     55 43 54 00 
3b3d2     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b3d6     00 00 00 00 
3b3da     00 00 00    | 	byte	$00[7]
3b3dd     CA 9A 3B 00 
3b3e1     00 00 00 01 
3b3e5     01 01 01 01 
3b3e9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b3ed     91 11 11 11 
3b3f1     11 01 01 01 
3b3f5     01 01 01 01 
3b3f9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b3fd     01 01 01 01 
3b401     01 01 01    | 	byte	$01[7]
3b404     90 20 20 20 
3b408     20 20 20 20 
3b40c     20 20 20 20 
3b410     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b414     42 42 42 42 
3b418     42 42 42 42 
3b41c     42 42       | 	byte	$42[10]
3b41e     20 20 20 20 
3b422     20 20 20    | 	byte	$20[7]
3b425     44 44 44 44 
3b429     44 44       | 	byte	$44[6]
3b42b     04 04 04 04 
3b42f     04 04 04 04 
3b433     04 04 04 04 
3b437     04 04 04 04 
3b43b     04 04 04 04 | 	byte	$04[20]
3b43f     20 20 20 20 
3b443     20 20       | 	byte	$20[6]
3b445     48 48 48 48 
3b449     48 48       | 	byte	$48[6]
3b44b     08 08 08 08 
3b44f     08 08 08 08 
3b453     08 08 08 08 
3b457     08 08 08 08 
3b45b     08 08 08 08 | 	byte	$08[20]
3b45f     20 20 20 20 
3b463     01 00 00 00 
3b467     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b468                 | __methodtable__
3b468     F4 2C 01 00 | 	long	@_do_no_command
3b46c     38 AB 01 00 | 	long	@_do_plus
3b470     5C 9B 01 00 | 	long	@_do_minus
3b474     20 AA 01 00 | 	long	@_do_or
3b478     DC A1 01 00 | 	long	@_do_mul
3b47c     44 86 01 00 | 	long	@_do_fdiv
3b480     34 7E 01 00 | 	long	@_do_and
3b484     4C 7F 01 00 | 	long	@_do_div
3b488     BC 9F 01 00 | 	long	@_do_mod
3b48c     EC B1 01 00 | 	long	@_do_shl
3b490     04 B3 01 00 | 	long	@_do_shr
3b494     24 B0 01 00 | 	long	@_do_power
3b498     8C 74 01 00 | 	long	@_do_getvar
3b49c     64 48 01 00 | 	long	@_do_push
3b4a0     8C 6E 01 00 | 	long	@_do_assign
3b4a4     78 D4 00 00 | 	long	@_do_cls
3b4a8     10 27 01 00 | 	long	@_do_new
3b4ac     AC 40 01 00 | 	long	@_do_plot
3b4b0     38 F5 00 00 | 	long	@_do_draw
3b4b4     14 43 01 00 | 	long	@_do_print
3b4b8     58 D2 00 00 | 	long	@_do_circle
3b4bc     6C F7 00 00 | 	long	@_do_fcircle
3b4c0     04 C7 00 00 | 	long	@_do_box
3b4c4     50 FC 00 00 | 	long	@_do_frame
3b4c8     B8 D4 00 00 | 	long	@_do_color
3b4cc     E0 F9 00 00 | 	long	@_do_for
3b4d0     30 29 01 00 | 	long	@_do_next
3b4d4     38 16 01 00 | 	long	@_do_list
3b4d8     AC 54 01 00 | 	long	@_do_run
3b4dc     94 F6 00 00 | 	long	@_do_error
3b4e0     60 08 01 00 | 	long	@_do_fast_goto
3b4e4     50 09 01 00 | 	long	@_do_find_goto
3b4e8     60 0B 01 00 | 	long	@_do_slow_goto
3b4ec     00 2D 01 00 | 	long	@_do_nothing
3b4f0     28 BC 00 00 | 	long	@_test_csave
3b4f4     60 58 01 00 | 	long	@_do_save
3b4f8     D4 18 01 00 | 	long	@_do_load
3b4fc     E8 33 01 00 | 	long	@_do_pinwrite
3b500     CC 6B 01 00 | 	long	@_do_waitms
3b504     00 6D 01 00 | 	long	@_do_waitvbl
3b508     50 0E 01 00 | 	long	@_do_if
3b50c     2C F6 00 00 | 	long	@_do_else
3b510     6C 81 01 00 | 	long	@_do_eq
3b514     0C 88 01 00 | 	long	@_do_ge
3b518     BC 91 01 00 | 	long	@_do_le
3b51c     E4 8C 01 00 | 	long	@_do_gt
3b520     94 96 01 00 | 	long	@_do_lt
3b524     48 A5 01 00 | 	long	@_do_ne
3b528     1C 52 01 00 | 	long	@_do_rnd
3b52c     EC C8 00 00 | 	long	@_do_brun
3b530     90 C4 00 00 | 	long	@_do_beep
3b534     C8 ED 00 00 | 	long	@_do_dir
3b538     1C 30 01 00 | 	long	@_do_paper
3b53c     0C 12 01 00 | 	long	@_do_ink
3b540     64 F9 00 00 | 	long	@_do_font
3b544     20 22 01 00 | 	long	@_do_mode
3b548     CC 25 01 00 | 	long	@_do_mouse
3b54c     E0 06 01 00 | 	long	@_do_gettime
3b550     10 D6 00 00 | 	long	@_do_cursor
3b554     D0 D3 00 00 | 	long	@_do_click
3b558     88 26 01 00 | 	long	@_do_mousex
3b55c     CC 26 01 00 | 	long	@_do_mousey
3b560     00 26 01 00 | 	long	@_do_mousek
3b564     44 26 01 00 | 	long	@_do_mousew
3b568     A8 61 01 00 | 	long	@_do_sin
3b56c     90 64 01 00 | 	long	@_do_stick
3b570     14 66 01 00 | 	long	@_do_strig
3b574     B4 62 01 00 | 	long	@_do_sprite
3b578     2C EA 00 00 | 	long	@_do_defsprite
3b57c     90 05 01 00 | 	long	@_do_getpixel
3b580     A8 6B 01 00 | 	long	@_do_waitclock
3b584     0C 9F 01 00 | 	long	@_do_negative
3b588     E8 4E 01 00 | 	long	@_do_rdpin
3b58c     38 54 01 00 | 	long	@_do_rqpin
3b590     14 32 01 00 | 	long	@_do_pinread
3b594     0C 6D 01 00 | 	long	@_do_wrpin
3b598     8C 6D 01 00 | 	long	@_do_wxpin
3b59c     0C 6E 01 00 | 	long	@_do_wypin
3b5a0     54 31 01 00 | 	long	@_do_pinfloat
3b5a4     D4 31 01 00 | 	long	@_do_pinlo
3b5a8     94 31 01 00 | 	long	@_do_pinhi
3b5ac     98 32 01 00 | 	long	@_do_pinstart
3b5b0     A8 33 01 00 | 	long	@_do_pintoggle
3b5b4     8C 42 01 00 | 	long	@_do_position
3b5b8     F0 D4 00 00 | 	long	@_do_cos
3b5bc     98 67 01 00 | 	long	@_do_tan
3b5c0     7C C3 00 00 | 	long	@_do_atn
3b5c4     70 C2 00 00 | 	long	@_do_asin
3b5c8     0C C0 00 00 | 	long	@_do_acos
3b5cc     A0 63 01 00 | 	long	@_do_sqr
3b5d0     50 F8 00 00 | 	long	@_do_fill
3b5d4     40 E1 00 00 | 	long	@_do_defsnd
3b5d8     44 D6 00 00 | 	long	@_do_defenv
3b5dc     C0 4E 01 00 | 	long	@_do_rad
3b5e0     A0 ED 00 00 | 	long	@_do_deg
3b5e4     8C 12 01 00 | 	long	@_do_int
3b5e8     70 34 01 00 | 	long	@_do_play
3b5ec     00 5C 01 00 | 	long	@_do_setdelay
3b5f0     A8 5C 01 00 | 	long	@_do_setenv
3b5f4     50 5D 01 00 | 	long	@_do_setlen
3b5f8     F8 5D 01 00 | 	long	@_do_setpan
3b5fc     48 5F 01 00 | 	long	@_do_setvol
3b600     F0 5F 01 00 | 	long	@_do_setwave
3b604     A0 5E 01 00 | 	long	@_do_setsustain
3b608     54 4F 01 00 | 	long	@_do_release
3b60c     80 03 01 00 | 	long	@_do_getenvsustain
3b610     7C 41 01 00 | 	long	@_do_poke
3b614     60 F4 00 00 | 	long	@_do_dpoke
3b618     84 1F 01 00 | 	long	@_do_lpoke
3b61c     A4 30 01 00 | 	long	@_do_peek
3b620     B4 F3 00 00 | 	long	@_do_dpeek
3b624     D8 1E 01 00 | 	long	@_do_lpeek
3b628     78 FD 00 00 | 	long	@_do_fre
3b62c     8C 04 01 00 | 	long	@_do_getnotevalue
3b630     44 7A 01 00 | 	long	@_do_getaddr
3b634     34 0F 01 00 | 	long	@_do_inkey
3b638     8C BF 00 00 | 	long	@_do_abs
3b63c     F0 0C 01 00 | 	long	@_do_hex
3b640     A4 C5 00 00 | 	long	@_do_bin
3b644     A4 68 01 00 | 	long	@_do_val
3b648     5C D1 00 00 | 	long	@_do_chr
3b64c     18 C1 00 00 | 	long	@_do_asc
3b650     48 13 01 00 | 	long	@_do_left
3b654     98 50 01 00 | 	long	@_do_right
3b658     5C 20 01 00 | 	long	@_do_mid
3b65c     CC 14 01 00 | 	long	@_do_len
3b660     48 07 01 00 | 	long	@_do_gosub
3b664     EC 4F 01 00 | 	long	@_do_return
3b668     50 F6 00 00 | 	long	@_do_end
3b66c     54 42 01 00 | 	long	@_do_pop
3b670     60 1D 01 00 | 	long	@_do_log
3b674     50 CF 00 00 | 	long	@_do_changevol
3b678     30 D0 00 00 | 	long	@_do_changewav
3b67c     40 CE 00 00 | 	long	@_do_changepan
3b680     24 CB 00 00 | 	long	@_do_changefreq
3b684     98 60 01 00 | 	long	@_do_shutup
3b688     E4 53 01 00 | 	long	@_do_round
3b68c     84 F6 00 00 | 	long	@_do_enter
3b690     04 2D 01 00 | 	long	@_do_open
3b694     FC D3 00 00 | 	long	@_do_close
3b698     DC FD 00 00 | 	long	@_do_get
3b69c     80 49 01 00 | 	long	@_do_put
3b6a0     3C F0 01 00 | 	long	@_hg010b_spin2_putchar
3b6a4     B8 FF 02 00 | 	long	@__struct___bas_wrap_sender_tx
3b6a8     FC FF 02 00 | 	long	@__struct___bas_wrap_sender_rx
3b6ac     44 00 03 00 | 	long	@__struct___bas_wrap_sender_close
3b6b0     E8 FE 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3b6b4     58 FF 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3b6b8     A0 FE 02 00 | 	long	@___strs_cl_pfunc
3b6bc     34 5C 02 00 | 	long	@__system____root_opendir
3b6c0     D0 5C 02 00 | 	long	@__system____root_closedir
3b6c4     4C 5C 02 00 | 	long	@__system____root_readdir
3b6c8     D8 5C 02 00 | 	long	@__system____root_stat
3b6cc     24 55 02 00 | 	long	@__system____default_putc
3b6d0     A8 54 02 00 | 	long	@__system____default_getc
3b6d4     CC 55 02 00 | 	long	@__system____default_flush
3b6d8     A4 E9 02 00 | 	long	@_fatfs_cc_v_close
3b6dc     C0 ED 02 00 | 	long	@_fatfs_cc_v_read
3b6e0     D4 EE 02 00 | 	long	@_fatfs_cc_v_write
3b6e4     B4 EF 02 00 | 	long	@_fatfs_cc_v_lseek
3b6e8     3C F0 02 00 | 	long	@_fatfs_cc_v_ioctl
3b6ec     90 F0 02 00 | 	long	@_fatfs_cc_v_open
3b6f0     08 E9 02 00 | 	long	@_fatfs_cc_v_creat
3b6f4     E8 E9 02 00 | 	long	@_fatfs_cc_v_opendir
3b6f8     5C EA 02 00 | 	long	@_fatfs_cc_v_closedir
3b6fc     9C EA 02 00 | 	long	@_fatfs_cc_v_readdir
3b700     D0 EB 02 00 | 	long	@_fatfs_cc_v_stat
3b704     50 F0 02 00 | 	long	@_fatfs_cc_v_mkdir
3b708     70 F0 02 00 | 	long	@_fatfs_cc_v_rmdir
3b70c     60 F0 02 00 | 	long	@_fatfs_cc_v_remove
3b710     80 F0 02 00 | 	long	@_fatfs_cc_v_rename
3b714     A0 F1 02 00 | 	long	@_fatfs_cc_v_init
3b718     A8 F1 02 00 | 	long	@_fatfs_cc_v_deinit
3b71c     3C 09 02 00 | 	long	@__system___tx
3b720     7C 09 02 00 | 	long	@__system___rx
3b724     44 68 02 00 | 	long	@__system___rxtxioctl_0698
3b728     9C 68 02 00 | 	long	@__system____dummy_flush_0699
3b72c     70 F1 02 00 | 	long	@_fatfs_cc_v_flush
3b730                 | __heap_base
3b730     00 00 00 00 
      ...             
6a530     00 00 00 00 
6a534     00 00 00 00 | 	long	0[48002]
6a538                 | objmem
6a538     00 00 00 00 
      ...             
74958     00 00 00 00 
7495c     00 00 00 00 | 	long	0[10506]
74960                 | stackspace
74960     00 00 00 00 | 	long	0[1]
74964 100             | 	org	COG_BSS_START
74964 100             | _var01
74964 100             | 	res	1
74964 101             | _var02
74964 101             | 	res	1
74964 102             | _var03
74964 102             | 	res	1
74964 103             | _var04
74964 103             | 	res	1
74964 104             | _var05
74964 104             | 	res	1
74964 105             | _var06
74964 105             | 	res	1
74964 106             | _var07
74964 106             | 	res	1
74964 107             | _var08
74964 107             | 	res	1
74964 108             | _var09
74964 108             | 	res	1
74964 109             | arg01
74964 109             | 	res	1
74964 10a             | arg02
74964 10a             | 	res	1
74964 10b             | arg03
74964 10b             | 	res	1
74964 10c             | arg04
74964 10c             | 	res	1
74964 10d             | arg05
74964 10d             | 	res	1
74964 10e             | arg06
74964 10e             | 	res	1
74964 10f             | local01
74964 10f             | 	res	1
74964 110             | local02
74964 110             | 	res	1
74964 111             | local03
74964 111             | 	res	1
74964 112             | local04
74964 112             | 	res	1
74964 113             | local05
74964 113             | 	res	1
74964 114             | local06
74964 114             | 	res	1
74964 115             | local07
74964 115             | 	res	1
74964 116             | local08
74964 116             | 	res	1
74964 117             | local09
74964 117             | 	res	1
74964 118             | local10
74964 118             | 	res	1
74964 119             | local11
74964 119             | 	res	1
74964 11a             | local12
74964 11a             | 	res	1
74964 11b             | local13
74964 11b             | 	res	1
74964 11c             | local14
74964 11c             | 	res	1
74964 11d             | local15
74964 11d             | 	res	1
74964 11e             | local16
74964 11e             | 	res	1
74964 11f             | local17
74964 11f             | 	res	1
74964 120             | local18
74964 120             | 	res	1
74964 121             | local19
74964 121             | 	res	1
74964 122             | local20
74964 122             | 	res	1
74964 123             | local21
74964 123             | 	res	1
74964 124             | local22
74964 124             | 	res	1
74964 125             | local23
74964 125             | 	res	1
74964 126             | local24
74964 126             | 	res	1
74964 127             | local25
74964 127             | 	res	1
74964 128             | local26
74964 128             | 	res	1
74964 129             | local27
74964 129             | 	res	1
74964 12a             | local28
74964 12a             | 	res	1
74964 12b             | local29
74964 12b             | 	res	1
74964 12c             | local30
74964 12c             | 	res	1
74964 12d             | local31
74964 12d             | 	res	1
74964 12e             | local32
74964 12e             | 	res	1
74964 12f             | local33
74964 12f             | 	res	1
74964 130             | local34
74964 130             | 	res	1
74964 131             | local35
74964 131             | 	res	1
74964 132             | local36
74964 132             | 	res	1
74964 133             | local37
74964 133             | 	res	1
74964 134             | local38
74964 134             | 	res	1
74964 135             | local39
74964 135             | 	res	1
74964 136             | local40
74964 136             | 	res	1
74964 137             | local41
74964 137             | 	res	1
74964 138             | local42
74964 138             | 	res	1
74964 139             | local43
74964 139             | 	res	1
74964 13a             | local44
74964 13a             | 	res	1
74964 13b             | local45
74964 13b             | 	res	1
74964 13c             | local46
74964 13c             | 	res	1
74964 13d             | local47
74964 13d             | 	res	1
74964 13e             | muldiva_
74964 13e             | 	res	1
74964 13f             | muldivb_
74964 13f             | 	res	1
74964 140             | 	fit	480
74964 140             | 
