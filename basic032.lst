00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 96000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 04 E7 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 0C CF 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 30 CC 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 14 46 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 10 BF 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 68 BA 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 74 27 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 50 C6 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 DC 58 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 8C 80 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 44 7E 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 1C 90 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 40 EA 05 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     44 F7 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     D8 0B B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     EC E5 05 F1 | 	add	objptr, ##41964
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     EC E5 85 F1 | 	sub	objptr, ##41964
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     D0 0E B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     24 16 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     1C 10 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     E0 0D B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     8C DC B1 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     EC E5 05 F1 | 	add	objptr, ##41964
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     EC E5 85 F1 | 	sub	objptr, ##41964
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     84 DA B1 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     24 DA B1 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F4 E5 05 F1 | 	add	objptr, ##41972
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     B6 E5 85 F1 | 	sub	objptr, ##41910
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     B8 E5 05 F1 | 	add	objptr, ##41912
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     B6 E5 85 F1 | 	sub	objptr, ##41910
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     B4 D9 B1 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     8C F1 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F4 E5 05 F1 | 	add	objptr, ##41972
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F4 E5 85 F1 | 	sub	objptr, ##41972
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     A8 F4 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     0C 0B B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     60 12 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     5C 0C B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     8B 01 00 FF 
00ccc     B6 51 06 F6 | 	mov	local22, ##@LR__5127
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     48 D8 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     3C 31 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     4C 0F B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     F8 F8 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     28 FB B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     98 09 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     EC 10 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     E8 0A B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     E4 D6 B1 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     68 F0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     5C F0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     EC EF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     B8 EF B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     D8 EF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     C8 EF B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     88 D5 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     34 D5 B1 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     04 D5 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F4 E5 05 F1 | 	add	objptr, ##41972
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     B6 E5 85 F1 | 	sub	objptr, ##41910
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     B8 E5 05 F1 | 	add	objptr, ##41912
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     B6 E5 85 F1 | 	sub	objptr, ##41910
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     9C D4 B1 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     74 EC B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F4 E5 05 F1 | 	add	objptr, ##41972
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F4 E5 85 F1 | 	sub	objptr, ##41972
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     50 ED B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     84 D3 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     30 D3 B1 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     00 D3 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F4 E5 05 F1 | 	add	objptr, ##41972
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     B6 E5 85 F1 | 	sub	objptr, ##41910
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     B8 E5 05 F1 | 	add	objptr, ##41912
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     B6 E5 85 F1 | 	sub	objptr, ##41910
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     98 D2 B1 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     70 EA B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F4 E5 05 F1 | 	add	objptr, ##41972
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F4 E5 85 F1 | 	sub	objptr, ##41972
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     8B 01 00 FF 
01328     B7 51 06 F6 | 	mov	local22, ##@LR__5128
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     98 EB B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     38 EB B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     8C EA B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     30 EA B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     7C D8 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     6C D8 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     A0 09 B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     78 09 B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     50 09 B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     A8 FE B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     F8 FE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     E8 FE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     4C FE B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     B0 29 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     E8 28 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     8B 01 00 FF 
01800     B8 17 06 F6 | 	mov	arg03, ##@LR__5129
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     D8 28 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     10 28 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     8B 01 00 FF 
01860     B9 2D 06 F6 | 	mov	local04, ##@LR__5130
01864     1A 00 00 FF 
01868     DC E5 05 F1 | 	add	objptr, ##13788
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     DC E5 85 F1 | 	sub	objptr, ##13788
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     51 00 00 FF 
018a0     FC E5 05 F1 | 	add	objptr, ##41980
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     51 00 00 FF 
018ac     FC E5 85 F1 | 	sub	objptr, ##41980
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     90 24 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     8B 01 00 FF 
01920     BA 15 06 F6 | 	mov	arg02, ##@LR__5131
01924     14 03 B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     50 24 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     8B 01 00 FF 
01960     BC 15 06 F6 | 	mov	arg02, ##@LR__5132
01964     D4 02 B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     E0 23 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     8B 01 00 FF 
019d0     BE 39 06 F6 | 	mov	local10, ##@LR__5133
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     60 02 B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     51 00 00 FF 
01a1c     FC E5 05 F1 | 	add	objptr, ##41980
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     51 00 00 FF 
01a28     FC E5 85 F1 | 	sub	objptr, ##41980
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     51 00 00 FF 
01a40     FC E5 05 F1 | 	add	objptr, ##41980
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     51 00 00 FF 
01a4c     FC E5 85 F1 | 	sub	objptr, ##41980
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     7C 22 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     7C 26 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     B4 25 B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     00 E4 05 F1 | 	add	objptr, ##41984
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E4 E5 85 F1 | 	sub	objptr, ##13796
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     B8 21 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     40 26 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     78 25 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     8B 01 00 FF 
01b04     C0 2D 06 F6 | 	mov	local04, ##@LR__5134
01b08     52 00 00 FF 
01b0c     00 E4 05 F1 | 	add	objptr, ##41984
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     00 E4 85 F1 | 	sub	objptr, ##41984
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     00 E4 05 F1 | 	add	objptr, ##41984
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     00 E4 85 F1 | 	sub	objptr, ##41984
01b50     8B 01 00 FF 
01b54     C1 31 06 F6 | 	mov	local06, ##@LR__5135
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     DC 00 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     00 E4 05 F1 | 	add	objptr, ##41984
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     00 E4 85 F1 | 	sub	objptr, ##41984
01bb0     8B 01 00 FF 
01bb4     C2 15 06 F6 | 	mov	arg02, ##@LR__5136
01bb8     80 00 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     00 E4 05 F1 | 	add	objptr, ##41984
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     00 E4 85 F1 | 	sub	objptr, ##41984
01c08     8B 01 00 FF 
01c0c     C3 15 06 F6 | 	mov	arg02, ##@LR__5137
01c10     28 00 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     00 E4 05 F1 | 	add	objptr, ##41984
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     00 E4 85 F1 | 	sub	objptr, ##41984
01c60     8B 01 00 FF 
01c64     C4 15 06 F6 | 	mov	arg02, ##@LR__5138
01c68     D0 FF B1 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     EC 20 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     51 00 00 FF 
01cf0     FC E5 05 F1 | 	add	objptr, ##41980
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     51 00 00 FF 
01cfc     FC E5 85 F1 | 	sub	objptr, ##41980
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     08 E4 05 F1 | 	add	objptr, ##41992
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     08 E4 85 F1 | 	sub	objptr, ##41992
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     EC E5 05 F1 | 	add	objptr, ##13804
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     08 E4 85 F1 | 	sub	objptr, ##41992
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     EC 1F B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     8B 01 00 FF 
01dc4     C5 15 06 F6 | 	mov	arg02, ##@LR__5139
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     6C FE B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     EC E5 05 F1 | 	add	objptr, ##13804
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     08 E4 85 F1 | 	sub	objptr, ##41992
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     68 1F B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     8B 01 00 FF 
01e48     C6 15 06 F6 | 	mov	arg02, ##@LR__5140
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     E8 FD B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     C4 4A B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     8B 01 00 FF 
01f5c     C7 2D 06 F6 | 	mov	local04, ##@LR__5141
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     8B 01 00 FF 
01f90     C9 15 06 F6 | 	mov	arg02, ##@LR__5142
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     9C FC B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     70 FC B1 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     8B 01 00 FF 
02098     CB 15 06 F6 | 	mov	arg02, ##@LR__5143
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     98 FB B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     8B 01 00 FF 
020b4     CD 15 06 F6 | 	mov	arg02, ##@LR__5144
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     7C FB B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     14 1C B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     8B 01 00 FF 
0210c     CF 15 06 F6 | 	mov	arg02, ##@LR__5145
02110     28 FB B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     44 1B B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     8B 01 00 FF 
02154     D1 15 06 F6 | 	mov	arg02, ##@LR__5146
02158     E0 FA B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     2C 1B B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     74 FA B1 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     8B 01 00 FF 
022d8     D3 15 06 F6 | 	mov	arg02, ##@LR__5147
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     50 F9 B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     8B 01 00 FF 
022f8     D5 15 06 F6 | 	mov	arg02, ##@LR__5148
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     38 F9 B1 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     8B 01 00 FF 
02310     D7 31 06 F6 | 	mov	local06, ##@LR__5149
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     1C F9 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     8B 01 00 FF 
0232c     D9 3D 06 F6 | 	mov	local12, ##@LR__5150
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     00 F9 B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     8B 01 00 FF 
02348     DB 3B 06 F6 | 	mov	local11, ##@LR__5151
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     E0 F8 B1 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     8B 01 00 FF 
02368     DD 3B 06 F6 | 	mov	local11, ##@LR__5152
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     C4 F8 B1 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     8B 01 00 FF 
02384     DF 41 06 F6 | 	mov	local14, ##@LR__5153
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     A8 F8 B1 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     8B 01 00 FF 
023a0     E1 5D 06 F6 | 	mov	local28, ##@LR__5154
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     88 F8 B1 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     8B 01 00 FF 
023c0     E3 5D 06 F6 | 	mov	local28, ##@LR__5155
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     6C F8 B1 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     8B 01 00 FF 
023dc     E5 53 06 F6 | 	mov	local23, ##@LR__5156
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     4C F8 B1 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     8B 01 00 FF 
023fc     E7 53 06 F6 | 	mov	local23, ##@LR__5157
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     30 F8 B1 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     8B 01 00 FF 
02418     E9 5F 06 F6 | 	mov	local29, ##@LR__5158
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     10 F8 B1 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     8B 01 00 FF 
02438     EB 61 06 F6 | 	mov	local30, ##@LR__5159
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     F0 F7 B1 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     8B 01 00 FF 
02458     ED 63 06 F6 | 	mov	local31, ##@LR__5160
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     D0 F7 B1 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     D0 F7 B1 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     80 1B B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     B8 1A B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     8C 15 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     8B 01 00 FF 
0270c     EF 15 06 F6 | 	mov	arg02, ##@LR__5161
02710     28 F5 B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     D0 15 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     8B 01 00 FF 
02750     F1 15 06 F6 | 	mov	arg02, ##@LR__5162
02754     E4 F4 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     08 18 B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     94 41 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     8B 01 00 FF 
02828     F3 15 06 F6 | 	mov	arg02, ##@LR__5163
0282c     0C F4 B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     8B 01 00 FF 
02858     F8 15 06 F6 | 	mov	arg02, ##@LR__5164
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     D4 F3 B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     8B 01 00 FF 
028a8     FD 17 06 F6 | 	mov	arg03, ##@LR__5165
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     1C 19 B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     30 13 B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     64 12 B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     38 12 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     8B 01 00 FF 
02a60     FF 15 06 F6 | 	mov	arg02, ##@LR__5166
02a64     D4 F1 B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     74 11 B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     8C 01 00 FF 
02bc0     01 30 06 F6 | 	mov	local06, ##@LR__5167
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     8C 01 00 FF 
02bec     03 14 06 F6 | 	mov	arg02, ##@LR__5168
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     3C F0 B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     8C 01 00 FF 
02c0c     09 14 06 F6 | 	mov	arg02, ##@LR__5169
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     24 F0 B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     8C 01 00 FF 
02c24     10 14 06 F6 | 	mov	arg02, ##@LR__5170
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     0C F0 B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     8C 01 00 FF 
02c58     16 14 06 F6 | 	mov	arg02, ##@LR__5171
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     D4 EF B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     8C 01 00 FF 
02c8c     19 30 06 F6 | 	mov	local06, ##@LR__5172
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     8C 01 00 FF 
02cc8     1B 14 06 F6 | 	mov	arg02, ##@LR__5173
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     64 EF B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     8C 01 00 FF 
02cfc     1F 30 06 F6 | 	mov	local06, ##@LR__5174
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     8C 01 00 FF 
02d1c     21 14 06 F6 | 	mov	arg02, ##@LR__5175
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     14 EF B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     8C 01 00 FF 
02d34     26 14 06 F6 | 	mov	arg02, ##@LR__5176
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     FC EE B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     8C 01 00 FF 
02d68     29 14 06 F6 | 	mov	arg02, ##@LR__5177
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     C4 EE B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     8C 01 00 FF 
02d9c     2F 30 06 F6 | 	mov	local06, ##@LR__5178
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     8C 01 00 FF 
02dcc     31 14 06 F6 | 	mov	arg02, ##@LR__5179
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     60 EE B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     8C 01 00 FF 
02e00     3A 30 06 F6 | 	mov	local06, ##@LR__5180
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     8C 01 00 FF 
02e30     3C 14 06 F6 | 	mov	arg02, ##@LR__5181
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     FC ED B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     8C 01 00 FF 
02e64     45 30 06 F6 | 	mov	local06, ##@LR__5182
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     8C 01 00 FF 
02e94     47 14 06 F6 | 	mov	arg02, ##@LR__5183
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     98 ED B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     8C 01 00 FF 
02ec8     50 30 06 F6 | 	mov	local06, ##@LR__5184
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     8C 01 00 FF 
02ef8     52 14 06 F6 | 	mov	arg02, ##@LR__5185
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     34 ED B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     8C 01 00 FF 
02f2c     55 30 06 F6 | 	mov	local06, ##@LR__5186
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     8C 01 00 FF 
03064     48 15 06 F6 | 	mov	arg02, ##@LR__5271
03068     D0 EB B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     58 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     90 38 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     34 0C B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     E8 09 B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     AC 11 B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     5C 0A B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     80 2E B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     44 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     C0 34 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     80 34 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     28 07 B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     E4 29 B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     8C 01 00 FF 
0371c     57 30 06 F6 | 	mov	local06, ##@LR__5187
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     8C 01 00 FF 
0373c     58 14 06 F6 | 	mov	arg02, ##@LR__5188
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     F4 E4 B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     8C 01 00 FF 
03754     5D 14 06 F6 | 	mov	arg02, ##@LR__5189
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     DC E4 B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     8C 01 00 FF 
0376c     62 30 06 F6 | 	mov	local06, ##@LR__5190
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     C0 E4 B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     8C 01 00 FF 
03788     67 3C 06 F6 | 	mov	local12, ##@LR__5191
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     A0 E4 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     8C 01 00 FF 
037a8     6B 3A 06 F6 | 	mov	local11, ##@LR__5192
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     80 E4 B1 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     8C 01 00 FF 
037c8     6F 40 06 F6 | 	mov	local14, ##@LR__5193
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     60 E4 B1 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     8C 01 00 FF 
037e8     72 3E 06 F6 | 	mov	local13, ##@LR__5194
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     40 E4 B1 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     8C 01 00 FF 
03808     76 3E 06 F6 | 	mov	local13, ##@LR__5195
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     24 E4 B1 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     8C 01 00 FF 
03824     7C 50 06 F6 | 	mov	local22, ##@LR__5196
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     04 E4 B1 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     8C 01 00 FF 
038c0     7F 14 06 F6 | 	mov	arg02, ##@LR__5197
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     70 E3 B1 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     8C 01 00 FF 
038d8     86 2E 06 F6 | 	mov	local05, ##@LR__5198
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     54 E3 B1 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     8C 01 00 FF 
03970     8C 14 06 F6 | 	mov	arg02, ##@LR__5199
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     C0 E2 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     8C 01 00 FF 
039c0     8F 14 06 F6 | 	mov	arg02, ##@LR__5200
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     70 E2 B1 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     8C 01 00 FF 
039f8     93 2E 06 F6 | 	mov	local05, ##@LR__5201
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     30 E2 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     8C 01 00 FF 
03a4c     95 30 06 F6 | 	mov	local06, ##@LR__5202
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     8C 01 00 FF 
03a7c     98 38 06 F6 | 	mov	local10, ##@LR__5203
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     B0 E1 B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     8C 01 00 FF 
03ab8     9B 2E 06 F6 | 	mov	local05, ##@LR__5204
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     6C E1 B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     E8 E0 B1 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     E8 2D B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     74 14 B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     04 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     84 42 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     10 A6 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     00 E4 05 F1 | 	add	objptr, ##41984
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     00 E4 85 F1 | 	sub	objptr, ##41984
03cfc     8C 01 00 FF 
03d00     9D 14 06 F6 | 	mov	arg02, ##@LR__5205
03d04     34 DF B1 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     00 E4 05 F1 | 	add	objptr, ##41984
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E4 E5 85 F1 | 	sub	objptr, ##13796
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     90 41 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     1C A5 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     00 E4 05 F1 | 	add	objptr, ##41984
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     00 E4 85 F1 | 	sub	objptr, ##41984
03df0     8C 01 00 FF 
03df4     9E 14 06 F6 | 	mov	arg02, ##@LR__5206
03df8     40 DE B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     00 E4 05 F1 | 	add	objptr, ##41984
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E4 E5 85 F1 | 	sub	objptr, ##13796
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     6C 41 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     30 A4 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     00 E4 05 F1 | 	add	objptr, ##41984
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     00 E4 85 F1 | 	sub	objptr, ##41984
03edc     8C 01 00 FF 
03ee0     9F 14 06 F6 | 	mov	arg02, ##@LR__5207
03ee4     54 DD B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     00 E4 05 F1 | 	add	objptr, ##41984
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E4 E5 85 F1 | 	sub	objptr, ##13796
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     7C 40 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     40 A3 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     00 E4 05 F1 | 	add	objptr, ##41984
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     00 E4 85 F1 | 	sub	objptr, ##41984
03fcc     8C 01 00 FF 
03fd0     A0 14 06 F6 | 	mov	arg02, ##@LR__5208
03fd4     64 DC B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     00 E4 05 F1 | 	add	objptr, ##41984
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E4 E5 85 F1 | 	sub	objptr, ##13796
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     60 77 B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     8C 01 00 FF 
04048     A1 12 06 F6 | 	mov	arg01, ##@LR__5209
0404c                 | ' 
0404c                 | ' write(text)
0404c     48 C3 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     44 C8 B1 FD | 	call	#_hg010b_spin2_crlf
04054     8C 01 00 FF 
04058     A2 12 06 F6 | 	mov	arg01, ##@LR__5210
0405c                 | ' 
0405c                 | ' write(text)
0405c     38 C3 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     34 C8 B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     B0 38 B2 FD | 	call	#__system___getiolock_0574
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     7C DB B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     50 E8 B1 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     E8 E7 B1 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     70 38 B2 FD | 	call	#__system___getiolock_0574
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     8C 01 00 FF 
040f0     A8 14 06 F6 | 	mov	arg02, ##@LR__5211
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     40 DB B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     8C 01 00 FF 
04108     AA 14 06 F6 | 	mov	arg02, ##@LR__5212
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     28 DB B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     8C 01 00 FF 
04120     AC 14 06 F6 | 	mov	arg02, ##@LR__5213
04124     13 13 02 F6 | 	mov	arg01, local01
04128     10 DB B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     8C 01 00 FF 
04138     AF 14 06 F6 | 	mov	arg02, ##@LR__5214
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     F8 DA B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     8C 01 00 FF 
04150     B3 14 06 F6 | 	mov	arg02, ##@LR__5215
04154     13 13 02 F6 | 	mov	arg01, local01
04158     E0 DA B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     8C 01 00 FF 
04168     B5 14 06 F6 | 	mov	arg02, ##@LR__5216
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     C8 DA B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     8C 01 00 FF 
04180     B7 14 06 F6 | 	mov	arg02, ##@LR__5217
04184     13 13 02 F6 | 	mov	arg01, local01
04188     B0 DA B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     8C 01 00 FF 
04198     BB 14 06 F6 | 	mov	arg02, ##@LR__5218
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     98 DA B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     8C 01 00 FF 
041b0     BF 14 06 F6 | 	mov	arg02, ##@LR__5219
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     80 DA B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     8C 01 00 FF 
041c8     C3 14 06 F6 | 	mov	arg02, ##@LR__5220
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     68 DA B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     8C 01 00 FF 
041e0     C7 14 06 F6 | 	mov	arg02, ##@LR__5221
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     50 DA B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     8C 01 00 FF 
041f8     CB 14 06 F6 | 	mov	arg02, ##@LR__5222
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     38 DA B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     8C 01 00 FF 
04210     CD 14 06 F6 | 	mov	arg02, ##@LR__5223
04214     13 13 02 F6 | 	mov	arg01, local01
04218     20 DA B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     8C 01 00 FF 
04228     D1 14 06 F6 | 	mov	arg02, ##@LR__5224
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     08 DA B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     8C 01 00 FF 
04240     D3 14 06 F6 | 	mov	arg02, ##@LR__5225
04244     13 13 02 F6 | 	mov	arg01, local01
04248     F0 D9 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     8C 01 00 FF 
04258     D5 14 06 F6 | 	mov	arg02, ##@LR__5226
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     D8 D9 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     8C 01 00 FF 
04270     D8 14 06 F6 | 	mov	arg02, ##@LR__5227
04274     13 13 02 F6 | 	mov	arg01, local01
04278     C0 D9 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     8C 01 00 FF 
04288     DB 14 06 F6 | 	mov	arg02, ##@LR__5228
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     A8 D9 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     8C 01 00 FF 
042a0     DD 14 06 F6 | 	mov	arg02, ##@LR__5229
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     90 D9 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     8C 01 00 FF 
042b8     DF 14 06 F6 | 	mov	arg02, ##@LR__5230
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     78 D9 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     8C 01 00 FF 
042d0     E2 14 06 F6 | 	mov	arg02, ##@LR__5231
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     60 D9 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     8C 01 00 FF 
042e8     E5 14 06 F6 | 	mov	arg02, ##@LR__5232
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     48 D9 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     BC F8 B1 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     8C 01 00 FF 
043dc     E8 14 06 F6 | 	mov	arg02, ##@LR__5233
043e0     58 D8 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     F0 F8 B1 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     8C 01 00 FF 
04430     EA 14 06 F6 | 	mov	arg02, ##@LR__5234
04434     04 D8 B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     CC F8 B1 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     8C 01 00 FF 
04454     EC 14 06 F6 | 	mov	arg02, ##@LR__5235
04458     E0 D7 B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     A0 F8 B1 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     5C 0D B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     70 01 B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     FC 09 B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     8C 01 00 FF 
044b8     EE 14 06 F6 | 	mov	arg02, ##@LR__5236
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     78 D7 B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     8C 01 00 FF 
044d0     F4 14 06 F6 | 	mov	arg02, ##@LR__5237
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     60 D7 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     8C 01 00 FF 
044e8     FB 14 06 F6 | 	mov	arg02, ##@LR__5238
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     48 D7 B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     54 F7 B1 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     8C 01 00 FF 
04544     03 15 06 F6 | 	mov	arg02, ##@LR__5239
04548     F0 D6 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     40 F8 B1 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     8C 01 00 FF 
04570     05 15 06 F6 | 	mov	arg02, ##@LR__5240
04574     C4 D6 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     18 F8 B1 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     00 F8 B1 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     CC F7 B1 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     8C 01 00 FF 
045e4     07 15 06 F6 | 	mov	arg02, ##@LR__5241
045e8     50 D6 B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     18 F7 B1 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     D4 0B B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     84 08 B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     F0 F6 B1 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     AC 0B B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     90 03 B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     4C 08 B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     B4 F6 B1 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     8C 01 00 FF 
0466c     09 15 06 F6 | 	mov	arg02, ##@LR__5242
04670     C8 D5 B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     8C 01 00 FF 
04684     0B 15 06 F6 | 	mov	arg02, ##@LR__5243
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     AC D5 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     8C 01 00 FF 
0469c     0D 15 06 F6 | 	mov	arg02, ##@LR__5244
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     94 D5 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     8C 01 00 FF 
046b4     10 15 06 F6 | 	mov	arg02, ##@LR__5245
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     7C D5 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     8C 01 00 FF 
046cc     12 15 06 F6 | 	mov	arg02, ##@LR__5246
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     64 D5 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     8C 01 00 FF 
046e4     15 15 06 F6 | 	mov	arg02, ##@LR__5247
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     4C D5 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     8C 01 00 FF 
046fc     17 15 06 F6 | 	mov	arg02, ##@LR__5248
04700     17 13 02 F6 | 	mov	arg01, local05
04704     34 D5 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     8C 01 00 FF 
04714     19 15 06 F6 | 	mov	arg02, ##@LR__5249
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     1C D5 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     8C 01 00 FF 
0472c     1C 15 06 F6 | 	mov	arg02, ##@LR__5250
04730     17 13 02 F6 | 	mov	arg01, local05
04734     04 D5 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     8C 01 00 FF 
04744     1E 15 06 F6 | 	mov	arg02, ##@LR__5251
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     EC D4 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     8C 01 00 FF 
0475c     21 15 06 F6 | 	mov	arg02, ##@LR__5252
04760     17 13 02 F6 | 	mov	arg01, local05
04764     D4 D4 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     8C 01 00 FF 
04774     23 15 06 F6 | 	mov	arg02, ##@LR__5253
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     BC D4 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     8C 01 00 FF 
0478c     26 15 06 F6 | 	mov	arg02, ##@LR__5254
04790     17 13 02 F6 | 	mov	arg01, local05
04794     A4 D4 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     8C 01 00 FF 
047a4     28 15 06 F6 | 	mov	arg02, ##@LR__5255
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     8C D4 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     8C 01 00 FF 
048a4     2A 15 06 F6 | 	mov	arg02, ##@LR__5256
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     8C D3 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     8C 01 00 FF 
048bc     2C 15 06 F6 | 	mov	arg02, ##@LR__5257
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     74 D3 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     8C 01 00 FF 
048d4     2E 15 06 F6 | 	mov	arg02, ##@LR__5258
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     5C D3 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     8C 01 00 FF 
048ec     30 15 06 F6 | 	mov	arg02, ##@LR__5259
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     44 D3 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     8C 01 00 FF 
04904     32 15 06 F6 | 	mov	arg02, ##@LR__5260
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     2C D3 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     8C 01 00 FF 
0491c     34 15 06 F6 | 	mov	arg02, ##@LR__5261
04920     13 13 02 F6 | 	mov	arg01, local01
04924     14 D3 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     8C 01 00 FF 
04934     36 15 06 F6 | 	mov	arg02, ##@LR__5262
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     FC D2 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     8C 01 00 FF 
0494c     38 15 06 F6 | 	mov	arg02, ##@LR__5263
04950     13 13 02 F6 | 	mov	arg01, local01
04954     E4 D2 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     8C 01 00 FF 
04964     3A 15 06 F6 | 	mov	arg02, ##@LR__5264
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     CC D2 B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     8C 01 00 FF 
0497c     3C 15 06 F6 | 	mov	arg02, ##@LR__5265
04980     13 13 02 F6 | 	mov	arg01, local01
04984     B4 D2 B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     8C 01 00 FF 
04994     3E 15 06 F6 | 	mov	arg02, ##@LR__5266
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     9C D2 B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     8C 01 00 FF 
049ac     40 15 06 F6 | 	mov	arg02, ##@LR__5267
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     84 D2 B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     8C 01 00 FF 
049c4     42 15 06 F6 | 	mov	arg02, ##@LR__5268
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     6C D2 B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     8C 01 00 FF 
049dc     44 15 06 F6 | 	mov	arg02, ##@LR__5269
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     54 D2 B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     8C 01 00 FF 
049f4     46 15 06 F6 | 	mov	arg02, ##@LR__5270
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     3C D2 B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     8C 01 00 FF 
04aa4     4A 15 06 F6 | 	mov	arg02, ##@LR__5272
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     8C D1 B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     EC 0B 90 AD |  if_e	jmp	#LR__0310
04ab8     8C 01 00 FF 
04abc     4F 15 06 F6 | 	mov	arg02, ##@LR__5273
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     74 D1 B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     DC 0B 90 AD |  if_e	jmp	#LR__0311
04ad0     8C 01 00 FF 
04ad4     52 15 06 F6 | 	mov	arg02, ##@LR__5274
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     5C D1 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     CC 0B 90 AD |  if_e	jmp	#LR__0312
04ae8     8C 01 00 FF 
04aec     57 15 06 F6 | 	mov	arg02, ##@LR__5275
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     44 D1 B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     BC 0B 90 AD |  if_e	jmp	#LR__0313
04b00     8C 01 00 FF 
04b04     5B 15 06 F6 | 	mov	arg02, ##@LR__5276
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     2C D1 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     AC 0B 90 AD |  if_e	jmp	#LR__0314
04b18     8C 01 00 FF 
04b1c     60 15 06 F6 | 	mov	arg02, ##@LR__5277
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     14 D1 B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     9C 0B 90 AD |  if_e	jmp	#LR__0315
04b30     8C 01 00 FF 
04b34     64 15 06 F6 | 	mov	arg02, ##@LR__5278
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     FC D0 B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     8C 0B 90 AD |  if_e	jmp	#LR__0316
04b48     8C 01 00 FF 
04b4c     67 15 06 F6 | 	mov	arg02, ##@LR__5279
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     E4 D0 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     7C 0B 90 AD |  if_e	jmp	#LR__0317
04b60     8C 01 00 FF 
04b64     72 15 06 F6 | 	mov	arg02, ##@LR__5280
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     CC D0 B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     6C 0B 90 AD |  if_e	jmp	#LR__0318
04b78     8C 01 00 FF 
04b7c     76 15 06 F6 | 	mov	arg02, ##@LR__5281
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     B4 D0 B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     5C 0B 90 AD |  if_e	jmp	#LR__0319
04b90     8C 01 00 FF 
04b94     80 15 06 F6 | 	mov	arg02, ##@LR__5282
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     9C D0 B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     4C 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     8C 01 00 FF 
04bac     84 15 06 F6 | 	mov	arg02, ##@LR__5283
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     84 D0 B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     3C 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     8C 01 00 FF 
04bc4     8E 15 06 F6 | 	mov	arg02, ##@LR__5284
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     6C D0 B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     2C 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     8C 01 00 FF 
04bdc     92 15 06 F6 | 	mov	arg02, ##@LR__5285
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     54 D0 B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     1C 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     8C 01 00 FF 
04bf4     9D 15 06 F6 | 	mov	arg02, ##@LR__5286
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     3C D0 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     0C 0B 90 AD |  if_e	jmp	#LR__0324
04c08     8C 01 00 FF 
04c0c     A1 15 06 F6 | 	mov	arg02, ##@LR__5287
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     24 D0 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     FC 0A 90 AD |  if_e	jmp	#LR__0325
04c20     8C 01 00 FF 
04c24     A8 15 06 F6 | 	mov	arg02, ##@LR__5288
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     0C D0 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     EC 0A 90 AD |  if_e	jmp	#LR__0326
04c38     8C 01 00 FF 
04c3c     AC 15 06 F6 | 	mov	arg02, ##@LR__5289
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     F4 CF B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     DC 0A 90 AD |  if_e	jmp	#LR__0327
04c50     8C 01 00 FF 
04c54     B2 15 06 F6 | 	mov	arg02, ##@LR__5290
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     DC CF B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     CC 0A 90 AD |  if_e	jmp	#LR__0328
04c68     8C 01 00 FF 
04c6c     B8 15 06 F6 | 	mov	arg02, ##@LR__5291
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     C4 CF B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     BC 0A 90 AD |  if_e	jmp	#LR__0329
04c80     8C 01 00 FF 
04c84     BC 15 06 F6 | 	mov	arg02, ##@LR__5292
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     AC CF B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     AC 0A 90 AD |  if_e	jmp	#LR__0330
04c98     8C 01 00 FF 
04c9c     C2 15 06 F6 | 	mov	arg02, ##@LR__5293
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     94 CF B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     9C 0A 90 AD |  if_e	jmp	#LR__0331
04cb0     8C 01 00 FF 
04cb4     C5 15 06 F6 | 	mov	arg02, ##@LR__5294
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     7C CF B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     8C 0A 90 AD |  if_e	jmp	#LR__0332
04cc8     8C 01 00 FF 
04ccc     CB 15 06 F6 | 	mov	arg02, ##@LR__5295
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     64 CF B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     7C 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     8C 01 00 FF 
04ce4     CF 15 06 F6 | 	mov	arg02, ##@LR__5296
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     4C CF B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     6C 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     8C 01 00 FF 
04cfc     D6 15 06 F6 | 	mov	arg02, ##@LR__5297
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     34 CF B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     5C 0A 90 AD |  if_e	jmp	#LR__0335
04d10     8C 01 00 FF 
04d14     DD 15 06 F6 | 	mov	arg02, ##@LR__5298
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     1C CF B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     4C 0A 90 AD |  if_e	jmp	#LR__0336
04d28     8C 01 00 FF 
04d2c     E4 15 06 F6 | 	mov	arg02, ##@LR__5299
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     04 CF B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     3C 0A 90 AD |  if_e	jmp	#LR__0337
04d40     8C 01 00 FF 
04d44     EE 15 06 F6 | 	mov	arg02, ##@LR__5300
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     EC CE B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     2C 0A 90 AD |  if_e	jmp	#LR__0338
04d58     8C 01 00 FF 
04d5c     F2 15 06 F6 | 	mov	arg02, ##@LR__5301
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     D4 CE B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     1C 0A 90 AD |  if_e	jmp	#LR__0339
04d70     8C 01 00 FF 
04d74     F6 15 06 F6 | 	mov	arg02, ##@LR__5302
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     BC CE B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     0C 0A 90 AD |  if_e	jmp	#LR__0340
04d88     8C 01 00 FF 
04d8c     FD 15 06 F6 | 	mov	arg02, ##@LR__5303
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     A4 CE B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     FC 09 90 AD |  if_e	jmp	#LR__0341
04da0     8D 01 00 FF 
04da4     01 14 06 F6 | 	mov	arg02, ##@LR__5304
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     8C CE B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     EC 09 90 AD |  if_e	jmp	#LR__0342
04db8     8D 01 00 FF 
04dbc     05 14 06 F6 | 	mov	arg02, ##@LR__5305
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     74 CE B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     DC 09 90 AD |  if_e	jmp	#LR__0343
04dd0     8D 01 00 FF 
04dd4     0B 14 06 F6 | 	mov	arg02, ##@LR__5306
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     5C CE B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     CC 09 90 AD |  if_e	jmp	#LR__0344
04de8     8D 01 00 FF 
04dec     10 14 06 F6 | 	mov	arg02, ##@LR__5307
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     44 CE B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     BC 09 90 AD |  if_e	jmp	#LR__0345
04e00     8D 01 00 FF 
04e04     17 14 06 F6 | 	mov	arg02, ##@LR__5308
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     2C CE B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     AC 09 90 AD |  if_e	jmp	#LR__0346
04e18     8D 01 00 FF 
04e1c     1B 14 06 F6 | 	mov	arg02, ##@LR__5309
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     14 CE B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     9C 09 90 AD |  if_e	jmp	#LR__0347
04e30     8D 01 00 FF 
04e34     20 14 06 F6 | 	mov	arg02, ##@LR__5310
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     FC CD B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     8C 09 90 AD |  if_e	jmp	#LR__0348
04e48     8D 01 00 FF 
04e4c     24 14 06 F6 | 	mov	arg02, ##@LR__5311
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     E4 CD B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     7C 09 90 AD |  if_e	jmp	#LR__0349
04e60     8D 01 00 FF 
04e64     2A 14 06 F6 | 	mov	arg02, ##@LR__5312
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     CC CD B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     6C 09 90 AD |  if_e	jmp	#LR__0350
04e78     8D 01 00 FF 
04e7c     2D 14 06 F6 | 	mov	arg02, ##@LR__5313
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     B4 CD B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     5C 09 90 AD |  if_e	jmp	#LR__0351
04e90     8D 01 00 FF 
04e94     35 14 06 F6 | 	mov	arg02, ##@LR__5314
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     9C CD B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     4C 09 90 AD |  if_e	jmp	#LR__0352
04ea8     8D 01 00 FF 
04eac     39 14 06 F6 | 	mov	arg02, ##@LR__5315
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     84 CD B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     3C 09 90 AD |  if_e	jmp	#LR__0353
04ec0     8D 01 00 FF 
04ec4     3E 14 06 F6 | 	mov	arg02, ##@LR__5316
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     6C CD B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     2C 09 90 AD |  if_e	jmp	#LR__0354
04ed8     8D 01 00 FF 
04edc     42 14 06 F6 | 	mov	arg02, ##@LR__5317
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     54 CD B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     1C 09 90 AD |  if_e	jmp	#LR__0355
04ef0     8D 01 00 FF 
04ef4     47 14 06 F6 | 	mov	arg02, ##@LR__5318
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     3C CD B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     0C 09 90 AD |  if_e	jmp	#LR__0356
04f08     8D 01 00 FF 
04f0c     4B 14 06 F6 | 	mov	arg02, ##@LR__5319
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     24 CD B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     FC 08 90 AD |  if_e	jmp	#LR__0357
04f20     8D 01 00 FF 
04f24     4E 14 06 F6 | 	mov	arg02, ##@LR__5320
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     0C CD B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     EC 08 90 AD |  if_e	jmp	#LR__0358
04f38     8D 01 00 FF 
04f3c     54 14 06 F6 | 	mov	arg02, ##@LR__5321
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     F4 CC B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     DC 08 90 AD |  if_e	jmp	#LR__0359
04f50     8D 01 00 FF 
04f54     58 14 06 F6 | 	mov	arg02, ##@LR__5322
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     DC CC B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     CC 08 90 AD |  if_e	jmp	#LR__0360
04f68     8D 01 00 FF 
04f6c     5C 14 06 F6 | 	mov	arg02, ##@LR__5323
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     C4 CC B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     BC 08 90 AD |  if_e	jmp	#LR__0361
04f80     8D 01 00 FF 
04f84     62 14 06 F6 | 	mov	arg02, ##@LR__5324
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     AC CC B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     AC 08 90 AD |  if_e	jmp	#LR__0362
04f98     8D 01 00 FF 
04f9c     67 14 06 F6 | 	mov	arg02, ##@LR__5325
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     94 CC B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     9C 08 90 AD |  if_e	jmp	#LR__0363
04fb0     8D 01 00 FF 
04fb4     6A 14 06 F6 | 	mov	arg02, ##@LR__5326
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     7C CC B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     8C 08 90 AD |  if_e	jmp	#LR__0364
04fc8     8D 01 00 FF 
04fcc     6D 14 06 F6 | 	mov	arg02, ##@LR__5327
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     64 CC B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     7C 08 90 AD |  if_e	jmp	#LR__0365
04fe0     8D 01 00 FF 
04fe4     71 14 06 F6 | 	mov	arg02, ##@LR__5328
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     4C CC B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     6C 08 90 AD |  if_e	jmp	#LR__0366
04ff8     8D 01 00 FF 
04ffc     74 14 06 F6 | 	mov	arg02, ##@LR__5329
05000     13 13 02 F6 | 	mov	arg01, local01
05004     34 CC B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     5C 08 90 AD |  if_e	jmp	#LR__0367
05010     8D 01 00 FF 
05014     79 14 06 F6 | 	mov	arg02, ##@LR__5330
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     1C CC B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     4C 08 90 AD |  if_e	jmp	#LR__0368
05028     8D 01 00 FF 
0502c     7C 14 06 F6 | 	mov	arg02, ##@LR__5331
05030     13 13 02 F6 | 	mov	arg01, local01
05034     04 CC B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     3C 08 90 AD |  if_e	jmp	#LR__0369
05040     8D 01 00 FF 
05044     81 14 06 F6 | 	mov	arg02, ##@LR__5332
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     EC CB B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     2C 08 90 AD |  if_e	jmp	#LR__0370
05058     8D 01 00 FF 
0505c     85 14 06 F6 | 	mov	arg02, ##@LR__5333
05060     13 13 02 F6 | 	mov	arg01, local01
05064     D4 CB B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     1C 08 90 AD |  if_e	jmp	#LR__0371
05070     8D 01 00 FF 
05074     8B 14 06 F6 | 	mov	arg02, ##@LR__5334
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     BC CB B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     0C 08 90 AD |  if_e	jmp	#LR__0372
05088     8D 01 00 FF 
0508c     91 14 06 F6 | 	mov	arg02, ##@LR__5335
05090     13 13 02 F6 | 	mov	arg01, local01
05094     A4 CB B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     FC 07 90 AD |  if_e	jmp	#LR__0373
050a0     8D 01 00 FF 
050a4     96 14 06 F6 | 	mov	arg02, ##@LR__5336
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     8C CB B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     EC 07 90 AD |  if_e	jmp	#LR__0374
050b8     8D 01 00 FF 
050bc     99 14 06 F6 | 	mov	arg02, ##@LR__5337
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     74 CB B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     DC 07 90 AD |  if_e	jmp	#LR__0375
050d0     8D 01 00 FF 
050d4     9F 14 06 F6 | 	mov	arg02, ##@LR__5338
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     5C CB B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     CC 07 90 AD |  if_e	jmp	#LR__0376
050e8     8D 01 00 FF 
050ec     A3 14 06 F6 | 	mov	arg02, ##@LR__5339
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     44 CB B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     BC 07 90 AD |  if_e	jmp	#LR__0377
05100     8D 01 00 FF 
05104     A8 14 06 F6 | 	mov	arg02, ##@LR__5340
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     2C CB B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     AC 07 90 AD |  if_e	jmp	#LR__0378
05118     8D 01 00 FF 
0511c     AB 14 06 F6 | 	mov	arg02, ##@LR__5341
05120     13 13 02 F6 | 	mov	arg01, local01
05124     14 CB B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     9C 07 90 AD |  if_e	jmp	#LR__0379
05130     8D 01 00 FF 
05134     B0 14 06 F6 | 	mov	arg02, ##@LR__5342
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     FC CA B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     8C 07 90 AD |  if_e	jmp	#LR__0380
05148     8D 01 00 FF 
0514c     B6 14 06 F6 | 	mov	arg02, ##@LR__5343
05150     13 13 02 F6 | 	mov	arg01, local01
05154     E4 CA B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     7C 07 90 AD |  if_e	jmp	#LR__0381
05160     8D 01 00 FF 
05164     BA 14 06 F6 | 	mov	arg02, ##@LR__5344
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     CC CA B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     6C 07 90 AD |  if_e	jmp	#LR__0382
05178     8D 01 00 FF 
0517c     C3 14 06 F6 | 	mov	arg02, ##@LR__5345
05180     13 13 02 F6 | 	mov	arg01, local01
05184     B4 CA B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     5C 07 90 AD |  if_e	jmp	#LR__0383
05190     8D 01 00 FF 
05194     C9 14 06 F6 | 	mov	arg02, ##@LR__5346
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     9C CA B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     4C 07 90 AD |  if_e	jmp	#LR__0384
051a8     8D 01 00 FF 
051ac     CF 14 06 F6 | 	mov	arg02, ##@LR__5347
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     84 CA B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     3C 07 90 AD |  if_e	jmp	#LR__0385
051c0     8D 01 00 FF 
051c4     D8 14 06 F6 | 	mov	arg02, ##@LR__5348
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     6C CA B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     2C 07 90 AD |  if_e	jmp	#LR__0386
051d8     8D 01 00 FF 
051dc     E2 14 06 F6 | 	mov	arg02, ##@LR__5349
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     54 CA B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     1C 07 90 AD |  if_e	jmp	#LR__0387
051f0     8D 01 00 FF 
051f4     EB 14 06 F6 | 	mov	arg02, ##@LR__5350
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     3C CA B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     0C 07 90 AD |  if_e	jmp	#LR__0388
05208     8D 01 00 FF 
0520c     F0 14 06 F6 | 	mov	arg02, ##@LR__5351
05210     13 13 02 F6 | 	mov	arg01, local01
05214     24 CA B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     FC 06 90 AD |  if_e	jmp	#LR__0389
05220     8D 01 00 FF 
05224     F3 14 06 F6 | 	mov	arg02, ##@LR__5352
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     0C CA B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     EC 06 90 AD |  if_e	jmp	#LR__0390
05238     8D 01 00 FF 
0523c     F8 14 06 F6 | 	mov	arg02, ##@LR__5353
05240     13 13 02 F6 | 	mov	arg01, local01
05244     F4 C9 B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     DC 06 90 AD |  if_e	jmp	#LR__0391
05250     8D 01 00 FF 
05254     FC 14 06 F6 | 	mov	arg02, ##@LR__5354
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     DC C9 B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     CC 06 90 AD |  if_e	jmp	#LR__0392
05268     8D 01 00 FF 
0526c     01 15 06 F6 | 	mov	arg02, ##@LR__5355
05270     13 13 02 F6 | 	mov	arg01, local01
05274     C4 C9 B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     BC 06 90 AD |  if_e	jmp	#LR__0393
05280     8D 01 00 FF 
05284     05 15 06 F6 | 	mov	arg02, ##@LR__5356
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     AC C9 B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     AC 06 90 AD |  if_e	jmp	#LR__0394
05298     8D 01 00 FF 
0529c     0E 15 06 F6 | 	mov	arg02, ##@LR__5357
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     94 C9 B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     9C 06 90 AD |  if_e	jmp	#LR__0395
052b0     8D 01 00 FF 
052b4     13 15 06 F6 | 	mov	arg02, ##@LR__5358
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     7C C9 B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     8C 06 90 AD |  if_e	jmp	#LR__0396
052c8     8D 01 00 FF 
052cc     19 15 06 F6 | 	mov	arg02, ##@LR__5359
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     64 C9 B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     7C 06 90 AD |  if_e	jmp	#LR__0397
052e0     8D 01 00 FF 
052e4     1B 15 06 F6 | 	mov	arg02, ##@LR__5360
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     4C C9 B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     6C 06 90 AD |  if_e	jmp	#LR__0398
052f8     8D 01 00 FF 
052fc     1F 15 06 F6 | 	mov	arg02, ##@LR__5361
05300     13 13 02 F6 | 	mov	arg01, local01
05304     34 C9 B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     5C 06 90 AD |  if_e	jmp	#LR__0399
05310     8D 01 00 FF 
05314     23 15 06 F6 | 	mov	arg02, ##@LR__5362
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     1C C9 B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     4C 06 90 AD |  if_e	jmp	#LR__0400
05328     8D 01 00 FF 
0532c     2B 15 06 F6 | 	mov	arg02, ##@LR__5363
05330     13 13 02 F6 | 	mov	arg01, local01
05334     04 C9 B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     3C 06 90 AD |  if_e	jmp	#LR__0401
05340     8D 01 00 FF 
05344     2F 15 06 F6 | 	mov	arg02, ##@LR__5364
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     EC C8 B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     2C 06 90 AD |  if_e	jmp	#LR__0402
05358     8D 01 00 FF 
0535c     31 15 06 F6 | 	mov	arg02, ##@LR__5365
05360     13 13 02 F6 | 	mov	arg01, local01
05364     D4 C8 B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     1C 06 90 AD |  if_e	jmp	#LR__0403
05370     8D 01 00 FF 
05374     38 15 06 F6 | 	mov	arg02, ##@LR__5366
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     BC C8 B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     0C 06 90 AD |  if_e	jmp	#LR__0404
05388     8D 01 00 FF 
0538c     3C 15 06 F6 | 	mov	arg02, ##@LR__5367
05390     13 13 02 F6 | 	mov	arg01, local01
05394     A4 C8 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     FC 05 90 AD |  if_e	jmp	#LR__0405
053a0     8D 01 00 FF 
053a4     41 15 06 F6 | 	mov	arg02, ##@LR__5368
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     8C C8 B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     EC 05 90 AD |  if_e	jmp	#LR__0406
053b8     8D 01 00 FF 
053bc     44 15 06 F6 | 	mov	arg02, ##@LR__5369
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     74 C8 B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     DC 05 90 AD |  if_e	jmp	#LR__0407
053d0     8D 01 00 FF 
053d4     4D 15 06 F6 | 	mov	arg02, ##@LR__5370
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     5C C8 B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     CC 05 90 AD |  if_e	jmp	#LR__0408
053e8     8D 01 00 FF 
053ec     51 15 06 F6 | 	mov	arg02, ##@LR__5371
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     44 C8 B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     BC 05 90 AD |  if_e	jmp	#LR__0409
05400     8D 01 00 FF 
05404     58 15 06 F6 | 	mov	arg02, ##@LR__5372
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     2C C8 B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     AC 05 90 AD |  if_e	jmp	#LR__0410
05418     8D 01 00 FF 
0541c     5C 15 06 F6 | 	mov	arg02, ##@LR__5373
05420     13 13 02 F6 | 	mov	arg01, local01
05424     14 C8 B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     9C 05 90 AD |  if_e	jmp	#LR__0411
05430     8D 01 00 FF 
05434     63 15 06 F6 | 	mov	arg02, ##@LR__5374
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     FC C7 B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     8C 05 90 AD |  if_e	jmp	#LR__0412
05448     8D 01 00 FF 
0544c     67 15 06 F6 | 	mov	arg02, ##@LR__5375
05450     13 13 02 F6 | 	mov	arg01, local01
05454     E4 C7 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     7C 05 90 AD |  if_e	jmp	#LR__0413
05460     8D 01 00 FF 
05464     6E 15 06 F6 | 	mov	arg02, ##@LR__5376
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     CC C7 B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     6C 05 90 AD |  if_e	jmp	#LR__0414
05478     8D 01 00 FF 
0547c     71 15 06 F6 | 	mov	arg02, ##@LR__5377
05480     13 13 02 F6 | 	mov	arg01, local01
05484     B4 C7 B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     5C 05 90 AD |  if_e	jmp	#LR__0415
05490     8D 01 00 FF 
05494     7C 15 06 F6 | 	mov	arg02, ##@LR__5378
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     9C C7 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     4C 05 90 AD |  if_e	jmp	#LR__0416
054a8     8D 01 00 FF 
054ac     80 15 06 F6 | 	mov	arg02, ##@LR__5379
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     84 C7 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     3C 05 90 AD |  if_e	jmp	#LR__0417
054c0     8D 01 00 FF 
054c4     87 15 06 F6 | 	mov	arg02, ##@LR__5380
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     6C C7 B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     2C 05 90 AD |  if_e	jmp	#LR__0418
054d8     8D 01 00 FF 
054dc     8B 15 06 F6 | 	mov	arg02, ##@LR__5381
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     54 C7 B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     1C 05 90 AD |  if_e	jmp	#LR__0419
054f0     8D 01 00 FF 
054f4     93 15 06 F6 | 	mov	arg02, ##@LR__5382
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     3C C7 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     0C 05 90 AD |  if_e	jmp	#LR__0420
05508     8D 01 00 FF 
0550c     97 15 06 F6 | 	mov	arg02, ##@LR__5383
05510     13 13 02 F6 | 	mov	arg01, local01
05514     24 C7 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     FC 04 90 AD |  if_e	jmp	#LR__0421
05520     8D 01 00 FF 
05524     9E 15 06 F6 | 	mov	arg02, ##@LR__5384
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     0C C7 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     EC 04 90 AD |  if_e	jmp	#LR__0422
05538     8D 01 00 FF 
0553c     A5 15 06 F6 | 	mov	arg02, ##@LR__5385
05540     13 13 02 F6 | 	mov	arg01, local01
05544     F4 C6 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     DC 04 90 AD |  if_e	jmp	#LR__0423
05550     8D 01 00 FF 
05554     A9 15 06 F6 | 	mov	arg02, ##@LR__5386
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     DC C6 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     CC 04 90 AD |  if_e	jmp	#LR__0424
05568     8D 01 00 FF 
0556c     AF 15 06 F6 | 	mov	arg02, ##@LR__5387
05570     13 13 02 F6 | 	mov	arg01, local01
05574     C4 C6 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     BC 04 90 AD |  if_e	jmp	#LR__0425
05580     8D 01 00 FF 
05584     B3 15 06 F6 | 	mov	arg02, ##@LR__5388
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     AC C6 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     AC 04 90 AD |  if_e	jmp	#LR__0426
05598     8D 01 00 FF 
0559c     BA 15 06 F6 | 	mov	arg02, ##@LR__5389
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     94 C6 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     9C 04 90 AD |  if_e	jmp	#LR__0427
055b0     8D 01 00 FF 
055b4     BF 15 06 F6 | 	mov	arg02, ##@LR__5390
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     7C C6 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     8C 04 90 AD |  if_e	jmp	#LR__0428
055c8     8D 01 00 FF 
055cc     C4 15 06 F6 | 	mov	arg02, ##@LR__5391
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     64 C6 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     7C 04 90 AD |  if_e	jmp	#LR__0429
055e0     8D 01 00 FF 
055e4     CB 15 06 F6 | 	mov	arg02, ##@LR__5392
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     4C C6 B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     6C 04 90 AD |  if_e	jmp	#LR__0430
055f8     8D 01 00 FF 
055fc     CE 15 06 F6 | 	mov	arg02, ##@LR__5393
05600     13 13 02 F6 | 	mov	arg01, local01
05604     34 C6 B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     5C 04 90 AD |  if_e	jmp	#LR__0431
05610     8D 01 00 FF 
05614     D8 15 06 F6 | 	mov	arg02, ##@LR__5394
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     1C C6 B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     4C 04 90 AD |  if_e	jmp	#LR__0432
05628     8D 01 00 FF 
0562c     DC 15 06 F6 | 	mov	arg02, ##@LR__5395
05630     13 13 02 F6 | 	mov	arg01, local01
05634     04 C6 B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     3C 04 90 AD |  if_e	jmp	#LR__0433
05640     8D 01 00 FF 
05644     E4 15 06 F6 | 	mov	arg02, ##@LR__5396
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     EC C5 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     2C 04 90 AD |  if_e	jmp	#LR__0434
05658     8D 01 00 FF 
0565c     E8 15 06 F6 | 	mov	arg02, ##@LR__5397
05660     13 13 02 F6 | 	mov	arg01, local01
05664     D4 C5 B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     1C 04 90 AD |  if_e	jmp	#LR__0435
05670     8D 01 00 FF 
05674     EE 15 06 F6 | 	mov	arg02, ##@LR__5398
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     BC C5 B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     0C 04 90 AD |  if_e	jmp	#LR__0436
05688     8D 01 00 FF 
0568c     F4 15 06 F6 | 	mov	arg02, ##@LR__5399
05690     13 13 02 F6 | 	mov	arg01, local01
05694     A4 C5 B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     FC 03 90 AD |  if_e	jmp	#LR__0437
056a0     00 04 90 FD | 	jmp	#LR__0438
056a4                 | LR__0310
056a4     5C FA 05 F6 | 	mov	result1, #92
056a8     FC 03 90 FD | 	jmp	#LR__0439
056ac                 | LR__0311
056ac     5C FA 05 F6 | 	mov	result1, #92
056b0     F4 03 90 FD | 	jmp	#LR__0439
056b4                 | LR__0312
056b4     B9 FA 05 F6 | 	mov	result1, #185
056b8     EC 03 90 FD | 	jmp	#LR__0439
056bc                 | LR__0313
056bc     47 FA 05 F6 | 	mov	result1, #71
056c0     E4 03 90 FD | 	jmp	#LR__0439
056c4                 | LR__0314
056c4     59 FA 05 F6 | 	mov	result1, #89
056c8     DC 03 90 FD | 	jmp	#LR__0439
056cc                 | LR__0315
056cc     59 FA 05 F6 | 	mov	result1, #89
056d0     D4 03 90 FD | 	jmp	#LR__0439
056d4                 | LR__0316
056d4     C3 FA 05 F6 | 	mov	result1, #195
056d8     CC 03 90 FD | 	jmp	#LR__0439
056dc                 | LR__0317
056dc     AE FA 05 F6 | 	mov	result1, #174
056e0     C4 03 90 FD | 	jmp	#LR__0439
056e4                 | LR__0318
056e4     AE FA 05 F6 | 	mov	result1, #174
056e8     BC 03 90 FD | 	jmp	#LR__0439
056ec                 | LR__0319
056ec     B1 FA 05 F6 | 	mov	result1, #177
056f0     B4 03 90 FD | 	jmp	#LR__0439
056f4                 | LR__0320
056f4     B1 FA 05 F6 | 	mov	result1, #177
056f8     AC 03 90 FD | 	jmp	#LR__0439
056fc                 | LR__0321
056fc     AF FA 05 F6 | 	mov	result1, #175
05700     A4 03 90 FD | 	jmp	#LR__0439
05704                 | LR__0322
05704     AF FA 05 F6 | 	mov	result1, #175
05708     9C 03 90 FD | 	jmp	#LR__0439
0570c                 | LR__0323
0570c     B0 FA 05 F6 | 	mov	result1, #176
05710     94 03 90 FD | 	jmp	#LR__0439
05714                 | LR__0324
05714     B0 FA 05 F6 | 	mov	result1, #176
05718     8C 03 90 FD | 	jmp	#LR__0439
0571c                 | LR__0325
0571c     45 FA 05 F6 | 	mov	result1, #69
05720     84 03 90 FD | 	jmp	#LR__0439
05724                 | LR__0326
05724     45 FA 05 F6 | 	mov	result1, #69
05728     7C 03 90 FD | 	jmp	#LR__0439
0572c                 | LR__0327
0572c     69 FA 05 F6 | 	mov	result1, #105
05730     74 03 90 FD | 	jmp	#LR__0439
05734                 | LR__0328
05734     B4 FA 05 F6 | 	mov	result1, #180
05738     6C 03 90 FD | 	jmp	#LR__0439
0573c                 | LR__0329
0573c     40 FA 05 F6 | 	mov	result1, #64
05740     64 03 90 FD | 	jmp	#LR__0439
05744                 | LR__0330
05744     49 FA 05 F6 | 	mov	result1, #73
05748     5C 03 90 FD | 	jmp	#LR__0439
0574c                 | LR__0331
0574c     49 FA 05 F6 | 	mov	result1, #73
05750     54 03 90 FD | 	jmp	#LR__0439
05754                 | LR__0332
05754     50 FA 05 F6 | 	mov	result1, #80
05758     4C 03 90 FD | 	jmp	#LR__0439
0575c                 | LR__0333
0575c     50 FA 05 F6 | 	mov	result1, #80
05760     44 03 90 FD | 	jmp	#LR__0439
05764                 | LR__0334
05764     68 FA 05 F6 | 	mov	result1, #104
05768     3C 03 90 FD | 	jmp	#LR__0439
0576c                 | LR__0335
0576c     73 FA 05 F6 | 	mov	result1, #115
05770     34 03 90 FD | 	jmp	#LR__0439
05774                 | LR__0336
05774     74 FA 05 F6 | 	mov	result1, #116
05778     2C 03 90 FD | 	jmp	#LR__0439
0577c                 | LR__0337
0577c     6C FA 05 F6 | 	mov	result1, #108
05780     24 03 90 FD | 	jmp	#LR__0439
05784                 | LR__0338
05784     6C FA 05 F6 | 	mov	result1, #108
05788     1C 03 90 FD | 	jmp	#LR__0439
0578c                 | LR__0339
0578c     89 FA 05 F6 | 	mov	result1, #137
05790     14 03 90 FD | 	jmp	#LR__0439
05794                 | LR__0340
05794     C2 FA 05 F6 | 	mov	result1, #194
05798     0C 03 90 FD | 	jmp	#LR__0439
0579c                 | LR__0341
0579c     72 FA 05 F6 | 	mov	result1, #114
057a0     04 03 90 FD | 	jmp	#LR__0439
057a4                 | LR__0342
057a4     5D FA 05 F6 | 	mov	result1, #93
057a8     FC 02 90 FD | 	jmp	#LR__0439
057ac                 | LR__0343
057ac     96 FA 05 F6 | 	mov	result1, #150
057b0     F4 02 90 FD | 	jmp	#LR__0439
057b4                 | LR__0344
057b4     43 FA 05 F6 | 	mov	result1, #67
057b8     EC 02 90 FD | 	jmp	#LR__0439
057bc                 | LR__0345
057bc     43 FA 05 F6 | 	mov	result1, #67
057c0     E4 02 90 FD | 	jmp	#LR__0439
057c4                 | LR__0346
057c4     43 FA 05 F6 | 	mov	result1, #67
057c8     DC 02 90 FD | 	jmp	#LR__0439
057cc                 | LR__0347
057cc     5A FA 05 F6 | 	mov	result1, #90
057d0     D4 02 90 FD | 	jmp	#LR__0439
057d4                 | LR__0348
057d4     AB FA 05 F6 | 	mov	result1, #171
057d8     CC 02 90 FD | 	jmp	#LR__0439
057dc                 | LR__0349
057dc     BD FA 05 F6 | 	mov	result1, #189
057e0     C4 02 90 FD | 	jmp	#LR__0439
057e4                 | LR__0350
057e4     BD FA 05 F6 | 	mov	result1, #189
057e8     BC 02 90 FD | 	jmp	#LR__0439
057ec                 | LR__0351
057ec     46 FA 05 F6 | 	mov	result1, #70
057f0     B4 02 90 FD | 	jmp	#LR__0439
057f4                 | LR__0352
057f4     46 FA 05 F6 | 	mov	result1, #70
057f8     AC 02 90 FD | 	jmp	#LR__0439
057fc                 | LR__0353
057fc     71 FA 05 F6 | 	mov	result1, #113
05800     A4 02 90 FD | 	jmp	#LR__0439
05804                 | LR__0354
05804     71 FA 05 F6 | 	mov	result1, #113
05808     9C 02 90 FD | 	jmp	#LR__0439
0580c                 | LR__0355
0580c     60 FA 05 F6 | 	mov	result1, #96
05810     94 02 90 FD | 	jmp	#LR__0439
05814                 | LR__0356
05814     4A FA 05 F6 | 	mov	result1, #74
05818     8C 02 90 FD | 	jmp	#LR__0439
0581c                 | LR__0357
0581c     4A FA 05 F6 | 	mov	result1, #74
05820     84 02 90 FD | 	jmp	#LR__0439
05824                 | LR__0358
05824     48 FA 05 F6 | 	mov	result1, #72
05828     7C 02 90 FD | 	jmp	#LR__0439
0582c                 | LR__0359
0582c     48 FA 05 F6 | 	mov	result1, #72
05830     74 02 90 FD | 	jmp	#LR__0439
05834                 | LR__0360
05834     BB FA 05 F6 | 	mov	result1, #187
05838     6C 02 90 FD | 	jmp	#LR__0439
0583c                 | LR__0361
0583c     A9 FA 05 F6 | 	mov	result1, #169
05840     64 02 90 FD | 	jmp	#LR__0439
05844                 | LR__0362
05844     4E FA 05 F6 | 	mov	result1, #78
05848     5C 02 90 FD | 	jmp	#LR__0439
0584c                 | LR__0363
0584c     4E FA 05 F6 | 	mov	result1, #78
05850     54 02 90 FD | 	jmp	#LR__0439
05854                 | LR__0364
05854     58 FA 05 F6 | 	mov	result1, #88
05858     4C 02 90 FD | 	jmp	#LR__0439
0585c                 | LR__0365
0585c     5F FA 05 F6 | 	mov	result1, #95
05860     44 02 90 FD | 	jmp	#LR__0439
05864                 | LR__0366
05864     5F FA 05 F6 | 	mov	result1, #95
05868     3C 02 90 FD | 	jmp	#LR__0439
0586c                 | LR__0367
0586c     4C FA 05 F6 | 	mov	result1, #76
05870     34 02 90 FD | 	jmp	#LR__0439
05874                 | LR__0368
05874     4C FA 05 F6 | 	mov	result1, #76
05878     2C 02 90 FD | 	jmp	#LR__0439
0587c                 | LR__0369
0587c     52 FA 05 F6 | 	mov	result1, #82
05880     24 02 90 FD | 	jmp	#LR__0439
05884                 | LR__0370
05884     52 FA 05 F6 | 	mov	result1, #82
05888     1C 02 90 FD | 	jmp	#LR__0439
0588c                 | LR__0371
0588c     97 FA 05 F6 | 	mov	result1, #151
05890     14 02 90 FD | 	jmp	#LR__0439
05894                 | LR__0372
05894     C6 FA 05 F6 | 	mov	result1, #198
05898     0C 02 90 FD | 	jmp	#LR__0439
0589c                 | LR__0373
0589c     61 FA 05 F6 | 	mov	result1, #97
058a0     04 02 90 FD | 	jmp	#LR__0439
058a4                 | LR__0374
058a4     61 FA 05 F6 | 	mov	result1, #97
058a8     FC 01 90 FD | 	jmp	#LR__0439
058ac                 | LR__0375
058ac     63 FA 05 F6 | 	mov	result1, #99
058b0     F4 01 90 FD | 	jmp	#LR__0439
058b4                 | LR__0376
058b4     41 FA 05 F6 | 	mov	result1, #65
058b8     EC 01 90 FD | 	jmp	#LR__0439
058bc                 | LR__0377
058bc     4B FA 05 F6 | 	mov	result1, #75
058c0     E4 01 90 FD | 	jmp	#LR__0439
058c4                 | LR__0378
058c4     4B FA 05 F6 | 	mov	result1, #75
058c8     DC 01 90 FD | 	jmp	#LR__0439
058cc                 | LR__0379
058cc     B3 FA 05 F6 | 	mov	result1, #179
058d0     D4 01 90 FD | 	jmp	#LR__0439
058d4                 | LR__0380
058d4     5E FA 05 F6 | 	mov	result1, #94
058d8     CC 01 90 FD | 	jmp	#LR__0439
058dc                 | LR__0381
058dc     5E FA 05 F6 | 	mov	result1, #94
058e0     C4 01 90 FD | 	jmp	#LR__0439
058e4                 | LR__0382
058e4     7C FA 05 F6 | 	mov	result1, #124
058e8     BC 01 90 FD | 	jmp	#LR__0439
058ec                 | LR__0383
058ec     7E FA 05 F6 | 	mov	result1, #126
058f0     B4 01 90 FD | 	jmp	#LR__0439
058f4                 | LR__0384
058f4     7D FA 05 F6 | 	mov	result1, #125
058f8     AC 01 90 FD | 	jmp	#LR__0439
058fc                 | LR__0385
058fc     7F FA 05 F6 | 	mov	result1, #127
05900     A4 01 90 FD | 	jmp	#LR__0439
05904                 | LR__0386
05904     80 FA 05 F6 | 	mov	result1, #128
05908     9C 01 90 FD | 	jmp	#LR__0439
0590c                 | LR__0387
0590c     55 FA 05 F6 | 	mov	result1, #85
05910     94 01 90 FD | 	jmp	#LR__0439
05914                 | LR__0388
05914     75 FA 05 F6 | 	mov	result1, #117
05918     8C 01 90 FD | 	jmp	#LR__0439
0591c                 | LR__0389
0591c     75 FA 05 F6 | 	mov	result1, #117
05920     84 01 90 FD | 	jmp	#LR__0439
05924                 | LR__0390
05924     42 FA 05 F6 | 	mov	result1, #66
05928     7C 01 90 FD | 	jmp	#LR__0439
0592c                 | LR__0391
0592c     42 FA 05 F6 | 	mov	result1, #66
05930     74 01 90 FD | 	jmp	#LR__0439
05934                 | LR__0392
05934     95 FA 05 F6 | 	mov	result1, #149
05938     6C 01 90 FD | 	jmp	#LR__0439
0593c                 | LR__0393
0593c     AC FA 05 F6 | 	mov	result1, #172
05940     64 01 90 FD | 	jmp	#LR__0439
05944                 | LR__0394
05944     81 FA 05 F6 | 	mov	result1, #129
05948     5C 01 90 FD | 	jmp	#LR__0439
0594c                 | LR__0395
0594c     81 FA 05 F6 | 	mov	result1, #129
05950     54 01 90 FD | 	jmp	#LR__0439
05954                 | LR__0396
05954     44 FA 05 F6 | 	mov	result1, #68
05958     4C 01 90 FD | 	jmp	#LR__0439
0595c                 | LR__0397
0595c     44 FA 05 F6 | 	mov	result1, #68
05960     44 01 90 FD | 	jmp	#LR__0439
05964                 | LR__0398
05964     BC FA 05 F6 | 	mov	result1, #188
05968     3C 01 90 FD | 	jmp	#LR__0439
0596c                 | LR__0399
0596c     88 FA 05 F6 | 	mov	result1, #136
05970     34 01 90 FD | 	jmp	#LR__0439
05974                 | LR__0400
05974     92 FA 05 F6 | 	mov	result1, #146
05978     2C 01 90 FD | 	jmp	#LR__0439
0597c                 | LR__0401
0597c     BE FA 05 F6 | 	mov	result1, #190
05980     24 01 90 FD | 	jmp	#LR__0439
05984                 | LR__0402
05984     BE FA 05 F6 | 	mov	result1, #190
05988     1C 01 90 FD | 	jmp	#LR__0439
0598c                 | LR__0403
0598c     AA FA 05 F6 | 	mov	result1, #170
05990     14 01 90 FD | 	jmp	#LR__0439
05994                 | LR__0404
05994     4D FA 05 F6 | 	mov	result1, #77
05998     0C 01 90 FD | 	jmp	#LR__0439
0599c                 | LR__0405
0599c     51 FA 05 F6 | 	mov	result1, #81
059a0     04 01 90 FD | 	jmp	#LR__0439
059a4                 | LR__0406
059a4     51 FA 05 F6 | 	mov	result1, #81
059a8     FC 00 90 FD | 	jmp	#LR__0439
059ac                 | LR__0407
059ac     8E FA 05 F6 | 	mov	result1, #142
059b0     F4 00 90 FD | 	jmp	#LR__0439
059b4                 | LR__0408
059b4     8E FA 05 F6 | 	mov	result1, #142
059b8     EC 00 90 FD | 	jmp	#LR__0439
059bc                 | LR__0409
059bc     90 FA 05 F6 | 	mov	result1, #144
059c0     E4 00 90 FD | 	jmp	#LR__0439
059c4                 | LR__0410
059c4     90 FA 05 F6 | 	mov	result1, #144
059c8     DC 00 90 FD | 	jmp	#LR__0439
059cc                 | LR__0411
059cc     8D FA 05 F6 | 	mov	result1, #141
059d0     D4 00 90 FD | 	jmp	#LR__0439
059d4                 | LR__0412
059d4     8D FA 05 F6 | 	mov	result1, #141
059d8     CC 00 90 FD | 	jmp	#LR__0439
059dc                 | LR__0413
059dc     8C FA 05 F6 | 	mov	result1, #140
059e0     C4 00 90 FD | 	jmp	#LR__0439
059e4                 | LR__0414
059e4     8C FA 05 F6 | 	mov	result1, #140
059e8     BC 00 90 FD | 	jmp	#LR__0439
059ec                 | LR__0415
059ec     91 FA 05 F6 | 	mov	result1, #145
059f0     B4 00 90 FD | 	jmp	#LR__0439
059f4                 | LR__0416
059f4     91 FA 05 F6 | 	mov	result1, #145
059f8     AC 00 90 FD | 	jmp	#LR__0439
059fc                 | LR__0417
059fc     8B FA 05 F6 | 	mov	result1, #139
05a00     A4 00 90 FD | 	jmp	#LR__0439
05a04                 | LR__0418
05a04     8B FA 05 F6 | 	mov	result1, #139
05a08     9C 00 90 FD | 	jmp	#LR__0439
05a0c                 | LR__0419
05a0c     8F FA 05 F6 | 	mov	result1, #143
05a10     94 00 90 FD | 	jmp	#LR__0439
05a14                 | LR__0420
05a14     8F FA 05 F6 | 	mov	result1, #143
05a18     8C 00 90 FD | 	jmp	#LR__0439
05a1c                 | LR__0421
05a1c     8F FA 05 F6 | 	mov	result1, #143
05a20     84 00 90 FD | 	jmp	#LR__0439
05a24                 | LR__0422
05a24     B2 FA 05 F6 | 	mov	result1, #178
05a28     7C 00 90 FD | 	jmp	#LR__0439
05a2c                 | LR__0423
05a2c     B2 FA 05 F6 | 	mov	result1, #178
05a30     74 00 90 FD | 	jmp	#LR__0439
05a34                 | LR__0424
05a34     75 FA 05 F6 | 	mov	result1, #117
05a38     6C 00 90 FD | 	jmp	#LR__0439
05a3c                 | LR__0425
05a3c     75 FA 05 F6 | 	mov	result1, #117
05a40     64 00 90 FD | 	jmp	#LR__0439
05a44                 | LR__0426
05a44     6D FA 05 F6 | 	mov	result1, #109
05a48     5C 00 90 FD | 	jmp	#LR__0439
05a4c                 | LR__0427
05a4c     6D FA 05 F6 | 	mov	result1, #109
05a50     54 00 90 FD | 	jmp	#LR__0439
05a54                 | LR__0428
05a54     5B FA 05 F6 | 	mov	result1, #91
05a58     4C 00 90 FD | 	jmp	#LR__0439
05a5c                 | LR__0429
05a5c     56 FA 05 F6 | 	mov	result1, #86
05a60     44 00 90 FD | 	jmp	#LR__0439
05a64                 | LR__0430
05a64     56 FA 05 F6 | 	mov	result1, #86
05a68     3C 00 90 FD | 	jmp	#LR__0439
05a6c                 | LR__0431
05a6c     70 FA 05 F6 | 	mov	result1, #112
05a70     34 00 90 FD | 	jmp	#LR__0439
05a74                 | LR__0432
05a74     70 FA 05 F6 | 	mov	result1, #112
05a78     2C 00 90 FD | 	jmp	#LR__0439
05a7c                 | LR__0433
05a7c     57 FA 05 F6 | 	mov	result1, #87
05a80     24 00 90 FD | 	jmp	#LR__0439
05a84                 | LR__0434
05a84     57 FA 05 F6 | 	mov	result1, #87
05a88     1C 00 90 FD | 	jmp	#LR__0439
05a8c                 | LR__0435
05a8c     79 FA 05 F6 | 	mov	result1, #121
05a90     14 00 90 FD | 	jmp	#LR__0439
05a94                 | LR__0436
05a94     77 FA 05 F6 | 	mov	result1, #119
05a98     0C 00 90 FD | 	jmp	#LR__0439
05a9c                 | LR__0437
05a9c     78 FA 05 F6 | 	mov	result1, #120
05aa0     04 00 90 FD | 	jmp	#LR__0439
05aa4                 | LR__0438
05aa4     00 FA 05 F6 | 	mov	result1, #0
05aa8                 | LR__0439
05aa8     A7 F0 03 F6 | 	mov	ptra, fp
05aac     B2 00 A0 FD | 	call	#popregs_
05ab0                 | _iscommand_ret
05ab0     2D 00 64 FD | 	ret
05ab4                 | 
05ab4                 | ' 
05ab4                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05ab4                 | ' 
05ab4                 | ' function isfunction(s as string) as ubyte
05ab4                 | _isfunction
05ab4     01 4A 05 F6 | 	mov	COUNT_, #1
05ab8     A8 00 A0 FD | 	call	#pushregs_
05abc                 | ' 
05abc                 | ' select case s
05abc     09 27 02 F6 | 	mov	local01, arg01
05ac0     8D 01 00 FF 
05ac4     FA 15 06 F6 | 	mov	arg02, ##@LR__5400
05ac8     13 13 02 F6 | 	mov	arg01, local01
05acc     6C C1 B1 FD | 	call	#__system___string_cmp
05ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad4     3C 04 90 AD |  if_e	jmp	#LR__0440
05ad8     8D 01 00 FF 
05adc     FE 15 06 F6 | 	mov	arg02, ##@LR__5401
05ae0     13 13 02 F6 | 	mov	arg01, local01
05ae4     54 C1 B1 FD | 	call	#__system___string_cmp
05ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
05aec     2C 04 90 AD |  if_e	jmp	#LR__0441
05af0     8E 01 00 FF 
05af4     03 14 06 F6 | 	mov	arg02, ##@LR__5402
05af8     13 13 02 F6 | 	mov	arg01, local01
05afc     3C C1 B1 FD | 	call	#__system___string_cmp
05b00     00 FA 0D F2 | 	cmp	result1, #0 wz
05b04     1C 04 90 AD |  if_e	jmp	#LR__0442
05b08     8E 01 00 FF 
05b0c     07 14 06 F6 | 	mov	arg02, ##@LR__5403
05b10     13 13 02 F6 | 	mov	arg01, local01
05b14     24 C1 B1 FD | 	call	#__system___string_cmp
05b18     00 FA 0D F2 | 	cmp	result1, #0 wz
05b1c     0C 04 90 AD |  if_e	jmp	#LR__0443
05b20     8E 01 00 FF 
05b24     0C 14 06 F6 | 	mov	arg02, ##@LR__5404
05b28     13 13 02 F6 | 	mov	arg01, local01
05b2c     0C C1 B1 FD | 	call	#__system___string_cmp
05b30     00 FA 0D F2 | 	cmp	result1, #0 wz
05b34     FC 03 90 AD |  if_e	jmp	#LR__0444
05b38     8E 01 00 FF 
05b3c     10 14 06 F6 | 	mov	arg02, ##@LR__5405
05b40     13 13 02 F6 | 	mov	arg01, local01
05b44     F4 C0 B1 FD | 	call	#__system___string_cmp
05b48     00 FA 0D F2 | 	cmp	result1, #0 wz
05b4c     EC 03 90 AD |  if_e	jmp	#LR__0445
05b50     8E 01 00 FF 
05b54     15 14 06 F6 | 	mov	arg02, ##@LR__5406
05b58     13 13 02 F6 | 	mov	arg01, local01
05b5c     DC C0 B1 FD | 	call	#__system___string_cmp
05b60     00 FA 0D F2 | 	cmp	result1, #0 wz
05b64     DC 03 90 AD |  if_e	jmp	#LR__0446
05b68     8E 01 00 FF 
05b6c     19 14 06 F6 | 	mov	arg02, ##@LR__5407
05b70     13 13 02 F6 | 	mov	arg01, local01
05b74     C4 C0 B1 FD | 	call	#__system___string_cmp
05b78     00 FA 0D F2 | 	cmp	result1, #0 wz
05b7c     CC 03 90 AD |  if_e	jmp	#LR__0447
05b80     8E 01 00 FF 
05b84     1E 14 06 F6 | 	mov	arg02, ##@LR__5408
05b88     13 13 02 F6 | 	mov	arg01, local01
05b8c     AC C0 B1 FD | 	call	#__system___string_cmp
05b90     00 FA 0D F2 | 	cmp	result1, #0 wz
05b94     BC 03 90 AD |  if_e	jmp	#LR__0448
05b98     8E 01 00 FF 
05b9c     23 14 06 F6 | 	mov	arg02, ##@LR__5409
05ba0     13 13 02 F6 | 	mov	arg01, local01
05ba4     94 C0 B1 FD | 	call	#__system___string_cmp
05ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bac     AC 03 90 AD |  if_e	jmp	#LR__0449
05bb0     8E 01 00 FF 
05bb4     27 14 06 F6 | 	mov	arg02, ##@LR__5410
05bb8     13 13 02 F6 | 	mov	arg01, local01
05bbc     7C C0 B1 FD | 	call	#__system___string_cmp
05bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bc4     9C 03 90 AD |  if_e	jmp	#LR__0450
05bc8     8E 01 00 FF 
05bcc     2D 14 06 F6 | 	mov	arg02, ##@LR__5411
05bd0     13 13 02 F6 | 	mov	arg01, local01
05bd4     64 C0 B1 FD | 	call	#__system___string_cmp
05bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bdc     8C 03 90 AD |  if_e	jmp	#LR__0451
05be0     8E 01 00 FF 
05be4     36 14 06 F6 | 	mov	arg02, ##@LR__5412
05be8     13 13 02 F6 | 	mov	arg01, local01
05bec     4C C0 B1 FD | 	call	#__system___string_cmp
05bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bf4     7C 03 90 AD |  if_e	jmp	#LR__0452
05bf8     8E 01 00 FF 
05bfc     3A 14 06 F6 | 	mov	arg02, ##@LR__5413
05c00     13 13 02 F6 | 	mov	arg01, local01
05c04     34 C0 B1 FD | 	call	#__system___string_cmp
05c08     00 FA 0D F2 | 	cmp	result1, #0 wz
05c0c     6C 03 90 AD |  if_e	jmp	#LR__0453
05c10     8E 01 00 FF 
05c14     3E 14 06 F6 | 	mov	arg02, ##@LR__5414
05c18     13 13 02 F6 | 	mov	arg01, local01
05c1c     1C C0 B1 FD | 	call	#__system___string_cmp
05c20     00 FA 0D F2 | 	cmp	result1, #0 wz
05c24     5C 03 90 AD |  if_e	jmp	#LR__0454
05c28     8E 01 00 FF 
05c2c     47 14 06 F6 | 	mov	arg02, ##@LR__5415
05c30     13 13 02 F6 | 	mov	arg01, local01
05c34     04 C0 B1 FD | 	call	#__system___string_cmp
05c38     00 FA 0D F2 | 	cmp	result1, #0 wz
05c3c     4C 03 90 AD |  if_e	jmp	#LR__0455
05c40     8E 01 00 FF 
05c44     4B 14 06 F6 | 	mov	arg02, ##@LR__5416
05c48     13 13 02 F6 | 	mov	arg01, local01
05c4c     EC BF B1 FD | 	call	#__system___string_cmp
05c50     00 FA 0D F2 | 	cmp	result1, #0 wz
05c54     3C 03 90 AD |  if_e	jmp	#LR__0456
05c58     8E 01 00 FF 
05c5c     59 14 06 F6 | 	mov	arg02, ##@LR__5417
05c60     13 13 02 F6 | 	mov	arg01, local01
05c64     D4 BF B1 FD | 	call	#__system___string_cmp
05c68     00 FA 0D F2 | 	cmp	result1, #0 wz
05c6c     2C 03 90 AD |  if_e	jmp	#LR__0457
05c70     8E 01 00 FF 
05c74     66 14 06 F6 | 	mov	arg02, ##@LR__5418
05c78     13 13 02 F6 | 	mov	arg01, local01
05c7c     BC BF B1 FD | 	call	#__system___string_cmp
05c80     00 FA 0D F2 | 	cmp	result1, #0 wz
05c84     1C 03 90 AD |  if_e	jmp	#LR__0458
05c88     8E 01 00 FF 
05c8c     6E 14 06 F6 | 	mov	arg02, ##@LR__5419
05c90     13 13 02 F6 | 	mov	arg01, local01
05c94     A4 BF B1 FD | 	call	#__system___string_cmp
05c98     00 FA 0D F2 | 	cmp	result1, #0 wz
05c9c     0C 03 90 AD |  if_e	jmp	#LR__0459
05ca0     8E 01 00 FF 
05ca4     73 14 06 F6 | 	mov	arg02, ##@LR__5420
05ca8     13 13 02 F6 | 	mov	arg01, local01
05cac     8C BF B1 FD | 	call	#__system___string_cmp
05cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cb4     FC 02 90 AD |  if_e	jmp	#LR__0460
05cb8     8E 01 00 FF 
05cbc     7A 14 06 F6 | 	mov	arg02, ##@LR__5421
05cc0     13 13 02 F6 | 	mov	arg01, local01
05cc4     74 BF B1 FD | 	call	#__system___string_cmp
05cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ccc     EC 02 90 AD |  if_e	jmp	#LR__0461
05cd0     8E 01 00 FF 
05cd4     7E 14 06 F6 | 	mov	arg02, ##@LR__5422
05cd8     13 13 02 F6 | 	mov	arg01, local01
05cdc     5C BF B1 FD | 	call	#__system___string_cmp
05ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ce4     DC 02 90 AD |  if_e	jmp	#LR__0462
05ce8     8E 01 00 FF 
05cec     84 14 06 F6 | 	mov	arg02, ##@LR__5423
05cf0     13 13 02 F6 | 	mov	arg01, local01
05cf4     44 BF B1 FD | 	call	#__system___string_cmp
05cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cfc     CC 02 90 AD |  if_e	jmp	#LR__0463
05d00     8E 01 00 FF 
05d04     88 14 06 F6 | 	mov	arg02, ##@LR__5424
05d08     13 13 02 F6 | 	mov	arg01, local01
05d0c     2C BF B1 FD | 	call	#__system___string_cmp
05d10     00 FA 0D F2 | 	cmp	result1, #0 wz
05d14     BC 02 90 AD |  if_e	jmp	#LR__0464
05d18     8E 01 00 FF 
05d1c     8C 14 06 F6 | 	mov	arg02, ##@LR__5425
05d20     13 13 02 F6 | 	mov	arg01, local01
05d24     14 BF B1 FD | 	call	#__system___string_cmp
05d28     00 FA 0D F2 | 	cmp	result1, #0 wz
05d2c     AC 02 90 AD |  if_e	jmp	#LR__0465
05d30     8E 01 00 FF 
05d34     92 14 06 F6 | 	mov	arg02, ##@LR__5426
05d38     13 13 02 F6 | 	mov	arg01, local01
05d3c     FC BE B1 FD | 	call	#__system___string_cmp
05d40     00 FA 0D F2 | 	cmp	result1, #0 wz
05d44     9C 02 90 AD |  if_e	jmp	#LR__0466
05d48     8E 01 00 FF 
05d4c     97 14 06 F6 | 	mov	arg02, ##@LR__5427
05d50     13 13 02 F6 | 	mov	arg01, local01
05d54     E4 BE B1 FD | 	call	#__system___string_cmp
05d58     00 FA 0D F2 | 	cmp	result1, #0 wz
05d5c     8C 02 90 AD |  if_e	jmp	#LR__0467
05d60     8E 01 00 FF 
05d64     9E 14 06 F6 | 	mov	arg02, ##@LR__5428
05d68     13 13 02 F6 | 	mov	arg01, local01
05d6c     CC BE B1 FD | 	call	#__system___string_cmp
05d70     00 FA 0D F2 | 	cmp	result1, #0 wz
05d74     7C 02 90 AD |  if_e	jmp	#LR__0468
05d78     8E 01 00 FF 
05d7c     A5 14 06 F6 | 	mov	arg02, ##@LR__5429
05d80     13 13 02 F6 | 	mov	arg01, local01
05d84     B4 BE B1 FD | 	call	#__system___string_cmp
05d88     00 FA 0D F2 | 	cmp	result1, #0 wz
05d8c     6C 02 90 AD |  if_e	jmp	#LR__0469
05d90     8E 01 00 FF 
05d94     AC 14 06 F6 | 	mov	arg02, ##@LR__5430
05d98     13 13 02 F6 | 	mov	arg01, local01
05d9c     9C BE B1 FD | 	call	#__system___string_cmp
05da0     00 FA 0D F2 | 	cmp	result1, #0 wz
05da4     5C 02 90 AD |  if_e	jmp	#LR__0470
05da8     8E 01 00 FF 
05dac     B3 14 06 F6 | 	mov	arg02, ##@LR__5431
05db0     13 13 02 F6 | 	mov	arg01, local01
05db4     84 BE B1 FD | 	call	#__system___string_cmp
05db8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dbc     4C 02 90 AD |  if_e	jmp	#LR__0471
05dc0     8E 01 00 FF 
05dc4     B8 14 06 F6 | 	mov	arg02, ##@LR__5432
05dc8     13 13 02 F6 | 	mov	arg01, local01
05dcc     6C BE B1 FD | 	call	#__system___string_cmp
05dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05dd4     3C 02 90 AD |  if_e	jmp	#LR__0472
05dd8     8E 01 00 FF 
05ddc     C0 14 06 F6 | 	mov	arg02, ##@LR__5433
05de0     13 13 02 F6 | 	mov	arg01, local01
05de4     54 BE B1 FD | 	call	#__system___string_cmp
05de8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dec     2C 02 90 AD |  if_e	jmp	#LR__0473
05df0     8E 01 00 FF 
05df4     C6 14 06 F6 | 	mov	arg02, ##@LR__5434
05df8     13 13 02 F6 | 	mov	arg01, local01
05dfc     3C BE B1 FD | 	call	#__system___string_cmp
05e00     00 FA 0D F2 | 	cmp	result1, #0 wz
05e04     1C 02 90 AD |  if_e	jmp	#LR__0474
05e08     8E 01 00 FF 
05e0c     CD 14 06 F6 | 	mov	arg02, ##@LR__5435
05e10     13 13 02 F6 | 	mov	arg01, local01
05e14     24 BE B1 FD | 	call	#__system___string_cmp
05e18     00 FA 0D F2 | 	cmp	result1, #0 wz
05e1c     0C 02 90 AD |  if_e	jmp	#LR__0475
05e20     8E 01 00 FF 
05e24     D3 14 06 F6 | 	mov	arg02, ##@LR__5436
05e28     13 13 02 F6 | 	mov	arg01, local01
05e2c     0C BE B1 FD | 	call	#__system___string_cmp
05e30     00 FA 0D F2 | 	cmp	result1, #0 wz
05e34     FC 01 90 AD |  if_e	jmp	#LR__0476
05e38     8E 01 00 FF 
05e3c     D9 14 06 F6 | 	mov	arg02, ##@LR__5437
05e40     13 13 02 F6 | 	mov	arg01, local01
05e44     F4 BD B1 FD | 	call	#__system___string_cmp
05e48     00 FA 0D F2 | 	cmp	result1, #0 wz
05e4c     EC 01 90 AD |  if_e	jmp	#LR__0477
05e50     8E 01 00 FF 
05e54     DD 14 06 F6 | 	mov	arg02, ##@LR__5438
05e58     13 13 02 F6 | 	mov	arg01, local01
05e5c     DC BD B1 FD | 	call	#__system___string_cmp
05e60     00 FA 0D F2 | 	cmp	result1, #0 wz
05e64     DC 01 90 AD |  if_e	jmp	#LR__0478
05e68     8E 01 00 FF 
05e6c     E1 14 06 F6 | 	mov	arg02, ##@LR__5439
05e70     13 13 02 F6 | 	mov	arg01, local01
05e74     C4 BD B1 FD | 	call	#__system___string_cmp
05e78     00 FA 0D F2 | 	cmp	result1, #0 wz
05e7c     CC 01 90 AD |  if_e	jmp	#LR__0479
05e80     8E 01 00 FF 
05e84     E5 14 06 F6 | 	mov	arg02, ##@LR__5440
05e88     13 13 02 F6 | 	mov	arg01, local01
05e8c     AC BD B1 FD | 	call	#__system___string_cmp
05e90     00 FA 0D F2 | 	cmp	result1, #0 wz
05e94     BC 01 90 AD |  if_e	jmp	#LR__0480
05e98     8E 01 00 FF 
05e9c     EB 14 06 F6 | 	mov	arg02, ##@LR__5441
05ea0     13 13 02 F6 | 	mov	arg01, local01
05ea4     94 BD B1 FD | 	call	#__system___string_cmp
05ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
05eac     AC 01 90 AD |  if_e	jmp	#LR__0481
05eb0     8E 01 00 FF 
05eb4     F1 14 06 F6 | 	mov	arg02, ##@LR__5442
05eb8     13 13 02 F6 | 	mov	arg01, local01
05ebc     7C BD B1 FD | 	call	#__system___string_cmp
05ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ec4     9C 01 90 AD |  if_e	jmp	#LR__0482
05ec8     8E 01 00 FF 
05ecc     F6 14 06 F6 | 	mov	arg02, ##@LR__5443
05ed0     13 13 02 F6 | 	mov	arg01, local01
05ed4     64 BD B1 FD | 	call	#__system___string_cmp
05ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
05edc     8C 01 90 AD |  if_e	jmp	#LR__0483
05ee0     8E 01 00 FF 
05ee4     FA 14 06 F6 | 	mov	arg02, ##@LR__5444
05ee8     13 13 02 F6 | 	mov	arg01, local01
05eec     4C BD B1 FD | 	call	#__system___string_cmp
05ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ef4     7C 01 90 AD |  if_e	jmp	#LR__0484
05ef8     8E 01 00 FF 
05efc     FE 14 06 F6 | 	mov	arg02, ##@LR__5445
05f00     13 13 02 F6 | 	mov	arg01, local01
05f04     34 BD B1 FD | 	call	#__system___string_cmp
05f08     00 FA 0D F2 | 	cmp	result1, #0 wz
05f0c     6C 01 90 AD |  if_e	jmp	#LR__0485
05f10     70 01 90 FD | 	jmp	#LR__0486
05f14                 | LR__0440
05f14     9E FA 05 F6 | 	mov	result1, #158
05f18     6C 01 90 FD | 	jmp	#LR__0487
05f1c                 | LR__0441
05f1c     85 FA 05 F6 | 	mov	result1, #133
05f20     64 01 90 FD | 	jmp	#LR__0487
05f24                 | LR__0442
05f24     9B FA 05 F6 | 	mov	result1, #155
05f28     5C 01 90 FD | 	jmp	#LR__0487
05f2c                 | LR__0443
05f2c     9B FA 05 F6 | 	mov	result1, #155
05f30     54 01 90 FD | 	jmp	#LR__0487
05f34                 | LR__0444
05f34     A7 FA 05 F6 | 	mov	result1, #167
05f38     4C 01 90 FD | 	jmp	#LR__0487
05f3c                 | LR__0445
05f3c     84 FA 05 F6 | 	mov	result1, #132
05f40     44 01 90 FD | 	jmp	#LR__0487
05f44                 | LR__0446
05f44     86 FA 05 F6 | 	mov	result1, #134
05f48     3C 01 90 FD | 	jmp	#LR__0487
05f4c                 | LR__0447
05f4c     A2 FA 05 F6 | 	mov	result1, #162
05f50     34 01 90 FD | 	jmp	#LR__0487
05f54                 | LR__0448
05f54     9F FA 05 F6 | 	mov	result1, #159
05f58     2C 01 90 FD | 	jmp	#LR__0487
05f5c                 | LR__0449
05f5c     82 FA 05 F6 | 	mov	result1, #130
05f60     24 01 90 FD | 	jmp	#LR__0487
05f64                 | LR__0450
05f64     99 FA 05 F6 | 	mov	result1, #153
05f68     1C 01 90 FD | 	jmp	#LR__0487
05f6c                 | LR__0451
05f6c     C5 FA 05 F6 | 	mov	result1, #197
05f70     14 01 90 FD | 	jmp	#LR__0487
05f74                 | LR__0452
05f74     C5 FA 05 F6 | 	mov	result1, #197
05f78     0C 01 90 FD | 	jmp	#LR__0487
05f7c                 | LR__0453
05f7c     9C FA 05 F6 | 	mov	result1, #156
05f80     04 01 90 FD | 	jmp	#LR__0487
05f84                 | LR__0454
05f84     6F FA 05 F6 | 	mov	result1, #111
05f88     FC 00 90 FD | 	jmp	#LR__0487
05f8c                 | LR__0455
05f8c     6F FA 05 F6 | 	mov	result1, #111
05f90     F4 00 90 FD | 	jmp	#LR__0487
05f94                 | LR__0456
05f94     93 FA 05 F6 | 	mov	result1, #147
05f98     EC 00 90 FD | 	jmp	#LR__0487
05f9c                 | LR__0457
05f9c     94 FA 05 F6 | 	mov	result1, #148
05fa0     E4 00 90 FD | 	jmp	#LR__0487
05fa4                 | LR__0458
05fa4     62 FA 05 F6 | 	mov	result1, #98
05fa8     DC 00 90 FD | 	jmp	#LR__0487
05fac                 | LR__0459
05fac     A3 FA 05 F6 | 	mov	result1, #163
05fb0     D4 00 90 FD | 	jmp	#LR__0487
05fb4                 | LR__0460
05fb4     9D FA 05 F6 | 	mov	result1, #157
05fb8     CC 00 90 FD | 	jmp	#LR__0487
05fbc                 | LR__0461
05fbc     8A FA 05 F6 | 	mov	result1, #138
05fc0     C4 00 90 FD | 	jmp	#LR__0487
05fc4                 | LR__0462
05fc4     A4 FA 05 F6 | 	mov	result1, #164
05fc8     BC 00 90 FD | 	jmp	#LR__0487
05fcc                 | LR__0463
05fcc     A8 FA 05 F6 | 	mov	result1, #168
05fd0     B4 00 90 FD | 	jmp	#LR__0487
05fd4                 | LR__0464
05fd4     AD FA 05 F6 | 	mov	result1, #173
05fd8     AC 00 90 FD | 	jmp	#LR__0487
05fdc                 | LR__0465
05fdc     9A FA 05 F6 | 	mov	result1, #154
05fe0     A4 00 90 FD | 	jmp	#LR__0487
05fe4                 | LR__0466
05fe4     A6 FA 05 F6 | 	mov	result1, #166
05fe8     9C 00 90 FD | 	jmp	#LR__0487
05fec                 | LR__0467
05fec     66 FA 05 F6 | 	mov	result1, #102
05ff0     94 00 90 FD | 	jmp	#LR__0487
05ff4                 | LR__0468
05ff4     67 FA 05 F6 | 	mov	result1, #103
05ff8     8C 00 90 FD | 	jmp	#LR__0487
05ffc                 | LR__0469
05ffc     64 FA 05 F6 | 	mov	result1, #100
06000     84 00 90 FD | 	jmp	#LR__0487
06004                 | LR__0470
06004     65 FA 05 F6 | 	mov	result1, #101
06008     7C 00 90 FD | 	jmp	#LR__0487
0600c                 | LR__0471
0600c     98 FA 05 F6 | 	mov	result1, #152
06010     74 00 90 FD | 	jmp	#LR__0487
06014                 | LR__0472
06014     7B FA 05 F6 | 	mov	result1, #123
06018     6C 00 90 FD | 	jmp	#LR__0487
0601c                 | LR__0473
0601c     76 FA 05 F6 | 	mov	result1, #118
06020     64 00 90 FD | 	jmp	#LR__0487
06024                 | LR__0474
06024     A5 FA 05 F6 | 	mov	result1, #165
06028     5C 00 90 FD | 	jmp	#LR__0487
0602c                 | LR__0475
0602c     7A FA 05 F6 | 	mov	result1, #122
06030     54 00 90 FD | 	jmp	#LR__0487
06034                 | LR__0476
06034     BF FA 05 F6 | 	mov	result1, #191
06038     4C 00 90 FD | 	jmp	#LR__0487
0603c                 | LR__0477
0603c     54 FA 05 F6 | 	mov	result1, #84
06040     44 00 90 FD | 	jmp	#LR__0487
06044                 | LR__0478
06044     6B FA 05 F6 | 	mov	result1, #107
06048     3C 00 90 FD | 	jmp	#LR__0487
0604c                 | LR__0479
0604c     87 FA 05 F6 | 	mov	result1, #135
06050     34 00 90 FD | 	jmp	#LR__0487
06054                 | LR__0480
06054     6A FA 05 F6 | 	mov	result1, #106
06058     2C 00 90 FD | 	jmp	#LR__0487
0605c                 | LR__0481
0605c     6E FA 05 F6 | 	mov	result1, #110
06060     24 00 90 FD | 	jmp	#LR__0487
06064                 | LR__0482
06064     A1 FA 05 F6 | 	mov	result1, #161
06068     1C 00 90 FD | 	jmp	#LR__0487
0606c                 | LR__0483
0606c     83 FA 05 F6 | 	mov	result1, #131
06070     14 00 90 FD | 	jmp	#LR__0487
06074                 | LR__0484
06074     A0 FA 05 F6 | 	mov	result1, #160
06078     0C 00 90 FD | 	jmp	#LR__0487
0607c                 | LR__0485
0607c     9B FA 05 F6 | 	mov	result1, #155
06080     04 00 90 FD | 	jmp	#LR__0487
06084                 | LR__0486
06084     00 FA 05 F6 | 	mov	result1, #0
06088                 | LR__0487
06088     A7 F0 03 F6 | 	mov	ptra, fp
0608c     B2 00 A0 FD | 	call	#popregs_
06090                 | _isfunction_ret
06090     2D 00 64 FD | 	ret
06094                 | 
06094                 | ' 
06094                 | ' ' Check if the part is a name
06094                 | ' 
06094                 | ' function isname(s as string) as boolean
06094                 | _isname
06094     0D 4A 05 F6 | 	mov	COUNT_, #13
06098     A8 00 A0 FD | 	call	#pushregs_
0609c     09 27 02 F6 | 	mov	local01, arg01
060a0     09 29 02 F6 | 	mov	local02, arg01
060a4     97 06 48 FB | 	callpa	#(@LR__0491-@LR__0490)>>2,fcache_load_ptr_
060a8                 | LR__0490
060a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
060ac     01 28 06 51 |  if_ne	add	local02, #1
060b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0490
060b4                 | LR__0491
060b4     09 29 82 F1 | 	sub	local02, arg01
060b8     14 FB 01 F6 | 	mov	result1, local02
060bc     FD 2A 0A F6 | 	mov	local03, result1 wz
060c0     00 FA 05 A6 |  if_e	mov	result1, #0
060c4     34 02 90 AD |  if_e	jmp	#LR__0503
060c8     13 13 02 F6 | 	mov	arg01, local01
060cc     01 14 06 F6 | 	mov	arg02, #1
060d0     01 16 06 F6 | 	mov	arg03, #1
060d4     D0 DC B1 FD | 	call	#__system__Mid_S
060d8     FD 2C 02 F6 | 	mov	local04, result1
060dc                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
060dc     8E 01 00 FF 
060e0     05 15 06 F6 | 	mov	arg02, ##@LR__5446
060e4     16 13 02 F6 | 	mov	arg01, local04
060e8     50 BB B1 FD | 	call	#__system___string_cmp
060ec     00 FA 55 F2 | 	cmps	result1, #0 wc
060f0     18 00 90 CD |  if_b	jmp	#LR__0492
060f4     8E 01 00 FF 
060f8     07 15 06 F6 | 	mov	arg02, ##@LR__5447
060fc     16 13 02 F6 | 	mov	arg01, local04
06100     38 BB B1 FD | 	call	#__system___string_cmp
06104     01 FA 55 F2 | 	cmps	result1, #1 wc
06108     1C 00 90 CD |  if_b	jmp	#LR__0493
0610c                 | LR__0492
0610c     8E 01 00 FF 
06110     09 15 06 F6 | 	mov	arg02, ##@LR__5448
06114     16 13 02 F6 | 	mov	arg01, local04
06118     20 BB B1 FD | 	call	#__system___string_cmp
0611c     00 FA 0D F2 | 	cmp	result1, #0 wz
06120     00 FA 05 56 |  if_ne	mov	result1, #0
06124     D4 01 90 5D |  if_ne	jmp	#LR__0503
06128                 | LR__0493
06128                 | ' if l>2 then 
06128     03 2A 56 F2 | 	cmps	local03, #3 wc
0612c     C8 01 90 CD |  if_b	jmp	#LR__0502
06130                 | '   for i=2 to l
06130     02 2E 06 F6 | 	mov	local05, #2
06134     15 31 02 F6 | 	mov	local06, local03
06138     01 30 06 F1 | 	add	local06, #1
0613c                 | LR__0494
0613c     18 2F 52 F2 | 	cmps	local05, local06 wc
06140     B4 01 90 3D |  if_ae	jmp	#LR__0501
06144     13 13 02 F6 | 	mov	arg01, local01
06148     17 15 02 F6 | 	mov	arg02, local05
0614c     01 16 06 F6 | 	mov	arg03, #1
06150     54 DC B1 FD | 	call	#__system__Mid_S
06154     FD 2C 02 F6 | 	mov	local04, result1
06158                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06158     15 2F 52 F2 | 	cmps	local05, local03 wc
0615c     9C 00 90 3D |  if_ae	jmp	#LR__0497
06160     8E 01 00 FF 
06164     0B 15 06 F6 | 	mov	arg02, ##@LR__5449
06168     16 13 02 F6 | 	mov	arg01, local04
0616c     CC BA B1 FD | 	call	#__system___string_cmp
06170     00 FA 55 F2 | 	cmps	result1, #0 wc
06174     18 00 90 CD |  if_b	jmp	#LR__0495
06178     8E 01 00 FF 
0617c     0D 15 06 F6 | 	mov	arg02, ##@LR__5450
06180     16 13 02 F6 | 	mov	arg01, local04
06184     B4 BA B1 FD | 	call	#__system___string_cmp
06188     01 FA 55 F2 | 	cmps	result1, #1 wc
0618c     6C 00 90 CD |  if_b	jmp	#LR__0497
06190                 | LR__0495
06190     8E 01 00 FF 
06194     0F 15 06 F6 | 	mov	arg02, ##@LR__5451
06198     16 13 02 F6 | 	mov	arg01, local04
0619c     9C BA B1 FD | 	call	#__system___string_cmp
061a0     00 FA 55 F2 | 	cmps	result1, #0 wc
061a4     18 00 90 CD |  if_b	jmp	#LR__0496
061a8     8E 01 00 FF 
061ac     11 15 06 F6 | 	mov	arg02, ##@LR__5452
061b0     16 13 02 F6 | 	mov	arg01, local04
061b4     84 BA B1 FD | 	call	#__system___string_cmp
061b8     01 FA 55 F2 | 	cmps	result1, #1 wc
061bc     3C 00 90 CD |  if_b	jmp	#LR__0497
061c0                 | LR__0496
061c0     8E 01 00 FF 
061c4     13 33 06 F6 | 	mov	local07, ##@LR__5453
061c8     16 13 02 F6 | 	mov	arg01, local04
061cc     19 15 02 F6 | 	mov	arg02, local07
061d0     68 BA B1 FD | 	call	#__system___string_cmp
061d4     00 FA 0D F2 | 	cmp	result1, #0 wz
061d8     20 00 90 AD |  if_e	jmp	#LR__0497
061dc     8E 01 00 FF 
061e0     15 35 06 F6 | 	mov	local08, ##@LR__5454
061e4     16 13 02 F6 | 	mov	arg01, local04
061e8     1A 15 02 F6 | 	mov	arg02, local08
061ec     4C BA B1 FD | 	call	#__system___string_cmp
061f0     FD 36 0A F6 | 	mov	local09, result1 wz
061f4     00 FA 05 56 |  if_ne	mov	result1, #0
061f8     00 01 90 5D |  if_ne	jmp	#LR__0503
061fc                 | LR__0497
061fc                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
061fc     15 2F 0A F2 | 	cmp	local05, local03 wz
06200     EC 00 90 5D |  if_ne	jmp	#LR__0500
06204     8E 01 00 FF 
06208     17 39 06 F6 | 	mov	local10, ##@LR__5455
0620c     16 13 02 F6 | 	mov	arg01, local04
06210     1C 15 02 F6 | 	mov	arg02, local10
06214     24 BA B1 FD | 	call	#__system___string_cmp
06218     FD 3A 02 F6 | 	mov	local11, result1
0621c     00 3A 56 F2 | 	cmps	local11, #0 wc
06220     1C 00 90 CD |  if_b	jmp	#LR__0498
06224     8E 01 00 FF 
06228     19 15 06 F6 | 	mov	arg02, ##@LR__5456
0622c     16 13 02 F6 | 	mov	arg01, local04
06230     08 BA B1 FD | 	call	#__system___string_cmp
06234     FD 38 02 F6 | 	mov	local10, result1
06238     01 38 56 F2 | 	cmps	local10, #1 wc
0623c     B0 00 90 CD |  if_b	jmp	#LR__0500
06240                 | LR__0498
06240     8E 01 00 FF 
06244     1B 15 06 F6 | 	mov	arg02, ##@LR__5457
06248     16 13 02 F6 | 	mov	arg01, local04
0624c     EC B9 B1 FD | 	call	#__system___string_cmp
06250     00 FA 55 F2 | 	cmps	result1, #0 wc
06254     1C 00 90 CD |  if_b	jmp	#LR__0499
06258     8E 01 00 FF 
0625c     1D 37 06 F6 | 	mov	local09, ##@LR__5458
06260     16 13 02 F6 | 	mov	arg01, local04
06264     1B 15 02 F6 | 	mov	arg02, local09
06268     D0 B9 B1 FD | 	call	#__system___string_cmp
0626c     01 FA 55 F2 | 	cmps	result1, #1 wc
06270     7C 00 90 CD |  if_b	jmp	#LR__0500
06274                 | LR__0499
06274     8E 01 00 FF 
06278     1F 37 06 F6 | 	mov	local09, ##@LR__5459
0627c     16 13 02 F6 | 	mov	arg01, local04
06280     1B 15 02 F6 | 	mov	arg02, local09
06284     B4 B9 B1 FD | 	call	#__system___string_cmp
06288     00 FA 4D F2 | 	cmps	result1, #0 wz
0628c     60 00 90 AD |  if_e	jmp	#LR__0500
06290     8E 01 00 FF 
06294     21 35 06 F6 | 	mov	local08, ##@LR__5460
06298     16 13 02 F6 | 	mov	arg01, local04
0629c     1A 15 02 F6 | 	mov	arg02, local08
062a0     98 B9 B1 FD | 	call	#__system___string_cmp
062a4     FD 36 0A F6 | 	mov	local09, result1 wz
062a8     44 00 90 AD |  if_e	jmp	#LR__0500
062ac     8E 01 00 FF 
062b0     23 3D 06 F6 | 	mov	local12, ##@LR__5461
062b4     1E 35 02 F6 | 	mov	local08, local12
062b8     16 13 02 F6 | 	mov	arg01, local04
062bc     1A 15 02 F6 | 	mov	arg02, local08
062c0     78 B9 B1 FD | 	call	#__system___string_cmp
062c4     FD 32 0A F6 | 	mov	local07, result1 wz
062c8     24 00 90 AD |  if_e	jmp	#LR__0500
062cc     8E 01 00 FF 
062d0     25 3F 06 F6 | 	mov	local13, ##@LR__5462
062d4     1F 3D 02 F6 | 	mov	local12, local13
062d8     16 13 02 F6 | 	mov	arg01, local04
062dc     1E 15 02 F6 | 	mov	arg02, local12
062e0     58 B9 B1 FD | 	call	#__system___string_cmp
062e4     FD 34 0A F6 | 	mov	local08, result1 wz
062e8     00 FA 05 56 |  if_ne	mov	result1, #0
062ec     0C 00 90 5D |  if_ne	jmp	#LR__0503
062f0                 | LR__0500
062f0     01 2E 06 F1 | 	add	local05, #1
062f4     44 FE 9F FD | 	jmp	#LR__0494
062f8                 | LR__0501
062f8                 | LR__0502
062f8                 | ' return true
062f8     01 FA 65 F6 | 	neg	result1, #1
062fc                 | LR__0503
062fc     A7 F0 03 F6 | 	mov	ptra, fp
06300     B2 00 A0 FD | 	call	#popregs_
06304                 | _isname_ret
06304     2D 00 64 FD | 	ret
06308                 | 
06308                 | ' 
06308                 | ' ' Check if the part is a number.  
06308                 | ' 
06308                 | ' function isnum(s as string) as boolean 
06308                 | _isnum
06308     13 4A 05 F6 | 	mov	COUNT_, #19
0630c     A8 00 A0 FD | 	call	#pushregs_
06310     09 27 02 F6 | 	mov	local01, arg01
06314     00 28 06 F6 | 	mov	local02, #0
06318     00 2A 06 F6 | 	mov	local03, #0
0631c     13 13 02 F6 | 	mov	arg01, local01
06320     09 2D 02 F6 | 	mov	local04, arg01
06324     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
06328                 | LR__0510
06328     16 FB C9 FA | 	rdbyte	result1, local04 wz
0632c     01 2C 06 51 |  if_ne	add	local04, #1
06330     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
06334                 | LR__0511
06334     09 2D 82 F1 | 	sub	local04, arg01
06338     16 FB 01 F6 | 	mov	result1, local04
0633c     FD 2E 0A F6 | 	mov	local05, result1 wz
06340     00 FA 05 A6 |  if_e	mov	result1, #0
06344     A0 03 90 AD |  if_e	jmp	#LR__0526
06348     13 13 02 F6 | 	mov	arg01, local01
0634c     01 14 06 F6 | 	mov	arg02, #1
06350     01 16 06 F6 | 	mov	arg03, #1
06354     50 DA B1 FD | 	call	#__system__Mid_S
06358     FD 30 02 F6 | 	mov	local06, result1
0635c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0635c     8E 01 00 FF 
06360     27 15 06 F6 | 	mov	arg02, ##@LR__5463
06364     18 13 02 F6 | 	mov	arg01, local06
06368     D0 B8 B1 FD | 	call	#__system___string_cmp
0636c     00 FA 55 F2 | 	cmps	result1, #0 wc
06370     1C 00 90 CD |  if_b	jmp	#LR__0512
06374     8E 01 00 FF 
06378     29 33 06 F6 | 	mov	local07, ##@LR__5464
0637c     18 13 02 F6 | 	mov	arg01, local06
06380     19 15 02 F6 | 	mov	arg02, local07
06384     B4 B8 B1 FD | 	call	#__system___string_cmp
06388     01 FA 55 F2 | 	cmps	result1, #1 wc
0638c     84 00 90 CD |  if_b	jmp	#LR__0513
06390                 | LR__0512
06390     8E 01 00 FF 
06394     2B 35 06 F6 | 	mov	local08, ##@LR__5465
06398     1A 33 02 F6 | 	mov	local07, local08
0639c     18 13 02 F6 | 	mov	arg01, local06
063a0     19 15 02 F6 | 	mov	arg02, local07
063a4     94 B8 B1 FD | 	call	#__system___string_cmp
063a8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ac     64 00 90 AD |  if_e	jmp	#LR__0513
063b0     8E 01 00 FF 
063b4     2D 37 06 F6 | 	mov	local09, ##@LR__5466
063b8     1B 35 02 F6 | 	mov	local08, local09
063bc     18 13 02 F6 | 	mov	arg01, local06
063c0     1A 15 02 F6 | 	mov	arg02, local08
063c4     74 B8 B1 FD | 	call	#__system___string_cmp
063c8     FD 32 0A F6 | 	mov	local07, result1 wz
063cc     44 00 90 AD |  if_e	jmp	#LR__0513
063d0     8E 01 00 FF 
063d4     2F 39 06 F6 | 	mov	local10, ##@LR__5467
063d8     1C 37 02 F6 | 	mov	local09, local10
063dc     18 13 02 F6 | 	mov	arg01, local06
063e0     1B 15 02 F6 | 	mov	arg02, local09
063e4     54 B8 B1 FD | 	call	#__system___string_cmp
063e8     FD 34 0A F6 | 	mov	local08, result1 wz
063ec     24 00 90 AD |  if_e	jmp	#LR__0513
063f0     8E 01 00 FF 
063f4     31 3B 06 F6 | 	mov	local11, ##@LR__5468
063f8     1D 39 02 F6 | 	mov	local10, local11
063fc     18 13 02 F6 | 	mov	arg01, local06
06400     1C 15 02 F6 | 	mov	arg02, local10
06404     34 B8 B1 FD | 	call	#__system___string_cmp
06408     FD 36 0A F6 | 	mov	local09, result1 wz
0640c     00 FA 05 56 |  if_ne	mov	result1, #0
06410     D4 02 90 5D |  if_ne	jmp	#LR__0526
06414                 | LR__0513
06414                 | ' if m$="." then ds=1
06414     8E 01 00 FF 
06418     33 15 06 F6 | 	mov	arg02, ##@LR__5469
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     18 B8 B1 FD | 	call	#__system___string_cmp
06424     00 FA 0D F2 | 	cmp	result1, #0 wz
06428     01 28 06 A6 |  if_e	mov	local02, #1
0642c                 | ' if m$="$" then hex=1 else hex=0
0642c     8E 01 00 FF 
06430     35 15 06 F6 | 	mov	arg02, ##@LR__5470
06434     18 13 02 F6 | 	mov	arg01, local06
06438     00 B8 B1 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     01 3C 06 A6 |  if_e	mov	local12, #1
06444     00 3C 06 56 |  if_ne	mov	local12, #0
06448                 | ' if m$="%" then bin=1 else bin=0
06448     8E 01 00 FF 
0644c     37 15 06 F6 | 	mov	arg02, ##@LR__5471
06450     18 13 02 F6 | 	mov	arg01, local06
06454     E4 B7 B1 FD | 	call	#__system___string_cmp
06458     00 FA 0D F2 | 	cmp	result1, #0 wz
0645c     01 3E 06 A6 |  if_e	mov	local13, #1
06460     00 3E 06 56 |  if_ne	mov	local13, #0
06464                 | ' if l>1 then 
06464     02 2E 56 F2 | 	cmps	local05, #2 wc
06468     78 02 90 CD |  if_b	jmp	#LR__0525
0646c                 | '   for i=2 to l
0646c     02 40 06 F6 | 	mov	local14, #2
06470     17 43 02 F6 | 	mov	local15, local05
06474     01 42 06 F1 | 	add	local15, #1
06478                 | LR__0514
06478     21 41 52 F2 | 	cmps	local14, local15 wc
0647c     64 02 90 3D |  if_ae	jmp	#LR__0524
06480     13 13 02 F6 | 	mov	arg01, local01
06484     20 15 02 F6 | 	mov	arg02, local14
06488     01 16 06 F6 | 	mov	arg03, #1
0648c     18 D9 B1 FD | 	call	#__system__Mid_S
06490     FD 30 02 F6 | 	mov	local06, result1
06494     00 44 06 F6 | 	mov	local16, #0
06498                 | '     m$=mid$(s,i,1) : b=false
06498                 | '     if m$>="0" andalso m$<="9" then b=true  
06498     8E 01 00 FF 
0649c     39 15 06 F6 | 	mov	arg02, ##@LR__5472
064a0     18 13 02 F6 | 	mov	arg01, local06
064a4     94 B7 B1 FD | 	call	#__system___string_cmp
064a8     00 FA 55 F2 | 	cmps	result1, #0 wc
064ac     1C 00 90 CD |  if_b	jmp	#LR__0515
064b0     8E 01 00 FF 
064b4     3B 33 06 F6 | 	mov	local07, ##@LR__5473
064b8     18 13 02 F6 | 	mov	arg01, local06
064bc     19 15 02 F6 | 	mov	arg02, local07
064c0     78 B7 B1 FD | 	call	#__system___string_cmp
064c4     01 FA 55 F2 | 	cmps	result1, #1 wc
064c8     01 44 66 C6 |  if_b	neg	local16, #1
064cc                 | LR__0515
064cc                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
064cc     8E 01 00 FF 
064d0     3D 15 06 F6 | 	mov	arg02, ##@LR__5474
064d4     18 13 02 F6 | 	mov	arg01, local06
064d8     60 B7 B1 FD | 	call	#__system___string_cmp
064dc     00 FA 0D F2 | 	cmp	result1, #0 wz
064e0     7C 00 90 AD |  if_e	jmp	#LR__0516
064e4     8E 01 00 FF 
064e8     3F 33 06 F6 | 	mov	local07, ##@LR__5475
064ec     18 13 02 F6 | 	mov	arg01, local06
064f0     19 15 02 F6 | 	mov	arg02, local07
064f4     44 B7 B1 FD | 	call	#__system___string_cmp
064f8     00 FA 0D F2 | 	cmp	result1, #0 wz
064fc     60 00 90 AD |  if_e	jmp	#LR__0516
06500     8E 01 00 FF 
06504     41 35 06 F6 | 	mov	local08, ##@LR__5476
06508     1A 33 02 F6 | 	mov	local07, local08
0650c     18 13 02 F6 | 	mov	arg01, local06
06510     19 15 02 F6 | 	mov	arg02, local07
06514     24 B7 B1 FD | 	call	#__system___string_cmp
06518     00 FA 0D F2 | 	cmp	result1, #0 wz
0651c     40 00 90 AD |  if_e	jmp	#LR__0516
06520     8E 01 00 FF 
06524     43 37 06 F6 | 	mov	local09, ##@LR__5477
06528     1B 35 02 F6 | 	mov	local08, local09
0652c     18 13 02 F6 | 	mov	arg01, local06
06530     1A 15 02 F6 | 	mov	arg02, local08
06534     04 B7 B1 FD | 	call	#__system___string_cmp
06538     FD 32 0A F6 | 	mov	local07, result1 wz
0653c     20 00 90 AD |  if_e	jmp	#LR__0516
06540     8E 01 00 FF 
06544     45 39 06 F6 | 	mov	local10, ##@LR__5478
06548     1C 37 02 F6 | 	mov	local09, local10
0654c     18 13 02 F6 | 	mov	arg01, local06
06550     1B 15 02 F6 | 	mov	arg02, local09
06554     E4 B6 B1 FD | 	call	#__system___string_cmp
06558     FD 34 0A F6 | 	mov	local08, result1 wz
0655c     04 00 90 5D |  if_ne	jmp	#LR__0517
06560                 | LR__0516
06560     01 44 66 F6 | 	neg	local16, #1
06564                 | LR__0517
06564                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06564     01 3C 0E F2 | 	cmp	local12, #1 wz
06568     34 00 90 5D |  if_ne	jmp	#LR__0518
0656c     8E 01 00 FF 
06570     47 15 06 F6 | 	mov	arg02, ##@LR__5479
06574     18 13 02 F6 | 	mov	arg01, local06
06578     C0 B6 B1 FD | 	call	#__system___string_cmp
0657c     00 FA 55 F2 | 	cmps	result1, #0 wc
06580     1C 00 90 CD |  if_b	jmp	#LR__0518
06584     8E 01 00 FF 
06588     49 33 06 F6 | 	mov	local07, ##@LR__5480
0658c     18 13 02 F6 | 	mov	arg01, local06
06590     19 15 02 F6 | 	mov	arg02, local07
06594     A4 B6 B1 FD | 	call	#__system___string_cmp
06598     01 FA 55 F2 | 	cmps	result1, #1 wc
0659c     01 44 66 C6 |  if_b	neg	local16, #1
065a0                 | LR__0518
065a0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
065a0     01 3E 0E F2 | 	cmp	local13, #1 wz
065a4     58 00 90 5D |  if_ne	jmp	#LR__0520
065a8     8E 01 00 FF 
065ac     4B 15 06 F6 | 	mov	arg02, ##@LR__5481
065b0     18 13 02 F6 | 	mov	arg01, local06
065b4     84 B6 B1 FD | 	call	#__system___string_cmp
065b8     00 FA 55 F2 | 	cmps	result1, #0 wc
065bc     1C 00 90 CD |  if_b	jmp	#LR__0519
065c0     8E 01 00 FF 
065c4     4D 33 06 F6 | 	mov	local07, ##@LR__5482
065c8     18 13 02 F6 | 	mov	arg01, local06
065cc     19 15 02 F6 | 	mov	arg02, local07
065d0     68 B6 B1 FD | 	call	#__system___string_cmp
065d4     01 FA 55 F2 | 	cmps	result1, #1 wc
065d8     24 00 90 CD |  if_b	jmp	#LR__0520
065dc                 | LR__0519
065dc     8E 01 00 FF 
065e0     4F 35 06 F6 | 	mov	local08, ##@LR__5483
065e4     1A 33 02 F6 | 	mov	local07, local08
065e8     18 13 02 F6 | 	mov	arg01, local06
065ec     19 15 02 F6 | 	mov	arg02, local07
065f0     48 B6 B1 FD | 	call	#__system___string_cmp
065f4     00 FA 0D F2 | 	cmp	result1, #0 wz
065f8     00 FA 05 56 |  if_ne	mov	result1, #0
065fc     E8 00 90 5D |  if_ne	jmp	#LR__0526
06600                 | LR__0520
06600                 | '     if not b then return false
06600     22 45 22 F6 | 	not	local16, local16
06604     00 44 0E F2 | 	cmp	local16, #0 wz
06608     00 FA 05 56 |  if_ne	mov	result1, #0
0660c     D8 00 90 5D |  if_ne	jmp	#LR__0526
06610                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06610     8E 01 00 FF 
06614     51 15 06 F6 | 	mov	arg02, ##@LR__5484
06618     18 13 02 F6 | 	mov	arg01, local06
0661c     1C B6 B1 FD | 	call	#__system___string_cmp
06620     00 FA 0D F2 | 	cmp	result1, #0 wz
06624     3C 00 90 5D |  if_ne	jmp	#LR__0521
06628     20 15 02 F6 | 	mov	arg02, local14
0662c     01 14 86 F1 | 	sub	arg02, #1
06630     13 13 02 F6 | 	mov	arg01, local01
06634     01 16 06 F6 | 	mov	arg03, #1
06638     6C D7 B1 FD | 	call	#__system__Mid_S
0663c     FD 12 02 F6 | 	mov	arg01, result1
06640     5C D9 B1 FD | 	call	#__system__LCase_S
06644     FD 12 02 F6 | 	mov	arg01, result1
06648     8E 01 00 FF 
0664c     53 33 06 F6 | 	mov	local07, ##@LR__5485
06650     19 15 02 F6 | 	mov	arg02, local07
06654     E4 B5 B1 FD | 	call	#__system___string_cmp
06658     00 FA 0D F2 | 	cmp	result1, #0 wz
0665c     00 FA 05 56 |  if_ne	mov	result1, #0
06660     84 00 90 5D |  if_ne	jmp	#LR__0526
06664                 | LR__0521
06664                 | '     if m$="." then ds+=1: if ds>1 then return false
06664     8E 01 00 FF 
06668     55 15 06 F6 | 	mov	arg02, ##@LR__5486
0666c     18 13 02 F6 | 	mov	arg01, local06
06670     C8 B5 B1 FD | 	call	#__system___string_cmp
06674     00 FA 0D F2 | 	cmp	result1, #0 wz
06678     01 28 06 A1 |  if_e	add	local02, #1
0667c     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06680     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06684     60 00 90 2D |  if_nc_and_z	jmp	#LR__0526
06688                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06688     8E 01 00 FF 
0668c     57 47 06 F6 | 	mov	local17, ##@LR__5487
06690     23 49 02 F6 | 	mov	local18, local17
06694     18 13 02 F6 | 	mov	arg01, local06
06698     24 15 02 F6 | 	mov	arg02, local18
0669c     9C B5 B1 FD | 	call	#__system___string_cmp
066a0     FD 4A 0A F6 | 	mov	local19, result1 wz
066a4     20 00 90 AD |  if_e	jmp	#LR__0522
066a8     8E 01 00 FF 
066ac     59 33 06 F6 | 	mov	local07, ##@LR__5488
066b0     19 47 02 F6 | 	mov	local17, local07
066b4     18 13 02 F6 | 	mov	arg01, local06
066b8     23 15 02 F6 | 	mov	arg02, local17
066bc     7C B5 B1 FD | 	call	#__system___string_cmp
066c0     FD 48 0A F6 | 	mov	local18, result1 wz
066c4     14 00 90 5D |  if_ne	jmp	#LR__0523
066c8                 | LR__0522
066c8     01 2A 06 F1 | 	add	local03, #1
066cc     00 3C 0E F2 | 	cmp	local12, #0 wz
066d0     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
066d4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
066d8     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0526
066dc                 | LR__0523
066dc     01 40 06 F1 | 	add	local14, #1
066e0     94 FD 9F FD | 	jmp	#LR__0514
066e4                 | LR__0524
066e4                 | LR__0525
066e4                 | ' return true
066e4     01 FA 65 F6 | 	neg	result1, #1
066e8                 | LR__0526
066e8     A7 F0 03 F6 | 	mov	ptra, fp
066ec     B2 00 A0 FD | 	call	#popregs_
066f0                 | _isnum_ret
066f0     2D 00 64 FD | 	ret
066f4                 | 
066f4                 | '   
066f4                 | ' ' Check if the part is an integer number.    
066f4                 | '   
066f4                 | ' function isint(s as string) as boolean
066f4                 | _isint
066f4     0E 4A 05 F6 | 	mov	COUNT_, #14
066f8     A8 00 A0 FD | 	call	#pushregs_
066fc     09 27 02 F6 | 	mov	local01, arg01
06700     09 29 02 F6 | 	mov	local02, arg01
06704     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06708                 | LR__0530
06708     14 FB C9 FA | 	rdbyte	result1, local02 wz
0670c     01 28 06 51 |  if_ne	add	local02, #1
06710     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
06714                 | LR__0531
06714     09 29 82 F1 | 	sub	local02, arg01
06718     14 FB 01 F6 | 	mov	result1, local02
0671c     FD 2A 0A F6 | 	mov	local03, result1 wz
06720     00 FA 05 A6 |  if_e	mov	result1, #0
06724     64 02 90 AD |  if_e	jmp	#LR__0544
06728     13 13 02 F6 | 	mov	arg01, local01
0672c     01 14 06 F6 | 	mov	arg02, #1
06730     01 16 06 F6 | 	mov	arg03, #1
06734     70 D6 B1 FD | 	call	#__system__Mid_S
06738     FD 2C 02 F6 | 	mov	local04, result1
0673c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0673c     8E 01 00 FF 
06740     5B 15 06 F6 | 	mov	arg02, ##@LR__5489
06744     16 13 02 F6 | 	mov	arg01, local04
06748     F0 B4 B1 FD | 	call	#__system___string_cmp
0674c     00 FA 55 F2 | 	cmps	result1, #0 wc
06750     1C 00 90 CD |  if_b	jmp	#LR__0532
06754     8E 01 00 FF 
06758     5D 2F 06 F6 | 	mov	local05, ##@LR__5490
0675c     16 13 02 F6 | 	mov	arg01, local04
06760     17 15 02 F6 | 	mov	arg02, local05
06764     D4 B4 B1 FD | 	call	#__system___string_cmp
06768     01 FA 55 F2 | 	cmps	result1, #1 wc
0676c     64 00 90 CD |  if_b	jmp	#LR__0533
06770                 | LR__0532
06770     8E 01 00 FF 
06774     5F 31 06 F6 | 	mov	local06, ##@LR__5491
06778     18 2F 02 F6 | 	mov	local05, local06
0677c     16 13 02 F6 | 	mov	arg01, local04
06780     17 15 02 F6 | 	mov	arg02, local05
06784     B4 B4 B1 FD | 	call	#__system___string_cmp
06788     00 FA 0D F2 | 	cmp	result1, #0 wz
0678c     44 00 90 AD |  if_e	jmp	#LR__0533
06790     8E 01 00 FF 
06794     61 33 06 F6 | 	mov	local07, ##@LR__5492
06798     19 31 02 F6 | 	mov	local06, local07
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     18 15 02 F6 | 	mov	arg02, local06
067a4     94 B4 B1 FD | 	call	#__system___string_cmp
067a8     FD 2E 0A F6 | 	mov	local05, result1 wz
067ac     24 00 90 AD |  if_e	jmp	#LR__0533
067b0     8E 01 00 FF 
067b4     63 35 06 F6 | 	mov	local08, ##@LR__5493
067b8     1A 33 02 F6 | 	mov	local07, local08
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     19 15 02 F6 | 	mov	arg02, local07
067c4     74 B4 B1 FD | 	call	#__system___string_cmp
067c8     FD 30 0A F6 | 	mov	local06, result1 wz
067cc     00 FA 05 56 |  if_ne	mov	result1, #0
067d0     B8 01 90 5D |  if_ne	jmp	#LR__0544
067d4                 | LR__0533
067d4                 | ' if m$="$" then hex=1 else hex=0
067d4     8E 01 00 FF 
067d8     65 15 06 F6 | 	mov	arg02, ##@LR__5494
067dc     16 13 02 F6 | 	mov	arg01, local04
067e0     58 B4 B1 FD | 	call	#__system___string_cmp
067e4     00 FA 0D F2 | 	cmp	result1, #0 wz
067e8     01 36 06 A6 |  if_e	mov	local09, #1
067ec     00 36 06 56 |  if_ne	mov	local09, #0
067f0                 | ' if m$="%" then bin=1 else bin=0
067f0     8E 01 00 FF 
067f4     67 15 06 F6 | 	mov	arg02, ##@LR__5495
067f8     16 13 02 F6 | 	mov	arg01, local04
067fc     3C B4 B1 FD | 	call	#__system___string_cmp
06800     00 FA 0D F2 | 	cmp	result1, #0 wz
06804     01 38 06 A6 |  if_e	mov	local10, #1
06808     00 38 06 56 |  if_ne	mov	local10, #0
0680c                 | ' if l>1 then 
0680c     02 2A 56 F2 | 	cmps	local03, #2 wc
06810     74 01 90 CD |  if_b	jmp	#LR__0543
06814                 | '   for i=2 to l
06814     02 3A 06 F6 | 	mov	local11, #2
06818     15 3D 02 F6 | 	mov	local12, local03
0681c     01 3C 06 F1 | 	add	local12, #1
06820                 | LR__0534
06820     1E 3B 52 F2 | 	cmps	local11, local12 wc
06824     60 01 90 3D |  if_ae	jmp	#LR__0542
06828     13 13 02 F6 | 	mov	arg01, local01
0682c     1D 15 02 F6 | 	mov	arg02, local11
06830     01 16 06 F6 | 	mov	arg03, #1
06834     70 D5 B1 FD | 	call	#__system__Mid_S
06838     FD 2C 02 F6 | 	mov	local04, result1
0683c                 | '     m$=mid$(s,i,1) 
0683c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0683c     00 36 0E F2 | 	cmp	local09, #0 wz
06840     50 00 90 5D |  if_ne	jmp	#LR__0536
06844     8E 01 00 FF 
06848     69 15 06 F6 | 	mov	arg02, ##@LR__5496
0684c     16 13 02 F6 | 	mov	arg01, local04
06850     E8 B3 B1 FD | 	call	#__system___string_cmp
06854     00 FA 55 F2 | 	cmps	result1, #0 wc
06858     18 00 90 CD |  if_b	jmp	#LR__0535
0685c     8E 01 00 FF 
06860     6B 15 06 F6 | 	mov	arg02, ##@LR__5497
06864     16 13 02 F6 | 	mov	arg01, local04
06868     D0 B3 B1 FD | 	call	#__system___string_cmp
0686c     01 FA 55 F2 | 	cmps	result1, #1 wc
06870     20 00 90 CD |  if_b	jmp	#LR__0536
06874                 | LR__0535
06874     8E 01 00 FF 
06878     6D 31 06 F6 | 	mov	local06, ##@LR__5498
0687c     16 13 02 F6 | 	mov	arg01, local04
06880     18 15 02 F6 | 	mov	arg02, local06
06884     B4 B3 B1 FD | 	call	#__system___string_cmp
06888     00 FA 0D F2 | 	cmp	result1, #0 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     F8 00 90 5D |  if_ne	jmp	#LR__0544
06894                 | LR__0536
06894                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06894     01 36 0E F2 | 	cmp	local09, #1 wz
06898     90 00 90 5D |  if_ne	jmp	#LR__0539
0689c     8E 01 00 FF 
068a0     6F 15 06 F6 | 	mov	arg02, ##@LR__5499
068a4     16 13 02 F6 | 	mov	arg01, local04
068a8     90 B3 B1 FD | 	call	#__system___string_cmp
068ac     00 FA 55 F2 | 	cmps	result1, #0 wc
068b0     1C 00 90 CD |  if_b	jmp	#LR__0537
068b4     8E 01 00 FF 
068b8     71 15 06 F6 | 	mov	arg02, ##@LR__5500
068bc     16 13 02 F6 | 	mov	arg01, local04
068c0     78 B3 B1 FD | 	call	#__system___string_cmp
068c4     FD 3E 02 F6 | 	mov	local13, result1
068c8     01 3E 56 F2 | 	cmps	local13, #1 wc
068cc     5C 00 90 CD |  if_b	jmp	#LR__0539
068d0                 | LR__0537
068d0     8E 01 00 FF 
068d4     73 2F 06 F6 | 	mov	local05, ##@LR__5501
068d8     16 13 02 F6 | 	mov	arg01, local04
068dc     17 15 02 F6 | 	mov	arg02, local05
068e0     58 B3 B1 FD | 	call	#__system___string_cmp
068e4     FD 40 02 F6 | 	mov	local14, result1
068e8     00 40 56 F2 | 	cmps	local14, #0 wc
068ec     1C 00 90 CD |  if_b	jmp	#LR__0538
068f0     8E 01 00 FF 
068f4     75 33 06 F6 | 	mov	local07, ##@LR__5502
068f8     16 13 02 F6 | 	mov	arg01, local04
068fc     19 15 02 F6 | 	mov	arg02, local07
06900     38 B3 B1 FD | 	call	#__system___string_cmp
06904     01 FA 55 F2 | 	cmps	result1, #1 wc
06908     20 00 90 CD |  if_b	jmp	#LR__0539
0690c                 | LR__0538
0690c     8E 01 00 FF 
06910     77 35 06 F6 | 	mov	local08, ##@LR__5503
06914     16 13 02 F6 | 	mov	arg01, local04
06918     1A 15 02 F6 | 	mov	arg02, local08
0691c     1C B3 B1 FD | 	call	#__system___string_cmp
06920     00 FA 0D F2 | 	cmp	result1, #0 wz
06924     00 FA 05 56 |  if_ne	mov	result1, #0
06928     60 00 90 5D |  if_ne	jmp	#LR__0544
0692c                 | LR__0539
0692c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0692c     01 38 0E F2 | 	cmp	local10, #1 wz
06930     4C 00 90 5D |  if_ne	jmp	#LR__0541
06934     8E 01 00 FF 
06938     79 15 06 F6 | 	mov	arg02, ##@LR__5504
0693c     16 13 02 F6 | 	mov	arg01, local04
06940     F8 B2 B1 FD | 	call	#__system___string_cmp
06944     00 FA 55 F2 | 	cmps	result1, #0 wc
06948     18 00 90 CD |  if_b	jmp	#LR__0540
0694c     8E 01 00 FF 
06950     7B 15 06 F6 | 	mov	arg02, ##@LR__5505
06954     16 13 02 F6 | 	mov	arg01, local04
06958     E0 B2 B1 FD | 	call	#__system___string_cmp
0695c     01 FA 55 F2 | 	cmps	result1, #1 wc
06960     1C 00 90 CD |  if_b	jmp	#LR__0541
06964                 | LR__0540
06964     8E 01 00 FF 
06968     7D 15 06 F6 | 	mov	arg02, ##@LR__5506
0696c     16 13 02 F6 | 	mov	arg01, local04
06970     C8 B2 B1 FD | 	call	#__system___string_cmp
06974     00 FA 0D F2 | 	cmp	result1, #0 wz
06978     00 FA 05 56 |  if_ne	mov	result1, #0
0697c     0C 00 90 5D |  if_ne	jmp	#LR__0544
06980                 | LR__0541
06980     01 3A 06 F1 | 	add	local11, #1
06984     98 FE 9F FD | 	jmp	#LR__0534
06988                 | LR__0542
06988                 | LR__0543
06988                 | ' return true
06988     01 FA 65 F6 | 	neg	result1, #1
0698c                 | LR__0544
0698c     A7 F0 03 F6 | 	mov	ptra, fp
06990     B2 00 A0 FD | 	call	#popregs_
06994                 | _isint_ret
06994     2D 00 64 FD | 	ret
06998                 | 
06998                 | ' 
06998                 | ' ' Check if the part is a positive decimal number.  
06998                 | ' 
06998                 | ' function isdec(s as string) as boolean
06998                 | _isdec
06998     05 4A 05 F6 | 	mov	COUNT_, #5
0699c     A8 00 A0 FD | 	call	#pushregs_
069a0     09 27 02 F6 | 	mov	local01, arg01
069a4     09 29 02 F6 | 	mov	local02, arg01
069a8     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
069ac                 | LR__0550
069ac     14 FB C9 FA | 	rdbyte	result1, local02 wz
069b0     01 28 06 51 |  if_ne	add	local02, #1
069b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
069b8                 | LR__0551
069b8     09 29 82 F1 | 	sub	local02, arg01
069bc     14 FB 01 F6 | 	mov	result1, local02
069c0     FD 28 0A F6 | 	mov	local02, result1 wz
069c4     00 FA 05 A6 |  if_e	mov	result1, #0
069c8     80 00 90 AD |  if_e	jmp	#LR__0556
069cc                 | ' for i=1 to l
069cc     01 2A 06 F6 | 	mov	local03, #1
069d0     14 2D 02 F6 | 	mov	local04, local02
069d4     01 2C 06 F1 | 	add	local04, #1
069d8                 | LR__0552
069d8     16 2B 52 F2 | 	cmps	local03, local04 wc
069dc     68 00 90 3D |  if_ae	jmp	#LR__0555
069e0     13 13 02 F6 | 	mov	arg01, local01
069e4     15 15 02 F6 | 	mov	arg02, local03
069e8     01 16 06 F6 | 	mov	arg03, #1
069ec     B8 D3 B1 FD | 	call	#__system__Mid_S
069f0     FD 2E 02 F6 | 	mov	local05, result1
069f4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
069f4     8E 01 00 FF 
069f8     7F 15 06 F6 | 	mov	arg02, ##@LR__5507
069fc     17 13 02 F6 | 	mov	arg01, local05
06a00     38 B2 B1 FD | 	call	#__system___string_cmp
06a04     00 FA 55 F2 | 	cmps	result1, #0 wc
06a08     18 00 90 CD |  if_b	jmp	#LR__0553
06a0c     8E 01 00 FF 
06a10     81 15 06 F6 | 	mov	arg02, ##@LR__5508
06a14     17 13 02 F6 | 	mov	arg01, local05
06a18     20 B2 B1 FD | 	call	#__system___string_cmp
06a1c     01 FA 55 F2 | 	cmps	result1, #1 wc
06a20     1C 00 90 CD |  if_b	jmp	#LR__0554
06a24                 | LR__0553
06a24     8E 01 00 FF 
06a28     83 15 06 F6 | 	mov	arg02, ##@LR__5509
06a2c     17 13 02 F6 | 	mov	arg01, local05
06a30     08 B2 B1 FD | 	call	#__system___string_cmp
06a34     00 FA 0D F2 | 	cmp	result1, #0 wz
06a38     00 FA 05 56 |  if_ne	mov	result1, #0
06a3c     0C 00 90 5D |  if_ne	jmp	#LR__0556
06a40                 | LR__0554
06a40     01 2A 06 F1 | 	add	local03, #1
06a44     90 FF 9F FD | 	jmp	#LR__0552
06a48                 | LR__0555
06a48                 | ' return true
06a48     01 FA 65 F6 | 	neg	result1, #1
06a4c                 | LR__0556
06a4c     A7 F0 03 F6 | 	mov	ptra, fp
06a50     B2 00 A0 FD | 	call	#popregs_
06a54                 | _isdec_ret
06a54     2D 00 64 FD | 	ret
06a58                 | 
06a58                 | ' 
06a58                 | ' ' Check if the part is a string.  
06a58                 | ' 
06a58                 | ' function isstring(s as string) as boolean
06a58                 | _isstring
06a58     01 4A 05 F6 | 	mov	COUNT_, #1
06a5c     A8 00 A0 FD | 	call	#pushregs_
06a60                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06a60     09 27 02 F6 | 	mov	local01, arg01
06a64     01 14 06 F6 | 	mov	arg02, #1
06a68     24 D2 B1 FD | 	call	#__system__Left_S
06a6c     FD 12 02 F6 | 	mov	arg01, result1
06a70     8E 01 00 FF 
06a74     85 15 06 F6 | 	mov	arg02, ##@LR__5510
06a78     C0 B1 B1 FD | 	call	#__system___string_cmp
06a7c     00 FA 4D F2 | 	cmps	result1, #0 wz
06a80     28 00 90 5D |  if_ne	jmp	#LR__0560
06a84     13 13 02 F6 | 	mov	arg01, local01
06a88     01 14 06 F6 | 	mov	arg02, #1
06a8c     88 D2 B1 FD | 	call	#__system__Right_S
06a90     FD 12 02 F6 | 	mov	arg01, result1
06a94     8E 01 00 FF 
06a98     87 15 06 F6 | 	mov	arg02, ##@LR__5511
06a9c     9C B1 B1 FD | 	call	#__system___string_cmp
06aa0     00 FA 4D F2 | 	cmps	result1, #0 wz
06aa4     01 FA 65 A6 |  if_e	neg	result1, #1
06aa8     04 00 90 AD |  if_e	jmp	#LR__0561
06aac                 | LR__0560
06aac     00 FA 05 F6 | 	mov	result1, #0
06ab0                 | LR__0561
06ab0     A7 F0 03 F6 | 	mov	ptra, fp
06ab4     B2 00 A0 FD | 	call	#popregs_
06ab8                 | _isstring_ret
06ab8     2D 00 64 FD | 	ret
06abc                 | 
06abc                 | ' 
06abc                 | ' ' getnoteval. Returns the frequency of note token
06abc                 | ' 
06abc                 | ' function getnoteval(token) as single
06abc                 | _getnoteval
06abc     02 4A 05 F6 | 	mov	COUNT_, #2
06ac0     A8 00 A0 FD | 	call	#pushregs_
06ac4     01 00 00 FF 
06ac8     00 13 86 F1 | 	sub	arg01, ##768
06acc     09 15 52 F6 | 	abs	arg02, arg01 wc
06ad0     0C 14 16 FD | 	qdiv	arg02, #12
06ad4     14 00 00 FF 
06ad8     D8 E4 05 F1 | 	add	objptr, ##10456
06adc     19 14 62 FD | 	getqy	arg02
06ae0     0A 15 82 F6 | 	negc	arg02, arg02
06ae4     02 14 66 F0 | 	shl	arg02, #2
06ae8     F2 14 02 F1 | 	add	arg02, objptr
06aec     0A 27 02 FB | 	rdlong	local01, arg02
06af0     09 15 52 F6 | 	abs	arg02, arg01 wc
06af4     0C 14 16 FD | 	qdiv	arg02, #12
06af8     14 00 00 FF 
06afc     D8 E4 85 F1 | 	sub	objptr, ##10456
06b00     01 12 06 F6 | 	mov	arg01, #1
06b04                 | ' noteexp=1+(note/12) 
06b04                 | ' return (2.0^noteexp)*notebase
06b04     18 14 62 FD | 	getqx	arg02
06b08     0A 13 82 F3 | 	sumc	arg01, arg02
06b0c     09 13 52 F6 | 	abs	arg01, arg01 wc
06b10     1F 28 C6 C9 |  if_b	decod	local02, #31
06b14     00 28 06 36 |  if_ae	mov	local02, #0
06b18     B0 DA B1 FD | 	call	#__system___float_fromuns
06b1c     14 FB 61 F5 | 	xor	result1, local02
06b20     FD 14 02 F6 | 	mov	arg02, result1
06b24     1E 12 C6 F9 | 	decod	arg01, #30
06b28     AC ED B1 FD | 	call	#__system____builtin_powf
06b2c     FD 12 02 F6 | 	mov	arg01, result1
06b30     13 15 02 F6 | 	mov	arg02, local01
06b34     98 DE B1 FD | 	call	#__system___float_mul
06b38     A7 F0 03 F6 | 	mov	ptra, fp
06b3c     B2 00 A0 FD | 	call	#popregs_
06b40                 | _getnoteval_ret
06b40     2D 00 64 FD | 	ret
06b44                 | 
06b44                 | ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' '
06b44                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06b44                 | ' '
06b44                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06b44                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06b44                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06b44                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06b44                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06b44                 | ' ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' ' Helper functions to manage program lines
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' 
06b44                 | ' '----- delete a line from a program
06b44                 | ' 
06b44                 | ' function deleteline(aline as ulong) as integer
06b44                 | _deleteline
06b44     02 4A 05 F6 | 	mov	COUNT_, #2
06b48     A8 00 A0 FD | 	call	#pushregs_
06b4c     2C F0 07 F1 | 	add	ptra, #44
06b50     04 4E 05 F1 | 	add	fp, #4
06b54     A7 12 62 FC | 	wrlong	arg01, fp
06b58     4A 00 00 FF 
06b5c     88 E4 05 F1 | 	add	objptr, ##38024
06b60     F2 26 02 FB | 	rdlong	local01, objptr
06b64     0C 4E 05 F1 | 	add	fp, #12
06b68     A7 26 62 FC | 	wrlong	local01, fp
06b6c     10 4E 85 F1 | 	sub	fp, #16
06b70                 | ' 
06b70                 | ' searchptr=programstart
06b70                 | ' do
06b70     3E 00 00 FF 
06b74     BC E5 85 F1 | 	sub	objptr, ##32188
06b78                 | LR__0570
06b78     14 4E 05 F1 | 	add	fp, #20
06b7c     A7 12 02 F6 | 	mov	arg01, fp
06b80     04 4E 85 F1 | 	sub	fp, #4
06b84     A7 14 02 FB | 	rdlong	arg02, fp
06b88     10 4E 85 F1 | 	sub	fp, #16
06b8c     18 16 06 F6 | 	mov	arg03, #24
06b90     40 A4 B1 FD | 	call	#_psram_spin2_read1
06b94     10 4E 05 F1 | 	add	fp, #16
06b98     A7 26 02 FB | 	rdlong	local01, fp
06b9c     08 4E 85 F1 | 	sub	fp, #8
06ba0     A7 26 62 FC | 	wrlong	local01, fp
06ba4     20 4E 05 F1 | 	add	fp, #32
06ba8     A7 26 02 FB | 	rdlong	local01, fp
06bac     18 4E 85 F1 | 	sub	fp, #24
06bb0     A7 26 62 FC | 	wrlong	local01, fp
06bb4     04 4E 05 F1 | 	add	fp, #4
06bb8     A7 26 02 FB | 	rdlong	local01, fp
06bbc     10 4E 85 F1 | 	sub	fp, #16
06bc0     A7 16 02 FB | 	rdlong	arg03, fp
06bc4     04 4E 85 F1 | 	sub	fp, #4
06bc8     0B 27 12 F2 | 	cmp	local01, arg03 wc
06bcc     28 4E 05 C1 |  if_b	add	fp, #40
06bd0     A7 28 02 CB |  if_b	rdlong	local02, fp
06bd4     28 4E 85 C1 |  if_b	sub	fp, #40
06bd8     FF FF 3F CF 
06bdc     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06be0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0570
06be4     0B 00 00 FF 
06be8     CC E4 85 F1 | 	sub	objptr, ##5836
06bec                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06bec     14 4E 05 F1 | 	add	fp, #20
06bf0     A7 26 02 FB | 	rdlong	local01, fp
06bf4     10 4E 85 F1 | 	sub	fp, #16
06bf8     A7 28 02 FB | 	rdlong	local02, fp
06bfc     04 4E 85 F1 | 	sub	fp, #4
06c00     14 27 0A F2 | 	cmp	local01, local02 wz
06c04     01 FA 65 56 |  if_ne	neg	result1, #1
06c08     34 02 90 5D |  if_ne	jmp	#LR__0575
06c0c     08 4E 05 F1 | 	add	fp, #8
06c10     A7 12 02 FB | 	rdlong	arg01, fp
06c14     08 4E 85 F1 | 	sub	fp, #8
06c18     01 14 66 F6 | 	neg	arg02, #1
06c1c     60 78 B1 FD | 	call	#_pslpoke
06c20                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06c20                 | ' 
06c20                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06c20     28 4E 05 F1 | 	add	fp, #40
06c24     A7 26 02 FB | 	rdlong	local01, fp
06c28     28 4E 85 F1 | 	sub	fp, #40
06c2c     FF FF 3F FF 
06c30     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06c34     24 4E 05 A1 |  if_e	add	fp, #36
06c38     A7 28 02 AB |  if_e	rdlong	local02, fp
06c3c     24 4E 85 A1 |  if_e	sub	fp, #36
06c40     FF FF 7F AF 
06c44     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06c48     88 00 90 5D |  if_ne	jmp	#LR__0571
06c4c     4A 00 00 FF 
06c50     88 E4 05 F1 | 	add	objptr, ##38024
06c54     00 04 80 FF 
06c58     F2 00 68 FC | 	wrlong	##524288, objptr
06c5c     07 00 00 FF 
06c60     2C E4 85 F1 | 	sub	objptr, ##3628
06c64     00 04 80 FF 
06c68     F2 00 68 FC | 	wrlong	##524288, objptr
06c6c     07 00 00 FF 
06c70     30 E4 05 F1 | 	add	objptr, ##3632
06c74     F2 00 68 FC | 	wrlong	#0, objptr
06c78     04 E4 05 F1 | 	add	objptr, #4
06c7c     FF FF FF FF 
06c80     F2 FE 6B FC | 	wrlong	##-1, objptr
06c84     4A 00 00 FF 
06c88     90 E4 85 F1 | 	sub	objptr, ##38032
06c8c     00 12 06 F6 | 	mov	arg01, #0
06c90     01 14 66 F6 | 	neg	arg02, #1
06c94     E8 77 B1 FD | 	call	#_pslpoke
06c98     10 12 06 F6 | 	mov	arg01, #16
06c9c     01 14 66 F6 | 	neg	arg02, #1
06ca0     DC 77 B1 FD | 	call	#_pslpoke
06ca4     14 12 06 F6 | 	mov	arg01, #20
06ca8     1E 14 CE F9 | 	bmask	arg02, #30
06cac     D0 77 B1 FD | 	call	#_pslpoke
06cb0     50 00 00 FF 
06cb4     B8 E4 05 F1 | 	add	objptr, ##41144
06cb8     00 04 80 FF 
06cbc     F2 00 68 FC | 	wrlong	##524288, objptr
06cc0     04 E4 05 F1 | 	add	objptr, #4
06cc4     00 04 80 FF 
06cc8     F2 00 68 FC | 	wrlong	##524288, objptr
06ccc     50 00 00 FF 
06cd0     BC E4 85 F1 | 	sub	objptr, ##41148
06cd4                 | LR__0571
06cd4                 | ' 
06cd4                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06cd4     28 4E 05 F1 | 	add	fp, #40
06cd8     A7 26 02 FB | 	rdlong	local01, fp
06cdc     28 4E 85 F1 | 	sub	fp, #40
06ce0     FF FF 3F FF 
06ce4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06ce8     74 00 90 5D |  if_ne	jmp	#LR__0572
06cec     24 4E 05 F1 | 	add	fp, #36
06cf0     A7 28 02 FB | 	rdlong	local02, fp
06cf4     24 4E 85 F1 | 	sub	fp, #36
06cf8     FF FF 7F FF 
06cfc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06d00     5C 00 90 AD |  if_e	jmp	#LR__0572
06d04     24 4E 05 F1 | 	add	fp, #36
06d08     A7 12 02 FB | 	rdlong	arg01, fp
06d0c     24 4E 85 F1 | 	sub	fp, #36
06d10     14 12 06 F1 | 	add	arg01, #20
06d14     1E 14 CE F9 | 	bmask	arg02, #30
06d18     64 77 B1 FD | 	call	#_pslpoke
06d1c     24 4E 05 F1 | 	add	fp, #36
06d20     A7 26 02 FB | 	rdlong	local01, fp
06d24     4A 00 00 FF 
06d28     90 E4 05 F1 | 	add	objptr, ##38032
06d2c     F2 26 62 FC | 	wrlong	local01, objptr
06d30     4A 00 00 FF 
06d34     90 E4 85 F1 | 	sub	objptr, ##38032
06d38     A7 12 02 FB | 	rdlong	arg01, fp
06d3c     24 4E 85 F1 | 	sub	fp, #36
06d40     6C 78 B1 FD | 	call	#_pslpeek
06d44     4A 00 00 FF 
06d48     8C E4 05 F1 | 	add	objptr, ##38028
06d4c     F2 FA 61 FC | 	wrlong	result1, objptr
06d50     4A 00 00 FF 
06d54     8C E4 85 F1 | 	sub	objptr, ##38028
06d58                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06d58                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06d58                 | '   lastline=pslpeek(header(4))
06d58                 | '   return 0
06d58     00 FA 05 F6 | 	mov	result1, #0
06d5c     E0 00 90 FD | 	jmp	#LR__0575
06d60                 | LR__0572
06d60                 | ' 
06d60                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06d60     28 4E 05 F1 | 	add	fp, #40
06d64     A7 26 02 FB | 	rdlong	local01, fp
06d68     28 4E 85 F1 | 	sub	fp, #40
06d6c     FF FF 3F FF 
06d70     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d74     58 00 90 AD |  if_e	jmp	#LR__0573
06d78     24 4E 05 F1 | 	add	fp, #36
06d7c     A7 28 02 FB | 	rdlong	local02, fp
06d80     24 4E 85 F1 | 	sub	fp, #36
06d84     FF FF 7F FF 
06d88     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06d8c     40 00 90 5D |  if_ne	jmp	#LR__0573
06d90     28 4E 05 F1 | 	add	fp, #40
06d94     A7 12 02 FB | 	rdlong	arg01, fp
06d98     28 4E 85 F1 | 	sub	fp, #40
06d9c     10 12 06 F1 | 	add	arg01, #16
06da0     01 14 66 F6 | 	neg	arg02, #1
06da4     D8 76 B1 FD | 	call	#_pslpoke
06da8     28 4E 05 F1 | 	add	fp, #40
06dac     A7 26 02 FB | 	rdlong	local01, fp
06db0     28 4E 85 F1 | 	sub	fp, #40
06db4     4A 00 00 FF 
06db8     88 E4 05 F1 | 	add	objptr, ##38024
06dbc     F2 26 62 FC | 	wrlong	local01, objptr
06dc0     4A 00 00 FF 
06dc4     88 E4 85 F1 | 	sub	objptr, ##38024
06dc8                 | ' '   print "deleted first line"
06dc8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06dc8                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06dc8                 | '   return 0
06dc8     00 FA 05 F6 | 	mov	result1, #0
06dcc     70 00 90 FD | 	jmp	#LR__0575
06dd0                 | LR__0573
06dd0                 | ' 
06dd0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06dd0     28 4E 05 F1 | 	add	fp, #40
06dd4     A7 26 02 FB | 	rdlong	local01, fp
06dd8     28 4E 85 F1 | 	sub	fp, #40
06ddc     FF FF 3F FF 
06de0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06de4     24 4E 05 51 |  if_ne	add	fp, #36
06de8     A7 28 02 5B |  if_ne	rdlong	local02, fp
06dec     24 4E 85 51 |  if_ne	sub	fp, #36
06df0     FF FF 7F 5F 
06df4     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06df8     40 00 90 AD |  if_e	jmp	#LR__0574
06dfc     28 4E 05 F1 | 	add	fp, #40
06e00     A7 12 02 FB | 	rdlong	arg01, fp
06e04     10 12 06 F1 | 	add	arg01, #16
06e08     04 4E 85 F1 | 	sub	fp, #4
06e0c     A7 14 02 FB | 	rdlong	arg02, fp
06e10     24 4E 85 F1 | 	sub	fp, #36
06e14     68 76 B1 FD | 	call	#_pslpoke
06e18     24 4E 05 F1 | 	add	fp, #36
06e1c     A7 12 02 FB | 	rdlong	arg01, fp
06e20     14 12 06 F1 | 	add	arg01, #20
06e24     04 4E 05 F1 | 	add	fp, #4
06e28     A7 14 02 FB | 	rdlong	arg02, fp
06e2c     28 4E 85 F1 | 	sub	fp, #40
06e30     4C 76 B1 FD | 	call	#_pslpoke
06e34                 | '    pslpoke(header(5)+16,header(4))  
06e34                 | '    pslpoke(header(4)+20, header(5))
06e34                 | '    return 0
06e34     00 FA 05 F6 | 	mov	result1, #0
06e38     04 00 90 FD | 	jmp	#LR__0575
06e3c                 | LR__0574
06e3c     00 FA 05 F6 | 	mov	result1, #0
06e40                 | LR__0575
06e40     A7 F0 03 F6 | 	mov	ptra, fp
06e44     B2 00 A0 FD | 	call	#popregs_
06e48                 | _deleteline_ret
06e48     2D 00 64 FD | 	ret
06e4c                 | 
06e4c                 | ' 
06e4c                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06e4c                 | ' 
06e4c                 | ' sub save_line
06e4c                 | _save_line
06e4c     03 4A 05 F6 | 	mov	COUNT_, #3
06e50     A8 00 A0 FD | 	call	#pushregs_
06e54     4A 00 00 FF 
06e58     7C E4 05 F1 | 	add	objptr, ##38012
06e5c     F2 16 02 FB | 	rdlong	arg03, objptr
06e60     01 16 06 F1 | 	add	arg03, #1
06e64     05 00 00 FF 
06e68     18 E4 85 F1 | 	sub	objptr, ##2584
06e6c     F2 14 02 FB | 	rdlong	arg02, objptr
06e70     0B 15 02 FD | 	qmul	arg02, arg03
06e74     0E 00 00 FF 
06e78     44 E4 85 F1 | 	sub	objptr, ##7236
06e7c     F2 12 02 FB | 	rdlong	arg01, objptr
06e80     37 00 00 FF 
06e84     20 E4 85 F1 | 	sub	objptr, ##28192
06e88     09 27 02 F6 | 	mov	local01, arg01
06e8c     18 28 62 FD | 	getqx	local02
06e90     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e94                 | LR__0580
06e94     13 FB C9 FA | 	rdbyte	result1, local01 wz
06e98     01 26 06 51 |  if_ne	add	local01, #1
06e9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06ea0                 | LR__0581
06ea0     09 27 82 F1 | 	sub	local01, arg01
06ea4     03 26 CE F7 | 	test	local01, #3 wz
06ea8     02 26 46 50 |  if_ne	shr	local01, #2
06eac     01 26 06 51 |  if_ne	add	local01, #1
06eb0     02 26 66 50 |  if_ne	shl	local01, #2
06eb4     14 2B 02 F6 | 	mov	local03, local02
06eb8     13 2B 02 F1 | 	add	local03, local01
06ebc     43 00 00 FF 
06ec0     5C E4 05 F1 | 	add	objptr, ##34396
06ec4     F2 16 02 FB | 	rdlong	arg03, objptr
06ec8     14 17 02 F1 | 	add	arg03, local02
06ecc     04 00 00 FF 
06ed0     28 E4 05 F1 | 	add	objptr, ##2088
06ed4     F2 16 62 FC | 	wrlong	arg03, objptr
06ed8     04 E4 05 F1 | 	add	objptr, #4
06edc     F2 26 62 FC | 	wrlong	local01, objptr
06ee0     0C E4 85 F1 | 	sub	objptr, #12
06ee4     F2 12 02 F6 | 	mov	arg01, objptr
06ee8     04 00 00 FF 
06eec     20 E4 85 F1 | 	sub	objptr, ##2080
06ef0     F2 14 02 FB | 	rdlong	arg02, objptr
06ef4     14 17 02 F6 | 	mov	arg03, local02
06ef8     37 00 00 FF 
06efc     90 E5 85 F1 | 	sub	objptr, ##28560
06f00     6C A1 B1 FD | 	call	#_psram_spin2_write
06f04     2B 00 00 FF 
06f08     54 E5 05 F1 | 	add	objptr, ##22356
06f0c     F2 12 02 FB | 	rdlong	arg01, objptr
06f10     0C 00 00 FF 
06f14     3C E4 05 F1 | 	add	objptr, ##6204
06f18     F2 14 02 FB | 	rdlong	arg02, objptr
06f1c     14 15 02 F1 | 	add	arg02, local02
06f20     13 17 02 F6 | 	mov	arg03, local01
06f24     37 00 00 FF 
06f28     90 E5 85 F1 | 	sub	objptr, ##28560
06f2c     40 A1 B1 FD | 	call	#_psram_spin2_write
06f30     37 00 00 FF 
06f34     90 E5 05 F1 | 	add	objptr, ##28560
06f38     F2 26 02 FB | 	rdlong	local01, objptr
06f3c     15 27 02 F1 | 	add	local01, local03
06f40     F2 26 62 FC | 	wrlong	local01, objptr
06f44     43 00 00 FF 
06f48     5C E4 85 F1 | 	sub	objptr, ##34396
06f4c     A7 F0 03 F6 | 	mov	ptra, fp
06f50     B2 00 A0 FD | 	call	#popregs_
06f54                 | _save_line_ret
06f54     2D 00 64 FD | 	ret
06f58                 | 
06f58                 | ' 
06f58                 | ' '----- Insert a new line into the middle of the program
06f58                 | ' 
06f58                 | ' function insertline(aline as ulong) as integer
06f58                 | _insertline
06f58     02 4A 05 F6 | 	mov	COUNT_, #2
06f5c     A8 00 A0 FD | 	call	#pushregs_
06f60     28 F0 07 F1 | 	add	ptra, #40
06f64     04 4E 05 F1 | 	add	fp, #4
06f68     A7 12 62 FC | 	wrlong	arg01, fp
06f6c     4A 00 00 FF 
06f70     88 E4 05 F1 | 	add	objptr, ##38024
06f74     F2 26 02 FB | 	rdlong	local01, objptr
06f78     04 4E 05 F1 | 	add	fp, #4
06f7c     A7 26 62 FC | 	wrlong	local01, fp
06f80     08 4E 85 F1 | 	sub	fp, #8
06f84                 | ' 
06f84                 | ' do
06f84     3E 00 00 FF 
06f88     BC E5 85 F1 | 	sub	objptr, ##32188
06f8c                 | LR__0590
06f8c     10 4E 05 F1 | 	add	fp, #16
06f90     A7 12 02 F6 | 	mov	arg01, fp
06f94     08 4E 85 F1 | 	sub	fp, #8
06f98     A7 14 02 FB | 	rdlong	arg02, fp
06f9c     08 4E 85 F1 | 	sub	fp, #8
06fa0     18 16 06 F6 | 	mov	arg03, #24
06fa4     2C A0 B1 FD | 	call	#_psram_spin2_read1
06fa8     08 4E 05 F1 | 	add	fp, #8
06fac     A7 26 02 FB | 	rdlong	local01, fp
06fb0     04 4E 05 F1 | 	add	fp, #4
06fb4     A7 26 62 FC | 	wrlong	local01, fp
06fb8     18 4E 05 F1 | 	add	fp, #24
06fbc     A7 26 02 FB | 	rdlong	local01, fp
06fc0     1C 4E 85 F1 | 	sub	fp, #28
06fc4     A7 26 62 FC | 	wrlong	local01, fp
06fc8     08 4E 05 F1 | 	add	fp, #8
06fcc     A7 26 02 FB | 	rdlong	local01, fp
06fd0     0C 4E 85 F1 | 	sub	fp, #12
06fd4     A7 16 02 FB | 	rdlong	arg03, fp
06fd8     04 4E 85 F1 | 	sub	fp, #4
06fdc     0B 27 12 F2 | 	cmp	local01, arg03 wc
06fe0     24 4E 05 C1 |  if_b	add	fp, #36
06fe4     A7 28 02 CB |  if_b	rdlong	local02, fp
06fe8     24 4E 85 C1 |  if_b	sub	fp, #36
06fec     FF FF 3F CF 
06ff0     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06ff4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0590
06ff8     0B 00 00 FF 
06ffc     CC E4 85 F1 | 	sub	objptr, ##5836
07000                 | ' 
07000                 | ' if header(0)=aline then return -1 				' delete it first
07000     10 4E 05 F1 | 	add	fp, #16
07004     A7 26 02 FB | 	rdlong	local01, fp
07008     0C 4E 85 F1 | 	sub	fp, #12
0700c     A7 28 02 FB | 	rdlong	local02, fp
07010     04 4E 85 F1 | 	sub	fp, #4
07014     14 27 0A F2 | 	cmp	local01, local02 wz
07018     01 FA 65 A6 |  if_e	neg	result1, #1
0701c     48 01 90 AD |  if_e	jmp	#LR__0593
07020                 | ' if header(0)<aline then return -2 				' end of program reached
07020     10 4E 05 F1 | 	add	fp, #16
07024     A7 26 02 FB | 	rdlong	local01, fp
07028     0C 4E 85 F1 | 	sub	fp, #12
0702c     A7 16 02 FB | 	rdlong	arg03, fp
07030     04 4E 85 F1 | 	sub	fp, #4
07034     0B 27 12 F2 | 	cmp	local01, arg03 wc
07038     02 FA 65 C6 |  if_b	neg	result1, #2
0703c     28 01 90 CD |  if_b	jmp	#LR__0593
07040                 | ' 
07040                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07040     20 4E 05 F1 | 	add	fp, #32
07044     A7 26 02 FB | 	rdlong	local01, fp
07048     20 4E 85 F1 | 	sub	fp, #32
0704c     FF FF 7F FF 
07050     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07054     78 00 90 5D |  if_ne	jmp	#LR__0591
07058     43 00 00 FF 
0705c     5C E4 05 F1 | 	add	objptr, ##34396
07060     F2 26 02 FB | 	rdlong	local01, objptr
07064     07 00 00 FF 
07068     2C E4 05 F1 | 	add	objptr, ##3628
0706c     F2 26 62 FC | 	wrlong	local01, objptr
07070     0C 4E 05 F1 | 	add	fp, #12
07074     A7 12 02 FB | 	rdlong	arg01, fp
07078     0C 4E 85 F1 | 	sub	fp, #12
0707c     10 12 06 F1 | 	add	arg01, #16
07080     07 00 00 FF 
07084     2C E4 85 F1 | 	sub	objptr, ##3628
07088     F2 14 02 FB | 	rdlong	arg02, objptr
0708c     43 00 00 FF 
07090     5C E4 85 F1 | 	sub	objptr, ##34396
07094     E8 73 B1 FD | 	call	#_pslpoke
07098     47 00 00 FF 
0709c     8C E4 05 F1 | 	add	objptr, ##36492
070a0     FF FF FF FF 
070a4     F2 FE 6B FC | 	wrlong	##-1, objptr
070a8     0C 4E 05 F1 | 	add	fp, #12
070ac     A7 26 02 FB | 	rdlong	local01, fp
070b0     0C 4E 85 F1 | 	sub	fp, #12
070b4     04 E4 05 F1 | 	add	objptr, #4
070b8     F2 26 62 FC | 	wrlong	local01, objptr
070bc     47 00 00 FF 
070c0     90 E4 85 F1 | 	sub	objptr, ##36496
070c4     84 FD BF FD | 	call	#_save_line
070c8                 | '   programstart=programptr
070c8                 | '   pslpoke(lineptr2+16,programptr)
070c8                 | '   ucompiledline(4)=$FFFF_FFFF
070c8                 | '   ucompiledline(5)=lineptr2
070c8                 | '   save_line
070c8                 | '   return 0
070c8     00 FA 05 F6 | 	mov	result1, #0
070cc     98 00 90 FD | 	jmp	#LR__0593
070d0                 | LR__0591
070d0                 | ' 
070d0                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
070d0     20 4E 05 F1 | 	add	fp, #32
070d4     A7 26 02 FB | 	rdlong	local01, fp
070d8     20 4E 85 F1 | 	sub	fp, #32
070dc     FF FF 7F FF 
070e0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
070e4     7C 00 90 AD |  if_e	jmp	#LR__0592
070e8     20 4E 05 F1 | 	add	fp, #32
070ec     A7 26 02 FB | 	rdlong	local01, fp
070f0     47 00 00 FF 
070f4     8C E4 05 F1 | 	add	objptr, ##36492
070f8     F2 26 62 FC | 	wrlong	local01, objptr
070fc     14 4E 85 F1 | 	sub	fp, #20
07100     A7 26 02 FB | 	rdlong	local01, fp
07104     04 E4 05 F1 | 	add	objptr, #4
07108     F2 26 62 FC | 	wrlong	local01, objptr
0710c     A7 12 02 FB | 	rdlong	arg01, fp
07110     0C 4E 85 F1 | 	sub	fp, #12
07114     10 12 06 F1 | 	add	arg01, #16
07118     04 00 00 FF 
0711c     34 E4 85 F1 | 	sub	objptr, ##2100
07120     F2 14 02 FB | 	rdlong	arg02, objptr
07124     43 00 00 FF 
07128     5C E4 85 F1 | 	sub	objptr, ##34396
0712c     50 73 B1 FD | 	call	#_pslpoke
07130     20 4E 05 F1 | 	add	fp, #32
07134     A7 12 02 FB | 	rdlong	arg01, fp
07138     20 4E 85 F1 | 	sub	fp, #32
0713c     14 12 06 F1 | 	add	arg01, #20
07140     43 00 00 FF 
07144     5C E4 05 F1 | 	add	objptr, ##34396
07148     F2 14 02 FB | 	rdlong	arg02, objptr
0714c     43 00 00 FF 
07150     5C E4 85 F1 | 	sub	objptr, ##34396
07154     28 73 B1 FD | 	call	#_pslpoke
07158     F0 FC BF FD | 	call	#_save_line
0715c                 | '   ucompiledline(4)=header(4)
0715c                 | '   ucompiledline(5)=lineptr2
0715c                 | '   pslpoke(lineptr2+16,programptr)
0715c                 | '   pslpoke(header(4)+20,programptr)
0715c                 | '   save_line
0715c                 | '   return 0
0715c     00 FA 05 F6 | 	mov	result1, #0
07160     04 00 90 FD | 	jmp	#LR__0593
07164                 | LR__0592
07164     00 FA 05 F6 | 	mov	result1, #0
07168                 | LR__0593
07168     A7 F0 03 F6 | 	mov	ptra, fp
0716c     B2 00 A0 FD | 	call	#popregs_
07170                 | _insertline_ret
07170     2D 00 64 FD | 	ret
07174                 | 
07174                 | ' 
07174                 | ' '----- Adds a new line at the end of the program
07174                 | ' 
07174                 | ' sub add_line_at_end(aline) 
07174                 | _add_line_at_end
07174     4A 00 00 FF 
07178     8C E4 05 F1 | 	add	objptr, ##38028
0717c     F2 12 62 FC | 	wrlong	arg01, objptr
07180     04 E4 05 F1 | 	add	objptr, #4
07184     F2 14 02 FB | 	rdlong	arg02, objptr
07188     03 00 00 FF 
0718c     04 E4 85 F1 | 	sub	objptr, ##1540
07190     F2 14 62 FC | 	wrlong	arg02, objptr
07194     03 00 00 FF 
07198     04 E4 05 F1 | 	add	objptr, ##1540
0719c     F2 12 02 FB | 	rdlong	arg01, objptr
071a0     14 12 06 F1 | 	add	arg01, #20
071a4     07 00 00 FF 
071a8     34 E4 85 F1 | 	sub	objptr, ##3636
071ac     F2 14 02 FB | 	rdlong	arg02, objptr
071b0     43 00 00 FF 
071b4     5C E4 85 F1 | 	sub	objptr, ##34396
071b8     C4 72 B1 FD | 	call	#_pslpoke
071bc     43 00 00 FF 
071c0     5C E4 05 F1 | 	add	objptr, ##34396
071c4     F2 14 02 FB | 	rdlong	arg02, objptr
071c8     07 00 00 FF 
071cc     34 E4 05 F1 | 	add	objptr, ##3636
071d0     F2 14 62 FC | 	wrlong	arg02, objptr
071d4     03 00 00 FF 
071d8     00 E4 85 F1 | 	sub	objptr, ##1536
071dc     FF FF BF FF 
071e0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
071e4                 | ' 
071e4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
071e4                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
071e4     04 00 00 FF 
071e8     34 E4 85 F1 | 	sub	objptr, ##2100
071ec     F2 14 02 FB | 	rdlong	arg02, objptr
071f0     43 00 00 FF 
071f4     5C E4 85 F1 | 	sub	objptr, ##34396
071f8     00 04 00 FF 
071fc     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07200     47 00 00 AF 
07204     8C E4 05 A1 |  if_e	add	objptr, ##36492
07208     FF FF FF AF 
0720c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07210     47 00 00 AF 
07214     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07218     30 FC BF FD | 	call	#_save_line
0721c     43 00 00 FF 
07220     5C E4 05 F1 | 	add	objptr, ##34396
07224     F2 12 02 FB | 	rdlong	arg01, objptr
07228     43 00 00 FF 
0722c     5C E4 85 F1 | 	sub	objptr, ##34396
07230     01 14 66 F6 | 	neg	arg02, #1
07234     48 72 B1 FD | 	call	#_pslpoke
07238                 | _add_line_at_end_ret
07238     2D 00 64 FD | 	ret
0723c                 | 
0723c                 | ' 
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' 
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' 
0723c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
0723c                 | ' 
0723c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
0723c                 | _compile_immediate
0723c     0A 4A 05 F6 | 	mov	COUNT_, #10
07240     A8 00 A0 FD | 	call	#pushregs_
07244                 | _compile_immediate_enter
07244     09 2D 02 F6 | 	mov	local04, arg01
07248     0A 2F 02 F6 | 	mov	local05, arg02
0724c     00 30 06 F6 | 	mov	local06, #0
07250     00 32 06 F6 | 	mov	local07, #0
07254     00 34 06 F6 | 	mov	local08, #0
07258                 | ' 
07258                 | ' ' linetype=cont+1
07258                 | ' ' 1 : this is the first part of the line that will continue
07258                 | ' ' 2 - this is the continuation of the line
07258                 | ' ' 3 - this is the last continued line
07258                 | ' ' 4 - this is the one and only part
07258                 | ' ' 5 - continued after if/else
07258                 | ' 
07258                 | ' err=0
07258                 | ' cmd=0
07258                 | ' vars=0
07258                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07258     02 2C 0E F2 | 	cmp	local04, #2 wz
0725c     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07260     24 00 90 5D |  if_ne	jmp	#LR__0600
07264     35 00 00 FF 
07268     10 E4 05 F1 | 	add	objptr, ##27152
0726c     F2 32 02 FB | 	rdlong	local07, objptr
07270     01 36 06 F6 | 	mov	local09, #1
07274     02 00 00 FF 
07278     34 E4 05 F1 | 	add	objptr, ##1076
0727c     F2 02 68 FC | 	wrlong	#1, objptr
07280     37 00 00 FF 
07284     44 E4 85 F1 | 	sub	objptr, ##28228
07288                 | LR__0600
07288                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07288     04 2C 0E F2 | 	cmp	local04, #4 wz
0728c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07290     30 00 90 5D |  if_ne	jmp	#LR__0601
07294     35 00 00 FF 
07298     18 E4 05 F1 | 	add	objptr, ##27160
0729c     F2 32 02 FB | 	rdlong	local07, objptr
072a0     02 36 06 F6 | 	mov	local09, #2
072a4     02 00 00 FF 
072a8     2C E4 05 F1 | 	add	objptr, ##1068
072ac     F2 04 68 FC | 	wrlong	#2, objptr
072b0     13 00 00 FF 
072b4     38 E4 05 F1 | 	add	objptr, ##9784
072b8     F2 04 68 FC | 	wrlong	#2, objptr
072bc     4A 00 00 FF 
072c0     7C E4 85 F1 | 	sub	objptr, ##38012
072c4                 | LR__0601
072c4                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
072c4     05 2C 0E F2 | 	cmp	local04, #5 wz
072c8     40 00 90 5D |  if_ne	jmp	#LR__0602
072cc     37 00 00 FF 
072d0     44 E4 05 F1 | 	add	objptr, ##28228
072d4     F2 FC 01 FB | 	rdlong	result2, objptr
072d8     FE 36 02 F6 | 	mov	local09, result2
072dc     03 36 66 F0 | 	shl	local09, #3
072e0     02 00 00 FF 
072e4     38 E4 85 F1 | 	sub	objptr, ##1080
072e8     F2 36 02 F1 | 	add	local09, objptr
072ec     04 36 06 F1 | 	add	local09, #4
072f0     1B 33 02 FB | 	rdlong	local07, local09
072f4     01 FC 05 F1 | 	add	result2, #1
072f8     02 00 00 FF 
072fc     38 E4 05 F1 | 	add	objptr, ##1080
07300     F2 FC 61 FC | 	wrlong	result2, objptr
07304     37 00 00 FF 
07308     44 E4 85 F1 | 	sub	objptr, ##28228
0730c                 | LR__0602
0730c                 | ' 
0730c                 | ' 'print  "In compile_immediate cmd=:", cmd
0730c                 | ' 451 select case cmd
0730c     5C 32 0E F2 | 	cmp	local07, #92 wz
07310     A0 02 90 AD |  if_e	jmp	#LR__0603
07314     B9 32 0E F2 | 	cmp	local07, #185 wz
07318     A4 02 90 AD |  if_e	jmp	#LR__0604
0731c     47 32 0E F2 | 	cmp	local07, #71 wz
07320     AC 02 90 AD |  if_e	jmp	#LR__0605
07324     59 32 0E F2 | 	cmp	local07, #89 wz
07328     B4 02 90 AD |  if_e	jmp	#LR__0606
0732c     C3 32 0E F2 | 	cmp	local07, #195 wz
07330     BC 02 90 AD |  if_e	jmp	#LR__0607
07334     45 32 0E F2 | 	cmp	local07, #69 wz
07338     C0 02 90 AD |  if_e	jmp	#LR__0608
0733c     69 32 0E F2 | 	cmp	local07, #105 wz
07340     C8 02 90 AD |  if_e	jmp	#LR__0609
07344     40 32 0E F2 | 	cmp	local07, #64 wz
07348     74 06 90 AD |  if_e	jmp	#LR__0679
0734c     B4 32 0E F2 | 	cmp	local07, #180 wz
07350     C4 02 90 AD |  if_e	jmp	#LR__0610
07354     49 32 0E F2 | 	cmp	local07, #73 wz
07358     C8 02 90 AD |  if_e	jmp	#LR__0611
0735c     50 32 0E F2 | 	cmp	local07, #80 wz
07360     CC 02 90 AD |  if_e	jmp	#LR__0612
07364     AE 32 0E F2 | 	cmp	local07, #174 wz
07368     D4 02 90 AD |  if_e	jmp	#LR__0613
0736c     B0 32 0E F2 | 	cmp	local07, #176 wz
07370     D8 02 90 AD |  if_e	jmp	#LR__0614
07374     AF 32 0E F2 | 	cmp	local07, #175 wz
07378     DC 02 90 AD |  if_e	jmp	#LR__0615
0737c     B1 32 0E F2 | 	cmp	local07, #177 wz
07380     E0 02 90 AD |  if_e	jmp	#LR__0616
07384     68 32 0E F2 | 	cmp	local07, #104 wz
07388     E4 02 90 AD |  if_e	jmp	#LR__0617
0738c     74 32 0E F2 | 	cmp	local07, #116 wz
07390     E8 02 90 AD |  if_e	jmp	#LR__0618
07394     73 32 0E F2 | 	cmp	local07, #115 wz
07398     F0 02 90 AD |  if_e	jmp	#LR__0619
0739c     6C 32 0E F2 | 	cmp	local07, #108 wz
073a0     F8 02 90 AD |  if_e	jmp	#LR__0620
073a4     89 32 0E F2 | 	cmp	local07, #137 wz
073a8     14 06 90 AD |  if_e	jmp	#LR__0679
073ac     C2 32 0E F2 | 	cmp	local07, #194 wz
073b0     F8 02 90 AD |  if_e	jmp	#LR__0621
073b4     72 32 0E F2 | 	cmp	local07, #114 wz
073b8     FC 02 90 AD |  if_e	jmp	#LR__0622
073bc     5D 32 0E F2 | 	cmp	local07, #93 wz
073c0     00 03 90 AD |  if_e	jmp	#LR__0623
073c4     96 32 0E F2 | 	cmp	local07, #150 wz
073c8     08 03 90 AD |  if_e	jmp	#LR__0624
073cc     43 32 0E F2 | 	cmp	local07, #67 wz
073d0     0C 03 90 AD |  if_e	jmp	#LR__0625
073d4     5A 32 0E F2 | 	cmp	local07, #90 wz
073d8     14 03 90 AD |  if_e	jmp	#LR__0626
073dc     AB 32 0E F2 | 	cmp	local07, #171 wz
073e0     DC 05 90 AD |  if_e	jmp	#LR__0679
073e4     BD 32 0E F2 | 	cmp	local07, #189 wz
073e8     14 03 90 AD |  if_e	jmp	#LR__0627
073ec     BB 32 0E F2 | 	cmp	local07, #187 wz
073f0     1C 03 90 AD |  if_e	jmp	#LR__0628
073f4     4E 32 0E F2 | 	cmp	local07, #78 wz
073f8     24 03 90 AD |  if_e	jmp	#LR__0629
073fc     A9 32 0E F2 | 	cmp	local07, #169 wz
07400     3C 03 90 AD |  if_e	jmp	#LR__0631
07404     46 32 0E F2 | 	cmp	local07, #70 wz
07408     54 03 90 AD |  if_e	jmp	#LR__0633
0740c     71 32 0E F2 | 	cmp	local07, #113 wz
07410     5C 03 90 AD |  if_e	jmp	#LR__0634
07414     60 32 0E F2 | 	cmp	local07, #96 wz
07418     60 03 90 AD |  if_e	jmp	#LR__0635
0741c     4A 32 0E F2 | 	cmp	local07, #74 wz
07420     64 03 90 AD |  if_e	jmp	#LR__0636
07424     48 32 0E F2 | 	cmp	local07, #72 wz
07428     68 03 90 AD |  if_e	jmp	#LR__0637
0742c     58 32 0E F2 | 	cmp	local07, #88 wz
07430     70 03 90 AD |  if_e	jmp	#LR__0638
07434     5F 32 0E F2 | 	cmp	local07, #95 wz
07438     78 03 90 AD |  if_e	jmp	#LR__0639
0743c     8A 32 0E F2 | 	cmp	local07, #138 wz
07440     7C 03 90 AD |  if_e	jmp	#LR__0640
07444     4C 32 0E F2 | 	cmp	local07, #76 wz
07448     80 03 90 AD |  if_e	jmp	#LR__0641
0744c     52 32 0E F2 | 	cmp	local07, #82 wz
07450     88 03 90 AD |  if_e	jmp	#LR__0642
07454     97 32 0E F2 | 	cmp	local07, #151 wz
07458     90 03 90 AD |  if_e	jmp	#LR__0643
0745c     C6 32 0E F2 | 	cmp	local07, #198 wz
07460     94 03 90 AD |  if_e	jmp	#LR__0644
07464     61 32 0E F2 | 	cmp	local07, #97 wz
07468     98 03 90 AD |  if_e	jmp	#LR__0645
0746c     63 32 0E F2 | 	cmp	local07, #99 wz
07470     9C 03 90 AD |  if_e	jmp	#LR__0646
07474     41 32 0E F2 | 	cmp	local07, #65 wz
07478     44 05 90 AD |  if_e	jmp	#LR__0679
0747c     4B 32 0E F2 | 	cmp	local07, #75 wz
07480     98 03 90 AD |  if_e	jmp	#LR__0647
07484     B3 32 0E F2 | 	cmp	local07, #179 wz
07488     9C 03 90 AD |  if_e	jmp	#LR__0648
0748c     5E 32 0E F2 | 	cmp	local07, #94 wz
07490     A0 03 90 AD |  if_e	jmp	#LR__0649
07494     7C 32 0E F2 | 	cmp	local07, #124 wz
07498     A4 03 90 AD |  if_e	jmp	#LR__0650
0749c     7D 32 0E F2 | 	cmp	local07, #125 wz
074a0     A8 03 90 AD |  if_e	jmp	#LR__0651
074a4     7E 32 0E F2 | 	cmp	local07, #126 wz
074a8     AC 03 90 AD |  if_e	jmp	#LR__0652
074ac     7F 32 0E F2 | 	cmp	local07, #127 wz
074b0     B0 03 90 AD |  if_e	jmp	#LR__0653
074b4     80 32 0E F2 | 	cmp	local07, #128 wz
074b8     B4 03 90 AD |  if_e	jmp	#LR__0654
074bc     55 32 0E F2 | 	cmp	local07, #85 wz
074c0     B8 03 90 AD |  if_e	jmp	#LR__0655
074c4     75 32 0E F2 | 	cmp	local07, #117 wz
074c8     BC 03 90 AD |  if_e	jmp	#LR__0656
074cc     42 32 0E F2 | 	cmp	local07, #66 wz
074d0     C4 03 90 AD |  if_e	jmp	#LR__0657
074d4     95 32 0E F2 | 	cmp	local07, #149 wz
074d8     CC 03 90 AD |  if_e	jmp	#LR__0658
074dc     AC 32 0E F2 | 	cmp	local07, #172 wz
074e0     DC 04 90 AD |  if_e	jmp	#LR__0679
074e4     81 32 0E F2 | 	cmp	local07, #129 wz
074e8     C8 03 90 AD |  if_e	jmp	#LR__0659
074ec     44 32 0E F2 | 	cmp	local07, #68 wz
074f0     CC 03 90 AD |  if_e	jmp	#LR__0660
074f4     BC 32 0E F2 | 	cmp	local07, #188 wz
074f8     D0 03 90 AD |  if_e	jmp	#LR__0661
074fc     88 32 0E F2 | 	cmp	local07, #136 wz
07500     BC 04 90 AD |  if_e	jmp	#LR__0679
07504     92 32 0E F2 | 	cmp	local07, #146 wz
07508     D0 03 90 AD |  if_e	jmp	#LR__0662
0750c     BE 32 0E F2 | 	cmp	local07, #190 wz
07510     68 05 90 AD |  if_e	jmp	#LR__0680
07514     AA 32 0E F2 | 	cmp	local07, #170 wz
07518     A4 04 90 AD |  if_e	jmp	#LR__0679
0751c     4D 32 0E F2 | 	cmp	local07, #77 wz
07520     C4 03 90 AD |  if_e	jmp	#LR__0663
07524     51 32 0E F2 | 	cmp	local07, #81 wz
07528     CC 03 90 AD |  if_e	jmp	#LR__0664
0752c     8E 32 0E F2 | 	cmp	local07, #142 wz
07530     D4 03 90 AD |  if_e	jmp	#LR__0665
07534     90 32 0E F2 | 	cmp	local07, #144 wz
07538     D8 03 90 AD |  if_e	jmp	#LR__0666
0753c     8D 32 0E F2 | 	cmp	local07, #141 wz
07540     DC 03 90 AD |  if_e	jmp	#LR__0667
07544     8C 32 0E F2 | 	cmp	local07, #140 wz
07548     E0 03 90 AD |  if_e	jmp	#LR__0668
0754c     91 32 0E F2 | 	cmp	local07, #145 wz
07550     E4 03 90 AD |  if_e	jmp	#LR__0669
07554     8B 32 0E F2 | 	cmp	local07, #139 wz
07558     E8 03 90 AD |  if_e	jmp	#LR__0670
0755c     8F 32 0E F2 | 	cmp	local07, #143 wz
07560     EC 03 90 AD |  if_e	jmp	#LR__0671
07564     B2 32 0E F2 | 	cmp	local07, #178 wz
07568     F0 03 90 AD |  if_e	jmp	#LR__0672
0756c     6D 32 0E F2 | 	cmp	local07, #109 wz
07570     F8 03 90 AD |  if_e	jmp	#LR__0673
07574     70 32 0E F2 | 	cmp	local07, #112 wz
07578     44 04 90 AD |  if_e	jmp	#LR__0679
0757c     56 32 0E F2 | 	cmp	local07, #86 wz
07580     F4 03 90 AD |  if_e	jmp	#LR__0674
07584     57 32 0E F2 | 	cmp	local07, #87 wz
07588     34 04 90 AD |  if_e	jmp	#LR__0679
0758c     79 32 0E F2 | 	cmp	local07, #121 wz
07590     F0 03 90 AD |  if_e	jmp	#LR__0675
07594     77 32 0E F2 | 	cmp	local07, #119 wz
07598     F4 03 90 AD |  if_e	jmp	#LR__0676
0759c     78 32 0E F2 | 	cmp	local07, #120 wz
075a0     F8 03 90 AD |  if_e	jmp	#LR__0677
075a4     01 00 00 FF 
075a8     04 32 0E F2 | 	cmp	local07, ##516 wz
075ac     F8 03 90 AD |  if_e	jmp	#LR__0678
075b0     C8 04 90 FD | 	jmp	#LR__0680
075b4                 | LR__0603
075b4     14 0B B0 FD | 	call	#_compile_fun_2p
075b8     FD 30 02 F6 | 	mov	local06, result1
075bc     00 04 90 FD | 	jmp	#LR__0679
075c0                 | LR__0604
075c0     D8 0D B0 FD | 	call	#_compile_fun_varp
075c4     FD 34 02 F6 | 	mov	local08, result1
075c8     FE 30 02 F6 | 	mov	local06, result2
075cc     F0 03 90 FD | 	jmp	#LR__0679
075d0                 | LR__0605
075d0     C8 0D B0 FD | 	call	#_compile_fun_varp
075d4     FD 34 02 F6 | 	mov	local08, result1
075d8     FE 30 02 F6 | 	mov	local06, result2
075dc     E0 03 90 FD | 	jmp	#LR__0679
075e0                 | LR__0606
075e0     B8 0D B0 FD | 	call	#_compile_fun_varp
075e4     FD 34 02 F6 | 	mov	local08, result1
075e8     FE 30 02 F6 | 	mov	local06, result2
075ec     D0 03 90 FD | 	jmp	#LR__0679
075f0                 | LR__0607
075f0                 | ' return expr()
075f0     80 2A B0 FD | 	call	#_expr
075f4     FD 30 02 F6 | 	mov	local06, result1
075f8     C4 03 90 FD | 	jmp	#LR__0679
075fc                 | LR__0608
075fc     9C 0D B0 FD | 	call	#_compile_fun_varp
07600     FD 34 02 F6 | 	mov	local08, result1
07604     FE 30 02 F6 | 	mov	local06, result2
07608     B4 03 90 FD | 	jmp	#LR__0679
0760c                 | LR__0609
0760c                 | ' return expr()
0760c     64 2A B0 FD | 	call	#_expr
07610     FD 30 02 F6 | 	mov	local06, result1
07614     A8 03 90 FD | 	jmp	#LR__0679
07618                 | LR__0610
07618                 | ' return expr()
07618     58 2A B0 FD | 	call	#_expr
0761c     FD 30 02 F6 | 	mov	local06, result1
07620     9C 03 90 FD | 	jmp	#LR__0679
07624                 | LR__0611
07624                 | ' return expr()
07624     4C 2A B0 FD | 	call	#_expr
07628     FD 30 02 F6 | 	mov	local06, result1
0762c     90 03 90 FD | 	jmp	#LR__0679
07630                 | LR__0612
07630     68 0D B0 FD | 	call	#_compile_fun_varp
07634     FD 34 02 F6 | 	mov	local08, result1
07638     FE 30 02 F6 | 	mov	local06, result2
0763c     80 03 90 FD | 	jmp	#LR__0679
07640                 | LR__0613
07640     88 0A B0 FD | 	call	#_compile_fun_2p
07644     FD 30 02 F6 | 	mov	local06, result1
07648     74 03 90 FD | 	jmp	#LR__0679
0764c                 | LR__0614
0764c     7C 0A B0 FD | 	call	#_compile_fun_2p
07650     FD 30 02 F6 | 	mov	local06, result1
07654     68 03 90 FD | 	jmp	#LR__0679
07658                 | LR__0615
07658     70 0A B0 FD | 	call	#_compile_fun_2p
0765c     FD 30 02 F6 | 	mov	local06, result1
07660     5C 03 90 FD | 	jmp	#LR__0679
07664                 | LR__0616
07664     64 0A B0 FD | 	call	#_compile_fun_2p
07668     FD 30 02 F6 | 	mov	local06, result1
0766c     50 03 90 FD | 	jmp	#LR__0679
07670                 | LR__0617
07670                 | ' return expr()
07670     00 2A B0 FD | 	call	#_expr
07674     FD 30 02 F6 | 	mov	local06, result1
07678     44 03 90 FD | 	jmp	#LR__0679
0767c                 | LR__0618
0767c     1C 0D B0 FD | 	call	#_compile_fun_varp
07680     FD 34 02 F6 | 	mov	local08, result1
07684     FE 30 02 F6 | 	mov	local06, result2
07688     34 03 90 FD | 	jmp	#LR__0679
0768c                 | LR__0619
0768c     0C 0D B0 FD | 	call	#_compile_fun_varp
07690     FD 34 02 F6 | 	mov	local08, result1
07694     FE 30 02 F6 | 	mov	local06, result2
07698     24 03 90 FD | 	jmp	#LR__0679
0769c                 | LR__0620
0769c     FC 0C B0 FD | 	call	#_compile_fun_varp
076a0     FD 34 02 F6 | 	mov	local08, result1
076a4     FE 30 02 F6 | 	mov	local06, result2
076a8     14 03 90 FD | 	jmp	#LR__0679
076ac                 | LR__0621
076ac                 | ' return expr()
076ac     C4 29 B0 FD | 	call	#_expr
076b0     FD 30 02 F6 | 	mov	local06, result1
076b4     08 03 90 FD | 	jmp	#LR__0679
076b8                 | LR__0622
076b8     B4 19 B0 FD | 	call	#_compile_dim
076bc     FD 30 02 F6 | 	mov	local06, result1
076c0     B8 03 90 FD | 	jmp	#LR__0680
076c4                 | LR__0623
076c4     D4 0C B0 FD | 	call	#_compile_fun_varp
076c8     FD 34 02 F6 | 	mov	local08, result1
076cc     FE 30 02 F6 | 	mov	local06, result2
076d0     EC 02 90 FD | 	jmp	#LR__0679
076d4                 | LR__0624
076d4     F4 09 B0 FD | 	call	#_compile_fun_2p
076d8     FD 30 02 F6 | 	mov	local06, result1
076dc     E0 02 90 FD | 	jmp	#LR__0679
076e0                 | LR__0625
076e0     B8 0C B0 FD | 	call	#_compile_fun_varp
076e4     FD 34 02 F6 | 	mov	local08, result1
076e8     FE 30 02 F6 | 	mov	local06, result2
076ec     D0 02 90 FD | 	jmp	#LR__0679
076f0                 | LR__0626
076f0     17 13 02 F6 | 	mov	arg01, local05
076f4     40 18 B0 FD | 	call	#_compile_else
076f8     FD 30 02 F6 | 	mov	local06, result1
076fc     7C 03 90 FD | 	jmp	#LR__0680
07700                 | LR__0627
07700     98 0C B0 FD | 	call	#_compile_fun_varp
07704     FD 34 02 F6 | 	mov	local08, result1
07708     FE 30 02 F6 | 	mov	local06, result2
0770c     B0 02 90 FD | 	jmp	#LR__0679
07710                 | LR__0628
07710     88 0C B0 FD | 	call	#_compile_fun_varp
07714     FD 34 02 F6 | 	mov	local08, result1
07718     FE 30 02 F6 | 	mov	local06, result2
0771c     A0 02 90 FD | 	jmp	#LR__0679
07720                 | LR__0629
07720     01 2E 16 F2 | 	cmp	local05, #1 wc
07724     08 00 90 CD |  if_b	jmp	#LR__0630
07728     58 25 B0 FD | 	call	#_compile_goto
0772c     4C 03 90 FD | 	jmp	#LR__0680
07730                 | LR__0630
07730     19 12 06 F6 | 	mov	arg01, #25
07734     00 14 06 F6 | 	mov	arg02, #0
07738     B8 6B B1 FD | 	call	#_printerror
0773c     3C 03 90 FD | 	jmp	#LR__0680
07740                 | LR__0631
07740     01 2E 16 F2 | 	cmp	local05, #1 wc
07744     08 00 90 CD |  if_b	jmp	#LR__0632
07748     D4 24 B0 FD | 	call	#_compile_gosub
0774c     2C 03 90 FD | 	jmp	#LR__0680
07750                 | LR__0632
07750     19 12 06 F6 | 	mov	arg01, #25
07754     00 14 06 F6 | 	mov	arg02, #0
07758     98 6B B1 FD | 	call	#_printerror
0775c     1C 03 90 FD | 	jmp	#LR__0680
07760                 | LR__0633
07760     38 0C B0 FD | 	call	#_compile_fun_varp
07764     FD 34 02 F6 | 	mov	local08, result1
07768     FE 30 02 F6 | 	mov	local06, result2
0776c     50 02 90 FD | 	jmp	#LR__0679
07770                 | LR__0634
07770     D0 0A B0 FD | 	call	#_compile_fun_4p
07774     FD 30 02 F6 | 	mov	local06, result1
07778     44 02 90 FD | 	jmp	#LR__0679
0777c                 | LR__0635
0777c                 | ' return expr()
0777c     F4 28 B0 FD | 	call	#_expr
07780     FD 30 02 F6 | 	mov	local06, result1
07784     38 02 90 FD | 	jmp	#LR__0679
07788                 | LR__0636
07788     B8 1F B0 FD | 	call	#_compile_for
0778c     FD 30 02 F6 | 	mov	local06, result1
07790     E8 02 90 FD | 	jmp	#LR__0680
07794                 | LR__0637
07794     04 0C B0 FD | 	call	#_compile_fun_varp
07798     FD 34 02 F6 | 	mov	local08, result1
0779c     FE 30 02 F6 | 	mov	local06, result2
077a0     1C 02 90 FD | 	jmp	#LR__0679
077a4                 | LR__0638
077a4     17 13 02 F6 | 	mov	arg01, local05
077a8     04 16 B0 FD | 	call	#_compile_if
077ac     FD 30 02 F6 | 	mov	local06, result1
077b0     C8 02 90 FD | 	jmp	#LR__0680
077b4                 | LR__0639
077b4                 | ' return expr()
077b4     BC 28 B0 FD | 	call	#_expr
077b8     FD 30 02 F6 | 	mov	local06, result1
077bc     00 02 90 FD | 	jmp	#LR__0679
077c0                 | LR__0640
077c0                 | ' return expr()
077c0     B0 28 B0 FD | 	call	#_expr
077c4     FD 30 02 F6 | 	mov	local06, result1
077c8     F4 01 90 FD | 	jmp	#LR__0679
077cc                 | LR__0641
077cc     CC 0B B0 FD | 	call	#_compile_fun_varp
077d0     FD 34 02 F6 | 	mov	local08, result1
077d4     FE 30 02 F6 | 	mov	local06, result2
077d8     E4 01 90 FD | 	jmp	#LR__0679
077dc                 | LR__0642
077dc     BC 0B B0 FD | 	call	#_compile_fun_varp
077e0     FD 34 02 F6 | 	mov	local08, result1
077e4     FE 30 02 F6 | 	mov	local06, result2
077e8     D4 01 90 FD | 	jmp	#LR__0679
077ec                 | LR__0643
077ec     DC 08 B0 FD | 	call	#_compile_fun_2p
077f0     FD 30 02 F6 | 	mov	local06, result1
077f4     C8 01 90 FD | 	jmp	#LR__0679
077f8                 | LR__0644
077f8                 | ' return expr()
077f8     78 28 B0 FD | 	call	#_expr
077fc     FD 30 02 F6 | 	mov	local06, result1
07800     BC 01 90 FD | 	jmp	#LR__0679
07804                 | LR__0645
07804                 | ' return expr()
07804     6C 28 B0 FD | 	call	#_expr
07808     FD 30 02 F6 | 	mov	local06, result1
0780c     B0 01 90 FD | 	jmp	#LR__0679
07810                 | LR__0646
07810                 | ' return expr()
07810     60 28 B0 FD | 	call	#_expr
07814     FD 30 02 F6 | 	mov	local06, result1
07818     A4 01 90 FD | 	jmp	#LR__0679
0781c                 | LR__0647
0781c     68 22 B0 FD | 	call	#_compile_next
07820     FD 30 02 F6 | 	mov	local06, result1
07824     54 02 90 FD | 	jmp	#LR__0680
07828                 | LR__0648
07828     28 09 B0 FD | 	call	#_compile_fun_3p
0782c     FD 30 02 F6 | 	mov	local06, result1
07830     8C 01 90 FD | 	jmp	#LR__0679
07834                 | LR__0649
07834                 | ' return expr()
07834     3C 28 B0 FD | 	call	#_expr
07838     FD 30 02 F6 | 	mov	local06, result1
0783c     80 01 90 FD | 	jmp	#LR__0679
07840                 | LR__0650
07840                 | ' return expr()
07840     30 28 B0 FD | 	call	#_expr
07844     FD 30 02 F6 | 	mov	local06, result1
07848     74 01 90 FD | 	jmp	#LR__0679
0784c                 | LR__0651
0784c                 | ' return expr()
0784c     24 28 B0 FD | 	call	#_expr
07850     FD 30 02 F6 | 	mov	local06, result1
07854     68 01 90 FD | 	jmp	#LR__0679
07858                 | LR__0652
07858                 | ' return expr()
07858     18 28 B0 FD | 	call	#_expr
0785c     FD 30 02 F6 | 	mov	local06, result1
07860     5C 01 90 FD | 	jmp	#LR__0679
07864                 | LR__0653
07864     DC 09 B0 FD | 	call	#_compile_fun_4p
07868     FD 30 02 F6 | 	mov	local06, result1
0786c     50 01 90 FD | 	jmp	#LR__0679
07870                 | LR__0654
07870                 | ' return expr()
07870     00 28 B0 FD | 	call	#_expr
07874     FD 30 02 F6 | 	mov	local06, result1
07878     44 01 90 FD | 	jmp	#LR__0679
0787c                 | LR__0655
0787c     4C 08 B0 FD | 	call	#_compile_fun_2p
07880     FD 30 02 F6 | 	mov	local06, result1
07884     38 01 90 FD | 	jmp	#LR__0679
07888                 | LR__0656
07888     10 0B B0 FD | 	call	#_compile_fun_varp
0788c     FD 34 02 F6 | 	mov	local08, result1
07890     FE 30 02 F6 | 	mov	local06, result2
07894     28 01 90 FD | 	jmp	#LR__0679
07898                 | LR__0657
07898     00 0B B0 FD | 	call	#_compile_fun_varp
0789c     FD 34 02 F6 | 	mov	local08, result1
078a0     FE 30 02 F6 | 	mov	local06, result2
078a4     18 01 90 FD | 	jmp	#LR__0679
078a8                 | LR__0658
078a8     20 08 B0 FD | 	call	#_compile_fun_2p
078ac     FD 30 02 F6 | 	mov	local06, result1
078b0     0C 01 90 FD | 	jmp	#LR__0679
078b4                 | LR__0659
078b4     14 08 B0 FD | 	call	#_compile_fun_2p
078b8     FD 30 02 F6 | 	mov	local06, result1
078bc     00 01 90 FD | 	jmp	#LR__0679
078c0                 | LR__0660
078c0     14 0E B0 FD | 	call	#_compile_print
078c4     FD 30 02 F6 | 	mov	local06, result1
078c8     B0 01 90 FD | 	jmp	#LR__0680
078cc                 | LR__0661
078cc     CC 0A B0 FD | 	call	#_compile_fun_varp
078d0     FD 34 02 F6 | 	mov	local08, result1
078d4     FE 30 02 F6 | 	mov	local06, result2
078d8     E4 00 90 FD | 	jmp	#LR__0679
078dc                 | LR__0662
078dc                 | ' return expr()
078dc     94 27 B0 FD | 	call	#_expr
078e0     FD 30 02 F6 | 	mov	local06, result1
078e4     D8 00 90 FD | 	jmp	#LR__0679
078e8                 | LR__0663
078e8     B0 0A B0 FD | 	call	#_compile_fun_varp
078ec     FD 34 02 F6 | 	mov	local08, result1
078f0     FE 30 02 F6 | 	mov	local06, result2
078f4     C8 00 90 FD | 	jmp	#LR__0679
078f8                 | LR__0664
078f8     A0 0A B0 FD | 	call	#_compile_fun_varp
078fc     FD 34 02 F6 | 	mov	local08, result1
07900     FE 30 02 F6 | 	mov	local06, result2
07904     B8 00 90 FD | 	jmp	#LR__0679
07908                 | LR__0665
07908     C0 07 B0 FD | 	call	#_compile_fun_2p
0790c     FD 30 02 F6 | 	mov	local06, result1
07910     AC 00 90 FD | 	jmp	#LR__0679
07914                 | LR__0666
07914     B4 07 B0 FD | 	call	#_compile_fun_2p
07918     FD 30 02 F6 | 	mov	local06, result1
0791c     A0 00 90 FD | 	jmp	#LR__0679
07920                 | LR__0667
07920     A8 07 B0 FD | 	call	#_compile_fun_2p
07924     FD 30 02 F6 | 	mov	local06, result1
07928     94 00 90 FD | 	jmp	#LR__0679
0792c                 | LR__0668
0792c     9C 07 B0 FD | 	call	#_compile_fun_2p
07930     FD 30 02 F6 | 	mov	local06, result1
07934     88 00 90 FD | 	jmp	#LR__0679
07938                 | LR__0669
07938     90 07 B0 FD | 	call	#_compile_fun_2p
0793c     FD 30 02 F6 | 	mov	local06, result1
07940     7C 00 90 FD | 	jmp	#LR__0679
07944                 | LR__0670
07944     84 07 B0 FD | 	call	#_compile_fun_2p
07948     FD 30 02 F6 | 	mov	local06, result1
0794c     70 00 90 FD | 	jmp	#LR__0679
07950                 | LR__0671
07950     78 07 B0 FD | 	call	#_compile_fun_2p
07954     FD 30 02 F6 | 	mov	local06, result1
07958     64 00 90 FD | 	jmp	#LR__0679
0795c                 | LR__0672
0795c     3C 0A B0 FD | 	call	#_compile_fun_varp
07960     FD 34 02 F6 | 	mov	local08, result1
07964     FE 30 02 F6 | 	mov	local06, result2
07968     54 00 90 FD | 	jmp	#LR__0679
0796c                 | LR__0673
0796c     E4 07 B0 FD | 	call	#_compile_fun_3p
07970     FD 30 02 F6 | 	mov	local06, result1
07974     48 00 90 FD | 	jmp	#LR__0679
07978                 | LR__0674
07978                 | ' return expr()
07978     F8 26 B0 FD | 	call	#_expr
0797c     FD 30 02 F6 | 	mov	local06, result1
07980     3C 00 90 FD | 	jmp	#LR__0679
07984                 | LR__0675
07984     44 07 B0 FD | 	call	#_compile_fun_2p
07988     FD 30 02 F6 | 	mov	local06, result1
0798c     30 00 90 FD | 	jmp	#LR__0679
07990                 | LR__0676
07990     38 07 B0 FD | 	call	#_compile_fun_2p
07994     FD 30 02 F6 | 	mov	local06, result1
07998     24 00 90 FD | 	jmp	#LR__0679
0799c                 | LR__0677
0799c     2C 07 B0 FD | 	call	#_compile_fun_2p
079a0     FD 30 02 F6 | 	mov	local06, result1
079a4     18 00 90 FD | 	jmp	#LR__0679
079a8                 | LR__0678
079a8     CC 0A B0 FD | 	call	#_compile_array_assign
079ac     FD 30 02 F6 | 	mov	local06, result1
079b0     0E 30 0E F2 | 	cmp	local06, #14 wz
079b4     C4 00 90 5D |  if_ne	jmp	#LR__0680
079b8                 | ' return 23
079b8     17 30 06 F6 | 	mov	local06, #23
079bc     BC 00 90 FD | 	jmp	#LR__0680
079c0                 | ' return 23
079c0                 | LR__0679
079c0     19 2B 02 F6 | 	mov	local03, local07
079c4     1A 27 02 F6 | 	mov	local01, local08
079c8     13 37 02 F6 | 	mov	local09, local01
079cc     14 39 02 F6 | 	mov	local10, local02
079d0     15 33 02 F6 | 	mov	local07, local03
079d4     4A 00 00 FF 
079d8     7C E4 05 F1 | 	add	objptr, ##38012
079dc     F2 26 02 FB | 	rdlong	local01, objptr
079e0     13 35 02 F6 | 	mov	local08, local01
079e4     01 34 66 F0 | 	shl	local08, #1
079e8     13 35 02 F1 | 	add	local08, local01
079ec     02 34 66 F0 | 	shl	local08, #2
079f0     03 00 00 FF 
079f4     00 E4 85 F1 | 	sub	objptr, ##1536
079f8     F2 34 02 F1 | 	add	local08, objptr
079fc     1A 37 62 FC | 	wrlong	local09, local08
07a00     03 00 00 FF 
07a04     00 E4 05 F1 | 	add	objptr, ##1536
07a08     F2 26 02 FB | 	rdlong	local01, objptr
07a0c     13 37 02 F6 | 	mov	local09, local01
07a10     01 36 66 F0 | 	shl	local09, #1
07a14     13 37 02 F1 | 	add	local09, local01
07a18     02 36 66 F0 | 	shl	local09, #2
07a1c     03 00 00 FF 
07a20     00 E4 85 F1 | 	sub	objptr, ##1536
07a24     F2 36 02 F1 | 	add	local09, objptr
07a28     04 36 06 F1 | 	add	local09, #4
07a2c     1B 39 62 FC | 	wrlong	local10, local09
07a30     03 00 00 FF 
07a34     00 E4 05 F1 | 	add	objptr, ##1536
07a38     F2 26 02 FB | 	rdlong	local01, objptr
07a3c     13 39 02 F6 | 	mov	local10, local01
07a40     01 38 66 F0 | 	shl	local10, #1
07a44     13 39 02 F1 | 	add	local10, local01
07a48     02 38 66 F0 | 	shl	local10, #2
07a4c     03 00 00 FF 
07a50     00 E4 85 F1 | 	sub	objptr, ##1536
07a54     F2 38 02 F1 | 	add	local10, objptr
07a58     08 38 06 F1 | 	add	local10, #8
07a5c     1C 33 62 FC | 	wrlong	local07, local10
07a60     03 00 00 FF 
07a64     00 E4 05 F1 | 	add	objptr, ##1536
07a68     F2 36 02 FB | 	rdlong	local09, objptr
07a6c     01 36 06 F1 | 	add	local09, #1
07a70     F2 36 62 FC | 	wrlong	local09, objptr
07a74     4A 00 00 FF 
07a78     7C E4 85 F1 | 	sub	objptr, ##38012
07a7c                 | LR__0680
07a7c                 | ' 
07a7c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07a7c                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07a7c     03 2C 0E F2 | 	cmp	local04, #3 wz
07a80     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07a84     38 00 90 5D |  if_ne	jmp	#LR__0681
07a88     4A 00 00 FF 
07a8c     7C E4 05 F1 | 	add	objptr, ##38012
07a90     F2 38 02 FB | 	rdlong	local10, objptr
07a94     1C 27 02 F6 | 	mov	local01, local10
07a98     01 26 66 F0 | 	shl	local01, #1
07a9c     1C 27 02 F1 | 	add	local01, local10
07aa0     02 26 66 F0 | 	shl	local01, #2
07aa4     03 00 00 FF 
07aa8     00 E4 85 F1 | 	sub	objptr, ##1536
07aac     F2 26 02 F1 | 	add	local01, objptr
07ab0     08 26 06 F1 | 	add	local01, #8
07ab4     13 FD 6B FC | 	wrlong	#510, local01
07ab8     47 00 00 FF 
07abc     7C E4 85 F1 | 	sub	objptr, ##36476
07ac0                 | LR__0681
07ac0                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07ac0                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ac0     4A 00 00 FF 
07ac4     7C E4 05 F1 | 	add	objptr, ##38012
07ac8     F2 26 02 FB | 	rdlong	local01, objptr
07acc     4A 00 00 FF 
07ad0     7C E4 85 F1 | 	sub	objptr, ##38012
07ad4     97 58 48 FB | 	callpa	#(@LR__0684-@LR__0682)>>2,fcache_load_ptr_
07ad8                 | LR__0682
07ad8     13 39 02 F6 | 	mov	local10, local01
07adc     01 38 66 F0 | 	shl	local10, #1
07ae0     13 39 02 F1 | 	add	local10, local01
07ae4     02 38 66 F0 | 	shl	local10, #2
07ae8     47 00 00 FF 
07aec     7C E4 05 F1 | 	add	objptr, ##36476
07af0     F2 38 02 F1 | 	add	local10, objptr
07af4     08 38 06 F1 | 	add	local10, #8
07af8     1C 39 02 FB | 	rdlong	local10, local10
07afc     9B 38 0E F2 | 	cmp	local10, #155 wz
07b00     47 00 00 FF 
07b04     7C E4 85 F1 | 	sub	objptr, ##36476
07b08     70 00 90 5D |  if_ne	jmp	#LR__0683
07b0c     13 37 02 F6 | 	mov	local09, local01
07b10     01 36 86 F1 | 	sub	local09, #1
07b14     1B 39 02 F6 | 	mov	local10, local09
07b18     01 38 66 F0 | 	shl	local10, #1
07b1c     1B 39 02 F1 | 	add	local10, local09
07b20     02 38 66 F0 | 	shl	local10, #2
07b24     47 00 00 FF 
07b28     7C E4 05 F1 | 	add	objptr, ##36476
07b2c     F2 38 02 F1 | 	add	local10, objptr
07b30     08 38 06 F1 | 	add	local10, #8
07b34     1C 39 02 FB | 	rdlong	local10, local10
07b38     11 38 0E F2 | 	cmp	local10, #17 wz
07b3c     47 00 00 FF 
07b40     7C E4 85 F1 | 	sub	objptr, ##36476
07b44     34 00 90 5D |  if_ne	jmp	#LR__0683
07b48     13 37 02 F6 | 	mov	local09, local01
07b4c     01 36 86 F1 | 	sub	local09, #1
07b50     1B 39 02 F6 | 	mov	local10, local09
07b54     01 38 66 F0 | 	shl	local10, #1
07b58     1B 39 02 F1 | 	add	local10, local09
07b5c     02 38 66 F0 | 	shl	local10, #2
07b60     47 00 00 FF 
07b64     7C E4 05 F1 | 	add	objptr, ##36476
07b68     F2 38 02 F1 | 	add	local10, objptr
07b6c     08 38 06 F1 | 	add	local10, #8
07b70     1C 25 68 FC | 	wrlong	#18, local10
07b74     47 00 00 FF 
07b78     7C E4 85 F1 | 	sub	objptr, ##36476
07b7c                 | LR__0683
07b7c     01 26 86 F1 | 	sub	local01, #1
07b80     01 26 56 F2 | 	cmps	local01, #1 wc
07b84     50 FF 9F 3D |  if_ae	jmp	#LR__0682
07b88                 | LR__0684
07b88                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07b88                 | ' return err
07b88     18 FB 01 F6 | 	mov	result1, local06
07b8c     A7 F0 03 F6 | 	mov	ptra, fp
07b90     B2 00 A0 FD | 	call	#popregs_
07b94                 | _compile_immediate_ret
07b94     2D 00 64 FD | 	ret
07b98                 | 
07b98                 | ' 
07b98                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07b98                 | ' 
07b98                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07b98                 | _compile_immediate_assign
07b98     0C 4A 05 F6 | 	mov	COUNT_, #12
07b9c     A8 00 A0 FD | 	call	#pushregs_
07ba0     09 2D 02 F6 | 	mov	local04, arg01
07ba4     FF 2A 06 F6 | 	mov	local03, #255
07ba8     01 2E 66 F6 | 	neg	local05, #1
07bac     00 30 06 F6 | 	mov	local06, #0
07bb0                 | ' 
07bb0                 | ' t1.result_type=result_error : t1.result.uresult=0
07bb0                 | ' i=-1: j=-1 : err=0
07bb0                 | ' 
07bb0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07bb0     02 2C 0E F2 | 	cmp	local04, #2 wz
07bb4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07bb8     35 00 00 AF 
07bbc     0C E4 05 A1 |  if_e	add	objptr, ##27148
07bc0     F2 32 02 AB |  if_e	rdlong	local07, objptr
07bc4     02 00 00 AF 
07bc8     38 E4 05 A1 |  if_e	add	objptr, ##1080
07bcc     F2 04 68 AC |  if_e	wrlong	#2, objptr
07bd0     37 00 00 AF 
07bd4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07bd8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07bd8     04 2C 0E F2 | 	cmp	local04, #4 wz
07bdc     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07be0     2C 00 90 5D |  if_ne	jmp	#LR__0690
07be4     35 00 00 FF 
07be8     14 E4 05 F1 | 	add	objptr, ##27156
07bec     F2 32 02 FB | 	rdlong	local07, objptr
07bf0     02 00 00 FF 
07bf4     30 E4 05 F1 | 	add	objptr, ##1072
07bf8     F2 06 68 FC | 	wrlong	#3, objptr
07bfc     13 00 00 FF 
07c00     38 E4 05 F1 | 	add	objptr, ##9784
07c04     F2 04 68 FC | 	wrlong	#2, objptr
07c08     4A 00 00 FF 
07c0c     7C E4 85 F1 | 	sub	objptr, ##38012
07c10                 | LR__0690
07c10                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07c10     05 2C 0E F2 | 	cmp	local04, #5 wz
07c14     3C 00 90 5D |  if_ne	jmp	#LR__0691
07c18     37 00 00 FF 
07c1c     44 E4 05 F1 | 	add	objptr, ##28228
07c20     F2 FA 01 FB | 	rdlong	result1, objptr
07c24     FD 32 02 F6 | 	mov	local07, result1
07c28     03 32 66 F0 | 	shl	local07, #3
07c2c     02 00 00 FF 
07c30     38 E4 85 F1 | 	sub	objptr, ##1080
07c34     F2 32 02 F1 | 	add	local07, objptr
07c38     19 33 02 FB | 	rdlong	local07, local07
07c3c     02 FA 05 F1 | 	add	result1, #2
07c40     02 00 00 FF 
07c44     38 E4 05 F1 | 	add	objptr, ##1080
07c48     F2 FA 61 FC | 	wrlong	result1, objptr
07c4c     37 00 00 FF 
07c50     44 E4 85 F1 | 	sub	objptr, ##28228
07c54                 | LR__0691
07c54     19 13 02 F6 | 	mov	arg01, local07
07c58     01 14 06 F6 | 	mov	arg02, #1
07c5c     B8 C0 B1 FD | 	call	#__system__Right_S
07c60     FD 34 02 F6 | 	mov	local08, result1
07c64     0C 24 B0 FD | 	call	#_expr
07c68                 | ' 
07c68                 | ' suffix2$=right$(varname2$,1)
07c68                 | ' expr()
07c68                 | ' if varnum>0 then					' try to find a variable
07c68     35 00 00 FF 
07c6c     08 E4 05 F1 | 	add	objptr, ##27144
07c70     F2 36 02 FB | 	rdlong	local09, objptr
07c74     35 00 00 FF 
07c78     08 E4 85 F1 | 	sub	objptr, ##27144
07c7c     01 36 56 F2 | 	cmps	local09, #1 wc
07c80     58 00 90 CD |  if_b	jmp	#LR__0694
07c84                 | '   for i=0 to varnum-1
07c84     00 38 06 F6 | 	mov	local10, #0
07c88     35 00 00 FF 
07c8c     08 E4 05 F1 | 	add	objptr, ##27144
07c90     F2 3A 02 FB | 	rdlong	local11, objptr
07c94     35 00 00 FF 
07c98     08 E4 85 F1 | 	sub	objptr, ##27144
07c9c                 | LR__0692
07c9c     1D 39 52 F2 | 	cmps	local10, local11 wc
07ca0     38 00 90 3D |  if_ae	jmp	#LR__0693
07ca4                 | '     if variables(i).name=varname2$ then j=i : exit
07ca4     1C 37 02 F6 | 	mov	local09, local10
07ca8     04 36 66 F0 | 	shl	local09, #4
07cac     14 00 00 FF 
07cb0     F8 E5 05 F1 | 	add	objptr, ##10744
07cb4     F2 36 02 F1 | 	add	local09, objptr
07cb8     1B 13 02 FB | 	rdlong	arg01, local09
07cbc     19 15 02 F6 | 	mov	arg02, local07
07cc0     14 00 00 FF 
07cc4     F8 E5 85 F1 | 	sub	objptr, ##10744
07cc8     70 9F B1 FD | 	call	#__system___string_cmp
07ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd0     1C 2F 02 A6 |  if_e	mov	local05, local10
07cd4     01 38 06 51 |  if_ne	add	local10, #1
07cd8     C0 FF 9F 5D |  if_ne	jmp	#LR__0692
07cdc                 | LR__0693
07cdc                 | LR__0694
07cdc                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07cdc     FF FF 7F FF 
07ce0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07ce4     60 00 90 5D |  if_ne	jmp	#LR__0695
07ce8     35 00 00 FF 
07cec     08 E4 05 F1 | 	add	objptr, ##27144
07cf0     F2 36 02 FB | 	rdlong	local09, objptr
07cf4     35 00 00 FF 
07cf8     08 E4 85 F1 | 	sub	objptr, ##27144
07cfc     02 00 00 FF 
07d00     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d04     40 00 90 3D |  if_ae	jmp	#LR__0695
07d08     35 00 00 FF 
07d0c     08 E4 05 F1 | 	add	objptr, ##27144
07d10     F2 3A 02 FB | 	rdlong	local11, objptr
07d14     04 3A 66 F0 | 	shl	local11, #4
07d18     20 00 00 FF 
07d1c     10 E4 85 F1 | 	sub	objptr, ##16400
07d20     F2 3A 02 F1 | 	add	local11, objptr
07d24     1D 33 62 FC | 	wrlong	local07, local11
07d28     20 00 00 FF 
07d2c     10 E4 05 F1 | 	add	objptr, ##16400
07d30     F2 36 02 FB | 	rdlong	local09, objptr
07d34     1B 2F 02 F6 | 	mov	local05, local09
07d38     01 36 06 F1 | 	add	local09, #1
07d3c     F2 36 62 FC | 	wrlong	local09, objptr
07d40     35 00 00 FF 
07d44     08 E4 85 F1 | 	sub	objptr, ##27144
07d48                 | LR__0695
07d48                 | ' if varnum>=maxvars then
07d48     35 00 00 FF 
07d4c     08 E4 05 F1 | 	add	objptr, ##27144
07d50     F2 36 02 FB | 	rdlong	local09, objptr
07d54     35 00 00 FF 
07d58     08 E4 85 F1 | 	sub	objptr, ##27144
07d5c     02 00 00 FF 
07d60     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d64     2D 30 06 36 |  if_ae	mov	local06, #45
07d68     C8 01 90 3D |  if_ae	jmp	#LR__0700
07d6c     17 27 02 F6 | 	mov	local01, local05
07d70     17 2A 06 F6 | 	mov	local03, #23
07d74     13 37 02 F6 | 	mov	local09, local01
07d78     14 3D 02 F6 | 	mov	local12, local02
07d7c     15 27 02 F6 | 	mov	local01, local03
07d80     4A 00 00 FF 
07d84     7C E4 05 F1 | 	add	objptr, ##38012
07d88     F2 3A 02 FB | 	rdlong	local11, objptr
07d8c     1D 39 02 F6 | 	mov	local10, local11
07d90     01 38 66 F0 | 	shl	local10, #1
07d94     1D 39 02 F1 | 	add	local10, local11
07d98     02 38 66 F0 | 	shl	local10, #2
07d9c     03 00 00 FF 
07da0     00 E4 85 F1 | 	sub	objptr, ##1536
07da4     F2 38 02 F1 | 	add	local10, objptr
07da8     1C 37 62 FC | 	wrlong	local09, local10
07dac     03 00 00 FF 
07db0     00 E4 05 F1 | 	add	objptr, ##1536
07db4     F2 36 02 FB | 	rdlong	local09, objptr
07db8     1B 3B 02 F6 | 	mov	local11, local09
07dbc     01 3A 66 F0 | 	shl	local11, #1
07dc0     1B 3B 02 F1 | 	add	local11, local09
07dc4     02 3A 66 F0 | 	shl	local11, #2
07dc8     03 00 00 FF 
07dcc     00 E4 85 F1 | 	sub	objptr, ##1536
07dd0     F2 3A 02 F1 | 	add	local11, objptr
07dd4     04 3A 06 F1 | 	add	local11, #4
07dd8     1D 3D 62 FC | 	wrlong	local12, local11
07ddc     03 00 00 FF 
07de0     00 E4 05 F1 | 	add	objptr, ##1536
07de4     F2 36 02 FB | 	rdlong	local09, objptr
07de8     1B 3D 02 F6 | 	mov	local12, local09
07dec     01 3C 66 F0 | 	shl	local12, #1
07df0     1B 3D 02 F1 | 	add	local12, local09
07df4     02 3C 66 F0 | 	shl	local12, #2
07df8     03 00 00 FF 
07dfc     00 E4 85 F1 | 	sub	objptr, ##1536
07e00     F2 3C 02 F1 | 	add	local12, objptr
07e04     08 3C 06 F1 | 	add	local12, #8
07e08     1E 27 62 FC | 	wrlong	local01, local12
07e0c     03 00 00 FF 
07e10     00 E4 05 F1 | 	add	objptr, ##1536
07e14     F2 36 02 FB | 	rdlong	local09, objptr
07e18     01 36 06 F1 | 	add	local09, #1
07e1c     F2 36 62 FC | 	wrlong	local09, objptr
07e20     4A 00 00 FF 
07e24     7C E4 85 F1 | 	sub	objptr, ##38012
07e28                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07e28                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07e28                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07e28     03 2C 0E F2 | 	cmp	local04, #3 wz
07e2c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07e30     38 00 90 5D |  if_ne	jmp	#LR__0696
07e34     4A 00 00 FF 
07e38     7C E4 05 F1 | 	add	objptr, ##38012
07e3c     F2 3C 02 FB | 	rdlong	local12, objptr
07e40     1E 27 02 F6 | 	mov	local01, local12
07e44     01 26 66 F0 | 	shl	local01, #1
07e48     1E 27 02 F1 | 	add	local01, local12
07e4c     02 26 66 F0 | 	shl	local01, #2
07e50     03 00 00 FF 
07e54     00 E4 85 F1 | 	sub	objptr, ##1536
07e58     F2 26 02 F1 | 	add	local01, objptr
07e5c     08 26 06 F1 | 	add	local01, #8
07e60     13 FD 6B FC | 	wrlong	#510, local01
07e64     47 00 00 FF 
07e68     7C E4 85 F1 | 	sub	objptr, ##36476
07e6c                 | LR__0696
07e6c                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07e6c     4A 00 00 FF 
07e70     7C E4 05 F1 | 	add	objptr, ##38012
07e74     F2 38 02 FB | 	rdlong	local10, objptr
07e78     4A 00 00 FF 
07e7c     7C E4 85 F1 | 	sub	objptr, ##38012
07e80     97 58 48 FB | 	callpa	#(@LR__0699-@LR__0697)>>2,fcache_load_ptr_
07e84                 | LR__0697
07e84     1C 3D 02 F6 | 	mov	local12, local10
07e88     01 3C 66 F0 | 	shl	local12, #1
07e8c     1C 3D 02 F1 | 	add	local12, local10
07e90     02 3C 66 F0 | 	shl	local12, #2
07e94     47 00 00 FF 
07e98     7C E4 05 F1 | 	add	objptr, ##36476
07e9c     F2 3C 02 F1 | 	add	local12, objptr
07ea0     08 3C 06 F1 | 	add	local12, #8
07ea4     1E 3D 02 FB | 	rdlong	local12, local12
07ea8     9B 3C 0E F2 | 	cmp	local12, #155 wz
07eac     47 00 00 FF 
07eb0     7C E4 85 F1 | 	sub	objptr, ##36476
07eb4     70 00 90 5D |  if_ne	jmp	#LR__0698
07eb8     1C 3D 02 F6 | 	mov	local12, local10
07ebc     01 3C 86 F1 | 	sub	local12, #1
07ec0     1E 27 02 F6 | 	mov	local01, local12
07ec4     01 26 66 F0 | 	shl	local01, #1
07ec8     1E 27 02 F1 | 	add	local01, local12
07ecc     02 26 66 F0 | 	shl	local01, #2
07ed0     47 00 00 FF 
07ed4     7C E4 05 F1 | 	add	objptr, ##36476
07ed8     F2 26 02 F1 | 	add	local01, objptr
07edc     08 26 06 F1 | 	add	local01, #8
07ee0     13 27 02 FB | 	rdlong	local01, local01
07ee4     11 26 0E F2 | 	cmp	local01, #17 wz
07ee8     47 00 00 FF 
07eec     7C E4 85 F1 | 	sub	objptr, ##36476
07ef0     34 00 90 5D |  if_ne	jmp	#LR__0698
07ef4     1C 3D 02 F6 | 	mov	local12, local10
07ef8     01 3C 86 F1 | 	sub	local12, #1
07efc     1E 27 02 F6 | 	mov	local01, local12
07f00     01 26 66 F0 | 	shl	local01, #1
07f04     1E 27 02 F1 | 	add	local01, local12
07f08     02 26 66 F0 | 	shl	local01, #2
07f0c     47 00 00 FF 
07f10     7C E4 05 F1 | 	add	objptr, ##36476
07f14     F2 26 02 F1 | 	add	local01, objptr
07f18     08 26 06 F1 | 	add	local01, #8
07f1c     13 25 68 FC | 	wrlong	#18, local01
07f20     47 00 00 FF 
07f24     7C E4 85 F1 | 	sub	objptr, ##36476
07f28                 | LR__0698
07f28     01 38 86 F1 | 	sub	local10, #1
07f2c     01 38 56 F2 | 	cmps	local10, #1 wc
07f30     50 FF 9F 3D |  if_ae	jmp	#LR__0697
07f34                 | LR__0699
07f34                 | LR__0700
07f34                 | ' return err
07f34     18 FB 01 F6 | 	mov	result1, local06
07f38     A7 F0 03 F6 | 	mov	ptra, fp
07f3c     B2 00 A0 FD | 	call	#popregs_
07f40                 | _compile_immediate_assign_ret
07f40     2D 00 64 FD | 	ret
07f44                 | 
07f44                 | ' 
07f44                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07f44                 | ' 
07f44                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07f44                 | _compile
07f44     03 4A 05 F6 | 	mov	COUNT_, #3
07f48     A8 00 A0 FD | 	call	#pushregs_
07f4c     09 27 02 F6 | 	mov	local01, arg01
07f50     0B 29 02 F6 | 	mov	local02, arg03
07f54     47 00 00 FF 
07f58     7C E4 05 F1 | 	add	objptr, ##36476
07f5c     F2 26 62 FC | 	wrlong	local01, objptr
07f60     04 E4 05 F1 | 	add	objptr, #4
07f64     F2 14 62 FC | 	wrlong	arg02, objptr
07f68     47 00 00 FF 
07f6c     80 E4 85 F1 | 	sub	objptr, ##36480
07f70     14 13 02 F6 | 	mov	arg01, local02
07f74     01 12 06 F1 | 	add	arg01, #1
07f78     13 15 02 F6 | 	mov	arg02, local01
07f7c     BC F2 BF FD | 	call	#_compile_immediate
07f80     FD 2A 0A F6 | 	mov	local03, result1 wz
07f84                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07f84                 | ' ucompiledline(0)=alinemajor
07f84                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07f84                 | ' 
07f84                 | ' ' cont: 
07f84                 | ' ' 0 - this is the first part of the line that will continue
07f84                 | ' ' 1 - this is the continuation of the line
07f84                 | ' ' 2 - this is the last continued line
07f84                 | ' ' 3 - this is the one and only part
07f84                 | ' 
07f84                 | ' err=compile_immediate(cont+1,alinemajor) 
07f84                 | ' if err=0 andalso alinemajor>0 then
07f84     74 00 90 5D |  if_ne	jmp	#LR__0715
07f88     01 26 16 F2 | 	cmp	local01, #1 wc
07f8c     6C 00 90 CD |  if_b	jmp	#LR__0715
07f90                 | '   if cont=3 orelse cont=2 then 
07f90     03 28 0E F2 | 	cmp	local02, #3 wz
07f94     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
07f98     60 00 90 5D |  if_ne	jmp	#LR__0714
07f9c                 | '     if alinemajor >lastline then 
07f9c     4A 00 00 FF 
07fa0     8C E4 05 F1 | 	add	objptr, ##38028
07fa4     F2 14 02 FB | 	rdlong	arg02, objptr
07fa8     4A 00 00 FF 
07fac     8C E4 85 F1 | 	sub	objptr, ##38028
07fb0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
07fb4     0C 00 90 ED |  if_be	jmp	#LR__0710
07fb8     13 13 02 F6 | 	mov	arg01, local01
07fbc     B4 F1 BF FD | 	call	#_add_line_at_end
07fc0     38 00 90 FD | 	jmp	#LR__0713
07fc4                 | LR__0710
07fc4     13 13 02 F6 | 	mov	arg01, local01
07fc8     78 EB BF FD | 	call	#_deleteline
07fcc                 | '       deleteline(alinemajor)  
07fcc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07fcc     4A 00 00 FF 
07fd0     8C E4 05 F1 | 	add	objptr, ##38028
07fd4     F2 14 02 FB | 	rdlong	arg02, objptr
07fd8     4A 00 00 FF 
07fdc     8C E4 85 F1 | 	sub	objptr, ##38028
07fe0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
07fe4     0C 00 90 ED |  if_be	jmp	#LR__0711
07fe8     13 13 02 F6 | 	mov	arg01, local01
07fec     84 F1 BF FD | 	call	#_add_line_at_end
07ff0     08 00 90 FD | 	jmp	#LR__0712
07ff4                 | LR__0711
07ff4     13 13 02 F6 | 	mov	arg01, local01
07ff8     5C EF BF FD | 	call	#_insertline
07ffc                 | LR__0712
07ffc                 | LR__0713
07ffc                 | LR__0714
07ffc                 | LR__0715
07ffc                 | ' return err
07ffc     15 FB 01 F6 | 	mov	result1, local03
08000     A7 F0 03 F6 | 	mov	ptra, fp
08004     B2 00 A0 FD | 	call	#popregs_
08008                 | _compile_ret
08008     2D 00 64 FD | 	ret
0800c                 | 
0800c                 | ' 
0800c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0800c                 | ' 
0800c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0800c                 | _compile_assign
0800c     03 4A 05 F6 | 	mov	COUNT_, #3
08010     A8 00 A0 FD | 	call	#pushregs_
08014     09 27 02 F6 | 	mov	local01, arg01
08018     0B 29 02 F6 | 	mov	local02, arg03
0801c     47 00 00 FF 
08020     7C E4 05 F1 | 	add	objptr, ##36476
08024     F2 26 62 FC | 	wrlong	local01, objptr
08028     04 E4 05 F1 | 	add	objptr, #4
0802c     F2 14 62 FC | 	wrlong	arg02, objptr
08030     47 00 00 FF 
08034     80 E4 85 F1 | 	sub	objptr, ##36480
08038     14 13 02 F6 | 	mov	arg01, local02
0803c     01 12 06 F1 | 	add	arg01, #1
08040     54 FB BF FD | 	call	#_compile_immediate_assign
08044     FD 2A 02 F6 | 	mov	local03, result1
08048                 | ' 
08048                 | ' ucompiledline(0)=alinemajor
08048                 | ' ucompiledline(1)=alineminor
08048                 | ' 
08048                 | ' err=compile_immediate_assign(cont+1) 
08048                 | ' if alinemajor>0 then
08048     01 26 16 F2 | 	cmp	local01, #1 wc
0804c     6C 00 90 CD |  if_b	jmp	#LR__0725
08050                 | '   if cont=3 orelse cont=2 then 
08050     03 28 0E F2 | 	cmp	local02, #3 wz
08054     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08058     60 00 90 5D |  if_ne	jmp	#LR__0724
0805c                 | '     if alinemajor >lastline then 
0805c     4A 00 00 FF 
08060     8C E4 05 F1 | 	add	objptr, ##38028
08064     F2 14 02 FB | 	rdlong	arg02, objptr
08068     4A 00 00 FF 
0806c     8C E4 85 F1 | 	sub	objptr, ##38028
08070     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08074     0C 00 90 ED |  if_be	jmp	#LR__0720
08078     13 13 02 F6 | 	mov	arg01, local01
0807c     F4 F0 BF FD | 	call	#_add_line_at_end
08080     38 00 90 FD | 	jmp	#LR__0723
08084                 | LR__0720
08084     13 13 02 F6 | 	mov	arg01, local01
08088     B8 EA BF FD | 	call	#_deleteline
0808c                 | '       deleteline(alinemajor)  
0808c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0808c     4A 00 00 FF 
08090     8C E4 05 F1 | 	add	objptr, ##38028
08094     F2 14 02 FB | 	rdlong	arg02, objptr
08098     4A 00 00 FF 
0809c     8C E4 85 F1 | 	sub	objptr, ##38028
080a0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080a4     0C 00 90 ED |  if_be	jmp	#LR__0721
080a8     13 13 02 F6 | 	mov	arg01, local01
080ac     C4 F0 BF FD | 	call	#_add_line_at_end
080b0     08 00 90 FD | 	jmp	#LR__0722
080b4                 | LR__0721
080b4     13 13 02 F6 | 	mov	arg01, local01
080b8     9C EE BF FD | 	call	#_insertline
080bc                 | LR__0722
080bc                 | LR__0723
080bc                 | LR__0724
080bc                 | LR__0725
080bc                 | ' return err
080bc     15 FB 01 F6 | 	mov	result1, local03
080c0     A7 F0 03 F6 | 	mov	ptra, fp
080c4     B2 00 A0 FD | 	call	#popregs_
080c8                 | _compile_assign_ret
080c8     2D 00 64 FD | 	ret
080cc                 | 
080cc                 | ' 
080cc                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
080cc                 | ' 
080cc                 | ' function compile_fun_2p() as ulong
080cc                 | _compile_fun_2p
080cc     01 4A 05 F6 | 	mov	COUNT_, #1
080d0     A8 00 A0 FD | 	call	#pushregs_
080d4     9C 1F B0 FD | 	call	#_expr
080d8     FD 26 02 F6 | 	mov	local01, result1
080dc                 | ' err=expr() : if err>0 then return err
080dc     01 26 16 F2 | 	cmp	local01, #1 wc
080e0     13 FB 01 36 |  if_ae	mov	result1, local01
080e4     60 00 90 3D |  if_ae	jmp	#LR__0730
080e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
080e8     37 00 00 FF 
080ec     44 E4 05 F1 | 	add	objptr, ##28228
080f0     F2 26 02 FB | 	rdlong	local01, objptr
080f4     03 26 66 F0 | 	shl	local01, #3
080f8     02 00 00 FF 
080fc     38 E4 85 F1 | 	sub	objptr, ##1080
08100     F2 26 02 F1 | 	add	local01, objptr
08104     04 26 06 F1 | 	add	local01, #4
08108     13 27 02 FB | 	rdlong	local01, local01
0810c     11 26 0E F2 | 	cmp	local01, #17 wz
08110     35 00 00 FF 
08114     0C E4 85 F1 | 	sub	objptr, ##27148
08118     15 FA 05 56 |  if_ne	mov	result1, #21
0811c     28 00 90 5D |  if_ne	jmp	#LR__0730
08120     37 00 00 FF 
08124     44 E4 05 F1 | 	add	objptr, ##28228
08128     F2 26 02 FB | 	rdlong	local01, objptr
0812c     01 26 06 F1 | 	add	local01, #1
08130     F2 26 62 FC | 	wrlong	local01, objptr
08134     37 00 00 FF 
08138     44 E4 85 F1 | 	sub	objptr, ##28228
0813c     34 1F B0 FD | 	call	#_expr
08140                 | ' err=expr() : if err>0 then return err
08140     01 FA 15 F2 | 	cmp	result1, #1 wc
08144                 | ' return 0
08144     00 FA 05 C6 |  if_b	mov	result1, #0
08148                 | LR__0730
08148     A7 F0 03 F6 | 	mov	ptra, fp
0814c     B2 00 A0 FD | 	call	#popregs_
08150                 | _compile_fun_2p_ret
08150     2D 00 64 FD | 	ret
08154                 | 
08154                 | ' 
08154                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08154                 | ' 
08154                 | ' function compile_fun_3p() as ulong
08154                 | _compile_fun_3p
08154     01 4A 05 F6 | 	mov	COUNT_, #1
08158     A8 00 A0 FD | 	call	#pushregs_
0815c     14 1F B0 FD | 	call	#_expr
08160     FD 26 02 F6 | 	mov	local01, result1
08164                 | ' err=expr() : if err>0 then return err
08164     01 26 16 F2 | 	cmp	local01, #1 wc
08168     13 FB 01 36 |  if_ae	mov	result1, local01
0816c     C8 00 90 3D |  if_ae	jmp	#LR__0740
08170                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08170     37 00 00 FF 
08174     44 E4 05 F1 | 	add	objptr, ##28228
08178     F2 26 02 FB | 	rdlong	local01, objptr
0817c     03 26 66 F0 | 	shl	local01, #3
08180     02 00 00 FF 
08184     38 E4 85 F1 | 	sub	objptr, ##1080
08188     F2 26 02 F1 | 	add	local01, objptr
0818c     04 26 06 F1 | 	add	local01, #4
08190     13 27 02 FB | 	rdlong	local01, local01
08194     11 26 0E F2 | 	cmp	local01, #17 wz
08198     35 00 00 FF 
0819c     0C E4 85 F1 | 	sub	objptr, ##27148
081a0     15 FA 05 56 |  if_ne	mov	result1, #21
081a4     90 00 90 5D |  if_ne	jmp	#LR__0740
081a8     37 00 00 FF 
081ac     44 E4 05 F1 | 	add	objptr, ##28228
081b0     F2 26 02 FB | 	rdlong	local01, objptr
081b4     01 26 06 F1 | 	add	local01, #1
081b8     F2 26 62 FC | 	wrlong	local01, objptr
081bc     37 00 00 FF 
081c0     44 E4 85 F1 | 	sub	objptr, ##28228
081c4     AC 1E B0 FD | 	call	#_expr
081c8     FD 26 02 F6 | 	mov	local01, result1
081cc                 | ' err=expr() : if err>0 then return err
081cc     01 26 16 F2 | 	cmp	local01, #1 wc
081d0     13 FB 01 36 |  if_ae	mov	result1, local01
081d4     60 00 90 3D |  if_ae	jmp	#LR__0740
081d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081d8     37 00 00 FF 
081dc     44 E4 05 F1 | 	add	objptr, ##28228
081e0     F2 26 02 FB | 	rdlong	local01, objptr
081e4     03 26 66 F0 | 	shl	local01, #3
081e8     02 00 00 FF 
081ec     38 E4 85 F1 | 	sub	objptr, ##1080
081f0     F2 26 02 F1 | 	add	local01, objptr
081f4     04 26 06 F1 | 	add	local01, #4
081f8     13 27 02 FB | 	rdlong	local01, local01
081fc     11 26 0E F2 | 	cmp	local01, #17 wz
08200     35 00 00 FF 
08204     0C E4 85 F1 | 	sub	objptr, ##27148
08208     15 FA 05 56 |  if_ne	mov	result1, #21
0820c     28 00 90 5D |  if_ne	jmp	#LR__0740
08210     37 00 00 FF 
08214     44 E4 05 F1 | 	add	objptr, ##28228
08218     F2 26 02 FB | 	rdlong	local01, objptr
0821c     01 26 06 F1 | 	add	local01, #1
08220     F2 26 62 FC | 	wrlong	local01, objptr
08224     37 00 00 FF 
08228     44 E4 85 F1 | 	sub	objptr, ##28228
0822c     44 1E B0 FD | 	call	#_expr
08230                 | ' err=expr() : if err>0 then return err
08230     01 FA 15 F2 | 	cmp	result1, #1 wc
08234                 | ' return 0
08234     00 FA 05 C6 |  if_b	mov	result1, #0
08238                 | LR__0740
08238     A7 F0 03 F6 | 	mov	ptra, fp
0823c     B2 00 A0 FD | 	call	#popregs_
08240                 | _compile_fun_3p_ret
08240     2D 00 64 FD | 	ret
08244                 | 
08244                 | ' 
08244                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08244                 | ' 
08244                 | ' function compile_fun_4p() as ulong
08244                 | _compile_fun_4p
08244     01 4A 05 F6 | 	mov	COUNT_, #1
08248     A8 00 A0 FD | 	call	#pushregs_
0824c     24 1E B0 FD | 	call	#_expr
08250     FD 26 02 F6 | 	mov	local01, result1
08254                 | ' err=expr() : if err>0 then return err
08254     01 26 16 F2 | 	cmp	local01, #1 wc
08258     13 FB 01 36 |  if_ae	mov	result1, local01
0825c     30 01 90 3D |  if_ae	jmp	#LR__0750
08260                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08260     37 00 00 FF 
08264     44 E4 05 F1 | 	add	objptr, ##28228
08268     F2 26 02 FB | 	rdlong	local01, objptr
0826c     03 26 66 F0 | 	shl	local01, #3
08270     02 00 00 FF 
08274     38 E4 85 F1 | 	sub	objptr, ##1080
08278     F2 26 02 F1 | 	add	local01, objptr
0827c     04 26 06 F1 | 	add	local01, #4
08280     13 27 02 FB | 	rdlong	local01, local01
08284     11 26 0E F2 | 	cmp	local01, #17 wz
08288     35 00 00 FF 
0828c     0C E4 85 F1 | 	sub	objptr, ##27148
08290     15 FA 05 56 |  if_ne	mov	result1, #21
08294     F8 00 90 5D |  if_ne	jmp	#LR__0750
08298     37 00 00 FF 
0829c     44 E4 05 F1 | 	add	objptr, ##28228
082a0     F2 26 02 FB | 	rdlong	local01, objptr
082a4     01 26 06 F1 | 	add	local01, #1
082a8     F2 26 62 FC | 	wrlong	local01, objptr
082ac     37 00 00 FF 
082b0     44 E4 85 F1 | 	sub	objptr, ##28228
082b4     BC 1D B0 FD | 	call	#_expr
082b8     FD 26 02 F6 | 	mov	local01, result1
082bc                 | ' err=expr() : if err>0 then return err
082bc     01 26 16 F2 | 	cmp	local01, #1 wc
082c0     13 FB 01 36 |  if_ae	mov	result1, local01
082c4     C8 00 90 3D |  if_ae	jmp	#LR__0750
082c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
082c8     37 00 00 FF 
082cc     44 E4 05 F1 | 	add	objptr, ##28228
082d0     F2 26 02 FB | 	rdlong	local01, objptr
082d4     03 26 66 F0 | 	shl	local01, #3
082d8     02 00 00 FF 
082dc     38 E4 85 F1 | 	sub	objptr, ##1080
082e0     F2 26 02 F1 | 	add	local01, objptr
082e4     04 26 06 F1 | 	add	local01, #4
082e8     13 27 02 FB | 	rdlong	local01, local01
082ec     11 26 0E F2 | 	cmp	local01, #17 wz
082f0     35 00 00 FF 
082f4     0C E4 85 F1 | 	sub	objptr, ##27148
082f8     15 FA 05 56 |  if_ne	mov	result1, #21
082fc     90 00 90 5D |  if_ne	jmp	#LR__0750
08300     37 00 00 FF 
08304     44 E4 05 F1 | 	add	objptr, ##28228
08308     F2 26 02 FB | 	rdlong	local01, objptr
0830c     01 26 06 F1 | 	add	local01, #1
08310     F2 26 62 FC | 	wrlong	local01, objptr
08314     37 00 00 FF 
08318     44 E4 85 F1 | 	sub	objptr, ##28228
0831c     54 1D B0 FD | 	call	#_expr
08320     FD 26 02 F6 | 	mov	local01, result1
08324                 | ' err=expr() : if err>0 then return err
08324     01 26 16 F2 | 	cmp	local01, #1 wc
08328     13 FB 01 36 |  if_ae	mov	result1, local01
0832c     60 00 90 3D |  if_ae	jmp	#LR__0750
08330                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08330     37 00 00 FF 
08334     44 E4 05 F1 | 	add	objptr, ##28228
08338     F2 26 02 FB | 	rdlong	local01, objptr
0833c     03 26 66 F0 | 	shl	local01, #3
08340     02 00 00 FF 
08344     38 E4 85 F1 | 	sub	objptr, ##1080
08348     F2 26 02 F1 | 	add	local01, objptr
0834c     04 26 06 F1 | 	add	local01, #4
08350     13 27 02 FB | 	rdlong	local01, local01
08354     11 26 0E F2 | 	cmp	local01, #17 wz
08358     35 00 00 FF 
0835c     0C E4 85 F1 | 	sub	objptr, ##27148
08360     15 FA 05 56 |  if_ne	mov	result1, #21
08364     28 00 90 5D |  if_ne	jmp	#LR__0750
08368     37 00 00 FF 
0836c     44 E4 05 F1 | 	add	objptr, ##28228
08370     F2 26 02 FB | 	rdlong	local01, objptr
08374     01 26 06 F1 | 	add	local01, #1
08378     F2 26 62 FC | 	wrlong	local01, objptr
0837c     37 00 00 FF 
08380     44 E4 85 F1 | 	sub	objptr, ##28228
08384     EC 1C B0 FD | 	call	#_expr
08388                 | ' err=expr() : if err>0 then return err
08388     01 FA 15 F2 | 	cmp	result1, #1 wc
0838c                 | ' return 0
0838c     00 FA 05 C6 |  if_b	mov	result1, #0
08390                 | LR__0750
08390     A7 F0 03 F6 | 	mov	ptra, fp
08394     B2 00 A0 FD | 	call	#popregs_
08398                 | _compile_fun_4p_ret
08398     2D 00 64 FD | 	ret
0839c                 | 
0839c                 | ' 
0839c                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
0839c                 | ' 
0839c                 | ' function compile_fun_varp() as ulong,ulong 
0839c                 | _compile_fun_varp
0839c     03 4A 05 F6 | 	mov	COUNT_, #3
083a0     A8 00 A0 FD | 	call	#pushregs_
083a4     00 26 06 F6 | 	mov	local01, #0
083a8                 | ' 
083a8                 | ' i=0 : err=0
083a8                 | ' if lparts(ct).token<>token_end then
083a8     37 00 00 FF 
083ac     44 E4 05 F1 | 	add	objptr, ##28228
083b0     F2 28 02 FB | 	rdlong	local02, objptr
083b4     03 28 66 F0 | 	shl	local02, #3
083b8     02 00 00 FF 
083bc     38 E4 85 F1 | 	sub	objptr, ##1080
083c0     F2 28 02 F1 | 	add	local02, objptr
083c4     04 28 06 F1 | 	add	local02, #4
083c8     14 29 02 FB | 	rdlong	local02, local02
083cc     FE 29 0E F2 | 	cmp	local02, #510 wz
083d0     35 00 00 FF 
083d4     0C E4 85 F1 | 	sub	objptr, ##27148
083d8     88 00 90 AD |  if_e	jmp	#LR__0761
083dc                 | '   do
083dc                 | LR__0760
083dc     94 1C B0 FD | 	call	#_expr
083e0     01 26 06 F1 | 	add	local01, #1
083e4                 | '     expr()
083e4                 | '     i+=1
083e4                 | '     if lparts(ct).token=token_comma then ct+=1
083e4     37 00 00 FF 
083e8     44 E4 05 F1 | 	add	objptr, ##28228
083ec     F2 28 02 FB | 	rdlong	local02, objptr
083f0     03 28 66 F0 | 	shl	local02, #3
083f4     02 00 00 FF 
083f8     38 E4 85 F1 | 	sub	objptr, ##1080
083fc     F2 28 02 F1 | 	add	local02, objptr
08400     04 28 06 F1 | 	add	local02, #4
08404     14 29 02 FB | 	rdlong	local02, local02
08408     11 28 0E F2 | 	cmp	local02, #17 wz
0840c     35 00 00 FF 
08410     0C E4 85 F1 | 	sub	objptr, ##27148
08414     37 00 00 AF 
08418     44 E4 05 A1 |  if_e	add	objptr, ##28228
0841c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08420     01 2A 06 A1 |  if_e	add	local03, #1
08424     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08428     37 00 00 AF 
0842c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08430                 | '     if lparts(ct).token=token_end then exit loop
08430     37 00 00 FF 
08434     44 E4 05 F1 | 	add	objptr, ##28228
08438     F2 28 02 FB | 	rdlong	local02, objptr
0843c     03 28 66 F0 | 	shl	local02, #3
08440     02 00 00 FF 
08444     38 E4 85 F1 | 	sub	objptr, ##1080
08448     F2 28 02 F1 | 	add	local02, objptr
0844c     04 28 06 F1 | 	add	local02, #4
08450     14 29 02 FB | 	rdlong	local02, local02
08454     FE 29 0E F2 | 	cmp	local02, #510 wz
08458     35 00 00 FF 
0845c     0C E4 85 F1 | 	sub	objptr, ##27148
08460     78 FF 9F 5D |  if_ne	jmp	#LR__0760
08464                 | LR__0761
08464                 | ' return i,err
08464     13 FB 01 F6 | 	mov	result1, local01
08468     00 FC 05 F6 | 	mov	result2, #0
0846c     A7 F0 03 F6 | 	mov	ptra, fp
08470     B2 00 A0 FD | 	call	#popregs_
08474                 | _compile_fun_varp_ret
08474     2D 00 64 FD | 	ret
08478                 | 
08478                 | ' 
08478                 | ' '----- compile assign to an array element
08478                 | ' 
08478                 | ' function compile_array_assign() as ulong 
08478                 | _compile_array_assign
08478     0B 4A 05 F6 | 	mov	COUNT_, #11
0847c     A8 00 A0 FD | 	call	#pushregs_
08480     00 2C 06 F6 | 	mov	local04, #0
08484     00 2E 06 F6 | 	mov	local05, #0
08488     37 00 00 FF 
0848c     44 E4 05 F1 | 	add	objptr, ##28228
08490     F2 30 02 FB | 	rdlong	local06, objptr
08494     18 FB 01 F6 | 	mov	result1, local06
08498     01 FA 85 F1 | 	sub	result1, #1
0849c     03 FA 65 F0 | 	shl	result1, #3
084a0     02 00 00 FF 
084a4     38 E4 85 F1 | 	sub	objptr, ##1080
084a8     F2 FA 01 F1 | 	add	result1, objptr
084ac     FD 32 02 FB | 	rdlong	local07, result1
084b0                 | ' numpar=0 : err=0
084b0                 | ' varname$=lparts(ct-1).part$
084b0                 | ' if lparts(ct).token=token_lpar then
084b0     03 30 66 F0 | 	shl	local06, #3
084b4     F2 30 02 F1 | 	add	local06, objptr
084b8     04 30 06 F1 | 	add	local06, #4
084bc     18 31 02 FB | 	rdlong	local06, local06
084c0     15 30 0E F2 | 	cmp	local06, #21 wz
084c4     35 00 00 FF 
084c8     0C E4 85 F1 | 	sub	objptr, ##27148
084cc     F4 01 90 5D |  if_ne	jmp	#LR__0774
084d0     37 00 00 FF 
084d4     44 E4 05 F1 | 	add	objptr, ##28228
084d8     F2 34 02 FB | 	rdlong	local08, objptr
084dc     01 34 06 F1 | 	add	local08, #1
084e0     F2 34 62 FC | 	wrlong	local08, objptr
084e4     37 00 00 FF 
084e8     44 E4 85 F1 | 	sub	objptr, ##28228
084ec                 | '   ct+=1 											' omit this lpar, this is for expr list
084ec                 | '   do
084ec                 | LR__0770
084ec     84 1B B0 FD | 	call	#_expr
084f0     37 00 00 FF 
084f4     44 E4 05 F1 | 	add	objptr, ##28228
084f8     F2 30 02 FB | 	rdlong	local06, objptr
084fc     01 30 06 F1 | 	add	local06, #1
08500     F2 30 62 FC | 	wrlong	local06, objptr
08504     01 2C 06 F1 | 	add	local04, #1
08508     01 30 86 F1 | 	sub	local06, #1
0850c     03 30 66 F0 | 	shl	local06, #3
08510     02 00 00 FF 
08514     38 E4 85 F1 | 	sub	objptr, ##1080
08518     F2 30 02 F1 | 	add	local06, objptr
0851c     04 30 06 F1 | 	add	local06, #4
08520     18 35 02 FB | 	rdlong	local08, local06
08524     14 34 0E F2 | 	cmp	local08, #20 wz
08528     35 00 00 FF 
0852c     0C E4 85 F1 | 	sub	objptr, ##27148
08530     34 00 90 AD |  if_e	jmp	#LR__0771
08534     37 00 00 FF 
08538     44 E4 05 F1 | 	add	objptr, ##28228
0853c     F2 34 02 FB | 	rdlong	local08, objptr
08540     03 34 66 F0 | 	shl	local08, #3
08544     02 00 00 FF 
08548     38 E4 85 F1 | 	sub	objptr, ##1080
0854c     F2 34 02 F1 | 	add	local08, objptr
08550     04 34 06 F1 | 	add	local08, #4
08554     1A 35 02 FB | 	rdlong	local08, local08
08558     FE 35 0E F2 | 	cmp	local08, #510 wz
0855c     35 00 00 FF 
08560     0C E4 85 F1 | 	sub	objptr, ##27148
08564     84 FF 9F 5D |  if_ne	jmp	#LR__0770
08568                 | LR__0771
08568     37 00 00 FF 
0856c     44 E4 05 F1 | 	add	objptr, ##28228
08570     F2 34 02 FB | 	rdlong	local08, objptr
08574     01 34 06 F1 | 	add	local08, #1
08578     F2 34 62 FC | 	wrlong	local08, objptr
0857c     37 00 00 FF 
08580     44 E4 85 F1 | 	sub	objptr, ##28228
08584     EC 1A B0 FD | 	call	#_expr
08588     01 36 66 F6 | 	neg	local09, #1
0858c     00 38 06 F6 | 	mov	local10, #0
08590                 | '   ct+=1 : expr()
08590                 | '   j=-1 : i=0 
08590                 | '   do 
08590                 | LR__0772
08590                 | '     if variables(i).name=varname$ then j=i: exit loop
08590     1C 31 02 F6 | 	mov	local06, local10
08594     04 30 66 F0 | 	shl	local06, #4
08598     14 00 00 FF 
0859c     F8 E5 05 F1 | 	add	objptr, ##10744
085a0     F2 30 02 F1 | 	add	local06, objptr
085a4     18 13 02 FB | 	rdlong	arg01, local06
085a8     19 15 02 F6 | 	mov	arg02, local07
085ac     14 00 00 FF 
085b0     F8 E5 85 F1 | 	sub	objptr, ##10744
085b4     84 96 B1 FD | 	call	#__system___string_cmp
085b8     00 FA 0D F2 | 	cmp	result1, #0 wz
085bc     1C 37 02 A6 |  if_e	mov	local09, local10
085c0     20 00 90 AD |  if_e	jmp	#LR__0773
085c4     01 38 06 F1 | 	add	local10, #1
085c8     35 00 00 FF 
085cc     08 E4 05 F1 | 	add	objptr, ##27144
085d0     F2 34 02 FB | 	rdlong	local08, objptr
085d4     35 00 00 FF 
085d8     08 E4 85 F1 | 	sub	objptr, ##27144
085dc     1A 39 5A F2 | 	cmps	local10, local08 wcz
085e0     AC FF 9F ED |  if_be	jmp	#LR__0772
085e4                 | LR__0773
085e4     1B 27 02 F6 | 	mov	local01, local09
085e8     16 29 02 F6 | 	mov	local02, local04
085ec     17 2A 06 F6 | 	mov	local03, #23
085f0     13 35 02 F6 | 	mov	local08, local01
085f4     14 3B 02 F6 | 	mov	local11, local02
085f8     15 33 02 F6 | 	mov	local07, local03
085fc     4A 00 00 FF 
08600     7C E4 05 F1 | 	add	objptr, ##38012
08604     F2 26 02 FB | 	rdlong	local01, objptr
08608     13 37 02 F6 | 	mov	local09, local01
0860c     01 36 66 F0 | 	shl	local09, #1
08610     13 37 02 F1 | 	add	local09, local01
08614     02 36 66 F0 | 	shl	local09, #2
08618     03 00 00 FF 
0861c     00 E4 85 F1 | 	sub	objptr, ##1536
08620     F2 36 02 F1 | 	add	local09, objptr
08624     1B 35 62 FC | 	wrlong	local08, local09
08628     03 00 00 FF 
0862c     00 E4 05 F1 | 	add	objptr, ##1536
08630     F2 26 02 FB | 	rdlong	local01, objptr
08634     13 37 02 F6 | 	mov	local09, local01
08638     01 36 66 F0 | 	shl	local09, #1
0863c     13 37 02 F1 | 	add	local09, local01
08640     02 36 66 F0 | 	shl	local09, #2
08644     03 00 00 FF 
08648     00 E4 85 F1 | 	sub	objptr, ##1536
0864c     F2 36 02 F1 | 	add	local09, objptr
08650     04 36 06 F1 | 	add	local09, #4
08654     1B 3B 62 FC | 	wrlong	local11, local09
08658     03 00 00 FF 
0865c     00 E4 05 F1 | 	add	objptr, ##1536
08660     F2 3A 02 FB | 	rdlong	local11, objptr
08664     1D 27 02 F6 | 	mov	local01, local11
08668     01 26 66 F0 | 	shl	local01, #1
0866c     1D 27 02 F1 | 	add	local01, local11
08670     02 26 66 F0 | 	shl	local01, #2
08674     03 00 00 FF 
08678     00 E4 85 F1 | 	sub	objptr, ##1536
0867c     F2 26 02 F1 | 	add	local01, objptr
08680     08 26 06 F1 | 	add	local01, #8
08684     13 33 62 FC | 	wrlong	local07, local01
08688     03 00 00 FF 
0868c     00 E4 05 F1 | 	add	objptr, ##1536
08690     F2 34 02 FB | 	rdlong	local08, objptr
08694     01 34 06 F1 | 	add	local08, #1
08698     F2 34 62 FC | 	wrlong	local08, objptr
0869c                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
0869c                 | '   if numpar>3 then err=45
0869c     04 2C 16 F2 | 	cmp	local04, #4 wc
086a0     2D 2E 06 36 |  if_ae	mov	local05, #45
086a4                 | '   if i>varnum then err=20
086a4     15 00 00 FF 
086a8     74 E4 85 F1 | 	sub	objptr, ##10868
086ac     F2 34 02 FB | 	rdlong	local08, objptr
086b0     35 00 00 FF 
086b4     08 E4 85 F1 | 	sub	objptr, ##27144
086b8     1A 39 5A F2 | 	cmps	local10, local08 wcz
086bc     14 2E 06 16 |  if_a	mov	local05, #20
086c0     04 00 90 FD | 	jmp	#LR__0775
086c4                 | LR__0774
086c4     0E 2E 06 F6 | 	mov	local05, #14
086c8                 | LR__0775
086c8                 | ' return err
086c8     17 FB 01 F6 | 	mov	result1, local05
086cc     A7 F0 03 F6 | 	mov	ptra, fp
086d0     B2 00 A0 FD | 	call	#popregs_
086d4                 | _compile_array_assign_ret
086d4     2D 00 64 FD | 	ret
086d8                 | 
086d8                 | ' 
086d8                 | ' '----- compile print command with its ";" and "," modifiers
086d8                 | ' 
086d8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
086d8                 | _compile_print
086d8     0B 4A 05 F6 | 	mov	COUNT_, #11
086dc     A8 00 A0 FD | 	call	#pushregs_
086e0     00 26 06 F6 | 	mov	local01, #0
086e4     1D 2A 06 F6 | 	mov	local03, #29
086e8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
086e8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
086e8     37 00 00 FF 
086ec     44 E4 05 F1 | 	add	objptr, ##28228
086f0     F2 2C 02 FB | 	rdlong	local04, objptr
086f4     03 2C 66 F0 | 	shl	local04, #3
086f8     02 00 00 FF 
086fc     38 E4 85 F1 | 	sub	objptr, ##1080
08700     F2 2C 02 F1 | 	add	local04, objptr
08704     04 2C 06 F1 | 	add	local04, #4
08708     16 2D 02 FB | 	rdlong	local04, local04
0870c     FE 2D 0E F2 | 	cmp	local04, #510 wz
08710     35 00 00 FF 
08714     0C E4 85 F1 | 	sub	objptr, ##27148
08718     68 01 90 5D |  if_ne	jmp	#LR__0780
0871c     20 2A 06 F6 | 	mov	local03, #32
08720     13 2F 02 F6 | 	mov	local05, local01
08724     14 31 02 F6 | 	mov	local06, local02
08728     15 33 02 F6 | 	mov	local07, local03
0872c     4A 00 00 FF 
08730     7C E4 05 F1 | 	add	objptr, ##38012
08734     F2 34 02 FB | 	rdlong	local08, objptr
08738     1A 37 02 F6 | 	mov	local09, local08
0873c     01 36 66 F0 | 	shl	local09, #1
08740     1A 37 02 F1 | 	add	local09, local08
08744     02 36 66 F0 | 	shl	local09, #2
08748     03 00 00 FF 
0874c     00 E4 85 F1 | 	sub	objptr, ##1536
08750     F2 36 02 F1 | 	add	local09, objptr
08754     1B 2F 62 FC | 	wrlong	local05, local09
08758     03 00 00 FF 
0875c     00 E4 05 F1 | 	add	objptr, ##1536
08760     F2 2E 02 FB | 	rdlong	local05, objptr
08764     17 39 02 F6 | 	mov	local10, local05
08768     01 38 66 F0 | 	shl	local10, #1
0876c     17 39 02 F1 | 	add	local10, local05
08770     02 38 66 F0 | 	shl	local10, #2
08774     03 00 00 FF 
08778     00 E4 85 F1 | 	sub	objptr, ##1536
0877c     F2 38 02 F1 | 	add	local10, objptr
08780     04 38 06 F1 | 	add	local10, #4
08784     1C 31 62 FC | 	wrlong	local06, local10
08788     03 00 00 FF 
0878c     00 E4 05 F1 | 	add	objptr, ##1536
08790     F2 2E 02 FB | 	rdlong	local05, objptr
08794     17 3B 02 F6 | 	mov	local11, local05
08798     01 3A 66 F0 | 	shl	local11, #1
0879c     17 3B 02 F1 | 	add	local11, local05
087a0     02 3A 66 F0 | 	shl	local11, #2
087a4     03 00 00 FF 
087a8     00 E4 85 F1 | 	sub	objptr, ##1536
087ac     F2 3A 02 F1 | 	add	local11, objptr
087b0     08 3A 06 F1 | 	add	local11, #8
087b4     1D 33 62 FC | 	wrlong	local07, local11
087b8     03 00 00 FF 
087bc     00 E4 05 F1 | 	add	objptr, ##1536
087c0     F2 2E 02 FB | 	rdlong	local05, objptr
087c4     01 2E 06 F1 | 	add	local05, #1
087c8     F2 2E 62 FC | 	wrlong	local05, objptr
087cc     44 2A 06 F6 | 	mov	local03, #68
087d0     13 2F 02 F6 | 	mov	local05, local01
087d4     14 31 02 F6 | 	mov	local06, local02
087d8     15 33 02 F6 | 	mov	local07, local03
087dc     F2 34 02 FB | 	rdlong	local08, objptr
087e0     1A 37 02 F6 | 	mov	local09, local08
087e4     01 36 66 F0 | 	shl	local09, #1
087e8     1A 37 02 F1 | 	add	local09, local08
087ec     02 36 66 F0 | 	shl	local09, #2
087f0     03 00 00 FF 
087f4     00 E4 85 F1 | 	sub	objptr, ##1536
087f8     F2 36 02 F1 | 	add	local09, objptr
087fc     1B 2F 62 FC | 	wrlong	local05, local09
08800     03 00 00 FF 
08804     00 E4 05 F1 | 	add	objptr, ##1536
08808     F2 3A 02 FB | 	rdlong	local11, objptr
0880c     1D 39 02 F6 | 	mov	local10, local11
08810     01 38 66 F0 | 	shl	local10, #1
08814     1D 39 02 F1 | 	add	local10, local11
08818     02 38 66 F0 | 	shl	local10, #2
0881c     03 00 00 FF 
08820     00 E4 85 F1 | 	sub	objptr, ##1536
08824     F2 38 02 F1 | 	add	local10, objptr
08828     04 38 06 F1 | 	add	local10, #4
0882c     1C 31 62 FC | 	wrlong	local06, local10
08830     03 00 00 FF 
08834     00 E4 05 F1 | 	add	objptr, ##1536
08838     F2 38 02 FB | 	rdlong	local10, objptr
0883c     1C 3B 02 F6 | 	mov	local11, local10
08840     01 3A 66 F0 | 	shl	local11, #1
08844     1C 3B 02 F1 | 	add	local11, local10
08848     02 3A 66 F0 | 	shl	local11, #2
0884c     03 00 00 FF 
08850     00 E4 85 F1 | 	sub	objptr, ##1536
08854     F2 3A 02 F1 | 	add	local11, objptr
08858     08 3A 06 F1 | 	add	local11, #8
0885c     1D 33 62 FC | 	wrlong	local07, local11
08860     03 00 00 FF 
08864     00 E4 05 F1 | 	add	objptr, ##1536
08868     F2 2E 02 FB | 	rdlong	local05, objptr
0886c     01 2E 06 F1 | 	add	local05, #1
08870     F2 2E 62 FC | 	wrlong	local05, objptr
08874     4A 00 00 FF 
08878     7C E4 85 F1 | 	sub	objptr, ##38012
0887c     00 FA 05 F6 | 	mov	result1, #0
08880     20 05 90 FD | 	jmp	#LR__0787
08884                 | LR__0780
08884                 | ' do
08884                 | LR__0781
08884     EC 17 B0 FD | 	call	#_expr
08888                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
08888                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08888     37 00 00 FF 
0888c     44 E4 05 F1 | 	add	objptr, ##28228
08890     F2 2C 02 FB | 	rdlong	local04, objptr
08894     03 2C 66 F0 | 	shl	local04, #3
08898     02 00 00 FF 
0889c     38 E4 85 F1 | 	sub	objptr, ##1080
088a0     F2 2C 02 F1 | 	add	local04, objptr
088a4     04 2C 06 F1 | 	add	local04, #4
088a8     16 35 02 FB | 	rdlong	local08, local04
088ac     11 34 0E F2 | 	cmp	local08, #17 wz
088b0     35 00 00 FF 
088b4     0C E4 85 F1 | 	sub	objptr, ##27148
088b8     60 01 90 5D |  if_ne	jmp	#LR__0782
088bc     21 2A 06 F6 | 	mov	local03, #33
088c0     13 2F 02 F6 | 	mov	local05, local01
088c4     14 31 02 F6 | 	mov	local06, local02
088c8     15 33 02 F6 | 	mov	local07, local03
088cc     4A 00 00 FF 
088d0     7C E4 05 F1 | 	add	objptr, ##38012
088d4     F2 34 02 FB | 	rdlong	local08, objptr
088d8     1A 37 02 F6 | 	mov	local09, local08
088dc     01 36 66 F0 | 	shl	local09, #1
088e0     1A 37 02 F1 | 	add	local09, local08
088e4     02 36 66 F0 | 	shl	local09, #2
088e8     03 00 00 FF 
088ec     00 E4 85 F1 | 	sub	objptr, ##1536
088f0     F2 36 02 F1 | 	add	local09, objptr
088f4     1B 2F 62 FC | 	wrlong	local05, local09
088f8     03 00 00 FF 
088fc     00 E4 05 F1 | 	add	objptr, ##1536
08900     F2 3A 02 FB | 	rdlong	local11, objptr
08904     1D 39 02 F6 | 	mov	local10, local11
08908     01 38 66 F0 | 	shl	local10, #1
0890c     1D 39 02 F1 | 	add	local10, local11
08910     02 38 66 F0 | 	shl	local10, #2
08914     03 00 00 FF 
08918     00 E4 85 F1 | 	sub	objptr, ##1536
0891c     F2 38 02 F1 | 	add	local10, objptr
08920     04 38 06 F1 | 	add	local10, #4
08924     1C 31 62 FC | 	wrlong	local06, local10
08928     03 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##1536
08930     F2 2E 02 FB | 	rdlong	local05, objptr
08934     17 3B 02 F6 | 	mov	local11, local05
08938     01 3A 66 F0 | 	shl	local11, #1
0893c     17 3B 02 F1 | 	add	local11, local05
08940     02 3A 66 F0 | 	shl	local11, #2
08944     03 00 00 FF 
08948     00 E4 85 F1 | 	sub	objptr, ##1536
0894c     F2 3A 02 F1 | 	add	local11, objptr
08950     08 3A 06 F1 | 	add	local11, #8
08954     1D 33 62 FC | 	wrlong	local07, local11
08958     03 00 00 FF 
0895c     00 E4 05 F1 | 	add	objptr, ##1536
08960     F2 2E 02 FB | 	rdlong	local05, objptr
08964     01 2E 06 F1 | 	add	local05, #1
08968     F2 2E 62 FC | 	wrlong	local05, objptr
0896c     44 2A 06 F6 | 	mov	local03, #68
08970     13 2F 02 F6 | 	mov	local05, local01
08974     14 31 02 F6 | 	mov	local06, local02
08978     15 33 02 F6 | 	mov	local07, local03
0897c     F2 34 02 FB | 	rdlong	local08, objptr
08980     1A 37 02 F6 | 	mov	local09, local08
08984     01 36 66 F0 | 	shl	local09, #1
08988     1A 37 02 F1 | 	add	local09, local08
0898c     02 36 66 F0 | 	shl	local09, #2
08990     03 00 00 FF 
08994     00 E4 85 F1 | 	sub	objptr, ##1536
08998     F2 36 02 F1 | 	add	local09, objptr
0899c     1B 2F 62 FC | 	wrlong	local05, local09
089a0     03 00 00 FF 
089a4     00 E4 05 F1 | 	add	objptr, ##1536
089a8     F2 3A 02 FB | 	rdlong	local11, objptr
089ac     1D 39 02 F6 | 	mov	local10, local11
089b0     01 38 66 F0 | 	shl	local10, #1
089b4     1D 39 02 F1 | 	add	local10, local11
089b8     02 38 66 F0 | 	shl	local10, #2
089bc     03 00 00 FF 
089c0     00 E4 85 F1 | 	sub	objptr, ##1536
089c4     F2 38 02 F1 | 	add	local10, objptr
089c8     04 38 06 F1 | 	add	local10, #4
089cc     1C 31 62 FC | 	wrlong	local06, local10
089d0     03 00 00 FF 
089d4     00 E4 05 F1 | 	add	objptr, ##1536
089d8     F2 38 02 FB | 	rdlong	local10, objptr
089dc     1C 3B 02 F6 | 	mov	local11, local10
089e0     01 3A 66 F0 | 	shl	local11, #1
089e4     1C 3B 02 F1 | 	add	local11, local10
089e8     02 3A 66 F0 | 	shl	local11, #2
089ec     03 00 00 FF 
089f0     00 E4 85 F1 | 	sub	objptr, ##1536
089f4     F2 3A 02 F1 | 	add	local11, objptr
089f8     08 3A 06 F1 | 	add	local11, #8
089fc     1D 33 62 FC | 	wrlong	local07, local11
08a00     03 00 00 FF 
08a04     00 E4 05 F1 | 	add	objptr, ##1536
08a08     F2 2E 02 FB | 	rdlong	local05, objptr
08a0c     01 2E 06 F1 | 	add	local05, #1
08a10     F2 2E 62 FC | 	wrlong	local05, objptr
08a14     4A 00 00 FF 
08a18     7C E4 85 F1 | 	sub	objptr, ##38012
08a1c                 | LR__0782
08a1c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08a1c     37 00 00 FF 
08a20     44 E4 05 F1 | 	add	objptr, ##28228
08a24     F2 2C 02 FB | 	rdlong	local04, objptr
08a28     03 2C 66 F0 | 	shl	local04, #3
08a2c     02 00 00 FF 
08a30     38 E4 85 F1 | 	sub	objptr, ##1080
08a34     F2 2C 02 F1 | 	add	local04, objptr
08a38     04 2C 06 F1 | 	add	local04, #4
08a3c     16 35 02 FB | 	rdlong	local08, local04
08a40     12 34 0E F2 | 	cmp	local08, #18 wz
08a44     35 00 00 FF 
08a48     0C E4 85 F1 | 	sub	objptr, ##27148
08a4c     60 01 90 5D |  if_ne	jmp	#LR__0783
08a50     22 2A 06 F6 | 	mov	local03, #34
08a54     13 2F 02 F6 | 	mov	local05, local01
08a58     14 31 02 F6 | 	mov	local06, local02
08a5c     15 33 02 F6 | 	mov	local07, local03
08a60     4A 00 00 FF 
08a64     7C E4 05 F1 | 	add	objptr, ##38012
08a68     F2 34 02 FB | 	rdlong	local08, objptr
08a6c     1A 37 02 F6 | 	mov	local09, local08
08a70     01 36 66 F0 | 	shl	local09, #1
08a74     1A 37 02 F1 | 	add	local09, local08
08a78     02 36 66 F0 | 	shl	local09, #2
08a7c     03 00 00 FF 
08a80     00 E4 85 F1 | 	sub	objptr, ##1536
08a84     F2 36 02 F1 | 	add	local09, objptr
08a88     1B 2F 62 FC | 	wrlong	local05, local09
08a8c     03 00 00 FF 
08a90     00 E4 05 F1 | 	add	objptr, ##1536
08a94     F2 3A 02 FB | 	rdlong	local11, objptr
08a98     1D 39 02 F6 | 	mov	local10, local11
08a9c     01 38 66 F0 | 	shl	local10, #1
08aa0     1D 39 02 F1 | 	add	local10, local11
08aa4     02 38 66 F0 | 	shl	local10, #2
08aa8     03 00 00 FF 
08aac     00 E4 85 F1 | 	sub	objptr, ##1536
08ab0     F2 38 02 F1 | 	add	local10, objptr
08ab4     04 38 06 F1 | 	add	local10, #4
08ab8     1C 31 62 FC | 	wrlong	local06, local10
08abc     03 00 00 FF 
08ac0     00 E4 05 F1 | 	add	objptr, ##1536
08ac4     F2 2E 02 FB | 	rdlong	local05, objptr
08ac8     17 3B 02 F6 | 	mov	local11, local05
08acc     01 3A 66 F0 | 	shl	local11, #1
08ad0     17 3B 02 F1 | 	add	local11, local05
08ad4     02 3A 66 F0 | 	shl	local11, #2
08ad8     03 00 00 FF 
08adc     00 E4 85 F1 | 	sub	objptr, ##1536
08ae0     F2 3A 02 F1 | 	add	local11, objptr
08ae4     08 3A 06 F1 | 	add	local11, #8
08ae8     1D 33 62 FC | 	wrlong	local07, local11
08aec     03 00 00 FF 
08af0     00 E4 05 F1 | 	add	objptr, ##1536
08af4     F2 2E 02 FB | 	rdlong	local05, objptr
08af8     01 2E 06 F1 | 	add	local05, #1
08afc     F2 2E 62 FC | 	wrlong	local05, objptr
08b00     44 2A 06 F6 | 	mov	local03, #68
08b04     13 2F 02 F6 | 	mov	local05, local01
08b08     14 31 02 F6 | 	mov	local06, local02
08b0c     15 33 02 F6 | 	mov	local07, local03
08b10     F2 34 02 FB | 	rdlong	local08, objptr
08b14     1A 37 02 F6 | 	mov	local09, local08
08b18     01 36 66 F0 | 	shl	local09, #1
08b1c     1A 37 02 F1 | 	add	local09, local08
08b20     02 36 66 F0 | 	shl	local09, #2
08b24     03 00 00 FF 
08b28     00 E4 85 F1 | 	sub	objptr, ##1536
08b2c     F2 36 02 F1 | 	add	local09, objptr
08b30     1B 2F 62 FC | 	wrlong	local05, local09
08b34     03 00 00 FF 
08b38     00 E4 05 F1 | 	add	objptr, ##1536
08b3c     F2 3A 02 FB | 	rdlong	local11, objptr
08b40     1D 39 02 F6 | 	mov	local10, local11
08b44     01 38 66 F0 | 	shl	local10, #1
08b48     1D 39 02 F1 | 	add	local10, local11
08b4c     02 38 66 F0 | 	shl	local10, #2
08b50     03 00 00 FF 
08b54     00 E4 85 F1 | 	sub	objptr, ##1536
08b58     F2 38 02 F1 | 	add	local10, objptr
08b5c     04 38 06 F1 | 	add	local10, #4
08b60     1C 31 62 FC | 	wrlong	local06, local10
08b64     03 00 00 FF 
08b68     00 E4 05 F1 | 	add	objptr, ##1536
08b6c     F2 38 02 FB | 	rdlong	local10, objptr
08b70     1C 3B 02 F6 | 	mov	local11, local10
08b74     01 3A 66 F0 | 	shl	local11, #1
08b78     1C 3B 02 F1 | 	add	local11, local10
08b7c     02 3A 66 F0 | 	shl	local11, #2
08b80     03 00 00 FF 
08b84     00 E4 85 F1 | 	sub	objptr, ##1536
08b88     F2 3A 02 F1 | 	add	local11, objptr
08b8c     08 3A 06 F1 | 	add	local11, #8
08b90     1D 33 62 FC | 	wrlong	local07, local11
08b94     03 00 00 FF 
08b98     00 E4 05 F1 | 	add	objptr, ##1536
08b9c     F2 2E 02 FB | 	rdlong	local05, objptr
08ba0     01 2E 06 F1 | 	add	local05, #1
08ba4     F2 2E 62 FC | 	wrlong	local05, objptr
08ba8     4A 00 00 FF 
08bac     7C E4 85 F1 | 	sub	objptr, ##38012
08bb0                 | LR__0783
08bb0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08bb0     37 00 00 FF 
08bb4     44 E4 05 F1 | 	add	objptr, ##28228
08bb8     F2 2C 02 FB | 	rdlong	local04, objptr
08bbc     03 2C 66 F0 | 	shl	local04, #3
08bc0     02 00 00 FF 
08bc4     38 E4 85 F1 | 	sub	objptr, ##1080
08bc8     F2 2C 02 F1 | 	add	local04, objptr
08bcc     04 2C 06 F1 | 	add	local04, #4
08bd0     16 35 02 FB | 	rdlong	local08, local04
08bd4     FE 35 0E F2 | 	cmp	local08, #510 wz
08bd8     35 00 00 FF 
08bdc     0C E4 85 F1 | 	sub	objptr, ##27148
08be0     B8 00 90 5D |  if_ne	jmp	#LR__0784
08be4     44 2A 06 F6 | 	mov	local03, #68
08be8     13 2F 02 F6 | 	mov	local05, local01
08bec     14 31 02 F6 | 	mov	local06, local02
08bf0     15 33 02 F6 | 	mov	local07, local03
08bf4     4A 00 00 FF 
08bf8     7C E4 05 F1 | 	add	objptr, ##38012
08bfc     F2 34 02 FB | 	rdlong	local08, objptr
08c00     1A 37 02 F6 | 	mov	local09, local08
08c04     01 36 66 F0 | 	shl	local09, #1
08c08     1A 37 02 F1 | 	add	local09, local08
08c0c     02 36 66 F0 | 	shl	local09, #2
08c10     03 00 00 FF 
08c14     00 E4 85 F1 | 	sub	objptr, ##1536
08c18     F2 36 02 F1 | 	add	local09, objptr
08c1c     1B 2F 62 FC | 	wrlong	local05, local09
08c20     03 00 00 FF 
08c24     00 E4 05 F1 | 	add	objptr, ##1536
08c28     F2 3A 02 FB | 	rdlong	local11, objptr
08c2c     1D 39 02 F6 | 	mov	local10, local11
08c30     01 38 66 F0 | 	shl	local10, #1
08c34     1D 39 02 F1 | 	add	local10, local11
08c38     02 38 66 F0 | 	shl	local10, #2
08c3c     03 00 00 FF 
08c40     00 E4 85 F1 | 	sub	objptr, ##1536
08c44     F2 38 02 F1 | 	add	local10, objptr
08c48     04 38 06 F1 | 	add	local10, #4
08c4c     1C 31 62 FC | 	wrlong	local06, local10
08c50     03 00 00 FF 
08c54     00 E4 05 F1 | 	add	objptr, ##1536
08c58     F2 38 02 FB | 	rdlong	local10, objptr
08c5c     1C 3B 02 F6 | 	mov	local11, local10
08c60     01 3A 66 F0 | 	shl	local11, #1
08c64     1C 3B 02 F1 | 	add	local11, local10
08c68     02 3A 66 F0 | 	shl	local11, #2
08c6c     03 00 00 FF 
08c70     00 E4 85 F1 | 	sub	objptr, ##1536
08c74     F2 3A 02 F1 | 	add	local11, objptr
08c78     08 3A 06 F1 | 	add	local11, #8
08c7c     1D 33 62 FC | 	wrlong	local07, local11
08c80     03 00 00 FF 
08c84     00 E4 05 F1 | 	add	objptr, ##1536
08c88     F2 2E 02 FB | 	rdlong	local05, objptr
08c8c     01 2E 06 F1 | 	add	local05, #1
08c90     F2 2E 62 FC | 	wrlong	local05, objptr
08c94     4A 00 00 FF 
08c98     7C E4 85 F1 | 	sub	objptr, ##38012
08c9c                 | LR__0784
08c9c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08c9c     37 00 00 FF 
08ca0     44 E4 05 F1 | 	add	objptr, ##28228
08ca4     F2 2C 02 FB | 	rdlong	local04, objptr
08ca8     03 2C 66 F0 | 	shl	local04, #3
08cac     02 00 00 FF 
08cb0     38 E4 85 F1 | 	sub	objptr, ##1080
08cb4     F2 2C 02 F1 | 	add	local04, objptr
08cb8     04 2C 06 F1 | 	add	local04, #4
08cbc     16 35 02 FB | 	rdlong	local08, local04
08cc0     11 34 0E F2 | 	cmp	local08, #17 wz
08cc4     35 00 00 FF 
08cc8     0C E4 85 F1 | 	sub	objptr, ##27148
08ccc     6C 00 90 AD |  if_e	jmp	#LR__0785
08cd0     37 00 00 FF 
08cd4     44 E4 05 F1 | 	add	objptr, ##28228
08cd8     F2 34 02 FB | 	rdlong	local08, objptr
08cdc     03 34 66 F0 | 	shl	local08, #3
08ce0     02 00 00 FF 
08ce4     38 E4 85 F1 | 	sub	objptr, ##1080
08ce8     F2 34 02 F1 | 	add	local08, objptr
08cec     04 34 06 F1 | 	add	local08, #4
08cf0     1A 35 02 FB | 	rdlong	local08, local08
08cf4     12 34 0E F2 | 	cmp	local08, #18 wz
08cf8     35 00 00 FF 
08cfc     0C E4 85 F1 | 	sub	objptr, ##27148
08d00     38 00 90 AD |  if_e	jmp	#LR__0785
08d04     37 00 00 FF 
08d08     44 E4 05 F1 | 	add	objptr, ##28228
08d0c     F2 3A 02 FB | 	rdlong	local11, objptr
08d10     03 3A 66 F0 | 	shl	local11, #3
08d14     02 00 00 FF 
08d18     38 E4 85 F1 | 	sub	objptr, ##1080
08d1c     F2 3A 02 F1 | 	add	local11, objptr
08d20     04 3A 06 F1 | 	add	local11, #4
08d24     1D 3B 02 FB | 	rdlong	local11, local11
08d28     FE 3B 0E F2 | 	cmp	local11, #510 wz
08d2c     35 00 00 FF 
08d30     0C E4 85 F1 | 	sub	objptr, ##27148
08d34     16 FA 05 56 |  if_ne	mov	result1, #22
08d38     68 00 90 5D |  if_ne	jmp	#LR__0787
08d3c                 | LR__0785
08d3c     37 00 00 FF 
08d40     44 E4 05 F1 | 	add	objptr, ##28228
08d44     F2 2C 02 FB | 	rdlong	local04, objptr
08d48     01 2C 06 F1 | 	add	local04, #1
08d4c     F2 2C 62 FC | 	wrlong	local04, objptr
08d50     03 2C 66 F0 | 	shl	local04, #3
08d54     02 00 00 FF 
08d58     38 E4 85 F1 | 	sub	objptr, ##1080
08d5c     F2 2C 02 F1 | 	add	local04, objptr
08d60     04 2C 06 F1 | 	add	local04, #4
08d64     16 35 02 FB | 	rdlong	local08, local04
08d68     FE 35 0E F2 | 	cmp	local08, #510 wz
08d6c     35 00 00 FF 
08d70     0C E4 85 F1 | 	sub	objptr, ##27148
08d74     28 00 90 AD |  if_e	jmp	#LR__0786
08d78     37 00 00 FF 
08d7c     44 E4 05 F1 | 	add	objptr, ##28228
08d80     F2 3A 02 FB | 	rdlong	local11, objptr
08d84     0E 00 00 FF 
08d88     1C E4 05 F1 | 	add	objptr, ##7196
08d8c     F2 38 02 FB | 	rdlong	local10, objptr
08d90     45 00 00 FF 
08d94     60 E4 85 F1 | 	sub	objptr, ##35424
08d98     1C 3B 52 F2 | 	cmps	local11, local10 wc
08d9c     E4 FA 9F CD |  if_b	jmp	#LR__0781
08da0                 | LR__0786
08da0                 | ' return 0
08da0     00 FA 05 F6 | 	mov	result1, #0
08da4                 | LR__0787
08da4     A7 F0 03 F6 | 	mov	ptra, fp
08da8     B2 00 A0 FD | 	call	#popregs_
08dac                 | _compile_print_ret
08dac     2D 00 64 FD | 	ret
08db0                 | 
08db0                 | ' 
08db0                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08db0                 | ' 
08db0                 | ' function compile_if(aline as ulong) as ulong  
08db0                 | _compile_if
08db0     09 4A 05 F6 | 	mov	COUNT_, #9
08db4     A8 00 A0 FD | 	call	#pushregs_
08db8                 | _compile_if_enter
08db8     09 2D 02 F6 | 	mov	local04, arg01
08dbc                 | ' return expr()
08dbc     B4 12 B0 FD | 	call	#_expr
08dc0     37 00 00 FF 
08dc4     44 E4 05 F1 | 	add	objptr, ##28228
08dc8     F2 14 02 FB | 	rdlong	arg02, objptr
08dcc     0A 2F 02 F6 | 	mov	local05, arg02
08dd0     03 2E 66 F0 | 	shl	local05, #3
08dd4     02 00 00 FF 
08dd8     38 E4 85 F1 | 	sub	objptr, ##1080
08ddc     F2 2E 02 F1 | 	add	local05, objptr
08de0     04 2E 06 F1 | 	add	local05, #4
08de4     17 2F 02 FB | 	rdlong	local05, local05
08de8     01 14 06 F1 | 	add	arg02, #1
08dec     02 00 00 FF 
08df0     38 E4 05 F1 | 	add	objptr, ##1080
08df4     F2 14 62 FC | 	wrlong	arg02, objptr
08df8     37 00 00 FF 
08dfc     44 E4 85 F1 | 	sub	objptr, ##28228
08e00                 | ' 
08e00                 | ' err=compile_fun_1p()
08e00                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08e00     5B 2E 0E F2 | 	cmp	local05, #91 wz
08e04     34 FA 05 56 |  if_ne	mov	result1, #52
08e08     20 01 90 5D |  if_ne	jmp	#LR__0792
08e0c     58 2A 06 F6 | 	mov	local03, #88
08e10     13 31 02 F6 | 	mov	local06, local01
08e14     14 33 02 F6 | 	mov	local07, local02
08e18     15 15 02 F6 | 	mov	arg02, local03
08e1c     4A 00 00 FF 
08e20     7C E4 05 F1 | 	add	objptr, ##38012
08e24     F2 12 02 FB | 	rdlong	arg01, objptr
08e28     09 35 02 F6 | 	mov	local08, arg01
08e2c     01 34 66 F0 | 	shl	local08, #1
08e30     09 35 02 F1 | 	add	local08, arg01
08e34     02 34 66 F0 | 	shl	local08, #2
08e38     03 00 00 FF 
08e3c     00 E4 85 F1 | 	sub	objptr, ##1536
08e40     F2 34 02 F1 | 	add	local08, objptr
08e44     1A 31 62 FC | 	wrlong	local06, local08
08e48     03 00 00 FF 
08e4c     00 E4 05 F1 | 	add	objptr, ##1536
08e50     F2 30 02 FB | 	rdlong	local06, objptr
08e54     18 13 02 F6 | 	mov	arg01, local06
08e58     01 12 66 F0 | 	shl	arg01, #1
08e5c     18 13 02 F1 | 	add	arg01, local06
08e60     02 12 66 F0 | 	shl	arg01, #2
08e64     03 00 00 FF 
08e68     00 E4 85 F1 | 	sub	objptr, ##1536
08e6c     F2 12 02 F1 | 	add	arg01, objptr
08e70     04 12 06 F1 | 	add	arg01, #4
08e74     09 33 62 FC | 	wrlong	local07, arg01
08e78     03 00 00 FF 
08e7c     00 E4 05 F1 | 	add	objptr, ##1536
08e80     F2 30 02 FB | 	rdlong	local06, objptr
08e84     18 13 02 F6 | 	mov	arg01, local06
08e88     01 12 66 F0 | 	shl	arg01, #1
08e8c     18 13 02 F1 | 	add	arg01, local06
08e90     02 12 66 F0 | 	shl	arg01, #2
08e94     03 00 00 FF 
08e98     00 E4 85 F1 | 	sub	objptr, ##1536
08e9c     F2 12 02 F1 | 	add	arg01, objptr
08ea0     08 12 06 F1 | 	add	arg01, #8
08ea4     09 15 62 FC | 	wrlong	arg02, arg01
08ea8     03 00 00 FF 
08eac     00 E4 05 F1 | 	add	objptr, ##1536
08eb0     F2 30 02 FB | 	rdlong	local06, objptr
08eb4     01 30 06 F1 | 	add	local06, #1
08eb8     F2 30 62 FC | 	wrlong	local06, objptr
08ebc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08ebc                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08ebc     13 00 00 FF 
08ec0     38 E4 85 F1 | 	sub	objptr, ##9784
08ec4     F2 14 02 FB | 	rdlong	arg02, objptr
08ec8     01 14 06 F1 | 	add	arg02, #1
08ecc     03 14 66 F0 | 	shl	arg02, #3
08ed0     02 00 00 FF 
08ed4     38 E4 85 F1 | 	sub	objptr, ##1080
08ed8     F2 14 02 F1 | 	add	arg02, objptr
08edc     0A 13 02 FB | 	rdlong	arg01, arg02
08ee0     35 00 00 FF 
08ee4     0C E4 85 F1 | 	sub	objptr, ##27148
08ee8                 | ' 
08ee8                 | ' select case s
08ee8     8C 01 00 FF 
08eec     48 15 06 F6 | 	mov	arg02, ##@LR__5271
08ef0     48 8D B1 FD | 	call	#__system___string_cmp
08ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
08ef8     1B FA 05 A6 |  if_e	mov	result1, #27
08efc     00 FA 05 56 |  if_ne	mov	result1, #0
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     10 00 90 AD |  if_e	jmp	#LR__0790
08f08     05 12 06 F6 | 	mov	arg01, #5
08f0c     88 EC BF FD | 	call	#_compile_immediate_assign
08f10     FD 36 02 F6 | 	mov	local09, result1
08f14     10 00 90 FD | 	jmp	#LR__0791
08f18                 | LR__0790
08f18     05 12 06 F6 | 	mov	arg01, #5
08f1c     16 15 02 F6 | 	mov	arg02, local04
08f20     18 E3 BF FD | 	call	#_compile_immediate
08f24     FD 36 02 F6 | 	mov	local09, result1
08f28                 | LR__0791
08f28                 | ' return err
08f28     1B FB 01 F6 | 	mov	result1, local09
08f2c                 | LR__0792
08f2c     A7 F0 03 F6 | 	mov	ptra, fp
08f30     B2 00 A0 FD | 	call	#popregs_
08f34                 | _compile_if_ret
08f34     2D 00 64 FD | 	ret
08f38                 | 
08f38                 | ' 
08f38                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08f38                 | ' 
08f38                 | ' function compile_else(aline as ulong) as ulong  
08f38                 | _compile_else
08f38     07 4A 05 F6 | 	mov	COUNT_, #7
08f3c     A8 00 A0 FD | 	call	#pushregs_
08f40                 | _compile_else_enter
08f40     09 2D 02 F6 | 	mov	local04, arg01
08f44     5A 2A 06 F6 | 	mov	local03, #90
08f48     13 2F 02 F6 | 	mov	local05, local01
08f4c     14 31 02 F6 | 	mov	local06, local02
08f50     15 27 02 F6 | 	mov	local01, local03
08f54     4A 00 00 FF 
08f58     7C E4 05 F1 | 	add	objptr, ##38012
08f5c     F2 14 02 FB | 	rdlong	arg02, objptr
08f60     0A 13 02 F6 | 	mov	arg01, arg02
08f64     01 12 66 F0 | 	shl	arg01, #1
08f68     0A 13 02 F1 | 	add	arg01, arg02
08f6c     02 12 66 F0 | 	shl	arg01, #2
08f70     03 00 00 FF 
08f74     00 E4 85 F1 | 	sub	objptr, ##1536
08f78     F2 12 02 F1 | 	add	arg01, objptr
08f7c     09 2F 62 FC | 	wrlong	local05, arg01
08f80     03 00 00 FF 
08f84     00 E4 05 F1 | 	add	objptr, ##1536
08f88     F2 2E 02 FB | 	rdlong	local05, objptr
08f8c     17 15 02 F6 | 	mov	arg02, local05
08f90     01 14 66 F0 | 	shl	arg02, #1
08f94     17 15 02 F1 | 	add	arg02, local05
08f98     02 14 66 F0 | 	shl	arg02, #2
08f9c     03 00 00 FF 
08fa0     00 E4 85 F1 | 	sub	objptr, ##1536
08fa4     F2 14 02 F1 | 	add	arg02, objptr
08fa8     04 14 06 F1 | 	add	arg02, #4
08fac     0A 31 62 FC | 	wrlong	local06, arg02
08fb0     03 00 00 FF 
08fb4     00 E4 05 F1 | 	add	objptr, ##1536
08fb8     F2 30 02 FB | 	rdlong	local06, objptr
08fbc     18 2F 02 F6 | 	mov	local05, local06
08fc0     01 2E 66 F0 | 	shl	local05, #1
08fc4     18 2F 02 F1 | 	add	local05, local06
08fc8     02 2E 66 F0 | 	shl	local05, #2
08fcc     03 00 00 FF 
08fd0     00 E4 85 F1 | 	sub	objptr, ##1536
08fd4     F2 2E 02 F1 | 	add	local05, objptr
08fd8     08 2E 06 F1 | 	add	local05, #8
08fdc     17 27 62 FC | 	wrlong	local01, local05
08fe0     03 00 00 FF 
08fe4     00 E4 05 F1 | 	add	objptr, ##1536
08fe8     F2 2E 02 FB | 	rdlong	local05, objptr
08fec     01 2E 06 F1 | 	add	local05, #1
08ff0     F2 2E 62 FC | 	wrlong	local05, objptr
08ff4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08ff4                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08ff4     13 00 00 FF 
08ff8     38 E4 85 F1 | 	sub	objptr, ##9784
08ffc     F2 30 02 FB | 	rdlong	local06, objptr
09000     01 30 06 F1 | 	add	local06, #1
09004     03 30 66 F0 | 	shl	local06, #3
09008     02 00 00 FF 
0900c     38 E4 85 F1 | 	sub	objptr, ##1080
09010     F2 30 02 F1 | 	add	local06, objptr
09014     18 13 02 FB | 	rdlong	arg01, local06
09018     35 00 00 FF 
0901c     0C E4 85 F1 | 	sub	objptr, ##27148
09020                 | ' 
09020                 | ' select case s
09020     8C 01 00 FF 
09024     48 15 06 F6 | 	mov	arg02, ##@LR__5271
09028     10 8C B1 FD | 	call	#__system___string_cmp
0902c     00 FA 0D F2 | 	cmp	result1, #0 wz
09030     1B FA 05 A6 |  if_e	mov	result1, #27
09034     00 FA 05 56 |  if_ne	mov	result1, #0
09038     00 FA 0D F2 | 	cmp	result1, #0 wz
0903c     10 00 90 AD |  if_e	jmp	#LR__0800
09040     05 12 06 F6 | 	mov	arg01, #5
09044     50 EB BF FD | 	call	#_compile_immediate_assign
09048     FD 32 02 F6 | 	mov	local07, result1
0904c     10 00 90 FD | 	jmp	#LR__0801
09050                 | LR__0800
09050     05 12 06 F6 | 	mov	arg01, #5
09054     16 15 02 F6 | 	mov	arg02, local04
09058     E0 E1 BF FD | 	call	#_compile_immediate
0905c     FD 32 02 F6 | 	mov	local07, result1
09060                 | LR__0801
09060                 | ' return err
09060     19 FB 01 F6 | 	mov	result1, local07
09064     A7 F0 03 F6 | 	mov	ptra, fp
09068     B2 00 A0 FD | 	call	#popregs_
0906c                 | _compile_else_ret
0906c     2D 00 64 FD | 	ret
09070                 | 
09070                 | ' 
09070                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09070                 | ' 
09070                 | ' function compile_dim() as ulong  
09070                 | _compile_dim
09070     11 4A 05 F6 | 	mov	COUNT_, #17
09074     A8 00 A0 FD | 	call	#pushregs_
09078     01 26 06 F6 | 	mov	local01, #1
0907c     01 28 06 F6 | 	mov	local02, #1
09080     01 2A 06 F6 | 	mov	local03, #1
09084                 | ' 
09084                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09084                 | ' if isname(lparts(ct).part$) then 
09084     37 00 00 FF 
09088     44 E4 05 F1 | 	add	objptr, ##28228
0908c     F2 18 02 FB | 	rdlong	arg04, objptr
09090     03 18 66 F0 | 	shl	arg04, #3
09094     02 00 00 FF 
09098     38 E4 85 F1 | 	sub	objptr, ##1080
0909c     F2 18 02 F1 | 	add	arg04, objptr
090a0     0C 13 02 FB | 	rdlong	arg01, arg04
090a4     35 00 00 FF 
090a8     0C E4 85 F1 | 	sub	objptr, ##27148
090ac     E4 CF BF FD | 	call	#_isname
090b0     00 FA 0D F2 | 	cmp	result1, #0 wz
090b4     78 05 90 AD |  if_e	jmp	#LR__0833
090b8     37 00 00 FF 
090bc     44 E4 05 F1 | 	add	objptr, ##28228
090c0     F2 2C 02 FB | 	rdlong	local04, objptr
090c4     03 2C 66 F0 | 	shl	local04, #3
090c8     02 00 00 FF 
090cc     38 E4 85 F1 | 	sub	objptr, ##1080
090d0     F2 2C 02 F1 | 	add	local04, objptr
090d4     16 2F 02 FB | 	rdlong	local05, local04
090d8     01 30 66 F6 | 	neg	local06, #1
090dc                 | '   varname2$=lparts(ct).part$ 
090dc                 | '   j=-1
090dc                 | '   if varnum>0 then
090dc     04 E4 85 F1 | 	sub	objptr, #4
090e0     F2 32 02 FB | 	rdlong	local07, objptr
090e4     35 00 00 FF 
090e8     08 E4 85 F1 | 	sub	objptr, ##27144
090ec     01 32 56 F2 | 	cmps	local07, #1 wc
090f0     58 00 90 CD |  if_b	jmp	#LR__0812
090f4                 | '     for i=0 to varnum-1
090f4     00 34 06 F6 | 	mov	local08, #0
090f8     35 00 00 FF 
090fc     08 E4 05 F1 | 	add	objptr, ##27144
09100     F2 36 02 FB | 	rdlong	local09, objptr
09104     35 00 00 FF 
09108     08 E4 85 F1 | 	sub	objptr, ##27144
0910c                 | LR__0810
0910c     1B 35 52 F2 | 	cmps	local08, local09 wc
09110     38 00 90 3D |  if_ae	jmp	#LR__0811
09114                 | '       if variables(i).name=varname2$ then j=i : exit
09114     1A 2D 02 F6 | 	mov	local04, local08
09118     04 2C 66 F0 | 	shl	local04, #4
0911c     14 00 00 FF 
09120     F8 E5 05 F1 | 	add	objptr, ##10744
09124     F2 2C 02 F1 | 	add	local04, objptr
09128     16 13 02 FB | 	rdlong	arg01, local04
0912c     17 15 02 F6 | 	mov	arg02, local05
09130     14 00 00 FF 
09134     F8 E5 85 F1 | 	sub	objptr, ##10744
09138     00 8B B1 FD | 	call	#__system___string_cmp
0913c     00 FA 0D F2 | 	cmp	result1, #0 wz
09140     1A 31 02 A6 |  if_e	mov	local06, local08
09144     01 34 06 51 |  if_ne	add	local08, #1
09148     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
0914c                 | LR__0811
0914c                 | LR__0812
0914c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0914c     FF FF 7F FF 
09150     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09154     35 00 00 AF 
09158     08 E4 05 A1 |  if_e	add	objptr, ##27144
0915c     F2 30 02 AB |  if_e	rdlong	local06, objptr
09160     35 00 00 AF 
09164     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09168     78 00 90 AD |  if_e	jmp	#LR__0813
0916c     00 12 06 F6 | 	mov	arg01, #0
09170     CC E7 B1 FD | 	call	#__system___getiolock_0574
09174     FD 12 02 F6 | 	mov	arg01, result1
09178     98 8A B1 FD | 	call	#__system___lockmem
0917c     8E 01 00 FF 
09180     89 15 06 F6 | 	mov	arg02, ##@LR__5512
09184     00 12 06 F6 | 	mov	arg01, #0
09188     00 16 06 F6 | 	mov	arg03, #0
0918c     78 97 B1 FD | 	call	#__system___basic_print_string
09190     51 00 00 FF 
09194     C4 E5 05 F1 | 	add	objptr, ##41924
09198     F2 14 02 FB | 	rdlong	arg02, objptr
0919c     51 00 00 FF 
091a0     C4 E5 85 F1 | 	sub	objptr, ##41924
091a4     00 12 06 F6 | 	mov	arg01, #0
091a8     00 16 06 F6 | 	mov	arg03, #0
091ac     0A 18 06 F6 | 	mov	arg04, #10
091b0     D8 97 B1 FD | 	call	#__system___basic_print_unsigned
091b4     8E 01 00 FF 
091b8     97 15 06 F6 | 	mov	arg02, ##@LR__5513
091bc     00 12 06 F6 | 	mov	arg01, #0
091c0     00 16 06 F6 | 	mov	arg03, #0
091c4     40 97 B1 FD | 	call	#__system___basic_print_string
091c8     00 12 06 F6 | 	mov	arg01, #0
091cc     0A 14 06 F6 | 	mov	arg02, #10
091d0     00 16 06 F6 | 	mov	arg03, #0
091d4     D8 96 B1 FD | 	call	#__system___basic_print_char
091d8     00 12 06 F6 | 	mov	arg01, #0
091dc     60 E7 B1 FD | 	call	#__system___getiolock_0574
091e0     FD 00 68 FC | 	wrlong	#0, result1
091e4                 | LR__0813
091e4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
091e4     37 00 00 FF 
091e8     44 E4 05 F1 | 	add	objptr, ##28228
091ec     F2 14 02 FB | 	rdlong	arg02, objptr
091f0     01 14 06 F1 | 	add	arg02, #1
091f4     03 14 66 F0 | 	shl	arg02, #3
091f8     02 00 00 FF 
091fc     38 E4 85 F1 | 	sub	objptr, ##1080
09200     F2 14 02 F1 | 	add	arg02, objptr
09204     0A 13 02 FB | 	rdlong	arg01, arg02
09208     8E 01 00 FF 
0920c     B8 15 06 F6 | 	mov	arg02, ##@LR__5514
09210     35 00 00 FF 
09214     0C E4 85 F1 | 	sub	objptr, ##27148
09218     20 8A B1 FD | 	call	#__system___string_cmp
0921c     00 FA 0D F2 | 	cmp	result1, #0 wz
09220     44 00 90 AD |  if_e	jmp	#LR__0814
09224     37 00 00 FF 
09228     44 E4 05 F1 | 	add	objptr, ##28228
0922c     F2 36 02 FB | 	rdlong	local09, objptr
09230     01 36 06 F1 | 	add	local09, #1
09234     03 36 66 F0 | 	shl	local09, #3
09238     02 00 00 FF 
0923c     38 E4 85 F1 | 	sub	objptr, ##1080
09240     F2 36 02 F1 | 	add	local09, objptr
09244     1B 13 02 FB | 	rdlong	arg01, local09
09248     8E 01 00 FF 
0924c     BA 15 06 F6 | 	mov	arg02, ##@LR__5515
09250     35 00 00 FF 
09254     0C E4 85 F1 | 	sub	objptr, ##27148
09258     E0 89 B1 FD | 	call	#__system___string_cmp
0925c     00 FA 0D F2 | 	cmp	result1, #0 wz
09260     2B FA 05 56 |  if_ne	mov	result1, #43
09264     D0 04 90 5D |  if_ne	jmp	#LR__0835
09268                 | LR__0814
09268                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09268     37 00 00 FF 
0926c     44 E4 05 F1 | 	add	objptr, ##28228
09270     F2 14 02 FB | 	rdlong	arg02, objptr
09274     01 14 06 F1 | 	add	arg02, #1
09278     03 14 66 F0 | 	shl	arg02, #3
0927c     02 00 00 FF 
09280     38 E4 85 F1 | 	sub	objptr, ##1080
09284     F2 14 02 F1 | 	add	arg02, objptr
09288     0A 13 02 FB | 	rdlong	arg01, arg02
0928c     8E 01 00 FF 
09290     BD 15 06 F6 | 	mov	arg02, ##@LR__5516
09294     35 00 00 FF 
09298     0C E4 85 F1 | 	sub	objptr, ##27148
0929c     9C 89 B1 FD | 	call	#__system___string_cmp
092a0     00 FA 0D F2 | 	cmp	result1, #0 wz
092a4     37 00 00 AF 
092a8     44 E4 05 A1 |  if_e	add	objptr, ##28228
092ac     F2 38 02 AB |  if_e	rdlong	local10, objptr
092b0     37 00 00 AF 
092b4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
092b8     01 38 06 A1 |  if_e	add	local10, #1
092bc     5C 01 90 AD |  if_e	jmp	#LR__0819
092c0     37 00 00 FF 
092c4     44 E4 05 F1 | 	add	objptr, ##28228
092c8     F2 38 02 FB | 	rdlong	local10, objptr
092cc     37 00 00 FF 
092d0     44 E4 85 F1 | 	sub	objptr, ##28228
092d4     02 38 06 F1 | 	add	local10, #2
092d8     00 3A 06 F6 | 	mov	local11, #0
092dc                 | '   l=ct+2 : m=0 : do
092dc                 | LR__0815
092dc                 | '   if isdec(lparts(l).part$) then 
092dc     1C 2D 02 F6 | 	mov	local04, local10
092e0     03 2C 66 F0 | 	shl	local04, #3
092e4     35 00 00 FF 
092e8     0C E4 05 F1 | 	add	objptr, ##27148
092ec     F2 2C 02 F1 | 	add	local04, objptr
092f0     16 13 02 FB | 	rdlong	arg01, local04
092f4     35 00 00 FF 
092f8     0C E4 85 F1 | 	sub	objptr, ##27148
092fc     98 D6 BF FD | 	call	#_isdec
09300     00 FA 0D F2 | 	cmp	result1, #0 wz
09304     44 00 90 AD |  if_e	jmp	#LR__0816
09308     1D 3D 02 F6 | 	mov	local12, local11
0930c     13 3D 06 F1 | 	add	local12, #local01
09310     1C 37 02 F6 | 	mov	local09, local10
09314     03 36 66 F0 | 	shl	local09, #3
09318     35 00 00 FF 
0931c     0C E4 05 F1 | 	add	objptr, ##27148
09320     F2 36 02 F1 | 	add	local09, objptr
09324     1B 13 02 FB | 	rdlong	arg01, local09
09328     00 14 06 F6 | 	mov	arg02, #0
0932c     35 00 00 FF 
09330     0C E4 85 F1 | 	sub	objptr, ##27148
09334     10 BD B1 FD | 	call	#__system____builtin_atoi
09338     FD 3E 02 F6 | 	mov	local13, result1
0933c                 | 	'.live	local13
0933c                 | 	'.live	local12
0933c     00 3C 8E F9 | 	altd	local12, #0
09340     1F 3D 02 F6 | 	mov	local12, local13
09344     01 3A 06 F1 | 	add	local11, #1
09348     08 00 90 FD | 	jmp	#LR__0817
0934c                 | LR__0816
0934c                 | '     return(17)
0934c     11 FA 05 F6 | 	mov	result1, #17
09350     E4 03 90 FD | 	jmp	#LR__0835
09354                 | LR__0817
09354                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09354     1C 2D 02 F6 | 	mov	local04, local10
09358     01 2C 06 F1 | 	add	local04, #1
0935c     03 2C 66 F0 | 	shl	local04, #3
09360     35 00 00 FF 
09364     0C E4 05 F1 | 	add	objptr, ##27148
09368     F2 2C 02 F1 | 	add	local04, objptr
0936c     16 13 02 FB | 	rdlong	arg01, local04
09370     8E 01 00 FF 
09374     C0 15 06 F6 | 	mov	arg02, ##@LR__5517
09378     35 00 00 FF 
0937c     0C E4 85 F1 | 	sub	objptr, ##27148
09380     B8 88 B1 FD | 	call	#__system___string_cmp
09384     00 FA 0D F2 | 	cmp	result1, #0 wz
09388     3C 00 90 AD |  if_e	jmp	#LR__0818
0938c     1C 3F 02 F6 | 	mov	local13, local10
09390     01 3E 06 F1 | 	add	local13, #1
09394     03 3E 66 F0 | 	shl	local13, #3
09398     35 00 00 FF 
0939c     0C E4 05 F1 | 	add	objptr, ##27148
093a0     F2 3E 02 F1 | 	add	local13, objptr
093a4     1F 13 02 FB | 	rdlong	arg01, local13
093a8     8E 01 00 FF 
093ac     C2 15 06 F6 | 	mov	arg02, ##@LR__5518
093b0     35 00 00 FF 
093b4     0C E4 85 F1 | 	sub	objptr, ##27148
093b8     80 88 B1 FD | 	call	#__system___string_cmp
093bc     00 FA 0D F2 | 	cmp	result1, #0 wz
093c0     2C FA 05 56 |  if_ne	mov	result1, #44
093c4     70 03 90 5D |  if_ne	jmp	#LR__0835
093c8                 | LR__0818
093c8     02 38 06 F1 | 	add	local10, #2
093cc     1C 2D 02 F6 | 	mov	local04, local10
093d0     01 2C 86 F1 | 	sub	local04, #1
093d4     03 2C 66 F0 | 	shl	local04, #3
093d8     35 00 00 FF 
093dc     0C E4 05 F1 | 	add	objptr, ##27148
093e0     F2 2C 02 F1 | 	add	local04, objptr
093e4     16 13 02 FB | 	rdlong	arg01, local04
093e8     8E 01 00 FF 
093ec     C4 15 06 F6 | 	mov	arg02, ##@LR__5519
093f0     35 00 00 FF 
093f4     0C E4 85 F1 | 	sub	objptr, ##27148
093f8     40 88 B1 FD | 	call	#__system___string_cmp
093fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09400     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09404     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0815
09408                 | '   if m>3 then return 45
09408     04 3A 56 F2 | 	cmps	local11, #4 wc
0940c     2D FA 05 36 |  if_ae	mov	result1, #45
09410     24 03 90 3D |  if_ae	jmp	#LR__0835
09414     00 41 06 F6 | 	mov	local14, #256
09418     0C 42 06 F6 | 	mov	local15, #12
0941c                 | LR__0819
0941c                 | '   arraytype=array_no_type : esize=12
0941c                 | ' 1350 
0941c                 | '   if lparts(l).part$="as" then
0941c     1C 2D 02 F6 | 	mov	local04, local10
09420     03 2C 66 F0 | 	shl	local04, #3
09424     35 00 00 FF 
09428     0C E4 05 F1 | 	add	objptr, ##27148
0942c     F2 2C 02 F1 | 	add	local04, objptr
09430     16 13 02 FB | 	rdlong	arg01, local04
09434     8E 01 00 FF 
09438     C6 15 06 F6 | 	mov	arg02, ##@LR__5520
0943c     35 00 00 FF 
09440     0C E4 85 F1 | 	sub	objptr, ##27148
09444     F4 87 B1 FD | 	call	#__system___string_cmp
09448     00 FA 0D F2 | 	cmp	result1, #0 wz
0944c     E8 01 90 5D |  if_ne	jmp	#LR__0834
09450                 | '     select case lparts(l+1).part$
09450     1C 3D 02 F6 | 	mov	local12, local10
09454     01 3C 06 F1 | 	add	local12, #1
09458     03 3C 66 F0 | 	shl	local12, #3
0945c     35 00 00 FF 
09460     0C E4 05 F1 | 	add	objptr, ##27148
09464     F2 3C 02 F1 | 	add	local12, objptr
09468     1E 45 02 FB | 	rdlong	local16, local12
0946c     8E 01 00 FF 
09470     C9 15 06 F6 | 	mov	arg02, ##@LR__5521
09474     22 13 02 F6 | 	mov	arg01, local16
09478     35 00 00 FF 
0947c     0C E4 85 F1 | 	sub	objptr, ##27148
09480     B8 87 B1 FD | 	call	#__system___string_cmp
09484     00 FA 0D F2 | 	cmp	result1, #0 wz
09488     0C 01 90 AD |  if_e	jmp	#LR__0820
0948c     8E 01 00 FF 
09490     CE 15 06 F6 | 	mov	arg02, ##@LR__5522
09494     22 13 02 F6 | 	mov	arg01, local16
09498     A0 87 B1 FD | 	call	#__system___string_cmp
0949c     00 FA 0D F2 | 	cmp	result1, #0 wz
094a0     00 01 90 AD |  if_e	jmp	#LR__0821
094a4     8E 01 00 FF 
094a8     D4 15 06 F6 | 	mov	arg02, ##@LR__5523
094ac     22 13 02 F6 | 	mov	arg01, local16
094b0     88 87 B1 FD | 	call	#__system___string_cmp
094b4     00 FA 0D F2 | 	cmp	result1, #0 wz
094b8     F4 00 90 AD |  if_e	jmp	#LR__0822
094bc     8E 01 00 FF 
094c0     DA 15 06 F6 | 	mov	arg02, ##@LR__5524
094c4     22 13 02 F6 | 	mov	arg01, local16
094c8     70 87 B1 FD | 	call	#__system___string_cmp
094cc     00 FA 0D F2 | 	cmp	result1, #0 wz
094d0     E8 00 90 AD |  if_e	jmp	#LR__0823
094d4     8E 01 00 FF 
094d8     E1 15 06 F6 | 	mov	arg02, ##@LR__5525
094dc     22 13 02 F6 | 	mov	arg01, local16
094e0     58 87 B1 FD | 	call	#__system___string_cmp
094e4     00 FA 0D F2 | 	cmp	result1, #0 wz
094e8     DC 00 90 AD |  if_e	jmp	#LR__0824
094ec     8E 01 00 FF 
094f0     E6 15 06 F6 | 	mov	arg02, ##@LR__5526
094f4     22 13 02 F6 | 	mov	arg01, local16
094f8     40 87 B1 FD | 	call	#__system___string_cmp
094fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09500     D0 00 90 AD |  if_e	jmp	#LR__0825
09504     8E 01 00 FF 
09508     EE 15 06 F6 | 	mov	arg02, ##@LR__5527
0950c     22 13 02 F6 | 	mov	arg01, local16
09510     28 87 B1 FD | 	call	#__system___string_cmp
09514     00 FA 0D F2 | 	cmp	result1, #0 wz
09518     C4 00 90 AD |  if_e	jmp	#LR__0826
0951c     8E 01 00 FF 
09520     F4 15 06 F6 | 	mov	arg02, ##@LR__5528
09524     22 13 02 F6 | 	mov	arg01, local16
09528     10 87 B1 FD | 	call	#__system___string_cmp
0952c     00 FA 0D F2 | 	cmp	result1, #0 wz
09530     B8 00 90 AD |  if_e	jmp	#LR__0827
09534     8E 01 00 FF 
09538     FA 15 06 F6 | 	mov	arg02, ##@LR__5529
0953c     22 13 02 F6 | 	mov	arg01, local16
09540     F8 86 B1 FD | 	call	#__system___string_cmp
09544     00 FA 0D F2 | 	cmp	result1, #0 wz
09548     AC 00 90 AD |  if_e	jmp	#LR__0828
0954c     8F 01 00 FF 
09550     01 14 06 F6 | 	mov	arg02, ##@LR__5530
09554     22 13 02 F6 | 	mov	arg01, local16
09558     E0 86 B1 FD | 	call	#__system___string_cmp
0955c     00 FA 0D F2 | 	cmp	result1, #0 wz
09560     A0 00 90 AD |  if_e	jmp	#LR__0829
09564     8F 01 00 FF 
09568     08 14 06 F6 | 	mov	arg02, ##@LR__5531
0956c     22 13 02 F6 | 	mov	arg01, local16
09570     C8 86 B1 FD | 	call	#__system___string_cmp
09574     00 FA 0D F2 | 	cmp	result1, #0 wz
09578     94 00 90 AD |  if_e	jmp	#LR__0830
0957c     8F 01 00 FF 
09580     0F 14 06 F6 | 	mov	arg02, ##@LR__5532
09584     22 13 02 F6 | 	mov	arg01, local16
09588     B0 86 B1 FD | 	call	#__system___string_cmp
0958c     00 FA 0D F2 | 	cmp	result1, #0 wz
09590     88 00 90 AD |  if_e	jmp	#LR__0831
09594     90 00 90 FD | 	jmp	#LR__0832
09598                 | LR__0820
09598     01 41 06 F6 | 	mov	local14, #257
0959c     01 42 06 F6 | 	mov	local15, #1
095a0     94 00 90 FD | 	jmp	#LR__0834
095a4                 | LR__0821
095a4     02 41 06 F6 | 	mov	local14, #258
095a8     01 42 06 F6 | 	mov	local15, #1
095ac     88 00 90 FD | 	jmp	#LR__0834
095b0                 | LR__0822
095b0     03 41 06 F6 | 	mov	local14, #259
095b4     02 42 06 F6 | 	mov	local15, #2
095b8     7C 00 90 FD | 	jmp	#LR__0834
095bc                 | LR__0823
095bc     04 41 06 F6 | 	mov	local14, #260
095c0     02 42 06 F6 | 	mov	local15, #2
095c4     70 00 90 FD | 	jmp	#LR__0834
095c8                 | LR__0824
095c8     05 41 06 F6 | 	mov	local14, #261
095cc     04 42 06 F6 | 	mov	local15, #4
095d0     64 00 90 FD | 	jmp	#LR__0834
095d4                 | LR__0825
095d4     05 41 06 F6 | 	mov	local14, #261
095d8     04 42 06 F6 | 	mov	local15, #4
095dc     58 00 90 FD | 	jmp	#LR__0834
095e0                 | LR__0826
095e0     06 41 06 F6 | 	mov	local14, #262
095e4     04 42 06 F6 | 	mov	local15, #4
095e8     4C 00 90 FD | 	jmp	#LR__0834
095ec                 | LR__0827
095ec     07 41 06 F6 | 	mov	local14, #263
095f0     08 42 06 F6 | 	mov	local15, #8
095f4     40 00 90 FD | 	jmp	#LR__0834
095f8                 | LR__0828
095f8     08 41 06 F6 | 	mov	local14, #264
095fc     08 42 06 F6 | 	mov	local15, #8
09600     34 00 90 FD | 	jmp	#LR__0834
09604                 | LR__0829
09604     09 41 06 F6 | 	mov	local14, #265
09608     04 42 06 F6 | 	mov	local15, #4
0960c     28 00 90 FD | 	jmp	#LR__0834
09610                 | LR__0830
09610     0A 41 06 F6 | 	mov	local14, #266
09614     08 42 06 F6 | 	mov	local15, #8
09618     1C 00 90 FD | 	jmp	#LR__0834
0961c                 | LR__0831
0961c     0B 41 06 F6 | 	mov	local14, #267
09620     04 42 06 F6 | 	mov	local15, #4
09624     10 00 90 FD | 	jmp	#LR__0834
09628                 | LR__0832
09628     2F FA 05 F6 | 	mov	result1, #47
0962c     08 01 90 FD | 	jmp	#LR__0835
09630                 | LR__0833
09630                 | '   return 46
09630     2E FA 05 F6 | 	mov	result1, #46
09634     00 01 90 FD | 	jmp	#LR__0835
09638                 | LR__0834
09638     13 43 02 FD | 	qmul	local15, local01
0963c     18 32 62 FD | 	getqx	local07
09640     14 33 02 FD | 	qmul	local07, local02
09644     18 44 62 FD | 	getqx	local16
09648     15 45 02 FD | 	qmul	local16, local03
0964c     51 00 00 FF 
09650     AC E5 05 F1 | 	add	objptr, ##41900
09654     F2 46 02 FB | 	rdlong	local17, objptr
09658     20 15 02 F6 | 	mov	arg02, local14
0965c     18 44 62 FD | 	getqx	local16
09660     22 47 82 F1 | 	sub	local17, local16
09664     10 46 86 F1 | 	sub	local17, #16
09668     0F 46 26 F5 | 	andn	local17, #15
0966c     F2 46 62 FC | 	wrlong	local17, objptr
09670     51 00 00 FF 
09674     AC E5 85 F1 | 	sub	objptr, ##41900
09678     23 13 02 F6 | 	mov	arg01, local17
0967c     48 4E B1 FD | 	call	#_psdpoke
09680     23 13 02 F6 | 	mov	arg01, local17
09684     02 12 06 F1 | 	add	arg01, #2
09688     21 15 02 F6 | 	mov	arg02, local15
0968c     38 4E B1 FD | 	call	#_psdpoke
09690     23 13 02 F6 | 	mov	arg01, local17
09694     04 12 06 F1 | 	add	arg01, #4
09698     13 15 02 F6 | 	mov	arg02, local01
0969c     E0 4D B1 FD | 	call	#_pslpoke
096a0     23 13 02 F6 | 	mov	arg01, local17
096a4     08 12 06 F1 | 	add	arg01, #8
096a8     14 15 02 F6 | 	mov	arg02, local02
096ac     D0 4D B1 FD | 	call	#_pslpoke
096b0     23 13 02 F6 | 	mov	arg01, local17
096b4     0C 12 06 F1 | 	add	arg01, #12
096b8     15 15 02 F6 | 	mov	arg02, local03
096bc     C0 4D B1 FD | 	call	#_pslpoke
096c0     18 3D 02 F6 | 	mov	local12, local06
096c4     04 3C 66 F0 | 	shl	local12, #4
096c8     14 00 00 FF 
096cc     F8 E5 05 F1 | 	add	objptr, ##10744
096d0     F2 3C 02 F1 | 	add	local12, objptr
096d4     1E 2F 62 FC | 	wrlong	local05, local12
096d8     18 3D 02 F6 | 	mov	local12, local06
096dc     04 3C 66 F0 | 	shl	local12, #4
096e0     F2 3C 02 F1 | 	add	local12, objptr
096e4     04 3C 06 F1 | 	add	local12, #4
096e8     1E 47 62 FC | 	wrlong	local17, local12
096ec     18 3D 02 F6 | 	mov	local12, local06
096f0     04 3C 66 F0 | 	shl	local12, #4
096f4     F2 3C 02 F1 | 	add	local12, objptr
096f8     0C 3C 06 F1 | 	add	local12, #12
096fc     1E 41 62 FC | 	wrlong	local14, local12
09700                 | ' memtop=arrayptr
09700                 | ' psdpoke arrayptr,arraytype 
09700                 | ' psdpoke arrayptr+2,esize 
09700                 | ' pslpoke arrayptr+4,dims(0)
09700                 | ' pslpoke arrayptr+8,dims(1)
09700                 | ' pslpoke arrayptr+12,dims(2)
09700                 | ' variables(j).name=varname2$
09700                 | ' variables(j).value.uresult=arrayptr
09700                 | ' variables(j).vartype=arraytype
09700                 | ' if j=varnum then varnum+=1
09700     20 00 00 FF 
09704     10 E4 05 F1 | 	add	objptr, ##16400
09708     F2 32 02 FB | 	rdlong	local07, objptr
0970c     35 00 00 FF 
09710     08 E4 85 F1 | 	sub	objptr, ##27144
09714     19 31 0A F2 | 	cmp	local06, local07 wz
09718     35 00 00 AF 
0971c     08 E4 05 A1 |  if_e	add	objptr, ##27144
09720     F2 32 02 AB |  if_e	rdlong	local07, objptr
09724     01 32 06 A1 |  if_e	add	local07, #1
09728     F2 32 62 AC |  if_e	wrlong	local07, objptr
0972c     35 00 00 AF 
09730     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09734                 | ' return 0
09734     00 FA 05 F6 | 	mov	result1, #0
09738                 | LR__0835
09738     A7 F0 03 F6 | 	mov	ptra, fp
0973c     B2 00 A0 FD | 	call	#popregs_
09740                 | _compile_dim_ret
09740     2D 00 64 FD | 	ret
09744                 | 
09744                 | ' 
09744                 | ' '----- compile 'for' command. 
09744                 | ' 
09744                 | ' function compile_for() as ulong  
09744                 | _compile_for
09744     05 4A 05 F6 | 	mov	COUNT_, #5
09748     A8 00 A0 FD | 	call	#pushregs_
0974c                 | ' 
0974c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0974c     37 00 00 FF 
09750     44 E4 05 F1 | 	add	objptr, ##28228
09754     F2 14 02 FB | 	rdlong	arg02, objptr
09758     01 14 06 F1 | 	add	arg02, #1
0975c     03 14 66 F0 | 	shl	arg02, #3
09760     02 00 00 FF 
09764     38 E4 85 F1 | 	sub	objptr, ##1080
09768     F2 14 02 F1 | 	add	arg02, objptr
0976c     0A 13 02 FB | 	rdlong	arg01, arg02
09770     35 00 00 FF 
09774     0C E4 85 F1 | 	sub	objptr, ##27148
09778                 | ' 
09778                 | ' select case s
09778     8C 01 00 FF 
0977c     48 15 06 F6 | 	mov	arg02, ##@LR__5271
09780     B8 84 B1 FD | 	call	#__system___string_cmp
09784     00 FA 0D F2 | 	cmp	result1, #0 wz
09788     1B FA 05 A6 |  if_e	mov	result1, #27
0978c     00 FA 05 56 |  if_ne	mov	result1, #0
09790     00 FA 0D F2 | 	cmp	result1, #0 wz
09794     0C 00 90 AD |  if_e	jmp	#LR__0840
09798     05 12 06 F6 | 	mov	arg01, #5
0979c     F8 E3 BF FD | 	call	#_compile_immediate_assign
097a0     08 00 90 FD | 	jmp	#LR__0841
097a4                 | LR__0840
097a4     20 FA 05 F6 | 	mov	result1, #32
097a8     D0 02 90 FD | 	jmp	#LR__0845
097ac                 | LR__0841
097ac     4A 00 00 FF 
097b0     7C E4 05 F1 | 	add	objptr, ##38012
097b4     F2 14 02 FB | 	rdlong	arg02, objptr
097b8     0A 13 02 F6 | 	mov	arg01, arg02
097bc     01 12 86 F1 | 	sub	arg01, #1
097c0     09 2D 02 F6 | 	mov	local04, arg01
097c4     01 2C 66 F0 | 	shl	local04, #1
097c8     09 2D 02 F1 | 	add	local04, arg01
097cc     02 2C 66 F0 | 	shl	local04, #2
097d0     03 00 00 FF 
097d4     00 E4 85 F1 | 	sub	objptr, ##1536
097d8     F2 2C 02 F1 | 	add	local04, objptr
097dc     16 27 02 FB | 	rdlong	local01, local04
097e0     04 2C 06 F1 | 	add	local04, #4
097e4     16 2D 02 FB | 	rdlong	local04, local04
097e8     01 14 86 F1 | 	sub	arg02, #1
097ec     0A 13 02 F6 | 	mov	arg01, arg02
097f0     01 12 66 F0 | 	shl	arg01, #1
097f4     0A 13 02 F1 | 	add	arg01, arg02
097f8     02 12 66 F0 | 	shl	arg01, #2
097fc     F2 12 02 F1 | 	add	arg01, objptr
09800     08 12 06 F1 | 	add	arg01, #8
09804     09 15 02 FB | 	rdlong	arg02, arg01
09808     16 29 02 F6 | 	mov	local02, local04
0980c     0A 2B 02 F6 | 	mov	local03, arg02
09810                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09810     17 2A 0E F2 | 	cmp	local03, #23 wz
09814     47 00 00 FF 
09818     7C E4 85 F1 | 	sub	objptr, ##36476
0981c     22 FA 05 56 |  if_ne	mov	result1, #34
09820     58 02 90 5D |  if_ne	jmp	#LR__0845
09824     13 2F 02 F6 | 	mov	local05, local01
09828                 | ' varnum=t1.result.uresult
09828                 | ' if lparts(ct).part$<>"to" then return 33
09828     37 00 00 FF 
0982c     44 E4 05 F1 | 	add	objptr, ##28228
09830     F2 26 02 FB | 	rdlong	local01, objptr
09834     03 26 66 F0 | 	shl	local01, #3
09838     02 00 00 FF 
0983c     38 E4 85 F1 | 	sub	objptr, ##1080
09840     F2 26 02 F1 | 	add	local01, objptr
09844     13 13 02 FB | 	rdlong	arg01, local01
09848     8F 01 00 FF 
0984c     16 14 06 F6 | 	mov	arg02, ##@LR__5533
09850     35 00 00 FF 
09854     0C E4 85 F1 | 	sub	objptr, ##27148
09858     E0 83 B1 FD | 	call	#__system___string_cmp
0985c     00 FA 0D F2 | 	cmp	result1, #0 wz
09860     21 FA 05 56 |  if_ne	mov	result1, #33
09864     14 02 90 5D |  if_ne	jmp	#LR__0845
09868     37 00 00 FF 
0986c     44 E4 05 F1 | 	add	objptr, ##28228
09870     F2 2C 02 FB | 	rdlong	local04, objptr
09874     01 2C 06 F1 | 	add	local04, #1
09878     F2 2C 62 FC | 	wrlong	local04, objptr
0987c     37 00 00 FF 
09880     44 E4 85 F1 | 	sub	objptr, ##28228
09884     EC 07 B0 FD | 	call	#_expr
09888                 | ' ct+=1
09888                 | ' expr()  										' there is "to" value pushed on the stack
09888                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09888     37 00 00 FF 
0988c     44 E4 05 F1 | 	add	objptr, ##28228
09890     F2 2C 02 FB | 	rdlong	local04, objptr
09894     03 2C 66 F0 | 	shl	local04, #3
09898     02 00 00 FF 
0989c     38 E4 85 F1 | 	sub	objptr, ##1080
098a0     F2 2C 02 F1 | 	add	local04, objptr
098a4     16 13 02 FB | 	rdlong	arg01, local04
098a8     8F 01 00 FF 
098ac     19 14 06 F6 | 	mov	arg02, ##@LR__5534
098b0     35 00 00 FF 
098b4     0C E4 85 F1 | 	sub	objptr, ##27148
098b8     80 83 B1 FD | 	call	#__system___string_cmp
098bc     00 FA 0D F2 | 	cmp	result1, #0 wz
098c0     3C 00 90 AD |  if_e	jmp	#LR__0842
098c4     37 00 00 FF 
098c8     44 E4 05 F1 | 	add	objptr, ##28228
098cc     F2 2C 02 FB | 	rdlong	local04, objptr
098d0     03 2C 66 F0 | 	shl	local04, #3
098d4     02 00 00 FF 
098d8     38 E4 85 F1 | 	sub	objptr, ##1080
098dc     F2 2C 02 F1 | 	add	local04, objptr
098e0     16 13 02 FB | 	rdlong	arg01, local04
098e4     8F 01 00 FF 
098e8     1E 14 06 F6 | 	mov	arg02, ##@LR__5535
098ec     35 00 00 FF 
098f0     0C E4 85 F1 | 	sub	objptr, ##27148
098f4     44 83 B1 FD | 	call	#__system___string_cmp
098f8     00 FA 0D F2 | 	cmp	result1, #0 wz
098fc     24 00 90 5D |  if_ne	jmp	#LR__0843
09900                 | LR__0842
09900     37 00 00 FF 
09904     44 E4 05 F1 | 	add	objptr, ##28228
09908     F2 26 02 FB | 	rdlong	local01, objptr
0990c     01 26 06 F1 | 	add	local01, #1
09910     F2 26 62 FC | 	wrlong	local01, objptr
09914     37 00 00 FF 
09918     44 E4 85 F1 | 	sub	objptr, ##28228
0991c     54 07 B0 FD | 	call	#_expr
09920     78 00 90 FD | 	jmp	#LR__0844
09924                 | LR__0843
09924     4A 00 00 FF 
09928     7C E4 05 F1 | 	add	objptr, ##38012
0992c     F2 26 02 FB | 	rdlong	local01, objptr
09930     13 2D 02 F6 | 	mov	local04, local01
09934     01 2C 66 F0 | 	shl	local04, #1
09938     13 2D 02 F1 | 	add	local04, local01
0993c     02 2C 66 F0 | 	shl	local04, #2
09940     03 00 00 FF 
09944     00 E4 85 F1 | 	sub	objptr, ##1536
09948     F2 2C 02 F1 | 	add	local04, objptr
0994c     08 2C 06 F1 | 	add	local04, #8
09950     16 39 68 FC | 	wrlong	#28, local04
09954     03 00 00 FF 
09958     00 E4 05 F1 | 	add	objptr, ##1536
0995c     F2 26 02 FB | 	rdlong	local01, objptr
09960     13 2D 02 F6 | 	mov	local04, local01
09964     01 2C 66 F0 | 	shl	local04, #1
09968     13 2D 02 F1 | 	add	local04, local01
0996c     02 2C 66 F0 | 	shl	local04, #2
09970     03 00 00 FF 
09974     00 E4 85 F1 | 	sub	objptr, ##1536
09978     F2 2C 02 F1 | 	add	local04, objptr
0997c     16 03 68 FC | 	wrlong	#1, local04
09980     03 00 00 FF 
09984     00 E4 05 F1 | 	add	objptr, ##1536
09988     F2 26 02 FB | 	rdlong	local01, objptr
0998c     01 26 06 F1 | 	add	local01, #1
09990     F2 26 62 FC | 	wrlong	local01, objptr
09994     4A 00 00 FF 
09998     7C E4 85 F1 | 	sub	objptr, ##38012
0999c                 | LR__0844
0999c     4A 00 00 FF 
099a0     7C E4 05 F1 | 	add	objptr, ##38012
099a4     F2 26 02 FB | 	rdlong	local01, objptr
099a8     13 2D 02 F6 | 	mov	local04, local01
099ac     01 2C 66 F0 | 	shl	local04, #1
099b0     13 2D 02 F1 | 	add	local04, local01
099b4     02 2C 66 F0 | 	shl	local04, #2
099b8     03 00 00 FF 
099bc     00 E4 85 F1 | 	sub	objptr, ##1536
099c0     F2 2C 02 F1 | 	add	local04, objptr
099c4     08 2C 06 F1 | 	add	local04, #8
099c8     16 39 68 FC | 	wrlong	#28, local04
099cc     03 00 00 FF 
099d0     00 E4 05 F1 | 	add	objptr, ##1536
099d4     F2 26 02 FB | 	rdlong	local01, objptr
099d8     13 2D 02 F6 | 	mov	local04, local01
099dc     01 2C 66 F0 | 	shl	local04, #1
099e0     13 2D 02 F1 | 	add	local04, local01
099e4     02 2C 66 F0 | 	shl	local04, #2
099e8     03 00 00 FF 
099ec     00 E4 85 F1 | 	sub	objptr, ##1536
099f0     F2 2C 02 F1 | 	add	local04, objptr
099f4     16 2F 62 FC | 	wrlong	local05, local04
099f8     03 00 00 FF 
099fc     00 E4 05 F1 | 	add	objptr, ##1536
09a00     F2 2E 02 FB | 	rdlong	local05, objptr
09a04     01 2E 06 F1 | 	add	local05, #1
09a08     F2 2E 62 FC | 	wrlong	local05, objptr
09a0c     17 27 02 F6 | 	mov	local01, local05
09a10     01 26 66 F0 | 	shl	local01, #1
09a14     17 27 02 F1 | 	add	local01, local05
09a18     02 26 66 F0 | 	shl	local01, #2
09a1c     03 00 00 FF 
09a20     00 E4 85 F1 | 	sub	objptr, ##1536
09a24     F2 26 02 F1 | 	add	local01, objptr
09a28     08 26 06 F1 | 	add	local01, #8
09a2c     13 95 68 FC | 	wrlong	#74, local01
09a30     03 00 00 FF 
09a34     00 E4 05 F1 | 	add	objptr, ##1536
09a38     F2 2E 02 FB | 	rdlong	local05, objptr
09a3c     17 27 02 F6 | 	mov	local01, local05
09a40     01 26 66 F0 | 	shl	local01, #1
09a44     17 27 02 F1 | 	add	local01, local05
09a48     02 26 66 F0 | 	shl	local01, #2
09a4c     03 00 00 FF 
09a50     00 E4 85 F1 | 	sub	objptr, ##1536
09a54     F2 26 02 F1 | 	add	local01, objptr
09a58     13 01 68 FC | 	wrlong	#0, local01
09a5c     03 00 00 FF 
09a60     00 E4 05 F1 | 	add	objptr, ##1536
09a64     F2 2E 02 FB | 	rdlong	local05, objptr
09a68     01 2E 06 F1 | 	add	local05, #1
09a6c     F2 2E 62 FC | 	wrlong	local05, objptr
09a70     4A 00 00 FF 
09a74     7C E4 85 F1 | 	sub	objptr, ##38012
09a78                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09a78                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09a78                 | ' return 0
09a78     00 FA 05 F6 | 	mov	result1, #0
09a7c                 | LR__0845
09a7c     A7 F0 03 F6 | 	mov	ptra, fp
09a80     B2 00 A0 FD | 	call	#popregs_
09a84                 | _compile_for_ret
09a84     2D 00 64 FD | 	ret
09a88                 | 
09a88                 | ' 
09a88                 | ' '----- compile 'next' command. 
09a88                 | ' 
09a88                 | ' function compile_next() as ulong
09a88                 | _compile_next
09a88     04 4A 05 F6 | 	mov	COUNT_, #4
09a8c     A8 00 A0 FD | 	call	#pushregs_
09a90     37 00 00 FF 
09a94     44 E4 05 F1 | 	add	objptr, ##28228
09a98     F2 14 02 FB | 	rdlong	arg02, objptr
09a9c     03 14 66 F0 | 	shl	arg02, #3
09aa0     02 00 00 FF 
09aa4     38 E4 85 F1 | 	sub	objptr, ##1080
09aa8     F2 14 02 F1 | 	add	arg02, objptr
09aac     0A 27 02 FB | 	rdlong	local01, arg02
09ab0                 | ' 
09ab0                 | ' varname$=lparts(ct).part$ 
09ab0                 | ' if varnum=0 then return 35
09ab0     04 E4 85 F1 | 	sub	objptr, #4
09ab4     F2 14 0A FB | 	rdlong	arg02, objptr wz
09ab8     35 00 00 FF 
09abc     08 E4 85 F1 | 	sub	objptr, ##27144
09ac0     23 FA 05 A6 |  if_e	mov	result1, #35
09ac4     4C 01 90 AD |  if_e	jmp	#LR__0852
09ac8     01 28 66 F6 | 	neg	local02, #1
09acc                 | ' j=-1
09acc                 | ' for i=0 to varnum-1
09acc     00 2A 06 F6 | 	mov	local03, #0
09ad0     35 00 00 FF 
09ad4     08 E4 05 F1 | 	add	objptr, ##27144
09ad8     F2 2C 02 FB | 	rdlong	local04, objptr
09adc     35 00 00 FF 
09ae0     08 E4 85 F1 | 	sub	objptr, ##27144
09ae4                 | LR__0850
09ae4     16 2B 12 F2 | 	cmp	local03, local04 wc
09ae8     38 00 90 3D |  if_ae	jmp	#LR__0851
09aec                 | '   if variables(i).name=varname$ then j=i : exit
09aec     15 15 02 F6 | 	mov	arg02, local03
09af0     04 14 66 F0 | 	shl	arg02, #4
09af4     14 00 00 FF 
09af8     F8 E5 05 F1 | 	add	objptr, ##10744
09afc     F2 14 02 F1 | 	add	arg02, objptr
09b00     0A 13 02 FB | 	rdlong	arg01, arg02
09b04     13 15 02 F6 | 	mov	arg02, local01
09b08     14 00 00 FF 
09b0c     F8 E5 85 F1 | 	sub	objptr, ##10744
09b10     28 81 B1 FD | 	call	#__system___string_cmp
09b14     00 FA 0D F2 | 	cmp	result1, #0 wz
09b18     15 29 02 A6 |  if_e	mov	local02, local03
09b1c     01 2A 06 51 |  if_ne	add	local03, #1
09b20     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
09b24                 | LR__0851
09b24                 | ' if j=-1 then return 35
09b24     FF FF 7F FF 
09b28     FF 29 0E F2 | 	cmp	local02, ##-1 wz
09b2c     23 FA 05 A6 |  if_e	mov	result1, #35
09b30     E0 00 90 AD |  if_e	jmp	#LR__0852
09b34     4A 00 00 FF 
09b38     7C E4 05 F1 | 	add	objptr, ##38012
09b3c     F2 2C 02 FB | 	rdlong	local04, objptr
09b40     16 2B 02 F6 | 	mov	local03, local04
09b44     01 2A 66 F0 | 	shl	local03, #1
09b48     16 2B 02 F1 | 	add	local03, local04
09b4c     02 2A 66 F0 | 	shl	local03, #2
09b50     03 00 00 FF 
09b54     00 E4 85 F1 | 	sub	objptr, ##1536
09b58     F2 2A 02 F1 | 	add	local03, objptr
09b5c     08 2A 06 F1 | 	add	local03, #8
09b60     15 39 68 FC | 	wrlong	#28, local03
09b64     03 00 00 FF 
09b68     00 E4 05 F1 | 	add	objptr, ##1536
09b6c     F2 2C 02 FB | 	rdlong	local04, objptr
09b70     16 2B 02 F6 | 	mov	local03, local04
09b74     01 2A 66 F0 | 	shl	local03, #1
09b78     16 2B 02 F1 | 	add	local03, local04
09b7c     02 2A 66 F0 | 	shl	local03, #2
09b80     03 00 00 FF 
09b84     00 E4 85 F1 | 	sub	objptr, ##1536
09b88     F2 2A 02 F1 | 	add	local03, objptr
09b8c     15 29 62 FC | 	wrlong	local02, local03
09b90     03 00 00 FF 
09b94     00 E4 05 F1 | 	add	objptr, ##1536
09b98     F2 2C 02 FB | 	rdlong	local04, objptr
09b9c     01 2C 06 F1 | 	add	local04, #1
09ba0     F2 2C 62 FC | 	wrlong	local04, objptr
09ba4     16 2B 02 F6 | 	mov	local03, local04
09ba8     01 2A 66 F0 | 	shl	local03, #1
09bac     16 2B 02 F1 | 	add	local03, local04
09bb0     02 2A 66 F0 | 	shl	local03, #2
09bb4     03 00 00 FF 
09bb8     00 E4 85 F1 | 	sub	objptr, ##1536
09bbc     F2 2A 02 F1 | 	add	local03, objptr
09bc0     08 2A 06 F1 | 	add	local03, #8
09bc4     15 97 68 FC | 	wrlong	#75, local03
09bc8     03 00 00 FF 
09bcc     00 E4 05 F1 | 	add	objptr, ##1536
09bd0     F2 2C 02 FB | 	rdlong	local04, objptr
09bd4     16 2B 02 F6 | 	mov	local03, local04
09bd8     01 2A 66 F0 | 	shl	local03, #1
09bdc     16 2B 02 F1 | 	add	local03, local04
09be0     02 2A 66 F0 | 	shl	local03, #2
09be4     03 00 00 FF 
09be8     00 E4 85 F1 | 	sub	objptr, ##1536
09bec     F2 2A 02 F1 | 	add	local03, objptr
09bf0     15 01 68 FC | 	wrlong	#0, local03
09bf4     03 00 00 FF 
09bf8     00 E4 05 F1 | 	add	objptr, ##1536
09bfc     F2 2C 02 FB | 	rdlong	local04, objptr
09c00     01 2C 06 F1 | 	add	local04, #1
09c04     F2 2C 62 FC | 	wrlong	local04, objptr
09c08     4A 00 00 FF 
09c0c     7C E4 85 F1 | 	sub	objptr, ##38012
09c10                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09c10                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09c10                 | ' return 0
09c10     00 FA 05 F6 | 	mov	result1, #0
09c14                 | LR__0852
09c14     A7 F0 03 F6 | 	mov	ptra, fp
09c18     B2 00 A0 FD | 	call	#popregs_
09c1c                 | _compile_next_ret
09c1c     2D 00 64 FD | 	ret
09c20                 | 
09c20                 | ' 
09c20                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
09c20                 | ' 
09c20                 | ' function compile_gosub() as ulong
09c20                 | _compile_gosub
09c20     02 4A 05 F6 | 	mov	COUNT_, #2
09c24     A8 00 A0 FD | 	call	#pushregs_
09c28     4A 00 00 FF 
09c2c     7C E4 05 F1 | 	add	objptr, ##38012
09c30     F2 26 02 FB | 	rdlong	local01, objptr
09c34     13 29 02 F6 | 	mov	local02, local01
09c38     01 28 66 F0 | 	shl	local02, #1
09c3c     13 29 02 F1 | 	add	local02, local01
09c40     02 28 66 F0 | 	shl	local02, #2
09c44     03 00 00 FF 
09c48     00 E4 85 F1 | 	sub	objptr, ##1536
09c4c     F2 28 02 F1 | 	add	local02, objptr
09c50     08 28 06 F1 | 	add	local02, #8
09c54     14 53 69 FC | 	wrlong	#169, local02
09c58     03 00 00 FF 
09c5c     00 E4 05 F1 | 	add	objptr, ##1536
09c60     F2 28 02 FB | 	rdlong	local02, objptr
09c64     01 28 06 F1 | 	add	local02, #1
09c68     F2 28 62 FC | 	wrlong	local02, objptr
09c6c     4A 00 00 FF 
09c70     7C E4 85 F1 | 	sub	objptr, ##38012
09c74     0C 00 B0 FD | 	call	#_compile_goto
09c78                 | ' compiledline(lineptr).result_type=token_gosub
09c78                 | ' lineptr+=1
09c78                 | ' err=compile_goto()
09c78                 | ' return err
09c78     A7 F0 03 F6 | 	mov	ptra, fp
09c7c     B2 00 A0 FD | 	call	#popregs_
09c80                 | _compile_gosub_ret
09c80     2D 00 64 FD | 	ret
09c84                 | 
09c84                 | ' 
09c84                 | ' '----- compile 'goto' 
09c84                 | ' 
09c84                 | ' function compile_goto( ) as ulong
09c84                 | _compile_goto
09c84     03 4A 05 F6 | 	mov	COUNT_, #3
09c88     A8 00 A0 FD | 	call	#pushregs_
09c8c     34 F0 07 F1 | 	add	ptra, #52
09c90                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09c90     37 00 00 FF 
09c94     44 E4 05 F1 | 	add	objptr, ##28228
09c98     F2 16 02 FB | 	rdlong	arg03, objptr
09c9c     03 16 66 F0 | 	shl	arg03, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 16 02 F1 | 	add	arg03, objptr
09cac     04 16 06 F1 | 	add	arg03, #4
09cb0     0B 17 02 FB | 	rdlong	arg03, arg03
09cb4     01 00 00 FF 
09cb8     00 16 0E F2 | 	cmp	arg03, ##512 wz
09cbc     35 00 00 FF 
09cc0     0C E4 85 F1 | 	sub	objptr, ##27148
09cc4     CC 02 90 5D |  if_ne	jmp	#LR__0865
09cc8     37 00 00 FF 
09ccc     44 E4 05 F1 | 	add	objptr, ##28228
09cd0     F2 16 02 FB | 	rdlong	arg03, objptr
09cd4     01 16 06 F1 | 	add	arg03, #1
09cd8     03 16 66 F0 | 	shl	arg03, #3
09cdc     02 00 00 FF 
09ce0     38 E4 85 F1 | 	sub	objptr, ##1080
09ce4     F2 16 02 F1 | 	add	arg03, objptr
09ce8     04 16 06 F1 | 	add	arg03, #4
09cec     0B 17 02 FB | 	rdlong	arg03, arg03
09cf0     FE 17 0E F2 | 	cmp	arg03, #510 wz
09cf4     35 00 00 FF 
09cf8     0C E4 85 F1 | 	sub	objptr, ##27148
09cfc     94 02 90 5D |  if_ne	jmp	#LR__0865
09d00     37 00 00 FF 
09d04     44 E4 05 F1 | 	add	objptr, ##28228
09d08     F2 16 02 FB | 	rdlong	arg03, objptr
09d0c     03 16 66 F0 | 	shl	arg03, #3
09d10     02 00 00 FF 
09d14     38 E4 85 F1 | 	sub	objptr, ##1080
09d18     F2 16 02 F1 | 	add	arg03, objptr
09d1c     0B 13 02 FB | 	rdlong	arg01, arg03
09d20     00 14 06 F6 | 	mov	arg02, #0
09d24     35 00 00 FF 
09d28     0C E4 85 F1 | 	sub	objptr, ##27148
09d2c     18 B3 B1 FD | 	call	#__system____builtin_atoi
09d30     04 4E 05 F1 | 	add	fp, #4
09d34     A7 FA 61 FC | 	wrlong	result1, fp
09d38     4A 00 00 FF 
09d3c     7C E4 05 F1 | 	add	objptr, ##38012
09d40     F2 26 02 FB | 	rdlong	local01, objptr
09d44     13 29 02 F6 | 	mov	local02, local01
09d48     01 28 66 F0 | 	shl	local02, #1
09d4c     13 29 02 F1 | 	add	local02, local01
09d50     02 28 66 F0 | 	shl	local02, #2
09d54     03 00 00 FF 
09d58     00 E4 85 F1 | 	sub	objptr, ##1536
09d5c     F2 28 02 F1 | 	add	local02, objptr
09d60     08 28 06 F1 | 	add	local02, #8
09d64     14 9D 68 FC | 	wrlong	#78, local02
09d68     03 00 00 FF 
09d6c     0C E4 05 F1 | 	add	objptr, ##1548
09d70     F2 2A 02 FB | 	rdlong	local03, objptr
09d74     4A 00 00 FF 
09d78     88 E4 85 F1 | 	sub	objptr, ##38024
09d7c     04 4E 05 F1 | 	add	fp, #4
09d80     A7 2A 62 FC | 	wrlong	local03, fp
09d84     08 4E 85 F1 | 	sub	fp, #8
09d88                 | '   gotoline=val%(lparts(ct).part$) 
09d88                 | '   compiledline(lineptr).result_type=token_fast_goto
09d88                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09d88                 | '   do
09d88                 | LR__0860
09d88     10 4E 05 F1 | 	add	fp, #16
09d8c     A7 12 02 F6 | 	mov	arg01, fp
09d90     08 4E 85 F1 | 	sub	fp, #8
09d94     A7 14 02 FB | 	rdlong	arg02, fp
09d98     08 4E 85 F1 | 	sub	fp, #8
09d9c     18 16 06 F6 | 	mov	arg03, #24
09da0     0B 00 00 FF 
09da4     CC E4 05 F1 | 	add	objptr, ##5836
09da8     28 72 B1 FD | 	call	#_psram_spin2_read1
09dac     0B 00 00 FF 
09db0     CC E4 85 F1 | 	sub	objptr, ##5836
09db4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09db4                 | '     if gotoheader(0)<>$FFFFFFFF then
09db4     10 4E 05 F1 | 	add	fp, #16
09db8     A7 2A 02 FB | 	rdlong	local03, fp
09dbc     10 4E 85 F1 | 	sub	fp, #16
09dc0     FF FF 7F FF 
09dc4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
09dc8     24 00 90 AD |  if_e	jmp	#LR__0861
09dcc     08 4E 05 F1 | 	add	fp, #8
09dd0     A7 2A 02 FB | 	rdlong	local03, fp
09dd4     04 4E 05 F1 | 	add	fp, #4
09dd8     A7 2A 62 FC | 	wrlong	local03, fp
09ddc     18 4E 05 F1 | 	add	fp, #24
09de0     A7 2A 02 FB | 	rdlong	local03, fp
09de4     1C 4E 85 F1 | 	sub	fp, #28
09de8     A7 2A 62 FC | 	wrlong	local03, fp
09dec     08 4E 85 F1 | 	sub	fp, #8
09df0                 | LR__0861
09df0     24 4E 05 F1 | 	add	fp, #36
09df4     A7 2A 02 FB | 	rdlong	local03, fp
09df8     24 4E 85 F1 | 	sub	fp, #36
09dfc     FF FF 3F FF 
09e00     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
09e04     10 4E 05 51 |  if_ne	add	fp, #16
09e08     A7 26 02 5B |  if_ne	rdlong	local01, fp
09e0c     10 4E 85 51 |  if_ne	sub	fp, #16
09e10     FF FF 7F 5F 
09e14     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
09e18     1C 00 90 AD |  if_e	jmp	#LR__0862
09e1c     10 4E 05 F1 | 	add	fp, #16
09e20     A7 2A 02 FB | 	rdlong	local03, fp
09e24     0C 4E 85 F1 | 	sub	fp, #12
09e28     A7 28 02 FB | 	rdlong	local02, fp
09e2c     04 4E 85 F1 | 	sub	fp, #4
09e30     14 2B 0A F2 | 	cmp	local03, local02 wz
09e34     50 FF 9F 5D |  if_ne	jmp	#LR__0860
09e38                 | LR__0862
09e38                 | '   if gotoheader(0)=gotoline then
09e38     10 4E 05 F1 | 	add	fp, #16
09e3c     A7 2A 02 FB | 	rdlong	local03, fp
09e40     0C 4E 85 F1 | 	sub	fp, #12
09e44     A7 26 02 FB | 	rdlong	local01, fp
09e48     04 4E 85 F1 | 	sub	fp, #4
09e4c     13 2B 0A F2 | 	cmp	local03, local01 wz
09e50     7C 00 90 5D |  if_ne	jmp	#LR__0863
09e54     4A 00 00 FF 
09e58     7C E4 05 F1 | 	add	objptr, ##38012
09e5c     F2 26 02 FB | 	rdlong	local01, objptr
09e60     13 29 02 F6 | 	mov	local02, local01
09e64     01 28 66 F0 | 	shl	local02, #1
09e68     13 29 02 F1 | 	add	local02, local01
09e6c     02 28 66 F0 | 	shl	local02, #2
09e70     03 00 00 FF 
09e74     00 E4 85 F1 | 	sub	objptr, ##1536
09e78     F2 28 02 F1 | 	add	local02, objptr
09e7c     0C 4E 05 F1 | 	add	fp, #12
09e80     A7 2A 02 FB | 	rdlong	local03, fp
09e84     14 2B 62 FC | 	wrlong	local03, local02
09e88     03 00 00 FF 
09e8c     00 E4 05 F1 | 	add	objptr, ##1536
09e90     F2 26 02 FB | 	rdlong	local01, objptr
09e94     13 29 02 F6 | 	mov	local02, local01
09e98     01 28 66 F0 | 	shl	local02, #1
09e9c     13 29 02 F1 | 	add	local02, local01
09ea0     02 28 66 F0 | 	shl	local02, #2
09ea4     03 00 00 FF 
09ea8     00 E4 85 F1 | 	sub	objptr, ##1536
09eac     F2 28 02 F1 | 	add	local02, objptr
09eb0     08 4E 85 F1 | 	sub	fp, #8
09eb4     A7 2A 02 FB | 	rdlong	local03, fp
09eb8     04 4E 85 F1 | 	sub	fp, #4
09ebc     04 28 06 F1 | 	add	local02, #4
09ec0     14 2B 62 FC | 	wrlong	local03, local02
09ec4     47 00 00 FF 
09ec8     7C E4 85 F1 | 	sub	objptr, ##36476
09ecc     A4 00 90 FD | 	jmp	#LR__0864
09ed0                 | LR__0863
09ed0     4A 00 00 FF 
09ed4     7C E4 05 F1 | 	add	objptr, ##38012
09ed8     F2 26 02 FB | 	rdlong	local01, objptr
09edc     13 29 02 F6 | 	mov	local02, local01
09ee0     01 28 66 F0 | 	shl	local02, #1
09ee4     13 29 02 F1 | 	add	local02, local01
09ee8     02 28 66 F0 | 	shl	local02, #2
09eec     03 00 00 FF 
09ef0     00 E4 85 F1 | 	sub	objptr, ##1536
09ef4     F2 28 02 F1 | 	add	local02, objptr
09ef8     00 00 C0 FF 
09efc     14 01 68 FC | 	wrlong	##-2147483648, local02
09f00     03 00 00 FF 
09f04     00 E4 05 F1 | 	add	objptr, ##1536
09f08     F2 26 02 FB | 	rdlong	local01, objptr
09f0c     13 29 02 F6 | 	mov	local02, local01
09f10     01 28 66 F0 | 	shl	local02, #1
09f14     13 29 02 F1 | 	add	local02, local01
09f18     02 28 66 F0 | 	shl	local02, #2
09f1c     03 00 00 FF 
09f20     00 E4 85 F1 | 	sub	objptr, ##1536
09f24     F2 28 02 F1 | 	add	local02, objptr
09f28     04 4E 05 F1 | 	add	fp, #4
09f2c     A7 2A 02 FB | 	rdlong	local03, fp
09f30     04 4E 85 F1 | 	sub	fp, #4
09f34     04 28 06 F1 | 	add	local02, #4
09f38     14 2B 62 FC | 	wrlong	local03, local02
09f3c     03 00 00 FF 
09f40     00 E4 05 F1 | 	add	objptr, ##1536
09f44     F2 26 02 FB | 	rdlong	local01, objptr
09f48     13 29 02 F6 | 	mov	local02, local01
09f4c     01 28 66 F0 | 	shl	local02, #1
09f50     13 29 02 F1 | 	add	local02, local01
09f54     02 28 66 F0 | 	shl	local02, #2
09f58     03 00 00 FF 
09f5c     00 E4 85 F1 | 	sub	objptr, ##1536
09f60     F2 28 02 F1 | 	add	local02, objptr
09f64     08 28 06 F1 | 	add	local02, #8
09f68     14 A7 68 FC | 	wrlong	#83, local02
09f6c     47 00 00 FF 
09f70     7C E4 85 F1 | 	sub	objptr, ##36476
09f74                 | LR__0864
09f74     4A 00 00 FF 
09f78     7C E4 05 F1 | 	add	objptr, ##38012
09f7c     F2 2A 02 FB | 	rdlong	local03, objptr
09f80     01 2A 06 F1 | 	add	local03, #1
09f84     F2 2A 62 FC | 	wrlong	local03, objptr
09f88     4A 00 00 FF 
09f8c     7C E4 85 F1 | 	sub	objptr, ##38012
09f90     D0 00 90 FD | 	jmp	#LR__0866
09f94                 | LR__0865
09f94     DC 00 B0 FD | 	call	#_expr
09f98     30 4E 05 F1 | 	add	fp, #48
09f9c     A7 9E 68 FC | 	wrlong	#79, fp
09fa0     08 4E 85 F1 | 	sub	fp, #8
09fa4     A7 00 68 FC | 	wrlong	#0, fp
09fa8     04 4E 05 F1 | 	add	fp, #4
09fac     A7 2A 02 FB | 	rdlong	local03, fp
09fb0     04 4E 05 F1 | 	add	fp, #4
09fb4     A7 26 02 FB | 	rdlong	local01, fp
09fb8     30 4E 85 F1 | 	sub	fp, #48
09fbc     4A 00 00 FF 
09fc0     7C E4 05 F1 | 	add	objptr, ##38012
09fc4     F2 28 02 FB | 	rdlong	local02, objptr
09fc8     14 17 02 F6 | 	mov	arg03, local02
09fcc     01 16 66 F0 | 	shl	arg03, #1
09fd0     14 17 02 F1 | 	add	arg03, local02
09fd4     02 16 66 F0 | 	shl	arg03, #2
09fd8     03 00 00 FF 
09fdc     00 E4 85 F1 | 	sub	objptr, ##1536
09fe0     F2 16 02 F1 | 	add	arg03, objptr
09fe4     0B 01 68 FC | 	wrlong	#0, arg03
09fe8     03 00 00 FF 
09fec     00 E4 05 F1 | 	add	objptr, ##1536
09ff0     F2 28 02 FB | 	rdlong	local02, objptr
09ff4     14 17 02 F6 | 	mov	arg03, local02
09ff8     01 16 66 F0 | 	shl	arg03, #1
09ffc     14 17 02 F1 | 	add	arg03, local02
0a000     02 16 66 F0 | 	shl	arg03, #2
0a004     03 00 00 FF 
0a008     00 E4 85 F1 | 	sub	objptr, ##1536
0a00c     F2 16 02 F1 | 	add	arg03, objptr
0a010     04 16 06 F1 | 	add	arg03, #4
0a014     0B 2B 62 FC | 	wrlong	local03, arg03
0a018     03 00 00 FF 
0a01c     00 E4 05 F1 | 	add	objptr, ##1536
0a020     F2 2A 02 FB | 	rdlong	local03, objptr
0a024     15 29 02 F6 | 	mov	local02, local03
0a028     01 28 66 F0 | 	shl	local02, #1
0a02c     15 29 02 F1 | 	add	local02, local03
0a030     02 28 66 F0 | 	shl	local02, #2
0a034     03 00 00 FF 
0a038     00 E4 85 F1 | 	sub	objptr, ##1536
0a03c     F2 28 02 F1 | 	add	local02, objptr
0a040     08 28 06 F1 | 	add	local02, #8
0a044     14 27 62 FC | 	wrlong	local01, local02
0a048     03 00 00 FF 
0a04c     00 E4 05 F1 | 	add	objptr, ##1536
0a050     F2 2A 02 FB | 	rdlong	local03, objptr
0a054     01 2A 06 F1 | 	add	local03, #1
0a058     F2 2A 62 FC | 	wrlong	local03, objptr
0a05c     4A 00 00 FF 
0a060     7C E4 85 F1 | 	sub	objptr, ##38012
0a064                 | LR__0866
0a064                 | ' return 0
0a064     00 FA 05 F6 | 	mov	result1, #0
0a068     A7 F0 03 F6 | 	mov	ptra, fp
0a06c     B2 00 A0 FD | 	call	#popregs_
0a070                 | _compile_goto_ret
0a070     2D 00 64 FD | 	ret
0a074                 | 
0a074                 | ' 
0a074                 | ' 
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' 
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' '
0a074                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0a074                 | ' '
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' 
0a074                 | ' function expr() as ulong 
0a074                 | _expr
0a074     07 4A 05 F6 | 	mov	COUNT_, #7
0a078     A8 00 A0 FD | 	call	#pushregs_
0a07c                 | _expr_enter
0a07c     37 00 00 FF 
0a080     44 E4 05 F1 | 	add	objptr, ##28228
0a084     F2 2C 02 FB | 	rdlong	local04, objptr
0a088     03 2C 66 F0 | 	shl	local04, #3
0a08c     02 00 00 FF 
0a090     38 E4 85 F1 | 	sub	objptr, ##1080
0a094     F2 2C 02 F1 | 	add	local04, objptr
0a098     04 2C 06 F1 | 	add	local04, #4
0a09c     16 2F 02 FB | 	rdlong	local05, local04
0a0a0                 | ' 
0a0a0                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a0a0     FE 2F 0E F2 | 	cmp	local05, #510 wz
0a0a4     35 00 00 FF 
0a0a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a0ac     C4 00 90 5D |  if_ne	jmp	#LR__0870
0a0b0     1D 26 06 F6 | 	mov	local01, #29
0a0b4     FF 2A 06 F6 | 	mov	local03, #255
0a0b8     13 31 02 F6 | 	mov	local06, local01
0a0bc     14 33 02 F6 | 	mov	local07, local02
0a0c0     15 27 02 F6 | 	mov	local01, local03
0a0c4     4A 00 00 FF 
0a0c8     7C E4 05 F1 | 	add	objptr, ##38012
0a0cc     F2 2E 02 FB | 	rdlong	local05, objptr
0a0d0     17 2D 02 F6 | 	mov	local04, local05
0a0d4     01 2C 66 F0 | 	shl	local04, #1
0a0d8     17 2D 02 F1 | 	add	local04, local05
0a0dc     02 2C 66 F0 | 	shl	local04, #2
0a0e0     03 00 00 FF 
0a0e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a0e8     F2 2C 02 F1 | 	add	local04, objptr
0a0ec     16 31 62 FC | 	wrlong	local06, local04
0a0f0     03 00 00 FF 
0a0f4     00 E4 05 F1 | 	add	objptr, ##1536
0a0f8     F2 30 02 FB | 	rdlong	local06, objptr
0a0fc     18 2F 02 F6 | 	mov	local05, local06
0a100     01 2E 66 F0 | 	shl	local05, #1
0a104     18 2F 02 F1 | 	add	local05, local06
0a108     02 2E 66 F0 | 	shl	local05, #2
0a10c     03 00 00 FF 
0a110     00 E4 85 F1 | 	sub	objptr, ##1536
0a114     F2 2E 02 F1 | 	add	local05, objptr
0a118     04 2E 06 F1 | 	add	local05, #4
0a11c     17 33 62 FC | 	wrlong	local07, local05
0a120     03 00 00 FF 
0a124     00 E4 05 F1 | 	add	objptr, ##1536
0a128     F2 32 02 FB | 	rdlong	local07, objptr
0a12c     19 31 02 F6 | 	mov	local06, local07
0a130     01 30 66 F0 | 	shl	local06, #1
0a134     19 31 02 F1 | 	add	local06, local07
0a138     02 30 66 F0 | 	shl	local06, #2
0a13c     03 00 00 FF 
0a140     00 E4 85 F1 | 	sub	objptr, ##1536
0a144     F2 30 02 F1 | 	add	local06, objptr
0a148     08 30 06 F1 | 	add	local06, #8
0a14c     18 27 62 FC | 	wrlong	local01, local06
0a150     03 00 00 FF 
0a154     00 E4 05 F1 | 	add	objptr, ##1536
0a158     F2 30 02 FB | 	rdlong	local06, objptr
0a15c     01 30 06 F1 | 	add	local06, #1
0a160     F2 30 62 FC | 	wrlong	local06, objptr
0a164     4A 00 00 FF 
0a168     7C E4 85 F1 | 	sub	objptr, ##38012
0a16c     1D FA 05 F6 | 	mov	result1, #29
0a170     64 01 90 FD | 	jmp	#LR__0873
0a174                 | LR__0870
0a174     00 26 06 F6 | 	mov	local01, #0
0a178     68 01 B0 FD | 	call	#_addsub
0a17c                 | ' t3.result.uresult=0
0a17c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0a17c                 | ' if err>0 then return err
0a17c     01 FA 15 F2 | 	cmp	result1, #1 wc
0a180     54 01 90 3D |  if_ae	jmp	#LR__0873
0a184     37 00 00 FF 
0a188     44 E4 05 F1 | 	add	objptr, ##28228
0a18c     F2 2C 02 FB | 	rdlong	local04, objptr
0a190     03 2C 66 F0 | 	shl	local04, #3
0a194     02 00 00 FF 
0a198     38 E4 85 F1 | 	sub	objptr, ##1080
0a19c     F2 2C 02 F1 | 	add	local04, objptr
0a1a0     04 2C 06 F1 | 	add	local04, #4
0a1a4     16 2F 02 FB | 	rdlong	local05, local04
0a1a8                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0a1a8                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a1a8     35 00 00 FF 
0a1ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a1b0                 | LR__0871
0a1b0     1B 2E 0E F2 | 	cmp	local05, #27 wz
0a1b4     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0a1b8     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0a1bc     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0a1c0     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0a1c4     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0a1c8     08 01 90 5D |  if_ne	jmp	#LR__0872
0a1cc     37 00 00 FF 
0a1d0     44 E4 05 F1 | 	add	objptr, ##28228
0a1d4     F2 30 02 FB | 	rdlong	local06, objptr
0a1d8     01 30 06 F1 | 	add	local06, #1
0a1dc     F2 30 62 FC | 	wrlong	local06, objptr
0a1e0     37 00 00 FF 
0a1e4     44 E4 85 F1 | 	sub	objptr, ##28228
0a1e8     F8 00 B0 FD | 	call	#_addsub
0a1ec                 | '   ct+=1
0a1ec                 | '   err=addsub() : if err>0 then return err
0a1ec     01 FA 15 F2 | 	cmp	result1, #1 wc
0a1f0     E4 00 90 3D |  if_ae	jmp	#LR__0873
0a1f4     17 2B 02 F6 | 	mov	local03, local05
0a1f8     13 31 02 F6 | 	mov	local06, local01
0a1fc     14 33 02 F6 | 	mov	local07, local02
0a200     15 2F 02 F6 | 	mov	local05, local03
0a204     4A 00 00 FF 
0a208     7C E4 05 F1 | 	add	objptr, ##38012
0a20c     F2 2C 02 FB | 	rdlong	local04, objptr
0a210     16 FB 01 F6 | 	mov	result1, local04
0a214     01 FA 65 F0 | 	shl	result1, #1
0a218     16 FB 01 F1 | 	add	result1, local04
0a21c     02 FA 65 F0 | 	shl	result1, #2
0a220     03 00 00 FF 
0a224     00 E4 85 F1 | 	sub	objptr, ##1536
0a228     F2 FA 01 F1 | 	add	result1, objptr
0a22c     FD 30 62 FC | 	wrlong	local06, result1
0a230     03 00 00 FF 
0a234     00 E4 05 F1 | 	add	objptr, ##1536
0a238     F2 30 02 FB | 	rdlong	local06, objptr
0a23c     18 2D 02 F6 | 	mov	local04, local06
0a240     01 2C 66 F0 | 	shl	local04, #1
0a244     18 2D 02 F1 | 	add	local04, local06
0a248     02 2C 66 F0 | 	shl	local04, #2
0a24c     03 00 00 FF 
0a250     00 E4 85 F1 | 	sub	objptr, ##1536
0a254     F2 2C 02 F1 | 	add	local04, objptr
0a258     04 2C 06 F1 | 	add	local04, #4
0a25c     16 33 62 FC | 	wrlong	local07, local04
0a260     03 00 00 FF 
0a264     00 E4 05 F1 | 	add	objptr, ##1536
0a268     F2 32 02 FB | 	rdlong	local07, objptr
0a26c     19 31 02 F6 | 	mov	local06, local07
0a270     01 30 66 F0 | 	shl	local06, #1
0a274     19 31 02 F1 | 	add	local06, local07
0a278     02 30 66 F0 | 	shl	local06, #2
0a27c     03 00 00 FF 
0a280     00 E4 85 F1 | 	sub	objptr, ##1536
0a284     F2 30 02 F1 | 	add	local06, objptr
0a288     08 30 06 F1 | 	add	local06, #8
0a28c     18 2F 62 FC | 	wrlong	local05, local06
0a290     03 00 00 FF 
0a294     00 E4 05 F1 | 	add	objptr, ##1536
0a298     F2 30 02 FB | 	rdlong	local06, objptr
0a29c     01 30 06 F1 | 	add	local06, #1
0a2a0     F2 30 62 FC | 	wrlong	local06, objptr
0a2a4     13 00 00 FF 
0a2a8     38 E4 85 F1 | 	sub	objptr, ##9784
0a2ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a2b0     03 2C 66 F0 | 	shl	local04, #3
0a2b4     02 00 00 FF 
0a2b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a2bc     F2 2C 02 F1 | 	add	local04, objptr
0a2c0     04 2C 06 F1 | 	add	local04, #4
0a2c4     16 2F 02 FB | 	rdlong	local05, local04
0a2c8     35 00 00 FF 
0a2cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a2d0     DC FE 9F FD | 	jmp	#LR__0871
0a2d4                 | LR__0872
0a2d4                 | ' return 0  
0a2d4     00 FA 05 F6 | 	mov	result1, #0
0a2d8                 | LR__0873
0a2d8     A7 F0 03 F6 | 	mov	ptra, fp
0a2dc     B2 00 A0 FD | 	call	#popregs_
0a2e0                 | _expr_ret
0a2e0     2D 00 64 FD | 	ret
0a2e4                 | 
0a2e4                 | ' 
0a2e4                 | ' ' Second level operators : add, sub, logic
0a2e4                 | ' 
0a2e4                 | ' function addsub() as ulong
0a2e4                 | _addsub
0a2e4     07 4A 05 F6 | 	mov	COUNT_, #7
0a2e8     A8 00 A0 FD | 	call	#pushregs_
0a2ec                 | _addsub_enter
0a2ec     00 26 06 F6 | 	mov	local01, #0
0a2f0     60 01 B0 FD | 	call	#_muldiv
0a2f4                 | ' 
0a2f4                 | ' t3.result.uresult=0
0a2f4                 | ' err=muldiv() : if err>0 then return err           			 
0a2f4     01 FA 15 F2 | 	cmp	result1, #1 wc
0a2f8     4C 01 90 3D |  if_ae	jmp	#LR__0882
0a2fc     37 00 00 FF 
0a300     44 E4 05 F1 | 	add	objptr, ##28228
0a304     F2 2C 02 FB | 	rdlong	local04, objptr
0a308     03 2C 66 F0 | 	shl	local04, #3
0a30c     02 00 00 FF 
0a310     38 E4 85 F1 | 	sub	objptr, ##1080
0a314     F2 2C 02 F1 | 	add	local04, objptr
0a318     04 2C 06 F1 | 	add	local04, #4
0a31c     16 2F 02 FB | 	rdlong	local05, local04
0a320                 | ' op = lparts(ct).token				 
0a320                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a320     35 00 00 FF 
0a324     0C E4 85 F1 | 	sub	objptr, ##27148
0a328                 | LR__0880
0a328     01 2E 0E F2 | 	cmp	local05, #1 wz
0a32c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0a330     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0a334     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0a338     08 01 90 5D |  if_ne	jmp	#LR__0881
0a33c     37 00 00 FF 
0a340     44 E4 05 F1 | 	add	objptr, ##28228
0a344     F2 2C 02 FB | 	rdlong	local04, objptr
0a348     01 2C 06 F1 | 	add	local04, #1
0a34c     F2 2C 62 FC | 	wrlong	local04, objptr
0a350     37 00 00 FF 
0a354     44 E4 85 F1 | 	sub	objptr, ##28228
0a358     F8 00 B0 FD | 	call	#_muldiv
0a35c                 | '   ct+=1
0a35c                 | '   err=muldiv() : if err>0 then return err   
0a35c     01 FA 15 F2 | 	cmp	result1, #1 wc
0a360     E4 00 90 3D |  if_ae	jmp	#LR__0882
0a364     17 2B 02 F6 | 	mov	local03, local05
0a368     13 31 02 F6 | 	mov	local06, local01
0a36c     14 33 02 F6 | 	mov	local07, local02
0a370     15 2F 02 F6 | 	mov	local05, local03
0a374     4A 00 00 FF 
0a378     7C E4 05 F1 | 	add	objptr, ##38012
0a37c     F2 2C 02 FB | 	rdlong	local04, objptr
0a380     16 FB 01 F6 | 	mov	result1, local04
0a384     01 FA 65 F0 | 	shl	result1, #1
0a388     16 FB 01 F1 | 	add	result1, local04
0a38c     02 FA 65 F0 | 	shl	result1, #2
0a390     03 00 00 FF 
0a394     00 E4 85 F1 | 	sub	objptr, ##1536
0a398     F2 FA 01 F1 | 	add	result1, objptr
0a39c     FD 30 62 FC | 	wrlong	local06, result1
0a3a0     03 00 00 FF 
0a3a4     00 E4 05 F1 | 	add	objptr, ##1536
0a3a8     F2 30 02 FB | 	rdlong	local06, objptr
0a3ac     18 2D 02 F6 | 	mov	local04, local06
0a3b0     01 2C 66 F0 | 	shl	local04, #1
0a3b4     18 2D 02 F1 | 	add	local04, local06
0a3b8     02 2C 66 F0 | 	shl	local04, #2
0a3bc     03 00 00 FF 
0a3c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a3c4     F2 2C 02 F1 | 	add	local04, objptr
0a3c8     04 2C 06 F1 | 	add	local04, #4
0a3cc     16 33 62 FC | 	wrlong	local07, local04
0a3d0     03 00 00 FF 
0a3d4     00 E4 05 F1 | 	add	objptr, ##1536
0a3d8     F2 32 02 FB | 	rdlong	local07, objptr
0a3dc     19 31 02 F6 | 	mov	local06, local07
0a3e0     01 30 66 F0 | 	shl	local06, #1
0a3e4     19 31 02 F1 | 	add	local06, local07
0a3e8     02 30 66 F0 | 	shl	local06, #2
0a3ec     03 00 00 FF 
0a3f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a3f4     F2 30 02 F1 | 	add	local06, objptr
0a3f8     08 30 06 F1 | 	add	local06, #8
0a3fc     18 2F 62 FC | 	wrlong	local05, local06
0a400     03 00 00 FF 
0a404     00 E4 05 F1 | 	add	objptr, ##1536
0a408     F2 30 02 FB | 	rdlong	local06, objptr
0a40c     01 30 06 F1 | 	add	local06, #1
0a410     F2 30 62 FC | 	wrlong	local06, objptr
0a414     13 00 00 FF 
0a418     38 E4 85 F1 | 	sub	objptr, ##9784
0a41c     F2 2C 02 FB | 	rdlong	local04, objptr
0a420     03 2C 66 F0 | 	shl	local04, #3
0a424     02 00 00 FF 
0a428     38 E4 85 F1 | 	sub	objptr, ##1080
0a42c     F2 2C 02 F1 | 	add	local04, objptr
0a430     04 2C 06 F1 | 	add	local04, #4
0a434     16 2F 02 FB | 	rdlong	local05, local04
0a438     35 00 00 FF 
0a43c     0C E4 85 F1 | 	sub	objptr, ##27148
0a440     E4 FE 9F FD | 	jmp	#LR__0880
0a444                 | LR__0881
0a444                 | ' return 0
0a444     00 FA 05 F6 | 	mov	result1, #0
0a448                 | LR__0882
0a448     A7 F0 03 F6 | 	mov	ptra, fp
0a44c     B2 00 A0 FD | 	call	#popregs_
0a450                 | _addsub_ret
0a450     2D 00 64 FD | 	ret
0a454                 | 
0a454                 | ' 
0a454                 | ' ' Third level operators : mul,div,shift,power
0a454                 | ' 
0a454                 | ' function muldiv() as ulong
0a454                 | _muldiv
0a454     07 4A 05 F6 | 	mov	COUNT_, #7
0a458     A8 00 A0 FD | 	call	#pushregs_
0a45c                 | _muldiv_enter
0a45c     00 26 06 F6 | 	mov	local01, #0
0a460     6C 01 B0 FD | 	call	#_getvalue
0a464                 | ' 
0a464                 | ' t3.result.uresult=0
0a464                 | ' err=getvalue() : if err>0 then return err     
0a464     01 FA 15 F2 | 	cmp	result1, #1 wc
0a468     58 01 90 3D |  if_ae	jmp	#LR__0892
0a46c     37 00 00 FF 
0a470     44 E4 05 F1 | 	add	objptr, ##28228
0a474     F2 2C 02 FB | 	rdlong	local04, objptr
0a478     03 2C 66 F0 | 	shl	local04, #3
0a47c     02 00 00 FF 
0a480     38 E4 85 F1 | 	sub	objptr, ##1080
0a484     F2 2C 02 F1 | 	add	local04, objptr
0a488     04 2C 06 F1 | 	add	local04, #4
0a48c     16 2F 02 FB | 	rdlong	local05, local04
0a490                 | ' op = lparts(ct).token
0a490                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a490     35 00 00 FF 
0a494     0C E4 85 F1 | 	sub	objptr, ##27148
0a498                 | LR__0890
0a498     05 2E 0E F2 | 	cmp	local05, #5 wz
0a49c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0a4a0     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0a4a4     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0a4a8     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0a4ac     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0a4b0     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0a4b4     08 01 90 5D |  if_ne	jmp	#LR__0891
0a4b8     37 00 00 FF 
0a4bc     44 E4 05 F1 | 	add	objptr, ##28228
0a4c0     F2 2C 02 FB | 	rdlong	local04, objptr
0a4c4     01 2C 06 F1 | 	add	local04, #1
0a4c8     F2 2C 62 FC | 	wrlong	local04, objptr
0a4cc     37 00 00 FF 
0a4d0     44 E4 85 F1 | 	sub	objptr, ##28228
0a4d4     F8 00 B0 FD | 	call	#_getvalue
0a4d8                 | '   ct+=1
0a4d8                 | '   err=getvalue() :if err>0 then return err   
0a4d8     01 FA 15 F2 | 	cmp	result1, #1 wc
0a4dc     E4 00 90 3D |  if_ae	jmp	#LR__0892
0a4e0     17 2B 02 F6 | 	mov	local03, local05
0a4e4     13 31 02 F6 | 	mov	local06, local01
0a4e8     14 33 02 F6 | 	mov	local07, local02
0a4ec     15 2F 02 F6 | 	mov	local05, local03
0a4f0     4A 00 00 FF 
0a4f4     7C E4 05 F1 | 	add	objptr, ##38012
0a4f8     F2 2C 02 FB | 	rdlong	local04, objptr
0a4fc     16 FB 01 F6 | 	mov	result1, local04
0a500     01 FA 65 F0 | 	shl	result1, #1
0a504     16 FB 01 F1 | 	add	result1, local04
0a508     02 FA 65 F0 | 	shl	result1, #2
0a50c     03 00 00 FF 
0a510     00 E4 85 F1 | 	sub	objptr, ##1536
0a514     F2 FA 01 F1 | 	add	result1, objptr
0a518     FD 30 62 FC | 	wrlong	local06, result1
0a51c     03 00 00 FF 
0a520     00 E4 05 F1 | 	add	objptr, ##1536
0a524     F2 30 02 FB | 	rdlong	local06, objptr
0a528     18 2D 02 F6 | 	mov	local04, local06
0a52c     01 2C 66 F0 | 	shl	local04, #1
0a530     18 2D 02 F1 | 	add	local04, local06
0a534     02 2C 66 F0 | 	shl	local04, #2
0a538     03 00 00 FF 
0a53c     00 E4 85 F1 | 	sub	objptr, ##1536
0a540     F2 2C 02 F1 | 	add	local04, objptr
0a544     04 2C 06 F1 | 	add	local04, #4
0a548     16 33 62 FC | 	wrlong	local07, local04
0a54c     03 00 00 FF 
0a550     00 E4 05 F1 | 	add	objptr, ##1536
0a554     F2 32 02 FB | 	rdlong	local07, objptr
0a558     19 31 02 F6 | 	mov	local06, local07
0a55c     01 30 66 F0 | 	shl	local06, #1
0a560     19 31 02 F1 | 	add	local06, local07
0a564     02 30 66 F0 | 	shl	local06, #2
0a568     03 00 00 FF 
0a56c     00 E4 85 F1 | 	sub	objptr, ##1536
0a570     F2 30 02 F1 | 	add	local06, objptr
0a574     08 30 06 F1 | 	add	local06, #8
0a578     18 2F 62 FC | 	wrlong	local05, local06
0a57c     03 00 00 FF 
0a580     00 E4 05 F1 | 	add	objptr, ##1536
0a584     F2 30 02 FB | 	rdlong	local06, objptr
0a588     01 30 06 F1 | 	add	local06, #1
0a58c     F2 30 62 FC | 	wrlong	local06, objptr
0a590     13 00 00 FF 
0a594     38 E4 85 F1 | 	sub	objptr, ##9784
0a598     F2 2C 02 FB | 	rdlong	local04, objptr
0a59c     03 2C 66 F0 | 	shl	local04, #3
0a5a0     02 00 00 FF 
0a5a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5a8     F2 2C 02 F1 | 	add	local04, objptr
0a5ac     04 2C 06 F1 | 	add	local04, #4
0a5b0     16 2F 02 FB | 	rdlong	local05, local04
0a5b4     35 00 00 FF 
0a5b8     0C E4 85 F1 | 	sub	objptr, ##27148
0a5bc     D8 FE 9F FD | 	jmp	#LR__0890
0a5c0                 | LR__0891
0a5c0                 | ' return 0
0a5c0     00 FA 05 F6 | 	mov	result1, #0
0a5c4                 | LR__0892
0a5c4     A7 F0 03 F6 | 	mov	ptra, fp
0a5c8     B2 00 A0 FD | 	call	#popregs_
0a5cc                 | _muldiv_ret
0a5cc     2D 00 64 FD | 	ret
0a5d0                 | 
0a5d0                 | ' 
0a5d0                 | ' ' Get a value for operations
0a5d0                 | ' 
0a5d0                 | ' function getvalue()  as ulong
0a5d0                 | _getvalue
0a5d0     0B 4A 05 F6 | 	mov	COUNT_, #11
0a5d4     A8 00 A0 FD | 	call	#pushregs_
0a5d8                 | _getvalue_enter
0a5d8     01 2C 06 F6 | 	mov	local04, #1
0a5dc     00 26 06 F6 | 	mov	local01, #0
0a5e0     1D 2A 06 F6 | 	mov	local03, #29
0a5e4     37 00 00 FF 
0a5e8     44 E4 05 F1 | 	add	objptr, ##28228
0a5ec     F2 16 02 FB | 	rdlong	arg03, objptr
0a5f0     03 16 66 F0 | 	shl	arg03, #3
0a5f4     02 00 00 FF 
0a5f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a5fc     F2 16 02 F1 | 	add	arg03, objptr
0a600     04 16 06 F1 | 	add	arg03, #4
0a604     0B 2F 02 FB | 	rdlong	local05, arg03
0a608                 | ' 
0a608                 | ' m=1											' for negative numbers
0a608                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a608                 | ' op=lparts(ct).token
0a608                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a608     02 2E 0E F2 | 	cmp	local05, #2 wz
0a60c     35 00 00 FF 
0a610     0C E4 85 F1 | 	sub	objptr, ##27148
0a614     38 00 90 5D |  if_ne	jmp	#LR__0900
0a618     01 2C 66 F6 | 	neg	local04, #1
0a61c     37 00 00 FF 
0a620     44 E4 05 F1 | 	add	objptr, ##28228
0a624     F2 2E 02 FB | 	rdlong	local05, objptr
0a628     01 2E 06 F1 | 	add	local05, #1
0a62c     F2 2E 62 FC | 	wrlong	local05, objptr
0a630     03 2E 66 F0 | 	shl	local05, #3
0a634     02 00 00 FF 
0a638     38 E4 85 F1 | 	sub	objptr, ##1080
0a63c     F2 2E 02 F1 | 	add	local05, objptr
0a640     04 2E 06 F1 | 	add	local05, #4
0a644     17 2F 02 FB | 	rdlong	local05, local05
0a648     35 00 00 FF 
0a64c     0C E4 85 F1 | 	sub	objptr, ##27148
0a650                 | LR__0900
0a650                 | ' select case op
0a650     01 00 00 FF 
0a654     00 2E 0E F2 | 	cmp	local05, ##512 wz
0a658     44 00 90 AD |  if_e	jmp	#LR__0901
0a65c     01 00 00 FF 
0a660     01 2E 0E F2 | 	cmp	local05, ##513 wz
0a664     90 01 90 AD |  if_e	jmp	#LR__0904
0a668     01 00 00 FF 
0a66c     02 2E 0E F2 | 	cmp	local05, ##514 wz
0a670     44 04 90 AD |  if_e	jmp	#LR__0911
0a674     01 00 00 FF 
0a678     03 2E 0E F2 | 	cmp	local05, ##515 wz
0a67c     A8 05 90 AD |  if_e	jmp	#LR__0914
0a680     2C 2E 0E F2 | 	cmp	local05, #44 wz
0a684     78 07 90 AD |  if_e	jmp	#LR__0919
0a688     01 00 00 FF 
0a68c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0a690     70 08 90 AD |  if_e	jmp	#LR__0920
0a694     15 2E 0E F2 | 	cmp	local05, #21 wz
0a698     98 08 90 AD |  if_e	jmp	#LR__0921
0a69c     10 09 90 FD | 	jmp	#LR__0922
0a6a0                 | LR__0901
0a6a0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a6a0     01 2C 0E F2 | 	cmp	local04, #1 wz
0a6a4     3C 00 90 5D |  if_ne	jmp	#LR__0902
0a6a8     37 00 00 FF 
0a6ac     44 E4 05 F1 | 	add	objptr, ##28228
0a6b0     F2 2E 02 FB | 	rdlong	local05, objptr
0a6b4     03 2E 66 F0 | 	shl	local05, #3
0a6b8     02 00 00 FF 
0a6bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a6c0     F2 2E 02 F1 | 	add	local05, objptr
0a6c4     17 13 02 FB | 	rdlong	arg01, local05
0a6c8     00 14 06 F6 | 	mov	arg02, #0
0a6cc     35 00 00 FF 
0a6d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a6d4     70 A9 B1 FD | 	call	#__system____builtin_atoi
0a6d8     FD 2C 02 FD | 	qmul	local04, result1
0a6dc     18 26 62 FD | 	getqx	local01
0a6e0     1C 2A 06 F6 | 	mov	local03, #28
0a6e4                 | LR__0902
0a6e4                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a6e4     FF FF 7F FF 
0a6e8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0a6ec     3C 00 90 5D |  if_ne	jmp	#LR__0903
0a6f0     37 00 00 FF 
0a6f4     44 E4 05 F1 | 	add	objptr, ##28228
0a6f8     F2 2E 02 FB | 	rdlong	local05, objptr
0a6fc     03 2E 66 F0 | 	shl	local05, #3
0a700     02 00 00 FF 
0a704     38 E4 85 F1 | 	sub	objptr, ##1080
0a708     F2 2E 02 F1 | 	add	local05, objptr
0a70c     17 13 02 FB | 	rdlong	arg01, local05
0a710     00 14 06 F6 | 	mov	arg02, #0
0a714     35 00 00 FF 
0a718     0C E4 85 F1 | 	sub	objptr, ##27148
0a71c     28 A9 B1 FD | 	call	#__system____builtin_atoi
0a720     FD 2C 02 FD | 	qmul	local04, result1
0a724     18 26 62 FD | 	getqx	local01
0a728     1C 2A 06 F6 | 	mov	local03, #28
0a72c                 | LR__0903
0a72c     13 31 02 F6 | 	mov	local06, local01
0a730     14 33 02 F6 | 	mov	local07, local02
0a734     15 2F 02 F6 | 	mov	local05, local03
0a738     4A 00 00 FF 
0a73c     7C E4 05 F1 | 	add	objptr, ##38012
0a740     F2 26 02 FB | 	rdlong	local01, objptr
0a744     13 2D 02 F6 | 	mov	local04, local01
0a748     01 2C 66 F0 | 	shl	local04, #1
0a74c     13 2D 02 F1 | 	add	local04, local01
0a750     02 2C 66 F0 | 	shl	local04, #2
0a754     03 00 00 FF 
0a758     00 E4 85 F1 | 	sub	objptr, ##1536
0a75c     F2 2C 02 F1 | 	add	local04, objptr
0a760     16 31 62 FC | 	wrlong	local06, local04
0a764     03 00 00 FF 
0a768     00 E4 05 F1 | 	add	objptr, ##1536
0a76c     F2 30 02 FB | 	rdlong	local06, objptr
0a770     18 27 02 F6 | 	mov	local01, local06
0a774     01 26 66 F0 | 	shl	local01, #1
0a778     18 27 02 F1 | 	add	local01, local06
0a77c     02 26 66 F0 | 	shl	local01, #2
0a780     03 00 00 FF 
0a784     00 E4 85 F1 | 	sub	objptr, ##1536
0a788     F2 26 02 F1 | 	add	local01, objptr
0a78c     04 26 06 F1 | 	add	local01, #4
0a790     13 33 62 FC | 	wrlong	local07, local01
0a794     03 00 00 FF 
0a798     00 E4 05 F1 | 	add	objptr, ##1536
0a79c     F2 32 02 FB | 	rdlong	local07, objptr
0a7a0     19 31 02 F6 | 	mov	local06, local07
0a7a4     01 30 66 F0 | 	shl	local06, #1
0a7a8     19 31 02 F1 | 	add	local06, local07
0a7ac     02 30 66 F0 | 	shl	local06, #2
0a7b0     03 00 00 FF 
0a7b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7b8     F2 30 02 F1 | 	add	local06, objptr
0a7bc     08 30 06 F1 | 	add	local06, #8
0a7c0     18 2F 62 FC | 	wrlong	local05, local06
0a7c4     03 00 00 FF 
0a7c8     00 E4 05 F1 | 	add	objptr, ##1536
0a7cc     F2 30 02 FB | 	rdlong	local06, objptr
0a7d0     01 30 06 F1 | 	add	local06, #1
0a7d4     F2 30 62 FC | 	wrlong	local06, objptr
0a7d8     13 00 00 FF 
0a7dc     38 E4 85 F1 | 	sub	objptr, ##9784
0a7e0     F2 30 02 FB | 	rdlong	local06, objptr
0a7e4     01 30 06 F1 | 	add	local06, #1
0a7e8     F2 30 62 FC | 	wrlong	local06, objptr
0a7ec     37 00 00 FF 
0a7f0     44 E4 85 F1 | 	sub	objptr, ##28228
0a7f4     E4 07 90 FD | 	jmp	#LR__0923
0a7f8                 | LR__0904
0a7f8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a7f8     37 00 00 FF 
0a7fc     44 E4 05 F1 | 	add	objptr, ##28228
0a800     F2 16 02 FB | 	rdlong	arg03, objptr
0a804     03 16 66 F0 | 	shl	arg03, #3
0a808     02 00 00 FF 
0a80c     38 E4 85 F1 | 	sub	objptr, ##1080
0a810     F2 16 02 F1 | 	add	arg03, objptr
0a814     0B 13 02 FB | 	rdlong	arg01, arg03
0a818     01 14 06 F6 | 	mov	arg02, #1
0a81c     35 00 00 FF 
0a820     0C E4 85 F1 | 	sub	objptr, ##27148
0a824     68 94 B1 FD | 	call	#__system__Left_S
0a828     FD 12 02 F6 | 	mov	arg01, result1
0a82c     8F 01 00 FF 
0a830     21 14 06 F6 | 	mov	arg02, ##@LR__5536
0a834     04 74 B1 FD | 	call	#__system___string_cmp
0a838     00 FA 0D F2 | 	cmp	result1, #0 wz
0a83c     94 00 90 5D |  if_ne	jmp	#LR__0907
0a840     37 00 00 FF 
0a844     44 E4 05 F1 | 	add	objptr, ##28228
0a848     F2 32 02 FB | 	rdlong	local07, objptr
0a84c     19 31 02 F6 | 	mov	local06, local07
0a850     03 30 66 F0 | 	shl	local06, #3
0a854     02 00 00 FF 
0a858     38 E4 85 F1 | 	sub	objptr, ##1080
0a85c     F2 30 02 F1 | 	add	local06, objptr
0a860     8F 01 00 FF 
0a864     23 2E 06 F6 | 	mov	local05, ##@LR__5537
0a868     03 32 66 F0 | 	shl	local07, #3
0a86c     F2 32 02 F1 | 	add	local07, objptr
0a870     19 33 02 FB | 	rdlong	local07, local07
0a874     02 00 00 FF 
0a878     38 E4 05 F1 | 	add	objptr, ##1080
0a87c     F2 26 02 FB | 	rdlong	local01, objptr
0a880     03 26 66 F0 | 	shl	local01, #3
0a884     02 00 00 FF 
0a888     38 E4 85 F1 | 	sub	objptr, ##1080
0a88c     F2 26 02 F1 | 	add	local01, objptr
0a890     13 13 02 FB | 	rdlong	arg01, local01
0a894     35 00 00 FF 
0a898     0C E4 85 F1 | 	sub	objptr, ##27148
0a89c     09 35 02 F6 | 	mov	local08, arg01
0a8a0     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a8a4                 | LR__0905
0a8a4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0a8a8     01 34 06 51 |  if_ne	add	local08, #1
0a8ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a8b0                 | LR__0906
0a8b0     09 35 82 F1 | 	sub	local08, arg01
0a8b4     1A 15 02 F6 | 	mov	arg02, local08
0a8b8     01 14 86 F1 | 	sub	arg02, #1
0a8bc     19 13 02 F6 | 	mov	arg01, local07
0a8c0     54 94 B1 FD | 	call	#__system__Right_S
0a8c4     FD 14 02 F6 | 	mov	arg02, result1
0a8c8     17 13 02 F6 | 	mov	arg01, local05
0a8cc     A0 73 B1 FD | 	call	#__system___string_concat
0a8d0     18 FB 61 FC | 	wrlong	result1, local06
0a8d4                 | LR__0907
0a8d4                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a8d4     37 00 00 FF 
0a8d8     44 E4 05 F1 | 	add	objptr, ##28228
0a8dc     F2 16 02 FB | 	rdlong	arg03, objptr
0a8e0     03 16 66 F0 | 	shl	arg03, #3
0a8e4     02 00 00 FF 
0a8e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8ec     F2 16 02 F1 | 	add	arg03, objptr
0a8f0     0B 13 02 FB | 	rdlong	arg01, arg03
0a8f4     01 14 06 F6 | 	mov	arg02, #1
0a8f8     35 00 00 FF 
0a8fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a900     8C 93 B1 FD | 	call	#__system__Left_S
0a904     FD 12 02 F6 | 	mov	arg01, result1
0a908     8F 01 00 FF 
0a90c     26 14 06 F6 | 	mov	arg02, ##@LR__5538
0a910     28 73 B1 FD | 	call	#__system___string_cmp
0a914     00 FA 0D F2 | 	cmp	result1, #0 wz
0a918     94 00 90 5D |  if_ne	jmp	#LR__0910
0a91c     37 00 00 FF 
0a920     44 E4 05 F1 | 	add	objptr, ##28228
0a924     F2 32 02 FB | 	rdlong	local07, objptr
0a928     19 31 02 F6 | 	mov	local06, local07
0a92c     03 30 66 F0 | 	shl	local06, #3
0a930     02 00 00 FF 
0a934     38 E4 85 F1 | 	sub	objptr, ##1080
0a938     F2 30 02 F1 | 	add	local06, objptr
0a93c     8F 01 00 FF 
0a940     28 2E 06 F6 | 	mov	local05, ##@LR__5539
0a944     03 32 66 F0 | 	shl	local07, #3
0a948     F2 32 02 F1 | 	add	local07, objptr
0a94c     19 33 02 FB | 	rdlong	local07, local07
0a950     02 00 00 FF 
0a954     38 E4 05 F1 | 	add	objptr, ##1080
0a958     F2 26 02 FB | 	rdlong	local01, objptr
0a95c     03 26 66 F0 | 	shl	local01, #3
0a960     02 00 00 FF 
0a964     38 E4 85 F1 | 	sub	objptr, ##1080
0a968     F2 26 02 F1 | 	add	local01, objptr
0a96c     13 13 02 FB | 	rdlong	arg01, local01
0a970     35 00 00 FF 
0a974     0C E4 85 F1 | 	sub	objptr, ##27148
0a978     09 35 02 F6 | 	mov	local08, arg01
0a97c     97 06 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0a980                 | LR__0908
0a980     1A FB C9 FA | 	rdbyte	result1, local08 wz
0a984     01 34 06 51 |  if_ne	add	local08, #1
0a988     F4 FF 9F 5D |  if_ne	jmp	#LR__0908
0a98c                 | LR__0909
0a98c     09 35 82 F1 | 	sub	local08, arg01
0a990     1A 15 02 F6 | 	mov	arg02, local08
0a994     01 14 86 F1 | 	sub	arg02, #1
0a998     19 13 02 F6 | 	mov	arg01, local07
0a99c     78 93 B1 FD | 	call	#__system__Right_S
0a9a0     FD 14 02 F6 | 	mov	arg02, result1
0a9a4     17 13 02 F6 | 	mov	arg01, local05
0a9a8     C4 72 B1 FD | 	call	#__system___string_concat
0a9ac     18 FB 61 FC | 	wrlong	result1, local06
0a9b0                 | LR__0910
0a9b0     37 00 00 FF 
0a9b4     44 E4 05 F1 | 	add	objptr, ##28228
0a9b8     F2 30 02 FB | 	rdlong	local06, objptr
0a9bc     03 30 66 F0 | 	shl	local06, #3
0a9c0     02 00 00 FF 
0a9c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c8     F2 30 02 F1 | 	add	local06, objptr
0a9cc     18 13 02 FB | 	rdlong	arg01, local06
0a9d0     00 14 06 F6 | 	mov	arg02, #0
0a9d4     35 00 00 FF 
0a9d8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9dc     68 A6 B1 FD | 	call	#__system____builtin_atoi
0a9e0     FD 2C 02 FD | 	qmul	local04, result1
0a9e4     4A 00 00 FF 
0a9e8     7C E4 05 F1 | 	add	objptr, ##38012
0a9ec     F2 30 02 FB | 	rdlong	local06, objptr
0a9f0     18 37 02 F6 | 	mov	local09, local06
0a9f4     01 36 66 F0 | 	shl	local09, #1
0a9f8     18 37 02 F1 | 	add	local09, local06
0a9fc     02 36 66 F0 | 	shl	local09, #2
0aa00     03 00 00 FF 
0aa04     00 E4 85 F1 | 	sub	objptr, ##1536
0aa08     F2 36 02 F1 | 	add	local09, objptr
0aa0c     03 00 00 FF 
0aa10     00 E4 05 F1 | 	add	objptr, ##1536
0aa14     18 26 62 FD | 	getqx	local01
0aa18     1C 2A 06 F6 | 	mov	local03, #28
0aa1c     13 31 02 F6 | 	mov	local06, local01
0aa20     14 33 02 F6 | 	mov	local07, local02
0aa24     1B 31 62 FC | 	wrlong	local06, local09
0aa28     15 37 02 F6 | 	mov	local09, local03
0aa2c     F2 30 02 FB | 	rdlong	local06, objptr
0aa30     18 2F 02 F6 | 	mov	local05, local06
0aa34     01 2E 66 F0 | 	shl	local05, #1
0aa38     18 2F 02 F1 | 	add	local05, local06
0aa3c     02 2E 66 F0 | 	shl	local05, #2
0aa40     03 00 00 FF 
0aa44     00 E4 85 F1 | 	sub	objptr, ##1536
0aa48     F2 2E 02 F1 | 	add	local05, objptr
0aa4c     04 2E 06 F1 | 	add	local05, #4
0aa50     17 33 62 FC | 	wrlong	local07, local05
0aa54     03 00 00 FF 
0aa58     00 E4 05 F1 | 	add	objptr, ##1536
0aa5c     F2 32 02 FB | 	rdlong	local07, objptr
0aa60     19 31 02 F6 | 	mov	local06, local07
0aa64     01 30 66 F0 | 	shl	local06, #1
0aa68     19 31 02 F1 | 	add	local06, local07
0aa6c     02 30 66 F0 | 	shl	local06, #2
0aa70     03 00 00 FF 
0aa74     00 E4 85 F1 | 	sub	objptr, ##1536
0aa78     F2 30 02 F1 | 	add	local06, objptr
0aa7c     08 30 06 F1 | 	add	local06, #8
0aa80     18 37 62 FC | 	wrlong	local09, local06
0aa84     03 00 00 FF 
0aa88     00 E4 05 F1 | 	add	objptr, ##1536
0aa8c     F2 30 02 FB | 	rdlong	local06, objptr
0aa90     01 30 06 F1 | 	add	local06, #1
0aa94     F2 30 62 FC | 	wrlong	local06, objptr
0aa98     13 00 00 FF 
0aa9c     38 E4 85 F1 | 	sub	objptr, ##9784
0aaa0     F2 30 02 FB | 	rdlong	local06, objptr
0aaa4     01 30 06 F1 | 	add	local06, #1
0aaa8     F2 30 62 FC | 	wrlong	local06, objptr
0aaac     37 00 00 FF 
0aab0     44 E4 85 F1 | 	sub	objptr, ##28228
0aab4     24 05 90 FD | 	jmp	#LR__0923
0aab8                 | LR__0911
0aab8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0aab8     01 2C 0E F2 | 	cmp	local04, #1 wz
0aabc     48 00 90 5D |  if_ne	jmp	#LR__0912
0aac0     00 C0 1F FF 
0aac4     00 30 06 F6 | 	mov	local06, ##1065353216
0aac8     37 00 00 FF 
0aacc     44 E4 05 F1 | 	add	objptr, ##28228
0aad0     F2 36 02 FB | 	rdlong	local09, objptr
0aad4     03 36 66 F0 | 	shl	local09, #3
0aad8     02 00 00 FF 
0aadc     38 E4 85 F1 | 	sub	objptr, ##1080
0aae0     F2 36 02 F1 | 	add	local09, objptr
0aae4     1B 13 02 FB | 	rdlong	arg01, local09
0aae8     35 00 00 FF 
0aaec     0C E4 85 F1 | 	sub	objptr, ##27148
0aaf0     E8 A6 B1 FD | 	call	#__system____builtin_atof
0aaf4     FD 14 02 F6 | 	mov	arg02, result1
0aaf8     18 13 02 F6 | 	mov	arg01, local06
0aafc     D0 9E B1 FD | 	call	#__system___float_mul
0ab00     FD 26 02 F6 | 	mov	local01, result1
0ab04     1E 2A 06 F6 | 	mov	local03, #30
0ab08                 | LR__0912
0ab08                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ab08     FF FF 7F FF 
0ab0c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0ab10     48 00 90 5D |  if_ne	jmp	#LR__0913
0ab14     00 C0 5F FF 
0ab18     00 30 06 F6 | 	mov	local06, ##-1082130432
0ab1c     37 00 00 FF 
0ab20     44 E4 05 F1 | 	add	objptr, ##28228
0ab24     F2 36 02 FB | 	rdlong	local09, objptr
0ab28     03 36 66 F0 | 	shl	local09, #3
0ab2c     02 00 00 FF 
0ab30     38 E4 85 F1 | 	sub	objptr, ##1080
0ab34     F2 36 02 F1 | 	add	local09, objptr
0ab38     1B 13 02 FB | 	rdlong	arg01, local09
0ab3c     35 00 00 FF 
0ab40     0C E4 85 F1 | 	sub	objptr, ##27148
0ab44     94 A6 B1 FD | 	call	#__system____builtin_atof
0ab48     FD 14 02 F6 | 	mov	arg02, result1
0ab4c     18 13 02 F6 | 	mov	arg01, local06
0ab50     7C 9E B1 FD | 	call	#__system___float_mul
0ab54     FD 26 02 F6 | 	mov	local01, result1
0ab58     1E 2A 06 F6 | 	mov	local03, #30
0ab5c                 | LR__0913
0ab5c     13 31 02 F6 | 	mov	local06, local01
0ab60     14 33 02 F6 | 	mov	local07, local02
0ab64     15 2F 02 F6 | 	mov	local05, local03
0ab68     4A 00 00 FF 
0ab6c     7C E4 05 F1 | 	add	objptr, ##38012
0ab70     F2 26 02 FB | 	rdlong	local01, objptr
0ab74     13 37 02 F6 | 	mov	local09, local01
0ab78     01 36 66 F0 | 	shl	local09, #1
0ab7c     13 37 02 F1 | 	add	local09, local01
0ab80     02 36 66 F0 | 	shl	local09, #2
0ab84     03 00 00 FF 
0ab88     00 E4 85 F1 | 	sub	objptr, ##1536
0ab8c     F2 36 02 F1 | 	add	local09, objptr
0ab90     1B 31 62 FC | 	wrlong	local06, local09
0ab94     03 00 00 FF 
0ab98     00 E4 05 F1 | 	add	objptr, ##1536
0ab9c     F2 36 02 FB | 	rdlong	local09, objptr
0aba0     1B 31 02 F6 | 	mov	local06, local09
0aba4     01 30 66 F0 | 	shl	local06, #1
0aba8     1B 31 02 F1 | 	add	local06, local09
0abac     02 30 66 F0 | 	shl	local06, #2
0abb0     03 00 00 FF 
0abb4     00 E4 85 F1 | 	sub	objptr, ##1536
0abb8     F2 30 02 F1 | 	add	local06, objptr
0abbc     04 30 06 F1 | 	add	local06, #4
0abc0     18 33 62 FC | 	wrlong	local07, local06
0abc4     03 00 00 FF 
0abc8     00 E4 05 F1 | 	add	objptr, ##1536
0abcc     F2 36 02 FB | 	rdlong	local09, objptr
0abd0     1B 33 02 F6 | 	mov	local07, local09
0abd4     01 32 66 F0 | 	shl	local07, #1
0abd8     1B 33 02 F1 | 	add	local07, local09
0abdc     02 32 66 F0 | 	shl	local07, #2
0abe0     03 00 00 FF 
0abe4     00 E4 85 F1 | 	sub	objptr, ##1536
0abe8     F2 32 02 F1 | 	add	local07, objptr
0abec     08 32 06 F1 | 	add	local07, #8
0abf0     19 2F 62 FC | 	wrlong	local05, local07
0abf4     03 00 00 FF 
0abf8     00 E4 05 F1 | 	add	objptr, ##1536
0abfc     F2 30 02 FB | 	rdlong	local06, objptr
0ac00     01 30 06 F1 | 	add	local06, #1
0ac04     F2 30 62 FC | 	wrlong	local06, objptr
0ac08     13 00 00 FF 
0ac0c     38 E4 85 F1 | 	sub	objptr, ##9784
0ac10     F2 30 02 FB | 	rdlong	local06, objptr
0ac14     01 30 06 F1 | 	add	local06, #1
0ac18     F2 30 62 FC | 	wrlong	local06, objptr
0ac1c     37 00 00 FF 
0ac20     44 E4 85 F1 | 	sub	objptr, ##28228
0ac24     B4 03 90 FD | 	jmp	#LR__0923
0ac28                 | LR__0914
0ac28     37 00 00 FF 
0ac2c     44 E4 05 F1 | 	add	objptr, ##28228
0ac30     F2 16 02 FB | 	rdlong	arg03, objptr
0ac34     03 16 66 F0 | 	shl	arg03, #3
0ac38     02 00 00 FF 
0ac3c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac40     F2 16 02 F1 | 	add	arg03, objptr
0ac44     0B 13 02 FB | 	rdlong	arg01, arg03
0ac48     35 00 00 FF 
0ac4c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac50     09 35 02 F6 | 	mov	local08, arg01
0ac54     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0ac58                 | LR__0915
0ac58     1A FB C9 FA | 	rdbyte	result1, local08 wz
0ac5c     01 34 06 51 |  if_ne	add	local08, #1
0ac60     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0ac64                 | LR__0916
0ac64     09 35 82 F1 | 	sub	local08, arg01
0ac68     1A FB 01 F6 | 	mov	result1, local08
0ac6c     51 00 00 FF 
0ac70     FC E5 05 F1 | 	add	objptr, ##41980
0ac74     F2 FA 61 FC | 	wrlong	result1, objptr
0ac78     50 E4 85 F1 | 	sub	objptr, #80
0ac7c     F2 12 02 FB | 	rdlong	arg01, objptr
0ac80     FD 12 82 F1 | 	sub	arg01, result1
0ac84     04 12 86 F1 | 	sub	arg01, #4
0ac88     03 12 26 F5 | 	andn	arg01, #3
0ac8c     F2 12 62 FC | 	wrlong	arg01, objptr
0ac90     50 E4 05 F1 | 	add	objptr, #80
0ac94     F2 14 02 FB | 	rdlong	arg02, objptr
0ac98     51 00 00 FF 
0ac9c     FC E5 85 F1 | 	sub	objptr, ##41980
0aca0     DC 37 B1 FD | 	call	#_pslpoke
0aca4                 | '     pslpoke memtop,l
0aca4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0aca4     01 38 06 F6 | 	mov	local10, #1
0aca8     51 00 00 FF 
0acac     FC E5 05 F1 | 	add	objptr, ##41980
0acb0     F2 3A 02 FB | 	rdlong	local11, objptr
0acb4     51 00 00 FF 
0acb8     FC E5 85 F1 | 	sub	objptr, ##41980
0acbc     01 3A 06 F1 | 	add	local11, #1
0acc0                 | LR__0917
0acc0     1D 39 52 F2 | 	cmps	local10, local11 wc
0acc4     5C 00 90 3D |  if_ae	jmp	#LR__0918
0acc8     51 00 00 FF 
0accc     AC E5 05 F1 | 	add	objptr, ##41900
0acd0     F2 32 02 FB | 	rdlong	local07, objptr
0acd4     03 32 06 F1 | 	add	local07, #3
0acd8     1C 33 02 F1 | 	add	local07, local10
0acdc     1A 00 00 FF 
0ace0     68 E5 85 F1 | 	sub	objptr, ##13672
0ace4     F2 36 02 FB | 	rdlong	local09, objptr
0ace8     03 36 66 F0 | 	shl	local09, #3
0acec     02 00 00 FF 
0acf0     38 E4 85 F1 | 	sub	objptr, ##1080
0acf4     F2 36 02 F1 | 	add	local09, objptr
0acf8     1B 13 02 FB | 	rdlong	arg01, local09
0acfc     1C 15 02 F6 | 	mov	arg02, local10
0ad00     01 16 06 F6 | 	mov	arg03, #1
0ad04     35 00 00 FF 
0ad08     0C E4 85 F1 | 	sub	objptr, ##27148
0ad0c     98 90 B1 FD | 	call	#__system__Mid_S
0ad10     FD 14 C2 FA | 	rdbyte	arg02, result1
0ad14     19 13 02 F6 | 	mov	arg01, local07
0ad18     F4 37 B1 FD | 	call	#_pspoke
0ad1c     01 38 06 F1 | 	add	local10, #1
0ad20     9C FF 9F FD | 	jmp	#LR__0917
0ad24                 | LR__0918
0ad24     51 00 00 FF 
0ad28     AC E5 05 F1 | 	add	objptr, ##41900
0ad2c     F2 26 02 FB | 	rdlong	local01, objptr
0ad30     2B 2A 06 F6 | 	mov	local03, #43
0ad34     13 31 02 F6 | 	mov	local06, local01
0ad38     14 33 02 F6 | 	mov	local07, local02
0ad3c     15 3B 02 F6 | 	mov	local11, local03
0ad40     07 00 00 FF 
0ad44     30 E5 85 F1 | 	sub	objptr, ##3888
0ad48     F2 38 02 FB | 	rdlong	local10, objptr
0ad4c     1C 37 02 F6 | 	mov	local09, local10
0ad50     01 36 66 F0 | 	shl	local09, #1
0ad54     1C 37 02 F1 | 	add	local09, local10
0ad58     02 36 66 F0 | 	shl	local09, #2
0ad5c     03 00 00 FF 
0ad60     00 E4 85 F1 | 	sub	objptr, ##1536
0ad64     F2 36 02 F1 | 	add	local09, objptr
0ad68     1B 31 62 FC | 	wrlong	local06, local09
0ad6c     03 00 00 FF 
0ad70     00 E4 05 F1 | 	add	objptr, ##1536
0ad74     F2 38 02 FB | 	rdlong	local10, objptr
0ad78     1C 37 02 F6 | 	mov	local09, local10
0ad7c     01 36 66 F0 | 	shl	local09, #1
0ad80     1C 37 02 F1 | 	add	local09, local10
0ad84     02 36 66 F0 | 	shl	local09, #2
0ad88     03 00 00 FF 
0ad8c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad90     F2 36 02 F1 | 	add	local09, objptr
0ad94     04 36 06 F1 | 	add	local09, #4
0ad98     1B 33 62 FC | 	wrlong	local07, local09
0ad9c     03 00 00 FF 
0ada0     00 E4 05 F1 | 	add	objptr, ##1536
0ada4     F2 38 02 FB | 	rdlong	local10, objptr
0ada8     1C 37 02 F6 | 	mov	local09, local10
0adac     01 36 66 F0 | 	shl	local09, #1
0adb0     1C 37 02 F1 | 	add	local09, local10
0adb4     02 36 66 F0 | 	shl	local09, #2
0adb8     03 00 00 FF 
0adbc     00 E4 85 F1 | 	sub	objptr, ##1536
0adc0     F2 36 02 F1 | 	add	local09, objptr
0adc4     08 36 06 F1 | 	add	local09, #8
0adc8     1B 3B 62 FC | 	wrlong	local11, local09
0adcc     03 00 00 FF 
0add0     00 E4 05 F1 | 	add	objptr, ##1536
0add4     F2 30 02 FB | 	rdlong	local06, objptr
0add8     01 30 06 F1 | 	add	local06, #1
0addc     F2 30 62 FC | 	wrlong	local06, objptr
0ade0     13 00 00 FF 
0ade4     38 E4 85 F1 | 	sub	objptr, ##9784
0ade8     F2 30 02 FB | 	rdlong	local06, objptr
0adec     01 30 06 F1 | 	add	local06, #1
0adf0     F2 30 62 FC | 	wrlong	local06, objptr
0adf4     37 00 00 FF 
0adf8     44 E4 85 F1 | 	sub	objptr, ##28228
0adfc     DC 01 90 FD | 	jmp	#LR__0923
0ae00                 | LR__0919
0ae00     2C 2A 06 F6 | 	mov	local03, #44
0ae04     37 00 00 FF 
0ae08     44 E4 05 F1 | 	add	objptr, ##28228
0ae0c     F2 30 02 FB | 	rdlong	local06, objptr
0ae10     03 30 66 F0 | 	shl	local06, #3
0ae14     02 00 00 FF 
0ae18     38 E4 85 F1 | 	sub	objptr, ##1080
0ae1c     F2 30 02 F1 | 	add	local06, objptr
0ae20     18 13 02 FB | 	rdlong	arg01, local06
0ae24     00 14 06 F6 | 	mov	arg02, #0
0ae28     35 00 00 FF 
0ae2c     0C E4 85 F1 | 	sub	objptr, ##27148
0ae30     14 A2 B1 FD | 	call	#__system____builtin_atoi
0ae34     FD 26 02 F6 | 	mov	local01, result1
0ae38     13 31 02 F6 | 	mov	local06, local01
0ae3c     14 33 02 F6 | 	mov	local07, local02
0ae40     15 3B 02 F6 | 	mov	local11, local03
0ae44     4A 00 00 FF 
0ae48     7C E4 05 F1 | 	add	objptr, ##38012
0ae4c     F2 38 02 FB | 	rdlong	local10, objptr
0ae50     1C 37 02 F6 | 	mov	local09, local10
0ae54     01 36 66 F0 | 	shl	local09, #1
0ae58     1C 37 02 F1 | 	add	local09, local10
0ae5c     02 36 66 F0 | 	shl	local09, #2
0ae60     03 00 00 FF 
0ae64     00 E4 85 F1 | 	sub	objptr, ##1536
0ae68     F2 36 02 F1 | 	add	local09, objptr
0ae6c     1B 31 62 FC | 	wrlong	local06, local09
0ae70     03 00 00 FF 
0ae74     00 E4 05 F1 | 	add	objptr, ##1536
0ae78     F2 38 02 FB | 	rdlong	local10, objptr
0ae7c     1C 37 02 F6 | 	mov	local09, local10
0ae80     01 36 66 F0 | 	shl	local09, #1
0ae84     1C 37 02 F1 | 	add	local09, local10
0ae88     02 36 66 F0 | 	shl	local09, #2
0ae8c     03 00 00 FF 
0ae90     00 E4 85 F1 | 	sub	objptr, ##1536
0ae94     F2 36 02 F1 | 	add	local09, objptr
0ae98     04 36 06 F1 | 	add	local09, #4
0ae9c     1B 33 62 FC | 	wrlong	local07, local09
0aea0     03 00 00 FF 
0aea4     00 E4 05 F1 | 	add	objptr, ##1536
0aea8     F2 38 02 FB | 	rdlong	local10, objptr
0aeac     1C 37 02 F6 | 	mov	local09, local10
0aeb0     01 36 66 F0 | 	shl	local09, #1
0aeb4     1C 37 02 F1 | 	add	local09, local10
0aeb8     02 36 66 F0 | 	shl	local09, #2
0aebc     03 00 00 FF 
0aec0     00 E4 85 F1 | 	sub	objptr, ##1536
0aec4     F2 36 02 F1 | 	add	local09, objptr
0aec8     08 36 06 F1 | 	add	local09, #8
0aecc     1B 3B 62 FC | 	wrlong	local11, local09
0aed0     03 00 00 FF 
0aed4     00 E4 05 F1 | 	add	objptr, ##1536
0aed8     F2 30 02 FB | 	rdlong	local06, objptr
0aedc     01 30 06 F1 | 	add	local06, #1
0aee0     F2 30 62 FC | 	wrlong	local06, objptr
0aee4     13 00 00 FF 
0aee8     38 E4 85 F1 | 	sub	objptr, ##9784
0aeec     F2 30 02 FB | 	rdlong	local06, objptr
0aef0     01 30 06 F1 | 	add	local06, #1
0aef4     F2 30 62 FC | 	wrlong	local06, objptr
0aef8     37 00 00 FF 
0aefc     44 E4 85 F1 | 	sub	objptr, ##28228
0af00     D8 00 90 FD | 	jmp	#LR__0923
0af04                 | LR__0920
0af04     16 13 02 F6 | 	mov	arg01, local04
0af08     24 04 B0 FD | 	call	#_getvar
0af0c     37 00 00 FF 
0af10     44 E4 05 F1 | 	add	objptr, ##28228
0af14     F2 30 02 FB | 	rdlong	local06, objptr
0af18     01 30 06 F1 | 	add	local06, #1
0af1c     F2 30 62 FC | 	wrlong	local06, objptr
0af20     37 00 00 FF 
0af24     44 E4 85 F1 | 	sub	objptr, ##28228
0af28                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0af28     01 FA 55 F2 | 	cmps	result1, #1 wc
0af2c     B0 00 90 3D |  if_ae	jmp	#LR__0924
0af30     A8 00 90 FD | 	jmp	#LR__0923
0af34                 | LR__0921
0af34     37 00 00 FF 
0af38     44 E4 05 F1 | 	add	objptr, ##28228
0af3c     F2 30 02 FB | 	rdlong	local06, objptr
0af40     01 30 06 F1 | 	add	local06, #1
0af44     F2 30 62 FC | 	wrlong	local06, objptr
0af48     37 00 00 FF 
0af4c     44 E4 85 F1 | 	sub	objptr, ##28228
0af50     20 F1 BF FD | 	call	#_expr
0af54                 | '     ct+=1
0af54                 | '     err=expr() : if err>0 then return err 
0af54     01 FA 55 F2 | 	cmps	result1, #1 wc
0af58     84 00 90 3D |  if_ae	jmp	#LR__0924
0af5c                 | '     if lparts(ct).token=token_rpar then ct+=1
0af5c     37 00 00 FF 
0af60     44 E4 05 F1 | 	add	objptr, ##28228
0af64     F2 3A 02 FB | 	rdlong	local11, objptr
0af68     03 3A 66 F0 | 	shl	local11, #3
0af6c     02 00 00 FF 
0af70     38 E4 85 F1 | 	sub	objptr, ##1080
0af74     F2 3A 02 F1 | 	add	local11, objptr
0af78     04 3A 06 F1 | 	add	local11, #4
0af7c     1D 3B 02 FB | 	rdlong	local11, local11
0af80     14 3A 0E F2 | 	cmp	local11, #20 wz
0af84     35 00 00 FF 
0af88     0C E4 85 F1 | 	sub	objptr, ##27148
0af8c     4C 00 90 5D |  if_ne	jmp	#LR__0923
0af90     37 00 00 FF 
0af94     44 E4 05 F1 | 	add	objptr, ##28228
0af98     F2 30 02 FB | 	rdlong	local06, objptr
0af9c     01 30 06 F1 | 	add	local06, #1
0afa0     F2 30 62 FC | 	wrlong	local06, objptr
0afa4     37 00 00 FF 
0afa8     44 E4 85 F1 | 	sub	objptr, ##28228
0afac     2C 00 90 FD | 	jmp	#LR__0923
0afb0                 | LR__0922
0afb0     16 13 02 F6 | 	mov	arg01, local04
0afb4     34 00 B0 FD | 	call	#_getfun
0afb8     37 00 00 FF 
0afbc     44 E4 05 F1 | 	add	objptr, ##28228
0afc0     F2 30 02 FB | 	rdlong	local06, objptr
0afc4     01 30 06 F1 | 	add	local06, #1
0afc8     F2 30 62 FC | 	wrlong	local06, objptr
0afcc     37 00 00 FF 
0afd0     44 E4 85 F1 | 	sub	objptr, ##28228
0afd4                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0afd4     01 FA 55 F2 | 	cmps	result1, #1 wc
0afd8     04 00 90 3D |  if_ae	jmp	#LR__0924
0afdc                 | LR__0923
0afdc                 | ' return 0  
0afdc     00 FA 05 F6 | 	mov	result1, #0
0afe0                 | LR__0924
0afe0     A7 F0 03 F6 | 	mov	ptra, fp
0afe4     B2 00 A0 FD | 	call	#popregs_
0afe8                 | _getvalue_ret
0afe8     2D 00 64 FD | 	ret
0afec                 | 
0afec                 | ' 
0afec                 | ' ' Get a function result 
0afec                 | ' 
0afec                 | ' function getfun(m as integer) as ulong
0afec                 | _getfun
0afec     0F 4A 05 F6 | 	mov	COUNT_, #15
0aff0     A8 00 A0 FD | 	call	#pushregs_
0aff4                 | _getfun_enter
0aff4     09 2D 02 F6 | 	mov	local04, arg01
0aff8     37 00 00 FF 
0affc     44 E4 05 F1 | 	add	objptr, ##28228
0b000     F2 2E 02 FB | 	rdlong	local05, objptr
0b004     17 31 02 F6 | 	mov	local06, local05
0b008     00 32 06 F6 | 	mov	local07, #0
0b00c                 | ' oldct=ct
0b00c                 | ' numpar=0
0b00c                 | ' if lparts(ct+1).token=token_lpar then
0b00c     01 2E 06 F1 | 	add	local05, #1
0b010     03 2E 66 F0 | 	shl	local05, #3
0b014     02 00 00 FF 
0b018     38 E4 85 F1 | 	sub	objptr, ##1080
0b01c     F2 2E 02 F1 | 	add	local05, objptr
0b020     04 2E 06 F1 | 	add	local05, #4
0b024     17 2F 02 FB | 	rdlong	local05, local05
0b028     15 2E 0E F2 | 	cmp	local05, #21 wz
0b02c     35 00 00 FF 
0b030     0C E4 85 F1 | 	sub	objptr, ##27148
0b034     54 01 90 5D |  if_ne	jmp	#LR__0934
0b038     37 00 00 FF 
0b03c     44 E4 05 F1 | 	add	objptr, ##28228
0b040     F2 34 02 FB | 	rdlong	local08, objptr
0b044     01 34 06 F1 | 	add	local08, #1
0b048     F2 34 62 FC | 	wrlong	local08, objptr
0b04c     37 00 00 FF 
0b050     44 E4 85 F1 | 	sub	objptr, ##28228
0b054                 | '   ct+=1 											' omit this lpar, this is for expr list
0b054                 | '   do
0b054                 | LR__0930
0b054     37 00 00 FF 
0b058     44 E4 05 F1 | 	add	objptr, ##28228
0b05c     F2 2E 02 FB | 	rdlong	local05, objptr
0b060     01 2E 06 F1 | 	add	local05, #1
0b064     F2 2E 62 FC | 	wrlong	local05, objptr
0b068                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b068                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b068     03 2E 66 F0 | 	shl	local05, #3
0b06c     02 00 00 FF 
0b070     38 E4 85 F1 | 	sub	objptr, ##1080
0b074     F2 2E 02 F1 | 	add	local05, objptr
0b078     04 2E 06 F1 | 	add	local05, #4
0b07c     17 35 02 FB | 	rdlong	local08, local05
0b080     15 34 0E F2 | 	cmp	local08, #21 wz
0b084     35 00 00 FF 
0b088     0C E4 85 F1 | 	sub	objptr, ##27148
0b08c     44 00 90 5D |  if_ne	jmp	#LR__0931
0b090     37 00 00 FF 
0b094     44 E4 05 F1 | 	add	objptr, ##28228
0b098     F2 34 02 FB | 	rdlong	local08, objptr
0b09c     01 34 06 F1 | 	add	local08, #1
0b0a0     F2 34 62 FC | 	wrlong	local08, objptr
0b0a4     37 00 00 FF 
0b0a8     44 E4 85 F1 | 	sub	objptr, ##28228
0b0ac     C4 EF BF FD | 	call	#_expr
0b0b0     FD 36 02 F6 | 	mov	local09, result1
0b0b4     37 00 00 FF 
0b0b8     44 E4 05 F1 | 	add	objptr, ##28228
0b0bc     F2 34 02 FB | 	rdlong	local08, objptr
0b0c0     01 34 06 F1 | 	add	local08, #1
0b0c4     F2 34 62 FC | 	wrlong	local08, objptr
0b0c8     37 00 00 FF 
0b0cc     44 E4 85 F1 | 	sub	objptr, ##28228
0b0d0     08 00 90 FD | 	jmp	#LR__0932
0b0d4                 | LR__0931
0b0d4     9C EF BF FD | 	call	#_expr
0b0d8     FD 36 02 F6 | 	mov	local09, result1
0b0dc                 | LR__0932
0b0dc                 | '     if err>0 then return err
0b0dc     01 36 16 F2 | 	cmp	local09, #1 wc
0b0e0     1B FB 01 36 |  if_ae	mov	result1, local09
0b0e4     3C 02 90 3D |  if_ae	jmp	#LR__0936
0b0e8     01 32 06 F1 | 	add	local07, #1
0b0ec     37 00 00 FF 
0b0f0     44 E4 05 F1 | 	add	objptr, ##28228
0b0f4     F2 2E 02 FB | 	rdlong	local05, objptr
0b0f8     03 2E 66 F0 | 	shl	local05, #3
0b0fc     02 00 00 FF 
0b100     38 E4 85 F1 | 	sub	objptr, ##1080
0b104     F2 2E 02 F1 | 	add	local05, objptr
0b108     04 2E 06 F1 | 	add	local05, #4
0b10c     17 37 02 FB | 	rdlong	local09, local05
0b110     14 36 0E F2 | 	cmp	local09, #20 wz
0b114     35 00 00 FF 
0b118     0C E4 85 F1 | 	sub	objptr, ##27148
0b11c     34 00 90 AD |  if_e	jmp	#LR__0933
0b120     37 00 00 FF 
0b124     44 E4 05 F1 | 	add	objptr, ##28228
0b128     F2 36 02 FB | 	rdlong	local09, objptr
0b12c     03 36 66 F0 | 	shl	local09, #3
0b130     02 00 00 FF 
0b134     38 E4 85 F1 | 	sub	objptr, ##1080
0b138     F2 36 02 F1 | 	add	local09, objptr
0b13c     04 36 06 F1 | 	add	local09, #4
0b140     1B 37 02 FB | 	rdlong	local09, local09
0b144     FE 37 0E F2 | 	cmp	local09, #510 wz
0b148     35 00 00 FF 
0b14c     0C E4 85 F1 | 	sub	objptr, ##27148
0b150     00 FF 9F 5D |  if_ne	jmp	#LR__0930
0b154                 | LR__0933
0b154                 | '   if lparts(ct).token=token_end then return 14
0b154     37 00 00 FF 
0b158     44 E4 05 F1 | 	add	objptr, ##28228
0b15c     F2 2E 02 FB | 	rdlong	local05, objptr
0b160     03 2E 66 F0 | 	shl	local05, #3
0b164     02 00 00 FF 
0b168     38 E4 85 F1 | 	sub	objptr, ##1080
0b16c     F2 2E 02 F1 | 	add	local05, objptr
0b170     04 2E 06 F1 | 	add	local05, #4
0b174     17 37 02 FB | 	rdlong	local09, local05
0b178     FE 37 0E F2 | 	cmp	local09, #510 wz
0b17c     35 00 00 FF 
0b180     0C E4 85 F1 | 	sub	objptr, ##27148
0b184     0E FA 05 A6 |  if_e	mov	result1, #14
0b188     98 01 90 AD |  if_e	jmp	#LR__0936
0b18c                 | LR__0934
0b18c     19 27 02 F6 | 	mov	local01, local07
0b190     03 30 66 F0 | 	shl	local06, #3
0b194     35 00 00 FF 
0b198     0C E4 05 F1 | 	add	objptr, ##27148
0b19c     F2 30 02 F1 | 	add	local06, objptr
0b1a0     04 30 06 F1 | 	add	local06, #4
0b1a4     18 2B 02 FB | 	rdlong	local03, local06
0b1a8     13 35 02 F6 | 	mov	local08, local01
0b1ac     14 39 02 F6 | 	mov	local10, local02
0b1b0     15 3B 02 F6 | 	mov	local11, local03
0b1b4     15 00 00 FF 
0b1b8     70 E4 05 F1 | 	add	objptr, ##10864
0b1bc     F2 3C 02 FB | 	rdlong	local12, objptr
0b1c0     1E 3F 02 F6 | 	mov	local13, local12
0b1c4     01 3E 66 F0 | 	shl	local13, #1
0b1c8     1E 3F 02 F1 | 	add	local13, local12
0b1cc     02 3E 66 F0 | 	shl	local13, #2
0b1d0     03 00 00 FF 
0b1d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b1d8     F2 3E 02 F1 | 	add	local13, objptr
0b1dc     1F 35 62 FC | 	wrlong	local08, local13
0b1e0     03 00 00 FF 
0b1e4     00 E4 05 F1 | 	add	objptr, ##1536
0b1e8     F2 34 02 FB | 	rdlong	local08, objptr
0b1ec     1A 41 02 F6 | 	mov	local14, local08
0b1f0     01 40 66 F0 | 	shl	local14, #1
0b1f4     1A 41 02 F1 | 	add	local14, local08
0b1f8     02 40 66 F0 | 	shl	local14, #2
0b1fc     03 00 00 FF 
0b200     00 E4 85 F1 | 	sub	objptr, ##1536
0b204     F2 40 02 F1 | 	add	local14, objptr
0b208     04 40 06 F1 | 	add	local14, #4
0b20c     20 39 62 FC | 	wrlong	local10, local14
0b210     03 00 00 FF 
0b214     00 E4 05 F1 | 	add	objptr, ##1536
0b218     F2 34 02 FB | 	rdlong	local08, objptr
0b21c     1A 43 02 F6 | 	mov	local15, local08
0b220     01 42 66 F0 | 	shl	local15, #1
0b224     1A 43 02 F1 | 	add	local15, local08
0b228     02 42 66 F0 | 	shl	local15, #2
0b22c     03 00 00 FF 
0b230     00 E4 85 F1 | 	sub	objptr, ##1536
0b234     F2 42 02 F1 | 	add	local15, objptr
0b238     08 42 06 F1 | 	add	local15, #8
0b23c     21 3B 62 FC | 	wrlong	local11, local15
0b240     03 00 00 FF 
0b244     00 E4 05 F1 | 	add	objptr, ##1536
0b248     F2 34 02 FB | 	rdlong	local08, objptr
0b24c     01 34 06 F1 | 	add	local08, #1
0b250     F2 34 62 FC | 	wrlong	local08, objptr
0b254     4A 00 00 FF 
0b258     7C E4 85 F1 | 	sub	objptr, ##38012
0b25c                 | ' t2.result.uresult=numpar
0b25c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b25c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b25c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b25c     FF FF 7F FF 
0b260     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b264     B8 00 90 5D |  if_ne	jmp	#LR__0935
0b268     15 2A 06 F6 | 	mov	local03, #21
0b26c     13 35 02 F6 | 	mov	local08, local01
0b270     14 39 02 F6 | 	mov	local10, local02
0b274     15 3B 02 F6 | 	mov	local11, local03
0b278     4A 00 00 FF 
0b27c     7C E4 05 F1 | 	add	objptr, ##38012
0b280     F2 3C 02 FB | 	rdlong	local12, objptr
0b284     1E 3F 02 F6 | 	mov	local13, local12
0b288     01 3E 66 F0 | 	shl	local13, #1
0b28c     1E 3F 02 F1 | 	add	local13, local12
0b290     02 3E 66 F0 | 	shl	local13, #2
0b294     03 00 00 FF 
0b298     00 E4 85 F1 | 	sub	objptr, ##1536
0b29c     F2 3E 02 F1 | 	add	local13, objptr
0b2a0     1F 35 62 FC | 	wrlong	local08, local13
0b2a4     03 00 00 FF 
0b2a8     00 E4 05 F1 | 	add	objptr, ##1536
0b2ac     F2 42 02 FB | 	rdlong	local15, objptr
0b2b0     21 41 02 F6 | 	mov	local14, local15
0b2b4     01 40 66 F0 | 	shl	local14, #1
0b2b8     21 41 02 F1 | 	add	local14, local15
0b2bc     02 40 66 F0 | 	shl	local14, #2
0b2c0     03 00 00 FF 
0b2c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b2c8     F2 40 02 F1 | 	add	local14, objptr
0b2cc     04 40 06 F1 | 	add	local14, #4
0b2d0     20 39 62 FC | 	wrlong	local10, local14
0b2d4     03 00 00 FF 
0b2d8     00 E4 05 F1 | 	add	objptr, ##1536
0b2dc     F2 40 02 FB | 	rdlong	local14, objptr
0b2e0     20 43 02 F6 | 	mov	local15, local14
0b2e4     01 42 66 F0 | 	shl	local15, #1
0b2e8     20 43 02 F1 | 	add	local15, local14
0b2ec     02 42 66 F0 | 	shl	local15, #2
0b2f0     03 00 00 FF 
0b2f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b2f8     F2 42 02 F1 | 	add	local15, objptr
0b2fc     08 42 06 F1 | 	add	local15, #8
0b300     21 3B 62 FC | 	wrlong	local11, local15
0b304     03 00 00 FF 
0b308     00 E4 05 F1 | 	add	objptr, ##1536
0b30c     F2 34 02 FB | 	rdlong	local08, objptr
0b310     01 34 06 F1 | 	add	local08, #1
0b314     F2 34 62 FC | 	wrlong	local08, objptr
0b318     4A 00 00 FF 
0b31c     7C E4 85 F1 | 	sub	objptr, ##38012
0b320                 | LR__0935
0b320                 | ' return 0
0b320     00 FA 05 F6 | 	mov	result1, #0
0b324                 | LR__0936
0b324     A7 F0 03 F6 | 	mov	ptra, fp
0b328     B2 00 A0 FD | 	call	#popregs_
0b32c                 | _getfun_ret
0b32c     2D 00 64 FD | 	ret
0b330                 | 
0b330                 | '   
0b330                 | '   
0b330                 | ' function getvar(m as integer) as ulong
0b330                 | _getvar
0b330     11 4A 05 F6 | 	mov	COUNT_, #17
0b334     A8 00 A0 FD | 	call	#pushregs_
0b338                 | _getvar_enter
0b338     09 2D 02 F6 | 	mov	local04, arg01
0b33c     37 00 00 FF 
0b340     44 E4 05 F1 | 	add	objptr, ##28228
0b344     F2 2E 02 FB | 	rdlong	local05, objptr
0b348     03 2E 66 F0 | 	shl	local05, #3
0b34c     02 00 00 FF 
0b350     38 E4 85 F1 | 	sub	objptr, ##1080
0b354     F2 2E 02 F1 | 	add	local05, objptr
0b358     17 31 02 FB | 	rdlong	local06, local05
0b35c     01 32 66 F6 | 	neg	local07, #1
0b360                 | ' 
0b360                 | ' varname$=lparts(ct).part$
0b360                 | ' j=-1
0b360                 | ' 
0b360                 | ' for i=0 to varnum-1
0b360     00 34 06 F6 | 	mov	local08, #0
0b364     04 E4 85 F1 | 	sub	objptr, #4
0b368     F2 36 02 FB | 	rdlong	local09, objptr
0b36c     35 00 00 FF 
0b370     08 E4 85 F1 | 	sub	objptr, ##27144
0b374                 | LR__0940
0b374     1B 35 52 F2 | 	cmps	local08, local09 wc
0b378     38 00 90 3D |  if_ae	jmp	#LR__0941
0b37c                 | '   if variables(i).name=varname$ then j=i : exit
0b37c     1A 2F 02 F6 | 	mov	local05, local08
0b380     04 2E 66 F0 | 	shl	local05, #4
0b384     14 00 00 FF 
0b388     F8 E5 05 F1 | 	add	objptr, ##10744
0b38c     F2 2E 02 F1 | 	add	local05, objptr
0b390     17 13 02 FB | 	rdlong	arg01, local05
0b394     18 15 02 F6 | 	mov	arg02, local06
0b398     14 00 00 FF 
0b39c     F8 E5 85 F1 | 	sub	objptr, ##10744
0b3a0     98 68 B1 FD | 	call	#__system___string_cmp
0b3a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b3a8     1A 33 02 A6 |  if_e	mov	local07, local08
0b3ac     01 34 06 51 |  if_ne	add	local08, #1
0b3b0     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b3b4                 | LR__0941
0b3b4                 | ' if  j=-1 andalso varnum<maxvars then   
0b3b4     FF FF 7F FF 
0b3b8     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0b3bc     A8 00 90 5D |  if_ne	jmp	#LR__0942
0b3c0     35 00 00 FF 
0b3c4     08 E4 05 F1 | 	add	objptr, ##27144
0b3c8     F2 36 02 FB | 	rdlong	local09, objptr
0b3cc     35 00 00 FF 
0b3d0     08 E4 85 F1 | 	sub	objptr, ##27144
0b3d4     02 00 00 FF 
0b3d8     00 36 56 F2 | 	cmps	local09, ##1024 wc
0b3dc     88 00 90 3D |  if_ae	jmp	#LR__0942
0b3e0     35 00 00 FF 
0b3e4     08 E4 05 F1 | 	add	objptr, ##27144
0b3e8     F2 2E 02 FB | 	rdlong	local05, objptr
0b3ec     04 2E 66 F0 | 	shl	local05, #4
0b3f0     20 00 00 FF 
0b3f4     10 E4 85 F1 | 	sub	objptr, ##16400
0b3f8     F2 2E 02 F1 | 	add	local05, objptr
0b3fc     17 31 62 FC | 	wrlong	local06, local05
0b400     20 00 00 FF 
0b404     10 E4 05 F1 | 	add	objptr, ##16400
0b408     F2 2E 02 FB | 	rdlong	local05, objptr
0b40c     04 2E 66 F0 | 	shl	local05, #4
0b410     20 00 00 FF 
0b414     10 E4 85 F1 | 	sub	objptr, ##16400
0b418     F2 2E 02 F1 | 	add	local05, objptr
0b41c     04 2E 06 F1 | 	add	local05, #4
0b420     17 01 68 FC | 	wrlong	#0, local05
0b424     20 00 00 FF 
0b428     10 E4 05 F1 | 	add	objptr, ##16400
0b42c     F2 2E 02 FB | 	rdlong	local05, objptr
0b430     04 2E 66 F0 | 	shl	local05, #4
0b434     20 00 00 FF 
0b438     10 E4 85 F1 | 	sub	objptr, ##16400
0b43c     F2 2E 02 F1 | 	add	local05, objptr
0b440     0C 2E 06 F1 | 	add	local05, #12
0b444     17 39 68 FC | 	wrlong	#28, local05
0b448     20 00 00 FF 
0b44c     10 E4 05 F1 | 	add	objptr, ##16400
0b450     F2 36 02 FB | 	rdlong	local09, objptr
0b454     1B 33 02 F6 | 	mov	local07, local09
0b458     01 36 06 F1 | 	add	local09, #1
0b45c     F2 36 62 FC | 	wrlong	local09, objptr
0b460     35 00 00 FF 
0b464     08 E4 85 F1 | 	sub	objptr, ##27144
0b468                 | LR__0942
0b468     00 36 06 F6 | 	mov	local09, #0
0b46c                 | ' numpar=0
0b46c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b46c     37 00 00 FF 
0b470     44 E4 05 F1 | 	add	objptr, ##28228
0b474     F2 2E 02 FB | 	rdlong	local05, objptr
0b478     01 2E 06 F1 | 	add	local05, #1
0b47c     03 2E 66 F0 | 	shl	local05, #3
0b480     02 00 00 FF 
0b484     38 E4 85 F1 | 	sub	objptr, ##1080
0b488     F2 2E 02 F1 | 	add	local05, objptr
0b48c     04 2E 06 F1 | 	add	local05, #4
0b490     17 35 02 FB | 	rdlong	local08, local05
0b494     15 34 0E F2 | 	cmp	local08, #21 wz
0b498     35 00 00 FF 
0b49c     0C E4 85 F1 | 	sub	objptr, ##27148
0b4a0     54 01 90 5D |  if_ne	jmp	#LR__0947
0b4a4     37 00 00 FF 
0b4a8     44 E4 05 F1 | 	add	objptr, ##28228
0b4ac     F2 38 02 FB | 	rdlong	local10, objptr
0b4b0     01 38 06 F1 | 	add	local10, #1
0b4b4     F2 38 62 FC | 	wrlong	local10, objptr
0b4b8     37 00 00 FF 
0b4bc     44 E4 85 F1 | 	sub	objptr, ##28228
0b4c0                 | '   ct+=1 											' omit this lpar, this is for expr list
0b4c0                 | '   do
0b4c0                 | LR__0943
0b4c0     37 00 00 FF 
0b4c4     44 E4 05 F1 | 	add	objptr, ##28228
0b4c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b4cc     01 2E 06 F1 | 	add	local05, #1
0b4d0     F2 2E 62 FC | 	wrlong	local05, objptr
0b4d4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b4d4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b4d4     03 2E 66 F0 | 	shl	local05, #3
0b4d8     02 00 00 FF 
0b4dc     38 E4 85 F1 | 	sub	objptr, ##1080
0b4e0     F2 2E 02 F1 | 	add	local05, objptr
0b4e4     04 2E 06 F1 | 	add	local05, #4
0b4e8     17 39 02 FB | 	rdlong	local10, local05
0b4ec     15 38 0E F2 | 	cmp	local10, #21 wz
0b4f0     35 00 00 FF 
0b4f4     0C E4 85 F1 | 	sub	objptr, ##27148
0b4f8     44 00 90 5D |  if_ne	jmp	#LR__0944
0b4fc     37 00 00 FF 
0b500     44 E4 05 F1 | 	add	objptr, ##28228
0b504     F2 38 02 FB | 	rdlong	local10, objptr
0b508     01 38 06 F1 | 	add	local10, #1
0b50c     F2 38 62 FC | 	wrlong	local10, objptr
0b510     37 00 00 FF 
0b514     44 E4 85 F1 | 	sub	objptr, ##28228
0b518     58 EB BF FD | 	call	#_expr
0b51c     FD 3A 02 F6 | 	mov	local11, result1
0b520     37 00 00 FF 
0b524     44 E4 05 F1 | 	add	objptr, ##28228
0b528     F2 38 02 FB | 	rdlong	local10, objptr
0b52c     01 38 06 F1 | 	add	local10, #1
0b530     F2 38 62 FC | 	wrlong	local10, objptr
0b534     37 00 00 FF 
0b538     44 E4 85 F1 | 	sub	objptr, ##28228
0b53c     08 00 90 FD | 	jmp	#LR__0945
0b540                 | LR__0944
0b540     30 EB BF FD | 	call	#_expr
0b544     FD 3A 02 F6 | 	mov	local11, result1
0b548                 | LR__0945
0b548                 | '     if err>0 then return err
0b548     01 3A 56 F2 | 	cmps	local11, #1 wc
0b54c     1D FB 01 36 |  if_ae	mov	result1, local11
0b550     2C 02 90 3D |  if_ae	jmp	#LR__0949
0b554     01 36 06 F1 | 	add	local09, #1
0b558     37 00 00 FF 
0b55c     44 E4 05 F1 | 	add	objptr, ##28228
0b560     F2 2E 02 FB | 	rdlong	local05, objptr
0b564     03 2E 66 F0 | 	shl	local05, #3
0b568     02 00 00 FF 
0b56c     38 E4 85 F1 | 	sub	objptr, ##1080
0b570     F2 2E 02 F1 | 	add	local05, objptr
0b574     04 2E 06 F1 | 	add	local05, #4
0b578     17 3B 02 FB | 	rdlong	local11, local05
0b57c     14 3A 0E F2 | 	cmp	local11, #20 wz
0b580     35 00 00 FF 
0b584     0C E4 85 F1 | 	sub	objptr, ##27148
0b588     34 00 90 AD |  if_e	jmp	#LR__0946
0b58c     37 00 00 FF 
0b590     44 E4 05 F1 | 	add	objptr, ##28228
0b594     F2 3A 02 FB | 	rdlong	local11, objptr
0b598     03 3A 66 F0 | 	shl	local11, #3
0b59c     02 00 00 FF 
0b5a0     38 E4 85 F1 | 	sub	objptr, ##1080
0b5a4     F2 3A 02 F1 | 	add	local11, objptr
0b5a8     04 3A 06 F1 | 	add	local11, #4
0b5ac     1D 3B 02 FB | 	rdlong	local11, local11
0b5b0     FE 3B 0E F2 | 	cmp	local11, #510 wz
0b5b4     35 00 00 FF 
0b5b8     0C E4 85 F1 | 	sub	objptr, ##27148
0b5bc     00 FF 9F 5D |  if_ne	jmp	#LR__0943
0b5c0                 | LR__0946
0b5c0                 | '     if lparts(ct).token=token_end then return 14
0b5c0     37 00 00 FF 
0b5c4     44 E4 05 F1 | 	add	objptr, ##28228
0b5c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b5cc     03 2E 66 F0 | 	shl	local05, #3
0b5d0     02 00 00 FF 
0b5d4     38 E4 85 F1 | 	sub	objptr, ##1080
0b5d8     F2 2E 02 F1 | 	add	local05, objptr
0b5dc     04 2E 06 F1 | 	add	local05, #4
0b5e0     17 3B 02 FB | 	rdlong	local11, local05
0b5e4     FE 3B 0E F2 | 	cmp	local11, #510 wz
0b5e8     35 00 00 FF 
0b5ec     0C E4 85 F1 | 	sub	objptr, ##27148
0b5f0     0E FA 05 A6 |  if_e	mov	result1, #14
0b5f4     88 01 90 AD |  if_e	jmp	#LR__0949
0b5f8                 | LR__0947
0b5f8     1B 29 02 F6 | 	mov	local02, local09
0b5fc     11 2A 06 F6 | 	mov	local03, #17
0b600     19 27 02 F6 | 	mov	local01, local07
0b604     13 39 02 F6 | 	mov	local10, local01
0b608     14 3D 02 F6 | 	mov	local12, local02
0b60c     15 3F 02 F6 | 	mov	local13, local03
0b610     4A 00 00 FF 
0b614     7C E4 05 F1 | 	add	objptr, ##38012
0b618     F2 40 02 FB | 	rdlong	local14, objptr
0b61c     20 43 02 F6 | 	mov	local15, local14
0b620     01 42 66 F0 | 	shl	local15, #1
0b624     20 43 02 F1 | 	add	local15, local14
0b628     02 42 66 F0 | 	shl	local15, #2
0b62c     03 00 00 FF 
0b630     00 E4 85 F1 | 	sub	objptr, ##1536
0b634     F2 42 02 F1 | 	add	local15, objptr
0b638     21 39 62 FC | 	wrlong	local10, local15
0b63c     03 00 00 FF 
0b640     00 E4 05 F1 | 	add	objptr, ##1536
0b644     F2 38 02 FB | 	rdlong	local10, objptr
0b648     1C 45 02 F6 | 	mov	local16, local10
0b64c     01 44 66 F0 | 	shl	local16, #1
0b650     1C 45 02 F1 | 	add	local16, local10
0b654     02 44 66 F0 | 	shl	local16, #2
0b658     03 00 00 FF 
0b65c     00 E4 85 F1 | 	sub	objptr, ##1536
0b660     F2 44 02 F1 | 	add	local16, objptr
0b664     04 44 06 F1 | 	add	local16, #4
0b668     22 3D 62 FC | 	wrlong	local12, local16
0b66c     03 00 00 FF 
0b670     00 E4 05 F1 | 	add	objptr, ##1536
0b674     F2 38 02 FB | 	rdlong	local10, objptr
0b678     1C 47 02 F6 | 	mov	local17, local10
0b67c     01 46 66 F0 | 	shl	local17, #1
0b680     1C 47 02 F1 | 	add	local17, local10
0b684     02 46 66 F0 | 	shl	local17, #2
0b688     03 00 00 FF 
0b68c     00 E4 85 F1 | 	sub	objptr, ##1536
0b690     F2 46 02 F1 | 	add	local17, objptr
0b694     08 46 06 F1 | 	add	local17, #8
0b698     23 3F 62 FC | 	wrlong	local13, local17
0b69c     03 00 00 FF 
0b6a0     00 E4 05 F1 | 	add	objptr, ##1536
0b6a4     F2 38 02 FB | 	rdlong	local10, objptr
0b6a8     01 38 06 F1 | 	add	local10, #1
0b6ac     F2 38 62 FC | 	wrlong	local10, objptr
0b6b0     4A 00 00 FF 
0b6b4     7C E4 85 F1 | 	sub	objptr, ##38012
0b6b8                 | ' t2.result.twowords(1)=numpar
0b6b8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b6b8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b6b8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b6b8     FF FF 7F FF 
0b6bc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b6c0     B8 00 90 5D |  if_ne	jmp	#LR__0948
0b6c4     15 2A 06 F6 | 	mov	local03, #21
0b6c8     13 39 02 F6 | 	mov	local10, local01
0b6cc     14 3D 02 F6 | 	mov	local12, local02
0b6d0     15 3F 02 F6 | 	mov	local13, local03
0b6d4     4A 00 00 FF 
0b6d8     7C E4 05 F1 | 	add	objptr, ##38012
0b6dc     F2 40 02 FB | 	rdlong	local14, objptr
0b6e0     20 43 02 F6 | 	mov	local15, local14
0b6e4     01 42 66 F0 | 	shl	local15, #1
0b6e8     20 43 02 F1 | 	add	local15, local14
0b6ec     02 42 66 F0 | 	shl	local15, #2
0b6f0     03 00 00 FF 
0b6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b6f8     F2 42 02 F1 | 	add	local15, objptr
0b6fc     21 39 62 FC | 	wrlong	local10, local15
0b700     03 00 00 FF 
0b704     00 E4 05 F1 | 	add	objptr, ##1536
0b708     F2 46 02 FB | 	rdlong	local17, objptr
0b70c     23 45 02 F6 | 	mov	local16, local17
0b710     01 44 66 F0 | 	shl	local16, #1
0b714     23 45 02 F1 | 	add	local16, local17
0b718     02 44 66 F0 | 	shl	local16, #2
0b71c     03 00 00 FF 
0b720     00 E4 85 F1 | 	sub	objptr, ##1536
0b724     F2 44 02 F1 | 	add	local16, objptr
0b728     04 44 06 F1 | 	add	local16, #4
0b72c     22 3D 62 FC | 	wrlong	local12, local16
0b730     03 00 00 FF 
0b734     00 E4 05 F1 | 	add	objptr, ##1536
0b738     F2 44 02 FB | 	rdlong	local16, objptr
0b73c     22 47 02 F6 | 	mov	local17, local16
0b740     01 46 66 F0 | 	shl	local17, #1
0b744     22 47 02 F1 | 	add	local17, local16
0b748     02 46 66 F0 | 	shl	local17, #2
0b74c     03 00 00 FF 
0b750     00 E4 85 F1 | 	sub	objptr, ##1536
0b754     F2 46 02 F1 | 	add	local17, objptr
0b758     08 46 06 F1 | 	add	local17, #8
0b75c     23 3F 62 FC | 	wrlong	local13, local17
0b760     03 00 00 FF 
0b764     00 E4 05 F1 | 	add	objptr, ##1536
0b768     F2 38 02 FB | 	rdlong	local10, objptr
0b76c     01 38 06 F1 | 	add	local10, #1
0b770     F2 38 62 FC | 	wrlong	local10, objptr
0b774     4A 00 00 FF 
0b778     7C E4 85 F1 | 	sub	objptr, ##38012
0b77c                 | LR__0948
0b77c                 | ' return 0
0b77c     00 FA 05 F6 | 	mov	result1, #0
0b780                 | LR__0949
0b780     A7 F0 03 F6 | 	mov	ptra, fp
0b784     B2 00 A0 FD | 	call	#popregs_
0b788                 | _getvar_ret
0b788     2D 00 64 FD | 	ret
0b78c                 | 
0b78c                 | ' 
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' 
0b78c                 | ' 
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' '                                                                                                                                       -
0b78c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b78c                 | ' '                                                                                                                                       -
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' 
0b78c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b78c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' 
0b78c                 | ' function execute_line (astart=0 as integer) as integer
0b78c                 | _execute_line
0b78c     04 4A 05 F6 | 	mov	COUNT_, #4
0b790     A8 00 A0 FD | 	call	#pushregs_
0b794     50 00 00 FF 
0b798     BC E4 05 F1 | 	add	objptr, ##41148
0b79c     F2 00 68 FC | 	wrlong	#0, objptr
0b7a0                 | ' 
0b7a0                 | ' runptr2=0
0b7a0                 | ' for lineptr_e=astart to lineptr-1
0b7a0     06 00 00 FF 
0b7a4     3C E4 85 F1 | 	sub	objptr, ##3132
0b7a8     F2 12 62 FC | 	wrlong	arg01, objptr
0b7ac     04 E4 85 F1 | 	sub	objptr, #4
0b7b0     F2 26 02 FB | 	rdlong	local01, objptr
0b7b4     4A 00 00 FF 
0b7b8     7C E4 85 F1 | 	sub	objptr, ##38012
0b7bc                 | LR__0950
0b7bc     4A 00 00 FF 
0b7c0     80 E4 05 F1 | 	add	objptr, ##38016
0b7c4     F2 FA 01 FB | 	rdlong	result1, objptr
0b7c8     4A 00 00 FF 
0b7cc     80 E4 85 F1 | 	sub	objptr, ##38016
0b7d0     13 FB 51 F2 | 	cmps	result1, local01 wc
0b7d4     98 00 90 3D |  if_ae	jmp	#LR__0951
0b7d8     4A 00 00 FF 
0b7dc     80 E4 05 F1 | 	add	objptr, ##38016
0b7e0     F2 FA 01 FB | 	rdlong	result1, objptr
0b7e4     FD 28 02 F6 | 	mov	local02, result1
0b7e8     01 28 66 F0 | 	shl	local02, #1
0b7ec     FD 28 02 F1 | 	add	local02, result1
0b7f0     02 28 66 F0 | 	shl	local02, #2
0b7f4     03 00 00 FF 
0b7f8     04 E4 85 F1 | 	sub	objptr, ##1540
0b7fc     F2 28 02 F1 | 	add	local02, objptr
0b800     08 28 06 F1 | 	add	local02, #8
0b804     14 29 02 FB | 	rdlong	local02, local02
0b808     14 29 E2 F8 | 	getbyte	local02, local02, #0
0b80c     02 28 66 F0 | 	shl	local02, #2
0b810     04 00 00 FF 
0b814     1C E4 85 F1 | 	sub	objptr, ##2076
0b818     F2 28 02 F1 | 	add	local02, objptr
0b81c     14 29 02 FB | 	rdlong	local02, local02
0b820     14 2B 02 F6 | 	mov	local03, local02
0b824     13 28 46 F7 | 	zerox	local02, #19
0b828     14 2A 46 F0 | 	shr	local03, #20
0b82c     02 2A 66 F0 | 	shl	local03, #2
0b830     ED 2A 02 F1 | 	add	local03, __methods__
0b834     15 2B 02 FB | 	rdlong	local03, local03
0b838     43 00 00 FF 
0b83c     60 E4 85 F1 | 	sub	objptr, ##34400
0b840     F2 2C 02 F6 | 	mov	local04, objptr
0b844     14 E5 01 F6 | 	mov	objptr, local02
0b848     2D 2A 62 FD | 	call	local03
0b84c     16 E5 01 F6 | 	mov	objptr, local04
0b850     4A 00 00 FF 
0b854     80 E4 05 F1 | 	add	objptr, ##38016
0b858     F2 2C 02 FB | 	rdlong	local04, objptr
0b85c     01 2C 06 F1 | 	add	local04, #1
0b860     F2 2C 62 FC | 	wrlong	local04, objptr
0b864     4A 00 00 FF 
0b868     80 E4 85 F1 | 	sub	objptr, ##38016
0b86c     4C FF 9F FD | 	jmp	#LR__0950
0b870                 | LR__0951
0b870                 | ' return runptr2
0b870     50 00 00 FF 
0b874     BC E4 05 F1 | 	add	objptr, ##41148
0b878     F2 FA 01 FB | 	rdlong	result1, objptr
0b87c     50 00 00 FF 
0b880     BC E4 85 F1 | 	sub	objptr, ##41148
0b884     A7 F0 03 F6 | 	mov	ptra, fp
0b888     B2 00 A0 FD | 	call	#popregs_
0b88c                 | _execute_line_ret
0b88c     2D 00 64 FD | 	ret
0b890                 | 
0b890                 | ' 
0b890                 | ' 
0b890                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b890                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b890                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b890                 | ' 
0b890                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b890                 | ' 
0b890                 | ' function pop() as expr_result
0b890                 | _pop
0b890                 | ' if stackpointer=0 then
0b890     43 00 00 FF 
0b894     58 E4 05 F1 | 	add	objptr, ##34392
0b898     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b89c     43 00 00 FF 
0b8a0     58 E4 85 F1 | 	sub	objptr, ##34392
0b8a4     FF 04 06 A6 |  if_e	mov	_var03, #255
0b8a8     18 00 06 A6 |  if_e	mov	_var01, #24
0b8ac     68 00 90 AD |  if_e	jmp	#LR__0960
0b8b0     43 00 00 FF 
0b8b4     58 E4 05 F1 | 	add	objptr, ##34392
0b8b8     F2 FA 01 FB | 	rdlong	result1, objptr
0b8bc     01 FA 85 F1 | 	sub	result1, #1
0b8c0     F2 FA 61 FC | 	wrlong	result1, objptr
0b8c4     FD FE 01 F6 | 	mov	result3, result1
0b8c8     01 FE 65 F0 | 	shl	result3, #1
0b8cc     FD FE 01 F1 | 	add	result3, result1
0b8d0     02 FE 65 F0 | 	shl	result3, #2
0b8d4     0C 00 00 FF 
0b8d8     0C E4 85 F1 | 	sub	objptr, ##6156
0b8dc     F2 FE 01 F1 | 	add	result3, objptr
0b8e0     FF 00 02 FB | 	rdlong	_var01, result3
0b8e4     04 FE 05 F1 | 	add	result3, #4
0b8e8     FF FE 01 FB | 	rdlong	result3, result3
0b8ec     FD FC 01 F6 | 	mov	result2, result1
0b8f0     01 FC 65 F0 | 	shl	result2, #1
0b8f4     FD FC 01 F1 | 	add	result2, result1
0b8f8     02 FC 65 F0 | 	shl	result2, #2
0b8fc     F2 FC 01 F1 | 	add	result2, objptr
0b900     08 FC 05 F1 | 	add	result2, #8
0b904     FE FA 01 FB | 	rdlong	result1, result2
0b908     FF 02 02 F6 | 	mov	_var02, result3
0b90c     FD 04 02 F6 | 	mov	_var03, result1
0b910     37 00 00 FF 
0b914     4C E4 85 F1 | 	sub	objptr, ##28236
0b918                 | LR__0960
0b918                 | ' return t1
0b918     01 FD 01 F6 | 	mov	result2, _var02
0b91c     02 FF 01 F6 | 	mov	result3, _var03
0b920     00 FB 01 F6 | 	mov	result1, _var01
0b924                 | _pop_ret
0b924     2D 00 64 FD | 	ret
0b928                 | 
0b928                 | ' 
0b928                 | ' sub push(t1 as expr_result )
0b928                 | _push
0b928                 | ' if stackpointer<maxstack then 
0b928     43 00 00 FF 
0b92c     58 E4 05 F1 | 	add	objptr, ##34392
0b930     F2 00 02 FB | 	rdlong	_var01, objptr
0b934     43 00 00 FF 
0b938     58 E4 85 F1 | 	sub	objptr, ##34392
0b93c     01 00 00 FF 
0b940     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b944     BC 00 90 3D |  if_ae	jmp	#LR__0970
0b948     09 01 02 FB | 	rdlong	_var01, arg01
0b94c     04 12 06 F1 | 	add	arg01, #4
0b950     09 03 02 FB | 	rdlong	_var02, arg01
0b954     04 12 06 F1 | 	add	arg01, #4
0b958     09 13 02 FB | 	rdlong	arg01, arg01
0b95c     43 00 00 FF 
0b960     58 E4 05 F1 | 	add	objptr, ##34392
0b964     F2 04 02 FB | 	rdlong	_var03, objptr
0b968     02 07 02 F6 | 	mov	_var04, _var03
0b96c     01 06 66 F0 | 	shl	_var04, #1
0b970     02 07 02 F1 | 	add	_var04, _var03
0b974     02 06 66 F0 | 	shl	_var04, #2
0b978     0C 00 00 FF 
0b97c     0C E4 85 F1 | 	sub	objptr, ##6156
0b980     F2 06 02 F1 | 	add	_var04, objptr
0b984     03 01 62 FC | 	wrlong	_var01, _var04
0b988     0C 00 00 FF 
0b98c     0C E4 05 F1 | 	add	objptr, ##6156
0b990     F2 06 02 FB | 	rdlong	_var04, objptr
0b994     03 05 02 F6 | 	mov	_var03, _var04
0b998     01 04 66 F0 | 	shl	_var03, #1
0b99c     03 05 02 F1 | 	add	_var03, _var04
0b9a0     02 04 66 F0 | 	shl	_var03, #2
0b9a4     0C 00 00 FF 
0b9a8     0C E4 85 F1 | 	sub	objptr, ##6156
0b9ac     F2 04 02 F1 | 	add	_var03, objptr
0b9b0     04 04 06 F1 | 	add	_var03, #4
0b9b4     02 03 62 FC | 	wrlong	_var02, _var03
0b9b8     0C 00 00 FF 
0b9bc     0C E4 05 F1 | 	add	objptr, ##6156
0b9c0     F2 06 02 FB | 	rdlong	_var04, objptr
0b9c4     03 05 02 F6 | 	mov	_var03, _var04
0b9c8     01 04 66 F0 | 	shl	_var03, #1
0b9cc     03 05 02 F1 | 	add	_var03, _var04
0b9d0     02 04 66 F0 | 	shl	_var03, #2
0b9d4     0C 00 00 FF 
0b9d8     0C E4 85 F1 | 	sub	objptr, ##6156
0b9dc     F2 04 02 F1 | 	add	_var03, objptr
0b9e0     08 04 06 F1 | 	add	_var03, #8
0b9e4     02 13 62 FC | 	wrlong	arg01, _var03
0b9e8     0C 00 00 FF 
0b9ec     0C E4 05 F1 | 	add	objptr, ##6156
0b9f0     F2 00 02 FB | 	rdlong	_var01, objptr
0b9f4     01 00 06 F1 | 	add	_var01, #1
0b9f8     F2 00 62 FC | 	wrlong	_var01, objptr
0b9fc     43 00 00 FF 
0ba00     58 E4 85 F1 | 	sub	objptr, ##34392
0ba04                 | LR__0970
0ba04                 | _push_ret
0ba04     2D 00 64 FD | 	ret
0ba08                 | 
0ba08                 | ' 
0ba08                 | ' ' -------------------------------- Runtime converting functions
0ba08                 | ' 
0ba08                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0ba08                 | ' 
0ba08                 | ' function  convertstring(psaddr as ulong) as string
0ba08                 | _convertstring
0ba08     04 4A 05 F6 | 	mov	COUNT_, #4
0ba0c     A8 00 A0 FD | 	call	#pushregs_
0ba10     09 27 02 F6 | 	mov	local01, arg01
0ba14     98 2B B1 FD | 	call	#_pslpeek
0ba18     FD 28 02 F6 | 	mov	local02, result1
0ba1c     8F 01 00 FF 
0ba20     2B 2A 06 F6 | 	mov	local03, ##@LR__5540
0ba24                 | ' l=pslpeek(psaddr)
0ba24                 | ' s="" 
0ba24                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ba24     01 2C 06 F6 | 	mov	local04, #1
0ba28     01 28 06 F1 | 	add	local02, #1
0ba2c                 | LR__0980
0ba2c     14 2D 52 F2 | 	cmps	local04, local02 wc
0ba30     30 00 90 3D |  if_ae	jmp	#LR__0981
0ba34     13 13 02 F6 | 	mov	arg01, local01
0ba38     03 12 06 F1 | 	add	arg01, #3
0ba3c     16 13 02 F1 | 	add	arg01, local04
0ba40     14 2B B1 FD | 	call	#_pspeek
0ba44     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ba48     08 84 B1 FD | 	call	#__system__Chr_S
0ba4c     FD 14 02 F6 | 	mov	arg02, result1
0ba50     15 13 02 F6 | 	mov	arg01, local03
0ba54     18 62 B1 FD | 	call	#__system___string_concat
0ba58     FD 2A 02 F6 | 	mov	local03, result1
0ba5c     01 2C 06 F1 | 	add	local04, #1
0ba60     C8 FF 9F FD | 	jmp	#LR__0980
0ba64                 | LR__0981
0ba64                 | ' return s
0ba64     15 FB 01 F6 | 	mov	result1, local03
0ba68     A7 F0 03 F6 | 	mov	ptra, fp
0ba6c     B2 00 A0 FD | 	call	#popregs_
0ba70                 | _convertstring_ret
0ba70     2D 00 64 FD | 	ret
0ba74                 | 
0ba74                 | ' 
0ba74                 | ' ' converts a variable to an integer
0ba74                 | ' 
0ba74                 | ' function converttoint (t1 as expr_result) as integer 
0ba74                 | _converttoint
0ba74     02 4A 05 F6 | 	mov	COUNT_, #2
0ba78     A8 00 A0 FD | 	call	#pushregs_
0ba7c     09 27 02 F6 | 	mov	local01, arg01
0ba80                 | ' 
0ba80                 | ' select case t1.result_type
0ba80     08 26 06 F1 | 	add	local01, #8
0ba84     13 29 02 FB | 	rdlong	local02, local01
0ba88     08 26 86 F1 | 	sub	local01, #8
0ba8c     1C 28 0E F2 | 	cmp	local02, #28 wz
0ba90     2C 00 90 AD |  if_e	jmp	#LR__0990
0ba94     1D 28 0E F2 | 	cmp	local02, #29 wz
0ba98     2C 00 90 AD |  if_e	jmp	#LR__0991
0ba9c     1E 28 0E F2 | 	cmp	local02, #30 wz
0baa0     2C 00 90 AD |  if_e	jmp	#LR__0992
0baa4     1F 28 0E F2 | 	cmp	local02, #31 wz
0baa8     34 00 90 AD |  if_e	jmp	#LR__0993
0baac     2B 28 0E F2 | 	cmp	local02, #43 wz
0bab0     44 00 90 AD |  if_e	jmp	#LR__0994
0bab4     2C 28 0E F2 | 	cmp	local02, #44 wz
0bab8     5C 00 90 AD |  if_e	jmp	#LR__0995
0babc     60 00 90 FD | 	jmp	#LR__0996
0bac0                 | LR__0990
0bac0     13 FB 01 FB | 	rdlong	result1, local01
0bac4     5C 00 90 FD | 	jmp	#LR__0997
0bac8                 | LR__0991
0bac8     13 FB 01 FB | 	rdlong	result1, local01
0bacc     54 00 90 FD | 	jmp	#LR__0997
0bad0                 | LR__0992
0bad0     13 13 02 FB | 	rdlong	arg01, local01
0bad4     01 14 06 F6 | 	mov	arg02, #1
0bad8     BC 93 B1 FD | 	call	#__system___float_tointeger
0badc     44 00 90 FD | 	jmp	#LR__0997
0bae0                 | LR__0993
0bae0     13 13 02 FB | 	rdlong	arg01, local01
0bae4     F4 96 B1 FD | 	call	#__system____builtin_atof
0bae8     FD 12 02 F6 | 	mov	arg01, result1
0baec     01 14 06 F6 | 	mov	arg02, #1
0baf0     A4 93 B1 FD | 	call	#__system___float_tointeger
0baf4     2C 00 90 FD | 	jmp	#LR__0997
0baf8                 | LR__0994
0baf8     13 13 02 FB | 	rdlong	arg01, local01
0bafc     08 FF BF FD | 	call	#_convertstring
0bb00     FD 12 02 F6 | 	mov	arg01, result1
0bb04     D4 96 B1 FD | 	call	#__system____builtin_atof
0bb08     FD 12 02 F6 | 	mov	arg01, result1
0bb0c     01 14 06 F6 | 	mov	arg02, #1
0bb10     84 93 B1 FD | 	call	#__system___float_tointeger
0bb14     0C 00 90 FD | 	jmp	#LR__0997
0bb18                 | LR__0995
0bb18     13 FB 01 FB | 	rdlong	result1, local01
0bb1c     04 00 90 FD | 	jmp	#LR__0997
0bb20                 | LR__0996
0bb20     00 FA 05 F6 | 	mov	result1, #0
0bb24                 | LR__0997
0bb24     A7 F0 03 F6 | 	mov	ptra, fp
0bb28     B2 00 A0 FD | 	call	#popregs_
0bb2c                 | _converttoint_ret
0bb2c     2D 00 64 FD | 	ret
0bb30                 | 
0bb30                 | ' 
0bb30                 | ' ' converts a variable to float
0bb30                 | ' 
0bb30                 | ' function converttofloat (t1 as expr_result) as single
0bb30                 | _converttofloat
0bb30     03 4A 05 F6 | 	mov	COUNT_, #3
0bb34     A8 00 A0 FD | 	call	#pushregs_
0bb38     09 27 02 F6 | 	mov	local01, arg01
0bb3c                 | ' 
0bb3c                 | ' select case t1.result_type
0bb3c     08 26 06 F1 | 	add	local01, #8
0bb40     13 29 02 FB | 	rdlong	local02, local01
0bb44     08 26 86 F1 | 	sub	local01, #8
0bb48     1C 28 0E F2 | 	cmp	local02, #28 wz
0bb4c     24 00 90 AD |  if_e	jmp	#LR__1000
0bb50     1D 28 0E F2 | 	cmp	local02, #29 wz
0bb54     38 00 90 AD |  if_e	jmp	#LR__1001
0bb58     1E 28 0E F2 | 	cmp	local02, #30 wz
0bb5c     3C 00 90 AD |  if_e	jmp	#LR__1002
0bb60     1F 28 0E F2 | 	cmp	local02, #31 wz
0bb64     3C 00 90 AD |  if_e	jmp	#LR__1003
0bb68     2B 28 0E F2 | 	cmp	local02, #43 wz
0bb6c     40 00 90 AD |  if_e	jmp	#LR__1004
0bb70     50 00 90 FD | 	jmp	#LR__1005
0bb74                 | LR__1000
0bb74     13 13 02 FB | 	rdlong	arg01, local01
0bb78     09 13 52 F6 | 	abs	arg01, arg01 wc
0bb7c     1F 2A C6 C9 |  if_b	decod	local03, #31
0bb80     00 2A 06 36 |  if_ae	mov	local03, #0
0bb84     44 8A B1 FD | 	call	#__system___float_fromuns
0bb88     15 FB 61 F5 | 	xor	result1, local03
0bb8c     38 00 90 FD | 	jmp	#LR__1006
0bb90                 | LR__1001
0bb90     13 13 02 FB | 	rdlong	arg01, local01
0bb94     34 8A B1 FD | 	call	#__system___float_fromuns
0bb98     2C 00 90 FD | 	jmp	#LR__1006
0bb9c                 | LR__1002
0bb9c     13 FB 01 FB | 	rdlong	result1, local01
0bba0     24 00 90 FD | 	jmp	#LR__1006
0bba4                 | LR__1003
0bba4     13 13 02 FB | 	rdlong	arg01, local01
0bba8     30 96 B1 FD | 	call	#__system____builtin_atof
0bbac     18 00 90 FD | 	jmp	#LR__1006
0bbb0                 | LR__1004
0bbb0     13 13 02 FB | 	rdlong	arg01, local01
0bbb4     50 FE BF FD | 	call	#_convertstring
0bbb8     FD 12 02 F6 | 	mov	arg01, result1
0bbbc     1C 96 B1 FD | 	call	#__system____builtin_atof
0bbc0     04 00 90 FD | 	jmp	#LR__1006
0bbc4                 | LR__1005
0bbc4     00 FA 05 F6 | 	mov	result1, #0
0bbc8                 | LR__1006
0bbc8     A7 F0 03 F6 | 	mov	ptra, fp
0bbcc     B2 00 A0 FD | 	call	#popregs_
0bbd0                 | _converttofloat_ret
0bbd0     2D 00 64 FD | 	ret
0bbd4                 | 
0bbd4                 | ' 
0bbd4                 | ' '----------------- End of converting 
0bbd4                 | ' 
0bbd4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bbd4                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0bbd4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bbd4                 | ' 
0bbd4                 | ' sub csave_block(address as ulong)
0bbd4                 | _csave_block
0bbd4     09 01 02 F6 | 	mov	_var01, arg01
0bbd8                 | ' 
0bbd8                 | ' for i=0 to 63 step 2
0bbd8     00 02 06 F6 | 	mov	_var02, #0
0bbdc                 | LR__1010
0bbdc                 | '   do: loop until lpeek(base+64*7)>32768
0bbdc     37 00 00 FF 
0bbe0     10 E4 05 F1 | 	add	objptr, ##28176
0bbe4     97 0C 48 FB | 	callpa	#(@LR__1012-@LR__1011)>>2,fcache_load_ptr_
0bbe8                 | LR__1011
0bbe8     F2 12 02 FB | 	rdlong	arg01, objptr
0bbec     C0 13 06 F1 | 	add	arg01, #448
0bbf0     09 FB 01 FB | 	rdlong	result1, arg01
0bbf4     40 00 00 FF 
0bbf8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bbfc     E8 FF 9F CD |  if_b	jmp	#LR__1011
0bc00                 | LR__1012
0bc00     00 13 02 F6 | 	mov	arg01, _var01
0bc04     01 05 02 F6 | 	mov	_var03, _var02
0bc08     02 04 66 F0 | 	shl	_var03, #2
0bc0c     02 13 02 F1 | 	add	arg01, _var03
0bc10     09 07 02 FB | 	rdlong	_var04, arg01
0bc14     1B 00 00 FF 
0bc18     04 E4 05 F1 | 	add	objptr, ##13828
0bc1c     F2 06 62 FC | 	wrlong	_var04, objptr
0bc20     52 00 00 FF 
0bc24     14 E4 85 F1 | 	sub	objptr, ##42004
0bc28                 | '   q=lpeek(address+4*i)
0bc28                 | '      for bit=0 to 31
0bc28     00 08 06 F6 | 	mov	_var05, #0
0bc2c     97 84 48 FB | 	callpa	#(@LR__1017-@LR__1013)>>2,fcache_load_ptr_
0bc30                 | LR__1013
0bc30                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bc30     52 00 00 FF 
0bc34     14 E4 05 F1 | 	add	objptr, ##42004
0bc38     F2 06 02 FB | 	rdlong	_var04, objptr
0bc3c     52 00 00 FF 
0bc40     14 E4 85 F1 | 	sub	objptr, ##42004
0bc44     04 05 C2 F9 | 	decod	_var03, _var05
0bc48     02 07 CA F7 | 	test	_var04, _var03 wz
0bc4c     60 00 90 AD |  if_e	jmp	#LR__1014
0bc50     04 05 02 F6 | 	mov	_var03, _var05
0bc54     02 04 66 F0 | 	shl	_var03, #2
0bc58     4D 00 00 FF 
0bc5c     B4 E5 05 F1 | 	add	objptr, ##39860
0bc60     F2 04 02 F1 | 	add	_var03, objptr
0bc64     02 FF 48 FC | 	wrbyte	#127, _var03
0bc68     04 05 02 F6 | 	mov	_var03, _var05
0bc6c     02 04 66 F0 | 	shl	_var03, #2
0bc70     01 04 06 F1 | 	add	_var03, #1
0bc74     F2 04 02 F1 | 	add	_var03, objptr
0bc78     02 01 49 FC | 	wrbyte	#128, _var03
0bc7c     04 05 02 F6 | 	mov	_var03, _var05
0bc80     02 04 66 F0 | 	shl	_var03, #2
0bc84     02 04 06 F1 | 	add	_var03, #2
0bc88     F2 04 02 F1 | 	add	_var03, objptr
0bc8c     02 FF 48 FC | 	wrbyte	#127, _var03
0bc90     04 05 02 F6 | 	mov	_var03, _var05
0bc94     02 04 66 F0 | 	shl	_var03, #2
0bc98     03 04 06 F1 | 	add	_var03, #3
0bc9c     F2 04 02 F1 | 	add	_var03, objptr
0bca0     02 01 49 FC | 	wrbyte	#128, _var03
0bca4     4D 00 00 FF 
0bca8     B4 E5 85 F1 | 	sub	objptr, ##39860
0bcac     5C 00 90 FD | 	jmp	#LR__1015
0bcb0                 | LR__1014
0bcb0     04 05 02 F6 | 	mov	_var03, _var05
0bcb4     02 04 66 F0 | 	shl	_var03, #2
0bcb8     4D 00 00 FF 
0bcbc     B4 E5 05 F1 | 	add	objptr, ##39860
0bcc0     F2 04 02 F1 | 	add	_var03, objptr
0bcc4     02 01 49 FC | 	wrbyte	#128, _var03
0bcc8     04 05 02 F6 | 	mov	_var03, _var05
0bccc     02 04 66 F0 | 	shl	_var03, #2
0bcd0     01 04 06 F1 | 	add	_var03, #1
0bcd4     F2 04 02 F1 | 	add	_var03, objptr
0bcd8     02 01 49 FC | 	wrbyte	#128, _var03
0bcdc     04 05 02 F6 | 	mov	_var03, _var05
0bce0     02 04 66 F0 | 	shl	_var03, #2
0bce4     02 04 06 F1 | 	add	_var03, #2
0bce8     F2 04 02 F1 | 	add	_var03, objptr
0bcec     02 FF 48 FC | 	wrbyte	#127, _var03
0bcf0     04 05 02 F6 | 	mov	_var03, _var05
0bcf4     02 04 66 F0 | 	shl	_var03, #2
0bcf8     03 04 06 F1 | 	add	_var03, #3
0bcfc     F2 04 02 F1 | 	add	_var03, objptr
0bd00     02 FF 48 FC | 	wrbyte	#127, _var03
0bd04     4D 00 00 FF 
0bd08     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd0c                 | LR__1015
0bd0c     01 08 06 F1 | 	add	_var05, #1
0bd10     20 08 56 F2 | 	cmps	_var05, #32 wc
0bd14     18 FF 9F CD |  if_b	jmp	#LR__1013
0bd18                 | '   do: loop until lpeek(base+64*7)<32768
0bd18     37 00 00 FF 
0bd1c     10 E4 05 F1 | 	add	objptr, ##28176
0bd20                 | LR__1016
0bd20     F2 12 02 FB | 	rdlong	arg01, objptr
0bd24     C0 13 06 F1 | 	add	arg01, #448
0bd28     09 FB 01 FB | 	rdlong	result1, arg01
0bd2c     40 00 00 FF 
0bd30     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bd34     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0bd38                 | LR__1017
0bd38     00 13 02 F6 | 	mov	arg01, _var01
0bd3c     04 12 06 F1 | 	add	arg01, #4
0bd40     01 05 02 F6 | 	mov	_var03, _var02
0bd44     02 04 66 F0 | 	shl	_var03, #2
0bd48     02 13 02 F1 | 	add	arg01, _var03
0bd4c     09 07 02 FB | 	rdlong	_var04, arg01
0bd50     1B 00 00 FF 
0bd54     04 E4 05 F1 | 	add	objptr, ##13828
0bd58     F2 06 62 FC | 	wrlong	_var04, objptr
0bd5c     52 00 00 FF 
0bd60     14 E4 85 F1 | 	sub	objptr, ##42004
0bd64                 | '   q=lpeek(address+4+4*i)
0bd64                 | '      for bit=0 to 31
0bd64     00 08 06 F6 | 	mov	_var05, #0
0bd68     97 94 48 FB | 	callpa	#(@LR__1021-@LR__1018)>>2,fcache_load_ptr_
0bd6c                 | LR__1018
0bd6c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bd6c     52 00 00 FF 
0bd70     14 E4 05 F1 | 	add	objptr, ##42004
0bd74     F2 06 02 FB | 	rdlong	_var04, objptr
0bd78     52 00 00 FF 
0bd7c     14 E4 85 F1 | 	sub	objptr, ##42004
0bd80     04 05 C2 F9 | 	decod	_var03, _var05
0bd84     02 07 CA F7 | 	test	_var04, _var03 wz
0bd88     80 00 90 AD |  if_e	jmp	#LR__1019
0bd8c     04 0B 02 F6 | 	mov	_var06, _var05
0bd90     02 0A 66 F0 | 	shl	_var06, #2
0bd94     80 04 06 F6 | 	mov	_var03, #128
0bd98     05 05 02 F1 | 	add	_var03, _var06
0bd9c     4D 00 00 FF 
0bda0     B4 E5 05 F1 | 	add	objptr, ##39860
0bda4     F2 04 02 F1 | 	add	_var03, objptr
0bda8     02 FF 48 FC | 	wrbyte	#127, _var03
0bdac     04 0B 02 F6 | 	mov	_var06, _var05
0bdb0     02 0A 66 F0 | 	shl	_var06, #2
0bdb4     80 04 06 F6 | 	mov	_var03, #128
0bdb8     05 05 02 F1 | 	add	_var03, _var06
0bdbc     01 04 06 F1 | 	add	_var03, #1
0bdc0     F2 04 02 F1 | 	add	_var03, objptr
0bdc4     02 01 49 FC | 	wrbyte	#128, _var03
0bdc8     04 0B 02 F6 | 	mov	_var06, _var05
0bdcc     02 0A 66 F0 | 	shl	_var06, #2
0bdd0     80 04 06 F6 | 	mov	_var03, #128
0bdd4     05 05 02 F1 | 	add	_var03, _var06
0bdd8     02 04 06 F1 | 	add	_var03, #2
0bddc     F2 04 02 F1 | 	add	_var03, objptr
0bde0     02 FF 48 FC | 	wrbyte	#127, _var03
0bde4     04 0B 02 F6 | 	mov	_var06, _var05
0bde8     02 0A 66 F0 | 	shl	_var06, #2
0bdec     80 04 06 F6 | 	mov	_var03, #128
0bdf0     05 05 02 F1 | 	add	_var03, _var06
0bdf4     03 04 06 F1 | 	add	_var03, #3
0bdf8     F2 04 02 F1 | 	add	_var03, objptr
0bdfc     02 01 49 FC | 	wrbyte	#128, _var03
0be00     4D 00 00 FF 
0be04     B4 E5 85 F1 | 	sub	objptr, ##39860
0be08     7C 00 90 FD | 	jmp	#LR__1020
0be0c                 | LR__1019
0be0c     04 0B 02 F6 | 	mov	_var06, _var05
0be10     02 0A 66 F0 | 	shl	_var06, #2
0be14     80 04 06 F6 | 	mov	_var03, #128
0be18     05 05 02 F1 | 	add	_var03, _var06
0be1c     4D 00 00 FF 
0be20     B4 E5 05 F1 | 	add	objptr, ##39860
0be24     F2 04 02 F1 | 	add	_var03, objptr
0be28     02 01 49 FC | 	wrbyte	#128, _var03
0be2c     04 0B 02 F6 | 	mov	_var06, _var05
0be30     02 0A 66 F0 | 	shl	_var06, #2
0be34     80 04 06 F6 | 	mov	_var03, #128
0be38     05 05 02 F1 | 	add	_var03, _var06
0be3c     01 04 06 F1 | 	add	_var03, #1
0be40     F2 04 02 F1 | 	add	_var03, objptr
0be44     02 01 49 FC | 	wrbyte	#128, _var03
0be48     04 0B 02 F6 | 	mov	_var06, _var05
0be4c     02 0A 66 F0 | 	shl	_var06, #2
0be50     80 04 06 F6 | 	mov	_var03, #128
0be54     05 05 02 F1 | 	add	_var03, _var06
0be58     02 04 06 F1 | 	add	_var03, #2
0be5c     F2 04 02 F1 | 	add	_var03, objptr
0be60     02 FF 48 FC | 	wrbyte	#127, _var03
0be64     04 0B 02 F6 | 	mov	_var06, _var05
0be68     02 0A 66 F0 | 	shl	_var06, #2
0be6c     80 04 06 F6 | 	mov	_var03, #128
0be70     05 05 02 F1 | 	add	_var03, _var06
0be74     03 04 06 F1 | 	add	_var03, #3
0be78     F2 04 02 F1 | 	add	_var03, objptr
0be7c     02 FF 48 FC | 	wrbyte	#127, _var03
0be80     4D 00 00 FF 
0be84     B4 E5 85 F1 | 	sub	objptr, ##39860
0be88                 | LR__1020
0be88     01 08 06 F1 | 	add	_var05, #1
0be8c     20 08 56 F2 | 	cmps	_var05, #32 wc
0be90     D8 FE 9F CD |  if_b	jmp	#LR__1018
0be94                 | LR__1021
0be94     02 02 06 F1 | 	add	_var02, #2
0be98     40 02 56 F2 | 	cmps	_var02, #64 wc
0be9c     3C FD 9F CD |  if_b	jmp	#LR__1010
0bea0                 | ' do: loop until lpeek(base+64*7)>32768
0bea0     37 00 00 FF 
0bea4     10 E4 05 F1 | 	add	objptr, ##28176
0bea8     97 84 48 FB | 	callpa	#(@LR__1030-@LR__1022)>>2,fcache_load_ptr_
0beac                 | LR__1022
0beac     F2 12 02 FB | 	rdlong	arg01, objptr
0beb0     C0 13 06 F1 | 	add	arg01, #448
0beb4     09 FB 01 FB | 	rdlong	result1, arg01
0beb8     40 00 00 FF 
0bebc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bec0     E8 FF 9F CD |  if_b	jmp	#LR__1022
0bec4     37 00 00 FF 
0bec8     10 E4 85 F1 | 	sub	objptr, ##28176
0becc                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0becc     00 02 06 F6 | 	mov	_var02, #0
0bed0                 | LR__1023
0bed0     01 07 52 F6 | 	abs	_var04, _var02 wc
0bed4     07 06 06 F5 | 	and	_var04, #7
0bed8     03 07 82 F6 | 	negc	_var04, _var04
0bedc     04 06 56 F2 | 	cmps	_var04, #4 wc
0bee0     20 00 90 3D |  if_ae	jmp	#LR__1024
0bee4     01 0B 02 F6 | 	mov	_var06, _var02
0bee8     4D 00 00 FF 
0beec     B4 E5 05 F1 | 	add	objptr, ##39860
0bef0     F2 0A 02 F1 | 	add	_var06, objptr
0bef4     05 FF 48 FC | 	wrbyte	#127, _var06
0bef8     4D 00 00 FF 
0befc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf00     1C 00 90 FD | 	jmp	#LR__1025
0bf04                 | LR__1024
0bf04     01 0B 02 F6 | 	mov	_var06, _var02
0bf08     4D 00 00 FF 
0bf0c     B4 E5 05 F1 | 	add	objptr, ##39860
0bf10     F2 0A 02 F1 | 	add	_var06, objptr
0bf14     05 01 49 FC | 	wrbyte	#128, _var06
0bf18     4D 00 00 FF 
0bf1c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf20                 | LR__1025
0bf20     01 02 06 F1 | 	add	_var02, #1
0bf24     80 02 56 F2 | 	cmps	_var02, #128 wc
0bf28     A4 FF 9F CD |  if_b	jmp	#LR__1023
0bf2c                 | ' 
0bf2c                 | ' do: loop until lpeek(base+64*7)<32768
0bf2c     37 00 00 FF 
0bf30     10 E4 05 F1 | 	add	objptr, ##28176
0bf34                 | LR__1026
0bf34     F2 12 02 FB | 	rdlong	arg01, objptr
0bf38     C0 13 06 F1 | 	add	arg01, #448
0bf3c     09 FB 01 FB | 	rdlong	result1, arg01
0bf40     40 00 00 FF 
0bf44     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bf48     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0bf4c     37 00 00 FF 
0bf50     10 E4 85 F1 | 	sub	objptr, ##28176
0bf54                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bf54     80 02 06 F6 | 	mov	_var02, #128
0bf58                 | LR__1027
0bf58     01 07 52 F6 | 	abs	_var04, _var02 wc
0bf5c     07 06 06 F5 | 	and	_var04, #7
0bf60     03 07 82 F6 | 	negc	_var04, _var04
0bf64     04 06 56 F2 | 	cmps	_var04, #4 wc
0bf68     20 00 90 3D |  if_ae	jmp	#LR__1028
0bf6c     01 0B 02 F6 | 	mov	_var06, _var02
0bf70     4D 00 00 FF 
0bf74     B4 E5 05 F1 | 	add	objptr, ##39860
0bf78     F2 0A 02 F1 | 	add	_var06, objptr
0bf7c     05 FF 48 FC | 	wrbyte	#127, _var06
0bf80     4D 00 00 FF 
0bf84     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf88     1C 00 90 FD | 	jmp	#LR__1029
0bf8c                 | LR__1028
0bf8c     01 0B 02 F6 | 	mov	_var06, _var02
0bf90     4D 00 00 FF 
0bf94     B4 E5 05 F1 | 	add	objptr, ##39860
0bf98     F2 0A 02 F1 | 	add	_var06, objptr
0bf9c     05 01 49 FC | 	wrbyte	#128, _var06
0bfa0     4D 00 00 FF 
0bfa4     B4 E5 85 F1 | 	sub	objptr, ##39860
0bfa8                 | LR__1029
0bfa8     01 02 06 F1 | 	add	_var02, #1
0bfac     00 03 16 F2 | 	cmp	_var02, #256 wc
0bfb0     A4 FF 9F CD |  if_b	jmp	#LR__1027
0bfb4                 | LR__1030
0bfb4                 | _csave_block_ret
0bfb4     2D 00 64 FD | 	ret
0bfb8                 | 
0bfb8                 | ' 
0bfb8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0bfb8                 | _csave_addtoblock
0bfb8     04 4A 05 F6 | 	mov	COUNT_, #4
0bfbc     A8 00 A0 FD | 	call	#pushregs_
0bfc0     09 27 02 F6 | 	mov	local01, arg01
0bfc4                 | ' 
0bfc4                 | ' if force=0 then
0bfc4     07 14 4E F7 | 	zerox	arg02, #7 wz
0bfc8     78 00 90 5D |  if_ne	jmp	#LR__1040
0bfcc     50 00 00 FF 
0bfd0     B4 E4 05 F1 | 	add	objptr, ##41140
0bfd4     F2 14 02 FB | 	rdlong	arg02, objptr
0bfd8     02 00 00 FF 
0bfdc     00 E4 85 F1 | 	sub	objptr, ##1024
0bfe0     F2 14 02 F1 | 	add	arg02, objptr
0bfe4     0A 27 42 FC | 	wrbyte	local01, arg02
0bfe8     02 00 00 FF 
0bfec     00 E4 05 F1 | 	add	objptr, ##1024
0bff0     F2 26 02 FB | 	rdlong	local01, objptr
0bff4     01 26 06 F1 | 	add	local01, #1
0bff8     F2 26 62 FC | 	wrlong	local01, objptr
0bffc                 | '   block(blockptr)=d
0bffc                 | '   blockptr+=1
0bffc                 | '   if blockptr>=255 then
0bffc     50 00 00 FF 
0c000     B4 E4 85 F1 | 	sub	objptr, ##41140
0c004     FF 26 16 F2 | 	cmp	local01, #255 wc
0c008     E4 00 90 CD |  if_b	jmp	#LR__1044
0c00c     4E 00 00 FF 
0c010     B4 E4 05 F1 | 	add	objptr, ##40116
0c014     F2 12 02 F6 | 	mov	arg01, objptr
0c018     4E 00 00 FF 
0c01c     B4 E4 85 F1 | 	sub	objptr, ##40116
0c020     B0 FB BF FD | 	call	#_csave_block
0c024     50 00 00 FF 
0c028     B4 E4 05 F1 | 	add	objptr, ##41140
0c02c     F2 00 68 FC | 	wrlong	#0, objptr
0c030     50 00 00 FF 
0c034     B4 E4 85 F1 | 	sub	objptr, ##41140
0c038     2C 13 06 F6 | 	mov	arg01, #300
0c03c     C8 5E B1 FD | 	call	#__system___waitms
0c040     AC 00 90 FD | 	jmp	#LR__1044
0c044                 | LR__1040
0c044     50 00 00 FF 
0c048     B4 E4 05 F1 | 	add	objptr, ##41140
0c04c     F2 28 02 FB | 	rdlong	local02, objptr
0c050     02 00 00 FF 
0c054     00 E4 85 F1 | 	sub	objptr, ##1024
0c058     F2 28 02 F1 | 	add	local02, objptr
0c05c     14 27 42 FC | 	wrbyte	local01, local02
0c060                 | '   block(blockptr)=d
0c060                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c060     02 00 00 FF 
0c064     00 E4 05 F1 | 	add	objptr, ##1024
0c068     F2 2A 02 FB | 	rdlong	local03, objptr
0c06c     50 00 00 FF 
0c070     B4 E4 85 F1 | 	sub	objptr, ##41140
0c074     FF 2A 16 F2 | 	cmp	local03, #255 wc
0c078     40 00 90 3D |  if_ae	jmp	#LR__1043
0c07c     50 00 00 FF 
0c080     B4 E4 05 F1 | 	add	objptr, ##41140
0c084     F2 2C 02 FB | 	rdlong	local04, objptr
0c088     50 00 00 FF 
0c08c     B4 E4 85 F1 | 	sub	objptr, ##41140
0c090                 | LR__1041
0c090     00 2D 56 F2 | 	cmps	local04, #256 wc
0c094     24 00 90 3D |  if_ae	jmp	#LR__1042
0c098     16 29 02 F6 | 	mov	local02, local04
0c09c     4E 00 00 FF 
0c0a0     B4 E4 05 F1 | 	add	objptr, ##40116
0c0a4     F2 28 02 F1 | 	add	local02, objptr
0c0a8     14 01 48 FC | 	wrbyte	#0, local02
0c0ac     01 2C 06 F1 | 	add	local04, #1
0c0b0     4E 00 00 FF 
0c0b4     B4 E4 85 F1 | 	sub	objptr, ##40116
0c0b8     D4 FF 9F FD | 	jmp	#LR__1041
0c0bc                 | LR__1042
0c0bc                 | LR__1043
0c0bc     4E 00 00 FF 
0c0c0     B4 E4 05 F1 | 	add	objptr, ##40116
0c0c4     F2 12 02 F6 | 	mov	arg01, objptr
0c0c8     4E 00 00 FF 
0c0cc     B4 E4 85 F1 | 	sub	objptr, ##40116
0c0d0     00 FB BF FD | 	call	#_csave_block
0c0d4     50 00 00 FF 
0c0d8     B4 E4 05 F1 | 	add	objptr, ##41140
0c0dc     F2 00 68 FC | 	wrlong	#0, objptr
0c0e0     50 00 00 FF 
0c0e4     B4 E4 85 F1 | 	sub	objptr, ##41140
0c0e8     2C 13 06 F6 | 	mov	arg01, #300
0c0ec     18 5E B1 FD | 	call	#__system___waitms
0c0f0                 | LR__1044
0c0f0     A7 F0 03 F6 | 	mov	ptra, fp
0c0f4     B2 00 A0 FD | 	call	#popregs_
0c0f8                 | _csave_addtoblock_ret
0c0f8     2D 00 64 FD | 	ret
0c0fc                 | 
0c0fc                 | ' 
0c0fc                 | ' '----------------------- csave
0c0fc                 | ' 
0c0fc                 | ' sub test_csave
0c0fc                 | _test_csave
0c0fc     04 4A 05 F6 | 	mov	COUNT_, #4
0c100     A8 00 A0 FD | 	call	#pushregs_
0c104     C0 F0 07 F1 | 	add	ptra, #192
0c108                 | ' 'dim fileheader,savestart, saveptr as ulong
0c108                 | ' 
0c108                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c108     4A 00 00 FF 
0c10c     88 E4 05 F1 | 	add	objptr, ##38024
0c110     F2 12 02 FB | 	rdlong	arg01, objptr
0c114     4A 00 00 FF 
0c118     88 E4 85 F1 | 	sub	objptr, ##38024
0c11c     90 24 B1 FD | 	call	#_pslpeek
0c120     FF FF 7F FF 
0c124     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c128     10 00 90 5D |  if_ne	jmp	#LR__1050
0c12c     1B 12 06 F6 | 	mov	arg01, #27
0c130     00 14 06 F6 | 	mov	arg02, #0
0c134     BC 21 B1 FD | 	call	#_printerror
0c138     1C 03 90 FD | 	jmp	#LR__1064
0c13c                 | LR__1050
0c13c     50 F7 BF FD | 	call	#_pop
0c140     90 4E 05 F1 | 	add	fp, #144
0c144     A7 FA 61 FC | 	wrlong	result1, fp
0c148     04 4E 05 F1 | 	add	fp, #4
0c14c     A7 FC 61 FC | 	wrlong	result2, fp
0c150     04 4E 05 F1 | 	add	fp, #4
0c154     A7 FE 61 FC | 	wrlong	result3, fp
0c158                 | ' t1=pop()
0c158                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c158     98 4E 85 F1 | 	sub	fp, #152
0c15c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c160     24 00 90 AD |  if_e	jmp	#LR__1051
0c164     51 00 00 FF 
0c168     D8 E5 05 F1 | 	add	objptr, ##41944
0c16c     F2 1C 02 FB | 	rdlong	arg06, objptr
0c170     51 00 00 FF 
0c174     D8 E5 85 F1 | 	sub	objptr, ##41944
0c178     8C 4E 05 F1 | 	add	fp, #140
0c17c     A7 1C 62 FC | 	wrlong	arg06, fp
0c180     8C 4E 85 F1 | 	sub	fp, #140
0c184     14 00 90 FD | 	jmp	#LR__1052
0c188                 | LR__1051
0c188     90 4E 05 F1 | 	add	fp, #144
0c18c     A7 1C 02 FB | 	rdlong	arg06, fp
0c190     04 4E 85 F1 | 	sub	fp, #4
0c194     A7 1C 62 FC | 	wrlong	arg06, fp
0c198     8C 4E 85 F1 | 	sub	fp, #140
0c19c                 | LR__1052
0c19c                 | ' 
0c19c                 | ' ' prepare 1 kHz header wave
0c19c                 | ' 
0c19c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c19c     A7 00 68 FC | 	wrlong	#0, fp
0c1a0     97 34 48 FB | 	callpa	#(@LR__1056-@LR__1053)>>2,fcache_load_ptr_
0c1a4                 | LR__1053
0c1a4     A7 1C 02 FB | 	rdlong	arg06, fp
0c1a8     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c1ac     07 1A 06 F5 | 	and	arg05, #7
0c1b0     0D 1B 82 F6 | 	negc	arg05, arg05
0c1b4     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c1b8     20 00 90 3D |  if_ae	jmp	#LR__1054
0c1bc     A7 1A 02 FB | 	rdlong	arg05, fp
0c1c0     4D 00 00 FF 
0c1c4     B4 E5 05 F1 | 	add	objptr, ##39860
0c1c8     F2 1A 02 F1 | 	add	arg05, objptr
0c1cc     0D FF 48 FC | 	wrbyte	#127, arg05
0c1d0     4D 00 00 FF 
0c1d4     B4 E5 85 F1 | 	sub	objptr, ##39860
0c1d8     1C 00 90 FD | 	jmp	#LR__1055
0c1dc                 | LR__1054
0c1dc     A7 1A 02 FB | 	rdlong	arg05, fp
0c1e0     4D 00 00 FF 
0c1e4     B4 E5 05 F1 | 	add	objptr, ##39860
0c1e8     F2 1A 02 F1 | 	add	arg05, objptr
0c1ec     0D 01 49 FC | 	wrbyte	#128, arg05
0c1f0     4D 00 00 FF 
0c1f4     B4 E5 85 F1 | 	sub	objptr, ##39860
0c1f8                 | LR__1055
0c1f8     A7 1A 02 FB | 	rdlong	arg05, fp
0c1fc     01 1A 06 F1 | 	add	arg05, #1
0c200     A7 1A 62 FC | 	wrlong	arg05, fp
0c204     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c208     98 FF 9F CD |  if_b	jmp	#LR__1053
0c20c                 | LR__1056
0c20c     4D 00 00 FF 
0c210     B4 E5 05 F1 | 	add	objptr, ##39860
0c214     F2 14 02 F6 | 	mov	arg02, objptr
0c218     07 12 06 F6 | 	mov	arg01, #7
0c21c     0F 00 00 FF 
0c220     40 17 06 F6 | 	mov	arg03, ##8000
0c224     0E 18 C6 F9 | 	decod	arg04, #14
0c228     00 1B 06 F6 | 	mov	arg05, #256
0c22c     00 1C 06 F6 | 	mov	arg06, #0
0c230     42 00 00 FF 
0c234     E8 E4 85 F1 | 	sub	objptr, ##34024
0c238     34 56 B1 FD | 	call	#_audio096_spin2_play8
0c23c     0B 00 00 FF 
0c240     CC E4 85 F1 | 	sub	objptr, ##5836
0c244     05 00 00 FF 
0c248     B8 13 06 F6 | 	mov	arg01, ##3000
0c24c     B8 5C B1 FD | 	call	#__system___waitms
0c250     50 00 00 FF 
0c254     B4 E4 05 F1 | 	add	objptr, ##41140
0c258     F2 00 68 FC | 	wrlong	#0, objptr
0c25c     50 00 00 FF 
0c260     B4 E4 85 F1 | 	sub	objptr, ##41140
0c264     72 12 06 F6 | 	mov	arg01, #114
0c268     00 14 06 F6 | 	mov	arg02, #0
0c26c     48 FD BF FD | 	call	#_csave_addtoblock
0c270     62 12 06 F6 | 	mov	arg01, #98
0c274     00 14 06 F6 | 	mov	arg02, #0
0c278     3C FD BF FD | 	call	#_csave_addtoblock
0c27c     61 12 06 F6 | 	mov	arg01, #97
0c280     00 14 06 F6 | 	mov	arg02, #0
0c284     30 FD BF FD | 	call	#_csave_addtoblock
0c288     0D 12 06 F6 | 	mov	arg01, #13
0c28c     00 14 06 F6 | 	mov	arg02, #0
0c290     24 FD BF FD | 	call	#_csave_addtoblock
0c294                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c294                 | ' waitms 3000 
0c294                 | ' 
0c294                 | ' blockptr=0
0c294                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c294                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c294     A7 02 68 FC | 	wrlong	#1, fp
0c298     8C 4E 05 F1 | 	add	fp, #140
0c29c     A7 12 02 FB | 	rdlong	arg01, fp
0c2a0     8C 4E 85 F1 | 	sub	fp, #140
0c2a4     09 27 02 F6 | 	mov	local01, arg01
0c2a8     97 06 48 FB | 	callpa	#(@LR__1058-@LR__1057)>>2,fcache_load_ptr_
0c2ac                 | LR__1057
0c2ac     13 FB C9 FA | 	rdbyte	result1, local01 wz
0c2b0     01 26 06 51 |  if_ne	add	local01, #1
0c2b4     F4 FF 9F 5D |  if_ne	jmp	#LR__1057
0c2b8                 | LR__1058
0c2b8     09 27 82 F1 | 	sub	local01, arg01
0c2bc     13 29 02 F6 | 	mov	local02, local01
0c2c0     01 28 06 F1 | 	add	local02, #1
0c2c4                 | LR__1059
0c2c4     A7 1A 02 FB | 	rdlong	arg05, fp
0c2c8     14 1B 52 F2 | 	cmps	arg05, local02 wc
0c2cc     34 00 90 3D |  if_ae	jmp	#LR__1060
0c2d0     8C 4E 05 F1 | 	add	fp, #140
0c2d4     A7 12 02 FB | 	rdlong	arg01, fp
0c2d8     8C 4E 85 F1 | 	sub	fp, #140
0c2dc     A7 14 02 FB | 	rdlong	arg02, fp
0c2e0     01 16 06 F6 | 	mov	arg03, #1
0c2e4     C0 7A B1 FD | 	call	#__system__Mid_S
0c2e8     FD 12 C2 FA | 	rdbyte	arg01, result1
0c2ec     00 14 06 F6 | 	mov	arg02, #0
0c2f0     C4 FC BF FD | 	call	#_csave_addtoblock
0c2f4     A7 1A 02 FB | 	rdlong	arg05, fp
0c2f8     01 1A 06 F1 | 	add	arg05, #1
0c2fc     A7 1A 62 FC | 	wrlong	arg05, fp
0c300     C0 FF 9F FD | 	jmp	#LR__1059
0c304                 | LR__1060
0c304     00 12 06 F6 | 	mov	arg01, #0
0c308     00 14 06 F6 | 	mov	arg02, #0
0c30c     A8 FC BF FD | 	call	#_csave_addtoblock
0c310     72 12 06 F6 | 	mov	arg01, #114
0c314     00 14 06 F6 | 	mov	arg02, #0
0c318     9C FC BF FD | 	call	#_csave_addtoblock
0c31c     62 12 06 F6 | 	mov	arg01, #98
0c320     00 14 06 F6 | 	mov	arg02, #0
0c324     90 FC BF FD | 	call	#_csave_addtoblock
0c328     73 12 06 F6 | 	mov	arg01, #115
0c32c     00 14 06 F6 | 	mov	arg02, #0
0c330     84 FC BF FD | 	call	#_csave_addtoblock
0c334     0D 12 06 F6 | 	mov	arg01, #13
0c338     00 14 06 F6 | 	mov	arg02, #0
0c33c     78 FC BF FD | 	call	#_csave_addtoblock
0c340     4A 00 00 FF 
0c344     88 E4 05 F1 | 	add	objptr, ##38024
0c348     F2 2A 02 FB | 	rdlong	local03, objptr
0c34c     4A 00 00 FF 
0c350     88 E4 85 F1 | 	sub	objptr, ##38024
0c354     9C 4E 05 F1 | 	add	fp, #156
0c358     A7 2A 62 FC | 	wrlong	local03, fp
0c35c     9C 4E 85 F1 | 	sub	fp, #156
0c360                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c360                 | ' 
0c360                 | ' saveptr=programstart
0c360                 | ' do
0c360                 | LR__1061
0c360     A0 4E 05 F1 | 	add	fp, #160
0c364     A7 12 02 F6 | 	mov	arg01, fp
0c368     04 4E 85 F1 | 	sub	fp, #4
0c36c     A7 14 02 FB | 	rdlong	arg02, fp
0c370     9C 4E 85 F1 | 	sub	fp, #156
0c374     18 16 06 F6 | 	mov	arg03, #24
0c378     0B 00 00 FF 
0c37c     CC E4 05 F1 | 	add	objptr, ##5836
0c380     50 4C B1 FD | 	call	#_psram_spin2_read1
0c384     0C 4E 05 F1 | 	add	fp, #12
0c388     A7 12 02 F6 | 	mov	arg01, fp
0c38c     9C 4E 05 F1 | 	add	fp, #156
0c390     A7 14 02 FB | 	rdlong	arg02, fp
0c394     04 4E 05 F1 | 	add	fp, #4
0c398     A7 16 02 FB | 	rdlong	arg03, fp
0c39c     AC 4E 85 F1 | 	sub	fp, #172
0c3a0     30 4C B1 FD | 	call	#_psram_spin2_read1
0c3a4     0B 00 00 FF 
0c3a8     CC E4 85 F1 | 	sub	objptr, ##5836
0c3ac     AC 4E 05 F1 | 	add	fp, #172
0c3b0     A7 12 02 FB | 	rdlong	arg01, fp
0c3b4     AC 4E 85 F1 | 	sub	fp, #172
0c3b8     00 14 06 F6 | 	mov	arg02, #0
0c3bc     F8 FB BF FD | 	call	#_csave_addtoblock
0c3c0                 | ' 
0c3c0                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c3c0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c3c0                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c3c0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c3c0     A7 00 68 FC | 	wrlong	#0, fp
0c3c4     AC 4E 05 F1 | 	add	fp, #172
0c3c8     A7 2C 02 FB | 	rdlong	local04, fp
0c3cc     AC 4E 85 F1 | 	sub	fp, #172
0c3d0                 | LR__1062
0c3d0     A7 2A 02 FB | 	rdlong	local03, fp
0c3d4     16 2B 52 F2 | 	cmps	local03, local04 wc
0c3d8     2C 00 90 3D |  if_ae	jmp	#LR__1063
0c3dc     A7 2A 02 FB | 	rdlong	local03, fp
0c3e0     0C 4E 05 F1 | 	add	fp, #12
0c3e4     A7 2A 02 F1 | 	add	local03, fp
0c3e8     15 13 C2 FA | 	rdbyte	arg01, local03
0c3ec     00 14 06 F6 | 	mov	arg02, #0
0c3f0     0C 4E 85 F1 | 	sub	fp, #12
0c3f4     C0 FB BF FD | 	call	#_csave_addtoblock
0c3f8     A7 2A 02 FB | 	rdlong	local03, fp
0c3fc     01 2A 06 F1 | 	add	local03, #1
0c400     A7 2A 62 FC | 	wrlong	local03, fp
0c404     C8 FF 9F FD | 	jmp	#LR__1062
0c408                 | LR__1063
0c408     B4 4E 05 F1 | 	add	fp, #180
0c40c     A7 2A 02 FB | 	rdlong	local03, fp
0c410     18 4E 85 F1 | 	sub	fp, #24
0c414     A7 2A 62 FC | 	wrlong	local03, fp
0c418     18 4E 05 F1 | 	add	fp, #24
0c41c     A7 2A 02 FB | 	rdlong	local03, fp
0c420     B4 4E 85 F1 | 	sub	fp, #180
0c424     FF FF 3F FF 
0c428     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0c42c     30 FF 9F 5D |  if_ne	jmp	#LR__1061
0c430     00 12 06 F6 | 	mov	arg01, #0
0c434     01 14 06 F6 | 	mov	arg02, #1
0c438     7C FB BF FD | 	call	#_csave_addtoblock
0c43c     37 00 00 FF 
0c440     10 E4 05 F1 | 	add	objptr, ##28176
0c444     F2 12 02 FB | 	rdlong	arg01, objptr
0c448     37 00 00 FF 
0c44c     10 E4 85 F1 | 	sub	objptr, ##28176
0c450     D4 13 06 F1 | 	add	arg01, #468
0c454     09 01 58 FC | 	wrword	#0, arg01
0c458                 | LR__1064
0c458     A7 F0 03 F6 | 	mov	ptra, fp
0c45c     B2 00 A0 FD | 	call	#popregs_
0c460                 | _test_csave_ret
0c460     2D 00 64 FD | 	ret
0c464                 | 
0c464                 | ' 
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' 
0c464                 | ' 
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' 
0c464                 | ' '-------------------- abs
0c464                 | ' 
0c464                 | ' sub do_abs
0c464                 | _do_abs
0c464     01 4A 05 F6 | 	mov	COUNT_, #1
0c468     A8 00 A0 FD | 	call	#pushregs_
0c46c     0C F0 07 F1 | 	add	ptra, #12
0c470     1C F4 BF FD | 	call	#_pop
0c474     FF 26 02 F6 | 	mov	local01, result3
0c478     A7 FA 61 FC | 	wrlong	result1, fp
0c47c     04 4E 05 F1 | 	add	fp, #4
0c480     A7 FC 61 FC | 	wrlong	result2, fp
0c484     04 4E 05 F1 | 	add	fp, #4
0c488     A7 26 62 FC | 	wrlong	local01, fp
0c48c                 | ' 
0c48c                 | ' t1=pop()
0c48c                 | ' if t1.result_type=result_int then 
0c48c     08 4E 85 F1 | 	sub	fp, #8
0c490     1C 26 0E F2 | 	cmp	local01, #28 wz
0c494     A7 12 02 AB |  if_e	rdlong	arg01, fp
0c498     09 27 42 A6 |  if_e	abs	local01, arg01
0c49c     A7 26 62 AC |  if_e	wrlong	local01, fp
0c4a0     2C 00 90 AD |  if_e	jmp	#LR__1070
0c4a4     08 4E 05 F1 | 	add	fp, #8
0c4a8     A7 26 02 FB | 	rdlong	local01, fp
0c4ac     08 4E 85 F1 | 	sub	fp, #8
0c4b0     1E 26 0E F2 | 	cmp	local01, #30 wz
0c4b4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0c4b8     1F FA 05 A4 |  if_e	bitl	result1, #31
0c4bc     A7 FA 61 AC |  if_e	wrlong	result1, fp
0c4c0     08 4E 05 51 |  if_ne	add	fp, #8
0c4c4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c4c8     08 4E 85 51 |  if_ne	sub	fp, #8
0c4cc     A7 50 68 5C |  if_ne	wrlong	#40, fp
0c4d0                 | LR__1070
0c4d0     A7 12 02 F6 | 	mov	arg01, fp
0c4d4     50 F4 BF FD | 	call	#_push
0c4d8     A7 F0 03 F6 | 	mov	ptra, fp
0c4dc     B2 00 A0 FD | 	call	#popregs_
0c4e0                 | _do_abs_ret
0c4e0     2D 00 64 FD | 	ret
0c4e4                 | 
0c4e4                 | ' 
0c4e4                 | ' '-------------------- acos
0c4e4                 | ' 
0c4e4                 | ' sub do_acos
0c4e4                 | _do_acos
0c4e4     01 4A 05 F6 | 	mov	COUNT_, #1
0c4e8     A8 00 A0 FD | 	call	#pushregs_
0c4ec     10 F0 07 F1 | 	add	ptra, #16
0c4f0     4A 00 00 FF 
0c4f4     80 E4 05 F1 | 	add	objptr, ##38016
0c4f8     F2 26 02 FB | 	rdlong	local01, objptr
0c4fc     13 17 02 F6 | 	mov	arg03, local01
0c500     01 16 66 F0 | 	shl	arg03, #1
0c504     13 17 02 F1 | 	add	arg03, local01
0c508     02 16 66 F0 | 	shl	arg03, #2
0c50c     03 00 00 FF 
0c510     04 E4 85 F1 | 	sub	objptr, ##1540
0c514     F2 16 02 F1 | 	add	arg03, objptr
0c518     0B 17 02 FB | 	rdlong	arg03, arg03
0c51c     0C 4E 05 F1 | 	add	fp, #12
0c520     A7 16 62 FC | 	wrlong	arg03, fp
0c524                 | ' 
0c524                 | ' numpar=compiledline(lineptr_e).result.uresult
0c524                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c524     0C 4E 85 F1 | 	sub	fp, #12
0c528     02 16 16 F2 | 	cmp	arg03, #2 wc
0c52c     47 00 00 FF 
0c530     7C E4 85 F1 | 	sub	objptr, ##36476
0c534     0C 4E 05 C1 |  if_b	add	fp, #12
0c538     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c53c     0C 4E 85 C1 |  if_b	sub	fp, #12
0c540     40 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c544     00 12 06 F6 | 	mov	arg01, #0
0c548     F4 B3 B1 FD | 	call	#__system___getiolock_0574
0c54c     FD 12 02 F6 | 	mov	arg01, result1
0c550     C0 56 B1 FD | 	call	#__system___lockmem
0c554     8F 01 00 FF 
0c558     2C 14 06 F6 | 	mov	arg02, ##@LR__5541
0c55c     00 12 06 F6 | 	mov	arg01, #0
0c560     00 16 06 F6 | 	mov	arg03, #0
0c564     A0 63 B1 FD | 	call	#__system___basic_print_string
0c568     00 12 06 F6 | 	mov	arg01, #0
0c56c     D0 B3 B1 FD | 	call	#__system___getiolock_0574
0c570     FD 00 68 FC | 	wrlong	#0, result1
0c574     27 12 06 F6 | 	mov	arg01, #39
0c578     00 14 06 F6 | 	mov	arg02, #0
0c57c     74 1D B1 FD | 	call	#_printerror
0c580     64 00 90 FD | 	jmp	#LR__1081
0c584                 | LR__1080
0c584     08 F3 BF FD | 	call	#_pop
0c588     FF 26 02 F6 | 	mov	local01, result3
0c58c     A7 FA 61 FC | 	wrlong	result1, fp
0c590     04 4E 05 F1 | 	add	fp, #4
0c594     A7 FC 61 FC | 	wrlong	result2, fp
0c598     04 4E 05 F1 | 	add	fp, #4
0c59c     A7 26 62 FC | 	wrlong	local01, fp
0c5a0     08 4E 85 F1 | 	sub	fp, #8
0c5a4     A7 12 02 F6 | 	mov	arg01, fp
0c5a8     84 F5 BF FD | 	call	#_converttofloat
0c5ac     FD 12 02 F6 | 	mov	arg01, result1
0c5b0     5C 8F B1 FD | 	call	#__system____builtin_acosf
0c5b4     FD 12 02 F6 | 	mov	arg01, result1
0c5b8     51 00 00 FF 
0c5bc     C0 E5 05 F1 | 	add	objptr, ##41920
0c5c0     F2 14 02 FB | 	rdlong	arg02, objptr
0c5c4     51 00 00 FF 
0c5c8     C0 E5 85 F1 | 	sub	objptr, ##41920
0c5cc     00 84 B1 FD | 	call	#__system___float_mul
0c5d0     A7 FA 61 FC | 	wrlong	result1, fp
0c5d4     08 4E 05 F1 | 	add	fp, #8
0c5d8     A7 3C 68 FC | 	wrlong	#30, fp
0c5dc     08 4E 85 F1 | 	sub	fp, #8
0c5e0     A7 12 02 F6 | 	mov	arg01, fp
0c5e4     40 F3 BF FD | 	call	#_push
0c5e8                 | LR__1081
0c5e8     A7 F0 03 F6 | 	mov	ptra, fp
0c5ec     B2 00 A0 FD | 	call	#popregs_
0c5f0                 | _do_acos_ret
0c5f0     2D 00 64 FD | 	ret
0c5f4                 | 
0c5f4                 | ' 
0c5f4                 | ' '-------------------- asc
0c5f4                 | ' 
0c5f4                 | ' sub do_asc
0c5f4                 | _do_asc
0c5f4     01 4A 05 F6 | 	mov	COUNT_, #1
0c5f8     A8 00 A0 FD | 	call	#pushregs_
0c5fc     14 F0 07 F1 | 	add	ptra, #20
0c600     4A 00 00 FF 
0c604     80 E4 05 F1 | 	add	objptr, ##38016
0c608     F2 26 02 FB | 	rdlong	local01, objptr
0c60c     13 17 02 F6 | 	mov	arg03, local01
0c610     01 16 66 F0 | 	shl	arg03, #1
0c614     13 17 02 F1 | 	add	arg03, local01
0c618     02 16 66 F0 | 	shl	arg03, #2
0c61c     03 00 00 FF 
0c620     04 E4 85 F1 | 	sub	objptr, ##1540
0c624     F2 16 02 F1 | 	add	arg03, objptr
0c628     0B 17 02 FB | 	rdlong	arg03, arg03
0c62c     0C 4E 05 F1 | 	add	fp, #12
0c630     A7 16 62 FC | 	wrlong	arg03, fp
0c634                 | ' 
0c634                 | ' numpar=compiledline(lineptr_e).result.uresult
0c634                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c634     0C 4E 85 F1 | 	sub	fp, #12
0c638     02 16 16 F2 | 	cmp	arg03, #2 wc
0c63c     47 00 00 FF 
0c640     7C E4 85 F1 | 	sub	objptr, ##36476
0c644     0C 4E 05 C1 |  if_b	add	fp, #12
0c648     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c64c     0C 4E 85 C1 |  if_b	sub	fp, #12
0c650     40 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c654     00 12 06 F6 | 	mov	arg01, #0
0c658     E4 B2 B1 FD | 	call	#__system___getiolock_0574
0c65c     FD 12 02 F6 | 	mov	arg01, result1
0c660     B0 55 B1 FD | 	call	#__system___lockmem
0c664     8F 01 00 FF 
0c668     33 14 06 F6 | 	mov	arg02, ##@LR__5542
0c66c     00 12 06 F6 | 	mov	arg01, #0
0c670     00 16 06 F6 | 	mov	arg03, #0
0c674     90 62 B1 FD | 	call	#__system___basic_print_string
0c678     00 12 06 F6 | 	mov	arg01, #0
0c67c     C0 B2 B1 FD | 	call	#__system___getiolock_0574
0c680     FD 00 68 FC | 	wrlong	#0, result1
0c684     27 12 06 F6 | 	mov	arg01, #39
0c688     00 14 06 F6 | 	mov	arg02, #0
0c68c     64 1C B1 FD | 	call	#_printerror
0c690     B4 00 90 FD | 	jmp	#LR__1093
0c694                 | LR__1090
0c694     F8 F1 BF FD | 	call	#_pop
0c698     FF 16 02 F6 | 	mov	arg03, result3
0c69c     A7 FA 61 FC | 	wrlong	result1, fp
0c6a0     04 4E 05 F1 | 	add	fp, #4
0c6a4     A7 FC 61 FC | 	wrlong	result2, fp
0c6a8     04 4E 05 F1 | 	add	fp, #4
0c6ac     A7 16 62 FC | 	wrlong	arg03, fp
0c6b0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c6b0     08 4E 85 F1 | 	sub	fp, #8
0c6b4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c6b8     18 00 90 5D |  if_ne	jmp	#LR__1091
0c6bc     A7 12 02 FB | 	rdlong	arg01, fp
0c6c0     44 F3 BF FD | 	call	#_convertstring
0c6c4     A7 FA 61 FC | 	wrlong	result1, fp
0c6c8     08 4E 05 F1 | 	add	fp, #8
0c6cc     A7 3E 68 FC | 	wrlong	#31, fp
0c6d0     08 4E 85 F1 | 	sub	fp, #8
0c6d4                 | LR__1091
0c6d4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c6d4     08 4E 05 F1 | 	add	fp, #8
0c6d8     A7 16 02 FB | 	rdlong	arg03, fp
0c6dc     08 4E 85 F1 | 	sub	fp, #8
0c6e0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c6e4     40 00 90 AD |  if_e	jmp	#LR__1092
0c6e8     00 12 06 F6 | 	mov	arg01, #0
0c6ec     50 B2 B1 FD | 	call	#__system___getiolock_0574
0c6f0     FD 12 02 F6 | 	mov	arg01, result1
0c6f4     1C 55 B1 FD | 	call	#__system___lockmem
0c6f8     8F 01 00 FF 
0c6fc     39 14 06 F6 | 	mov	arg02, ##@LR__5543
0c700     00 12 06 F6 | 	mov	arg01, #0
0c704     00 16 06 F6 | 	mov	arg03, #0
0c708     FC 61 B1 FD | 	call	#__system___basic_print_string
0c70c     00 12 06 F6 | 	mov	arg01, #0
0c710     2C B2 B1 FD | 	call	#__system___getiolock_0574
0c714     FD 00 68 FC | 	wrlong	#0, result1
0c718     0F 12 06 F6 | 	mov	arg01, #15
0c71c     00 14 06 F6 | 	mov	arg02, #0
0c720     D0 1B B1 FD | 	call	#_printerror
0c724     20 00 90 FD | 	jmp	#LR__1093
0c728                 | LR__1092
0c728     A7 26 02 FB | 	rdlong	local01, fp
0c72c     13 27 C2 FA | 	rdbyte	local01, local01
0c730     A7 26 62 FC | 	wrlong	local01, fp
0c734     08 4E 05 F1 | 	add	fp, #8
0c738     A7 38 68 FC | 	wrlong	#28, fp
0c73c     08 4E 85 F1 | 	sub	fp, #8
0c740     A7 12 02 F6 | 	mov	arg01, fp
0c744     E0 F1 BF FD | 	call	#_push
0c748                 | LR__1093
0c748     A7 F0 03 F6 | 	mov	ptra, fp
0c74c     B2 00 A0 FD | 	call	#popregs_
0c750                 | _do_asc_ret
0c750     2D 00 64 FD | 	ret
0c754                 | 
0c754                 | ' 
0c754                 | ' '-------------------- asin
0c754                 | ' 
0c754                 | ' sub do_asin
0c754                 | _do_asin
0c754     01 4A 05 F6 | 	mov	COUNT_, #1
0c758     A8 00 A0 FD | 	call	#pushregs_
0c75c     10 F0 07 F1 | 	add	ptra, #16
0c760     4A 00 00 FF 
0c764     80 E4 05 F1 | 	add	objptr, ##38016
0c768     F2 26 02 FB | 	rdlong	local01, objptr
0c76c     13 17 02 F6 | 	mov	arg03, local01
0c770     01 16 66 F0 | 	shl	arg03, #1
0c774     13 17 02 F1 | 	add	arg03, local01
0c778     02 16 66 F0 | 	shl	arg03, #2
0c77c     03 00 00 FF 
0c780     04 E4 85 F1 | 	sub	objptr, ##1540
0c784     F2 16 02 F1 | 	add	arg03, objptr
0c788     0B 17 02 FB | 	rdlong	arg03, arg03
0c78c     0C 4E 05 F1 | 	add	fp, #12
0c790     A7 16 62 FC | 	wrlong	arg03, fp
0c794                 | ' 
0c794                 | ' numpar=compiledline(lineptr_e).result.uresult
0c794                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c794     0C 4E 85 F1 | 	sub	fp, #12
0c798     02 16 16 F2 | 	cmp	arg03, #2 wc
0c79c     47 00 00 FF 
0c7a0     7C E4 85 F1 | 	sub	objptr, ##36476
0c7a4     0C 4E 05 C1 |  if_b	add	fp, #12
0c7a8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c7ac     0C 4E 85 C1 |  if_b	sub	fp, #12
0c7b0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c7b4     00 12 06 F6 | 	mov	arg01, #0
0c7b8     84 B1 B1 FD | 	call	#__system___getiolock_0574
0c7bc     FD 12 02 F6 | 	mov	arg01, result1
0c7c0     50 54 B1 FD | 	call	#__system___lockmem
0c7c4     8F 01 00 FF 
0c7c8     3F 14 06 F6 | 	mov	arg02, ##@LR__5544
0c7cc     00 12 06 F6 | 	mov	arg01, #0
0c7d0     00 16 06 F6 | 	mov	arg03, #0
0c7d4     30 61 B1 FD | 	call	#__system___basic_print_string
0c7d8     00 12 06 F6 | 	mov	arg01, #0
0c7dc     60 B1 B1 FD | 	call	#__system___getiolock_0574
0c7e0     FD 00 68 FC | 	wrlong	#0, result1
0c7e4     27 12 06 F6 | 	mov	arg01, #39
0c7e8     00 14 06 F6 | 	mov	arg02, #0
0c7ec     04 1B B1 FD | 	call	#_printerror
0c7f0     64 00 90 FD | 	jmp	#LR__1101
0c7f4                 | LR__1100
0c7f4     98 F0 BF FD | 	call	#_pop
0c7f8     FF 26 02 F6 | 	mov	local01, result3
0c7fc     A7 FA 61 FC | 	wrlong	result1, fp
0c800     04 4E 05 F1 | 	add	fp, #4
0c804     A7 FC 61 FC | 	wrlong	result2, fp
0c808     04 4E 05 F1 | 	add	fp, #4
0c80c     A7 26 62 FC | 	wrlong	local01, fp
0c810     08 4E 85 F1 | 	sub	fp, #8
0c814     A7 12 02 F6 | 	mov	arg01, fp
0c818     14 F3 BF FD | 	call	#_converttofloat
0c81c     FD 12 02 F6 | 	mov	arg01, result1
0c820     A0 8C B1 FD | 	call	#__system____builtin_asinf
0c824     FD 12 02 F6 | 	mov	arg01, result1
0c828     51 00 00 FF 
0c82c     C0 E5 05 F1 | 	add	objptr, ##41920
0c830     F2 14 02 FB | 	rdlong	arg02, objptr
0c834     51 00 00 FF 
0c838     C0 E5 85 F1 | 	sub	objptr, ##41920
0c83c     90 81 B1 FD | 	call	#__system___float_mul
0c840     A7 FA 61 FC | 	wrlong	result1, fp
0c844     08 4E 05 F1 | 	add	fp, #8
0c848     A7 3C 68 FC | 	wrlong	#30, fp
0c84c     08 4E 85 F1 | 	sub	fp, #8
0c850     A7 12 02 F6 | 	mov	arg01, fp
0c854     D0 F0 BF FD | 	call	#_push
0c858                 | LR__1101
0c858     A7 F0 03 F6 | 	mov	ptra, fp
0c85c     B2 00 A0 FD | 	call	#popregs_
0c860                 | _do_asin_ret
0c860     2D 00 64 FD | 	ret
0c864                 | 
0c864                 | ' 
0c864                 | ' '-------------------- atn
0c864                 | ' 
0c864                 | ' sub do_atn
0c864                 | _do_atn
0c864     01 4A 05 F6 | 	mov	COUNT_, #1
0c868     A8 00 A0 FD | 	call	#pushregs_
0c86c     10 F0 07 F1 | 	add	ptra, #16
0c870     4A 00 00 FF 
0c874     80 E4 05 F1 | 	add	objptr, ##38016
0c878     F2 26 02 FB | 	rdlong	local01, objptr
0c87c     13 17 02 F6 | 	mov	arg03, local01
0c880     01 16 66 F0 | 	shl	arg03, #1
0c884     13 17 02 F1 | 	add	arg03, local01
0c888     02 16 66 F0 | 	shl	arg03, #2
0c88c     03 00 00 FF 
0c890     04 E4 85 F1 | 	sub	objptr, ##1540
0c894     F2 16 02 F1 | 	add	arg03, objptr
0c898     0B 17 02 FB | 	rdlong	arg03, arg03
0c89c     0C 4E 05 F1 | 	add	fp, #12
0c8a0     A7 16 62 FC | 	wrlong	arg03, fp
0c8a4                 | ' 
0c8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c8a4                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c8a4     0C 4E 85 F1 | 	sub	fp, #12
0c8a8     02 16 16 F2 | 	cmp	arg03, #2 wc
0c8ac     47 00 00 FF 
0c8b0     7C E4 85 F1 | 	sub	objptr, ##36476
0c8b4     0C 4E 05 C1 |  if_b	add	fp, #12
0c8b8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c8bc     0C 4E 85 C1 |  if_b	sub	fp, #12
0c8c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1110
0c8c4     00 12 06 F6 | 	mov	arg01, #0
0c8c8     74 B0 B1 FD | 	call	#__system___getiolock_0574
0c8cc     FD 12 02 F6 | 	mov	arg01, result1
0c8d0     40 53 B1 FD | 	call	#__system___lockmem
0c8d4     8F 01 00 FF 
0c8d8     46 14 06 F6 | 	mov	arg02, ##@LR__5545
0c8dc     00 12 06 F6 | 	mov	arg01, #0
0c8e0     00 16 06 F6 | 	mov	arg03, #0
0c8e4     20 60 B1 FD | 	call	#__system___basic_print_string
0c8e8     00 12 06 F6 | 	mov	arg01, #0
0c8ec     50 B0 B1 FD | 	call	#__system___getiolock_0574
0c8f0     FD 00 68 FC | 	wrlong	#0, result1
0c8f4     27 12 06 F6 | 	mov	arg01, #39
0c8f8     00 14 06 F6 | 	mov	arg02, #0
0c8fc     F4 19 B1 FD | 	call	#_printerror
0c900     6C 00 90 FD | 	jmp	#LR__1111
0c904                 | LR__1110
0c904     88 EF BF FD | 	call	#_pop
0c908     FF 26 02 F6 | 	mov	local01, result3
0c90c     A7 FA 61 FC | 	wrlong	result1, fp
0c910     04 4E 05 F1 | 	add	fp, #4
0c914     A7 FC 61 FC | 	wrlong	result2, fp
0c918     04 4E 05 F1 | 	add	fp, #4
0c91c     A7 26 62 FC | 	wrlong	local01, fp
0c920     08 4E 85 F1 | 	sub	fp, #8
0c924     A7 12 02 F6 | 	mov	arg01, fp
0c928     04 F2 BF FD | 	call	#_converttofloat
0c92c     FD 12 02 F6 | 	mov	arg01, result1
0c930     00 C0 1F FF 
0c934     00 14 06 F6 | 	mov	arg02, ##1065353216
0c938     20 8C B1 FD | 	call	#__system____builtin_atan2f
0c93c     FD 12 02 F6 | 	mov	arg01, result1
0c940     51 00 00 FF 
0c944     C0 E5 05 F1 | 	add	objptr, ##41920
0c948     F2 14 02 FB | 	rdlong	arg02, objptr
0c94c     51 00 00 FF 
0c950     C0 E5 85 F1 | 	sub	objptr, ##41920
0c954     78 80 B1 FD | 	call	#__system___float_mul
0c958     A7 FA 61 FC | 	wrlong	result1, fp
0c95c     08 4E 05 F1 | 	add	fp, #8
0c960     A7 3C 68 FC | 	wrlong	#30, fp
0c964     08 4E 85 F1 | 	sub	fp, #8
0c968     A7 12 02 F6 | 	mov	arg01, fp
0c96c     B8 EF BF FD | 	call	#_push
0c970                 | LR__1111
0c970     A7 F0 03 F6 | 	mov	ptra, fp
0c974     B2 00 A0 FD | 	call	#popregs_
0c978                 | _do_atn_ret
0c978     2D 00 64 FD | 	ret
0c97c                 | 
0c97c                 | ' 
0c97c                 | ' '-------------------- beep
0c97c                 | ' 
0c97c                 | ' sub do_beep
0c97c                 | _do_beep
0c97c     02 4A 05 F6 | 	mov	COUNT_, #2
0c980     A8 00 A0 FD | 	call	#pushregs_
0c984     20 F0 07 F1 | 	add	ptra, #32
0c988     04 EF BF FD | 	call	#_pop
0c98c     FD 26 02 F6 | 	mov	local01, result1
0c990     FE 1C 02 F6 | 	mov	arg06, result2
0c994     FF 28 02 F6 | 	mov	local02, result3
0c998     0C 4E 05 F1 | 	add	fp, #12
0c99c     A7 26 62 FC | 	wrlong	local01, fp
0c9a0     04 4E 05 F1 | 	add	fp, #4
0c9a4     A7 1C 62 FC | 	wrlong	arg06, fp
0c9a8     04 4E 05 F1 | 	add	fp, #4
0c9ac     A7 28 62 FC | 	wrlong	local02, fp
0c9b0     14 4E 85 F1 | 	sub	fp, #20
0c9b4     D8 EE BF FD | 	call	#_pop
0c9b8     A7 FA 61 FC | 	wrlong	result1, fp
0c9bc     04 4E 05 F1 | 	add	fp, #4
0c9c0     A7 FC 61 FC | 	wrlong	result2, fp
0c9c4     04 4E 05 F1 | 	add	fp, #4
0c9c8     A7 FE 61 FC | 	wrlong	result3, fp
0c9cc                 | ' 
0c9cc                 | ' t2=pop()
0c9cc                 | ' t1=pop()
0c9cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c9cc     08 4E 85 F1 | 	sub	fp, #8
0c9d0     1C FE 0D F2 | 	cmp	result3, #28 wz
0c9d4     08 4E 05 51 |  if_ne	add	fp, #8
0c9d8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0c9dc     08 4E 85 51 |  if_ne	sub	fp, #8
0c9e0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0c9e4     A7 26 02 AB |  if_e	rdlong	local01, fp
0c9e8     18 4E 05 A1 |  if_e	add	fp, #24
0c9ec     A7 26 62 AC |  if_e	wrlong	local01, fp
0c9f0     18 4E 85 A1 |  if_e	sub	fp, #24
0c9f4     14 00 90 AD |  if_e	jmp	#LR__1120
0c9f8     A7 12 02 F6 | 	mov	arg01, fp
0c9fc     74 F0 BF FD | 	call	#_converttoint
0ca00     18 4E 05 F1 | 	add	fp, #24
0ca04     A7 FA 61 FC | 	wrlong	result1, fp
0ca08     18 4E 85 F1 | 	sub	fp, #24
0ca0c                 | LR__1120
0ca0c     1C 4E 05 F1 | 	add	fp, #28
0ca10     A7 FE 48 FC | 	wrbyte	#127, fp
0ca14     01 4E 05 F1 | 	add	fp, #1
0ca18     A7 00 49 FC | 	wrbyte	#128, fp
0ca1c     01 4E 85 F1 | 	sub	fp, #1
0ca20     A7 14 02 F6 | 	mov	arg02, fp
0ca24     04 4E 85 F1 | 	sub	fp, #4
0ca28     A7 16 02 FB | 	rdlong	arg03, fp
0ca2c     18 4E 85 F1 | 	sub	fp, #24
0ca30     01 16 66 F0 | 	shl	arg03, #1
0ca34     07 12 06 F6 | 	mov	arg01, #7
0ca38     0E 18 C6 F9 | 	decod	arg04, #14
0ca3c     02 1A 06 F6 | 	mov	arg05, #2
0ca40     00 1C 06 F6 | 	mov	arg06, #0
0ca44     0B 00 00 FF 
0ca48     CC E4 05 F1 | 	add	objptr, ##5836
0ca4c     20 4E B1 FD | 	call	#_audio096_spin2_play8
0ca50     0B 00 00 FF 
0ca54     CC E4 85 F1 | 	sub	objptr, ##5836
0ca58     0C 4E 05 F1 | 	add	fp, #12
0ca5c     A7 12 02 F6 | 	mov	arg01, fp
0ca60     0C 4E 85 F1 | 	sub	fp, #12
0ca64     C0 EE BF FD | 	call	#_push
0ca68     E8 B0 B0 FD | 	call	#_do_waitms
0ca6c     07 12 06 F6 | 	mov	arg01, #7
0ca70     0B 00 00 FF 
0ca74     CC E4 05 F1 | 	add	objptr, ##5836
0ca78     98 4E B1 FD | 	call	#_audio096_spin2_stop
0ca7c     0B 00 00 FF 
0ca80     CC E4 85 F1 | 	sub	objptr, ##5836
0ca84     A7 F0 03 F6 | 	mov	ptra, fp
0ca88     B2 00 A0 FD | 	call	#popregs_
0ca8c                 | _do_beep_ret
0ca8c     2D 00 64 FD | 	ret
0ca90                 | 
0ca90                 | ' 
0ca90                 | ' '-------------------- blit
0ca90                 | ' 
0ca90                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0ca90                 | ' sub do_blit
0ca90                 | _do_blit
0ca90     02 4A 05 F6 | 	mov	COUNT_, #2
0ca94     A8 00 A0 FD | 	call	#pushregs_
0ca98     3C F0 07 F1 | 	add	ptra, #60
0ca9c     4A 00 00 FF 
0caa0     80 E4 05 F1 | 	add	objptr, ##38016
0caa4     F2 26 02 FB | 	rdlong	local01, objptr
0caa8     13 25 02 F6 | 	mov	arg10, local01
0caac     01 24 66 F0 | 	shl	arg10, #1
0cab0     13 25 02 F1 | 	add	arg10, local01
0cab4     02 24 66 F0 | 	shl	arg10, #2
0cab8     03 00 00 FF 
0cabc     04 E4 85 F1 | 	sub	objptr, ##1540
0cac0     F2 24 02 F1 | 	add	arg10, objptr
0cac4     12 25 02 FB | 	rdlong	arg10, arg10
0cac8     38 4E 05 F1 | 	add	fp, #56
0cacc     A7 24 62 FC | 	wrlong	arg10, fp
0cad0                 | ' 
0cad0                 | ' numpar=compiledline(lineptr_e).result.uresult
0cad0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0cad0     38 4E 85 F1 | 	sub	fp, #56
0cad4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0cad8     47 00 00 FF 
0cadc     7C E4 85 F1 | 	sub	objptr, ##36476
0cae0     38 4E 05 51 |  if_ne	add	fp, #56
0cae4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0cae8     38 4E 85 51 |  if_ne	sub	fp, #56
0caec     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0caf0     50 00 90 AD |  if_e	jmp	#LR__1130
0caf4     00 12 06 F6 | 	mov	arg01, #0
0caf8     44 AE B1 FD | 	call	#__system___getiolock_0574
0cafc     FD 12 02 F6 | 	mov	arg01, result1
0cb00     10 51 B1 FD | 	call	#__system___lockmem
0cb04     8F 01 00 FF 
0cb08     4C 14 06 F6 | 	mov	arg02, ##@LR__5546
0cb0c     00 12 06 F6 | 	mov	arg01, #0
0cb10     00 16 06 F6 | 	mov	arg03, #0
0cb14     F0 5D B1 FD | 	call	#__system___basic_print_string
0cb18     00 12 06 F6 | 	mov	arg01, #0
0cb1c     20 AE B1 FD | 	call	#__system___getiolock_0574
0cb20     FD 00 68 FC | 	wrlong	#0, result1
0cb24     50 00 00 FF 
0cb28     F0 E4 05 F1 | 	add	objptr, ##41200
0cb2c     F2 14 02 FB | 	rdlong	arg02, objptr
0cb30     50 00 00 FF 
0cb34     F0 E4 85 F1 | 	sub	objptr, ##41200
0cb38     27 12 06 F6 | 	mov	arg01, #39
0cb3c     B4 17 B1 FD | 	call	#_printerror
0cb40     44 01 90 FD | 	jmp	#LR__1135
0cb44                 | LR__1130
0cb44                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0cb44     38 4E 05 F1 | 	add	fp, #56
0cb48     A7 28 02 FB | 	rdlong	local02, fp
0cb4c     01 28 86 F1 | 	sub	local02, #1
0cb50     04 4E 85 F1 | 	sub	fp, #4
0cb54     A7 28 62 FC | 	wrlong	local02, fp
0cb58     34 4E 85 F1 | 	sub	fp, #52
0cb5c                 | LR__1131
0cb5c     38 4E 05 F1 | 	add	fp, #56
0cb60     A7 26 02 FB | 	rdlong	local01, fp
0cb64     01 26 86 F1 | 	sub	local01, #1
0cb68     04 4E 85 F1 | 	sub	fp, #4
0cb6c     A7 24 02 FB | 	rdlong	arg10, fp
0cb70     34 4E 85 F1 | 	sub	fp, #52
0cb74     13 25 1A F2 | 	cmp	arg10, local01 wcz
0cb78     54 00 90 1D |  if_a	jmp	#LR__1132
0cb7c     10 ED BF FD | 	call	#_pop
0cb80     A7 FA 61 FC | 	wrlong	result1, fp
0cb84     04 4E 05 F1 | 	add	fp, #4
0cb88     A7 FC 61 FC | 	wrlong	result2, fp
0cb8c     04 4E 05 F1 | 	add	fp, #4
0cb90     A7 FE 61 FC | 	wrlong	result3, fp
0cb94     2C 4E 05 F1 | 	add	fp, #44
0cb98     A7 28 02 FB | 	rdlong	local02, fp
0cb9c     02 28 66 F0 | 	shl	local02, #2
0cba0     28 4E 85 F1 | 	sub	fp, #40
0cba4     A7 28 02 F1 | 	add	local02, fp
0cba8     0C 4E 85 F1 | 	sub	fp, #12
0cbac     A7 12 02 F6 | 	mov	arg01, fp
0cbb0     C0 EE BF FD | 	call	#_converttoint
0cbb4     14 FB 61 FC | 	wrlong	result1, local02
0cbb8     34 4E 05 F1 | 	add	fp, #52
0cbbc     A7 28 02 FB | 	rdlong	local02, fp
0cbc0     01 28 86 F1 | 	sub	local02, #1
0cbc4     A7 28 62 FC | 	wrlong	local02, fp
0cbc8     34 4E 85 F1 | 	sub	fp, #52
0cbcc     8C FF 9F FD | 	jmp	#LR__1131
0cbd0                 | LR__1132
0cbd0                 | ' if numpar=10 then 
0cbd0     38 4E 05 F1 | 	add	fp, #56
0cbd4     A7 28 02 FB | 	rdlong	local02, fp
0cbd8     38 4E 85 F1 | 	sub	fp, #56
0cbdc     0A 28 0E F2 | 	cmp	local02, #10 wz
0cbe0     5C 00 90 5D |  if_ne	jmp	#LR__1133
0cbe4     0C 4E 05 F1 | 	add	fp, #12
0cbe8     A7 12 02 FB | 	rdlong	arg01, fp
0cbec     04 4E 05 F1 | 	add	fp, #4
0cbf0     A7 14 02 FB | 	rdlong	arg02, fp
0cbf4     04 4E 05 F1 | 	add	fp, #4
0cbf8     A7 16 02 FB | 	rdlong	arg03, fp
0cbfc     04 4E 05 F1 | 	add	fp, #4
0cc00     A7 18 02 FB | 	rdlong	arg04, fp
0cc04     04 4E 05 F1 | 	add	fp, #4
0cc08     A7 1A 02 FB | 	rdlong	arg05, fp
0cc0c     04 4E 05 F1 | 	add	fp, #4
0cc10     A7 1C 02 FB | 	rdlong	arg06, fp
0cc14     04 4E 05 F1 | 	add	fp, #4
0cc18     A7 1E 02 FB | 	rdlong	arg07, fp
0cc1c     04 4E 05 F1 | 	add	fp, #4
0cc20     A7 20 02 FB | 	rdlong	arg08, fp
0cc24     04 4E 05 F1 | 	add	fp, #4
0cc28     A7 22 02 FB | 	rdlong	arg09, fp
0cc2c     04 4E 05 F1 | 	add	fp, #4
0cc30     A7 24 02 FB | 	rdlong	arg10, fp
0cc34     30 4E 85 F1 | 	sub	fp, #48
0cc38     0C 3E B1 FD | 	call	#_hg010b_spin2_blit
0cc3c     48 00 90 FD | 	jmp	#LR__1134
0cc40                 | LR__1133
0cc40     F2 1E 02 FB | 	rdlong	arg07, objptr
0cc44     0C 4E 05 F1 | 	add	fp, #12
0cc48     A7 14 02 FB | 	rdlong	arg02, fp
0cc4c     04 4E 05 F1 | 	add	fp, #4
0cc50     A7 16 02 FB | 	rdlong	arg03, fp
0cc54     04 4E 05 F1 | 	add	fp, #4
0cc58     A7 18 02 FB | 	rdlong	arg04, fp
0cc5c     04 4E 05 F1 | 	add	fp, #4
0cc60     A7 1A 02 FB | 	rdlong	arg05, fp
0cc64     04 4E 05 F1 | 	add	fp, #4
0cc68     A7 20 02 FB | 	rdlong	arg08, fp
0cc6c     04 4E 05 F1 | 	add	fp, #4
0cc70     A7 22 02 FB | 	rdlong	arg09, fp
0cc74     20 4E 85 F1 | 	sub	fp, #32
0cc78     0F 13 02 F6 | 	mov	arg01, arg07
0cc7c     0A 1C C6 F9 | 	decod	arg06, #10
0cc80     0A 24 C6 F9 | 	decod	arg10, #10
0cc84     C0 3D B1 FD | 	call	#_hg010b_spin2_blit
0cc88                 | LR__1134
0cc88                 | LR__1135
0cc88     A7 F0 03 F6 | 	mov	ptra, fp
0cc8c     B2 00 A0 FD | 	call	#popregs_
0cc90                 | _do_blit_ret
0cc90     2D 00 64 FD | 	ret
0cc94                 | 
0cc94                 | ' 
0cc94                 | ' 
0cc94                 | ' '-------------------- bin$
0cc94                 | ' 
0cc94                 | ' sub do_bin
0cc94                 | _do_bin
0cc94     01 4A 05 F6 | 	mov	COUNT_, #1
0cc98     A8 00 A0 FD | 	call	#pushregs_
0cc9c     18 F0 07 F1 | 	add	ptra, #24
0cca0     4A 00 00 FF 
0cca4     80 E4 05 F1 | 	add	objptr, ##38016
0cca8     F2 26 02 FB | 	rdlong	local01, objptr
0ccac     13 17 02 F6 | 	mov	arg03, local01
0ccb0     01 16 66 F0 | 	shl	arg03, #1
0ccb4     13 17 02 F1 | 	add	arg03, local01
0ccb8     02 16 66 F0 | 	shl	arg03, #2
0ccbc     03 00 00 FF 
0ccc0     04 E4 85 F1 | 	sub	objptr, ##1540
0ccc4     F2 16 02 F1 | 	add	arg03, objptr
0ccc8     0B 17 02 FB | 	rdlong	arg03, arg03
0cccc     0C 4E 05 F1 | 	add	fp, #12
0ccd0     A7 16 62 FC | 	wrlong	arg03, fp
0ccd4                 | ' 
0ccd4                 | ' numpar=compiledline(lineptr_e).result.uresult
0ccd4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0ccd4     0C 4E 85 F1 | 	sub	fp, #12
0ccd8     03 16 16 F2 | 	cmp	arg03, #3 wc
0ccdc     47 00 00 FF 
0cce0     7C E4 85 F1 | 	sub	objptr, ##36476
0cce4     0C 4E 05 C1 |  if_b	add	fp, #12
0cce8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0ccec     0C 4E 85 C1 |  if_b	sub	fp, #12
0ccf0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0ccf4     00 12 06 F6 | 	mov	arg01, #0
0ccf8     44 AC B1 FD | 	call	#__system___getiolock_0574
0ccfc     FD 12 02 F6 | 	mov	arg01, result1
0cd00     10 4F B1 FD | 	call	#__system___lockmem
0cd04     8F 01 00 FF 
0cd08     53 14 06 F6 | 	mov	arg02, ##@LR__5547
0cd0c     00 12 06 F6 | 	mov	arg01, #0
0cd10     00 16 06 F6 | 	mov	arg03, #0
0cd14     F0 5B B1 FD | 	call	#__system___basic_print_string
0cd18     00 12 06 F6 | 	mov	arg01, #0
0cd1c     20 AC B1 FD | 	call	#__system___getiolock_0574
0cd20     FD 00 68 FC | 	wrlong	#0, result1
0cd24     27 12 06 F6 | 	mov	arg01, #39
0cd28     00 14 06 F6 | 	mov	arg02, #0
0cd2c     C4 15 B1 FD | 	call	#_printerror
0cd30     B8 00 90 FD | 	jmp	#LR__1143
0cd34                 | LR__1140
0cd34                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0cd34     0C 4E 05 F1 | 	add	fp, #12
0cd38     A7 26 02 FB | 	rdlong	local01, fp
0cd3c     0C 4E 85 F1 | 	sub	fp, #12
0cd40     02 26 0E F2 | 	cmp	local01, #2 wz
0cd44     38 00 90 5D |  if_ne	jmp	#LR__1141
0cd48     44 EB BF FD | 	call	#_pop
0cd4c     FF 26 02 F6 | 	mov	local01, result3
0cd50     A7 FA 61 FC | 	wrlong	result1, fp
0cd54     04 4E 05 F1 | 	add	fp, #4
0cd58     A7 FC 61 FC | 	wrlong	result2, fp
0cd5c     04 4E 05 F1 | 	add	fp, #4
0cd60     A7 26 62 FC | 	wrlong	local01, fp
0cd64     08 4E 85 F1 | 	sub	fp, #8
0cd68     A7 12 02 F6 | 	mov	arg01, fp
0cd6c     04 ED BF FD | 	call	#_converttoint
0cd70     14 4E 05 F1 | 	add	fp, #20
0cd74     A7 FA 61 FC | 	wrlong	result1, fp
0cd78     14 4E 85 F1 | 	sub	fp, #20
0cd7c     0C 00 90 FD | 	jmp	#LR__1142
0cd80                 | LR__1141
0cd80     14 4E 05 F1 | 	add	fp, #20
0cd84     A7 00 68 FC | 	wrlong	#0, fp
0cd88     14 4E 85 F1 | 	sub	fp, #20
0cd8c                 | LR__1142
0cd8c     00 EB BF FD | 	call	#_pop
0cd90     FF 26 02 F6 | 	mov	local01, result3
0cd94     A7 FA 61 FC | 	wrlong	result1, fp
0cd98     04 4E 05 F1 | 	add	fp, #4
0cd9c     A7 FC 61 FC | 	wrlong	result2, fp
0cda0     04 4E 05 F1 | 	add	fp, #4
0cda4     A7 26 62 FC | 	wrlong	local01, fp
0cda8     08 4E 85 F1 | 	sub	fp, #8
0cdac     A7 12 02 F6 | 	mov	arg01, fp
0cdb0     C0 EC BF FD | 	call	#_converttoint
0cdb4     10 4E 05 F1 | 	add	fp, #16
0cdb8     A7 FA 61 FC | 	wrlong	result1, fp
0cdbc     FD 12 02 F6 | 	mov	arg01, result1
0cdc0     04 4E 05 F1 | 	add	fp, #4
0cdc4     A7 14 02 FB | 	rdlong	arg02, fp
0cdc8     14 4E 85 F1 | 	sub	fp, #20
0cdcc     02 16 06 F6 | 	mov	arg03, #2
0cdd0     10 71 B1 FD | 	call	#__system__Number_S
0cdd4     A7 FA 61 FC | 	wrlong	result1, fp
0cdd8     08 4E 05 F1 | 	add	fp, #8
0cddc     A7 3E 68 FC | 	wrlong	#31, fp
0cde0     08 4E 85 F1 | 	sub	fp, #8
0cde4     A7 12 02 F6 | 	mov	arg01, fp
0cde8     3C EB BF FD | 	call	#_push
0cdec                 | LR__1143
0cdec     A7 F0 03 F6 | 	mov	ptra, fp
0cdf0     B2 00 A0 FD | 	call	#popregs_
0cdf4                 | _do_bin_ret
0cdf4     2D 00 64 FD | 	ret
0cdf8                 | 
0cdf8                 | ' 
0cdf8                 | ' '-------------------- box
0cdf8                 | ' 
0cdf8                 | ' sub do_box
0cdf8                 | _do_box
0cdf8     03 4A 05 F6 | 	mov	COUNT_, #3
0cdfc     A8 00 A0 FD | 	call	#pushregs_
0ce00     30 F0 07 F1 | 	add	ptra, #48
0ce04     88 EA BF FD | 	call	#_pop
0ce08     FD 1A 02 F6 | 	mov	arg05, result1
0ce0c     FE 18 02 F6 | 	mov	arg04, result2
0ce10     FF 16 02 F6 | 	mov	arg03, result3
0ce14     24 4E 05 F1 | 	add	fp, #36
0ce18     A7 1A 62 FC | 	wrlong	arg05, fp
0ce1c     04 4E 05 F1 | 	add	fp, #4
0ce20     A7 18 62 FC | 	wrlong	arg04, fp
0ce24     04 4E 05 F1 | 	add	fp, #4
0ce28     A7 16 62 FC | 	wrlong	arg03, fp
0ce2c     2C 4E 85 F1 | 	sub	fp, #44
0ce30     5C EA BF FD | 	call	#_pop
0ce34     FD 1A 02 F6 | 	mov	arg05, result1
0ce38     FE 18 02 F6 | 	mov	arg04, result2
0ce3c     FF 16 02 F6 | 	mov	arg03, result3
0ce40     18 4E 05 F1 | 	add	fp, #24
0ce44     A7 1A 62 FC | 	wrlong	arg05, fp
0ce48     04 4E 05 F1 | 	add	fp, #4
0ce4c     A7 18 62 FC | 	wrlong	arg04, fp
0ce50     04 4E 05 F1 | 	add	fp, #4
0ce54     A7 16 62 FC | 	wrlong	arg03, fp
0ce58     20 4E 85 F1 | 	sub	fp, #32
0ce5c     30 EA BF FD | 	call	#_pop
0ce60     FD 1A 02 F6 | 	mov	arg05, result1
0ce64     FE 18 02 F6 | 	mov	arg04, result2
0ce68     FF 26 02 F6 | 	mov	local01, result3
0ce6c     0C 4E 05 F1 | 	add	fp, #12
0ce70     A7 1A 62 FC | 	wrlong	arg05, fp
0ce74     04 4E 05 F1 | 	add	fp, #4
0ce78     A7 18 62 FC | 	wrlong	arg04, fp
0ce7c     04 4E 05 F1 | 	add	fp, #4
0ce80     A7 26 62 FC | 	wrlong	local01, fp
0ce84     14 4E 85 F1 | 	sub	fp, #20
0ce88     04 EA BF FD | 	call	#_pop
0ce8c     A7 FA 61 FC | 	wrlong	result1, fp
0ce90     04 4E 05 F1 | 	add	fp, #4
0ce94     A7 FC 61 FC | 	wrlong	result2, fp
0ce98     04 4E 05 F1 | 	add	fp, #4
0ce9c     A7 FE 61 FC | 	wrlong	result3, fp
0cea0                 | ' 
0cea0                 | ' t4=pop()
0cea0                 | ' t3=pop()
0cea0                 | ' t2=pop()
0cea0                 | ' t1=pop()
0cea0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0cea0     FF 1A 02 F6 | 	mov	arg05, result3
0cea4     08 4E 85 F1 | 	sub	fp, #8
0cea8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0ceac     08 4E 05 51 |  if_ne	add	fp, #8
0ceb0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0ceb4     08 4E 85 51 |  if_ne	sub	fp, #8
0ceb8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0cebc     A8 00 90 5D |  if_ne	jmp	#LR__1150
0cec0     14 4E 05 F1 | 	add	fp, #20
0cec4     A7 26 02 FB | 	rdlong	local01, fp
0cec8     14 4E 85 F1 | 	sub	fp, #20
0cecc     1C 26 0E F2 | 	cmp	local01, #28 wz
0ced0     14 4E 05 51 |  if_ne	add	fp, #20
0ced4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0ced8     14 4E 85 51 |  if_ne	sub	fp, #20
0cedc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cee0     84 00 90 5D |  if_ne	jmp	#LR__1150
0cee4     20 4E 05 F1 | 	add	fp, #32
0cee8     A7 26 02 FB | 	rdlong	local01, fp
0ceec     20 4E 85 F1 | 	sub	fp, #32
0cef0     1C 26 0E F2 | 	cmp	local01, #28 wz
0cef4     20 4E 05 51 |  if_ne	add	fp, #32
0cef8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cefc     20 4E 85 51 |  if_ne	sub	fp, #32
0cf00     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cf04     60 00 90 5D |  if_ne	jmp	#LR__1150
0cf08     2C 4E 05 F1 | 	add	fp, #44
0cf0c     A7 26 02 FB | 	rdlong	local01, fp
0cf10     2C 4E 85 F1 | 	sub	fp, #44
0cf14     1C 26 0E F2 | 	cmp	local01, #28 wz
0cf18     2C 4E 05 51 |  if_ne	add	fp, #44
0cf1c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cf20     2C 4E 85 51 |  if_ne	sub	fp, #44
0cf24     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cf28     3C 00 90 5D |  if_ne	jmp	#LR__1150
0cf2c     A7 12 02 FB | 	rdlong	arg01, fp
0cf30     0C 4E 05 F1 | 	add	fp, #12
0cf34     A7 14 02 FB | 	rdlong	arg02, fp
0cf38     0C 4E 05 F1 | 	add	fp, #12
0cf3c     A7 16 02 FB | 	rdlong	arg03, fp
0cf40     0C 4E 05 F1 | 	add	fp, #12
0cf44     A7 18 02 FB | 	rdlong	arg04, fp
0cf48     24 4E 85 F1 | 	sub	fp, #36
0cf4c     37 00 00 FF 
0cf50     28 E4 05 F1 | 	add	objptr, ##28200
0cf54     F2 1A 02 FB | 	rdlong	arg05, objptr
0cf58     37 00 00 FF 
0cf5c     28 E4 85 F1 | 	sub	objptr, ##28200
0cf60     AC 2D B1 FD | 	call	#_hg010b_spin2_box
0cf64                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0cf64     6C 00 90 FD | 	jmp	#LR__1151
0cf68                 | LR__1150
0cf68     A7 12 02 F6 | 	mov	arg01, fp
0cf6c     04 EB BF FD | 	call	#_converttoint
0cf70     FD 28 02 F6 | 	mov	local02, result1
0cf74     0C 4E 05 F1 | 	add	fp, #12
0cf78     A7 12 02 F6 | 	mov	arg01, fp
0cf7c     0C 4E 85 F1 | 	sub	fp, #12
0cf80     F0 EA BF FD | 	call	#_converttoint
0cf84     FD 2A 02 F6 | 	mov	local03, result1
0cf88     18 4E 05 F1 | 	add	fp, #24
0cf8c     A7 12 02 F6 | 	mov	arg01, fp
0cf90     18 4E 85 F1 | 	sub	fp, #24
0cf94     DC EA BF FD | 	call	#_converttoint
0cf98     FD 26 02 F6 | 	mov	local01, result1
0cf9c     24 4E 05 F1 | 	add	fp, #36
0cfa0     A7 12 02 F6 | 	mov	arg01, fp
0cfa4     24 4E 85 F1 | 	sub	fp, #36
0cfa8     C8 EA BF FD | 	call	#_converttoint
0cfac     FD 18 02 F6 | 	mov	arg04, result1
0cfb0     37 00 00 FF 
0cfb4     28 E4 05 F1 | 	add	objptr, ##28200
0cfb8     F2 1A 02 FB | 	rdlong	arg05, objptr
0cfbc     37 00 00 FF 
0cfc0     28 E4 85 F1 | 	sub	objptr, ##28200
0cfc4     14 13 02 F6 | 	mov	arg01, local02
0cfc8     15 15 02 F6 | 	mov	arg02, local03
0cfcc     13 17 02 F6 | 	mov	arg03, local01
0cfd0     3C 2D B1 FD | 	call	#_hg010b_spin2_box
0cfd4                 | LR__1151
0cfd4     A7 F0 03 F6 | 	mov	ptra, fp
0cfd8     B2 00 A0 FD | 	call	#popregs_
0cfdc                 | _do_box_ret
0cfdc     2D 00 64 FD | 	ret
0cfe0                 | 
0cfe0                 | ' 
0cfe0                 | ' '-------------------- brun
0cfe0                 | ' 
0cfe0                 | ' sub do_brun
0cfe0                 | _do_brun
0cfe0     08 4A 05 F6 | 	mov	COUNT_, #8
0cfe4     A8 00 A0 FD | 	call	#pushregs_
0cfe8     A4 E8 BF FD | 	call	#_pop
0cfec     FE 1A 02 F6 | 	mov	arg05, result2
0cff0     FF 18 02 F6 | 	mov	arg04, result3
0cff4     FD 26 02 F6 | 	mov	local01, result1
0cff8     0D 29 02 F6 | 	mov	local02, arg05
0cffc     0C 2B 02 F6 | 	mov	local03, arg04
0d000                 | ' 
0d000                 | ' t1=pop() 
0d000                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0d000     2B 2A 0E F2 | 	cmp	local03, #43 wz
0d004     10 00 90 5D |  if_ne	jmp	#LR__1160
0d008     13 13 02 F6 | 	mov	arg01, local01
0d00c     F8 E9 BF FD | 	call	#_convertstring
0d010     FD 26 02 F6 | 	mov	local01, result1
0d014     1F 2A 06 F6 | 	mov	local03, #31
0d018                 | LR__1160
0d018                 | ' if t1.result_type=result_string then
0d018     1F 2A 0E F2 | 	cmp	local03, #31 wz
0d01c     EC 01 90 5D |  if_ne	jmp	#LR__1164
0d020     13 2D 02 F6 | 	mov	local04, local01
0d024                 | '   filename=t1.result.sresult
0d024                 | '   if left$(filename,1)="/" then 
0d024     16 13 02 F6 | 	mov	arg01, local04
0d028     01 14 06 F6 | 	mov	arg02, #1
0d02c     60 6C B1 FD | 	call	#__system__Left_S
0d030     FD 12 02 F6 | 	mov	arg01, result1
0d034     8F 01 00 FF 
0d038     5A 14 06 F6 | 	mov	arg02, ##@LR__5548
0d03c     FC 4B B1 FD | 	call	#__system___string_cmp
0d040     00 FA 0D F2 | 	cmp	result1, #0 wz
0d044     16 2F 02 A6 |  if_e	mov	local05, local04
0d048     14 00 90 AD |  if_e	jmp	#LR__1161
0d04c     8F 01 00 FF 
0d050     5C 12 06 F6 | 	mov	arg01, ##@LR__5549
0d054     16 15 02 F6 | 	mov	arg02, local04
0d058     14 4C B1 FD | 	call	#__system___string_concat
0d05c     FD 2E 02 F6 | 	mov	local05, result1
0d060                 | LR__1161
0d060                 | '   open fullfilename for input as #9
0d060     09 12 06 F6 | 	mov	arg01, #9
0d064     17 15 02 F6 | 	mov	arg02, local05
0d068     00 16 06 F6 | 	mov	arg03, #0
0d06c     A8 57 B1 FD | 	call	#__system___basic_open_string
0d070     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d074     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d078     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d07c     FD 30 0A F6 | 	mov	local06, result1 wz
0d080                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0d080     8C 00 90 AD |  if_e	jmp	#LR__1162
0d084     00 12 06 F6 | 	mov	arg01, #0
0d088     B4 A8 B1 FD | 	call	#__system___getiolock_0574
0d08c     FD 12 02 F6 | 	mov	arg01, result1
0d090     80 4B B1 FD | 	call	#__system___lockmem
0d094     8F 01 00 FF 
0d098     65 14 06 F6 | 	mov	arg02, ##@LR__5550
0d09c     00 12 06 F6 | 	mov	arg01, #0
0d0a0     00 16 06 F6 | 	mov	arg03, #0
0d0a4     60 58 B1 FD | 	call	#__system___basic_print_string
0d0a8     00 12 06 F6 | 	mov	arg01, #0
0d0ac     18 15 02 F6 | 	mov	arg02, local06
0d0b0     00 16 06 F6 | 	mov	arg03, #0
0d0b4     0A 18 06 F6 | 	mov	arg04, #10
0d0b8     90 58 B1 FD | 	call	#__system___basic_print_integer
0d0bc     8F 01 00 FF 
0d0c0     73 14 06 F6 | 	mov	arg02, ##@LR__5551
0d0c4     00 12 06 F6 | 	mov	arg01, #0
0d0c8     00 16 06 F6 | 	mov	arg03, #0
0d0cc     38 58 B1 FD | 	call	#__system___basic_print_string
0d0d0     18 13 02 F6 | 	mov	arg01, local06
0d0d4     0C 74 B1 FD | 	call	#__system___strerror
0d0d8     FD 14 02 F6 | 	mov	arg02, result1
0d0dc     00 12 06 F6 | 	mov	arg01, #0
0d0e0     00 16 06 F6 | 	mov	arg03, #0
0d0e4     20 58 B1 FD | 	call	#__system___basic_print_string
0d0e8     00 12 06 F6 | 	mov	arg01, #0
0d0ec     0A 14 06 F6 | 	mov	arg02, #10
0d0f0     00 16 06 F6 | 	mov	arg03, #0
0d0f4     B8 57 B1 FD | 	call	#__system___basic_print_char
0d0f8     00 12 06 F6 | 	mov	arg01, #0
0d0fc     40 A8 B1 FD | 	call	#__system___getiolock_0574
0d100     FD 00 68 FC | 	wrlong	#0, result1
0d104     09 12 06 F6 | 	mov	arg01, #9
0d108     A4 9D B1 FD | 	call	#__system__close
0d10c     FC 00 90 FD | 	jmp	#LR__1165
0d110                 | LR__1162
0d110     01 32 06 F6 | 	mov	local07, #1
0d114     00 34 06 F6 | 	mov	local08, #0
0d118                 | '   do
0d118                 | LR__1163
0d118                 | '     get #9,pos,block(0),1024,r : pos+=r	
0d118     4E 00 00 FF 
0d11c     B4 E4 05 F1 | 	add	objptr, ##40116
0d120     F2 16 02 F6 | 	mov	arg03, objptr
0d124     4E 00 00 FF 
0d128     B4 E4 85 F1 | 	sub	objptr, ##40116
0d12c     09 12 06 F6 | 	mov	arg01, #9
0d130     19 15 02 F6 | 	mov	arg02, local07
0d134     0A 18 C6 F9 | 	decod	arg04, #10
0d138     01 1A 06 F6 | 	mov	arg05, #1
0d13c     44 59 B1 FD | 	call	#__system___basic_get
0d140     FD 30 02 F6 | 	mov	local06, result1
0d144     FD 32 02 F1 | 	add	local07, result1
0d148     4E 00 00 FF 
0d14c     B4 E4 05 F1 | 	add	objptr, ##40116
0d150     F2 12 02 F6 | 	mov	arg01, objptr
0d154     1A 15 02 F6 | 	mov	arg02, local08
0d158     0A 16 C6 F9 | 	decod	arg03, #10
0d15c     42 00 00 FF 
0d160     E8 E5 85 F1 | 	sub	objptr, ##34280
0d164     08 3F B1 FD | 	call	#_psram_spin2_write
0d168     0B 00 00 FF 
0d16c     CC E4 85 F1 | 	sub	objptr, ##5836
0d170     18 35 02 F1 | 	add	local08, local06
0d174     02 00 00 FF 
0d178     00 30 0E F2 | 	cmp	local06, ##1024 wz
0d17c     E0 03 00 AF 
0d180     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0d184     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1163
0d188     36 00 00 FF 
0d18c     FC E5 05 F1 | 	add	objptr, ##28156
0d190     F2 12 02 FB | 	rdlong	arg01, objptr
0d194     03 12 62 FD | 	cogstop	arg01
0d198     04 E4 05 F1 | 	add	objptr, #4
0d19c     F2 12 02 FB | 	rdlong	arg01, objptr
0d1a0     03 12 62 FD | 	cogstop	arg01
0d1a4     04 E4 05 F1 | 	add	objptr, #4
0d1a8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1ac     03 12 62 FD | 	cogstop	arg01
0d1b0     19 00 00 FF 
0d1b4     14 E5 05 F1 | 	add	objptr, ##13076
0d1b8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1bc     03 12 62 FD | 	cogstop	arg01
0d1c0     18 00 00 FF 
0d1c4     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0d1c8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0d1cc     18 00 00 FF 
0d1d0     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0d1d4     19 00 00 FF 
0d1d8     0C E5 85 F1 | 	sub	objptr, ##13068
0d1dc     1E 34 06 F6 | 	mov	local08, #30
0d1e0     28 E4 61 FD | 	setq	objptr
0d1e4     0A 35 F2 FC | 	coginit	local08, arg02 wc
0d1e8     01 34 66 C6 |  if_b	neg	local08, #1
0d1ec     1B 00 00 FF 
0d1f0     18 E4 05 F1 | 	add	objptr, ##13848
0d1f4     F2 34 62 FC | 	wrlong	local08, objptr
0d1f8     52 00 00 FF 
0d1fc     24 E4 85 F1 | 	sub	objptr, ##42020
0d200     00 12 06 F6 | 	mov	arg01, #0
0d204     01 12 62 FD | 	cogid	arg01
0d208     03 12 62 FD | 	cogstop	arg01
0d20c                 | LR__1164
0d20c                 | LR__1165
0d20c     A7 F0 03 F6 | 	mov	ptra, fp
0d210     B2 00 A0 FD | 	call	#popregs_
0d214                 | _do_brun_ret
0d214     2D 00 64 FD | 	ret
0d218                 | 
0d218                 | ' 
0d218                 | ' '-------------------- cd
0d218                 | ' 
0d218                 | ' sub do_cd
0d218                 | _do_cd
0d218     06 4A 05 F6 | 	mov	COUNT_, #6
0d21c     A8 00 A0 FD | 	call	#pushregs_
0d220     8F 01 00 FF 
0d224     76 12 06 F6 | 	mov	arg01, ##@LR__5552
0d228     31 14 06 F6 | 	mov	arg02, #49
0d22c     48 A8 B1 FD | 	call	#__system___basic_dir
0d230     5C E6 BF FD | 	call	#_pop
0d234     FE 18 02 F6 | 	mov	arg04, result2
0d238     FF 16 02 F6 | 	mov	arg03, result3
0d23c     FD 26 02 F6 | 	mov	local01, result1
0d240     0C 29 02 F6 | 	mov	local02, arg04
0d244     0B 2B 02 F6 | 	mov	local03, arg03
0d248                 | ' t1=pop()
0d248                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d248     2B 2A 0E F2 | 	cmp	local03, #43 wz
0d24c     10 00 90 5D |  if_ne	jmp	#LR__1170
0d250     13 13 02 F6 | 	mov	arg01, local01
0d254     B0 E7 BF FD | 	call	#_convertstring
0d258     FD 26 02 F6 | 	mov	local01, result1
0d25c     1F 2A 06 F6 | 	mov	local03, #31
0d260                 | LR__1170
0d260                 | ' if t1.result_type<>result_string then printerror(15): return
0d260     1F 2A 0E F2 | 	cmp	local03, #31 wz
0d264     10 00 90 AD |  if_e	jmp	#LR__1171
0d268     0F 12 06 F6 | 	mov	arg01, #15
0d26c     00 14 06 F6 | 	mov	arg02, #0
0d270     80 10 B1 FD | 	call	#_printerror
0d274     48 05 90 FD | 	jmp	#LR__1189
0d278                 | LR__1171
0d278     13 2D 02 F6 | 	mov	local04, local01
0d27c                 | ' newdir$=t1.result.sresult
0d27c                 | ' if newdir$=".." then 
0d27c     8F 01 00 FF 
0d280     78 14 06 F6 | 	mov	arg02, ##@LR__5553
0d284     16 13 02 F6 | 	mov	arg01, local04
0d288     B0 49 B1 FD | 	call	#__system___string_cmp
0d28c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d290     C4 01 90 5D |  if_ne	jmp	#LR__1178
0d294     4A 00 00 FF 
0d298     94 E4 05 F1 | 	add	objptr, ##38036
0d29c     F2 12 02 FB | 	rdlong	arg01, objptr
0d2a0     4A 00 00 FF 
0d2a4     94 E4 85 F1 | 	sub	objptr, ##38036
0d2a8     09 2F 02 F6 | 	mov	local05, arg01
0d2ac     97 06 48 FB | 	callpa	#(@LR__1173-@LR__1172)>>2,fcache_load_ptr_
0d2b0                 | LR__1172
0d2b0     17 FB C9 FA | 	rdbyte	result1, local05 wz
0d2b4     01 2E 06 51 |  if_ne	add	local05, #1
0d2b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1172
0d2bc                 | LR__1173
0d2bc     17 13 C2 F2 | 	subr	arg01, local05
0d2c0     4A 00 00 FF 
0d2c4     94 E4 05 F1 | 	add	objptr, ##38036
0d2c8     F2 14 02 FB | 	rdlong	arg02, objptr
0d2cc     4A 00 00 FF 
0d2d0     94 E4 85 F1 | 	sub	objptr, ##38036
0d2d4     8F 01 00 FF 
0d2d8     7B 16 06 F6 | 	mov	arg03, ##@LR__5554
0d2dc     FC 6F B1 FD | 	call	#__system__InstrRev
0d2e0     FD 2C 02 F6 | 	mov	local04, result1
0d2e4                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0d2e4     02 2C 56 F2 | 	cmps	local04, #2 wc
0d2e8     28 00 90 CD |  if_b	jmp	#LR__1174
0d2ec     4A 00 00 FF 
0d2f0     94 E4 05 F1 | 	add	objptr, ##38036
0d2f4     F2 12 02 FB | 	rdlong	arg01, objptr
0d2f8     4A 00 00 FF 
0d2fc     94 E4 85 F1 | 	sub	objptr, ##38036
0d300     01 2C 86 F1 | 	sub	local04, #1
0d304     16 15 02 F6 | 	mov	arg02, local04
0d308     84 69 B1 FD | 	call	#__system__Left_S
0d30c     FD 2C 02 F6 | 	mov	local04, result1
0d310     08 00 90 FD | 	jmp	#LR__1175
0d314                 | LR__1174
0d314     8F 01 00 FF 
0d318     7D 2C 06 F6 | 	mov	local04, ##@LR__5555
0d31c                 | LR__1175
0d31c     16 13 02 F6 | 	mov	arg01, local04
0d320     7C 4F B1 FD | 	call	#__system___chdir
0d324     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d328     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d32c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d330     FD 30 0A F6 | 	mov	local06, result1 wz
0d334                 | '   chdir newdir$
0d334                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d334     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0d338     A4 00 90 AD |  if_e	jmp	#LR__1176
0d33c     00 12 06 F6 | 	mov	arg01, #0
0d340     FC A5 B1 FD | 	call	#__system___getiolock_0574
0d344     FD 12 02 F6 | 	mov	arg01, result1
0d348     C8 48 B1 FD | 	call	#__system___lockmem
0d34c     8F 01 00 FF 
0d350     7F 14 06 F6 | 	mov	arg02, ##@LR__5556
0d354     00 12 06 F6 | 	mov	arg01, #0
0d358     00 16 06 F6 | 	mov	arg03, #0
0d35c     A8 55 B1 FD | 	call	#__system___basic_print_string
0d360     00 12 06 F6 | 	mov	arg01, #0
0d364     18 15 02 F6 | 	mov	arg02, local06
0d368     00 16 06 F6 | 	mov	arg03, #0
0d36c     0A 18 06 F6 | 	mov	arg04, #10
0d370     D8 55 B1 FD | 	call	#__system___basic_print_integer
0d374     8F 01 00 FF 
0d378     8D 14 06 F6 | 	mov	arg02, ##@LR__5557
0d37c     00 12 06 F6 | 	mov	arg01, #0
0d380     00 16 06 F6 | 	mov	arg03, #0
0d384     80 55 B1 FD | 	call	#__system___basic_print_string
0d388     45 00 00 FF 
0d38c     50 E5 05 F1 | 	add	objptr, ##35664
0d390     F2 14 02 FB | 	rdlong	arg02, objptr
0d394     45 00 00 FF 
0d398     50 E5 85 F1 | 	sub	objptr, ##35664
0d39c     00 12 06 F6 | 	mov	arg01, #0
0d3a0     00 16 06 F6 | 	mov	arg03, #0
0d3a4     60 55 B1 FD | 	call	#__system___basic_print_string
0d3a8     00 12 06 F6 | 	mov	arg01, #0
0d3ac     0A 14 06 F6 | 	mov	arg02, #10
0d3b0     00 16 06 F6 | 	mov	arg03, #0
0d3b4     F8 54 B1 FD | 	call	#__system___basic_print_char
0d3b8     00 12 06 F6 | 	mov	arg01, #0
0d3bc     80 A5 B1 FD | 	call	#__system___getiolock_0574
0d3c0     FD 00 68 FC | 	wrlong	#0, result1
0d3c4     4A 00 00 FF 
0d3c8     94 E4 05 F1 | 	add	objptr, ##38036
0d3cc     F2 12 02 FB | 	rdlong	arg01, objptr
0d3d0     4A 00 00 FF 
0d3d4     94 E4 85 F1 | 	sub	objptr, ##38036
0d3d8     C4 4E B1 FD | 	call	#__system___chdir
0d3dc     14 00 90 FD | 	jmp	#LR__1177
0d3e0                 | LR__1176
0d3e0     4A 00 00 FF 
0d3e4     94 E4 05 F1 | 	add	objptr, ##38036
0d3e8     F2 2C 62 FC | 	wrlong	local04, objptr
0d3ec     4A 00 00 FF 
0d3f0     94 E4 85 F1 | 	sub	objptr, ##38036
0d3f4                 | LR__1177
0d3f4                 | '   print "Current directory: ";currentdir$
0d3f4     00 12 06 F6 | 	mov	arg01, #0
0d3f8     44 A5 B1 FD | 	call	#__system___getiolock_0574
0d3fc     FD 12 02 F6 | 	mov	arg01, result1
0d400     10 48 B1 FD | 	call	#__system___lockmem
0d404     8F 01 00 FF 
0d408     90 14 06 F6 | 	mov	arg02, ##@LR__5558
0d40c     00 12 06 F6 | 	mov	arg01, #0
0d410     00 16 06 F6 | 	mov	arg03, #0
0d414     F0 54 B1 FD | 	call	#__system___basic_print_string
0d418     4A 00 00 FF 
0d41c     94 E4 05 F1 | 	add	objptr, ##38036
0d420     F2 14 02 FB | 	rdlong	arg02, objptr
0d424     4A 00 00 FF 
0d428     94 E4 85 F1 | 	sub	objptr, ##38036
0d42c     00 12 06 F6 | 	mov	arg01, #0
0d430     00 16 06 F6 | 	mov	arg03, #0
0d434     D0 54 B1 FD | 	call	#__system___basic_print_string
0d438     00 12 06 F6 | 	mov	arg01, #0
0d43c     0A 14 06 F6 | 	mov	arg02, #10
0d440     00 16 06 F6 | 	mov	arg03, #0
0d444     68 54 B1 FD | 	call	#__system___basic_print_char
0d448     00 12 06 F6 | 	mov	arg01, #0
0d44c     F0 A4 B1 FD | 	call	#__system___getiolock_0574
0d450     FD 00 68 FC | 	wrlong	#0, result1
0d454                 | '   return
0d454     68 03 90 FD | 	jmp	#LR__1189
0d458                 | LR__1178
0d458                 | ' if left$(newdir$,1)="/" then 
0d458     16 13 02 F6 | 	mov	arg01, local04
0d45c     01 14 06 F6 | 	mov	arg02, #1
0d460     2C 68 B1 FD | 	call	#__system__Left_S
0d464     FD 12 02 F6 | 	mov	arg01, result1
0d468     8F 01 00 FF 
0d46c     A4 14 06 F6 | 	mov	arg02, ##@LR__5559
0d470     C8 47 B1 FD | 	call	#__system___string_cmp
0d474     00 FA 0D F2 | 	cmp	result1, #0 wz
0d478     3C 01 90 5D |  if_ne	jmp	#LR__1181
0d47c     16 13 02 F6 | 	mov	arg01, local04
0d480     1C 4E B1 FD | 	call	#__system___chdir
0d484     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d488     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d48c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d490     FD 30 0A F6 | 	mov	local06, result1 wz
0d494                 | '   chdir(newdir$)
0d494                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d494     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0d498     A4 00 90 AD |  if_e	jmp	#LR__1179
0d49c     00 12 06 F6 | 	mov	arg01, #0
0d4a0     9C A4 B1 FD | 	call	#__system___getiolock_0574
0d4a4     FD 12 02 F6 | 	mov	arg01, result1
0d4a8     68 47 B1 FD | 	call	#__system___lockmem
0d4ac     8F 01 00 FF 
0d4b0     A6 14 06 F6 | 	mov	arg02, ##@LR__5560
0d4b4     00 12 06 F6 | 	mov	arg01, #0
0d4b8     00 16 06 F6 | 	mov	arg03, #0
0d4bc     48 54 B1 FD | 	call	#__system___basic_print_string
0d4c0     00 12 06 F6 | 	mov	arg01, #0
0d4c4     18 15 02 F6 | 	mov	arg02, local06
0d4c8     00 16 06 F6 | 	mov	arg03, #0
0d4cc     0A 18 06 F6 | 	mov	arg04, #10
0d4d0     78 54 B1 FD | 	call	#__system___basic_print_integer
0d4d4     8F 01 00 FF 
0d4d8     B4 14 06 F6 | 	mov	arg02, ##@LR__5561
0d4dc     00 12 06 F6 | 	mov	arg01, #0
0d4e0     00 16 06 F6 | 	mov	arg03, #0
0d4e4     20 54 B1 FD | 	call	#__system___basic_print_string
0d4e8     45 00 00 FF 
0d4ec     50 E5 05 F1 | 	add	objptr, ##35664
0d4f0     F2 14 02 FB | 	rdlong	arg02, objptr
0d4f4     45 00 00 FF 
0d4f8     50 E5 85 F1 | 	sub	objptr, ##35664
0d4fc     00 12 06 F6 | 	mov	arg01, #0
0d500     00 16 06 F6 | 	mov	arg03, #0
0d504     00 54 B1 FD | 	call	#__system___basic_print_string
0d508     00 12 06 F6 | 	mov	arg01, #0
0d50c     0A 14 06 F6 | 	mov	arg02, #10
0d510     00 16 06 F6 | 	mov	arg03, #0
0d514     98 53 B1 FD | 	call	#__system___basic_print_char
0d518     00 12 06 F6 | 	mov	arg01, #0
0d51c     20 A4 B1 FD | 	call	#__system___getiolock_0574
0d520     FD 00 68 FC | 	wrlong	#0, result1
0d524     4A 00 00 FF 
0d528     94 E4 05 F1 | 	add	objptr, ##38036
0d52c     F2 12 02 FB | 	rdlong	arg01, objptr
0d530     4A 00 00 FF 
0d534     94 E4 85 F1 | 	sub	objptr, ##38036
0d538     64 4D B1 FD | 	call	#__system___chdir
0d53c     14 00 90 FD | 	jmp	#LR__1180
0d540                 | LR__1179
0d540     4A 00 00 FF 
0d544     94 E4 05 F1 | 	add	objptr, ##38036
0d548     F2 2C 62 FC | 	wrlong	local04, objptr
0d54c     4A 00 00 FF 
0d550     94 E4 85 F1 | 	sub	objptr, ##38036
0d554                 | LR__1180
0d554                 | '   print "Current directory: ";currentdir$
0d554     00 12 06 F6 | 	mov	arg01, #0
0d558     E4 A3 B1 FD | 	call	#__system___getiolock_0574
0d55c     FD 12 02 F6 | 	mov	arg01, result1
0d560     B0 46 B1 FD | 	call	#__system___lockmem
0d564     8F 01 00 FF 
0d568     B7 14 06 F6 | 	mov	arg02, ##@LR__5562
0d56c     00 12 06 F6 | 	mov	arg01, #0
0d570     00 16 06 F6 | 	mov	arg03, #0
0d574     90 53 B1 FD | 	call	#__system___basic_print_string
0d578     4A 00 00 FF 
0d57c     94 E4 05 F1 | 	add	objptr, ##38036
0d580     F2 14 02 FB | 	rdlong	arg02, objptr
0d584     4A 00 00 FF 
0d588     94 E4 85 F1 | 	sub	objptr, ##38036
0d58c     00 12 06 F6 | 	mov	arg01, #0
0d590     00 16 06 F6 | 	mov	arg03, #0
0d594     70 53 B1 FD | 	call	#__system___basic_print_string
0d598     00 12 06 F6 | 	mov	arg01, #0
0d59c     0A 14 06 F6 | 	mov	arg02, #10
0d5a0     00 16 06 F6 | 	mov	arg03, #0
0d5a4     08 53 B1 FD | 	call	#__system___basic_print_char
0d5a8     00 12 06 F6 | 	mov	arg01, #0
0d5ac     90 A3 B1 FD | 	call	#__system___getiolock_0574
0d5b0     FD 00 68 FC | 	wrlong	#0, result1
0d5b4                 | '   return
0d5b4     08 02 90 FD | 	jmp	#LR__1189
0d5b8                 | LR__1181
0d5b8                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0d5b8     4A 00 00 FF 
0d5bc     94 E4 05 F1 | 	add	objptr, ##38036
0d5c0     F2 12 02 FB | 	rdlong	arg01, objptr
0d5c4     4A 00 00 FF 
0d5c8     94 E4 85 F1 | 	sub	objptr, ##38036
0d5cc     8F 01 00 FF 
0d5d0     CB 14 06 F6 | 	mov	arg02, ##@LR__5563
0d5d4     64 46 B1 FD | 	call	#__system___string_cmp
0d5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d5dc     34 00 90 AD |  if_e	jmp	#LR__1182
0d5e0     4A 00 00 FF 
0d5e4     94 E4 05 F1 | 	add	objptr, ##38036
0d5e8     F2 12 02 FB | 	rdlong	arg01, objptr
0d5ec     4A 00 00 FF 
0d5f0     94 E4 85 F1 | 	sub	objptr, ##38036
0d5f4     8F 01 00 FF 
0d5f8     CD 14 06 F6 | 	mov	arg02, ##@LR__5564
0d5fc     70 46 B1 FD | 	call	#__system___string_concat
0d600     FD 12 02 F6 | 	mov	arg01, result1
0d604     16 15 02 F6 | 	mov	arg02, local04
0d608     64 46 B1 FD | 	call	#__system___string_concat
0d60c     FD 2C 02 F6 | 	mov	local04, result1
0d610     20 00 90 FD | 	jmp	#LR__1183
0d614                 | LR__1182
0d614     4A 00 00 FF 
0d618     94 E4 05 F1 | 	add	objptr, ##38036
0d61c     F2 12 02 FB | 	rdlong	arg01, objptr
0d620     4A 00 00 FF 
0d624     94 E4 85 F1 | 	sub	objptr, ##38036
0d628     16 15 02 F6 | 	mov	arg02, local04
0d62c     40 46 B1 FD | 	call	#__system___string_concat
0d630     FD 2C 02 F6 | 	mov	local04, result1
0d634                 | LR__1183
0d634                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0d634     16 13 02 F6 | 	mov	arg01, local04
0d638     01 14 06 F6 | 	mov	arg02, #1
0d63c     D8 66 B1 FD | 	call	#__system__Right_S
0d640     FD 12 02 F6 | 	mov	arg01, result1
0d644     8F 01 00 FF 
0d648     CF 14 06 F6 | 	mov	arg02, ##@LR__5565
0d64c     EC 45 B1 FD | 	call	#__system___string_cmp
0d650     00 FA 0D F2 | 	cmp	result1, #0 wz
0d654     30 00 90 5D |  if_ne	jmp	#LR__1186
0d658     16 13 02 F6 | 	mov	arg01, local04
0d65c     09 2F 02 F6 | 	mov	local05, arg01
0d660     97 06 48 FB | 	callpa	#(@LR__1185-@LR__1184)>>2,fcache_load_ptr_
0d664                 | LR__1184
0d664     17 FB C9 FA | 	rdbyte	result1, local05 wz
0d668     01 2E 06 51 |  if_ne	add	local05, #1
0d66c     F4 FF 9F 5D |  if_ne	jmp	#LR__1184
0d670                 | LR__1185
0d670     09 2F 82 F1 | 	sub	local05, arg01
0d674     17 15 02 F6 | 	mov	arg02, local05
0d678     01 14 86 F1 | 	sub	arg02, #1
0d67c     16 13 02 F6 | 	mov	arg01, local04
0d680     0C 66 B1 FD | 	call	#__system__Left_S
0d684     FD 2C 02 F6 | 	mov	local04, result1
0d688                 | LR__1186
0d688     16 13 02 F6 | 	mov	arg01, local04
0d68c     10 4C B1 FD | 	call	#__system___chdir
0d690     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d694     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d698     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d69c     FD 30 0A F6 | 	mov	local06, result1 wz
0d6a0                 | '   chdir(newdir$)
0d6a0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d6a0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0d6a4     A4 00 90 AD |  if_e	jmp	#LR__1187
0d6a8     00 12 06 F6 | 	mov	arg01, #0
0d6ac     90 A2 B1 FD | 	call	#__system___getiolock_0574
0d6b0     FD 12 02 F6 | 	mov	arg01, result1
0d6b4     5C 45 B1 FD | 	call	#__system___lockmem
0d6b8     8F 01 00 FF 
0d6bc     D1 14 06 F6 | 	mov	arg02, ##@LR__5566
0d6c0     00 12 06 F6 | 	mov	arg01, #0
0d6c4     00 16 06 F6 | 	mov	arg03, #0
0d6c8     3C 52 B1 FD | 	call	#__system___basic_print_string
0d6cc     00 12 06 F6 | 	mov	arg01, #0
0d6d0     18 15 02 F6 | 	mov	arg02, local06
0d6d4     00 16 06 F6 | 	mov	arg03, #0
0d6d8     0A 18 06 F6 | 	mov	arg04, #10
0d6dc     6C 52 B1 FD | 	call	#__system___basic_print_integer
0d6e0     8F 01 00 FF 
0d6e4     DF 14 06 F6 | 	mov	arg02, ##@LR__5567
0d6e8     00 12 06 F6 | 	mov	arg01, #0
0d6ec     00 16 06 F6 | 	mov	arg03, #0
0d6f0     14 52 B1 FD | 	call	#__system___basic_print_string
0d6f4     45 00 00 FF 
0d6f8     50 E5 05 F1 | 	add	objptr, ##35664
0d6fc     F2 14 02 FB | 	rdlong	arg02, objptr
0d700     45 00 00 FF 
0d704     50 E5 85 F1 | 	sub	objptr, ##35664
0d708     00 12 06 F6 | 	mov	arg01, #0
0d70c     00 16 06 F6 | 	mov	arg03, #0
0d710     F4 51 B1 FD | 	call	#__system___basic_print_string
0d714     00 12 06 F6 | 	mov	arg01, #0
0d718     0A 14 06 F6 | 	mov	arg02, #10
0d71c     00 16 06 F6 | 	mov	arg03, #0
0d720     8C 51 B1 FD | 	call	#__system___basic_print_char
0d724     00 12 06 F6 | 	mov	arg01, #0
0d728     14 A2 B1 FD | 	call	#__system___getiolock_0574
0d72c     FD 00 68 FC | 	wrlong	#0, result1
0d730     4A 00 00 FF 
0d734     94 E4 05 F1 | 	add	objptr, ##38036
0d738     F2 12 02 FB | 	rdlong	arg01, objptr
0d73c     4A 00 00 FF 
0d740     94 E4 85 F1 | 	sub	objptr, ##38036
0d744     58 4B B1 FD | 	call	#__system___chdir
0d748     14 00 90 FD | 	jmp	#LR__1188
0d74c                 | LR__1187
0d74c     4A 00 00 FF 
0d750     94 E4 05 F1 | 	add	objptr, ##38036
0d754     F2 2C 62 FC | 	wrlong	local04, objptr
0d758     4A 00 00 FF 
0d75c     94 E4 85 F1 | 	sub	objptr, ##38036
0d760                 | LR__1188
0d760                 | '   print "Current directory: ";currentdir$
0d760     00 12 06 F6 | 	mov	arg01, #0
0d764     D8 A1 B1 FD | 	call	#__system___getiolock_0574
0d768     FD 12 02 F6 | 	mov	arg01, result1
0d76c     A4 44 B1 FD | 	call	#__system___lockmem
0d770     8F 01 00 FF 
0d774     E2 14 06 F6 | 	mov	arg02, ##@LR__5568
0d778     00 12 06 F6 | 	mov	arg01, #0
0d77c     00 16 06 F6 | 	mov	arg03, #0
0d780     84 51 B1 FD | 	call	#__system___basic_print_string
0d784     4A 00 00 FF 
0d788     94 E4 05 F1 | 	add	objptr, ##38036
0d78c     F2 14 02 FB | 	rdlong	arg02, objptr
0d790     4A 00 00 FF 
0d794     94 E4 85 F1 | 	sub	objptr, ##38036
0d798     00 12 06 F6 | 	mov	arg01, #0
0d79c     00 16 06 F6 | 	mov	arg03, #0
0d7a0     64 51 B1 FD | 	call	#__system___basic_print_string
0d7a4     00 12 06 F6 | 	mov	arg01, #0
0d7a8     0A 14 06 F6 | 	mov	arg02, #10
0d7ac     00 16 06 F6 | 	mov	arg03, #0
0d7b0     FC 50 B1 FD | 	call	#__system___basic_print_char
0d7b4     00 12 06 F6 | 	mov	arg01, #0
0d7b8     84 A1 B1 FD | 	call	#__system___getiolock_0574
0d7bc     FD 00 68 FC | 	wrlong	#0, result1
0d7c0                 | LR__1189
0d7c0     A7 F0 03 F6 | 	mov	ptra, fp
0d7c4     B2 00 A0 FD | 	call	#popregs_
0d7c8                 | _do_cd_ret
0d7c8     2D 00 64 FD | 	ret
0d7cc                 | 
0d7cc                 | ' 
0d7cc                 | ' '-------------------- changefreq
0d7cc                 | ' 
0d7cc                 | ' sub do_changefreq
0d7cc                 | _do_changefreq
0d7cc     04 4A 05 F6 | 	mov	COUNT_, #4
0d7d0     A8 00 A0 FD | 	call	#pushregs_
0d7d4     28 F0 07 F1 | 	add	ptra, #40
0d7d8     B4 E0 BF FD | 	call	#_pop
0d7dc     FF 14 02 F6 | 	mov	arg02, result3
0d7e0     A7 FA 61 FC | 	wrlong	result1, fp
0d7e4     04 4E 05 F1 | 	add	fp, #4
0d7e8     A7 FC 61 FC | 	wrlong	result2, fp
0d7ec     04 4E 05 F1 | 	add	fp, #4
0d7f0     A7 14 62 FC | 	wrlong	arg02, fp
0d7f4     08 4E 85 F1 | 	sub	fp, #8
0d7f8     A7 12 02 F6 | 	mov	arg01, fp
0d7fc     30 E3 BF FD | 	call	#_converttofloat
0d800     24 4E 05 F1 | 	add	fp, #36
0d804     A7 FA 61 FC | 	wrlong	result1, fp
0d808     24 4E 85 F1 | 	sub	fp, #36
0d80c     FD 14 02 F6 | 	mov	arg02, result1
0d810     FC 16 20 FF 
0d814     54 12 06 F6 | 	mov	arg01, ##1076754516
0d818     84 81 B1 FD | 	call	#__system____builtin_logbase
0d81c     FD 26 02 F6 | 	mov	local01, result1
0d820     1E 14 C6 F9 | 	decod	arg02, #30
0d824     FC 16 20 FF 
0d828     54 12 06 F6 | 	mov	arg01, ##1076754516
0d82c     70 81 B1 FD | 	call	#__system____builtin_logbase
0d830     FD 14 02 F6 | 	mov	arg02, result1
0d834     13 13 02 F6 | 	mov	arg01, local01
0d838     98 73 B1 FD | 	call	#__system___float_div
0d83c     FD 12 02 F6 | 	mov	arg01, result1
0d840     00 14 06 F6 | 	mov	arg02, #0
0d844     50 76 B1 FD | 	call	#__system___float_tointeger
0d848     10 4E 05 F1 | 	add	fp, #16
0d84c     A7 FA 61 FC | 	wrlong	result1, fp
0d850     1E 26 C6 F9 | 	decod	local01, #30
0d854     FD 12 02 F6 | 	mov	arg01, result1
0d858     10 4E 85 F1 | 	sub	fp, #16
0d85c     05 12 06 F1 | 	add	arg01, #5
0d860     09 13 52 F6 | 	abs	arg01, arg01 wc
0d864     1F 28 C6 C9 |  if_b	decod	local02, #31
0d868     00 28 06 36 |  if_ae	mov	local02, #0
0d86c     5C 6D B1 FD | 	call	#__system___float_fromuns
0d870     14 FB 61 F5 | 	xor	result1, local02
0d874     FD 14 02 F6 | 	mov	arg02, result1
0d878     13 13 02 F6 | 	mov	arg01, local01
0d87c     58 80 B1 FD | 	call	#__system____builtin_powf
0d880     FD 12 02 F6 | 	mov	arg01, result1
0d884     01 14 06 F6 | 	mov	arg02, #1
0d888     0C 76 B1 FD | 	call	#__system___float_tointeger
0d88c     14 4E 05 F1 | 	add	fp, #20
0d890     A7 FA 61 FC | 	wrlong	result1, fp
0d894                 | ' skip=round(2^(lfreq+5))
0d894                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0d894     14 4E 85 F1 | 	sub	fp, #20
0d898     40 00 00 FF 
0d89c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d8a0     30 00 90 CD |  if_b	jmp	#LR__1190
0d8a4     14 4E 05 F1 | 	add	fp, #20
0d8a8     A7 26 02 FB | 	rdlong	local01, fp
0d8ac     13 27 52 F6 | 	abs	local01, local01 wc
0d8b0     0F 26 46 F0 | 	shr	local01, #15
0d8b4     13 27 82 F6 | 	negc	local01, local01
0d8b8     04 4E 05 F1 | 	add	fp, #4
0d8bc     A7 26 62 FC | 	wrlong	local01, fp
0d8c0     04 4E 85 F1 | 	sub	fp, #4
0d8c4     40 00 80 FF 
0d8c8     A7 00 68 FC | 	wrlong	##32768, fp
0d8cc     14 4E 85 F1 | 	sub	fp, #20
0d8d0     0C 00 90 FD | 	jmp	#LR__1191
0d8d4                 | LR__1190
0d8d4     18 4E 05 F1 | 	add	fp, #24
0d8d8     A7 02 68 FC | 	wrlong	#1, fp
0d8dc     18 4E 85 F1 | 	sub	fp, #24
0d8e0                 | LR__1191
0d8e0     24 4E 05 F1 | 	add	fp, #36
0d8e4     A7 14 02 FB | 	rdlong	arg02, fp
0d8e8     24 4E 85 F1 | 	sub	fp, #36
0d8ec     3E 2C 25 FF 
0d8f0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d8f4     DC 72 B1 FD | 	call	#__system___float_div
0d8f8     FD 26 02 F6 | 	mov	local01, result1
0d8fc     18 4E 05 F1 | 	add	fp, #24
0d900     A7 12 02 FB | 	rdlong	arg01, fp
0d904     18 4E 85 F1 | 	sub	fp, #24
0d908     09 13 52 F6 | 	abs	arg01, arg01 wc
0d90c     1F 28 C6 C9 |  if_b	decod	local02, #31
0d910     00 28 06 36 |  if_ae	mov	local02, #0
0d914     B4 6C B1 FD | 	call	#__system___float_fromuns
0d918     14 FB 61 F5 | 	xor	result1, local02
0d91c     FD 2A 02 F6 | 	mov	local03, result1
0d920     1E 2C C6 F9 | 	decod	local04, #30
0d924     0D 12 06 F6 | 	mov	arg01, #13
0d928     10 4E 05 F1 | 	add	fp, #16
0d92c     A7 14 02 FB | 	rdlong	arg02, fp
0d930     10 4E 85 F1 | 	sub	fp, #16
0d934     0A 13 82 F1 | 	sub	arg01, arg02
0d938     09 13 52 F6 | 	abs	arg01, arg01 wc
0d93c     1F 28 C6 C9 |  if_b	decod	local02, #31
0d940     00 28 06 36 |  if_ae	mov	local02, #0
0d944     84 6C B1 FD | 	call	#__system___float_fromuns
0d948     14 FB 61 F5 | 	xor	result1, local02
0d94c     FD 14 02 F6 | 	mov	arg02, result1
0d950     16 13 02 F6 | 	mov	arg01, local04
0d954     80 7F B1 FD | 	call	#__system____builtin_powf
0d958     FD 14 02 F6 | 	mov	arg02, result1
0d95c     15 13 02 F6 | 	mov	arg01, local03
0d960     6C 70 B1 FD | 	call	#__system___float_mul
0d964     FD 14 02 F6 | 	mov	arg02, result1
0d968     13 13 02 F6 | 	mov	arg01, local01
0d96c     64 72 B1 FD | 	call	#__system___float_div
0d970     FD 12 02 F6 | 	mov	arg01, result1
0d974     01 14 06 F6 | 	mov	arg02, #1
0d978     1C 75 B1 FD | 	call	#__system___float_tointeger
0d97c     FD 26 02 F6 | 	mov	local01, result1
0d980     1C 4E 05 F1 | 	add	fp, #28
0d984     A7 26 62 FC | 	wrlong	local01, fp
0d988     1C 4E 85 F1 | 	sub	fp, #28
0d98c     00 DF BF FD | 	call	#_pop
0d990     FF 2C 02 F6 | 	mov	local04, result3
0d994     A7 FA 61 FC | 	wrlong	result1, fp
0d998     04 4E 05 F1 | 	add	fp, #4
0d99c     A7 FC 61 FC | 	wrlong	result2, fp
0d9a0     04 4E 05 F1 | 	add	fp, #4
0d9a4     A7 2C 62 FC | 	wrlong	local04, fp
0d9a8     08 4E 85 F1 | 	sub	fp, #8
0d9ac     A7 12 02 F6 | 	mov	arg01, fp
0d9b0     C0 E0 BF FD | 	call	#_converttoint
0d9b4     FD 2A 52 F6 | 	abs	local03, result1 wc
0d9b8     07 2A 06 F5 | 	and	local03, #7
0d9bc     15 2B 82 F6 | 	negc	local03, local03
0d9c0     0C 4E 05 F1 | 	add	fp, #12
0d9c4     A7 2A 62 FC | 	wrlong	local03, fp
0d9c8     08 4E 05 F1 | 	add	fp, #8
0d9cc     A7 26 02 FB | 	rdlong	local01, fp
0d9d0     10 26 66 F0 | 	shl	local01, #16
0d9d4     08 4E 05 F1 | 	add	fp, #8
0d9d8     A7 2C 02 FB | 	rdlong	local04, fp
0d9dc     16 27 02 F1 | 	add	local01, local04
0d9e0     04 4E 05 F1 | 	add	fp, #4
0d9e4     A7 26 62 FC | 	wrlong	local01, fp
0d9e8                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0d9e8     37 00 00 FF 
0d9ec     10 E4 05 F1 | 	add	objptr, ##28176
0d9f0     F2 12 02 FB | 	rdlong	arg01, objptr
0d9f4     37 00 00 FF 
0d9f8     10 E4 85 F1 | 	sub	objptr, ##28176
0d9fc     14 4E 85 F1 | 	sub	fp, #20
0da00     A7 2C 02 FB | 	rdlong	local04, fp
0da04     0C 4E 85 F1 | 	sub	fp, #12
0da08     06 2C 66 F0 | 	shl	local04, #6
0da0c     16 13 02 F1 | 	add	arg01, local04
0da10     08 12 06 F1 | 	add	arg01, #8
0da14     09 FB 01 FB | 	rdlong	result1, arg01
0da18     1B FA 2D F4 | 	testbn	result1, #27 wz
0da1c     3C 00 90 5D |  if_ne	jmp	#LR__1192
0da20     37 00 00 FF 
0da24     10 E4 05 F1 | 	add	objptr, ##28176
0da28     F2 12 02 FB | 	rdlong	arg01, objptr
0da2c     37 00 00 FF 
0da30     10 E4 85 F1 | 	sub	objptr, ##28176
0da34     0C 4E 05 F1 | 	add	fp, #12
0da38     A7 2C 02 FB | 	rdlong	local04, fp
0da3c     06 2C 66 F0 | 	shl	local04, #6
0da40     16 13 02 F1 | 	add	arg01, local04
0da44     18 12 06 F1 | 	add	arg01, #24
0da48     14 4E 05 F1 | 	add	fp, #20
0da4c     A7 14 02 FB | 	rdlong	arg02, fp
0da50     20 4E 85 F1 | 	sub	fp, #32
0da54     09 15 62 FC | 	wrlong	arg02, arg01
0da58     80 00 90 FD | 	jmp	#LR__1193
0da5c                 | LR__1192
0da5c     37 00 00 FF 
0da60     10 E4 05 F1 | 	add	objptr, ##28176
0da64     F2 26 02 FB | 	rdlong	local01, objptr
0da68     37 00 00 FF 
0da6c     10 E4 85 F1 | 	sub	objptr, ##28176
0da70     0C 4E 05 F1 | 	add	fp, #12
0da74     A7 2C 02 FB | 	rdlong	local04, fp
0da78     06 2C 66 F0 | 	shl	local04, #6
0da7c     16 27 02 F1 | 	add	local01, local04
0da80     18 26 06 F1 | 	add	local01, #24
0da84     18 4E 05 F1 | 	add	fp, #24
0da88     A7 14 02 FB | 	rdlong	arg02, fp
0da8c     24 4E 85 F1 | 	sub	fp, #36
0da90     3E 2C 25 FF 
0da94     3C 12 06 F6 | 	mov	arg01, ##1247312956
0da98     38 71 B1 FD | 	call	#__system___float_div
0da9c     FD 12 02 F6 | 	mov	arg01, result1
0daa0     01 14 06 F6 | 	mov	arg02, #1
0daa4     F0 73 B1 FD | 	call	#__system___float_tointeger
0daa8     13 FB 51 FC | 	wrword	result1, local01
0daac     37 00 00 FF 
0dab0     10 E4 05 F1 | 	add	objptr, ##28176
0dab4     F2 12 02 FB | 	rdlong	arg01, objptr
0dab8     37 00 00 FF 
0dabc     10 E4 85 F1 | 	sub	objptr, ##28176
0dac0     0C 4E 05 F1 | 	add	fp, #12
0dac4     A7 2C 02 FB | 	rdlong	local04, fp
0dac8     0C 4E 85 F1 | 	sub	fp, #12
0dacc     06 2C 66 F0 | 	shl	local04, #6
0dad0     16 13 02 F1 | 	add	arg01, local04
0dad4     1A 12 06 F1 | 	add	arg01, #26
0dad8     09 01 5A FC | 	wrword	#256, arg01
0dadc                 | LR__1193
0dadc     A7 F0 03 F6 | 	mov	ptra, fp
0dae0     B2 00 A0 FD | 	call	#popregs_
0dae4                 | _do_changefreq_ret
0dae4     2D 00 64 FD | 	ret
0dae8                 | 
0dae8                 | ' 
0dae8                 | ' '-------------------- changepan
0dae8                 | ' 
0dae8                 | ' sub do_changepan
0dae8                 | _do_changepan
0dae8     01 4A 05 F6 | 	mov	COUNT_, #1
0daec     A8 00 A0 FD | 	call	#pushregs_
0daf0     14 F0 07 F1 | 	add	ptra, #20
0daf4     98 DD BF FD | 	call	#_pop
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 FC 61 FC | 	wrlong	result2, fp
0db04     04 4E 05 F1 | 	add	fp, #4
0db08     A7 FE 61 FC | 	wrlong	result3, fp
0db0c     08 4E 85 F1 | 	sub	fp, #8
0db10     00 00 23 FF 
0db14     00 26 06 F6 | 	mov	local01, ##1174405120
0db18     A7 12 02 F6 | 	mov	arg01, fp
0db1c     10 E0 BF FD | 	call	#_converttofloat
0db20     FD 14 02 F6 | 	mov	arg02, result1
0db24     13 13 02 F6 | 	mov	arg01, local01
0db28     A4 6E B1 FD | 	call	#__system___float_mul
0db2c     FD 12 02 F6 | 	mov	arg01, result1
0db30     01 14 06 F6 | 	mov	arg02, #1
0db34     60 73 B1 FD | 	call	#__system___float_tointeger
0db38     0D 26 C6 F9 | 	decod	local01, #13
0db3c     FD 26 02 F1 | 	add	local01, result1
0db40     10 4E 05 F1 | 	add	fp, #16
0db44     A7 26 62 FC | 	wrlong	local01, fp
0db48                 | ' 
0db48                 | ' t1=pop()
0db48                 | ' pan=8192+round(8192*converttofloat(t1)) 
0db48                 | ' if pan<0 then pan=0
0db48     10 4E 85 F1 | 	sub	fp, #16
0db4c     00 26 56 F2 | 	cmps	local01, #0 wc
0db50     10 4E 05 C1 |  if_b	add	fp, #16
0db54     A7 00 68 CC |  if_b	wrlong	#0, fp
0db58     10 4E 85 C1 |  if_b	sub	fp, #16
0db5c                 | ' if pan>16384 then pan=16384
0db5c     10 4E 05 F1 | 	add	fp, #16
0db60     A7 26 02 FB | 	rdlong	local01, fp
0db64     10 4E 85 F1 | 	sub	fp, #16
0db68     20 00 00 FF 
0db6c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0db70     10 4E 05 31 |  if_ae	add	fp, #16
0db74     20 00 80 3F 
0db78     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0db7c     10 4E 85 31 |  if_ae	sub	fp, #16
0db80     0C DD BF FD | 	call	#_pop
0db84     FF 26 02 F6 | 	mov	local01, result3
0db88     A7 FA 61 FC | 	wrlong	result1, fp
0db8c     04 4E 05 F1 | 	add	fp, #4
0db90     A7 FC 61 FC | 	wrlong	result2, fp
0db94     04 4E 05 F1 | 	add	fp, #4
0db98     A7 26 62 FC | 	wrlong	local01, fp
0db9c     08 4E 85 F1 | 	sub	fp, #8
0dba0     A7 12 02 F6 | 	mov	arg01, fp
0dba4     CC DE BF FD | 	call	#_converttoint
0dba8     FD 26 52 F6 | 	abs	local01, result1 wc
0dbac     07 26 06 F5 | 	and	local01, #7
0dbb0     13 27 82 F6 | 	negc	local01, local01
0dbb4     0C 4E 05 F1 | 	add	fp, #12
0dbb8     A7 26 62 FC | 	wrlong	local01, fp
0dbbc     37 00 00 FF 
0dbc0     10 E4 05 F1 | 	add	objptr, ##28176
0dbc4     F2 12 02 FB | 	rdlong	arg01, objptr
0dbc8     37 00 00 FF 
0dbcc     10 E4 85 F1 | 	sub	objptr, ##28176
0dbd0     06 26 66 F0 | 	shl	local01, #6
0dbd4     13 13 02 F1 | 	add	arg01, local01
0dbd8     16 12 06 F1 | 	add	arg01, #22
0dbdc     04 4E 05 F1 | 	add	fp, #4
0dbe0     A7 14 02 FB | 	rdlong	arg02, fp
0dbe4     10 4E 85 F1 | 	sub	fp, #16
0dbe8     09 15 52 FC | 	wrword	arg02, arg01
0dbec     A7 F0 03 F6 | 	mov	ptra, fp
0dbf0     B2 00 A0 FD | 	call	#popregs_
0dbf4                 | _do_changepan_ret
0dbf4     2D 00 64 FD | 	ret
0dbf8                 | 
0dbf8                 | ' 
0dbf8                 | ' '-------------------- changevol
0dbf8                 | ' 
0dbf8                 | ' sub do_changevol
0dbf8                 | _do_changevol
0dbf8     00 4A 05 F6 | 	mov	COUNT_, #0
0dbfc     A8 00 A0 FD | 	call	#pushregs_
0dc00     14 F0 07 F1 | 	add	ptra, #20
0dc04     88 DC BF FD | 	call	#_pop
0dc08     FF 14 02 F6 | 	mov	arg02, result3
0dc0c     A7 FA 61 FC | 	wrlong	result1, fp
0dc10     04 4E 05 F1 | 	add	fp, #4
0dc14     A7 FC 61 FC | 	wrlong	result2, fp
0dc18     04 4E 05 F1 | 	add	fp, #4
0dc1c     A7 14 62 FC | 	wrlong	arg02, fp
0dc20     08 4E 85 F1 | 	sub	fp, #8
0dc24     A7 12 02 F6 | 	mov	arg01, fp
0dc28     04 DF BF FD | 	call	#_converttofloat
0dc2c     FD 12 02 F6 | 	mov	arg01, result1
0dc30     00 3D 22 FF 
0dc34     00 14 06 F6 | 	mov	arg02, ##1148846080
0dc38     94 6D B1 FD | 	call	#__system___float_mul
0dc3c     FD 12 02 F6 | 	mov	arg01, result1
0dc40     01 14 06 F6 | 	mov	arg02, #1
0dc44     50 72 B1 FD | 	call	#__system___float_tointeger
0dc48     FD 14 52 F6 | 	abs	arg02, result1 wc
0dc4c     0D 14 46 F7 | 	zerox	arg02, #13
0dc50     0A 15 82 F6 | 	negc	arg02, arg02
0dc54     10 4E 05 F1 | 	add	fp, #16
0dc58     A7 14 62 FC | 	wrlong	arg02, fp
0dc5c     10 4E 85 F1 | 	sub	fp, #16
0dc60     2C DC BF FD | 	call	#_pop
0dc64     FF 14 02 F6 | 	mov	arg02, result3
0dc68     A7 FA 61 FC | 	wrlong	result1, fp
0dc6c     04 4E 05 F1 | 	add	fp, #4
0dc70     A7 FC 61 FC | 	wrlong	result2, fp
0dc74     04 4E 05 F1 | 	add	fp, #4
0dc78     A7 14 62 FC | 	wrlong	arg02, fp
0dc7c     08 4E 85 F1 | 	sub	fp, #8
0dc80     A7 12 02 F6 | 	mov	arg01, fp
0dc84     EC DD BF FD | 	call	#_converttoint
0dc88     FD 14 52 F6 | 	abs	arg02, result1 wc
0dc8c     07 14 06 F5 | 	and	arg02, #7
0dc90     0A 15 82 F6 | 	negc	arg02, arg02
0dc94     0C 4E 05 F1 | 	add	fp, #12
0dc98     A7 14 62 FC | 	wrlong	arg02, fp
0dc9c     37 00 00 FF 
0dca0     10 E4 05 F1 | 	add	objptr, ##28176
0dca4     F2 12 02 FB | 	rdlong	arg01, objptr
0dca8     37 00 00 FF 
0dcac     10 E4 85 F1 | 	sub	objptr, ##28176
0dcb0     06 14 66 F0 | 	shl	arg02, #6
0dcb4     0A 13 02 F1 | 	add	arg01, arg02
0dcb8     14 12 06 F1 | 	add	arg01, #20
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 14 02 FB | 	rdlong	arg02, fp
0dcc4     10 4E 85 F1 | 	sub	fp, #16
0dcc8     09 15 52 FC | 	wrword	arg02, arg01
0dccc     A7 F0 03 F6 | 	mov	ptra, fp
0dcd0     B2 00 A0 FD | 	call	#popregs_
0dcd4                 | _do_changevol_ret
0dcd4     2D 00 64 FD | 	ret
0dcd8                 | 
0dcd8                 | ' 
0dcd8                 | ' '-------------------- changewav
0dcd8                 | ' 
0dcd8                 | ' sub do_changewav
0dcd8                 | _do_changewav
0dcd8     00 4A 05 F6 | 	mov	COUNT_, #0
0dcdc     A8 00 A0 FD | 	call	#pushregs_
0dce0     14 F0 07 F1 | 	add	ptra, #20
0dce4     A8 DB BF FD | 	call	#_pop
0dce8     FF 14 02 F6 | 	mov	arg02, result3
0dcec     A7 FA 61 FC | 	wrlong	result1, fp
0dcf0     04 4E 05 F1 | 	add	fp, #4
0dcf4     A7 FC 61 FC | 	wrlong	result2, fp
0dcf8     04 4E 05 F1 | 	add	fp, #4
0dcfc     A7 14 62 FC | 	wrlong	arg02, fp
0dd00     08 4E 85 F1 | 	sub	fp, #8
0dd04     A7 12 02 F6 | 	mov	arg01, fp
0dd08     68 DD BF FD | 	call	#_converttoint
0dd0c     10 4E 05 F1 | 	add	fp, #16
0dd10     A7 FA 61 FC | 	wrlong	result1, fp
0dd14                 | ' 
0dd14                 | ' t1=pop()
0dd14                 | ' wave=converttoint(t1)
0dd14                 | ' if wave<0 then wave=0
0dd14     FD 14 02 F6 | 	mov	arg02, result1
0dd18     10 4E 85 F1 | 	sub	fp, #16
0dd1c     00 14 56 F2 | 	cmps	arg02, #0 wc
0dd20     10 4E 05 C1 |  if_b	add	fp, #16
0dd24     A7 00 68 CC |  if_b	wrlong	#0, fp
0dd28     10 4E 85 C1 |  if_b	sub	fp, #16
0dd2c     60 DB BF FD | 	call	#_pop
0dd30     FF 14 02 F6 | 	mov	arg02, result3
0dd34     A7 FA 61 FC | 	wrlong	result1, fp
0dd38     04 4E 05 F1 | 	add	fp, #4
0dd3c     A7 FC 61 FC | 	wrlong	result2, fp
0dd40     04 4E 05 F1 | 	add	fp, #4
0dd44     A7 14 62 FC | 	wrlong	arg02, fp
0dd48     08 4E 85 F1 | 	sub	fp, #8
0dd4c     A7 12 02 F6 | 	mov	arg01, fp
0dd50     20 DD BF FD | 	call	#_converttoint
0dd54     FD 14 52 F6 | 	abs	arg02, result1 wc
0dd58     07 14 06 F5 | 	and	arg02, #7
0dd5c     0A 15 82 F6 | 	negc	arg02, arg02
0dd60     0C 4E 05 F1 | 	add	fp, #12
0dd64     A7 14 62 FC | 	wrlong	arg02, fp
0dd68                 | ' if wave <32 then 
0dd68     04 4E 05 F1 | 	add	fp, #4
0dd6c     A7 14 02 FB | 	rdlong	arg02, fp
0dd70     10 4E 85 F1 | 	sub	fp, #16
0dd74     20 14 56 F2 | 	cmps	arg02, #32 wc
0dd78     48 00 90 3D |  if_ae	jmp	#LR__1200
0dd7c     37 00 00 FF 
0dd80     10 E4 05 F1 | 	add	objptr, ##28176
0dd84     F2 12 02 FB | 	rdlong	arg01, objptr
0dd88     37 00 00 FF 
0dd8c     10 E4 85 F1 | 	sub	objptr, ##28176
0dd90     0C 4E 05 F1 | 	add	fp, #12
0dd94     A7 14 02 FB | 	rdlong	arg02, fp
0dd98     06 14 66 F0 | 	shl	arg02, #6
0dd9c     0A 13 02 F1 | 	add	arg01, arg02
0dda0     08 12 06 F1 | 	add	arg01, #8
0dda4     04 4E 05 F1 | 	add	fp, #4
0dda8     A7 14 02 FB | 	rdlong	arg02, fp
0ddac     10 4E 85 F1 | 	sub	fp, #16
0ddb0     0B 14 66 F0 | 	shl	arg02, #11
0ddb4     00 00 40 FF 
0ddb8     00 14 06 F1 | 	add	arg02, ##-2147483648
0ddbc     09 15 62 FC | 	wrlong	arg02, arg01
0ddc0     34 00 90 FD | 	jmp	#LR__1201
0ddc4                 | LR__1200
0ddc4     37 00 00 FF 
0ddc8     10 E4 05 F1 | 	add	objptr, ##28176
0ddcc     F2 12 02 FB | 	rdlong	arg01, objptr
0ddd0     37 00 00 FF 
0ddd4     10 E4 85 F1 | 	sub	objptr, ##28176
0ddd8     0C 4E 05 F1 | 	add	fp, #12
0dddc     A7 14 02 FB | 	rdlong	arg02, fp
0dde0     0C 4E 85 F1 | 	sub	fp, #12
0dde4     06 14 66 F0 | 	shl	arg02, #6
0dde8     0A 13 02 F1 | 	add	arg01, arg02
0ddec     08 12 06 F1 | 	add	arg01, #8
0ddf0     00 00 C4 FF 
0ddf4     09 01 68 FC | 	wrlong	##-2013265920, arg01
0ddf8                 | LR__1201
0ddf8     A7 F0 03 F6 | 	mov	ptra, fp
0ddfc     B2 00 A0 FD | 	call	#popregs_
0de00                 | _do_changewav_ret
0de00     2D 00 64 FD | 	ret
0de04                 | 
0de04                 | ' 
0de04                 | ' '-------------------- chr$
0de04                 | ' 
0de04                 | ' sub do_chr
0de04                 | _do_chr
0de04     01 4A 05 F6 | 	mov	COUNT_, #1
0de08     A8 00 A0 FD | 	call	#pushregs_
0de0c     14 F0 07 F1 | 	add	ptra, #20
0de10     4A 00 00 FF 
0de14     80 E4 05 F1 | 	add	objptr, ##38016
0de18     F2 26 02 FB | 	rdlong	local01, objptr
0de1c     13 17 02 F6 | 	mov	arg03, local01
0de20     01 16 66 F0 | 	shl	arg03, #1
0de24     13 17 02 F1 | 	add	arg03, local01
0de28     02 16 66 F0 | 	shl	arg03, #2
0de2c     03 00 00 FF 
0de30     04 E4 85 F1 | 	sub	objptr, ##1540
0de34     F2 16 02 F1 | 	add	arg03, objptr
0de38     0B 17 02 FB | 	rdlong	arg03, arg03
0de3c     0C 4E 05 F1 | 	add	fp, #12
0de40     A7 16 62 FC | 	wrlong	arg03, fp
0de44                 | ' 
0de44                 | ' numpar=compiledline(lineptr_e).result.uresult
0de44                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0de44     0C 4E 85 F1 | 	sub	fp, #12
0de48     02 16 16 F2 | 	cmp	arg03, #2 wc
0de4c     47 00 00 FF 
0de50     7C E4 85 F1 | 	sub	objptr, ##36476
0de54     0C 4E 05 C1 |  if_b	add	fp, #12
0de58     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0de5c     0C 4E 85 C1 |  if_b	sub	fp, #12
0de60     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0de64     00 12 06 F6 | 	mov	arg01, #0
0de68     D4 9A B1 FD | 	call	#__system___getiolock_0574
0de6c     FD 12 02 F6 | 	mov	arg01, result1
0de70     A0 3D B1 FD | 	call	#__system___lockmem
0de74     8F 01 00 FF 
0de78     F6 14 06 F6 | 	mov	arg02, ##@LR__5569
0de7c     00 12 06 F6 | 	mov	arg01, #0
0de80     00 16 06 F6 | 	mov	arg03, #0
0de84     80 4A B1 FD | 	call	#__system___basic_print_string
0de88     00 12 06 F6 | 	mov	arg01, #0
0de8c     B0 9A B1 FD | 	call	#__system___getiolock_0574
0de90     FD 00 68 FC | 	wrlong	#0, result1
0de94     27 12 06 F6 | 	mov	arg01, #39
0de98     00 14 06 F6 | 	mov	arg02, #0
0de9c     54 04 B1 FD | 	call	#_printerror
0dea0     54 00 90 FD | 	jmp	#LR__1211
0dea4                 | LR__1210
0dea4     E8 D9 BF FD | 	call	#_pop
0dea8     FF 26 02 F6 | 	mov	local01, result3
0deac     A7 FA 61 FC | 	wrlong	result1, fp
0deb0     04 4E 05 F1 | 	add	fp, #4
0deb4     A7 FC 61 FC | 	wrlong	result2, fp
0deb8     04 4E 05 F1 | 	add	fp, #4
0debc     A7 26 62 FC | 	wrlong	local01, fp
0dec0     08 4E 85 F1 | 	sub	fp, #8
0dec4     A7 12 02 F6 | 	mov	arg01, fp
0dec8     A8 DB BF FD | 	call	#_converttoint
0decc     10 4E 05 F1 | 	add	fp, #16
0ded0     A7 FA 61 FC | 	wrlong	result1, fp
0ded4     FD 12 02 F6 | 	mov	arg01, result1
0ded8     10 4E 85 F1 | 	sub	fp, #16
0dedc     74 5F B1 FD | 	call	#__system__Chr_S
0dee0     A7 FA 61 FC | 	wrlong	result1, fp
0dee4     08 4E 05 F1 | 	add	fp, #8
0dee8     A7 3E 68 FC | 	wrlong	#31, fp
0deec     08 4E 85 F1 | 	sub	fp, #8
0def0     A7 12 02 F6 | 	mov	arg01, fp
0def4     30 DA BF FD | 	call	#_push
0def8                 | LR__1211
0def8     A7 F0 03 F6 | 	mov	ptra, fp
0defc     B2 00 A0 FD | 	call	#popregs_
0df00                 | _do_chr_ret
0df00     2D 00 64 FD | 	ret
0df04                 | 
0df04                 | ' 
0df04                 | ' '-------------------- circle
0df04                 | ' 
0df04                 | ' sub do_circle
0df04                 | _do_circle
0df04     02 4A 05 F6 | 	mov	COUNT_, #2
0df08     A8 00 A0 FD | 	call	#pushregs_
0df0c     24 F0 07 F1 | 	add	ptra, #36
0df10     7C D9 BF FD | 	call	#_pop
0df14     FD 18 02 F6 | 	mov	arg04, result1
0df18     FE 16 02 F6 | 	mov	arg03, result2
0df1c     FF 14 02 F6 | 	mov	arg02, result3
0df20     18 4E 05 F1 | 	add	fp, #24
0df24     A7 18 62 FC | 	wrlong	arg04, fp
0df28     04 4E 05 F1 | 	add	fp, #4
0df2c     A7 16 62 FC | 	wrlong	arg03, fp
0df30     04 4E 05 F1 | 	add	fp, #4
0df34     A7 14 62 FC | 	wrlong	arg02, fp
0df38     20 4E 85 F1 | 	sub	fp, #32
0df3c     50 D9 BF FD | 	call	#_pop
0df40     FD 18 02 F6 | 	mov	arg04, result1
0df44     FE 16 02 F6 | 	mov	arg03, result2
0df48     FF 26 02 F6 | 	mov	local01, result3
0df4c     0C 4E 05 F1 | 	add	fp, #12
0df50     A7 18 62 FC | 	wrlong	arg04, fp
0df54     04 4E 05 F1 | 	add	fp, #4
0df58     A7 16 62 FC | 	wrlong	arg03, fp
0df5c     04 4E 05 F1 | 	add	fp, #4
0df60     A7 26 62 FC | 	wrlong	local01, fp
0df64     14 4E 85 F1 | 	sub	fp, #20
0df68     24 D9 BF FD | 	call	#_pop
0df6c     A7 FA 61 FC | 	wrlong	result1, fp
0df70     04 4E 05 F1 | 	add	fp, #4
0df74     A7 FC 61 FC | 	wrlong	result2, fp
0df78     04 4E 05 F1 | 	add	fp, #4
0df7c     A7 FE 61 FC | 	wrlong	result3, fp
0df80                 | ' 
0df80                 | ' t3=pop()
0df80                 | ' t2=pop()
0df80                 | ' t1=pop()
0df80                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0df80     FF 18 02 F6 | 	mov	arg04, result3
0df84     08 4E 85 F1 | 	sub	fp, #8
0df88     1C 18 0E F2 | 	cmp	arg04, #28 wz
0df8c     08 4E 05 51 |  if_ne	add	fp, #8
0df90     A7 26 02 5B |  if_ne	rdlong	local01, fp
0df94     08 4E 85 51 |  if_ne	sub	fp, #8
0df98     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0df9c     7C 00 90 5D |  if_ne	jmp	#LR__1220
0dfa0     14 4E 05 F1 | 	add	fp, #20
0dfa4     A7 26 02 FB | 	rdlong	local01, fp
0dfa8     14 4E 85 F1 | 	sub	fp, #20
0dfac     1C 26 0E F2 | 	cmp	local01, #28 wz
0dfb0     14 4E 05 51 |  if_ne	add	fp, #20
0dfb4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dfb8     14 4E 85 51 |  if_ne	sub	fp, #20
0dfbc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dfc0     58 00 90 5D |  if_ne	jmp	#LR__1220
0dfc4     20 4E 05 F1 | 	add	fp, #32
0dfc8     A7 26 02 FB | 	rdlong	local01, fp
0dfcc     20 4E 85 F1 | 	sub	fp, #32
0dfd0     1C 26 0E F2 | 	cmp	local01, #28 wz
0dfd4     20 4E 05 51 |  if_ne	add	fp, #32
0dfd8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dfdc     20 4E 85 51 |  if_ne	sub	fp, #32
0dfe0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dfe4     34 00 90 5D |  if_ne	jmp	#LR__1220
0dfe8     A7 12 02 FB | 	rdlong	arg01, fp
0dfec     0C 4E 05 F1 | 	add	fp, #12
0dff0     A7 14 02 FB | 	rdlong	arg02, fp
0dff4     0C 4E 05 F1 | 	add	fp, #12
0dff8     A7 16 02 FB | 	rdlong	arg03, fp
0dffc     18 4E 85 F1 | 	sub	fp, #24
0e000     37 00 00 FF 
0e004     28 E4 05 F1 | 	add	objptr, ##28200
0e008     F2 18 02 FB | 	rdlong	arg04, objptr
0e00c     37 00 00 FF 
0e010     28 E4 85 F1 | 	sub	objptr, ##28200
0e014     2C 1B B1 FD | 	call	#_hg010b_spin2_circle
0e018                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0e018     54 00 90 FD | 	jmp	#LR__1221
0e01c                 | LR__1220
0e01c     A7 12 02 F6 | 	mov	arg01, fp
0e020     50 DA BF FD | 	call	#_converttoint
0e024     FD 26 02 F6 | 	mov	local01, result1
0e028     0C 4E 05 F1 | 	add	fp, #12
0e02c     A7 12 02 F6 | 	mov	arg01, fp
0e030     0C 4E 85 F1 | 	sub	fp, #12
0e034     3C DA BF FD | 	call	#_converttoint
0e038     FD 28 02 F6 | 	mov	local02, result1
0e03c     18 4E 05 F1 | 	add	fp, #24
0e040     A7 12 02 F6 | 	mov	arg01, fp
0e044     18 4E 85 F1 | 	sub	fp, #24
0e048     28 DA BF FD | 	call	#_converttoint
0e04c     FD 16 02 F6 | 	mov	arg03, result1
0e050     37 00 00 FF 
0e054     28 E4 05 F1 | 	add	objptr, ##28200
0e058     F2 18 02 FB | 	rdlong	arg04, objptr
0e05c     37 00 00 FF 
0e060     28 E4 85 F1 | 	sub	objptr, ##28200
0e064     13 13 02 F6 | 	mov	arg01, local01
0e068     14 15 02 F6 | 	mov	arg02, local02
0e06c     D4 1A B1 FD | 	call	#_hg010b_spin2_circle
0e070                 | LR__1221
0e070     A7 F0 03 F6 | 	mov	ptra, fp
0e074     B2 00 A0 FD | 	call	#popregs_
0e078                 | _do_circle_ret
0e078     2D 00 64 FD | 	ret
0e07c                 | 
0e07c                 | ' 
0e07c                 | ' '-------------------- click
0e07c                 | ' 
0e07c                 | ' sub do_click
0e07c                 | _do_click
0e07c     10 D8 BF FD | 	call	#_pop
0e080     00 FA 4D F2 | 	cmps	result1, #0 wz
0e084                 | ' 
0e084                 | ' t1=pop()
0e084                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0e084     50 00 00 AF 
0e088     14 E5 05 A1 |  if_e	add	objptr, ##41236
0e08c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e090     50 00 00 FF 
0e094     14 E5 C5 F3 | 	sumz	objptr, ##41236
0e098     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0e09c     50 00 00 5F 
0e0a0     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0e0a4                 | _do_click_ret
0e0a4     2D 00 64 FD | 	ret
0e0a8                 | 
0e0a8                 | ' 
0e0a8                 | ' '-------------------- close
0e0a8                 | ' 
0e0a8                 | ' sub do_close
0e0a8                 | _do_close
0e0a8     03 4A 05 F6 | 	mov	COUNT_, #3
0e0ac     A8 00 A0 FD | 	call	#pushregs_
0e0b0     DC D7 BF FD | 	call	#_pop
0e0b4     FD 26 02 F6 | 	mov	local01, result1
0e0b8     FF 16 02 F6 | 	mov	arg03, result3
0e0bc     FE 28 02 F6 | 	mov	local02, result2
0e0c0     0B 2B 02 F6 | 	mov	local03, arg03
0e0c4                 | ' 
0e0c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0c4                 | ' t1=pop()
0e0c4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0e0c4     2C 2A 0E F2 | 	cmp	local03, #44 wz
0e0c8     44 00 90 AD |  if_e	jmp	#LR__1230
0e0cc     00 12 06 F6 | 	mov	arg01, #0
0e0d0     6C 98 B1 FD | 	call	#__system___getiolock_0574
0e0d4     FD 12 02 F6 | 	mov	arg01, result1
0e0d8     38 3B B1 FD | 	call	#__system___lockmem
0e0dc     8F 01 00 FF 
0e0e0     FD 14 06 F6 | 	mov	arg02, ##@LR__5570
0e0e4     00 12 06 F6 | 	mov	arg01, #0
0e0e8     00 16 06 F6 | 	mov	arg03, #0
0e0ec     18 48 B1 FD | 	call	#__system___basic_print_string
0e0f0     00 12 06 F6 | 	mov	arg01, #0
0e0f4     0A 14 06 F6 | 	mov	arg02, #10
0e0f8     00 16 06 F6 | 	mov	arg03, #0
0e0fc     B0 47 B1 FD | 	call	#__system___basic_print_char
0e100     00 12 06 F6 | 	mov	arg01, #0
0e104     38 98 B1 FD | 	call	#__system___getiolock_0574
0e108     FD 00 68 FC | 	wrlong	#0, result1
0e10c     08 00 90 FD | 	jmp	#LR__1231
0e110                 | LR__1230
0e110                 | ' channel  = t1.result.iresult
0e110                 | ' close #channel
0e110     13 13 02 F6 | 	mov	arg01, local01
0e114     98 8D B1 FD | 	call	#__system__close
0e118                 | LR__1231
0e118     A7 F0 03 F6 | 	mov	ptra, fp
0e11c     B2 00 A0 FD | 	call	#popregs_
0e120                 | _do_close_ret
0e120     2D 00 64 FD | 	ret
0e124                 | 
0e124                 | ' 
0e124                 | ' '-------------------- cls
0e124                 | ' 
0e124                 | ' sub do_cls
0e124                 | _do_cls
0e124     37 00 00 FF 
0e128     3C E4 05 F1 | 	add	objptr, ##28220
0e12c     F2 12 02 FB | 	rdlong	arg01, objptr
0e130     04 E4 85 F1 | 	sub	objptr, #4
0e134     F2 14 02 FB | 	rdlong	arg02, objptr
0e138     37 00 00 FF 
0e13c     38 E4 85 F1 | 	sub	objptr, ##28216
0e140     94 1E B1 FD | 	call	#_hg010b_spin2_cls
0e144     37 00 00 FF 
0e148     3C E4 05 F1 | 	add	objptr, ##28220
0e14c     F2 14 02 FB | 	rdlong	arg02, objptr
0e150     14 E4 85 F1 | 	sub	objptr, #20
0e154     F2 14 62 FC | 	wrlong	arg02, objptr
0e158     37 00 00 FF 
0e15c     28 E4 85 F1 | 	sub	objptr, ##28200
0e160                 | _do_cls_ret
0e160     2D 00 64 FD | 	ret
0e164                 | 
0e164                 | ' 
0e164                 | ' '-------------------- color
0e164                 | ' 
0e164                 | ' sub do_color
0e164                 | _do_color
0e164     03 4A 05 F6 | 	mov	COUNT_, #3
0e168     A8 00 A0 FD | 	call	#pushregs_
0e16c     20 D7 BF FD | 	call	#_pop
0e170     FD 26 02 F6 | 	mov	local01, result1
0e174     FE 28 02 F6 | 	mov	local02, result2
0e178     FF 2A 02 F6 | 	mov	local03, result3
0e17c     37 00 00 FF 
0e180     28 E4 05 F1 | 	add	objptr, ##28200
0e184     F2 26 62 FC | 	wrlong	local01, objptr
0e188     37 00 00 FF 
0e18c     28 E4 85 F1 | 	sub	objptr, ##28200
0e190     A7 F0 03 F6 | 	mov	ptra, fp
0e194     B2 00 A0 FD | 	call	#popregs_
0e198                 | _do_color_ret
0e198     2D 00 64 FD | 	ret
0e19c                 | 
0e19c                 | ' 
0e19c                 | ' '-------------------- cos
0e19c                 | ' 
0e19c                 | ' sub do_cos
0e19c                 | _do_cos
0e19c     01 4A 05 F6 | 	mov	COUNT_, #1
0e1a0     A8 00 A0 FD | 	call	#pushregs_
0e1a4     10 F0 07 F1 | 	add	ptra, #16
0e1a8     4A 00 00 FF 
0e1ac     80 E4 05 F1 | 	add	objptr, ##38016
0e1b0     F2 26 02 FB | 	rdlong	local01, objptr
0e1b4     13 17 02 F6 | 	mov	arg03, local01
0e1b8     01 16 66 F0 | 	shl	arg03, #1
0e1bc     13 17 02 F1 | 	add	arg03, local01
0e1c0     02 16 66 F0 | 	shl	arg03, #2
0e1c4     03 00 00 FF 
0e1c8     04 E4 85 F1 | 	sub	objptr, ##1540
0e1cc     F2 16 02 F1 | 	add	arg03, objptr
0e1d0     0B 17 02 FB | 	rdlong	arg03, arg03
0e1d4     0C 4E 05 F1 | 	add	fp, #12
0e1d8     A7 16 62 FC | 	wrlong	arg03, fp
0e1dc                 | ' 
0e1dc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e1dc                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0e1dc     0C 4E 85 F1 | 	sub	fp, #12
0e1e0     02 16 16 F2 | 	cmp	arg03, #2 wc
0e1e4     47 00 00 FF 
0e1e8     7C E4 85 F1 | 	sub	objptr, ##36476
0e1ec     0C 4E 05 C1 |  if_b	add	fp, #12
0e1f0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e1f4     0C 4E 85 C1 |  if_b	sub	fp, #12
0e1f8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1240
0e1fc     00 12 06 F6 | 	mov	arg01, #0
0e200     3C 97 B1 FD | 	call	#__system___getiolock_0574
0e204     FD 12 02 F6 | 	mov	arg01, result1
0e208     08 3A B1 FD | 	call	#__system___lockmem
0e20c     8F 01 00 FF 
0e210     0F 15 06 F6 | 	mov	arg02, ##@LR__5571
0e214     00 12 06 F6 | 	mov	arg01, #0
0e218     00 16 06 F6 | 	mov	arg03, #0
0e21c     E8 46 B1 FD | 	call	#__system___basic_print_string
0e220     00 12 06 F6 | 	mov	arg01, #0
0e224     18 97 B1 FD | 	call	#__system___getiolock_0574
0e228     FD 00 68 FC | 	wrlong	#0, result1
0e22c     27 12 06 F6 | 	mov	arg01, #39
0e230     00 14 06 F6 | 	mov	arg02, #0
0e234     BC 00 B1 FD | 	call	#_printerror
0e238     78 00 90 FD | 	jmp	#LR__1241
0e23c                 | LR__1240
0e23c     50 D6 BF FD | 	call	#_pop
0e240     A7 FA 61 FC | 	wrlong	result1, fp
0e244     04 4E 05 F1 | 	add	fp, #4
0e248     A7 FC 61 FC | 	wrlong	result2, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 FE 61 FC | 	wrlong	result3, fp
0e254     08 4E 85 F1 | 	sub	fp, #8
0e258     51 00 00 FF 
0e25c     BC E5 05 F1 | 	add	objptr, ##41916
0e260     F2 26 02 FB | 	rdlong	local01, objptr
0e264     51 00 00 FF 
0e268     BC E5 85 F1 | 	sub	objptr, ##41916
0e26c     A7 12 02 F6 | 	mov	arg01, fp
0e270     BC D8 BF FD | 	call	#_converttofloat
0e274     FD 14 02 F6 | 	mov	arg02, result1
0e278     13 13 02 F6 | 	mov	arg01, local01
0e27c     50 67 B1 FD | 	call	#__system___float_mul
0e280     FD 14 02 F6 | 	mov	arg02, result1
0e284     87 E4 1F FF 
0e288     DB 13 06 F6 | 	mov	arg01, ##1070141403
0e28c     1F 14 E6 F4 | 	bitnot	arg02, #31
0e290     6C 63 B1 FD | 	call	#__system___float_add
0e294     FD 12 02 F6 | 	mov	arg01, result1
0e298     94 70 B1 FD | 	call	#__system____builtin_sinf
0e29c     A7 FA 61 FC | 	wrlong	result1, fp
0e2a0     08 4E 05 F1 | 	add	fp, #8
0e2a4     A7 3C 68 FC | 	wrlong	#30, fp
0e2a8     08 4E 85 F1 | 	sub	fp, #8
0e2ac     A7 12 02 F6 | 	mov	arg01, fp
0e2b0     74 D6 BF FD | 	call	#_push
0e2b4                 | LR__1241
0e2b4     A7 F0 03 F6 | 	mov	ptra, fp
0e2b8     B2 00 A0 FD | 	call	#popregs_
0e2bc                 | _do_cos_ret
0e2bc     2D 00 64 FD | 	ret
0e2c0                 | 
0e2c0                 | ' 
0e2c0                 | ' '-------------------- cursor
0e2c0                 | ' 
0e2c0                 | ' sub do_cursor
0e2c0                 | _do_cursor
0e2c0     CC D5 BF FD | 	call	#_pop
0e2c4     00 FA 4D F2 | 	cmps	result1, #0 wz
0e2c8                 | ' t1=pop()
0e2c8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0e2c8     14 00 90 5D |  if_ne	jmp	#LR__1250
0e2cc     11 12 06 F6 | 	mov	arg01, #17
0e2d0     00 14 06 F6 | 	mov	arg02, #0
0e2d4     00 16 06 F6 | 	mov	arg03, #0
0e2d8     DC 0F B1 FD | 	call	#_hg010b_spin2_setspritesize
0e2dc     10 00 90 FD | 	jmp	#LR__1251
0e2e0                 | LR__1250
0e2e0     11 12 06 F6 | 	mov	arg01, #17
0e2e4     08 14 06 F6 | 	mov	arg02, #8
0e2e8     10 16 06 F6 | 	mov	arg03, #16
0e2ec     C8 0F B1 FD | 	call	#_hg010b_spin2_setspritesize
0e2f0                 | LR__1251
0e2f0                 | _do_cursor_ret
0e2f0     2D 00 64 FD | 	ret
0e2f4                 | 
0e2f4                 | ' 
0e2f4                 | ' '-------------------- defenv
0e2f4                 | ' 
0e2f4                 | ' sub do_defenv
0e2f4                 | _do_defenv
0e2f4     08 4A 05 F6 | 	mov	COUNT_, #8
0e2f8     A8 00 A0 FD | 	call	#pushregs_
0e2fc     58 F0 07 F1 | 	add	ptra, #88
0e300     4A 00 00 FF 
0e304     80 E4 05 F1 | 	add	objptr, ##38016
0e308     F2 26 02 FB | 	rdlong	local01, objptr
0e30c     13 1B 02 F6 | 	mov	arg05, local01
0e310     01 1A 66 F0 | 	shl	arg05, #1
0e314     13 1B 02 F1 | 	add	arg05, local01
0e318     02 1A 66 F0 | 	shl	arg05, #2
0e31c     03 00 00 FF 
0e320     04 E4 85 F1 | 	sub	objptr, ##1540
0e324     F2 1A 02 F1 | 	add	arg05, objptr
0e328     0D 1B 02 FB | 	rdlong	arg05, arg05
0e32c     10 4E 05 F1 | 	add	fp, #16
0e330     A7 1A 62 FC | 	wrlong	arg05, fp
0e334                 | ' 
0e334                 | ' numpar=compiledline(lineptr_e).result.uresult
0e334                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0e334     10 4E 85 F1 | 	sub	fp, #16
0e338     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e33c     47 00 00 FF 
0e340     7C E4 85 F1 | 	sub	objptr, ##36476
0e344     10 4E 05 51 |  if_ne	add	fp, #16
0e348     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e34c     10 4E 85 51 |  if_ne	sub	fp, #16
0e350     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0e354     8C 0A 90 5D |  if_ne	jmp	#LR__1281
0e358                 | ' 
0e358                 | ' if numpar=2 then						' env from .h2 or from a pointer
0e358     10 4E 05 F1 | 	add	fp, #16
0e35c     A7 26 02 FB | 	rdlong	local01, fp
0e360     10 4E 85 F1 | 	sub	fp, #16
0e364     02 26 0E F2 | 	cmp	local01, #2 wz
0e368     24 04 90 5D |  if_ne	jmp	#LR__1273
0e36c     20 D5 BF FD | 	call	#_pop
0e370     FF 1A 02 F6 | 	mov	arg05, result3
0e374     40 4E 05 F1 | 	add	fp, #64
0e378     A7 FA 61 FC | 	wrlong	result1, fp
0e37c     04 4E 05 F1 | 	add	fp, #4
0e380     A7 FC 61 FC | 	wrlong	result2, fp
0e384     04 4E 05 F1 | 	add	fp, #4
0e388     A7 1A 62 FC | 	wrlong	arg05, fp
0e38c                 | '   t1=pop()
0e38c                 | '   if t1.result_type=result_string2 then 
0e38c     48 4E 85 F1 | 	sub	fp, #72
0e390     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e394     20 00 90 5D |  if_ne	jmp	#LR__1260
0e398     40 4E 05 F1 | 	add	fp, #64
0e39c     A7 12 02 FB | 	rdlong	arg01, fp
0e3a0     40 4E 85 F1 | 	sub	fp, #64
0e3a4     60 D6 BF FD | 	call	#_convertstring
0e3a8     4C 4E 05 F1 | 	add	fp, #76
0e3ac     A7 FA 61 FC | 	wrlong	result1, fp
0e3b0     4C 4E 85 F1 | 	sub	fp, #76
0e3b4     58 00 90 FD | 	jmp	#LR__1263
0e3b8                 | LR__1260
0e3b8     48 4E 05 F1 | 	add	fp, #72
0e3bc     A7 26 02 FB | 	rdlong	local01, fp
0e3c0     48 4E 85 F1 | 	sub	fp, #72
0e3c4     1F 26 0E F2 | 	cmp	local01, #31 wz
0e3c8     18 00 90 5D |  if_ne	jmp	#LR__1261
0e3cc     40 4E 05 F1 | 	add	fp, #64
0e3d0     A7 26 02 FB | 	rdlong	local01, fp
0e3d4     0C 4E 05 F1 | 	add	fp, #12
0e3d8     A7 26 62 FC | 	wrlong	local01, fp
0e3dc     4C 4E 85 F1 | 	sub	fp, #76
0e3e0     2C 00 90 FD | 	jmp	#LR__1262
0e3e4                 | LR__1261
0e3e4     8F 01 00 FF 
0e3e8     15 27 06 F6 | 	mov	local01, ##@LR__5572
0e3ec     4C 4E 05 F1 | 	add	fp, #76
0e3f0     A7 26 62 FC | 	wrlong	local01, fp
0e3f4     0C 4E 85 F1 | 	sub	fp, #12
0e3f8     A7 12 02 F6 | 	mov	arg01, fp
0e3fc     40 4E 85 F1 | 	sub	fp, #64
0e400     70 D6 BF FD | 	call	#_converttoint
0e404     1C 4E 05 F1 | 	add	fp, #28
0e408     A7 FA 61 FC | 	wrlong	result1, fp
0e40c     1C 4E 85 F1 | 	sub	fp, #28
0e410                 | LR__1262
0e410                 | LR__1263
0e410                 | '   if s1<>"" then 
0e410     4C 4E 05 F1 | 	add	fp, #76
0e414     A7 12 02 FB | 	rdlong	arg01, fp
0e418     4C 4E 85 F1 | 	sub	fp, #76
0e41c     8F 01 00 FF 
0e420     16 15 06 F6 | 	mov	arg02, ##@LR__5573
0e424     14 38 B1 FD | 	call	#__system___string_cmp
0e428     00 FA 0D F2 | 	cmp	result1, #0 wz
0e42c     24 02 90 AD |  if_e	jmp	#LR__1267
0e430     5C D4 BF FD | 	call	#_pop
0e434     FF 26 02 F6 | 	mov	local01, result3
0e438     40 4E 05 F1 | 	add	fp, #64
0e43c     A7 FA 61 FC | 	wrlong	result1, fp
0e440     04 4E 05 F1 | 	add	fp, #4
0e444     A7 FC 61 FC | 	wrlong	result2, fp
0e448     04 4E 05 F1 | 	add	fp, #4
0e44c     A7 26 62 FC | 	wrlong	local01, fp
0e450     08 4E 85 F1 | 	sub	fp, #8
0e454     A7 12 02 F6 | 	mov	arg01, fp
0e458     40 4E 85 F1 | 	sub	fp, #64
0e45c     14 D6 BF FD | 	call	#_converttoint
0e460     18 4E 05 F1 | 	add	fp, #24
0e464     A7 FA 61 FC | 	wrlong	result1, fp
0e468     18 4E 85 F1 | 	sub	fp, #24
0e46c                 | '     t1=pop()
0e46c                 | '     channel=converttoint(t1) 
0e46c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0e46c     09 12 06 F6 | 	mov	arg01, #9
0e470     3C 8A B1 FD | 	call	#__system__close
0e474     09 26 06 F6 | 	mov	local01, #9
0e478     8F 01 00 FF 
0e47c     17 13 06 F6 | 	mov	arg01, ##@LR__5574
0e480     4C 4E 05 F1 | 	add	fp, #76
0e484     A7 14 02 FB | 	rdlong	arg02, fp
0e488     4C 4E 85 F1 | 	sub	fp, #76
0e48c     E0 37 B1 FD | 	call	#__system___string_concat
0e490     FD 14 02 F6 | 	mov	arg02, result1
0e494     13 13 02 F6 | 	mov	arg01, local01
0e498     00 16 06 F6 | 	mov	arg03, #0
0e49c     78 43 B1 FD | 	call	#__system___basic_open_string
0e4a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4a4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e4a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4ac     0C 4E 05 F1 | 	add	fp, #12
0e4b0     A7 FA 61 FC | 	wrlong	result1, fp
0e4b4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e4b4     0C 4E 85 F1 | 	sub	fp, #12
0e4b8     A0 00 90 AD |  if_e	jmp	#LR__1264
0e4bc     00 12 06 F6 | 	mov	arg01, #0
0e4c0     7C 94 B1 FD | 	call	#__system___getiolock_0574
0e4c4     FD 12 02 F6 | 	mov	arg01, result1
0e4c8     48 37 B1 FD | 	call	#__system___lockmem
0e4cc     8F 01 00 FF 
0e4d0     24 15 06 F6 | 	mov	arg02, ##@LR__5575
0e4d4     00 12 06 F6 | 	mov	arg01, #0
0e4d8     00 16 06 F6 | 	mov	arg03, #0
0e4dc     28 44 B1 FD | 	call	#__system___basic_print_string
0e4e0     0C 4E 05 F1 | 	add	fp, #12
0e4e4     A7 14 02 FB | 	rdlong	arg02, fp
0e4e8     0C 4E 85 F1 | 	sub	fp, #12
0e4ec     00 12 06 F6 | 	mov	arg01, #0
0e4f0     00 16 06 F6 | 	mov	arg03, #0
0e4f4     0A 18 06 F6 | 	mov	arg04, #10
0e4f8     50 44 B1 FD | 	call	#__system___basic_print_integer
0e4fc     8F 01 00 FF 
0e500     32 15 06 F6 | 	mov	arg02, ##@LR__5576
0e504     00 12 06 F6 | 	mov	arg01, #0
0e508     00 16 06 F6 | 	mov	arg03, #0
0e50c     F8 43 B1 FD | 	call	#__system___basic_print_string
0e510     00 26 06 F6 | 	mov	local01, #0
0e514     0C 4E 05 F1 | 	add	fp, #12
0e518     A7 12 02 FB | 	rdlong	arg01, fp
0e51c     0C 4E 85 F1 | 	sub	fp, #12
0e520     C0 5F B1 FD | 	call	#__system___strerror
0e524     FD 14 02 F6 | 	mov	arg02, result1
0e528     13 13 02 F6 | 	mov	arg01, local01
0e52c     00 16 06 F6 | 	mov	arg03, #0
0e530     D4 43 B1 FD | 	call	#__system___basic_print_string
0e534     00 12 06 F6 | 	mov	arg01, #0
0e538     0A 14 06 F6 | 	mov	arg02, #10
0e53c     00 16 06 F6 | 	mov	arg03, #0
0e540     6C 43 B1 FD | 	call	#__system___basic_print_char
0e544     00 12 06 F6 | 	mov	arg01, #0
0e548     F4 93 B1 FD | 	call	#__system___getiolock_0574
0e54c     FD 00 68 FC | 	wrlong	#0, result1
0e550     09 12 06 F6 | 	mov	arg01, #9
0e554     58 89 B1 FD | 	call	#__system__close
0e558     88 08 90 FD | 	jmp	#LR__1281
0e55c                 | LR__1264
0e55c                 | '     get #9,17,envbuf8(channel,0),256
0e55c     18 4E 05 F1 | 	add	fp, #24
0e560     A7 1A 02 FB | 	rdlong	arg05, fp
0e564     18 4E 85 F1 | 	sub	fp, #24
0e568     0D 17 02 F6 | 	mov	arg03, arg05
0e56c     09 16 66 F0 | 	shl	arg03, #9
0e570     0D 17 02 F1 | 	add	arg03, arg05
0e574     0C 00 00 FF 
0e578     D8 E4 05 F1 | 	add	objptr, ##6360
0e57c     F2 16 02 F1 | 	add	arg03, objptr
0e580     09 12 06 F6 | 	mov	arg01, #9
0e584     11 14 06 F6 | 	mov	arg02, #17
0e588     00 19 06 F6 | 	mov	arg04, #256
0e58c     01 1A 06 F6 | 	mov	arg05, #1
0e590     0C 00 00 FF 
0e594     D8 E4 85 F1 | 	sub	objptr, ##6360
0e598     E8 44 B1 FD | 	call	#__system___basic_get
0e59c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0e59c     14 4E 05 F1 | 	add	fp, #20
0e5a0     A7 FE 69 FC | 	wrlong	#255, fp
0e5a4     14 4E 85 F1 | 	sub	fp, #20
0e5a8     0C 00 00 FF 
0e5ac     D8 E4 05 F1 | 	add	objptr, ##6360
0e5b0     97 30 48 FB | 	callpa	#(@LR__1266-@LR__1265)>>2,fcache_load_ptr_
0e5b4                 | LR__1265
0e5b4     18 4E 05 F1 | 	add	fp, #24
0e5b8     A7 16 02 FB | 	rdlong	arg03, fp
0e5bc     0B 27 02 F6 | 	mov	local01, arg03
0e5c0     09 26 66 F0 | 	shl	local01, #9
0e5c4     F2 26 02 F1 | 	add	local01, objptr
0e5c8     04 4E 85 F1 | 	sub	fp, #4
0e5cc     A7 1A 02 FB | 	rdlong	arg05, fp
0e5d0     0D 19 02 F6 | 	mov	arg04, arg05
0e5d4     01 18 66 F0 | 	shl	arg04, #1
0e5d8     13 19 02 F1 | 	add	arg04, local01
0e5dc     0B 27 02 F6 | 	mov	local01, arg03
0e5e0     09 26 66 F0 | 	shl	local01, #9
0e5e4     0B 27 02 F1 | 	add	local01, arg03
0e5e8     F2 26 02 F1 | 	add	local01, objptr
0e5ec     13 1B 02 F1 | 	add	arg05, local01
0e5f0     0D 27 C2 FA | 	rdbyte	local01, arg05
0e5f4     00 27 06 FA | 	mul	local01, #256
0e5f8     0C 27 52 FC | 	wrword	local01, arg04
0e5fc     A7 26 02 FB | 	rdlong	local01, fp
0e600     01 26 86 F1 | 	sub	local01, #1
0e604     A7 26 62 FC | 	wrlong	local01, fp
0e608     14 4E 85 F1 | 	sub	fp, #20
0e60c     00 26 56 F2 | 	cmps	local01, #0 wc
0e610     A0 FF 9F 3D |  if_ae	jmp	#LR__1265
0e614                 | LR__1266
0e614     0C 00 00 FF 
0e618     D8 E4 85 F1 | 	sub	objptr, ##6360
0e61c                 | '     close #9
0e61c     09 12 06 F6 | 	mov	arg01, #9
0e620     8C 88 B1 FD | 	call	#__system__close
0e624     18 4E 05 F1 | 	add	fp, #24
0e628     A7 26 02 FB | 	rdlong	local01, fp
0e62c     18 4E 85 F1 | 	sub	fp, #24
0e630     09 26 66 F0 | 	shl	local01, #9
0e634     0C 00 00 FF 
0e638     D8 E4 05 F1 | 	add	objptr, ##6360
0e63c     F2 26 02 F1 | 	add	local01, objptr
0e640     FE 27 06 F1 | 	add	local01, #510
0e644     13 01 58 FC | 	wrword	#0, local01
0e648                 | '     envbuf(channel,255)=0                                                              
0e648                 | '     return
0e648     0C 00 00 FF 
0e64c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e650     90 07 90 FD | 	jmp	#LR__1281
0e654                 | LR__1267
0e654                 | '     if wptr < $80000 then 
0e654     1C 4E 05 F1 | 	add	fp, #28
0e658     A7 28 02 FB | 	rdlong	local02, fp
0e65c     1C 4E 85 F1 | 	sub	fp, #28
0e660     00 04 00 FF 
0e664     00 28 56 F2 | 	cmps	local02, ##524288 wc
0e668     7C 00 90 3D |  if_ae	jmp	#LR__1270
0e66c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0e66c     14 4E 05 F1 | 	add	fp, #20
0e670     A7 00 68 FC | 	wrlong	#0, fp
0e674     14 4E 85 F1 | 	sub	fp, #20
0e678     0C 00 00 FF 
0e67c     D8 E4 05 F1 | 	add	objptr, ##6360
0e680     97 2C 48 FB | 	callpa	#(@LR__1269-@LR__1268)>>2,fcache_load_ptr_
0e684                 | LR__1268
0e684     18 4E 05 F1 | 	add	fp, #24
0e688     A7 28 02 FB | 	rdlong	local02, fp
0e68c     09 28 66 F0 | 	shl	local02, #9
0e690     F2 28 02 F1 | 	add	local02, objptr
0e694     04 4E 85 F1 | 	sub	fp, #4
0e698     A7 26 02 FB | 	rdlong	local01, fp
0e69c     13 1B 02 F6 | 	mov	arg05, local01
0e6a0     01 1A 66 F0 | 	shl	arg05, #1
0e6a4     14 1B 02 F1 | 	add	arg05, local02
0e6a8     08 4E 05 F1 | 	add	fp, #8
0e6ac     A7 12 02 FB | 	rdlong	arg01, fp
0e6b0     01 26 66 F0 | 	shl	local01, #1
0e6b4     13 13 02 F1 | 	add	arg01, local01
0e6b8     09 FB E1 FA | 	rdword	result1, arg01
0e6bc     0D FB 51 FC | 	wrword	result1, arg05
0e6c0     08 4E 85 F1 | 	sub	fp, #8
0e6c4     A7 28 02 FB | 	rdlong	local02, fp
0e6c8     01 28 06 F1 | 	add	local02, #1
0e6cc     A7 28 62 FC | 	wrlong	local02, fp
0e6d0     14 4E 85 F1 | 	sub	fp, #20
0e6d4     00 29 56 F2 | 	cmps	local02, #256 wc
0e6d8     A8 FF 9F CD |  if_b	jmp	#LR__1268
0e6dc                 | LR__1269
0e6dc     0C 00 00 FF 
0e6e0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e6e4     78 00 90 FD | 	jmp	#LR__1272
0e6e8                 | LR__1270
0e6e8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0e6e8     14 4E 05 F1 | 	add	fp, #20
0e6ec     A7 00 68 FC | 	wrlong	#0, fp
0e6f0     14 4E 85 F1 | 	sub	fp, #20
0e6f4                 | LR__1271
0e6f4     18 4E 05 F1 | 	add	fp, #24
0e6f8     A7 28 02 FB | 	rdlong	local02, fp
0e6fc     09 28 66 F0 | 	shl	local02, #9
0e700     0C 00 00 FF 
0e704     D8 E4 05 F1 | 	add	objptr, ##6360
0e708     F2 28 02 F1 | 	add	local02, objptr
0e70c     04 4E 85 F1 | 	sub	fp, #4
0e710     A7 26 02 FB | 	rdlong	local01, fp
0e714     13 2B 02 F6 | 	mov	local03, local01
0e718     01 2A 66 F0 | 	shl	local03, #1
0e71c     14 2B 02 F1 | 	add	local03, local02
0e720     08 4E 05 F1 | 	add	fp, #8
0e724     A7 12 02 FB | 	rdlong	arg01, fp
0e728     1C 4E 85 F1 | 	sub	fp, #28
0e72c     01 26 66 F0 | 	shl	local01, #1
0e730     13 13 02 F1 | 	add	arg01, local01
0e734     0C 00 00 FF 
0e738     D8 E4 85 F1 | 	sub	objptr, ##6360
0e73c     C8 FE B0 FD | 	call	#_psdpeek
0e740     15 FB 51 FC | 	wrword	result1, local03
0e744     14 4E 05 F1 | 	add	fp, #20
0e748     A7 2A 02 FB | 	rdlong	local03, fp
0e74c     01 2A 06 F1 | 	add	local03, #1
0e750     A7 2A 62 FC | 	wrlong	local03, fp
0e754     14 4E 85 F1 | 	sub	fp, #20
0e758     00 2B 56 F2 | 	cmps	local03, #256 wc
0e75c     94 FF 9F CD |  if_b	jmp	#LR__1271
0e760                 | LR__1272
0e760     18 4E 05 F1 | 	add	fp, #24
0e764     A7 2A 02 FB | 	rdlong	local03, fp
0e768     18 4E 85 F1 | 	sub	fp, #24
0e76c     09 2A 66 F0 | 	shl	local03, #9
0e770     0C 00 00 FF 
0e774     D8 E4 05 F1 | 	add	objptr, ##6360
0e778     F2 2A 02 F1 | 	add	local03, objptr
0e77c     FE 2B 06 F1 | 	add	local03, #510
0e780     15 01 58 FC | 	wrword	#0, local03
0e784                 | '     envbuf(channel,255)=0
0e784                 | '     return   
0e784     0C 00 00 FF 
0e788     D8 E4 85 F1 | 	sub	objptr, ##6360
0e78c     54 06 90 FD | 	jmp	#LR__1281
0e790                 | LR__1273
0e790                 | ' 
0e790                 | ' if numpar=5 then   						 'simple adsr
0e790     10 4E 05 F1 | 	add	fp, #16
0e794     A7 28 02 FB | 	rdlong	local02, fp
0e798     10 4E 85 F1 | 	sub	fp, #16
0e79c     05 28 0E F2 | 	cmp	local02, #5 wz
0e7a0     14 06 90 5D |  if_ne	jmp	#LR__1280
0e7a4     E8 D0 BF FD | 	call	#_pop
0e7a8     FF 26 02 F6 | 	mov	local01, result3
0e7ac     40 4E 05 F1 | 	add	fp, #64
0e7b0     A7 FA 61 FC | 	wrlong	result1, fp
0e7b4     04 4E 05 F1 | 	add	fp, #4
0e7b8     A7 FC 61 FC | 	wrlong	result2, fp
0e7bc     04 4E 05 F1 | 	add	fp, #4
0e7c0     A7 26 62 FC | 	wrlong	local01, fp
0e7c4     08 4E 85 F1 | 	sub	fp, #8
0e7c8     A7 12 02 F6 | 	mov	arg01, fp
0e7cc     40 4E 85 F1 | 	sub	fp, #64
0e7d0     5C D3 BF FD | 	call	#_converttofloat
0e7d4     FD 28 02 F6 | 	mov	local02, result1
0e7d8     2C 4E 05 F1 | 	add	fp, #44
0e7dc     A7 28 62 FC | 	wrlong	local02, fp
0e7e0     2C 4E 85 F1 | 	sub	fp, #44
0e7e4     A8 D0 BF FD | 	call	#_pop
0e7e8     FF 26 02 F6 | 	mov	local01, result3
0e7ec     40 4E 05 F1 | 	add	fp, #64
0e7f0     A7 FA 61 FC | 	wrlong	result1, fp
0e7f4     04 4E 05 F1 | 	add	fp, #4
0e7f8     A7 FC 61 FC | 	wrlong	result2, fp
0e7fc     04 4E 05 F1 | 	add	fp, #4
0e800     A7 26 62 FC | 	wrlong	local01, fp
0e804     08 4E 85 F1 | 	sub	fp, #8
0e808     A7 12 02 F6 | 	mov	arg01, fp
0e80c     40 4E 85 F1 | 	sub	fp, #64
0e810     1C D3 BF FD | 	call	#_converttofloat
0e814     FD 28 02 F6 | 	mov	local02, result1
0e818     28 4E 05 F1 | 	add	fp, #40
0e81c     A7 28 62 FC | 	wrlong	local02, fp
0e820     28 4E 85 F1 | 	sub	fp, #40
0e824     68 D0 BF FD | 	call	#_pop
0e828     FF 26 02 F6 | 	mov	local01, result3
0e82c     40 4E 05 F1 | 	add	fp, #64
0e830     A7 FA 61 FC | 	wrlong	result1, fp
0e834     04 4E 05 F1 | 	add	fp, #4
0e838     A7 FC 61 FC | 	wrlong	result2, fp
0e83c     04 4E 05 F1 | 	add	fp, #4
0e840     A7 26 62 FC | 	wrlong	local01, fp
0e844     08 4E 85 F1 | 	sub	fp, #8
0e848     A7 12 02 F6 | 	mov	arg01, fp
0e84c     40 4E 85 F1 | 	sub	fp, #64
0e850     DC D2 BF FD | 	call	#_converttofloat
0e854     FD 28 02 F6 | 	mov	local02, result1
0e858     24 4E 05 F1 | 	add	fp, #36
0e85c     A7 28 62 FC | 	wrlong	local02, fp
0e860     24 4E 85 F1 | 	sub	fp, #36
0e864     28 D0 BF FD | 	call	#_pop
0e868     FF 26 02 F6 | 	mov	local01, result3
0e86c     40 4E 05 F1 | 	add	fp, #64
0e870     A7 FA 61 FC | 	wrlong	result1, fp
0e874     04 4E 05 F1 | 	add	fp, #4
0e878     A7 FC 61 FC | 	wrlong	result2, fp
0e87c     04 4E 05 F1 | 	add	fp, #4
0e880     A7 26 62 FC | 	wrlong	local01, fp
0e884     08 4E 85 F1 | 	sub	fp, #8
0e888     A7 12 02 F6 | 	mov	arg01, fp
0e88c     40 4E 85 F1 | 	sub	fp, #64
0e890     9C D2 BF FD | 	call	#_converttofloat
0e894     FD 28 02 F6 | 	mov	local02, result1
0e898     20 4E 05 F1 | 	add	fp, #32
0e89c     A7 28 62 FC | 	wrlong	local02, fp
0e8a0     20 4E 85 F1 | 	sub	fp, #32
0e8a4     E8 CF BF FD | 	call	#_pop
0e8a8     FF 26 02 F6 | 	mov	local01, result3
0e8ac     40 4E 05 F1 | 	add	fp, #64
0e8b0     A7 FA 61 FC | 	wrlong	result1, fp
0e8b4     04 4E 05 F1 | 	add	fp, #4
0e8b8     A7 FC 61 FC | 	wrlong	result2, fp
0e8bc     04 4E 05 F1 | 	add	fp, #4
0e8c0     A7 26 62 FC | 	wrlong	local01, fp
0e8c4     08 4E 85 F1 | 	sub	fp, #8
0e8c8     A7 12 02 F6 | 	mov	arg01, fp
0e8cc     40 4E 85 F1 | 	sub	fp, #64
0e8d0     A0 D1 BF FD | 	call	#_converttoint
0e8d4     18 4E 05 F1 | 	add	fp, #24
0e8d8     A7 FA 61 FC | 	wrlong	result1, fp
0e8dc                 | '   t1=pop() : rr=converttofloat(t1)
0e8dc                 | '   t1=pop() : ss=converttofloat(t1) 
0e8dc                 | '   t1=pop() : dd=converttofloat(t1)
0e8dc                 | '   t1=pop() : aa=converttofloat(t1)
0e8dc                 | '   t1=pop() : channel=converttoint(t1)
0e8dc                 | '   if ss<0.0 then ss=0.0 
0e8dc     10 4E 05 F1 | 	add	fp, #16
0e8e0     A7 12 02 FB | 	rdlong	arg01, fp
0e8e4     28 4E 85 F1 | 	sub	fp, #40
0e8e8     00 14 06 F6 | 	mov	arg02, #0
0e8ec     01 16 06 F6 | 	mov	arg03, #1
0e8f0     10 65 B1 FD | 	call	#__system___float_cmp
0e8f4     00 FA 55 F2 | 	cmps	result1, #0 wc
0e8f8     28 4E 05 C1 |  if_b	add	fp, #40
0e8fc     A7 00 68 CC |  if_b	wrlong	#0, fp
0e900     28 4E 85 C1 |  if_b	sub	fp, #40
0e904                 | '   if ss>1.0 then ss=1.0
0e904     28 4E 05 F1 | 	add	fp, #40
0e908     A7 12 02 FB | 	rdlong	arg01, fp
0e90c     28 4E 85 F1 | 	sub	fp, #40
0e910     00 C0 1F FF 
0e914     00 14 06 F6 | 	mov	arg02, ##1065353216
0e918     01 16 66 F6 | 	neg	arg03, #1
0e91c     E4 64 B1 FD | 	call	#__system___float_cmp
0e920     01 FA 55 F2 | 	cmps	result1, #1 wc
0e924     28 4E 05 31 |  if_ae	add	fp, #40
0e928     00 C0 9F 3F 
0e92c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0e930     28 4E 85 31 |  if_ae	sub	fp, #40
0e934     20 4E 05 F1 | 	add	fp, #32
0e938     A7 12 02 FB | 	rdlong	arg01, fp
0e93c     04 4E 05 F1 | 	add	fp, #4
0e940     A7 14 02 FB | 	rdlong	arg02, fp
0e944     24 4E 85 F1 | 	sub	fp, #36
0e948     B4 5C B1 FD | 	call	#__system___float_add
0e94c     FD 12 02 F6 | 	mov	arg01, result1
0e950     2C 4E 05 F1 | 	add	fp, #44
0e954     A7 14 02 FB | 	rdlong	arg02, fp
0e958     2C 4E 85 F1 | 	sub	fp, #44
0e95c     A0 5C B1 FD | 	call	#__system___float_add
0e960     30 4E 05 F1 | 	add	fp, #48
0e964     A7 FA 61 FC | 	wrlong	result1, fp
0e968     FD 14 02 F6 | 	mov	arg02, result1
0e96c     30 4E 85 F1 | 	sub	fp, #48
0e970     00 C0 21 FF 
0e974     00 12 06 F6 | 	mov	arg01, ##1132462080
0e978     58 62 B1 FD | 	call	#__system___float_div
0e97c     34 4E 05 F1 | 	add	fp, #52
0e980     A7 FA 61 FC | 	wrlong	result1, fp
0e984     14 4E 85 F1 | 	sub	fp, #20
0e988     A7 12 02 FB | 	rdlong	arg01, fp
0e98c     FD 14 02 F6 | 	mov	arg02, result1
0e990     20 4E 85 F1 | 	sub	fp, #32
0e994     38 60 B1 FD | 	call	#__system___float_mul
0e998     FD 12 02 F6 | 	mov	arg01, result1
0e99c     01 14 06 F6 | 	mov	arg02, #1
0e9a0     F4 64 B1 FD | 	call	#__system___float_tointeger
0e9a4     A7 FA 61 FC | 	wrlong	result1, fp
0e9a8     24 4E 05 F1 | 	add	fp, #36
0e9ac     A7 12 02 FB | 	rdlong	arg01, fp
0e9b0     10 4E 05 F1 | 	add	fp, #16
0e9b4     A7 14 02 FB | 	rdlong	arg02, fp
0e9b8     34 4E 85 F1 | 	sub	fp, #52
0e9bc     10 60 B1 FD | 	call	#__system___float_mul
0e9c0     FD 12 02 F6 | 	mov	arg01, result1
0e9c4     01 14 06 F6 | 	mov	arg02, #1
0e9c8     CC 64 B1 FD | 	call	#__system___float_tointeger
0e9cc     04 4E 05 F1 | 	add	fp, #4
0e9d0     A7 FA 61 FC | 	wrlong	result1, fp
0e9d4     28 4E 05 F1 | 	add	fp, #40
0e9d8     A7 12 02 FB | 	rdlong	arg01, fp
0e9dc     08 4E 05 F1 | 	add	fp, #8
0e9e0     A7 14 02 FB | 	rdlong	arg02, fp
0e9e4     34 4E 85 F1 | 	sub	fp, #52
0e9e8     E4 5F B1 FD | 	call	#__system___float_mul
0e9ec     FD 12 02 F6 | 	mov	arg01, result1
0e9f0     01 14 06 F6 | 	mov	arg02, #1
0e9f4     A0 64 B1 FD | 	call	#__system___float_tointeger
0e9f8     0C 4E 05 F1 | 	add	fp, #12
0e9fc     A7 FA 61 FC | 	wrlong	result1, fp
0ea00     0C 4E 85 F1 | 	sub	fp, #12
0ea04     F8 BF 23 FF 
0ea08     00 28 06 F6 | 	mov	local02, ##1199566848
0ea0c     A7 12 02 FB | 	rdlong	arg01, fp
0ea10     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea14     1F 2C C6 C9 |  if_b	decod	local04, #31
0ea18     00 2C 06 36 |  if_ae	mov	local04, #0
0ea1c     AC 5B B1 FD | 	call	#__system___float_fromuns
0ea20     16 FB 61 F5 | 	xor	result1, local04
0ea24     FD 14 02 F6 | 	mov	arg02, result1
0ea28     14 13 02 F6 | 	mov	arg01, local02
0ea2c     A4 61 B1 FD | 	call	#__system___float_div
0ea30     38 4E 05 F1 | 	add	fp, #56
0ea34     A7 FA 61 FC | 	wrlong	result1, fp
0ea38     F8 BF 23 FF 
0ea3c     00 28 06 F6 | 	mov	local02, ##1199566848
0ea40     10 4E 85 F1 | 	sub	fp, #16
0ea44     A7 14 02 FB | 	rdlong	arg02, fp
0ea48     28 4E 85 F1 | 	sub	fp, #40
0ea4c     F8 BF 23 FF 
0ea50     00 12 06 F6 | 	mov	arg01, ##1199566848
0ea54     78 5F B1 FD | 	call	#__system___float_mul
0ea58     FD 14 02 F6 | 	mov	arg02, result1
0ea5c     14 13 02 F6 | 	mov	arg01, local02
0ea60     1F 14 E6 F4 | 	bitnot	arg02, #31
0ea64     98 5B B1 FD | 	call	#__system___float_add
0ea68     FD 28 02 F6 | 	mov	local02, result1
0ea6c     04 4E 05 F1 | 	add	fp, #4
0ea70     A7 12 02 FB | 	rdlong	arg01, fp
0ea74     04 4E 85 F1 | 	sub	fp, #4
0ea78     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea7c     1F 2C C6 C9 |  if_b	decod	local04, #31
0ea80     00 2C 06 36 |  if_ae	mov	local04, #0
0ea84     44 5B B1 FD | 	call	#__system___float_fromuns
0ea88     16 FB 61 F5 | 	xor	result1, local04
0ea8c     FD 14 02 F6 | 	mov	arg02, result1
0ea90     14 13 02 F6 | 	mov	arg01, local02
0ea94     3C 61 B1 FD | 	call	#__system___float_div
0ea98     24 4E 05 F1 | 	add	fp, #36
0ea9c     A7 FA 61 FC | 	wrlong	result1, fp
0eaa0     04 4E 05 F1 | 	add	fp, #4
0eaa4     A7 14 02 FB | 	rdlong	arg02, fp
0eaa8     28 4E 85 F1 | 	sub	fp, #40
0eaac     F8 BF 23 FF 
0eab0     00 12 06 F6 | 	mov	arg01, ##1199566848
0eab4     18 5F B1 FD | 	call	#__system___float_mul
0eab8     FD 28 02 F6 | 	mov	local02, result1
0eabc     0C 4E 05 F1 | 	add	fp, #12
0eac0     A7 12 02 FB | 	rdlong	arg01, fp
0eac4     0C 4E 85 F1 | 	sub	fp, #12
0eac8     09 13 52 F6 | 	abs	arg01, arg01 wc
0eacc     1F 2C C6 C9 |  if_b	decod	local04, #31
0ead0     00 2C 06 36 |  if_ae	mov	local04, #0
0ead4     F4 5A B1 FD | 	call	#__system___float_fromuns
0ead8     16 FB 61 F5 | 	xor	result1, local04
0eadc     FD 14 02 F6 | 	mov	arg02, result1
0eae0     14 13 02 F6 | 	mov	arg01, local02
0eae4     EC 60 B1 FD | 	call	#__system___float_div
0eae8     3C 4E 05 F1 | 	add	fp, #60
0eaec     A7 FA 61 FC | 	wrlong	result1, fp
0eaf0     24 4E 85 F1 | 	sub	fp, #36
0eaf4     A7 2E 02 FB | 	rdlong	local05, fp
0eaf8     18 4E 85 F1 | 	sub	fp, #24
0eafc     01 2E 66 F0 | 	shl	local05, #1
0eb00     51 00 00 FF 
0eb04     C8 E5 05 F1 | 	add	objptr, ##41928
0eb08     F2 2E 02 F1 | 	add	local05, objptr
0eb0c     A7 30 02 FB | 	rdlong	local06, fp
0eb10     04 4E 05 F1 | 	add	fp, #4
0eb14     A7 2A 02 FB | 	rdlong	local03, fp
0eb18     15 31 02 F1 | 	add	local06, local03
0eb1c     17 31 52 FC | 	wrword	local06, local05
0eb20     1C 4E 05 F1 | 	add	fp, #28
0eb24     A7 00 68 FC | 	wrlong	#0, fp
0eb28                 | '   fulltime=aa+dd+rr
0eb28                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0eb28                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0eb28                 | '   suspoints(channel)=a+d
0eb28                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0eb28     0C 4E 85 F1 | 	sub	fp, #12
0eb2c     A7 00 68 FC | 	wrlong	#0, fp
0eb30     14 4E 85 F1 | 	sub	fp, #20
0eb34     A7 32 02 FB | 	rdlong	local07, fp
0eb38     51 00 00 FF 
0eb3c     C8 E5 85 F1 | 	sub	objptr, ##41928
0eb40                 | LR__1274
0eb40     14 4E 05 F1 | 	add	fp, #20
0eb44     A7 28 02 FB | 	rdlong	local02, fp
0eb48     14 4E 85 F1 | 	sub	fp, #20
0eb4c     19 29 52 F2 | 	cmps	local02, local07 wc
0eb50     80 00 90 3D |  if_ae	jmp	#LR__1275
0eb54     18 4E 05 F1 | 	add	fp, #24
0eb58     A7 30 02 FB | 	rdlong	local06, fp
0eb5c     09 30 66 F0 | 	shl	local06, #9
0eb60     0C 00 00 FF 
0eb64     D8 E4 05 F1 | 	add	objptr, ##6360
0eb68     F2 30 02 F1 | 	add	local06, objptr
0eb6c     04 4E 85 F1 | 	sub	fp, #4
0eb70     A7 2E 02 FB | 	rdlong	local05, fp
0eb74     01 2E 66 F0 | 	shl	local05, #1
0eb78     18 2F 02 F1 | 	add	local05, local06
0eb7c     0C 4E 05 F1 | 	add	fp, #12
0eb80     A7 12 02 FB | 	rdlong	arg01, fp
0eb84     20 4E 85 F1 | 	sub	fp, #32
0eb88     0C 00 00 FF 
0eb8c     D8 E4 85 F1 | 	sub	objptr, ##6360
0eb90     01 14 06 F6 | 	mov	arg02, #1
0eb94     00 63 B1 FD | 	call	#__system___float_tointeger
0eb98     17 FB 51 FC | 	wrword	result1, local05
0eb9c     20 4E 05 F1 | 	add	fp, #32
0eba0     A7 12 02 FB | 	rdlong	arg01, fp
0eba4     18 4E 05 F1 | 	add	fp, #24
0eba8     A7 14 02 FB | 	rdlong	arg02, fp
0ebac     38 4E 85 F1 | 	sub	fp, #56
0ebb0     4C 5A B1 FD | 	call	#__system___float_add
0ebb4     20 4E 05 F1 | 	add	fp, #32
0ebb8     A7 FA 61 FC | 	wrlong	result1, fp
0ebbc     0C 4E 85 F1 | 	sub	fp, #12
0ebc0     A7 30 02 FB | 	rdlong	local06, fp
0ebc4     01 30 06 F1 | 	add	local06, #1
0ebc8     A7 30 62 FC | 	wrlong	local06, fp
0ebcc     14 4E 85 F1 | 	sub	fp, #20
0ebd0     6C FF 9F FD | 	jmp	#LR__1274
0ebd4                 | LR__1275
0ebd4                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0ebd4     A7 28 02 FB | 	rdlong	local02, fp
0ebd8     14 4E 05 F1 | 	add	fp, #20
0ebdc     A7 28 62 FC | 	wrlong	local02, fp
0ebe0     14 4E 85 F1 | 	sub	fp, #20
0ebe4     A7 34 02 FB | 	rdlong	local08, fp
0ebe8     04 4E 05 F1 | 	add	fp, #4
0ebec     A7 28 02 FB | 	rdlong	local02, fp
0ebf0     04 4E 85 F1 | 	sub	fp, #4
0ebf4     14 35 02 F1 | 	add	local08, local02
0ebf8                 | LR__1276
0ebf8     14 4E 05 F1 | 	add	fp, #20
0ebfc     A7 28 02 FB | 	rdlong	local02, fp
0ec00     14 4E 85 F1 | 	sub	fp, #20
0ec04     1A 29 52 F2 | 	cmps	local02, local08 wc
0ec08     A8 00 90 3D |  if_ae	jmp	#LR__1277
0ec0c     18 4E 05 F1 | 	add	fp, #24
0ec10     A7 32 02 FB | 	rdlong	local07, fp
0ec14     09 32 66 F0 | 	shl	local07, #9
0ec18     0C 00 00 FF 
0ec1c     D8 E4 05 F1 | 	add	objptr, ##6360
0ec20     F2 32 02 F1 | 	add	local07, objptr
0ec24     04 4E 85 F1 | 	sub	fp, #4
0ec28     A7 30 02 FB | 	rdlong	local06, fp
0ec2c     01 30 66 F0 | 	shl	local06, #1
0ec30     19 31 02 F1 | 	add	local06, local07
0ec34     0C 4E 05 F1 | 	add	fp, #12
0ec38     A7 12 02 FB | 	rdlong	arg01, fp
0ec3c     20 4E 85 F1 | 	sub	fp, #32
0ec40     0C 00 00 FF 
0ec44     D8 E4 85 F1 | 	sub	objptr, ##6360
0ec48     01 14 06 F6 | 	mov	arg02, #1
0ec4c     48 62 B1 FD | 	call	#__system___float_tointeger
0ec50     18 FB 51 FC | 	wrword	result1, local06
0ec54     20 4E 05 F1 | 	add	fp, #32
0ec58     A7 12 02 FB | 	rdlong	arg01, fp
0ec5c     04 4E 05 F1 | 	add	fp, #4
0ec60     A7 14 02 FB | 	rdlong	arg02, fp
0ec64     24 4E 85 F1 | 	sub	fp, #36
0ec68     1F 14 E6 F4 | 	bitnot	arg02, #31
0ec6c     90 59 B1 FD | 	call	#__system___float_add
0ec70     20 4E 05 F1 | 	add	fp, #32
0ec74     A7 FA 61 FC | 	wrlong	result1, fp
0ec78     20 4E 85 F1 | 	sub	fp, #32
0ec7c     FD 12 02 F6 | 	mov	arg01, result1
0ec80     00 14 06 F6 | 	mov	arg02, #0
0ec84     01 16 06 F6 | 	mov	arg03, #1
0ec88     78 61 B1 FD | 	call	#__system___float_cmp
0ec8c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ec90     20 4E 05 C1 |  if_b	add	fp, #32
0ec94     A7 00 68 CC |  if_b	wrlong	#0, fp
0ec98     20 4E 85 C1 |  if_b	sub	fp, #32
0ec9c     14 4E 05 F1 | 	add	fp, #20
0eca0     A7 32 02 FB | 	rdlong	local07, fp
0eca4     01 32 06 F1 | 	add	local07, #1
0eca8     A7 32 62 FC | 	wrlong	local07, fp
0ecac     14 4E 85 F1 | 	sub	fp, #20
0ecb0     44 FF 9F FD | 	jmp	#LR__1276
0ecb4                 | LR__1277
0ecb4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0ecb4     A7 28 02 FB | 	rdlong	local02, fp
0ecb8     04 4E 05 F1 | 	add	fp, #4
0ecbc     A7 34 02 FB | 	rdlong	local08, fp
0ecc0     1A 29 02 F1 | 	add	local02, local08
0ecc4     10 4E 05 F1 | 	add	fp, #16
0ecc8     A7 28 62 FC | 	wrlong	local02, fp
0eccc     14 4E 85 F1 | 	sub	fp, #20
0ecd0                 | LR__1278
0ecd0     14 4E 05 F1 | 	add	fp, #20
0ecd4     A7 2E 02 FB | 	rdlong	local05, fp
0ecd8     14 4E 85 F1 | 	sub	fp, #20
0ecdc     00 2F 56 F2 | 	cmps	local05, #256 wc
0ece0     A8 00 90 3D |  if_ae	jmp	#LR__1279
0ece4     18 4E 05 F1 | 	add	fp, #24
0ece8     A7 34 02 FB | 	rdlong	local08, fp
0ecec     09 34 66 F0 | 	shl	local08, #9
0ecf0     0C 00 00 FF 
0ecf4     D8 E4 05 F1 | 	add	objptr, ##6360
0ecf8     F2 34 02 F1 | 	add	local08, objptr
0ecfc     04 4E 85 F1 | 	sub	fp, #4
0ed00     A7 32 02 FB | 	rdlong	local07, fp
0ed04     01 32 66 F0 | 	shl	local07, #1
0ed08     1A 33 02 F1 | 	add	local07, local08
0ed0c     0C 4E 05 F1 | 	add	fp, #12
0ed10     A7 12 02 FB | 	rdlong	arg01, fp
0ed14     20 4E 85 F1 | 	sub	fp, #32
0ed18     0C 00 00 FF 
0ed1c     D8 E4 85 F1 | 	sub	objptr, ##6360
0ed20     01 14 06 F6 | 	mov	arg02, #1
0ed24     70 61 B1 FD | 	call	#__system___float_tointeger
0ed28     19 FB 51 FC | 	wrword	result1, local07
0ed2c     20 4E 05 F1 | 	add	fp, #32
0ed30     A7 12 02 FB | 	rdlong	arg01, fp
0ed34     1C 4E 05 F1 | 	add	fp, #28
0ed38     A7 14 02 FB | 	rdlong	arg02, fp
0ed3c     3C 4E 85 F1 | 	sub	fp, #60
0ed40     1F 14 E6 F4 | 	bitnot	arg02, #31
0ed44     B8 58 B1 FD | 	call	#__system___float_add
0ed48     20 4E 05 F1 | 	add	fp, #32
0ed4c     A7 FA 61 FC | 	wrlong	result1, fp
0ed50     20 4E 85 F1 | 	sub	fp, #32
0ed54     FD 12 02 F6 | 	mov	arg01, result1
0ed58     00 14 06 F6 | 	mov	arg02, #0
0ed5c     01 16 06 F6 | 	mov	arg03, #1
0ed60     A0 60 B1 FD | 	call	#__system___float_cmp
0ed64     00 FA 55 F2 | 	cmps	result1, #0 wc
0ed68     20 4E 05 C1 |  if_b	add	fp, #32
0ed6c     A7 00 68 CC |  if_b	wrlong	#0, fp
0ed70     20 4E 85 C1 |  if_b	sub	fp, #32
0ed74     14 4E 05 F1 | 	add	fp, #20
0ed78     A7 34 02 FB | 	rdlong	local08, fp
0ed7c     01 34 06 F1 | 	add	local08, #1
0ed80     A7 34 62 FC | 	wrlong	local08, fp
0ed84     14 4E 85 F1 | 	sub	fp, #20
0ed88     44 FF 9F FD | 	jmp	#LR__1278
0ed8c                 | LR__1279
0ed8c     18 4E 05 F1 | 	add	fp, #24
0ed90     A7 2E 02 FB | 	rdlong	local05, fp
0ed94     18 4E 85 F1 | 	sub	fp, #24
0ed98     09 2E 66 F0 | 	shl	local05, #9
0ed9c     0C 00 00 FF 
0eda0     D8 E4 05 F1 | 	add	objptr, ##6360
0eda4     F2 2E 02 F1 | 	add	local05, objptr
0eda8     FE 2F 06 F1 | 	add	local05, #510
0edac     17 01 58 FC | 	wrword	#0, local05
0edb0     0C 00 00 FF 
0edb4     D8 E4 85 F1 | 	sub	objptr, ##6360
0edb8                 | LR__1280
0edb8     18 4E 05 F1 | 	add	fp, #24
0edbc     A7 2E 02 FB | 	rdlong	local05, fp
0edc0     18 4E 85 F1 | 	sub	fp, #24
0edc4     09 2E 66 F0 | 	shl	local05, #9
0edc8     0C 00 00 FF 
0edcc     D8 E4 05 F1 | 	add	objptr, ##6360
0edd0     F2 2E 02 F1 | 	add	local05, objptr
0edd4     FE 2F 06 F1 | 	add	local05, #510
0edd8     17 01 58 FC | 	wrword	#0, local05
0eddc     0C 00 00 FF 
0ede0     D8 E4 85 F1 | 	sub	objptr, ##6360
0ede4                 | LR__1281
0ede4     A7 F0 03 F6 | 	mov	ptra, fp
0ede8     B2 00 A0 FD | 	call	#popregs_
0edec                 | _do_defenv_ret
0edec     2D 00 64 FD | 	ret
0edf0                 | 
0edf0                 | ' 
0edf0                 | ' '-------------------- defsnd
0edf0                 | ' 
0edf0                 | ' sub do_defsnd
0edf0                 | _do_defsnd
0edf0     04 4A 05 F6 | 	mov	COUNT_, #4
0edf4     A8 00 A0 FD | 	call	#pushregs_
0edf8     88 F0 07 F1 | 	add	ptra, #136
0edfc     4A 00 00 FF 
0ee00     80 E4 05 F1 | 	add	objptr, ##38016
0ee04     F2 1A 02 FB | 	rdlong	arg05, objptr
0ee08     0D 19 02 F6 | 	mov	arg04, arg05
0ee0c     01 18 66 F0 | 	shl	arg04, #1
0ee10     0D 19 02 F1 | 	add	arg04, arg05
0ee14     02 18 66 F0 | 	shl	arg04, #2
0ee18     03 00 00 FF 
0ee1c     04 E4 85 F1 | 	sub	objptr, ##1540
0ee20     F2 18 02 F1 | 	add	arg04, objptr
0ee24     0C 1B 02 FB | 	rdlong	arg05, arg04
0ee28     A7 1A 62 FC | 	wrlong	arg05, fp
0ee2c                 | ' 
0ee2c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ee2c                 | ' 
0ee2c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ee2c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ee2c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ee2c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ee2c                 | ' 
0ee2c                 | ' if numpar<2 then return
0ee2c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ee30     47 00 00 FF 
0ee34     7C E4 85 F1 | 	sub	objptr, ##36476
0ee38     94 08 90 CD |  if_b	jmp	#LR__1313
0ee3c                 | '  
0ee3c                 | ' if numpar=2 then
0ee3c     A7 1A 02 FB | 	rdlong	arg05, fp
0ee40     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ee44     A0 03 90 5D |  if_ne	jmp	#LR__1300
0ee48     44 CA BF FD | 	call	#_pop
0ee4c     FF 1A 02 F6 | 	mov	arg05, result3
0ee50     2C 4E 05 F1 | 	add	fp, #44
0ee54     A7 FA 61 FC | 	wrlong	result1, fp
0ee58     04 4E 05 F1 | 	add	fp, #4
0ee5c     A7 FC 61 FC | 	wrlong	result2, fp
0ee60     04 4E 05 F1 | 	add	fp, #4
0ee64     A7 1A 62 FC | 	wrlong	arg05, fp
0ee68                 | '   t1=pop()
0ee68                 | '   if t1.result_type=result_string2 then 
0ee68     34 4E 85 F1 | 	sub	fp, #52
0ee6c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ee70     20 00 90 5D |  if_ne	jmp	#LR__1290
0ee74     2C 4E 05 F1 | 	add	fp, #44
0ee78     A7 12 02 FB | 	rdlong	arg01, fp
0ee7c     2C 4E 85 F1 | 	sub	fp, #44
0ee80     84 CB BF FD | 	call	#_convertstring
0ee84     38 4E 05 F1 | 	add	fp, #56
0ee88     A7 FA 61 FC | 	wrlong	result1, fp
0ee8c     38 4E 85 F1 | 	sub	fp, #56
0ee90     58 00 90 FD | 	jmp	#LR__1293
0ee94                 | LR__1290
0ee94     34 4E 05 F1 | 	add	fp, #52
0ee98     A7 1A 02 FB | 	rdlong	arg05, fp
0ee9c     34 4E 85 F1 | 	sub	fp, #52
0eea0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0eea4     18 00 90 5D |  if_ne	jmp	#LR__1291
0eea8     2C 4E 05 F1 | 	add	fp, #44
0eeac     A7 1A 02 FB | 	rdlong	arg05, fp
0eeb0     0C 4E 05 F1 | 	add	fp, #12
0eeb4     A7 1A 62 FC | 	wrlong	arg05, fp
0eeb8     38 4E 85 F1 | 	sub	fp, #56
0eebc     2C 00 90 FD | 	jmp	#LR__1292
0eec0                 | LR__1291
0eec0     8F 01 00 FF 
0eec4     35 1B 06 F6 | 	mov	arg05, ##@LR__5577
0eec8     38 4E 05 F1 | 	add	fp, #56
0eecc     A7 1A 62 FC | 	wrlong	arg05, fp
0eed0     0C 4E 85 F1 | 	sub	fp, #12
0eed4     A7 12 02 F6 | 	mov	arg01, fp
0eed8     2C 4E 85 F1 | 	sub	fp, #44
0eedc     94 CB BF FD | 	call	#_converttoint
0eee0     14 4E 05 F1 | 	add	fp, #20
0eee4     A7 FA 61 FC | 	wrlong	result1, fp
0eee8     14 4E 85 F1 | 	sub	fp, #20
0eeec                 | LR__1292
0eeec                 | LR__1293
0eeec                 | '   if s<>"" then 
0eeec     38 4E 05 F1 | 	add	fp, #56
0eef0     A7 12 02 FB | 	rdlong	arg01, fp
0eef4     38 4E 85 F1 | 	sub	fp, #56
0eef8     8F 01 00 FF 
0eefc     36 15 06 F6 | 	mov	arg02, ##@LR__5578
0ef00     38 2D B1 FD | 	call	#__system___string_cmp
0ef04     00 FA 0D F2 | 	cmp	result1, #0 wz
0ef08     E0 01 90 AD |  if_e	jmp	#LR__1296
0ef0c     80 C9 BF FD | 	call	#_pop
0ef10     FF 1A 02 F6 | 	mov	arg05, result3
0ef14     2C 4E 05 F1 | 	add	fp, #44
0ef18     A7 FA 61 FC | 	wrlong	result1, fp
0ef1c     04 4E 05 F1 | 	add	fp, #4
0ef20     A7 FC 61 FC | 	wrlong	result2, fp
0ef24     04 4E 05 F1 | 	add	fp, #4
0ef28     A7 1A 62 FC | 	wrlong	arg05, fp
0ef2c     08 4E 85 F1 | 	sub	fp, #8
0ef30     A7 12 02 F6 | 	mov	arg01, fp
0ef34     2C 4E 85 F1 | 	sub	fp, #44
0ef38     38 CB BF FD | 	call	#_converttoint
0ef3c     10 4E 05 F1 | 	add	fp, #16
0ef40     A7 FA 61 FC | 	wrlong	result1, fp
0ef44                 | '     t1=pop()
0ef44                 | '     channel=converttoint(t1) : if channel>31 then return
0ef44     FD 1A 02 F6 | 	mov	arg05, result1
0ef48     10 4E 85 F1 | 	sub	fp, #16
0ef4c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0ef50     7C 07 90 3D |  if_ae	jmp	#LR__1313
0ef54                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0ef54     09 12 06 F6 | 	mov	arg01, #9
0ef58     54 7F B1 FD | 	call	#__system__close
0ef5c     09 26 06 F6 | 	mov	local01, #9
0ef60     8F 01 00 FF 
0ef64     37 13 06 F6 | 	mov	arg01, ##@LR__5579
0ef68     38 4E 05 F1 | 	add	fp, #56
0ef6c     A7 14 02 FB | 	rdlong	arg02, fp
0ef70     38 4E 85 F1 | 	sub	fp, #56
0ef74     F8 2C B1 FD | 	call	#__system___string_concat
0ef78     FD 14 02 F6 | 	mov	arg02, result1
0ef7c     13 13 02 F6 | 	mov	arg01, local01
0ef80     00 16 06 F6 | 	mov	arg03, #0
0ef84     90 38 B1 FD | 	call	#__system___basic_open_string
0ef88     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ef8c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ef90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ef94     52 00 00 FF 
0ef98     1C E4 05 F1 | 	add	objptr, ##42012
0ef9c     F2 FA 61 FC | 	wrlong	result1, objptr
0efa0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0efa0     52 00 00 FF 
0efa4     1C E4 85 F1 | 	sub	objptr, ##42012
0efa8     B0 00 90 AD |  if_e	jmp	#LR__1294
0efac     00 12 06 F6 | 	mov	arg01, #0
0efb0     8C 89 B1 FD | 	call	#__system___getiolock_0574
0efb4     FD 12 02 F6 | 	mov	arg01, result1
0efb8     58 2C B1 FD | 	call	#__system___lockmem
0efbc     8F 01 00 FF 
0efc0     44 15 06 F6 | 	mov	arg02, ##@LR__5580
0efc4     00 12 06 F6 | 	mov	arg01, #0
0efc8     00 16 06 F6 | 	mov	arg03, #0
0efcc     38 39 B1 FD | 	call	#__system___basic_print_string
0efd0     52 00 00 FF 
0efd4     1C E4 05 F1 | 	add	objptr, ##42012
0efd8     F2 14 02 FB | 	rdlong	arg02, objptr
0efdc     52 00 00 FF 
0efe0     1C E4 85 F1 | 	sub	objptr, ##42012
0efe4     00 12 06 F6 | 	mov	arg01, #0
0efe8     00 16 06 F6 | 	mov	arg03, #0
0efec     0A 18 06 F6 | 	mov	arg04, #10
0eff0     58 39 B1 FD | 	call	#__system___basic_print_integer
0eff4     8F 01 00 FF 
0eff8     52 15 06 F6 | 	mov	arg02, ##@LR__5581
0effc     00 12 06 F6 | 	mov	arg01, #0
0f000     00 16 06 F6 | 	mov	arg03, #0
0f004     00 39 B1 FD | 	call	#__system___basic_print_string
0f008     00 26 06 F6 | 	mov	local01, #0
0f00c     52 00 00 FF 
0f010     1C E4 05 F1 | 	add	objptr, ##42012
0f014     F2 12 02 FB | 	rdlong	arg01, objptr
0f018     52 00 00 FF 
0f01c     1C E4 85 F1 | 	sub	objptr, ##42012
0f020     C0 54 B1 FD | 	call	#__system___strerror
0f024     FD 14 02 F6 | 	mov	arg02, result1
0f028     13 13 02 F6 | 	mov	arg01, local01
0f02c     00 16 06 F6 | 	mov	arg03, #0
0f030     D4 38 B1 FD | 	call	#__system___basic_print_string
0f034     00 12 06 F6 | 	mov	arg01, #0
0f038     0A 14 06 F6 | 	mov	arg02, #10
0f03c     00 16 06 F6 | 	mov	arg03, #0
0f040     6C 38 B1 FD | 	call	#__system___basic_print_char
0f044     00 12 06 F6 | 	mov	arg01, #0
0f048     F4 88 B1 FD | 	call	#__system___getiolock_0574
0f04c     FD 00 68 FC | 	wrlong	#0, result1
0f050     09 12 06 F6 | 	mov	arg01, #9
0f054     58 7E B1 FD | 	call	#__system__close
0f058     74 06 90 FD | 	jmp	#LR__1313
0f05c                 | LR__1294
0f05c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 00 68 FC | 	wrlong	#0, fp
0f064                 | LR__1295
0f064     A7 26 02 FB | 	rdlong	local01, fp
0f068     01 26 66 F0 | 	shl	local01, #1
0f06c     11 14 06 F6 | 	mov	arg02, #17
0f070     13 15 02 F1 | 	add	arg02, local01
0f074     78 4E 05 F1 | 	add	fp, #120
0f078     A7 16 02 F6 | 	mov	arg03, fp
0f07c     7C 4E 85 F1 | 	sub	fp, #124
0f080     09 12 06 F6 | 	mov	arg01, #9
0f084     01 18 06 F6 | 	mov	arg04, #1
0f088     02 1A 06 F6 | 	mov	arg05, #2
0f08c     F4 39 B1 FD | 	call	#__system___basic_get
0f090     10 4E 05 F1 | 	add	fp, #16
0f094     A7 12 02 FB | 	rdlong	arg01, fp
0f098     0B 12 66 F0 | 	shl	arg01, #11
0f09c     0C 4E 85 F1 | 	sub	fp, #12
0f0a0     A7 26 02 FB | 	rdlong	local01, fp
0f0a4     01 26 66 F0 | 	shl	local01, #1
0f0a8     13 13 02 F1 | 	add	arg01, local01
0f0ac     78 4E 05 F1 | 	add	fp, #120
0f0b0     A7 14 E2 FA | 	rdword	arg02, fp
0f0b4     7C 4E 85 F1 | 	sub	fp, #124
0f0b8     0F 14 66 F7 | 	signx	arg02, #15
0f0bc     08 F4 B0 FD | 	call	#_psdpoke
0f0c0     04 4E 05 F1 | 	add	fp, #4
0f0c4     A7 26 02 FB | 	rdlong	local01, fp
0f0c8     01 26 06 F1 | 	add	local01, #1
0f0cc     A7 26 62 FC | 	wrlong	local01, fp
0f0d0     02 00 00 FF 
0f0d4     01 26 56 F2 | 	cmps	local01, ##1025 wc
0f0d8     88 FF 9F CD |  if_b	jmp	#LR__1295
0f0dc     04 4E 85 F1 | 	sub	fp, #4
0f0e0                 | '     close #9
0f0e0     09 12 06 F6 | 	mov	arg01, #9
0f0e4     C8 7D B1 FD | 	call	#__system__close
0f0e8                 | '     return
0f0e8     E4 05 90 FD | 	jmp	#LR__1313
0f0ec                 | LR__1296
0f0ec                 | '     if wptr < ($80000 - 2048) then 
0f0ec     14 4E 05 F1 | 	add	fp, #20
0f0f0     A7 26 02 FB | 	rdlong	local01, fp
0f0f4     14 4E 85 F1 | 	sub	fp, #20
0f0f8     FC 03 00 FF 
0f0fc     00 26 56 F2 | 	cmps	local01, ##522240 wc
0f100     70 00 90 3D |  if_ae	jmp	#LR__1298
0f104                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f104     04 4E 05 F1 | 	add	fp, #4
0f108     A7 00 68 FC | 	wrlong	#0, fp
0f10c     04 4E 85 F1 | 	sub	fp, #4
0f110                 | LR__1297
0f110     10 4E 05 F1 | 	add	fp, #16
0f114     A7 26 02 FB | 	rdlong	local01, fp
0f118     0B 26 66 F0 | 	shl	local01, #11
0f11c     0C 4E 85 F1 | 	sub	fp, #12
0f120     A7 1A 02 FB | 	rdlong	arg05, fp
0f124     0D 19 02 F6 | 	mov	arg04, arg05
0f128     01 18 66 F0 | 	shl	arg04, #1
0f12c     0C 27 02 F1 | 	add	local01, arg04
0f130     10 4E 05 F1 | 	add	fp, #16
0f134     A7 12 02 FB | 	rdlong	arg01, fp
0f138     14 4E 85 F1 | 	sub	fp, #20
0f13c     01 1A 66 F0 | 	shl	arg05, #1
0f140     0D 13 02 F1 | 	add	arg01, arg05
0f144     09 15 E2 FA | 	rdword	arg02, arg01
0f148     13 13 02 F6 | 	mov	arg01, local01
0f14c     78 F3 B0 FD | 	call	#_psdpoke
0f150     04 4E 05 F1 | 	add	fp, #4
0f154     A7 26 02 FB | 	rdlong	local01, fp
0f158     01 26 06 F1 | 	add	local01, #1
0f15c     A7 26 62 FC | 	wrlong	local01, fp
0f160     04 4E 85 F1 | 	sub	fp, #4
0f164     02 00 00 FF 
0f168     00 26 56 F2 | 	cmps	local01, ##1024 wc
0f16c     A0 FF 9F CD |  if_b	jmp	#LR__1297
0f170     5C 05 90 FD | 	jmp	#LR__1313
0f174                 | LR__1298
0f174                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f174     04 4E 05 F1 | 	add	fp, #4
0f178     A7 00 68 FC | 	wrlong	#0, fp
0f17c     04 4E 85 F1 | 	sub	fp, #4
0f180                 | LR__1299
0f180     10 4E 05 F1 | 	add	fp, #16
0f184     A7 26 02 FB | 	rdlong	local01, fp
0f188     0B 26 66 F0 | 	shl	local01, #11
0f18c     0C 4E 85 F1 | 	sub	fp, #12
0f190     A7 1A 02 FB | 	rdlong	arg05, fp
0f194     0D 19 02 F6 | 	mov	arg04, arg05
0f198     01 18 66 F0 | 	shl	arg04, #1
0f19c     0C 27 02 F1 | 	add	local01, arg04
0f1a0     10 4E 05 F1 | 	add	fp, #16
0f1a4     A7 12 02 FB | 	rdlong	arg01, fp
0f1a8     14 4E 85 F1 | 	sub	fp, #20
0f1ac     01 1A 66 F0 | 	shl	arg05, #1
0f1b0     0D 13 02 F1 | 	add	arg01, arg05
0f1b4     50 F4 B0 FD | 	call	#_psdpeek
0f1b8     FD 14 02 F6 | 	mov	arg02, result1
0f1bc     13 13 02 F6 | 	mov	arg01, local01
0f1c0     04 F3 B0 FD | 	call	#_psdpoke
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 26 02 FB | 	rdlong	local01, fp
0f1cc     01 26 06 F1 | 	add	local01, #1
0f1d0     A7 26 62 FC | 	wrlong	local01, fp
0f1d4     04 4E 85 F1 | 	sub	fp, #4
0f1d8     02 00 00 FF 
0f1dc     00 26 56 F2 | 	cmps	local01, ##1024 wc
0f1e0     9C FF 9F CD |  if_b	jmp	#LR__1299
0f1e4                 | '     return 
0f1e4     E8 04 90 FD | 	jmp	#LR__1313
0f1e8                 | '   return
0f1e8                 | LR__1300
0f1e8                 | ' for i=0 to 15 : harm(i)=0: next i  
0f1e8     04 4E 05 F1 | 	add	fp, #4
0f1ec     A7 00 68 FC | 	wrlong	#0, fp
0f1f0     97 16 48 FB | 	callpa	#(@LR__1302-@LR__1301)>>2,fcache_load_ptr_
0f1f4                 | LR__1301
0f1f4     A7 26 02 FB | 	rdlong	local01, fp
0f1f8     02 26 66 F0 | 	shl	local01, #2
0f1fc     38 4E 05 F1 | 	add	fp, #56
0f200     A7 26 02 F1 | 	add	local01, fp
0f204     13 01 68 FC | 	wrlong	#0, local01
0f208     38 4E 85 F1 | 	sub	fp, #56
0f20c     A7 26 02 FB | 	rdlong	local01, fp
0f210     01 26 06 F1 | 	add	local01, #1
0f214     A7 26 62 FC | 	wrlong	local01, fp
0f218     10 26 56 F2 | 	cmps	local01, #16 wc
0f21c     D4 FF 9F CD |  if_b	jmp	#LR__1301
0f220                 | LR__1302
0f220     04 4E 85 F1 | 	sub	fp, #4
0f224                 | ' for i=numpar to 2 step -1 
0f224     A7 26 02 FB | 	rdlong	local01, fp
0f228     04 4E 05 F1 | 	add	fp, #4
0f22c     A7 26 62 FC | 	wrlong	local01, fp
0f230     04 4E 85 F1 | 	sub	fp, #4
0f234                 | LR__1303
0f234     58 C6 BF FD | 	call	#_pop
0f238     2C 4E 05 F1 | 	add	fp, #44
0f23c     A7 FA 61 FC | 	wrlong	result1, fp
0f240     04 4E 05 F1 | 	add	fp, #4
0f244     A7 FC 61 FC | 	wrlong	result2, fp
0f248     04 4E 05 F1 | 	add	fp, #4
0f24c     A7 FE 61 FC | 	wrlong	result3, fp
0f250     30 4E 85 F1 | 	sub	fp, #48
0f254     A7 26 02 FB | 	rdlong	local01, fp
0f258     02 26 86 F1 | 	sub	local01, #2
0f25c     02 26 66 F0 | 	shl	local01, #2
0f260     38 4E 05 F1 | 	add	fp, #56
0f264     A7 26 02 F1 | 	add	local01, fp
0f268     10 4E 85 F1 | 	sub	fp, #16
0f26c     A7 12 02 F6 | 	mov	arg01, fp
0f270     2C 4E 85 F1 | 	sub	fp, #44
0f274     B8 C8 BF FD | 	call	#_converttofloat
0f278     13 FB 61 FC | 	wrlong	result1, local01
0f27c     04 4E 05 F1 | 	add	fp, #4
0f280     A7 26 02 FB | 	rdlong	local01, fp
0f284     01 26 86 F1 | 	sub	local01, #1
0f288     A7 26 62 FC | 	wrlong	local01, fp
0f28c     04 4E 85 F1 | 	sub	fp, #4
0f290     02 26 56 F2 | 	cmps	local01, #2 wc
0f294     9C FF 9F 3D |  if_ae	jmp	#LR__1303
0f298     F4 C5 BF FD | 	call	#_pop
0f29c     FF 26 02 F6 | 	mov	local01, result3
0f2a0     2C 4E 05 F1 | 	add	fp, #44
0f2a4     A7 FA 61 FC | 	wrlong	result1, fp
0f2a8     04 4E 05 F1 | 	add	fp, #4
0f2ac     A7 FC 61 FC | 	wrlong	result2, fp
0f2b0     04 4E 05 F1 | 	add	fp, #4
0f2b4     A7 26 62 FC | 	wrlong	local01, fp
0f2b8     08 4E 85 F1 | 	sub	fp, #8
0f2bc     A7 12 02 F6 | 	mov	arg01, fp
0f2c0     2C 4E 85 F1 | 	sub	fp, #44
0f2c4     AC C7 BF FD | 	call	#_converttoint
0f2c8     10 4E 05 F1 | 	add	fp, #16
0f2cc     A7 FA 61 FC | 	wrlong	result1, fp
0f2d0                 | ' t1=pop()
0f2d0                 | ' channel=converttoint(t1) : : if channel>31 then return
0f2d0     FD 26 02 F6 | 	mov	local01, result1
0f2d4     10 4E 85 F1 | 	sub	fp, #16
0f2d8     20 26 56 F2 | 	cmps	local01, #32 wc
0f2dc     F0 03 90 3D |  if_ae	jmp	#LR__1313
0f2e0     20 4E 05 F1 | 	add	fp, #32
0f2e4     A7 00 68 FC | 	wrlong	#0, fp
0f2e8                 | ' max=0
0f2e8                 | ' if harm(0)<0 then
0f2e8     1C 4E 05 F1 | 	add	fp, #28
0f2ec     A7 12 02 FB | 	rdlong	arg01, fp
0f2f0     3C 4E 85 F1 | 	sub	fp, #60
0f2f4     00 14 06 F6 | 	mov	arg02, #0
0f2f8     01 16 06 F6 | 	mov	arg03, #1
0f2fc     04 5B B1 FD | 	call	#__system___float_cmp
0f300     00 FA 55 F2 | 	cmps	result1, #0 wc
0f304     04 01 90 3D |  if_ae	jmp	#LR__1306
0f308     3C 4E 05 F1 | 	add	fp, #60
0f30c     A7 FA 01 FB | 	rdlong	result1, fp
0f310     1F FA 05 F4 | 	bitl	result1, #31
0f314     24 4E 85 F1 | 	sub	fp, #36
0f318     A7 FA 61 FC | 	wrlong	result1, fp
0f31c     28 4E 05 F1 | 	add	fp, #40
0f320     A7 FA 01 FB | 	rdlong	result1, fp
0f324     1F FA 05 F4 | 	bitl	result1, #31
0f328     24 4E 85 F1 | 	sub	fp, #36
0f32c     A7 FA 61 FC | 	wrlong	result1, fp
0f330     20 4E 05 F1 | 	add	fp, #32
0f334     00 C0 9F FF 
0f338     A7 00 68 FC | 	wrlong	##1065353216, fp
0f33c     24 4E 85 F1 | 	sub	fp, #36
0f340     A7 26 02 FB | 	rdlong	local01, fp
0f344     28 4E 05 F1 | 	add	fp, #40
0f348     A7 26 62 FC | 	wrlong	local01, fp
0f34c     24 4E 85 F1 | 	sub	fp, #36
0f350     A7 26 02 FB | 	rdlong	local01, fp
0f354     28 4E 05 F1 | 	add	fp, #40
0f358     A7 26 62 FC | 	wrlong	local01, fp
0f35c                 | '   harm(0)=1
0f35c                 | '   harm(1)=even
0f35c                 | '   harm(2)=odd
0f35c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f35c     40 4E 85 F1 | 	sub	fp, #64
0f360     A7 06 68 FC | 	wrlong	#3, fp
0f364                 | LR__1304
0f364     A7 1A 02 FB | 	rdlong	arg05, fp
0f368     0D 29 02 F6 | 	mov	local02, arg05
0f36c     02 28 66 F0 | 	shl	local02, #2
0f370     38 4E 05 F1 | 	add	fp, #56
0f374     A7 28 02 F1 | 	add	local02, fp
0f378     02 1A 86 F1 | 	sub	arg05, #2
0f37c     02 1A 66 F0 | 	shl	arg05, #2
0f380     A7 1A 02 F1 | 	add	arg05, fp
0f384     0D 13 02 FB | 	rdlong	arg01, arg05
0f388     24 4E 85 F1 | 	sub	fp, #36
0f38c     A7 14 02 FB | 	rdlong	arg02, fp
0f390     18 4E 85 F1 | 	sub	fp, #24
0f394     38 56 B1 FD | 	call	#__system___float_mul
0f398     14 FB 61 FC | 	wrlong	result1, local02
0f39c     04 4E 05 F1 | 	add	fp, #4
0f3a0     A7 2A 02 FB | 	rdlong	local03, fp
0f3a4     02 2A 06 F1 | 	add	local03, #2
0f3a8     A7 2A 62 FC | 	wrlong	local03, fp
0f3ac     10 2A 56 F2 | 	cmps	local03, #16 wc
0f3b0     B0 FF 9F CD |  if_b	jmp	#LR__1304
0f3b4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f3b4     A7 08 68 FC | 	wrlong	#4, fp
0f3b8                 | LR__1305
0f3b8     A7 2A 02 FB | 	rdlong	local03, fp
0f3bc     15 29 02 F6 | 	mov	local02, local03
0f3c0     02 28 66 F0 | 	shl	local02, #2
0f3c4     38 4E 05 F1 | 	add	fp, #56
0f3c8     A7 28 02 F1 | 	add	local02, fp
0f3cc     02 2A 86 F1 | 	sub	local03, #2
0f3d0     02 2A 66 F0 | 	shl	local03, #2
0f3d4     A7 2A 02 F1 | 	add	local03, fp
0f3d8     15 13 02 FB | 	rdlong	arg01, local03
0f3dc     20 4E 85 F1 | 	sub	fp, #32
0f3e0     A7 14 02 FB | 	rdlong	arg02, fp
0f3e4     1C 4E 85 F1 | 	sub	fp, #28
0f3e8     E4 55 B1 FD | 	call	#__system___float_mul
0f3ec     14 FB 61 FC | 	wrlong	result1, local02
0f3f0     04 4E 05 F1 | 	add	fp, #4
0f3f4     A7 2A 02 FB | 	rdlong	local03, fp
0f3f8     02 2A 06 F1 | 	add	local03, #2
0f3fc     A7 2A 62 FC | 	wrlong	local03, fp
0f400     0F 2A 56 F2 | 	cmps	local03, #15 wc
0f404     B0 FF 9F CD |  if_b	jmp	#LR__1305
0f408     04 4E 85 F1 | 	sub	fp, #4
0f40c                 | LR__1306
0f40c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f40c     3C 4E 05 F1 | 	add	fp, #60
0f410     A7 12 02 FB | 	rdlong	arg01, fp
0f414     3C 4E 85 F1 | 	sub	fp, #60
0f418     00 14 06 F6 | 	mov	arg02, #0
0f41c     01 16 66 F6 | 	neg	arg03, #1
0f420     E0 59 B1 FD | 	call	#__system___float_cmp
0f424     00 FA 55 F2 | 	cmps	result1, #0 wc
0f428     A4 02 90 CD |  if_b	jmp	#LR__1312
0f42c                 | '   for i=0 to 1023
0f42c     04 4E 05 F1 | 	add	fp, #4
0f430     A7 00 68 FC | 	wrlong	#0, fp
0f434     04 4E 85 F1 | 	sub	fp, #4
0f438                 | LR__1307
0f438     24 4E 05 F1 | 	add	fp, #36
0f43c     A7 00 68 FC | 	wrlong	#0, fp
0f440                 | '     spl=0
0f440                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f440     1C 4E 85 F1 | 	sub	fp, #28
0f444     A7 00 68 FC | 	wrlong	#0, fp
0f448                 | LR__1308
0f448     A7 28 02 FB | 	rdlong	local02, fp
0f44c     02 28 66 F0 | 	shl	local02, #2
0f450     34 4E 05 F1 | 	add	fp, #52
0f454     A7 28 02 F1 | 	add	local02, fp
0f458     14 2B 02 FB | 	rdlong	local03, local02
0f45c     87 E4 1D FF 
0f460     DB 29 06 F6 | 	mov	local02, ##1003032539
0f464     38 4E 85 F1 | 	sub	fp, #56
0f468     A7 12 02 FB | 	rdlong	arg01, fp
0f46c     04 4E 85 F1 | 	sub	fp, #4
0f470     09 13 52 F6 | 	abs	arg01, arg01 wc
0f474     1F 2C C6 C9 |  if_b	decod	local04, #31
0f478     00 2C 06 36 |  if_ae	mov	local04, #0
0f47c     4C 51 B1 FD | 	call	#__system___float_fromuns
0f480     16 FB 61 F5 | 	xor	result1, local04
0f484     FD 14 02 F6 | 	mov	arg02, result1
0f488     14 13 02 F6 | 	mov	arg01, local02
0f48c     40 55 B1 FD | 	call	#__system___float_mul
0f490     FD 28 02 F6 | 	mov	local02, result1
0f494     08 4E 05 F1 | 	add	fp, #8
0f498     A7 12 02 FB | 	rdlong	arg01, fp
0f49c     08 4E 85 F1 | 	sub	fp, #8
0f4a0     01 12 06 F1 | 	add	arg01, #1
0f4a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f4a8     1F 2C C6 C9 |  if_b	decod	local04, #31
0f4ac     00 2C 06 36 |  if_ae	mov	local04, #0
0f4b0     18 51 B1 FD | 	call	#__system___float_fromuns
0f4b4     16 FB 61 F5 | 	xor	result1, local04
0f4b8     FD 14 02 F6 | 	mov	arg02, result1
0f4bc     14 13 02 F6 | 	mov	arg01, local02
0f4c0     0C 55 B1 FD | 	call	#__system___float_mul
0f4c4     FD 12 02 F6 | 	mov	arg01, result1
0f4c8     64 5E B1 FD | 	call	#__system____builtin_sinf
0f4cc     FD 14 02 F6 | 	mov	arg02, result1
0f4d0     15 13 02 F6 | 	mov	arg01, local03
0f4d4     F8 54 B1 FD | 	call	#__system___float_mul
0f4d8     FD 14 02 F6 | 	mov	arg02, result1
0f4dc     24 4E 05 F1 | 	add	fp, #36
0f4e0     A7 12 02 FB | 	rdlong	arg01, fp
0f4e4     24 4E 85 F1 | 	sub	fp, #36
0f4e8     14 51 B1 FD | 	call	#__system___float_add
0f4ec     24 4E 05 F1 | 	add	fp, #36
0f4f0     A7 FA 61 FC | 	wrlong	result1, fp
0f4f4     1C 4E 85 F1 | 	sub	fp, #28
0f4f8     A7 16 02 FB | 	rdlong	arg03, fp
0f4fc     01 16 06 F1 | 	add	arg03, #1
0f500     A7 16 62 FC | 	wrlong	arg03, fp
0f504     10 16 56 F2 | 	cmps	arg03, #16 wc
0f508     3C FF 9F CD |  if_b	jmp	#LR__1308
0f50c                 | '     if abs(spl)>max then max=abs(spl)  
0f50c     1C 4E 05 F1 | 	add	fp, #28
0f510     A7 12 02 FB | 	rdlong	arg01, fp
0f514     1F 12 06 F4 | 	bitl	arg01, #31
0f518     04 4E 85 F1 | 	sub	fp, #4
0f51c     A7 14 02 FB | 	rdlong	arg02, fp
0f520     20 4E 85 F1 | 	sub	fp, #32
0f524     01 16 66 F6 | 	neg	arg03, #1
0f528     D8 58 B1 FD | 	call	#__system___float_cmp
0f52c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f530     18 00 90 CD |  if_b	jmp	#LR__1309
0f534     24 4E 05 F1 | 	add	fp, #36
0f538     A7 FA 01 FB | 	rdlong	result1, fp
0f53c     1F FA 05 F4 | 	bitl	result1, #31
0f540     04 4E 85 F1 | 	sub	fp, #4
0f544     A7 FA 61 FC | 	wrlong	result1, fp
0f548     20 4E 85 F1 | 	sub	fp, #32
0f54c                 | LR__1309
0f54c     04 4E 05 F1 | 	add	fp, #4
0f550     A7 2A 02 FB | 	rdlong	local03, fp
0f554     01 2A 06 F1 | 	add	local03, #1
0f558     A7 2A 62 FC | 	wrlong	local03, fp
0f55c     04 4E 85 F1 | 	sub	fp, #4
0f560     02 00 00 FF 
0f564     00 2A 56 F2 | 	cmps	local03, ##1024 wc
0f568     CC FE 9F CD |  if_b	jmp	#LR__1307
0f56c                 | '   for i=0 to 1023
0f56c     04 4E 05 F1 | 	add	fp, #4
0f570     A7 00 68 FC | 	wrlong	#0, fp
0f574     04 4E 85 F1 | 	sub	fp, #4
0f578                 | LR__1310
0f578     24 4E 05 F1 | 	add	fp, #36
0f57c     A7 00 68 FC | 	wrlong	#0, fp
0f580                 | '     spl=0
0f580                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0f580     1C 4E 85 F1 | 	sub	fp, #28
0f584     A7 00 68 FC | 	wrlong	#0, fp
0f588                 | LR__1311
0f588     A7 2A 02 FB | 	rdlong	local03, fp
0f58c     02 2A 66 F0 | 	shl	local03, #2
0f590     34 4E 05 F1 | 	add	fp, #52
0f594     A7 2A 02 F1 | 	add	local03, fp
0f598     15 2B 02 FB | 	rdlong	local03, local03
0f59c     1C 4E 85 F1 | 	sub	fp, #28
0f5a0     A7 14 02 FB | 	rdlong	arg02, fp
0f5a4     20 4E 85 F1 | 	sub	fp, #32
0f5a8     58 7F 23 FF 
0f5ac     00 12 06 F6 | 	mov	arg01, ##1191096320
0f5b0     20 56 B1 FD | 	call	#__system___float_div
0f5b4     FD 14 02 F6 | 	mov	arg02, result1
0f5b8     15 13 02 F6 | 	mov	arg01, local03
0f5bc     10 54 B1 FD | 	call	#__system___float_mul
0f5c0     FD 2A 02 F6 | 	mov	local03, result1
0f5c4     87 E4 1D FF 
0f5c8     DB 29 06 F6 | 	mov	local02, ##1003032539
0f5cc     04 4E 05 F1 | 	add	fp, #4
0f5d0     A7 12 02 FB | 	rdlong	arg01, fp
0f5d4     04 4E 85 F1 | 	sub	fp, #4
0f5d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f5dc     1F 2C C6 C9 |  if_b	decod	local04, #31
0f5e0     00 2C 06 36 |  if_ae	mov	local04, #0
0f5e4     E4 4F B1 FD | 	call	#__system___float_fromuns
0f5e8     16 FB 61 F5 | 	xor	result1, local04
0f5ec     FD 14 02 F6 | 	mov	arg02, result1
0f5f0     14 13 02 F6 | 	mov	arg01, local02
0f5f4     D8 53 B1 FD | 	call	#__system___float_mul
0f5f8     FD 28 02 F6 | 	mov	local02, result1
0f5fc     08 4E 05 F1 | 	add	fp, #8
0f600     A7 12 02 FB | 	rdlong	arg01, fp
0f604     08 4E 85 F1 | 	sub	fp, #8
0f608     01 12 06 F1 | 	add	arg01, #1
0f60c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f610     1F 2C C6 C9 |  if_b	decod	local04, #31
0f614     00 2C 06 36 |  if_ae	mov	local04, #0
0f618     B0 4F B1 FD | 	call	#__system___float_fromuns
0f61c     16 FB 61 F5 | 	xor	result1, local04
0f620     FD 14 02 F6 | 	mov	arg02, result1
0f624     14 13 02 F6 | 	mov	arg01, local02
0f628     A4 53 B1 FD | 	call	#__system___float_mul
0f62c     FD 12 02 F6 | 	mov	arg01, result1
0f630     FC 5C B1 FD | 	call	#__system____builtin_sinf
0f634     FD 14 02 F6 | 	mov	arg02, result1
0f638     15 13 02 F6 | 	mov	arg01, local03
0f63c     90 53 B1 FD | 	call	#__system___float_mul
0f640     FD 14 02 F6 | 	mov	arg02, result1
0f644     24 4E 05 F1 | 	add	fp, #36
0f648     A7 12 02 FB | 	rdlong	arg01, fp
0f64c     24 4E 85 F1 | 	sub	fp, #36
0f650     AC 4F B1 FD | 	call	#__system___float_add
0f654     24 4E 05 F1 | 	add	fp, #36
0f658     A7 FA 61 FC | 	wrlong	result1, fp
0f65c     1C 4E 85 F1 | 	sub	fp, #28
0f660     A7 2A 02 FB | 	rdlong	local03, fp
0f664     01 2A 06 F1 | 	add	local03, #1
0f668     A7 2A 62 FC | 	wrlong	local03, fp
0f66c     10 2A 56 F2 | 	cmps	local03, #16 wc
0f670     14 FF 9F CD |  if_b	jmp	#LR__1311
0f674     08 4E 05 F1 | 	add	fp, #8
0f678     A7 2A 02 FB | 	rdlong	local03, fp
0f67c     0B 2A 66 F0 | 	shl	local03, #11
0f680     0C 4E 85 F1 | 	sub	fp, #12
0f684     A7 28 02 FB | 	rdlong	local02, fp
0f688     01 28 66 F0 | 	shl	local02, #1
0f68c     14 2B 02 F1 | 	add	local03, local02
0f690     20 4E 05 F1 | 	add	fp, #32
0f694     A7 12 02 FB | 	rdlong	arg01, fp
0f698     24 4E 85 F1 | 	sub	fp, #36
0f69c     01 14 06 F6 | 	mov	arg02, #1
0f6a0     F4 57 B1 FD | 	call	#__system___float_tointeger
0f6a4     FD 14 02 F6 | 	mov	arg02, result1
0f6a8     15 13 02 F6 | 	mov	arg01, local03
0f6ac     18 EE B0 FD | 	call	#_psdpoke
0f6b0     04 4E 05 F1 | 	add	fp, #4
0f6b4     A7 2A 02 FB | 	rdlong	local03, fp
0f6b8     01 2A 06 F1 | 	add	local03, #1
0f6bc     A7 2A 62 FC | 	wrlong	local03, fp
0f6c0     04 4E 85 F1 | 	sub	fp, #4
0f6c4     02 00 00 FF 
0f6c8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
0f6cc     A8 FE 9F CD |  if_b	jmp	#LR__1310
0f6d0                 | LR__1312
0f6d0                 | LR__1313
0f6d0     A7 F0 03 F6 | 	mov	ptra, fp
0f6d4     B2 00 A0 FD | 	call	#popregs_
0f6d8                 | _do_defsnd_ret
0f6d8     2D 00 64 FD | 	ret
0f6dc                 | 
0f6dc                 | ' 
0f6dc                 | ' '-------------------- defsprite
0f6dc                 | ' 
0f6dc                 | ' sub do_defsprite
0f6dc                 | _do_defsprite
0f6dc     07 4A 05 F6 | 	mov	COUNT_, #7
0f6e0     A8 00 A0 FD | 	call	#pushregs_
0f6e4     60 F0 07 F1 | 	add	ptra, #96
0f6e8     A4 C1 BF FD | 	call	#_pop
0f6ec     FD 16 02 F6 | 	mov	arg03, result1
0f6f0     FE 14 02 F6 | 	mov	arg02, result2
0f6f4     FF 12 02 F6 | 	mov	arg01, result3
0f6f8     30 4E 05 F1 | 	add	fp, #48
0f6fc     A7 16 62 FC | 	wrlong	arg03, fp
0f700     04 4E 05 F1 | 	add	fp, #4
0f704     A7 14 62 FC | 	wrlong	arg02, fp
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 12 62 FC | 	wrlong	arg01, fp
0f710     38 4E 85 F1 | 	sub	fp, #56
0f714     78 C1 BF FD | 	call	#_pop
0f718     FD 16 02 F6 | 	mov	arg03, result1
0f71c     FE 14 02 F6 | 	mov	arg02, result2
0f720     FF 12 02 F6 | 	mov	arg01, result3
0f724     24 4E 05 F1 | 	add	fp, #36
0f728     A7 16 62 FC | 	wrlong	arg03, fp
0f72c     04 4E 05 F1 | 	add	fp, #4
0f730     A7 14 62 FC | 	wrlong	arg02, fp
0f734     04 4E 05 F1 | 	add	fp, #4
0f738     A7 12 62 FC | 	wrlong	arg01, fp
0f73c     2C 4E 85 F1 | 	sub	fp, #44
0f740     4C C1 BF FD | 	call	#_pop
0f744     FD 16 02 F6 | 	mov	arg03, result1
0f748     FE 14 02 F6 | 	mov	arg02, result2
0f74c     FF 12 02 F6 | 	mov	arg01, result3
0f750     18 4E 05 F1 | 	add	fp, #24
0f754     A7 16 62 FC | 	wrlong	arg03, fp
0f758     04 4E 05 F1 | 	add	fp, #4
0f75c     A7 14 62 FC | 	wrlong	arg02, fp
0f760     04 4E 05 F1 | 	add	fp, #4
0f764     A7 12 62 FC | 	wrlong	arg01, fp
0f768     20 4E 85 F1 | 	sub	fp, #32
0f76c     20 C1 BF FD | 	call	#_pop
0f770     FD 16 02 F6 | 	mov	arg03, result1
0f774     FE 14 02 F6 | 	mov	arg02, result2
0f778     FF 12 02 F6 | 	mov	arg01, result3
0f77c     0C 4E 05 F1 | 	add	fp, #12
0f780     A7 16 62 FC | 	wrlong	arg03, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 14 62 FC | 	wrlong	arg02, fp
0f78c     04 4E 05 F1 | 	add	fp, #4
0f790     A7 12 62 FC | 	wrlong	arg01, fp
0f794     14 4E 85 F1 | 	sub	fp, #20
0f798     F4 C0 BF FD | 	call	#_pop
0f79c     FF 16 02 F6 | 	mov	arg03, result3
0f7a0     A7 FA 61 FC | 	wrlong	result1, fp
0f7a4     04 4E 05 F1 | 	add	fp, #4
0f7a8     A7 FC 61 FC | 	wrlong	result2, fp
0f7ac     04 4E 05 F1 | 	add	fp, #4
0f7b0     A7 16 62 FC | 	wrlong	arg03, fp
0f7b4     08 4E 85 F1 | 	sub	fp, #8
0f7b8     A7 12 02 F6 | 	mov	arg01, fp
0f7bc     B4 C2 BF FD | 	call	#_converttoint
0f7c0     3C 4E 05 F1 | 	add	fp, #60
0f7c4     A7 FA 61 FC | 	wrlong	result1, fp
0f7c8     30 4E 85 F1 | 	sub	fp, #48
0f7cc     A7 12 02 F6 | 	mov	arg01, fp
0f7d0     0C 4E 85 F1 | 	sub	fp, #12
0f7d4     9C C2 BF FD | 	call	#_converttoint
0f7d8     40 4E 05 F1 | 	add	fp, #64
0f7dc     A7 FA 61 FC | 	wrlong	result1, fp
0f7e0     28 4E 85 F1 | 	sub	fp, #40
0f7e4     A7 12 02 F6 | 	mov	arg01, fp
0f7e8     18 4E 85 F1 | 	sub	fp, #24
0f7ec     84 C2 BF FD | 	call	#_converttoint
0f7f0     44 4E 05 F1 | 	add	fp, #68
0f7f4     A7 FA 61 FC | 	wrlong	result1, fp
0f7f8     20 4E 85 F1 | 	sub	fp, #32
0f7fc     A7 12 02 F6 | 	mov	arg01, fp
0f800     24 4E 85 F1 | 	sub	fp, #36
0f804     6C C2 BF FD | 	call	#_converttoint
0f808     48 4E 05 F1 | 	add	fp, #72
0f80c     A7 FA 61 FC | 	wrlong	result1, fp
0f810     18 4E 85 F1 | 	sub	fp, #24
0f814     A7 12 02 F6 | 	mov	arg01, fp
0f818     30 4E 85 F1 | 	sub	fp, #48
0f81c     54 C2 BF FD | 	call	#_converttoint
0f820     4C 4E 05 F1 | 	add	fp, #76
0f824     A7 FA 61 FC | 	wrlong	result1, fp
0f828                 | ' 
0f828                 | ' t5=pop()
0f828                 | ' t4=pop()
0f828                 | ' t3=pop()
0f828                 | ' t2=pop()
0f828                 | ' t1=pop()
0f828                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0f828                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0f828     10 4E 85 F1 | 	sub	fp, #16
0f82c     A7 16 02 FB | 	rdlong	arg03, fp
0f830     3C 4E 85 F1 | 	sub	fp, #60
0f834     02 16 66 F0 | 	shl	arg03, #2
0f838     51 00 00 FF 
0f83c     68 E5 05 F1 | 	add	objptr, ##41832
0f840     F2 16 02 F1 | 	add	arg03, objptr
0f844     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f848     51 00 00 FF 
0f84c     68 E5 85 F1 | 	sub	objptr, ##41832
0f850     2C 00 90 AD |  if_e	jmp	#LR__1320
0f854     3C 4E 05 F1 | 	add	fp, #60
0f858     A7 16 02 FB | 	rdlong	arg03, fp
0f85c     3C 4E 85 F1 | 	sub	fp, #60
0f860     02 16 66 F0 | 	shl	arg03, #2
0f864     51 00 00 FF 
0f868     68 E5 05 F1 | 	add	objptr, ##41832
0f86c     F2 16 02 F1 | 	add	arg03, objptr
0f870     0B 13 02 FB | 	rdlong	arg01, arg03
0f874     51 00 00 FF 
0f878     68 E5 85 F1 | 	sub	objptr, ##41832
0f87c     B4 65 B1 FD | 	call	#__system___gc_free
0f880                 | LR__1320
0f880     3C 4E 05 F1 | 	add	fp, #60
0f884     A7 26 02 FB | 	rdlong	local01, fp
0f888     0C 4E 05 F1 | 	add	fp, #12
0f88c     A7 16 02 FB | 	rdlong	arg03, fp
0f890     04 4E 05 F1 | 	add	fp, #4
0f894     A7 14 02 FB | 	rdlong	arg02, fp
0f898     0A 17 02 FD | 	qmul	arg03, arg02
0f89c     02 26 66 F0 | 	shl	local01, #2
0f8a0     51 00 00 FF 
0f8a4     68 E5 05 F1 | 	add	objptr, ##41832
0f8a8     F2 26 02 F1 | 	add	local01, objptr
0f8ac     4C 4E 85 F1 | 	sub	fp, #76
0f8b0     51 00 00 FF 
0f8b4     68 E5 85 F1 | 	sub	objptr, ##41832
0f8b8     18 12 62 FD | 	getqx	arg01
0f8bc     38 64 B1 FD | 	call	#__system___gc_alloc_managed
0f8c0     13 FB 61 FC | 	wrlong	result1, local01
0f8c4                 | ' for y=a3 to a3+a5-1
0f8c4     44 4E 05 F1 | 	add	fp, #68
0f8c8     A7 28 02 FB | 	rdlong	local02, fp
0f8cc     0C 4E 05 F1 | 	add	fp, #12
0f8d0     A7 28 62 FC | 	wrlong	local02, fp
0f8d4     0C 4E 85 F1 | 	sub	fp, #12
0f8d8     A7 2A 02 FB | 	rdlong	local03, fp
0f8dc     08 4E 05 F1 | 	add	fp, #8
0f8e0     A7 2C 02 FB | 	rdlong	local04, fp
0f8e4     4C 4E 85 F1 | 	sub	fp, #76
0f8e8     16 2B 02 F1 | 	add	local03, local04
0f8ec                 | LR__1321
0f8ec     50 4E 05 F1 | 	add	fp, #80
0f8f0     A7 28 02 FB | 	rdlong	local02, fp
0f8f4     50 4E 85 F1 | 	sub	fp, #80
0f8f8     15 29 52 F2 | 	cmps	local02, local03 wc
0f8fc     F4 00 90 3D |  if_ae	jmp	#LR__1324
0f900                 | '   for x=a2 to a4+a2-1
0f900     40 4E 05 F1 | 	add	fp, #64
0f904     A7 26 02 FB | 	rdlong	local01, fp
0f908     14 4E 05 F1 | 	add	fp, #20
0f90c     A7 26 62 FC | 	wrlong	local01, fp
0f910     0C 4E 85 F1 | 	sub	fp, #12
0f914     A7 2E 02 FB | 	rdlong	local05, fp
0f918     08 4E 85 F1 | 	sub	fp, #8
0f91c     A7 30 02 FB | 	rdlong	local06, fp
0f920     40 4E 85 F1 | 	sub	fp, #64
0f924     18 2F 02 F1 | 	add	local05, local06
0f928                 | LR__1322
0f928     54 4E 05 F1 | 	add	fp, #84
0f92c     A7 26 02 FB | 	rdlong	local01, fp
0f930     54 4E 85 F1 | 	sub	fp, #84
0f934     17 27 52 F2 | 	cmps	local01, local05 wc
0f938     A0 00 90 3D |  if_ae	jmp	#LR__1323
0f93c     3C 4E 05 F1 | 	add	fp, #60
0f940     A7 30 02 FB | 	rdlong	local06, fp
0f944     18 4E 05 F1 | 	add	fp, #24
0f948     A7 2C 02 FB | 	rdlong	local04, fp
0f94c     14 4E 85 F1 | 	sub	fp, #20
0f950     A7 28 02 FB | 	rdlong	local02, fp
0f954     10 4E 05 F1 | 	add	fp, #16
0f958     A7 26 02 FB | 	rdlong	local01, fp
0f95c     13 17 02 F6 | 	mov	arg03, local01
0f960     0C 4E 85 F1 | 	sub	fp, #12
0f964     A7 14 02 FB | 	rdlong	arg02, fp
0f968     0A 17 82 F1 | 	sub	arg03, arg02
0f96c     04 4E 05 F1 | 	add	fp, #4
0f970     A7 14 02 FB | 	rdlong	arg02, fp
0f974     0A 17 02 FD | 	qmul	arg03, arg02
0f978     02 30 66 F0 | 	shl	local06, #2
0f97c     51 00 00 FF 
0f980     68 E5 05 F1 | 	add	objptr, ##41832
0f984     F2 30 02 F1 | 	add	local06, objptr
0f988     18 31 02 FB | 	rdlong	local06, local06
0f98c     16 33 02 F6 | 	mov	local07, local04
0f990     14 33 82 F1 | 	sub	local07, local02
0f994     51 00 00 FF 
0f998     68 E5 85 F1 | 	sub	objptr, ##41832
0f99c     F2 12 02 FB | 	rdlong	arg01, objptr
0f9a0     16 13 02 F1 | 	add	arg01, local04
0f9a4     48 4E 85 F1 | 	sub	fp, #72
0f9a8     0A 26 66 F0 | 	shl	local01, #10
0f9ac     13 13 02 F1 | 	add	arg01, local01
0f9b0     18 2C 62 FD | 	getqx	local04
0f9b4     16 33 02 F1 | 	add	local07, local04
0f9b8     18 33 02 F1 | 	add	local07, local06
0f9bc     98 EB B0 FD | 	call	#_pspeek
0f9c0     19 FB 41 FC | 	wrbyte	result1, local07
0f9c4     54 4E 05 F1 | 	add	fp, #84
0f9c8     A7 32 02 FB | 	rdlong	local07, fp
0f9cc     01 32 06 F1 | 	add	local07, #1
0f9d0     A7 32 62 FC | 	wrlong	local07, fp
0f9d4     54 4E 85 F1 | 	sub	fp, #84
0f9d8     4C FF 9F FD | 	jmp	#LR__1322
0f9dc                 | LR__1323
0f9dc     50 4E 05 F1 | 	add	fp, #80
0f9e0     A7 32 02 FB | 	rdlong	local07, fp
0f9e4     01 32 06 F1 | 	add	local07, #1
0f9e8     A7 32 62 FC | 	wrlong	local07, fp
0f9ec     50 4E 85 F1 | 	sub	fp, #80
0f9f0     F8 FE 9F FD | 	jmp	#LR__1321
0f9f4                 | LR__1324
0f9f4     3C 4E 05 F1 | 	add	fp, #60
0f9f8     A7 32 02 FB | 	rdlong	local07, fp
0f9fc     19 13 02 F6 | 	mov	arg01, local07
0fa00     3C 4E 85 F1 | 	sub	fp, #60
0fa04     02 32 66 F0 | 	shl	local07, #2
0fa08     51 00 00 FF 
0fa0c     68 E5 05 F1 | 	add	objptr, ##41832
0fa10     F2 32 02 F1 | 	add	local07, objptr
0fa14     19 15 02 FB | 	rdlong	arg02, local07
0fa18     51 00 00 FF 
0fa1c     68 E5 85 F1 | 	sub	objptr, ##41832
0fa20     04 F8 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0fa24     3C 4E 05 F1 | 	add	fp, #60
0fa28     A7 12 02 FB | 	rdlong	arg01, fp
0fa2c     0C 4E 05 F1 | 	add	fp, #12
0fa30     A7 14 02 FB | 	rdlong	arg02, fp
0fa34     04 4E 05 F1 | 	add	fp, #4
0fa38     A7 16 02 FB | 	rdlong	arg03, fp
0fa3c     4C 4E 85 F1 | 	sub	fp, #76
0fa40     74 F8 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fa44     A7 F0 03 F6 | 	mov	ptra, fp
0fa48     B2 00 A0 FD | 	call	#popregs_
0fa4c                 | _do_defsprite_ret
0fa4c     2D 00 64 FD | 	ret
0fa50                 | 
0fa50                 | ' 
0fa50                 | ' '-------------------- deg
0fa50                 | ' 
0fa50                 | ' sub do_deg
0fa50                 | _do_deg
0fa50     51 00 00 FF 
0fa54     BC E5 05 F1 | 	add	objptr, ##41916
0fa58     7D 47 9E FF 
0fa5c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0fa60     04 E4 05 F1 | 	add	objptr, #4
0fa64     97 32 A1 FF 
0fa68     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0fa6c     51 00 00 FF 
0fa70     C0 E5 85 F1 | 	sub	objptr, ##41920
0fa74                 | _do_deg_ret
0fa74     2D 00 64 FD | 	ret
0fa78                 | 
0fa78                 | ' 
0fa78                 | ' '-------------------- delete
0fa78                 | ' 
0fa78                 | ' sub do_delete
0fa78                 | _do_delete
0fa78     05 4A 05 F6 | 	mov	COUNT_, #5
0fa7c     A8 00 A0 FD | 	call	#pushregs_
0fa80     0C BE BF FD | 	call	#_pop
0fa84     FE 18 02 F6 | 	mov	arg04, result2
0fa88     FF 16 02 F6 | 	mov	arg03, result3
0fa8c     FD 26 02 F6 | 	mov	local01, result1
0fa90     0C 29 02 F6 | 	mov	local02, arg04
0fa94     0B 2B 02 F6 | 	mov	local03, arg03
0fa98                 | ' 
0fa98                 | ' t1=pop()
0fa98                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0fa98     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fa9c     10 00 90 5D |  if_ne	jmp	#LR__1330
0faa0     13 13 02 F6 | 	mov	arg01, local01
0faa4     60 BF BF FD | 	call	#_convertstring
0faa8     FD 26 02 F6 | 	mov	local01, result1
0faac     1F 2A 06 F6 | 	mov	local03, #31
0fab0                 | LR__1330
0fab0                 | ' if t1.result_type<>result_string then printerror(15): return
0fab0     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fab4     10 00 90 AD |  if_e	jmp	#LR__1331
0fab8     0F 12 06 F6 | 	mov	arg01, #15
0fabc     00 14 06 F6 | 	mov	arg02, #0
0fac0     30 E8 B0 FD | 	call	#_printerror
0fac4     E0 00 90 FD | 	jmp	#LR__1335
0fac8                 | LR__1331
0fac8                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
0fac8     4A 00 00 FF 
0facc     94 E4 05 F1 | 	add	objptr, ##38036
0fad0     F2 12 02 FB | 	rdlong	arg01, objptr
0fad4     4A 00 00 FF 
0fad8     94 E4 85 F1 | 	sub	objptr, ##38036
0fadc     8F 01 00 FF 
0fae0     55 15 06 F6 | 	mov	arg02, ##@LR__5582
0fae4     54 21 B1 FD | 	call	#__system___string_cmp
0fae8     00 FA 0D F2 | 	cmp	result1, #0 wz
0faec     34 00 90 AD |  if_e	jmp	#LR__1332
0faf0     4A 00 00 FF 
0faf4     94 E4 05 F1 | 	add	objptr, ##38036
0faf8     F2 12 02 FB | 	rdlong	arg01, objptr
0fafc     4A 00 00 FF 
0fb00     94 E4 85 F1 | 	sub	objptr, ##38036
0fb04     8F 01 00 FF 
0fb08     57 15 06 F6 | 	mov	arg02, ##@LR__5583
0fb0c     60 21 B1 FD | 	call	#__system___string_concat
0fb10     FD 12 02 F6 | 	mov	arg01, result1
0fb14     13 15 02 F6 | 	mov	arg02, local01
0fb18     54 21 B1 FD | 	call	#__system___string_concat
0fb1c     FD 2C 02 F6 | 	mov	local04, result1
0fb20     14 00 90 FD | 	jmp	#LR__1333
0fb24                 | LR__1332
0fb24     8F 01 00 FF 
0fb28     59 13 06 F6 | 	mov	arg01, ##@LR__5584
0fb2c     13 15 02 F6 | 	mov	arg02, local01
0fb30     3C 21 B1 FD | 	call	#__system___string_concat
0fb34     FD 2C 02 F6 | 	mov	local04, result1
0fb38                 | LR__1333
0fb38     16 13 02 F6 | 	mov	arg01, local04
0fb3c     A0 48 B1 FD | 	call	#__system___remove
0fb40     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fb44     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0fb48     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fb4c     FD 2E 0A F6 | 	mov	local05, result1 wz
0fb50                 | ' kill filename$
0fb50                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
0fb50     54 00 90 AD |  if_e	jmp	#LR__1334
0fb54     00 12 06 F6 | 	mov	arg01, #0
0fb58     E4 7D B1 FD | 	call	#__system___getiolock_0574
0fb5c     FD 12 02 F6 | 	mov	arg01, result1
0fb60     B0 20 B1 FD | 	call	#__system___lockmem
0fb64     8F 01 00 FF 
0fb68     5B 15 06 F6 | 	mov	arg02, ##@LR__5585
0fb6c     00 12 06 F6 | 	mov	arg01, #0
0fb70     00 16 06 F6 | 	mov	arg03, #0
0fb74     90 2D B1 FD | 	call	#__system___basic_print_string
0fb78     00 12 06 F6 | 	mov	arg01, #0
0fb7c     17 15 02 F6 | 	mov	arg02, local05
0fb80     00 16 06 F6 | 	mov	arg03, #0
0fb84     0A 18 06 F6 | 	mov	arg04, #10
0fb88     C0 2D B1 FD | 	call	#__system___basic_print_integer
0fb8c     00 12 06 F6 | 	mov	arg01, #0
0fb90     0A 14 06 F6 | 	mov	arg02, #10
0fb94     00 16 06 F6 | 	mov	arg03, #0
0fb98     14 2D B1 FD | 	call	#__system___basic_print_char
0fb9c     00 12 06 F6 | 	mov	arg01, #0
0fba0     9C 7D B1 FD | 	call	#__system___getiolock_0574
0fba4     FD 00 68 FC | 	wrlong	#0, result1
0fba8                 | LR__1334
0fba8                 | LR__1335
0fba8     A7 F0 03 F6 | 	mov	ptra, fp
0fbac     B2 00 A0 FD | 	call	#popregs_
0fbb0                 | _do_delete_ret
0fbb0     2D 00 64 FD | 	ret
0fbb4                 | 
0fbb4                 | ' 
0fbb4                 | ' '-------------------- dir
0fbb4                 | ' 
0fbb4                 | ' sub do_dir
0fbb4                 | _do_dir
0fbb4     13 4A 05 F6 | 	mov	COUNT_, #19
0fbb8     A8 00 A0 FD | 	call	#pushregs_
0fbbc     01 00 00 FF 
0fbc0     38 F0 07 F1 | 	add	ptra, ##568
0fbc4                 | ' 
0fbc4                 | ' print "Current directory: "; currentdir$ 
0fbc4     00 12 06 F6 | 	mov	arg01, #0
0fbc8     74 7D B1 FD | 	call	#__system___getiolock_0574
0fbcc     FD 12 02 F6 | 	mov	arg01, result1
0fbd0     40 20 B1 FD | 	call	#__system___lockmem
0fbd4     8F 01 00 FF 
0fbd8     93 15 06 F6 | 	mov	arg02, ##@LR__5586
0fbdc     00 12 06 F6 | 	mov	arg01, #0
0fbe0     00 16 06 F6 | 	mov	arg03, #0
0fbe4     20 2D B1 FD | 	call	#__system___basic_print_string
0fbe8     4A 00 00 FF 
0fbec     94 E4 05 F1 | 	add	objptr, ##38036
0fbf0     F2 14 02 FB | 	rdlong	arg02, objptr
0fbf4     4A 00 00 FF 
0fbf8     94 E4 85 F1 | 	sub	objptr, ##38036
0fbfc     00 12 06 F6 | 	mov	arg01, #0
0fc00     00 16 06 F6 | 	mov	arg03, #0
0fc04     00 2D B1 FD | 	call	#__system___basic_print_string
0fc08     00 12 06 F6 | 	mov	arg01, #0
0fc0c     0A 14 06 F6 | 	mov	arg02, #10
0fc10     00 16 06 F6 | 	mov	arg03, #0
0fc14     98 2C B1 FD | 	call	#__system___basic_print_char
0fc18     01 26 06 F6 | 	mov	local01, #1
0fc1c     00 12 06 F6 | 	mov	arg01, #0
0fc20     1C 7D B1 FD | 	call	#__system___getiolock_0574
0fc24     FD 00 68 FC | 	wrlong	#0, result1
0fc28     00 28 06 F6 | 	mov	local02, #0
0fc2c     00 2A 06 F6 | 	mov	local03, #0
0fc30                 | ' px=0
0fc30                 | ' for i=0 to 127: filelist(i)="" : next i
0fc30     00 2C 06 F6 | 	mov	local04, #0
0fc34     1C 4E 05 F1 | 	add	fp, #28
0fc38     97 12 48 FB | 	callpa	#(@LR__1341-@LR__1340)>>2,fcache_load_ptr_
0fc3c                 | LR__1340
0fc3c     16 2F 02 F6 | 	mov	local05, local04
0fc40     02 2E 66 F0 | 	shl	local05, #2
0fc44     A7 2E 02 F1 | 	add	local05, fp
0fc48     8F 01 00 FF 
0fc4c     A7 31 06 F6 | 	mov	local06, ##@LR__5587
0fc50     17 31 62 FC | 	wrlong	local06, local05
0fc54     01 2C 06 F1 | 	add	local04, #1
0fc58     80 2C 56 F2 | 	cmps	local04, #128 wc
0fc5c     DC FF 9F CD |  if_b	jmp	#LR__1340
0fc60                 | LR__1341
0fc60     1C 4E 85 F1 | 	sub	fp, #28
0fc64     8F 01 00 FF 
0fc68     A8 13 06 F6 | 	mov	arg01, ##@LR__5588
0fc6c     10 14 06 F6 | 	mov	arg02, #16
0fc70     04 7E B1 FD | 	call	#__system___basic_dir
0fc74     FD 32 02 F6 | 	mov	local07, result1
0fc78     00 34 06 F6 | 	mov	local08, #0
0fc7c                 | ' filename=dir$("*", fbDirectory)
0fc7c                 | ' n=0
0fc7c                 | ' while filename <> "" andalso filename <> nil andalso n<128
0fc7c                 | LR__1342
0fc7c     8F 01 00 FF 
0fc80     AA 37 06 F6 | 	mov	local09, ##@LR__5589
0fc84     19 13 02 F6 | 	mov	arg01, local07
0fc88     1B 15 02 F6 | 	mov	arg02, local09
0fc8c     AC 1F B1 FD | 	call	#__system___string_cmp
0fc90     00 FA 0D F2 | 	cmp	result1, #0 wz
0fc94     68 00 90 AD |  if_e	jmp	#LR__1343
0fc98     00 36 06 F6 | 	mov	local09, #0
0fc9c     19 13 02 F6 | 	mov	arg01, local07
0fca0     00 14 06 F6 | 	mov	arg02, #0
0fca4     94 1F B1 FD | 	call	#__system___string_cmp
0fca8     00 FA 0D F2 | 	cmp	result1, #0 wz
0fcac     50 00 90 AD |  if_e	jmp	#LR__1343
0fcb0     80 34 56 F2 | 	cmps	local08, #128 wc
0fcb4     48 00 90 3D |  if_ae	jmp	#LR__1343
0fcb8     8F 01 00 FF 
0fcbc     AB 13 06 F6 | 	mov	arg01, ##@LR__5590
0fcc0     19 15 02 F6 | 	mov	arg02, local07
0fcc4     A8 1F B1 FD | 	call	#__system___string_concat
0fcc8     FD 32 02 F6 | 	mov	local07, result1
0fccc     1A 2F 02 F6 | 	mov	local05, local08
0fcd0     02 2E 66 F0 | 	shl	local05, #2
0fcd4     1C 4E 05 F1 | 	add	fp, #28
0fcd8     A7 2E 02 F1 | 	add	local05, fp
0fcdc     17 33 62 FC | 	wrlong	local07, local05
0fce0     01 34 06 F1 | 	add	local08, #1
0fce4     00 2E 06 F6 | 	mov	local05, #0
0fce8     00 12 06 F6 | 	mov	arg01, #0
0fcec     00 14 06 F6 | 	mov	arg02, #0
0fcf0     1C 4E 85 F1 | 	sub	fp, #28
0fcf4     80 7D B1 FD | 	call	#__system___basic_dir
0fcf8     FD 32 02 F6 | 	mov	local07, result1
0fcfc     7C FF 9F FD | 	jmp	#LR__1342
0fd00                 | LR__1343
0fd00                 | ' for i=0 to n-1			' now sort this
0fd00     00 2C 06 F6 | 	mov	local04, #0
0fd04     1A 39 02 F6 | 	mov	local10, local08
0fd08                 | LR__1344
0fd08     1C 2D 52 F2 | 	cmps	local04, local10 wc
0fd0c     DC 00 90 3D |  if_ae	jmp	#LR__1348
0fd10     00 3A 06 F6 | 	mov	local11, #0
0fd14                 | '   swapped=false
0fd14                 | '   for j=0 to n-i-2
0fd14     00 3C 06 F6 | 	mov	local12, #0
0fd18     1A 3F 02 F6 | 	mov	local13, local08
0fd1c     16 3F 82 F1 | 	sub	local13, local04
0fd20     01 3E 86 F1 | 	sub	local13, #1
0fd24                 | LR__1345
0fd24     1F 3D 52 F2 | 	cmps	local12, local13 wc
0fd28     B0 00 90 3D |  if_ae	jmp	#LR__1347
0fd2c                 | '     if filelist(j) > filelist(j+1) then
0fd2c     1E 37 02 F6 | 	mov	local09, local12
0fd30     02 36 66 F0 | 	shl	local09, #2
0fd34     1C 4E 05 F1 | 	add	fp, #28
0fd38     A7 36 02 F1 | 	add	local09, fp
0fd3c     1B 13 02 FB | 	rdlong	arg01, local09
0fd40     1E 37 02 F6 | 	mov	local09, local12
0fd44     01 36 06 F1 | 	add	local09, #1
0fd48     1B 31 02 F6 | 	mov	local06, local09
0fd4c     02 30 66 F0 | 	shl	local06, #2
0fd50     A7 26 02 F6 | 	mov	local01, fp
0fd54     A7 30 02 F1 | 	add	local06, fp
0fd58     18 2F 02 FB | 	rdlong	local05, local06
0fd5c     17 15 02 F6 | 	mov	arg02, local05
0fd60     1C 4E 85 F1 | 	sub	fp, #28
0fd64     D4 1E B1 FD | 	call	#__system___string_cmp
0fd68     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd6c     64 00 90 CD |  if_b	jmp	#LR__1346
0fd70     1E 37 02 F6 | 	mov	local09, local12
0fd74     01 36 06 F1 | 	add	local09, #1
0fd78     02 36 66 F0 | 	shl	local09, #2
0fd7c     1C 4E 05 F1 | 	add	fp, #28
0fd80     A7 36 02 F1 | 	add	local09, fp
0fd84     1B 3B 02 FB | 	rdlong	local11, local09
0fd88     1E 31 02 F6 | 	mov	local06, local12
0fd8c     02 30 66 F0 | 	shl	local06, #2
0fd90     A7 30 02 F1 | 	add	local06, fp
0fd94     18 2F 02 FB | 	rdlong	local05, local06
0fd98     1E 37 02 F6 | 	mov	local09, local12
0fd9c     1B 31 02 F6 | 	mov	local06, local09
0fda0     02 30 66 F0 | 	shl	local06, #2
0fda4     A7 26 02 F6 | 	mov	local01, fp
0fda8     A7 30 02 F1 | 	add	local06, fp
0fdac     18 3B 62 FC | 	wrlong	local11, local06
0fdb0     1E 29 02 F6 | 	mov	local02, local12
0fdb4     01 28 06 F1 | 	add	local02, #1
0fdb8     14 41 02 F6 | 	mov	local14, local02
0fdbc     02 40 66 F0 | 	shl	local14, #2
0fdc0     A7 42 02 F6 | 	mov	local15, fp
0fdc4     A7 40 02 F1 | 	add	local14, fp
0fdc8     20 2F 62 FC | 	wrlong	local05, local14
0fdcc     01 3A 66 F6 | 	neg	local11, #1
0fdd0     1C 4E 85 F1 | 	sub	fp, #28
0fdd4                 | LR__1346
0fdd4     01 3C 06 F1 | 	add	local12, #1
0fdd8     48 FF 9F FD | 	jmp	#LR__1345
0fddc                 | LR__1347
0fddc                 | ' if not swapped then exit for
0fddc     1D 45 22 F6 | 	not	local16, local11
0fde0     00 44 0E F2 | 	cmp	local16, #0 wz
0fde4     01 2C 06 A1 |  if_e	add	local04, #1
0fde8     1C FF 9F AD |  if_e	jmp	#LR__1344
0fdec                 | LR__1348
0fdec                 | ' for i=0 to n-1
0fdec     00 2C 06 F6 | 	mov	local04, #0
0fdf0     1A 47 02 F6 | 	mov	local17, local08
0fdf4                 | LR__1349
0fdf4     23 2D 52 F2 | 	cmps	local04, local17 wc
0fdf8     94 00 90 3D |  if_ae	jmp	#LR__1351
0fdfc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0fdfc     00 12 06 F6 | 	mov	arg01, #0
0fe00     3C 7B B1 FD | 	call	#__system___getiolock_0574
0fe04     FD 12 02 F6 | 	mov	arg01, result1
0fe08     08 1E B1 FD | 	call	#__system___lockmem
0fe0c     16 29 02 F6 | 	mov	local02, local04
0fe10     02 28 66 F0 | 	shl	local02, #2
0fe14     1C 4E 05 F1 | 	add	fp, #28
0fe18     A7 40 02 F6 | 	mov	local14, fp
0fe1c     A7 28 02 F1 | 	add	local02, fp
0fe20     14 15 02 FB | 	rdlong	arg02, local02
0fe24     00 26 06 F6 | 	mov	local01, #0
0fe28     00 12 06 F6 | 	mov	arg01, #0
0fe2c     00 16 06 F6 | 	mov	arg03, #0
0fe30     1C 4E 85 F1 | 	sub	fp, #28
0fe34     D0 2A B1 FD | 	call	#__system___basic_print_string
0fe38     00 12 06 F6 | 	mov	arg01, #0
0fe3c     00 7B B1 FD | 	call	#__system___getiolock_0574
0fe40     FD 00 68 FC | 	wrlong	#0, result1
0fe44     40 2A 06 F1 | 	add	local03, #64
0fe48     15 13 02 F6 | 	mov	arg01, local03
0fe4c     B4 00 B1 FD | 	call	#_hg010b_spin2_setcursorx
0fe50     00 2B 56 F2 | 	cmps	local03, #256 wc
0fe54     30 00 90 CD |  if_b	jmp	#LR__1350
0fe58     00 2A 06 F6 | 	mov	local03, #0
0fe5c     00 12 06 F6 | 	mov	arg01, #0
0fe60     DC 7A B1 FD | 	call	#__system___getiolock_0574
0fe64     FD 12 02 F6 | 	mov	arg01, result1
0fe68     A8 1D B1 FD | 	call	#__system___lockmem
0fe6c     00 12 06 F6 | 	mov	arg01, #0
0fe70     0A 14 06 F6 | 	mov	arg02, #10
0fe74     00 16 06 F6 | 	mov	arg03, #0
0fe78     34 2A B1 FD | 	call	#__system___basic_print_char
0fe7c     00 12 06 F6 | 	mov	arg01, #0
0fe80     BC 7A B1 FD | 	call	#__system___getiolock_0574
0fe84     FD 00 68 FC | 	wrlong	#0, result1
0fe88                 | LR__1350
0fe88     01 2C 06 F1 | 	add	local04, #1
0fe8c     64 FF 9F FD | 	jmp	#LR__1349
0fe90                 | LR__1351
0fe90                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0fe90     80 34 56 F2 | 	cmps	local08, #128 wc
0fe94     44 00 90 CD |  if_b	jmp	#LR__1352
0fe98     00 12 06 F6 | 	mov	arg01, #0
0fe9c     A0 7A B1 FD | 	call	#__system___getiolock_0574
0fea0     FD 12 02 F6 | 	mov	arg01, result1
0fea4     6C 1D B1 FD | 	call	#__system___lockmem
0fea8     8F 01 00 FF 
0feac     B2 15 06 F6 | 	mov	arg02, ##@LR__5591
0feb0     00 12 06 F6 | 	mov	arg01, #0
0feb4     00 16 06 F6 | 	mov	arg03, #0
0feb8     4C 2A B1 FD | 	call	#__system___basic_print_string
0febc     00 12 06 F6 | 	mov	arg01, #0
0fec0     0A 14 06 F6 | 	mov	arg02, #10
0fec4     00 16 06 F6 | 	mov	arg03, #0
0fec8     E4 29 B1 FD | 	call	#__system___basic_print_char
0fecc     00 12 06 F6 | 	mov	arg01, #0
0fed0     6C 7A B1 FD | 	call	#__system___getiolock_0574
0fed4     FD 00 68 FC | 	wrlong	#0, result1
0fed8     00 26 06 F6 | 	mov	local01, #0
0fedc                 | LR__1352
0fedc                 | ' print
0fedc     00 12 06 F6 | 	mov	arg01, #0
0fee0     5C 7A B1 FD | 	call	#__system___getiolock_0574
0fee4     FD 12 02 F6 | 	mov	arg01, result1
0fee8     28 1D B1 FD | 	call	#__system___lockmem
0feec     00 12 06 F6 | 	mov	arg01, #0
0fef0     0A 14 06 F6 | 	mov	arg02, #10
0fef4     00 16 06 F6 | 	mov	arg03, #0
0fef8     B4 29 B1 FD | 	call	#__system___basic_print_char
0fefc     00 12 06 F6 | 	mov	arg01, #0
0ff00     3C 7A B1 FD | 	call	#__system___getiolock_0574
0ff04     FD 00 68 FC | 	wrlong	#0, result1
0ff08     00 30 06 F6 | 	mov	local06, #0
0ff0c     00 34 06 F6 | 	mov	local08, #0
0ff10     00 2A 06 F6 | 	mov	local03, #0
0ff14                 | ' return cursor_y
0ff14     3E E4 05 F1 | 	add	objptr, #62
0ff18     F2 48 C2 FA | 	rdbyte	local18, objptr
0ff1c     3E E4 85 F1 | 	sub	objptr, #62
0ff20     8F 01 00 FF 
0ff24     E4 13 06 F6 | 	mov	arg01, ##@LR__5592
0ff28     21 14 06 F6 | 	mov	arg02, #33
0ff2c     48 7B B1 FD | 	call	#__system___basic_dir
0ff30     FD 32 02 F6 | 	mov	local07, result1
0ff34                 | ' n=0
0ff34                 | ' px=0: py=v.getcursory()
0ff34                 | ' filename = dir$("*", fbNormal )   
0ff34                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0ff34                 | LR__1353
0ff34     8F 01 00 FF 
0ff38     E6 37 06 F6 | 	mov	local09, ##@LR__5593
0ff3c     19 13 02 F6 | 	mov	arg01, local07
0ff40     1B 15 02 F6 | 	mov	arg02, local09
0ff44     F4 1C B1 FD | 	call	#__system___string_cmp
0ff48     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff4c     54 00 90 AD |  if_e	jmp	#LR__1354
0ff50     00 36 06 F6 | 	mov	local09, #0
0ff54     19 13 02 F6 | 	mov	arg01, local07
0ff58     00 14 06 F6 | 	mov	arg02, #0
0ff5c     DC 1C B1 FD | 	call	#__system___string_cmp
0ff60     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff64     3C 00 90 AD |  if_e	jmp	#LR__1354
0ff68     80 34 56 F2 | 	cmps	local08, #128 wc
0ff6c     34 00 90 3D |  if_ae	jmp	#LR__1354
0ff70     1A 2F 02 F6 | 	mov	local05, local08
0ff74     02 2E 66 F0 | 	shl	local05, #2
0ff78     1C 4E 05 F1 | 	add	fp, #28
0ff7c     A7 2E 02 F1 | 	add	local05, fp
0ff80     17 33 62 FC | 	wrlong	local07, local05
0ff84     01 34 06 F1 | 	add	local08, #1
0ff88     00 2E 06 F6 | 	mov	local05, #0
0ff8c     00 12 06 F6 | 	mov	arg01, #0
0ff90     00 14 06 F6 | 	mov	arg02, #0
0ff94     1C 4E 85 F1 | 	sub	fp, #28
0ff98     DC 7A B1 FD | 	call	#__system___basic_dir
0ff9c     FD 32 02 F6 | 	mov	local07, result1
0ffa0     90 FF 9F FD | 	jmp	#LR__1353
0ffa4                 | LR__1354
0ffa4                 | ' for i =0 to n-1
0ffa4     00 2C 06 F6 | 	mov	local04, #0
0ffa8                 | LR__1355
0ffa8     1A 2D 52 F2 | 	cmps	local04, local08 wc
0ffac     D8 00 90 3D |  if_ae	jmp	#LR__1359
0ffb0     00 3A 06 F6 | 	mov	local11, #0
0ffb4                 | '   swapped=false
0ffb4                 | '   for j=0 to n-i-2
0ffb4     00 3C 06 F6 | 	mov	local12, #0
0ffb8     1A 4B 02 F6 | 	mov	local19, local08
0ffbc     16 4B 82 F1 | 	sub	local19, local04
0ffc0     01 4A 86 F1 | 	sub	local19, #1
0ffc4                 | LR__1356
0ffc4     25 3D 52 F2 | 	cmps	local12, local19 wc
0ffc8     AC 00 90 3D |  if_ae	jmp	#LR__1358
0ffcc                 | '     if filelist(j) > filelist(j+1) then
0ffcc     1E 37 02 F6 | 	mov	local09, local12
0ffd0     02 36 66 F0 | 	shl	local09, #2
0ffd4     1C 4E 05 F1 | 	add	fp, #28
0ffd8     A7 36 02 F1 | 	add	local09, fp
0ffdc     1B 13 02 FB | 	rdlong	arg01, local09
0ffe0     1E 37 02 F6 | 	mov	local09, local12
0ffe4     01 36 06 F1 | 	add	local09, #1
0ffe8     1B 31 02 F6 | 	mov	local06, local09
0ffec     02 30 66 F0 | 	shl	local06, #2
0fff0     A7 26 02 F6 | 	mov	local01, fp
0fff4     A7 30 02 F1 | 	add	local06, fp
0fff8     18 2F 02 FB | 	rdlong	local05, local06
0fffc     17 15 02 F6 | 	mov	arg02, local05
10000     1C 4E 85 F1 | 	sub	fp, #28
10004     34 1C B1 FD | 	call	#__system___string_cmp
10008     01 FA 55 F2 | 	cmps	result1, #1 wc
1000c     60 00 90 CD |  if_b	jmp	#LR__1357
10010     1E 37 02 F6 | 	mov	local09, local12
10014     01 36 06 F1 | 	add	local09, #1
10018     02 36 66 F0 | 	shl	local09, #2
1001c     1C 4E 05 F1 | 	add	fp, #28
10020     A7 36 02 F1 | 	add	local09, fp
10024     1B 45 02 FB | 	rdlong	local16, local09
10028     1E 31 02 F6 | 	mov	local06, local12
1002c     02 30 66 F0 | 	shl	local06, #2
10030     A7 30 02 F1 | 	add	local06, fp
10034     18 2F 02 FB | 	rdlong	local05, local06
10038     1E 37 02 F6 | 	mov	local09, local12
1003c     1B 31 02 F6 | 	mov	local06, local09
10040     02 30 66 F0 | 	shl	local06, #2
10044     A7 26 02 F6 | 	mov	local01, fp
10048     A7 30 02 F1 | 	add	local06, fp
1004c     18 45 62 FC | 	wrlong	local16, local06
10050     1E 41 02 F6 | 	mov	local14, local12
10054     01 40 06 F1 | 	add	local14, #1
10058     02 40 66 F0 | 	shl	local14, #2
1005c     A7 42 02 F6 | 	mov	local15, fp
10060     A7 40 02 F1 | 	add	local14, fp
10064     20 2F 62 FC | 	wrlong	local05, local14
10068     01 3A 66 F6 | 	neg	local11, #1
1006c     1C 4E 85 F1 | 	sub	fp, #28
10070                 | LR__1357
10070     01 3C 06 F1 | 	add	local12, #1
10074     4C FF 9F FD | 	jmp	#LR__1356
10078                 | LR__1358
10078                 | ' if not swapped then exit for
10078     1D 45 22 F6 | 	not	local16, local11
1007c     00 44 0E F2 | 	cmp	local16, #0 wz
10080     01 2C 06 A1 |  if_e	add	local04, #1
10084     20 FF 9F AD |  if_e	jmp	#LR__1355
10088                 | LR__1359
10088                 | ' for i=0 to n-1
10088     00 2C 06 F6 | 	mov	local04, #0
1008c                 | LR__1360
1008c     1A 2D 52 F2 | 	cmps	local04, local08 wc
10090     8C 00 90 3D |  if_ae	jmp	#LR__1362
10094                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10094     00 12 06 F6 | 	mov	arg01, #0
10098     A4 78 B1 FD | 	call	#__system___getiolock_0574
1009c     FD 12 02 F6 | 	mov	arg01, result1
100a0     70 1B B1 FD | 	call	#__system___lockmem
100a4     16 29 02 F6 | 	mov	local02, local04
100a8     02 28 66 F0 | 	shl	local02, #2
100ac     1C 4E 05 F1 | 	add	fp, #28
100b0     A7 28 02 F1 | 	add	local02, fp
100b4     14 15 02 FB | 	rdlong	arg02, local02
100b8     00 12 06 F6 | 	mov	arg01, #0
100bc     00 16 06 F6 | 	mov	arg03, #0
100c0     1C 4E 85 F1 | 	sub	fp, #28
100c4     40 28 B1 FD | 	call	#__system___basic_print_string
100c8     00 12 06 F6 | 	mov	arg01, #0
100cc     70 78 B1 FD | 	call	#__system___getiolock_0574
100d0     FD 00 68 FC | 	wrlong	#0, result1
100d4     40 2A 06 F1 | 	add	local03, #64
100d8     15 13 02 F6 | 	mov	arg01, local03
100dc     24 FE B0 FD | 	call	#_hg010b_spin2_setcursorx
100e0     00 2B 56 F2 | 	cmps	local03, #256 wc
100e4     30 00 90 CD |  if_b	jmp	#LR__1361
100e8     00 2A 06 F6 | 	mov	local03, #0
100ec     00 12 06 F6 | 	mov	arg01, #0
100f0     4C 78 B1 FD | 	call	#__system___getiolock_0574
100f4     FD 12 02 F6 | 	mov	arg01, result1
100f8     18 1B B1 FD | 	call	#__system___lockmem
100fc     00 12 06 F6 | 	mov	arg01, #0
10100     0A 14 06 F6 | 	mov	arg02, #10
10104     00 16 06 F6 | 	mov	arg03, #0
10108     A4 27 B1 FD | 	call	#__system___basic_print_char
1010c     00 12 06 F6 | 	mov	arg01, #0
10110     2C 78 B1 FD | 	call	#__system___getiolock_0574
10114     FD 00 68 FC | 	wrlong	#0, result1
10118                 | LR__1361
10118     01 2C 06 F1 | 	add	local04, #1
1011c     6C FF 9F FD | 	jmp	#LR__1360
10120                 | LR__1362
10120                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
10120     80 34 56 F2 | 	cmps	local08, #128 wc
10124     40 00 90 CD |  if_b	jmp	#LR__1363
10128     00 12 06 F6 | 	mov	arg01, #0
1012c     10 78 B1 FD | 	call	#__system___getiolock_0574
10130     FD 12 02 F6 | 	mov	arg01, result1
10134     DC 1A B1 FD | 	call	#__system___lockmem
10138     8F 01 00 FF 
1013c     E7 15 06 F6 | 	mov	arg02, ##@LR__5594
10140     00 12 06 F6 | 	mov	arg01, #0
10144     00 16 06 F6 | 	mov	arg03, #0
10148     BC 27 B1 FD | 	call	#__system___basic_print_string
1014c     00 12 06 F6 | 	mov	arg01, #0
10150     0A 14 06 F6 | 	mov	arg02, #10
10154     00 16 06 F6 | 	mov	arg03, #0
10158     54 27 B1 FD | 	call	#__system___basic_print_char
1015c     00 12 06 F6 | 	mov	arg01, #0
10160     DC 77 B1 FD | 	call	#__system___getiolock_0574
10164     FD 00 68 FC | 	wrlong	#0, result1
10168                 | LR__1363
10168                 | ' print
10168     00 12 06 F6 | 	mov	arg01, #0
1016c     D0 77 B1 FD | 	call	#__system___getiolock_0574
10170     FD 12 02 F6 | 	mov	arg01, result1
10174     9C 1A B1 FD | 	call	#__system___lockmem
10178     00 12 06 F6 | 	mov	arg01, #0
1017c     0A 14 06 F6 | 	mov	arg02, #10
10180     00 16 06 F6 | 	mov	arg03, #0
10184     28 27 B1 FD | 	call	#__system___basic_print_char
10188     00 12 06 F6 | 	mov	arg01, #0
1018c     B0 77 B1 FD | 	call	#__system___getiolock_0574
10190     FD 00 68 FC | 	wrlong	#0, result1
10194     A7 F0 03 F6 | 	mov	ptra, fp
10198     B2 00 A0 FD | 	call	#popregs_
1019c                 | _do_dir_ret
1019c     2D 00 64 FD | 	ret
101a0                 | 
101a0                 | ' 
101a0                 | ' '-------------------- dpeek
101a0                 | ' 
101a0                 | ' sub do_dpeek
101a0                 | _do_dpeek
101a0     00 4A 05 F6 | 	mov	COUNT_, #0
101a4     A8 00 A0 FD | 	call	#pushregs_
101a8     14 F0 07 F1 | 	add	ptra, #20
101ac     E0 B6 BF FD | 	call	#_pop
101b0     A7 FA 61 FC | 	wrlong	result1, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 FC 61 FC | 	wrlong	result2, fp
101bc     04 4E 05 F1 | 	add	fp, #4
101c0     A7 FE 61 FC | 	wrlong	result3, fp
101c4     08 4E 85 F1 | 	sub	fp, #8
101c8     A7 12 02 F6 | 	mov	arg01, fp
101cc     A4 B8 BF FD | 	call	#_converttoint
101d0     0C 4E 05 F1 | 	add	fp, #12
101d4     A7 FA 61 FC | 	wrlong	result1, fp
101d8                 | ' 
101d8                 | ' t1=pop()
101d8                 | ' a=converttoint(t1)
101d8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
101d8     0C 4E 85 F1 | 	sub	fp, #12
101dc     00 04 00 FF 
101e0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
101e4     1C 00 90 3D |  if_ae	jmp	#LR__1370
101e8     0C 4E 05 F1 | 	add	fp, #12
101ec     A7 12 02 FB | 	rdlong	arg01, fp
101f0     09 FB E1 FA | 	rdword	result1, arg01
101f4     04 4E 05 F1 | 	add	fp, #4
101f8     A7 FA 61 FC | 	wrlong	result1, fp
101fc     10 4E 85 F1 | 	sub	fp, #16
10200     1C 00 90 FD | 	jmp	#LR__1371
10204                 | LR__1370
10204     0C 4E 05 F1 | 	add	fp, #12
10208     A7 12 02 FB | 	rdlong	arg01, fp
1020c     0C 4E 85 F1 | 	sub	fp, #12
10210     F4 E3 B0 FD | 	call	#_psdpeek
10214     10 4E 05 F1 | 	add	fp, #16
10218     A7 FA 61 FC | 	wrlong	result1, fp
1021c     10 4E 85 F1 | 	sub	fp, #16
10220                 | LR__1371
10220     08 4E 05 F1 | 	add	fp, #8
10224     A7 3A 68 FC | 	wrlong	#29, fp
10228     08 4E 05 F1 | 	add	fp, #8
1022c     A7 12 02 FB | 	rdlong	arg01, fp
10230     10 4E 85 F1 | 	sub	fp, #16
10234     A7 12 62 FC | 	wrlong	arg01, fp
10238     A7 12 02 F6 | 	mov	arg01, fp
1023c     E8 B6 BF FD | 	call	#_push
10240     A7 F0 03 F6 | 	mov	ptra, fp
10244     B2 00 A0 FD | 	call	#popregs_
10248                 | _do_dpeek_ret
10248     2D 00 64 FD | 	ret
1024c                 | 
1024c                 | ' 
1024c                 | ' '-------------------- dpoke
1024c                 | ' 
1024c                 | ' sub do_dpoke
1024c                 | _do_dpoke
1024c     01 4A 05 F6 | 	mov	COUNT_, #1
10250     A8 00 A0 FD | 	call	#pushregs_
10254     20 F0 07 F1 | 	add	ptra, #32
10258     34 B6 BF FD | 	call	#_pop
1025c     FD 14 02 F6 | 	mov	arg02, result1
10260     FE 12 02 F6 | 	mov	arg01, result2
10264     FF 26 02 F6 | 	mov	local01, result3
10268     A7 14 62 FC | 	wrlong	arg02, fp
1026c     04 4E 05 F1 | 	add	fp, #4
10270     A7 12 62 FC | 	wrlong	arg01, fp
10274     04 4E 05 F1 | 	add	fp, #4
10278     A7 26 62 FC | 	wrlong	local01, fp
1027c     08 4E 85 F1 | 	sub	fp, #8
10280     0C B6 BF FD | 	call	#_pop
10284     FF 26 02 F6 | 	mov	local01, result3
10288     0C 4E 05 F1 | 	add	fp, #12
1028c     A7 FA 61 FC | 	wrlong	result1, fp
10290     04 4E 05 F1 | 	add	fp, #4
10294     A7 FC 61 FC | 	wrlong	result2, fp
10298     04 4E 05 F1 | 	add	fp, #4
1029c     A7 26 62 FC | 	wrlong	local01, fp
102a0     08 4E 85 F1 | 	sub	fp, #8
102a4     A7 12 02 F6 | 	mov	arg01, fp
102a8     0C 4E 85 F1 | 	sub	fp, #12
102ac     C4 B7 BF FD | 	call	#_converttoint
102b0     18 4E 05 F1 | 	add	fp, #24
102b4     A7 FA 61 FC | 	wrlong	result1, fp
102b8     18 4E 85 F1 | 	sub	fp, #24
102bc     A7 12 02 F6 | 	mov	arg01, fp
102c0     B0 B7 BF FD | 	call	#_converttoint
102c4     1C 4E 05 F1 | 	add	fp, #28
102c8     A7 FA 61 FC | 	wrlong	result1, fp
102cc                 | ' 
102cc                 | ' t1=pop() 'value
102cc                 | ' t2=pop() 
102cc                 | ' a=converttoint(t2) : v=converttoint(t1)
102cc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
102cc     04 4E 85 F1 | 	sub	fp, #4
102d0     A7 26 02 FB | 	rdlong	local01, fp
102d4     18 4E 85 F1 | 	sub	fp, #24
102d8     00 04 00 FF 
102dc     00 26 16 F2 | 	cmp	local01, ##524288 wc
102e0     1C 00 90 3D |  if_ae	jmp	#LR__1380
102e4     18 4E 05 F1 | 	add	fp, #24
102e8     A7 12 02 FB | 	rdlong	arg01, fp
102ec     04 4E 05 F1 | 	add	fp, #4
102f0     A7 14 02 FB | 	rdlong	arg02, fp
102f4     1C 4E 85 F1 | 	sub	fp, #28
102f8     09 15 52 FC | 	wrword	arg02, arg01
102fc     18 00 90 FD | 	jmp	#LR__1381
10300                 | LR__1380
10300     18 4E 05 F1 | 	add	fp, #24
10304     A7 12 02 FB | 	rdlong	arg01, fp
10308     04 4E 05 F1 | 	add	fp, #4
1030c     A7 14 02 FB | 	rdlong	arg02, fp
10310     1C 4E 85 F1 | 	sub	fp, #28
10314     B0 E1 B0 FD | 	call	#_psdpoke
10318                 | LR__1381
10318     A7 F0 03 F6 | 	mov	ptra, fp
1031c     B2 00 A0 FD | 	call	#popregs_
10320                 | _do_dpoke_ret
10320     2D 00 64 FD | 	ret
10324                 | 
10324                 | ' '-------------------- draw
10324                 | ' 
10324                 | ' sub do_draw
10324                 | _do_draw
10324     00 4A 05 F6 | 	mov	COUNT_, #0
10328     A8 00 A0 FD | 	call	#pushregs_
1032c     20 F0 07 F1 | 	add	ptra, #32
10330     5C B5 BF FD | 	call	#_pop
10334     FD 1A 02 F6 | 	mov	arg05, result1
10338     FE 18 02 F6 | 	mov	arg04, result2
1033c     FF 16 02 F6 | 	mov	arg03, result3
10340     0C 4E 05 F1 | 	add	fp, #12
10344     A7 1A 62 FC | 	wrlong	arg05, fp
10348     04 4E 05 F1 | 	add	fp, #4
1034c     A7 18 62 FC | 	wrlong	arg04, fp
10350     04 4E 05 F1 | 	add	fp, #4
10354     A7 16 62 FC | 	wrlong	arg03, fp
10358     14 4E 85 F1 | 	sub	fp, #20
1035c     30 B5 BF FD | 	call	#_pop
10360     FF 1A 02 F6 | 	mov	arg05, result3
10364     A7 FA 61 FC | 	wrlong	result1, fp
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 FC 61 FC | 	wrlong	result2, fp
10370     04 4E 05 F1 | 	add	fp, #4
10374     A7 1A 62 FC | 	wrlong	arg05, fp
10378     08 4E 85 F1 | 	sub	fp, #8
1037c     A7 12 02 F6 | 	mov	arg01, fp
10380     F0 B6 BF FD | 	call	#_converttoint
10384     18 4E 05 F1 | 	add	fp, #24
10388     A7 FA 61 FC | 	wrlong	result1, fp
1038c     0C 4E 85 F1 | 	sub	fp, #12
10390     A7 12 02 F6 | 	mov	arg01, fp
10394     0C 4E 85 F1 | 	sub	fp, #12
10398     D8 B6 BF FD | 	call	#_converttoint
1039c     1C 4E 05 F1 | 	add	fp, #28
103a0     A7 FA 61 FC | 	wrlong	result1, fp
103a4     37 00 00 FF 
103a8     2C E4 05 F1 | 	add	objptr, ##28204
103ac     F2 12 02 FB | 	rdlong	arg01, objptr
103b0     04 E4 05 F1 | 	add	objptr, #4
103b4     F2 14 02 FB | 	rdlong	arg02, objptr
103b8     04 4E 85 F1 | 	sub	fp, #4
103bc     A7 16 02 FB | 	rdlong	arg03, fp
103c0     FD 18 02 F6 | 	mov	arg04, result1
103c4     18 4E 85 F1 | 	sub	fp, #24
103c8     08 E4 85 F1 | 	sub	objptr, #8
103cc     F2 1A 02 FB | 	rdlong	arg05, objptr
103d0     37 00 00 FF 
103d4     28 E4 85 F1 | 	sub	objptr, ##28200
103d8     D8 F1 B0 FD | 	call	#_hg010b_spin2_draw
103dc     18 4E 05 F1 | 	add	fp, #24
103e0     A7 1A 02 FB | 	rdlong	arg05, fp
103e4     37 00 00 FF 
103e8     2C E4 05 F1 | 	add	objptr, ##28204
103ec     F2 1A 62 FC | 	wrlong	arg05, objptr
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 1A 02 FB | 	rdlong	arg05, fp
103f8     1C 4E 85 F1 | 	sub	fp, #28
103fc     04 E4 05 F1 | 	add	objptr, #4
10400     F2 1A 62 FC | 	wrlong	arg05, objptr
10404     37 00 00 FF 
10408     30 E4 85 F1 | 	sub	objptr, ##28208
1040c     A7 F0 03 F6 | 	mov	ptra, fp
10410     B2 00 A0 FD | 	call	#popregs_
10414                 | _do_draw_ret
10414     2D 00 64 FD | 	ret
10418                 | 
10418                 | ' 
10418                 | ' '-------------------- else
10418                 | ' 
10418                 | ' sub do_else
10418                 | _do_else
10418     4A 00 00 FF 
1041c     7C E4 05 F1 | 	add	objptr, ##38012
10420     F2 00 02 FB | 	rdlong	_var01, objptr
10424     01 00 86 F1 | 	sub	_var01, #1
10428     04 E4 05 F1 | 	add	objptr, #4
1042c     F2 00 62 FC | 	wrlong	_var01, objptr
10430     4A 00 00 FF 
10434     80 E4 85 F1 | 	sub	objptr, ##38016
10438                 | _do_else_ret
10438     2D 00 64 FD | 	ret
1043c                 | 
1043c                 | ' 
1043c                 | ' '-------------------- end
1043c                 | ' 
1043c                 | ' sub do_end
1043c                 | _do_end
1043c     4A 00 00 FF 
10440     7C E4 05 F1 | 	add	objptr, ##38012
10444     F2 00 02 FB | 	rdlong	_var01, objptr
10448     01 00 86 F1 | 	sub	_var01, #1
1044c     04 E4 05 F1 | 	add	objptr, #4
10450     F2 00 62 FC | 	wrlong	_var01, objptr
10454     06 00 00 FF 
10458     38 E4 05 F1 | 	add	objptr, ##3128
1045c     FF FF BF FF 
10460     F2 FE 6B FC | 	wrlong	##2147483647, objptr
10464     50 00 00 FF 
10468     B8 E4 85 F1 | 	sub	objptr, ##41144
1046c                 | _do_end_ret
1046c     2D 00 64 FD | 	ret
10470                 | 
10470                 | ' 
10470                 | ' '-------------------- enter
10470                 | ' 
10470                 | ' sub do_enter
10470                 | _do_enter
10470     02 00 00 FF 
10474     D2 12 06 F6 | 	mov	arg01, ##1234
10478     98 22 B0 FD | 	call	#_do_load
1047c                 | _do_enter_ret
1047c     2D 00 64 FD | 	ret
10480                 | 
10480                 | ' 
10480                 | ' '------------------- error processing
10480                 | ' 
10480                 | ' sub do_error
10480                 | _do_error
10480     01 4A 05 F6 | 	mov	COUNT_, #1
10484     A8 00 A0 FD | 	call	#pushregs_
10488     4A 00 00 FF 
1048c     80 E4 05 F1 | 	add	objptr, ##38016
10490     F2 18 02 FB | 	rdlong	arg04, objptr
10494     0C 17 02 F6 | 	mov	arg03, arg04
10498     01 16 66 F0 | 	shl	arg03, #1
1049c     0C 17 02 F1 | 	add	arg03, arg04
104a0     02 16 66 F0 | 	shl	arg03, #2
104a4     03 00 00 FF 
104a8     04 E4 85 F1 | 	sub	objptr, ##1540
104ac     F2 16 02 F1 | 	add	arg03, objptr
104b0     0B 27 02 FB | 	rdlong	local01, arg03
104b4                 | ' r=compiledline(lineptr_e).result.uresult
104b4                 | ' print "Error ";r;": ";errors$(r)
104b4     00 12 06 F6 | 	mov	arg01, #0
104b8     47 00 00 FF 
104bc     7C E4 85 F1 | 	sub	objptr, ##36476
104c0     7C 74 B1 FD | 	call	#__system___getiolock_0574
104c4     FD 12 02 F6 | 	mov	arg01, result1
104c8     48 17 B1 FD | 	call	#__system___lockmem
104cc     90 01 00 FF 
104d0     19 14 06 F6 | 	mov	arg02, ##@LR__5595
104d4     00 12 06 F6 | 	mov	arg01, #0
104d8     00 16 06 F6 | 	mov	arg03, #0
104dc     28 24 B1 FD | 	call	#__system___basic_print_string
104e0     00 12 06 F6 | 	mov	arg01, #0
104e4     13 15 02 F6 | 	mov	arg02, local01
104e8     00 16 06 F6 | 	mov	arg03, #0
104ec     0A 18 06 F6 | 	mov	arg04, #10
104f0     98 24 B1 FD | 	call	#__system___basic_print_unsigned
104f4     90 01 00 FF 
104f8     20 14 06 F6 | 	mov	arg02, ##@LR__5596
104fc     00 12 06 F6 | 	mov	arg01, #0
10500     00 16 06 F6 | 	mov	arg03, #0
10504     00 24 B1 FD | 	call	#__system___basic_print_string
10508     02 26 66 F0 | 	shl	local01, #2
1050c     45 00 00 FF 
10510     7C E4 05 F1 | 	add	objptr, ##35452
10514     F2 26 02 F1 | 	add	local01, objptr
10518     13 15 02 FB | 	rdlong	arg02, local01
1051c     00 12 06 F6 | 	mov	arg01, #0
10520     00 16 06 F6 | 	mov	arg03, #0
10524     45 00 00 FF 
10528     7C E4 85 F1 | 	sub	objptr, ##35452
1052c     D8 23 B1 FD | 	call	#__system___basic_print_string
10530     00 12 06 F6 | 	mov	arg01, #0
10534     0A 14 06 F6 | 	mov	arg02, #10
10538     00 16 06 F6 | 	mov	arg03, #0
1053c     70 23 B1 FD | 	call	#__system___basic_print_char
10540     00 12 06 F6 | 	mov	arg01, #0
10544     F8 73 B1 FD | 	call	#__system___getiolock_0574
10548     FD 00 68 FC | 	wrlong	#0, result1
1054c     A7 F0 03 F6 | 	mov	ptra, fp
10550     B2 00 A0 FD | 	call	#popregs_
10554                 | _do_error_ret
10554     2D 00 64 FD | 	ret
10558                 | 
10558                 | ' 
10558                 | ' '-------------------- fcircle
10558                 | ' 
10558                 | ' sub do_fcircle
10558                 | _do_fcircle
10558     02 4A 05 F6 | 	mov	COUNT_, #2
1055c     A8 00 A0 FD | 	call	#pushregs_
10560     24 F0 07 F1 | 	add	ptra, #36
10564     28 B3 BF FD | 	call	#_pop
10568     FD 14 02 F6 | 	mov	arg02, result1
1056c     FE 18 02 F6 | 	mov	arg04, result2
10570     FF 16 02 F6 | 	mov	arg03, result3
10574     18 4E 05 F1 | 	add	fp, #24
10578     A7 14 62 FC | 	wrlong	arg02, fp
1057c     04 4E 05 F1 | 	add	fp, #4
10580     A7 18 62 FC | 	wrlong	arg04, fp
10584     04 4E 05 F1 | 	add	fp, #4
10588     A7 16 62 FC | 	wrlong	arg03, fp
1058c     20 4E 85 F1 | 	sub	fp, #32
10590     FC B2 BF FD | 	call	#_pop
10594     FD 14 02 F6 | 	mov	arg02, result1
10598     FE 18 02 F6 | 	mov	arg04, result2
1059c     FF 16 02 F6 | 	mov	arg03, result3
105a0     0C 4E 05 F1 | 	add	fp, #12
105a4     A7 14 62 FC | 	wrlong	arg02, fp
105a8     04 4E 05 F1 | 	add	fp, #4
105ac     A7 18 62 FC | 	wrlong	arg04, fp
105b0     04 4E 05 F1 | 	add	fp, #4
105b4     A7 16 62 FC | 	wrlong	arg03, fp
105b8     14 4E 85 F1 | 	sub	fp, #20
105bc     D0 B2 BF FD | 	call	#_pop
105c0     FF 14 02 F6 | 	mov	arg02, result3
105c4     A7 FA 61 FC | 	wrlong	result1, fp
105c8     04 4E 05 F1 | 	add	fp, #4
105cc     A7 FC 61 FC | 	wrlong	result2, fp
105d0     04 4E 05 F1 | 	add	fp, #4
105d4     A7 14 62 FC | 	wrlong	arg02, fp
105d8     08 4E 85 F1 | 	sub	fp, #8
105dc     A7 12 02 F6 | 	mov	arg01, fp
105e0     90 B4 BF FD | 	call	#_converttoint
105e4     FD 26 02 F6 | 	mov	local01, result1
105e8     0C 4E 05 F1 | 	add	fp, #12
105ec     A7 12 02 F6 | 	mov	arg01, fp
105f0     0C 4E 85 F1 | 	sub	fp, #12
105f4     7C B4 BF FD | 	call	#_converttoint
105f8     FD 28 02 F6 | 	mov	local02, result1
105fc     18 4E 05 F1 | 	add	fp, #24
10600     A7 12 02 F6 | 	mov	arg01, fp
10604     18 4E 85 F1 | 	sub	fp, #24
10608     68 B4 BF FD | 	call	#_converttoint
1060c     FD 16 02 F6 | 	mov	arg03, result1
10610     37 00 00 FF 
10614     28 E4 05 F1 | 	add	objptr, ##28200
10618     F2 18 02 FB | 	rdlong	arg04, objptr
1061c     37 00 00 FF 
10620     28 E4 85 F1 | 	sub	objptr, ##28200
10624     13 13 02 F6 | 	mov	arg01, local01
10628     14 15 02 F6 | 	mov	arg02, local02
1062c     08 F4 B0 FD | 	call	#_hg010b_spin2_fcircle
10630     A7 F0 03 F6 | 	mov	ptra, fp
10634     B2 00 A0 FD | 	call	#popregs_
10638                 | _do_fcircle_ret
10638     2D 00 64 FD | 	ret
1063c                 | 
1063c                 | ' 
1063c                 | ' '-------------------- fill
1063c                 | ' 
1063c                 | ' sub do_fill
1063c                 | _do_fill
1063c     03 4A 05 F6 | 	mov	COUNT_, #3
10640     A8 00 A0 FD | 	call	#pushregs_
10644     30 F0 07 F1 | 	add	ptra, #48
10648     44 B2 BF FD | 	call	#_pop
1064c     FD 16 02 F6 | 	mov	arg03, result1
10650     FE 14 02 F6 | 	mov	arg02, result2
10654     FF 18 02 F6 | 	mov	arg04, result3
10658     24 4E 05 F1 | 	add	fp, #36
1065c     A7 16 62 FC | 	wrlong	arg03, fp
10660     04 4E 05 F1 | 	add	fp, #4
10664     A7 14 62 FC | 	wrlong	arg02, fp
10668     04 4E 05 F1 | 	add	fp, #4
1066c     A7 18 62 FC | 	wrlong	arg04, fp
10670     2C 4E 85 F1 | 	sub	fp, #44
10674     18 B2 BF FD | 	call	#_pop
10678     FD 16 02 F6 | 	mov	arg03, result1
1067c     FE 14 02 F6 | 	mov	arg02, result2
10680     FF 18 02 F6 | 	mov	arg04, result3
10684     18 4E 05 F1 | 	add	fp, #24
10688     A7 16 62 FC | 	wrlong	arg03, fp
1068c     04 4E 05 F1 | 	add	fp, #4
10690     A7 14 62 FC | 	wrlong	arg02, fp
10694     04 4E 05 F1 | 	add	fp, #4
10698     A7 18 62 FC | 	wrlong	arg04, fp
1069c     20 4E 85 F1 | 	sub	fp, #32
106a0     EC B1 BF FD | 	call	#_pop
106a4     FD 16 02 F6 | 	mov	arg03, result1
106a8     FE 14 02 F6 | 	mov	arg02, result2
106ac     FF 18 02 F6 | 	mov	arg04, result3
106b0     0C 4E 05 F1 | 	add	fp, #12
106b4     A7 16 62 FC | 	wrlong	arg03, fp
106b8     04 4E 05 F1 | 	add	fp, #4
106bc     A7 14 62 FC | 	wrlong	arg02, fp
106c0     04 4E 05 F1 | 	add	fp, #4
106c4     A7 18 62 FC | 	wrlong	arg04, fp
106c8     14 4E 85 F1 | 	sub	fp, #20
106cc     C0 B1 BF FD | 	call	#_pop
106d0     FF 16 02 F6 | 	mov	arg03, result3
106d4     A7 FA 61 FC | 	wrlong	result1, fp
106d8     04 4E 05 F1 | 	add	fp, #4
106dc     A7 FC 61 FC | 	wrlong	result2, fp
106e0     04 4E 05 F1 | 	add	fp, #4
106e4     A7 16 62 FC | 	wrlong	arg03, fp
106e8     08 4E 85 F1 | 	sub	fp, #8
106ec     A7 12 02 F6 | 	mov	arg01, fp
106f0     80 B3 BF FD | 	call	#_converttoint
106f4     FD 26 02 F6 | 	mov	local01, result1
106f8     0C 4E 05 F1 | 	add	fp, #12
106fc     A7 12 02 F6 | 	mov	arg01, fp
10700     0C 4E 85 F1 | 	sub	fp, #12
10704     6C B3 BF FD | 	call	#_converttoint
10708     FD 28 02 F6 | 	mov	local02, result1
1070c     18 4E 05 F1 | 	add	fp, #24
10710     A7 12 02 F6 | 	mov	arg01, fp
10714     18 4E 85 F1 | 	sub	fp, #24
10718     58 B3 BF FD | 	call	#_converttoint
1071c     FD 2A 02 F6 | 	mov	local03, result1
10720     24 4E 05 F1 | 	add	fp, #36
10724     A7 12 02 F6 | 	mov	arg01, fp
10728     24 4E 85 F1 | 	sub	fp, #36
1072c     44 B3 BF FD | 	call	#_converttoint
10730     FD 18 02 F6 | 	mov	arg04, result1
10734     13 13 02 F6 | 	mov	arg01, local01
10738     14 15 02 F6 | 	mov	arg02, local02
1073c     15 17 02 F6 | 	mov	arg03, local03
10740     60 F0 B0 FD | 	call	#_hg010b_spin2_fill
10744     A7 F0 03 F6 | 	mov	ptra, fp
10748     B2 00 A0 FD | 	call	#popregs_
1074c                 | _do_fill_ret
1074c     2D 00 64 FD | 	ret
10750                 | 
10750                 | ' 
10750                 | ' '-------------------- font
10750                 | ' 
10750                 | ' sub do_font
10750                 | _do_font
10750     03 4A 05 F6 | 	mov	COUNT_, #3
10754     A8 00 A0 FD | 	call	#pushregs_
10758     34 B1 BF FD | 	call	#_pop
1075c     FD 26 02 F6 | 	mov	local01, result1
10760     FE 28 02 F6 | 	mov	local02, result2
10764     FF 2A 02 F6 | 	mov	local03, result3
10768                 | ' 
10768                 | ' t1=pop() 
10768                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10768     1E 2A 0E F2 | 	cmp	local03, #30 wz
1076c     10 00 90 5D |  if_ne	jmp	#LR__1390
10770     13 13 02 F6 | 	mov	arg01, local01
10774     00 14 06 F6 | 	mov	arg02, #0
10778     1C 47 B1 FD | 	call	#__system___float_tointeger
1077c     FD 26 02 F6 | 	mov	local01, result1
10780                 | LR__1390
10780                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10780     1F 2A 0E F2 | 	cmp	local03, #31 wz
10784     18 00 90 5D |  if_ne	jmp	#LR__1391
10788     13 13 02 F6 | 	mov	arg01, local01
1078c     4C 4A B1 FD | 	call	#__system____builtin_atof
10790     FD 12 02 F6 | 	mov	arg01, result1
10794     00 14 06 F6 | 	mov	arg02, #0
10798     FC 46 B1 FD | 	call	#__system___float_tointeger
1079c     FD 26 02 F6 | 	mov	local01, result1
107a0                 | LR__1391
107a0     37 00 00 FF 
107a4     40 E4 05 F1 | 	add	objptr, ##28224
107a8     F2 26 62 FC | 	wrlong	local01, objptr
107ac     37 00 00 FF 
107b0     40 E4 85 F1 | 	sub	objptr, ##28224
107b4     02 26 66 F0 | 	shl	local01, #2
107b8     13 13 02 F6 | 	mov	arg01, local01
107bc     C8 F6 B0 FD | 	call	#_hg010b_spin2_setfontfamily
107c0     A7 F0 03 F6 | 	mov	ptra, fp
107c4     B2 00 A0 FD | 	call	#popregs_
107c8                 | _do_font_ret
107c8     2D 00 64 FD | 	ret
107cc                 | 
107cc                 | ' 
107cc                 | ' '-------------------- for
107cc                 | ' 
107cc                 | ' sub do_for()
107cc                 | _do_for
107cc     01 4A 05 F6 | 	mov	COUNT_, #1
107d0     A8 00 A0 FD | 	call	#pushregs_
107d4     10 F0 07 F1 | 	add	ptra, #16
107d8     50 00 00 FF 
107dc     08 E5 05 F1 | 	add	objptr, ##41224
107e0     F2 12 02 FB | 	rdlong	arg01, objptr
107e4     01 12 06 F1 | 	add	arg01, #1
107e8     F2 12 62 FC | 	wrlong	arg01, objptr
107ec     50 00 00 FF 
107f0     08 E5 85 F1 | 	sub	objptr, ##41224
107f4     98 B0 BF FD | 	call	#_pop
107f8     A7 FA 61 FC | 	wrlong	result1, fp
107fc     04 4E 05 F1 | 	add	fp, #4
10800     A7 FC 61 FC | 	wrlong	result2, fp
10804     04 4E 05 F1 | 	add	fp, #4
10808     A7 FE 61 FC | 	wrlong	result3, fp
1080c     08 4E 85 F1 | 	sub	fp, #8
10810     50 00 00 FF 
10814     08 E5 05 F1 | 	add	objptr, ##41224
10818     F2 12 02 FB | 	rdlong	arg01, objptr
1081c     09 27 02 F6 | 	mov	local01, arg01
10820     02 26 66 F0 | 	shl	local01, #2
10824     09 27 02 F1 | 	add	local01, arg01
10828     02 26 66 F0 | 	shl	local01, #2
1082c     06 00 00 FF 
10830     70 E4 85 F1 | 	sub	objptr, ##3184
10834     F2 26 02 F1 | 	add	local01, objptr
10838     A7 12 02 FB | 	rdlong	arg01, fp
1083c     08 26 06 F1 | 	add	local01, #8
10840     13 13 62 FC | 	wrlong	arg01, local01
10844     4A 00 00 FF 
10848     98 E4 85 F1 | 	sub	objptr, ##38040
1084c     40 B0 BF FD | 	call	#_pop
10850     A7 FA 61 FC | 	wrlong	result1, fp
10854     04 4E 05 F1 | 	add	fp, #4
10858     A7 FC 61 FC | 	wrlong	result2, fp
1085c     04 4E 05 F1 | 	add	fp, #4
10860     A7 FE 61 FC | 	wrlong	result3, fp
10864     08 4E 85 F1 | 	sub	fp, #8
10868     50 00 00 FF 
1086c     08 E5 05 F1 | 	add	objptr, ##41224
10870     F2 12 02 FB | 	rdlong	arg01, objptr
10874     09 27 02 F6 | 	mov	local01, arg01
10878     02 26 66 F0 | 	shl	local01, #2
1087c     09 27 02 F1 | 	add	local01, arg01
10880     02 26 66 F0 | 	shl	local01, #2
10884     06 00 00 FF 
10888     70 E4 85 F1 | 	sub	objptr, ##3184
1088c     F2 26 02 F1 | 	add	local01, objptr
10890     A7 12 02 F6 | 	mov	arg01, fp
10894     4A 00 00 FF 
10898     98 E4 85 F1 | 	sub	objptr, ##38040
1089c     D4 B1 BF FD | 	call	#_converttoint
108a0     FD 12 02 F6 | 	mov	arg01, result1
108a4     0C 26 06 F1 | 	add	local01, #12
108a8     13 13 62 FC | 	wrlong	arg01, local01
108ac     E0 AF BF FD | 	call	#_pop
108b0     A7 FA 61 FC | 	wrlong	result1, fp
108b4     04 4E 05 F1 | 	add	fp, #4
108b8     A7 FC 61 FC | 	wrlong	result2, fp
108bc     04 4E 05 F1 | 	add	fp, #4
108c0     A7 FE 61 FC | 	wrlong	result3, fp
108c4     08 4E 85 F1 | 	sub	fp, #8
108c8     50 00 00 FF 
108cc     08 E5 05 F1 | 	add	objptr, ##41224
108d0     F2 12 02 FB | 	rdlong	arg01, objptr
108d4     09 27 02 F6 | 	mov	local01, arg01
108d8     02 26 66 F0 | 	shl	local01, #2
108dc     09 27 02 F1 | 	add	local01, arg01
108e0     02 26 66 F0 | 	shl	local01, #2
108e4     06 00 00 FF 
108e8     70 E4 85 F1 | 	sub	objptr, ##3184
108ec     F2 26 02 F1 | 	add	local01, objptr
108f0     A7 12 02 F6 | 	mov	arg01, fp
108f4     4A 00 00 FF 
108f8     98 E4 85 F1 | 	sub	objptr, ##38040
108fc     74 B1 BF FD | 	call	#_converttoint
10900     10 26 06 F1 | 	add	local01, #16
10904     13 FB 61 FC | 	wrlong	result1, local01
10908                 | ' fortop+=1
10908                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
10908                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
10908                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
10908                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
10908     4A 00 00 FF 
1090c     80 E4 05 F1 | 	add	objptr, ##38016
10910     F2 12 02 FB | 	rdlong	arg01, objptr
10914     09 27 02 F6 | 	mov	local01, arg01
10918     01 26 66 F0 | 	shl	local01, #1
1091c     09 27 02 F1 | 	add	local01, arg01
10920     02 26 66 F0 | 	shl	local01, #2
10924     03 00 00 FF 
10928     04 E4 85 F1 | 	sub	objptr, ##1540
1092c     F2 26 02 F1 | 	add	local01, objptr
10930     08 26 06 F1 | 	add	local01, #8
10934     13 27 02 FB | 	rdlong	local01, local01
10938     FE 27 0E F2 | 	cmp	local01, #510 wz
1093c     47 00 00 FF 
10940     7C E4 85 F1 | 	sub	objptr, ##36476
10944     70 00 90 5D |  if_ne	jmp	#LR__1400
10948     50 00 00 FF 
1094c     08 E5 05 F1 | 	add	objptr, ##41224
10950     F2 12 02 FB | 	rdlong	arg01, objptr
10954     09 27 02 F6 | 	mov	local01, arg01
10958     02 26 66 F0 | 	shl	local01, #2
1095c     09 27 02 F1 | 	add	local01, arg01
10960     02 26 66 F0 | 	shl	local01, #2
10964     06 00 00 FF 
10968     70 E4 85 F1 | 	sub	objptr, ##3184
1096c     F2 26 02 F1 | 	add	local01, objptr
10970     06 00 00 FF 
10974     20 E4 05 F1 | 	add	objptr, ##3104
10978     F2 12 02 FB | 	rdlong	arg01, objptr
1097c     13 13 62 FC | 	wrlong	arg01, local01
10980     50 E4 05 F1 | 	add	objptr, #80
10984     F2 12 02 FB | 	rdlong	arg01, objptr
10988     09 27 02 F6 | 	mov	local01, arg01
1098c     02 26 66 F0 | 	shl	local01, #2
10990     09 27 02 F1 | 	add	local01, arg01
10994     02 26 66 F0 | 	shl	local01, #2
10998     06 00 00 FF 
1099c     70 E4 85 F1 | 	sub	objptr, ##3184
109a0     F2 26 02 F1 | 	add	local01, objptr
109a4     04 26 06 F1 | 	add	local01, #4
109a8     13 01 68 FC | 	wrlong	#0, local01
109ac     4A 00 00 FF 
109b0     98 E4 85 F1 | 	sub	objptr, ##38040
109b4     78 00 90 FD | 	jmp	#LR__1401
109b8                 | LR__1400
109b8     50 00 00 FF 
109bc     08 E5 05 F1 | 	add	objptr, ##41224
109c0     F2 12 02 FB | 	rdlong	arg01, objptr
109c4     09 27 02 F6 | 	mov	local01, arg01
109c8     02 26 66 F0 | 	shl	local01, #2
109cc     09 27 02 F1 | 	add	local01, arg01
109d0     02 26 66 F0 | 	shl	local01, #2
109d4     06 00 00 FF 
109d8     70 E4 85 F1 | 	sub	objptr, ##3184
109dc     F2 26 02 F1 | 	add	local01, objptr
109e0     06 00 00 FF 
109e4     28 E4 05 F1 | 	add	objptr, ##3112
109e8     F2 12 02 FB | 	rdlong	arg01, objptr
109ec     13 13 62 FC | 	wrlong	arg01, local01
109f0     48 E4 05 F1 | 	add	objptr, #72
109f4     F2 12 02 FB | 	rdlong	arg01, objptr
109f8     09 27 02 F6 | 	mov	local01, arg01
109fc     02 26 66 F0 | 	shl	local01, #2
10a00     09 27 02 F1 | 	add	local01, arg01
10a04     02 26 66 F0 | 	shl	local01, #2
10a08     06 00 00 FF 
10a0c     70 E4 85 F1 | 	sub	objptr, ##3184
10a10     F2 26 02 F1 | 	add	local01, objptr
10a14     18 E4 85 F1 | 	sub	objptr, #24
10a18     F2 12 02 FB | 	rdlong	arg01, objptr
10a1c     4A 00 00 FF 
10a20     80 E4 85 F1 | 	sub	objptr, ##38016
10a24     01 12 06 F1 | 	add	arg01, #1
10a28     04 26 06 F1 | 	add	local01, #4
10a2c     13 13 62 FC | 	wrlong	arg01, local01
10a30                 | LR__1401
10a30     A7 F0 03 F6 | 	mov	ptra, fp
10a34     B2 00 A0 FD | 	call	#popregs_
10a38                 | _do_for_ret
10a38     2D 00 64 FD | 	ret
10a3c                 | 
10a3c                 | ' 
10a3c                 | ' '-------------------- frame
10a3c                 | ' 
10a3c                 | ' sub do_frame
10a3c                 | _do_frame
10a3c     03 4A 05 F6 | 	mov	COUNT_, #3
10a40     A8 00 A0 FD | 	call	#pushregs_
10a44     30 F0 07 F1 | 	add	ptra, #48
10a48     44 AE BF FD | 	call	#_pop
10a4c     FD 16 02 F6 | 	mov	arg03, result1
10a50     FE 14 02 F6 | 	mov	arg02, result2
10a54     FF 1A 02 F6 | 	mov	arg05, result3
10a58     24 4E 05 F1 | 	add	fp, #36
10a5c     A7 16 62 FC | 	wrlong	arg03, fp
10a60     04 4E 05 F1 | 	add	fp, #4
10a64     A7 14 62 FC | 	wrlong	arg02, fp
10a68     04 4E 05 F1 | 	add	fp, #4
10a6c     A7 1A 62 FC | 	wrlong	arg05, fp
10a70     2C 4E 85 F1 | 	sub	fp, #44
10a74     18 AE BF FD | 	call	#_pop
10a78     FD 16 02 F6 | 	mov	arg03, result1
10a7c     FE 14 02 F6 | 	mov	arg02, result2
10a80     FF 1A 02 F6 | 	mov	arg05, result3
10a84     18 4E 05 F1 | 	add	fp, #24
10a88     A7 16 62 FC | 	wrlong	arg03, fp
10a8c     04 4E 05 F1 | 	add	fp, #4
10a90     A7 14 62 FC | 	wrlong	arg02, fp
10a94     04 4E 05 F1 | 	add	fp, #4
10a98     A7 1A 62 FC | 	wrlong	arg05, fp
10a9c     20 4E 85 F1 | 	sub	fp, #32
10aa0     EC AD BF FD | 	call	#_pop
10aa4     FD 16 02 F6 | 	mov	arg03, result1
10aa8     FE 14 02 F6 | 	mov	arg02, result2
10aac     FF 1A 02 F6 | 	mov	arg05, result3
10ab0     0C 4E 05 F1 | 	add	fp, #12
10ab4     A7 16 62 FC | 	wrlong	arg03, fp
10ab8     04 4E 05 F1 | 	add	fp, #4
10abc     A7 14 62 FC | 	wrlong	arg02, fp
10ac0     04 4E 05 F1 | 	add	fp, #4
10ac4     A7 1A 62 FC | 	wrlong	arg05, fp
10ac8     14 4E 85 F1 | 	sub	fp, #20
10acc     C0 AD BF FD | 	call	#_pop
10ad0     FF 16 02 F6 | 	mov	arg03, result3
10ad4     A7 FA 61 FC | 	wrlong	result1, fp
10ad8     04 4E 05 F1 | 	add	fp, #4
10adc     A7 FC 61 FC | 	wrlong	result2, fp
10ae0     04 4E 05 F1 | 	add	fp, #4
10ae4     A7 16 62 FC | 	wrlong	arg03, fp
10ae8     08 4E 85 F1 | 	sub	fp, #8
10aec     A7 12 02 F6 | 	mov	arg01, fp
10af0     80 AF BF FD | 	call	#_converttoint
10af4     FD 26 02 F6 | 	mov	local01, result1
10af8     0C 4E 05 F1 | 	add	fp, #12
10afc     A7 12 02 F6 | 	mov	arg01, fp
10b00     0C 4E 85 F1 | 	sub	fp, #12
10b04     6C AF BF FD | 	call	#_converttoint
10b08     FD 28 02 F6 | 	mov	local02, result1
10b0c     18 4E 05 F1 | 	add	fp, #24
10b10     A7 12 02 F6 | 	mov	arg01, fp
10b14     18 4E 85 F1 | 	sub	fp, #24
10b18     58 AF BF FD | 	call	#_converttoint
10b1c     FD 2A 02 F6 | 	mov	local03, result1
10b20     24 4E 05 F1 | 	add	fp, #36
10b24     A7 12 02 F6 | 	mov	arg01, fp
10b28     24 4E 85 F1 | 	sub	fp, #36
10b2c     44 AF BF FD | 	call	#_converttoint
10b30     FD 18 02 F6 | 	mov	arg04, result1
10b34     37 00 00 FF 
10b38     28 E4 05 F1 | 	add	objptr, ##28200
10b3c     F2 1A 02 FB | 	rdlong	arg05, objptr
10b40     37 00 00 FF 
10b44     28 E4 85 F1 | 	sub	objptr, ##28200
10b48     13 13 02 F6 | 	mov	arg01, local01
10b4c     14 15 02 F6 | 	mov	arg02, local02
10b50     15 17 02 F6 | 	mov	arg03, local03
10b54     38 F1 B0 FD | 	call	#_hg010b_spin2_frame
10b58     A7 F0 03 F6 | 	mov	ptra, fp
10b5c     B2 00 A0 FD | 	call	#popregs_
10b60                 | _do_frame_ret
10b60     2D 00 64 FD | 	ret
10b64                 | 
10b64                 | ' 
10b64                 | ' '-------------------- framebuf
10b64                 | ' 
10b64                 | ' sub do_framebuf
10b64                 | _do_framebuf
10b64     00 4A 05 F6 | 	mov	COUNT_, #0
10b68     A8 00 A0 FD | 	call	#pushregs_
10b6c     0C F0 07 F1 | 	add	ptra, #12
10b70     08 4E 05 F1 | 	add	fp, #8
10b74     A7 3A 68 FC | 	wrlong	#29, fp
10b78     F2 12 02 FB | 	rdlong	arg01, objptr
10b7c     08 4E 85 F1 | 	sub	fp, #8
10b80     A7 12 62 FC | 	wrlong	arg01, fp
10b84     A7 12 02 F6 | 	mov	arg01, fp
10b88     9C AD BF FD | 	call	#_push
10b8c     A7 F0 03 F6 | 	mov	ptra, fp
10b90     B2 00 A0 FD | 	call	#popregs_
10b94                 | _do_framebuf_ret
10b94     2D 00 64 FD | 	ret
10b98                 | 
10b98                 | ' '-------------------- fre
10b98                 | ' 
10b98                 | ' sub do_fre
10b98                 | _do_fre
10b98     01 4A 05 F6 | 	mov	COUNT_, #1
10b9c     A8 00 A0 FD | 	call	#pushregs_
10ba0     0C F0 07 F1 | 	add	ptra, #12
10ba4     51 00 00 FF 
10ba8     AC E5 05 F1 | 	add	objptr, ##41900
10bac     F2 12 02 FB | 	rdlong	arg01, objptr
10bb0     0E 00 00 FF 
10bb4     50 E5 85 F1 | 	sub	objptr, ##7504
10bb8     F2 26 02 FB | 	rdlong	local01, objptr
10bbc     13 13 82 F1 | 	sub	arg01, local01
10bc0     0E 00 00 FF 
10bc4     C0 E5 05 F1 | 	add	objptr, ##7616
10bc8     F2 12 62 FC | 	wrlong	arg01, objptr
10bcc     08 4E 05 F1 | 	add	fp, #8
10bd0     A7 3A 68 FC | 	wrlong	#29, fp
10bd4     08 4E 85 F1 | 	sub	fp, #8
10bd8     F2 26 02 FB | 	rdlong	local01, objptr
10bdc     52 00 00 FF 
10be0     1C E4 85 F1 | 	sub	objptr, ##42012
10be4     A7 26 62 FC | 	wrlong	local01, fp
10be8     A7 12 02 F6 | 	mov	arg01, fp
10bec     38 AD BF FD | 	call	#_push
10bf0     A7 F0 03 F6 | 	mov	ptra, fp
10bf4     B2 00 A0 FD | 	call	#popregs_
10bf8                 | _do_fre_ret
10bf8     2D 00 64 FD | 	ret
10bfc                 | 
10bfc                 | ' 
10bfc                 | ' '-------------------- get
10bfc                 | ' 
10bfc                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
10bfc                 | _do_get
10bfc     09 4A 05 F6 | 	mov	COUNT_, #9
10c00     A8 00 A0 FD | 	call	#pushregs_
10c04     40 F0 07 F1 | 	add	ptra, #64
10c08     4A 00 00 FF 
10c0c     80 E4 05 F1 | 	add	objptr, ##38016
10c10     F2 1A 02 FB | 	rdlong	arg05, objptr
10c14     0D 19 02 F6 | 	mov	arg04, arg05
10c18     01 18 66 F0 | 	shl	arg04, #1
10c1c     0D 19 02 F1 | 	add	arg04, arg05
10c20     02 18 66 F0 | 	shl	arg04, #2
10c24     03 00 00 FF 
10c28     04 E4 85 F1 | 	sub	objptr, ##1540
10c2c     F2 18 02 F1 | 	add	arg04, objptr
10c30     0C 1B 02 FB | 	rdlong	arg05, arg04
10c34     A7 1A 62 FC | 	wrlong	arg05, fp
10c38                 | ' 
10c38                 | ' numpar=compiledline(lineptr_e).result.uresult
10c38                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10c38     04 1A 0E F2 | 	cmp	arg05, #4 wz
10c3c     47 00 00 FF 
10c40     7C E4 85 F1 | 	sub	objptr, ##36476
10c44     48 00 90 5D |  if_ne	jmp	#LR__1410
10c48     44 AC BF FD | 	call	#_pop
10c4c     FF 1A 02 F6 | 	mov	arg05, result3
10c50     1C 4E 05 F1 | 	add	fp, #28
10c54     A7 FA 61 FC | 	wrlong	result1, fp
10c58     04 4E 05 F1 | 	add	fp, #4
10c5c     A7 FC 61 FC | 	wrlong	result2, fp
10c60     04 4E 05 F1 | 	add	fp, #4
10c64     A7 1A 62 FC | 	wrlong	arg05, fp
10c68     08 4E 85 F1 | 	sub	fp, #8
10c6c     A7 12 02 F6 | 	mov	arg01, fp
10c70     1C 4E 85 F1 | 	sub	fp, #28
10c74     FC AD BF FD | 	call	#_converttoint
10c78     52 00 00 FF 
10c7c     18 E4 05 F1 | 	add	objptr, ##42008
10c80     F2 FA 61 FC | 	wrlong	result1, objptr
10c84     52 00 00 FF 
10c88     18 E4 85 F1 | 	sub	objptr, ##42008
10c8c     18 00 90 FD | 	jmp	#LR__1411
10c90                 | LR__1410
10c90     52 00 00 FF 
10c94     18 E4 05 F1 | 	add	objptr, ##42008
10c98     FF FF FF FF 
10c9c     F2 FE 6B FC | 	wrlong	##-1, objptr
10ca0     52 00 00 FF 
10ca4     18 E4 85 F1 | 	sub	objptr, ##42008
10ca8                 | LR__1411
10ca8                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10ca8     A7 16 02 FB | 	rdlong	arg03, fp
10cac     03 16 56 F2 | 	cmps	arg03, #3 wc
10cb0     40 00 90 CD |  if_b	jmp	#LR__1412
10cb4     D8 AB BF FD | 	call	#_pop
10cb8     FF 16 02 F6 | 	mov	arg03, result3
10cbc     1C 4E 05 F1 | 	add	fp, #28
10cc0     A7 FA 61 FC | 	wrlong	result1, fp
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 FC 61 FC | 	wrlong	result2, fp
10ccc     04 4E 05 F1 | 	add	fp, #4
10cd0     A7 16 62 FC | 	wrlong	arg03, fp
10cd4     08 4E 85 F1 | 	sub	fp, #8
10cd8     A7 12 02 F6 | 	mov	arg01, fp
10cdc     1C 4E 85 F1 | 	sub	fp, #28
10ce0     90 AD BF FD | 	call	#_converttoint
10ce4     08 4E 05 F1 | 	add	fp, #8
10ce8     A7 FA 61 FC | 	wrlong	result1, fp
10cec     08 4E 85 F1 | 	sub	fp, #8
10cf0     0C 00 90 FD | 	jmp	#LR__1413
10cf4                 | LR__1412
10cf4     08 4E 05 F1 | 	add	fp, #8
10cf8     A7 02 68 FC | 	wrlong	#1, fp
10cfc     08 4E 85 F1 | 	sub	fp, #8
10d00                 | LR__1413
10d00                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
10d00     A7 16 02 FB | 	rdlong	arg03, fp
10d04     02 16 56 F2 | 	cmps	arg03, #2 wc
10d08     3C 00 90 CD |  if_b	jmp	#LR__1414
10d0c     80 AB BF FD | 	call	#_pop
10d10     FF 16 02 F6 | 	mov	arg03, result3
10d14     1C 4E 05 F1 | 	add	fp, #28
10d18     A7 FA 61 FC | 	wrlong	result1, fp
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 FC 61 FC | 	wrlong	result2, fp
10d24     04 4E 05 F1 | 	add	fp, #4
10d28     A7 16 62 FC | 	wrlong	arg03, fp
10d2c     08 4E 85 F1 | 	sub	fp, #8
10d30     A7 12 02 F6 | 	mov	arg01, fp
10d34     1C 4E 85 F1 | 	sub	fp, #28
10d38     38 AD BF FD | 	call	#_converttoint
10d3c     0C 4E 05 F1 | 	add	fp, #12
10d40     A7 FA 61 FC | 	wrlong	result1, fp
10d44     0C 4E 85 F1 | 	sub	fp, #12
10d48                 | LR__1414
10d48     44 AB BF FD | 	call	#_pop
10d4c     FF 16 02 F6 | 	mov	arg03, result3
10d50     1C 4E 05 F1 | 	add	fp, #28
10d54     A7 FA 61 FC | 	wrlong	result1, fp
10d58     04 4E 05 F1 | 	add	fp, #4
10d5c     A7 FC 61 FC | 	wrlong	result2, fp
10d60     04 4E 05 F1 | 	add	fp, #4
10d64     A7 16 62 FC | 	wrlong	arg03, fp
10d68     08 4E 85 F1 | 	sub	fp, #8
10d6c     A7 12 02 F6 | 	mov	arg01, fp
10d70     1C 4E 85 F1 | 	sub	fp, #28
10d74     FC AC BF FD | 	call	#_converttoint
10d78     04 4E 05 F1 | 	add	fp, #4
10d7c     A7 FA 61 FC | 	wrlong	result1, fp
10d80     10 4E 05 F1 | 	add	fp, #16
10d84     A7 16 02 FB | 	rdlong	arg03, fp
10d88     14 4E 85 F1 | 	sub	fp, #20
10d8c     02 16 66 F0 | 	shl	arg03, #2
10d90     50 00 00 FF 
10d94     C4 E4 05 F1 | 	add	objptr, ##41156
10d98     F2 26 02 F6 | 	mov	local01, objptr
10d9c     F2 16 02 F1 | 	add	arg03, objptr
10da0     0B 01 68 FC | 	wrlong	#0, arg03
10da4                 | ' t1=pop() : channel=converttoint(t1)
10da4                 | ' getres(j)=0
10da4                 | ' if pos>=0 then
10da4     01 00 00 FF 
10da8     54 E5 05 F1 | 	add	objptr, ##852
10dac     F2 28 02 FB | 	rdlong	local02, objptr
10db0     52 00 00 FF 
10db4     18 E4 85 F1 | 	sub	objptr, ##42008
10db8     00 28 56 F2 | 	cmps	local02, #0 wc
10dbc     F0 01 90 CD |  if_b	jmp	#LR__1421
10dc0                 | '   for i=0 to  amount/1024
10dc0     10 4E 05 F1 | 	add	fp, #16
10dc4     A7 00 68 FC | 	wrlong	#0, fp
10dc8     08 4E 85 F1 | 	sub	fp, #8
10dcc     A7 2A 02 FB | 	rdlong	local03, fp
10dd0     08 4E 85 F1 | 	sub	fp, #8
10dd4     15 2D 52 F6 | 	abs	local04, local03 wc
10dd8     0A 2C 46 F0 | 	shr	local04, #10
10ddc     16 2D 82 F6 | 	negc	local04, local04
10de0     01 2C 06 F1 | 	add	local04, #1
10de4                 | LR__1415
10de4     10 4E 05 F1 | 	add	fp, #16
10de8     A7 2A 02 FB | 	rdlong	local03, fp
10dec     10 4E 85 F1 | 	sub	fp, #16
10df0     16 2B 52 F2 | 	cmps	local03, local04 wc
10df4     9C 03 90 3D |  if_ae	jmp	#LR__1429
10df8                 | '     get #channel,pos+1,block(0),amount,r
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 12 02 FB | 	rdlong	arg01, fp
10e00     52 00 00 FF 
10e04     18 E4 05 F1 | 	add	objptr, ##42008
10e08     F2 14 02 FB | 	rdlong	arg02, objptr
10e0c     01 14 06 F1 | 	add	arg02, #1
10e10     03 00 00 FF 
10e14     64 E5 85 F1 | 	sub	objptr, ##1892
10e18     F2 16 02 F6 | 	mov	arg03, objptr
10e1c     4E 00 00 FF 
10e20     B4 E4 85 F1 | 	sub	objptr, ##40116
10e24     04 4E 05 F1 | 	add	fp, #4
10e28     A7 18 02 FB | 	rdlong	arg04, fp
10e2c     08 4E 85 F1 | 	sub	fp, #8
10e30     01 1A 06 F6 | 	mov	arg05, #1
10e34     4C 1C B1 FD | 	call	#__system___basic_get
10e38     18 4E 05 F1 | 	add	fp, #24
10e3c     A7 FA 61 FC | 	wrlong	result1, fp
10e40                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10e40     0C 4E 85 F1 | 	sub	fp, #12
10e44     A7 28 02 FB | 	rdlong	local02, fp
10e48     0C 4E 85 F1 | 	sub	fp, #12
10e4c     00 04 00 FF 
10e50     00 28 56 F2 | 	cmps	local02, ##524288 wc
10e54     7C 00 90 3D |  if_ae	jmp	#LR__1417
10e58     14 4E 05 F1 | 	add	fp, #20
10e5c     A7 00 68 FC | 	wrlong	#0, fp
10e60     04 4E 05 F1 | 	add	fp, #4
10e64     A7 2E 02 FB | 	rdlong	local05, fp
10e68     18 4E 85 F1 | 	sub	fp, #24
10e6c                 | LR__1416
10e6c     14 4E 05 F1 | 	add	fp, #20
10e70     A7 28 02 FB | 	rdlong	local02, fp
10e74     14 4E 85 F1 | 	sub	fp, #20
10e78     17 29 52 F2 | 	cmps	local02, local05 wc
10e7c     D8 00 90 3D |  if_ae	jmp	#LR__1420
10e80     0C 4E 05 F1 | 	add	fp, #12
10e84     A7 12 02 FB | 	rdlong	arg01, fp
10e88     04 4E 05 F1 | 	add	fp, #4
10e8c     A7 2A 02 FB | 	rdlong	local03, fp
10e90     0A 2A 66 F0 | 	shl	local03, #10
10e94     15 13 02 F1 | 	add	arg01, local03
10e98     04 4E 05 F1 | 	add	fp, #4
10e9c     A7 2A 02 FB | 	rdlong	local03, fp
10ea0     15 13 02 F1 | 	add	arg01, local03
10ea4     4E 00 00 FF 
10ea8     B4 E4 05 F1 | 	add	objptr, ##40116
10eac     F2 2A 02 F1 | 	add	local03, objptr
10eb0     15 15 C2 FA | 	rdbyte	arg02, local03
10eb4     09 15 42 FC | 	wrbyte	arg02, arg01
10eb8     4E 00 00 FF 
10ebc     B4 E4 85 F1 | 	sub	objptr, ##40116
10ec0     A7 2A 02 FB | 	rdlong	local03, fp
10ec4     01 2A 06 F1 | 	add	local03, #1
10ec8     A7 2A 62 FC | 	wrlong	local03, fp
10ecc     14 4E 85 F1 | 	sub	fp, #20
10ed0     98 FF 9F FD | 	jmp	#LR__1416
10ed4                 | LR__1417
10ed4     14 4E 05 F1 | 	add	fp, #20
10ed8     A7 00 68 FC | 	wrlong	#0, fp
10edc     04 4E 05 F1 | 	add	fp, #4
10ee0     A7 30 02 FB | 	rdlong	local06, fp
10ee4     18 4E 85 F1 | 	sub	fp, #24
10ee8                 | LR__1418
10ee8     14 4E 05 F1 | 	add	fp, #20
10eec     A7 28 02 FB | 	rdlong	local02, fp
10ef0     14 4E 85 F1 | 	sub	fp, #20
10ef4     18 29 52 F2 | 	cmps	local02, local06 wc
10ef8     5C 00 90 3D |  if_ae	jmp	#LR__1419
10efc     0C 4E 05 F1 | 	add	fp, #12
10f00     A7 12 02 FB | 	rdlong	arg01, fp
10f04     04 4E 05 F1 | 	add	fp, #4
10f08     A7 2E 02 FB | 	rdlong	local05, fp
10f0c     0A 2E 66 F0 | 	shl	local05, #10
10f10     17 13 02 F1 | 	add	arg01, local05
10f14     04 4E 05 F1 | 	add	fp, #4
10f18     A7 2E 02 FB | 	rdlong	local05, fp
10f1c     17 13 02 F1 | 	add	arg01, local05
10f20     14 4E 85 F1 | 	sub	fp, #20
10f24     4E 00 00 FF 
10f28     B4 E4 05 F1 | 	add	objptr, ##40116
10f2c     F2 2E 02 F1 | 	add	local05, objptr
10f30     17 15 C2 FA | 	rdbyte	arg02, local05
10f34     4E 00 00 FF 
10f38     B4 E4 85 F1 | 	sub	objptr, ##40116
10f3c     D0 D5 B0 FD | 	call	#_pspoke
10f40     14 4E 05 F1 | 	add	fp, #20
10f44     A7 2E 02 FB | 	rdlong	local05, fp
10f48     01 2E 06 F1 | 	add	local05, #1
10f4c     A7 2E 62 FC | 	wrlong	local05, fp
10f50     14 4E 85 F1 | 	sub	fp, #20
10f54     90 FF 9F FD | 	jmp	#LR__1418
10f58                 | LR__1419
10f58                 | LR__1420
10f58     14 4E 05 F1 | 	add	fp, #20
10f5c     A7 30 02 FB | 	rdlong	local06, fp
10f60     18 2B 02 F6 | 	mov	local03, local06
10f64     02 2A 66 F0 | 	shl	local03, #2
10f68     50 00 00 FF 
10f6c     C4 E4 05 F1 | 	add	objptr, ##41156
10f70     F2 2A 02 F1 | 	add	local03, objptr
10f74     02 30 66 F0 | 	shl	local06, #2
10f78     F2 30 02 F1 | 	add	local06, objptr
10f7c     18 31 02 FB | 	rdlong	local06, local06
10f80     04 4E 05 F1 | 	add	fp, #4
10f84     A7 2E 02 FB | 	rdlong	local05, fp
10f88     17 31 02 F1 | 	add	local06, local05
10f8c     15 31 62 FC | 	wrlong	local06, local03
10f90     08 4E 85 F1 | 	sub	fp, #8
10f94     A7 30 02 FB | 	rdlong	local06, fp
10f98     01 30 06 F1 | 	add	local06, #1
10f9c     A7 30 62 FC | 	wrlong	local06, fp
10fa0     10 4E 85 F1 | 	sub	fp, #16
10fa4     50 00 00 FF 
10fa8     C4 E4 85 F1 | 	sub	objptr, ##41156
10fac     34 FE 9F FD | 	jmp	#LR__1415
10fb0                 | LR__1421
10fb0                 | '   for i=0 to  amount/1024
10fb0     10 4E 05 F1 | 	add	fp, #16
10fb4     A7 00 68 FC | 	wrlong	#0, fp
10fb8     08 4E 85 F1 | 	sub	fp, #8
10fbc     A7 2A 02 FB | 	rdlong	local03, fp
10fc0     08 4E 85 F1 | 	sub	fp, #8
10fc4     15 33 52 F6 | 	abs	local07, local03 wc
10fc8     0A 32 46 F0 | 	shr	local07, #10
10fcc     19 33 82 F6 | 	negc	local07, local07
10fd0     01 32 06 F1 | 	add	local07, #1
10fd4                 | LR__1422
10fd4     10 4E 05 F1 | 	add	fp, #16
10fd8     A7 2A 02 FB | 	rdlong	local03, fp
10fdc     10 4E 85 F1 | 	sub	fp, #16
10fe0     19 2B 52 F2 | 	cmps	local03, local07 wc
10fe4     AC 01 90 3D |  if_ae	jmp	#LR__1428
10fe8                 | '     get #channel,,block(0),amount,r
10fe8     04 4E 05 F1 | 	add	fp, #4
10fec     A7 12 02 FB | 	rdlong	arg01, fp
10ff0     4E 00 00 FF 
10ff4     B4 E4 05 F1 | 	add	objptr, ##40116
10ff8     F2 16 02 F6 | 	mov	arg03, objptr
10ffc     4E 00 00 FF 
11000     B4 E4 85 F1 | 	sub	objptr, ##40116
11004     04 4E 05 F1 | 	add	fp, #4
11008     A7 18 02 FB | 	rdlong	arg04, fp
1100c     08 4E 85 F1 | 	sub	fp, #8
11010     00 14 06 F6 | 	mov	arg02, #0
11014     01 1A 06 F6 | 	mov	arg05, #1
11018     68 1A B1 FD | 	call	#__system___basic_get
1101c     18 4E 05 F1 | 	add	fp, #24
11020     A7 FA 61 FC | 	wrlong	result1, fp
11024                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
11024     0C 4E 85 F1 | 	sub	fp, #12
11028     A7 28 02 FB | 	rdlong	local02, fp
1102c     0C 4E 85 F1 | 	sub	fp, #12
11030     00 04 00 FF 
11034     00 28 56 F2 | 	cmps	local02, ##524288 wc
11038     7C 00 90 3D |  if_ae	jmp	#LR__1424
1103c     14 4E 05 F1 | 	add	fp, #20
11040     A7 00 68 FC | 	wrlong	#0, fp
11044     04 4E 05 F1 | 	add	fp, #4
11048     A7 34 02 FB | 	rdlong	local08, fp
1104c     18 4E 85 F1 | 	sub	fp, #24
11050                 | LR__1423
11050     14 4E 05 F1 | 	add	fp, #20
11054     A7 28 02 FB | 	rdlong	local02, fp
11058     14 4E 85 F1 | 	sub	fp, #20
1105c     1A 29 52 F2 | 	cmps	local02, local08 wc
11060     D8 00 90 3D |  if_ae	jmp	#LR__1427
11064     0C 4E 05 F1 | 	add	fp, #12
11068     A7 12 02 FB | 	rdlong	arg01, fp
1106c     04 4E 05 F1 | 	add	fp, #4
11070     A7 30 02 FB | 	rdlong	local06, fp
11074     0A 30 66 F0 | 	shl	local06, #10
11078     18 13 02 F1 | 	add	arg01, local06
1107c     04 4E 05 F1 | 	add	fp, #4
11080     A7 30 02 FB | 	rdlong	local06, fp
11084     18 13 02 F1 | 	add	arg01, local06
11088     4E 00 00 FF 
1108c     B4 E4 05 F1 | 	add	objptr, ##40116
11090     F2 30 02 F1 | 	add	local06, objptr
11094     18 15 C2 FA | 	rdbyte	arg02, local06
11098     09 15 42 FC | 	wrbyte	arg02, arg01
1109c     4E 00 00 FF 
110a0     B4 E4 85 F1 | 	sub	objptr, ##40116
110a4     A7 30 02 FB | 	rdlong	local06, fp
110a8     01 30 06 F1 | 	add	local06, #1
110ac     A7 30 62 FC | 	wrlong	local06, fp
110b0     14 4E 85 F1 | 	sub	fp, #20
110b4     98 FF 9F FD | 	jmp	#LR__1423
110b8                 | LR__1424
110b8     14 4E 05 F1 | 	add	fp, #20
110bc     A7 00 68 FC | 	wrlong	#0, fp
110c0     04 4E 05 F1 | 	add	fp, #4
110c4     A7 36 02 FB | 	rdlong	local09, fp
110c8     18 4E 85 F1 | 	sub	fp, #24
110cc                 | LR__1425
110cc     14 4E 05 F1 | 	add	fp, #20
110d0     A7 28 02 FB | 	rdlong	local02, fp
110d4     14 4E 85 F1 | 	sub	fp, #20
110d8     1B 29 52 F2 | 	cmps	local02, local09 wc
110dc     5C 00 90 3D |  if_ae	jmp	#LR__1426
110e0     0C 4E 05 F1 | 	add	fp, #12
110e4     A7 12 02 FB | 	rdlong	arg01, fp
110e8     04 4E 05 F1 | 	add	fp, #4
110ec     A7 34 02 FB | 	rdlong	local08, fp
110f0     0A 34 66 F0 | 	shl	local08, #10
110f4     1A 13 02 F1 | 	add	arg01, local08
110f8     04 4E 05 F1 | 	add	fp, #4
110fc     A7 34 02 FB | 	rdlong	local08, fp
11100     1A 13 02 F1 | 	add	arg01, local08
11104     14 4E 85 F1 | 	sub	fp, #20
11108     4E 00 00 FF 
1110c     B4 E4 05 F1 | 	add	objptr, ##40116
11110     F2 34 02 F1 | 	add	local08, objptr
11114     1A 15 C2 FA | 	rdbyte	arg02, local08
11118     4E 00 00 FF 
1111c     B4 E4 85 F1 | 	sub	objptr, ##40116
11120     EC D3 B0 FD | 	call	#_pspoke
11124     14 4E 05 F1 | 	add	fp, #20
11128     A7 34 02 FB | 	rdlong	local08, fp
1112c     01 34 06 F1 | 	add	local08, #1
11130     A7 34 62 FC | 	wrlong	local08, fp
11134     14 4E 85 F1 | 	sub	fp, #20
11138     90 FF 9F FD | 	jmp	#LR__1425
1113c                 | LR__1426
1113c                 | LR__1427
1113c     14 4E 05 F1 | 	add	fp, #20
11140     A7 36 02 FB | 	rdlong	local09, fp
11144     1B 31 02 F6 | 	mov	local06, local09
11148     02 30 66 F0 | 	shl	local06, #2
1114c     50 00 00 FF 
11150     C4 E4 05 F1 | 	add	objptr, ##41156
11154     F2 30 02 F1 | 	add	local06, objptr
11158     02 36 66 F0 | 	shl	local09, #2
1115c     F2 36 02 F1 | 	add	local09, objptr
11160     1B 37 02 FB | 	rdlong	local09, local09
11164     04 4E 05 F1 | 	add	fp, #4
11168     A7 34 02 FB | 	rdlong	local08, fp
1116c     1A 37 02 F1 | 	add	local09, local08
11170     18 37 62 FC | 	wrlong	local09, local06
11174     08 4E 85 F1 | 	sub	fp, #8
11178     A7 36 02 FB | 	rdlong	local09, fp
1117c     01 36 06 F1 | 	add	local09, #1
11180     A7 36 62 FC | 	wrlong	local09, fp
11184     10 4E 85 F1 | 	sub	fp, #16
11188     50 00 00 FF 
1118c     C4 E4 85 F1 | 	sub	objptr, ##41156
11190     40 FE 9F FD | 	jmp	#LR__1422
11194                 | LR__1428
11194                 | LR__1429
11194     A7 F0 03 F6 | 	mov	ptra, fp
11198     B2 00 A0 FD | 	call	#popregs_
1119c                 | _do_get_ret
1119c     2D 00 64 FD | 	ret
111a0                 | 
111a0                 | ' 
111a0                 | ' '-------------------- getenvsustain
111a0                 | ' 
111a0                 | ' sub do_getenvsustain
111a0                 | _do_getenvsustain
111a0     01 4A 05 F6 | 	mov	COUNT_, #1
111a4     A8 00 A0 FD | 	call	#pushregs_
111a8     10 F0 07 F1 | 	add	ptra, #16
111ac     4A 00 00 FF 
111b0     80 E4 05 F1 | 	add	objptr, ##38016
111b4     F2 26 02 FB | 	rdlong	local01, objptr
111b8     13 17 02 F6 | 	mov	arg03, local01
111bc     01 16 66 F0 | 	shl	arg03, #1
111c0     13 17 02 F1 | 	add	arg03, local01
111c4     02 16 66 F0 | 	shl	arg03, #2
111c8     03 00 00 FF 
111cc     04 E4 85 F1 | 	sub	objptr, ##1540
111d0     F2 16 02 F1 | 	add	arg03, objptr
111d4     0B 17 02 FB | 	rdlong	arg03, arg03
111d8     0C 4E 05 F1 | 	add	fp, #12
111dc     A7 16 62 FC | 	wrlong	arg03, fp
111e0                 | ' 
111e0                 | ' numpar=compiledline(lineptr_e).result.uresult
111e0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
111e0     0C 4E 85 F1 | 	sub	fp, #12
111e4     02 16 16 F2 | 	cmp	arg03, #2 wc
111e8     47 00 00 FF 
111ec     7C E4 85 F1 | 	sub	objptr, ##36476
111f0     0C 4E 05 C1 |  if_b	add	fp, #12
111f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
111f8     0C 4E 85 C1 |  if_b	sub	fp, #12
111fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1430
11200     00 12 06 F6 | 	mov	arg01, #0
11204     38 67 B1 FD | 	call	#__system___getiolock_0574
11208     FD 12 02 F6 | 	mov	arg01, result1
1120c     04 0A B1 FD | 	call	#__system___lockmem
11210     90 01 00 FF 
11214     23 14 06 F6 | 	mov	arg02, ##@LR__5597
11218     00 12 06 F6 | 	mov	arg01, #0
1121c     00 16 06 F6 | 	mov	arg03, #0
11220     E4 16 B1 FD | 	call	#__system___basic_print_string
11224     00 12 06 F6 | 	mov	arg01, #0
11228     14 67 B1 FD | 	call	#__system___getiolock_0574
1122c     FD 00 68 FC | 	wrlong	#0, result1
11230     27 12 06 F6 | 	mov	arg01, #39
11234     00 14 06 F6 | 	mov	arg02, #0
11238     B8 D0 B0 FD | 	call	#_printerror
1123c     64 00 90 FD | 	jmp	#LR__1431
11240                 | LR__1430
11240     4C A6 BF FD | 	call	#_pop
11244     FD 26 02 F6 | 	mov	local01, result1
11248     FE 16 02 F6 | 	mov	arg03, result2
1124c     A7 26 62 FC | 	wrlong	local01, fp
11250     04 4E 05 F1 | 	add	fp, #4
11254     A7 16 62 FC | 	wrlong	arg03, fp
11258     04 4E 05 F1 | 	add	fp, #4
1125c     A7 FE 61 FC | 	wrlong	result3, fp
11260     08 4E 85 F1 | 	sub	fp, #8
11264     A7 12 02 F6 | 	mov	arg01, fp
11268     08 A8 BF FD | 	call	#_converttoint
1126c     FD 26 02 F6 | 	mov	local01, result1
11270     01 26 66 F0 | 	shl	local01, #1
11274     51 00 00 FF 
11278     C8 E5 05 F1 | 	add	objptr, ##41928
1127c     F2 26 02 F1 | 	add	local01, objptr
11280     13 27 E2 FA | 	rdword	local01, local01
11284     A7 26 62 FC | 	wrlong	local01, fp
11288     08 4E 05 F1 | 	add	fp, #8
1128c     A7 38 68 FC | 	wrlong	#28, fp
11290     08 4E 85 F1 | 	sub	fp, #8
11294     A7 12 02 F6 | 	mov	arg01, fp
11298     51 00 00 FF 
1129c     C8 E5 85 F1 | 	sub	objptr, ##41928
112a0     84 A6 BF FD | 	call	#_push
112a4                 | LR__1431
112a4     A7 F0 03 F6 | 	mov	ptra, fp
112a8     B2 00 A0 FD | 	call	#popregs_
112ac                 | _do_getenvsustain_ret
112ac     2D 00 64 FD | 	ret
112b0                 | 
112b0                 | ' 
112b0                 | ' '-------------------- getnotevalue
112b0                 | ' 
112b0                 | ' sub do_getnotevalue
112b0                 | _do_getnotevalue
112b0     01 4A 05 F6 | 	mov	COUNT_, #1
112b4     A8 00 A0 FD | 	call	#pushregs_
112b8     1C F0 07 F1 | 	add	ptra, #28
112bc     D0 A5 BF FD | 	call	#_pop
112c0     FF 14 02 F6 | 	mov	arg02, result3
112c4     10 4E 05 F1 | 	add	fp, #16
112c8     A7 FA 61 FC | 	wrlong	result1, fp
112cc     04 4E 05 F1 | 	add	fp, #4
112d0     A7 FC 61 FC | 	wrlong	result2, fp
112d4     04 4E 05 F1 | 	add	fp, #4
112d8     A7 14 62 FC | 	wrlong	arg02, fp
112dc     08 4E 85 F1 | 	sub	fp, #8
112e0     A7 12 02 F6 | 	mov	arg01, fp
112e4     10 4E 85 F1 | 	sub	fp, #16
112e8     88 A7 BF FD | 	call	#_converttoint
112ec     FD 14 52 F6 | 	abs	arg02, result1 wc
112f0     0C 14 16 FD | 	qdiv	arg02, #12
112f4     0C 4E 05 F1 | 	add	fp, #12
112f8     A7 FA 61 FC | 	wrlong	result1, fp
112fc     14 00 00 FF 
11300     D8 E4 05 F1 | 	add	objptr, ##10456
11304     08 4E 85 F1 | 	sub	fp, #8
11308     19 14 62 FD | 	getqy	arg02
1130c     0A 15 82 F6 | 	negc	arg02, arg02
11310     02 14 66 F0 | 	shl	arg02, #2
11314     F2 14 02 F1 | 	add	arg02, objptr
11318     0A 15 02 FB | 	rdlong	arg02, arg02
1131c     A7 14 62 FC | 	wrlong	arg02, fp
11320     08 4E 05 F1 | 	add	fp, #8
11324     A7 14 02 FB | 	rdlong	arg02, fp
11328     0A 15 52 F6 | 	abs	arg02, arg02 wc
1132c     0C 14 16 FD | 	qdiv	arg02, #12
11330     0C 4E 85 F1 | 	sub	fp, #12
11334     14 00 00 FF 
11338     D8 E4 85 F1 | 	sub	objptr, ##10456
1133c     18 14 62 FD | 	getqx	arg02
11340     0A 13 82 F6 | 	negc	arg01, arg02
11344     09 13 52 F6 | 	abs	arg01, arg01 wc
11348     1F 26 C6 C9 |  if_b	decod	local01, #31
1134c     00 26 06 36 |  if_ae	mov	local01, #0
11350     78 32 B1 FD | 	call	#__system___float_fromuns
11354     13 FB 61 F5 | 	xor	result1, local01
11358     08 4E 05 F1 | 	add	fp, #8
1135c     A7 FA 61 FC | 	wrlong	result1, fp
11360     FD 14 02 F6 | 	mov	arg02, result1
11364     08 4E 85 F1 | 	sub	fp, #8
11368     1E 12 C6 F9 | 	decod	arg01, #30
1136c     68 45 B1 FD | 	call	#__system____builtin_powf
11370     FD 12 02 F6 | 	mov	arg01, result1
11374     04 4E 05 F1 | 	add	fp, #4
11378     A7 14 02 FB | 	rdlong	arg02, fp
1137c     04 4E 85 F1 | 	sub	fp, #4
11380     4C 36 B1 FD | 	call	#__system___float_mul
11384     A7 FA 61 FC | 	wrlong	result1, fp
11388     10 4E 05 F1 | 	add	fp, #16
1138c     A7 FA 61 FC | 	wrlong	result1, fp
11390     08 4E 05 F1 | 	add	fp, #8
11394     A7 3C 68 FC | 	wrlong	#30, fp
11398     08 4E 85 F1 | 	sub	fp, #8
1139c     A7 12 02 F6 | 	mov	arg01, fp
113a0     10 4E 85 F1 | 	sub	fp, #16
113a4     80 A5 BF FD | 	call	#_push
113a8     A7 F0 03 F6 | 	mov	ptra, fp
113ac     B2 00 A0 FD | 	call	#popregs_
113b0                 | _do_getnotevalue_ret
113b0     2D 00 64 FD | 	ret
113b4                 | 
113b4                 | ' 
113b4                 | ' '-------------------- getpixel
113b4                 | ' 
113b4                 | ' sub do_getpixel
113b4                 | _do_getpixel
113b4     00 4A 05 F6 | 	mov	COUNT_, #0
113b8     A8 00 A0 FD | 	call	#pushregs_
113bc     24 F0 07 F1 | 	add	ptra, #36
113c0     4A 00 00 FF 
113c4     80 E4 05 F1 | 	add	objptr, ##38016
113c8     F2 16 02 FB | 	rdlong	arg03, objptr
113cc     0B 15 02 F6 | 	mov	arg02, arg03
113d0     01 14 66 F0 | 	shl	arg02, #1
113d4     0B 15 02 F1 | 	add	arg02, arg03
113d8     02 14 66 F0 | 	shl	arg02, #2
113dc     03 00 00 FF 
113e0     04 E4 85 F1 | 	sub	objptr, ##1540
113e4     F2 14 02 F1 | 	add	arg02, objptr
113e8     0A 17 02 FB | 	rdlong	arg03, arg02
113ec     18 4E 05 F1 | 	add	fp, #24
113f0     A7 16 62 FC | 	wrlong	arg03, fp
113f4                 | ' 
113f4                 | ' numpar=compiledline(lineptr_e).result.uresult
113f4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
113f4     18 4E 85 F1 | 	sub	fp, #24
113f8     02 16 0E F2 | 	cmp	arg03, #2 wz
113fc     47 00 00 FF 
11400     7C E4 85 F1 | 	sub	objptr, ##36476
11404     40 00 90 AD |  if_e	jmp	#LR__1440
11408     00 12 06 F6 | 	mov	arg01, #0
1140c     30 65 B1 FD | 	call	#__system___getiolock_0574
11410     FD 12 02 F6 | 	mov	arg01, result1
11414     FC 07 B1 FD | 	call	#__system___lockmem
11418     90 01 00 FF 
1141c     33 14 06 F6 | 	mov	arg02, ##@LR__5598
11420     00 12 06 F6 | 	mov	arg01, #0
11424     00 16 06 F6 | 	mov	arg03, #0
11428     DC 14 B1 FD | 	call	#__system___basic_print_string
1142c     00 12 06 F6 | 	mov	arg01, #0
11430     0C 65 B1 FD | 	call	#__system___getiolock_0574
11434     FD 00 68 FC | 	wrlong	#0, result1
11438     27 12 06 F6 | 	mov	arg01, #39
1143c     00 14 06 F6 | 	mov	arg02, #0
11440     B0 CE B0 FD | 	call	#_printerror
11444     B4 00 90 FD | 	jmp	#LR__1441
11448                 | LR__1440
11448     44 A4 BF FD | 	call	#_pop
1144c     FD 16 02 F6 | 	mov	arg03, result1
11450     FE 14 02 F6 | 	mov	arg02, result2
11454     FF 12 02 F6 | 	mov	arg01, result3
11458     0C 4E 05 F1 | 	add	fp, #12
1145c     A7 16 62 FC | 	wrlong	arg03, fp
11460     04 4E 05 F1 | 	add	fp, #4
11464     A7 14 62 FC | 	wrlong	arg02, fp
11468     04 4E 05 F1 | 	add	fp, #4
1146c     A7 12 62 FC | 	wrlong	arg01, fp
11470     14 4E 85 F1 | 	sub	fp, #20
11474     18 A4 BF FD | 	call	#_pop
11478     FF 16 02 F6 | 	mov	arg03, result3
1147c     A7 FA 61 FC | 	wrlong	result1, fp
11480     04 4E 05 F1 | 	add	fp, #4
11484     A7 FC 61 FC | 	wrlong	result2, fp
11488     04 4E 05 F1 | 	add	fp, #4
1148c     A7 16 62 FC | 	wrlong	arg03, fp
11490     08 4E 85 F1 | 	sub	fp, #8
11494     A7 12 02 F6 | 	mov	arg01, fp
11498     D8 A5 BF FD | 	call	#_converttoint
1149c     1C 4E 05 F1 | 	add	fp, #28
114a0     A7 FA 61 FC | 	wrlong	result1, fp
114a4     10 4E 85 F1 | 	sub	fp, #16
114a8     A7 12 02 F6 | 	mov	arg01, fp
114ac     0C 4E 85 F1 | 	sub	fp, #12
114b0     C0 A5 BF FD | 	call	#_converttoint
114b4     FD 16 02 F6 | 	mov	arg03, result1
114b8     20 4E 05 F1 | 	add	fp, #32
114bc     A7 16 62 FC | 	wrlong	arg03, fp
114c0     F2 12 02 FB | 	rdlong	arg01, objptr
114c4     04 4E 85 F1 | 	sub	fp, #4
114c8     A7 FE 01 FB | 	rdlong	result3, fp
114cc     FF 12 02 F1 | 	add	arg01, result3
114d0     1C 4E 85 F1 | 	sub	fp, #28
114d4     0A 16 66 F0 | 	shl	arg03, #10
114d8     0B 13 02 F1 | 	add	arg01, arg03
114dc     78 D0 B0 FD | 	call	#_pspeek
114e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
114e4     A7 FA 61 FC | 	wrlong	result1, fp
114e8     08 4E 05 F1 | 	add	fp, #8
114ec     A7 3A 68 FC | 	wrlong	#29, fp
114f0     08 4E 85 F1 | 	sub	fp, #8
114f4     A7 12 02 F6 | 	mov	arg01, fp
114f8     2C A4 BF FD | 	call	#_push
114fc                 | LR__1441
114fc     A7 F0 03 F6 | 	mov	ptra, fp
11500     B2 00 A0 FD | 	call	#popregs_
11504                 | _do_getpixel_ret
11504     2D 00 64 FD | 	ret
11508                 | 
11508                 | ' 
11508                 | ' '-------------------- gettime
11508                 | ' 
11508                 | ' sub do_gettime
11508                 | _do_gettime
11508     02 4A 05 F6 | 	mov	COUNT_, #2
1150c     A8 00 A0 FD | 	call	#pushregs_
11510     14 F0 07 F1 | 	add	ptra, #20
11514                 | ' 
11514                 | ' const asm 
11514     1A 26 72 FD | 	getct	local01 wc
11518     1A 28 62 FD | 	getct	local02
1151c                 | ' return hi1, lo1
1151c     14 FD 01 F6 | 	mov	result2, local02
11520     A7 26 62 FC | 	wrlong	local01, fp
11524     04 4E 05 F1 | 	add	fp, #4
11528     A7 FC 61 FC | 	wrlong	result2, fp
1152c     0C 4E 05 F1 | 	add	fp, #12
11530     A7 3A 68 FC | 	wrlong	#29, fp
11534     0C 4E 85 F1 | 	sub	fp, #12
11538     A7 12 02 FB | 	rdlong	arg01, fp
1153c     04 4E 05 F1 | 	add	fp, #4
11540     A7 12 62 FC | 	wrlong	arg01, fp
11544     08 4E 85 F1 | 	sub	fp, #8
11548     A7 12 02 FB | 	rdlong	arg01, fp
1154c     0C 4E 05 F1 | 	add	fp, #12
11550     A7 12 62 FC | 	wrlong	arg01, fp
11554     04 4E 85 F1 | 	sub	fp, #4
11558     A7 12 02 F6 | 	mov	arg01, fp
1155c     08 4E 85 F1 | 	sub	fp, #8
11560     C4 A3 BF FD | 	call	#_push
11564     A7 F0 03 F6 | 	mov	ptra, fp
11568     B2 00 A0 FD | 	call	#popregs_
1156c                 | _do_gettime_ret
1156c     2D 00 64 FD | 	ret
11570                 | 
11570                 | ' 
11570                 | ' '-------------------- gosub
11570                 | ' 
11570                 | ' sub do_gosub()
11570                 | _do_gosub
11570     50 00 00 FF 
11574     0C E5 05 F1 | 	add	objptr, ##41228
11578     F2 00 02 FB | 	rdlong	_var01, objptr
1157c     01 00 06 F1 | 	add	_var01, #1
11580     F2 00 62 FC | 	wrlong	_var01, objptr
11584                 | ' gosubtop+=1
11584                 | ' if compiledline(lineptr_e+1).result_type=token_end then
11584     06 00 00 FF 
11588     8C E4 85 F1 | 	sub	objptr, ##3212
1158c     F2 00 02 FB | 	rdlong	_var01, objptr
11590     01 00 06 F1 | 	add	_var01, #1
11594     00 03 02 F6 | 	mov	_var02, _var01
11598     01 02 66 F0 | 	shl	_var02, #1
1159c     00 03 02 F1 | 	add	_var02, _var01
115a0     02 02 66 F0 | 	shl	_var02, #2
115a4     03 00 00 FF 
115a8     04 E4 85 F1 | 	sub	objptr, ##1540
115ac     F2 02 02 F1 | 	add	_var02, objptr
115b0     08 02 06 F1 | 	add	_var02, #8
115b4     01 03 02 FB | 	rdlong	_var02, _var02
115b8     FE 03 0E F2 | 	cmp	_var02, #510 wz
115bc     47 00 00 FF 
115c0     7C E4 85 F1 | 	sub	objptr, ##36476
115c4     58 00 90 5D |  if_ne	jmp	#LR__1450
115c8     50 00 00 FF 
115cc     0C E5 05 F1 | 	add	objptr, ##41228
115d0     F2 02 02 FB | 	rdlong	_var02, objptr
115d4     03 02 66 F0 | 	shl	_var02, #3
115d8     03 00 00 FF 
115dc     60 E5 85 F1 | 	sub	objptr, ##1888
115e0     F2 02 02 F1 | 	add	_var02, objptr
115e4     03 00 00 FF 
115e8     0C E5 05 F1 | 	add	objptr, ##1804
115ec     F2 00 02 FB | 	rdlong	_var01, objptr
115f0     01 01 62 FC | 	wrlong	_var01, _var02
115f4     54 E4 05 F1 | 	add	objptr, #84
115f8     F2 02 02 FB | 	rdlong	_var02, objptr
115fc     03 02 66 F0 | 	shl	_var02, #3
11600     03 00 00 FF 
11604     60 E5 85 F1 | 	sub	objptr, ##1888
11608     F2 02 02 F1 | 	add	_var02, objptr
1160c     04 02 06 F1 | 	add	_var02, #4
11610     01 01 68 FC | 	wrlong	#0, _var02
11614     4C 00 00 FF 
11618     AC E5 85 F1 | 	sub	objptr, ##39340
1161c     64 00 90 FD | 	jmp	#LR__1451
11620                 | LR__1450
11620     50 00 00 FF 
11624     0C E5 05 F1 | 	add	objptr, ##41228
11628     F2 02 02 FB | 	rdlong	_var02, objptr
1162c     03 02 66 F0 | 	shl	_var02, #3
11630     03 00 00 FF 
11634     60 E5 85 F1 | 	sub	objptr, ##1888
11638     F2 02 02 F1 | 	add	_var02, objptr
1163c     03 00 00 FF 
11640     14 E5 05 F1 | 	add	objptr, ##1812
11644     F2 00 02 FB | 	rdlong	_var01, objptr
11648     01 01 62 FC | 	wrlong	_var01, _var02
1164c     4C E4 05 F1 | 	add	objptr, #76
11650     F2 02 02 FB | 	rdlong	_var02, objptr
11654     03 02 66 F0 | 	shl	_var02, #3
11658     03 00 00 FF 
1165c     60 E5 85 F1 | 	sub	objptr, ##1888
11660     F2 02 02 F1 | 	add	_var02, objptr
11664     02 00 00 FF 
11668     2C E5 85 F1 | 	sub	objptr, ##1324
1166c     F2 00 02 FB | 	rdlong	_var01, objptr
11670     4A 00 00 FF 
11674     80 E4 85 F1 | 	sub	objptr, ##38016
11678     02 00 06 F1 | 	add	_var01, #2
1167c     04 02 06 F1 | 	add	_var02, #4
11680     01 01 62 FC | 	wrlong	_var01, _var02
11684                 | LR__1451
11684                 | _do_gosub_ret
11684     2D 00 64 FD | 	ret
11688                 | 
11688                 | ' 
11688                 | ' '--------------------- goto
11688                 | ' 
11688                 | ' '------- fast goto
11688                 | ' 
11688                 | ' sub do_fast_goto
11688                 | _do_fast_goto
11688     02 4A 05 F6 | 	mov	COUNT_, #2
1168c     A8 00 A0 FD | 	call	#pushregs_
11690                 | _do_fast_goto_enter
11690     4A 00 00 FF 
11694     80 E4 05 F1 | 	add	objptr, ##38016
11698     F2 12 02 FB | 	rdlong	arg01, objptr
1169c     09 27 02 F6 | 	mov	local01, arg01
116a0     01 26 66 F0 | 	shl	local01, #1
116a4     09 27 02 F1 | 	add	local01, arg01
116a8     02 26 66 F0 | 	shl	local01, #2
116ac     03 00 00 FF 
116b0     04 E4 85 F1 | 	sub	objptr, ##1540
116b4     F2 26 02 F1 | 	add	local01, objptr
116b8     13 29 02 FB | 	rdlong	local02, local01
116bc     14 13 02 F6 | 	mov	arg01, local02
116c0     47 00 00 FF 
116c4     7C E4 85 F1 | 	sub	objptr, ##36476
116c8     E4 CE B0 FD | 	call	#_pslpeek
116cc     FD 12 02 F6 | 	mov	arg01, result1
116d0                 | ' 
116d0                 | ' testptr=compiledline(lineptr_e).result.uresult
116d0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
116d0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
116d0     4A 00 00 FF 
116d4     80 E4 05 F1 | 	add	objptr, ##38016
116d8     F2 FA 01 FB | 	rdlong	result1, objptr
116dc     FD 26 02 F6 | 	mov	local01, result1
116e0     01 26 66 F0 | 	shl	local01, #1
116e4     FD 26 02 F1 | 	add	local01, result1
116e8     02 26 66 F0 | 	shl	local01, #2
116ec     03 00 00 FF 
116f0     04 E4 85 F1 | 	sub	objptr, ##1540
116f4     F2 26 02 F1 | 	add	local01, objptr
116f8     04 26 06 F1 | 	add	local01, #4
116fc     13 27 02 FB | 	rdlong	local01, local01
11700     13 13 0A F2 | 	cmp	arg01, local01 wz
11704     47 00 00 FF 
11708     7C E4 85 F1 | 	sub	objptr, ##36476
1170c     58 00 90 5D |  if_ne	jmp	#LR__1460
11710     50 00 00 FF 
11714     B8 E4 05 F1 | 	add	objptr, ##41144
11718     F2 28 62 FC | 	wrlong	local02, objptr
1171c     06 00 00 FF 
11720     3C E4 85 F1 | 	sub	objptr, ##3132
11724     F2 28 02 FB | 	rdlong	local02, objptr
11728     01 28 86 F1 | 	sub	local02, #1
1172c     04 E4 05 F1 | 	add	objptr, #4
11730     F2 28 62 FC | 	wrlong	local02, objptr
11734                 | '   runptr=testptr
11734                 | '   lineptr_e=lineptr-1
11734                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
11734     06 00 00 FF 
11738     84 E4 05 F1 | 	add	objptr, ##3204
1173c     F2 28 02 FB | 	rdlong	local02, objptr
11740     50 00 00 FF 
11744     04 E5 85 F1 | 	sub	objptr, ##41220
11748     FF FF 3F FF 
1174c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
11750     50 00 00 AF 
11754     04 E5 05 A1 |  if_e	add	objptr, ##41220
11758     F2 00 68 AC |  if_e	wrlong	#0, objptr
1175c     50 00 00 AF 
11760     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11764     04 00 90 FD | 	jmp	#LR__1461
11768                 | LR__1460
11768     0C 00 B0 FD | 	call	#_do_find_goto
1176c                 | LR__1461
1176c     A7 F0 03 F6 | 	mov	ptra, fp
11770     B2 00 A0 FD | 	call	#popregs_
11774                 | _do_fast_goto_ret
11774     2D 00 64 FD | 	ret
11778                 | 
11778                 | ' 
11778                 | ' '------- find goto  
11778                 | ' 
11778                 | ' sub do_find_goto
11778                 | _do_find_goto
11778     03 4A 05 F6 | 	mov	COUNT_, #3
1177c     A8 00 A0 FD | 	call	#pushregs_
11780     24 F0 07 F1 | 	add	ptra, #36
11784                 | _do_find_goto_enter
11784     4A 00 00 FF 
11788     80 E4 05 F1 | 	add	objptr, ##38016
1178c     F2 26 02 FB | 	rdlong	local01, objptr
11790     13 29 02 F6 | 	mov	local02, local01
11794     01 28 66 F0 | 	shl	local02, #1
11798     13 29 02 F1 | 	add	local02, local01
1179c     02 28 66 F0 | 	shl	local02, #2
117a0     03 00 00 FF 
117a4     04 E4 85 F1 | 	sub	objptr, ##1540
117a8     F2 28 02 F1 | 	add	local02, objptr
117ac     04 28 06 F1 | 	add	local02, #4
117b0     14 29 02 FB | 	rdlong	local02, local02
117b4     A7 28 62 FC | 	wrlong	local02, fp
117b8     03 00 00 FF 
117bc     0C E4 05 F1 | 	add	objptr, ##1548
117c0     F2 2A 02 FB | 	rdlong	local03, objptr
117c4     4A 00 00 FF 
117c8     88 E4 85 F1 | 	sub	objptr, ##38024
117cc     04 4E 05 F1 | 	add	fp, #4
117d0     A7 2A 62 FC | 	wrlong	local03, fp
117d4     04 4E 85 F1 | 	sub	fp, #4
117d8                 | ' 
117d8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
117d8                 | ' gotoptr=programstart
117d8                 | ' do
117d8                 | LR__1470
117d8     0C 4E 05 F1 | 	add	fp, #12
117dc     A7 12 02 F6 | 	mov	arg01, fp
117e0     08 4E 85 F1 | 	sub	fp, #8
117e4     A7 14 02 FB | 	rdlong	arg02, fp
117e8     04 4E 85 F1 | 	sub	fp, #4
117ec     18 16 06 F6 | 	mov	arg03, #24
117f0     0B 00 00 FF 
117f4     CC E4 05 F1 | 	add	objptr, ##5836
117f8     D8 F7 B0 FD | 	call	#_psram_spin2_read1
117fc     0B 00 00 FF 
11800     CC E4 85 F1 | 	sub	objptr, ##5836
11804                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11804                 | '   if gotoheader(0)<>$FFFFFFFF then
11804     0C 4E 05 F1 | 	add	fp, #12
11808     A7 2A 02 FB | 	rdlong	local03, fp
1180c     0C 4E 85 F1 | 	sub	fp, #12
11810     FF FF 7F FF 
11814     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
11818     24 00 90 AD |  if_e	jmp	#LR__1471
1181c     04 4E 05 F1 | 	add	fp, #4
11820     A7 2A 02 FB | 	rdlong	local03, fp
11824     04 4E 05 F1 | 	add	fp, #4
11828     A7 2A 62 FC | 	wrlong	local03, fp
1182c     18 4E 05 F1 | 	add	fp, #24
11830     A7 2A 02 FB | 	rdlong	local03, fp
11834     1C 4E 85 F1 | 	sub	fp, #28
11838     A7 2A 62 FC | 	wrlong	local03, fp
1183c     04 4E 85 F1 | 	sub	fp, #4
11840                 | LR__1471
11840     20 4E 05 F1 | 	add	fp, #32
11844     A7 2A 02 FB | 	rdlong	local03, fp
11848     20 4E 85 F1 | 	sub	fp, #32
1184c     FF FF 3F FF 
11850     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
11854     0C 4E 05 51 |  if_ne	add	fp, #12
11858     A7 26 02 5B |  if_ne	rdlong	local01, fp
1185c     0C 4E 85 51 |  if_ne	sub	fp, #12
11860     FF FF 7F 5F 
11864     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
11868     18 00 90 AD |  if_e	jmp	#LR__1472
1186c     0C 4E 05 F1 | 	add	fp, #12
11870     A7 2A 02 FB | 	rdlong	local03, fp
11874     0C 4E 85 F1 | 	sub	fp, #12
11878     A7 28 02 FB | 	rdlong	local02, fp
1187c     14 2B 0A F2 | 	cmp	local03, local02 wz
11880     54 FF 9F 5D |  if_ne	jmp	#LR__1470
11884                 | LR__1472
11884                 | ' 
11884                 | ' if gotoheader(0)=gotoline then
11884     0C 4E 05 F1 | 	add	fp, #12
11888     A7 2A 02 FB | 	rdlong	local03, fp
1188c     0C 4E 85 F1 | 	sub	fp, #12
11890     A7 26 02 FB | 	rdlong	local01, fp
11894     13 2B 0A F2 | 	cmp	local03, local01 wz
11898     D8 00 90 5D |  if_ne	jmp	#LR__1473
1189c     4A 00 00 FF 
118a0     80 E4 05 F1 | 	add	objptr, ##38016
118a4     F2 26 02 FB | 	rdlong	local01, objptr
118a8     13 29 02 F6 | 	mov	local02, local01
118ac     01 28 66 F0 | 	shl	local02, #1
118b0     13 29 02 F1 | 	add	local02, local01
118b4     02 28 66 F0 | 	shl	local02, #2
118b8     03 00 00 FF 
118bc     04 E4 85 F1 | 	sub	objptr, ##1540
118c0     F2 28 02 F1 | 	add	local02, objptr
118c4     08 4E 05 F1 | 	add	fp, #8
118c8     A7 2A 02 FB | 	rdlong	local03, fp
118cc     14 2B 62 FC | 	wrlong	local03, local02
118d0     03 00 00 FF 
118d4     04 E4 05 F1 | 	add	objptr, ##1540
118d8     F2 26 02 FB | 	rdlong	local01, objptr
118dc     13 29 02 F6 | 	mov	local02, local01
118e0     01 28 66 F0 | 	shl	local02, #1
118e4     13 29 02 F1 | 	add	local02, local01
118e8     02 28 66 F0 | 	shl	local02, #2
118ec     03 00 00 FF 
118f0     04 E4 85 F1 | 	sub	objptr, ##1540
118f4     F2 28 02 F1 | 	add	local02, objptr
118f8     08 28 06 F1 | 	add	local02, #8
118fc     14 9D 68 FC | 	wrlong	#78, local02
11900     03 00 00 FF 
11904     04 E4 05 F1 | 	add	objptr, ##1540
11908     F2 28 02 FB | 	rdlong	local02, objptr
1190c     14 13 02 F6 | 	mov	arg01, local02
11910     01 12 66 F0 | 	shl	arg01, #1
11914     14 13 02 F1 | 	add	arg01, local02
11918     02 12 66 F0 | 	shl	arg01, #2
1191c     03 00 00 FF 
11920     04 E4 85 F1 | 	sub	objptr, ##1540
11924     F2 12 02 F1 | 	add	arg01, objptr
11928     09 00 00 FF 
1192c     44 E4 05 F1 | 	add	objptr, ##4676
11930     F2 14 02 FB | 	rdlong	arg02, objptr
11934     02 2A 06 F6 | 	mov	local03, #2
11938     14 2B 02 F1 | 	add	local03, local02
1193c     0B 00 00 FF 
11940     5C E4 85 F1 | 	sub	objptr, ##5724
11944     F2 16 02 FB | 	rdlong	arg03, objptr
11948     0B 2B 02 FD | 	qmul	local03, arg03
1194c     08 4E 85 F1 | 	sub	fp, #8
11950     39 00 00 FF 
11954     98 E5 85 F1 | 	sub	objptr, ##29592
11958     18 2A 62 FD | 	getqx	local03
1195c     15 15 02 F1 | 	add	arg02, local03
11960     0C F7 B0 FD | 	call	#_psram_spin2_write
11964     0B 00 00 FF 
11968     CC E4 85 F1 | 	sub	objptr, ##5836
1196c     18 FD BF FD | 	call	#_do_fast_goto
11970     0C 00 90 FD | 	jmp	#LR__1474
11974                 | LR__1473
11974     26 12 06 F6 | 	mov	arg01, #38
11978     00 14 06 F6 | 	mov	arg02, #0
1197c     74 C9 B0 FD | 	call	#_printerror
11980                 | LR__1474
11980     A7 F0 03 F6 | 	mov	ptra, fp
11984     B2 00 A0 FD | 	call	#popregs_
11988                 | _do_find_goto_ret
11988     2D 00 64 FD | 	ret
1198c                 | 
1198c                 | ' 
1198c                 | ' '------- slow goto  
1198c                 | ' 
1198c                 | ' sub do_slow_goto
1198c                 | _do_slow_goto
1198c     02 4A 05 F6 | 	mov	COUNT_, #2
11990     A8 00 A0 FD | 	call	#pushregs_
11994     30 F0 07 F1 | 	add	ptra, #48
11998     F4 9E BF FD | 	call	#_pop
1199c     FF 26 02 F6 | 	mov	local01, result3
119a0     24 4E 05 F1 | 	add	fp, #36
119a4     A7 FA 61 FC | 	wrlong	result1, fp
119a8     04 4E 05 F1 | 	add	fp, #4
119ac     A7 FC 61 FC | 	wrlong	result2, fp
119b0     04 4E 05 F1 | 	add	fp, #4
119b4     A7 26 62 FC | 	wrlong	local01, fp
119b8     08 4E 85 F1 | 	sub	fp, #8
119bc     A7 12 02 F6 | 	mov	arg01, fp
119c0     24 4E 85 F1 | 	sub	fp, #36
119c4     AC A0 BF FD | 	call	#_converttoint
119c8     A7 FA 61 FC | 	wrlong	result1, fp
119cc     4A 00 00 FF 
119d0     88 E4 05 F1 | 	add	objptr, ##38024
119d4     F2 28 02 FB | 	rdlong	local02, objptr
119d8     4A 00 00 FF 
119dc     88 E4 85 F1 | 	sub	objptr, ##38024
119e0     04 4E 05 F1 | 	add	fp, #4
119e4     A7 28 62 FC | 	wrlong	local02, fp
119e8     04 4E 85 F1 | 	sub	fp, #4
119ec                 | ' 
119ec                 | ' t1=pop() : gotoline=converttoint(t1)
119ec                 | ' gotoptr=programstart
119ec                 | ' do
119ec                 | LR__1480
119ec     0C 4E 05 F1 | 	add	fp, #12
119f0     A7 12 02 F6 | 	mov	arg01, fp
119f4     08 4E 85 F1 | 	sub	fp, #8
119f8     A7 14 02 FB | 	rdlong	arg02, fp
119fc     04 4E 85 F1 | 	sub	fp, #4
11a00     18 16 06 F6 | 	mov	arg03, #24
11a04     0B 00 00 FF 
11a08     CC E4 05 F1 | 	add	objptr, ##5836
11a0c     C4 F5 B0 FD | 	call	#_psram_spin2_read1
11a10     0B 00 00 FF 
11a14     CC E4 85 F1 | 	sub	objptr, ##5836
11a18                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11a18                 | '   if gotoheader(0)<>$FFFFFFFF then
11a18     0C 4E 05 F1 | 	add	fp, #12
11a1c     A7 28 02 FB | 	rdlong	local02, fp
11a20     0C 4E 85 F1 | 	sub	fp, #12
11a24     FF FF 7F FF 
11a28     FF 29 0E F2 | 	cmp	local02, ##-1 wz
11a2c     24 00 90 AD |  if_e	jmp	#LR__1481
11a30     04 4E 05 F1 | 	add	fp, #4
11a34     A7 28 02 FB | 	rdlong	local02, fp
11a38     04 4E 05 F1 | 	add	fp, #4
11a3c     A7 28 62 FC | 	wrlong	local02, fp
11a40     18 4E 05 F1 | 	add	fp, #24
11a44     A7 28 02 FB | 	rdlong	local02, fp
11a48     1C 4E 85 F1 | 	sub	fp, #28
11a4c     A7 28 62 FC | 	wrlong	local02, fp
11a50     04 4E 85 F1 | 	sub	fp, #4
11a54                 | LR__1481
11a54     20 4E 05 F1 | 	add	fp, #32
11a58     A7 28 02 FB | 	rdlong	local02, fp
11a5c     20 4E 85 F1 | 	sub	fp, #32
11a60     FF FF 3F FF 
11a64     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
11a68     0C 4E 05 51 |  if_ne	add	fp, #12
11a6c     A7 26 02 5B |  if_ne	rdlong	local01, fp
11a70     0C 4E 85 51 |  if_ne	sub	fp, #12
11a74     FF FF 7F 5F 
11a78     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
11a7c     18 00 90 AD |  if_e	jmp	#LR__1482
11a80     0C 4E 05 F1 | 	add	fp, #12
11a84     A7 28 02 FB | 	rdlong	local02, fp
11a88     0C 4E 85 F1 | 	sub	fp, #12
11a8c     A7 16 02 FB | 	rdlong	arg03, fp
11a90     0B 29 0A F2 | 	cmp	local02, arg03 wz
11a94     54 FF 9F 5D |  if_ne	jmp	#LR__1480
11a98                 | LR__1482
11a98                 | ' if gotoheader(0)=gotoline then  
11a98     0C 4E 05 F1 | 	add	fp, #12
11a9c     A7 28 02 FB | 	rdlong	local02, fp
11aa0     0C 4E 85 F1 | 	sub	fp, #12
11aa4     A7 26 02 FB | 	rdlong	local01, fp
11aa8     13 29 0A F2 | 	cmp	local02, local01 wz
11aac     60 00 90 5D |  if_ne	jmp	#LR__1483
11ab0     08 4E 05 F1 | 	add	fp, #8
11ab4     A7 28 02 FB | 	rdlong	local02, fp
11ab8     08 4E 85 F1 | 	sub	fp, #8
11abc     50 00 00 FF 
11ac0     B8 E4 05 F1 | 	add	objptr, ##41144
11ac4     F2 28 62 FC | 	wrlong	local02, objptr
11ac8     06 00 00 FF 
11acc     3C E4 85 F1 | 	sub	objptr, ##3132
11ad0     F2 28 02 FB | 	rdlong	local02, objptr
11ad4     01 28 86 F1 | 	sub	local02, #1
11ad8     04 E4 05 F1 | 	add	objptr, #4
11adc     F2 28 62 FC | 	wrlong	local02, objptr
11ae0                 | '    runptr=oldgotoptr
11ae0                 | '    lineptr_e=lineptr-1
11ae0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
11ae0     06 00 00 FF 
11ae4     84 E4 05 F1 | 	add	objptr, ##3204
11ae8     F2 28 02 FB | 	rdlong	local02, objptr
11aec     50 00 00 FF 
11af0     04 E5 85 F1 | 	sub	objptr, ##41220
11af4     FF FF 3F FF 
11af8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
11afc     50 00 00 AF 
11b00     04 E5 05 A1 |  if_e	add	objptr, ##41220
11b04     F2 00 68 AC |  if_e	wrlong	#0, objptr
11b08     50 00 00 AF 
11b0c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11b10                 | LR__1483
11b10     A7 F0 03 F6 | 	mov	ptra, fp
11b14     B2 00 A0 FD | 	call	#popregs_
11b18                 | _do_slow_goto_ret
11b18     2D 00 64 FD | 	ret
11b1c                 | 
11b1c                 | ' 
11b1c                 | ' ' ----------------  hex$
11b1c                 | ' 
11b1c                 | ' sub do_hex
11b1c                 | _do_hex
11b1c     01 4A 05 F6 | 	mov	COUNT_, #1
11b20     A8 00 A0 FD | 	call	#pushregs_
11b24     18 F0 07 F1 | 	add	ptra, #24
11b28     4A 00 00 FF 
11b2c     80 E4 05 F1 | 	add	objptr, ##38016
11b30     F2 26 02 FB | 	rdlong	local01, objptr
11b34     13 17 02 F6 | 	mov	arg03, local01
11b38     01 16 66 F0 | 	shl	arg03, #1
11b3c     13 17 02 F1 | 	add	arg03, local01
11b40     02 16 66 F0 | 	shl	arg03, #2
11b44     03 00 00 FF 
11b48     04 E4 85 F1 | 	sub	objptr, ##1540
11b4c     F2 16 02 F1 | 	add	arg03, objptr
11b50     0B 17 02 FB | 	rdlong	arg03, arg03
11b54     0C 4E 05 F1 | 	add	fp, #12
11b58     A7 16 62 FC | 	wrlong	arg03, fp
11b5c                 | ' 
11b5c                 | ' numpar=compiledline(lineptr_e).result.uresult
11b5c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
11b5c     0C 4E 85 F1 | 	sub	fp, #12
11b60     03 16 16 F2 | 	cmp	arg03, #3 wc
11b64     47 00 00 FF 
11b68     7C E4 85 F1 | 	sub	objptr, ##36476
11b6c     0C 4E 05 C1 |  if_b	add	fp, #12
11b70     A7 26 0A CB |  if_b	rdlong	local01, fp wz
11b74     0C 4E 85 C1 |  if_b	sub	fp, #12
11b78     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
11b7c     00 12 06 F6 | 	mov	arg01, #0
11b80     BC 5D B1 FD | 	call	#__system___getiolock_0574
11b84     FD 12 02 F6 | 	mov	arg01, result1
11b88     88 00 B1 FD | 	call	#__system___lockmem
11b8c     90 01 00 FF 
11b90     3E 14 06 F6 | 	mov	arg02, ##@LR__5599
11b94     00 12 06 F6 | 	mov	arg01, #0
11b98     00 16 06 F6 | 	mov	arg03, #0
11b9c     68 0D B1 FD | 	call	#__system___basic_print_string
11ba0     00 12 06 F6 | 	mov	arg01, #0
11ba4     98 5D B1 FD | 	call	#__system___getiolock_0574
11ba8     FD 00 68 FC | 	wrlong	#0, result1
11bac     27 12 06 F6 | 	mov	arg01, #39
11bb0     00 14 06 F6 | 	mov	arg02, #0
11bb4     3C C7 B0 FD | 	call	#_printerror
11bb8     B8 00 90 FD | 	jmp	#LR__1493
11bbc                 | LR__1490
11bbc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
11bbc     0C 4E 05 F1 | 	add	fp, #12
11bc0     A7 26 02 FB | 	rdlong	local01, fp
11bc4     0C 4E 85 F1 | 	sub	fp, #12
11bc8     02 26 0E F2 | 	cmp	local01, #2 wz
11bcc     38 00 90 5D |  if_ne	jmp	#LR__1491
11bd0     BC 9C BF FD | 	call	#_pop
11bd4     FF 26 02 F6 | 	mov	local01, result3
11bd8     A7 FA 61 FC | 	wrlong	result1, fp
11bdc     04 4E 05 F1 | 	add	fp, #4
11be0     A7 FC 61 FC | 	wrlong	result2, fp
11be4     04 4E 05 F1 | 	add	fp, #4
11be8     A7 26 62 FC | 	wrlong	local01, fp
11bec     08 4E 85 F1 | 	sub	fp, #8
11bf0     A7 12 02 F6 | 	mov	arg01, fp
11bf4     7C 9E BF FD | 	call	#_converttoint
11bf8     14 4E 05 F1 | 	add	fp, #20
11bfc     A7 FA 61 FC | 	wrlong	result1, fp
11c00     14 4E 85 F1 | 	sub	fp, #20
11c04     0C 00 90 FD | 	jmp	#LR__1492
11c08                 | LR__1491
11c08     14 4E 05 F1 | 	add	fp, #20
11c0c     A7 10 68 FC | 	wrlong	#8, fp
11c10     14 4E 85 F1 | 	sub	fp, #20
11c14                 | LR__1492
11c14     78 9C BF FD | 	call	#_pop
11c18     FF 26 02 F6 | 	mov	local01, result3
11c1c     A7 FA 61 FC | 	wrlong	result1, fp
11c20     04 4E 05 F1 | 	add	fp, #4
11c24     A7 FC 61 FC | 	wrlong	result2, fp
11c28     04 4E 05 F1 | 	add	fp, #4
11c2c     A7 26 62 FC | 	wrlong	local01, fp
11c30     08 4E 85 F1 | 	sub	fp, #8
11c34     A7 12 02 F6 | 	mov	arg01, fp
11c38     38 9E BF FD | 	call	#_converttoint
11c3c     10 4E 05 F1 | 	add	fp, #16
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     FD 12 02 F6 | 	mov	arg01, result1
11c48     04 4E 05 F1 | 	add	fp, #4
11c4c     A7 14 02 FB | 	rdlong	arg02, fp
11c50     14 4E 85 F1 | 	sub	fp, #20
11c54     10 16 06 F6 | 	mov	arg03, #16
11c58     88 22 B1 FD | 	call	#__system__Number_S
11c5c     A7 FA 61 FC | 	wrlong	result1, fp
11c60     08 4E 05 F1 | 	add	fp, #8
11c64     A7 3E 68 FC | 	wrlong	#31, fp
11c68     08 4E 85 F1 | 	sub	fp, #8
11c6c     A7 12 02 F6 | 	mov	arg01, fp
11c70     B4 9C BF FD | 	call	#_push
11c74                 | LR__1493
11c74     A7 F0 03 F6 | 	mov	ptra, fp
11c78     B2 00 A0 FD | 	call	#popregs_
11c7c                 | _do_hex_ret
11c7c     2D 00 64 FD | 	ret
11c80                 | 
11c80                 | ' 
11c80                 | ' ' ----------------  if
11c80                 | ' 
11c80                 | ' sub do_if
11c80                 | _do_if
11c80     05 4A 05 F6 | 	mov	COUNT_, #5
11c84     A8 00 A0 FD | 	call	#pushregs_
11c88     04 9C BF FD | 	call	#_pop
11c8c     FD 26 0A F6 | 	mov	local01, result1 wz
11c90     FE 28 02 F6 | 	mov	local02, result2
11c94     FF 2A 02 F6 | 	mov	local03, result3
11c98                 | ' t1=pop()
11c98                 | ' ' if uresult=0, jump over else
11c98                 | ' if t1.result.uresult = 0 then 
11c98     BC 00 90 5D |  if_ne	jmp	#LR__1502
11c9c                 | '   for i=lineptr_e to lineptr-1
11c9c     4A 00 00 FF 
11ca0     80 E4 05 F1 | 	add	objptr, ##38016
11ca4     F2 2C 02 FB | 	rdlong	local04, objptr
11ca8     04 E4 85 F1 | 	sub	objptr, #4
11cac     F2 2E 02 FB | 	rdlong	local05, objptr
11cb0     4A 00 00 FF 
11cb4     7C E4 85 F1 | 	sub	objptr, ##38012
11cb8                 | LR__1500
11cb8     17 2D 52 F2 | 	cmps	local04, local05 wc
11cbc     78 00 90 3D |  if_ae	jmp	#LR__1501
11cc0     16 FF 01 F6 | 	mov	result3, local04
11cc4     01 FE 65 F0 | 	shl	result3, #1
11cc8     16 FF 01 F1 | 	add	result3, local04
11ccc     02 FE 65 F0 | 	shl	result3, #2
11cd0     47 00 00 FF 
11cd4     7C E4 05 F1 | 	add	objptr, ##36476
11cd8     F2 FE 01 F1 | 	add	result3, objptr
11cdc     FF 26 02 FB | 	rdlong	local01, result3
11ce0     04 FE 05 F1 | 	add	result3, #4
11ce4     FF FC 01 FB | 	rdlong	result2, result3
11ce8     16 FF 01 F6 | 	mov	result3, local04
11cec     01 FE 65 F0 | 	shl	result3, #1
11cf0     16 FF 01 F1 | 	add	result3, local04
11cf4     02 FE 65 F0 | 	shl	result3, #2
11cf8     F2 FE 01 F1 | 	add	result3, objptr
11cfc     08 FE 05 F1 | 	add	result3, #8
11d00     FF FE 01 FB | 	rdlong	result3, result3
11d04     FE 28 02 F6 | 	mov	local02, result2
11d08     FF 2A 02 F6 | 	mov	local03, result3
11d0c                 | '     t1=compiledline(i)
11d0c                 | '     if t1.result_type=token_else then lineptr_e=i : return
11d0c     5A 2A 0E F2 | 	cmp	local03, #90 wz
11d10     47 00 00 FF 
11d14     7C E4 85 F1 | 	sub	objptr, ##36476
11d18     4A 00 00 AF 
11d1c     80 E4 05 A1 |  if_e	add	objptr, ##38016
11d20     F2 2C 62 AC |  if_e	wrlong	local04, objptr
11d24     4A 00 00 AF 
11d28     80 E4 85 A1 |  if_e	sub	objptr, ##38016
11d2c     28 00 90 AD |  if_e	jmp	#LR__1503
11d30     01 2C 06 F1 | 	add	local04, #1
11d34     80 FF 9F FD | 	jmp	#LR__1500
11d38                 | LR__1501
11d38     4A 00 00 FF 
11d3c     7C E4 05 F1 | 	add	objptr, ##38012
11d40     F2 2E 02 FB | 	rdlong	local05, objptr
11d44     01 2E 86 F1 | 	sub	local05, #1
11d48     04 E4 05 F1 | 	add	objptr, #4
11d4c     F2 2E 62 FC | 	wrlong	local05, objptr
11d50     4A 00 00 FF 
11d54     80 E4 85 F1 | 	sub	objptr, ##38016
11d58                 | LR__1502
11d58                 | LR__1503
11d58     A7 F0 03 F6 | 	mov	ptra, fp
11d5c     B2 00 A0 FD | 	call	#popregs_
11d60                 | _do_if_ret
11d60     2D 00 64 FD | 	ret
11d64                 | 
11d64                 | ' 
11d64                 | ' ' ----------------  inkey$
11d64                 | ' 
11d64                 | ' sub do_inkey
11d64                 | _do_inkey
11d64     02 4A 05 F6 | 	mov	COUNT_, #2
11d68     A8 00 A0 FD | 	call	#pushregs_
11d6c     0C F0 07 F1 | 	add	ptra, #12
11d70     8C F6 B0 FD | 	call	#_usbnew_spin2_get_key
11d74     45 00 00 FF 
11d78     74 E4 05 F1 | 	add	objptr, ##35444
11d7c     F2 FA 61 FC | 	wrlong	result1, objptr
11d80                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
11d80     45 00 00 FF 
11d84     74 E4 85 F1 | 	sub	objptr, ##35444
11d88     00 FA 0D F2 | 	cmp	result1, #0 wz
11d8c     94 00 90 AD |  if_e	jmp	#LR__1511
11d90     45 00 00 FF 
11d94     74 E4 05 F1 | 	add	objptr, ##35444
11d98     F2 1C 02 FB | 	rdlong	arg06, objptr
11d9c     45 00 00 FF 
11da0     74 E4 85 F1 | 	sub	objptr, ##35444
11da4     00 00 40 FF 
11da8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11dac     45 00 00 CF 
11db0     74 E4 05 C1 |  if_b	add	objptr, ##35444
11db4     F2 26 02 CB |  if_b	rdlong	local01, objptr
11db8     45 00 00 CF 
11dbc     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11dc0     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
11dc4     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
11dc8     58 00 90 3D |  if_ae	jmp	#LR__1511
11dcc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
11dcc     50 00 00 FF 
11dd0     14 E5 05 F1 | 	add	objptr, ##41236
11dd4     F2 1C 02 FB | 	rdlong	arg06, objptr
11dd8     50 00 00 FF 
11ddc     14 E5 85 F1 | 	sub	objptr, ##41236
11de0     01 1C 0E F2 | 	cmp	arg06, #1 wz
11de4     3C 00 90 5D |  if_ne	jmp	#LR__1510
11de8     51 00 00 FF 
11dec     B8 E5 05 F1 | 	add	objptr, ##41912
11df0     F2 14 02 FB | 	rdlong	arg02, objptr
11df4     04 E4 85 F1 | 	sub	objptr, #4
11df8     F2 1A 02 FB | 	rdlong	arg05, objptr
11dfc     07 12 06 F6 | 	mov	arg01, #7
11e00     56 00 00 FF 
11e04     44 16 06 F6 | 	mov	arg03, ##44100
11e08     0C 18 C6 F9 | 	decod	arg04, #12
11e0c     01 1C 66 F6 | 	neg	arg06, #1
11e10     46 00 00 FF 
11e14     E8 E4 85 F1 | 	sub	objptr, ##36072
11e18     88 F9 B0 FD | 	call	#_audio096_spin2_play
11e1c     0B 00 00 FF 
11e20     CC E4 85 F1 | 	sub	objptr, ##5836
11e24                 | LR__1510
11e24                 | LR__1511
11e24                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
11e24     45 00 00 FF 
11e28     74 E4 05 F1 | 	add	objptr, ##35444
11e2c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
11e30     45 00 00 FF 
11e34     74 E4 85 F1 | 	sub	objptr, ##35444
11e38     D4 01 90 AD |  if_e	jmp	#LR__1520
11e3c     45 00 00 FF 
11e40     74 E4 05 F1 | 	add	objptr, ##35444
11e44     F2 1C 02 FB | 	rdlong	arg06, objptr
11e48     45 00 00 FF 
11e4c     74 E4 85 F1 | 	sub	objptr, ##35444
11e50     00 00 40 FF 
11e54     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11e58     45 00 00 CF 
11e5c     74 E4 05 C1 |  if_b	add	objptr, ##35444
11e60     F2 26 02 CB |  if_b	rdlong	local01, objptr
11e64     45 00 00 CF 
11e68     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11e6c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
11e70     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
11e74     98 01 90 3D |  if_ae	jmp	#LR__1520
11e78                 | '   if leds and 2 = 2 then 
11e78     51 00 00 FF 
11e7c     EC E5 05 F1 | 	add	objptr, ##41964
11e80     F2 26 0A FB | 	rdlong	local01, objptr wz
11e84     51 00 00 FF 
11e88     EC E5 85 F1 | 	sub	objptr, ##41964
11e8c     58 01 90 AD |  if_e	jmp	#LR__1519
11e90                 | '     if key>96 andalso key<123 then
11e90     45 00 00 FF 
11e94     74 E4 05 F1 | 	add	objptr, ##35444
11e98     F2 26 02 FB | 	rdlong	local01, objptr
11e9c     45 00 00 FF 
11ea0     74 E4 85 F1 | 	sub	objptr, ##35444
11ea4     61 26 16 F2 | 	cmp	local01, #97 wc
11ea8     3C 00 90 CD |  if_b	jmp	#LR__1512
11eac     45 00 00 FF 
11eb0     74 E4 05 F1 | 	add	objptr, ##35444
11eb4     F2 26 02 FB | 	rdlong	local01, objptr
11eb8     45 00 00 FF 
11ebc     74 E4 85 F1 | 	sub	objptr, ##35444
11ec0     7B 26 16 F2 | 	cmp	local01, #123 wc
11ec4     20 00 90 3D |  if_ae	jmp	#LR__1512
11ec8     45 00 00 FF 
11ecc     74 E4 05 F1 | 	add	objptr, ##35444
11ed0     F2 26 02 FB | 	rdlong	local01, objptr
11ed4     20 26 86 F1 | 	sub	local01, #32
11ed8     F2 26 62 FC | 	wrlong	local01, objptr
11edc     45 00 00 FF 
11ee0     74 E4 85 F1 | 	sub	objptr, ##35444
11ee4     00 01 90 FD | 	jmp	#LR__1518
11ee8                 | LR__1512
11ee8     45 00 00 FF 
11eec     74 E4 05 F1 | 	add	objptr, ##35444
11ef0     F2 26 02 FB | 	rdlong	local01, objptr
11ef4     45 00 00 FF 
11ef8     74 E4 85 F1 | 	sub	objptr, ##35444
11efc     41 26 16 F2 | 	cmp	local01, #65 wc
11f00     3C 00 90 CD |  if_b	jmp	#LR__1513
11f04     45 00 00 FF 
11f08     74 E4 05 F1 | 	add	objptr, ##35444
11f0c     F2 26 02 FB | 	rdlong	local01, objptr
11f10     45 00 00 FF 
11f14     74 E4 85 F1 | 	sub	objptr, ##35444
11f18     5B 26 16 F2 | 	cmp	local01, #91 wc
11f1c     20 00 90 3D |  if_ae	jmp	#LR__1513
11f20     45 00 00 FF 
11f24     74 E4 05 F1 | 	add	objptr, ##35444
11f28     F2 26 02 FB | 	rdlong	local01, objptr
11f2c     20 26 06 F1 | 	add	local01, #32
11f30     F2 26 62 FC | 	wrlong	local01, objptr
11f34     45 00 00 FF 
11f38     74 E4 85 F1 | 	sub	objptr, ##35444
11f3c     A8 00 90 FD | 	jmp	#LR__1517
11f40                 | LR__1513
11f40     45 00 00 FF 
11f44     74 E4 05 F1 | 	add	objptr, ##35444
11f48     F2 26 02 FB | 	rdlong	local01, objptr
11f4c     45 00 00 FF 
11f50     74 E4 85 F1 | 	sub	objptr, ##35444
11f54     17 26 16 F2 | 	cmp	local01, #23 wc
11f58     3C 00 90 CD |  if_b	jmp	#LR__1514
11f5c     45 00 00 FF 
11f60     74 E4 05 F1 | 	add	objptr, ##35444
11f64     F2 26 02 FB | 	rdlong	local01, objptr
11f68     45 00 00 FF 
11f6c     74 E4 85 F1 | 	sub	objptr, ##35444
11f70     20 26 16 F2 | 	cmp	local01, #32 wc
11f74     20 00 90 3D |  if_ae	jmp	#LR__1514
11f78     45 00 00 FF 
11f7c     74 E4 05 F1 | 	add	objptr, ##35444
11f80     F2 26 02 FB | 	rdlong	local01, objptr
11f84     09 26 86 F1 | 	sub	local01, #9
11f88     F2 26 62 FC | 	wrlong	local01, objptr
11f8c     45 00 00 FF 
11f90     74 E4 85 F1 | 	sub	objptr, ##35444
11f94     50 00 90 FD | 	jmp	#LR__1516
11f98                 | LR__1514
11f98     45 00 00 FF 
11f9c     74 E4 05 F1 | 	add	objptr, ##35444
11fa0     F2 28 02 FB | 	rdlong	local02, objptr
11fa4     45 00 00 FF 
11fa8     74 E4 85 F1 | 	sub	objptr, ##35444
11fac     0E 28 16 F2 | 	cmp	local02, #14 wc
11fb0     34 00 90 CD |  if_b	jmp	#LR__1515
11fb4     45 00 00 FF 
11fb8     74 E4 05 F1 | 	add	objptr, ##35444
11fbc     F2 26 02 FB | 	rdlong	local01, objptr
11fc0     45 00 00 FF 
11fc4     74 E4 85 F1 | 	sub	objptr, ##35444
11fc8     17 26 16 F2 | 	cmp	local01, #23 wc
11fcc     51 00 00 CF 
11fd0     F0 E5 05 C1 |  if_b	add	objptr, ##41968
11fd4     F2 28 02 CB |  if_b	rdlong	local02, objptr
11fd8     27 28 06 C1 |  if_b	add	local02, #39
11fdc     F2 28 62 CC |  if_b	wrlong	local02, objptr
11fe0     51 00 00 CF 
11fe4     F0 E5 85 C1 |  if_b	sub	objptr, ##41968
11fe8                 | LR__1515
11fe8                 | LR__1516
11fe8                 | LR__1517
11fe8                 | LR__1518
11fe8                 | LR__1519
11fe8     45 00 00 FF 
11fec     74 E4 05 F1 | 	add	objptr, ##35444
11ff0     F2 12 02 FB | 	rdlong	arg01, objptr
11ff4     45 00 00 FF 
11ff8     74 E4 85 F1 | 	sub	objptr, ##35444
11ffc     60 C6 B0 FD | 	call	#_scantochar
12000     FD 12 02 F6 | 	mov	arg01, result1
12004     4C 1E B1 FD | 	call	#__system__Chr_S
12008     A7 FA 61 FC | 	wrlong	result1, fp
1200c     0C 00 90 FD | 	jmp	#LR__1521
12010                 | LR__1520
12010     90 01 00 FF 
12014     45 28 06 F6 | 	mov	local02, ##@LR__5600
12018     A7 28 62 FC | 	wrlong	local02, fp
1201c                 | LR__1521
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 3E 68 FC | 	wrlong	#31, fp
12024     08 4E 85 F1 | 	sub	fp, #8
12028     A7 12 02 F6 | 	mov	arg01, fp
1202c     F8 98 BF FD | 	call	#_push
12030     A7 F0 03 F6 | 	mov	ptra, fp
12034     B2 00 A0 FD | 	call	#popregs_
12038                 | _do_inkey_ret
12038     2D 00 64 FD | 	ret
1203c                 | 
1203c                 | ' 
1203c                 | ' ' ----------------  ink
1203c                 | ' 
1203c                 | ' sub do_ink
1203c                 | _do_ink
1203c     00 4A 05 F6 | 	mov	COUNT_, #0
12040     A8 00 A0 FD | 	call	#pushregs_
12044     0C F0 07 F1 | 	add	ptra, #12
12048     44 98 BF FD | 	call	#_pop
1204c     FF 14 02 F6 | 	mov	arg02, result3
12050     A7 FA 61 FC | 	wrlong	result1, fp
12054     04 4E 05 F1 | 	add	fp, #4
12058     A7 FC 61 FC | 	wrlong	result2, fp
1205c     04 4E 05 F1 | 	add	fp, #4
12060     A7 14 62 FC | 	wrlong	arg02, fp
12064     08 4E 85 F1 | 	sub	fp, #8
12068     A7 12 02 F6 | 	mov	arg01, fp
1206c     04 9A BF FD | 	call	#_converttoint
12070     37 00 00 FF 
12074     3C E4 05 F1 | 	add	objptr, ##28220
12078     F2 FA 61 FC | 	wrlong	result1, objptr
1207c     04 E4 85 F1 | 	sub	objptr, #4
12080     F2 14 02 FB | 	rdlong	arg02, objptr
12084                 | ' 
12084                 | ' write_color:=ff
12084     36 00 00 FF 
12088     F7 E5 85 F1 | 	sub	objptr, ##28151
1208c     F2 FA 61 FC | 	wrlong	result1, objptr
12090                 | ' write_background:=bb
12090     04 E4 05 F1 | 	add	objptr, #4
12094     F2 14 62 FC | 	wrlong	arg02, objptr
12098     36 00 00 FF 
1209c     F7 E5 05 F1 | 	add	objptr, ##28151
120a0     F2 12 02 FB | 	rdlong	arg01, objptr
120a4     37 00 00 FF 
120a8     3C E4 85 F1 | 	sub	objptr, ##28220
120ac     94 CD B0 FD | 	call	#_hg010b_spin2_setcursorcolor
120b0     A7 F0 03 F6 | 	mov	ptra, fp
120b4     B2 00 A0 FD | 	call	#popregs_
120b8                 | _do_ink_ret
120b8     2D 00 64 FD | 	ret
120bc                 | 
120bc                 | ' 
120bc                 | ' ' ----------------  int
120bc                 | ' 
120bc                 | ' sub do_int
120bc                 | _do_int
120bc     02 4A 05 F6 | 	mov	COUNT_, #2
120c0     A8 00 A0 FD | 	call	#pushregs_
120c4     10 F0 07 F1 | 	add	ptra, #16
120c8     C4 97 BF FD | 	call	#_pop
120cc     FE 26 02 F6 | 	mov	local01, result2
120d0     FF 28 02 F6 | 	mov	local02, result3
120d4     A7 FA 61 FC | 	wrlong	result1, fp
120d8     04 4E 05 F1 | 	add	fp, #4
120dc     A7 26 62 FC | 	wrlong	local01, fp
120e0     04 4E 05 F1 | 	add	fp, #4
120e4     A7 28 62 FC | 	wrlong	local02, fp
120e8                 | ' 
120e8                 | ' t1=pop()
120e8                 | ' select case t1.result_type
120e8     08 4E 85 F1 | 	sub	fp, #8
120ec     1E 28 0E F2 | 	cmp	local02, #30 wz
120f0     14 00 90 AD |  if_e	jmp	#LR__1530
120f4     1F 28 0E F2 | 	cmp	local02, #31 wz
120f8     20 00 90 AD |  if_e	jmp	#LR__1531
120fc     2B 28 0E F2 | 	cmp	local02, #43 wz
12100     34 00 90 AD |  if_e	jmp	#LR__1532
12104     50 00 90 FD | 	jmp	#LR__1533
12108                 | LR__1530
12108     A7 12 02 FB | 	rdlong	arg01, fp
1210c     00 14 06 F6 | 	mov	arg02, #0
12110     84 2D B1 FD | 	call	#__system___float_tointeger
12114     A7 FA 61 FC | 	wrlong	result1, fp
12118     3C 00 90 FD | 	jmp	#LR__1533
1211c                 | LR__1531
1211c     A7 12 02 FB | 	rdlong	arg01, fp
12120     B8 30 B1 FD | 	call	#__system____builtin_atof
12124     FD 12 02 F6 | 	mov	arg01, result1
12128     00 14 06 F6 | 	mov	arg02, #0
1212c     68 2D B1 FD | 	call	#__system___float_tointeger
12130     A7 FA 61 FC | 	wrlong	result1, fp
12134     20 00 90 FD | 	jmp	#LR__1533
12138                 | LR__1532
12138     A7 12 02 FB | 	rdlong	arg01, fp
1213c     C8 98 BF FD | 	call	#_convertstring
12140     FD 12 02 F6 | 	mov	arg01, result1
12144     94 30 B1 FD | 	call	#__system____builtin_atof
12148     FD 12 02 F6 | 	mov	arg01, result1
1214c     00 14 06 F6 | 	mov	arg02, #0
12150     44 2D B1 FD | 	call	#__system___float_tointeger
12154     A7 FA 61 FC | 	wrlong	result1, fp
12158                 | LR__1533
12158     08 4E 05 F1 | 	add	fp, #8
1215c     A7 38 68 FC | 	wrlong	#28, fp
12160     08 4E 85 F1 | 	sub	fp, #8
12164     A7 12 02 F6 | 	mov	arg01, fp
12168     BC 97 BF FD | 	call	#_push
1216c     A7 F0 03 F6 | 	mov	ptra, fp
12170     B2 00 A0 FD | 	call	#popregs_
12174                 | _do_int_ret
12174     2D 00 64 FD | 	ret
12178                 | 
12178                 | ' 
12178                 | ' ' ----------------  left$
12178                 | ' 
12178                 | ' sub do_left
12178                 | _do_left
12178     00 4A 05 F6 | 	mov	COUNT_, #0
1217c     A8 00 A0 FD | 	call	#pushregs_
12180     14 F0 07 F1 | 	add	ptra, #20
12184     4A 00 00 FF 
12188     80 E4 05 F1 | 	add	objptr, ##38016
1218c     F2 16 02 FB | 	rdlong	arg03, objptr
12190     0B 15 02 F6 | 	mov	arg02, arg03
12194     01 14 66 F0 | 	shl	arg02, #1
12198     0B 15 02 F1 | 	add	arg02, arg03
1219c     02 14 66 F0 | 	shl	arg02, #2
121a0     03 00 00 FF 
121a4     04 E4 85 F1 | 	sub	objptr, ##1540
121a8     F2 14 02 F1 | 	add	arg02, objptr
121ac     0A 17 02 FB | 	rdlong	arg03, arg02
121b0     0C 4E 05 F1 | 	add	fp, #12
121b4     A7 16 62 FC | 	wrlong	arg03, fp
121b8                 | ' 
121b8                 | ' numpar=compiledline(lineptr_e).result.uresult
121b8                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
121b8     0C 4E 85 F1 | 	sub	fp, #12
121bc     02 16 0E F2 | 	cmp	arg03, #2 wz
121c0     47 00 00 FF 
121c4     7C E4 85 F1 | 	sub	objptr, ##36476
121c8     40 00 90 AD |  if_e	jmp	#LR__1540
121cc     00 12 06 F6 | 	mov	arg01, #0
121d0     6C 57 B1 FD | 	call	#__system___getiolock_0574
121d4     FD 12 02 F6 | 	mov	arg01, result1
121d8     38 FA B0 FD | 	call	#__system___lockmem
121dc     90 01 00 FF 
121e0     46 14 06 F6 | 	mov	arg02, ##@LR__5601
121e4     00 12 06 F6 | 	mov	arg01, #0
121e8     00 16 06 F6 | 	mov	arg03, #0
121ec     18 07 B1 FD | 	call	#__system___basic_print_string
121f0     00 12 06 F6 | 	mov	arg01, #0
121f4     48 57 B1 FD | 	call	#__system___getiolock_0574
121f8     FD 00 68 FC | 	wrlong	#0, result1
121fc     27 12 06 F6 | 	mov	arg01, #39
12200     00 14 06 F6 | 	mov	arg02, #0
12204     EC C0 B0 FD | 	call	#_printerror
12208     EC 00 90 FD | 	jmp	#LR__1543
1220c                 | LR__1540
1220c     80 96 BF FD | 	call	#_pop
12210     FF 16 02 F6 | 	mov	arg03, result3
12214     A7 FA 61 FC | 	wrlong	result1, fp
12218     04 4E 05 F1 | 	add	fp, #4
1221c     A7 FC 61 FC | 	wrlong	result2, fp
12220     04 4E 05 F1 | 	add	fp, #4
12224     A7 16 62 FC | 	wrlong	arg03, fp
12228     08 4E 85 F1 | 	sub	fp, #8
1222c     A7 12 02 F6 | 	mov	arg01, fp
12230     40 98 BF FD | 	call	#_converttoint
12234     FD 16 02 F6 | 	mov	arg03, result1
12238     10 4E 05 F1 | 	add	fp, #16
1223c     A7 16 62 FC | 	wrlong	arg03, fp
12240     10 4E 85 F1 | 	sub	fp, #16
12244     48 96 BF FD | 	call	#_pop
12248     FF 16 02 F6 | 	mov	arg03, result3
1224c     A7 FA 61 FC | 	wrlong	result1, fp
12250     04 4E 05 F1 | 	add	fp, #4
12254     A7 FC 61 FC | 	wrlong	result2, fp
12258     04 4E 05 F1 | 	add	fp, #4
1225c     A7 16 62 FC | 	wrlong	arg03, fp
12260                 | ' t1=pop() : arg=converttoint(t1)
12260                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12260     08 4E 85 F1 | 	sub	fp, #8
12264     2B 16 0E F2 | 	cmp	arg03, #43 wz
12268     18 00 90 5D |  if_ne	jmp	#LR__1541
1226c     A7 12 02 FB | 	rdlong	arg01, fp
12270     94 97 BF FD | 	call	#_convertstring
12274     A7 FA 61 FC | 	wrlong	result1, fp
12278     08 4E 05 F1 | 	add	fp, #8
1227c     A7 3E 68 FC | 	wrlong	#31, fp
12280     08 4E 85 F1 | 	sub	fp, #8
12284                 | LR__1541
12284                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
12284     08 4E 05 F1 | 	add	fp, #8
12288     A7 16 02 FB | 	rdlong	arg03, fp
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     1F 16 0E F2 | 	cmp	arg03, #31 wz
12294     40 00 90 AD |  if_e	jmp	#LR__1542
12298     00 12 06 F6 | 	mov	arg01, #0
1229c     A0 56 B1 FD | 	call	#__system___getiolock_0574
122a0     FD 12 02 F6 | 	mov	arg01, result1
122a4     6C F9 B0 FD | 	call	#__system___lockmem
122a8     90 01 00 FF 
122ac     4E 14 06 F6 | 	mov	arg02, ##@LR__5602
122b0     00 12 06 F6 | 	mov	arg01, #0
122b4     00 16 06 F6 | 	mov	arg03, #0
122b8     4C 06 B1 FD | 	call	#__system___basic_print_string
122bc     00 12 06 F6 | 	mov	arg01, #0
122c0     7C 56 B1 FD | 	call	#__system___getiolock_0574
122c4     FD 00 68 FC | 	wrlong	#0, result1
122c8     0F 12 06 F6 | 	mov	arg01, #15
122cc     00 14 06 F6 | 	mov	arg02, #0
122d0     20 C0 B0 FD | 	call	#_printerror
122d4     20 00 90 FD | 	jmp	#LR__1543
122d8                 | LR__1542
122d8     A7 12 02 FB | 	rdlong	arg01, fp
122dc     10 4E 05 F1 | 	add	fp, #16
122e0     A7 14 02 FB | 	rdlong	arg02, fp
122e4     10 4E 85 F1 | 	sub	fp, #16
122e8     A4 19 B1 FD | 	call	#__system__Left_S
122ec     A7 FA 61 FC | 	wrlong	result1, fp
122f0     A7 12 02 F6 | 	mov	arg01, fp
122f4     30 96 BF FD | 	call	#_push
122f8                 | LR__1543
122f8     A7 F0 03 F6 | 	mov	ptra, fp
122fc     B2 00 A0 FD | 	call	#popregs_
12300                 | _do_left_ret
12300     2D 00 64 FD | 	ret
12304                 | 
12304                 | ' 
12304                 | ' ' ----------------  len
12304                 | ' 
12304                 | ' sub do_len
12304                 | _do_len
12304     02 4A 05 F6 | 	mov	COUNT_, #2
12308     A8 00 A0 FD | 	call	#pushregs_
1230c     14 F0 07 F1 | 	add	ptra, #20
12310     4A 00 00 FF 
12314     80 E4 05 F1 | 	add	objptr, ##38016
12318     F2 26 02 FB | 	rdlong	local01, objptr
1231c     13 17 02 F6 | 	mov	arg03, local01
12320     01 16 66 F0 | 	shl	arg03, #1
12324     13 17 02 F1 | 	add	arg03, local01
12328     02 16 66 F0 | 	shl	arg03, #2
1232c     03 00 00 FF 
12330     04 E4 85 F1 | 	sub	objptr, ##1540
12334     F2 16 02 F1 | 	add	arg03, objptr
12338     0B 17 02 FB | 	rdlong	arg03, arg03
1233c     0C 4E 05 F1 | 	add	fp, #12
12340     A7 16 62 FC | 	wrlong	arg03, fp
12344                 | ' 
12344                 | ' numpar=compiledline(lineptr_e).result.uresult
12344                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
12344     0C 4E 85 F1 | 	sub	fp, #12
12348     02 16 16 F2 | 	cmp	arg03, #2 wc
1234c     47 00 00 FF 
12350     7C E4 85 F1 | 	sub	objptr, ##36476
12354     0C 4E 05 C1 |  if_b	add	fp, #12
12358     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1235c     0C 4E 85 C1 |  if_b	sub	fp, #12
12360     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
12364     00 12 06 F6 | 	mov	arg01, #0
12368     D4 55 B1 FD | 	call	#__system___getiolock_0574
1236c     FD 12 02 F6 | 	mov	arg01, result1
12370     A0 F8 B0 FD | 	call	#__system___lockmem
12374     90 01 00 FF 
12378     56 14 06 F6 | 	mov	arg02, ##@LR__5603
1237c     00 12 06 F6 | 	mov	arg01, #0
12380     00 16 06 F6 | 	mov	arg03, #0
12384     80 05 B1 FD | 	call	#__system___basic_print_string
12388     00 12 06 F6 | 	mov	arg01, #0
1238c     B0 55 B1 FD | 	call	#__system___getiolock_0574
12390     FD 00 68 FC | 	wrlong	#0, result1
12394     27 12 06 F6 | 	mov	arg01, #39
12398     00 14 06 F6 | 	mov	arg02, #0
1239c     54 BF B0 FD | 	call	#_printerror
123a0     C8 00 90 FD | 	jmp	#LR__1555
123a4                 | LR__1550
123a4     E8 94 BF FD | 	call	#_pop
123a8     FF 16 02 F6 | 	mov	arg03, result3
123ac     A7 FA 61 FC | 	wrlong	result1, fp
123b0     04 4E 05 F1 | 	add	fp, #4
123b4     A7 FC 61 FC | 	wrlong	result2, fp
123b8     04 4E 05 F1 | 	add	fp, #4
123bc     A7 16 62 FC | 	wrlong	arg03, fp
123c0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
123c0     08 4E 85 F1 | 	sub	fp, #8
123c4     2B 16 0E F2 | 	cmp	arg03, #43 wz
123c8     18 00 90 5D |  if_ne	jmp	#LR__1551
123cc     A7 12 02 FB | 	rdlong	arg01, fp
123d0     34 96 BF FD | 	call	#_convertstring
123d4     A7 FA 61 FC | 	wrlong	result1, fp
123d8     08 4E 05 F1 | 	add	fp, #8
123dc     A7 3E 68 FC | 	wrlong	#31, fp
123e0     08 4E 85 F1 | 	sub	fp, #8
123e4                 | LR__1551
123e4                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
123e4     08 4E 05 F1 | 	add	fp, #8
123e8     A7 16 02 FB | 	rdlong	arg03, fp
123ec     08 4E 85 F1 | 	sub	fp, #8
123f0     1F 16 0E F2 | 	cmp	arg03, #31 wz
123f4     40 00 90 AD |  if_e	jmp	#LR__1552
123f8     00 12 06 F6 | 	mov	arg01, #0
123fc     40 55 B1 FD | 	call	#__system___getiolock_0574
12400     FD 12 02 F6 | 	mov	arg01, result1
12404     0C F8 B0 FD | 	call	#__system___lockmem
12408     90 01 00 FF 
1240c     5C 14 06 F6 | 	mov	arg02, ##@LR__5604
12410     00 12 06 F6 | 	mov	arg01, #0
12414     00 16 06 F6 | 	mov	arg03, #0
12418     EC 04 B1 FD | 	call	#__system___basic_print_string
1241c     00 12 06 F6 | 	mov	arg01, #0
12420     1C 55 B1 FD | 	call	#__system___getiolock_0574
12424     FD 00 68 FC | 	wrlong	#0, result1
12428     0F 12 06 F6 | 	mov	arg01, #15
1242c     00 14 06 F6 | 	mov	arg02, #0
12430     C0 BE B0 FD | 	call	#_printerror
12434     34 00 90 FD | 	jmp	#LR__1555
12438                 | LR__1552
12438     A7 12 02 FB | 	rdlong	arg01, fp
1243c     09 29 02 F6 | 	mov	local02, arg01
12440     97 06 48 FB | 	callpa	#(@LR__1554-@LR__1553)>>2,fcache_load_ptr_
12444                 | LR__1553
12444     14 FB C9 FA | 	rdbyte	result1, local02 wz
12448     01 28 06 51 |  if_ne	add	local02, #1
1244c     F4 FF 9F 5D |  if_ne	jmp	#LR__1553
12450                 | LR__1554
12450     09 29 82 F1 | 	sub	local02, arg01
12454     A7 28 62 FC | 	wrlong	local02, fp
12458     08 4E 05 F1 | 	add	fp, #8
1245c     A7 38 68 FC | 	wrlong	#28, fp
12460     08 4E 85 F1 | 	sub	fp, #8
12464     A7 12 02 F6 | 	mov	arg01, fp
12468     BC 94 BF FD | 	call	#_push
1246c                 | LR__1555
1246c     A7 F0 03 F6 | 	mov	ptra, fp
12470     B2 00 A0 FD | 	call	#popregs_
12474                 | _do_len_ret
12474     2D 00 64 FD | 	ret
12478                 | 
12478                 | ' 
12478                 | ' ' ----------------  list
12478                 | ' 
12478                 | ' sub do_list
12478                 | _do_list
12478     02 4A 05 F6 | 	mov	COUNT_, #2
1247c     A8 00 A0 FD | 	call	#pushregs_
12480     B8 F0 07 F1 | 	add	ptra, #184
12484     04 4E 05 F1 | 	add	fp, #4
12488     A7 00 68 FC | 	wrlong	#0, fp
1248c     04 4E 05 F1 | 	add	fp, #4
12490     FF FF BF FF 
12494     A7 FE 6B FC | 	wrlong	##2147483647, fp
12498     08 4E 85 F1 | 	sub	fp, #8
1249c     4A 00 00 FF 
124a0     80 E4 05 F1 | 	add	objptr, ##38016
124a4     F2 26 02 FB | 	rdlong	local01, objptr
124a8     13 17 02 F6 | 	mov	arg03, local01
124ac     01 16 66 F0 | 	shl	arg03, #1
124b0     13 17 02 F1 | 	add	arg03, local01
124b4     02 16 66 F0 | 	shl	arg03, #2
124b8     03 00 00 FF 
124bc     04 E4 85 F1 | 	sub	objptr, ##1540
124c0     F2 16 02 F1 | 	add	arg03, objptr
124c4     0B 17 02 FB | 	rdlong	arg03, arg03
124c8     A7 16 62 FC | 	wrlong	arg03, fp
124cc                 | ' 
124cc                 | ' startline=0 : endline=$7FFFFFFF
124cc                 | ' numpar=compiledline(lineptr_e).result.uresult
124cc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
124cc     01 16 0E F2 | 	cmp	arg03, #1 wz
124d0     47 00 00 FF 
124d4     7C E4 85 F1 | 	sub	objptr, ##36476
124d8     3C 00 90 5D |  if_ne	jmp	#LR__1560
124dc     B0 93 BF FD | 	call	#_pop
124e0     FF 26 02 F6 | 	mov	local01, result3
124e4     0C 4E 05 F1 | 	add	fp, #12
124e8     A7 FA 61 FC | 	wrlong	result1, fp
124ec     04 4E 05 F1 | 	add	fp, #4
124f0     A7 FC 61 FC | 	wrlong	result2, fp
124f4     04 4E 05 F1 | 	add	fp, #4
124f8     A7 26 62 FC | 	wrlong	local01, fp
124fc     08 4E 85 F1 | 	sub	fp, #8
12500     A7 12 02 F6 | 	mov	arg01, fp
12504     0C 4E 85 F1 | 	sub	fp, #12
12508     68 95 BF FD | 	call	#_converttoint
1250c     04 4E 05 F1 | 	add	fp, #4
12510     A7 FA 61 FC | 	wrlong	result1, fp
12514     04 4E 85 F1 | 	sub	fp, #4
12518                 | LR__1560
12518                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
12518     A7 16 02 FB | 	rdlong	arg03, fp
1251c     02 16 0E F2 | 	cmp	arg03, #2 wz
12520     7C 00 90 5D |  if_ne	jmp	#LR__1561
12524     68 93 BF FD | 	call	#_pop
12528     FF 26 02 F6 | 	mov	local01, result3
1252c     0C 4E 05 F1 | 	add	fp, #12
12530     A7 FA 61 FC | 	wrlong	result1, fp
12534     04 4E 05 F1 | 	add	fp, #4
12538     A7 FC 61 FC | 	wrlong	result2, fp
1253c     04 4E 05 F1 | 	add	fp, #4
12540     A7 26 62 FC | 	wrlong	local01, fp
12544     08 4E 85 F1 | 	sub	fp, #8
12548     A7 12 02 F6 | 	mov	arg01, fp
1254c     0C 4E 85 F1 | 	sub	fp, #12
12550     20 95 BF FD | 	call	#_converttoint
12554     FD 26 02 F6 | 	mov	local01, result1
12558     08 4E 05 F1 | 	add	fp, #8
1255c     A7 26 62 FC | 	wrlong	local01, fp
12560     08 4E 85 F1 | 	sub	fp, #8
12564     28 93 BF FD | 	call	#_pop
12568     FF 26 02 F6 | 	mov	local01, result3
1256c     0C 4E 05 F1 | 	add	fp, #12
12570     A7 FA 61 FC | 	wrlong	result1, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 FC 61 FC | 	wrlong	result2, fp
1257c     04 4E 05 F1 | 	add	fp, #4
12580     A7 26 62 FC | 	wrlong	local01, fp
12584     08 4E 85 F1 | 	sub	fp, #8
12588     A7 12 02 F6 | 	mov	arg01, fp
1258c     0C 4E 85 F1 | 	sub	fp, #12
12590     E0 94 BF FD | 	call	#_converttoint
12594     04 4E 05 F1 | 	add	fp, #4
12598     A7 FA 61 FC | 	wrlong	result1, fp
1259c     04 4E 85 F1 | 	sub	fp, #4
125a0                 | LR__1561
125a0                 | ' 
125a0                 | ' 
125a0                 | ' print
125a0     00 12 06 F6 | 	mov	arg01, #0
125a4     98 53 B1 FD | 	call	#__system___getiolock_0574
125a8     FD 12 02 F6 | 	mov	arg01, result1
125ac     64 F6 B0 FD | 	call	#__system___lockmem
125b0     00 12 06 F6 | 	mov	arg01, #0
125b4     0A 14 06 F6 | 	mov	arg02, #10
125b8     00 16 06 F6 | 	mov	arg03, #0
125bc     F0 02 B1 FD | 	call	#__system___basic_print_char
125c0     00 12 06 F6 | 	mov	arg01, #0
125c4     78 53 B1 FD | 	call	#__system___getiolock_0574
125c8     FD 00 68 FC | 	wrlong	#0, result1
125cc     4A 00 00 FF 
125d0     88 E4 05 F1 | 	add	objptr, ##38024
125d4     F2 28 02 FB | 	rdlong	local02, objptr
125d8     07 00 00 FF 
125dc     A0 E5 05 F1 | 	add	objptr, ##4000
125e0     F2 28 62 FC | 	wrlong	local02, objptr
125e4     52 00 00 FF 
125e8     28 E4 85 F1 | 	sub	objptr, ##42024
125ec                 | ' do 
125ec                 | LR__1562
125ec     20 4E 05 F1 | 	add	fp, #32
125f0     A7 12 02 F6 | 	mov	arg01, fp
125f4     20 4E 85 F1 | 	sub	fp, #32
125f8     52 00 00 FF 
125fc     28 E4 05 F1 | 	add	objptr, ##42024
12600     F2 14 02 FB | 	rdlong	arg02, objptr
12604     18 16 06 F6 | 	mov	arg03, #24
12608     46 00 00 FF 
1260c     5C E5 85 F1 | 	sub	objptr, ##36188
12610     C0 E9 B0 FD | 	call	#_psram_spin2_read1
12614     0B 00 00 FF 
12618     CC E4 85 F1 | 	sub	objptr, ##5836
1261c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
1261c                 | '   
1261c                 | '   if header(0)<> $FFFFFFFF then
1261c     20 4E 05 F1 | 	add	fp, #32
12620     A7 28 02 FB | 	rdlong	local02, fp
12624     20 4E 85 F1 | 	sub	fp, #32
12628     FF FF 7F FF 
1262c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12630     A8 00 90 AD |  if_e	jmp	#LR__1564
12634     38 4E 05 F1 | 	add	fp, #56
12638     3F 16 06 F6 | 	mov	arg03, #63
1263c     28 16 62 FD | 	setq	arg03
12640     A7 00 68 FC | 	wrlong	#0, fp
12644     A7 12 02 F6 | 	mov	arg01, fp
12648     10 4E 85 F1 | 	sub	fp, #16
1264c     A7 14 02 FB | 	rdlong	arg02, fp
12650     04 4E 05 F1 | 	add	fp, #4
12654     A7 16 02 FB | 	rdlong	arg03, fp
12658     2C 4E 85 F1 | 	sub	fp, #44
1265c     0B 00 00 FF 
12660     CC E4 05 F1 | 	add	objptr, ##5836
12664     6C E9 B0 FD | 	call	#_psram_spin2_read1
12668     0B 00 00 FF 
1266c     CC E4 85 F1 | 	sub	objptr, ##5836
12670                 | '     longfill(linebuf,0,64)
12670                 | '     psram.read1(varptr(linebuf),header(2),header(3))
12670                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
12670     20 4E 05 F1 | 	add	fp, #32
12674     A7 28 02 FB | 	rdlong	local02, fp
12678     1C 4E 85 F1 | 	sub	fp, #28
1267c     A7 26 02 FB | 	rdlong	local01, fp
12680     04 4E 85 F1 | 	sub	fp, #4
12684     13 29 52 F2 | 	cmps	local02, local01 wc
12688     30 00 90 CD |  if_b	jmp	#LR__1563
1268c     20 4E 05 F1 | 	add	fp, #32
12690     A7 28 02 FB | 	rdlong	local02, fp
12694     18 4E 85 F1 | 	sub	fp, #24
12698     A7 16 02 FB | 	rdlong	arg03, fp
1269c     08 4E 85 F1 | 	sub	fp, #8
126a0     0B 29 5A F2 | 	cmps	local02, arg03 wcz
126a4     14 00 90 1D |  if_a	jmp	#LR__1563
126a8     38 4E 05 F1 | 	add	fp, #56
126ac     A7 12 02 F6 | 	mov	arg01, fp
126b0     38 4E 85 F1 | 	sub	fp, #56
126b4                 | ' 
126b4                 | ' write(text)
126b4     E0 DC B0 FD | 	call	#_hg010b_spin2_write
126b8                 | ' crlf
126b8     DC E1 B0 FD | 	call	#_hg010b_spin2_crlf
126bc                 | LR__1563
126bc     34 4E 05 F1 | 	add	fp, #52
126c0     A7 28 02 FB | 	rdlong	local02, fp
126c4     34 4E 85 F1 | 	sub	fp, #52
126c8     52 00 00 FF 
126cc     28 E4 05 F1 | 	add	objptr, ##42024
126d0     F2 28 62 FC | 	wrlong	local02, objptr
126d4     52 00 00 FF 
126d8     28 E4 85 F1 | 	sub	objptr, ##42024
126dc                 | LR__1564
126dc     34 4E 05 F1 | 	add	fp, #52
126e0     A7 28 02 FB | 	rdlong	local02, fp
126e4     34 4E 85 F1 | 	sub	fp, #52
126e8     FF FF 3F FF 
126ec     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
126f0     20 4E 05 51 |  if_ne	add	fp, #32
126f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
126f8     20 4E 85 51 |  if_ne	sub	fp, #32
126fc     FF FF 7F 5F 
12700     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12704     E4 FE 9F 5D |  if_ne	jmp	#LR__1562
12708     A7 F0 03 F6 | 	mov	ptra, fp
1270c     B2 00 A0 FD | 	call	#popregs_
12710                 | _do_list_ret
12710     2D 00 64 FD | 	ret
12714                 | 
12714                 | ' 
12714                 | ' '-------------------- load
12714                 | ' 
12714                 | ' sub do_load(amode=0 as integer)  
12714                 | _do_load
12714     01 4A 05 F6 | 	mov	COUNT_, #1
12718     A8 00 A0 FD | 	call	#pushregs_
1271c     AC F0 07 F1 | 	add	ptra, #172
12720     A7 12 62 FC | 	wrlong	arg01, fp
12724     51 00 00 FF 
12728     E8 E5 05 F1 | 	add	objptr, ##41960
1272c     F2 02 68 FC | 	wrlong	#1, objptr
12730     07 00 00 FF 
12734     68 E5 85 F1 | 	sub	objptr, ##3944
12738     F2 14 02 FB | 	rdlong	arg02, objptr
1273c     0A 13 02 F6 | 	mov	arg01, arg02
12740     01 12 66 F0 | 	shl	arg01, #1
12744     0A 13 02 F1 | 	add	arg01, arg02
12748     02 12 66 F0 | 	shl	arg01, #2
1274c     03 00 00 FF 
12750     04 E4 85 F1 | 	sub	objptr, ##1540
12754     F2 12 02 F1 | 	add	arg01, objptr
12758     09 15 02 FB | 	rdlong	arg02, arg01
1275c     1C 4E 05 F1 | 	add	fp, #28
12760     A7 14 62 FC | 	wrlong	arg02, fp
12764     8C 4E 05 F1 | 	add	fp, #140
12768     A7 12 02 F6 | 	mov	arg01, fp
1276c     47 00 00 FF 
12770     7C E4 85 F1 | 	sub	objptr, ##36476
12774     80 4E 85 F1 | 	sub	fp, #128
12778     09 4F 61 FC | 	wrlong	fp, arg01
1277c                 | ' 
1277c                 | ' inload=1
1277c                 | ' numpar=compiledline(lineptr_e).result.uresult
1277c                 | ' lpoke varptr(line2$),varptr(line2)
1277c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1277c     0C 4E 85 F1 | 	sub	fp, #12
12780     A7 26 02 FB | 	rdlong	local01, fp
12784     1C 4E 85 F1 | 	sub	fp, #28
12788     01 26 56 F2 | 	cmps	local01, #1 wc
1278c     24 00 90 CD |  if_b	jmp	#LR__1570
12790     FC 90 BF FD | 	call	#_pop
12794     04 4E 05 F1 | 	add	fp, #4
12798     A7 FA 61 FC | 	wrlong	result1, fp
1279c     04 4E 05 F1 | 	add	fp, #4
127a0     A7 FC 61 FC | 	wrlong	result2, fp
127a4     04 4E 05 F1 | 	add	fp, #4
127a8     A7 FE 61 FC | 	wrlong	result3, fp
127ac     0C 4E 85 F1 | 	sub	fp, #12
127b0     28 00 90 FD | 	jmp	#LR__1571
127b4                 | LR__1570
127b4     51 00 00 FF 
127b8     D8 E5 05 F1 | 	add	objptr, ##41944
127bc     F2 26 02 FB | 	rdlong	local01, objptr
127c0     51 00 00 FF 
127c4     D8 E5 85 F1 | 	sub	objptr, ##41944
127c8     04 4E 05 F1 | 	add	fp, #4
127cc     A7 26 62 FC | 	wrlong	local01, fp
127d0     08 4E 05 F1 | 	add	fp, #8
127d4     A7 3E 68 FC | 	wrlong	#31, fp
127d8     0C 4E 85 F1 | 	sub	fp, #12
127dc                 | LR__1571
127dc                 | ' 'print "popped "; t1.result.uresult, t1.result_type
127dc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
127dc     0C 4E 05 F1 | 	add	fp, #12
127e0     A7 26 02 FB | 	rdlong	local01, fp
127e4     0C 4E 85 F1 | 	sub	fp, #12
127e8     2B 26 0E F2 | 	cmp	local01, #43 wz
127ec     24 00 90 5D |  if_ne	jmp	#LR__1572
127f0     04 4E 05 F1 | 	add	fp, #4
127f4     A7 12 02 FB | 	rdlong	arg01, fp
127f8     04 4E 85 F1 | 	sub	fp, #4
127fc     08 92 BF FD | 	call	#_convertstring
12800     04 4E 05 F1 | 	add	fp, #4
12804     A7 FA 61 FC | 	wrlong	result1, fp
12808     08 4E 05 F1 | 	add	fp, #8
1280c     A7 3E 68 FC | 	wrlong	#31, fp
12810     0C 4E 85 F1 | 	sub	fp, #12
12814                 | LR__1572
12814                 | ' if t1.result_type=result_string then
12814     0C 4E 05 F1 | 	add	fp, #12
12818     A7 26 02 FB | 	rdlong	local01, fp
1281c     0C 4E 85 F1 | 	sub	fp, #12
12820     1F 26 0E F2 | 	cmp	local01, #31 wz
12824     E0 02 90 5D |  if_ne	jmp	#LR__1578
12828                 | '   if amode<>1234 then do_new
12828     A7 26 02 FB | 	rdlong	local01, fp
1282c     02 00 00 FF 
12830     D2 26 0E F2 | 	cmp	local01, ##1234 wz
12834     14 0E B0 5D |  if_ne	call	#_do_new
12838                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
12838     04 4E 05 F1 | 	add	fp, #4
1283c     A7 12 02 FB | 	rdlong	arg01, fp
12840     04 4E 85 F1 | 	sub	fp, #4
12844     90 01 00 FF 
12848     62 14 06 F6 | 	mov	arg02, ##@LR__5605
1284c     EC F3 B0 FD | 	call	#__system___string_cmp
12850     00 FA 0D F2 | 	cmp	result1, #0 wz
12854     24 00 90 5D |  if_ne	jmp	#LR__1573
12858     51 00 00 FF 
1285c     D8 E5 05 F1 | 	add	objptr, ##41944
12860     F2 26 02 FB | 	rdlong	local01, objptr
12864     51 00 00 FF 
12868     D8 E5 85 F1 | 	sub	objptr, ##41944
1286c     04 4E 05 F1 | 	add	fp, #4
12870     A7 26 62 FC | 	wrlong	local01, fp
12874     04 4E 85 F1 | 	sub	fp, #4
12878     20 00 90 FD | 	jmp	#LR__1574
1287c                 | LR__1573
1287c     04 4E 05 F1 | 	add	fp, #4
12880     A7 26 02 FB | 	rdlong	local01, fp
12884     04 4E 85 F1 | 	sub	fp, #4
12888     51 00 00 FF 
1288c     D8 E5 05 F1 | 	add	objptr, ##41944
12890     F2 26 62 FC | 	wrlong	local01, objptr
12894     51 00 00 FF 
12898     D8 E5 85 F1 | 	sub	objptr, ##41944
1289c                 | LR__1574
1289c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
1289c     09 12 06 F6 | 	mov	arg01, #9
128a0     0C 46 B1 FD | 	call	#__system__close
128a4     09 26 06 F6 | 	mov	local01, #9
128a8     4A 00 00 FF 
128ac     94 E4 05 F1 | 	add	objptr, ##38036
128b0     F2 12 02 FB | 	rdlong	arg01, objptr
128b4     4A 00 00 FF 
128b8     94 E4 85 F1 | 	sub	objptr, ##38036
128bc     90 01 00 FF 
128c0     63 14 06 F6 | 	mov	arg02, ##@LR__5606
128c4     A8 F3 B0 FD | 	call	#__system___string_concat
128c8     FD 12 02 F6 | 	mov	arg01, result1
128cc     04 4E 05 F1 | 	add	fp, #4
128d0     A7 14 02 FB | 	rdlong	arg02, fp
128d4     04 4E 85 F1 | 	sub	fp, #4
128d8     94 F3 B0 FD | 	call	#__system___string_concat
128dc     FD 14 02 F6 | 	mov	arg02, result1
128e0     13 13 02 F6 | 	mov	arg01, local01
128e4     00 16 06 F6 | 	mov	arg03, #0
128e8     2C FF B0 FD | 	call	#__system___basic_open_string
128ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
128f0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
128f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
128f8     14 4E 05 F1 | 	add	fp, #20
128fc     A7 FA 61 FC | 	wrlong	result1, fp
12900                 | '   r=geterr() 
12900                 | '   if r then 
12900     14 4E 85 F1 | 	sub	fp, #20
12904     50 01 90 AD |  if_e	jmp	#LR__1576
12908                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
12908     09 12 06 F6 | 	mov	arg01, #9
1290c     A0 45 B1 FD | 	call	#__system__close
12910     09 26 06 F6 | 	mov	local01, #9
12914     4A 00 00 FF 
12918     94 E4 05 F1 | 	add	objptr, ##38036
1291c     F2 12 02 FB | 	rdlong	arg01, objptr
12920     4A 00 00 FF 
12924     94 E4 85 F1 | 	sub	objptr, ##38036
12928     90 01 00 FF 
1292c     65 14 06 F6 | 	mov	arg02, ##@LR__5607
12930     3C F3 B0 FD | 	call	#__system___string_concat
12934     FD 12 02 F6 | 	mov	arg01, result1
12938     04 4E 05 F1 | 	add	fp, #4
1293c     A7 14 02 FB | 	rdlong	arg02, fp
12940     04 4E 85 F1 | 	sub	fp, #4
12944     28 F3 B0 FD | 	call	#__system___string_concat
12948     FD 12 02 F6 | 	mov	arg01, result1
1294c     90 01 00 FF 
12950     67 14 06 F6 | 	mov	arg02, ##@LR__5608
12954     18 F3 B0 FD | 	call	#__system___string_concat
12958     FD 14 02 F6 | 	mov	arg02, result1
1295c     13 13 02 F6 | 	mov	arg01, local01
12960     00 16 06 F6 | 	mov	arg03, #0
12964     B0 FE B0 FD | 	call	#__system___basic_open_string
12968     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1296c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
12970     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12974     14 4E 05 F1 | 	add	fp, #20
12978     A7 FA 61 FC | 	wrlong	result1, fp
1297c                 | '     r=geterr() 
1297c                 | '     if r then 
1297c     14 4E 85 F1 | 	sub	fp, #20
12980     A0 00 90 AD |  if_e	jmp	#LR__1575
12984                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
12984     00 12 06 F6 | 	mov	arg01, #0
12988     B4 4F B1 FD | 	call	#__system___getiolock_0574
1298c     FD 12 02 F6 | 	mov	arg01, result1
12990     80 F2 B0 FD | 	call	#__system___lockmem
12994     90 01 00 FF 
12998     6C 14 06 F6 | 	mov	arg02, ##@LR__5609
1299c     00 12 06 F6 | 	mov	arg01, #0
129a0     00 16 06 F6 | 	mov	arg03, #0
129a4     60 FF B0 FD | 	call	#__system___basic_print_string
129a8     14 4E 05 F1 | 	add	fp, #20
129ac     A7 14 02 FB | 	rdlong	arg02, fp
129b0     14 4E 85 F1 | 	sub	fp, #20
129b4     00 12 06 F6 | 	mov	arg01, #0
129b8     00 16 06 F6 | 	mov	arg03, #0
129bc     0A 18 06 F6 | 	mov	arg04, #10
129c0     88 FF B0 FD | 	call	#__system___basic_print_integer
129c4     90 01 00 FF 
129c8     7A 14 06 F6 | 	mov	arg02, ##@LR__5610
129cc     00 12 06 F6 | 	mov	arg01, #0
129d0     00 16 06 F6 | 	mov	arg03, #0
129d4     30 FF B0 FD | 	call	#__system___basic_print_string
129d8     00 26 06 F6 | 	mov	local01, #0
129dc     14 4E 05 F1 | 	add	fp, #20
129e0     A7 12 02 FB | 	rdlong	arg01, fp
129e4     14 4E 85 F1 | 	sub	fp, #20
129e8     F8 1A B1 FD | 	call	#__system___strerror
129ec     FD 14 02 F6 | 	mov	arg02, result1
129f0     13 13 02 F6 | 	mov	arg01, local01
129f4     00 16 06 F6 | 	mov	arg03, #0
129f8     0C FF B0 FD | 	call	#__system___basic_print_string
129fc     00 12 06 F6 | 	mov	arg01, #0
12a00     0A 14 06 F6 | 	mov	arg02, #10
12a04     00 16 06 F6 | 	mov	arg03, #0
12a08     A4 FE B0 FD | 	call	#__system___basic_print_char
12a0c     00 12 06 F6 | 	mov	arg01, #0
12a10     2C 4F B1 FD | 	call	#__system___getiolock_0574
12a14     FD 00 68 FC | 	wrlong	#0, result1
12a18     09 12 06 F6 | 	mov	arg01, #9
12a1c     90 44 B1 FD | 	call	#__system__close
12a20     94 01 90 FD | 	jmp	#LR__1580
12a24                 | LR__1575
12a24     51 00 00 FF 
12a28     D8 E5 05 F1 | 	add	objptr, ##41944
12a2c     F2 12 02 FB | 	rdlong	arg01, objptr
12a30     51 00 00 FF 
12a34     D8 E5 85 F1 | 	sub	objptr, ##41944
12a38     90 01 00 FF 
12a3c     7D 14 06 F6 | 	mov	arg02, ##@LR__5611
12a40     2C F2 B0 FD | 	call	#__system___string_concat
12a44     51 00 00 FF 
12a48     D8 E5 05 F1 | 	add	objptr, ##41944
12a4c     F2 FA 61 FC | 	wrlong	result1, objptr
12a50     51 00 00 FF 
12a54     D8 E5 85 F1 | 	sub	objptr, ##41944
12a58                 | LR__1576
12a58                 | '   close #9: open currentdir$+"/"+loadname for input as #9
12a58     09 12 06 F6 | 	mov	arg01, #9
12a5c     50 44 B1 FD | 	call	#__system__close
12a60     09 26 06 F6 | 	mov	local01, #9
12a64     4A 00 00 FF 
12a68     94 E4 05 F1 | 	add	objptr, ##38036
12a6c     F2 12 02 FB | 	rdlong	arg01, objptr
12a70     4A 00 00 FF 
12a74     94 E4 85 F1 | 	sub	objptr, ##38036
12a78     90 01 00 FF 
12a7c     82 14 06 F6 | 	mov	arg02, ##@LR__5612
12a80     EC F1 B0 FD | 	call	#__system___string_concat
12a84     FD 12 02 F6 | 	mov	arg01, result1
12a88     51 00 00 FF 
12a8c     D8 E5 05 F1 | 	add	objptr, ##41944
12a90     F2 14 02 FB | 	rdlong	arg02, objptr
12a94     51 00 00 FF 
12a98     D8 E5 85 F1 | 	sub	objptr, ##41944
12a9c     D0 F1 B0 FD | 	call	#__system___string_concat
12aa0     FD 14 02 F6 | 	mov	arg02, result1
12aa4     13 13 02 F6 | 	mov	arg01, local01
12aa8     00 16 06 F6 | 	mov	arg03, #0
12aac     68 FD B0 FD | 	call	#__system___basic_open_string
12ab0                 | '   do
12ab0                 | LR__1577
12ab0     09 12 06 F6 | 	mov	arg01, #9
12ab4     68 F3 B0 FD | 	call	#__system___basic_read_line
12ab8     FD 26 02 F6 | 	mov	local01, result1
12abc     37 00 00 FF 
12ac0     1C E4 05 F1 | 	add	objptr, ##28188
12ac4     F2 26 62 FC | 	wrlong	local01, objptr
12ac8     37 00 00 FF 
12acc     1C E4 85 F1 | 	sub	objptr, ##28188
12ad0     74 EC BE FD | 	call	#_interpret
12ad4     37 00 00 FF 
12ad8     1C E4 05 F1 | 	add	objptr, ##28188
12adc     F2 12 02 FB | 	rdlong	arg01, objptr
12ae0     37 00 00 FF 
12ae4     1C E4 85 F1 | 	sub	objptr, ##28188
12ae8     90 01 00 FF 
12aec     84 14 06 F6 | 	mov	arg02, ##@LR__5613
12af0     48 F1 B0 FD | 	call	#__system___string_cmp
12af4     00 FA 0D F2 | 	cmp	result1, #0 wz
12af8     B4 FF 9F 5D |  if_ne	jmp	#LR__1577
12afc                 | '   close #9   
12afc     09 12 06 F6 | 	mov	arg01, #9
12b00     AC 43 B1 FD | 	call	#__system__close
12b04     0C 00 90 FD | 	jmp	#LR__1579
12b08                 | LR__1578
12b08     1E 12 06 F6 | 	mov	arg01, #30
12b0c     00 14 06 F6 | 	mov	arg02, #0
12b10     E0 B7 B0 FD | 	call	#_printerror
12b14                 | LR__1579
12b14                 | ' print "Loaded ";currentdir$+"/"+loadname
12b14     00 12 06 F6 | 	mov	arg01, #0
12b18     24 4E B1 FD | 	call	#__system___getiolock_0574
12b1c     FD 12 02 F6 | 	mov	arg01, result1
12b20     F0 F0 B0 FD | 	call	#__system___lockmem
12b24     90 01 00 FF 
12b28     85 14 06 F6 | 	mov	arg02, ##@LR__5614
12b2c     00 12 06 F6 | 	mov	arg01, #0
12b30     00 16 06 F6 | 	mov	arg03, #0
12b34     D0 FD B0 FD | 	call	#__system___basic_print_string
12b38     00 26 06 F6 | 	mov	local01, #0
12b3c     4A 00 00 FF 
12b40     94 E4 05 F1 | 	add	objptr, ##38036
12b44     F2 12 02 FB | 	rdlong	arg01, objptr
12b48     4A 00 00 FF 
12b4c     94 E4 85 F1 | 	sub	objptr, ##38036
12b50     90 01 00 FF 
12b54     8D 14 06 F6 | 	mov	arg02, ##@LR__5615
12b58     14 F1 B0 FD | 	call	#__system___string_concat
12b5c     FD 12 02 F6 | 	mov	arg01, result1
12b60     51 00 00 FF 
12b64     D8 E5 05 F1 | 	add	objptr, ##41944
12b68     F2 14 02 FB | 	rdlong	arg02, objptr
12b6c     51 00 00 FF 
12b70     D8 E5 85 F1 | 	sub	objptr, ##41944
12b74     F8 F0 B0 FD | 	call	#__system___string_concat
12b78     FD 14 02 F6 | 	mov	arg02, result1
12b7c     13 13 02 F6 | 	mov	arg01, local01
12b80     00 16 06 F6 | 	mov	arg03, #0
12b84     80 FD B0 FD | 	call	#__system___basic_print_string
12b88     00 12 06 F6 | 	mov	arg01, #0
12b8c     0A 14 06 F6 | 	mov	arg02, #10
12b90     00 16 06 F6 | 	mov	arg03, #0
12b94     18 FD B0 FD | 	call	#__system___basic_print_char
12b98     00 12 06 F6 | 	mov	arg01, #0
12b9c     A0 4D B1 FD | 	call	#__system___getiolock_0574
12ba0     FD 00 68 FC | 	wrlong	#0, result1
12ba4     51 00 00 FF 
12ba8     E8 E5 05 F1 | 	add	objptr, ##41960
12bac     F2 00 68 FC | 	wrlong	#0, objptr
12bb0     51 00 00 FF 
12bb4     E8 E5 85 F1 | 	sub	objptr, ##41960
12bb8                 | LR__1580
12bb8     A7 F0 03 F6 | 	mov	ptra, fp
12bbc     B2 00 A0 FD | 	call	#popregs_
12bc0                 | _do_load_ret
12bc0     2D 00 64 FD | 	ret
12bc4                 | 
12bc4                 | ' 
12bc4                 | ' '-------------------- log
12bc4                 | ' 
12bc4                 | ' sub do_log
12bc4                 | _do_log
12bc4     01 4A 05 F6 | 	mov	COUNT_, #1
12bc8     A8 00 A0 FD | 	call	#pushregs_
12bcc     14 F0 07 F1 | 	add	ptra, #20
12bd0     4A 00 00 FF 
12bd4     80 E4 05 F1 | 	add	objptr, ##38016
12bd8     F2 26 02 FB | 	rdlong	local01, objptr
12bdc     13 17 02 F6 | 	mov	arg03, local01
12be0     01 16 66 F0 | 	shl	arg03, #1
12be4     13 17 02 F1 | 	add	arg03, local01
12be8     02 16 66 F0 | 	shl	arg03, #2
12bec     03 00 00 FF 
12bf0     04 E4 85 F1 | 	sub	objptr, ##1540
12bf4     F2 16 02 F1 | 	add	arg03, objptr
12bf8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
12bfc     0C 4E 05 F1 | 	add	fp, #12
12c00     A7 16 62 FC | 	wrlong	arg03, fp
12c04                 | ' 
12c04                 | ' numpar=compiledline(lineptr_e).result.uresult
12c04                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
12c04     0C 4E 85 F1 | 	sub	fp, #12
12c08     47 00 00 FF 
12c0c     7C E4 85 F1 | 	sub	objptr, ##36476
12c10     0C 4E 05 51 |  if_ne	add	fp, #12
12c14     A7 26 02 5B |  if_ne	rdlong	local01, fp
12c18     0C 4E 85 51 |  if_ne	sub	fp, #12
12c1c     03 26 16 52 |  if_ne	cmp	local01, #3 wc
12c20     40 00 90 4D |  if_c_and_nz	jmp	#LR__1590
12c24     00 12 06 F6 | 	mov	arg01, #0
12c28     14 4D B1 FD | 	call	#__system___getiolock_0574
12c2c     FD 12 02 F6 | 	mov	arg01, result1
12c30     E0 EF B0 FD | 	call	#__system___lockmem
12c34     90 01 00 FF 
12c38     8F 14 06 F6 | 	mov	arg02, ##@LR__5616
12c3c     00 12 06 F6 | 	mov	arg01, #0
12c40     00 16 06 F6 | 	mov	arg03, #0
12c44     C0 FC B0 FD | 	call	#__system___basic_print_string
12c48     00 12 06 F6 | 	mov	arg01, #0
12c4c     F0 4C B1 FD | 	call	#__system___getiolock_0574
12c50     FD 00 68 FC | 	wrlong	#0, result1
12c54     27 12 06 F6 | 	mov	arg01, #39
12c58     00 14 06 F6 | 	mov	arg02, #0
12c5c     94 B6 B0 FD | 	call	#_printerror
12c60     D0 00 90 FD | 	jmp	#LR__1593
12c64                 | LR__1590
12c64                 | ' if numpar=2 then 
12c64     0C 4E 05 F1 | 	add	fp, #12
12c68     A7 26 02 FB | 	rdlong	local01, fp
12c6c     0C 4E 85 F1 | 	sub	fp, #12
12c70     02 26 0E F2 | 	cmp	local01, #2 wz
12c74     48 00 90 5D |  if_ne	jmp	#LR__1591
12c78     14 8C BF FD | 	call	#_pop
12c7c     FF 26 02 F6 | 	mov	local01, result3
12c80     A7 FA 61 FC | 	wrlong	result1, fp
12c84     04 4E 05 F1 | 	add	fp, #4
12c88     A7 FC 61 FC | 	wrlong	result2, fp
12c8c     04 4E 05 F1 | 	add	fp, #4
12c90     A7 26 62 FC | 	wrlong	local01, fp
12c94     08 4E 85 F1 | 	sub	fp, #8
12c98     A7 12 02 F6 | 	mov	arg01, fp
12c9c     90 8E BF FD | 	call	#_converttofloat
12ca0     FD 14 02 F6 | 	mov	arg02, result1
12ca4     FC 16 20 FF 
12ca8     54 12 06 F6 | 	mov	arg01, ##1076754516
12cac     F0 2C B1 FD | 	call	#__system____builtin_logbase
12cb0     10 4E 05 F1 | 	add	fp, #16
12cb4     A7 FA 61 FC | 	wrlong	result1, fp
12cb8     10 4E 85 F1 | 	sub	fp, #16
12cbc     10 00 90 FD | 	jmp	#LR__1592
12cc0                 | LR__1591
12cc0     10 4E 05 F1 | 	add	fp, #16
12cc4     00 C0 9F FF 
12cc8     A7 00 68 FC | 	wrlong	##1065353216, fp
12ccc     10 4E 85 F1 | 	sub	fp, #16
12cd0                 | LR__1592
12cd0     BC 8B BF FD | 	call	#_pop
12cd4     FF 26 02 F6 | 	mov	local01, result3
12cd8     A7 FA 61 FC | 	wrlong	result1, fp
12cdc     04 4E 05 F1 | 	add	fp, #4
12ce0     A7 FC 61 FC | 	wrlong	result2, fp
12ce4     04 4E 05 F1 | 	add	fp, #4
12ce8     A7 26 62 FC | 	wrlong	local01, fp
12cec     08 4E 85 F1 | 	sub	fp, #8
12cf0     A7 12 02 F6 | 	mov	arg01, fp
12cf4     38 8E BF FD | 	call	#_converttofloat
12cf8     FD 14 02 F6 | 	mov	arg02, result1
12cfc     FC 16 20 FF 
12d00     54 12 06 F6 | 	mov	arg01, ##1076754516
12d04     98 2C B1 FD | 	call	#__system____builtin_logbase
12d08     FD 12 02 F6 | 	mov	arg01, result1
12d0c     10 4E 05 F1 | 	add	fp, #16
12d10     A7 14 02 FB | 	rdlong	arg02, fp
12d14     10 4E 85 F1 | 	sub	fp, #16
12d18     B8 1E B1 FD | 	call	#__system___float_div
12d1c     A7 FA 61 FC | 	wrlong	result1, fp
12d20     08 4E 05 F1 | 	add	fp, #8
12d24     A7 3C 68 FC | 	wrlong	#30, fp
12d28     08 4E 85 F1 | 	sub	fp, #8
12d2c     A7 12 02 F6 | 	mov	arg01, fp
12d30     F4 8B BF FD | 	call	#_push
12d34                 | LR__1593
12d34     A7 F0 03 F6 | 	mov	ptra, fp
12d38     B2 00 A0 FD | 	call	#popregs_
12d3c                 | _do_log_ret
12d3c     2D 00 64 FD | 	ret
12d40                 | 
12d40                 | ' 
12d40                 | ' '-------------------- lpeek
12d40                 | ' 
12d40                 | ' sub do_lpeek
12d40                 | _do_lpeek
12d40     00 4A 05 F6 | 	mov	COUNT_, #0
12d44     A8 00 A0 FD | 	call	#pushregs_
12d48     14 F0 07 F1 | 	add	ptra, #20
12d4c     40 8B BF FD | 	call	#_pop
12d50     A7 FA 61 FC | 	wrlong	result1, fp
12d54     04 4E 05 F1 | 	add	fp, #4
12d58     A7 FC 61 FC | 	wrlong	result2, fp
12d5c     04 4E 05 F1 | 	add	fp, #4
12d60     A7 FE 61 FC | 	wrlong	result3, fp
12d64     08 4E 85 F1 | 	sub	fp, #8
12d68     A7 12 02 F6 | 	mov	arg01, fp
12d6c     04 8D BF FD | 	call	#_converttoint
12d70     0C 4E 05 F1 | 	add	fp, #12
12d74     A7 FA 61 FC | 	wrlong	result1, fp
12d78                 | ' 
12d78                 | ' t1=pop()
12d78                 | ' a=converttoint(t1)
12d78                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
12d78     0C 4E 85 F1 | 	sub	fp, #12
12d7c     00 04 00 FF 
12d80     00 FA 15 F2 | 	cmp	result1, ##524288 wc
12d84     1C 00 90 3D |  if_ae	jmp	#LR__1600
12d88     0C 4E 05 F1 | 	add	fp, #12
12d8c     A7 12 02 FB | 	rdlong	arg01, fp
12d90     09 FB 01 FB | 	rdlong	result1, arg01
12d94     04 4E 05 F1 | 	add	fp, #4
12d98     A7 FA 61 FC | 	wrlong	result1, fp
12d9c     10 4E 85 F1 | 	sub	fp, #16
12da0     1C 00 90 FD | 	jmp	#LR__1601
12da4                 | LR__1600
12da4     0C 4E 05 F1 | 	add	fp, #12
12da8     A7 12 02 FB | 	rdlong	arg01, fp
12dac     0C 4E 85 F1 | 	sub	fp, #12
12db0     FC B7 B0 FD | 	call	#_pslpeek
12db4     10 4E 05 F1 | 	add	fp, #16
12db8     A7 FA 61 FC | 	wrlong	result1, fp
12dbc     10 4E 85 F1 | 	sub	fp, #16
12dc0                 | LR__1601
12dc0     08 4E 05 F1 | 	add	fp, #8
12dc4     A7 3A 68 FC | 	wrlong	#29, fp
12dc8     08 4E 05 F1 | 	add	fp, #8
12dcc     A7 12 02 FB | 	rdlong	arg01, fp
12dd0     10 4E 85 F1 | 	sub	fp, #16
12dd4     A7 12 62 FC | 	wrlong	arg01, fp
12dd8     A7 12 02 F6 | 	mov	arg01, fp
12ddc     48 8B BF FD | 	call	#_push
12de0     A7 F0 03 F6 | 	mov	ptra, fp
12de4     B2 00 A0 FD | 	call	#popregs_
12de8                 | _do_lpeek_ret
12de8     2D 00 64 FD | 	ret
12dec                 | 
12dec                 | ' 
12dec                 | ' '-------------------- lpoke
12dec                 | ' 
12dec                 | ' sub do_lpoke
12dec                 | _do_lpoke
12dec     01 4A 05 F6 | 	mov	COUNT_, #1
12df0     A8 00 A0 FD | 	call	#pushregs_
12df4     20 F0 07 F1 | 	add	ptra, #32
12df8     94 8A BF FD | 	call	#_pop
12dfc     FD 14 02 F6 | 	mov	arg02, result1
12e00     FE 12 02 F6 | 	mov	arg01, result2
12e04     FF 26 02 F6 | 	mov	local01, result3
12e08     A7 14 62 FC | 	wrlong	arg02, fp
12e0c     04 4E 05 F1 | 	add	fp, #4
12e10     A7 12 62 FC | 	wrlong	arg01, fp
12e14     04 4E 05 F1 | 	add	fp, #4
12e18     A7 26 62 FC | 	wrlong	local01, fp
12e1c     08 4E 85 F1 | 	sub	fp, #8
12e20     6C 8A BF FD | 	call	#_pop
12e24     FF 26 02 F6 | 	mov	local01, result3
12e28     0C 4E 05 F1 | 	add	fp, #12
12e2c     A7 FA 61 FC | 	wrlong	result1, fp
12e30     04 4E 05 F1 | 	add	fp, #4
12e34     A7 FC 61 FC | 	wrlong	result2, fp
12e38     04 4E 05 F1 | 	add	fp, #4
12e3c     A7 26 62 FC | 	wrlong	local01, fp
12e40     08 4E 85 F1 | 	sub	fp, #8
12e44     A7 12 02 F6 | 	mov	arg01, fp
12e48     0C 4E 85 F1 | 	sub	fp, #12
12e4c     24 8C BF FD | 	call	#_converttoint
12e50     18 4E 05 F1 | 	add	fp, #24
12e54     A7 FA 61 FC | 	wrlong	result1, fp
12e58     18 4E 85 F1 | 	sub	fp, #24
12e5c     A7 12 02 F6 | 	mov	arg01, fp
12e60     10 8C BF FD | 	call	#_converttoint
12e64     1C 4E 05 F1 | 	add	fp, #28
12e68     A7 FA 61 FC | 	wrlong	result1, fp
12e6c                 | ' 
12e6c                 | ' t1=pop() 'value
12e6c                 | ' t2=pop() 
12e6c                 | ' a=converttoint(t2) : v=converttoint(t1)
12e6c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
12e6c     04 4E 85 F1 | 	sub	fp, #4
12e70     A7 26 02 FB | 	rdlong	local01, fp
12e74     18 4E 85 F1 | 	sub	fp, #24
12e78     00 04 00 FF 
12e7c     00 26 16 F2 | 	cmp	local01, ##524288 wc
12e80     1C 00 90 3D |  if_ae	jmp	#LR__1610
12e84     18 4E 05 F1 | 	add	fp, #24
12e88     A7 12 02 FB | 	rdlong	arg01, fp
12e8c     04 4E 05 F1 | 	add	fp, #4
12e90     A7 14 02 FB | 	rdlong	arg02, fp
12e94     1C 4E 85 F1 | 	sub	fp, #28
12e98     09 15 62 FC | 	wrlong	arg02, arg01
12e9c     18 00 90 FD | 	jmp	#LR__1611
12ea0                 | LR__1610
12ea0     18 4E 05 F1 | 	add	fp, #24
12ea4     A7 12 02 FB | 	rdlong	arg01, fp
12ea8     04 4E 05 F1 | 	add	fp, #4
12eac     A7 14 02 FB | 	rdlong	arg02, fp
12eb0     1C 4E 85 F1 | 	sub	fp, #28
12eb4     C8 B5 B0 FD | 	call	#_pslpoke
12eb8                 | LR__1611
12eb8     A7 F0 03 F6 | 	mov	ptra, fp
12ebc     B2 00 A0 FD | 	call	#popregs_
12ec0                 | _do_lpoke_ret
12ec0     2D 00 64 FD | 	ret
12ec4                 | 
12ec4                 | ' 
12ec4                 | ' '-------------------- mid$
12ec4                 | ' 
12ec4                 | ' sub do_mid
12ec4                 | _do_mid
12ec4     00 4A 05 F6 | 	mov	COUNT_, #0
12ec8     A8 00 A0 FD | 	call	#pushregs_
12ecc     18 F0 07 F1 | 	add	ptra, #24
12ed0     4A 00 00 FF 
12ed4     80 E4 05 F1 | 	add	objptr, ##38016
12ed8     F2 16 02 FB | 	rdlong	arg03, objptr
12edc     0B 15 02 F6 | 	mov	arg02, arg03
12ee0     01 14 66 F0 | 	shl	arg02, #1
12ee4     0B 15 02 F1 | 	add	arg02, arg03
12ee8     02 14 66 F0 | 	shl	arg02, #2
12eec     03 00 00 FF 
12ef0     04 E4 85 F1 | 	sub	objptr, ##1540
12ef4     F2 14 02 F1 | 	add	arg02, objptr
12ef8     0A 17 02 FB | 	rdlong	arg03, arg02
12efc     0C 4E 05 F1 | 	add	fp, #12
12f00     A7 16 62 FC | 	wrlong	arg03, fp
12f04                 | ' 
12f04                 | ' numpar=compiledline(lineptr_e).result.uresult
12f04                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
12f04     0C 4E 85 F1 | 	sub	fp, #12
12f08     03 16 0E F2 | 	cmp	arg03, #3 wz
12f0c     47 00 00 FF 
12f10     7C E4 85 F1 | 	sub	objptr, ##36476
12f14     40 00 90 AD |  if_e	jmp	#LR__1620
12f18     00 12 06 F6 | 	mov	arg01, #0
12f1c     20 4A B1 FD | 	call	#__system___getiolock_0574
12f20     FD 12 02 F6 | 	mov	arg01, result1
12f24     EC EC B0 FD | 	call	#__system___lockmem
12f28     90 01 00 FF 
12f2c     95 14 06 F6 | 	mov	arg02, ##@LR__5617
12f30     00 12 06 F6 | 	mov	arg01, #0
12f34     00 16 06 F6 | 	mov	arg03, #0
12f38     CC F9 B0 FD | 	call	#__system___basic_print_string
12f3c     00 12 06 F6 | 	mov	arg01, #0
12f40     FC 49 B1 FD | 	call	#__system___getiolock_0574
12f44     FD 00 68 FC | 	wrlong	#0, result1
12f48     27 12 06 F6 | 	mov	arg01, #39
12f4c     00 14 06 F6 | 	mov	arg02, #0
12f50     A0 B3 B0 FD | 	call	#_printerror
12f54     2C 01 90 FD | 	jmp	#LR__1623
12f58                 | LR__1620
12f58     34 89 BF FD | 	call	#_pop
12f5c     FF 16 02 F6 | 	mov	arg03, result3
12f60     A7 FA 61 FC | 	wrlong	result1, fp
12f64     04 4E 05 F1 | 	add	fp, #4
12f68     A7 FC 61 FC | 	wrlong	result2, fp
12f6c     04 4E 05 F1 | 	add	fp, #4
12f70     A7 16 62 FC | 	wrlong	arg03, fp
12f74     08 4E 85 F1 | 	sub	fp, #8
12f78     A7 12 02 F6 | 	mov	arg01, fp
12f7c     F4 8A BF FD | 	call	#_converttoint
12f80     FD 16 02 F6 | 	mov	arg03, result1
12f84     14 4E 05 F1 | 	add	fp, #20
12f88     A7 16 62 FC | 	wrlong	arg03, fp
12f8c     14 4E 85 F1 | 	sub	fp, #20
12f90     FC 88 BF FD | 	call	#_pop
12f94     FF 16 02 F6 | 	mov	arg03, result3
12f98     A7 FA 61 FC | 	wrlong	result1, fp
12f9c     04 4E 05 F1 | 	add	fp, #4
12fa0     A7 FC 61 FC | 	wrlong	result2, fp
12fa4     04 4E 05 F1 | 	add	fp, #4
12fa8     A7 16 62 FC | 	wrlong	arg03, fp
12fac     08 4E 85 F1 | 	sub	fp, #8
12fb0     A7 12 02 F6 | 	mov	arg01, fp
12fb4     BC 8A BF FD | 	call	#_converttoint
12fb8     FD 16 02 F6 | 	mov	arg03, result1
12fbc     10 4E 05 F1 | 	add	fp, #16
12fc0     A7 16 62 FC | 	wrlong	arg03, fp
12fc4     10 4E 85 F1 | 	sub	fp, #16
12fc8     C4 88 BF FD | 	call	#_pop
12fcc     FF 16 02 F6 | 	mov	arg03, result3
12fd0     A7 FA 61 FC | 	wrlong	result1, fp
12fd4     04 4E 05 F1 | 	add	fp, #4
12fd8     A7 FC 61 FC | 	wrlong	result2, fp
12fdc     04 4E 05 F1 | 	add	fp, #4
12fe0     A7 16 62 FC | 	wrlong	arg03, fp
12fe4                 | ' t1=pop() : arg2=converttoint(t1)
12fe4                 | ' t1=pop() : arg1=converttoint(t1)
12fe4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12fe4     08 4E 85 F1 | 	sub	fp, #8
12fe8     2B 16 0E F2 | 	cmp	arg03, #43 wz
12fec     18 00 90 5D |  if_ne	jmp	#LR__1621
12ff0     A7 12 02 FB | 	rdlong	arg01, fp
12ff4     10 8A BF FD | 	call	#_convertstring
12ff8     A7 FA 61 FC | 	wrlong	result1, fp
12ffc     08 4E 05 F1 | 	add	fp, #8
13000     A7 3E 68 FC | 	wrlong	#31, fp
13004     08 4E 85 F1 | 	sub	fp, #8
13008                 | LR__1621
13008                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13008     08 4E 05 F1 | 	add	fp, #8
1300c     A7 16 02 FB | 	rdlong	arg03, fp
13010     08 4E 85 F1 | 	sub	fp, #8
13014     1F 16 0E F2 | 	cmp	arg03, #31 wz
13018     40 00 90 AD |  if_e	jmp	#LR__1622
1301c     00 12 06 F6 | 	mov	arg01, #0
13020     1C 49 B1 FD | 	call	#__system___getiolock_0574
13024     FD 12 02 F6 | 	mov	arg01, result1
13028     E8 EB B0 FD | 	call	#__system___lockmem
1302c     90 01 00 FF 
13030     9C 14 06 F6 | 	mov	arg02, ##@LR__5618
13034     00 12 06 F6 | 	mov	arg01, #0
13038     00 16 06 F6 | 	mov	arg03, #0
1303c     C8 F8 B0 FD | 	call	#__system___basic_print_string
13040     00 12 06 F6 | 	mov	arg01, #0
13044     F8 48 B1 FD | 	call	#__system___getiolock_0574
13048     FD 00 68 FC | 	wrlong	#0, result1
1304c     0F 12 06 F6 | 	mov	arg01, #15
13050     00 14 06 F6 | 	mov	arg02, #0
13054     9C B2 B0 FD | 	call	#_printerror
13058     28 00 90 FD | 	jmp	#LR__1623
1305c                 | LR__1622
1305c     A7 12 02 FB | 	rdlong	arg01, fp
13060     10 4E 05 F1 | 	add	fp, #16
13064     A7 14 02 FB | 	rdlong	arg02, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 16 02 FB | 	rdlong	arg03, fp
13070     14 4E 85 F1 | 	sub	fp, #20
13074     30 0D B1 FD | 	call	#__system__Mid_S
13078     A7 FA 61 FC | 	wrlong	result1, fp
1307c     A7 12 02 F6 | 	mov	arg01, fp
13080     A4 88 BF FD | 	call	#_push
13084                 | LR__1623
13084     A7 F0 03 F6 | 	mov	ptra, fp
13088     B2 00 A0 FD | 	call	#popregs_
1308c                 | _do_mid_ret
1308c     2D 00 64 FD | 	ret
13090                 | 
13090                 | ' 
13090                 | ' '-------------------- mkdir
13090                 | ' 
13090                 | ' sub do_mkdir
13090                 | _do_mkdir
13090     04 4A 05 F6 | 	mov	COUNT_, #4
13094     A8 00 A0 FD | 	call	#pushregs_
13098     F4 87 BF FD | 	call	#_pop
1309c     FE 18 02 F6 | 	mov	arg04, result2
130a0     FF 16 02 F6 | 	mov	arg03, result3
130a4     FD 26 02 F6 | 	mov	local01, result1
130a8     0C 29 02 F6 | 	mov	local02, arg04
130ac     0B 2B 02 F6 | 	mov	local03, arg03
130b0                 | ' 
130b0                 | ' t1=pop()
130b0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
130b0     2B 2A 0E F2 | 	cmp	local03, #43 wz
130b4     10 00 90 5D |  if_ne	jmp	#LR__1630
130b8     13 13 02 F6 | 	mov	arg01, local01
130bc     48 89 BF FD | 	call	#_convertstring
130c0     FD 26 02 F6 | 	mov	local01, result1
130c4     1F 2A 06 F6 | 	mov	local03, #31
130c8                 | LR__1630
130c8                 | ' if t1.result_type<>result_string then printerror(15): return
130c8     1F 2A 0E F2 | 	cmp	local03, #31 wz
130cc     10 00 90 AD |  if_e	jmp	#LR__1631
130d0     0F 12 06 F6 | 	mov	arg01, #15
130d4     00 14 06 F6 | 	mov	arg02, #0
130d8     18 B2 B0 FD | 	call	#_printerror
130dc     70 00 90 FD | 	jmp	#LR__1633
130e0                 | LR__1631
130e0     13 13 02 F6 | 	mov	arg01, local01
130e4     BC 3F B1 FD | 	call	#__system__mkdir
130e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
130ec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
130f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
130f4     FD 2C 0A F6 | 	mov	local04, result1 wz
130f8                 | ' filename$=t1.result.sresult
130f8                 | ' mkdir(filename$)
130f8                 | ' err=geterr() : if err<>0 then print "Cannot create a directory: system error "; err
130f8     54 00 90 AD |  if_e	jmp	#LR__1632
130fc     00 12 06 F6 | 	mov	arg01, #0
13100     3C 48 B1 FD | 	call	#__system___getiolock_0574
13104     FD 12 02 F6 | 	mov	arg01, result1
13108     08 EB B0 FD | 	call	#__system___lockmem
1310c     90 01 00 FF 
13110     A3 14 06 F6 | 	mov	arg02, ##@LR__5619
13114     00 12 06 F6 | 	mov	arg01, #0
13118     00 16 06 F6 | 	mov	arg03, #0
1311c     E8 F7 B0 FD | 	call	#__system___basic_print_string
13120     00 12 06 F6 | 	mov	arg01, #0
13124     16 15 02 F6 | 	mov	arg02, local04
13128     00 16 06 F6 | 	mov	arg03, #0
1312c     0A 18 06 F6 | 	mov	arg04, #10
13130     18 F8 B0 FD | 	call	#__system___basic_print_integer
13134     00 12 06 F6 | 	mov	arg01, #0
13138     0A 14 06 F6 | 	mov	arg02, #10
1313c     00 16 06 F6 | 	mov	arg03, #0
13140     6C F7 B0 FD | 	call	#__system___basic_print_char
13144     00 12 06 F6 | 	mov	arg01, #0
13148     F4 47 B1 FD | 	call	#__system___getiolock_0574
1314c     FD 00 68 FC | 	wrlong	#0, result1
13150                 | LR__1632
13150                 | LR__1633
13150     A7 F0 03 F6 | 	mov	ptra, fp
13154     B2 00 A0 FD | 	call	#popregs_
13158                 | _do_mkdir_ret
13158     2D 00 64 FD | 	ret
1315c                 | 
1315c                 | ' 
1315c                 | ' '-------------------- mode
1315c                 | ' 
1315c                 | ' sub do_mode
1315c                 | _do_mode
1315c     05 4A 05 F6 | 	mov	COUNT_, #5
13160     A8 00 A0 FD | 	call	#pushregs_
13164     28 87 BF FD | 	call	#_pop
13168     FD 26 02 F6 | 	mov	local01, result1
1316c     FE 28 02 F6 | 	mov	local02, result2
13170     FF 2A 02 F6 | 	mov	local03, result3
13174                 | ' t1=pop() 
13174                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13174     1E 2A 0E F2 | 	cmp	local03, #30 wz
13178     10 00 90 5D |  if_ne	jmp	#LR__1640
1317c     13 13 02 F6 | 	mov	arg01, local01
13180     00 14 06 F6 | 	mov	arg02, #0
13184     10 1D B1 FD | 	call	#__system___float_tointeger
13188     FD 26 02 F6 | 	mov	local01, result1
1318c                 | LR__1640
1318c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1318c     1F 2A 0E F2 | 	cmp	local03, #31 wz
13190     18 00 90 5D |  if_ne	jmp	#LR__1641
13194     13 13 02 F6 | 	mov	arg01, local01
13198     40 20 B1 FD | 	call	#__system____builtin_atof
1319c     FD 12 02 F6 | 	mov	arg01, result1
131a0     00 14 06 F6 | 	mov	arg02, #0
131a4     F0 1C B1 FD | 	call	#__system___float_tointeger
131a8     FD 26 02 F6 | 	mov	local01, result1
131ac                 | LR__1641
131ac                 | ' select case t1.result.iresult
131ac     13 2D 02 F6 | 	mov	local04, local01
131b0     05 2C 26 F3 | 	fle	local04, #5
131b4     30 2C 62 FD | 	jmprel	local04
131b8                 | LR__1642
131b8     14 00 90 FD | 	jmp	#LR__1643
131bc     A8 00 90 FD | 	jmp	#LR__1644
131c0     10 01 90 FD | 	jmp	#LR__1645
131c4     78 01 90 FD | 	jmp	#LR__1646
131c8     E0 01 90 FD | 	jmp	#LR__1647
131cc     70 02 90 FD | 	jmp	#LR__1648
131d0                 | LR__1643
131d0     37 00 00 FF 
131d4     40 E4 05 F1 | 	add	objptr, ##28224
131d8     F2 02 68 FC | 	wrlong	#1, objptr
131dc     04 E4 85 F1 | 	sub	objptr, #4
131e0     F2 34 69 FC | 	wrlong	#154, objptr
131e4     19 00 00 FF 
131e8     D8 E4 05 F1 | 	add	objptr, ##13016
131ec     F2 02 68 FC | 	wrlong	#1, objptr
131f0     19 00 00 FF 
131f4     DC E4 85 F1 | 	sub	objptr, ##13020
131f8     F2 26 69 FC | 	wrlong	#147, objptr
131fc     37 00 00 FF 
13200     38 E4 85 F1 | 	sub	objptr, ##28216
13204     04 12 06 F6 | 	mov	arg01, #4
13208     7C CC B0 FD | 	call	#_hg010b_spin2_setfontfamily
1320c     37 00 00 FF 
13210     3C E4 05 F1 | 	add	objptr, ##28220
13214     F2 12 02 FB | 	rdlong	arg01, objptr
13218     04 E4 85 F1 | 	sub	objptr, #4
1321c     F2 14 02 FB | 	rdlong	arg02, objptr
13220                 | ' 
13220                 | ' write_color:=ff
13220     36 00 00 FF 
13224     F7 E5 85 F1 | 	sub	objptr, ##28151
13228     F2 12 62 FC | 	wrlong	arg01, objptr
1322c                 | ' write_background:=bb
1322c     04 E4 05 F1 | 	add	objptr, #4
13230     F2 14 62 FC | 	wrlong	arg02, objptr
13234     01 00 00 FF 
13238     00 EA 05 F1 | 	add	ptr__dat__, ##512
1323c     51 00 00 FF 
13240     73 E5 05 F1 | 	add	objptr, ##41843
13244     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13248     04 E4 85 F1 | 	sub	objptr, #4
1324c     03 00 80 FF 
13250     F2 30 69 FC | 	wrlong	##1688, objptr
13254     51 00 00 FF 
13258     B4 E5 85 F1 | 	sub	objptr, ##41908
1325c     01 00 00 FF 
13260     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13264     D8 01 90 FD | 	jmp	#LR__1648
13268                 | LR__1644
13268     37 00 00 FF 
1326c     40 E4 05 F1 | 	add	objptr, ##28224
13270     F2 00 68 FC | 	wrlong	#0, objptr
13274     04 E4 85 F1 | 	sub	objptr, #4
13278     F2 2E 68 FC | 	wrlong	#23, objptr
1327c     19 00 00 FF 
13280     D8 E4 05 F1 | 	add	objptr, ##13016
13284     F2 00 68 FC | 	wrlong	#0, objptr
13288     19 00 00 FF 
1328c     DC E4 85 F1 | 	sub	objptr, ##13020
13290     F2 00 68 FC | 	wrlong	#0, objptr
13294     37 00 00 FF 
13298     38 E4 85 F1 | 	sub	objptr, ##28216
1329c     00 12 06 F6 | 	mov	arg01, #0
132a0     E4 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
132a4     37 00 00 FF 
132a8     3C E4 05 F1 | 	add	objptr, ##28220
132ac     F2 12 02 FB | 	rdlong	arg01, objptr
132b0     04 E4 85 F1 | 	sub	objptr, #4
132b4     F2 14 02 FB | 	rdlong	arg02, objptr
132b8                 | ' 
132b8                 | ' write_color:=ff
132b8     36 00 00 FF 
132bc     F7 E5 85 F1 | 	sub	objptr, ##28151
132c0     F2 12 62 FC | 	wrlong	arg01, objptr
132c4                 | ' write_background:=bb
132c4     04 E4 05 F1 | 	add	objptr, #4
132c8     F2 14 62 FC | 	wrlong	arg02, objptr
132cc     45 E4 85 F1 | 	sub	objptr, #69
132d0     6C 01 90 FD | 	jmp	#LR__1648
132d4                 | LR__1645
132d4     37 00 00 FF 
132d8     40 E4 05 F1 | 	add	objptr, ##28224
132dc     F2 00 68 FC | 	wrlong	#0, objptr
132e0     04 E4 85 F1 | 	sub	objptr, #4
132e4     F2 6A 69 FC | 	wrlong	#181, objptr
132e8     19 00 00 FF 
132ec     D8 E4 05 F1 | 	add	objptr, ##13016
132f0     F2 00 68 FC | 	wrlong	#0, objptr
132f4     19 00 00 FF 
132f8     DC E4 85 F1 | 	sub	objptr, ##13020
132fc     F2 00 68 FC | 	wrlong	#0, objptr
13300     37 00 00 FF 
13304     38 E4 85 F1 | 	sub	objptr, ##28216
13308     00 12 06 F6 | 	mov	arg01, #0
1330c     78 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
13310     37 00 00 FF 
13314     3C E4 05 F1 | 	add	objptr, ##28220
13318     F2 12 02 FB | 	rdlong	arg01, objptr
1331c     04 E4 85 F1 | 	sub	objptr, #4
13320     F2 14 02 FB | 	rdlong	arg02, objptr
13324                 | ' 
13324                 | ' write_color:=ff
13324     36 00 00 FF 
13328     F7 E5 85 F1 | 	sub	objptr, ##28151
1332c     F2 12 62 FC | 	wrlong	arg01, objptr
13330                 | ' write_background:=bb
13330     04 E4 05 F1 | 	add	objptr, #4
13334     F2 14 62 FC | 	wrlong	arg02, objptr
13338     45 E4 85 F1 | 	sub	objptr, #69
1333c     00 01 90 FD | 	jmp	#LR__1648
13340                 | LR__1646
13340     37 00 00 FF 
13344     40 E4 05 F1 | 	add	objptr, ##28224
13348     F2 00 68 FC | 	wrlong	#0, objptr
1334c     04 E4 85 F1 | 	sub	objptr, #4
13350     F2 1E 68 FC | 	wrlong	#15, objptr
13354     19 00 00 FF 
13358     D8 E4 05 F1 | 	add	objptr, ##13016
1335c     F2 00 68 FC | 	wrlong	#0, objptr
13360     19 00 00 FF 
13364     DC E4 85 F1 | 	sub	objptr, ##13020
13368     F2 00 68 FC | 	wrlong	#0, objptr
1336c     37 00 00 FF 
13370     38 E4 85 F1 | 	sub	objptr, ##28216
13374     00 12 06 F6 | 	mov	arg01, #0
13378     0C CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
1337c     37 00 00 FF 
13380     3C E4 05 F1 | 	add	objptr, ##28220
13384     F2 12 02 FB | 	rdlong	arg01, objptr
13388     04 E4 85 F1 | 	sub	objptr, #4
1338c     F2 14 02 FB | 	rdlong	arg02, objptr
13390                 | ' 
13390                 | ' write_color:=ff
13390     36 00 00 FF 
13394     F7 E5 85 F1 | 	sub	objptr, ##28151
13398     F2 12 62 FC | 	wrlong	arg01, objptr
1339c                 | ' write_background:=bb
1339c     04 E4 05 F1 | 	add	objptr, #4
133a0     F2 14 62 FC | 	wrlong	arg02, objptr
133a4     45 E4 85 F1 | 	sub	objptr, #69
133a8     94 00 90 FD | 	jmp	#LR__1648
133ac                 | LR__1647
133ac     37 00 00 FF 
133b0     40 E4 05 F1 | 	add	objptr, ##28224
133b4     F2 02 68 FC | 	wrlong	#1, objptr
133b8     04 E4 85 F1 | 	sub	objptr, #4
133bc     F2 02 68 FC | 	wrlong	#1, objptr
133c0     19 00 00 FF 
133c4     D8 E4 05 F1 | 	add	objptr, ##13016
133c8     F2 02 68 FC | 	wrlong	#1, objptr
133cc     19 00 00 FF 
133d0     DC E4 85 F1 | 	sub	objptr, ##13020
133d4     F2 1C 68 FC | 	wrlong	#14, objptr
133d8     37 00 00 FF 
133dc     38 E4 85 F1 | 	sub	objptr, ##28216
133e0     04 12 06 F6 | 	mov	arg01, #4
133e4     A0 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
133e8     37 00 00 FF 
133ec     3C E4 05 F1 | 	add	objptr, ##28220
133f0     F2 12 02 FB | 	rdlong	arg01, objptr
133f4     04 E4 85 F1 | 	sub	objptr, #4
133f8     F2 14 02 FB | 	rdlong	arg02, objptr
133fc                 | ' 
133fc                 | ' write_color:=ff
133fc     36 00 00 FF 
13400     F7 E5 85 F1 | 	sub	objptr, ##28151
13404     F2 12 62 FC | 	wrlong	arg01, objptr
13408                 | ' write_background:=bb
13408     04 E4 05 F1 | 	add	objptr, #4
1340c     F2 14 62 FC | 	wrlong	arg02, objptr
13410     07 00 00 FF 
13414     82 EB 05 F1 | 	add	ptr__dat__, ##3970
13418     51 00 00 FF 
1341c     73 E5 05 F1 | 	add	objptr, ##41843
13420     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13424     04 E4 85 F1 | 	sub	objptr, #4
13428     03 00 80 FF 
1342c     F2 30 69 FC | 	wrlong	##1688, objptr
13430     51 00 00 FF 
13434     B4 E5 85 F1 | 	sub	objptr, ##41908
13438     07 00 00 FF 
1343c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
13440                 | LR__1648
13440     51 00 00 FF 
13444     B0 E5 05 F1 | 	add	objptr, ##41904
13448     F2 26 62 FC | 	wrlong	local01, objptr
1344c     04 E4 85 F1 | 	sub	objptr, #4
13450     F2 12 02 FB | 	rdlong	arg01, objptr
13454     0E 00 00 FF 
13458     50 E5 85 F1 | 	sub	objptr, ##7504
1345c     F2 2E 02 FB | 	rdlong	local05, objptr
13460     43 00 00 FF 
13464     5C E4 85 F1 | 	sub	objptr, ##34396
13468     17 13 82 F1 | 	sub	arg01, local05
1346c     00 14 06 F6 | 	mov	arg02, #0
13470     0A 16 06 F6 | 	mov	arg03, #10
13474     6C 0A B1 FD | 	call	#__system__Number_S
13478     FD 12 02 F6 | 	mov	arg01, result1
1347c     90 01 00 FF 
13480     CC 14 06 F6 | 	mov	arg02, ##@LR__5620
13484     E8 E7 B0 FD | 	call	#__system___string_concat
13488     50 00 00 FF 
1348c     10 E5 05 F1 | 	add	objptr, ##41232
13490     F2 FA 61 FC | 	wrlong	result1, objptr
13494     19 00 00 FF 
13498     D4 E4 85 F1 | 	sub	objptr, ##13012
1349c     F2 12 02 FB | 	rdlong	arg01, objptr
134a0     04 E4 85 F1 | 	sub	objptr, #4
134a4     F2 14 02 FB | 	rdlong	arg02, objptr
134a8     37 00 00 FF 
134ac     38 E4 85 F1 | 	sub	objptr, ##28216
134b0     24 CB B0 FD | 	call	#_hg010b_spin2_cls
134b4     90 01 00 FF 
134b8     DE 12 06 F6 | 	mov	arg01, ##@LR__5621
134bc                 | ' 
134bc                 | ' write(text)
134bc     D8 CE B0 FD | 	call	#_hg010b_spin2_write
134c0                 | ' crlf
134c0     D4 D3 B0 FD | 	call	#_hg010b_spin2_crlf
134c4     18 00 00 FF 
134c8     40 EB 05 F1 | 	add	ptr__dat__, ##12608
134cc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
134d0     18 00 00 FF 
134d4     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
134d8                 | ' 
134d8                 | ' write(text)
134d8     BC CE B0 FD | 	call	#_hg010b_spin2_write
134dc                 | ' crlf
134dc     B8 D3 B0 FD | 	call	#_hg010b_spin2_crlf
134e0     50 00 00 FF 
134e4     10 E5 05 F1 | 	add	objptr, ##41232
134e8     F2 12 02 FB | 	rdlong	arg01, objptr
134ec     50 00 00 FF 
134f0     10 E5 85 F1 | 	sub	objptr, ##41232
134f4                 | ' 
134f4                 | ' write(text)
134f4     A0 CE B0 FD | 	call	#_hg010b_spin2_write
134f8                 | ' crlf
134f8     9C D3 B0 FD | 	call	#_hg010b_spin2_crlf
134fc     A7 F0 03 F6 | 	mov	ptra, fp
13500     B2 00 A0 FD | 	call	#popregs_
13504                 | _do_mode_ret
13504     2D 00 64 FD | 	ret
13508                 | 
13508                 | ' 
13508                 | ' '-------------------- mouse
13508                 | ' 
13508                 | ' sub do_mouse
13508                 | _do_mouse
13508     84 83 BF FD | 	call	#_pop
1350c     00 FA 4D F2 | 	cmps	result1, #0 wz
13510                 | ' 
13510                 | ' t1=pop()
13510                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
13510     14 00 90 5D |  if_ne	jmp	#LR__1650
13514     10 12 06 F6 | 	mov	arg01, #16
13518     00 14 06 F6 | 	mov	arg02, #0
1351c     00 16 06 F6 | 	mov	arg03, #0
13520     94 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13524     10 00 90 FD | 	jmp	#LR__1651
13528                 | LR__1650
13528     10 12 06 F6 | 	mov	arg01, #16
1352c     20 14 06 F6 | 	mov	arg02, #32
13530     20 16 06 F6 | 	mov	arg03, #32
13534     80 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13538                 | LR__1651
13538                 | _do_mouse_ret
13538     2D 00 64 FD | 	ret
1353c                 | 
1353c                 | ' 
1353c                 | ' '-------------------- mousek
1353c                 | ' 
1353c                 | ' sub do_mousek
1353c                 | _do_mousek
1353c     00 4A 05 F6 | 	mov	COUNT_, #0
13540     A8 00 A0 FD | 	call	#pushregs_
13544     0C F0 07 F1 | 	add	ptra, #12
13548     08 4E 05 F1 | 	add	fp, #8
1354c     A7 3A 68 FC | 	wrlong	#29, fp
13550     08 4E 85 F1 | 	sub	fp, #8
13554     51 00 00 FF 
13558     28 E5 05 F1 | 	add	objptr, ##41768
1355c     F2 12 02 FB | 	rdlong	arg01, objptr
13560     51 00 00 FF 
13564     28 E5 85 F1 | 	sub	objptr, ##41768
13568     A7 12 62 FC | 	wrlong	arg01, fp
1356c     A7 12 02 F6 | 	mov	arg01, fp
13570     B4 83 BF FD | 	call	#_push
13574     A7 F0 03 F6 | 	mov	ptra, fp
13578     B2 00 A0 FD | 	call	#popregs_
1357c                 | _do_mousek_ret
1357c     2D 00 64 FD | 	ret
13580                 | 
13580                 | ' 
13580                 | ' '-------------------- mousew
13580                 | ' 
13580                 | ' sub do_mousew
13580                 | _do_mousew
13580     00 4A 05 F6 | 	mov	COUNT_, #0
13584     A8 00 A0 FD | 	call	#pushregs_
13588     0C F0 07 F1 | 	add	ptra, #12
1358c     08 4E 05 F1 | 	add	fp, #8
13590     A7 38 68 FC | 	wrlong	#28, fp
13594     08 4E 85 F1 | 	sub	fp, #8
13598     51 00 00 FF 
1359c     2C E5 05 F1 | 	add	objptr, ##41772
135a0     F2 12 02 FB | 	rdlong	arg01, objptr
135a4     51 00 00 FF 
135a8     2C E5 85 F1 | 	sub	objptr, ##41772
135ac     A7 12 62 FC | 	wrlong	arg01, fp
135b0     A7 12 02 F6 | 	mov	arg01, fp
135b4     70 83 BF FD | 	call	#_push
135b8     A7 F0 03 F6 | 	mov	ptra, fp
135bc     B2 00 A0 FD | 	call	#popregs_
135c0                 | _do_mousew_ret
135c0     2D 00 64 FD | 	ret
135c4                 | 
135c4                 | ' 
135c4                 | ' '-------------------- mousex
135c4                 | ' 
135c4                 | ' sub do_mousex
135c4                 | _do_mousex
135c4     00 4A 05 F6 | 	mov	COUNT_, #0
135c8     A8 00 A0 FD | 	call	#pushregs_
135cc     0C F0 07 F1 | 	add	ptra, #12
135d0     08 4E 05 F1 | 	add	fp, #8
135d4     A7 3A 68 FC | 	wrlong	#29, fp
135d8     08 4E 85 F1 | 	sub	fp, #8
135dc     51 00 00 FF 
135e0     20 E5 05 F1 | 	add	objptr, ##41760
135e4     F2 12 02 FB | 	rdlong	arg01, objptr
135e8     51 00 00 FF 
135ec     20 E5 85 F1 | 	sub	objptr, ##41760
135f0     A7 12 62 FC | 	wrlong	arg01, fp
135f4     A7 12 02 F6 | 	mov	arg01, fp
135f8     2C 83 BF FD | 	call	#_push
135fc     A7 F0 03 F6 | 	mov	ptra, fp
13600     B2 00 A0 FD | 	call	#popregs_
13604                 | _do_mousex_ret
13604     2D 00 64 FD | 	ret
13608                 | 
13608                 | ' 
13608                 | ' '-------------------- mousey
13608                 | ' 
13608                 | ' sub do_mousey
13608                 | _do_mousey
13608     00 4A 05 F6 | 	mov	COUNT_, #0
1360c     A8 00 A0 FD | 	call	#pushregs_
13610     0C F0 07 F1 | 	add	ptra, #12
13614     08 4E 05 F1 | 	add	fp, #8
13618     A7 3A 68 FC | 	wrlong	#29, fp
1361c     08 4E 85 F1 | 	sub	fp, #8
13620     51 00 00 FF 
13624     24 E5 05 F1 | 	add	objptr, ##41764
13628     F2 12 02 FB | 	rdlong	arg01, objptr
1362c     51 00 00 FF 
13630     24 E5 85 F1 | 	sub	objptr, ##41764
13634     A7 12 62 FC | 	wrlong	arg01, fp
13638     A7 12 02 F6 | 	mov	arg01, fp
1363c     E8 82 BF FD | 	call	#_push
13640     A7 F0 03 F6 | 	mov	ptra, fp
13644     B2 00 A0 FD | 	call	#popregs_
13648                 | _do_mousey_ret
13648     2D 00 64 FD | 	ret
1364c                 | 
1364c                 | ' 
1364c                 | ' '------------------ new
1364c                 | ' 
1364c                 | ' sub do_new
1364c                 | _do_new
1364c     03 4A 05 F6 | 	mov	COUNT_, #3
13650     A8 00 A0 FD | 	call	#pushregs_
13654     13 12 C6 F9 | 	decod	arg01, #19
13658     01 14 66 F6 | 	neg	arg02, #1
1365c     20 AE B0 FD | 	call	#_pslpoke
13660     35 00 00 FF 
13664     08 E4 05 F1 | 	add	objptr, ##27144
13668     F2 00 68 FC | 	wrlong	#0, objptr
1366c                 | ' 
1366c                 | ' pslpoke(memlo,$FFFFFFFF)
1366c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
1366c     00 26 06 F6 | 	mov	local01, #0
13670     20 00 00 FF 
13674     10 E4 85 F1 | 	sub	objptr, ##16400
13678     97 1E 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
1367c                 | LR__1660
1367c     13 17 02 F6 | 	mov	arg03, local01
13680     04 16 66 F0 | 	shl	arg03, #4
13684     F2 16 02 F1 | 	add	arg03, objptr
13688     90 01 00 FF 
1368c     DF 14 06 F6 | 	mov	arg02, ##@LR__5622
13690     0B 15 62 FC | 	wrlong	arg02, arg03
13694     13 29 02 F6 | 	mov	local02, local01
13698     04 28 66 F0 | 	shl	local02, #4
1369c     F2 28 02 F1 | 	add	local02, objptr
136a0     0C 28 06 F1 | 	add	local02, #12
136a4     14 01 68 FC | 	wrlong	#0, local02
136a8     01 26 06 F1 | 	add	local01, #1
136ac     02 00 00 FF 
136b0     01 26 56 F2 | 	cmps	local01, ##1025 wc
136b4     C4 FF 9F CD |  if_b	jmp	#LR__1660
136b8                 | LR__1661
136b8     35 00 00 FF 
136bc     90 E4 05 F1 | 	add	objptr, ##27280
136c0     00 04 80 FF 
136c4     F2 00 68 FC | 	wrlong	##524288, objptr
136c8     06 00 00 FF 
136cc     30 E4 05 F1 | 	add	objptr, ##3120
136d0     00 04 80 FF 
136d4     F2 00 68 FC | 	wrlong	##524288, objptr
136d8     04 E4 05 F1 | 	add	objptr, #4
136dc     00 04 80 FF 
136e0     F2 00 68 FC | 	wrlong	##524288, objptr
136e4     0D 00 00 FF 
136e8     64 E4 85 F1 | 	sub	objptr, ##6756
136ec     F2 00 68 FC | 	wrlong	#0, objptr
136f0     07 00 00 FF 
136f4     24 E4 05 F1 | 	add	objptr, ##3620
136f8     F2 00 68 FC | 	wrlong	#0, objptr
136fc     07 00 00 FF 
13700     20 E4 85 F1 | 	sub	objptr, ##3616
13704     00 04 80 FF 
13708     F2 00 68 FC | 	wrlong	##524288, objptr
1370c     07 00 00 FF 
13710     30 E4 05 F1 | 	add	objptr, ##3632
13714     F2 00 68 FC | 	wrlong	#0, objptr
13718     04 E4 05 F1 | 	add	objptr, #4
1371c     FF FF FF FF 
13720     F2 FE 6B FC | 	wrlong	##-1, objptr
13724     06 00 00 FF 
13728     78 E4 05 F1 | 	add	objptr, ##3192
1372c     F2 00 68 FC | 	wrlong	#0, objptr
13730     04 E4 05 F1 | 	add	objptr, #4
13734     F2 00 68 FC | 	wrlong	#0, objptr
13738                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
13738                 | ' stackpointer=0
13738                 | ' lineptr=0 
13738                 | ' programptr=memlo ': stringptr=0
13738                 | ' 
13738                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
13738                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
13738     00 26 06 F6 | 	mov	local01, #0
1373c     06 00 00 FF 
13740     74 E4 85 F1 | 	sub	objptr, ##3188
13744     97 16 48 FB | 	callpa	#(@LR__1663-@LR__1662)>>2,fcache_load_ptr_
13748                 | LR__1662
13748     13 29 02 F6 | 	mov	local02, local01
1374c     02 28 66 F0 | 	shl	local02, #2
13750     13 29 02 F1 | 	add	local02, local01
13754     02 28 66 F0 | 	shl	local02, #2
13758     F2 28 02 F1 | 	add	local02, objptr
1375c     08 28 06 F1 | 	add	local02, #8
13760     FF FF FF FF 
13764     14 FF 6B FC | 	wrlong	##-1, local02
13768     01 26 06 F1 | 	add	local01, #1
1376c     41 26 56 F2 | 	cmps	local01, #65 wc
13770     D4 FF 9F CD |  if_b	jmp	#LR__1662
13774                 | LR__1663
13774     4A 00 00 FF 
13778     98 E4 85 F1 | 	sub	objptr, ##38040
1377c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
1377c     00 26 06 F6 | 	mov	local01, #0
13780                 | LR__1664
13780     13 29 02 F6 | 	mov	local02, local01
13784     02 28 66 F0 | 	shl	local02, #2
13788     51 00 00 FF 
1378c     68 E5 05 F1 | 	add	objptr, ##41832
13790     F2 28 02 F1 | 	add	local02, objptr
13794     14 2B 0A FB | 	rdlong	local03, local02 wz
13798     51 00 00 FF 
1379c     68 E5 85 F1 | 	sub	objptr, ##41832
137a0     34 00 90 AD |  if_e	jmp	#LR__1665
137a4     13 13 02 F6 | 	mov	arg01, local01
137a8     00 14 06 F6 | 	mov	arg02, #0
137ac     00 16 06 F6 | 	mov	arg03, #0
137b0     04 BB B0 FD | 	call	#_hg010b_spin2_setspritesize
137b4     13 29 02 F6 | 	mov	local02, local01
137b8     02 28 66 F0 | 	shl	local02, #2
137bc     51 00 00 FF 
137c0     68 E5 05 F1 | 	add	objptr, ##41832
137c4     F2 28 02 F1 | 	add	local02, objptr
137c8     14 13 02 FB | 	rdlong	arg01, local02
137cc     51 00 00 FF 
137d0     68 E5 85 F1 | 	sub	objptr, ##41832
137d4     5C 26 B1 FD | 	call	#__system___gc_free
137d8                 | LR__1665
137d8     01 26 06 F1 | 	add	local01, #1
137dc     10 26 56 F2 | 	cmps	local01, #16 wc
137e0     9C FF 9F CD |  if_b	jmp	#LR__1664
137e4     51 00 00 FF 
137e8     BC E5 05 F1 | 	add	objptr, ##41916
137ec     00 C0 9F FF 
137f0     F2 00 68 FC | 	wrlong	##1065353216, objptr
137f4     04 E4 05 F1 | 	add	objptr, #4
137f8     00 C0 9F FF 
137fc     F2 00 68 FC | 	wrlong	##1065353216, objptr
13800     51 00 00 FF 
13804     BC E5 85 F1 | 	sub	objptr, ##41916
13808     F2 2A 02 FB | 	rdlong	local03, objptr
1380c     51 00 00 FF 
13810     A8 E5 05 F1 | 	add	objptr, ##41896
13814     F2 2A 62 FC | 	wrlong	local03, objptr
13818     51 00 00 FF 
1381c     AC E5 85 F1 | 	sub	objptr, ##41900
13820     11 12 06 F6 | 	mov	arg01, #17
13824     08 14 06 F6 | 	mov	arg02, #8
13828     10 16 06 F6 | 	mov	arg03, #16
1382c     88 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13830     10 12 06 F6 | 	mov	arg01, #16
13834     20 14 06 F6 | 	mov	arg02, #32
13838     20 16 06 F6 | 	mov	arg03, #32
1383c     78 BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13840     90 01 00 FF 
13844     E0 2A 06 F6 | 	mov	local03, ##@LR__5623
13848     51 00 00 FF 
1384c     D8 E5 05 F1 | 	add	objptr, ##41944
13850     F2 2A 62 FC | 	wrlong	local03, objptr
13854     51 00 00 FF 
13858     D8 E5 85 F1 | 	sub	objptr, ##41944
1385c     AC 9E B0 FD | 	call	#_init_audio
13860     A7 F0 03 F6 | 	mov	ptra, fp
13864     B2 00 A0 FD | 	call	#popregs_
13868                 | _do_new_ret
13868     2D 00 64 FD | 	ret
1386c                 | 
1386c                 | ' 
1386c                 | ' '-------------------- next
1386c                 | ' 
1386c                 | ' sub do_next()
1386c                 | _do_next
1386c     04 4A 05 F6 | 	mov	COUNT_, #4
13870     A8 00 A0 FD | 	call	#pushregs_
13874     18 80 BF FD | 	call	#_pop
13878     FD 26 02 F6 | 	mov	local01, result1
1387c     FE 28 02 F6 | 	mov	local02, result2
13880     FF 2A 02 F6 | 	mov	local03, result3
13884                 | ' t1=pop() :varnum=t1.result.uresult
13884                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
13884     50 00 00 FF 
13888     08 E5 05 F1 | 	add	objptr, ##41224
1388c     F2 14 02 FB | 	rdlong	arg02, objptr
13890     0A 13 02 F6 | 	mov	arg01, arg02
13894     02 12 66 F0 | 	shl	arg01, #2
13898     0A 13 02 F1 | 	add	arg01, arg02
1389c     02 12 66 F0 | 	shl	arg01, #2
138a0     06 00 00 FF 
138a4     70 E4 85 F1 | 	sub	objptr, ##3184
138a8     F2 12 02 F1 | 	add	arg01, objptr
138ac     08 12 06 F1 | 	add	arg01, #8
138b0     09 15 02 FB | 	rdlong	arg02, arg01
138b4     13 15 0A F2 | 	cmp	arg02, local01 wz
138b8     4A 00 00 FF 
138bc     98 E4 85 F1 | 	sub	objptr, ##38040
138c0     10 00 90 AD |  if_e	jmp	#LR__1670
138c4     25 12 06 F6 | 	mov	arg01, #37
138c8     00 14 06 F6 | 	mov	arg02, #0
138cc     24 AA B0 FD | 	call	#_printerror
138d0     54 03 90 FD | 	jmp	#LR__1677
138d4                 | LR__1670
138d4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
138d4     13 15 02 F6 | 	mov	arg02, local01
138d8     04 14 66 F0 | 	shl	arg02, #4
138dc     14 00 00 FF 
138e0     F8 E5 05 F1 | 	add	objptr, ##10744
138e4     F2 14 02 F1 | 	add	arg02, objptr
138e8     0C 14 06 F1 | 	add	arg02, #12
138ec     0A 15 02 FB | 	rdlong	arg02, arg02
138f0     1E 14 0E F2 | 	cmp	arg02, #30 wz
138f4     14 00 00 FF 
138f8     F8 E5 85 F1 | 	sub	objptr, ##10744
138fc     54 00 90 5D |  if_ne	jmp	#LR__1671
13900     13 15 02 F6 | 	mov	arg02, local01
13904     04 14 66 F0 | 	shl	arg02, #4
13908     14 00 00 FF 
1390c     F8 E5 05 F1 | 	add	objptr, ##10744
13910     F2 14 02 F1 | 	add	arg02, objptr
13914     0C 14 06 F1 | 	add	arg02, #12
13918     0A 39 68 FC | 	wrlong	#28, arg02
1391c     13 2D 02 F6 | 	mov	local04, local01
13920     04 2C 66 F0 | 	shl	local04, #4
13924     F2 2C 02 F1 | 	add	local04, objptr
13928     13 15 02 F6 | 	mov	arg02, local01
1392c     04 14 66 F0 | 	shl	arg02, #4
13930     F2 14 02 F1 | 	add	arg02, objptr
13934     04 14 06 F1 | 	add	arg02, #4
13938     0A 13 02 FB | 	rdlong	arg01, arg02
1393c     14 00 00 FF 
13940     F8 E5 85 F1 | 	sub	objptr, ##10744
13944     01 14 06 F6 | 	mov	arg02, #1
13948     4C 15 B1 FD | 	call	#__system___float_tointeger
1394c     04 2C 06 F1 | 	add	local04, #4
13950     16 FB 61 FC | 	wrlong	result1, local04
13954                 | LR__1671
13954     50 00 00 FF 
13958     08 E5 05 F1 | 	add	objptr, ##41224
1395c     F2 2C 02 FB | 	rdlong	local04, objptr
13960     16 15 02 F6 | 	mov	arg02, local04
13964     02 14 66 F0 | 	shl	arg02, #2
13968     16 15 02 F1 | 	add	arg02, local04
1396c     02 14 66 F0 | 	shl	arg02, #2
13970     06 00 00 FF 
13974     70 E4 85 F1 | 	sub	objptr, ##3184
13978     F2 14 02 F1 | 	add	arg02, objptr
1397c     0C 14 06 F1 | 	add	arg02, #12
13980     0A FF 01 FB | 	rdlong	result3, arg02
13984     13 2D 02 F6 | 	mov	local04, local01
13988     04 2C 66 F0 | 	shl	local04, #4
1398c     35 00 00 FF 
13990     A0 E4 85 F1 | 	sub	objptr, ##27296
13994     F2 2C 02 F1 | 	add	local04, objptr
13998     13 15 02 F6 | 	mov	arg02, local01
1399c     04 14 66 F0 | 	shl	arg02, #4
139a0     F2 14 02 F1 | 	add	arg02, objptr
139a4     04 14 06 F1 | 	add	arg02, #4
139a8     0A 13 02 FB | 	rdlong	arg01, arg02
139ac     FF 12 02 F1 | 	add	arg01, result3
139b0     04 2C 06 F1 | 	add	local04, #4
139b4     16 13 62 FC | 	wrlong	arg01, local04
139b8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
139b8                 | ' if fortable(fortop).stepval>=0 then
139b8     3B 00 00 FF 
139bc     10 E5 05 F1 | 	add	objptr, ##30480
139c0     F2 2C 02 FB | 	rdlong	local04, objptr
139c4     16 13 02 F6 | 	mov	arg01, local04
139c8     02 12 66 F0 | 	shl	arg01, #2
139cc     16 13 02 F1 | 	add	arg01, local04
139d0     02 12 66 F0 | 	shl	arg01, #2
139d4     06 00 00 FF 
139d8     70 E4 85 F1 | 	sub	objptr, ##3184
139dc     F2 12 02 F1 | 	add	arg01, objptr
139e0     0C 12 06 F1 | 	add	arg01, #12
139e4     09 13 02 FB | 	rdlong	arg01, arg01
139e8     00 12 56 F2 | 	cmps	arg01, #0 wc
139ec     4A 00 00 FF 
139f0     98 E4 85 F1 | 	sub	objptr, ##38040
139f4     78 00 90 CD |  if_b	jmp	#LR__1672
139f8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
139f8     04 26 66 F0 | 	shl	local01, #4
139fc     14 00 00 FF 
13a00     F8 E5 05 F1 | 	add	objptr, ##10744
13a04     F2 26 02 F1 | 	add	local01, objptr
13a08     3B 00 00 FF 
13a0c     10 E5 05 F1 | 	add	objptr, ##30480
13a10     F2 12 02 FB | 	rdlong	arg01, objptr
13a14     09 2D 02 F6 | 	mov	local04, arg01
13a18     02 2C 66 F0 | 	shl	local04, #2
13a1c     09 2D 02 F1 | 	add	local04, arg01
13a20     02 2C 66 F0 | 	shl	local04, #2
13a24     06 00 00 FF 
13a28     70 E4 85 F1 | 	sub	objptr, ##3184
13a2c     F2 2C 02 F1 | 	add	local04, objptr
13a30     04 26 06 F1 | 	add	local01, #4
13a34     13 27 02 FB | 	rdlong	local01, local01
13a38     10 2C 06 F1 | 	add	local04, #16
13a3c     16 2D 02 FB | 	rdlong	local04, local04
13a40     16 27 5A F2 | 	cmps	local01, local04 wcz
13a44     4A 00 00 FF 
13a48     98 E4 85 F1 | 	sub	objptr, ##38040
13a4c     9C 00 90 ED |  if_be	jmp	#LR__1674
13a50     50 00 00 FF 
13a54     08 E5 05 F1 | 	add	objptr, ##41224
13a58     F2 2C 02 FB | 	rdlong	local04, objptr
13a5c     01 2C 86 F1 | 	sub	local04, #1
13a60     F2 2C 62 FC | 	wrlong	local04, objptr
13a64     50 00 00 FF 
13a68     08 E5 85 F1 | 	sub	objptr, ##41224
13a6c     B8 01 90 FD | 	jmp	#LR__1677
13a70                 | LR__1672
13a70                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
13a70     13 2D 02 F6 | 	mov	local04, local01
13a74     04 2C 66 F0 | 	shl	local04, #4
13a78     14 00 00 FF 
13a7c     F8 E5 05 F1 | 	add	objptr, ##10744
13a80     F2 2C 02 F1 | 	add	local04, objptr
13a84     3B 00 00 FF 
13a88     10 E5 05 F1 | 	add	objptr, ##30480
13a8c     F2 26 02 FB | 	rdlong	local01, objptr
13a90     13 13 02 F6 | 	mov	arg01, local01
13a94     02 12 66 F0 | 	shl	arg01, #2
13a98     13 13 02 F1 | 	add	arg01, local01
13a9c     02 12 66 F0 | 	shl	arg01, #2
13aa0     06 00 00 FF 
13aa4     70 E4 85 F1 | 	sub	objptr, ##3184
13aa8     F2 12 02 F1 | 	add	arg01, objptr
13aac     04 2C 06 F1 | 	add	local04, #4
13ab0     16 2D 02 FB | 	rdlong	local04, local04
13ab4     10 12 06 F1 | 	add	arg01, #16
13ab8     09 13 02 FB | 	rdlong	arg01, arg01
13abc     09 2D 52 F2 | 	cmps	local04, arg01 wc
13ac0     4A 00 00 FF 
13ac4     98 E4 85 F1 | 	sub	objptr, ##38040
13ac8     20 00 90 3D |  if_ae	jmp	#LR__1673
13acc     50 00 00 FF 
13ad0     08 E5 05 F1 | 	add	objptr, ##41224
13ad4     F2 2C 02 FB | 	rdlong	local04, objptr
13ad8     01 2C 86 F1 | 	sub	local04, #1
13adc     F2 2C 62 FC | 	wrlong	local04, objptr
13ae0     50 00 00 FF 
13ae4     08 E5 85 F1 | 	sub	objptr, ##41224
13ae8     3C 01 90 FD | 	jmp	#LR__1677
13aec                 | LR__1673
13aec                 | LR__1674
13aec                 | ' ' if not returned, goto pointer 
13aec                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
13aec     50 00 00 FF 
13af0     EC E4 05 F1 | 	add	objptr, ##41196
13af4     F2 2C 02 FB | 	rdlong	local04, objptr
13af8     50 00 00 FF 
13afc     EC E4 85 F1 | 	sub	objptr, ##41196
13b00     01 2C 16 F2 | 	cmp	local04, #1 wc
13b04     DC 00 90 CD |  if_b	jmp	#LR__1675
13b08     50 00 00 FF 
13b0c     08 E5 05 F1 | 	add	objptr, ##41224
13b10     F2 2C 02 FB | 	rdlong	local04, objptr
13b14     16 27 02 F6 | 	mov	local01, local04
13b18     02 26 66 F0 | 	shl	local01, #2
13b1c     16 27 02 F1 | 	add	local01, local04
13b20     02 26 66 F0 | 	shl	local01, #2
13b24     06 00 00 FF 
13b28     70 E4 85 F1 | 	sub	objptr, ##3184
13b2c     F2 26 02 F1 | 	add	local01, objptr
13b30     06 00 00 FF 
13b34     20 E4 05 F1 | 	add	objptr, ##3104
13b38     F2 2C 02 FB | 	rdlong	local04, objptr
13b3c     50 00 00 FF 
13b40     B8 E4 85 F1 | 	sub	objptr, ##41144
13b44     13 27 02 FB | 	rdlong	local01, local01
13b48     13 2D 0A F2 | 	cmp	local04, local01 wz
13b4c     94 00 90 AD |  if_e	jmp	#LR__1675
13b50     50 00 00 FF 
13b54     08 E5 05 F1 | 	add	objptr, ##41224
13b58     F2 2C 02 FB | 	rdlong	local04, objptr
13b5c     16 27 02 F6 | 	mov	local01, local04
13b60     02 26 66 F0 | 	shl	local01, #2
13b64     16 27 02 F1 | 	add	local01, local04
13b68     02 26 66 F0 | 	shl	local01, #2
13b6c     06 00 00 FF 
13b70     70 E4 85 F1 | 	sub	objptr, ##3184
13b74     F2 26 02 F1 | 	add	local01, objptr
13b78     13 27 02 FB | 	rdlong	local01, local01
13b7c     06 00 00 FF 
13b80     20 E4 05 F1 | 	add	objptr, ##3104
13b84     F2 26 62 FC | 	wrlong	local01, objptr
13b88     50 E4 05 F1 | 	add	objptr, #80
13b8c     F2 2C 02 FB | 	rdlong	local04, objptr
13b90     16 27 02 F6 | 	mov	local01, local04
13b94     02 26 66 F0 | 	shl	local01, #2
13b98     16 27 02 F1 | 	add	local01, local04
13b9c     02 26 66 F0 | 	shl	local01, #2
13ba0     06 00 00 FF 
13ba4     70 E4 85 F1 | 	sub	objptr, ##3184
13ba8     F2 26 02 F1 | 	add	local01, objptr
13bac     04 26 06 F1 | 	add	local01, #4
13bb0     13 27 02 FB | 	rdlong	local01, local01
13bb4     06 00 00 FF 
13bb8     24 E4 05 F1 | 	add	objptr, ##3108
13bbc     F2 26 62 FC | 	wrlong	local01, objptr
13bc0     06 00 00 FF 
13bc4     40 E4 85 F1 | 	sub	objptr, ##3136
13bc8     F2 2C 02 FB | 	rdlong	local04, objptr
13bcc     01 2C 86 F1 | 	sub	local04, #1
13bd0     04 E4 05 F1 | 	add	objptr, #4
13bd4     F2 2C 62 FC | 	wrlong	local04, objptr
13bd8     4A 00 00 FF 
13bdc     80 E4 85 F1 | 	sub	objptr, ##38016
13be0     44 00 90 FD | 	jmp	#LR__1676
13be4                 | LR__1675
13be4     50 00 00 FF 
13be8     08 E5 05 F1 | 	add	objptr, ##41224
13bec     F2 2C 02 FB | 	rdlong	local04, objptr
13bf0     16 27 02 F6 | 	mov	local01, local04
13bf4     02 26 66 F0 | 	shl	local01, #2
13bf8     16 27 02 F1 | 	add	local01, local04
13bfc     02 26 66 F0 | 	shl	local01, #2
13c00     06 00 00 FF 
13c04     70 E4 85 F1 | 	sub	objptr, ##3184
13c08     F2 26 02 F1 | 	add	local01, objptr
13c0c     04 26 06 F1 | 	add	local01, #4
13c10     13 27 02 FB | 	rdlong	local01, local01
13c14     01 26 86 F1 | 	sub	local01, #1
13c18     18 E4 85 F1 | 	sub	objptr, #24
13c1c     F2 26 62 FC | 	wrlong	local01, objptr
13c20     4A 00 00 FF 
13c24     80 E4 85 F1 | 	sub	objptr, ##38016
13c28                 | LR__1676
13c28                 | LR__1677
13c28     A7 F0 03 F6 | 	mov	ptra, fp
13c2c     B2 00 A0 FD | 	call	#popregs_
13c30                 | _do_next_ret
13c30     2D 00 64 FD | 	ret
13c34                 | 
13c34                 | ' 
13c34                 | ' '-------------------- no command (print "Unknown command")
13c34                 | ' 
13c34                 | ' sub do_no_command
13c34                 | _do_no_command
13c34     17 12 06 F6 | 	mov	arg01, #23
13c38     00 14 06 F6 | 	mov	arg02, #0
13c3c     B4 A6 B0 FD | 	call	#_printerror
13c40                 | _do_no_command_ret
13c40     2D 00 64 FD | 	ret
13c44                 | 
13c44                 | ' 
13c44                 | ' '-------------------- nothing
13c44                 | ' 
13c44                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
13c44                 | _do_nothing
13c44                 | _do_nothing_ret
13c44     2D 00 64 FD | 	ret
13c48                 | 
13c48                 | ' 
13c48                 | ' '-------------------- open
13c48                 | ' 
13c48                 | ' sub do_open
13c48                 | _do_open
13c48     02 4A 05 F6 | 	mov	COUNT_, #2
13c4c     A8 00 A0 FD | 	call	#pushregs_
13c50     20 F0 07 F1 | 	add	ptra, #32
13c54     4A 00 00 FF 
13c58     80 E4 05 F1 | 	add	objptr, ##38016
13c5c     F2 16 02 FB | 	rdlong	arg03, objptr
13c60     0B 15 02 F6 | 	mov	arg02, arg03
13c64     01 14 66 F0 | 	shl	arg02, #1
13c68     0B 15 02 F1 | 	add	arg02, arg03
13c6c     02 14 66 F0 | 	shl	arg02, #2
13c70     03 00 00 FF 
13c74     04 E4 85 F1 | 	sub	objptr, ##1540
13c78     F2 14 02 F1 | 	add	arg02, objptr
13c7c     0A 17 02 FB | 	rdlong	arg03, arg02
13c80     10 4E 05 F1 | 	add	fp, #16
13c84     A7 16 62 FC | 	wrlong	arg03, fp
13c88     10 4E 85 F1 | 	sub	fp, #16
13c8c     47 00 00 FF 
13c90     7C E4 85 F1 | 	sub	objptr, ##36476
13c94     F8 7B BF FD | 	call	#_pop
13c98     FF 16 02 F6 | 	mov	arg03, result3
13c9c     A7 FA 61 FC | 	wrlong	result1, fp
13ca0     04 4E 05 F1 | 	add	fp, #4
13ca4     A7 FC 61 FC | 	wrlong	result2, fp
13ca8     04 4E 05 F1 | 	add	fp, #4
13cac     A7 16 62 FC | 	wrlong	arg03, fp
13cb0                 | ' 
13cb0                 | ' numpar=compiledline(lineptr_e).result.uresult
13cb0                 | ' 
13cb0                 | ' t1=pop()
13cb0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13cb0     08 4E 85 F1 | 	sub	fp, #8
13cb4     2B 16 0E F2 | 	cmp	arg03, #43 wz
13cb8     18 00 90 5D |  if_ne	jmp	#LR__1680
13cbc     A7 12 02 FB | 	rdlong	arg01, fp
13cc0     44 7D BF FD | 	call	#_convertstring
13cc4     A7 FA 61 FC | 	wrlong	result1, fp
13cc8     08 4E 05 F1 | 	add	fp, #8
13ccc     A7 3E 68 FC | 	wrlong	#31, fp
13cd0     08 4E 85 F1 | 	sub	fp, #8
13cd4                 | LR__1680
13cd4                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
13cd4     08 4E 05 F1 | 	add	fp, #8
13cd8     A7 16 02 FB | 	rdlong	arg03, fp
13cdc     08 4E 85 F1 | 	sub	fp, #8
13ce0     1F 16 0E F2 | 	cmp	arg03, #31 wz
13ce4     44 00 90 AD |  if_e	jmp	#LR__1681
13ce8     00 12 06 F6 | 	mov	arg01, #0
13cec     50 3C B1 FD | 	call	#__system___getiolock_0574
13cf0     FD 12 02 F6 | 	mov	arg01, result1
13cf4     1C DF B0 FD | 	call	#__system___lockmem
13cf8     90 01 00 FF 
13cfc     EB 14 06 F6 | 	mov	arg02, ##@LR__5624
13d00     00 12 06 F6 | 	mov	arg01, #0
13d04     00 16 06 F6 | 	mov	arg03, #0
13d08     FC EB B0 FD | 	call	#__system___basic_print_string
13d0c     00 12 06 F6 | 	mov	arg01, #0
13d10     0A 14 06 F6 | 	mov	arg02, #10
13d14     00 16 06 F6 | 	mov	arg03, #0
13d18     94 EB B0 FD | 	call	#__system___basic_print_char
13d1c     00 12 06 F6 | 	mov	arg01, #0
13d20     1C 3C B1 FD | 	call	#__system___getiolock_0574
13d24     FD 00 68 FC | 	wrlong	#0, result1
13d28     28 02 90 FD | 	jmp	#LR__1692
13d2c                 | LR__1681
13d2c     A7 16 02 FB | 	rdlong	arg03, fp
13d30     0C 4E 05 F1 | 	add	fp, #12
13d34     A7 16 62 FC | 	wrlong	arg03, fp
13d38     0C 4E 85 F1 | 	sub	fp, #12
13d3c     50 7B BF FD | 	call	#_pop
13d40     FF 16 02 F6 | 	mov	arg03, result3
13d44     A7 FA 61 FC | 	wrlong	result1, fp
13d48     04 4E 05 F1 | 	add	fp, #4
13d4c     A7 FC 61 FC | 	wrlong	result2, fp
13d50     04 4E 05 F1 | 	add	fp, #4
13d54     A7 16 62 FC | 	wrlong	arg03, fp
13d58                 | ' filename=t1.result.sresult
13d58                 | ' t1=pop()
13d58                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13d58     08 4E 85 F1 | 	sub	fp, #8
13d5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
13d60     18 00 90 5D |  if_ne	jmp	#LR__1682
13d64     A7 12 02 FB | 	rdlong	arg01, fp
13d68     9C 7C BF FD | 	call	#_convertstring
13d6c     A7 FA 61 FC | 	wrlong	result1, fp
13d70     08 4E 05 F1 | 	add	fp, #8
13d74     A7 3E 68 FC | 	wrlong	#31, fp
13d78     08 4E 85 F1 | 	sub	fp, #8
13d7c                 | LR__1682
13d7c     14 4E 05 F1 | 	add	fp, #20
13d80     A7 00 68 FC | 	wrlong	#0, fp
13d84                 | ' mode=0
13d84                 | ' if t1.result_type=result_string then
13d84     0C 4E 85 F1 | 	sub	fp, #12
13d88     A7 14 02 FB | 	rdlong	arg02, fp
13d8c     08 4E 85 F1 | 	sub	fp, #8
13d90     1F 14 0E F2 | 	cmp	arg02, #31 wz
13d94     64 00 90 5D |  if_ne	jmp	#LR__1683
13d98                 | '   if t1.result.sresult="read" then mode=1
13d98     A7 12 02 FB | 	rdlong	arg01, fp
13d9c     90 01 00 FF 
13da0     FD 14 06 F6 | 	mov	arg02, ##@LR__5625
13da4     94 DE B0 FD | 	call	#__system___string_cmp
13da8     00 FA 0D F2 | 	cmp	result1, #0 wz
13dac     14 4E 05 A1 |  if_e	add	fp, #20
13db0     A7 02 68 AC |  if_e	wrlong	#1, fp
13db4     14 4E 85 A1 |  if_e	sub	fp, #20
13db8                 | '   if t1.result.sresult="write" then mode=2
13db8     A7 12 02 FB | 	rdlong	arg01, fp
13dbc     90 01 00 FF 
13dc0     02 15 06 F6 | 	mov	arg02, ##@LR__5626
13dc4     74 DE B0 FD | 	call	#__system___string_cmp
13dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
13dcc     14 4E 05 A1 |  if_e	add	fp, #20
13dd0     A7 04 68 AC |  if_e	wrlong	#2, fp
13dd4     14 4E 85 A1 |  if_e	sub	fp, #20
13dd8                 | '   if t1.result.sresult="append" then mode=4
13dd8     A7 12 02 FB | 	rdlong	arg01, fp
13ddc     90 01 00 FF 
13de0     08 15 06 F6 | 	mov	arg02, ##@LR__5627
13de4     54 DE B0 FD | 	call	#__system___string_cmp
13de8     00 FA 0D F2 | 	cmp	result1, #0 wz
13dec     14 4E 05 A1 |  if_e	add	fp, #20
13df0     A7 08 68 AC |  if_e	wrlong	#4, fp
13df4     14 4E 85 A1 |  if_e	sub	fp, #20
13df8     14 00 90 FD | 	jmp	#LR__1684
13dfc                 | LR__1683
13dfc     A7 12 02 F6 | 	mov	arg01, fp
13e00     70 7C BF FD | 	call	#_converttoint
13e04     14 4E 05 F1 | 	add	fp, #20
13e08     A7 FA 61 FC | 	wrlong	result1, fp
13e0c     14 4E 85 F1 | 	sub	fp, #20
13e10                 | LR__1684
13e10     7C 7A BF FD | 	call	#_pop
13e14     FF 16 02 F6 | 	mov	arg03, result3
13e18     A7 FA 61 FC | 	wrlong	result1, fp
13e1c     04 4E 05 F1 | 	add	fp, #4
13e20     A7 FC 61 FC | 	wrlong	result2, fp
13e24     04 4E 05 F1 | 	add	fp, #4
13e28     A7 16 62 FC | 	wrlong	arg03, fp
13e2c                 | ' t1=pop()
13e2c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
13e2c     08 4E 85 F1 | 	sub	fp, #8
13e30     2C 16 0E F2 | 	cmp	arg03, #44 wz
13e34     44 00 90 AD |  if_e	jmp	#LR__1685
13e38     00 12 06 F6 | 	mov	arg01, #0
13e3c     00 3B B1 FD | 	call	#__system___getiolock_0574
13e40     FD 12 02 F6 | 	mov	arg01, result1
13e44     CC DD B0 FD | 	call	#__system___lockmem
13e48     90 01 00 FF 
13e4c     0F 15 06 F6 | 	mov	arg02, ##@LR__5628
13e50     00 12 06 F6 | 	mov	arg01, #0
13e54     00 16 06 F6 | 	mov	arg03, #0
13e58     AC EA B0 FD | 	call	#__system___basic_print_string
13e5c     00 12 06 F6 | 	mov	arg01, #0
13e60     0A 14 06 F6 | 	mov	arg02, #10
13e64     00 16 06 F6 | 	mov	arg03, #0
13e68     44 EA B0 FD | 	call	#__system___basic_print_char
13e6c     00 12 06 F6 | 	mov	arg01, #0
13e70     CC 3A B1 FD | 	call	#__system___getiolock_0574
13e74     FD 00 68 FC | 	wrlong	#0, result1
13e78     D8 00 90 FD | 	jmp	#LR__1692
13e7c                 | LR__1685
13e7c     A7 26 02 FB | 	rdlong	local01, fp
13e80     18 4E 05 F1 | 	add	fp, #24
13e84     A7 26 62 FC | 	wrlong	local01, fp
13e88                 | ' channel  = t1.result.iresult
13e88                 | ' select case  mode
13e88     04 4E 85 F1 | 	sub	fp, #4
13e8c     A7 28 02 FB | 	rdlong	local02, fp
13e90     14 4E 85 F1 | 	sub	fp, #20
13e94     01 28 86 F1 | 	sub	local02, #1
13e98     04 28 26 F3 | 	fle	local02, #4
13e9c     30 28 62 FD | 	jmprel	local02
13ea0                 | LR__1686
13ea0     10 00 90 FD | 	jmp	#LR__1687
13ea4     2C 00 90 FD | 	jmp	#LR__1688
13ea8     68 00 90 FD | 	jmp	#LR__1690
13eac     44 00 90 FD | 	jmp	#LR__1689
13eb0     60 00 90 FD | 	jmp	#LR__1690
13eb4                 | LR__1687
13eb4     18 4E 05 F1 | 	add	fp, #24
13eb8     A7 12 02 FB | 	rdlong	arg01, fp
13ebc     0C 4E 85 F1 | 	sub	fp, #12
13ec0     A7 14 02 FB | 	rdlong	arg02, fp
13ec4     0C 4E 85 F1 | 	sub	fp, #12
13ec8     00 16 06 F6 | 	mov	arg03, #0
13ecc     48 E9 B0 FD | 	call	#__system___basic_open_string
13ed0     80 00 90 FD | 	jmp	#LR__1691
13ed4                 | LR__1688
13ed4     18 4E 05 F1 | 	add	fp, #24
13ed8     A7 12 02 FB | 	rdlong	arg01, fp
13edc     0C 4E 85 F1 | 	sub	fp, #12
13ee0     A7 14 02 FB | 	rdlong	arg02, fp
13ee4     0C 4E 85 F1 | 	sub	fp, #12
13ee8     0D 16 06 F6 | 	mov	arg03, #13
13eec     28 E9 B0 FD | 	call	#__system___basic_open_string
13ef0     60 00 90 FD | 	jmp	#LR__1691
13ef4                 | LR__1689
13ef4     18 4E 05 F1 | 	add	fp, #24
13ef8     A7 12 02 FB | 	rdlong	arg01, fp
13efc     0C 4E 85 F1 | 	sub	fp, #12
13f00     A7 14 02 FB | 	rdlong	arg02, fp
13f04     0C 4E 85 F1 | 	sub	fp, #12
13f08     25 16 06 F6 | 	mov	arg03, #37
13f0c     08 E9 B0 FD | 	call	#__system___basic_open_string
13f10     40 00 90 FD | 	jmp	#LR__1691
13f14                 | LR__1690
13f14     00 12 06 F6 | 	mov	arg01, #0
13f18     24 3A B1 FD | 	call	#__system___getiolock_0574
13f1c     FD 12 02 F6 | 	mov	arg01, result1
13f20     F0 DC B0 FD | 	call	#__system___lockmem
13f24     90 01 00 FF 
13f28     21 15 06 F6 | 	mov	arg02, ##@LR__5629
13f2c     00 12 06 F6 | 	mov	arg01, #0
13f30     00 16 06 F6 | 	mov	arg03, #0
13f34     D0 E9 B0 FD | 	call	#__system___basic_print_string
13f38     00 12 06 F6 | 	mov	arg01, #0
13f3c     0A 14 06 F6 | 	mov	arg02, #10
13f40     00 16 06 F6 | 	mov	arg03, #0
13f44     68 E9 B0 FD | 	call	#__system___basic_print_char
13f48     00 12 06 F6 | 	mov	arg01, #0
13f4c     F0 39 B1 FD | 	call	#__system___getiolock_0574
13f50     FD 00 68 FC | 	wrlong	#0, result1
13f54                 | LR__1691
13f54                 | LR__1692
13f54     A7 F0 03 F6 | 	mov	ptra, fp
13f58     B2 00 A0 FD | 	call	#popregs_
13f5c                 | _do_open_ret
13f5c     2D 00 64 FD | 	ret
13f60                 | 
13f60                 | ' 
13f60                 | ' '-------------------- paper
13f60                 | ' 
13f60                 | ' sub do_paper
13f60                 | _do_paper
13f60     03 4A 05 F6 | 	mov	COUNT_, #3
13f64     A8 00 A0 FD | 	call	#pushregs_
13f68     24 79 BF FD | 	call	#_pop
13f6c     FD 26 02 F6 | 	mov	local01, result1
13f70     FE 28 02 F6 | 	mov	local02, result2
13f74     FF 2A 02 F6 | 	mov	local03, result3
13f78                 | ' t1=pop() 
13f78                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13f78     1E 2A 0E F2 | 	cmp	local03, #30 wz
13f7c     10 00 90 5D |  if_ne	jmp	#LR__1700
13f80     13 13 02 F6 | 	mov	arg01, local01
13f84     00 14 06 F6 | 	mov	arg02, #0
13f88     0C 0F B1 FD | 	call	#__system___float_tointeger
13f8c     FD 26 02 F6 | 	mov	local01, result1
13f90                 | LR__1700
13f90                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13f90     1F 2A 0E F2 | 	cmp	local03, #31 wz
13f94     18 00 90 5D |  if_ne	jmp	#LR__1701
13f98     13 13 02 F6 | 	mov	arg01, local01
13f9c     3C 12 B1 FD | 	call	#__system____builtin_atof
13fa0     FD 12 02 F6 | 	mov	arg01, result1
13fa4     00 14 06 F6 | 	mov	arg02, #0
13fa8     EC 0E B1 FD | 	call	#__system___float_tointeger
13fac     FD 26 02 F6 | 	mov	local01, result1
13fb0                 | LR__1701
13fb0     37 00 00 FF 
13fb4     38 E4 05 F1 | 	add	objptr, ##28216
13fb8     F2 26 62 FC | 	wrlong	local01, objptr
13fbc     04 E4 05 F1 | 	add	objptr, #4
13fc0     F2 12 02 FB | 	rdlong	arg01, objptr
13fc4                 | ' 
13fc4                 | ' write_color:=ff
13fc4     36 00 00 FF 
13fc8     FB E5 85 F1 | 	sub	objptr, ##28155
13fcc     F2 12 62 FC | 	wrlong	arg01, objptr
13fd0                 | ' write_background:=bb
13fd0     04 E4 05 F1 | 	add	objptr, #4
13fd4     F2 26 62 FC | 	wrlong	local01, objptr
13fd8     45 E4 85 F1 | 	sub	objptr, #69
13fdc     A7 F0 03 F6 | 	mov	ptra, fp
13fe0     B2 00 A0 FD | 	call	#popregs_
13fe4                 | _do_paper_ret
13fe4     2D 00 64 FD | 	ret
13fe8                 | 
13fe8                 | ' 
13fe8                 | ' '-------------------- peek
13fe8                 | ' 
13fe8                 | ' sub do_peek
13fe8                 | _do_peek
13fe8     00 4A 05 F6 | 	mov	COUNT_, #0
13fec     A8 00 A0 FD | 	call	#pushregs_
13ff0     14 F0 07 F1 | 	add	ptra, #20
13ff4     98 78 BF FD | 	call	#_pop
13ff8     A7 FA 61 FC | 	wrlong	result1, fp
13ffc     04 4E 05 F1 | 	add	fp, #4
14000     A7 FC 61 FC | 	wrlong	result2, fp
14004     04 4E 05 F1 | 	add	fp, #4
14008     A7 FE 61 FC | 	wrlong	result3, fp
1400c     08 4E 85 F1 | 	sub	fp, #8
14010     A7 12 02 F6 | 	mov	arg01, fp
14014     5C 7A BF FD | 	call	#_converttoint
14018     0C 4E 05 F1 | 	add	fp, #12
1401c     A7 FA 61 FC | 	wrlong	result1, fp
14020                 | ' 
14020                 | ' t1=pop()
14020                 | ' a=converttoint(t1)
14020                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
14020     0C 4E 85 F1 | 	sub	fp, #12
14024     00 04 00 FF 
14028     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1402c     1C 00 90 3D |  if_ae	jmp	#LR__1710
14030     0C 4E 05 F1 | 	add	fp, #12
14034     A7 12 02 FB | 	rdlong	arg01, fp
14038     09 FB C1 FA | 	rdbyte	result1, arg01
1403c     04 4E 05 F1 | 	add	fp, #4
14040     A7 FA 61 FC | 	wrlong	result1, fp
14044     10 4E 85 F1 | 	sub	fp, #16
14048     20 00 90 FD | 	jmp	#LR__1711
1404c                 | LR__1710
1404c     0C 4E 05 F1 | 	add	fp, #12
14050     A7 12 02 FB | 	rdlong	arg01, fp
14054     0C 4E 85 F1 | 	sub	fp, #12
14058     FC A4 B0 FD | 	call	#_pspeek
1405c     FD FA E1 F8 | 	getbyte	result1, result1, #0
14060     10 4E 05 F1 | 	add	fp, #16
14064     A7 FA 61 FC | 	wrlong	result1, fp
14068     10 4E 85 F1 | 	sub	fp, #16
1406c                 | LR__1711
1406c     08 4E 05 F1 | 	add	fp, #8
14070     A7 3A 68 FC | 	wrlong	#29, fp
14074     08 4E 05 F1 | 	add	fp, #8
14078     A7 12 02 FB | 	rdlong	arg01, fp
1407c     10 4E 85 F1 | 	sub	fp, #16
14080     A7 12 62 FC | 	wrlong	arg01, fp
14084     A7 12 02 F6 | 	mov	arg01, fp
14088     9C 78 BF FD | 	call	#_push
1408c     A7 F0 03 F6 | 	mov	ptra, fp
14090     B2 00 A0 FD | 	call	#popregs_
14094                 | _do_peek_ret
14094     2D 00 64 FD | 	ret
14098                 | 
14098                 | ' 
14098                 | ' '-------------------- pinfloat
14098                 | ' 
14098                 | ' sub do_pinfloat
14098                 | _do_pinfloat
14098     00 4A 05 F6 | 	mov	COUNT_, #0
1409c     A8 00 A0 FD | 	call	#pushregs_
140a0     0C F0 07 F1 | 	add	ptra, #12
140a4     E8 77 BF FD | 	call	#_pop
140a8     A7 FA 61 FC | 	wrlong	result1, fp
140ac     04 4E 05 F1 | 	add	fp, #4
140b0     A7 FC 61 FC | 	wrlong	result2, fp
140b4     04 4E 05 F1 | 	add	fp, #4
140b8     A7 FE 61 FC | 	wrlong	result3, fp
140bc     08 4E 85 F1 | 	sub	fp, #8
140c0     A7 12 02 F6 | 	mov	arg01, fp
140c4     AC 79 BF FD | 	call	#_converttoint
140c8     50 FA 61 FD | 	fltl	result1
140cc     A7 F0 03 F6 | 	mov	ptra, fp
140d0     B2 00 A0 FD | 	call	#popregs_
140d4                 | _do_pinfloat_ret
140d4     2D 00 64 FD | 	ret
140d8                 | 
140d8                 | ' 
140d8                 | ' '-------------------- pinhi
140d8                 | ' 
140d8                 | ' sub do_pinhi
140d8                 | _do_pinhi
140d8     00 4A 05 F6 | 	mov	COUNT_, #0
140dc     A8 00 A0 FD | 	call	#pushregs_
140e0     0C F0 07 F1 | 	add	ptra, #12
140e4     A8 77 BF FD | 	call	#_pop
140e8     A7 FA 61 FC | 	wrlong	result1, fp
140ec     04 4E 05 F1 | 	add	fp, #4
140f0     A7 FC 61 FC | 	wrlong	result2, fp
140f4     04 4E 05 F1 | 	add	fp, #4
140f8     A7 FE 61 FC | 	wrlong	result3, fp
140fc     08 4E 85 F1 | 	sub	fp, #8
14100     A7 12 02 F6 | 	mov	arg01, fp
14104     6C 79 BF FD | 	call	#_converttoint
14108     59 FA 61 FD | 	drvh	result1
1410c     A7 F0 03 F6 | 	mov	ptra, fp
14110     B2 00 A0 FD | 	call	#popregs_
14114                 | _do_pinhi_ret
14114     2D 00 64 FD | 	ret
14118                 | 
14118                 | ' 
14118                 | ' '-------------------- pinlo
14118                 | ' 
14118                 | ' sub do_pinlo
14118                 | _do_pinlo
14118     00 4A 05 F6 | 	mov	COUNT_, #0
1411c     A8 00 A0 FD | 	call	#pushregs_
14120     0C F0 07 F1 | 	add	ptra, #12
14124     68 77 BF FD | 	call	#_pop
14128     A7 FA 61 FC | 	wrlong	result1, fp
1412c     04 4E 05 F1 | 	add	fp, #4
14130     A7 FC 61 FC | 	wrlong	result2, fp
14134     04 4E 05 F1 | 	add	fp, #4
14138     A7 FE 61 FC | 	wrlong	result3, fp
1413c     08 4E 85 F1 | 	sub	fp, #8
14140     A7 12 02 F6 | 	mov	arg01, fp
14144     2C 79 BF FD | 	call	#_converttoint
14148     58 FA 61 FD | 	drvl	result1
1414c     A7 F0 03 F6 | 	mov	ptra, fp
14150     B2 00 A0 FD | 	call	#popregs_
14154                 | _do_pinlo_ret
14154     2D 00 64 FD | 	ret
14158                 | 
14158                 | ' 
14158                 | ' '-------------------- pinread
14158                 | ' 
14158                 | ' sub do_pinread
14158                 | _do_pinread
14158     00 4A 05 F6 | 	mov	COUNT_, #0
1415c     A8 00 A0 FD | 	call	#pushregs_
14160     0C F0 07 F1 | 	add	ptra, #12
14164     28 77 BF FD | 	call	#_pop
14168     A7 FA 61 FC | 	wrlong	result1, fp
1416c     04 4E 05 F1 | 	add	fp, #4
14170     A7 FC 61 FC | 	wrlong	result2, fp
14174     04 4E 05 F1 | 	add	fp, #4
14178     A7 FE 61 FC | 	wrlong	result3, fp
1417c     08 4E 85 F1 | 	sub	fp, #8
14180     A7 12 02 F6 | 	mov	arg01, fp
14184     EC 78 BF FD | 	call	#_converttoint
14188     FD 12 02 F6 | 	mov	arg01, result1
1418c     20 12 CE F7 | 	test	arg01, #32 wz
14190     FF FB 01 56 |  if_ne	mov	result1, inb
14194     FE FB 01 A6 |  if_e	mov	result1, ina
14198     09 FB 41 F0 | 	shr	result1, arg01
1419c     06 12 46 F0 | 	shr	arg01, #6
141a0     09 FB 41 F7 | 	zerox	result1, arg01
141a4     52 00 00 FF 
141a8     1C E4 05 F1 | 	add	objptr, ##42012
141ac     F2 FA 61 FC | 	wrlong	result1, objptr
141b0     52 00 00 FF 
141b4     1C E4 85 F1 | 	sub	objptr, ##42012
141b8     08 4E 05 F1 | 	add	fp, #8
141bc     A7 3A 68 FC | 	wrlong	#29, fp
141c0     08 4E 85 F1 | 	sub	fp, #8
141c4     A7 08 68 FC | 	wrlong	#4, fp
141c8     A7 12 02 F6 | 	mov	arg01, fp
141cc     58 77 BF FD | 	call	#_push
141d0     A7 F0 03 F6 | 	mov	ptra, fp
141d4     B2 00 A0 FD | 	call	#popregs_
141d8                 | _do_pinread_ret
141d8     2D 00 64 FD | 	ret
141dc                 | 
141dc                 | ' 
141dc                 | ' '-------------------- pinstart
141dc                 | ' 
141dc                 | ' sub do_pinstart
141dc                 | _do_pinstart
141dc     03 4A 05 F6 | 	mov	COUNT_, #3
141e0     A8 00 A0 FD | 	call	#pushregs_
141e4     30 F0 07 F1 | 	add	ptra, #48
141e8     A4 76 BF FD | 	call	#_pop
141ec     FD 16 02 F6 | 	mov	arg03, result1
141f0     FE 14 02 F6 | 	mov	arg02, result2
141f4     FF 18 02 F6 | 	mov	arg04, result3
141f8     A7 16 62 FC | 	wrlong	arg03, fp
141fc     04 4E 05 F1 | 	add	fp, #4
14200     A7 14 62 FC | 	wrlong	arg02, fp
14204     04 4E 05 F1 | 	add	fp, #4
14208     A7 18 62 FC | 	wrlong	arg04, fp
1420c     08 4E 85 F1 | 	sub	fp, #8
14210     7C 76 BF FD | 	call	#_pop
14214     FD 16 02 F6 | 	mov	arg03, result1
14218     FE 14 02 F6 | 	mov	arg02, result2
1421c     FF 18 02 F6 | 	mov	arg04, result3
14220     0C 4E 05 F1 | 	add	fp, #12
14224     A7 16 62 FC | 	wrlong	arg03, fp
14228     04 4E 05 F1 | 	add	fp, #4
1422c     A7 14 62 FC | 	wrlong	arg02, fp
14230     04 4E 05 F1 | 	add	fp, #4
14234     A7 18 62 FC | 	wrlong	arg04, fp
14238     14 4E 85 F1 | 	sub	fp, #20
1423c     50 76 BF FD | 	call	#_pop
14240     FD 16 02 F6 | 	mov	arg03, result1
14244     FE 14 02 F6 | 	mov	arg02, result2
14248     FF 18 02 F6 | 	mov	arg04, result3
1424c     18 4E 05 F1 | 	add	fp, #24
14250     A7 16 62 FC | 	wrlong	arg03, fp
14254     04 4E 05 F1 | 	add	fp, #4
14258     A7 14 62 FC | 	wrlong	arg02, fp
1425c     04 4E 05 F1 | 	add	fp, #4
14260     A7 18 62 FC | 	wrlong	arg04, fp
14264     20 4E 85 F1 | 	sub	fp, #32
14268     24 76 BF FD | 	call	#_pop
1426c     FF 16 02 F6 | 	mov	arg03, result3
14270     24 4E 05 F1 | 	add	fp, #36
14274     A7 FA 61 FC | 	wrlong	result1, fp
14278     04 4E 05 F1 | 	add	fp, #4
1427c     A7 FC 61 FC | 	wrlong	result2, fp
14280     04 4E 05 F1 | 	add	fp, #4
14284     A7 16 62 FC | 	wrlong	arg03, fp
14288     08 4E 85 F1 | 	sub	fp, #8
1428c     A7 12 02 F6 | 	mov	arg01, fp
14290     24 4E 85 F1 | 	sub	fp, #36
14294     DC 77 BF FD | 	call	#_converttoint
14298     FD 26 02 F6 | 	mov	local01, result1
1429c     18 4E 05 F1 | 	add	fp, #24
142a0     A7 12 02 F6 | 	mov	arg01, fp
142a4     18 4E 85 F1 | 	sub	fp, #24
142a8     C8 77 BF FD | 	call	#_converttoint
142ac     FD 28 02 F6 | 	mov	local02, result1
142b0     0C 4E 05 F1 | 	add	fp, #12
142b4     A7 12 02 F6 | 	mov	arg01, fp
142b8     0C 4E 85 F1 | 	sub	fp, #12
142bc     B4 77 BF FD | 	call	#_converttoint
142c0     FD 2A 02 F6 | 	mov	local03, result1
142c4     A7 12 02 F6 | 	mov	arg01, fp
142c8     A8 77 BF FD | 	call	#_converttoint
142cc     40 26 62 FD | 	dirl	local01
142d0     13 29 02 FC | 	wrpin	local02, local01
142d4     13 2B 12 FC | 	wxpin	local03, local01
142d8     13 FB 21 FC | 	wypin	result1, local01
142dc     41 26 62 FD | 	dirh	local01
142e0     A7 F0 03 F6 | 	mov	ptra, fp
142e4     B2 00 A0 FD | 	call	#popregs_
142e8                 | _do_pinstart_ret
142e8     2D 00 64 FD | 	ret
142ec                 | 
142ec                 | ' 
142ec                 | ' '-------------------- pintoggle
142ec                 | ' 
142ec                 | ' sub do_pintoggle
142ec                 | _do_pintoggle
142ec     00 4A 05 F6 | 	mov	COUNT_, #0
142f0     A8 00 A0 FD | 	call	#pushregs_
142f4     0C F0 07 F1 | 	add	ptra, #12
142f8     94 75 BF FD | 	call	#_pop
142fc     A7 FA 61 FC | 	wrlong	result1, fp
14300     04 4E 05 F1 | 	add	fp, #4
14304     A7 FC 61 FC | 	wrlong	result2, fp
14308     04 4E 05 F1 | 	add	fp, #4
1430c     A7 FE 61 FC | 	wrlong	result3, fp
14310     08 4E 85 F1 | 	sub	fp, #8
14314     A7 12 02 F6 | 	mov	arg01, fp
14318     58 77 BF FD | 	call	#_converttoint
1431c     5F FA 61 FD | 	drvnot	result1
14320     A7 F0 03 F6 | 	mov	ptra, fp
14324     B2 00 A0 FD | 	call	#popregs_
14328                 | _do_pintoggle_ret
14328     2D 00 64 FD | 	ret
1432c                 | 
1432c                 | ' 
1432c                 | ' '-------------------- pinwrite
1432c                 | ' 
1432c                 | ' sub do_pinwrite
1432c                 | _do_pinwrite
1432c     01 4A 05 F6 | 	mov	COUNT_, #1
14330     A8 00 A0 FD | 	call	#pushregs_
14334     18 F0 07 F1 | 	add	ptra, #24
14338     54 75 BF FD | 	call	#_pop
1433c     FD 14 02 F6 | 	mov	arg02, result1
14340     FE 12 02 F6 | 	mov	arg01, result2
14344     FF 26 02 F6 | 	mov	local01, result3
14348     A7 14 62 FC | 	wrlong	arg02, fp
1434c     04 4E 05 F1 | 	add	fp, #4
14350     A7 12 62 FC | 	wrlong	arg01, fp
14354     04 4E 05 F1 | 	add	fp, #4
14358     A7 26 62 FC | 	wrlong	local01, fp
1435c     08 4E 85 F1 | 	sub	fp, #8
14360     2C 75 BF FD | 	call	#_pop
14364     FF 26 02 F6 | 	mov	local01, result3
14368     0C 4E 05 F1 | 	add	fp, #12
1436c     A7 FA 61 FC | 	wrlong	result1, fp
14370     04 4E 05 F1 | 	add	fp, #4
14374     A7 FC 61 FC | 	wrlong	result2, fp
14378     04 4E 05 F1 | 	add	fp, #4
1437c     A7 26 62 FC | 	wrlong	local01, fp
14380     08 4E 85 F1 | 	sub	fp, #8
14384     A7 12 02 F6 | 	mov	arg01, fp
14388     0C 4E 85 F1 | 	sub	fp, #12
1438c     E4 76 BF FD | 	call	#_converttoint
14390     FD 26 02 F6 | 	mov	local01, result1
14394     A7 12 02 F6 | 	mov	arg01, fp
14398     D8 76 BF FD | 	call	#_converttoint
1439c     FD 14 02 F6 | 	mov	arg02, result1
143a0     13 13 02 F6 | 	mov	arg01, local01
143a4     20 DA B0 FD | 	call	#__system___pinwrite
143a8     A7 F0 03 F6 | 	mov	ptra, fp
143ac     B2 00 A0 FD | 	call	#popregs_
143b0                 | _do_pinwrite_ret
143b0     2D 00 64 FD | 	ret
143b4                 | 
143b4                 | ' 
143b4                 | ' '-------------------- play
143b4                 | ' 
143b4                 | ' sub do_play
143b4                 | _do_play
143b4     08 4A 05 F6 | 	mov	COUNT_, #8
143b8     A8 00 A0 FD | 	call	#pushregs_
143bc     7C F0 07 F1 | 	add	ptra, #124
143c0     68 4E 05 F1 | 	add	fp, #104
143c4     77 CC A1 FF 
143c8     A7 7C 6B FC | 	wrlong	##1134096318, fp
143cc                 | ' speed_coeff=305.873
143cc                 | ' 
143cc                 | ' for i=0 to 8 : params(i)=-2.0 : next i
143cc     64 4E 85 F1 | 	sub	fp, #100
143d0     A7 00 68 FC | 	wrlong	#0, fp
143d4     97 18 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
143d8                 | LR__1720
143d8     A7 16 02 FB | 	rdlong	arg03, fp
143dc     02 16 66 F0 | 	shl	arg03, #2
143e0     34 4E 05 F1 | 	add	fp, #52
143e4     A7 16 02 F1 | 	add	arg03, fp
143e8     00 00 E0 FF 
143ec     0B 01 68 FC | 	wrlong	##-1073741824, arg03
143f0     34 4E 85 F1 | 	sub	fp, #52
143f4     A7 26 02 FB | 	rdlong	local01, fp
143f8     01 26 06 F1 | 	add	local01, #1
143fc     A7 26 62 FC | 	wrlong	local01, fp
14400     09 26 56 F2 | 	cmps	local01, #9 wc
14404     D0 FF 9F CD |  if_b	jmp	#LR__1720
14408                 | LR__1721
14408     04 4E 85 F1 | 	sub	fp, #4
1440c     4A 00 00 FF 
14410     80 E4 05 F1 | 	add	objptr, ##38016
14414     F2 28 02 FB | 	rdlong	local02, objptr
14418     14 2B 02 F6 | 	mov	local03, local02
1441c     01 2A 66 F0 | 	shl	local03, #1
14420     14 2B 02 F1 | 	add	local03, local02
14424     02 2A 66 F0 | 	shl	local03, #2
14428     03 00 00 FF 
1442c     04 E4 85 F1 | 	sub	objptr, ##1540
14430     F2 2A 02 F1 | 	add	local03, objptr
14434     15 2D 02 FB | 	rdlong	local04, local03
14438     A7 2C 62 FC | 	wrlong	local04, fp
1443c                 | ' numpar=compiledline(lineptr_e).result.uresult
1443c                 | ' for i=numpar to 1 step -1 
1443c     04 4E 05 F1 | 	add	fp, #4
14440     A7 2C 62 FC | 	wrlong	local04, fp
14444     04 4E 85 F1 | 	sub	fp, #4
14448     47 00 00 FF 
1444c     7C E4 85 F1 | 	sub	objptr, ##36476
14450                 | LR__1722
14450     3C 74 BF FD | 	call	#_pop
14454     5C 4E 05 F1 | 	add	fp, #92
14458     A7 FA 61 FC | 	wrlong	result1, fp
1445c     04 4E 05 F1 | 	add	fp, #4
14460     A7 FC 61 FC | 	wrlong	result2, fp
14464     04 4E 05 F1 | 	add	fp, #4
14468     A7 FE 61 FC | 	wrlong	result3, fp
1446c     60 4E 85 F1 | 	sub	fp, #96
14470     A7 2A 02 FB | 	rdlong	local03, fp
14474     01 2A 86 F1 | 	sub	local03, #1
14478     02 2A 66 F0 | 	shl	local03, #2
1447c     34 4E 05 F1 | 	add	fp, #52
14480     A7 2A 02 F1 | 	add	local03, fp
14484     24 4E 05 F1 | 	add	fp, #36
14488     A7 2E 02 F6 | 	mov	local05, fp
1448c     17 13 02 F6 | 	mov	arg01, local05
14490     5C 4E 85 F1 | 	sub	fp, #92
14494     98 76 BF FD | 	call	#_converttofloat
14498     15 FB 61 FC | 	wrlong	result1, local03
1449c     04 4E 05 F1 | 	add	fp, #4
144a0     A7 26 02 FB | 	rdlong	local01, fp
144a4     01 26 86 F1 | 	sub	local01, #1
144a8     A7 26 62 FC | 	wrlong	local01, fp
144ac     04 4E 85 F1 | 	sub	fp, #4
144b0     01 26 56 F2 | 	cmps	local01, #1 wc
144b4     98 FF 9F 3D |  if_ae	jmp	#LR__1722
144b8                 | ' 
144b8                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
144b8     38 4E 05 F1 | 	add	fp, #56
144bc     A7 12 02 FB | 	rdlong	arg01, fp
144c0     38 4E 85 F1 | 	sub	fp, #56
144c4     00 14 06 F6 | 	mov	arg02, #0
144c8     01 16 06 F6 | 	mov	arg03, #1
144cc     34 09 B1 FD | 	call	#__system___float_cmp
144d0     00 FA 55 F2 | 	cmps	result1, #0 wc
144d4     0C 4E 05 C1 |  if_b	add	fp, #12
144d8     A7 00 68 CC |  if_b	wrlong	#0, fp
144dc     0C 4E 85 C1 |  if_b	sub	fp, #12
144e0     2C 00 90 CD |  if_b	jmp	#LR__1723
144e4     38 4E 05 F1 | 	add	fp, #56
144e8     A7 12 02 FB | 	rdlong	arg01, fp
144ec     38 4E 85 F1 | 	sub	fp, #56
144f0     01 14 06 F6 | 	mov	arg02, #1
144f4     A0 09 B1 FD | 	call	#__system___float_tointeger
144f8     FD 26 52 F6 | 	abs	local01, result1 wc
144fc     07 26 06 F5 | 	and	local01, #7
14500     13 27 82 F6 | 	negc	local01, local01
14504     0C 4E 05 F1 | 	add	fp, #12
14508     A7 26 62 FC | 	wrlong	local01, fp
1450c     0C 4E 85 F1 | 	sub	fp, #12
14510                 | LR__1723
14510                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
14510     3C 4E 05 F1 | 	add	fp, #60
14514     A7 12 02 FB | 	rdlong	arg01, fp
14518     3C 4E 85 F1 | 	sub	fp, #60
1451c     00 14 06 F6 | 	mov	arg02, #0
14520     01 16 06 F6 | 	mov	arg03, #1
14524     DC 08 B1 FD | 	call	#__system___float_cmp
14528     00 FA 55 F2 | 	cmps	result1, #0 wc
1452c     40 00 90 3D |  if_ae	jmp	#LR__1724
14530     0C 4E 05 F1 | 	add	fp, #12
14534     A7 28 02 FB | 	rdlong	local02, fp
14538     14 2B 02 F6 | 	mov	local03, local02
1453c     01 2A 66 F0 | 	shl	local03, #1
14540     14 2B 02 F1 | 	add	local03, local02
14544     03 2A 66 F0 | 	shl	local03, #3
14548     14 00 00 FF 
1454c     38 E5 05 F1 | 	add	objptr, ##10552
14550     F2 2A 02 F1 | 	add	local03, objptr
14554     15 31 02 FB | 	rdlong	local06, local03
14558     60 4E 05 F1 | 	add	fp, #96
1455c     A7 30 62 FC | 	wrlong	local06, fp
14560     6C 4E 85 F1 | 	sub	fp, #108
14564     14 00 00 FF 
14568     38 E5 85 F1 | 	sub	objptr, ##10552
1456c     44 00 90 FD | 	jmp	#LR__1725
14570                 | LR__1724
14570     3C 4E 05 F1 | 	add	fp, #60
14574     A7 2C 02 FB | 	rdlong	local04, fp
14578     30 4E 05 F1 | 	add	fp, #48
1457c     A7 2C 62 FC | 	wrlong	local04, fp
14580     60 4E 85 F1 | 	sub	fp, #96
14584     A7 28 02 FB | 	rdlong	local02, fp
14588     14 2B 02 F6 | 	mov	local03, local02
1458c     01 2A 66 F0 | 	shl	local03, #1
14590     14 2B 02 F1 | 	add	local03, local02
14594     03 2A 66 F0 | 	shl	local03, #3
14598     14 00 00 FF 
1459c     38 E5 05 F1 | 	add	objptr, ##10552
145a0     F2 2A 02 F1 | 	add	local03, objptr
145a4     0C 4E 85 F1 | 	sub	fp, #12
145a8     15 2D 62 FC | 	wrlong	local04, local03
145ac     14 00 00 FF 
145b0     38 E5 85 F1 | 	sub	objptr, ##10552
145b4                 | LR__1725
145b4                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
145b4     40 4E 05 F1 | 	add	fp, #64
145b8     A7 12 02 FB | 	rdlong	arg01, fp
145bc     40 4E 85 F1 | 	sub	fp, #64
145c0     00 14 06 F6 | 	mov	arg02, #0
145c4     01 16 06 F6 | 	mov	arg03, #1
145c8     38 08 B1 FD | 	call	#__system___float_cmp
145cc     00 FA 55 F2 | 	cmps	result1, #0 wc
145d0     24 00 90 CD |  if_b	jmp	#LR__1726
145d4     40 4E 05 F1 | 	add	fp, #64
145d8     A7 12 02 FB | 	rdlong	arg01, fp
145dc     40 4E 85 F1 | 	sub	fp, #64
145e0     20 0E 23 FF 
145e4     00 14 06 F6 | 	mov	arg02, ##1176256512
145e8     01 16 66 F6 | 	neg	arg03, #1
145ec     14 08 B1 FD | 	call	#__system___float_cmp
145f0     01 FA 55 F2 | 	cmps	result1, #1 wc
145f4     48 00 90 CD |  if_b	jmp	#LR__1727
145f8                 | LR__1726
145f8     0C 4E 05 F1 | 	add	fp, #12
145fc     A7 2A 02 FB | 	rdlong	local03, fp
14600     15 33 02 F6 | 	mov	local07, local03
14604     01 32 66 F0 | 	shl	local07, #1
14608     15 33 02 F1 | 	add	local07, local03
1460c     03 32 66 F0 | 	shl	local07, #3
14610     14 00 00 FF 
14614     38 E5 05 F1 | 	add	objptr, ##10552
14618     F2 32 02 F1 | 	add	local07, objptr
1461c     06 32 06 F1 | 	add	local07, #6
14620     19 2F E2 FA | 	rdword	local05, local07
14624     17 2D 32 F9 | 	getword	local04, local05, #0
14628     1C 4E 05 F1 | 	add	fp, #28
1462c     A7 2C 62 FC | 	wrlong	local04, fp
14630     28 4E 85 F1 | 	sub	fp, #40
14634     14 00 00 FF 
14638     38 E5 85 F1 | 	sub	objptr, ##10552
1463c     54 00 90 FD | 	jmp	#LR__1728
14640                 | LR__1727
14640     40 4E 05 F1 | 	add	fp, #64
14644     A7 12 02 FB | 	rdlong	arg01, fp
14648     40 4E 85 F1 | 	sub	fp, #64
1464c     01 14 06 F6 | 	mov	arg02, #1
14650     44 08 B1 FD | 	call	#__system___float_tointeger
14654     28 4E 05 F1 | 	add	fp, #40
14658     A7 FA 61 FC | 	wrlong	result1, fp
1465c     1C 4E 85 F1 | 	sub	fp, #28
14660     A7 28 02 FB | 	rdlong	local02, fp
14664     14 2B 02 F6 | 	mov	local03, local02
14668     01 2A 66 F0 | 	shl	local03, #1
1466c     14 2B 02 F1 | 	add	local03, local02
14670     03 2A 66 F0 | 	shl	local03, #3
14674     14 00 00 FF 
14678     38 E5 05 F1 | 	add	objptr, ##10552
1467c     F2 2A 02 F1 | 	add	local03, objptr
14680     0C 4E 85 F1 | 	sub	fp, #12
14684     06 2A 06 F1 | 	add	local03, #6
14688     15 FB 51 FC | 	wrword	result1, local03
1468c     14 00 00 FF 
14690     38 E5 85 F1 | 	sub	objptr, ##10552
14694                 | LR__1728
14694                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
14694     44 4E 05 F1 | 	add	fp, #68
14698     A7 12 02 FB | 	rdlong	arg01, fp
1469c     44 4E 85 F1 | 	sub	fp, #68
146a0     00 14 06 F6 | 	mov	arg02, #0
146a4     01 16 06 F6 | 	mov	arg03, #1
146a8     58 07 B1 FD | 	call	#__system___float_cmp
146ac     00 FA 55 F2 | 	cmps	result1, #0 wc
146b0     24 00 90 CD |  if_b	jmp	#LR__1729
146b4     44 4E 05 F1 | 	add	fp, #68
146b8     A7 12 02 FB | 	rdlong	arg01, fp
146bc     44 4E 85 F1 | 	sub	fp, #68
146c0     89 C1 20 FF 
146c4     6F 14 06 F6 | 	mov	arg02, ##1099108975
146c8     01 16 66 F6 | 	neg	arg03, #1
146cc     34 07 B1 FD | 	call	#__system___float_cmp
146d0     01 FA 55 F2 | 	cmps	result1, #1 wc
146d4     44 00 90 CD |  if_b	jmp	#LR__1730
146d8                 | LR__1729
146d8     0C 4E 05 F1 | 	add	fp, #12
146dc     A7 28 02 FB | 	rdlong	local02, fp
146e0     14 2B 02 F6 | 	mov	local03, local02
146e4     01 2A 66 F0 | 	shl	local03, #1
146e8     14 2B 02 F1 | 	add	local03, local02
146ec     03 2A 66 F0 | 	shl	local03, #3
146f0     14 00 00 FF 
146f4     38 E5 05 F1 | 	add	objptr, ##10552
146f8     F2 2A 02 F1 | 	add	local03, objptr
146fc     0C 2A 06 F1 | 	add	local03, #12
14700     15 31 02 FB | 	rdlong	local06, local03
14704     68 4E 05 F1 | 	add	fp, #104
14708     A7 30 62 FC | 	wrlong	local06, fp
1470c     74 4E 85 F1 | 	sub	fp, #116
14710     14 00 00 FF 
14714     38 E5 85 F1 | 	sub	objptr, ##10552
14718     48 00 90 FD | 	jmp	#LR__1731
1471c                 | LR__1730
1471c     44 4E 05 F1 | 	add	fp, #68
14720     A7 2C 02 FB | 	rdlong	local04, fp
14724     30 4E 05 F1 | 	add	fp, #48
14728     A7 2C 62 FC | 	wrlong	local04, fp
1472c     68 4E 85 F1 | 	sub	fp, #104
14730     A7 28 02 FB | 	rdlong	local02, fp
14734     14 2B 02 F6 | 	mov	local03, local02
14738     01 2A 66 F0 | 	shl	local03, #1
1473c     14 2B 02 F1 | 	add	local03, local02
14740     03 2A 66 F0 | 	shl	local03, #3
14744     14 00 00 FF 
14748     38 E5 05 F1 | 	add	objptr, ##10552
1474c     F2 2A 02 F1 | 	add	local03, objptr
14750     0C 4E 85 F1 | 	sub	fp, #12
14754     0C 2A 06 F1 | 	add	local03, #12
14758     15 2D 62 FC | 	wrlong	local04, local03
1475c     14 00 00 FF 
14760     38 E5 85 F1 | 	sub	objptr, ##10552
14764                 | LR__1731
14764                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
14764     48 4E 05 F1 | 	add	fp, #72
14768     A7 12 02 FB | 	rdlong	arg01, fp
1476c     48 4E 85 F1 | 	sub	fp, #72
14770     00 14 06 F6 | 	mov	arg02, #0
14774     01 16 06 F6 | 	mov	arg03, #1
14778     88 06 B1 FD | 	call	#__system___float_cmp
1477c     00 FA 55 F2 | 	cmps	result1, #0 wc
14780     24 00 90 CD |  if_b	jmp	#LR__1732
14784     48 4E 05 F1 | 	add	fp, #72
14788     A7 12 02 FB | 	rdlong	arg01, fp
1478c     48 4E 85 F1 | 	sub	fp, #72
14790     00 00 21 FF 
14794     00 14 06 F6 | 	mov	arg02, ##1107296256
14798     01 16 66 F6 | 	neg	arg03, #1
1479c     64 06 B1 FD | 	call	#__system___float_cmp
147a0     01 FA 55 F2 | 	cmps	result1, #1 wc
147a4     48 00 90 CD |  if_b	jmp	#LR__1733
147a8                 | LR__1732
147a8     0C 4E 05 F1 | 	add	fp, #12
147ac     A7 2A 02 FB | 	rdlong	local03, fp
147b0     15 33 02 F6 | 	mov	local07, local03
147b4     01 32 66 F0 | 	shl	local07, #1
147b8     15 33 02 F1 | 	add	local07, local03
147bc     03 32 66 F0 | 	shl	local07, #3
147c0     14 00 00 FF 
147c4     38 E5 05 F1 | 	add	objptr, ##10552
147c8     F2 32 02 F1 | 	add	local07, objptr
147cc     04 32 06 F1 | 	add	local07, #4
147d0     19 2F C2 FA | 	rdbyte	local05, local07
147d4     17 2D E2 F8 | 	getbyte	local04, local05, #0
147d8     14 4E 05 F1 | 	add	fp, #20
147dc     A7 2C 62 FC | 	wrlong	local04, fp
147e0     20 4E 85 F1 | 	sub	fp, #32
147e4     14 00 00 FF 
147e8     38 E5 85 F1 | 	sub	objptr, ##10552
147ec     54 00 90 FD | 	jmp	#LR__1734
147f0                 | LR__1733
147f0     48 4E 05 F1 | 	add	fp, #72
147f4     A7 12 02 FB | 	rdlong	arg01, fp
147f8     48 4E 85 F1 | 	sub	fp, #72
147fc     01 14 06 F6 | 	mov	arg02, #1
14800     94 06 B1 FD | 	call	#__system___float_tointeger
14804     20 4E 05 F1 | 	add	fp, #32
14808     A7 FA 61 FC | 	wrlong	result1, fp
1480c     14 4E 85 F1 | 	sub	fp, #20
14810     A7 28 02 FB | 	rdlong	local02, fp
14814     14 2B 02 F6 | 	mov	local03, local02
14818     01 2A 66 F0 | 	shl	local03, #1
1481c     14 2B 02 F1 | 	add	local03, local02
14820     03 2A 66 F0 | 	shl	local03, #3
14824     14 00 00 FF 
14828     38 E5 05 F1 | 	add	objptr, ##10552
1482c     F2 2A 02 F1 | 	add	local03, objptr
14830     0C 4E 85 F1 | 	sub	fp, #12
14834     04 2A 06 F1 | 	add	local03, #4
14838     15 FB 41 FC | 	wrbyte	result1, local03
1483c     14 00 00 FF 
14840     38 E5 85 F1 | 	sub	objptr, ##10552
14844                 | LR__1734
14844                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
14844     4C 4E 05 F1 | 	add	fp, #76
14848     A7 12 02 FB | 	rdlong	arg01, fp
1484c     4C 4E 85 F1 | 	sub	fp, #76
14850     00 14 06 F6 | 	mov	arg02, #0
14854     01 16 06 F6 | 	mov	arg03, #1
14858     A8 05 B1 FD | 	call	#__system___float_cmp
1485c     00 FA 55 F2 | 	cmps	result1, #0 wc
14860     24 00 90 CD |  if_b	jmp	#LR__1735
14864     4C 4E 05 F1 | 	add	fp, #76
14868     A7 12 02 FB | 	rdlong	arg01, fp
1486c     4C 4E 85 F1 | 	sub	fp, #76
14870     00 80 20 FF 
14874     00 14 06 F6 | 	mov	arg02, ##1090519040
14878     01 16 66 F6 | 	neg	arg03, #1
1487c     84 05 B1 FD | 	call	#__system___float_cmp
14880     01 FA 55 F2 | 	cmps	result1, #1 wc
14884     48 00 90 CD |  if_b	jmp	#LR__1736
14888                 | LR__1735
14888     0C 4E 05 F1 | 	add	fp, #12
1488c     A7 2A 02 FB | 	rdlong	local03, fp
14890     15 33 02 F6 | 	mov	local07, local03
14894     01 32 66 F0 | 	shl	local07, #1
14898     15 33 02 F1 | 	add	local07, local03
1489c     03 32 66 F0 | 	shl	local07, #3
148a0     14 00 00 FF 
148a4     38 E5 05 F1 | 	add	objptr, ##10552
148a8     F2 32 02 F1 | 	add	local07, objptr
148ac     05 32 06 F1 | 	add	local07, #5
148b0     19 2F C2 FA | 	rdbyte	local05, local07
148b4     17 2D E2 F8 | 	getbyte	local04, local05, #0
148b8     18 4E 05 F1 | 	add	fp, #24
148bc     A7 2C 62 FC | 	wrlong	local04, fp
148c0     24 4E 85 F1 | 	sub	fp, #36
148c4     14 00 00 FF 
148c8     38 E5 85 F1 | 	sub	objptr, ##10552
148cc     54 00 90 FD | 	jmp	#LR__1737
148d0                 | LR__1736
148d0     4C 4E 05 F1 | 	add	fp, #76
148d4     A7 12 02 FB | 	rdlong	arg01, fp
148d8     4C 4E 85 F1 | 	sub	fp, #76
148dc     01 14 06 F6 | 	mov	arg02, #1
148e0     B4 05 B1 FD | 	call	#__system___float_tointeger
148e4     24 4E 05 F1 | 	add	fp, #36
148e8     A7 FA 61 FC | 	wrlong	result1, fp
148ec     18 4E 85 F1 | 	sub	fp, #24
148f0     A7 28 02 FB | 	rdlong	local02, fp
148f4     14 2B 02 F6 | 	mov	local03, local02
148f8     01 2A 66 F0 | 	shl	local03, #1
148fc     14 2B 02 F1 | 	add	local03, local02
14900     03 2A 66 F0 | 	shl	local03, #3
14904     14 00 00 FF 
14908     38 E5 05 F1 | 	add	objptr, ##10552
1490c     F2 2A 02 F1 | 	add	local03, objptr
14910     0C 4E 85 F1 | 	sub	fp, #12
14914     05 2A 06 F1 | 	add	local03, #5
14918     15 FB 41 FC | 	wrbyte	result1, local03
1491c     14 00 00 FF 
14920     38 E5 85 F1 | 	sub	objptr, ##10552
14924                 | LR__1737
14924                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
14924     50 4E 05 F1 | 	add	fp, #80
14928     A7 12 02 FB | 	rdlong	arg01, fp
1492c     50 4E 85 F1 | 	sub	fp, #80
14930     00 14 06 F6 | 	mov	arg02, #0
14934     01 16 06 F6 | 	mov	arg03, #1
14938     C8 04 B1 FD | 	call	#__system___float_cmp
1493c     00 FA 55 F2 | 	cmps	result1, #0 wc
14940     24 00 90 CD |  if_b	jmp	#LR__1738
14944     50 4E 05 F1 | 	add	fp, #80
14948     A7 12 02 FB | 	rdlong	arg01, fp
1494c     50 4E 85 F1 | 	sub	fp, #80
14950     00 3D 22 FF 
14954     00 14 06 F6 | 	mov	arg02, ##1148846080
14958     01 16 66 F6 | 	neg	arg03, #1
1495c     A4 04 B1 FD | 	call	#__system___float_cmp
14960     01 FA 55 F2 | 	cmps	result1, #1 wc
14964     44 00 90 CD |  if_b	jmp	#LR__1739
14968                 | LR__1738
14968     0C 4E 05 F1 | 	add	fp, #12
1496c     A7 28 02 FB | 	rdlong	local02, fp
14970     14 2B 02 F6 | 	mov	local03, local02
14974     01 2A 66 F0 | 	shl	local03, #1
14978     14 2B 02 F1 | 	add	local03, local02
1497c     03 2A 66 F0 | 	shl	local03, #3
14980     14 00 00 FF 
14984     38 E5 05 F1 | 	add	objptr, ##10552
14988     F2 2A 02 F1 | 	add	local03, objptr
1498c     08 2A 06 F1 | 	add	local03, #8
14990     15 31 02 FB | 	rdlong	local06, local03
14994     6C 4E 05 F1 | 	add	fp, #108
14998     A7 30 62 FC | 	wrlong	local06, fp
1499c     78 4E 85 F1 | 	sub	fp, #120
149a0     14 00 00 FF 
149a4     38 E5 85 F1 | 	sub	objptr, ##10552
149a8     48 00 90 FD | 	jmp	#LR__1740
149ac                 | LR__1739
149ac     50 4E 05 F1 | 	add	fp, #80
149b0     A7 30 02 FB | 	rdlong	local06, fp
149b4     28 4E 05 F1 | 	add	fp, #40
149b8     A7 30 62 FC | 	wrlong	local06, fp
149bc     6C 4E 85 F1 | 	sub	fp, #108
149c0     A7 28 02 FB | 	rdlong	local02, fp
149c4     14 2B 02 F6 | 	mov	local03, local02
149c8     01 2A 66 F0 | 	shl	local03, #1
149cc     14 2B 02 F1 | 	add	local03, local02
149d0     03 2A 66 F0 | 	shl	local03, #3
149d4     14 00 00 FF 
149d8     38 E5 05 F1 | 	add	objptr, ##10552
149dc     F2 2A 02 F1 | 	add	local03, objptr
149e0     0C 4E 85 F1 | 	sub	fp, #12
149e4     08 2A 06 F1 | 	add	local03, #8
149e8     15 31 62 FC | 	wrlong	local06, local03
149ec     14 00 00 FF 
149f0     38 E5 85 F1 | 	sub	objptr, ##10552
149f4                 | LR__1740
149f4                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
149f4     54 4E 05 F1 | 	add	fp, #84
149f8     A7 12 02 FB | 	rdlong	arg01, fp
149fc     54 4E 85 F1 | 	sub	fp, #84
14a00     00 C0 5F FF 
14a04     00 14 06 F6 | 	mov	arg02, ##-1082130432
14a08     01 16 06 F6 | 	mov	arg03, #1
14a0c     F4 03 B1 FD | 	call	#__system___float_cmp
14a10     00 FA 55 F2 | 	cmps	result1, #0 wc
14a14     24 00 90 CD |  if_b	jmp	#LR__1741
14a18     54 4E 05 F1 | 	add	fp, #84
14a1c     A7 12 02 FB | 	rdlong	arg01, fp
14a20     54 4E 85 F1 | 	sub	fp, #84
14a24     00 C0 1F FF 
14a28     00 14 06 F6 | 	mov	arg02, ##1065353216
14a2c     01 16 66 F6 | 	neg	arg03, #1
14a30     D0 03 B1 FD | 	call	#__system___float_cmp
14a34     01 FA 55 F2 | 	cmps	result1, #1 wc
14a38     44 00 90 CD |  if_b	jmp	#LR__1742
14a3c                 | LR__1741
14a3c     0C 4E 05 F1 | 	add	fp, #12
14a40     A7 28 02 FB | 	rdlong	local02, fp
14a44     14 2B 02 F6 | 	mov	local03, local02
14a48     01 2A 66 F0 | 	shl	local03, #1
14a4c     14 2B 02 F1 | 	add	local03, local02
14a50     03 2A 66 F0 | 	shl	local03, #3
14a54     14 00 00 FF 
14a58     38 E5 05 F1 | 	add	objptr, ##10552
14a5c     F2 2A 02 F1 | 	add	local03, objptr
14a60     10 2A 06 F1 | 	add	local03, #16
14a64     15 31 02 FB | 	rdlong	local06, local03
14a68     64 4E 05 F1 | 	add	fp, #100
14a6c     A7 30 62 FC | 	wrlong	local06, fp
14a70     70 4E 85 F1 | 	sub	fp, #112
14a74     14 00 00 FF 
14a78     38 E5 85 F1 | 	sub	objptr, ##10552
14a7c     48 00 90 FD | 	jmp	#LR__1743
14a80                 | LR__1742
14a80     54 4E 05 F1 | 	add	fp, #84
14a84     A7 30 02 FB | 	rdlong	local06, fp
14a88     1C 4E 05 F1 | 	add	fp, #28
14a8c     A7 30 62 FC | 	wrlong	local06, fp
14a90     64 4E 85 F1 | 	sub	fp, #100
14a94     A7 28 02 FB | 	rdlong	local02, fp
14a98     14 2B 02 F6 | 	mov	local03, local02
14a9c     01 2A 66 F0 | 	shl	local03, #1
14aa0     14 2B 02 F1 | 	add	local03, local02
14aa4     03 2A 66 F0 | 	shl	local03, #3
14aa8     14 00 00 FF 
14aac     38 E5 05 F1 | 	add	objptr, ##10552
14ab0     F2 2A 02 F1 | 	add	local03, objptr
14ab4     0C 4E 85 F1 | 	sub	fp, #12
14ab8     10 2A 06 F1 | 	add	local03, #16
14abc     15 31 62 FC | 	wrlong	local06, local03
14ac0     14 00 00 FF 
14ac4     38 E5 85 F1 | 	sub	objptr, ##10552
14ac8                 | LR__1743
14ac8                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
14ac8     58 4E 05 F1 | 	add	fp, #88
14acc     A7 12 02 FB | 	rdlong	arg01, fp
14ad0     58 4E 85 F1 | 	sub	fp, #88
14ad4     00 14 06 F6 | 	mov	arg02, #0
14ad8     01 16 06 F6 | 	mov	arg03, #1
14adc     24 03 B1 FD | 	call	#__system___float_cmp
14ae0     00 FA 55 F2 | 	cmps	result1, #0 wc
14ae4     24 00 90 CD |  if_b	jmp	#LR__1744
14ae8     58 4E 05 F1 | 	add	fp, #88
14aec     A7 12 02 FB | 	rdlong	arg01, fp
14af0     58 4E 85 F1 | 	sub	fp, #88
14af4     80 BF 21 FF 
14af8     00 14 06 F6 | 	mov	arg02, ##1132396544
14afc     01 16 66 F6 | 	neg	arg03, #1
14b00     00 03 B1 FD | 	call	#__system___float_cmp
14b04     01 FA 55 F2 | 	cmps	result1, #1 wc
14b08     44 00 90 CD |  if_b	jmp	#LR__1745
14b0c                 | LR__1744
14b0c     0C 4E 05 F1 | 	add	fp, #12
14b10     A7 2A 02 FB | 	rdlong	local03, fp
14b14     15 33 02 F6 | 	mov	local07, local03
14b18     01 32 66 F0 | 	shl	local07, #1
14b1c     15 33 02 F1 | 	add	local07, local03
14b20     03 32 66 F0 | 	shl	local07, #3
14b24     14 00 00 FF 
14b28     38 E5 05 F1 | 	add	objptr, ##10552
14b2c     F2 32 02 F1 | 	add	local07, objptr
14b30     14 32 06 F1 | 	add	local07, #20
14b34     19 2D E2 FA | 	rdword	local04, local07
14b38     20 4E 05 F1 | 	add	fp, #32
14b3c     A7 2C 62 FC | 	wrlong	local04, fp
14b40     2C 4E 85 F1 | 	sub	fp, #44
14b44     14 00 00 FF 
14b48     38 E5 85 F1 | 	sub	objptr, ##10552
14b4c     54 00 90 FD | 	jmp	#LR__1746
14b50                 | LR__1745
14b50     58 4E 05 F1 | 	add	fp, #88
14b54     A7 12 02 FB | 	rdlong	arg01, fp
14b58     58 4E 85 F1 | 	sub	fp, #88
14b5c     01 14 06 F6 | 	mov	arg02, #1
14b60     34 03 B1 FD | 	call	#__system___float_tointeger
14b64     2C 4E 05 F1 | 	add	fp, #44
14b68     A7 FA 61 FC | 	wrlong	result1, fp
14b6c     20 4E 85 F1 | 	sub	fp, #32
14b70     A7 28 02 FB | 	rdlong	local02, fp
14b74     14 2B 02 F6 | 	mov	local03, local02
14b78     01 2A 66 F0 | 	shl	local03, #1
14b7c     14 2B 02 F1 | 	add	local03, local02
14b80     03 2A 66 F0 | 	shl	local03, #3
14b84     14 00 00 FF 
14b88     38 E5 05 F1 | 	add	objptr, ##10552
14b8c     F2 2A 02 F1 | 	add	local03, objptr
14b90     0C 4E 85 F1 | 	sub	fp, #12
14b94     14 2A 06 F1 | 	add	local03, #20
14b98     15 FB 51 FC | 	wrword	result1, local03
14b9c     14 00 00 FF 
14ba0     38 E5 85 F1 | 	sub	objptr, ##10552
14ba4                 | LR__1746
14ba4     6C 4E 05 F1 | 	add	fp, #108
14ba8     A7 14 02 FB | 	rdlong	arg02, fp
14bac     6C 4E 85 F1 | 	sub	fp, #108
14bb0     FC 16 20 FF 
14bb4     54 12 06 F6 | 	mov	arg01, ##1076754516
14bb8     E4 0D B1 FD | 	call	#__system____builtin_logbase
14bbc     FD 2C 02 F6 | 	mov	local04, result1
14bc0     1E 14 C6 F9 | 	decod	arg02, #30
14bc4     FC 16 20 FF 
14bc8     54 12 06 F6 | 	mov	arg01, ##1076754516
14bcc     D0 0D B1 FD | 	call	#__system____builtin_logbase
14bd0     FD 14 02 F6 | 	mov	arg02, result1
14bd4     16 13 02 F6 | 	mov	arg01, local04
14bd8     F8 FF B0 FD | 	call	#__system___float_div
14bdc     FD 12 02 F6 | 	mov	arg01, result1
14be0     00 14 06 F6 | 	mov	arg02, #0
14be4     B0 02 B1 FD | 	call	#__system___float_tointeger
14be8     30 4E 05 F1 | 	add	fp, #48
14bec     A7 FA 61 FC | 	wrlong	result1, fp
14bf0     1E 2C C6 F9 | 	decod	local04, #30
14bf4     FD 12 02 F6 | 	mov	arg01, result1
14bf8     30 4E 85 F1 | 	sub	fp, #48
14bfc     05 12 06 F1 | 	add	arg01, #5
14c00     09 13 52 F6 | 	abs	arg01, arg01 wc
14c04     1F 34 C6 C9 |  if_b	decod	local08, #31
14c08     00 34 06 36 |  if_ae	mov	local08, #0
14c0c     BC F9 B0 FD | 	call	#__system___float_fromuns
14c10     1A FB 61 F5 | 	xor	result1, local08
14c14     FD 14 02 F6 | 	mov	arg02, result1
14c18     16 13 02 F6 | 	mov	arg01, local04
14c1c     B8 0C B1 FD | 	call	#__system____builtin_powf
14c20     FD 12 02 F6 | 	mov	arg01, result1
14c24     01 14 06 F6 | 	mov	arg02, #1
14c28     6C 02 B1 FD | 	call	#__system___float_tointeger
14c2c     10 4E 05 F1 | 	add	fp, #16
14c30     A7 FA 61 FC | 	wrlong	result1, fp
14c34                 | ' skip=round(2^(lfreq+5))
14c34                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
14c34     10 4E 85 F1 | 	sub	fp, #16
14c38     40 00 00 FF 
14c3c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
14c40     30 00 90 CD |  if_b	jmp	#LR__1747
14c44     10 4E 05 F1 | 	add	fp, #16
14c48     A7 26 02 FB | 	rdlong	local01, fp
14c4c     13 2D 52 F6 | 	abs	local04, local01 wc
14c50     0F 2C 46 F0 | 	shr	local04, #15
14c54     16 2D 82 F6 | 	negc	local04, local04
14c58     0C 4E 85 F1 | 	sub	fp, #12
14c5c     A7 2C 62 FC | 	wrlong	local04, fp
14c60     0C 4E 05 F1 | 	add	fp, #12
14c64     40 00 80 FF 
14c68     A7 00 68 FC | 	wrlong	##32768, fp
14c6c     10 4E 85 F1 | 	sub	fp, #16
14c70     0C 00 90 FD | 	jmp	#LR__1748
14c74                 | LR__1747
14c74     04 4E 05 F1 | 	add	fp, #4
14c78     A7 02 68 FC | 	wrlong	#1, fp
14c7c     04 4E 85 F1 | 	sub	fp, #4
14c80                 | LR__1748
14c80     6C 4E 05 F1 | 	add	fp, #108
14c84     A7 14 02 FB | 	rdlong	arg02, fp
14c88     6C 4E 85 F1 | 	sub	fp, #108
14c8c     3E 2C 25 FF 
14c90     3C 12 06 F6 | 	mov	arg01, ##1247312956
14c94     3C FF B0 FD | 	call	#__system___float_div
14c98     FD 2C 02 F6 | 	mov	local04, result1
14c9c     04 4E 05 F1 | 	add	fp, #4
14ca0     A7 12 02 FB | 	rdlong	arg01, fp
14ca4     04 4E 85 F1 | 	sub	fp, #4
14ca8     09 13 52 F6 | 	abs	arg01, arg01 wc
14cac     1F 34 C6 C9 |  if_b	decod	local08, #31
14cb0     00 34 06 36 |  if_ae	mov	local08, #0
14cb4     14 F9 B0 FD | 	call	#__system___float_fromuns
14cb8     1A FB 61 F5 | 	xor	result1, local08
14cbc     FD 26 02 F6 | 	mov	local01, result1
14cc0     1E 28 C6 F9 | 	decod	local02, #30
14cc4     0D 12 06 F6 | 	mov	arg01, #13
14cc8     30 4E 05 F1 | 	add	fp, #48
14ccc     A7 30 02 FB | 	rdlong	local06, fp
14cd0     30 4E 85 F1 | 	sub	fp, #48
14cd4     18 13 82 F1 | 	sub	arg01, local06
14cd8     09 13 52 F6 | 	abs	arg01, arg01 wc
14cdc     1F 34 C6 C9 |  if_b	decod	local08, #31
14ce0     00 34 06 36 |  if_ae	mov	local08, #0
14ce4     E4 F8 B0 FD | 	call	#__system___float_fromuns
14ce8     1A FB 61 F5 | 	xor	result1, local08
14cec     FD 14 02 F6 | 	mov	arg02, result1
14cf0     14 13 02 F6 | 	mov	arg01, local02
14cf4     E0 0B B1 FD | 	call	#__system____builtin_powf
14cf8     FD 14 02 F6 | 	mov	arg02, result1
14cfc     13 13 02 F6 | 	mov	arg01, local01
14d00     CC FC B0 FD | 	call	#__system___float_mul
14d04     FD 14 02 F6 | 	mov	arg02, result1
14d08     16 13 02 F6 | 	mov	arg01, local04
14d0c     C4 FE B0 FD | 	call	#__system___float_div
14d10     FD 12 02 F6 | 	mov	arg01, result1
14d14     01 14 06 F6 | 	mov	arg02, #1
14d18     7C 01 B1 FD | 	call	#__system___float_tointeger
14d1c     34 4E 05 F1 | 	add	fp, #52
14d20     A7 FA 61 FC | 	wrlong	result1, fp
14d24     34 4E 05 F1 | 	add	fp, #52
14d28     A7 12 02 FB | 	rdlong	arg01, fp
14d2c     10 4E 05 F1 | 	add	fp, #16
14d30     A7 14 02 FB | 	rdlong	arg02, fp
14d34     78 4E 85 F1 | 	sub	fp, #120
14d38     98 FE B0 FD | 	call	#__system___float_div
14d3c     FD 12 02 F6 | 	mov	arg01, result1
14d40     01 14 06 F6 | 	mov	arg02, #1
14d44     50 01 B1 FD | 	call	#__system___float_tointeger
14d48     FD 2C 02 F6 | 	mov	local04, result1
14d4c     14 4E 05 F1 | 	add	fp, #20
14d50     A7 2C 62 FC | 	wrlong	local04, fp
14d54     5C 4E 05 F1 | 	add	fp, #92
14d58     A7 14 02 FB | 	rdlong	arg02, fp
14d5c     70 4E 85 F1 | 	sub	fp, #112
14d60     00 00 23 FF 
14d64     00 12 06 F6 | 	mov	arg01, ##1174405120
14d68     64 FC B0 FD | 	call	#__system___float_mul
14d6c     FD 12 02 F6 | 	mov	arg01, result1
14d70     01 14 06 F6 | 	mov	arg02, #1
14d74     20 01 B1 FD | 	call	#__system___float_tointeger
14d78     0D 2C C6 F9 | 	decod	local04, #13
14d7c     FD 2C 02 F1 | 	add	local04, result1
14d80     18 4E 05 F1 | 	add	fp, #24
14d84     A7 2C 62 FC | 	wrlong	local04, fp
14d88     5C 4E 05 F1 | 	add	fp, #92
14d8c     A7 14 02 FB | 	rdlong	arg02, fp
14d90     74 4E 85 F1 | 	sub	fp, #116
14d94     00 3D 22 FF 
14d98     00 12 06 F6 | 	mov	arg01, ##1148846080
14d9c     30 FC B0 FD | 	call	#__system___float_mul
14da0     FD 12 02 F6 | 	mov	arg01, result1
14da4     01 14 06 F6 | 	mov	arg02, #1
14da8     EC 00 B1 FD | 	call	#__system___float_tointeger
14dac     1C 4E 05 F1 | 	add	fp, #28
14db0     A7 FA 61 FC | 	wrlong	result1, fp
14db4     37 00 00 FF 
14db8     10 E4 05 F1 | 	add	objptr, ##28176
14dbc     F2 2C 02 FB | 	rdlong	local04, objptr
14dc0     37 00 00 FF 
14dc4     10 E4 85 F1 | 	sub	objptr, ##28176
14dc8     10 4E 85 F1 | 	sub	fp, #16
14dcc     A7 28 02 FB | 	rdlong	local02, fp
14dd0     06 28 66 F0 | 	shl	local02, #6
14dd4     14 2D 02 F1 | 	add	local04, local02
14dd8     04 4E 85 F1 | 	sub	fp, #4
14ddc     A7 2C 62 FC | 	wrlong	local04, fp
14de0                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
14de0                 | ' speed=round(speed_coeff/slen)
14de0                 | ' ipan=8192+round(8192*pan)
14de0                 | ' ivol=round(1000.0*vol)
14de0                 | ' base2=base+64*channel
14de0                 | ' if wave <32 then 
14de0     18 4E 05 F1 | 	add	fp, #24
14de4     A7 2C 02 FB | 	rdlong	local04, fp
14de8     20 4E 85 F1 | 	sub	fp, #32
14dec     20 2C 56 F2 | 	cmps	local04, #32 wc
14df0     2C 00 90 3D |  if_ae	jmp	#LR__1749
14df4     08 4E 05 F1 | 	add	fp, #8
14df8     A7 12 02 FB | 	rdlong	arg01, fp
14dfc     08 12 06 F1 | 	add	arg01, #8
14e00     18 4E 05 F1 | 	add	fp, #24
14e04     A7 14 02 FB | 	rdlong	arg02, fp
14e08     20 4E 85 F1 | 	sub	fp, #32
14e0c     0B 14 66 F0 | 	shl	arg02, #11
14e10     00 00 60 FF 
14e14     00 14 06 F1 | 	add	arg02, ##-1073741824
14e18     09 15 62 FC | 	wrlong	arg02, arg01
14e1c     18 00 90 FD | 	jmp	#LR__1750
14e20                 | LR__1749
14e20     08 4E 05 F1 | 	add	fp, #8
14e24     A7 12 02 FB | 	rdlong	arg01, fp
14e28     08 4E 85 F1 | 	sub	fp, #8
14e2c     08 12 06 F1 | 	add	arg01, #8
14e30     00 00 E4 FF 
14e34     09 01 68 FC | 	wrlong	##-939524096, arg01
14e38                 | LR__1750
14e38     08 4E 05 F1 | 	add	fp, #8
14e3c     A7 12 02 FB | 	rdlong	arg01, fp
14e40     10 12 06 F1 | 	add	arg01, #16
14e44     04 00 80 FF 
14e48     09 01 68 FC | 	wrlong	##2048, arg01
14e4c     A7 12 02 FB | 	rdlong	arg01, fp
14e50     0C 12 06 F1 | 	add	arg01, #12
14e54     09 01 68 FC | 	wrlong	#0, arg01
14e58     A7 12 02 FB | 	rdlong	arg01, fp
14e5c     14 12 06 F1 | 	add	arg01, #20
14e60     14 4E 05 F1 | 	add	fp, #20
14e64     A7 14 02 FB | 	rdlong	arg02, fp
14e68     09 15 52 FC | 	wrword	arg02, arg01
14e6c     14 4E 85 F1 | 	sub	fp, #20
14e70     A7 12 02 FB | 	rdlong	arg01, fp
14e74     16 12 06 F1 | 	add	arg01, #22
14e78     10 4E 05 F1 | 	add	fp, #16
14e7c     A7 14 02 FB | 	rdlong	arg02, fp
14e80     09 15 52 FC | 	wrword	arg02, arg01
14e84                 | ' lpoke base2+16,2048
14e84                 | ' lpoke base2+12,0
14e84                 | ' dpoke base2+20,ivol 
14e84                 | ' dpoke base2+22,ipan 
14e84                 | ' if wave<32 then
14e84     08 4E 05 F1 | 	add	fp, #8
14e88     A7 2C 02 FB | 	rdlong	local04, fp
14e8c     20 4E 85 F1 | 	sub	fp, #32
14e90     20 2C 56 F2 | 	cmps	local04, #32 wc
14e94     38 00 90 3D |  if_ae	jmp	#LR__1751
14e98     08 4E 05 F1 | 	add	fp, #8
14e9c     A7 12 02 FB | 	rdlong	arg01, fp
14ea0     18 12 06 F1 | 	add	arg01, #24
14ea4     2C 4E 05 F1 | 	add	fp, #44
14ea8     A7 14 02 FB | 	rdlong	arg02, fp
14eac     09 15 52 FC | 	wrword	arg02, arg01
14eb0     2C 4E 85 F1 | 	sub	fp, #44
14eb4     A7 12 02 FB | 	rdlong	arg01, fp
14eb8     1A 12 06 F1 | 	add	arg01, #26
14ebc     08 4E 05 F1 | 	add	fp, #8
14ec0     A7 14 02 FB | 	rdlong	arg02, fp
14ec4     10 4E 85 F1 | 	sub	fp, #16
14ec8     09 15 52 FC | 	wrword	arg02, arg01
14ecc     48 00 90 FD | 	jmp	#LR__1752
14ed0                 | LR__1751
14ed0     08 4E 05 F1 | 	add	fp, #8
14ed4     A7 2C 02 FB | 	rdlong	local04, fp
14ed8     18 2C 06 F1 | 	add	local04, #24
14edc     64 4E 05 F1 | 	add	fp, #100
14ee0     A7 14 02 FB | 	rdlong	arg02, fp
14ee4     6C 4E 85 F1 | 	sub	fp, #108
14ee8     3E 2C 25 FF 
14eec     3C 12 06 F6 | 	mov	arg01, ##1247312956
14ef0     E0 FC B0 FD | 	call	#__system___float_div
14ef4     FD 12 02 F6 | 	mov	arg01, result1
14ef8     01 14 06 F6 | 	mov	arg02, #1
14efc     98 FF B0 FD | 	call	#__system___float_tointeger
14f00     16 FB 51 FC | 	wrword	result1, local04
14f04     08 4E 05 F1 | 	add	fp, #8
14f08     A7 12 02 FB | 	rdlong	arg01, fp
14f0c     08 4E 85 F1 | 	sub	fp, #8
14f10     1A 12 06 F1 | 	add	arg01, #26
14f14     09 01 5A FC | 	wrword	#256, arg01
14f18                 | LR__1752
14f18     08 4E 05 F1 | 	add	fp, #8
14f1c     A7 12 02 FB | 	rdlong	arg01, fp
14f20     1C 12 06 F1 | 	add	arg01, #28
14f24     09 01 68 FC | 	wrlong	#0, arg01
14f28     A7 12 02 FB | 	rdlong	arg01, fp
14f2c     20 12 06 F1 | 	add	arg01, #32
14f30     09 01 68 FC | 	wrlong	#0, arg01
14f34                 | ' lpoke base2+28,$0000_0000
14f34                 | ' lpoke base2+32,0 
14f34                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
14f34     1C 4E 05 F1 | 	add	fp, #28
14f38     A7 2C 02 FB | 	rdlong	local04, fp
14f3c     24 4E 85 F1 | 	sub	fp, #36
14f40     08 2C 0E F2 | 	cmp	local04, #8 wz
14f44     18 00 90 5D |  if_ne	jmp	#LR__1753
14f48     08 4E 05 F1 | 	add	fp, #8
14f4c     A7 12 02 FB | 	rdlong	arg01, fp
14f50     08 4E 85 F1 | 	sub	fp, #8
14f54     24 12 06 F1 | 	add	arg01, #36
14f58     09 01 68 FC | 	wrlong	#0, arg01
14f5c     34 00 90 FD | 	jmp	#LR__1754
14f60                 | LR__1753
14f60     08 4E 05 F1 | 	add	fp, #8
14f64     A7 12 02 FB | 	rdlong	arg01, fp
14f68     24 12 06 F1 | 	add	arg01, #36
14f6c     1C 4E 05 F1 | 	add	fp, #28
14f70     A7 14 02 FB | 	rdlong	arg02, fp
14f74     24 4E 85 F1 | 	sub	fp, #36
14f78     09 14 66 F0 | 	shl	arg02, #9
14f7c     0C 00 00 FF 
14f80     D8 E4 05 F1 | 	add	objptr, ##6360
14f84     F2 14 02 F1 | 	add	arg02, objptr
14f88     0C 00 00 FF 
14f8c     D8 E4 85 F1 | 	sub	objptr, ##6360
14f90     09 15 62 FC | 	wrlong	arg02, arg01
14f94                 | LR__1754
14f94     08 4E 05 F1 | 	add	fp, #8
14f98     A7 12 02 FB | 	rdlong	arg01, fp
14f9c     28 12 06 F1 | 	add	arg01, #40
14fa0     0C 4E 05 F1 | 	add	fp, #12
14fa4     A7 14 02 FB | 	rdlong	arg02, fp
14fa8     09 15 62 FC | 	wrlong	arg02, arg01
14fac     0C 4E 85 F1 | 	sub	fp, #12
14fb0     A7 12 02 FB | 	rdlong	arg01, fp
14fb4     2C 12 06 F1 | 	add	arg01, #44
14fb8     24 4E 05 F1 | 	add	fp, #36
14fbc     A7 14 02 FB | 	rdlong	arg02, fp
14fc0     09 15 62 FC | 	wrlong	arg02, arg01
14fc4                 | ' lpoke base2+40,speed 
14fc4                 | ' lpoke base2+44,sus 
14fc4                 | ' if delay>0 then waitms(delay) 
14fc4     04 4E 85 F1 | 	sub	fp, #4
14fc8     A7 2C 02 FB | 	rdlong	local04, fp
14fcc     28 4E 85 F1 | 	sub	fp, #40
14fd0     01 2C 56 F2 | 	cmps	local04, #1 wc
14fd4     28 4E 05 31 |  if_ae	add	fp, #40
14fd8     A7 12 02 3B |  if_ae	rdlong	arg01, fp
14fdc     28 4E 85 31 |  if_ae	sub	fp, #40
14fe0     24 CF B0 3D |  if_ae	call	#__system___waitms
14fe4     A7 F0 03 F6 | 	mov	ptra, fp
14fe8     B2 00 A0 FD | 	call	#popregs_
14fec                 | _do_play_ret
14fec     2D 00 64 FD | 	ret
14ff0                 | 
14ff0                 | ' 
14ff0                 | ' '-------------------- plot
14ff0                 | ' 
14ff0                 | ' sub do_plot
14ff0                 | _do_plot
14ff0     00 4A 05 F6 | 	mov	COUNT_, #0
14ff4     A8 00 A0 FD | 	call	#pushregs_
14ff8     20 F0 07 F1 | 	add	ptra, #32
14ffc     90 68 BF FD | 	call	#_pop
15000     FD 16 02 F6 | 	mov	arg03, result1
15004     FE 14 02 F6 | 	mov	arg02, result2
15008     FF 12 02 F6 | 	mov	arg01, result3
1500c     0C 4E 05 F1 | 	add	fp, #12
15010     A7 16 62 FC | 	wrlong	arg03, fp
15014     04 4E 05 F1 | 	add	fp, #4
15018     A7 14 62 FC | 	wrlong	arg02, fp
1501c     04 4E 05 F1 | 	add	fp, #4
15020     A7 12 62 FC | 	wrlong	arg01, fp
15024     14 4E 85 F1 | 	sub	fp, #20
15028     64 68 BF FD | 	call	#_pop
1502c     FF 16 02 F6 | 	mov	arg03, result3
15030     A7 FA 61 FC | 	wrlong	result1, fp
15034     04 4E 05 F1 | 	add	fp, #4
15038     A7 FC 61 FC | 	wrlong	result2, fp
1503c     04 4E 05 F1 | 	add	fp, #4
15040     A7 16 62 FC | 	wrlong	arg03, fp
15044     08 4E 85 F1 | 	sub	fp, #8
15048     A7 12 02 F6 | 	mov	arg01, fp
1504c     24 6A BF FD | 	call	#_converttoint
15050     18 4E 05 F1 | 	add	fp, #24
15054     A7 FA 61 FC | 	wrlong	result1, fp
15058     0C 4E 85 F1 | 	sub	fp, #12
1505c     A7 12 02 F6 | 	mov	arg01, fp
15060     0C 4E 85 F1 | 	sub	fp, #12
15064     0C 6A BF FD | 	call	#_converttoint
15068     1C 4E 05 F1 | 	add	fp, #28
1506c     A7 FA 61 FC | 	wrlong	result1, fp
15070     04 4E 85 F1 | 	sub	fp, #4
15074     A7 16 02 FB | 	rdlong	arg03, fp
15078     37 00 00 FF 
1507c     2C E4 05 F1 | 	add	objptr, ##28204
15080     F2 16 62 FC | 	wrlong	arg03, objptr
15084     04 4E 05 F1 | 	add	fp, #4
15088     A7 14 02 FB | 	rdlong	arg02, fp
1508c     1C 4E 85 F1 | 	sub	fp, #28
15090     04 E4 05 F1 | 	add	objptr, #4
15094     F2 14 62 FC | 	wrlong	arg02, objptr
15098     04 E4 85 F1 | 	sub	objptr, #4
1509c     F2 12 02 FB | 	rdlong	arg01, objptr
150a0     04 E4 85 F1 | 	sub	objptr, #4
150a4     F2 16 02 FB | 	rdlong	arg03, objptr
150a8     37 00 00 FF 
150ac     28 E4 85 F1 | 	sub	objptr, ##28200
150b0     50 A2 B0 FD | 	call	#_hg010b_spin2_putpixel
150b4     A7 F0 03 F6 | 	mov	ptra, fp
150b8     B2 00 A0 FD | 	call	#popregs_
150bc                 | _do_plot_ret
150bc     2D 00 64 FD | 	ret
150c0                 | 
150c0                 | ' 
150c0                 | ' '-------------------- poke
150c0                 | ' 
150c0                 | ' sub do_poke
150c0                 | _do_poke
150c0     01 4A 05 F6 | 	mov	COUNT_, #1
150c4     A8 00 A0 FD | 	call	#pushregs_
150c8     20 F0 07 F1 | 	add	ptra, #32
150cc     C0 67 BF FD | 	call	#_pop
150d0     FD 14 02 F6 | 	mov	arg02, result1
150d4     FE 12 02 F6 | 	mov	arg01, result2
150d8     FF 26 02 F6 | 	mov	local01, result3
150dc     A7 14 62 FC | 	wrlong	arg02, fp
150e0     04 4E 05 F1 | 	add	fp, #4
150e4     A7 12 62 FC | 	wrlong	arg01, fp
150e8     04 4E 05 F1 | 	add	fp, #4
150ec     A7 26 62 FC | 	wrlong	local01, fp
150f0     08 4E 85 F1 | 	sub	fp, #8
150f4     98 67 BF FD | 	call	#_pop
150f8     FF 26 02 F6 | 	mov	local01, result3
150fc     0C 4E 05 F1 | 	add	fp, #12
15100     A7 FA 61 FC | 	wrlong	result1, fp
15104     04 4E 05 F1 | 	add	fp, #4
15108     A7 FC 61 FC | 	wrlong	result2, fp
1510c     04 4E 05 F1 | 	add	fp, #4
15110     A7 26 62 FC | 	wrlong	local01, fp
15114     08 4E 85 F1 | 	sub	fp, #8
15118     A7 12 02 F6 | 	mov	arg01, fp
1511c     0C 4E 85 F1 | 	sub	fp, #12
15120     50 69 BF FD | 	call	#_converttoint
15124     18 4E 05 F1 | 	add	fp, #24
15128     A7 FA 61 FC | 	wrlong	result1, fp
1512c     18 4E 85 F1 | 	sub	fp, #24
15130     A7 12 02 F6 | 	mov	arg01, fp
15134     3C 69 BF FD | 	call	#_converttoint
15138     1C 4E 05 F1 | 	add	fp, #28
1513c     A7 FA 61 FC | 	wrlong	result1, fp
15140                 | ' t1=pop() 'value
15140                 | ' t2=pop() 
15140                 | ' a=converttoint(t2) : v=converttoint(t1)
15140                 | ' if a<$80000 then poke a,v else pspoke a,v
15140     04 4E 85 F1 | 	sub	fp, #4
15144     A7 26 02 FB | 	rdlong	local01, fp
15148     18 4E 85 F1 | 	sub	fp, #24
1514c     00 04 00 FF 
15150     00 26 16 F2 | 	cmp	local01, ##524288 wc
15154     1C 00 90 3D |  if_ae	jmp	#LR__1760
15158     18 4E 05 F1 | 	add	fp, #24
1515c     A7 12 02 FB | 	rdlong	arg01, fp
15160     04 4E 05 F1 | 	add	fp, #4
15164     A7 14 02 FB | 	rdlong	arg02, fp
15168     1C 4E 85 F1 | 	sub	fp, #28
1516c     09 15 42 FC | 	wrbyte	arg02, arg01
15170     18 00 90 FD | 	jmp	#LR__1761
15174                 | LR__1760
15174     18 4E 05 F1 | 	add	fp, #24
15178     A7 12 02 FB | 	rdlong	arg01, fp
1517c     04 4E 05 F1 | 	add	fp, #4
15180     A7 14 02 FB | 	rdlong	arg02, fp
15184     1C 4E 85 F1 | 	sub	fp, #28
15188     84 93 B0 FD | 	call	#_pspoke
1518c                 | LR__1761
1518c     A7 F0 03 F6 | 	mov	ptra, fp
15190     B2 00 A0 FD | 	call	#popregs_
15194                 | _do_poke_ret
15194     2D 00 64 FD | 	ret
15198                 | 
15198                 | ' 
15198                 | ' '-------------------- pop
15198                 | ' 
15198                 | ' sub do_pop()
15198                 | _do_pop
15198                 | ' if gosubtop>0 then  gosubtop -=1 
15198     50 00 00 FF 
1519c     0C E5 05 F1 | 	add	objptr, ##41228
151a0     F2 00 02 FB | 	rdlong	_var01, objptr
151a4     50 00 00 FF 
151a8     0C E5 85 F1 | 	sub	objptr, ##41228
151ac     01 00 56 F2 | 	cmps	_var01, #1 wc
151b0     50 00 00 3F 
151b4     0C E5 05 31 |  if_ae	add	objptr, ##41228
151b8     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
151bc     01 00 86 31 |  if_ae	sub	_var01, #1
151c0     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
151c4     50 00 00 3F 
151c8     0C E5 85 31 |  if_ae	sub	objptr, ##41228
151cc                 | _do_pop_ret
151cc     2D 00 64 FD | 	ret
151d0                 | 
151d0                 | ' 
151d0                 | ' '-------------------- position
151d0                 | ' 
151d0                 | ' sub do_position
151d0                 | _do_position
151d0     01 4A 05 F6 | 	mov	COUNT_, #1
151d4     A8 00 A0 FD | 	call	#pushregs_
151d8     18 F0 07 F1 | 	add	ptra, #24
151dc     B0 66 BF FD | 	call	#_pop
151e0     FD 14 02 F6 | 	mov	arg02, result1
151e4     FE 12 02 F6 | 	mov	arg01, result2
151e8     FF 26 02 F6 | 	mov	local01, result3
151ec     A7 14 62 FC | 	wrlong	arg02, fp
151f0     04 4E 05 F1 | 	add	fp, #4
151f4     A7 12 62 FC | 	wrlong	arg01, fp
151f8     04 4E 05 F1 | 	add	fp, #4
151fc     A7 26 62 FC | 	wrlong	local01, fp
15200     08 4E 85 F1 | 	sub	fp, #8
15204     88 66 BF FD | 	call	#_pop
15208     FF 26 02 F6 | 	mov	local01, result3
1520c     0C 4E 05 F1 | 	add	fp, #12
15210     A7 FA 61 FC | 	wrlong	result1, fp
15214     04 4E 05 F1 | 	add	fp, #4
15218     A7 FC 61 FC | 	wrlong	result2, fp
1521c     04 4E 05 F1 | 	add	fp, #4
15220     A7 26 62 FC | 	wrlong	local01, fp
15224     08 4E 85 F1 | 	sub	fp, #8
15228     A7 12 02 F6 | 	mov	arg01, fp
1522c     0C 4E 85 F1 | 	sub	fp, #12
15230     40 68 BF FD | 	call	#_converttoint
15234     FD 26 02 F6 | 	mov	local01, result1
15238     A7 12 02 F6 | 	mov	arg01, fp
1523c     34 68 BF FD | 	call	#_converttoint
15240     FD 14 02 F6 | 	mov	arg02, result1
15244     13 13 02 F6 | 	mov	arg01, local01
15248     7C AC B0 FD | 	call	#_hg010b_spin2_setcursorpos
1524c     A7 F0 03 F6 | 	mov	ptra, fp
15250     B2 00 A0 FD | 	call	#popregs_
15254                 | _do_position_ret
15254     2D 00 64 FD | 	ret
15258                 | 
15258                 | ' 
15258                 | ' '-------------------- print
15258                 | ' 
15258                 | ' sub do_print  
15258                 | _do_print
15258     0B 4A 05 F6 | 	mov	COUNT_, #11
1525c     A8 00 A0 FD | 	call	#pushregs_
15260     00 2C 06 F6 | 	mov	local04, #0
15264     28 66 BF FD | 	call	#_pop
15268     FD 2E 02 F6 | 	mov	local05, result1
1526c     FE 30 02 F6 | 	mov	local06, result2
15270     FF 32 02 F6 | 	mov	local07, result3
15274     17 27 02 F6 | 	mov	local01, local05
15278     18 29 02 F6 | 	mov	local02, local06
1527c     19 2B 02 F6 | 	mov	local03, local07
15280                 | '  
15280                 | ' r=0
15280                 | ' t1=pop() 
15280                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
15280     21 2A 0E F2 | 	cmp	local03, #33 wz
15284     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
15288     20 00 90 5D |  if_ne	jmp	#LR__1770
1528c     15 2D 02 F6 | 	mov	local04, local03
15290     FC 65 BF FD | 	call	#_pop
15294     FD 2E 02 F6 | 	mov	local05, result1
15298     FE 30 02 F6 | 	mov	local06, result2
1529c     FF 32 02 F6 | 	mov	local07, result3
152a0     17 27 02 F6 | 	mov	local01, local05
152a4     18 29 02 F6 | 	mov	local02, local06
152a8     19 2B 02 F6 | 	mov	local03, local07
152ac                 | LR__1770
152ac                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
152ac     20 2A 0E F2 | 	cmp	local03, #32 wz
152b0     15 2D 02 A6 |  if_e	mov	local04, local03
152b4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
152b4     FF 2A 0E F2 | 	cmp	local03, #255 wz
152b8     10 00 90 5D |  if_ne	jmp	#LR__1771
152bc     13 13 02 F6 | 	mov	arg01, local01
152c0     00 14 06 F6 | 	mov	arg02, #0
152c4     2C 90 B0 FD | 	call	#_printerror
152c8     D4 04 90 FD | 	jmp	#LR__1790
152cc                 | LR__1771
152cc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
152cc     2B 2A 0E F2 | 	cmp	local03, #43 wz
152d0     14 00 90 5D |  if_ne	jmp	#LR__1772
152d4     13 13 02 F6 | 	mov	arg01, local01
152d8     2C 67 BF FD | 	call	#_convertstring
152dc     FD 2E 02 F6 | 	mov	local05, result1
152e0     17 27 02 F6 | 	mov	local01, local05
152e4     1F 2A 06 F6 | 	mov	local03, #31
152e8                 | LR__1772
152e8                 | ' 
152e8                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
152e8     2C 2A 0E F2 | 	cmp	local03, #44 wz
152ec     80 00 90 5D |  if_ne	jmp	#LR__1773
152f0     00 12 06 F6 | 	mov	arg01, #0
152f4     48 26 B1 FD | 	call	#__system___getiolock_0574
152f8     FD 12 02 F6 | 	mov	arg01, result1
152fc     14 C9 B0 FD | 	call	#__system___lockmem
15300     90 01 00 FF 
15304     34 15 06 F6 | 	mov	arg02, ##@LR__5630
15308     00 12 06 F6 | 	mov	arg01, #0
1530c     00 16 06 F6 | 	mov	arg03, #0
15310     F4 D5 B0 FD | 	call	#__system___basic_print_string
15314     0A 34 06 F6 | 	mov	local08, #10
15318     00 12 06 F6 | 	mov	arg01, #0
1531c     13 15 02 F6 | 	mov	arg02, local01
15320     00 16 06 F6 | 	mov	arg03, #0
15324     0A 18 06 F6 | 	mov	arg04, #10
15328     20 D6 B0 FD | 	call	#__system___basic_print_integer
1532c     FD 36 02 F6 | 	mov	local09, result1
15330     00 12 06 F6 | 	mov	arg01, #0
15334     0A 14 06 F6 | 	mov	arg02, #10
15338     00 16 06 F6 | 	mov	arg03, #0
1533c     70 D5 B0 FD | 	call	#__system___basic_print_char
15340     01 38 06 F6 | 	mov	local10, #1
15344     00 12 06 F6 | 	mov	arg01, #0
15348     F4 25 B1 FD | 	call	#__system___getiolock_0574
1534c     FD 00 68 FC | 	wrlong	#0, result1
15350     00 3A 06 F6 | 	mov	local11, #0
15354     38 65 BF FD | 	call	#_pop
15358     FD 2E 02 F6 | 	mov	local05, result1
1535c     FE 30 02 F6 | 	mov	local06, result2
15360     FF 32 02 F6 | 	mov	local07, result3
15364     17 27 02 F6 | 	mov	local01, local05
15368     18 29 02 F6 | 	mov	local02, local06
1536c     19 2B 02 F6 | 	mov	local03, local07
15370                 | LR__1773
15370                 | ' 
15370                 | ' if r=print_mod_comma  then
15370     21 2C 0E F2 | 	cmp	local04, #33 wz
15374     AC 01 90 5D |  if_ne	jmp	#LR__1778
15378                 | '   if t1.result_type=result_int then print t1.result.iresult,
15378     1C 2A 0E F2 | 	cmp	local03, #28 wz
1537c     64 00 90 5D |  if_ne	jmp	#LR__1774
15380     00 12 06 F6 | 	mov	arg01, #0
15384     B8 25 B1 FD | 	call	#__system___getiolock_0574
15388     FD 12 02 F6 | 	mov	arg01, result1
1538c     84 C8 B0 FD | 	call	#__system___lockmem
15390     00 30 06 F6 | 	mov	local06, #0
15394     00 12 06 F6 | 	mov	arg01, #0
15398     13 15 02 F6 | 	mov	arg02, local01
1539c     00 16 06 F6 | 	mov	arg03, #0
153a0     0A 18 06 F6 | 	mov	arg04, #10
153a4     A4 D5 B0 FD | 	call	#__system___basic_print_integer
153a8     FD 32 02 F6 | 	mov	local07, result1
153ac     18 2F 02 F6 | 	mov	local05, local06
153b0     19 2F 02 F1 | 	add	local05, local07
153b4     00 3A 06 F6 | 	mov	local11, #0
153b8     00 12 06 F6 | 	mov	arg01, #0
153bc     09 14 06 F6 | 	mov	arg02, #9
153c0     00 16 06 F6 | 	mov	arg03, #0
153c4     E8 D4 B0 FD | 	call	#__system___basic_print_char
153c8     FD 36 02 F6 | 	mov	local09, result1
153cc     FD 2E 02 F1 | 	add	local05, result1
153d0     00 12 06 F6 | 	mov	arg01, #0
153d4     68 25 B1 FD | 	call	#__system___getiolock_0574
153d8     FD 00 68 FC | 	wrlong	#0, result1
153dc     00 FA 05 F6 | 	mov	result1, #0
153e0     00 38 06 F6 | 	mov	local10, #0
153e4                 | LR__1774
153e4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
153e4     1D 2A 0E F2 | 	cmp	local03, #29 wz
153e8     64 00 90 5D |  if_ne	jmp	#LR__1775
153ec     00 12 06 F6 | 	mov	arg01, #0
153f0     4C 25 B1 FD | 	call	#__system___getiolock_0574
153f4     FD 12 02 F6 | 	mov	arg01, result1
153f8     18 C8 B0 FD | 	call	#__system___lockmem
153fc     00 30 06 F6 | 	mov	local06, #0
15400     00 12 06 F6 | 	mov	arg01, #0
15404     13 15 02 F6 | 	mov	arg02, local01
15408     00 16 06 F6 | 	mov	arg03, #0
1540c     0A 18 06 F6 | 	mov	arg04, #10
15410     78 D5 B0 FD | 	call	#__system___basic_print_unsigned
15414     FD 32 02 F6 | 	mov	local07, result1
15418     18 2F 02 F6 | 	mov	local05, local06
1541c     19 2F 02 F1 | 	add	local05, local07
15420     00 3A 06 F6 | 	mov	local11, #0
15424     00 12 06 F6 | 	mov	arg01, #0
15428     09 14 06 F6 | 	mov	arg02, #9
1542c     00 16 06 F6 | 	mov	arg03, #0
15430     7C D4 B0 FD | 	call	#__system___basic_print_char
15434     FD 36 02 F6 | 	mov	local09, result1
15438     FD 2E 02 F1 | 	add	local05, result1
1543c     00 12 06 F6 | 	mov	arg01, #0
15440     FC 24 B1 FD | 	call	#__system___getiolock_0574
15444     FD 00 68 FC | 	wrlong	#0, result1
15448     00 FA 05 F6 | 	mov	result1, #0
1544c     00 38 06 F6 | 	mov	local10, #0
15450                 | LR__1775
15450                 | '   if t1.result_type=result_float then print t1.result.fresult,
15450     1E 2A 0E F2 | 	cmp	local03, #30 wz
15454     64 00 90 5D |  if_ne	jmp	#LR__1776
15458     00 12 06 F6 | 	mov	arg01, #0
1545c     E0 24 B1 FD | 	call	#__system___getiolock_0574
15460     FD 12 02 F6 | 	mov	arg01, result1
15464     AC C7 B0 FD | 	call	#__system___lockmem
15468     00 30 06 F6 | 	mov	local06, #0
1546c     00 12 06 F6 | 	mov	arg01, #0
15470     13 15 02 F6 | 	mov	arg02, local01
15474     00 16 06 F6 | 	mov	arg03, #0
15478     23 18 06 F6 | 	mov	arg04, #35
1547c     68 FB B0 FD | 	call	#__system___basic_print_float
15480     FD 32 02 F6 | 	mov	local07, result1
15484     18 2F 02 F6 | 	mov	local05, local06
15488     19 2F 02 F1 | 	add	local05, local07
1548c     00 3A 06 F6 | 	mov	local11, #0
15490     00 12 06 F6 | 	mov	arg01, #0
15494     09 14 06 F6 | 	mov	arg02, #9
15498     00 16 06 F6 | 	mov	arg03, #0
1549c     10 D4 B0 FD | 	call	#__system___basic_print_char
154a0     FD 36 02 F6 | 	mov	local09, result1
154a4     FD 2E 02 F1 | 	add	local05, result1
154a8     00 12 06 F6 | 	mov	arg01, #0
154ac     90 24 B1 FD | 	call	#__system___getiolock_0574
154b0     FD 00 68 FC | 	wrlong	#0, result1
154b4     00 FA 05 F6 | 	mov	result1, #0
154b8     00 38 06 F6 | 	mov	local10, #0
154bc                 | LR__1776
154bc                 | '   if t1.result_type=result_string then print t1.result.sresult,
154bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
154c0     60 00 90 5D |  if_ne	jmp	#LR__1777
154c4     00 12 06 F6 | 	mov	arg01, #0
154c8     74 24 B1 FD | 	call	#__system___getiolock_0574
154cc     FD 12 02 F6 | 	mov	arg01, result1
154d0     40 C7 B0 FD | 	call	#__system___lockmem
154d4     00 30 06 F6 | 	mov	local06, #0
154d8     00 12 06 F6 | 	mov	arg01, #0
154dc     13 15 02 F6 | 	mov	arg02, local01
154e0     00 16 06 F6 | 	mov	arg03, #0
154e4     20 D4 B0 FD | 	call	#__system___basic_print_string
154e8     FD 32 02 F6 | 	mov	local07, result1
154ec     18 2F 02 F6 | 	mov	local05, local06
154f0     19 2F 02 F1 | 	add	local05, local07
154f4     00 3A 06 F6 | 	mov	local11, #0
154f8     00 12 06 F6 | 	mov	arg01, #0
154fc     09 14 06 F6 | 	mov	arg02, #9
15500     00 16 06 F6 | 	mov	arg03, #0
15504     A8 D3 B0 FD | 	call	#__system___basic_print_char
15508     FD 36 02 F6 | 	mov	local09, result1
1550c     FD 2E 02 F1 | 	add	local05, result1
15510     00 12 06 F6 | 	mov	arg01, #0
15514     28 24 B1 FD | 	call	#__system___getiolock_0574
15518     FD 00 68 FC | 	wrlong	#0, result1
1551c     00 FA 05 F6 | 	mov	result1, #0
15520     00 38 06 F6 | 	mov	local10, #0
15524                 | LR__1777
15524                 | LR__1778
15524                 | ' if r=print_mod_semicolon then 
15524     22 2C 0E F2 | 	cmp	local04, #34 wz
15528     1C 01 90 5D |  if_ne	jmp	#LR__1783
1552c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1552c     1C 2A 0E F2 | 	cmp	local03, #28 wz
15530     50 00 90 5D |  if_ne	jmp	#LR__1779
15534     00 12 06 F6 | 	mov	arg01, #0
15538     04 24 B1 FD | 	call	#__system___getiolock_0574
1553c     FD 12 02 F6 | 	mov	arg01, result1
15540     D0 C6 B0 FD | 	call	#__system___lockmem
15544     00 30 06 F6 | 	mov	local06, #0
15548     00 38 06 F6 | 	mov	local10, #0
1554c     0A 3A 06 F6 | 	mov	local11, #10
15550     00 12 06 F6 | 	mov	arg01, #0
15554     13 15 02 F6 | 	mov	arg02, local01
15558     00 16 06 F6 | 	mov	arg03, #0
1555c     0A 18 06 F6 | 	mov	arg04, #10
15560     E8 D3 B0 FD | 	call	#__system___basic_print_integer
15564     FD 32 02 F6 | 	mov	local07, result1
15568     18 2F 02 F6 | 	mov	local05, local06
1556c     19 2F 02 F1 | 	add	local05, local07
15570     00 12 06 F6 | 	mov	arg01, #0
15574     C8 23 B1 FD | 	call	#__system___getiolock_0574
15578     FD 00 68 FC | 	wrlong	#0, result1
1557c     00 FA 05 F6 | 	mov	result1, #0
15580     00 36 06 F6 | 	mov	local09, #0
15584                 | LR__1779
15584                 | '   if t1.result_type=result_uint then print t1.result.uresult;
15584     1D 2A 0E F2 | 	cmp	local03, #29 wz
15588     50 00 90 5D |  if_ne	jmp	#LR__1780
1558c     00 12 06 F6 | 	mov	arg01, #0
15590     AC 23 B1 FD | 	call	#__system___getiolock_0574
15594     FD 12 02 F6 | 	mov	arg01, result1
15598     78 C6 B0 FD | 	call	#__system___lockmem
1559c     00 30 06 F6 | 	mov	local06, #0
155a0     00 38 06 F6 | 	mov	local10, #0
155a4     0A 3A 06 F6 | 	mov	local11, #10
155a8     00 12 06 F6 | 	mov	arg01, #0
155ac     13 15 02 F6 | 	mov	arg02, local01
155b0     00 16 06 F6 | 	mov	arg03, #0
155b4     0A 18 06 F6 | 	mov	arg04, #10
155b8     D0 D3 B0 FD | 	call	#__system___basic_print_unsigned
155bc     FD 32 02 F6 | 	mov	local07, result1
155c0     18 2F 02 F6 | 	mov	local05, local06
155c4     19 2F 02 F1 | 	add	local05, local07
155c8     00 12 06 F6 | 	mov	arg01, #0
155cc     70 23 B1 FD | 	call	#__system___getiolock_0574
155d0     FD 00 68 FC | 	wrlong	#0, result1
155d4     00 FA 05 F6 | 	mov	result1, #0
155d8     00 36 06 F6 | 	mov	local09, #0
155dc                 | LR__1780
155dc                 | '   if t1.result_type=result_float then print t1.result.fresult;
155dc     1E 2A 0E F2 | 	cmp	local03, #30 wz
155e0     30 00 90 5D |  if_ne	jmp	#LR__1781
155e4     00 12 06 F6 | 	mov	arg01, #0
155e8     54 23 B1 FD | 	call	#__system___getiolock_0574
155ec     FD 12 02 F6 | 	mov	arg01, result1
155f0     20 C6 B0 FD | 	call	#__system___lockmem
155f4     00 12 06 F6 | 	mov	arg01, #0
155f8     13 15 02 F6 | 	mov	arg02, local01
155fc     00 16 06 F6 | 	mov	arg03, #0
15600     23 18 06 F6 | 	mov	arg04, #35
15604     E0 F9 B0 FD | 	call	#__system___basic_print_float
15608     00 12 06 F6 | 	mov	arg01, #0
1560c     30 23 B1 FD | 	call	#__system___getiolock_0574
15610     FD 00 68 FC | 	wrlong	#0, result1
15614                 | LR__1781
15614                 | '   if t1.result_type=result_string then print t1.result.sresult;
15614     1F 2A 0E F2 | 	cmp	local03, #31 wz
15618     2C 00 90 5D |  if_ne	jmp	#LR__1782
1561c     00 12 06 F6 | 	mov	arg01, #0
15620     1C 23 B1 FD | 	call	#__system___getiolock_0574
15624     FD 12 02 F6 | 	mov	arg01, result1
15628     E8 C5 B0 FD | 	call	#__system___lockmem
1562c     00 12 06 F6 | 	mov	arg01, #0
15630     13 15 02 F6 | 	mov	arg02, local01
15634     00 16 06 F6 | 	mov	arg03, #0
15638     CC D2 B0 FD | 	call	#__system___basic_print_string
1563c     00 12 06 F6 | 	mov	arg01, #0
15640     FC 22 B1 FD | 	call	#__system___getiolock_0574
15644     FD 00 68 FC | 	wrlong	#0, result1
15648                 | LR__1782
15648                 | LR__1783
15648                 | ' if r=0 then 
15648     00 2C 0E F2 | 	cmp	local04, #0 wz
1564c     1C 01 90 5D |  if_ne	jmp	#LR__1788
15650                 | '   if t1.result_type=result_int then print t1.result.iresult
15650     1C 2A 0E F2 | 	cmp	local03, #28 wz
15654     40 00 90 5D |  if_ne	jmp	#LR__1784
15658     00 12 06 F6 | 	mov	arg01, #0
1565c     E0 22 B1 FD | 	call	#__system___getiolock_0574
15660     FD 12 02 F6 | 	mov	arg01, result1
15664     AC C5 B0 FD | 	call	#__system___lockmem
15668     00 12 06 F6 | 	mov	arg01, #0
1566c     13 15 02 F6 | 	mov	arg02, local01
15670     00 16 06 F6 | 	mov	arg03, #0
15674     0A 18 06 F6 | 	mov	arg04, #10
15678     D0 D2 B0 FD | 	call	#__system___basic_print_integer
1567c     00 12 06 F6 | 	mov	arg01, #0
15680     0A 14 06 F6 | 	mov	arg02, #10
15684     00 16 06 F6 | 	mov	arg03, #0
15688     24 D2 B0 FD | 	call	#__system___basic_print_char
1568c     00 12 06 F6 | 	mov	arg01, #0
15690     AC 22 B1 FD | 	call	#__system___getiolock_0574
15694     FD 00 68 FC | 	wrlong	#0, result1
15698                 | LR__1784
15698                 | '   if t1.result_type=result_uint then print t1.result.uresult
15698     1D 2A 0E F2 | 	cmp	local03, #29 wz
1569c     40 00 90 5D |  if_ne	jmp	#LR__1785
156a0     00 12 06 F6 | 	mov	arg01, #0
156a4     98 22 B1 FD | 	call	#__system___getiolock_0574
156a8     FD 12 02 F6 | 	mov	arg01, result1
156ac     64 C5 B0 FD | 	call	#__system___lockmem
156b0     00 12 06 F6 | 	mov	arg01, #0
156b4     13 15 02 F6 | 	mov	arg02, local01
156b8     00 16 06 F6 | 	mov	arg03, #0
156bc     0A 18 06 F6 | 	mov	arg04, #10
156c0     C8 D2 B0 FD | 	call	#__system___basic_print_unsigned
156c4     00 12 06 F6 | 	mov	arg01, #0
156c8     0A 14 06 F6 | 	mov	arg02, #10
156cc     00 16 06 F6 | 	mov	arg03, #0
156d0     DC D1 B0 FD | 	call	#__system___basic_print_char
156d4     00 12 06 F6 | 	mov	arg01, #0
156d8     64 22 B1 FD | 	call	#__system___getiolock_0574
156dc     FD 00 68 FC | 	wrlong	#0, result1
156e0                 | LR__1785
156e0                 | '   if t1.result_type=result_float then print t1.result.fresult
156e0     1E 2A 0E F2 | 	cmp	local03, #30 wz
156e4     40 00 90 5D |  if_ne	jmp	#LR__1786
156e8     00 12 06 F6 | 	mov	arg01, #0
156ec     50 22 B1 FD | 	call	#__system___getiolock_0574
156f0     FD 12 02 F6 | 	mov	arg01, result1
156f4     1C C5 B0 FD | 	call	#__system___lockmem
156f8     00 12 06 F6 | 	mov	arg01, #0
156fc     13 15 02 F6 | 	mov	arg02, local01
15700     00 16 06 F6 | 	mov	arg03, #0
15704     23 18 06 F6 | 	mov	arg04, #35
15708     DC F8 B0 FD | 	call	#__system___basic_print_float
1570c     00 12 06 F6 | 	mov	arg01, #0
15710     0A 14 06 F6 | 	mov	arg02, #10
15714     00 16 06 F6 | 	mov	arg03, #0
15718     94 D1 B0 FD | 	call	#__system___basic_print_char
1571c     00 12 06 F6 | 	mov	arg01, #0
15720     1C 22 B1 FD | 	call	#__system___getiolock_0574
15724     FD 00 68 FC | 	wrlong	#0, result1
15728                 | LR__1786
15728                 | '   if t1.result_type=result_string then print t1.result.sresult
15728     1F 2A 0E F2 | 	cmp	local03, #31 wz
1572c     3C 00 90 5D |  if_ne	jmp	#LR__1787
15730     00 12 06 F6 | 	mov	arg01, #0
15734     08 22 B1 FD | 	call	#__system___getiolock_0574
15738     FD 12 02 F6 | 	mov	arg01, result1
1573c     D4 C4 B0 FD | 	call	#__system___lockmem
15740     00 12 06 F6 | 	mov	arg01, #0
15744     13 15 02 F6 | 	mov	arg02, local01
15748     00 16 06 F6 | 	mov	arg03, #0
1574c     B8 D1 B0 FD | 	call	#__system___basic_print_string
15750     00 12 06 F6 | 	mov	arg01, #0
15754     0A 14 06 F6 | 	mov	arg02, #10
15758     00 16 06 F6 | 	mov	arg03, #0
1575c     50 D1 B0 FD | 	call	#__system___basic_print_char
15760     00 12 06 F6 | 	mov	arg01, #0
15764     D8 21 B1 FD | 	call	#__system___getiolock_0574
15768     FD 00 68 FC | 	wrlong	#0, result1
1576c                 | LR__1787
1576c                 | LR__1788
1576c                 | ' if r=print_mod_empty then print
1576c     20 2C 0E F2 | 	cmp	local04, #32 wz
15770     2C 00 90 5D |  if_ne	jmp	#LR__1789
15774     00 12 06 F6 | 	mov	arg01, #0
15778     C4 21 B1 FD | 	call	#__system___getiolock_0574
1577c     FD 12 02 F6 | 	mov	arg01, result1
15780     90 C4 B0 FD | 	call	#__system___lockmem
15784     00 12 06 F6 | 	mov	arg01, #0
15788     0A 14 06 F6 | 	mov	arg02, #10
1578c     00 16 06 F6 | 	mov	arg03, #0
15790     1C D1 B0 FD | 	call	#__system___basic_print_char
15794     00 12 06 F6 | 	mov	arg01, #0
15798     A4 21 B1 FD | 	call	#__system___getiolock_0574
1579c     FD 00 68 FC | 	wrlong	#0, result1
157a0                 | LR__1789
157a0                 | LR__1790
157a0     A7 F0 03 F6 | 	mov	ptra, fp
157a4     B2 00 A0 FD | 	call	#popregs_
157a8                 | _do_print_ret
157a8     2D 00 64 FD | 	ret
157ac                 | 
157ac                 | ' 
157ac                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
157ac                 | ' 
157ac                 | ' sub do_push
157ac                 | _do_push
157ac                 | ' if stackpointer<maxstack then 
157ac     43 00 00 FF 
157b0     58 E4 05 F1 | 	add	objptr, ##34392
157b4     F2 00 02 FB | 	rdlong	_var01, objptr
157b8     43 00 00 FF 
157bc     58 E4 85 F1 | 	sub	objptr, ##34392
157c0     01 00 00 FF 
157c4     00 00 56 F2 | 	cmps	_var01, ##512 wc
157c8     F8 00 90 3D |  if_ae	jmp	#LR__1800
157cc     4A 00 00 FF 
157d0     80 E4 05 F1 | 	add	objptr, ##38016
157d4     F2 02 02 FB | 	rdlong	_var02, objptr
157d8     01 05 02 F6 | 	mov	_var03, _var02
157dc     01 04 66 F0 | 	shl	_var03, #1
157e0     01 05 02 F1 | 	add	_var03, _var02
157e4     02 04 66 F0 | 	shl	_var03, #2
157e8     03 00 00 FF 
157ec     04 E4 85 F1 | 	sub	objptr, ##1540
157f0     F2 04 02 F1 | 	add	_var03, objptr
157f4     02 01 02 FB | 	rdlong	_var01, _var03
157f8     04 04 06 F1 | 	add	_var03, #4
157fc     02 07 02 FB | 	rdlong	_var04, _var03
15800     01 05 02 F6 | 	mov	_var03, _var02
15804     01 04 66 F0 | 	shl	_var03, #1
15808     01 05 02 F1 | 	add	_var03, _var02
1580c     02 04 66 F0 | 	shl	_var03, #2
15810     F2 04 02 F1 | 	add	_var03, objptr
15814     08 04 06 F1 | 	add	_var03, #8
15818     02 03 02 FB | 	rdlong	_var02, _var03
1581c     04 00 00 FF 
15820     24 E4 85 F1 | 	sub	objptr, ##2084
15824     F2 04 02 FB | 	rdlong	_var03, objptr
15828     02 09 02 F6 | 	mov	_var05, _var03
1582c     01 08 66 F0 | 	shl	_var05, #1
15830     02 09 02 F1 | 	add	_var05, _var03
15834     02 08 66 F0 | 	shl	_var05, #2
15838     0C 00 00 FF 
1583c     0C E4 85 F1 | 	sub	objptr, ##6156
15840     F2 08 02 F1 | 	add	_var05, objptr
15844     04 01 62 FC | 	wrlong	_var01, _var05
15848     0C 00 00 FF 
1584c     0C E4 05 F1 | 	add	objptr, ##6156
15850     F2 08 02 FB | 	rdlong	_var05, objptr
15854     04 05 02 F6 | 	mov	_var03, _var05
15858     01 04 66 F0 | 	shl	_var03, #1
1585c     04 05 02 F1 | 	add	_var03, _var05
15860     02 04 66 F0 | 	shl	_var03, #2
15864     0C 00 00 FF 
15868     0C E4 85 F1 | 	sub	objptr, ##6156
1586c     F2 04 02 F1 | 	add	_var03, objptr
15870     04 04 06 F1 | 	add	_var03, #4
15874     02 07 62 FC | 	wrlong	_var04, _var03
15878     0C 00 00 FF 
1587c     0C E4 05 F1 | 	add	objptr, ##6156
15880     F2 08 02 FB | 	rdlong	_var05, objptr
15884     04 07 02 F6 | 	mov	_var04, _var05
15888     01 06 66 F0 | 	shl	_var04, #1
1588c     04 07 02 F1 | 	add	_var04, _var05
15890     02 06 66 F0 | 	shl	_var04, #2
15894     0C 00 00 FF 
15898     0C E4 85 F1 | 	sub	objptr, ##6156
1589c     F2 06 02 F1 | 	add	_var04, objptr
158a0     08 06 06 F1 | 	add	_var04, #8
158a4     03 03 62 FC | 	wrlong	_var02, _var04
158a8     0C 00 00 FF 
158ac     0C E4 05 F1 | 	add	objptr, ##6156
158b0     F2 00 02 FB | 	rdlong	_var01, objptr
158b4     01 00 06 F1 | 	add	_var01, #1
158b8     F2 00 62 FC | 	wrlong	_var01, objptr
158bc     43 00 00 FF 
158c0     58 E4 85 F1 | 	sub	objptr, ##34392
158c4                 | LR__1800
158c4                 | _do_push_ret
158c4     2D 00 64 FD | 	ret
158c8                 | 
158c8                 | ' 
158c8                 | ' '-------------------- put
158c8                 | ' 
158c8                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
158c8                 | _do_put
158c8     03 4A 05 F6 | 	mov	COUNT_, #3
158cc     A8 00 A0 FD | 	call	#pushregs_
158d0     28 F0 07 F1 | 	add	ptra, #40
158d4     4A 00 00 FF 
158d8     80 E4 05 F1 | 	add	objptr, ##38016
158dc     F2 1A 02 FB | 	rdlong	arg05, objptr
158e0     0D 19 02 F6 | 	mov	arg04, arg05
158e4     01 18 66 F0 | 	shl	arg04, #1
158e8     0D 19 02 F1 | 	add	arg04, arg05
158ec     02 18 66 F0 | 	shl	arg04, #2
158f0     03 00 00 FF 
158f4     04 E4 85 F1 | 	sub	objptr, ##1540
158f8     F2 18 02 F1 | 	add	arg04, objptr
158fc     0C 1B 02 FB | 	rdlong	arg05, arg04
15900     A7 1A 62 FC | 	wrlong	arg05, fp
15904                 | ' 
15904                 | ' numpar=compiledline(lineptr_e).result.uresult
15904                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
15904     04 1A 0E F2 | 	cmp	arg05, #4 wz
15908     47 00 00 FF 
1590c     7C E4 85 F1 | 	sub	objptr, ##36476
15910     48 00 90 5D |  if_ne	jmp	#LR__1810
15914     78 5F BF FD | 	call	#_pop
15918     FF 1A 02 F6 | 	mov	arg05, result3
1591c     1C 4E 05 F1 | 	add	fp, #28
15920     A7 FA 61 FC | 	wrlong	result1, fp
15924     04 4E 05 F1 | 	add	fp, #4
15928     A7 FC 61 FC | 	wrlong	result2, fp
1592c     04 4E 05 F1 | 	add	fp, #4
15930     A7 1A 62 FC | 	wrlong	arg05, fp
15934     08 4E 85 F1 | 	sub	fp, #8
15938     A7 12 02 F6 | 	mov	arg01, fp
1593c     1C 4E 85 F1 | 	sub	fp, #28
15940     30 61 BF FD | 	call	#_converttoint
15944     52 00 00 FF 
15948     18 E4 05 F1 | 	add	objptr, ##42008
1594c     F2 FA 61 FC | 	wrlong	result1, objptr
15950     52 00 00 FF 
15954     18 E4 85 F1 | 	sub	objptr, ##42008
15958     18 00 90 FD | 	jmp	#LR__1811
1595c                 | LR__1810
1595c     52 00 00 FF 
15960     18 E4 05 F1 | 	add	objptr, ##42008
15964     FF FF FF FF 
15968     F2 FE 6B FC | 	wrlong	##-1, objptr
1596c     52 00 00 FF 
15970     18 E4 85 F1 | 	sub	objptr, ##42008
15974                 | LR__1811
15974                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
15974     A7 1A 02 FB | 	rdlong	arg05, fp
15978     03 1A 56 F2 | 	cmps	arg05, #3 wc
1597c     40 00 90 CD |  if_b	jmp	#LR__1812
15980     0C 5F BF FD | 	call	#_pop
15984     FF 1A 02 F6 | 	mov	arg05, result3
15988     1C 4E 05 F1 | 	add	fp, #28
1598c     A7 FA 61 FC | 	wrlong	result1, fp
15990     04 4E 05 F1 | 	add	fp, #4
15994     A7 FC 61 FC | 	wrlong	result2, fp
15998     04 4E 05 F1 | 	add	fp, #4
1599c     A7 1A 62 FC | 	wrlong	arg05, fp
159a0     08 4E 85 F1 | 	sub	fp, #8
159a4     A7 12 02 F6 | 	mov	arg01, fp
159a8     1C 4E 85 F1 | 	sub	fp, #28
159ac     C4 60 BF FD | 	call	#_converttoint
159b0     08 4E 05 F1 | 	add	fp, #8
159b4     A7 FA 61 FC | 	wrlong	result1, fp
159b8     08 4E 85 F1 | 	sub	fp, #8
159bc     0C 00 90 FD | 	jmp	#LR__1813
159c0                 | LR__1812
159c0     08 4E 05 F1 | 	add	fp, #8
159c4     A7 02 68 FC | 	wrlong	#1, fp
159c8     08 4E 85 F1 | 	sub	fp, #8
159cc                 | LR__1813
159cc                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
159cc     A7 18 02 FB | 	rdlong	arg04, fp
159d0     02 18 56 F2 | 	cmps	arg04, #2 wc
159d4     3C 00 90 CD |  if_b	jmp	#LR__1814
159d8     B4 5E BF FD | 	call	#_pop
159dc     FF 18 02 F6 | 	mov	arg04, result3
159e0     1C 4E 05 F1 | 	add	fp, #28
159e4     A7 FA 61 FC | 	wrlong	result1, fp
159e8     04 4E 05 F1 | 	add	fp, #4
159ec     A7 FC 61 FC | 	wrlong	result2, fp
159f0     04 4E 05 F1 | 	add	fp, #4
159f4     A7 18 62 FC | 	wrlong	arg04, fp
159f8     08 4E 85 F1 | 	sub	fp, #8
159fc     A7 12 02 F6 | 	mov	arg01, fp
15a00     1C 4E 85 F1 | 	sub	fp, #28
15a04     6C 60 BF FD | 	call	#_converttoint
15a08     0C 4E 05 F1 | 	add	fp, #12
15a0c     A7 FA 61 FC | 	wrlong	result1, fp
15a10     0C 4E 85 F1 | 	sub	fp, #12
15a14                 | LR__1814
15a14     78 5E BF FD | 	call	#_pop
15a18     FF 18 02 F6 | 	mov	arg04, result3
15a1c     1C 4E 05 F1 | 	add	fp, #28
15a20     A7 FA 61 FC | 	wrlong	result1, fp
15a24     04 4E 05 F1 | 	add	fp, #4
15a28     A7 FC 61 FC | 	wrlong	result2, fp
15a2c     04 4E 05 F1 | 	add	fp, #4
15a30     A7 18 62 FC | 	wrlong	arg04, fp
15a34     08 4E 85 F1 | 	sub	fp, #8
15a38     A7 12 02 F6 | 	mov	arg01, fp
15a3c     1C 4E 85 F1 | 	sub	fp, #28
15a40     30 60 BF FD | 	call	#_converttoint
15a44     04 4E 05 F1 | 	add	fp, #4
15a48     A7 FA 61 FC | 	wrlong	result1, fp
15a4c     10 4E 05 F1 | 	add	fp, #16
15a50     A7 26 02 FB | 	rdlong	local01, fp
15a54     14 4E 85 F1 | 	sub	fp, #20
15a58     02 26 66 F0 | 	shl	local01, #2
15a5c     50 00 00 FF 
15a60     C4 E4 05 F1 | 	add	objptr, ##41156
15a64     F2 26 02 F1 | 	add	local01, objptr
15a68     13 01 68 FC | 	wrlong	#0, local01
15a6c                 | ' t1=pop() : channel=converttoint(t1)
15a6c                 | ' getres(j)=0
15a6c                 | ' if pos>=0 then
15a6c     01 00 00 FF 
15a70     54 E5 05 F1 | 	add	objptr, ##852
15a74     F2 28 02 FB | 	rdlong	local02, objptr
15a78     52 00 00 FF 
15a7c     18 E4 85 F1 | 	sub	objptr, ##42008
15a80     00 28 56 F2 | 	cmps	local02, #0 wc
15a84     C0 01 90 CD |  if_b	jmp	#LR__1820
15a88     10 4E 05 F1 | 	add	fp, #16
15a8c     A7 00 68 FC | 	wrlong	#0, fp
15a90     10 4E 85 F1 | 	sub	fp, #16
15a94                 | '    i=0: do
15a94                 | LR__1815
15a94     14 4E 05 F1 | 	add	fp, #20
15a98     A7 00 68 FC | 	wrlong	#0, fp
15a9c     14 4E 85 F1 | 	sub	fp, #20
15aa0                 | '    j=0: do    
15aa0                 | LR__1816
15aa0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
15aa0     0C 4E 05 F1 | 	add	fp, #12
15aa4     A7 28 02 FB | 	rdlong	local02, fp
15aa8     0C 4E 85 F1 | 	sub	fp, #12
15aac     00 04 00 FF 
15ab0     00 28 56 F2 | 	cmps	local02, ##524288 wc
15ab4     4C 00 90 3D |  if_ae	jmp	#LR__1817
15ab8     14 4E 05 F1 | 	add	fp, #20
15abc     A7 28 02 FB | 	rdlong	local02, fp
15ac0     14 27 02 F6 | 	mov	local01, local02
15ac4     4E 00 00 FF 
15ac8     B4 E4 05 F1 | 	add	objptr, ##40116
15acc     F2 26 02 F1 | 	add	local01, objptr
15ad0     08 4E 85 F1 | 	sub	fp, #8
15ad4     A7 12 02 FB | 	rdlong	arg01, fp
15ad8     04 4E 05 F1 | 	add	fp, #4
15adc     A7 18 02 FB | 	rdlong	arg04, fp
15ae0     0A 18 66 F0 | 	shl	arg04, #10
15ae4     0C 13 02 F1 | 	add	arg01, arg04
15ae8     10 4E 85 F1 | 	sub	fp, #16
15aec     14 13 02 F1 | 	add	arg01, local02
15af0     09 FB C1 FA | 	rdbyte	result1, arg01
15af4     4E 00 00 FF 
15af8     B4 E4 85 F1 | 	sub	objptr, ##40116
15afc     13 FB 41 FC | 	wrbyte	result1, local01
15b00     48 00 90 FD | 	jmp	#LR__1818
15b04                 | LR__1817
15b04     14 4E 05 F1 | 	add	fp, #20
15b08     A7 28 02 FB | 	rdlong	local02, fp
15b0c     14 27 02 F6 | 	mov	local01, local02
15b10     4E 00 00 FF 
15b14     B4 E4 05 F1 | 	add	objptr, ##40116
15b18     F2 26 02 F1 | 	add	local01, objptr
15b1c     08 4E 85 F1 | 	sub	fp, #8
15b20     A7 12 02 FB | 	rdlong	arg01, fp
15b24     04 4E 05 F1 | 	add	fp, #4
15b28     A7 18 02 FB | 	rdlong	arg04, fp
15b2c     0A 18 66 F0 | 	shl	arg04, #10
15b30     0C 13 02 F1 | 	add	arg01, arg04
15b34     10 4E 85 F1 | 	sub	fp, #16
15b38     14 13 02 F1 | 	add	arg01, local02
15b3c     4E 00 00 FF 
15b40     B4 E4 85 F1 | 	sub	objptr, ##40116
15b44     10 8A B0 FD | 	call	#_pspeek
15b48     13 FB 41 FC | 	wrbyte	result1, local01
15b4c                 | LR__1818
15b4c     14 4E 05 F1 | 	add	fp, #20
15b50     A7 28 02 FB | 	rdlong	local02, fp
15b54     01 28 06 F1 | 	add	local02, #1
15b58     A7 28 62 FC | 	wrlong	local02, fp
15b5c     14 4E 85 F1 | 	sub	fp, #20
15b60     02 00 00 FF 
15b64     00 28 56 F2 | 	cmps	local02, ##1024 wc
15b68     2C 00 90 3D |  if_ae	jmp	#LR__1819
15b6c     10 4E 05 F1 | 	add	fp, #16
15b70     A7 26 02 FB | 	rdlong	local01, fp
15b74     0A 26 66 F0 | 	shl	local01, #10
15b78     04 4E 05 F1 | 	add	fp, #4
15b7c     A7 28 02 FB | 	rdlong	local02, fp
15b80     14 27 02 F1 | 	add	local01, local02
15b84     0C 4E 85 F1 | 	sub	fp, #12
15b88     A7 28 02 FB | 	rdlong	local02, fp
15b8c     08 4E 85 F1 | 	sub	fp, #8
15b90     14 27 5A F2 | 	cmps	local01, local02 wcz
15b94     08 FF 9F ED |  if_be	jmp	#LR__1816
15b98                 | LR__1819
15b98                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
15b98     04 4E 05 F1 | 	add	fp, #4
15b9c     A7 12 02 FB | 	rdlong	arg01, fp
15ba0     52 00 00 FF 
15ba4     18 E4 05 F1 | 	add	objptr, ##42008
15ba8     F2 14 02 FB | 	rdlong	arg02, objptr
15bac     01 14 06 F1 | 	add	arg02, #1
15bb0     03 00 00 FF 
15bb4     64 E5 85 F1 | 	sub	objptr, ##1892
15bb8     F2 16 02 F6 | 	mov	arg03, objptr
15bbc     4E 00 00 FF 
15bc0     B4 E4 85 F1 | 	sub	objptr, ##40116
15bc4     04 4E 05 F1 | 	add	fp, #4
15bc8     A7 18 02 FB | 	rdlong	arg04, fp
15bcc     08 4E 85 F1 | 	sub	fp, #8
15bd0     01 1A 06 F6 | 	mov	arg05, #1
15bd4     40 CE B0 FD | 	call	#__system___basic_put
15bd8     18 4E 05 F1 | 	add	fp, #24
15bdc     A7 FA 61 FC | 	wrlong	result1, fp
15be0     14 4E 85 F1 | 	sub	fp, #20
15be4     A7 26 02 FB | 	rdlong	local01, fp
15be8     02 26 66 F0 | 	shl	local01, #2
15bec     50 00 00 FF 
15bf0     C4 E4 05 F1 | 	add	objptr, ##41156
15bf4     F2 26 02 F1 | 	add	local01, objptr
15bf8     13 FB 61 FC | 	wrlong	result1, local01
15bfc                 | '    if 1024*i+j>amount then exit loop
15bfc     0C 4E 05 F1 | 	add	fp, #12
15c00     A7 28 02 FB | 	rdlong	local02, fp
15c04     0A 28 66 F0 | 	shl	local02, #10
15c08     04 4E 05 F1 | 	add	fp, #4
15c0c     A7 26 02 FB | 	rdlong	local01, fp
15c10     13 29 02 F1 | 	add	local02, local01
15c14     0C 4E 85 F1 | 	sub	fp, #12
15c18     A7 26 02 FB | 	rdlong	local01, fp
15c1c     08 4E 85 F1 | 	sub	fp, #8
15c20     13 29 5A F2 | 	cmps	local02, local01 wcz
15c24     50 00 00 FF 
15c28     C4 E4 85 F1 | 	sub	objptr, ##41156
15c2c     CC 01 90 1D |  if_a	jmp	#LR__1827
15c30     10 4E 05 F1 | 	add	fp, #16
15c34     A7 28 02 FB | 	rdlong	local02, fp
15c38     01 28 06 F1 | 	add	local02, #1
15c3c     A7 28 62 FC | 	wrlong	local02, fp
15c40     10 4E 85 F1 | 	sub	fp, #16
15c44     4C FE 9F FD | 	jmp	#LR__1815
15c48                 | LR__1820
15c48     10 4E 05 F1 | 	add	fp, #16
15c4c     A7 00 68 FC | 	wrlong	#0, fp
15c50     10 4E 85 F1 | 	sub	fp, #16
15c54                 | '    i=0: do
15c54                 | LR__1821
15c54     14 4E 05 F1 | 	add	fp, #20
15c58     A7 00 68 FC | 	wrlong	#0, fp
15c5c     14 4E 85 F1 | 	sub	fp, #20
15c60                 | '    j=0: do  
15c60                 | LR__1822
15c60                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
15c60     0C 4E 05 F1 | 	add	fp, #12
15c64     A7 28 02 FB | 	rdlong	local02, fp
15c68     0C 4E 85 F1 | 	sub	fp, #12
15c6c     00 04 00 FF 
15c70     00 28 56 F2 | 	cmps	local02, ##524288 wc
15c74     4C 00 90 3D |  if_ae	jmp	#LR__1823
15c78     14 4E 05 F1 | 	add	fp, #20
15c7c     A7 28 02 FB | 	rdlong	local02, fp
15c80     14 27 02 F6 | 	mov	local01, local02
15c84     4E 00 00 FF 
15c88     B4 E4 05 F1 | 	add	objptr, ##40116
15c8c     F2 26 02 F1 | 	add	local01, objptr
15c90     08 4E 85 F1 | 	sub	fp, #8
15c94     A7 12 02 FB | 	rdlong	arg01, fp
15c98     04 4E 05 F1 | 	add	fp, #4
15c9c     A7 18 02 FB | 	rdlong	arg04, fp
15ca0     0A 18 66 F0 | 	shl	arg04, #10
15ca4     0C 13 02 F1 | 	add	arg01, arg04
15ca8     10 4E 85 F1 | 	sub	fp, #16
15cac     14 13 02 F1 | 	add	arg01, local02
15cb0     09 FB C1 FA | 	rdbyte	result1, arg01
15cb4     4E 00 00 FF 
15cb8     B4 E4 85 F1 | 	sub	objptr, ##40116
15cbc     13 FB 41 FC | 	wrbyte	result1, local01
15cc0     48 00 90 FD | 	jmp	#LR__1824
15cc4                 | LR__1823
15cc4     14 4E 05 F1 | 	add	fp, #20
15cc8     A7 28 02 FB | 	rdlong	local02, fp
15ccc     14 27 02 F6 | 	mov	local01, local02
15cd0     4E 00 00 FF 
15cd4     B4 E4 05 F1 | 	add	objptr, ##40116
15cd8     F2 26 02 F1 | 	add	local01, objptr
15cdc     08 4E 85 F1 | 	sub	fp, #8
15ce0     A7 12 02 FB | 	rdlong	arg01, fp
15ce4     04 4E 05 F1 | 	add	fp, #4
15ce8     A7 18 02 FB | 	rdlong	arg04, fp
15cec     0A 18 66 F0 | 	shl	arg04, #10
15cf0     0C 13 02 F1 | 	add	arg01, arg04
15cf4     10 4E 85 F1 | 	sub	fp, #16
15cf8     14 13 02 F1 | 	add	arg01, local02
15cfc     4E 00 00 FF 
15d00     B4 E4 85 F1 | 	sub	objptr, ##40116
15d04     50 88 B0 FD | 	call	#_pspeek
15d08     13 FB 41 FC | 	wrbyte	result1, local01
15d0c                 | LR__1824
15d0c     14 4E 05 F1 | 	add	fp, #20
15d10     A7 28 02 FB | 	rdlong	local02, fp
15d14     01 28 06 F1 | 	add	local02, #1
15d18     A7 28 62 FC | 	wrlong	local02, fp
15d1c     14 4E 85 F1 | 	sub	fp, #20
15d20     02 00 00 FF 
15d24     00 28 56 F2 | 	cmps	local02, ##1024 wc
15d28     2C 00 90 3D |  if_ae	jmp	#LR__1825
15d2c     10 4E 05 F1 | 	add	fp, #16
15d30     A7 26 02 FB | 	rdlong	local01, fp
15d34     0A 26 66 F0 | 	shl	local01, #10
15d38     04 4E 05 F1 | 	add	fp, #4
15d3c     A7 28 02 FB | 	rdlong	local02, fp
15d40     14 27 02 F1 | 	add	local01, local02
15d44     0C 4E 85 F1 | 	sub	fp, #12
15d48     A7 28 02 FB | 	rdlong	local02, fp
15d4c     08 4E 85 F1 | 	sub	fp, #8
15d50     14 27 5A F2 | 	cmps	local01, local02 wcz
15d54     08 FF 9F ED |  if_be	jmp	#LR__1822
15d58                 | LR__1825
15d58                 | '    put #channel,,block(0),amount, r : getres(channel)=r
15d58     04 4E 05 F1 | 	add	fp, #4
15d5c     A7 12 02 FB | 	rdlong	arg01, fp
15d60     4E 00 00 FF 
15d64     B4 E4 05 F1 | 	add	objptr, ##40116
15d68     F2 16 02 F6 | 	mov	arg03, objptr
15d6c     4E 00 00 FF 
15d70     B4 E4 85 F1 | 	sub	objptr, ##40116
15d74     04 4E 05 F1 | 	add	fp, #4
15d78     A7 18 02 FB | 	rdlong	arg04, fp
15d7c     08 4E 85 F1 | 	sub	fp, #8
15d80     00 14 06 F6 | 	mov	arg02, #0
15d84     01 1A 06 F6 | 	mov	arg05, #1
15d88     8C CC B0 FD | 	call	#__system___basic_put
15d8c     18 4E 05 F1 | 	add	fp, #24
15d90     A7 FA 61 FC | 	wrlong	result1, fp
15d94     14 4E 85 F1 | 	sub	fp, #20
15d98     A7 26 02 FB | 	rdlong	local01, fp
15d9c     02 26 66 F0 | 	shl	local01, #2
15da0     50 00 00 FF 
15da4     C4 E4 05 F1 | 	add	objptr, ##41156
15da8     F2 26 02 F1 | 	add	local01, objptr
15dac     13 FB 61 FC | 	wrlong	result1, local01
15db0                 | '    if 1024*i+j>amount then exit loop
15db0     0C 4E 05 F1 | 	add	fp, #12
15db4     A7 28 02 FB | 	rdlong	local02, fp
15db8     0A 28 66 F0 | 	shl	local02, #10
15dbc     04 4E 05 F1 | 	add	fp, #4
15dc0     A7 26 02 FB | 	rdlong	local01, fp
15dc4     13 29 02 F1 | 	add	local02, local01
15dc8     0C 4E 85 F1 | 	sub	fp, #12
15dcc     A7 2A 02 FB | 	rdlong	local03, fp
15dd0     08 4E 85 F1 | 	sub	fp, #8
15dd4     15 29 5A F2 | 	cmps	local02, local03 wcz
15dd8     50 00 00 FF 
15ddc     C4 E4 85 F1 | 	sub	objptr, ##41156
15de0     18 00 90 1D |  if_a	jmp	#LR__1826
15de4     10 4E 05 F1 | 	add	fp, #16
15de8     A7 28 02 FB | 	rdlong	local02, fp
15dec     01 28 06 F1 | 	add	local02, #1
15df0     A7 28 62 FC | 	wrlong	local02, fp
15df4     10 4E 85 F1 | 	sub	fp, #16
15df8     58 FE 9F FD | 	jmp	#LR__1821
15dfc                 | LR__1826
15dfc                 | LR__1827
15dfc     A7 F0 03 F6 | 	mov	ptra, fp
15e00     B2 00 A0 FD | 	call	#popregs_
15e04                 | _do_put_ret
15e04     2D 00 64 FD | 	ret
15e08                 | 
15e08                 | ' 
15e08                 | ' '-------------------- rad
15e08                 | ' 
15e08                 | ' sub do_rad
15e08                 | _do_rad
15e08     51 00 00 FF 
15e0c     BC E5 05 F1 | 	add	objptr, ##41916
15e10     00 C0 9F FF 
15e14     F2 00 68 FC | 	wrlong	##1065353216, objptr
15e18     04 E4 05 F1 | 	add	objptr, #4
15e1c     00 C0 9F FF 
15e20     F2 00 68 FC | 	wrlong	##1065353216, objptr
15e24     51 00 00 FF 
15e28     C0 E5 85 F1 | 	sub	objptr, ##41920
15e2c                 | _do_rad_ret
15e2c     2D 00 64 FD | 	ret
15e30                 | 
15e30                 | ' 
15e30                 | ' '-------------------- rdpin
15e30                 | ' 
15e30                 | ' sub do_rdpin
15e30                 | _do_rdpin
15e30     00 4A 05 F6 | 	mov	COUNT_, #0
15e34     A8 00 A0 FD | 	call	#pushregs_
15e38     0C F0 07 F1 | 	add	ptra, #12
15e3c     50 5A BF FD | 	call	#_pop
15e40     A7 FA 61 FC | 	wrlong	result1, fp
15e44     04 4E 05 F1 | 	add	fp, #4
15e48     A7 FC 61 FC | 	wrlong	result2, fp
15e4c     04 4E 05 F1 | 	add	fp, #4
15e50     A7 FE 61 FC | 	wrlong	result3, fp
15e54     08 4E 85 F1 | 	sub	fp, #8
15e58     A7 12 02 F6 | 	mov	arg01, fp
15e5c     14 5C BF FD | 	call	#_converttoint
15e60     FD FA 89 FA | 	rdpin	result1, result1
15e64     52 00 00 FF 
15e68     1C E4 05 F1 | 	add	objptr, ##42012
15e6c     F2 FA 61 FC | 	wrlong	result1, objptr
15e70     52 00 00 FF 
15e74     1C E4 85 F1 | 	sub	objptr, ##42012
15e78     08 4E 05 F1 | 	add	fp, #8
15e7c     A7 3A 68 FC | 	wrlong	#29, fp
15e80     08 4E 85 F1 | 	sub	fp, #8
15e84     A7 08 68 FC | 	wrlong	#4, fp
15e88     A7 12 02 F6 | 	mov	arg01, fp
15e8c     98 5A BF FD | 	call	#_push
15e90     A7 F0 03 F6 | 	mov	ptra, fp
15e94     B2 00 A0 FD | 	call	#popregs_
15e98                 | _do_rdpin_ret
15e98     2D 00 64 FD | 	ret
15e9c                 | 
15e9c                 | ' 
15e9c                 | ' '------------------- release
15e9c                 | ' 
15e9c                 | ' sub do_release
15e9c                 | _do_release
15e9c     00 4A 05 F6 | 	mov	COUNT_, #0
15ea0     A8 00 A0 FD | 	call	#pushregs_
15ea4     10 F0 07 F1 | 	add	ptra, #16
15ea8     E4 59 BF FD | 	call	#_pop
15eac     FF 14 02 F6 | 	mov	arg02, result3
15eb0     A7 FA 61 FC | 	wrlong	result1, fp
15eb4     04 4E 05 F1 | 	add	fp, #4
15eb8     A7 FC 61 FC | 	wrlong	result2, fp
15ebc     04 4E 05 F1 | 	add	fp, #4
15ec0     A7 14 62 FC | 	wrlong	arg02, fp
15ec4     08 4E 85 F1 | 	sub	fp, #8
15ec8     A7 12 02 F6 | 	mov	arg01, fp
15ecc     A4 5B BF FD | 	call	#_converttoint
15ed0     0C 4E 05 F1 | 	add	fp, #12
15ed4     A7 FA 61 FC | 	wrlong	result1, fp
15ed8                 | ' 
15ed8                 | ' t1=pop()
15ed8                 | ' channel=converttoint(t1)
15ed8                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
15ed8     0C 4E 85 F1 | 	sub	fp, #12
15edc     00 FA 55 F2 | 	cmps	result1, #0 wc
15ee0     44 00 90 CD |  if_b	jmp	#LR__1830
15ee4     0C 4E 05 F1 | 	add	fp, #12
15ee8     A7 14 02 FB | 	rdlong	arg02, fp
15eec     0C 4E 85 F1 | 	sub	fp, #12
15ef0     08 14 56 F2 | 	cmps	arg02, #8 wc
15ef4     30 00 90 3D |  if_ae	jmp	#LR__1830
15ef8     37 00 00 FF 
15efc     10 E4 05 F1 | 	add	objptr, ##28176
15f00     F2 12 02 FB | 	rdlong	arg01, objptr
15f04     37 00 00 FF 
15f08     10 E4 85 F1 | 	sub	objptr, ##28176
15f0c     0C 4E 05 F1 | 	add	fp, #12
15f10     A7 14 02 FB | 	rdlong	arg02, fp
15f14     0C 4E 85 F1 | 	sub	fp, #12
15f18     06 14 66 F0 | 	shl	arg02, #6
15f1c     0A 13 02 F1 | 	add	arg01, arg02
15f20     2C 12 06 F1 | 	add	arg01, #44
15f24     09 FF 69 FC | 	wrlong	#255, arg01
15f28                 | LR__1830
15f28     A7 F0 03 F6 | 	mov	ptra, fp
15f2c     B2 00 A0 FD | 	call	#popregs_
15f30                 | _do_release_ret
15f30     2D 00 64 FD | 	ret
15f34                 | 
15f34                 | ' 
15f34                 | ' '------------------- return
15f34                 | ' 
15f34                 | ' sub do_return()
15f34                 | _do_return
15f34                 | ' if gosubtop>0 then
15f34     50 00 00 FF 
15f38     0C E5 05 F1 | 	add	objptr, ##41228
15f3c     F2 00 02 FB | 	rdlong	_var01, objptr
15f40     50 00 00 FF 
15f44     0C E5 85 F1 | 	sub	objptr, ##41228
15f48     01 00 56 F2 | 	cmps	_var01, #1 wc
15f4c     8C 00 90 CD |  if_b	jmp	#LR__1840
15f50     50 00 00 FF 
15f54     0C E5 05 F1 | 	add	objptr, ##41228
15f58     F2 00 02 FB | 	rdlong	_var01, objptr
15f5c     03 00 66 F0 | 	shl	_var01, #3
15f60     03 00 00 FF 
15f64     60 E5 85 F1 | 	sub	objptr, ##1888
15f68     F2 00 02 F1 | 	add	_var01, objptr
15f6c     00 01 02 FB | 	rdlong	_var01, _var01
15f70     03 00 00 FF 
15f74     0C E5 05 F1 | 	add	objptr, ##1804
15f78     F2 00 62 FC | 	wrlong	_var01, objptr
15f7c     54 E4 05 F1 | 	add	objptr, #84
15f80     F2 00 02 FB | 	rdlong	_var01, objptr
15f84     03 00 66 F0 | 	shl	_var01, #3
15f88     03 00 00 FF 
15f8c     60 E5 85 F1 | 	sub	objptr, ##1888
15f90     F2 00 02 F1 | 	add	_var01, objptr
15f94     04 00 06 F1 | 	add	_var01, #4
15f98     00 01 02 FB | 	rdlong	_var01, _var01
15f9c     03 00 00 FF 
15fa0     10 E5 05 F1 | 	add	objptr, ##1808
15fa4     F2 00 62 FC | 	wrlong	_var01, objptr
15fa8     06 00 00 FF 
15fac     40 E4 85 F1 | 	sub	objptr, ##3136
15fb0     F2 00 02 FB | 	rdlong	_var01, objptr
15fb4     01 00 86 F1 | 	sub	_var01, #1
15fb8     04 E4 05 F1 | 	add	objptr, #4
15fbc     F2 00 62 FC | 	wrlong	_var01, objptr
15fc0     06 00 00 FF 
15fc4     8C E4 05 F1 | 	add	objptr, ##3212
15fc8     F2 00 02 FB | 	rdlong	_var01, objptr
15fcc     01 00 86 F1 | 	sub	_var01, #1
15fd0     F2 00 62 FC | 	wrlong	_var01, objptr
15fd4     50 00 00 FF 
15fd8     0C E5 85 F1 | 	sub	objptr, ##41228
15fdc                 | LR__1840
15fdc                 | _do_return_ret
15fdc     2D 00 64 FD | 	ret
15fe0                 | 
15fe0                 | ' 
15fe0                 | ' '------------------- right$
15fe0                 | ' 
15fe0                 | ' sub do_right
15fe0                 | _do_right
15fe0     00 4A 05 F6 | 	mov	COUNT_, #0
15fe4     A8 00 A0 FD | 	call	#pushregs_
15fe8     14 F0 07 F1 | 	add	ptra, #20
15fec     4A 00 00 FF 
15ff0     80 E4 05 F1 | 	add	objptr, ##38016
15ff4     F2 16 02 FB | 	rdlong	arg03, objptr
15ff8     0B 15 02 F6 | 	mov	arg02, arg03
15ffc     01 14 66 F0 | 	shl	arg02, #1
16000     0B 15 02 F1 | 	add	arg02, arg03
16004     02 14 66 F0 | 	shl	arg02, #2
16008     03 00 00 FF 
1600c     04 E4 85 F1 | 	sub	objptr, ##1540
16010     F2 14 02 F1 | 	add	arg02, objptr
16014     0A 17 02 FB | 	rdlong	arg03, arg02
16018     0C 4E 05 F1 | 	add	fp, #12
1601c     A7 16 62 FC | 	wrlong	arg03, fp
16020                 | ' 
16020                 | ' numpar=compiledline(lineptr_e).result.uresult
16020                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
16020     0C 4E 85 F1 | 	sub	fp, #12
16024     02 16 0E F2 | 	cmp	arg03, #2 wz
16028     47 00 00 FF 
1602c     7C E4 85 F1 | 	sub	objptr, ##36476
16030     40 00 90 AD |  if_e	jmp	#LR__1850
16034     00 12 06 F6 | 	mov	arg01, #0
16038     04 19 B1 FD | 	call	#__system___getiolock_0574
1603c     FD 12 02 F6 | 	mov	arg01, result1
16040     D0 BB B0 FD | 	call	#__system___lockmem
16044     90 01 00 FF 
16048     5B 15 06 F6 | 	mov	arg02, ##@LR__5631
1604c     00 12 06 F6 | 	mov	arg01, #0
16050     00 16 06 F6 | 	mov	arg03, #0
16054     B0 C8 B0 FD | 	call	#__system___basic_print_string
16058     00 12 06 F6 | 	mov	arg01, #0
1605c     E0 18 B1 FD | 	call	#__system___getiolock_0574
16060     FD 00 68 FC | 	wrlong	#0, result1
16064     27 12 06 F6 | 	mov	arg01, #39
16068     00 14 06 F6 | 	mov	arg02, #0
1606c     84 82 B0 FD | 	call	#_printerror
16070     EC 00 90 FD | 	jmp	#LR__1853
16074                 | LR__1850
16074     18 58 BF FD | 	call	#_pop
16078     FF 16 02 F6 | 	mov	arg03, result3
1607c     A7 FA 61 FC | 	wrlong	result1, fp
16080     04 4E 05 F1 | 	add	fp, #4
16084     A7 FC 61 FC | 	wrlong	result2, fp
16088     04 4E 05 F1 | 	add	fp, #4
1608c     A7 16 62 FC | 	wrlong	arg03, fp
16090     08 4E 85 F1 | 	sub	fp, #8
16094     A7 12 02 F6 | 	mov	arg01, fp
16098     D8 59 BF FD | 	call	#_converttoint
1609c     FD 16 02 F6 | 	mov	arg03, result1
160a0     10 4E 05 F1 | 	add	fp, #16
160a4     A7 16 62 FC | 	wrlong	arg03, fp
160a8     10 4E 85 F1 | 	sub	fp, #16
160ac     E0 57 BF FD | 	call	#_pop
160b0     FF 16 02 F6 | 	mov	arg03, result3
160b4     A7 FA 61 FC | 	wrlong	result1, fp
160b8     04 4E 05 F1 | 	add	fp, #4
160bc     A7 FC 61 FC | 	wrlong	result2, fp
160c0     04 4E 05 F1 | 	add	fp, #4
160c4     A7 16 62 FC | 	wrlong	arg03, fp
160c8                 | ' t1=pop() : arg=converttoint(t1)
160c8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
160c8     08 4E 85 F1 | 	sub	fp, #8
160cc     2B 16 0E F2 | 	cmp	arg03, #43 wz
160d0     18 00 90 5D |  if_ne	jmp	#LR__1851
160d4     A7 12 02 FB | 	rdlong	arg01, fp
160d8     2C 59 BF FD | 	call	#_convertstring
160dc     A7 FA 61 FC | 	wrlong	result1, fp
160e0     08 4E 05 F1 | 	add	fp, #8
160e4     A7 3E 68 FC | 	wrlong	#31, fp
160e8     08 4E 85 F1 | 	sub	fp, #8
160ec                 | LR__1851
160ec                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
160ec     08 4E 05 F1 | 	add	fp, #8
160f0     A7 16 02 FB | 	rdlong	arg03, fp
160f4     08 4E 85 F1 | 	sub	fp, #8
160f8     1F 16 0E F2 | 	cmp	arg03, #31 wz
160fc     40 00 90 AD |  if_e	jmp	#LR__1852
16100     00 12 06 F6 | 	mov	arg01, #0
16104     38 18 B1 FD | 	call	#__system___getiolock_0574
16108     FD 12 02 F6 | 	mov	arg01, result1
1610c     04 BB B0 FD | 	call	#__system___lockmem
16110     90 01 00 FF 
16114     64 15 06 F6 | 	mov	arg02, ##@LR__5632
16118     00 12 06 F6 | 	mov	arg01, #0
1611c     00 16 06 F6 | 	mov	arg03, #0
16120     E4 C7 B0 FD | 	call	#__system___basic_print_string
16124     00 12 06 F6 | 	mov	arg01, #0
16128     14 18 B1 FD | 	call	#__system___getiolock_0574
1612c     FD 00 68 FC | 	wrlong	#0, result1
16130     0F 12 06 F6 | 	mov	arg01, #15
16134     00 14 06 F6 | 	mov	arg02, #0
16138     B8 81 B0 FD | 	call	#_printerror
1613c     20 00 90 FD | 	jmp	#LR__1853
16140                 | LR__1852
16140     A7 12 02 FB | 	rdlong	arg01, fp
16144     10 4E 05 F1 | 	add	fp, #16
16148     A7 14 02 FB | 	rdlong	arg02, fp
1614c     10 4E 85 F1 | 	sub	fp, #16
16150     C4 DB B0 FD | 	call	#__system__Right_S
16154     A7 FA 61 FC | 	wrlong	result1, fp
16158     A7 12 02 F6 | 	mov	arg01, fp
1615c     C8 57 BF FD | 	call	#_push
16160                 | LR__1853
16160     A7 F0 03 F6 | 	mov	ptra, fp
16164     B2 00 A0 FD | 	call	#popregs_
16168                 | _do_right_ret
16168     2D 00 64 FD | 	ret
1616c                 | 
1616c                 | ' 
1616c                 | ' '------------------- rnd
1616c                 | ' 
1616c                 | ' sub do_rnd
1616c                 | _do_rnd
1616c     01 4A 05 F6 | 	mov	COUNT_, #1
16170     A8 00 A0 FD | 	call	#pushregs_
16174     10 F0 07 F1 | 	add	ptra, #16
16178     4A 00 00 FF 
1617c     80 E4 05 F1 | 	add	objptr, ##38016
16180     F2 26 02 FB | 	rdlong	local01, objptr
16184     13 17 02 F6 | 	mov	arg03, local01
16188     01 16 66 F0 | 	shl	arg03, #1
1618c     13 17 02 F1 | 	add	arg03, local01
16190     02 16 66 F0 | 	shl	arg03, #2
16194     03 00 00 FF 
16198     04 E4 85 F1 | 	sub	objptr, ##1540
1619c     F2 16 02 F1 | 	add	arg03, objptr
161a0     0B 17 02 FB | 	rdlong	arg03, arg03
161a4     0C 4E 05 F1 | 	add	fp, #12
161a8     A7 16 62 FC | 	wrlong	arg03, fp
161ac                 | ' 
161ac                 | ' numpar=compiledline(lineptr_e).result.uresult
161ac                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
161ac     0C 4E 85 F1 | 	sub	fp, #12
161b0     02 16 16 F2 | 	cmp	arg03, #2 wc
161b4     47 00 00 FF 
161b8     7C E4 85 F1 | 	sub	objptr, ##36476
161bc     40 00 90 CD |  if_b	jmp	#LR__1860
161c0     00 12 06 F6 | 	mov	arg01, #0
161c4     78 17 B1 FD | 	call	#__system___getiolock_0574
161c8     FD 12 02 F6 | 	mov	arg01, result1
161cc     44 BA B0 FD | 	call	#__system___lockmem
161d0     90 01 00 FF 
161d4     6D 15 06 F6 | 	mov	arg02, ##@LR__5633
161d8     00 12 06 F6 | 	mov	arg01, #0
161dc     00 16 06 F6 | 	mov	arg03, #0
161e0     24 C7 B0 FD | 	call	#__system___basic_print_string
161e4     00 12 06 F6 | 	mov	arg01, #0
161e8     54 17 B1 FD | 	call	#__system___getiolock_0574
161ec     FD 00 68 FC | 	wrlong	#0, result1
161f0     27 12 06 F6 | 	mov	arg01, #39
161f4     00 14 06 F6 | 	mov	arg02, #0
161f8     F8 80 B0 FD | 	call	#_printerror
161fc     30 01 90 FD | 	jmp	#LR__1867
16200                 | LR__1860
16200                 | ' if numpar=0 then
16200     0C 4E 05 F1 | 	add	fp, #12
16204     A7 FE 09 FB | 	rdlong	result3, fp wz
16208     0C 4E 85 F1 | 	sub	fp, #12
1620c     20 00 90 5D |  if_ne	jmp	#LR__1861
16210     08 4E 05 F1 | 	add	fp, #8
16214     A7 3A 68 FC | 	wrlong	#29, fp
16218     08 4E 85 F1 | 	sub	fp, #8
1621c     1B FA 61 FD | 	getrnd	result1
16220     A7 FA 61 FC | 	wrlong	result1, fp
16224     A7 12 02 F6 | 	mov	arg01, fp
16228     FC 56 BF FD | 	call	#_push
1622c     00 01 90 FD | 	jmp	#LR__1866
16230                 | LR__1861
16230     5C 56 BF FD | 	call	#_pop
16234     A7 FA 61 FC | 	wrlong	result1, fp
16238     04 4E 05 F1 | 	add	fp, #4
1623c     A7 FC 61 FC | 	wrlong	result2, fp
16240     04 4E 05 F1 | 	add	fp, #4
16244     A7 FE 61 FC | 	wrlong	result3, fp
16248                 | '   t1=pop()
16248                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
16248     08 4E 85 F1 | 	sub	fp, #8
1624c     1C FE 0D F2 | 	cmp	result3, #28 wz
16250     08 4E 05 51 |  if_ne	add	fp, #8
16254     A7 26 02 5B |  if_ne	rdlong	local01, fp
16258     08 4E 85 51 |  if_ne	sub	fp, #8
1625c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16260     2C 00 90 5D |  if_ne	jmp	#LR__1862
16264     1B FA 61 FD | 	getrnd	result1
16268     A7 26 02 FB | 	rdlong	local01, fp
1626c     13 FB 11 FD | 	qdiv	result1, local01
16270     A7 12 02 F6 | 	mov	arg01, fp
16274     19 26 62 FD | 	getqy	local01
16278     A7 26 62 FC | 	wrlong	local01, fp
1627c     08 4E 05 F1 | 	add	fp, #8
16280     A7 3A 68 FC | 	wrlong	#29, fp
16284     08 4E 85 F1 | 	sub	fp, #8
16288     9C 56 BF FD | 	call	#_push
1628c     A0 00 90 FD | 	jmp	#LR__1865
16290                 | LR__1862
16290     08 4E 05 F1 | 	add	fp, #8
16294     A7 26 02 FB | 	rdlong	local01, fp
16298     08 4E 85 F1 | 	sub	fp, #8
1629c     1E 26 0E F2 | 	cmp	local01, #30 wz
162a0     48 00 90 5D |  if_ne	jmp	#LR__1863
162a4     A7 12 02 FB | 	rdlong	arg01, fp
162a8     00 C0 24 FF 
162ac     00 14 06 F6 | 	mov	arg02, ##1233125376
162b0     20 E9 B0 FD | 	call	#__system___float_div
162b4     FD 26 02 F6 | 	mov	local01, result1
162b8     1B 12 62 FD | 	getrnd	arg01
162bc     74 13 06 F4 | 	bitl	arg01, #372
162c0     08 E3 B0 FD | 	call	#__system___float_fromuns
162c4     FD 14 02 F6 | 	mov	arg02, result1
162c8     13 13 02 F6 | 	mov	arg01, local01
162cc     00 E7 B0 FD | 	call	#__system___float_mul
162d0     A7 FA 61 FC | 	wrlong	result1, fp
162d4     08 4E 05 F1 | 	add	fp, #8
162d8     A7 3C 68 FC | 	wrlong	#30, fp
162dc     08 4E 85 F1 | 	sub	fp, #8
162e0     A7 12 02 F6 | 	mov	arg01, fp
162e4     40 56 BF FD | 	call	#_push
162e8     44 00 90 FD | 	jmp	#LR__1864
162ec                 | LR__1863
162ec                 | '     print "rnd: "; : printerror(40) 
162ec     00 12 06 F6 | 	mov	arg01, #0
162f0     4C 16 B1 FD | 	call	#__system___getiolock_0574
162f4     FD 12 02 F6 | 	mov	arg01, result1
162f8     18 B9 B0 FD | 	call	#__system___lockmem
162fc     90 01 00 FF 
16300     73 15 06 F6 | 	mov	arg02, ##@LR__5634
16304     00 12 06 F6 | 	mov	arg01, #0
16308     00 16 06 F6 | 	mov	arg03, #0
1630c     F8 C5 B0 FD | 	call	#__system___basic_print_string
16310     00 12 06 F6 | 	mov	arg01, #0
16314     28 16 B1 FD | 	call	#__system___getiolock_0574
16318     FD 00 68 FC | 	wrlong	#0, result1
1631c     28 12 06 F6 | 	mov	arg01, #40
16320     00 14 06 F6 | 	mov	arg02, #0
16324     CC 7F B0 FD | 	call	#_printerror
16328     A7 12 02 F6 | 	mov	arg01, fp
1632c     F8 55 BF FD | 	call	#_push
16330                 | LR__1864
16330                 | LR__1865
16330                 | LR__1866
16330                 | LR__1867
16330     A7 F0 03 F6 | 	mov	ptra, fp
16334     B2 00 A0 FD | 	call	#popregs_
16338                 | _do_rnd_ret
16338     2D 00 64 FD | 	ret
1633c                 | 
1633c                 | ' 
1633c                 | ' '-------------------- round
1633c                 | ' 
1633c                 | ' sub do_round
1633c                 | _do_round
1633c     00 4A 05 F6 | 	mov	COUNT_, #0
16340     A8 00 A0 FD | 	call	#pushregs_
16344     0C F0 07 F1 | 	add	ptra, #12
16348     44 55 BF FD | 	call	#_pop
1634c     A7 FA 61 FC | 	wrlong	result1, fp
16350     04 4E 05 F1 | 	add	fp, #4
16354     A7 FC 61 FC | 	wrlong	result2, fp
16358     04 4E 05 F1 | 	add	fp, #4
1635c     A7 FE 61 FC | 	wrlong	result3, fp
16360     08 4E 85 F1 | 	sub	fp, #8
16364     A7 12 02 F6 | 	mov	arg01, fp
16368     08 57 BF FD | 	call	#_converttoint
1636c     A7 FA 61 FC | 	wrlong	result1, fp
16370     08 4E 05 F1 | 	add	fp, #8
16374     A7 38 68 FC | 	wrlong	#28, fp
16378     08 4E 85 F1 | 	sub	fp, #8
1637c     A7 12 02 F6 | 	mov	arg01, fp
16380     A4 55 BF FD | 	call	#_push
16384     A7 F0 03 F6 | 	mov	ptra, fp
16388     B2 00 A0 FD | 	call	#popregs_
1638c                 | _do_round_ret
1638c     2D 00 64 FD | 	ret
16390                 | 
16390                 | ' 
16390                 | ' '-------------------- rqpin
16390                 | ' 
16390                 | ' sub do_rqpin
16390                 | _do_rqpin
16390     00 4A 05 F6 | 	mov	COUNT_, #0
16394     A8 00 A0 FD | 	call	#pushregs_
16398     0C F0 07 F1 | 	add	ptra, #12
1639c     F0 54 BF FD | 	call	#_pop
163a0     A7 FA 61 FC | 	wrlong	result1, fp
163a4     04 4E 05 F1 | 	add	fp, #4
163a8     A7 FC 61 FC | 	wrlong	result2, fp
163ac     04 4E 05 F1 | 	add	fp, #4
163b0     A7 FE 61 FC | 	wrlong	result3, fp
163b4     08 4E 85 F1 | 	sub	fp, #8
163b8     A7 12 02 F6 | 	mov	arg01, fp
163bc     B4 56 BF FD | 	call	#_converttoint
163c0     FD 12 02 F6 | 	mov	arg01, result1
163c4     00 FA 05 F6 | 	mov	result1, #0
163c8     09 FB 81 FA | 	rqpin	result1, arg01
163cc     52 00 00 FF 
163d0     1C E4 05 F1 | 	add	objptr, ##42012
163d4     F2 FA 61 FC | 	wrlong	result1, objptr
163d8     52 00 00 FF 
163dc     1C E4 85 F1 | 	sub	objptr, ##42012
163e0     08 4E 05 F1 | 	add	fp, #8
163e4     A7 3A 68 FC | 	wrlong	#29, fp
163e8     08 4E 85 F1 | 	sub	fp, #8
163ec     A7 08 68 FC | 	wrlong	#4, fp
163f0     A7 12 02 F6 | 	mov	arg01, fp
163f4     30 55 BF FD | 	call	#_push
163f8     A7 F0 03 F6 | 	mov	ptra, fp
163fc     B2 00 A0 FD | 	call	#popregs_
16400                 | _do_rqpin_ret
16400     2D 00 64 FD | 	ret
16404                 | 
16404                 | ' 
16404                 | ' ' ------------------ run
16404                 | ' 
16404                 | ' sub do_run
16404                 | _do_run
16404     04 4A 05 F6 | 	mov	COUNT_, #4
16408     A8 00 A0 FD | 	call	#pushregs_
1640c     4A 00 00 FF 
16410     80 E4 05 F1 | 	add	objptr, ##38016
16414     F2 26 02 FB | 	rdlong	local01, objptr
16418     06 00 00 FF 
1641c     38 E4 05 F1 | 	add	objptr, ##3128
16420     F2 28 02 FB | 	rdlong	local02, objptr
16424     04 E4 05 F1 | 	add	objptr, #4
16428     F2 2A 02 FB | 	rdlong	local03, objptr
1642c     13 19 02 F6 | 	mov	arg04, local01
16430     0C 17 02 F6 | 	mov	arg03, arg04
16434     01 16 66 F0 | 	shl	arg03, #1
16438     0C 17 02 F1 | 	add	arg03, arg04
1643c     02 16 66 F0 | 	shl	arg03, #2
16440     09 00 00 FF 
16444     40 E4 85 F1 | 	sub	objptr, ##4672
16448     F2 16 02 F1 | 	add	arg03, objptr
1644c     0B 15 02 FB | 	rdlong	arg02, arg03
16450                 | ' 
16450                 | ' r_lineptr_e=lineptr_e
16450                 | ' r_runptr=runptr
16450                 | ' r_runptr2=runptr2
16450                 | ' 
16450                 | ' numpar=compiledline(lineptr_e).result.uresult
16450                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
16450     01 14 0E F2 | 	cmp	arg02, #1 wz
16454     47 00 00 FF 
16458     7C E4 85 F1 | 	sub	objptr, ##36476
1645c     00 12 06 A6 |  if_e	mov	arg01, #0
16460     B0 C2 BF AD |  if_e	call	#_do_load
16464     4A 00 00 FF 
16468     88 E4 05 F1 | 	add	objptr, ##38024
1646c     F2 18 02 FB | 	rdlong	arg04, objptr
16470     06 00 00 FF 
16474     30 E4 05 F1 | 	add	objptr, ##3120
16478     F2 18 62 FC | 	wrlong	arg04, objptr
1647c     04 E4 05 F1 | 	add	objptr, #4
16480     F2 00 68 FC | 	wrlong	#0, objptr
16484     04 E4 05 F1 | 	add	objptr, #4
16488     FF FF FF FF 
1648c     F2 FE 6B FC | 	wrlong	##-1, objptr
16490                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
16490                 | ' if inrun>0 then 
16490     2C E4 05 F1 | 	add	objptr, #44
16494     F2 18 02 FB | 	rdlong	arg04, objptr
16498     50 00 00 FF 
1649c     EC E4 85 F1 | 	sub	objptr, ##41196
164a0     01 18 16 F2 | 	cmp	arg04, #1 wc
164a4     30 00 90 CD |  if_b	jmp	#LR__1870
164a8     50 00 00 FF 
164ac     F0 E4 05 F1 | 	add	objptr, ##41200
164b0     F2 12 02 F6 | 	mov	arg01, objptr
164b4     38 E4 85 F1 | 	sub	objptr, #56
164b8     F2 14 02 FB | 	rdlong	arg02, objptr
164bc     18 16 06 F6 | 	mov	arg03, #24
164c0     44 00 00 FF 
164c4     EC E5 85 F1 | 	sub	objptr, ##35308
164c8     08 AB B0 FD | 	call	#_psram_spin2_read1
164cc     0B 00 00 FF 
164d0     CC E4 85 F1 | 	sub	objptr, ##5836
164d4                 | '   psram.read1(varptr(runheader),runptr,24)  
164d4                 | '   return
164d4     D4 02 90 FD | 	jmp	#LR__1876
164d8                 | LR__1870
164d8     50 00 00 FF 
164dc     EC E4 05 F1 | 	add	objptr, ##41196
164e0     F2 02 68 FC | 	wrlong	#1, objptr
164e4     04 E4 05 F1 | 	add	objptr, #4
164e8     F2 12 02 F6 | 	mov	arg01, objptr
164ec     38 E4 85 F1 | 	sub	objptr, #56
164f0     F2 14 02 FB | 	rdlong	arg02, objptr
164f4     18 16 06 F6 | 	mov	arg03, #24
164f8     44 00 00 FF 
164fc     EC E5 85 F1 | 	sub	objptr, ##35308
16500     D0 AA B0 FD | 	call	#_psram_spin2_read1
16504                 | ' inrun=1
16504                 | ' psram.read1(varptr(runheader),runptr,24) 
16504                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
16504     45 00 00 FF 
16508     24 E4 05 F1 | 	add	objptr, ##35364
1650c     F2 2C 02 FB | 	rdlong	local04, objptr
16510     50 00 00 FF 
16514     F0 E4 85 F1 | 	sub	objptr, ##41200
16518     FF FF 7F FF 
1651c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
16520     50 00 00 AF 
16524     EC E4 05 A1 |  if_e	add	objptr, ##41196
16528     F2 00 68 AC |  if_e	wrlong	#0, objptr
1652c     50 00 00 AF 
16530     EC E4 85 A1 |  if_e	sub	objptr, ##41196
16534     74 02 90 AD |  if_e	jmp	#LR__1876
16538                 | ' do 
16538                 | LR__1871
16538                 | '   if runptr<>oldrunptr then
16538     50 00 00 FF 
1653c     B8 E4 05 F1 | 	add	objptr, ##41144
16540     F2 2C 02 FB | 	rdlong	local04, objptr
16544     08 E4 05 F1 | 	add	objptr, #8
16548     F2 18 02 FB | 	rdlong	arg04, objptr
1654c     50 00 00 FF 
16550     C0 E4 85 F1 | 	sub	objptr, ##41152
16554     0C 2D 0A F2 | 	cmp	local04, arg04 wz
16558     CC 00 90 AD |  if_e	jmp	#LR__1872
1655c     50 00 00 FF 
16560     F0 E4 05 F1 | 	add	objptr, ##41200
16564     F2 12 02 F6 | 	mov	arg01, objptr
16568     38 E4 85 F1 | 	sub	objptr, #56
1656c     F2 14 02 FB | 	rdlong	arg02, objptr
16570     18 16 06 F6 | 	mov	arg03, #24
16574     44 00 00 FF 
16578     EC E5 85 F1 | 	sub	objptr, ##35308
1657c     54 AA B0 FD | 	call	#_psram_spin2_read1
16580     3B 00 00 FF 
16584     B0 E5 05 F1 | 	add	objptr, ##30640
16588     F2 12 02 F6 | 	mov	arg01, objptr
1658c     09 00 00 FF 
16590     3C E4 05 F1 | 	add	objptr, ##4668
16594     F2 14 02 FB | 	rdlong	arg02, objptr
16598     0B 00 00 FF 
1659c     54 E4 85 F1 | 	sub	objptr, ##5716
165a0     F2 2C 02 FB | 	rdlong	local04, objptr
165a4     01 2C 66 F0 | 	shl	local04, #1
165a8     16 15 02 F1 | 	add	arg02, local04
165ac     0B 00 00 FF 
165b0     94 E4 05 F1 | 	add	objptr, ##5780
165b4     F2 16 02 FB | 	rdlong	arg03, objptr
165b8     40 E4 85 F1 | 	sub	objptr, #64
165bc     F2 2C 02 FB | 	rdlong	local04, objptr
165c0     16 17 82 F1 | 	sub	arg03, local04
165c4     44 00 00 FF 
165c8     EC E5 85 F1 | 	sub	objptr, ##35308
165cc     04 AA B0 FD | 	call	#_psram_spin2_read1
165d0     45 00 00 FF 
165d4     2C E4 05 F1 | 	add	objptr, ##35372
165d8     F2 2C 02 FB | 	rdlong	local04, objptr
165dc     40 E4 85 F1 | 	sub	objptr, #64
165e0     F2 14 02 FB | 	rdlong	arg02, objptr
165e4     0A 2D 82 F1 | 	sub	local04, arg02
165e8     0B 00 00 FF 
165ec     54 E4 85 F1 | 	sub	objptr, ##5716
165f0     F2 14 02 FB | 	rdlong	arg02, objptr
165f4     0A 2D 12 FD | 	qdiv	local04, arg02
165f8     05 00 00 FF 
165fc     18 E4 05 F1 | 	add	objptr, ##2584
16600     18 2C 62 FD | 	getqx	local04
16604     03 2C 86 F1 | 	sub	local04, #3
16608     F2 2C 62 FC | 	wrlong	local04, objptr
1660c     06 00 00 FF 
16610     3C E4 05 F1 | 	add	objptr, ##3132
16614     F2 2C 02 FB | 	rdlong	local04, objptr
16618     08 E4 05 F1 | 	add	objptr, #8
1661c     F2 2C 62 FC | 	wrlong	local04, objptr
16620     50 00 00 FF 
16624     C0 E4 85 F1 | 	sub	objptr, ##41152
16628                 | LR__1872
16628     50 00 00 FF 
1662c     04 E5 05 F1 | 	add	objptr, ##41220
16630     F2 2C 02 FB | 	rdlong	local04, objptr
16634     4C E4 85 F1 | 	sub	objptr, #76
16638     F2 2C 62 FC | 	wrlong	local04, objptr
1663c     04 E4 05 F1 | 	add	objptr, #4
16640     F2 12 02 FB | 	rdlong	arg01, objptr
16644     50 00 00 FF 
16648     BC E4 85 F1 | 	sub	objptr, ##41148
1664c     3C 51 BF FD | 	call	#_execute_line
16650     50 00 00 FF 
16654     BC E4 05 F1 | 	add	objptr, ##41148
16658     F2 FA 61 FC | 	wrlong	result1, objptr
1665c     04 E4 85 F1 | 	sub	objptr, #4
16660     F2 2C 02 FB | 	rdlong	local04, objptr
16664     50 00 00 FF 
16668     B8 E4 85 F1 | 	sub	objptr, ##41144
1666c     FF FF 3F FF 
16670     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
16674     30 00 90 AD |  if_e	jmp	#LR__1874
16678     E0 12 06 F6 | 	mov	arg01, #224
1667c     E4 AC B0 FD | 	call	#_usbnew_spin2_keystate
16680     00 FA 0D F2 | 	cmp	result1, #0 wz
16684     10 00 90 5D |  if_ne	jmp	#LR__1873
16688     E4 12 06 F6 | 	mov	arg01, #228
1668c     D4 AC B0 FD | 	call	#_usbnew_spin2_keystate
16690     00 FA 0D F2 | 	cmp	result1, #0 wz
16694     A0 FE 9F AD |  if_e	jmp	#LR__1871
16698                 | LR__1873
16698     06 12 06 F6 | 	mov	arg01, #6
1669c     C4 AC B0 FD | 	call	#_usbnew_spin2_keystate
166a0     00 FA 0D F2 | 	cmp	result1, #0 wz
166a4     90 FE 9F AD |  if_e	jmp	#LR__1871
166a8                 | LR__1874
166a8                 | '   ''do whatever kbm.peek_latest_key()=$106 
166a8                 | ' if runptr<>$7FFF_FFFF then 
166a8     50 00 00 FF 
166ac     B8 E4 05 F1 | 	add	objptr, ##41144
166b0     F2 2C 02 FB | 	rdlong	local04, objptr
166b4     50 00 00 FF 
166b8     B8 E4 85 F1 | 	sub	objptr, ##41144
166bc     FF FF 3F FF 
166c0     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
166c4     90 00 90 AD |  if_e	jmp	#LR__1875
166c8                 | '   print: print "Stopped at line ";runheader(0) 
166c8     00 12 06 F6 | 	mov	arg01, #0
166cc     70 12 B1 FD | 	call	#__system___getiolock_0574
166d0     FD 12 02 F6 | 	mov	arg01, result1
166d4     3C B5 B0 FD | 	call	#__system___lockmem
166d8     00 12 06 F6 | 	mov	arg01, #0
166dc     0A 14 06 F6 | 	mov	arg02, #10
166e0     00 16 06 F6 | 	mov	arg03, #0
166e4     C8 C1 B0 FD | 	call	#__system___basic_print_char
166e8     00 12 06 F6 | 	mov	arg01, #0
166ec     50 12 B1 FD | 	call	#__system___getiolock_0574
166f0     FD 00 68 FC | 	wrlong	#0, result1
166f4     00 12 06 F6 | 	mov	arg01, #0
166f8     44 12 B1 FD | 	call	#__system___getiolock_0574
166fc     FD 12 02 F6 | 	mov	arg01, result1
16700     10 B5 B0 FD | 	call	#__system___lockmem
16704     90 01 00 FF 
16708     79 15 06 F6 | 	mov	arg02, ##@LR__5635
1670c     00 12 06 F6 | 	mov	arg01, #0
16710     00 16 06 F6 | 	mov	arg03, #0
16714     F0 C1 B0 FD | 	call	#__system___basic_print_string
16718     50 00 00 FF 
1671c     F0 E4 05 F1 | 	add	objptr, ##41200
16720     F2 14 02 FB | 	rdlong	arg02, objptr
16724     50 00 00 FF 
16728     F0 E4 85 F1 | 	sub	objptr, ##41200
1672c     00 12 06 F6 | 	mov	arg01, #0
16730     00 16 06 F6 | 	mov	arg03, #0
16734     0A 18 06 F6 | 	mov	arg04, #10
16738     50 C2 B0 FD | 	call	#__system___basic_print_unsigned
1673c     00 12 06 F6 | 	mov	arg01, #0
16740     0A 14 06 F6 | 	mov	arg02, #10
16744     00 16 06 F6 | 	mov	arg03, #0
16748     64 C1 B0 FD | 	call	#__system___basic_print_char
1674c     00 12 06 F6 | 	mov	arg01, #0
16750     EC 11 B1 FD | 	call	#__system___getiolock_0574
16754     FD 00 68 FC | 	wrlong	#0, result1
16758                 | LR__1875
16758     50 00 00 FF 
1675c     EC E4 05 F1 | 	add	objptr, ##41196
16760     F2 00 68 FC | 	wrlong	#0, objptr
16764     06 00 00 FF 
16768     6C E4 85 F1 | 	sub	objptr, ##3180
1676c     F2 26 62 FC | 	wrlong	local01, objptr
16770     06 00 00 FF 
16774     38 E4 05 F1 | 	add	objptr, ##3128
16778     F2 28 62 FC | 	wrlong	local02, objptr
1677c     04 E4 05 F1 | 	add	objptr, #4
16780     F2 2A 62 FC | 	wrlong	local03, objptr
16784     50 00 00 FF 
16788     BC E4 85 F1 | 	sub	objptr, ##41148
1678c     11 12 06 F6 | 	mov	arg01, #17
16790     08 14 06 F6 | 	mov	arg02, #8
16794     10 16 06 F6 | 	mov	arg03, #16
16798     1C 8B B0 FD | 	call	#_hg010b_spin2_setspritesize
1679c     10 12 06 F6 | 	mov	arg01, #16
167a0     20 14 06 F6 | 	mov	arg02, #32
167a4     20 16 06 F6 | 	mov	arg03, #32
167a8     0C 8B B0 FD | 	call	#_hg010b_spin2_setspritesize
167ac                 | LR__1876
167ac     A7 F0 03 F6 | 	mov	ptra, fp
167b0     B2 00 A0 FD | 	call	#popregs_
167b4                 | _do_run_ret
167b4     2D 00 64 FD | 	ret
167b8                 | 
167b8                 | ' 
167b8                 | ' ' ------------------ save
167b8                 | ' 
167b8                 | ' sub do_save                        
167b8                 | _do_save
167b8     04 4A 05 F6 | 	mov	COUNT_, #4
167bc     A8 00 A0 FD | 	call	#pushregs_
167c0     B8 F0 07 F1 | 	add	ptra, #184
167c4     4A 00 00 FF 
167c8     80 E4 05 F1 | 	add	objptr, ##38016
167cc     F2 26 02 FB | 	rdlong	local01, objptr
167d0     13 29 02 F6 | 	mov	local02, local01
167d4     01 28 66 F0 | 	shl	local02, #1
167d8     13 29 02 F1 | 	add	local02, local01
167dc     02 28 66 F0 | 	shl	local02, #2
167e0     03 00 00 FF 
167e4     04 E4 85 F1 | 	sub	objptr, ##1540
167e8     F2 28 02 F1 | 	add	local02, objptr
167ec     14 2B 02 FB | 	rdlong	local03, local02
167f0     10 4E 05 F1 | 	add	fp, #16
167f4     A7 2A 62 FC | 	wrlong	local03, fp
167f8                 | ' 
167f8                 | ' numpar=compiledline(lineptr_e).result.uresult
167f8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
167f8     10 4E 85 F1 | 	sub	fp, #16
167fc     01 2A 56 F2 | 	cmps	local03, #1 wc
16800     47 00 00 FF 
16804     7C E4 85 F1 | 	sub	objptr, ##36476
16808     20 00 90 CD |  if_b	jmp	#LR__1880
1680c     80 50 BF FD | 	call	#_pop
16810     A7 FA 61 FC | 	wrlong	result1, fp
16814     04 4E 05 F1 | 	add	fp, #4
16818     A7 FC 61 FC | 	wrlong	result2, fp
1681c     04 4E 05 F1 | 	add	fp, #4
16820     A7 FE 61 FC | 	wrlong	result3, fp
16824     08 4E 85 F1 | 	sub	fp, #8
16828     24 00 90 FD | 	jmp	#LR__1881
1682c                 | LR__1880
1682c     51 00 00 FF 
16830     D8 E5 05 F1 | 	add	objptr, ##41944
16834     F2 2A 02 FB | 	rdlong	local03, objptr
16838     51 00 00 FF 
1683c     D8 E5 85 F1 | 	sub	objptr, ##41944
16840     A7 2A 62 FC | 	wrlong	local03, fp
16844     08 4E 05 F1 | 	add	fp, #8
16848     A7 3E 68 FC | 	wrlong	#31, fp
1684c     08 4E 85 F1 | 	sub	fp, #8
16850                 | LR__1881
16850                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
16850     4A 00 00 FF 
16854     88 E4 05 F1 | 	add	objptr, ##38024
16858     F2 12 02 FB | 	rdlong	arg01, objptr
1685c     4A 00 00 FF 
16860     88 E4 85 F1 | 	sub	objptr, ##38024
16864     48 7D B0 FD | 	call	#_pslpeek
16868     FF FF 7F FF 
1686c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
16870     10 00 90 5D |  if_ne	jmp	#LR__1882
16874     1B 12 06 F6 | 	mov	arg01, #27
16878     00 14 06 F6 | 	mov	arg02, #0
1687c     74 7A B0 FD | 	call	#_printerror
16880     CC 02 90 FD | 	jmp	#LR__1888
16884                 | LR__1882
16884                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
16884     08 4E 05 F1 | 	add	fp, #8
16888     A7 2A 02 FB | 	rdlong	local03, fp
1688c     08 4E 85 F1 | 	sub	fp, #8
16890     2B 2A 0E F2 | 	cmp	local03, #43 wz
16894     18 00 90 5D |  if_ne	jmp	#LR__1883
16898     A7 12 02 FB | 	rdlong	arg01, fp
1689c     68 51 BF FD | 	call	#_convertstring
168a0     A7 FA 61 FC | 	wrlong	result1, fp
168a4     08 4E 05 F1 | 	add	fp, #8
168a8     A7 3E 68 FC | 	wrlong	#31, fp
168ac     08 4E 85 F1 | 	sub	fp, #8
168b0                 | LR__1883
168b0                 | ' if t1.result_type=result_string then
168b0     08 4E 05 F1 | 	add	fp, #8
168b4     A7 2A 02 FB | 	rdlong	local03, fp
168b8     08 4E 85 F1 | 	sub	fp, #8
168bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
168c0     8C 02 90 5D |  if_ne	jmp	#LR__1887
168c4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
168c4     A7 12 02 FB | 	rdlong	arg01, fp
168c8     90 01 00 FF 
168cc     8A 15 06 F6 | 	mov	arg02, ##@LR__5636
168d0     68 B3 B0 FD | 	call	#__system___string_cmp
168d4     00 FA 0D F2 | 	cmp	result1, #0 wz
168d8     51 00 00 AF 
168dc     D8 E5 05 A1 |  if_e	add	objptr, ##41944
168e0     F2 2A 02 AB |  if_e	rdlong	local03, objptr
168e4     A7 2A 62 AC |  if_e	wrlong	local03, fp
168e8     51 00 00 AF 
168ec     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
168f0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
168f4     51 00 00 5F 
168f8     D8 E5 05 51 |  if_ne	add	objptr, ##41944
168fc     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
16900     51 00 00 5F 
16904     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
16908                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
16908     09 12 06 F6 | 	mov	arg01, #9
1690c     A0 05 B1 FD | 	call	#__system__close
16910     09 2A 06 F6 | 	mov	local03, #9
16914     4A 00 00 FF 
16918     94 E4 05 F1 | 	add	objptr, ##38036
1691c     F2 12 02 FB | 	rdlong	arg01, objptr
16920     4A 00 00 FF 
16924     94 E4 85 F1 | 	sub	objptr, ##38036
16928     90 01 00 FF 
1692c     8B 15 06 F6 | 	mov	arg02, ##@LR__5637
16930     3C B3 B0 FD | 	call	#__system___string_concat
16934     FD 12 02 F6 | 	mov	arg01, result1
16938     A7 14 02 FB | 	rdlong	arg02, fp
1693c     30 B3 B0 FD | 	call	#__system___string_concat
16940     FD 14 02 F6 | 	mov	arg02, result1
16944     15 13 02 F6 | 	mov	arg01, local03
16948     0D 16 06 F6 | 	mov	arg03, #13
1694c     C8 BE B0 FD | 	call	#__system___basic_open_string
16950     4A 00 00 FF 
16954     88 E4 05 F1 | 	add	objptr, ##38024
16958     F2 2A 02 FB | 	rdlong	local03, objptr
1695c     4A 00 00 FF 
16960     88 E4 85 F1 | 	sub	objptr, ##38024
16964     B0 4E 05 F1 | 	add	fp, #176
16968     A7 2A 62 FC | 	wrlong	local03, fp
1696c     B0 4E 85 F1 | 	sub	fp, #176
16970                 | '   saveptr=programstart
16970                 | '   do
16970                 | LR__1884
16970     14 4E 05 F1 | 	add	fp, #20
16974     A7 12 02 F6 | 	mov	arg01, fp
16978     9C 4E 05 F1 | 	add	fp, #156
1697c     A7 14 02 FB | 	rdlong	arg02, fp
16980     B0 4E 85 F1 | 	sub	fp, #176
16984     18 16 06 F6 | 	mov	arg03, #24
16988     0B 00 00 FF 
1698c     CC E4 05 F1 | 	add	objptr, ##5836
16990     40 A6 B0 FD | 	call	#_psram_spin2_read1
16994     2C 4E 05 F1 | 	add	fp, #44
16998     A7 12 02 F6 | 	mov	arg01, fp
1699c     10 4E 85 F1 | 	sub	fp, #16
169a0     A7 14 02 FB | 	rdlong	arg02, fp
169a4     04 4E 05 F1 | 	add	fp, #4
169a8     A7 16 02 FB | 	rdlong	arg03, fp
169ac     20 4E 85 F1 | 	sub	fp, #32
169b0     20 A6 B0 FD | 	call	#_psram_spin2_read1
169b4     0B 00 00 FF 
169b8     CC E4 85 F1 | 	sub	objptr, ##5836
169bc     90 01 00 FF 
169c0     8D 2B 06 F6 | 	mov	local03, ##@LR__5638
169c4     AC 4E 05 F1 | 	add	fp, #172
169c8     A7 2A 62 FC | 	wrlong	local03, fp
169cc                 | '     psram.read1(varptr(header(0)),saveptr,24)
169cc                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
169cc                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
169cc     A0 4E 85 F1 | 	sub	fp, #160
169d0     A7 02 68 FC | 	wrlong	#1, fp
169d4     14 4E 05 F1 | 	add	fp, #20
169d8     A7 2C 02 FB | 	rdlong	local04, fp
169dc     20 4E 85 F1 | 	sub	fp, #32
169e0     01 2C 06 F1 | 	add	local04, #1
169e4                 | LR__1885
169e4     0C 4E 05 F1 | 	add	fp, #12
169e8     A7 2A 02 FB | 	rdlong	local03, fp
169ec     0C 4E 85 F1 | 	sub	fp, #12
169f0     16 2B 52 F2 | 	cmps	local03, local04 wc
169f4     54 00 90 3D |  if_ae	jmp	#LR__1886
169f8     AC 4E 05 F1 | 	add	fp, #172
169fc     A7 26 02 FB | 	rdlong	local01, fp
16a00     A0 4E 85 F1 | 	sub	fp, #160
16a04     A7 2A 02 FB | 	rdlong	local03, fp
16a08     01 2A 86 F1 | 	sub	local03, #1
16a0c     20 4E 05 F1 | 	add	fp, #32
16a10     A7 2A 02 F1 | 	add	local03, fp
16a14     15 13 C2 FA | 	rdbyte	arg01, local03
16a18     2C 4E 85 F1 | 	sub	fp, #44
16a1c     34 D4 B0 FD | 	call	#__system__Chr_S
16a20     FD 14 02 F6 | 	mov	arg02, result1
16a24     13 13 02 F6 | 	mov	arg01, local01
16a28     44 B2 B0 FD | 	call	#__system___string_concat
16a2c     AC 4E 05 F1 | 	add	fp, #172
16a30     A7 FA 61 FC | 	wrlong	result1, fp
16a34     A0 4E 85 F1 | 	sub	fp, #160
16a38     A7 2A 02 FB | 	rdlong	local03, fp
16a3c     01 2A 06 F1 | 	add	local03, #1
16a40     A7 2A 62 FC | 	wrlong	local03, fp
16a44     0C 4E 85 F1 | 	sub	fp, #12
16a48     98 FF 9F FD | 	jmp	#LR__1885
16a4c                 | LR__1886
16a4c                 | '     print #9, saveline$
16a4c     09 12 06 F6 | 	mov	arg01, #9
16a50     EC 0E B1 FD | 	call	#__system___getiolock_0574
16a54     FD 12 02 F6 | 	mov	arg01, result1
16a58     B8 B1 B0 FD | 	call	#__system___lockmem
16a5c     AC 4E 05 F1 | 	add	fp, #172
16a60     A7 14 02 FB | 	rdlong	arg02, fp
16a64     AC 4E 85 F1 | 	sub	fp, #172
16a68     09 12 06 F6 | 	mov	arg01, #9
16a6c     00 16 06 F6 | 	mov	arg03, #0
16a70     94 BE B0 FD | 	call	#__system___basic_print_string
16a74     09 12 06 F6 | 	mov	arg01, #9
16a78     0A 14 06 F6 | 	mov	arg02, #10
16a7c     00 16 06 F6 | 	mov	arg03, #0
16a80     2C BE B0 FD | 	call	#__system___basic_print_char
16a84     09 12 06 F6 | 	mov	arg01, #9
16a88     B4 0E B1 FD | 	call	#__system___getiolock_0574
16a8c     FD 00 68 FC | 	wrlong	#0, result1
16a90     28 4E 05 F1 | 	add	fp, #40
16a94     A7 2A 02 FB | 	rdlong	local03, fp
16a98     88 4E 05 F1 | 	add	fp, #136
16a9c     A7 2A 62 FC | 	wrlong	local03, fp
16aa0     88 4E 85 F1 | 	sub	fp, #136
16aa4     A7 2A 02 FB | 	rdlong	local03, fp
16aa8     28 4E 85 F1 | 	sub	fp, #40
16aac     FF FF 3F FF 
16ab0     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
16ab4     B8 FE 9F 5D |  if_ne	jmp	#LR__1884
16ab8                 | '   close #9  
16ab8     09 12 06 F6 | 	mov	arg01, #9
16abc     F0 03 B1 FD | 	call	#__system__close
16ac0                 | '   print "Saved as ";currentdir$+"/"+loadname
16ac0     00 12 06 F6 | 	mov	arg01, #0
16ac4     78 0E B1 FD | 	call	#__system___getiolock_0574
16ac8     FD 12 02 F6 | 	mov	arg01, result1
16acc     44 B1 B0 FD | 	call	#__system___lockmem
16ad0     90 01 00 FF 
16ad4     8E 15 06 F6 | 	mov	arg02, ##@LR__5639
16ad8     00 12 06 F6 | 	mov	arg01, #0
16adc     00 16 06 F6 | 	mov	arg03, #0
16ae0     24 BE B0 FD | 	call	#__system___basic_print_string
16ae4     00 28 06 F6 | 	mov	local02, #0
16ae8     4A 00 00 FF 
16aec     94 E4 05 F1 | 	add	objptr, ##38036
16af0     F2 12 02 FB | 	rdlong	arg01, objptr
16af4     4A 00 00 FF 
16af8     94 E4 85 F1 | 	sub	objptr, ##38036
16afc     90 01 00 FF 
16b00     98 15 06 F6 | 	mov	arg02, ##@LR__5640
16b04     68 B1 B0 FD | 	call	#__system___string_concat
16b08     FD 12 02 F6 | 	mov	arg01, result1
16b0c     51 00 00 FF 
16b10     D8 E5 05 F1 | 	add	objptr, ##41944
16b14     F2 14 02 FB | 	rdlong	arg02, objptr
16b18     51 00 00 FF 
16b1c     D8 E5 85 F1 | 	sub	objptr, ##41944
16b20     4C B1 B0 FD | 	call	#__system___string_concat
16b24     FD 14 02 F6 | 	mov	arg02, result1
16b28     14 13 02 F6 | 	mov	arg01, local02
16b2c     00 16 06 F6 | 	mov	arg03, #0
16b30     D4 BD B0 FD | 	call	#__system___basic_print_string
16b34     00 12 06 F6 | 	mov	arg01, #0
16b38     0A 14 06 F6 | 	mov	arg02, #10
16b3c     00 16 06 F6 | 	mov	arg03, #0
16b40     6C BD B0 FD | 	call	#__system___basic_print_char
16b44     00 12 06 F6 | 	mov	arg01, #0
16b48     F4 0D B1 FD | 	call	#__system___getiolock_0574
16b4c     FD 00 68 FC | 	wrlong	#0, result1
16b50                 | LR__1887
16b50                 | LR__1888
16b50     A7 F0 03 F6 | 	mov	ptra, fp
16b54     B2 00 A0 FD | 	call	#popregs_
16b58                 | _do_save_ret
16b58     2D 00 64 FD | 	ret
16b5c                 | 
16b5c                 | ' 
16b5c                 | ' ' ------------------ setdelay
16b5c                 | ' 
16b5c                 | ' sub do_setdelay
16b5c                 | _do_setdelay
16b5c     02 4A 05 F6 | 	mov	COUNT_, #2
16b60     A8 00 A0 FD | 	call	#pushregs_
16b64     18 F0 07 F1 | 	add	ptra, #24
16b68     24 4D BF FD | 	call	#_pop
16b6c     FD 12 02 F6 | 	mov	arg01, result1
16b70     FE 26 02 F6 | 	mov	local01, result2
16b74     FF 28 02 F6 | 	mov	local02, result3
16b78     A7 12 62 FC | 	wrlong	arg01, fp
16b7c     04 4E 05 F1 | 	add	fp, #4
16b80     A7 26 62 FC | 	wrlong	local01, fp
16b84     04 4E 05 F1 | 	add	fp, #4
16b88     A7 28 62 FC | 	wrlong	local02, fp
16b8c     08 4E 85 F1 | 	sub	fp, #8
16b90     FC 4C BF FD | 	call	#_pop
16b94     FD 28 02 F6 | 	mov	local02, result1
16b98     0C 4E 05 F1 | 	add	fp, #12
16b9c     A7 28 62 FC | 	wrlong	local02, fp
16ba0     04 4E 05 F1 | 	add	fp, #4
16ba4     A7 FC 61 FC | 	wrlong	result2, fp
16ba8     04 4E 05 F1 | 	add	fp, #4
16bac     A7 FE 61 FC | 	wrlong	result3, fp
16bb0     08 4E 85 F1 | 	sub	fp, #8
16bb4     A7 12 02 F6 | 	mov	arg01, fp
16bb8     0C 4E 85 F1 | 	sub	fp, #12
16bbc     B4 4E BF FD | 	call	#_converttoint
16bc0     FD 28 02 F6 | 	mov	local02, result1
16bc4     14 27 02 F6 | 	mov	local01, local02
16bc8     01 26 66 F0 | 	shl	local01, #1
16bcc     14 27 02 F1 | 	add	local01, local02
16bd0     03 26 66 F0 | 	shl	local01, #3
16bd4     14 00 00 FF 
16bd8     38 E5 05 F1 | 	add	objptr, ##10552
16bdc     F2 26 02 F1 | 	add	local01, objptr
16be0     A7 12 02 F6 | 	mov	arg01, fp
16be4     14 00 00 FF 
16be8     38 E5 85 F1 | 	sub	objptr, ##10552
16bec     84 4E BF FD | 	call	#_converttoint
16bf0     06 26 06 F1 | 	add	local01, #6
16bf4     13 FB 51 FC | 	wrword	result1, local01
16bf8     A7 F0 03 F6 | 	mov	ptra, fp
16bfc     B2 00 A0 FD | 	call	#popregs_
16c00                 | _do_setdelay_ret
16c00     2D 00 64 FD | 	ret
16c04                 | 
16c04                 | ' 
16c04                 | ' ' ------------------ setenv
16c04                 | ' 
16c04                 | ' sub do_setenv
16c04                 | _do_setenv
16c04     02 4A 05 F6 | 	mov	COUNT_, #2
16c08     A8 00 A0 FD | 	call	#pushregs_
16c0c     18 F0 07 F1 | 	add	ptra, #24
16c10     7C 4C BF FD | 	call	#_pop
16c14     FD 12 02 F6 | 	mov	arg01, result1
16c18     FE 26 02 F6 | 	mov	local01, result2
16c1c     FF 28 02 F6 | 	mov	local02, result3
16c20     A7 12 62 FC | 	wrlong	arg01, fp
16c24     04 4E 05 F1 | 	add	fp, #4
16c28     A7 26 62 FC | 	wrlong	local01, fp
16c2c     04 4E 05 F1 | 	add	fp, #4
16c30     A7 28 62 FC | 	wrlong	local02, fp
16c34     08 4E 85 F1 | 	sub	fp, #8
16c38     54 4C BF FD | 	call	#_pop
16c3c     FD 28 02 F6 | 	mov	local02, result1
16c40     0C 4E 05 F1 | 	add	fp, #12
16c44     A7 28 62 FC | 	wrlong	local02, fp
16c48     04 4E 05 F1 | 	add	fp, #4
16c4c     A7 FC 61 FC | 	wrlong	result2, fp
16c50     04 4E 05 F1 | 	add	fp, #4
16c54     A7 FE 61 FC | 	wrlong	result3, fp
16c58     08 4E 85 F1 | 	sub	fp, #8
16c5c     A7 12 02 F6 | 	mov	arg01, fp
16c60     0C 4E 85 F1 | 	sub	fp, #12
16c64     0C 4E BF FD | 	call	#_converttoint
16c68     FD 28 02 F6 | 	mov	local02, result1
16c6c     14 27 02 F6 | 	mov	local01, local02
16c70     01 26 66 F0 | 	shl	local01, #1
16c74     14 27 02 F1 | 	add	local01, local02
16c78     03 26 66 F0 | 	shl	local01, #3
16c7c     14 00 00 FF 
16c80     38 E5 05 F1 | 	add	objptr, ##10552
16c84     F2 26 02 F1 | 	add	local01, objptr
16c88     A7 12 02 F6 | 	mov	arg01, fp
16c8c     14 00 00 FF 
16c90     38 E5 85 F1 | 	sub	objptr, ##10552
16c94     DC 4D BF FD | 	call	#_converttoint
16c98     05 26 06 F1 | 	add	local01, #5
16c9c     13 FB 41 FC | 	wrbyte	result1, local01
16ca0     A7 F0 03 F6 | 	mov	ptra, fp
16ca4     B2 00 A0 FD | 	call	#popregs_
16ca8                 | _do_setenv_ret
16ca8     2D 00 64 FD | 	ret
16cac                 | 
16cac                 | ' 
16cac                 | ' ' ------------------ setlen
16cac                 | ' 
16cac                 | ' sub do_setlen
16cac                 | _do_setlen
16cac     02 4A 05 F6 | 	mov	COUNT_, #2
16cb0     A8 00 A0 FD | 	call	#pushregs_
16cb4     18 F0 07 F1 | 	add	ptra, #24
16cb8     D4 4B BF FD | 	call	#_pop
16cbc     FD 12 02 F6 | 	mov	arg01, result1
16cc0     FE 26 02 F6 | 	mov	local01, result2
16cc4     FF 28 02 F6 | 	mov	local02, result3
16cc8     A7 12 62 FC | 	wrlong	arg01, fp
16ccc     04 4E 05 F1 | 	add	fp, #4
16cd0     A7 26 62 FC | 	wrlong	local01, fp
16cd4     04 4E 05 F1 | 	add	fp, #4
16cd8     A7 28 62 FC | 	wrlong	local02, fp
16cdc     08 4E 85 F1 | 	sub	fp, #8
16ce0     AC 4B BF FD | 	call	#_pop
16ce4     FD 28 02 F6 | 	mov	local02, result1
16ce8     0C 4E 05 F1 | 	add	fp, #12
16cec     A7 28 62 FC | 	wrlong	local02, fp
16cf0     04 4E 05 F1 | 	add	fp, #4
16cf4     A7 FC 61 FC | 	wrlong	result2, fp
16cf8     04 4E 05 F1 | 	add	fp, #4
16cfc     A7 FE 61 FC | 	wrlong	result3, fp
16d00     08 4E 85 F1 | 	sub	fp, #8
16d04     A7 12 02 F6 | 	mov	arg01, fp
16d08     0C 4E 85 F1 | 	sub	fp, #12
16d0c     64 4D BF FD | 	call	#_converttoint
16d10     FD 28 02 F6 | 	mov	local02, result1
16d14     14 27 02 F6 | 	mov	local01, local02
16d18     01 26 66 F0 | 	shl	local01, #1
16d1c     14 27 02 F1 | 	add	local01, local02
16d20     03 26 66 F0 | 	shl	local01, #3
16d24     14 00 00 FF 
16d28     38 E5 05 F1 | 	add	objptr, ##10552
16d2c     F2 26 02 F1 | 	add	local01, objptr
16d30     A7 12 02 F6 | 	mov	arg01, fp
16d34     14 00 00 FF 
16d38     38 E5 85 F1 | 	sub	objptr, ##10552
16d3c     F0 4D BF FD | 	call	#_converttofloat
16d40     08 26 06 F1 | 	add	local01, #8
16d44     13 FB 61 FC | 	wrlong	result1, local01
16d48     A7 F0 03 F6 | 	mov	ptra, fp
16d4c     B2 00 A0 FD | 	call	#popregs_
16d50                 | _do_setlen_ret
16d50     2D 00 64 FD | 	ret
16d54                 | 
16d54                 | ' 
16d54                 | ' ' ------------------ setpan
16d54                 | ' 
16d54                 | ' sub do_setpan
16d54                 | _do_setpan
16d54     02 4A 05 F6 | 	mov	COUNT_, #2
16d58     A8 00 A0 FD | 	call	#pushregs_
16d5c     18 F0 07 F1 | 	add	ptra, #24
16d60     2C 4B BF FD | 	call	#_pop
16d64     FD 12 02 F6 | 	mov	arg01, result1
16d68     FE 26 02 F6 | 	mov	local01, result2
16d6c     FF 28 02 F6 | 	mov	local02, result3
16d70     A7 12 62 FC | 	wrlong	arg01, fp
16d74     04 4E 05 F1 | 	add	fp, #4
16d78     A7 26 62 FC | 	wrlong	local01, fp
16d7c     04 4E 05 F1 | 	add	fp, #4
16d80     A7 28 62 FC | 	wrlong	local02, fp
16d84     08 4E 85 F1 | 	sub	fp, #8
16d88     04 4B BF FD | 	call	#_pop
16d8c     FD 28 02 F6 | 	mov	local02, result1
16d90     0C 4E 05 F1 | 	add	fp, #12
16d94     A7 28 62 FC | 	wrlong	local02, fp
16d98     04 4E 05 F1 | 	add	fp, #4
16d9c     A7 FC 61 FC | 	wrlong	result2, fp
16da0     04 4E 05 F1 | 	add	fp, #4
16da4     A7 FE 61 FC | 	wrlong	result3, fp
16da8     08 4E 85 F1 | 	sub	fp, #8
16dac     A7 12 02 F6 | 	mov	arg01, fp
16db0     0C 4E 85 F1 | 	sub	fp, #12
16db4     BC 4C BF FD | 	call	#_converttoint
16db8     FD 28 02 F6 | 	mov	local02, result1
16dbc     14 27 02 F6 | 	mov	local01, local02
16dc0     01 26 66 F0 | 	shl	local01, #1
16dc4     14 27 02 F1 | 	add	local01, local02
16dc8     03 26 66 F0 | 	shl	local01, #3
16dcc     14 00 00 FF 
16dd0     38 E5 05 F1 | 	add	objptr, ##10552
16dd4     F2 26 02 F1 | 	add	local01, objptr
16dd8     A7 12 02 F6 | 	mov	arg01, fp
16ddc     14 00 00 FF 
16de0     38 E5 85 F1 | 	sub	objptr, ##10552
16de4     48 4D BF FD | 	call	#_converttofloat
16de8     10 26 06 F1 | 	add	local01, #16
16dec     13 FB 61 FC | 	wrlong	result1, local01
16df0     A7 F0 03 F6 | 	mov	ptra, fp
16df4     B2 00 A0 FD | 	call	#popregs_
16df8                 | _do_setpan_ret
16df8     2D 00 64 FD | 	ret
16dfc                 | 
16dfc                 | ' 
16dfc                 | ' ' ------------------ setsustain
16dfc                 | ' 
16dfc                 | ' sub do_setsustain
16dfc                 | _do_setsustain
16dfc     02 4A 05 F6 | 	mov	COUNT_, #2
16e00     A8 00 A0 FD | 	call	#pushregs_
16e04     18 F0 07 F1 | 	add	ptra, #24
16e08     84 4A BF FD | 	call	#_pop
16e0c     FD 12 02 F6 | 	mov	arg01, result1
16e10     FE 26 02 F6 | 	mov	local01, result2
16e14     FF 28 02 F6 | 	mov	local02, result3
16e18     A7 12 62 FC | 	wrlong	arg01, fp
16e1c     04 4E 05 F1 | 	add	fp, #4
16e20     A7 26 62 FC | 	wrlong	local01, fp
16e24     04 4E 05 F1 | 	add	fp, #4
16e28     A7 28 62 FC | 	wrlong	local02, fp
16e2c     08 4E 85 F1 | 	sub	fp, #8
16e30     5C 4A BF FD | 	call	#_pop
16e34     FD 28 02 F6 | 	mov	local02, result1
16e38     0C 4E 05 F1 | 	add	fp, #12
16e3c     A7 28 62 FC | 	wrlong	local02, fp
16e40     04 4E 05 F1 | 	add	fp, #4
16e44     A7 FC 61 FC | 	wrlong	result2, fp
16e48     04 4E 05 F1 | 	add	fp, #4
16e4c     A7 FE 61 FC | 	wrlong	result3, fp
16e50     08 4E 85 F1 | 	sub	fp, #8
16e54     A7 12 02 F6 | 	mov	arg01, fp
16e58     0C 4E 85 F1 | 	sub	fp, #12
16e5c     14 4C BF FD | 	call	#_converttoint
16e60     FD 28 02 F6 | 	mov	local02, result1
16e64     14 27 02 F6 | 	mov	local01, local02
16e68     01 26 66 F0 | 	shl	local01, #1
16e6c     14 27 02 F1 | 	add	local01, local02
16e70     03 26 66 F0 | 	shl	local01, #3
16e74     14 00 00 FF 
16e78     38 E5 05 F1 | 	add	objptr, ##10552
16e7c     F2 26 02 F1 | 	add	local01, objptr
16e80     A7 12 02 F6 | 	mov	arg01, fp
16e84     14 00 00 FF 
16e88     38 E5 85 F1 | 	sub	objptr, ##10552
16e8c     E4 4B BF FD | 	call	#_converttoint
16e90     14 26 06 F1 | 	add	local01, #20
16e94     13 FB 51 FC | 	wrword	result1, local01
16e98     A7 F0 03 F6 | 	mov	ptra, fp
16e9c     B2 00 A0 FD | 	call	#popregs_
16ea0                 | _do_setsustain_ret
16ea0     2D 00 64 FD | 	ret
16ea4                 | 
16ea4                 | ' 
16ea4                 | ' ' ------------------ setvol
16ea4                 | ' 
16ea4                 | ' sub do_setvol
16ea4                 | _do_setvol
16ea4     02 4A 05 F6 | 	mov	COUNT_, #2
16ea8     A8 00 A0 FD | 	call	#pushregs_
16eac     18 F0 07 F1 | 	add	ptra, #24
16eb0     DC 49 BF FD | 	call	#_pop
16eb4     FD 12 02 F6 | 	mov	arg01, result1
16eb8     FE 26 02 F6 | 	mov	local01, result2
16ebc     FF 28 02 F6 | 	mov	local02, result3
16ec0     A7 12 62 FC | 	wrlong	arg01, fp
16ec4     04 4E 05 F1 | 	add	fp, #4
16ec8     A7 26 62 FC | 	wrlong	local01, fp
16ecc     04 4E 05 F1 | 	add	fp, #4
16ed0     A7 28 62 FC | 	wrlong	local02, fp
16ed4     08 4E 85 F1 | 	sub	fp, #8
16ed8     B4 49 BF FD | 	call	#_pop
16edc     FD 28 02 F6 | 	mov	local02, result1
16ee0     0C 4E 05 F1 | 	add	fp, #12
16ee4     A7 28 62 FC | 	wrlong	local02, fp
16ee8     04 4E 05 F1 | 	add	fp, #4
16eec     A7 FC 61 FC | 	wrlong	result2, fp
16ef0     04 4E 05 F1 | 	add	fp, #4
16ef4     A7 FE 61 FC | 	wrlong	result3, fp
16ef8     08 4E 85 F1 | 	sub	fp, #8
16efc     A7 12 02 F6 | 	mov	arg01, fp
16f00     0C 4E 85 F1 | 	sub	fp, #12
16f04     6C 4B BF FD | 	call	#_converttoint
16f08     FD 28 02 F6 | 	mov	local02, result1
16f0c     14 27 02 F6 | 	mov	local01, local02
16f10     01 26 66 F0 | 	shl	local01, #1
16f14     14 27 02 F1 | 	add	local01, local02
16f18     03 26 66 F0 | 	shl	local01, #3
16f1c     14 00 00 FF 
16f20     38 E5 05 F1 | 	add	objptr, ##10552
16f24     F2 26 02 F1 | 	add	local01, objptr
16f28     A7 12 02 F6 | 	mov	arg01, fp
16f2c     14 00 00 FF 
16f30     38 E5 85 F1 | 	sub	objptr, ##10552
16f34     F8 4B BF FD | 	call	#_converttofloat
16f38     0C 26 06 F1 | 	add	local01, #12
16f3c     13 FB 61 FC | 	wrlong	result1, local01
16f40     A7 F0 03 F6 | 	mov	ptra, fp
16f44     B2 00 A0 FD | 	call	#popregs_
16f48                 | _do_setvol_ret
16f48     2D 00 64 FD | 	ret
16f4c                 | 
16f4c                 | ' 
16f4c                 | ' ' ------------------ setwave
16f4c                 | ' 
16f4c                 | ' sub do_setwave
16f4c                 | _do_setwave
16f4c     02 4A 05 F6 | 	mov	COUNT_, #2
16f50     A8 00 A0 FD | 	call	#pushregs_
16f54     18 F0 07 F1 | 	add	ptra, #24
16f58     34 49 BF FD | 	call	#_pop
16f5c     FD 12 02 F6 | 	mov	arg01, result1
16f60     FE 26 02 F6 | 	mov	local01, result2
16f64     FF 28 02 F6 | 	mov	local02, result3
16f68     A7 12 62 FC | 	wrlong	arg01, fp
16f6c     04 4E 05 F1 | 	add	fp, #4
16f70     A7 26 62 FC | 	wrlong	local01, fp
16f74     04 4E 05 F1 | 	add	fp, #4
16f78     A7 28 62 FC | 	wrlong	local02, fp
16f7c     08 4E 85 F1 | 	sub	fp, #8
16f80     0C 49 BF FD | 	call	#_pop
16f84     FD 28 02 F6 | 	mov	local02, result1
16f88     0C 4E 05 F1 | 	add	fp, #12
16f8c     A7 28 62 FC | 	wrlong	local02, fp
16f90     04 4E 05 F1 | 	add	fp, #4
16f94     A7 FC 61 FC | 	wrlong	result2, fp
16f98     04 4E 05 F1 | 	add	fp, #4
16f9c     A7 FE 61 FC | 	wrlong	result3, fp
16fa0     08 4E 85 F1 | 	sub	fp, #8
16fa4     A7 12 02 F6 | 	mov	arg01, fp
16fa8     0C 4E 85 F1 | 	sub	fp, #12
16fac     C4 4A BF FD | 	call	#_converttoint
16fb0     FD 28 02 F6 | 	mov	local02, result1
16fb4     14 27 02 F6 | 	mov	local01, local02
16fb8     01 26 66 F0 | 	shl	local01, #1
16fbc     14 27 02 F1 | 	add	local01, local02
16fc0     03 26 66 F0 | 	shl	local01, #3
16fc4     14 00 00 FF 
16fc8     38 E5 05 F1 | 	add	objptr, ##10552
16fcc     F2 26 02 F1 | 	add	local01, objptr
16fd0     A7 12 02 F6 | 	mov	arg01, fp
16fd4     14 00 00 FF 
16fd8     38 E5 85 F1 | 	sub	objptr, ##10552
16fdc     94 4A BF FD | 	call	#_converttoint
16fe0     04 26 06 F1 | 	add	local01, #4
16fe4     13 FB 41 FC | 	wrbyte	result1, local01
16fe8     A7 F0 03 F6 | 	mov	ptra, fp
16fec     B2 00 A0 FD | 	call	#popregs_
16ff0                 | _do_setwave_ret
16ff0     2D 00 64 FD | 	ret
16ff4                 | 
16ff4                 | ' 
16ff4                 | ' ' ------------------ shutup
16ff4                 | ' 
16ff4                 | ' sub do_shutup
16ff4                 | _do_shutup
16ff4     03 4A 05 F6 | 	mov	COUNT_, #3
16ff8     A8 00 A0 FD | 	call	#pushregs_
16ffc     18 F0 07 F1 | 	add	ptra, #24
17000     4A 00 00 FF 
17004     80 E4 05 F1 | 	add	objptr, ##38016
17008     F2 26 02 FB | 	rdlong	local01, objptr
1700c     13 29 02 F6 | 	mov	local02, local01
17010     01 28 66 F0 | 	shl	local02, #1
17014     13 29 02 F1 | 	add	local02, local01
17018     02 28 66 F0 | 	shl	local02, #2
1701c     03 00 00 FF 
17020     04 E4 85 F1 | 	sub	objptr, ##1540
17024     F2 28 02 F1 | 	add	local02, objptr
17028     14 2B 0A FB | 	rdlong	local03, local02 wz
1702c     14 4E 05 F1 | 	add	fp, #20
17030     A7 2A 62 FC | 	wrlong	local03, fp
17034                 | ' 
17034                 | ' numpar=compiledline(lineptr_e).result.uresult
17034                 | ' if numpar=0 then
17034     14 4E 85 F1 | 	sub	fp, #20
17038     47 00 00 FF 
1703c     7C E4 85 F1 | 	sub	objptr, ##36476
17040     50 00 90 5D |  if_ne	jmp	#LR__1892
17044                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
17044     10 4E 05 F1 | 	add	fp, #16
17048     A7 00 68 FC | 	wrlong	#0, fp
1704c     37 00 00 FF 
17050     10 E4 05 F1 | 	add	objptr, ##28176
17054     97 16 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
17058                 | LR__1890
17058     F2 12 02 FB | 	rdlong	arg01, objptr
1705c     A7 2A 02 FB | 	rdlong	local03, fp
17060     06 2A 66 F0 | 	shl	local03, #6
17064     15 13 02 F1 | 	add	arg01, local03
17068     14 12 06 F1 | 	add	arg01, #20
1706c     09 01 58 FC | 	wrword	#0, arg01
17070     A7 2A 02 FB | 	rdlong	local03, fp
17074     01 2A 06 F1 | 	add	local03, #1
17078     A7 2A 62 FC | 	wrlong	local03, fp
1707c     08 2A 56 F2 | 	cmps	local03, #8 wc
17080     D4 FF 9F CD |  if_b	jmp	#LR__1890
17084                 | LR__1891
17084     37 00 00 FF 
17088     10 E4 85 F1 | 	sub	objptr, ##28176
1708c     10 4E 85 F1 | 	sub	fp, #16
17090     64 00 90 FD | 	jmp	#LR__1893
17094                 | LR__1892
17094     F8 47 BF FD | 	call	#_pop
17098     FF 26 02 F6 | 	mov	local01, result3
1709c     A7 FA 61 FC | 	wrlong	result1, fp
170a0     04 4E 05 F1 | 	add	fp, #4
170a4     A7 FC 61 FC | 	wrlong	result2, fp
170a8     04 4E 05 F1 | 	add	fp, #4
170ac     A7 26 62 FC | 	wrlong	local01, fp
170b0     08 4E 85 F1 | 	sub	fp, #8
170b4     A7 12 02 F6 | 	mov	arg01, fp
170b8     B8 49 BF FD | 	call	#_converttoint
170bc     FD 2A 52 F6 | 	abs	local03, result1 wc
170c0     07 2A 06 F5 | 	and	local03, #7
170c4     15 29 82 F6 | 	negc	local02, local03
170c8     0C 4E 05 F1 | 	add	fp, #12
170cc     A7 28 62 FC | 	wrlong	local02, fp
170d0     37 00 00 FF 
170d4     10 E4 05 F1 | 	add	objptr, ##28176
170d8     F2 12 02 FB | 	rdlong	arg01, objptr
170dc     37 00 00 FF 
170e0     10 E4 85 F1 | 	sub	objptr, ##28176
170e4     0C 4E 85 F1 | 	sub	fp, #12
170e8     06 28 66 F0 | 	shl	local02, #6
170ec     14 13 02 F1 | 	add	arg01, local02
170f0     14 12 06 F1 | 	add	arg01, #20
170f4     09 01 58 FC | 	wrword	#0, arg01
170f8                 | LR__1893
170f8     A7 F0 03 F6 | 	mov	ptra, fp
170fc     B2 00 A0 FD | 	call	#popregs_
17100                 | _do_shutup_ret
17100     2D 00 64 FD | 	ret
17104                 | 
17104                 | ' 
17104                 | ' ' ------------------ sin
17104                 | ' 
17104                 | ' sub do_sin
17104                 | _do_sin
17104     01 4A 05 F6 | 	mov	COUNT_, #1
17108     A8 00 A0 FD | 	call	#pushregs_
1710c     10 F0 07 F1 | 	add	ptra, #16
17110     4A 00 00 FF 
17114     80 E4 05 F1 | 	add	objptr, ##38016
17118     F2 26 02 FB | 	rdlong	local01, objptr
1711c     13 17 02 F6 | 	mov	arg03, local01
17120     01 16 66 F0 | 	shl	arg03, #1
17124     13 17 02 F1 | 	add	arg03, local01
17128     02 16 66 F0 | 	shl	arg03, #2
1712c     03 00 00 FF 
17130     04 E4 85 F1 | 	sub	objptr, ##1540
17134     F2 16 02 F1 | 	add	arg03, objptr
17138     0B 17 02 FB | 	rdlong	arg03, arg03
1713c     0C 4E 05 F1 | 	add	fp, #12
17140     A7 16 62 FC | 	wrlong	arg03, fp
17144                 | ' 
17144                 | ' numpar=compiledline(lineptr_e).result.uresult
17144                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
17144     0C 4E 85 F1 | 	sub	fp, #12
17148     02 16 16 F2 | 	cmp	arg03, #2 wc
1714c     47 00 00 FF 
17150     7C E4 85 F1 | 	sub	objptr, ##36476
17154     0C 4E 05 C1 |  if_b	add	fp, #12
17158     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1715c     0C 4E 85 C1 |  if_b	sub	fp, #12
17160     40 00 90 4D |  if_c_and_nz	jmp	#LR__1900
17164     00 12 06 F6 | 	mov	arg01, #0
17168     D4 07 B1 FD | 	call	#__system___getiolock_0574
1716c     FD 12 02 F6 | 	mov	arg01, result1
17170     A0 AA B0 FD | 	call	#__system___lockmem
17174     90 01 00 FF 
17178     9A 15 06 F6 | 	mov	arg02, ##@LR__5641
1717c     00 12 06 F6 | 	mov	arg01, #0
17180     00 16 06 F6 | 	mov	arg03, #0
17184     80 B7 B0 FD | 	call	#__system___basic_print_string
17188     00 12 06 F6 | 	mov	arg01, #0
1718c     B0 07 B1 FD | 	call	#__system___getiolock_0574
17190     FD 00 68 FC | 	wrlong	#0, result1
17194     27 12 06 F6 | 	mov	arg01, #39
17198     00 14 06 F6 | 	mov	arg02, #0
1719c     54 71 B0 FD | 	call	#_printerror
171a0     64 00 90 FD | 	jmp	#LR__1901
171a4                 | LR__1900
171a4     E8 46 BF FD | 	call	#_pop
171a8     A7 FA 61 FC | 	wrlong	result1, fp
171ac     04 4E 05 F1 | 	add	fp, #4
171b0     A7 FC 61 FC | 	wrlong	result2, fp
171b4     04 4E 05 F1 | 	add	fp, #4
171b8     A7 FE 61 FC | 	wrlong	result3, fp
171bc     08 4E 85 F1 | 	sub	fp, #8
171c0     51 00 00 FF 
171c4     BC E5 05 F1 | 	add	objptr, ##41916
171c8     F2 26 02 FB | 	rdlong	local01, objptr
171cc     51 00 00 FF 
171d0     BC E5 85 F1 | 	sub	objptr, ##41916
171d4     A7 12 02 F6 | 	mov	arg01, fp
171d8     54 49 BF FD | 	call	#_converttofloat
171dc     FD 14 02 F6 | 	mov	arg02, result1
171e0     13 13 02 F6 | 	mov	arg01, local01
171e4     E8 D7 B0 FD | 	call	#__system___float_mul
171e8     FD 12 02 F6 | 	mov	arg01, result1
171ec     40 E1 B0 FD | 	call	#__system____builtin_sinf
171f0     A7 FA 61 FC | 	wrlong	result1, fp
171f4     08 4E 05 F1 | 	add	fp, #8
171f8     A7 3C 68 FC | 	wrlong	#30, fp
171fc     08 4E 85 F1 | 	sub	fp, #8
17200     A7 12 02 F6 | 	mov	arg01, fp
17204     20 47 BF FD | 	call	#_push
17208                 | LR__1901
17208     A7 F0 03 F6 | 	mov	ptra, fp
1720c     B2 00 A0 FD | 	call	#popregs_
17210                 | _do_sin_ret
17210     2D 00 64 FD | 	ret
17214                 | 
17214                 | ' 
17214                 | ' ' ------------------ sprite
17214                 | ' 
17214                 | ' sub do_sprite
17214                 | _do_sprite
17214     00 4A 05 F6 | 	mov	COUNT_, #0
17218     A8 00 A0 FD | 	call	#pushregs_
1721c     30 F0 07 F1 | 	add	ptra, #48
17220     6C 46 BF FD | 	call	#_pop
17224     FD 16 02 F6 | 	mov	arg03, result1
17228     FE 14 02 F6 | 	mov	arg02, result2
1722c     FF 12 02 F6 | 	mov	arg01, result3
17230     18 4E 05 F1 | 	add	fp, #24
17234     A7 16 62 FC | 	wrlong	arg03, fp
17238     04 4E 05 F1 | 	add	fp, #4
1723c     A7 14 62 FC | 	wrlong	arg02, fp
17240     04 4E 05 F1 | 	add	fp, #4
17244     A7 12 62 FC | 	wrlong	arg01, fp
17248     20 4E 85 F1 | 	sub	fp, #32
1724c     40 46 BF FD | 	call	#_pop
17250     FD 16 02 F6 | 	mov	arg03, result1
17254     FE 14 02 F6 | 	mov	arg02, result2
17258     FF 12 02 F6 | 	mov	arg01, result3
1725c     0C 4E 05 F1 | 	add	fp, #12
17260     A7 16 62 FC | 	wrlong	arg03, fp
17264     04 4E 05 F1 | 	add	fp, #4
17268     A7 14 62 FC | 	wrlong	arg02, fp
1726c     04 4E 05 F1 | 	add	fp, #4
17270     A7 12 62 FC | 	wrlong	arg01, fp
17274     14 4E 85 F1 | 	sub	fp, #20
17278     14 46 BF FD | 	call	#_pop
1727c     FF 16 02 F6 | 	mov	arg03, result3
17280     A7 FA 61 FC | 	wrlong	result1, fp
17284     04 4E 05 F1 | 	add	fp, #4
17288     A7 FC 61 FC | 	wrlong	result2, fp
1728c     04 4E 05 F1 | 	add	fp, #4
17290     A7 16 62 FC | 	wrlong	arg03, fp
17294     08 4E 85 F1 | 	sub	fp, #8
17298     A7 12 02 F6 | 	mov	arg01, fp
1729c     D4 47 BF FD | 	call	#_converttoint
172a0     24 4E 05 F1 | 	add	fp, #36
172a4     A7 FA 61 FC | 	wrlong	result1, fp
172a8     18 4E 85 F1 | 	sub	fp, #24
172ac     A7 12 02 F6 | 	mov	arg01, fp
172b0     0C 4E 85 F1 | 	sub	fp, #12
172b4     BC 47 BF FD | 	call	#_converttoint
172b8     28 4E 05 F1 | 	add	fp, #40
172bc     A7 FA 61 FC | 	wrlong	result1, fp
172c0     10 4E 85 F1 | 	sub	fp, #16
172c4     A7 12 02 F6 | 	mov	arg01, fp
172c8     18 4E 85 F1 | 	sub	fp, #24
172cc     A4 47 BF FD | 	call	#_converttoint
172d0     2C 4E 05 F1 | 	add	fp, #44
172d4     A7 FA 61 FC | 	wrlong	result1, fp
172d8     08 4E 85 F1 | 	sub	fp, #8
172dc     A7 12 02 FB | 	rdlong	arg01, fp
172e0     04 4E 05 F1 | 	add	fp, #4
172e4     A7 14 02 FB | 	rdlong	arg02, fp
172e8     FD 16 02 F6 | 	mov	arg03, result1
172ec     28 4E 85 F1 | 	sub	fp, #40
172f0     5C 7F B0 FD | 	call	#_hg010b_spin2_setspritepos
172f4     A7 F0 03 F6 | 	mov	ptra, fp
172f8     B2 00 A0 FD | 	call	#popregs_
172fc                 | _do_sprite_ret
172fc     2D 00 64 FD | 	ret
17300                 | 
17300                 | ' 
17300                 | ' ' ------------------ sqr
17300                 | ' 
17300                 | ' sub do_sqr
17300                 | _do_sqr
17300     01 4A 05 F6 | 	mov	COUNT_, #1
17304     A8 00 A0 FD | 	call	#pushregs_
17308     10 F0 07 F1 | 	add	ptra, #16
1730c     4A 00 00 FF 
17310     80 E4 05 F1 | 	add	objptr, ##38016
17314     F2 26 02 FB | 	rdlong	local01, objptr
17318     13 17 02 F6 | 	mov	arg03, local01
1731c     01 16 66 F0 | 	shl	arg03, #1
17320     13 17 02 F1 | 	add	arg03, local01
17324     02 16 66 F0 | 	shl	arg03, #2
17328     03 00 00 FF 
1732c     04 E4 85 F1 | 	sub	objptr, ##1540
17330     F2 16 02 F1 | 	add	arg03, objptr
17334     0B 17 02 FB | 	rdlong	arg03, arg03
17338     0C 4E 05 F1 | 	add	fp, #12
1733c     A7 16 62 FC | 	wrlong	arg03, fp
17340                 | ' 
17340                 | ' numpar=compiledline(lineptr_e).result.uresult
17340                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17340     0C 4E 85 F1 | 	sub	fp, #12
17344     02 16 16 F2 | 	cmp	arg03, #2 wc
17348     47 00 00 FF 
1734c     7C E4 85 F1 | 	sub	objptr, ##36476
17350     0C 4E 05 C1 |  if_b	add	fp, #12
17354     A7 26 0A CB |  if_b	rdlong	local01, fp wz
17358     0C 4E 85 C1 |  if_b	sub	fp, #12
1735c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1910
17360     00 12 06 F6 | 	mov	arg01, #0
17364     D8 05 B1 FD | 	call	#__system___getiolock_0574
17368     FD 12 02 F6 | 	mov	arg01, result1
1736c     A4 A8 B0 FD | 	call	#__system___lockmem
17370     90 01 00 FF 
17374     A0 15 06 F6 | 	mov	arg02, ##@LR__5642
17378     00 12 06 F6 | 	mov	arg01, #0
1737c     00 16 06 F6 | 	mov	arg03, #0
17380     84 B5 B0 FD | 	call	#__system___basic_print_string
17384     00 12 06 F6 | 	mov	arg01, #0
17388     B4 05 B1 FD | 	call	#__system___getiolock_0574
1738c     FD 00 68 FC | 	wrlong	#0, result1
17390     27 12 06 F6 | 	mov	arg01, #39
17394     00 14 06 F6 | 	mov	arg02, #0
17398     58 6F B0 FD | 	call	#_printerror
1739c     48 00 90 FD | 	jmp	#LR__1911
173a0                 | LR__1910
173a0     EC 44 BF FD | 	call	#_pop
173a4     FF 26 02 F6 | 	mov	local01, result3
173a8     A7 FA 61 FC | 	wrlong	result1, fp
173ac     04 4E 05 F1 | 	add	fp, #4
173b0     A7 FC 61 FC | 	wrlong	result2, fp
173b4     04 4E 05 F1 | 	add	fp, #4
173b8     A7 26 62 FC | 	wrlong	local01, fp
173bc     08 4E 85 F1 | 	sub	fp, #8
173c0     A7 12 02 F6 | 	mov	arg01, fp
173c4     68 47 BF FD | 	call	#_converttofloat
173c8     FD 12 02 F6 | 	mov	arg01, result1
173cc     28 D5 B0 FD | 	call	#__system___float_sqrt
173d0     A7 FA 61 FC | 	wrlong	result1, fp
173d4     08 4E 05 F1 | 	add	fp, #8
173d8     A7 3C 68 FC | 	wrlong	#30, fp
173dc     08 4E 85 F1 | 	sub	fp, #8
173e0     A7 12 02 F6 | 	mov	arg01, fp
173e4     40 45 BF FD | 	call	#_push
173e8                 | LR__1911
173e8     A7 F0 03 F6 | 	mov	ptra, fp
173ec     B2 00 A0 FD | 	call	#popregs_
173f0                 | _do_sqr_ret
173f0     2D 00 64 FD | 	ret
173f4                 | 
173f4                 | ' 
173f4                 | ' ' ------------------ stick
173f4                 | ' 
173f4                 | ' sub do_stick
173f4                 | _do_stick
173f4     01 4A 05 F6 | 	mov	COUNT_, #1
173f8     A8 00 A0 FD | 	call	#pushregs_
173fc     10 F0 07 F1 | 	add	ptra, #16
17400     4A 00 00 FF 
17404     80 E4 05 F1 | 	add	objptr, ##38016
17408     F2 26 02 FB | 	rdlong	local01, objptr
1740c     13 17 02 F6 | 	mov	arg03, local01
17410     01 16 66 F0 | 	shl	arg03, #1
17414     13 17 02 F1 | 	add	arg03, local01
17418     02 16 66 F0 | 	shl	arg03, #2
1741c     03 00 00 FF 
17420     04 E4 85 F1 | 	sub	objptr, ##1540
17424     F2 16 02 F1 | 	add	arg03, objptr
17428     0B 17 02 FB | 	rdlong	arg03, arg03
1742c     0C 4E 05 F1 | 	add	fp, #12
17430     A7 16 62 FC | 	wrlong	arg03, fp
17434                 | ' 
17434                 | ' numpar=compiledline(lineptr_e).result.uresult
17434                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17434     0C 4E 85 F1 | 	sub	fp, #12
17438     02 16 16 F2 | 	cmp	arg03, #2 wc
1743c     47 00 00 FF 
17440     7C E4 85 F1 | 	sub	objptr, ##36476
17444     40 00 90 CD |  if_b	jmp	#LR__1920
17448     00 12 06 F6 | 	mov	arg01, #0
1744c     F0 04 B1 FD | 	call	#__system___getiolock_0574
17450     FD 12 02 F6 | 	mov	arg01, result1
17454     BC A7 B0 FD | 	call	#__system___lockmem
17458     90 01 00 FF 
1745c     A6 15 06 F6 | 	mov	arg02, ##@LR__5643
17460     00 12 06 F6 | 	mov	arg01, #0
17464     00 16 06 F6 | 	mov	arg03, #0
17468     9C B4 B0 FD | 	call	#__system___basic_print_string
1746c     00 12 06 F6 | 	mov	arg01, #0
17470     CC 04 B1 FD | 	call	#__system___getiolock_0574
17474     FD 00 68 FC | 	wrlong	#0, result1
17478     27 12 06 F6 | 	mov	arg01, #39
1747c     00 14 06 F6 | 	mov	arg02, #0
17480     70 6E B0 FD | 	call	#_printerror
17484     F0 00 90 FD | 	jmp	#LR__1924
17488                 | LR__1920
17488                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
17488     0C 4E 05 F1 | 	add	fp, #12
1748c     A7 FE 09 FB | 	rdlong	result3, fp wz
17490     0C 4E 85 F1 | 	sub	fp, #12
17494     30 00 90 5D |  if_ne	jmp	#LR__1921
17498     51 00 00 FF 
1749c     30 E5 05 F1 | 	add	objptr, ##41776
174a0     F2 26 02 FB | 	rdlong	local01, objptr
174a4     51 00 00 FF 
174a8     30 E5 85 F1 | 	sub	objptr, ##41776
174ac     A7 26 62 FC | 	wrlong	local01, fp
174b0     08 4E 05 F1 | 	add	fp, #8
174b4     A7 3A 68 FC | 	wrlong	#29, fp
174b8     08 4E 85 F1 | 	sub	fp, #8
174bc     A7 12 02 F6 | 	mov	arg01, fp
174c0     64 44 BF FD | 	call	#_push
174c4     B0 00 90 FD | 	jmp	#LR__1924
174c8                 | LR__1921
174c8     C4 43 BF FD | 	call	#_pop
174cc     A7 FA 61 FC | 	wrlong	result1, fp
174d0     04 4E 05 F1 | 	add	fp, #4
174d4     A7 FC 61 FC | 	wrlong	result2, fp
174d8     04 4E 05 F1 | 	add	fp, #4
174dc     A7 FE 61 FC | 	wrlong	result3, fp
174e0                 | ' t1=pop()
174e0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
174e0     08 4E 85 F1 | 	sub	fp, #8
174e4     1C FE 0D F2 | 	cmp	result3, #28 wz
174e8     08 4E 05 51 |  if_ne	add	fp, #8
174ec     A7 26 02 5B |  if_ne	rdlong	local01, fp
174f0     08 4E 85 51 |  if_ne	sub	fp, #8
174f4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
174f8     70 00 90 5D |  if_ne	jmp	#LR__1923
174fc     A7 26 02 FB | 	rdlong	local01, fp
17500     52 00 00 FF 
17504     14 E4 05 F1 | 	add	objptr, ##42004
17508     F2 26 62 FC | 	wrlong	local01, objptr
1750c                 | '   q=t1.result.uresult
1750c                 | '   if q<7 then 
1750c     52 00 00 FF 
17510     14 E4 85 F1 | 	sub	objptr, ##42004
17514     07 26 56 F2 | 	cmps	local01, #7 wc
17518     40 00 90 3D |  if_ae	jmp	#LR__1922
1751c     52 00 00 FF 
17520     14 E4 05 F1 | 	add	objptr, ##42004
17524     F2 26 02 FB | 	rdlong	local01, objptr
17528     02 26 66 F0 | 	shl	local01, #2
1752c     E4 E4 85 F1 | 	sub	objptr, #228
17530     F2 26 02 F1 | 	add	local01, objptr
17534     13 27 02 FB | 	rdlong	local01, local01
17538     A7 26 62 FC | 	wrlong	local01, fp
1753c     08 4E 05 F1 | 	add	fp, #8
17540     A7 3A 68 FC | 	wrlong	#29, fp
17544     08 4E 85 F1 | 	sub	fp, #8
17548     A7 12 02 F6 | 	mov	arg01, fp
1754c     51 00 00 FF 
17550     30 E5 85 F1 | 	sub	objptr, ##41776
17554     D0 43 BF FD | 	call	#_push
17558                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
17558     1C 00 90 FD | 	jmp	#LR__1924
1755c                 | LR__1922
1755c     29 12 06 F6 | 	mov	arg01, #41
17560     00 14 06 F6 | 	mov	arg02, #0
17564     8C 6D B0 FD | 	call	#_printerror
17568                 | '      printerror(41) : return
17568     0C 00 90 FD | 	jmp	#LR__1924
1756c                 | LR__1923
1756c     29 12 06 F6 | 	mov	arg01, #41
17570     00 14 06 F6 | 	mov	arg02, #0
17574     7C 6D B0 FD | 	call	#_printerror
17578                 | LR__1924
17578     A7 F0 03 F6 | 	mov	ptra, fp
1757c     B2 00 A0 FD | 	call	#popregs_
17580                 | _do_stick_ret
17580     2D 00 64 FD | 	ret
17584                 | 
17584                 | ' 
17584                 | ' ' ------------------ strig
17584                 | ' 
17584                 | ' sub do_strig
17584                 | _do_strig
17584     01 4A 05 F6 | 	mov	COUNT_, #1
17588     A8 00 A0 FD | 	call	#pushregs_
1758c     10 F0 07 F1 | 	add	ptra, #16
17590     4A 00 00 FF 
17594     80 E4 05 F1 | 	add	objptr, ##38016
17598     F2 26 02 FB | 	rdlong	local01, objptr
1759c     13 17 02 F6 | 	mov	arg03, local01
175a0     01 16 66 F0 | 	shl	arg03, #1
175a4     13 17 02 F1 | 	add	arg03, local01
175a8     02 16 66 F0 | 	shl	arg03, #2
175ac     03 00 00 FF 
175b0     04 E4 85 F1 | 	sub	objptr, ##1540
175b4     F2 16 02 F1 | 	add	arg03, objptr
175b8     0B 17 02 FB | 	rdlong	arg03, arg03
175bc     0C 4E 05 F1 | 	add	fp, #12
175c0     A7 16 62 FC | 	wrlong	arg03, fp
175c4                 | ' 
175c4                 | ' numpar=compiledline(lineptr_e).result.uresult
175c4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
175c4     0C 4E 85 F1 | 	sub	fp, #12
175c8     02 16 16 F2 | 	cmp	arg03, #2 wc
175cc     47 00 00 FF 
175d0     7C E4 85 F1 | 	sub	objptr, ##36476
175d4     40 00 90 CD |  if_b	jmp	#LR__1930
175d8     00 12 06 F6 | 	mov	arg01, #0
175dc     60 03 B1 FD | 	call	#__system___getiolock_0574
175e0     FD 12 02 F6 | 	mov	arg01, result1
175e4     2C A6 B0 FD | 	call	#__system___lockmem
175e8     90 01 00 FF 
175ec     AE 15 06 F6 | 	mov	arg02, ##@LR__5644
175f0     00 12 06 F6 | 	mov	arg01, #0
175f4     00 16 06 F6 | 	mov	arg03, #0
175f8     0C B3 B0 FD | 	call	#__system___basic_print_string
175fc     00 12 06 F6 | 	mov	arg01, #0
17600     3C 03 B1 FD | 	call	#__system___getiolock_0574
17604     FD 00 68 FC | 	wrlong	#0, result1
17608     27 12 06 F6 | 	mov	arg01, #39
1760c     00 14 06 F6 | 	mov	arg02, #0
17610     E0 6C B0 FD | 	call	#_printerror
17614     F0 00 90 FD | 	jmp	#LR__1934
17618                 | LR__1930
17618                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17618     0C 4E 05 F1 | 	add	fp, #12
1761c     A7 FE 09 FB | 	rdlong	result3, fp wz
17620     0C 4E 85 F1 | 	sub	fp, #12
17624     30 00 90 5D |  if_ne	jmp	#LR__1931
17628     51 00 00 FF 
1762c     4C E5 05 F1 | 	add	objptr, ##41804
17630     F2 26 02 FB | 	rdlong	local01, objptr
17634     51 00 00 FF 
17638     4C E5 85 F1 | 	sub	objptr, ##41804
1763c     A7 26 62 FC | 	wrlong	local01, fp
17640     08 4E 05 F1 | 	add	fp, #8
17644     A7 3A 68 FC | 	wrlong	#29, fp
17648     08 4E 85 F1 | 	sub	fp, #8
1764c     A7 12 02 F6 | 	mov	arg01, fp
17650     D4 42 BF FD | 	call	#_push
17654     B0 00 90 FD | 	jmp	#LR__1934
17658                 | LR__1931
17658     34 42 BF FD | 	call	#_pop
1765c     A7 FA 61 FC | 	wrlong	result1, fp
17660     04 4E 05 F1 | 	add	fp, #4
17664     A7 FC 61 FC | 	wrlong	result2, fp
17668     04 4E 05 F1 | 	add	fp, #4
1766c     A7 FE 61 FC | 	wrlong	result3, fp
17670                 | ' t1=pop()
17670                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17670     08 4E 85 F1 | 	sub	fp, #8
17674     1C FE 0D F2 | 	cmp	result3, #28 wz
17678     08 4E 05 51 |  if_ne	add	fp, #8
1767c     A7 26 02 5B |  if_ne	rdlong	local01, fp
17680     08 4E 85 51 |  if_ne	sub	fp, #8
17684     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17688     70 00 90 5D |  if_ne	jmp	#LR__1933
1768c     A7 26 02 FB | 	rdlong	local01, fp
17690     52 00 00 FF 
17694     14 E4 05 F1 | 	add	objptr, ##42004
17698     F2 26 62 FC | 	wrlong	local01, objptr
1769c                 | '   q=t1.result.uresult
1769c                 | '   if q<7 then 
1769c     52 00 00 FF 
176a0     14 E4 85 F1 | 	sub	objptr, ##42004
176a4     07 26 56 F2 | 	cmps	local01, #7 wc
176a8     40 00 90 3D |  if_ae	jmp	#LR__1932
176ac     52 00 00 FF 
176b0     14 E4 05 F1 | 	add	objptr, ##42004
176b4     F2 26 02 FB | 	rdlong	local01, objptr
176b8     02 26 66 F0 | 	shl	local01, #2
176bc     C8 E4 85 F1 | 	sub	objptr, #200
176c0     F2 26 02 F1 | 	add	local01, objptr
176c4     13 27 02 FB | 	rdlong	local01, local01
176c8     A7 26 62 FC | 	wrlong	local01, fp
176cc     08 4E 05 F1 | 	add	fp, #8
176d0     A7 3A 68 FC | 	wrlong	#29, fp
176d4     08 4E 85 F1 | 	sub	fp, #8
176d8     A7 12 02 F6 | 	mov	arg01, fp
176dc     51 00 00 FF 
176e0     4C E5 85 F1 | 	sub	objptr, ##41804
176e4     40 42 BF FD | 	call	#_push
176e8                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
176e8     1C 00 90 FD | 	jmp	#LR__1934
176ec                 | LR__1932
176ec     29 12 06 F6 | 	mov	arg01, #41
176f0     00 14 06 F6 | 	mov	arg02, #0
176f4     FC 6B B0 FD | 	call	#_printerror
176f8                 | '      printerror(41) : return
176f8     0C 00 90 FD | 	jmp	#LR__1934
176fc                 | LR__1933
176fc     29 12 06 F6 | 	mov	arg01, #41
17700     00 14 06 F6 | 	mov	arg02, #0
17704     EC 6B B0 FD | 	call	#_printerror
17708                 | LR__1934
17708     A7 F0 03 F6 | 	mov	ptra, fp
1770c     B2 00 A0 FD | 	call	#popregs_
17710                 | _do_strig_ret
17710     2D 00 64 FD | 	ret
17714                 | 
17714                 | ' 
17714                 | ' ' ------------------ tan
17714                 | ' 
17714                 | ' sub do_tan
17714                 | _do_tan
17714     01 4A 05 F6 | 	mov	COUNT_, #1
17718     A8 00 A0 FD | 	call	#pushregs_
1771c     10 F0 07 F1 | 	add	ptra, #16
17720     4A 00 00 FF 
17724     80 E4 05 F1 | 	add	objptr, ##38016
17728     F2 26 02 FB | 	rdlong	local01, objptr
1772c     13 17 02 F6 | 	mov	arg03, local01
17730     01 16 66 F0 | 	shl	arg03, #1
17734     13 17 02 F1 | 	add	arg03, local01
17738     02 16 66 F0 | 	shl	arg03, #2
1773c     03 00 00 FF 
17740     04 E4 85 F1 | 	sub	objptr, ##1540
17744     F2 16 02 F1 | 	add	arg03, objptr
17748     0B 17 02 FB | 	rdlong	arg03, arg03
1774c     0C 4E 05 F1 | 	add	fp, #12
17750     A7 16 62 FC | 	wrlong	arg03, fp
17754                 | ' 
17754                 | ' numpar=compiledline(lineptr_e).result.uresult
17754                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
17754     0C 4E 85 F1 | 	sub	fp, #12
17758     02 16 16 F2 | 	cmp	arg03, #2 wc
1775c     47 00 00 FF 
17760     7C E4 85 F1 | 	sub	objptr, ##36476
17764     0C 4E 05 C1 |  if_b	add	fp, #12
17768     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1776c     0C 4E 85 C1 |  if_b	sub	fp, #12
17770     40 00 90 4D |  if_c_and_nz	jmp	#LR__1940
17774     00 12 06 F6 | 	mov	arg01, #0
17778     C4 01 B1 FD | 	call	#__system___getiolock_0574
1777c     FD 12 02 F6 | 	mov	arg01, result1
17780     90 A4 B0 FD | 	call	#__system___lockmem
17784     90 01 00 FF 
17788     B6 15 06 F6 | 	mov	arg02, ##@LR__5645
1778c     00 12 06 F6 | 	mov	arg01, #0
17790     00 16 06 F6 | 	mov	arg03, #0
17794     70 B1 B0 FD | 	call	#__system___basic_print_string
17798     00 12 06 F6 | 	mov	arg01, #0
1779c     A0 01 B1 FD | 	call	#__system___getiolock_0574
177a0     FD 00 68 FC | 	wrlong	#0, result1
177a4     27 12 06 F6 | 	mov	arg01, #39
177a8     00 14 06 F6 | 	mov	arg02, #0
177ac     44 6B B0 FD | 	call	#_printerror
177b0     64 00 90 FD | 	jmp	#LR__1941
177b4                 | LR__1940
177b4     D8 40 BF FD | 	call	#_pop
177b8     A7 FA 61 FC | 	wrlong	result1, fp
177bc     04 4E 05 F1 | 	add	fp, #4
177c0     A7 FC 61 FC | 	wrlong	result2, fp
177c4     04 4E 05 F1 | 	add	fp, #4
177c8     A7 FE 61 FC | 	wrlong	result3, fp
177cc     08 4E 85 F1 | 	sub	fp, #8
177d0     51 00 00 FF 
177d4     BC E5 05 F1 | 	add	objptr, ##41916
177d8     F2 26 02 FB | 	rdlong	local01, objptr
177dc     51 00 00 FF 
177e0     BC E5 85 F1 | 	sub	objptr, ##41916
177e4     A7 12 02 F6 | 	mov	arg01, fp
177e8     44 43 BF FD | 	call	#_converttofloat
177ec     FD 14 02 F6 | 	mov	arg02, result1
177f0     13 13 02 F6 | 	mov	arg01, local01
177f4     D8 D1 B0 FD | 	call	#__system___float_mul
177f8     FD 12 02 F6 | 	mov	arg01, result1
177fc     7C DC B0 FD | 	call	#__system____builtin_tanf
17800     A7 FA 61 FC | 	wrlong	result1, fp
17804     08 4E 05 F1 | 	add	fp, #8
17808     A7 3C 68 FC | 	wrlong	#30, fp
1780c     08 4E 85 F1 | 	sub	fp, #8
17810     A7 12 02 F6 | 	mov	arg01, fp
17814     10 41 BF FD | 	call	#_push
17818                 | LR__1941
17818     A7 F0 03 F6 | 	mov	ptra, fp
1781c     B2 00 A0 FD | 	call	#popregs_
17820                 | _do_tan_ret
17820     2D 00 64 FD | 	ret
17824                 | 
17824                 | ' 
17824                 | ' ' ------------------ val
17824                 | ' 
17824                 | ' sub do_val
17824                 | _do_val
17824     03 4A 05 F6 | 	mov	COUNT_, #3
17828     A8 00 A0 FD | 	call	#pushregs_
1782c     20 F0 07 F1 | 	add	ptra, #32
17830     4A 00 00 FF 
17834     80 E4 05 F1 | 	add	objptr, ##38016
17838     F2 16 02 FB | 	rdlong	arg03, objptr
1783c     0B 27 02 F6 | 	mov	local01, arg03
17840     01 26 66 F0 | 	shl	local01, #1
17844     0B 27 02 F1 | 	add	local01, arg03
17848     02 26 66 F0 | 	shl	local01, #2
1784c     03 00 00 FF 
17850     04 E4 85 F1 | 	sub	objptr, ##1540
17854     F2 26 02 F1 | 	add	local01, objptr
17858     13 17 02 FB | 	rdlong	arg03, local01
1785c     0C 4E 05 F1 | 	add	fp, #12
17860     A7 16 62 FC | 	wrlong	arg03, fp
17864                 | ' 
17864                 | ' numpar=compiledline(lineptr_e).result.uresult
17864                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
17864     0C 4E 85 F1 | 	sub	fp, #12
17868     02 16 16 F2 | 	cmp	arg03, #2 wc
1786c     47 00 00 FF 
17870     7C E4 85 F1 | 	sub	objptr, ##36476
17874     0C 4E 05 C1 |  if_b	add	fp, #12
17878     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1787c     0C 4E 85 C1 |  if_b	sub	fp, #12
17880     40 00 90 4D |  if_c_and_nz	jmp	#LR__1950
17884     00 12 06 F6 | 	mov	arg01, #0
17888     B4 00 B1 FD | 	call	#__system___getiolock_0574
1788c     FD 12 02 F6 | 	mov	arg01, result1
17890     80 A3 B0 FD | 	call	#__system___lockmem
17894     90 01 00 FF 
17898     BC 15 06 F6 | 	mov	arg02, ##@LR__5646
1789c     00 12 06 F6 | 	mov	arg01, #0
178a0     00 16 06 F6 | 	mov	arg03, #0
178a4     60 B0 B0 FD | 	call	#__system___basic_print_string
178a8     00 12 06 F6 | 	mov	arg01, #0
178ac     90 00 B1 FD | 	call	#__system___getiolock_0574
178b0     FD 00 68 FC | 	wrlong	#0, result1
178b4     27 12 06 F6 | 	mov	arg01, #39
178b8     00 14 06 F6 | 	mov	arg02, #0
178bc     34 6A B0 FD | 	call	#_printerror
178c0     60 02 90 FD | 	jmp	#LR__1963
178c4                 | LR__1950
178c4     C8 3F BF FD | 	call	#_pop
178c8     FF 16 02 F6 | 	mov	arg03, result3
178cc     A7 FA 61 FC | 	wrlong	result1, fp
178d0     04 4E 05 F1 | 	add	fp, #4
178d4     A7 FC 61 FC | 	wrlong	result2, fp
178d8     04 4E 05 F1 | 	add	fp, #4
178dc     A7 16 62 FC | 	wrlong	arg03, fp
178e0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
178e0     08 4E 85 F1 | 	sub	fp, #8
178e4     2B 16 0E F2 | 	cmp	arg03, #43 wz
178e8     18 00 90 5D |  if_ne	jmp	#LR__1951
178ec     A7 12 02 FB | 	rdlong	arg01, fp
178f0     14 41 BF FD | 	call	#_convertstring
178f4     A7 FA 61 FC | 	wrlong	result1, fp
178f8     08 4E 05 F1 | 	add	fp, #8
178fc     A7 3E 68 FC | 	wrlong	#31, fp
17900     08 4E 85 F1 | 	sub	fp, #8
17904                 | LR__1951
17904                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
17904     08 4E 05 F1 | 	add	fp, #8
17908     A7 16 02 FB | 	rdlong	arg03, fp
1790c     08 4E 85 F1 | 	sub	fp, #8
17910     1F 16 0E F2 | 	cmp	arg03, #31 wz
17914     40 00 90 AD |  if_e	jmp	#LR__1952
17918     00 12 06 F6 | 	mov	arg01, #0
1791c     20 00 B1 FD | 	call	#__system___getiolock_0574
17920     FD 12 02 F6 | 	mov	arg01, result1
17924     EC A2 B0 FD | 	call	#__system___lockmem
17928     90 01 00 FF 
1792c     C2 15 06 F6 | 	mov	arg02, ##@LR__5647
17930     00 12 06 F6 | 	mov	arg01, #0
17934     00 16 06 F6 | 	mov	arg03, #0
17938     CC AF B0 FD | 	call	#__system___basic_print_string
1793c     00 12 06 F6 | 	mov	arg01, #0
17940     FC FF B0 FD | 	call	#__system___getiolock_0574
17944     FD 00 68 FC | 	wrlong	#0, result1
17948     0F 12 06 F6 | 	mov	arg01, #15
1794c     00 14 06 F6 | 	mov	arg02, #0
17950     A0 69 B0 FD | 	call	#_printerror
17954     CC 01 90 FD | 	jmp	#LR__1963
17958                 | LR__1952
17958                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
17958     A7 12 02 FB | 	rdlong	arg01, fp
1795c     01 14 06 F6 | 	mov	arg02, #1
17960     2C C3 B0 FD | 	call	#__system__Left_S
17964     FD 12 02 F6 | 	mov	arg01, result1
17968     90 01 00 FF 
1796c     C8 15 06 F6 | 	mov	arg02, ##@LR__5648
17970     C8 A2 B0 FD | 	call	#__system___string_cmp
17974     00 FA 0D F2 | 	cmp	result1, #0 wz
17978     48 00 90 5D |  if_ne	jmp	#LR__1955
1797c     90 01 00 FF 
17980     CA 27 06 F6 | 	mov	local01, ##@LR__5649
17984     A7 16 02 FB | 	rdlong	arg03, fp
17988     0B 13 02 F6 | 	mov	arg01, arg03
1798c     09 29 02 F6 | 	mov	local02, arg01
17990     97 06 48 FB | 	callpa	#(@LR__1954-@LR__1953)>>2,fcache_load_ptr_
17994                 | LR__1953
17994     14 FB C9 FA | 	rdbyte	result1, local02 wz
17998     01 28 06 51 |  if_ne	add	local02, #1
1799c     F4 FF 9F 5D |  if_ne	jmp	#LR__1953
179a0                 | LR__1954
179a0     09 29 82 F1 | 	sub	local02, arg01
179a4     14 15 02 F6 | 	mov	arg02, local02
179a8     01 14 86 F1 | 	sub	arg02, #1
179ac     0B 13 02 F6 | 	mov	arg01, arg03
179b0     64 C3 B0 FD | 	call	#__system__Right_S
179b4     FD 14 02 F6 | 	mov	arg02, result1
179b8     13 13 02 F6 | 	mov	arg01, local01
179bc     B0 A2 B0 FD | 	call	#__system___string_concat
179c0     A7 FA 61 FC | 	wrlong	result1, fp
179c4                 | LR__1955
179c4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
179c4     A7 12 02 FB | 	rdlong	arg01, fp
179c8     01 14 06 F6 | 	mov	arg02, #1
179cc     C0 C2 B0 FD | 	call	#__system__Left_S
179d0     FD 12 02 F6 | 	mov	arg01, result1
179d4     90 01 00 FF 
179d8     CD 15 06 F6 | 	mov	arg02, ##@LR__5650
179dc     5C A2 B0 FD | 	call	#__system___string_cmp
179e0     00 FA 0D F2 | 	cmp	result1, #0 wz
179e4     48 00 90 5D |  if_ne	jmp	#LR__1958
179e8     90 01 00 FF 
179ec     CF 27 06 F6 | 	mov	local01, ##@LR__5651
179f0     A7 16 02 FB | 	rdlong	arg03, fp
179f4     0B 13 02 F6 | 	mov	arg01, arg03
179f8     09 29 02 F6 | 	mov	local02, arg01
179fc     97 06 48 FB | 	callpa	#(@LR__1957-@LR__1956)>>2,fcache_load_ptr_
17a00                 | LR__1956
17a00     14 FB C9 FA | 	rdbyte	result1, local02 wz
17a04     01 28 06 51 |  if_ne	add	local02, #1
17a08     F4 FF 9F 5D |  if_ne	jmp	#LR__1956
17a0c                 | LR__1957
17a0c     09 29 82 F1 | 	sub	local02, arg01
17a10     14 15 02 F6 | 	mov	arg02, local02
17a14     01 14 86 F1 | 	sub	arg02, #1
17a18     0B 13 02 F6 | 	mov	arg01, arg03
17a1c     F8 C2 B0 FD | 	call	#__system__Right_S
17a20     FD 14 02 F6 | 	mov	arg02, result1
17a24     13 13 02 F6 | 	mov	arg01, local01
17a28     44 A2 B0 FD | 	call	#__system___string_concat
17a2c     A7 FA 61 FC | 	wrlong	result1, fp
17a30                 | LR__1958
17a30     A7 12 02 FB | 	rdlong	arg01, fp
17a34     A4 D7 B0 FD | 	call	#__system____builtin_atof
17a38     1C 4E 05 F1 | 	add	fp, #28
17a3c     A7 FA 61 FC | 	wrlong	result1, fp
17a40     1C 4E 85 F1 | 	sub	fp, #28
17a44     A7 12 02 FB | 	rdlong	arg01, fp
17a48     00 14 06 F6 | 	mov	arg02, #0
17a4c     F8 D5 B0 FD | 	call	#__system____builtin_atoi
17a50     18 4E 05 F1 | 	add	fp, #24
17a54     A7 FA 61 FC | 	wrlong	result1, fp
17a58                 | ' fval=val(t1.result.sresult)
17a58                 | ' ival=val%(t1.result.sresult)
17a58                 | ' if fval=ival then
17a58     04 4E 05 F1 | 	add	fp, #4
17a5c     A7 26 02 FB | 	rdlong	local01, fp
17a60     1C 4E 85 F1 | 	sub	fp, #28
17a64     FD 12 52 F6 | 	abs	arg01, result1 wc
17a68     1F 2A C6 C9 |  if_b	decod	local03, #31
17a6c     00 2A 06 36 |  if_ae	mov	local03, #0
17a70     58 CB B0 FD | 	call	#__system___float_fromuns
17a74     15 FB 61 F5 | 	xor	result1, local03
17a78     FD 14 02 F6 | 	mov	arg02, result1
17a7c     13 13 02 F6 | 	mov	arg01, local01
17a80     01 16 06 F6 | 	mov	arg03, #1
17a84     7C D3 B0 FD | 	call	#__system___float_cmp
17a88     00 FA 0D F2 | 	cmp	result1, #0 wz
17a8c     20 00 90 5D |  if_ne	jmp	#LR__1959
17a90     18 4E 05 F1 | 	add	fp, #24
17a94     A7 26 02 FB | 	rdlong	local01, fp
17a98     18 4E 85 F1 | 	sub	fp, #24
17a9c     A7 26 62 FC | 	wrlong	local01, fp
17aa0     08 4E 05 F1 | 	add	fp, #8
17aa4     A7 38 68 FC | 	wrlong	#28, fp
17aa8     08 4E 85 F1 | 	sub	fp, #8
17aac     6C 00 90 FD | 	jmp	#LR__1962
17ab0                 | LR__1959
17ab0                 | '   if fval=0 andalso ival<>0 then
17ab0     1C 4E 05 F1 | 	add	fp, #28
17ab4     A7 12 02 FB | 	rdlong	arg01, fp
17ab8     1C 4E 85 F1 | 	sub	fp, #28
17abc     00 14 06 F6 | 	mov	arg02, #0
17ac0     01 16 06 F6 | 	mov	arg03, #1
17ac4     3C D3 B0 FD | 	call	#__system___float_cmp
17ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
17acc     30 00 90 5D |  if_ne	jmp	#LR__1960
17ad0     18 4E 05 F1 | 	add	fp, #24
17ad4     A7 26 0A FB | 	rdlong	local01, fp wz
17ad8     18 4E 85 F1 | 	sub	fp, #24
17adc     20 00 90 AD |  if_e	jmp	#LR__1960
17ae0     18 4E 05 F1 | 	add	fp, #24
17ae4     A7 26 02 FB | 	rdlong	local01, fp
17ae8     18 4E 85 F1 | 	sub	fp, #24
17aec     A7 26 62 FC | 	wrlong	local01, fp
17af0     08 4E 05 F1 | 	add	fp, #8
17af4     A7 38 68 FC | 	wrlong	#28, fp
17af8     08 4E 85 F1 | 	sub	fp, #8
17afc     1C 00 90 FD | 	jmp	#LR__1961
17b00                 | LR__1960
17b00     1C 4E 05 F1 | 	add	fp, #28
17b04     A7 26 02 FB | 	rdlong	local01, fp
17b08     1C 4E 85 F1 | 	sub	fp, #28
17b0c     A7 26 62 FC | 	wrlong	local01, fp
17b10     08 4E 05 F1 | 	add	fp, #8
17b14     A7 3C 68 FC | 	wrlong	#30, fp
17b18     08 4E 85 F1 | 	sub	fp, #8
17b1c                 | LR__1961
17b1c                 | LR__1962
17b1c     A7 12 02 F6 | 	mov	arg01, fp
17b20     04 3E BF FD | 	call	#_push
17b24                 | LR__1963
17b24     A7 F0 03 F6 | 	mov	ptra, fp
17b28     B2 00 A0 FD | 	call	#popregs_
17b2c                 | _do_val_ret
17b2c     2D 00 64 FD | 	ret
17b30                 | 
17b30                 | ' 
17b30                 | ' ' ------------------ waitclock
17b30                 | ' 
17b30                 | ' sub do_waitclock
17b30                 | _do_waitclock
17b30     51 00 00 FF 
17b34     A8 E5 05 F1 | 	add	objptr, ##41896
17b38     F2 00 02 FB | 	rdlong	_var01, objptr
17b3c                 | ' c=hkcnt
17b3c                 | ' do: loop until hkcnt<>c
17b3c                 | LR__1970
17b3c     F2 02 02 FB | 	rdlong	_var02, objptr
17b40     00 03 0A F2 | 	cmp	_var02, _var01 wz
17b44     F4 FF 9F AD |  if_e	jmp	#LR__1970
17b48     51 00 00 FF 
17b4c     A8 E5 85 F1 | 	sub	objptr, ##41896
17b50                 | _do_waitclock_ret
17b50     2D 00 64 FD | 	ret
17b54                 | 
17b54                 | ' 
17b54                 | ' ' ------------------ waitms
17b54                 | ' 
17b54                 | ' sub do_waitms
17b54                 | _do_waitms
17b54     01 4A 05 F6 | 	mov	COUNT_, #1
17b58     A8 00 A0 FD | 	call	#pushregs_
17b5c     18 F0 07 F1 | 	add	ptra, #24
17b60     2C 3D BF FD | 	call	#_pop
17b64     A7 FA 61 FC | 	wrlong	result1, fp
17b68     04 4E 05 F1 | 	add	fp, #4
17b6c     A7 FC 61 FC | 	wrlong	result2, fp
17b70     04 4E 05 F1 | 	add	fp, #4
17b74     A7 FE 61 FC | 	wrlong	result3, fp
17b78     08 4E 85 F1 | 	sub	fp, #8
17b7c     A7 12 02 F6 | 	mov	arg01, fp
17b80     F0 3E BF FD | 	call	#_converttoint
17b84     0C 4E 05 F1 | 	add	fp, #12
17b88     A7 FA 61 FC | 	wrlong	result1, fp
17b8c                 | ' 
17b8c                 | ' t1=pop()  
17b8c                 | ' t=converttoint(t1)
17b8c                 | ' if t<0 then return
17b8c     0C 4E 85 F1 | 	sub	fp, #12
17b90     00 FA 55 F2 | 	cmps	result1, #0 wc
17b94     E4 00 90 CD |  if_b	jmp	#LR__1986
17b98                 | ' if t < 1000 then 
17b98     0C 4E 05 F1 | 	add	fp, #12
17b9c     A7 12 02 FB | 	rdlong	arg01, fp
17ba0     0C 4E 85 F1 | 	sub	fp, #12
17ba4     01 00 00 FF 
17ba8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
17bac     14 00 90 3D |  if_ae	jmp	#LR__1980
17bb0     0C 4E 05 F1 | 	add	fp, #12
17bb4     A7 12 02 FB | 	rdlong	arg01, fp
17bb8     0C 4E 85 F1 | 	sub	fp, #12
17bbc     48 A3 B0 FD | 	call	#__system___waitms
17bc0     B8 00 90 FD | 	jmp	#LR__1985
17bc4                 | LR__1980
17bc4     10 4E 05 F1 | 	add	fp, #16
17bc8     A7 02 68 FC | 	wrlong	#1, fp
17bcc     04 4E 85 F1 | 	sub	fp, #4
17bd0     A7 12 02 FB | 	rdlong	arg01, fp
17bd4     09 13 52 F6 | 	abs	arg01, arg01 wc
17bd8     01 00 00 FF 
17bdc     E8 13 16 FD | 	qdiv	arg01, ##1000
17be0                 | '   for i=1 to t/1000
17be0     0C 4E 85 F1 | 	sub	fp, #12
17be4     18 26 62 FD | 	getqx	local01
17be8     13 27 82 F6 | 	negc	local01, local01
17bec     01 26 06 F1 | 	add	local01, #1
17bf0                 | LR__1981
17bf0     10 4E 05 F1 | 	add	fp, #16
17bf4     A7 12 02 FB | 	rdlong	arg01, fp
17bf8     10 4E 85 F1 | 	sub	fp, #16
17bfc     13 13 52 F2 | 	cmps	arg01, local01 wc
17c00     54 00 90 3D |  if_ae	jmp	#LR__1984
17c04     01 00 00 FF 
17c08     E8 13 06 F6 | 	mov	arg01, ##1000
17c0c     F8 A2 B0 FD | 	call	#__system___waitms
17c10                 | '     waitms(1000)
17c10                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
17c10     E0 12 06 F6 | 	mov	arg01, #224
17c14     4C 97 B0 FD | 	call	#_usbnew_spin2_keystate
17c18     00 FA 0D F2 | 	cmp	result1, #0 wz
17c1c     10 00 90 5D |  if_ne	jmp	#LR__1982
17c20     E4 12 06 F6 | 	mov	arg01, #228
17c24     3C 97 B0 FD | 	call	#_usbnew_spin2_keystate
17c28     00 FA 0D F2 | 	cmp	result1, #0 wz
17c2c     10 00 90 AD |  if_e	jmp	#LR__1983
17c30                 | LR__1982
17c30     06 12 06 F6 | 	mov	arg01, #6
17c34     2C 97 B0 FD | 	call	#_usbnew_spin2_keystate
17c38     00 FA 0D F2 | 	cmp	result1, #0 wz
17c3c     3C 00 90 5D |  if_ne	jmp	#LR__1986
17c40                 | LR__1983
17c40     10 4E 05 F1 | 	add	fp, #16
17c44     A7 12 02 FB | 	rdlong	arg01, fp
17c48     01 12 06 F1 | 	add	arg01, #1
17c4c     A7 12 62 FC | 	wrlong	arg01, fp
17c50     10 4E 85 F1 | 	sub	fp, #16
17c54     98 FF 9F FD | 	jmp	#LR__1981
17c58                 | LR__1984
17c58     0C 4E 05 F1 | 	add	fp, #12
17c5c     A7 26 02 FB | 	rdlong	local01, fp
17c60     13 27 52 F6 | 	abs	local01, local01 wc
17c64     01 00 00 FF 
17c68     E8 27 16 FD | 	qdiv	local01, ##1000
17c6c     0C 4E 85 F1 | 	sub	fp, #12
17c70     19 26 62 FD | 	getqy	local01
17c74     13 13 82 F6 | 	negc	arg01, local01
17c78     8C A2 B0 FD | 	call	#__system___waitms
17c7c                 | LR__1985
17c7c                 | LR__1986
17c7c     A7 F0 03 F6 | 	mov	ptra, fp
17c80     B2 00 A0 FD | 	call	#popregs_
17c84                 | _do_waitms_ret
17c84     2D 00 64 FD | 	ret
17c88                 | 
17c88                 | ' 
17c88                 | ' ' ------------------ waitvbl
17c88                 | ' 
17c88                 | ' sub do_waitvbl
17c88                 | _do_waitvbl
17c88     01 12 06 F6 | 	mov	arg01, #1
17c8c     D8 82 B0 FD | 	call	#_hg010b_spin2_waitvbl
17c90                 | _do_waitvbl_ret
17c90     2D 00 64 FD | 	ret
17c94                 | 
17c94                 | ' 
17c94                 | ' ' ------------------ wrpin
17c94                 | ' 
17c94                 | ' sub do_wrpin
17c94                 | _do_wrpin
17c94     01 4A 05 F6 | 	mov	COUNT_, #1
17c98     A8 00 A0 FD | 	call	#pushregs_
17c9c     18 F0 07 F1 | 	add	ptra, #24
17ca0     EC 3B BF FD | 	call	#_pop
17ca4     FD 14 02 F6 | 	mov	arg02, result1
17ca8     FE 12 02 F6 | 	mov	arg01, result2
17cac     FF 26 02 F6 | 	mov	local01, result3
17cb0     A7 14 62 FC | 	wrlong	arg02, fp
17cb4     04 4E 05 F1 | 	add	fp, #4
17cb8     A7 12 62 FC | 	wrlong	arg01, fp
17cbc     04 4E 05 F1 | 	add	fp, #4
17cc0     A7 26 62 FC | 	wrlong	local01, fp
17cc4     08 4E 85 F1 | 	sub	fp, #8
17cc8     C4 3B BF FD | 	call	#_pop
17ccc     FF 26 02 F6 | 	mov	local01, result3
17cd0     0C 4E 05 F1 | 	add	fp, #12
17cd4     A7 FA 61 FC | 	wrlong	result1, fp
17cd8     04 4E 05 F1 | 	add	fp, #4
17cdc     A7 FC 61 FC | 	wrlong	result2, fp
17ce0     04 4E 05 F1 | 	add	fp, #4
17ce4     A7 26 62 FC | 	wrlong	local01, fp
17ce8     08 4E 85 F1 | 	sub	fp, #8
17cec     A7 12 02 F6 | 	mov	arg01, fp
17cf0     0C 4E 85 F1 | 	sub	fp, #12
17cf4     7C 3D BF FD | 	call	#_converttoint
17cf8     FD 26 02 F6 | 	mov	local01, result1
17cfc     A7 12 02 F6 | 	mov	arg01, fp
17d00     70 3D BF FD | 	call	#_converttoint
17d04     13 FB 01 FC | 	wrpin	result1, local01
17d08     A7 F0 03 F6 | 	mov	ptra, fp
17d0c     B2 00 A0 FD | 	call	#popregs_
17d10                 | _do_wrpin_ret
17d10     2D 00 64 FD | 	ret
17d14                 | 
17d14                 | ' 
17d14                 | ' ' ------------------ wxpin
17d14                 | ' 
17d14                 | ' sub do_wxpin
17d14                 | _do_wxpin
17d14     01 4A 05 F6 | 	mov	COUNT_, #1
17d18     A8 00 A0 FD | 	call	#pushregs_
17d1c     18 F0 07 F1 | 	add	ptra, #24
17d20     6C 3B BF FD | 	call	#_pop
17d24     FD 14 02 F6 | 	mov	arg02, result1
17d28     FE 12 02 F6 | 	mov	arg01, result2
17d2c     FF 26 02 F6 | 	mov	local01, result3
17d30     A7 14 62 FC | 	wrlong	arg02, fp
17d34     04 4E 05 F1 | 	add	fp, #4
17d38     A7 12 62 FC | 	wrlong	arg01, fp
17d3c     04 4E 05 F1 | 	add	fp, #4
17d40     A7 26 62 FC | 	wrlong	local01, fp
17d44     08 4E 85 F1 | 	sub	fp, #8
17d48     44 3B BF FD | 	call	#_pop
17d4c     FF 26 02 F6 | 	mov	local01, result3
17d50     0C 4E 05 F1 | 	add	fp, #12
17d54     A7 FA 61 FC | 	wrlong	result1, fp
17d58     04 4E 05 F1 | 	add	fp, #4
17d5c     A7 FC 61 FC | 	wrlong	result2, fp
17d60     04 4E 05 F1 | 	add	fp, #4
17d64     A7 26 62 FC | 	wrlong	local01, fp
17d68     08 4E 85 F1 | 	sub	fp, #8
17d6c     A7 12 02 F6 | 	mov	arg01, fp
17d70     0C 4E 85 F1 | 	sub	fp, #12
17d74     FC 3C BF FD | 	call	#_converttoint
17d78     FD 26 02 F6 | 	mov	local01, result1
17d7c     A7 12 02 F6 | 	mov	arg01, fp
17d80     F0 3C BF FD | 	call	#_converttoint
17d84     13 FB 11 FC | 	wxpin	result1, local01
17d88     A7 F0 03 F6 | 	mov	ptra, fp
17d8c     B2 00 A0 FD | 	call	#popregs_
17d90                 | _do_wxpin_ret
17d90     2D 00 64 FD | 	ret
17d94                 | 
17d94                 | ' 
17d94                 | ' ' ------------------ wypin
17d94                 | ' 
17d94                 | ' sub do_wypin
17d94                 | _do_wypin
17d94     01 4A 05 F6 | 	mov	COUNT_, #1
17d98     A8 00 A0 FD | 	call	#pushregs_
17d9c     18 F0 07 F1 | 	add	ptra, #24
17da0     EC 3A BF FD | 	call	#_pop
17da4     FD 14 02 F6 | 	mov	arg02, result1
17da8     FE 12 02 F6 | 	mov	arg01, result2
17dac     FF 26 02 F6 | 	mov	local01, result3
17db0     A7 14 62 FC | 	wrlong	arg02, fp
17db4     04 4E 05 F1 | 	add	fp, #4
17db8     A7 12 62 FC | 	wrlong	arg01, fp
17dbc     04 4E 05 F1 | 	add	fp, #4
17dc0     A7 26 62 FC | 	wrlong	local01, fp
17dc4     08 4E 85 F1 | 	sub	fp, #8
17dc8     C4 3A BF FD | 	call	#_pop
17dcc     FF 26 02 F6 | 	mov	local01, result3
17dd0     0C 4E 05 F1 | 	add	fp, #12
17dd4     A7 FA 61 FC | 	wrlong	result1, fp
17dd8     04 4E 05 F1 | 	add	fp, #4
17ddc     A7 FC 61 FC | 	wrlong	result2, fp
17de0     04 4E 05 F1 | 	add	fp, #4
17de4     A7 26 62 FC | 	wrlong	local01, fp
17de8     08 4E 85 F1 | 	sub	fp, #8
17dec     A7 12 02 F6 | 	mov	arg01, fp
17df0     0C 4E 85 F1 | 	sub	fp, #12
17df4     7C 3C BF FD | 	call	#_converttoint
17df8     FD 26 02 F6 | 	mov	local01, result1
17dfc     A7 12 02 F6 | 	mov	arg01, fp
17e00     70 3C BF FD | 	call	#_converttoint
17e04     13 FB 21 FC | 	wypin	result1, local01
17e08     A7 F0 03 F6 | 	mov	ptra, fp
17e0c     B2 00 A0 FD | 	call	#popregs_
17e10                 | _do_wypin_ret
17e10     2D 00 64 FD | 	ret
17e14                 | 
17e14                 | ' 
17e14                 | ' 
17e14                 | ' 
17e14                 | ' 
17e14                 | ' 
17e14                 | ' 
17e14                 | ' 
17e14                 | ' 
17e14                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e14                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
17e14                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e14                 | ' 
17e14                 | ' 
17e14                 | ' '------------------ Assign
17e14                 | ' 
17e14                 | ' sub do_assign
17e14                 | _do_assign
17e14     05 4A 05 F6 | 	mov	COUNT_, #5
17e18     A8 00 A0 FD | 	call	#pushregs_
17e1c     44 F0 07 F1 | 	add	ptra, #68
17e20     4A 00 00 FF 
17e24     80 E4 05 F1 | 	add	objptr, ##38016
17e28     F2 16 02 FB | 	rdlong	arg03, objptr
17e2c     0B 15 02 F6 | 	mov	arg02, arg03
17e30     01 14 66 F0 | 	shl	arg02, #1
17e34     0B 15 02 F1 | 	add	arg02, arg03
17e38     02 14 66 F0 | 	shl	arg02, #2
17e3c     03 00 00 FF 
17e40     04 E4 85 F1 | 	sub	objptr, ##1540
17e44     F2 14 02 F1 | 	add	arg02, objptr
17e48     0A 15 02 FB | 	rdlong	arg02, arg02
17e4c     18 4E 05 F1 | 	add	fp, #24
17e50     A7 14 62 FC | 	wrlong	arg02, fp
17e54                 | ' 
17e54                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
17e54                 | ' if variables(varnum).vartype<array_no_type then 
17e54     18 4E 85 F1 | 	sub	fp, #24
17e58     04 14 66 F0 | 	shl	arg02, #4
17e5c     32 00 00 FF 
17e60     84 E4 85 F1 | 	sub	objptr, ##25732
17e64     F2 14 02 F1 | 	add	arg02, objptr
17e68     0C 14 06 F1 | 	add	arg02, #12
17e6c     0A 17 02 FB | 	rdlong	arg03, arg02
17e70     00 17 16 F2 | 	cmp	arg03, #256 wc
17e74     14 00 00 FF 
17e78     F8 E5 85 F1 | 	sub	objptr, ##10744
17e7c     18 01 90 3D |  if_ae	jmp	#LR__1990
17e80     0C 3A BF FD | 	call	#_pop
17e84     A7 FA 61 FC | 	wrlong	result1, fp
17e88     04 4E 05 F1 | 	add	fp, #4
17e8c     A7 FC 61 FC | 	wrlong	result2, fp
17e90     04 4E 05 F1 | 	add	fp, #4
17e94     A7 FE 61 FC | 	wrlong	result3, fp
17e98     08 4E 85 F1 | 	sub	fp, #8
17e9c     A7 16 02 FB | 	rdlong	arg03, fp
17ea0     04 4E 05 F1 | 	add	fp, #4
17ea4     A7 14 02 FB | 	rdlong	arg02, fp
17ea8     14 4E 05 F1 | 	add	fp, #20
17eac     A7 12 02 FB | 	rdlong	arg01, fp
17eb0     04 12 66 F0 | 	shl	arg01, #4
17eb4     14 00 00 FF 
17eb8     F8 E5 05 F1 | 	add	objptr, ##10744
17ebc     F2 12 02 F1 | 	add	arg01, objptr
17ec0     04 12 06 F1 | 	add	arg01, #4
17ec4     09 17 62 FC | 	wrlong	arg03, arg01
17ec8     A7 16 02 FB | 	rdlong	arg03, fp
17ecc     04 16 66 F0 | 	shl	arg03, #4
17ed0     F2 16 02 F1 | 	add	arg03, objptr
17ed4     08 16 06 F1 | 	add	arg03, #8
17ed8     0B 15 62 FC | 	wrlong	arg02, arg03
17edc     A7 16 02 FB | 	rdlong	arg03, fp
17ee0     04 16 66 F0 | 	shl	arg03, #4
17ee4     F2 16 02 F1 | 	add	arg03, objptr
17ee8     10 4E 85 F1 | 	sub	fp, #16
17eec     A7 14 02 FB | 	rdlong	arg02, fp
17ef0     0C 16 06 F1 | 	add	arg03, #12
17ef4     0B 15 62 FC | 	wrlong	arg02, arg03
17ef8                 | '   t1=pop() 
17ef8                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
17ef8                 | '   if variables(varnum).vartype<>result_string2 then return
17ef8     10 4E 05 F1 | 	add	fp, #16
17efc     A7 16 02 FB | 	rdlong	arg03, fp
17f00     18 4E 85 F1 | 	sub	fp, #24
17f04     04 16 66 F0 | 	shl	arg03, #4
17f08     F2 16 02 F1 | 	add	arg03, objptr
17f0c     0C 16 06 F1 | 	add	arg03, #12
17f10     0B 17 02 FB | 	rdlong	arg03, arg03
17f14     2B 16 0E F2 | 	cmp	arg03, #43 wz
17f18     14 00 00 FF 
17f1c     F8 E5 85 F1 | 	sub	objptr, ##10744
17f20     EC 04 90 5D |  if_ne	jmp	#LR__2013
17f24     18 4E 05 F1 | 	add	fp, #24
17f28     A7 16 02 FB | 	rdlong	arg03, fp
17f2c     0B 27 02 F6 | 	mov	local01, arg03
17f30     04 26 66 F0 | 	shl	local01, #4
17f34     14 00 00 FF 
17f38     F8 E5 05 F1 | 	add	objptr, ##10744
17f3c     F2 26 02 F1 | 	add	local01, objptr
17f40     18 4E 85 F1 | 	sub	fp, #24
17f44     04 16 66 F0 | 	shl	arg03, #4
17f48     F2 16 02 F1 | 	add	arg03, objptr
17f4c     04 16 06 F1 | 	add	arg03, #4
17f50     0B 13 02 FB | 	rdlong	arg01, arg03
17f54     14 00 00 FF 
17f58     F8 E5 85 F1 | 	sub	objptr, ##10744
17f5c     A8 3A BF FD | 	call	#_convertstring
17f60     04 26 06 F1 | 	add	local01, #4
17f64     13 FB 61 FC | 	wrlong	result1, local01
17f68     18 4E 05 F1 | 	add	fp, #24
17f6c     A7 26 02 FB | 	rdlong	local01, fp
17f70     18 4E 85 F1 | 	sub	fp, #24
17f74     04 26 66 F0 | 	shl	local01, #4
17f78     14 00 00 FF 
17f7c     F8 E5 05 F1 | 	add	objptr, ##10744
17f80     F2 26 02 F1 | 	add	local01, objptr
17f84     0C 26 06 F1 | 	add	local01, #12
17f88     13 3F 68 FC | 	wrlong	#31, local01
17f8c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
17f8c                 | '   variables(varnum).vartype=result_string
17f8c                 | '   return
17f8c     14 00 00 FF 
17f90     F8 E5 85 F1 | 	sub	objptr, ##10744
17f94     78 04 90 FD | 	jmp	#LR__2013
17f98                 | LR__1990
17f98                 | ' for i=0 to 2 : arrid(i)=0 : next i
17f98     1C 4E 05 F1 | 	add	fp, #28
17f9c     A7 00 68 FC | 	wrlong	#0, fp
17fa0     97 16 48 FB | 	callpa	#(@LR__1992-@LR__1991)>>2,fcache_load_ptr_
17fa4                 | LR__1991
17fa4     A7 26 02 FB | 	rdlong	local01, fp
17fa8     02 26 66 F0 | 	shl	local01, #2
17fac     18 4E 05 F1 | 	add	fp, #24
17fb0     A7 26 02 F1 | 	add	local01, fp
17fb4     13 01 68 FC | 	wrlong	#0, local01
17fb8     18 4E 85 F1 | 	sub	fp, #24
17fbc     A7 26 02 FB | 	rdlong	local01, fp
17fc0     01 26 06 F1 | 	add	local01, #1
17fc4     A7 26 62 FC | 	wrlong	local01, fp
17fc8     03 26 16 F2 | 	cmp	local01, #3 wc
17fcc     D4 FF 9F CD |  if_b	jmp	#LR__1991
17fd0                 | LR__1992
17fd0     4A 00 00 FF 
17fd4     80 E4 05 F1 | 	add	objptr, ##38016
17fd8     F2 16 02 FB | 	rdlong	arg03, objptr
17fdc     0B 27 02 F6 | 	mov	local01, arg03
17fe0     01 26 66 F0 | 	shl	local01, #1
17fe4     0B 27 02 F1 | 	add	local01, arg03
17fe8     02 26 66 F0 | 	shl	local01, #2
17fec     03 00 00 FF 
17ff0     04 E4 85 F1 | 	sub	objptr, ##1540
17ff4     F2 26 02 F1 | 	add	local01, objptr
17ff8     04 26 06 F1 | 	add	local01, #4
17ffc     13 29 02 FB | 	rdlong	local02, local01
18000     04 4E 05 F1 | 	add	fp, #4
18004     A7 28 62 FC | 	wrlong	local02, fp
18008     20 4E 85 F1 | 	sub	fp, #32
1800c     47 00 00 FF 
18010     7C E4 85 F1 | 	sub	objptr, ##36476
18014     78 38 BF FD | 	call	#_pop
18018     A7 FA 61 FC | 	wrlong	result1, fp
1801c     04 4E 05 F1 | 	add	fp, #4
18020     A7 FC 61 FC | 	wrlong	result2, fp
18024     04 4E 05 F1 | 	add	fp, #4
18028     A7 FE 61 FC | 	wrlong	result3, fp
1802c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1802c                 | ' t1=pop() ' var value
1802c                 | ' if numpar>0 then
1802c     18 4E 05 F1 | 	add	fp, #24
18030     A7 2A 02 FB | 	rdlong	local03, fp
18034     20 4E 85 F1 | 	sub	fp, #32
18038     01 2A 16 F2 | 	cmp	local03, #1 wc
1803c     78 00 90 CD |  if_b	jmp	#LR__1995
18040                 | '   for i=numpar to 1 step -1
18040     20 4E 05 F1 | 	add	fp, #32
18044     A7 2C 0A FB | 	rdlong	local04, fp wz
18048     04 4E 85 F1 | 	sub	fp, #4
1804c     A7 2C 62 FC | 	wrlong	local04, fp
18050     1C 4E 85 F1 | 	sub	fp, #28
18054     60 00 90 AD |  if_e	jmp	#LR__1994
18058                 | LR__1993
18058     34 38 BF FD | 	call	#_pop
1805c     0C 4E 05 F1 | 	add	fp, #12
18060     A7 FA 61 FC | 	wrlong	result1, fp
18064     04 4E 05 F1 | 	add	fp, #4
18068     A7 FC 61 FC | 	wrlong	result2, fp
1806c     04 4E 05 F1 | 	add	fp, #4
18070     A7 FE 61 FC | 	wrlong	result3, fp
18074     08 4E 05 F1 | 	add	fp, #8
18078     A7 2A 02 FB | 	rdlong	local03, fp
1807c     01 2A 86 F1 | 	sub	local03, #1
18080     02 2A 66 F0 | 	shl	local03, #2
18084     18 4E 05 F1 | 	add	fp, #24
18088     A7 2A 02 F1 | 	add	local03, fp
1808c     28 4E 85 F1 | 	sub	fp, #40
18090     A7 12 02 F6 | 	mov	arg01, fp
18094     0C 4E 85 F1 | 	sub	fp, #12
18098     D8 39 BF FD | 	call	#_converttoint
1809c     15 FB 61 FC | 	wrlong	result1, local03
180a0     1C 4E 05 F1 | 	add	fp, #28
180a4     A7 2C 02 FB | 	rdlong	local04, fp
180a8     01 2C 8E F1 | 	sub	local04, #1 wz
180ac     A7 2C 62 FC | 	wrlong	local04, fp
180b0     1C 4E 85 F1 | 	sub	fp, #28
180b4     A0 FF 9F 5D |  if_ne	jmp	#LR__1993
180b8                 | LR__1994
180b8                 | LR__1995
180b8     18 4E 05 F1 | 	add	fp, #24
180bc     A7 26 02 FB | 	rdlong	local01, fp
180c0     04 26 66 F0 | 	shl	local01, #4
180c4     14 00 00 FF 
180c8     F8 E5 05 F1 | 	add	objptr, ##10744
180cc     F2 26 02 F1 | 	add	local01, objptr
180d0     04 26 06 F1 | 	add	local01, #4
180d4     13 13 02 FB | 	rdlong	arg01, local01
180d8     0C 4E 05 F1 | 	add	fp, #12
180dc     A7 12 62 FC | 	wrlong	arg01, fp
180e0     24 4E 85 F1 | 	sub	fp, #36
180e4     14 00 00 FF 
180e8     F8 E5 85 F1 | 	sub	objptr, ##10744
180ec     C0 64 B0 FD | 	call	#_pslpeek
180f0     FD 2C 32 F9 | 	getword	local04, result1, #0
180f4     28 4E 05 F1 | 	add	fp, #40
180f8     A7 2C 62 FC | 	wrlong	local04, fp
180fc     04 4E 85 F1 | 	sub	fp, #4
18100     A7 12 02 FB | 	rdlong	arg01, fp
18104     24 4E 85 F1 | 	sub	fp, #36
18108     02 12 06 F1 | 	add	arg01, #2
1810c     48 64 B0 FD | 	call	#_pspeek
18110     FD FA E1 F8 | 	getbyte	result1, result1, #0
18114     2C 4E 05 F1 | 	add	fp, #44
18118     A7 FA 61 FC | 	wrlong	result1, fp
1811c                 | ' esize=pspeek(arrptr+2)
1811c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1811c     08 4E 85 F1 | 	sub	fp, #8
18120     A7 12 02 FB | 	rdlong	arg01, fp
18124     24 4E 85 F1 | 	sub	fp, #36
18128     04 12 06 F1 | 	add	arg01, #4
1812c     80 64 B0 FD | 	call	#_pslpeek
18130     FD 2C 02 F6 | 	mov	local04, result1
18134     34 4E 05 F1 | 	add	fp, #52
18138     A7 26 02 FB | 	rdlong	local01, fp
1813c     34 4E 85 F1 | 	sub	fp, #52
18140     16 27 12 F2 | 	cmp	local01, local04 wc
18144     54 00 90 3D |  if_ae	jmp	#LR__1996
18148     24 4E 05 F1 | 	add	fp, #36
1814c     A7 12 02 FB | 	rdlong	arg01, fp
18150     24 4E 85 F1 | 	sub	fp, #36
18154     08 12 06 F1 | 	add	arg01, #8
18158     54 64 B0 FD | 	call	#_pslpeek
1815c     FD 26 02 F6 | 	mov	local01, result1
18160     38 4E 05 F1 | 	add	fp, #56
18164     A7 2C 02 FB | 	rdlong	local04, fp
18168     38 4E 85 F1 | 	sub	fp, #56
1816c     13 2D 12 F2 | 	cmp	local04, local01 wc
18170     28 00 90 3D |  if_ae	jmp	#LR__1996
18174     24 4E 05 F1 | 	add	fp, #36
18178     A7 12 02 FB | 	rdlong	arg01, fp
1817c     24 4E 85 F1 | 	sub	fp, #36
18180     0C 12 06 F1 | 	add	arg01, #12
18184     28 64 B0 FD | 	call	#_pslpeek
18188     3C 4E 05 F1 | 	add	fp, #60
1818c     A7 2C 02 FB | 	rdlong	local04, fp
18190     3C 4E 85 F1 | 	sub	fp, #60
18194     FD 2C 12 F2 | 	cmp	local04, result1 wc
18198     10 00 90 CD |  if_b	jmp	#LR__1997
1819c                 | LR__1996
1819c     31 12 06 F6 | 	mov	arg01, #49
181a0     00 14 06 F6 | 	mov	arg02, #0
181a4     4C 61 B0 FD | 	call	#_printerror
181a8     64 02 90 FD | 	jmp	#LR__2013
181ac                 | LR__1997
181ac     24 4E 05 F1 | 	add	fp, #36
181b0     A7 12 02 FB | 	rdlong	arg01, fp
181b4     09 2D 02 F6 | 	mov	local04, arg01
181b8     10 2C 06 F1 | 	add	local04, #16
181bc     24 4E 85 F1 | 	sub	fp, #36
181c0     04 12 06 F1 | 	add	arg01, #4
181c4     E8 63 B0 FD | 	call	#_pslpeek
181c8     FD 26 02 F6 | 	mov	local01, result1
181cc     38 4E 05 F1 | 	add	fp, #56
181d0     A7 28 02 FB | 	rdlong	local02, fp
181d4     14 27 02 FD | 	qmul	local01, local02
181d8     04 4E 85 F1 | 	sub	fp, #4
181dc     A7 2A 02 FB | 	rdlong	local03, fp
181e0     10 4E 85 F1 | 	sub	fp, #16
181e4     A7 12 02 FB | 	rdlong	arg01, fp
181e8     24 4E 85 F1 | 	sub	fp, #36
181ec     08 12 06 F1 | 	add	arg01, #8
181f0     18 28 62 FD | 	getqx	local02
181f4     14 2B 02 F1 | 	add	local03, local02
181f8     B4 63 B0 FD | 	call	#_pslpeek
181fc     FD 28 02 F6 | 	mov	local02, result1
18200     24 4E 05 F1 | 	add	fp, #36
18204     A7 12 02 FB | 	rdlong	arg01, fp
18208     24 4E 85 F1 | 	sub	fp, #36
1820c     04 12 06 F1 | 	add	arg01, #4
18210     9C 63 B0 FD | 	call	#_pslpeek
18214     FD 28 02 FD | 	qmul	local02, result1
18218     3C 4E 05 F1 | 	add	fp, #60
1821c     A7 28 02 FB | 	rdlong	local02, fp
18220     18 26 62 FD | 	getqx	local01
18224     14 27 02 FD | 	qmul	local01, local02
18228     10 4E 85 F1 | 	sub	fp, #16
1822c     A7 28 02 FB | 	rdlong	local02, fp
18230     18 26 62 FD | 	getqx	local01
18234     13 2B 02 F1 | 	add	local03, local01
18238     15 29 02 FD | 	qmul	local02, local03
1823c     04 4E 05 F1 | 	add	fp, #4
18240                 | ' 
18240                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
18240                 | ' select case arrtype
18240     18 2A 62 FD | 	getqx	local03
18244     15 2D 02 F1 | 	add	local04, local03
18248     A7 2C 62 FC | 	wrlong	local04, fp
1824c     08 4E 85 F1 | 	sub	fp, #8
18250     A7 2E 02 FB | 	rdlong	local05, fp
18254     28 4E 85 F1 | 	sub	fp, #40
18258     00 2F 86 F1 | 	sub	local05, #256
1825c     0C 2E 26 F3 | 	fle	local05, #12
18260     30 2E 62 FD | 	jmprel	local05
18264                 | LR__1998
18264     30 00 90 FD | 	jmp	#LR__1999
18268     58 00 90 FD | 	jmp	#LR__2000
1826c     6C 00 90 FD | 	jmp	#LR__2001
18270     80 00 90 FD | 	jmp	#LR__2002
18274     B0 00 90 FD | 	jmp	#LR__2003
18278     E0 00 90 FD | 	jmp	#LR__2004
1827c     F4 00 90 FD | 	jmp	#LR__2005
18280     08 01 90 FD | 	jmp	#LR__2006
18284     1C 01 90 FD | 	jmp	#LR__2007
18288     30 01 90 FD | 	jmp	#LR__2008
1828c     44 01 90 FD | 	jmp	#LR__2009
18290     58 01 90 FD | 	jmp	#LR__2010
18294     6C 01 90 FD | 	jmp	#LR__2011
18298                 | LR__1999
18298     A7 12 02 F6 | 	mov	arg01, fp
1829c     30 4E 05 F1 | 	add	fp, #48
182a0     A7 14 02 FB | 	rdlong	arg02, fp
182a4     30 4E 85 F1 | 	sub	fp, #48
182a8     0C 16 06 F6 | 	mov	arg03, #12
182ac     0B 00 00 FF 
182b0     CC E4 05 F1 | 	add	objptr, ##5836
182b4     B8 8D B0 FD | 	call	#_psram_spin2_write
182b8     0B 00 00 FF 
182bc     CC E4 85 F1 | 	sub	objptr, ##5836
182c0     4C 01 90 FD | 	jmp	#LR__2012
182c4                 | LR__2000
182c4     30 4E 05 F1 | 	add	fp, #48
182c8     A7 12 02 FB | 	rdlong	arg01, fp
182cc     30 4E 85 F1 | 	sub	fp, #48
182d0     A7 14 02 FB | 	rdlong	arg02, fp
182d4     38 62 B0 FD | 	call	#_pspoke
182d8     34 01 90 FD | 	jmp	#LR__2012
182dc                 | LR__2001
182dc     30 4E 05 F1 | 	add	fp, #48
182e0     A7 12 02 FB | 	rdlong	arg01, fp
182e4     30 4E 85 F1 | 	sub	fp, #48
182e8     A7 14 02 FB | 	rdlong	arg02, fp
182ec     20 62 B0 FD | 	call	#_pspoke
182f0     1C 01 90 FD | 	jmp	#LR__2012
182f4                 | LR__2002
182f4     30 4E 05 F1 | 	add	fp, #48
182f8     A7 12 02 FB | 	rdlong	arg01, fp
182fc     30 4E 85 F1 | 	sub	fp, #48
18300     A7 14 02 FB | 	rdlong	arg02, fp
18304     08 62 B0 FD | 	call	#_pspoke
18308     30 4E 05 F1 | 	add	fp, #48
1830c     A7 12 02 FB | 	rdlong	arg01, fp
18310     30 4E 85 F1 | 	sub	fp, #48
18314     01 12 06 F1 | 	add	arg01, #1
18318     A7 14 02 FB | 	rdlong	arg02, fp
1831c     08 14 46 F0 | 	shr	arg02, #8
18320     EC 61 B0 FD | 	call	#_pspoke
18324     E8 00 90 FD | 	jmp	#LR__2012
18328                 | LR__2003
18328     30 4E 05 F1 | 	add	fp, #48
1832c     A7 12 02 FB | 	rdlong	arg01, fp
18330     30 4E 85 F1 | 	sub	fp, #48
18334     A7 14 02 FB | 	rdlong	arg02, fp
18338     D4 61 B0 FD | 	call	#_pspoke
1833c     30 4E 05 F1 | 	add	fp, #48
18340     A7 12 02 FB | 	rdlong	arg01, fp
18344     30 4E 85 F1 | 	sub	fp, #48
18348     01 12 06 F1 | 	add	arg01, #1
1834c     A7 14 02 FB | 	rdlong	arg02, fp
18350     08 14 46 F0 | 	shr	arg02, #8
18354     B8 61 B0 FD | 	call	#_pspoke
18358     B4 00 90 FD | 	jmp	#LR__2012
1835c                 | LR__2004
1835c     30 4E 05 F1 | 	add	fp, #48
18360     A7 12 02 FB | 	rdlong	arg01, fp
18364     30 4E 85 F1 | 	sub	fp, #48
18368     A7 14 02 FB | 	rdlong	arg02, fp
1836c     10 61 B0 FD | 	call	#_pslpoke
18370     9C 00 90 FD | 	jmp	#LR__2012
18374                 | LR__2005
18374     30 4E 05 F1 | 	add	fp, #48
18378     A7 12 02 FB | 	rdlong	arg01, fp
1837c     30 4E 85 F1 | 	sub	fp, #48
18380     A7 14 02 FB | 	rdlong	arg02, fp
18384     F8 60 B0 FD | 	call	#_pslpoke
18388     84 00 90 FD | 	jmp	#LR__2012
1838c                 | LR__2006
1838c     30 4E 05 F1 | 	add	fp, #48
18390     A7 12 02 FB | 	rdlong	arg01, fp
18394     30 4E 85 F1 | 	sub	fp, #48
18398     A7 14 02 FB | 	rdlong	arg02, fp
1839c     E0 60 B0 FD | 	call	#_pslpoke
183a0     6C 00 90 FD | 	jmp	#LR__2012
183a4                 | LR__2007
183a4     30 4E 05 F1 | 	add	fp, #48
183a8     A7 12 02 FB | 	rdlong	arg01, fp
183ac     30 4E 85 F1 | 	sub	fp, #48
183b0     A7 14 02 FB | 	rdlong	arg02, fp
183b4     C8 60 B0 FD | 	call	#_pslpoke
183b8     54 00 90 FD | 	jmp	#LR__2012
183bc                 | LR__2008
183bc     30 4E 05 F1 | 	add	fp, #48
183c0     A7 12 02 FB | 	rdlong	arg01, fp
183c4     30 4E 85 F1 | 	sub	fp, #48
183c8     A7 14 02 FB | 	rdlong	arg02, fp
183cc     B0 60 B0 FD | 	call	#_pslpoke
183d0     3C 00 90 FD | 	jmp	#LR__2012
183d4                 | LR__2009
183d4     30 4E 05 F1 | 	add	fp, #48
183d8     A7 12 02 FB | 	rdlong	arg01, fp
183dc     30 4E 85 F1 | 	sub	fp, #48
183e0     A7 14 02 FB | 	rdlong	arg02, fp
183e4     98 60 B0 FD | 	call	#_pslpoke
183e8     24 00 90 FD | 	jmp	#LR__2012
183ec                 | LR__2010
183ec     30 4E 05 F1 | 	add	fp, #48
183f0     A7 12 02 FB | 	rdlong	arg01, fp
183f4     30 4E 85 F1 | 	sub	fp, #48
183f8     A7 14 02 FB | 	rdlong	arg02, fp
183fc     80 60 B0 FD | 	call	#_pslpoke
18400     0C 00 90 FD | 	jmp	#LR__2012
18404                 | LR__2011
18404     32 12 06 F6 | 	mov	arg01, #50
18408     00 14 06 F6 | 	mov	arg02, #0
1840c     E4 5E B0 FD | 	call	#_printerror
18410                 | LR__2012
18410                 | LR__2013
18410     A7 F0 03 F6 | 	mov	ptra, fp
18414     B2 00 A0 FD | 	call	#popregs_
18418                 | _do_assign_ret
18418     2D 00 64 FD | 	ret
1841c                 | 
1841c                 | ' 
1841c                 | ' 
1841c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1841c                 | ' 
1841c                 | ' sub do_getvar
1841c                 | _do_getvar
1841c     04 4A 05 F6 | 	mov	COUNT_, #4
18420     A8 00 A0 FD | 	call	#pushregs_
18424     3C F0 07 F1 | 	add	ptra, #60
18428                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
18428     4A 00 00 FF 
1842c     80 E4 05 F1 | 	add	objptr, ##38016
18430     F2 26 02 FB | 	rdlong	local01, objptr
18434     13 17 02 F6 | 	mov	arg03, local01
18438     01 16 66 F0 | 	shl	arg03, #1
1843c     13 17 02 F1 | 	add	arg03, local01
18440     02 16 66 F0 | 	shl	arg03, #2
18444     03 00 00 FF 
18448     04 E4 85 F1 | 	sub	objptr, ##1540
1844c     F2 16 02 F1 | 	add	arg03, objptr
18450     04 16 06 F1 | 	add	arg03, #4
18454     0B 17 0A FB | 	rdlong	arg03, arg03 wz
18458     47 00 00 FF 
1845c     7C E4 85 F1 | 	sub	objptr, ##36476
18460     C4 00 90 5D |  if_ne	jmp	#LR__2021
18464     4A 00 00 FF 
18468     80 E4 05 F1 | 	add	objptr, ##38016
1846c     F2 26 02 FB | 	rdlong	local01, objptr
18470     13 13 02 F6 | 	mov	arg01, local01
18474     01 12 66 F0 | 	shl	arg01, #1
18478     13 13 02 F1 | 	add	arg01, local01
1847c     02 12 66 F0 | 	shl	arg01, #2
18480     03 00 00 FF 
18484     04 E4 85 F1 | 	sub	objptr, ##1540
18488     F2 12 02 F1 | 	add	arg01, objptr
1848c     09 27 02 FB | 	rdlong	local01, arg01
18490     04 26 66 F0 | 	shl	local01, #4
18494     32 00 00 FF 
18498     84 E4 85 F1 | 	sub	objptr, ##25732
1849c     F2 26 02 F1 | 	add	local01, objptr
184a0     04 26 06 F1 | 	add	local01, #4
184a4     13 13 02 FB | 	rdlong	arg01, local01
184a8     04 26 06 F1 | 	add	local01, #4
184ac     13 27 02 FB | 	rdlong	local01, local01
184b0     A7 12 62 FC | 	wrlong	arg01, fp
184b4     04 4E 05 F1 | 	add	fp, #4
184b8     A7 26 62 FC | 	wrlong	local01, fp
184bc     35 00 00 FF 
184c0     88 E4 05 F1 | 	add	objptr, ##27272
184c4     F2 26 02 FB | 	rdlong	local01, objptr
184c8     13 13 02 F6 | 	mov	arg01, local01
184cc     01 12 66 F0 | 	shl	arg01, #1
184d0     13 13 02 F1 | 	add	arg01, local01
184d4     02 12 66 F0 | 	shl	arg01, #2
184d8     03 00 00 FF 
184dc     04 E4 85 F1 | 	sub	objptr, ##1540
184e0     F2 12 02 F1 | 	add	arg01, objptr
184e4     09 27 02 FB | 	rdlong	local01, arg01
184e8     04 26 66 F0 | 	shl	local01, #4
184ec     32 00 00 FF 
184f0     84 E4 85 F1 | 	sub	objptr, ##25732
184f4     F2 26 02 F1 | 	add	local01, objptr
184f8     0C 26 06 F1 | 	add	local01, #12
184fc     13 27 02 FB | 	rdlong	local01, local01
18500     04 4E 05 F1 | 	add	fp, #4
18504     A7 26 62 FC | 	wrlong	local01, fp
18508                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
18508                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18508                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
18508     08 4E 85 F1 | 	sub	fp, #8
1850c     00 27 16 F2 | 	cmp	local01, #256 wc
18510     14 00 00 FF 
18514     F8 E5 85 F1 | 	sub	objptr, ##10744
18518     0C 00 90 3D |  if_ae	jmp	#LR__2020
1851c     A7 12 02 F6 | 	mov	arg01, fp
18520     04 34 BF FD | 	call	#_push
18524     A0 04 90 FD | 	jmp	#LR__2042
18528                 | LR__2020
18528                 | LR__2021
18528     4A 00 00 FF 
1852c     80 E4 05 F1 | 	add	objptr, ##38016
18530     F2 16 02 FB | 	rdlong	arg03, objptr
18534     0B 15 02 F6 | 	mov	arg02, arg03
18538     01 14 66 F0 | 	shl	arg02, #1
1853c     0B 15 02 F1 | 	add	arg02, arg03
18540     02 14 66 F0 | 	shl	arg02, #2
18544     03 00 00 FF 
18548     04 E4 85 F1 | 	sub	objptr, ##1540
1854c     F2 14 02 F1 | 	add	arg02, objptr
18550     0A 17 02 FB | 	rdlong	arg03, arg02
18554     04 16 66 F0 | 	shl	arg03, #4
18558     32 00 00 FF 
1855c     84 E4 85 F1 | 	sub	objptr, ##25732
18560     F2 16 02 F1 | 	add	arg03, objptr
18564     04 16 06 F1 | 	add	arg03, #4
18568     0B 13 02 FB | 	rdlong	arg01, arg03
1856c     0C 4E 05 F1 | 	add	fp, #12
18570     A7 12 62 FC | 	wrlong	arg01, fp
18574     0C 4E 85 F1 | 	sub	fp, #12
18578     14 00 00 FF 
1857c     F8 E5 85 F1 | 	sub	objptr, ##10744
18580     2C 60 B0 FD | 	call	#_pslpeek
18584     FD FA 31 F9 | 	getword	result1, result1, #0
18588     10 4E 05 F1 | 	add	fp, #16
1858c     A7 FA 61 FC | 	wrlong	result1, fp
18590     4A 00 00 FF 
18594     80 E4 05 F1 | 	add	objptr, ##38016
18598     F2 16 02 FB | 	rdlong	arg03, objptr
1859c     0B 15 02 F6 | 	mov	arg02, arg03
185a0     01 14 66 F0 | 	shl	arg02, #1
185a4     0B 15 02 F1 | 	add	arg02, arg03
185a8     02 14 66 F0 | 	shl	arg02, #2
185ac     03 00 00 FF 
185b0     04 E4 85 F1 | 	sub	objptr, ##1540
185b4     F2 14 02 F1 | 	add	arg02, objptr
185b8     04 14 06 F1 | 	add	arg02, #4
185bc     0A 17 02 FB | 	rdlong	arg03, arg02
185c0     04 4E 05 F1 | 	add	fp, #4
185c4     A7 16 62 FC | 	wrlong	arg03, fp
185c8     08 4E 85 F1 | 	sub	fp, #8
185cc     A7 12 02 FB | 	rdlong	arg01, fp
185d0     0C 4E 85 F1 | 	sub	fp, #12
185d4     02 12 06 F1 | 	add	arg01, #2
185d8     47 00 00 FF 
185dc     7C E4 85 F1 | 	sub	objptr, ##36476
185e0     74 5F B0 FD | 	call	#_pspeek
185e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
185e8     18 4E 05 F1 | 	add	fp, #24
185ec     A7 FA 61 FC | 	wrlong	result1, fp
185f0     0C 4E 85 F1 | 	sub	fp, #12
185f4     A7 12 02 FB | 	rdlong	arg01, fp
185f8     0C 4E 85 F1 | 	sub	fp, #12
185fc     04 12 06 F1 | 	add	arg01, #4
18600     AC 5F B0 FD | 	call	#_pslpeek
18604     1C 4E 05 F1 | 	add	fp, #28
18608     A7 FA 61 FC | 	wrlong	result1, fp
1860c     10 4E 85 F1 | 	sub	fp, #16
18610     A7 12 02 FB | 	rdlong	arg01, fp
18614     0C 4E 85 F1 | 	sub	fp, #12
18618     08 12 06 F1 | 	add	arg01, #8
1861c     90 5F B0 FD | 	call	#_pslpeek
18620     20 4E 05 F1 | 	add	fp, #32
18624     A7 FA 61 FC | 	wrlong	result1, fp
18628     14 4E 85 F1 | 	sub	fp, #20
1862c     A7 12 02 FB | 	rdlong	arg01, fp
18630     0C 4E 85 F1 | 	sub	fp, #12
18634     0C 12 06 F1 | 	add	arg01, #12
18638     74 5F B0 FD | 	call	#_pslpeek
1863c     24 4E 05 F1 | 	add	fp, #36
18640     A7 FA 61 FC | 	wrlong	result1, fp
18644                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
18644                 | ' esize=pspeek(arrptr+2)
18644                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
18644                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
18644                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
18644                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
18644     10 4E 85 F1 | 	sub	fp, #16
18648     A7 16 02 FB | 	rdlong	arg03, fp
1864c     14 4E 85 F1 | 	sub	fp, #20
18650     03 16 16 F2 | 	cmp	arg03, #3 wc
18654     38 00 90 CD |  if_b	jmp	#LR__2022
18658     34 32 BF FD | 	call	#_pop
1865c     FF 16 02 F6 | 	mov	arg03, result3
18660     A7 FA 61 FC | 	wrlong	result1, fp
18664     04 4E 05 F1 | 	add	fp, #4
18668     A7 FC 61 FC | 	wrlong	result2, fp
1866c     04 4E 05 F1 | 	add	fp, #4
18670     A7 16 62 FC | 	wrlong	arg03, fp
18674     08 4E 85 F1 | 	sub	fp, #8
18678     A7 12 02 F6 | 	mov	arg01, fp
1867c     F4 33 BF FD | 	call	#_converttoint
18680     30 4E 05 F1 | 	add	fp, #48
18684     A7 FA 61 FC | 	wrlong	result1, fp
18688     30 4E 85 F1 | 	sub	fp, #48
1868c     0C 00 90 FD | 	jmp	#LR__2023
18690                 | LR__2022
18690     30 4E 05 F1 | 	add	fp, #48
18694     A7 00 68 FC | 	wrlong	#0, fp
18698     30 4E 85 F1 | 	sub	fp, #48
1869c                 | LR__2023
1869c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1869c     14 4E 05 F1 | 	add	fp, #20
186a0     A7 16 02 FB | 	rdlong	arg03, fp
186a4     14 4E 85 F1 | 	sub	fp, #20
186a8     02 16 16 F2 | 	cmp	arg03, #2 wc
186ac     38 00 90 CD |  if_b	jmp	#LR__2024
186b0     DC 31 BF FD | 	call	#_pop
186b4     FF 16 02 F6 | 	mov	arg03, result3
186b8     A7 FA 61 FC | 	wrlong	result1, fp
186bc     04 4E 05 F1 | 	add	fp, #4
186c0     A7 FC 61 FC | 	wrlong	result2, fp
186c4     04 4E 05 F1 | 	add	fp, #4
186c8     A7 16 62 FC | 	wrlong	arg03, fp
186cc     08 4E 85 F1 | 	sub	fp, #8
186d0     A7 12 02 F6 | 	mov	arg01, fp
186d4     9C 33 BF FD | 	call	#_converttoint
186d8     2C 4E 05 F1 | 	add	fp, #44
186dc     A7 FA 61 FC | 	wrlong	result1, fp
186e0     2C 4E 85 F1 | 	sub	fp, #44
186e4     0C 00 90 FD | 	jmp	#LR__2025
186e8                 | LR__2024
186e8     2C 4E 05 F1 | 	add	fp, #44
186ec     A7 00 68 FC | 	wrlong	#0, fp
186f0     2C 4E 85 F1 | 	sub	fp, #44
186f4                 | LR__2025
186f4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
186f4     14 4E 05 F1 | 	add	fp, #20
186f8     A7 16 02 FB | 	rdlong	arg03, fp
186fc     14 4E 85 F1 | 	sub	fp, #20
18700     01 16 16 F2 | 	cmp	arg03, #1 wc
18704     38 00 90 CD |  if_b	jmp	#LR__2026
18708     84 31 BF FD | 	call	#_pop
1870c     FF 16 02 F6 | 	mov	arg03, result3
18710     A7 FA 61 FC | 	wrlong	result1, fp
18714     04 4E 05 F1 | 	add	fp, #4
18718     A7 FC 61 FC | 	wrlong	result2, fp
1871c     04 4E 05 F1 | 	add	fp, #4
18720     A7 16 62 FC | 	wrlong	arg03, fp
18724     08 4E 85 F1 | 	sub	fp, #8
18728     A7 12 02 F6 | 	mov	arg01, fp
1872c     44 33 BF FD | 	call	#_converttoint
18730     28 4E 05 F1 | 	add	fp, #40
18734     A7 FA 61 FC | 	wrlong	result1, fp
18738     28 4E 85 F1 | 	sub	fp, #40
1873c     0C 00 90 FD | 	jmp	#LR__2027
18740                 | LR__2026
18740     28 4E 05 F1 | 	add	fp, #40
18744     A7 00 68 FC | 	wrlong	#0, fp
18748     28 4E 85 F1 | 	sub	fp, #40
1874c                 | LR__2027
1874c     0C 4E 05 F1 | 	add	fp, #12
18750     A7 28 02 FB | 	rdlong	local02, fp
18754     1C 4E 05 F1 | 	add	fp, #28
18758     A7 2A 02 FB | 	rdlong	local03, fp
1875c     04 4E 05 F1 | 	add	fp, #4
18760     A7 FC 01 FB | 	rdlong	result2, fp
18764     10 4E 85 F1 | 	sub	fp, #16
18768     A7 FE 01 FB | 	rdlong	result3, fp
1876c     FF FC 01 FD | 	qmul	result2, result3
18770     10 28 06 F1 | 	add	local02, #16
18774     14 4E 05 F1 | 	add	fp, #20
18778     A7 FC 01 FB | 	rdlong	result2, fp
1877c     18 FA 61 FD | 	getqx	result1
18780     FF FC 01 FD | 	qmul	result2, result3
18784     FD 2A 02 F1 | 	add	local03, result1
18788     10 4E 85 F1 | 	sub	fp, #16
1878c     A7 FE 01 FB | 	rdlong	result3, fp
18790     18 FC 61 FD | 	getqx	result2
18794     FF FC 01 FD | 	qmul	result2, result3
18798     08 4E 85 F1 | 	sub	fp, #8
1879c     A7 FE 01 FB | 	rdlong	result3, fp
187a0     18 FC 61 FD | 	getqx	result2
187a4     FE 2A 02 F1 | 	add	local03, result2
187a8     FF 2A 02 FD | 	qmul	local03, result3
187ac     1C 4E 05 F1 | 	add	fp, #28
187b0                 | ' 
187b0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
187b0                 | ' 
187b0                 | ' select case vartype
187b0     18 FC 61 FD | 	getqx	result2
187b4     FE 28 02 F1 | 	add	local02, result2
187b8     A7 28 62 FC | 	wrlong	local02, fp
187bc     24 4E 85 F1 | 	sub	fp, #36
187c0     A7 2C 02 FB | 	rdlong	local04, fp
187c4     10 4E 85 F1 | 	sub	fp, #16
187c8     00 2D 86 F1 | 	sub	local04, #256
187cc     0C 2C 26 F3 | 	fle	local04, #12
187d0     30 2C 62 FD | 	jmprel	local04
187d4                 | LR__2028
187d4     30 00 90 FD | 	jmp	#LR__2029
187d8     58 00 90 FD | 	jmp	#LR__2030
187dc     8C 00 90 FD | 	jmp	#LR__2031
187e0     AC 00 90 FD | 	jmp	#LR__2032
187e4     E8 00 90 FD | 	jmp	#LR__2033
187e8     08 01 90 FD | 	jmp	#LR__2034
187ec     24 01 90 FD | 	jmp	#LR__2035
187f0     40 01 90 FD | 	jmp	#LR__2036
187f4     50 01 90 FD | 	jmp	#LR__2037
187f8     60 01 90 FD | 	jmp	#LR__2038
187fc     7C 01 90 FD | 	jmp	#LR__2039
18800     8C 01 90 FD | 	jmp	#LR__2040
18804     B8 01 90 FD | 	jmp	#LR__2041
18808                 | LR__2029
18808     A7 12 02 F6 | 	mov	arg01, fp
1880c     34 4E 05 F1 | 	add	fp, #52
18810     A7 14 02 FB | 	rdlong	arg02, fp
18814     34 4E 85 F1 | 	sub	fp, #52
18818     0C 16 06 F6 | 	mov	arg03, #12
1881c     0B 00 00 FF 
18820     CC E4 05 F1 | 	add	objptr, ##5836
18824     AC 87 B0 FD | 	call	#_psram_spin2_read1
18828     0B 00 00 FF 
1882c     CC E4 85 F1 | 	sub	objptr, ##5836
18830     8C 01 90 FD | 	jmp	#LR__2041
18834                 | LR__2030
18834     08 4E 05 F1 | 	add	fp, #8
18838     A7 38 68 FC | 	wrlong	#28, fp
1883c     2C 4E 05 F1 | 	add	fp, #44
18840     A7 12 02 FB | 	rdlong	arg01, fp
18844     34 4E 85 F1 | 	sub	fp, #52
18848     0C 5D B0 FD | 	call	#_pspeek
1884c     FD FA E1 F8 | 	getbyte	result1, result1, #0
18850     A7 FA 61 FC | 	wrlong	result1, fp
18854     80 FA 15 F2 | 	cmp	result1, #128 wc
18858     00 27 66 36 |  if_ae	neg	local01, #256
1885c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
18860     15 27 42 35 |  if_ae	or	local01, local03
18864     A7 26 62 3C |  if_ae	wrlong	local01, fp
18868     54 01 90 FD | 	jmp	#LR__2041
1886c                 | LR__2031
1886c     08 4E 05 F1 | 	add	fp, #8
18870     A7 3A 68 FC | 	wrlong	#29, fp
18874     2C 4E 05 F1 | 	add	fp, #44
18878     A7 12 02 FB | 	rdlong	arg01, fp
1887c     34 4E 85 F1 | 	sub	fp, #52
18880     D4 5C B0 FD | 	call	#_pspeek
18884     FD FA E1 F8 | 	getbyte	result1, result1, #0
18888     A7 FA 61 FC | 	wrlong	result1, fp
1888c     30 01 90 FD | 	jmp	#LR__2041
18890                 | LR__2032
18890     08 4E 05 F1 | 	add	fp, #8
18894     A7 38 68 FC | 	wrlong	#28, fp
18898     2C 4E 05 F1 | 	add	fp, #44
1889c     A7 12 02 FB | 	rdlong	arg01, fp
188a0     34 4E 85 F1 | 	sub	fp, #52
188a4     08 5D B0 FD | 	call	#_pslpeek
188a8     FD FA 31 F9 | 	getword	result1, result1, #0
188ac     A7 FA 61 FC | 	wrlong	result1, fp
188b0     40 00 00 FF 
188b4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
188b8     FF 7F 00 3F 
188bc     00 27 06 36 |  if_ae	mov	local01, ##16776960
188c0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
188c4     15 27 42 35 |  if_ae	or	local01, local03
188c8     A7 26 62 3C |  if_ae	wrlong	local01, fp
188cc     F0 00 90 FD | 	jmp	#LR__2041
188d0                 | LR__2033
188d0     08 4E 05 F1 | 	add	fp, #8
188d4     A7 3A 68 FC | 	wrlong	#29, fp
188d8     2C 4E 05 F1 | 	add	fp, #44
188dc     A7 12 02 FB | 	rdlong	arg01, fp
188e0     34 4E 85 F1 | 	sub	fp, #52
188e4     C8 5C B0 FD | 	call	#_pslpeek
188e8     FD FA 31 F9 | 	getword	result1, result1, #0
188ec     A7 FA 61 FC | 	wrlong	result1, fp
188f0     CC 00 90 FD | 	jmp	#LR__2041
188f4                 | LR__2034
188f4     08 4E 05 F1 | 	add	fp, #8
188f8     A7 38 68 FC | 	wrlong	#28, fp
188fc     2C 4E 05 F1 | 	add	fp, #44
18900     A7 12 02 FB | 	rdlong	arg01, fp
18904     34 4E 85 F1 | 	sub	fp, #52
18908     A4 5C B0 FD | 	call	#_pslpeek
1890c     A7 FA 61 FC | 	wrlong	result1, fp
18910     AC 00 90 FD | 	jmp	#LR__2041
18914                 | LR__2035
18914     08 4E 05 F1 | 	add	fp, #8
18918     A7 3A 68 FC | 	wrlong	#29, fp
1891c     2C 4E 05 F1 | 	add	fp, #44
18920     A7 12 02 FB | 	rdlong	arg01, fp
18924     34 4E 85 F1 | 	sub	fp, #52
18928     84 5C B0 FD | 	call	#_pslpeek
1892c     A7 FA 61 FC | 	wrlong	result1, fp
18930     8C 00 90 FD | 	jmp	#LR__2041
18934                 | LR__2036
18934     08 4E 05 F1 | 	add	fp, #8
18938     A7 FE 69 FC | 	wrlong	#255, fp
1893c     08 4E 85 F1 | 	sub	fp, #8
18940     A7 60 68 FC | 	wrlong	#48, fp
18944     78 00 90 FD | 	jmp	#LR__2041
18948                 | LR__2037
18948     08 4E 05 F1 | 	add	fp, #8
1894c     A7 FE 69 FC | 	wrlong	#255, fp
18950     08 4E 85 F1 | 	sub	fp, #8
18954     A7 60 68 FC | 	wrlong	#48, fp
18958     64 00 90 FD | 	jmp	#LR__2041
1895c                 | LR__2038
1895c     08 4E 05 F1 | 	add	fp, #8
18960     A7 3C 68 FC | 	wrlong	#30, fp
18964     2C 4E 05 F1 | 	add	fp, #44
18968     A7 12 02 FB | 	rdlong	arg01, fp
1896c     34 4E 85 F1 | 	sub	fp, #52
18970     3C 5C B0 FD | 	call	#_pslpeek
18974     A7 FA 61 FC | 	wrlong	result1, fp
18978     44 00 90 FD | 	jmp	#LR__2041
1897c                 | LR__2039
1897c     08 4E 05 F1 | 	add	fp, #8
18980     A7 FE 69 FC | 	wrlong	#255, fp
18984     08 4E 85 F1 | 	sub	fp, #8
18988     A7 60 68 FC | 	wrlong	#48, fp
1898c     30 00 90 FD | 	jmp	#LR__2041
18990                 | LR__2040
18990     08 4E 05 F1 | 	add	fp, #8
18994     A7 3E 68 FC | 	wrlong	#31, fp
18998     2C 4E 05 F1 | 	add	fp, #44
1899c     A7 12 02 FB | 	rdlong	arg01, fp
189a0     34 4E 85 F1 | 	sub	fp, #52
189a4     08 5C B0 FD | 	call	#_pslpeek
189a8     A7 FA 61 FC | 	wrlong	result1, fp
189ac     00 04 00 FF 
189b0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
189b4     08 4E 05 31 |  if_ae	add	fp, #8
189b8     A7 56 68 3C |  if_ae	wrlong	#43, fp
189bc     08 4E 85 31 |  if_ae	sub	fp, #8
189c0                 | LR__2041
189c0     A7 12 02 F6 | 	mov	arg01, fp
189c4     60 2F BF FD | 	call	#_push
189c8                 | LR__2042
189c8     A7 F0 03 F6 | 	mov	ptra, fp
189cc     B2 00 A0 FD | 	call	#popregs_
189d0                 | _do_getvar_ret
189d0     2D 00 64 FD | 	ret
189d4                 | 
189d4                 | ' 
189d4                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
189d4                 | ' 
189d4                 | ' sub do_getaddr
189d4                 | _do_getaddr
189d4     01 4A 05 F6 | 	mov	COUNT_, #1
189d8     A8 00 A0 FD | 	call	#pushregs_
189dc     38 F0 07 F1 | 	add	ptra, #56
189e0                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
189e0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
189e0     4A 00 00 FF 
189e4     80 E4 05 F1 | 	add	objptr, ##38016
189e8     F2 12 02 FB | 	rdlong	arg01, objptr
189ec     09 FD 01 F6 | 	mov	result2, arg01
189f0     01 FC 65 F0 | 	shl	result2, #1
189f4     09 FD 01 F1 | 	add	result2, arg01
189f8     02 FC 65 F0 | 	shl	result2, #2
189fc     03 00 00 FF 
18a00     04 E4 85 F1 | 	sub	objptr, ##1540
18a04     F2 FC 01 F1 | 	add	result2, objptr
18a08     04 FC 05 F1 | 	add	result2, #4
18a0c     FE FC 09 FB | 	rdlong	result2, result2 wz
18a10     47 00 00 FF 
18a14     7C E4 85 F1 | 	sub	objptr, ##36476
18a18     C4 00 90 5D |  if_ne	jmp	#LR__2050
18a1c     4A 00 00 FF 
18a20     80 E4 05 F1 | 	add	objptr, ##38016
18a24     F2 12 02 FB | 	rdlong	arg01, objptr
18a28     09 FD 01 F6 | 	mov	result2, arg01
18a2c     01 FC 65 F0 | 	shl	result2, #1
18a30     09 FD 01 F1 | 	add	result2, arg01
18a34     02 FC 65 F0 | 	shl	result2, #2
18a38     03 00 00 FF 
18a3c     04 E4 85 F1 | 	sub	objptr, ##1540
18a40     F2 FC 01 F1 | 	add	result2, objptr
18a44     FE 12 02 FB | 	rdlong	arg01, result2
18a48     04 12 66 F0 | 	shl	arg01, #4
18a4c     32 00 00 FF 
18a50     84 E4 85 F1 | 	sub	objptr, ##25732
18a54     F2 12 02 F1 | 	add	arg01, objptr
18a58     0C 12 06 F1 | 	add	arg01, #12
18a5c     09 13 02 FB | 	rdlong	arg01, arg01
18a60     08 4E 05 F1 | 	add	fp, #8
18a64     A7 12 62 FC | 	wrlong	arg01, fp
18a68                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18a68                 | '    if t1.result_type>=array_no_type then goto 2200
18a68     08 4E 85 F1 | 	sub	fp, #8
18a6c     00 13 16 F2 | 	cmp	arg01, #256 wc
18a70     14 00 00 FF 
18a74     F8 E5 85 F1 | 	sub	objptr, ##10744
18a78     64 00 90 3D |  if_ae	jmp	#LR__2051
18a7c     4A 00 00 FF 
18a80     80 E4 05 F1 | 	add	objptr, ##38016
18a84     F2 12 02 FB | 	rdlong	arg01, objptr
18a88     09 FB 01 F6 | 	mov	result1, arg01
18a8c     01 FA 65 F0 | 	shl	result1, #1
18a90     09 FB 01 F1 | 	add	result1, arg01
18a94     02 FA 65 F0 | 	shl	result1, #2
18a98     03 00 00 FF 
18a9c     04 E4 85 F1 | 	sub	objptr, ##1540
18aa0     F2 FA 01 F1 | 	add	result1, objptr
18aa4     FD FA 01 FB | 	rdlong	result1, result1
18aa8     04 FA 65 F0 | 	shl	result1, #4
18aac     32 00 00 FF 
18ab0     84 E4 85 F1 | 	sub	objptr, ##25732
18ab4     F2 FA 01 F1 | 	add	result1, objptr
18ab8     04 FA 05 F1 | 	add	result1, #4
18abc     14 00 00 FF 
18ac0     F8 E5 85 F1 | 	sub	objptr, ##10744
18ac4     A7 FA 61 FC | 	wrlong	result1, fp
18ac8     08 4E 05 F1 | 	add	fp, #8
18acc     A7 3A 68 FC | 	wrlong	#29, fp
18ad0     08 4E 85 F1 | 	sub	fp, #8
18ad4     A7 12 02 F6 | 	mov	arg01, fp
18ad8     4C 2E BF FD | 	call	#_push
18adc                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
18adc                 | '   t1.result_type=result_uint
18adc                 | '   push t1 : return
18adc     D8 02 90 FD | 	jmp	#LR__2060
18ae0                 | LR__2050
18ae0                 | LR__2051
18ae0     4A 00 00 FF 
18ae4     80 E4 05 F1 | 	add	objptr, ##38016
18ae8     F2 FE 01 FB | 	rdlong	result3, objptr
18aec     FF 12 02 F6 | 	mov	arg01, result3
18af0     01 12 66 F0 | 	shl	arg01, #1
18af4     FF 12 02 F1 | 	add	arg01, result3
18af8     02 12 66 F0 | 	shl	arg01, #2
18afc     03 00 00 FF 
18b00     04 E4 85 F1 | 	sub	objptr, ##1540
18b04     F2 12 02 F1 | 	add	arg01, objptr
18b08     09 13 02 FB | 	rdlong	arg01, arg01
18b0c     04 12 66 F0 | 	shl	arg01, #4
18b10     32 00 00 FF 
18b14     84 E4 85 F1 | 	sub	objptr, ##25732
18b18     F2 12 02 F1 | 	add	arg01, objptr
18b1c     04 12 06 F1 | 	add	arg01, #4
18b20     09 13 02 FB | 	rdlong	arg01, arg01
18b24     0C 4E 05 F1 | 	add	fp, #12
18b28     A7 12 62 FC | 	wrlong	arg01, fp
18b2c     0C 4E 85 F1 | 	sub	fp, #12
18b30     14 00 00 FF 
18b34     F8 E5 85 F1 | 	sub	objptr, ##10744
18b38     74 5A B0 FD | 	call	#_pslpeek
18b3c     FD FA 31 F9 | 	getword	result1, result1, #0
18b40     10 4E 05 F1 | 	add	fp, #16
18b44     A7 FA 61 FC | 	wrlong	result1, fp
18b48     4A 00 00 FF 
18b4c     80 E4 05 F1 | 	add	objptr, ##38016
18b50     F2 FE 01 FB | 	rdlong	result3, objptr
18b54     FF 12 02 F6 | 	mov	arg01, result3
18b58     01 12 66 F0 | 	shl	arg01, #1
18b5c     FF 12 02 F1 | 	add	arg01, result3
18b60     02 12 66 F0 | 	shl	arg01, #2
18b64     03 00 00 FF 
18b68     04 E4 85 F1 | 	sub	objptr, ##1540
18b6c     F2 12 02 F1 | 	add	arg01, objptr
18b70     04 12 06 F1 | 	add	arg01, #4
18b74     09 13 02 FB | 	rdlong	arg01, arg01
18b78     04 4E 05 F1 | 	add	fp, #4
18b7c     A7 12 62 FC | 	wrlong	arg01, fp
18b80     08 4E 85 F1 | 	sub	fp, #8
18b84     A7 12 02 FB | 	rdlong	arg01, fp
18b88     0C 4E 85 F1 | 	sub	fp, #12
18b8c     02 12 06 F1 | 	add	arg01, #2
18b90     47 00 00 FF 
18b94     7C E4 85 F1 | 	sub	objptr, ##36476
18b98     BC 59 B0 FD | 	call	#_pspeek
18b9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
18ba0     18 4E 05 F1 | 	add	fp, #24
18ba4     A7 FA 61 FC | 	wrlong	result1, fp
18ba8     0C 4E 85 F1 | 	sub	fp, #12
18bac     A7 12 02 FB | 	rdlong	arg01, fp
18bb0     0C 4E 85 F1 | 	sub	fp, #12
18bb4     04 12 06 F1 | 	add	arg01, #4
18bb8     F4 59 B0 FD | 	call	#_pslpeek
18bbc     1C 4E 05 F1 | 	add	fp, #28
18bc0     A7 FA 61 FC | 	wrlong	result1, fp
18bc4     10 4E 85 F1 | 	sub	fp, #16
18bc8     A7 12 02 FB | 	rdlong	arg01, fp
18bcc     0C 4E 85 F1 | 	sub	fp, #12
18bd0     08 12 06 F1 | 	add	arg01, #8
18bd4     D8 59 B0 FD | 	call	#_pslpeek
18bd8     20 4E 05 F1 | 	add	fp, #32
18bdc     A7 FA 61 FC | 	wrlong	result1, fp
18be0     14 4E 85 F1 | 	sub	fp, #20
18be4     A7 12 02 FB | 	rdlong	arg01, fp
18be8     0C 4E 85 F1 | 	sub	fp, #12
18bec     0C 12 06 F1 | 	add	arg01, #12
18bf0     BC 59 B0 FD | 	call	#_pslpeek
18bf4     24 4E 05 F1 | 	add	fp, #36
18bf8     A7 FA 61 FC | 	wrlong	result1, fp
18bfc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
18bfc                 | ' esize=pspeek(arrptr+2)
18bfc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
18bfc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
18bfc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
18bfc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
18bfc     10 4E 85 F1 | 	sub	fp, #16
18c00     A7 12 02 FB | 	rdlong	arg01, fp
18c04     14 4E 85 F1 | 	sub	fp, #20
18c08     03 12 16 F2 | 	cmp	arg01, #3 wc
18c0c     34 00 90 CD |  if_b	jmp	#LR__2052
18c10     7C 2C BF FD | 	call	#_pop
18c14     A7 FA 61 FC | 	wrlong	result1, fp
18c18     04 4E 05 F1 | 	add	fp, #4
18c1c     A7 FC 61 FC | 	wrlong	result2, fp
18c20     04 4E 05 F1 | 	add	fp, #4
18c24     A7 FE 61 FC | 	wrlong	result3, fp
18c28     08 4E 85 F1 | 	sub	fp, #8
18c2c     A7 12 02 F6 | 	mov	arg01, fp
18c30     40 2E BF FD | 	call	#_converttoint
18c34     30 4E 05 F1 | 	add	fp, #48
18c38     A7 FA 61 FC | 	wrlong	result1, fp
18c3c     30 4E 85 F1 | 	sub	fp, #48
18c40     0C 00 90 FD | 	jmp	#LR__2053
18c44                 | LR__2052
18c44     30 4E 05 F1 | 	add	fp, #48
18c48     A7 00 68 FC | 	wrlong	#0, fp
18c4c     30 4E 85 F1 | 	sub	fp, #48
18c50                 | LR__2053
18c50                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
18c50     14 4E 05 F1 | 	add	fp, #20
18c54     A7 12 02 FB | 	rdlong	arg01, fp
18c58     14 4E 85 F1 | 	sub	fp, #20
18c5c     02 12 16 F2 | 	cmp	arg01, #2 wc
18c60     34 00 90 CD |  if_b	jmp	#LR__2054
18c64     28 2C BF FD | 	call	#_pop
18c68     A7 FA 61 FC | 	wrlong	result1, fp
18c6c     04 4E 05 F1 | 	add	fp, #4
18c70     A7 FC 61 FC | 	wrlong	result2, fp
18c74     04 4E 05 F1 | 	add	fp, #4
18c78     A7 FE 61 FC | 	wrlong	result3, fp
18c7c     08 4E 85 F1 | 	sub	fp, #8
18c80     A7 12 02 F6 | 	mov	arg01, fp
18c84     EC 2D BF FD | 	call	#_converttoint
18c88     2C 4E 05 F1 | 	add	fp, #44
18c8c     A7 FA 61 FC | 	wrlong	result1, fp
18c90     2C 4E 85 F1 | 	sub	fp, #44
18c94     0C 00 90 FD | 	jmp	#LR__2055
18c98                 | LR__2054
18c98     2C 4E 05 F1 | 	add	fp, #44
18c9c     A7 00 68 FC | 	wrlong	#0, fp
18ca0     2C 4E 85 F1 | 	sub	fp, #44
18ca4                 | LR__2055
18ca4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
18ca4     14 4E 05 F1 | 	add	fp, #20
18ca8     A7 12 02 FB | 	rdlong	arg01, fp
18cac     14 4E 85 F1 | 	sub	fp, #20
18cb0     01 12 16 F2 | 	cmp	arg01, #1 wc
18cb4     34 00 90 CD |  if_b	jmp	#LR__2056
18cb8     D4 2B BF FD | 	call	#_pop
18cbc     A7 FA 61 FC | 	wrlong	result1, fp
18cc0     04 4E 05 F1 | 	add	fp, #4
18cc4     A7 FC 61 FC | 	wrlong	result2, fp
18cc8     04 4E 05 F1 | 	add	fp, #4
18ccc     A7 FE 61 FC | 	wrlong	result3, fp
18cd0     08 4E 85 F1 | 	sub	fp, #8
18cd4     A7 12 02 F6 | 	mov	arg01, fp
18cd8     98 2D BF FD | 	call	#_converttoint
18cdc     28 4E 05 F1 | 	add	fp, #40
18ce0     A7 FA 61 FC | 	wrlong	result1, fp
18ce4     28 4E 85 F1 | 	sub	fp, #40
18ce8     0C 00 90 FD | 	jmp	#LR__2057
18cec                 | LR__2056
18cec     28 4E 05 F1 | 	add	fp, #40
18cf0     A7 00 68 FC | 	wrlong	#0, fp
18cf4     28 4E 85 F1 | 	sub	fp, #40
18cf8                 | LR__2057
18cf8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
18cf8                 | ' if numpar>0 then
18cf8     14 4E 05 F1 | 	add	fp, #20
18cfc     A7 FE 01 FB | 	rdlong	result3, fp
18d00     14 4E 85 F1 | 	sub	fp, #20
18d04     01 FE 15 F2 | 	cmp	result3, #1 wc
18d08     8C 00 90 CD |  if_b	jmp	#LR__2058
18d0c     0C 4E 05 F1 | 	add	fp, #12
18d10     A7 FC 01 FB | 	rdlong	result2, fp
18d14     1C 4E 05 F1 | 	add	fp, #28
18d18     A7 FE 01 FB | 	rdlong	result3, fp
18d1c     04 4E 05 F1 | 	add	fp, #4
18d20     A7 12 02 FB | 	rdlong	arg01, fp
18d24     10 4E 85 F1 | 	sub	fp, #16
18d28     A7 FA 01 FB | 	rdlong	result1, fp
18d2c     FD 12 02 FD | 	qmul	arg01, result1
18d30     10 FC 05 F1 | 	add	result2, #16
18d34     14 4E 05 F1 | 	add	fp, #20
18d38     A7 26 02 FB | 	rdlong	local01, fp
18d3c     18 12 62 FD | 	getqx	arg01
18d40     FD 26 02 FD | 	qmul	local01, result1
18d44     09 FF 01 F1 | 	add	result3, arg01
18d48     10 4E 85 F1 | 	sub	fp, #16
18d4c     A7 26 02 FB | 	rdlong	local01, fp
18d50     18 FA 61 FD | 	getqx	result1
18d54     13 FB 01 FD | 	qmul	result1, local01
18d58     08 4E 85 F1 | 	sub	fp, #8
18d5c     A7 26 02 FB | 	rdlong	local01, fp
18d60     18 FA 61 FD | 	getqx	result1
18d64     FD FE 01 F1 | 	add	result3, result1
18d68     13 FF 01 FD | 	qmul	result3, local01
18d6c     1C 4E 05 F1 | 	add	fp, #28
18d70     18 26 62 FD | 	getqx	local01
18d74     13 FD 01 F1 | 	add	result2, local01
18d78     A7 FC 61 FC | 	wrlong	result2, fp
18d7c     2C 4E 85 F1 | 	sub	fp, #44
18d80     A7 3A 68 FC | 	wrlong	#29, fp
18d84     2C 4E 05 F1 | 	add	fp, #44
18d88     A7 26 02 FB | 	rdlong	local01, fp
18d8c     34 4E 85 F1 | 	sub	fp, #52
18d90     A7 26 62 FC | 	wrlong	local01, fp
18d94     18 00 90 FD | 	jmp	#LR__2059
18d98                 | LR__2058
18d98     08 4E 05 F1 | 	add	fp, #8
18d9c     A7 3A 68 FC | 	wrlong	#29, fp
18da0     04 4E 05 F1 | 	add	fp, #4
18da4     A7 26 02 FB | 	rdlong	local01, fp
18da8     0C 4E 85 F1 | 	sub	fp, #12
18dac     A7 26 62 FC | 	wrlong	local01, fp
18db0                 | LR__2059
18db0     A7 12 02 F6 | 	mov	arg01, fp
18db4     70 2B BF FD | 	call	#_push
18db8                 | LR__2060
18db8     A7 F0 03 F6 | 	mov	ptra, fp
18dbc     B2 00 A0 FD | 	call	#popregs_
18dc0                 | _do_getaddr_ret
18dc0     2D 00 64 FD | 	ret
18dc4                 | 
18dc4                 | ' 
18dc4                 | ' 
18dc4                 | ' 
18dc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18dc4                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
18dc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18dc4                 | ' 
18dc4                 | ' '--------------------------------- AND 
18dc4                 | ' 
18dc4                 | ' sub do_and 
18dc4                 | _do_and
18dc4     03 4A 05 F6 | 	mov	COUNT_, #3
18dc8     A8 00 A0 FD | 	call	#pushregs_
18dcc     18 F0 07 F1 | 	add	ptra, #24
18dd0     BC 2A BF FD | 	call	#_pop
18dd4     FD 12 02 F6 | 	mov	arg01, result1
18dd8     FE 26 02 F6 | 	mov	local01, result2
18ddc     FF 28 02 F6 | 	mov	local02, result3
18de0     0C 4E 05 F1 | 	add	fp, #12
18de4     A7 12 62 FC | 	wrlong	arg01, fp
18de8     04 4E 05 F1 | 	add	fp, #4
18dec     A7 26 62 FC | 	wrlong	local01, fp
18df0     04 4E 05 F1 | 	add	fp, #4
18df4     A7 28 62 FC | 	wrlong	local02, fp
18df8     14 4E 85 F1 | 	sub	fp, #20
18dfc     90 2A BF FD | 	call	#_pop
18e00     FF 2A 02 F6 | 	mov	local03, result3
18e04     A7 FA 61 FC | 	wrlong	result1, fp
18e08     04 4E 05 F1 | 	add	fp, #4
18e0c     A7 FC 61 FC | 	wrlong	result2, fp
18e10     04 4E 05 F1 | 	add	fp, #4
18e14     A7 2A 62 FC | 	wrlong	local03, fp
18e18                 | ' 
18e18                 | ' t2=pop()
18e18                 | ' t1=pop()
18e18                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18e18     08 4E 85 F1 | 	sub	fp, #8
18e1c     1C 2A 0E F2 | 	cmp	local03, #28 wz
18e20     A7 2A 02 AB |  if_e	rdlong	local03, fp
18e24     A7 2A 62 AC |  if_e	wrlong	local03, fp
18e28     08 4E 05 A1 |  if_e	add	fp, #8
18e2c     A7 3A 68 AC |  if_e	wrlong	#29, fp
18e30     08 4E 85 A1 |  if_e	sub	fp, #8
18e34                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18e34     14 4E 05 F1 | 	add	fp, #20
18e38     A7 2A 02 FB | 	rdlong	local03, fp
18e3c     14 4E 85 F1 | 	sub	fp, #20
18e40     1C 2A 0E F2 | 	cmp	local03, #28 wz
18e44     18 00 90 5D |  if_ne	jmp	#LR__2070
18e48     0C 4E 05 F1 | 	add	fp, #12
18e4c     A7 2A 02 FB | 	rdlong	local03, fp
18e50     A7 2A 62 FC | 	wrlong	local03, fp
18e54     08 4E 05 F1 | 	add	fp, #8
18e58     A7 3A 68 FC | 	wrlong	#29, fp
18e5c     14 4E 85 F1 | 	sub	fp, #20
18e60                 | LR__2070
18e60                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
18e60     08 4E 05 F1 | 	add	fp, #8
18e64     A7 2A 02 FB | 	rdlong	local03, fp
18e68     08 4E 85 F1 | 	sub	fp, #8
18e6c     1F 2A 0E F2 | 	cmp	local03, #31 wz
18e70     14 4E 05 51 |  if_ne	add	fp, #20
18e74     A7 28 02 5B |  if_ne	rdlong	local02, fp
18e78     14 4E 85 51 |  if_ne	sub	fp, #20
18e7c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
18e80     08 4E 05 51 |  if_ne	add	fp, #8
18e84     A7 2A 02 5B |  if_ne	rdlong	local03, fp
18e88     08 4E 85 51 |  if_ne	sub	fp, #8
18e8c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
18e90     14 4E 05 51 |  if_ne	add	fp, #20
18e94     14 4E 85 51 |  if_ne	sub	fp, #20
18e98     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
18e9c     A7 0C 68 AC |  if_e	wrlong	#6, fp
18ea0     08 4E 05 A1 |  if_e	add	fp, #8
18ea4     A7 FE 69 AC |  if_e	wrlong	#255, fp
18ea8     08 4E 85 A1 |  if_e	sub	fp, #8
18eac     18 00 90 AD |  if_e	jmp	#LR__2071
18eb0     A7 2A 02 FB | 	rdlong	local03, fp
18eb4     0C 4E 05 F1 | 	add	fp, #12
18eb8     A7 26 02 FB | 	rdlong	local01, fp
18ebc     0C 4E 85 F1 | 	sub	fp, #12
18ec0     13 2B 02 F5 | 	and	local03, local01
18ec4     A7 2A 62 FC | 	wrlong	local03, fp
18ec8                 | LR__2071
18ec8     A7 12 02 F6 | 	mov	arg01, fp
18ecc     58 2A BF FD | 	call	#_push
18ed0     A7 F0 03 F6 | 	mov	ptra, fp
18ed4     B2 00 A0 FD | 	call	#popregs_
18ed8                 | _do_and_ret
18ed8     2D 00 64 FD | 	ret
18edc                 | 
18edc                 | ' 
18edc                 | ' '--------------------------------- DIV (integer divide)
18edc                 | ' 
18edc                 | ' sub do_div 
18edc                 | _do_div
18edc     01 4A 05 F6 | 	mov	COUNT_, #1
18ee0     A8 00 A0 FD | 	call	#pushregs_
18ee4     18 F0 07 F1 | 	add	ptra, #24
18ee8     A4 29 BF FD | 	call	#_pop
18eec     FD 8A 02 F6 | 	mov	muldivb_, result1
18ef0     FE 88 02 F6 | 	mov	muldiva_, result2
18ef4     FF 26 02 F6 | 	mov	local01, result3
18ef8     0C 4E 05 F1 | 	add	fp, #12
18efc     A7 8A 62 FC | 	wrlong	muldivb_, fp
18f00     04 4E 05 F1 | 	add	fp, #4
18f04     A7 88 62 FC | 	wrlong	muldiva_, fp
18f08     04 4E 05 F1 | 	add	fp, #4
18f0c     A7 26 62 FC | 	wrlong	local01, fp
18f10     14 4E 85 F1 | 	sub	fp, #20
18f14     78 29 BF FD | 	call	#_pop
18f18     A7 FA 61 FC | 	wrlong	result1, fp
18f1c     04 4E 05 F1 | 	add	fp, #4
18f20     A7 FC 61 FC | 	wrlong	result2, fp
18f24     04 4E 05 F1 | 	add	fp, #4
18f28     A7 FE 61 FC | 	wrlong	result3, fp
18f2c                 | ' 
18f2c                 | ' t2=pop()
18f2c                 | ' t1=pop()
18f2c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
18f2c     08 4E 85 F1 | 	sub	fp, #8
18f30     1F FE 0D F2 | 	cmp	result3, #31 wz
18f34     14 4E 05 51 |  if_ne	add	fp, #20
18f38     A7 12 02 5B |  if_ne	rdlong	arg01, fp
18f3c     14 4E 85 51 |  if_ne	sub	fp, #20
18f40     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
18f44     A7 14 68 AC |  if_e	wrlong	#10, fp
18f48     08 4E 05 A1 |  if_e	add	fp, #8
18f4c     A7 FE 69 AC |  if_e	wrlong	#255, fp
18f50     08 4E 85 A1 |  if_e	sub	fp, #8
18f54     90 01 90 AD |  if_e	jmp	#LR__2086
18f58                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
18f58     08 4E 05 F1 | 	add	fp, #8
18f5c     A7 8A 02 FB | 	rdlong	muldivb_, fp
18f60     08 4E 85 F1 | 	sub	fp, #8
18f64     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
18f68     1C 00 90 5D |  if_ne	jmp	#LR__2080
18f6c     08 4E 05 F1 | 	add	fp, #8
18f70     A7 38 68 FC | 	wrlong	#28, fp
18f74     08 4E 85 F1 | 	sub	fp, #8
18f78     A7 12 02 FB | 	rdlong	arg01, fp
18f7c     00 14 06 F6 | 	mov	arg02, #0
18f80     14 BF B0 FD | 	call	#__system___float_tointeger
18f84     A7 FA 61 FC | 	wrlong	result1, fp
18f88                 | LR__2080
18f88                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
18f88     14 4E 05 F1 | 	add	fp, #20
18f8c     A7 8A 02 FB | 	rdlong	muldivb_, fp
18f90     14 4E 85 F1 | 	sub	fp, #20
18f94     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
18f98     28 00 90 5D |  if_ne	jmp	#LR__2081
18f9c     14 4E 05 F1 | 	add	fp, #20
18fa0     A7 38 68 FC | 	wrlong	#28, fp
18fa4     08 4E 85 F1 | 	sub	fp, #8
18fa8     A7 12 02 FB | 	rdlong	arg01, fp
18fac     0C 4E 85 F1 | 	sub	fp, #12
18fb0     00 14 06 F6 | 	mov	arg02, #0
18fb4     E0 BE B0 FD | 	call	#__system___float_tointeger
18fb8     0C 4E 05 F1 | 	add	fp, #12
18fbc     A7 FA 61 FC | 	wrlong	result1, fp
18fc0     0C 4E 85 F1 | 	sub	fp, #12
18fc4                 | LR__2081
18fc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
18fc4     08 4E 05 F1 | 	add	fp, #8
18fc8     A7 8A 02 FB | 	rdlong	muldivb_, fp
18fcc     08 4E 85 F1 | 	sub	fp, #8
18fd0     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
18fd4     14 4E 05 A1 |  if_e	add	fp, #20
18fd8     A7 26 02 AB |  if_e	rdlong	local01, fp
18fdc     14 4E 85 A1 |  if_e	sub	fp, #20
18fe0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
18fe4     20 00 90 5D |  if_ne	jmp	#LR__2082
18fe8     0C 4E 05 F1 | 	add	fp, #12
18fec     A7 26 02 FB | 	rdlong	local01, fp
18ff0     0C 4E 85 F1 | 	sub	fp, #12
18ff4     A7 8A 02 FB | 	rdlong	muldivb_, fp
18ff8     13 8B 12 FD | 	qdiv	muldivb_, local01
18ffc     18 26 62 FD | 	getqx	local01
19000     A7 26 62 FC | 	wrlong	local01, fp
19004     E0 00 90 FD | 	jmp	#LR__2086
19008                 | LR__2082
19008                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
19008     08 4E 05 F1 | 	add	fp, #8
1900c     A7 8A 02 FB | 	rdlong	muldivb_, fp
19010     08 4E 85 F1 | 	sub	fp, #8
19014     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
19018     14 4E 05 A1 |  if_e	add	fp, #20
1901c     A7 26 02 AB |  if_e	rdlong	local01, fp
19020     14 4E 85 A1 |  if_e	sub	fp, #20
19024     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
19028     2C 00 90 5D |  if_ne	jmp	#LR__2083
1902c     0C 4E 05 F1 | 	add	fp, #12
19030     A7 26 02 FB | 	rdlong	local01, fp
19034     0C 4E 85 F1 | 	sub	fp, #12
19038     A7 8A 02 FB | 	rdlong	muldivb_, fp
1903c     13 8B 12 FD | 	qdiv	muldivb_, local01
19040     18 26 62 FD | 	getqx	local01
19044     A7 26 62 FC | 	wrlong	local01, fp
19048     08 4E 05 F1 | 	add	fp, #8
1904c     A7 38 68 FC | 	wrlong	#28, fp
19050     08 4E 85 F1 | 	sub	fp, #8
19054     90 00 90 FD | 	jmp	#LR__2086
19058                 | LR__2083
19058                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
19058     08 4E 05 F1 | 	add	fp, #8
1905c     A7 8A 02 FB | 	rdlong	muldivb_, fp
19060     08 4E 85 F1 | 	sub	fp, #8
19064     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
19068     14 4E 05 A1 |  if_e	add	fp, #20
1906c     A7 26 02 AB |  if_e	rdlong	local01, fp
19070     14 4E 85 A1 |  if_e	sub	fp, #20
19074     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
19078     1C 00 90 5D |  if_ne	jmp	#LR__2084
1907c     A7 88 02 FB | 	rdlong	muldiva_, fp
19080     0C 4E 05 F1 | 	add	fp, #12
19084     A7 8A 02 FB | 	rdlong	muldivb_, fp
19088     0C 4E 85 F1 | 	sub	fp, #12
1908c     BA 00 A0 FD | 	call	#divide_
19090     A7 8A 62 FC | 	wrlong	muldivb_, fp
19094     50 00 90 FD | 	jmp	#LR__2086
19098                 | LR__2084
19098                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
19098     08 4E 05 F1 | 	add	fp, #8
1909c     A7 8A 02 FB | 	rdlong	muldivb_, fp
190a0     08 4E 85 F1 | 	sub	fp, #8
190a4     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
190a8     14 4E 05 A1 |  if_e	add	fp, #20
190ac     A7 26 02 AB |  if_e	rdlong	local01, fp
190b0     14 4E 85 A1 |  if_e	sub	fp, #20
190b4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
190b8     1C 00 90 5D |  if_ne	jmp	#LR__2085
190bc     A7 88 02 FB | 	rdlong	muldiva_, fp
190c0     0C 4E 05 F1 | 	add	fp, #12
190c4     A7 8A 02 FB | 	rdlong	muldivb_, fp
190c8     0C 4E 85 F1 | 	sub	fp, #12
190cc     BA 00 A0 FD | 	call	#divide_
190d0     A7 8A 62 FC | 	wrlong	muldivb_, fp
190d4     10 00 90 FD | 	jmp	#LR__2086
190d8                 | LR__2085
190d8     A7 16 68 FC | 	wrlong	#11, fp
190dc     08 4E 05 F1 | 	add	fp, #8
190e0     A7 FE 69 FC | 	wrlong	#255, fp
190e4     08 4E 85 F1 | 	sub	fp, #8
190e8                 | LR__2086
190e8     A7 12 02 F6 | 	mov	arg01, fp
190ec     38 28 BF FD | 	call	#_push
190f0     A7 F0 03 F6 | 	mov	ptra, fp
190f4     B2 00 A0 FD | 	call	#popregs_
190f8                 | _do_div_ret
190f8     2D 00 64 FD | 	ret
190fc                 | 
190fc                 | ' 
190fc                 | ' '--------------------------------- equal (=)
190fc                 | ' 
190fc                 | ' sub do_eq
190fc                 | _do_eq
190fc     05 4A 05 F6 | 	mov	COUNT_, #5
19100     A8 00 A0 FD | 	call	#pushregs_
19104     18 F0 07 F1 | 	add	ptra, #24
19108     84 27 BF FD | 	call	#_pop
1910c     FD 26 02 F6 | 	mov	local01, result1
19110     FE 28 02 F6 | 	mov	local02, result2
19114     FF 2A 02 F6 | 	mov	local03, result3
19118     0C 4E 05 F1 | 	add	fp, #12
1911c     A7 26 62 FC | 	wrlong	local01, fp
19120     04 4E 05 F1 | 	add	fp, #4
19124     A7 28 62 FC | 	wrlong	local02, fp
19128     04 4E 05 F1 | 	add	fp, #4
1912c     A7 2A 62 FC | 	wrlong	local03, fp
19130     14 4E 85 F1 | 	sub	fp, #20
19134     58 27 BF FD | 	call	#_pop
19138     FF 2A 02 F6 | 	mov	local03, result3
1913c     A7 FA 61 FC | 	wrlong	result1, fp
19140     04 4E 05 F1 | 	add	fp, #4
19144     A7 FC 61 FC | 	wrlong	result2, fp
19148     04 4E 05 F1 | 	add	fp, #4
1914c     A7 2A 62 FC | 	wrlong	local03, fp
19150                 | ' 
19150                 | ' t2=pop()
19150                 | ' t1=pop()
19150                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
19150     08 4E 85 F1 | 	sub	fp, #8
19154     1F 2A 0E F2 | 	cmp	local03, #31 wz
19158     14 4E 05 A1 |  if_e	add	fp, #20
1915c     A7 2C 02 AB |  if_e	rdlong	local04, fp
19160     14 4E 85 A1 |  if_e	sub	fp, #20
19164     16 2B 02 A6 |  if_e	mov	local03, local04
19168     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1916c     28 00 90 5D |  if_ne	jmp	#LR__2090
19170     00 26 06 F6 | 	mov	local01, #0
19174     A7 12 02 FB | 	rdlong	arg01, fp
19178     0C 4E 05 F1 | 	add	fp, #12
1917c     A7 14 02 FB | 	rdlong	arg02, fp
19180     0C 4E 85 F1 | 	sub	fp, #12
19184     B4 8A B0 FD | 	call	#__system___string_cmp
19188     00 FA 0D F2 | 	cmp	result1, #0 wz
1918c     00 26 26 A6 |  if_e	not	local01, #0
19190     A7 26 62 FC | 	wrlong	local01, fp
19194     1C 04 90 FD | 	jmp	#LR__2103
19198                 | LR__2090
19198                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
19198     08 4E 05 F1 | 	add	fp, #8
1919c     A7 26 02 FB | 	rdlong	local01, fp
191a0     08 4E 85 F1 | 	sub	fp, #8
191a4     1E 26 0E F2 | 	cmp	local01, #30 wz
191a8     14 4E 05 A1 |  if_e	add	fp, #20
191ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
191b0     14 4E 85 A1 |  if_e	sub	fp, #20
191b4     16 2B 02 A6 |  if_e	mov	local03, local04
191b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
191bc     2C 00 90 5D |  if_ne	jmp	#LR__2091
191c0     00 26 06 F6 | 	mov	local01, #0
191c4     A7 12 02 FB | 	rdlong	arg01, fp
191c8     0C 4E 05 F1 | 	add	fp, #12
191cc     A7 14 02 FB | 	rdlong	arg02, fp
191d0     0C 4E 85 F1 | 	sub	fp, #12
191d4     01 16 06 F6 | 	mov	arg03, #1
191d8     28 BC B0 FD | 	call	#__system___float_cmp
191dc     00 FA 0D F2 | 	cmp	result1, #0 wz
191e0     00 26 26 A6 |  if_e	not	local01, #0
191e4     A7 26 62 FC | 	wrlong	local01, fp
191e8     C8 03 90 FD | 	jmp	#LR__2103
191ec                 | LR__2091
191ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
191ec     08 4E 05 F1 | 	add	fp, #8
191f0     A7 26 02 FB | 	rdlong	local01, fp
191f4     08 4E 85 F1 | 	sub	fp, #8
191f8     1E 26 0E F2 | 	cmp	local01, #30 wz
191fc     14 4E 05 A1 |  if_e	add	fp, #20
19200     A7 2C 02 AB |  if_e	rdlong	local04, fp
19204     14 4E 85 A1 |  if_e	sub	fp, #20
19208     16 2B 02 A6 |  if_e	mov	local03, local04
1920c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19210     48 00 90 5D |  if_ne	jmp	#LR__2092
19214     00 26 06 F6 | 	mov	local01, #0
19218     A7 28 02 FB | 	rdlong	local02, fp
1921c     0C 4E 05 F1 | 	add	fp, #12
19220     A7 12 02 FB | 	rdlong	arg01, fp
19224     0C 4E 85 F1 | 	sub	fp, #12
19228     09 13 52 F6 | 	abs	arg01, arg01 wc
1922c     1F 2E C6 C9 |  if_b	decod	local05, #31
19230     00 2E 06 36 |  if_ae	mov	local05, #0
19234     94 B3 B0 FD | 	call	#__system___float_fromuns
19238     17 FB 61 F5 | 	xor	result1, local05
1923c     FD 14 02 F6 | 	mov	arg02, result1
19240     14 13 02 F6 | 	mov	arg01, local02
19244     01 16 06 F6 | 	mov	arg03, #1
19248     B8 BB B0 FD | 	call	#__system___float_cmp
1924c     00 FA 0D F2 | 	cmp	result1, #0 wz
19250     00 26 26 A6 |  if_e	not	local01, #0
19254     A7 26 62 FC | 	wrlong	local01, fp
19258     58 03 90 FD | 	jmp	#LR__2103
1925c                 | LR__2092
1925c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1925c     08 4E 05 F1 | 	add	fp, #8
19260     A7 26 02 FB | 	rdlong	local01, fp
19264     08 4E 85 F1 | 	sub	fp, #8
19268     1E 26 0E F2 | 	cmp	local01, #30 wz
1926c     14 4E 05 A1 |  if_e	add	fp, #20
19270     A7 2C 02 AB |  if_e	rdlong	local04, fp
19274     14 4E 85 A1 |  if_e	sub	fp, #20
19278     16 2B 02 A6 |  if_e	mov	local03, local04
1927c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19280     38 00 90 5D |  if_ne	jmp	#LR__2093
19284     00 26 06 F6 | 	mov	local01, #0
19288     A7 28 02 FB | 	rdlong	local02, fp
1928c     0C 4E 05 F1 | 	add	fp, #12
19290     A7 12 02 FB | 	rdlong	arg01, fp
19294     0C 4E 85 F1 | 	sub	fp, #12
19298     30 B3 B0 FD | 	call	#__system___float_fromuns
1929c     FD 14 02 F6 | 	mov	arg02, result1
192a0     14 13 02 F6 | 	mov	arg01, local02
192a4     01 16 06 F6 | 	mov	arg03, #1
192a8     58 BB B0 FD | 	call	#__system___float_cmp
192ac     00 FA 0D F2 | 	cmp	result1, #0 wz
192b0     00 26 26 A6 |  if_e	not	local01, #0
192b4     A7 26 62 FC | 	wrlong	local01, fp
192b8     F8 02 90 FD | 	jmp	#LR__2103
192bc                 | LR__2093
192bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
192bc     08 4E 05 F1 | 	add	fp, #8
192c0     A7 26 02 FB | 	rdlong	local01, fp
192c4     08 4E 85 F1 | 	sub	fp, #8
192c8     1C 26 0E F2 | 	cmp	local01, #28 wz
192cc     14 4E 05 A1 |  if_e	add	fp, #20
192d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
192d4     14 4E 85 A1 |  if_e	sub	fp, #20
192d8     16 2B 02 A6 |  if_e	mov	local03, local04
192dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
192e0     44 00 90 5D |  if_ne	jmp	#LR__2094
192e4     00 26 06 F6 | 	mov	local01, #0
192e8     A7 12 02 FB | 	rdlong	arg01, fp
192ec     09 13 52 F6 | 	abs	arg01, arg01 wc
192f0     1F 2E C6 C9 |  if_b	decod	local05, #31
192f4     00 2E 06 36 |  if_ae	mov	local05, #0
192f8     D0 B2 B0 FD | 	call	#__system___float_fromuns
192fc     17 FB 61 F5 | 	xor	result1, local05
19300     FD 12 02 F6 | 	mov	arg01, result1
19304     0C 4E 05 F1 | 	add	fp, #12
19308     A7 14 02 FB | 	rdlong	arg02, fp
1930c     0C 4E 85 F1 | 	sub	fp, #12
19310     01 16 06 F6 | 	mov	arg03, #1
19314     EC BA B0 FD | 	call	#__system___float_cmp
19318     00 FA 0D F2 | 	cmp	result1, #0 wz
1931c     00 26 26 A6 |  if_e	not	local01, #0
19320     A7 26 62 FC | 	wrlong	local01, fp
19324     8C 02 90 FD | 	jmp	#LR__2103
19328                 | LR__2094
19328                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
19328     08 4E 05 F1 | 	add	fp, #8
1932c     A7 26 02 FB | 	rdlong	local01, fp
19330     08 4E 85 F1 | 	sub	fp, #8
19334     1C 26 0E F2 | 	cmp	local01, #28 wz
19338     14 4E 05 A1 |  if_e	add	fp, #20
1933c     A7 2C 02 AB |  if_e	rdlong	local04, fp
19340     14 4E 85 A1 |  if_e	sub	fp, #20
19344     16 2B 02 A6 |  if_e	mov	local03, local04
19348     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1934c     24 00 90 5D |  if_ne	jmp	#LR__2095
19350     00 26 06 F6 | 	mov	local01, #0
19354     A7 28 02 FB | 	rdlong	local02, fp
19358     0C 4E 05 F1 | 	add	fp, #12
1935c     A7 2A 02 FB | 	rdlong	local03, fp
19360     0C 4E 85 F1 | 	sub	fp, #12
19364     15 29 0A F2 | 	cmp	local02, local03 wz
19368     01 26 66 A6 |  if_e	neg	local01, #1
1936c     A7 26 62 FC | 	wrlong	local01, fp
19370     40 02 90 FD | 	jmp	#LR__2103
19374                 | LR__2095
19374                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
19374     08 4E 05 F1 | 	add	fp, #8
19378     A7 26 02 FB | 	rdlong	local01, fp
1937c     08 4E 85 F1 | 	sub	fp, #8
19380     1C 26 0E F2 | 	cmp	local01, #28 wz
19384     14 4E 05 A1 |  if_e	add	fp, #20
19388     A7 2C 02 AB |  if_e	rdlong	local04, fp
1938c     14 4E 85 A1 |  if_e	sub	fp, #20
19390     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
19394     24 00 90 5D |  if_ne	jmp	#LR__2096
19398     00 26 06 F6 | 	mov	local01, #0
1939c     A7 28 02 FB | 	rdlong	local02, fp
193a0     0C 4E 05 F1 | 	add	fp, #12
193a4     A7 2A 02 FB | 	rdlong	local03, fp
193a8     0C 4E 85 F1 | 	sub	fp, #12
193ac     15 29 0A F2 | 	cmp	local02, local03 wz
193b0     01 26 66 A6 |  if_e	neg	local01, #1
193b4     A7 26 62 FC | 	wrlong	local01, fp
193b8     F8 01 90 FD | 	jmp	#LR__2103
193bc                 | LR__2096
193bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
193bc     08 4E 05 F1 | 	add	fp, #8
193c0     A7 26 02 FB | 	rdlong	local01, fp
193c4     08 4E 85 F1 | 	sub	fp, #8
193c8     1D 26 0E F2 | 	cmp	local01, #29 wz
193cc     14 4E 05 A1 |  if_e	add	fp, #20
193d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
193d4     14 4E 85 A1 |  if_e	sub	fp, #20
193d8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
193dc     34 00 90 5D |  if_ne	jmp	#LR__2097
193e0     00 26 06 F6 | 	mov	local01, #0
193e4     A7 12 02 FB | 	rdlong	arg01, fp
193e8     E0 B1 B0 FD | 	call	#__system___float_fromuns
193ec     FD 12 02 F6 | 	mov	arg01, result1
193f0     0C 4E 05 F1 | 	add	fp, #12
193f4     A7 14 02 FB | 	rdlong	arg02, fp
193f8     0C 4E 85 F1 | 	sub	fp, #12
193fc     01 16 06 F6 | 	mov	arg03, #1
19400     00 BA B0 FD | 	call	#__system___float_cmp
19404     00 FA 0D F2 | 	cmp	result1, #0 wz
19408     00 26 26 A6 |  if_e	not	local01, #0
1940c     A7 26 62 FC | 	wrlong	local01, fp
19410     A0 01 90 FD | 	jmp	#LR__2103
19414                 | LR__2097
19414                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
19414     08 4E 05 F1 | 	add	fp, #8
19418     A7 26 02 FB | 	rdlong	local01, fp
1941c     08 4E 85 F1 | 	sub	fp, #8
19420     1D 26 0E F2 | 	cmp	local01, #29 wz
19424     14 4E 05 A1 |  if_e	add	fp, #20
19428     A7 2A 02 AB |  if_e	rdlong	local03, fp
1942c     14 4E 85 A1 |  if_e	sub	fp, #20
19430     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19434     24 00 90 5D |  if_ne	jmp	#LR__2098
19438     00 26 06 F6 | 	mov	local01, #0
1943c     A7 28 02 FB | 	rdlong	local02, fp
19440     0C 4E 05 F1 | 	add	fp, #12
19444     A7 2A 02 FB | 	rdlong	local03, fp
19448     0C 4E 85 F1 | 	sub	fp, #12
1944c     15 29 0A F2 | 	cmp	local02, local03 wz
19450     01 26 66 A6 |  if_e	neg	local01, #1
19454     A7 26 62 FC | 	wrlong	local01, fp
19458     58 01 90 FD | 	jmp	#LR__2103
1945c                 | LR__2098
1945c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1945c     08 4E 05 F1 | 	add	fp, #8
19460     A7 26 02 FB | 	rdlong	local01, fp
19464     08 4E 85 F1 | 	sub	fp, #8
19468     1D 26 0E F2 | 	cmp	local01, #29 wz
1946c     14 4E 05 A1 |  if_e	add	fp, #20
19470     A7 2A 02 AB |  if_e	rdlong	local03, fp
19474     14 4E 85 A1 |  if_e	sub	fp, #20
19478     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1947c     24 00 90 5D |  if_ne	jmp	#LR__2099
19480     00 26 06 F6 | 	mov	local01, #0
19484     A7 28 02 FB | 	rdlong	local02, fp
19488     0C 4E 05 F1 | 	add	fp, #12
1948c     A7 2A 02 FB | 	rdlong	local03, fp
19490     0C 4E 85 F1 | 	sub	fp, #12
19494     15 29 0A F2 | 	cmp	local02, local03 wz
19498     01 26 66 A6 |  if_e	neg	local01, #1
1949c     A7 26 62 FC | 	wrlong	local01, fp
194a0     10 01 90 FD | 	jmp	#LR__2103
194a4                 | LR__2099
194a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
194a4     08 4E 05 F1 | 	add	fp, #8
194a8     A7 26 02 FB | 	rdlong	local01, fp
194ac     08 4E 85 F1 | 	sub	fp, #8
194b0     2B 26 0E F2 | 	cmp	local01, #43 wz
194b4     14 4E 05 A1 |  if_e	add	fp, #20
194b8     A7 2A 02 AB |  if_e	rdlong	local03, fp
194bc     14 4E 85 A1 |  if_e	sub	fp, #20
194c0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
194c4     30 00 90 5D |  if_ne	jmp	#LR__2100
194c8     00 26 06 F6 | 	mov	local01, #0
194cc     A7 12 02 FB | 	rdlong	arg01, fp
194d0     34 25 BF FD | 	call	#_convertstring
194d4     FD 12 02 F6 | 	mov	arg01, result1
194d8     0C 4E 05 F1 | 	add	fp, #12
194dc     A7 14 02 FB | 	rdlong	arg02, fp
194e0     0C 4E 85 F1 | 	sub	fp, #12
194e4     54 87 B0 FD | 	call	#__system___string_cmp
194e8     00 FA 0D F2 | 	cmp	result1, #0 wz
194ec     00 26 26 A6 |  if_e	not	local01, #0
194f0     A7 26 62 FC | 	wrlong	local01, fp
194f4     BC 00 90 FD | 	jmp	#LR__2103
194f8                 | LR__2100
194f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
194f8     08 4E 05 F1 | 	add	fp, #8
194fc     A7 26 02 FB | 	rdlong	local01, fp
19500     08 4E 85 F1 | 	sub	fp, #8
19504     1F 26 0E F2 | 	cmp	local01, #31 wz
19508     14 4E 05 A1 |  if_e	add	fp, #20
1950c     A7 2A 02 AB |  if_e	rdlong	local03, fp
19510     14 4E 85 A1 |  if_e	sub	fp, #20
19514     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19518     34 00 90 5D |  if_ne	jmp	#LR__2101
1951c     00 26 06 F6 | 	mov	local01, #0
19520     A7 28 02 FB | 	rdlong	local02, fp
19524     0C 4E 05 F1 | 	add	fp, #12
19528     A7 12 02 FB | 	rdlong	arg01, fp
1952c     0C 4E 85 F1 | 	sub	fp, #12
19530     D4 24 BF FD | 	call	#_convertstring
19534     FD 14 02 F6 | 	mov	arg02, result1
19538     14 13 02 F6 | 	mov	arg01, local02
1953c     FC 86 B0 FD | 	call	#__system___string_cmp
19540     00 FA 0D F2 | 	cmp	result1, #0 wz
19544     00 26 26 A6 |  if_e	not	local01, #0
19548     A7 26 62 FC | 	wrlong	local01, fp
1954c     64 00 90 FD | 	jmp	#LR__2103
19550                 | LR__2101
19550                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
19550     08 4E 05 F1 | 	add	fp, #8
19554     A7 26 02 FB | 	rdlong	local01, fp
19558     08 4E 85 F1 | 	sub	fp, #8
1955c     2B 26 0E F2 | 	cmp	local01, #43 wz
19560     14 4E 05 A1 |  if_e	add	fp, #20
19564     A7 2A 02 AB |  if_e	rdlong	local03, fp
19568     14 4E 85 A1 |  if_e	sub	fp, #20
1956c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19570     3C 00 90 5D |  if_ne	jmp	#LR__2102
19574     00 26 06 F6 | 	mov	local01, #0
19578     A7 12 02 FB | 	rdlong	arg01, fp
1957c     88 24 BF FD | 	call	#_convertstring
19580     FD 28 02 F6 | 	mov	local02, result1
19584     0C 4E 05 F1 | 	add	fp, #12
19588     A7 12 02 FB | 	rdlong	arg01, fp
1958c     0C 4E 85 F1 | 	sub	fp, #12
19590     74 24 BF FD | 	call	#_convertstring
19594     FD 14 02 F6 | 	mov	arg02, result1
19598     14 13 02 F6 | 	mov	arg01, local02
1959c     9C 86 B0 FD | 	call	#__system___string_cmp
195a0     00 FA 0D F2 | 	cmp	result1, #0 wz
195a4     00 26 26 A6 |  if_e	not	local01, #0
195a8     A7 26 62 FC | 	wrlong	local01, fp
195ac     04 00 90 FD | 	jmp	#LR__2103
195b0                 | LR__2102
195b0     A7 00 68 FC | 	wrlong	#0, fp
195b4                 | LR__2103
195b4     08 4E 05 F1 | 	add	fp, #8
195b8     A7 38 68 FC | 	wrlong	#28, fp
195bc     08 4E 85 F1 | 	sub	fp, #8
195c0     A7 12 02 F6 | 	mov	arg01, fp
195c4     60 23 BF FD | 	call	#_push
195c8     A7 F0 03 F6 | 	mov	ptra, fp
195cc     B2 00 A0 FD | 	call	#popregs_
195d0                 | _do_eq_ret
195d0     2D 00 64 FD | 	ret
195d4                 | 
195d4                 | ' 
195d4                 | ' '--------------------------------- fdiv (/) - float divide
195d4                 | ' 
195d4                 | ' sub do_fdiv 
195d4                 | _do_fdiv
195d4     02 4A 05 F6 | 	mov	COUNT_, #2
195d8     A8 00 A0 FD | 	call	#pushregs_
195dc     18 F0 07 F1 | 	add	ptra, #24
195e0     AC 22 BF FD | 	call	#_pop
195e4     FD 14 02 F6 | 	mov	arg02, result1
195e8     FE 12 02 F6 | 	mov	arg01, result2
195ec     FF 26 02 F6 | 	mov	local01, result3
195f0     0C 4E 05 F1 | 	add	fp, #12
195f4     A7 14 62 FC | 	wrlong	arg02, fp
195f8     04 4E 05 F1 | 	add	fp, #4
195fc     A7 12 62 FC | 	wrlong	arg01, fp
19600     04 4E 05 F1 | 	add	fp, #4
19604     A7 26 62 FC | 	wrlong	local01, fp
19608     14 4E 85 F1 | 	sub	fp, #20
1960c     80 22 BF FD | 	call	#_pop
19610     A7 FA 61 FC | 	wrlong	result1, fp
19614     04 4E 05 F1 | 	add	fp, #4
19618     A7 FC 61 FC | 	wrlong	result2, fp
1961c     04 4E 05 F1 | 	add	fp, #4
19620     A7 FE 61 FC | 	wrlong	result3, fp
19624                 | ' 
19624                 | ' t2=pop()
19624                 | ' t1=pop()
19624                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
19624     08 4E 85 F1 | 	sub	fp, #8
19628     1F FE 0D F2 | 	cmp	result3, #31 wz
1962c     14 4E 05 51 |  if_ne	add	fp, #20
19630     A7 26 02 5B |  if_ne	rdlong	local01, fp
19634     14 4E 85 51 |  if_ne	sub	fp, #20
19638     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1963c     A7 14 68 AC |  if_e	wrlong	#10, fp
19640     08 4E 05 A1 |  if_e	add	fp, #8
19644     A7 FE 69 AC |  if_e	wrlong	#255, fp
19648     08 4E 85 A1 |  if_e	sub	fp, #8
1964c     38 01 90 AD |  if_e	jmp	#LR__2115
19650                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
19650     08 4E 05 F1 | 	add	fp, #8
19654     A7 14 02 FB | 	rdlong	arg02, fp
19658     08 4E 85 F1 | 	sub	fp, #8
1965c     1C 14 0E F2 | 	cmp	arg02, #28 wz
19660     28 00 90 5D |  if_ne	jmp	#LR__2110
19664     08 4E 05 F1 | 	add	fp, #8
19668     A7 3C 68 FC | 	wrlong	#30, fp
1966c     08 4E 85 F1 | 	sub	fp, #8
19670     A7 12 02 FB | 	rdlong	arg01, fp
19674     09 13 52 F6 | 	abs	arg01, arg01 wc
19678     1F 28 C6 C9 |  if_b	decod	local02, #31
1967c     00 28 06 36 |  if_ae	mov	local02, #0
19680     48 AF B0 FD | 	call	#__system___float_fromuns
19684     14 FB 61 F5 | 	xor	result1, local02
19688     A7 FA 61 FC | 	wrlong	result1, fp
1968c                 | LR__2110
1968c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1968c     08 4E 05 F1 | 	add	fp, #8
19690     A7 14 02 FB | 	rdlong	arg02, fp
19694     08 4E 85 F1 | 	sub	fp, #8
19698     1D 14 0E F2 | 	cmp	arg02, #29 wz
1969c     18 00 90 5D |  if_ne	jmp	#LR__2111
196a0     08 4E 05 F1 | 	add	fp, #8
196a4     A7 3C 68 FC | 	wrlong	#30, fp
196a8     08 4E 85 F1 | 	sub	fp, #8
196ac     A7 12 02 FB | 	rdlong	arg01, fp
196b0     18 AF B0 FD | 	call	#__system___float_fromuns
196b4     A7 FA 61 FC | 	wrlong	result1, fp
196b8                 | LR__2111
196b8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
196b8     14 4E 05 F1 | 	add	fp, #20
196bc     A7 14 02 FB | 	rdlong	arg02, fp
196c0     14 4E 85 F1 | 	sub	fp, #20
196c4     1C 14 0E F2 | 	cmp	arg02, #28 wz
196c8     34 00 90 5D |  if_ne	jmp	#LR__2112
196cc     14 4E 05 F1 | 	add	fp, #20
196d0     A7 3C 68 FC | 	wrlong	#30, fp
196d4     08 4E 85 F1 | 	sub	fp, #8
196d8     A7 12 02 FB | 	rdlong	arg01, fp
196dc     0C 4E 85 F1 | 	sub	fp, #12
196e0     09 13 52 F6 | 	abs	arg01, arg01 wc
196e4     1F 28 C6 C9 |  if_b	decod	local02, #31
196e8     00 28 06 36 |  if_ae	mov	local02, #0
196ec     DC AE B0 FD | 	call	#__system___float_fromuns
196f0     14 FB 61 F5 | 	xor	result1, local02
196f4     0C 4E 05 F1 | 	add	fp, #12
196f8     A7 FA 61 FC | 	wrlong	result1, fp
196fc     0C 4E 85 F1 | 	sub	fp, #12
19700                 | LR__2112
19700                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
19700     14 4E 05 F1 | 	add	fp, #20
19704     A7 14 02 FB | 	rdlong	arg02, fp
19708     14 4E 85 F1 | 	sub	fp, #20
1970c     1D 14 0E F2 | 	cmp	arg02, #29 wz
19710     24 00 90 5D |  if_ne	jmp	#LR__2113
19714     14 4E 05 F1 | 	add	fp, #20
19718     A7 3C 68 FC | 	wrlong	#30, fp
1971c     08 4E 85 F1 | 	sub	fp, #8
19720     A7 12 02 FB | 	rdlong	arg01, fp
19724     0C 4E 85 F1 | 	sub	fp, #12
19728     A0 AE B0 FD | 	call	#__system___float_fromuns
1972c     0C 4E 05 F1 | 	add	fp, #12
19730     A7 FA 61 FC | 	wrlong	result1, fp
19734     0C 4E 85 F1 | 	sub	fp, #12
19738                 | LR__2113
19738                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
19738     08 4E 05 F1 | 	add	fp, #8
1973c     A7 14 02 FB | 	rdlong	arg02, fp
19740     08 4E 85 F1 | 	sub	fp, #8
19744     1E 14 0E F2 | 	cmp	arg02, #30 wz
19748     14 4E 05 A1 |  if_e	add	fp, #20
1974c     A7 26 02 AB |  if_e	rdlong	local01, fp
19750     14 4E 85 A1 |  if_e	sub	fp, #20
19754     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
19758     1C 00 90 5D |  if_ne	jmp	#LR__2114
1975c     A7 12 02 FB | 	rdlong	arg01, fp
19760     0C 4E 05 F1 | 	add	fp, #12
19764     A7 14 02 FB | 	rdlong	arg02, fp
19768     0C 4E 85 F1 | 	sub	fp, #12
1976c     64 B4 B0 FD | 	call	#__system___float_div
19770     A7 FA 61 FC | 	wrlong	result1, fp
19774     10 00 90 FD | 	jmp	#LR__2115
19778                 | LR__2114
19778     A7 16 68 FC | 	wrlong	#11, fp
1977c     08 4E 05 F1 | 	add	fp, #8
19780     A7 FE 69 FC | 	wrlong	#255, fp
19784     08 4E 85 F1 | 	sub	fp, #8
19788                 | LR__2115
19788     A7 12 02 F6 | 	mov	arg01, fp
1978c     98 21 BF FD | 	call	#_push
19790     A7 F0 03 F6 | 	mov	ptra, fp
19794     B2 00 A0 FD | 	call	#popregs_
19798                 | _do_fdiv_ret
19798     2D 00 64 FD | 	ret
1979c                 | 
1979c                 | ' 
1979c                 | ' '--------------------------------- greater or equal (>=)
1979c                 | ' 
1979c                 | ' sub do_ge
1979c                 | _do_ge
1979c     05 4A 05 F6 | 	mov	COUNT_, #5
197a0     A8 00 A0 FD | 	call	#pushregs_
197a4     18 F0 07 F1 | 	add	ptra, #24
197a8     E4 20 BF FD | 	call	#_pop
197ac     FD 26 02 F6 | 	mov	local01, result1
197b0     FE 28 02 F6 | 	mov	local02, result2
197b4     FF 2A 02 F6 | 	mov	local03, result3
197b8     0C 4E 05 F1 | 	add	fp, #12
197bc     A7 26 62 FC | 	wrlong	local01, fp
197c0     04 4E 05 F1 | 	add	fp, #4
197c4     A7 28 62 FC | 	wrlong	local02, fp
197c8     04 4E 05 F1 | 	add	fp, #4
197cc     A7 2A 62 FC | 	wrlong	local03, fp
197d0     14 4E 85 F1 | 	sub	fp, #20
197d4     B8 20 BF FD | 	call	#_pop
197d8     FF 2A 02 F6 | 	mov	local03, result3
197dc     A7 FA 61 FC | 	wrlong	result1, fp
197e0     04 4E 05 F1 | 	add	fp, #4
197e4     A7 FC 61 FC | 	wrlong	result2, fp
197e8     04 4E 05 F1 | 	add	fp, #4
197ec     A7 2A 62 FC | 	wrlong	local03, fp
197f0                 | ' 
197f0                 | ' t2=pop()
197f0                 | ' t1=pop()
197f0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
197f0     08 4E 85 F1 | 	sub	fp, #8
197f4     1F 2A 0E F2 | 	cmp	local03, #31 wz
197f8     14 4E 05 A1 |  if_e	add	fp, #20
197fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
19800     14 4E 85 A1 |  if_e	sub	fp, #20
19804     16 2B 02 A6 |  if_e	mov	local03, local04
19808     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1980c     28 00 90 5D |  if_ne	jmp	#LR__2120
19810     00 26 06 F6 | 	mov	local01, #0
19814     A7 12 02 FB | 	rdlong	arg01, fp
19818     0C 4E 05 F1 | 	add	fp, #12
1981c     A7 14 02 FB | 	rdlong	arg02, fp
19820     0C 4E 85 F1 | 	sub	fp, #12
19824     14 84 B0 FD | 	call	#__system___string_cmp
19828     00 FA 55 F2 | 	cmps	result1, #0 wc
1982c     00 26 26 36 |  if_ae	not	local01, #0
19830     A7 26 62 FC | 	wrlong	local01, fp
19834     1C 04 90 FD | 	jmp	#LR__2133
19838                 | LR__2120
19838                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
19838     08 4E 05 F1 | 	add	fp, #8
1983c     A7 26 02 FB | 	rdlong	local01, fp
19840     08 4E 85 F1 | 	sub	fp, #8
19844     1E 26 0E F2 | 	cmp	local01, #30 wz
19848     14 4E 05 A1 |  if_e	add	fp, #20
1984c     A7 2C 02 AB |  if_e	rdlong	local04, fp
19850     14 4E 85 A1 |  if_e	sub	fp, #20
19854     16 2B 02 A6 |  if_e	mov	local03, local04
19858     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1985c     2C 00 90 5D |  if_ne	jmp	#LR__2121
19860     00 26 06 F6 | 	mov	local01, #0
19864     A7 12 02 FB | 	rdlong	arg01, fp
19868     0C 4E 05 F1 | 	add	fp, #12
1986c     A7 14 02 FB | 	rdlong	arg02, fp
19870     0C 4E 85 F1 | 	sub	fp, #12
19874     01 16 66 F6 | 	neg	arg03, #1
19878     88 B5 B0 FD | 	call	#__system___float_cmp
1987c     00 FA 55 F2 | 	cmps	result1, #0 wc
19880     00 26 26 36 |  if_ae	not	local01, #0
19884     A7 26 62 FC | 	wrlong	local01, fp
19888     C8 03 90 FD | 	jmp	#LR__2133
1988c                 | LR__2121
1988c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1988c     08 4E 05 F1 | 	add	fp, #8
19890     A7 26 02 FB | 	rdlong	local01, fp
19894     08 4E 85 F1 | 	sub	fp, #8
19898     1E 26 0E F2 | 	cmp	local01, #30 wz
1989c     14 4E 05 A1 |  if_e	add	fp, #20
198a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
198a4     14 4E 85 A1 |  if_e	sub	fp, #20
198a8     16 2B 02 A6 |  if_e	mov	local03, local04
198ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
198b0     48 00 90 5D |  if_ne	jmp	#LR__2122
198b4     00 26 06 F6 | 	mov	local01, #0
198b8     A7 28 02 FB | 	rdlong	local02, fp
198bc     0C 4E 05 F1 | 	add	fp, #12
198c0     A7 12 02 FB | 	rdlong	arg01, fp
198c4     0C 4E 85 F1 | 	sub	fp, #12
198c8     09 13 52 F6 | 	abs	arg01, arg01 wc
198cc     1F 2E C6 C9 |  if_b	decod	local05, #31
198d0     00 2E 06 36 |  if_ae	mov	local05, #0
198d4     F4 AC B0 FD | 	call	#__system___float_fromuns
198d8     17 FB 61 F5 | 	xor	result1, local05
198dc     FD 14 02 F6 | 	mov	arg02, result1
198e0     14 13 02 F6 | 	mov	arg01, local02
198e4     01 16 66 F6 | 	neg	arg03, #1
198e8     18 B5 B0 FD | 	call	#__system___float_cmp
198ec     00 FA 55 F2 | 	cmps	result1, #0 wc
198f0     00 26 26 36 |  if_ae	not	local01, #0
198f4     A7 26 62 FC | 	wrlong	local01, fp
198f8     58 03 90 FD | 	jmp	#LR__2133
198fc                 | LR__2122
198fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
198fc     08 4E 05 F1 | 	add	fp, #8
19900     A7 26 02 FB | 	rdlong	local01, fp
19904     08 4E 85 F1 | 	sub	fp, #8
19908     1E 26 0E F2 | 	cmp	local01, #30 wz
1990c     14 4E 05 A1 |  if_e	add	fp, #20
19910     A7 2C 02 AB |  if_e	rdlong	local04, fp
19914     14 4E 85 A1 |  if_e	sub	fp, #20
19918     16 2B 02 A6 |  if_e	mov	local03, local04
1991c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19920     38 00 90 5D |  if_ne	jmp	#LR__2123
19924     00 26 06 F6 | 	mov	local01, #0
19928     A7 28 02 FB | 	rdlong	local02, fp
1992c     0C 4E 05 F1 | 	add	fp, #12
19930     A7 12 02 FB | 	rdlong	arg01, fp
19934     0C 4E 85 F1 | 	sub	fp, #12
19938     90 AC B0 FD | 	call	#__system___float_fromuns
1993c     FD 14 02 F6 | 	mov	arg02, result1
19940     14 13 02 F6 | 	mov	arg01, local02
19944     01 16 66 F6 | 	neg	arg03, #1
19948     B8 B4 B0 FD | 	call	#__system___float_cmp
1994c     00 FA 55 F2 | 	cmps	result1, #0 wc
19950     00 26 26 36 |  if_ae	not	local01, #0
19954     A7 26 62 FC | 	wrlong	local01, fp
19958     F8 02 90 FD | 	jmp	#LR__2133
1995c                 | LR__2123
1995c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1995c     08 4E 05 F1 | 	add	fp, #8
19960     A7 26 02 FB | 	rdlong	local01, fp
19964     08 4E 85 F1 | 	sub	fp, #8
19968     1C 26 0E F2 | 	cmp	local01, #28 wz
1996c     14 4E 05 A1 |  if_e	add	fp, #20
19970     A7 2C 02 AB |  if_e	rdlong	local04, fp
19974     14 4E 85 A1 |  if_e	sub	fp, #20
19978     16 2B 02 A6 |  if_e	mov	local03, local04
1997c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19980     44 00 90 5D |  if_ne	jmp	#LR__2124
19984     00 26 06 F6 | 	mov	local01, #0
19988     A7 12 02 FB | 	rdlong	arg01, fp
1998c     09 13 52 F6 | 	abs	arg01, arg01 wc
19990     1F 2E C6 C9 |  if_b	decod	local05, #31
19994     00 2E 06 36 |  if_ae	mov	local05, #0
19998     30 AC B0 FD | 	call	#__system___float_fromuns
1999c     17 FB 61 F5 | 	xor	result1, local05
199a0     FD 12 02 F6 | 	mov	arg01, result1
199a4     0C 4E 05 F1 | 	add	fp, #12
199a8     A7 14 02 FB | 	rdlong	arg02, fp
199ac     0C 4E 85 F1 | 	sub	fp, #12
199b0     01 16 66 F6 | 	neg	arg03, #1
199b4     4C B4 B0 FD | 	call	#__system___float_cmp
199b8     00 FA 55 F2 | 	cmps	result1, #0 wc
199bc     00 26 26 36 |  if_ae	not	local01, #0
199c0     A7 26 62 FC | 	wrlong	local01, fp
199c4     8C 02 90 FD | 	jmp	#LR__2133
199c8                 | LR__2124
199c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
199c8     08 4E 05 F1 | 	add	fp, #8
199cc     A7 26 02 FB | 	rdlong	local01, fp
199d0     08 4E 85 F1 | 	sub	fp, #8
199d4     1C 26 0E F2 | 	cmp	local01, #28 wz
199d8     14 4E 05 A1 |  if_e	add	fp, #20
199dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
199e0     14 4E 85 A1 |  if_e	sub	fp, #20
199e4     16 2B 02 A6 |  if_e	mov	local03, local04
199e8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
199ec     24 00 90 5D |  if_ne	jmp	#LR__2125
199f0     00 26 06 F6 | 	mov	local01, #0
199f4     A7 28 02 FB | 	rdlong	local02, fp
199f8     0C 4E 05 F1 | 	add	fp, #12
199fc     A7 2A 02 FB | 	rdlong	local03, fp
19a00     0C 4E 85 F1 | 	sub	fp, #12
19a04     15 29 52 F2 | 	cmps	local02, local03 wc
19a08     01 26 66 36 |  if_ae	neg	local01, #1
19a0c     A7 26 62 FC | 	wrlong	local01, fp
19a10     40 02 90 FD | 	jmp	#LR__2133
19a14                 | LR__2125
19a14                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
19a14     08 4E 05 F1 | 	add	fp, #8
19a18     A7 26 02 FB | 	rdlong	local01, fp
19a1c     08 4E 85 F1 | 	sub	fp, #8
19a20     1C 26 0E F2 | 	cmp	local01, #28 wz
19a24     14 4E 05 A1 |  if_e	add	fp, #20
19a28     A7 2C 02 AB |  if_e	rdlong	local04, fp
19a2c     14 4E 85 A1 |  if_e	sub	fp, #20
19a30     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
19a34     24 00 90 5D |  if_ne	jmp	#LR__2126
19a38     00 26 06 F6 | 	mov	local01, #0
19a3c     A7 28 02 FB | 	rdlong	local02, fp
19a40     0C 4E 05 F1 | 	add	fp, #12
19a44     A7 2A 02 FB | 	rdlong	local03, fp
19a48     0C 4E 85 F1 | 	sub	fp, #12
19a4c     15 29 52 F2 | 	cmps	local02, local03 wc
19a50     01 26 66 36 |  if_ae	neg	local01, #1
19a54     A7 26 62 FC | 	wrlong	local01, fp
19a58     F8 01 90 FD | 	jmp	#LR__2133
19a5c                 | LR__2126
19a5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
19a5c     08 4E 05 F1 | 	add	fp, #8
19a60     A7 26 02 FB | 	rdlong	local01, fp
19a64     08 4E 85 F1 | 	sub	fp, #8
19a68     1D 26 0E F2 | 	cmp	local01, #29 wz
19a6c     14 4E 05 A1 |  if_e	add	fp, #20
19a70     A7 2A 02 AB |  if_e	rdlong	local03, fp
19a74     14 4E 85 A1 |  if_e	sub	fp, #20
19a78     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19a7c     34 00 90 5D |  if_ne	jmp	#LR__2127
19a80     00 26 06 F6 | 	mov	local01, #0
19a84     A7 12 02 FB | 	rdlong	arg01, fp
19a88     40 AB B0 FD | 	call	#__system___float_fromuns
19a8c     FD 12 02 F6 | 	mov	arg01, result1
19a90     0C 4E 05 F1 | 	add	fp, #12
19a94     A7 14 02 FB | 	rdlong	arg02, fp
19a98     0C 4E 85 F1 | 	sub	fp, #12
19a9c     01 16 66 F6 | 	neg	arg03, #1
19aa0     60 B3 B0 FD | 	call	#__system___float_cmp
19aa4     00 FA 55 F2 | 	cmps	result1, #0 wc
19aa8     00 26 26 36 |  if_ae	not	local01, #0
19aac     A7 26 62 FC | 	wrlong	local01, fp
19ab0     A0 01 90 FD | 	jmp	#LR__2133
19ab4                 | LR__2127
19ab4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
19ab4     08 4E 05 F1 | 	add	fp, #8
19ab8     A7 26 02 FB | 	rdlong	local01, fp
19abc     08 4E 85 F1 | 	sub	fp, #8
19ac0     1D 26 0E F2 | 	cmp	local01, #29 wz
19ac4     14 4E 05 A1 |  if_e	add	fp, #20
19ac8     A7 2A 02 AB |  if_e	rdlong	local03, fp
19acc     14 4E 85 A1 |  if_e	sub	fp, #20
19ad0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19ad4     24 00 90 5D |  if_ne	jmp	#LR__2128
19ad8     00 26 06 F6 | 	mov	local01, #0
19adc     A7 28 02 FB | 	rdlong	local02, fp
19ae0     0C 4E 05 F1 | 	add	fp, #12
19ae4     A7 2A 02 FB | 	rdlong	local03, fp
19ae8     0C 4E 85 F1 | 	sub	fp, #12
19aec     15 29 52 F2 | 	cmps	local02, local03 wc
19af0     01 26 66 36 |  if_ae	neg	local01, #1
19af4     A7 26 62 FC | 	wrlong	local01, fp
19af8     58 01 90 FD | 	jmp	#LR__2133
19afc                 | LR__2128
19afc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
19afc     08 4E 05 F1 | 	add	fp, #8
19b00     A7 26 02 FB | 	rdlong	local01, fp
19b04     08 4E 85 F1 | 	sub	fp, #8
19b08     1D 26 0E F2 | 	cmp	local01, #29 wz
19b0c     14 4E 05 A1 |  if_e	add	fp, #20
19b10     A7 2A 02 AB |  if_e	rdlong	local03, fp
19b14     14 4E 85 A1 |  if_e	sub	fp, #20
19b18     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19b1c     24 00 90 5D |  if_ne	jmp	#LR__2129
19b20     00 26 06 F6 | 	mov	local01, #0
19b24     A7 28 02 FB | 	rdlong	local02, fp
19b28     0C 4E 05 F1 | 	add	fp, #12
19b2c     A7 2A 02 FB | 	rdlong	local03, fp
19b30     0C 4E 85 F1 | 	sub	fp, #12
19b34     15 29 12 F2 | 	cmp	local02, local03 wc
19b38     01 26 66 36 |  if_ae	neg	local01, #1
19b3c     A7 26 62 FC | 	wrlong	local01, fp
19b40     10 01 90 FD | 	jmp	#LR__2133
19b44                 | LR__2129
19b44                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
19b44     08 4E 05 F1 | 	add	fp, #8
19b48     A7 26 02 FB | 	rdlong	local01, fp
19b4c     08 4E 85 F1 | 	sub	fp, #8
19b50     2B 26 0E F2 | 	cmp	local01, #43 wz
19b54     14 4E 05 A1 |  if_e	add	fp, #20
19b58     A7 2A 02 AB |  if_e	rdlong	local03, fp
19b5c     14 4E 85 A1 |  if_e	sub	fp, #20
19b60     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
19b64     30 00 90 5D |  if_ne	jmp	#LR__2130
19b68     00 26 06 F6 | 	mov	local01, #0
19b6c     A7 12 02 FB | 	rdlong	arg01, fp
19b70     94 1E BF FD | 	call	#_convertstring
19b74     FD 12 02 F6 | 	mov	arg01, result1
19b78     0C 4E 05 F1 | 	add	fp, #12
19b7c     A7 14 02 FB | 	rdlong	arg02, fp
19b80     0C 4E 85 F1 | 	sub	fp, #12
19b84     B4 80 B0 FD | 	call	#__system___string_cmp
19b88     00 FA 55 F2 | 	cmps	result1, #0 wc
19b8c     00 26 26 36 |  if_ae	not	local01, #0
19b90     A7 26 62 FC | 	wrlong	local01, fp
19b94     BC 00 90 FD | 	jmp	#LR__2133
19b98                 | LR__2130
19b98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
19b98     08 4E 05 F1 | 	add	fp, #8
19b9c     A7 26 02 FB | 	rdlong	local01, fp
19ba0     08 4E 85 F1 | 	sub	fp, #8
19ba4     1F 26 0E F2 | 	cmp	local01, #31 wz
19ba8     14 4E 05 A1 |  if_e	add	fp, #20
19bac     A7 2A 02 AB |  if_e	rdlong	local03, fp
19bb0     14 4E 85 A1 |  if_e	sub	fp, #20
19bb4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19bb8     34 00 90 5D |  if_ne	jmp	#LR__2131
19bbc     00 26 06 F6 | 	mov	local01, #0
19bc0     A7 28 02 FB | 	rdlong	local02, fp
19bc4     0C 4E 05 F1 | 	add	fp, #12
19bc8     A7 12 02 FB | 	rdlong	arg01, fp
19bcc     0C 4E 85 F1 | 	sub	fp, #12
19bd0     34 1E BF FD | 	call	#_convertstring
19bd4     FD 14 02 F6 | 	mov	arg02, result1
19bd8     14 13 02 F6 | 	mov	arg01, local02
19bdc     5C 80 B0 FD | 	call	#__system___string_cmp
19be0     00 FA 55 F2 | 	cmps	result1, #0 wc
19be4     00 26 26 36 |  if_ae	not	local01, #0
19be8     A7 26 62 FC | 	wrlong	local01, fp
19bec     64 00 90 FD | 	jmp	#LR__2133
19bf0                 | LR__2131
19bf0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
19bf0     08 4E 05 F1 | 	add	fp, #8
19bf4     A7 26 02 FB | 	rdlong	local01, fp
19bf8     08 4E 85 F1 | 	sub	fp, #8
19bfc     2B 26 0E F2 | 	cmp	local01, #43 wz
19c00     14 4E 05 A1 |  if_e	add	fp, #20
19c04     A7 2A 02 AB |  if_e	rdlong	local03, fp
19c08     14 4E 85 A1 |  if_e	sub	fp, #20
19c0c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19c10     3C 00 90 5D |  if_ne	jmp	#LR__2132
19c14     00 26 06 F6 | 	mov	local01, #0
19c18     A7 12 02 FB | 	rdlong	arg01, fp
19c1c     E8 1D BF FD | 	call	#_convertstring
19c20     FD 28 02 F6 | 	mov	local02, result1
19c24     0C 4E 05 F1 | 	add	fp, #12
19c28     A7 12 02 FB | 	rdlong	arg01, fp
19c2c     0C 4E 85 F1 | 	sub	fp, #12
19c30     D4 1D BF FD | 	call	#_convertstring
19c34     FD 14 02 F6 | 	mov	arg02, result1
19c38     14 13 02 F6 | 	mov	arg01, local02
19c3c     FC 7F B0 FD | 	call	#__system___string_cmp
19c40     00 FA 55 F2 | 	cmps	result1, #0 wc
19c44     00 26 26 36 |  if_ae	not	local01, #0
19c48     A7 26 62 FC | 	wrlong	local01, fp
19c4c     04 00 90 FD | 	jmp	#LR__2133
19c50                 | LR__2132
19c50     A7 00 68 FC | 	wrlong	#0, fp
19c54                 | LR__2133
19c54     08 4E 05 F1 | 	add	fp, #8
19c58     A7 38 68 FC | 	wrlong	#28, fp
19c5c     08 4E 85 F1 | 	sub	fp, #8
19c60     A7 12 02 F6 | 	mov	arg01, fp
19c64     C0 1C BF FD | 	call	#_push
19c68     A7 F0 03 F6 | 	mov	ptra, fp
19c6c     B2 00 A0 FD | 	call	#popregs_
19c70                 | _do_ge_ret
19c70     2D 00 64 FD | 	ret
19c74                 | 
19c74                 | ' 
19c74                 | ' '--------------------------------- greater than (>)
19c74                 | ' 
19c74                 | ' sub do_gt
19c74                 | _do_gt
19c74     05 4A 05 F6 | 	mov	COUNT_, #5
19c78     A8 00 A0 FD | 	call	#pushregs_
19c7c     18 F0 07 F1 | 	add	ptra, #24
19c80     0C 1C BF FD | 	call	#_pop
19c84     FD 26 02 F6 | 	mov	local01, result1
19c88     FE 28 02 F6 | 	mov	local02, result2
19c8c     FF 2A 02 F6 | 	mov	local03, result3
19c90     0C 4E 05 F1 | 	add	fp, #12
19c94     A7 26 62 FC | 	wrlong	local01, fp
19c98     04 4E 05 F1 | 	add	fp, #4
19c9c     A7 28 62 FC | 	wrlong	local02, fp
19ca0     04 4E 05 F1 | 	add	fp, #4
19ca4     A7 2A 62 FC | 	wrlong	local03, fp
19ca8     14 4E 85 F1 | 	sub	fp, #20
19cac     E0 1B BF FD | 	call	#_pop
19cb0     FF 2A 02 F6 | 	mov	local03, result3
19cb4     A7 FA 61 FC | 	wrlong	result1, fp
19cb8     04 4E 05 F1 | 	add	fp, #4
19cbc     A7 FC 61 FC | 	wrlong	result2, fp
19cc0     04 4E 05 F1 | 	add	fp, #4
19cc4     A7 2A 62 FC | 	wrlong	local03, fp
19cc8                 | ' 
19cc8                 | ' t2=pop()
19cc8                 | ' t1=pop()
19cc8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
19cc8     08 4E 85 F1 | 	sub	fp, #8
19ccc     1F 2A 0E F2 | 	cmp	local03, #31 wz
19cd0     14 4E 05 A1 |  if_e	add	fp, #20
19cd4     A7 2C 02 AB |  if_e	rdlong	local04, fp
19cd8     14 4E 85 A1 |  if_e	sub	fp, #20
19cdc     16 2B 02 A6 |  if_e	mov	local03, local04
19ce0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
19ce4     28 00 90 5D |  if_ne	jmp	#LR__2140
19ce8     00 26 06 F6 | 	mov	local01, #0
19cec     A7 12 02 FB | 	rdlong	arg01, fp
19cf0     0C 4E 05 F1 | 	add	fp, #12
19cf4     A7 14 02 FB | 	rdlong	arg02, fp
19cf8     0C 4E 85 F1 | 	sub	fp, #12
19cfc     3C 7F B0 FD | 	call	#__system___string_cmp
19d00     01 FA 55 F2 | 	cmps	result1, #1 wc
19d04     00 26 26 36 |  if_ae	not	local01, #0
19d08     A7 26 62 FC | 	wrlong	local01, fp
19d0c     1C 04 90 FD | 	jmp	#LR__2153
19d10                 | LR__2140
19d10                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
19d10     08 4E 05 F1 | 	add	fp, #8
19d14     A7 26 02 FB | 	rdlong	local01, fp
19d18     08 4E 85 F1 | 	sub	fp, #8
19d1c     1E 26 0E F2 | 	cmp	local01, #30 wz
19d20     14 4E 05 A1 |  if_e	add	fp, #20
19d24     A7 2C 02 AB |  if_e	rdlong	local04, fp
19d28     14 4E 85 A1 |  if_e	sub	fp, #20
19d2c     16 2B 02 A6 |  if_e	mov	local03, local04
19d30     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19d34     2C 00 90 5D |  if_ne	jmp	#LR__2141
19d38     00 26 06 F6 | 	mov	local01, #0
19d3c     A7 12 02 FB | 	rdlong	arg01, fp
19d40     0C 4E 05 F1 | 	add	fp, #12
19d44     A7 14 02 FB | 	rdlong	arg02, fp
19d48     0C 4E 85 F1 | 	sub	fp, #12
19d4c     01 16 66 F6 | 	neg	arg03, #1
19d50     B0 B0 B0 FD | 	call	#__system___float_cmp
19d54     01 FA 55 F2 | 	cmps	result1, #1 wc
19d58     00 26 26 36 |  if_ae	not	local01, #0
19d5c     A7 26 62 FC | 	wrlong	local01, fp
19d60     C8 03 90 FD | 	jmp	#LR__2153
19d64                 | LR__2141
19d64                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
19d64     08 4E 05 F1 | 	add	fp, #8
19d68     A7 26 02 FB | 	rdlong	local01, fp
19d6c     08 4E 85 F1 | 	sub	fp, #8
19d70     1E 26 0E F2 | 	cmp	local01, #30 wz
19d74     14 4E 05 A1 |  if_e	add	fp, #20
19d78     A7 2C 02 AB |  if_e	rdlong	local04, fp
19d7c     14 4E 85 A1 |  if_e	sub	fp, #20
19d80     16 2B 02 A6 |  if_e	mov	local03, local04
19d84     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19d88     48 00 90 5D |  if_ne	jmp	#LR__2142
19d8c     00 26 06 F6 | 	mov	local01, #0
19d90     A7 28 02 FB | 	rdlong	local02, fp
19d94     0C 4E 05 F1 | 	add	fp, #12
19d98     A7 12 02 FB | 	rdlong	arg01, fp
19d9c     0C 4E 85 F1 | 	sub	fp, #12
19da0     09 13 52 F6 | 	abs	arg01, arg01 wc
19da4     1F 2E C6 C9 |  if_b	decod	local05, #31
19da8     00 2E 06 36 |  if_ae	mov	local05, #0
19dac     1C A8 B0 FD | 	call	#__system___float_fromuns
19db0     17 FB 61 F5 | 	xor	result1, local05
19db4     FD 14 02 F6 | 	mov	arg02, result1
19db8     14 13 02 F6 | 	mov	arg01, local02
19dbc     01 16 66 F6 | 	neg	arg03, #1
19dc0     40 B0 B0 FD | 	call	#__system___float_cmp
19dc4     01 FA 55 F2 | 	cmps	result1, #1 wc
19dc8     00 26 26 36 |  if_ae	not	local01, #0
19dcc     A7 26 62 FC | 	wrlong	local01, fp
19dd0     58 03 90 FD | 	jmp	#LR__2153
19dd4                 | LR__2142
19dd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
19dd4     08 4E 05 F1 | 	add	fp, #8
19dd8     A7 26 02 FB | 	rdlong	local01, fp
19ddc     08 4E 85 F1 | 	sub	fp, #8
19de0     1E 26 0E F2 | 	cmp	local01, #30 wz
19de4     14 4E 05 A1 |  if_e	add	fp, #20
19de8     A7 2C 02 AB |  if_e	rdlong	local04, fp
19dec     14 4E 85 A1 |  if_e	sub	fp, #20
19df0     16 2B 02 A6 |  if_e	mov	local03, local04
19df4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19df8     38 00 90 5D |  if_ne	jmp	#LR__2143
19dfc     00 26 06 F6 | 	mov	local01, #0
19e00     A7 28 02 FB | 	rdlong	local02, fp
19e04     0C 4E 05 F1 | 	add	fp, #12
19e08     A7 12 02 FB | 	rdlong	arg01, fp
19e0c     0C 4E 85 F1 | 	sub	fp, #12
19e10     B8 A7 B0 FD | 	call	#__system___float_fromuns
19e14     FD 14 02 F6 | 	mov	arg02, result1
19e18     14 13 02 F6 | 	mov	arg01, local02
19e1c     01 16 66 F6 | 	neg	arg03, #1
19e20     E0 AF B0 FD | 	call	#__system___float_cmp
19e24     01 FA 55 F2 | 	cmps	result1, #1 wc
19e28     00 26 26 36 |  if_ae	not	local01, #0
19e2c     A7 26 62 FC | 	wrlong	local01, fp
19e30     F8 02 90 FD | 	jmp	#LR__2153
19e34                 | LR__2143
19e34                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
19e34     08 4E 05 F1 | 	add	fp, #8
19e38     A7 26 02 FB | 	rdlong	local01, fp
19e3c     08 4E 85 F1 | 	sub	fp, #8
19e40     1C 26 0E F2 | 	cmp	local01, #28 wz
19e44     14 4E 05 A1 |  if_e	add	fp, #20
19e48     A7 2C 02 AB |  if_e	rdlong	local04, fp
19e4c     14 4E 85 A1 |  if_e	sub	fp, #20
19e50     16 2B 02 A6 |  if_e	mov	local03, local04
19e54     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19e58     44 00 90 5D |  if_ne	jmp	#LR__2144
19e5c     00 26 06 F6 | 	mov	local01, #0
19e60     A7 12 02 FB | 	rdlong	arg01, fp
19e64     09 13 52 F6 | 	abs	arg01, arg01 wc
19e68     1F 2E C6 C9 |  if_b	decod	local05, #31
19e6c     00 2E 06 36 |  if_ae	mov	local05, #0
19e70     58 A7 B0 FD | 	call	#__system___float_fromuns
19e74     17 FB 61 F5 | 	xor	result1, local05
19e78     FD 12 02 F6 | 	mov	arg01, result1
19e7c     0C 4E 05 F1 | 	add	fp, #12
19e80     A7 14 02 FB | 	rdlong	arg02, fp
19e84     0C 4E 85 F1 | 	sub	fp, #12
19e88     01 16 66 F6 | 	neg	arg03, #1
19e8c     74 AF B0 FD | 	call	#__system___float_cmp
19e90     01 FA 55 F2 | 	cmps	result1, #1 wc
19e94     00 26 26 36 |  if_ae	not	local01, #0
19e98     A7 26 62 FC | 	wrlong	local01, fp
19e9c     8C 02 90 FD | 	jmp	#LR__2153
19ea0                 | LR__2144
19ea0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
19ea0     08 4E 05 F1 | 	add	fp, #8
19ea4     A7 26 02 FB | 	rdlong	local01, fp
19ea8     08 4E 85 F1 | 	sub	fp, #8
19eac     1C 26 0E F2 | 	cmp	local01, #28 wz
19eb0     14 4E 05 A1 |  if_e	add	fp, #20
19eb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
19eb8     14 4E 85 A1 |  if_e	sub	fp, #20
19ebc     16 2B 02 A6 |  if_e	mov	local03, local04
19ec0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19ec4     24 00 90 5D |  if_ne	jmp	#LR__2145
19ec8     00 26 06 F6 | 	mov	local01, #0
19ecc     A7 28 02 FB | 	rdlong	local02, fp
19ed0     0C 4E 05 F1 | 	add	fp, #12
19ed4     A7 2A 02 FB | 	rdlong	local03, fp
19ed8     0C 4E 85 F1 | 	sub	fp, #12
19edc     15 29 5A F2 | 	cmps	local02, local03 wcz
19ee0     01 26 66 16 |  if_a	neg	local01, #1
19ee4     A7 26 62 FC | 	wrlong	local01, fp
19ee8     40 02 90 FD | 	jmp	#LR__2153
19eec                 | LR__2145
19eec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
19eec     08 4E 05 F1 | 	add	fp, #8
19ef0     A7 26 02 FB | 	rdlong	local01, fp
19ef4     08 4E 85 F1 | 	sub	fp, #8
19ef8     1C 26 0E F2 | 	cmp	local01, #28 wz
19efc     14 4E 05 A1 |  if_e	add	fp, #20
19f00     A7 2C 02 AB |  if_e	rdlong	local04, fp
19f04     14 4E 85 A1 |  if_e	sub	fp, #20
19f08     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
19f0c     24 00 90 5D |  if_ne	jmp	#LR__2146
19f10     00 26 06 F6 | 	mov	local01, #0
19f14     A7 28 02 FB | 	rdlong	local02, fp
19f18     0C 4E 05 F1 | 	add	fp, #12
19f1c     A7 2A 02 FB | 	rdlong	local03, fp
19f20     0C 4E 85 F1 | 	sub	fp, #12
19f24     15 29 5A F2 | 	cmps	local02, local03 wcz
19f28     01 26 66 16 |  if_a	neg	local01, #1
19f2c     A7 26 62 FC | 	wrlong	local01, fp
19f30     F8 01 90 FD | 	jmp	#LR__2153
19f34                 | LR__2146
19f34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
19f34     08 4E 05 F1 | 	add	fp, #8
19f38     A7 26 02 FB | 	rdlong	local01, fp
19f3c     08 4E 85 F1 | 	sub	fp, #8
19f40     1D 26 0E F2 | 	cmp	local01, #29 wz
19f44     14 4E 05 A1 |  if_e	add	fp, #20
19f48     A7 2A 02 AB |  if_e	rdlong	local03, fp
19f4c     14 4E 85 A1 |  if_e	sub	fp, #20
19f50     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19f54     34 00 90 5D |  if_ne	jmp	#LR__2147
19f58     00 26 06 F6 | 	mov	local01, #0
19f5c     A7 12 02 FB | 	rdlong	arg01, fp
19f60     68 A6 B0 FD | 	call	#__system___float_fromuns
19f64     FD 12 02 F6 | 	mov	arg01, result1
19f68     0C 4E 05 F1 | 	add	fp, #12
19f6c     A7 14 02 FB | 	rdlong	arg02, fp
19f70     0C 4E 85 F1 | 	sub	fp, #12
19f74     01 16 66 F6 | 	neg	arg03, #1
19f78     88 AE B0 FD | 	call	#__system___float_cmp
19f7c     01 FA 55 F2 | 	cmps	result1, #1 wc
19f80     00 26 26 36 |  if_ae	not	local01, #0
19f84     A7 26 62 FC | 	wrlong	local01, fp
19f88     A0 01 90 FD | 	jmp	#LR__2153
19f8c                 | LR__2147
19f8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
19f8c     08 4E 05 F1 | 	add	fp, #8
19f90     A7 26 02 FB | 	rdlong	local01, fp
19f94     08 4E 85 F1 | 	sub	fp, #8
19f98     1D 26 0E F2 | 	cmp	local01, #29 wz
19f9c     14 4E 05 A1 |  if_e	add	fp, #20
19fa0     A7 2A 02 AB |  if_e	rdlong	local03, fp
19fa4     14 4E 85 A1 |  if_e	sub	fp, #20
19fa8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19fac     24 00 90 5D |  if_ne	jmp	#LR__2148
19fb0     00 26 06 F6 | 	mov	local01, #0
19fb4     A7 28 02 FB | 	rdlong	local02, fp
19fb8     0C 4E 05 F1 | 	add	fp, #12
19fbc     A7 2A 02 FB | 	rdlong	local03, fp
19fc0     0C 4E 85 F1 | 	sub	fp, #12
19fc4     15 29 5A F2 | 	cmps	local02, local03 wcz
19fc8     01 26 66 16 |  if_a	neg	local01, #1
19fcc     A7 26 62 FC | 	wrlong	local01, fp
19fd0     58 01 90 FD | 	jmp	#LR__2153
19fd4                 | LR__2148
19fd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
19fd4     08 4E 05 F1 | 	add	fp, #8
19fd8     A7 26 02 FB | 	rdlong	local01, fp
19fdc     08 4E 85 F1 | 	sub	fp, #8
19fe0     1D 26 0E F2 | 	cmp	local01, #29 wz
19fe4     14 4E 05 A1 |  if_e	add	fp, #20
19fe8     A7 2A 02 AB |  if_e	rdlong	local03, fp
19fec     14 4E 85 A1 |  if_e	sub	fp, #20
19ff0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19ff4     24 00 90 5D |  if_ne	jmp	#LR__2149
19ff8     00 26 06 F6 | 	mov	local01, #0
19ffc     A7 28 02 FB | 	rdlong	local02, fp
1a000     0C 4E 05 F1 | 	add	fp, #12
1a004     A7 2A 02 FB | 	rdlong	local03, fp
1a008     0C 4E 85 F1 | 	sub	fp, #12
1a00c     15 29 1A F2 | 	cmp	local02, local03 wcz
1a010     01 26 66 16 |  if_a	neg	local01, #1
1a014     A7 26 62 FC | 	wrlong	local01, fp
1a018     10 01 90 FD | 	jmp	#LR__2153
1a01c                 | LR__2149
1a01c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1a01c     08 4E 05 F1 | 	add	fp, #8
1a020     A7 26 02 FB | 	rdlong	local01, fp
1a024     08 4E 85 F1 | 	sub	fp, #8
1a028     2B 26 0E F2 | 	cmp	local01, #43 wz
1a02c     14 4E 05 A1 |  if_e	add	fp, #20
1a030     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a034     14 4E 85 A1 |  if_e	sub	fp, #20
1a038     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a03c     30 00 90 5D |  if_ne	jmp	#LR__2150
1a040     00 26 06 F6 | 	mov	local01, #0
1a044     A7 12 02 FB | 	rdlong	arg01, fp
1a048     BC 19 BF FD | 	call	#_convertstring
1a04c     FD 12 02 F6 | 	mov	arg01, result1
1a050     0C 4E 05 F1 | 	add	fp, #12
1a054     A7 14 02 FB | 	rdlong	arg02, fp
1a058     0C 4E 85 F1 | 	sub	fp, #12
1a05c     DC 7B B0 FD | 	call	#__system___string_cmp
1a060     01 FA 55 F2 | 	cmps	result1, #1 wc
1a064     00 26 26 36 |  if_ae	not	local01, #0
1a068     A7 26 62 FC | 	wrlong	local01, fp
1a06c     BC 00 90 FD | 	jmp	#LR__2153
1a070                 | LR__2150
1a070                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1a070     08 4E 05 F1 | 	add	fp, #8
1a074     A7 26 02 FB | 	rdlong	local01, fp
1a078     08 4E 85 F1 | 	sub	fp, #8
1a07c     1F 26 0E F2 | 	cmp	local01, #31 wz
1a080     14 4E 05 A1 |  if_e	add	fp, #20
1a084     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a088     14 4E 85 A1 |  if_e	sub	fp, #20
1a08c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a090     34 00 90 5D |  if_ne	jmp	#LR__2151
1a094     00 26 06 F6 | 	mov	local01, #0
1a098     A7 28 02 FB | 	rdlong	local02, fp
1a09c     0C 4E 05 F1 | 	add	fp, #12
1a0a0     A7 12 02 FB | 	rdlong	arg01, fp
1a0a4     0C 4E 85 F1 | 	sub	fp, #12
1a0a8     5C 19 BF FD | 	call	#_convertstring
1a0ac     FD 14 02 F6 | 	mov	arg02, result1
1a0b0     14 13 02 F6 | 	mov	arg01, local02
1a0b4     84 7B B0 FD | 	call	#__system___string_cmp
1a0b8     01 FA 55 F2 | 	cmps	result1, #1 wc
1a0bc     00 26 26 36 |  if_ae	not	local01, #0
1a0c0     A7 26 62 FC | 	wrlong	local01, fp
1a0c4     64 00 90 FD | 	jmp	#LR__2153
1a0c8                 | LR__2151
1a0c8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1a0c8     08 4E 05 F1 | 	add	fp, #8
1a0cc     A7 26 02 FB | 	rdlong	local01, fp
1a0d0     08 4E 85 F1 | 	sub	fp, #8
1a0d4     2B 26 0E F2 | 	cmp	local01, #43 wz
1a0d8     14 4E 05 A1 |  if_e	add	fp, #20
1a0dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a0e0     14 4E 85 A1 |  if_e	sub	fp, #20
1a0e4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a0e8     3C 00 90 5D |  if_ne	jmp	#LR__2152
1a0ec     00 26 06 F6 | 	mov	local01, #0
1a0f0     A7 12 02 FB | 	rdlong	arg01, fp
1a0f4     10 19 BF FD | 	call	#_convertstring
1a0f8     FD 28 02 F6 | 	mov	local02, result1
1a0fc     0C 4E 05 F1 | 	add	fp, #12
1a100     A7 12 02 FB | 	rdlong	arg01, fp
1a104     0C 4E 85 F1 | 	sub	fp, #12
1a108     FC 18 BF FD | 	call	#_convertstring
1a10c     FD 14 02 F6 | 	mov	arg02, result1
1a110     14 13 02 F6 | 	mov	arg01, local02
1a114     24 7B B0 FD | 	call	#__system___string_cmp
1a118     01 FA 55 F2 | 	cmps	result1, #1 wc
1a11c     00 26 26 36 |  if_ae	not	local01, #0
1a120     A7 26 62 FC | 	wrlong	local01, fp
1a124     04 00 90 FD | 	jmp	#LR__2153
1a128                 | LR__2152
1a128     A7 00 68 FC | 	wrlong	#0, fp
1a12c                 | LR__2153
1a12c     08 4E 05 F1 | 	add	fp, #8
1a130     A7 38 68 FC | 	wrlong	#28, fp
1a134     08 4E 85 F1 | 	sub	fp, #8
1a138     A7 12 02 F6 | 	mov	arg01, fp
1a13c     E8 17 BF FD | 	call	#_push
1a140     A7 F0 03 F6 | 	mov	ptra, fp
1a144     B2 00 A0 FD | 	call	#popregs_
1a148                 | _do_gt_ret
1a148     2D 00 64 FD | 	ret
1a14c                 | 
1a14c                 | ' 
1a14c                 | ' '--------------------------------- less or equal (<=)
1a14c                 | ' 
1a14c                 | ' sub do_le
1a14c                 | _do_le
1a14c     05 4A 05 F6 | 	mov	COUNT_, #5
1a150     A8 00 A0 FD | 	call	#pushregs_
1a154     18 F0 07 F1 | 	add	ptra, #24
1a158     34 17 BF FD | 	call	#_pop
1a15c     FD 26 02 F6 | 	mov	local01, result1
1a160     FE 28 02 F6 | 	mov	local02, result2
1a164     FF 2A 02 F6 | 	mov	local03, result3
1a168     0C 4E 05 F1 | 	add	fp, #12
1a16c     A7 26 62 FC | 	wrlong	local01, fp
1a170     04 4E 05 F1 | 	add	fp, #4
1a174     A7 28 62 FC | 	wrlong	local02, fp
1a178     04 4E 05 F1 | 	add	fp, #4
1a17c     A7 2A 62 FC | 	wrlong	local03, fp
1a180     14 4E 85 F1 | 	sub	fp, #20
1a184     08 17 BF FD | 	call	#_pop
1a188     FF 2A 02 F6 | 	mov	local03, result3
1a18c     A7 FA 61 FC | 	wrlong	result1, fp
1a190     04 4E 05 F1 | 	add	fp, #4
1a194     A7 FC 61 FC | 	wrlong	result2, fp
1a198     04 4E 05 F1 | 	add	fp, #4
1a19c     A7 2A 62 FC | 	wrlong	local03, fp
1a1a0                 | ' 
1a1a0                 | ' t2=pop()
1a1a0                 | ' t1=pop()
1a1a0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1a1a0     08 4E 85 F1 | 	sub	fp, #8
1a1a4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a1a8     14 4E 05 A1 |  if_e	add	fp, #20
1a1ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a1b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a1b4     16 2B 02 A6 |  if_e	mov	local03, local04
1a1b8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a1bc     28 00 90 5D |  if_ne	jmp	#LR__2160
1a1c0     00 26 06 F6 | 	mov	local01, #0
1a1c4     A7 12 02 FB | 	rdlong	arg01, fp
1a1c8     0C 4E 05 F1 | 	add	fp, #12
1a1cc     A7 14 02 FB | 	rdlong	arg02, fp
1a1d0     0C 4E 85 F1 | 	sub	fp, #12
1a1d4     64 7A B0 FD | 	call	#__system___string_cmp
1a1d8     01 FA 55 F2 | 	cmps	result1, #1 wc
1a1dc     00 26 26 C6 |  if_b	not	local01, #0
1a1e0     A7 26 62 FC | 	wrlong	local01, fp
1a1e4     1C 04 90 FD | 	jmp	#LR__2173
1a1e8                 | LR__2160
1a1e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1a1e8     08 4E 05 F1 | 	add	fp, #8
1a1ec     A7 26 02 FB | 	rdlong	local01, fp
1a1f0     08 4E 85 F1 | 	sub	fp, #8
1a1f4     1E 26 0E F2 | 	cmp	local01, #30 wz
1a1f8     14 4E 05 A1 |  if_e	add	fp, #20
1a1fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a200     14 4E 85 A1 |  if_e	sub	fp, #20
1a204     16 2B 02 A6 |  if_e	mov	local03, local04
1a208     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a20c     2C 00 90 5D |  if_ne	jmp	#LR__2161
1a210     00 26 06 F6 | 	mov	local01, #0
1a214     A7 12 02 FB | 	rdlong	arg01, fp
1a218     0C 4E 05 F1 | 	add	fp, #12
1a21c     A7 14 02 FB | 	rdlong	arg02, fp
1a220     0C 4E 85 F1 | 	sub	fp, #12
1a224     01 16 06 F6 | 	mov	arg03, #1
1a228     D8 AB B0 FD | 	call	#__system___float_cmp
1a22c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a230     00 26 26 C6 |  if_b	not	local01, #0
1a234     A7 26 62 FC | 	wrlong	local01, fp
1a238     C8 03 90 FD | 	jmp	#LR__2173
1a23c                 | LR__2161
1a23c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1a23c     08 4E 05 F1 | 	add	fp, #8
1a240     A7 26 02 FB | 	rdlong	local01, fp
1a244     08 4E 85 F1 | 	sub	fp, #8
1a248     1E 26 0E F2 | 	cmp	local01, #30 wz
1a24c     14 4E 05 A1 |  if_e	add	fp, #20
1a250     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a254     14 4E 85 A1 |  if_e	sub	fp, #20
1a258     16 2B 02 A6 |  if_e	mov	local03, local04
1a25c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a260     48 00 90 5D |  if_ne	jmp	#LR__2162
1a264     00 26 06 F6 | 	mov	local01, #0
1a268     A7 28 02 FB | 	rdlong	local02, fp
1a26c     0C 4E 05 F1 | 	add	fp, #12
1a270     A7 12 02 FB | 	rdlong	arg01, fp
1a274     0C 4E 85 F1 | 	sub	fp, #12
1a278     09 13 52 F6 | 	abs	arg01, arg01 wc
1a27c     1F 2E C6 C9 |  if_b	decod	local05, #31
1a280     00 2E 06 36 |  if_ae	mov	local05, #0
1a284     44 A3 B0 FD | 	call	#__system___float_fromuns
1a288     17 FB 61 F5 | 	xor	result1, local05
1a28c     FD 14 02 F6 | 	mov	arg02, result1
1a290     14 13 02 F6 | 	mov	arg01, local02
1a294     01 16 06 F6 | 	mov	arg03, #1
1a298     68 AB B0 FD | 	call	#__system___float_cmp
1a29c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a2a0     00 26 26 C6 |  if_b	not	local01, #0
1a2a4     A7 26 62 FC | 	wrlong	local01, fp
1a2a8     58 03 90 FD | 	jmp	#LR__2173
1a2ac                 | LR__2162
1a2ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1a2ac     08 4E 05 F1 | 	add	fp, #8
1a2b0     A7 26 02 FB | 	rdlong	local01, fp
1a2b4     08 4E 85 F1 | 	sub	fp, #8
1a2b8     1E 26 0E F2 | 	cmp	local01, #30 wz
1a2bc     14 4E 05 A1 |  if_e	add	fp, #20
1a2c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a2c4     14 4E 85 A1 |  if_e	sub	fp, #20
1a2c8     16 2B 02 A6 |  if_e	mov	local03, local04
1a2cc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a2d0     38 00 90 5D |  if_ne	jmp	#LR__2163
1a2d4     00 26 06 F6 | 	mov	local01, #0
1a2d8     A7 28 02 FB | 	rdlong	local02, fp
1a2dc     0C 4E 05 F1 | 	add	fp, #12
1a2e0     A7 12 02 FB | 	rdlong	arg01, fp
1a2e4     0C 4E 85 F1 | 	sub	fp, #12
1a2e8     E0 A2 B0 FD | 	call	#__system___float_fromuns
1a2ec     FD 14 02 F6 | 	mov	arg02, result1
1a2f0     14 13 02 F6 | 	mov	arg01, local02
1a2f4     01 16 06 F6 | 	mov	arg03, #1
1a2f8     08 AB B0 FD | 	call	#__system___float_cmp
1a2fc     01 FA 55 F2 | 	cmps	result1, #1 wc
1a300     00 26 26 C6 |  if_b	not	local01, #0
1a304     A7 26 62 FC | 	wrlong	local01, fp
1a308     F8 02 90 FD | 	jmp	#LR__2173
1a30c                 | LR__2163
1a30c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1a30c     08 4E 05 F1 | 	add	fp, #8
1a310     A7 26 02 FB | 	rdlong	local01, fp
1a314     08 4E 85 F1 | 	sub	fp, #8
1a318     1C 26 0E F2 | 	cmp	local01, #28 wz
1a31c     14 4E 05 A1 |  if_e	add	fp, #20
1a320     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a324     14 4E 85 A1 |  if_e	sub	fp, #20
1a328     16 2B 02 A6 |  if_e	mov	local03, local04
1a32c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a330     44 00 90 5D |  if_ne	jmp	#LR__2164
1a334     00 26 06 F6 | 	mov	local01, #0
1a338     A7 12 02 FB | 	rdlong	arg01, fp
1a33c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a340     1F 2E C6 C9 |  if_b	decod	local05, #31
1a344     00 2E 06 36 |  if_ae	mov	local05, #0
1a348     80 A2 B0 FD | 	call	#__system___float_fromuns
1a34c     17 FB 61 F5 | 	xor	result1, local05
1a350     FD 12 02 F6 | 	mov	arg01, result1
1a354     0C 4E 05 F1 | 	add	fp, #12
1a358     A7 14 02 FB | 	rdlong	arg02, fp
1a35c     0C 4E 85 F1 | 	sub	fp, #12
1a360     01 16 06 F6 | 	mov	arg03, #1
1a364     9C AA B0 FD | 	call	#__system___float_cmp
1a368     01 FA 55 F2 | 	cmps	result1, #1 wc
1a36c     00 26 26 C6 |  if_b	not	local01, #0
1a370     A7 26 62 FC | 	wrlong	local01, fp
1a374     8C 02 90 FD | 	jmp	#LR__2173
1a378                 | LR__2164
1a378                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1a378     08 4E 05 F1 | 	add	fp, #8
1a37c     A7 26 02 FB | 	rdlong	local01, fp
1a380     08 4E 85 F1 | 	sub	fp, #8
1a384     1C 26 0E F2 | 	cmp	local01, #28 wz
1a388     14 4E 05 A1 |  if_e	add	fp, #20
1a38c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a390     14 4E 85 A1 |  if_e	sub	fp, #20
1a394     16 2B 02 A6 |  if_e	mov	local03, local04
1a398     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a39c     24 00 90 5D |  if_ne	jmp	#LR__2165
1a3a0     00 26 06 F6 | 	mov	local01, #0
1a3a4     A7 28 02 FB | 	rdlong	local02, fp
1a3a8     0C 4E 05 F1 | 	add	fp, #12
1a3ac     A7 2A 02 FB | 	rdlong	local03, fp
1a3b0     0C 4E 85 F1 | 	sub	fp, #12
1a3b4     15 29 5A F2 | 	cmps	local02, local03 wcz
1a3b8     01 26 66 E6 |  if_be	neg	local01, #1
1a3bc     A7 26 62 FC | 	wrlong	local01, fp
1a3c0     40 02 90 FD | 	jmp	#LR__2173
1a3c4                 | LR__2165
1a3c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1a3c4     08 4E 05 F1 | 	add	fp, #8
1a3c8     A7 26 02 FB | 	rdlong	local01, fp
1a3cc     08 4E 85 F1 | 	sub	fp, #8
1a3d0     1C 26 0E F2 | 	cmp	local01, #28 wz
1a3d4     14 4E 05 A1 |  if_e	add	fp, #20
1a3d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a3dc     14 4E 85 A1 |  if_e	sub	fp, #20
1a3e0     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
1a3e4     24 00 90 5D |  if_ne	jmp	#LR__2166
1a3e8     00 26 06 F6 | 	mov	local01, #0
1a3ec     A7 28 02 FB | 	rdlong	local02, fp
1a3f0     0C 4E 05 F1 | 	add	fp, #12
1a3f4     A7 2A 02 FB | 	rdlong	local03, fp
1a3f8     0C 4E 85 F1 | 	sub	fp, #12
1a3fc     15 29 5A F2 | 	cmps	local02, local03 wcz
1a400     01 26 66 E6 |  if_be	neg	local01, #1
1a404     A7 26 62 FC | 	wrlong	local01, fp
1a408     F8 01 90 FD | 	jmp	#LR__2173
1a40c                 | LR__2166
1a40c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1a40c     08 4E 05 F1 | 	add	fp, #8
1a410     A7 26 02 FB | 	rdlong	local01, fp
1a414     08 4E 85 F1 | 	sub	fp, #8
1a418     1D 26 0E F2 | 	cmp	local01, #29 wz
1a41c     14 4E 05 A1 |  if_e	add	fp, #20
1a420     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a424     14 4E 85 A1 |  if_e	sub	fp, #20
1a428     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a42c     34 00 90 5D |  if_ne	jmp	#LR__2167
1a430     00 26 06 F6 | 	mov	local01, #0
1a434     A7 12 02 FB | 	rdlong	arg01, fp
1a438     90 A1 B0 FD | 	call	#__system___float_fromuns
1a43c     FD 12 02 F6 | 	mov	arg01, result1
1a440     0C 4E 05 F1 | 	add	fp, #12
1a444     A7 14 02 FB | 	rdlong	arg02, fp
1a448     0C 4E 85 F1 | 	sub	fp, #12
1a44c     01 16 06 F6 | 	mov	arg03, #1
1a450     B0 A9 B0 FD | 	call	#__system___float_cmp
1a454     01 FA 55 F2 | 	cmps	result1, #1 wc
1a458     00 26 26 C6 |  if_b	not	local01, #0
1a45c     A7 26 62 FC | 	wrlong	local01, fp
1a460     A0 01 90 FD | 	jmp	#LR__2173
1a464                 | LR__2167
1a464                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1a464     08 4E 05 F1 | 	add	fp, #8
1a468     A7 26 02 FB | 	rdlong	local01, fp
1a46c     08 4E 85 F1 | 	sub	fp, #8
1a470     1D 26 0E F2 | 	cmp	local01, #29 wz
1a474     14 4E 05 A1 |  if_e	add	fp, #20
1a478     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a47c     14 4E 85 A1 |  if_e	sub	fp, #20
1a480     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a484     24 00 90 5D |  if_ne	jmp	#LR__2168
1a488     00 26 06 F6 | 	mov	local01, #0
1a48c     A7 28 02 FB | 	rdlong	local02, fp
1a490     0C 4E 05 F1 | 	add	fp, #12
1a494     A7 2A 02 FB | 	rdlong	local03, fp
1a498     0C 4E 85 F1 | 	sub	fp, #12
1a49c     15 29 5A F2 | 	cmps	local02, local03 wcz
1a4a0     01 26 66 E6 |  if_be	neg	local01, #1
1a4a4     A7 26 62 FC | 	wrlong	local01, fp
1a4a8     58 01 90 FD | 	jmp	#LR__2173
1a4ac                 | LR__2168
1a4ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1a4ac     08 4E 05 F1 | 	add	fp, #8
1a4b0     A7 26 02 FB | 	rdlong	local01, fp
1a4b4     08 4E 85 F1 | 	sub	fp, #8
1a4b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1a4bc     14 4E 05 A1 |  if_e	add	fp, #20
1a4c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a4c4     14 4E 85 A1 |  if_e	sub	fp, #20
1a4c8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a4cc     24 00 90 5D |  if_ne	jmp	#LR__2169
1a4d0     00 26 06 F6 | 	mov	local01, #0
1a4d4     A7 28 02 FB | 	rdlong	local02, fp
1a4d8     0C 4E 05 F1 | 	add	fp, #12
1a4dc     A7 2A 02 FB | 	rdlong	local03, fp
1a4e0     0C 4E 85 F1 | 	sub	fp, #12
1a4e4     15 29 1A F2 | 	cmp	local02, local03 wcz
1a4e8     01 26 66 E6 |  if_be	neg	local01, #1
1a4ec     A7 26 62 FC | 	wrlong	local01, fp
1a4f0     10 01 90 FD | 	jmp	#LR__2173
1a4f4                 | LR__2169
1a4f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1a4f4     08 4E 05 F1 | 	add	fp, #8
1a4f8     A7 26 02 FB | 	rdlong	local01, fp
1a4fc     08 4E 85 F1 | 	sub	fp, #8
1a500     2B 26 0E F2 | 	cmp	local01, #43 wz
1a504     14 4E 05 A1 |  if_e	add	fp, #20
1a508     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a50c     14 4E 85 A1 |  if_e	sub	fp, #20
1a510     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a514     30 00 90 5D |  if_ne	jmp	#LR__2170
1a518     00 26 06 F6 | 	mov	local01, #0
1a51c     A7 12 02 FB | 	rdlong	arg01, fp
1a520     E4 14 BF FD | 	call	#_convertstring
1a524     FD 12 02 F6 | 	mov	arg01, result1
1a528     0C 4E 05 F1 | 	add	fp, #12
1a52c     A7 14 02 FB | 	rdlong	arg02, fp
1a530     0C 4E 85 F1 | 	sub	fp, #12
1a534     04 77 B0 FD | 	call	#__system___string_cmp
1a538     01 FA 55 F2 | 	cmps	result1, #1 wc
1a53c     00 26 26 C6 |  if_b	not	local01, #0
1a540     A7 26 62 FC | 	wrlong	local01, fp
1a544     BC 00 90 FD | 	jmp	#LR__2173
1a548                 | LR__2170
1a548                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1a548     08 4E 05 F1 | 	add	fp, #8
1a54c     A7 26 02 FB | 	rdlong	local01, fp
1a550     08 4E 85 F1 | 	sub	fp, #8
1a554     1F 26 0E F2 | 	cmp	local01, #31 wz
1a558     14 4E 05 A1 |  if_e	add	fp, #20
1a55c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a560     14 4E 85 A1 |  if_e	sub	fp, #20
1a564     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a568     34 00 90 5D |  if_ne	jmp	#LR__2171
1a56c     00 26 06 F6 | 	mov	local01, #0
1a570     A7 28 02 FB | 	rdlong	local02, fp
1a574     0C 4E 05 F1 | 	add	fp, #12
1a578     A7 12 02 FB | 	rdlong	arg01, fp
1a57c     0C 4E 85 F1 | 	sub	fp, #12
1a580     84 14 BF FD | 	call	#_convertstring
1a584     FD 14 02 F6 | 	mov	arg02, result1
1a588     14 13 02 F6 | 	mov	arg01, local02
1a58c     AC 76 B0 FD | 	call	#__system___string_cmp
1a590     01 FA 55 F2 | 	cmps	result1, #1 wc
1a594     00 26 26 C6 |  if_b	not	local01, #0
1a598     A7 26 62 FC | 	wrlong	local01, fp
1a59c     64 00 90 FD | 	jmp	#LR__2173
1a5a0                 | LR__2171
1a5a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1a5a0     08 4E 05 F1 | 	add	fp, #8
1a5a4     A7 26 02 FB | 	rdlong	local01, fp
1a5a8     08 4E 85 F1 | 	sub	fp, #8
1a5ac     2B 26 0E F2 | 	cmp	local01, #43 wz
1a5b0     14 4E 05 A1 |  if_e	add	fp, #20
1a5b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a5b8     14 4E 85 A1 |  if_e	sub	fp, #20
1a5bc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a5c0     3C 00 90 5D |  if_ne	jmp	#LR__2172
1a5c4     00 26 06 F6 | 	mov	local01, #0
1a5c8     A7 12 02 FB | 	rdlong	arg01, fp
1a5cc     38 14 BF FD | 	call	#_convertstring
1a5d0     FD 28 02 F6 | 	mov	local02, result1
1a5d4     0C 4E 05 F1 | 	add	fp, #12
1a5d8     A7 12 02 FB | 	rdlong	arg01, fp
1a5dc     0C 4E 85 F1 | 	sub	fp, #12
1a5e0     24 14 BF FD | 	call	#_convertstring
1a5e4     FD 14 02 F6 | 	mov	arg02, result1
1a5e8     14 13 02 F6 | 	mov	arg01, local02
1a5ec     4C 76 B0 FD | 	call	#__system___string_cmp
1a5f0     01 FA 55 F2 | 	cmps	result1, #1 wc
1a5f4     00 26 26 C6 |  if_b	not	local01, #0
1a5f8     A7 26 62 FC | 	wrlong	local01, fp
1a5fc     04 00 90 FD | 	jmp	#LR__2173
1a600                 | LR__2172
1a600     A7 00 68 FC | 	wrlong	#0, fp
1a604                 | LR__2173
1a604     08 4E 05 F1 | 	add	fp, #8
1a608     A7 38 68 FC | 	wrlong	#28, fp
1a60c     08 4E 85 F1 | 	sub	fp, #8
1a610     A7 12 02 F6 | 	mov	arg01, fp
1a614     10 13 BF FD | 	call	#_push
1a618     A7 F0 03 F6 | 	mov	ptra, fp
1a61c     B2 00 A0 FD | 	call	#popregs_
1a620                 | _do_le_ret
1a620     2D 00 64 FD | 	ret
1a624                 | 
1a624                 | ' 
1a624                 | ' '--------------------------------- less than (<)
1a624                 | ' 
1a624                 | ' sub do_lt
1a624                 | _do_lt
1a624     05 4A 05 F6 | 	mov	COUNT_, #5
1a628     A8 00 A0 FD | 	call	#pushregs_
1a62c     18 F0 07 F1 | 	add	ptra, #24
1a630     5C 12 BF FD | 	call	#_pop
1a634     FD 26 02 F6 | 	mov	local01, result1
1a638     FE 28 02 F6 | 	mov	local02, result2
1a63c     FF 2A 02 F6 | 	mov	local03, result3
1a640     0C 4E 05 F1 | 	add	fp, #12
1a644     A7 26 62 FC | 	wrlong	local01, fp
1a648     04 4E 05 F1 | 	add	fp, #4
1a64c     A7 28 62 FC | 	wrlong	local02, fp
1a650     04 4E 05 F1 | 	add	fp, #4
1a654     A7 2A 62 FC | 	wrlong	local03, fp
1a658     14 4E 85 F1 | 	sub	fp, #20
1a65c     30 12 BF FD | 	call	#_pop
1a660     FF 2A 02 F6 | 	mov	local03, result3
1a664     A7 FA 61 FC | 	wrlong	result1, fp
1a668     04 4E 05 F1 | 	add	fp, #4
1a66c     A7 FC 61 FC | 	wrlong	result2, fp
1a670     04 4E 05 F1 | 	add	fp, #4
1a674     A7 2A 62 FC | 	wrlong	local03, fp
1a678                 | ' 
1a678                 | ' t2=pop()
1a678                 | ' t1=pop()
1a678                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1a678     08 4E 85 F1 | 	sub	fp, #8
1a67c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a680     14 4E 05 A1 |  if_e	add	fp, #20
1a684     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a688     14 4E 85 A1 |  if_e	sub	fp, #20
1a68c     16 2B 02 A6 |  if_e	mov	local03, local04
1a690     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a694     28 00 90 5D |  if_ne	jmp	#LR__2180
1a698     00 26 06 F6 | 	mov	local01, #0
1a69c     A7 12 02 FB | 	rdlong	arg01, fp
1a6a0     0C 4E 05 F1 | 	add	fp, #12
1a6a4     A7 14 02 FB | 	rdlong	arg02, fp
1a6a8     0C 4E 85 F1 | 	sub	fp, #12
1a6ac     8C 75 B0 FD | 	call	#__system___string_cmp
1a6b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a6b4     00 26 26 C6 |  if_b	not	local01, #0
1a6b8     A7 26 62 FC | 	wrlong	local01, fp
1a6bc     0C 04 90 FD | 	jmp	#LR__2193
1a6c0                 | LR__2180
1a6c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1a6c0     08 4E 05 F1 | 	add	fp, #8
1a6c4     A7 26 02 FB | 	rdlong	local01, fp
1a6c8     08 4E 85 F1 | 	sub	fp, #8
1a6cc     1E 26 0E F2 | 	cmp	local01, #30 wz
1a6d0     14 4E 05 A1 |  if_e	add	fp, #20
1a6d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a6d8     14 4E 85 A1 |  if_e	sub	fp, #20
1a6dc     16 2B 02 A6 |  if_e	mov	local03, local04
1a6e0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a6e4     2C 00 90 5D |  if_ne	jmp	#LR__2181
1a6e8     00 26 06 F6 | 	mov	local01, #0
1a6ec     A7 12 02 FB | 	rdlong	arg01, fp
1a6f0     0C 4E 05 F1 | 	add	fp, #12
1a6f4     A7 14 02 FB | 	rdlong	arg02, fp
1a6f8     0C 4E 85 F1 | 	sub	fp, #12
1a6fc     01 16 06 F6 | 	mov	arg03, #1
1a700     00 A7 B0 FD | 	call	#__system___float_cmp
1a704     00 FA 55 F2 | 	cmps	result1, #0 wc
1a708     00 26 26 C6 |  if_b	not	local01, #0
1a70c     A7 26 62 FC | 	wrlong	local01, fp
1a710     B8 03 90 FD | 	jmp	#LR__2193
1a714                 | LR__2181
1a714                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1a714     08 4E 05 F1 | 	add	fp, #8
1a718     A7 26 02 FB | 	rdlong	local01, fp
1a71c     08 4E 85 F1 | 	sub	fp, #8
1a720     1E 26 0E F2 | 	cmp	local01, #30 wz
1a724     14 4E 05 A1 |  if_e	add	fp, #20
1a728     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a72c     14 4E 85 A1 |  if_e	sub	fp, #20
1a730     16 2B 02 A6 |  if_e	mov	local03, local04
1a734     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a738     48 00 90 5D |  if_ne	jmp	#LR__2182
1a73c     00 26 06 F6 | 	mov	local01, #0
1a740     A7 28 02 FB | 	rdlong	local02, fp
1a744     0C 4E 05 F1 | 	add	fp, #12
1a748     A7 12 02 FB | 	rdlong	arg01, fp
1a74c     0C 4E 85 F1 | 	sub	fp, #12
1a750     09 13 52 F6 | 	abs	arg01, arg01 wc
1a754     1F 2E C6 C9 |  if_b	decod	local05, #31
1a758     00 2E 06 36 |  if_ae	mov	local05, #0
1a75c     6C 9E B0 FD | 	call	#__system___float_fromuns
1a760     17 FB 61 F5 | 	xor	result1, local05
1a764     FD 14 02 F6 | 	mov	arg02, result1
1a768     14 13 02 F6 | 	mov	arg01, local02
1a76c     01 16 06 F6 | 	mov	arg03, #1
1a770     90 A6 B0 FD | 	call	#__system___float_cmp
1a774     00 FA 55 F2 | 	cmps	result1, #0 wc
1a778     00 26 26 C6 |  if_b	not	local01, #0
1a77c     A7 26 62 FC | 	wrlong	local01, fp
1a780     48 03 90 FD | 	jmp	#LR__2193
1a784                 | LR__2182
1a784                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1a784     08 4E 05 F1 | 	add	fp, #8
1a788     A7 26 02 FB | 	rdlong	local01, fp
1a78c     08 4E 85 F1 | 	sub	fp, #8
1a790     1E 26 0E F2 | 	cmp	local01, #30 wz
1a794     14 4E 05 A1 |  if_e	add	fp, #20
1a798     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a79c     14 4E 85 A1 |  if_e	sub	fp, #20
1a7a0     16 2B 02 A6 |  if_e	mov	local03, local04
1a7a4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a7a8     38 00 90 5D |  if_ne	jmp	#LR__2183
1a7ac     00 26 06 F6 | 	mov	local01, #0
1a7b0     A7 28 02 FB | 	rdlong	local02, fp
1a7b4     0C 4E 05 F1 | 	add	fp, #12
1a7b8     A7 12 02 FB | 	rdlong	arg01, fp
1a7bc     0C 4E 85 F1 | 	sub	fp, #12
1a7c0     08 9E B0 FD | 	call	#__system___float_fromuns
1a7c4     FD 14 02 F6 | 	mov	arg02, result1
1a7c8     14 13 02 F6 | 	mov	arg01, local02
1a7cc     01 16 06 F6 | 	mov	arg03, #1
1a7d0     30 A6 B0 FD | 	call	#__system___float_cmp
1a7d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a7d8     00 26 26 C6 |  if_b	not	local01, #0
1a7dc     A7 26 62 FC | 	wrlong	local01, fp
1a7e0     E8 02 90 FD | 	jmp	#LR__2193
1a7e4                 | LR__2183
1a7e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1a7e4     08 4E 05 F1 | 	add	fp, #8
1a7e8     A7 26 02 FB | 	rdlong	local01, fp
1a7ec     08 4E 85 F1 | 	sub	fp, #8
1a7f0     1C 26 0E F2 | 	cmp	local01, #28 wz
1a7f4     14 4E 05 A1 |  if_e	add	fp, #20
1a7f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a7fc     14 4E 85 A1 |  if_e	sub	fp, #20
1a800     16 2B 02 A6 |  if_e	mov	local03, local04
1a804     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a808     44 00 90 5D |  if_ne	jmp	#LR__2184
1a80c     00 26 06 F6 | 	mov	local01, #0
1a810     A7 12 02 FB | 	rdlong	arg01, fp
1a814     09 13 52 F6 | 	abs	arg01, arg01 wc
1a818     1F 2E C6 C9 |  if_b	decod	local05, #31
1a81c     00 2E 06 36 |  if_ae	mov	local05, #0
1a820     A8 9D B0 FD | 	call	#__system___float_fromuns
1a824     17 FB 61 F5 | 	xor	result1, local05
1a828     FD 12 02 F6 | 	mov	arg01, result1
1a82c     0C 4E 05 F1 | 	add	fp, #12
1a830     A7 14 02 FB | 	rdlong	arg02, fp
1a834     0C 4E 85 F1 | 	sub	fp, #12
1a838     01 16 06 F6 | 	mov	arg03, #1
1a83c     C4 A5 B0 FD | 	call	#__system___float_cmp
1a840     00 FA 55 F2 | 	cmps	result1, #0 wc
1a844     00 26 26 C6 |  if_b	not	local01, #0
1a848     A7 26 62 FC | 	wrlong	local01, fp
1a84c     7C 02 90 FD | 	jmp	#LR__2193
1a850                 | LR__2184
1a850                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1a850     08 4E 05 F1 | 	add	fp, #8
1a854     A7 26 02 FB | 	rdlong	local01, fp
1a858     08 4E 85 F1 | 	sub	fp, #8
1a85c     1C 26 0E F2 | 	cmp	local01, #28 wz
1a860     14 4E 05 A1 |  if_e	add	fp, #20
1a864     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a868     14 4E 85 A1 |  if_e	sub	fp, #20
1a86c     16 2B 02 A6 |  if_e	mov	local03, local04
1a870     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a874     20 00 90 5D |  if_ne	jmp	#LR__2185
1a878     A7 28 02 FB | 	rdlong	local02, fp
1a87c     0C 4E 05 F1 | 	add	fp, #12
1a880     A7 2A 02 FB | 	rdlong	local03, fp
1a884     0C 4E 85 F1 | 	sub	fp, #12
1a888     15 29 52 F2 | 	cmps	local02, local03 wc
1a88c     13 27 A2 F1 | 	subx	local01, local01
1a890     A7 26 62 FC | 	wrlong	local01, fp
1a894     34 02 90 FD | 	jmp	#LR__2193
1a898                 | LR__2185
1a898                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1a898     08 4E 05 F1 | 	add	fp, #8
1a89c     A7 26 02 FB | 	rdlong	local01, fp
1a8a0     08 4E 85 F1 | 	sub	fp, #8
1a8a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1a8a8     14 4E 05 A1 |  if_e	add	fp, #20
1a8ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a8b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a8b4     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
1a8b8     20 00 90 5D |  if_ne	jmp	#LR__2186
1a8bc     A7 28 02 FB | 	rdlong	local02, fp
1a8c0     0C 4E 05 F1 | 	add	fp, #12
1a8c4     A7 2A 02 FB | 	rdlong	local03, fp
1a8c8     0C 4E 85 F1 | 	sub	fp, #12
1a8cc     15 29 52 F2 | 	cmps	local02, local03 wc
1a8d0     13 27 A2 F1 | 	subx	local01, local01
1a8d4     A7 26 62 FC | 	wrlong	local01, fp
1a8d8     F0 01 90 FD | 	jmp	#LR__2193
1a8dc                 | LR__2186
1a8dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1a8dc     08 4E 05 F1 | 	add	fp, #8
1a8e0     A7 26 02 FB | 	rdlong	local01, fp
1a8e4     08 4E 85 F1 | 	sub	fp, #8
1a8e8     1D 26 0E F2 | 	cmp	local01, #29 wz
1a8ec     14 4E 05 A1 |  if_e	add	fp, #20
1a8f0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a8f4     14 4E 85 A1 |  if_e	sub	fp, #20
1a8f8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a8fc     34 00 90 5D |  if_ne	jmp	#LR__2187
1a900     00 26 06 F6 | 	mov	local01, #0
1a904     A7 12 02 FB | 	rdlong	arg01, fp
1a908     C0 9C B0 FD | 	call	#__system___float_fromuns
1a90c     FD 12 02 F6 | 	mov	arg01, result1
1a910     0C 4E 05 F1 | 	add	fp, #12
1a914     A7 14 02 FB | 	rdlong	arg02, fp
1a918     0C 4E 85 F1 | 	sub	fp, #12
1a91c     01 16 06 F6 | 	mov	arg03, #1
1a920     E0 A4 B0 FD | 	call	#__system___float_cmp
1a924     00 FA 55 F2 | 	cmps	result1, #0 wc
1a928     00 26 26 C6 |  if_b	not	local01, #0
1a92c     A7 26 62 FC | 	wrlong	local01, fp
1a930     98 01 90 FD | 	jmp	#LR__2193
1a934                 | LR__2187
1a934                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1a934     08 4E 05 F1 | 	add	fp, #8
1a938     A7 26 02 FB | 	rdlong	local01, fp
1a93c     08 4E 85 F1 | 	sub	fp, #8
1a940     1D 26 0E F2 | 	cmp	local01, #29 wz
1a944     14 4E 05 A1 |  if_e	add	fp, #20
1a948     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a94c     14 4E 85 A1 |  if_e	sub	fp, #20
1a950     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a954     20 00 90 5D |  if_ne	jmp	#LR__2188
1a958     A7 28 02 FB | 	rdlong	local02, fp
1a95c     0C 4E 05 F1 | 	add	fp, #12
1a960     A7 2A 02 FB | 	rdlong	local03, fp
1a964     0C 4E 85 F1 | 	sub	fp, #12
1a968     15 29 52 F2 | 	cmps	local02, local03 wc
1a96c     13 27 A2 F1 | 	subx	local01, local01
1a970     A7 26 62 FC | 	wrlong	local01, fp
1a974     54 01 90 FD | 	jmp	#LR__2193
1a978                 | LR__2188
1a978                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1a978     08 4E 05 F1 | 	add	fp, #8
1a97c     A7 26 02 FB | 	rdlong	local01, fp
1a980     08 4E 85 F1 | 	sub	fp, #8
1a984     1D 26 0E F2 | 	cmp	local01, #29 wz
1a988     14 4E 05 A1 |  if_e	add	fp, #20
1a98c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a990     14 4E 85 A1 |  if_e	sub	fp, #20
1a994     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a998     20 00 90 5D |  if_ne	jmp	#LR__2189
1a99c     A7 28 02 FB | 	rdlong	local02, fp
1a9a0     0C 4E 05 F1 | 	add	fp, #12
1a9a4     A7 2A 02 FB | 	rdlong	local03, fp
1a9a8     0C 4E 85 F1 | 	sub	fp, #12
1a9ac     15 29 12 F2 | 	cmp	local02, local03 wc
1a9b0     13 27 A2 F1 | 	subx	local01, local01
1a9b4     A7 26 62 FC | 	wrlong	local01, fp
1a9b8     10 01 90 FD | 	jmp	#LR__2193
1a9bc                 | LR__2189
1a9bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1a9bc     08 4E 05 F1 | 	add	fp, #8
1a9c0     A7 26 02 FB | 	rdlong	local01, fp
1a9c4     08 4E 85 F1 | 	sub	fp, #8
1a9c8     2B 26 0E F2 | 	cmp	local01, #43 wz
1a9cc     14 4E 05 A1 |  if_e	add	fp, #20
1a9d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a9d4     14 4E 85 A1 |  if_e	sub	fp, #20
1a9d8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a9dc     30 00 90 5D |  if_ne	jmp	#LR__2190
1a9e0     00 26 06 F6 | 	mov	local01, #0
1a9e4     A7 12 02 FB | 	rdlong	arg01, fp
1a9e8     1C 10 BF FD | 	call	#_convertstring
1a9ec     FD 12 02 F6 | 	mov	arg01, result1
1a9f0     0C 4E 05 F1 | 	add	fp, #12
1a9f4     A7 14 02 FB | 	rdlong	arg02, fp
1a9f8     0C 4E 85 F1 | 	sub	fp, #12
1a9fc     3C 72 B0 FD | 	call	#__system___string_cmp
1aa00     00 FA 55 F2 | 	cmps	result1, #0 wc
1aa04     00 26 26 C6 |  if_b	not	local01, #0
1aa08     A7 26 62 FC | 	wrlong	local01, fp
1aa0c     BC 00 90 FD | 	jmp	#LR__2193
1aa10                 | LR__2190
1aa10                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1aa10     08 4E 05 F1 | 	add	fp, #8
1aa14     A7 26 02 FB | 	rdlong	local01, fp
1aa18     08 4E 85 F1 | 	sub	fp, #8
1aa1c     1F 26 0E F2 | 	cmp	local01, #31 wz
1aa20     14 4E 05 A1 |  if_e	add	fp, #20
1aa24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1aa28     14 4E 85 A1 |  if_e	sub	fp, #20
1aa2c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1aa30     34 00 90 5D |  if_ne	jmp	#LR__2191
1aa34     00 26 06 F6 | 	mov	local01, #0
1aa38     A7 28 02 FB | 	rdlong	local02, fp
1aa3c     0C 4E 05 F1 | 	add	fp, #12
1aa40     A7 12 02 FB | 	rdlong	arg01, fp
1aa44     0C 4E 85 F1 | 	sub	fp, #12
1aa48     BC 0F BF FD | 	call	#_convertstring
1aa4c     FD 14 02 F6 | 	mov	arg02, result1
1aa50     14 13 02 F6 | 	mov	arg01, local02
1aa54     E4 71 B0 FD | 	call	#__system___string_cmp
1aa58     00 FA 55 F2 | 	cmps	result1, #0 wc
1aa5c     00 26 26 C6 |  if_b	not	local01, #0
1aa60     A7 26 62 FC | 	wrlong	local01, fp
1aa64     64 00 90 FD | 	jmp	#LR__2193
1aa68                 | LR__2191
1aa68                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1aa68     08 4E 05 F1 | 	add	fp, #8
1aa6c     A7 26 02 FB | 	rdlong	local01, fp
1aa70     08 4E 85 F1 | 	sub	fp, #8
1aa74     2B 26 0E F2 | 	cmp	local01, #43 wz
1aa78     14 4E 05 A1 |  if_e	add	fp, #20
1aa7c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1aa80     14 4E 85 A1 |  if_e	sub	fp, #20
1aa84     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1aa88     3C 00 90 5D |  if_ne	jmp	#LR__2192
1aa8c     00 26 06 F6 | 	mov	local01, #0
1aa90     A7 12 02 FB | 	rdlong	arg01, fp
1aa94     70 0F BF FD | 	call	#_convertstring
1aa98     FD 28 02 F6 | 	mov	local02, result1
1aa9c     0C 4E 05 F1 | 	add	fp, #12
1aaa0     A7 12 02 FB | 	rdlong	arg01, fp
1aaa4     0C 4E 85 F1 | 	sub	fp, #12
1aaa8     5C 0F BF FD | 	call	#_convertstring
1aaac     FD 14 02 F6 | 	mov	arg02, result1
1aab0     14 13 02 F6 | 	mov	arg01, local02
1aab4     84 71 B0 FD | 	call	#__system___string_cmp
1aab8     00 FA 55 F2 | 	cmps	result1, #0 wc
1aabc     00 26 26 C6 |  if_b	not	local01, #0
1aac0     A7 26 62 FC | 	wrlong	local01, fp
1aac4     04 00 90 FD | 	jmp	#LR__2193
1aac8                 | LR__2192
1aac8     A7 00 68 FC | 	wrlong	#0, fp
1aacc                 | LR__2193
1aacc     08 4E 05 F1 | 	add	fp, #8
1aad0     A7 38 68 FC | 	wrlong	#28, fp
1aad4     08 4E 85 F1 | 	sub	fp, #8
1aad8     A7 12 02 F6 | 	mov	arg01, fp
1aadc     48 0E BF FD | 	call	#_push
1aae0     A7 F0 03 F6 | 	mov	ptra, fp
1aae4     B2 00 A0 FD | 	call	#popregs_
1aae8                 | _do_lt_ret
1aae8     2D 00 64 FD | 	ret
1aaec                 | 
1aaec                 | ' 
1aaec                 | ' '--------------------------------- minus (-)
1aaec                 | ' 
1aaec                 | ' sub do_minus
1aaec                 | _do_minus
1aaec     05 4A 05 F6 | 	mov	COUNT_, #5
1aaf0     A8 00 A0 FD | 	call	#pushregs_
1aaf4     18 F0 07 F1 | 	add	ptra, #24
1aaf8     94 0D BF FD | 	call	#_pop
1aafc     FD 26 02 F6 | 	mov	local01, result1
1ab00     FE 28 02 F6 | 	mov	local02, result2
1ab04     FF 2A 02 F6 | 	mov	local03, result3
1ab08     0C 4E 05 F1 | 	add	fp, #12
1ab0c     A7 26 62 FC | 	wrlong	local01, fp
1ab10     04 4E 05 F1 | 	add	fp, #4
1ab14     A7 28 62 FC | 	wrlong	local02, fp
1ab18     04 4E 05 F1 | 	add	fp, #4
1ab1c     A7 2A 62 FC | 	wrlong	local03, fp
1ab20     14 4E 85 F1 | 	sub	fp, #20
1ab24     68 0D BF FD | 	call	#_pop
1ab28     FF 2A 02 F6 | 	mov	local03, result3
1ab2c     A7 FA 61 FC | 	wrlong	result1, fp
1ab30     04 4E 05 F1 | 	add	fp, #4
1ab34     A7 FC 61 FC | 	wrlong	result2, fp
1ab38     04 4E 05 F1 | 	add	fp, #4
1ab3c     A7 2A 62 FC | 	wrlong	local03, fp
1ab40                 | ' 
1ab40                 | ' t2=pop()
1ab40                 | ' t1=pop()
1ab40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1ab40     08 4E 85 F1 | 	sub	fp, #8
1ab44     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ab48     14 4E 05 A1 |  if_e	add	fp, #20
1ab4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ab50     14 4E 85 A1 |  if_e	sub	fp, #20
1ab54     16 2B 02 A6 |  if_e	mov	local03, local04
1ab58     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ab5c     5C 00 90 5D |  if_ne	jmp	#LR__2201
1ab60                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1ab60     0C 4E 05 F1 | 	add	fp, #12
1ab64     A7 26 02 FB | 	rdlong	local01, fp
1ab68     0C 4E 85 F1 | 	sub	fp, #12
1ab6c     A7 2A 02 FB | 	rdlong	local03, fp
1ab70     15 27 12 F2 | 	cmp	local01, local03 wc
1ab74     1C 00 90 3D |  if_ae	jmp	#LR__2200
1ab78     A7 26 02 FB | 	rdlong	local01, fp
1ab7c     0C 4E 05 F1 | 	add	fp, #12
1ab80     A7 28 02 FB | 	rdlong	local02, fp
1ab84     0C 4E 85 F1 | 	sub	fp, #12
1ab88     14 27 82 F1 | 	sub	local01, local02
1ab8c     A7 26 62 FC | 	wrlong	local01, fp
1ab90     F4 02 90 FD | 	jmp	#LR__2210
1ab94                 | LR__2200
1ab94     A7 26 02 FB | 	rdlong	local01, fp
1ab98     0C 4E 05 F1 | 	add	fp, #12
1ab9c     A7 28 02 FB | 	rdlong	local02, fp
1aba0     0C 4E 85 F1 | 	sub	fp, #12
1aba4     14 27 82 F1 | 	sub	local01, local02
1aba8     A7 26 62 FC | 	wrlong	local01, fp
1abac     08 4E 05 F1 | 	add	fp, #8
1abb0     A7 38 68 FC | 	wrlong	#28, fp
1abb4     08 4E 85 F1 | 	sub	fp, #8
1abb8     CC 02 90 FD | 	jmp	#LR__2210
1abbc                 | LR__2201
1abbc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1abbc     08 4E 05 F1 | 	add	fp, #8
1abc0     A7 26 02 FB | 	rdlong	local01, fp
1abc4     08 4E 85 F1 | 	sub	fp, #8
1abc8     1D 26 0E F2 | 	cmp	local01, #29 wz
1abcc     14 4E 05 A1 |  if_e	add	fp, #20
1abd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1abd4     14 4E 85 A1 |  if_e	sub	fp, #20
1abd8     16 2B 02 A6 |  if_e	mov	local03, local04
1abdc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1abe0     28 00 90 5D |  if_ne	jmp	#LR__2202
1abe4     A7 26 02 FB | 	rdlong	local01, fp
1abe8     0C 4E 05 F1 | 	add	fp, #12
1abec     A7 28 02 FB | 	rdlong	local02, fp
1abf0     0C 4E 85 F1 | 	sub	fp, #12
1abf4     14 27 82 F1 | 	sub	local01, local02
1abf8     A7 26 62 FC | 	wrlong	local01, fp
1abfc     08 4E 05 F1 | 	add	fp, #8
1ac00     A7 38 68 FC | 	wrlong	#28, fp
1ac04     08 4E 85 F1 | 	sub	fp, #8
1ac08     7C 02 90 FD | 	jmp	#LR__2210
1ac0c                 | LR__2202
1ac0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1ac0c     08 4E 05 F1 | 	add	fp, #8
1ac10     A7 26 02 FB | 	rdlong	local01, fp
1ac14     08 4E 85 F1 | 	sub	fp, #8
1ac18     1D 26 0E F2 | 	cmp	local01, #29 wz
1ac1c     14 4E 05 A1 |  if_e	add	fp, #20
1ac20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ac24     14 4E 85 A1 |  if_e	sub	fp, #20
1ac28     16 2B 02 A6 |  if_e	mov	local03, local04
1ac2c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ac30     34 00 90 5D |  if_ne	jmp	#LR__2203
1ac34     A7 12 02 FB | 	rdlong	arg01, fp
1ac38     90 99 B0 FD | 	call	#__system___float_fromuns
1ac3c     FD 12 02 F6 | 	mov	arg01, result1
1ac40     0C 4E 05 F1 | 	add	fp, #12
1ac44     A7 14 02 FB | 	rdlong	arg02, fp
1ac48     0C 4E 85 F1 | 	sub	fp, #12
1ac4c     1F 14 E6 F4 | 	bitnot	arg02, #31
1ac50     AC 99 B0 FD | 	call	#__system___float_add
1ac54     A7 FA 61 FC | 	wrlong	result1, fp
1ac58     08 4E 05 F1 | 	add	fp, #8
1ac5c     A7 3C 68 FC | 	wrlong	#30, fp
1ac60     08 4E 85 F1 | 	sub	fp, #8
1ac64     20 02 90 FD | 	jmp	#LR__2210
1ac68                 | LR__2203
1ac68                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1ac68     08 4E 05 F1 | 	add	fp, #8
1ac6c     A7 26 02 FB | 	rdlong	local01, fp
1ac70     08 4E 85 F1 | 	sub	fp, #8
1ac74     1C 26 0E F2 | 	cmp	local01, #28 wz
1ac78     14 4E 05 A1 |  if_e	add	fp, #20
1ac7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ac80     14 4E 85 A1 |  if_e	sub	fp, #20
1ac84     16 2B 02 A6 |  if_e	mov	local03, local04
1ac88     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ac8c     1C 00 90 5D |  if_ne	jmp	#LR__2204
1ac90     A7 26 02 FB | 	rdlong	local01, fp
1ac94     0C 4E 05 F1 | 	add	fp, #12
1ac98     A7 28 02 FB | 	rdlong	local02, fp
1ac9c     0C 4E 85 F1 | 	sub	fp, #12
1aca0     14 27 82 F1 | 	sub	local01, local02
1aca4     A7 26 62 FC | 	wrlong	local01, fp
1aca8     DC 01 90 FD | 	jmp	#LR__2210
1acac                 | LR__2204
1acac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1acac     08 4E 05 F1 | 	add	fp, #8
1acb0     A7 26 02 FB | 	rdlong	local01, fp
1acb4     08 4E 85 F1 | 	sub	fp, #8
1acb8     1C 26 0E F2 | 	cmp	local01, #28 wz
1acbc     14 4E 05 A1 |  if_e	add	fp, #20
1acc0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1acc4     14 4E 85 A1 |  if_e	sub	fp, #20
1acc8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1accc     1C 00 90 5D |  if_ne	jmp	#LR__2205
1acd0     A7 26 02 FB | 	rdlong	local01, fp
1acd4     0C 4E 05 F1 | 	add	fp, #12
1acd8     A7 28 02 FB | 	rdlong	local02, fp
1acdc     0C 4E 85 F1 | 	sub	fp, #12
1ace0     14 27 82 F1 | 	sub	local01, local02
1ace4     A7 26 62 FC | 	wrlong	local01, fp
1ace8     9C 01 90 FD | 	jmp	#LR__2210
1acec                 | LR__2205
1acec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1acec     08 4E 05 F1 | 	add	fp, #8
1acf0     A7 26 02 FB | 	rdlong	local01, fp
1acf4     08 4E 85 F1 | 	sub	fp, #8
1acf8     1C 26 0E F2 | 	cmp	local01, #28 wz
1acfc     14 4E 05 A1 |  if_e	add	fp, #20
1ad00     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ad04     14 4E 85 A1 |  if_e	sub	fp, #20
1ad08     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ad0c     44 00 90 5D |  if_ne	jmp	#LR__2206
1ad10     A7 12 02 FB | 	rdlong	arg01, fp
1ad14     09 13 52 F6 | 	abs	arg01, arg01 wc
1ad18     1F 2E C6 C9 |  if_b	decod	local05, #31
1ad1c     00 2E 06 36 |  if_ae	mov	local05, #0
1ad20     A8 98 B0 FD | 	call	#__system___float_fromuns
1ad24     17 FB 61 F5 | 	xor	result1, local05
1ad28     FD 12 02 F6 | 	mov	arg01, result1
1ad2c     0C 4E 05 F1 | 	add	fp, #12
1ad30     A7 14 02 FB | 	rdlong	arg02, fp
1ad34     0C 4E 85 F1 | 	sub	fp, #12
1ad38     1F 14 E6 F4 | 	bitnot	arg02, #31
1ad3c     C0 98 B0 FD | 	call	#__system___float_add
1ad40     A7 FA 61 FC | 	wrlong	result1, fp
1ad44     08 4E 05 F1 | 	add	fp, #8
1ad48     A7 3C 68 FC | 	wrlong	#30, fp
1ad4c     08 4E 85 F1 | 	sub	fp, #8
1ad50     34 01 90 FD | 	jmp	#LR__2210
1ad54                 | LR__2206
1ad54                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1ad54     08 4E 05 F1 | 	add	fp, #8
1ad58     A7 26 02 FB | 	rdlong	local01, fp
1ad5c     08 4E 85 F1 | 	sub	fp, #8
1ad60     1E 26 0E F2 | 	cmp	local01, #30 wz
1ad64     14 4E 05 A1 |  if_e	add	fp, #20
1ad68     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ad6c     14 4E 85 A1 |  if_e	sub	fp, #20
1ad70     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ad74     2C 00 90 5D |  if_ne	jmp	#LR__2207
1ad78     A7 26 02 FB | 	rdlong	local01, fp
1ad7c     0C 4E 05 F1 | 	add	fp, #12
1ad80     A7 12 02 FB | 	rdlong	arg01, fp
1ad84     0C 4E 85 F1 | 	sub	fp, #12
1ad88     40 98 B0 FD | 	call	#__system___float_fromuns
1ad8c     FD 14 02 F6 | 	mov	arg02, result1
1ad90     13 13 02 F6 | 	mov	arg01, local01
1ad94     1F 14 E6 F4 | 	bitnot	arg02, #31
1ad98     64 98 B0 FD | 	call	#__system___float_add
1ad9c     A7 FA 61 FC | 	wrlong	result1, fp
1ada0     E4 00 90 FD | 	jmp	#LR__2210
1ada4                 | LR__2207
1ada4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1ada4     08 4E 05 F1 | 	add	fp, #8
1ada8     A7 26 02 FB | 	rdlong	local01, fp
1adac     08 4E 85 F1 | 	sub	fp, #8
1adb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1adb4     14 4E 05 A1 |  if_e	add	fp, #20
1adb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1adbc     14 4E 85 A1 |  if_e	sub	fp, #20
1adc0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1adc4     3C 00 90 5D |  if_ne	jmp	#LR__2208
1adc8     A7 26 02 FB | 	rdlong	local01, fp
1adcc     0C 4E 05 F1 | 	add	fp, #12
1add0     A7 12 02 FB | 	rdlong	arg01, fp
1add4     0C 4E 85 F1 | 	sub	fp, #12
1add8     09 13 52 F6 | 	abs	arg01, arg01 wc
1addc     1F 2E C6 C9 |  if_b	decod	local05, #31
1ade0     00 2E 06 36 |  if_ae	mov	local05, #0
1ade4     E4 97 B0 FD | 	call	#__system___float_fromuns
1ade8     17 FB 61 F5 | 	xor	result1, local05
1adec     FD 14 02 F6 | 	mov	arg02, result1
1adf0     13 13 02 F6 | 	mov	arg01, local01
1adf4     1F 14 E6 F4 | 	bitnot	arg02, #31
1adf8     04 98 B0 FD | 	call	#__system___float_add
1adfc     A7 FA 61 FC | 	wrlong	result1, fp
1ae00     84 00 90 FD | 	jmp	#LR__2210
1ae04                 | LR__2208
1ae04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ae04     08 4E 05 F1 | 	add	fp, #8
1ae08     A7 26 02 FB | 	rdlong	local01, fp
1ae0c     08 4E 85 F1 | 	sub	fp, #8
1ae10     1E 26 0E F2 | 	cmp	local01, #30 wz
1ae14     14 4E 05 A1 |  if_e	add	fp, #20
1ae18     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ae1c     14 4E 85 A1 |  if_e	sub	fp, #20
1ae20     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ae24     20 00 90 5D |  if_ne	jmp	#LR__2209
1ae28     A7 12 02 FB | 	rdlong	arg01, fp
1ae2c     0C 4E 05 F1 | 	add	fp, #12
1ae30     A7 14 02 FB | 	rdlong	arg02, fp
1ae34     0C 4E 85 F1 | 	sub	fp, #12
1ae38     1F 14 E6 F4 | 	bitnot	arg02, #31
1ae3c     C0 97 B0 FD | 	call	#__system___float_add
1ae40     A7 FA 61 FC | 	wrlong	result1, fp
1ae44     40 00 90 FD | 	jmp	#LR__2210
1ae48                 | LR__2209
1ae48                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1ae48     08 4E 05 F1 | 	add	fp, #8
1ae4c     A7 26 02 FB | 	rdlong	local01, fp
1ae50     08 4E 85 F1 | 	sub	fp, #8
1ae54     1F 26 0E F2 | 	cmp	local01, #31 wz
1ae58     14 4E 05 51 |  if_ne	add	fp, #20
1ae5c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ae60     14 4E 85 51 |  if_ne	sub	fp, #20
1ae64     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1ae68     A7 06 68 AC |  if_e	wrlong	#3, fp
1ae6c     08 4E 05 A1 |  if_e	add	fp, #8
1ae70     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ae74     08 4E 85 A1 |  if_e	sub	fp, #8
1ae78     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1ae7c     08 4E 05 51 |  if_ne	add	fp, #8
1ae80     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ae84     08 4E 85 51 |  if_ne	sub	fp, #8
1ae88                 | LR__2210
1ae88     A7 12 02 F6 | 	mov	arg01, fp
1ae8c     98 0A BF FD | 	call	#_push
1ae90     A7 F0 03 F6 | 	mov	ptra, fp
1ae94     B2 00 A0 FD | 	call	#popregs_
1ae98                 | _do_minus_ret
1ae98     2D 00 64 FD | 	ret
1ae9c                 | 
1ae9c                 | ' 
1ae9c                 | ' '--------------------------------- negative (-), one argument negative
1ae9c                 | ' 
1ae9c                 | ' sub do_negative
1ae9c                 | _do_negative
1ae9c     02 4A 05 F6 | 	mov	COUNT_, #2
1aea0     A8 00 A0 FD | 	call	#pushregs_
1aea4     0C F0 07 F1 | 	add	ptra, #12
1aea8     E4 09 BF FD | 	call	#_pop
1aeac     FF 26 02 F6 | 	mov	local01, result3
1aeb0     A7 FA 61 FC | 	wrlong	result1, fp
1aeb4     04 4E 05 F1 | 	add	fp, #4
1aeb8     A7 FC 61 FC | 	wrlong	result2, fp
1aebc     04 4E 05 F1 | 	add	fp, #4
1aec0     A7 26 62 FC | 	wrlong	local01, fp
1aec4                 | ' 
1aec4                 | ' t1=pop()
1aec4                 | ' if t1.result_type=result_int then 
1aec4     08 4E 85 F1 | 	sub	fp, #8
1aec8     1C 26 0E F2 | 	cmp	local01, #28 wz
1aecc     A7 28 02 AB |  if_e	rdlong	local02, fp
1aed0     14 27 62 A6 |  if_e	neg	local01, local02
1aed4     A7 26 62 AC |  if_e	wrlong	local01, fp
1aed8     5C 00 90 AD |  if_e	jmp	#LR__2222
1aedc     08 4E 05 F1 | 	add	fp, #8
1aee0     A7 26 02 FB | 	rdlong	local01, fp
1aee4     08 4E 85 F1 | 	sub	fp, #8
1aee8     1D 26 0E F2 | 	cmp	local01, #29 wz
1aeec     1C 00 90 5D |  if_ne	jmp	#LR__2220
1aef0     A7 28 02 FB | 	rdlong	local02, fp
1aef4     14 27 62 F6 | 	neg	local01, local02
1aef8     A7 26 62 FC | 	wrlong	local01, fp
1aefc     08 4E 05 F1 | 	add	fp, #8
1af00     A7 38 68 FC | 	wrlong	#28, fp
1af04     08 4E 85 F1 | 	sub	fp, #8
1af08     2C 00 90 FD | 	jmp	#LR__2221
1af0c                 | LR__2220
1af0c     08 4E 05 F1 | 	add	fp, #8
1af10     A7 26 02 FB | 	rdlong	local01, fp
1af14     08 4E 85 F1 | 	sub	fp, #8
1af18     1E 26 0E F2 | 	cmp	local01, #30 wz
1af1c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1af20     1F FA E5 A4 |  if_e	bitnot	result1, #31
1af24     A7 FA 61 AC |  if_e	wrlong	result1, fp
1af28     08 4E 05 51 |  if_ne	add	fp, #8
1af2c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1af30     08 4E 85 51 |  if_ne	sub	fp, #8
1af34     A7 50 68 5C |  if_ne	wrlong	#40, fp
1af38                 | LR__2221
1af38                 | LR__2222
1af38     A7 12 02 F6 | 	mov	arg01, fp
1af3c     E8 09 BF FD | 	call	#_push
1af40     A7 F0 03 F6 | 	mov	ptra, fp
1af44     B2 00 A0 FD | 	call	#popregs_
1af48                 | _do_negative_ret
1af48     2D 00 64 FD | 	ret
1af4c                 | 
1af4c                 | ' 
1af4c                 | ' '--------------------------------- MOD (modulo)
1af4c                 | ' 
1af4c                 | ' sub do_mod 
1af4c                 | _do_mod
1af4c     01 4A 05 F6 | 	mov	COUNT_, #1
1af50     A8 00 A0 FD | 	call	#pushregs_
1af54     18 F0 07 F1 | 	add	ptra, #24
1af58     34 09 BF FD | 	call	#_pop
1af5c     FD 8A 02 F6 | 	mov	muldivb_, result1
1af60     FE 88 02 F6 | 	mov	muldiva_, result2
1af64     FF 26 02 F6 | 	mov	local01, result3
1af68     0C 4E 05 F1 | 	add	fp, #12
1af6c     A7 8A 62 FC | 	wrlong	muldivb_, fp
1af70     04 4E 05 F1 | 	add	fp, #4
1af74     A7 88 62 FC | 	wrlong	muldiva_, fp
1af78     04 4E 05 F1 | 	add	fp, #4
1af7c     A7 26 62 FC | 	wrlong	local01, fp
1af80     14 4E 85 F1 | 	sub	fp, #20
1af84     08 09 BF FD | 	call	#_pop
1af88     A7 FA 61 FC | 	wrlong	result1, fp
1af8c     04 4E 05 F1 | 	add	fp, #4
1af90     A7 FC 61 FC | 	wrlong	result2, fp
1af94     04 4E 05 F1 | 	add	fp, #4
1af98     A7 FE 61 FC | 	wrlong	result3, fp
1af9c                 | ' 
1af9c                 | ' t2=pop()
1af9c                 | ' t1=pop()
1af9c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1af9c     08 4E 85 F1 | 	sub	fp, #8
1afa0     1F FE 0D F2 | 	cmp	result3, #31 wz
1afa4     14 4E 05 51 |  if_ne	add	fp, #20
1afa8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1afac     14 4E 85 51 |  if_ne	sub	fp, #20
1afb0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1afb4     A7 14 68 AC |  if_e	wrlong	#10, fp
1afb8     08 4E 05 A1 |  if_e	add	fp, #8
1afbc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1afc0     08 4E 85 A1 |  if_e	sub	fp, #8
1afc4     90 01 90 AD |  if_e	jmp	#LR__2236
1afc8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1afc8     08 4E 05 F1 | 	add	fp, #8
1afcc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1afd0     08 4E 85 F1 | 	sub	fp, #8
1afd4     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1afd8     1C 00 90 5D |  if_ne	jmp	#LR__2230
1afdc     08 4E 05 F1 | 	add	fp, #8
1afe0     A7 38 68 FC | 	wrlong	#28, fp
1afe4     08 4E 85 F1 | 	sub	fp, #8
1afe8     A7 12 02 FB | 	rdlong	arg01, fp
1afec     00 14 06 F6 | 	mov	arg02, #0
1aff0     A4 9E B0 FD | 	call	#__system___float_tointeger
1aff4     A7 FA 61 FC | 	wrlong	result1, fp
1aff8                 | LR__2230
1aff8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1aff8     14 4E 05 F1 | 	add	fp, #20
1affc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b000     14 4E 85 F1 | 	sub	fp, #20
1b004     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1b008     28 00 90 5D |  if_ne	jmp	#LR__2231
1b00c     14 4E 05 F1 | 	add	fp, #20
1b010     A7 38 68 FC | 	wrlong	#28, fp
1b014     08 4E 85 F1 | 	sub	fp, #8
1b018     A7 12 02 FB | 	rdlong	arg01, fp
1b01c     0C 4E 85 F1 | 	sub	fp, #12
1b020     00 14 06 F6 | 	mov	arg02, #0
1b024     70 9E B0 FD | 	call	#__system___float_tointeger
1b028     0C 4E 05 F1 | 	add	fp, #12
1b02c     A7 FA 61 FC | 	wrlong	result1, fp
1b030     0C 4E 85 F1 | 	sub	fp, #12
1b034                 | LR__2231
1b034                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1b034     08 4E 05 F1 | 	add	fp, #8
1b038     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b03c     08 4E 85 F1 | 	sub	fp, #8
1b040     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b044     14 4E 05 A1 |  if_e	add	fp, #20
1b048     A7 26 02 AB |  if_e	rdlong	local01, fp
1b04c     14 4E 85 A1 |  if_e	sub	fp, #20
1b050     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b054     20 00 90 5D |  if_ne	jmp	#LR__2232
1b058     0C 4E 05 F1 | 	add	fp, #12
1b05c     A7 26 02 FB | 	rdlong	local01, fp
1b060     0C 4E 85 F1 | 	sub	fp, #12
1b064     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b068     13 8B 12 FD | 	qdiv	muldivb_, local01
1b06c     19 26 62 FD | 	getqy	local01
1b070     A7 26 62 FC | 	wrlong	local01, fp
1b074     E0 00 90 FD | 	jmp	#LR__2236
1b078                 | LR__2232
1b078                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1b078     08 4E 05 F1 | 	add	fp, #8
1b07c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b080     08 4E 85 F1 | 	sub	fp, #8
1b084     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b088     14 4E 05 A1 |  if_e	add	fp, #20
1b08c     A7 26 02 AB |  if_e	rdlong	local01, fp
1b090     14 4E 85 A1 |  if_e	sub	fp, #20
1b094     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b098     2C 00 90 5D |  if_ne	jmp	#LR__2233
1b09c     0C 4E 05 F1 | 	add	fp, #12
1b0a0     A7 26 02 FB | 	rdlong	local01, fp
1b0a4     0C 4E 85 F1 | 	sub	fp, #12
1b0a8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0ac     13 8B 12 FD | 	qdiv	muldivb_, local01
1b0b0     19 26 62 FD | 	getqy	local01
1b0b4     A7 26 62 FC | 	wrlong	local01, fp
1b0b8     08 4E 05 F1 | 	add	fp, #8
1b0bc     A7 38 68 FC | 	wrlong	#28, fp
1b0c0     08 4E 85 F1 | 	sub	fp, #8
1b0c4     90 00 90 FD | 	jmp	#LR__2236
1b0c8                 | LR__2233
1b0c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1b0c8     08 4E 05 F1 | 	add	fp, #8
1b0cc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0d0     08 4E 85 F1 | 	sub	fp, #8
1b0d4     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b0d8     14 4E 05 A1 |  if_e	add	fp, #20
1b0dc     A7 26 02 AB |  if_e	rdlong	local01, fp
1b0e0     14 4E 85 A1 |  if_e	sub	fp, #20
1b0e4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b0e8     1C 00 90 5D |  if_ne	jmp	#LR__2234
1b0ec     A7 88 02 FB | 	rdlong	muldiva_, fp
1b0f0     0C 4E 05 F1 | 	add	fp, #12
1b0f4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0f8     0C 4E 85 F1 | 	sub	fp, #12
1b0fc     BA 00 A0 FD | 	call	#divide_
1b100     A7 88 62 FC | 	wrlong	muldiva_, fp
1b104     50 00 90 FD | 	jmp	#LR__2236
1b108                 | LR__2234
1b108                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1b108     08 4E 05 F1 | 	add	fp, #8
1b10c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b110     08 4E 85 F1 | 	sub	fp, #8
1b114     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b118     14 4E 05 A1 |  if_e	add	fp, #20
1b11c     A7 26 02 AB |  if_e	rdlong	local01, fp
1b120     14 4E 85 A1 |  if_e	sub	fp, #20
1b124     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b128     1C 00 90 5D |  if_ne	jmp	#LR__2235
1b12c     A7 88 02 FB | 	rdlong	muldiva_, fp
1b130     0C 4E 05 F1 | 	add	fp, #12
1b134     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b138     0C 4E 85 F1 | 	sub	fp, #12
1b13c     BA 00 A0 FD | 	call	#divide_
1b140     A7 88 62 FC | 	wrlong	muldiva_, fp
1b144     10 00 90 FD | 	jmp	#LR__2236
1b148                 | LR__2235
1b148     A7 16 68 FC | 	wrlong	#11, fp
1b14c     08 4E 05 F1 | 	add	fp, #8
1b150     A7 FE 69 FC | 	wrlong	#255, fp
1b154     08 4E 85 F1 | 	sub	fp, #8
1b158                 | LR__2236
1b158     A7 12 02 F6 | 	mov	arg01, fp
1b15c     C8 07 BF FD | 	call	#_push
1b160     A7 F0 03 F6 | 	mov	ptra, fp
1b164     B2 00 A0 FD | 	call	#popregs_
1b168                 | _do_mod_ret
1b168     2D 00 64 FD | 	ret
1b16c                 | 
1b16c                 | ' 
1b16c                 | ' '--------------------------------- mul (*)
1b16c                 | ' 
1b16c                 | ' sub do_mul
1b16c                 | _do_mul
1b16c     05 4A 05 F6 | 	mov	COUNT_, #5
1b170     A8 00 A0 FD | 	call	#pushregs_
1b174     18 F0 07 F1 | 	add	ptra, #24
1b178     14 07 BF FD | 	call	#_pop
1b17c     FD 26 02 F6 | 	mov	local01, result1
1b180     FE 28 02 F6 | 	mov	local02, result2
1b184     FF 2A 02 F6 | 	mov	local03, result3
1b188     0C 4E 05 F1 | 	add	fp, #12
1b18c     A7 26 62 FC | 	wrlong	local01, fp
1b190     04 4E 05 F1 | 	add	fp, #4
1b194     A7 28 62 FC | 	wrlong	local02, fp
1b198     04 4E 05 F1 | 	add	fp, #4
1b19c     A7 2A 62 FC | 	wrlong	local03, fp
1b1a0     14 4E 85 F1 | 	sub	fp, #20
1b1a4     E8 06 BF FD | 	call	#_pop
1b1a8     FF 2A 02 F6 | 	mov	local03, result3
1b1ac     A7 FA 61 FC | 	wrlong	result1, fp
1b1b0     04 4E 05 F1 | 	add	fp, #4
1b1b4     A7 FC 61 FC | 	wrlong	result2, fp
1b1b8     04 4E 05 F1 | 	add	fp, #4
1b1bc     A7 2A 62 FC | 	wrlong	local03, fp
1b1c0                 | ' 
1b1c0                 | ' t2=pop()
1b1c0                 | ' t1=pop()
1b1c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1b1c0     08 4E 85 F1 | 	sub	fp, #8
1b1c4     1D 2A 0E F2 | 	cmp	local03, #29 wz
1b1c8     14 4E 05 A1 |  if_e	add	fp, #20
1b1cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b1d0     14 4E 85 A1 |  if_e	sub	fp, #20
1b1d4     16 2B 02 A6 |  if_e	mov	local03, local04
1b1d8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b1dc     20 00 90 5D |  if_ne	jmp	#LR__2240
1b1e0     A7 28 02 FB | 	rdlong	local02, fp
1b1e4     0C 4E 05 F1 | 	add	fp, #12
1b1e8     A7 2A 02 FB | 	rdlong	local03, fp
1b1ec     15 29 02 FD | 	qmul	local02, local03
1b1f0     0C 4E 85 F1 | 	sub	fp, #12
1b1f4     18 26 62 FD | 	getqx	local01
1b1f8     A7 26 62 FC | 	wrlong	local01, fp
1b1fc     C4 02 90 FD | 	jmp	#LR__2249
1b200                 | LR__2240
1b200                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1b200     08 4E 05 F1 | 	add	fp, #8
1b204     A7 26 02 FB | 	rdlong	local01, fp
1b208     08 4E 85 F1 | 	sub	fp, #8
1b20c     1D 26 0E F2 | 	cmp	local01, #29 wz
1b210     14 4E 05 A1 |  if_e	add	fp, #20
1b214     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b218     14 4E 85 A1 |  if_e	sub	fp, #20
1b21c     16 2B 02 A6 |  if_e	mov	local03, local04
1b220     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b224     2C 00 90 5D |  if_ne	jmp	#LR__2241
1b228     A7 28 02 FB | 	rdlong	local02, fp
1b22c     0C 4E 05 F1 | 	add	fp, #12
1b230     A7 2A 02 FB | 	rdlong	local03, fp
1b234     15 29 02 FD | 	qmul	local02, local03
1b238     0C 4E 85 F1 | 	sub	fp, #12
1b23c     18 26 62 FD | 	getqx	local01
1b240     A7 26 62 FC | 	wrlong	local01, fp
1b244     08 4E 05 F1 | 	add	fp, #8
1b248     A7 38 68 FC | 	wrlong	#28, fp
1b24c     08 4E 85 F1 | 	sub	fp, #8
1b250     70 02 90 FD | 	jmp	#LR__2249
1b254                 | LR__2241
1b254                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1b254     08 4E 05 F1 | 	add	fp, #8
1b258     A7 26 02 FB | 	rdlong	local01, fp
1b25c     08 4E 85 F1 | 	sub	fp, #8
1b260     1D 26 0E F2 | 	cmp	local01, #29 wz
1b264     14 4E 05 A1 |  if_e	add	fp, #20
1b268     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b26c     14 4E 85 A1 |  if_e	sub	fp, #20
1b270     16 2B 02 A6 |  if_e	mov	local03, local04
1b274     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b278     30 00 90 5D |  if_ne	jmp	#LR__2242
1b27c     A7 12 02 FB | 	rdlong	arg01, fp
1b280     48 93 B0 FD | 	call	#__system___float_fromuns
1b284     FD 12 02 F6 | 	mov	arg01, result1
1b288     0C 4E 05 F1 | 	add	fp, #12
1b28c     A7 14 02 FB | 	rdlong	arg02, fp
1b290     0C 4E 85 F1 | 	sub	fp, #12
1b294     38 97 B0 FD | 	call	#__system___float_mul
1b298     A7 FA 61 FC | 	wrlong	result1, fp
1b29c     08 4E 05 F1 | 	add	fp, #8
1b2a0     A7 3C 68 FC | 	wrlong	#30, fp
1b2a4     08 4E 85 F1 | 	sub	fp, #8
1b2a8     18 02 90 FD | 	jmp	#LR__2249
1b2ac                 | LR__2242
1b2ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1b2ac     08 4E 05 F1 | 	add	fp, #8
1b2b0     A7 26 02 FB | 	rdlong	local01, fp
1b2b4     08 4E 85 F1 | 	sub	fp, #8
1b2b8     1C 26 0E F2 | 	cmp	local01, #28 wz
1b2bc     14 4E 05 A1 |  if_e	add	fp, #20
1b2c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b2c4     14 4E 85 A1 |  if_e	sub	fp, #20
1b2c8     16 2B 02 A6 |  if_e	mov	local03, local04
1b2cc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b2d0     20 00 90 5D |  if_ne	jmp	#LR__2243
1b2d4     A7 28 02 FB | 	rdlong	local02, fp
1b2d8     0C 4E 05 F1 | 	add	fp, #12
1b2dc     A7 2A 02 FB | 	rdlong	local03, fp
1b2e0     15 29 02 FD | 	qmul	local02, local03
1b2e4     0C 4E 85 F1 | 	sub	fp, #12
1b2e8     18 26 62 FD | 	getqx	local01
1b2ec     A7 26 62 FC | 	wrlong	local01, fp
1b2f0     D0 01 90 FD | 	jmp	#LR__2249
1b2f4                 | LR__2243
1b2f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1b2f4     08 4E 05 F1 | 	add	fp, #8
1b2f8     A7 26 02 FB | 	rdlong	local01, fp
1b2fc     08 4E 85 F1 | 	sub	fp, #8
1b300     1C 26 0E F2 | 	cmp	local01, #28 wz
1b304     14 4E 05 A1 |  if_e	add	fp, #20
1b308     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b30c     14 4E 85 A1 |  if_e	sub	fp, #20
1b310     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1b314     20 00 90 5D |  if_ne	jmp	#LR__2244
1b318     A7 28 02 FB | 	rdlong	local02, fp
1b31c     0C 4E 05 F1 | 	add	fp, #12
1b320     A7 2A 02 FB | 	rdlong	local03, fp
1b324     15 29 02 FD | 	qmul	local02, local03
1b328     0C 4E 85 F1 | 	sub	fp, #12
1b32c     18 26 62 FD | 	getqx	local01
1b330     A7 26 62 FC | 	wrlong	local01, fp
1b334     8C 01 90 FD | 	jmp	#LR__2249
1b338                 | LR__2244
1b338                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1b338     08 4E 05 F1 | 	add	fp, #8
1b33c     A7 26 02 FB | 	rdlong	local01, fp
1b340     08 4E 85 F1 | 	sub	fp, #8
1b344     1C 26 0E F2 | 	cmp	local01, #28 wz
1b348     14 4E 05 A1 |  if_e	add	fp, #20
1b34c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b350     14 4E 85 A1 |  if_e	sub	fp, #20
1b354     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b358     40 00 90 5D |  if_ne	jmp	#LR__2245
1b35c     A7 12 02 FB | 	rdlong	arg01, fp
1b360     09 13 52 F6 | 	abs	arg01, arg01 wc
1b364     1F 2E C6 C9 |  if_b	decod	local05, #31
1b368     00 2E 06 36 |  if_ae	mov	local05, #0
1b36c     5C 92 B0 FD | 	call	#__system___float_fromuns
1b370     17 FB 61 F5 | 	xor	result1, local05
1b374     FD 12 02 F6 | 	mov	arg01, result1
1b378     0C 4E 05 F1 | 	add	fp, #12
1b37c     A7 14 02 FB | 	rdlong	arg02, fp
1b380     0C 4E 85 F1 | 	sub	fp, #12
1b384     48 96 B0 FD | 	call	#__system___float_mul
1b388     A7 FA 61 FC | 	wrlong	result1, fp
1b38c     08 4E 05 F1 | 	add	fp, #8
1b390     A7 3C 68 FC | 	wrlong	#30, fp
1b394     08 4E 85 F1 | 	sub	fp, #8
1b398     28 01 90 FD | 	jmp	#LR__2249
1b39c                 | LR__2245
1b39c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1b39c     08 4E 05 F1 | 	add	fp, #8
1b3a0     A7 26 02 FB | 	rdlong	local01, fp
1b3a4     08 4E 85 F1 | 	sub	fp, #8
1b3a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1b3ac     14 4E 05 A1 |  if_e	add	fp, #20
1b3b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b3b4     14 4E 85 A1 |  if_e	sub	fp, #20
1b3b8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b3bc     28 00 90 5D |  if_ne	jmp	#LR__2246
1b3c0     A7 26 02 FB | 	rdlong	local01, fp
1b3c4     0C 4E 05 F1 | 	add	fp, #12
1b3c8     A7 12 02 FB | 	rdlong	arg01, fp
1b3cc     0C 4E 85 F1 | 	sub	fp, #12
1b3d0     F8 91 B0 FD | 	call	#__system___float_fromuns
1b3d4     FD 14 02 F6 | 	mov	arg02, result1
1b3d8     13 13 02 F6 | 	mov	arg01, local01
1b3dc     F0 95 B0 FD | 	call	#__system___float_mul
1b3e0     A7 FA 61 FC | 	wrlong	result1, fp
1b3e4     DC 00 90 FD | 	jmp	#LR__2249
1b3e8                 | LR__2246
1b3e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1b3e8     08 4E 05 F1 | 	add	fp, #8
1b3ec     A7 26 02 FB | 	rdlong	local01, fp
1b3f0     08 4E 85 F1 | 	sub	fp, #8
1b3f4     1E 26 0E F2 | 	cmp	local01, #30 wz
1b3f8     14 4E 05 A1 |  if_e	add	fp, #20
1b3fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b400     14 4E 85 A1 |  if_e	sub	fp, #20
1b404     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b408     38 00 90 5D |  if_ne	jmp	#LR__2247
1b40c     A7 26 02 FB | 	rdlong	local01, fp
1b410     0C 4E 05 F1 | 	add	fp, #12
1b414     A7 12 02 FB | 	rdlong	arg01, fp
1b418     0C 4E 85 F1 | 	sub	fp, #12
1b41c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b420     1F 2E C6 C9 |  if_b	decod	local05, #31
1b424     00 2E 06 36 |  if_ae	mov	local05, #0
1b428     A0 91 B0 FD | 	call	#__system___float_fromuns
1b42c     17 FB 61 F5 | 	xor	result1, local05
1b430     FD 14 02 F6 | 	mov	arg02, result1
1b434     13 13 02 F6 | 	mov	arg01, local01
1b438     94 95 B0 FD | 	call	#__system___float_mul
1b43c     A7 FA 61 FC | 	wrlong	result1, fp
1b440     80 00 90 FD | 	jmp	#LR__2249
1b444                 | LR__2247
1b444                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1b444     08 4E 05 F1 | 	add	fp, #8
1b448     A7 26 02 FB | 	rdlong	local01, fp
1b44c     08 4E 85 F1 | 	sub	fp, #8
1b450     1E 26 0E F2 | 	cmp	local01, #30 wz
1b454     14 4E 05 A1 |  if_e	add	fp, #20
1b458     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b45c     14 4E 85 A1 |  if_e	sub	fp, #20
1b460     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b464     1C 00 90 5D |  if_ne	jmp	#LR__2248
1b468     A7 12 02 FB | 	rdlong	arg01, fp
1b46c     0C 4E 05 F1 | 	add	fp, #12
1b470     A7 14 02 FB | 	rdlong	arg02, fp
1b474     0C 4E 85 F1 | 	sub	fp, #12
1b478     54 95 B0 FD | 	call	#__system___float_mul
1b47c     A7 FA 61 FC | 	wrlong	result1, fp
1b480     40 00 90 FD | 	jmp	#LR__2249
1b484                 | LR__2248
1b484                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1b484     08 4E 05 F1 | 	add	fp, #8
1b488     A7 26 02 FB | 	rdlong	local01, fp
1b48c     08 4E 85 F1 | 	sub	fp, #8
1b490     1F 26 0E F2 | 	cmp	local01, #31 wz
1b494     14 4E 05 51 |  if_ne	add	fp, #20
1b498     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b49c     14 4E 85 51 |  if_ne	sub	fp, #20
1b4a0     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1b4a4     A7 10 68 AC |  if_e	wrlong	#8, fp
1b4a8     08 4E 05 A1 |  if_e	add	fp, #8
1b4ac     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b4b0     08 4E 85 A1 |  if_e	sub	fp, #8
1b4b4     A7 12 68 5C |  if_ne	wrlong	#9, fp
1b4b8     08 4E 05 51 |  if_ne	add	fp, #8
1b4bc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b4c0     08 4E 85 51 |  if_ne	sub	fp, #8
1b4c4                 | LR__2249
1b4c4     A7 12 02 F6 | 	mov	arg01, fp
1b4c8     5C 04 BF FD | 	call	#_push
1b4cc     A7 F0 03 F6 | 	mov	ptra, fp
1b4d0     B2 00 A0 FD | 	call	#popregs_
1b4d4                 | _do_mul_ret
1b4d4     2D 00 64 FD | 	ret
1b4d8                 | 
1b4d8                 | ' 
1b4d8                 | ' '--------------------------------- not equal (<>)
1b4d8                 | ' 
1b4d8                 | ' sub do_ne
1b4d8                 | _do_ne
1b4d8     05 4A 05 F6 | 	mov	COUNT_, #5
1b4dc     A8 00 A0 FD | 	call	#pushregs_
1b4e0     18 F0 07 F1 | 	add	ptra, #24
1b4e4     A8 03 BF FD | 	call	#_pop
1b4e8     FD 26 02 F6 | 	mov	local01, result1
1b4ec     FE 28 02 F6 | 	mov	local02, result2
1b4f0     FF 2A 02 F6 | 	mov	local03, result3
1b4f4     0C 4E 05 F1 | 	add	fp, #12
1b4f8     A7 26 62 FC | 	wrlong	local01, fp
1b4fc     04 4E 05 F1 | 	add	fp, #4
1b500     A7 28 62 FC | 	wrlong	local02, fp
1b504     04 4E 05 F1 | 	add	fp, #4
1b508     A7 2A 62 FC | 	wrlong	local03, fp
1b50c     14 4E 85 F1 | 	sub	fp, #20
1b510     7C 03 BF FD | 	call	#_pop
1b514     FF 2A 02 F6 | 	mov	local03, result3
1b518     A7 FA 61 FC | 	wrlong	result1, fp
1b51c     04 4E 05 F1 | 	add	fp, #4
1b520     A7 FC 61 FC | 	wrlong	result2, fp
1b524     04 4E 05 F1 | 	add	fp, #4
1b528     A7 2A 62 FC | 	wrlong	local03, fp
1b52c                 | ' 
1b52c                 | ' t2=pop()
1b52c                 | ' t1=pop()
1b52c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1b52c     08 4E 85 F1 | 	sub	fp, #8
1b530     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b534     14 4E 05 A1 |  if_e	add	fp, #20
1b538     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b53c     14 4E 85 A1 |  if_e	sub	fp, #20
1b540     16 2B 02 A6 |  if_e	mov	local03, local04
1b544     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b548     28 00 90 5D |  if_ne	jmp	#LR__2250
1b54c     00 26 06 F6 | 	mov	local01, #0
1b550     A7 12 02 FB | 	rdlong	arg01, fp
1b554     0C 4E 05 F1 | 	add	fp, #12
1b558     A7 14 02 FB | 	rdlong	arg02, fp
1b55c     0C 4E 85 F1 | 	sub	fp, #12
1b560     D8 66 B0 FD | 	call	#__system___string_cmp
1b564     00 FA 0D F2 | 	cmp	result1, #0 wz
1b568     00 26 26 56 |  if_ne	not	local01, #0
1b56c     A7 26 62 FC | 	wrlong	local01, fp
1b570     1C 04 90 FD | 	jmp	#LR__2263
1b574                 | LR__2250
1b574                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1b574     08 4E 05 F1 | 	add	fp, #8
1b578     A7 26 02 FB | 	rdlong	local01, fp
1b57c     08 4E 85 F1 | 	sub	fp, #8
1b580     1E 26 0E F2 | 	cmp	local01, #30 wz
1b584     14 4E 05 A1 |  if_e	add	fp, #20
1b588     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b58c     14 4E 85 A1 |  if_e	sub	fp, #20
1b590     16 2B 02 A6 |  if_e	mov	local03, local04
1b594     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b598     2C 00 90 5D |  if_ne	jmp	#LR__2251
1b59c     00 26 06 F6 | 	mov	local01, #0
1b5a0     A7 12 02 FB | 	rdlong	arg01, fp
1b5a4     0C 4E 05 F1 | 	add	fp, #12
1b5a8     A7 14 02 FB | 	rdlong	arg02, fp
1b5ac     0C 4E 85 F1 | 	sub	fp, #12
1b5b0     01 16 06 F6 | 	mov	arg03, #1
1b5b4     4C 98 B0 FD | 	call	#__system___float_cmp
1b5b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b5bc     00 26 26 56 |  if_ne	not	local01, #0
1b5c0     A7 26 62 FC | 	wrlong	local01, fp
1b5c4     C8 03 90 FD | 	jmp	#LR__2263
1b5c8                 | LR__2251
1b5c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1b5c8     08 4E 05 F1 | 	add	fp, #8
1b5cc     A7 26 02 FB | 	rdlong	local01, fp
1b5d0     08 4E 85 F1 | 	sub	fp, #8
1b5d4     1E 26 0E F2 | 	cmp	local01, #30 wz
1b5d8     14 4E 05 A1 |  if_e	add	fp, #20
1b5dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b5e0     14 4E 85 A1 |  if_e	sub	fp, #20
1b5e4     16 2B 02 A6 |  if_e	mov	local03, local04
1b5e8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b5ec     48 00 90 5D |  if_ne	jmp	#LR__2252
1b5f0     00 26 06 F6 | 	mov	local01, #0
1b5f4     A7 28 02 FB | 	rdlong	local02, fp
1b5f8     0C 4E 05 F1 | 	add	fp, #12
1b5fc     A7 12 02 FB | 	rdlong	arg01, fp
1b600     0C 4E 85 F1 | 	sub	fp, #12
1b604     09 13 52 F6 | 	abs	arg01, arg01 wc
1b608     1F 2E C6 C9 |  if_b	decod	local05, #31
1b60c     00 2E 06 36 |  if_ae	mov	local05, #0
1b610     B8 8F B0 FD | 	call	#__system___float_fromuns
1b614     17 FB 61 F5 | 	xor	result1, local05
1b618     FD 14 02 F6 | 	mov	arg02, result1
1b61c     14 13 02 F6 | 	mov	arg01, local02
1b620     01 16 06 F6 | 	mov	arg03, #1
1b624     DC 97 B0 FD | 	call	#__system___float_cmp
1b628     00 FA 0D F2 | 	cmp	result1, #0 wz
1b62c     00 26 26 56 |  if_ne	not	local01, #0
1b630     A7 26 62 FC | 	wrlong	local01, fp
1b634     58 03 90 FD | 	jmp	#LR__2263
1b638                 | LR__2252
1b638                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1b638     08 4E 05 F1 | 	add	fp, #8
1b63c     A7 26 02 FB | 	rdlong	local01, fp
1b640     08 4E 85 F1 | 	sub	fp, #8
1b644     1E 26 0E F2 | 	cmp	local01, #30 wz
1b648     14 4E 05 A1 |  if_e	add	fp, #20
1b64c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b650     14 4E 85 A1 |  if_e	sub	fp, #20
1b654     16 2B 02 A6 |  if_e	mov	local03, local04
1b658     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b65c     38 00 90 5D |  if_ne	jmp	#LR__2253
1b660     00 26 06 F6 | 	mov	local01, #0
1b664     A7 28 02 FB | 	rdlong	local02, fp
1b668     0C 4E 05 F1 | 	add	fp, #12
1b66c     A7 12 02 FB | 	rdlong	arg01, fp
1b670     0C 4E 85 F1 | 	sub	fp, #12
1b674     54 8F B0 FD | 	call	#__system___float_fromuns
1b678     FD 14 02 F6 | 	mov	arg02, result1
1b67c     14 13 02 F6 | 	mov	arg01, local02
1b680     01 16 06 F6 | 	mov	arg03, #1
1b684     7C 97 B0 FD | 	call	#__system___float_cmp
1b688     00 FA 0D F2 | 	cmp	result1, #0 wz
1b68c     00 26 26 56 |  if_ne	not	local01, #0
1b690     A7 26 62 FC | 	wrlong	local01, fp
1b694     F8 02 90 FD | 	jmp	#LR__2263
1b698                 | LR__2253
1b698                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1b698     08 4E 05 F1 | 	add	fp, #8
1b69c     A7 26 02 FB | 	rdlong	local01, fp
1b6a0     08 4E 85 F1 | 	sub	fp, #8
1b6a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1b6a8     14 4E 05 A1 |  if_e	add	fp, #20
1b6ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b6b0     14 4E 85 A1 |  if_e	sub	fp, #20
1b6b4     16 2B 02 A6 |  if_e	mov	local03, local04
1b6b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b6bc     44 00 90 5D |  if_ne	jmp	#LR__2254
1b6c0     00 26 06 F6 | 	mov	local01, #0
1b6c4     A7 12 02 FB | 	rdlong	arg01, fp
1b6c8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b6cc     1F 2E C6 C9 |  if_b	decod	local05, #31
1b6d0     00 2E 06 36 |  if_ae	mov	local05, #0
1b6d4     F4 8E B0 FD | 	call	#__system___float_fromuns
1b6d8     17 FB 61 F5 | 	xor	result1, local05
1b6dc     FD 12 02 F6 | 	mov	arg01, result1
1b6e0     0C 4E 05 F1 | 	add	fp, #12
1b6e4     A7 14 02 FB | 	rdlong	arg02, fp
1b6e8     0C 4E 85 F1 | 	sub	fp, #12
1b6ec     01 16 06 F6 | 	mov	arg03, #1
1b6f0     10 97 B0 FD | 	call	#__system___float_cmp
1b6f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6f8     00 26 26 56 |  if_ne	not	local01, #0
1b6fc     A7 26 62 FC | 	wrlong	local01, fp
1b700     8C 02 90 FD | 	jmp	#LR__2263
1b704                 | LR__2254
1b704                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1b704     08 4E 05 F1 | 	add	fp, #8
1b708     A7 26 02 FB | 	rdlong	local01, fp
1b70c     08 4E 85 F1 | 	sub	fp, #8
1b710     1C 26 0E F2 | 	cmp	local01, #28 wz
1b714     14 4E 05 A1 |  if_e	add	fp, #20
1b718     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b71c     14 4E 85 A1 |  if_e	sub	fp, #20
1b720     16 2B 02 A6 |  if_e	mov	local03, local04
1b724     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b728     24 00 90 5D |  if_ne	jmp	#LR__2255
1b72c     00 26 06 F6 | 	mov	local01, #0
1b730     A7 28 02 FB | 	rdlong	local02, fp
1b734     0C 4E 05 F1 | 	add	fp, #12
1b738     A7 2A 02 FB | 	rdlong	local03, fp
1b73c     0C 4E 85 F1 | 	sub	fp, #12
1b740     15 29 0A F2 | 	cmp	local02, local03 wz
1b744     01 26 66 56 |  if_ne	neg	local01, #1
1b748     A7 26 62 FC | 	wrlong	local01, fp
1b74c     40 02 90 FD | 	jmp	#LR__2263
1b750                 | LR__2255
1b750                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1b750     08 4E 05 F1 | 	add	fp, #8
1b754     A7 26 02 FB | 	rdlong	local01, fp
1b758     08 4E 85 F1 | 	sub	fp, #8
1b75c     1C 26 0E F2 | 	cmp	local01, #28 wz
1b760     14 4E 05 A1 |  if_e	add	fp, #20
1b764     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b768     14 4E 85 A1 |  if_e	sub	fp, #20
1b76c     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
1b770     24 00 90 5D |  if_ne	jmp	#LR__2256
1b774     00 26 06 F6 | 	mov	local01, #0
1b778     A7 28 02 FB | 	rdlong	local02, fp
1b77c     0C 4E 05 F1 | 	add	fp, #12
1b780     A7 2A 02 FB | 	rdlong	local03, fp
1b784     0C 4E 85 F1 | 	sub	fp, #12
1b788     15 29 0A F2 | 	cmp	local02, local03 wz
1b78c     01 26 66 56 |  if_ne	neg	local01, #1
1b790     A7 26 62 FC | 	wrlong	local01, fp
1b794     F8 01 90 FD | 	jmp	#LR__2263
1b798                 | LR__2256
1b798                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1b798     08 4E 05 F1 | 	add	fp, #8
1b79c     A7 26 02 FB | 	rdlong	local01, fp
1b7a0     08 4E 85 F1 | 	sub	fp, #8
1b7a4     1D 26 0E F2 | 	cmp	local01, #29 wz
1b7a8     14 4E 05 A1 |  if_e	add	fp, #20
1b7ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b7b0     14 4E 85 A1 |  if_e	sub	fp, #20
1b7b4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b7b8     34 00 90 5D |  if_ne	jmp	#LR__2257
1b7bc     00 26 06 F6 | 	mov	local01, #0
1b7c0     A7 12 02 FB | 	rdlong	arg01, fp
1b7c4     04 8E B0 FD | 	call	#__system___float_fromuns
1b7c8     FD 12 02 F6 | 	mov	arg01, result1
1b7cc     0C 4E 05 F1 | 	add	fp, #12
1b7d0     A7 14 02 FB | 	rdlong	arg02, fp
1b7d4     0C 4E 85 F1 | 	sub	fp, #12
1b7d8     01 16 06 F6 | 	mov	arg03, #1
1b7dc     24 96 B0 FD | 	call	#__system___float_cmp
1b7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b7e4     00 26 26 56 |  if_ne	not	local01, #0
1b7e8     A7 26 62 FC | 	wrlong	local01, fp
1b7ec     A0 01 90 FD | 	jmp	#LR__2263
1b7f0                 | LR__2257
1b7f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1b7f0     08 4E 05 F1 | 	add	fp, #8
1b7f4     A7 26 02 FB | 	rdlong	local01, fp
1b7f8     08 4E 85 F1 | 	sub	fp, #8
1b7fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1b800     14 4E 05 A1 |  if_e	add	fp, #20
1b804     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b808     14 4E 85 A1 |  if_e	sub	fp, #20
1b80c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b810     24 00 90 5D |  if_ne	jmp	#LR__2258
1b814     00 26 06 F6 | 	mov	local01, #0
1b818     A7 28 02 FB | 	rdlong	local02, fp
1b81c     0C 4E 05 F1 | 	add	fp, #12
1b820     A7 2A 02 FB | 	rdlong	local03, fp
1b824     0C 4E 85 F1 | 	sub	fp, #12
1b828     15 29 0A F2 | 	cmp	local02, local03 wz
1b82c     01 26 66 56 |  if_ne	neg	local01, #1
1b830     A7 26 62 FC | 	wrlong	local01, fp
1b834     58 01 90 FD | 	jmp	#LR__2263
1b838                 | LR__2258
1b838                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1b838     08 4E 05 F1 | 	add	fp, #8
1b83c     A7 26 02 FB | 	rdlong	local01, fp
1b840     08 4E 85 F1 | 	sub	fp, #8
1b844     1D 26 0E F2 | 	cmp	local01, #29 wz
1b848     14 4E 05 A1 |  if_e	add	fp, #20
1b84c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b850     14 4E 85 A1 |  if_e	sub	fp, #20
1b854     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b858     24 00 90 5D |  if_ne	jmp	#LR__2259
1b85c     00 26 06 F6 | 	mov	local01, #0
1b860     A7 28 02 FB | 	rdlong	local02, fp
1b864     0C 4E 05 F1 | 	add	fp, #12
1b868     A7 2A 02 FB | 	rdlong	local03, fp
1b86c     0C 4E 85 F1 | 	sub	fp, #12
1b870     15 29 0A F2 | 	cmp	local02, local03 wz
1b874     01 26 66 56 |  if_ne	neg	local01, #1
1b878     A7 26 62 FC | 	wrlong	local01, fp
1b87c     10 01 90 FD | 	jmp	#LR__2263
1b880                 | LR__2259
1b880                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1b880     08 4E 05 F1 | 	add	fp, #8
1b884     A7 26 02 FB | 	rdlong	local01, fp
1b888     08 4E 85 F1 | 	sub	fp, #8
1b88c     2B 26 0E F2 | 	cmp	local01, #43 wz
1b890     14 4E 05 A1 |  if_e	add	fp, #20
1b894     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b898     14 4E 85 A1 |  if_e	sub	fp, #20
1b89c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b8a0     30 00 90 5D |  if_ne	jmp	#LR__2260
1b8a4     00 26 06 F6 | 	mov	local01, #0
1b8a8     A7 12 02 FB | 	rdlong	arg01, fp
1b8ac     58 01 BF FD | 	call	#_convertstring
1b8b0     FD 12 02 F6 | 	mov	arg01, result1
1b8b4     0C 4E 05 F1 | 	add	fp, #12
1b8b8     A7 14 02 FB | 	rdlong	arg02, fp
1b8bc     0C 4E 85 F1 | 	sub	fp, #12
1b8c0     78 63 B0 FD | 	call	#__system___string_cmp
1b8c4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b8c8     00 26 26 56 |  if_ne	not	local01, #0
1b8cc     A7 26 62 FC | 	wrlong	local01, fp
1b8d0     BC 00 90 FD | 	jmp	#LR__2263
1b8d4                 | LR__2260
1b8d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1b8d4     08 4E 05 F1 | 	add	fp, #8
1b8d8     A7 26 02 FB | 	rdlong	local01, fp
1b8dc     08 4E 85 F1 | 	sub	fp, #8
1b8e0     1F 26 0E F2 | 	cmp	local01, #31 wz
1b8e4     14 4E 05 A1 |  if_e	add	fp, #20
1b8e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b8ec     14 4E 85 A1 |  if_e	sub	fp, #20
1b8f0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b8f4     34 00 90 5D |  if_ne	jmp	#LR__2261
1b8f8     00 26 06 F6 | 	mov	local01, #0
1b8fc     A7 28 02 FB | 	rdlong	local02, fp
1b900     0C 4E 05 F1 | 	add	fp, #12
1b904     A7 12 02 FB | 	rdlong	arg01, fp
1b908     0C 4E 85 F1 | 	sub	fp, #12
1b90c     F8 00 BF FD | 	call	#_convertstring
1b910     FD 14 02 F6 | 	mov	arg02, result1
1b914     14 13 02 F6 | 	mov	arg01, local02
1b918     20 63 B0 FD | 	call	#__system___string_cmp
1b91c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b920     00 26 26 56 |  if_ne	not	local01, #0
1b924     A7 26 62 FC | 	wrlong	local01, fp
1b928     64 00 90 FD | 	jmp	#LR__2263
1b92c                 | LR__2261
1b92c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1b92c     08 4E 05 F1 | 	add	fp, #8
1b930     A7 26 02 FB | 	rdlong	local01, fp
1b934     08 4E 85 F1 | 	sub	fp, #8
1b938     2B 26 0E F2 | 	cmp	local01, #43 wz
1b93c     14 4E 05 A1 |  if_e	add	fp, #20
1b940     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b944     14 4E 85 A1 |  if_e	sub	fp, #20
1b948     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b94c     3C 00 90 5D |  if_ne	jmp	#LR__2262
1b950     00 26 06 F6 | 	mov	local01, #0
1b954     A7 12 02 FB | 	rdlong	arg01, fp
1b958     AC 00 BF FD | 	call	#_convertstring
1b95c     FD 28 02 F6 | 	mov	local02, result1
1b960     0C 4E 05 F1 | 	add	fp, #12
1b964     A7 12 02 FB | 	rdlong	arg01, fp
1b968     0C 4E 85 F1 | 	sub	fp, #12
1b96c     98 00 BF FD | 	call	#_convertstring
1b970     FD 14 02 F6 | 	mov	arg02, result1
1b974     14 13 02 F6 | 	mov	arg01, local02
1b978     C0 62 B0 FD | 	call	#__system___string_cmp
1b97c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b980     00 26 26 56 |  if_ne	not	local01, #0
1b984     A7 26 62 FC | 	wrlong	local01, fp
1b988     04 00 90 FD | 	jmp	#LR__2263
1b98c                 | LR__2262
1b98c     A7 00 68 FC | 	wrlong	#0, fp
1b990                 | LR__2263
1b990     08 4E 05 F1 | 	add	fp, #8
1b994     A7 38 68 FC | 	wrlong	#28, fp
1b998     08 4E 85 F1 | 	sub	fp, #8
1b99c     A7 12 02 F6 | 	mov	arg01, fp
1b9a0     84 FF BE FD | 	call	#_push
1b9a4     A7 F0 03 F6 | 	mov	ptra, fp
1b9a8     B2 00 A0 FD | 	call	#popregs_
1b9ac                 | _do_ne_ret
1b9ac     2D 00 64 FD | 	ret
1b9b0                 | 
1b9b0                 | ' 
1b9b0                 | ' '--------------------------------- OR
1b9b0                 | ' 
1b9b0                 | ' sub do_or 
1b9b0                 | _do_or
1b9b0     03 4A 05 F6 | 	mov	COUNT_, #3
1b9b4     A8 00 A0 FD | 	call	#pushregs_
1b9b8     18 F0 07 F1 | 	add	ptra, #24
1b9bc     D0 FE BE FD | 	call	#_pop
1b9c0     FD 12 02 F6 | 	mov	arg01, result1
1b9c4     FE 26 02 F6 | 	mov	local01, result2
1b9c8     FF 28 02 F6 | 	mov	local02, result3
1b9cc     0C 4E 05 F1 | 	add	fp, #12
1b9d0     A7 12 62 FC | 	wrlong	arg01, fp
1b9d4     04 4E 05 F1 | 	add	fp, #4
1b9d8     A7 26 62 FC | 	wrlong	local01, fp
1b9dc     04 4E 05 F1 | 	add	fp, #4
1b9e0     A7 28 62 FC | 	wrlong	local02, fp
1b9e4     14 4E 85 F1 | 	sub	fp, #20
1b9e8     A4 FE BE FD | 	call	#_pop
1b9ec     FF 2A 02 F6 | 	mov	local03, result3
1b9f0     A7 FA 61 FC | 	wrlong	result1, fp
1b9f4     04 4E 05 F1 | 	add	fp, #4
1b9f8     A7 FC 61 FC | 	wrlong	result2, fp
1b9fc     04 4E 05 F1 | 	add	fp, #4
1ba00     A7 2A 62 FC | 	wrlong	local03, fp
1ba04                 | ' 
1ba04                 | ' t2=pop()
1ba04                 | ' t1=pop()
1ba04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ba04     08 4E 85 F1 | 	sub	fp, #8
1ba08     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ba0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ba10     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ba14     08 4E 05 A1 |  if_e	add	fp, #8
1ba18     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ba1c     08 4E 85 A1 |  if_e	sub	fp, #8
1ba20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ba20     14 4E 05 F1 | 	add	fp, #20
1ba24     A7 2A 02 FB | 	rdlong	local03, fp
1ba28     14 4E 85 F1 | 	sub	fp, #20
1ba2c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ba30     18 00 90 5D |  if_ne	jmp	#LR__2270
1ba34     0C 4E 05 F1 | 	add	fp, #12
1ba38     A7 2A 02 FB | 	rdlong	local03, fp
1ba3c     A7 2A 62 FC | 	wrlong	local03, fp
1ba40     08 4E 05 F1 | 	add	fp, #8
1ba44     A7 3A 68 FC | 	wrlong	#29, fp
1ba48     14 4E 85 F1 | 	sub	fp, #20
1ba4c                 | LR__2270
1ba4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1ba4c     08 4E 05 F1 | 	add	fp, #8
1ba50     A7 2A 02 FB | 	rdlong	local03, fp
1ba54     08 4E 85 F1 | 	sub	fp, #8
1ba58     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ba5c     14 4E 05 51 |  if_ne	add	fp, #20
1ba60     A7 28 02 5B |  if_ne	rdlong	local02, fp
1ba64     14 4E 85 51 |  if_ne	sub	fp, #20
1ba68     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1ba6c     08 4E 05 51 |  if_ne	add	fp, #8
1ba70     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ba74     08 4E 85 51 |  if_ne	sub	fp, #8
1ba78     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1ba7c     14 4E 05 51 |  if_ne	add	fp, #20
1ba80     14 4E 85 51 |  if_ne	sub	fp, #20
1ba84     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1ba88     A7 0C 68 AC |  if_e	wrlong	#6, fp
1ba8c     08 4E 05 A1 |  if_e	add	fp, #8
1ba90     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ba94     08 4E 85 A1 |  if_e	sub	fp, #8
1ba98     18 00 90 AD |  if_e	jmp	#LR__2271
1ba9c     A7 2A 02 FB | 	rdlong	local03, fp
1baa0     0C 4E 05 F1 | 	add	fp, #12
1baa4     A7 26 02 FB | 	rdlong	local01, fp
1baa8     0C 4E 85 F1 | 	sub	fp, #12
1baac     13 2B 42 F5 | 	or	local03, local01
1bab0     A7 2A 62 FC | 	wrlong	local03, fp
1bab4                 | LR__2271
1bab4     A7 12 02 F6 | 	mov	arg01, fp
1bab8     6C FE BE FD | 	call	#_push
1babc     A7 F0 03 F6 | 	mov	ptra, fp
1bac0     B2 00 A0 FD | 	call	#popregs_
1bac4                 | _do_or_ret
1bac4     2D 00 64 FD | 	ret
1bac8                 | 
1bac8                 | ' 
1bac8                 | ' '--------------------------------- plus (+)
1bac8                 | ' 
1bac8                 | ' sub do_plus 
1bac8                 | _do_plus
1bac8     05 4A 05 F6 | 	mov	COUNT_, #5
1bacc     A8 00 A0 FD | 	call	#pushregs_
1bad0     18 F0 07 F1 | 	add	ptra, #24
1bad4     B8 FD BE FD | 	call	#_pop
1bad8     FD 26 02 F6 | 	mov	local01, result1
1badc     FE 28 02 F6 | 	mov	local02, result2
1bae0     FF 2A 02 F6 | 	mov	local03, result3
1bae4     0C 4E 05 F1 | 	add	fp, #12
1bae8     A7 26 62 FC | 	wrlong	local01, fp
1baec     04 4E 05 F1 | 	add	fp, #4
1baf0     A7 28 62 FC | 	wrlong	local02, fp
1baf4     04 4E 05 F1 | 	add	fp, #4
1baf8     A7 2A 62 FC | 	wrlong	local03, fp
1bafc     14 4E 85 F1 | 	sub	fp, #20
1bb00     8C FD BE FD | 	call	#_pop
1bb04     FF 2A 02 F6 | 	mov	local03, result3
1bb08     A7 FA 61 FC | 	wrlong	result1, fp
1bb0c     04 4E 05 F1 | 	add	fp, #4
1bb10     A7 FC 61 FC | 	wrlong	result2, fp
1bb14     04 4E 05 F1 | 	add	fp, #4
1bb18     A7 2A 62 FC | 	wrlong	local03, fp
1bb1c                 | ' 
1bb1c                 | ' t2=pop()
1bb1c                 | ' t1=pop()
1bb1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1bb1c     08 4E 85 F1 | 	sub	fp, #8
1bb20     1D 2A 0E F2 | 	cmp	local03, #29 wz
1bb24     14 4E 05 A1 |  if_e	add	fp, #20
1bb28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb2c     14 4E 85 A1 |  if_e	sub	fp, #20
1bb30     16 2B 02 A6 |  if_e	mov	local03, local04
1bb34     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bb38     1C 00 90 5D |  if_ne	jmp	#LR__2280
1bb3c     A7 26 02 FB | 	rdlong	local01, fp
1bb40     0C 4E 05 F1 | 	add	fp, #12
1bb44     A7 28 02 FB | 	rdlong	local02, fp
1bb48     0C 4E 85 F1 | 	sub	fp, #12
1bb4c     14 27 02 F1 | 	add	local01, local02
1bb50     A7 26 62 FC | 	wrlong	local01, fp
1bb54     48 04 90 FD | 	jmp	#LR__2295
1bb58                 | LR__2280
1bb58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1bb58     08 4E 05 F1 | 	add	fp, #8
1bb5c     A7 26 02 FB | 	rdlong	local01, fp
1bb60     08 4E 85 F1 | 	sub	fp, #8
1bb64     1D 26 0E F2 | 	cmp	local01, #29 wz
1bb68     14 4E 05 A1 |  if_e	add	fp, #20
1bb6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb70     14 4E 85 A1 |  if_e	sub	fp, #20
1bb74     16 2B 02 A6 |  if_e	mov	local03, local04
1bb78     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bb7c     28 00 90 5D |  if_ne	jmp	#LR__2281
1bb80     A7 26 02 FB | 	rdlong	local01, fp
1bb84     0C 4E 05 F1 | 	add	fp, #12
1bb88     A7 28 02 FB | 	rdlong	local02, fp
1bb8c     0C 4E 85 F1 | 	sub	fp, #12
1bb90     14 27 02 F1 | 	add	local01, local02
1bb94     A7 26 62 FC | 	wrlong	local01, fp
1bb98     08 4E 05 F1 | 	add	fp, #8
1bb9c     A7 38 68 FC | 	wrlong	#28, fp
1bba0     08 4E 85 F1 | 	sub	fp, #8
1bba4     F8 03 90 FD | 	jmp	#LR__2295
1bba8                 | LR__2281
1bba8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1bba8     08 4E 05 F1 | 	add	fp, #8
1bbac     A7 26 02 FB | 	rdlong	local01, fp
1bbb0     08 4E 85 F1 | 	sub	fp, #8
1bbb4     1D 26 0E F2 | 	cmp	local01, #29 wz
1bbb8     14 4E 05 A1 |  if_e	add	fp, #20
1bbbc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bbc0     14 4E 85 A1 |  if_e	sub	fp, #20
1bbc4     16 2B 02 A6 |  if_e	mov	local03, local04
1bbc8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bbcc     30 00 90 5D |  if_ne	jmp	#LR__2282
1bbd0     A7 12 02 FB | 	rdlong	arg01, fp
1bbd4     F4 89 B0 FD | 	call	#__system___float_fromuns
1bbd8     FD 12 02 F6 | 	mov	arg01, result1
1bbdc     0C 4E 05 F1 | 	add	fp, #12
1bbe0     A7 14 02 FB | 	rdlong	arg02, fp
1bbe4     0C 4E 85 F1 | 	sub	fp, #12
1bbe8     14 8A B0 FD | 	call	#__system___float_add
1bbec     A7 FA 61 FC | 	wrlong	result1, fp
1bbf0     08 4E 05 F1 | 	add	fp, #8
1bbf4     A7 3C 68 FC | 	wrlong	#30, fp
1bbf8     08 4E 85 F1 | 	sub	fp, #8
1bbfc     A0 03 90 FD | 	jmp	#LR__2295
1bc00                 | LR__2282
1bc00                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1bc00     08 4E 05 F1 | 	add	fp, #8
1bc04     A7 26 02 FB | 	rdlong	local01, fp
1bc08     08 4E 85 F1 | 	sub	fp, #8
1bc0c     1C 26 0E F2 | 	cmp	local01, #28 wz
1bc10     14 4E 05 A1 |  if_e	add	fp, #20
1bc14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bc18     14 4E 85 A1 |  if_e	sub	fp, #20
1bc1c     16 2B 02 A6 |  if_e	mov	local03, local04
1bc20     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bc24     1C 00 90 5D |  if_ne	jmp	#LR__2283
1bc28     A7 26 02 FB | 	rdlong	local01, fp
1bc2c     0C 4E 05 F1 | 	add	fp, #12
1bc30     A7 28 02 FB | 	rdlong	local02, fp
1bc34     0C 4E 85 F1 | 	sub	fp, #12
1bc38     14 27 02 F1 | 	add	local01, local02
1bc3c     A7 26 62 FC | 	wrlong	local01, fp
1bc40     5C 03 90 FD | 	jmp	#LR__2295
1bc44                 | LR__2283
1bc44                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1bc44     08 4E 05 F1 | 	add	fp, #8
1bc48     A7 26 02 FB | 	rdlong	local01, fp
1bc4c     08 4E 85 F1 | 	sub	fp, #8
1bc50     1C 26 0E F2 | 	cmp	local01, #28 wz
1bc54     14 4E 05 A1 |  if_e	add	fp, #20
1bc58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bc5c     14 4E 85 A1 |  if_e	sub	fp, #20
1bc60     16 2B 02 A6 |  if_e	mov	local03, local04
1bc64     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bc68     1C 00 90 5D |  if_ne	jmp	#LR__2284
1bc6c     A7 26 02 FB | 	rdlong	local01, fp
1bc70     0C 4E 05 F1 | 	add	fp, #12
1bc74     A7 28 02 FB | 	rdlong	local02, fp
1bc78     0C 4E 85 F1 | 	sub	fp, #12
1bc7c     14 27 02 F1 | 	add	local01, local02
1bc80     A7 26 62 FC | 	wrlong	local01, fp
1bc84     18 03 90 FD | 	jmp	#LR__2295
1bc88                 | LR__2284
1bc88                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1bc88     08 4E 05 F1 | 	add	fp, #8
1bc8c     A7 26 02 FB | 	rdlong	local01, fp
1bc90     08 4E 85 F1 | 	sub	fp, #8
1bc94     1C 26 0E F2 | 	cmp	local01, #28 wz
1bc98     14 4E 05 A1 |  if_e	add	fp, #20
1bc9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bca0     14 4E 85 A1 |  if_e	sub	fp, #20
1bca4     16 2B 02 A6 |  if_e	mov	local03, local04
1bca8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bcac     40 00 90 5D |  if_ne	jmp	#LR__2285
1bcb0     A7 12 02 FB | 	rdlong	arg01, fp
1bcb4     09 13 52 F6 | 	abs	arg01, arg01 wc
1bcb8     1F 2E C6 C9 |  if_b	decod	local05, #31
1bcbc     00 2E 06 36 |  if_ae	mov	local05, #0
1bcc0     08 89 B0 FD | 	call	#__system___float_fromuns
1bcc4     17 FB 61 F5 | 	xor	result1, local05
1bcc8     FD 12 02 F6 | 	mov	arg01, result1
1bccc     0C 4E 05 F1 | 	add	fp, #12
1bcd0     A7 14 02 FB | 	rdlong	arg02, fp
1bcd4     0C 4E 85 F1 | 	sub	fp, #12
1bcd8     24 89 B0 FD | 	call	#__system___float_add
1bcdc     A7 FA 61 FC | 	wrlong	result1, fp
1bce0     08 4E 05 F1 | 	add	fp, #8
1bce4     A7 3C 68 FC | 	wrlong	#30, fp
1bce8     08 4E 85 F1 | 	sub	fp, #8
1bcec     B0 02 90 FD | 	jmp	#LR__2295
1bcf0                 | LR__2285
1bcf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1bcf0     08 4E 05 F1 | 	add	fp, #8
1bcf4     A7 26 02 FB | 	rdlong	local01, fp
1bcf8     08 4E 85 F1 | 	sub	fp, #8
1bcfc     1E 26 0E F2 | 	cmp	local01, #30 wz
1bd00     14 4E 05 A1 |  if_e	add	fp, #20
1bd04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bd08     14 4E 85 A1 |  if_e	sub	fp, #20
1bd0c     16 2B 02 A6 |  if_e	mov	local03, local04
1bd10     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bd14     28 00 90 5D |  if_ne	jmp	#LR__2286
1bd18     A7 26 02 FB | 	rdlong	local01, fp
1bd1c     0C 4E 05 F1 | 	add	fp, #12
1bd20     A7 12 02 FB | 	rdlong	arg01, fp
1bd24     0C 4E 85 F1 | 	sub	fp, #12
1bd28     A0 88 B0 FD | 	call	#__system___float_fromuns
1bd2c     FD 14 02 F6 | 	mov	arg02, result1
1bd30     13 13 02 F6 | 	mov	arg01, local01
1bd34     C8 88 B0 FD | 	call	#__system___float_add
1bd38     A7 FA 61 FC | 	wrlong	result1, fp
1bd3c     60 02 90 FD | 	jmp	#LR__2295
1bd40                 | LR__2286
1bd40                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1bd40     08 4E 05 F1 | 	add	fp, #8
1bd44     A7 26 02 FB | 	rdlong	local01, fp
1bd48     08 4E 85 F1 | 	sub	fp, #8
1bd4c     1E 26 0E F2 | 	cmp	local01, #30 wz
1bd50     14 4E 05 A1 |  if_e	add	fp, #20
1bd54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bd58     14 4E 85 A1 |  if_e	sub	fp, #20
1bd5c     16 2B 02 A6 |  if_e	mov	local03, local04
1bd60     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bd64     38 00 90 5D |  if_ne	jmp	#LR__2287
1bd68     A7 26 02 FB | 	rdlong	local01, fp
1bd6c     0C 4E 05 F1 | 	add	fp, #12
1bd70     A7 12 02 FB | 	rdlong	arg01, fp
1bd74     0C 4E 85 F1 | 	sub	fp, #12
1bd78     09 13 52 F6 | 	abs	arg01, arg01 wc
1bd7c     1F 2E C6 C9 |  if_b	decod	local05, #31
1bd80     00 2E 06 36 |  if_ae	mov	local05, #0
1bd84     44 88 B0 FD | 	call	#__system___float_fromuns
1bd88     17 FB 61 F5 | 	xor	result1, local05
1bd8c     FD 14 02 F6 | 	mov	arg02, result1
1bd90     13 13 02 F6 | 	mov	arg01, local01
1bd94     68 88 B0 FD | 	call	#__system___float_add
1bd98     A7 FA 61 FC | 	wrlong	result1, fp
1bd9c     00 02 90 FD | 	jmp	#LR__2295
1bda0                 | LR__2287
1bda0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1bda0     08 4E 05 F1 | 	add	fp, #8
1bda4     A7 26 02 FB | 	rdlong	local01, fp
1bda8     08 4E 85 F1 | 	sub	fp, #8
1bdac     1E 26 0E F2 | 	cmp	local01, #30 wz
1bdb0     14 4E 05 A1 |  if_e	add	fp, #20
1bdb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bdb8     14 4E 85 A1 |  if_e	sub	fp, #20
1bdbc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1bdc0     1C 00 90 5D |  if_ne	jmp	#LR__2288
1bdc4     A7 12 02 FB | 	rdlong	arg01, fp
1bdc8     0C 4E 05 F1 | 	add	fp, #12
1bdcc     A7 14 02 FB | 	rdlong	arg02, fp
1bdd0     0C 4E 85 F1 | 	sub	fp, #12
1bdd4     28 88 B0 FD | 	call	#__system___float_add
1bdd8     A7 FA 61 FC | 	wrlong	result1, fp
1bddc     C0 01 90 FD | 	jmp	#LR__2295
1bde0                 | LR__2288
1bde0                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1bde0     08 4E 05 F1 | 	add	fp, #8
1bde4     A7 26 02 FB | 	rdlong	local01, fp
1bde8     08 4E 85 F1 | 	sub	fp, #8
1bdec     1F 26 0E F2 | 	cmp	local01, #31 wz
1bdf0     24 00 90 5D |  if_ne	jmp	#LR__2289
1bdf4     14 4E 05 F1 | 	add	fp, #20
1bdf8     A7 2A 02 FB | 	rdlong	local03, fp
1bdfc     14 4E 85 F1 | 	sub	fp, #20
1be00     1F 2A 0E F2 | 	cmp	local03, #31 wz
1be04     A7 04 68 5C |  if_ne	wrlong	#2, fp
1be08     08 4E 05 51 |  if_ne	add	fp, #8
1be0c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1be10     08 4E 85 51 |  if_ne	sub	fp, #8
1be14     88 01 90 5D |  if_ne	jmp	#LR__2295
1be18                 | LR__2289
1be18                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1be18     14 4E 05 F1 | 	add	fp, #20
1be1c     A7 26 02 FB | 	rdlong	local01, fp
1be20     14 4E 85 F1 | 	sub	fp, #20
1be24     1F 26 0E F2 | 	cmp	local01, #31 wz
1be28     24 00 90 5D |  if_ne	jmp	#LR__2290
1be2c     08 4E 05 F1 | 	add	fp, #8
1be30     A7 2A 02 FB | 	rdlong	local03, fp
1be34     08 4E 85 F1 | 	sub	fp, #8
1be38     1F 2A 0E F2 | 	cmp	local03, #31 wz
1be3c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1be40     08 4E 05 51 |  if_ne	add	fp, #8
1be44     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1be48     08 4E 85 51 |  if_ne	sub	fp, #8
1be4c     50 01 90 5D |  if_ne	jmp	#LR__2295
1be50                 | LR__2290
1be50                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1be50     08 4E 05 F1 | 	add	fp, #8
1be54     A7 26 02 FB | 	rdlong	local01, fp
1be58     08 4E 85 F1 | 	sub	fp, #8
1be5c     1F 26 0E F2 | 	cmp	local01, #31 wz
1be60     14 4E 05 A1 |  if_e	add	fp, #20
1be64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1be68     14 4E 85 A1 |  if_e	sub	fp, #20
1be6c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1be70     1C 00 90 5D |  if_ne	jmp	#LR__2291
1be74     A7 12 02 FB | 	rdlong	arg01, fp
1be78     0C 4E 05 F1 | 	add	fp, #12
1be7c     A7 14 02 FB | 	rdlong	arg02, fp
1be80     0C 4E 85 F1 | 	sub	fp, #12
1be84     E8 5D B0 FD | 	call	#__system___string_concat
1be88     A7 FA 61 FC | 	wrlong	result1, fp
1be8c     10 01 90 FD | 	jmp	#LR__2295
1be90                 | LR__2291
1be90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1be90     08 4E 05 F1 | 	add	fp, #8
1be94     A7 26 02 FB | 	rdlong	local01, fp
1be98     08 4E 85 F1 | 	sub	fp, #8
1be9c     2B 26 0E F2 | 	cmp	local01, #43 wz
1bea0     14 4E 05 A1 |  if_e	add	fp, #20
1bea4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bea8     14 4E 85 A1 |  if_e	sub	fp, #20
1beac     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1beb0     30 00 90 5D |  if_ne	jmp	#LR__2292
1beb4     A7 12 02 FB | 	rdlong	arg01, fp
1beb8     4C FB BE FD | 	call	#_convertstring
1bebc     FD 12 02 F6 | 	mov	arg01, result1
1bec0     0C 4E 05 F1 | 	add	fp, #12
1bec4     A7 14 02 FB | 	rdlong	arg02, fp
1bec8     0C 4E 85 F1 | 	sub	fp, #12
1becc     A0 5D B0 FD | 	call	#__system___string_concat
1bed0     A7 FA 61 FC | 	wrlong	result1, fp
1bed4     08 4E 05 F1 | 	add	fp, #8
1bed8     A7 3E 68 FC | 	wrlong	#31, fp
1bedc     08 4E 85 F1 | 	sub	fp, #8
1bee0     BC 00 90 FD | 	jmp	#LR__2295
1bee4                 | LR__2292
1bee4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1bee4     08 4E 05 F1 | 	add	fp, #8
1bee8     A7 26 02 FB | 	rdlong	local01, fp
1beec     08 4E 85 F1 | 	sub	fp, #8
1bef0     1F 26 0E F2 | 	cmp	local01, #31 wz
1bef4     14 4E 05 A1 |  if_e	add	fp, #20
1bef8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1befc     14 4E 85 A1 |  if_e	sub	fp, #20
1bf00     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bf04     28 00 90 5D |  if_ne	jmp	#LR__2293
1bf08     A7 26 02 FB | 	rdlong	local01, fp
1bf0c     0C 4E 05 F1 | 	add	fp, #12
1bf10     A7 12 02 FB | 	rdlong	arg01, fp
1bf14     0C 4E 85 F1 | 	sub	fp, #12
1bf18     EC FA BE FD | 	call	#_convertstring
1bf1c     FD 14 02 F6 | 	mov	arg02, result1
1bf20     13 13 02 F6 | 	mov	arg01, local01
1bf24     48 5D B0 FD | 	call	#__system___string_concat
1bf28     A7 FA 61 FC | 	wrlong	result1, fp
1bf2c     70 00 90 FD | 	jmp	#LR__2295
1bf30                 | LR__2293
1bf30                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1bf30     08 4E 05 F1 | 	add	fp, #8
1bf34     A7 26 02 FB | 	rdlong	local01, fp
1bf38     08 4E 85 F1 | 	sub	fp, #8
1bf3c     2B 26 0E F2 | 	cmp	local01, #43 wz
1bf40     14 4E 05 A1 |  if_e	add	fp, #20
1bf44     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bf48     14 4E 85 A1 |  if_e	sub	fp, #20
1bf4c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bf50     3C 00 90 5D |  if_ne	jmp	#LR__2294
1bf54     A7 12 02 FB | 	rdlong	arg01, fp
1bf58     AC FA BE FD | 	call	#_convertstring
1bf5c     FD 26 02 F6 | 	mov	local01, result1
1bf60     0C 4E 05 F1 | 	add	fp, #12
1bf64     A7 12 02 FB | 	rdlong	arg01, fp
1bf68     0C 4E 85 F1 | 	sub	fp, #12
1bf6c     98 FA BE FD | 	call	#_convertstring
1bf70     FD 14 02 F6 | 	mov	arg02, result1
1bf74     13 13 02 F6 | 	mov	arg01, local01
1bf78     F4 5C B0 FD | 	call	#__system___string_concat
1bf7c     A7 FA 61 FC | 	wrlong	result1, fp
1bf80     08 4E 05 F1 | 	add	fp, #8
1bf84     A7 3E 68 FC | 	wrlong	#31, fp
1bf88     08 4E 85 F1 | 	sub	fp, #8
1bf8c     10 00 90 FD | 	jmp	#LR__2295
1bf90                 | LR__2294
1bf90     A7 08 68 FC | 	wrlong	#4, fp
1bf94     08 4E 05 F1 | 	add	fp, #8
1bf98     A7 FE 69 FC | 	wrlong	#255, fp
1bf9c     08 4E 85 F1 | 	sub	fp, #8
1bfa0                 | LR__2295
1bfa0     A7 12 02 F6 | 	mov	arg01, fp
1bfa4     80 F9 BE FD | 	call	#_push
1bfa8     A7 F0 03 F6 | 	mov	ptra, fp
1bfac     B2 00 A0 FD | 	call	#popregs_
1bfb0                 | _do_plus_ret
1bfb0     2D 00 64 FD | 	ret
1bfb4                 | 
1bfb4                 | ' 
1bfb4                 | ' '--------------------------------- power (^)
1bfb4                 | ' 
1bfb4                 | ' sub do_power 
1bfb4                 | _do_power
1bfb4     02 4A 05 F6 | 	mov	COUNT_, #2
1bfb8     A8 00 A0 FD | 	call	#pushregs_
1bfbc     18 F0 07 F1 | 	add	ptra, #24
1bfc0     CC F8 BE FD | 	call	#_pop
1bfc4     FD 14 02 F6 | 	mov	arg02, result1
1bfc8     FE 12 02 F6 | 	mov	arg01, result2
1bfcc     FF 26 02 F6 | 	mov	local01, result3
1bfd0     0C 4E 05 F1 | 	add	fp, #12
1bfd4     A7 14 62 FC | 	wrlong	arg02, fp
1bfd8     04 4E 05 F1 | 	add	fp, #4
1bfdc     A7 12 62 FC | 	wrlong	arg01, fp
1bfe0     04 4E 05 F1 | 	add	fp, #4
1bfe4     A7 26 62 FC | 	wrlong	local01, fp
1bfe8     14 4E 85 F1 | 	sub	fp, #20
1bfec     A0 F8 BE FD | 	call	#_pop
1bff0     A7 FA 61 FC | 	wrlong	result1, fp
1bff4     04 4E 05 F1 | 	add	fp, #4
1bff8     A7 FC 61 FC | 	wrlong	result2, fp
1bffc     04 4E 05 F1 | 	add	fp, #4
1c000     A7 FE 61 FC | 	wrlong	result3, fp
1c004                 | ' 
1c004                 | ' t2=pop()
1c004                 | ' t1=pop()
1c004                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1c004     08 4E 85 F1 | 	sub	fp, #8
1c008     1F FE 0D F2 | 	cmp	result3, #31 wz
1c00c     14 4E 05 51 |  if_ne	add	fp, #20
1c010     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c014     14 4E 85 51 |  if_ne	sub	fp, #20
1c018     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1c01c     A7 18 68 AC |  if_e	wrlong	#12, fp
1c020     08 4E 05 A1 |  if_e	add	fp, #8
1c024     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c028     08 4E 85 A1 |  if_e	sub	fp, #8
1c02c     38 01 90 AD |  if_e	jmp	#LR__2305
1c030                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c030     08 4E 05 F1 | 	add	fp, #8
1c034     A7 14 02 FB | 	rdlong	arg02, fp
1c038     08 4E 85 F1 | 	sub	fp, #8
1c03c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c040     28 00 90 5D |  if_ne	jmp	#LR__2300
1c044     08 4E 05 F1 | 	add	fp, #8
1c048     A7 3C 68 FC | 	wrlong	#30, fp
1c04c     08 4E 85 F1 | 	sub	fp, #8
1c050     A7 12 02 FB | 	rdlong	arg01, fp
1c054     09 13 52 F6 | 	abs	arg01, arg01 wc
1c058     1F 28 C6 C9 |  if_b	decod	local02, #31
1c05c     00 28 06 36 |  if_ae	mov	local02, #0
1c060     68 85 B0 FD | 	call	#__system___float_fromuns
1c064     14 FB 61 F5 | 	xor	result1, local02
1c068     A7 FA 61 FC | 	wrlong	result1, fp
1c06c                 | LR__2300
1c06c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1c06c     08 4E 05 F1 | 	add	fp, #8
1c070     A7 14 02 FB | 	rdlong	arg02, fp
1c074     08 4E 85 F1 | 	sub	fp, #8
1c078     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c07c     18 00 90 5D |  if_ne	jmp	#LR__2301
1c080     08 4E 05 F1 | 	add	fp, #8
1c084     A7 3C 68 FC | 	wrlong	#30, fp
1c088     08 4E 85 F1 | 	sub	fp, #8
1c08c     A7 12 02 FB | 	rdlong	arg01, fp
1c090     38 85 B0 FD | 	call	#__system___float_fromuns
1c094     A7 FA 61 FC | 	wrlong	result1, fp
1c098                 | LR__2301
1c098                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c098     14 4E 05 F1 | 	add	fp, #20
1c09c     A7 14 02 FB | 	rdlong	arg02, fp
1c0a0     14 4E 85 F1 | 	sub	fp, #20
1c0a4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c0a8     34 00 90 5D |  if_ne	jmp	#LR__2302
1c0ac     14 4E 05 F1 | 	add	fp, #20
1c0b0     A7 3C 68 FC | 	wrlong	#30, fp
1c0b4     08 4E 85 F1 | 	sub	fp, #8
1c0b8     A7 12 02 FB | 	rdlong	arg01, fp
1c0bc     0C 4E 85 F1 | 	sub	fp, #12
1c0c0     09 13 52 F6 | 	abs	arg01, arg01 wc
1c0c4     1F 28 C6 C9 |  if_b	decod	local02, #31
1c0c8     00 28 06 36 |  if_ae	mov	local02, #0
1c0cc     FC 84 B0 FD | 	call	#__system___float_fromuns
1c0d0     14 FB 61 F5 | 	xor	result1, local02
1c0d4     0C 4E 05 F1 | 	add	fp, #12
1c0d8     A7 FA 61 FC | 	wrlong	result1, fp
1c0dc     0C 4E 85 F1 | 	sub	fp, #12
1c0e0                 | LR__2302
1c0e0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c0e0     14 4E 05 F1 | 	add	fp, #20
1c0e4     A7 14 02 FB | 	rdlong	arg02, fp
1c0e8     14 4E 85 F1 | 	sub	fp, #20
1c0ec     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c0f0     24 00 90 5D |  if_ne	jmp	#LR__2303
1c0f4     14 4E 05 F1 | 	add	fp, #20
1c0f8     A7 3C 68 FC | 	wrlong	#30, fp
1c0fc     08 4E 85 F1 | 	sub	fp, #8
1c100     A7 12 02 FB | 	rdlong	arg01, fp
1c104     0C 4E 85 F1 | 	sub	fp, #12
1c108     C0 84 B0 FD | 	call	#__system___float_fromuns
1c10c     0C 4E 05 F1 | 	add	fp, #12
1c110     A7 FA 61 FC | 	wrlong	result1, fp
1c114     0C 4E 85 F1 | 	sub	fp, #12
1c118                 | LR__2303
1c118                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1c118     08 4E 05 F1 | 	add	fp, #8
1c11c     A7 14 02 FB | 	rdlong	arg02, fp
1c120     08 4E 85 F1 | 	sub	fp, #8
1c124     1E 14 0E F2 | 	cmp	arg02, #30 wz
1c128     14 4E 05 A1 |  if_e	add	fp, #20
1c12c     A7 26 02 AB |  if_e	rdlong	local01, fp
1c130     14 4E 85 A1 |  if_e	sub	fp, #20
1c134     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1c138     1C 00 90 5D |  if_ne	jmp	#LR__2304
1c13c     A7 12 02 FB | 	rdlong	arg01, fp
1c140     0C 4E 05 F1 | 	add	fp, #12
1c144     A7 14 02 FB | 	rdlong	arg02, fp
1c148     0C 4E 85 F1 | 	sub	fp, #12
1c14c     88 97 B0 FD | 	call	#__system____builtin_powf
1c150     A7 FA 61 FC | 	wrlong	result1, fp
1c154     10 00 90 FD | 	jmp	#LR__2305
1c158                 | LR__2304
1c158     A7 1A 68 FC | 	wrlong	#13, fp
1c15c     08 4E 05 F1 | 	add	fp, #8
1c160     A7 FE 69 FC | 	wrlong	#255, fp
1c164     08 4E 85 F1 | 	sub	fp, #8
1c168                 | LR__2305
1c168     A7 12 02 F6 | 	mov	arg01, fp
1c16c     B8 F7 BE FD | 	call	#_push
1c170     A7 F0 03 F6 | 	mov	ptra, fp
1c174     B2 00 A0 FD | 	call	#popregs_
1c178                 | _do_power_ret
1c178     2D 00 64 FD | 	ret
1c17c                 | 
1c17c                 | ' 
1c17c                 | ' '--------------------------------- SHL
1c17c                 | ' 
1c17c                 | ' sub do_shl 
1c17c                 | _do_shl
1c17c     03 4A 05 F6 | 	mov	COUNT_, #3
1c180     A8 00 A0 FD | 	call	#pushregs_
1c184     18 F0 07 F1 | 	add	ptra, #24
1c188     04 F7 BE FD | 	call	#_pop
1c18c     FD 12 02 F6 | 	mov	arg01, result1
1c190     FE 26 02 F6 | 	mov	local01, result2
1c194     FF 28 02 F6 | 	mov	local02, result3
1c198     0C 4E 05 F1 | 	add	fp, #12
1c19c     A7 12 62 FC | 	wrlong	arg01, fp
1c1a0     04 4E 05 F1 | 	add	fp, #4
1c1a4     A7 26 62 FC | 	wrlong	local01, fp
1c1a8     04 4E 05 F1 | 	add	fp, #4
1c1ac     A7 28 62 FC | 	wrlong	local02, fp
1c1b0     14 4E 85 F1 | 	sub	fp, #20
1c1b4     D8 F6 BE FD | 	call	#_pop
1c1b8     FF 2A 02 F6 | 	mov	local03, result3
1c1bc     A7 FA 61 FC | 	wrlong	result1, fp
1c1c0     04 4E 05 F1 | 	add	fp, #4
1c1c4     A7 FC 61 FC | 	wrlong	result2, fp
1c1c8     04 4E 05 F1 | 	add	fp, #4
1c1cc     A7 2A 62 FC | 	wrlong	local03, fp
1c1d0                 | ' 
1c1d0                 | ' t2=pop()
1c1d0                 | ' t1=pop()
1c1d0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c1d0     08 4E 85 F1 | 	sub	fp, #8
1c1d4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c1d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c1dc     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c1e0     08 4E 05 A1 |  if_e	add	fp, #8
1c1e4     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c1e8     08 4E 85 A1 |  if_e	sub	fp, #8
1c1ec                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c1ec     14 4E 05 F1 | 	add	fp, #20
1c1f0     A7 2A 02 FB | 	rdlong	local03, fp
1c1f4     14 4E 85 F1 | 	sub	fp, #20
1c1f8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c1fc     18 00 90 5D |  if_ne	jmp	#LR__2310
1c200     0C 4E 05 F1 | 	add	fp, #12
1c204     A7 2A 02 FB | 	rdlong	local03, fp
1c208     A7 2A 62 FC | 	wrlong	local03, fp
1c20c     08 4E 05 F1 | 	add	fp, #8
1c210     A7 3A 68 FC | 	wrlong	#29, fp
1c214     14 4E 85 F1 | 	sub	fp, #20
1c218                 | LR__2310
1c218                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1c218     08 4E 05 F1 | 	add	fp, #8
1c21c     A7 2A 02 FB | 	rdlong	local03, fp
1c220     08 4E 85 F1 | 	sub	fp, #8
1c224     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c228     14 4E 05 51 |  if_ne	add	fp, #20
1c22c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1c230     14 4E 85 51 |  if_ne	sub	fp, #20
1c234     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1c238     08 4E 05 51 |  if_ne	add	fp, #8
1c23c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c240     08 4E 85 51 |  if_ne	sub	fp, #8
1c244     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1c248     14 4E 05 51 |  if_ne	add	fp, #20
1c24c     14 4E 85 51 |  if_ne	sub	fp, #20
1c250     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1c254     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c258     08 4E 05 A1 |  if_e	add	fp, #8
1c25c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c260     08 4E 85 A1 |  if_e	sub	fp, #8
1c264     18 00 90 AD |  if_e	jmp	#LR__2311
1c268     A7 2A 02 FB | 	rdlong	local03, fp
1c26c     0C 4E 05 F1 | 	add	fp, #12
1c270     A7 26 02 FB | 	rdlong	local01, fp
1c274     0C 4E 85 F1 | 	sub	fp, #12
1c278     13 2B 62 F0 | 	shl	local03, local01
1c27c     A7 2A 62 FC | 	wrlong	local03, fp
1c280                 | LR__2311
1c280     A7 12 02 F6 | 	mov	arg01, fp
1c284     A0 F6 BE FD | 	call	#_push
1c288     A7 F0 03 F6 | 	mov	ptra, fp
1c28c     B2 00 A0 FD | 	call	#popregs_
1c290                 | _do_shl_ret
1c290     2D 00 64 FD | 	ret
1c294                 | 
1c294                 | ' 
1c294                 | ' '--------------------------------- SHR
1c294                 | ' 
1c294                 | ' sub do_shr 
1c294                 | _do_shr
1c294     03 4A 05 F6 | 	mov	COUNT_, #3
1c298     A8 00 A0 FD | 	call	#pushregs_
1c29c     18 F0 07 F1 | 	add	ptra, #24
1c2a0     EC F5 BE FD | 	call	#_pop
1c2a4     FD 12 02 F6 | 	mov	arg01, result1
1c2a8     FE 26 02 F6 | 	mov	local01, result2
1c2ac     FF 28 02 F6 | 	mov	local02, result3
1c2b0     0C 4E 05 F1 | 	add	fp, #12
1c2b4     A7 12 62 FC | 	wrlong	arg01, fp
1c2b8     04 4E 05 F1 | 	add	fp, #4
1c2bc     A7 26 62 FC | 	wrlong	local01, fp
1c2c0     04 4E 05 F1 | 	add	fp, #4
1c2c4     A7 28 62 FC | 	wrlong	local02, fp
1c2c8     14 4E 85 F1 | 	sub	fp, #20
1c2cc     C0 F5 BE FD | 	call	#_pop
1c2d0     FF 2A 02 F6 | 	mov	local03, result3
1c2d4     A7 FA 61 FC | 	wrlong	result1, fp
1c2d8     04 4E 05 F1 | 	add	fp, #4
1c2dc     A7 FC 61 FC | 	wrlong	result2, fp
1c2e0     04 4E 05 F1 | 	add	fp, #4
1c2e4     A7 2A 62 FC | 	wrlong	local03, fp
1c2e8                 | ' 
1c2e8                 | ' t2=pop()
1c2e8                 | ' t1=pop()
1c2e8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c2e8     08 4E 85 F1 | 	sub	fp, #8
1c2ec     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c2f0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c2f4     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c2f8     08 4E 05 A1 |  if_e	add	fp, #8
1c2fc     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c300     08 4E 85 A1 |  if_e	sub	fp, #8
1c304                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c304     14 4E 05 F1 | 	add	fp, #20
1c308     A7 2A 02 FB | 	rdlong	local03, fp
1c30c     14 4E 85 F1 | 	sub	fp, #20
1c310     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c314     18 00 90 5D |  if_ne	jmp	#LR__2320
1c318     0C 4E 05 F1 | 	add	fp, #12
1c31c     A7 2A 02 FB | 	rdlong	local03, fp
1c320     A7 2A 62 FC | 	wrlong	local03, fp
1c324     08 4E 05 F1 | 	add	fp, #8
1c328     A7 3A 68 FC | 	wrlong	#29, fp
1c32c     14 4E 85 F1 | 	sub	fp, #20
1c330                 | LR__2320
1c330                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1c330     08 4E 05 F1 | 	add	fp, #8
1c334     A7 2A 02 FB | 	rdlong	local03, fp
1c338     08 4E 85 F1 | 	sub	fp, #8
1c33c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c340     14 4E 05 51 |  if_ne	add	fp, #20
1c344     A7 28 02 5B |  if_ne	rdlong	local02, fp
1c348     14 4E 85 51 |  if_ne	sub	fp, #20
1c34c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1c350     08 4E 05 51 |  if_ne	add	fp, #8
1c354     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c358     08 4E 85 51 |  if_ne	sub	fp, #8
1c35c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1c360     14 4E 05 51 |  if_ne	add	fp, #20
1c364     14 4E 85 51 |  if_ne	sub	fp, #20
1c368     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1c36c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c370     08 4E 05 A1 |  if_e	add	fp, #8
1c374     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c378     08 4E 85 A1 |  if_e	sub	fp, #8
1c37c     18 00 90 AD |  if_e	jmp	#LR__2321
1c380     A7 2A 02 FB | 	rdlong	local03, fp
1c384     0C 4E 05 F1 | 	add	fp, #12
1c388     A7 26 02 FB | 	rdlong	local01, fp
1c38c     0C 4E 85 F1 | 	sub	fp, #12
1c390     13 2B 42 F0 | 	shr	local03, local01
1c394     A7 2A 62 FC | 	wrlong	local03, fp
1c398                 | LR__2321
1c398     A7 12 02 F6 | 	mov	arg01, fp
1c39c     88 F5 BE FD | 	call	#_push
1c3a0     A7 F0 03 F6 | 	mov	ptra, fp
1c3a4     B2 00 A0 FD | 	call	#popregs_
1c3a8                 | _do_shr_ret
1c3a8     2D 00 64 FD | 	ret
1c3ac                 | 
1c3ac                 | ' 
1c3ac                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1c3ac                 | ' 
1c3ac                 | ' ''----------------------------------------------------------------------------------------------------
1c3ac                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1c3ac                 | ' ''----------------------------------------------------------------------------------------------------
1c3ac                 | ' 
1c3ac                 | ' ''--------------------------- Command function pointers
1c3ac                 | ' 
1c3ac                 | ' sub init_commands
1c3ac                 | _init_commands
1c3ac                 | ' 
1c3ac                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1c3ac     00 00 06 F6 | 	mov	_var01, #0
1c3b0     97 16 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
1c3b4                 | LR__2330
1c3b4     00 FB 01 F6 | 	mov	result1, _var01
1c3b8     02 FA 65 F0 | 	shl	result1, #2
1c3bc     43 00 00 FF 
1c3c0     60 E4 05 F1 | 	add	objptr, ##34400
1c3c4     F2 FA 01 F1 | 	add	result1, objptr
1c3c8     43 00 00 FF 
1c3cc     60 E4 85 F1 | 	sub	objptr, ##34400
1c3d0     FD E4 61 FC | 	wrlong	objptr, result1
1c3d4     01 00 06 F1 | 	add	_var01, #1
1c3d8     00 01 56 F2 | 	cmps	_var01, #256 wc
1c3dc     D4 FF 9F CD |  if_b	jmp	#LR__2330
1c3e0                 | LR__2331
1c3e0     F2 FA 01 F6 | 	mov	result1, objptr
1c3e4     14 FA 25 F4 | 	bith	result1, #20
1c3e8     43 00 00 FF 
1c3ec     64 E4 05 F1 | 	add	objptr, ##34404
1c3f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3f4     43 00 00 FF 
1c3f8     64 E4 85 F1 | 	sub	objptr, ##34404
1c3fc     F2 FA 01 F6 | 	mov	result1, objptr
1c400     15 FA 25 F4 | 	bith	result1, #21
1c404     43 00 00 FF 
1c408     68 E4 05 F1 | 	add	objptr, ##34408
1c40c     F2 FA 61 FC | 	wrlong	result1, objptr
1c410     43 00 00 FF 
1c414     68 E4 85 F1 | 	sub	objptr, ##34408
1c418     F2 FA 01 F6 | 	mov	result1, objptr
1c41c     34 FA 25 F4 | 	bith	result1, #52
1c420     43 00 00 FF 
1c424     6C E4 05 F1 | 	add	objptr, ##34412
1c428     F2 FA 61 FC | 	wrlong	result1, objptr
1c42c     43 00 00 FF 
1c430     6C E4 85 F1 | 	sub	objptr, ##34412
1c434     F2 FA 01 F6 | 	mov	result1, objptr
1c438     16 FA 25 F4 | 	bith	result1, #22
1c43c     43 00 00 FF 
1c440     74 E4 05 F1 | 	add	objptr, ##34420
1c444     F2 FA 61 FC | 	wrlong	result1, objptr
1c448     43 00 00 FF 
1c44c     74 E4 85 F1 | 	sub	objptr, ##34420
1c450     F2 FA 01 F6 | 	mov	result1, objptr
1c454     00 28 00 FF 
1c458     00 FA 45 F5 | 	or	result1, ##5242880
1c45c     43 00 00 FF 
1c460     78 E4 05 F1 | 	add	objptr, ##34424
1c464     F2 FA 61 FC | 	wrlong	result1, objptr
1c468     43 00 00 FF 
1c46c     78 E4 85 F1 | 	sub	objptr, ##34424
1c470     F2 FA 01 F6 | 	mov	result1, objptr
1c474     35 FA 25 F4 | 	bith	result1, #53
1c478     43 00 00 FF 
1c47c     7C E4 05 F1 | 	add	objptr, ##34428
1c480     F2 FA 61 FC | 	wrlong	result1, objptr
1c484     43 00 00 FF 
1c488     7C E4 85 F1 | 	sub	objptr, ##34428
1c48c     F2 FA 01 F6 | 	mov	result1, objptr
1c490     54 FA 25 F4 | 	bith	result1, #84
1c494     43 00 00 FF 
1c498     80 E4 05 F1 | 	add	objptr, ##34432
1c49c     F2 FA 61 FC | 	wrlong	result1, objptr
1c4a0     43 00 00 FF 
1c4a4     80 E4 85 F1 | 	sub	objptr, ##34432
1c4a8     F2 FA 01 F6 | 	mov	result1, objptr
1c4ac     17 FA 25 F4 | 	bith	result1, #23
1c4b0     43 00 00 FF 
1c4b4     84 E4 05 F1 | 	add	objptr, ##34436
1c4b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4bc     43 00 00 FF 
1c4c0     84 E4 85 F1 | 	sub	objptr, ##34436
1c4c4     F2 FA 01 F6 | 	mov	result1, objptr
1c4c8     00 48 00 FF 
1c4cc     00 FA 45 F5 | 	or	result1, ##9437184
1c4d0     43 00 00 FF 
1c4d4     88 E4 05 F1 | 	add	objptr, ##34440
1c4d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4dc     43 00 00 FF 
1c4e0     88 E4 85 F1 | 	sub	objptr, ##34440
1c4e4     F2 FA 01 F6 | 	mov	result1, objptr
1c4e8     00 50 00 FF 
1c4ec     00 FA 45 F5 | 	or	result1, ##10485760
1c4f0     43 00 00 FF 
1c4f4     8C E4 05 F1 | 	add	objptr, ##34444
1c4f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4fc     43 00 00 FF 
1c500     8C E4 85 F1 | 	sub	objptr, ##34444
1c504     F2 FA 01 F6 | 	mov	result1, objptr
1c508     00 58 00 FF 
1c50c     00 FA 45 F5 | 	or	result1, ##11534336
1c510     43 00 00 FF 
1c514     90 E4 05 F1 | 	add	objptr, ##34448
1c518     F2 FA 61 FC | 	wrlong	result1, objptr
1c51c     43 00 00 FF 
1c520     90 E4 85 F1 | 	sub	objptr, ##34448
1c524     F2 FA 01 F6 | 	mov	result1, objptr
1c528     36 FA 25 F4 | 	bith	result1, #54
1c52c     43 00 00 FF 
1c530     A4 E4 05 F1 | 	add	objptr, ##34468
1c534     F2 FA 61 FC | 	wrlong	result1, objptr
1c538     43 00 00 FF 
1c53c     A4 E4 85 F1 | 	sub	objptr, ##34468
1c540     F2 FA 01 F6 | 	mov	result1, objptr
1c544     00 68 00 FF 
1c548     00 FA 45 F5 | 	or	result1, ##13631488
1c54c     43 00 00 FF 
1c550     D4 E4 05 F1 | 	add	objptr, ##34516
1c554     F2 FA 61 FC | 	wrlong	result1, objptr
1c558     43 00 00 FF 
1c55c     D4 E4 85 F1 | 	sub	objptr, ##34516
1c560     F2 FA 01 F6 | 	mov	result1, objptr
1c564     00 68 00 FF 
1c568     00 FA 45 F5 | 	or	result1, ##13631488
1c56c     43 00 00 FF 
1c570     D0 E4 05 F1 | 	add	objptr, ##34512
1c574     F2 FA 61 FC | 	wrlong	result1, objptr
1c578     43 00 00 FF 
1c57c     D0 E4 85 F1 | 	sub	objptr, ##34512
1c580     F2 FA 01 F6 | 	mov	result1, objptr
1c584     00 68 00 FF 
1c588     00 FA 45 F5 | 	or	result1, ##13631488
1c58c     43 00 00 FF 
1c590     D8 E4 05 F1 | 	add	objptr, ##34520
1c594     F2 FA 61 FC | 	wrlong	result1, objptr
1c598     43 00 00 FF 
1c59c     D8 E4 85 F1 | 	sub	objptr, ##34520
1c5a0     F2 FA 01 F6 | 	mov	result1, objptr
1c5a4     00 68 00 FF 
1c5a8     00 FA 45 F5 | 	or	result1, ##13631488
1c5ac     43 00 00 FF 
1c5b0     DC E4 05 F1 | 	add	objptr, ##34524
1c5b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b8     43 00 00 FF 
1c5bc     DC E4 85 F1 | 	sub	objptr, ##34524
1c5c0     F2 FA 01 F6 | 	mov	result1, objptr
1c5c4     00 68 00 FF 
1c5c8     00 FA 45 F5 | 	or	result1, ##13631488
1c5cc     43 00 00 FF 
1c5d0     0C E5 05 F1 | 	add	objptr, ##34572
1c5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5d8     43 00 00 FF 
1c5dc     0C E5 85 F1 | 	sub	objptr, ##34572
1c5e0     F2 FA 01 F6 | 	mov	result1, objptr
1c5e4     55 FA 25 F4 | 	bith	result1, #85
1c5e8     43 00 00 FF 
1c5ec     BC E4 05 F1 | 	add	objptr, ##34492
1c5f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c5f4     43 00 00 FF 
1c5f8     BC E4 85 F1 | 	sub	objptr, ##34492
1c5fc     F2 FA 01 F6 | 	mov	result1, objptr
1c600     00 68 00 FF 
1c604     00 FA 45 F5 | 	or	result1, ##13631488
1c608     43 00 00 FF 
1c60c     10 E5 05 F1 | 	add	objptr, ##34576
1c610     F2 FA 61 FC | 	wrlong	result1, objptr
1c614     43 00 00 FF 
1c618     10 E5 85 F1 | 	sub	objptr, ##34576
1c61c     F2 FA 01 F6 | 	mov	result1, objptr
1c620     00 68 00 FF 
1c624     00 FA 45 F5 | 	or	result1, ##13631488
1c628     43 00 00 FF 
1c62c     E0 E4 05 F1 | 	add	objptr, ##34528
1c630     F2 FA 61 FC | 	wrlong	result1, objptr
1c634     43 00 00 FF 
1c638     E0 E4 85 F1 | 	sub	objptr, ##34528
1c63c     F2 FA 01 F6 | 	mov	result1, objptr
1c640     00 68 00 FF 
1c644     00 FA 45 F5 | 	or	result1, ##13631488
1c648     43 00 00 FF 
1c64c     E4 E4 05 F1 | 	add	objptr, ##34532
1c650     F2 FA 61 FC | 	wrlong	result1, objptr
1c654     43 00 00 FF 
1c658     E4 E4 85 F1 | 	sub	objptr, ##34532
1c65c     F2 FA 01 F6 | 	mov	result1, objptr
1c660     00 68 00 FF 
1c664     00 FA 45 F5 | 	or	result1, ##13631488
1c668     43 00 00 FF 
1c66c     E8 E4 05 F1 | 	add	objptr, ##34536
1c670     F2 FA 61 FC | 	wrlong	result1, objptr
1c674     43 00 00 FF 
1c678     E8 E4 85 F1 | 	sub	objptr, ##34536
1c67c     F2 FA 01 F6 | 	mov	result1, objptr
1c680     74 FA 25 F4 | 	bith	result1, #116
1c684     43 00 00 FF 
1c688     60 E5 05 F1 | 	add	objptr, ##34656
1c68c     F2 FA 61 FC | 	wrlong	result1, objptr
1c690     43 00 00 FF 
1c694     60 E5 85 F1 | 	sub	objptr, ##34656
1c698     F2 FA 01 F6 | 	mov	result1, objptr
1c69c     18 FA 25 F4 | 	bith	result1, #24
1c6a0     43 00 00 FF 
1c6a4     64 E5 05 F1 | 	add	objptr, ##34660
1c6a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6ac     43 00 00 FF 
1c6b0     64 E5 85 F1 | 	sub	objptr, ##34660
1c6b4     F2 FA 01 F6 | 	mov	result1, objptr
1c6b8     00 88 00 FF 
1c6bc     00 FA 45 F5 | 	or	result1, ##17825792
1c6c0     43 00 00 FF 
1c6c4     68 E5 05 F1 | 	add	objptr, ##34664
1c6c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6cc     43 00 00 FF 
1c6d0     68 E5 85 F1 | 	sub	objptr, ##34664
1c6d4     F2 FA 01 F6 | 	mov	result1, objptr
1c6d8     00 90 00 FF 
1c6dc     00 FA 45 F5 | 	or	result1, ##18874368
1c6e0     43 00 00 FF 
1c6e4     6C E5 05 F1 | 	add	objptr, ##34668
1c6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6ec     43 00 00 FF 
1c6f0     6C E5 85 F1 | 	sub	objptr, ##34668
1c6f4     F2 FA 01 F6 | 	mov	result1, objptr
1c6f8     00 98 00 FF 
1c6fc     00 FA 45 F5 | 	or	result1, ##19922944
1c700     43 00 00 FF 
1c704     70 E5 05 F1 | 	add	objptr, ##34672
1c708     F2 FA 61 FC | 	wrlong	result1, objptr
1c70c     43 00 00 FF 
1c710     70 E5 85 F1 | 	sub	objptr, ##34672
1c714     F2 FA 01 F6 | 	mov	result1, objptr
1c718     00 A0 00 FF 
1c71c     00 FA 45 F5 | 	or	result1, ##20971520
1c720     43 00 00 FF 
1c724     74 E5 05 F1 | 	add	objptr, ##34676
1c728     F2 FA 61 FC | 	wrlong	result1, objptr
1c72c     43 00 00 FF 
1c730     74 E5 85 F1 | 	sub	objptr, ##34676
1c734     F2 FA 01 F6 | 	mov	result1, objptr
1c738     00 A8 00 FF 
1c73c     00 FA 45 F5 | 	or	result1, ##22020096
1c740     43 00 00 FF 
1c744     78 E5 05 F1 | 	add	objptr, ##34680
1c748     F2 FA 61 FC | 	wrlong	result1, objptr
1c74c     43 00 00 FF 
1c750     78 E5 85 F1 | 	sub	objptr, ##34680
1c754     F2 FA 01 F6 | 	mov	result1, objptr
1c758     00 B0 00 FF 
1c75c     00 FA 45 F5 | 	or	result1, ##23068672
1c760     43 00 00 FF 
1c764     7C E5 05 F1 | 	add	objptr, ##34684
1c768     F2 FA 61 FC | 	wrlong	result1, objptr
1c76c     43 00 00 FF 
1c770     7C E5 85 F1 | 	sub	objptr, ##34684
1c774     F2 FA 01 F6 | 	mov	result1, objptr
1c778     00 B8 00 FF 
1c77c     00 FA 45 F5 | 	or	result1, ##24117248
1c780     43 00 00 FF 
1c784     80 E5 05 F1 | 	add	objptr, ##34688
1c788     F2 FA 61 FC | 	wrlong	result1, objptr
1c78c     43 00 00 FF 
1c790     80 E5 85 F1 | 	sub	objptr, ##34688
1c794     F2 FA 01 F6 | 	mov	result1, objptr
1c798     37 FA 25 F4 | 	bith	result1, #55
1c79c     43 00 00 FF 
1c7a0     84 E5 05 F1 | 	add	objptr, ##34692
1c7a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7a8     43 00 00 FF 
1c7ac     84 E5 85 F1 | 	sub	objptr, ##34692
1c7b0     F2 FA 01 F6 | 	mov	result1, objptr
1c7b4     00 C8 00 FF 
1c7b8     00 FA 45 F5 | 	or	result1, ##26214400
1c7bc     43 00 00 FF 
1c7c0     88 E5 05 F1 | 	add	objptr, ##34696
1c7c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7c8     43 00 00 FF 
1c7cc     88 E5 85 F1 | 	sub	objptr, ##34696
1c7d0     F2 FA 01 F6 | 	mov	result1, objptr
1c7d4     00 D0 00 FF 
1c7d8     00 FA 45 F5 | 	or	result1, ##27262976
1c7dc     43 00 00 FF 
1c7e0     8C E5 05 F1 | 	add	objptr, ##34700
1c7e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7e8     43 00 00 FF 
1c7ec     8C E5 85 F1 | 	sub	objptr, ##34700
1c7f0     F2 FA 01 F6 | 	mov	result1, objptr
1c7f4     00 D8 00 FF 
1c7f8     00 FA 45 F5 | 	or	result1, ##28311552
1c7fc     43 00 00 FF 
1c800     90 E5 05 F1 | 	add	objptr, ##34704
1c804     F2 FA 61 FC | 	wrlong	result1, objptr
1c808     43 00 00 FF 
1c80c     90 E5 85 F1 | 	sub	objptr, ##34704
1c810     F2 FA 01 F6 | 	mov	result1, objptr
1c814     56 FA 25 F4 | 	bith	result1, #86
1c818     43 00 00 FF 
1c81c     94 E5 05 F1 | 	add	objptr, ##34708
1c820     F2 FA 61 FC | 	wrlong	result1, objptr
1c824     43 00 00 FF 
1c828     94 E5 85 F1 | 	sub	objptr, ##34708
1c82c     F2 FA 01 F6 | 	mov	result1, objptr
1c830     00 E8 00 FF 
1c834     00 FA 45 F5 | 	or	result1, ##30408704
1c838     45 00 00 FF 
1c83c     5C E4 05 F1 | 	add	objptr, ##35420
1c840     F2 FA 61 FC | 	wrlong	result1, objptr
1c844     45 00 00 FF 
1c848     5C E4 85 F1 | 	sub	objptr, ##35420
1c84c     F2 FA 01 F6 | 	mov	result1, objptr
1c850     75 FA 25 F4 | 	bith	result1, #117
1c854     43 00 00 FF 
1c858     98 E5 05 F1 | 	add	objptr, ##34712
1c85c     F2 FA 61 FC | 	wrlong	result1, objptr
1c860     43 00 00 FF 
1c864     98 E5 85 F1 | 	sub	objptr, ##34712
1c868     F2 FA 01 F6 | 	mov	result1, objptr
1c86c     94 FA 25 F4 | 	bith	result1, #148
1c870     43 00 00 FF 
1c874     AC E5 05 F1 | 	add	objptr, ##34732
1c878     F2 FA 61 FC | 	wrlong	result1, objptr
1c87c     43 00 00 FF 
1c880     AC E5 85 F1 | 	sub	objptr, ##34732
1c884     F2 FA 01 F6 | 	mov	result1, objptr
1c888     19 FA 25 F4 | 	bith	result1, #25
1c88c     43 00 00 FF 
1c890     9C E5 05 F1 | 	add	objptr, ##34716
1c894     F2 FA 61 FC | 	wrlong	result1, objptr
1c898     43 00 00 FF 
1c89c     9C E5 85 F1 | 	sub	objptr, ##34716
1c8a0     F2 FA 01 F6 | 	mov	result1, objptr
1c8a4     00 08 01 FF 
1c8a8     00 FA 45 F5 | 	or	result1, ##34603008
1c8ac     43 00 00 FF 
1c8b0     B8 E4 05 F1 | 	add	objptr, ##34488
1c8b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8b8     43 00 00 FF 
1c8bc     B8 E4 85 F1 | 	sub	objptr, ##34488
1c8c0     F2 FA 01 F6 | 	mov	result1, objptr
1c8c4     00 10 01 FF 
1c8c8     00 FA 45 F5 | 	or	result1, ##35651584
1c8cc     43 00 00 FF 
1c8d0     A0 E5 05 F1 | 	add	objptr, ##34720
1c8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8d8     43 00 00 FF 
1c8dc     A0 E5 85 F1 | 	sub	objptr, ##34720
1c8e0     F2 FA 01 F6 | 	mov	result1, objptr
1c8e4     00 18 01 FF 
1c8e8     00 FA 45 F5 | 	or	result1, ##36700160
1c8ec     43 00 00 FF 
1c8f0     A4 E5 05 F1 | 	add	objptr, ##34724
1c8f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8f8     43 00 00 FF 
1c8fc     A4 E5 85 F1 | 	sub	objptr, ##34724
1c900     F2 FA 01 F6 | 	mov	result1, objptr
1c904     00 20 01 FF 
1c908     00 FA 45 F5 | 	or	result1, ##37748736
1c90c     43 00 00 FF 
1c910     A8 E5 05 F1 | 	add	objptr, ##34728
1c914     F2 FA 61 FC | 	wrlong	result1, objptr
1c918     43 00 00 FF 
1c91c     A8 E5 85 F1 | 	sub	objptr, ##34728
1c920     F2 FA 01 F6 | 	mov	result1, objptr
1c924     00 28 01 FF 
1c928     00 FA 45 F5 | 	or	result1, ##38797312
1c92c     43 00 00 FF 
1c930     B4 E5 05 F1 | 	add	objptr, ##34740
1c934     F2 FA 61 FC | 	wrlong	result1, objptr
1c938     43 00 00 FF 
1c93c     B4 E5 85 F1 | 	sub	objptr, ##34740
1c940     F2 FA 01 F6 | 	mov	result1, objptr
1c944     00 30 01 FF 
1c948     00 FA 45 F5 | 	or	result1, ##39845888
1c94c     43 00 00 FF 
1c950     B8 E5 05 F1 | 	add	objptr, ##34744
1c954     F2 FA 61 FC | 	wrlong	result1, objptr
1c958     43 00 00 FF 
1c95c     B8 E5 85 F1 | 	sub	objptr, ##34744
1c960     F2 FA 01 F6 | 	mov	result1, objptr
1c964     00 38 01 FF 
1c968     00 FA 45 F5 | 	or	result1, ##40894464
1c96c     43 00 00 FF 
1c970     BC E5 05 F1 | 	add	objptr, ##34748
1c974     F2 FA 61 FC | 	wrlong	result1, objptr
1c978     43 00 00 FF 
1c97c     BC E5 85 F1 | 	sub	objptr, ##34748
1c980     F2 FA 01 F6 | 	mov	result1, objptr
1c984     00 40 01 FF 
1c988     00 FA 45 F5 | 	or	result1, ##41943040
1c98c     43 00 00 FF 
1c990     C0 E5 05 F1 | 	add	objptr, ##34752
1c994     F2 FA 61 FC | 	wrlong	result1, objptr
1c998     43 00 00 FF 
1c99c     C0 E5 85 F1 | 	sub	objptr, ##34752
1c9a0     F2 FA 01 F6 | 	mov	result1, objptr
1c9a4     00 48 01 FF 
1c9a8     00 FA 45 F5 | 	or	result1, ##42991616
1c9ac     43 00 00 FF 
1c9b0     C8 E5 05 F1 | 	add	objptr, ##34760
1c9b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c9b8     43 00 00 FF 
1c9bc     C8 E5 85 F1 | 	sub	objptr, ##34760
1c9c0     F2 FA 01 F6 | 	mov	result1, objptr
1c9c4     00 08 01 FF 
1c9c8     00 FA 45 F5 | 	or	result1, ##34603008
1c9cc     43 00 00 FF 
1c9d0     CC E5 05 F1 | 	add	objptr, ##34764
1c9d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c9d8     43 00 00 FF 
1c9dc     CC E5 85 F1 | 	sub	objptr, ##34764
1c9e0     F2 FA 01 F6 | 	mov	result1, objptr
1c9e4     00 50 01 FF 
1c9e8     00 FA 45 F5 | 	or	result1, ##44040192
1c9ec     43 00 00 FF 
1c9f0     CC E4 05 F1 | 	add	objptr, ##34508
1c9f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c9f8     43 00 00 FF 
1c9fc     CC E4 85 F1 | 	sub	objptr, ##34508
1ca00     F2 FA 01 F6 | 	mov	result1, objptr
1ca04     00 58 01 FF 
1ca08     00 FA 45 F5 | 	or	result1, ##45088768
1ca0c     43 00 00 FF 
1ca10     FC E4 05 F1 | 	add	objptr, ##34556
1ca14     F2 FA 61 FC | 	wrlong	result1, objptr
1ca18     43 00 00 FF 
1ca1c     FC E4 85 F1 | 	sub	objptr, ##34556
1ca20     F2 FA 01 F6 | 	mov	result1, objptr
1ca24     00 60 01 FF 
1ca28     00 FA 45 F5 | 	or	result1, ##46137344
1ca2c     43 00 00 FF 
1ca30     F8 E4 05 F1 | 	add	objptr, ##34552
1ca34     F2 FA 61 FC | 	wrlong	result1, objptr
1ca38     43 00 00 FF 
1ca3c     F8 E4 85 F1 | 	sub	objptr, ##34552
1ca40     F2 FA 01 F6 | 	mov	result1, objptr
1ca44     00 68 01 FF 
1ca48     00 FA 45 F5 | 	or	result1, ##47185920
1ca4c     43 00 00 FF 
1ca50     9C E4 05 F1 | 	add	objptr, ##34460
1ca54     F2 FA 61 FC | 	wrlong	result1, objptr
1ca58     43 00 00 FF 
1ca5c     9C E4 85 F1 | 	sub	objptr, ##34460
1ca60     F2 FA 01 F6 | 	mov	result1, objptr
1ca64     00 70 01 FF 
1ca68     00 FA 45 F5 | 	or	result1, ##48234496
1ca6c     43 00 00 FF 
1ca70     A0 E4 05 F1 | 	add	objptr, ##34464
1ca74     F2 FA 61 FC | 	wrlong	result1, objptr
1ca78     43 00 00 FF 
1ca7c     A0 E4 85 F1 | 	sub	objptr, ##34464
1ca80     F2 FA 01 F6 | 	mov	result1, objptr
1ca84     00 78 01 FF 
1ca88     00 FA 45 F5 | 	or	result1, ##49283072
1ca8c     43 00 00 FF 
1ca90     08 E5 05 F1 | 	add	objptr, ##34568
1ca94     F2 FA 61 FC | 	wrlong	result1, objptr
1ca98     43 00 00 FF 
1ca9c     08 E5 85 F1 | 	sub	objptr, ##34568
1caa0     F2 FA 01 F6 | 	mov	result1, objptr
1caa4     38 FA 25 F4 | 	bith	result1, #56
1caa8     43 00 00 FF 
1caac     B0 E5 05 F1 | 	add	objptr, ##34736
1cab0     F2 FA 61 FC | 	wrlong	result1, objptr
1cab4     43 00 00 FF 
1cab8     B0 E5 85 F1 | 	sub	objptr, ##34736
1cabc     F2 FA 01 F6 | 	mov	result1, objptr
1cac0     00 88 01 FF 
1cac4     00 FA 45 F5 | 	or	result1, ##51380224
1cac8     43 00 00 FF 
1cacc     C4 E5 05 F1 | 	add	objptr, ##34756
1cad0     F2 FA 61 FC | 	wrlong	result1, objptr
1cad4     43 00 00 FF 
1cad8     C4 E5 85 F1 | 	sub	objptr, ##34756
1cadc     F2 FA 01 F6 | 	mov	result1, objptr
1cae0     00 90 01 FF 
1cae4     00 FA 45 F5 | 	or	result1, ##52428800
1cae8     43 00 00 FF 
1caec     D0 E5 05 F1 | 	add	objptr, ##34768
1caf0     F2 FA 61 FC | 	wrlong	result1, objptr
1caf4     43 00 00 FF 
1caf8     D0 E5 85 F1 | 	sub	objptr, ##34768
1cafc     F2 FA 01 F6 | 	mov	result1, objptr
1cb00     00 98 01 FF 
1cb04     00 FA 45 F5 | 	or	result1, ##53477376
1cb08     43 00 00 FF 
1cb0c     D4 E5 05 F1 | 	add	objptr, ##34772
1cb10     F2 FA 61 FC | 	wrlong	result1, objptr
1cb14     43 00 00 FF 
1cb18     D4 E5 85 F1 | 	sub	objptr, ##34772
1cb1c     F2 FA 01 F6 | 	mov	result1, objptr
1cb20     00 A0 01 FF 
1cb24     00 FA 45 F5 | 	or	result1, ##54525952
1cb28     43 00 00 FF 
1cb2c     D8 E5 05 F1 | 	add	objptr, ##34776
1cb30     F2 FA 61 FC | 	wrlong	result1, objptr
1cb34     43 00 00 FF 
1cb38     D8 E5 85 F1 | 	sub	objptr, ##34776
1cb3c     F2 FA 01 F6 | 	mov	result1, objptr
1cb40     00 A8 01 FF 
1cb44     00 FA 45 F5 | 	or	result1, ##55574528
1cb48     43 00 00 FF 
1cb4c     DC E5 05 F1 | 	add	objptr, ##34780
1cb50     F2 FA 61 FC | 	wrlong	result1, objptr
1cb54     43 00 00 FF 
1cb58     DC E5 85 F1 | 	sub	objptr, ##34780
1cb5c     F2 FA 01 F6 | 	mov	result1, objptr
1cb60     00 B0 01 FF 
1cb64     00 FA 45 F5 | 	or	result1, ##56623104
1cb68     43 00 00 FF 
1cb6c     E0 E5 05 F1 | 	add	objptr, ##34784
1cb70     F2 FA 61 FC | 	wrlong	result1, objptr
1cb74     43 00 00 FF 
1cb78     E0 E5 85 F1 | 	sub	objptr, ##34784
1cb7c     F2 FA 01 F6 | 	mov	result1, objptr
1cb80     00 B8 01 FF 
1cb84     00 FA 45 F5 | 	or	result1, ##57671680
1cb88     43 00 00 FF 
1cb8c     E4 E5 05 F1 | 	add	objptr, ##34788
1cb90     F2 FA 61 FC | 	wrlong	result1, objptr
1cb94     43 00 00 FF 
1cb98     E4 E5 85 F1 | 	sub	objptr, ##34788
1cb9c     F2 FA 01 F6 | 	mov	result1, objptr
1cba0     94 FA 25 F4 | 	bith	result1, #148
1cba4     43 00 00 FF 
1cba8     AC E5 05 F1 | 	add	objptr, ##34732
1cbac     F2 FA 61 FC | 	wrlong	result1, objptr
1cbb0     43 00 00 FF 
1cbb4     AC E5 85 F1 | 	sub	objptr, ##34732
1cbb8     F2 FA 01 F6 | 	mov	result1, objptr
1cbbc     57 FA 25 F4 | 	bith	result1, #87
1cbc0     43 00 00 FF 
1cbc4     EC E5 05 F1 | 	add	objptr, ##34796
1cbc8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbcc     43 00 00 FF 
1cbd0     EC E5 85 F1 | 	sub	objptr, ##34796
1cbd4     F2 FA 01 F6 | 	mov	result1, objptr
1cbd8     00 C8 01 FF 
1cbdc     00 FA 45 F5 | 	or	result1, ##59768832
1cbe0     43 00 00 FF 
1cbe4     E8 E5 05 F1 | 	add	objptr, ##34792
1cbe8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbec     43 00 00 FF 
1cbf0     E8 E5 85 F1 | 	sub	objptr, ##34792
1cbf4     F2 FA 01 F6 | 	mov	result1, objptr
1cbf8     00 D0 01 FF 
1cbfc     00 FA 45 F5 | 	or	result1, ##60817408
1cc00     44 00 00 FF 
1cc04     00 E4 05 F1 | 	add	objptr, ##34816
1cc08     F2 FA 61 FC | 	wrlong	result1, objptr
1cc0c     44 00 00 FF 
1cc10     00 E4 85 F1 | 	sub	objptr, ##34816
1cc14     F2 FA 01 F6 | 	mov	result1, objptr
1cc18     00 D8 01 FF 
1cc1c     00 FA 45 F5 | 	or	result1, ##61865984
1cc20     44 00 00 FF 
1cc24     04 E4 05 F1 | 	add	objptr, ##34820
1cc28     F2 FA 61 FC | 	wrlong	result1, objptr
1cc2c     44 00 00 FF 
1cc30     04 E4 85 F1 | 	sub	objptr, ##34820
1cc34     F2 FA 01 F6 | 	mov	result1, objptr
1cc38     76 FA 25 F4 | 	bith	result1, #118
1cc3c     43 00 00 FF 
1cc40     F0 E5 05 F1 | 	add	objptr, ##34800
1cc44     F2 FA 61 FC | 	wrlong	result1, objptr
1cc48     43 00 00 FF 
1cc4c     F0 E5 85 F1 | 	sub	objptr, ##34800
1cc50     F2 FA 01 F6 | 	mov	result1, objptr
1cc54     00 E8 01 FF 
1cc58     00 FA 45 F5 | 	or	result1, ##63963136
1cc5c     43 00 00 FF 
1cc60     F4 E5 05 F1 | 	add	objptr, ##34804
1cc64     F2 FA 61 FC | 	wrlong	result1, objptr
1cc68     43 00 00 FF 
1cc6c     F4 E5 85 F1 | 	sub	objptr, ##34804
1cc70     F2 FA 01 F6 | 	mov	result1, objptr
1cc74     95 FA 25 F4 | 	bith	result1, #149
1cc78     43 00 00 FF 
1cc7c     F8 E5 05 F1 | 	add	objptr, ##34808
1cc80     F2 FA 61 FC | 	wrlong	result1, objptr
1cc84     43 00 00 FF 
1cc88     F8 E5 85 F1 | 	sub	objptr, ##34808
1cc8c     F2 FA 01 F6 | 	mov	result1, objptr
1cc90     B4 FA 25 F4 | 	bith	result1, #180
1cc94     43 00 00 FF 
1cc98     FC E5 05 F1 | 	add	objptr, ##34812
1cc9c     F2 FA 61 FC | 	wrlong	result1, objptr
1cca0     43 00 00 FF 
1cca4     FC E5 85 F1 | 	sub	objptr, ##34812
1cca8     F2 FA 01 F6 | 	mov	result1, objptr
1ccac     1A FA 25 F4 | 	bith	result1, #26
1ccb0     44 00 00 FF 
1ccb4     0C E4 05 F1 | 	add	objptr, ##34828
1ccb8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccbc     44 00 00 FF 
1ccc0     0C E4 85 F1 | 	sub	objptr, ##34828
1ccc4     F2 FA 01 F6 | 	mov	result1, objptr
1ccc8     00 08 02 FF 
1cccc     00 FA 45 F5 | 	or	result1, ##68157440
1ccd0     44 00 00 FF 
1ccd4     08 E4 05 F1 | 	add	objptr, ##34824
1ccd8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccdc     44 00 00 FF 
1cce0     08 E4 85 F1 | 	sub	objptr, ##34824
1cce4     F2 FA 01 F6 | 	mov	result1, objptr
1cce8     00 10 02 FF 
1ccec     00 FA 45 F5 | 	or	result1, ##69206016
1ccf0     44 00 00 FF 
1ccf4     18 E4 05 F1 | 	add	objptr, ##34840
1ccf8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccfc     44 00 00 FF 
1cd00     18 E4 85 F1 | 	sub	objptr, ##34840
1cd04     F2 FA 01 F6 | 	mov	result1, objptr
1cd08     00 18 02 FF 
1cd0c     00 FA 45 F5 | 	or	result1, ##70254592
1cd10     44 00 00 FF 
1cd14     14 E4 05 F1 | 	add	objptr, ##34836
1cd18     F2 FA 61 FC | 	wrlong	result1, objptr
1cd1c     44 00 00 FF 
1cd20     14 E4 85 F1 | 	sub	objptr, ##34836
1cd24     F2 FA 01 F6 | 	mov	result1, objptr
1cd28     00 20 02 FF 
1cd2c     00 FA 45 F5 | 	or	result1, ##71303168
1cd30     44 00 00 FF 
1cd34     10 E4 05 F1 | 	add	objptr, ##34832
1cd38     F2 FA 61 FC | 	wrlong	result1, objptr
1cd3c     44 00 00 FF 
1cd40     10 E4 85 F1 | 	sub	objptr, ##34832
1cd44     F2 FA 01 F6 | 	mov	result1, objptr
1cd48     00 28 02 FF 
1cd4c     00 FA 45 F5 | 	or	result1, ##72351744
1cd50     44 00 00 FF 
1cd54     1C E4 05 F1 | 	add	objptr, ##34844
1cd58     F2 FA 61 FC | 	wrlong	result1, objptr
1cd5c     44 00 00 FF 
1cd60     1C E4 85 F1 | 	sub	objptr, ##34844
1cd64     F2 FA 01 F6 | 	mov	result1, objptr
1cd68     00 30 02 FF 
1cd6c     00 FA 45 F5 | 	or	result1, ##73400320
1cd70     44 00 00 FF 
1cd74     20 E4 05 F1 | 	add	objptr, ##34848
1cd78     F2 FA 61 FC | 	wrlong	result1, objptr
1cd7c     44 00 00 FF 
1cd80     20 E4 85 F1 | 	sub	objptr, ##34848
1cd84     F2 FA 01 F6 | 	mov	result1, objptr
1cd88     00 38 02 FF 
1cd8c     00 FA 45 F5 | 	or	result1, ##74448896
1cd90     43 00 00 FF 
1cd94     B4 E4 05 F1 | 	add	objptr, ##34484
1cd98     F2 FA 61 FC | 	wrlong	result1, objptr
1cd9c     43 00 00 FF 
1cda0     B4 E4 85 F1 | 	sub	objptr, ##34484
1cda4     F2 FA 01 F6 | 	mov	result1, objptr
1cda8     00 40 02 FF 
1cdac     00 FA 45 F5 | 	or	result1, ##75497472
1cdb0     44 00 00 FF 
1cdb4     38 E4 05 F1 | 	add	objptr, ##34872
1cdb8     F2 FA 61 FC | 	wrlong	result1, objptr
1cdbc     44 00 00 FF 
1cdc0     38 E4 85 F1 | 	sub	objptr, ##34872
1cdc4     F2 FA 01 F6 | 	mov	result1, objptr
1cdc8     00 48 02 FF 
1cdcc     00 FA 45 F5 | 	or	result1, ##76546048
1cdd0     44 00 00 FF 
1cdd4     48 E4 05 F1 | 	add	objptr, ##34888
1cdd8     F2 FA 61 FC | 	wrlong	result1, objptr
1cddc     44 00 00 FF 
1cde0     48 E4 85 F1 | 	sub	objptr, ##34888
1cde4     F2 FA 01 F6 | 	mov	result1, objptr
1cde8     00 50 02 FF 
1cdec     00 FA 45 F5 | 	or	result1, ##77594624
1cdf0     44 00 00 FF 
1cdf4     4C E4 05 F1 | 	add	objptr, ##34892
1cdf8     F2 FA 61 FC | 	wrlong	result1, objptr
1cdfc     44 00 00 FF 
1ce00     4C E4 85 F1 | 	sub	objptr, ##34892
1ce04     F2 FA 01 F6 | 	mov	result1, objptr
1ce08     00 58 02 FF 
1ce0c     00 FA 45 F5 | 	or	result1, ##78643200
1ce10     44 00 00 FF 
1ce14     44 E4 05 F1 | 	add	objptr, ##34884
1ce18     F2 FA 61 FC | 	wrlong	result1, objptr
1ce1c     44 00 00 FF 
1ce20     44 E4 85 F1 | 	sub	objptr, ##34884
1ce24     F2 FA 01 F6 | 	mov	result1, objptr
1ce28     00 60 02 FF 
1ce2c     00 FA 45 F5 | 	or	result1, ##79691776
1ce30     44 00 00 FF 
1ce34     3C E4 05 F1 | 	add	objptr, ##34876
1ce38     F2 FA 61 FC | 	wrlong	result1, objptr
1ce3c     44 00 00 FF 
1ce40     3C E4 85 F1 | 	sub	objptr, ##34876
1ce44     F2 FA 01 F6 | 	mov	result1, objptr
1ce48     00 68 02 FF 
1ce4c     00 FA 45 F5 | 	or	result1, ##80740352
1ce50     44 00 00 FF 
1ce54     40 E4 05 F1 | 	add	objptr, ##34880
1ce58     F2 FA 61 FC | 	wrlong	result1, objptr
1ce5c     44 00 00 FF 
1ce60     40 E4 85 F1 | 	sub	objptr, ##34880
1ce64     F2 FA 01 F6 | 	mov	result1, objptr
1ce68     00 70 02 FF 
1ce6c     00 FA 45 F5 | 	or	result1, ##81788928
1ce70     44 00 00 FF 
1ce74     50 E4 05 F1 | 	add	objptr, ##34896
1ce78     F2 FA 61 FC | 	wrlong	result1, objptr
1ce7c     44 00 00 FF 
1ce80     50 E4 85 F1 | 	sub	objptr, ##34896
1ce84     F2 FA 01 F6 | 	mov	result1, objptr
1ce88     00 78 02 FF 
1ce8c     00 FA 45 F5 | 	or	result1, ##82837504
1ce90     44 00 00 FF 
1ce94     54 E4 05 F1 | 	add	objptr, ##34900
1ce98     F2 FA 61 FC | 	wrlong	result1, objptr
1ce9c     44 00 00 FF 
1cea0     54 E4 85 F1 | 	sub	objptr, ##34900
1cea4     F2 FA 01 F6 | 	mov	result1, objptr
1cea8     00 80 02 FF 
1ceac     00 FA 45 F5 | 	or	result1, ##83886080
1ceb0     44 00 00 FF 
1ceb4     58 E4 05 F1 | 	add	objptr, ##34904
1ceb8     F2 FA 61 FC | 	wrlong	result1, objptr
1cebc     44 00 00 FF 
1cec0     58 E4 85 F1 | 	sub	objptr, ##34904
1cec4     F2 FA 01 F6 | 	mov	result1, objptr
1cec8     00 88 02 FF 
1cecc     00 FA 45 F5 | 	or	result1, ##84934656
1ced0     44 00 00 FF 
1ced4     5C E4 05 F1 | 	add	objptr, ##34908
1ced8     F2 FA 61 FC | 	wrlong	result1, objptr
1cedc     44 00 00 FF 
1cee0     5C E4 85 F1 | 	sub	objptr, ##34908
1cee4     F2 FA 01 F6 | 	mov	result1, objptr
1cee8     00 90 02 FF 
1ceec     00 FA 45 F5 | 	or	result1, ##85983232
1cef0     44 00 00 FF 
1cef4     60 E4 05 F1 | 	add	objptr, ##34912
1cef8     F2 FA 61 FC | 	wrlong	result1, objptr
1cefc     44 00 00 FF 
1cf00     60 E4 85 F1 | 	sub	objptr, ##34912
1cf04     F2 FA 01 F6 | 	mov	result1, objptr
1cf08     00 98 02 FF 
1cf0c     00 FA 45 F5 | 	or	result1, ##87031808
1cf10     44 00 00 FF 
1cf14     64 E4 05 F1 | 	add	objptr, ##34916
1cf18     F2 FA 61 FC | 	wrlong	result1, objptr
1cf1c     44 00 00 FF 
1cf20     64 E4 85 F1 | 	sub	objptr, ##34916
1cf24     F2 FA 01 F6 | 	mov	result1, objptr
1cf28     00 A0 02 FF 
1cf2c     00 FA 45 F5 | 	or	result1, ##88080384
1cf30     44 00 00 FF 
1cf34     68 E4 05 F1 | 	add	objptr, ##34920
1cf38     F2 FA 61 FC | 	wrlong	result1, objptr
1cf3c     44 00 00 FF 
1cf40     68 E4 85 F1 | 	sub	objptr, ##34920
1cf44     F2 FA 01 F6 | 	mov	result1, objptr
1cf48     00 A8 02 FF 
1cf4c     00 FA 45 F5 | 	or	result1, ##89128960
1cf50     44 00 00 FF 
1cf54     6C E4 05 F1 | 	add	objptr, ##34924
1cf58     F2 FA 61 FC | 	wrlong	result1, objptr
1cf5c     44 00 00 FF 
1cf60     6C E4 85 F1 | 	sub	objptr, ##34924
1cf64     F2 FA 01 F6 | 	mov	result1, objptr
1cf68     00 B0 02 FF 
1cf6c     00 FA 45 F5 | 	or	result1, ##90177536
1cf70     44 00 00 FF 
1cf74     78 E4 05 F1 | 	add	objptr, ##34936
1cf78     F2 FA 61 FC | 	wrlong	result1, objptr
1cf7c     44 00 00 FF 
1cf80     78 E4 85 F1 | 	sub	objptr, ##34936
1cf84     F2 FA 01 F6 | 	mov	result1, objptr
1cf88     00 B8 02 FF 
1cf8c     00 FA 45 F5 | 	or	result1, ##91226112
1cf90     44 00 00 FF 
1cf94     70 E4 05 F1 | 	add	objptr, ##34928
1cf98     F2 FA 61 FC | 	wrlong	result1, objptr
1cf9c     44 00 00 FF 
1cfa0     70 E4 85 F1 | 	sub	objptr, ##34928
1cfa4     F2 FA 01 F6 | 	mov	result1, objptr
1cfa8     00 C0 02 FF 
1cfac     00 FA 45 F5 | 	or	result1, ##92274688
1cfb0     44 00 00 FF 
1cfb4     74 E4 05 F1 | 	add	objptr, ##34932
1cfb8     F2 FA 61 FC | 	wrlong	result1, objptr
1cfbc     44 00 00 FF 
1cfc0     74 E4 85 F1 | 	sub	objptr, ##34932
1cfc4     F2 FA 01 F6 | 	mov	result1, objptr
1cfc8     00 C8 02 FF 
1cfcc     00 FA 45 F5 | 	or	result1, ##93323264
1cfd0     44 00 00 FF 
1cfd4     7C E4 05 F1 | 	add	objptr, ##34940
1cfd8     F2 FA 61 FC | 	wrlong	result1, objptr
1cfdc     44 00 00 FF 
1cfe0     7C E4 85 F1 | 	sub	objptr, ##34940
1cfe4     F2 FA 01 F6 | 	mov	result1, objptr
1cfe8     00 D0 02 FF 
1cfec     00 FA 45 F5 | 	or	result1, ##94371840
1cff0     44 00 00 FF 
1cff4     24 E4 05 F1 | 	add	objptr, ##34852
1cff8     F2 FA 61 FC | 	wrlong	result1, objptr
1cffc     44 00 00 FF 
1d000     24 E4 85 F1 | 	sub	objptr, ##34852
1d004     F2 FA 01 F6 | 	mov	result1, objptr
1d008     00 D8 02 FF 
1d00c     00 FA 45 F5 | 	or	result1, ##95420416
1d010     44 00 00 FF 
1d014     2C E4 05 F1 | 	add	objptr, ##34860
1d018     F2 FA 61 FC | 	wrlong	result1, objptr
1d01c     44 00 00 FF 
1d020     2C E4 85 F1 | 	sub	objptr, ##34860
1d024     F2 FA 01 F6 | 	mov	result1, objptr
1d028     00 E0 02 FF 
1d02c     00 FA 45 F5 | 	or	result1, ##96468992
1d030     44 00 00 FF 
1d034     30 E4 05 F1 | 	add	objptr, ##34864
1d038     F2 FA 61 FC | 	wrlong	result1, objptr
1d03c     44 00 00 FF 
1d040     30 E4 85 F1 | 	sub	objptr, ##34864
1d044     F2 FA 01 F6 | 	mov	result1, objptr
1d048     00 E8 02 FF 
1d04c     00 FA 45 F5 | 	or	result1, ##97517568
1d050     44 00 00 FF 
1d054     80 E4 05 F1 | 	add	objptr, ##34944
1d058     F2 FA 61 FC | 	wrlong	result1, objptr
1d05c     44 00 00 FF 
1d060     80 E4 85 F1 | 	sub	objptr, ##34944
1d064     F2 FA 01 F6 | 	mov	result1, objptr
1d068     00 F0 02 FF 
1d06c     00 FA 45 F5 | 	or	result1, ##98566144
1d070     44 00 00 FF 
1d074     84 E4 05 F1 | 	add	objptr, ##34948
1d078     F2 FA 61 FC | 	wrlong	result1, objptr
1d07c     44 00 00 FF 
1d080     84 E4 85 F1 | 	sub	objptr, ##34948
1d084     F2 FA 01 F6 | 	mov	result1, objptr
1d088     00 F8 02 FF 
1d08c     00 FA 45 F5 | 	or	result1, ##99614720
1d090     44 00 00 FF 
1d094     88 E4 05 F1 | 	add	objptr, ##34952
1d098     F2 FA 61 FC | 	wrlong	result1, objptr
1d09c     44 00 00 FF 
1d0a0     88 E4 85 F1 | 	sub	objptr, ##34952
1d0a4     F2 FA 01 F6 | 	mov	result1, objptr
1d0a8     39 FA 25 F4 | 	bith	result1, #57
1d0ac     44 00 00 FF 
1d0b0     34 E4 05 F1 | 	add	objptr, ##34868
1d0b4     F2 FA 61 FC | 	wrlong	result1, objptr
1d0b8     44 00 00 FF 
1d0bc     34 E4 85 F1 | 	sub	objptr, ##34868
1d0c0     F2 FA 01 F6 | 	mov	result1, objptr
1d0c4     00 08 03 FF 
1d0c8     00 FA 45 F5 | 	or	result1, ##101711872
1d0cc     44 00 00 FF 
1d0d0     98 E4 05 F1 | 	add	objptr, ##34968
1d0d4     F2 FA 61 FC | 	wrlong	result1, objptr
1d0d8     44 00 00 FF 
1d0dc     98 E4 85 F1 | 	sub	objptr, ##34968
1d0e0     F2 FA 01 F6 | 	mov	result1, objptr
1d0e4     00 10 03 FF 
1d0e8     00 FA 45 F5 | 	or	result1, ##102760448
1d0ec     44 00 00 FF 
1d0f0     A0 E4 05 F1 | 	add	objptr, ##34976
1d0f4     F2 FA 61 FC | 	wrlong	result1, objptr
1d0f8     44 00 00 FF 
1d0fc     A0 E4 85 F1 | 	sub	objptr, ##34976
1d100     F2 FA 01 F6 | 	mov	result1, objptr
1d104     00 18 03 FF 
1d108     00 FA 45 F5 | 	or	result1, ##103809024
1d10c     44 00 00 FF 
1d110     94 E4 05 F1 | 	add	objptr, ##34964
1d114     F2 FA 61 FC | 	wrlong	result1, objptr
1d118     44 00 00 FF 
1d11c     94 E4 85 F1 | 	sub	objptr, ##34964
1d120     F2 FA 01 F6 | 	mov	result1, objptr
1d124     00 20 03 FF 
1d128     00 FA 45 F5 | 	or	result1, ##104857600
1d12c     44 00 00 FF 
1d130     90 E4 05 F1 | 	add	objptr, ##34960
1d134     F2 FA 61 FC | 	wrlong	result1, objptr
1d138     44 00 00 FF 
1d13c     90 E4 85 F1 | 	sub	objptr, ##34960
1d140     F2 FA 01 F6 | 	mov	result1, objptr
1d144     00 28 03 FF 
1d148     00 FA 45 F5 | 	or	result1, ##105906176
1d14c     44 00 00 FF 
1d150     8C E4 05 F1 | 	add	objptr, ##34956
1d154     F2 FA 61 FC | 	wrlong	result1, objptr
1d158     44 00 00 FF 
1d15c     8C E4 85 F1 | 	sub	objptr, ##34956
1d160     F2 FA 01 F6 | 	mov	result1, objptr
1d164     00 30 03 FF 
1d168     00 FA 45 F5 | 	or	result1, ##106954752
1d16c     44 00 00 FF 
1d170     9C E4 05 F1 | 	add	objptr, ##34972
1d174     F2 FA 61 FC | 	wrlong	result1, objptr
1d178     44 00 00 FF 
1d17c     9C E4 85 F1 | 	sub	objptr, ##34972
1d180     F2 FA 01 F6 | 	mov	result1, objptr
1d184     00 38 03 FF 
1d188     00 FA 45 F5 | 	or	result1, ##108003328
1d18c     44 00 00 FF 
1d190     A4 E4 05 F1 | 	add	objptr, ##34980
1d194     F2 FA 61 FC | 	wrlong	result1, objptr
1d198     44 00 00 FF 
1d19c     A4 E4 85 F1 | 	sub	objptr, ##34980
1d1a0     F2 FA 01 F6 | 	mov	result1, objptr
1d1a4     00 40 03 FF 
1d1a8     00 FA 45 F5 | 	or	result1, ##109051904
1d1ac     44 00 00 FF 
1d1b0     A8 E4 05 F1 | 	add	objptr, ##34984
1d1b4     F2 FA 61 FC | 	wrlong	result1, objptr
1d1b8     44 00 00 FF 
1d1bc     A8 E4 85 F1 | 	sub	objptr, ##34984
1d1c0     F2 FA 01 F6 | 	mov	result1, objptr
1d1c4     00 48 03 FF 
1d1c8     00 FA 45 F5 | 	or	result1, ##110100480
1d1cc     44 00 00 FF 
1d1d0     AC E4 05 F1 | 	add	objptr, ##34988
1d1d4     F2 FA 61 FC | 	wrlong	result1, objptr
1d1d8     44 00 00 FF 
1d1dc     AC E4 85 F1 | 	sub	objptr, ##34988
1d1e0     F2 FA 01 F6 | 	mov	result1, objptr
1d1e4     00 50 03 FF 
1d1e8     00 FA 45 F5 | 	or	result1, ##111149056
1d1ec     44 00 00 FF 
1d1f0     B4 E4 05 F1 | 	add	objptr, ##34996
1d1f4     F2 FA 61 FC | 	wrlong	result1, objptr
1d1f8     44 00 00 FF 
1d1fc     B4 E4 85 F1 | 	sub	objptr, ##34996
1d200     F2 FA 01 F6 | 	mov	result1, objptr
1d204     00 58 03 FF 
1d208     00 FA 45 F5 | 	or	result1, ##112197632
1d20c     44 00 00 FF 
1d210     B8 E4 05 F1 | 	add	objptr, ##35000
1d214     F2 FA 61 FC | 	wrlong	result1, objptr
1d218     44 00 00 FF 
1d21c     B8 E4 85 F1 | 	sub	objptr, ##35000
1d220     F2 FA 01 F6 | 	mov	result1, objptr
1d224     00 60 03 FF 
1d228     00 FA 45 F5 | 	or	result1, ##113246208
1d22c     44 00 00 FF 
1d230     BC E4 05 F1 | 	add	objptr, ##35004
1d234     F2 FA 61 FC | 	wrlong	result1, objptr
1d238     44 00 00 FF 
1d23c     BC E4 85 F1 | 	sub	objptr, ##35004
1d240     F2 FA 01 F6 | 	mov	result1, objptr
1d244     00 68 03 FF 
1d248     00 FA 45 F5 | 	or	result1, ##114294784
1d24c     44 00 00 FF 
1d250     C0 E4 05 F1 | 	add	objptr, ##35008
1d254     F2 FA 61 FC | 	wrlong	result1, objptr
1d258     44 00 00 FF 
1d25c     C0 E4 85 F1 | 	sub	objptr, ##35008
1d260     F2 FA 01 F6 | 	mov	result1, objptr
1d264     00 70 03 FF 
1d268     00 FA 45 F5 | 	or	result1, ##115343360
1d26c     44 00 00 FF 
1d270     C4 E4 05 F1 | 	add	objptr, ##35012
1d274     F2 FA 61 FC | 	wrlong	result1, objptr
1d278     44 00 00 FF 
1d27c     C4 E4 85 F1 | 	sub	objptr, ##35012
1d280     F2 FA 01 F6 | 	mov	result1, objptr
1d284     00 78 03 FF 
1d288     00 FA 45 F5 | 	or	result1, ##116391936
1d28c     44 00 00 FF 
1d290     C8 E4 05 F1 | 	add	objptr, ##35016
1d294     F2 FA 61 FC | 	wrlong	result1, objptr
1d298     44 00 00 FF 
1d29c     C8 E4 85 F1 | 	sub	objptr, ##35016
1d2a0     F2 FA 01 F6 | 	mov	result1, objptr
1d2a4     00 08 01 FF 
1d2a8     00 FA 45 F5 | 	or	result1, ##34603008
1d2ac     44 00 00 FF 
1d2b0     CC E4 05 F1 | 	add	objptr, ##35020
1d2b4     F2 FA 61 FC | 	wrlong	result1, objptr
1d2b8     44 00 00 FF 
1d2bc     CC E4 85 F1 | 	sub	objptr, ##35020
1d2c0     F2 FA 01 F6 | 	mov	result1, objptr
1d2c4     58 FA 25 F4 | 	bith	result1, #88
1d2c8     44 00 00 FF 
1d2cc     D0 E4 05 F1 | 	add	objptr, ##35024
1d2d0     F2 FA 61 FC | 	wrlong	result1, objptr
1d2d4     44 00 00 FF 
1d2d8     D0 E4 85 F1 | 	sub	objptr, ##35024
1d2dc     F2 FA 01 F6 | 	mov	result1, objptr
1d2e0     00 88 03 FF 
1d2e4     00 FA 45 F5 | 	or	result1, ##118489088
1d2e8     44 00 00 FF 
1d2ec     B0 E4 05 F1 | 	add	objptr, ##34992
1d2f0     F2 FA 61 FC | 	wrlong	result1, objptr
1d2f4     44 00 00 FF 
1d2f8     B0 E4 85 F1 | 	sub	objptr, ##34992
1d2fc     F2 FA 01 F6 | 	mov	result1, objptr
1d300     00 90 03 FF 
1d304     00 FA 45 F5 | 	or	result1, ##119537664
1d308     43 00 00 FF 
1d30c     A8 E4 05 F1 | 	add	objptr, ##34472
1d310     F2 FA 61 FC | 	wrlong	result1, objptr
1d314     43 00 00 FF 
1d318     A8 E4 85 F1 | 	sub	objptr, ##34472
1d31c     F2 FA 01 F6 | 	mov	result1, objptr
1d320     00 98 03 FF 
1d324     00 FA 45 F5 | 	or	result1, ##120586240
1d328     44 00 00 FF 
1d32c     D4 E4 05 F1 | 	add	objptr, ##35028
1d330     F2 FA 61 FC | 	wrlong	result1, objptr
1d334     44 00 00 FF 
1d338     D4 E4 85 F1 | 	sub	objptr, ##35028
1d33c     F2 FA 01 F6 | 	mov	result1, objptr
1d340     00 A0 03 FF 
1d344     00 FA 45 F5 | 	or	result1, ##121634816
1d348     44 00 00 FF 
1d34c     D8 E4 05 F1 | 	add	objptr, ##35032
1d350     F2 FA 61 FC | 	wrlong	result1, objptr
1d354     44 00 00 FF 
1d358     D8 E4 85 F1 | 	sub	objptr, ##35032
1d35c     F2 FA 01 F6 | 	mov	result1, objptr
1d360     00 A8 03 FF 
1d364     00 FA 45 F5 | 	or	result1, ##122683392
1d368     44 00 00 FF 
1d36c     EC E4 05 F1 | 	add	objptr, ##35052
1d370     F2 FA 61 FC | 	wrlong	result1, objptr
1d374     44 00 00 FF 
1d378     EC E4 85 F1 | 	sub	objptr, ##35052
1d37c     F2 FA 01 F6 | 	mov	result1, objptr
1d380     00 B0 03 FF 
1d384     00 FA 45 F5 | 	or	result1, ##123731968
1d388     44 00 00 FF 
1d38c     E8 E4 05 F1 | 	add	objptr, ##35048
1d390     F2 FA 61 FC | 	wrlong	result1, objptr
1d394     44 00 00 FF 
1d398     E8 E4 85 F1 | 	sub	objptr, ##35048
1d39c     F2 FA 01 F6 | 	mov	result1, objptr
1d3a0     00 B8 03 FF 
1d3a4     00 FA 45 F5 | 	or	result1, ##124780544
1d3a8     44 00 00 FF 
1d3ac     E0 E4 05 F1 | 	add	objptr, ##35040
1d3b0     F2 FA 61 FC | 	wrlong	result1, objptr
1d3b4     44 00 00 FF 
1d3b8     E0 E4 85 F1 | 	sub	objptr, ##35040
1d3bc     F2 FA 01 F6 | 	mov	result1, objptr
1d3c0     77 FA 25 F4 | 	bith	result1, #119
1d3c4     44 00 00 FF 
1d3c8     DC E4 05 F1 | 	add	objptr, ##35036
1d3cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d3d0     44 00 00 FF 
1d3d4     DC E4 85 F1 | 	sub	objptr, ##35036
1d3d8     F2 FA 01 F6 | 	mov	result1, objptr
1d3dc     00 C8 03 FF 
1d3e0     00 FA 45 F5 | 	or	result1, ##126877696
1d3e4     44 00 00 FF 
1d3e8     FC E4 05 F1 | 	add	objptr, ##35068
1d3ec     F2 FA 61 FC | 	wrlong	result1, objptr
1d3f0     44 00 00 FF 
1d3f4     FC E4 85 F1 | 	sub	objptr, ##35068
1d3f8     F2 FA 01 F6 | 	mov	result1, objptr
1d3fc     00 D0 03 FF 
1d400     00 FA 45 F5 | 	or	result1, ##127926272
1d404     44 00 00 FF 
1d408     F0 E4 05 F1 | 	add	objptr, ##35056
1d40c     F2 FA 61 FC | 	wrlong	result1, objptr
1d410     44 00 00 FF 
1d414     F0 E4 85 F1 | 	sub	objptr, ##35056
1d418     F2 FA 01 F6 | 	mov	result1, objptr
1d41c     00 D8 03 FF 
1d420     00 FA 45 F5 | 	or	result1, ##128974848
1d424     44 00 00 FF 
1d428     F4 E4 05 F1 | 	add	objptr, ##35060
1d42c     F2 FA 61 FC | 	wrlong	result1, objptr
1d430     44 00 00 FF 
1d434     F4 E4 85 F1 | 	sub	objptr, ##35060
1d438     F2 FA 01 F6 | 	mov	result1, objptr
1d43c     96 FA 25 F4 | 	bith	result1, #150
1d440     44 00 00 FF 
1d444     F8 E4 05 F1 | 	add	objptr, ##35064
1d448     F2 FA 61 FC | 	wrlong	result1, objptr
1d44c     44 00 00 FF 
1d450     F8 E4 85 F1 | 	sub	objptr, ##35064
1d454     F2 FA 01 F6 | 	mov	result1, objptr
1d458     00 E8 03 FF 
1d45c     00 FA 45 F5 | 	or	result1, ##131072000
1d460     44 00 00 FF 
1d464     00 E5 05 F1 | 	add	objptr, ##35072
1d468     F2 FA 61 FC | 	wrlong	result1, objptr
1d46c     44 00 00 FF 
1d470     00 E5 85 F1 | 	sub	objptr, ##35072
1d474     F2 FA 01 F6 | 	mov	result1, objptr
1d478     B5 FA 25 F4 | 	bith	result1, #181
1d47c     44 00 00 FF 
1d480     04 E5 05 F1 | 	add	objptr, ##35076
1d484     F2 FA 61 FC | 	wrlong	result1, objptr
1d488     44 00 00 FF 
1d48c     04 E5 85 F1 | 	sub	objptr, ##35076
1d490     F2 FA 01 F6 | 	mov	result1, objptr
1d494     D4 FA 25 F4 | 	bith	result1, #212
1d498     44 00 00 FF 
1d49c     08 E5 05 F1 | 	add	objptr, ##35080
1d4a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d4a4     44 00 00 FF 
1d4a8     08 E5 85 F1 | 	sub	objptr, ##35080
1d4ac     F2 FA 01 F6 | 	mov	result1, objptr
1d4b0     1B FA 25 F4 | 	bith	result1, #27
1d4b4     44 00 00 FF 
1d4b8     0C E5 05 F1 | 	add	objptr, ##35084
1d4bc     F2 FA 61 FC | 	wrlong	result1, objptr
1d4c0     44 00 00 FF 
1d4c4     0C E5 85 F1 | 	sub	objptr, ##35084
1d4c8     F2 FA 01 F6 | 	mov	result1, objptr
1d4cc     00 08 04 FF 
1d4d0     00 FA 45 F5 | 	or	result1, ##135266304
1d4d4     44 00 00 FF 
1d4d8     10 E5 05 F1 | 	add	objptr, ##35088
1d4dc     F2 FA 61 FC | 	wrlong	result1, objptr
1d4e0     44 00 00 FF 
1d4e4     10 E5 85 F1 | 	sub	objptr, ##35088
1d4e8     F2 FA 01 F6 | 	mov	result1, objptr
1d4ec     00 10 04 FF 
1d4f0     00 FA 45 F5 | 	or	result1, ##136314880
1d4f4     44 00 00 FF 
1d4f8     14 E5 05 F1 | 	add	objptr, ##35092
1d4fc     F2 FA 61 FC | 	wrlong	result1, objptr
1d500     44 00 00 FF 
1d504     14 E5 85 F1 | 	sub	objptr, ##35092
1d508     F2 FA 01 F6 | 	mov	result1, objptr
1d50c     00 18 04 FF 
1d510     00 FA 45 F5 | 	or	result1, ##137363456
1d514     44 00 00 FF 
1d518     1C E5 05 F1 | 	add	objptr, ##35100
1d51c     F2 FA 61 FC | 	wrlong	result1, objptr
1d520     44 00 00 FF 
1d524     1C E5 85 F1 | 	sub	objptr, ##35100
1d528     F2 FA 01 F6 | 	mov	result1, objptr
1d52c     00 20 04 FF 
1d530     00 FA 45 F5 | 	or	result1, ##138412032
1d534     44 00 00 FF 
1d538     20 E5 05 F1 | 	add	objptr, ##35104
1d53c     F2 FA 61 FC | 	wrlong	result1, objptr
1d540     44 00 00 FF 
1d544     20 E5 85 F1 | 	sub	objptr, ##35104
1d548     F2 FA 01 F6 | 	mov	result1, objptr
1d54c     00 28 04 FF 
1d550     00 FA 45 F5 | 	or	result1, ##139460608
1d554     44 00 00 FF 
1d558     24 E5 05 F1 | 	add	objptr, ##35108
1d55c     F2 FA 61 FC | 	wrlong	result1, objptr
1d560     44 00 00 FF 
1d564     24 E5 85 F1 | 	sub	objptr, ##35108
1d568     F2 FA 01 F6 | 	mov	result1, objptr
1d56c     00 30 04 FF 
1d570     00 FA 45 F5 | 	or	result1, ##140509184
1d574     44 00 00 FF 
1d578     18 E5 05 F1 | 	add	objptr, ##35096
1d57c     F2 FA 61 FC | 	wrlong	result1, objptr
1d580     44 00 00 FF 
1d584     18 E5 85 F1 | 	sub	objptr, ##35096
1d588     F2 FA 01 F6 | 	mov	result1, objptr
1d58c     00 38 04 FF 
1d590     00 FA 45 F5 | 	or	result1, ##141557760
1d594     44 00 00 FF 
1d598     28 E5 05 F1 | 	add	objptr, ##35112
1d59c     F2 FA 61 FC | 	wrlong	result1, objptr
1d5a0     44 00 00 FF 
1d5a4     28 E5 85 F1 | 	sub	objptr, ##35112
1d5a8     F2 FA 01 F6 | 	mov	result1, objptr
1d5ac     00 40 04 FF 
1d5b0     00 FA 45 F5 | 	or	result1, ##142606336
1d5b4     44 00 00 FF 
1d5b8     5C E5 05 F1 | 	add	objptr, ##35164
1d5bc     F2 FA 61 FC | 	wrlong	result1, objptr
1d5c0     44 00 00 FF 
1d5c4     5C E5 85 F1 | 	sub	objptr, ##35164
1d5c8     F2 FA 01 F6 | 	mov	result1, objptr
1d5cc     00 48 04 FF 
1d5d0     00 FA 45 F5 | 	or	result1, ##143654912
1d5d4     44 00 00 FF 
1d5d8     54 E5 05 F1 | 	add	objptr, ##35156
1d5dc     F2 FA 61 FC | 	wrlong	result1, objptr
1d5e0     44 00 00 FF 
1d5e4     54 E5 85 F1 | 	sub	objptr, ##35156
1d5e8     F2 FA 01 F6 | 	mov	result1, objptr
1d5ec     00 50 04 FF 
1d5f0     00 FA 45 F5 | 	or	result1, ##144703488
1d5f4     44 00 00 FF 
1d5f8     2C E5 05 F1 | 	add	objptr, ##35116
1d5fc     F2 FA 61 FC | 	wrlong	result1, objptr
1d600     44 00 00 FF 
1d604     2C E5 85 F1 | 	sub	objptr, ##35116
1d608     F2 FA 01 F6 | 	mov	result1, objptr
1d60c     00 58 04 FF 
1d610     00 FA 45 F5 | 	or	result1, ##145752064
1d614     44 00 00 FF 
1d618     30 E5 05 F1 | 	add	objptr, ##35120
1d61c     F2 FA 61 FC | 	wrlong	result1, objptr
1d620     44 00 00 FF 
1d624     30 E5 85 F1 | 	sub	objptr, ##35120
1d628     F2 FA 01 F6 | 	mov	result1, objptr
1d62c     00 60 04 FF 
1d630     00 FA 45 F5 | 	or	result1, ##146800640
1d634     44 00 00 FF 
1d638     4C E5 05 F1 | 	add	objptr, ##35148
1d63c     F2 FA 61 FC | 	wrlong	result1, objptr
1d640     44 00 00 FF 
1d644     4C E5 85 F1 | 	sub	objptr, ##35148
1d648     F2 FA 01 F6 | 	mov	result1, objptr
1d64c     00 68 04 FF 
1d650     00 FA 45 F5 | 	or	result1, ##147849216
1d654     44 00 00 FF 
1d658     50 E5 05 F1 | 	add	objptr, ##35152
1d65c     F2 FA 61 FC | 	wrlong	result1, objptr
1d660     44 00 00 FF 
1d664     50 E5 85 F1 | 	sub	objptr, ##35152
1d668     F2 FA 01 F6 | 	mov	result1, objptr
1d66c     00 70 04 FF 
1d670     00 FA 45 F5 | 	or	result1, ##148897792
1d674     44 00 00 FF 
1d678     6C E5 05 F1 | 	add	objptr, ##35180
1d67c     F2 FA 61 FC | 	wrlong	result1, objptr
1d680     44 00 00 FF 
1d684     6C E5 85 F1 | 	sub	objptr, ##35180
1d688     F2 FA 01 F6 | 	mov	result1, objptr
1d68c     00 78 04 FF 
1d690     00 FA 45 F5 | 	or	result1, ##149946368
1d694     44 00 00 FF 
1d698     68 E5 05 F1 | 	add	objptr, ##35176
1d69c     F2 FA 61 FC | 	wrlong	result1, objptr
1d6a0     44 00 00 FF 
1d6a4     68 E5 85 F1 | 	sub	objptr, ##35176
1d6a8     F2 FA 01 F6 | 	mov	result1, objptr
1d6ac     00 80 04 FF 
1d6b0     00 FA 45 F5 | 	or	result1, ##150994944
1d6b4     44 00 00 FF 
1d6b8     78 E5 05 F1 | 	add	objptr, ##35192
1d6bc     F2 FA 61 FC | 	wrlong	result1, objptr
1d6c0     44 00 00 FF 
1d6c4     78 E5 85 F1 | 	sub	objptr, ##35192
1d6c8     F2 FA 01 F6 | 	mov	result1, objptr
1d6cc     00 88 04 FF 
1d6d0     00 FA 45 F5 | 	or	result1, ##152043520
1d6d4     44 00 00 FF 
1d6d8     44 E5 05 F1 | 	add	objptr, ##35140
1d6dc     F2 FA 61 FC | 	wrlong	result1, objptr
1d6e0     44 00 00 FF 
1d6e4     44 E5 85 F1 | 	sub	objptr, ##35140
1d6e8     F2 FA 01 F6 | 	mov	result1, objptr
1d6ec     00 90 04 FF 
1d6f0     00 FA 45 F5 | 	or	result1, ##153092096
1d6f4     44 00 00 FF 
1d6f8     74 E5 05 F1 | 	add	objptr, ##35188
1d6fc     F2 FA 61 FC | 	wrlong	result1, objptr
1d700     44 00 00 FF 
1d704     74 E5 85 F1 | 	sub	objptr, ##35188
1d708                 | _init_commands_ret
1d708     2D 00 64 FD | 	ret
1d70c                 | 
1d70c                 | ' 
1d70c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1d70c                 | ' 
1d70c                 | ' sub init_audio
1d70c                 | _init_audio
1d70c     06 4A 05 F6 | 	mov	COUNT_, #6
1d710     A8 00 A0 FD | 	call	#pushregs_
1d714     00 C0 1F FF 
1d718     00 26 06 F6 | 	mov	local01, ##1065353216
1d71c                 | ' 
1d71c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1d71c     00 28 06 F6 | 	mov	local02, #0
1d720                 | LR__2340
1d720     14 2B 02 F6 | 	mov	local03, local02
1d724     01 2A 66 F0 | 	shl	local03, #1
1d728     58 7F 23 FF 
1d72c     00 2C 06 F6 | 	mov	local04, ##1191096320
1d730     14 13 52 F6 | 	abs	arg01, local02 wc
1d734     1F 2E C6 C9 |  if_b	decod	local05, #31
1d738     00 2E 06 36 |  if_ae	mov	local05, #0
1d73c     8C 6E B0 FD | 	call	#__system___float_fromuns
1d740     17 FB 61 F5 | 	xor	result1, local05
1d744     FD 12 02 F6 | 	mov	arg01, result1
1d748     87 24 20 FF 
1d74c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1d750     7C 72 B0 FD | 	call	#__system___float_mul
1d754     FD 12 02 F6 | 	mov	arg01, result1
1d758     00 00 22 FF 
1d75c     00 14 06 F6 | 	mov	arg02, ##1140850688
1d760     70 74 B0 FD | 	call	#__system___float_div
1d764     FD 12 02 F6 | 	mov	arg01, result1
1d768     C4 7B B0 FD | 	call	#__system____builtin_sinf
1d76c     FD 14 02 F6 | 	mov	arg02, result1
1d770     16 13 02 F6 | 	mov	arg01, local04
1d774     58 72 B0 FD | 	call	#__system___float_mul
1d778     FD 12 02 F6 | 	mov	arg01, result1
1d77c     01 14 06 F6 | 	mov	arg02, #1
1d780     14 77 B0 FD | 	call	#__system___float_tointeger
1d784     FD 14 02 F6 | 	mov	arg02, result1
1d788     15 13 02 F6 | 	mov	arg01, local03
1d78c     38 0D B0 FD | 	call	#_psdpoke
1d790     01 28 06 F1 | 	add	local02, #1
1d794     02 00 00 FF 
1d798     00 28 56 F2 | 	cmps	local02, ##1024 wc
1d79c     80 FF 9F CD |  if_b	jmp	#LR__2340
1d7a0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1d7a0     00 28 06 F6 | 	mov	local02, #0
1d7a4                 | LR__2341
1d7a4     14 15 02 F6 | 	mov	arg02, local02
1d7a8     01 14 66 F0 | 	shl	arg02, #1
1d7ac     0B 12 C6 F9 | 	decod	arg01, #11
1d7b0     0A 13 02 F1 | 	add	arg01, arg02
1d7b4     14 2D 02 F6 | 	mov	local04, local02
1d7b8     07 2C 66 F0 | 	shl	local04, #7
1d7bc     14 2D 82 F1 | 	sub	local04, local02
1d7c0     C0 FF 7F FF 
1d7c4     00 15 06 F6 | 	mov	arg02, ##-32512
1d7c8     16 15 02 F1 | 	add	arg02, local04
1d7cc     F8 0C B0 FD | 	call	#_psdpoke
1d7d0     09 2C C6 F9 | 	decod	local04, #9
1d7d4     14 2D 02 F1 | 	add	local04, local02
1d7d8     01 2C 66 F0 | 	shl	local04, #1
1d7dc     0B 12 C6 F9 | 	decod	arg01, #11
1d7e0     16 13 02 F1 | 	add	arg01, local04
1d7e4     14 2F 02 F6 | 	mov	local05, local02
1d7e8     07 2E 66 F0 | 	shl	local05, #7
1d7ec     14 2F 82 F1 | 	sub	local05, local02
1d7f0     3F 00 00 FF 
1d7f4     00 15 06 F6 | 	mov	arg02, ##32512
1d7f8     17 15 82 F1 | 	sub	arg02, local05
1d7fc     C8 0C B0 FD | 	call	#_psdpoke
1d800     01 28 06 F1 | 	add	local02, #1
1d804     01 00 00 FF 
1d808     00 28 56 F2 | 	cmps	local02, ##512 wc
1d80c     94 FF 9F CD |  if_b	jmp	#LR__2341
1d810                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1d810     00 28 06 F6 | 	mov	local02, #0
1d814                 | LR__2342
1d814     14 2F 02 F6 | 	mov	local05, local02
1d818     01 2E 66 F0 | 	shl	local05, #1
1d81c     0C 12 C6 F9 | 	decod	arg01, #12
1d820     17 13 02 F1 | 	add	arg01, local05
1d824     14 2F 02 F6 | 	mov	local05, local02
1d828     06 2E 66 F0 | 	shl	local05, #6
1d82c     14 2F 82 F1 | 	sub	local05, local02
1d830     C1 FF 7F FF 
1d834     00 14 06 F6 | 	mov	arg02, ##-32256
1d838     17 15 02 F1 | 	add	arg02, local05
1d83c     88 0C B0 FD | 	call	#_psdpoke
1d840     01 28 06 F1 | 	add	local02, #1
1d844     02 00 00 FF 
1d848     00 28 56 F2 | 	cmps	local02, ##1024 wc
1d84c     C4 FF 9F CD |  if_b	jmp	#LR__2342
1d850                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1d850     00 28 06 F6 | 	mov	local02, #0
1d854                 | LR__2343
1d854     14 2F 02 F6 | 	mov	local05, local02
1d858     01 2E 66 F0 | 	shl	local05, #1
1d85c     0C 00 00 FF 
1d860     00 12 06 F6 | 	mov	arg01, ##6144
1d864     17 13 02 F1 | 	add	arg01, local05
1d868     C0 FF 7F FF 
1d86c     A8 14 06 F6 | 	mov	arg02, ##-32600
1d870     54 0C B0 FD | 	call	#_psdpoke
1d874     01 28 06 F1 | 	add	local02, #1
1d878     80 28 56 F2 | 	cmps	local02, #128 wc
1d87c     D4 FF 9F CD |  if_b	jmp	#LR__2343
1d880     80 28 06 F6 | 	mov	local02, #128
1d884                 | LR__2344
1d884     14 2F 02 F6 | 	mov	local05, local02
1d888     01 2E 66 F0 | 	shl	local05, #1
1d88c     0C 00 00 FF 
1d890     00 12 06 F6 | 	mov	arg01, ##6144
1d894     17 13 02 F1 | 	add	arg01, local05
1d898     3F 00 00 FF 
1d89c     58 15 06 F6 | 	mov	arg02, ##32600
1d8a0     24 0C B0 FD | 	call	#_psdpoke
1d8a4     01 28 06 F1 | 	add	local02, #1
1d8a8     02 00 00 FF 
1d8ac     00 28 16 F2 | 	cmp	local02, ##1024 wc
1d8b0     D0 FF 9F CD |  if_b	jmp	#LR__2344
1d8b4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1d8b4     00 28 06 F6 | 	mov	local02, #0
1d8b8                 | LR__2345
1d8b8     14 2F 02 F6 | 	mov	local05, local02
1d8bc     01 2E 66 F0 | 	shl	local05, #1
1d8c0     0D 12 C6 F9 | 	decod	arg01, #13
1d8c4     17 13 02 F1 | 	add	arg01, local05
1d8c8     C0 FF 7F FF 
1d8cc     A8 14 06 F6 | 	mov	arg02, ##-32600
1d8d0     F4 0B B0 FD | 	call	#_psdpoke
1d8d4     01 28 06 F1 | 	add	local02, #1
1d8d8     01 00 00 FF 
1d8dc     00 28 56 F2 | 	cmps	local02, ##512 wc
1d8e0     D4 FF 9F CD |  if_b	jmp	#LR__2345
1d8e4     09 28 C6 F9 | 	decod	local02, #9
1d8e8                 | LR__2346
1d8e8     14 2F 02 F6 | 	mov	local05, local02
1d8ec     01 2E 66 F0 | 	shl	local05, #1
1d8f0     0D 12 C6 F9 | 	decod	arg01, #13
1d8f4     17 13 02 F1 | 	add	arg01, local05
1d8f8     3F 00 00 FF 
1d8fc     58 15 06 F6 | 	mov	arg02, ##32600
1d900     C4 0B B0 FD | 	call	#_psdpoke
1d904     01 28 06 F1 | 	add	local02, #1
1d908     02 00 00 FF 
1d90c     00 28 16 F2 | 	cmp	local02, ##1024 wc
1d910     D4 FF 9F CD |  if_b	jmp	#LR__2346
1d914                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1d914     00 28 06 F6 | 	mov	local02, #0
1d918                 | LR__2347
1d918     14 2F 02 F6 | 	mov	local05, local02
1d91c     01 2E 66 F0 | 	shl	local05, #1
1d920     14 00 00 FF 
1d924     00 12 06 F6 | 	mov	arg01, ##10240
1d928     17 13 02 F1 | 	add	arg01, local05
1d92c     C0 FF 7F FF 
1d930     A8 14 06 F6 | 	mov	arg02, ##-32600
1d934     90 0B B0 FD | 	call	#_psdpoke
1d938     01 28 06 F1 | 	add	local02, #1
1d93c     00 29 56 F2 | 	cmps	local02, #256 wc
1d940     D4 FF 9F CD |  if_b	jmp	#LR__2347
1d944     00 29 06 F6 | 	mov	local02, #256
1d948                 | LR__2348
1d948     14 2F 02 F6 | 	mov	local05, local02
1d94c     01 2E 66 F0 | 	shl	local05, #1
1d950     14 00 00 FF 
1d954     00 12 06 F6 | 	mov	arg01, ##10240
1d958     17 13 02 F1 | 	add	arg01, local05
1d95c     3F 00 00 FF 
1d960     58 15 06 F6 | 	mov	arg02, ##32600
1d964     60 0B B0 FD | 	call	#_psdpoke
1d968     01 28 06 F1 | 	add	local02, #1
1d96c     02 00 00 FF 
1d970     00 28 16 F2 | 	cmp	local02, ##1024 wc
1d974     D0 FF 9F CD |  if_b	jmp	#LR__2348
1d978                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1d978     18 00 00 FF 
1d97c     00 28 06 F6 | 	mov	local02, ##12288
1d980                 | LR__2349
1d980     14 13 02 F6 | 	mov	arg01, local02
1d984     00 14 06 F6 | 	mov	arg02, #0
1d988     F4 0A B0 FD | 	call	#_pslpoke
1d98c     04 28 06 F1 | 	add	local02, #4
1d990     77 00 00 FF 
1d994     FD 29 56 F2 | 	cmps	local02, ##61437 wc
1d998     E4 FF 9F CD |  if_b	jmp	#LR__2349
1d99c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1d99c     00 28 06 F6 | 	mov	local02, #0
1d9a0                 | LR__2350
1d9a0     14 2F 02 F6 | 	mov	local05, local02
1d9a4     01 2E 66 F0 | 	shl	local05, #1
1d9a8     78 00 00 FF 
1d9ac     00 2A 06 F6 | 	mov	local03, ##61440
1d9b0     17 2B 02 F1 | 	add	local03, local05
1d9b4     12 00 00 FF 
1d9b8     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1d9bc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1d9c0     12 00 00 FF 
1d9c4     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1d9c8     10 12 06 F1 | 	add	arg01, #16
1d9cc     14 15 02 F6 | 	mov	arg02, local02
1d9d0     01 14 66 F0 | 	shl	arg02, #1
1d9d4     0A 13 02 F1 | 	add	arg01, arg02
1d9d8     09 15 E2 FA | 	rdword	arg02, arg01
1d9dc     15 13 02 F6 | 	mov	arg01, local03
1d9e0     E4 0A B0 FD | 	call	#_psdpoke
1d9e4     01 28 06 F1 | 	add	local02, #1
1d9e8     02 00 00 FF 
1d9ec     00 28 56 F2 | 	cmps	local02, ##1024 wc
1d9f0     AC FF 9F CD |  if_b	jmp	#LR__2350
1d9f4                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1d9f4     00 28 06 F6 | 	mov	local02, #0
1d9f8                 | LR__2351
1d9f8     14 2F 02 F6 | 	mov	local05, local02
1d9fc     01 2E 66 F0 | 	shl	local05, #1
1da00     7C 00 00 FF 
1da04     00 2A 06 F6 | 	mov	local03, ##63488
1da08     17 2B 02 F1 | 	add	local03, local05
1da0c     0E 00 00 FF 
1da10     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1da14     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1da18     0E 00 00 FF 
1da1c     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1da20     10 12 06 F1 | 	add	arg01, #16
1da24     14 15 02 F6 | 	mov	arg02, local02
1da28     01 14 66 F0 | 	shl	arg02, #1
1da2c     0A 13 02 F1 | 	add	arg01, arg02
1da30     09 15 E2 FA | 	rdword	arg02, arg01
1da34     15 13 02 F6 | 	mov	arg01, local03
1da38     8C 0A B0 FD | 	call	#_psdpoke
1da3c     01 28 06 F1 | 	add	local02, #1
1da40     02 00 00 FF 
1da44     00 28 56 F2 | 	cmps	local02, ##1024 wc
1da48     AC FF 9F CD |  if_b	jmp	#LR__2351
1da4c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1da4c     00 28 06 F6 | 	mov	local02, #0
1da50     0C 00 00 FF 
1da54     D8 E4 05 F1 | 	add	objptr, ##6360
1da58     97 18 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
1da5c                 | LR__2352
1da5c     14 2F 02 F6 | 	mov	local05, local02
1da60     01 2E 66 F0 | 	shl	local05, #1
1da64     F2 2E 02 F1 | 	add	local05, objptr
1da68     14 2B 02 F6 | 	mov	local03, local02
1da6c     08 2A 66 F0 | 	shl	local03, #8
1da70     7F 00 00 FF 
1da74     00 31 06 F6 | 	mov	local06, ##65280
1da78     15 31 82 F1 | 	sub	local06, local03
1da7c     17 31 52 FC | 	wrword	local06, local05
1da80     01 28 06 F1 | 	add	local02, #1
1da84     00 29 56 F2 | 	cmps	local02, #256 wc
1da88     D0 FF 9F CD |  if_b	jmp	#LR__2352
1da8c                 | LR__2353
1da8c     0C 00 00 FF 
1da90     D8 E4 85 F1 | 	sub	objptr, ##6360
1da94                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1da94     00 28 06 F6 | 	mov	local02, #0
1da98                 | LR__2354
1da98     14 2F 02 F6 | 	mov	local05, local02
1da9c     01 2E 66 F0 | 	shl	local05, #1
1daa0     0D 00 00 FF 
1daa4     D8 E4 05 F1 | 	add	objptr, ##6872
1daa8     F2 2E 02 F1 | 	add	local05, objptr
1daac     80 BF 23 FF 
1dab0     00 12 06 F6 | 	mov	arg01, ##1199505408
1dab4     13 15 02 F6 | 	mov	arg02, local01
1dab8     0D 00 00 FF 
1dabc     D8 E4 85 F1 | 	sub	objptr, ##6872
1dac0     0C 6F B0 FD | 	call	#__system___float_mul
1dac4     FD 12 02 F6 | 	mov	arg01, result1
1dac8     01 14 06 F6 | 	mov	arg02, #1
1dacc     C8 73 B0 FD | 	call	#__system___float_tointeger
1dad0     17 FB 51 FC | 	wrword	result1, local05
1dad4     13 13 02 F6 | 	mov	arg01, local01
1dad8     CC BC 1F FF 
1dadc     9A 15 06 F6 | 	mov	arg02, ##1064933786
1dae0     EC 6E B0 FD | 	call	#__system___float_mul
1dae4     FD 26 02 F6 | 	mov	local01, result1
1dae8     01 28 06 F1 | 	add	local02, #1
1daec     00 29 56 F2 | 	cmps	local02, #256 wc
1daf0     A4 FF 9F CD |  if_b	jmp	#LR__2354
1daf4     0E 00 00 FF 
1daf8     D6 E4 05 F1 | 	add	objptr, ##7382
1dafc     F2 00 58 FC | 	wrword	#0, objptr
1db00                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1db00     00 28 06 F6 | 	mov	local02, #0
1db04     02 E4 05 F1 | 	add	objptr, #2
1db08     97 10 48 FB | 	callpa	#(@LR__2356-@LR__2355)>>2,fcache_load_ptr_
1db0c                 | LR__2355
1db0c     14 2F 02 F6 | 	mov	local05, local02
1db10     01 2E 66 F0 | 	shl	local05, #1
1db14     F2 2E 02 F1 | 	add	local05, objptr
1db18     7F 00 80 FF 
1db1c     17 01 5A FC | 	wrword	##65280, local05
1db20     01 28 06 F1 | 	add	local02, #1
1db24     FF 28 56 F2 | 	cmps	local02, #255 wc
1db28     E0 FF 9F CD |  if_b	jmp	#LR__2355
1db2c                 | LR__2356
1db2c     FE E5 05 F1 | 	add	objptr, #510
1db30     F2 00 58 FC | 	wrword	#0, objptr
1db34                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1db34     00 28 06 F6 | 	mov	local02, #0
1db38     02 E4 05 F1 | 	add	objptr, #2
1db3c     97 52 48 FB | 	callpa	#(@LR__2361-@LR__2357)>>2,fcache_load_ptr_
1db40                 | LR__2357
1db40     14 2F 02 F6 | 	mov	local05, local02
1db44     01 2E 66 F0 | 	shl	local05, #1
1db48     F2 2E 02 F1 | 	add	local05, objptr
1db4c     14 31 02 F6 | 	mov	local06, local02
1db50     0C 30 66 F0 | 	shl	local06, #12
1db54     17 31 52 FC | 	wrword	local06, local05
1db58     01 28 06 F1 | 	add	local02, #1
1db5c     10 28 56 F2 | 	cmps	local02, #16 wc
1db60     DC FF 9F CD |  if_b	jmp	#LR__2357
1db64                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1db64     10 28 06 F6 | 	mov	local02, #16
1db68                 | LR__2358
1db68     14 2F 02 F6 | 	mov	local05, local02
1db6c     01 2E 66 F0 | 	shl	local05, #1
1db70     F2 2E 02 F1 | 	add	local05, objptr
1db74     7F 00 80 FF 
1db78     17 01 5A FC | 	wrword	##65280, local05
1db7c     01 28 06 F1 | 	add	local02, #1
1db80     F0 28 16 F2 | 	cmp	local02, #240 wc
1db84     E0 FF 9F CD |  if_b	jmp	#LR__2358
1db88                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1db88     F0 28 06 F6 | 	mov	local02, #240
1db8c                 | LR__2359
1db8c     14 2F 02 F6 | 	mov	local05, local02
1db90     01 2E 66 F0 | 	shl	local05, #1
1db94     F2 2E 02 F1 | 	add	local05, objptr
1db98     FF 2A 06 F6 | 	mov	local03, #255
1db9c     14 2B 82 F1 | 	sub	local03, local02
1dba0     0C 2A 66 F0 | 	shl	local03, #12
1dba4     17 2B 52 FC | 	wrword	local03, local05
1dba8     01 28 06 F1 | 	add	local02, #1
1dbac     00 29 16 F2 | 	cmp	local02, #256 wc
1dbb0     D8 FF 9F CD |  if_b	jmp	#LR__2359
1dbb4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1dbb4     00 28 06 F6 | 	mov	local02, #0
1dbb8     01 00 00 FF 
1dbbc     00 E4 05 F1 | 	add	objptr, ##512
1dbc0                 | LR__2360
1dbc0     14 2F 02 F6 | 	mov	local05, local02
1dbc4     01 2E 66 F0 | 	shl	local05, #1
1dbc8     F2 2E 02 F1 | 	add	local05, objptr
1dbcc     14 31 02 F6 | 	mov	local06, local02
1dbd0     08 30 66 F0 | 	shl	local06, #8
1dbd4     17 31 52 FC | 	wrword	local06, local05
1dbd8     01 28 06 F1 | 	add	local02, #1
1dbdc     00 29 56 F2 | 	cmps	local02, #256 wc
1dbe0     DC FF 9F CD |  if_b	jmp	#LR__2360
1dbe4                 | LR__2361
1dbe4     FE E5 05 F1 | 	add	objptr, #510
1dbe8     F2 00 58 FC | 	wrword	#0, objptr
1dbec                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1dbec     00 28 06 F6 | 	mov	local02, #0
1dbf0     02 E4 05 F1 | 	add	objptr, #2
1dbf4     97 6A 48 FB | 	callpa	#(@LR__2366-@LR__2362)>>2,fcache_load_ptr_
1dbf8                 | LR__2362
1dbf8     14 2F 02 F6 | 	mov	local05, local02
1dbfc     01 2E 66 F0 | 	shl	local05, #1
1dc00     F2 2E 02 F1 | 	add	local05, objptr
1dc04     14 31 02 F6 | 	mov	local06, local02
1dc08     04 30 66 F0 | 	shl	local06, #4
1dc0c     14 31 02 F1 | 	add	local06, local02
1dc10     04 30 66 F0 | 	shl	local06, #4
1dc14     17 31 52 FC | 	wrword	local06, local05
1dc18     01 28 06 F1 | 	add	local02, #1
1dc1c     F0 28 56 F2 | 	cmps	local02, #240 wc
1dc20     D4 FF 9F CD |  if_b	jmp	#LR__2362
1dc24     F0 28 06 F6 | 	mov	local02, #240
1dc28                 | LR__2363
1dc28     14 2F 02 F6 | 	mov	local05, local02
1dc2c     01 2E 66 F0 | 	shl	local05, #1
1dc30     F2 2E 02 F1 | 	add	local05, objptr
1dc34     FF 2A 06 F6 | 	mov	local03, #255
1dc38     14 2B 82 F1 | 	sub	local03, local02
1dc3c     0C 2A 66 F0 | 	shl	local03, #12
1dc40     17 2B 52 FC | 	wrword	local03, local05
1dc44     01 28 06 F1 | 	add	local02, #1
1dc48     00 29 16 F2 | 	cmp	local02, #256 wc
1dc4c     D8 FF 9F CD |  if_b	jmp	#LR__2363
1dc50                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1dc50     00 28 06 F6 | 	mov	local02, #0
1dc54     01 00 00 FF 
1dc58     00 E4 05 F1 | 	add	objptr, ##512
1dc5c                 | LR__2364
1dc5c     14 2F 02 F6 | 	mov	local05, local02
1dc60     01 2E 66 F0 | 	shl	local05, #1
1dc64     F2 2E 02 F1 | 	add	local05, objptr
1dc68     14 31 02 F6 | 	mov	local06, local02
1dc6c     09 30 66 F0 | 	shl	local06, #9
1dc70     17 31 52 FC | 	wrword	local06, local05
1dc74     FF 2E 06 F6 | 	mov	local05, #255
1dc78     14 2F 82 F1 | 	sub	local05, local02
1dc7c     01 2E 66 F0 | 	shl	local05, #1
1dc80     F2 2E 02 F1 | 	add	local05, objptr
1dc84     14 31 02 F6 | 	mov	local06, local02
1dc88     09 30 66 F0 | 	shl	local06, #9
1dc8c     17 31 52 FC | 	wrword	local06, local05
1dc90     01 28 06 F1 | 	add	local02, #1
1dc94     80 28 56 F2 | 	cmps	local02, #128 wc
1dc98     C0 FF 9F CD |  if_b	jmp	#LR__2364
1dc9c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1dc9c     00 28 06 F6 | 	mov	local02, #0
1dca0     01 00 00 FF 
1dca4     00 E4 05 F1 | 	add	objptr, ##512
1dca8                 | LR__2365
1dca8     14 2F 02 F6 | 	mov	local05, local02
1dcac     01 2E 66 F0 | 	shl	local05, #1
1dcb0     F2 2E 02 F1 | 	add	local05, objptr
1dcb4     14 31 02 F6 | 	mov	local06, local02
1dcb8     0D 30 66 F0 | 	shl	local06, #13
1dcbc     17 31 52 FC | 	wrword	local06, local05
1dcc0     01 28 06 F1 | 	add	local02, #1
1dcc4     08 28 56 F2 | 	cmps	local02, #8 wc
1dcc8     DC FF 9F CD |  if_b	jmp	#LR__2365
1dccc                 | LR__2366
1dccc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1dccc     08 28 06 F6 | 	mov	local02, #8
1dcd0     97 42 48 FB | 	callpa	#(@LR__2370-@LR__2367)>>2,fcache_load_ptr_
1dcd4                 | LR__2367
1dcd4     14 2F 02 F6 | 	mov	local05, local02
1dcd8     01 2E 66 F0 | 	shl	local05, #1
1dcdc     F2 2E 02 F1 | 	add	local05, objptr
1dce0     14 27 02 F6 | 	mov	local01, local02
1dce4     08 26 86 F1 | 	sub	local01, #8
1dce8     0B 26 66 F0 | 	shl	local01, #11
1dcec     7F 00 00 FF 
1dcf0     00 31 06 F6 | 	mov	local06, ##65280
1dcf4     13 31 82 F1 | 	sub	local06, local01
1dcf8     17 31 52 FC | 	wrword	local06, local05
1dcfc     01 28 06 F1 | 	add	local02, #1
1dd00     18 28 16 F2 | 	cmp	local02, #24 wc
1dd04     CC FF 9F CD |  if_b	jmp	#LR__2367
1dd08                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1dd08     18 28 06 F6 | 	mov	local02, #24
1dd0c                 | LR__2368
1dd0c     14 2F 02 F6 | 	mov	local05, local02
1dd10     01 2E 66 F0 | 	shl	local05, #1
1dd14     F2 2E 02 F1 | 	add	local05, objptr
1dd18     40 00 80 FF 
1dd1c     17 01 58 FC | 	wrword	##32768, local05
1dd20     01 28 06 F1 | 	add	local02, #1
1dd24     81 28 16 F2 | 	cmp	local02, #129 wc
1dd28     E0 FF 9F CD |  if_b	jmp	#LR__2368
1dd2c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1dd2c     81 28 06 F6 | 	mov	local02, #129
1dd30                 | LR__2369
1dd30     14 2F 02 F6 | 	mov	local05, local02
1dd34     01 2E 66 F0 | 	shl	local05, #1
1dd38     F2 2E 02 F1 | 	add	local05, objptr
1dd3c     FF 2A 06 F6 | 	mov	local03, #255
1dd40     14 2B 82 F1 | 	sub	local03, local02
1dd44     08 2A 66 F0 | 	shl	local03, #8
1dd48     17 2B 52 FC | 	wrword	local03, local05
1dd4c     01 28 06 F1 | 	add	local02, #1
1dd50     00 29 16 F2 | 	cmp	local02, #256 wc
1dd54     D8 FF 9F CD |  if_b	jmp	#LR__2369
1dd58                 | LR__2370
1dd58     3E 00 00 FF 
1dd5c     FE E4 05 F1 | 	add	objptr, ##31998
1dd60     F2 00 59 FC | 	wrword	#128, objptr
1dd64     51 00 00 FF 
1dd68     D6 E5 85 F1 | 	sub	objptr, ##41942
1dd6c                 | ' for i=0 to 7
1dd6c     00 28 06 F6 | 	mov	local02, #0
1dd70     97 8E 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1dd74                 | LR__2371
1dd74     14 2F 02 F6 | 	mov	local05, local02
1dd78     01 2E 66 F0 | 	shl	local05, #1
1dd7c     14 2F 02 F1 | 	add	local05, local02
1dd80     03 2E 66 F0 | 	shl	local05, #3
1dd84     14 00 00 FF 
1dd88     38 E5 05 F1 | 	add	objptr, ##10552
1dd8c     F2 2E 02 F1 | 	add	local05, objptr
1dd90     00 EE A1 FF 
1dd94     17 01 68 FC | 	wrlong	##1138491392, local05
1dd98     14 2F 02 F6 | 	mov	local05, local02
1dd9c     01 2E 66 F0 | 	shl	local05, #1
1dda0     14 2F 02 F1 | 	add	local05, local02
1dda4     03 2E 66 F0 | 	shl	local05, #3
1dda8     F2 2E 02 F1 | 	add	local05, objptr
1ddac     04 2E 06 F1 | 	add	local05, #4
1ddb0     17 29 42 FC | 	wrbyte	local02, local05
1ddb4     14 2F 02 F6 | 	mov	local05, local02
1ddb8     01 2E 66 F0 | 	shl	local05, #1
1ddbc     14 2F 02 F1 | 	add	local05, local02
1ddc0     03 2E 66 F0 | 	shl	local05, #3
1ddc4     F2 2E 02 F1 | 	add	local05, objptr
1ddc8     05 2E 06 F1 | 	add	local05, #5
1ddcc     17 29 42 FC | 	wrbyte	local02, local05
1ddd0     14 2F 02 F6 | 	mov	local05, local02
1ddd4     01 2E 66 F0 | 	shl	local05, #1
1ddd8     14 2F 02 F1 | 	add	local05, local02
1dddc     03 2E 66 F0 | 	shl	local05, #3
1dde0     F2 2E 02 F1 | 	add	local05, objptr
1dde4     06 2E 06 F1 | 	add	local05, #6
1dde8     17 01 58 FC | 	wrword	#0, local05
1ddec     14 2F 02 F6 | 	mov	local05, local02
1ddf0     01 2E 66 F0 | 	shl	local05, #1
1ddf4     14 2F 02 F1 | 	add	local05, local02
1ddf8     03 2E 66 F0 | 	shl	local05, #3
1ddfc     F2 2E 02 F1 | 	add	local05, objptr
1de00     08 2E 06 F1 | 	add	local05, #8
1de04     00 C0 9F FF 
1de08     17 01 68 FC | 	wrlong	##1065353216, local05
1de0c     14 2F 02 F6 | 	mov	local05, local02
1de10     01 2E 66 F0 | 	shl	local05, #1
1de14     14 2F 02 F1 | 	add	local05, local02
1de18     03 2E 66 F0 | 	shl	local05, #3
1de1c     F2 2E 02 F1 | 	add	local05, objptr
1de20     0C 2E 06 F1 | 	add	local05, #12
1de24     00 40 A0 FF 
1de28     17 01 68 FC | 	wrlong	##1082130432, local05
1de2c     14 2F 02 F6 | 	mov	local05, local02
1de30     01 2E 66 F0 | 	shl	local05, #1
1de34     14 2F 02 F1 | 	add	local05, local02
1de38     03 2E 66 F0 | 	shl	local05, #3
1de3c     F2 2E 02 F1 | 	add	local05, objptr
1de40     10 2E 06 F1 | 	add	local05, #16
1de44     17 01 68 FC | 	wrlong	#0, local05
1de48     14 2F 02 F6 | 	mov	local05, local02
1de4c     01 2E 66 F0 | 	shl	local05, #1
1de50     14 2F 02 F1 | 	add	local05, local02
1de54     03 2E 66 F0 | 	shl	local05, #3
1de58     F2 2E 02 F1 | 	add	local05, objptr
1de5c     14 2E 06 F1 | 	add	local05, #20
1de60     17 FF 59 FC | 	wrword	#255, local05
1de64     14 2F 02 F6 | 	mov	local05, local02
1de68     01 2E 66 F0 | 	shl	local05, #1
1de6c     3D 00 00 FF 
1de70     90 E4 05 F1 | 	add	objptr, ##31376
1de74     F2 2E 02 F1 | 	add	local05, objptr
1de78     17 FF 59 FC | 	wrword	#255, local05
1de7c     01 28 06 F1 | 	add	local02, #1
1de80     08 28 56 F2 | 	cmps	local02, #8 wc
1de84     51 00 00 FF 
1de88     C8 E5 85 F1 | 	sub	objptr, ##41928
1de8c     E4 FE 9F CD |  if_b	jmp	#LR__2371
1de90                 | LR__2372
1de90     00 6E 20 FF 
1de94     00 30 06 F6 | 	mov	local06, ##1088159744
1de98                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1de98     03 2E 06 F6 | 	mov	local05, #3
1de9c                 | LR__2373
1de9c     18 13 02 F6 | 	mov	arg01, local06
1dea0     CE C3 1F FF 
1dea4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1dea8     24 6B B0 FD | 	call	#__system___float_mul
1deac     FD 30 02 F6 | 	mov	local06, result1
1deb0     FA 2F 6E FB | 	djnz	local05, #LR__2373
1deb4     00 28 06 F6 | 	mov	local02, #0
1deb8                 | LR__2374
1deb8     14 2D 02 F6 | 	mov	local04, local02
1debc     02 2C 66 F0 | 	shl	local04, #2
1dec0     14 00 00 FF 
1dec4     D8 E4 05 F1 | 	add	objptr, ##10456
1dec8     F2 2C 02 F1 | 	add	local04, objptr
1decc     16 31 62 FC | 	wrlong	local06, local04
1ded0     18 13 02 F6 | 	mov	arg01, local06
1ded4     CE C3 1F FF 
1ded8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1dedc     14 00 00 FF 
1dee0     D8 E4 85 F1 | 	sub	objptr, ##10456
1dee4     E8 6A B0 FD | 	call	#__system___float_mul
1dee8     FD 30 02 F6 | 	mov	local06, result1
1deec     01 28 06 F1 | 	add	local02, #1
1def0     0C 28 56 F2 | 	cmps	local02, #12 wc
1def4     C0 FF 9F CD |  if_b	jmp	#LR__2374
1def8     14 00 00 FF 
1defc     08 E5 05 F1 | 	add	objptr, ##10504
1df00     F2 50 6B FC | 	wrlong	#424, objptr
1df04     04 E4 05 F1 | 	add	objptr, #4
1df08     F2 20 6B FC | 	wrlong	#400, objptr
1df0c     04 E4 05 F1 | 	add	objptr, #4
1df10     F2 F2 6A FC | 	wrlong	#377, objptr
1df14     04 E4 05 F1 | 	add	objptr, #4
1df18     F2 C8 6A FC | 	wrlong	#356, objptr
1df1c     04 E4 05 F1 | 	add	objptr, #4
1df20     F2 A0 6A FC | 	wrlong	#336, objptr
1df24     04 E4 05 F1 | 	add	objptr, #4
1df28     F2 7A 6A FC | 	wrlong	#317, objptr
1df2c     04 E4 05 F1 | 	add	objptr, #4
1df30     F2 58 6A FC | 	wrlong	#300, objptr
1df34     04 E4 05 F1 | 	add	objptr, #4
1df38     F2 36 6A FC | 	wrlong	#283, objptr
1df3c     04 E4 05 F1 | 	add	objptr, #4
1df40     F2 16 6A FC | 	wrlong	#267, objptr
1df44     04 E4 05 F1 | 	add	objptr, #4
1df48     F2 F8 69 FC | 	wrlong	#252, objptr
1df4c     04 E4 05 F1 | 	add	objptr, #4
1df50     F2 DC 69 FC | 	wrlong	#238, objptr
1df54     04 E4 05 F1 | 	add	objptr, #4
1df58     F2 C0 69 FC | 	wrlong	#224, objptr
1df5c     3D 00 00 FF 
1df60     A2 E4 05 F1 | 	add	objptr, ##31394
1df64     F2 00 59 FC | 	wrword	#128, objptr
1df68     02 E4 85 F1 | 	sub	objptr, #2
1df6c     F2 00 59 FC | 	wrword	#128, objptr
1df70     51 00 00 FF 
1df74     D4 E5 85 F1 | 	sub	objptr, ##41940
1df78     A7 F0 03 F6 | 	mov	ptra, fp
1df7c     B2 00 A0 FD | 	call	#popregs_
1df80                 | _init_audio_ret
1df80     2D 00 64 FD | 	ret
1df84                 | 
1df84                 | ' 
1df84                 | ' '------------------- Error messages
1df84                 | ' 
1df84                 | ' sub init_error_strings
1df84                 | _init_error_strings
1df84     90 01 00 FF 
1df88     D2 01 06 F6 | 	mov	_var01, ##@LR__5652
1df8c     45 00 00 FF 
1df90     7C E4 05 F1 | 	add	objptr, ##35452
1df94     F2 00 62 FC | 	wrlong	_var01, objptr
1df98     90 01 00 FF 
1df9c     D3 01 06 F6 | 	mov	_var01, ##@LR__5653
1dfa0     04 E4 05 F1 | 	add	objptr, #4
1dfa4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfa8     90 01 00 FF 
1dfac     F7 01 06 F6 | 	mov	_var01, ##@LR__5654
1dfb0     04 E4 05 F1 | 	add	objptr, #4
1dfb4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfb8     91 01 00 FF 
1dfbc     17 00 06 F6 | 	mov	_var01, ##@LR__5655
1dfc0     04 E4 05 F1 | 	add	objptr, #4
1dfc4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfc8     91 01 00 FF 
1dfcc     30 00 06 F6 | 	mov	_var01, ##@LR__5656
1dfd0     04 E4 05 F1 | 	add	objptr, #4
1dfd4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfd8     91 01 00 FF 
1dfdc     4B 00 06 F6 | 	mov	_var01, ##@LR__5657
1dfe0     04 E4 05 F1 | 	add	objptr, #4
1dfe4     F2 00 62 FC | 	wrlong	_var01, objptr
1dfe8     91 01 00 FF 
1dfec     6C 00 06 F6 | 	mov	_var01, ##@LR__5658
1dff0     04 E4 05 F1 | 	add	objptr, #4
1dff4     F2 00 62 FC | 	wrlong	_var01, objptr
1dff8     91 01 00 FF 
1dffc     99 00 06 F6 | 	mov	_var01, ##@LR__5659
1e000     04 E4 05 F1 | 	add	objptr, #4
1e004     F2 00 62 FC | 	wrlong	_var01, objptr
1e008     91 01 00 FF 
1e00c     C3 00 06 F6 | 	mov	_var01, ##@LR__5660
1e010     04 E4 05 F1 | 	add	objptr, #4
1e014     F2 00 62 FC | 	wrlong	_var01, objptr
1e018     91 01 00 FF 
1e01c     DB 00 06 F6 | 	mov	_var01, ##@LR__5661
1e020     04 E4 05 F1 | 	add	objptr, #4
1e024     F2 00 62 FC | 	wrlong	_var01, objptr
1e028     91 01 00 FF 
1e02c     FB 00 06 F6 | 	mov	_var01, ##@LR__5662
1e030     04 E4 05 F1 | 	add	objptr, #4
1e034     F2 00 62 FC | 	wrlong	_var01, objptr
1e038     91 01 00 FF 
1e03c     11 01 06 F6 | 	mov	_var01, ##@LR__5663
1e040     04 E4 05 F1 | 	add	objptr, #4
1e044     F2 00 62 FC | 	wrlong	_var01, objptr
1e048     91 01 00 FF 
1e04c     2E 01 06 F6 | 	mov	_var01, ##@LR__5664
1e050     04 E4 05 F1 | 	add	objptr, #4
1e054     F2 00 62 FC | 	wrlong	_var01, objptr
1e058     91 01 00 FF 
1e05c     51 01 06 F6 | 	mov	_var01, ##@LR__5665
1e060     04 E4 05 F1 | 	add	objptr, #4
1e064     F2 00 62 FC | 	wrlong	_var01, objptr
1e068     91 01 00 FF 
1e06c     77 01 06 F6 | 	mov	_var01, ##@LR__5666
1e070     04 E4 05 F1 | 	add	objptr, #4
1e074     F2 00 62 FC | 	wrlong	_var01, objptr
1e078     91 01 00 FF 
1e07c     92 01 06 F6 | 	mov	_var01, ##@LR__5667
1e080     04 E4 05 F1 | 	add	objptr, #4
1e084     F2 00 62 FC | 	wrlong	_var01, objptr
1e088     91 01 00 FF 
1e08c     A2 01 06 F6 | 	mov	_var01, ##@LR__5668
1e090     04 E4 05 F1 | 	add	objptr, #4
1e094     F2 00 62 FC | 	wrlong	_var01, objptr
1e098     91 01 00 FF 
1e09c     B1 01 06 F6 | 	mov	_var01, ##@LR__5669
1e0a0     04 E4 05 F1 | 	add	objptr, #4
1e0a4     F2 00 62 FC | 	wrlong	_var01, objptr
1e0a8     91 01 00 FF 
1e0ac     CB 01 06 F6 | 	mov	_var01, ##@LR__5670
1e0b0     04 E4 05 F1 | 	add	objptr, #4
1e0b4     F2 00 62 FC | 	wrlong	_var01, objptr
1e0b8     91 01 00 FF 
1e0bc     DC 01 06 F6 | 	mov	_var01, ##@LR__5671
1e0c0     04 E4 05 F1 | 	add	objptr, #4
1e0c4     F2 00 62 FC | 	wrlong	_var01, objptr
1e0c8     91 01 00 FF 
1e0cc     F3 01 06 F6 | 	mov	_var01, ##@LR__5672
1e0d0     04 E4 05 F1 | 	add	objptr, #4
1e0d4     F2 00 62 FC | 	wrlong	_var01, objptr
1e0d8     92 01 00 FF 
1e0dc     06 00 06 F6 | 	mov	_var01, ##@LR__5673
1e0e0     04 E4 05 F1 | 	add	objptr, #4
1e0e4     F2 00 62 FC | 	wrlong	_var01, objptr
1e0e8     92 01 00 FF 
1e0ec     15 00 06 F6 | 	mov	_var01, ##@LR__5674
1e0f0     04 E4 05 F1 | 	add	objptr, #4
1e0f4     F2 00 62 FC | 	wrlong	_var01, objptr
1e0f8     92 01 00 FF 
1e0fc     31 00 06 F6 | 	mov	_var01, ##@LR__5675
1e100     04 E4 05 F1 | 	add	objptr, #4
1e104     F2 00 62 FC | 	wrlong	_var01, objptr
1e108     92 01 00 FF 
1e10c     41 00 06 F6 | 	mov	_var01, ##@LR__5676
1e110     04 E4 05 F1 | 	add	objptr, #4
1e114     F2 00 62 FC | 	wrlong	_var01, objptr
1e118     92 01 00 FF 
1e11c     51 00 06 F6 | 	mov	_var01, ##@LR__5677
1e120     04 E4 05 F1 | 	add	objptr, #4
1e124     F2 00 62 FC | 	wrlong	_var01, objptr
1e128     92 01 00 FF 
1e12c     84 00 06 F6 | 	mov	_var01, ##@LR__5678
1e130     04 E4 05 F1 | 	add	objptr, #4
1e134     F2 00 62 FC | 	wrlong	_var01, objptr
1e138     92 01 00 FF 
1e13c     9F 00 06 F6 | 	mov	_var01, ##@LR__5679
1e140     04 E4 05 F1 | 	add	objptr, #4
1e144     F2 00 62 FC | 	wrlong	_var01, objptr
1e148     92 01 00 FF 
1e14c     B4 00 06 F6 | 	mov	_var01, ##@LR__5680
1e150     04 E4 05 F1 | 	add	objptr, #4
1e154     F2 00 62 FC | 	wrlong	_var01, objptr
1e158     92 01 00 FF 
1e15c     C0 00 06 F6 | 	mov	_var01, ##@LR__5681
1e160     04 E4 05 F1 | 	add	objptr, #4
1e164     F2 00 62 FC | 	wrlong	_var01, objptr
1e168     92 01 00 FF 
1e16c     D1 00 06 F6 | 	mov	_var01, ##@LR__5682
1e170     04 E4 05 F1 | 	add	objptr, #4
1e174     F2 00 62 FC | 	wrlong	_var01, objptr
1e178     92 01 00 FF 
1e17c     E1 00 06 F6 | 	mov	_var01, ##@LR__5683
1e180     04 E4 05 F1 | 	add	objptr, #4
1e184     F2 00 62 FC | 	wrlong	_var01, objptr
1e188     92 01 00 FF 
1e18c     FC 00 06 F6 | 	mov	_var01, ##@LR__5684
1e190     04 E4 05 F1 | 	add	objptr, #4
1e194     F2 00 62 FC | 	wrlong	_var01, objptr
1e198     92 01 00 FF 
1e19c     0C 01 06 F6 | 	mov	_var01, ##@LR__5685
1e1a0     04 E4 05 F1 | 	add	objptr, #4
1e1a4     F2 00 62 FC | 	wrlong	_var01, objptr
1e1a8     92 01 00 FF 
1e1ac     1A 01 06 F6 | 	mov	_var01, ##@LR__5686
1e1b0     04 E4 05 F1 | 	add	objptr, #4
1e1b4     F2 00 62 FC | 	wrlong	_var01, objptr
1e1b8     92 01 00 FF 
1e1bc     34 01 06 F6 | 	mov	_var01, ##@LR__5687
1e1c0     04 E4 05 F1 | 	add	objptr, #4
1e1c4     F2 00 62 FC | 	wrlong	_var01, objptr
1e1c8     92 01 00 FF 
1e1cc     67 01 06 F6 | 	mov	_var01, ##@LR__5688
1e1d0     04 E4 05 F1 | 	add	objptr, #4
1e1d4     F2 00 62 FC | 	wrlong	_var01, objptr
1e1d8     92 01 00 FF 
1e1dc     7F 01 06 F6 | 	mov	_var01, ##@LR__5689
1e1e0     04 E4 05 F1 | 	add	objptr, #4
1e1e4     F2 00 62 FC | 	wrlong	_var01, objptr
1e1e8     92 01 00 FF 
1e1ec     9A 01 06 F6 | 	mov	_var01, ##@LR__5690
1e1f0     04 E4 05 F1 | 	add	objptr, #4
1e1f4     F2 00 62 FC | 	wrlong	_var01, objptr
1e1f8     92 01 00 FF 
1e1fc     B7 01 06 F6 | 	mov	_var01, ##@LR__5691
1e200     04 E4 05 F1 | 	add	objptr, #4
1e204     F2 00 62 FC | 	wrlong	_var01, objptr
1e208     92 01 00 FF 
1e20c     D0 01 06 F6 | 	mov	_var01, ##@LR__5692
1e210     04 E4 05 F1 | 	add	objptr, #4
1e214     F2 00 62 FC | 	wrlong	_var01, objptr
1e218     92 01 00 FF 
1e21c     EF 01 06 F6 | 	mov	_var01, ##@LR__5693
1e220     04 E4 05 F1 | 	add	objptr, #4
1e224     F2 00 62 FC | 	wrlong	_var01, objptr
1e228     92 01 00 FF 
1e22c     FD 01 06 F6 | 	mov	_var01, ##@LR__5694
1e230     04 E4 05 F1 | 	add	objptr, #4
1e234     F2 00 62 FC | 	wrlong	_var01, objptr
1e238     93 01 00 FF 
1e23c     2A 00 06 F6 | 	mov	_var01, ##@LR__5695
1e240     04 E4 05 F1 | 	add	objptr, #4
1e244     F2 00 62 FC | 	wrlong	_var01, objptr
1e248     93 01 00 FF 
1e24c     37 00 06 F6 | 	mov	_var01, ##@LR__5696
1e250     04 E4 05 F1 | 	add	objptr, #4
1e254     F2 00 62 FC | 	wrlong	_var01, objptr
1e258     93 01 00 FF 
1e25c     4B 00 06 F6 | 	mov	_var01, ##@LR__5697
1e260     04 E4 05 F1 | 	add	objptr, #4
1e264     F2 00 62 FC | 	wrlong	_var01, objptr
1e268     93 01 00 FF 
1e26c     6F 00 06 F6 | 	mov	_var01, ##@LR__5698
1e270     04 E4 05 F1 | 	add	objptr, #4
1e274     F2 00 62 FC | 	wrlong	_var01, objptr
1e278     93 01 00 FF 
1e27c     86 00 06 F6 | 	mov	_var01, ##@LR__5699
1e280     04 E4 05 F1 | 	add	objptr, #4
1e284     F2 00 62 FC | 	wrlong	_var01, objptr
1e288     93 01 00 FF 
1e28c     99 00 06 F6 | 	mov	_var01, ##@LR__5700
1e290     04 E4 05 F1 | 	add	objptr, #4
1e294     F2 00 62 FC | 	wrlong	_var01, objptr
1e298     93 01 00 FF 
1e29c     B0 00 06 F6 | 	mov	_var01, ##@LR__5701
1e2a0     04 E4 05 F1 | 	add	objptr, #4
1e2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1e2a8     93 01 00 FF 
1e2ac     C9 00 06 F6 | 	mov	_var01, ##@LR__5702
1e2b0     04 E4 05 F1 | 	add	objptr, #4
1e2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1e2b8     93 01 00 FF 
1e2bc     EB 00 06 F6 | 	mov	_var01, ##@LR__5703
1e2c0     04 E4 05 F1 | 	add	objptr, #4
1e2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1e2c8     93 01 00 FF 
1e2cc     FE 00 06 F6 | 	mov	_var01, ##@LR__5704
1e2d0     04 E4 05 F1 | 	add	objptr, #4
1e2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1e2d8     93 01 00 FF 
1e2dc     0E 01 06 F6 | 	mov	_var01, ##@LR__5705
1e2e0     04 E4 05 F1 | 	add	objptr, #4
1e2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1e2e8     45 00 00 FF 
1e2ec     50 E5 85 F1 | 	sub	objptr, ##35664
1e2f0                 | _init_error_strings_ret
1e2f0     2D 00 64 FD | 	ret
1e2f4                 | 
1e2f4                 | '         
1e2f4                 | ' sub printerror(err as integer, linenum=0 as integer)
1e2f4                 | _printerror
1e2f4     02 4A 05 F6 | 	mov	COUNT_, #2
1e2f8     A8 00 A0 FD | 	call	#pushregs_
1e2fc     09 27 02 F6 | 	mov	local01, arg01
1e300     0A 29 02 F6 | 	mov	local02, arg02
1e304     93 01 00 FF 
1e308     26 13 06 F6 | 	mov	arg01, ##@LR__5706
1e30c     88 20 B0 FD | 	call	#_hg010b_spin2_write
1e310     13 13 02 F6 | 	mov	arg01, local01
1e314     24 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1e318     FD 12 02 F6 | 	mov	arg01, result1
1e31c     78 20 B0 FD | 	call	#_hg010b_spin2_write
1e320     93 01 00 FF 
1e324     2D 13 06 F6 | 	mov	arg01, ##@LR__5707
1e328     6C 20 B0 FD | 	call	#_hg010b_spin2_write
1e32c     02 26 66 F0 | 	shl	local01, #2
1e330     45 00 00 FF 
1e334     7C E4 05 F1 | 	add	objptr, ##35452
1e338     F2 26 02 F1 | 	add	local01, objptr
1e33c     13 13 02 FB | 	rdlong	arg01, local01
1e340     45 00 00 FF 
1e344     7C E4 85 F1 | 	sub	objptr, ##35452
1e348     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1e34c                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
1e34c                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum))
1e34c     01 28 56 F2 | 	cmps	local02, #1 wc
1e350     20 00 90 CD |  if_b	jmp	#LR__2380
1e354     93 01 00 FF 
1e358     31 13 06 F6 | 	mov	arg01, ##@LR__5708
1e35c     38 20 B0 FD | 	call	#_hg010b_spin2_write
1e360     14 13 02 F6 | 	mov	arg01, local02
1e364     D4 25 B0 FD | 	call	#_hg010b_spin2_inttostr
1e368     FD 12 02 F6 | 	mov	arg01, result1
1e36c                 | ' 
1e36c                 | ' write(text)
1e36c     28 20 B0 FD | 	call	#_hg010b_spin2_write
1e370                 | ' crlf
1e370     24 25 B0 FD | 	call	#_hg010b_spin2_crlf
1e374                 | LR__2380
1e374     A7 F0 03 F6 | 	mov	ptra, fp
1e378     B2 00 A0 FD | 	call	#popregs_
1e37c                 | _printerror_ret
1e37c     2D 00 64 FD | 	ret
1e380                 | 
1e380                 | ' 
1e380                 | ' '' ------------------------------- Hardware start/stop/initialization 
1e380                 | ' 
1e380                 | ' sub startpsram
1e380                 | _startpsram
1e380     00 12 06 F6 | 	mov	arg01, #0
1e384     0A 14 C6 F9 | 	decod	arg02, #10
1e388     0B 16 06 F6 | 	mov	arg03, #11
1e38c     07 18 06 F6 | 	mov	arg04, #7
1e390     0B 00 00 FF 
1e394     CC E4 05 F1 | 	add	objptr, ##5836
1e398     0C 2A B0 FD | 	call	#_psram_spin2_startx
1e39c     2B 00 00 FF 
1e3a0     3C E5 05 F1 | 	add	objptr, ##22332
1e3a4     F2 FA 61 FC | 	wrlong	result1, objptr
1e3a8                 | '     return $7FF00 + cog*12
1e3a8     0C E4 05 F1 | 	add	objptr, #12
1e3ac     FF 03 80 FF 
1e3b0     F2 00 6A FC | 	wrlong	##524032, objptr
1e3b4     37 00 00 FF 
1e3b8     14 E4 85 F1 | 	sub	objptr, ##28180
1e3bc                 | _startpsram_ret
1e3bc     2D 00 64 FD | 	ret
1e3c0                 | 
1e3c0                 | ' 
1e3c0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1e3c0                 | _startvideo
1e3c0     01 4A 05 F6 | 	mov	COUNT_, #1
1e3c4     A8 00 A0 FD | 	call	#pushregs_
1e3c8     37 00 00 FF 
1e3cc     14 E4 05 F1 | 	add	objptr, ##28180
1e3d0     F2 18 02 FB | 	rdlong	arg04, objptr
1e3d4     37 00 00 FF 
1e3d8     14 E4 85 F1 | 	sub	objptr, ##28180
1e3dc     0A 13 02 F6 | 	mov	arg01, arg02
1e3e0     0C 15 02 F6 | 	mov	arg02, arg04
1e3e4     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1e3e8     37 00 00 FF 
1e3ec     00 E4 05 F1 | 	add	objptr, ##28160
1e3f0     F2 FA 61 FC | 	wrlong	result1, objptr
1e3f4                 | ' 
1e3f4                 | ' videocog=v.start(pin,mbox)
1e3f4                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1e3f4     00 26 06 F6 | 	mov	local01, #0
1e3f8     2B 00 00 FF 
1e3fc     34 E5 85 F1 | 	sub	objptr, ##22324
1e400                 | LR__2390
1e400     13 13 02 F6 | 	mov	arg01, local01
1e404     00 28 00 FF 
1e408     00 14 06 F6 | 	mov	arg02, ##5242880
1e40c     F0 2D B0 FD | 	call	#_psram_spin2_setQos
1e410     01 26 06 F1 | 	add	local01, #1
1e414     08 26 56 F2 | 	cmps	local01, #8 wc
1e418     E4 FF 9F CD |  if_b	jmp	#LR__2390
1e41c     2B 00 00 FF 
1e420     34 E5 05 F1 | 	add	objptr, ##22324
1e424     F2 12 02 FB | 	rdlong	arg01, objptr
1e428     7A 00 02 FF 
1e42c     00 14 06 F6 | 	mov	arg02, ##67171328
1e430     2B 00 00 FF 
1e434     34 E5 85 F1 | 	sub	objptr, ##22324
1e438     C4 2D B0 FD | 	call	#_psram_spin2_setQos
1e43c     0B 00 00 FF 
1e440     CC E4 85 F1 | 	sub	objptr, ##5836
1e444                 | ' psram.setQoS(videocog, $0400f400) 
1e444                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1e444     F2 14 02 F6 | 	mov	arg02, objptr
1e448     00 98 04 FF 
1e44c     00 14 46 F5 | 	or	arg02, ##154140672
1e450     00 16 06 F6 | 	mov	arg03, #0
1e454     00 18 06 F6 | 	mov	arg04, #0
1e458     00 12 06 F6 | 	mov	arg01, #0
1e45c     5C 42 B0 FD | 	call	#__system___basic_open
1e460                 | ' return videocog
1e460     37 00 00 FF 
1e464     00 E4 05 F1 | 	add	objptr, ##28160
1e468     F2 FA 01 FB | 	rdlong	result1, objptr
1e46c     37 00 00 FF 
1e470     00 E4 85 F1 | 	sub	objptr, ##28160
1e474     A7 F0 03 F6 | 	mov	ptra, fp
1e478     B2 00 A0 FD | 	call	#popregs_
1e47c                 | _startvideo_ret
1e47c     2D 00 64 FD | 	ret
1e480                 | 
1e480                 | ' 
1e480                 | ' 
1e480                 | ' 
1e480                 | ' '' ------------------------------- Convenient psram peek/poke
1e480                 | ' 
1e480                 | ' sub pslpoke(addr as ulong,value as ulong)
1e480                 | _pslpoke
1e480     00 4A 05 F6 | 	mov	COUNT_, #0
1e484     A8 00 A0 FD | 	call	#pushregs_
1e488     08 F0 07 F1 | 	add	ptra, #8
1e48c     A7 12 62 FC | 	wrlong	arg01, fp
1e490     04 4E 05 F1 | 	add	fp, #4
1e494     A7 14 62 FC | 	wrlong	arg02, fp
1e498     A7 12 02 F6 | 	mov	arg01, fp
1e49c     04 4E 85 F1 | 	sub	fp, #4
1e4a0     A7 14 02 FB | 	rdlong	arg02, fp
1e4a4     04 16 06 F6 | 	mov	arg03, #4
1e4a8     0B 00 00 FF 
1e4ac     CC E4 05 F1 | 	add	objptr, ##5836
1e4b0     BC 2B B0 FD | 	call	#_psram_spin2_write
1e4b4     0B 00 00 FF 
1e4b8     CC E4 85 F1 | 	sub	objptr, ##5836
1e4bc     A7 F0 03 F6 | 	mov	ptra, fp
1e4c0     B2 00 A0 FD | 	call	#popregs_
1e4c4                 | _pslpoke_ret
1e4c4     2D 00 64 FD | 	ret
1e4c8                 | 
1e4c8                 | ' 
1e4c8                 | ' sub psdpoke(addr as ulong,value as ulong)
1e4c8                 | _psdpoke
1e4c8     00 4A 05 F6 | 	mov	COUNT_, #0
1e4cc     A8 00 A0 FD | 	call	#pushregs_
1e4d0     08 F0 07 F1 | 	add	ptra, #8
1e4d4     A7 12 62 FC | 	wrlong	arg01, fp
1e4d8     04 4E 05 F1 | 	add	fp, #4
1e4dc     A7 14 62 FC | 	wrlong	arg02, fp
1e4e0     A7 12 02 F6 | 	mov	arg01, fp
1e4e4     04 4E 85 F1 | 	sub	fp, #4
1e4e8     A7 14 02 FB | 	rdlong	arg02, fp
1e4ec     02 16 06 F6 | 	mov	arg03, #2
1e4f0     0B 00 00 FF 
1e4f4     CC E4 05 F1 | 	add	objptr, ##5836
1e4f8     74 2B B0 FD | 	call	#_psram_spin2_write
1e4fc     0B 00 00 FF 
1e500     CC E4 85 F1 | 	sub	objptr, ##5836
1e504     A7 F0 03 F6 | 	mov	ptra, fp
1e508     B2 00 A0 FD | 	call	#popregs_
1e50c                 | _psdpoke_ret
1e50c     2D 00 64 FD | 	ret
1e510                 | 
1e510                 | ' 
1e510                 | ' sub pspoke(addr as ulong,value as ulong)
1e510                 | _pspoke
1e510     00 4A 05 F6 | 	mov	COUNT_, #0
1e514     A8 00 A0 FD | 	call	#pushregs_
1e518     08 F0 07 F1 | 	add	ptra, #8
1e51c     A7 12 62 FC | 	wrlong	arg01, fp
1e520     04 4E 05 F1 | 	add	fp, #4
1e524     A7 14 62 FC | 	wrlong	arg02, fp
1e528     A7 12 02 F6 | 	mov	arg01, fp
1e52c     04 4E 85 F1 | 	sub	fp, #4
1e530     A7 14 02 FB | 	rdlong	arg02, fp
1e534     01 16 06 F6 | 	mov	arg03, #1
1e538     0B 00 00 FF 
1e53c     CC E4 05 F1 | 	add	objptr, ##5836
1e540     2C 2B B0 FD | 	call	#_psram_spin2_write
1e544     0B 00 00 FF 
1e548     CC E4 85 F1 | 	sub	objptr, ##5836
1e54c     A7 F0 03 F6 | 	mov	ptra, fp
1e550     B2 00 A0 FD | 	call	#popregs_
1e554                 | _pspoke_ret
1e554     2D 00 64 FD | 	ret
1e558                 | 
1e558                 | ' 
1e558                 | ' function pspeek(adr as ulong) as ubyte
1e558                 | _pspeek
1e558     00 4A 05 F6 | 	mov	COUNT_, #0
1e55c     A8 00 A0 FD | 	call	#pushregs_
1e560     0C F0 07 F1 | 	add	ptra, #12
1e564     04 4E 05 F1 | 	add	fp, #4
1e568     A7 12 62 FC | 	wrlong	arg01, fp
1e56c     04 4E 05 F1 | 	add	fp, #4
1e570     A7 12 02 F6 | 	mov	arg01, fp
1e574     04 4E 85 F1 | 	sub	fp, #4
1e578     A7 14 02 FB | 	rdlong	arg02, fp
1e57c     04 4E 85 F1 | 	sub	fp, #4
1e580     01 16 06 F6 | 	mov	arg03, #1
1e584     0B 00 00 FF 
1e588     CC E4 05 F1 | 	add	objptr, ##5836
1e58c     44 2A B0 FD | 	call	#_psram_spin2_read1
1e590     0B 00 00 FF 
1e594     CC E4 85 F1 | 	sub	objptr, ##5836
1e598                 | ' psram.read1(varptr(res),adr,1)
1e598                 | ' return res
1e598     08 4E 05 F1 | 	add	fp, #8
1e59c     A7 FA C1 FA | 	rdbyte	result1, fp
1e5a0     08 4E 85 F1 | 	sub	fp, #8
1e5a4     A7 F0 03 F6 | 	mov	ptra, fp
1e5a8     B2 00 A0 FD | 	call	#popregs_
1e5ac                 | _pspeek_ret
1e5ac     2D 00 64 FD | 	ret
1e5b0                 | 
1e5b0                 | ' 
1e5b0                 | ' function pslpeek(adr as ulong) as ulong
1e5b0                 | _pslpeek
1e5b0     00 4A 05 F6 | 	mov	COUNT_, #0
1e5b4     A8 00 A0 FD | 	call	#pushregs_
1e5b8     0C F0 07 F1 | 	add	ptra, #12
1e5bc     04 4E 05 F1 | 	add	fp, #4
1e5c0     A7 12 62 FC | 	wrlong	arg01, fp
1e5c4     04 4E 05 F1 | 	add	fp, #4
1e5c8     A7 12 02 F6 | 	mov	arg01, fp
1e5cc     04 4E 85 F1 | 	sub	fp, #4
1e5d0     A7 14 02 FB | 	rdlong	arg02, fp
1e5d4     04 4E 85 F1 | 	sub	fp, #4
1e5d8     04 16 06 F6 | 	mov	arg03, #4
1e5dc     0B 00 00 FF 
1e5e0     CC E4 05 F1 | 	add	objptr, ##5836
1e5e4     EC 29 B0 FD | 	call	#_psram_spin2_read1
1e5e8     0B 00 00 FF 
1e5ec     CC E4 85 F1 | 	sub	objptr, ##5836
1e5f0                 | ' psram.read1(varptr(res),adr,4)
1e5f0                 | ' return res
1e5f0     08 4E 05 F1 | 	add	fp, #8
1e5f4     A7 FA 01 FB | 	rdlong	result1, fp
1e5f8     08 4E 85 F1 | 	sub	fp, #8
1e5fc     A7 F0 03 F6 | 	mov	ptra, fp
1e600     B2 00 A0 FD | 	call	#popregs_
1e604                 | _pslpeek_ret
1e604     2D 00 64 FD | 	ret
1e608                 | 
1e608                 | ' 
1e608                 | ' function psdpeek(adr as ulong) as ulong
1e608                 | _psdpeek
1e608     00 4A 05 F6 | 	mov	COUNT_, #0
1e60c     A8 00 A0 FD | 	call	#pushregs_
1e610     0C F0 07 F1 | 	add	ptra, #12
1e614     04 4E 05 F1 | 	add	fp, #4
1e618     A7 12 62 FC | 	wrlong	arg01, fp
1e61c     04 4E 05 F1 | 	add	fp, #4
1e620     A7 12 02 F6 | 	mov	arg01, fp
1e624     04 4E 85 F1 | 	sub	fp, #4
1e628     A7 14 02 FB | 	rdlong	arg02, fp
1e62c     04 4E 85 F1 | 	sub	fp, #4
1e630     02 16 06 F6 | 	mov	arg03, #2
1e634     0B 00 00 FF 
1e638     CC E4 05 F1 | 	add	objptr, ##5836
1e63c     94 29 B0 FD | 	call	#_psram_spin2_read1
1e640     0B 00 00 FF 
1e644     CC E4 85 F1 | 	sub	objptr, ##5836
1e648                 | ' psram.read1(varptr(res),adr,2)
1e648                 | ' return res
1e648     08 4E 05 F1 | 	add	fp, #8
1e64c     A7 FA E1 FA | 	rdword	result1, fp
1e650     08 4E 85 F1 | 	sub	fp, #8
1e654     A7 F0 03 F6 | 	mov	ptra, fp
1e658     B2 00 A0 FD | 	call	#popregs_
1e65c                 | _psdpeek_ret
1e65c     2D 00 64 FD | 	ret
1e660                 | 
1e660                 | ' 
1e660                 | ' '' ------------------------------- USB keyboard scan to char translator
1e660                 | ' 
1e660                 | ' function scantochar(key)
1e660                 | _scantochar
1e660                 | ' 
1e660                 | ' select case (key shr 8) and 255
1e660     09 01 02 F6 | 	mov	_var01, arg01
1e664     08 00 C6 F0 | 	sar	_var01, #8
1e668     FF 00 0E F5 | 	and	_var01, #255 wz
1e66c     24 00 90 AD |  if_e	jmp	#LR__2400
1e670     02 00 0E F2 | 	cmp	_var01, #2 wz
1e674     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1e678     30 00 90 AD |  if_e	jmp	#LR__2401
1e67c     40 00 0E F2 | 	cmp	_var01, #64 wz
1e680     44 00 90 AD |  if_e	jmp	#LR__2402
1e684     42 00 0E F2 | 	cmp	_var01, #66 wz
1e688     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1e68c     70 00 90 5D |  if_ne	jmp	#LR__2404
1e690     50 00 90 FD | 	jmp	#LR__2403
1e694                 | LR__2400
1e694     09 FB 01 F6 | 	mov	result1, arg01
1e698     7F FA 05 F5 | 	and	result1, #127
1e69c     02 FA 65 F0 | 	shl	result1, #2
1e6a0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e6a4     FD FA C1 FA | 	rdbyte	result1, result1
1e6a8     54 00 90 FD | 	jmp	#_scantochar_ret
1e6ac                 | LR__2401
1e6ac     09 FB 01 F6 | 	mov	result1, arg01
1e6b0     7F FA 05 F5 | 	and	result1, #127
1e6b4     02 FA 65 F0 | 	shl	result1, #2
1e6b8     01 FA 05 F1 | 	add	result1, #1
1e6bc     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e6c0     FD FA C1 FA | 	rdbyte	result1, result1
1e6c4     38 00 90 FD | 	jmp	#_scantochar_ret
1e6c8                 | LR__2402
1e6c8     09 FB 01 F6 | 	mov	result1, arg01
1e6cc     7F FA 05 F5 | 	and	result1, #127
1e6d0     02 FA 65 F0 | 	shl	result1, #2
1e6d4     02 FA 05 F1 | 	add	result1, #2
1e6d8     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e6dc     FD FA C1 FA | 	rdbyte	result1, result1
1e6e0     1C 00 90 FD | 	jmp	#_scantochar_ret
1e6e4                 | LR__2403
1e6e4     09 FB 01 F6 | 	mov	result1, arg01
1e6e8     7F FA 05 F5 | 	and	result1, #127
1e6ec     02 FA 65 F0 | 	shl	result1, #2
1e6f0     03 FA 05 F1 | 	add	result1, #3
1e6f4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e6f8     FD FA C1 FA | 	rdbyte	result1, result1
1e6fc     00 00 90 FD | 	jmp	#_scantochar_ret
1e700                 | LR__2404
1e700                 | _scantochar_ret
1e700     2D 00 64 FD | 	ret
1e704                 | 
1e704                 | _program
1e704     01 4A 05 F6 | 	mov	COUNT_, #1
1e708     A8 00 A0 FD | 	call	#pushregs_
1e70c     70 FC BF FD | 	call	#_startpsram
1e710     40 12 06 F6 | 	mov	arg01, #64
1e714     00 14 06 F6 | 	mov	arg02, #0
1e718     00 16 06 F6 | 	mov	arg03, #0
1e71c     A0 FC BF FD | 	call	#_startvideo
1e720     37 00 00 FF 
1e724     14 E4 05 F1 | 	add	objptr, ##28180
1e728     F2 12 02 FB | 	rdlong	arg01, objptr
1e72c     00 14 06 F6 | 	mov	arg02, #0
1e730     FB 03 00 FF 
1e734     00 17 06 F6 | 	mov	arg03, ##521984
1e738     2B 00 00 FF 
1e73c     48 E5 85 F1 | 	sub	objptr, ##22344
1e740     6C 2E B0 FD | 	call	#_audio096_spin2_start
1e744     FE 16 02 F6 | 	mov	arg03, result2
1e748     2B 00 00 FF 
1e74c     30 E5 05 F1 | 	add	objptr, ##22320
1e750     F2 FA 61 FC | 	wrlong	result1, objptr
1e754     14 E4 05 F1 | 	add	objptr, #20
1e758     F2 16 62 FC | 	wrlong	arg03, objptr
1e75c     37 00 00 FF 
1e760     10 E4 85 F1 | 	sub	objptr, ##28176
1e764     32 12 06 F6 | 	mov	arg01, #50
1e768     9C 37 B0 FD | 	call	#__system___waitms
1e76c     37 00 00 FF 
1e770     10 E4 05 F1 | 	add	objptr, ##28176
1e774     F2 12 02 FB | 	rdlong	arg01, objptr
1e778     37 00 00 FF 
1e77c     10 E4 85 F1 | 	sub	objptr, ##28176
1e780     14 12 06 F1 | 	add	arg01, #20
1e784     20 00 80 FF 
1e788     09 01 58 FC | 	wrword	##16384, arg01
1e78c     78 2B B0 FD | 	call	#_usbnew_spin2_start
1e790     37 00 00 FF 
1e794     04 E4 05 F1 | 	add	objptr, ##28164
1e798     F2 FA 61 FC | 	wrlong	result1, objptr
1e79c                 | '   mouse_limits[0] := xlim
1e79c     0F 00 00 FF 
1e7a0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1e7a4     01 00 80 FF 
1e7a8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1e7ac                 | '   mouse_limits[1] := ylim
1e7ac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e7b0     01 00 80 FF 
1e7b4     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1e7b8     36 00 00 FF 
1e7bc     F3 E4 85 F1 | 	sub	objptr, ##27891
1e7c0     F2 12 02 F6 | 	mov	arg01, objptr
1e7c4     11 E5 85 F1 | 	sub	objptr, #273
1e7c8     C4 12 06 F1 | 	add	arg01, #196
1e7cc                 | '   mouse_outptr := ptr
1e7cc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e7d0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1e7d4     0F 00 00 FF 
1e7d8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e7dc     16 00 00 FF 
1e7e0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1e7e4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1e7e8     16 00 00 FF 
1e7ec     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1e7f0     10 12 06 F6 | 	mov	arg01, #16
1e7f4     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1e7f8     10 12 06 F6 | 	mov	arg01, #16
1e7fc     20 14 06 F6 | 	mov	arg02, #32
1e800     20 16 06 F6 | 	mov	arg03, #32
1e804     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1e808     09 12 C6 F9 | 	decod	arg01, #9
1e80c     2C 15 06 F6 | 	mov	arg02, #300
1e810     4C 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
1e814     F2 16 02 F6 | 	mov	arg03, objptr
1e818     50 00 00 FF 
1e81c     1C E5 05 F1 | 	add	objptr, ##41244
1e820     F2 14 02 F6 | 	mov	arg02, objptr
1e824     0A 17 62 FC | 	wrlong	arg03, arg02
1e828     04 14 06 F1 | 	add	arg02, #4
1e82c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1e830     EF 14 02 F6 | 	mov	arg02, entryptr__
1e834     1E FA 05 F6 | 	mov	result1, #30
1e838     28 E4 61 FD | 	setq	objptr
1e83c     0A FB F1 FC | 	coginit	result1, arg02 wc
1e840     01 FA 65 C6 |  if_b	neg	result1, #1
1e844     04 E4 85 F1 | 	sub	objptr, #4
1e848     F2 FA 61 FC | 	wrlong	result1, objptr
1e84c     01 00 00 FF 
1e850     90 E4 05 F1 | 	add	objptr, ##656
1e854     F2 00 68 FC | 	wrlong	#0, objptr
1e858     1A 00 00 FF 
1e85c     74 E5 85 F1 | 	sub	objptr, ##13684
1e860     F2 04 68 FC | 	wrlong	#2, objptr
1e864     04 E4 05 F1 | 	add	objptr, #4
1e868     F2 26 69 FC | 	wrlong	#147, objptr
1e86c     04 E4 05 F1 | 	add	objptr, #4
1e870     F2 34 69 FC | 	wrlong	#154, objptr
1e874     04 E4 05 F1 | 	add	objptr, #4
1e878     F2 08 68 FC | 	wrlong	#4, objptr
1e87c     04 E4 85 F1 | 	sub	objptr, #4
1e880     F2 16 02 FB | 	rdlong	arg03, objptr
1e884     14 E4 85 F1 | 	sub	objptr, #20
1e888     F2 16 62 FC | 	wrlong	arg03, objptr
1e88c     04 E4 05 F1 | 	add	objptr, #4
1e890     F2 00 68 FC | 	wrlong	#0, objptr
1e894     04 E4 05 F1 | 	add	objptr, #4
1e898     F2 00 68 FC | 	wrlong	#0, objptr
1e89c     19 00 00 FF 
1e8a0     E4 E4 05 F1 | 	add	objptr, ##13028
1e8a4     F2 02 68 FC | 	wrlong	#1, objptr
1e8a8     01 00 00 FF 
1e8ac     9C E4 05 F1 | 	add	objptr, ##668
1e8b0     F2 00 68 FC | 	wrlong	#0, objptr
1e8b4     01 00 00 FF 
1e8b8     00 EA 05 F1 | 	add	ptr__dat__, ##512
1e8bc     08 E4 05 F1 | 	add	objptr, #8
1e8c0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1e8c4     04 E4 85 F1 | 	sub	objptr, #4
1e8c8     03 00 80 FF 
1e8cc     F2 3C 69 FC | 	wrlong	##1694, objptr
1e8d0     0C 00 00 FF 
1e8d4     50 E5 85 F1 | 	sub	objptr, ##6480
1e8d8     F2 18 68 FC | 	wrlong	#12, objptr
1e8dc     45 00 00 FF 
1e8e0     64 E4 85 F1 | 	sub	objptr, ##35428
1e8e4     01 00 00 FF 
1e8e8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1e8ec     BC DA BF FD | 	call	#_init_commands
1e8f0     90 F6 BF FD | 	call	#_init_error_strings
1e8f4     14 EE BF FD | 	call	#_init_audio
1e8f8     50 4D BF FD | 	call	#_do_new
1e8fc     37 00 00 FF 
1e900     3C E4 05 F1 | 	add	objptr, ##28220
1e904     F2 12 02 FB | 	rdlong	arg01, objptr
1e908     04 E4 85 F1 | 	sub	objptr, #4
1e90c     F2 14 02 FB | 	rdlong	arg02, objptr
1e910     37 00 00 FF 
1e914     38 E4 85 F1 | 	sub	objptr, ##28216
1e918     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1e91c     37 00 00 FF 
1e920     40 E4 05 F1 | 	add	objptr, ##28224
1e924     F2 12 02 FB | 	rdlong	arg01, objptr
1e928     37 00 00 FF 
1e92c     40 E4 85 F1 | 	sub	objptr, ##28224
1e930     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1e934                 | ' 
1e934                 | ' leading_spaces:=amount
1e934     01 00 00 FF 
1e938     B6 E4 05 F1 | 	add	objptr, ##694
1e93c     F2 04 68 FC | 	wrlong	#2, objptr
1e940     01 00 00 FF 
1e944     B6 E4 85 F1 | 	sub	objptr, ##694
1e948     93 01 00 FF 
1e94c     3B 27 06 F6 | 	mov	local01, ##@LR__5709
1e950     3D 12 06 F6 | 	mov	arg01, #61
1e954     3C 14 06 F6 | 	mov	arg02, #60
1e958     3B 16 06 F6 | 	mov	arg03, #59
1e95c     3A 18 06 F6 | 	mov	arg04, #58
1e960     78 7F B0 FD | 	call	#__system___vfs_open_sdcardx
1e964     FD 14 02 F6 | 	mov	arg02, result1
1e968     13 13 02 F6 | 	mov	arg01, local01
1e96c     70 36 B0 FD | 	call	#__system___mount
1e970     93 01 00 FF 
1e974     3F 13 06 F6 | 	mov	arg01, ##@LR__5710
1e978     24 39 B0 FD | 	call	#__system___chdir
1e97c     93 01 00 FF 
1e980     47 27 06 F6 | 	mov	local01, ##@LR__5711
1e984     4A 00 00 FF 
1e988     94 E4 05 F1 | 	add	objptr, ##38036
1e98c     F2 26 62 FC | 	wrlong	local01, objptr
1e990     13 00 00 FF 
1e994     60 E4 85 F1 | 	sub	objptr, ##9824
1e998     F2 12 02 FB | 	rdlong	arg01, objptr
1e99c     37 00 00 FF 
1e9a0     34 E4 85 F1 | 	sub	objptr, ##28212
1e9a4     01 12 66 F0 | 	shl	arg01, #1
1e9a8     01 14 06 F6 | 	mov	arg02, #1
1e9ac     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1e9b0                 | ' init_commands
1e9b0                 | ' init_error_strings
1e9b0                 | ' init_audio
1e9b0                 | ' do_new
1e9b0                 | ' cls(ink, paper)
1e9b0                 | ' v.setfontfamily(font) 				' use ST Mono font
1e9b0                 | ' v.setleadingspaces(2)
1e9b0                 | ' mount "/sd", _vfs_open_sdcard()
1e9b0                 | ' chdir "/sd/bas"
1e9b0                 | ' currentdir$="/sd/bas"
1e9b0                 | ' position 2*editor_spaces,1 : print ver$
1e9b0     00 12 06 F6 | 	mov	arg01, #0
1e9b4     88 8F B0 FD | 	call	#__system___getiolock_0574
1e9b8     FD 12 02 F6 | 	mov	arg01, result1
1e9bc     54 32 B0 FD | 	call	#__system___lockmem
1e9c0     18 00 00 FF 
1e9c4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1e9c8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1e9cc     18 00 00 FF 
1e9d0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1e9d4     00 12 06 F6 | 	mov	arg01, #0
1e9d8     00 16 06 F6 | 	mov	arg03, #0
1e9dc     28 3F B0 FD | 	call	#__system___basic_print_string
1e9e0     00 12 06 F6 | 	mov	arg01, #0
1e9e4     0A 14 06 F6 | 	mov	arg02, #10
1e9e8     00 16 06 F6 | 	mov	arg03, #0
1e9ec     C0 3E B0 FD | 	call	#__system___basic_print_char
1e9f0     00 12 06 F6 | 	mov	arg01, #0
1e9f4     48 8F B0 FD | 	call	#__system___getiolock_0574
1e9f8     FD 00 68 FC | 	wrlong	#0, result1
1e9fc     51 00 00 FF 
1ea00     AC E5 05 F1 | 	add	objptr, ##41900
1ea04     F2 12 02 FB | 	rdlong	arg01, objptr
1ea08     0E 00 00 FF 
1ea0c     50 E5 85 F1 | 	sub	objptr, ##7504
1ea10     F2 26 02 FB | 	rdlong	local01, objptr
1ea14     43 00 00 FF 
1ea18     5C E4 85 F1 | 	sub	objptr, ##34396
1ea1c     13 13 82 F1 | 	sub	arg01, local01
1ea20     00 14 06 F6 | 	mov	arg02, #0
1ea24     0A 16 06 F6 | 	mov	arg03, #10
1ea28     B8 54 B0 FD | 	call	#__system__Number_S
1ea2c     FD 12 02 F6 | 	mov	arg01, result1
1ea30     93 01 00 FF 
1ea34     4F 15 06 F6 | 	mov	arg02, ##@LR__5712
1ea38     34 32 B0 FD | 	call	#__system___string_concat
1ea3c     FD 26 02 F6 | 	mov	local01, result1
1ea40     50 00 00 FF 
1ea44     10 E5 05 F1 | 	add	objptr, ##41232
1ea48     F2 26 62 FC | 	wrlong	local01, objptr
1ea4c     50 00 00 FF 
1ea50     10 E5 85 F1 | 	sub	objptr, ##41232
1ea54                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1ea54     00 12 06 F6 | 	mov	arg01, #0
1ea58     E4 8E B0 FD | 	call	#__system___getiolock_0574
1ea5c     FD 12 02 F6 | 	mov	arg01, result1
1ea60     B0 31 B0 FD | 	call	#__system___lockmem
1ea64     50 00 00 FF 
1ea68     10 E5 05 F1 | 	add	objptr, ##41232
1ea6c     F2 14 02 FB | 	rdlong	arg02, objptr
1ea70     50 00 00 FF 
1ea74     10 E5 85 F1 | 	sub	objptr, ##41232
1ea78     00 12 06 F6 | 	mov	arg01, #0
1ea7c     00 16 06 F6 | 	mov	arg03, #0
1ea80     84 3E B0 FD | 	call	#__system___basic_print_string
1ea84     00 12 06 F6 | 	mov	arg01, #0
1ea88     0A 14 06 F6 | 	mov	arg02, #10
1ea8c     00 16 06 F6 | 	mov	arg03, #0
1ea90     1C 3E B0 FD | 	call	#__system___basic_print_char
1ea94     00 12 06 F6 | 	mov	arg01, #0
1ea98     A4 8E B0 FD | 	call	#__system___getiolock_0574
1ea9c     FD 00 68 FC | 	wrlong	#0, result1
1eaa0     37 00 00 FF 
1eaa4     34 E4 05 F1 | 	add	objptr, ##28212
1eaa8     F2 12 02 FB | 	rdlong	arg01, objptr
1eaac     37 00 00 FF 
1eab0     34 E4 85 F1 | 	sub	objptr, ##28212
1eab4     01 12 66 F0 | 	shl	arg01, #1
1eab8     04 14 06 F6 | 	mov	arg02, #4
1eabc     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1eac0                 | ' position 2*editor_spaces,4 : print "Ready"
1eac0     00 12 06 F6 | 	mov	arg01, #0
1eac4     78 8E B0 FD | 	call	#__system___getiolock_0574
1eac8     FD 12 02 F6 | 	mov	arg01, result1
1eacc     44 31 B0 FD | 	call	#__system___lockmem
1ead0     93 01 00 FF 
1ead4     61 15 06 F6 | 	mov	arg02, ##@LR__5713
1ead8     00 12 06 F6 | 	mov	arg01, #0
1eadc     00 16 06 F6 | 	mov	arg03, #0
1eae0     24 3E B0 FD | 	call	#__system___basic_print_string
1eae4     00 12 06 F6 | 	mov	arg01, #0
1eae8     0A 14 06 F6 | 	mov	arg02, #10
1eaec     00 16 06 F6 | 	mov	arg03, #0
1eaf0     BC 3D B0 FD | 	call	#__system___basic_print_char
1eaf4     00 12 06 F6 | 	mov	arg01, #0
1eaf8     44 8E B0 FD | 	call	#__system___getiolock_0574
1eafc     FD 00 68 FC | 	wrlong	#0, result1
1eb00     00 14 06 F6 | 	mov	arg02, #0
1eb04     01 14 D6 F7 | 	test	arg02, #1 wc
1eb08     5A 4C 64 FD | 	drvc	#38
1eb0c     01 14 D6 F7 | 	test	arg02, #1 wc
1eb10     5A 4E 64 FD | 	drvc	#39
1eb14     93 01 00 FF 
1eb18     67 27 06 F6 | 	mov	local01, ##@LR__5714
1eb1c     51 00 00 FF 
1eb20     D8 E5 05 F1 | 	add	objptr, ##41944
1eb24     F2 26 62 FC | 	wrlong	local01, objptr
1eb28     04 E4 05 F1 | 	add	objptr, #4
1eb2c     FF FF FF FF 
1eb30     F2 FE 6B FC | 	wrlong	##-1, objptr
1eb34     0C E4 05 F1 | 	add	objptr, #12
1eb38     F2 00 68 FC | 	wrlong	#0, objptr
1eb3c     51 00 00 FF 
1eb40     E8 E5 85 F1 | 	sub	objptr, ##41960
1eb44                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1eb44                 | ' loadname="noname.bas"
1eb44                 | ' do_insert=-1
1eb44                 | ' inload=0
1eb44                 | ' '-------------------------------------------------------------------------------------------------------- 
1eb44                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1eb44                 | ' '--------------------------------------------------------------------------------------------------------
1eb44                 | ' 
1eb44                 | ' do
1eb44                 | LR__2410
1eb44     BC 1C BE FD | 	call	#_edit
1eb48     FD 26 02 F6 | 	mov	local01, result1
1eb4c     37 00 00 FF 
1eb50     1C E4 05 F1 | 	add	objptr, ##28188
1eb54     F2 26 62 FC | 	wrlong	local01, objptr
1eb58     37 00 00 FF 
1eb5c     1C E4 85 F1 | 	sub	objptr, ##28188
1eb60     E4 2B BE FD | 	call	#_interpret
1eb64     93 01 00 FF 
1eb68     72 27 06 F6 | 	mov	local01, ##@LR__5715
1eb6c     37 00 00 FF 
1eb70     1C E4 05 F1 | 	add	objptr, ##28188
1eb74     F2 26 62 FC | 	wrlong	local01, objptr
1eb78     37 00 00 FF 
1eb7c     1C E4 85 F1 | 	sub	objptr, ##28188
1eb80     C0 FF 9F FD | 	jmp	#LR__2410
1eb84     A7 F0 03 F6 | 	mov	ptra, fp
1eb88     B2 00 A0 FD | 	call	#popregs_
1eb8c                 | _program_ret
1eb8c     2D 00 64 FD | 	ret
1eb90                 | 
1eb90                 | ' '' this is not a main program.
1eb90                 | ' 
1eb90                 | ' '****************************************************************************************************************
1eb90                 | ' '                                                                                                             	*
1eb90                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1eb90                 | ' '                                                                                                            	*
1eb90                 | ' ' base - HDMI base pin												*
1eb90                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1eb90                 | ' '														*
1eb90                 | ' '														*
1eb90                 | ' '****************************************************************************************************************
1eb90                 | ' 
1eb90                 | ' pub start(base,mb):result |i
1eb90                 | _hg010b_spin2_start
1eb90                 | ' 
1eb90                 | ' '--------------------------- initialize pointers and variables
1eb90                 | ' 
1eb90                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1eb90     34 E4 05 F1 | 	add	objptr, #52
1eb94     F2 FA 01 F6 | 	mov	result1, objptr
1eb98     28 E4 85 F1 | 	sub	objptr, #40
1eb9c     F2 FA 61 FC | 	wrlong	result1, objptr
1eba0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1eba0                 | ' hdmibase:=base							' HDMI base pin, 8*n
1eba0     18 E4 05 F1 | 	add	objptr, #24
1eba4     F2 12 62 FC | 	wrlong	arg01, objptr
1eba8                 | ' mailbox_ptr:=mb		
1eba8     04 E4 05 F1 | 	add	objptr, #4
1ebac     F2 14 62 FC | 	wrlong	arg02, objptr
1ebb0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1ebb0     C1 E5 05 F1 | 	add	objptr, #449
1ebb4     F2 14 62 FC | 	wrlong	arg02, objptr
1ebb8                 | ' sprite_ptr:=@spr1ptr
1ebb8     D8 E4 85 F1 | 	sub	objptr, #216
1ebbc     F2 FA 01 F6 | 	mov	result1, objptr
1ebc0     E5 E4 85 F1 | 	sub	objptr, #229
1ebc4     F2 FA 61 FC | 	wrlong	result1, objptr
1ebc8                 | ' 
1ebc8                 | ' 		'
1ebc8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1ebc8     E5 E4 05 F1 | 	add	objptr, #229
1ebcc     F2 FA 01 FB | 	rdlong	result1, objptr
1ebd0     D0 FA 05 F1 | 	add	result1, #208
1ebd4     FD 10 58 FC | 	wrword	#8, result1
1ebd8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1ebd8     F2 16 02 FB | 	rdlong	arg03, objptr
1ebdc     D2 16 06 F1 | 	add	arg03, #210
1ebe0     0B 21 58 FC | 	wrword	#16, arg03
1ebe4                 | ' leading_spaces:=0				'
1ebe4     A5 E5 05 F1 | 	add	objptr, #421
1ebe8     F2 00 68 FC | 	wrlong	#0, objptr
1ebec                 | ' 
1ebec                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1ebec     99 E4 85 F1 | 	sub	objptr, #153
1ebf0     00 00 A0 FF 
1ebf4     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1ebf8                 | ' emptydl[1]:=0
1ebf8     04 E4 05 F1 | 	add	objptr, #4
1ebfc     F2 00 68 FC | 	wrlong	#0, objptr
1ec00                 | ' 
1ec00                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1ec00                 | ' 
1ec00                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1ec00     28 E5 85 F1 | 	sub	objptr, #296
1ec04     F2 02 68 FC | 	wrlong	#1, objptr
1ec08                 | ' if s_debug<>0
1ec08                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1ec08     20 00 80 FF 
1ec0c     F2 00 68 FC | 	wrlong	##16384, objptr
1ec10     F9 E4 85 F1 | 	sub	objptr, #249
1ec14                 | ' setmode()							' set the mode, see below
1ec14     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1ec18                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1ec18     49 E4 05 F1 | 	add	objptr, #73
1ec1c     F2 FA 01 F6 | 	mov	result1, objptr
1ec20     35 E4 85 F1 | 	sub	objptr, #53
1ec24     F2 FA 61 FC | 	wrlong	result1, objptr
1ec28                 | ' cursor_ptr:=@cursor_x						
1ec28     28 E4 05 F1 | 	add	objptr, #40
1ec2c     F2 16 02 F6 | 	mov	arg03, objptr
1ec30     2C E4 85 F1 | 	sub	objptr, #44
1ec34     F2 16 62 FC | 	wrlong	arg03, objptr
1ec38                 | ' fontnum:=0  							' start with a PC type font 
1ec38     55 E4 05 F1 | 	add	objptr, #85
1ec3c     F2 00 68 FC | 	wrlong	#0, objptr
1ec40                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1ec40     1C E4 05 F1 | 	add	objptr, #28
1ec44     F2 12 02 F6 | 	mov	arg01, objptr
1ec48     81 E4 85 F1 | 	sub	objptr, #129
1ec4c     10 00 00 FF 
1ec50     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1ec54     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ec58     10 00 00 FF 
1ec5c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1ec60     10 16 06 F6 | 	mov	arg03, #16
1ec64     CC 2E B0 FD | 	call	#__system____builtin_memmove
1ec68                 | ' leading_spaces:=0
1ec68     01 00 00 FF 
1ec6c     B6 E4 05 F1 | 	add	objptr, ##694
1ec70     F2 00 68 FC | 	wrlong	#0, objptr
1ec74     01 00 00 FF 
1ec78     B6 E4 85 F1 | 	sub	objptr, ##694
1ec7c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1ec7c                 | ' 
1ec7c                 | ' initcursor(154)
1ec7c     9A 12 06 F6 | 	mov	arg01, #154
1ec80     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1ec84                 | ' 
1ec84                 | ' '---------------------------- start the cog
1ec84                 | ' 
1ec84                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1ec84     10 00 00 FF 
1ec88     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1ec8c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ec90     10 00 00 FF 
1ec94     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1ec98     14 E4 05 F1 | 	add	objptr, #20
1ec9c     10 FA 05 F6 | 	mov	result1, #16
1eca0     28 E4 61 FD | 	setq	objptr
1eca4     0A FB F1 FC | 	coginit	result1, arg02 wc
1eca8     01 FA 65 C6 |  if_b	neg	result1, #1
1ecac     1C E4 05 F1 | 	add	objptr, #28
1ecb0     F2 FA 61 FC | 	wrlong	result1, objptr
1ecb4     30 E4 85 F1 | 	sub	objptr, #48
1ecb8                 | ' waitms(40)							' wait for stabilize
1ecb8     28 12 06 F6 | 	mov	arg01, #40
1ecbc     48 32 B0 FD | 	call	#__system___waitms
1ecc0                 | ' return cog							' return the driver's cog #
1ecc0     30 E4 05 F1 | 	add	objptr, #48
1ecc4     F2 FA 01 FB | 	rdlong	result1, objptr
1ecc8     30 E4 85 F1 | 	sub	objptr, #48
1eccc                 | _hg010b_spin2_start_ret
1eccc     2D 00 64 FD | 	ret
1ecd0                 | 
1ecd0                 | ' 
1ecd0                 | ' 
1ecd0                 | ' '**************************************************************************************************************** 
1ecd0                 | ' '                                                                                                             	*
1ecd0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1ecd0                 | ' '  Mode number - see start() above or bits below								*
1ecd0                 | ' '                                                                                                             	*
1ecd0                 | ' '****************************************************************************************************************
1ecd0                 | ' 
1ecd0                 | ' '---------------------------- initialize a cursor (MSDOS type)
1ecd0                 | ' pub initcursor(color) |i
1ecd0                 | _hg010b_spin2_initcursor
1ecd0     03 4A 05 F6 | 	mov	COUNT_, #3
1ecd4     A8 00 A0 FD | 	call	#pushregs_
1ecd8     09 27 02 F6 | 	mov	local01, arg01
1ecdc                 | ' 
1ecdc                 | ' cursor_x:=0							' place the cursor at 0:0
1ecdc     3C E4 05 F1 | 	add	objptr, #60
1ece0     F2 00 58 FC | 	wrword	#0, objptr
1ece4                 | ' cursor_y:=0
1ece4     02 E4 05 F1 | 	add	objptr, #2
1ece8     F2 00 48 FC | 	wrbyte	#0, objptr
1ecec                 | ' repeat i from 0 to 111
1ecec     00 28 06 F6 | 	mov	local02, #0
1ecf0     F8 E5 05 F1 | 	add	objptr, #504
1ecf4     97 1A 48 FB | 	callpa	#(@LR__2422-@LR__2420)>>2,fcache_load_ptr_
1ecf8                 | LR__2420
1ecf8                 | '   cursor[i]:=0
1ecf8     14 2B 02 F6 | 	mov	local03, local02
1ecfc     F2 2A 02 F1 | 	add	local03, objptr
1ed00     15 01 48 FC | 	wrbyte	#0, local03
1ed04     01 28 06 F1 | 	add	local02, #1
1ed08     70 28 56 F2 | 	cmps	local02, #112 wc
1ed0c     E8 FF 9F CD |  if_b	jmp	#LR__2420
1ed10                 | ' repeat i from 112 to 127
1ed10     70 28 06 F6 | 	mov	local02, #112
1ed14                 | LR__2421
1ed14                 | '   cursor[i]:=color  
1ed14     14 2B 02 F6 | 	mov	local03, local02
1ed18     F2 2A 02 F1 | 	add	local03, objptr
1ed1c     15 27 42 FC | 	wrbyte	local01, local03
1ed20     01 28 06 F1 | 	add	local02, #1
1ed24     80 28 16 F2 | 	cmp	local02, #128 wc
1ed28     E8 FF 9F CD |  if_b	jmp	#LR__2421
1ed2c                 | LR__2422
1ed2c                 | ' 'repeat i from 0 to 127
1ed2c                 | ' '  if ((i/8)//2)
1ed2c                 | ' '    cursor[i]:=15
1ed2c                 | ' '  else
1ed2c                 | ' '    cursor[i]:=0
1ed2c                 | ' '  if i>=120    
1ed2c                 | ' '    cursor[i]:=40
1ed2c                 | ' setspriteptr(17,@cursor)
1ed2c     F2 14 02 F6 | 	mov	arg02, objptr
1ed30     01 00 00 FF 
1ed34     36 E4 85 F1 | 	sub	objptr, ##566
1ed38     11 12 06 F6 | 	mov	arg01, #17
1ed3c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ed40                 | ' setspritesize(17,8,16)
1ed40     11 12 06 F6 | 	mov	arg01, #17
1ed44     08 14 06 F6 | 	mov	arg02, #8
1ed48     10 16 06 F6 | 	mov	arg03, #16
1ed4c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1ed50                 | ' setspritepos(17,0,0)
1ed50     11 12 06 F6 | 	mov	arg01, #17
1ed54     00 14 06 F6 | 	mov	arg02, #0
1ed58     00 16 06 F6 | 	mov	arg03, #0
1ed5c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ed60                 | ' cursorshape:=14
1ed60     0B 00 00 FF 
1ed64     C6 E4 05 F1 | 	add	objptr, ##5830
1ed68     F2 1C 68 FC | 	wrlong	#14, objptr
1ed6c                 | ' cursorcolor:=color
1ed6c     04 E4 85 F1 | 	sub	objptr, #4
1ed70     F2 26 62 FC | 	wrlong	local01, objptr
1ed74     0B 00 00 FF 
1ed78     C2 E4 85 F1 | 	sub	objptr, ##5826
1ed7c     A7 F0 03 F6 | 	mov	ptra, fp
1ed80     B2 00 A0 FD | 	call	#popregs_
1ed84                 | _hg010b_spin2_initcursor_ret
1ed84     2D 00 64 FD | 	ret
1ed88                 | 
1ed88                 | ' 
1ed88                 | ' pub setcursorshape(shape) | i
1ed88                 | _hg010b_spin2_setcursorshape
1ed88                 | ' 
1ed88                 | ' cursorshape:=shape
1ed88     0B 00 00 FF 
1ed8c     C6 E4 05 F1 | 	add	objptr, ##5830
1ed90     F2 12 62 FC | 	wrlong	arg01, objptr
1ed94                 | ' repeat i from 0 to (8*cursorshape)-1
1ed94     00 00 06 F6 | 	mov	_var01, #0
1ed98     09 03 02 F6 | 	mov	_var02, arg01
1ed9c     03 02 66 F0 | 	shl	_var02, #3
1eda0     01 02 86 F1 | 	sub	_var02, #1
1eda4     00 02 56 F2 | 	cmps	_var02, #0 wc
1eda8     01 04 86 F6 | 	negc	_var03, #1
1edac     02 07 02 F6 | 	mov	_var04, _var03
1edb0     02 03 02 F1 | 	add	_var02, _var03
1edb4     0A 00 00 FF 
1edb8     90 E4 85 F1 | 	sub	objptr, ##5264
1edbc     97 0C 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1edc0                 | LR__2430
1edc0                 | '   cursor[i]:=0
1edc0     00 05 02 F6 | 	mov	_var03, _var01
1edc4     F2 04 02 F1 | 	add	_var03, objptr
1edc8     02 01 48 FC | 	wrbyte	#0, _var03
1edcc     03 01 02 F1 | 	add	_var01, _var04
1edd0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1edd4     E8 FF 9F 5D |  if_ne	jmp	#LR__2430
1edd8                 | LR__2431
1edd8                 | ' repeat i from 8*cursorshape to 127
1edd8     0A 00 00 FF 
1eddc     90 E4 05 F1 | 	add	objptr, ##5264
1ede0     F2 06 02 FB | 	rdlong	_var04, objptr
1ede4     03 01 02 F6 | 	mov	_var01, _var04
1ede8     03 00 66 F0 | 	shl	_var01, #3
1edec     0B 00 00 FF 
1edf0     C6 E4 85 F1 | 	sub	objptr, ##5830
1edf4     03 06 66 F0 | 	shl	_var04, #3
1edf8     80 06 56 F2 | 	cmps	_var04, #128 wc
1edfc     01 04 A6 F6 | 	negnc	_var03, #1
1ee00     7F 02 06 F6 | 	mov	_var02, #127
1ee04     02 03 02 F1 | 	add	_var02, _var03
1ee08     97 1A 48 FB | 	callpa	#(@LR__2433-@LR__2432)>>2,fcache_load_ptr_
1ee0c                 | LR__2432
1ee0c                 | '   cursor[i]:=cursorcolor
1ee0c     00 07 02 F6 | 	mov	_var04, _var01
1ee10     01 00 00 FF 
1ee14     36 E4 05 F1 | 	add	objptr, ##566
1ee18     F2 06 02 F1 | 	add	_var04, objptr
1ee1c     0A 00 00 FF 
1ee20     8C E4 05 F1 | 	add	objptr, ##5260
1ee24     F2 12 02 FB | 	rdlong	arg01, objptr
1ee28     0B 00 00 FF 
1ee2c     C2 E4 85 F1 | 	sub	objptr, ##5826
1ee30     03 13 42 FC | 	wrbyte	arg01, _var04
1ee34     02 01 02 F1 | 	add	_var01, _var03
1ee38     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ee3c     CC FF 9F 5D |  if_ne	jmp	#LR__2432
1ee40                 | LR__2433
1ee40                 | _hg010b_spin2_setcursorshape_ret
1ee40     2D 00 64 FD | 	ret
1ee44                 | 
1ee44                 | ' 
1ee44                 | ' pub setcursorcolor(color) | i
1ee44                 | _hg010b_spin2_setcursorcolor
1ee44                 | ' 
1ee44                 | ' cursorcolor:=color
1ee44     0B 00 00 FF 
1ee48     C2 E4 05 F1 | 	add	objptr, ##5826
1ee4c     F2 12 62 FC | 	wrlong	arg01, objptr
1ee50                 | ' repeat i from 0 to (8*cursorshape)-1
1ee50     00 12 06 F6 | 	mov	arg01, #0
1ee54     04 E4 05 F1 | 	add	objptr, #4
1ee58     F2 00 02 FB | 	rdlong	_var01, objptr
1ee5c     03 00 66 F0 | 	shl	_var01, #3
1ee60     01 00 86 F1 | 	sub	_var01, #1
1ee64     00 00 56 F2 | 	cmps	_var01, #0 wc
1ee68     01 02 86 F6 | 	negc	_var02, #1
1ee6c     01 05 02 F6 | 	mov	_var03, _var02
1ee70     01 01 02 F1 | 	add	_var01, _var02
1ee74     0A 00 00 FF 
1ee78     90 E4 85 F1 | 	sub	objptr, ##5264
1ee7c     97 0C 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1ee80                 | LR__2440
1ee80                 | '   cursor[i]:=0
1ee80     09 03 02 F6 | 	mov	_var02, arg01
1ee84     F2 02 02 F1 | 	add	_var02, objptr
1ee88     01 01 48 FC | 	wrbyte	#0, _var02
1ee8c     02 13 02 F1 | 	add	arg01, _var03
1ee90     00 13 0A F2 | 	cmp	arg01, _var01 wz
1ee94     E8 FF 9F 5D |  if_ne	jmp	#LR__2440
1ee98                 | LR__2441
1ee98                 | ' repeat i from 8*cursorshape to 127
1ee98     0A 00 00 FF 
1ee9c     90 E4 05 F1 | 	add	objptr, ##5264
1eea0     F2 04 02 FB | 	rdlong	_var03, objptr
1eea4     02 13 02 F6 | 	mov	arg01, _var03
1eea8     03 12 66 F0 | 	shl	arg01, #3
1eeac     0B 00 00 FF 
1eeb0     C6 E4 85 F1 | 	sub	objptr, ##5830
1eeb4     03 04 66 F0 | 	shl	_var03, #3
1eeb8     80 04 56 F2 | 	cmps	_var03, #128 wc
1eebc     01 02 A6 F6 | 	negnc	_var02, #1
1eec0     7F 00 06 F6 | 	mov	_var01, #127
1eec4     01 01 02 F1 | 	add	_var01, _var02
1eec8     97 1A 48 FB | 	callpa	#(@LR__2443-@LR__2442)>>2,fcache_load_ptr_
1eecc                 | LR__2442
1eecc                 | '   cursor[i]:=cursorcolor
1eecc     09 05 02 F6 | 	mov	_var03, arg01
1eed0     01 00 00 FF 
1eed4     36 E4 05 F1 | 	add	objptr, ##566
1eed8     F2 04 02 F1 | 	add	_var03, objptr
1eedc     0A 00 00 FF 
1eee0     8C E4 05 F1 | 	add	objptr, ##5260
1eee4     F2 06 02 FB | 	rdlong	_var04, objptr
1eee8     0B 00 00 FF 
1eeec     C2 E4 85 F1 | 	sub	objptr, ##5826
1eef0     02 07 42 FC | 	wrbyte	_var04, _var03
1eef4     01 13 02 F1 | 	add	arg01, _var02
1eef8     00 13 0A F2 | 	cmp	arg01, _var01 wz
1eefc     CC FF 9F 5D |  if_ne	jmp	#LR__2442
1ef00                 | LR__2443
1ef00                 | _hg010b_spin2_setcursorcolor_ret
1ef00     2D 00 64 FD | 	ret
1ef04                 | 
1ef04                 | '   
1ef04                 | '   
1ef04                 | '   
1ef04                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1ef04                 | _hg010b_spin2_setmode
1ef04     02 4A 05 F6 | 	mov	COUNT_, #2
1ef08     A8 00 A0 FD | 	call	#pushregs_
1ef0c                 | ' 
1ef0c                 | ' 
1ef0c                 | ' dl_ptr:=@emptydl[0]
1ef0c     01 00 00 FF 
1ef10     1D E4 05 F1 | 	add	objptr, ##541
1ef14     F2 1A 02 F6 | 	mov	arg05, objptr
1ef18     FD E5 85 F1 | 	sub	objptr, #509
1ef1c     F2 1A 62 FC | 	wrlong	arg05, objptr
1ef20                 | ' 
1ef20                 | ' if cog>0 
1ef20     10 E4 05 F1 | 	add	objptr, #16
1ef24     F2 1A 02 FB | 	rdlong	arg05, objptr
1ef28     30 E4 85 F1 | 	sub	objptr, #48
1ef2c     01 1A 56 F2 | 	cmps	arg05, #1 wc
1ef30                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1ef30     01 12 06 36 |  if_ae	mov	arg01, #1
1ef34     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1ef38                 | ' xres:=1024
1ef38     01 00 00 FF 
1ef3c     26 E4 05 F1 | 	add	objptr, ##550
1ef40     02 00 80 FF 
1ef44     F2 00 68 FC | 	wrlong	##1024, objptr
1ef48                 | ' yres:=600
1ef48     04 E4 05 F1 | 	add	objptr, #4
1ef4c     01 00 80 FF 
1ef50     F2 B0 68 FC | 	wrlong	##600, objptr
1ef54                 | ' ppl:=(timings[3])
1ef54     10 00 00 FF 
1ef58     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1ef5c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ef60     51 E5 85 F1 | 	sub	objptr, #337
1ef64     F2 1A 62 FC | 	wrlong	arg05, objptr
1ef68                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1ef68     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1ef6c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1ef70     01 26 66 F0 | 	shl	local01, #1
1ef74     80 E4 85 F1 | 	sub	objptr, #128
1ef78     F2 26 62 FC | 	wrlong	local01, objptr
1ef7c                 | ' cpl1:=cpl '' todo remove
1ef7c     04 E4 05 F1 | 	add	objptr, #4
1ef80     F2 26 62 FC | 	wrlong	local01, objptr
1ef84                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1ef84     02 00 00 FF 
1ef88     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1ef8c     41 E4 85 F1 | 	sub	objptr, #65
1ef90     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1ef94                 | ' repeat i from 0 to 3
1ef94     00 28 06 F6 | 	mov	local02, #0
1ef98     02 00 00 FF 
1ef9c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1efa0     08 E4 05 F1 | 	add	objptr, #8
1efa4     97 20 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1efa8                 | LR__2450
1efa8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1efa8     14 27 02 F6 | 	mov	local01, local02
1efac     02 26 66 F0 | 	shl	local01, #2
1efb0     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1efb4     F2 1A 02 FB | 	rdlong	arg05, objptr
1efb8     11 1A 66 F0 | 	shl	arg05, #17
1efbc     13 27 02 FB | 	rdlong	local01, local01
1efc0     0D 27 02 F1 | 	add	local01, arg05
1efc4     80 40 38 FF 
1efc8     00 26 06 F1 | 	add	local01, ##1887502336
1efcc     14 1B 02 F6 | 	mov	arg05, local02
1efd0     02 1A 66 F0 | 	shl	arg05, #2
1efd4     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1efd8     0D 27 62 FC | 	wrlong	local01, arg05
1efdc     01 28 06 F1 | 	add	local02, #1
1efe0     04 28 56 F2 | 	cmps	local02, #4 wc
1efe4     C0 FF 9F CD |  if_b	jmp	#LR__2450
1efe8                 | LR__2451
1efe8     24 E4 85 F1 | 	sub	objptr, #36
1efec                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1efec     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1eff0     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1eff4     14 26 66 FC | 	wrlong	local01, #20
1eff8                 | ' hubset(timings[10])
1eff8     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1effc     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1f000     10 00 00 FF 
1f004     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1f008     00 12 62 FD | 	hubset	arg01
1f00c                 | ' waitms(1)                                                   	' wait for stabilization
1f00c     01 12 06 F6 | 	mov	arg01, #1
1f010     F4 2E B0 FD | 	call	#__system___waitms
1f014     10 00 00 FF 
1f018     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1f01c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f020     61 E4 05 F1 | 	add	objptr, #97
1f024     F2 28 62 FC | 	wrlong	local02, objptr
1f028     14 27 52 F6 | 	abs	local01, local02 wc
1f02c     04 26 46 F0 | 	shr	local01, #4
1f030     13 27 82 F6 | 	negc	local01, local01
1f034     9C E4 05 F1 | 	add	objptr, #156
1f038     F2 26 62 FC | 	wrlong	local01, objptr
1f03c     A4 E4 85 F1 | 	sub	objptr, #164
1f040     F2 28 02 FB | 	rdlong	local02, objptr
1f044     08 E4 05 F1 | 	add	objptr, #8
1f048     F2 26 02 FB | 	rdlong	local01, objptr
1f04c     13 29 02 FD | 	qmul	local02, local01
1f050                 | ' lines:=timings[11]
1f050                 | ' t_lines:=lines/16
1f050                 | ' buflen:=cpl*lines						' framebuffer length in longs
1f050     29 E4 85 F1 | 	sub	objptr, #41
1f054     19 26 C6 F9 | 	decod	local01, #25
1f058     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1f05c     18 28 62 FD | 	getqx	local02
1f060     F2 28 62 FC | 	wrlong	local02, objptr
1f064     38 E4 85 F1 | 	sub	objptr, #56
1f068     02 28 66 F0 | 	shl	local02, #2
1f06c     14 27 82 F1 | 	sub	local01, local02
1f070     F2 26 62 FC | 	wrlong	local01, objptr
1f074     FD E4 05 F1 | 	add	objptr, #253
1f078     F2 28 02 FB | 	rdlong	local02, objptr
1f07c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f080     0D 29 02 FD | 	qmul	local02, arg05
1f084                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1f084                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1f084     F9 E4 85 F1 | 	sub	objptr, #249
1f088                 | ' mode_ptr:=@timings						' set pointers to timings
1f088     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1f08c                 | ' graphmode:=1024+512+192+48							' det global variable
1f08c                 | ' makedl(graphmode)							' make a DL for the mode
1f08c     03 00 00 FF 
1f090     F0 12 06 F6 | 	mov	arg01, ##1776
1f094     18 28 62 FD | 	getqx	local02
1f098     14 27 82 F1 | 	sub	local01, local02
1f09c     F2 26 62 FC | 	wrlong	local01, objptr
1f0a0     14 E4 05 F1 | 	add	objptr, #20
1f0a4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1f0a8     79 E4 05 F1 | 	add	objptr, #121
1f0ac     03 00 80 FF 
1f0b0     F2 E0 69 FC | 	wrlong	##1776, objptr
1f0b4     91 E4 85 F1 | 	sub	objptr, #145
1f0b8     10 00 00 FF 
1f0bc     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1f0c0     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1f0c4                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1f0c4     F2 26 02 FB | 	rdlong	local01, objptr
1f0c8     DD E4 05 F1 | 	add	objptr, #221
1f0cc     F2 26 62 FC | 	wrlong	local01, objptr
1f0d0                 | ' s_font_ptr:=font_ptr
1f0d0     D5 E4 85 F1 | 	sub	objptr, #213
1f0d4     F2 26 02 FB | 	rdlong	local01, objptr
1f0d8     D9 E4 05 F1 | 	add	objptr, #217
1f0dc     F2 26 62 FC | 	wrlong	local01, objptr
1f0e0                 | ' s_lines:=lines
1f0e0     80 E4 85 F1 | 	sub	objptr, #128
1f0e4     F2 26 02 FB | 	rdlong	local01, objptr
1f0e8     84 E4 05 F1 | 	add	objptr, #132
1f0ec     F2 26 62 FC | 	wrlong	local01, objptr
1f0f0                 | ' s_buflen:=buflen
1f0f0     AD E4 85 F1 | 	sub	objptr, #173
1f0f4     F2 26 02 FB | 	rdlong	local01, objptr
1f0f8     B5 E4 05 F1 | 	add	objptr, #181
1f0fc     F2 26 62 FC | 	wrlong	local01, objptr
1f100                 | ' s_cpl:=cpl
1f100     94 E4 85 F1 | 	sub	objptr, #148
1f104     F2 26 02 FB | 	rdlong	local01, objptr
1f108     90 E4 05 F1 | 	add	objptr, #144
1f10c     F2 26 62 FC | 	wrlong	local01, objptr
1f110                 | ' s_cpl1:=cpl
1f110     90 E4 85 F1 | 	sub	objptr, #144
1f114     F2 26 02 FB | 	rdlong	local01, objptr
1f118     98 E4 05 F1 | 	add	objptr, #152
1f11c     F2 26 62 FC | 	wrlong	local01, objptr
1f120                 | ' st_lines:=t_lines
1f120     0C E4 05 F1 | 	add	objptr, #12
1f124     F2 26 02 FB | 	rdlong	local01, objptr
1f128     04 E4 05 F1 | 	add	objptr, #4
1f12c     F2 26 62 FC | 	wrlong	local01, objptr
1f130                 | ' ppl:=ppl/xzoom  
1f130     28 E4 85 F1 | 	sub	objptr, #40
1f134     F2 88 02 FB | 	rdlong	muldiva_, objptr
1f138     2C E4 05 F1 | 	add	objptr, #44
1f13c     F2 8A 02 FB | 	rdlong	muldivb_, objptr
1f140     05 E5 85 F1 | 	sub	objptr, #261
1f144     BA 00 A0 FD | 	call	#divide_
1f148     D9 E4 05 F1 | 	add	objptr, #217
1f14c     F2 8A 62 FC | 	wrlong	muldivb_, objptr
1f150                 | ' s_ppl:=ppl
1f150     1C E4 05 F1 | 	add	objptr, #28
1f154     F2 8A 62 FC | 	wrlong	muldivb_, objptr
1f158     F5 E4 85 F1 | 	sub	objptr, #245
1f15c                 | ' waitms(20)							' wait 
1f15c     14 12 06 F6 | 	mov	arg01, #20
1f160     A4 2D B0 FD | 	call	#__system___waitms
1f164                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f164     04 E4 05 F1 | 	add	objptr, #4
1f168     F2 12 02 FB | 	rdlong	arg01, objptr
1f16c     04 E4 85 F1 | 	sub	objptr, #4
1f170     F2 16 02 FB | 	rdlong	arg03, objptr
1f174     09 17 82 F1 | 	sub	arg03, arg01
1f178     20 14 06 F6 | 	mov	arg02, #32
1f17c     00 18 06 F6 | 	mov	arg04, #0
1f180     01 1A 06 F6 | 	mov	arg05, #1
1f184     0B 00 00 FF 
1f188     CC E4 05 F1 | 	add	objptr, ##5836
1f18c     7C 1F B0 FD | 	call	#_psram_spin2_fill
1f190     0B 00 00 FF 
1f194     CC E4 85 F1 | 	sub	objptr, ##5836
1f198     A7 F0 03 F6 | 	mov	ptra, fp
1f19c     B2 00 A0 FD | 	call	#popregs_
1f1a0                 | _hg010b_spin2_setmode_ret
1f1a0     2D 00 64 FD | 	ret
1f1a4                 | 
1f1a4                 | ' 
1f1a4                 | ' '****************************************************************************************************************
1f1a4                 | ' '                                                                                                             	*
1f1a4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1f1a4                 | ' '                                                                                                             	*
1f1a4                 | ' '****************************************************************************************************************
1f1a4                 | ' 
1f1a4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1f1a4                 | _hg010b_spin2_makedl
1f1a4                 | ' 
1f1a4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1f1a4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1f1a4                 | ' repeat i from 0 to 11                                                           ' clear DL
1f1a4     00 00 06 F6 | 	mov	_var01, #0
1f1a8     ED E5 05 F1 | 	add	objptr, #493
1f1ac     97 0E 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1f1b0                 | LR__2460
1f1b0                 | '   displaylist[i]:=0 
1f1b0     00 03 02 F6 | 	mov	_var02, _var01
1f1b4     02 02 66 F0 | 	shl	_var02, #2
1f1b8     F2 02 02 F1 | 	add	_var02, objptr
1f1bc     01 01 68 FC | 	wrlong	#0, _var02
1f1c0     01 00 06 F1 | 	add	_var01, #1
1f1c4     0C 00 56 F2 | 	cmps	_var01, #12 wc
1f1c8     E4 FF 9F CD |  if_b	jmp	#LR__2460
1f1cc                 | LR__2461
1f1cc                 | '                         ' 
1f1cc                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1f1cc     8C E5 85 F1 | 	sub	objptr, #396
1f1d0     F2 02 02 FB | 	rdlong	_var02, objptr
1f1d4     14 02 66 F0 | 	shl	_var02, #20
1f1d8     01 02 06 F1 | 	add	_var02, #1
1f1dc     04 E4 85 F1 | 	sub	objptr, #4
1f1e0     F2 00 02 FB | 	rdlong	_var01, objptr
1f1e4     02 00 66 F0 | 	shl	_var01, #2
1f1e8     04 00 66 F0 | 	shl	_var01, #4
1f1ec     00 03 02 F1 | 	add	_var02, _var01
1f1f0     90 E5 05 F1 | 	add	objptr, #400
1f1f4     F2 02 62 FC | 	wrlong	_var02, objptr
1f1f8     ED E5 85 F1 | 	sub	objptr, #493
1f1fc                 | ' displaylist[1]:=buf_ptr<<4+%10  
1f1fc     F2 02 02 FB | 	rdlong	_var02, objptr
1f200     04 02 66 F0 | 	shl	_var02, #4
1f204     02 02 06 F1 | 	add	_var02, #2
1f208     F1 E5 05 F1 | 	add	objptr, #497
1f20c     F2 02 62 FC | 	wrlong	_var02, objptr
1f210                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1f210     04 E4 85 F1 | 	sub	objptr, #4
1f214     F2 02 02 F6 | 	mov	_var02, objptr
1f218     CD E5 85 F1 | 	sub	objptr, #461
1f21c     F2 02 62 FC | 	wrlong	_var02, objptr
1f220     20 E4 85 F1 | 	sub	objptr, #32
1f224                 | _hg010b_spin2_makedl_ret
1f224     2D 00 64 FD | 	ret
1f228                 | 
1f228                 | ' 
1f228                 | ' 
1f228                 | ' '****************************************************************************************************************
1f228                 | ' '                                                                        					*
1f228                 | ' '  Graphic primitives                                                    					*
1f228                 | ' '                                                                        					*
1f228                 | ' '****************************************************************************************************************
1f228                 | ' 
1f228                 | ' pub setspriteptr(num,ptr)
1f228                 | _hg010b_spin2_setspriteptr
1f228                 | ' long[@spr1ptr+12*num]:=ptr
1f228     11 E5 05 F1 | 	add	objptr, #273
1f22c     F2 00 02 F6 | 	mov	_var01, objptr
1f230     09 03 02 F6 | 	mov	_var02, arg01
1f234     01 02 66 F0 | 	shl	_var02, #1
1f238     09 03 02 F1 | 	add	_var02, arg01
1f23c     02 02 66 F0 | 	shl	_var02, #2
1f240     01 01 02 F1 | 	add	_var01, _var02
1f244     00 15 62 FC | 	wrlong	arg02, _var01
1f248     11 E5 85 F1 | 	sub	objptr, #273
1f24c                 | _hg010b_spin2_setspriteptr_ret
1f24c     2D 00 64 FD | 	ret
1f250                 | 
1f250                 | ' 
1f250                 | ' pub setspritepos(num,x,y)
1f250                 | _hg010b_spin2_setspritepos
1f250                 | ' if y>601
1f250     01 00 00 FF 
1f254     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1f258                 | '   y:=601
1f258     01 00 00 3F 
1f25c     59 16 06 36 |  if_ae	mov	arg03, ##601
1f260                 | ' if x>1024
1f260     02 00 00 FF 
1f264     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1f268                 | '   x:=1024
1f268     0A 14 C6 39 |  if_ae	decod	arg02, #10
1f26c                 | ' word[@spr1ptr+12*num+4]:=x
1f26c     11 E5 05 F1 | 	add	objptr, #273
1f270     F2 00 02 F6 | 	mov	_var01, objptr
1f274     09 03 02 F6 | 	mov	_var02, arg01
1f278     01 02 66 F0 | 	shl	_var02, #1
1f27c     09 03 02 F1 | 	add	_var02, arg01
1f280     02 02 66 F0 | 	shl	_var02, #2
1f284     01 01 02 F1 | 	add	_var01, _var02
1f288     04 00 06 F1 | 	add	_var01, #4
1f28c     00 15 52 FC | 	wrword	arg02, _var01
1f290                 | ' word[@spr1ptr+12*num+6]:=y
1f290     F2 00 02 F6 | 	mov	_var01, objptr
1f294     09 03 02 F6 | 	mov	_var02, arg01
1f298     01 02 66 F0 | 	shl	_var02, #1
1f29c     09 03 02 F1 | 	add	_var02, arg01
1f2a0     02 02 66 F0 | 	shl	_var02, #2
1f2a4     01 01 02 F1 | 	add	_var01, _var02
1f2a8     06 00 06 F1 | 	add	_var01, #6
1f2ac     00 17 52 FC | 	wrword	arg03, _var01
1f2b0     11 E5 85 F1 | 	sub	objptr, #273
1f2b4                 | _hg010b_spin2_setspritepos_ret
1f2b4     2D 00 64 FD | 	ret
1f2b8                 | 
1f2b8                 | ' 
1f2b8                 | ' pub setspritesize(num,w,h)
1f2b8                 | _hg010b_spin2_setspritesize
1f2b8                 | ' word[@spr1ptr+12*num+8]:=w
1f2b8     11 E5 05 F1 | 	add	objptr, #273
1f2bc     F2 00 02 F6 | 	mov	_var01, objptr
1f2c0     09 03 02 F6 | 	mov	_var02, arg01
1f2c4     01 02 66 F0 | 	shl	_var02, #1
1f2c8     09 03 02 F1 | 	add	_var02, arg01
1f2cc     02 02 66 F0 | 	shl	_var02, #2
1f2d0     01 01 02 F1 | 	add	_var01, _var02
1f2d4     08 00 06 F1 | 	add	_var01, #8
1f2d8     00 15 52 FC | 	wrword	arg02, _var01
1f2dc                 | ' word[@spr1ptr+12*num+10]:=h
1f2dc     F2 00 02 F6 | 	mov	_var01, objptr
1f2e0     09 03 02 F6 | 	mov	_var02, arg01
1f2e4     01 02 66 F0 | 	shl	_var02, #1
1f2e8     09 03 02 F1 | 	add	_var02, arg01
1f2ec     02 02 66 F0 | 	shl	_var02, #2
1f2f0     01 01 02 F1 | 	add	_var01, _var02
1f2f4     0A 00 06 F1 | 	add	_var01, #10
1f2f8     00 17 52 FC | 	wrword	arg03, _var01
1f2fc     11 E5 85 F1 | 	sub	objptr, #273
1f300                 | _hg010b_spin2_setspritesize_ret
1f300     2D 00 64 FD | 	ret
1f304                 | 
1f304                 | ' 
1f304                 | ' 
1f304                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1f304                 | ' 
1f304                 | ' 
1f304                 | ' pub putpixel(x,y,c)
1f304                 | _hg010b_spin2_putpixel
1f304     04 4A 05 F6 | 	mov	COUNT_, #4
1f308     A8 00 A0 FD | 	call	#pushregs_
1f30c     09 27 02 F6 | 	mov	local01, arg01
1f310                 | ' 
1f310                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1f310     00 28 06 F6 | 	mov	local02, #0
1f314     00 26 56 F2 | 	cmps	local01, #0 wc
1f318     01 28 66 36 |  if_ae	neg	local02, #1
1f31c     E9 E4 05 F1 | 	add	objptr, #233
1f320     F2 1A 02 FB | 	rdlong	arg05, objptr
1f324     02 1A 66 F0 | 	shl	arg05, #2
1f328     0D 27 52 F2 | 	cmps	local01, arg05 wc
1f32c     15 2B A2 F1 | 	subx	local03, local03
1f330     15 29 02 F5 | 	and	local02, local03
1f334     00 2A 06 F6 | 	mov	local03, #0
1f338     00 14 56 F2 | 	cmps	arg02, #0 wc
1f33c     01 2A 66 36 |  if_ae	neg	local03, #1
1f340     15 29 02 F5 | 	and	local02, local03
1f344     04 E4 85 F1 | 	sub	objptr, #4
1f348     F2 2A 02 FB | 	rdlong	local03, objptr
1f34c     E5 E4 85 F1 | 	sub	objptr, #229
1f350     15 15 52 F2 | 	cmps	arg02, local03 wc
1f354     16 2D A2 F1 | 	subx	local04, local04
1f358     16 29 CA F7 | 	test	local02, local04 wz
1f35c     48 00 90 AD |  if_e	jmp	#LR__2470
1f360     DD E4 05 F1 | 	add	objptr, #221
1f364     F2 12 02 FB | 	rdlong	arg01, objptr
1f368     14 E4 05 F1 | 	add	objptr, #20
1f36c     F2 2C 02 FB | 	rdlong	local04, objptr
1f370     02 2C 66 F0 | 	shl	local04, #2
1f374     0A 2D 02 FD | 	qmul	local04, arg02
1f378                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f378     0B 15 02 F6 | 	mov	arg02, arg03
1f37c     01 16 06 F6 | 	mov	arg03, #1
1f380     00 18 06 F6 | 	mov	arg04, #0
1f384     01 1A 06 F6 | 	mov	arg05, #1
1f388     0A 00 00 FF 
1f38c     DB E5 05 F1 | 	add	objptr, ##5595
1f390     18 2C 62 FD | 	getqx	local04
1f394     13 2D 02 F1 | 	add	local04, local01
1f398     16 13 02 F1 | 	add	arg01, local04
1f39c     6C 1D B0 FD | 	call	#_psram_spin2_fill
1f3a0     0B 00 00 FF 
1f3a4     CC E4 85 F1 | 	sub	objptr, ##5836
1f3a8                 | LR__2470
1f3a8     A7 F0 03 F6 | 	mov	ptra, fp
1f3ac     B2 00 A0 FD | 	call	#popregs_
1f3b0                 | _hg010b_spin2_putpixel_ret
1f3b0     2D 00 64 FD | 	ret
1f3b4                 | 
1f3b4                 | ' 
1f3b4                 | ' pub putpixel2(x,y,c)
1f3b4                 | _hg010b_spin2_putpixel2
1f3b4     02 4A 05 F6 | 	mov	COUNT_, #2
1f3b8     A8 00 A0 FD | 	call	#pushregs_
1f3bc     DD E4 05 F1 | 	add	objptr, #221
1f3c0     F2 26 02 FB | 	rdlong	local01, objptr
1f3c4     14 E4 05 F1 | 	add	objptr, #20
1f3c8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3cc     02 1A 66 F0 | 	shl	arg05, #2
1f3d0     0A 1B 02 FD | 	qmul	arg05, arg02
1f3d4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f3d4     0B 15 02 F6 | 	mov	arg02, arg03
1f3d8     01 16 06 F6 | 	mov	arg03, #1
1f3dc     00 18 06 F6 | 	mov	arg04, #0
1f3e0     01 1A 06 F6 | 	mov	arg05, #1
1f3e4     0A 00 00 FF 
1f3e8     DB E5 05 F1 | 	add	objptr, ##5595
1f3ec     18 28 62 FD | 	getqx	local02
1f3f0     09 29 02 F1 | 	add	local02, arg01
1f3f4     14 27 02 F1 | 	add	local01, local02
1f3f8     13 13 02 F6 | 	mov	arg01, local01
1f3fc     0C 1D B0 FD | 	call	#_psram_spin2_fill
1f400     0B 00 00 FF 
1f404     CC E4 85 F1 | 	sub	objptr, ##5836
1f408     A7 F0 03 F6 | 	mov	ptra, fp
1f40c     B2 00 A0 FD | 	call	#popregs_
1f410                 | _hg010b_spin2_putpixel2_ret
1f410     2D 00 64 FD | 	ret
1f414                 | 
1f414                 | ' 
1f414                 | ' pub getpixel2(x,y): c 
1f414                 | _hg010b_spin2_getpixel2
1f414     02 4A 05 F6 | 	mov	COUNT_, #2
1f418     A8 00 A0 FD | 	call	#pushregs_
1f41c     0C F0 07 F1 | 	add	ptra, #12
1f420     04 4E 05 F1 | 	add	fp, #4
1f424     A7 12 62 FC | 	wrlong	arg01, fp
1f428     04 4E 05 F1 | 	add	fp, #4
1f42c     A7 14 62 FC | 	wrlong	arg02, fp
1f430     08 4E 85 F1 | 	sub	fp, #8
1f434     A7 00 68 FC | 	wrlong	#0, fp
1f438     A7 12 02 F6 | 	mov	arg01, fp
1f43c     DD E4 05 F1 | 	add	objptr, #221
1f440     F2 14 02 FB | 	rdlong	arg02, objptr
1f444     14 E4 05 F1 | 	add	objptr, #20
1f448     F2 16 02 FB | 	rdlong	arg03, objptr
1f44c     02 16 66 F0 | 	shl	arg03, #2
1f450     08 4E 05 F1 | 	add	fp, #8
1f454     A7 FA 01 FB | 	rdlong	result1, fp
1f458     FD 16 02 FD | 	qmul	arg03, result1
1f45c                 | ' 
1f45c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1f45c     04 4E 85 F1 | 	sub	fp, #4
1f460     A7 26 02 FB | 	rdlong	local01, fp
1f464     04 4E 85 F1 | 	sub	fp, #4
1f468     01 16 06 F6 | 	mov	arg03, #1
1f46c     0A 00 00 FF 
1f470     DB E5 05 F1 | 	add	objptr, ##5595
1f474     18 28 62 FD | 	getqx	local02
1f478     13 29 02 F1 | 	add	local02, local01
1f47c     14 15 02 F1 | 	add	arg02, local02
1f480     50 1B B0 FD | 	call	#_psram_spin2_read1
1f484     0B 00 00 FF 
1f488     CC E4 85 F1 | 	sub	objptr, ##5836
1f48c                 | ' return c
1f48c     A7 FA 01 FB | 	rdlong	result1, fp
1f490     A7 F0 03 F6 | 	mov	ptra, fp
1f494     B2 00 A0 FD | 	call	#popregs_
1f498                 | _hg010b_spin2_getpixel2_ret
1f498     2D 00 64 FD | 	ret
1f49c                 | 
1f49c                 | '   
1f49c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1f49c                 | ' 
1f49c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1f49c                 | _hg010b_spin2_fastline
1f49c     02 4A 05 F6 | 	mov	COUNT_, #2
1f4a0     A8 00 A0 FD | 	call	#pushregs_
1f4a4     09 27 02 F6 | 	mov	local01, arg01
1f4a8     0A 29 02 F6 | 	mov	local02, arg02
1f4ac                 | ' 
1f4ac                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1f4ac     00 16 56 F2 | 	cmps	arg03, #0 wc
1f4b0     F4 00 90 CD |  if_b	jmp	#LR__2480
1f4b4     01 00 00 FF 
1f4b8     2A E4 05 F1 | 	add	objptr, ##554
1f4bc     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4c0     01 00 00 FF 
1f4c4     2A E4 85 F1 | 	sub	objptr, ##554
1f4c8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1f4cc     D8 00 90 3D |  if_ae	jmp	#LR__2480
1f4d0     00 26 56 F2 | 	cmps	local01, #0 wc
1f4d4     00 28 56 C2 |  if_b	cmps	local02, #0 wc
1f4d8     CC 00 90 CD |  if_b	jmp	#LR__2480
1f4dc     01 00 00 FF 
1f4e0     26 E4 05 F1 | 	add	objptr, ##550
1f4e4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4e8     01 00 00 FF 
1f4ec     26 E4 85 F1 | 	sub	objptr, ##550
1f4f0     0D 27 5A F2 | 	cmps	local01, arg05 wcz
1f4f4     01 00 00 1F 
1f4f8     26 E4 05 11 |  if_a	add	objptr, ##550
1f4fc     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1f500     01 00 00 1F 
1f504     26 E4 85 11 |  if_a	sub	objptr, ##550
1f508     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
1f50c                 | '   return
1f50c     98 00 90 1D |  if_a	jmp	#LR__2480
1f510     14 27 5A F2 | 	cmps	local01, local02 wcz
1f514     13 1B 02 16 |  if_a	mov	arg05, local01
1f518     14 27 02 16 |  if_a	mov	local01, local02
1f51c     0D 29 02 16 |  if_a	mov	local02, arg05
1f520     00 26 56 F2 | 	cmps	local01, #0 wc
1f524     00 26 06 C6 |  if_b	mov	local01, #0
1f528     01 00 00 FF 
1f52c     26 E4 05 F1 | 	add	objptr, ##550
1f530     F2 1A 02 FB | 	rdlong	arg05, objptr
1f534     01 00 00 FF 
1f538     26 E4 85 F1 | 	sub	objptr, ##550
1f53c     0D 29 52 F2 | 	cmps	local02, arg05 wc
1f540     01 00 00 3F 
1f544     26 E4 05 31 |  if_ae	add	objptr, ##550
1f548     F2 28 02 3B |  if_ae	rdlong	local02, objptr
1f54c     01 00 00 3F 
1f550     26 E4 85 31 |  if_ae	sub	objptr, ##550
1f554     DD E4 05 F1 | 	add	objptr, #221
1f558     F2 12 02 FB | 	rdlong	arg01, objptr
1f55c     14 E4 05 F1 | 	add	objptr, #20
1f560     F2 1A 02 FB | 	rdlong	arg05, objptr
1f564     02 1A 66 F0 | 	shl	arg05, #2
1f568     0B 1B 02 FD | 	qmul	arg05, arg03
1f56c                 | ' if x1>x2
1f56c                 | '   x1,x2:=x2,x1
1f56c                 | ' if x1<0 
1f56c                 | '   x1:=0
1f56c                 | ' if x2>=xres
1f56c                 | '   x2:=xres-1  
1f56c     01 28 86 31 |  if_ae	sub	local02, #1
1f570                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1f570     01 16 06 F6 | 	mov	arg03, #1
1f574     14 17 02 F1 | 	add	arg03, local02
1f578     13 17 82 F1 | 	sub	arg03, local01
1f57c     0C 15 02 F6 | 	mov	arg02, arg04
1f580     00 18 06 F6 | 	mov	arg04, #0
1f584     01 1A 06 F6 | 	mov	arg05, #1
1f588     0A 00 00 FF 
1f58c     DB E5 05 F1 | 	add	objptr, ##5595
1f590     18 28 62 FD | 	getqx	local02
1f594     13 29 02 F1 | 	add	local02, local01
1f598     14 13 02 F1 | 	add	arg01, local02
1f59c     6C 1B B0 FD | 	call	#_psram_spin2_fill
1f5a0     0B 00 00 FF 
1f5a4     CC E4 85 F1 | 	sub	objptr, ##5836
1f5a8                 | LR__2480
1f5a8     A7 F0 03 F6 | 	mov	ptra, fp
1f5ac     B2 00 A0 FD | 	call	#popregs_
1f5b0                 | _hg010b_spin2_fastline_ret
1f5b0     2D 00 64 FD | 	ret
1f5b4                 | 
1f5b4                 | ' 
1f5b4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1f5b4                 | _hg010b_spin2_draw
1f5b4     0E 4A 05 F6 | 	mov	COUNT_, #14
1f5b8     A8 00 A0 FD | 	call	#pushregs_
1f5bc     09 27 02 F6 | 	mov	local01, arg01
1f5c0     0A 29 02 F6 | 	mov	local02, arg02
1f5c4     0B 2B 02 F6 | 	mov	local03, arg03
1f5c8     0C 2D 02 F6 | 	mov	local04, arg04
1f5cc     0D 2F 02 F6 | 	mov	local05, arg05
1f5d0                 | ' 
1f5d0                 | ' if (y1==y2)
1f5d0     16 29 0A F2 | 	cmp	local02, local04 wz
1f5d4     18 00 90 5D |  if_ne	jmp	#LR__2490
1f5d8                 | '   fastline(x1,x2,y1,c)
1f5d8     13 13 02 F6 | 	mov	arg01, local01
1f5dc     15 15 02 F6 | 	mov	arg02, local03
1f5e0     14 17 02 F6 | 	mov	arg03, local02
1f5e4     17 19 02 F6 | 	mov	arg04, local05
1f5e8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1f5ec     F8 00 90 FD | 	jmp	#LR__2496
1f5f0                 | LR__2490
1f5f0                 | ' else  
1f5f0                 | '   x:=x1
1f5f0     13 31 02 F6 | 	mov	local06, local01
1f5f4                 | '   y:=y1
1f5f4     14 33 02 F6 | 	mov	local07, local02
1f5f8                 | ' 
1f5f8                 | '   if (x1<x2) 
1f5f8     15 27 52 F2 | 	cmps	local01, local03 wc
1f5fc                 | '     xi:=1
1f5fc     01 34 06 C6 |  if_b	mov	local08, #1
1f600                 | '     dx:=x2-x1
1f600     15 37 02 C6 |  if_b	mov	local09, local03
1f604     13 37 82 C1 |  if_b	sub	local09, local01
1f608                 | '   else
1f608                 | '     xi:=-1
1f608     01 34 66 36 |  if_ae	neg	local08, #1
1f60c                 | '     dx:=x1-x2
1f60c     15 27 82 31 |  if_ae	sub	local01, local03
1f610     13 37 02 36 |  if_ae	mov	local09, local01
1f614                 | '   
1f614                 | '   if (y1<y2) 
1f614     16 29 52 F2 | 	cmps	local02, local04 wc
1f618                 | '     yi:=1
1f618     01 38 06 C6 |  if_b	mov	local10, #1
1f61c                 | '     dy:=y2-y1
1f61c     16 3B 02 C6 |  if_b	mov	local11, local04
1f620     14 3B 82 C1 |  if_b	sub	local11, local02
1f624                 | '   else
1f624                 | '     yi:=-1
1f624     01 38 66 36 |  if_ae	neg	local10, #1
1f628                 | '     dy:=y1-y2
1f628     16 29 82 31 |  if_ae	sub	local02, local04
1f62c     14 3B 02 36 |  if_ae	mov	local11, local02
1f630                 | ' 
1f630                 | '   putpixel(x,y,c)
1f630     17 17 02 F6 | 	mov	arg03, local05
1f634     18 13 02 F6 | 	mov	arg01, local06
1f638     19 15 02 F6 | 	mov	arg02, local07
1f63c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f640                 | ' 
1f640                 | '   if (dx>dy)
1f640     1D 37 5A F2 | 	cmps	local09, local11 wcz
1f644     50 00 90 ED |  if_be	jmp	#LR__2492
1f648                 | '     ai:=(dy-dx)*2
1f648     1D 3D 02 F6 | 	mov	local12, local11
1f64c     1B 3D 82 F1 | 	sub	local12, local09
1f650     01 3C 66 F0 | 	shl	local12, #1
1f654                 | '     bi:=dy*2
1f654     01 3A 66 F0 | 	shl	local11, #1
1f658     1D 3F 02 F6 | 	mov	local13, local11
1f65c                 | '     d:= bi-dx
1f65c     1F 41 02 F6 | 	mov	local14, local13
1f660     1B 41 82 F1 | 	sub	local14, local09
1f664                 | '     repeat while (x<>x2) 
1f664                 | LR__2491
1f664     15 31 0A F2 | 	cmp	local06, local03 wz
1f668     7C 00 90 AD |  if_e	jmp	#LR__2495
1f66c                 | '       if (d>=0) 
1f66c     00 40 56 F2 | 	cmps	local14, #0 wc
1f670                 | '         x+=xi
1f670     1A 31 02 31 |  if_ae	add	local06, local08
1f674                 | '         y+=yi
1f674     1C 33 02 31 |  if_ae	add	local07, local10
1f678                 | '         d+=ai
1f678     1E 41 02 31 |  if_ae	add	local14, local12
1f67c                 | '       else
1f67c                 | '         d+=bi
1f67c     1F 41 02 C1 |  if_b	add	local14, local13
1f680                 | '         x+=xi
1f680     1A 31 02 C1 |  if_b	add	local06, local08
1f684                 | '       putpixel(x,y,c)
1f684     18 13 02 F6 | 	mov	arg01, local06
1f688     19 15 02 F6 | 	mov	arg02, local07
1f68c     17 17 02 F6 | 	mov	arg03, local05
1f690     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f694     CC FF 9F FD | 	jmp	#LR__2491
1f698                 | LR__2492
1f698                 | '   else
1f698                 | '     ai:=(dx-dy)*2
1f698     1B 3D 02 F6 | 	mov	local12, local09
1f69c     1D 3D 82 F1 | 	sub	local12, local11
1f6a0     01 3C 66 F0 | 	shl	local12, #1
1f6a4                 | '     bi:=dx*2
1f6a4     01 36 66 F0 | 	shl	local09, #1
1f6a8     1B 3F 02 F6 | 	mov	local13, local09
1f6ac                 | '     d:=bi-dy
1f6ac     1F 41 02 F6 | 	mov	local14, local13
1f6b0     1D 41 82 F1 | 	sub	local14, local11
1f6b4                 | '     repeat while (y<>y2)
1f6b4                 | LR__2493
1f6b4     16 33 0A F2 | 	cmp	local07, local04 wz
1f6b8     2C 00 90 AD |  if_e	jmp	#LR__2494
1f6bc                 | '       if (d>=0)
1f6bc     00 40 56 F2 | 	cmps	local14, #0 wc
1f6c0                 | '         x+=xi
1f6c0     1A 31 02 31 |  if_ae	add	local06, local08
1f6c4                 | '         y+=yi
1f6c4     1C 33 02 31 |  if_ae	add	local07, local10
1f6c8                 | '         d+=ai
1f6c8     1E 41 02 31 |  if_ae	add	local14, local12
1f6cc                 | '       else
1f6cc                 | '         d+=bi
1f6cc     1F 41 02 C1 |  if_b	add	local14, local13
1f6d0                 | '         y+=yi
1f6d0     1C 33 02 C1 |  if_b	add	local07, local10
1f6d4                 | '       putpixel(x, y,c)
1f6d4     18 13 02 F6 | 	mov	arg01, local06
1f6d8     19 15 02 F6 | 	mov	arg02, local07
1f6dc     17 17 02 F6 | 	mov	arg03, local05
1f6e0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f6e4     CC FF 9F FD | 	jmp	#LR__2493
1f6e8                 | LR__2494
1f6e8                 | LR__2495
1f6e8                 | LR__2496
1f6e8     A7 F0 03 F6 | 	mov	ptra, fp
1f6ec     B2 00 A0 FD | 	call	#popregs_
1f6f0                 | _hg010b_spin2_draw_ret
1f6f0     2D 00 64 FD | 	ret
1f6f4                 | 
1f6f4                 | '  
1f6f4                 | ' pub fillpush(val) 
1f6f4                 | _hg010b_spin2_fillpush
1f6f4                 | ' fillstack[fillptr]:=val
1f6f4     0B 00 00 FF 
1f6f8     BA E4 05 F1 | 	add	objptr, ##5818
1f6fc     F2 00 02 FB | 	rdlong	_var01, objptr
1f700     02 00 66 F0 | 	shl	_var01, #2
1f704     0A 00 00 FF 
1f708     00 E4 85 F1 | 	sub	objptr, ##5120
1f70c     F2 00 02 F1 | 	add	_var01, objptr
1f710     00 13 62 FC | 	wrlong	arg01, _var01
1f714                 | ' fillptr+=1   
1f714     0A 00 00 FF 
1f718     00 E4 05 F1 | 	add	objptr, ##5120
1f71c     F2 00 02 FB | 	rdlong	_var01, objptr
1f720     01 00 06 F1 | 	add	_var01, #1
1f724     F2 00 62 FC | 	wrlong	_var01, objptr
1f728     0B 00 00 FF 
1f72c     BA E4 85 F1 | 	sub	objptr, ##5818
1f730                 | _hg010b_spin2_fillpush_ret
1f730     2D 00 64 FD | 	ret
1f734                 | 
1f734                 | ' 
1f734                 | '     
1f734                 | ' pub fillpop() : val
1f734                 | _hg010b_spin2_fillpop
1f734                 | ' 
1f734                 | ' fillptr-=1
1f734     0B 00 00 FF 
1f738     BA E4 05 F1 | 	add	objptr, ##5818
1f73c     F2 FA 01 FB | 	rdlong	result1, objptr
1f740     01 FA 85 F1 | 	sub	result1, #1
1f744     F2 FA 61 FC | 	wrlong	result1, objptr
1f748                 | ' if fillptr<0
1f748     0B 00 00 FF 
1f74c     BA E4 85 F1 | 	sub	objptr, ##5818
1f750     00 FA 55 F2 | 	cmps	result1, #0 wc
1f754                 | '   fillptr:=0
1f754     0B 00 00 CF 
1f758     BA E4 05 C1 |  if_b	add	objptr, ##5818
1f75c     F2 00 68 CC |  if_b	wrlong	#0, objptr
1f760     0B 00 00 CF 
1f764     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1f768                 | '   val:=-12345
1f768     E7 FF 7F CF 
1f76c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1f770     28 00 90 CD |  if_b	jmp	#LR__2500
1f774                 | ' else 
1f774                 | '   val:=fillstack[fillptr]
1f774     0B 00 00 FF 
1f778     BA E4 05 F1 | 	add	objptr, ##5818
1f77c     F2 00 02 FB | 	rdlong	_var01, objptr
1f780     02 00 66 F0 | 	shl	_var01, #2
1f784     0A 00 00 FF 
1f788     00 E4 85 F1 | 	sub	objptr, ##5120
1f78c     F2 00 02 F1 | 	add	_var01, objptr
1f790     00 01 02 FB | 	rdlong	_var01, _var01
1f794     01 00 00 FF 
1f798     BA E4 85 F1 | 	sub	objptr, ##698
1f79c                 | LR__2500
1f79c                 | ' return val
1f79c     00 FB 01 F6 | 	mov	result1, _var01
1f7a0                 | _hg010b_spin2_fillpop_ret
1f7a0     2D 00 64 FD | 	ret
1f7a4                 | 
1f7a4                 | ' 
1f7a4                 | '       
1f7a4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1f7a4                 | _hg010b_spin2_fill
1f7a4     0B 4A 05 F6 | 	mov	COUNT_, #11
1f7a8     A8 00 A0 FD | 	call	#pushregs_
1f7ac                 | ' 
1f7ac                 | ' newcolor:=newcolor & 255
1f7ac     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
1f7b0                 | ' oldcolor:=oldcolor & 255
1f7b0     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
1f7b4                 | ' 
1f7b4                 | ' if (oldcolor == newcolor) 
1f7b4     13 29 0A F2 | 	cmp	local02, local01 wz
1f7b8                 | '   return
1f7b8     70 02 90 AD |  if_e	jmp	#LR__2519
1f7bc                 | ' 
1f7bc                 | ' fillptr:=0
1f7bc     0B 00 00 FF 
1f7c0     BA E4 05 F1 | 	add	objptr, ##5818
1f7c4     F2 00 68 FC | 	wrlong	#0, objptr
1f7c8                 | ' fillmax:=0
1f7c8     04 E4 05 F1 | 	add	objptr, #4
1f7cc     F2 00 68 FC | 	wrlong	#0, objptr
1f7d0     0B 00 00 FF 
1f7d4     BE E4 85 F1 | 	sub	objptr, ##5822
1f7d8                 | ' fillpush(x)
1f7d8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f7dc                 | ' fillpush(y)
1f7dc     0A 13 02 F6 | 	mov	arg01, arg02
1f7e0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f7e4                 | ' y:=fillpop()
1f7e4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1f7e8     FD 2A 02 F6 | 	mov	local03, result1
1f7ec                 | ' x:=fillpop()
1f7ec     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1f7f0     FD 2C 02 F6 | 	mov	local04, result1
1f7f4                 | ' 'pinhigh(38)
1f7f4                 | ' repeat while (x>-1)       
1f7f4                 | LR__2510
1f7f4     00 2C 56 F2 | 	cmps	local04, #0 wc
1f7f8     30 02 90 CD |  if_b	jmp	#LR__2518
1f7fc                 | '  ' pintoggle(39)
1f7fc                 | '   x1 := x
1f7fc     16 2F 02 F6 | 	mov	local05, local04
1f800                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1f800                 | LR__2511
1f800     00 30 06 F6 | 	mov	local06, #0
1f804     00 32 06 F6 | 	mov	local07, #0
1f808     00 2E 56 F2 | 	cmps	local05, #0 wc
1f80c     01 32 66 36 |  if_ae	neg	local07, #1
1f810     00 32 0E F2 | 	cmp	local07, #0 wz
1f814     00 30 26 56 |  if_ne	not	local06, #0
1f818     00 34 06 F6 | 	mov	local08, #0
1f81c     00 36 06 F6 | 	mov	local09, #0
1f820     15 15 02 F6 | 	mov	arg02, local03
1f824     17 13 02 F6 | 	mov	arg01, local05
1f828     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f82c     14 FB 09 F2 | 	cmp	result1, local02 wz
1f830     00 36 26 A6 |  if_e	not	local09, #0
1f834     00 36 0E F2 | 	cmp	local09, #0 wz
1f838     00 34 26 56 |  if_ne	not	local08, #0
1f83c     1A 31 CA F7 | 	test	local06, local08 wz
1f840                 | '     x1--
1f840     01 2E 86 51 |  if_ne	sub	local05, #1
1f844     B8 FF 9F 5D |  if_ne	jmp	#LR__2511
1f848                 | '   x1++
1f848     01 2E 06 F1 | 	add	local05, #1
1f84c                 | '   spanabove := 0
1f84c     00 38 06 F6 | 	mov	local10, #0
1f850                 | '   spanbelow := 0
1f850     00 3A 06 F6 | 	mov	local11, #0
1f854                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1f854                 | LR__2512
1f854     00 30 06 F6 | 	mov	local06, #0
1f858     02 00 00 FF 
1f85c     00 2E 56 F2 | 	cmps	local05, ##1024 wc
1f860     00 30 26 C6 |  if_b	not	local06, #0
1f864     00 34 06 F6 | 	mov	local08, #0
1f868     00 36 06 F6 | 	mov	local09, #0
1f86c     15 15 02 F6 | 	mov	arg02, local03
1f870     17 13 02 F6 | 	mov	arg01, local05
1f874     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f878     14 FB 09 F2 | 	cmp	result1, local02 wz
1f87c     00 36 26 A6 |  if_e	not	local09, #0
1f880     00 36 0E F2 | 	cmp	local09, #0 wz
1f884     00 34 26 56 |  if_ne	not	local08, #0
1f888     1A 31 CA F7 | 	test	local06, local08 wz
1f88c     88 01 90 AD |  if_e	jmp	#LR__2517
1f890                 | '     putpixel2 (x1,y, newcolor & 255)
1f890     13 17 E2 F8 | 	getbyte	arg03, local01, #0
1f894     17 13 02 F6 | 	mov	arg01, local05
1f898     15 15 02 F6 | 	mov	arg02, local03
1f89c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1f8a0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1f8a0     00 30 06 F6 | 	mov	local06, #0
1f8a4     00 32 06 F6 | 	mov	local07, #0
1f8a8     00 38 0E F2 | 	cmp	local10, #0 wz
1f8ac     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
1f8b0     01 32 66 26 |  if_nc_and_z	neg	local07, #1
1f8b4     00 32 0E F2 | 	cmp	local07, #0 wz
1f8b8     00 30 26 56 |  if_ne	not	local06, #0
1f8bc     00 34 06 F6 | 	mov	local08, #0
1f8c0     00 36 06 F6 | 	mov	local09, #0
1f8c4     15 15 02 F6 | 	mov	arg02, local03
1f8c8     01 14 86 F1 | 	sub	arg02, #1
1f8cc     17 13 02 F6 | 	mov	arg01, local05
1f8d0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f8d4     14 FB 09 F2 | 	cmp	result1, local02 wz
1f8d8     00 36 26 A6 |  if_e	not	local09, #0
1f8dc     00 36 0E F2 | 	cmp	local09, #0 wz
1f8e0     00 34 26 56 |  if_ne	not	local08, #0
1f8e4     1A 31 CA F7 | 	test	local06, local08 wz
1f8e8     1C 00 90 AD |  if_e	jmp	#LR__2513
1f8ec                 | '       fillpush(x1)
1f8ec     17 13 02 F6 | 	mov	arg01, local05
1f8f0     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1f8f4                 | '       fillpush(y-1)
1f8f4     15 13 02 F6 | 	mov	arg01, local03
1f8f8     01 12 86 F1 | 	sub	arg01, #1
1f8fc     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f900                 | '       spanabove := 1 
1f900     01 38 06 F6 | 	mov	local10, #1
1f904     4C 00 90 FD | 	jmp	#LR__2514
1f908                 | LR__2513
1f908                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1f908     00 30 06 F6 | 	mov	local06, #0
1f90c     00 32 06 F6 | 	mov	local07, #0
1f910     00 38 0E F2 | 	cmp	local10, #0 wz
1f914     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
1f918     01 32 66 16 |  if_a	neg	local07, #1
1f91c     00 32 0E F2 | 	cmp	local07, #0 wz
1f920     00 30 26 56 |  if_ne	not	local06, #0
1f924     00 34 06 F6 | 	mov	local08, #0
1f928     00 36 06 F6 | 	mov	local09, #0
1f92c     15 15 02 F6 | 	mov	arg02, local03
1f930     01 14 86 F1 | 	sub	arg02, #1
1f934     17 13 02 F6 | 	mov	arg01, local05
1f938     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f93c     14 FB 09 F2 | 	cmp	result1, local02 wz
1f940     00 36 26 56 |  if_ne	not	local09, #0
1f944     00 36 0E F2 | 	cmp	local09, #0 wz
1f948     00 34 26 56 |  if_ne	not	local08, #0
1f94c     1A 31 CA F7 | 	test	local06, local08 wz
1f950                 | '       spanabove := 0 
1f950     00 38 06 56 |  if_ne	mov	local10, #0
1f954                 | LR__2514
1f954                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1f954     00 30 06 F6 | 	mov	local06, #0
1f958     00 32 06 F6 | 	mov	local07, #0
1f95c     00 3A 0E F2 | 	cmp	local11, #0 wz
1f960     01 00 00 AF 
1f964     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
1f968     01 32 66 86 |  if_c_and_z	neg	local07, #1
1f96c     00 32 0E F2 | 	cmp	local07, #0 wz
1f970     00 30 26 56 |  if_ne	not	local06, #0
1f974     00 34 06 F6 | 	mov	local08, #0
1f978     00 36 06 F6 | 	mov	local09, #0
1f97c     15 15 02 F6 | 	mov	arg02, local03
1f980     01 14 06 F1 | 	add	arg02, #1
1f984     17 13 02 F6 | 	mov	arg01, local05
1f988     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f98c     14 FB 09 F2 | 	cmp	result1, local02 wz
1f990     00 36 26 A6 |  if_e	not	local09, #0
1f994     00 36 0E F2 | 	cmp	local09, #0 wz
1f998     00 34 26 56 |  if_ne	not	local08, #0
1f99c     1A 31 CA F7 | 	test	local06, local08 wz
1f9a0     1C 00 90 AD |  if_e	jmp	#LR__2515
1f9a4                 | '       fillpush(x1)
1f9a4     17 13 02 F6 | 	mov	arg01, local05
1f9a8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f9ac                 | '       fillpush(y + 1)
1f9ac     15 13 02 F6 | 	mov	arg01, local03
1f9b0     01 12 06 F1 | 	add	arg01, #1
1f9b4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1f9b8                 | '       spanBelow := 1
1f9b8     01 3A 06 F6 | 	mov	local11, #1
1f9bc     50 00 90 FD | 	jmp	#LR__2516
1f9c0                 | LR__2515
1f9c0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1f9c0     00 30 06 F6 | 	mov	local06, #0
1f9c4     00 32 06 F6 | 	mov	local07, #0
1f9c8     00 3A 0E F2 | 	cmp	local11, #0 wz
1f9cc     01 00 00 5F 
1f9d0     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
1f9d4     01 32 66 46 |  if_c_and_nz	neg	local07, #1
1f9d8     00 32 0E F2 | 	cmp	local07, #0 wz
1f9dc     00 30 26 56 |  if_ne	not	local06, #0
1f9e0     00 34 06 F6 | 	mov	local08, #0
1f9e4     00 36 06 F6 | 	mov	local09, #0
1f9e8     15 15 02 F6 | 	mov	arg02, local03
1f9ec     01 14 06 F1 | 	add	arg02, #1
1f9f0     17 13 02 F6 | 	mov	arg01, local05
1f9f4     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f9f8     14 FB 09 F2 | 	cmp	result1, local02 wz
1f9fc     00 36 26 56 |  if_ne	not	local09, #0
1fa00     00 36 0E F2 | 	cmp	local09, #0 wz
1fa04     00 34 26 56 |  if_ne	not	local08, #0
1fa08     1A 31 CA F7 | 	test	local06, local08 wz
1fa0c                 | '       spanbelow := 0
1fa0c     00 3A 06 56 |  if_ne	mov	local11, #0
1fa10                 | LR__2516
1fa10                 | '     x1++
1fa10     01 2E 06 F1 | 	add	local05, #1
1fa14     3C FE 9F FD | 	jmp	#LR__2512
1fa18                 | LR__2517
1fa18                 | '   y:=fillpop()
1fa18     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1fa1c     FD 2A 02 F6 | 	mov	local03, result1
1fa20                 | '   x:=fillpop()
1fa20     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1fa24     FD 2C 02 F6 | 	mov	local04, result1
1fa28     C8 FD 9F FD | 	jmp	#LR__2510
1fa2c                 | LR__2518
1fa2c                 | LR__2519
1fa2c     A7 F0 03 F6 | 	mov	ptra, fp
1fa30     B2 00 A0 FD | 	call	#popregs_
1fa34                 | _hg010b_spin2_fill_ret
1fa34     2D 00 64 FD | 	ret
1fa38                 | 
1fa38                 | ' 'pinlow(38)    
1fa38                 | ' 
1fa38                 | ' '-- A filled circle -----------------------------------------------------
1fa38                 | ' 
1fa38                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1fa38                 | _hg010b_spin2_fcircle
1fa38     08 4A 05 F6 | 	mov	COUNT_, #8
1fa3c     A8 00 A0 FD | 	call	#pushregs_
1fa40     0B 27 02 F6 | 	mov	local01, arg03
1fa44     FF FF 7F FF 
1fa48     FE 27 06 FD | 	qmul	local01, ##-2
1fa4c     09 29 02 F6 | 	mov	local02, arg01
1fa50     0A 2B 02 F6 | 	mov	local03, arg02
1fa54     0C 2D 02 F6 | 	mov	local04, arg04
1fa58                 | ' 
1fa58                 | ' d:=5-4*r
1fa58     13 19 02 F6 | 	mov	arg04, local01
1fa5c     02 18 66 F0 | 	shl	arg04, #2
1fa60     05 2E 06 F6 | 	mov	local05, #5
1fa64     0C 2F 82 F1 | 	sub	local05, arg04
1fa68                 | ' x:=0
1fa68     00 30 06 F6 | 	mov	local06, #0
1fa6c                 | ' y:=r
1fa6c                 | ' da:=(-2*r+5)*4
1fa6c                 | ' db:=3*4
1fa6c     0C 32 06 F6 | 	mov	local07, #12
1fa70                 | ' repeat while (x<=y) 
1fa70     18 34 62 FD | 	getqx	local08
1fa74     05 34 06 F1 | 	add	local08, #5
1fa78     02 34 66 F0 | 	shl	local08, #2
1fa7c                 | LR__2520
1fa7c     13 31 5A F2 | 	cmps	local06, local01 wcz
1fa80     B4 00 90 1D |  if_a	jmp	#LR__2522
1fa84                 | '   fastline(x0-x,x0+x,y0-y,c)
1fa84     14 13 02 F6 | 	mov	arg01, local02
1fa88     18 13 82 F1 | 	sub	arg01, local06
1fa8c     14 15 02 F6 | 	mov	arg02, local02
1fa90     18 15 02 F1 | 	add	arg02, local06
1fa94     15 17 02 F6 | 	mov	arg03, local03
1fa98     13 17 82 F1 | 	sub	arg03, local01
1fa9c     16 19 02 F6 | 	mov	arg04, local04
1faa0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1faa4                 | '   fastline(x0-x,x0+x,y0+y,c)
1faa4     14 13 02 F6 | 	mov	arg01, local02
1faa8     18 13 82 F1 | 	sub	arg01, local06
1faac     14 15 02 F6 | 	mov	arg02, local02
1fab0     18 15 02 F1 | 	add	arg02, local06
1fab4     15 17 02 F6 | 	mov	arg03, local03
1fab8     13 17 02 F1 | 	add	arg03, local01
1fabc     16 19 02 F6 | 	mov	arg04, local04
1fac0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1fac4                 | '   fastline(x0-y,x0+y,y0-x,c)
1fac4     14 13 02 F6 | 	mov	arg01, local02
1fac8     13 13 82 F1 | 	sub	arg01, local01
1facc     14 15 02 F6 | 	mov	arg02, local02
1fad0     13 15 02 F1 | 	add	arg02, local01
1fad4     15 17 02 F6 | 	mov	arg03, local03
1fad8     18 17 82 F1 | 	sub	arg03, local06
1fadc     16 19 02 F6 | 	mov	arg04, local04
1fae0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1fae4                 | '   fastline(x0-y,x0+y,y0+x,c)
1fae4     14 13 02 F6 | 	mov	arg01, local02
1fae8     13 13 82 F1 | 	sub	arg01, local01
1faec     14 15 02 F6 | 	mov	arg02, local02
1faf0     13 15 02 F1 | 	add	arg02, local01
1faf4     15 17 02 F6 | 	mov	arg03, local03
1faf8     18 17 02 F1 | 	add	arg03, local06
1fafc     16 19 02 F6 | 	mov	arg04, local04
1fb00     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1fb04                 | '   if d>0 
1fb04     01 2E 56 F2 | 	cmps	local05, #1 wc
1fb08     18 00 90 CD |  if_b	jmp	#LR__2521
1fb0c                 | '     d+=da
1fb0c     1A 2F 02 F1 | 	add	local05, local08
1fb10                 | '     y-=1
1fb10     01 26 86 F1 | 	sub	local01, #1
1fb14                 | '     x+=1
1fb14     01 30 06 F1 | 	add	local06, #1
1fb18                 | '     da+=4*4
1fb18     10 34 06 F1 | 	add	local08, #16
1fb1c                 | '     db+=2*4
1fb1c     08 32 06 F1 | 	add	local07, #8
1fb20     58 FF 9F FD | 	jmp	#LR__2520
1fb24                 | LR__2521
1fb24                 | '   else
1fb24                 | '     d+=db
1fb24     19 2F 02 F1 | 	add	local05, local07
1fb28                 | '     x+=1
1fb28     01 30 06 F1 | 	add	local06, #1
1fb2c                 | '     da+=2*4
1fb2c     08 34 06 F1 | 	add	local08, #8
1fb30                 | '     db+=2*4
1fb30     08 32 06 F1 | 	add	local07, #8
1fb34     44 FF 9F FD | 	jmp	#LR__2520
1fb38                 | LR__2522
1fb38     A7 F0 03 F6 | 	mov	ptra, fp
1fb3c     B2 00 A0 FD | 	call	#popregs_
1fb40                 | _hg010b_spin2_fcircle_ret
1fb40     2D 00 64 FD | 	ret
1fb44                 | 
1fb44                 | '  
1fb44                 | ' '-- A circle ------------------------------------------------------------ 
1fb44                 | '  
1fb44                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1fb44                 | _hg010b_spin2_circle
1fb44     08 4A 05 F6 | 	mov	COUNT_, #8
1fb48     A8 00 A0 FD | 	call	#pushregs_
1fb4c     0B 27 02 F6 | 	mov	local01, arg03
1fb50     FF FF 7F FF 
1fb54     FE 27 06 FD | 	qmul	local01, ##-2
1fb58     09 29 02 F6 | 	mov	local02, arg01
1fb5c     0A 2B 02 F6 | 	mov	local03, arg02
1fb60     0C 2D 02 F6 | 	mov	local04, arg04
1fb64                 | ' 
1fb64                 | '  
1fb64                 | ' d:=5-4*r
1fb64     13 19 02 F6 | 	mov	arg04, local01
1fb68     02 18 66 F0 | 	shl	arg04, #2
1fb6c     05 2E 06 F6 | 	mov	local05, #5
1fb70     0C 2F 82 F1 | 	sub	local05, arg04
1fb74                 | ' x:=0
1fb74     00 30 06 F6 | 	mov	local06, #0
1fb78                 | ' y:=r
1fb78                 | ' da:=(-2*r+5)*4
1fb78                 | ' db:=3*4
1fb78     0C 32 06 F6 | 	mov	local07, #12
1fb7c                 | ' repeat while (x<=y) 
1fb7c     18 34 62 FD | 	getqx	local08
1fb80     05 34 06 F1 | 	add	local08, #5
1fb84     02 34 66 F0 | 	shl	local08, #2
1fb88                 | LR__2530
1fb88     13 31 5A F2 | 	cmps	local06, local01 wcz
1fb8c     F4 00 90 1D |  if_a	jmp	#LR__2532
1fb90                 | '   putpixel(x0-x,y0-y,c)
1fb90     14 13 02 F6 | 	mov	arg01, local02
1fb94     18 13 82 F1 | 	sub	arg01, local06
1fb98     15 15 02 F6 | 	mov	arg02, local03
1fb9c     13 15 82 F1 | 	sub	arg02, local01
1fba0     16 17 02 F6 | 	mov	arg03, local04
1fba4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fba8                 | '   putpixel(x0-x,y0+y,c)
1fba8     14 13 02 F6 | 	mov	arg01, local02
1fbac     18 13 82 F1 | 	sub	arg01, local06
1fbb0     15 15 02 F6 | 	mov	arg02, local03
1fbb4     13 15 02 F1 | 	add	arg02, local01
1fbb8     16 17 02 F6 | 	mov	arg03, local04
1fbbc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fbc0                 | '   putpixel(x0+x,y0-y,c)
1fbc0     14 13 02 F6 | 	mov	arg01, local02
1fbc4     18 13 02 F1 | 	add	arg01, local06
1fbc8     15 15 02 F6 | 	mov	arg02, local03
1fbcc     13 15 82 F1 | 	sub	arg02, local01
1fbd0     16 17 02 F6 | 	mov	arg03, local04
1fbd4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fbd8                 | '   putpixel(x0+x,y0+y,c)
1fbd8     14 13 02 F6 | 	mov	arg01, local02
1fbdc     18 13 02 F1 | 	add	arg01, local06
1fbe0     15 15 02 F6 | 	mov	arg02, local03
1fbe4     13 15 02 F1 | 	add	arg02, local01
1fbe8     16 17 02 F6 | 	mov	arg03, local04
1fbec     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fbf0                 | '   putpixel(x0-y,y0-x,c)
1fbf0     14 13 02 F6 | 	mov	arg01, local02
1fbf4     13 13 82 F1 | 	sub	arg01, local01
1fbf8     15 15 02 F6 | 	mov	arg02, local03
1fbfc     18 15 82 F1 | 	sub	arg02, local06
1fc00     16 17 02 F6 | 	mov	arg03, local04
1fc04     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fc08                 | '   putpixel(x0-y,y0+x,c)
1fc08     14 13 02 F6 | 	mov	arg01, local02
1fc0c     13 13 82 F1 | 	sub	arg01, local01
1fc10     15 15 02 F6 | 	mov	arg02, local03
1fc14     18 15 02 F1 | 	add	arg02, local06
1fc18     16 17 02 F6 | 	mov	arg03, local04
1fc1c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fc20                 | '   putpixel(x0+y,y0-x,c)
1fc20     14 13 02 F6 | 	mov	arg01, local02
1fc24     13 13 02 F1 | 	add	arg01, local01
1fc28     15 15 02 F6 | 	mov	arg02, local03
1fc2c     18 15 82 F1 | 	sub	arg02, local06
1fc30     16 17 02 F6 | 	mov	arg03, local04
1fc34     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fc38                 | '   putpixel(x0+y,y0+x,c)
1fc38     14 13 02 F6 | 	mov	arg01, local02
1fc3c     13 13 02 F1 | 	add	arg01, local01
1fc40     15 15 02 F6 | 	mov	arg02, local03
1fc44     18 15 02 F1 | 	add	arg02, local06
1fc48     16 17 02 F6 | 	mov	arg03, local04
1fc4c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fc50                 | '   if d>0 
1fc50     01 2E 56 F2 | 	cmps	local05, #1 wc
1fc54     18 00 90 CD |  if_b	jmp	#LR__2531
1fc58                 | '     d+=da
1fc58     1A 2F 02 F1 | 	add	local05, local08
1fc5c                 | '     y-=1
1fc5c     01 26 86 F1 | 	sub	local01, #1
1fc60                 | '     x+=1
1fc60     01 30 06 F1 | 	add	local06, #1
1fc64                 | '     da+=4*4
1fc64     10 34 06 F1 | 	add	local08, #16
1fc68                 | '     db+=2*4
1fc68     08 32 06 F1 | 	add	local07, #8
1fc6c     18 FF 9F FD | 	jmp	#LR__2530
1fc70                 | LR__2531
1fc70                 | '   else
1fc70                 | '     d+=db
1fc70     19 2F 02 F1 | 	add	local05, local07
1fc74                 | '     x+=1
1fc74     01 30 06 F1 | 	add	local06, #1
1fc78                 | '     da+=2*4
1fc78     08 34 06 F1 | 	add	local08, #8
1fc7c                 | '     db+=2*4
1fc7c     08 32 06 F1 | 	add	local07, #8
1fc80     04 FF 9F FD | 	jmp	#LR__2530
1fc84                 | LR__2532
1fc84     A7 F0 03 F6 | 	mov	ptra, fp
1fc88     B2 00 A0 FD | 	call	#popregs_
1fc8c                 | _hg010b_spin2_circle_ret
1fc8c     2D 00 64 FD | 	ret
1fc90                 | 
1fc90                 | '     
1fc90                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1fc90                 | ' 
1fc90                 | ' pub frame(x1,y1,x2,y2,c)
1fc90                 | _hg010b_spin2_frame
1fc90     05 4A 05 F6 | 	mov	COUNT_, #5
1fc94     A8 00 A0 FD | 	call	#pushregs_
1fc98     09 27 02 F6 | 	mov	local01, arg01
1fc9c     0A 29 02 F6 | 	mov	local02, arg02
1fca0     0B 2B 02 F6 | 	mov	local03, arg03
1fca4     0C 2D 02 F6 | 	mov	local04, arg04
1fca8     0D 2F 02 F6 | 	mov	local05, arg05
1fcac                 | ' 
1fcac                 | ' fastline(x1,x2,y1,c)
1fcac     13 13 02 F6 | 	mov	arg01, local01
1fcb0     15 15 02 F6 | 	mov	arg02, local03
1fcb4     14 17 02 F6 | 	mov	arg03, local02
1fcb8     17 19 02 F6 | 	mov	arg04, local05
1fcbc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1fcc0                 | ' fastline(x1,x2,y2,c)
1fcc0     13 13 02 F6 | 	mov	arg01, local01
1fcc4     15 15 02 F6 | 	mov	arg02, local03
1fcc8     16 17 02 F6 | 	mov	arg03, local04
1fccc     17 19 02 F6 | 	mov	arg04, local05
1fcd0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1fcd4                 | ' line(x1,y1,x1,y2,c)
1fcd4     13 13 02 F6 | 	mov	arg01, local01
1fcd8     14 15 02 F6 | 	mov	arg02, local02
1fcdc     13 17 02 F6 | 	mov	arg03, local01
1fce0     16 19 02 F6 | 	mov	arg04, local04
1fce4     17 1B 02 F6 | 	mov	arg05, local05
1fce8                 | ' draw(x1,y1,x2,y2,c)
1fce8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1fcec                 | ' line(x2,y1,x2,y2,c)
1fcec     15 13 02 F6 | 	mov	arg01, local03
1fcf0     14 15 02 F6 | 	mov	arg02, local02
1fcf4     15 17 02 F6 | 	mov	arg03, local03
1fcf8     16 19 02 F6 | 	mov	arg04, local04
1fcfc     17 1B 02 F6 | 	mov	arg05, local05
1fd00                 | ' draw(x1,y1,x2,y2,c)
1fd00     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1fd04     A7 F0 03 F6 | 	mov	ptra, fp
1fd08     B2 00 A0 FD | 	call	#popregs_
1fd0c                 | _hg010b_spin2_frame_ret
1fd0c     2D 00 64 FD | 	ret
1fd10                 | 
1fd10                 | ' 
1fd10                 | ' '-- A box (a filled rectangle) ----------------------------------------
1fd10                 | ' 
1fd10                 | ' pub box(x1,y1,x2,y2,c) |yy
1fd10                 | _hg010b_spin2_box
1fd10     06 4A 05 F6 | 	mov	COUNT_, #6
1fd14     A8 00 A0 FD | 	call	#pushregs_
1fd18     09 27 02 F6 | 	mov	local01, arg01
1fd1c     0A 29 02 F6 | 	mov	local02, arg02
1fd20     0B 2B 02 F6 | 	mov	local03, arg03
1fd24     0C 2D 02 F6 | 	mov	local04, arg04
1fd28     0D 2F 02 F6 | 	mov	local05, arg05
1fd2c                 | ' 
1fd2c                 | ' repeat yy from y1 to y2
1fd2c     14 2D 52 F2 | 	cmps	local04, local02 wc
1fd30     01 30 86 F6 | 	negc	local06, #1
1fd34     18 2D 02 F1 | 	add	local04, local06
1fd38                 | LR__2540
1fd38                 | '   fastline(x1,x2,yy,c)
1fd38     13 13 02 F6 | 	mov	arg01, local01
1fd3c     15 15 02 F6 | 	mov	arg02, local03
1fd40     17 19 02 F6 | 	mov	arg04, local05
1fd44     14 17 02 F6 | 	mov	arg03, local02
1fd48     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1fd4c     18 29 02 F1 | 	add	local02, local06
1fd50     16 29 0A F2 | 	cmp	local02, local04 wz
1fd54     E0 FF 9F 5D |  if_ne	jmp	#LR__2540
1fd58     A7 F0 03 F6 | 	mov	ptra, fp
1fd5c     B2 00 A0 FD | 	call	#popregs_
1fd60                 | _hg010b_spin2_box_ret
1fd60     2D 00 64 FD | 	ret
1fd64                 | 
1fd64                 | '       
1fd64                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1fd64                 | _hg010b_spin2_putcharxycgf
1fd64                 | ' 
1fd64                 | '  
1fd64                 | ' repeat yy from 0 to 15
1fd64     00 00 06 F6 | 	mov	_var01, #0
1fd68     97 8C 48 FB | 	callpa	#(@LR__2552-@LR__2550)>>2,fcache_load_ptr_
1fd6c                 | LR__2550
1fd6c                 | ' 
1fd6c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1fd6c     95 E4 05 F1 | 	add	objptr, #149
1fd70     F2 02 02 FB | 	rdlong	_var02, objptr
1fd74     0A 02 66 F0 | 	shl	_var02, #10
1fd78     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1fd7c     01 05 02 F1 | 	add	_var03, _var02
1fd80     0B 03 02 F6 | 	mov	_var02, arg03
1fd84     04 02 66 F0 | 	shl	_var02, #4
1fd88     01 05 02 F1 | 	add	_var03, _var02
1fd8c     00 05 02 F1 | 	add	_var03, _var01
1fd90     02 05 C2 FA | 	rdbyte	_var03, _var03
1fd94                 | '   asm
1fd94     00 04 0E F4 | 	testb	_var03, #0 wz
1fd98     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1fd9c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1fda0     01 04 0E F4 | 	testb	_var03, #1 wz
1fda4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1fda8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1fdac     02 04 0E F4 | 	testb	_var03, #2 wz
1fdb0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1fdb4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1fdb8     03 04 0E F4 | 	testb	_var03, #3 wz
1fdbc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1fdc0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1fdc4     04 04 0E F4 | 	testb	_var03, #4 wz
1fdc8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1fdcc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1fdd0     05 04 0E F4 | 	testb	_var03, #5 wz
1fdd4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1fdd8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1fddc     06 04 0E F4 | 	testb	_var03, #6 wz
1fde0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1fde4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1fde8     07 04 0E F4 | 	testb	_var03, #7 wz
1fdec     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1fdf0     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1fdf4                 | '   
1fdf4                 | '   ccc[0]:=c1
1fdf4     99 E5 05 F1 | 	add	objptr, #409
1fdf8     F2 06 62 FC | 	wrlong	_var04, objptr
1fdfc                 | '   ccc[1]:=c2 
1fdfc     04 E4 05 F1 | 	add	objptr, #4
1fe00     F2 08 62 FC | 	wrlong	_var05, objptr
1fe04                 | '   long[mailbox0][2]:=8
1fe04     49 E4 85 F1 | 	sub	objptr, #73
1fe08     F2 04 02 FB | 	rdlong	_var03, objptr
1fe0c     08 04 06 F1 | 	add	_var03, #8
1fe10     02 11 68 FC | 	wrlong	#8, _var03
1fe14                 | '   long[mailbox0][1]:=@ccc
1fe14     45 E4 05 F1 | 	add	objptr, #69
1fe18     F2 04 02 F6 | 	mov	_var03, objptr
1fe1c     45 E4 85 F1 | 	sub	objptr, #69
1fe20     F2 02 02 FB | 	rdlong	_var02, objptr
1fe24     04 02 06 F1 | 	add	_var02, #4
1fe28     01 05 62 FC | 	wrlong	_var03, _var02
1fe2c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1fe2c     0C E5 85 F1 | 	sub	objptr, #268
1fe30     F2 04 02 FB | 	rdlong	_var03, objptr
1fe34     0A 03 02 F6 | 	mov	_var02, arg02
1fe38     00 03 02 F1 | 	add	_var02, _var01
1fe3c     0A 02 66 F0 | 	shl	_var02, #10
1fe40     09 0B 02 F6 | 	mov	_var06, arg01
1fe44     02 0A 66 F0 | 	shl	_var06, #2
1fe48     05 03 02 F1 | 	add	_var02, _var06
1fe4c     01 05 02 F1 | 	add	_var03, _var02
1fe50     00 00 78 FF 
1fe54     00 04 06 F1 | 	add	_var03, ##-268435456
1fe58     0C E5 05 F1 | 	add	objptr, #268
1fe5c     F2 0A 02 FB | 	rdlong	_var06, objptr
1fe60     05 05 62 FC | 	wrlong	_var03, _var06
1fe64                 | '   repeat
1fe64                 | LR__2551
1fe64     F2 04 02 FB | 	rdlong	_var03, objptr
1fe68     02 03 02 FB | 	rdlong	_var02, _var03
1fe6c     00 02 56 F2 | 	cmps	_var02, #0 wc
1fe70     F0 FF 9F CD |  if_b	jmp	#LR__2551
1fe74     E9 E5 85 F1 | 	sub	objptr, #489
1fe78     01 00 06 F1 | 	add	_var01, #1
1fe7c     10 00 56 F2 | 	cmps	_var01, #16 wc
1fe80     E8 FE 9F CD |  if_b	jmp	#LR__2550
1fe84                 | LR__2552
1fe84                 | _hg010b_spin2_putcharxycgf_ret
1fe84     2D 00 64 FD | 	ret
1fe88                 | 
1fe88                 | ' 
1fe88                 | ' 
1fe88                 | ' '**********************************************************************r***
1fe88                 | ' '                                                                        *
1fe88                 | ' ' Font related functions                                                 *
1fe88                 | ' '                                                                        *
1fe88                 | ' '*************************************************************************
1fe88                 | ' 
1fe88                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1fe88                 | ' 
1fe88                 | ' pub setfontfamily(afontnum)
1fe88                 | _hg010b_spin2_setfontfamily
1fe88                 | ' 
1fe88                 | ' font_family:=afontnum
1fe88     95 E4 05 F1 | 	add	objptr, #149
1fe8c     F2 12 62 FC | 	wrlong	arg01, objptr
1fe90     95 E4 85 F1 | 	sub	objptr, #149
1fe94                 | ' 'if afontnum==8
1fe94                 | ' '  font_ptr:=@amiga_font
1fe94                 | ' 
1fe94                 | ' if afontnum==4
1fe94     04 12 0E F2 | 	cmp	arg01, #4 wz
1fe98                 | '   font_ptr:=@st_font
1fe98     08 00 00 AF 
1fe9c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1fea0     08 E4 05 A1 |  if_e	add	objptr, #8
1fea4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1fea8     08 E4 85 A1 |  if_e	sub	objptr, #8
1feac     08 00 00 AF 
1feb0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1feb4                 | ' if afontnum==0
1feb4     00 12 0E F2 | 	cmp	arg01, #0 wz
1feb8                 | '   font_ptr:=@vga_font
1feb8     08 E4 05 A1 |  if_e	add	objptr, #8
1febc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1fec0     08 E4 85 A1 |  if_e	sub	objptr, #8
1fec4                 | _hg010b_spin2_setfontfamily_ret
1fec4     2D 00 64 FD | 	ret
1fec8                 | 
1fec8                 | ' 
1fec8                 | ' '*************************************************************************
1fec8                 | ' '                                                                        *
1fec8                 | ' '  Cursor functions                                                      *
1fec8                 | ' '                                                                        *
1fec8                 | ' '*************************************************************************
1fec8                 | ' 
1fec8                 | ' 
1fec8                 | ' pub setcursorpos(x,y)
1fec8                 | _hg010b_spin2_setcursorpos
1fec8                 | ' 
1fec8                 | ' ''---------- Set the (x,y) position of cursor
1fec8                 | ' 
1fec8                 | ' cursor_x:=x
1fec8     3C E4 05 F1 | 	add	objptr, #60
1fecc     F2 12 52 FC | 	wrword	arg01, objptr
1fed0                 | ' cursor_y:=y
1fed0     02 E4 05 F1 | 	add	objptr, #2
1fed4     F2 14 42 FC | 	wrbyte	arg02, objptr
1fed8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fed8     02 E4 85 F1 | 	sub	objptr, #2
1fedc     F2 14 E2 FA | 	rdword	arg02, objptr
1fee0     02 14 66 F0 | 	shl	arg02, #2
1fee4     02 E4 05 F1 | 	add	objptr, #2
1fee8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1feec     3E E4 85 F1 | 	sub	objptr, #62
1fef0     04 16 66 F0 | 	shl	arg03, #4
1fef4     04 16 06 F1 | 	add	arg03, #4
1fef8     11 12 06 F6 | 	mov	arg01, #17
1fefc     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ff00                 | _hg010b_spin2_setcursorpos_ret
1ff00     2D 00 64 FD | 	ret
1ff04                 | 
1ff04                 | ' 
1ff04                 | ' pub setcursorx(x)
1ff04                 | _hg010b_spin2_setcursorx
1ff04                 | ' cursor_x:=x
1ff04     3C E4 05 F1 | 	add	objptr, #60
1ff08     F2 12 52 FC | 	wrword	arg01, objptr
1ff0c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ff0c     F2 14 E2 FA | 	rdword	arg02, objptr
1ff10     02 14 66 F0 | 	shl	arg02, #2
1ff14     02 E4 05 F1 | 	add	objptr, #2
1ff18     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ff1c     3E E4 85 F1 | 	sub	objptr, #62
1ff20     04 16 66 F0 | 	shl	arg03, #4
1ff24     04 16 06 F1 | 	add	arg03, #4
1ff28     11 12 06 F6 | 	mov	arg01, #17
1ff2c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ff30                 | _hg010b_spin2_setcursorx_ret
1ff30     2D 00 64 FD | 	ret
1ff34                 | 
1ff34                 | ' 
1ff34                 | ' pub setcursory(y) 
1ff34                 | _hg010b_spin2_setcursory
1ff34                 | ' cursor_y:=y
1ff34     3E E4 05 F1 | 	add	objptr, #62
1ff38     F2 12 42 FC | 	wrbyte	arg01, objptr
1ff3c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1ff3c     02 E4 85 F1 | 	sub	objptr, #2
1ff40     F2 14 E2 FA | 	rdword	arg02, objptr
1ff44     02 14 66 F0 | 	shl	arg02, #2
1ff48     02 E4 05 F1 | 	add	objptr, #2
1ff4c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ff50     3E E4 85 F1 | 	sub	objptr, #62
1ff54     04 16 66 F0 | 	shl	arg03, #4
1ff58     04 16 06 F1 | 	add	arg03, #4
1ff5c     11 12 06 F6 | 	mov	arg01, #17
1ff60     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1ff64                 | _hg010b_spin2_setcursory_ret
1ff64     2D 00 64 FD | 	ret
1ff68                 | 
1ff68                 | ' 
1ff68                 | ' '*************************************************************************
1ff68                 | ' '                                                                        *
1ff68                 | ' '  VBlank functions                                                      *
1ff68                 | ' '                                                                        *
1ff68                 | ' '*************************************************************************
1ff68                 | ' 
1ff68                 | ' pub waitvbl(amount) | i
1ff68                 | _hg010b_spin2_waitvbl
1ff68     03 4A 05 F6 | 	mov	COUNT_, #3
1ff6c     A8 00 A0 FD | 	call	#pushregs_
1ff70     09 27 02 F6 | 	mov	local01, arg01
1ff74                 | ' 
1ff74                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1ff74                 | ' 
1ff74                 | ' repeat i from 1 to amount
1ff74     01 28 06 F6 | 	mov	local02, #1
1ff78     01 26 56 F2 | 	cmps	local01, #1 wc
1ff7c     01 2A 86 F6 | 	negc	local03, #1
1ff80     15 27 02 F1 | 	add	local01, local03
1ff84                 | LR__2560
1ff84                 | '   repeat until vblank==0
1ff84                 | LR__2561
1ff84     49 E4 05 F1 | 	add	objptr, #73
1ff88     F2 12 0A FB | 	rdlong	arg01, objptr wz
1ff8c     49 E4 85 F1 | 	sub	objptr, #73
1ff90     0C 00 90 AD |  if_e	jmp	#LR__2562
1ff94                 | '     waitus(100)
1ff94     64 12 06 F6 | 	mov	arg01, #100
1ff98     D8 1F B0 FD | 	call	#__system___waitus
1ff9c     E4 FF 9F FD | 	jmp	#LR__2561
1ffa0                 | LR__2562
1ffa0                 | '   repeat until vblank==1
1ffa0                 | LR__2563
1ffa0     49 E4 05 F1 | 	add	objptr, #73
1ffa4     F2 12 02 FB | 	rdlong	arg01, objptr
1ffa8     49 E4 85 F1 | 	sub	objptr, #73
1ffac     01 12 0E F2 | 	cmp	arg01, #1 wz
1ffb0     0C 00 90 AD |  if_e	jmp	#LR__2564
1ffb4                 | '     waitus(100)
1ffb4     64 12 06 F6 | 	mov	arg01, #100
1ffb8     B8 1F B0 FD | 	call	#__system___waitus
1ffbc     E0 FF 9F FD | 	jmp	#LR__2563
1ffc0                 | LR__2564
1ffc0     15 29 02 F1 | 	add	local02, local03
1ffc4     13 29 0A F2 | 	cmp	local02, local01 wz
1ffc8     B8 FF 9F 5D |  if_ne	jmp	#LR__2560
1ffcc     A7 F0 03 F6 | 	mov	ptra, fp
1ffd0     B2 00 A0 FD | 	call	#popregs_
1ffd4                 | _hg010b_spin2_waitvbl_ret
1ffd4     2D 00 64 FD | 	ret
1ffd8                 | 
1ffd8                 | ' 
1ffd8                 | ' 
1ffd8                 | ' pub cls(fc,bc)   :c,i
1ffd8                 | _hg010b_spin2_cls
1ffd8     02 4A 05 F6 | 	mov	COUNT_, #2
1ffdc     A8 00 A0 FD | 	call	#pushregs_
1ffe0     09 27 02 F6 | 	mov	local01, arg01
1ffe4     0A 29 02 F6 | 	mov	local02, arg02
1ffe8                 | ' 
1ffe8                 | ' c:=bc
1ffe8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1ffe8     DD E4 05 F1 | 	add	objptr, #221
1ffec     F2 12 02 FB | 	rdlong	arg01, objptr
1fff0     A5 E4 85 F1 | 	sub	objptr, #165
1fff4     F2 16 02 FB | 	rdlong	arg03, objptr
1fff8     02 16 66 F0 | 	shl	arg03, #2
1fffc     14 15 02 F6 | 	mov	arg02, local02
20000     00 18 06 F6 | 	mov	arg04, #0
20004     01 1A 06 F6 | 	mov	arg05, #1
20008     0B 00 00 FF 
2000c     94 E4 05 F1 | 	add	objptr, ##5780
20010     F8 10 B0 FD | 	call	#_psram_spin2_fill
20014                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
20014     0B 00 00 FF 
20018     C8 E4 85 F1 | 	sub	objptr, ##5832
2001c     F2 12 02 FB | 	rdlong	arg01, objptr
20020     04 E4 85 F1 | 	sub	objptr, #4
20024     F2 16 02 FB | 	rdlong	arg03, objptr
20028     09 17 82 F1 | 	sub	arg03, arg01
2002c     20 14 06 F6 | 	mov	arg02, #32
20030     00 18 06 F6 | 	mov	arg04, #0
20034     01 1A 06 F6 | 	mov	arg05, #1
20038     0B 00 00 FF 
2003c     CC E4 05 F1 | 	add	objptr, ##5836
20040     C8 10 B0 FD | 	call	#_psram_spin2_fill
20044                 | ' setwritecolors(fc,bc)
20044                 | ' 
20044                 | ' write_color:=ff
20044     0B 00 00 FF 
20048     8B E4 85 F1 | 	sub	objptr, ##5771
2004c     F2 26 62 FC | 	wrlong	local01, objptr
20050                 | ' write_background:=bb
20050     04 E4 05 F1 | 	add	objptr, #4
20054     F2 28 62 FC | 	wrlong	local02, objptr
20058                 | ' cursor_x:=0
20058     09 E4 85 F1 | 	sub	objptr, #9
2005c     F2 00 58 FC | 	wrword	#0, objptr
20060                 | ' cursor_y:=0
20060     02 E4 05 F1 | 	add	objptr, #2
20064     F2 00 48 FC | 	wrbyte	#0, objptr
20068                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
20068     02 E4 85 F1 | 	sub	objptr, #2
2006c     F2 14 E2 FA | 	rdword	arg02, objptr
20070     02 14 66 F0 | 	shl	arg02, #2
20074     02 E4 05 F1 | 	add	objptr, #2
20078     F2 16 C2 FA | 	rdbyte	arg03, objptr
2007c     3E E4 85 F1 | 	sub	objptr, #62
20080     04 16 66 F0 | 	shl	arg03, #4
20084     04 16 06 F1 | 	add	arg03, #4
20088     11 12 06 F6 | 	mov	arg01, #17
2008c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
20090                 | ' setcursorcolor(fc)
20090     13 13 02 F6 | 	mov	arg01, local01
20094     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
20098     14 FB 01 F6 | 	mov	result1, local02
2009c     00 FC 05 F6 | 	mov	result2, #0
200a0     A7 F0 03 F6 | 	mov	ptra, fp
200a4     B2 00 A0 FD | 	call	#popregs_
200a8                 | _hg010b_spin2_cls_ret
200a8     2D 00 64 FD | 	ret
200ac                 | 
200ac                 | ' 
200ac                 | ' ''---------- Output a char at the cursor position, move the cursor 
200ac                 | ' 
200ac                 | ' pub putchar(achar) | c,x,y,l,newcpl
200ac                 | _hg010b_spin2_putchar
200ac     02 4A 05 F6 | 	mov	COUNT_, #2
200b0     A8 00 A0 FD | 	call	#pushregs_
200b4     09 27 02 F6 | 	mov	local01, arg01
200b8                 | ' 
200b8                 | ' if achar==10
200b8     0A 26 0E F2 | 	cmp	local01, #10 wz
200bc                 | '   crlf()
200bc     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
200c0                 | ' if achar==9
200c0     09 26 0E F2 | 	cmp	local01, #9 wz
200c4     18 00 90 5D |  if_ne	jmp	#LR__2570
200c8                 | '   cursor_x:=(cursor_x& %11110000)+16
200c8     3C E4 05 F1 | 	add	objptr, #60
200cc     F2 16 E2 FA | 	rdword	arg03, objptr
200d0     F0 16 06 F5 | 	and	arg03, #240
200d4     10 16 06 F1 | 	add	arg03, #16
200d8     F2 16 52 FC | 	wrword	arg03, objptr
200dc     3C E4 85 F1 | 	sub	objptr, #60
200e0                 | LR__2570
200e0                 | '   
200e0                 | ' if (achar<>9) && (achar<>10) 
200e0     09 26 0E F2 | 	cmp	local01, #9 wz
200e4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
200e8     A8 00 90 AD |  if_e	jmp	#LR__2571
200ec                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
200ec     3C E4 05 F1 | 	add	objptr, #60
200f0     F2 12 E2 FA | 	rdword	arg01, objptr
200f4     02 E4 05 F1 | 	add	objptr, #2
200f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
200fc     04 14 66 F0 | 	shl	arg02, #4
20100     04 14 06 F1 | 	add	arg02, #4
20104     03 E4 05 F1 | 	add	objptr, #3
20108     F2 18 02 FB | 	rdlong	arg04, objptr
2010c     04 E4 05 F1 | 	add	objptr, #4
20110     F2 1A 02 FB | 	rdlong	arg05, objptr
20114     45 E4 85 F1 | 	sub	objptr, #69
20118     13 17 02 F6 | 	mov	arg03, local01
2011c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
20120     04 E4 05 F1 | 	add	objptr, #4
20124     F2 12 02 FB | 	rdlong	arg01, objptr
20128     10 00 00 FF 
2012c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20130     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20134     3A E4 05 F1 | 	add	objptr, #58
20138     F2 1A C2 FA | 	rdbyte	arg05, objptr
2013c     0D 17 02 FD | 	qmul	arg03, arg05
20140                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
20140     10 00 00 FF 
20144     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20148     02 E4 85 F1 | 	sub	objptr, #2
2014c     F2 28 E2 FA | 	rdword	local02, objptr
20150     01 28 46 F0 | 	shr	local02, #1
20154     13 15 02 F6 | 	mov	arg02, local01
20158     01 16 06 F6 | 	mov	arg03, #1
2015c     00 18 06 F6 | 	mov	arg04, #0
20160     01 1A 06 F6 | 	mov	arg05, #1
20164     0B 00 00 FF 
20168     90 E4 05 F1 | 	add	objptr, ##5776
2016c     18 26 62 FD | 	getqx	local01
20170     14 27 02 F1 | 	add	local01, local02
20174     13 13 02 F1 | 	add	arg01, local01
20178     90 0F B0 FD | 	call	#_psram_spin2_fill
2017c                 | '   cursor_x+=2
2017c     0B 00 00 FF 
20180     90 E4 85 F1 | 	sub	objptr, ##5776
20184     F2 28 E2 FA | 	rdword	local02, objptr
20188     02 28 06 F1 | 	add	local02, #2
2018c     F2 28 52 FC | 	wrword	local02, objptr
20190     3C E4 85 F1 | 	sub	objptr, #60
20194                 | LR__2571
20194                 | ' 
20194                 | ' if cursor_x>=256
20194     3C E4 05 F1 | 	add	objptr, #60
20198     F2 28 E2 FA | 	rdword	local02, objptr
2019c     3C E4 85 F1 | 	sub	objptr, #60
201a0     00 29 56 F2 | 	cmps	local02, #256 wc
201a4     64 00 90 CD |  if_b	jmp	#LR__2573
201a8                 | '   cursor_x:=0
201a8     3C E4 05 F1 | 	add	objptr, #60
201ac     F2 00 58 FC | 	wrword	#0, objptr
201b0                 | '   cursor_y+=1
201b0     02 E4 05 F1 | 	add	objptr, #2
201b4     F2 28 C2 FA | 	rdbyte	local02, objptr
201b8     01 28 06 F1 | 	add	local02, #1
201bc     F2 28 42 FC | 	wrbyte	local02, objptr
201c0                 | '   if cursor_y>st_lines-1
201c0     C3 E4 05 F1 | 	add	objptr, #195
201c4     F2 28 02 FB | 	rdlong	local02, objptr
201c8     01 28 86 F1 | 	sub	local02, #1
201cc     C3 E4 85 F1 | 	sub	objptr, #195
201d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
201d4     3E E4 85 F1 | 	sub	objptr, #62
201d8     14 17 5A F2 | 	cmps	arg03, local02 wcz
201dc     2C 00 90 ED |  if_be	jmp	#LR__2572
201e0                 | '     scrollup2()
201e0     00 12 06 F6 | 	mov	arg01, #0
201e4     01 00 00 FF 
201e8     58 14 06 F6 | 	mov	arg02, ##600
201ec     10 16 06 F6 | 	mov	arg03, #16
201f0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
201f4                 | '     cursor_y:=st_lines-1
201f4     01 E5 05 F1 | 	add	objptr, #257
201f8     F2 28 02 FB | 	rdlong	local02, objptr
201fc     01 28 86 F1 | 	sub	local02, #1
20200     C3 E4 85 F1 | 	sub	objptr, #195
20204     F2 28 42 FC | 	wrbyte	local02, objptr
20208     3E E4 85 F1 | 	sub	objptr, #62
2020c                 | LR__2572
2020c                 | LR__2573
2020c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2020c     3C E4 05 F1 | 	add	objptr, #60
20210     F2 14 E2 FA | 	rdword	arg02, objptr
20214     02 14 66 F0 | 	shl	arg02, #2
20218     02 E4 05 F1 | 	add	objptr, #2
2021c     F2 16 C2 FA | 	rdbyte	arg03, objptr
20220     3E E4 85 F1 | 	sub	objptr, #62
20224     04 16 66 F0 | 	shl	arg03, #4
20228     04 16 06 F1 | 	add	arg03, #4
2022c     11 12 06 F6 | 	mov	arg01, #17
20230     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
20234     A7 F0 03 F6 | 	mov	ptra, fp
20238     B2 00 A0 FD | 	call	#popregs_
2023c                 | _hg010b_spin2_putchar_ret
2023c     2D 00 64 FD | 	ret
20240                 | 
20240                 | '     
20240                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
20240                 | ' 
20240                 | ' pub putchar2(achar) | c,x,y,l,newcpl
20240                 | _hg010b_spin2_putchar2
20240     02 4A 05 F6 | 	mov	COUNT_, #2
20244     A8 00 A0 FD | 	call	#pushregs_
20248     09 27 02 F6 | 	mov	local01, arg01
2024c                 | ' 
2024c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2024c     3C E4 05 F1 | 	add	objptr, #60
20250     F2 12 E2 FA | 	rdword	arg01, objptr
20254     02 E4 05 F1 | 	add	objptr, #2
20258     F2 14 C2 FA | 	rdbyte	arg02, objptr
2025c     04 14 66 F0 | 	shl	arg02, #4
20260     04 14 06 F1 | 	add	arg02, #4
20264     03 E4 05 F1 | 	add	objptr, #3
20268     F2 18 02 FB | 	rdlong	arg04, objptr
2026c     04 E4 05 F1 | 	add	objptr, #4
20270     F2 1A 02 FB | 	rdlong	arg05, objptr
20274     45 E4 85 F1 | 	sub	objptr, #69
20278     13 17 02 F6 | 	mov	arg03, local01
2027c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
20280     04 E4 05 F1 | 	add	objptr, #4
20284     F2 12 02 FB | 	rdlong	arg01, objptr
20288     10 00 00 FF 
2028c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20290     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20294     3A E4 05 F1 | 	add	objptr, #58
20298     F2 1A C2 FA | 	rdbyte	arg05, objptr
2029c     0D 17 02 FD | 	qmul	arg03, arg05
202a0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
202a0     10 00 00 FF 
202a4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
202a8     02 E4 85 F1 | 	sub	objptr, #2
202ac     F2 28 E2 FA | 	rdword	local02, objptr
202b0     01 28 46 F0 | 	shr	local02, #1
202b4     13 15 02 F6 | 	mov	arg02, local01
202b8     01 16 06 F6 | 	mov	arg03, #1
202bc     00 18 06 F6 | 	mov	arg04, #0
202c0     01 1A 06 F6 | 	mov	arg05, #1
202c4     0B 00 00 FF 
202c8     90 E4 05 F1 | 	add	objptr, ##5776
202cc     18 26 62 FD | 	getqx	local01
202d0     14 27 02 F1 | 	add	local01, local02
202d4     13 13 02 F1 | 	add	arg01, local01
202d8     30 0E B0 FD | 	call	#_psram_spin2_fill
202dc                 | ' 
202dc                 | ' cursor_x+=2
202dc     0B 00 00 FF 
202e0     90 E4 85 F1 | 	sub	objptr, ##5776
202e4     F2 28 E2 FA | 	rdword	local02, objptr
202e8     02 28 06 F1 | 	add	local02, #2
202ec     F2 28 52 FC | 	wrword	local02, objptr
202f0                 | ' if cursor_x>=256
202f0     F2 28 E2 FA | 	rdword	local02, objptr
202f4     3C E4 85 F1 | 	sub	objptr, #60
202f8     00 29 56 F2 | 	cmps	local02, #256 wc
202fc     64 00 90 CD |  if_b	jmp	#LR__2581
20300                 | '   cursor_x:=0
20300     3C E4 05 F1 | 	add	objptr, #60
20304     F2 00 58 FC | 	wrword	#0, objptr
20308                 | '   cursor_y+=1
20308     02 E4 05 F1 | 	add	objptr, #2
2030c     F2 28 C2 FA | 	rdbyte	local02, objptr
20310     01 28 06 F1 | 	add	local02, #1
20314     F2 28 42 FC | 	wrbyte	local02, objptr
20318                 | '   if cursor_y>st_lines-1
20318     C3 E4 05 F1 | 	add	objptr, #195
2031c     F2 28 02 FB | 	rdlong	local02, objptr
20320     01 28 86 F1 | 	sub	local02, #1
20324     C3 E4 85 F1 | 	sub	objptr, #195
20328     F2 16 C2 FA | 	rdbyte	arg03, objptr
2032c     3E E4 85 F1 | 	sub	objptr, #62
20330     14 17 5A F2 | 	cmps	arg03, local02 wcz
20334     2C 00 90 ED |  if_be	jmp	#LR__2580
20338                 | '     scrollup2()
20338     00 12 06 F6 | 	mov	arg01, #0
2033c     01 00 00 FF 
20340     58 14 06 F6 | 	mov	arg02, ##600
20344     10 16 06 F6 | 	mov	arg03, #16
20348     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2034c                 | '     cursor_y:=st_lines-1
2034c     01 E5 05 F1 | 	add	objptr, #257
20350     F2 28 02 FB | 	rdlong	local02, objptr
20354     01 28 86 F1 | 	sub	local02, #1
20358     C3 E4 85 F1 | 	sub	objptr, #195
2035c     F2 28 42 FC | 	wrbyte	local02, objptr
20360     3E E4 85 F1 | 	sub	objptr, #62
20364                 | LR__2580
20364                 | LR__2581
20364                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
20364     3C E4 05 F1 | 	add	objptr, #60
20368     F2 14 E2 FA | 	rdword	arg02, objptr
2036c     02 14 66 F0 | 	shl	arg02, #2
20370     02 E4 05 F1 | 	add	objptr, #2
20374     F2 16 C2 FA | 	rdbyte	arg03, objptr
20378     3E E4 85 F1 | 	sub	objptr, #62
2037c     04 16 66 F0 | 	shl	arg03, #4
20380     04 16 06 F1 | 	add	arg03, #4
20384     11 12 06 F6 | 	mov	arg01, #17
20388     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2038c     A7 F0 03 F6 | 	mov	ptra, fp
20390     B2 00 A0 FD | 	call	#popregs_
20394                 | _hg010b_spin2_putchar2_ret
20394     2D 00 64 FD | 	ret
20398                 | 
20398                 | ' ''--------- Output a string at the cursor position, move the cursor  
20398                 | ' 
20398                 | ' pub write(text) | iii,c,ncx,ncy
20398                 | _hg010b_spin2_write
20398     04 4A 05 F6 | 	mov	COUNT_, #4
2039c     A8 00 A0 FD | 	call	#pushregs_
203a0     09 27 02 F6 | 	mov	local01, arg01
203a4                 | ' 
203a4                 | ' repeat iii from 0 to strsize(text)-1
203a4     00 28 06 F6 | 	mov	local02, #0
203a8     13 13 02 F6 | 	mov	arg01, local01
203ac     09 2B 02 F6 | 	mov	local03, arg01
203b0     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
203b4                 | LR__2590
203b4     15 FB C9 FA | 	rdbyte	result1, local03 wz
203b8     01 2A 06 51 |  if_ne	add	local03, #1
203bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
203c0                 | LR__2591
203c0     09 2B 82 F1 | 	sub	local03, arg01
203c4     01 2A 86 F1 | 	sub	local03, #1
203c8     00 2A 56 F2 | 	cmps	local03, #0 wc
203cc     01 2C 86 F6 | 	negc	local04, #1
203d0     16 2B 02 F1 | 	add	local03, local04
203d4                 | LR__2592
203d4                 | '   putchar2(byte[text+iii])
203d4     13 13 02 F6 | 	mov	arg01, local01
203d8     14 13 02 F1 | 	add	arg01, local02
203dc     09 13 C2 FA | 	rdbyte	arg01, arg01
203e0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
203e4     16 29 02 F1 | 	add	local02, local04
203e8     15 29 0A F2 | 	cmp	local02, local03 wz
203ec     E4 FF 9F 5D |  if_ne	jmp	#LR__2592
203f0     A7 F0 03 F6 | 	mov	ptra, fp
203f4     B2 00 A0 FD | 	call	#popregs_
203f8                 | _hg010b_spin2_write_ret
203f8     2D 00 64 FD | 	ret
203fc                 | 
203fc                 | '    
203fc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
203fc                 | ' 
203fc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
203fc                 | _hg010b_spin2_scrollup2
203fc     03 4A 05 F6 | 	mov	COUNT_, #3
20400     A8 00 A0 FD | 	call	#pushregs_
20404                 | ' 	
20404                 | ' repeat i from 4 to 579 
20404     04 26 06 F6 | 	mov	local01, #4
20408                 | LR__2600
20408     F9 E4 05 F1 | 	add	objptr, #249
2040c     F2 1A 02 FB | 	rdlong	arg05, objptr
20410     1C E4 85 F1 | 	sub	objptr, #28
20414     F2 14 02 FB | 	rdlong	arg02, objptr
20418     13 19 02 F6 | 	mov	arg04, local01
2041c     10 18 06 F1 | 	add	arg04, #16
20420     02 18 66 F0 | 	shl	arg04, #2
20424     14 E4 05 F1 | 	add	objptr, #20
20428     F2 16 02 FB | 	rdlong	arg03, objptr
2042c     0B 19 02 FD | 	qmul	arg04, arg03
20430                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
20430     F6 03 00 FF 
20434     00 12 06 F6 | 	mov	arg01, ##519168
20438     0D 13 82 F1 | 	sub	arg01, arg05
2043c     02 16 66 F0 | 	shl	arg03, #2
20440     0A 00 00 FF 
20444     DB E5 05 F1 | 	add	objptr, ##5595
20448     18 1A 62 FD | 	getqx	arg05
2044c     0D 15 02 F1 | 	add	arg02, arg05
20450     80 0B B0 FD | 	call	#_psram_spin2_read1
20454     0A 00 00 FF 
20458     D3 E5 85 F1 | 	sub	objptr, ##5587
2045c     F2 1A 02 FB | 	rdlong	arg05, objptr
20460     1C E4 85 F1 | 	sub	objptr, #28
20464     F2 14 02 FB | 	rdlong	arg02, objptr
20468     13 19 02 F6 | 	mov	arg04, local01
2046c     02 18 66 F0 | 	shl	arg04, #2
20470     14 E4 05 F1 | 	add	objptr, #20
20474     F2 16 02 FB | 	rdlong	arg03, objptr
20478     0B 19 02 FD | 	qmul	arg04, arg03
2047c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2047c     F6 03 00 FF 
20480     00 12 06 F6 | 	mov	arg01, ##519168
20484     0D 13 82 F1 | 	sub	arg01, arg05
20488     02 16 66 F0 | 	shl	arg03, #2
2048c     0A 00 00 FF 
20490     DB E5 05 F1 | 	add	objptr, ##5595
20494     18 1A 62 FD | 	getqx	arg05
20498     0D 15 02 F1 | 	add	arg02, arg05
2049c     D0 0B B0 FD | 	call	#_psram_spin2_write
204a0     0B 00 00 FF 
204a4     CC E4 85 F1 | 	sub	objptr, ##5836
204a8     01 26 06 F1 | 	add	local01, #1
204ac     01 00 00 FF 
204b0     44 26 16 F2 | 	cmp	local01, ##580 wc
204b4     50 FF 9F CD |  if_b	jmp	#LR__2600
204b8                 | ' 
204b8                 | ' repeat i from 580 to 599
204b8     01 00 00 FF 
204bc     44 26 06 F6 | 	mov	local01, ##580
204c0                 | LR__2601
204c0                 | '    fastline(0,1023,i,write_background)   
204c0     45 E4 05 F1 | 	add	objptr, #69
204c4     F2 18 02 FB | 	rdlong	arg04, objptr
204c8     45 E4 85 F1 | 	sub	objptr, #69
204cc     00 12 06 F6 | 	mov	arg01, #0
204d0     09 14 CE F9 | 	bmask	arg02, #9
204d4     13 17 02 F6 | 	mov	arg03, local01
204d8     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
204dc     01 26 06 F1 | 	add	local01, #1
204e0     01 00 00 FF 
204e4     58 26 16 F2 | 	cmp	local01, ##600 wc
204e8     D4 FF 9F CD |  if_b	jmp	#LR__2601
204ec                 | ' repeat i from 0 to 3
204ec     00 26 06 F6 | 	mov	local01, #0
204f0                 | LR__2602
204f0                 | '    fastline(0,1023,i,write_background)      
204f0     45 E4 05 F1 | 	add	objptr, #69
204f4     F2 18 02 FB | 	rdlong	arg04, objptr
204f8     45 E4 85 F1 | 	sub	objptr, #69
204fc     00 12 06 F6 | 	mov	arg01, #0
20500     09 14 CE F9 | 	bmask	arg02, #9
20504     13 17 02 F6 | 	mov	arg03, local01
20508     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2050c     01 26 06 F1 | 	add	local01, #1
20510     04 26 56 F2 | 	cmps	local01, #4 wc
20514     D8 FF 9F CD |  if_b	jmp	#LR__2602
20518                 | ' 
20518                 | ' repeat i from 0 to 35
20518     00 26 06 F6 | 	mov	local01, #0
2051c                 | LR__2603
2051c     13 1B 02 F6 | 	mov	arg05, local01
20520     01 1A 06 F1 | 	add	arg05, #1
20524     10 00 00 FF 
20528     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2052c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20530     0B 1B 02 FD | 	qmul	arg05, arg03
20534                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
20534     F6 03 00 FF 
20538     00 12 06 F6 | 	mov	arg01, ##519168
2053c     F9 E4 05 F1 | 	add	objptr, #249
20540     F2 1A 02 FB | 	rdlong	arg05, objptr
20544     0D 13 82 F1 | 	sub	arg01, arg05
20548     F5 E4 85 F1 | 	sub	objptr, #245
2054c     F2 14 02 FB | 	rdlong	arg02, objptr
20550     10 00 00 FF 
20554     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20558     0B 00 00 FF 
2055c     C8 E4 05 F1 | 	add	objptr, ##5832
20560     18 1A 62 FD | 	getqx	arg05
20564     0D 15 02 F1 | 	add	arg02, arg05
20568     68 0A B0 FD | 	call	#_psram_spin2_read1
2056c     10 00 00 FF 
20570     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20574     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20578     0B 27 02 FD | 	qmul	local01, arg03
2057c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2057c     F6 03 00 FF 
20580     00 12 06 F6 | 	mov	arg01, ##519168
20584     0A 00 00 FF 
20588     D3 E5 85 F1 | 	sub	objptr, ##5587
2058c     F2 1A 02 FB | 	rdlong	arg05, objptr
20590     0D 13 82 F1 | 	sub	arg01, arg05
20594     F5 E4 85 F1 | 	sub	objptr, #245
20598     F2 14 02 FB | 	rdlong	arg02, objptr
2059c     10 00 00 FF 
205a0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
205a4     0B 00 00 FF 
205a8     C8 E4 05 F1 | 	add	objptr, ##5832
205ac     18 1A 62 FD | 	getqx	arg05
205b0     0D 15 02 F1 | 	add	arg02, arg05
205b4     B8 0A B0 FD | 	call	#_psram_spin2_write
205b8     0B 00 00 FF 
205bc     CC E4 85 F1 | 	sub	objptr, ##5836
205c0     01 26 06 F1 | 	add	local01, #1
205c4     24 26 56 F2 | 	cmps	local01, #36 wc
205c8     50 FF 9F CD |  if_b	jmp	#LR__2603
205cc                 | ' repeat i from 0 to timings[7]-1
205cc     00 26 06 F6 | 	mov	local01, #0
205d0     10 00 00 FF 
205d4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
205d8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
205dc     10 00 00 FF 
205e0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
205e4     01 28 86 F1 | 	sub	local02, #1
205e8     00 28 56 F2 | 	cmps	local02, #0 wc
205ec     01 2A 86 F6 | 	negc	local03, #1
205f0     15 29 02 F1 | 	add	local02, local03
205f4                 | LR__2604
205f4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
205f4     04 E4 05 F1 | 	add	objptr, #4
205f8     F2 12 02 FB | 	rdlong	arg01, objptr
205fc     10 00 00 FF 
20600     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20604     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
20608     10 00 00 FF 
2060c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20610     0D 19 02 F6 | 	mov	arg04, arg05
20614     03 18 66 F0 | 	shl	arg04, #3
20618     0D 19 02 F1 | 	add	arg04, arg05
2061c     02 18 66 F0 | 	shl	arg04, #2
20620     13 19 02 F1 | 	add	arg04, local01
20624     0C 13 02 F1 | 	add	arg01, arg04
20628     20 14 06 F6 | 	mov	arg02, #32
2062c     01 16 06 F6 | 	mov	arg03, #1
20630     00 18 06 F6 | 	mov	arg04, #0
20634     01 1A 06 F6 | 	mov	arg05, #1
20638     0B 00 00 FF 
2063c     C8 E4 05 F1 | 	add	objptr, ##5832
20640     C8 0A B0 FD | 	call	#_psram_spin2_fill
20644     0B 00 00 FF 
20648     CC E4 85 F1 | 	sub	objptr, ##5836
2064c     15 27 02 F1 | 	add	local01, local03
20650     14 27 0A F2 | 	cmp	local01, local02 wz
20654     9C FF 9F 5D |  if_ne	jmp	#LR__2604
20658     A7 F0 03 F6 | 	mov	ptra, fp
2065c     B2 00 A0 FD | 	call	#popregs_
20660                 | _hg010b_spin2_scrollup2_ret
20660     2D 00 64 FD | 	ret
20664                 | 
20664                 | '  
20664                 | ' ''----------- Scroll the screen one line down 
20664                 | ' 
20664                 | ' pub scrolldown(start=0) | i
20664                 | _hg010b_spin2_scrolldown
20664     05 4A 05 F6 | 	mov	COUNT_, #5
20668     A8 00 A0 FD | 	call	#pushregs_
2066c     09 27 02 F6 | 	mov	local01, arg01
20670                 | ' 
20670                 | ' repeat i from 579 to (start*16)+4
20670     01 00 00 FF 
20674     43 28 06 F6 | 	mov	local02, ##579
20678     13 2B 02 F6 | 	mov	local03, local01
2067c     04 2A 66 F0 | 	shl	local03, #4
20680     04 2A 06 F1 | 	add	local03, #4
20684     01 00 00 FF 
20688     43 2A 56 F2 | 	cmps	local03, ##579 wc
2068c     01 2C 86 F6 | 	negc	local04, #1
20690     16 2F 02 F6 | 	mov	local05, local04
20694     16 2B 02 F1 | 	add	local03, local04
20698                 | LR__2610
20698     F9 E4 05 F1 | 	add	objptr, #249
2069c     F2 2C 02 FB | 	rdlong	local04, objptr
206a0     1C E4 85 F1 | 	sub	objptr, #28
206a4     F2 14 02 FB | 	rdlong	arg02, objptr
206a8     14 1B 02 F6 | 	mov	arg05, local02
206ac     02 1A 66 F0 | 	shl	arg05, #2
206b0     14 E4 05 F1 | 	add	objptr, #20
206b4     F2 16 02 FB | 	rdlong	arg03, objptr
206b8     0B 1B 02 FD | 	qmul	arg05, arg03
206bc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
206bc     F6 03 00 FF 
206c0     00 12 06 F6 | 	mov	arg01, ##519168
206c4     16 13 82 F1 | 	sub	arg01, local04
206c8     02 16 66 F0 | 	shl	arg03, #2
206cc     0A 00 00 FF 
206d0     DB E5 05 F1 | 	add	objptr, ##5595
206d4     18 2C 62 FD | 	getqx	local04
206d8     16 15 02 F1 | 	add	arg02, local04
206dc     F4 08 B0 FD | 	call	#_psram_spin2_read1
206e0     0A 00 00 FF 
206e4     D3 E5 85 F1 | 	sub	objptr, ##5587
206e8     F2 2C 02 FB | 	rdlong	local04, objptr
206ec     1C E4 85 F1 | 	sub	objptr, #28
206f0     F2 14 02 FB | 	rdlong	arg02, objptr
206f4     14 1B 02 F6 | 	mov	arg05, local02
206f8     10 1A 06 F1 | 	add	arg05, #16
206fc     02 1A 66 F0 | 	shl	arg05, #2
20700     14 E4 05 F1 | 	add	objptr, #20
20704     F2 16 02 FB | 	rdlong	arg03, objptr
20708     0B 1B 02 FD | 	qmul	arg05, arg03
2070c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2070c     F6 03 00 FF 
20710     00 12 06 F6 | 	mov	arg01, ##519168
20714     16 13 82 F1 | 	sub	arg01, local04
20718     02 16 66 F0 | 	shl	arg03, #2
2071c     0A 00 00 FF 
20720     DB E5 05 F1 | 	add	objptr, ##5595
20724     18 2C 62 FD | 	getqx	local04
20728     16 15 02 F1 | 	add	arg02, local04
2072c     40 09 B0 FD | 	call	#_psram_spin2_write
20730     0B 00 00 FF 
20734     CC E4 85 F1 | 	sub	objptr, ##5836
20738     17 29 02 F1 | 	add	local02, local05
2073c     15 29 0A F2 | 	cmp	local02, local03 wz
20740     54 FF 9F 5D |  if_ne	jmp	#LR__2610
20744                 | ' 
20744                 | ' repeat i from (start*16)+4 to (start*16)+19
20744     13 29 02 F6 | 	mov	local02, local01
20748     04 28 66 F0 | 	shl	local02, #4
2074c     04 28 06 F1 | 	add	local02, #4
20750     13 2F 02 F6 | 	mov	local05, local01
20754     04 2E 66 F0 | 	shl	local05, #4
20758     13 2E 06 F1 | 	add	local05, #19
2075c     13 2D 02 F6 | 	mov	local04, local01
20760     04 2C 66 F0 | 	shl	local04, #4
20764     04 2C 06 F1 | 	add	local04, #4
20768     16 2F 52 F2 | 	cmps	local05, local04 wc
2076c     01 2C 86 F6 | 	negc	local04, #1
20770     16 2B 02 F6 | 	mov	local03, local04
20774     16 2F 02 F1 | 	add	local05, local04
20778                 | LR__2611
20778                 | '    fastline(0,1023,i,write_background)    
20778     45 E4 05 F1 | 	add	objptr, #69
2077c     F2 18 02 FB | 	rdlong	arg04, objptr
20780     45 E4 85 F1 | 	sub	objptr, #69
20784     00 12 06 F6 | 	mov	arg01, #0
20788     09 14 CE F9 | 	bmask	arg02, #9
2078c     14 17 02 F6 | 	mov	arg03, local02
20790     08 ED BF FD | 	call	#_hg010b_spin2_fastline
20794     15 29 02 F1 | 	add	local02, local03
20798     17 29 0A F2 | 	cmp	local02, local05 wz
2079c     D8 FF 9F 5D |  if_ne	jmp	#LR__2611
207a0                 | '    
207a0                 | ' repeat i from 35 to start
207a0     23 28 06 F6 | 	mov	local02, #35
207a4     23 26 56 F2 | 	cmps	local01, #35 wc
207a8     01 2C 86 F6 | 	negc	local04, #1
207ac     13 2F 02 F6 | 	mov	local05, local01
207b0     16 2F 02 F1 | 	add	local05, local04
207b4                 | LR__2612
207b4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
207b4     F6 03 00 FF 
207b8     00 12 06 F6 | 	mov	arg01, ##519168
207bc     F9 E4 05 F1 | 	add	objptr, #249
207c0     F2 2A 02 FB | 	rdlong	local03, objptr
207c4     15 13 82 F1 | 	sub	arg01, local03
207c8     F5 E4 85 F1 | 	sub	objptr, #245
207cc     F2 14 02 FB | 	rdlong	arg02, objptr
207d0     14 2B 02 F6 | 	mov	local03, local02
207d4     07 2A 66 F0 | 	shl	local03, #7
207d8     15 15 02 F1 | 	add	arg02, local03
207dc     80 16 06 F6 | 	mov	arg03, #128
207e0     0B 00 00 FF 
207e4     C8 E4 05 F1 | 	add	objptr, ##5832
207e8     E8 07 B0 FD | 	call	#_psram_spin2_read1
207ec                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
207ec     F6 03 00 FF 
207f0     00 12 06 F6 | 	mov	arg01, ##519168
207f4     0A 00 00 FF 
207f8     D3 E5 85 F1 | 	sub	objptr, ##5587
207fc     F2 2A 02 FB | 	rdlong	local03, objptr
20800     15 13 82 F1 | 	sub	arg01, local03
20804     F5 E4 85 F1 | 	sub	objptr, #245
20808     F2 14 02 FB | 	rdlong	arg02, objptr
2080c     14 2B 02 F6 | 	mov	local03, local02
20810     01 2A 06 F1 | 	add	local03, #1
20814     07 2A 66 F0 | 	shl	local03, #7
20818     15 15 02 F1 | 	add	arg02, local03
2081c     80 16 06 F6 | 	mov	arg03, #128
20820     0B 00 00 FF 
20824     C8 E4 05 F1 | 	add	objptr, ##5832
20828     44 08 B0 FD | 	call	#_psram_spin2_write
2082c     0B 00 00 FF 
20830     CC E4 85 F1 | 	sub	objptr, ##5836
20834     16 29 02 F1 | 	add	local02, local04
20838     17 29 0A F2 | 	cmp	local02, local05 wz
2083c     74 FF 9F 5D |  if_ne	jmp	#LR__2612
20840                 | ' repeat i from 0 to 127
20840     00 28 06 F6 | 	mov	local02, #0
20844                 | LR__2613
20844                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
20844     04 E4 05 F1 | 	add	objptr, #4
20848     F2 12 02 FB | 	rdlong	arg01, objptr
2084c     13 2F 02 F6 | 	mov	local05, local01
20850     07 2E 66 F0 | 	shl	local05, #7
20854     17 13 02 F1 | 	add	arg01, local05
20858     14 13 02 F1 | 	add	arg01, local02
2085c     20 14 06 F6 | 	mov	arg02, #32
20860     01 16 06 F6 | 	mov	arg03, #1
20864     00 18 06 F6 | 	mov	arg04, #0
20868     01 1A 06 F6 | 	mov	arg05, #1
2086c     0B 00 00 FF 
20870     C8 E4 05 F1 | 	add	objptr, ##5832
20874     94 08 B0 FD | 	call	#_psram_spin2_fill
20878     0B 00 00 FF 
2087c     CC E4 85 F1 | 	sub	objptr, ##5836
20880     01 28 06 F1 | 	add	local02, #1
20884     80 28 56 F2 | 	cmps	local02, #128 wc
20888     B8 FF 9F CD |  if_b	jmp	#LR__2613
2088c     A7 F0 03 F6 | 	mov	ptra, fp
20890     B2 00 A0 FD | 	call	#popregs_
20894                 | _hg010b_spin2_scrolldown_ret
20894     2D 00 64 FD | 	ret
20898                 | 
20898                 | ' 
20898                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
20898                 | ' 
20898                 | ' pub crlf()
20898                 | _hg010b_spin2_crlf
20898                 | ' 
20898                 | ' cursor_x:=leading_spaces*2
20898     01 00 00 FF 
2089c     B6 E4 05 F1 | 	add	objptr, ##694
208a0     F2 16 02 FB | 	rdlong	arg03, objptr
208a4     01 16 66 F0 | 	shl	arg03, #1
208a8     01 00 00 FF 
208ac     7A E4 85 F1 | 	sub	objptr, ##634
208b0     F2 16 52 FC | 	wrword	arg03, objptr
208b4                 | ' cursor_y+=1
208b4     02 E4 05 F1 | 	add	objptr, #2
208b8     F2 16 C2 FA | 	rdbyte	arg03, objptr
208bc     01 16 06 F1 | 	add	arg03, #1
208c0     F2 16 42 FC | 	wrbyte	arg03, objptr
208c4                 | ' if cursor_y>st_lines-1
208c4     C3 E4 05 F1 | 	add	objptr, #195
208c8     F2 16 02 FB | 	rdlong	arg03, objptr
208cc     01 16 86 F1 | 	sub	arg03, #1
208d0     C3 E4 85 F1 | 	sub	objptr, #195
208d4     F2 14 C2 FA | 	rdbyte	arg02, objptr
208d8     3E E4 85 F1 | 	sub	objptr, #62
208dc     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
208e0     2C 00 90 ED |  if_be	jmp	#LR__2620
208e4                 | '   scrollup2()
208e4     00 12 06 F6 | 	mov	arg01, #0
208e8     01 00 00 FF 
208ec     58 14 06 F6 | 	mov	arg02, ##600
208f0     10 16 06 F6 | 	mov	arg03, #16
208f4     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
208f8                 | '   cursor_y:=st_lines-1
208f8     01 E5 05 F1 | 	add	objptr, #257
208fc     F2 16 02 FB | 	rdlong	arg03, objptr
20900     01 16 86 F1 | 	sub	arg03, #1
20904     C3 E4 85 F1 | 	sub	objptr, #195
20908     F2 16 42 FC | 	wrbyte	arg03, objptr
2090c     3E E4 85 F1 | 	sub	objptr, #62
20910                 | LR__2620
20910                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
20910     3C E4 05 F1 | 	add	objptr, #60
20914     F2 14 E2 FA | 	rdword	arg02, objptr
20918     02 14 66 F0 | 	shl	arg02, #2
2091c     02 E4 05 F1 | 	add	objptr, #2
20920     F2 16 C2 FA | 	rdbyte	arg03, objptr
20924     3E E4 85 F1 | 	sub	objptr, #62
20928     04 16 66 F0 | 	shl	arg03, #4
2092c     04 16 06 F1 | 	add	arg03, #4
20930     11 12 06 F6 | 	mov	arg01, #17
20934     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
20938                 | _hg010b_spin2_crlf_ret
20938     2D 00 64 FD | 	ret
2093c                 | 
2093c                 | ' 
2093c                 | ' 
2093c                 | ' '*************************************************************************
2093c                 | ' '                                                                        *
2093c                 | ' '  Conversions                                                           *
2093c                 | ' '                                                                        *
2093c                 | ' '*************************************************************************
2093c                 | ' 
2093c                 | ' ''---------- Convert a integer to dec string, return a pointer
2093c                 | ' 
2093c                 | ' pub inttostr(i):result |q,pos,k,j
2093c                 | _hg010b_spin2_inttostr
2093c     03 4A 05 F6 | 	mov	COUNT_, #3
20940     A8 00 A0 FD | 	call	#pushregs_
20944     09 27 0A F6 | 	mov	local01, arg01 wz
20948                 | ' 
20948                 | ' j:=i
20948                 | ' pos:=10
20948     0A 28 06 F6 | 	mov	local02, #10
2094c                 | ' k:=0
2094c     00 2A 06 F6 | 	mov	local03, #0
20950                 | ' 
20950                 | ' if (j==0)
20950     18 00 90 5D |  if_ne	jmp	#LR__2630
20954                 | '   n_string[0]:=48
20954     4D E4 05 F1 | 	add	objptr, #77
20958     F2 60 48 FC | 	wrbyte	#48, objptr
2095c                 | '   n_string[1]:=0
2095c     01 E4 05 F1 | 	add	objptr, #1
20960     F2 00 48 FC | 	wrbyte	#0, objptr
20964     4E E4 85 F1 | 	sub	objptr, #78
20968     C4 00 90 FD | 	jmp	#LR__2637
2096c                 | LR__2630
2096c                 | ' 
2096c                 | ' else
2096c                 | '   if (j<0)
2096c     13 27 52 F6 | 	abs	local01, local01 wc
20970                 | '     j:=0-j
20970                 | '     k:=45
20970     2D 2A 06 C6 |  if_b	mov	local03, #45
20974                 | ' 
20974                 | '   n_string[11]:=0
20974     58 E4 05 F1 | 	add	objptr, #88
20978     F2 00 48 FC | 	wrbyte	#0, objptr
2097c     58 E4 85 F1 | 	sub	objptr, #88
20980     97 24 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
20984                 | '   repeat while (pos>-1)
20984                 | LR__2631
20984     00 28 56 F2 | 	cmps	local02, #0 wc
20988     40 00 90 CD |  if_b	jmp	#LR__2633
2098c     13 FB 51 F6 | 	abs	result1, local01 wc
20990     0A FA 15 FD | 	qdiv	result1, #10
20994                 | '     q:=j//10
20994     19 FA 61 FD | 	getqy	result1
20998     FD FA 81 F6 | 	negc	result1, result1
2099c     13 27 52 F6 | 	abs	local01, local01 wc
209a0     0A 26 16 FD | 	qdiv	local01, #10
209a4                 | '     q:=48+q
209a4     30 FA 05 F1 | 	add	result1, #48
209a8                 | '     n_string[pos]:=q
209a8     14 27 02 F6 | 	mov	local01, local02
209ac     4D E4 05 F1 | 	add	objptr, #77
209b0     F2 26 02 F1 | 	add	local01, objptr
209b4     13 FB 41 FC | 	wrbyte	result1, local01
209b8                 | '     j:=j/10
209b8     4D E4 85 F1 | 	sub	objptr, #77
209bc                 | '     pos-=1
209bc     01 28 86 F1 | 	sub	local02, #1
209c0     18 26 62 FD | 	getqx	local01
209c4     13 27 82 F6 | 	negc	local01, local01
209c8     B8 FF 9F FD | 	jmp	#LR__2631
209cc                 | LR__2632
209cc                 | LR__2633
209cc                 | '   repeat while n_string[0]==48
209cc                 | LR__2634
209cc     4D E4 05 F1 | 	add	objptr, #77
209d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
209d4     4D E4 85 F1 | 	sub	objptr, #77
209d8     30 16 0E F2 | 	cmp	arg03, #48 wz
209dc     20 00 90 5D |  if_ne	jmp	#LR__2635
209e0                 | '     bytemove(@n_string,@n_string+1,12)
209e0     4D E4 05 F1 | 	add	objptr, #77
209e4     F2 12 02 F6 | 	mov	arg01, objptr
209e8     F2 14 02 F6 | 	mov	arg02, objptr
209ec     4D E4 85 F1 | 	sub	objptr, #77
209f0     01 14 06 F1 | 	add	arg02, #1
209f4     0C 16 06 F6 | 	mov	arg03, #12
209f8     38 11 B0 FD | 	call	#__system____builtin_memmove
209fc     CC FF 9F FD | 	jmp	#LR__2634
20a00                 | LR__2635
20a00                 | ' 
20a00                 | '   if k==45
20a00     2D 2A 0E F2 | 	cmp	local03, #45 wz
20a04     28 00 90 5D |  if_ne	jmp	#LR__2636
20a08                 | '      bytemove(@n_string+1,@n_string,12)
20a08     4D E4 05 F1 | 	add	objptr, #77
20a0c     F2 12 02 F6 | 	mov	arg01, objptr
20a10     01 12 06 F1 | 	add	arg01, #1
20a14     F2 14 02 F6 | 	mov	arg02, objptr
20a18     4D E4 85 F1 | 	sub	objptr, #77
20a1c     0C 16 06 F6 | 	mov	arg03, #12
20a20     10 11 B0 FD | 	call	#__system____builtin_memmove
20a24                 | '      n_string[0]:=k
20a24     4D E4 05 F1 | 	add	objptr, #77
20a28     F2 2A 42 FC | 	wrbyte	local03, objptr
20a2c     4D E4 85 F1 | 	sub	objptr, #77
20a30                 | LR__2636
20a30                 | LR__2637
20a30                 | ' 
20a30                 | ' q:=@n_string
20a30     4D E4 05 F1 | 	add	objptr, #77
20a34     F2 FA 01 F6 | 	mov	result1, objptr
20a38     4D E4 85 F1 | 	sub	objptr, #77
20a3c                 | ' return q
20a3c     A7 F0 03 F6 | 	mov	ptra, fp
20a40     B2 00 A0 FD | 	call	#popregs_
20a44                 | _hg010b_spin2_inttostr_ret
20a44     2D 00 64 FD | 	ret
20a48                 | 
20a48                 | ' 
20a48                 | ' '**********************************************************************************
20a48                 | ' '
20a48                 | ' '        Blitting
20a48                 | ' '
20a48                 | ' '**********************************************************************************
20a48                 | ' 
20a48                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
20a48                 | _hg010b_spin2_blit
20a48     18 4A 05 F6 | 	mov	COUNT_, #24
20a4c     A8 00 A0 FD | 	call	#pushregs_
20a50     09 27 02 F6 | 	mov	local01, arg01
20a54     0A 29 02 F6 | 	mov	local02, arg02
20a58     0B 2B 02 F6 | 	mov	local03, arg03
20a5c     0C 2D 02 F6 | 	mov	local04, arg04
20a60     0D 2F 02 F6 | 	mov	local05, arg05
20a64     0E 31 02 F6 | 	mov	local06, arg06
20a68     0F 33 02 F6 | 	mov	local07, arg07
20a6c     10 35 02 F6 | 	mov	local08, arg08
20a70     11 37 02 F6 | 	mov	local09, arg09
20a74     12 39 02 F6 | 	mov	local10, arg10
20a78                 | ' 
20a78                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
20a78     00 04 00 FF 
20a7c     00 26 56 F2 | 	cmps	local01, ##524288 wc
20a80     00 04 00 3F 
20a84     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
20a88     7C 01 90 CD |  if_b	jmp	#LR__2644
20a8c     16 29 5A F2 | 	cmps	local02, local04 wcz
20a90     14 3B 02 16 |  if_a	mov	local11, local02
20a94     16 29 02 16 |  if_a	mov	local02, local04
20a98     1D 2D 02 16 |  if_a	mov	local04, local11
20a9c     17 2B 5A F2 | 	cmps	local03, local05 wcz
20aa0     15 3B 02 16 |  if_a	mov	local11, local03
20aa4     17 2B 02 16 |  if_a	mov	local03, local05
20aa8     18 2B 02 FD | 	qmul	local03, local06
20aac                 | '   if x1a>x2a
20aac                 | '     x1a,x2a:=x2a,x1a
20aac                 | '   if y1a>y2a
20aac                 | '     y1a,y2a:=y2a,y1a  
20aac     1D 2F 02 16 |  if_a	mov	local05, local11
20ab0                 | ' 
20ab0                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
20ab0     19 3D 02 F6 | 	mov	local12, local07
20ab4     14 3D 02 F1 | 	add	local12, local02
20ab8     18 3A 62 FD | 	getqx	local11
20abc     1C 37 02 FD | 	qmul	local09, local10
20ac0     1D 3D 02 F1 | 	add	local12, local11
20ac4     13 3F 02 F6 | 	mov	local13, local01
20ac8     1A 3F 02 F1 | 	add	local13, local08
20acc     18 3A 62 FD | 	getqx	local11
20ad0     1D 3F 02 F1 | 	add	local13, local11
20ad4     1F 3D 5A F2 | 	cmps	local12, local13 wcz
20ad8     98 00 90 ED |  if_be	jmp	#LR__2641
20adc                 | '     repeat y from y1a to y2a
20adc     15 41 02 F6 | 	mov	local14, local03
20ae0     15 2F 52 F2 | 	cmps	local05, local03 wc
20ae4     01 42 86 F6 | 	negc	local15, #1
20ae8     17 45 02 F6 | 	mov	local16, local05
20aec     21 45 02 F1 | 	add	local16, local15
20af0     0B 00 00 FF 
20af4     CC E4 05 F1 | 	add	objptr, ##5836
20af8                 | LR__2640
20af8     18 41 02 FD | 	qmul	local14, local06
20afc                 | '   '    writeln(string("I am here"))
20afc                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
20afc     13 15 02 F6 | 	mov	arg02, local01
20b00     16 17 02 F6 | 	mov	arg03, local04
20b04     14 17 82 F1 | 	sub	arg03, local02
20b08     01 16 06 F1 | 	add	arg03, #1
20b0c     F6 03 00 FF 
20b10     00 12 06 F6 | 	mov	arg01, ##519168
20b14     18 3E 62 FD | 	getqx	local13
20b18     1F 15 02 F1 | 	add	arg02, local13
20b1c     14 15 02 F1 | 	add	arg02, local02
20b20     B0 04 B0 FD | 	call	#_psram_spin2_read1
20b24     1B 3F 02 F6 | 	mov	local13, local09
20b28     15 3F 82 F1 | 	sub	local13, local03
20b2c     20 3F 02 F1 | 	add	local13, local14
20b30     1C 3F 02 FD | 	qmul	local13, local10
20b34                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
20b34     19 15 02 F6 | 	mov	arg02, local07
20b38     16 17 02 F6 | 	mov	arg03, local04
20b3c     14 17 82 F1 | 	sub	arg03, local02
20b40     01 16 06 F1 | 	add	arg03, #1
20b44     F6 03 00 FF 
20b48     00 12 06 F6 | 	mov	arg01, ##519168
20b4c     18 3E 62 FD | 	getqx	local13
20b50     1F 15 02 F1 | 	add	arg02, local13
20b54     1A 15 02 F1 | 	add	arg02, local08
20b58     14 05 B0 FD | 	call	#_psram_spin2_write
20b5c     21 41 02 F1 | 	add	local14, local15
20b60     22 41 0A F2 | 	cmp	local14, local16 wz
20b64     90 FF 9F 5D |  if_ne	jmp	#LR__2640
20b68     0B 00 00 FF 
20b6c     CC E4 85 F1 | 	sub	objptr, ##5836
20b70     94 00 90 FD | 	jmp	#LR__2643
20b74                 | LR__2641
20b74                 | '   else
20b74                 | '     repeat y from y2a to y1a
20b74     17 41 02 F6 | 	mov	local14, local05
20b78     17 2B 52 F2 | 	cmps	local03, local05 wc
20b7c     01 46 86 F6 | 	negc	local17, #1
20b80     15 49 02 F6 | 	mov	local18, local03
20b84     23 49 02 F1 | 	add	local18, local17
20b88     0B 00 00 FF 
20b8c     CC E4 05 F1 | 	add	objptr, ##5836
20b90                 | LR__2642
20b90     18 41 02 FD | 	qmul	local14, local06
20b94                 | '  '     writeln(string("I am there"))
20b94                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
20b94     13 15 02 F6 | 	mov	arg02, local01
20b98     16 17 02 F6 | 	mov	arg03, local04
20b9c     14 17 82 F1 | 	sub	arg03, local02
20ba0     01 16 06 F1 | 	add	arg03, #1
20ba4     F6 03 00 FF 
20ba8     00 12 06 F6 | 	mov	arg01, ##519168
20bac     18 44 62 FD | 	getqx	local16
20bb0     22 15 02 F1 | 	add	arg02, local16
20bb4     14 15 02 F1 | 	add	arg02, local02
20bb8     18 04 B0 FD | 	call	#_psram_spin2_read1
20bbc     1B 45 02 F6 | 	mov	local16, local09
20bc0     15 45 82 F1 | 	sub	local16, local03
20bc4     20 45 02 F1 | 	add	local16, local14
20bc8     1C 45 02 FD | 	qmul	local16, local10
20bcc                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
20bcc     19 15 02 F6 | 	mov	arg02, local07
20bd0     16 17 02 F6 | 	mov	arg03, local04
20bd4     14 17 82 F1 | 	sub	arg03, local02
20bd8     01 16 06 F1 | 	add	arg03, #1
20bdc     F6 03 00 FF 
20be0     00 12 06 F6 | 	mov	arg01, ##519168
20be4     18 44 62 FD | 	getqx	local16
20be8     22 15 02 F1 | 	add	arg02, local16
20bec     1A 15 02 F1 | 	add	arg02, local08
20bf0     7C 04 B0 FD | 	call	#_psram_spin2_write
20bf4     23 41 02 F1 | 	add	local14, local17
20bf8     24 41 0A F2 | 	cmp	local14, local18 wz
20bfc     90 FF 9F 5D |  if_ne	jmp	#LR__2642
20c00     0B 00 00 FF 
20c04     CC E4 85 F1 | 	sub	objptr, ##5836
20c08                 | LR__2643
20c08                 | LR__2644
20c08                 | '     
20c08                 | ' if ((f>=$80000) && (t<$80000)) 
20c08     00 04 00 FF 
20c0c     00 26 56 F2 | 	cmps	local01, ##524288 wc
20c10     80 00 90 CD |  if_b	jmp	#LR__2646
20c14     00 04 00 FF 
20c18     00 32 56 F2 | 	cmps	local07, ##524288 wc
20c1c     74 00 90 3D |  if_ae	jmp	#LR__2646
20c20                 | '   repeat y from y1a to y2a
20c20     15 41 02 F6 | 	mov	local14, local03
20c24     15 2F 52 F2 | 	cmps	local05, local03 wc
20c28     01 4A 86 F6 | 	negc	local19, #1
20c2c     17 4D 02 F6 | 	mov	local20, local05
20c30     25 4D 02 F1 | 	add	local20, local19
20c34     0B 00 00 FF 
20c38     CC E4 05 F1 | 	add	objptr, ##5836
20c3c                 | LR__2645
20c3c     1B 49 02 F6 | 	mov	local18, local09
20c40     15 49 82 F1 | 	sub	local18, local03
20c44     20 49 02 F1 | 	add	local18, local14
20c48     1C 49 02 FD | 	qmul	local18, local10
20c4c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
20c4c     19 13 02 F6 | 	mov	arg01, local07
20c50     18 48 62 FD | 	getqx	local18
20c54     18 41 02 FD | 	qmul	local14, local06
20c58     24 13 02 F1 | 	add	arg01, local18
20c5c     1A 13 02 F1 | 	add	arg01, local08
20c60     13 15 02 F6 | 	mov	arg02, local01
20c64     16 17 02 F6 | 	mov	arg03, local04
20c68     14 17 82 F1 | 	sub	arg03, local02
20c6c     01 16 06 F1 | 	add	arg03, #1
20c70     18 48 62 FD | 	getqx	local18
20c74     24 15 02 F1 | 	add	arg02, local18
20c78     14 15 02 F1 | 	add	arg02, local02
20c7c     54 03 B0 FD | 	call	#_psram_spin2_read1
20c80     25 41 02 F1 | 	add	local14, local19
20c84     26 41 0A F2 | 	cmp	local14, local20 wz
20c88     B0 FF 9F 5D |  if_ne	jmp	#LR__2645
20c8c     0B 00 00 FF 
20c90     CC E4 85 F1 | 	sub	objptr, ##5836
20c94                 | LR__2646
20c94                 | '     
20c94                 | ' if ((f<$80000) && (t>=$80000)) 
20c94     00 04 00 FF 
20c98     00 26 56 F2 | 	cmps	local01, ##524288 wc
20c9c     84 00 90 3D |  if_ae	jmp	#LR__2648
20ca0     00 04 00 FF 
20ca4     00 32 56 F2 | 	cmps	local07, ##524288 wc
20ca8     78 00 90 CD |  if_b	jmp	#LR__2648
20cac                 | '   t:=t & $FFFFFFF
20cac     7C 32 06 F4 | 	bitl	local07, #124
20cb0                 | '   repeat y from y1a to y2a
20cb0     15 41 02 F6 | 	mov	local14, local03
20cb4     15 2F 52 F2 | 	cmps	local05, local03 wc
20cb8     01 4E 86 F6 | 	negc	local21, #1
20cbc     17 51 02 F6 | 	mov	local22, local05
20cc0     27 51 02 F1 | 	add	local22, local21
20cc4     0B 00 00 FF 
20cc8     CC E4 05 F1 | 	add	objptr, ##5836
20ccc                 | LR__2647
20ccc     18 41 02 FD | 	qmul	local14, local06
20cd0                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
20cd0     13 13 02 F6 | 	mov	arg01, local01
20cd4     1B 4D 02 F6 | 	mov	local20, local09
20cd8     15 4D 82 F1 | 	sub	local20, local03
20cdc     20 4D 02 F1 | 	add	local20, local14
20ce0     18 4A 62 FD | 	getqx	local19
20ce4     1C 4D 02 FD | 	qmul	local20, local10
20ce8     25 13 02 F1 | 	add	arg01, local19
20cec     14 13 02 F1 | 	add	arg01, local02
20cf0     19 15 02 F6 | 	mov	arg02, local07
20cf4     16 17 02 F6 | 	mov	arg03, local04
20cf8     14 17 82 F1 | 	sub	arg03, local02
20cfc     01 16 06 F1 | 	add	arg03, #1
20d00     18 4C 62 FD | 	getqx	local20
20d04     26 15 02 F1 | 	add	arg02, local20
20d08     1A 15 02 F1 | 	add	arg02, local08
20d0c     60 03 B0 FD | 	call	#_psram_spin2_write
20d10     27 41 02 F1 | 	add	local14, local21
20d14     28 41 0A F2 | 	cmp	local14, local22 wz
20d18     B0 FF 9F 5D |  if_ne	jmp	#LR__2647
20d1c     0B 00 00 FF 
20d20     CC E4 85 F1 | 	sub	objptr, ##5836
20d24                 | LR__2648
20d24                 | '     
20d24                 | ' if ((f<$80000) && (t<$80000)) 
20d24     00 04 00 FF 
20d28     00 26 56 F2 | 	cmps	local01, ##524288 wc
20d2c     00 04 00 CF 
20d30     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
20d34     64 00 90 3D |  if_ae	jmp	#LR__2650
20d38                 | '   repeat y from y1a to y2a
20d38     15 41 02 F6 | 	mov	local14, local03
20d3c     15 2F 52 F2 | 	cmps	local05, local03 wc
20d40     01 52 86 F6 | 	negc	local23, #1
20d44     17 55 02 F6 | 	mov	local24, local05
20d48     29 55 02 F1 | 	add	local24, local23
20d4c                 | LR__2649
20d4c     18 41 02 FD | 	qmul	local14, local06
20d50                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
20d50     13 13 02 F6 | 	mov	arg01, local01
20d54     1B 51 02 F6 | 	mov	local22, local09
20d58     15 51 82 F1 | 	sub	local22, local03
20d5c     20 51 02 F1 | 	add	local22, local14
20d60     18 4E 62 FD | 	getqx	local21
20d64     1C 51 02 FD | 	qmul	local22, local10
20d68     27 13 02 F1 | 	add	arg01, local21
20d6c     14 13 02 F1 | 	add	arg01, local02
20d70     19 15 02 F6 | 	mov	arg02, local07
20d74     16 17 02 F6 | 	mov	arg03, local04
20d78     14 17 82 F1 | 	sub	arg03, local02
20d7c     01 16 06 F1 | 	add	arg03, #1
20d80     18 50 62 FD | 	getqx	local22
20d84     28 15 02 F1 | 	add	arg02, local22
20d88     1A 15 02 F1 | 	add	arg02, local08
20d8c     A4 0D B0 FD | 	call	#__system____builtin_memmove
20d90     29 41 02 F1 | 	add	local14, local23
20d94     2A 41 0A F2 | 	cmp	local14, local24 wz
20d98     B0 FF 9F 5D |  if_ne	jmp	#LR__2649
20d9c                 | LR__2650
20d9c     A7 F0 03 F6 | 	mov	ptra, fp
20da0     B2 00 A0 FD | 	call	#popregs_
20da4                 | _hg010b_spin2_blit_ret
20da4     2D 00 64 FD | 	ret
20da8                 | 
20da8                 | ' 
20da8                 | ' '..............................................................................
20da8                 | ' 
20da8                 | ' {{
20da8                 | ' }}
20da8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
20da8                 | _psram_spin2_startx
20da8     04 4A 05 F6 | 	mov	COUNT_, #4
20dac     A8 00 A0 FD | 	call	#pushregs_
20db0     09 27 02 F6 | 	mov	local01, arg01
20db4     0B 29 02 F6 | 	mov	local02, arg03
20db8     0C 2B 02 F6 | 	mov	local03, arg04
20dbc                 | '     stop() ' restart driver if required
20dbc     54 01 B0 FD | 	call	#_psram_spin2_stop
20dc0     00 26 0E F2 | 	cmp	local01, #0 wz
20dc4     14 26 06 AB |  if_e	rdlong	local01, #20
20dc8     13 15 52 F6 | 	abs	arg02, local01 wc
20dcc     A1 07 00 FF 
20dd0     40 14 16 FD | 	qdiv	arg02, ##1000000
20dd4                 | ' 
20dd4                 | '     ' use current frequency if none specified
20dd4                 | ' 
20dd4                 | '     if freq == 0 
20dd4                 | '         freq := clkfreq 
20dd4                 | ' 
20dd4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
20dd4                 | ' 
20dd4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
20dd4                 | '     if burst < 0
20dd4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
20dd4     18 14 62 FD | 	getqx	arg02
20dd8     0A 19 82 F6 | 	negc	arg04, arg02
20ddc     03 18 66 F0 | 	shl	arg04, #3
20de0     84 18 86 F1 | 	sub	arg04, #132
20de4     04 18 46 F0 | 	shr	arg04, #4
20de8     04 18 66 F0 | 	shl	arg04, #4
20dec     00 18 56 F2 | 	cmps	arg04, #0 wc
20df0     0E FA 65 C6 |  if_b	neg	result1, #14
20df4     10 01 90 CD |  if_b	jmp	#LR__2663
20df8                 | ' 
20df8                 | '     ' compute the input delay
20df8                 | ' 
20df8                 | '     if delay <= 0
20df8     01 28 56 F2 | 	cmps	local02, #1 wc
20dfc     10 00 90 3D |  if_ae	jmp	#LR__2660
20e00                 | '         delay := lookupDelay(freq)
20e00     13 13 02 F6 | 	mov	arg01, local01
20e04     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
20e08     FD 28 02 F6 | 	mov	local02, result1
20e0c     04 00 90 FD | 	jmp	#LR__2661
20e10                 | LR__2660
20e10                 | '     else
20e10                 | '         delay <#= $f ' limit to 15
20e10     0F 28 66 F3 | 	fles	local02, #15
20e14                 | LR__2661
20e14                 | ' 
20e14                 | '     ' create our lock
20e14                 | ' 
20e14                 | '     driverlock := LOCKNEW()  
20e14     00 FA 05 F6 | 	mov	result1, #0
20e18     04 FA 61 FD | 	locknew	result1
20e1c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20e20     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
20e24                 | '     if driverlock == -1
20e24     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20e28     FF FF 7F FF 
20e2c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20e30                 | '         return ERR_NO_LOCK
20e30     1A FA 65 A6 |  if_e	neg	result1, #26
20e34     D0 00 90 AD |  if_e	jmp	#LR__2663
20e38                 | ' 
20e38                 | '     ' patch in the proper data and HUB addresses to the startup structure
20e38                 | ' 
20e38                 | '     long[@startupData][0]:=clkfreq
20e38     14 26 06 FB | 	rdlong	local01, #20
20e3c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
20e40     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
20e44                 | ' '    long[@startupData][1]:=$1000_0000
20e44                 | '     long[@startupData][5]:=@deviceData
20e44     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
20e48     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20e4c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
20e50     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
20e54     14 14 06 F1 | 	add	arg02, #20
20e58     0A 27 62 FC | 	wrlong	local01, arg02
20e5c                 | '     long[@startupData][6]:=@qosData
20e5c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
20e60     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20e64     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20e68     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
20e6c     18 14 06 F1 | 	add	arg02, #24
20e70     0A 27 62 FC | 	wrlong	local01, arg02
20e74                 | '     long[@startupData][7]:=$7FF00
20e74     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20e78     1C 26 06 F1 | 	add	local01, #28
20e7c     FF 03 80 FF 
20e80     13 01 6A FC | 	wrlong	##524032, local01
20e84                 | ' 
20e84                 | '     ' setup some default bank and QoS parameter values
20e84                 | ' 
20e84                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
20e84     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
20e88     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
20e8c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
20e90     10 18 66 F0 | 	shl	arg04, #16
20e94     0C 28 66 F0 | 	shl	local02, #12
20e98     14 19 42 F5 | 	or	arg04, local02
20e9c     18 18 46 F5 | 	or	arg04, #24
20ea0     0C 15 02 F6 | 	mov	arg02, arg04
20ea4     02 16 06 F6 | 	mov	arg03, #2
20ea8     A0 00 A0 FD | 	call	#\builtin_longfill_
20eac                 | '     longfill(@qosData, $FFFF0000, 8)
20eac     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20eb0     07 16 06 F6 | 	mov	arg03, #7
20eb4     28 16 62 FD | 	setq	arg03
20eb8     80 FF FF FF 
20ebc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
20ec0                 | ' 
20ec0                 | '     ' get the address of the PSRAM memory driver so we can start it
20ec0                 | ' 
20ec0                 | '     driverAddr:= driver.getDriverAddr()
20ec0                 | '     return @driver_start
20ec0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
20ec4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
20ec8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
20ecc                 | ' 
20ecc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
20ecc                 | ' 
20ecc                 | '     if desiredcog < 0
20ecc     00 2A 56 F2 | 	cmps	local03, #0 wc
20ed0                 | '         desiredcog := NEWCOG
20ed0     10 2A 06 C6 |  if_b	mov	local03, #16
20ed4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
20ed4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20ed8     15 2D 02 F6 | 	mov	local04, local03
20edc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
20ee0     0A 2D F2 FC | 	coginit	local04, arg02 wc
20ee4     01 2C 66 C6 |  if_b	neg	local04, #1
20ee8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
20eec     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
20ef0                 | '     repeat until long[@startupData] == 0 
20ef0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
20ef4                 | LR__2662
20ef4     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
20ef8     F8 FF 9F 5D |  if_ne	jmp	#LR__2662
20efc                 | ' 
20efc                 | '     return drivercog
20efc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
20f00     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
20f04     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20f08                 | LR__2663
20f08     A7 F0 03 F6 | 	mov	ptra, fp
20f0c     B2 00 A0 FD | 	call	#popregs_
20f10                 | _psram_spin2_startx_ret
20f10     2D 00 64 FD | 	ret
20f14                 | 
20f14                 | ' 
20f14                 | ' '..............................................................................
20f14                 | ' 
20f14                 | ' {{
20f14                 | ' }}
20f14                 | ' PUB stop() : i
20f14                 | _psram_spin2_stop
20f14     00 00 06 F6 | 	mov	_var01, #0
20f18                 | '     if drivercog <> -1
20f18     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20f1c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20f20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20f24     FF FF 7F FF 
20f28     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
20f2c     70 00 90 AD |  if_e	jmp	#LR__2673
20f30                 | '         cogstop(drivercog) ' a rather brutal stop
20f30     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20f34     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20f38     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20f3c     03 12 62 FD | 	cogstop	arg01
20f40     97 26 48 FB | 	callpa	#(@LR__2672-@LR__2670)>>2,fcache_load_ptr_
20f44                 | '         repeat i from 0 to 7
20f44                 | LR__2670
20f44                 | '             if long[$7FF00][i*3] < 0
20f44     00 FB 01 F6 | 	mov	result1, _var01
20f48     01 FA 65 F0 | 	shl	result1, #1
20f4c     00 FB 01 F1 | 	add	result1, _var01
20f50     02 FA 65 F0 | 	shl	result1, #2
20f54     FF 03 00 FF 
20f58     00 FB 05 F1 | 	add	result1, ##524032
20f5c     FD FA 01 FB | 	rdlong	result1, result1
20f60     00 FA 55 F2 | 	cmps	result1, #0 wc
20f64     1C 00 90 3D |  if_ae	jmp	#LR__2671
20f68                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
20f68     00 FB 01 F6 | 	mov	result1, _var01
20f6c     01 FA 65 F0 | 	shl	result1, #1
20f70     00 FB 01 F1 | 	add	result1, _var01
20f74     02 FA 65 F0 | 	shl	result1, #2
20f78     FF 03 00 FF 
20f7c     00 FB 05 F1 | 	add	result1, ##524032
20f80     FD 20 68 FC | 	wrlong	#16, result1
20f84                 | LR__2671
20f84     01 00 06 F1 | 	add	_var01, #1
20f88     08 00 56 F2 | 	cmps	_var01, #8 wc
20f8c     B4 FF 9F CD |  if_b	jmp	#LR__2670
20f90                 | LR__2672
20f90                 | '         drivercog := -1
20f90     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20f94     FF FF FF FF 
20f98     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
20f9c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20fa0                 | LR__2673
20fa0                 | '     if driverlock <> -1
20fa0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20fa4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20fa8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20fac     FF FF 7F FF 
20fb0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20fb4                 | '         LOCKRET(driverlock)
20fb4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
20fb8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
20fbc     05 12 62 5D |  if_ne	lockret	arg01
20fc0                 | '         driverlock := -1
20fc0     FF FF FF 5F 
20fc4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
20fc8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
20fcc     00 FB 01 F6 | 	mov	result1, _var01
20fd0                 | _psram_spin2_stop_ret
20fd0     2D 00 64 FD | 	ret
20fd4                 | 
20fd4                 | ' 
20fd4                 | ' '..............................................................................
20fd4                 | ' 
20fd4                 | ' {{
20fd4                 | ' }}
20fd4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
20fd4                 | _psram_spin2_read1
20fd4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
20fd4                 | '     if drivercog == -1 ' driver must be running
20fd4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20fd8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
20fdc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20fe0     FF FF 7F FF 
20fe4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
20fe8                 | '         return ERR_INACTIVE
20fe8     0F FA 65 A6 |  if_e	neg	result1, #15
20fec     7C 00 90 AD |  if_e	jmp	#LR__2681
20ff0                 | '     if count == 0 ' don't even bother reading
20ff0     00 16 0E F2 | 	cmp	arg03, #0 wz
20ff4                 | '         return 0
20ff4     00 FA 05 A6 |  if_e	mov	result1, #0
20ff8     70 00 90 AD |  if_e	jmp	#LR__2681
20ffc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
20ffc     00 FA 05 F6 | 	mov	result1, #0
21000     01 FA 61 FD | 	cogid	result1
21004     FD 00 02 F6 | 	mov	_var01, result1
21008     01 00 66 F0 | 	shl	_var01, #1
2100c     FD 00 02 F1 | 	add	_var01, result1
21010     02 00 66 F0 | 	shl	_var01, #2
21014     FF 03 00 FF 
21018     00 03 06 F6 | 	mov	_var02, ##524032
2101c     00 03 02 F1 | 	add	_var02, _var01
21020                 | '     if long[mailbox] < 0
21020     01 01 02 FB | 	rdlong	_var01, _var02
21024     00 00 56 F2 | 	cmps	_var01, #0 wc
21028                 | '         return ERR_MAILBOX_BUSY
21028     1C FA 65 C6 |  if_b	neg	result1, #28
2102c     3C 00 90 CD |  if_b	jmp	#LR__2681
21030                 | '     long[mailbox][2] := count
21030     08 02 06 F1 | 	add	_var02, #8
21034     01 17 62 FC | 	wrlong	arg03, _var02
21038                 | '     long[mailbox][1] := dstHubAddr
21038     04 02 86 F1 | 	sub	_var02, #4
2103c     01 13 62 FC | 	wrlong	arg01, _var02
21040     04 02 86 F1 | 	sub	_var02, #4
21044                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
21044     0A 05 02 F6 | 	mov	_var03, arg02
21048     D9 04 06 F4 | 	bitl	_var03, #217
2104c     00 00 58 FF 
21050     00 00 06 F6 | 	mov	_var01, ##-1342177280
21054     02 01 02 F1 | 	add	_var01, _var03
21058     01 01 62 FC | 	wrlong	_var01, _var02
2105c                 | '     repeat
2105c                 | LR__2680
2105c                 | '         result := long[mailbox]    
2105c     01 05 02 FB | 	rdlong	_var03, _var02
21060     00 04 56 F2 | 	cmps	_var03, #0 wc
21064     F4 FF 9F CD |  if_b	jmp	#LR__2680
21068                 | '     while result < 0   
21068                 | '     return -result                       'return success or error
21068     02 FB 61 F6 | 	neg	result1, _var03
2106c                 | LR__2681
2106c                 | _psram_spin2_read1_ret
2106c     2D 00 64 FD | 	ret
21070                 | 
21070                 | ' 
21070                 | ' '..............................................................................
21070                 | ' 
21070                 | ' {{
21070                 | ' }}
21070                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
21070                 | _psram_spin2_write
21070                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
21070                 | '     if drivercog == -1 ' driver must be running
21070     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21074     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
21078     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2107c     FF FF 7F FF 
21080     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
21084                 | '         return ERR_INACTIVE
21084     0F FA 65 A6 |  if_e	neg	result1, #15
21088     7C 00 90 AD |  if_e	jmp	#LR__2691
2108c                 | '     if count == 0 ' don't even bother writing
2108c     00 16 0E F2 | 	cmp	arg03, #0 wz
21090                 | '         return 0
21090     00 FA 05 A6 |  if_e	mov	result1, #0
21094     70 00 90 AD |  if_e	jmp	#LR__2691
21098                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
21098     00 FA 05 F6 | 	mov	result1, #0
2109c     01 FA 61 FD | 	cogid	result1
210a0     FD 00 02 F6 | 	mov	_var01, result1
210a4     01 00 66 F0 | 	shl	_var01, #1
210a8     FD 00 02 F1 | 	add	_var01, result1
210ac     02 00 66 F0 | 	shl	_var01, #2
210b0     FF 03 00 FF 
210b4     00 03 06 F6 | 	mov	_var02, ##524032
210b8     00 03 02 F1 | 	add	_var02, _var01
210bc                 | '     if long[mailbox] < 0
210bc     01 01 02 FB | 	rdlong	_var01, _var02
210c0     00 00 56 F2 | 	cmps	_var01, #0 wc
210c4                 | '         return ERR_MAILBOX_BUSY
210c4     1C FA 65 C6 |  if_b	neg	result1, #28
210c8     3C 00 90 CD |  if_b	jmp	#LR__2691
210cc                 | '     long[mailbox][2] := count
210cc     08 02 06 F1 | 	add	_var02, #8
210d0     01 17 62 FC | 	wrlong	arg03, _var02
210d4                 | '     long[mailbox][1] := srcHubAddr
210d4     04 02 86 F1 | 	sub	_var02, #4
210d8     01 13 62 FC | 	wrlong	arg01, _var02
210dc     04 02 86 F1 | 	sub	_var02, #4
210e0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
210e0     0A 05 02 F6 | 	mov	_var03, arg02
210e4     D9 04 06 F4 | 	bitl	_var03, #217
210e8     00 00 78 FF 
210ec     00 00 06 F6 | 	mov	_var01, ##-268435456
210f0     02 01 02 F1 | 	add	_var01, _var03
210f4     01 01 62 FC | 	wrlong	_var01, _var02
210f8                 | '     repeat
210f8                 | LR__2690
210f8                 | '         result := long[mailbox]    
210f8     01 05 02 FB | 	rdlong	_var03, _var02
210fc     00 04 56 F2 | 	cmps	_var03, #0 wc
21100     F4 FF 9F CD |  if_b	jmp	#LR__2690
21104                 | '     while result < 0   
21104                 | '     return -result                       'return success or error
21104     02 FB 61 F6 | 	neg	result1, _var03
21108                 | LR__2691
21108                 | _psram_spin2_write_ret
21108     2D 00 64 FD | 	ret
2110c                 | 
2110c                 | ' 
2110c                 | ' ' generalized fill
2110c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
2110c                 | _psram_spin2_fill
2110c     09 01 02 F6 | 	mov	_var01, arg01
21110     0A 03 02 F6 | 	mov	_var02, arg02
21114     0B 05 02 F6 | 	mov	_var03, arg03
21118     0D 07 02 F6 | 	mov	_var04, arg05
2111c                 | '     case datasize 
2111c     01 06 86 F1 | 	sub	_var04, #1
21120     04 06 26 F3 | 	fle	_var04, #4
21124     30 06 62 FD | 	jmprel	_var04
21128                 | LR__2700
21128     10 00 90 FD | 	jmp	#LR__2701
2112c     18 00 90 FD | 	jmp	#LR__2702
21130     2C 00 90 FD | 	jmp	#LR__2704
21134     1C 00 90 FD | 	jmp	#LR__2703
21138     24 00 90 FD | 	jmp	#LR__2704
2113c                 | LR__2701
2113c                 | '         1: req := driver.R_WRITEBYTE
2113c     00 00 60 FF 
21140     00 08 06 F6 | 	mov	_var05, ##-1073741824
21144     20 00 90 FD | 	jmp	#LR__2705
21148                 | LR__2702
21148                 | '         2: req := driver.R_WRITEWORD
21148     00 00 68 FF 
2114c     00 08 06 F6 | 	mov	_var05, ##-805306368
21150     14 00 90 FD | 	jmp	#LR__2705
21154                 | LR__2703
21154                 | '         4: req := driver.R_WRITELONG
21154     00 00 70 FF 
21158     00 08 06 F6 | 	mov	_var05, ##-536870912
2115c     08 00 90 FD | 	jmp	#LR__2705
21160                 | LR__2704
21160                 | '         other : return ERR_INVALID
21160     06 FA 65 F6 | 	neg	result1, #6
21164     94 00 90 FD | 	jmp	#LR__2707
21168                 | LR__2705
21168                 | '     if count == 0   ' nothing to do
21168     00 04 0E F2 | 	cmp	_var03, #0 wz
2116c                 | '         return 0
2116c     00 FA 05 A6 |  if_e	mov	result1, #0
21170     88 00 90 AD |  if_e	jmp	#LR__2707
21174                 | '     if drivercog == -1
21174     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21178     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
2117c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21180     FF FF 7F FF 
21184     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
21188                 | '         return ERR_INACTIVE
21188     0F FA 65 A6 |  if_e	neg	result1, #15
2118c     6C 00 90 AD |  if_e	jmp	#LR__2707
21190                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
21190     00 FA 05 F6 | 	mov	result1, #0
21194     01 FA 61 FD | 	cogid	result1
21198     FD 06 02 F6 | 	mov	_var04, result1
2119c     01 06 66 F0 | 	shl	_var04, #1
211a0     FD 06 02 F1 | 	add	_var04, result1
211a4     02 06 66 F0 | 	shl	_var04, #2
211a8     FF 03 00 FF 
211ac     00 0B 06 F6 | 	mov	_var06, ##524032
211b0     03 0B 02 F1 | 	add	_var06, _var04
211b4                 | '     if long[mailbox] < 0
211b4     05 07 02 FB | 	rdlong	_var04, _var06
211b8     00 06 56 F2 | 	cmps	_var04, #0 wc
211bc                 | '         return ERR_MAILBOX_BUSY
211bc     1C FA 65 C6 |  if_b	neg	result1, #28
211c0     38 00 90 CD |  if_b	jmp	#LR__2707
211c4                 | '     long[mailbox][2] := count
211c4     08 0A 06 F1 | 	add	_var06, #8
211c8     05 05 62 FC | 	wrlong	_var03, _var06
211cc                 | '     long[mailbox][1] := pattern
211cc     04 0A 86 F1 | 	sub	_var06, #4
211d0     05 03 62 FC | 	wrlong	_var02, _var06
211d4     04 0A 86 F1 | 	sub	_var06, #4
211d8                 | '     long[mailbox] := req + (addr & $1ffffff)
211d8     04 0D 02 F6 | 	mov	_var07, _var05
211dc     00 0F 02 F6 | 	mov	_var08, _var01
211e0     D9 0E 06 F4 | 	bitl	_var08, #217
211e4     07 0D 02 F1 | 	add	_var07, _var08
211e8     05 0D 62 FC | 	wrlong	_var07, _var06
211ec                 | '     repeat
211ec                 | LR__2706
211ec                 | '         r := long[mailbox]
211ec     05 0F 02 FB | 	rdlong	_var08, _var06
211f0     00 0E 56 F2 | 	cmps	_var08, #0 wc
211f4     F4 FF 9F CD |  if_b	jmp	#LR__2706
211f8                 | '     while r < 0
211f8                 | '     return -r                  ' return 0 for success or negated error code
211f8     07 FB 61 F6 | 	neg	result1, _var08
211fc                 | LR__2707
211fc                 | _psram_spin2_fill_ret
211fc     2D 00 64 FD | 	ret
21200                 | 
21200                 | ' 
21200                 | ' '..............................................................................
21200                 | ' 
21200                 | ' {{
21200                 | ' }}
21200                 | ' PUB setQos(cog, qos) : result | mailbox
21200                 | _psram_spin2_setQos
21200     09 01 02 F6 | 	mov	_var01, arg01
21204                 | '     if drivercog == -1 ' driver must be running
21204     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21208     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2120c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21210     FF FF 7F FF 
21214     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
21218                 | '         return ERR_INACTIVE
21218     0F FA 65 A6 |  if_e	neg	result1, #15
2121c     9C 00 90 AD |  if_e	jmp	#LR__2714
21220                 | '     if cog < 0 or cog > 7 ' enforce cog id range
21220     00 00 56 F2 | 	cmps	_var01, #0 wc
21224     08 00 90 CD |  if_b	jmp	#LR__2710
21228     08 00 56 F2 | 	cmps	_var01, #8 wc
2122c     08 00 90 CD |  if_b	jmp	#LR__2711
21230                 | LR__2710
21230                 | '         return ERR_INVALID
21230     06 FA 65 F6 | 	neg	result1, #6
21234     84 00 90 FD | 	jmp	#LR__2714
21238                 | LR__2711
21238                 | '     long[@qosData][cog] := qos & !$1ff
21238     FF 15 26 F5 | 	andn	arg02, #511
2123c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
21240     02 00 66 F0 | 	shl	_var01, #2
21244     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
21248     00 15 62 FC | 	wrlong	arg02, _var01
2124c                 | '     mailbox := $7FF00 + drivercog*12
2124c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
21250     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
21254     02 07 02 F6 | 	mov	_var04, _var03
21258     01 06 66 F0 | 	shl	_var04, #1
2125c     02 07 02 F1 | 	add	_var04, _var03
21260     02 06 66 F0 | 	shl	_var04, #2
21264     FF 03 00 FF 
21268     00 09 06 F6 | 	mov	_var05, ##524032
2126c     03 09 02 F1 | 	add	_var05, _var04
21270                 | '     repeat until LOCKTRY(driverlock)
21270     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
21274                 | LR__2712
21274     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
21278     06 12 72 FD | 	locktry	arg01 wc
2127c     F4 FF 9F 3D |  if_ae	jmp	#LR__2712
21280     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
21284                 | '     long[mailbox] := driver.R_CONFIG + cogid()
21284     00 06 06 F6 | 	mov	_var04, #0
21288     01 06 62 FD | 	cogid	_var04
2128c     00 00 78 FF 
21290     00 02 06 F6 | 	mov	_var02, ##-268435456
21294     03 03 02 F1 | 	add	_var02, _var04
21298     04 03 62 FC | 	wrlong	_var02, _var05
2129c                 | '     repeat while long[mailbox] < 0
2129c                 | LR__2713
2129c     04 03 02 FB | 	rdlong	_var02, _var05
212a0     00 02 56 F2 | 	cmps	_var02, #0 wc
212a4     F4 FF 9F CD |  if_b	jmp	#LR__2713
212a8                 | '     LOCKREL(driverlock)
212a8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
212ac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
212b0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
212b4     07 12 72 FD | 	lockrel	arg01 wc
212b8     00 FA 05 F6 | 	mov	result1, #0
212bc                 | LR__2714
212bc                 | _psram_spin2_setQos_ret
212bc     2D 00 64 FD | 	ret
212c0                 | 
212c0                 | ' 
212c0                 | ' '..............................................................................
212c0                 | ' 
212c0                 | ' {{
212c0                 | ' }}
212c0                 | ' PRI lookupDelay(freq) : delay | profile
212c0                 | _psram_spin2_lookupDelay
212c0                 | '     profile := @delayTable
212c0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
212c4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
212c8                 | '     delay := long[profile][0]
212c8     00 03 02 FB | 	rdlong	_var02, _var01
212cc                 | '     repeat while long[profile][1] 
212cc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
212d0     97 16 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
212d4                 | LR__2720
212d4     04 00 06 F1 | 	add	_var01, #4
212d8     00 FB 09 FB | 	rdlong	result1, _var01 wz
212dc     04 00 86 F1 | 	sub	_var01, #4
212e0     1C 00 90 AD |  if_e	jmp	#LR__2722
212e4                 | '         if freq +< long[profile][1] 
212e4     04 00 06 F1 | 	add	_var01, #4
212e8     00 FB 01 FB | 	rdlong	result1, _var01
212ec     04 00 86 F1 | 	sub	_var01, #4
212f0     FD 12 12 F2 | 	cmp	arg01, result1 wc
212f4                 | '             quit
212f4                 | '         profile += 4
212f4     04 00 06 31 |  if_ae	add	_var01, #4
212f8                 | '         delay++
212f8     01 02 06 31 |  if_ae	add	_var02, #1
212fc     D4 FF 9F 3D |  if_ae	jmp	#LR__2720
21300                 | LR__2721
21300                 | LR__2722
21300     01 FB 01 F6 | 	mov	result1, _var02
21304                 | _psram_spin2_lookupDelay_ret
21304     2D 00 64 FD | 	ret
21308                 | 
21308                 | ' 
21308                 | ' PUB start() : r
21308                 | _usbnew_spin2_start
21308     00 00 06 F6 | 	mov	_var01, #0
2130c                 | '   ifnot driver_cog
2130c     15 00 00 FF 
21310     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
21314     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
21318     15 00 00 FF 
2131c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
21320     38 00 90 5D |  if_ne	jmp	#LR__2730
21324                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
21324     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
21328     10 00 06 F6 | 	mov	_var01, #16
2132c     00 16 06 F6 | 	mov	arg03, #0
21330     28 16 62 FD | 	setq	arg03
21334     0A 01 F2 FC | 	coginit	_var01, arg02 wc
21338     01 00 66 C6 |  if_b	neg	_var01, #1
2133c                 | '     if r >= 0
2133c     00 00 56 F2 | 	cmps	_var01, #0 wc
21340                 | '       driver_cog := r+1
21340     00 03 02 36 |  if_ae	mov	_var02, _var01
21344     01 02 06 31 |  if_ae	add	_var02, #1
21348     15 00 00 3F 
2134c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
21350     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
21354     15 00 00 3F 
21358     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
2135c                 | LR__2730
2135c     00 FB 01 F6 | 	mov	result1, _var01
21360                 | _usbnew_spin2_start_ret
21360     2D 00 64 FD | 	ret
21364                 | 
21364                 | '     '' (Always enabled)
21364                 | ' 
21364                 | ' '' Get current pressed state of a keyboard key
21364                 | ' PUB keystate(key) : r | buf[2],tmp
21364                 | _usbnew_spin2_keystate
21364     00 04 06 F6 | 	mov	_var03, #0
21368                 | '   if key >= $E0 && key < $E8
21368     E0 12 56 F2 | 	cmps	arg01, #224 wc
2136c     34 00 90 CD |  if_b	jmp	#LR__2740
21370     E8 12 56 F2 | 	cmps	arg01, #232 wc
21374     2C 00 90 3D |  if_ae	jmp	#LR__2740
21378                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
21378     00 FA 05 F6 | 	mov	result1, #0
2137c     13 00 00 FF 
21380     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
21384     09 07 02 F6 | 	mov	_var04, arg01
21388     E0 06 86 F1 | 	sub	_var04, #224
2138c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
21390     03 09 4A F0 | 	shr	_var05, _var04 wz
21394     13 00 00 FF 
21398     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2139c     01 FA 65 56 |  if_ne	neg	result1, #1
213a0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
213a4                 | LR__2740
213a4                 | '   else
213a4                 | '     '' Do this in inline ASM to ensure atomicity
213a4                 | '     tmp := @hkbd_report
213a4     13 00 00 FF 
213a8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
213ac     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
213b0                 | '     org
213b0     13 00 00 FF 
213b4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
213b8     97 1E 48 FB | 	callpa	#(@LR__2742-@LR__2741)>>2,fcache_load_ptr_
213bc                 | LR__2741
213bc 000             | 	org	0
213bc 000 28 02 64 FD | 	setq	#1
213c0 001 04 01 02 FB | 	rdlong	_var01, _var05
213c4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
213c8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
213cc 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
213d0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
213d4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
213d8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
213dc 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
213e0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
213e4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
213e8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
213ec 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
213f0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
213f4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
213f8 00f             | LR__2742
213f8                 | 	orgh
213f8     02 FB 01 F6 | 	mov	result1, _var03
213fc                 | _usbnew_spin2_keystate_ret
213fc     2D 00 64 FD | 	ret
21400                 | 
21400                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
21400                 | ' 
21400                 | ' '' Return key event from buffer if there is one
21400                 | ' PUB get_key() : r | tail
21400                 | _usbnew_spin2_get_key
21400                 | '   tail := keyq_tail
21400     0F 00 00 FF 
21404     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
21408     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2140c                 | '   if keyq_head == tail
2140c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
21410     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
21414     0F 00 00 FF 
21418     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2141c     00 03 0A F2 | 	cmp	_var02, _var01 wz
21420                 | '     return 0 ' No event
21420     00 FA 05 A6 |  if_e	mov	result1, #0
21424     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
21428                 | '   r := keyq_data[tail]
21428     00 03 02 F6 | 	mov	_var02, _var01
2142c     02 02 66 F0 | 	shl	_var02, #2
21430     0F 00 00 FF 
21434     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
21438     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2143c     01 FB 01 FB | 	rdlong	result1, _var02
21440                 | '   if ++tail == KEYQUEUE_SIZE
21440     01 00 06 F1 | 	add	_var01, #1
21444     80 00 0E F2 | 	cmp	_var01, #128 wz
21448                 | '     tail := 0
21448     00 00 06 A6 |  if_e	mov	_var01, #0
2144c                 | '   keyq_tail := tail
2144c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
21450     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
21454     0F 00 00 FF 
21458     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
2145c                 | _usbnew_spin2_get_key_ret
2145c     2D 00 64 FD | 	ret
21460                 | 
21460                 | ' 
21460                 | ' '' Emulate mouse movement
21460                 | ' PUB mouse_move(x,y)
21460                 | _usbnew_spin2_mouse_move
21460     02 4A 05 F6 | 	mov	COUNT_, #2
21464     A8 00 A0 FD | 	call	#pushregs_
21468     09 27 02 F6 | 	mov	local01, arg01
2146c     0A 29 02 F6 | 	mov	local02, arg02
21470                 | '   mouse_lock := 1
21470     14 00 00 FF 
21474     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
21478     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2147c     14 00 00 FF 
21480     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
21484                 | '   waitus(2) ' hope driver is now done
21484     02 12 06 F6 | 	mov	arg01, #2
21488     E8 0A B0 FD | 	call	#__system___waitus
2148c                 | '   mouse_xacc := x
2148c     14 00 00 FF 
21490     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
21494     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
21498                 | '   mouse_yacc := y
21498     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2149c     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
214a0                 | '   if mouse_outptr
214a0     04 00 00 FF 
214a4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
214a8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
214ac     0F 00 00 FF 
214b0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
214b4     24 00 90 AD |  if_e	jmp	#LR__2750
214b8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
214b8     10 28 66 F0 | 	shl	local02, #16
214bc     13 27 32 F9 | 	getword	local01, local01, #0
214c0     13 29 42 F5 | 	or	local02, local01
214c4     0F 00 00 FF 
214c8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
214cc     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
214d0     0F 00 00 FF 
214d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
214d8     13 29 62 FC | 	wrlong	local02, local01
214dc                 | LR__2750
214dc                 | '   mouse_lock := 0
214dc     14 00 00 FF 
214e0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
214e4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
214e8     14 00 00 FF 
214ec     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
214f0     A7 F0 03 F6 | 	mov	ptra, fp
214f4     B2 00 A0 FD | 	call	#popregs_
214f8                 | _usbnew_spin2_mouse_move_ret
214f8     2D 00 64 FD | 	ret
214fc                 | 
214fc                 | '     '' Set HAVE_HIDPAD to enable.
214fc                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
214fc                 | ' 
214fc                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
214fc                 | ' PUB hidpad_id(dev) : r
214fc                 | _usbnew_spin2_hidpad_id
214fc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
214fc     13 00 00 FF 
21500     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21504     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
21508     09 01 02 F6 | 	mov	_var01, arg01
2150c     03 00 66 F0 | 	shl	_var01, #3
21510     09 01 82 F1 | 	sub	_var01, arg01
21514     02 00 66 F0 | 	shl	_var01, #2
21518     00 FB 01 F1 | 	add	result1, _var01
2151c     FD FA 01 FB | 	rdlong	result1, result1
21520     13 00 00 FF 
21524     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
21528                 | _usbnew_spin2_hidpad_id_ret
21528     2D 00 64 FD | 	ret
2152c                 | 
2152c                 | ' 
2152c                 | ' '' Get all button states for a device
2152c                 | ' PUB hidpad_buttons(dev) : r 
2152c                 | _usbnew_spin2_hidpad_buttons
2152c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2152c     13 00 00 FF 
21530     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21534     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
21538     09 01 02 F6 | 	mov	_var01, arg01
2153c     03 00 66 F0 | 	shl	_var01, #3
21540     09 01 82 F1 | 	sub	_var01, arg01
21544     02 00 66 F0 | 	shl	_var01, #2
21548     00 FB 01 F1 | 	add	result1, _var01
2154c     14 FA 05 F1 | 	add	result1, #20
21550     FD FA 01 FB | 	rdlong	result1, result1
21554     13 00 00 FF 
21558     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2155c                 | _usbnew_spin2_hidpad_buttons_ret
2155c     2D 00 64 FD | 	ret
21560                 | 
21560                 | ' 
21560                 | ' '' Get state of an axis (normalized between -32768 and 32767)
21560                 | ' PUB hidpad_axis(dev,axnum) : r
21560                 | _usbnew_spin2_hidpad_axis
21560                 | '   if axnum +>= 6
21560     06 14 16 F2 | 	cmp	arg02, #6 wc
21564                 | '     return 0
21564     00 FA 05 36 |  if_ae	mov	result1, #0
21568     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2156c                 | '   else 
2156c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2156c     13 00 00 FF 
21570     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21574     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
21578     09 01 02 F6 | 	mov	_var01, arg01
2157c     03 00 66 F0 | 	shl	_var01, #3
21580     09 01 82 F1 | 	sub	_var01, arg01
21584     02 00 66 F0 | 	shl	_var01, #2
21588     00 FB 01 F1 | 	add	result1, _var01
2158c     04 00 06 F6 | 	mov	_var01, #4
21590     0A 01 02 F1 | 	add	_var01, arg02
21594     01 00 66 F0 | 	shl	_var01, #1
21598     FD 00 02 F1 | 	add	_var01, result1
2159c     00 FB E1 FA | 	rdword	result1, _var01
215a0     0F FA 65 F7 | 	signx	result1, #15
215a4     13 00 00 FF 
215a8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
215ac                 | _usbnew_spin2_hidpad_axis_ret
215ac     2D 00 64 FD | 	ret
215b0                 | 
215b0                 | ' 
215b0                 | ' 
215b0                 | ' '--------------------------------------------------------------
215b0                 | ' '---------- Init the variables, start the cog. ----------------
215b0                 | ' '--------------------------------------------------------------
215b0                 | ' 
215b0                 | ' pub start(mbox,scope,cache) :cog,base | iii
215b0                 | _audio096_spin2_start
215b0     04 4A 05 F6 | 	mov	COUNT_, #4
215b4     A8 00 A0 FD | 	call	#pushregs_
215b8     09 27 02 F6 | 	mov	local01, arg01
215bc                 | ' 
215bc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
215bc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
215bc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
215bc                 | ' 
215bc                 | ' mailboxaddr:=mbox 
215bc     F2 26 62 FC | 	wrlong	local01, objptr
215c0                 | ' scope_ptr:=scope
215c0     04 E4 05 F1 | 	add	objptr, #4
215c4     F2 14 62 FC | 	wrlong	arg02, objptr
215c8                 | ' cache_ptr:=cache
215c8     04 E4 05 F1 | 	add	objptr, #4
215cc     F2 16 62 FC | 	wrlong	arg03, objptr
215d0                 | ' base:=@channel1[0]
215d0     04 E4 05 F1 | 	add	objptr, #4
215d4     F2 28 02 F6 | 	mov	local02, objptr
215d8                 | ' long[$40]:=mbox
215d8     40 26 66 FC | 	wrlong	local01, #64
215dc                 | ' repeat iii from 0 to 7
215dc     00 2A 06 F6 | 	mov	local03, #0
215e0     02 00 00 FF 
215e4     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
215e8     0C E4 85 F1 | 	sub	objptr, #12
215ec     97 BC 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
215f0                 | LR__2760
215f0                 | '   long[base+64*iii]:=0
215f0     14 27 02 F6 | 	mov	local01, local02
215f4     15 FD 01 F6 | 	mov	result2, local03
215f8     06 FC 65 F0 | 	shl	result2, #6
215fc     FE 26 02 F1 | 	add	local01, result2
21600     13 01 68 FC | 	wrlong	#0, local01
21604                 | '   long[base+64*iii+4]:=0
21604     14 27 02 F6 | 	mov	local01, local02
21608     15 FD 01 F6 | 	mov	result2, local03
2160c     06 FC 65 F0 | 	shl	result2, #6
21610     FE 26 02 F1 | 	add	local01, result2
21614     04 26 06 F1 | 	add	local01, #4
21618     13 01 68 FC | 	wrlong	#0, local01
2161c                 | '   long[base+64*iii+12]:=0
2161c     14 2D 02 F6 | 	mov	local04, local02
21620     15 27 02 F6 | 	mov	local01, local03
21624     06 26 66 F0 | 	shl	local01, #6
21628     13 2D 02 F1 | 	add	local04, local01
2162c     0C 2C 06 F1 | 	add	local04, #12
21630     16 01 68 FC | 	wrlong	#0, local04
21634                 | '   long[base+64*iii+16]:=2 
21634     14 2D 02 F6 | 	mov	local04, local02
21638     15 27 02 F6 | 	mov	local01, local03
2163c     06 26 66 F0 | 	shl	local01, #6
21640     13 2D 02 F1 | 	add	local04, local01
21644     10 2C 06 F1 | 	add	local04, #16
21648     16 05 68 FC | 	wrlong	#2, local04
2164c                 | '   word[base+64*iii+20]:=0
2164c     14 2D 02 F6 | 	mov	local04, local02
21650     15 27 02 F6 | 	mov	local01, local03
21654     06 26 66 F0 | 	shl	local01, #6
21658     13 2D 02 F1 | 	add	local04, local01
2165c     14 2C 06 F1 | 	add	local04, #20
21660     16 01 58 FC | 	wrword	#0, local04
21664                 | '   word[base+64*iii+22]:=8192
21664     14 2D 02 F6 | 	mov	local04, local02
21668     15 27 02 F6 | 	mov	local01, local03
2166c     06 26 66 F0 | 	shl	local01, #6
21670     13 2D 02 F1 | 	add	local04, local01
21674     16 2C 06 F1 | 	add	local04, #22
21678     10 00 80 FF 
2167c     16 01 58 FC | 	wrword	##8192, local04
21680                 | '   word[base+64*iii+24]:=4000+2*iii
21680     15 2D 02 F6 | 	mov	local04, local03
21684     01 2C 66 F0 | 	shl	local04, #1
21688     07 00 00 FF 
2168c     A0 27 06 F6 | 	mov	local01, ##4000
21690     16 27 02 F1 | 	add	local01, local04
21694     14 2D 02 F6 | 	mov	local04, local02
21698     15 FD 01 F6 | 	mov	result2, local03
2169c     06 FC 65 F0 | 	shl	result2, #6
216a0     FE 2C 02 F1 | 	add	local04, result2
216a4     18 2C 06 F1 | 	add	local04, #24
216a8     16 27 52 FC | 	wrword	local01, local04
216ac                 | '   word[base+64*iii+26]:=2
216ac     14 2D 02 F6 | 	mov	local04, local02
216b0     15 27 02 F6 | 	mov	local01, local03
216b4     06 26 66 F0 | 	shl	local01, #6
216b8     13 2D 02 F1 | 	add	local04, local01
216bc     1A 2C 06 F1 | 	add	local04, #26
216c0     16 05 58 FC | 	wrword	#2, local04
216c4                 | '   long [base+64*iii+8]:=@null | $C0000000
216c4     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
216c8     3E 26 26 F4 | 	bith	local01, #62
216cc     14 2D 02 F6 | 	mov	local04, local02
216d0     15 17 02 F6 | 	mov	arg03, local03
216d4     06 16 66 F0 | 	shl	arg03, #6
216d8     0B 2D 02 F1 | 	add	local04, arg03
216dc     08 2C 06 F1 | 	add	local04, #8
216e0     16 27 62 FC | 	wrlong	local01, local04
216e4                 | '   long[base+64*iii+32]:=0
216e4     14 2D 02 F6 | 	mov	local04, local02
216e8     15 27 02 F6 | 	mov	local01, local03
216ec     06 26 66 F0 | 	shl	local01, #6
216f0     13 2D 02 F1 | 	add	local04, local01
216f4     20 2C 06 F1 | 	add	local04, #32
216f8     16 01 68 FC | 	wrlong	#0, local04
216fc                 | '   long[base+64*iii+36]:=0
216fc     14 2D 02 F6 | 	mov	local04, local02
21700     15 27 02 F6 | 	mov	local01, local03
21704     06 26 66 F0 | 	shl	local01, #6
21708     13 2D 02 F1 | 	add	local04, local01
2170c     24 2C 06 F1 | 	add	local04, #36
21710     16 01 68 FC | 	wrlong	#0, local04
21714                 | '   long[base+64*iii+40]:=0
21714     14 2D 02 F6 | 	mov	local04, local02
21718     15 27 02 F6 | 	mov	local01, local03
2171c     06 26 66 F0 | 	shl	local01, #6
21720     13 2D 02 F1 | 	add	local04, local01
21724     28 2C 06 F1 | 	add	local04, #40
21728     16 01 68 FC | 	wrlong	#0, local04
2172c                 | '   long[base+64*iii+44]:=0
2172c     14 2D 02 F6 | 	mov	local04, local02
21730     15 27 02 F6 | 	mov	local01, local03
21734     06 26 66 F0 | 	shl	local01, #6
21738     13 2D 02 F1 | 	add	local04, local01
2173c     2C 2C 06 F1 | 	add	local04, #44
21740     16 01 68 FC | 	wrlong	#0, local04
21744                 | '   long[base+64*iii+28]:=0
21744     14 2D 02 F6 | 	mov	local04, local02
21748     15 27 02 F6 | 	mov	local01, local03
2174c     06 26 66 F0 | 	shl	local01, #6
21750     13 2D 02 F1 | 	add	local04, local01
21754     1C 2C 06 F1 | 	add	local04, #28
21758     16 01 68 FC | 	wrlong	#0, local04
2175c     01 2A 06 F1 | 	add	local03, #1
21760     08 2A 56 F2 | 	cmps	local03, #8 wc
21764     88 FE 9F CD |  if_b	jmp	#LR__2760
21768                 | LR__2761
21768     02 00 00 FF 
2176c     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
21770                 | '   
21770                 | ' cog:=coginit(16,@audio,@mailboxaddr)
21770     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
21774     F2 16 02 F6 | 	mov	arg03, objptr
21778     10 2C 06 F6 | 	mov	local04, #16
2177c     28 16 62 FD | 	setq	arg03
21780     0A 2D F2 FC | 	coginit	local04, arg02 wc
21784     01 2C 66 C6 |  if_b	neg	local04, #1
21788                 | ' waitms(100)
21788     64 12 06 F6 | 	mov	arg01, #100
2178c     78 07 B0 FD | 	call	#__system___waitms
21790                 | ' return cog,base
21790     14 FD 01 F6 | 	mov	result2, local02
21794     16 FB 01 F6 | 	mov	result1, local04
21798     A7 F0 03 F6 | 	mov	ptra, fp
2179c     B2 00 A0 FD | 	call	#popregs_
217a0                 | _audio096_spin2_start_ret
217a0     2D 00 64 FD | 	ret
217a4                 | 
217a4                 | ' 
217a4                 | ' ' a simple play procedure to not poke everything. 
217a4                 | ' 
217a4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
217a4                 | _audio096_spin2_play
217a4     0C E4 05 F1 | 	add	objptr, #12
217a8     F2 00 02 F6 | 	mov	_var01, objptr
217ac     06 12 66 F0 | 	shl	arg01, #6
217b0     09 01 02 F1 | 	add	_var01, arg01
217b4     00 13 02 F6 | 	mov	arg01, _var01
217b8     0C 12 06 F1 | 	add	arg01, #12
217bc     09 1B 62 FC | 	wrlong	arg05, arg01
217c0     00 1C 56 F2 | 	cmps	arg06, #0 wc
217c4     00 13 02 36 |  if_ae	mov	arg01, _var01
217c8     10 12 06 31 |  if_ae	add	arg01, #16
217cc     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
217d0     02 1A 06 C1 |  if_b	add	arg05, #2
217d4     00 13 02 C6 |  if_b	mov	arg01, _var01
217d8     10 12 06 C1 |  if_b	add	arg01, #16
217dc     09 1B 62 CC |  if_b	wrlong	arg05, arg01
217e0     0B 13 52 F6 | 	abs	arg01, arg03 wc
217e4     0F 1B 80 FF 
217e8     09 1F 1A FD | 	qdiv	##3546895, arg01
217ec                 | ' 
217ec                 | ' base2:=@channel1[0]+64*channel
217ec                 | ' 
217ec                 | ' 
217ec                 | ' long[base2+12]:= len
217ec                 | ' if loop >=0 
217ec                 | '   long[base2+16]:= loop
217ec     0C E4 85 F1 | 	sub	objptr, #12
217f0                 | ' else
217f0                 | '   long[base2+16]:= len+2
217f0                 | ' word[base2+20]:=vol
217f0     00 13 02 F6 | 	mov	arg01, _var01
217f4     14 12 06 F1 | 	add	arg01, #20
217f8     09 19 52 FC | 	wrword	arg04, arg01
217fc                 | ' word[base2+24]:= 3546895/splfreq 
217fc     00 19 02 F6 | 	mov	arg04, _var01
21800     18 18 06 F1 | 	add	arg04, #24
21804                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
21804                 | ' long[base2+28]:=$40000000    
21804                 | ' long[base2+32]:=0    
21804                 | ' long[base2+36]:=0    
21804                 | ' long[base2+40]:=0    
21804                 | ' long[base2+44]:=0    
21804                 | ' long[base2+8]:=sample+$C0000000     
21804     00 00 60 FF 
21808     00 14 06 F1 | 	add	arg02, ##-1073741824
2180c     18 12 62 FD | 	getqx	arg01
21810     09 13 82 F6 | 	negc	arg01, arg01
21814     0C 13 52 FC | 	wrword	arg01, arg04
21818     00 13 02 F6 | 	mov	arg01, _var01
2181c     1A 12 06 F1 | 	add	arg01, #26
21820     09 01 5A FC | 	wrword	#256, arg01
21824     00 13 02 F6 | 	mov	arg01, _var01
21828     1C 12 06 F1 | 	add	arg01, #28
2182c     00 00 A0 FF 
21830     09 01 68 FC | 	wrlong	##1073741824, arg01
21834     00 13 02 F6 | 	mov	arg01, _var01
21838     20 12 06 F1 | 	add	arg01, #32
2183c     09 01 68 FC | 	wrlong	#0, arg01
21840     00 13 02 F6 | 	mov	arg01, _var01
21844     24 12 06 F1 | 	add	arg01, #36
21848     09 01 68 FC | 	wrlong	#0, arg01
2184c     00 13 02 F6 | 	mov	arg01, _var01
21850     28 12 06 F1 | 	add	arg01, #40
21854     09 01 68 FC | 	wrlong	#0, arg01
21858     00 13 02 F6 | 	mov	arg01, _var01
2185c     2C 12 06 F1 | 	add	arg01, #44
21860     09 01 68 FC | 	wrlong	#0, arg01
21864     08 00 06 F1 | 	add	_var01, #8
21868     00 15 62 FC | 	wrlong	arg02, _var01
2186c                 | _audio096_spin2_play_ret
2186c     2D 00 64 FD | 	ret
21870                 | 
21870                 | ' 
21870                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
21870                 | _audio096_spin2_play8
21870                 | ' 
21870                 | ' base2:=@channel1[0]+64*channel
21870     0C E4 05 F1 | 	add	objptr, #12
21874     F2 00 02 F6 | 	mov	_var01, objptr
21878     06 12 66 F0 | 	shl	arg01, #6
2187c     09 01 02 F1 | 	add	_var01, arg01
21880                 | ' long[base2]:=0
21880     00 01 68 FC | 	wrlong	#0, _var01
21884                 | ' long[base2+8]:=sample+$40000000 
21884     00 00 20 FF 
21888     00 14 06 F1 | 	add	arg02, ##1073741824
2188c     00 13 02 F6 | 	mov	arg01, _var01
21890     08 12 06 F1 | 	add	arg01, #8
21894     09 15 62 FC | 	wrlong	arg02, arg01
21898                 | ' if loop>=0
21898     00 1C 56 F2 | 	cmps	arg06, #0 wc
2189c     0C E4 85 F1 | 	sub	objptr, #12
218a0     1C 00 90 CD |  if_b	jmp	#LR__2770
218a4                 | '   long[base2+12]:=loop
218a4     00 15 02 F6 | 	mov	arg02, _var01
218a8     0C 14 06 F1 | 	add	arg02, #12
218ac     0A 1D 62 FC | 	wrlong	arg06, arg02
218b0                 | '   long[base2+16]:= len
218b0     00 1D 02 F6 | 	mov	arg06, _var01
218b4     10 1C 06 F1 | 	add	arg06, #16
218b8     0E 1B 62 FC | 	wrlong	arg05, arg06
218bc     1C 00 90 FD | 	jmp	#LR__2771
218c0                 | LR__2770
218c0                 | ' else
218c0                 | '   long[base2+12]:= len
218c0     00 1D 02 F6 | 	mov	arg06, _var01
218c4     0C 1C 06 F1 | 	add	arg06, #12
218c8     0E 1B 62 FC | 	wrlong	arg05, arg06
218cc                 | '   long[base2+16]:= len+1
218cc     01 1A 06 F1 | 	add	arg05, #1
218d0     00 13 02 F6 | 	mov	arg01, _var01
218d4     10 12 06 F1 | 	add	arg01, #16
218d8     09 1B 62 FC | 	wrlong	arg05, arg01
218dc                 | LR__2771
218dc     0B 17 52 F6 | 	abs	arg03, arg03 wc
218e0     0F 1B 80 FF 
218e4     0B 1F 1A FD | 	qdiv	##3546895, arg03
218e8                 | ' word[base2+20]:=vol
218e8     00 17 02 F6 | 	mov	arg03, _var01
218ec     14 16 06 F1 | 	add	arg03, #20
218f0     0B 19 52 FC | 	wrword	arg04, arg03
218f4                 | ' word[base2+24]:= 3546895 /splfreq 
218f4     00 13 02 F6 | 	mov	arg01, _var01
218f8     18 12 06 F1 | 	add	arg01, #24
218fc                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
218fc     1A 00 06 F1 | 	add	_var01, #26
21900     18 18 62 FD | 	getqx	arg04
21904     0C 19 82 F6 | 	negc	arg04, arg04
21908     09 19 52 FC | 	wrword	arg04, arg01
2190c     00 01 5A FC | 	wrword	#256, _var01
21910                 | _audio096_spin2_play8_ret
21910     2D 00 64 FD | 	ret
21914                 | 
21914                 | ' 'long[base2+28]:=$40000000
21914                 | ' 
21914                 | '     
21914                 | ' pub stop(channel) 'silence it
21914                 | _audio096_spin2_stop
21914                 | ' 
21914                 | ' word[@channel1[0]+64*channel+20]:=0
21914     0C E4 05 F1 | 	add	objptr, #12
21918     F2 00 02 F6 | 	mov	_var01, objptr
2191c     09 03 02 F6 | 	mov	_var02, arg01
21920     06 02 66 F0 | 	shl	_var02, #6
21924     01 01 02 F1 | 	add	_var01, _var02
21928     14 00 06 F1 | 	add	_var01, #20
2192c     00 01 58 FC | 	wrword	#0, _var01
21930                 | ' word[@channel1[0]+64*channel+20]:=0
21930     F2 00 02 F6 | 	mov	_var01, objptr
21934     06 12 66 F0 | 	shl	arg01, #6
21938     09 01 02 F1 | 	add	_var01, arg01
2193c     14 00 06 F1 | 	add	_var01, #20
21940     00 01 58 FC | 	wrword	#0, _var01
21944     0C E4 85 F1 | 	sub	objptr, #12
21948                 | _audio096_spin2_stop_ret
21948     2D 00 64 FD | 	ret
2194c                 | hubexit
2194c     81 00 80 FD | 	jmp	#cogexit
21950                 | 
21950                 | __system___setbaud
21950     14 88 06 FB | 	rdlong	muldiva_, #20
21954     09 8B 02 F6 | 	mov	muldivb_, arg01
21958     BA 00 A0 FD | 	call	#divide_
2195c     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
21960                 | LR__2780
21960     3E FA 9D FA | 	rdpin	result1, #62 wc
21964     FE FC A1 F1 | 	subx	result2, result2
21968     F4 FF 9F CD |  if_b	jmp	#LR__2780
2196c                 | LR__2781
2196c     40 7C 64 FD | 	dirl	#62
21970     40 7E 64 FD | 	dirl	#63
21974     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
21978     10 8A 66 F0 | 	shl	muldivb_, #16
2197c     07 14 06 F6 | 	mov	arg02, #7
21980     45 15 02 F1 | 	add	arg02, muldivb_
21984     3E F8 0C FC | 	wrpin	#124, #62
21988     3E 14 16 FC | 	wxpin	arg02, #62
2198c     3F 7C 0C FC | 	wrpin	#62, #63
21990     14 14 06 F1 | 	add	arg02, #20
21994     3F 14 16 FC | 	wxpin	arg02, #63
21998     41 7C 64 FD | 	dirh	#62
2199c     41 7E 64 FD | 	dirh	#63
219a0                 | __system___setbaud_ret
219a0     2D 00 64 FD | 	ret
219a4                 | 
219a4                 | __system___txraw
219a4     01 4A 05 F6 | 	mov	COUNT_, #1
219a8     A8 00 A0 FD | 	call	#pushregs_
219ac     09 27 02 F6 | 	mov	local01, arg01
219b0     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
219b4                 | LR__2790
219b4     3E FA 9D FA | 	rdpin	result1, #62 wc
219b8     FE FC A1 F1 | 	subx	result2, result2
219bc     F4 FF 9F CD |  if_b	jmp	#LR__2790
219c0                 | LR__2791
219c0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
219c4     C2 01 00 AF 
219c8     00 12 06 A6 |  if_e	mov	arg01, ##230400
219cc     80 FF BF AD |  if_e	call	#__system___setbaud
219d0     58 7C 64 FD | 	drvl	#62
219d4     3E 26 26 FC | 	wypin	local01, #62
219d8     01 FA 05 F6 | 	mov	result1, #1
219dc     A7 F0 03 F6 | 	mov	ptra, fp
219e0     B2 00 A0 FD | 	call	#popregs_
219e4                 | __system___txraw_ret
219e4     2D 00 64 FD | 	ret
219e8                 | 
219e8                 | __system___rxraw
219e8     0D 4A 05 F6 | 	mov	COUNT_, #13
219ec     A8 00 A0 FD | 	call	#pushregs_
219f0     09 27 02 F6 | 	mov	local01, arg01
219f4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
219f8     C2 01 00 AF 
219fc     00 12 06 A6 |  if_e	mov	arg01, ##230400
21a00     4C FF BF AD |  if_e	call	#__system___setbaud
21a04     00 26 0E F2 | 	cmp	local01, #0 wz
21a08     20 00 90 AD |  if_e	jmp	#LR__2800
21a0c     14 2A 06 FB | 	rdlong	local03, #20
21a10     0A 2A 46 F0 | 	shr	local03, #10
21a14     15 27 02 FD | 	qmul	local01, local03
21a18     1A FA 61 FD | 	getct	result1
21a1c     18 2C 62 FD | 	getqx	local04
21a20     16 FB 01 F1 | 	add	result1, local04
21a24     FD 2E 02 F6 | 	mov	local05, result1
21a28     04 00 90 FD | 	jmp	#LR__2801
21a2c                 | LR__2800
21a2c     00 2E 06 F6 | 	mov	local05, #0
21a30                 | LR__2801
21a30     01 30 66 F6 | 	neg	local06, #1
21a34     3F 32 06 F6 | 	mov	local07, #63
21a38     00 34 06 F6 | 	mov	local08, #0
21a3c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21a40     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
21a44     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
21a48                 | LR__2802
21a48     08 36 16 F4 | 	testb	local09, #8 wc
21a4c     09 36 76 F4 | 	testbn	local09, #9 andc
21a50     0A 36 46 F0 | 	shr	local09, #10
21a54     01 34 06 C6 |  if_b	mov	local08, #1
21a58     40 7E 6C 3D |  if_ae	testp	#63 wz
21a5c     01 34 06 26 |  if_nc_and_z	mov	local08, #1
21a60     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
21a64     04 36 46 20 |  if_nc_and_z	shr	local09, #4
21a68                 | LR__2803
21a68     00 28 06 F6 | 	mov	local02, #0
21a6c     00 34 0E F2 | 	cmp	local08, #0 wz
21a70     01 28 66 56 |  if_ne	neg	local02, #1
21a74     00 38 06 F6 | 	mov	local10, #0
21a78     00 2A 06 F6 | 	mov	local03, #0
21a7c     00 26 0E F2 | 	cmp	local01, #0 wz
21a80     01 2A 66 56 |  if_ne	neg	local03, #1
21a84     00 2C 06 F6 | 	mov	local04, #0
21a88     00 3A 06 F6 | 	mov	local11, #0
21a8c     17 3D 02 F6 | 	mov	local12, local05
21a90     1A FA 61 FD | 	getct	result1
21a94     FD 3E 02 F6 | 	mov	local13, result1
21a98     1F 3D 82 F1 | 	sub	local12, local13
21a9c     00 3C 56 F2 | 	cmps	local12, #0 wc
21aa0     00 3A 26 C6 |  if_b	not	local11, #0
21aa4     00 3A 0E F2 | 	cmp	local11, #0 wz
21aa8     00 2C 26 56 |  if_ne	not	local04, #0
21aac     16 2B CA F7 | 	test	local03, local04 wz
21ab0     00 38 26 56 |  if_ne	not	local10, #0
21ab4     1C 29 4A F5 | 	or	local02, local10 wz
21ab8     8C FF 9F AD |  if_e	jmp	#LR__2802
21abc     00 34 0E F2 | 	cmp	local08, #0 wz
21ac0     1B 31 02 56 |  if_ne	mov	local06, local09
21ac4     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
21ac8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21acc     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
21ad0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
21ad4     18 FB 01 F6 | 	mov	result1, local06
21ad8     A7 F0 03 F6 | 	mov	ptra, fp
21adc     B2 00 A0 FD | 	call	#popregs_
21ae0                 | __system___rxraw_ret
21ae0     2D 00 64 FD | 	ret
21ae4                 | 
21ae4                 | __system___getus
21ae4     1A FC 71 FD | 	getct	result2 wc
21ae8     1A 00 62 FD | 	getct	_var01
21aec     10 E6 05 F1 | 	add	ptr___system__dat__, #16
21af0     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
21af4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21af8     20 00 90 5D |  if_ne	jmp	#LR__2810
21afc     14 02 06 FB | 	rdlong	_var02, #20
21b00     A1 07 00 FF 
21b04     40 02 16 FD | 	qdiv	_var02, ##1000000
21b08     10 E6 05 F1 | 	add	ptr___system__dat__, #16
21b0c     18 FA 61 FD | 	getqx	result1
21b10     FD 02 02 F6 | 	mov	_var02, result1
21b14     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21b18     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21b1c                 | LR__2810
21b1c     01 FD 11 FD | 	qdiv	result2, _var02
21b20     19 FC 61 FD | 	getqy	result2
21b24     28 FC 61 FD | 	setq	result2
21b28     01 01 12 FD | 	qdiv	_var01, _var02
21b2c     18 FA 61 FD | 	getqx	result1
21b30                 | __system___getus_ret
21b30     2D 00 64 FD | 	ret
21b34                 | 
21b34                 | __system____builtin_memmove
21b34     09 01 02 F6 | 	mov	_var01, arg01
21b38     0A 13 52 F2 | 	cmps	arg01, arg02 wc
21b3c     10 00 90 CD |  if_b	jmp	#LR__2820
21b40     0A 03 02 F6 | 	mov	_var02, arg02
21b44     0B 03 02 F1 | 	add	_var02, arg03
21b48     01 13 52 F2 | 	cmps	arg01, _var02 wc
21b4c     48 00 90 CD |  if_b	jmp	#LR__2826
21b50                 | LR__2820
21b50     0B 05 02 F6 | 	mov	_var03, arg03
21b54     02 04 4E F0 | 	shr	_var03, #2 wz
21b58     18 00 90 AD |  if_e	jmp	#LR__2825
21b5c     97 0A 48 FB | 	callpa	#(@LR__2823-@LR__2821)>>2,fcache_load_ptr_
21b60                 | LR__2821
21b60     02 09 D8 FC | 	rep	@LR__2824, _var03
21b64                 | LR__2822
21b64     0A 05 02 FB | 	rdlong	_var03, arg02
21b68     09 05 62 FC | 	wrlong	_var03, arg01
21b6c     04 12 06 F1 | 	add	arg01, #4
21b70     04 14 06 F1 | 	add	arg02, #4
21b74                 | LR__2823
21b74                 | LR__2824
21b74                 | LR__2825
21b74     02 16 CE F7 | 	test	arg03, #2 wz
21b78     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
21b7c     09 03 52 5C |  if_ne	wrword	_var02, arg01
21b80     02 12 06 51 |  if_ne	add	arg01, #2
21b84     02 14 06 51 |  if_ne	add	arg02, #2
21b88     01 16 CE F7 | 	test	arg03, #1 wz
21b8c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
21b90     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
21b94     28 00 90 FD | 	jmp	#LR__2832
21b98                 | LR__2826
21b98     0B 13 02 F1 | 	add	arg01, arg03
21b9c     0B 15 02 F1 | 	add	arg02, arg03
21ba0     0B 07 0A F6 | 	mov	_var04, arg03 wz
21ba4     18 00 90 AD |  if_e	jmp	#LR__2831
21ba8     97 0A 48 FB | 	callpa	#(@LR__2829-@LR__2827)>>2,fcache_load_ptr_
21bac                 | LR__2827
21bac     03 09 D8 FC | 	rep	@LR__2830, _var04
21bb0                 | LR__2828
21bb0     01 12 86 F1 | 	sub	arg01, #1
21bb4     01 14 86 F1 | 	sub	arg02, #1
21bb8     0A 03 C2 FA | 	rdbyte	_var02, arg02
21bbc     09 03 42 FC | 	wrbyte	_var02, arg01
21bc0                 | LR__2829
21bc0                 | LR__2830
21bc0                 | LR__2831
21bc0                 | LR__2832
21bc0     00 FB 01 F6 | 	mov	result1, _var01
21bc4                 | __system____builtin_memmove_ret
21bc4     2D 00 64 FD | 	ret
21bc8                 | 
21bc8                 | __system____builtin_strcpy
21bc8     09 01 02 F6 | 	mov	_var01, arg01
21bcc     97 0A 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
21bd0                 | LR__2840
21bd0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
21bd4     09 FB 41 FC | 	wrbyte	result1, arg01
21bd8     01 14 06 F1 | 	add	arg02, #1
21bdc     01 12 06 F1 | 	add	arg01, #1
21be0     EC FF 9F 5D |  if_ne	jmp	#LR__2840
21be4                 | LR__2841
21be4     00 FB 01 F6 | 	mov	result1, _var01
21be8                 | __system____builtin_strcpy_ret
21be8     2D 00 64 FD | 	ret
21bec                 | 
21bec                 | __system____topofstack
21bec     00 4A 05 F6 | 	mov	COUNT_, #0
21bf0     A8 00 A0 FD | 	call	#pushregs_
21bf4     08 F0 07 F1 | 	add	ptra, #8
21bf8     04 4E 05 F1 | 	add	fp, #4
21bfc     A7 12 62 FC | 	wrlong	arg01, fp
21c00     A7 FA 01 F6 | 	mov	result1, fp
21c04     04 4E 85 F1 | 	sub	fp, #4
21c08     A7 F0 03 F6 | 	mov	ptra, fp
21c0c     B2 00 A0 FD | 	call	#popregs_
21c10                 | __system____topofstack_ret
21c10     2D 00 64 FD | 	ret
21c14                 | 
21c14                 | __system___lockmem
21c14     00 FA 05 F6 | 	mov	result1, #0
21c18     01 FA 61 FD | 	cogid	result1
21c1c     00 FB 05 F1 | 	add	result1, #256
21c20                 | LR__2850
21c20     09 01 0A FB | 	rdlong	_var01, arg01 wz
21c24     09 FB 61 AC |  if_e	wrlong	result1, arg01
21c28     09 01 02 AB |  if_e	rdlong	_var01, arg01
21c2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
21c30     FD 00 0A F2 | 	cmp	_var01, result1 wz
21c34     E8 FF 9F 5D |  if_ne	jmp	#LR__2850
21c38                 | __system___lockmem_ret
21c38     2D 00 64 FD | 	ret
21c3c                 | 
21c3c                 | __system___string_cmp
21c3c     97 14 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
21c40                 | LR__2860
21c40     09 01 C2 FA | 	rdbyte	_var01, arg01
21c44     0A 03 C2 FA | 	rdbyte	_var02, arg02
21c48     00 05 02 F6 | 	mov	_var03, _var01
21c4c     01 05 8A F1 | 	sub	_var03, _var02 wz
21c50     01 12 06 F1 | 	add	arg01, #1
21c54     01 14 06 F1 | 	add	arg02, #1
21c58     0C 00 90 5D |  if_ne	jmp	#LR__2862
21c5c     00 00 0E F2 | 	cmp	_var01, #0 wz
21c60     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
21c64     D8 FF 9F 5D |  if_ne	jmp	#LR__2860
21c68                 | LR__2861
21c68                 | LR__2862
21c68     02 FB 01 F6 | 	mov	result1, _var03
21c6c                 | __system___string_cmp_ret
21c6c     2D 00 64 FD | 	ret
21c70                 | 
21c70                 | __system___string_concat
21c70     05 4A 05 F6 | 	mov	COUNT_, #5
21c74     A8 00 A0 FD | 	call	#pushregs_
21c78     09 27 02 F6 | 	mov	local01, arg01
21c7c     0A 29 02 F6 | 	mov	local02, arg02
21c80     13 13 02 F6 | 	mov	arg01, local01
21c84     09 2B 02 F6 | 	mov	local03, arg01
21c88     97 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
21c8c                 | LR__2870
21c8c     15 FB C9 FA | 	rdbyte	result1, local03 wz
21c90     01 2A 06 51 |  if_ne	add	local03, #1
21c94     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
21c98                 | LR__2871
21c98     09 2B 82 F1 | 	sub	local03, arg01
21c9c     15 2D 02 F6 | 	mov	local04, local03
21ca0     14 13 02 F6 | 	mov	arg01, local02
21ca4     09 2B 02 F6 | 	mov	local03, arg01
21ca8     97 06 48 FB | 	callpa	#(@LR__2873-@LR__2872)>>2,fcache_load_ptr_
21cac                 | LR__2872
21cac     15 FB C9 FA | 	rdbyte	result1, local03 wz
21cb0     01 2A 06 51 |  if_ne	add	local03, #1
21cb4     F4 FF 9F 5D |  if_ne	jmp	#LR__2872
21cb8                 | LR__2873
21cb8     09 2B 82 F1 | 	sub	local03, arg01
21cbc     16 13 02 F6 | 	mov	arg01, local04
21cc0     15 13 02 F1 | 	add	arg01, local03
21cc4     01 12 06 F1 | 	add	arg01, #1
21cc8     2C 40 B0 FD | 	call	#__system___gc_alloc_managed
21ccc     FD 2E 0A F6 | 	mov	local05, result1 wz
21cd0     28 00 90 AD |  if_e	jmp	#LR__2874
21cd4     17 13 02 F6 | 	mov	arg01, local05
21cd8     13 15 02 F6 | 	mov	arg02, local01
21cdc     16 17 02 F6 | 	mov	arg03, local04
21ce0     50 FE BF FD | 	call	#__system____builtin_memmove
21ce4     17 13 02 F6 | 	mov	arg01, local05
21ce8     16 13 02 F1 | 	add	arg01, local04
21cec     01 2A 06 F1 | 	add	local03, #1
21cf0     14 15 02 F6 | 	mov	arg02, local02
21cf4     15 17 02 F6 | 	mov	arg03, local03
21cf8     38 FE BF FD | 	call	#__system____builtin_memmove
21cfc                 | LR__2874
21cfc     17 FB 01 F6 | 	mov	result1, local05
21d00     A7 F0 03 F6 | 	mov	ptra, fp
21d04     B2 00 A0 FD | 	call	#popregs_
21d08                 | __system___string_concat_ret
21d08     2D 00 64 FD | 	ret
21d0c                 | 
21d0c                 | __system___tx
21d0c     02 4A 05 F6 | 	mov	COUNT_, #2
21d10     A8 00 A0 FD | 	call	#pushregs_
21d14     09 27 02 F6 | 	mov	local01, arg01
21d18     0A 26 0E F2 | 	cmp	local01, #10 wz
21d1c     18 00 90 5D |  if_ne	jmp	#LR__2880
21d20     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21d24     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
21d28     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21d2c     02 28 CE F7 | 	test	local02, #2 wz
21d30     0D 12 06 56 |  if_ne	mov	arg01, #13
21d34     6C FC BF 5D |  if_ne	call	#__system___txraw
21d38                 | LR__2880
21d38     13 13 02 F6 | 	mov	arg01, local01
21d3c     64 FC BF FD | 	call	#__system___txraw
21d40     A7 F0 03 F6 | 	mov	ptra, fp
21d44     B2 00 A0 FD | 	call	#popregs_
21d48                 | __system___tx_ret
21d48     2D 00 64 FD | 	ret
21d4c                 | 
21d4c                 | __system___rx
21d4c     01 4A 05 F6 | 	mov	COUNT_, #1
21d50     A8 00 A0 FD | 	call	#pushregs_
21d54                 | LR__2890
21d54     00 12 06 F6 | 	mov	arg01, #0
21d58     8C FC BF FD | 	call	#__system___rxraw
21d5c     FD 26 02 F6 | 	mov	local01, result1
21d60     FF FF 7F FF 
21d64     FF 27 0E F2 | 	cmp	local01, ##-1 wz
21d68     E8 FF 9F AD |  if_e	jmp	#LR__2890
21d6c     0D 26 0E F2 | 	cmp	local01, #13 wz
21d70     14 00 90 5D |  if_ne	jmp	#LR__2891
21d74     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21d78     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21d7c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21d80     02 FA CD F7 | 	test	result1, #2 wz
21d84     0A 26 06 56 |  if_ne	mov	local01, #10
21d88                 | LR__2891
21d88     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21d8c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21d90     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21d94     01 12 CE F7 | 	test	arg01, #1 wz
21d98     1C 00 90 AD |  if_e	jmp	#LR__2894
21d9c     7F 26 0E F2 | 	cmp	local01, #127 wz
21da0     0C 00 90 5D |  if_ne	jmp	#LR__2892
21da4     08 12 06 F6 | 	mov	arg01, #8
21da8     60 FF BF FD | 	call	#__system___tx
21dac     08 00 90 FD | 	jmp	#LR__2893
21db0                 | LR__2892
21db0     13 13 02 F6 | 	mov	arg01, local01
21db4     54 FF BF FD | 	call	#__system___tx
21db8                 | LR__2893
21db8                 | LR__2894
21db8     13 FB 01 F6 | 	mov	result1, local01
21dbc     A7 F0 03 F6 | 	mov	ptra, fp
21dc0     B2 00 A0 FD | 	call	#popregs_
21dc4                 | __system___rx_ret
21dc4     2D 00 64 FD | 	ret
21dc8                 | 
21dc8                 | __system___pinwrite
21dc8     09 01 02 F6 | 	mov	_var01, arg01
21dcc     1F 00 06 F5 | 	and	_var01, #31
21dd0     20 12 CE F7 | 	test	arg01, #32 wz
21dd4     06 12 46 F0 | 	shr	arg01, #6
21dd8     09 13 CA F9 | 	bmask	arg01, arg01
21ddc     00 13 62 F0 | 	shl	arg01, _var01
21de0     00 15 62 F0 | 	shl	arg02, _var01
21de4     1C 00 90 AD |  if_e	jmp	#LR__2900
21de8     09 F7 43 F5 | 	or	dirb, arg01
21dec     FD 01 02 F6 | 	mov	_var01, outb
21df0     09 01 22 F5 | 	andn	_var01, arg01
21df4     09 15 02 F5 | 	and	arg02, arg01
21df8     0A 01 42 F5 | 	or	_var01, arg02
21dfc     00 FB 03 F6 | 	mov	outb, _var01
21e00     18 00 90 FD | 	jmp	#LR__2901
21e04                 | LR__2900
21e04     09 F5 43 F5 | 	or	dira, arg01
21e08     FC 01 02 F6 | 	mov	_var01, outa
21e0c     09 01 22 F5 | 	andn	_var01, arg01
21e10     09 15 02 F5 | 	and	arg02, arg01
21e14     0A 01 42 F5 | 	or	_var01, arg02
21e18     00 F9 03 F6 | 	mov	outa, _var01
21e1c                 | LR__2901
21e1c                 | __system___pinwrite_ret
21e1c     2D 00 64 FD | 	ret
21e20                 | 
21e20                 | __system___basic_read_line
21e20     06 4A 05 F6 | 	mov	COUNT_, #6
21e24     A8 00 A0 FD | 	call	#pushregs_
21e28     09 27 02 F6 | 	mov	local01, arg01
21e2c     00 28 06 F6 | 	mov	local02, #0
21e30     18 2A 06 F6 | 	mov	local03, #24
21e34     00 2C 06 F6 | 	mov	local04, #0
21e38     18 12 06 F6 | 	mov	arg01, #24
21e3c     B8 3E B0 FD | 	call	#__system___gc_alloc_managed
21e40     FD 2E 0A F6 | 	mov	local05, result1 wz
21e44     17 FB 01 A6 |  if_e	mov	result1, local05
21e48     B0 00 90 AD |  if_e	jmp	#LR__2913
21e4c                 | LR__2910
21e4c     13 13 02 F6 | 	mov	arg01, local01
21e50     78 0B B0 FD | 	call	#__system___basic_get_char
21e54     FD 30 02 F6 | 	mov	local06, result1
21e58     01 30 56 F2 | 	cmps	local06, #1 wc
21e5c     8C 00 90 CD |  if_b	jmp	#LR__2912
21e60     0A 30 0E F2 | 	cmp	local06, #10 wz
21e64     10 00 90 5D |  if_ne	jmp	#LR__2911
21e68     00 2C 0E F2 | 	cmp	local04, #0 wz
21e6c     01 28 56 52 |  if_ne	cmps	local02, #1 wc
21e70     01 28 86 11 |  if_a	sub	local02, #1
21e74     74 00 90 FD | 	jmp	#LR__2912
21e78                 | LR__2911
21e78     0D 30 0E F2 | 	cmp	local06, #13 wz
21e7c     01 2C 06 A6 |  if_e	mov	local04, #1
21e80     00 2C 06 56 |  if_ne	mov	local04, #0
21e84     08 30 0E F2 | 	cmp	local06, #8 wz
21e88     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
21e8c     01 28 56 A2 |  if_e	cmps	local02, #1 wc
21e90     01 28 86 21 |  if_nc_and_z	sub	local02, #1
21e94     B4 FF 9F AD |  if_e	jmp	#LR__2910
21e98     17 17 02 F6 | 	mov	arg03, local05
21e9c     14 17 02 F1 | 	add	arg03, local02
21ea0     0B 31 42 FC | 	wrbyte	local06, arg03
21ea4     01 28 06 F1 | 	add	local02, #1
21ea8     15 29 0A F2 | 	cmp	local02, local03 wz
21eac     9C FF 9F 5D |  if_ne	jmp	#LR__2910
21eb0     15 13 02 F6 | 	mov	arg01, local03
21eb4     20 12 06 F1 | 	add	arg01, #32
21eb8     3C 3E B0 FD | 	call	#__system___gc_alloc_managed
21ebc     FD 30 0A F6 | 	mov	local06, result1 wz
21ec0     18 FB 01 A6 |  if_e	mov	result1, local06
21ec4     34 00 90 AD |  if_e	jmp	#LR__2913
21ec8     18 13 02 F6 | 	mov	arg01, local06
21ecc     17 15 02 F6 | 	mov	arg02, local05
21ed0     15 17 02 F6 | 	mov	arg03, local03
21ed4     5C FC BF FD | 	call	#__system____builtin_memmove
21ed8     20 2A 06 F1 | 	add	local03, #32
21edc     17 13 02 F6 | 	mov	arg01, local05
21ee0     50 3F B0 FD | 	call	#__system___gc_free
21ee4     18 2F 02 F6 | 	mov	local05, local06
21ee8     60 FF 9F FD | 	jmp	#LR__2910
21eec                 | LR__2912
21eec     17 31 02 F6 | 	mov	local06, local05
21ef0     14 31 02 F1 | 	add	local06, local02
21ef4     18 01 48 FC | 	wrbyte	#0, local06
21ef8     17 FB 01 F6 | 	mov	result1, local05
21efc                 | LR__2913
21efc     A7 F0 03 F6 | 	mov	ptra, fp
21f00     B2 00 A0 FD | 	call	#popregs_
21f04                 | __system___basic_read_line_ret
21f04     2D 00 64 FD | 	ret
21f08                 | 
21f08                 | __system___waitms
21f08     09 01 02 F6 | 	mov	_var01, arg01
21f0c     1A 02 62 FD | 	getct	_var02
21f10     14 04 06 FB | 	rdlong	_var03, #20
21f14     97 14 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
21f18                 | LR__2920
21f18     01 00 00 FF 
21f1c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
21f20     1C 00 90 CD |  if_b	jmp	#LR__2922
21f24     02 03 02 F1 | 	add	_var02, _var03
21f28     01 13 02 F6 | 	mov	arg01, _var02
21f2c     00 12 66 FA | 	addct1	arg01, #0
21f30     24 22 60 FD | 	waitct1
21f34     01 00 00 FF 
21f38     E8 01 86 F1 | 	sub	_var01, ##1000
21f3c     D8 FF 9F FD | 	jmp	#LR__2920
21f40                 | LR__2921
21f40                 | LR__2922
21f40     01 00 56 F2 | 	cmps	_var01, #1 wc
21f44     28 00 90 CD |  if_b	jmp	#LR__2923
21f48     02 01 02 FD | 	qmul	_var01, _var03
21f4c     01 00 00 FF 
21f50     E8 17 06 F6 | 	mov	arg03, ##1000
21f54     19 FA 61 FD | 	getqy	result1
21f58     18 12 62 FD | 	getqx	arg01
21f5c     28 FA 61 FD | 	setq	result1
21f60     0B 13 12 FD | 	qdiv	arg01, arg03
21f64     18 12 62 FD | 	getqx	arg01
21f68     01 13 62 FA | 	addct1	arg01, _var02
21f6c     24 22 60 FD | 	waitct1
21f70                 | LR__2923
21f70                 | __system___waitms_ret
21f70     2D 00 64 FD | 	ret
21f74                 | 
21f74                 | __system___waitus
21f74     09 01 02 F6 | 	mov	_var01, arg01
21f78     1A 02 62 FD | 	getct	_var02
21f7c     14 04 06 FB | 	rdlong	_var03, #20
21f80     97 14 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
21f84                 | LR__2930
21f84     A1 07 00 FF 
21f88     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
21f8c     1C 00 90 CD |  if_b	jmp	#LR__2932
21f90     02 03 02 F1 | 	add	_var02, _var03
21f94     01 13 02 F6 | 	mov	arg01, _var02
21f98     00 12 66 FA | 	addct1	arg01, #0
21f9c     24 22 60 FD | 	waitct1
21fa0     A1 07 00 FF 
21fa4     40 00 86 F1 | 	sub	_var01, ##1000000
21fa8     D8 FF 9F FD | 	jmp	#LR__2930
21fac                 | LR__2931
21fac                 | LR__2932
21fac     01 00 56 F2 | 	cmps	_var01, #1 wc
21fb0     28 00 90 CD |  if_b	jmp	#LR__2933
21fb4     02 01 02 FD | 	qmul	_var01, _var03
21fb8     A1 07 00 FF 
21fbc     40 16 06 F6 | 	mov	arg03, ##1000000
21fc0     19 FA 61 FD | 	getqy	result1
21fc4     18 12 62 FD | 	getqx	arg01
21fc8     28 FA 61 FD | 	setq	result1
21fcc     0B 13 12 FD | 	qdiv	arg01, arg03
21fd0     18 FA 61 FD | 	getqx	result1
21fd4     FD 02 62 FA | 	addct1	_var02, result1
21fd8     24 22 60 FD | 	waitct1
21fdc                 | LR__2933
21fdc                 | __system___waitus_ret
21fdc     2D 00 64 FD | 	ret
21fe0                 | 
21fe0                 | __system___mount
21fe0     0B 4A 05 F6 | 	mov	COUNT_, #11
21fe4     A8 00 A0 FD | 	call	#pushregs_
21fe8     09 27 02 F6 | 	mov	local01, arg01
21fec     0A 29 0A F6 | 	mov	local02, arg02 wz
21ff0     01 2A 66 F6 | 	neg	local03, #1
21ff4     01 FA 65 A6 |  if_e	neg	result1, #1
21ff8     98 02 90 AD |  if_e	jmp	#LR__2955
21ffc     13 FB C1 FA | 	rdbyte	result1, local01
22000     2F FA 0D F2 | 	cmp	result1, #47 wz
22004     28 00 90 5D |  if_ne	jmp	#LR__2942
22008     13 13 02 F6 | 	mov	arg01, local01
2200c     09 2D 02 F6 | 	mov	local04, arg01
22010     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
22014                 | LR__2940
22014     16 FB C9 FA | 	rdbyte	result1, local04 wz
22018     01 2C 06 51 |  if_ne	add	local04, #1
2201c     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
22020                 | LR__2941
22020     09 2D 82 F1 | 	sub	local04, arg01
22024     16 FB 01 F6 | 	mov	result1, local04
22028     10 FA 55 F2 | 	cmps	result1, #16 wc
2202c     14 00 90 CD |  if_b	jmp	#LR__2943
22030                 | LR__2942
22030     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22034     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
22038     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2203c     01 FA 65 F6 | 	neg	result1, #1
22040     50 02 90 FD | 	jmp	#LR__2955
22044                 | LR__2943
22044     00 2E 06 F6 | 	mov	local05, #0
22048                 | LR__2944
22048     04 2E 56 F2 | 	cmps	local05, #4 wc
2204c     B0 00 90 3D |  if_ae	jmp	#LR__2949
22050     17 13 02 F6 | 	mov	arg01, local05
22054     02 12 66 F0 | 	shl	arg01, #2
22058     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2205c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22060     09 FB 09 FB | 	rdlong	result1, arg01 wz
22064     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22068     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
2206c     17 2B 02 86 |  if_c_and_z	mov	local03, local05
22070     84 00 90 8D |  if_c_and_z	jmp	#LR__2948
22074     17 13 02 F6 | 	mov	arg01, local05
22078     02 12 66 F0 | 	shl	arg01, #2
2207c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22080     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22084     09 13 02 FB | 	rdlong	arg01, arg01
22088     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2208c     09 2D 02 F6 | 	mov	local04, arg01
22090     97 06 48 FB | 	callpa	#(@LR__2946-@LR__2945)>>2,fcache_load_ptr_
22094                 | LR__2945
22094     16 FB C9 FA | 	rdbyte	result1, local04 wz
22098     01 2C 06 51 |  if_ne	add	local04, #1
2209c     F4 FF 9F 5D |  if_ne	jmp	#LR__2945
220a0                 | LR__2946
220a0     09 2D 82 F1 | 	sub	local04, arg01
220a4     16 31 02 F6 | 	mov	local06, local04
220a8     18 13 02 F6 | 	mov	arg01, local06
220ac     13 13 02 F1 | 	add	arg01, local01
220b0     09 FB C1 FA | 	rdbyte	result1, arg01
220b4     2F FA 0D F2 | 	cmp	result1, #47 wz
220b8     18 33 02 56 |  if_ne	mov	local07, local06
220bc     13 33 02 51 |  if_ne	add	local07, local01
220c0     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
220c4     30 00 90 5D |  if_ne	jmp	#LR__2947
220c8     17 17 02 F6 | 	mov	arg03, local05
220cc     02 16 66 F0 | 	shl	arg03, #2
220d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
220d4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
220d8     0B 15 02 FB | 	rdlong	arg02, arg03
220dc     13 13 02 F6 | 	mov	arg01, local01
220e0     18 17 02 F6 | 	mov	arg03, local06
220e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
220e8     4C 51 B0 FD | 	call	#__system__strncmp
220ec     00 FA 0D F2 | 	cmp	result1, #0 wz
220f0     17 2B 02 A6 |  if_e	mov	local03, local05
220f4     08 00 90 AD |  if_e	jmp	#LR__2949
220f8                 | LR__2947
220f8                 | LR__2948
220f8     01 2E 06 F1 | 	add	local05, #1
220fc     48 FF 9F FD | 	jmp	#LR__2944
22100                 | LR__2949
22100     FF FF 7F FF 
22104     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
22108     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2210c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
22110     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22114     01 FA 65 A6 |  if_e	neg	result1, #1
22118     78 01 90 AD |  if_e	jmp	#LR__2955
2211c     15 2F 02 F6 | 	mov	local05, local03
22120     17 33 02 F6 | 	mov	local07, local05
22124     02 32 66 F0 | 	shl	local07, #2
22128     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2212c     F3 32 02 F1 | 	add	local07, ptr___system__dat__
22130     19 31 0A FB | 	rdlong	local06, local07 wz
22134     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
22138     58 00 90 AD |  if_e	jmp	#LR__2950
2213c     4C 30 06 F1 | 	add	local06, #76
22140     18 33 0A FB | 	rdlong	local07, local06 wz
22144     4C 30 86 F1 | 	sub	local06, #76
22148     48 00 90 AD |  if_e	jmp	#LR__2950
2214c     4C 30 06 F1 | 	add	local06, #76
22150     18 33 02 FB | 	rdlong	local07, local06
22154     19 2B 02 F6 | 	mov	local03, local07
22158     13 32 46 F7 | 	zerox	local07, #19
2215c     14 2A 46 F0 | 	shr	local03, #20
22160     02 2A 66 F0 | 	shl	local03, #2
22164     ED 2A 02 F1 | 	add	local03, __methods__
22168     15 2B 02 FB | 	rdlong	local03, local03
2216c     17 31 02 F6 | 	mov	local06, local05
22170     02 30 66 F0 | 	shl	local06, #2
22174     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22178     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2217c     18 13 02 FB | 	rdlong	arg01, local06
22180     F2 30 02 F6 | 	mov	local06, objptr
22184     19 E5 01 F6 | 	mov	objptr, local07
22188     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2218c     2D 2A 62 FD | 	call	local03
22190     18 E5 01 F6 | 	mov	objptr, local06
22194                 | LR__2950
22194     17 35 02 F6 | 	mov	local08, local05
22198     02 34 66 F0 | 	shl	local08, #2
2219c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
221a0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
221a4     1A 29 62 FC | 	wrlong	local02, local08
221a8     00 28 0E F2 | 	cmp	local02, #0 wz
221ac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
221b0     18 00 90 5D |  if_ne	jmp	#LR__2951
221b4     02 2E 66 F0 | 	shl	local05, #2
221b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
221bc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
221c0     17 01 68 FC | 	wrlong	#0, local05
221c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
221c8     C4 00 90 FD | 	jmp	#LR__2954
221cc                 | LR__2951
221cc     17 37 02 F6 | 	mov	local09, local05
221d0     04 36 66 F0 | 	shl	local09, #4
221d4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
221d8     F3 36 02 F1 | 	add	local09, ptr___system__dat__
221dc     1B 13 02 F6 | 	mov	arg01, local09
221e0     13 15 02 F6 | 	mov	arg02, local01
221e4     10 16 06 F6 | 	mov	arg03, #16
221e8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
221ec     9C 4F B0 FD | 	call	#__system__strncpy
221f0     48 28 06 F1 | 	add	local02, #72
221f4     14 35 0A FB | 	rdlong	local08, local02 wz
221f8     48 28 86 F1 | 	sub	local02, #72
221fc     7C 00 90 AD |  if_e	jmp	#LR__2953
22200     48 28 06 F1 | 	add	local02, #72
22204     14 35 02 FB | 	rdlong	local08, local02
22208     1A 39 02 F6 | 	mov	local10, local08
2220c     13 34 46 F7 | 	zerox	local08, #19
22210     14 38 46 F0 | 	shr	local10, #20
22214     02 38 66 F0 | 	shl	local10, #2
22218     ED 38 02 F1 | 	add	local10, __methods__
2221c     1C 39 02 FB | 	rdlong	local10, local10
22220     1B 13 02 F6 | 	mov	arg01, local09
22224     F2 3A 02 F6 | 	mov	local11, objptr
22228     1A E5 01 F6 | 	mov	objptr, local08
2222c     2D 38 62 FD | 	call	local10
22230     1D E5 01 F6 | 	mov	objptr, local11
22234     FD 12 0A F6 | 	mov	arg01, result1 wz
22238     40 00 90 AD |  if_e	jmp	#LR__2952
2223c     17 35 02 F6 | 	mov	local08, local05
22240     02 34 66 F0 | 	shl	local08, #2
22244     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22248     F3 34 02 F1 | 	add	local08, ptr___system__dat__
2224c     1A 01 68 FC | 	wrlong	#0, local08
22250     02 2E 66 F0 | 	shl	local05, #2
22254     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
22258     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2225c     17 01 68 FC | 	wrlong	#0, local05
22260     09 13 6A F6 | 	neg	arg01, arg01 wz
22264     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
22268     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2226c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22270     01 FA 65 56 |  if_ne	neg	result1, #1
22274     00 FA 05 A6 |  if_e	mov	result1, #0
22278     18 00 90 FD | 	jmp	#LR__2955
2227c                 | LR__2952
2227c                 | LR__2953
2227c     02 2E 66 F0 | 	shl	local05, #2
22280     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22284     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
22288     17 37 62 FC | 	wrlong	local09, local05
2228c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22290                 | LR__2954
22290     00 FA 05 F6 | 	mov	result1, #0
22294                 | LR__2955
22294     A7 F0 03 F6 | 	mov	ptra, fp
22298     B2 00 A0 FD | 	call	#popregs_
2229c                 | __system___mount_ret
2229c     2D 00 64 FD | 	ret
222a0                 | 
222a0                 | __system___chdir
222a0     00 4A 05 F6 | 	mov	COUNT_, #0
222a4     A8 00 A0 FD | 	call	#pushregs_
222a8     40 F0 07 F1 | 	add	ptra, #64
222ac     04 4E 05 F1 | 	add	fp, #4
222b0     A7 12 62 FC | 	wrlong	arg01, fp
222b4     04 4E 05 F1 | 	add	fp, #4
222b8     A7 14 02 F6 | 	mov	arg02, fp
222bc     08 4E 85 F1 | 	sub	fp, #8
222c0     AC 4A B0 FD | 	call	#__system__stat
222c4     3C 4E 05 F1 | 	add	fp, #60
222c8     A7 FA 61 FC | 	wrlong	result1, fp
222cc     3C 4E 85 F1 | 	sub	fp, #60
222d0     00 FA 0D F2 | 	cmp	result1, #0 wz
222d4     3C 4E 05 51 |  if_ne	add	fp, #60
222d8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
222dc     3C 4E 85 51 |  if_ne	sub	fp, #60
222e0     BC 00 90 5D |  if_ne	jmp	#LR__2962
222e4     10 4E 05 F1 | 	add	fp, #16
222e8     A7 12 02 FB | 	rdlong	arg01, fp
222ec     10 4E 85 F1 | 	sub	fp, #16
222f0     78 00 00 FF 
222f4     00 12 06 F5 | 	and	arg01, ##61440
222f8     08 00 00 FF 
222fc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
22300     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
22304     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
22308     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2230c     01 FA 65 56 |  if_ne	neg	result1, #1
22310     8C 00 90 5D |  if_ne	jmp	#LR__2962
22314     04 4E 05 F1 | 	add	fp, #4
22318     A7 16 02 FB | 	rdlong	arg03, fp
2231c     04 4E 85 F1 | 	sub	fp, #4
22320     0B 17 C2 FA | 	rdbyte	arg03, arg03
22324     2F 16 0E F2 | 	cmp	arg03, #47 wz
22328     24 00 90 5D |  if_ne	jmp	#LR__2960
2232c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22330     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22334     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22338     04 4E 05 F1 | 	add	fp, #4
2233c     A7 14 02 FB | 	rdlong	arg02, fp
22340     04 4E 85 F1 | 	sub	fp, #4
22344     00 17 06 F6 | 	mov	arg03, #256
22348     40 4E B0 FD | 	call	#__system__strncpy
2234c     4C 00 90 FD | 	jmp	#LR__2961
22350                 | LR__2960
22350     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22354     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22358     38 4E 05 F1 | 	add	fp, #56
2235c     A7 12 62 FC | 	wrlong	arg01, fp
22360     38 4E 85 F1 | 	sub	fp, #56
22364     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
22368     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2236c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22370     00 17 06 F6 | 	mov	arg03, #256
22374     14 4E B0 FD | 	call	#__system__strncpy
22378     38 4E 05 F1 | 	add	fp, #56
2237c     A7 12 02 FB | 	rdlong	arg01, fp
22380     34 4E 85 F1 | 	sub	fp, #52
22384     A7 14 02 FB | 	rdlong	arg02, fp
22388     04 4E 85 F1 | 	sub	fp, #4
2238c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22390     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
22394     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22398     10 00 B0 FD | 	call	#__system____getvfsforfile
2239c                 | LR__2961
2239c     00 FA 05 F6 | 	mov	result1, #0
223a0                 | LR__2962
223a0     A7 F0 03 F6 | 	mov	ptra, fp
223a4     B2 00 A0 FD | 	call	#popregs_
223a8                 | __system___chdir_ret
223a8     2D 00 64 FD | 	ret
223ac                 | 
223ac                 | __system____getvfsforfile
223ac     0E 4A 05 F6 | 	mov	COUNT_, #14
223b0     A8 00 A0 FD | 	call	#pushregs_
223b4     09 27 02 F6 | 	mov	local01, arg01
223b8     0A 29 02 F6 | 	mov	local02, arg02
223bc     0B 2B 02 F6 | 	mov	local03, arg03
223c0     97 10 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
223c4                 | LR__2970
223c4     14 FB C1 FA | 	rdbyte	result1, local02
223c8     2F FA 0D F2 | 	cmp	result1, #47 wz
223cc     01 28 06 A1 |  if_e	add	local02, #1
223d0     14 2D C2 AA |  if_e	rdbyte	local04, local02
223d4     01 28 86 A1 |  if_e	sub	local02, #1
223d8     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
223dc     01 28 06 A1 |  if_e	add	local02, #1
223e0     E0 FF 9F AD |  if_e	jmp	#LR__2970
223e4                 | LR__2971
223e4     14 2D C2 FA | 	rdbyte	local04, local02
223e8     2F 2C 0E F2 | 	cmp	local04, #47 wz
223ec     14 00 90 5D |  if_ne	jmp	#LR__2972
223f0     13 13 02 F6 | 	mov	arg01, local01
223f4     14 15 02 F6 | 	mov	arg02, local02
223f8     00 17 06 F6 | 	mov	arg03, #256
223fc     8C 4D B0 FD | 	call	#__system__strncpy
22400     7C 00 90 FD | 	jmp	#LR__2974
22404                 | LR__2972
22404     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22408     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2240c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22410     13 13 02 F6 | 	mov	arg01, local01
22414     00 17 06 F6 | 	mov	arg03, #256
22418     70 4D B0 FD | 	call	#__system__strncpy
2241c     14 2D CA FA | 	rdbyte	local04, local02 wz
22420     5C 00 90 AD |  if_e	jmp	#LR__2973
22424     14 2D C2 FA | 	rdbyte	local04, local02
22428     2E 2C 0E F2 | 	cmp	local04, #46 wz
2242c     01 28 06 A1 |  if_e	add	local02, #1
22430     14 2F C2 AA |  if_e	rdbyte	local05, local02
22434     01 28 86 A1 |  if_e	sub	local02, #1
22438     17 31 02 A6 |  if_e	mov	local06, local05
2243c     07 30 4E A7 |  if_e	zerox	local06, #7 wz
22440     3C 00 90 AD |  if_e	jmp	#LR__2973
22444     13 2F C2 FA | 	rdbyte	local05, local01
22448     2F 2E 0E F2 | 	cmp	local05, #47 wz
2244c     01 26 06 A1 |  if_e	add	local01, #1
22450     13 2D C2 AA |  if_e	rdbyte	local04, local01
22454     01 26 86 A1 |  if_e	sub	local01, #1
22458     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
2245c     8B 01 00 5F 
22460     24 15 06 56 |  if_ne	mov	arg02, ##@LR__5100
22464     13 13 02 56 |  if_ne	mov	arg01, local01
22468     00 17 06 56 |  if_ne	mov	arg03, #256
2246c     68 4D B0 5D |  if_ne	call	#__system__strncat
22470     13 13 02 F6 | 	mov	arg01, local01
22474     14 15 02 F6 | 	mov	arg02, local02
22478     00 17 06 F6 | 	mov	arg03, #256
2247c     58 4D B0 FD | 	call	#__system__strncat
22480                 | LR__2973
22480                 | LR__2974
22480     13 13 02 F6 | 	mov	arg01, local01
22484     10 4F B0 FD | 	call	#__system___normalizeName
22488     13 2D CA FA | 	rdbyte	local04, local01 wz
2248c     1C 00 90 AD |  if_e	jmp	#LR__2975
22490     13 2D C2 FA | 	rdbyte	local04, local01
22494     2F 2C 0E F2 | 	cmp	local04, #47 wz
22498     01 26 06 A1 |  if_e	add	local01, #1
2249c     13 31 C2 AA |  if_e	rdbyte	local06, local01
224a0     01 26 86 A1 |  if_e	sub	local01, #1
224a4     00 30 4E A2 |  if_e	cmps	local06, #0 wz
224a8     18 00 90 5D |  if_ne	jmp	#LR__2976
224ac                 | LR__2975
224ac     01 00 00 FF 
224b0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
224b4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
224b8     01 00 00 FF 
224bc     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
224c0     EC 01 90 FD | 	jmp	#LR__2990
224c4                 | LR__2976
224c4     00 32 06 F6 | 	mov	local07, #0
224c8                 | LR__2977
224c8     04 32 56 F2 | 	cmps	local07, #4 wc
224cc     CC 01 90 3D |  if_ae	jmp	#LR__2989
224d0     19 31 02 F6 | 	mov	local06, local07
224d4     02 30 66 F0 | 	shl	local06, #2
224d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
224dc     F3 30 02 F1 | 	add	local06, ptr___system__dat__
224e0     18 31 0A FB | 	rdlong	local06, local06 wz
224e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
224e8     A8 01 90 AD |  if_e	jmp	#LR__2988
224ec     19 2D 02 F6 | 	mov	local04, local07
224f0     02 2C 66 F0 | 	shl	local04, #2
224f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
224f8     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
224fc     16 13 02 FB | 	rdlong	arg01, local04
22500     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22504     09 35 02 F6 | 	mov	local08, arg01
22508     97 06 48 FB | 	callpa	#(@LR__2979-@LR__2978)>>2,fcache_load_ptr_
2250c                 | LR__2978
2250c     1A FB C9 FA | 	rdbyte	result1, local08 wz
22510     01 34 06 51 |  if_ne	add	local08, #1
22514     F4 FF 9F 5D |  if_ne	jmp	#LR__2978
22518                 | LR__2979
22518     09 35 82 F1 | 	sub	local08, arg01
2251c     1A 37 02 F6 | 	mov	local09, local08
22520     1B 2D 02 F6 | 	mov	local04, local09
22524     13 2D 02 F1 | 	add	local04, local01
22528     16 31 C2 FA | 	rdbyte	local06, local04
2252c     2F 30 0E F2 | 	cmp	local06, #47 wz
22530     1B 39 02 56 |  if_ne	mov	local10, local09
22534     13 39 02 51 |  if_ne	add	local10, local01
22538     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
2253c     54 01 90 5D |  if_ne	jmp	#LR__2987
22540     19 17 02 F6 | 	mov	arg03, local07
22544     02 16 66 F0 | 	shl	arg03, #2
22548     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2254c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
22550     0B 15 02 FB | 	rdlong	arg02, arg03
22554     1B 17 02 F6 | 	mov	arg03, local09
22558     13 13 02 F6 | 	mov	arg01, local01
2255c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22560     D4 4C B0 FD | 	call	#__system__strncmp
22564     00 FA 4D F2 | 	cmps	result1, #0 wz
22568     28 01 90 5D |  if_ne	jmp	#LR__2987
2256c     19 3B 02 F6 | 	mov	local11, local07
22570     02 3A 66 F0 | 	shl	local11, #2
22574     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22578     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
2257c     1D 3D 02 FB | 	rdlong	local12, local11
22580     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
22584     97 22 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
22588                 | LR__2980
22588     1B 31 02 F6 | 	mov	local06, local09
2258c     01 30 06 F1 | 	add	local06, #1
22590     13 31 02 F1 | 	add	local06, local01
22594     18 3B C2 FA | 	rdbyte	local11, local06
22598     2E 3A 0E F2 | 	cmp	local11, #46 wz
2259c     2C 00 90 5D |  if_ne	jmp	#LR__2982
225a0     1B 3B 02 F6 | 	mov	local11, local09
225a4     02 3A 06 F1 | 	add	local11, #2
225a8     13 3B 02 F1 | 	add	local11, local01
225ac     1D 39 C2 FA | 	rdbyte	local10, local11
225b0     2F 38 0E F2 | 	cmp	local10, #47 wz
225b4     1B 3F 02 56 |  if_ne	mov	local13, local09
225b8     02 3E 06 51 |  if_ne	add	local13, #2
225bc     13 3F 02 51 |  if_ne	add	local13, local01
225c0     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
225c4     01 36 06 A1 |  if_e	add	local09, #1
225c8     BC FF 9F AD |  if_e	jmp	#LR__2980
225cc                 | LR__2981
225cc                 | LR__2982
225cc     00 2A 0E F2 | 	cmp	local03, #0 wz
225d0     15 13 02 56 |  if_ne	mov	arg01, local03
225d4     13 15 02 56 |  if_ne	mov	arg02, local01
225d8     00 17 06 56 |  if_ne	mov	arg03, #256
225dc     AC 4B B0 5D |  if_ne	call	#__system__strncpy
225e0     13 15 02 F6 | 	mov	arg02, local01
225e4     1B 15 02 F1 | 	add	arg02, local09
225e8     01 14 06 F1 | 	add	arg02, #1
225ec     13 13 02 F6 | 	mov	arg01, local01
225f0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
225f4     13 13 02 F6 | 	mov	arg01, local01
225f8     09 35 02 F6 | 	mov	local08, arg01
225fc     97 06 48 FB | 	callpa	#(@LR__2984-@LR__2983)>>2,fcache_load_ptr_
22600                 | LR__2983
22600     1A FB C9 FA | 	rdbyte	result1, local08 wz
22604     01 34 06 51 |  if_ne	add	local08, #1
22608     F4 FF 9F 5D |  if_ne	jmp	#LR__2983
2260c                 | LR__2984
2260c     09 35 82 F1 | 	sub	local08, arg01
22610     1A 37 02 F6 | 	mov	local09, local08
22614                 | LR__2985
22614     01 36 56 F2 | 	cmps	local09, #1 wc
22618     70 00 90 CD |  if_b	jmp	#LR__2986
2261c     1B 2D 02 F6 | 	mov	local04, local09
22620     13 2D 02 F1 | 	add	local04, local01
22624     16 3B C2 FA | 	rdbyte	local11, local04
22628     2F 3A 0E F2 | 	cmp	local11, #47 wz
2262c     1B 3B 02 A6 |  if_e	mov	local11, local09
22630     13 3B 02 A1 |  if_e	add	local11, local01
22634     1D 01 48 AC |  if_e	wrbyte	#0, local11
22638     01 36 86 A1 |  if_e	sub	local09, #1
2263c     D4 FF 9F AD |  if_e	jmp	#LR__2985
22640     1B 2D 02 F6 | 	mov	local04, local09
22644     13 2D 02 F1 | 	add	local04, local01
22648     16 3B C2 FA | 	rdbyte	local11, local04
2264c     2E 3A 0E F2 | 	cmp	local11, #46 wz
22650     38 00 90 5D |  if_ne	jmp	#LR__2986
22654     02 36 56 F2 | 	cmps	local09, #2 wc
22658     30 00 90 CD |  if_b	jmp	#LR__2986
2265c     1B 41 02 F6 | 	mov	local14, local09
22660     01 40 86 F1 | 	sub	local14, #1
22664     13 41 02 F1 | 	add	local14, local01
22668     20 2F C2 FA | 	rdbyte	local05, local14
2266c     2F 2E 0E F2 | 	cmp	local05, #47 wz
22670     18 00 90 5D |  if_ne	jmp	#LR__2986
22674     1B 2D 02 F6 | 	mov	local04, local09
22678     01 2C 86 F1 | 	sub	local04, #1
2267c     13 2D 02 F1 | 	add	local04, local01
22680     16 01 48 FC | 	wrbyte	#0, local04
22684     02 36 86 F1 | 	sub	local09, #2
22688     88 FF 9F FD | 	jmp	#LR__2985
2268c                 | LR__2986
2268c     1E FB 01 F6 | 	mov	result1, local12
22690     1C 00 90 FD | 	jmp	#LR__2990
22694                 | LR__2987
22694                 | LR__2988
22694     01 32 06 F1 | 	add	local07, #1
22698     2C FE 9F FD | 	jmp	#LR__2977
2269c                 | LR__2989
2269c     02 00 00 FF 
226a0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
226a4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
226a8     02 00 00 FF 
226ac     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
226b0                 | LR__2990
226b0     A7 F0 03 F6 | 	mov	ptra, fp
226b4     B2 00 A0 FD | 	call	#popregs_
226b8                 | __system____getvfsforfile_ret
226b8     2D 00 64 FD | 	ret
226bc                 | 
226bc                 | __system___basic_open
226bc     05 4A 05 F6 | 	mov	COUNT_, #5
226c0     A8 00 A0 FD | 	call	#pushregs_
226c4     0A 27 02 F6 | 	mov	local01, arg02
226c8     0B 29 02 F6 | 	mov	local02, arg03
226cc     0C 2B 02 F6 | 	mov	local03, arg04
226d0     00 2C 06 F6 | 	mov	local04, #0
226d4     8C 4A B0 FD | 	call	#__system____getftab
226d8     FD 2E 0A F6 | 	mov	local05, result1 wz
226dc     18 00 90 5D |  if_ne	jmp	#LR__3000
226e0     EE 12 02 F6 | 	mov	arg01, abortchain
226e4     0C 14 06 F6 | 	mov	arg02, #12
226e8     01 16 06 F6 | 	mov	arg03, #1
226ec     DA 00 A0 FD | 	call	#__longjmp
226f0     01 FA 65 F6 | 	neg	result1, #1
226f4     14 01 90 FD | 	jmp	#LR__3009
226f8                 | LR__3000
226f8     08 2E 06 F1 | 	add	local05, #8
226fc     17 FB 09 FB | 	rdlong	result1, local05 wz
22700     08 2E 86 F1 | 	sub	local05, #8
22704     17 13 02 56 |  if_ne	mov	arg01, local05
22708     EC 40 B0 5D |  if_ne	call	#__system___closeraw
2270c     00 26 0E F2 | 	cmp	local01, #0 wz
22710     00 28 0E A2 |  if_e	cmp	local02, #0 wz
22714     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
22718     3C 00 90 AD |  if_e	jmp	#LR__3002
2271c     0C 12 06 F6 | 	mov	arg01, #12
22720     D4 35 B0 FD | 	call	#__system___gc_alloc_managed
22724     FD 2C 0A F6 | 	mov	local04, result1 wz
22728     18 00 90 5D |  if_ne	jmp	#LR__3001
2272c     EE 12 02 F6 | 	mov	arg01, abortchain
22730     07 14 06 F6 | 	mov	arg02, #7
22734     01 16 06 F6 | 	mov	arg03, #1
22738     DA 00 A0 FD | 	call	#__longjmp
2273c     01 FA 65 F6 | 	neg	result1, #1
22740     C8 00 90 FD | 	jmp	#LR__3009
22744                 | LR__3001
22744     16 01 68 FC | 	wrlong	#0, local04
22748     04 2C 06 F1 | 	add	local04, #4
2274c     16 01 68 FC | 	wrlong	#0, local04
22750     04 2C 86 F1 | 	sub	local04, #4
22754     17 2D 62 FC | 	wrlong	local04, local05
22758                 | LR__3002
22758     00 26 0E F2 | 	cmp	local01, #0 wz
2275c     20 00 90 AD |  if_e	jmp	#LR__3003
22760     16 27 62 FC | 	wrlong	local01, local04
22764     16 FB 01 F6 | 	mov	result1, local04
22768     00 A0 04 FF 
2276c     00 FA 45 F5 | 	or	result1, ##155189248
22770     1C 2E 06 F1 | 	add	local05, #28
22774     17 FB 61 FC | 	wrlong	result1, local05
22778     1C 2E 86 F1 | 	sub	local05, #28
2277c     0C 00 90 FD | 	jmp	#LR__3004
22780                 | LR__3003
22780     1C 2E 06 F1 | 	add	local05, #28
22784     17 01 68 FC | 	wrlong	#0, local05
22788     1C 2E 86 F1 | 	sub	local05, #28
2278c                 | LR__3004
2278c     00 28 0E F2 | 	cmp	local02, #0 wz
22790     28 00 90 AD |  if_e	jmp	#LR__3005
22794     04 2C 06 F1 | 	add	local04, #4
22798     16 29 62 FC | 	wrlong	local02, local04
2279c     04 2C 86 F1 | 	sub	local04, #4
227a0     16 FB 01 F6 | 	mov	result1, local04
227a4     00 A8 04 FF 
227a8     00 FA 45 F5 | 	or	result1, ##156237824
227ac     20 2E 06 F1 | 	add	local05, #32
227b0     17 FB 61 FC | 	wrlong	result1, local05
227b4     20 2E 86 F1 | 	sub	local05, #32
227b8     0C 00 90 FD | 	jmp	#LR__3006
227bc                 | LR__3005
227bc     20 2E 06 F1 | 	add	local05, #32
227c0     17 01 68 FC | 	wrlong	#0, local05
227c4     20 2E 86 F1 | 	sub	local05, #32
227c8                 | LR__3006
227c8     00 2A 0E F2 | 	cmp	local03, #0 wz
227cc     24 00 90 AD |  if_e	jmp	#LR__3007
227d0     08 2C 06 F1 | 	add	local04, #8
227d4     16 2B 62 FC | 	wrlong	local03, local04
227d8     08 2C 86 F1 | 	sub	local04, #8
227dc     00 B0 04 FF 
227e0     00 2C 46 F5 | 	or	local04, ##157286400
227e4     24 2E 06 F1 | 	add	local05, #36
227e8     17 2D 62 FC | 	wrlong	local04, local05
227ec     24 2E 86 F1 | 	sub	local05, #36
227f0     0C 00 90 FD | 	jmp	#LR__3008
227f4                 | LR__3007
227f4     24 2E 06 F1 | 	add	local05, #36
227f8     17 01 68 FC | 	wrlong	#0, local05
227fc     24 2E 86 F1 | 	sub	local05, #36
22800                 | LR__3008
22800     08 2E 06 F1 | 	add	local05, #8
22804     17 0F 68 FC | 	wrlong	#7, local05
22808     00 FA 05 F6 | 	mov	result1, #0
2280c                 | LR__3009
2280c     A7 F0 03 F6 | 	mov	ptra, fp
22810     B2 00 A0 FD | 	call	#popregs_
22814                 | __system___basic_open_ret
22814     2D 00 64 FD | 	ret
22818                 | 
22818                 | __system___basic_open_string
22818     04 4A 05 F6 | 	mov	COUNT_, #4
2281c     A8 00 A0 FD | 	call	#pushregs_
22820     0A 27 02 F6 | 	mov	local01, arg02
22824     0B 29 02 F6 | 	mov	local02, arg03
22828     38 49 B0 FD | 	call	#__system____getftab
2282c     FD 2A 0A F6 | 	mov	local03, result1 wz
22830     18 00 90 5D |  if_ne	jmp	#LR__3010
22834     EE 12 02 F6 | 	mov	arg01, abortchain
22838     0C 14 06 F6 | 	mov	arg02, #12
2283c     01 16 06 F6 | 	mov	arg03, #1
22840     DA 00 A0 FD | 	call	#__longjmp
22844     01 FA 65 F6 | 	neg	result1, #1
22848     58 00 90 FD | 	jmp	#LR__3012
2284c                 | LR__3010
2284c     08 2A 06 F1 | 	add	local03, #8
22850     15 19 0A FB | 	rdlong	arg04, local03 wz
22854     08 2A 86 F1 | 	sub	local03, #8
22858     15 13 02 56 |  if_ne	mov	arg01, local03
2285c     98 3F B0 5D |  if_ne	call	#__system___closeraw
22860     13 15 02 F6 | 	mov	arg02, local01
22864     14 17 02 F6 | 	mov	arg03, local02
22868     15 13 02 F6 | 	mov	arg01, local03
2286c     B6 19 06 F6 | 	mov	arg04, #438
22870     80 3C B0 FD | 	call	#__system___openraw
22874     FD 2C 02 F6 | 	mov	local04, result1
22878     00 2C 56 F2 | 	cmps	local04, #0 wc
2287c     20 00 90 3D |  if_ae	jmp	#LR__3011
22880     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22884     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
22888     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2288c     EE 12 02 F6 | 	mov	arg01, abortchain
22890     01 16 06 F6 | 	mov	arg03, #1
22894     DA 00 A0 FD | 	call	#__longjmp
22898     01 FA 65 F6 | 	neg	result1, #1
2289c     04 00 90 FD | 	jmp	#LR__3012
228a0                 | LR__3011
228a0     16 FB 01 F6 | 	mov	result1, local04
228a4                 | LR__3012
228a4     A7 F0 03 F6 | 	mov	ptra, fp
228a8     B2 00 A0 FD | 	call	#popregs_
228ac                 | __system___basic_open_string_ret
228ac     2D 00 64 FD | 	ret
228b0                 | 
228b0                 | __system___basic_print_char
228b0     03 4A 05 F6 | 	mov	COUNT_, #3
228b4     A8 00 A0 FD | 	call	#pushregs_
228b8     0A 27 02 F6 | 	mov	local01, arg02
228bc     F8 4F B0 FD | 	call	#__system___gettxfunc
228c0     FD 28 0A F6 | 	mov	local02, result1 wz
228c4     00 FA 05 A6 |  if_e	mov	result1, #0
228c8     30 00 90 AD |  if_e	jmp	#LR__3020
228cc     14 2B 02 F6 | 	mov	local03, local02
228d0     13 28 46 F7 | 	zerox	local02, #19
228d4     14 2A 46 F0 | 	shr	local03, #20
228d8     02 2A 66 F0 | 	shl	local03, #2
228dc     ED 2A 02 F1 | 	add	local03, __methods__
228e0     15 2B 02 FB | 	rdlong	local03, local03
228e4     13 13 02 F6 | 	mov	arg01, local01
228e8     F2 26 02 F6 | 	mov	local01, objptr
228ec     14 E5 01 F6 | 	mov	objptr, local02
228f0     2D 2A 62 FD | 	call	local03
228f4     13 E5 01 F6 | 	mov	objptr, local01
228f8     01 FA 05 F6 | 	mov	result1, #1
228fc                 | LR__3020
228fc     A7 F0 03 F6 | 	mov	ptra, fp
22900     B2 00 A0 FD | 	call	#popregs_
22904                 | __system___basic_print_char_ret
22904     2D 00 64 FD | 	ret
22908                 | 
22908                 | __system___basic_print_string
22908     03 4A 05 F6 | 	mov	COUNT_, #3
2290c     A8 00 A0 FD | 	call	#pushregs_
22910     0A 27 02 F6 | 	mov	local01, arg02
22914     0B 29 02 F6 | 	mov	local02, arg03
22918     9C 4F B0 FD | 	call	#__system___gettxfunc
2291c     FD 2A 0A F6 | 	mov	local03, result1 wz
22920     00 FA 05 A6 |  if_e	mov	result1, #0
22924     18 00 90 AD |  if_e	jmp	#LR__3030
22928     00 26 0E F2 | 	cmp	local01, #0 wz
2292c     00 FA 05 A6 |  if_e	mov	result1, #0
22930     15 13 02 56 |  if_ne	mov	arg01, local03
22934     14 15 02 56 |  if_ne	mov	arg02, local02
22938     13 17 02 56 |  if_ne	mov	arg03, local01
2293c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
22940                 | LR__3030
22940     A7 F0 03 F6 | 	mov	ptra, fp
22944     B2 00 A0 FD | 	call	#popregs_
22948                 | __system___basic_print_string_ret
22948     2D 00 64 FD | 	ret
2294c                 | 
2294c                 | __system___basic_print_integer
2294c     04 4A 05 F6 | 	mov	COUNT_, #4
22950     A8 00 A0 FD | 	call	#pushregs_
22954     0A 27 02 F6 | 	mov	local01, arg02
22958     0B 29 02 F6 | 	mov	local02, arg03
2295c     0C 2B 02 F6 | 	mov	local03, arg04
22960     54 4F B0 FD | 	call	#__system___gettxfunc
22964     FD 2C 0A F6 | 	mov	local04, result1 wz
22968     00 FA 05 A6 |  if_e	mov	result1, #0
2296c     16 13 02 56 |  if_ne	mov	arg01, local04
22970     14 15 02 56 |  if_ne	mov	arg02, local02
22974     13 17 02 56 |  if_ne	mov	arg03, local01
22978     15 19 02 56 |  if_ne	mov	arg04, local03
2297c     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
22980     A7 F0 03 F6 | 	mov	ptra, fp
22984     B2 00 A0 FD | 	call	#popregs_
22988                 | __system___basic_print_integer_ret
22988     2D 00 64 FD | 	ret
2298c                 | 
2298c                 | __system___basic_print_unsigned
2298c     03 4A 05 F6 | 	mov	COUNT_, #3
22990     A8 00 A0 FD | 	call	#pushregs_
22994     0A 27 02 F6 | 	mov	local01, arg02
22998     0B 29 02 F6 | 	mov	local02, arg03
2299c     0C 2B 02 F6 | 	mov	local03, arg04
229a0     14 4F B0 FD | 	call	#__system___gettxfunc
229a4     FD 12 0A F6 | 	mov	arg01, result1 wz
229a8     00 FA 05 A6 |  if_e	mov	result1, #0
229ac     3A 28 26 54 |  if_ne	bith	local02, #58
229b0     14 15 02 56 |  if_ne	mov	arg02, local02
229b4     13 17 02 56 |  if_ne	mov	arg03, local01
229b8     15 19 02 56 |  if_ne	mov	arg04, local03
229bc     74 02 B0 5D |  if_ne	call	#__system___fmtnum
229c0     A7 F0 03 F6 | 	mov	ptra, fp
229c4     B2 00 A0 FD | 	call	#popregs_
229c8                 | __system___basic_print_unsigned_ret
229c8     2D 00 64 FD | 	ret
229cc                 | 
229cc                 | __system___basic_get_char
229cc     03 4A 05 F6 | 	mov	COUNT_, #3
229d0     A8 00 A0 FD | 	call	#pushregs_
229d4     24 4F B0 FD | 	call	#__system___getrxfunc
229d8     FD 26 0A F6 | 	mov	local01, result1 wz
229dc     01 FA 65 A6 |  if_e	neg	result1, #1
229e0     28 00 90 AD |  if_e	jmp	#LR__3040
229e4     13 29 02 F6 | 	mov	local02, local01
229e8     13 26 46 F7 | 	zerox	local01, #19
229ec     14 28 46 F0 | 	shr	local02, #20
229f0     02 28 66 F0 | 	shl	local02, #2
229f4     ED 28 02 F1 | 	add	local02, __methods__
229f8     14 29 02 FB | 	rdlong	local02, local02
229fc     F2 2A 02 F6 | 	mov	local03, objptr
22a00     13 E5 01 F6 | 	mov	objptr, local01
22a04     2D 28 62 FD | 	call	local02
22a08     15 E5 01 F6 | 	mov	objptr, local03
22a0c                 | LR__3040
22a0c     A7 F0 03 F6 | 	mov	ptra, fp
22a10     B2 00 A0 FD | 	call	#popregs_
22a14                 | __system___basic_get_char_ret
22a14     2D 00 64 FD | 	ret
22a18                 | 
22a18                 | __system___basic_put
22a18     04 4A 05 F6 | 	mov	COUNT_, #4
22a1c     A8 00 A0 FD | 	call	#pushregs_
22a20     0D 27 02 F6 | 	mov	local01, arg05
22a24     13 19 02 FD | 	qmul	arg04, local01
22a28     09 29 02 F6 | 	mov	local02, arg01
22a2c     0B 2B 02 F6 | 	mov	local03, arg03
22a30     00 14 0E F2 | 	cmp	arg02, #0 wz
22a34     01 14 86 51 |  if_ne	sub	arg02, #1
22a38     14 13 02 56 |  if_ne	mov	arg01, local02
22a3c     00 16 06 56 |  if_ne	mov	arg03, #0
22a40     18 2C 62 FD | 	getqx	local04
22a44     A4 44 B0 5D |  if_ne	call	#__system__lseek
22a48     15 15 02 F6 | 	mov	arg02, local03
22a4c     16 17 02 F6 | 	mov	arg03, local04
22a50     14 13 02 F6 | 	mov	arg01, local02
22a54     E0 43 B0 FD | 	call	#__system__write
22a58     FD 2C 02 F6 | 	mov	local04, result1
22a5c     01 2C 56 F2 | 	cmps	local04, #1 wc
22a60     10 00 90 CD |  if_b	jmp	#LR__3050
22a64     16 89 02 F6 | 	mov	muldiva_, local04
22a68     13 8B 02 F6 | 	mov	muldivb_, local01
22a6c     BA 00 A0 FD | 	call	#divide_
22a70     45 2D 02 F6 | 	mov	local04, muldivb_
22a74                 | LR__3050
22a74     16 FB 01 F6 | 	mov	result1, local04
22a78     A7 F0 03 F6 | 	mov	ptra, fp
22a7c     B2 00 A0 FD | 	call	#popregs_
22a80                 | __system___basic_put_ret
22a80     2D 00 64 FD | 	ret
22a84                 | 
22a84                 | __system___basic_get
22a84     04 4A 05 F6 | 	mov	COUNT_, #4
22a88     A8 00 A0 FD | 	call	#pushregs_
22a8c     0D 27 02 F6 | 	mov	local01, arg05
22a90     13 19 02 FD | 	qmul	arg04, local01
22a94     09 29 02 F6 | 	mov	local02, arg01
22a98     0B 2B 02 F6 | 	mov	local03, arg03
22a9c     00 14 0E F2 | 	cmp	arg02, #0 wz
22aa0     01 14 86 51 |  if_ne	sub	arg02, #1
22aa4     14 13 02 56 |  if_ne	mov	arg01, local02
22aa8     00 16 06 56 |  if_ne	mov	arg03, #0
22aac     18 2C 62 FD | 	getqx	local04
22ab0     38 44 B0 5D |  if_ne	call	#__system__lseek
22ab4     15 15 02 F6 | 	mov	arg02, local03
22ab8     16 17 02 F6 | 	mov	arg03, local04
22abc     14 13 02 F6 | 	mov	arg01, local02
22ac0     B0 43 B0 FD | 	call	#__system__read
22ac4     FD 2C 02 F6 | 	mov	local04, result1
22ac8     01 2C 56 F2 | 	cmps	local04, #1 wc
22acc     10 00 90 CD |  if_b	jmp	#LR__3060
22ad0     16 89 02 F6 | 	mov	muldiva_, local04
22ad4     13 8B 02 F6 | 	mov	muldivb_, local01
22ad8     BA 00 A0 FD | 	call	#divide_
22adc     45 2D 02 F6 | 	mov	local04, muldivb_
22ae0                 | LR__3060
22ae0     16 FB 01 F6 | 	mov	result1, local04
22ae4     A7 F0 03 F6 | 	mov	ptra, fp
22ae8     B2 00 A0 FD | 	call	#popregs_
22aec                 | __system___basic_get_ret
22aec     2D 00 64 FD | 	ret
22af0                 | 
22af0                 | __system___fmtchar
22af0     00 4A 05 F6 | 	mov	COUNT_, #0
22af4     A8 00 A0 FD | 	call	#pushregs_
22af8     10 F0 07 F1 | 	add	ptra, #16
22afc     04 4E 05 F1 | 	add	fp, #4
22b00     A7 12 62 FC | 	wrlong	arg01, fp
22b04     04 4E 05 F1 | 	add	fp, #4
22b08     A7 14 62 FC | 	wrlong	arg02, fp
22b0c     04 4E 05 F1 | 	add	fp, #4
22b10     A7 16 62 FC | 	wrlong	arg03, fp
22b14     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
22b18     A7 16 62 FC | 	wrlong	arg03, fp
22b1c     08 4E 85 F1 | 	sub	fp, #8
22b20     A7 12 02 FB | 	rdlong	arg01, fp
22b24     04 4E 05 F1 | 	add	fp, #4
22b28     A7 14 02 FB | 	rdlong	arg02, fp
22b2c     04 4E 05 F1 | 	add	fp, #4
22b30     A7 16 02 F6 | 	mov	arg03, fp
22b34     0C 4E 85 F1 | 	sub	fp, #12
22b38     0C 00 B0 FD | 	call	#__system___fmtstr
22b3c     A7 F0 03 F6 | 	mov	ptra, fp
22b40     B2 00 A0 FD | 	call	#popregs_
22b44                 | __system___fmtchar_ret
22b44     2D 00 64 FD | 	ret
22b48                 | 
22b48                 | __system___fmtstr
22b48     09 4A 05 F6 | 	mov	COUNT_, #9
22b4c     A8 00 A0 FD | 	call	#pushregs_
22b50     09 27 02 F6 | 	mov	local01, arg01
22b54     0A 29 02 F6 | 	mov	local02, arg02
22b58     0B 2B 02 F6 | 	mov	local03, arg03
22b5c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
22b60     15 13 02 F6 | 	mov	arg01, local03
22b64     09 2D 02 F6 | 	mov	local04, arg01
22b68     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
22b6c                 | LR__3070
22b6c     16 FB C9 FA | 	rdbyte	result1, local04 wz
22b70     01 2C 06 51 |  if_ne	add	local04, #1
22b74     F4 FF 9F 5D |  if_ne	jmp	#LR__3070
22b78                 | LR__3071
22b78     09 2D 82 F1 | 	sub	local04, arg01
22b7c     00 18 0E F2 | 	cmp	arg04, #0 wz
22b80     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
22b84     14 15 02 F6 | 	mov	arg02, local02
22b88     16 17 02 F6 | 	mov	arg03, local04
22b8c     13 13 02 F6 | 	mov	arg01, local01
22b90     02 18 06 F6 | 	mov	arg04, #2
22b94     C0 49 B0 FD | 	call	#__system___fmtpad
22b98     FD 2E 02 F6 | 	mov	local05, result1
22b9c     00 2E 56 F2 | 	cmps	local05, #0 wc
22ba0     17 FB 01 C6 |  if_b	mov	result1, local05
22ba4     80 00 90 CD |  if_b	jmp	#LR__3074
22ba8     01 2C 56 F2 | 	cmps	local04, #1 wc
22bac     50 00 90 CD |  if_b	jmp	#LR__3073
22bb0     16 31 02 F6 | 	mov	local06, local04
22bb4                 | LR__3072
22bb4     13 33 02 F6 | 	mov	local07, local01
22bb8     13 35 02 F6 | 	mov	local08, local01
22bbc     13 32 46 F7 | 	zerox	local07, #19
22bc0     14 34 46 F0 | 	shr	local08, #20
22bc4     02 34 66 F0 | 	shl	local08, #2
22bc8     ED 34 02 F1 | 	add	local08, __methods__
22bcc     1A 35 02 FB | 	rdlong	local08, local08
22bd0     15 13 C2 FA | 	rdbyte	arg01, local03
22bd4     F2 36 02 F6 | 	mov	local09, objptr
22bd8     19 E5 01 F6 | 	mov	objptr, local07
22bdc     01 2A 06 F1 | 	add	local03, #1
22be0     2D 34 62 FD | 	call	local08
22be4     1B E5 01 F6 | 	mov	objptr, local09
22be8     FD 36 02 F6 | 	mov	local09, result1
22bec     00 36 56 F2 | 	cmps	local09, #0 wc
22bf0     1B FB 01 C6 |  if_b	mov	result1, local09
22bf4     30 00 90 CD |  if_b	jmp	#LR__3074
22bf8     1B 2F 02 F1 | 	add	local05, local09
22bfc     ED 31 6E FB | 	djnz	local06, #LR__3072
22c00                 | LR__3073
22c00     14 15 02 F6 | 	mov	arg02, local02
22c04     16 17 02 F6 | 	mov	arg03, local04
22c08     13 13 02 F6 | 	mov	arg01, local01
22c0c     01 18 06 F6 | 	mov	arg04, #1
22c10     44 49 B0 FD | 	call	#__system___fmtpad
22c14     FD 36 02 F6 | 	mov	local09, result1
22c18     00 36 56 F2 | 	cmps	local09, #0 wc
22c1c     1B FB 01 C6 |  if_b	mov	result1, local09
22c20     1B 2F 02 31 |  if_ae	add	local05, local09
22c24     17 FB 01 36 |  if_ae	mov	result1, local05
22c28                 | LR__3074
22c28     A7 F0 03 F6 | 	mov	ptra, fp
22c2c     B2 00 A0 FD | 	call	#popregs_
22c30                 | __system___fmtstr_ret
22c30     2D 00 64 FD | 	ret
22c34                 | 
22c34                 | __system___fmtnum
22c34     0B 4A 05 F6 | 	mov	COUNT_, #11
22c38     A8 00 A0 FD | 	call	#pushregs_
22c3c     09 27 02 F6 | 	mov	local01, arg01
22c40     0A 29 02 F6 | 	mov	local02, arg02
22c44     0B 2B 02 F6 | 	mov	local03, arg03
22c48     0C 2D 02 F6 | 	mov	local04, arg04
22c4c     F8 2F 02 F6 | 	mov	local05, ptra
22c50     17 31 02 F6 | 	mov	local06, local05
22c54     00 32 06 F6 | 	mov	local07, #0
22c58     14 35 02 F6 | 	mov	local08, local02
22c5c     10 34 46 F0 | 	shr	local08, #16
22c60     3F 34 06 F5 | 	and	local08, #63
22c64     14 37 E2 F8 | 	getbyte	local09, local02, #0
22c68     14 39 02 F6 | 	mov	local10, local02
22c6c     1A 38 46 F0 | 	shr	local10, #26
22c70     03 38 06 F5 | 	and	local10, #3
22c74     1C 3B 02 F6 | 	mov	local11, local10
22c78     01 34 56 F2 | 	cmps	local08, #1 wc
22c7c     44 F0 07 F1 | 	add	ptra, #68
22c80     01 34 86 31 |  if_ae	sub	local08, #1
22c84     41 36 56 F2 | 	cmps	local09, #65 wc
22c88     00 36 0E C2 |  if_b	cmp	local09, #0 wz
22c8c     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
22c90     03 3A 0E F2 | 	cmp	local11, #3 wz
22c94     00 3A 06 A6 |  if_e	mov	local11, #0
22c98     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
22c9c     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
22ca0     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
22ca4     00 3A 0E F2 | 	cmp	local11, #0 wz
22ca8     4C 00 90 AD |  if_e	jmp	#LR__3083
22cac     01 32 06 F6 | 	mov	local07, #1
22cb0     1B 35 0A F2 | 	cmp	local08, local09 wz
22cb4     18 00 90 5D |  if_ne	jmp	#LR__3081
22cb8     05 34 6E FB | 	djnz	local08, #LR__3080
22cbc     13 13 02 F6 | 	mov	arg01, local01
22cc0     14 15 02 F6 | 	mov	arg02, local02
22cc4     23 16 06 F6 | 	mov	arg03, #35
22cc8     24 FE BF FD | 	call	#__system___fmtchar
22ccc     88 00 90 FD | 	jmp	#LR__3087
22cd0                 | LR__3080
22cd0                 | LR__3081
22cd0     02 3A 0E F2 | 	cmp	local11, #2 wz
22cd4     18 39 02 A6 |  if_e	mov	local10, local06
22cd8     01 30 06 A1 |  if_e	add	local06, #1
22cdc     1C 41 48 AC |  if_e	wrbyte	#32, local10
22ce0     14 00 90 AD |  if_e	jmp	#LR__3082
22ce4     04 3A 0E F2 | 	cmp	local11, #4 wz
22ce8     18 5B 48 AC |  if_e	wrbyte	#45, local06
22cec     01 30 06 A1 |  if_e	add	local06, #1
22cf0     18 57 48 5C |  if_ne	wrbyte	#43, local06
22cf4     01 30 06 51 |  if_ne	add	local06, #1
22cf8                 | LR__3082
22cf8                 | LR__3083
22cf8     18 13 02 F6 | 	mov	arg01, local06
22cfc     15 15 02 F6 | 	mov	arg02, local03
22d00     16 17 02 F6 | 	mov	arg03, local04
22d04     1A 19 02 F6 | 	mov	arg04, local08
22d08     00 1A 06 F6 | 	mov	arg05, #0
22d0c     1D 28 2E F4 | 	testbn	local02, #29 wz
22d10     01 1A 06 56 |  if_ne	mov	arg05, #1
22d14     08 49 B0 FD | 	call	#__system___uitoa
22d18     FD 32 02 F1 | 	add	local07, result1
22d1c     1B 33 5A F2 | 	cmps	local07, local09 wcz
22d20     24 00 90 ED |  if_be	jmp	#LR__3086
22d24     97 0E 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
22d28                 | LR__3084
22d28     1B 39 02 F6 | 	mov	local10, local09
22d2c     01 38 56 F2 | 	cmps	local10, #1 wc
22d30     01 36 86 F1 | 	sub	local09, #1
22d34     18 39 02 36 |  if_ae	mov	local10, local06
22d38     01 30 06 31 |  if_ae	add	local06, #1
22d3c     1C 47 48 3C |  if_ae	wrbyte	#35, local10
22d40     E4 FF 9F 3D |  if_ae	jmp	#LR__3084
22d44                 | LR__3085
22d44     18 01 48 FC | 	wrbyte	#0, local06
22d48                 | LR__3086
22d48     13 13 02 F6 | 	mov	arg01, local01
22d4c     14 15 02 F6 | 	mov	arg02, local02
22d50     17 17 02 F6 | 	mov	arg03, local05
22d54     F0 FD BF FD | 	call	#__system___fmtstr
22d58                 | LR__3087
22d58     A7 F0 03 F6 | 	mov	ptra, fp
22d5c     B2 00 A0 FD | 	call	#popregs_
22d60                 | __system___fmtnum_ret
22d60     2D 00 64 FD | 	ret
22d64                 | 
22d64                 | __system___fmtfloat
22d64     10 4A 05 F6 | 	mov	COUNT_, #16
22d68     A8 00 A0 FD | 	call	#pushregs_
22d6c     24 F1 07 F1 | 	add	ptra, #292
22d70     04 4E 05 F1 | 	add	fp, #4
22d74     A7 12 62 FC | 	wrlong	arg01, fp
22d78     04 4E 05 F1 | 	add	fp, #4
22d7c     A7 14 62 FC | 	wrlong	arg02, fp
22d80     04 4E 05 F1 | 	add	fp, #4
22d84     A7 16 62 FC | 	wrlong	arg03, fp
22d88     04 4E 05 F1 | 	add	fp, #4
22d8c     A7 18 62 FC | 	wrlong	arg04, fp
22d90     0C 4E 05 F1 | 	add	fp, #12
22d94     A7 14 68 FC | 	wrlong	#10, fp
22d98     08 4E 05 F1 | 	add	fp, #8
22d9c     A7 00 68 FC | 	wrlong	#0, fp
22da0     08 4E 05 F1 | 	add	fp, #8
22da4     A7 00 68 FC | 	wrlong	#0, fp
22da8     08 4E 05 F1 | 	add	fp, #8
22dac     A7 00 68 FC | 	wrlong	#0, fp
22db0     04 4E 05 F1 | 	add	fp, #4
22db4     A7 04 68 FC | 	wrlong	#2, fp
22db8     04 4E 05 F1 | 	add	fp, #4
22dbc     A7 00 68 FC | 	wrlong	#0, fp
22dc0     04 4E 05 F1 | 	add	fp, #4
22dc4     A7 00 68 FC | 	wrlong	#0, fp
22dc8     04 4E 05 F1 | 	add	fp, #4
22dcc     A7 00 68 FC | 	wrlong	#0, fp
22dd0     04 4E 05 F1 | 	add	fp, #4
22dd4     A7 00 68 FC | 	wrlong	#0, fp
22dd8     18 4E 05 F1 | 	add	fp, #24
22ddc     A7 00 68 FC | 	wrlong	#0, fp
22de0     68 4E 05 F1 | 	add	fp, #104
22de4     A7 26 02 F6 | 	mov	local01, fp
22de8     08 4E 85 F1 | 	sub	fp, #8
22dec     A7 26 62 FC | 	wrlong	local01, fp
22df0     04 4E 05 F1 | 	add	fp, #4
22df4     A7 26 62 FC | 	wrlong	local01, fp
22df8     BC 4E 85 F1 | 	sub	fp, #188
22dfc     A7 26 02 FB | 	rdlong	local01, fp
22e00     10 26 46 F0 | 	shr	local01, #16
22e04     3F 26 06 F5 | 	and	local01, #63
22e08     B0 4E 05 F1 | 	add	fp, #176
22e0c     A7 26 62 FC | 	wrlong	local01, fp
22e10     B0 4E 85 F1 | 	sub	fp, #176
22e14     A7 26 02 FB | 	rdlong	local01, fp
22e18     1C 26 46 F0 | 	shr	local01, #28
22e1c     01 26 06 F5 | 	and	local01, #1
22e20     08 4F 05 F1 | 	add	fp, #264
22e24     A7 26 62 FC | 	wrlong	local01, fp
22e28     58 4E 85 F1 | 	sub	fp, #88
22e2c     A7 26 0A FB | 	rdlong	local01, fp wz
22e30     B8 4E 85 F1 | 	sub	fp, #184
22e34     3C 00 90 5D |  if_ne	jmp	#LR__3091
22e38     10 4E 05 F1 | 	add	fp, #16
22e3c     A7 26 02 FB | 	rdlong	local01, fp
22e40     10 4E 85 F1 | 	sub	fp, #16
22e44     61 26 0E F2 | 	cmp	local01, #97 wz
22e48     18 00 90 5D |  if_ne	jmp	#LR__3090
22e4c     B8 4E 05 F1 | 	add	fp, #184
22e50     A7 1A 68 FC | 	wrlong	#13, fp
22e54     84 4E 85 F1 | 	sub	fp, #132
22e58     A7 02 68 FC | 	wrlong	#1, fp
22e5c     34 4E 85 F1 | 	sub	fp, #52
22e60     24 00 90 FD | 	jmp	#LR__3092
22e64                 | LR__3090
22e64     B8 4E 05 F1 | 	add	fp, #184
22e68     A7 0C 68 FC | 	wrlong	#6, fp
22e6c     B8 4E 85 F1 | 	sub	fp, #184
22e70     14 00 90 FD | 	jmp	#LR__3092
22e74                 | LR__3091
22e74     B8 4E 05 F1 | 	add	fp, #184
22e78     A7 26 02 FB | 	rdlong	local01, fp
22e7c     01 26 86 F1 | 	sub	local01, #1
22e80     A7 26 62 FC | 	wrlong	local01, fp
22e84     B8 4E 85 F1 | 	sub	fp, #184
22e88                 | LR__3092
22e88     08 4E 05 F1 | 	add	fp, #8
22e8c     A7 26 02 FB | 	rdlong	local01, fp
22e90     16 26 46 F0 | 	shr	local01, #22
22e94     03 26 06 F5 | 	and	local01, #3
22e98     04 4F 05 F1 | 	add	fp, #260
22e9c     A7 26 62 FC | 	wrlong	local01, fp
22ea0     04 4F 85 F1 | 	sub	fp, #260
22ea4     A7 26 02 FB | 	rdlong	local01, fp
22ea8     1D 26 46 F0 | 	shr	local01, #29
22eac     01 26 06 F5 | 	and	local01, #1
22eb0     B4 4E 05 F1 | 	add	fp, #180
22eb4     A7 26 62 FC | 	wrlong	local01, fp
22eb8     B4 4E 85 F1 | 	sub	fp, #180
22ebc     A7 26 02 FB | 	rdlong	local01, fp
22ec0     13 27 EA F8 | 	getbyte	local01, local01, #1
22ec4     60 4E 05 F1 | 	add	fp, #96
22ec8     A7 26 62 FC | 	wrlong	local01, fp
22ecc     60 4E 85 F1 | 	sub	fp, #96
22ed0     A7 26 02 FB | 	rdlong	local01, fp
22ed4     13 27 E2 F8 | 	getbyte	local01, local01, #0
22ed8     64 4E 05 F1 | 	add	fp, #100
22edc     A7 26 62 FC | 	wrlong	local01, fp
22ee0     00 26 06 F6 | 	mov	local01, #0
22ee4     5C 4E 85 F1 | 	sub	fp, #92
22ee8     A7 1A 02 FB | 	rdlong	arg05, fp
22eec     65 1A 0E F2 | 	cmp	arg05, #101 wz
22ef0     01 26 06 A6 |  if_e	mov	local01, #1
22ef4     14 4E 05 F1 | 	add	fp, #20
22ef8     A7 26 62 FC | 	wrlong	local01, fp
22efc     98 4E 05 F1 | 	add	fp, #152
22f00     A7 28 0A FB | 	rdlong	local02, fp wz
22f04     45 26 06 56 |  if_ne	mov	local01, #69
22f08     65 26 06 A6 |  if_e	mov	local01, #101
22f0c     8C 4E 85 F1 | 	sub	fp, #140
22f10     A7 26 62 FC | 	wrlong	local01, fp
22f14     20 4E 85 F1 | 	sub	fp, #32
22f18     A7 26 02 FB | 	rdlong	local01, fp
22f1c     10 4E 85 F1 | 	sub	fp, #16
22f20     61 26 0E F2 | 	cmp	local01, #97 wz
22f24     4C 00 90 5D |  if_ne	jmp	#LR__3093
22f28     24 4E 05 F1 | 	add	fp, #36
22f2c     A7 02 68 FC | 	wrlong	#1, fp
22f30     98 4E 05 F1 | 	add	fp, #152
22f34     A7 28 0A FB | 	rdlong	local02, fp wz
22f38     50 26 06 56 |  if_ne	mov	local01, #80
22f3c     70 26 06 A6 |  if_e	mov	local01, #112
22f40     8C 4E 85 F1 | 	sub	fp, #140
22f44     A7 26 62 FC | 	wrlong	local01, fp
22f48     14 4E 85 F1 | 	sub	fp, #20
22f4c     A7 04 68 FC | 	wrlong	#2, fp
22f50     1C 4E 05 F1 | 	add	fp, #28
22f54     A7 02 68 FC | 	wrlong	#1, fp
22f58     84 4E 05 F1 | 	add	fp, #132
22f5c     A7 28 0A FB | 	rdlong	local02, fp wz
22f60     58 26 06 56 |  if_ne	mov	local01, #88
22f64     78 26 06 A6 |  if_e	mov	local01, #120
22f68     7C 4E 85 F1 | 	sub	fp, #124
22f6c     A7 26 62 FC | 	wrlong	local01, fp
22f70     40 4E 85 F1 | 	sub	fp, #64
22f74                 | LR__3093
22f74     10 4E 05 F1 | 	add	fp, #16
22f78     A7 26 02 FB | 	rdlong	local01, fp
22f7c     10 4E 85 F1 | 	sub	fp, #16
22f80     23 26 0E F2 | 	cmp	local01, #35 wz
22f84     3C 00 90 5D |  if_ne	jmp	#LR__3096
22f88     48 4E 05 F1 | 	add	fp, #72
22f8c     A7 02 68 FC | 	wrlong	#1, fp
22f90     C8 4E 05 F1 | 	add	fp, #200
22f94     A7 26 0A FB | 	rdlong	local01, fp wz
22f98     10 4F 85 F1 | 	sub	fp, #272
22f9c     18 00 90 AD |  if_e	jmp	#LR__3094
22fa0     10 4E 05 F1 | 	add	fp, #16
22fa4     A7 CC 68 FC | 	wrlong	#102, fp
22fa8     00 4F 05 F1 | 	add	fp, #256
22fac     A7 00 68 FC | 	wrlong	#0, fp
22fb0     10 4F 85 F1 | 	sub	fp, #272
22fb4     0C 00 90 FD | 	jmp	#LR__3095
22fb8                 | LR__3094
22fb8     10 4F 05 F1 | 	add	fp, #272
22fbc     A7 02 68 FC | 	wrlong	#1, fp
22fc0     10 4F 85 F1 | 	sub	fp, #272
22fc4                 | LR__3095
22fc4                 | LR__3096
22fc4     08 4E 05 F1 | 	add	fp, #8
22fc8     A7 26 02 FB | 	rdlong	local01, fp
22fcc     1A 26 46 F0 | 	shr	local01, #26
22fd0     03 26 06 F5 | 	and	local01, #3
22fd4     5C 4E 05 F1 | 	add	fp, #92
22fd8     A7 26 62 FC | 	wrlong	local01, fp
22fdc     58 4E 85 F1 | 	sub	fp, #88
22fe0     A7 FA 01 FB | 	rdlong	result1, fp
22fe4     0C 4E 85 F1 | 	sub	fp, #12
22fe8     1F FA 4D F0 | 	shr	result1, #31 wz
22fec     20 00 90 AD |  if_e	jmp	#LR__3097
22ff0     2C 4E 05 F1 | 	add	fp, #44
22ff4     A7 5A 68 FC | 	wrlong	#45, fp
22ff8     20 4E 85 F1 | 	sub	fp, #32
22ffc     A7 FA 01 FB | 	rdlong	result1, fp
23000     1F FA E5 F4 | 	bitnot	result1, #31
23004     A7 FA 61 FC | 	wrlong	result1, fp
23008     0C 4E 85 F1 | 	sub	fp, #12
2300c     3C 00 90 FD | 	jmp	#LR__3099
23010                 | LR__3097
23010     64 4E 05 F1 | 	add	fp, #100
23014     A7 26 02 FB | 	rdlong	local01, fp
23018     64 4E 85 F1 | 	sub	fp, #100
2301c     01 26 0E F2 | 	cmp	local01, #1 wz
23020     2C 4E 05 A1 |  if_e	add	fp, #44
23024     A7 56 68 AC |  if_e	wrlong	#43, fp
23028     2C 4E 85 A1 |  if_e	sub	fp, #44
2302c     1C 00 90 AD |  if_e	jmp	#LR__3098
23030     64 4E 05 F1 | 	add	fp, #100
23034     A7 26 02 FB | 	rdlong	local01, fp
23038     64 4E 85 F1 | 	sub	fp, #100
2303c     02 26 0E F2 | 	cmp	local01, #2 wz
23040     2C 4E 05 A1 |  if_e	add	fp, #44
23044     A7 40 68 AC |  if_e	wrlong	#32, fp
23048     2C 4E 85 A1 |  if_e	sub	fp, #44
2304c                 | LR__3098
2304c                 | LR__3099
2304c     08 4E 05 F1 | 	add	fp, #8
23050     A7 26 02 FB | 	rdlong	local01, fp
23054     18 26 46 F0 | 	shr	local01, #24
23058     03 26 06 F5 | 	and	local01, #3
2305c     3C 4E 05 F1 | 	add	fp, #60
23060     A7 26 62 FC | 	wrlong	local01, fp
23064     00 26 06 F6 | 	mov	local01, #0
23068     18 4E 85 F1 | 	sub	fp, #24
2306c     A7 2A 0A FB | 	rdlong	local03, fp wz
23070     2C 4E 85 F1 | 	sub	fp, #44
23074     18 00 90 5D |  if_ne	jmp	#LR__3100
23078     1C 4E 05 F1 | 	add	fp, #28
2307c     A7 2C 02 FB | 	rdlong	local04, fp
23080     1C 4E 85 F1 | 	sub	fp, #28
23084     16 2F 02 F6 | 	mov	local05, local04
23088     0A 2E 0E F2 | 	cmp	local05, #10 wz
2308c     04 00 90 AD |  if_e	jmp	#LR__3101
23090                 | LR__3100
23090     01 26 66 F5 | 	xor	local01, #1
23094                 | LR__3101
23094     3C 4E 05 F1 | 	add	fp, #60
23098     A7 26 62 FC | 	wrlong	local01, fp
2309c     3C 4E 85 F1 | 	sub	fp, #60
230a0     00 26 0E F2 | 	cmp	local01, #0 wz
230a4     0C 01 90 AD |  if_e	jmp	#LR__3103
230a8     44 4E 05 F1 | 	add	fp, #68
230ac     A7 2E 02 FB | 	rdlong	local05, fp
230b0     44 4E 85 F1 | 	sub	fp, #68
230b4     17 2B 02 F6 | 	mov	local03, local05
230b8     02 2A 0E F2 | 	cmp	local03, #2 wz
230bc     F4 00 90 5D |  if_ne	jmp	#LR__3103
230c0     0C 4F 05 F1 | 	add	fp, #268
230c4     A7 30 02 FB | 	rdlong	local06, fp
230c8     0C 4F 85 F1 | 	sub	fp, #268
230cc     18 2D 02 F6 | 	mov	local04, local06
230d0     02 2C 0E F2 | 	cmp	local04, #2 wz
230d4     DC 00 90 AD |  if_e	jmp	#LR__3103
230d8     C0 4E 05 F1 | 	add	fp, #192
230dc     A7 12 02 FB | 	rdlong	arg01, fp
230e0     94 4E 85 F1 | 	sub	fp, #148
230e4     A7 14 02 FB | 	rdlong	arg02, fp
230e8     14 4E 05 F1 | 	add	fp, #20
230ec     A7 16 02 FB | 	rdlong	arg03, fp
230f0     40 4E 85 F1 | 	sub	fp, #64
230f4     90 47 B0 FD | 	call	#__system__emitsign_0534
230f8     14 4F 05 F1 | 	add	fp, #276
230fc     A7 FA 61 FC | 	wrlong	result1, fp
23100     14 4F 85 F1 | 	sub	fp, #276
23104     00 FA 55 F2 | 	cmps	result1, #0 wc
23108     14 4F 05 C1 |  if_b	add	fp, #276
2310c     A7 FA 01 CB |  if_b	rdlong	result1, fp
23110     14 4F 85 C1 |  if_b	sub	fp, #276
23114     6C 0B 90 CD |  if_b	jmp	#LR__3153
23118     C0 4E 05 F1 | 	add	fp, #192
2311c     A7 26 02 FB | 	rdlong	local01, fp
23120     54 4E 05 F1 | 	add	fp, #84
23124     A7 2E 02 FB | 	rdlong	local05, fp
23128     17 2B 02 F6 | 	mov	local03, local05
2312c     17 27 02 F1 | 	add	local01, local05
23130     54 4E 85 F1 | 	sub	fp, #84
23134     A7 26 62 FC | 	wrlong	local01, fp
23138     58 4E 85 F1 | 	sub	fp, #88
2313c     A7 26 0A FB | 	rdlong	local01, fp wz
23140     68 4E 85 F1 | 	sub	fp, #104
23144     60 00 90 AD |  if_e	jmp	#LR__3102
23148     68 4E 05 F1 | 	add	fp, #104
2314c     A7 26 02 FB | 	rdlong	local01, fp
23150     AC 4E 05 F1 | 	add	fp, #172
23154     A7 2A 02 FB | 	rdlong	local03, fp
23158     15 27 82 F1 | 	sub	local01, local03
2315c     AC 4E 85 F1 | 	sub	fp, #172
23160     A7 26 62 FC | 	wrlong	local01, fp
23164     68 4E 85 F1 | 	sub	fp, #104
23168     00 26 56 F2 | 	cmps	local01, #0 wc
2316c     68 4E 05 C1 |  if_b	add	fp, #104
23170     A7 00 68 CC |  if_b	wrlong	#0, fp
23174     68 4E 85 C1 |  if_b	sub	fp, #104
23178     08 4E 05 F1 | 	add	fp, #8
2317c     A7 26 02 FB | 	rdlong	local01, fp
23180     E8 26 06 F4 | 	bitl	local01, #232
23184     A7 26 62 FC | 	wrlong	local01, fp
23188     60 4E 05 F1 | 	add	fp, #96
2318c     A7 2E 02 FB | 	rdlong	local05, fp
23190     17 2B 02 F6 | 	mov	local03, local05
23194     08 2A 66 F0 | 	shl	local03, #8
23198     15 27 42 F5 | 	or	local01, local03
2319c     60 4E 85 F1 | 	sub	fp, #96
231a0     A7 26 62 FC | 	wrlong	local01, fp
231a4     08 4E 85 F1 | 	sub	fp, #8
231a8                 | LR__3102
231a8     3C 4E 05 F1 | 	add	fp, #60
231ac     A7 00 68 FC | 	wrlong	#0, fp
231b0     3C 4E 85 F1 | 	sub	fp, #60
231b4                 | LR__3103
231b4     0C 4E 05 F1 | 	add	fp, #12
231b8     A7 12 02 FB | 	rdlong	arg01, fp
231bc     0C 4E 85 F1 | 	sub	fp, #12
231c0     30 21 B0 FD | 	call	#__system____builtin_ilogb
231c4     FF FF 3F FF 
231c8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
231cc     50 00 90 5D |  if_ne	jmp	#LR__3105
231d0     2C 4E 05 F1 | 	add	fp, #44
231d4     A7 26 0A FB | 	rdlong	local01, fp wz
231d8     2C 4E 85 F1 | 	sub	fp, #44
231dc     24 00 90 AD |  if_e	jmp	#LR__3104
231e0     C0 4E 05 F1 | 	add	fp, #192
231e4     A7 28 02 FB | 	rdlong	local02, fp
231e8     14 2B 02 F6 | 	mov	local03, local02
231ec     01 2A 06 F1 | 	add	local03, #1
231f0     A7 2A 62 FC | 	wrlong	local03, fp
231f4     94 4E 85 F1 | 	sub	fp, #148
231f8     A7 2C 02 FB | 	rdlong	local04, fp
231fc     2C 4E 85 F1 | 	sub	fp, #44
23200     14 2D 42 FC | 	wrbyte	local04, local02
23204                 | LR__3104
23204     C0 4E 05 F1 | 	add	fp, #192
23208     A7 12 02 FB | 	rdlong	arg01, fp
2320c     C0 4E 85 F1 | 	sub	fp, #192
23210     8B 01 00 FF 
23214     26 15 06 F6 | 	mov	arg02, ##@LR__5101
23218     AC E9 BF FD | 	call	#__system____builtin_strcpy
2321c     A4 08 90 FD | 	jmp	#LR__3141
23220                 | LR__3105
23220     0C 4E 05 F1 | 	add	fp, #12
23224     A7 28 02 FB | 	rdlong	local02, fp
23228     0C 4E 85 F1 | 	sub	fp, #12
2322c     14 13 02 F6 | 	mov	arg01, local02
23230     C0 20 B0 FD | 	call	#__system____builtin_ilogb
23234     00 00 40 FF 
23238     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2323c     50 00 90 5D |  if_ne	jmp	#LR__3107
23240     2C 4E 05 F1 | 	add	fp, #44
23244     A7 26 0A FB | 	rdlong	local01, fp wz
23248     2C 4E 85 F1 | 	sub	fp, #44
2324c     24 00 90 AD |  if_e	jmp	#LR__3106
23250     C0 4E 05 F1 | 	add	fp, #192
23254     A7 28 02 FB | 	rdlong	local02, fp
23258     14 2B 02 F6 | 	mov	local03, local02
2325c     01 2A 06 F1 | 	add	local03, #1
23260     A7 2A 62 FC | 	wrlong	local03, fp
23264     94 4E 85 F1 | 	sub	fp, #148
23268     A7 2C 02 FB | 	rdlong	local04, fp
2326c     2C 4E 85 F1 | 	sub	fp, #44
23270     14 2D 42 FC | 	wrbyte	local04, local02
23274                 | LR__3106
23274     C0 4E 05 F1 | 	add	fp, #192
23278     A7 12 02 FB | 	rdlong	arg01, fp
2327c     C0 4E 85 F1 | 	sub	fp, #192
23280     8B 01 00 FF 
23284     2A 15 06 F6 | 	mov	arg02, ##@LR__5102
23288     3C E9 BF FD | 	call	#__system____builtin_strcpy
2328c     34 08 90 FD | 	jmp	#LR__3141
23290                 | LR__3107
23290     10 4E 05 F1 | 	add	fp, #16
23294     A7 26 02 FB | 	rdlong	local01, fp
23298     10 4E 85 F1 | 	sub	fp, #16
2329c     67 26 0E F2 | 	cmp	local01, #103 wz
232a0     10 4E 05 51 |  if_ne	add	fp, #16
232a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
232a8     10 4E 85 51 |  if_ne	sub	fp, #16
232ac     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
232b0     94 01 90 5D |  if_ne	jmp	#LR__3112
232b4     0C 4E 05 F1 | 	add	fp, #12
232b8     A7 12 02 FB | 	rdlong	arg01, fp
232bc     08 4E 05 F1 | 	add	fp, #8
232c0     A7 14 02 F6 | 	mov	arg02, fp
232c4     0C 4E 05 F1 | 	add	fp, #12
232c8     A7 16 02 F6 | 	mov	arg03, fp
232cc     98 4E 05 F1 | 	add	fp, #152
232d0     A7 18 02 FB | 	rdlong	arg04, fp
232d4     9C 4E 85 F1 | 	sub	fp, #156
232d8     A7 1A 02 FB | 	rdlong	arg05, fp
232dc     1C 4E 85 F1 | 	sub	fp, #28
232e0     B0 43 B0 FD | 	call	#__system__disassemble_0532
232e4     10 4E 05 F1 | 	add	fp, #16
232e8     A7 26 02 FB | 	rdlong	local01, fp
232ec     10 4E 85 F1 | 	sub	fp, #16
232f0     23 26 0E F2 | 	cmp	local01, #35 wz
232f4     A0 00 90 5D |  if_ne	jmp	#LR__3109
232f8     20 4E 05 F1 | 	add	fp, #32
232fc     A7 26 02 FB | 	rdlong	local01, fp
23300     98 4E 05 F1 | 	add	fp, #152
23304     A7 2A 02 FB | 	rdlong	local03, fp
23308     B8 4E 85 F1 | 	sub	fp, #184
2330c     15 27 5A F2 | 	cmps	local01, local03 wcz
23310     24 4E 05 11 |  if_a	add	fp, #36
23314     A7 02 68 1C |  if_a	wrlong	#1, fp
23318     24 4E 85 11 |  if_a	sub	fp, #36
2331c     A4 01 90 1D |  if_a	jmp	#LR__3115
23320     20 4E 05 F1 | 	add	fp, #32
23324     A7 26 02 FB | 	rdlong	local01, fp
23328     20 4E 85 F1 | 	sub	fp, #32
2332c     00 26 56 F2 | 	cmps	local01, #0 wc
23330     2C 00 90 3D |  if_ae	jmp	#LR__3108
23334     B8 4E 05 F1 | 	add	fp, #184
23338     A7 26 02 FB | 	rdlong	local01, fp
2333c     13 27 62 F6 | 	neg	local01, local01
23340     98 4E 85 F1 | 	sub	fp, #152
23344     A7 2A 02 FB | 	rdlong	local03, fp
23348     20 4E 85 F1 | 	sub	fp, #32
2334c     13 2B 5A F2 | 	cmps	local03, local01 wcz
23350     24 4E 05 E1 |  if_be	add	fp, #36
23354     A7 02 68 EC |  if_be	wrlong	#1, fp
23358     24 4E 85 E1 |  if_be	sub	fp, #36
2335c     64 01 90 FD | 	jmp	#LR__3115
23360                 | LR__3108
23360     20 4E 05 F1 | 	add	fp, #32
23364     A7 26 02 FB | 	rdlong	local01, fp
23368     20 4E 85 F1 | 	sub	fp, #32
2336c     01 26 56 F2 | 	cmps	local01, #1 wc
23370     50 01 90 CD |  if_b	jmp	#LR__3115
23374     B8 4E 05 F1 | 	add	fp, #184
23378     A7 26 02 FB | 	rdlong	local01, fp
2337c     98 4E 85 F1 | 	sub	fp, #152
23380     A7 2A 02 FB | 	rdlong	local03, fp
23384     15 27 82 F1 | 	sub	local01, local03
23388     98 4E 05 F1 | 	add	fp, #152
2338c     A7 26 62 FC | 	wrlong	local01, fp
23390     B8 4E 85 F1 | 	sub	fp, #184
23394     2C 01 90 FD | 	jmp	#LR__3115
23398                 | LR__3109
23398     00 26 06 F6 | 	mov	local01, #0
2339c     08 4E 05 F1 | 	add	fp, #8
233a0     A7 28 02 FB | 	rdlong	local02, fp
233a4     1C 28 46 F0 | 	shr	local02, #28
233a8     01 28 0E F5 | 	and	local02, #1 wz
233ac     01 26 06 A6 |  if_e	mov	local01, #1
233b0     2C 4E 05 F1 | 	add	fp, #44
233b4     A7 26 62 FC | 	wrlong	local01, fp
233b8     14 4E 85 F1 | 	sub	fp, #20
233bc     A7 26 02 FB | 	rdlong	local01, fp
233c0     98 4E 05 F1 | 	add	fp, #152
233c4     A7 2A 02 FB | 	rdlong	local03, fp
233c8     B8 4E 85 F1 | 	sub	fp, #184
233cc     15 27 52 F2 | 	cmps	local01, local03 wc
233d0     18 00 90 3D |  if_ae	jmp	#LR__3110
233d4     20 4E 05 F1 | 	add	fp, #32
233d8     A7 2C 02 FB | 	rdlong	local04, fp
233dc     20 4E 85 F1 | 	sub	fp, #32
233e0     FF FF 7F FF 
233e4     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
233e8     10 00 90 3D |  if_ae	jmp	#LR__3111
233ec                 | LR__3110
233ec     24 4E 05 F1 | 	add	fp, #36
233f0     A7 02 68 FC | 	wrlong	#1, fp
233f4     24 4E 85 F1 | 	sub	fp, #36
233f8     C8 00 90 FD | 	jmp	#LR__3115
233fc                 | LR__3111
233fc     B8 4E 05 F1 | 	add	fp, #184
23400     A7 2C 02 FB | 	rdlong	local04, fp
23404     98 4E 85 F1 | 	sub	fp, #152
23408     A7 2A 02 FB | 	rdlong	local03, fp
2340c     15 2D 82 F1 | 	sub	local04, local03
23410     98 4E 05 F1 | 	add	fp, #152
23414     A7 2C 62 FC | 	wrlong	local04, fp
23418     AC 4E 85 F1 | 	sub	fp, #172
2341c     A7 12 02 FB | 	rdlong	arg01, fp
23420     08 4E 05 F1 | 	add	fp, #8
23424     A7 14 02 F6 | 	mov	arg02, fp
23428     0C 4E 05 F1 | 	add	fp, #12
2342c     A7 16 02 F6 | 	mov	arg03, fp
23430     16 19 62 F6 | 	neg	arg04, local04
23434     04 4E 85 F1 | 	sub	fp, #4
23438     A7 1A 02 FB | 	rdlong	arg05, fp
2343c     1C 4E 85 F1 | 	sub	fp, #28
23440     50 42 B0 FD | 	call	#__system__disassemble_0532
23444     7C 00 90 FD | 	jmp	#LR__3115
23448                 | LR__3112
23448     24 4E 05 F1 | 	add	fp, #36
2344c     A7 26 0A FB | 	rdlong	local01, fp wz
23450     24 4E 85 F1 | 	sub	fp, #36
23454     34 00 90 AD |  if_e	jmp	#LR__3113
23458     0C 4E 05 F1 | 	add	fp, #12
2345c     A7 12 02 FB | 	rdlong	arg01, fp
23460     08 4E 05 F1 | 	add	fp, #8
23464     A7 14 02 F6 | 	mov	arg02, fp
23468     0C 4E 05 F1 | 	add	fp, #12
2346c     A7 16 02 F6 | 	mov	arg03, fp
23470     98 4E 05 F1 | 	add	fp, #152
23474     A7 18 02 FB | 	rdlong	arg04, fp
23478     9C 4E 85 F1 | 	sub	fp, #156
2347c     A7 1A 02 FB | 	rdlong	arg05, fp
23480     1C 4E 85 F1 | 	sub	fp, #28
23484     0C 42 B0 FD | 	call	#__system__disassemble_0532
23488     38 00 90 FD | 	jmp	#LR__3114
2348c                 | LR__3113
2348c     0C 4E 05 F1 | 	add	fp, #12
23490     A7 12 02 FB | 	rdlong	arg01, fp
23494     08 4E 05 F1 | 	add	fp, #8
23498     A7 14 02 F6 | 	mov	arg02, fp
2349c     0C 4E 05 F1 | 	add	fp, #12
234a0     A7 16 02 F6 | 	mov	arg03, fp
234a4     98 4E 05 F1 | 	add	fp, #152
234a8     A7 2C 02 FB | 	rdlong	local04, fp
234ac     01 2C 06 F1 | 	add	local04, #1
234b0     16 19 62 F6 | 	neg	arg04, local04
234b4     9C 4E 85 F1 | 	sub	fp, #156
234b8     A7 1A 02 FB | 	rdlong	arg05, fp
234bc     1C 4E 85 F1 | 	sub	fp, #28
234c0     D0 41 B0 FD | 	call	#__system__disassemble_0532
234c4                 | LR__3114
234c4                 | LR__3115
234c4     1C 4E 05 F1 | 	add	fp, #28
234c8     A7 26 02 FB | 	rdlong	local01, fp
234cc     1C 4E 85 F1 | 	sub	fp, #28
234d0     02 26 0E F2 | 	cmp	local01, #2 wz
234d4     4C 00 90 5D |  if_ne	jmp	#LR__3118
234d8     1C 4E 05 F1 | 	add	fp, #28
234dc     A7 20 68 FC | 	wrlong	#16, fp
234e0     1C 4E 85 F1 | 	sub	fp, #28
234e4                 | LR__3116
234e4     14 4E 05 F1 | 	add	fp, #20
234e8     A7 26 0A FB | 	rdlong	local01, fp wz
234ec     14 4E 85 F1 | 	sub	fp, #20
234f0     30 00 90 AD |  if_e	jmp	#LR__3117
234f4     14 4E 05 F1 | 	add	fp, #20
234f8     A7 2A 02 FB | 	rdlong	local03, fp
234fc     14 4E 85 F1 | 	sub	fp, #20
23500     00 80 00 FF 
23504     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
23508     18 00 90 3D |  if_ae	jmp	#LR__3117
2350c     14 4E 05 F1 | 	add	fp, #20
23510     A7 26 02 FB | 	rdlong	local01, fp
23514     01 26 66 F0 | 	shl	local01, #1
23518     A7 26 62 FC | 	wrlong	local01, fp
2351c     14 4E 85 F1 | 	sub	fp, #20
23520     C0 FF 9F FD | 	jmp	#LR__3116
23524                 | LR__3117
23524                 | LR__3118
23524     70 4E 05 F1 | 	add	fp, #112
23528     A7 12 02 F6 | 	mov	arg01, fp
2352c     5C 4E 85 F1 | 	sub	fp, #92
23530     A7 14 02 FB | 	rdlong	arg02, fp
23534     08 4E 05 F1 | 	add	fp, #8
23538     A7 16 02 FB | 	rdlong	arg03, fp
2353c     A0 4E 05 F1 | 	add	fp, #160
23540     A7 1A 02 FB | 	rdlong	arg05, fp
23544     BC 4E 85 F1 | 	sub	fp, #188
23548     01 18 06 F6 | 	mov	arg04, #1
2354c     D0 40 B0 FD | 	call	#__system___uitoa
23550     58 4E 05 F1 | 	add	fp, #88
23554     A7 FA 61 FC | 	wrlong	result1, fp
23558     38 4E 85 F1 | 	sub	fp, #56
2355c     A7 26 02 FB | 	rdlong	local01, fp
23560     20 4E 85 F1 | 	sub	fp, #32
23564     00 26 56 F2 | 	cmps	local01, #0 wc
23568     50 00 90 3D |  if_ae	jmp	#LR__3119
2356c     60 4E 05 F1 | 	add	fp, #96
23570     A7 5A 68 FC | 	wrlong	#45, fp
23574     50 4E 05 F1 | 	add	fp, #80
23578     A7 12 02 F6 | 	mov	arg01, fp
2357c     90 4E 85 F1 | 	sub	fp, #144
23580     A7 2A 02 FB | 	rdlong	local03, fp
23584     15 15 62 F6 | 	neg	arg02, local03
23588     18 4E 05 F1 | 	add	fp, #24
2358c     A7 18 02 FB | 	rdlong	arg04, fp
23590     84 4E 05 F1 | 	add	fp, #132
23594     A7 30 02 FB | 	rdlong	local06, fp
23598     BC 4E 85 F1 | 	sub	fp, #188
2359c     18 2D 02 F6 | 	mov	local04, local06
235a0     0A 16 06 F6 | 	mov	arg03, #10
235a4     16 1B 02 F6 | 	mov	arg05, local04
235a8     74 40 B0 FD | 	call	#__system___uitoa
235ac     5C 4E 05 F1 | 	add	fp, #92
235b0     A7 FA 61 FC | 	wrlong	result1, fp
235b4     5C 4E 85 F1 | 	sub	fp, #92
235b8     48 00 90 FD | 	jmp	#LR__3120
235bc                 | LR__3119
235bc     60 4E 05 F1 | 	add	fp, #96
235c0     A7 56 68 FC | 	wrlong	#43, fp
235c4     50 4E 05 F1 | 	add	fp, #80
235c8     A7 12 02 F6 | 	mov	arg01, fp
235cc     90 4E 85 F1 | 	sub	fp, #144
235d0     A7 14 02 FB | 	rdlong	arg02, fp
235d4     18 4E 05 F1 | 	add	fp, #24
235d8     A7 18 02 FB | 	rdlong	arg04, fp
235dc     84 4E 05 F1 | 	add	fp, #132
235e0     A7 30 02 FB | 	rdlong	local06, fp
235e4     BC 4E 85 F1 | 	sub	fp, #188
235e8     18 2D 02 F6 | 	mov	local04, local06
235ec     0A 16 06 F6 | 	mov	arg03, #10
235f0     16 1B 02 F6 | 	mov	arg05, local04
235f4     28 40 B0 FD | 	call	#__system___uitoa
235f8     5C 4E 05 F1 | 	add	fp, #92
235fc     A7 FA 61 FC | 	wrlong	result1, fp
23600     5C 4E 85 F1 | 	sub	fp, #92
23604                 | LR__3120
23604     24 4E 05 F1 | 	add	fp, #36
23608     A7 26 0A FB | 	rdlong	local01, fp wz
2360c     24 4E 85 F1 | 	sub	fp, #36
23610     2C 00 90 AD |  if_e	jmp	#LR__3121
23614     50 4E 05 F1 | 	add	fp, #80
23618     A7 00 68 FC | 	wrlong	#0, fp
2361c     04 4E 85 F1 | 	sub	fp, #4
23620     A7 00 68 FC | 	wrlong	#0, fp
23624     6C 4E 05 F1 | 	add	fp, #108
23628     A7 26 02 FB | 	rdlong	local01, fp
2362c     01 26 06 F1 | 	add	local01, #1
23630     64 4E 85 F1 | 	sub	fp, #100
23634     A7 26 62 FC | 	wrlong	local01, fp
23638     54 4E 85 F1 | 	sub	fp, #84
2363c     88 00 90 FD | 	jmp	#LR__3124
23640                 | LR__3121
23640     20 4E 05 F1 | 	add	fp, #32
23644     A7 26 02 FB | 	rdlong	local01, fp
23648     20 4E 85 F1 | 	sub	fp, #32
2364c     00 26 56 F2 | 	cmps	local01, #0 wc
23650     40 00 90 3D |  if_ae	jmp	#LR__3122
23654     20 4E 05 F1 | 	add	fp, #32
23658     A7 28 02 FB | 	rdlong	local02, fp
2365c     30 4E 05 F1 | 	add	fp, #48
23660     A7 28 62 FC | 	wrlong	local02, fp
23664     04 4E 85 F1 | 	sub	fp, #4
23668     A7 28 62 FC | 	wrlong	local02, fp
2366c     2C 4E 85 F1 | 	sub	fp, #44
23670     A7 26 02 FB | 	rdlong	local01, fp
23674     98 4E 05 F1 | 	add	fp, #152
23678     A7 2A 02 FB | 	rdlong	local03, fp
2367c     15 27 02 F1 | 	add	local01, local03
23680     01 26 06 F1 | 	add	local01, #1
23684     64 4E 85 F1 | 	sub	fp, #100
23688     A7 26 62 FC | 	wrlong	local01, fp
2368c     54 4E 85 F1 | 	sub	fp, #84
23690     34 00 90 FD | 	jmp	#LR__3123
23694                 | LR__3122
23694     4C 4E 05 F1 | 	add	fp, #76
23698     A7 00 68 FC | 	wrlong	#0, fp
2369c     2C 4E 85 F1 | 	sub	fp, #44
236a0     A7 26 02 FB | 	rdlong	local01, fp
236a4     30 4E 05 F1 | 	add	fp, #48
236a8     A7 26 62 FC | 	wrlong	local01, fp
236ac     68 4E 05 F1 | 	add	fp, #104
236b0     A7 2A 02 FB | 	rdlong	local03, fp
236b4     15 27 02 F1 | 	add	local01, local03
236b8     01 26 06 F1 | 	add	local01, #1
236bc     64 4E 85 F1 | 	sub	fp, #100
236c0     A7 26 62 FC | 	wrlong	local01, fp
236c4     54 4E 85 F1 | 	sub	fp, #84
236c8                 | LR__3123
236c8                 | LR__3124
236c8     54 4E 05 F1 | 	add	fp, #84
236cc     A7 26 02 FB | 	rdlong	local01, fp
236d0     08 4E 85 F1 | 	sub	fp, #8
236d4     A7 2A 02 FB | 	rdlong	local03, fp
236d8     15 27 82 F1 | 	sub	local01, local03
236dc     01 26 06 F1 | 	add	local01, #1
236e0     24 4E 85 F1 | 	sub	fp, #36
236e4     A7 26 62 FC | 	wrlong	local01, fp
236e8     04 4E 05 F1 | 	add	fp, #4
236ec     A7 26 0A FB | 	rdlong	local01, fp wz
236f0     2C 4E 85 F1 | 	sub	fp, #44
236f4     28 4E 05 51 |  if_ne	add	fp, #40
236f8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
236fc     01 2A 06 51 |  if_ne	add	local03, #1
23700     A7 2A 62 5C |  if_ne	wrlong	local03, fp
23704     28 4E 85 51 |  if_ne	sub	fp, #40
23708     1C 4E 05 F1 | 	add	fp, #28
2370c     A7 26 02 FB | 	rdlong	local01, fp
23710     1C 4E 85 F1 | 	sub	fp, #28
23714     10 26 0E F2 | 	cmp	local01, #16 wz
23718     28 4E 05 A1 |  if_e	add	fp, #40
2371c     A7 26 02 AB |  if_e	rdlong	local01, fp
23720     02 26 06 A1 |  if_e	add	local01, #2
23724     A7 26 62 AC |  if_e	wrlong	local01, fp
23728     28 4E 85 A1 |  if_e	sub	fp, #40
2372c     24 4E 05 F1 | 	add	fp, #36
23730     A7 26 0A FB | 	rdlong	local01, fp wz
23734     24 4E 85 F1 | 	sub	fp, #36
23738     28 00 90 AD |  if_e	jmp	#LR__3125
2373c     28 4E 05 F1 | 	add	fp, #40
23740     A7 26 02 FB | 	rdlong	local01, fp
23744     02 2A 06 F6 | 	mov	local03, #2
23748     34 4E 05 F1 | 	add	fp, #52
2374c     A7 2E 02 FB | 	rdlong	local05, fp
23750     17 2B 02 F1 | 	add	local03, local05
23754     15 27 02 F1 | 	add	local01, local03
23758     34 4E 85 F1 | 	sub	fp, #52
2375c     A7 26 62 FC | 	wrlong	local01, fp
23760     28 4E 85 F1 | 	sub	fp, #40
23764                 | LR__3125
23764     28 4E 05 F1 | 	add	fp, #40
23768     A7 26 02 FB | 	rdlong	local01, fp
2376c     28 4E 85 F1 | 	sub	fp, #40
23770     41 26 56 F2 | 	cmps	local01, #65 wc
23774     01 FA 65 36 |  if_ae	neg	result1, #1
23778     08 05 90 3D |  if_ae	jmp	#LR__3153
2377c     3C 4E 05 F1 | 	add	fp, #60
23780     A7 26 0A FB | 	rdlong	local01, fp wz
23784     3C 4E 85 F1 | 	sub	fp, #60
23788     60 00 90 AD |  if_e	jmp	#LR__3126
2378c     C0 4E 05 F1 | 	add	fp, #192
23790     A7 12 02 FB | 	rdlong	arg01, fp
23794     94 4E 85 F1 | 	sub	fp, #148
23798     A7 14 02 FB | 	rdlong	arg02, fp
2379c     14 4E 05 F1 | 	add	fp, #20
237a0     A7 16 02 FB | 	rdlong	arg03, fp
237a4     40 4E 85 F1 | 	sub	fp, #64
237a8     DC 40 B0 FD | 	call	#__system__emitsign_0534
237ac     18 4F 05 F1 | 	add	fp, #280
237b0     A7 FA 61 FC | 	wrlong	result1, fp
237b4     18 4F 85 F1 | 	sub	fp, #280
237b8     00 FA 55 F2 | 	cmps	result1, #0 wc
237bc     18 4F 05 C1 |  if_b	add	fp, #280
237c0     A7 FA 01 CB |  if_b	rdlong	result1, fp
237c4     18 4F 85 C1 |  if_b	sub	fp, #280
237c8     B8 04 90 CD |  if_b	jmp	#LR__3153
237cc     C0 4E 05 F1 | 	add	fp, #192
237d0     A7 26 02 FB | 	rdlong	local01, fp
237d4     58 4E 05 F1 | 	add	fp, #88
237d8     A7 2A 02 FB | 	rdlong	local03, fp
237dc     15 27 02 F1 | 	add	local01, local03
237e0     58 4E 85 F1 | 	sub	fp, #88
237e4     A7 26 62 FC | 	wrlong	local01, fp
237e8     C0 4E 85 F1 | 	sub	fp, #192
237ec                 | LR__3126
237ec     4C 4E 05 F1 | 	add	fp, #76
237f0     A7 26 02 FB | 	rdlong	local01, fp
237f4     34 4E 85 F1 | 	sub	fp, #52
237f8     A7 26 62 FC | 	wrlong	local01, fp
237fc     18 4E 85 F1 | 	sub	fp, #24
23800     97 9E 48 FB | 	callpa	#(@LR__3132-@LR__3127)>>2,fcache_load_ptr_
23804                 | LR__3127
23804     18 4E 05 F1 | 	add	fp, #24
23808     A7 28 02 FB | 	rdlong	local02, fp
2380c     3C 4E 05 F1 | 	add	fp, #60
23810     A7 2E 02 FB | 	rdlong	local05, fp
23814     54 4E 85 F1 | 	sub	fp, #84
23818     17 29 52 F2 | 	cmps	local02, local05 wc
2381c     20 01 90 3D |  if_ae	jmp	#LR__3133
23820     18 4E 05 F1 | 	add	fp, #24
23824     A7 30 02 FB | 	rdlong	local06, fp
23828     18 4E 85 F1 | 	sub	fp, #24
2382c     00 30 56 F2 | 	cmps	local06, #0 wc
23830     58 00 90 CD |  if_b	jmp	#LR__3128
23834     18 4E 05 F1 | 	add	fp, #24
23838     A7 30 02 FB | 	rdlong	local06, fp
2383c     40 4E 05 F1 | 	add	fp, #64
23840     A7 32 02 FB | 	rdlong	local07, fp
23844     58 4E 85 F1 | 	sub	fp, #88
23848     19 31 52 F2 | 	cmps	local06, local07 wc
2384c     3C 00 90 3D |  if_ae	jmp	#LR__3128
23850     C0 4E 05 F1 | 	add	fp, #192
23854     A7 34 02 FB | 	rdlong	local08, fp
23858     1A 33 02 F6 | 	mov	local07, local08
2385c     01 32 06 F1 | 	add	local07, #1
23860     A7 32 62 FC | 	wrlong	local07, fp
23864     A8 4E 85 F1 | 	sub	fp, #168
23868     A7 32 02 FB | 	rdlong	local07, fp
2386c     19 37 02 F6 | 	mov	local09, local07
23870     58 4E 05 F1 | 	add	fp, #88
23874     A7 38 02 F6 | 	mov	local10, fp
23878     A7 36 02 F1 | 	add	local09, fp
2387c     1B 3B C2 FA | 	rdbyte	local11, local09
23880     1A 3B 42 FC | 	wrbyte	local11, local08
23884     70 4E 85 F1 | 	sub	fp, #112
23888     20 00 90 FD | 	jmp	#LR__3129
2388c                 | LR__3128
2388c     C0 4E 05 F1 | 	add	fp, #192
23890     A7 34 02 FB | 	rdlong	local08, fp
23894     1A 37 02 F6 | 	mov	local09, local08
23898     01 36 06 F1 | 	add	local09, #1
2389c     A7 36 62 FC | 	wrlong	local09, fp
238a0     C0 4E 85 F1 | 	sub	fp, #192
238a4     30 36 06 F6 | 	mov	local09, #48
238a8     1A 61 48 FC | 	wrbyte	#48, local08
238ac                 | LR__3129
238ac     18 4E 05 F1 | 	add	fp, #24
238b0     A7 30 02 FB | 	rdlong	local06, fp
238b4     38 4E 05 F1 | 	add	fp, #56
238b8     A7 3C 02 FB | 	rdlong	local12, fp
238bc     50 4E 85 F1 | 	sub	fp, #80
238c0     1E 31 0A F2 | 	cmp	local06, local12 wz
238c4     5C 00 90 5D |  if_ne	jmp	#LR__3131
238c8     10 4F 05 F1 | 	add	fp, #272
238cc     A7 32 02 FB | 	rdlong	local07, fp
238d0     10 4F 85 F1 | 	sub	fp, #272
238d4     19 37 0A F6 | 	mov	local09, local07 wz
238d8     28 00 90 5D |  if_ne	jmp	#LR__3130
238dc     54 4E 05 F1 | 	add	fp, #84
238e0     A7 3A 02 FB | 	rdlong	local11, fp
238e4     1D 39 02 F6 | 	mov	local10, local11
238e8     01 38 86 F1 | 	sub	local10, #1
238ec     3C 4E 85 F1 | 	sub	fp, #60
238f0     A7 3E 02 FB | 	rdlong	local13, fp
238f4     18 4E 85 F1 | 	sub	fp, #24
238f8     1F 41 02 F6 | 	mov	local14, local13
238fc     1C 41 52 F2 | 	cmps	local14, local10 wc
23900     20 00 90 3D |  if_ae	jmp	#LR__3131
23904                 | LR__3130
23904     C0 4E 05 F1 | 	add	fp, #192
23908     A7 34 02 FB | 	rdlong	local08, fp
2390c     1A 3D 02 F6 | 	mov	local12, local08
23910     01 3C 06 F1 | 	add	local12, #1
23914     A7 3C 62 FC | 	wrlong	local12, fp
23918     C0 4E 85 F1 | 	sub	fp, #192
2391c     2E 36 06 F6 | 	mov	local09, #46
23920     1A 5D 48 FC | 	wrbyte	#46, local08
23924                 | LR__3131
23924     18 4E 05 F1 | 	add	fp, #24
23928     A7 42 02 FB | 	rdlong	local15, fp
2392c     21 3D 02 F6 | 	mov	local12, local15
23930     01 3C 06 F1 | 	add	local12, #1
23934     A7 3C 62 FC | 	wrlong	local12, fp
23938     18 4E 85 F1 | 	sub	fp, #24
2393c     C4 FE 9F FD | 	jmp	#LR__3127
23940                 | LR__3132
23940                 | LR__3133
23940     34 4E 05 F1 | 	add	fp, #52
23944     A7 26 0A FB | 	rdlong	local01, fp wz
23948     34 4E 85 F1 | 	sub	fp, #52
2394c     A0 00 90 AD |  if_e	jmp	#LR__3137
23950     C0 4E 05 F1 | 	add	fp, #192
23954     A7 26 02 FB | 	rdlong	local01, fp
23958     01 26 86 F1 | 	sub	local01, #1
2395c     A7 26 62 FC | 	wrlong	local01, fp
23960     C0 4E 85 F1 | 	sub	fp, #192
23964     97 26 48 FB | 	callpa	#(@LR__3135-@LR__3134)>>2,fcache_load_ptr_
23968                 | LR__3134
23968     C0 4E 05 F1 | 	add	fp, #192
2396c     A7 26 02 FB | 	rdlong	local01, fp
23970     04 4E 05 F1 | 	add	fp, #4
23974     A7 2A 02 FB | 	rdlong	local03, fp
23978     C4 4E 85 F1 | 	sub	fp, #196
2397c     15 27 5A F2 | 	cmps	local01, local03 wcz
23980     30 00 90 ED |  if_be	jmp	#LR__3136
23984     C0 4E 05 F1 | 	add	fp, #192
23988     A7 30 02 FB | 	rdlong	local06, fp
2398c     C0 4E 85 F1 | 	sub	fp, #192
23990     18 2D C2 FA | 	rdbyte	local04, local06
23994     30 2C 0E F2 | 	cmp	local04, #48 wz
23998     18 00 90 5D |  if_ne	jmp	#LR__3136
2399c     C0 4E 05 F1 | 	add	fp, #192
239a0     A7 26 02 FB | 	rdlong	local01, fp
239a4     01 26 86 F1 | 	sub	local01, #1
239a8     A7 26 62 FC | 	wrlong	local01, fp
239ac     C0 4E 85 F1 | 	sub	fp, #192
239b0     B4 FF 9F FD | 	jmp	#LR__3134
239b4                 | LR__3135
239b4                 | LR__3136
239b4     C0 4E 05 F1 | 	add	fp, #192
239b8     A7 28 02 FB | 	rdlong	local02, fp
239bc     C0 4E 85 F1 | 	sub	fp, #192
239c0     14 27 C2 FA | 	rdbyte	local01, local02
239c4     2E 26 0E F2 | 	cmp	local01, #46 wz
239c8     C0 4E 05 A1 |  if_e	add	fp, #192
239cc     A7 26 02 AB |  if_e	rdlong	local01, fp
239d0     01 26 86 A1 |  if_e	sub	local01, #1
239d4     A7 26 62 AC |  if_e	wrlong	local01, fp
239d8     C0 4E 85 A1 |  if_e	sub	fp, #192
239dc     C0 4E 05 F1 | 	add	fp, #192
239e0     A7 2A 02 FB | 	rdlong	local03, fp
239e4     01 2A 06 F1 | 	add	local03, #1
239e8     A7 2A 62 FC | 	wrlong	local03, fp
239ec     C0 4E 85 F1 | 	sub	fp, #192
239f0                 | LR__3137
239f0     24 4E 05 F1 | 	add	fp, #36
239f4     A7 26 0A FB | 	rdlong	local01, fp wz
239f8     24 4E 85 F1 | 	sub	fp, #36
239fc     B4 00 90 AD |  if_e	jmp	#LR__3140
23a00     C0 4E 05 F1 | 	add	fp, #192
23a04     A7 28 02 FB | 	rdlong	local02, fp
23a08     14 2B 02 F6 | 	mov	local03, local02
23a0c     01 2A 06 F1 | 	add	local03, #1
23a10     A7 2A 62 FC | 	wrlong	local03, fp
23a14     90 4E 85 F1 | 	sub	fp, #144
23a18     A7 2C 02 FB | 	rdlong	local04, fp
23a1c     14 2D 42 FC | 	wrbyte	local04, local02
23a20     90 4E 05 F1 | 	add	fp, #144
23a24     A7 28 02 FB | 	rdlong	local02, fp
23a28     14 2B 02 F6 | 	mov	local03, local02
23a2c     01 2A 06 F1 | 	add	local03, #1
23a30     A7 2A 62 FC | 	wrlong	local03, fp
23a34     60 4E 85 F1 | 	sub	fp, #96
23a38     A7 2C 02 FB | 	rdlong	local04, fp
23a3c     14 2D 42 FC | 	wrbyte	local04, local02
23a40     48 4E 85 F1 | 	sub	fp, #72
23a44     A7 00 68 FC | 	wrlong	#0, fp
23a48     18 4E 85 F1 | 	sub	fp, #24
23a4c                 | LR__3138
23a4c     18 4E 05 F1 | 	add	fp, #24
23a50     A7 28 02 FB | 	rdlong	local02, fp
23a54     44 4E 05 F1 | 	add	fp, #68
23a58     A7 2E 02 FB | 	rdlong	local05, fp
23a5c     5C 4E 85 F1 | 	sub	fp, #92
23a60     17 29 52 F2 | 	cmps	local02, local05 wc
23a64     4C 00 90 3D |  if_ae	jmp	#LR__3139
23a68     C0 4E 05 F1 | 	add	fp, #192
23a6c     A7 34 02 FB | 	rdlong	local08, fp
23a70     1A 3D 02 F6 | 	mov	local12, local08
23a74     01 3C 06 F1 | 	add	local12, #1
23a78     A7 3C 62 FC | 	wrlong	local12, fp
23a7c     A8 4E 85 F1 | 	sub	fp, #168
23a80     A7 32 02 FB | 	rdlong	local07, fp
23a84     19 37 02 F6 | 	mov	local09, local07
23a88     98 4E 05 F1 | 	add	fp, #152
23a8c     A7 38 02 F6 | 	mov	local10, fp
23a90     A7 36 02 F1 | 	add	local09, fp
23a94     1B 3B C2 FA | 	rdbyte	local11, local09
23a98     1A 3B 42 FC | 	wrbyte	local11, local08
23a9c     98 4E 85 F1 | 	sub	fp, #152
23aa0     A7 3C 02 FB | 	rdlong	local12, fp
23aa4     01 3C 06 F1 | 	add	local12, #1
23aa8     A7 3C 62 FC | 	wrlong	local12, fp
23aac     18 4E 85 F1 | 	sub	fp, #24
23ab0     98 FF 9F FD | 	jmp	#LR__3138
23ab4                 | LR__3139
23ab4                 | LR__3140
23ab4     C0 4E 05 F1 | 	add	fp, #192
23ab8     A7 26 02 FB | 	rdlong	local01, fp
23abc     C0 4E 85 F1 | 	sub	fp, #192
23ac0     13 01 48 FC | 	wrbyte	#0, local01
23ac4                 | LR__3141
23ac4     6C 4E 05 F1 | 	add	fp, #108
23ac8     A7 26 0A FB | 	rdlong	local01, fp wz
23acc     6C 4E 85 F1 | 	sub	fp, #108
23ad0     90 01 90 AD |  if_e	jmp	#LR__3152
23ad4     48 4E 05 F1 | 	add	fp, #72
23ad8     A7 2A 0A FB | 	rdlong	local03, fp wz
23adc     48 4E 85 F1 | 	sub	fp, #72
23ae0     80 01 90 AD |  if_e	jmp	#LR__3152
23ae4     C4 4E 05 F1 | 	add	fp, #196
23ae8     A7 12 02 FB | 	rdlong	arg01, fp
23aec     C4 4E 85 F1 | 	sub	fp, #196
23af0     09 45 02 F6 | 	mov	local16, arg01
23af4     97 06 48 FB | 	callpa	#(@LR__3143-@LR__3142)>>2,fcache_load_ptr_
23af8                 | LR__3142
23af8     22 FB C9 FA | 	rdbyte	result1, local16 wz
23afc     01 44 06 51 |  if_ne	add	local16, #1
23b00     F4 FF 9F 5D |  if_ne	jmp	#LR__3142
23b04                 | LR__3143
23b04     09 45 82 F1 | 	sub	local16, arg01
23b08     22 2D 02 F6 | 	mov	local04, local16
23b0c     6C 4E 05 F1 | 	add	fp, #108
23b10     A7 30 02 FB | 	rdlong	local06, fp
23b14     6C 4E 85 F1 | 	sub	fp, #108
23b18     18 2D 5A F2 | 	cmps	local04, local06 wcz
23b1c     44 01 90 ED |  if_be	jmp	#LR__3152
23b20     C4 4E 05 F1 | 	add	fp, #196
23b24     A7 26 02 FB | 	rdlong	local01, fp
23b28     5C 4E 05 F1 | 	add	fp, #92
23b2c     A7 26 62 FC | 	wrlong	local01, fp
23b30     FC 4E 85 F1 | 	sub	fp, #252
23b34     A7 26 0A FB | 	rdlong	local01, fp wz
23b38     24 4E 85 F1 | 	sub	fp, #36
23b3c     20 00 90 AD |  if_e	jmp	#LR__3144
23b40     B8 4E 05 F1 | 	add	fp, #184
23b44     A7 00 68 FC | 	wrlong	#0, fp
23b48     4C 4E 85 F1 | 	sub	fp, #76
23b4c     A7 26 02 FB | 	rdlong	local01, fp
23b50     B0 4E 05 F1 | 	add	fp, #176
23b54     A7 26 62 FC | 	wrlong	local01, fp
23b58     1C 4F 85 F1 | 	sub	fp, #284
23b5c     24 00 90 FD | 	jmp	#LR__3145
23b60                 | LR__3144
23b60     6C 4E 05 F1 | 	add	fp, #108
23b64     A7 26 02 FB | 	rdlong	local01, fp
23b68     01 26 86 F1 | 	sub	local01, #1
23b6c     4C 4E 05 F1 | 	add	fp, #76
23b70     A7 2A 02 FB | 	rdlong	local03, fp
23b74     15 27 82 F1 | 	sub	local01, local03
23b78     64 4E 05 F1 | 	add	fp, #100
23b7c     A7 26 62 FC | 	wrlong	local01, fp
23b80     1C 4F 85 F1 | 	sub	fp, #284
23b84                 | LR__3145
23b84     97 20 48 FB | 	callpa	#(@LR__3147-@LR__3146)>>2,fcache_load_ptr_
23b88                 | LR__3146
23b88     1C 4F 05 F1 | 	add	fp, #284
23b8c     A7 26 0A FB | 	rdlong	local01, fp wz
23b90     1C 4F 85 F1 | 	sub	fp, #284
23b94     30 00 90 AD |  if_e	jmp	#LR__3148
23b98     20 4F 05 F1 | 	add	fp, #288
23b9c     A7 28 02 FB | 	rdlong	local02, fp
23ba0     14 2B 02 F6 | 	mov	local03, local02
23ba4     01 2A 06 F1 | 	add	local03, #1
23ba8     A7 2A 62 FC | 	wrlong	local03, fp
23bac     14 55 48 FC | 	wrbyte	#42, local02
23bb0     04 4E 85 F1 | 	sub	fp, #4
23bb4     A7 26 02 FB | 	rdlong	local01, fp
23bb8     01 26 86 F1 | 	sub	local01, #1
23bbc     A7 26 62 FC | 	wrlong	local01, fp
23bc0     1C 4F 85 F1 | 	sub	fp, #284
23bc4     C0 FF 9F FD | 	jmp	#LR__3146
23bc8                 | LR__3147
23bc8                 | LR__3148
23bc8     B8 4E 05 F1 | 	add	fp, #184
23bcc     A7 26 0A FB | 	rdlong	local01, fp wz
23bd0     B8 4E 85 F1 | 	sub	fp, #184
23bd4     70 00 90 AD |  if_e	jmp	#LR__3151
23bd8     20 4F 05 F1 | 	add	fp, #288
23bdc     A7 28 02 FB | 	rdlong	local02, fp
23be0     14 2B 02 F6 | 	mov	local03, local02
23be4     01 2A 06 F1 | 	add	local03, #1
23be8     A7 2A 62 FC | 	wrlong	local03, fp
23bec     14 5D 48 FC | 	wrbyte	#46, local02
23bf0     04 4E 85 F1 | 	sub	fp, #4
23bf4     A7 00 68 FC | 	wrlong	#0, fp
23bf8     1C 4F 85 F1 | 	sub	fp, #284
23bfc                 | LR__3149
23bfc     1C 4F 05 F1 | 	add	fp, #284
23c00     A7 28 02 FB | 	rdlong	local02, fp
23c04     64 4E 85 F1 | 	sub	fp, #100
23c08     A7 2E 02 FB | 	rdlong	local05, fp
23c0c     B8 4E 85 F1 | 	sub	fp, #184
23c10     17 29 52 F2 | 	cmps	local02, local05 wc
23c14     30 00 90 3D |  if_ae	jmp	#LR__3150
23c18     20 4F 05 F1 | 	add	fp, #288
23c1c     A7 34 02 FB | 	rdlong	local08, fp
23c20     1A 3D 02 F6 | 	mov	local12, local08
23c24     01 3C 06 F1 | 	add	local12, #1
23c28     A7 3C 62 FC | 	wrlong	local12, fp
23c2c     1A 55 48 FC | 	wrbyte	#42, local08
23c30     04 4E 85 F1 | 	sub	fp, #4
23c34     A7 3C 02 FB | 	rdlong	local12, fp
23c38     01 3C 06 F1 | 	add	local12, #1
23c3c     A7 3C 62 FC | 	wrlong	local12, fp
23c40     1C 4F 85 F1 | 	sub	fp, #284
23c44     B4 FF 9F FD | 	jmp	#LR__3149
23c48                 | LR__3150
23c48                 | LR__3151
23c48     20 4F 05 F1 | 	add	fp, #288
23c4c     A7 28 02 FB | 	rdlong	local02, fp
23c50     14 2B 02 F6 | 	mov	local03, local02
23c54     01 2A 06 F1 | 	add	local03, #1
23c58     A7 2A 62 FC | 	wrlong	local03, fp
23c5c     20 4F 85 F1 | 	sub	fp, #288
23c60     14 01 48 FC | 	wrbyte	#0, local02
23c64                 | LR__3152
23c64     04 4E 05 F1 | 	add	fp, #4
23c68     A7 12 02 FB | 	rdlong	arg01, fp
23c6c     04 4E 05 F1 | 	add	fp, #4
23c70     A7 14 02 FB | 	rdlong	arg02, fp
23c74     BC 4E 05 F1 | 	add	fp, #188
23c78     A7 16 02 FB | 	rdlong	arg03, fp
23c7c     C4 4E 85 F1 | 	sub	fp, #196
23c80     C4 EE BF FD | 	call	#__system___fmtstr
23c84                 | LR__3153
23c84     A7 F0 03 F6 | 	mov	ptra, fp
23c88     B2 00 A0 FD | 	call	#popregs_
23c8c                 | __system___fmtfloat_ret
23c8c     2D 00 64 FD | 	ret
23c90                 | 
23c90                 | __system__Left_S
23c90     04 4A 05 F6 | 	mov	COUNT_, #4
23c94     A8 00 A0 FD | 	call	#pushregs_
23c98     09 27 02 F6 | 	mov	local01, arg01
23c9c     0A 29 02 F6 | 	mov	local02, arg02
23ca0     01 28 56 F2 | 	cmps	local02, #1 wc
23ca4     8B 01 00 CF 
23ca8     2E FB 05 C6 |  if_b	mov	result1, ##@LR__5103
23cac     5C 00 90 CD |  if_b	jmp	#LR__3163
23cb0     13 13 02 F6 | 	mov	arg01, local01
23cb4     09 2B 02 F6 | 	mov	local03, arg01
23cb8     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
23cbc                 | LR__3160
23cbc     15 FB C9 FA | 	rdbyte	result1, local03 wz
23cc0     01 2A 06 51 |  if_ne	add	local03, #1
23cc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
23cc8                 | LR__3161
23cc8     09 2B 82 F1 | 	sub	local03, arg01
23ccc     15 FB 01 F6 | 	mov	result1, local03
23cd0     14 FB 59 F2 | 	cmps	result1, local02 wcz
23cd4     13 FB 01 E6 |  if_be	mov	result1, local01
23cd8     30 00 90 ED |  if_be	jmp	#LR__3163
23cdc     14 13 02 F6 | 	mov	arg01, local02
23ce0     02 12 06 F1 | 	add	arg01, #2
23ce4     10 20 B0 FD | 	call	#__system___gc_alloc_managed
23ce8     FD 2C 0A F6 | 	mov	local04, result1 wz
23cec     18 00 90 AD |  if_e	jmp	#LR__3162
23cf0     16 13 02 F6 | 	mov	arg01, local04
23cf4     13 15 02 F6 | 	mov	arg02, local01
23cf8     14 17 02 F6 | 	mov	arg03, local02
23cfc     34 DE BF FD | 	call	#__system____builtin_memmove
23d00     16 29 02 F1 | 	add	local02, local04
23d04     14 01 48 FC | 	wrbyte	#0, local02
23d08                 | LR__3162
23d08     16 FB 01 F6 | 	mov	result1, local04
23d0c                 | LR__3163
23d0c     A7 F0 03 F6 | 	mov	ptra, fp
23d10     B2 00 A0 FD | 	call	#popregs_
23d14                 | __system__Left_S_ret
23d14     2D 00 64 FD | 	ret
23d18                 | 
23d18                 | __system__Right_S
23d18     05 4A 05 F6 | 	mov	COUNT_, #5
23d1c     A8 00 A0 FD | 	call	#pushregs_
23d20     09 27 02 F6 | 	mov	local01, arg01
23d24     0A 29 02 F6 | 	mov	local02, arg02
23d28     01 28 56 F2 | 	cmps	local02, #1 wc
23d2c     8B 01 00 CF 
23d30     2F FB 05 C6 |  if_b	mov	result1, ##@LR__5104
23d34     64 00 90 CD |  if_b	jmp	#LR__3173
23d38     13 13 02 F6 | 	mov	arg01, local01
23d3c     09 2B 02 F6 | 	mov	local03, arg01
23d40     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
23d44                 | LR__3170
23d44     15 FB C9 FA | 	rdbyte	result1, local03 wz
23d48     01 2A 06 51 |  if_ne	add	local03, #1
23d4c     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
23d50                 | LR__3171
23d50     09 2B 82 F1 | 	sub	local03, arg01
23d54     15 FB 01 F6 | 	mov	result1, local03
23d58     FD 2C 02 F6 | 	mov	local04, result1
23d5c     14 2D 5A F2 | 	cmps	local04, local02 wcz
23d60     13 FB 01 E6 |  if_be	mov	result1, local01
23d64     34 00 90 ED |  if_be	jmp	#LR__3173
23d68     14 13 02 F6 | 	mov	arg01, local02
23d6c     02 12 06 F1 | 	add	arg01, #2
23d70     84 1F B0 FD | 	call	#__system___gc_alloc_managed
23d74     FD 2E 0A F6 | 	mov	local05, result1 wz
23d78     1C 00 90 AD |  if_e	jmp	#LR__3172
23d7c     14 2D 82 F1 | 	sub	local04, local02
23d80     13 2D 02 F1 | 	add	local04, local01
23d84     01 28 06 F1 | 	add	local02, #1
23d88     17 13 02 F6 | 	mov	arg01, local05
23d8c     16 15 02 F6 | 	mov	arg02, local04
23d90     14 17 02 F6 | 	mov	arg03, local02
23d94     9C DD BF FD | 	call	#__system____builtin_memmove
23d98                 | LR__3172
23d98     17 FB 01 F6 | 	mov	result1, local05
23d9c                 | LR__3173
23d9c     A7 F0 03 F6 | 	mov	ptra, fp
23da0     B2 00 A0 FD | 	call	#popregs_
23da4                 | __system__Right_S_ret
23da4     2D 00 64 FD | 	ret
23da8                 | 
23da8                 | __system__Mid_S
23da8     05 4A 05 F6 | 	mov	COUNT_, #5
23dac     A8 00 A0 FD | 	call	#pushregs_
23db0     09 27 02 F6 | 	mov	local01, arg01
23db4     0A 29 02 F6 | 	mov	local02, arg02
23db8     01 16 56 F2 | 	cmps	arg03, #1 wc
23dbc     8B 01 00 CF 
23dc0     30 FB 05 C6 |  if_b	mov	result1, ##@LR__5105
23dc4     80 00 90 CD |  if_b	jmp	#LR__3183
23dc8     01 28 86 F1 | 	sub	local02, #1
23dcc     00 28 56 F3 | 	fges	local02, #0 wc
23dd0     13 13 02 F6 | 	mov	arg01, local01
23dd4     09 2B 02 F6 | 	mov	local03, arg01
23dd8     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
23ddc                 | LR__3180
23ddc     15 FB C9 FA | 	rdbyte	result1, local03 wz
23de0     01 2A 06 51 |  if_ne	add	local03, #1
23de4     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
23de8                 | LR__3181
23de8     09 2B 82 F1 | 	sub	local03, arg01
23dec     15 FB 01 F6 | 	mov	result1, local03
23df0     FD 14 02 F6 | 	mov	arg02, result1
23df4     14 15 52 F2 | 	cmps	arg02, local02 wc
23df8     8B 01 00 CF 
23dfc     31 FB 05 C6 |  if_b	mov	result1, ##@LR__5106
23e00     44 00 90 CD |  if_b	jmp	#LR__3183
23e04     0A 2D 02 F6 | 	mov	local04, arg02
23e08     14 2D 82 F1 | 	sub	local04, local02
23e0c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
23e10     0B 2D 02 16 |  if_a	mov	local04, arg03
23e14     16 13 02 F6 | 	mov	arg01, local04
23e18     02 12 06 F1 | 	add	arg01, #2
23e1c     D8 1E B0 FD | 	call	#__system___gc_alloc_managed
23e20     FD 2E 0A F6 | 	mov	local05, result1 wz
23e24     1C 00 90 AD |  if_e	jmp	#LR__3182
23e28     13 29 02 F1 | 	add	local02, local01
23e2c     17 13 02 F6 | 	mov	arg01, local05
23e30     14 15 02 F6 | 	mov	arg02, local02
23e34     16 17 02 F6 | 	mov	arg03, local04
23e38     F8 DC BF FD | 	call	#__system____builtin_memmove
23e3c     17 2D 02 F1 | 	add	local04, local05
23e40     16 01 48 FC | 	wrbyte	#0, local04
23e44                 | LR__3182
23e44     17 FB 01 F6 | 	mov	result1, local05
23e48                 | LR__3183
23e48     A7 F0 03 F6 | 	mov	ptra, fp
23e4c     B2 00 A0 FD | 	call	#popregs_
23e50                 | __system__Mid_S_ret
23e50     2D 00 64 FD | 	ret
23e54                 | 
23e54                 | __system__Chr_S
23e54     01 4A 05 F6 | 	mov	COUNT_, #1
23e58     A8 00 A0 FD | 	call	#pushregs_
23e5c     09 27 02 F6 | 	mov	local01, arg01
23e60     03 12 06 F6 | 	mov	arg01, #3
23e64     90 1E B0 FD | 	call	#__system___gc_alloc_managed
23e68     00 FA 4D F2 | 	cmps	result1, #0 wz
23e6c     FD 26 42 5C |  if_ne	wrbyte	local01, result1
23e70     01 FA 05 51 |  if_ne	add	result1, #1
23e74     FD 00 48 5C |  if_ne	wrbyte	#0, result1
23e78     01 FA 85 51 |  if_ne	sub	result1, #1
23e7c     A7 F0 03 F6 | 	mov	ptra, fp
23e80     B2 00 A0 FD | 	call	#popregs_
23e84                 | __system__Chr_S_ret
23e84     2D 00 64 FD | 	ret
23e88                 | 
23e88                 | __system__str_S
23e88     02 4A 05 F6 | 	mov	COUNT_, #2
23e8c     A8 00 A0 FD | 	call	#pushregs_
23e90     09 27 02 F6 | 	mov	local01, arg01
23e94     10 12 06 F6 | 	mov	arg01, #16
23e98     5C 1E B0 FD | 	call	#__system___gc_alloc_managed
23e9c     FD 28 0A F6 | 	mov	local02, result1 wz
23ea0     30 00 90 AD |  if_e	jmp	#LR__3190
23ea4     F8 13 02 F6 | 	mov	arg01, ptra
23ea8     08 F0 07 F1 | 	add	ptra, #8
23eac     09 29 62 FC | 	wrlong	local02, arg01
23eb0     04 12 06 F1 | 	add	arg01, #4
23eb4     09 01 68 FC | 	wrlong	#0, arg01
23eb8     04 12 86 F1 | 	sub	arg01, #4
23ebc     00 C8 04 FF 
23ec0     00 12 46 F5 | 	or	arg01, ##160432128
23ec4     00 14 06 F6 | 	mov	arg02, #0
23ec8     13 17 02 F6 | 	mov	arg03, local01
23ecc     67 18 06 F6 | 	mov	arg04, #103
23ed0     90 EE BF FD | 	call	#__system___fmtfloat
23ed4                 | LR__3190
23ed4     14 FB 01 F6 | 	mov	result1, local02
23ed8     A7 F0 03 F6 | 	mov	ptra, fp
23edc     B2 00 A0 FD | 	call	#popregs_
23ee0                 | __system__str_S_ret
23ee0     2D 00 64 FD | 	ret
23ee4                 | 
23ee4                 | __system__Number_S
23ee4     08 4A 05 F6 | 	mov	COUNT_, #8
23ee8     A8 00 A0 FD | 	call	#pushregs_
23eec     09 27 02 F6 | 	mov	local01, arg01
23ef0     0A 29 0A F6 | 	mov	local02, arg02 wz
23ef4     0B 2B 02 F6 | 	mov	local03, arg03
23ef8     3C 00 90 5D |  if_ne	jmp	#LR__3202
23efc     01 28 06 F6 | 	mov	local02, #1
23f00     15 2D 02 F6 | 	mov	local04, local03
23f04     01 2E 06 F6 | 	mov	local05, #1
23f08     97 16 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
23f0c                 | LR__3200
23f0c     00 30 06 F6 | 	mov	local06, #0
23f10     13 2D 1A F2 | 	cmp	local04, local01 wcz
23f14     01 30 66 E6 |  if_be	neg	local06, #1
23f18     16 2F 12 F2 | 	cmp	local05, local04 wc
23f1c     19 33 A2 F1 | 	subx	local07, local07
23f20     19 31 CA F7 | 	test	local06, local07 wz
23f24     15 2D 02 5D |  if_ne	qmul	local04, local03
23f28     16 2F 02 56 |  if_ne	mov	local05, local04
23f2c     01 28 06 51 |  if_ne	add	local02, #1
23f30     18 2C 62 5D |  if_ne	getqx	local04
23f34     D4 FF 9F 5D |  if_ne	jmp	#LR__3200
23f38                 | LR__3201
23f38                 | LR__3202
23f38     20 28 36 F3 | 	fle	local02, #32 wc
23f3c     14 13 02 F6 | 	mov	arg01, local02
23f40     02 12 06 F1 | 	add	arg01, #2
23f44     B0 1D B0 FD | 	call	#__system___gc_alloc_managed
23f48     FD 30 02 F6 | 	mov	local06, result1
23f4c     14 33 02 F6 | 	mov	local07, local02
23f50     18 33 02 F1 | 	add	local07, local06
23f54     19 01 48 FC | 	wrbyte	#0, local07
23f58     97 1A 48 FB | 	callpa	#(@LR__3204-@LR__3203)>>2,fcache_load_ptr_
23f5c                 | LR__3203
23f5c     01 28 16 F2 | 	cmp	local02, #1 wc
23f60     2C 00 90 CD |  if_b	jmp	#LR__3205
23f64     15 27 12 FD | 	qdiv	local01, local03
23f68     01 28 86 F1 | 	sub	local02, #1
23f6c     14 33 02 F6 | 	mov	local07, local02
23f70     18 33 02 F1 | 	add	local07, local06
23f74     19 34 62 FD | 	getqy	local08
23f78     0A 34 16 F2 | 	cmp	local08, #10 wc
23f7c     30 34 06 C1 |  if_b	add	local08, #48
23f80     37 34 06 31 |  if_ae	add	local08, #55
23f84     19 35 42 FC | 	wrbyte	local08, local07
23f88     18 26 62 FD | 	getqx	local01
23f8c     CC FF 9F FD | 	jmp	#LR__3203
23f90                 | LR__3204
23f90                 | LR__3205
23f90     18 FB 01 F6 | 	mov	result1, local06
23f94     A7 F0 03 F6 | 	mov	ptra, fp
23f98     B2 00 A0 FD | 	call	#popregs_
23f9c                 | __system__Number_S_ret
23f9c     2D 00 64 FD | 	ret
23fa0                 | 
23fa0                 | __system__LCase_S
23fa0     07 4A 05 F6 | 	mov	COUNT_, #7
23fa4     A8 00 A0 FD | 	call	#pushregs_
23fa8     09 27 02 F6 | 	mov	local01, arg01
23fac     09 29 02 F6 | 	mov	local02, arg01
23fb0     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
23fb4                 | LR__3210
23fb4     14 FB C9 FA | 	rdbyte	result1, local02 wz
23fb8     01 28 06 51 |  if_ne	add	local02, #1
23fbc     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
23fc0                 | LR__3211
23fc0     09 29 82 F1 | 	sub	local02, arg01
23fc4     14 FB 01 F6 | 	mov	result1, local02
23fc8     FD 28 0A F6 | 	mov	local02, result1 wz
23fcc     8B 01 00 AF 
23fd0     32 FB 05 A6 |  if_e	mov	result1, ##@LR__5107
23fd4     7C 00 90 AD |  if_e	jmp	#LR__3217
23fd8     14 13 02 F6 | 	mov	arg01, local02
23fdc     02 12 06 F1 | 	add	arg01, #2
23fe0     14 1D B0 FD | 	call	#__system___gc_alloc_managed
23fe4     FD 2A 0A F6 | 	mov	local03, result1 wz
23fe8     64 00 90 AD |  if_e	jmp	#LR__3216
23fec     01 2C 66 F6 | 	neg	local04, #1
23ff0     97 26 48 FB | 	callpa	#(@LR__3215-@LR__3212)>>2,fcache_load_ptr_
23ff4                 | LR__3212
23ff4     01 2C 06 F1 | 	add	local04, #1
23ff8     16 2F 02 F6 | 	mov	local05, local04
23ffc     13 2F 02 F1 | 	add	local05, local01
24000     17 31 C2 FA | 	rdbyte	local06, local05
24004     41 30 56 F2 | 	cmps	local06, #65 wc
24008     18 00 90 CD |  if_b	jmp	#LR__3213
2400c     5B 30 56 F2 | 	cmps	local06, #91 wc
24010     16 33 02 C6 |  if_b	mov	local07, local04
24014     15 33 02 C1 |  if_b	add	local07, local03
24018     20 30 06 C1 |  if_b	add	local06, #32
2401c     19 31 42 CC |  if_b	wrbyte	local06, local07
24020     0C 00 90 CD |  if_b	jmp	#LR__3214
24024                 | LR__3213
24024     16 33 02 F6 | 	mov	local07, local04
24028     15 33 02 F1 | 	add	local07, local03
2402c     19 31 42 FC | 	wrbyte	local06, local07
24030                 | LR__3214
24030     14 31 02 F6 | 	mov	local06, local02
24034     01 30 86 F1 | 	sub	local06, #1
24038     18 2D 0A F2 | 	cmp	local04, local06 wz
2403c     B4 FF 9F 5D |  if_ne	jmp	#LR__3212
24040                 | LR__3215
24040     15 29 02 F1 | 	add	local02, local03
24044     14 01 48 FC | 	wrbyte	#0, local02
24048     15 FB 01 F6 | 	mov	result1, local03
2404c     04 00 90 FD | 	jmp	#LR__3217
24050                 | LR__3216
24050     15 FB 01 F6 | 	mov	result1, local03
24054                 | LR__3217
24054     A7 F0 03 F6 | 	mov	ptra, fp
24058     B2 00 A0 FD | 	call	#popregs_
2405c                 | __system__LCase_S_ret
2405c     2D 00 64 FD | 	ret
24060                 | 
24060                 | __system__LTrim_S
24060     05 4A 05 F6 | 	mov	COUNT_, #5
24064     A8 00 A0 FD | 	call	#pushregs_
24068     09 27 02 F6 | 	mov	local01, arg01
2406c     09 29 02 F6 | 	mov	local02, arg01
24070     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
24074                 | LR__3220
24074     14 FB C9 FA | 	rdbyte	result1, local02 wz
24078     01 28 06 51 |  if_ne	add	local02, #1
2407c     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
24080                 | LR__3221
24080     09 29 82 F1 | 	sub	local02, arg01
24084     14 FB 01 F6 | 	mov	result1, local02
24088     FD 28 0A F6 | 	mov	local02, result1 wz
2408c     8B 01 00 AF 
24090     33 FB 05 A6 |  if_e	mov	result1, ##@LR__5108
24094     7C 00 90 AD |  if_e	jmp	#LR__3226
24098     00 2A 06 F6 | 	mov	local03, #0
2409c     14 2D 02 F6 | 	mov	local04, local02
240a0                 | LR__3222
240a0     16 2B 52 F2 | 	cmps	local03, local04 wc
240a4     68 00 90 3D |  if_ae	jmp	#LR__3225
240a8     15 17 02 F6 | 	mov	arg03, local03
240ac     13 17 02 F1 | 	add	arg03, local01
240b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
240b4     20 16 0E F2 | 	cmp	arg03, #32 wz
240b8     4C 00 90 AD |  if_e	jmp	#LR__3224
240bc     14 13 02 F6 | 	mov	arg01, local02
240c0     15 13 82 F1 | 	sub	arg01, local03
240c4     02 12 06 F1 | 	add	arg01, #2
240c8     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
240cc     FD 2E 0A F6 | 	mov	local05, result1 wz
240d0     2C 00 90 AD |  if_e	jmp	#LR__3223
240d4     15 15 02 F6 | 	mov	arg02, local03
240d8     13 15 02 F1 | 	add	arg02, local01
240dc     14 17 02 F6 | 	mov	arg03, local02
240e0     15 17 82 F1 | 	sub	arg03, local03
240e4     17 13 02 F6 | 	mov	arg01, local05
240e8     48 DA BF FD | 	call	#__system____builtin_memmove
240ec     15 29 82 F1 | 	sub	local02, local03
240f0     17 29 02 F1 | 	add	local02, local05
240f4     14 01 48 FC | 	wrbyte	#0, local02
240f8     17 FB 01 F6 | 	mov	result1, local05
240fc     14 00 90 FD | 	jmp	#LR__3226
24100                 | LR__3223
24100     17 FB 01 F6 | 	mov	result1, local05
24104     0C 00 90 FD | 	jmp	#LR__3226
24108                 | LR__3224
24108     01 2A 06 F1 | 	add	local03, #1
2410c     90 FF 9F FD | 	jmp	#LR__3222
24110                 | LR__3225
24110     13 FB 01 F6 | 	mov	result1, local01
24114                 | LR__3226
24114     A7 F0 03 F6 | 	mov	ptra, fp
24118     B2 00 A0 FD | 	call	#popregs_
2411c                 | __system__LTrim_S_ret
2411c     2D 00 64 FD | 	ret
24120                 | 
24120                 | __system__RTrim_S
24120     04 4A 05 F6 | 	mov	COUNT_, #4
24124     A8 00 A0 FD | 	call	#pushregs_
24128     09 27 02 F6 | 	mov	local01, arg01
2412c     09 29 02 F6 | 	mov	local02, arg01
24130     97 06 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24134                 | LR__3230
24134     14 FB C9 FA | 	rdbyte	result1, local02 wz
24138     01 28 06 51 |  if_ne	add	local02, #1
2413c     F4 FF 9F 5D |  if_ne	jmp	#LR__3230
24140                 | LR__3231
24140     09 29 82 F1 | 	sub	local02, arg01
24144     14 FB 01 F6 | 	mov	result1, local02
24148     FD 28 0A F6 | 	mov	local02, result1 wz
2414c     8B 01 00 AF 
24150     34 FB 05 A6 |  if_e	mov	result1, ##@LR__5109
24154     74 00 90 AD |  if_e	jmp	#LR__3235
24158     14 2B 02 F6 | 	mov	local03, local02
2415c     01 2A 86 F1 | 	sub	local03, #1
24160                 | LR__3232
24160     15 15 02 F6 | 	mov	arg02, local03
24164     13 15 02 F1 | 	add	arg02, local01
24168     0A 29 C2 FA | 	rdbyte	local02, arg02
2416c     20 28 0E F2 | 	cmp	local02, #32 wz
24170     44 00 90 AD |  if_e	jmp	#LR__3234
24174     15 13 02 F6 | 	mov	arg01, local03
24178     02 12 06 F1 | 	add	arg01, #2
2417c     78 1B B0 FD | 	call	#__system___gc_alloc_managed
24180     FD 2C 0A F6 | 	mov	local04, result1 wz
24184     28 00 90 AD |  if_e	jmp	#LR__3233
24188     15 17 02 F6 | 	mov	arg03, local03
2418c     01 16 06 F1 | 	add	arg03, #1
24190     16 13 02 F6 | 	mov	arg01, local04
24194     13 15 02 F6 | 	mov	arg02, local01
24198     98 D9 BF FD | 	call	#__system____builtin_memmove
2419c     01 2A 06 F1 | 	add	local03, #1
241a0     16 2B 02 F1 | 	add	local03, local04
241a4     15 01 48 FC | 	wrbyte	#0, local03
241a8     16 FB 01 F6 | 	mov	result1, local04
241ac     1C 00 90 FD | 	jmp	#LR__3235
241b0                 | LR__3233
241b0     16 FB 01 F6 | 	mov	result1, local04
241b4     14 00 90 FD | 	jmp	#LR__3235
241b8                 | LR__3234
241b8     01 2A 86 F1 | 	sub	local03, #1
241bc     00 2A 56 F2 | 	cmps	local03, #0 wc
241c0     9C FF 9F 3D |  if_ae	jmp	#LR__3232
241c4     8B 01 00 FF 
241c8     35 FB 05 F6 | 	mov	result1, ##@LR__5110
241cc                 | LR__3235
241cc     A7 F0 03 F6 | 	mov	ptra, fp
241d0     B2 00 A0 FD | 	call	#popregs_
241d4                 | __system__RTrim_S_ret
241d4     2D 00 64 FD | 	ret
241d8                 | 
241d8                 | __system__Instr
241d8     07 4A 05 F6 | 	mov	COUNT_, #7
241dc     A8 00 A0 FD | 	call	#pushregs_
241e0     09 27 02 F6 | 	mov	local01, arg01
241e4     0A 29 02 F6 | 	mov	local02, arg02
241e8     0B 2B 02 F6 | 	mov	local03, arg03
241ec     15 13 02 F6 | 	mov	arg01, local03
241f0     09 2D 02 F6 | 	mov	local04, arg01
241f4     97 06 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
241f8                 | LR__3240
241f8     16 FB C9 FA | 	rdbyte	result1, local04 wz
241fc     01 2C 06 51 |  if_ne	add	local04, #1
24200     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
24204                 | LR__3241
24204     09 2D 82 F1 | 	sub	local04, arg01
24208     16 2F 02 F6 | 	mov	local05, local04
2420c     14 13 02 F6 | 	mov	arg01, local02
24210     09 2D 02 F6 | 	mov	local04, arg01
24214     97 06 48 FB | 	callpa	#(@LR__3243-@LR__3242)>>2,fcache_load_ptr_
24218                 | LR__3242
24218     16 FB C9 FA | 	rdbyte	result1, local04 wz
2421c     01 2C 06 51 |  if_ne	add	local04, #1
24220     F4 FF 9F 5D |  if_ne	jmp	#LR__3242
24224                 | LR__3243
24224     09 2D 82 F1 | 	sub	local04, arg01
24228     16 FB 01 F6 | 	mov	result1, local04
2422c     FD 18 0A F6 | 	mov	arg04, result1 wz
24230     00 FA 05 A6 |  if_e	mov	result1, #0
24234     98 00 90 AD |  if_e	jmp	#LR__3247
24238     00 2E 0E F2 | 	cmp	local05, #0 wz
2423c     00 FA 05 A6 |  if_e	mov	result1, #0
24240     8C 00 90 AD |  if_e	jmp	#LR__3247
24244     0C 27 5A F2 | 	cmps	local01, arg04 wcz
24248     00 FA 05 16 |  if_a	mov	result1, #0
2424c     80 00 90 1D |  if_a	jmp	#LR__3247
24250     01 26 56 F2 | 	cmps	local01, #1 wc
24254     01 26 06 C6 |  if_b	mov	local01, #1
24258     15 31 C2 FA | 	rdbyte	local06, local03
2425c     01 2E 0E F2 | 	cmp	local05, #1 wz
24260     18 00 90 5D |  if_ne	jmp	#LR__3244
24264     14 13 02 F6 | 	mov	arg01, local02
24268     18 15 02 F6 | 	mov	arg02, local06
2426c     13 17 02 F6 | 	mov	arg03, local01
24270     00 18 06 F6 | 	mov	arg04, #0
24274     18 37 B0 FD | 	call	#__system____ScanForChar
24278     54 00 90 FD | 	jmp	#LR__3247
2427c                 | LR__3244
2427c     13 33 02 F6 | 	mov	local07, local01
24280                 | LR__3245
24280     14 13 02 F6 | 	mov	arg01, local02
24284     18 15 02 F6 | 	mov	arg02, local06
24288     19 17 02 F6 | 	mov	arg03, local07
2428c     00 18 06 F6 | 	mov	arg04, #0
24290     FC 36 B0 FD | 	call	#__system____ScanForChar
24294     FD 32 0A F6 | 	mov	local07, result1 wz
24298     30 00 90 AD |  if_e	jmp	#LR__3246
2429c     17 17 02 F6 | 	mov	arg03, local05
242a0     14 13 02 F6 | 	mov	arg01, local02
242a4     19 15 02 F6 | 	mov	arg02, local07
242a8     FC FA BF FD | 	call	#__system__Mid_S
242ac     FD 12 02 F6 | 	mov	arg01, result1
242b0     15 15 02 F6 | 	mov	arg02, local03
242b4     84 D9 BF FD | 	call	#__system___string_cmp
242b8     00 FA 0D F2 | 	cmp	result1, #0 wz
242bc     19 FB 01 A6 |  if_e	mov	result1, local07
242c0     0C 00 90 AD |  if_e	jmp	#LR__3247
242c4     17 33 02 F1 | 	add	local07, local05
242c8     B4 FF 9F FD | 	jmp	#LR__3245
242cc                 | LR__3246
242cc     00 FA 05 F6 | 	mov	result1, #0
242d0                 | LR__3247
242d0     A7 F0 03 F6 | 	mov	ptra, fp
242d4     B2 00 A0 FD | 	call	#popregs_
242d8                 | __system__Instr_ret
242d8     2D 00 64 FD | 	ret
242dc                 | 
242dc                 | __system__InstrRev
242dc     07 4A 05 F6 | 	mov	COUNT_, #7
242e0     A8 00 A0 FD | 	call	#pushregs_
242e4     09 27 02 F6 | 	mov	local01, arg01
242e8     0A 29 02 F6 | 	mov	local02, arg02
242ec     0B 2B 02 F6 | 	mov	local03, arg03
242f0     15 13 02 F6 | 	mov	arg01, local03
242f4     09 2D 02 F6 | 	mov	local04, arg01
242f8     97 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
242fc                 | LR__3250
242fc     16 FB C9 FA | 	rdbyte	result1, local04 wz
24300     01 2C 06 51 |  if_ne	add	local04, #1
24304     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
24308                 | LR__3251
24308     09 2D 82 F1 | 	sub	local04, arg01
2430c     16 2F 02 F6 | 	mov	local05, local04
24310     14 13 02 F6 | 	mov	arg01, local02
24314     09 2D 02 F6 | 	mov	local04, arg01
24318     97 06 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
2431c                 | LR__3252
2431c     16 FB C9 FA | 	rdbyte	result1, local04 wz
24320     01 2C 06 51 |  if_ne	add	local04, #1
24324     F4 FF 9F 5D |  if_ne	jmp	#LR__3252
24328                 | LR__3253
24328     09 2D 82 F1 | 	sub	local04, arg01
2432c     16 FB 01 F6 | 	mov	result1, local04
24330     FD 18 0A F6 | 	mov	arg04, result1 wz
24334     00 FA 05 A6 |  if_e	mov	result1, #0
24338     98 00 90 AD |  if_e	jmp	#LR__3257
2433c     00 2E 0E F2 | 	cmp	local05, #0 wz
24340     00 FA 05 A6 |  if_e	mov	result1, #0
24344     8C 00 90 AD |  if_e	jmp	#LR__3257
24348     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2434c     0C 27 02 16 |  if_a	mov	local01, arg04
24350     01 26 56 F2 | 	cmps	local01, #1 wc
24354     01 26 06 C6 |  if_b	mov	local01, #1
24358     15 31 C2 FA | 	rdbyte	local06, local03
2435c     01 2E 0E F2 | 	cmp	local05, #1 wz
24360     18 00 90 5D |  if_ne	jmp	#LR__3254
24364     14 13 02 F6 | 	mov	arg01, local02
24368     18 15 02 F6 | 	mov	arg02, local06
2436c     13 17 02 F6 | 	mov	arg03, local01
24370     01 18 06 F6 | 	mov	arg04, #1
24374     18 36 B0 FD | 	call	#__system____ScanForChar
24378     58 00 90 FD | 	jmp	#LR__3257
2437c                 | LR__3254
2437c     17 33 02 F6 | 	mov	local07, local05
24380     01 32 86 F1 | 	sub	local07, #1
24384                 | LR__3255
24384     14 13 02 F6 | 	mov	arg01, local02
24388     18 15 02 F6 | 	mov	arg02, local06
2438c     19 17 02 F6 | 	mov	arg03, local07
24390     01 18 06 F6 | 	mov	arg04, #1
24394     F8 35 B0 FD | 	call	#__system____ScanForChar
24398     FD 32 0A F6 | 	mov	local07, result1 wz
2439c     30 00 90 AD |  if_e	jmp	#LR__3256
243a0     17 17 02 F6 | 	mov	arg03, local05
243a4     14 13 02 F6 | 	mov	arg01, local02
243a8     19 15 02 F6 | 	mov	arg02, local07
243ac     F8 F9 BF FD | 	call	#__system__Mid_S
243b0     FD 12 02 F6 | 	mov	arg01, result1
243b4     15 15 02 F6 | 	mov	arg02, local03
243b8     80 D8 BF FD | 	call	#__system___string_cmp
243bc     00 FA 0D F2 | 	cmp	result1, #0 wz
243c0     19 FB 01 A6 |  if_e	mov	result1, local07
243c4     0C 00 90 AD |  if_e	jmp	#LR__3257
243c8     17 33 82 F1 | 	sub	local07, local05
243cc     B4 FF 9F FD | 	jmp	#LR__3255
243d0                 | LR__3256
243d0     00 FA 05 F6 | 	mov	result1, #0
243d4                 | LR__3257
243d4     A7 F0 03 F6 | 	mov	ptra, fp
243d8     B2 00 A0 FD | 	call	#popregs_
243dc                 | __system__InstrRev_ret
243dc     2D 00 64 FD | 	ret
243e0                 | 
243e0                 | __system___remove
243e0     06 4A 05 F6 | 	mov	COUNT_, #6
243e4     A8 00 A0 FD | 	call	#pushregs_
243e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
243ec     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
243f0     09 15 02 F6 | 	mov	arg02, arg01
243f4     13 13 02 F6 | 	mov	arg01, local01
243f8     00 16 06 F6 | 	mov	arg03, #0
243fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24400     A8 DF BF FD | 	call	#__system____getvfsforfile
24404     FD 28 0A F6 | 	mov	local02, result1 wz
24408     10 00 90 AD |  if_e	jmp	#LR__3260
2440c     20 28 06 F1 | 	add	local02, #32
24410     14 13 0A FB | 	rdlong	arg01, local02 wz
24414     20 28 86 F1 | 	sub	local02, #32
24418     14 00 90 5D |  if_ne	jmp	#LR__3261
2441c                 | LR__3260
2441c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24420     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24424     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24428     01 FA 65 F6 | 	neg	result1, #1
2442c     A8 00 90 FD | 	jmp	#LR__3264
24430                 | LR__3261
24430     40 28 06 F1 | 	add	local02, #64
24434     14 2B 02 FB | 	rdlong	local03, local02
24438     15 2D 02 F6 | 	mov	local04, local03
2443c     40 28 86 F1 | 	sub	local02, #64
24440     13 2C 46 F7 | 	zerox	local04, #19
24444     14 2A 46 F0 | 	shr	local03, #20
24448     02 2A 66 F0 | 	shl	local03, #2
2444c     ED 2A 02 F1 | 	add	local03, __methods__
24450     15 2B 02 FB | 	rdlong	local03, local03
24454     13 13 02 F6 | 	mov	arg01, local01
24458     F2 2E 02 F6 | 	mov	local05, objptr
2445c     16 E5 01 F6 | 	mov	objptr, local04
24460     2D 2A 62 FD | 	call	local03
24464     17 E5 01 F6 | 	mov	objptr, local05
24468     FD 30 02 F6 | 	mov	local06, result1
2446c     FF FF 7F FF 
24470     F2 31 0E F2 | 	cmp	local06, ##-14 wz
24474     38 00 90 5D |  if_ne	jmp	#LR__3262
24478     3C 28 06 F1 | 	add	local02, #60
2447c     14 31 02 FB | 	rdlong	local06, local02
24480     18 2B 02 F6 | 	mov	local03, local06
24484     13 30 46 F7 | 	zerox	local06, #19
24488     14 2A 46 F0 | 	shr	local03, #20
2448c     02 2A 66 F0 | 	shl	local03, #2
24490     ED 2A 02 F1 | 	add	local03, __methods__
24494     15 2B 02 FB | 	rdlong	local03, local03
24498     13 13 02 F6 | 	mov	arg01, local01
2449c     F2 2E 02 F6 | 	mov	local05, objptr
244a0     18 E5 01 F6 | 	mov	objptr, local06
244a4     2D 2A 62 FD | 	call	local03
244a8     17 E5 01 F6 | 	mov	objptr, local05
244ac     FD 30 02 F6 | 	mov	local06, result1
244b0                 | LR__3262
244b0     00 30 0E F2 | 	cmp	local06, #0 wz
244b4     1C 00 90 AD |  if_e	jmp	#LR__3263
244b8     18 13 6A F6 | 	neg	arg01, local06 wz
244bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
244c0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
244c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
244c8     01 FA 65 56 |  if_ne	neg	result1, #1
244cc     00 FA 05 A6 |  if_e	mov	result1, #0
244d0     04 00 90 FD | 	jmp	#LR__3264
244d4                 | LR__3263
244d4     00 FA 05 F6 | 	mov	result1, #0
244d8                 | LR__3264
244d8     A7 F0 03 F6 | 	mov	ptra, fp
244dc     B2 00 A0 FD | 	call	#popregs_
244e0                 | __system___remove_ret
244e0     2D 00 64 FD | 	ret
244e4                 | 
244e4                 | __system___strerror
244e4     00 12 56 F2 | 	cmps	arg01, #0 wc
244e8     08 00 90 CD |  if_b	jmp	#LR__3270
244ec     1A 12 56 F2 | 	cmps	arg01, #26 wc
244f0     04 00 90 CD |  if_b	jmp	#LR__3271
244f4                 | LR__3270
244f4     19 12 06 F6 | 	mov	arg01, #25
244f8                 | LR__3271
244f8     02 12 66 F0 | 	shl	arg01, #2
244fc     01 00 00 FF 
24500     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
24504     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
24508     09 FB 01 FB | 	rdlong	result1, arg01
2450c     01 00 00 FF 
24510     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
24514                 | __system___strerror_ret
24514     2D 00 64 FD | 	ret
24518                 | 
24518                 | __system___int64_shl
24518     20 16 CE F7 | 	test	arg03, #32 wz
2451c     09 15 02 56 |  if_ne	mov	arg02, arg01
24520     00 12 06 56 |  if_ne	mov	arg01, #0
24524     1F 16 CE F7 | 	test	arg03, #31 wz
24528     18 00 90 AD |  if_e	jmp	#LR__3280
2452c     0B 15 62 F0 | 	shl	arg02, arg03
24530     09 FB 01 F6 | 	mov	result1, arg01
24534     0B FD 61 F6 | 	neg	result2, arg03
24538     FE FA 41 F0 | 	shr	result1, result2
2453c     FD 14 42 F5 | 	or	arg02, result1
24540     0B 13 62 F0 | 	shl	arg01, arg03
24544                 | LR__3280
24544     0A FD 01 F6 | 	mov	result2, arg02
24548     09 FB 01 F6 | 	mov	result1, arg01
2454c                 | __system___int64_shl_ret
2454c     2D 00 64 FD | 	ret
24550                 | 
24550                 | __system___usepins
24550     14 E6 05 F1 | 	add	ptr___system__dat__, #20
24554     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
24558     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2455c     00 13 CA F7 | 	test	arg01, _var01 wz
24560     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
24564     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
24568     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2456c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
24570     00 FA 05 56 |  if_ne	mov	result1, #0
24574     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
24578     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2457c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
24580     09 03 42 F5 | 	or	_var02, arg01
24584     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
24588     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2458c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
24590     0A 03 42 F5 | 	or	_var02, arg02
24594     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
24598     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2459c     01 FA 65 F6 | 	neg	result1, #1
245a0                 | __system___usepins_ret
245a0     2D 00 64 FD | 	ret
245a4                 | 
245a4                 | __system___freepins
245a4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
245a8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
245ac     09 01 22 F5 | 	andn	_var01, arg01
245b0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
245b4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
245b8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
245bc     0A 01 22 F5 | 	andn	_var01, arg02
245c0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
245c4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
245c8                 | __system___freepins_ret
245c8     2D 00 64 FD | 	ret
245cc                 | 
245cc                 | __system___float_fromuns
245cc     09 17 0A F6 | 	mov	arg03, arg01 wz
245d0     0B FB 01 A6 |  if_e	mov	result1, arg03
245d4     24 00 90 AD |  if_e	jmp	#LR__3290
245d8     0B 15 92 F7 | 	encod	arg02, arg03 wc
245dc     01 14 06 C1 |  if_b	add	arg02, #1
245e0     01 14 86 F1 | 	sub	arg02, #1
245e4     1F 12 06 F6 | 	mov	arg01, #31
245e8     0A 13 82 F1 | 	sub	arg01, arg02
245ec     09 17 62 F0 | 	shl	arg03, arg01
245f0     02 16 46 F0 | 	shr	arg03, #2
245f4     00 12 06 F6 | 	mov	arg01, #0
245f8     4C 09 B0 FD | 	call	#__system___float_Pack
245fc                 | LR__3290
245fc                 | __system___float_fromuns_ret
245fc     2D 00 64 FD | 	ret
24600                 | 
24600                 | __system___float_add
24600     0F 4A 05 F6 | 	mov	COUNT_, #15
24604     A8 00 A0 FD | 	call	#pushregs_
24608     09 27 02 F6 | 	mov	local01, arg01
2460c     0A 29 02 F6 | 	mov	local02, arg02
24610     00 2A 06 F6 | 	mov	local03, #0
24614     13 2D 02 F6 | 	mov	local04, local01
24618     16 2F 02 F6 | 	mov	local05, local04
2461c     16 2E 46 F7 | 	zerox	local05, #22
24620     16 31 02 F6 | 	mov	local06, local04
24624     01 30 66 F0 | 	shl	local06, #1
24628     18 30 46 F0 | 	shr	local06, #24
2462c     1F 2C 46 F0 | 	shr	local04, #31
24630     14 13 02 F6 | 	mov	arg01, local02
24634     09 FB 01 F6 | 	mov	result1, arg01
24638     FD 32 02 F6 | 	mov	local07, result1
2463c     19 35 02 F6 | 	mov	local08, local07
24640     16 34 46 F7 | 	zerox	local08, #22
24644     19 37 02 F6 | 	mov	local09, local07
24648     01 36 66 F0 | 	shl	local09, #1
2464c     18 36 46 F0 | 	shr	local09, #24
24650     1B 39 02 F6 | 	mov	local10, local09
24654     1F 32 46 F0 | 	shr	local07, #31
24658     00 3A 06 F6 | 	mov	local11, #0
2465c     00 3C 06 F6 | 	mov	local12, #0
24660     1C 31 12 F2 | 	cmp	local06, local10 wc
24664     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
24668     2C 00 90 1D |  if_a	jmp	#LR__3300
2466c     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
24670     24 00 90 3D |  if_ae	jmp	#LR__3300
24674     17 3F 02 F6 | 	mov	local13, local05
24678     1A 2F 02 F6 | 	mov	local05, local08
2467c     1F 35 02 F6 | 	mov	local08, local13
24680     18 3F 02 F6 | 	mov	local13, local06
24684     1C 31 02 F6 | 	mov	local06, local10
24688     1F 39 02 F6 | 	mov	local10, local13
2468c     16 3F 02 F6 | 	mov	local13, local04
24690     19 2D 02 F6 | 	mov	local04, local07
24694     1F 33 02 F6 | 	mov	local07, local13
24698                 | LR__3300
24698     FF 30 0E F2 | 	cmp	local06, #255 wz
2469c     70 01 90 AD |  if_e	jmp	#LR__3315
246a0     00 30 0E F2 | 	cmp	local06, #0 wz
246a4     AC 01 90 AD |  if_e	jmp	#LR__3317
246a8     17 2E 26 F4 | 	bith	local05, #23
246ac                 | LR__3301
246ac     00 38 0E F2 | 	cmp	local10, #0 wz
246b0     F0 01 90 AD |  if_e	jmp	#LR__3321
246b4     17 34 26 F4 | 	bith	local08, #23
246b8                 | LR__3302
246b8     7F 30 86 F1 | 	sub	local06, #127
246bc     7F 38 86 F1 | 	sub	local10, #127
246c0     18 41 02 F6 | 	mov	local14, local06
246c4     1C 41 82 F1 | 	sub	local14, local10
246c8     97 14 48 FB | 	callpa	#(@LR__3304-@LR__3303)>>2,fcache_load_ptr_
246cc                 | LR__3303
246cc     20 40 56 F2 | 	cmps	local14, #32 wc
246d0     20 00 90 CD |  if_b	jmp	#LR__3305
246d4     1A 37 02 F6 | 	mov	local09, local08
246d8     00 3A 0E F2 | 	cmp	local11, #0 wz
246dc     6F 3A 62 FD | 	wrnz	local11
246e0     1D 37 42 F5 | 	or	local09, local11
246e4     1B 3B 02 F6 | 	mov	local11, local09
246e8     00 34 06 F6 | 	mov	local08, #0
246ec     20 40 86 F1 | 	sub	local14, #32
246f0     D8 FF 9F FD | 	jmp	#LR__3303
246f4                 | LR__3304
246f4                 | LR__3305
246f4     00 40 0E F2 | 	cmp	local14, #0 wz
246f8     38 00 90 AD |  if_e	jmp	#LR__3306
246fc     1A 3F 02 F6 | 	mov	local13, local08
24700     20 38 06 F6 | 	mov	local10, #32
24704     20 39 82 F1 | 	sub	local10, local14
24708     1C 3F 62 F0 | 	shl	local13, local10
2470c     1D 39 02 F6 | 	mov	local10, local11
24710     20 36 06 F6 | 	mov	local09, #32
24714     20 37 82 F1 | 	sub	local09, local14
24718     1B 39 6A F0 | 	shl	local10, local09 wz
2471c     20 3B 42 F0 | 	shr	local11, local14
24720     20 35 42 F0 | 	shr	local08, local14
24724     1F 3B 42 F5 | 	or	local11, local13
24728     00 42 06 F6 | 	mov	local15, #0
2472c     01 42 06 56 |  if_ne	mov	local15, #1
24730     21 3B 42 F5 | 	or	local11, local15
24734                 | LR__3306
24734     16 43 02 F6 | 	mov	local15, local04
24738     19 43 62 F5 | 	xor	local15, local07
2473c     01 42 CE F7 | 	test	local15, #1 wz
24740     18 00 90 AD |  if_e	jmp	#LR__3307
24744     1A 35 22 F6 | 	not	local08, local08
24748     1D 3B 22 F6 | 	not	local11, local11
2474c     01 3A 0E F1 | 	add	local11, #1 wz
24750     00 42 06 F6 | 	mov	local15, #0
24754     01 42 06 A6 |  if_e	mov	local15, #1
24758     21 35 02 F1 | 	add	local08, local15
2475c                 | LR__3307
2475c     1D 3D 12 F1 | 	add	local12, local11 wc
24760     1A 2F 22 F1 | 	addx	local05, local08
24764     00 2E 56 F2 | 	cmps	local05, #0 wc
24768     1C 00 90 3D |  if_ae	jmp	#LR__3308
2476c     01 2C 66 F5 | 	xor	local04, #1
24770     17 2F 22 F6 | 	not	local05, local05
24774     1E 3D 22 F6 | 	not	local12, local12
24778     01 3C 0E F1 | 	add	local12, #1 wz
2477c     00 42 06 F6 | 	mov	local15, #0
24780     01 42 06 A6 |  if_e	mov	local15, #1
24784     21 2F 02 F1 | 	add	local05, local15
24788                 | LR__3308
24788     00 80 00 FF 
2478c     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
24790     28 00 90 CD |  if_b	jmp	#LR__3309
24794     01 30 06 F1 | 	add	local06, #1
24798     1E 41 02 F6 | 	mov	local14, local12
2479c     01 40 06 F5 | 	and	local14, #1
247a0     01 3C 46 F0 | 	shr	local12, #1
247a4     17 43 02 F6 | 	mov	local15, local05
247a8     1F 42 66 F0 | 	shl	local15, #31
247ac     21 3D 42 F5 | 	or	local12, local15
247b0     20 3D 42 F5 | 	or	local12, local14
247b4     01 2E 46 F0 | 	shr	local05, #1
247b8     3C 00 90 FD | 	jmp	#LR__3314
247bc                 | LR__3309
247bc     00 40 00 FF 
247c0     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
247c4     30 00 90 3D |  if_ae	jmp	#LR__3313
247c8     00 2E 0E F2 | 	cmp	local05, #0 wz
247cc     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
247d0     08 2C 46 A5 |  if_e	or	local04, #8
247d4     01 2C 26 A5 |  if_e	andn	local04, #1
247d8     1C 00 90 AD |  if_e	jmp	#LR__3312
247dc                 | LR__3310
247dc     00 40 00 FF 
247e0     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
247e4     10 00 90 3D |  if_ae	jmp	#LR__3311
247e8     1E 3D 12 F1 | 	add	local12, local12 wc
247ec     17 2F 22 F1 | 	addx	local05, local05
247f0     01 30 86 F1 | 	sub	local06, #1
247f4     E4 FF 9F FD | 	jmp	#LR__3310
247f8                 | LR__3311
247f8                 | LR__3312
247f8                 | LR__3313
247f8                 | LR__3314
247f8     17 13 02 F6 | 	mov	arg01, local05
247fc     1E 15 02 F6 | 	mov	arg02, local12
24800     18 17 02 F6 | 	mov	arg03, local06
24804     16 19 02 F6 | 	mov	arg04, local04
24808     C8 35 B0 FD | 	call	#__system__pack_0643
2480c     DC 00 90 FD | 	jmp	#LR__3325
24810                 | LR__3315
24810     FF 38 0E F2 | 	cmp	local10, #255 wz
24814     10 00 90 5D |  if_ne	jmp	#LR__3316
24818     16 33 0A F2 | 	cmp	local07, local04 wz
2481c     00 F8 3F 5F 
24820     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
24824     C4 00 90 5D |  if_ne	jmp	#LR__3325
24828                 | LR__3316
24828     00 2E 0E F2 | 	cmp	local05, #0 wz
2482c     00 F8 3F 5F 
24830     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
24834     B4 00 90 5D |  if_ne	jmp	#LR__3325
24838     1E 15 02 F6 | 	mov	arg02, local12
2483c     18 17 02 F6 | 	mov	arg03, local06
24840     16 19 02 F6 | 	mov	arg04, local04
24844     02 18 46 F5 | 	or	arg04, #2
24848     17 13 02 F6 | 	mov	arg01, local05
2484c     84 35 B0 FD | 	call	#__system__pack_0643
24850     98 00 90 FD | 	jmp	#LR__3325
24854                 | LR__3317
24854     00 2E 0E F2 | 	cmp	local05, #0 wz
24858     28 00 90 AD |  if_e	jmp	#LR__3320
2485c     01 2E 66 F0 | 	shl	local05, #1
24860     97 0E 48 FB | 	callpa	#(@LR__3319-@LR__3318)>>2,fcache_load_ptr_
24864                 | LR__3318
24864     00 40 00 FF 
24868     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2486c     18 43 02 C6 |  if_b	mov	local15, local06
24870     01 42 86 C1 |  if_b	sub	local15, #1
24874     21 31 02 C6 |  if_b	mov	local06, local15
24878     01 2E 66 C0 |  if_b	shl	local05, #1
2487c     E4 FF 9F CD |  if_b	jmp	#LR__3318
24880                 | LR__3319
24880     28 FE 9F FD | 	jmp	#LR__3301
24884                 | LR__3320
24884     19 2D 02 F5 | 	and	local04, local07
24888     16 19 02 F6 | 	mov	arg04, local04
2488c     08 18 46 F5 | 	or	arg04, #8
24890     00 12 06 F6 | 	mov	arg01, #0
24894     00 14 06 F6 | 	mov	arg02, #0
24898     00 16 06 F6 | 	mov	arg03, #0
2489c     34 35 B0 FD | 	call	#__system__pack_0643
248a0     48 00 90 FD | 	jmp	#LR__3325
248a4                 | LR__3321
248a4     00 34 0E F2 | 	cmp	local08, #0 wz
248a8     28 00 90 AD |  if_e	jmp	#LR__3324
248ac     01 34 66 F0 | 	shl	local08, #1
248b0     97 0E 48 FB | 	callpa	#(@LR__3323-@LR__3322)>>2,fcache_load_ptr_
248b4                 | LR__3322
248b4     00 40 00 FF 
248b8     00 34 16 F2 | 	cmp	local08, ##8388608 wc
248bc     1C 43 02 C6 |  if_b	mov	local15, local10
248c0     01 42 86 C1 |  if_b	sub	local15, #1
248c4     21 39 02 C6 |  if_b	mov	local10, local15
248c8     01 34 66 C0 |  if_b	shl	local08, #1
248cc     E4 FF 9F CD |  if_b	jmp	#LR__3322
248d0                 | LR__3323
248d0     E4 FD 9F FD | 	jmp	#LR__3302
248d4                 | LR__3324
248d4     7F 30 86 F1 | 	sub	local06, #127
248d8     17 13 02 F6 | 	mov	arg01, local05
248dc     1E 15 02 F6 | 	mov	arg02, local12
248e0     18 17 02 F6 | 	mov	arg03, local06
248e4     16 19 02 F6 | 	mov	arg04, local04
248e8     E8 34 B0 FD | 	call	#__system__pack_0643
248ec                 | LR__3325
248ec     A7 F0 03 F6 | 	mov	ptra, fp
248f0     B2 00 A0 FD | 	call	#popregs_
248f4                 | __system___float_add_ret
248f4     2D 00 64 FD | 	ret
248f8                 | 
248f8                 | __system___float_sqrt
248f8     04 4A 05 F6 | 	mov	COUNT_, #4
248fc     A8 00 A0 FD | 	call	#pushregs_
24900     09 27 02 F6 | 	mov	local01, arg01
24904     09 FB 01 F6 | 	mov	result1, arg01
24908     FD 28 02 F6 | 	mov	local02, result1
2490c     14 2B 02 F6 | 	mov	local03, local02
24910     16 2A 46 F7 | 	zerox	local03, #22
24914     14 2D 02 F6 | 	mov	local04, local02
24918     01 2C 66 F0 | 	shl	local04, #1
2491c     18 2C 4E F0 | 	shr	local04, #24 wz
24920     1F 28 46 F0 | 	shr	local02, #31
24924     70 00 90 AD |  if_e	jmp	#LR__3331
24928     17 2A 26 F4 | 	bith	local03, #23
2492c                 | LR__3330
2492c     00 28 0E F2 | 	cmp	local02, #0 wz
24930     00 F8 3F 5F 
24934     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
24938     88 00 90 5D |  if_ne	jmp	#LR__3334
2493c     FF 2C 0E F2 | 	cmp	local04, #255 wz
24940     13 FB 01 A6 |  if_e	mov	result1, local01
24944     7C 00 90 AD |  if_e	jmp	#LR__3334
24948     7F 2C 86 F1 | 	sub	local04, #127
2494c     01 2C CE F7 | 	test	local04, #1 wz
24950     01 2A 66 50 |  if_ne	shl	local03, #1
24954     05 2A 66 F0 | 	shl	local03, #5
24958     15 01 38 FD | 	qsqrt	#0, local03
2495c     01 2C 86 51 |  if_ne	sub	local04, #1
24960     16 2D 52 F6 | 	abs	local04, local04 wc
24964     01 2C 46 F0 | 	shr	local04, #1
24968     16 17 82 F6 | 	negc	arg03, local04
2496c     14 19 02 F6 | 	mov	arg04, local02
24970     18 12 62 FD | 	getqx	arg01
24974     09 15 02 F6 | 	mov	arg02, arg01
24978     19 14 66 F0 | 	shl	arg02, #25
2497c     07 12 46 F0 | 	shr	arg01, #7
24980     00 80 00 FF 
24984     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
24988     01 16 06 31 |  if_ae	add	arg03, #1
2498c     01 12 46 30 |  if_ae	shr	arg01, #1
24990     40 34 B0 FD | 	call	#__system__pack_0643
24994     2C 00 90 FD | 	jmp	#LR__3334
24998                 | LR__3331
24998     00 2A 0E F2 | 	cmp	local03, #0 wz
2499c     13 FB 01 A6 |  if_e	mov	result1, local01
249a0     20 00 90 AD |  if_e	jmp	#LR__3334
249a4     01 2A 66 F0 | 	shl	local03, #1
249a8     97 0A 48 FB | 	callpa	#(@LR__3333-@LR__3332)>>2,fcache_load_ptr_
249ac                 | LR__3332
249ac     00 40 00 FF 
249b0     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
249b4     01 2C 86 C1 |  if_b	sub	local04, #1
249b8     01 2A 66 C0 |  if_b	shl	local03, #1
249bc     EC FF 9F CD |  if_b	jmp	#LR__3332
249c0                 | LR__3333
249c0     68 FF 9F FD | 	jmp	#LR__3330
249c4                 | LR__3334
249c4     A7 F0 03 F6 | 	mov	ptra, fp
249c8     B2 00 A0 FD | 	call	#popregs_
249cc                 | __system___float_sqrt_ret
249cc     2D 00 64 FD | 	ret
249d0                 | 
249d0                 | __system___float_mul
249d0     0B 4A 05 F6 | 	mov	COUNT_, #11
249d4     A8 00 A0 FD | 	call	#pushregs_
249d8     09 27 02 F6 | 	mov	local01, arg01
249dc     0A 29 02 F6 | 	mov	local02, arg02
249e0     13 2B 02 F6 | 	mov	local03, local01
249e4     15 2D 02 F6 | 	mov	local04, local03
249e8     16 2C 46 F7 | 	zerox	local04, #22
249ec     15 2F 02 F6 | 	mov	local05, local03
249f0     01 2E 66 F0 | 	shl	local05, #1
249f4     18 2E 46 F0 | 	shr	local05, #24
249f8     1F 2A 46 F0 | 	shr	local03, #31
249fc     14 FB 01 F6 | 	mov	result1, local02
24a00     FD 30 02 F6 | 	mov	local06, result1
24a04     18 33 02 F6 | 	mov	local07, local06
24a08     16 32 46 F7 | 	zerox	local07, #22
24a0c     18 35 02 F6 | 	mov	local08, local06
24a10     01 34 66 F0 | 	shl	local08, #1
24a14     18 34 46 F0 | 	shr	local08, #24
24a18     1F 30 46 F0 | 	shr	local06, #31
24a1c     18 2B 62 F5 | 	xor	local03, local06
24a20     FF 2E 0E F2 | 	cmp	local05, #255 wz
24a24     90 00 90 AD |  if_e	jmp	#LR__3343
24a28     FF 34 0E F2 | 	cmp	local08, #255 wz
24a2c     D8 00 90 AD |  if_e	jmp	#LR__3345
24a30     00 2E 0E F2 | 	cmp	local05, #0 wz
24a34     0C 01 90 AD |  if_e	jmp	#LR__3346
24a38     17 2C 26 F4 | 	bith	local04, #23
24a3c                 | LR__3340
24a3c     00 34 0E F2 | 	cmp	local08, #0 wz
24a40     44 01 90 AD |  if_e	jmp	#LR__3350
24a44     17 32 26 F4 | 	bith	local07, #23
24a48                 | LR__3341
24a48     16 29 02 F6 | 	mov	local02, local04
24a4c     04 28 66 F0 | 	shl	local02, #4
24a50     19 31 02 F6 | 	mov	local06, local07
24a54     05 30 66 F0 | 	shl	local06, #5
24a58     18 29 02 FD | 	qmul	local02, local06
24a5c     1A 2F 02 F1 | 	add	local05, local08
24a60     FE 2E 86 F1 | 	sub	local05, #254
24a64     17 37 02 F6 | 	mov	local09, local05
24a68     04 2C 66 F0 | 	shl	local04, #4
24a6c     05 32 66 F0 | 	shl	local07, #5
24a70     18 38 62 FD | 	getqx	local10
24a74     19 2D 02 FD | 	qmul	local04, local07
24a78     19 3A 62 FD | 	getqy	local11
24a7c     00 80 00 FF 
24a80     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
24a84     18 00 90 CD |  if_b	jmp	#LR__3342
24a88     01 36 06 F1 | 	add	local09, #1
24a8c     01 38 46 F0 | 	shr	local10, #1
24a90     1D 35 02 F6 | 	mov	local08, local11
24a94     1F 34 66 F0 | 	shl	local08, #31
24a98     1A 39 42 F5 | 	or	local10, local08
24a9c     01 3A 46 F0 | 	shr	local11, #1
24aa0                 | LR__3342
24aa0     1D 13 02 F6 | 	mov	arg01, local11
24aa4     1C 15 02 F6 | 	mov	arg02, local10
24aa8     1B 17 02 F6 | 	mov	arg03, local09
24aac     15 19 02 F6 | 	mov	arg04, local03
24ab0     20 33 B0 FD | 	call	#__system__pack_0643
24ab4     10 01 90 FD | 	jmp	#LR__3354
24ab8                 | LR__3343
24ab8     00 2C 0E F2 | 	cmp	local04, #0 wz
24abc     13 FB 01 56 |  if_ne	mov	result1, local01
24ac0     04 01 90 5D |  if_ne	jmp	#LR__3354
24ac4     FF 34 56 F2 | 	cmps	local08, #255 wc
24ac8     00 34 0E C2 |  if_b	cmp	local08, #0 wz
24acc     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
24ad0     18 00 90 4D |  if_c_and_nz	jmp	#LR__3344
24ad4     00 F8 3F CF 
24ad8     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
24adc     E8 00 90 CD |  if_b	jmp	#LR__3354
24ae0     00 32 0E F2 | 	cmp	local07, #0 wz
24ae4     14 FB 01 56 |  if_ne	mov	result1, local02
24ae8     DC 00 90 5D |  if_ne	jmp	#LR__3354
24aec                 | LR__3344
24aec     02 2A 46 F5 | 	or	local03, #2
24af0     00 12 06 F6 | 	mov	arg01, #0
24af4     00 14 06 F6 | 	mov	arg02, #0
24af8     17 17 02 F6 | 	mov	arg03, local05
24afc     15 19 02 F6 | 	mov	arg04, local03
24b00     D0 32 B0 FD | 	call	#__system__pack_0643
24b04     C0 00 90 FD | 	jmp	#LR__3354
24b08                 | LR__3345
24b08     00 2E 0E F2 | 	cmp	local05, #0 wz
24b0c     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
24b10     00 F8 3F AF 
24b14     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24b18     AC 00 90 AD |  if_e	jmp	#LR__3354
24b1c     00 32 0E F2 | 	cmp	local07, #0 wz
24b20     14 FB 01 56 |  if_ne	mov	result1, local02
24b24     A0 00 90 5D |  if_ne	jmp	#LR__3354
24b28     1A 17 02 F6 | 	mov	arg03, local08
24b2c     15 19 02 F6 | 	mov	arg04, local03
24b30     02 18 46 F5 | 	or	arg04, #2
24b34     00 12 06 F6 | 	mov	arg01, #0
24b38     00 14 06 F6 | 	mov	arg02, #0
24b3c     94 32 B0 FD | 	call	#__system__pack_0643
24b40     84 00 90 FD | 	jmp	#LR__3354
24b44                 | LR__3346
24b44     00 2C 0E F2 | 	cmp	local04, #0 wz
24b48     20 00 90 AD |  if_e	jmp	#LR__3349
24b4c     01 2C 66 F0 | 	shl	local04, #1
24b50     97 0A 48 FB | 	callpa	#(@LR__3348-@LR__3347)>>2,fcache_load_ptr_
24b54                 | LR__3347
24b54     00 40 00 FF 
24b58     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
24b5c     01 2E 86 C1 |  if_b	sub	local05, #1
24b60     01 2C 66 C0 |  if_b	shl	local04, #1
24b64     EC FF 9F CD |  if_b	jmp	#LR__3347
24b68                 | LR__3348
24b68     D0 FE 9F FD | 	jmp	#LR__3340
24b6c                 | LR__3349
24b6c     08 2A 46 F5 | 	or	local03, #8
24b70     00 12 06 F6 | 	mov	arg01, #0
24b74     00 14 06 F6 | 	mov	arg02, #0
24b78     00 16 06 F6 | 	mov	arg03, #0
24b7c     15 19 02 F6 | 	mov	arg04, local03
24b80     50 32 B0 FD | 	call	#__system__pack_0643
24b84     40 00 90 FD | 	jmp	#LR__3354
24b88                 | LR__3350
24b88     00 32 0E F2 | 	cmp	local07, #0 wz
24b8c     20 00 90 AD |  if_e	jmp	#LR__3353
24b90     01 32 66 F0 | 	shl	local07, #1
24b94     97 0A 48 FB | 	callpa	#(@LR__3352-@LR__3351)>>2,fcache_load_ptr_
24b98                 | LR__3351
24b98     00 40 00 FF 
24b9c     00 32 16 F2 | 	cmp	local07, ##8388608 wc
24ba0     01 34 86 C1 |  if_b	sub	local08, #1
24ba4     01 32 66 C0 |  if_b	shl	local07, #1
24ba8     EC FF 9F CD |  if_b	jmp	#LR__3351
24bac                 | LR__3352
24bac     98 FE 9F FD | 	jmp	#LR__3341
24bb0                 | LR__3353
24bb0     08 2A 46 F5 | 	or	local03, #8
24bb4     00 12 06 F6 | 	mov	arg01, #0
24bb8     00 14 06 F6 | 	mov	arg02, #0
24bbc     00 16 06 F6 | 	mov	arg03, #0
24bc0     15 19 02 F6 | 	mov	arg04, local03
24bc4     0C 32 B0 FD | 	call	#__system__pack_0643
24bc8                 | LR__3354
24bc8     A7 F0 03 F6 | 	mov	ptra, fp
24bcc     B2 00 A0 FD | 	call	#popregs_
24bd0                 | __system___float_mul_ret
24bd0     2D 00 64 FD | 	ret
24bd4                 | 
24bd4                 | __system___float_div
24bd4     0E 4A 05 F6 | 	mov	COUNT_, #14
24bd8     A8 00 A0 FD | 	call	#pushregs_
24bdc     09 2B 02 F6 | 	mov	local03, arg01
24be0     0A 2D 02 F6 | 	mov	local04, arg02
24be4     15 2F 02 F6 | 	mov	local05, local03
24be8     17 31 02 F6 | 	mov	local06, local05
24bec     16 30 46 F7 | 	zerox	local06, #22
24bf0     17 33 02 F6 | 	mov	local07, local05
24bf4     01 32 66 F0 | 	shl	local07, #1
24bf8     18 32 46 F0 | 	shr	local07, #24
24bfc     1F 2E 46 F0 | 	shr	local05, #31
24c00     16 FB 01 F6 | 	mov	result1, local04
24c04     FD 34 02 F6 | 	mov	local08, result1
24c08     1A 37 02 F6 | 	mov	local09, local08
24c0c     16 36 46 F7 | 	zerox	local09, #22
24c10     1A 39 02 F6 | 	mov	local10, local08
24c14     01 38 66 F0 | 	shl	local10, #1
24c18     18 38 46 F0 | 	shr	local10, #24
24c1c     1F 34 46 F0 | 	shr	local08, #31
24c20     1A 2F 62 F5 | 	xor	local05, local08
24c24     FF 32 0E F2 | 	cmp	local07, #255 wz
24c28     D4 00 90 AD |  if_e	jmp	#LR__3365
24c2c     FF 38 0E F2 | 	cmp	local10, #255 wz
24c30     04 01 90 AD |  if_e	jmp	#LR__3366
24c34     00 32 0E F2 | 	cmp	local07, #0 wz
24c38     24 01 90 AD |  if_e	jmp	#LR__3367
24c3c     17 30 26 F4 | 	bith	local06, #23
24c40                 | LR__3360
24c40     00 38 0E F2 | 	cmp	local10, #0 wz
24c44     70 01 90 AD |  if_e	jmp	#LR__3371
24c48     17 36 26 F4 | 	bith	local09, #23
24c4c                 | LR__3361
24c4c     1C 33 82 F1 | 	sub	local07, local10
24c50     19 3B 02 F6 | 	mov	local11, local07
24c54     18 13 02 F6 | 	mov	arg01, local06
24c58     02 12 46 F0 | 	shr	arg01, #2
24c5c     1E 30 66 F0 | 	shl	local06, #30
24c60     18 15 02 F6 | 	mov	arg02, local06
24c64     1B 17 02 F6 | 	mov	arg03, local09
24c68     28 12 62 FD | 	setq	arg01
24c6c     0B 15 12 FD | 	qdiv	arg02, arg03
24c70     00 3C 06 F6 | 	mov	local12, #0
24c74     18 26 62 FD | 	getqx	local01
24c78     19 FC 61 FD | 	getqy	result2
24c7c     FE 28 02 F6 | 	mov	local02, result2
24c80     13 3F 02 F6 | 	mov	local13, local01
24c84     00 28 4E F2 | 	cmps	local02, #0 wz
24c88     1F 41 02 F6 | 	mov	local14, local13
24c8c     19 40 66 F0 | 	shl	local14, #25
24c90     01 3C 06 56 |  if_ne	mov	local12, #1
24c94     1E 41 42 F5 | 	or	local14, local12
24c98     07 3E 46 F0 | 	shr	local13, #7
24c9c     00 80 00 FF 
24ca0     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
24ca4     1C 00 90 CD |  if_b	jmp	#LR__3362
24ca8     01 3A 06 F1 | 	add	local11, #1
24cac     01 40 46 F0 | 	shr	local14, #1
24cb0     1F 3D 02 F6 | 	mov	local12, local13
24cb4     1F 3C 66 F0 | 	shl	local12, #31
24cb8     1E 41 42 F5 | 	or	local14, local12
24cbc     01 3E 46 F0 | 	shr	local13, #1
24cc0     24 00 90 FD | 	jmp	#LR__3364
24cc4                 | LR__3362
24cc4     00 40 00 FF 
24cc8     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
24ccc     18 00 90 3D |  if_ae	jmp	#LR__3363
24cd0     01 3A 86 F1 | 	sub	local11, #1
24cd4     01 3E 66 F0 | 	shl	local13, #1
24cd8     20 3D 02 F6 | 	mov	local12, local14
24cdc     1F 3C 46 F0 | 	shr	local12, #31
24ce0     1E 3F 42 F5 | 	or	local13, local12
24ce4     01 40 66 F0 | 	shl	local14, #1
24ce8                 | LR__3363
24ce8                 | LR__3364
24ce8     1F 13 02 F6 | 	mov	arg01, local13
24cec     20 15 02 F6 | 	mov	arg02, local14
24cf0     1D 17 02 F6 | 	mov	arg03, local11
24cf4     17 19 02 F6 | 	mov	arg04, local05
24cf8     D8 30 B0 FD | 	call	#__system__pack_0643
24cfc     F8 00 90 FD | 	jmp	#LR__3375
24d00                 | LR__3365
24d00     00 30 0E F2 | 	cmp	local06, #0 wz
24d04     15 FB 01 56 |  if_ne	mov	result1, local03
24d08     EC 00 90 5D |  if_ne	jmp	#LR__3375
24d0c     FF 38 0E F2 | 	cmp	local10, #255 wz
24d10     00 F8 3F AF 
24d14     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24d18     DC 00 90 AD |  if_e	jmp	#LR__3375
24d1c     02 2E 46 F5 | 	or	local05, #2
24d20     00 12 06 F6 | 	mov	arg01, #0
24d24     00 14 06 F6 | 	mov	arg02, #0
24d28     19 17 02 F6 | 	mov	arg03, local07
24d2c     17 19 02 F6 | 	mov	arg04, local05
24d30     A0 30 B0 FD | 	call	#__system__pack_0643
24d34     C0 00 90 FD | 	jmp	#LR__3375
24d38                 | LR__3366
24d38     00 36 0E F2 | 	cmp	local09, #0 wz
24d3c     16 FB 01 56 |  if_ne	mov	result1, local04
24d40     B4 00 90 5D |  if_ne	jmp	#LR__3375
24d44     17 19 02 F6 | 	mov	arg04, local05
24d48     08 18 46 F5 | 	or	arg04, #8
24d4c     00 12 06 F6 | 	mov	arg01, #0
24d50     00 14 06 F6 | 	mov	arg02, #0
24d54     00 16 06 F6 | 	mov	arg03, #0
24d58     78 30 B0 FD | 	call	#__system__pack_0643
24d5c     98 00 90 FD | 	jmp	#LR__3375
24d60                 | LR__3367
24d60     00 30 0E F2 | 	cmp	local06, #0 wz
24d64     20 00 90 AD |  if_e	jmp	#LR__3370
24d68     01 30 66 F0 | 	shl	local06, #1
24d6c     97 0A 48 FB | 	callpa	#(@LR__3369-@LR__3368)>>2,fcache_load_ptr_
24d70                 | LR__3368
24d70     00 40 00 FF 
24d74     00 30 16 F2 | 	cmp	local06, ##8388608 wc
24d78     01 32 86 C1 |  if_b	sub	local07, #1
24d7c     01 30 66 C0 |  if_b	shl	local06, #1
24d80     EC FF 9F CD |  if_b	jmp	#LR__3368
24d84                 | LR__3369
24d84     B8 FE 9F FD | 	jmp	#LR__3360
24d88                 | LR__3370
24d88     00 38 0E F2 | 	cmp	local10, #0 wz
24d8c     00 36 0E A2 |  if_e	cmp	local09, #0 wz
24d90     00 F8 3F AF 
24d94     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24d98     5C 00 90 AD |  if_e	jmp	#LR__3375
24d9c     17 19 02 F6 | 	mov	arg04, local05
24da0     08 18 46 F5 | 	or	arg04, #8
24da4     00 12 06 F6 | 	mov	arg01, #0
24da8     00 14 06 F6 | 	mov	arg02, #0
24dac     00 16 06 F6 | 	mov	arg03, #0
24db0     20 30 B0 FD | 	call	#__system__pack_0643
24db4     40 00 90 FD | 	jmp	#LR__3375
24db8                 | LR__3371
24db8     00 36 0E F2 | 	cmp	local09, #0 wz
24dbc     20 00 90 AD |  if_e	jmp	#LR__3374
24dc0     01 36 66 F0 | 	shl	local09, #1
24dc4     97 0A 48 FB | 	callpa	#(@LR__3373-@LR__3372)>>2,fcache_load_ptr_
24dc8                 | LR__3372
24dc8     00 40 00 FF 
24dcc     00 36 16 F2 | 	cmp	local09, ##8388608 wc
24dd0     01 38 86 C1 |  if_b	sub	local10, #1
24dd4     01 36 66 C0 |  if_b	shl	local09, #1
24dd8     EC FF 9F CD |  if_b	jmp	#LR__3372
24ddc                 | LR__3373
24ddc     6C FE 9F FD | 	jmp	#LR__3361
24de0                 | LR__3374
24de0     02 2E 46 F5 | 	or	local05, #2
24de4     00 12 06 F6 | 	mov	arg01, #0
24de8     00 14 06 F6 | 	mov	arg02, #0
24dec     00 16 06 F6 | 	mov	arg03, #0
24df0     17 19 02 F6 | 	mov	arg04, local05
24df4     DC 2F B0 FD | 	call	#__system__pack_0643
24df8                 | LR__3375
24df8     A7 F0 03 F6 | 	mov	ptra, fp
24dfc     B2 00 A0 FD | 	call	#popregs_
24e00                 | __system___float_div_ret
24e00     2D 00 64 FD | 	ret
24e04                 | 
24e04                 | __system___float_cmp
24e04     00 C0 3F FF 
24e08     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
24e0c     00 C0 3F CF 
24e10     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
24e14     0B FB 01 36 |  if_ae	mov	result1, arg03
24e18     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
24e1c     00 C0 7F FF 
24e20     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
24e24     00 C0 7F CF 
24e28     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
24e2c     0B FB 01 36 |  if_ae	mov	result1, arg03
24e30     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
24e34     00 12 56 F2 | 	cmps	arg01, #0 wc
24e38     2C 00 90 3D |  if_ae	jmp	#LR__3380
24e3c     00 14 56 F2 | 	cmps	arg02, #0 wc
24e40     0A FB 01 C6 |  if_b	mov	result1, arg02
24e44     09 FB 81 C1 |  if_b	sub	result1, arg01
24e48     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
24e4c     00 14 0E F2 | 	cmp	arg02, #0 wz
24e50     00 00 40 AF 
24e54     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
24e58     00 FA 05 A6 |  if_e	mov	result1, #0
24e5c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
24e60     01 FA 65 F6 | 	neg	result1, #1
24e64     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
24e68                 | LR__3380
24e68     00 14 56 F2 | 	cmps	arg02, #0 wc
24e6c     1C 00 90 3D |  if_ae	jmp	#LR__3381
24e70     00 12 0E F2 | 	cmp	arg01, #0 wz
24e74     00 00 40 AF 
24e78     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
24e7c     00 FA 05 A6 |  if_e	mov	result1, #0
24e80     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
24e84     01 FA 05 F6 | 	mov	result1, #1
24e88     08 00 90 FD | 	jmp	#__system___float_cmp_ret
24e8c                 | LR__3381
24e8c     0A 13 82 F1 | 	sub	arg01, arg02
24e90     09 FB 01 F6 | 	mov	result1, arg01
24e94                 | __system___float_cmp_ret
24e94     2D 00 64 FD | 	ret
24e98                 | 
24e98                 | __system___float_tointeger
24e98     02 4A 05 F6 | 	mov	COUNT_, #2
24e9c     A8 00 A0 FD | 	call	#pushregs_
24ea0     50 00 B0 FD | 	call	#__system___float_Unpack
24ea4     FF FF 7F FF 
24ea8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
24eac     34 00 90 CD |  if_b	jmp	#LR__3390
24eb0     1F FC 55 F2 | 	cmps	result2, #31 wc
24eb4     2C 00 90 3D |  if_ae	jmp	#LR__3390
24eb8     02 FE 65 F0 | 	shl	result3, #2
24ebc     1E 26 06 F6 | 	mov	local01, #30
24ec0     FE 26 82 F1 | 	sub	local01, result2
24ec4     13 FF 41 F0 | 	shr	result3, local01
24ec8     FF 28 02 F6 | 	mov	local02, result3
24ecc     0A 29 02 F1 | 	add	local02, arg02
24ed0     01 28 46 F0 | 	shr	local02, #1
24ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
24ed8     14 29 62 56 |  if_ne	neg	local02, local02
24edc     14 FB 01 F6 | 	mov	result1, local02
24ee0     04 00 90 FD | 	jmp	#LR__3391
24ee4                 | LR__3390
24ee4     00 FA 05 F6 | 	mov	result1, #0
24ee8                 | LR__3391
24ee8     A7 F0 03 F6 | 	mov	ptra, fp
24eec     B2 00 A0 FD | 	call	#popregs_
24ef0                 | __system___float_tointeger_ret
24ef0     2D 00 64 FD | 	ret
24ef4                 | 
24ef4                 | __system___float_Unpack
24ef4     09 01 02 F6 | 	mov	_var01, arg01
24ef8     1F 00 46 F0 | 	shr	_var01, #31
24efc     09 03 02 F6 | 	mov	_var02, arg01
24f00     01 02 66 F0 | 	shl	_var02, #1
24f04     18 02 4E F0 | 	shr	_var02, #24 wz
24f08     17 13 06 F4 | 	bitl	arg01, #279
24f0c     06 12 66 50 |  if_ne	shl	arg01, #6
24f10     1D 12 26 54 |  if_ne	bith	arg01, #29
24f14     1C 00 90 5D |  if_ne	jmp	#LR__3400
24f18     09 05 92 F7 | 	encod	_var03, arg01 wc
24f1c     01 04 06 C1 |  if_b	add	_var03, #1
24f20     17 04 86 F1 | 	sub	_var03, #23
24f24     02 03 02 F6 | 	mov	_var02, _var03
24f28     07 FC 05 F6 | 	mov	result2, #7
24f2c     02 FD 81 F1 | 	sub	result2, _var03
24f30     FE 12 62 F0 | 	shl	arg01, result2
24f34                 | LR__3400
24f34     7F 02 86 F1 | 	sub	_var02, #127
24f38     09 FF 01 F6 | 	mov	result3, arg01
24f3c     00 FB 01 F6 | 	mov	result1, _var01
24f40     01 FD 01 F6 | 	mov	result2, _var02
24f44                 | __system___float_Unpack_ret
24f44     2D 00 64 FD | 	ret
24f48                 | 
24f48                 | __system___float_Pack
24f48     00 00 06 F6 | 	mov	_var01, #0
24f4c     00 16 0E F2 | 	cmp	arg03, #0 wz
24f50     8C 00 90 AD |  if_e	jmp	#LR__3411
24f54     0B 03 92 F7 | 	encod	_var02, arg03 wc
24f58     01 02 06 C1 |  if_b	add	_var02, #1
24f5c     21 00 06 F6 | 	mov	_var01, #33
24f60     01 01 82 F1 | 	sub	_var01, _var02
24f64     00 17 62 F0 | 	shl	arg03, _var01
24f68     03 02 06 F6 | 	mov	_var02, #3
24f6c     00 03 82 F1 | 	sub	_var02, _var01
24f70     01 15 02 F1 | 	add	arg02, _var02
24f74     0A 05 02 F6 | 	mov	_var03, arg02
24f78     00 17 06 F1 | 	add	arg03, #256
24f7c     0B 03 02 F6 | 	mov	_var02, arg03
24f80     FF 02 2E F5 | 	andn	_var02, #255 wz
24f84     01 04 06 A1 |  if_e	add	_var03, #1
24f88     7F 04 06 F1 | 	add	_var03, #127
24f8c     FF FF 7F FF 
24f90     E9 05 46 F3 | 	fges	_var03, ##-23
24f94     FF 04 66 F3 | 	fles	_var03, #255
24f98     01 04 56 F2 | 	cmps	_var03, #1 wc
24f9c     1C 00 90 3D |  if_ae	jmp	#LR__3410
24fa0     01 16 46 F0 | 	shr	arg03, #1
24fa4     1F 02 C6 F9 | 	decod	_var02, #31
24fa8     0B 03 02 F1 | 	add	_var02, arg03
24fac     02 05 62 F6 | 	neg	_var03, _var03
24fb0     02 03 42 F0 | 	shr	_var02, _var03
24fb4     01 17 02 F6 | 	mov	arg03, _var02
24fb8     00 04 06 F6 | 	mov	_var03, #0
24fbc                 | LR__3410
24fbc     09 FB 01 F6 | 	mov	result1, arg01
24fc0     1F FA 65 F0 | 	shl	result1, #31
24fc4     02 03 02 F6 | 	mov	_var02, _var03
24fc8     17 02 66 F0 | 	shl	_var02, #23
24fcc     01 FB 41 F5 | 	or	result1, _var02
24fd0     0B 07 02 F6 | 	mov	_var04, arg03
24fd4     09 06 46 F0 | 	shr	_var04, #9
24fd8     03 FB 41 F5 | 	or	result1, _var04
24fdc     04 00 90 FD | 	jmp	#__system___float_Pack_ret
24fe0                 | LR__3411
24fe0     00 FB 01 F6 | 	mov	result1, _var01
24fe4                 | __system___float_Pack_ret
24fe4     2D 00 64 FD | 	ret
24fe8                 | 
24fe8                 | __system___basic_print_float
24fe8     05 4A 05 F6 | 	mov	COUNT_, #5
24fec     A8 00 A0 FD | 	call	#pushregs_
24ff0     09 27 02 F6 | 	mov	local01, arg01
24ff4     0A 29 02 F6 | 	mov	local02, arg02
24ff8     0B 2B 0A F6 | 	mov	local03, arg03 wz
24ffc     0C 2D 02 F6 | 	mov	local04, arg04
25000     14 00 90 5D |  if_ne	jmp	#LR__3420
25004     23 2C 0E F2 | 	cmp	local04, #35 wz
25008     80 02 10 AF 
2500c     00 2E 06 A6 |  if_e	mov	local05, ##537198592
25010     1D 2E C6 59 |  if_ne	decod	local05, #29
25014     17 2B 02 F6 | 	mov	local03, local05
25018                 | LR__3420
25018     13 13 02 F6 | 	mov	arg01, local01
2501c     98 28 B0 FD | 	call	#__system___gettxfunc
25020     FD 2E 0A F6 | 	mov	local05, result1 wz
25024     00 FA 05 A6 |  if_e	mov	result1, #0
25028     17 13 02 56 |  if_ne	mov	arg01, local05
2502c     15 15 02 56 |  if_ne	mov	arg02, local03
25030     14 17 02 56 |  if_ne	mov	arg03, local02
25034     16 19 02 56 |  if_ne	mov	arg04, local04
25038     28 DD BF 5D |  if_ne	call	#__system___fmtfloat
2503c     A7 F0 03 F6 | 	mov	ptra, fp
25040     B2 00 A0 FD | 	call	#popregs_
25044                 | __system___basic_print_float_ret
25044     2D 00 64 FD | 	ret
25048                 | 
25048                 | __system____builtin_atoi
25048     07 4A 05 F6 | 	mov	COUNT_, #7
2504c     A8 00 A0 FD | 	call	#pushregs_
25050                 | __system____builtin_atoi_enter
25050     09 27 02 F6 | 	mov	local01, arg01
25054     0A 29 02 F6 | 	mov	local02, arg02
25058     00 2A 06 F6 | 	mov	local03, #0
2505c     00 2C 06 F6 | 	mov	local04, #0
25060     00 2E 06 F6 | 	mov	local05, #0
25064     97 1C 48 FB | 	callpa	#(@LR__3432-@LR__3430)>>2,fcache_load_ptr_
25068                 | LR__3430
25068     13 31 C2 FA | 	rdbyte	local06, local01
2506c     20 30 0E F2 | 	cmp	local06, #32 wz
25070     01 26 06 A1 |  if_e	add	local01, #1
25074     F0 FF 9F AD |  if_e	jmp	#LR__3430
25078     13 33 C2 FA | 	rdbyte	local07, local01
2507c                 | LR__3431
2507c     2D 32 0E F2 | 	cmp	local07, #45 wz
25080     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
25084     18 00 90 5D |  if_ne	jmp	#LR__3433
25088     01 26 06 F1 | 	add	local01, #1
2508c     2D 32 0E F2 | 	cmp	local07, #45 wz
25090     01 30 06 A6 |  if_e	mov	local06, #1
25094     18 2F C2 A2 |  if_e	subr	local05, local06
25098     13 33 C2 FA | 	rdbyte	local07, local01
2509c     DC FF 9F FD | 	jmp	#LR__3431
250a0                 | LR__3432
250a0                 | LR__3433
250a0     00 28 0E F2 | 	cmp	local02, #0 wz
250a4     1C 00 90 5D |  if_ne	jmp	#LR__3435
250a8     24 32 0E F2 | 	cmp	local07, #36 wz
250ac     10 28 06 A6 |  if_e	mov	local02, #16
250b0     01 26 06 A1 |  if_e	add	local01, #1
250b4     0C 00 90 AD |  if_e	jmp	#LR__3434
250b8     25 32 0E F2 | 	cmp	local07, #37 wz
250bc     02 28 06 A6 |  if_e	mov	local02, #2
250c0     01 26 06 A1 |  if_e	add	local01, #1
250c4                 | LR__3434
250c4                 | LR__3435
250c4     97 48 48 FB | 	callpa	#(@LR__3443-@LR__3436)>>2,fcache_load_ptr_
250c8                 | LR__3436
250c8                 | LR__3437
250c8     13 33 C2 FA | 	rdbyte	local07, local01
250cc     5F 32 0E F2 | 	cmp	local07, #95 wz
250d0     01 26 06 F1 | 	add	local01, #1
250d4     F0 FF 9F AD |  if_e	jmp	#LR__3437
250d8     30 32 0E F2 | 	cmp	local07, #48 wz
250dc     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
250e0     00 2C 06 A6 |  if_e	mov	local04, #0
250e4     60 00 90 AD |  if_e	jmp	#LR__3442
250e8     31 32 56 F2 | 	cmps	local07, #49 wc
250ec     18 00 90 CD |  if_b	jmp	#LR__3438
250f0     3A 32 56 F2 | 	cmps	local07, #58 wc
250f4     19 2D 02 C6 |  if_b	mov	local04, local07
250f8     30 2C 86 C1 |  if_b	sub	local04, #48
250fc     00 28 0E C2 |  if_b	cmp	local02, #0 wz
25100     0A 28 06 86 |  if_c_and_z	mov	local02, #10
25104     40 00 90 CD |  if_b	jmp	#LR__3441
25108                 | LR__3438
25108     0B 28 56 F2 | 	cmps	local02, #11 wc
2510c     61 32 56 32 |  if_ae	cmps	local07, #97 wc
25110     14 00 90 CD |  if_b	jmp	#LR__3439
25114     67 32 56 F2 | 	cmps	local07, #103 wc
25118     61 32 86 C1 |  if_b	sub	local07, #97
2511c     0A 2C 06 C6 |  if_b	mov	local04, #10
25120     19 2D 02 C1 |  if_b	add	local04, local07
25124     20 00 90 CD |  if_b	jmp	#LR__3440
25128                 | LR__3439
25128     0B 28 56 F2 | 	cmps	local02, #11 wc
2512c     41 32 56 32 |  if_ae	cmps	local07, #65 wc
25130     24 00 90 CD |  if_b	jmp	#LR__3444
25134     47 32 56 F2 | 	cmps	local07, #71 wc
25138     41 32 86 C1 |  if_b	sub	local07, #65
2513c     0A 2C 06 C6 |  if_b	mov	local04, #10
25140     19 2D 02 C1 |  if_b	add	local04, local07
25144     10 00 90 3D |  if_ae	jmp	#LR__3444
25148                 | LR__3440
25148                 | LR__3441
25148                 | LR__3442
25148     15 29 02 FD | 	qmul	local02, local03
2514c     18 2A 62 FD | 	getqx	local03
25150     16 2B 02 F1 | 	add	local03, local04
25154     70 FF 9F FD | 	jmp	#LR__3436
25158                 | LR__3443
25158                 | LR__3444
25158     00 28 0E F2 | 	cmp	local02, #0 wz
2515c     64 00 90 5D |  if_ne	jmp	#LR__3450
25160     78 32 0E F2 | 	cmp	local07, #120 wz
25164     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
25168     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2516c     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
25170     14 00 90 5D |  if_ne	jmp	#LR__3445
25174     13 13 02 F6 | 	mov	arg01, local01
25178     10 14 06 F6 | 	mov	arg02, #16
2517c     C8 FE BF FD | 	call	#__system____builtin_atoi
25180     FD 2A 02 F6 | 	mov	local03, result1
25184     3C 00 90 FD | 	jmp	#LR__3449
25188                 | LR__3445
25188     62 32 0E F2 | 	cmp	local07, #98 wz
2518c     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
25190     14 00 90 5D |  if_ne	jmp	#LR__3446
25194     13 13 02 F6 | 	mov	arg01, local01
25198     02 14 06 F6 | 	mov	arg02, #2
2519c     A8 FE BF FD | 	call	#__system____builtin_atoi
251a0     FD 2A 02 F6 | 	mov	local03, result1
251a4     1C 00 90 FD | 	jmp	#LR__3448
251a8                 | LR__3446
251a8     6F 32 0E F2 | 	cmp	local07, #111 wz
251ac     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
251b0     10 00 90 5D |  if_ne	jmp	#LR__3447
251b4     13 13 02 F6 | 	mov	arg01, local01
251b8     08 14 06 F6 | 	mov	arg02, #8
251bc     88 FE BF FD | 	call	#__system____builtin_atoi
251c0     FD 2A 02 F6 | 	mov	local03, result1
251c4                 | LR__3447
251c4                 | LR__3448
251c4                 | LR__3449
251c4                 | LR__3450
251c4     00 2E 0E F2 | 	cmp	local05, #0 wz
251c8     15 2B 62 56 |  if_ne	neg	local03, local03
251cc     15 FB 01 F6 | 	mov	result1, local03
251d0     A7 F0 03 F6 | 	mov	ptra, fp
251d4     B2 00 A0 FD | 	call	#popregs_
251d8                 | __system____builtin_atoi_ret
251d8     2D 00 64 FD | 	ret
251dc                 | 
251dc                 | __system____builtin_atof
251dc     07 4A 05 F6 | 	mov	COUNT_, #7
251e0     A8 00 A0 FD | 	call	#pushregs_
251e4     09 27 02 F6 | 	mov	local01, arg01
251e8     00 28 06 F6 | 	mov	local02, #0
251ec     00 2A 06 F6 | 	mov	local03, #0
251f0     00 2C 06 F6 | 	mov	local04, #0
251f4     00 2E 06 F6 | 	mov	local05, #0
251f8     97 08 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
251fc                 | LR__3460
251fc     13 17 C2 FA | 	rdbyte	arg03, local01
25200     20 16 0E F2 | 	cmp	arg03, #32 wz
25204     01 26 06 A1 |  if_e	add	local01, #1
25208     F0 FF 9F AD |  if_e	jmp	#LR__3460
2520c                 | LR__3461
2520c     13 31 C2 FA | 	rdbyte	local06, local01
25210                 | LR__3462
25210     2B 30 0E F2 | 	cmp	local06, #43 wz
25214     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
25218     14 00 90 5D |  if_ne	jmp	#LR__3463
2521c     2D 30 0E F2 | 	cmp	local06, #45 wz
25220     1F 2C E6 A4 |  if_e	bitnot	local04, #31
25224     01 26 06 F1 | 	add	local01, #1
25228     13 31 C2 FA | 	rdbyte	local06, local01
2522c     E0 FF 9F FD | 	jmp	#LR__3462
25230                 | LR__3463
25230                 | LR__3464
25230     97 08 48 FB | 	callpa	#(@LR__3466-@LR__3465)>>2,fcache_load_ptr_
25234                 | LR__3465
25234     13 31 C2 FA | 	rdbyte	local06, local01
25238     5F 30 0E F2 | 	cmp	local06, #95 wz
2523c     01 26 06 F1 | 	add	local01, #1
25240     F0 FF 9F AD |  if_e	jmp	#LR__3465
25244                 | LR__3466
25244     00 30 0E F2 | 	cmp	local06, #0 wz
25248     5C 00 90 AD |  if_e	jmp	#LR__3468
2524c     30 30 56 F2 | 	cmps	local06, #48 wc
25250     44 00 90 CD |  if_b	jmp	#LR__3467
25254     3A 30 56 F2 | 	cmps	local06, #58 wc
25258     3C 00 90 3D |  if_ae	jmp	#LR__3467
2525c     14 13 02 F6 | 	mov	arg01, local02
25260     00 90 20 FF 
25264     00 14 06 F6 | 	mov	arg02, ##1092616192
25268     64 F7 BF FD | 	call	#__system___float_mul
2526c     FD 28 02 F6 | 	mov	local02, result1
25270     30 30 86 F1 | 	sub	local06, #48
25274     18 13 02 F6 | 	mov	arg01, local06
25278     50 F3 BF FD | 	call	#__system___float_fromuns
2527c     FD 14 02 F6 | 	mov	arg02, result1
25280     14 13 02 F6 | 	mov	arg01, local02
25284     78 F3 BF FD | 	call	#__system___float_add
25288     FD 28 02 F6 | 	mov	local02, result1
2528c     00 2E 0E F2 | 	cmp	local05, #0 wz
25290     01 2A 86 51 |  if_ne	sub	local03, #1
25294     98 FF 9F FD | 	jmp	#LR__3464
25298                 | LR__3467
25298     2E 30 0E F2 | 	cmp	local06, #46 wz
2529c     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
252a0     01 2E 06 A6 |  if_e	mov	local05, #1
252a4     88 FF 9F AD |  if_e	jmp	#LR__3464
252a8                 | LR__3468
252a8     45 30 0E F2 | 	cmp	local06, #69 wz
252ac     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
252b0     18 00 90 5D |  if_ne	jmp	#LR__3469
252b4     13 13 02 F6 | 	mov	arg01, local01
252b8     00 14 06 F6 | 	mov	arg02, #0
252bc     88 FD BF FD | 	call	#__system____builtin_atoi
252c0     15 FB 01 F1 | 	add	result1, local03
252c4     FD 32 02 F6 | 	mov	local07, result1
252c8     04 00 90 FD | 	jmp	#LR__3470
252cc                 | LR__3469
252cc     15 33 02 F6 | 	mov	local07, local03
252d0                 | LR__3470
252d0     19 17 02 F6 | 	mov	arg03, local07
252d4     14 13 02 F6 | 	mov	arg01, local02
252d8     00 90 20 FF 
252dc     00 14 06 F6 | 	mov	arg02, ##1092616192
252e0     F4 06 B0 FD | 	call	#__system___float_pow_n
252e4     16 FB 61 F5 | 	xor	result1, local04
252e8     A7 F0 03 F6 | 	mov	ptra, fp
252ec     B2 00 A0 FD | 	call	#popregs_
252f0                 | __system____builtin_atof_ret
252f0     2D 00 64 FD | 	ret
252f4                 | 
252f4                 | __system____builtin_ilogb
252f4     FC FB BF FD | 	call	#__system___float_Unpack
252f8     00 FE 0D F2 | 	cmp	result3, #0 wz
252fc     00 00 40 AF 
25300     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
25304     24 00 90 AD |  if_e	jmp	#LR__3481
25308     80 FC 0D F2 | 	cmp	result2, #128 wz
2530c     18 00 90 5D |  if_ne	jmp	#LR__3480
25310     00 00 10 FF 
25314     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
25318     1E FA CD A9 |  if_e	bmask	result1, #30
2531c     0C 00 90 AD |  if_e	jmp	#LR__3481
25320     1F FA C5 F9 | 	decod	result1, #31
25324     04 00 90 FD | 	jmp	#LR__3481
25328                 | LR__3480
25328     FE FA 01 F6 | 	mov	result1, result2
2532c                 | LR__3481
2532c                 | __system____builtin_ilogb_ret
2532c     2D 00 64 FD | 	ret
25330                 | 
25330                 | __system____builtin_sinf
25330     03 4A 05 F6 | 	mov	COUNT_, #3
25334     A8 00 A0 FD | 	call	#pushregs_
25338     09 27 02 F6 | 	mov	local01, arg01
2533c     87 64 20 FF 
25340     DB 15 06 F6 | 	mov	arg02, ##1086918619
25344     8C F8 BF FD | 	call	#__system___float_div
25348     FD 12 02 F6 | 	mov	arg01, result1
2534c     00 14 06 F6 | 	mov	arg02, #0
25350     44 FB BF FD | 	call	#__system___float_tointeger
25354     FD 16 0A F6 | 	mov	arg03, result1 wz
25358     44 00 90 AD |  if_e	jmp	#LR__3490
2535c     0B 13 52 F6 | 	abs	arg01, arg03 wc
25360     1F 28 C6 C9 |  if_b	decod	local02, #31
25364     00 28 06 36 |  if_ae	mov	local02, #0
25368     60 F2 BF FD | 	call	#__system___float_fromuns
2536c     14 FB 61 F5 | 	xor	result1, local02
25370     FD 12 02 F6 | 	mov	arg01, result1
25374     1E 14 C6 F9 | 	decod	arg02, #30
25378     54 F6 BF FD | 	call	#__system___float_mul
2537c     FD 12 02 F6 | 	mov	arg01, result1
25380     87 24 20 FF 
25384     DB 15 06 F6 | 	mov	arg02, ##1078530011
25388     44 F6 BF FD | 	call	#__system___float_mul
2538c     FD 14 02 F6 | 	mov	arg02, result1
25390     13 13 02 F6 | 	mov	arg01, local01
25394     1F 14 E6 F4 | 	bitnot	arg02, #31
25398     64 F2 BF FD | 	call	#__system___float_add
2539c     FD 26 02 F6 | 	mov	local01, result1
253a0                 | LR__3490
253a0     13 13 02 F6 | 	mov	arg01, local01
253a4     66 E6 1E FF 
253a8     CD 14 06 F6 | 	mov	arg02, ##1036831949
253ac     01 16 06 F6 | 	mov	arg03, #1
253b0     50 FA BF FD | 	call	#__system___float_cmp
253b4     00 FA 55 F2 | 	cmps	result1, #0 wc
253b8     5C 00 90 3D |  if_ae	jmp	#LR__3491
253bc     13 13 02 F6 | 	mov	arg01, local01
253c0     66 E6 5E FF 
253c4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
253c8     01 16 66 F6 | 	neg	arg03, #1
253cc     34 FA BF FD | 	call	#__system___float_cmp
253d0     01 FA 55 F2 | 	cmps	result1, #1 wc
253d4     40 00 90 CD |  if_b	jmp	#LR__3491
253d8     13 13 02 F6 | 	mov	arg01, local01
253dc     13 15 02 F6 | 	mov	arg02, local01
253e0     EC F5 BF FD | 	call	#__system___float_mul
253e4     FD 12 02 F6 | 	mov	arg01, result1
253e8     13 15 02 F6 | 	mov	arg02, local01
253ec     E0 F5 BF FD | 	call	#__system___float_mul
253f0     FD 12 02 F6 | 	mov	arg01, result1
253f4     00 60 20 FF 
253f8     00 14 06 F6 | 	mov	arg02, ##1086324736
253fc     D4 F7 BF FD | 	call	#__system___float_div
25400     FD 14 02 F6 | 	mov	arg02, result1
25404     13 13 02 F6 | 	mov	arg01, local01
25408     1F 14 E6 F4 | 	bitnot	arg02, #31
2540c     F0 F1 BF FD | 	call	#__system___float_add
25410     FD 2A 02 F6 | 	mov	local03, result1
25414     54 00 90 FD | 	jmp	#LR__3492
25418                 | LR__3491
25418     13 13 02 F6 | 	mov	arg01, local01
2541c     7C 91 26 FF 
25420     83 15 06 F6 | 	mov	arg02, ##1294137731
25424     A8 F5 BF FD | 	call	#__system___float_mul
25428     FD 12 02 F6 | 	mov	arg01, result1
2542c     00 14 06 F6 | 	mov	arg02, #0
25430     64 FA BF FD | 	call	#__system___float_tointeger
25434     02 FA 65 F0 | 	shl	result1, #2
25438     00 00 A0 FF 
2543c     FD 00 48 FD | 	qrotate	##1073741824, result1
25440     19 12 62 FD | 	getqy	arg01
25444     09 13 52 F6 | 	abs	arg01, arg01 wc
25448     1F 28 C6 C9 |  if_b	decod	local02, #31
2544c     00 28 06 36 |  if_ae	mov	local02, #0
25450     78 F1 BF FD | 	call	#__system___float_fromuns
25454     14 FB 61 F5 | 	xor	result1, local02
25458     FD 12 02 F6 | 	mov	arg01, result1
2545c     00 40 27 FF 
25460     00 14 06 F6 | 	mov	arg02, ##1317011456
25464     6C F7 BF FD | 	call	#__system___float_div
25468     FD 2A 02 F6 | 	mov	local03, result1
2546c                 | LR__3492
2546c     15 FB 01 F6 | 	mov	result1, local03
25470     A7 F0 03 F6 | 	mov	ptra, fp
25474     B2 00 A0 FD | 	call	#popregs_
25478                 | __system____builtin_sinf_ret
25478     2D 00 64 FD | 	ret
2547c                 | 
2547c                 | __system____builtin_tanf
2547c     02 4A 05 F6 | 	mov	COUNT_, #2
25480     A8 00 A0 FD | 	call	#pushregs_
25484     09 27 02 F6 | 	mov	local01, arg01
25488     A4 FE BF FD | 	call	#__system____builtin_sinf
2548c     FD 28 02 F6 | 	mov	local02, result1
25490     13 15 02 F6 | 	mov	arg02, local01
25494     87 E4 1F FF 
25498     DB 13 06 F6 | 	mov	arg01, ##1070141403
2549c     1F 14 E6 F4 | 	bitnot	arg02, #31
254a0     5C F1 BF FD | 	call	#__system___float_add
254a4     FD 12 02 F6 | 	mov	arg01, result1
254a8     84 FE BF FD | 	call	#__system____builtin_sinf
254ac     FD 14 02 F6 | 	mov	arg02, result1
254b0     14 13 02 F6 | 	mov	arg01, local02
254b4     1C F7 BF FD | 	call	#__system___float_div
254b8     A7 F0 03 F6 | 	mov	ptra, fp
254bc     B2 00 A0 FD | 	call	#popregs_
254c0                 | __system____builtin_tanf_ret
254c0     2D 00 64 FD | 	ret
254c4                 | 
254c4                 | __system____builtin_asinf
254c4     01 4A 05 F6 | 	mov	COUNT_, #1
254c8     A8 00 A0 FD | 	call	#pushregs_
254cc     09 27 02 F6 | 	mov	local01, arg01
254d0     13 15 02 F6 | 	mov	arg02, local01
254d4     13 13 02 F6 | 	mov	arg01, local01
254d8     F4 F4 BF FD | 	call	#__system___float_mul
254dc     FD 14 02 F6 | 	mov	arg02, result1
254e0     00 C0 1F FF 
254e4     00 12 06 F6 | 	mov	arg01, ##1065353216
254e8     1F 14 E6 F4 | 	bitnot	arg02, #31
254ec     10 F1 BF FD | 	call	#__system___float_add
254f0     FD 12 02 F6 | 	mov	arg01, result1
254f4     00 F4 BF FD | 	call	#__system___float_sqrt
254f8     FD 14 02 F6 | 	mov	arg02, result1
254fc     13 13 02 F6 | 	mov	arg01, local01
25500     58 00 B0 FD | 	call	#__system____builtin_atan2f
25504     A7 F0 03 F6 | 	mov	ptra, fp
25508     B2 00 A0 FD | 	call	#popregs_
2550c                 | __system____builtin_asinf_ret
2550c     2D 00 64 FD | 	ret
25510                 | 
25510                 | __system____builtin_acosf
25510     01 4A 05 F6 | 	mov	COUNT_, #1
25514     A8 00 A0 FD | 	call	#pushregs_
25518     09 27 02 F6 | 	mov	local01, arg01
2551c     13 15 02 F6 | 	mov	arg02, local01
25520     13 13 02 F6 | 	mov	arg01, local01
25524     A8 F4 BF FD | 	call	#__system___float_mul
25528     FD 14 02 F6 | 	mov	arg02, result1
2552c     00 C0 1F FF 
25530     00 12 06 F6 | 	mov	arg01, ##1065353216
25534     1F 14 E6 F4 | 	bitnot	arg02, #31
25538     C4 F0 BF FD | 	call	#__system___float_add
2553c     FD 12 02 F6 | 	mov	arg01, result1
25540     B4 F3 BF FD | 	call	#__system___float_sqrt
25544     FD 12 02 F6 | 	mov	arg01, result1
25548     13 15 02 F6 | 	mov	arg02, local01
2554c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
25550     A7 F0 03 F6 | 	mov	ptra, fp
25554     B2 00 A0 FD | 	call	#popregs_
25558                 | __system____builtin_acosf_ret
25558     2D 00 64 FD | 	ret
2555c                 | 
2555c                 | __system____builtin_atan2f
2555c     04 4A 05 F6 | 	mov	COUNT_, #4
25560     A8 00 A0 FD | 	call	#pushregs_
25564     09 27 02 F6 | 	mov	local01, arg01
25568     0A 29 02 F6 | 	mov	local02, arg02
2556c     13 13 02 F6 | 	mov	arg01, local01
25570     00 14 06 F6 | 	mov	arg02, #0
25574     01 16 06 F6 | 	mov	arg03, #1
25578     88 F8 BF FD | 	call	#__system___float_cmp
2557c     00 FA 0D F2 | 	cmp	result1, #0 wz
25580     28 00 90 5D |  if_ne	jmp	#LR__3500
25584     14 13 02 F6 | 	mov	arg01, local02
25588     00 14 06 F6 | 	mov	arg02, #0
2558c     01 16 06 F6 | 	mov	arg03, #1
25590     70 F8 BF FD | 	call	#__system___float_cmp
25594     00 FA 55 F2 | 	cmps	result1, #0 wc
25598     87 24 60 CF 
2559c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
255a0     DC 00 90 CD |  if_b	jmp	#LR__3501
255a4     00 FA 05 F6 | 	mov	result1, #0
255a8     D4 00 90 FD | 	jmp	#LR__3501
255ac                 | LR__3500
255ac     14 13 02 F6 | 	mov	arg01, local02
255b0     14 15 02 F6 | 	mov	arg02, local02
255b4     18 F4 BF FD | 	call	#__system___float_mul
255b8     FD 2A 02 F6 | 	mov	local03, result1
255bc     13 13 02 F6 | 	mov	arg01, local01
255c0     13 15 02 F6 | 	mov	arg02, local01
255c4     08 F4 BF FD | 	call	#__system___float_mul
255c8     FD 14 02 F6 | 	mov	arg02, result1
255cc     15 13 02 F6 | 	mov	arg01, local03
255d0     2C F0 BF FD | 	call	#__system___float_add
255d4     FD 12 02 F6 | 	mov	arg01, result1
255d8     1C F3 BF FD | 	call	#__system___float_sqrt
255dc     FD 2A 02 F6 | 	mov	local03, result1
255e0     14 13 02 F6 | 	mov	arg01, local02
255e4     15 15 02 F6 | 	mov	arg02, local03
255e8     E8 F5 BF FD | 	call	#__system___float_div
255ec     FD 28 02 F6 | 	mov	local02, result1
255f0     13 13 02 F6 | 	mov	arg01, local01
255f4     15 15 02 F6 | 	mov	arg02, local03
255f8     D8 F5 BF FD | 	call	#__system___float_div
255fc     FD 26 02 F6 | 	mov	local01, result1
25600     00 40 27 FF 
25604     00 12 06 F6 | 	mov	arg01, ##1317011456
25608     14 15 02 F6 | 	mov	arg02, local02
2560c     C0 F3 BF FD | 	call	#__system___float_mul
25610     FD 12 02 F6 | 	mov	arg01, result1
25614     00 14 06 F6 | 	mov	arg02, #0
25618     7C F8 BF FD | 	call	#__system___float_tointeger
2561c     FD 2A 02 F6 | 	mov	local03, result1
25620     00 40 27 FF 
25624     00 12 06 F6 | 	mov	arg01, ##1317011456
25628     13 15 02 F6 | 	mov	arg02, local01
2562c     A0 F3 BF FD | 	call	#__system___float_mul
25630     FD 12 02 F6 | 	mov	arg01, result1
25634     00 14 06 F6 | 	mov	arg02, #0
25638     5C F8 BF FD | 	call	#__system___float_tointeger
2563c     FD 2A 52 FD | 	qvector	local03, result1
25640     87 24 20 FF 
25644     DB 2B 06 F6 | 	mov	local03, ##1078530011
25648     19 12 62 FD | 	getqy	arg01
2564c     01 12 C6 F0 | 	sar	arg01, #1
25650     09 13 52 F6 | 	abs	arg01, arg01 wc
25654     1F 2C C6 C9 |  if_b	decod	local04, #31
25658     00 2C 06 36 |  if_ae	mov	local04, #0
2565c     6C EF BF FD | 	call	#__system___float_fromuns
25660     16 FB 61 F5 | 	xor	result1, local04
25664     FD 12 02 F6 | 	mov	arg01, result1
25668     00 40 27 FF 
2566c     00 14 06 F6 | 	mov	arg02, ##1317011456
25670     60 F5 BF FD | 	call	#__system___float_div
25674     FD 14 02 F6 | 	mov	arg02, result1
25678     15 13 02 F6 | 	mov	arg01, local03
2567c     50 F3 BF FD | 	call	#__system___float_mul
25680                 | LR__3501
25680     A7 F0 03 F6 | 	mov	ptra, fp
25684     B2 00 A0 FD | 	call	#popregs_
25688                 | __system____builtin_atan2f_ret
25688     2D 00 64 FD | 	ret
2568c                 | 
2568c                 | __system____builtin_exp2f
2568c     04 4A 05 F6 | 	mov	COUNT_, #4
25690     A8 00 A0 FD | 	call	#pushregs_
25694     09 27 02 F6 | 	mov	local01, arg01
25698     00 7F 21 FF 
2569c     00 14 06 F6 | 	mov	arg02, ##1123942400
256a0     01 16 66 F6 | 	neg	arg03, #1
256a4     5C F7 BF FD | 	call	#__system___float_cmp
256a8     00 FA 55 F2 | 	cmps	result1, #0 wc
256ac     00 C0 3F 3F 
256b0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
256b4     DC 00 90 3D |  if_ae	jmp	#LR__3511
256b8     13 13 02 F6 | 	mov	arg01, local01
256bc     00 7F 61 FF 
256c0     00 14 06 F6 | 	mov	arg02, ##-1023541248
256c4     01 16 06 F6 | 	mov	arg03, #1
256c8     38 F7 BF FD | 	call	#__system___float_cmp
256cc     00 FA 55 F2 | 	cmps	result1, #0 wc
256d0     00 FA 05 C6 |  if_b	mov	result1, #0
256d4     BC 00 90 CD |  if_b	jmp	#LR__3511
256d8     13 13 02 F6 | 	mov	arg01, local01
256dc     00 14 06 F6 | 	mov	arg02, #0
256e0     B4 F7 BF FD | 	call	#__system___float_tointeger
256e4     FD 28 02 F6 | 	mov	local02, result1
256e8     14 13 52 F6 | 	abs	arg01, local02 wc
256ec     1F 2A C6 C9 |  if_b	decod	local03, #31
256f0     00 2A 06 36 |  if_ae	mov	local03, #0
256f4     D4 EE BF FD | 	call	#__system___float_fromuns
256f8     15 FB 61 F5 | 	xor	result1, local03
256fc     FD 14 02 F6 | 	mov	arg02, result1
25700     13 13 02 F6 | 	mov	arg01, local01
25704     1F 14 E6 F4 | 	bitnot	arg02, #31
25708     F4 EE BF FD | 	call	#__system___float_add
2570c     FD 2C 02 F6 | 	mov	local04, result1
25710     16 13 02 F6 | 	mov	arg01, local04
25714     00 14 06 F6 | 	mov	arg02, #0
25718     01 16 06 F6 | 	mov	arg03, #1
2571c     E4 F6 BF FD | 	call	#__system___float_cmp
25720     00 FA 55 F2 | 	cmps	result1, #0 wc
25724     18 00 90 3D |  if_ae	jmp	#LR__3510
25728     16 13 02 F6 | 	mov	arg01, local04
2572c     00 C0 1F FF 
25730     00 14 06 F6 | 	mov	arg02, ##1065353216
25734     C8 EE BF FD | 	call	#__system___float_add
25738     FD 2C 02 F6 | 	mov	local04, result1
2573c     01 28 86 F1 | 	sub	local02, #1
25740                 | LR__3510
25740     7F 28 06 F1 | 	add	local02, #127
25744     17 28 66 F0 | 	shl	local02, #23
25748     16 13 02 F6 | 	mov	arg01, local04
2574c     00 80 26 FF 
25750     00 14 06 F6 | 	mov	arg02, ##1291845632
25754     78 F2 BF FD | 	call	#__system___float_mul
25758     FD 12 02 F6 | 	mov	arg01, result1
2575c     00 14 06 F6 | 	mov	arg02, #0
25760     34 F7 BF FD | 	call	#__system___float_tointeger
25764     FD 2C 0A F6 | 	mov	local04, result1 wz
25768     14 FB 01 A6 |  if_e	mov	result1, local02
2576c     24 00 90 AD |  if_e	jmp	#LR__3511
25770     3E 2C 26 F4 | 	bith	local04, #62
25774     0F 2C 62 FD | 	qexp	local04
25778     14 13 02 F6 | 	mov	arg01, local02
2577c     18 14 62 FD | 	getqx	arg02
25780     01 14 06 F1 | 	add	arg02, #1
25784     01 14 46 F0 | 	shr	arg02, #1
25788     00 80 1F FF 
2578c     00 14 06 F1 | 	add	arg02, ##1056964608
25790     3C F2 BF FD | 	call	#__system___float_mul
25794                 | LR__3511
25794     A7 F0 03 F6 | 	mov	ptra, fp
25798     B2 00 A0 FD | 	call	#popregs_
2579c                 | __system____builtin_exp2f_ret
2579c     2D 00 64 FD | 	ret
257a0                 | 
257a0                 | __system____builtin_log2f
257a0     06 4A 05 F6 | 	mov	COUNT_, #6
257a4     A8 00 A0 FD | 	call	#pushregs_
257a8     09 27 02 F6 | 	mov	local01, arg01
257ac     09 29 0A F6 | 	mov	local02, arg01 wz
257b0     00 00 40 5F 
257b4     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
257b8     00 40 00 AF 
257bc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
257c0     08 01 90 AD |  if_e	jmp	#LR__3524
257c4     00 28 56 F2 | 	cmps	local02, #0 wc
257c8     00 E0 3F CF 
257cc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
257d0     F8 00 90 CD |  if_b	jmp	#LR__3524
257d4     13 13 02 F6 | 	mov	arg01, local01
257d8     00 90 20 FF 
257dc     00 14 06 F6 | 	mov	arg02, ##1092616192
257e0     01 16 06 F6 | 	mov	arg03, #1
257e4     1C F6 BF FD | 	call	#__system___float_cmp
257e8     00 FA 0D F2 | 	cmp	result1, #0 wz
257ec     4D 2A 20 AF 
257f0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
257f4     D4 00 90 AD |  if_e	jmp	#LR__3524
257f8     13 13 02 F6 | 	mov	arg01, local01
257fc     FC 16 20 FF 
25800     54 14 06 F6 | 	mov	arg02, ##1076754516
25804     01 16 06 F6 | 	mov	arg03, #1
25808     F8 F5 BF FD | 	call	#__system___float_cmp
2580c     00 FA 0D F2 | 	cmp	result1, #0 wz
25810     55 DC 1F AF 
25814     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
25818     B0 00 90 AD |  if_e	jmp	#LR__3524
2581c     14 2B 02 F6 | 	mov	local03, local02
25820     17 2A 46 F0 | 	shr	local03, #23
25824     15 2B E2 F8 | 	getbyte	local03, local03, #0
25828     17 29 06 F4 | 	bitl	local02, #279
2582c     14 2D 02 F6 | 	mov	local04, local02
25830     FF 2A 0E F2 | 	cmp	local03, #255 wz
25834     1C 00 90 5D |  if_ne	jmp	#LR__3520
25838     00 2C 0E F2 | 	cmp	local04, #0 wz
2583c     00 C0 3F 5F 
25840     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
25844     00 E0 3F AF 
25848     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2584c     17 FB 01 F6 | 	mov	result1, local05
25850     78 00 90 FD | 	jmp	#LR__3524
25854                 | LR__3520
25854     00 2A 0E F2 | 	cmp	local03, #0 wz
25858     17 2C 26 54 |  if_ne	bith	local04, #23
2585c     7F 2A 86 51 |  if_ne	sub	local03, #127
25860     28 00 90 5D |  if_ne	jmp	#LR__3523
25864     00 2C 0E F2 | 	cmp	local04, #0 wz
25868     00 40 00 AF 
2586c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
25870     58 00 90 AD |  if_e	jmp	#LR__3524
25874     7E 2A 66 F6 | 	neg	local03, #126
25878     97 08 48 FB | 	callpa	#(@LR__3522-@LR__3521)>>2,fcache_load_ptr_
2587c                 | LR__3521
2587c     17 2C 2E F4 | 	testbn	local04, #23 wz
25880     01 2C 66 A0 |  if_e	shl	local04, #1
25884     01 2A 06 A1 |  if_e	add	local03, #1
25888     F0 FF 9F AD |  if_e	jmp	#LR__3521
2588c                 | LR__3522
2588c                 | LR__3523
2588c     0E 2C 62 FD | 	qlog	local04
25890     01 2A 86 F1 | 	sub	local03, #1
25894     15 13 52 F6 | 	abs	arg01, local03 wc
25898     1F 30 C6 C9 |  if_b	decod	local06, #31
2589c     00 30 06 36 |  if_ae	mov	local06, #0
258a0     18 2E 62 FD | 	getqx	local05
258a4     9B 2E 06 F4 | 	bitl	local05, #155
258a8     08 2E 06 F1 | 	add	local05, #8
258ac     04 2E 46 F0 | 	shr	local05, #4
258b0     00 C0 1F FF 
258b4     00 2E 06 F1 | 	add	local05, ##1065353216
258b8     10 ED BF FD | 	call	#__system___float_fromuns
258bc     18 FB 61 F5 | 	xor	result1, local06
258c0     FD 14 02 F6 | 	mov	arg02, result1
258c4     17 13 02 F6 | 	mov	arg01, local05
258c8     34 ED BF FD | 	call	#__system___float_add
258cc                 | LR__3524
258cc     A7 F0 03 F6 | 	mov	ptra, fp
258d0     B2 00 A0 FD | 	call	#popregs_
258d4                 | __system____builtin_log2f_ret
258d4     2D 00 64 FD | 	ret
258d8                 | 
258d8                 | __system____builtin_powf
258d8     04 4A 05 F6 | 	mov	COUNT_, #4
258dc     A8 00 A0 FD | 	call	#pushregs_
258e0     09 27 02 F6 | 	mov	local01, arg01
258e4     0A 29 02 F6 | 	mov	local02, arg02
258e8     14 13 02 F6 | 	mov	arg01, local02
258ec     00 14 06 F6 | 	mov	arg02, #0
258f0     A4 F5 BF FD | 	call	#__system___float_tointeger
258f4     FD 2A 02 F6 | 	mov	local03, result1
258f8     15 13 52 F6 | 	abs	arg01, local03 wc
258fc     1F 2C C6 C9 |  if_b	decod	local04, #31
25900     00 2C 06 36 |  if_ae	mov	local04, #0
25904     C4 EC BF FD | 	call	#__system___float_fromuns
25908     16 FB 61 F5 | 	xor	result1, local04
2590c     FD 12 02 F6 | 	mov	arg01, result1
25910     14 15 02 F6 | 	mov	arg02, local02
25914     01 16 06 F6 | 	mov	arg03, #1
25918     E8 F4 BF FD | 	call	#__system___float_cmp
2591c     00 FA 0D F2 | 	cmp	result1, #0 wz
25920     18 00 90 5D |  if_ne	jmp	#LR__3530
25924     00 C0 1F FF 
25928     00 12 06 F6 | 	mov	arg01, ##1065353216
2592c     13 15 02 F6 | 	mov	arg02, local01
25930     15 17 02 F6 | 	mov	arg03, local03
25934     A0 00 B0 FD | 	call	#__system___float_pow_n
25938     58 00 90 FD | 	jmp	#LR__3531
2593c                 | LR__3530
2593c     13 13 02 F6 | 	mov	arg01, local01
25940     00 14 06 F6 | 	mov	arg02, #0
25944     01 16 06 F6 | 	mov	arg03, #1
25948     B8 F4 BF FD | 	call	#__system___float_cmp
2594c     00 FA 55 F2 | 	cmps	result1, #0 wc
25950     00 E0 3F CF 
25954     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
25958     38 00 90 CD |  if_b	jmp	#LR__3531
2595c     13 13 02 F6 | 	mov	arg01, local01
25960     00 14 06 F6 | 	mov	arg02, #0
25964     01 16 06 F6 | 	mov	arg03, #1
25968     98 F4 BF FD | 	call	#__system___float_cmp
2596c     00 FA 0D F2 | 	cmp	result1, #0 wz
25970     00 FA 05 A6 |  if_e	mov	result1, #0
25974     1C 00 90 AD |  if_e	jmp	#LR__3531
25978     13 13 02 F6 | 	mov	arg01, local01
2597c     20 FE BF FD | 	call	#__system____builtin_log2f
25980     FD 12 02 F6 | 	mov	arg01, result1
25984     14 15 02 F6 | 	mov	arg02, local02
25988     44 F0 BF FD | 	call	#__system___float_mul
2598c     FD 12 02 F6 | 	mov	arg01, result1
25990     F8 FC BF FD | 	call	#__system____builtin_exp2f
25994                 | LR__3531
25994     A7 F0 03 F6 | 	mov	ptra, fp
25998     B2 00 A0 FD | 	call	#popregs_
2599c                 | __system____builtin_powf_ret
2599c     2D 00 64 FD | 	ret
259a0                 | 
259a0                 | __system____builtin_logbase
259a0     02 4A 05 F6 | 	mov	COUNT_, #2
259a4     A8 00 A0 FD | 	call	#pushregs_
259a8     09 27 02 F6 | 	mov	local01, arg01
259ac     0A 13 02 F6 | 	mov	arg01, arg02
259b0     EC FD BF FD | 	call	#__system____builtin_log2f
259b4     FD 28 02 F6 | 	mov	local02, result1
259b8     13 13 02 F6 | 	mov	arg01, local01
259bc     E0 FD BF FD | 	call	#__system____builtin_log2f
259c0     FD 14 02 F6 | 	mov	arg02, result1
259c4     14 13 02 F6 | 	mov	arg01, local02
259c8     08 F2 BF FD | 	call	#__system___float_div
259cc     A7 F0 03 F6 | 	mov	ptra, fp
259d0     B2 00 A0 FD | 	call	#popregs_
259d4                 | __system____builtin_logbase_ret
259d4     2D 00 64 FD | 	ret
259d8                 | 
259d8                 | __system___float_pow_n
259d8     05 4A 05 F6 | 	mov	COUNT_, #5
259dc     A8 00 A0 FD | 	call	#pushregs_
259e0     09 27 02 F6 | 	mov	local01, arg01
259e4     0A 29 02 F6 | 	mov	local02, arg02
259e8     0B 2B 02 F6 | 	mov	local03, arg03
259ec     00 2A 56 F2 | 	cmps	local03, #0 wc
259f0     18 00 90 3D |  if_ae	jmp	#LR__3540
259f4     01 2C 06 F6 | 	mov	local04, #1
259f8     15 2B 62 F6 | 	neg	local03, local03
259fc     00 2A 56 F2 | 	cmps	local03, #0 wc
25a00     00 FA 05 C6 |  if_b	mov	result1, #0
25a04     94 00 90 CD |  if_b	jmp	#LR__3548
25a08     04 00 90 FD | 	jmp	#LR__3541
25a0c                 | LR__3540
25a0c     00 2C 06 F6 | 	mov	local04, #0
25a10                 | LR__3541
25a10     00 C0 1F FF 
25a14     00 2E 06 F6 | 	mov	local05, ##1065353216
25a18                 | LR__3542
25a18     01 2A 56 F2 | 	cmps	local03, #1 wc
25a1c     30 00 90 CD |  if_b	jmp	#LR__3544
25a20     01 2A CE F7 | 	test	local03, #1 wz
25a24     10 00 90 AD |  if_e	jmp	#LR__3543
25a28     17 13 02 F6 | 	mov	arg01, local05
25a2c     14 15 02 F6 | 	mov	arg02, local02
25a30     9C EF BF FD | 	call	#__system___float_mul
25a34     FD 2E 02 F6 | 	mov	local05, result1
25a38                 | LR__3543
25a38     01 2A C6 F0 | 	sar	local03, #1
25a3c     14 13 02 F6 | 	mov	arg01, local02
25a40     14 15 02 F6 | 	mov	arg02, local02
25a44     88 EF BF FD | 	call	#__system___float_mul
25a48     FD 28 02 F6 | 	mov	local02, result1
25a4c     C8 FF 9F FD | 	jmp	#LR__3542
25a50                 | LR__3544
25a50     00 2C 0E F2 | 	cmp	local04, #0 wz
25a54     14 00 90 AD |  if_e	jmp	#LR__3545
25a58     13 13 02 F6 | 	mov	arg01, local01
25a5c     17 15 02 F6 | 	mov	arg02, local05
25a60     70 F1 BF FD | 	call	#__system___float_div
25a64     FD 2E 02 F6 | 	mov	local05, result1
25a68     2C 00 90 FD | 	jmp	#LR__3547
25a6c                 | LR__3545
25a6c     13 13 02 F6 | 	mov	arg01, local01
25a70     00 C0 1F FF 
25a74     00 14 06 F6 | 	mov	arg02, ##1065353216
25a78     01 16 06 F6 | 	mov	arg03, #1
25a7c     84 F3 BF FD | 	call	#__system___float_cmp
25a80     00 FA 0D F2 | 	cmp	result1, #0 wz
25a84     10 00 90 AD |  if_e	jmp	#LR__3546
25a88     13 13 02 F6 | 	mov	arg01, local01
25a8c     17 15 02 F6 | 	mov	arg02, local05
25a90     3C EF BF FD | 	call	#__system___float_mul
25a94     FD 2E 02 F6 | 	mov	local05, result1
25a98                 | LR__3546
25a98                 | LR__3547
25a98     17 FB 01 F6 | 	mov	result1, local05
25a9c                 | LR__3548
25a9c     A7 F0 03 F6 | 	mov	ptra, fp
25aa0     B2 00 A0 FD | 	call	#popregs_
25aa4                 | __system___float_pow_n_ret
25aa4     2D 00 64 FD | 	ret
25aa8                 | 
25aa8                 | __system___gc_ptrs
25aa8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
25aac     00 03 02 F6 | 	mov	_var02, _var01
25ab0     BB 00 00 FF 
25ab4     F8 02 06 F1 | 	add	_var02, ##95992
25ab8     00 FD 09 FB | 	rdlong	result2, _var01 wz
25abc     74 00 90 5D |  if_ne	jmp	#LR__3550
25ac0     01 FD 01 F6 | 	mov	result2, _var02
25ac4     00 FD 81 F1 | 	sub	result2, _var01
25ac8     00 03 58 FC | 	wrword	#1, _var01
25acc     00 FB 01 F6 | 	mov	result1, _var01
25ad0     02 FA 05 F1 | 	add	result1, #2
25ad4     36 00 80 FF 
25ad8     FD 20 59 FC | 	wrword	##27792, result1
25adc     00 FB 01 F6 | 	mov	result1, _var01
25ae0     04 FA 05 F1 | 	add	result1, #4
25ae4     FD 00 58 FC | 	wrword	#0, result1
25ae8     00 FB 01 F6 | 	mov	result1, _var01
25aec     06 FA 05 F1 | 	add	result1, #6
25af0     FD 02 58 FC | 	wrword	#1, result1
25af4     10 00 06 F1 | 	add	_var01, #16
25af8     FE FC 51 F6 | 	abs	result2, result2 wc
25afc     04 FC 45 F0 | 	shr	result2, #4
25b00     FE FC 81 F6 | 	negc	result2, result2
25b04     00 FD 51 FC | 	wrword	result2, _var01
25b08     00 FD 01 F6 | 	mov	result2, _var01
25b0c     02 FC 05 F1 | 	add	result2, #2
25b10     36 00 80 FF 
25b14     FE 1E 59 FC | 	wrword	##27791, result2
25b18     00 FD 01 F6 | 	mov	result2, _var01
25b1c     04 FC 05 F1 | 	add	result2, #4
25b20     FE 00 58 FC | 	wrword	#0, result2
25b24     00 FD 01 F6 | 	mov	result2, _var01
25b28     06 FC 05 F1 | 	add	result2, #6
25b2c     FE 00 58 FC | 	wrword	#0, result2
25b30     10 00 86 F1 | 	sub	_var01, #16
25b34                 | LR__3550
25b34     00 FB 01 F6 | 	mov	result1, _var01
25b38     01 FD 01 F6 | 	mov	result2, _var02
25b3c                 | __system___gc_ptrs_ret
25b3c     2D 00 64 FD | 	ret
25b40                 | 
25b40                 | __system___gc_tryalloc
25b40     0B 4A 05 F6 | 	mov	COUNT_, #11
25b44     A8 00 A0 FD | 	call	#pushregs_
25b48     09 27 02 F6 | 	mov	local01, arg01
25b4c     0A 29 02 F6 | 	mov	local02, arg02
25b50     54 FF BF FD | 	call	#__system___gc_ptrs
25b54     FD 2A 02 F6 | 	mov	local03, result1
25b58     FE 2C 02 F6 | 	mov	local04, result2
25b5c     15 2F 02 F6 | 	mov	local05, local03
25b60     00 30 06 F6 | 	mov	local06, #0
25b64     97 1E 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
25b68                 | LR__3560
25b68     17 33 02 F6 | 	mov	local07, local05
25b6c     06 2E 06 F1 | 	add	local05, #6
25b70     17 15 EA FA | 	rdword	arg02, local05 wz
25b74     15 13 02 F6 | 	mov	arg01, local03
25b78     00 FA 05 A6 |  if_e	mov	result1, #0
25b7c     04 14 66 50 |  if_ne	shl	arg02, #4
25b80     0A 13 02 51 |  if_ne	add	arg01, arg02
25b84     09 FB 01 56 |  if_ne	mov	result1, arg01
25b88     FD 2E 0A F6 | 	mov	local05, result1 wz
25b8c     17 31 E2 5A |  if_ne	rdword	local06, local05
25b90     00 2E 0E F2 | 	cmp	local05, #0 wz
25b94     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
25b98     08 00 90 1D |  if_a	jmp	#LR__3562
25b9c     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
25ba0     C4 FF 9F 1D |  if_a	jmp	#LR__3560
25ba4                 | LR__3561
25ba4                 | LR__3562
25ba4     00 2E 0E F2 | 	cmp	local05, #0 wz
25ba8     17 FB 01 A6 |  if_e	mov	result1, local05
25bac     3C 01 90 AD |  if_e	jmp	#LR__3565
25bb0     17 FD 01 F6 | 	mov	result2, local05
25bb4     06 FC 05 F1 | 	add	result2, #6
25bb8     FE 34 E2 FA | 	rdword	local08, result2
25bbc     18 27 52 F2 | 	cmps	local01, local06 wc
25bc0     C0 00 90 3D |  if_ae	jmp	#LR__3564
25bc4     17 27 52 FC | 	wrword	local01, local05
25bc8     17 13 02 F6 | 	mov	arg01, local05
25bcc     13 35 02 F6 | 	mov	local08, local01
25bd0     04 34 66 F0 | 	shl	local08, #4
25bd4     1A 13 02 F1 | 	add	arg01, local08
25bd8     13 31 82 F1 | 	sub	local06, local01
25bdc     09 31 52 FC | 	wrword	local06, arg01
25be0     09 35 02 F6 | 	mov	local08, arg01
25be4     02 34 06 F1 | 	add	local08, #2
25be8     36 00 80 FF 
25bec     1A 1F 59 FC | 	wrword	##27791, local08
25bf0     17 15 0A F6 | 	mov	arg02, local05 wz
25bf4     00 FA 05 A6 |  if_e	mov	result1, #0
25bf8     15 15 82 51 |  if_ne	sub	arg02, local03
25bfc     04 14 46 50 |  if_ne	shr	arg02, #4
25c00     0A FB 01 56 |  if_ne	mov	result1, arg02
25c04     09 35 02 F6 | 	mov	local08, arg01
25c08     04 34 06 F1 | 	add	local08, #4
25c0c     1A FB 51 FC | 	wrword	result1, local08
25c10     17 35 02 F6 | 	mov	local08, local05
25c14     06 34 06 F1 | 	add	local08, #6
25c18     09 15 02 F6 | 	mov	arg02, arg01
25c1c     1A 35 E2 FA | 	rdword	local08, local08
25c20     06 14 06 F1 | 	add	arg02, #6
25c24     0A 35 52 FC | 	wrword	local08, arg02
25c28     09 37 02 F6 | 	mov	local09, arg01
25c2c     1B 15 0A F6 | 	mov	arg02, local09 wz
25c30     00 FA 05 A6 |  if_e	mov	result1, #0
25c34     15 15 82 51 |  if_ne	sub	arg02, local03
25c38     04 14 46 50 |  if_ne	shr	arg02, #4
25c3c     0A FB 01 56 |  if_ne	mov	result1, arg02
25c40     FD 34 02 F6 | 	mov	local08, result1
25c44     09 39 EA FA | 	rdword	local10, arg01 wz
25c48     00 FA 05 A6 |  if_e	mov	result1, #0
25c4c     04 38 66 50 |  if_ne	shl	local10, #4
25c50     1C 13 02 51 |  if_ne	add	arg01, local10
25c54     09 FB 01 56 |  if_ne	mov	result1, arg01
25c58     FD 3A 0A F6 | 	mov	local11, result1 wz
25c5c     24 00 90 AD |  if_e	jmp	#LR__3563
25c60     16 3B 52 F2 | 	cmps	local11, local04 wc
25c64     1C 00 90 3D |  if_ae	jmp	#LR__3563
25c68     1B 15 0A F6 | 	mov	arg02, local09 wz
25c6c     00 FA 05 A6 |  if_e	mov	result1, #0
25c70     15 15 82 51 |  if_ne	sub	arg02, local03
25c74     04 14 46 50 |  if_ne	shr	arg02, #4
25c78     0A FB 01 56 |  if_ne	mov	result1, arg02
25c7c     04 3A 06 F1 | 	add	local11, #4
25c80     1D FB 51 FC | 	wrword	result1, local11
25c84                 | LR__3563
25c84                 | LR__3564
25c84     06 32 06 F1 | 	add	local07, #6
25c88     19 35 52 FC | 	wrword	local08, local07
25c8c     36 00 00 FF 
25c90     80 36 06 F6 | 	mov	local09, ##27776
25c94     14 37 42 F5 | 	or	local09, local02
25c98     00 FA 05 F6 | 	mov	result1, #0
25c9c     01 FA 61 FD | 	cogid	result1
25ca0     FD 36 42 F5 | 	or	local09, result1
25ca4     17 3B 02 F6 | 	mov	local11, local05
25ca8     02 3A 06 F1 | 	add	local11, #2
25cac     1D 37 52 FC | 	wrword	local09, local11
25cb0     15 37 02 F6 | 	mov	local09, local03
25cb4     08 36 06 F1 | 	add	local09, #8
25cb8     17 3B 02 F6 | 	mov	local11, local05
25cbc     1B 37 E2 FA | 	rdword	local09, local09
25cc0     06 3A 06 F1 | 	add	local11, #6
25cc4     1D 37 52 FC | 	wrword	local09, local11
25cc8     17 15 0A F6 | 	mov	arg02, local05 wz
25ccc     00 FA 05 A6 |  if_e	mov	result1, #0
25cd0     15 15 82 51 |  if_ne	sub	arg02, local03
25cd4     04 14 46 50 |  if_ne	shr	arg02, #4
25cd8     0A FB 01 56 |  if_ne	mov	result1, arg02
25cdc     08 2A 06 F1 | 	add	local03, #8
25ce0     15 FB 51 FC | 	wrword	result1, local03
25ce4     08 2E 06 F1 | 	add	local05, #8
25ce8     17 FB 01 F6 | 	mov	result1, local05
25cec                 | LR__3565
25cec     A7 F0 03 F6 | 	mov	ptra, fp
25cf0     B2 00 A0 FD | 	call	#popregs_
25cf4                 | __system___gc_tryalloc_ret
25cf4     2D 00 64 FD | 	ret
25cf8                 | 
25cf8                 | __system___gc_alloc_managed
25cf8     01 4A 05 F6 | 	mov	COUNT_, #1
25cfc     A8 00 A0 FD | 	call	#pushregs_
25d00     09 27 02 F6 | 	mov	local01, arg01
25d04     00 14 06 F6 | 	mov	arg02, #0
25d08     1C 00 B0 FD | 	call	#__system___gc_doalloc
25d0c     FD 14 0A F6 | 	mov	arg02, result1 wz
25d10     01 26 56 A2 |  if_e	cmps	local01, #1 wc
25d14     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
25d18     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
25d1c     A7 F0 03 F6 | 	mov	ptra, fp
25d20     B2 00 A0 FD | 	call	#popregs_
25d24                 | __system___gc_alloc_managed_ret
25d24     2D 00 64 FD | 	ret
25d28                 | 
25d28                 | __system___gc_doalloc
25d28     06 4A 05 F6 | 	mov	COUNT_, #6
25d2c     A8 00 A0 FD | 	call	#pushregs_
25d30     09 27 0A F6 | 	mov	local01, arg01 wz
25d34     0A 29 02 F6 | 	mov	local02, arg02
25d38     00 FA 05 A6 |  if_e	mov	result1, #0
25d3c     8C 00 90 AD |  if_e	jmp	#LR__3577
25d40     17 26 06 F1 | 	add	local01, #23
25d44     0F 26 26 F5 | 	andn	local01, #15
25d48     04 26 46 F0 | 	shr	local01, #4
25d4c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25d50     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25d54     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25d58     B8 BE BF FD | 	call	#__system___lockmem
25d5c     13 13 02 F6 | 	mov	arg01, local01
25d60     14 15 02 F6 | 	mov	arg02, local02
25d64     D8 FD BF FD | 	call	#__system___gc_tryalloc
25d68     FD 2A 0A F6 | 	mov	local03, result1 wz
25d6c     14 00 90 5D |  if_ne	jmp	#LR__3570
25d70     70 03 B0 FD | 	call	#__system___gc_docollect
25d74     13 13 02 F6 | 	mov	arg01, local01
25d78     14 15 02 F6 | 	mov	arg02, local02
25d7c     C0 FD BF FD | 	call	#__system___gc_tryalloc
25d80     FD 2A 02 F6 | 	mov	local03, result1
25d84                 | LR__3570
25d84     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25d88     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25d8c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25d90     09 01 68 FC | 	wrlong	#0, arg01
25d94     00 2A 0E F2 | 	cmp	local03, #0 wz
25d98     2C 00 90 AD |  if_e	jmp	#LR__3576
25d9c     04 26 66 F0 | 	shl	local01, #4
25da0     08 26 86 F1 | 	sub	local01, #8
25da4     13 2D 52 F6 | 	abs	local04, local01 wc
25da8     02 2C 46 F0 | 	shr	local04, #2
25dac     16 2F 8A F6 | 	negc	local05, local04 wz
25db0     15 31 02 F6 | 	mov	local06, local03
25db4     10 00 90 AD |  if_e	jmp	#LR__3575
25db8     97 06 48 FB | 	callpa	#(@LR__3573-@LR__3571)>>2,fcache_load_ptr_
25dbc                 | LR__3571
25dbc     17 05 D8 FC | 	rep	@LR__3574, local05
25dc0                 | LR__3572
25dc0     18 01 68 FC | 	wrlong	#0, local06
25dc4     04 30 06 F1 | 	add	local06, #4
25dc8                 | LR__3573
25dc8                 | LR__3574
25dc8                 | LR__3575
25dc8                 | LR__3576
25dc8     15 FB 01 F6 | 	mov	result1, local03
25dcc                 | LR__3577
25dcc     A7 F0 03 F6 | 	mov	ptra, fp
25dd0     B2 00 A0 FD | 	call	#popregs_
25dd4                 | __system___gc_doalloc_ret
25dd4     2D 00 64 FD | 	ret
25dd8                 | 
25dd8                 | __system___gc_isvalidptr
25dd8     F8 16 06 F4 | 	bitl	arg03, #248
25ddc     08 16 86 F1 | 	sub	arg03, #8
25de0     09 17 52 F2 | 	cmps	arg03, arg01 wc
25de4     08 00 90 CD |  if_b	jmp	#LR__3580
25de8     0A 17 52 F2 | 	cmps	arg03, arg02 wc
25dec     08 00 90 CD |  if_b	jmp	#LR__3581
25df0                 | LR__3580
25df0     00 FA 05 F6 | 	mov	result1, #0
25df4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
25df8                 | LR__3581
25df8     0B 01 02 F6 | 	mov	_var01, arg03
25dfc     09 01 62 F5 | 	xor	_var01, arg01
25e00     0F 00 CE F7 | 	test	_var01, #15 wz
25e04     00 FA 05 56 |  if_ne	mov	result1, #0
25e08     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
25e0c     0B 01 02 F6 | 	mov	_var01, arg03
25e10     02 00 06 F1 | 	add	_var01, #2
25e14     00 01 E2 FA | 	rdword	_var01, _var01
25e18     7F 00 00 FF 
25e1c     C0 01 06 F5 | 	and	_var01, ##65472
25e20     36 00 00 FF 
25e24     80 00 0E F2 | 	cmp	_var01, ##27776 wz
25e28     00 FA 05 56 |  if_ne	mov	result1, #0
25e2c     0B FB 01 A6 |  if_e	mov	result1, arg03
25e30                 | __system___gc_isvalidptr_ret
25e30     2D 00 64 FD | 	ret
25e34                 | 
25e34                 | __system___gc_free
25e34     09 17 02 F6 | 	mov	arg03, arg01
25e38     6C FC BF FD | 	call	#__system___gc_ptrs
25e3c     FD 12 02 F6 | 	mov	arg01, result1
25e40     FE 14 02 F6 | 	mov	arg02, result2
25e44     90 FF BF FD | 	call	#__system___gc_isvalidptr
25e48     FD 14 0A F6 | 	mov	arg02, result1 wz
25e4c     28 00 90 AD |  if_e	jmp	#LR__3590
25e50     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25e54     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25e58     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25e5c     B4 BD BF FD | 	call	#__system___lockmem
25e60     0A 13 02 F6 | 	mov	arg01, arg02
25e64     14 00 B0 FD | 	call	#__system___gc_dofree
25e68     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25e6c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25e70     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25e74     09 01 68 FC | 	wrlong	#0, arg01
25e78                 | LR__3590
25e78                 | __system___gc_free_ret
25e78     2D 00 64 FD | 	ret
25e7c                 | 
25e7c                 | __system___gc_dofree
25e7c     06 4A 05 F6 | 	mov	COUNT_, #6
25e80     A8 00 A0 FD | 	call	#pushregs_
25e84     09 27 02 F6 | 	mov	local01, arg01
25e88     1C FC BF FD | 	call	#__system___gc_ptrs
25e8c     FD 28 02 F6 | 	mov	local02, result1
25e90     FE 2A 02 F6 | 	mov	local03, result2
25e94     13 15 02 F6 | 	mov	arg02, local01
25e98     02 14 06 F1 | 	add	arg02, #2
25e9c     36 00 80 FF 
25ea0     0A 1F 59 FC | 	wrword	##27791, arg02
25ea4     13 2D 02 F6 | 	mov	local04, local01
25ea8     13 13 02 F6 | 	mov	arg01, local01
25eac     09 2F EA FA | 	rdword	local05, arg01 wz
25eb0     00 FA 05 A6 |  if_e	mov	result1, #0
25eb4     04 2E 66 50 |  if_ne	shl	local05, #4
25eb8     17 13 02 51 |  if_ne	add	arg01, local05
25ebc     09 FB 01 56 |  if_ne	mov	result1, arg01
25ec0     FD 30 02 F6 | 	mov	local06, result1
25ec4     97 24 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
25ec8                 | LR__3600
25ec8     04 2C 06 F1 | 	add	local04, #4
25ecc     16 15 EA FA | 	rdword	arg02, local04 wz
25ed0     14 13 02 F6 | 	mov	arg01, local02
25ed4     00 FA 05 A6 |  if_e	mov	result1, #0
25ed8     04 14 66 50 |  if_ne	shl	arg02, #4
25edc     0A 13 02 51 |  if_ne	add	arg01, arg02
25ee0     09 FB 01 56 |  if_ne	mov	result1, arg01
25ee4     FD 2C 0A F6 | 	mov	local04, result1 wz
25ee8     24 00 90 AD |  if_e	jmp	#LR__3602
25eec     16 13 02 F6 | 	mov	arg01, local04
25ef0     00 FA 05 F6 | 	mov	result1, #0
25ef4     02 12 06 F1 | 	add	arg01, #2
25ef8     09 13 E2 FA | 	rdword	arg01, arg01
25efc     36 00 00 FF 
25f00     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
25f04     01 FA 65 A6 |  if_e	neg	result1, #1
25f08     00 FA 0D F2 | 	cmp	result1, #0 wz
25f0c     B8 FF 9F AD |  if_e	jmp	#LR__3600
25f10                 | LR__3601
25f10                 | LR__3602
25f10     00 2C 0E F2 | 	cmp	local04, #0 wz
25f14     14 2D 02 A6 |  if_e	mov	local04, local02
25f18     16 15 02 F6 | 	mov	arg02, local04
25f1c     06 14 06 F1 | 	add	arg02, #6
25f20     13 13 02 F6 | 	mov	arg01, local01
25f24     0A 15 E2 FA | 	rdword	arg02, arg02
25f28     06 12 06 F1 | 	add	arg01, #6
25f2c     09 15 52 FC | 	wrword	arg02, arg01
25f30     13 15 0A F6 | 	mov	arg02, local01 wz
25f34     00 FA 05 A6 |  if_e	mov	result1, #0
25f38     14 15 82 51 |  if_ne	sub	arg02, local02
25f3c     04 14 46 50 |  if_ne	shr	arg02, #4
25f40     0A FB 01 56 |  if_ne	mov	result1, arg02
25f44     16 15 02 F6 | 	mov	arg02, local04
25f48     06 14 06 F1 | 	add	arg02, #6
25f4c     0A FB 51 FC | 	wrword	result1, arg02
25f50     14 2D 0A F2 | 	cmp	local04, local02 wz
25f54     A4 00 90 AD |  if_e	jmp	#LR__3605
25f58     16 13 02 F6 | 	mov	arg01, local04
25f5c     09 2F EA FA | 	rdword	local05, arg01 wz
25f60     00 FA 05 A6 |  if_e	mov	result1, #0
25f64     04 2E 66 50 |  if_ne	shl	local05, #4
25f68     17 13 02 51 |  if_ne	add	arg01, local05
25f6c     09 FB 01 56 |  if_ne	mov	result1, arg01
25f70     13 FB 09 F2 | 	cmp	result1, local01 wz
25f74     84 00 90 5D |  if_ne	jmp	#LR__3604
25f78     16 31 E2 FA | 	rdword	local06, local04
25f7c     13 15 E2 FA | 	rdword	arg02, local01
25f80     0A 31 02 F1 | 	add	local06, arg02
25f84     16 31 52 FC | 	wrword	local06, local04
25f88     13 31 02 F6 | 	mov	local06, local01
25f8c     02 30 06 F1 | 	add	local06, #2
25f90     18 01 58 FC | 	wrword	#0, local06
25f94     13 13 02 F6 | 	mov	arg01, local01
25f98     09 2F EA FA | 	rdword	local05, arg01 wz
25f9c     00 FA 05 A6 |  if_e	mov	result1, #0
25fa0     04 2E 66 50 |  if_ne	shl	local05, #4
25fa4     17 13 02 51 |  if_ne	add	arg01, local05
25fa8     09 FB 01 56 |  if_ne	mov	result1, arg01
25fac     FD 30 02 F6 | 	mov	local06, result1
25fb0     15 31 52 F2 | 	cmps	local06, local03 wc
25fb4     20 00 90 3D |  if_ae	jmp	#LR__3603
25fb8     16 15 0A F6 | 	mov	arg02, local04 wz
25fbc     00 FA 05 A6 |  if_e	mov	result1, #0
25fc0     14 15 82 51 |  if_ne	sub	arg02, local02
25fc4     04 14 46 50 |  if_ne	shr	arg02, #4
25fc8     0A FB 01 56 |  if_ne	mov	result1, arg02
25fcc     18 15 02 F6 | 	mov	arg02, local06
25fd0     04 14 06 F1 | 	add	arg02, #4
25fd4     0A FB 51 FC | 	wrword	result1, arg02
25fd8                 | LR__3603
25fd8     13 15 02 F6 | 	mov	arg02, local01
25fdc     06 14 06 F1 | 	add	arg02, #6
25fe0     16 FD 01 F6 | 	mov	result2, local04
25fe4     0A 15 E2 FA | 	rdword	arg02, arg02
25fe8     06 FC 05 F1 | 	add	result2, #6
25fec     FE 14 52 FC | 	wrword	arg02, result2
25ff0     06 26 06 F1 | 	add	local01, #6
25ff4     13 01 58 FC | 	wrword	#0, local01
25ff8     16 27 02 F6 | 	mov	local01, local04
25ffc                 | LR__3604
25ffc                 | LR__3605
25ffc     13 13 02 F6 | 	mov	arg01, local01
26000     09 2F EA FA | 	rdword	local05, arg01 wz
26004     00 FA 05 A6 |  if_e	mov	result1, #0
26008     04 2E 66 50 |  if_ne	shl	local05, #4
2600c     17 13 02 51 |  if_ne	add	arg01, local05
26010     09 FB 01 56 |  if_ne	mov	result1, arg01
26014     FD 14 0A F6 | 	mov	arg02, result1 wz
26018     B8 00 90 AD |  if_e	jmp	#LR__3607
2601c     15 15 52 F2 | 	cmps	arg02, local03 wc
26020     B0 00 90 3D |  if_ae	jmp	#LR__3607
26024     0A 13 02 F6 | 	mov	arg01, arg02
26028     00 FA 05 F6 | 	mov	result1, #0
2602c     02 12 06 F1 | 	add	arg01, #2
26030     09 13 E2 FA | 	rdword	arg01, arg01
26034     36 00 00 FF 
26038     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2603c     01 FA 65 A6 |  if_e	neg	result1, #1
26040     00 FA 0D F2 | 	cmp	result1, #0 wz
26044     8C 00 90 AD |  if_e	jmp	#LR__3607
26048     13 2D 02 F6 | 	mov	local04, local01
2604c     16 31 E2 FA | 	rdword	local06, local04
26050     0A 13 02 F6 | 	mov	arg01, arg02
26054     09 27 E2 FA | 	rdword	local01, arg01
26058     13 31 02 F1 | 	add	local06, local01
2605c     16 31 52 FC | 	wrword	local06, local04
26060     09 31 02 F6 | 	mov	local06, arg01
26064     06 30 06 F1 | 	add	local06, #6
26068     16 27 02 F6 | 	mov	local01, local04
2606c     18 31 E2 FA | 	rdword	local06, local06
26070     06 26 06 F1 | 	add	local01, #6
26074     13 31 52 FC | 	wrword	local06, local01
26078     09 31 02 F6 | 	mov	local06, arg01
2607c     02 30 06 F1 | 	add	local06, #2
26080     18 55 59 FC | 	wrword	#170, local06
26084     09 31 02 F6 | 	mov	local06, arg01
26088     06 30 06 F1 | 	add	local06, #6
2608c     18 01 58 FC | 	wrword	#0, local06
26090     09 2F EA FA | 	rdword	local05, arg01 wz
26094     00 FA 05 A6 |  if_e	mov	result1, #0
26098     04 2E 66 50 |  if_ne	shl	local05, #4
2609c     17 13 02 51 |  if_ne	add	arg01, local05
260a0     09 FB 01 56 |  if_ne	mov	result1, arg01
260a4     FD 30 0A F6 | 	mov	local06, result1 wz
260a8     28 00 90 AD |  if_e	jmp	#LR__3606
260ac     15 31 52 F2 | 	cmps	local06, local03 wc
260b0     20 00 90 3D |  if_ae	jmp	#LR__3606
260b4     16 15 0A F6 | 	mov	arg02, local04 wz
260b8     00 FA 05 A6 |  if_e	mov	result1, #0
260bc     14 15 82 51 |  if_ne	sub	arg02, local02
260c0     04 14 46 50 |  if_ne	shr	arg02, #4
260c4     0A FB 01 56 |  if_ne	mov	result1, arg02
260c8     18 2D 02 F6 | 	mov	local04, local06
260cc     04 2C 06 F1 | 	add	local04, #4
260d0     16 FB 51 FC | 	wrword	result1, local04
260d4                 | LR__3606
260d4                 | LR__3607
260d4     18 FB 01 F6 | 	mov	result1, local06
260d8     A7 F0 03 F6 | 	mov	ptra, fp
260dc     B2 00 A0 FD | 	call	#popregs_
260e0                 | __system___gc_dofree_ret
260e0     2D 00 64 FD | 	ret
260e4                 | 
260e4                 | __system___gc_docollect
260e4     05 4A 05 F6 | 	mov	COUNT_, #5
260e8     A8 00 A0 FD | 	call	#pushregs_
260ec     B8 F9 BF FD | 	call	#__system___gc_ptrs
260f0     FE 26 02 F6 | 	mov	local01, result2
260f4     FD 28 02 F6 | 	mov	local02, result1
260f8     14 13 02 F6 | 	mov	arg01, local02
260fc     09 2B EA FA | 	rdword	local03, arg01 wz
26100     00 FA 05 A6 |  if_e	mov	result1, #0
26104     04 2A 66 50 |  if_ne	shl	local03, #4
26108     15 13 02 51 |  if_ne	add	arg01, local03
2610c     09 FB 01 56 |  if_ne	mov	result1, arg01
26110     FD 2C 0A F6 | 	mov	local04, result1 wz
26114     00 FA 05 F6 | 	mov	result1, #0
26118     01 FA 61 FD | 	cogid	result1
2611c     FD 2E 02 F6 | 	mov	local05, result1
26120     48 00 90 AD |  if_e	jmp	#LR__3612
26124     97 22 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
26128                 | LR__3610
26128     13 2D 52 F2 | 	cmps	local04, local01 wc
2612c     3C 00 90 3D |  if_ae	jmp	#LR__3612
26130     16 15 02 F6 | 	mov	arg02, local04
26134     02 14 06 F1 | 	add	arg02, #2
26138     0A 15 E2 FA | 	rdword	arg02, arg02
2613c     20 14 26 F5 | 	andn	arg02, #32
26140     16 13 02 F6 | 	mov	arg01, local04
26144     02 12 06 F1 | 	add	arg01, #2
26148     09 15 52 FC | 	wrword	arg02, arg01
2614c     16 13 02 F6 | 	mov	arg01, local04
26150     09 2B EA FA | 	rdword	local03, arg01 wz
26154     00 FA 05 A6 |  if_e	mov	result1, #0
26158     04 2A 66 50 |  if_ne	shl	local03, #4
2615c     15 13 02 51 |  if_ne	add	arg01, local03
26160     09 FB 01 56 |  if_ne	mov	result1, arg01
26164     FD 2C 0A F6 | 	mov	local04, result1 wz
26168     BC FF 9F 5D |  if_ne	jmp	#LR__3610
2616c                 | LR__3611
2616c                 | LR__3612
2616c     00 2A 06 F6 | 	mov	local03, #0
26170     00 12 06 F6 | 	mov	arg01, #0
26174     74 BA BF FD | 	call	#__system____topofstack
26178     FD 14 02 F6 | 	mov	arg02, result1
2617c     15 13 02 F6 | 	mov	arg01, local03
26180     90 00 B0 FD | 	call	#__system___gc_markhub
26184     1C 01 B0 FD | 	call	#__system___gc_markcog
26188     14 13 02 F6 | 	mov	arg01, local02
2618c     09 2B EA FA | 	rdword	local03, arg01 wz
26190     00 FA 05 A6 |  if_e	mov	result1, #0
26194     04 2A 66 50 |  if_ne	shl	local03, #4
26198     15 13 02 51 |  if_ne	add	arg01, local03
2619c     09 FB 01 56 |  if_ne	mov	result1, arg01
261a0     FD 28 0A F6 | 	mov	local02, result1 wz
261a4     60 00 90 AD |  if_e	jmp	#LR__3616
261a8                 | LR__3613
261a8     14 2D 02 F6 | 	mov	local04, local02
261ac     16 13 02 F6 | 	mov	arg01, local04
261b0     09 2B EA FA | 	rdword	local03, arg01 wz
261b4     00 FA 05 A6 |  if_e	mov	result1, #0
261b8     04 2A 66 50 |  if_ne	shl	local03, #4
261bc     15 13 02 51 |  if_ne	add	arg01, local03
261c0     09 FB 01 56 |  if_ne	mov	result1, arg01
261c4     FD 28 02 F6 | 	mov	local02, result1
261c8     16 15 02 F6 | 	mov	arg02, local04
261cc     02 14 06 F1 | 	add	arg02, #2
261d0     0A 15 E2 FA | 	rdword	arg02, arg02
261d4     20 14 CE F7 | 	test	arg02, #32 wz
261d8     10 14 CE A7 |  if_e	test	arg02, #16 wz
261dc     1C 00 90 5D |  if_ne	jmp	#LR__3615
261e0     0A 15 42 F8 | 	getnib	arg02, arg02, #0
261e4     17 15 0A F2 | 	cmp	arg02, local05 wz
261e8     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
261ec     0C 00 90 5D |  if_ne	jmp	#LR__3614
261f0     16 13 02 F6 | 	mov	arg01, local04
261f4     84 FC BF FD | 	call	#__system___gc_dofree
261f8     FD 28 02 F6 | 	mov	local02, result1
261fc                 | LR__3614
261fc                 | LR__3615
261fc     00 28 0E F2 | 	cmp	local02, #0 wz
26200     13 29 52 52 |  if_ne	cmps	local02, local01 wc
26204     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3613
26208                 | LR__3616
26208     A7 F0 03 F6 | 	mov	ptra, fp
2620c     B2 00 A0 FD | 	call	#popregs_
26210                 | __system___gc_docollect_ret
26210     2D 00 64 FD | 	ret
26214                 | 
26214                 | __system___gc_markhub
26214     04 4A 05 F6 | 	mov	COUNT_, #4
26218     A8 00 A0 FD | 	call	#pushregs_
2621c     09 27 02 F6 | 	mov	local01, arg01
26220     0A 29 02 F6 | 	mov	local02, arg02
26224     80 F8 BF FD | 	call	#__system___gc_ptrs
26228     FD 2A 02 F6 | 	mov	local03, result1
2622c     FE 2C 02 F6 | 	mov	local04, result2
26230                 | LR__3620
26230     14 27 52 F2 | 	cmps	local01, local02 wc
26234     60 00 90 3D |  if_ae	jmp	#LR__3621
26238     13 17 02 FB | 	rdlong	arg03, local01
2623c     04 26 06 F1 | 	add	local01, #4
26240     16 15 02 F6 | 	mov	arg02, local04
26244     15 13 02 F6 | 	mov	arg01, local03
26248     8C FB BF FD | 	call	#__system___gc_isvalidptr
2624c     FD 16 0A F6 | 	mov	arg03, result1 wz
26250     DC FF 9F AD |  if_e	jmp	#LR__3620
26254     0B 13 02 F6 | 	mov	arg01, arg03
26258     00 FA 05 F6 | 	mov	result1, #0
2625c     02 12 06 F1 | 	add	arg01, #2
26260     09 13 E2 FA | 	rdword	arg01, arg01
26264     36 00 00 FF 
26268     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2626c     01 FA 65 A6 |  if_e	neg	result1, #1
26270     00 FA 0D F2 | 	cmp	result1, #0 wz
26274     B8 FF 9F 5D |  if_ne	jmp	#LR__3620
26278     0B FD 01 F6 | 	mov	result2, arg03
2627c     02 FC 05 F1 | 	add	result2, #2
26280     FE FC E1 FA | 	rdword	result2, result2
26284     0F FC 25 F5 | 	andn	result2, #15
26288     2E FC 45 F5 | 	or	result2, #46
2628c     02 16 06 F1 | 	add	arg03, #2
26290     0B FD 51 FC | 	wrword	result2, arg03
26294     98 FF 9F FD | 	jmp	#LR__3620
26298                 | LR__3621
26298     A7 F0 03 F6 | 	mov	ptra, fp
2629c     B2 00 A0 FD | 	call	#popregs_
262a0                 | __system___gc_markhub_ret
262a0     2D 00 64 FD | 	ret
262a4                 | 
262a4                 | __system___gc_markcog
262a4     04 4A 05 F6 | 	mov	COUNT_, #4
262a8     A8 00 A0 FD | 	call	#pushregs_
262ac     F8 F7 BF FD | 	call	#__system___gc_ptrs
262b0     FD 26 02 F6 | 	mov	local01, result1
262b4     FE 28 02 F6 | 	mov	local02, result2
262b8     EF 2B 06 F6 | 	mov	local03, #495
262bc                 | LR__3630
262bc                 | 	'.live	local03
262bc     00 2A 96 F9 | 	alts	local03, #0
262c0     15 2D 02 F6 | 	mov	local04, local03
262c4     13 13 02 F6 | 	mov	arg01, local01
262c8     14 15 02 F6 | 	mov	arg02, local02
262cc     16 17 02 F6 | 	mov	arg03, local04
262d0     04 FB BF FD | 	call	#__system___gc_isvalidptr
262d4     00 FA 0D F2 | 	cmp	result1, #0 wz
262d8     18 00 90 AD |  if_e	jmp	#LR__3631
262dc     FD 2C 02 F6 | 	mov	local04, result1
262e0     02 2C 06 F1 | 	add	local04, #2
262e4     16 2D E2 FA | 	rdword	local04, local04
262e8     20 2C 46 F5 | 	or	local04, #32
262ec     02 FA 05 F1 | 	add	result1, #2
262f0     FD 2C 52 FC | 	wrword	local04, result1
262f4                 | LR__3631
262f4     01 2A 86 F1 | 	sub	local03, #1
262f8     00 2A 56 F2 | 	cmps	local03, #0 wc
262fc     BC FF 9F 3D |  if_ae	jmp	#LR__3630
26300     A7 F0 03 F6 | 	mov	ptra, fp
26304     B2 00 A0 FD | 	call	#popregs_
26308                 | __system___gc_markcog_ret
26308     2D 00 64 FD | 	ret
2630c                 | 
2630c                 | __system__opendir
2630c     06 4A 05 F6 | 	mov	COUNT_, #6
26310     A8 00 A0 FD | 	call	#pushregs_
26314     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26318     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2631c     09 15 02 F6 | 	mov	arg02, arg01
26320     13 13 02 F6 | 	mov	arg01, local01
26324     00 16 06 F6 | 	mov	arg03, #0
26328     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2632c     7C C0 BF FD | 	call	#__system____getvfsforfile
26330     FD 28 0A F6 | 	mov	local02, result1 wz
26334     10 00 90 AD |  if_e	jmp	#LR__3640
26338     28 28 06 F1 | 	add	local02, #40
2633c     14 17 0A FB | 	rdlong	arg03, local02 wz
26340     28 28 86 F1 | 	sub	local02, #40
26344     14 00 90 5D |  if_ne	jmp	#LR__3641
26348                 | LR__3640
26348     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2634c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26350     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26354     00 FA 05 F6 | 	mov	result1, #0
26358     90 00 90 FD | 	jmp	#LR__3643
2635c                 | LR__3641
2635c     5C 12 06 F6 | 	mov	arg01, #92
26360     10 14 06 F6 | 	mov	arg02, #16
26364     C0 F9 BF FD | 	call	#__system___gc_doalloc
26368     FD 2A 0A F6 | 	mov	local03, result1 wz
2636c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26370     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26374     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26378     00 FA 05 A6 |  if_e	mov	result1, #0
2637c     6C 00 90 AD |  if_e	jmp	#LR__3643
26380     28 28 06 F1 | 	add	local02, #40
26384     14 2D 02 FB | 	rdlong	local04, local02
26388     16 2F 02 F6 | 	mov	local05, local04
2638c     28 28 86 F1 | 	sub	local02, #40
26390     13 2E 46 F7 | 	zerox	local05, #19
26394     14 2C 46 F0 | 	shr	local04, #20
26398     02 2C 66 F0 | 	shl	local04, #2
2639c     ED 2C 02 F1 | 	add	local04, __methods__
263a0     16 2D 02 FB | 	rdlong	local04, local04
263a4     15 13 02 F6 | 	mov	arg01, local03
263a8     13 15 02 F6 | 	mov	arg02, local01
263ac     F2 30 02 F6 | 	mov	local06, objptr
263b0     17 E5 01 F6 | 	mov	objptr, local05
263b4     2D 2C 62 FD | 	call	local04
263b8     18 E5 01 F6 | 	mov	objptr, local06
263bc     FD 16 0A F6 | 	mov	arg03, result1 wz
263c0     20 00 90 AD |  if_e	jmp	#LR__3642
263c4     00 16 4E F2 | 	cmps	arg03, #0 wz
263c8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
263cc     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
263d0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
263d4     15 13 02 F6 | 	mov	arg01, local03
263d8     58 FA BF FD | 	call	#__system___gc_free
263dc     00 FA 05 F6 | 	mov	result1, #0
263e0     08 00 90 FD | 	jmp	#LR__3643
263e4                 | LR__3642
263e4     15 29 62 FC | 	wrlong	local02, local03
263e8     15 FB 01 F6 | 	mov	result1, local03
263ec                 | LR__3643
263ec     A7 F0 03 F6 | 	mov	ptra, fp
263f0     B2 00 A0 FD | 	call	#popregs_
263f4                 | __system__opendir_ret
263f4     2D 00 64 FD | 	ret
263f8                 | 
263f8                 | __system__closedir
263f8     04 4A 05 F6 | 	mov	COUNT_, #4
263fc     A8 00 A0 FD | 	call	#pushregs_
26400     09 27 02 F6 | 	mov	local01, arg01
26404     13 13 02 FB | 	rdlong	arg01, local01
26408     2C 12 06 F1 | 	add	arg01, #44
2640c     09 29 02 FB | 	rdlong	local02, arg01
26410     14 2B 02 F6 | 	mov	local03, local02
26414     13 2A 46 F7 | 	zerox	local03, #19
26418     14 28 46 F0 | 	shr	local02, #20
2641c     02 28 66 F0 | 	shl	local02, #2
26420     ED 28 02 F1 | 	add	local02, __methods__
26424     14 29 02 FB | 	rdlong	local02, local02
26428     13 13 02 F6 | 	mov	arg01, local01
2642c     F2 2C 02 F6 | 	mov	local04, objptr
26430     15 E5 01 F6 | 	mov	objptr, local03
26434     2D 28 62 FD | 	call	local02
26438     16 E5 01 F6 | 	mov	objptr, local04
2643c     FD 2C 02 F6 | 	mov	local04, result1
26440     13 13 02 F6 | 	mov	arg01, local01
26444     EC F9 BF FD | 	call	#__system___gc_free
26448     00 2C 4E F2 | 	cmps	local04, #0 wz
2644c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26450     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
26454     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26458     01 FA 65 56 |  if_ne	neg	result1, #1
2645c     00 FA 05 A6 |  if_e	mov	result1, #0
26460     A7 F0 03 F6 | 	mov	ptra, fp
26464     B2 00 A0 FD | 	call	#popregs_
26468                 | __system__closedir_ret
26468     2D 00 64 FD | 	ret
2646c                 | 
2646c                 | __system__readdir
2646c     04 4A 05 F6 | 	mov	COUNT_, #4
26470     A8 00 A0 FD | 	call	#pushregs_
26474     09 15 0A FB | 	rdlong	arg02, arg01 wz
26478     08 12 06 F1 | 	add	arg01, #8
2647c     09 27 02 F6 | 	mov	local01, arg01
26480     08 12 86 F1 | 	sub	arg01, #8
26484     00 FA 05 A6 |  if_e	mov	result1, #0
26488     5C 00 90 AD |  if_e	jmp	#LR__3651
2648c     30 14 06 F1 | 	add	arg02, #48
26490     0A 29 02 FB | 	rdlong	local02, arg02
26494     14 2B 02 F6 | 	mov	local03, local02
26498     13 2A 46 F7 | 	zerox	local03, #19
2649c     14 28 46 F0 | 	shr	local02, #20
264a0     02 28 66 F0 | 	shl	local02, #2
264a4     ED 28 02 F1 | 	add	local02, __methods__
264a8     14 29 02 FB | 	rdlong	local02, local02
264ac     13 15 02 F6 | 	mov	arg02, local01
264b0     F2 2C 02 F6 | 	mov	local04, objptr
264b4     15 E5 01 F6 | 	mov	objptr, local03
264b8     2D 28 62 FD | 	call	local02
264bc     16 E5 01 F6 | 	mov	objptr, local04
264c0     00 FA 4D F2 | 	cmps	result1, #0 wz
264c4     1C 00 90 AD |  if_e	jmp	#LR__3650
264c8     01 FA 55 F2 | 	cmps	result1, #1 wc
264cc     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
264d0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
264d4     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
264d8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
264dc     00 FA 05 F6 | 	mov	result1, #0
264e0     04 00 90 FD | 	jmp	#LR__3651
264e4                 | LR__3650
264e4     13 FB 01 F6 | 	mov	result1, local01
264e8                 | LR__3651
264e8     A7 F0 03 F6 | 	mov	ptra, fp
264ec     B2 00 A0 FD | 	call	#popregs_
264f0                 | __system__readdir_ret
264f0     2D 00 64 FD | 	ret
264f4                 | 
264f4                 | __system___openraw
264f4     15 4A 05 F6 | 	mov	COUNT_, #21
264f8     A8 00 A0 FD | 	call	#pushregs_
264fc     09 27 02 F6 | 	mov	local01, arg01
26500     0A 29 02 F6 | 	mov	local02, arg02
26504     0B 2B 02 F6 | 	mov	local03, arg03
26508     0C 2D 02 F6 | 	mov	local04, arg04
2650c     04 2E 06 F6 | 	mov	local05, #4
26510     13 31 02 F6 | 	mov	local06, local01
26514     00 32 06 F6 | 	mov	local07, #0
26518     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2651c     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
26520     1A 13 02 F6 | 	mov	arg01, local08
26524     14 15 02 F6 | 	mov	arg02, local02
26528     00 16 06 F6 | 	mov	arg03, #0
2652c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26530     78 BE BF FD | 	call	#__system____getvfsforfile
26534     FD 36 0A F6 | 	mov	local09, result1 wz
26538     10 00 90 AD |  if_e	jmp	#LR__3660
2653c     20 36 06 F1 | 	add	local09, #32
26540     1B FB 09 FB | 	rdlong	result1, local09 wz
26544     20 36 86 F1 | 	sub	local09, #32
26548     14 00 90 5D |  if_ne	jmp	#LR__3661
2654c                 | LR__3660
2654c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26550     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26554     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26558     01 FA 65 F6 | 	neg	result1, #1
2655c     8C 02 90 FD | 	jmp	#LR__3674
26560                 | LR__3661
26560     18 13 02 F6 | 	mov	arg01, local06
26564     00 14 06 F6 | 	mov	arg02, #0
26568     34 16 06 F6 | 	mov	arg03, #52
2656c     09 39 02 F6 | 	mov	local10, arg01
26570     98 00 A0 FD | 	call	#\builtin_bytefill_
26574     20 36 06 F1 | 	add	local09, #32
26578     1B 3B 02 FB | 	rdlong	local11, local09
2657c     1D 3D 02 F6 | 	mov	local12, local11
26580     1D 3F 02 F6 | 	mov	local13, local11
26584     20 36 86 F1 | 	sub	local09, #32
26588     1F 41 02 F6 | 	mov	local14, local13
2658c     13 3C 46 F7 | 	zerox	local12, #19
26590     14 40 46 F0 | 	shr	local14, #20
26594     02 40 66 F0 | 	shl	local14, #2
26598     ED 40 02 F1 | 	add	local14, __methods__
2659c     20 41 02 FB | 	rdlong	local14, local14
265a0     18 43 02 F6 | 	mov	local15, local06
265a4     1A 45 02 F6 | 	mov	local16, local08
265a8     15 47 02 F6 | 	mov	local17, local03
265ac     21 13 02 F6 | 	mov	arg01, local15
265b0     22 15 02 F6 | 	mov	arg02, local16
265b4     23 17 02 F6 | 	mov	arg03, local17
265b8     F2 48 02 F6 | 	mov	local18, objptr
265bc     1E E5 01 F6 | 	mov	objptr, local12
265c0     2D 40 62 FD | 	call	local14
265c4     24 E5 01 F6 | 	mov	objptr, local18
265c8     FD 4A 0A F6 | 	mov	local19, result1 wz
265cc     04 2A CE 57 |  if_ne	test	local03, #4 wz
265d0     58 00 90 AD |  if_e	jmp	#LR__3662
265d4     24 36 06 F1 | 	add	local09, #36
265d8     1B 3B 02 FB | 	rdlong	local11, local09
265dc     1D 3D 02 F6 | 	mov	local12, local11
265e0     1D 3F 02 F6 | 	mov	local13, local11
265e4     24 36 86 F1 | 	sub	local09, #36
265e8     1F 41 02 F6 | 	mov	local14, local13
265ec     13 3C 46 F7 | 	zerox	local12, #19
265f0     14 40 46 F0 | 	shr	local14, #20
265f4     02 40 66 F0 | 	shl	local14, #2
265f8     ED 40 02 F1 | 	add	local14, __methods__
265fc     20 41 02 FB | 	rdlong	local14, local14
26600     18 43 02 F6 | 	mov	local15, local06
26604     1A 45 02 F6 | 	mov	local16, local08
26608     16 47 02 F6 | 	mov	local17, local04
2660c     21 13 02 F6 | 	mov	arg01, local15
26610     22 15 02 F6 | 	mov	arg02, local16
26614     23 17 02 F6 | 	mov	arg03, local17
26618     F2 48 02 F6 | 	mov	local18, objptr
2661c     1E E5 01 F6 | 	mov	objptr, local12
26620     2D 40 62 FD | 	call	local14
26624     24 E5 01 F6 | 	mov	objptr, local18
26628     FD 4A 02 F6 | 	mov	local19, result1
2662c                 | LR__3662
2662c     00 4A 0E F2 | 	cmp	local19, #0 wz
26630     8C 01 90 5D |  if_ne	jmp	#LR__3672
26634     15 4D 02 F6 | 	mov	local20, local03
26638     03 4C 0E F5 | 	and	local20, #3 wz
2663c     02 2E 46 55 |  if_ne	or	local05, #2
26640     01 4C 0E F2 | 	cmp	local20, #1 wz
26644     01 2E 46 55 |  if_ne	or	local05, #1
26648     20 2A CE F7 | 	test	local03, #32 wz
2664c     C0 2E 46 55 |  if_ne	or	local05, #192
26650     08 30 06 F1 | 	add	local06, #8
26654     18 2F 62 FC | 	wrlong	local05, local06
26658     0C 30 06 F1 | 	add	local06, #12
2665c     18 4F 0A FB | 	rdlong	local21, local06 wz
26660     14 30 86 F1 | 	sub	local06, #20
26664     18 00 90 5D |  if_ne	jmp	#LR__3663
26668     04 36 06 F1 | 	add	local09, #4
2666c     1B 4F 02 FB | 	rdlong	local21, local09
26670     04 36 86 F1 | 	sub	local09, #4
26674     14 30 06 F1 | 	add	local06, #20
26678     18 4F 62 FC | 	wrlong	local21, local06
2667c     14 30 86 F1 | 	sub	local06, #20
26680                 | LR__3663
26680     18 30 06 F1 | 	add	local06, #24
26684     18 4F 0A FB | 	rdlong	local21, local06 wz
26688     18 30 86 F1 | 	sub	local06, #24
2668c     18 00 90 5D |  if_ne	jmp	#LR__3664
26690     08 36 06 F1 | 	add	local09, #8
26694     1B 4F 02 FB | 	rdlong	local21, local09
26698     08 36 86 F1 | 	sub	local09, #8
2669c     18 30 06 F1 | 	add	local06, #24
266a0     18 4F 62 FC | 	wrlong	local21, local06
266a4     18 30 86 F1 | 	sub	local06, #24
266a8                 | LR__3664
266a8     24 30 06 F1 | 	add	local06, #36
266ac     18 4F 0A FB | 	rdlong	local21, local06 wz
266b0     24 30 86 F1 | 	sub	local06, #36
266b4     1B 4F 02 AB |  if_e	rdlong	local21, local09
266b8     24 30 06 A1 |  if_e	add	local06, #36
266bc     18 4F 62 AC |  if_e	wrlong	local21, local06
266c0     24 30 86 A1 |  if_e	sub	local06, #36
266c4     28 30 06 F1 | 	add	local06, #40
266c8     18 4F 0A FB | 	rdlong	local21, local06 wz
266cc     28 30 86 F1 | 	sub	local06, #40
266d0     18 00 90 5D |  if_ne	jmp	#LR__3665
266d4     10 36 06 F1 | 	add	local09, #16
266d8     1B 4F 02 FB | 	rdlong	local21, local09
266dc     10 36 86 F1 | 	sub	local09, #16
266e0     28 30 06 F1 | 	add	local06, #40
266e4     18 4F 62 FC | 	wrlong	local21, local06
266e8     28 30 86 F1 | 	sub	local06, #40
266ec                 | LR__3665
266ec     30 30 06 F1 | 	add	local06, #48
266f0     18 4F 0A FB | 	rdlong	local21, local06 wz
266f4     30 30 86 F1 | 	sub	local06, #48
266f8     18 00 90 5D |  if_ne	jmp	#LR__3666
266fc     0C 36 06 F1 | 	add	local09, #12
26700     1B 4F 02 FB | 	rdlong	local21, local09
26704     0C 36 86 F1 | 	sub	local09, #12
26708     30 30 06 F1 | 	add	local06, #48
2670c     18 4F 62 FC | 	wrlong	local21, local06
26710     30 30 86 F1 | 	sub	local06, #48
26714                 | LR__3666
26714     1C 30 06 F1 | 	add	local06, #28
26718     18 4F 0A FB | 	rdlong	local21, local06 wz
2671c     1C 30 86 F1 | 	sub	local06, #28
26720     1C 00 90 5D |  if_ne	jmp	#LR__3667
26724     01 32 06 F6 | 	mov	local07, #1
26728     F2 12 02 F6 | 	mov	arg01, objptr
2672c     00 F0 04 FF 
26730     00 12 46 F5 | 	or	arg01, ##165675008
26734     1C 30 06 F1 | 	add	local06, #28
26738     18 13 62 FC | 	wrlong	arg01, local06
2673c     1C 30 86 F1 | 	sub	local06, #28
26740                 | LR__3667
26740     20 30 06 F1 | 	add	local06, #32
26744     18 4F 0A FB | 	rdlong	local21, local06 wz
26748     20 30 86 F1 | 	sub	local06, #32
2674c     1C 00 90 5D |  if_ne	jmp	#LR__3668
26750     01 32 06 F6 | 	mov	local07, #1
26754     F2 12 02 F6 | 	mov	arg01, objptr
26758     00 F8 04 FF 
2675c     00 12 46 F5 | 	or	arg01, ##166723584
26760     20 30 06 F1 | 	add	local06, #32
26764     18 13 62 FC | 	wrlong	arg01, local06
26768     20 30 86 F1 | 	sub	local06, #32
2676c                 | LR__3668
2676c     2C 30 06 F1 | 	add	local06, #44
26770     18 4F 0A FB | 	rdlong	local21, local06 wz
26774     2C 30 86 F1 | 	sub	local06, #44
26778     44 00 90 5D |  if_ne	jmp	#LR__3671
2677c     14 36 06 F1 | 	add	local09, #20
26780     1B 4F 0A FB | 	rdlong	local21, local09 wz
26784     14 36 86 F1 | 	sub	local09, #20
26788     18 00 90 AD |  if_e	jmp	#LR__3669
2678c     14 36 06 F1 | 	add	local09, #20
26790     1B 4F 02 FB | 	rdlong	local21, local09
26794     2C 30 06 F1 | 	add	local06, #44
26798     18 4F 62 FC | 	wrlong	local21, local06
2679c     2C 30 86 F1 | 	sub	local06, #44
267a0     1C 00 90 FD | 	jmp	#LR__3670
267a4                 | LR__3669
267a4     01 32 06 F6 | 	mov	local07, #1
267a8     F2 12 02 F6 | 	mov	arg01, objptr
267ac     00 00 05 FF 
267b0     00 12 46 F5 | 	or	arg01, ##167772160
267b4     2C 30 06 F1 | 	add	local06, #44
267b8     18 13 62 FC | 	wrlong	arg01, local06
267bc     2C 30 86 F1 | 	sub	local06, #44
267c0                 | LR__3670
267c0                 | LR__3671
267c0                 | LR__3672
267c0     00 32 0E F2 | 	cmp	local07, #0 wz
267c4     18 13 02 56 |  if_ne	mov	arg01, local06
267c8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
267cc     00 4A 0E F2 | 	cmp	local19, #0 wz
267d0     00 12 06 A6 |  if_e	mov	arg01, #0
267d4     10 00 90 5D |  if_ne	jmp	#LR__3673
267d8     00 12 4E F2 | 	cmps	arg01, #0 wz
267dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
267e0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
267e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
267e8                 | LR__3673
267e8     25 FB 01 F6 | 	mov	result1, local19
267ec                 | LR__3674
267ec     A7 F0 03 F6 | 	mov	ptra, fp
267f0     B2 00 A0 FD | 	call	#popregs_
267f4                 | __system___openraw_ret
267f4     2D 00 64 FD | 	ret
267f8                 | 
267f8                 | __system___closeraw
267f8     05 4A 05 F6 | 	mov	COUNT_, #5
267fc     A8 00 A0 FD | 	call	#pushregs_
26800     09 27 02 F6 | 	mov	local01, arg01
26804     00 28 06 F6 | 	mov	local02, #0
26808     08 26 06 F1 | 	add	local01, #8
2680c     13 FB 09 FB | 	rdlong	result1, local01 wz
26810     08 26 86 F1 | 	sub	local01, #8
26814     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26818     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2681c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26820     01 FA 65 A6 |  if_e	neg	result1, #1
26824     A8 00 90 AD |  if_e	jmp	#LR__3682
26828     2C 26 06 F1 | 	add	local01, #44
2682c     13 FB 09 FB | 	rdlong	result1, local01 wz
26830     2C 26 86 F1 | 	sub	local01, #44
26834     38 00 90 AD |  if_e	jmp	#LR__3680
26838     2C 26 06 F1 | 	add	local01, #44
2683c     13 2B 02 FB | 	rdlong	local03, local01
26840     15 2D 02 F6 | 	mov	local04, local03
26844     2C 26 86 F1 | 	sub	local01, #44
26848     13 2C 46 F7 | 	zerox	local04, #19
2684c     14 2A 46 F0 | 	shr	local03, #20
26850     02 2A 66 F0 | 	shl	local03, #2
26854     ED 2A 02 F1 | 	add	local03, __methods__
26858     15 2B 02 FB | 	rdlong	local03, local03
2685c     13 13 02 F6 | 	mov	arg01, local01
26860     F2 2E 02 F6 | 	mov	local05, objptr
26864     16 E5 01 F6 | 	mov	objptr, local04
26868     2D 2A 62 FD | 	call	local03
2686c     17 E5 01 F6 | 	mov	objptr, local05
26870                 | LR__3680
26870     24 26 06 F1 | 	add	local01, #36
26874     13 2F 0A FB | 	rdlong	local05, local01 wz
26878     24 26 86 F1 | 	sub	local01, #36
2687c     3C 00 90 AD |  if_e	jmp	#LR__3681
26880     24 26 06 F1 | 	add	local01, #36
26884     13 2B 02 FB | 	rdlong	local03, local01
26888     15 2D 02 F6 | 	mov	local04, local03
2688c     24 26 86 F1 | 	sub	local01, #36
26890     13 2C 46 F7 | 	zerox	local04, #19
26894     14 2A 46 F0 | 	shr	local03, #20
26898     02 2A 66 F0 | 	shl	local03, #2
2689c     ED 2A 02 F1 | 	add	local03, __methods__
268a0     15 2B 02 FB | 	rdlong	local03, local03
268a4     13 13 02 F6 | 	mov	arg01, local01
268a8     F2 2E 02 F6 | 	mov	local05, objptr
268ac     16 E5 01 F6 | 	mov	objptr, local04
268b0     2D 2A 62 FD | 	call	local03
268b4     17 E5 01 F6 | 	mov	objptr, local05
268b8     FD 28 02 F6 | 	mov	local02, result1
268bc                 | LR__3681
268bc     13 13 02 F6 | 	mov	arg01, local01
268c0     00 14 06 F6 | 	mov	arg02, #0
268c4     34 16 06 F6 | 	mov	arg03, #52
268c8     98 00 A0 FD | 	call	#\builtin_bytefill_
268cc     14 FB 01 F6 | 	mov	result1, local02
268d0                 | LR__3682
268d0     A7 F0 03 F6 | 	mov	ptra, fp
268d4     B2 00 A0 FD | 	call	#popregs_
268d8                 | __system___closeraw_ret
268d8     2D 00 64 FD | 	ret
268dc                 | 
268dc                 | __system___vfs_open_sdcardx
268dc     0B 4A 05 F6 | 	mov	COUNT_, #11
268e0     A8 00 A0 FD | 	call	#pushregs_
268e4     09 2B 02 F6 | 	mov	local03, arg01
268e8     0A 2D 02 F6 | 	mov	local04, arg02
268ec     0B 2F 02 F6 | 	mov	local05, arg03
268f0     0C 31 02 F6 | 	mov	local06, arg04
268f4     01 00 00 FF 
268f8     24 12 06 F6 | 	mov	arg01, ##548
268fc     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
26900     FD 32 02 F6 | 	mov	local07, result1
26904     01 00 00 FF 
26908     34 12 06 F6 | 	mov	arg01, ##564
2690c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
26910     FD 34 02 F6 | 	mov	local08, result1
26914     15 19 02 F6 | 	mov	arg04, local03
26918     1F 18 C6 F0 | 	sar	arg04, #31
2691c     15 17 02 F6 | 	mov	arg03, local03
26920     01 12 06 F6 | 	mov	arg01, #1
26924     00 14 06 F6 | 	mov	arg02, #0
26928     EC DB BF FD | 	call	#__system___int64_shl
2692c     FD 26 02 F6 | 	mov	local01, result1
26930     FE 36 02 F6 | 	mov	local09, result2
26934     16 19 02 F6 | 	mov	arg04, local04
26938     1F 18 C6 F0 | 	sar	arg04, #31
2693c     16 17 02 F6 | 	mov	arg03, local04
26940     01 12 06 F6 | 	mov	arg01, #1
26944     00 14 06 F6 | 	mov	arg02, #0
26948     CC DB BF FD | 	call	#__system___int64_shl
2694c     FD 26 42 F5 | 	or	local01, result1
26950     FE 36 42 F5 | 	or	local09, result2
26954     17 19 02 F6 | 	mov	arg04, local05
26958     1F 18 C6 F0 | 	sar	arg04, #31
2695c     17 17 02 F6 | 	mov	arg03, local05
26960     01 12 06 F6 | 	mov	arg01, #1
26964     00 14 06 F6 | 	mov	arg02, #0
26968     AC DB BF FD | 	call	#__system___int64_shl
2696c     FD 26 42 F5 | 	or	local01, result1
26970     FE 36 42 F5 | 	or	local09, result2
26974     18 19 02 F6 | 	mov	arg04, local06
26978     1F 18 C6 F0 | 	sar	arg04, #31
2697c     18 17 02 F6 | 	mov	arg03, local06
26980     01 12 06 F6 | 	mov	arg01, #1
26984     00 14 06 F6 | 	mov	arg02, #0
26988     8C DB BF FD | 	call	#__system___int64_shl
2698c     1B 15 02 F6 | 	mov	arg02, local09
26990     FD 26 42 F5 | 	or	local01, result1
26994     0A FD 41 F5 | 	or	result2, arg02
26998     FE 28 02 F6 | 	mov	local02, result2
2699c     13 13 02 F6 | 	mov	arg01, local01
269a0     14 15 02 F6 | 	mov	arg02, local02
269a4     A8 DB BF FD | 	call	#__system___usepins
269a8     00 FA 0D F2 | 	cmp	result1, #0 wz
269ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
269b0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
269b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
269b8     00 FA 05 A6 |  if_e	mov	result1, #0
269bc     B4 00 90 AD |  if_e	jmp	#LR__3692
269c0     13 39 02 F6 | 	mov	local10, local01
269c4     14 37 02 F6 | 	mov	local09, local02
269c8     01 00 00 FF 
269cc     08 32 06 F1 | 	add	local07, ##520
269d0     19 39 62 FC | 	wrlong	local10, local07
269d4     04 32 06 F1 | 	add	local07, #4
269d8     19 37 62 FC | 	wrlong	local09, local07
269dc     01 00 00 FF 
269e0     0C 32 86 F1 | 	sub	local07, ##524
269e4     18 1B 02 F6 | 	mov	arg05, local06
269e8     00 12 06 F6 | 	mov	arg01, #0
269ec     15 15 02 F6 | 	mov	arg02, local03
269f0     16 17 02 F6 | 	mov	arg03, local04
269f4     17 19 02 F6 | 	mov	arg04, local05
269f8     F2 38 02 F6 | 	mov	local10, objptr
269fc     19 E5 01 F6 | 	mov	objptr, local07
26a00     40 2A B0 FD | 	call	#_fatfs_cc_disk_setpins
26a04     1C E5 01 F6 | 	mov	objptr, local10
26a08     FD 3A 0A F6 | 	mov	local11, result1 wz
26a0c     24 00 90 5D |  if_ne	jmp	#LR__3690
26a10     8B 01 00 FF 
26a14     8E 15 06 F6 | 	mov	arg02, ##@LR__5117
26a18     1A 13 02 F6 | 	mov	arg01, local08
26a1c     00 16 06 F6 | 	mov	arg03, #0
26a20     F2 3A 02 F6 | 	mov	local11, objptr
26a24     19 E5 01 F6 | 	mov	objptr, local07
26a28     70 61 B0 FD | 	call	#_fatfs_cc_f_mount
26a2c     1D E5 01 F6 | 	mov	objptr, local11
26a30     FD 3A 02 F6 | 	mov	local11, result1
26a34                 | LR__3690
26a34     00 3A 0E F2 | 	cmp	local11, #0 wz
26a38     24 00 90 AD |  if_e	jmp	#LR__3691
26a3c     13 13 02 F6 | 	mov	arg01, local01
26a40     14 15 02 F6 | 	mov	arg02, local02
26a44     5C DB BF FD | 	call	#__system___freepins
26a48     1D 13 6A F6 | 	neg	arg01, local11 wz
26a4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26a50     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26a54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26a58     00 FA 05 F6 | 	mov	result1, #0
26a5c     14 00 90 FD | 	jmp	#LR__3692
26a60                 | LR__3691
26a60     19 13 02 F6 | 	mov	arg01, local07
26a64     F2 3A 02 F6 | 	mov	local11, objptr
26a68     19 E5 01 F6 | 	mov	objptr, local07
26a6c     0C 9E B0 FD | 	call	#_fatfs_cc_get_vfs
26a70     1D E5 01 F6 | 	mov	objptr, local11
26a74                 | LR__3692
26a74     A7 F0 03 F6 | 	mov	ptra, fp
26a78     B2 00 A0 FD | 	call	#popregs_
26a7c                 | __system___vfs_open_sdcardx_ret
26a7c     2D 00 64 FD | 	ret
26a80                 | 
26a80                 | __system____default_getc
26a80     03 4A 05 F6 | 	mov	COUNT_, #3
26a84     A8 00 A0 FD | 	call	#pushregs_
26a88     09 27 02 F6 | 	mov	local01, arg01
26a8c     13 29 02 FB | 	rdlong	local02, local01
26a90     08 28 06 F1 | 	add	local02, #8
26a94     14 2B 02 FB | 	rdlong	local03, local02
26a98     02 2A CE F7 | 	test	local03, #2 wz
26a9c     13 13 02 56 |  if_ne	mov	arg01, local01
26aa0     00 01 B0 5D |  if_ne	call	#__system____default_flush
26aa4     14 2B 02 FB | 	rdlong	local03, local02
26aa8     01 2A 46 F5 | 	or	local03, #1
26aac     14 2B 62 FC | 	wrlong	local03, local02
26ab0     08 28 86 F1 | 	sub	local02, #8
26ab4     14 2B 0A FB | 	rdlong	local03, local02 wz
26ab8     0C 00 90 5D |  if_ne	jmp	#LR__3700
26abc     13 13 02 F6 | 	mov	arg01, local01
26ac0     28 19 B0 FD | 	call	#__system____default_filbuf
26ac4     FD 2A 02 F6 | 	mov	local03, result1
26ac8                 | LR__3700
26ac8     01 2A 56 F2 | 	cmps	local03, #1 wc
26acc     01 FA 65 C6 |  if_b	neg	result1, #1
26ad0     1C 00 90 CD |  if_b	jmp	#LR__3701
26ad4     01 2A 86 F1 | 	sub	local03, #1
26ad8     14 2B 62 FC | 	wrlong	local03, local02
26adc     04 28 06 F1 | 	add	local02, #4
26ae0     14 2B 02 FB | 	rdlong	local03, local02
26ae4     15 FB C1 FA | 	rdbyte	result1, local03
26ae8     01 2A 06 F1 | 	add	local03, #1
26aec     14 2B 62 FC | 	wrlong	local03, local02
26af0                 | LR__3701
26af0     A7 F0 03 F6 | 	mov	ptra, fp
26af4     B2 00 A0 FD | 	call	#popregs_
26af8                 | __system____default_getc_ret
26af8     2D 00 64 FD | 	ret
26afc                 | 
26afc                 | __system____default_putc
26afc     06 4A 05 F6 | 	mov	COUNT_, #6
26b00     A8 00 A0 FD | 	call	#pushregs_
26b04     09 27 02 F6 | 	mov	local01, arg01
26b08     0A 29 02 F6 | 	mov	local02, arg02
26b0c     14 2B 02 FB | 	rdlong	local03, local02
26b10     08 2A 06 F1 | 	add	local03, #8
26b14     15 FB 01 FB | 	rdlong	result1, local03
26b18     01 FA CD F7 | 	test	result1, #1 wz
26b1c     14 13 02 56 |  if_ne	mov	arg01, local02
26b20     80 00 B0 5D |  if_ne	call	#__system____default_flush
26b24     15 2D 02 FB | 	rdlong	local04, local03
26b28     02 2C 46 F5 | 	or	local04, #2
26b2c     15 2D 62 FC | 	wrlong	local04, local03
26b30     08 2A 86 F1 | 	sub	local03, #8
26b34     15 2F 02 FB | 	rdlong	local05, local03
26b38     10 2A 06 F1 | 	add	local03, #16
26b3c     15 15 02 FB | 	rdlong	arg02, local03
26b40     10 2A 86 F1 | 	sub	local03, #16
26b44     17 FB 01 F6 | 	mov	result1, local05
26b48     0A FB 01 F1 | 	add	result1, arg02
26b4c     FD 26 42 FC | 	wrbyte	local01, result1
26b50     13 27 E2 F8 | 	getbyte	local01, local01, #0
26b54     01 2E 06 F1 | 	add	local05, #1
26b58     15 2F 62 FC | 	wrlong	local05, local03
26b5c     06 28 06 F1 | 	add	local02, #6
26b60     14 31 EA FA | 	rdword	local06, local02 wz
26b64     06 28 86 F1 | 	sub	local02, #6
26b68     0C 2A 06 51 |  if_ne	add	local03, #12
26b6c     15 2D 02 5B |  if_ne	rdlong	local04, local03
26b70     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
26b74     0C 00 90 AD |  if_e	jmp	#LR__3710
26b78     0A 26 0E F2 | 	cmp	local01, #10 wz
26b7c     01 30 0E A2 |  if_e	cmp	local06, #1 wz
26b80     10 00 90 5D |  if_ne	jmp	#LR__3711
26b84                 | LR__3710
26b84     14 13 02 F6 | 	mov	arg01, local02
26b88     18 00 B0 FD | 	call	#__system____default_flush
26b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
26b90     01 26 66 56 |  if_ne	neg	local01, #1
26b94                 | LR__3711
26b94     13 FB 01 F6 | 	mov	result1, local01
26b98     A7 F0 03 F6 | 	mov	ptra, fp
26b9c     B2 00 A0 FD | 	call	#popregs_
26ba0                 | __system____default_putc_ret
26ba0     2D 00 64 FD | 	ret
26ba4                 | 
26ba4                 | __system____default_flush
26ba4     06 4A 05 F6 | 	mov	COUNT_, #6
26ba8     A8 00 A0 FD | 	call	#pushregs_
26bac     09 27 02 F6 | 	mov	local01, arg01
26bb0     13 29 02 FB | 	rdlong	local02, local01
26bb4     14 2B 02 FB | 	rdlong	local03, local02
26bb8     08 28 06 F1 | 	add	local02, #8
26bbc     14 FB 01 FB | 	rdlong	result1, local02
26bc0     08 28 86 F1 | 	sub	local02, #8
26bc4     02 FA CD F7 | 	test	result1, #2 wz
26bc8     D0 00 90 AD |  if_e	jmp	#LR__3722
26bcc     01 2A 56 F2 | 	cmps	local03, #1 wc
26bd0     20 01 90 CD |  if_b	jmp	#LR__3724
26bd4     08 26 06 F1 | 	add	local01, #8
26bd8     13 FB 01 FB | 	rdlong	result1, local01
26bdc     08 26 86 F1 | 	sub	local01, #8
26be0     40 FA CD F7 | 	test	result1, #64 wz
26be4     68 00 90 AD |  if_e	jmp	#LR__3721
26be8     08 26 06 F1 | 	add	local01, #8
26bec     13 17 02 FB | 	rdlong	arg03, local01
26bf0     08 26 86 F1 | 	sub	local01, #8
26bf4     80 16 CE F7 | 	test	arg03, #128 wz
26bf8     54 00 90 AD |  if_e	jmp	#LR__3720
26bfc     30 26 06 F1 | 	add	local01, #48
26c00     13 2D 02 FB | 	rdlong	local04, local01
26c04     16 2F 02 F6 | 	mov	local05, local04
26c08     30 26 86 F1 | 	sub	local01, #48
26c0c     13 2E 46 F7 | 	zerox	local05, #19
26c10     14 2C 46 F0 | 	shr	local04, #20
26c14     02 2C 66 F0 | 	shl	local04, #2
26c18     ED 2C 02 F1 | 	add	local04, __methods__
26c1c     16 2D 02 FB | 	rdlong	local04, local04
26c20     13 13 02 F6 | 	mov	arg01, local01
26c24     00 14 06 F6 | 	mov	arg02, #0
26c28     02 16 06 F6 | 	mov	arg03, #2
26c2c     F2 30 02 F6 | 	mov	local06, objptr
26c30     17 E5 01 F6 | 	mov	objptr, local05
26c34     2D 2C 62 FD | 	call	local04
26c38     18 E5 01 F6 | 	mov	objptr, local06
26c3c     08 26 06 F1 | 	add	local01, #8
26c40     13 31 02 FB | 	rdlong	local06, local01
26c44     80 30 26 F5 | 	andn	local06, #128
26c48     13 31 62 FC | 	wrlong	local06, local01
26c4c     08 26 86 F1 | 	sub	local01, #8
26c50                 | LR__3720
26c50                 | LR__3721
26c50     18 26 06 F1 | 	add	local01, #24
26c54     13 2D 02 FB | 	rdlong	local04, local01
26c58     16 2F 02 F6 | 	mov	local05, local04
26c5c     18 26 86 F1 | 	sub	local01, #24
26c60     13 2E 46 F7 | 	zerox	local05, #19
26c64     14 2C 46 F0 | 	shr	local04, #20
26c68     02 2C 66 F0 | 	shl	local04, #2
26c6c     ED 2C 02 F1 | 	add	local04, __methods__
26c70     16 2D 02 FB | 	rdlong	local04, local04
26c74     10 28 06 F1 | 	add	local02, #16
26c78     14 15 02 FB | 	rdlong	arg02, local02
26c7c     10 28 86 F1 | 	sub	local02, #16
26c80     13 13 02 F6 | 	mov	arg01, local01
26c84     15 17 02 F6 | 	mov	arg03, local03
26c88     F2 30 02 F6 | 	mov	local06, objptr
26c8c     17 E5 01 F6 | 	mov	objptr, local05
26c90     2D 2C 62 FD | 	call	local04
26c94     18 E5 01 F6 | 	mov	objptr, local06
26c98     58 00 90 FD | 	jmp	#LR__3724
26c9c                 | LR__3722
26c9c     08 28 06 F1 | 	add	local02, #8
26ca0     14 31 02 FB | 	rdlong	local06, local02
26ca4     08 28 86 F1 | 	sub	local02, #8
26ca8     01 30 CE F7 | 	test	local06, #1 wz
26cac     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
26cb0     40 00 90 AD |  if_e	jmp	#LR__3723
26cb4     30 26 06 F1 | 	add	local01, #48
26cb8     13 2D 02 FB | 	rdlong	local04, local01
26cbc     16 2F 02 F6 | 	mov	local05, local04
26cc0     30 26 86 F1 | 	sub	local01, #48
26cc4     13 2E 46 F7 | 	zerox	local05, #19
26cc8     14 2C 46 F0 | 	shr	local04, #20
26ccc     02 2C 66 F0 | 	shl	local04, #2
26cd0     ED 2C 02 F1 | 	add	local04, __methods__
26cd4     16 2D 02 FB | 	rdlong	local04, local04
26cd8     13 13 02 F6 | 	mov	arg01, local01
26cdc     15 15 62 F6 | 	neg	arg02, local03
26ce0     01 16 06 F6 | 	mov	arg03, #1
26ce4     F2 30 02 F6 | 	mov	local06, objptr
26ce8     17 E5 01 F6 | 	mov	objptr, local05
26cec     2D 2C 62 FD | 	call	local04
26cf0     18 E5 01 F6 | 	mov	objptr, local06
26cf4                 | LR__3723
26cf4                 | LR__3724
26cf4     14 01 68 FC | 	wrlong	#0, local02
26cf8     04 28 06 F1 | 	add	local02, #4
26cfc     14 01 68 FC | 	wrlong	#0, local02
26d00     04 28 06 F1 | 	add	local02, #4
26d04     14 01 68 FC | 	wrlong	#0, local02
26d08     00 FA 05 F6 | 	mov	result1, #0
26d0c     A7 F0 03 F6 | 	mov	ptra, fp
26d10     B2 00 A0 FD | 	call	#popregs_
26d14                 | __system____default_flush_ret
26d14     2D 00 64 FD | 	ret
26d18                 | 
26d18                 | __system____default_buffer_init
26d18     02 4A 05 F6 | 	mov	COUNT_, #2
26d1c     A8 00 A0 FD | 	call	#pushregs_
26d20     09 27 02 F6 | 	mov	local01, arg01
26d24     13 29 02 FB | 	rdlong	local02, local01
26d28     13 13 02 F6 | 	mov	arg01, local01
26d2c     34 03 B0 FD | 	call	#__system___isatty
26d30     00 FA 0D F2 | 	cmp	result1, #0 wz
26d34     06 26 06 51 |  if_ne	add	local01, #6
26d38     13 0B 58 5C |  if_ne	wrword	#5, local01
26d3c     06 26 06 A1 |  if_e	add	local01, #6
26d40     13 0D 58 AC |  if_e	wrword	#6, local01
26d44     14 28 06 F1 | 	add	local02, #20
26d48     14 27 02 F6 | 	mov	local01, local02
26d4c     04 28 86 F1 | 	sub	local02, #4
26d50     14 27 62 FC | 	wrlong	local01, local02
26d54     04 28 86 F1 | 	sub	local02, #4
26d58     02 00 80 FF 
26d5c     14 01 68 FC | 	wrlong	##1024, local02
26d60     00 FA 05 F6 | 	mov	result1, #0
26d64     A7 F0 03 F6 | 	mov	ptra, fp
26d68     B2 00 A0 FD | 	call	#popregs_
26d6c                 | __system____default_buffer_init_ret
26d6c     2D 00 64 FD | 	ret
26d70                 | 
26d70                 | __system__stat
26d70     04 4A 05 F6 | 	mov	COUNT_, #4
26d74     A8 00 A0 FD | 	call	#pushregs_
26d78     0A 27 02 F6 | 	mov	local01, arg02
26d7c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26d80     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
26d84     09 15 02 F6 | 	mov	arg02, arg01
26d88     14 13 02 F6 | 	mov	arg01, local02
26d8c     00 16 06 F6 | 	mov	arg03, #0
26d90     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26d94     14 B6 BF FD | 	call	#__system____getvfsforfile
26d98     FD 2A 0A F6 | 	mov	local03, result1 wz
26d9c     10 00 90 AD |  if_e	jmp	#LR__3730
26da0     34 2A 06 F1 | 	add	local03, #52
26da4     15 17 0A FB | 	rdlong	arg03, local03 wz
26da8     34 2A 86 F1 | 	sub	local03, #52
26dac     14 00 90 5D |  if_ne	jmp	#LR__3731
26db0                 | LR__3730
26db0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26db4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26db8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26dbc     01 FA 65 F6 | 	neg	result1, #1
26dc0     68 00 90 FD | 	jmp	#LR__3732
26dc4                 | LR__3731
26dc4     13 13 02 F6 | 	mov	arg01, local01
26dc8     00 14 06 F6 | 	mov	arg02, #0
26dcc     30 16 06 F6 | 	mov	arg03, #48
26dd0     09 2D 02 F6 | 	mov	local04, arg01
26dd4     98 00 A0 FD | 	call	#\builtin_bytefill_
26dd8     16 FB 01 F6 | 	mov	result1, local04
26ddc     14 13 CA FA | 	rdbyte	arg01, local02 wz
26de0     08 26 06 A1 |  if_e	add	local01, #8
26de4     08 00 80 AF 
26de8     13 FF 6B AC |  if_e	wrlong	##4607, local01
26dec     00 FA 05 A6 |  if_e	mov	result1, #0
26df0     38 00 90 AD |  if_e	jmp	#LR__3732
26df4     34 2A 06 F1 | 	add	local03, #52
26df8     15 2B 02 FB | 	rdlong	local03, local03
26dfc     15 2D 02 F6 | 	mov	local04, local03
26e00     13 2A 46 F7 | 	zerox	local03, #19
26e04     14 2C 46 F0 | 	shr	local04, #20
26e08     02 2C 66 F0 | 	shl	local04, #2
26e0c     ED 2C 02 F1 | 	add	local04, __methods__
26e10     16 2D 02 FB | 	rdlong	local04, local04
26e14     14 13 02 F6 | 	mov	arg01, local02
26e18     13 15 02 F6 | 	mov	arg02, local01
26e1c     F2 28 02 F6 | 	mov	local02, objptr
26e20     15 E5 01 F6 | 	mov	objptr, local03
26e24     2D 2C 62 FD | 	call	local04
26e28     14 E5 01 F6 | 	mov	objptr, local02
26e2c                 | LR__3732
26e2c     A7 F0 03 F6 | 	mov	ptra, fp
26e30     B2 00 A0 FD | 	call	#popregs_
26e34                 | __system__stat_ret
26e34     2D 00 64 FD | 	ret
26e38                 | 
26e38                 | __system__write
26e38     0A 12 16 F2 | 	cmp	arg01, #10 wc
26e3c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26e40     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26e44     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26e48     01 FA 65 36 |  if_ae	neg	result1, #1
26e4c     20 00 90 3D |  if_ae	jmp	#LR__3740
26e50     34 12 06 FD | 	qmul	arg01, #52
26e54     02 00 00 FF 
26e58     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26e5c     18 12 62 FD | 	getqx	arg01
26e60     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26e64     02 00 00 FF 
26e68     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26e6c     CC 10 B0 FD | 	call	#__system___vfswrite
26e70                 | LR__3740
26e70                 | __system__write_ret
26e70     2D 00 64 FD | 	ret
26e74                 | 
26e74                 | __system__read
26e74     0A 12 16 F2 | 	cmp	arg01, #10 wc
26e78     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26e7c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26e80     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26e84     01 FA 65 36 |  if_ae	neg	result1, #1
26e88     20 00 90 3D |  if_ae	jmp	#LR__3750
26e8c     34 12 06 FD | 	qmul	arg01, #52
26e90     02 00 00 FF 
26e94     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26e98     18 12 62 FD | 	getqx	arg01
26e9c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26ea0     02 00 00 FF 
26ea4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26ea8     58 12 B0 FD | 	call	#__system___vfsread
26eac                 | LR__3750
26eac                 | __system__read_ret
26eac     2D 00 64 FD | 	ret
26eb0                 | 
26eb0                 | __system__close
26eb0     0A 12 16 F2 | 	cmp	arg01, #10 wc
26eb4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26eb8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26ebc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26ec0     01 FA 65 36 |  if_ae	neg	result1, #1
26ec4     20 00 90 3D |  if_ae	jmp	#LR__3760
26ec8     34 12 06 FD | 	qmul	arg01, #52
26ecc     02 00 00 FF 
26ed0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26ed4     18 12 62 FD | 	getqx	arg01
26ed8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26edc     02 00 00 FF 
26ee0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26ee4     10 F9 BF FD | 	call	#__system___closeraw
26ee8                 | LR__3760
26ee8                 | __system__close_ret
26ee8     2D 00 64 FD | 	ret
26eec                 | 
26eec                 | __system__lseek
26eec     06 4A 05 F6 | 	mov	COUNT_, #6
26ef0     A8 00 A0 FD | 	call	#pushregs_
26ef4     0A 12 16 F2 | 	cmp	arg01, #10 wc
26ef8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26efc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26f00     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26f04     01 FA 65 36 |  if_ae	neg	result1, #1
26f08     C4 00 90 3D |  if_ae	jmp	#LR__3771
26f0c     34 12 06 FD | 	qmul	arg01, #52
26f10     02 00 00 FF 
26f14     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26f18     18 26 62 FD | 	getqx	local01
26f1c     F3 26 02 F1 | 	add	local01, ptr___system__dat__
26f20     30 26 06 F1 | 	add	local01, #48
26f24     13 13 0A FB | 	rdlong	arg01, local01 wz
26f28     30 26 86 F1 | 	sub	local01, #48
26f2c     02 00 00 FF 
26f30     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26f34     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26f38     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
26f3c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26f40     01 FA 65 A6 |  if_e	neg	result1, #1
26f44     88 00 90 AD |  if_e	jmp	#LR__3771
26f48     08 26 06 F1 | 	add	local01, #8
26f4c     13 29 02 FB | 	rdlong	local02, local01
26f50     08 26 86 F1 | 	sub	local01, #8
26f54     40 28 CE F7 | 	test	local02, #64 wz
26f58     08 26 06 51 |  if_ne	add	local01, #8
26f5c     13 29 02 5B |  if_ne	rdlong	local02, local01
26f60     80 28 46 55 |  if_ne	or	local02, #128
26f64     13 29 62 5C |  if_ne	wrlong	local02, local01
26f68     08 26 86 51 |  if_ne	sub	local01, #8
26f6c     30 26 06 F1 | 	add	local01, #48
26f70     13 2B 02 FB | 	rdlong	local03, local01
26f74     15 2D 02 F6 | 	mov	local04, local03
26f78     30 26 86 F1 | 	sub	local01, #48
26f7c     13 2C 46 F7 | 	zerox	local04, #19
26f80     14 2A 46 F0 | 	shr	local03, #20
26f84     02 2A 66 F0 | 	shl	local03, #2
26f88     ED 2A 02 F1 | 	add	local03, __methods__
26f8c     15 2B 02 FB | 	rdlong	local03, local03
26f90     13 13 02 F6 | 	mov	arg01, local01
26f94     F2 2E 02 F6 | 	mov	local05, objptr
26f98     16 E5 01 F6 | 	mov	objptr, local04
26f9c     2D 2A 62 FD | 	call	local03
26fa0     17 E5 01 F6 | 	mov	objptr, local05
26fa4     FD 30 02 F6 | 	mov	local06, result1
26fa8     00 30 56 F2 | 	cmps	local06, #0 wc
26fac     1C 00 90 3D |  if_ae	jmp	#LR__3770
26fb0     18 13 6A F6 | 	neg	arg01, local06 wz
26fb4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26fb8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26fbc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26fc0     01 FA 65 56 |  if_ne	neg	result1, #1
26fc4     00 FA 05 A6 |  if_e	mov	result1, #0
26fc8     04 00 90 FD | 	jmp	#LR__3771
26fcc                 | LR__3770
26fcc     18 FB 01 F6 | 	mov	result1, local06
26fd0                 | LR__3771
26fd0     A7 F0 03 F6 | 	mov	ptra, fp
26fd4     B2 00 A0 FD | 	call	#popregs_
26fd8                 | __system__lseek_ret
26fd8     2D 00 64 FD | 	ret
26fdc                 | 
26fdc                 | __system___ioctl
26fdc     03 4A 05 F6 | 	mov	COUNT_, #3
26fe0     A8 00 A0 FD | 	call	#pushregs_
26fe4     00 12 4E F2 | 	cmps	arg01, #0 wz
26fe8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26fec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
26ff0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26ff4     01 FA 65 A6 |  if_e	neg	result1, #1
26ff8     5C 00 90 AD |  if_e	jmp	#LR__3781
26ffc     28 12 06 F1 | 	add	arg01, #40
27000     09 27 02 FB | 	rdlong	local01, arg01
27004     13 29 02 F6 | 	mov	local02, local01
27008     28 12 86 F1 | 	sub	arg01, #40
2700c     13 28 46 F7 | 	zerox	local02, #19
27010     14 26 46 F0 | 	shr	local01, #20
27014     02 26 66 F0 | 	shl	local01, #2
27018     ED 26 02 F1 | 	add	local01, __methods__
2701c     13 27 02 FB | 	rdlong	local01, local01
27020     F2 2A 02 F6 | 	mov	local03, objptr
27024     14 E5 01 F6 | 	mov	objptr, local02
27028     2D 26 62 FD | 	call	local01
2702c     15 E5 01 F6 | 	mov	objptr, local03
27030     FD 12 0A F6 | 	mov	arg01, result1 wz
27034     1C 00 90 AD |  if_e	jmp	#LR__3780
27038     00 12 4E F2 | 	cmps	arg01, #0 wz
2703c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27040     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27044     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27048     01 FA 65 56 |  if_ne	neg	result1, #1
2704c     00 FA 05 A6 |  if_e	mov	result1, #0
27050     04 00 90 FD | 	jmp	#LR__3781
27054                 | LR__3780
27054     00 FA 05 F6 | 	mov	result1, #0
27058                 | LR__3781
27058     A7 F0 03 F6 | 	mov	ptra, fp
2705c     B2 00 A0 FD | 	call	#popregs_
27060                 | __system___ioctl_ret
27060     2D 00 64 FD | 	ret
27064                 | 
27064                 | __system___isatty
27064     00 4A 05 F6 | 	mov	COUNT_, #0
27068     A8 00 A0 FD | 	call	#pushregs_
2706c     0C F0 07 F1 | 	add	ptra, #12
27070     04 4E 05 F1 | 	add	fp, #4
27074     A7 12 62 FC | 	wrlong	arg01, fp
27078     04 4E 05 F1 | 	add	fp, #4
2707c     A7 16 02 F6 | 	mov	arg03, fp
27080     08 4E 85 F1 | 	sub	fp, #8
27084     00 15 06 F6 | 	mov	arg02, #256
27088     50 FF BF FD | 	call	#__system___ioctl
2708c     00 FA 0D F2 | 	cmp	result1, #0 wz
27090     01 FA 05 A6 |  if_e	mov	result1, #1
27094     00 FA 05 56 |  if_ne	mov	result1, #0
27098     A7 F0 03 F6 | 	mov	ptra, fp
2709c     B2 00 A0 FD | 	call	#popregs_
270a0                 | __system___isatty_ret
270a0     2D 00 64 FD | 	ret
270a4                 | 
270a4                 | __system__mkdir
270a4     07 4A 05 F6 | 	mov	COUNT_, #7
270a8     A8 00 A0 FD | 	call	#pushregs_
270ac     0A 27 02 F6 | 	mov	local01, arg02
270b0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
270b4     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
270b8     09 15 02 F6 | 	mov	arg02, arg01
270bc     14 13 02 F6 | 	mov	arg01, local02
270c0     00 16 06 F6 | 	mov	arg03, #0
270c4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
270c8     E0 B2 BF FD | 	call	#__system____getvfsforfile
270cc     FD 2A 0A F6 | 	mov	local03, result1 wz
270d0     10 00 90 AD |  if_e	jmp	#LR__3790
270d4     20 2A 06 F1 | 	add	local03, #32
270d8     15 13 0A FB | 	rdlong	arg01, local03 wz
270dc     20 2A 86 F1 | 	sub	local03, #32
270e0     14 00 90 5D |  if_ne	jmp	#LR__3791
270e4                 | LR__3790
270e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
270e8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
270ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
270f0     01 FA 65 F6 | 	neg	result1, #1
270f4     60 00 90 FD | 	jmp	#LR__3793
270f8                 | LR__3791
270f8     38 2A 06 F1 | 	add	local03, #56
270fc     15 2D 02 FB | 	rdlong	local04, local03
27100     16 2F 02 F6 | 	mov	local05, local04
27104     13 2C 46 F7 | 	zerox	local04, #19
27108     14 2E 46 F0 | 	shr	local05, #20
2710c     02 2E 66 F0 | 	shl	local05, #2
27110     ED 2E 02 F1 | 	add	local05, __methods__
27114     17 2F 02 FB | 	rdlong	local05, local05
27118     14 13 02 F6 | 	mov	arg01, local02
2711c     13 15 02 F6 | 	mov	arg02, local01
27120     F2 30 02 F6 | 	mov	local06, objptr
27124     16 E5 01 F6 | 	mov	objptr, local04
27128     2D 2E 62 FD | 	call	local05
2712c     18 E5 01 F6 | 	mov	objptr, local06
27130     FD 32 0A F6 | 	mov	local07, result1 wz
27134     1C 00 90 AD |  if_e	jmp	#LR__3792
27138     19 13 6A F6 | 	neg	arg01, local07 wz
2713c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27140     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27144     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27148     01 FA 65 56 |  if_ne	neg	result1, #1
2714c     00 FA 05 A6 |  if_e	mov	result1, #0
27150     04 00 90 FD | 	jmp	#LR__3793
27154                 | LR__3792
27154     19 FB 01 F6 | 	mov	result1, local07
27158                 | LR__3793
27158     A7 F0 03 F6 | 	mov	ptra, fp
2715c     B2 00 A0 FD | 	call	#popregs_
27160                 | __system__mkdir_ret
27160     2D 00 64 FD | 	ret
27164                 | 
27164                 | __system____getftab
27164     0A 12 16 F2 | 	cmp	arg01, #10 wc
27168     34 12 06 CD |  if_b	qmul	arg01, #52
2716c     00 FA 05 36 |  if_ae	mov	result1, #0
27170     02 00 00 CF 
27174     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
27178     18 FA 61 CD |  if_b	getqx	result1
2717c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
27180     02 00 00 CF 
27184     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
27188                 | __system____getftab_ret
27188     2D 00 64 FD | 	ret
2718c                 | 
2718c                 | __system__strncpy
2718c     09 01 02 F6 | 	mov	_var01, arg01
27190                 | LR__3800
27190     01 16 86 F1 | 	sub	arg03, #1
27194     00 16 56 F2 | 	cmps	arg03, #0 wc
27198     18 00 90 CD |  if_b	jmp	#LR__3801
2719c     0A FB C1 FA | 	rdbyte	result1, arg02
271a0     00 FB 41 FC | 	wrbyte	result1, _var01
271a4     01 14 06 F1 | 	add	arg02, #1
271a8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
271ac     01 00 06 F1 | 	add	_var01, #1
271b0     DC FF 9F 5D |  if_ne	jmp	#LR__3800
271b4                 | LR__3801
271b4     97 0C 48 FB | 	callpa	#(@LR__3803-@LR__3802)>>2,fcache_load_ptr_
271b8                 | LR__3802
271b8     01 16 86 F1 | 	sub	arg03, #1
271bc     00 16 56 F2 | 	cmps	arg03, #0 wc
271c0     00 03 02 36 |  if_ae	mov	_var02, _var01
271c4     01 00 06 31 |  if_ae	add	_var01, #1
271c8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
271cc     E8 FF 9F 3D |  if_ae	jmp	#LR__3802
271d0                 | LR__3803
271d0     09 FB 01 F6 | 	mov	result1, arg01
271d4                 | __system__strncpy_ret
271d4     2D 00 64 FD | 	ret
271d8                 | 
271d8                 | __system__strncat
271d8     00 14 4E F2 | 	cmps	arg02, #0 wz
271dc     50 00 90 AD |  if_e	jmp	#LR__3814
271e0     01 16 16 F2 | 	cmp	arg03, #1 wc
271e4     48 00 90 CD |  if_b	jmp	#LR__3814
271e8     09 01 02 F6 | 	mov	_var01, arg01
271ec     97 1E 48 FB | 	callpa	#(@LR__3812-@LR__3810)>>2,fcache_load_ptr_
271f0                 | LR__3810
271f0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
271f4     01 00 06 51 |  if_ne	add	_var01, #1
271f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3810
271fc     0B 03 02 F6 | 	mov	_var02, arg03
27200                 | LR__3811
27200     0A 05 C2 FA | 	rdbyte	_var03, arg02
27204     02 07 02 F6 | 	mov	_var04, _var03
27208     07 06 4E F7 | 	zerox	_var04, #7 wz
2720c     01 14 06 F1 | 	add	arg02, #1
27210     18 00 90 AD |  if_e	jmp	#LR__3813
27214     01 02 86 F1 | 	sub	_var02, #1
27218     00 02 56 F2 | 	cmps	_var02, #0 wc
2721c     00 07 02 36 |  if_ae	mov	_var04, _var01
27220     01 00 06 31 |  if_ae	add	_var01, #1
27224     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
27228     D4 FF 9F 3D |  if_ae	jmp	#LR__3811
2722c                 | LR__3812
2722c                 | LR__3813
2722c     00 01 48 FC | 	wrbyte	#0, _var01
27230                 | LR__3814
27230     09 FB 01 F6 | 	mov	result1, arg01
27234                 | __system__strncat_ret
27234     2D 00 64 FD | 	ret
27238                 | 
27238                 | __system__strncmp
27238     09 01 0A F6 | 	mov	_var01, arg01 wz
2723c     14 00 90 5D |  if_ne	jmp	#LR__3820
27240     00 14 0E F2 | 	cmp	arg02, #0 wz
27244     01 02 66 56 |  if_ne	neg	_var02, #1
27248     00 02 06 A6 |  if_e	mov	_var02, #0
2724c     01 FB 01 F6 | 	mov	result1, _var02
27250     74 00 90 FD | 	jmp	#__system__strncmp_ret
27254                 | LR__3820
27254     00 14 0E F2 | 	cmp	arg02, #0 wz
27258     01 FA 05 A6 |  if_e	mov	result1, #1
2725c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
27260     0B 05 02 F6 | 	mov	_var03, arg03
27264     97 16 48 FB | 	callpa	#(@LR__3822-@LR__3821)>>2,fcache_load_ptr_
27268                 | LR__3821
27268     00 07 C2 FA | 	rdbyte	_var04, _var01
2726c     0A 09 02 F6 | 	mov	_var05, arg02
27270     04 0B C2 FA | 	rdbyte	_var06, _var05
27274     01 04 86 F1 | 	sub	_var03, #1
27278     00 04 56 F2 | 	cmps	_var03, #0 wc
2727c     01 00 06 F1 | 	add	_var01, #1
27280     01 14 06 F1 | 	add	arg02, #1
27284     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27288     08 00 90 2D |  if_nc_and_z	jmp	#LR__3823
2728c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27290     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3821
27294                 | LR__3822
27294                 | LR__3823
27294     00 04 56 F2 | 	cmps	_var03, #0 wc
27298     00 FA 05 C6 |  if_b	mov	result1, #0
2729c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
272a0     05 07 0A F2 | 	cmp	_var04, _var06 wz
272a4     00 FA 05 A6 |  if_e	mov	result1, #0
272a8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
272ac     00 06 0E F2 | 	cmp	_var04, #0 wz
272b0     01 FA 65 A6 |  if_e	neg	result1, #1
272b4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
272b8     00 0A 0E F2 | 	cmp	_var06, #0 wz
272bc     01 FA 05 A6 |  if_e	mov	result1, #1
272c0     03 FB 01 56 |  if_ne	mov	result1, _var04
272c4     05 FB 81 51 |  if_ne	sub	result1, _var06
272c8                 | __system__strncmp_ret
272c8     2D 00 64 FD | 	ret
272cc                 | 
272cc                 | __system____root_opendir
272cc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
272d0     04 12 06 F1 | 	add	arg01, #4
272d4     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
272d8     00 FA 05 F6 | 	mov	result1, #0
272dc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
272e0                 | __system____root_opendir_ret
272e0     2D 00 64 FD | 	ret
272e4                 | 
272e4                 | __system____root_readdir
272e4     03 4A 05 F6 | 	mov	COUNT_, #3
272e8     A8 00 A0 FD | 	call	#pushregs_
272ec     09 27 02 F6 | 	mov	local01, arg01
272f0     0A 29 02 F6 | 	mov	local02, arg02
272f4     04 26 06 F1 | 	add	local01, #4
272f8     13 2B 02 FB | 	rdlong	local03, local01
272fc     04 26 86 F1 | 	sub	local01, #4
27300                 | LR__3830
27300     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27304     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
27308     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2730c     01 FA 65 A6 |  if_e	neg	result1, #1
27310     48 00 90 AD |  if_e	jmp	#LR__3831
27314     15 17 0A FB | 	rdlong	arg03, local03 wz
27318     04 2A 06 A1 |  if_e	add	local03, #4
2731c     E0 FF 9F AD |  if_e	jmp	#LR__3830
27320     15 15 02 FB | 	rdlong	arg02, local03
27324     01 14 06 F1 | 	add	arg02, #1
27328     14 13 02 F6 | 	mov	arg01, local02
2732c     40 16 06 F6 | 	mov	arg03, #64
27330     58 FE BF FD | 	call	#__system__strncpy
27334     50 28 06 F1 | 	add	local02, #80
27338     14 03 48 FC | 	wrbyte	#1, local02
2733c     08 28 86 F1 | 	sub	local02, #8
27340     14 01 68 FC | 	wrlong	#0, local02
27344     04 28 06 F1 | 	add	local02, #4
27348     14 01 68 FC | 	wrlong	#0, local02
2734c     04 2A 06 F1 | 	add	local03, #4
27350     04 26 06 F1 | 	add	local01, #4
27354     13 2B 62 FC | 	wrlong	local03, local01
27358     00 FA 05 F6 | 	mov	result1, #0
2735c                 | LR__3831
2735c     A7 F0 03 F6 | 	mov	ptra, fp
27360     B2 00 A0 FD | 	call	#popregs_
27364                 | __system____root_readdir_ret
27364     2D 00 64 FD | 	ret
27368                 | 
27368                 | __system____root_closedir
27368     00 FA 05 F6 | 	mov	result1, #0
2736c                 | __system____root_closedir_ret
2736c     2D 00 64 FD | 	ret
27370                 | 
27370                 | __system____root_stat
27370     0A 01 02 F6 | 	mov	_var01, arg02
27374     00 13 02 F6 | 	mov	arg01, _var01
27378     00 14 06 F6 | 	mov	arg02, #0
2737c     30 16 06 F6 | 	mov	arg03, #48
27380     98 00 A0 FD | 	call	#\builtin_bytefill_
27384     08 00 06 F1 | 	add	_var01, #8
27388     08 00 80 FF 
2738c     00 FF 6B FC | 	wrlong	##4607, _var01
27390     00 FA 05 F6 | 	mov	result1, #0
27394                 | __system____root_stat_ret
27394     2D 00 64 FD | 	ret
27398                 | 
27398                 | __system___normalizeName
27398     00 00 06 F6 | 	mov	_var01, #0
2739c     09 03 02 F6 | 	mov	_var02, arg01
273a0     01 05 02 F6 | 	mov	_var03, _var02
273a4                 | LR__3840
273a4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
273a8     5C 01 90 AD |  if_e	jmp	#LR__3859
273ac     00 00 0E F2 | 	cmp	_var01, #0 wz
273b0     02 07 02 56 |  if_ne	mov	_var04, _var03
273b4     01 04 06 51 |  if_ne	add	_var03, #1
273b8     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
273bc     00 00 06 56 |  if_ne	mov	_var01, #0
273c0     01 07 C2 FA | 	rdbyte	_var04, _var02
273c4     2E 06 0E F2 | 	cmp	_var04, #46 wz
273c8     D8 00 90 5D |  if_ne	jmp	#LR__3852
273cc     01 02 06 F1 | 	add	_var02, #1
273d0     01 07 C2 FA | 	rdbyte	_var04, _var02
273d4     01 02 86 F1 | 	sub	_var02, #1
273d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
273dc     18 00 90 AD |  if_e	jmp	#LR__3841
273e0     01 02 06 F1 | 	add	_var02, #1
273e4     01 09 C2 FA | 	rdbyte	_var05, _var02
273e8     01 02 86 F1 | 	sub	_var02, #1
273ec     04 0B 02 F6 | 	mov	_var06, _var05
273f0     07 0A 4E F7 | 	zerox	_var06, #7 wz
273f4     10 00 90 5D |  if_ne	jmp	#LR__3842
273f8                 | LR__3841
273f8     01 0D 02 F6 | 	mov	_var07, _var02
273fc     01 0C 06 F1 | 	add	_var07, #1
27400     06 03 02 F6 | 	mov	_var02, _var07
27404     E0 00 90 FD | 	jmp	#LR__3856
27408                 | LR__3842
27408     01 02 06 F1 | 	add	_var02, #1
2740c     01 0D C2 FA | 	rdbyte	_var07, _var02
27410     01 02 86 F1 | 	sub	_var02, #1
27414     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
27418     2E 06 0E F2 | 	cmp	_var04, #46 wz
2741c     84 00 90 5D |  if_ne	jmp	#LR__3851
27420     02 02 06 F1 | 	add	_var02, #2
27424     01 0D C2 FA | 	rdbyte	_var07, _var02
27428     02 02 86 F1 | 	sub	_var02, #2
2742c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
27430     2F 06 0E F2 | 	cmp	_var04, #47 wz
27434     18 00 90 AD |  if_e	jmp	#LR__3843
27438     02 02 06 F1 | 	add	_var02, #2
2743c     01 09 C2 FA | 	rdbyte	_var05, _var02
27440     02 02 86 F1 | 	sub	_var02, #2
27444     04 0B 02 F6 | 	mov	_var06, _var05
27448     07 0A 4E F7 | 	zerox	_var06, #7 wz
2744c     54 00 90 5D |  if_ne	jmp	#LR__3850
27450                 | LR__3843
27450     02 02 06 F1 | 	add	_var02, #2
27454     09 05 5A F2 | 	cmps	_var03, arg01 wcz
27458     40 00 90 ED |  if_be	jmp	#LR__3849
2745c     02 0F 02 F6 | 	mov	_var08, _var03
27460     01 0E 86 F1 | 	sub	_var08, #1
27464                 | LR__3844
27464     07 07 C2 FA | 	rdbyte	_var04, _var08
27468     2F 06 0E F2 | 	cmp	_var04, #47 wz
2746c     0C 00 90 5D |  if_ne	jmp	#LR__3845
27470     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
27474     01 0E 86 11 |  if_a	sub	_var08, #1
27478     E8 FF 9F 1D |  if_a	jmp	#LR__3844
2747c                 | LR__3845
2747c     97 0C 48 FB | 	callpa	#(@LR__3847-@LR__3846)>>2,fcache_load_ptr_
27480                 | LR__3846
27480     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
27484     10 00 90 ED |  if_be	jmp	#LR__3848
27488     07 07 C2 FA | 	rdbyte	_var04, _var08
2748c     2F 06 0E F2 | 	cmp	_var04, #47 wz
27490     01 0E 86 51 |  if_ne	sub	_var08, #1
27494     E8 FF 9F 5D |  if_ne	jmp	#LR__3846
27498                 | LR__3847
27498                 | LR__3848
27498     07 05 02 F6 | 	mov	_var03, _var08
2749c                 | LR__3849
2749c     01 00 06 F6 | 	mov	_var01, #1
274a0     44 00 90 FD | 	jmp	#LR__3856
274a4                 | LR__3850
274a4                 | LR__3851
274a4                 | LR__3852
274a4     97 18 48 FB | 	callpa	#(@LR__3854-@LR__3853)>>2,fcache_load_ptr_
274a8                 | LR__3853
274a8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
274ac     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
274b0     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
274b4     20 00 90 AD |  if_e	jmp	#LR__3855
274b8     01 0B 02 F6 | 	mov	_var06, _var02
274bc     01 09 02 F6 | 	mov	_var05, _var02
274c0     01 08 06 F1 | 	add	_var05, #1
274c4     05 11 C2 FA | 	rdbyte	_var09, _var06
274c8     04 03 02 F6 | 	mov	_var02, _var05
274cc     02 11 42 FC | 	wrbyte	_var09, _var03
274d0     01 04 06 F1 | 	add	_var03, #1
274d4     D0 FF 9F FD | 	jmp	#LR__3853
274d8                 | LR__3854
274d8                 | LR__3855
274d8     01 07 C2 FA | 	rdbyte	_var04, _var02
274dc     2F 06 0E F2 | 	cmp	_var04, #47 wz
274e0     C0 FE 9F 5D |  if_ne	jmp	#LR__3840
274e4     01 00 06 F6 | 	mov	_var01, #1
274e8                 | LR__3856
274e8     97 0C 48 FB | 	callpa	#(@LR__3858-@LR__3857)>>2,fcache_load_ptr_
274ec                 | LR__3857
274ec     01 07 C2 FA | 	rdbyte	_var04, _var02
274f0     2F 06 0E F2 | 	cmp	_var04, #47 wz
274f4     01 0D 02 A6 |  if_e	mov	_var07, _var02
274f8     01 0C 06 A1 |  if_e	add	_var07, #1
274fc     06 03 02 A6 |  if_e	mov	_var02, _var07
27500     E8 FF 9F AD |  if_e	jmp	#LR__3857
27504                 | LR__3858
27504     9C FE 9F FD | 	jmp	#LR__3840
27508                 | LR__3859
27508     02 01 48 FC | 	wrbyte	#0, _var03
2750c                 | __system___normalizeName_ret
2750c     2D 00 64 FD | 	ret
27510                 | 
27510                 | __system___strrev
27510     09 01 CA FA | 	rdbyte	_var01, arg01 wz
27514     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
27518     09 03 02 F6 | 	mov	_var02, arg01
2751c     97 1A 48 FB | 	callpa	#(@LR__3862-@LR__3860)>>2,fcache_load_ptr_
27520                 | LR__3860
27520     01 01 CA FA | 	rdbyte	_var01, _var02 wz
27524     01 02 06 51 |  if_ne	add	_var02, #1
27528     F4 FF 9F 5D |  if_ne	jmp	#LR__3860
2752c     01 02 86 F1 | 	sub	_var02, #1
27530                 | LR__3861
27530     09 03 5A F2 | 	cmps	_var02, arg01 wcz
27534     1C 00 90 ED |  if_be	jmp	#LR__3863
27538     09 01 C2 FA | 	rdbyte	_var01, arg01
2753c     01 05 C2 FA | 	rdbyte	_var03, _var02
27540     09 05 42 FC | 	wrbyte	_var03, arg01
27544     01 01 42 FC | 	wrbyte	_var01, _var02
27548     01 12 06 F1 | 	add	arg01, #1
2754c     01 02 86 F1 | 	sub	_var02, #1
27550     DC FF 9F FD | 	jmp	#LR__3861
27554                 | LR__3862
27554                 | LR__3863
27554                 | __system___strrev_ret
27554     2D 00 64 FD | 	ret
27558                 | 
27558                 | __system___fmtpad
27558     06 4A 05 F6 | 	mov	COUNT_, #6
2755c     A8 00 A0 FD | 	call	#pushregs_
27560     09 27 02 F6 | 	mov	local01, arg01
27564     0A 29 02 F6 | 	mov	local02, arg02
27568     0B 2B 02 F6 | 	mov	local03, arg03
2756c     14 13 EA F8 | 	getbyte	arg01, local02, #1
27570     16 28 46 F0 | 	shr	local02, #22
27574     03 28 0E F5 | 	and	local02, #3 wz
27578     00 2C 06 F6 | 	mov	local04, #0
2757c     01 28 06 A6 |  if_e	mov	local02, #1
27580     0C 29 CA F7 | 	test	local02, arg04 wz
27584     00 FA 05 A6 |  if_e	mov	result1, #0
27588     88 00 90 AD |  if_e	jmp	#LR__3873
2758c     09 2B C2 F2 | 	subr	local03, arg01
27590     01 2A 56 F2 | 	cmps	local03, #1 wc
27594     00 FA 05 C6 |  if_b	mov	result1, #0
27598     78 00 90 CD |  if_b	jmp	#LR__3873
2759c     03 28 0E F2 | 	cmp	local02, #3 wz
275a0     18 00 90 5D |  if_ne	jmp	#LR__3870
275a4     01 18 0E F2 | 	cmp	arg04, #1 wz
275a8     6E 28 62 FD | 	wrz	local02
275ac     14 2B 02 F1 | 	add	local03, local02
275b0     15 2B 52 F6 | 	abs	local03, local03 wc
275b4     01 2A 46 F0 | 	shr	local03, #1
275b8     15 2B 82 F6 | 	negc	local03, local03
275bc                 | LR__3870
275bc     01 2A 56 F2 | 	cmps	local03, #1 wc
275c0     4C 00 90 CD |  if_b	jmp	#LR__3872
275c4     15 2F 02 F6 | 	mov	local05, local03
275c8                 | LR__3871
275c8     13 29 02 F6 | 	mov	local02, local01
275cc     13 31 02 F6 | 	mov	local06, local01
275d0     13 28 46 F7 | 	zerox	local02, #19
275d4     14 30 46 F0 | 	shr	local06, #20
275d8     02 30 66 F0 | 	shl	local06, #2
275dc     ED 30 02 F1 | 	add	local06, __methods__
275e0     18 31 02 FB | 	rdlong	local06, local06
275e4     20 12 06 F6 | 	mov	arg01, #32
275e8     F2 2A 02 F6 | 	mov	local03, objptr
275ec     14 E5 01 F6 | 	mov	objptr, local02
275f0     2D 30 62 FD | 	call	local06
275f4     15 E5 01 F6 | 	mov	objptr, local03
275f8     FD 30 02 F6 | 	mov	local06, result1
275fc     00 30 56 F2 | 	cmps	local06, #0 wc
27600     18 FB 01 C6 |  if_b	mov	result1, local06
27604     0C 00 90 CD |  if_b	jmp	#LR__3873
27608     18 2D 02 F1 | 	add	local04, local06
2760c     EE 2F 6E FB | 	djnz	local05, #LR__3871
27610                 | LR__3872
27610     16 FB 01 F6 | 	mov	result1, local04
27614                 | LR__3873
27614     A7 F0 03 F6 | 	mov	ptra, fp
27618     B2 00 A0 FD | 	call	#popregs_
2761c                 | __system___fmtpad_ret
2761c     2D 00 64 FD | 	ret
27620                 | 
27620                 | __system___uitoa
27620     04 4A 05 F6 | 	mov	COUNT_, #4
27624     A8 00 A0 FD | 	call	#pushregs_
27628     09 27 02 F6 | 	mov	local01, arg01
2762c     00 1A 4E F2 | 	cmps	arg05, #0 wz
27630     13 1B 02 F6 | 	mov	arg05, local01
27634     00 28 06 F6 | 	mov	local02, #0
27638     37 2A 06 56 |  if_ne	mov	local03, #55
2763c     57 2A 06 A6 |  if_e	mov	local03, #87
27640                 | LR__3880
27640     0B 15 12 FD | 	qdiv	arg02, arg03
27644     19 2C 62 FD | 	getqy	local04
27648     0B 15 12 FD | 	qdiv	arg02, arg03
2764c     0A 2C 16 F2 | 	cmp	local04, #10 wc
27650     30 2C 06 C1 |  if_b	add	local04, #48
27654     15 2D 02 31 |  if_ae	add	local04, local03
27658     0D 2D 42 FC | 	wrbyte	local04, arg05
2765c     01 1A 06 F1 | 	add	arg05, #1
27660     01 28 06 F1 | 	add	local02, #1
27664     18 14 62 FD | 	getqx	arg02
27668     00 14 0E F2 | 	cmp	arg02, #0 wz
2766c     D0 FF 9F 5D |  if_ne	jmp	#LR__3880
27670     0C 29 12 F2 | 	cmp	local02, arg04 wc
27674     C8 FF 9F CD |  if_b	jmp	#LR__3880
27678     0D 01 48 FC | 	wrbyte	#0, arg05
2767c     13 13 02 F6 | 	mov	arg01, local01
27680     8C FE BF FD | 	call	#__system___strrev
27684     14 FB 01 F6 | 	mov	result1, local02
27688     A7 F0 03 F6 | 	mov	ptra, fp
2768c     B2 00 A0 FD | 	call	#popregs_
27690                 | __system___uitoa_ret
27690     2D 00 64 FD | 	ret
27694                 | 
27694                 | __system__disassemble_0532
27694     10 4A 05 F6 | 	mov	COUNT_, #16
27698     A8 00 A0 FD | 	call	#pushregs_
2769c     09 27 02 F6 | 	mov	local01, arg01
276a0     0A 29 02 F6 | 	mov	local02, arg02
276a4     0B 2B 02 F6 | 	mov	local03, arg03
276a8     0C 2D 02 F6 | 	mov	local04, arg04
276ac     0D 2F 02 F6 | 	mov	local05, arg05
276b0     17 13 52 F6 | 	abs	arg01, local05 wc
276b4     1F 30 C6 C9 |  if_b	decod	local06, #31
276b8     00 30 06 36 |  if_ae	mov	local06, #0
276bc     0C CF BF FD | 	call	#__system___float_fromuns
276c0     18 FB 61 F5 | 	xor	result1, local06
276c4     FD 32 02 F6 | 	mov	local07, result1
276c8     00 34 06 F6 | 	mov	local08, #0
276cc     13 13 02 F6 | 	mov	arg01, local01
276d0     00 14 06 F6 | 	mov	arg02, #0
276d4     01 16 06 F6 | 	mov	arg03, #1
276d8     28 D7 BF FD | 	call	#__system___float_cmp
276dc     00 FA 0D F2 | 	cmp	result1, #0 wz
276e0     00 36 06 A6 |  if_e	mov	local09, #0
276e4     14 01 68 AC |  if_e	wrlong	#0, local02
276e8     15 37 62 AC |  if_e	wrlong	local09, local03
276ec     8C 01 90 AD |  if_e	jmp	#LR__3902
276f0     13 13 02 F6 | 	mov	arg01, local01
276f4     FC DB BF FD | 	call	#__system____builtin_ilogb
276f8     FD 38 02 F6 | 	mov	local10, result1
276fc     0A 2E 0E F2 | 	cmp	local05, #10 wz
27700     24 00 90 5D |  if_ne	jmp	#LR__3890
27704     1C 37 02 F6 | 	mov	local09, local10
27708     01 36 66 F0 | 	shl	local09, #1
2770c     1C 37 02 F1 | 	add	local09, local10
27710     1B 39 52 F6 | 	abs	local10, local09 wc
27714     0A 38 16 FD | 	qdiv	local10, #10
27718     09 3A 06 F6 | 	mov	local11, #9
2771c     18 38 62 FD | 	getqx	local10
27720     1C 39 82 F6 | 	negc	local10, local10
27724     04 00 90 FD | 	jmp	#LR__3891
27728                 | LR__3890
27728     18 3A 06 F6 | 	mov	local11, #24
2772c                 | LR__3891
2772c                 | LR__3892
2772c     08 34 56 F2 | 	cmps	local08, #8 wc
27730     01 34 06 F1 | 	add	local08, #1
27734     60 00 90 3D |  if_ae	jmp	#LR__3893
27738     00 C0 1F FF 
2773c     00 12 06 F6 | 	mov	arg01, ##1065353216
27740     19 15 02 F6 | 	mov	arg02, local07
27744     1C 17 02 F6 | 	mov	arg03, local10
27748     8C E2 BF FD | 	call	#__system___float_pow_n
2774c     FD 14 02 F6 | 	mov	arg02, result1
27750     13 13 02 F6 | 	mov	arg01, local01
27754     7C D4 BF FD | 	call	#__system___float_div
27758     FD 3C 02 F6 | 	mov	local12, result1
2775c     1E 13 02 F6 | 	mov	arg01, local12
27760     00 C0 1F FF 
27764     00 14 06 F6 | 	mov	arg02, ##1065353216
27768     01 16 06 F6 | 	mov	arg03, #1
2776c     94 D6 BF FD | 	call	#__system___float_cmp
27770     00 FA 55 F2 | 	cmps	result1, #0 wc
27774     01 38 86 C1 |  if_b	sub	local10, #1
27778     B0 FF 9F CD |  if_b	jmp	#LR__3892
2777c     19 15 02 F6 | 	mov	arg02, local07
27780     1E 13 02 F6 | 	mov	arg01, local12
27784     01 16 66 F6 | 	neg	arg03, #1
27788     78 D6 BF FD | 	call	#__system___float_cmp
2778c     00 FA 55 F2 | 	cmps	result1, #0 wc
27790     01 38 06 31 |  if_ae	add	local10, #1
27794     94 FF 9F 3D |  if_ae	jmp	#LR__3892
27798                 | LR__3893
27798     1E 13 02 F6 | 	mov	arg01, local12
2779c     54 DB BF FD | 	call	#__system____builtin_ilogb
277a0     FD 3E 02 F6 | 	mov	local13, result1
277a4     1E 41 02 F6 | 	mov	local14, local12
277a8     17 41 06 F4 | 	bitl	local14, #279
277ac     17 40 26 F4 | 	bith	local14, #23
277b0     1F 41 62 F0 | 	shl	local14, local13
277b4     02 2E 0E F2 | 	cmp	local05, #2 wz
277b8     02 2C 66 A0 |  if_e	shl	local04, #2
277bc     00 42 06 F6 | 	mov	local15, #0
277c0     00 2C 56 F2 | 	cmps	local04, #0 wc
277c4     10 00 90 3D |  if_ae	jmp	#LR__3894
277c8     1C 2D C2 F2 | 	subr	local04, local10
277cc     00 2C 56 F2 | 	cmps	local04, #0 wc
277d0     A0 00 90 CD |  if_b	jmp	#LR__3901
277d4     04 00 90 FD | 	jmp	#LR__3895
277d8                 | LR__3894
277d8     01 2C 06 F1 | 	add	local04, #1
277dc                 | LR__3895
277dc     1D 2D 7A F3 | 	fles	local04, local11 wcz
277e0     01 44 06 F6 | 	mov	local16, #1
277e4     97 22 48 FB | 	callpa	#(@LR__3897-@LR__3896)>>2,fcache_load_ptr_
277e8                 | LR__3896
277e8     00 40 00 FF 
277ec     00 42 16 F2 | 	cmp	local15, ##8388608 wc
277f0     38 00 90 3D |  if_ae	jmp	#LR__3898
277f4     01 2C 56 F2 | 	cmps	local04, #1 wc
277f8     01 2C 86 F1 | 	sub	local04, #1
277fc     2C 00 90 CD |  if_b	jmp	#LR__3898
27800     17 43 02 FD | 	qmul	local15, local05
27804     20 3F 02 F6 | 	mov	local13, local14
27808     17 3E 46 F0 | 	shr	local13, #23
2780c     17 41 06 F4 | 	bitl	local14, #279
27810     18 42 62 FD | 	getqx	local15
27814     17 45 02 FD | 	qmul	local16, local05
27818     18 44 62 FD | 	getqx	local16
2781c     17 41 02 FD | 	qmul	local14, local05
27820     1F 43 02 F1 | 	add	local15, local13
27824     18 40 62 FD | 	getqx	local14
27828     BC FF 9F FD | 	jmp	#LR__3896
2782c                 | LR__3897
2782c                 | LR__3898
2782c     17 37 02 F6 | 	mov	local09, local05
27830     17 36 66 F0 | 	shl	local09, #23
27834     1B 3F 52 F6 | 	abs	local13, local09 wc
27838     01 3E 46 F0 | 	shr	local13, #1
2783c     1F 3F 82 F6 | 	negc	local13, local13
27840     1F 41 1A F2 | 	cmp	local14, local13 wcz
27844     20 00 90 1D |  if_a	jmp	#LR__3899
27848     17 2E 66 F0 | 	shl	local05, #23
2784c     17 3F 52 F6 | 	abs	local13, local05 wc
27850     01 3E 46 F0 | 	shr	local13, #1
27854     1F 3F 82 F6 | 	negc	local13, local13
27858     1F 41 0A F2 | 	cmp	local14, local13 wz
2785c     14 00 90 5D |  if_ne	jmp	#LR__3900
27860     01 42 CE F7 | 	test	local15, #1 wz
27864     0C 00 90 AD |  if_e	jmp	#LR__3900
27868                 | LR__3899
27868     01 42 06 F1 | 	add	local15, #1
2786c     22 43 0A F2 | 	cmp	local15, local16 wz
27870     01 38 06 A1 |  if_e	add	local10, #1
27874                 | LR__3900
27874                 | LR__3901
27874     14 43 62 FC | 	wrlong	local15, local02
27878     15 39 62 FC | 	wrlong	local10, local03
2787c                 | LR__3902
2787c     A7 F0 03 F6 | 	mov	ptra, fp
27880     B2 00 A0 FD | 	call	#popregs_
27884                 | __system__disassemble_0532_ret
27884     2D 00 64 FD | 	ret
27888                 | 
27888                 | __system__emitsign_0534
27888     00 FA 05 F6 | 	mov	result1, #0
2788c     00 14 0E F2 | 	cmp	arg02, #0 wz
27890     09 01 02 56 |  if_ne	mov	_var01, arg01
27894     01 12 06 51 |  if_ne	add	arg01, #1
27898     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2789c     01 FA 05 56 |  if_ne	mov	result1, #1
278a0     00 16 0E F2 | 	cmp	arg03, #0 wz
278a4     09 61 48 5C |  if_ne	wrbyte	#48, arg01
278a8     01 12 06 51 |  if_ne	add	arg01, #1
278ac     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
278b0     02 FA 05 51 |  if_ne	add	result1, #2
278b4                 | __system__emitsign_0534_ret
278b4     2D 00 64 FD | 	ret
278b8                 | 
278b8                 | __system___gettxfunc
278b8     01 4A 05 F6 | 	mov	COUNT_, #1
278bc     A8 00 A0 FD | 	call	#pushregs_
278c0     A0 F8 BF FD | 	call	#__system____getftab
278c4     FD 26 0A F6 | 	mov	local01, result1 wz
278c8     10 00 90 AD |  if_e	jmp	#LR__3910
278cc     08 26 06 F1 | 	add	local01, #8
278d0     13 15 0A FB | 	rdlong	arg02, local01 wz
278d4     08 26 86 F1 | 	sub	local01, #8
278d8     08 00 90 5D |  if_ne	jmp	#LR__3911
278dc                 | LR__3910
278dc     00 FA 05 F6 | 	mov	result1, #0
278e0     0C 00 90 FD | 	jmp	#LR__3912
278e4                 | LR__3911
278e4     00 B8 04 FF 
278e8     00 26 46 F5 | 	or	local01, ##158334976
278ec     13 FB 01 F6 | 	mov	result1, local01
278f0                 | LR__3912
278f0     A7 F0 03 F6 | 	mov	ptra, fp
278f4     B2 00 A0 FD | 	call	#popregs_
278f8                 | __system___gettxfunc_ret
278f8     2D 00 64 FD | 	ret
278fc                 | 
278fc                 | __system___getrxfunc
278fc     01 4A 05 F6 | 	mov	COUNT_, #1
27900     A8 00 A0 FD | 	call	#pushregs_
27904     5C F8 BF FD | 	call	#__system____getftab
27908     FD 26 0A F6 | 	mov	local01, result1 wz
2790c     10 00 90 AD |  if_e	jmp	#LR__3920
27910     08 26 06 F1 | 	add	local01, #8
27914     13 15 0A FB | 	rdlong	arg02, local01 wz
27918     08 26 86 F1 | 	sub	local01, #8
2791c     08 00 90 5D |  if_ne	jmp	#LR__3921
27920                 | LR__3920
27920     00 FA 05 F6 | 	mov	result1, #0
27924     0C 00 90 FD | 	jmp	#LR__3922
27928                 | LR__3921
27928     00 C0 04 FF 
2792c     00 26 46 F5 | 	or	local01, ##159383552
27930     13 FB 01 F6 | 	mov	result1, local01
27934                 | LR__3922
27934     A7 F0 03 F6 | 	mov	ptra, fp
27938     B2 00 A0 FD | 	call	#popregs_
2793c                 | __system___getrxfunc_ret
2793c     2D 00 64 FD | 	ret
27940                 | 
27940                 | __system___getiolock_0574
27940     01 4A 05 F6 | 	mov	COUNT_, #1
27944     A8 00 A0 FD | 	call	#pushregs_
27948     18 F8 BF FD | 	call	#__system____getftab
2794c     FD 26 0A F6 | 	mov	local01, result1 wz
27950     10 00 90 AD |  if_e	jmp	#LR__3930
27954     08 26 06 F1 | 	add	local01, #8
27958     13 FB 09 FB | 	rdlong	result1, local01 wz
2795c     08 26 86 F1 | 	sub	local01, #8
27960     18 00 90 5D |  if_ne	jmp	#LR__3931
27964                 | LR__3930
27964     01 00 00 FF 
27968     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2796c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27970     01 00 00 FF 
27974     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
27978     08 00 90 FD | 	jmp	#LR__3932
2797c                 | LR__3931
2797c     0C 26 06 F1 | 	add	local01, #12
27980     13 FB 01 F6 | 	mov	result1, local01
27984                 | LR__3932
27984     A7 F0 03 F6 | 	mov	ptra, fp
27988     B2 00 A0 FD | 	call	#popregs_
2798c                 | __system___getiolock_0574_ret
2798c     2D 00 64 FD | 	ret
27990                 | 
27990                 | __system____ScanForChar
27990     09 01 02 F6 | 	mov	_var01, arg01
27994     09 03 02 F6 | 	mov	_var02, arg01
27998     97 06 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
2799c                 | LR__3940
2799c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
279a0     01 02 06 51 |  if_ne	add	_var02, #1
279a4     F4 FF 9F 5D |  if_ne	jmp	#LR__3940
279a8                 | LR__3941
279a8     09 03 82 F1 | 	sub	_var02, arg01
279ac     01 FB 01 F6 | 	mov	result1, _var02
279b0     FD 12 0A F6 | 	mov	arg01, result1 wz
279b4     00 FA 05 A6 |  if_e	mov	result1, #0
279b8     B8 00 90 AD |  if_e	jmp	#LR__3948
279bc     0A 05 02 F6 | 	mov	_var03, arg02
279c0     07 04 4E F7 | 	zerox	_var03, #7 wz
279c4     00 FA 05 A6 |  if_e	mov	result1, #0
279c8     A8 00 90 AD |  if_e	jmp	#LR__3948
279cc     01 16 16 F2 | 	cmp	arg03, #1 wc
279d0     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
279d4     01 16 06 86 |  if_c_and_z	mov	arg03, #1
279d8     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
279dc     94 00 90 4D |  if_c_and_nz	jmp	#LR__3948
279e0     09 17 1A F2 | 	cmp	arg03, arg01 wcz
279e4     10 00 90 ED |  if_be	jmp	#LR__3942
279e8     00 18 0E F2 | 	cmp	arg04, #0 wz
279ec     00 FA 05 A6 |  if_e	mov	result1, #0
279f0     80 00 90 AD |  if_e	jmp	#LR__3948
279f4     09 17 02 F6 | 	mov	arg03, arg01
279f8                 | LR__3942
279f8     01 16 86 F1 | 	sub	arg03, #1
279fc     00 18 0E F2 | 	cmp	arg04, #0 wz
27a00     38 00 90 5D |  if_ne	jmp	#LR__3944
27a04     0B 07 02 F6 | 	mov	_var04, arg03
27a08     09 09 02 F6 | 	mov	_var05, arg01
27a0c                 | LR__3943
27a0c     04 07 12 F2 | 	cmp	_var04, _var05 wc
27a10     5C 00 90 3D |  if_ae	jmp	#LR__3947
27a14     03 05 02 F6 | 	mov	_var03, _var04
27a18     00 05 02 F1 | 	add	_var03, _var01
27a1c     02 05 C2 FA | 	rdbyte	_var03, _var03
27a20     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
27a24     0C 05 0A F2 | 	cmp	_var03, arg04 wz
27a28     01 06 06 A1 |  if_e	add	_var04, #1
27a2c     03 FB 01 A6 |  if_e	mov	result1, _var04
27a30     40 00 90 AD |  if_e	jmp	#LR__3948
27a34     01 06 06 F1 | 	add	_var04, #1
27a38     D0 FF 9F FD | 	jmp	#LR__3943
27a3c                 | LR__3944
27a3c     0B 07 02 F6 | 	mov	_var04, arg03
27a40                 | LR__3945
27a40     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
27a44     28 00 90 1D |  if_a	jmp	#LR__3946
27a48     03 09 02 F6 | 	mov	_var05, _var04
27a4c     00 09 02 F1 | 	add	_var05, _var01
27a50     04 05 C2 FA | 	rdbyte	_var03, _var05
27a54     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
27a58     04 05 0A F2 | 	cmp	_var03, _var05 wz
27a5c     01 06 06 A1 |  if_e	add	_var04, #1
27a60     03 FB 01 A6 |  if_e	mov	result1, _var04
27a64     0C 00 90 AD |  if_e	jmp	#LR__3948
27a68     01 06 86 F1 | 	sub	_var04, #1
27a6c     D0 FF 9F FD | 	jmp	#LR__3945
27a70                 | LR__3946
27a70                 | LR__3947
27a70     00 FA 05 F6 | 	mov	result1, #0
27a74                 | LR__3948
27a74                 | __system____ScanForChar_ret
27a74     2D 00 64 FD | 	ret
27a78                 | 
27a78                 | __system___basic_dir
27a78     05 4A 05 F6 | 	mov	COUNT_, #5
27a7c     A8 00 A0 FD | 	call	#pushregs_
27a80     4C F0 07 F1 | 	add	ptra, #76
27a84     04 4E 05 F1 | 	add	fp, #4
27a88     A7 12 62 FC | 	wrlong	arg01, fp
27a8c     04 4E 05 F1 | 	add	fp, #4
27a90     A7 14 62 FC | 	wrlong	arg02, fp
27a94     04 4E 85 F1 | 	sub	fp, #4
27a98     A7 14 0A FB | 	rdlong	arg02, fp wz
27a9c     04 4E 85 F1 | 	sub	fp, #4
27aa0     04 4E 05 51 |  if_ne	add	fp, #4
27aa4     A7 26 02 5B |  if_ne	rdlong	local01, fp
27aa8     04 4E 85 51 |  if_ne	sub	fp, #4
27aac     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
27ab0     70 00 90 AD |  if_e	jmp	#LR__3950
27ab4     03 00 00 FF 
27ab8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27abc     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27ac0     03 00 00 FF 
27ac4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27ac8     03 00 00 5F 
27acc     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
27ad0     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
27ad4     03 00 00 5F 
27ad8     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
27adc     18 E9 BF 5D |  if_ne	call	#__system__closedir
27ae0     8B 01 00 FF 
27ae4     90 13 06 F6 | 	mov	arg01, ##@LR__5118
27ae8     20 E8 BF FD | 	call	#__system__opendir
27aec     03 00 00 FF 
27af0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27af4     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
27af8     08 4E 05 F1 | 	add	fp, #8
27afc     A7 28 02 FB | 	rdlong	local02, fp
27b00     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27b04     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
27b08     04 4E 85 F1 | 	sub	fp, #4
27b0c     A7 28 02 FB | 	rdlong	local02, fp
27b10     04 4E 85 F1 | 	sub	fp, #4
27b14     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27b18     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
27b1c     03 00 00 FF 
27b20     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27b24                 | LR__3950
27b24     03 00 00 FF 
27b28     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27b2c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27b30     03 00 00 FF 
27b34     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27b38     8B 01 00 AF 
27b3c     92 FB 05 A6 |  if_e	mov	result1, ##@LR__5119
27b40     84 02 90 AD |  if_e	jmp	#LR__3963
27b44                 | LR__3951
27b44     03 00 00 FF 
27b48     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27b4c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27b50     03 00 00 FF 
27b54     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27b58     10 E9 BF FD | 	call	#__system__readdir
27b5c     0C 4E 05 F1 | 	add	fp, #12
27b60     A7 FA 61 FC | 	wrlong	result1, fp
27b64     0C 4E 85 F1 | 	sub	fp, #12
27b68     00 FA 0D F2 | 	cmp	result1, #0 wz
27b6c     38 00 90 5D |  if_ne	jmp	#LR__3952
27b70     03 00 00 FF 
27b74     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27b78     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27b7c     03 00 00 FF 
27b80     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27b84     70 E8 BF FD | 	call	#__system__closedir
27b88     03 00 00 FF 
27b8c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27b90     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
27b94     03 00 00 FF 
27b98     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27b9c     8B 01 00 FF 
27ba0     94 FB 05 F6 | 	mov	result1, ##@LR__5120
27ba4     20 02 90 FD | 	jmp	#LR__3963
27ba8                 | LR__3952
27ba8     0C 4E 05 F1 | 	add	fp, #12
27bac     A7 12 02 FB | 	rdlong	arg01, fp
27bb0     0C 4E 85 F1 | 	sub	fp, #12
27bb4     03 00 00 FF 
27bb8     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
27bbc     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
27bc0     03 00 00 FF 
27bc4     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27bc8     10 09 B0 FD | 	call	#__system___pat_match
27bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
27bd0     70 FF 9F AD |  if_e	jmp	#LR__3951
27bd4     03 00 00 FF 
27bd8     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
27bdc     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27be0     03 00 00 FF 
27be4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
27be8     78 01 90 AD |  if_e	jmp	#LR__3959
27bec     0C 4E 05 F1 | 	add	fp, #12
27bf0     A7 12 02 FB | 	rdlong	arg01, fp
27bf4     04 4E 05 F1 | 	add	fp, #4
27bf8     A7 14 02 F6 | 	mov	arg02, fp
27bfc     10 4E 85 F1 | 	sub	fp, #16
27c00     6C F1 BF FD | 	call	#__system__stat
27c04     40 4E 05 F1 | 	add	fp, #64
27c08     A7 FA 61 FC | 	wrlong	result1, fp
27c0c     40 4E 85 F1 | 	sub	fp, #64
27c10     00 FA 0D F2 | 	cmp	result1, #0 wz
27c14     8B 01 00 5F 
27c18     96 FB 05 56 |  if_ne	mov	result1, ##@LR__5121
27c1c     A8 01 90 5D |  if_ne	jmp	#LR__3963
27c20     18 4E 05 F1 | 	add	fp, #24
27c24     A7 28 02 FB | 	rdlong	local02, fp
27c28     78 00 00 FF 
27c2c     00 28 06 F5 | 	and	local02, ##61440
27c30     2C 4E 05 F1 | 	add	fp, #44
27c34     A7 28 62 FC | 	wrlong	local02, fp
27c38     38 4E 85 F1 | 	sub	fp, #56
27c3c     A7 28 02 FB | 	rdlong	local02, fp
27c40     0C 4E 85 F1 | 	sub	fp, #12
27c44     14 29 C2 FA | 	rdbyte	local02, local02
27c48     2E 28 0E F2 | 	cmp	local02, #46 wz
27c4c     08 4E 05 A1 |  if_e	add	fp, #8
27c50     A7 04 68 AC |  if_e	wrlong	#2, fp
27c54     08 4E C5 F3 | 	sumz	fp, #8
27c58     A7 00 68 5C |  if_ne	wrlong	#0, fp
27c5c     08 4E 85 51 |  if_ne	sub	fp, #8
27c60     44 4E 05 F1 | 	add	fp, #68
27c64     A7 28 02 FB | 	rdlong	local02, fp
27c68     44 4E 85 F1 | 	sub	fp, #68
27c6c     08 00 00 FF 
27c70     00 28 0E F2 | 	cmp	local02, ##4096 wz
27c74     18 00 90 5D |  if_ne	jmp	#LR__3953
27c78     08 4E 05 F1 | 	add	fp, #8
27c7c     A7 28 02 FB | 	rdlong	local02, fp
27c80     10 28 46 F5 | 	or	local02, #16
27c84     A7 28 62 FC | 	wrlong	local02, fp
27c88     08 4E 85 F1 | 	sub	fp, #8
27c8c     AC 00 90 FD | 	jmp	#LR__3958
27c90                 | LR__3953
27c90     44 4E 05 F1 | 	add	fp, #68
27c94     A7 28 02 FB | 	rdlong	local02, fp
27c98     44 4E 85 F1 | 	sub	fp, #68
27c9c     10 00 00 FF 
27ca0     00 28 0E F2 | 	cmp	local02, ##8192 wz
27ca4     44 4E 05 51 |  if_ne	add	fp, #68
27ca8     A7 26 02 5B |  if_ne	rdlong	local01, fp
27cac     44 4E 85 51 |  if_ne	sub	fp, #68
27cb0     18 00 00 5F 
27cb4     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
27cb8     44 4E 05 51 |  if_ne	add	fp, #68
27cbc     13 2B 02 56 |  if_ne	mov	local03, local01
27cc0     44 4E 85 51 |  if_ne	sub	fp, #68
27cc4     20 00 00 5F 
27cc8     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
27ccc     18 00 90 5D |  if_ne	jmp	#LR__3954
27cd0     08 4E 05 F1 | 	add	fp, #8
27cd4     A7 28 02 FB | 	rdlong	local02, fp
27cd8     04 28 46 F5 | 	or	local02, #4
27cdc     A7 28 62 FC | 	wrlong	local02, fp
27ce0     08 4E 85 F1 | 	sub	fp, #8
27ce4     54 00 90 FD | 	jmp	#LR__3957
27ce8                 | LR__3954
27ce8     18 4E 05 F1 | 	add	fp, #24
27cec     A7 28 02 FB | 	rdlong	local02, fp
27cf0     18 4E 85 F1 | 	sub	fp, #24
27cf4     92 28 CE F7 | 	test	local02, #146 wz
27cf8     18 00 90 5D |  if_ne	jmp	#LR__3955
27cfc     08 4E 05 F1 | 	add	fp, #8
27d00     A7 28 02 FB | 	rdlong	local02, fp
27d04     01 28 46 F5 | 	or	local02, #1
27d08     A7 28 62 FC | 	wrlong	local02, fp
27d0c     08 4E 85 F1 | 	sub	fp, #8
27d10     28 00 90 FD | 	jmp	#LR__3956
27d14                 | LR__3955
27d14     44 4E 05 F1 | 	add	fp, #68
27d18     A7 2C 02 FB | 	rdlong	local04, fp
27d1c     44 4E 85 F1 | 	sub	fp, #68
27d20     08 00 00 FF 
27d24     00 2C 0E F2 | 	cmp	local04, ##4096 wz
27d28     08 4E 05 51 |  if_ne	add	fp, #8
27d2c     A7 2C 02 5B |  if_ne	rdlong	local04, fp
27d30     20 2C 46 55 |  if_ne	or	local04, #32
27d34     A7 2C 62 5C |  if_ne	wrlong	local04, fp
27d38     08 4E 85 51 |  if_ne	sub	fp, #8
27d3c                 | LR__3956
27d3c                 | LR__3957
27d3c                 | LR__3958
27d3c     08 4E 05 F1 | 	add	fp, #8
27d40     A7 2C 02 FB | 	rdlong	local04, fp
27d44     08 4E 85 F1 | 	sub	fp, #8
27d48     03 00 00 FF 
27d4c     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
27d50     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
27d54     03 00 00 FF 
27d58     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
27d5c     13 2D CA F7 | 	test	local04, local01 wz
27d60     E0 FD 9F AD |  if_e	jmp	#LR__3951
27d64                 | LR__3959
27d64     0C 4E 05 F1 | 	add	fp, #12
27d68     A7 12 02 FB | 	rdlong	arg01, fp
27d6c     0C 4E 85 F1 | 	sub	fp, #12
27d70     09 2F 02 F6 | 	mov	local05, arg01
27d74     97 06 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
27d78                 | LR__3960
27d78     17 FB C9 FA | 	rdbyte	result1, local05 wz
27d7c     01 2E 06 51 |  if_ne	add	local05, #1
27d80     F4 FF 9F 5D |  if_ne	jmp	#LR__3960
27d84                 | LR__3961
27d84     17 13 C2 F2 | 	subr	arg01, local05
27d88     01 12 06 F1 | 	add	arg01, #1
27d8c     68 DF BF FD | 	call	#__system___gc_alloc_managed
27d90     48 4E 05 F1 | 	add	fp, #72
27d94     A7 FA 61 FC | 	wrlong	result1, fp
27d98     48 4E 85 F1 | 	sub	fp, #72
27d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
27da0     18 00 90 AD |  if_e	jmp	#LR__3962
27da4     48 4E 05 F1 | 	add	fp, #72
27da8     A7 12 02 FB | 	rdlong	arg01, fp
27dac     3C 4E 85 F1 | 	sub	fp, #60
27db0     A7 14 02 FB | 	rdlong	arg02, fp
27db4     0C 4E 85 F1 | 	sub	fp, #12
27db8     0C 9E BF FD | 	call	#__system____builtin_strcpy
27dbc                 | LR__3962
27dbc     48 4E 05 F1 | 	add	fp, #72
27dc0     A7 FA 01 FB | 	rdlong	result1, fp
27dc4     48 4E 85 F1 | 	sub	fp, #72
27dc8                 | LR__3963
27dc8     A7 F0 03 F6 | 	mov	ptra, fp
27dcc     B2 00 A0 FD | 	call	#popregs_
27dd0                 | __system___basic_dir_ret
27dd0     2D 00 64 FD | 	ret
27dd4                 | 
27dd4                 | __system__pack_0643
27dd4     09 01 02 F6 | 	mov	_var01, arg01
27dd8     7F 16 06 F1 | 	add	arg03, #127
27ddc     04 18 CE F7 | 	test	arg04, #4 wz
27de0     10 00 90 AD |  if_e	jmp	#LR__3970
27de4     00 00 0E F2 | 	cmp	_var01, #0 wz
27de8     16 00 C6 A9 |  if_e	decod	_var01, #22
27dec     F7 00 26 F4 | 	bith	_var01, #247
27df0     B4 00 90 FD | 	jmp	#LR__3979
27df4                 | LR__3970
27df4     02 18 CE F7 | 	test	arg04, #2 wz
27df8     00 C0 3F 5F 
27dfc     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
27e00     00 14 06 56 |  if_ne	mov	arg02, #0
27e04     A0 00 90 5D |  if_ne	jmp	#LR__3978
27e08     08 18 CE F7 | 	test	arg04, #8 wz
27e0c     00 00 06 56 |  if_ne	mov	_var01, #0
27e10     94 00 90 5D |  if_ne	jmp	#LR__3977
27e14     FF 16 56 F2 | 	cmps	arg03, #255 wc
27e18     00 C0 3F 3F 
27e1c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
27e20     00 14 06 36 |  if_ae	mov	arg02, #0
27e24     80 00 90 3D |  if_ae	jmp	#LR__3976
27e28     01 16 56 F2 | 	cmps	arg03, #1 wc
27e2c     6C 00 90 3D |  if_ae	jmp	#LR__3974
27e30     01 14 46 F0 | 	shr	arg02, #1
27e34     00 03 02 F6 | 	mov	_var02, _var01
27e38     01 02 06 F5 | 	and	_var02, #1
27e3c     1F 02 66 F0 | 	shl	_var02, #31
27e40     01 15 42 F5 | 	or	arg02, _var02
27e44     01 00 46 F0 | 	shr	_var01, #1
27e48     97 1E 48 FB | 	callpa	#(@LR__3972-@LR__3971)>>2,fcache_load_ptr_
27e4c                 | LR__3971
27e4c     00 16 56 F2 | 	cmps	arg03, #0 wc
27e50     34 00 90 3D |  if_ae	jmp	#LR__3973
27e54     00 00 0E F2 | 	cmp	_var01, #0 wz
27e58     2C 00 90 AD |  if_e	jmp	#LR__3973
27e5c     0A 13 02 F6 | 	mov	arg01, arg02
27e60     01 12 06 F5 | 	and	arg01, #1
27e64     01 16 06 F1 | 	add	arg03, #1
27e68     01 14 46 F0 | 	shr	arg02, #1
27e6c     00 03 02 F6 | 	mov	_var02, _var01
27e70     01 02 06 F5 | 	and	_var02, #1
27e74     1F 02 66 F0 | 	shl	_var02, #31
27e78     01 15 42 F5 | 	or	arg02, _var02
27e7c     09 15 42 F5 | 	or	arg02, arg01
27e80     01 00 46 F0 | 	shr	_var01, #1
27e84     C4 FF 9F FD | 	jmp	#LR__3971
27e88                 | LR__3972
27e88                 | LR__3973
27e88     00 16 56 F2 | 	cmps	arg03, #0 wc
27e8c     18 00 90 3D |  if_ae	jmp	#LR__3975
27e90     00 14 0E F2 | 	cmp	arg02, #0 wz
27e94     6F 14 62 FD | 	wrnz	arg02
27e98     0C 00 90 FD | 	jmp	#LR__3975
27e9c                 | LR__3974
27e9c     17 01 06 F4 | 	bitl	_var01, #279
27ea0     17 16 66 F0 | 	shl	arg03, #23
27ea4     0B 01 42 F5 | 	or	_var01, arg03
27ea8                 | LR__3975
27ea8                 | LR__3976
27ea8                 | LR__3977
27ea8                 | LR__3978
27ea8                 | LR__3979
27ea8     01 00 CE F7 | 	test	_var01, #1 wz
27eac     01 14 46 55 |  if_ne	or	arg02, #1
27eb0     0A 17 02 F6 | 	mov	arg03, arg02
27eb4     00 02 06 F6 | 	mov	_var02, #0
27eb8     FF FF 3F FF 
27ebc     FF 15 06 F1 | 	add	arg02, ##2147483647
27ec0     0B 15 12 F2 | 	cmp	arg02, arg03 wc
27ec4     01 02 06 C6 |  if_b	mov	_var02, #1
27ec8     01 01 02 F1 | 	add	_var01, _var02
27ecc     01 18 CE F7 | 	test	arg04, #1 wz
27ed0     1F 00 26 54 |  if_ne	bith	_var01, #31
27ed4     00 FB 01 F6 | 	mov	result1, _var01
27ed8                 | __system__pack_0643_ret
27ed8     2D 00 64 FD | 	ret
27edc                 | 
27edc                 | __system___rxtxioctl_0733
27edc     00 15 0E F2 | 	cmp	arg02, #256 wz
27ee0     0C 00 90 AD |  if_e	jmp	#LR__3980
27ee4     01 15 0E F2 | 	cmp	arg02, #257 wz
27ee8     1C 00 90 AD |  if_e	jmp	#LR__3981
27eec     30 00 90 FD | 	jmp	#LR__3982
27ef0                 | LR__3980
27ef0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27ef4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27ef8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27efc     0B FB 61 FC | 	wrlong	result1, arg03
27f00     00 FA 05 F6 | 	mov	result1, #0
27f04     28 00 90 FD | 	jmp	#LR__3983
27f08                 | LR__3981
27f08     0B 13 02 FB | 	rdlong	arg01, arg03
27f0c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27f10     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27f14     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27f18     00 FA 05 F6 | 	mov	result1, #0
27f1c     10 00 90 FD | 	jmp	#LR__3983
27f20                 | LR__3982
27f20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27f24     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27f28     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27f2c     01 FA 65 F6 | 	neg	result1, #1
27f30                 | LR__3983
27f30                 | __system___rxtxioctl_0733_ret
27f30     2D 00 64 FD | 	ret
27f34                 | 
27f34                 | __system____dummy_flush_0734
27f34     00 FA 05 F6 | 	mov	result1, #0
27f38                 | __system____dummy_flush_0734_ret
27f38     2D 00 64 FD | 	ret
27f3c                 | 
27f3c                 | __system___vfswrite
27f3c     09 4A 05 F6 | 	mov	COUNT_, #9
27f40     A8 00 A0 FD | 	call	#pushregs_
27f44     09 27 02 F6 | 	mov	local01, arg01
27f48     0A 29 02 F6 | 	mov	local02, arg02
27f4c     0B 2B 02 F6 | 	mov	local03, arg03
27f50     14 2D 02 F6 | 	mov	local04, local02
27f54     08 26 06 F1 | 	add	local01, #8
27f58     13 13 02 FB | 	rdlong	arg01, local01
27f5c     08 26 86 F1 | 	sub	local01, #8
27f60     02 12 CE F7 | 	test	arg01, #2 wz
27f64     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27f68     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27f6c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27f70     01 FA 65 A6 |  if_e	neg	result1, #1
27f74     80 01 90 AD |  if_e	jmp	#LR__3996
27f78     08 26 06 F1 | 	add	local01, #8
27f7c     13 FB 01 FB | 	rdlong	result1, local01
27f80     08 26 86 F1 | 	sub	local01, #8
27f84     40 FA CD F7 | 	test	result1, #64 wz
27f88     68 00 90 AD |  if_e	jmp	#LR__3991
27f8c     08 26 06 F1 | 	add	local01, #8
27f90     13 15 02 FB | 	rdlong	arg02, local01
27f94     08 26 86 F1 | 	sub	local01, #8
27f98     80 14 CE F7 | 	test	arg02, #128 wz
27f9c     54 00 90 AD |  if_e	jmp	#LR__3990
27fa0     30 26 06 F1 | 	add	local01, #48
27fa4     13 2F 02 FB | 	rdlong	local05, local01
27fa8     17 31 02 F6 | 	mov	local06, local05
27fac     30 26 86 F1 | 	sub	local01, #48
27fb0     13 30 46 F7 | 	zerox	local06, #19
27fb4     14 2E 46 F0 | 	shr	local05, #20
27fb8     02 2E 66 F0 | 	shl	local05, #2
27fbc     ED 2E 02 F1 | 	add	local05, __methods__
27fc0     17 2F 02 FB | 	rdlong	local05, local05
27fc4     13 13 02 F6 | 	mov	arg01, local01
27fc8     00 14 06 F6 | 	mov	arg02, #0
27fcc     02 16 06 F6 | 	mov	arg03, #2
27fd0     F2 32 02 F6 | 	mov	local07, objptr
27fd4     18 E5 01 F6 | 	mov	objptr, local06
27fd8     2D 2E 62 FD | 	call	local05
27fdc     19 E5 01 F6 | 	mov	objptr, local07
27fe0     08 26 06 F1 | 	add	local01, #8
27fe4     13 33 02 FB | 	rdlong	local07, local01
27fe8     80 32 26 F5 | 	andn	local07, #128
27fec     13 33 62 FC | 	wrlong	local07, local01
27ff0     08 26 86 F1 | 	sub	local01, #8
27ff4                 | LR__3990
27ff4                 | LR__3991
27ff4     18 26 06 F1 | 	add	local01, #24
27ff8     13 33 0A FB | 	rdlong	local07, local01 wz
27ffc     18 26 86 F1 | 	sub	local01, #24
28000     80 00 90 AD |  if_e	jmp	#LR__3993
28004     18 26 06 F1 | 	add	local01, #24
28008     13 2F 02 FB | 	rdlong	local05, local01
2800c     17 31 02 F6 | 	mov	local06, local05
28010     18 26 86 F1 | 	sub	local01, #24
28014     13 30 46 F7 | 	zerox	local06, #19
28018     14 2E 46 F0 | 	shr	local05, #20
2801c     02 2E 66 F0 | 	shl	local05, #2
28020     ED 2E 02 F1 | 	add	local05, __methods__
28024     17 2F 02 FB | 	rdlong	local05, local05
28028     14 15 02 F6 | 	mov	arg02, local02
2802c     15 17 02 F6 | 	mov	arg03, local03
28030     13 13 02 F6 | 	mov	arg01, local01
28034     F2 32 02 F6 | 	mov	local07, objptr
28038     18 E5 01 F6 | 	mov	objptr, local06
2803c     2D 2E 62 FD | 	call	local05
28040     19 E5 01 F6 | 	mov	objptr, local07
28044     FD 34 02 F6 | 	mov	local08, result1
28048     00 34 56 F2 | 	cmps	local08, #0 wc
2804c     2C 00 90 3D |  if_ae	jmp	#LR__3992
28050     08 26 06 F1 | 	add	local01, #8
28054     13 33 02 FB | 	rdlong	local07, local01
28058     20 32 46 F5 | 	or	local07, #32
2805c     13 33 62 FC | 	wrlong	local07, local01
28060     00 34 4E F2 | 	cmps	local08, #0 wz
28064     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28068     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2806c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28070     01 FA 65 56 |  if_ne	neg	result1, #1
28074     00 FA 05 A6 |  if_e	mov	result1, #0
28078     7C 00 90 FD | 	jmp	#LR__3996
2807c                 | LR__3992
2807c     1A FB 01 F6 | 	mov	result1, local08
28080     74 00 90 FD | 	jmp	#LR__3996
28084                 | LR__3993
28084     1C 26 06 F1 | 	add	local01, #28
28088     13 37 0A FB | 	rdlong	local09, local01 wz
2808c     1C 26 86 F1 | 	sub	local01, #28
28090     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28094     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28098     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2809c     01 FA 65 A6 |  if_e	neg	result1, #1
280a0     54 00 90 AD |  if_e	jmp	#LR__3996
280a4     00 34 06 F6 | 	mov	local08, #0
280a8                 | LR__3994
280a8     01 2A 16 F2 | 	cmp	local03, #1 wc
280ac     44 00 90 CD |  if_b	jmp	#LR__3995
280b0     1B 31 02 F6 | 	mov	local06, local09
280b4     1B 2F 02 F6 | 	mov	local05, local09
280b8     13 30 46 F7 | 	zerox	local06, #19
280bc     14 2E 46 F0 | 	shr	local05, #20
280c0     02 2E 66 F0 | 	shl	local05, #2
280c4     ED 2E 02 F1 | 	add	local05, __methods__
280c8     17 2F 02 FB | 	rdlong	local05, local05
280cc     16 13 C2 FA | 	rdbyte	arg01, local04
280d0     13 15 02 F6 | 	mov	arg02, local01
280d4     F2 32 02 F6 | 	mov	local07, objptr
280d8     18 E5 01 F6 | 	mov	objptr, local06
280dc     01 2C 06 F1 | 	add	local04, #1
280e0     2D 2E 62 FD | 	call	local05
280e4     19 E5 01 F6 | 	mov	objptr, local07
280e8     FD 34 02 F1 | 	add	local08, result1
280ec     01 2A 86 F1 | 	sub	local03, #1
280f0     B4 FF 9F FD | 	jmp	#LR__3994
280f4                 | LR__3995
280f4     1A FB 01 F6 | 	mov	result1, local08
280f8                 | LR__3996
280f8     A7 F0 03 F6 | 	mov	ptra, fp
280fc     B2 00 A0 FD | 	call	#popregs_
28100                 | __system___vfswrite_ret
28100     2D 00 64 FD | 	ret
28104                 | 
28104                 | __system___vfsread
28104     03 4A 05 F6 | 	mov	COUNT_, #3
28108     A8 00 A0 FD | 	call	#pushregs_
2810c     28 F0 07 F1 | 	add	ptra, #40
28110     04 4E 05 F1 | 	add	fp, #4
28114     A7 12 62 FC | 	wrlong	arg01, fp
28118     04 4E 05 F1 | 	add	fp, #4
2811c     A7 14 62 FC | 	wrlong	arg02, fp
28120     04 4E 05 F1 | 	add	fp, #4
28124     A7 16 62 FC | 	wrlong	arg03, fp
28128     04 4E 85 F1 | 	sub	fp, #4
2812c     A7 FA 01 FB | 	rdlong	result1, fp
28130     14 4E 05 F1 | 	add	fp, #20
28134     A7 FA 61 FC | 	wrlong	result1, fp
28138     04 4E 05 F1 | 	add	fp, #4
2813c     A7 00 68 FC | 	wrlong	#0, fp
28140     1C 4E 85 F1 | 	sub	fp, #28
28144     A7 12 02 FB | 	rdlong	arg01, fp
28148     04 4E 85 F1 | 	sub	fp, #4
2814c     08 12 06 F1 | 	add	arg01, #8
28150     09 FB 01 FB | 	rdlong	result1, arg01
28154     01 FA CD F7 | 	test	result1, #1 wz
28158     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2815c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28160     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28164     01 FA 65 A6 |  if_e	neg	result1, #1
28168     74 02 90 AD |  if_e	jmp	#LR__4006
2816c     04 4E 05 F1 | 	add	fp, #4
28170     A7 12 02 FB | 	rdlong	arg01, fp
28174     04 4E 85 F1 | 	sub	fp, #4
28178     14 12 06 F1 | 	add	arg01, #20
2817c     09 FB 09 FB | 	rdlong	result1, arg01 wz
28180     B8 00 90 AD |  if_e	jmp	#LR__4001
28184     04 4E 05 F1 | 	add	fp, #4
28188     A7 12 02 FB | 	rdlong	arg01, fp
2818c     09 17 02 F6 | 	mov	arg03, arg01
28190     14 16 06 F1 | 	add	arg03, #20
28194     0B 27 02 FB | 	rdlong	local01, arg03
28198     13 29 02 F6 | 	mov	local02, local01
2819c     13 26 46 F7 | 	zerox	local01, #19
281a0     14 28 46 F0 | 	shr	local02, #20
281a4     02 28 66 F0 | 	shl	local02, #2
281a8     ED 28 02 F1 | 	add	local02, __methods__
281ac     14 29 02 FB | 	rdlong	local02, local02
281b0     04 4E 05 F1 | 	add	fp, #4
281b4     A7 14 02 FB | 	rdlong	arg02, fp
281b8     04 4E 05 F1 | 	add	fp, #4
281bc     A7 16 02 FB | 	rdlong	arg03, fp
281c0     0C 4E 85 F1 | 	sub	fp, #12
281c4     F2 2A 02 F6 | 	mov	local03, objptr
281c8     13 E5 01 F6 | 	mov	objptr, local01
281cc     2D 28 62 FD | 	call	local02
281d0     15 E5 01 F6 | 	mov	objptr, local03
281d4     10 4E 05 F1 | 	add	fp, #16
281d8     A7 FA 61 FC | 	wrlong	result1, fp
281dc     10 4E 85 F1 | 	sub	fp, #16
281e0     00 FA 55 F2 | 	cmps	result1, #0 wc
281e4     44 00 90 3D |  if_ae	jmp	#LR__4000
281e8     04 4E 05 F1 | 	add	fp, #4
281ec     A7 2A 02 FB | 	rdlong	local03, fp
281f0     15 27 02 F6 | 	mov	local01, local03
281f4     08 2A 06 F1 | 	add	local03, #8
281f8     15 29 02 FB | 	rdlong	local02, local03
281fc     20 28 46 F5 | 	or	local02, #32
28200     08 26 06 F1 | 	add	local01, #8
28204     13 29 62 FC | 	wrlong	local02, local01
28208     0C 4E 05 F1 | 	add	fp, #12
2820c     A7 12 0A FB | 	rdlong	arg01, fp wz
28210     10 4E 85 F1 | 	sub	fp, #16
28214     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28218     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2821c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28220     01 FA 65 56 |  if_ne	neg	result1, #1
28224     00 FA 05 A6 |  if_e	mov	result1, #0
28228     B4 01 90 FD | 	jmp	#LR__4006
2822c                 | LR__4000
2822c     10 4E 05 F1 | 	add	fp, #16
28230     A7 FA 01 FB | 	rdlong	result1, fp
28234     10 4E 85 F1 | 	sub	fp, #16
28238     A4 01 90 FD | 	jmp	#LR__4006
2823c                 | LR__4001
2823c     04 4E 05 F1 | 	add	fp, #4
28240     A7 12 02 FB | 	rdlong	arg01, fp
28244     20 12 06 F1 | 	add	arg01, #32
28248     09 13 0A FB | 	rdlong	arg01, arg01 wz
2824c     14 4E 05 F1 | 	add	fp, #20
28250     A7 12 62 FC | 	wrlong	arg01, fp
28254     18 4E 85 F1 | 	sub	fp, #24
28258     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2825c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28260     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28264     01 FA 65 A6 |  if_e	neg	result1, #1
28268     74 01 90 AD |  if_e	jmp	#LR__4006
2826c     04 4E 05 F1 | 	add	fp, #4
28270     A7 2A 02 FB | 	rdlong	local03, fp
28274     04 4E 85 F1 | 	sub	fp, #4
28278     28 2A 06 F1 | 	add	local03, #40
2827c     15 29 0A FB | 	rdlong	local02, local03 wz
28280     7C 00 90 AD |  if_e	jmp	#LR__4003
28284     04 4E 05 F1 | 	add	fp, #4
28288     A7 12 02 FB | 	rdlong	arg01, fp
2828c     09 2B 02 F6 | 	mov	local03, arg01
28290     28 2A 06 F1 | 	add	local03, #40
28294     15 27 02 FB | 	rdlong	local01, local03
28298     13 29 02 F6 | 	mov	local02, local01
2829c     13 26 46 F7 | 	zerox	local01, #19
282a0     14 28 46 F0 | 	shr	local02, #20
282a4     02 28 66 F0 | 	shl	local02, #2
282a8     ED 28 02 F1 | 	add	local02, __methods__
282ac     14 29 02 FB | 	rdlong	local02, local02
282b0     20 4E 05 F1 | 	add	fp, #32
282b4     A7 16 02 F6 | 	mov	arg03, fp
282b8     24 4E 85 F1 | 	sub	fp, #36
282bc     00 15 06 F6 | 	mov	arg02, #256
282c0     F2 2A 02 F6 | 	mov	local03, objptr
282c4     13 E5 01 F6 | 	mov	objptr, local01
282c8     2D 28 62 FD | 	call	local02
282cc     15 E5 01 F6 | 	mov	objptr, local03
282d0     10 4E 05 F1 | 	add	fp, #16
282d4     A7 FA 61 FC | 	wrlong	result1, fp
282d8     00 FA 4D F2 | 	cmps	result1, #0 wz
282dc     10 4E 85 F1 | 	sub	fp, #16
282e0     1C 00 90 5D |  if_ne	jmp	#LR__4002
282e4     24 4E 05 F1 | 	add	fp, #36
282e8     A7 28 02 FB | 	rdlong	local02, fp
282ec     24 4E 85 F1 | 	sub	fp, #36
282f0     02 28 CE F7 | 	test	local02, #2 wz
282f4     20 4E 05 51 |  if_ne	add	fp, #32
282f8     A7 02 68 5C |  if_ne	wrlong	#1, fp
282fc     20 4E 85 51 |  if_ne	sub	fp, #32
28300                 | LR__4002
28300                 | LR__4003
28300     10 4E 05 F1 | 	add	fp, #16
28304     A7 00 68 FC | 	wrlong	#0, fp
28308     10 4E 85 F1 | 	sub	fp, #16
2830c                 | LR__4004
2830c     0C 4E 05 F1 | 	add	fp, #12
28310     A7 2A 02 FB | 	rdlong	local03, fp
28314     0C 4E 85 F1 | 	sub	fp, #12
28318     01 2A 16 F2 | 	cmp	local03, #1 wc
2831c     B4 00 90 CD |  if_b	jmp	#LR__4005
28320     18 4E 05 F1 | 	add	fp, #24
28324     A7 28 02 FB | 	rdlong	local02, fp
28328     14 2B 02 F6 | 	mov	local03, local02
2832c     13 2A 46 F7 | 	zerox	local03, #19
28330     14 28 46 F0 | 	shr	local02, #20
28334     02 28 66 F0 | 	shl	local02, #2
28338     ED 28 02 F1 | 	add	local02, __methods__
2833c     14 29 02 FB | 	rdlong	local02, local02
28340     14 4E 85 F1 | 	sub	fp, #20
28344     A7 12 02 FB | 	rdlong	arg01, fp
28348     04 4E 85 F1 | 	sub	fp, #4
2834c     F2 26 02 F6 | 	mov	local01, objptr
28350     15 E5 01 F6 | 	mov	objptr, local03
28354     2D 28 62 FD | 	call	local02
28358     13 E5 01 F6 | 	mov	objptr, local01
2835c     14 4E 05 F1 | 	add	fp, #20
28360     A7 FA 61 FC | 	wrlong	result1, fp
28364     14 4E 85 F1 | 	sub	fp, #20
28368     00 FA 55 F2 | 	cmps	result1, #0 wc
2836c     64 00 90 CD |  if_b	jmp	#LR__4005
28370     1C 4E 05 F1 | 	add	fp, #28
28374     A7 2A 02 FB | 	rdlong	local03, fp
28378     15 29 02 F6 | 	mov	local02, local03
2837c     01 28 06 F1 | 	add	local02, #1
28380     A7 28 62 FC | 	wrlong	local02, fp
28384     08 4E 85 F1 | 	sub	fp, #8
28388     A7 28 02 FB | 	rdlong	local02, fp
2838c     15 29 42 FC | 	wrbyte	local02, local03
28390     04 4E 85 F1 | 	sub	fp, #4
28394     A7 2A 02 FB | 	rdlong	local03, fp
28398     01 2A 06 F1 | 	add	local03, #1
2839c     A7 2A 62 FC | 	wrlong	local03, fp
283a0     04 4E 85 F1 | 	sub	fp, #4
283a4     A7 2A 02 FB | 	rdlong	local03, fp
283a8     01 2A 86 F1 | 	sub	local03, #1
283ac     A7 2A 62 FC | 	wrlong	local03, fp
283b0     14 4E 05 F1 | 	add	fp, #20
283b4     A7 2A 0A FB | 	rdlong	local03, fp wz
283b8     20 4E 85 F1 | 	sub	fp, #32
283bc     4C FF 9F AD |  if_e	jmp	#LR__4004
283c0     14 4E 05 F1 | 	add	fp, #20
283c4     A7 28 02 FB | 	rdlong	local02, fp
283c8     14 4E 85 F1 | 	sub	fp, #20
283cc     0A 28 0E F2 | 	cmp	local02, #10 wz
283d0     38 FF 9F 5D |  if_ne	jmp	#LR__4004
283d4                 | LR__4005
283d4     10 4E 05 F1 | 	add	fp, #16
283d8     A7 FA 01 FB | 	rdlong	result1, fp
283dc     10 4E 85 F1 | 	sub	fp, #16
283e0                 | LR__4006
283e0     A7 F0 03 F6 | 	mov	ptra, fp
283e4     B2 00 A0 FD | 	call	#popregs_
283e8                 | __system___vfsread_ret
283e8     2D 00 64 FD | 	ret
283ec                 | 
283ec                 | __system____default_filbuf
283ec     04 4A 05 F6 | 	mov	COUNT_, #4
283f0     A8 00 A0 FD | 	call	#pushregs_
283f4     09 27 02 F6 | 	mov	local01, arg01
283f8     13 29 02 FB | 	rdlong	local02, local01
283fc     0C 28 06 F1 | 	add	local02, #12
28400     14 FB 09 FB | 	rdlong	result1, local02 wz
28404     0C 28 86 F1 | 	sub	local02, #12
28408     20 00 90 5D |  if_ne	jmp	#LR__4010
2840c     14 28 06 F1 | 	add	local02, #20
28410     14 FB 01 F6 | 	mov	result1, local02
28414     04 28 86 F1 | 	sub	local02, #4
28418     14 FB 61 FC | 	wrlong	result1, local02
2841c     04 28 86 F1 | 	sub	local02, #4
28420     02 00 80 FF 
28424     14 01 68 FC | 	wrlong	##1024, local02
28428     0C 28 86 F1 | 	sub	local02, #12
2842c                 | LR__4010
2842c     14 26 06 F1 | 	add	local01, #20
28430     13 2B 02 FB | 	rdlong	local03, local01
28434     15 2D 02 F6 | 	mov	local04, local03
28438     14 26 86 F1 | 	sub	local01, #20
2843c     13 2C 46 F7 | 	zerox	local04, #19
28440     14 2A 46 F0 | 	shr	local03, #20
28444     02 2A 66 F0 | 	shl	local03, #2
28448     ED 2A 02 F1 | 	add	local03, __methods__
2844c     15 2B 02 FB | 	rdlong	local03, local03
28450     10 28 06 F1 | 	add	local02, #16
28454     14 15 02 FB | 	rdlong	arg02, local02
28458     04 28 86 F1 | 	sub	local02, #4
2845c     14 17 02 FB | 	rdlong	arg03, local02
28460     0C 28 86 F1 | 	sub	local02, #12
28464     13 13 02 F6 | 	mov	arg01, local01
28468     F2 26 02 F6 | 	mov	local01, objptr
2846c     16 E5 01 F6 | 	mov	objptr, local04
28470     2D 2A 62 FD | 	call	local03
28474     13 E5 01 F6 | 	mov	objptr, local01
28478     FD 2C 02 F6 | 	mov	local04, result1
2847c     00 2C 56 F2 | 	cmps	local04, #0 wc
28480     01 FA 65 C6 |  if_b	neg	result1, #1
28484     28 00 90 CD |  if_b	jmp	#LR__4011
28488     14 2D 62 FC | 	wrlong	local04, local02
2848c     10 28 06 F1 | 	add	local02, #16
28490     14 2B 02 FB | 	rdlong	local03, local02
28494     0C 28 86 F1 | 	sub	local02, #12
28498     14 2B 62 FC | 	wrlong	local03, local02
2849c     04 28 06 F1 | 	add	local02, #4
284a0     14 2B 02 FB | 	rdlong	local03, local02
284a4     01 2A 46 F5 | 	or	local03, #1
284a8     14 2B 62 FC | 	wrlong	local03, local02
284ac     16 FB 01 F6 | 	mov	result1, local04
284b0                 | LR__4011
284b0     A7 F0 03 F6 | 	mov	ptra, fp
284b4     B2 00 A0 FD | 	call	#popregs_
284b8                 | __system____default_filbuf_ret
284b8     2D 00 64 FD | 	ret
284bc                 | 
284bc                 | __system__getlower_1123
284bc     41 12 56 F2 | 	cmps	arg01, #65 wc
284c0     10 00 90 CD |  if_b	jmp	#LR__4020
284c4     5B 12 56 F2 | 	cmps	arg01, #91 wc
284c8     09 FB 01 C6 |  if_b	mov	result1, arg01
284cc     20 FA 05 C1 |  if_b	add	result1, #32
284d0     04 00 90 CD |  if_b	jmp	#__system__getlower_1123_ret
284d4                 | LR__4020
284d4     09 FB 01 F6 | 	mov	result1, arg01
284d8                 | __system__getlower_1123_ret
284d8     2D 00 64 FD | 	ret
284dc                 | 
284dc                 | __system___pat_match
284dc     08 4A 05 F6 | 	mov	COUNT_, #8
284e0     A8 00 A0 FD | 	call	#pushregs_
284e4     09 27 02 F6 | 	mov	local01, arg01
284e8                 | LR__4030
284e8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
284ec     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
284f0     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
284f4     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
284f8     2C 00 90 AD |  if_e	jmp	#LR__4031
284fc     0A 13 C2 FA | 	rdbyte	arg01, arg02
28500     B8 FF BF FD | 	call	#__system__getlower_1123
28504     FD 2A 02 F6 | 	mov	local03, result1
28508     13 13 C2 FA | 	rdbyte	arg01, local01
2850c     AC FF BF FD | 	call	#__system__getlower_1123
28510     15 FB 09 F2 | 	cmp	result1, local03 wz
28514     00 FA 05 56 |  if_ne	mov	result1, #0
28518     FC 00 90 5D |  if_ne	jmp	#LR__4039
2851c     01 26 06 F1 | 	add	local01, #1
28520     01 14 06 F1 | 	add	arg02, #1
28524     C0 FF 9F FD | 	jmp	#LR__4030
28528                 | LR__4031
28528     0A 2B C2 FA | 	rdbyte	local03, arg02
2852c     2A 2A 0E F2 | 	cmp	local03, #42 wz
28530     D4 00 90 5D |  if_ne	jmp	#LR__4038
28534     01 14 06 F1 | 	add	arg02, #1
28538     0A 29 C2 FA | 	rdbyte	local02, arg02
2853c     01 14 86 F1 | 	sub	arg02, #1
28540     2E 28 0E F2 | 	cmp	local02, #46 wz
28544     28 00 90 5D |  if_ne	jmp	#LR__4032
28548     02 14 06 F1 | 	add	arg02, #2
2854c     0A 29 C2 FA | 	rdbyte	local02, arg02
28550     02 14 86 F1 | 	sub	arg02, #2
28554     2A 28 0E F2 | 	cmp	local02, #42 wz
28558     03 14 06 A1 |  if_e	add	arg02, #3
2855c     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
28560     03 14 86 A1 |  if_e	sub	arg02, #3
28564     16 2F 0A A6 |  if_e	mov	local05, local04 wz
28568     01 FA 05 A6 |  if_e	mov	result1, #1
2856c     A8 00 90 AD |  if_e	jmp	#LR__4039
28570                 | LR__4032
28570     01 14 06 F1 | 	add	arg02, #1
28574     00 30 06 F6 | 	mov	local06, #0
28578     97 1E 48 FB | 	callpa	#(@LR__4035-@LR__4033)>>2,fcache_load_ptr_
2857c                 | LR__4033
2857c     18 33 02 F6 | 	mov	local07, local06
28580     0A 33 02 F1 | 	add	local07, arg02
28584     19 33 CA FA | 	rdbyte	local07, local07 wz
28588     18 2F 02 56 |  if_ne	mov	local05, local06
2858c     01 2E 06 51 |  if_ne	add	local05, #1
28590     17 31 02 56 |  if_ne	mov	local06, local05
28594     E4 FF 9F 5D |  if_ne	jmp	#LR__4033
28598     00 34 06 F6 | 	mov	local08, #0
2859c                 | LR__4034
2859c     1A 33 02 F6 | 	mov	local07, local08
285a0     13 33 02 F1 | 	add	local07, local01
285a4     19 33 CA FA | 	rdbyte	local07, local07 wz
285a8     1A 2F 02 56 |  if_ne	mov	local05, local08
285ac     01 2E 06 51 |  if_ne	add	local05, #1
285b0     17 35 02 56 |  if_ne	mov	local08, local05
285b4     E4 FF 9F 5D |  if_ne	jmp	#LR__4034
285b8                 | LR__4035
285b8     18 35 52 F2 | 	cmps	local08, local06 wc
285bc     00 FA 05 C6 |  if_b	mov	result1, #0
285c0     54 00 90 CD |  if_b	jmp	#LR__4039
285c4     1A 29 02 F6 | 	mov	local02, local08
285c8     18 29 82 F1 | 	sub	local02, local06
285cc     14 27 02 F1 | 	add	local01, local02
285d0                 | LR__4036
285d0     01 30 56 F2 | 	cmps	local06, #1 wc
285d4     30 00 90 CD |  if_b	jmp	#LR__4037
285d8     13 13 C2 FA | 	rdbyte	arg01, local01
285dc     DC FE BF FD | 	call	#__system__getlower_1123
285e0     FD 34 02 F6 | 	mov	local08, result1
285e4     0A 13 C2 FA | 	rdbyte	arg01, arg02
285e8     D0 FE BF FD | 	call	#__system__getlower_1123
285ec     FD 34 0A F2 | 	cmp	local08, result1 wz
285f0     00 FA 05 56 |  if_ne	mov	result1, #0
285f4     20 00 90 5D |  if_ne	jmp	#LR__4039
285f8     01 26 06 F1 | 	add	local01, #1
285fc     01 14 06 F1 | 	add	arg02, #1
28600     01 30 86 F1 | 	sub	local06, #1
28604     C8 FF 9F FD | 	jmp	#LR__4036
28608                 | LR__4037
28608                 | LR__4038
28608     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2860c     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
28610     01 FA 05 A6 |  if_e	mov	result1, #1
28614     00 FA 05 56 |  if_ne	mov	result1, #0
28618                 | LR__4039
28618     A7 F0 03 F6 | 	mov	ptra, fp
2861c     B2 00 A0 FD | 	call	#popregs_
28620                 | __system___pat_match_ret
28620     2D 00 64 FD | 	ret
28624                 | 
28624                 | _fatfs_cc_ff_uni2oem
28624     00 00 06 F6 | 	mov	_var01, #0
28628     80 12 16 F2 | 	cmp	arg01, #128 wc
2862c     09 01 02 C6 |  if_b	mov	_var01, arg01
28630     58 00 90 CD |  if_b	jmp	#LR__4044
28634     80 00 00 FF 
28638     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2863c     4C 00 90 3D |  if_ae	jmp	#LR__4043
28640     0A FB 31 F9 | 	getword	result1, arg02, #0
28644     01 00 00 FF 
28648     52 FB 0D F2 | 	cmp	result1, ##850 wz
2864c     3C 00 90 5D |  if_ne	jmp	#LR__4043
28650                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
28650     00 00 06 F6 | 	mov	_var01, #0
28654     97 14 48 FB | 	callpa	#(@LR__4041-@LR__4040)>>2,fcache_load_ptr_
28658                 | LR__4040
28658     00 FB 31 F9 | 	getword	result1, _var01, #0
2865c     80 FA 15 F2 | 	cmp	result1, #128 wc
28660     1C 00 90 3D |  if_ae	jmp	#LR__4042
28664     00 FB 31 F9 | 	getword	result1, _var01, #0
28668     01 FA 65 F0 | 	shl	result1, #1
2866c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
28670     FD FA E1 FA | 	rdword	result1, result1
28674     FD 12 0A F2 | 	cmp	arg01, result1 wz
28678     01 00 06 51 |  if_ne	add	_var01, #1
2867c     D8 FF 9F 5D |  if_ne	jmp	#LR__4040
28680                 | LR__4041
28680                 | LR__4042
28680     00 01 32 F9 | 	getword	_var01, _var01, #0
28684     80 00 06 F1 | 	add	_var01, #128
28688     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2868c                 | LR__4043
2868c                 | LR__4044
2868c                 | ' 			c = (c + 0x80) & 0xFF;
2868c                 | ' 		}
2868c                 | ' 	}
2868c                 | ' 
2868c                 | ' 	return c;
2868c     00 FB 01 F6 | 	mov	result1, _var01
28690                 | _fatfs_cc_ff_uni2oem_ret
28690     2D 00 64 FD | 	ret
28694                 | 
28694                 | _fatfs_cc_ff_oem2uni
28694     00 00 06 F6 | 	mov	_var01, #0
28698     09 FB 31 F9 | 	getword	result1, arg01, #0
2869c     80 FA 15 F2 | 	cmp	result1, #128 wc
286a0     09 01 02 C6 |  if_b	mov	_var01, arg01
286a4     2C 00 90 CD |  if_b	jmp	#LR__4051
286a8     0A 15 32 F9 | 	getword	arg02, arg02, #0
286ac     01 00 00 FF 
286b0     52 15 0E F2 | 	cmp	arg02, ##850 wz
286b4     1C 00 90 5D |  if_ne	jmp	#LR__4050
286b8     09 FB 31 F9 | 	getword	result1, arg01, #0
286bc     00 FB 15 F2 | 	cmp	result1, #256 wc
286c0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
286c4     80 12 86 C1 |  if_b	sub	arg01, #128
286c8     01 12 66 C0 |  if_b	shl	arg01, #1
286cc     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
286d0     09 01 E2 CA |  if_b	rdword	_var01, arg01
286d4                 | LR__4050
286d4                 | LR__4051
286d4                 | ' 		}
286d4                 | ' 	}
286d4                 | ' 
286d4                 | ' 	return c;
286d4     00 FB 01 F6 | 	mov	result1, _var01
286d8                 | _fatfs_cc_ff_oem2uni_ret
286d8     2D 00 64 FD | 	ret
286dc                 | 
286dc                 | _fatfs_cc_ff_wtoupper
286dc     09 01 02 F6 | 	mov	_var01, arg01
286e0     80 00 00 FF 
286e4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
286e8     60 01 90 3D |  if_ae	jmp	#LR__4073
286ec     00 03 02 F6 | 	mov	_var02, _var01
286f0     01 01 32 F9 | 	getword	_var01, _var02, #0
286f4     08 00 00 FF 
286f8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
286fc     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
28700     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
28704     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
28708     01 00 00 3F 
2870c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
28710     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
28714     01 00 00 3F 
28718     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2871c     02 07 02 F6 | 	mov	_var04, _var03
28720                 | ' 		uc = (WORD)uni;
28720                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
28720                 | ' 		for (;;) {
28720                 | LR__4060
28720     03 09 E2 FA | 	rdword	_var05, _var04
28724     04 05 02 F6 | 	mov	_var03, _var05
28728     0F 04 4E F7 | 	zerox	_var03, #15 wz
2872c     02 06 06 F1 | 	add	_var04, #2
28730     14 01 90 AD |  if_e	jmp	#LR__4072
28734     01 05 32 F9 | 	getword	_var03, _var02, #0
28738     04 01 32 F9 | 	getword	_var01, _var05, #0
2873c     00 05 12 F2 | 	cmp	_var03, _var01 wc
28740     04 01 90 CD |  if_b	jmp	#LR__4072
28744     03 0B E2 FA | 	rdword	_var06, _var04
28748     05 0D 32 F9 | 	getword	_var07, _var06, #0
2874c     08 0C 46 F0 | 	shr	_var07, #8
28750     05 0B 32 F9 | 	getword	_var06, _var06, #0
28754     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
28758     01 05 32 F9 | 	getword	_var03, _var02, #0
2875c     04 0F 32 F9 | 	getword	_var08, _var05, #0
28760     05 01 32 F9 | 	getword	_var01, _var06, #0
28764     00 0F 02 F1 | 	add	_var08, _var01
28768     07 05 52 F2 | 	cmps	_var03, _var08 wc
2876c     02 06 06 F1 | 	add	_var04, #2
28770     C4 00 90 3D |  if_ae	jmp	#LR__4071
28774                 | ' 				switch (cmd) {
28774     06 11 32 F9 | 	getword	_var09, _var07, #0
28778     09 10 26 F3 | 	fle	_var09, #9
2877c     30 10 62 FD | 	jmprel	_var09
28780                 | LR__4061
28780     24 00 90 FD | 	jmp	#LR__4062
28784     3C 00 90 FD | 	jmp	#LR__4063
28788     54 00 90 FD | 	jmp	#LR__4064
2878c     5C 00 90 FD | 	jmp	#LR__4065
28790     64 00 90 FD | 	jmp	#LR__4066
28794     6C 00 90 FD | 	jmp	#LR__4067
28798     74 00 90 FD | 	jmp	#LR__4068
2879c     7C 00 90 FD | 	jmp	#LR__4069
287a0     84 00 90 FD | 	jmp	#LR__4070
287a4     A0 00 90 FD | 	jmp	#LR__4072
287a8                 | LR__4062
287a8     01 03 32 F9 | 	getword	_var02, _var02, #0
287ac     04 09 32 F9 | 	getword	_var05, _var05, #0
287b0     04 03 82 F1 | 	sub	_var02, _var05
287b4     01 02 66 F0 | 	shl	_var02, #1
287b8     03 03 02 F1 | 	add	_var02, _var04
287bc     01 03 E2 FA | 	rdword	_var02, _var02
287c0     84 00 90 FD | 	jmp	#LR__4072
287c4                 | LR__4063
287c4     01 05 32 F9 | 	getword	_var03, _var02, #0
287c8     01 03 32 F9 | 	getword	_var02, _var02, #0
287cc     04 09 32 F9 | 	getword	_var05, _var05, #0
287d0     04 03 82 F1 | 	sub	_var02, _var05
287d4     01 02 06 F5 | 	and	_var02, #1
287d8     02 03 C2 F2 | 	subr	_var02, _var03
287dc     68 00 90 FD | 	jmp	#LR__4072
287e0                 | LR__4064
287e0     01 03 32 F9 | 	getword	_var02, _var02, #0
287e4     10 02 86 F1 | 	sub	_var02, #16
287e8     5C 00 90 FD | 	jmp	#LR__4072
287ec                 | LR__4065
287ec     01 03 32 F9 | 	getword	_var02, _var02, #0
287f0     20 02 86 F1 | 	sub	_var02, #32
287f4     50 00 90 FD | 	jmp	#LR__4072
287f8                 | LR__4066
287f8     01 03 32 F9 | 	getword	_var02, _var02, #0
287fc     30 02 86 F1 | 	sub	_var02, #48
28800     44 00 90 FD | 	jmp	#LR__4072
28804                 | LR__4067
28804     01 03 32 F9 | 	getword	_var02, _var02, #0
28808     1A 02 86 F1 | 	sub	_var02, #26
2880c     38 00 90 FD | 	jmp	#LR__4072
28810                 | LR__4068
28810     01 03 32 F9 | 	getword	_var02, _var02, #0
28814     08 02 06 F1 | 	add	_var02, #8
28818     2C 00 90 FD | 	jmp	#LR__4072
2881c                 | LR__4069
2881c     01 03 32 F9 | 	getword	_var02, _var02, #0
28820     50 02 86 F1 | 	sub	_var02, #80
28824     20 00 90 FD | 	jmp	#LR__4072
28828                 | LR__4070
28828     01 03 32 F9 | 	getword	_var02, _var02, #0
2882c     0E 00 00 FF 
28830     60 02 86 F1 | 	sub	_var02, ##7264
28834                 | ' 				}
28834                 | ' 				break;
28834     10 00 90 FD | 	jmp	#LR__4072
28838                 | LR__4071
28838     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2883c     02 0A 06 AA |  if_e	mul	_var06, #2
28840     05 07 02 A1 |  if_e	add	_var04, _var06
28844     D8 FE 9F FD | 	jmp	#LR__4060
28848                 | LR__4072
28848     01 01 32 F9 | 	getword	_var01, _var02, #0
2884c                 | LR__4073
2884c                 | ' 		}
2884c                 | ' 		uni = uc;
2884c                 | ' 	}
2884c                 | ' 
2884c                 | ' 	return uni;
2884c     00 FB 01 F6 | 	mov	result1, _var01
28850                 | _fatfs_cc_ff_wtoupper_ret
28850     2D 00 64 FD | 	ret
28854                 | 
28854                 | _fatfs_cc_strncpy
28854     09 01 02 F6 | 	mov	_var01, arg01
28858     97 12 48 FB | 	callpa	#(@LR__4081-@LR__4080)>>2,fcache_load_ptr_
2885c                 | ' 
2885c                 | ' 	dscan = dst;
2885c                 | ' 	sscan = src;
2885c                 | ' 	count = n;
2885c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2885c                 | LR__4080
2885c     01 16 86 F1 | 	sub	arg03, #1
28860     00 16 56 F2 | 	cmps	arg03, #0 wc
28864     18 00 90 CD |  if_b	jmp	#LR__4082
28868     0A FB C1 FA | 	rdbyte	result1, arg02
2886c     00 FB 41 FC | 	wrbyte	result1, _var01
28870     01 14 06 F1 | 	add	arg02, #1
28874     00 FB C9 FA | 	rdbyte	result1, _var01 wz
28878                 | ' 		continue;
28878     01 00 06 F1 | 	add	_var01, #1
2887c     DC FF 9F 5D |  if_ne	jmp	#LR__4080
28880                 | LR__4081
28880                 | LR__4082
28880     97 0C 48 FB | 	callpa	#(@LR__4084-@LR__4083)>>2,fcache_load_ptr_
28884                 | ' 	while (--count >= 0)
28884                 | LR__4083
28884     01 16 86 F1 | 	sub	arg03, #1
28888     00 16 56 F2 | 	cmps	arg03, #0 wc
2888c     00 03 02 36 |  if_ae	mov	_var02, _var01
28890     01 00 06 31 |  if_ae	add	_var01, #1
28894     01 01 48 3C |  if_ae	wrbyte	#0, _var02
28898     E8 FF 9F 3D |  if_ae	jmp	#LR__4083
2889c                 | LR__4084
2889c                 | ' 		*dscan++ = '\0';
2889c                 | ' 	return(dst);
2889c     09 FB 01 F6 | 	mov	result1, arg01
288a0                 | _fatfs_cc_strncpy_ret
288a0     2D 00 64 FD | 	ret
288a4                 | 
288a4                 | _fatfs_cc_memcmp
288a4                 | ' 	for (n = size; n > 0; n--)
288a4     00 16 0E F2 | 	cmp	arg03, #0 wz
288a8     28 00 90 AD |  if_e	jmp	#LR__4091
288ac                 | LR__4090
288ac     09 01 C2 FA | 	rdbyte	_var01, arg01
288b0     0A 03 C2 FA | 	rdbyte	_var02, arg02
288b4     01 01 0A F2 | 	cmp	_var01, _var02 wz
288b8     01 12 06 A1 |  if_e	add	arg01, #1
288bc     01 14 06 A1 |  if_e	add	arg02, #1
288c0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
288c0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
288c4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
288c8     01 FB 81 51 |  if_ne	sub	result1, _var02
288cc     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
288d0     F6 17 6E FB | 	djnz	arg03, #LR__4090
288d4                 | LR__4091
288d4                 | ' 
288d4                 | ' 	return(0);
288d4     00 FA 05 F6 | 	mov	result1, #0
288d8                 | _fatfs_cc_memcmp_ret
288d8     2D 00 64 FD | 	ret
288dc                 | 
288dc                 | _fatfs_cc_strncmp
288dc     09 01 0A F6 | 	mov	_var01, arg01 wz
288e0     14 00 90 5D |  if_ne	jmp	#LR__4100
288e4                 | ' 		return scan2 ? -1 : 0;
288e4     00 14 0E F2 | 	cmp	arg02, #0 wz
288e8     01 02 66 56 |  if_ne	neg	_var02, #1
288ec     00 02 06 A6 |  if_e	mov	_var02, #0
288f0     01 FB 01 F6 | 	mov	result1, _var02
288f4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
288f8                 | LR__4100
288f8     00 14 0E F2 | 	cmp	arg02, #0 wz
288fc     01 FA 05 A6 |  if_e	mov	result1, #1
28900     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
28904     0B 05 02 F6 | 	mov	_var03, arg03
28908     97 16 48 FB | 	callpa	#(@LR__4102-@LR__4101)>>2,fcache_load_ptr_
2890c                 | ' 	count = n;
2890c                 | ' 	do {
2890c                 | LR__4101
2890c     00 07 C2 FA | 	rdbyte	_var04, _var01
28910     0A 09 02 F6 | 	mov	_var05, arg02
28914     04 0B C2 FA | 	rdbyte	_var06, _var05
28918     01 04 86 F1 | 	sub	_var03, #1
2891c     00 04 56 F2 | 	cmps	_var03, #0 wc
28920     01 00 06 F1 | 	add	_var01, #1
28924     01 14 06 F1 | 	add	arg02, #1
28928     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2892c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4103
28930     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
28934     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4101
28938                 | LR__4102
28938                 | LR__4103
28938     00 04 56 F2 | 	cmps	_var03, #0 wc
2893c                 | ' 		return(0);
2893c     00 FA 05 C6 |  if_b	mov	result1, #0
28940     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
28944     05 07 0A F2 | 	cmp	_var04, _var06 wz
28948                 | ' 		return(0);
28948     00 FA 05 A6 |  if_e	mov	result1, #0
2894c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
28950     00 06 0E F2 | 	cmp	_var04, #0 wz
28954                 | ' 		return(-1);
28954     01 FA 65 A6 |  if_e	neg	result1, #1
28958     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2895c     00 0A 0E F2 | 	cmp	_var06, #0 wz
28960                 | ' 		return(1);
28960     01 FA 05 A6 |  if_e	mov	result1, #1
28964                 | ' 		return(c1 - c2);
28964     03 FB 01 56 |  if_ne	mov	result1, _var04
28968     05 FB 81 51 |  if_ne	sub	result1, _var06
2896c                 | _fatfs_cc_strncmp_ret
2896c     2D 00 64 FD | 	ret
28970                 | 
28970                 | _fatfs_cc_strchr
28970                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
28970                 | ' 	while ((c = *s++) != (char) charwanted)
28970                 | LR__4110
28970     09 01 02 F6 | 	mov	_var01, arg01
28974     00 03 C2 FA | 	rdbyte	_var02, _var01
28978     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2897c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
28980     03 05 0A F2 | 	cmp	_var03, _var04 wz
28984     01 12 06 F1 | 	add	arg01, #1
28988     14 00 90 AD |  if_e	jmp	#LR__4111
2898c     01 05 02 F6 | 	mov	_var03, _var02
28990     07 04 4E F7 | 	zerox	_var03, #7 wz
28994     00 FA 05 A6 |  if_e	mov	result1, #0
28998     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2899c     D0 FF 9F FD | 	jmp	#LR__4110
289a0                 | LR__4111
289a0                 | ' 	return((char *)--s);
289a0     01 12 86 F1 | 	sub	arg01, #1
289a4     09 FB 01 F6 | 	mov	result1, arg01
289a8                 | _fatfs_cc_strchr_ret
289a8     2D 00 64 FD | 	ret
289ac                 | 
289ac                 | _fatfs_cc_disk_initialize
289ac     04 4A 05 F6 | 	mov	COUNT_, #4
289b0     A8 00 A0 FD | 	call	#pushregs_
289b4     40 F0 07 F1 | 	add	ptra, #64
289b8     04 4E 05 F1 | 	add	fp, #4
289bc     A7 12 42 FC | 	wrbyte	arg01, fp
289c0     01 00 00 FF 
289c4     14 E4 05 F1 | 	add	objptr, ##532
289c8     F2 18 02 FB | 	rdlong	arg04, objptr
289cc     2C 4E 05 F1 | 	add	fp, #44
289d0     A7 18 62 FC | 	wrlong	arg04, fp
289d4     04 E4 85 F1 | 	sub	objptr, #4
289d8     F2 18 02 FB | 	rdlong	arg04, objptr
289dc     04 4E 05 F1 | 	add	fp, #4
289e0     A7 18 62 FC | 	wrlong	arg04, fp
289e4     08 E4 05 F1 | 	add	objptr, #8
289e8     F2 18 02 FB | 	rdlong	arg04, objptr
289ec     04 4E 05 F1 | 	add	fp, #4
289f0     A7 18 62 FC | 	wrlong	arg04, fp
289f4     04 E4 05 F1 | 	add	objptr, #4
289f8     F2 18 02 FB | 	rdlong	arg04, objptr
289fc     04 4E 05 F1 | 	add	fp, #4
28a00     A7 18 62 FC | 	wrlong	arg04, fp
28a04     04 E4 05 F1 | 	add	objptr, #4
28a08     F2 02 48 FC | 	wrbyte	#1, objptr
28a0c     01 00 00 FF 
28a10     20 E4 85 F1 | 	sub	objptr, ##544
28a14     38 4E 85 F1 | 	sub	fp, #56
28a18     A7 18 CA FA | 	rdbyte	arg04, fp wz
28a1c     04 4E 85 F1 | 	sub	fp, #4
28a20                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28a20                 | '             return RES_NOTRDY;
28a20     03 FA 05 56 |  if_ne	mov	result1, #3
28a24     D8 05 90 5D |  if_ne	jmp	#LR__4138
28a28     13 00 00 FF 
28a2c     10 13 06 F6 | 	mov	arg01, ##10000
28a30     40 95 BF FD | 	call	#__system___waitus
28a34     30 4E 05 F1 | 	add	fp, #48
28a38     A7 12 02 FB | 	rdlong	arg01, fp
28a3c     09 01 08 FC | 	wrpin	#0, arg01
28a40     04 4E 05 F1 | 	add	fp, #4
28a44     A7 12 02 FB | 	rdlong	arg01, fp
28a48     09 01 08 FC | 	wrpin	#0, arg01
28a4c     04 4E 05 F1 | 	add	fp, #4
28a50     A7 12 02 FB | 	rdlong	arg01, fp
28a54     09 01 08 FC | 	wrpin	#0, arg01
28a58     04 4E 05 F1 | 	add	fp, #4
28a5c     A7 12 02 FB | 	rdlong	arg01, fp
28a60     09 00 80 FF 
28a64     09 01 08 FC | 	wrpin	##4608, arg01
28a68     0C 4E 85 F1 | 	sub	fp, #12
28a6c     A7 12 02 FB | 	rdlong	arg01, fp
28a70     59 12 62 FD | 	drvh	arg01
28a74     04 4E 05 F1 | 	add	fp, #4
28a78     A7 12 02 FB | 	rdlong	arg01, fp
28a7c     59 12 62 FD | 	drvh	arg01
28a80     04 4E 05 F1 | 	add	fp, #4
28a84     A7 12 02 FB | 	rdlong	arg01, fp
28a88     59 12 62 FD | 	drvh	arg01
28a8c     04 4E 05 F1 | 	add	fp, #4
28a90     A7 12 02 FB | 	rdlong	arg01, fp
28a94     59 12 62 FD | 	drvh	arg01
28a98     20 4E 85 F1 | 	sub	fp, #32
28a9c     00 04 80 FF 
28aa0     A7 20 68 FC | 	wrlong	##524304, fp
28aa4     04 4E 05 F1 | 	add	fp, #4
28aa8     20 03 80 FF 
28aac     A7 90 68 FC | 	wrlong	##409672, fp
28ab0     14 4E 05 F1 | 	add	fp, #20
28ab4     A7 26 02 FB | 	rdlong	local01, fp
28ab8     18 4E 85 F1 | 	sub	fp, #24
28abc     A7 16 02 FB | 	rdlong	arg03, fp
28ac0     40 26 62 FD | 	dirl	local01
28ac4     A0 03 80 FF 
28ac8     13 91 08 FC | 	wrpin	##475208, local01
28acc     13 17 12 FC | 	wxpin	arg03, local01
28ad0     13 01 28 FC | 	wypin	#0, local01
28ad4     41 26 62 FD | 	dirh	local01
28ad8     1C 4E 05 F1 | 	add	fp, #28
28adc     A7 28 02 FB | 	rdlong	local02, fp
28ae0     14 27 82 F1 | 	sub	local01, local02
28ae4     07 26 06 F5 | 	and	local01, #7
28ae8     18 26 66 F0 | 	shl	local01, #24
28aec     78 14 06 F6 | 	mov	arg02, #120
28af0     13 15 42 F5 | 	or	arg02, local01
28af4     14 4E 85 F1 | 	sub	fp, #20
28af8     A7 14 62 FC | 	wrlong	arg02, fp
28afc     14 4E 05 F1 | 	add	fp, #20
28b00     A7 12 02 FB | 	rdlong	arg01, fp
28b04     10 14 26 F4 | 	bith	arg02, #16
28b08     40 12 62 FD | 	dirl	arg01
28b0c     09 15 02 FC | 	wrpin	arg02, arg01
28b10     09 3F 18 FC | 	wxpin	#31, arg01
28b14     FF FF FF FF 
28b18     09 FF 2B FC | 	wypin	##-1, arg01
28b1c     41 12 62 FD | 	dirh	arg01
28b20     04 4E 85 F1 | 	sub	fp, #4
28b24     A7 14 02 FB | 	rdlong	arg02, fp
28b28     08 4E 05 F1 | 	add	fp, #8
28b2c     A7 2A 02 FB | 	rdlong	local03, fp
28b30     15 15 82 F1 | 	sub	arg02, local03
28b34     07 14 06 F5 | 	and	arg02, #7
28b38     18 14 66 F0 | 	shl	arg02, #24
28b3c     14 4E 85 F1 | 	sub	fp, #20
28b40     A7 14 62 FC | 	wrlong	arg02, fp
28b44     29 00 00 FF 
28b48     7A 14 46 F5 | 	or	arg02, ##21114
28b4c     A7 14 62 FC | 	wrlong	arg02, fp
28b50     14 4E 05 F1 | 	add	fp, #20
28b54     A7 12 02 FB | 	rdlong	arg01, fp
28b58     40 12 62 FD | 	dirl	arg01
28b5c     09 15 02 FC | 	wrpin	arg02, arg01
28b60     09 4F 18 FC | 	wxpin	#39, arg01
28b64     09 01 28 FC | 	wypin	#0, arg01
28b68     41 12 62 FD | 	dirh	arg01
28b6c     28 4E 85 F1 | 	sub	fp, #40
28b70     A7 12 02 F6 | 	mov	arg01, fp
28b74     14 4E 85 F1 | 	sub	fp, #20
28b78     0A 14 06 F6 | 	mov	arg02, #10
28b7c     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28b80     00 12 06 F6 | 	mov	arg01, #0
28b84     00 14 06 F6 | 	mov	arg02, #0
28b88     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28b8c     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1167
28b90     64 12 06 F6 | 	mov	arg01, #100
28b94     DC 93 BF FD | 	call	#__system___waitus
28b98     14 4E 05 F1 | 	add	fp, #20
28b9c     A7 12 02 F6 | 	mov	arg01, fp
28ba0     14 4E 85 F1 | 	sub	fp, #20
28ba4     0A 14 06 F6 | 	mov	arg02, #10
28ba8     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28bac     0C 4E 05 F1 | 	add	fp, #12
28bb0     A7 00 48 FC | 	wrbyte	#0, fp
28bb4     0C 4E 85 F1 | 	sub	fp, #12
28bb8     00 12 06 F6 | 	mov	arg01, #0
28bbc     00 14 06 F6 | 	mov	arg02, #0
28bc0     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28bc4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
28bc8     01 18 0E F2 | 	cmp	arg04, #1 wz
28bcc     B8 03 90 5D |  if_ne	jmp	#LR__4137
28bd0     08 12 06 F6 | 	mov	arg01, #8
28bd4     AA 15 06 F6 | 	mov	arg02, #426
28bd8     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28bdc     FD FA E1 F8 | 	getbyte	result1, result1, #0
28be0     01 FA 0D F2 | 	cmp	result1, #1 wz
28be4     98 01 90 5D |  if_ne	jmp	#LR__4123
28be8     14 4E 05 F1 | 	add	fp, #20
28bec     A7 12 02 F6 | 	mov	arg01, fp
28bf0     14 4E 85 F1 | 	sub	fp, #20
28bf4     04 14 06 F6 | 	mov	arg02, #4
28bf8     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28bfc     16 4E 05 F1 | 	add	fp, #22
28c00     A7 2C C2 FA | 	rdbyte	local04, fp
28c04     16 4E 85 F1 | 	sub	fp, #22
28c08     01 2C 0E F2 | 	cmp	local04, #1 wz
28c0c     17 4E 05 A1 |  if_e	add	fp, #23
28c10     A7 2A C2 AA |  if_e	rdbyte	local03, fp
28c14     17 4E 85 A1 |  if_e	sub	fp, #23
28c18     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
28c1c     68 03 90 5D |  if_ne	jmp	#LR__4136
28c20                 | ' 				for (tmr = 1000; tmr; tmr--) {
28c20     18 4E 05 F1 | 	add	fp, #24
28c24     01 00 80 FF 
28c28     A7 D0 6B FC | 	wrlong	##1000, fp
28c2c     18 4E 85 F1 | 	sub	fp, #24
28c30                 | LR__4120
28c30     18 4E 05 F1 | 	add	fp, #24
28c34     A7 26 0A FB | 	rdlong	local01, fp wz
28c38     18 4E 85 F1 | 	sub	fp, #24
28c3c     3C 00 90 AD |  if_e	jmp	#LR__4121
28c40     A9 12 06 F6 | 	mov	arg01, #169
28c44     1E 14 C6 F9 | 	decod	arg02, #30
28c48     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28c4c     FD 2C 02 F6 | 	mov	local04, result1
28c50     07 2C 4E F7 | 	zerox	local04, #7 wz
28c54     24 00 90 AD |  if_e	jmp	#LR__4121
28c58     01 00 00 FF 
28c5c     E8 13 06 F6 | 	mov	arg01, ##1000
28c60     10 93 BF FD | 	call	#__system___waitus
28c64     18 4E 05 F1 | 	add	fp, #24
28c68     A7 2C 02 FB | 	rdlong	local04, fp
28c6c     01 2C 86 F1 | 	sub	local04, #1
28c70     A7 2C 62 FC | 	wrlong	local04, fp
28c74     18 4E 85 F1 | 	sub	fp, #24
28c78     B4 FF 9F FD | 	jmp	#LR__4120
28c7c                 | LR__4121
28c7c     18 4E 05 F1 | 	add	fp, #24
28c80     A7 2C 0A FB | 	rdlong	local04, fp wz
28c84     18 4E 85 F1 | 	sub	fp, #24
28c88     4C 00 90 AD |  if_e	jmp	#LR__4122
28c8c     3A 12 06 F6 | 	mov	arg01, #58
28c90     00 14 06 F6 | 	mov	arg02, #0
28c94     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28c98     FD 2A 02 F6 | 	mov	local03, result1
28c9c     07 2A 4E F7 | 	zerox	local03, #7 wz
28ca0     34 00 90 5D |  if_ne	jmp	#LR__4122
28ca4     14 4E 05 F1 | 	add	fp, #20
28ca8     A7 12 02 F6 | 	mov	arg01, fp
28cac     14 4E 85 F1 | 	sub	fp, #20
28cb0     04 14 06 F6 | 	mov	arg02, #4
28cb4     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28cb8     14 4E 05 F1 | 	add	fp, #20
28cbc     A7 26 C2 FA | 	rdbyte	local01, fp
28cc0     40 26 CE F7 | 	test	local01, #64 wz
28cc4     0C 2C 06 56 |  if_ne	mov	local04, #12
28cc8     04 2C 06 A6 |  if_e	mov	local04, #4
28ccc     08 4E 85 F1 | 	sub	fp, #8
28cd0     A7 2C 42 FC | 	wrbyte	local04, fp
28cd4     0C 4E 85 F1 | 	sub	fp, #12
28cd8                 | LR__4122
28cd8     14 2C 06 FB | 	rdlong	local04, #20
28cdc     18 4E 05 F1 | 	add	fp, #24
28ce0     A7 2C 62 FC | 	wrlong	local04, fp
28ce4     0C 4E 05 F1 | 	add	fp, #12
28ce8     A7 2C 02 FB | 	rdlong	local04, fp
28cec     1B 2C 26 F4 | 	bith	local04, #27
28cf0     A7 2C 62 FC | 	wrlong	local04, fp
28cf4     0C 4E 85 F1 | 	sub	fp, #12
28cf8     A7 2C 02 FB | 	rdlong	local04, fp
28cfc     18 4E 85 F1 | 	sub	fp, #24
28d00     68 78 04 FF 
28d04     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
28d08     1C 4E 05 C1 |  if_b	add	fp, #28
28d0c     00 01 80 CF 
28d10     A7 08 68 CC |  if_b	wrlong	##131076, fp
28d14     1C 4E 85 C1 |  if_b	sub	fp, #28
28d18     6C 02 90 CD |  if_b	jmp	#LR__4136
28d1c     18 4E 05 F1 | 	add	fp, #24
28d20     A7 2C 02 FB | 	rdlong	local04, fp
28d24     18 4E 85 F1 | 	sub	fp, #24
28d28     E1 F5 05 FF 
28d2c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
28d30     1C 4E 05 C1 |  if_b	add	fp, #28
28d34     00 01 80 CF 
28d38     A7 0A 68 CC |  if_b	wrlong	##131077, fp
28d3c     1C 4E 85 C1 |  if_b	sub	fp, #28
28d40     44 02 90 CD |  if_b	jmp	#LR__4136
28d44     18 4E 05 F1 | 	add	fp, #24
28d48     A7 2C 02 FB | 	rdlong	local04, fp
28d4c     18 4E 85 F1 | 	sub	fp, #24
28d50     3B 58 08 FF 
28d54     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
28d58     1C 4E 05 C1 |  if_b	add	fp, #28
28d5c     00 01 80 CF 
28d60     A7 0C 68 CC |  if_b	wrlong	##131078, fp
28d64     1C 4E 85 C1 |  if_b	sub	fp, #28
28d68     1C 02 90 CD |  if_b	jmp	#LR__4136
28d6c     1C 4E 05 F1 | 	add	fp, #28
28d70     80 01 80 FF 
28d74     A7 10 68 FC | 	wrlong	##196616, fp
28d78     1C 4E 85 F1 | 	sub	fp, #28
28d7c     08 02 90 FD | 	jmp	#LR__4136
28d80                 | LR__4123
28d80     A9 12 06 F6 | 	mov	arg01, #169
28d84     00 14 06 F6 | 	mov	arg02, #0
28d88     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28d8c     FD 2C E2 F8 | 	getbyte	local04, result1, #0
28d90     02 2C 16 F2 | 	cmp	local04, #2 wc
28d94     18 00 90 3D |  if_ae	jmp	#LR__4124
28d98     0C 4E 05 F1 | 	add	fp, #12
28d9c     A7 04 48 FC | 	wrbyte	#2, fp
28da0     04 4E 05 F1 | 	add	fp, #4
28da4     A7 52 49 FC | 	wrbyte	#169, fp
28da8     10 4E 85 F1 | 	sub	fp, #16
28dac     14 00 90 FD | 	jmp	#LR__4125
28db0                 | LR__4124
28db0     0C 4E 05 F1 | 	add	fp, #12
28db4     A7 02 48 FC | 	wrbyte	#1, fp
28db8     04 4E 05 F1 | 	add	fp, #4
28dbc     A7 02 48 FC | 	wrbyte	#1, fp
28dc0     10 4E 85 F1 | 	sub	fp, #16
28dc4                 | LR__4125
28dc4                 | ' 				ty =  0x01 ; cmd =  (1) ;
28dc4                 | ' 			}
28dc4                 | ' 			for (tmr = 1000; tmr; tmr--) {
28dc4     18 4E 05 F1 | 	add	fp, #24
28dc8     01 00 80 FF 
28dcc     A7 D0 6B FC | 	wrlong	##1000, fp
28dd0     18 4E 85 F1 | 	sub	fp, #24
28dd4                 | LR__4126
28dd4     18 4E 05 F1 | 	add	fp, #24
28dd8     A7 2A 0A FB | 	rdlong	local03, fp wz
28ddc     18 4E 85 F1 | 	sub	fp, #24
28de0     44 00 90 AD |  if_e	jmp	#LR__4127
28de4     10 4E 05 F1 | 	add	fp, #16
28de8     A7 12 C2 FA | 	rdbyte	arg01, fp
28dec     10 4E 85 F1 | 	sub	fp, #16
28df0     00 14 06 F6 | 	mov	arg02, #0
28df4     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28df8     FD 2C 02 F6 | 	mov	local04, result1
28dfc     07 2C 4E F7 | 	zerox	local04, #7 wz
28e00     24 00 90 AD |  if_e	jmp	#LR__4127
28e04     01 00 00 FF 
28e08     E8 13 06 F6 | 	mov	arg01, ##1000
28e0c     64 91 BF FD | 	call	#__system___waitus
28e10     18 4E 05 F1 | 	add	fp, #24
28e14     A7 2C 02 FB | 	rdlong	local04, fp
28e18     01 2C 86 F1 | 	sub	local04, #1
28e1c     A7 2C 62 FC | 	wrlong	local04, fp
28e20     18 4E 85 F1 | 	sub	fp, #24
28e24     AC FF 9F FD | 	jmp	#LR__4126
28e28                 | LR__4127
28e28     18 4E 05 F1 | 	add	fp, #24
28e2c     A7 2C 0A FB | 	rdlong	local04, fp wz
28e30     18 4E 85 F1 | 	sub	fp, #24
28e34     14 00 90 AD |  if_e	jmp	#LR__4128
28e38     10 12 06 F6 | 	mov	arg01, #16
28e3c     09 14 C6 F9 | 	decod	arg02, #9
28e40     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28e44     07 FA 4D F7 | 	zerox	result1, #7 wz
28e48     0C 00 90 AD |  if_e	jmp	#LR__4129
28e4c                 | LR__4128
28e4c     0C 4E 05 F1 | 	add	fp, #12
28e50     A7 00 48 FC | 	wrbyte	#0, fp
28e54     0C 4E 85 F1 | 	sub	fp, #12
28e58                 | LR__4129
28e58     14 2C 06 FB | 	rdlong	local04, #20
28e5c     18 4E 05 F1 | 	add	fp, #24
28e60     A7 2C 62 FC | 	wrlong	local04, fp
28e64     18 4E 85 F1 | 	sub	fp, #24
28e68     F0 FA 02 FF 
28e6c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
28e70     18 00 90 3D |  if_ae	jmp	#LR__4130
28e74     24 4E 05 F1 | 	add	fp, #36
28e78     A7 2C 02 FB | 	rdlong	local04, fp
28e7c     1B 2C 26 F4 | 	bith	local04, #27
28e80     A7 2C 62 FC | 	wrlong	local04, fp
28e84     24 4E 85 F1 | 	sub	fp, #36
28e88     2C 00 90 FD | 	jmp	#LR__4131
28e8c                 | LR__4130
28e8c     18 4E 05 F1 | 	add	fp, #24
28e90     A7 2C 02 FB | 	rdlong	local04, fp
28e94     18 4E 85 F1 | 	sub	fp, #24
28e98     E1 F5 05 FF 
28e9c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
28ea0     24 4E 05 C1 |  if_b	add	fp, #36
28ea4     A7 2C 02 CB |  if_b	rdlong	local04, fp
28ea8     80 00 04 CF 
28eac     00 2C 46 C5 |  if_b	or	local04, ##134283264
28eb0     A7 2C 62 CC |  if_b	wrlong	local04, fp
28eb4     24 4E 85 C1 |  if_b	sub	fp, #36
28eb8                 | LR__4131
28eb8     18 4E 05 F1 | 	add	fp, #24
28ebc     A7 2C 02 FB | 	rdlong	local04, fp
28ec0     18 4E 85 F1 | 	sub	fp, #24
28ec4     F0 FA 02 FF 
28ec8     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
28ecc     1C 4E 05 C1 |  if_b	add	fp, #28
28ed0     00 01 80 CF 
28ed4     A7 08 68 CC |  if_b	wrlong	##131076, fp
28ed8     1C 4E 85 C1 |  if_b	sub	fp, #28
28edc     A8 00 90 CD |  if_b	jmp	#LR__4135
28ee0     18 4E 05 F1 | 	add	fp, #24
28ee4     A7 2C 02 FB | 	rdlong	local04, fp
28ee8     18 4E 85 F1 | 	sub	fp, #24
28eec     68 78 04 FF 
28ef0     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
28ef4     1C 4E 05 C1 |  if_b	add	fp, #28
28ef8     80 01 80 CF 
28efc     A7 0C 68 CC |  if_b	wrlong	##196614, fp
28f00     1C 4E 85 C1 |  if_b	sub	fp, #28
28f04     80 00 90 CD |  if_b	jmp	#LR__4134
28f08     18 4E 05 F1 | 	add	fp, #24
28f0c     A7 2C 02 FB | 	rdlong	local04, fp
28f10     18 4E 85 F1 | 	sub	fp, #24
28f14     E1 F5 05 FF 
28f18     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
28f1c     1C 4E 05 C1 |  if_b	add	fp, #28
28f20     00 02 80 CF 
28f24     A7 10 68 CC |  if_b	wrlong	##262152, fp
28f28     1C 4E 85 C1 |  if_b	sub	fp, #28
28f2c     58 00 90 CD |  if_b	jmp	#LR__4133
28f30     18 4E 05 F1 | 	add	fp, #24
28f34     A7 2C 02 FB | 	rdlong	local04, fp
28f38     18 4E 85 F1 | 	sub	fp, #24
28f3c     59 73 07 FF 
28f40     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
28f44     1C 4E 05 C1 |  if_b	add	fp, #28
28f48     80 02 80 CF 
28f4c     A7 14 68 CC |  if_b	wrlong	##327690, fp
28f50     1C 4E 85 C1 |  if_b	sub	fp, #28
28f54     30 00 90 CD |  if_b	jmp	#LR__4132
28f58     18 4E 05 F1 | 	add	fp, #24
28f5c     A7 2C 02 FB | 	rdlong	local04, fp
28f60     18 4E 85 F1 | 	sub	fp, #24
28f64     D1 F0 08 FF 
28f68     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
28f6c     1C 4E 05 C1 |  if_b	add	fp, #28
28f70     00 03 80 CF 
28f74     A7 18 68 CC |  if_b	wrlong	##393228, fp
28f78     1C 4E 85 F3 | 	sumc	fp, #28
28f7c     80 03 80 3F 
28f80     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
28f84     1C 4E 85 31 |  if_ae	sub	fp, #28
28f88                 | LR__4132
28f88                 | LR__4133
28f88                 | LR__4134
28f88                 | LR__4135
28f88                 | LR__4136
28f88                 | LR__4137
28f88     0C 4E 05 F1 | 	add	fp, #12
28f8c     A7 2C C2 FA | 	rdbyte	local04, fp
28f90     01 00 00 FF 
28f94     21 E4 05 F1 | 	add	objptr, ##545
28f98     F2 2C 42 FC | 	wrbyte	local04, objptr
28f9c     A7 26 CA FA | 	rdbyte	local01, fp wz
28fa0     00 2C 06 56 |  if_ne	mov	local04, #0
28fa4     01 2C 06 A6 |  if_e	mov	local04, #1
28fa8     20 4E 05 F1 | 	add	fp, #32
28fac     A7 2C 42 FC | 	wrbyte	local04, fp
28fb0     A7 2C C2 FA | 	rdbyte	local04, fp
28fb4     2C 4E 85 F1 | 	sub	fp, #44
28fb8     01 E4 85 F1 | 	sub	objptr, #1
28fbc     F2 2C 42 FC | 	wrbyte	local04, objptr
28fc0     01 00 00 FF 
28fc4     20 E4 85 F1 | 	sub	objptr, ##544
28fc8     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1167
28fcc     34 4E 05 F1 | 	add	fp, #52
28fd0     A7 12 02 FB | 	rdlong	arg01, fp
28fd4     18 4E 85 F1 | 	sub	fp, #24
28fd8     A7 14 02 FB | 	rdlong	arg02, fp
28fdc     09 15 12 FC | 	wxpin	arg02, arg01
28fe0     1C 4E 05 F1 | 	add	fp, #28
28fe4     A7 12 02 FB | 	rdlong	arg01, fp
28fe8     14 4E 85 F1 | 	sub	fp, #20
28fec     A7 14 02 FB | 	rdlong	arg02, fp
28ff0     09 15 02 FC | 	wrpin	arg02, arg01
28ff4                 | ' 
28ff4                 | ' 		}
28ff4                 | ' 	}
28ff4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28ff4                 | ' 	CardType = ty;
28ff4                 | ' 	s = ty ? 0 :  0x01 ;
28ff4                 | ' 	Stat = s;
28ff4                 | ' 
28ff4                 | ' 	deselect();
28ff4                 | ' 
28ff4                 | ' 
28ff4                 | ' 	_wxpin( PIN_CLK, ck_div );
28ff4                 | ' 	_wrpin( PIN_DI, spm_tx );
28ff4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28ff4                 | ' 	return s;
28ff4     08 4E 05 F1 | 	add	fp, #8
28ff8     A7 FA C1 FA | 	rdbyte	result1, fp
28ffc     2C 4E 85 F1 | 	sub	fp, #44
29000                 | LR__4138
29000     A7 F0 03 F6 | 	mov	ptra, fp
29004     B2 00 A0 FD | 	call	#popregs_
29008                 | _fatfs_cc_disk_initialize_ret
29008     2D 00 64 FD | 	ret
2900c                 | 
2900c                 | _fatfs_cc_disk_read
2900c     05 4A 05 F6 | 	mov	COUNT_, #5
29010     A8 00 A0 FD | 	call	#pushregs_
29014     0A 27 02 F6 | 	mov	local01, arg02
29018     0B 29 02 F6 | 	mov	local02, arg03
2901c     0C 2B 02 F6 | 	mov	local03, arg04
29020     00 12 0E F2 | 	cmp	arg01, #0 wz
29024     01 FA 05 56 |  if_ne	mov	result1, #1
29028                 | ' 
29028                 | ' 	return Stat;
29028     01 00 00 AF 
2902c     20 E4 05 A1 |  if_e	add	objptr, ##544
29030     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29034     01 00 00 AF 
29038     20 E4 85 A1 |  if_e	sub	objptr, ##544
2903c     FD FA E1 F8 | 	getbyte	result1, result1, #0
29040     01 FA CD F7 | 	test	result1, #1 wz
29044     03 FA 05 56 |  if_ne	mov	result1, #3
29048     84 00 90 5D |  if_ne	jmp	#LR__4142
2904c     01 00 00 FF 
29050     21 E4 05 F1 | 	add	objptr, ##545
29054     F2 2C C2 FA | 	rdbyte	local04, objptr
29058     01 00 00 FF 
2905c     21 E4 85 F1 | 	sub	objptr, ##545
29060     08 2C CE F7 | 	test	local04, #8 wz
29064     09 28 66 A0 |  if_e	shl	local02, #9
29068     02 2A 16 F2 | 	cmp	local03, #2 wc
2906c     12 2C 06 36 |  if_ae	mov	local04, #18
29070     11 2C 06 C6 |  if_b	mov	local04, #17
29074     14 15 02 F6 | 	mov	arg02, local02
29078     16 13 02 F6 | 	mov	arg01, local04
2907c     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1181
29080     FD 2E 02 F6 | 	mov	local05, result1
29084     07 2E 4E F7 | 	zerox	local05, #7 wz
29088     30 00 90 5D |  if_ne	jmp	#LR__4141
2908c                 | ' 		do {
2908c                 | LR__4140
2908c     13 13 02 F6 | 	mov	arg01, local01
29090     09 14 C6 F9 | 	decod	arg02, #9
29094     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1175
29098     00 FA 0D F2 | 	cmp	result1, #0 wz
2909c     01 00 00 5F 
290a0     00 26 06 51 |  if_ne	add	local01, ##512
290a4     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4140
290a8     16 2D E2 F8 | 	getbyte	local04, local04, #0
290ac     12 2C 0E F2 | 	cmp	local04, #18 wz
290b0     0C 12 06 A6 |  if_e	mov	arg01, #12
290b4     00 14 06 A6 |  if_e	mov	arg02, #0
290b8     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1181
290bc                 | LR__4141
290bc     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1167
290c0                 | ' 	}
290c0                 | ' 	deselect();
290c0                 | ' 
290c0                 | ' 	return count ? RES_ERROR : RES_OK;
290c0     00 2A 0E F2 | 	cmp	local03, #0 wz
290c4     01 2E 06 56 |  if_ne	mov	local05, #1
290c8     00 2E 06 A6 |  if_e	mov	local05, #0
290cc     17 FB 01 F6 | 	mov	result1, local05
290d0                 | LR__4142
290d0     A7 F0 03 F6 | 	mov	ptra, fp
290d4     B2 00 A0 FD | 	call	#popregs_
290d8                 | _fatfs_cc_disk_read_ret
290d8     2D 00 64 FD | 	ret
290dc                 | 
290dc                 | _fatfs_cc_disk_write
290dc     04 4A 05 F6 | 	mov	COUNT_, #4
290e0     A8 00 A0 FD | 	call	#pushregs_
290e4     0A 27 02 F6 | 	mov	local01, arg02
290e8     0C 29 02 F6 | 	mov	local02, arg04
290ec     0B 2B 02 F6 | 	mov	local03, arg03
290f0     00 12 0E F2 | 	cmp	arg01, #0 wz
290f4     01 FA 05 56 |  if_ne	mov	result1, #1
290f8                 | ' 
290f8                 | ' 	return Stat;
290f8     01 00 00 AF 
290fc     20 E4 05 A1 |  if_e	add	objptr, ##544
29100     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29104     01 00 00 AF 
29108     20 E4 85 A1 |  if_e	sub	objptr, ##544
2910c     FD FA E1 F8 | 	getbyte	result1, result1, #0
29110     01 FA CD F7 | 	test	result1, #1 wz
29114     03 FA 05 56 |  if_ne	mov	result1, #3
29118     D4 00 90 5D |  if_ne	jmp	#LR__4154
2911c     01 00 00 FF 
29120     21 E4 05 F1 | 	add	objptr, ##545
29124     F2 16 C2 FA | 	rdbyte	arg03, objptr
29128     01 00 00 FF 
2912c     21 E4 85 F1 | 	sub	objptr, ##545
29130     08 16 CE F7 | 	test	arg03, #8 wz
29134     09 2A 66 A0 |  if_e	shl	local03, #9
29138     01 28 0E F2 | 	cmp	local02, #1 wz
2913c     30 00 90 5D |  if_ne	jmp	#LR__4150
29140     18 12 06 F6 | 	mov	arg01, #24
29144     15 15 02 F6 | 	mov	arg02, local03
29148     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1181
2914c     FD 2C 02 F6 | 	mov	local04, result1
29150     07 2C 4E F7 | 	zerox	local04, #7 wz
29154     84 00 90 5D |  if_ne	jmp	#LR__4153
29158     13 13 02 F6 | 	mov	arg01, local01
2915c     FE 14 06 F6 | 	mov	arg02, #254
29160     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1177
29164     00 FA 0D F2 | 	cmp	result1, #0 wz
29168     00 28 06 56 |  if_ne	mov	local02, #0
2916c     6C 00 90 FD | 	jmp	#LR__4153
29170                 | LR__4150
29170     01 00 00 FF 
29174     21 E4 05 F1 | 	add	objptr, ##545
29178     F2 2C C2 FA | 	rdbyte	local04, objptr
2917c     01 00 00 FF 
29180     21 E4 85 F1 | 	sub	objptr, ##545
29184     06 2C CE F7 | 	test	local04, #6 wz
29188     97 12 06 56 |  if_ne	mov	arg01, #151
2918c     14 15 02 56 |  if_ne	mov	arg02, local02
29190     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1181
29194     15 15 02 F6 | 	mov	arg02, local03
29198     19 12 06 F6 | 	mov	arg01, #25
2919c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1181
291a0     FD 2C 02 F6 | 	mov	local04, result1
291a4     07 2C 4E F7 | 	zerox	local04, #7 wz
291a8     30 00 90 5D |  if_ne	jmp	#LR__4152
291ac                 | ' 			do {
291ac                 | LR__4151
291ac     13 13 02 F6 | 	mov	arg01, local01
291b0     FC 14 06 F6 | 	mov	arg02, #252
291b4     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1177
291b8     00 FA 0D F2 | 	cmp	result1, #0 wz
291bc     01 00 00 5F 
291c0     00 26 06 51 |  if_ne	add	local01, ##512
291c4     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4151
291c8     00 12 06 F6 | 	mov	arg01, #0
291cc     FD 14 06 F6 | 	mov	arg02, #253
291d0     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1177
291d4     00 FA 0D F2 | 	cmp	result1, #0 wz
291d8     01 28 06 A6 |  if_e	mov	local02, #1
291dc                 | LR__4152
291dc                 | LR__4153
291dc     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1167
291e0                 | ' 				count = 1;
291e0                 | ' 		}
291e0                 | ' 	}
291e0                 | ' 	deselect();
291e0                 | ' 
291e0                 | ' 	return count ? RES_ERROR : RES_OK;
291e0     00 28 0E F2 | 	cmp	local02, #0 wz
291e4     01 2C 06 56 |  if_ne	mov	local04, #1
291e8     00 2C 06 A6 |  if_e	mov	local04, #0
291ec     16 FB 01 F6 | 	mov	result1, local04
291f0                 | LR__4154
291f0     A7 F0 03 F6 | 	mov	ptra, fp
291f4     B2 00 A0 FD | 	call	#popregs_
291f8                 | _fatfs_cc_disk_write_ret
291f8     2D 00 64 FD | 	ret
291fc                 | 
291fc                 | _fatfs_cc_disk_ioctl
291fc     01 4A 05 F6 | 	mov	COUNT_, #1
29200     A8 00 A0 FD | 	call	#pushregs_
29204     30 F0 07 F1 | 	add	ptra, #48
29208     04 4E 05 F1 | 	add	fp, #4
2920c     A7 12 42 FC | 	wrbyte	arg01, fp
29210     04 4E 05 F1 | 	add	fp, #4
29214     A7 14 42 FC | 	wrbyte	arg02, fp
29218     04 4E 05 F1 | 	add	fp, #4
2921c     A7 16 62 FC | 	wrlong	arg03, fp
29220     08 4E 85 F1 | 	sub	fp, #8
29224     A7 12 CA FA | 	rdbyte	arg01, fp wz
29228     04 4E 85 F1 | 	sub	fp, #4
2922c     01 FA 05 56 |  if_ne	mov	result1, #1
29230                 | ' 
29230                 | ' 	return Stat;
29230     01 00 00 AF 
29234     20 E4 05 A1 |  if_e	add	objptr, ##544
29238     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2923c     01 00 00 AF 
29240     20 E4 85 A1 |  if_e	sub	objptr, ##544
29244     FD FA E1 F8 | 	getbyte	result1, result1, #0
29248     01 FA CD F7 | 	test	result1, #1 wz
2924c     03 FA 05 56 |  if_ne	mov	result1, #3
29250     E4 01 90 5D |  if_ne	jmp	#LR__4168
29254     10 4E 05 F1 | 	add	fp, #16
29258     A7 02 68 FC | 	wrlong	#1, fp
2925c                 | ' 
2925c                 | ' 	res = RES_ERROR;
2925c                 | ' 	switch (ctrl) {
2925c     08 4E 85 F1 | 	sub	fp, #8
29260     A7 26 C2 FA | 	rdbyte	local01, fp
29264     08 4E 85 F1 | 	sub	fp, #8
29268     04 26 26 F3 | 	fle	local01, #4
2926c     30 26 62 FD | 	jmprel	local01
29270                 | LR__4160
29270     10 00 90 FD | 	jmp	#LR__4161
29274     24 00 90 FD | 	jmp	#LR__4162
29278     A0 01 90 FD | 	jmp	#LR__4166
2927c     80 01 90 FD | 	jmp	#LR__4165
29280     98 01 90 FD | 	jmp	#LR__4166
29284                 | LR__4161
29284     B4 79 B0 FD | 	call	#_fatfs_cc_select_1171
29288     00 FA 0D F2 | 	cmp	result1, #0 wz
2928c     10 4E 05 51 |  if_ne	add	fp, #16
29290     A7 00 68 5C |  if_ne	wrlong	#0, fp
29294     10 4E 85 51 |  if_ne	sub	fp, #16
29298                 | ' 			break;
29298     8C 01 90 FD | 	jmp	#LR__4167
2929c                 | LR__4162
2929c     09 12 06 F6 | 	mov	arg01, #9
292a0     00 14 06 F6 | 	mov	arg02, #0
292a4     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1181
292a8     FD 26 02 F6 | 	mov	local01, result1
292ac     07 26 4E F7 | 	zerox	local01, #7 wz
292b0     74 01 90 5D |  if_ne	jmp	#LR__4167
292b4     18 4E 05 F1 | 	add	fp, #24
292b8     A7 12 02 F6 | 	mov	arg01, fp
292bc     18 4E 85 F1 | 	sub	fp, #24
292c0     10 14 06 F6 | 	mov	arg02, #16
292c4     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1175
292c8     00 FA 0D F2 | 	cmp	result1, #0 wz
292cc     58 01 90 AD |  if_e	jmp	#LR__4167
292d0     18 4E 05 F1 | 	add	fp, #24
292d4     A7 26 C2 FA | 	rdbyte	local01, fp
292d8     18 4E 85 F1 | 	sub	fp, #24
292dc     06 26 46 F0 | 	shr	local01, #6
292e0     01 26 0E F2 | 	cmp	local01, #1 wz
292e4     5C 00 90 5D |  if_ne	jmp	#LR__4163
292e8     21 4E 05 F1 | 	add	fp, #33
292ec     A7 26 C2 FA | 	rdbyte	local01, fp
292f0     01 4E 85 F1 | 	sub	fp, #1
292f4     A7 FA C1 FA | 	rdbyte	result1, fp
292f8     FD FA 31 F9 | 	getword	result1, result1, #0
292fc     08 FA 65 F0 | 	shl	result1, #8
29300     FD 26 02 F1 | 	add	local01, result1
29304     01 4E 85 F1 | 	sub	fp, #1
29308     A7 FA C1 FA | 	rdbyte	result1, fp
2930c     3F FA 05 F5 | 	and	result1, #63
29310     10 FA 65 F0 | 	shl	result1, #16
29314     FD 26 02 F1 | 	add	local01, result1
29318     01 26 06 F1 | 	add	local01, #1
2931c     09 4E 05 F1 | 	add	fp, #9
29320     A7 26 62 FC | 	wrlong	local01, fp
29324     1C 4E 85 F1 | 	sub	fp, #28
29328     A7 26 02 FB | 	rdlong	local01, fp
2932c     1C 4E 05 F1 | 	add	fp, #28
29330     A7 FA 01 FB | 	rdlong	result1, fp
29334     28 4E 85 F1 | 	sub	fp, #40
29338     0A FA 65 F0 | 	shl	result1, #10
2933c     13 FB 61 FC | 	wrlong	result1, local01
29340     AC 00 90 FD | 	jmp	#LR__4164
29344                 | LR__4163
29344     1D 4E 05 F1 | 	add	fp, #29
29348     A7 26 C2 FA | 	rdbyte	local01, fp
2934c     13 27 42 F8 | 	getnib	local01, local01, #0
29350     05 4E 05 F1 | 	add	fp, #5
29354     A7 FA C1 FA | 	rdbyte	result1, fp
29358     80 FA 05 F5 | 	and	result1, #128
2935c     07 FA C5 F0 | 	sar	result1, #7
29360     FD 26 02 F1 | 	add	local01, result1
29364     01 4E 85 F1 | 	sub	fp, #1
29368     A7 FA C1 FA | 	rdbyte	result1, fp
2936c     03 FA 05 F5 | 	and	result1, #3
29370     01 FA 65 F0 | 	shl	result1, #1
29374     FD 26 02 F1 | 	add	local01, result1
29378     02 26 06 F1 | 	add	local01, #2
2937c     0D 4E 85 F1 | 	sub	fp, #13
29380     A7 26 42 FC | 	wrbyte	local01, fp
29384     0C 4E 05 F1 | 	add	fp, #12
29388     A7 26 C2 FA | 	rdbyte	local01, fp
2938c     06 26 46 F0 | 	shr	local01, #6
29390     01 4E 85 F1 | 	sub	fp, #1
29394     A7 FA C1 FA | 	rdbyte	result1, fp
29398     FD FA 31 F9 | 	getword	result1, result1, #0
2939c     02 FA 65 F0 | 	shl	result1, #2
293a0     FD 26 02 F1 | 	add	local01, result1
293a4     01 4E 85 F1 | 	sub	fp, #1
293a8     A7 FA C1 FA | 	rdbyte	result1, fp
293ac     03 FA 05 F5 | 	and	result1, #3
293b0     FD FA 31 F9 | 	getword	result1, result1, #0
293b4     0A FA 65 F0 | 	shl	result1, #10
293b8     FD 26 02 F1 | 	add	local01, result1
293bc     01 26 06 F1 | 	add	local01, #1
293c0     0A 4E 05 F1 | 	add	fp, #10
293c4     A7 26 62 FC | 	wrlong	local01, fp
293c8     1C 4E 85 F1 | 	sub	fp, #28
293cc     A7 26 02 FB | 	rdlong	local01, fp
293d0     1C 4E 05 F1 | 	add	fp, #28
293d4     A7 FA 01 FB | 	rdlong	result1, fp
293d8     14 4E 85 F1 | 	sub	fp, #20
293dc     A7 16 C2 FA | 	rdbyte	arg03, fp
293e0     14 4E 85 F1 | 	sub	fp, #20
293e4     09 16 86 F1 | 	sub	arg03, #9
293e8     0B FB 61 F0 | 	shl	result1, arg03
293ec     13 FB 61 FC | 	wrlong	result1, local01
293f0                 | LR__4164
293f0     10 4E 05 F1 | 	add	fp, #16
293f4     A7 00 68 FC | 	wrlong	#0, fp
293f8     10 4E 85 F1 | 	sub	fp, #16
293fc                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
293fc                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
293fc                 | ' 					*(LBA_t*)buff = cs << (n - 9);
293fc                 | ' 				}
293fc                 | ' 				res = RES_OK;
293fc                 | ' 			}
293fc                 | ' 			break;
293fc     28 00 90 FD | 	jmp	#LR__4167
29400                 | LR__4165
29400     0C 4E 05 F1 | 	add	fp, #12
29404     A7 26 02 FB | 	rdlong	local01, fp
29408     13 01 69 FC | 	wrlong	#128, local01
2940c     04 4E 05 F1 | 	add	fp, #4
29410     A7 00 68 FC | 	wrlong	#0, fp
29414     10 4E 85 F1 | 	sub	fp, #16
29418                 | ' 			*(DWORD*)buff = 128;
29418                 | ' 			res = RES_OK;
29418                 | ' 			break;
29418     0C 00 90 FD | 	jmp	#LR__4167
2941c                 | LR__4166
2941c     10 4E 05 F1 | 	add	fp, #16
29420     A7 08 68 FC | 	wrlong	#4, fp
29424     10 4E 85 F1 | 	sub	fp, #16
29428                 | LR__4167
29428     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1167
2942c                 | ' 			res = RES_PARERR;
2942c                 | ' 	}
2942c                 | ' 
2942c                 | ' 	deselect();
2942c                 | ' 
2942c                 | ' 	return res;
2942c     10 4E 05 F1 | 	add	fp, #16
29430     A7 FA 01 FB | 	rdlong	result1, fp
29434     10 4E 85 F1 | 	sub	fp, #16
29438                 | LR__4168
29438     A7 F0 03 F6 | 	mov	ptra, fp
2943c     B2 00 A0 FD | 	call	#popregs_
29440                 | _fatfs_cc_disk_ioctl_ret
29440     2D 00 64 FD | 	ret
29444                 | 
29444                 | _fatfs_cc_disk_setpins
29444     00 12 0E F2 | 	cmp	arg01, #0 wz
29448     01 FA 65 56 |  if_ne	neg	result1, #1
2944c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
29450     01 00 00 FF 
29454     10 E4 05 F1 | 	add	objptr, ##528
29458     F2 14 62 FC | 	wrlong	arg02, objptr
2945c     04 E4 05 F1 | 	add	objptr, #4
29460     F2 16 62 FC | 	wrlong	arg03, objptr
29464     04 E4 05 F1 | 	add	objptr, #4
29468     F2 18 62 FC | 	wrlong	arg04, objptr
2946c     04 E4 05 F1 | 	add	objptr, #4
29470     F2 1A 62 FC | 	wrlong	arg05, objptr
29474     01 00 00 FF 
29478     1C E4 85 F1 | 	sub	objptr, ##540
2947c     00 FA 05 F6 | 	mov	result1, #0
29480                 | _fatfs_cc_disk_setpins_ret
29480     2D 00 64 FD | 	ret
29484                 | 
29484                 | _fatfs_cc_tchar2uni
29484     09 01 02 FB | 	rdlong	_var01, arg01
29488     00 03 02 F6 | 	mov	_var02, _var01
2948c     01 00 06 F1 | 	add	_var01, #1
29490     00 05 02 F6 | 	mov	_var03, _var01
29494     01 07 C2 FA | 	rdbyte	_var04, _var02
29498     80 06 CE F7 | 	test	_var04, #128 wz
2949c     E8 00 90 AD |  if_e	jmp	#LR__4177
294a0     03 09 02 F6 | 	mov	_var05, _var04
294a4     E0 08 06 F5 | 	and	_var05, #224
294a8     C0 08 0E F2 | 	cmp	_var05, #192 wz
294ac     1F 06 06 A5 |  if_e	and	_var04, #31
294b0     01 0A 06 A6 |  if_e	mov	_var06, #1
294b4     34 00 90 AD |  if_e	jmp	#LR__4171
294b8     03 09 02 F6 | 	mov	_var05, _var04
294bc     F0 08 06 F5 | 	and	_var05, #240
294c0     E0 08 0E F2 | 	cmp	_var05, #224 wz
294c4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
294c8     02 0A 06 A6 |  if_e	mov	_var06, #2
294cc     1C 00 90 AD |  if_e	jmp	#LR__4170
294d0     03 09 02 F6 | 	mov	_var05, _var04
294d4     F8 08 06 F5 | 	and	_var05, #248
294d8     F0 08 0E F2 | 	cmp	_var05, #240 wz
294dc     07 06 06 A5 |  if_e	and	_var04, #7
294e0     03 0A 06 A6 |  if_e	mov	_var06, #3
294e4                 | ' 			return 0xFFFFFFFF;
294e4     01 FA 65 56 |  if_ne	neg	result1, #1
294e8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
294ec                 | LR__4170
294ec                 | LR__4171
294ec                 | ' 		}
294ec                 | ' 		do {
294ec                 | LR__4172
294ec     02 0D C2 FA | 	rdbyte	_var07, _var03
294f0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
294f4     C0 08 06 F5 | 	and	_var05, #192
294f8     80 08 0E F2 | 	cmp	_var05, #128 wz
294fc     01 04 06 F1 | 	add	_var03, #1
29500     01 FA 65 56 |  if_ne	neg	result1, #1
29504     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
29508     06 06 66 F0 | 	shl	_var04, #6
2950c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
29510     3F 02 06 F5 | 	and	_var02, #63
29514     01 07 42 F5 | 	or	_var04, _var02
29518     F4 0B 6E FB | 	djnz	_var06, #LR__4172
2951c     80 06 16 F2 | 	cmp	_var04, #128 wc
29520     24 00 90 CD |  if_b	jmp	#LR__4174
29524     6C 00 00 FF 
29528     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2952c     0C 00 90 CD |  if_b	jmp	#LR__4173
29530     70 00 00 FF 
29534     00 06 16 F2 | 	cmp	_var04, ##57344 wc
29538     0C 00 90 CD |  if_b	jmp	#LR__4174
2953c                 | LR__4173
2953c     80 08 00 FF 
29540     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
29544     08 00 90 CD |  if_b	jmp	#LR__4175
29548                 | LR__4174
29548     01 FA 65 F6 | 	neg	result1, #1
2954c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
29550                 | LR__4175
29550     80 00 00 FF 
29554     00 06 16 F2 | 	cmp	_var04, ##65536 wc
29558     2C 00 90 CD |  if_b	jmp	#LR__4176
2955c     03 03 02 F6 | 	mov	_var02, _var04
29560     80 00 00 FF 
29564     00 02 86 F1 | 	sub	_var02, ##65536
29568     06 02 66 F0 | 	shl	_var02, #6
2956c     80 FF 01 FF 
29570     00 02 06 F5 | 	and	_var02, ##67043328
29574     6E 00 6C FF 
29578     00 08 06 F6 | 	mov	_var05, ##-671032320
2957c     01 09 42 F5 | 	or	_var05, _var02
29580     09 06 46 F7 | 	zerox	_var04, #9
29584     04 07 42 F5 | 	or	_var04, _var05
29588                 | LR__4176
29588                 | LR__4177
29588     09 05 62 FC | 	wrlong	_var03, arg01
2958c                 | ' 	}
2958c                 | ' #line 811 "ff.c"
2958c                 | ' 	*str = p;
2958c                 | ' 	return uc;
2958c     03 FB 01 F6 | 	mov	result1, _var04
29590                 | _fatfs_cc_tchar2uni_ret
29590     2D 00 64 FD | 	ret
29594                 | 
29594                 | _fatfs_cc_put_utf
29594     80 12 16 F2 | 	cmp	arg01, #128 wc
29598     18 00 90 3D |  if_ae	jmp	#LR__4180
2959c     01 16 16 F2 | 	cmp	arg03, #1 wc
295a0     00 FA 05 C6 |  if_b	mov	result1, #0
295a4     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
295a8     0A 13 42 FC | 	wrbyte	arg01, arg02
295ac                 | ' 		*buf = (TCHAR)chr;
295ac                 | ' 		return 1;
295ac     01 FA 05 F6 | 	mov	result1, #1
295b0     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
295b4                 | LR__4180
295b4     04 00 00 FF 
295b8     00 12 16 F2 | 	cmp	arg01, ##2048 wc
295bc     40 00 90 3D |  if_ae	jmp	#LR__4181
295c0     02 16 16 F2 | 	cmp	arg03, #2 wc
295c4     00 FA 05 C6 |  if_b	mov	result1, #0
295c8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
295cc     09 FB 01 F6 | 	mov	result1, arg01
295d0     06 FA 45 F0 | 	shr	result1, #6
295d4     1F FA 05 F5 | 	and	result1, #31
295d8     C0 16 06 F6 | 	mov	arg03, #192
295dc     FD 16 42 F5 | 	or	arg03, result1
295e0     0A 17 42 FC | 	wrbyte	arg03, arg02
295e4     01 14 06 F1 | 	add	arg02, #1
295e8     3F 12 06 F5 | 	and	arg01, #63
295ec     80 FA 05 F6 | 	mov	result1, #128
295f0     09 FB 41 F5 | 	or	result1, arg01
295f4     0A FB 41 FC | 	wrbyte	result1, arg02
295f8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
295f8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
295f8                 | ' 		return 2;
295f8     02 FA 05 F6 | 	mov	result1, #2
295fc     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29600                 | LR__4181
29600     80 00 00 FF 
29604     00 12 16 F2 | 	cmp	arg01, ##65536 wc
29608     70 00 90 3D |  if_ae	jmp	#LR__4184
2960c     03 16 16 F2 | 	cmp	arg03, #3 wc
29610     18 00 90 CD |  if_b	jmp	#LR__4182
29614     6C 00 00 FF 
29618     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2961c     14 00 90 CD |  if_b	jmp	#LR__4183
29620     70 00 00 FF 
29624     00 12 16 F2 | 	cmp	arg01, ##57344 wc
29628     08 00 90 3D |  if_ae	jmp	#LR__4183
2962c                 | LR__4182
2962c     00 FA 05 F6 | 	mov	result1, #0
29630     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29634                 | LR__4183
29634     09 FB 59 F8 | 	getnib	result1, arg01, #3
29638     E0 16 06 F6 | 	mov	arg03, #224
2963c     FD 16 42 F5 | 	or	arg03, result1
29640     0A 17 42 FC | 	wrbyte	arg03, arg02
29644     01 14 06 F1 | 	add	arg02, #1
29648     09 FB 01 F6 | 	mov	result1, arg01
2964c     06 FA 45 F0 | 	shr	result1, #6
29650     3F FA 05 F5 | 	and	result1, #63
29654     80 16 06 F6 | 	mov	arg03, #128
29658     FD 16 42 F5 | 	or	arg03, result1
2965c     0A 17 42 FC | 	wrbyte	arg03, arg02
29660     01 14 06 F1 | 	add	arg02, #1
29664     3F 12 06 F5 | 	and	arg01, #63
29668     80 FA 05 F6 | 	mov	result1, #128
2966c     09 FB 41 F5 | 	or	result1, arg01
29670     0A FB 41 FC | 	wrbyte	result1, arg02
29674                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
29674                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
29674                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
29674                 | ' 		return 3;
29674     03 FA 05 F6 | 	mov	result1, #3
29678     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2967c                 | LR__4184
2967c     04 16 16 F2 | 	cmp	arg03, #4 wc
29680     00 FA 05 C6 |  if_b	mov	result1, #0
29684     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
29688     09 01 02 F6 | 	mov	_var01, arg01
2968c     E0 01 06 F4 | 	bitl	_var01, #480
29690     00 00 6C FF 
29694     00 00 86 F1 | 	sub	_var01, ##-671088640
29698     06 00 46 F0 | 	shr	_var01, #6
2969c     09 13 32 F9 | 	getword	arg01, arg01, #0
296a0     6E 00 00 FF 
296a4     00 12 86 F1 | 	sub	arg01, ##56320
296a8     00 08 00 FF 
296ac     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
296b0     02 00 00 CF 
296b4     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
296b8     00 FA 05 36 |  if_ae	mov	result1, #0
296bc     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
296c0     09 01 42 F5 | 	or	_var01, arg01
296c4     80 00 00 FF 
296c8     00 00 06 F1 | 	add	_var01, ##65536
296cc     00 FB 01 F6 | 	mov	result1, _var01
296d0     12 FA 45 F0 | 	shr	result1, #18
296d4     07 FA 05 F5 | 	and	result1, #7
296d8     F0 16 06 F6 | 	mov	arg03, #240
296dc     FD 16 42 F5 | 	or	arg03, result1
296e0     0A 17 42 FC | 	wrbyte	arg03, arg02
296e4     01 14 06 F1 | 	add	arg02, #1
296e8     00 FB 01 F6 | 	mov	result1, _var01
296ec     0C FA 45 F0 | 	shr	result1, #12
296f0     3F FA 05 F5 | 	and	result1, #63
296f4     80 16 06 F6 | 	mov	arg03, #128
296f8     FD 16 42 F5 | 	or	arg03, result1
296fc     0A 17 42 FC | 	wrbyte	arg03, arg02
29700     01 14 06 F1 | 	add	arg02, #1
29704     00 FB 01 F6 | 	mov	result1, _var01
29708     06 FA 45 F0 | 	shr	result1, #6
2970c     3F FA 05 F5 | 	and	result1, #63
29710     80 16 06 F6 | 	mov	arg03, #128
29714     FD 16 42 F5 | 	or	arg03, result1
29718     0A 17 42 FC | 	wrbyte	arg03, arg02
2971c     01 14 06 F1 | 	add	arg02, #1
29720     3F 00 06 F5 | 	and	_var01, #63
29724     80 FA 05 F6 | 	mov	result1, #128
29728     00 FB 41 F5 | 	or	result1, _var01
2972c     0A FB 41 FC | 	wrbyte	result1, arg02
29730                 | ' 	chr = (hc | chr) + 0x10000;
29730                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
29730                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
29730                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
29730                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
29730                 | ' 	return 4;
29730     04 FA 05 F6 | 	mov	result1, #4
29734                 | _fatfs_cc_put_utf_ret
29734     2D 00 64 FD | 	ret
29738                 | 
29738                 | _fatfs_cc_sync_window
29738     02 4A 05 F6 | 	mov	COUNT_, #2
2973c     A8 00 A0 FD | 	call	#pushregs_
29740     09 27 02 F6 | 	mov	local01, arg01
29744     00 28 06 F6 | 	mov	local02, #0
29748     03 26 06 F1 | 	add	local01, #3
2974c     13 FB C9 FA | 	rdbyte	result1, local01 wz
29750     03 26 86 F1 | 	sub	local01, #3
29754     A4 00 90 AD |  if_e	jmp	#LR__4192
29758     01 26 06 F1 | 	add	local01, #1
2975c     13 13 C2 FA | 	rdbyte	arg01, local01
29760     33 26 06 F1 | 	add	local01, #51
29764     13 15 02 F6 | 	mov	arg02, local01
29768     04 26 86 F1 | 	sub	local01, #4
2976c     13 17 02 FB | 	rdlong	arg03, local01
29770     30 26 86 F1 | 	sub	local01, #48
29774     01 18 06 F6 | 	mov	arg04, #1
29778     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2977c     00 FA 0D F2 | 	cmp	result1, #0 wz
29780     74 00 90 5D |  if_ne	jmp	#LR__4190
29784     03 26 06 F1 | 	add	local01, #3
29788     13 01 48 FC | 	wrbyte	#0, local01
2978c     2D 26 06 F1 | 	add	local01, #45
29790     13 FB 01 FB | 	rdlong	result1, local01
29794     0C 26 86 F1 | 	sub	local01, #12
29798     13 19 02 FB | 	rdlong	arg04, local01
2979c     0C FB 81 F1 | 	sub	result1, arg04
297a0     08 26 86 F1 | 	sub	local01, #8
297a4     13 19 02 FB | 	rdlong	arg04, local01
297a8     1C 26 86 F1 | 	sub	local01, #28
297ac     0C FB 11 F2 | 	cmp	result1, arg04 wc
297b0     48 00 90 3D |  if_ae	jmp	#LR__4191
297b4     02 26 06 F1 | 	add	local01, #2
297b8     13 19 C2 FA | 	rdbyte	arg04, local01
297bc     02 26 86 F1 | 	sub	local01, #2
297c0     02 18 0E F2 | 	cmp	arg04, #2 wz
297c4     34 00 90 5D |  if_ne	jmp	#LR__4191
297c8     01 26 06 F1 | 	add	local01, #1
297cc     13 13 C2 FA | 	rdbyte	arg01, local01
297d0     33 26 06 F1 | 	add	local01, #51
297d4     13 15 02 F6 | 	mov	arg02, local01
297d8     04 26 86 F1 | 	sub	local01, #4
297dc     13 17 02 FB | 	rdlong	arg03, local01
297e0     14 26 86 F1 | 	sub	local01, #20
297e4     13 27 02 FB | 	rdlong	local01, local01
297e8     13 17 02 F1 | 	add	arg03, local01
297ec     01 18 06 F6 | 	mov	arg04, #1
297f0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
297f4     04 00 90 FD | 	jmp	#LR__4191
297f8                 | LR__4190
297f8     01 28 06 F6 | 	mov	local02, #1
297fc                 | LR__4191
297fc                 | LR__4192
297fc                 | ' 			res = FR_DISK_ERR;
297fc                 | ' 		}
297fc                 | ' 	}
297fc                 | ' 	return res;
297fc     14 FB 01 F6 | 	mov	result1, local02
29800     A7 F0 03 F6 | 	mov	ptra, fp
29804     B2 00 A0 FD | 	call	#popregs_
29808                 | _fatfs_cc_sync_window_ret
29808     2D 00 64 FD | 	ret
2980c                 | 
2980c                 | _fatfs_cc_move_window
2980c     03 4A 05 F6 | 	mov	COUNT_, #3
29810     A8 00 A0 FD | 	call	#pushregs_
29814     09 27 02 F6 | 	mov	local01, arg01
29818     0A 29 02 F6 | 	mov	local02, arg02
2981c     00 2A 06 F6 | 	mov	local03, #0
29820     30 26 06 F1 | 	add	local01, #48
29824     13 19 02 FB | 	rdlong	arg04, local01
29828     30 26 86 F1 | 	sub	local01, #48
2982c     0C 29 0A F2 | 	cmp	local02, arg04 wz
29830     40 00 90 AD |  if_e	jmp	#LR__4201
29834     13 13 02 F6 | 	mov	arg01, local01
29838     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2983c     FD 2A 0A F6 | 	mov	local03, result1 wz
29840     30 00 90 5D |  if_ne	jmp	#LR__4200
29844     01 26 06 F1 | 	add	local01, #1
29848     13 13 C2 FA | 	rdbyte	arg01, local01
2984c     33 26 06 F1 | 	add	local01, #51
29850     13 15 02 F6 | 	mov	arg02, local01
29854     14 17 02 F6 | 	mov	arg03, local02
29858     01 18 06 F6 | 	mov	arg04, #1
2985c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
29860     00 FA 0D F2 | 	cmp	result1, #0 wz
29864     01 28 66 56 |  if_ne	neg	local02, #1
29868     01 2A 06 56 |  if_ne	mov	local03, #1
2986c     04 26 86 F1 | 	sub	local01, #4
29870     13 29 62 FC | 	wrlong	local02, local01
29874                 | LR__4200
29874                 | LR__4201
29874                 | ' 				sect = (LBA_t)0 - 1;
29874                 | ' 				res = FR_DISK_ERR;
29874                 | ' 			}
29874                 | ' 			fs->winsect = sect;
29874                 | ' 		}
29874                 | ' 	}
29874                 | ' 	return res;
29874     15 FB 01 F6 | 	mov	result1, local03
29878     A7 F0 03 F6 | 	mov	ptra, fp
2987c     B2 00 A0 FD | 	call	#popregs_
29880                 | _fatfs_cc_move_window_ret
29880     2D 00 64 FD | 	ret
29884                 | 
29884                 | _fatfs_cc_sync_fs
29884     02 4A 05 F6 | 	mov	COUNT_, #2
29888     A8 00 A0 FD | 	call	#pushregs_
2988c     09 27 02 F6 | 	mov	local01, arg01
29890     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
29894     FD 28 0A F6 | 	mov	local02, result1 wz
29898     D8 00 90 5D |  if_ne	jmp	#LR__4211
2989c     13 19 C2 FA | 	rdbyte	arg04, local01
298a0     03 18 0E F2 | 	cmp	arg04, #3 wz
298a4     04 26 06 A1 |  if_e	add	local01, #4
298a8     13 19 C2 AA |  if_e	rdbyte	arg04, local01
298ac     04 26 86 A1 |  if_e	sub	local01, #4
298b0     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
298b4     A0 00 90 5D |  if_ne	jmp	#LR__4210
298b8     34 26 06 F1 | 	add	local01, #52
298bc     13 13 02 F6 | 	mov	arg01, local01
298c0     00 14 06 F6 | 	mov	arg02, #0
298c4     09 16 C6 F9 | 	decod	arg03, #9
298c8     98 00 A0 FD | 	call	#\builtin_bytefill_
298cc     13 13 02 F6 | 	mov	arg01, local01
298d0     FE 13 06 F1 | 	add	arg01, #510
298d4     55 00 80 FF 
298d8     09 AB 58 FC | 	wrword	##43605, arg01
298dc     A9 B0 A0 FF 
298e0     13 A5 68 FC | 	wrlong	##1096897106, local01
298e4     13 13 02 F6 | 	mov	arg01, local01
298e8     E4 13 06 F1 | 	add	arg01, #484
298ec     B9 A0 B0 FF 
298f0     09 E5 68 FC | 	wrlong	##1631679090, arg01
298f4     13 13 02 F6 | 	mov	arg01, local01
298f8     E8 13 06 F1 | 	add	arg01, #488
298fc     20 26 86 F1 | 	sub	local01, #32
29900     13 15 02 FB | 	rdlong	arg02, local01
29904     09 15 62 FC | 	wrlong	arg02, arg01
29908     20 26 06 F1 | 	add	local01, #32
2990c     13 13 02 F6 | 	mov	arg01, local01
29910     EC 13 06 F1 | 	add	arg01, #492
29914     24 26 86 F1 | 	sub	local01, #36
29918     13 15 02 FB | 	rdlong	arg02, local01
2991c     09 15 62 FC | 	wrlong	arg02, arg01
29920     10 26 06 F1 | 	add	local01, #16
29924     13 17 02 FB | 	rdlong	arg03, local01
29928     01 16 06 F1 | 	add	arg03, #1
2992c     10 26 06 F1 | 	add	local01, #16
29930     13 17 62 FC | 	wrlong	arg03, local01
29934     2F 26 86 F1 | 	sub	local01, #47
29938     13 13 C2 FA | 	rdbyte	arg01, local01
2993c     33 26 06 F1 | 	add	local01, #51
29940     13 15 02 F6 | 	mov	arg02, local01
29944     01 18 06 F6 | 	mov	arg04, #1
29948     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2994c     30 26 86 F1 | 	sub	local01, #48
29950     13 01 48 FC | 	wrbyte	#0, local01
29954     04 26 86 F1 | 	sub	local01, #4
29958                 | LR__4210
29958     01 26 06 F1 | 	add	local01, #1
2995c     13 13 C2 FA | 	rdbyte	arg01, local01
29960     00 14 06 F6 | 	mov	arg02, #0
29964     00 16 06 F6 | 	mov	arg03, #0
29968     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2996c     00 FA 0D F2 | 	cmp	result1, #0 wz
29970     01 28 06 56 |  if_ne	mov	local02, #1
29974                 | LR__4211
29974                 | ' 	}
29974                 | ' 
29974                 | ' 	return res;
29974     14 FB 01 F6 | 	mov	result1, local02
29978     A7 F0 03 F6 | 	mov	ptra, fp
2997c     B2 00 A0 FD | 	call	#popregs_
29980                 | _fatfs_cc_sync_fs_ret
29980     2D 00 64 FD | 	ret
29984                 | 
29984                 | _fatfs_cc_clst2sect
29984     02 14 86 F1 | 	sub	arg02, #2
29988     18 12 06 F1 | 	add	arg01, #24
2998c     09 01 02 FB | 	rdlong	_var01, arg01
29990     18 12 86 F1 | 	sub	arg01, #24
29994     02 00 86 F1 | 	sub	_var01, #2
29998     00 15 12 F2 | 	cmp	arg02, _var01 wc
2999c     00 FA 05 36 |  if_ae	mov	result1, #0
299a0     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
299a4     0A 12 06 F1 | 	add	arg01, #10
299a8     09 01 E2 FA | 	rdword	_var01, arg01
299ac     0A 01 02 FD | 	qmul	_var01, arg02
299b0                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
299b0     22 12 06 F1 | 	add	arg01, #34
299b4     09 FB 01 FB | 	rdlong	result1, arg01
299b8     18 00 62 FD | 	getqx	_var01
299bc     00 FB 01 F1 | 	add	result1, _var01
299c0                 | _fatfs_cc_clst2sect_ret
299c0     2D 00 64 FD | 	ret
299c4                 | 
299c4                 | _fatfs_cc_get_fat
299c4     07 4A 05 F6 | 	mov	COUNT_, #7
299c8     A8 00 A0 FD | 	call	#pushregs_
299cc     0A 27 02 F6 | 	mov	local01, arg02
299d0     09 29 02 FB | 	rdlong	local02, arg01
299d4     02 26 16 F2 | 	cmp	local01, #2 wc
299d8     14 00 90 CD |  if_b	jmp	#LR__4220
299dc     18 28 06 F1 | 	add	local02, #24
299e0     14 2B 02 FB | 	rdlong	local03, local02
299e4     18 28 86 F1 | 	sub	local02, #24
299e8     15 27 12 F2 | 	cmp	local01, local03 wc
299ec     08 00 90 CD |  if_b	jmp	#LR__4221
299f0                 | LR__4220
299f0     01 2C 06 F6 | 	mov	local04, #1
299f4     60 01 90 FD | 	jmp	#LR__4228
299f8                 | LR__4221
299f8     01 2C 66 F6 | 	neg	local04, #1
299fc                 | ' 		val = 0xFFFFFFFF;
299fc                 | ' 
299fc                 | ' 		switch (fs->fs_type) {
299fc     14 2F C2 FA | 	rdbyte	local05, local02
29a00     01 2E 86 F1 | 	sub	local05, #1
29a04     03 2E 26 F3 | 	fle	local05, #3
29a08     30 2E 62 FD | 	jmprel	local05
29a0c                 | LR__4222
29a0c     0C 00 90 FD | 	jmp	#LR__4223
29a10     B8 00 90 FD | 	jmp	#LR__4224
29a14     F8 00 90 FD | 	jmp	#LR__4225
29a18     38 01 90 FD | 	jmp	#LR__4226
29a1c                 | LR__4223
29a1c     13 2F 02 F6 | 	mov	local05, local01
29a20     13 13 02 F6 | 	mov	arg01, local01
29a24     01 12 46 F0 | 	shr	arg01, #1
29a28     09 2F 02 F1 | 	add	local05, arg01
29a2c     14 13 02 F6 | 	mov	arg01, local02
29a30     17 31 02 F6 | 	mov	local06, local05
29a34     09 30 46 F0 | 	shr	local06, #9
29a38     24 28 06 F1 | 	add	local02, #36
29a3c     14 15 02 FB | 	rdlong	arg02, local02
29a40     24 28 86 F1 | 	sub	local02, #36
29a44     18 15 02 F1 | 	add	arg02, local06
29a48     C0 FD BF FD | 	call	#_fatfs_cc_move_window
29a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
29a50     04 01 90 5D |  if_ne	jmp	#LR__4227
29a54     17 31 02 F6 | 	mov	local06, local05
29a58     FF 31 06 F5 | 	and	local06, #511
29a5c     34 28 06 F1 | 	add	local02, #52
29a60     14 31 02 F1 | 	add	local06, local02
29a64     18 33 C2 FA | 	rdbyte	local07, local06
29a68     34 28 86 F1 | 	sub	local02, #52
29a6c     14 13 02 F6 | 	mov	arg01, local02
29a70     01 2E 06 F1 | 	add	local05, #1
29a74     17 31 02 F6 | 	mov	local06, local05
29a78     09 30 46 F0 | 	shr	local06, #9
29a7c     24 28 06 F1 | 	add	local02, #36
29a80     14 15 02 FB | 	rdlong	arg02, local02
29a84     24 28 86 F1 | 	sub	local02, #36
29a88     18 15 02 F1 | 	add	arg02, local06
29a8c     7C FD BF FD | 	call	#_fatfs_cc_move_window
29a90     00 FA 0D F2 | 	cmp	result1, #0 wz
29a94     C0 00 90 5D |  if_ne	jmp	#LR__4227
29a98     FF 2F 06 F5 | 	and	local05, #511
29a9c     34 28 06 F1 | 	add	local02, #52
29aa0     14 2F 02 F1 | 	add	local05, local02
29aa4     17 31 C2 FA | 	rdbyte	local06, local05
29aa8     08 30 66 F0 | 	shl	local06, #8
29aac     18 33 42 F5 | 	or	local07, local06
29ab0     01 26 CE F7 | 	test	local01, #1 wz
29ab4     04 32 46 50 |  if_ne	shr	local07, #4
29ab8     19 2B 02 56 |  if_ne	mov	local03, local07
29abc     0B 32 46 A7 |  if_e	zerox	local07, #11
29ac0     19 2B 02 A6 |  if_e	mov	local03, local07
29ac4     15 2D 02 F6 | 	mov	local04, local03
29ac8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
29ac8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
29ac8                 | ' 			break;
29ac8     8C 00 90 FD | 	jmp	#LR__4227
29acc                 | LR__4224
29acc     14 13 02 F6 | 	mov	arg01, local02
29ad0     13 31 02 F6 | 	mov	local06, local01
29ad4     08 30 46 F0 | 	shr	local06, #8
29ad8     24 28 06 F1 | 	add	local02, #36
29adc     14 15 02 FB | 	rdlong	arg02, local02
29ae0     24 28 86 F1 | 	sub	local02, #36
29ae4     18 15 02 F1 | 	add	arg02, local06
29ae8     20 FD BF FD | 	call	#_fatfs_cc_move_window
29aec     00 FA 0D F2 | 	cmp	result1, #0 wz
29af0     64 00 90 5D |  if_ne	jmp	#LR__4227
29af4     34 28 06 F1 | 	add	local02, #52
29af8     01 26 66 F0 | 	shl	local01, #1
29afc     FF 27 06 F5 | 	and	local01, #511
29b00     13 29 02 F1 | 	add	local02, local01
29b04                 | ' {
29b04                 | ' 
29b04                 | ' 	return *((WORD*)ptr);
29b04     14 FB E1 FA | 	rdword	result1, local02
29b08     FD 2C 32 F9 | 	getword	local04, result1, #0
29b0c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
29b0c                 | ' 			break;
29b0c     48 00 90 FD | 	jmp	#LR__4227
29b10                 | LR__4225
29b10     14 13 02 F6 | 	mov	arg01, local02
29b14     13 31 02 F6 | 	mov	local06, local01
29b18     07 30 46 F0 | 	shr	local06, #7
29b1c     24 28 06 F1 | 	add	local02, #36
29b20     14 15 02 FB | 	rdlong	arg02, local02
29b24     24 28 86 F1 | 	sub	local02, #36
29b28     18 15 02 F1 | 	add	arg02, local06
29b2c     DC FC BF FD | 	call	#_fatfs_cc_move_window
29b30     00 FA 0D F2 | 	cmp	result1, #0 wz
29b34     20 00 90 5D |  if_ne	jmp	#LR__4227
29b38     34 28 06 F1 | 	add	local02, #52
29b3c     02 26 66 F0 | 	shl	local01, #2
29b40     FF 27 06 F5 | 	and	local01, #511
29b44     13 29 02 F1 | 	add	local02, local01
29b48                 | ' {
29b48                 | ' 
29b48                 | ' 	return *((DWORD*)ptr);
29b48     14 2D 02 FB | 	rdlong	local04, local02
29b4c     7C 2C 06 F4 | 	bitl	local04, #124
29b50                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
29b50                 | ' 			break;
29b50     04 00 90 FD | 	jmp	#LR__4227
29b54                 | LR__4226
29b54     01 2C 06 F6 | 	mov	local04, #1
29b58                 | LR__4227
29b58                 | LR__4228
29b58                 | ' 			val = 1;
29b58                 | ' 		}
29b58                 | ' 	}
29b58                 | ' 
29b58                 | ' 	return val;
29b58     16 FB 01 F6 | 	mov	result1, local04
29b5c     A7 F0 03 F6 | 	mov	ptra, fp
29b60     B2 00 A0 FD | 	call	#popregs_
29b64                 | _fatfs_cc_get_fat_ret
29b64     2D 00 64 FD | 	ret
29b68                 | 
29b68                 | _fatfs_cc_put_fat
29b68     08 4A 05 F6 | 	mov	COUNT_, #8
29b6c     A8 00 A0 FD | 	call	#pushregs_
29b70     09 27 02 F6 | 	mov	local01, arg01
29b74     0A 29 02 F6 | 	mov	local02, arg02
29b78     0B 2B 02 F6 | 	mov	local03, arg03
29b7c     02 2C 06 F6 | 	mov	local04, #2
29b80     02 28 16 F2 | 	cmp	local02, #2 wc
29b84     E0 01 90 CD |  if_b	jmp	#LR__4237
29b88     18 26 06 F1 | 	add	local01, #24
29b8c     13 2F 02 FB | 	rdlong	local05, local01
29b90     18 26 86 F1 | 	sub	local01, #24
29b94     17 29 12 F2 | 	cmp	local02, local05 wc
29b98     CC 01 90 3D |  if_ae	jmp	#LR__4237
29b9c                 | ' 		switch (fs->fs_type) {
29b9c     13 31 C2 FA | 	rdbyte	local06, local01
29ba0     01 30 86 F1 | 	sub	local06, #1
29ba4     03 30 26 F3 | 	fle	local06, #3
29ba8     30 30 62 FD | 	jmprel	local06
29bac                 | LR__4230
29bac     0C 00 90 FD | 	jmp	#LR__4231
29bb0     F8 00 90 FD | 	jmp	#LR__4234
29bb4     40 01 90 FD | 	jmp	#LR__4235
29bb8     AC 01 90 FD | 	jmp	#LR__4236
29bbc                 | LR__4231
29bbc     14 33 02 F6 | 	mov	local07, local02
29bc0     14 2F 02 F6 | 	mov	local05, local02
29bc4     01 2E 46 F0 | 	shr	local05, #1
29bc8     17 33 02 F1 | 	add	local07, local05
29bcc     13 13 02 F6 | 	mov	arg01, local01
29bd0     19 31 02 F6 | 	mov	local06, local07
29bd4     09 30 46 F0 | 	shr	local06, #9
29bd8     24 26 06 F1 | 	add	local01, #36
29bdc     13 15 02 FB | 	rdlong	arg02, local01
29be0     24 26 86 F1 | 	sub	local01, #36
29be4     18 15 02 F1 | 	add	arg02, local06
29be8     20 FC BF FD | 	call	#_fatfs_cc_move_window
29bec     FD 2C 0A F6 | 	mov	local04, result1 wz
29bf0     74 01 90 5D |  if_ne	jmp	#LR__4236
29bf4     34 26 06 F1 | 	add	local01, #52
29bf8     13 35 02 F6 | 	mov	local08, local01
29bfc     19 2F 02 F6 | 	mov	local05, local07
29c00     FF 2F 06 F5 | 	and	local05, #511
29c04     17 35 02 F1 | 	add	local08, local05
29c08     01 28 CE F7 | 	test	local02, #1 wz
29c0c     34 26 86 F1 | 	sub	local01, #52
29c10     01 32 06 F1 | 	add	local07, #1
29c14     18 00 90 AD |  if_e	jmp	#LR__4232
29c18     1A 2F C2 FA | 	rdbyte	local05, local08
29c1c     17 2F 42 F8 | 	getnib	local05, local05, #0
29c20     15 31 E2 F8 | 	getbyte	local06, local03, #0
29c24     04 30 66 F0 | 	shl	local06, #4
29c28     18 2F 42 F5 | 	or	local05, local06
29c2c     04 00 90 FD | 	jmp	#LR__4233
29c30                 | LR__4232
29c30     15 2F 02 F6 | 	mov	local05, local03
29c34                 | LR__4233
29c34     1A 2F 42 FC | 	wrbyte	local05, local08
29c38     03 26 06 F1 | 	add	local01, #3
29c3c     13 03 48 FC | 	wrbyte	#1, local01
29c40     03 26 86 F1 | 	sub	local01, #3
29c44     13 13 02 F6 | 	mov	arg01, local01
29c48     19 35 02 F6 | 	mov	local08, local07
29c4c     09 34 46 F0 | 	shr	local08, #9
29c50     24 26 06 F1 | 	add	local01, #36
29c54     13 15 02 FB | 	rdlong	arg02, local01
29c58     24 26 86 F1 | 	sub	local01, #36
29c5c     1A 15 02 F1 | 	add	arg02, local08
29c60     A8 FB BF FD | 	call	#_fatfs_cc_move_window
29c64     FD 2C 0A F6 | 	mov	local04, result1 wz
29c68     FC 00 90 5D |  if_ne	jmp	#LR__4236
29c6c     34 26 06 F1 | 	add	local01, #52
29c70     13 35 02 F6 | 	mov	local08, local01
29c74     FF 33 06 F5 | 	and	local07, #511
29c78     19 35 02 F1 | 	add	local08, local07
29c7c     01 28 CE F7 | 	test	local02, #1 wz
29c80     04 2A 46 50 |  if_ne	shr	local03, #4
29c84     15 2F 02 56 |  if_ne	mov	local05, local03
29c88     1A 2F C2 AA |  if_e	rdbyte	local05, local08
29c8c     F0 2E 06 A5 |  if_e	and	local05, #240
29c90     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
29c94     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
29c98     15 2F 42 A5 |  if_e	or	local05, local03
29c9c     1A 2F 42 FC | 	wrbyte	local05, local08
29ca0     31 26 86 F1 | 	sub	local01, #49
29ca4     13 03 48 FC | 	wrbyte	#1, local01
29ca8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
29ca8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
29ca8                 | ' 			fs->wflag = 1;
29ca8                 | ' 			break;
29ca8     BC 00 90 FD | 	jmp	#LR__4236
29cac                 | LR__4234
29cac     13 13 02 F6 | 	mov	arg01, local01
29cb0     14 35 02 F6 | 	mov	local08, local02
29cb4     08 34 46 F0 | 	shr	local08, #8
29cb8     24 26 06 F1 | 	add	local01, #36
29cbc     13 15 02 FB | 	rdlong	arg02, local01
29cc0     24 26 86 F1 | 	sub	local01, #36
29cc4     1A 15 02 F1 | 	add	arg02, local08
29cc8     40 FB BF FD | 	call	#_fatfs_cc_move_window
29ccc     FD 2C 0A F6 | 	mov	local04, result1 wz
29cd0     94 00 90 5D |  if_ne	jmp	#LR__4236
29cd4     34 26 06 F1 | 	add	local01, #52
29cd8     13 13 02 F6 | 	mov	arg01, local01
29cdc     01 28 66 F0 | 	shl	local02, #1
29ce0     FF 29 06 F5 | 	and	local02, #511
29ce4     14 13 02 F1 | 	add	arg01, local02
29ce8     09 2B 52 FC | 	wrword	local03, arg01
29cec     31 26 86 F1 | 	sub	local01, #49
29cf0     13 03 48 FC | 	wrbyte	#1, local01
29cf4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
29cf4                 | ' 			fs->wflag = 1;
29cf4                 | ' 			break;
29cf4     70 00 90 FD | 	jmp	#LR__4236
29cf8                 | LR__4235
29cf8     13 13 02 F6 | 	mov	arg01, local01
29cfc     14 35 02 F6 | 	mov	local08, local02
29d00     07 34 46 F0 | 	shr	local08, #7
29d04     24 26 06 F1 | 	add	local01, #36
29d08     13 15 02 FB | 	rdlong	arg02, local01
29d0c     24 26 86 F1 | 	sub	local01, #36
29d10     1A 15 02 F1 | 	add	arg02, local08
29d14     F4 FA BF FD | 	call	#_fatfs_cc_move_window
29d18     FD 2C 0A F6 | 	mov	local04, result1 wz
29d1c     48 00 90 5D |  if_ne	jmp	#LR__4236
29d20     7C 2A 06 F4 | 	bitl	local03, #124
29d24     34 26 06 F1 | 	add	local01, #52
29d28     14 35 02 F6 | 	mov	local08, local02
29d2c     02 34 66 F0 | 	shl	local08, #2
29d30     FF 35 06 F5 | 	and	local08, #511
29d34     13 13 02 F6 | 	mov	arg01, local01
29d38     1A 13 02 F1 | 	add	arg01, local08
29d3c                 | ' {
29d3c                 | ' 
29d3c                 | ' 	return *((DWORD*)ptr);
29d3c     09 35 02 FB | 	rdlong	local08, arg01
29d40     00 00 78 FF 
29d44     00 34 06 F5 | 	and	local08, ##-268435456
29d48     1A 2B 42 F5 | 	or	local03, local08
29d4c     13 13 02 F6 | 	mov	arg01, local01
29d50     02 28 66 F0 | 	shl	local02, #2
29d54     FF 29 06 F5 | 	and	local02, #511
29d58     14 13 02 F1 | 	add	arg01, local02
29d5c     09 2B 62 FC | 	wrlong	local03, arg01
29d60     31 26 86 F1 | 	sub	local01, #49
29d64     13 03 48 FC | 	wrbyte	#1, local01
29d68                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
29d68                 | ' 			}
29d68                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
29d68                 | ' 			fs->wflag = 1;
29d68                 | ' 			break;
29d68                 | LR__4236
29d68                 | LR__4237
29d68                 | ' 		}
29d68                 | ' 	}
29d68                 | ' 	return res;
29d68     16 FB 01 F6 | 	mov	result1, local04
29d6c     A7 F0 03 F6 | 	mov	ptra, fp
29d70     B2 00 A0 FD | 	call	#popregs_
29d74                 | _fatfs_cc_put_fat_ret
29d74     2D 00 64 FD | 	ret
29d78                 | 
29d78                 | _fatfs_cc_remove_chain
29d78     05 4A 05 F6 | 	mov	COUNT_, #5
29d7c     A8 00 A0 FD | 	call	#pushregs_
29d80     09 27 02 F6 | 	mov	local01, arg01
29d84     0A 29 02 F6 | 	mov	local02, arg02
29d88     0B 2B 02 F6 | 	mov	local03, arg03
29d8c     13 2D 02 FB | 	rdlong	local04, local01
29d90     02 28 16 F2 | 	cmp	local02, #2 wc
29d94     14 00 90 CD |  if_b	jmp	#LR__4240
29d98     18 2C 06 F1 | 	add	local04, #24
29d9c     16 FB 01 FB | 	rdlong	result1, local04
29da0     18 2C 86 F1 | 	sub	local04, #24
29da4     FD 28 12 F2 | 	cmp	local02, result1 wc
29da8     08 00 90 CD |  if_b	jmp	#LR__4241
29dac                 | LR__4240
29dac     02 FA 05 F6 | 	mov	result1, #2
29db0     CC 00 90 FD | 	jmp	#LR__4246
29db4                 | LR__4241
29db4     00 2A 0E F2 | 	cmp	local03, #0 wz
29db8     18 00 90 AD |  if_e	jmp	#LR__4242
29dbc     15 15 02 F6 | 	mov	arg02, local03
29dc0     16 13 02 F6 | 	mov	arg01, local04
29dc4     01 16 66 F6 | 	neg	arg03, #1
29dc8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
29dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
29dd0     AC 00 90 5D |  if_ne	jmp	#LR__4246
29dd4                 | LR__4242
29dd4                 | ' 	}
29dd4                 | ' 
29dd4                 | ' 
29dd4                 | ' 	do {
29dd4                 | LR__4243
29dd4     14 15 02 F6 | 	mov	arg02, local02
29dd8     13 13 02 F6 | 	mov	arg01, local01
29ddc     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
29de0     FD 2E 0A F6 | 	mov	local05, result1 wz
29de4     94 00 90 AD |  if_e	jmp	#LR__4245
29de8     01 2E 0E F2 | 	cmp	local05, #1 wz
29dec     02 FA 05 A6 |  if_e	mov	result1, #2
29df0     8C 00 90 AD |  if_e	jmp	#LR__4246
29df4     FF FF 7F FF 
29df8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
29dfc     01 FA 05 A6 |  if_e	mov	result1, #1
29e00     7C 00 90 AD |  if_e	jmp	#LR__4246
29e04     14 15 02 F6 | 	mov	arg02, local02
29e08     16 13 02 F6 | 	mov	arg01, local04
29e0c     00 16 06 F6 | 	mov	arg03, #0
29e10     54 FD BF FD | 	call	#_fatfs_cc_put_fat
29e14     FD 2A 0A F6 | 	mov	local03, result1 wz
29e18     15 FB 01 56 |  if_ne	mov	result1, local03
29e1c     60 00 90 5D |  if_ne	jmp	#LR__4246
29e20     18 2C 06 F1 | 	add	local04, #24
29e24     16 2B 02 FB | 	rdlong	local03, local04
29e28     02 2A 86 F1 | 	sub	local03, #2
29e2c     04 2C 86 F1 | 	sub	local04, #4
29e30     16 29 02 FB | 	rdlong	local02, local04
29e34     14 2C 86 F1 | 	sub	local04, #20
29e38     15 29 12 F2 | 	cmp	local02, local03 wc
29e3c     24 00 90 3D |  if_ae	jmp	#LR__4244
29e40     14 2C 06 F1 | 	add	local04, #20
29e44     16 2B 02 FB | 	rdlong	local03, local04
29e48     01 2A 06 F1 | 	add	local03, #1
29e4c     16 2B 62 FC | 	wrlong	local03, local04
29e50     10 2C 86 F1 | 	sub	local04, #16
29e54     16 2B C2 FA | 	rdbyte	local03, local04
29e58     01 2A 46 F5 | 	or	local03, #1
29e5c     16 2B 42 FC | 	wrbyte	local03, local04
29e60     04 2C 86 F1 | 	sub	local04, #4
29e64                 | LR__4244
29e64     17 29 02 F6 | 	mov	local02, local05
29e68     18 2C 06 F1 | 	add	local04, #24
29e6c     16 2F 02 FB | 	rdlong	local05, local04
29e70     18 2C 86 F1 | 	sub	local04, #24
29e74     17 29 12 F2 | 	cmp	local02, local05 wc
29e78     58 FF 9F CD |  if_b	jmp	#LR__4243
29e7c                 | LR__4245
29e7c                 | ' #line 1500 "ff.c"
29e7c                 | ' 	return FR_OK;
29e7c     00 FA 05 F6 | 	mov	result1, #0
29e80                 | LR__4246
29e80     A7 F0 03 F6 | 	mov	ptra, fp
29e84     B2 00 A0 FD | 	call	#popregs_
29e88                 | _fatfs_cc_remove_chain_ret
29e88     2D 00 64 FD | 	ret
29e8c                 | 
29e8c                 | _fatfs_cc_create_chain
29e8c     09 4A 05 F6 | 	mov	COUNT_, #9
29e90     A8 00 A0 FD | 	call	#pushregs_
29e94     09 27 02 F6 | 	mov	local01, arg01
29e98     0A 29 0A F6 | 	mov	local02, arg02 wz
29e9c     13 2B 02 FB | 	rdlong	local03, local01
29ea0     28 00 90 5D |  if_ne	jmp	#LR__4250
29ea4     10 2A 06 F1 | 	add	local03, #16
29ea8     15 2D 0A FB | 	rdlong	local04, local03 wz
29eac     10 2A 86 F1 | 	sub	local03, #16
29eb0     18 2A 06 51 |  if_ne	add	local03, #24
29eb4     15 2F 02 5B |  if_ne	rdlong	local05, local03
29eb8     18 2A 86 51 |  if_ne	sub	local03, #24
29ebc     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
29ec0     50 00 90 4D |  if_c_and_nz	jmp	#LR__4251
29ec4     01 2C 06 F6 | 	mov	local04, #1
29ec8     48 00 90 FD | 	jmp	#LR__4251
29ecc                 | LR__4250
29ecc     14 15 02 F6 | 	mov	arg02, local02
29ed0     13 13 02 F6 | 	mov	arg01, local01
29ed4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
29ed8     FD 2C 02 F6 | 	mov	local04, result1
29edc     02 2C 16 F2 | 	cmp	local04, #2 wc
29ee0     01 FA 05 C6 |  if_b	mov	result1, #1
29ee4     BC 01 90 CD |  if_b	jmp	#LR__4261
29ee8     FF FF 7F FF 
29eec     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
29ef0     16 FB 01 A6 |  if_e	mov	result1, local04
29ef4     AC 01 90 AD |  if_e	jmp	#LR__4261
29ef8     18 2A 06 F1 | 	add	local03, #24
29efc     15 2F 02 FB | 	rdlong	local05, local03
29f00     18 2A 86 F1 | 	sub	local03, #24
29f04     17 2D 12 F2 | 	cmp	local04, local05 wc
29f08     16 FB 01 C6 |  if_b	mov	result1, local04
29f0c     94 01 90 CD |  if_b	jmp	#LR__4261
29f10     14 2D 02 F6 | 	mov	local04, local02
29f14                 | LR__4251
29f14     14 2A 06 F1 | 	add	local03, #20
29f18     15 2F 0A FB | 	rdlong	local05, local03 wz
29f1c     14 2A 86 F1 | 	sub	local03, #20
29f20     00 FA 05 A6 |  if_e	mov	result1, #0
29f24     7C 01 90 AD |  if_e	jmp	#LR__4261
29f28     00 30 06 F6 | 	mov	local06, #0
29f2c     14 2D 0A F2 | 	cmp	local04, local02 wz
29f30     74 00 90 5D |  if_ne	jmp	#LR__4254
29f34     16 31 02 F6 | 	mov	local06, local04
29f38     01 30 06 F1 | 	add	local06, #1
29f3c     18 2A 06 F1 | 	add	local03, #24
29f40     15 2F 02 FB | 	rdlong	local05, local03
29f44     18 2A 86 F1 | 	sub	local03, #24
29f48     17 31 12 F2 | 	cmp	local06, local05 wc
29f4c     02 30 06 36 |  if_ae	mov	local06, #2
29f50     18 15 02 F6 | 	mov	arg02, local06
29f54     13 13 02 F6 | 	mov	arg01, local01
29f58     68 FA BF FD | 	call	#_fatfs_cc_get_fat
29f5c     FD 2E 02 F6 | 	mov	local05, result1
29f60     01 2E 0E F2 | 	cmp	local05, #1 wz
29f64     FF FF 7F 5F 
29f68     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
29f6c     17 FB 01 A6 |  if_e	mov	result1, local05
29f70     30 01 90 AD |  if_e	jmp	#LR__4261
29f74     00 2E 0E F2 | 	cmp	local05, #0 wz
29f78     2C 00 90 AD |  if_e	jmp	#LR__4253
29f7c     10 2A 06 F1 | 	add	local03, #16
29f80     15 33 02 FB | 	rdlong	local07, local03
29f84     10 2A 86 F1 | 	sub	local03, #16
29f88     02 32 16 F2 | 	cmp	local07, #2 wc
29f8c     14 00 90 CD |  if_b	jmp	#LR__4252
29f90     18 2A 06 F1 | 	add	local03, #24
29f94     15 2F 02 FB | 	rdlong	local05, local03
29f98     18 2A 86 F1 | 	sub	local03, #24
29f9c     17 33 12 F2 | 	cmp	local07, local05 wc
29fa0     19 2D 02 C6 |  if_b	mov	local04, local07
29fa4                 | LR__4252
29fa4     00 30 06 F6 | 	mov	local06, #0
29fa8                 | LR__4253
29fa8                 | LR__4254
29fa8     00 30 0E F2 | 	cmp	local06, #0 wz
29fac     60 00 90 5D |  if_ne	jmp	#LR__4257
29fb0     16 31 02 F6 | 	mov	local06, local04
29fb4                 | ' 			ncl = scl;
29fb4                 | ' 			for (;;) {
29fb4                 | LR__4255
29fb4     01 30 06 F1 | 	add	local06, #1
29fb8     18 2A 06 F1 | 	add	local03, #24
29fbc     15 2F 02 FB | 	rdlong	local05, local03
29fc0     18 2A 86 F1 | 	sub	local03, #24
29fc4     17 31 12 F2 | 	cmp	local06, local05 wc
29fc8     02 30 06 36 |  if_ae	mov	local06, #2
29fcc     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
29fd0     00 FA 05 16 |  if_a	mov	result1, #0
29fd4     CC 00 90 1D |  if_a	jmp	#LR__4261
29fd8     18 15 02 F6 | 	mov	arg02, local06
29fdc     13 13 02 F6 | 	mov	arg01, local01
29fe0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
29fe4     FD 32 0A F6 | 	mov	local07, result1 wz
29fe8     24 00 90 AD |  if_e	jmp	#LR__4256
29fec     01 32 0E F2 | 	cmp	local07, #1 wz
29ff0     FF FF 7F 5F 
29ff4     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
29ff8     19 FB 01 A6 |  if_e	mov	result1, local07
29ffc     A4 00 90 AD |  if_e	jmp	#LR__4261
2a000     16 31 0A F2 | 	cmp	local06, local04 wz
2a004     00 FA 05 A6 |  if_e	mov	result1, #0
2a008     98 00 90 AD |  if_e	jmp	#LR__4261
2a00c     A4 FF 9F FD | 	jmp	#LR__4255
2a010                 | LR__4256
2a010                 | LR__4257
2a010     15 13 02 F6 | 	mov	arg01, local03
2a014     18 15 02 F6 | 	mov	arg02, local06
2a018     01 16 66 F6 | 	neg	arg03, #1
2a01c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2a020     FD 34 0A F6 | 	mov	local08, result1 wz
2a024     1C 00 90 5D |  if_ne	jmp	#LR__4258
2a028     00 28 0E F2 | 	cmp	local02, #0 wz
2a02c     14 00 90 AD |  if_e	jmp	#LR__4258
2a030     15 13 02 F6 | 	mov	arg01, local03
2a034     14 15 02 F6 | 	mov	arg02, local02
2a038     18 17 02 F6 | 	mov	arg03, local06
2a03c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2a040     FD 34 02 F6 | 	mov	local08, result1
2a044                 | LR__4258
2a044     00 34 0E F2 | 	cmp	local08, #0 wz
2a048     4C 00 90 5D |  if_ne	jmp	#LR__4259
2a04c     10 2A 06 F1 | 	add	local03, #16
2a050     15 31 62 FC | 	wrlong	local06, local03
2a054     08 2A 06 F1 | 	add	local03, #8
2a058     15 2F 02 FB | 	rdlong	local05, local03
2a05c     02 2E 86 F1 | 	sub	local05, #2
2a060     04 2A 86 F1 | 	sub	local03, #4
2a064     15 37 02 FB | 	rdlong	local09, local03
2a068     14 2A 86 F1 | 	sub	local03, #20
2a06c     17 37 1A F2 | 	cmp	local09, local05 wcz
2a070     14 2A 06 E1 |  if_be	add	local03, #20
2a074     15 37 02 EB |  if_be	rdlong	local09, local03
2a078     01 36 86 E1 |  if_be	sub	local09, #1
2a07c     15 37 62 EC |  if_be	wrlong	local09, local03
2a080     14 2A 86 E1 |  if_be	sub	local03, #20
2a084     04 2A 06 F1 | 	add	local03, #4
2a088     15 2F C2 FA | 	rdbyte	local05, local03
2a08c     01 2E 46 F5 | 	or	local05, #1
2a090     15 2F 42 FC | 	wrbyte	local05, local03
2a094     08 00 90 FD | 	jmp	#LR__4260
2a098                 | LR__4259
2a098     01 34 0E F2 | 	cmp	local08, #1 wz
2a09c     01 30 C6 F6 | 	negz	local06, #1
2a0a0                 | LR__4260
2a0a0                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2a0a0                 | ' 	}
2a0a0                 | ' 
2a0a0                 | ' 	return ncl;
2a0a0     18 FB 01 F6 | 	mov	result1, local06
2a0a4                 | LR__4261
2a0a4     A7 F0 03 F6 | 	mov	ptra, fp
2a0a8     B2 00 A0 FD | 	call	#popregs_
2a0ac                 | _fatfs_cc_create_chain_ret
2a0ac     2D 00 64 FD | 	ret
2a0b0                 | 
2a0b0                 | _fatfs_cc_dir_clear
2a0b0     06 4A 05 F6 | 	mov	COUNT_, #6
2a0b4     A8 00 A0 FD | 	call	#pushregs_
2a0b8     09 27 02 F6 | 	mov	local01, arg01
2a0bc     0A 29 02 F6 | 	mov	local02, arg02
2a0c0     13 13 02 F6 | 	mov	arg01, local01
2a0c4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2a0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0cc     01 FA 05 56 |  if_ne	mov	result1, #1
2a0d0     90 00 90 5D |  if_ne	jmp	#LR__4272
2a0d4     13 13 02 F6 | 	mov	arg01, local01
2a0d8     14 15 02 F6 | 	mov	arg02, local02
2a0dc     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2a0e0     FD 2A 02 F6 | 	mov	local03, result1
2a0e4     30 26 06 F1 | 	add	local01, #48
2a0e8     13 2B 62 FC | 	wrlong	local03, local01
2a0ec     04 26 06 F1 | 	add	local01, #4
2a0f0     13 13 02 F6 | 	mov	arg01, local01
2a0f4     00 14 06 F6 | 	mov	arg02, #0
2a0f8     09 16 C6 F9 | 	decod	arg03, #9
2a0fc     98 00 A0 FD | 	call	#\builtin_bytefill_
2a100     13 2D 02 F6 | 	mov	local04, local01
2a104                 | ' #line 1667 "ff.c"
2a104                 | ' 	{
2a104                 | ' 		ibuf = fs->win; szb = 1;
2a104                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2a104     00 2E 06 F6 | 	mov	local05, #0
2a108     34 26 86 F1 | 	sub	local01, #52
2a10c                 | LR__4270
2a10c     0A 26 06 F1 | 	add	local01, #10
2a110     13 31 E2 FA | 	rdword	local06, local01
2a114     0A 26 86 F1 | 	sub	local01, #10
2a118     18 2F 12 F2 | 	cmp	local05, local06 wc
2a11c     2C 00 90 3D |  if_ae	jmp	#LR__4271
2a120     01 26 06 F1 | 	add	local01, #1
2a124     13 13 C2 FA | 	rdbyte	arg01, local01
2a128     01 26 86 F1 | 	sub	local01, #1
2a12c     16 15 02 F6 | 	mov	arg02, local04
2a130     15 17 02 F6 | 	mov	arg03, local03
2a134     17 17 02 F1 | 	add	arg03, local05
2a138     01 18 06 F6 | 	mov	arg04, #1
2a13c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2a140     00 FA 0D F2 | 	cmp	result1, #0 wz
2a144     01 2E 06 A1 |  if_e	add	local05, #1
2a148     C0 FF 9F AD |  if_e	jmp	#LR__4270
2a14c                 | LR__4271
2a14c                 | ' 	}
2a14c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2a14c     0A 26 06 F1 | 	add	local01, #10
2a150     13 2D E2 FA | 	rdword	local04, local01
2a154     16 2F 0A F2 | 	cmp	local05, local04 wz
2a158     00 30 06 A6 |  if_e	mov	local06, #0
2a15c     01 30 06 56 |  if_ne	mov	local06, #1
2a160     18 FB 01 F6 | 	mov	result1, local06
2a164                 | LR__4272
2a164     A7 F0 03 F6 | 	mov	ptra, fp
2a168     B2 00 A0 FD | 	call	#popregs_
2a16c                 | _fatfs_cc_dir_clear_ret
2a16c     2D 00 64 FD | 	ret
2a170                 | 
2a170                 | _fatfs_cc_dir_sdi
2a170     06 4A 05 F6 | 	mov	COUNT_, #6
2a174     A8 00 A0 FD | 	call	#pushregs_
2a178     09 27 02 F6 | 	mov	local01, arg01
2a17c     0A 29 02 F6 | 	mov	local02, arg02
2a180     13 2B 02 FB | 	rdlong	local03, local01
2a184     00 10 00 FF 
2a188     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2a18c     1F 28 CE C7 |  if_b	test	local02, #31 wz
2a190                 | ' 		return FR_INT_ERR;
2a190     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2a194     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4286
2a198     10 26 06 F1 | 	add	local01, #16
2a19c     13 29 62 FC | 	wrlong	local02, local01
2a1a0     08 26 86 F1 | 	sub	local01, #8
2a1a4     13 2D 0A FB | 	rdlong	local04, local01 wz
2a1a8     08 26 86 F1 | 	sub	local01, #8
2a1ac     15 2F C2 AA |  if_e	rdbyte	local05, local03
2a1b0     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2a1b4     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2a1b8     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2a1bc     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2a1c0     00 2C 0E F2 | 	cmp	local04, #0 wz
2a1c4     3C 00 90 5D |  if_ne	jmp	#LR__4280
2a1c8     14 2F 02 F6 | 	mov	local05, local02
2a1cc     05 2E 46 F0 | 	shr	local05, #5
2a1d0     08 2A 06 F1 | 	add	local03, #8
2a1d4     15 15 E2 FA | 	rdword	arg02, local03
2a1d8     08 2A 86 F1 | 	sub	local03, #8
2a1dc     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2a1e0     02 FA 05 36 |  if_ae	mov	result1, #2
2a1e4     E4 00 90 3D |  if_ae	jmp	#LR__4286
2a1e8     28 2A 06 F1 | 	add	local03, #40
2a1ec     15 2F 02 FB | 	rdlong	local05, local03
2a1f0     28 2A 86 F1 | 	sub	local03, #40
2a1f4     18 26 06 F1 | 	add	local01, #24
2a1f8     13 2F 62 FC | 	wrlong	local05, local01
2a1fc     18 26 86 F1 | 	sub	local01, #24
2a200     7C 00 90 FD | 	jmp	#LR__4285
2a204                 | LR__4280
2a204     0A 2A 06 F1 | 	add	local03, #10
2a208     15 31 E2 FA | 	rdword	local06, local03
2a20c     0A 2A 86 F1 | 	sub	local03, #10
2a210     09 30 66 F0 | 	shl	local06, #9
2a214                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2a214                 | ' 		while (ofs >= csz) {
2a214                 | LR__4281
2a214     18 29 12 F2 | 	cmp	local02, local06 wc
2a218     4C 00 90 CD |  if_b	jmp	#LR__4284
2a21c     13 13 02 F6 | 	mov	arg01, local01
2a220     16 15 02 F6 | 	mov	arg02, local04
2a224     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2a228     FD 2C 02 F6 | 	mov	local04, result1
2a22c     FF FF 7F FF 
2a230     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2a234     01 FA 05 A6 |  if_e	mov	result1, #1
2a238     90 00 90 AD |  if_e	jmp	#LR__4286
2a23c     02 2C 16 F2 | 	cmp	local04, #2 wc
2a240     14 00 90 CD |  if_b	jmp	#LR__4282
2a244     18 2A 06 F1 | 	add	local03, #24
2a248     15 2F 02 FB | 	rdlong	local05, local03
2a24c     18 2A 86 F1 | 	sub	local03, #24
2a250     17 2D 12 F2 | 	cmp	local04, local05 wc
2a254     08 00 90 CD |  if_b	jmp	#LR__4283
2a258                 | LR__4282
2a258     02 FA 05 F6 | 	mov	result1, #2
2a25c     6C 00 90 FD | 	jmp	#LR__4286
2a260                 | LR__4283
2a260     18 29 82 F1 | 	sub	local02, local06
2a264     AC FF 9F FD | 	jmp	#LR__4281
2a268                 | LR__4284
2a268     15 13 02 F6 | 	mov	arg01, local03
2a26c     16 15 02 F6 | 	mov	arg02, local04
2a270     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2a274     18 26 06 F1 | 	add	local01, #24
2a278     13 FB 61 FC | 	wrlong	result1, local01
2a27c     18 26 86 F1 | 	sub	local01, #24
2a280                 | LR__4285
2a280     14 26 06 F1 | 	add	local01, #20
2a284     13 2D 62 FC | 	wrlong	local04, local01
2a288     04 26 06 F1 | 	add	local01, #4
2a28c     13 2F 0A FB | 	rdlong	local05, local01 wz
2a290     18 26 86 F1 | 	sub	local01, #24
2a294     02 FA 05 A6 |  if_e	mov	result1, #2
2a298     30 00 90 AD |  if_e	jmp	#LR__4286
2a29c     14 31 02 F6 | 	mov	local06, local02
2a2a0     09 30 46 F0 | 	shr	local06, #9
2a2a4     18 26 06 F1 | 	add	local01, #24
2a2a8     13 2F 02 FB | 	rdlong	local05, local01
2a2ac     18 2F 02 F1 | 	add	local05, local06
2a2b0     13 2F 62 FC | 	wrlong	local05, local01
2a2b4     34 2A 06 F1 | 	add	local03, #52
2a2b8     FF 29 06 F5 | 	and	local02, #511
2a2bc     14 2B 02 F1 | 	add	local03, local02
2a2c0     04 26 06 F1 | 	add	local01, #4
2a2c4     13 2B 62 FC | 	wrlong	local03, local01
2a2c8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2a2c8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2a2c8                 | ' 
2a2c8                 | ' 	return FR_OK;
2a2c8     00 FA 05 F6 | 	mov	result1, #0
2a2cc                 | LR__4286
2a2cc     A7 F0 03 F6 | 	mov	ptra, fp
2a2d0     B2 00 A0 FD | 	call	#popregs_
2a2d4                 | _fatfs_cc_dir_sdi_ret
2a2d4     2D 00 64 FD | 	ret
2a2d8                 | 
2a2d8                 | _fatfs_cc_dir_next
2a2d8     05 4A 05 F6 | 	mov	COUNT_, #5
2a2dc     A8 00 A0 FD | 	call	#pushregs_
2a2e0     09 27 02 F6 | 	mov	local01, arg01
2a2e4     0A 29 02 F6 | 	mov	local02, arg02
2a2e8     13 2B 02 FB | 	rdlong	local03, local01
2a2ec     10 26 06 F1 | 	add	local01, #16
2a2f0     13 2D 02 FB | 	rdlong	local04, local01
2a2f4     10 26 86 F1 | 	sub	local01, #16
2a2f8     20 2C 06 F1 | 	add	local04, #32
2a2fc     00 10 00 FF 
2a300     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2a304     18 26 06 31 |  if_ae	add	local01, #24
2a308     13 01 68 3C |  if_ae	wrlong	#0, local01
2a30c     18 26 86 31 |  if_ae	sub	local01, #24
2a310     18 26 06 F1 | 	add	local01, #24
2a314     13 15 0A FB | 	rdlong	arg02, local01 wz
2a318     18 26 86 F1 | 	sub	local01, #24
2a31c     04 FA 05 A6 |  if_e	mov	result1, #4
2a320     64 01 90 AD |  if_e	jmp	#LR__4295
2a324     FF 2D CE F7 | 	test	local04, #511 wz
2a328     3C 01 90 5D |  if_ne	jmp	#LR__4294
2a32c     18 26 06 F1 | 	add	local01, #24
2a330     13 15 02 FB | 	rdlong	arg02, local01
2a334     01 14 06 F1 | 	add	arg02, #1
2a338     13 15 62 FC | 	wrlong	arg02, local01
2a33c     04 26 86 F1 | 	sub	local01, #4
2a340     13 15 0A FB | 	rdlong	arg02, local01 wz
2a344     14 26 86 F1 | 	sub	local01, #20
2a348     2C 00 90 5D |  if_ne	jmp	#LR__4290
2a34c     16 15 02 F6 | 	mov	arg02, local04
2a350     05 14 46 F0 | 	shr	arg02, #5
2a354     08 2A 06 F1 | 	add	local03, #8
2a358     15 29 E2 FA | 	rdword	local02, local03
2a35c     08 2A 86 F1 | 	sub	local03, #8
2a360     14 15 12 F2 | 	cmp	arg02, local02 wc
2a364     18 26 06 31 |  if_ae	add	local01, #24
2a368     13 01 68 3C |  if_ae	wrlong	#0, local01
2a36c                 | ' 				dp->sect = 0; return FR_NO_FILE;
2a36c     04 FA 05 36 |  if_ae	mov	result1, #4
2a370     14 01 90 3D |  if_ae	jmp	#LR__4295
2a374     F0 00 90 FD | 	jmp	#LR__4293
2a378                 | LR__4290
2a378     16 13 02 F6 | 	mov	arg01, local04
2a37c     09 12 46 F0 | 	shr	arg01, #9
2a380     0A 2A 06 F1 | 	add	local03, #10
2a384     15 15 E2 FA | 	rdword	arg02, local03
2a388     0A 2A 86 F1 | 	sub	local03, #10
2a38c     01 14 86 F1 | 	sub	arg02, #1
2a390     0A 13 CA F7 | 	test	arg01, arg02 wz
2a394     D0 00 90 5D |  if_ne	jmp	#LR__4292
2a398     13 13 02 F6 | 	mov	arg01, local01
2a39c     14 26 06 F1 | 	add	local01, #20
2a3a0     13 15 02 FB | 	rdlong	arg02, local01
2a3a4     14 26 86 F1 | 	sub	local01, #20
2a3a8     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2a3ac     FD 2E 02 F6 | 	mov	local05, result1
2a3b0     02 2E 16 F2 | 	cmp	local05, #2 wc
2a3b4     02 FA 05 C6 |  if_b	mov	result1, #2
2a3b8     CC 00 90 CD |  if_b	jmp	#LR__4295
2a3bc     FF FF 7F FF 
2a3c0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2a3c4     01 FA 05 A6 |  if_e	mov	result1, #1
2a3c8     BC 00 90 AD |  if_e	jmp	#LR__4295
2a3cc     18 2A 06 F1 | 	add	local03, #24
2a3d0     15 15 02 FB | 	rdlong	arg02, local03
2a3d4     18 2A 86 F1 | 	sub	local03, #24
2a3d8     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2a3dc     68 00 90 CD |  if_b	jmp	#LR__4291
2a3e0     00 28 0E F2 | 	cmp	local02, #0 wz
2a3e4     18 26 06 A1 |  if_e	add	local01, #24
2a3e8     13 01 68 AC |  if_e	wrlong	#0, local01
2a3ec                 | ' 						dp->sect = 0; return FR_NO_FILE;
2a3ec     04 FA 05 A6 |  if_e	mov	result1, #4
2a3f0     94 00 90 AD |  if_e	jmp	#LR__4295
2a3f4     13 13 02 F6 | 	mov	arg01, local01
2a3f8     14 26 06 F1 | 	add	local01, #20
2a3fc     13 15 02 FB | 	rdlong	arg02, local01
2a400     14 26 86 F1 | 	sub	local01, #20
2a404     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2a408     FD 2E 0A F6 | 	mov	local05, result1 wz
2a40c     07 FA 05 A6 |  if_e	mov	result1, #7
2a410     74 00 90 AD |  if_e	jmp	#LR__4295
2a414     01 2E 0E F2 | 	cmp	local05, #1 wz
2a418     02 FA 05 A6 |  if_e	mov	result1, #2
2a41c     68 00 90 AD |  if_e	jmp	#LR__4295
2a420     FF FF 7F FF 
2a424     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2a428     01 FA 05 A6 |  if_e	mov	result1, #1
2a42c     58 00 90 AD |  if_e	jmp	#LR__4295
2a430     17 15 02 F6 | 	mov	arg02, local05
2a434     15 13 02 F6 | 	mov	arg01, local03
2a438     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2a43c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a440     01 FA 05 56 |  if_ne	mov	result1, #1
2a444     40 00 90 5D |  if_ne	jmp	#LR__4295
2a448                 | LR__4291
2a448     14 26 06 F1 | 	add	local01, #20
2a44c     13 2F 62 FC | 	wrlong	local05, local01
2a450     15 13 02 F6 | 	mov	arg01, local03
2a454     17 15 02 F6 | 	mov	arg02, local05
2a458     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2a45c     04 26 06 F1 | 	add	local01, #4
2a460     13 FB 61 FC | 	wrlong	result1, local01
2a464     18 26 86 F1 | 	sub	local01, #24
2a468                 | LR__4292
2a468                 | LR__4293
2a468                 | LR__4294
2a468     10 26 06 F1 | 	add	local01, #16
2a46c     13 2D 62 FC | 	wrlong	local04, local01
2a470     34 2A 06 F1 | 	add	local03, #52
2a474     FF 2D 06 F5 | 	and	local04, #511
2a478     16 2B 02 F1 | 	add	local03, local04
2a47c     0C 26 06 F1 | 	add	local01, #12
2a480     13 2B 62 FC | 	wrlong	local03, local01
2a484                 | ' #line 1771 "ff.c"
2a484                 | ' 				}
2a484                 | ' 				dp->clust = clst;
2a484                 | ' 				dp->sect = clst2sect(fs, clst);
2a484                 | ' 			}
2a484                 | ' 		}
2a484                 | ' 	}
2a484                 | ' 	dp->dptr = ofs;
2a484                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2a484                 | ' 
2a484                 | ' 	return FR_OK;
2a484     00 FA 05 F6 | 	mov	result1, #0
2a488                 | LR__4295
2a488     A7 F0 03 F6 | 	mov	ptra, fp
2a48c     B2 00 A0 FD | 	call	#popregs_
2a490                 | _fatfs_cc_dir_next_ret
2a490     2D 00 64 FD | 	ret
2a494                 | 
2a494                 | _fatfs_cc_dir_alloc
2a494     08 4A 05 F6 | 	mov	COUNT_, #8
2a498     A8 00 A0 FD | 	call	#pushregs_
2a49c     09 27 02 F6 | 	mov	local01, arg01
2a4a0     0A 29 02 F6 | 	mov	local02, arg02
2a4a4     13 2B 02 FB | 	rdlong	local03, local01
2a4a8     13 13 02 F6 | 	mov	arg01, local01
2a4ac     00 14 06 F6 | 	mov	arg02, #0
2a4b0     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2a4b4     FD 2C 0A F6 | 	mov	local04, result1 wz
2a4b8     70 00 90 5D |  if_ne	jmp	#LR__4304
2a4bc     00 2E 06 F6 | 	mov	local05, #0
2a4c0                 | ' 		n = 0;
2a4c0                 | ' 		do {
2a4c0                 | LR__4300
2a4c0     18 26 06 F1 | 	add	local01, #24
2a4c4     13 15 02 FB | 	rdlong	arg02, local01
2a4c8     18 26 86 F1 | 	sub	local01, #24
2a4cc     15 13 02 F6 | 	mov	arg01, local03
2a4d0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2a4d4     FD 2C 0A F6 | 	mov	local04, result1 wz
2a4d8     50 00 90 5D |  if_ne	jmp	#LR__4303
2a4dc     1C 26 06 F1 | 	add	local01, #28
2a4e0     13 31 02 FB | 	rdlong	local06, local01
2a4e4     1C 26 86 F1 | 	sub	local01, #28
2a4e8     18 31 C2 FA | 	rdbyte	local06, local06
2a4ec     E5 30 0E F2 | 	cmp	local06, #229 wz
2a4f0     1C 26 06 51 |  if_ne	add	local01, #28
2a4f4     13 33 02 5B |  if_ne	rdlong	local07, local01
2a4f8     1C 26 86 51 |  if_ne	sub	local01, #28
2a4fc     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2a500     10 00 90 5D |  if_ne	jmp	#LR__4301
2a504     01 2E 06 F1 | 	add	local05, #1
2a508     14 2F 0A F2 | 	cmp	local05, local02 wz
2a50c     1C 00 90 AD |  if_e	jmp	#LR__4303
2a510     04 00 90 FD | 	jmp	#LR__4302
2a514                 | LR__4301
2a514     00 2E 06 F6 | 	mov	local05, #0
2a518                 | LR__4302
2a518     13 13 02 F6 | 	mov	arg01, local01
2a51c     01 14 06 F6 | 	mov	arg02, #1
2a520     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2a524     FD 2C 0A F6 | 	mov	local04, result1 wz
2a528     94 FF 9F AD |  if_e	jmp	#LR__4300
2a52c                 | LR__4303
2a52c                 | LR__4304
2a52c     04 2C 0E F2 | 	cmp	local04, #4 wz
2a530     07 2C 06 A6 |  if_e	mov	local04, #7
2a534                 | ' 	return res;
2a534     16 FB 01 F6 | 	mov	result1, local04
2a538     A7 F0 03 F6 | 	mov	ptra, fp
2a53c     B2 00 A0 FD | 	call	#popregs_
2a540                 | _fatfs_cc_dir_alloc_ret
2a540     2D 00 64 FD | 	ret
2a544                 | 
2a544                 | _fatfs_cc_ld_clust
2a544     09 01 02 F6 | 	mov	_var01, arg01
2a548     0A 13 02 F6 | 	mov	arg01, arg02
2a54c     1A 12 06 F1 | 	add	arg01, #26
2a550                 | ' {
2a550                 | ' 
2a550                 | ' 	return *((WORD*)ptr);
2a550     09 FB E1 FA | 	rdword	result1, arg01
2a554     FD 12 32 F9 | 	getword	arg01, result1, #0
2a558     00 01 C2 FA | 	rdbyte	_var01, _var01
2a55c     03 00 0E F2 | 	cmp	_var01, #3 wz
2a560     14 14 06 A1 |  if_e	add	arg02, #20
2a564                 | ' {
2a564                 | ' 
2a564                 | ' 	return *((WORD*)ptr);
2a564     0A FB E1 AA |  if_e	rdword	result1, arg02
2a568     10 FA 65 A0 |  if_e	shl	result1, #16
2a56c     FD 12 42 A5 |  if_e	or	arg01, result1
2a570                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2a570                 | ' 	}
2a570                 | ' 
2a570                 | ' 	return cl;
2a570     09 FB 01 F6 | 	mov	result1, arg01
2a574                 | _fatfs_cc_ld_clust_ret
2a574     2D 00 64 FD | 	ret
2a578                 | 
2a578                 | _fatfs_cc_st_clust
2a578     09 01 02 F6 | 	mov	_var01, arg01
2a57c     0A 13 02 F6 | 	mov	arg01, arg02
2a580     1A 12 06 F1 | 	add	arg01, #26
2a584     09 17 52 FC | 	wrword	arg03, arg01
2a588     00 01 C2 FA | 	rdbyte	_var01, _var01
2a58c     03 00 0E F2 | 	cmp	_var01, #3 wz
2a590     14 14 06 A1 |  if_e	add	arg02, #20
2a594     10 16 46 A0 |  if_e	shr	arg03, #16
2a598     0A 17 52 AC |  if_e	wrword	arg03, arg02
2a59c                 | _fatfs_cc_st_clust_ret
2a59c     2D 00 64 FD | 	ret
2a5a0                 | 
2a5a0                 | _fatfs_cc_cmp_lfn
2a5a0     07 4A 05 F6 | 	mov	COUNT_, #7
2a5a4     A8 00 A0 FD | 	call	#pushregs_
2a5a8     09 27 02 F6 | 	mov	local01, arg01
2a5ac     0A 13 02 F6 | 	mov	arg01, arg02
2a5b0     1A 12 06 F1 | 	add	arg01, #26
2a5b4                 | ' {
2a5b4                 | ' 
2a5b4                 | ' 	return *((WORD*)ptr);
2a5b4     09 FB E9 FA | 	rdword	result1, arg01 wz
2a5b8     00 FA 05 56 |  if_ne	mov	result1, #0
2a5bc     E0 00 90 5D |  if_ne	jmp	#LR__4316
2a5c0     0A 29 C2 FA | 	rdbyte	local02, arg02
2a5c4     3F 28 06 F5 | 	and	local02, #63
2a5c8     01 28 86 F1 | 	sub	local02, #1
2a5cc     0D 28 06 FD | 	qmul	local02, #13
2a5d0                 | ' 
2a5d0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2a5d0                 | ' 
2a5d0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2a5d0     01 2A 06 F6 | 	mov	local03, #1
2a5d4     00 2C 06 F6 | 	mov	local04, #0
2a5d8     18 2E 62 FD | 	getqx	local05
2a5dc                 | LR__4310
2a5dc     0D 2C 16 F2 | 	cmp	local04, #13 wc
2a5e0     9C 00 90 3D |  if_ae	jmp	#LR__4315
2a5e4     0A 13 02 F6 | 	mov	arg01, arg02
2a5e8     16 29 02 F6 | 	mov	local02, local04
2a5ec     01 00 00 FF 
2a5f0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a5f4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a5f8     14 29 C2 FA | 	rdbyte	local02, local02
2a5fc     01 28 06 FA | 	mul	local02, #1
2a600     14 13 02 F1 | 	add	arg01, local02
2a604     01 00 00 FF 
2a608     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a60c                 | ' {
2a60c                 | ' 
2a60c                 | ' 	return *((WORD*)ptr);
2a60c     09 FB E1 FA | 	rdword	result1, arg01
2a610     FD 30 02 F6 | 	mov	local06, result1
2a614     15 29 02 F6 | 	mov	local02, local03
2a618     0F 28 4E F7 | 	zerox	local02, #15 wz
2a61c     44 00 90 AD |  if_e	jmp	#LR__4313
2a620     00 2F 16 F2 | 	cmp	local05, #256 wc
2a624     2C 00 90 3D |  if_ae	jmp	#LR__4311
2a628     18 13 32 F9 | 	getword	arg01, local06, #0
2a62c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2a630     FD 28 02 F6 | 	mov	local02, result1
2a634     17 2B 02 F6 | 	mov	local03, local05
2a638     01 2A 66 F0 | 	shl	local03, #1
2a63c     13 2B 02 F1 | 	add	local03, local01
2a640     15 13 E2 FA | 	rdword	arg01, local03
2a644     01 2E 06 F1 | 	add	local05, #1
2a648     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2a64c     FD 28 0A F2 | 	cmp	local02, result1 wz
2a650     08 00 90 AD |  if_e	jmp	#LR__4312
2a654                 | LR__4311
2a654                 | ' 				return 0;
2a654     00 FA 05 F6 | 	mov	result1, #0
2a658     44 00 90 FD | 	jmp	#LR__4316
2a65c                 | LR__4312
2a65c     18 2B 02 F6 | 	mov	local03, local06
2a660     14 00 90 FD | 	jmp	#LR__4314
2a664                 | LR__4313
2a664     18 31 32 F9 | 	getword	local06, local06, #0
2a668     7F 00 00 FF 
2a66c     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2a670     00 FA 05 56 |  if_ne	mov	result1, #0
2a674     28 00 90 5D |  if_ne	jmp	#LR__4316
2a678                 | LR__4314
2a678     01 2C 06 F1 | 	add	local04, #1
2a67c     5C FF 9F FD | 	jmp	#LR__4310
2a680                 | LR__4315
2a680     0A 29 C2 FA | 	rdbyte	local02, arg02
2a684     40 28 CE F7 | 	test	local02, #64 wz
2a688     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2a68c     01 2E 66 50 |  if_ne	shl	local05, #1
2a690     13 2F 02 51 |  if_ne	add	local05, local01
2a694     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2a698     00 FA 05 56 |  if_ne	mov	result1, #0
2a69c                 | ' 
2a69c                 | ' 	return 1;
2a69c     01 FA 05 A6 |  if_e	mov	result1, #1
2a6a0                 | LR__4316
2a6a0     A7 F0 03 F6 | 	mov	ptra, fp
2a6a4     B2 00 A0 FD | 	call	#popregs_
2a6a8                 | _fatfs_cc_cmp_lfn_ret
2a6a8     2D 00 64 FD | 	ret
2a6ac                 | 
2a6ac                 | _fatfs_cc_pick_lfn
2a6ac     09 01 02 F6 | 	mov	_var01, arg01
2a6b0     0A 13 02 F6 | 	mov	arg01, arg02
2a6b4     1A 12 06 F1 | 	add	arg01, #26
2a6b8                 | ' {
2a6b8                 | ' 
2a6b8                 | ' 	return *((WORD*)ptr);
2a6b8     09 FB E9 FA | 	rdword	result1, arg01 wz
2a6bc     00 FA 05 56 |  if_ne	mov	result1, #0
2a6c0     D4 00 90 5D |  if_ne	jmp	#LR__4325
2a6c4     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a6c8     40 02 26 F5 | 	andn	_var02, #64
2a6cc     01 02 86 F1 | 	sub	_var02, #1
2a6d0     0D 02 06 FD | 	qmul	_var02, #13
2a6d4                 | ' 
2a6d4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2a6d4                 | ' 
2a6d4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2a6d4     01 04 06 F6 | 	mov	_var03, #1
2a6d8     00 06 06 F6 | 	mov	_var04, #0
2a6dc     18 08 62 FD | 	getqx	_var05
2a6e0                 | LR__4320
2a6e0     0D 06 16 F2 | 	cmp	_var04, #13 wc
2a6e4     80 00 90 3D |  if_ae	jmp	#LR__4323
2a6e8     0A 13 02 F6 | 	mov	arg01, arg02
2a6ec     03 03 02 F6 | 	mov	_var02, _var04
2a6f0     01 00 00 FF 
2a6f4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a6f8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2a6fc     01 03 C2 FA | 	rdbyte	_var02, _var02
2a700     01 02 06 FA | 	mul	_var02, #1
2a704     01 13 02 F1 | 	add	arg01, _var02
2a708     01 00 00 FF 
2a70c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a710                 | ' {
2a710                 | ' 
2a710                 | ' 	return *((WORD*)ptr);
2a710     09 FB E1 FA | 	rdword	result1, arg01
2a714     FD 0A 02 F6 | 	mov	_var06, result1
2a718     02 03 02 F6 | 	mov	_var02, _var03
2a71c     0F 02 4E F7 | 	zerox	_var02, #15 wz
2a720     28 00 90 AD |  if_e	jmp	#LR__4321
2a724     00 09 16 F2 | 	cmp	_var05, #256 wc
2a728     00 FA 05 36 |  if_ae	mov	result1, #0
2a72c     68 00 90 3D |  if_ae	jmp	#LR__4325
2a730     04 03 02 F6 | 	mov	_var02, _var05
2a734     01 02 66 F0 | 	shl	_var02, #1
2a738     00 03 02 F1 | 	add	_var02, _var01
2a73c     05 05 02 F6 | 	mov	_var03, _var06
2a740     01 05 52 FC | 	wrword	_var03, _var02
2a744     01 08 06 F1 | 	add	_var05, #1
2a748     14 00 90 FD | 	jmp	#LR__4322
2a74c                 | LR__4321
2a74c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2a750     7F 00 00 FF 
2a754     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2a758     00 FA 05 56 |  if_ne	mov	result1, #0
2a75c     38 00 90 5D |  if_ne	jmp	#LR__4325
2a760                 | LR__4322
2a760     01 06 06 F1 | 	add	_var04, #1
2a764     78 FF 9F FD | 	jmp	#LR__4320
2a768                 | LR__4323
2a768     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a76c     40 02 CE F7 | 	test	_var02, #64 wz
2a770     02 0D 02 56 |  if_ne	mov	_var07, _var03
2a774     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2a778     18 00 90 AD |  if_e	jmp	#LR__4324
2a77c     00 09 16 F2 | 	cmp	_var05, #256 wc
2a780     00 FA 05 36 |  if_ae	mov	result1, #0
2a784     10 00 90 3D |  if_ae	jmp	#LR__4325
2a788     01 08 66 F0 | 	shl	_var05, #1
2a78c     00 09 02 F1 | 	add	_var05, _var01
2a790     04 01 58 FC | 	wrword	#0, _var05
2a794                 | LR__4324
2a794                 | ' 		lfnbuf[i] = 0;
2a794                 | ' 	}
2a794                 | ' 
2a794                 | ' 	return 1;
2a794     01 FA 05 F6 | 	mov	result1, #1
2a798                 | LR__4325
2a798                 | _fatfs_cc_pick_lfn_ret
2a798     2D 00 64 FD | 	ret
2a79c                 | 
2a79c                 | _fatfs_cc_put_lfn
2a79c     0D 14 06 F1 | 	add	arg02, #13
2a7a0     0A 19 42 FC | 	wrbyte	arg04, arg02
2a7a4     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2a7a8     01 18 86 F1 | 	sub	arg04, #1
2a7ac     0D 18 06 FD | 	qmul	arg04, #13
2a7b0     09 01 02 F6 | 	mov	_var01, arg01
2a7b4     02 14 86 F1 | 	sub	arg02, #2
2a7b8     0A 1F 48 FC | 	wrbyte	#15, arg02
2a7bc     01 14 06 F1 | 	add	arg02, #1
2a7c0     0A 01 48 FC | 	wrbyte	#0, arg02
2a7c4     0C 14 86 F1 | 	sub	arg02, #12
2a7c8     0A 13 02 F6 | 	mov	arg01, arg02
2a7cc     1A 12 06 F1 | 	add	arg01, #26
2a7d0     09 01 58 FC | 	wrword	#0, arg01
2a7d4     00 02 06 F6 | 	mov	_var02, #0
2a7d8     00 04 06 F6 | 	mov	_var03, #0
2a7dc                 | ' 	BYTE* dir,
2a7dc                 | ' 	BYTE ord,
2a7dc                 | ' 	BYTE sum
2a7dc                 | ' )
2a7dc                 | ' {
2a7dc                 | ' 	UINT i, s;
2a7dc                 | ' 	WCHAR wc;
2a7dc                 | ' 
2a7dc                 | ' 
2a7dc                 | ' 	dir[ 13 ] = sum;
2a7dc                 | ' 	dir[ 11 ] =  0x0F ;
2a7dc                 | ' 	dir[ 12 ] = 0;
2a7dc                 | ' 	st_word(dir +  26 , 0);
2a7dc                 | ' 
2a7dc                 | ' 	i = (ord - 1) * 13;
2a7dc                 | ' 	s = wc = 0;
2a7dc                 | ' 	do {
2a7dc     01 00 00 FF 
2a7e0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a7e4     18 06 62 FD | 	getqx	_var04
2a7e8     97 2A 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
2a7ec                 | LR__4330
2a7ec     01 19 32 F9 | 	getword	arg04, _var02, #0
2a7f0     7F 00 00 FF 
2a7f4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2a7f8     03 13 02 56 |  if_ne	mov	arg01, _var04
2a7fc     01 06 06 51 |  if_ne	add	_var04, #1
2a800     01 12 66 50 |  if_ne	shl	arg01, #1
2a804     00 13 02 51 |  if_ne	add	arg01, _var01
2a808     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2a80c     0A 13 02 F6 | 	mov	arg01, arg02
2a810     02 19 02 F6 | 	mov	arg04, _var03
2a814     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2a818     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a81c     01 18 06 FA | 	mul	arg04, #1
2a820     0C 13 02 F1 | 	add	arg01, arg04
2a824     09 03 52 FC | 	wrword	_var02, arg01
2a828     01 19 02 F6 | 	mov	arg04, _var02
2a82c     0F 18 4E F7 | 	zerox	arg04, #15 wz
2a830     0F 02 CE A9 |  if_e	bmask	_var02, #15
2a834     01 04 06 F1 | 	add	_var03, #1
2a838     0D 04 16 F2 | 	cmp	_var03, #13 wc
2a83c     AC FF 9F CD |  if_b	jmp	#LR__4330
2a840                 | LR__4331
2a840     01 00 00 FF 
2a844     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a848     01 03 32 F9 | 	getword	_var02, _var02, #0
2a84c     7F 00 00 FF 
2a850     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2a854     01 06 66 50 |  if_ne	shl	_var04, #1
2a858     00 07 02 51 |  if_ne	add	_var04, _var01
2a85c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2a860     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2a864     40 16 46 A5 |  if_e	or	arg03, #64
2a868     0A 17 42 FC | 	wrbyte	arg03, arg02
2a86c                 | _fatfs_cc_put_lfn_ret
2a86c     2D 00 64 FD | 	ret
2a870                 | 
2a870                 | _fatfs_cc_gen_numname
2a870     08 4A 05 F6 | 	mov	COUNT_, #8
2a874     A8 00 A0 FD | 	call	#pushregs_
2a878     2C F0 07 F1 | 	add	ptra, #44
2a87c     09 27 02 F6 | 	mov	local01, arg01
2a880     0A 29 02 F6 | 	mov	local02, arg02
2a884     0B 2B 02 F6 | 	mov	local03, arg03
2a888     0C 2D 02 F6 | 	mov	local04, arg04
2a88c     13 13 02 F6 | 	mov	arg01, local01
2a890     14 15 02 F6 | 	mov	arg02, local02
2a894     0B 16 06 F6 | 	mov	arg03, #11
2a898     98 72 BF FD | 	call	#__system____builtin_memmove
2a89c     06 2C 16 F2 | 	cmp	local04, #6 wc
2a8a0     48 00 90 CD |  if_b	jmp	#LR__4345
2a8a4     16 2F 02 F6 | 	mov	local05, local04
2a8a8     97 1E 48 FB | 	callpa	#(@LR__4343-@LR__4340)>>2,fcache_load_ptr_
2a8ac                 | ' 		sreg = seq;
2a8ac                 | ' 		while (*lfn) {
2a8ac                 | LR__4340
2a8ac     15 31 EA FA | 	rdword	local06, local03 wz
2a8b0     34 00 90 AD |  if_e	jmp	#LR__4344
2a8b4     15 33 E2 FA | 	rdword	local07, local03
2a8b8                 | ' 			wc = *lfn++;
2a8b8                 | ' 			for (i = 0; i < 16; i++) {
2a8b8     02 2A 06 F1 | 	add	local03, #2
2a8bc     10 12 DC FC | 	rep	@LR__4342, #16
2a8c0                 | LR__4341
2a8c0     01 2E 66 F0 | 	shl	local05, #1
2a8c4     19 31 32 F9 | 	getword	local06, local07, #0
2a8c8     01 30 06 F5 | 	and	local06, #1
2a8cc     18 2F 02 F1 | 	add	local05, local06
2a8d0     19 33 32 F9 | 	getword	local07, local07, #0
2a8d4     01 32 46 F0 | 	shr	local07, #1
2a8d8     10 2E 2E F4 | 	testbn	local05, #16 wz
2a8dc     88 00 00 5F 
2a8e0     21 2E 66 55 |  if_ne	xor	local05, ##69665
2a8e4                 | LR__4342
2a8e4     C4 FF 9F FD | 	jmp	#LR__4340
2a8e8                 | LR__4343
2a8e8                 | LR__4344
2a8e8     17 2D 02 F6 | 	mov	local04, local05
2a8ec                 | LR__4345
2a8ec     07 32 06 F6 | 	mov	local07, #7
2a8f0                 | ' 			}
2a8f0                 | ' 		}
2a8f0                 | ' 		seq = (UINT)sreg;
2a8f0                 | ' 	}
2a8f0                 | ' 
2a8f0                 | ' 
2a8f0                 | ' 	i = 7;
2a8f0                 | ' 	do {
2a8f0     10 4E 05 F1 | 	add	fp, #16
2a8f4     97 1A 48 FB | 	callpa	#(@LR__4347-@LR__4346)>>2,fcache_load_ptr_
2a8f8                 | LR__4346
2a8f8     16 2F 42 F8 | 	getnib	local05, local04, #0
2a8fc     30 2E 06 F1 | 	add	local05, #48
2a900     04 2C 46 F0 | 	shr	local04, #4
2a904     17 31 E2 F8 | 	getbyte	local06, local05, #0
2a908     3A 30 16 F2 | 	cmp	local06, #58 wc
2a90c     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2a910     07 2E 06 31 |  if_ae	add	local05, #7
2a914     19 31 02 F6 | 	mov	local06, local07
2a918     01 32 8E F1 | 	sub	local07, #1 wz
2a91c     A7 30 02 F1 | 	add	local06, fp
2a920     18 2F 42 FC | 	wrbyte	local05, local06
2a924     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2a928     CC FF 9F 5D |  if_ne	jmp	#LR__4346
2a92c                 | LR__4347
2a92c     19 31 02 F6 | 	mov	local06, local07
2a930     A7 30 02 F1 | 	add	local06, fp
2a934     18 FD 48 FC | 	wrbyte	#126, local06
2a938                 | ' 	ns[i] = '~';
2a938                 | ' 
2a938                 | ' 
2a938                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2a938     00 2E 06 F6 | 	mov	local05, #0
2a93c     10 4E 85 F1 | 	sub	fp, #16
2a940     97 2A 48 FB | 	callpa	#(@LR__4350-@LR__4348)>>2,fcache_load_ptr_
2a944                 | LR__4348
2a944     19 2F 12 F2 | 	cmp	local05, local07 wc
2a948     4C 00 90 3D |  if_ae	jmp	#LR__4351
2a94c     17 31 02 F6 | 	mov	local06, local05
2a950     13 31 02 F1 | 	add	local06, local01
2a954     18 31 C2 FA | 	rdbyte	local06, local06
2a958     20 30 0E F2 | 	cmp	local06, #32 wz
2a95c     38 00 90 AD |  if_e	jmp	#LR__4351
2a960     17 13 02 F6 | 	mov	arg01, local05
2a964     13 13 02 F1 | 	add	arg01, local01
2a968     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2a96c     00 FA 05 56 |  if_ne	mov	result1, #0
2a970                 | ' 
2a970                 | ' 	return 0;
2a970     00 FA 05 A6 |  if_e	mov	result1, #0
2a974     00 FA 0D F2 | 	cmp	result1, #0 wz
2a978     14 00 90 AD |  if_e	jmp	#LR__4349
2a97c     19 31 02 F6 | 	mov	local06, local07
2a980     01 30 86 F1 | 	sub	local06, #1
2a984     18 2F 0A F2 | 	cmp	local05, local06 wz
2a988     0C 00 90 AD |  if_e	jmp	#LR__4351
2a98c     01 2E 06 F1 | 	add	local05, #1
2a990                 | LR__4349
2a990     01 2E 06 F1 | 	add	local05, #1
2a994     AC FF 9F FD | 	jmp	#LR__4348
2a998                 | LR__4350
2a998                 | LR__4351
2a998     97 20 48 FB | 	callpa	#(@LR__4355-@LR__4352)>>2,fcache_load_ptr_
2a99c                 | ' 			j++;
2a99c                 | ' 		}
2a99c                 | ' 	}
2a99c                 | ' 	do {
2a99c                 | LR__4352
2a99c     17 31 02 F6 | 	mov	local06, local05
2a9a0     13 31 02 F1 | 	add	local06, local01
2a9a4     08 32 16 F2 | 	cmp	local07, #8 wc
2a9a8     01 2E 06 F1 | 	add	local05, #1
2a9ac     1C 00 90 3D |  if_ae	jmp	#LR__4353
2a9b0     19 2D 02 F6 | 	mov	local04, local07
2a9b4     10 4E 05 F1 | 	add	fp, #16
2a9b8     A7 2C 02 F1 | 	add	local04, fp
2a9bc     16 35 C2 FA | 	rdbyte	local08, local04
2a9c0     01 32 06 F1 | 	add	local07, #1
2a9c4     10 4E 85 F1 | 	sub	fp, #16
2a9c8     04 00 90 FD | 	jmp	#LR__4354
2a9cc                 | LR__4353
2a9cc     20 34 06 F6 | 	mov	local08, #32
2a9d0                 | LR__4354
2a9d0     18 35 42 FC | 	wrbyte	local08, local06
2a9d4     08 2E 16 F2 | 	cmp	local05, #8 wc
2a9d8     C0 FF 9F CD |  if_b	jmp	#LR__4352
2a9dc                 | LR__4355
2a9dc     A7 F0 03 F6 | 	mov	ptra, fp
2a9e0     B2 00 A0 FD | 	call	#popregs_
2a9e4                 | _fatfs_cc_gen_numname_ret
2a9e4     2D 00 64 FD | 	ret
2a9e8                 | 
2a9e8                 | _fatfs_cc_sum_sfn
2a9e8     00 00 06 F6 | 	mov	_var01, #0
2a9ec                 | ' )
2a9ec                 | ' {
2a9ec                 | ' 	BYTE sum = 0;
2a9ec                 | ' 	UINT n = 11;
2a9ec                 | ' 
2a9ec                 | ' 	do {
2a9ec     97 12 48 FB | 	callpa	#(@LR__4362-@LR__4360)>>2,fcache_load_ptr_
2a9f0                 | LR__4360
2a9f0     0B 10 DC FC | 	rep	@LR__4363, #11
2a9f4                 | LR__4361
2a9f4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2a9f8     01 FA 45 F0 | 	shr	result1, #1
2a9fc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2aa00     07 00 66 F0 | 	shl	_var01, #7
2aa04     00 FB 01 F1 | 	add	result1, _var01
2aa08     09 01 C2 FA | 	rdbyte	_var01, arg01
2aa0c     FD 00 02 F1 | 	add	_var01, result1
2aa10     01 12 06 F1 | 	add	arg01, #1
2aa14                 | LR__4362
2aa14                 | LR__4363
2aa14                 | ' 	return sum;
2aa14     00 FB 01 F6 | 	mov	result1, _var01
2aa18                 | _fatfs_cc_sum_sfn_ret
2aa18     2D 00 64 FD | 	ret
2aa1c                 | 
2aa1c                 | _fatfs_cc_dir_read
2aa1c     0C 4A 05 F6 | 	mov	COUNT_, #12
2aa20     A8 00 A0 FD | 	call	#pushregs_
2aa24     09 27 02 F6 | 	mov	local01, arg01
2aa28     0A 29 02 F6 | 	mov	local02, arg02
2aa2c     04 2A 06 F6 | 	mov	local03, #4
2aa30     13 2D 02 FB | 	rdlong	local04, local01
2aa34     FF 2E 06 F6 | 	mov	local05, #255
2aa38     FF 30 06 F6 | 	mov	local06, #255
2aa3c                 | ' )
2aa3c                 | ' {
2aa3c                 | ' 	FRESULT res = FR_NO_FILE;
2aa3c                 | ' 	FATFS *fs = dp->obj.fs;
2aa3c                 | ' 	BYTE attr, b;
2aa3c                 | ' 
2aa3c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2aa3c                 | ' 
2aa3c                 | ' 
2aa3c                 | ' 	while (dp->sect) {
2aa3c                 | LR__4370
2aa3c     18 26 06 F1 | 	add	local01, #24
2aa40     13 FB 09 FB | 	rdlong	result1, local01 wz
2aa44     18 26 86 F1 | 	sub	local01, #24
2aa48     AC 01 90 AD |  if_e	jmp	#LR__4380
2aa4c     18 26 06 F1 | 	add	local01, #24
2aa50     13 15 02 FB | 	rdlong	arg02, local01
2aa54     18 26 86 F1 | 	sub	local01, #24
2aa58     16 13 02 F6 | 	mov	arg01, local04
2aa5c     AC ED BF FD | 	call	#_fatfs_cc_move_window
2aa60     FD 2A 0A F6 | 	mov	local03, result1 wz
2aa64     90 01 90 5D |  if_ne	jmp	#LR__4380
2aa68     1C 26 06 F1 | 	add	local01, #28
2aa6c     13 FB 01 FB | 	rdlong	result1, local01
2aa70     1C 26 86 F1 | 	sub	local01, #28
2aa74     FD 32 C2 FA | 	rdbyte	local07, result1
2aa78     19 FB 01 F6 | 	mov	result1, local07
2aa7c     07 FA 4D F7 | 	zerox	result1, #7 wz
2aa80     04 2A 06 A6 |  if_e	mov	local03, #4
2aa84                 | ' 			res = FR_NO_FILE; break;
2aa84     70 01 90 AD |  if_e	jmp	#LR__4380
2aa88     1C 26 06 F1 | 	add	local01, #28
2aa8c     13 35 02 FB | 	rdlong	local08, local01
2aa90     0B 34 06 F1 | 	add	local08, #11
2aa94     1A 37 C2 FA | 	rdbyte	local09, local08
2aa98     3F 36 06 F5 | 	and	local09, #63
2aa9c     16 26 86 F1 | 	sub	local01, #22
2aaa0     13 37 42 FC | 	wrbyte	local09, local01
2aaa4     06 26 86 F1 | 	sub	local01, #6
2aaa8     19 FB E1 F8 | 	getbyte	result1, local07, #0
2aaac     E5 FA 0D F2 | 	cmp	result1, #229 wz
2aab0     19 35 02 56 |  if_ne	mov	local08, local07
2aab4     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2aab8     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2aabc     1C 00 90 AD |  if_e	jmp	#LR__4371
2aac0     00 38 06 F6 | 	mov	local10, #0
2aac4     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2aac8     20 34 26 F5 | 	andn	local08, #32
2aacc     08 34 0E F2 | 	cmp	local08, #8 wz
2aad0     01 38 06 A6 |  if_e	mov	local10, #1
2aad4     14 39 0A F2 | 	cmp	local10, local02 wz
2aad8     08 00 90 AD |  if_e	jmp	#LR__4372
2aadc                 | LR__4371
2aadc     FF 2E 06 F6 | 	mov	local05, #255
2aae0     00 01 90 FD | 	jmp	#LR__4379
2aae4                 | LR__4372
2aae4     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2aae8     0F 36 0E F2 | 	cmp	local09, #15 wz
2aaec     B4 00 90 5D |  if_ne	jmp	#LR__4376
2aaf0     19 3B E2 F8 | 	getbyte	local11, local07, #0
2aaf4     40 3A CE F7 | 	test	local11, #64 wz
2aaf8     30 00 90 AD |  if_e	jmp	#LR__4373
2aafc     1C 26 06 F1 | 	add	local01, #28
2ab00     13 3B 02 FB | 	rdlong	local11, local01
2ab04     0D 3A 06 F1 | 	add	local11, #13
2ab08     1D 31 C2 FA | 	rdbyte	local06, local11
2ab0c     19 33 E2 F8 | 	getbyte	local07, local07, #0
2ab10     BF 32 06 F5 | 	and	local07, #191
2ab14     19 2F 02 F6 | 	mov	local05, local07
2ab18     0C 26 86 F1 | 	sub	local01, #12
2ab1c     13 3B 02 FB | 	rdlong	local11, local01
2ab20     1C 26 06 F1 | 	add	local01, #28
2ab24     13 3B 62 FC | 	wrlong	local11, local01
2ab28     2C 26 86 F1 | 	sub	local01, #44
2ab2c                 | LR__4373
2ab2c     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ab30     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ab34     1C 35 0A F2 | 	cmp	local08, local10 wz
2ab38     5C 00 90 5D |  if_ne	jmp	#LR__4374
2ab3c     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ab40     1C 26 06 F1 | 	add	local01, #28
2ab44     13 37 02 FB | 	rdlong	local09, local01
2ab48     1C 26 86 F1 | 	sub	local01, #28
2ab4c     0D 36 06 F1 | 	add	local09, #13
2ab50     1B 35 C2 FA | 	rdbyte	local08, local09
2ab54     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ab58     1B 39 0A F2 | 	cmp	local10, local09 wz
2ab5c     38 00 90 5D |  if_ne	jmp	#LR__4374
2ab60     0C 2C 06 F1 | 	add	local04, #12
2ab64     16 13 02 FB | 	rdlong	arg01, local04
2ab68     0C 2C 86 F1 | 	sub	local04, #12
2ab6c     1C 26 06 F1 | 	add	local01, #28
2ab70     13 3D 02 FB | 	rdlong	local12, local01
2ab74     1C 26 86 F1 | 	sub	local01, #28
2ab78     1E 15 02 F6 | 	mov	arg02, local12
2ab7c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2ab80     00 FA 4D F2 | 	cmps	result1, #0 wz
2ab84     17 3D 02 56 |  if_ne	mov	local12, local05
2ab88     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2ab8c     01 3C 86 51 |  if_ne	sub	local12, #1
2ab90     1E 3B 02 56 |  if_ne	mov	local11, local12
2ab94     04 00 90 5D |  if_ne	jmp	#LR__4375
2ab98                 | LR__4374
2ab98     FF 3A 06 F6 | 	mov	local11, #255
2ab9c                 | LR__4375
2ab9c     1D 2F 02 F6 | 	mov	local05, local11
2aba0     40 00 90 FD | 	jmp	#LR__4378
2aba4                 | LR__4376
2aba4     17 3B 02 F6 | 	mov	local11, local05
2aba8     07 3A 4E F7 | 	zerox	local11, #7 wz
2abac     20 00 90 5D |  if_ne	jmp	#LR__4377
2abb0     18 31 E2 F8 | 	getbyte	local06, local06, #0
2abb4     1C 26 06 F1 | 	add	local01, #28
2abb8     13 13 02 FB | 	rdlong	arg01, local01
2abbc     1C 26 86 F1 | 	sub	local01, #28
2abc0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2abc4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2abc8     FD 30 0A F2 | 	cmp	local06, result1 wz
2abcc     28 00 90 AD |  if_e	jmp	#LR__4380
2abd0                 | LR__4377
2abd0     2C 26 06 F1 | 	add	local01, #44
2abd4     FF FF FF FF 
2abd8     13 FF 6B FC | 	wrlong	##-1, local01
2abdc     2C 26 86 F1 | 	sub	local01, #44
2abe0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2abe0                 | ' 					}
2abe0                 | ' 					break;
2abe0     14 00 90 FD | 	jmp	#LR__4380
2abe4                 | LR__4378
2abe4                 | LR__4379
2abe4     13 13 02 F6 | 	mov	arg01, local01
2abe8     00 14 06 F6 | 	mov	arg02, #0
2abec     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2abf0     FD 2A 0A F6 | 	mov	local03, result1 wz
2abf4     44 FE 9F AD |  if_e	jmp	#LR__4370
2abf8                 | LR__4380
2abf8     00 2A 0E F2 | 	cmp	local03, #0 wz
2abfc     18 26 06 51 |  if_ne	add	local01, #24
2ac00     13 01 68 5C |  if_ne	wrlong	#0, local01
2ac04                 | ' 	return res;
2ac04     15 FB 01 F6 | 	mov	result1, local03
2ac08     A7 F0 03 F6 | 	mov	ptra, fp
2ac0c     B2 00 A0 FD | 	call	#popregs_
2ac10                 | _fatfs_cc_dir_read_ret
2ac10     2D 00 64 FD | 	ret
2ac14                 | 
2ac14                 | _fatfs_cc_dir_find
2ac14     0B 4A 05 F6 | 	mov	COUNT_, #11
2ac18     A8 00 A0 FD | 	call	#pushregs_
2ac1c     09 27 02 F6 | 	mov	local01, arg01
2ac20     13 29 02 FB | 	rdlong	local02, local01
2ac24     13 13 02 F6 | 	mov	arg01, local01
2ac28     00 14 06 F6 | 	mov	arg02, #0
2ac2c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2ac30     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac34     18 02 90 5D |  if_ne	jmp	#LR__4402
2ac38     FF 2A 06 F6 | 	mov	local03, #255
2ac3c     FF 2C 06 F6 | 	mov	local04, #255
2ac40     2C 26 06 F1 | 	add	local01, #44
2ac44     FF FF FF FF 
2ac48     13 FF 6B FC | 	wrlong	##-1, local01
2ac4c     2C 26 86 F1 | 	sub	local01, #44
2ac50                 | ' #line 2404 "ff.c"
2ac50                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2ac50                 | ' 
2ac50                 | ' 	do {
2ac50                 | LR__4390
2ac50     18 26 06 F1 | 	add	local01, #24
2ac54     13 15 02 FB | 	rdlong	arg02, local01
2ac58     18 26 86 F1 | 	sub	local01, #24
2ac5c     14 13 02 F6 | 	mov	arg01, local02
2ac60     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2ac64     FD 2E 0A F6 | 	mov	local05, result1 wz
2ac68     E0 01 90 5D |  if_ne	jmp	#LR__4401
2ac6c     1C 26 06 F1 | 	add	local01, #28
2ac70     13 17 02 FB | 	rdlong	arg03, local01
2ac74     1C 26 86 F1 | 	sub	local01, #28
2ac78     0B 31 C2 FA | 	rdbyte	local06, arg03
2ac7c     18 17 02 F6 | 	mov	arg03, local06
2ac80     07 16 4E F7 | 	zerox	arg03, #7 wz
2ac84     04 2E 06 A6 |  if_e	mov	local05, #4
2ac88     C0 01 90 AD |  if_e	jmp	#LR__4401
2ac8c     1C 26 06 F1 | 	add	local01, #28
2ac90     13 33 02 FB | 	rdlong	local07, local01
2ac94     19 17 02 F6 | 	mov	arg03, local07
2ac98     0B 16 06 F1 | 	add	arg03, #11
2ac9c     0B 35 C2 FA | 	rdbyte	local08, arg03
2aca0     3F 34 06 F5 | 	and	local08, #63
2aca4     16 26 86 F1 | 	sub	local01, #22
2aca8     13 35 42 FC | 	wrbyte	local08, local01
2acac     06 26 86 F1 | 	sub	local01, #6
2acb0     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2acb4     E5 16 0E F2 | 	cmp	arg03, #229 wz
2acb8     18 00 90 AD |  if_e	jmp	#LR__4391
2acbc     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2acc0     08 16 CE F7 | 	test	arg03, #8 wz
2acc4     1A 33 02 56 |  if_ne	mov	local07, local08
2acc8     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2accc     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2acd0     18 00 90 AD |  if_e	jmp	#LR__4392
2acd4                 | LR__4391
2acd4     FF 2C 06 F6 | 	mov	local04, #255
2acd8     2C 26 06 F1 | 	add	local01, #44
2acdc     FF FF FF FF 
2ace0     13 FF 6B FC | 	wrlong	##-1, local01
2ace4     2C 26 86 F1 | 	sub	local01, #44
2ace8     4C 01 90 FD | 	jmp	#LR__4400
2acec                 | LR__4392
2acec     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2acf0     0F 34 0E F2 | 	cmp	local08, #15 wz
2acf4     C8 00 90 5D |  if_ne	jmp	#LR__4396
2acf8     2B 26 06 F1 | 	add	local01, #43
2acfc     13 35 C2 FA | 	rdbyte	local08, local01
2ad00     2B 26 86 F1 | 	sub	local01, #43
2ad04     40 34 CE F7 | 	test	local08, #64 wz
2ad08     2C 01 90 5D |  if_ne	jmp	#LR__4399
2ad0c     18 37 E2 F8 | 	getbyte	local09, local06, #0
2ad10     40 36 CE F7 | 	test	local09, #64 wz
2ad14     30 00 90 AD |  if_e	jmp	#LR__4393
2ad18     1C 26 06 F1 | 	add	local01, #28
2ad1c     13 37 02 FB | 	rdlong	local09, local01
2ad20     0D 36 06 F1 | 	add	local09, #13
2ad24     1B 2B C2 FA | 	rdbyte	local03, local09
2ad28     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ad2c     BF 30 06 F5 | 	and	local06, #191
2ad30     18 2D 02 F6 | 	mov	local04, local06
2ad34     0C 26 86 F1 | 	sub	local01, #12
2ad38     13 37 02 FB | 	rdlong	local09, local01
2ad3c     1C 26 06 F1 | 	add	local01, #28
2ad40     13 37 62 FC | 	wrlong	local09, local01
2ad44     2C 26 86 F1 | 	sub	local01, #44
2ad48                 | LR__4393
2ad48     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ad4c     16 33 E2 F8 | 	getbyte	local07, local04, #0
2ad50     19 39 0A F2 | 	cmp	local10, local07 wz
2ad54     5C 00 90 5D |  if_ne	jmp	#LR__4394
2ad58     15 35 E2 F8 | 	getbyte	local08, local03, #0
2ad5c     1C 26 06 F1 | 	add	local01, #28
2ad60     13 33 02 FB | 	rdlong	local07, local01
2ad64     1C 26 86 F1 | 	sub	local01, #28
2ad68     0D 32 06 F1 | 	add	local07, #13
2ad6c     19 31 C2 FA | 	rdbyte	local06, local07
2ad70     18 33 E2 F8 | 	getbyte	local07, local06, #0
2ad74     19 35 0A F2 | 	cmp	local08, local07 wz
2ad78     38 00 90 5D |  if_ne	jmp	#LR__4394
2ad7c     0C 28 06 F1 | 	add	local02, #12
2ad80     14 13 02 FB | 	rdlong	arg01, local02
2ad84     0C 28 86 F1 | 	sub	local02, #12
2ad88     1C 26 06 F1 | 	add	local01, #28
2ad8c     13 3B 02 FB | 	rdlong	local11, local01
2ad90     1C 26 86 F1 | 	sub	local01, #28
2ad94     1D 15 02 F6 | 	mov	arg02, local11
2ad98     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2ad9c     00 FA 4D F2 | 	cmps	result1, #0 wz
2ada0     16 3B 02 56 |  if_ne	mov	local11, local04
2ada4     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2ada8     01 3A 86 51 |  if_ne	sub	local11, #1
2adac     1D 37 02 56 |  if_ne	mov	local09, local11
2adb0     04 00 90 5D |  if_ne	jmp	#LR__4395
2adb4                 | LR__4394
2adb4     FF 36 06 F6 | 	mov	local09, #255
2adb8                 | LR__4395
2adb8     1B 2D 02 F6 | 	mov	local04, local09
2adbc     78 00 90 FD | 	jmp	#LR__4399
2adc0                 | LR__4396
2adc0     16 37 02 F6 | 	mov	local09, local04
2adc4     07 36 4E F7 | 	zerox	local09, #7 wz
2adc8     20 00 90 5D |  if_ne	jmp	#LR__4397
2adcc     15 39 E2 F8 | 	getbyte	local10, local03, #0
2add0     1C 26 06 F1 | 	add	local01, #28
2add4     13 13 02 FB | 	rdlong	arg01, local01
2add8     1C 26 86 F1 | 	sub	local01, #28
2addc     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2ade0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ade4     FD 38 0A F2 | 	cmp	local10, result1 wz
2ade8     60 00 90 AD |  if_e	jmp	#LR__4401
2adec                 | LR__4397
2adec     2B 26 06 F1 | 	add	local01, #43
2adf0     13 37 C2 FA | 	rdbyte	local09, local01
2adf4     2B 26 86 F1 | 	sub	local01, #43
2adf8     01 36 CE F7 | 	test	local09, #1 wz
2adfc     24 00 90 5D |  if_ne	jmp	#LR__4398
2ae00     1C 26 06 F1 | 	add	local01, #28
2ae04     13 13 02 FB | 	rdlong	arg01, local01
2ae08     04 26 06 F1 | 	add	local01, #4
2ae0c     13 15 02 F6 | 	mov	arg02, local01
2ae10     20 26 86 F1 | 	sub	local01, #32
2ae14     0B 16 06 F6 | 	mov	arg03, #11
2ae18     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2ae1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae20     28 00 90 AD |  if_e	jmp	#LR__4401
2ae24                 | LR__4398
2ae24     FF 2C 06 F6 | 	mov	local04, #255
2ae28     2C 26 06 F1 | 	add	local01, #44
2ae2c     FF FF FF FF 
2ae30     13 FF 6B FC | 	wrlong	##-1, local01
2ae34     2C 26 86 F1 | 	sub	local01, #44
2ae38                 | LR__4399
2ae38                 | LR__4400
2ae38     13 13 02 F6 | 	mov	arg01, local01
2ae3c     00 14 06 F6 | 	mov	arg02, #0
2ae40     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2ae44     FD 2E 0A F6 | 	mov	local05, result1 wz
2ae48     04 FE 9F AD |  if_e	jmp	#LR__4390
2ae4c                 | LR__4401
2ae4c                 | ' 
2ae4c                 | ' 	return res;
2ae4c     17 FB 01 F6 | 	mov	result1, local05
2ae50                 | LR__4402
2ae50     A7 F0 03 F6 | 	mov	ptra, fp
2ae54     B2 00 A0 FD | 	call	#popregs_
2ae58                 | _fatfs_cc_dir_find_ret
2ae58     2D 00 64 FD | 	ret
2ae5c                 | 
2ae5c                 | _fatfs_cc_dir_register
2ae5c     0A 4A 05 F6 | 	mov	COUNT_, #10
2ae60     A8 00 A0 FD | 	call	#pushregs_
2ae64     2C F0 07 F1 | 	add	ptra, #44
2ae68     04 4E 05 F1 | 	add	fp, #4
2ae6c     A7 12 62 FC | 	wrlong	arg01, fp
2ae70     09 27 02 FB | 	rdlong	local01, arg01
2ae74     08 4E 05 F1 | 	add	fp, #8
2ae78     A7 26 62 FC | 	wrlong	local01, fp
2ae7c     08 4E 85 F1 | 	sub	fp, #8
2ae80     A7 28 02 FB | 	rdlong	local02, fp
2ae84     04 4E 85 F1 | 	sub	fp, #4
2ae88     2B 28 06 F1 | 	add	local02, #43
2ae8c     14 29 C2 FA | 	rdbyte	local02, local02
2ae90     A0 28 CE F7 | 	test	local02, #160 wz
2ae94     06 FA 05 56 |  if_ne	mov	result1, #6
2ae98     F8 03 90 5D |  if_ne	jmp	#LR__4425
2ae9c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2ae9c     14 4E 05 F1 | 	add	fp, #20
2aea0     A7 00 68 FC | 	wrlong	#0, fp
2aea4     14 4E 85 F1 | 	sub	fp, #20
2aea8     97 28 48 FB | 	callpa	#(@LR__4411-@LR__4410)>>2,fcache_load_ptr_
2aeac                 | LR__4410
2aeac     0C 4E 05 F1 | 	add	fp, #12
2aeb0     A7 28 02 FB | 	rdlong	local02, fp
2aeb4     0C 28 06 F1 | 	add	local02, #12
2aeb8     14 2B 02 FB | 	rdlong	local03, local02
2aebc     08 4E 05 F1 | 	add	fp, #8
2aec0     A7 2C 02 FB | 	rdlong	local04, fp
2aec4     14 4E 85 F1 | 	sub	fp, #20
2aec8     01 2C 66 F0 | 	shl	local04, #1
2aecc     15 2D 02 F1 | 	add	local04, local03
2aed0     16 29 EA FA | 	rdword	local02, local04 wz
2aed4     24 00 90 AD |  if_e	jmp	#LR__4412
2aed8     14 4E 05 F1 | 	add	fp, #20
2aedc     A7 2E 02 FB | 	rdlong	local05, fp
2aee0     17 31 02 F6 | 	mov	local06, local05
2aee4     17 33 02 F6 | 	mov	local07, local05
2aee8     19 35 02 F6 | 	mov	local08, local07
2aeec     01 34 06 F1 | 	add	local08, #1
2aef0     A7 34 62 FC | 	wrlong	local08, fp
2aef4     14 4E 85 F1 | 	sub	fp, #20
2aef8     B0 FF 9F FD | 	jmp	#LR__4410
2aefc                 | LR__4411
2aefc                 | LR__4412
2aefc     1C 4E 05 F1 | 	add	fp, #28
2af00     A7 12 02 F6 | 	mov	arg01, fp
2af04     18 4E 85 F1 | 	sub	fp, #24
2af08     A7 14 02 FB | 	rdlong	arg02, fp
2af0c     04 4E 85 F1 | 	sub	fp, #4
2af10     20 14 06 F1 | 	add	arg02, #32
2af14     0C 16 06 F6 | 	mov	arg03, #12
2af18     18 6C BF FD | 	call	#__system____builtin_memmove
2af1c     27 4E 05 F1 | 	add	fp, #39
2af20     A7 36 C2 FA | 	rdbyte	local09, fp
2af24     27 4E 85 F1 | 	sub	fp, #39
2af28     01 36 CE F7 | 	test	local09, #1 wz
2af2c     F4 00 90 AD |  if_e	jmp	#LR__4415
2af30     04 4E 05 F1 | 	add	fp, #4
2af34     A7 38 02 FB | 	rdlong	local10, fp
2af38     2B 38 06 F1 | 	add	local10, #43
2af3c     1C 81 48 FC | 	wrbyte	#64, local10
2af40                 | ' 		dp->fn[ 11 ] =  0x40 ;
2af40                 | ' 		for (n = 1; n < 100; n++) {
2af40     0C 4E 05 F1 | 	add	fp, #12
2af44     A7 02 68 FC | 	wrlong	#1, fp
2af48     10 4E 85 F1 | 	sub	fp, #16
2af4c                 | LR__4413
2af4c     10 4E 05 F1 | 	add	fp, #16
2af50     A7 28 02 FB | 	rdlong	local02, fp
2af54     10 4E 85 F1 | 	sub	fp, #16
2af58     64 28 16 F2 | 	cmp	local02, #100 wc
2af5c     70 00 90 3D |  if_ae	jmp	#LR__4414
2af60     04 4E 05 F1 | 	add	fp, #4
2af64     A7 12 02 FB | 	rdlong	arg01, fp
2af68     20 12 06 F1 | 	add	arg01, #32
2af6c     18 4E 05 F1 | 	add	fp, #24
2af70     A7 14 02 F6 | 	mov	arg02, fp
2af74     10 4E 85 F1 | 	sub	fp, #16
2af78     A7 38 02 FB | 	rdlong	local10, fp
2af7c     0C 38 06 F1 | 	add	local10, #12
2af80     1C 17 02 FB | 	rdlong	arg03, local10
2af84     04 4E 05 F1 | 	add	fp, #4
2af88     A7 18 02 FB | 	rdlong	arg04, fp
2af8c     10 4E 85 F1 | 	sub	fp, #16
2af90     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2af94     04 4E 05 F1 | 	add	fp, #4
2af98     A7 12 02 FB | 	rdlong	arg01, fp
2af9c     04 4E 85 F1 | 	sub	fp, #4
2afa0     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2afa4     08 4E 05 F1 | 	add	fp, #8
2afa8     A7 FA 61 FC | 	wrlong	result1, fp
2afac     00 FA 4D F2 | 	cmps	result1, #0 wz
2afb0     08 4E 85 F1 | 	sub	fp, #8
2afb4     18 00 90 5D |  if_ne	jmp	#LR__4414
2afb8     10 4E 05 F1 | 	add	fp, #16
2afbc     A7 38 02 FB | 	rdlong	local10, fp
2afc0     01 38 06 F1 | 	add	local10, #1
2afc4     A7 38 62 FC | 	wrlong	local10, fp
2afc8     10 4E 85 F1 | 	sub	fp, #16
2afcc     7C FF 9F FD | 	jmp	#LR__4413
2afd0                 | LR__4414
2afd0     10 4E 05 F1 | 	add	fp, #16
2afd4     A7 38 02 FB | 	rdlong	local10, fp
2afd8     10 4E 85 F1 | 	sub	fp, #16
2afdc     64 38 0E F2 | 	cmp	local10, #100 wz
2afe0     07 FA 05 A6 |  if_e	mov	result1, #7
2afe4     AC 02 90 AD |  if_e	jmp	#LR__4425
2afe8     08 4E 05 F1 | 	add	fp, #8
2afec     A7 38 02 FB | 	rdlong	local10, fp
2aff0     08 4E 85 F1 | 	sub	fp, #8
2aff4     04 38 0E F2 | 	cmp	local10, #4 wz
2aff8     08 4E 05 51 |  if_ne	add	fp, #8
2affc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2b000     08 4E 85 51 |  if_ne	sub	fp, #8
2b004     8C 02 90 5D |  if_ne	jmp	#LR__4425
2b008     04 4E 05 F1 | 	add	fp, #4
2b00c     A7 38 02 FB | 	rdlong	local10, fp
2b010     23 4E 05 F1 | 	add	fp, #35
2b014     A7 26 C2 FA | 	rdbyte	local01, fp
2b018     27 4E 85 F1 | 	sub	fp, #39
2b01c     2B 38 06 F1 | 	add	local10, #43
2b020     1C 27 42 FC | 	wrbyte	local01, local10
2b024                 | LR__4415
2b024     27 4E 05 F1 | 	add	fp, #39
2b028     A7 28 C2 FA | 	rdbyte	local02, fp
2b02c     27 4E 85 F1 | 	sub	fp, #39
2b030     02 28 CE F7 | 	test	local02, #2 wz
2b034     20 00 90 AD |  if_e	jmp	#LR__4416
2b038     14 4E 05 F1 | 	add	fp, #20
2b03c     A7 38 02 FB | 	rdlong	local10, fp
2b040     0C 38 06 F1 | 	add	local10, #12
2b044     0D 38 16 FD | 	qdiv	local10, #13
2b048     14 4E 85 F1 | 	sub	fp, #20
2b04c     18 38 62 FD | 	getqx	local10
2b050     01 38 06 F1 | 	add	local10, #1
2b054     04 00 90 FD | 	jmp	#LR__4417
2b058                 | LR__4416
2b058     01 38 06 F6 | 	mov	local10, #1
2b05c                 | LR__4417
2b05c     18 4E 05 F1 | 	add	fp, #24
2b060     A7 38 62 FC | 	wrlong	local10, fp
2b064     14 4E 85 F1 | 	sub	fp, #20
2b068     A7 12 02 FB | 	rdlong	arg01, fp
2b06c     1C 15 02 F6 | 	mov	arg02, local10
2b070     04 4E 85 F1 | 	sub	fp, #4
2b074     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2b078     08 4E 05 F1 | 	add	fp, #8
2b07c     A7 FA 61 FC | 	wrlong	result1, fp
2b080     08 4E 85 F1 | 	sub	fp, #8
2b084     00 FA 0D F2 | 	cmp	result1, #0 wz
2b088     38 01 90 5D |  if_ne	jmp	#LR__4422
2b08c     18 4E 05 F1 | 	add	fp, #24
2b090     A7 38 02 FB | 	rdlong	local10, fp
2b094     01 38 8E F1 | 	sub	local10, #1 wz
2b098     A7 38 62 FC | 	wrlong	local10, fp
2b09c     18 4E 85 F1 | 	sub	fp, #24
2b0a0     20 01 90 AD |  if_e	jmp	#LR__4422
2b0a4     04 4E 05 F1 | 	add	fp, #4
2b0a8     A7 38 02 FB | 	rdlong	local10, fp
2b0ac     1C 13 02 F6 | 	mov	arg01, local10
2b0b0     14 4E 05 F1 | 	add	fp, #20
2b0b4     A7 18 02 FB | 	rdlong	arg04, fp
2b0b8     18 4E 85 F1 | 	sub	fp, #24
2b0bc     05 18 66 F0 | 	shl	arg04, #5
2b0c0     10 38 06 F1 | 	add	local10, #16
2b0c4     1C 15 02 FB | 	rdlong	arg02, local10
2b0c8     0C 15 82 F1 | 	sub	arg02, arg04
2b0cc     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2b0d0     08 4E 05 F1 | 	add	fp, #8
2b0d4     A7 FA 61 FC | 	wrlong	result1, fp
2b0d8     08 4E 85 F1 | 	sub	fp, #8
2b0dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b0e0     E0 00 90 5D |  if_ne	jmp	#LR__4421
2b0e4     04 4E 05 F1 | 	add	fp, #4
2b0e8     A7 12 02 FB | 	rdlong	arg01, fp
2b0ec     04 4E 85 F1 | 	sub	fp, #4
2b0f0     20 12 06 F1 | 	add	arg01, #32
2b0f4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2b0f8     FD 38 02 F6 | 	mov	local10, result1
2b0fc     28 4E 05 F1 | 	add	fp, #40
2b100     A7 38 42 FC | 	wrbyte	local10, fp
2b104     28 4E 85 F1 | 	sub	fp, #40
2b108                 | ' 			sum = sum_sfn(dp->fn);
2b108                 | ' 			do {
2b108                 | LR__4418
2b108     0C 4E 05 F1 | 	add	fp, #12
2b10c     A7 12 02 FB | 	rdlong	arg01, fp
2b110     08 4E 85 F1 | 	sub	fp, #8
2b114     A7 26 02 FB | 	rdlong	local01, fp
2b118     04 4E 85 F1 | 	sub	fp, #4
2b11c     18 26 06 F1 | 	add	local01, #24
2b120     13 15 02 FB | 	rdlong	arg02, local01
2b124     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2b128     08 4E 05 F1 | 	add	fp, #8
2b12c     A7 FA 61 FC | 	wrlong	result1, fp
2b130     00 FA 4D F2 | 	cmps	result1, #0 wz
2b134     08 4E 85 F1 | 	sub	fp, #8
2b138     88 00 90 5D |  if_ne	jmp	#LR__4420
2b13c     0C 4E 05 F1 | 	add	fp, #12
2b140     A7 28 02 FB | 	rdlong	local02, fp
2b144     0C 28 06 F1 | 	add	local02, #12
2b148     14 13 02 FB | 	rdlong	arg01, local02
2b14c     08 4E 85 F1 | 	sub	fp, #8
2b150     A7 26 02 FB | 	rdlong	local01, fp
2b154     1C 26 06 F1 | 	add	local01, #28
2b158     13 15 02 FB | 	rdlong	arg02, local01
2b15c     14 4E 05 F1 | 	add	fp, #20
2b160     A7 16 02 FB | 	rdlong	arg03, fp
2b164     10 4E 05 F1 | 	add	fp, #16
2b168     A7 18 C2 FA | 	rdbyte	arg04, fp
2b16c     28 4E 85 F1 | 	sub	fp, #40
2b170     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2b174     0C 4E 05 F1 | 	add	fp, #12
2b178     A7 38 02 FB | 	rdlong	local10, fp
2b17c     03 38 06 F1 | 	add	local10, #3
2b180     1C 03 48 FC | 	wrbyte	#1, local10
2b184     08 4E 85 F1 | 	sub	fp, #8
2b188     A7 12 02 FB | 	rdlong	arg01, fp
2b18c     04 4E 85 F1 | 	sub	fp, #4
2b190     00 14 06 F6 | 	mov	arg02, #0
2b194     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2b198     08 4E 05 F1 | 	add	fp, #8
2b19c     A7 FA 61 FC | 	wrlong	result1, fp
2b1a0     00 FA 4D F2 | 	cmps	result1, #0 wz
2b1a4     08 4E 85 F1 | 	sub	fp, #8
2b1a8     18 00 90 5D |  if_ne	jmp	#LR__4419
2b1ac     18 4E 05 F1 | 	add	fp, #24
2b1b0     A7 38 02 FB | 	rdlong	local10, fp
2b1b4     01 38 8E F1 | 	sub	local10, #1 wz
2b1b8     A7 38 62 FC | 	wrlong	local10, fp
2b1bc     18 4E 85 F1 | 	sub	fp, #24
2b1c0     44 FF 9F 5D |  if_ne	jmp	#LR__4418
2b1c4                 | LR__4419
2b1c4                 | LR__4420
2b1c4                 | LR__4421
2b1c4                 | LR__4422
2b1c4     08 4E 05 F1 | 	add	fp, #8
2b1c8     A7 38 0A FB | 	rdlong	local10, fp wz
2b1cc     08 4E 85 F1 | 	sub	fp, #8
2b1d0     B4 00 90 5D |  if_ne	jmp	#LR__4424
2b1d4     0C 4E 05 F1 | 	add	fp, #12
2b1d8     A7 12 02 FB | 	rdlong	arg01, fp
2b1dc     08 4E 85 F1 | 	sub	fp, #8
2b1e0     A7 26 02 FB | 	rdlong	local01, fp
2b1e4     04 4E 85 F1 | 	sub	fp, #4
2b1e8     18 26 06 F1 | 	add	local01, #24
2b1ec     13 15 02 FB | 	rdlong	arg02, local01
2b1f0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2b1f4     08 4E 05 F1 | 	add	fp, #8
2b1f8     A7 FA 61 FC | 	wrlong	result1, fp
2b1fc     08 4E 85 F1 | 	sub	fp, #8
2b200     00 FA 0D F2 | 	cmp	result1, #0 wz
2b204     80 00 90 5D |  if_ne	jmp	#LR__4423
2b208     04 4E 05 F1 | 	add	fp, #4
2b20c     A7 28 02 FB | 	rdlong	local02, fp
2b210     04 4E 85 F1 | 	sub	fp, #4
2b214     1C 28 06 F1 | 	add	local02, #28
2b218     14 13 02 FB | 	rdlong	arg01, local02
2b21c     00 14 06 F6 | 	mov	arg02, #0
2b220     20 16 06 F6 | 	mov	arg03, #32
2b224     98 00 A0 FD | 	call	#\builtin_bytefill_
2b228     04 4E 05 F1 | 	add	fp, #4
2b22c     A7 14 02 FB | 	rdlong	arg02, fp
2b230     0A 27 02 F6 | 	mov	local01, arg02
2b234     1C 26 06 F1 | 	add	local01, #28
2b238     13 13 02 FB | 	rdlong	arg01, local01
2b23c     04 4E 85 F1 | 	sub	fp, #4
2b240     20 14 06 F1 | 	add	arg02, #32
2b244     0B 16 06 F6 | 	mov	arg03, #11
2b248     E8 68 BF FD | 	call	#__system____builtin_memmove
2b24c     04 4E 05 F1 | 	add	fp, #4
2b250     A7 36 02 FB | 	rdlong	local09, fp
2b254     1B 39 02 F6 | 	mov	local10, local09
2b258     1C 38 06 F1 | 	add	local10, #28
2b25c     1C 27 02 FB | 	rdlong	local01, local10
2b260     2B 36 06 F1 | 	add	local09, #43
2b264     1B 39 C2 FA | 	rdbyte	local10, local09
2b268     18 38 06 F5 | 	and	local10, #24
2b26c     0C 26 06 F1 | 	add	local01, #12
2b270     13 39 42 FC | 	wrbyte	local10, local01
2b274     08 4E 05 F1 | 	add	fp, #8
2b278     A7 38 02 FB | 	rdlong	local10, fp
2b27c     0C 4E 85 F1 | 	sub	fp, #12
2b280     03 38 06 F1 | 	add	local10, #3
2b284     1C 03 48 FC | 	wrbyte	#1, local10
2b288                 | LR__4423
2b288                 | LR__4424
2b288                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2b288                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2b288                 | ' 
2b288                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2b288                 | ' 
2b288                 | ' 			fs->wflag = 1;
2b288                 | ' 		}
2b288                 | ' 	}
2b288                 | ' 
2b288                 | ' 	return res;
2b288     08 4E 05 F1 | 	add	fp, #8
2b28c     A7 FA 01 FB | 	rdlong	result1, fp
2b290     08 4E 85 F1 | 	sub	fp, #8
2b294                 | LR__4425
2b294     A7 F0 03 F6 | 	mov	ptra, fp
2b298     B2 00 A0 FD | 	call	#popregs_
2b29c                 | _fatfs_cc_dir_register_ret
2b29c     2D 00 64 FD | 	ret
2b2a0                 | 
2b2a0                 | _fatfs_cc_dir_remove
2b2a0     05 4A 05 F6 | 	mov	COUNT_, #5
2b2a4     A8 00 A0 FD | 	call	#pushregs_
2b2a8     09 27 02 F6 | 	mov	local01, arg01
2b2ac     13 29 02 FB | 	rdlong	local02, local01
2b2b0     10 26 06 F1 | 	add	local01, #16
2b2b4     13 2B 02 FB | 	rdlong	local03, local01
2b2b8     1C 26 06 F1 | 	add	local01, #28
2b2bc     13 15 02 FB | 	rdlong	arg02, local01
2b2c0     2C 26 86 F1 | 	sub	local01, #44
2b2c4     FF FF 7F FF 
2b2c8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2b2cc     00 2C 06 A6 |  if_e	mov	local04, #0
2b2d0     18 00 90 AD |  if_e	jmp	#LR__4430
2b2d4     13 13 02 F6 | 	mov	arg01, local01
2b2d8     2C 26 06 F1 | 	add	local01, #44
2b2dc     13 15 02 FB | 	rdlong	arg02, local01
2b2e0     2C 26 86 F1 | 	sub	local01, #44
2b2e4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2b2e8     FD 2C 02 F6 | 	mov	local04, result1
2b2ec                 | LR__4430
2b2ec     16 2F 0A F6 | 	mov	local05, local04 wz
2b2f0     64 00 90 5D |  if_ne	jmp	#LR__4433
2b2f4                 | ' 		do {
2b2f4                 | LR__4431
2b2f4     18 26 06 F1 | 	add	local01, #24
2b2f8     13 15 02 FB | 	rdlong	arg02, local01
2b2fc     18 26 86 F1 | 	sub	local01, #24
2b300     14 13 02 F6 | 	mov	arg01, local02
2b304     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2b308     FD 2E 0A F6 | 	mov	local05, result1 wz
2b30c     40 00 90 5D |  if_ne	jmp	#LR__4432
2b310     1C 26 06 F1 | 	add	local01, #28
2b314     13 2D 02 FB | 	rdlong	local04, local01
2b318     16 CB 49 FC | 	wrbyte	#229, local04
2b31c     03 28 06 F1 | 	add	local02, #3
2b320     14 03 48 FC | 	wrbyte	#1, local02
2b324     03 28 86 F1 | 	sub	local02, #3
2b328     0C 26 86 F1 | 	sub	local01, #12
2b32c     13 2D 02 FB | 	rdlong	local04, local01
2b330     10 26 86 F1 | 	sub	local01, #16
2b334     15 2D 12 F2 | 	cmp	local04, local03 wc
2b338     14 00 90 3D |  if_ae	jmp	#LR__4432
2b33c     13 13 02 F6 | 	mov	arg01, local01
2b340     00 14 06 F6 | 	mov	arg02, #0
2b344     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2b348     FD 2E 0A F6 | 	mov	local05, result1 wz
2b34c     A4 FF 9F AD |  if_e	jmp	#LR__4431
2b350                 | LR__4432
2b350     04 2E 0E F2 | 	cmp	local05, #4 wz
2b354     02 2E 06 A6 |  if_e	mov	local05, #2
2b358                 | LR__4433
2b358                 | ' 	}
2b358                 | ' #line 2590 "ff.c"
2b358                 | ' 	return res;
2b358     17 FB 01 F6 | 	mov	result1, local05
2b35c     A7 F0 03 F6 | 	mov	ptra, fp
2b360     B2 00 A0 FD | 	call	#popregs_
2b364                 | _fatfs_cc_dir_remove_ret
2b364     2D 00 64 FD | 	ret
2b368                 | 
2b368                 | _fatfs_cc_get_fileinfo
2b368     0F 4A 05 F6 | 	mov	COUNT_, #15
2b36c     A8 00 A0 FD | 	call	#pushregs_
2b370     09 27 02 F6 | 	mov	local01, arg01
2b374     0A 29 02 F6 | 	mov	local02, arg02
2b378     13 2B 02 FB | 	rdlong	local03, local01
2b37c     1C 28 06 F1 | 	add	local02, #28
2b380     14 01 48 FC | 	wrbyte	#0, local02
2b384     1C 28 86 F1 | 	sub	local02, #28
2b388     18 26 06 F1 | 	add	local01, #24
2b38c     13 2D 0A FB | 	rdlong	local04, local01 wz
2b390     18 26 86 F1 | 	sub	local01, #24
2b394     90 03 90 AD |  if_e	jmp	#LR__4454
2b398     2C 26 06 F1 | 	add	local01, #44
2b39c     13 2D 02 FB | 	rdlong	local04, local01
2b3a0     2C 26 86 F1 | 	sub	local01, #44
2b3a4     FF FF 7F FF 
2b3a8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2b3ac     D8 00 90 AD |  if_e	jmp	#LR__4443
2b3b0     00 2E 06 F6 | 	mov	local05, #0
2b3b4     00 30 06 F6 | 	mov	local06, #0
2b3b8     00 32 06 F6 | 	mov	local07, #0
2b3bc                 | ' 			si = di = 0;
2b3bc                 | ' 			hs = 0;
2b3bc                 | ' 			while (fs->lfnbuf[si] != 0) {
2b3bc                 | LR__4440
2b3bc     0C 2A 06 F1 | 	add	local03, #12
2b3c0     15 2D 02 FB | 	rdlong	local04, local03
2b3c4     0C 2A 86 F1 | 	sub	local03, #12
2b3c8     18 35 02 F6 | 	mov	local08, local06
2b3cc     01 34 66 F0 | 	shl	local08, #1
2b3d0     16 35 02 F1 | 	add	local08, local04
2b3d4     1A 2D EA FA | 	rdword	local04, local08 wz
2b3d8     90 00 90 AD |  if_e	jmp	#LR__4442
2b3dc     0C 2A 06 F1 | 	add	local03, #12
2b3e0     15 37 02 FB | 	rdlong	local09, local03
2b3e4     0C 2A 86 F1 | 	sub	local03, #12
2b3e8     18 39 02 F6 | 	mov	local10, local06
2b3ec     01 38 66 F0 | 	shl	local10, #1
2b3f0     1B 39 02 F1 | 	add	local10, local09
2b3f4     1C 3B E2 FA | 	rdword	local11, local10
2b3f8     19 2D 02 F6 | 	mov	local04, local07
2b3fc     0F 2C 4E F7 | 	zerox	local04, #15 wz
2b400     01 30 06 F1 | 	add	local06, #1
2b404     24 00 90 5D |  if_ne	jmp	#LR__4441
2b408     1D 3D 32 F9 | 	getword	local12, local11, #0
2b40c     6C 00 00 FF 
2b410     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2b414     14 00 90 CD |  if_b	jmp	#LR__4441
2b418     1D 3F 32 F9 | 	getword	local13, local11, #0
2b41c     70 00 00 FF 
2b420     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2b424     1D 33 02 C6 |  if_b	mov	local07, local11
2b428                 | ' 					hs = wc; continue;
2b428     90 FF 9F CD |  if_b	jmp	#LR__4440
2b42c                 | LR__4441
2b42c     19 13 32 F9 | 	getword	arg01, local07, #0
2b430     10 12 66 F0 | 	shl	arg01, #16
2b434     1D 3B 32 F9 | 	getword	local11, local11, #0
2b438     1D 13 42 F5 | 	or	arg01, local11
2b43c     17 15 02 F6 | 	mov	arg02, local05
2b440     1C 28 06 F1 | 	add	local02, #28
2b444     14 15 02 F1 | 	add	arg02, local02
2b448     FF 16 06 F6 | 	mov	arg03, #255
2b44c     17 17 82 F1 | 	sub	arg03, local05
2b450     1C 28 86 F1 | 	sub	local02, #28
2b454     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2b458     FD 40 0A F6 | 	mov	local14, result1 wz
2b45c     00 2E 06 A6 |  if_e	mov	local05, #0
2b460     20 2F 02 51 |  if_ne	add	local05, local14
2b464     00 32 06 56 |  if_ne	mov	local07, #0
2b468     50 FF 9F 5D |  if_ne	jmp	#LR__4440
2b46c                 | LR__4442
2b46c     19 2D 02 F6 | 	mov	local04, local07
2b470     0F 2C 4E F7 | 	zerox	local04, #15 wz
2b474     00 2E 06 56 |  if_ne	mov	local05, #0
2b478     1C 28 06 F1 | 	add	local02, #28
2b47c     14 2F 02 F1 | 	add	local05, local02
2b480     17 01 48 FC | 	wrbyte	#0, local05
2b484     1C 28 86 F1 | 	sub	local02, #28
2b488                 | LR__4443
2b488     00 2E 06 F6 | 	mov	local05, #0
2b48c     00 30 06 F6 | 	mov	local06, #0
2b490                 | ' 			fno->fname[di] = 0;
2b490                 | ' 		}
2b490                 | ' 	}
2b490                 | ' 
2b490                 | ' 	si = di = 0;
2b490                 | ' 	while (si < 11) {
2b490                 | LR__4444
2b490     0B 30 16 F2 | 	cmp	local06, #11 wc
2b494     20 01 90 3D |  if_ae	jmp	#LR__4447
2b498     1C 26 06 F1 | 	add	local01, #28
2b49c     13 37 02 FB | 	rdlong	local09, local01
2b4a0     1C 26 86 F1 | 	sub	local01, #28
2b4a4     18 39 02 F6 | 	mov	local10, local06
2b4a8     1B 39 02 F1 | 	add	local10, local09
2b4ac     1C 3B C2 FA | 	rdbyte	local11, local10
2b4b0     1D 2D 32 F9 | 	getword	local04, local11, #0
2b4b4     20 2C 0E F2 | 	cmp	local04, #32 wz
2b4b8     01 30 06 F1 | 	add	local06, #1
2b4bc     D0 FF 9F AD |  if_e	jmp	#LR__4444
2b4c0     1D 2D 32 F9 | 	getword	local04, local11, #0
2b4c4     05 2C 0E F2 | 	cmp	local04, #5 wz
2b4c8     E5 3A 06 A6 |  if_e	mov	local11, #229
2b4cc     09 30 0E F2 | 	cmp	local06, #9 wz
2b4d0     20 00 90 5D |  if_ne	jmp	#LR__4445
2b4d4     0C 2E 16 F2 | 	cmp	local05, #12 wc
2b4d8     18 00 90 3D |  if_ae	jmp	#LR__4445
2b4dc     17 3F 02 F6 | 	mov	local13, local05
2b4e0     0C 28 06 F1 | 	add	local02, #12
2b4e4     14 3F 02 F1 | 	add	local13, local02
2b4e8     1F 5D 48 FC | 	wrbyte	#46, local13
2b4ec     01 2E 06 F1 | 	add	local05, #1
2b4f0     0C 28 86 F1 | 	sub	local02, #12
2b4f4                 | LR__4445
2b4f4     1D 13 32 F9 | 	getword	arg01, local11, #0
2b4f8     07 12 4E F7 | 	zerox	arg01, #7 wz
2b4fc     00 FA 05 56 |  if_ne	mov	result1, #0
2b500                 | ' 
2b500                 | ' 	return 0;
2b500     00 FA 05 A6 |  if_e	mov	result1, #0
2b504     00 FA 0D F2 | 	cmp	result1, #0 wz
2b508     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2b50c     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2b510     50 00 90 AD |  if_e	jmp	#LR__4446
2b514     1C 26 06 F1 | 	add	local01, #28
2b518     13 39 02 FB | 	rdlong	local10, local01
2b51c     1C 26 86 F1 | 	sub	local01, #28
2b520     18 35 02 F6 | 	mov	local08, local06
2b524     1C 35 02 F1 | 	add	local08, local10
2b528     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2b52c     00 FA 05 56 |  if_ne	mov	result1, #0
2b530                 | ' 
2b530                 | ' 	return 0;
2b530     00 FA 05 A6 |  if_e	mov	result1, #0
2b534     00 FA 0D F2 | 	cmp	result1, #0 wz
2b538     28 00 90 AD |  if_e	jmp	#LR__4446
2b53c     1D 3B 32 F9 | 	getword	local11, local11, #0
2b540     08 3A 66 F0 | 	shl	local11, #8
2b544     1C 26 06 F1 | 	add	local01, #28
2b548     13 41 02 FB | 	rdlong	local14, local01
2b54c     1C 26 86 F1 | 	sub	local01, #28
2b550     18 37 02 F6 | 	mov	local09, local06
2b554     20 37 02 F1 | 	add	local09, local14
2b558     1B 3D C2 FA | 	rdbyte	local12, local09
2b55c     1E 3B 42 F5 | 	or	local11, local12
2b560     01 30 06 F1 | 	add	local06, #1
2b564                 | LR__4446
2b564     1D 13 02 F6 | 	mov	arg01, local11
2b568     01 00 00 FF 
2b56c     52 15 06 F6 | 	mov	arg02, ##850
2b570     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2b574     FD 3A 02 F6 | 	mov	local11, result1
2b578     1D 2D 02 F6 | 	mov	local04, local11
2b57c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2b580     00 2E 06 A6 |  if_e	mov	local05, #0
2b584     30 00 90 AD |  if_e	jmp	#LR__4447
2b588     1D 13 32 F9 | 	getword	arg01, local11, #0
2b58c     17 15 02 F6 | 	mov	arg02, local05
2b590     0C 28 06 F1 | 	add	local02, #12
2b594     14 15 02 F1 | 	add	arg02, local02
2b598     0C 16 06 F6 | 	mov	arg03, #12
2b59c     17 17 82 F1 | 	sub	arg03, local05
2b5a0     0C 28 86 F1 | 	sub	local02, #12
2b5a4     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2b5a8     FD 40 0A F6 | 	mov	local14, result1 wz
2b5ac     00 2E 06 A6 |  if_e	mov	local05, #0
2b5b0     20 2F 02 51 |  if_ne	add	local05, local14
2b5b4     D8 FE 9F 5D |  if_ne	jmp	#LR__4444
2b5b8                 | LR__4447
2b5b8     17 2D 02 F6 | 	mov	local04, local05
2b5bc     0C 28 06 F1 | 	add	local02, #12
2b5c0     14 2D 02 F1 | 	add	local04, local02
2b5c4     16 01 48 FC | 	wrbyte	#0, local04
2b5c8     10 28 06 F1 | 	add	local02, #16
2b5cc     14 2D CA FA | 	rdbyte	local04, local02 wz
2b5d0     1C 28 86 F1 | 	sub	local02, #28
2b5d4     F8 00 90 5D |  if_ne	jmp	#LR__4453
2b5d8     00 2E 0E F2 | 	cmp	local05, #0 wz
2b5dc     1C 00 90 5D |  if_ne	jmp	#LR__4448
2b5e0     17 3F 02 F6 | 	mov	local13, local05
2b5e4     1C 28 06 F1 | 	add	local02, #28
2b5e8     14 3F 02 F1 | 	add	local13, local02
2b5ec     1F 7F 48 FC | 	wrbyte	#63, local13
2b5f0     01 2E 06 F1 | 	add	local05, #1
2b5f4     1C 28 86 F1 | 	sub	local02, #28
2b5f8     A4 00 90 FD | 	jmp	#LR__4452
2b5fc                 | LR__4448
2b5fc                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2b5fc     00 2E 06 F6 | 	mov	local05, #0
2b600     00 30 06 F6 | 	mov	local06, #0
2b604     08 42 06 F6 | 	mov	local15, #8
2b608                 | LR__4449
2b608     18 2D 02 F6 | 	mov	local04, local06
2b60c     0C 28 06 F1 | 	add	local02, #12
2b610     14 2D 02 F1 | 	add	local04, local02
2b614     16 3F CA FA | 	rdbyte	local13, local04 wz
2b618     0C 28 86 F1 | 	sub	local02, #12
2b61c     80 00 90 AD |  if_e	jmp	#LR__4451
2b620     18 35 02 F6 | 	mov	local08, local06
2b624     0C 28 06 F1 | 	add	local02, #12
2b628     14 35 02 F1 | 	add	local08, local02
2b62c     1A 3B C2 FA | 	rdbyte	local11, local08
2b630     1D 41 32 F9 | 	getword	local14, local11, #0
2b634     2E 40 0E F2 | 	cmp	local14, #46 wz
2b638     0C 28 86 F1 | 	sub	local02, #12
2b63c     10 42 06 A6 |  if_e	mov	local15, #16
2b640     1D 41 32 F9 | 	getword	local14, local11, #0
2b644     41 40 16 F2 | 	cmp	local14, #65 wc
2b648     30 00 90 CD |  if_b	jmp	#LR__4450
2b64c     1D 35 32 F9 | 	getword	local08, local11, #0
2b650     5B 34 16 F2 | 	cmp	local08, #91 wc
2b654     24 00 90 3D |  if_ae	jmp	#LR__4450
2b658     1C 26 06 F1 | 	add	local01, #28
2b65c     13 37 02 FB | 	rdlong	local09, local01
2b660     1C 26 86 F1 | 	sub	local01, #28
2b664     0C 36 06 F1 | 	add	local09, #12
2b668     1B 39 C2 FA | 	rdbyte	local10, local09
2b66c     21 41 E2 F8 | 	getbyte	local14, local15, #0
2b670     20 39 CA F7 | 	test	local10, local14 wz
2b674     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2b678     20 3A 06 51 |  if_ne	add	local11, #32
2b67c                 | LR__4450
2b67c     17 41 02 F6 | 	mov	local14, local05
2b680     1C 28 06 F1 | 	add	local02, #28
2b684     14 41 02 F1 | 	add	local14, local02
2b688     1D 3B 32 F9 | 	getword	local11, local11, #0
2b68c     20 3B 42 FC | 	wrbyte	local11, local14
2b690     01 30 06 F1 | 	add	local06, #1
2b694     01 2E 06 F1 | 	add	local05, #1
2b698     1C 28 86 F1 | 	sub	local02, #28
2b69c     68 FF 9F FD | 	jmp	#LR__4449
2b6a0                 | LR__4451
2b6a0                 | LR__4452
2b6a0     1C 28 06 F1 | 	add	local02, #28
2b6a4     14 2F 02 F1 | 	add	local05, local02
2b6a8     17 01 48 FC | 	wrbyte	#0, local05
2b6ac     1C 26 06 F1 | 	add	local01, #28
2b6b0     13 2D 02 FB | 	rdlong	local04, local01
2b6b4     1C 26 86 F1 | 	sub	local01, #28
2b6b8     0C 2C 06 F1 | 	add	local04, #12
2b6bc     16 3F CA FA | 	rdbyte	local13, local04 wz
2b6c0     1C 28 86 F1 | 	sub	local02, #28
2b6c4     0C 28 06 A1 |  if_e	add	local02, #12
2b6c8     14 01 48 AC |  if_e	wrbyte	#0, local02
2b6cc     0C 28 86 A1 |  if_e	sub	local02, #12
2b6d0                 | LR__4453
2b6d0     1C 26 06 F1 | 	add	local01, #28
2b6d4     13 3D 02 FB | 	rdlong	local12, local01
2b6d8     0B 3C 06 F1 | 	add	local12, #11
2b6dc     1E 2D C2 FA | 	rdbyte	local04, local12
2b6e0     3F 2C 06 F5 | 	and	local04, #63
2b6e4     08 28 06 F1 | 	add	local02, #8
2b6e8     14 2D 42 FC | 	wrbyte	local04, local02
2b6ec     08 28 86 F1 | 	sub	local02, #8
2b6f0     13 13 02 FB | 	rdlong	arg01, local01
2b6f4     1C 12 06 F1 | 	add	arg01, #28
2b6f8                 | ' {
2b6f8                 | ' 
2b6f8                 | ' 	return *((DWORD*)ptr);
2b6f8     09 FB 01 FB | 	rdlong	result1, arg01
2b6fc     14 FB 61 FC | 	wrlong	result1, local02
2b700     13 13 02 FB | 	rdlong	arg01, local01
2b704     16 12 06 F1 | 	add	arg01, #22
2b708                 | ' {
2b708                 | ' 
2b708                 | ' 	return *((WORD*)ptr);
2b708     09 FB E1 FA | 	rdword	result1, arg01
2b70c     06 28 06 F1 | 	add	local02, #6
2b710     14 FB 51 FC | 	wrword	result1, local02
2b714     13 13 02 FB | 	rdlong	arg01, local01
2b718     18 12 06 F1 | 	add	arg01, #24
2b71c                 | ' {
2b71c                 | ' 
2b71c                 | ' 	return *((WORD*)ptr);
2b71c     09 FB E1 FA | 	rdword	result1, arg01
2b720     02 28 86 F1 | 	sub	local02, #2
2b724     14 FB 51 FC | 	wrword	result1, local02
2b728                 | LR__4454
2b728     A7 F0 03 F6 | 	mov	ptra, fp
2b72c     B2 00 A0 FD | 	call	#popregs_
2b730                 | _fatfs_cc_get_fileinfo_ret
2b730     2D 00 64 FD | 	ret
2b734                 | 
2b734                 | _fatfs_cc_create_name
2b734     0D 4A 05 F6 | 	mov	COUNT_, #13
2b738     A8 00 A0 FD | 	call	#pushregs_
2b73c     34 F0 07 F1 | 	add	ptra, #52
2b740     04 4E 05 F1 | 	add	fp, #4
2b744     A7 12 62 FC | 	wrlong	arg01, fp
2b748     04 4E 05 F1 | 	add	fp, #4
2b74c     A7 14 62 FC | 	wrlong	arg02, fp
2b750     0A FB 01 FB | 	rdlong	result1, arg02
2b754     28 4E 05 F1 | 	add	fp, #40
2b758     A7 FA 61 FC | 	wrlong	result1, fp
2b75c     2C 4E 85 F1 | 	sub	fp, #44
2b760     A7 FA 01 FB | 	rdlong	result1, fp
2b764     FD 26 02 FB | 	rdlong	local01, result1
2b768     0C 26 06 F1 | 	add	local01, #12
2b76c     13 29 02 FB | 	rdlong	local02, local01
2b770     14 4E 05 F1 | 	add	fp, #20
2b774     A7 28 62 FC | 	wrlong	local02, fp
2b778     14 4E 05 F1 | 	add	fp, #20
2b77c     A7 00 68 FC | 	wrlong	#0, fp
2b780     2C 4E 85 F1 | 	sub	fp, #44
2b784                 | ' 
2b784                 | ' 
2b784                 | ' 
2b784                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2b784                 | ' 	for (;;) {
2b784                 | LR__4460
2b784     30 4E 05 F1 | 	add	fp, #48
2b788     A7 12 02 F6 | 	mov	arg01, fp
2b78c     30 4E 85 F1 | 	sub	fp, #48
2b790     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2b794     1C 4E 05 F1 | 	add	fp, #28
2b798     A7 FA 61 FC | 	wrlong	result1, fp
2b79c     1C 4E 85 F1 | 	sub	fp, #28
2b7a0     FF FF 7F FF 
2b7a4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b7a8     06 FA 05 A6 |  if_e	mov	result1, #6
2b7ac     74 08 90 AD |  if_e	jmp	#LR__4500
2b7b0     1C 4E 05 F1 | 	add	fp, #28
2b7b4     A7 26 02 FB | 	rdlong	local01, fp
2b7b8     1C 4E 85 F1 | 	sub	fp, #28
2b7bc     80 00 00 FF 
2b7c0     00 26 16 F2 | 	cmp	local01, ##65536 wc
2b7c4     3C 00 90 CD |  if_b	jmp	#LR__4461
2b7c8     18 4E 05 F1 | 	add	fp, #24
2b7cc     A7 2A 02 FB | 	rdlong	local03, fp
2b7d0     14 4E 05 F1 | 	add	fp, #20
2b7d4     A7 26 02 FB | 	rdlong	local01, fp
2b7d8     13 2D 02 F6 | 	mov	local04, local01
2b7dc     01 2C 06 F1 | 	add	local04, #1
2b7e0     A7 2C 62 FC | 	wrlong	local04, fp
2b7e4     01 26 66 F0 | 	shl	local01, #1
2b7e8     15 27 02 F1 | 	add	local01, local03
2b7ec     10 4E 85 F1 | 	sub	fp, #16
2b7f0     A7 2E 02 FB | 	rdlong	local05, fp
2b7f4     1C 4E 85 F1 | 	sub	fp, #28
2b7f8     17 31 02 F6 | 	mov	local06, local05
2b7fc     10 30 46 F0 | 	shr	local06, #16
2b800     13 31 52 FC | 	wrword	local06, local01
2b804                 | LR__4461
2b804     1C 4E 05 F1 | 	add	fp, #28
2b808     A7 26 02 FB | 	rdlong	local01, fp
2b80c     08 4E 85 F1 | 	sub	fp, #8
2b810     A7 26 52 FC | 	wrword	local01, fp
2b814     A7 26 E2 FA | 	rdword	local01, fp
2b818     14 4E 85 F1 | 	sub	fp, #20
2b81c     20 26 16 F2 | 	cmp	local01, #32 wc
2b820     B0 00 90 CD |  if_b	jmp	#LR__4463
2b824     14 4E 05 F1 | 	add	fp, #20
2b828     A7 26 E2 FA | 	rdword	local01, fp
2b82c     14 4E 85 F1 | 	sub	fp, #20
2b830     2F 26 0E F2 | 	cmp	local01, #47 wz
2b834     14 4E 05 51 |  if_ne	add	fp, #20
2b838     A7 2C E2 5A |  if_ne	rdword	local04, fp
2b83c     14 4E 85 51 |  if_ne	sub	fp, #20
2b840     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2b844     8C 00 90 AD |  if_e	jmp	#LR__4463
2b848     14 4E 05 F1 | 	add	fp, #20
2b84c     A7 12 E2 FA | 	rdword	arg01, fp
2b850     14 4E 85 F1 | 	sub	fp, #20
2b854     80 12 16 F2 | 	cmp	arg01, #128 wc
2b858     24 00 90 3D |  if_ae	jmp	#LR__4462
2b85c     8B 01 00 FF 
2b860     98 13 06 F6 | 	mov	arg01, ##@LR__5122
2b864     14 4E 05 F1 | 	add	fp, #20
2b868     A7 14 E2 FA | 	rdword	arg02, fp
2b86c     14 4E 85 F1 | 	sub	fp, #20
2b870     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2b874     00 FA 0D F2 | 	cmp	result1, #0 wz
2b878     06 FA 05 56 |  if_ne	mov	result1, #6
2b87c     A4 07 90 5D |  if_ne	jmp	#LR__4500
2b880                 | LR__4462
2b880     2C 4E 05 F1 | 	add	fp, #44
2b884     A7 30 02 FB | 	rdlong	local06, fp
2b888     2C 4E 85 F1 | 	sub	fp, #44
2b88c     FF 30 16 F2 | 	cmp	local06, #255 wc
2b890     06 FA 05 36 |  if_ae	mov	result1, #6
2b894     8C 07 90 3D |  if_ae	jmp	#LR__4500
2b898     18 4E 05 F1 | 	add	fp, #24
2b89c     A7 2A 02 FB | 	rdlong	local03, fp
2b8a0     14 4E 05 F1 | 	add	fp, #20
2b8a4     A7 28 02 FB | 	rdlong	local02, fp
2b8a8     14 2D 02 F6 | 	mov	local04, local02
2b8ac     01 2C 06 F1 | 	add	local04, #1
2b8b0     A7 2C 62 FC | 	wrlong	local04, fp
2b8b4     14 27 02 F6 | 	mov	local01, local02
2b8b8     01 26 66 F0 | 	shl	local01, #1
2b8bc     15 27 02 F1 | 	add	local01, local03
2b8c0     18 4E 85 F1 | 	sub	fp, #24
2b8c4     A7 30 E2 FA | 	rdword	local06, fp
2b8c8     14 4E 85 F1 | 	sub	fp, #20
2b8cc     13 31 52 FC | 	wrword	local06, local01
2b8d0     B0 FE 9F FD | 	jmp	#LR__4460
2b8d4                 | LR__4463
2b8d4     14 4E 05 F1 | 	add	fp, #20
2b8d8     A7 32 E2 FA | 	rdword	local07, fp
2b8dc     14 4E 85 F1 | 	sub	fp, #20
2b8e0     20 32 16 F2 | 	cmp	local07, #32 wc
2b8e4     10 4E 05 C1 |  if_b	add	fp, #16
2b8e8     A7 08 48 CC |  if_b	wrbyte	#4, fp
2b8ec     10 4E 85 C1 |  if_b	sub	fp, #16
2b8f0     74 00 90 CD |  if_b	jmp	#LR__4468
2b8f4     97 24 48 FB | 	callpa	#(@LR__4466-@LR__4464)>>2,fcache_load_ptr_
2b8f8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2b8f8                 | LR__4464
2b8f8     30 4E 05 F1 | 	add	fp, #48
2b8fc     A7 2C 02 FB | 	rdlong	local04, fp
2b900     30 4E 85 F1 | 	sub	fp, #48
2b904     16 33 C2 FA | 	rdbyte	local07, local04
2b908     2F 32 0E F2 | 	cmp	local07, #47 wz
2b90c     18 00 90 AD |  if_e	jmp	#LR__4465
2b910     30 4E 05 F1 | 	add	fp, #48
2b914     A7 2C 02 FB | 	rdlong	local04, fp
2b918     30 4E 85 F1 | 	sub	fp, #48
2b91c     16 29 C2 FA | 	rdbyte	local02, local04
2b920     5C 28 0E F2 | 	cmp	local02, #92 wz
2b924     18 00 90 5D |  if_ne	jmp	#LR__4467
2b928                 | LR__4465
2b928     30 4E 05 F1 | 	add	fp, #48
2b92c     A7 26 02 FB | 	rdlong	local01, fp
2b930     01 26 06 F1 | 	add	local01, #1
2b934     A7 26 62 FC | 	wrlong	local01, fp
2b938     30 4E 85 F1 | 	sub	fp, #48
2b93c     B8 FF 9F FD | 	jmp	#LR__4464
2b940                 | LR__4466
2b940                 | LR__4467
2b940     10 4E 05 F1 | 	add	fp, #16
2b944     A7 00 48 FC | 	wrbyte	#0, fp
2b948     20 4E 05 F1 | 	add	fp, #32
2b94c     A7 30 02 FB | 	rdlong	local06, fp
2b950     30 4E 85 F1 | 	sub	fp, #48
2b954     18 33 C2 FA | 	rdbyte	local07, local06
2b958     20 32 16 F2 | 	cmp	local07, #32 wc
2b95c     10 4E 05 C1 |  if_b	add	fp, #16
2b960     A7 08 48 CC |  if_b	wrbyte	#4, fp
2b964     10 4E 85 C1 |  if_b	sub	fp, #16
2b968                 | LR__4468
2b968     08 4E 05 F1 | 	add	fp, #8
2b96c     A7 32 02 FB | 	rdlong	local07, fp
2b970     28 4E 05 F1 | 	add	fp, #40
2b974     A7 26 02 FB | 	rdlong	local01, fp
2b978     30 4E 85 F1 | 	sub	fp, #48
2b97c     19 27 62 FC | 	wrlong	local01, local07
2b980     97 38 48 FB | 	callpa	#(@LR__4470-@LR__4469)>>2,fcache_load_ptr_
2b984                 | ' 	}
2b984                 | ' 	*path = p;
2b984                 | ' #line 2862 "ff.c"
2b984                 | ' 	while (di) {
2b984                 | LR__4469
2b984     2C 4E 05 F1 | 	add	fp, #44
2b988     A7 32 0A FB | 	rdlong	local07, fp wz
2b98c     2C 4E 85 F1 | 	sub	fp, #44
2b990     60 00 90 AD |  if_e	jmp	#LR__4471
2b994     18 4E 05 F1 | 	add	fp, #24
2b998     A7 30 02 FB | 	rdlong	local06, fp
2b99c     14 4E 05 F1 | 	add	fp, #20
2b9a0     A7 2C 02 FB | 	rdlong	local04, fp
2b9a4     01 2C 86 F1 | 	sub	local04, #1
2b9a8     01 2C 66 F0 | 	shl	local04, #1
2b9ac     18 2D 02 F1 | 	add	local04, local06
2b9b0     16 31 E2 FA | 	rdword	local06, local04
2b9b4     18 4E 85 F1 | 	sub	fp, #24
2b9b8     A7 30 52 FC | 	wrword	local06, fp
2b9bc     A7 32 E2 FA | 	rdword	local07, fp
2b9c0     14 4E 85 F1 | 	sub	fp, #20
2b9c4     20 32 0E F2 | 	cmp	local07, #32 wz
2b9c8     14 4E 05 51 |  if_ne	add	fp, #20
2b9cc     A7 26 E2 5A |  if_ne	rdword	local01, fp
2b9d0     14 4E 85 51 |  if_ne	sub	fp, #20
2b9d4     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2b9d8     18 00 90 5D |  if_ne	jmp	#LR__4471
2b9dc     2C 4E 05 F1 | 	add	fp, #44
2b9e0     A7 26 02 FB | 	rdlong	local01, fp
2b9e4     01 26 86 F1 | 	sub	local01, #1
2b9e8     A7 26 62 FC | 	wrlong	local01, fp
2b9ec     2C 4E 85 F1 | 	sub	fp, #44
2b9f0     90 FF 9F FD | 	jmp	#LR__4469
2b9f4                 | LR__4470
2b9f4                 | LR__4471
2b9f4     18 4E 05 F1 | 	add	fp, #24
2b9f8     A7 34 02 FB | 	rdlong	local08, fp
2b9fc     14 4E 05 F1 | 	add	fp, #20
2ba00     A7 2C 02 FB | 	rdlong	local04, fp
2ba04     01 2C 66 F0 | 	shl	local04, #1
2ba08     1A 2D 02 F1 | 	add	local04, local08
2ba0c     16 01 58 FC | 	wrword	#0, local04
2ba10     A7 32 0A FB | 	rdlong	local07, fp wz
2ba14     2C 4E 85 F1 | 	sub	fp, #44
2ba18     06 FA 05 A6 |  if_e	mov	result1, #6
2ba1c     04 06 90 AD |  if_e	jmp	#LR__4500
2ba20                 | ' 
2ba20                 | ' 
2ba20                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2ba20     28 4E 05 F1 | 	add	fp, #40
2ba24     A7 00 68 FC | 	wrlong	#0, fp
2ba28     28 4E 85 F1 | 	sub	fp, #40
2ba2c     97 22 48 FB | 	callpa	#(@LR__4473-@LR__4472)>>2,fcache_load_ptr_
2ba30                 | LR__4472
2ba30     18 4E 05 F1 | 	add	fp, #24
2ba34     A7 36 02 FB | 	rdlong	local09, fp
2ba38     10 4E 05 F1 | 	add	fp, #16
2ba3c     A7 38 02 FB | 	rdlong	local10, fp
2ba40     28 4E 85 F1 | 	sub	fp, #40
2ba44     01 38 66 F0 | 	shl	local10, #1
2ba48     1B 39 02 F1 | 	add	local10, local09
2ba4c     1C 3B E2 FA | 	rdword	local11, local10
2ba50     20 3A 0E F2 | 	cmp	local11, #32 wz
2ba54     1C 00 90 5D |  if_ne	jmp	#LR__4474
2ba58     28 4E 05 F1 | 	add	fp, #40
2ba5c     A7 3C 02 FB | 	rdlong	local12, fp
2ba60     1E 2F 02 F6 | 	mov	local05, local12
2ba64     01 2E 06 F1 | 	add	local05, #1
2ba68     A7 2E 62 FC | 	wrlong	local05, fp
2ba6c     28 4E 85 F1 | 	sub	fp, #40
2ba70     BC FF 9F FD | 	jmp	#LR__4472
2ba74                 | LR__4473
2ba74                 | LR__4474
2ba74     28 4E 05 F1 | 	add	fp, #40
2ba78     A7 32 02 FB | 	rdlong	local07, fp
2ba7c     28 4E 85 F1 | 	sub	fp, #40
2ba80     01 32 16 F2 | 	cmp	local07, #1 wc
2ba84     28 00 90 3D |  if_ae	jmp	#LR__4475
2ba88     18 4E 05 F1 | 	add	fp, #24
2ba8c     A7 2A 02 FB | 	rdlong	local03, fp
2ba90     10 4E 05 F1 | 	add	fp, #16
2ba94     A7 36 02 FB | 	rdlong	local09, fp
2ba98     28 4E 85 F1 | 	sub	fp, #40
2ba9c     01 36 66 F0 | 	shl	local09, #1
2baa0     15 37 02 F1 | 	add	local09, local03
2baa4     1B 27 E2 FA | 	rdword	local01, local09
2baa8     2E 26 0E F2 | 	cmp	local01, #46 wz
2baac     14 00 90 5D |  if_ne	jmp	#LR__4476
2bab0                 | LR__4475
2bab0     10 4E 05 F1 | 	add	fp, #16
2bab4     A7 32 C2 FA | 	rdbyte	local07, fp
2bab8     03 32 46 F5 | 	or	local07, #3
2babc     A7 32 42 FC | 	wrbyte	local07, fp
2bac0     10 4E 85 F1 | 	sub	fp, #16
2bac4                 | LR__4476
2bac4     97 2C 48 FB | 	callpa	#(@LR__4478-@LR__4477)>>2,fcache_load_ptr_
2bac8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2bac8                 | LR__4477
2bac8     2C 4E 05 F1 | 	add	fp, #44
2bacc     A7 32 02 FB | 	rdlong	local07, fp
2bad0     2C 4E 85 F1 | 	sub	fp, #44
2bad4     01 32 16 F2 | 	cmp	local07, #1 wc
2bad8     44 00 90 CD |  if_b	jmp	#LR__4479
2badc     18 4E 05 F1 | 	add	fp, #24
2bae0     A7 30 02 FB | 	rdlong	local06, fp
2bae4     14 4E 05 F1 | 	add	fp, #20
2bae8     A7 2A 02 FB | 	rdlong	local03, fp
2baec     2C 4E 85 F1 | 	sub	fp, #44
2baf0     01 2A 86 F1 | 	sub	local03, #1
2baf4     01 2A 66 F0 | 	shl	local03, #1
2baf8     18 2B 02 F1 | 	add	local03, local06
2bafc     15 27 E2 FA | 	rdword	local01, local03
2bb00     2E 26 0E F2 | 	cmp	local01, #46 wz
2bb04     18 00 90 AD |  if_e	jmp	#LR__4479
2bb08     2C 4E 05 F1 | 	add	fp, #44
2bb0c     A7 26 02 FB | 	rdlong	local01, fp
2bb10     01 26 86 F1 | 	sub	local01, #1
2bb14     A7 26 62 FC | 	wrlong	local01, fp
2bb18     2C 4E 85 F1 | 	sub	fp, #44
2bb1c     A8 FF 9F FD | 	jmp	#LR__4477
2bb20                 | LR__4478
2bb20                 | LR__4479
2bb20     04 4E 05 F1 | 	add	fp, #4
2bb24     A7 12 02 FB | 	rdlong	arg01, fp
2bb28     04 4E 85 F1 | 	sub	fp, #4
2bb2c     20 12 06 F1 | 	add	arg01, #32
2bb30     20 14 06 F6 | 	mov	arg02, #32
2bb34     0B 16 06 F6 | 	mov	arg03, #11
2bb38     09 3F 02 F6 | 	mov	local13, arg01
2bb3c     98 00 A0 FD | 	call	#\builtin_bytefill_
2bb40     1F FB 01 F6 | 	mov	result1, local13
2bb44     0C 4E 05 F1 | 	add	fp, #12
2bb48     A7 00 48 FC | 	wrbyte	#0, fp
2bb4c     A7 32 C2 FA | 	rdbyte	local07, fp
2bb50     14 4E 05 F1 | 	add	fp, #20
2bb54     A7 32 62 FC | 	wrlong	local07, fp
2bb58     04 4E 05 F1 | 	add	fp, #4
2bb5c     A7 10 68 FC | 	wrlong	#8, fp
2bb60     24 4E 85 F1 | 	sub	fp, #36
2bb64                 | ' 
2bb64                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2bb64                 | ' 	i = b = 0; ni = 8;
2bb64                 | ' 	for (;;) {
2bb64                 | LR__4480
2bb64     18 4E 05 F1 | 	add	fp, #24
2bb68     A7 2A 02 FB | 	rdlong	local03, fp
2bb6c     10 4E 05 F1 | 	add	fp, #16
2bb70     A7 36 02 FB | 	rdlong	local09, fp
2bb74     1B 2D 02 F6 | 	mov	local04, local09
2bb78     01 2C 06 F1 | 	add	local04, #1
2bb7c     A7 2C 62 FC | 	wrlong	local04, fp
2bb80     01 36 66 F0 | 	shl	local09, #1
2bb84     15 37 02 F1 | 	add	local09, local03
2bb88     1B 31 E2 FA | 	rdword	local06, local09
2bb8c     14 4E 85 F1 | 	sub	fp, #20
2bb90     A7 30 52 FC | 	wrword	local06, fp
2bb94     A7 32 EA FA | 	rdword	local07, fp wz
2bb98     14 4E 85 F1 | 	sub	fp, #20
2bb9c     74 03 90 AD |  if_e	jmp	#LR__4496
2bba0     14 4E 05 F1 | 	add	fp, #20
2bba4     A7 32 E2 FA | 	rdword	local07, fp
2bba8     14 4E 85 F1 | 	sub	fp, #20
2bbac     20 32 0E F2 | 	cmp	local07, #32 wz
2bbb0     30 00 90 AD |  if_e	jmp	#LR__4481
2bbb4     14 4E 05 F1 | 	add	fp, #20
2bbb8     A7 26 E2 FA | 	rdword	local01, fp
2bbbc     14 4E 85 F1 | 	sub	fp, #20
2bbc0     2E 26 0E F2 | 	cmp	local01, #46 wz
2bbc4     34 00 90 5D |  if_ne	jmp	#LR__4482
2bbc8     28 4E 05 F1 | 	add	fp, #40
2bbcc     A7 2C 02 FB | 	rdlong	local04, fp
2bbd0     04 4E 05 F1 | 	add	fp, #4
2bbd4     A7 38 02 FB | 	rdlong	local10, fp
2bbd8     2C 4E 85 F1 | 	sub	fp, #44
2bbdc     1C 2D 0A F2 | 	cmp	local04, local10 wz
2bbe0     18 00 90 AD |  if_e	jmp	#LR__4482
2bbe4                 | LR__4481
2bbe4     10 4E 05 F1 | 	add	fp, #16
2bbe8     A7 32 C2 FA | 	rdbyte	local07, fp
2bbec     03 32 46 F5 | 	or	local07, #3
2bbf0     A7 32 42 FC | 	wrbyte	local07, fp
2bbf4     10 4E 85 F1 | 	sub	fp, #16
2bbf8                 | ' 			cf |=  0x01  |  0x02 ;
2bbf8                 | ' 			continue;
2bbf8     68 FF 9F FD | 	jmp	#LR__4480
2bbfc                 | LR__4482
2bbfc     20 4E 05 F1 | 	add	fp, #32
2bc00     A7 32 02 FB | 	rdlong	local07, fp
2bc04     04 4E 05 F1 | 	add	fp, #4
2bc08     A7 26 02 FB | 	rdlong	local01, fp
2bc0c     24 4E 85 F1 | 	sub	fp, #36
2bc10     13 33 12 F2 | 	cmp	local07, local01 wc
2bc14     1C 00 90 3D |  if_ae	jmp	#LR__4483
2bc18     28 4E 05 F1 | 	add	fp, #40
2bc1c     A7 34 02 FB | 	rdlong	local08, fp
2bc20     04 4E 05 F1 | 	add	fp, #4
2bc24     A7 38 02 FB | 	rdlong	local10, fp
2bc28     2C 4E 85 F1 | 	sub	fp, #44
2bc2c     1C 35 0A F2 | 	cmp	local08, local10 wz
2bc30     B0 00 90 5D |  if_ne	jmp	#LR__4485
2bc34                 | LR__4483
2bc34     24 4E 05 F1 | 	add	fp, #36
2bc38     A7 32 02 FB | 	rdlong	local07, fp
2bc3c     24 4E 85 F1 | 	sub	fp, #36
2bc40     0B 32 0E F2 | 	cmp	local07, #11 wz
2bc44     18 00 90 5D |  if_ne	jmp	#LR__4484
2bc48     10 4E 05 F1 | 	add	fp, #16
2bc4c     A7 32 C2 FA | 	rdbyte	local07, fp
2bc50     03 32 46 F5 | 	or	local07, #3
2bc54     A7 32 42 FC | 	wrbyte	local07, fp
2bc58     10 4E 85 F1 | 	sub	fp, #16
2bc5c                 | ' 				cf |=  0x01  |  0x02 ;
2bc5c                 | ' 				break;
2bc5c     B4 02 90 FD | 	jmp	#LR__4496
2bc60                 | LR__4484
2bc60     28 4E 05 F1 | 	add	fp, #40
2bc64     A7 32 02 FB | 	rdlong	local07, fp
2bc68     04 4E 05 F1 | 	add	fp, #4
2bc6c     A7 26 02 FB | 	rdlong	local01, fp
2bc70     2C 4E 85 F1 | 	sub	fp, #44
2bc74     13 33 0A F2 | 	cmp	local07, local01 wz
2bc78     10 4E 05 51 |  if_ne	add	fp, #16
2bc7c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2bc80     03 32 46 55 |  if_ne	or	local07, #3
2bc84     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2bc88     10 4E 85 51 |  if_ne	sub	fp, #16
2bc8c     28 4E 05 F1 | 	add	fp, #40
2bc90     A7 32 02 FB | 	rdlong	local07, fp
2bc94     04 4E 05 F1 | 	add	fp, #4
2bc98     A7 28 02 FB | 	rdlong	local02, fp
2bc9c     2C 4E 85 F1 | 	sub	fp, #44
2bca0     14 33 1A F2 | 	cmp	local07, local02 wcz
2bca4     6C 02 90 1D |  if_a	jmp	#LR__4496
2bca8     2C 4E 05 F1 | 	add	fp, #44
2bcac     A7 32 02 FB | 	rdlong	local07, fp
2bcb0     04 4E 85 F1 | 	sub	fp, #4
2bcb4     A7 32 62 FC | 	wrlong	local07, fp
2bcb8     08 4E 85 F1 | 	sub	fp, #8
2bcbc     A7 10 68 FC | 	wrlong	#8, fp
2bcc0     04 4E 05 F1 | 	add	fp, #4
2bcc4     A7 16 68 FC | 	wrlong	#11, fp
2bcc8     18 4E 85 F1 | 	sub	fp, #24
2bccc     A7 3A C2 FA | 	rdbyte	local11, fp
2bcd0     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2bcd4     02 32 66 F0 | 	shl	local07, #2
2bcd8     A7 32 42 FC | 	wrbyte	local07, fp
2bcdc     0C 4E 85 F1 | 	sub	fp, #12
2bce0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2bce0                 | ' 			continue;
2bce0     80 FE 9F FD | 	jmp	#LR__4480
2bce4                 | LR__4485
2bce4     14 4E 05 F1 | 	add	fp, #20
2bce8     A7 32 E2 FA | 	rdword	local07, fp
2bcec     14 4E 85 F1 | 	sub	fp, #20
2bcf0     80 32 16 F2 | 	cmp	local07, #128 wc
2bcf4     6C 00 90 CD |  if_b	jmp	#LR__4487
2bcf8     10 4E 05 F1 | 	add	fp, #16
2bcfc     A7 32 C2 FA | 	rdbyte	local07, fp
2bd00     02 32 46 F5 | 	or	local07, #2
2bd04     A7 32 42 FC | 	wrbyte	local07, fp
2bd08     04 4E 05 F1 | 	add	fp, #4
2bd0c     A7 12 E2 FA | 	rdword	arg01, fp
2bd10     14 4E 85 F1 | 	sub	fp, #20
2bd14     01 00 00 FF 
2bd18     52 15 06 F6 | 	mov	arg02, ##850
2bd1c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2bd20     14 4E 05 F1 | 	add	fp, #20
2bd24     A7 FA 51 FC | 	wrword	result1, fp
2bd28     A7 32 E2 FA | 	rdword	local07, fp
2bd2c     14 4E 85 F1 | 	sub	fp, #20
2bd30     80 32 CE F7 | 	test	local07, #128 wz
2bd34     2C 00 90 AD |  if_e	jmp	#LR__4486
2bd38     14 4E 05 F1 | 	add	fp, #20
2bd3c     A7 28 E2 FA | 	rdword	local02, fp
2bd40     7F 28 06 F5 | 	and	local02, #127
2bd44     01 00 00 FF 
2bd48     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2bd4c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2bd50     14 33 C2 FA | 	rdbyte	local07, local02
2bd54     A7 32 52 FC | 	wrword	local07, fp
2bd58     14 4E 85 F1 | 	sub	fp, #20
2bd5c     01 00 00 FF 
2bd60     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2bd64                 | LR__4486
2bd64                 | LR__4487
2bd64     14 4E 05 F1 | 	add	fp, #20
2bd68     A7 32 E2 FA | 	rdword	local07, fp
2bd6c     14 4E 85 F1 | 	sub	fp, #20
2bd70     00 33 16 F2 | 	cmp	local07, #256 wc
2bd74     88 00 90 CD |  if_b	jmp	#LR__4489
2bd78     24 4E 05 F1 | 	add	fp, #36
2bd7c     A7 32 02 FB | 	rdlong	local07, fp
2bd80     01 32 86 F1 | 	sub	local07, #1
2bd84     04 4E 85 F1 | 	sub	fp, #4
2bd88     A7 28 02 FB | 	rdlong	local02, fp
2bd8c     20 4E 85 F1 | 	sub	fp, #32
2bd90     19 29 12 F2 | 	cmp	local02, local07 wc
2bd94     2C 00 90 CD |  if_b	jmp	#LR__4488
2bd98     10 4E 05 F1 | 	add	fp, #16
2bd9c     A7 3A C2 FA | 	rdbyte	local11, fp
2bda0     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2bda4     03 32 46 F5 | 	or	local07, #3
2bda8     A7 32 42 FC | 	wrbyte	local07, fp
2bdac     14 4E 05 F1 | 	add	fp, #20
2bdb0     A7 32 02 FB | 	rdlong	local07, fp
2bdb4     04 4E 85 F1 | 	sub	fp, #4
2bdb8     A7 32 62 FC | 	wrlong	local07, fp
2bdbc     20 4E 85 F1 | 	sub	fp, #32
2bdc0                 | ' 				cf |=  0x01  |  0x02 ;
2bdc0                 | ' 				i = ni; continue;
2bdc0     A0 FD 9F FD | 	jmp	#LR__4480
2bdc4                 | LR__4488
2bdc4     04 4E 05 F1 | 	add	fp, #4
2bdc8     A7 36 02 FB | 	rdlong	local09, fp
2bdcc     1C 4E 05 F1 | 	add	fp, #28
2bdd0     A7 38 02 FB | 	rdlong	local10, fp
2bdd4     1C 2D 02 F6 | 	mov	local04, local10
2bdd8     01 2C 06 F1 | 	add	local04, #1
2bddc     A7 2C 62 FC | 	wrlong	local04, fp
2bde0     20 36 06 F1 | 	add	local09, #32
2bde4     1B 39 02 F1 | 	add	local10, local09
2bde8     0C 4E 85 F1 | 	sub	fp, #12
2bdec     A7 2A E2 FA | 	rdword	local03, fp
2bdf0     14 4E 85 F1 | 	sub	fp, #20
2bdf4     08 2A 46 F0 | 	shr	local03, #8
2bdf8     1C 2B 42 FC | 	wrbyte	local03, local10
2bdfc     D4 00 90 FD | 	jmp	#LR__4495
2be00                 | LR__4489
2be00     14 4E 05 F1 | 	add	fp, #20
2be04     A7 32 EA FA | 	rdword	local07, fp wz
2be08     14 4E 85 F1 | 	sub	fp, #20
2be0c     20 00 90 AD |  if_e	jmp	#LR__4490
2be10     8B 01 00 FF 
2be14     A1 13 06 F6 | 	mov	arg01, ##@LR__5123
2be18     14 4E 05 F1 | 	add	fp, #20
2be1c     A7 14 E2 FA | 	rdword	arg02, fp
2be20     14 4E 85 F1 | 	sub	fp, #20
2be24     48 CB BF FD | 	call	#_fatfs_cc_strchr
2be28     00 FA 0D F2 | 	cmp	result1, #0 wz
2be2c     20 00 90 AD |  if_e	jmp	#LR__4491
2be30                 | LR__4490
2be30     14 4E 05 F1 | 	add	fp, #20
2be34     A7 BE 58 FC | 	wrword	#95, fp
2be38     04 4E 85 F1 | 	sub	fp, #4
2be3c     A7 32 C2 FA | 	rdbyte	local07, fp
2be40     03 32 46 F5 | 	or	local07, #3
2be44     A7 32 42 FC | 	wrbyte	local07, fp
2be48     10 4E 85 F1 | 	sub	fp, #16
2be4c     84 00 90 FD | 	jmp	#LR__4494
2be50                 | LR__4491
2be50     14 4E 05 F1 | 	add	fp, #20
2be54     A7 32 E2 FA | 	rdword	local07, fp
2be58     14 4E 85 F1 | 	sub	fp, #20
2be5c     41 32 16 F2 | 	cmp	local07, #65 wc
2be60     24 00 90 CD |  if_b	jmp	#LR__4492
2be64     14 4E 05 F1 | 	add	fp, #20
2be68     A7 26 E2 FA | 	rdword	local01, fp
2be6c     14 4E 85 F1 | 	sub	fp, #20
2be70     5B 26 16 F2 | 	cmp	local01, #91 wc
2be74     0C 4E 05 C1 |  if_b	add	fp, #12
2be78     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2be7c     02 32 46 C5 |  if_b	or	local07, #2
2be80     A7 32 42 CC |  if_b	wrbyte	local07, fp
2be84     0C 4E 85 C1 |  if_b	sub	fp, #12
2be88                 | LR__4492
2be88     14 4E 05 F1 | 	add	fp, #20
2be8c     A7 32 E2 FA | 	rdword	local07, fp
2be90     14 4E 85 F1 | 	sub	fp, #20
2be94     61 32 16 F2 | 	cmp	local07, #97 wc
2be98     38 00 90 CD |  if_b	jmp	#LR__4493
2be9c     14 4E 05 F1 | 	add	fp, #20
2bea0     A7 26 E2 FA | 	rdword	local01, fp
2bea4     14 4E 85 F1 | 	sub	fp, #20
2bea8     7B 26 16 F2 | 	cmp	local01, #123 wc
2beac     24 00 90 3D |  if_ae	jmp	#LR__4493
2beb0     0C 4E 05 F1 | 	add	fp, #12
2beb4     A7 32 C2 FA | 	rdbyte	local07, fp
2beb8     01 32 46 F5 | 	or	local07, #1
2bebc     A7 32 42 FC | 	wrbyte	local07, fp
2bec0     08 4E 05 F1 | 	add	fp, #8
2bec4     A7 32 E2 FA | 	rdword	local07, fp
2bec8     20 32 86 F1 | 	sub	local07, #32
2becc     A7 32 52 FC | 	wrword	local07, fp
2bed0     14 4E 85 F1 | 	sub	fp, #20
2bed4                 | LR__4493
2bed4                 | LR__4494
2bed4                 | LR__4495
2bed4     04 4E 05 F1 | 	add	fp, #4
2bed8     A7 3A 02 FB | 	rdlong	local11, fp
2bedc     1D 37 02 F6 | 	mov	local09, local11
2bee0     1C 4E 05 F1 | 	add	fp, #28
2bee4     A7 28 02 FB | 	rdlong	local02, fp
2bee8     14 2D 02 F6 | 	mov	local04, local02
2beec     01 2C 06 F1 | 	add	local04, #1
2bef0     A7 2C 62 FC | 	wrlong	local04, fp
2bef4     14 39 02 F6 | 	mov	local10, local02
2bef8     20 36 06 F1 | 	add	local09, #32
2befc     1B 39 02 F1 | 	add	local10, local09
2bf00     0C 4E 85 F1 | 	sub	fp, #12
2bf04     A7 2A E2 FA | 	rdword	local03, fp
2bf08     14 4E 85 F1 | 	sub	fp, #20
2bf0c     1C 2B 42 FC | 	wrbyte	local03, local10
2bf10     50 FC 9F FD | 	jmp	#LR__4480
2bf14                 | LR__4496
2bf14     04 4E 05 F1 | 	add	fp, #4
2bf18     A7 3A 02 FB | 	rdlong	local11, fp
2bf1c     04 4E 85 F1 | 	sub	fp, #4
2bf20     20 3A 06 F1 | 	add	local11, #32
2bf24     1D 33 C2 FA | 	rdbyte	local07, local11
2bf28     E5 32 0E F2 | 	cmp	local07, #229 wz
2bf2c     04 4E 05 A1 |  if_e	add	fp, #4
2bf30     A7 32 02 AB |  if_e	rdlong	local07, fp
2bf34     04 4E 85 A1 |  if_e	sub	fp, #4
2bf38     20 32 06 A1 |  if_e	add	local07, #32
2bf3c     19 0B 48 AC |  if_e	wrbyte	#5, local07
2bf40     24 4E 05 F1 | 	add	fp, #36
2bf44     A7 32 02 FB | 	rdlong	local07, fp
2bf48     24 4E 85 F1 | 	sub	fp, #36
2bf4c     08 32 0E F2 | 	cmp	local07, #8 wz
2bf50     0C 4E 05 A1 |  if_e	add	fp, #12
2bf54     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2bf58     02 32 66 A0 |  if_e	shl	local07, #2
2bf5c     A7 32 42 AC |  if_e	wrbyte	local07, fp
2bf60     0C 4E 85 A1 |  if_e	sub	fp, #12
2bf64     0C 4E 05 F1 | 	add	fp, #12
2bf68     A7 32 C2 FA | 	rdbyte	local07, fp
2bf6c     0C 4E 85 F1 | 	sub	fp, #12
2bf70     0C 32 06 F5 | 	and	local07, #12
2bf74     0C 32 0E F2 | 	cmp	local07, #12 wz
2bf78     18 00 90 AD |  if_e	jmp	#LR__4497
2bf7c     0C 4E 05 F1 | 	add	fp, #12
2bf80     A7 26 C2 FA | 	rdbyte	local01, fp
2bf84     0C 4E 85 F1 | 	sub	fp, #12
2bf88     03 26 06 F5 | 	and	local01, #3
2bf8c     03 26 0E F2 | 	cmp	local01, #3 wz
2bf90     14 00 90 5D |  if_ne	jmp	#LR__4498
2bf94                 | LR__4497
2bf94     10 4E 05 F1 | 	add	fp, #16
2bf98     A7 32 C2 FA | 	rdbyte	local07, fp
2bf9c     02 32 46 F5 | 	or	local07, #2
2bfa0     A7 32 42 FC | 	wrbyte	local07, fp
2bfa4     10 4E 85 F1 | 	sub	fp, #16
2bfa8                 | LR__4498
2bfa8     10 4E 05 F1 | 	add	fp, #16
2bfac     A7 32 C2 FA | 	rdbyte	local07, fp
2bfb0     10 4E 85 F1 | 	sub	fp, #16
2bfb4     02 32 CE F7 | 	test	local07, #2 wz
2bfb8     48 00 90 5D |  if_ne	jmp	#LR__4499
2bfbc     0C 4E 05 F1 | 	add	fp, #12
2bfc0     A7 32 C2 FA | 	rdbyte	local07, fp
2bfc4     0C 4E 85 F1 | 	sub	fp, #12
2bfc8     01 32 CE F7 | 	test	local07, #1 wz
2bfcc     10 4E 05 51 |  if_ne	add	fp, #16
2bfd0     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2bfd4     10 32 46 55 |  if_ne	or	local07, #16
2bfd8     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2bfdc     10 4E 85 51 |  if_ne	sub	fp, #16
2bfe0     0C 4E 05 F1 | 	add	fp, #12
2bfe4     A7 32 C2 FA | 	rdbyte	local07, fp
2bfe8     0C 4E 85 F1 | 	sub	fp, #12
2bfec     04 32 CE F7 | 	test	local07, #4 wz
2bff0     10 4E 05 51 |  if_ne	add	fp, #16
2bff4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2bff8     08 32 46 55 |  if_ne	or	local07, #8
2bffc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2c000     10 4E 85 51 |  if_ne	sub	fp, #16
2c004                 | LR__4499
2c004     04 4E 05 F1 | 	add	fp, #4
2c008     A7 32 02 FB | 	rdlong	local07, fp
2c00c     0C 4E 05 F1 | 	add	fp, #12
2c010     A7 26 C2 FA | 	rdbyte	local01, fp
2c014     10 4E 85 F1 | 	sub	fp, #16
2c018     2B 32 06 F1 | 	add	local07, #43
2c01c     19 27 42 FC | 	wrbyte	local01, local07
2c020                 | ' 	}
2c020                 | ' 
2c020                 | ' 	dp->fn[ 11 ] = cf;
2c020                 | ' 
2c020                 | ' 	return FR_OK;
2c020     00 FA 05 F6 | 	mov	result1, #0
2c024                 | LR__4500
2c024     A7 F0 03 F6 | 	mov	ptra, fp
2c028     B2 00 A0 FD | 	call	#popregs_
2c02c                 | _fatfs_cc_create_name_ret
2c02c     2D 00 64 FD | 	ret
2c030                 | 
2c030                 | _fatfs_cc_follow_path
2c030     02 4A 05 F6 | 	mov	COUNT_, #2
2c034     A8 00 A0 FD | 	call	#pushregs_
2c038     18 F0 07 F1 | 	add	ptra, #24
2c03c     04 4E 05 F1 | 	add	fp, #4
2c040     A7 12 62 FC | 	wrlong	arg01, fp
2c044     04 4E 05 F1 | 	add	fp, #4
2c048     A7 14 62 FC | 	wrlong	arg02, fp
2c04c     04 4E 85 F1 | 	sub	fp, #4
2c050     A7 FA 01 FB | 	rdlong	result1, fp
2c054     FD 26 02 FB | 	rdlong	local01, result1
2c058     10 4E 05 F1 | 	add	fp, #16
2c05c     A7 26 62 FC | 	wrlong	local01, fp
2c060     14 4E 85 F1 | 	sub	fp, #20
2c064     97 24 48 FB | 	callpa	#(@LR__4512-@LR__4510)>>2,fcache_load_ptr_
2c068                 | ' )
2c068                 | ' {
2c068                 | ' 	FRESULT res;
2c068                 | ' 	BYTE ns;
2c068                 | ' 	FATFS *fs = dp->obj.fs;
2c068                 | ' #line 3034 "ff.c"
2c068                 | ' 	{
2c068                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2c068                 | LR__4510
2c068     08 4E 05 F1 | 	add	fp, #8
2c06c     A7 26 02 FB | 	rdlong	local01, fp
2c070     08 4E 85 F1 | 	sub	fp, #8
2c074     13 27 C2 FA | 	rdbyte	local01, local01
2c078     2F 26 0E F2 | 	cmp	local01, #47 wz
2c07c     18 00 90 AD |  if_e	jmp	#LR__4511
2c080     08 4E 05 F1 | 	add	fp, #8
2c084     A7 26 02 FB | 	rdlong	local01, fp
2c088     08 4E 85 F1 | 	sub	fp, #8
2c08c     13 27 C2 FA | 	rdbyte	local01, local01
2c090     5C 26 0E F2 | 	cmp	local01, #92 wz
2c094     18 00 90 5D |  if_ne	jmp	#LR__4513
2c098                 | LR__4511
2c098     08 4E 05 F1 | 	add	fp, #8
2c09c     A7 26 02 FB | 	rdlong	local01, fp
2c0a0     01 26 06 F1 | 	add	local01, #1
2c0a4     A7 26 62 FC | 	wrlong	local01, fp
2c0a8     08 4E 85 F1 | 	sub	fp, #8
2c0ac     B8 FF 9F FD | 	jmp	#LR__4510
2c0b0                 | LR__4512
2c0b0                 | LR__4513
2c0b0     04 4E 05 F1 | 	add	fp, #4
2c0b4     A7 26 02 FB | 	rdlong	local01, fp
2c0b8     08 26 06 F1 | 	add	local01, #8
2c0bc     13 01 68 FC | 	wrlong	#0, local01
2c0c0     04 4E 05 F1 | 	add	fp, #4
2c0c4     A7 26 02 FB | 	rdlong	local01, fp
2c0c8     08 4E 85 F1 | 	sub	fp, #8
2c0cc     13 27 C2 FA | 	rdbyte	local01, local01
2c0d0     20 26 16 F2 | 	cmp	local01, #32 wc
2c0d4     30 00 90 3D |  if_ae	jmp	#LR__4514
2c0d8     04 4E 05 F1 | 	add	fp, #4
2c0dc     A7 26 02 FB | 	rdlong	local01, fp
2c0e0     2B 26 06 F1 | 	add	local01, #43
2c0e4     13 01 49 FC | 	wrbyte	#128, local01
2c0e8     A7 12 02 FB | 	rdlong	arg01, fp
2c0ec     04 4E 85 F1 | 	sub	fp, #4
2c0f0     00 14 06 F6 | 	mov	arg02, #0
2c0f4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2c0f8     0C 4E 05 F1 | 	add	fp, #12
2c0fc     A7 FA 61 FC | 	wrlong	result1, fp
2c100     0C 4E 85 F1 | 	sub	fp, #12
2c104     1C 01 90 FD | 	jmp	#LR__4518
2c108                 | LR__4514
2c108                 | ' 		for (;;) {
2c108                 | LR__4515
2c108     04 4E 05 F1 | 	add	fp, #4
2c10c     A7 12 02 FB | 	rdlong	arg01, fp
2c110     04 4E 05 F1 | 	add	fp, #4
2c114     A7 14 02 F6 | 	mov	arg02, fp
2c118     08 4E 85 F1 | 	sub	fp, #8
2c11c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2c120     0C 4E 05 F1 | 	add	fp, #12
2c124     A7 FA 61 FC | 	wrlong	result1, fp
2c128     00 FA 4D F2 | 	cmps	result1, #0 wz
2c12c     0C 4E 85 F1 | 	sub	fp, #12
2c130     F0 00 90 5D |  if_ne	jmp	#LR__4517
2c134     04 4E 05 F1 | 	add	fp, #4
2c138     A7 12 02 FB | 	rdlong	arg01, fp
2c13c     04 4E 85 F1 | 	sub	fp, #4
2c140     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2c144     0C 4E 05 F1 | 	add	fp, #12
2c148     A7 FA 61 FC | 	wrlong	result1, fp
2c14c     08 4E 85 F1 | 	sub	fp, #8
2c150     A7 26 02 FB | 	rdlong	local01, fp
2c154     2B 26 06 F1 | 	add	local01, #43
2c158     13 27 C2 FA | 	rdbyte	local01, local01
2c15c     0C 4E 05 F1 | 	add	fp, #12
2c160     A7 26 42 FC | 	wrbyte	local01, fp
2c164     04 4E 85 F1 | 	sub	fp, #4
2c168     A7 26 0A FB | 	rdlong	local01, fp wz
2c16c     0C 4E 85 F1 | 	sub	fp, #12
2c170     34 00 90 AD |  if_e	jmp	#LR__4516
2c174     0C 4E 05 F1 | 	add	fp, #12
2c178     A7 26 02 FB | 	rdlong	local01, fp
2c17c     0C 4E 85 F1 | 	sub	fp, #12
2c180     04 26 0E F2 | 	cmp	local01, #4 wz
2c184     9C 00 90 5D |  if_ne	jmp	#LR__4517
2c188     10 4E 05 F1 | 	add	fp, #16
2c18c     A7 26 C2 FA | 	rdbyte	local01, fp
2c190     10 4E 85 F1 | 	sub	fp, #16
2c194     04 26 CE F7 | 	test	local01, #4 wz
2c198     0C 4E 05 A1 |  if_e	add	fp, #12
2c19c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2c1a0     0C 4E 85 A1 |  if_e	sub	fp, #12
2c1a4                 | ' 					}
2c1a4                 | ' 				}
2c1a4                 | ' 				break;
2c1a4     7C 00 90 FD | 	jmp	#LR__4517
2c1a8                 | LR__4516
2c1a8     10 4E 05 F1 | 	add	fp, #16
2c1ac     A7 26 C2 FA | 	rdbyte	local01, fp
2c1b0     10 4E 85 F1 | 	sub	fp, #16
2c1b4     04 26 CE F7 | 	test	local01, #4 wz
2c1b8     68 00 90 5D |  if_ne	jmp	#LR__4517
2c1bc     04 4E 05 F1 | 	add	fp, #4
2c1c0     A7 26 02 FB | 	rdlong	local01, fp
2c1c4     04 4E 85 F1 | 	sub	fp, #4
2c1c8     06 26 06 F1 | 	add	local01, #6
2c1cc     13 27 C2 FA | 	rdbyte	local01, local01
2c1d0     10 26 CE F7 | 	test	local01, #16 wz
2c1d4     0C 4E 05 A1 |  if_e	add	fp, #12
2c1d8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2c1dc     0C 4E 85 A1 |  if_e	sub	fp, #12
2c1e0                 | ' 				res = FR_NO_PATH; break;
2c1e0     40 00 90 AD |  if_e	jmp	#LR__4517
2c1e4     04 4E 05 F1 | 	add	fp, #4
2c1e8     A7 28 02 FB | 	rdlong	local02, fp
2c1ec     14 27 02 F6 | 	mov	local01, local02
2c1f0     10 4E 05 F1 | 	add	fp, #16
2c1f4     A7 14 02 FB | 	rdlong	arg02, fp
2c1f8     0A 13 02 F6 | 	mov	arg01, arg02
2c1fc     34 14 06 F1 | 	add	arg02, #52
2c200     14 4E 85 F1 | 	sub	fp, #20
2c204     10 28 06 F1 | 	add	local02, #16
2c208     14 29 02 FB | 	rdlong	local02, local02
2c20c     FF 29 06 F5 | 	and	local02, #511
2c210     14 15 02 F1 | 	add	arg02, local02
2c214     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2c218     08 26 06 F1 | 	add	local01, #8
2c21c     13 FB 61 FC | 	wrlong	result1, local01
2c220     E4 FE 9F FD | 	jmp	#LR__4515
2c224                 | LR__4517
2c224                 | LR__4518
2c224                 | ' 			}
2c224                 | ' #line 3090 "ff.c"
2c224                 | ' 			{
2c224                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2c224                 | ' 			}
2c224                 | ' 		}
2c224                 | ' 	}
2c224                 | ' 
2c224                 | ' 	return res;
2c224     0C 4E 05 F1 | 	add	fp, #12
2c228     A7 FA 01 FB | 	rdlong	result1, fp
2c22c     0C 4E 85 F1 | 	sub	fp, #12
2c230     A7 F0 03 F6 | 	mov	ptra, fp
2c234     B2 00 A0 FD | 	call	#popregs_
2c238                 | _fatfs_cc_follow_path_ret
2c238     2D 00 64 FD | 	ret
2c23c                 | 
2c23c                 | _fatfs_cc_get_ldnumber
2c23c     01 00 66 F6 | 	neg	_var01, #1
2c240     09 03 0A FB | 	rdlong	_var02, arg01 wz
2c244     01 05 02 F6 | 	mov	_var03, _var02
2c248     01 FA 65 A6 |  if_e	neg	result1, #1
2c24c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2c250     97 10 48 FB | 	callpa	#(@LR__4521-@LR__4520)>>2,fcache_load_ptr_
2c254                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2c254                 | LR__4520
2c254     02 07 C2 FA | 	rdbyte	_var04, _var03
2c258     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2c25c     20 FA 15 F2 | 	cmp	result1, #32 wc
2c260     01 04 06 F1 | 	add	_var03, #1
2c264     03 09 02 36 |  if_ae	mov	_var05, _var04
2c268     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2c26c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2c270     E0 FF 9F 1D |  if_a	jmp	#LR__4520
2c274                 | LR__4521
2c274     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2c278     3A 06 0E F2 | 	cmp	_var04, #58 wz
2c27c     40 00 90 5D |  if_ne	jmp	#LR__4523
2c280     01 0A 06 F6 | 	mov	_var06, #1
2c284     01 09 C2 FA | 	rdbyte	_var05, _var02
2c288     30 08 16 F2 | 	cmp	_var05, #48 wc
2c28c     1C 00 90 CD |  if_b	jmp	#LR__4522
2c290     01 09 C2 FA | 	rdbyte	_var05, _var02
2c294     3A 08 16 F2 | 	cmp	_var05, #58 wc
2c298     01 0D 02 C6 |  if_b	mov	_var07, _var02
2c29c     02 0C 06 C1 |  if_b	add	_var07, #2
2c2a0     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2c2a4     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2c2a8     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2c2ac                 | LR__4522
2c2ac     01 0A 56 F2 | 	cmps	_var06, #1 wc
2c2b0     05 01 02 C6 |  if_b	mov	_var01, _var06
2c2b4     09 05 62 CC |  if_b	wrlong	_var03, arg01
2c2b8                 | ' 			vol = i;
2c2b8                 | ' 			*path = tt;
2c2b8                 | ' 		}
2c2b8                 | ' 		return vol;
2c2b8     00 FB 01 F6 | 	mov	result1, _var01
2c2bc     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2c2c0                 | LR__4523
2c2c0                 | ' 	}
2c2c0                 | ' #line 3170 "ff.c"
2c2c0                 | ' 	vol = 0;
2c2c0                 | ' 
2c2c0                 | ' 	return vol;
2c2c0     00 FA 05 F6 | 	mov	result1, #0
2c2c4                 | _fatfs_cc_get_ldnumber_ret
2c2c4     2D 00 64 FD | 	ret
2c2c8                 | 
2c2c8                 | _fatfs_cc_check_fs
2c2c8     04 4A 05 F6 | 	mov	COUNT_, #4
2c2cc     A8 00 A0 FD | 	call	#pushregs_
2c2d0     09 27 02 F6 | 	mov	local01, arg01
2c2d4     03 26 06 F1 | 	add	local01, #3
2c2d8     13 01 48 FC | 	wrbyte	#0, local01
2c2dc     2D 26 06 F1 | 	add	local01, #45
2c2e0     FF FF FF FF 
2c2e4     13 FF 6B FC | 	wrlong	##-1, local01
2c2e8     30 26 86 F1 | 	sub	local01, #48
2c2ec     13 13 02 F6 | 	mov	arg01, local01
2c2f0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2c2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2f8     04 FA 05 56 |  if_ne	mov	result1, #4
2c2fc     94 01 90 5D |  if_ne	jmp	#LR__4534
2c300     34 26 06 F1 | 	add	local01, #52
2c304     13 13 02 F6 | 	mov	arg01, local01
2c308     FE 13 06 F1 | 	add	arg01, #510
2c30c                 | ' {
2c30c                 | ' 
2c30c                 | ' 	return *((WORD*)ptr);
2c30c     09 29 E2 FA | 	rdword	local02, arg01
2c310     13 2B C2 FA | 	rdbyte	local03, local01
2c314     34 26 86 F1 | 	sub	local01, #52
2c318     15 2D E2 F8 | 	getbyte	local04, local03, #0
2c31c     EB 2C 0E F2 | 	cmp	local04, #235 wz
2c320     15 17 02 56 |  if_ne	mov	arg03, local03
2c324     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2c328     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2c32c     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2c330     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2c334     44 01 90 5D |  if_ne	jmp	#LR__4533
2c338     14 2D 32 F9 | 	getword	local04, local02, #0
2c33c     55 00 00 FF 
2c340     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2c344     2C 00 90 5D |  if_ne	jmp	#LR__4530
2c348     34 26 06 F1 | 	add	local01, #52
2c34c     13 13 02 F6 | 	mov	arg01, local01
2c350     34 26 86 F1 | 	sub	local01, #52
2c354     52 12 06 F1 | 	add	arg01, #82
2c358     8B 01 00 FF 
2c35c     A8 15 06 F6 | 	mov	arg02, ##@LR__5124
2c360     08 16 06 F6 | 	mov	arg03, #8
2c364     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2c368     00 FA 0D F2 | 	cmp	result1, #0 wz
2c36c                 | ' 			return 0;
2c36c     00 FA 05 A6 |  if_e	mov	result1, #0
2c370     20 01 90 AD |  if_e	jmp	#LR__4534
2c374                 | LR__4530
2c374     34 26 06 F1 | 	add	local01, #52
2c378     13 13 02 F6 | 	mov	arg01, local01
2c37c     0B 12 06 F1 | 	add	arg01, #11
2c380                 | ' {
2c380                 | ' 
2c380                 | ' 	return *((WORD*)ptr);
2c380     09 FB E1 FA | 	rdword	result1, arg01
2c384     0D 26 06 F1 | 	add	local01, #13
2c388     13 2B C2 FA | 	rdbyte	local03, local01
2c38c     41 26 86 F1 | 	sub	local01, #65
2c390     FD 2C 32 F9 | 	getword	local04, result1, #0
2c394     FD 14 32 F9 | 	getword	arg02, result1, #0
2c398     01 14 86 F1 | 	sub	arg02, #1
2c39c     0A 2D CA F7 | 	test	local04, arg02 wz
2c3a0     D8 00 90 5D |  if_ne	jmp	#LR__4532
2c3a4     FD 14 32 F9 | 	getword	arg02, result1, #0
2c3a8     01 00 00 FF 
2c3ac     00 14 16 F2 | 	cmp	arg02, ##512 wc
2c3b0     C8 00 90 CD |  if_b	jmp	#LR__4532
2c3b4     FD 14 32 F9 | 	getword	arg02, result1, #0
2c3b8     01 00 00 FF 
2c3bc     01 14 16 F2 | 	cmp	arg02, ##513 wc
2c3c0     B8 00 90 3D |  if_ae	jmp	#LR__4532
2c3c4     15 13 02 F6 | 	mov	arg01, local03
2c3c8     07 12 4E F7 | 	zerox	arg01, #7 wz
2c3cc     AC 00 90 AD |  if_e	jmp	#LR__4532
2c3d0     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2c3d4     15 2B E2 F8 | 	getbyte	local03, local03, #0
2c3d8     01 2A 86 F1 | 	sub	local03, #1
2c3dc     15 13 CA F7 | 	test	arg01, local03 wz
2c3e0     98 00 90 5D |  if_ne	jmp	#LR__4532
2c3e4     34 26 06 F1 | 	add	local01, #52
2c3e8     13 13 02 F6 | 	mov	arg01, local01
2c3ec     34 26 86 F1 | 	sub	local01, #52
2c3f0     0E 12 06 F1 | 	add	arg01, #14
2c3f4                 | ' {
2c3f4                 | ' 
2c3f4                 | ' 	return *((WORD*)ptr);
2c3f4     09 FB E9 FA | 	rdword	result1, arg01 wz
2c3f8     80 00 90 AD |  if_e	jmp	#LR__4532
2c3fc     44 26 06 F1 | 	add	local01, #68
2c400     13 13 C2 FA | 	rdbyte	arg01, local01
2c404     44 26 86 F1 | 	sub	local01, #68
2c408     01 12 86 F1 | 	sub	arg01, #1
2c40c     02 12 16 F2 | 	cmp	arg01, #2 wc
2c410     68 00 90 3D |  if_ae	jmp	#LR__4532
2c414     34 26 06 F1 | 	add	local01, #52
2c418     13 13 02 F6 | 	mov	arg01, local01
2c41c     34 26 86 F1 | 	sub	local01, #52
2c420     11 12 06 F1 | 	add	arg01, #17
2c424                 | ' {
2c424                 | ' 
2c424                 | ' 	return *((WORD*)ptr);
2c424     09 FB E9 FA | 	rdword	result1, arg01 wz
2c428     50 00 90 AD |  if_e	jmp	#LR__4532
2c42c     34 26 06 F1 | 	add	local01, #52
2c430     13 13 02 F6 | 	mov	arg01, local01
2c434     34 26 86 F1 | 	sub	local01, #52
2c438     13 12 06 F1 | 	add	arg01, #19
2c43c                 | ' {
2c43c                 | ' 
2c43c                 | ' 	return *((WORD*)ptr);
2c43c     09 FB E1 FA | 	rdword	result1, arg01
2c440     FD 2A 32 F9 | 	getword	local03, result1, #0
2c444     80 2A 16 F2 | 	cmp	local03, #128 wc
2c448     20 00 90 3D |  if_ae	jmp	#LR__4531
2c44c     34 26 06 F1 | 	add	local01, #52
2c450     13 13 02 F6 | 	mov	arg01, local01
2c454     34 26 86 F1 | 	sub	local01, #52
2c458     20 12 06 F1 | 	add	arg01, #32
2c45c                 | ' {
2c45c                 | ' 
2c45c                 | ' 	return *((DWORD*)ptr);
2c45c     09 FB 01 FB | 	rdlong	result1, arg01
2c460     80 00 00 FF 
2c464     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2c468     10 00 90 CD |  if_b	jmp	#LR__4532
2c46c                 | LR__4531
2c46c     4A 26 06 F1 | 	add	local01, #74
2c470                 | ' {
2c470                 | ' 
2c470                 | ' 	return *((WORD*)ptr);
2c470     13 FB E9 FA | 	rdword	result1, local01 wz
2c474                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2c474                 | ' 			&& ld_word(fs->win +  14 ) != 0
2c474                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2c474                 | ' 			&& ld_word(fs->win +  17 ) != 0
2c474                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2c474                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2c474                 | ' 				return 0;
2c474     00 FA 05 56 |  if_ne	mov	result1, #0
2c478     18 00 90 5D |  if_ne	jmp	#LR__4534
2c47c                 | LR__4532
2c47c                 | LR__4533
2c47c                 | ' 		}
2c47c                 | ' 	}
2c47c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2c47c     14 2B 32 F9 | 	getword	local03, local02, #0
2c480     55 00 00 FF 
2c484     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2c488     02 2C 06 A6 |  if_e	mov	local04, #2
2c48c     03 2C 06 56 |  if_ne	mov	local04, #3
2c490     16 FB 01 F6 | 	mov	result1, local04
2c494                 | LR__4534
2c494     A7 F0 03 F6 | 	mov	ptra, fp
2c498     B2 00 A0 FD | 	call	#popregs_
2c49c                 | _fatfs_cc_check_fs_ret
2c49c     2D 00 64 FD | 	ret
2c4a0                 | 
2c4a0                 | _fatfs_cc_find_volume
2c4a0     05 4A 05 F6 | 	mov	COUNT_, #5
2c4a4     A8 00 A0 FD | 	call	#pushregs_
2c4a8     24 F0 07 F1 | 	add	ptra, #36
2c4ac     09 27 02 F6 | 	mov	local01, arg01
2c4b0     0A 29 02 F6 | 	mov	local02, arg02
2c4b4     13 13 02 F6 | 	mov	arg01, local01
2c4b8     00 14 06 F6 | 	mov	arg02, #0
2c4bc     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2c4c0     02 FA 0D F2 | 	cmp	result1, #2 wz
2c4c4     0C 00 90 AD |  if_e	jmp	#LR__4540
2c4c8     03 FA 15 F2 | 	cmp	result1, #3 wc
2c4cc     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2c4d0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4548
2c4d4                 | LR__4540
2c4d4                 | ' 	for (i = 0; i < 4; i++) {
2c4d4     00 2A 06 F6 | 	mov	local03, #0
2c4d8     97 26 48 FB | 	callpa	#(@LR__4542-@LR__4541)>>2,fcache_load_ptr_
2c4dc                 | LR__4541
2c4dc     04 2A 16 F2 | 	cmp	local03, #4 wc
2c4e0     44 00 90 3D |  if_ae	jmp	#LR__4543
2c4e4     15 2D 02 F6 | 	mov	local04, local03
2c4e8     02 2C 66 F0 | 	shl	local04, #2
2c4ec     14 4E 05 F1 | 	add	fp, #20
2c4f0     A7 2C 02 F1 | 	add	local04, fp
2c4f4     34 26 06 F1 | 	add	local01, #52
2c4f8     13 13 02 F6 | 	mov	arg01, local01
2c4fc     34 26 86 F1 | 	sub	local01, #52
2c500     BE 13 06 F1 | 	add	arg01, #446
2c504     15 15 02 F6 | 	mov	arg02, local03
2c508     04 14 66 F0 | 	shl	arg02, #4
2c50c     0A 13 02 F1 | 	add	arg01, arg02
2c510     08 12 06 F1 | 	add	arg01, #8
2c514                 | ' {
2c514                 | ' 
2c514                 | ' 	return *((DWORD*)ptr);
2c514     09 FB 01 FB | 	rdlong	result1, arg01
2c518     14 4E 85 F1 | 	sub	fp, #20
2c51c     16 FB 61 FC | 	wrlong	result1, local04
2c520     01 2A 06 F1 | 	add	local03, #1
2c524     B4 FF 9F FD | 	jmp	#LR__4541
2c528                 | LR__4542
2c528                 | LR__4543
2c528     00 28 0E F2 | 	cmp	local02, #0 wz
2c52c     14 2D 02 56 |  if_ne	mov	local04, local02
2c530     01 2C 86 51 |  if_ne	sub	local04, #1
2c534     00 2C 06 A6 |  if_e	mov	local04, #0
2c538     16 2B 02 F6 | 	mov	local03, local04
2c53c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2c53c                 | ' 	}
2c53c                 | ' 	i = part ? part - 1 : 0;
2c53c                 | ' 	do {
2c53c                 | LR__4544
2c53c     15 2D 02 F6 | 	mov	local04, local03
2c540     02 2C 66 F0 | 	shl	local04, #2
2c544     14 4E 05 F1 | 	add	fp, #20
2c548     A7 2C 02 F1 | 	add	local04, fp
2c54c     16 2D 0A FB | 	rdlong	local04, local04 wz
2c550     14 4E 85 F1 | 	sub	fp, #20
2c554     28 00 90 AD |  if_e	jmp	#LR__4545
2c558     15 2D 02 F6 | 	mov	local04, local03
2c55c     02 2C 66 F0 | 	shl	local04, #2
2c560     14 4E 05 F1 | 	add	fp, #20
2c564     A7 2C 02 F1 | 	add	local04, fp
2c568     16 15 02 FB | 	rdlong	arg02, local04
2c56c     13 13 02 F6 | 	mov	arg01, local01
2c570     14 4E 85 F1 | 	sub	fp, #20
2c574     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2c578     FD 2C 02 F6 | 	mov	local04, result1
2c57c     04 00 90 FD | 	jmp	#LR__4546
2c580                 | LR__4545
2c580     03 2C 06 F6 | 	mov	local04, #3
2c584                 | LR__4546
2c584     16 2F 02 F6 | 	mov	local05, local04
2c588     00 28 0E F2 | 	cmp	local02, #0 wz
2c58c     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2c590     0C 00 90 8D |  if_c_and_z	jmp	#LR__4547
2c594     01 2A 06 A1 |  if_e	add	local03, #1
2c598     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2c59c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4544
2c5a0                 | LR__4547
2c5a0                 | ' 	return fmt;
2c5a0     17 FB 01 F6 | 	mov	result1, local05
2c5a4                 | LR__4548
2c5a4     A7 F0 03 F6 | 	mov	ptra, fp
2c5a8     B2 00 A0 FD | 	call	#popregs_
2c5ac                 | _fatfs_cc_find_volume_ret
2c5ac     2D 00 64 FD | 	ret
2c5b0                 | 
2c5b0                 | _fatfs_cc_mount_volume
2c5b0     0B 4A 05 F6 | 	mov	COUNT_, #11
2c5b4     A8 00 A0 FD | 	call	#pushregs_
2c5b8     0A 27 02 F6 | 	mov	local01, arg02
2c5bc     0B 29 02 F6 | 	mov	local02, arg03
2c5c0     13 01 68 FC | 	wrlong	#0, local01
2c5c4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2c5c8     FD 2A 02 F6 | 	mov	local03, result1
2c5cc     00 2A 56 F2 | 	cmps	local03, #0 wc
2c5d0     0B FA 05 C6 |  if_b	mov	result1, #11
2c5d4     3C 05 90 CD |  if_b	jmp	#LR__4560
2c5d8     15 17 02 F6 | 	mov	arg03, local03
2c5dc     02 16 66 F0 | 	shl	arg03, #2
2c5e0     F2 16 02 F1 | 	add	arg03, objptr
2c5e4     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2c5e8     0C FA 05 A6 |  if_e	mov	result1, #12
2c5ec     24 05 90 AD |  if_e	jmp	#LR__4560
2c5f0     13 2D 62 FC | 	wrlong	local04, local01
2c5f4     14 29 E2 F8 | 	getbyte	local02, local02, #0
2c5f8     FE 28 06 F5 | 	and	local02, #254
2c5fc     16 17 CA FA | 	rdbyte	arg03, local04 wz
2c600     4C 00 90 AD |  if_e	jmp	#LR__4551
2c604     01 2C 06 F1 | 	add	local04, #1
2c608     16 13 CA FA | 	rdbyte	arg01, local04 wz
2c60c     01 2C 86 F1 | 	sub	local04, #1
2c610     01 FA 05 56 |  if_ne	mov	result1, #1
2c614                 | ' 
2c614                 | ' 	return Stat;
2c614     01 00 00 AF 
2c618     20 E4 05 A1 |  if_e	add	objptr, ##544
2c61c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c620     01 00 00 AF 
2c624     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c628     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2c62c     01 16 CE F7 | 	test	arg03, #1 wz
2c630     1C 00 90 5D |  if_ne	jmp	#LR__4550
2c634     00 28 0E F2 | 	cmp	local02, #0 wz
2c638     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2c63c     04 FA CD 57 |  if_ne	test	result1, #4 wz
2c640                 | ' 				return FR_WRITE_PROTECTED;
2c640     0A FA 05 56 |  if_ne	mov	result1, #10
2c644     CC 04 90 5D |  if_ne	jmp	#LR__4560
2c648                 | ' 			}
2c648                 | ' 			return FR_OK;
2c648     00 FA 05 F6 | 	mov	result1, #0
2c64c     C4 04 90 FD | 	jmp	#LR__4560
2c650                 | LR__4550
2c650                 | LR__4551
2c650     16 01 48 FC | 	wrbyte	#0, local04
2c654     01 2C 06 F1 | 	add	local04, #1
2c658     16 2B 42 FC | 	wrbyte	local03, local04
2c65c     16 13 C2 FA | 	rdbyte	arg01, local04
2c660     01 2C 86 F1 | 	sub	local04, #1
2c664     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2c668     FD 16 02 F6 | 	mov	arg03, result1
2c66c     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2c670     01 2E CE F7 | 	test	local05, #1 wz
2c674                 | ' 		return FR_NOT_READY;
2c674     03 FA 05 56 |  if_ne	mov	result1, #3
2c678     98 04 90 5D |  if_ne	jmp	#LR__4560
2c67c     00 28 0E F2 | 	cmp	local02, #0 wz
2c680     0B 2F 02 56 |  if_ne	mov	local05, arg03
2c684     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2c688     04 2E CE 57 |  if_ne	test	local05, #4 wz
2c68c                 | ' 		return FR_WRITE_PROTECTED;
2c68c     0A FA 05 56 |  if_ne	mov	result1, #10
2c690     80 04 90 5D |  if_ne	jmp	#LR__4560
2c694     16 13 02 F6 | 	mov	arg01, local04
2c698     00 14 06 F6 | 	mov	arg02, #0
2c69c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2c6a0     FD 12 02 F6 | 	mov	arg01, result1
2c6a4     04 12 0E F2 | 	cmp	arg01, #4 wz
2c6a8     01 FA 05 A6 |  if_e	mov	result1, #1
2c6ac     64 04 90 AD |  if_e	jmp	#LR__4560
2c6b0     02 12 16 F2 | 	cmp	arg01, #2 wc
2c6b4     0D FA 05 36 |  if_ae	mov	result1, #13
2c6b8     58 04 90 3D |  if_ae	jmp	#LR__4560
2c6bc     30 2C 06 F1 | 	add	local04, #48
2c6c0     16 31 02 FB | 	rdlong	local06, local04
2c6c4     04 2C 06 F1 | 	add	local04, #4
2c6c8     16 13 02 F6 | 	mov	arg01, local04
2c6cc     34 2C 86 F1 | 	sub	local04, #52
2c6d0     0B 12 06 F1 | 	add	arg01, #11
2c6d4                 | ' {
2c6d4                 | ' 
2c6d4                 | ' 	return *((WORD*)ptr);
2c6d4     09 FB E1 FA | 	rdword	result1, arg01
2c6d8     01 00 00 FF 
2c6dc     00 FA 0D F2 | 	cmp	result1, ##512 wz
2c6e0     0D FA 05 56 |  if_ne	mov	result1, #13
2c6e4     2C 04 90 5D |  if_ne	jmp	#LR__4560
2c6e8     34 2C 06 F1 | 	add	local04, #52
2c6ec     16 13 02 F6 | 	mov	arg01, local04
2c6f0     34 2C 86 F1 | 	sub	local04, #52
2c6f4     16 12 06 F1 | 	add	arg01, #22
2c6f8                 | ' {
2c6f8                 | ' 
2c6f8                 | ' 	return *((WORD*)ptr);
2c6f8     09 FB E1 FA | 	rdword	result1, arg01
2c6fc     FD 32 0A F6 | 	mov	local07, result1 wz
2c700     18 00 90 5D |  if_ne	jmp	#LR__4552
2c704     34 2C 06 F1 | 	add	local04, #52
2c708     16 13 02 F6 | 	mov	arg01, local04
2c70c     34 2C 86 F1 | 	sub	local04, #52
2c710     24 12 06 F1 | 	add	arg01, #36
2c714                 | ' {
2c714                 | ' 
2c714                 | ' 	return *((DWORD*)ptr);
2c714     09 FB 01 FB | 	rdlong	result1, arg01
2c718     FD 32 02 F6 | 	mov	local07, result1
2c71c                 | LR__4552
2c71c     1C 2C 06 F1 | 	add	local04, #28
2c720     16 33 62 FC | 	wrlong	local07, local04
2c724     28 2C 06 F1 | 	add	local04, #40
2c728     16 2F C2 FA | 	rdbyte	local05, local04
2c72c     42 2C 86 F1 | 	sub	local04, #66
2c730     16 2F 42 FC | 	wrbyte	local05, local04
2c734     16 2F C2 FA | 	rdbyte	local05, local04
2c738     02 2C 86 F1 | 	sub	local04, #2
2c73c     01 2E 0E F2 | 	cmp	local05, #1 wz
2c740     02 2C 06 51 |  if_ne	add	local04, #2
2c744     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2c748     02 2C 86 51 |  if_ne	sub	local04, #2
2c74c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2c750     0D FA 05 56 |  if_ne	mov	result1, #13
2c754     BC 03 90 5D |  if_ne	jmp	#LR__4560
2c758     02 2C 06 F1 | 	add	local04, #2
2c75c     16 2F C2 FA | 	rdbyte	local05, local04
2c760     17 33 02 FD | 	qmul	local07, local05
2c764     3F 2C 06 F1 | 	add	local04, #63
2c768     16 2F C2 FA | 	rdbyte	local05, local04
2c76c     37 2C 86 F1 | 	sub	local04, #55
2c770     16 2F 52 FC | 	wrword	local05, local04
2c774     16 2F EA FA | 	rdword	local05, local04 wz
2c778     0A 2C 86 F1 | 	sub	local04, #10
2c77c     18 32 62 FD | 	getqx	local07
2c780     20 00 90 AD |  if_e	jmp	#LR__4553
2c784     0A 2C 06 F1 | 	add	local04, #10
2c788     16 2F E2 FA | 	rdword	local05, local04
2c78c     17 2B 32 F9 | 	getword	local03, local05, #0
2c790     0A 2C 86 F1 | 	sub	local04, #10
2c794     17 2F 32 F9 | 	getword	local05, local05, #0
2c798     01 2E 86 F1 | 	sub	local05, #1
2c79c     17 2B CA F7 | 	test	local03, local05 wz
2c7a0     08 00 90 AD |  if_e	jmp	#LR__4554
2c7a4                 | LR__4553
2c7a4     0D FA 05 F6 | 	mov	result1, #13
2c7a8     68 03 90 FD | 	jmp	#LR__4560
2c7ac                 | LR__4554
2c7ac     34 2C 06 F1 | 	add	local04, #52
2c7b0     16 13 02 F6 | 	mov	arg01, local04
2c7b4     11 12 06 F1 | 	add	arg01, #17
2c7b8                 | ' {
2c7b8                 | ' 
2c7b8                 | ' 	return *((WORD*)ptr);
2c7b8     09 FB E1 FA | 	rdword	result1, arg01
2c7bc     2C 2C 86 F1 | 	sub	local04, #44
2c7c0     16 FB 51 FC | 	wrword	result1, local04
2c7c4     16 2F E2 FA | 	rdword	local05, local04
2c7c8     08 2C 86 F1 | 	sub	local04, #8
2c7cc     17 13 52 F6 | 	abs	arg01, local05 wc
2c7d0     09 13 42 F8 | 	getnib	arg01, arg01, #0
2c7d4     09 13 8A F6 | 	negc	arg01, arg01 wz
2c7d8     0D FA 05 56 |  if_ne	mov	result1, #13
2c7dc     34 03 90 5D |  if_ne	jmp	#LR__4560
2c7e0     34 2C 06 F1 | 	add	local04, #52
2c7e4     16 13 02 F6 | 	mov	arg01, local04
2c7e8     34 2C 86 F1 | 	sub	local04, #52
2c7ec     13 12 06 F1 | 	add	arg01, #19
2c7f0                 | ' {
2c7f0                 | ' 
2c7f0                 | ' 	return *((WORD*)ptr);
2c7f0     09 FB E1 FA | 	rdword	result1, arg01
2c7f4     FD 34 0A F6 | 	mov	local08, result1 wz
2c7f8     34 2C 06 A1 |  if_e	add	local04, #52
2c7fc     16 13 02 A6 |  if_e	mov	arg01, local04
2c800     34 2C 86 A1 |  if_e	sub	local04, #52
2c804     20 12 06 A1 |  if_e	add	arg01, #32
2c808                 | ' {
2c808                 | ' 
2c808                 | ' 	return *((DWORD*)ptr);
2c808     09 35 02 AB |  if_e	rdlong	local08, arg01
2c80c     34 2C 06 F1 | 	add	local04, #52
2c810     16 13 02 F6 | 	mov	arg01, local04
2c814     34 2C 86 F1 | 	sub	local04, #52
2c818     0E 12 06 F1 | 	add	arg01, #14
2c81c                 | ' {
2c81c                 | ' 
2c81c                 | ' 	return *((WORD*)ptr);
2c81c     09 FB E1 FA | 	rdword	result1, arg01
2c820     FD 12 02 F6 | 	mov	arg01, result1
2c824     09 2F 02 F6 | 	mov	local05, arg01
2c828     0F 2E 4E F7 | 	zerox	local05, #15 wz
2c82c     0D FA 05 A6 |  if_e	mov	result1, #13
2c830     E0 02 90 AD |  if_e	jmp	#LR__4560
2c834     09 37 32 F9 | 	getword	local09, arg01, #0
2c838     19 37 02 F1 | 	add	local09, local07
2c83c     08 2C 06 F1 | 	add	local04, #8
2c840     16 2F E2 FA | 	rdword	local05, local04
2c844     08 2C 86 F1 | 	sub	local04, #8
2c848     17 2F 52 F6 | 	abs	local05, local05 wc
2c84c     04 2E 46 F0 | 	shr	local05, #4
2c850     17 37 82 F3 | 	sumc	local09, local05
2c854     1B 35 12 F2 | 	cmp	local08, local09 wc
2c858     0D FA 05 C6 |  if_b	mov	result1, #13
2c85c     B4 02 90 CD |  if_b	jmp	#LR__4560
2c860     1B 35 82 F1 | 	sub	local08, local09
2c864     0A 2C 06 F1 | 	add	local04, #10
2c868     16 2F E2 FA | 	rdword	local05, local04
2c86c     17 35 12 FD | 	qdiv	local08, local05
2c870     0A 2C 86 F1 | 	sub	local04, #10
2c874     18 2E 62 FD | 	getqx	local05
2c878     00 2E 0E F2 | 	cmp	local05, #0 wz
2c87c     0D FA 05 A6 |  if_e	mov	result1, #13
2c880     90 02 90 AD |  if_e	jmp	#LR__4560
2c884     00 38 06 F6 | 	mov	local10, #0
2c888     FF FF 07 FF 
2c88c     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2c890     03 38 06 C6 |  if_b	mov	local10, #3
2c894     7F 00 00 FF 
2c898     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2c89c     02 38 06 C6 |  if_b	mov	local10, #2
2c8a0     07 00 00 FF 
2c8a4     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2c8a8     01 38 06 C6 |  if_b	mov	local10, #1
2c8ac     00 38 0E F2 | 	cmp	local10, #0 wz
2c8b0     0D FA 05 A6 |  if_e	mov	result1, #13
2c8b4     5C 02 90 AD |  if_e	jmp	#LR__4560
2c8b8     02 2E 06 F1 | 	add	local05, #2
2c8bc     18 2C 06 F1 | 	add	local04, #24
2c8c0     16 2F 62 FC | 	wrlong	local05, local04
2c8c4     08 2C 06 F1 | 	add	local04, #8
2c8c8     16 31 62 FC | 	wrlong	local06, local04
2c8cc     18 2F 02 F6 | 	mov	local05, local06
2c8d0     09 13 32 F9 | 	getword	arg01, arg01, #0
2c8d4     09 2F 02 F1 | 	add	local05, arg01
2c8d8     04 2C 06 F1 | 	add	local04, #4
2c8dc     16 2F 62 FC | 	wrlong	local05, local04
2c8e0     18 2F 02 F6 | 	mov	local05, local06
2c8e4     1B 2F 02 F1 | 	add	local05, local09
2c8e8     08 2C 06 F1 | 	add	local04, #8
2c8ec     16 2F 62 FC | 	wrlong	local05, local04
2c8f0     2C 2C 86 F1 | 	sub	local04, #44
2c8f4     03 38 0E F2 | 	cmp	local10, #3 wz
2c8f8     5C 00 90 5D |  if_ne	jmp	#LR__4555
2c8fc     34 2C 06 F1 | 	add	local04, #52
2c900     16 13 02 F6 | 	mov	arg01, local04
2c904     34 2C 86 F1 | 	sub	local04, #52
2c908     2A 12 06 F1 | 	add	arg01, #42
2c90c                 | ' {
2c90c                 | ' 
2c90c                 | ' 	return *((WORD*)ptr);
2c90c     09 FB E9 FA | 	rdword	result1, arg01 wz
2c910     0D FA 05 56 |  if_ne	mov	result1, #13
2c914     FC 01 90 5D |  if_ne	jmp	#LR__4560
2c918     08 2C 06 F1 | 	add	local04, #8
2c91c     16 2F EA FA | 	rdword	local05, local04 wz
2c920     08 2C 86 F1 | 	sub	local04, #8
2c924     0D FA 05 56 |  if_ne	mov	result1, #13
2c928     E8 01 90 5D |  if_ne	jmp	#LR__4560
2c92c     34 2C 06 F1 | 	add	local04, #52
2c930     16 13 02 F6 | 	mov	arg01, local04
2c934     2C 12 06 F1 | 	add	arg01, #44
2c938                 | ' {
2c938                 | ' 
2c938                 | ' 	return *((DWORD*)ptr);
2c938     09 FB 01 FB | 	rdlong	result1, arg01
2c93c     0C 2C 86 F1 | 	sub	local04, #12
2c940     16 FB 61 FC | 	wrlong	result1, local04
2c944     10 2C 86 F1 | 	sub	local04, #16
2c948     16 3B 02 FB | 	rdlong	local11, local04
2c94c     18 2C 86 F1 | 	sub	local04, #24
2c950     02 3A 66 F0 | 	shl	local11, #2
2c954     6C 00 90 FD | 	jmp	#LR__4557
2c958                 | LR__4555
2c958     08 2C 06 F1 | 	add	local04, #8
2c95c     16 2F EA FA | 	rdword	local05, local04 wz
2c960     08 2C 86 F1 | 	sub	local04, #8
2c964     0D FA 05 A6 |  if_e	mov	result1, #13
2c968     A8 01 90 AD |  if_e	jmp	#LR__4560
2c96c     24 2C 06 F1 | 	add	local04, #36
2c970     16 2F 02 FB | 	rdlong	local05, local04
2c974     19 2F 02 F1 | 	add	local05, local07
2c978     04 2C 06 F1 | 	add	local04, #4
2c97c     16 2F 62 FC | 	wrlong	local05, local04
2c980     28 2C 86 F1 | 	sub	local04, #40
2c984     02 38 0E F2 | 	cmp	local10, #2 wz
2c988     18 2C 06 A1 |  if_e	add	local04, #24
2c98c     16 2F 02 AB |  if_e	rdlong	local05, local04
2c990     18 2C 86 A1 |  if_e	sub	local04, #24
2c994     01 2E 66 A0 |  if_e	shl	local05, #1
2c998     24 00 90 AD |  if_e	jmp	#LR__4556
2c99c     18 2C 06 F1 | 	add	local04, #24
2c9a0     16 3B 02 FB | 	rdlong	local11, local04
2c9a4     1D 2F 02 F6 | 	mov	local05, local11
2c9a8     01 2E 66 F0 | 	shl	local05, #1
2c9ac     1D 2F 02 F1 | 	add	local05, local11
2c9b0     01 2E 46 F0 | 	shr	local05, #1
2c9b4     18 2C 86 F1 | 	sub	local04, #24
2c9b8     01 3A 06 F5 | 	and	local11, #1
2c9bc     1D 2F 02 F1 | 	add	local05, local11
2c9c0                 | LR__4556
2c9c0     17 3B 02 F6 | 	mov	local11, local05
2c9c4                 | LR__4557
2c9c4     FF 3B 06 F1 | 	add	local11, #511
2c9c8     09 3A 46 F0 | 	shr	local11, #9
2c9cc     1C 2C 06 F1 | 	add	local04, #28
2c9d0     16 17 02 FB | 	rdlong	arg03, local04
2c9d4     1C 2C 86 F1 | 	sub	local04, #28
2c9d8     1D 17 12 F2 | 	cmp	arg03, local11 wc
2c9dc     0D FA 05 C6 |  if_b	mov	result1, #13
2c9e0     30 01 90 CD |  if_b	jmp	#LR__4560
2c9e4     14 2C 06 F1 | 	add	local04, #20
2c9e8     FF FF FF FF 
2c9ec     16 FF 6B FC | 	wrlong	##-1, local04
2c9f0     04 2C 86 F1 | 	sub	local04, #4
2c9f4     FF FF FF FF 
2c9f8     16 FF 6B FC | 	wrlong	##-1, local04
2c9fc     0C 2C 86 F1 | 	sub	local04, #12
2ca00     16 01 49 FC | 	wrbyte	#128, local04
2ca04     04 2C 86 F1 | 	sub	local04, #4
2ca08     03 38 0E F2 | 	cmp	local10, #3 wz
2ca0c     D0 00 90 5D |  if_ne	jmp	#LR__4559
2ca10     34 2C 06 F1 | 	add	local04, #52
2ca14     16 13 02 F6 | 	mov	arg01, local04
2ca18     34 2C 86 F1 | 	sub	local04, #52
2ca1c     30 12 06 F1 | 	add	arg01, #48
2ca20                 | ' {
2ca20                 | ' 
2ca20                 | ' 	return *((WORD*)ptr);
2ca20     09 FB E1 FA | 	rdword	result1, arg01
2ca24     FD 2E 32 F9 | 	getword	local05, result1, #0
2ca28     01 2E 0E F2 | 	cmp	local05, #1 wz
2ca2c     B0 00 90 5D |  if_ne	jmp	#LR__4559
2ca30     01 30 06 F1 | 	add	local06, #1
2ca34     16 13 02 F6 | 	mov	arg01, local04
2ca38     18 15 02 F6 | 	mov	arg02, local06
2ca3c     CC CD BF FD | 	call	#_fatfs_cc_move_window
2ca40     00 FA 0D F2 | 	cmp	result1, #0 wz
2ca44     98 00 90 5D |  if_ne	jmp	#LR__4559
2ca48     04 2C 06 F1 | 	add	local04, #4
2ca4c     16 01 48 FC | 	wrbyte	#0, local04
2ca50     30 2C 06 F1 | 	add	local04, #48
2ca54     16 13 02 F6 | 	mov	arg01, local04
2ca58     34 2C 86 F1 | 	sub	local04, #52
2ca5c     FE 13 06 F1 | 	add	arg01, #510
2ca60                 | ' {
2ca60                 | ' 
2ca60                 | ' 	return *((WORD*)ptr);
2ca60     09 FB E1 FA | 	rdword	result1, arg01
2ca64     FD 2E 32 F9 | 	getword	local05, result1, #0
2ca68     55 00 00 FF 
2ca6c     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2ca70     34 2C 06 A1 |  if_e	add	local04, #52
2ca74     16 13 02 A6 |  if_e	mov	arg01, local04
2ca78     34 2C 86 A1 |  if_e	sub	local04, #52
2ca7c                 | ' {
2ca7c                 | ' 
2ca7c                 | ' 	return *((DWORD*)ptr);
2ca7c     09 FB 01 AB |  if_e	rdlong	result1, arg01
2ca80     A9 B0 20 AF 
2ca84     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2ca88     54 00 90 5D |  if_ne	jmp	#LR__4558
2ca8c     34 2C 06 F1 | 	add	local04, #52
2ca90     16 13 02 F6 | 	mov	arg01, local04
2ca94     34 2C 86 F1 | 	sub	local04, #52
2ca98     E4 13 06 F1 | 	add	arg01, #484
2ca9c                 | ' {
2ca9c                 | ' 
2ca9c                 | ' 	return *((DWORD*)ptr);
2ca9c     09 FB 01 FB | 	rdlong	result1, arg01
2caa0     B9 A0 30 FF 
2caa4     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2caa8     34 00 90 5D |  if_ne	jmp	#LR__4558
2caac     34 2C 06 F1 | 	add	local04, #52
2cab0     16 13 02 F6 | 	mov	arg01, local04
2cab4     E8 13 06 F1 | 	add	arg01, #488
2cab8                 | ' {
2cab8                 | ' 
2cab8                 | ' 	return *((DWORD*)ptr);
2cab8     09 FB 01 FB | 	rdlong	result1, arg01
2cabc     20 2C 86 F1 | 	sub	local04, #32
2cac0     16 FB 61 FC | 	wrlong	result1, local04
2cac4     20 2C 06 F1 | 	add	local04, #32
2cac8     16 13 02 F6 | 	mov	arg01, local04
2cacc     EC 13 06 F1 | 	add	arg01, #492
2cad0                 | ' {
2cad0                 | ' 
2cad0                 | ' 	return *((DWORD*)ptr);
2cad0     09 FB 01 FB | 	rdlong	result1, arg01
2cad4     24 2C 86 F1 | 	sub	local04, #36
2cad8     16 FB 61 FC | 	wrlong	result1, local04
2cadc     10 2C 86 F1 | 	sub	local04, #16
2cae0                 | LR__4558
2cae0                 | LR__4559
2cae0     16 39 42 FC | 	wrbyte	local10, local04
2cae4     04 E4 05 F1 | 	add	objptr, #4
2cae8     F2 2E E2 FA | 	rdword	local05, objptr
2caec     01 2E 06 F1 | 	add	local05, #1
2caf0     F2 2E 52 FC | 	wrword	local05, objptr
2caf4     F2 3A E2 FA | 	rdword	local11, objptr
2caf8     06 2C 06 F1 | 	add	local04, #6
2cafc     16 3B 52 FC | 	wrword	local11, local04
2cb00     04 E4 05 F1 | 	add	objptr, #4
2cb04     06 2C 06 F1 | 	add	local04, #6
2cb08     16 E5 61 FC | 	wrlong	objptr, local04
2cb0c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2cb0c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2cb0c                 | ' 			{
2cb0c                 | ' 
2cb0c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2cb0c                 | ' 
2cb0c                 | ' 
2cb0c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2cb0c                 | ' 
2cb0c                 | ' 			}
2cb0c                 | ' 		}
2cb0c                 | ' 
2cb0c                 | ' 
2cb0c                 | ' 	}
2cb0c                 | ' 
2cb0c                 | ' 	fs->fs_type = (BYTE)fmt;
2cb0c                 | ' 	fs->id = ++Fsid;
2cb0c                 | ' 
2cb0c                 | ' 	fs->lfnbuf = LfnBuf;
2cb0c                 | ' #line 3567 "ff.c"
2cb0c                 | ' 	return FR_OK;
2cb0c     00 FA 05 F6 | 	mov	result1, #0
2cb10     08 E4 85 F1 | 	sub	objptr, #8
2cb14                 | LR__4560
2cb14     A7 F0 03 F6 | 	mov	ptra, fp
2cb18     B2 00 A0 FD | 	call	#popregs_
2cb1c                 | _fatfs_cc_mount_volume_ret
2cb1c     2D 00 64 FD | 	ret
2cb20                 | 
2cb20                 | _fatfs_cc_validate
2cb20     09 01 0A F6 | 	mov	_var01, arg01 wz
2cb24     09 02 06 F6 | 	mov	_var02, #9
2cb28     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2cb2c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2cb30     50 00 90 AD |  if_e	jmp	#LR__4570
2cb34     04 00 06 F1 | 	add	_var01, #4
2cb38     00 07 E2 FA | 	rdword	_var04, _var01
2cb3c     04 00 86 F1 | 	sub	_var01, #4
2cb40     00 13 02 FB | 	rdlong	arg01, _var01
2cb44     06 12 06 F1 | 	add	arg01, #6
2cb48     09 FB E1 FA | 	rdword	result1, arg01
2cb4c     FD 06 0A F2 | 	cmp	_var04, result1 wz
2cb50     30 00 90 5D |  if_ne	jmp	#LR__4570
2cb54     00 07 02 FB | 	rdlong	_var04, _var01
2cb58     01 06 06 F1 | 	add	_var04, #1
2cb5c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2cb60     01 FA 05 56 |  if_ne	mov	result1, #1
2cb64                 | ' 
2cb64                 | ' 	return Stat;
2cb64     01 00 00 AF 
2cb68     20 E4 05 A1 |  if_e	add	objptr, ##544
2cb6c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2cb70     01 00 00 AF 
2cb74     20 E4 85 A1 |  if_e	sub	objptr, ##544
2cb78     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2cb7c     01 04 CE F7 | 	test	_var03, #1 wz
2cb80     00 02 06 A6 |  if_e	mov	_var02, #0
2cb84                 | LR__4570
2cb84     00 02 0E F2 | 	cmp	_var02, #0 wz
2cb88     00 05 02 AB |  if_e	rdlong	_var03, _var01
2cb8c     00 04 06 56 |  if_ne	mov	_var03, #0
2cb90     0A 05 62 FC | 	wrlong	_var03, arg02
2cb94                 | ' 			res = FR_OK;
2cb94                 | ' 		}
2cb94                 | ' 
2cb94                 | ' 	}
2cb94                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2cb94                 | ' 	return res;
2cb94     01 FB 01 F6 | 	mov	result1, _var02
2cb98                 | _fatfs_cc_validate_ret
2cb98     2D 00 64 FD | 	ret
2cb9c                 | 
2cb9c                 | _fatfs_cc_f_mount
2cb9c     01 4A 05 F6 | 	mov	COUNT_, #1
2cba0     A8 00 A0 FD | 	call	#pushregs_
2cba4     20 F0 07 F1 | 	add	ptra, #32
2cba8     04 4E 05 F1 | 	add	fp, #4
2cbac     A7 12 62 FC | 	wrlong	arg01, fp
2cbb0     04 4E 05 F1 | 	add	fp, #4
2cbb4     A7 14 62 FC | 	wrlong	arg02, fp
2cbb8     04 4E 05 F1 | 	add	fp, #4
2cbbc     A7 16 42 FC | 	wrbyte	arg03, fp
2cbc0     04 4E 85 F1 | 	sub	fp, #4
2cbc4     A7 16 02 FB | 	rdlong	arg03, fp
2cbc8     14 4E 05 F1 | 	add	fp, #20
2cbcc     A7 16 62 FC | 	wrlong	arg03, fp
2cbd0     A7 12 02 F6 | 	mov	arg01, fp
2cbd4     1C 4E 85 F1 | 	sub	fp, #28
2cbd8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2cbdc     14 4E 05 F1 | 	add	fp, #20
2cbe0     A7 FA 61 FC | 	wrlong	result1, fp
2cbe4     14 4E 85 F1 | 	sub	fp, #20
2cbe8     00 FA 55 F2 | 	cmps	result1, #0 wc
2cbec     0B FA 05 C6 |  if_b	mov	result1, #11
2cbf0     C0 00 90 CD |  if_b	jmp	#LR__4581
2cbf4     14 4E 05 F1 | 	add	fp, #20
2cbf8     A7 16 02 FB | 	rdlong	arg03, fp
2cbfc     02 16 66 F0 | 	shl	arg03, #2
2cc00     F2 16 02 F1 | 	add	arg03, objptr
2cc04     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2cc08     04 4E 85 F1 | 	sub	fp, #4
2cc0c     A7 16 62 FC | 	wrlong	arg03, fp
2cc10     10 4E 85 F1 | 	sub	fp, #16
2cc14     28 00 90 AD |  if_e	jmp	#LR__4580
2cc18     10 4E 05 F1 | 	add	fp, #16
2cc1c     A7 16 02 FB | 	rdlong	arg03, fp
2cc20     10 4E 85 F1 | 	sub	fp, #16
2cc24     01 16 06 F1 | 	add	arg03, #1
2cc28     0B 13 C2 FA | 	rdbyte	arg01, arg03
2cc2c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2cc30     10 4E 05 F1 | 	add	fp, #16
2cc34     A7 16 02 FB | 	rdlong	arg03, fp
2cc38     10 4E 85 F1 | 	sub	fp, #16
2cc3c     0B 01 48 FC | 	wrbyte	#0, arg03
2cc40                 | LR__4580
2cc40     04 4E 05 F1 | 	add	fp, #4
2cc44     A7 26 0A FB | 	rdlong	local01, fp wz
2cc48     04 4E 85 F1 | 	sub	fp, #4
2cc4c     04 4E 05 51 |  if_ne	add	fp, #4
2cc50     A7 26 02 5B |  if_ne	rdlong	local01, fp
2cc54     04 4E 85 51 |  if_ne	sub	fp, #4
2cc58     13 01 48 5C |  if_ne	wrbyte	#0, local01
2cc5c     14 4E 05 F1 | 	add	fp, #20
2cc60     A7 26 02 FB | 	rdlong	local01, fp
2cc64     02 26 66 F0 | 	shl	local01, #2
2cc68     F2 26 02 F1 | 	add	local01, objptr
2cc6c     10 4E 85 F1 | 	sub	fp, #16
2cc70     A7 16 02 FB | 	rdlong	arg03, fp
2cc74     13 17 62 FC | 	wrlong	arg03, local01
2cc78     08 4E 05 F1 | 	add	fp, #8
2cc7c     A7 26 CA FA | 	rdbyte	local01, fp wz
2cc80     0C 4E 85 F1 | 	sub	fp, #12
2cc84     00 FA 05 A6 |  if_e	mov	result1, #0
2cc88     28 00 90 AD |  if_e	jmp	#LR__4581
2cc8c     08 4E 05 F1 | 	add	fp, #8
2cc90     A7 12 02 F6 | 	mov	arg01, fp
2cc94     04 4E 85 F1 | 	sub	fp, #4
2cc98     A7 14 02 F6 | 	mov	arg02, fp
2cc9c     04 4E 85 F1 | 	sub	fp, #4
2cca0     00 16 06 F6 | 	mov	arg03, #0
2cca4     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2cca8     18 4E 05 F1 | 	add	fp, #24
2ccac     A7 FA 61 FC | 	wrlong	result1, fp
2ccb0                 | ' 
2ccb0                 | ' 	res = mount_volume(&path, &fs, 0);
2ccb0                 | ' 	return res ;
2ccb0     18 4E 85 F1 | 	sub	fp, #24
2ccb4                 | LR__4581
2ccb4     A7 F0 03 F6 | 	mov	ptra, fp
2ccb8     B2 00 A0 FD | 	call	#popregs_
2ccbc                 | _fatfs_cc_f_mount_ret
2ccbc     2D 00 64 FD | 	ret
2ccc0                 | 
2ccc0                 | _fatfs_cc_f_open
2ccc0     02 4A 05 F6 | 	mov	COUNT_, #2
2ccc4     A8 00 A0 FD | 	call	#pushregs_
2ccc8     60 F0 07 F1 | 	add	ptra, #96
2cccc     04 4E 05 F1 | 	add	fp, #4
2ccd0     A7 12 62 FC | 	wrlong	arg01, fp
2ccd4     04 4E 05 F1 | 	add	fp, #4
2ccd8     A7 14 62 FC | 	wrlong	arg02, fp
2ccdc     04 4E 05 F1 | 	add	fp, #4
2cce0     A7 16 42 FC | 	wrbyte	arg03, fp
2cce4     08 4E 85 F1 | 	sub	fp, #8
2cce8     A7 18 0A FB | 	rdlong	arg04, fp wz
2ccec     04 4E 85 F1 | 	sub	fp, #4
2ccf0     09 FA 05 A6 |  if_e	mov	result1, #9
2ccf4     98 06 90 AD |  if_e	jmp	#LR__4607
2ccf8     0C 4E 05 F1 | 	add	fp, #12
2ccfc     A7 18 C2 FA | 	rdbyte	arg04, fp
2cd00     3F 18 06 F5 | 	and	arg04, #63
2cd04     A7 18 42 FC | 	wrbyte	arg04, fp
2cd08     04 4E 85 F1 | 	sub	fp, #4
2cd0c     A7 12 02 F6 | 	mov	arg01, fp
2cd10     3C 4E 05 F1 | 	add	fp, #60
2cd14     A7 14 02 F6 | 	mov	arg02, fp
2cd18     38 4E 85 F1 | 	sub	fp, #56
2cd1c     A7 16 C2 FA | 	rdbyte	arg03, fp
2cd20     0C 4E 85 F1 | 	sub	fp, #12
2cd24     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2cd28     10 4E 05 F1 | 	add	fp, #16
2cd2c     A7 FA 61 FC | 	wrlong	result1, fp
2cd30     10 4E 85 F1 | 	sub	fp, #16
2cd34     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd38     2C 06 90 5D |  if_ne	jmp	#LR__4606
2cd3c     44 4E 05 F1 | 	add	fp, #68
2cd40     A7 18 02 FB | 	rdlong	arg04, fp
2cd44     30 4E 85 F1 | 	sub	fp, #48
2cd48     A7 18 62 FC | 	wrlong	arg04, fp
2cd4c     A7 12 02 F6 | 	mov	arg01, fp
2cd50     0C 4E 85 F1 | 	sub	fp, #12
2cd54     A7 26 02 FB | 	rdlong	local01, fp
2cd58     08 4E 85 F1 | 	sub	fp, #8
2cd5c     13 15 02 F6 | 	mov	arg02, local01
2cd60     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2cd64     10 4E 05 F1 | 	add	fp, #16
2cd68     A7 FA 61 FC | 	wrlong	result1, fp
2cd6c     10 4E 85 F1 | 	sub	fp, #16
2cd70     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd74     1C 00 90 5D |  if_ne	jmp	#LR__4590
2cd78     3F 4E 05 F1 | 	add	fp, #63
2cd7c     A7 18 C2 FA | 	rdbyte	arg04, fp
2cd80     3F 4E 85 F1 | 	sub	fp, #63
2cd84     80 18 CE F7 | 	test	arg04, #128 wz
2cd88     10 4E 05 51 |  if_ne	add	fp, #16
2cd8c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2cd90     10 4E 85 51 |  if_ne	sub	fp, #16
2cd94                 | LR__4590
2cd94     0C 4E 05 F1 | 	add	fp, #12
2cd98     A7 18 C2 FA | 	rdbyte	arg04, fp
2cd9c     0C 4E 85 F1 | 	sub	fp, #12
2cda0     1C 18 CE F7 | 	test	arg04, #28 wz
2cda4     F0 01 90 AD |  if_e	jmp	#LR__4595
2cda8     10 4E 05 F1 | 	add	fp, #16
2cdac     A7 26 0A FB | 	rdlong	local01, fp wz
2cdb0     10 4E 85 F1 | 	sub	fp, #16
2cdb4     48 00 90 AD |  if_e	jmp	#LR__4592
2cdb8     10 4E 05 F1 | 	add	fp, #16
2cdbc     A7 18 02 FB | 	rdlong	arg04, fp
2cdc0     10 4E 85 F1 | 	sub	fp, #16
2cdc4     04 18 0E F2 | 	cmp	arg04, #4 wz
2cdc8     1C 00 90 5D |  if_ne	jmp	#LR__4591
2cdcc     14 4E 05 F1 | 	add	fp, #20
2cdd0     A7 12 02 F6 | 	mov	arg01, fp
2cdd4     14 4E 85 F1 | 	sub	fp, #20
2cdd8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2cddc     10 4E 05 F1 | 	add	fp, #16
2cde0     A7 FA 61 FC | 	wrlong	result1, fp
2cde4     10 4E 85 F1 | 	sub	fp, #16
2cde8                 | LR__4591
2cde8     0C 4E 05 F1 | 	add	fp, #12
2cdec     A7 26 C2 FA | 	rdbyte	local01, fp
2cdf0     08 26 46 F5 | 	or	local01, #8
2cdf4     A7 26 42 FC | 	wrbyte	local01, fp
2cdf8     0C 4E 85 F1 | 	sub	fp, #12
2cdfc     3C 00 90 FD | 	jmp	#LR__4594
2ce00                 | LR__4592
2ce00     1A 4E 05 F1 | 	add	fp, #26
2ce04     A7 26 C2 FA | 	rdbyte	local01, fp
2ce08     1A 4E 85 F1 | 	sub	fp, #26
2ce0c     11 26 CE F7 | 	test	local01, #17 wz
2ce10     10 4E 05 51 |  if_ne	add	fp, #16
2ce14     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ce18     10 4E 85 51 |  if_ne	sub	fp, #16
2ce1c     1C 00 90 5D |  if_ne	jmp	#LR__4593
2ce20     0C 4E 05 F1 | 	add	fp, #12
2ce24     A7 26 C2 FA | 	rdbyte	local01, fp
2ce28     0C 4E 85 F1 | 	sub	fp, #12
2ce2c     04 26 CE F7 | 	test	local01, #4 wz
2ce30     10 4E 05 51 |  if_ne	add	fp, #16
2ce34     A7 10 68 5C |  if_ne	wrlong	#8, fp
2ce38     10 4E 85 51 |  if_ne	sub	fp, #16
2ce3c                 | LR__4593
2ce3c                 | LR__4594
2ce3c     10 4E 05 F1 | 	add	fp, #16
2ce40     A7 26 0A FB | 	rdlong	local01, fp wz
2ce44     10 4E 85 F1 | 	sub	fp, #16
2ce48     A8 01 90 5D |  if_ne	jmp	#LR__4598
2ce4c     0C 4E 05 F1 | 	add	fp, #12
2ce50     A7 26 C2 FA | 	rdbyte	local01, fp
2ce54     0C 4E 85 F1 | 	sub	fp, #12
2ce58     08 26 CE F7 | 	test	local01, #8 wz
2ce5c     94 01 90 AD |  if_e	jmp	#LR__4598
2ce60     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2ce64     54 4E 05 F1 | 	add	fp, #84
2ce68     A7 FA 61 FC | 	wrlong	result1, fp
2ce6c     24 4E 85 F1 | 	sub	fp, #36
2ce70     A7 12 02 FB | 	rdlong	arg01, fp
2ce74     0E 12 06 F1 | 	add	arg01, #14
2ce78     09 FB 61 FC | 	wrlong	result1, arg01
2ce7c     A7 12 02 FB | 	rdlong	arg01, fp
2ce80     16 12 06 F1 | 	add	arg01, #22
2ce84     24 4E 05 F1 | 	add	fp, #36
2ce88     A7 14 02 FB | 	rdlong	arg02, fp
2ce8c     09 15 62 FC | 	wrlong	arg02, arg01
2ce90     10 4E 85 F1 | 	sub	fp, #16
2ce94     A7 12 02 FB | 	rdlong	arg01, fp
2ce98     14 4E 85 F1 | 	sub	fp, #20
2ce9c     A7 14 02 FB | 	rdlong	arg02, fp
2cea0     30 4E 85 F1 | 	sub	fp, #48
2cea4     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2cea8     48 4E 05 F1 | 	add	fp, #72
2ceac     A7 FA 61 FC | 	wrlong	result1, fp
2ceb0     18 4E 85 F1 | 	sub	fp, #24
2ceb4     A7 26 02 FB | 	rdlong	local01, fp
2ceb8     0B 26 06 F1 | 	add	local01, #11
2cebc     13 41 48 FC | 	wrbyte	#32, local01
2cec0     14 4E 05 F1 | 	add	fp, #20
2cec4     A7 12 02 FB | 	rdlong	arg01, fp
2cec8     14 4E 85 F1 | 	sub	fp, #20
2cecc     A7 14 02 FB | 	rdlong	arg02, fp
2ced0     30 4E 85 F1 | 	sub	fp, #48
2ced4     00 16 06 F6 | 	mov	arg03, #0
2ced8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2cedc     30 4E 05 F1 | 	add	fp, #48
2cee0     A7 12 02 FB | 	rdlong	arg01, fp
2cee4     1C 12 06 F1 | 	add	arg01, #28
2cee8     09 01 68 FC | 	wrlong	#0, arg01
2ceec     14 4E 05 F1 | 	add	fp, #20
2cef0     A7 26 02 FB | 	rdlong	local01, fp
2cef4     03 26 06 F1 | 	add	local01, #3
2cef8     13 03 48 FC | 	wrbyte	#1, local01
2cefc     04 4E 05 F1 | 	add	fp, #4
2cf00     A7 26 0A FB | 	rdlong	local01, fp wz
2cf04     48 4E 85 F1 | 	sub	fp, #72
2cf08     E8 00 90 AD |  if_e	jmp	#LR__4598
2cf0c     44 4E 05 F1 | 	add	fp, #68
2cf10     A7 26 02 FB | 	rdlong	local01, fp
2cf14     30 26 06 F1 | 	add	local01, #48
2cf18     13 27 02 FB | 	rdlong	local01, local01
2cf1c     14 4E 05 F1 | 	add	fp, #20
2cf20     A7 26 62 FC | 	wrlong	local01, fp
2cf24     44 4E 85 F1 | 	sub	fp, #68
2cf28     A7 12 02 F6 | 	mov	arg01, fp
2cf2c     34 4E 05 F1 | 	add	fp, #52
2cf30     A7 14 02 FB | 	rdlong	arg02, fp
2cf34     48 4E 85 F1 | 	sub	fp, #72
2cf38     00 16 06 F6 | 	mov	arg03, #0
2cf3c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2cf40     10 4E 05 F1 | 	add	fp, #16
2cf44     A7 FA 61 FC | 	wrlong	result1, fp
2cf48     10 4E 85 F1 | 	sub	fp, #16
2cf4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf50     A0 00 90 5D |  if_ne	jmp	#LR__4598
2cf54     44 4E 05 F1 | 	add	fp, #68
2cf58     A7 12 02 FB | 	rdlong	arg01, fp
2cf5c     14 4E 05 F1 | 	add	fp, #20
2cf60     A7 14 02 FB | 	rdlong	arg02, fp
2cf64     58 4E 85 F1 | 	sub	fp, #88
2cf68     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2cf6c     10 4E 05 F1 | 	add	fp, #16
2cf70     A7 FA 61 FC | 	wrlong	result1, fp
2cf74     34 4E 05 F1 | 	add	fp, #52
2cf78     A7 18 02 FB | 	rdlong	arg04, fp
2cf7c     04 4E 05 F1 | 	add	fp, #4
2cf80     A7 26 02 FB | 	rdlong	local01, fp
2cf84     48 4E 85 F1 | 	sub	fp, #72
2cf88     01 26 86 F1 | 	sub	local01, #1
2cf8c     10 18 06 F1 | 	add	arg04, #16
2cf90     0C 27 62 FC | 	wrlong	local01, arg04
2cf94     5C 00 90 FD | 	jmp	#LR__4598
2cf98                 | LR__4595
2cf98     10 4E 05 F1 | 	add	fp, #16
2cf9c     A7 18 0A FB | 	rdlong	arg04, fp wz
2cfa0     10 4E 85 F1 | 	sub	fp, #16
2cfa4     4C 00 90 5D |  if_ne	jmp	#LR__4597
2cfa8     1A 4E 05 F1 | 	add	fp, #26
2cfac     A7 18 C2 FA | 	rdbyte	arg04, fp
2cfb0     1A 4E 85 F1 | 	sub	fp, #26
2cfb4     10 18 CE F7 | 	test	arg04, #16 wz
2cfb8     10 4E 05 51 |  if_ne	add	fp, #16
2cfbc     A7 08 68 5C |  if_ne	wrlong	#4, fp
2cfc0     10 4E 85 51 |  if_ne	sub	fp, #16
2cfc4     2C 00 90 5D |  if_ne	jmp	#LR__4596
2cfc8     0C 4E 05 F1 | 	add	fp, #12
2cfcc     A7 18 C2 FA | 	rdbyte	arg04, fp
2cfd0     0C 4E 85 F1 | 	sub	fp, #12
2cfd4     02 18 CE F7 | 	test	arg04, #2 wz
2cfd8     1A 4E 05 51 |  if_ne	add	fp, #26
2cfdc     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
2cfe0     1A 4E 85 51 |  if_ne	sub	fp, #26
2cfe4     01 26 CE 57 |  if_ne	test	local01, #1 wz
2cfe8     10 4E 05 51 |  if_ne	add	fp, #16
2cfec     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2cff0     10 4E 85 51 |  if_ne	sub	fp, #16
2cff4                 | LR__4596
2cff4                 | LR__4597
2cff4                 | LR__4598
2cff4     10 4E 05 F1 | 	add	fp, #16
2cff8     A7 26 0A FB | 	rdlong	local01, fp wz
2cffc     10 4E 85 F1 | 	sub	fp, #16
2d000     60 00 90 5D |  if_ne	jmp	#LR__4599
2d004     0C 4E 05 F1 | 	add	fp, #12
2d008     A7 28 C2 FA | 	rdbyte	local02, fp
2d00c     0C 4E 85 F1 | 	sub	fp, #12
2d010     08 28 CE F7 | 	test	local02, #8 wz
2d014     0C 4E 05 51 |  if_ne	add	fp, #12
2d018     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
2d01c     40 28 46 55 |  if_ne	or	local02, #64
2d020     A7 28 42 5C |  if_ne	wrbyte	local02, fp
2d024     0C 4E 85 51 |  if_ne	sub	fp, #12
2d028     04 4E 05 F1 | 	add	fp, #4
2d02c     A7 28 02 FB | 	rdlong	local02, fp
2d030     40 4E 05 F1 | 	add	fp, #64
2d034     A7 26 02 FB | 	rdlong	local01, fp
2d038     30 26 06 F1 | 	add	local01, #48
2d03c     13 27 02 FB | 	rdlong	local01, local01
2d040     20 28 06 F1 | 	add	local02, #32
2d044     14 27 62 FC | 	wrlong	local01, local02
2d048     40 4E 85 F1 | 	sub	fp, #64
2d04c     A7 28 02 FB | 	rdlong	local02, fp
2d050     2C 4E 05 F1 | 	add	fp, #44
2d054     A7 26 02 FB | 	rdlong	local01, fp
2d058     30 4E 85 F1 | 	sub	fp, #48
2d05c     24 28 06 F1 | 	add	local02, #36
2d060     14 27 62 FC | 	wrlong	local01, local02
2d064                 | LR__4599
2d064     10 4E 05 F1 | 	add	fp, #16
2d068     A7 28 0A FB | 	rdlong	local02, fp wz
2d06c     10 4E 85 F1 | 	sub	fp, #16
2d070     F4 02 90 5D |  if_ne	jmp	#LR__4605
2d074     04 4E 05 F1 | 	add	fp, #4
2d078     A7 28 02 FB | 	rdlong	local02, fp
2d07c     40 4E 05 F1 | 	add	fp, #64
2d080     A7 12 02 FB | 	rdlong	arg01, fp
2d084     14 4E 85 F1 | 	sub	fp, #20
2d088     A7 14 02 FB | 	rdlong	arg02, fp
2d08c     30 4E 85 F1 | 	sub	fp, #48
2d090     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2d094     08 28 06 F1 | 	add	local02, #8
2d098     14 FB 61 FC | 	wrlong	result1, local02
2d09c     04 4E 05 F1 | 	add	fp, #4
2d0a0     A7 28 02 FB | 	rdlong	local02, fp
2d0a4     2C 4E 05 F1 | 	add	fp, #44
2d0a8     A7 12 02 FB | 	rdlong	arg01, fp
2d0ac     1C 12 06 F1 | 	add	arg01, #28
2d0b0                 | ' {
2d0b0                 | ' 
2d0b0                 | ' 	return *((DWORD*)ptr);
2d0b0     09 FB 01 FB | 	rdlong	result1, arg01
2d0b4     0C 28 06 F1 | 	add	local02, #12
2d0b8     14 FB 61 FC | 	wrlong	result1, local02
2d0bc     2C 4E 85 F1 | 	sub	fp, #44
2d0c0     A7 28 02 FB | 	rdlong	local02, fp
2d0c4     40 4E 05 F1 | 	add	fp, #64
2d0c8     A7 26 02 FB | 	rdlong	local01, fp
2d0cc     14 27 62 FC | 	wrlong	local01, local02
2d0d0     40 4E 85 F1 | 	sub	fp, #64
2d0d4     A7 28 02 FB | 	rdlong	local02, fp
2d0d8     40 4E 05 F1 | 	add	fp, #64
2d0dc     A7 26 02 FB | 	rdlong	local01, fp
2d0e0     06 26 06 F1 | 	add	local01, #6
2d0e4     13 27 E2 FA | 	rdword	local01, local01
2d0e8     04 28 06 F1 | 	add	local02, #4
2d0ec     14 27 52 FC | 	wrword	local01, local02
2d0f0     40 4E 85 F1 | 	sub	fp, #64
2d0f4     A7 28 02 FB | 	rdlong	local02, fp
2d0f8     08 4E 05 F1 | 	add	fp, #8
2d0fc     A7 26 C2 FA | 	rdbyte	local01, fp
2d100     10 28 06 F1 | 	add	local02, #16
2d104     14 27 42 FC | 	wrbyte	local01, local02
2d108     08 4E 85 F1 | 	sub	fp, #8
2d10c     A7 28 02 FB | 	rdlong	local02, fp
2d110     11 28 06 F1 | 	add	local02, #17
2d114     14 01 48 FC | 	wrbyte	#0, local02
2d118     A7 28 02 FB | 	rdlong	local02, fp
2d11c     1C 28 06 F1 | 	add	local02, #28
2d120     14 01 68 FC | 	wrlong	#0, local02
2d124     A7 28 02 FB | 	rdlong	local02, fp
2d128     14 28 06 F1 | 	add	local02, #20
2d12c     14 01 68 FC | 	wrlong	#0, local02
2d130     A7 12 02 FB | 	rdlong	arg01, fp
2d134     04 4E 85 F1 | 	sub	fp, #4
2d138     28 12 06 F1 | 	add	arg01, #40
2d13c     00 14 06 F6 | 	mov	arg02, #0
2d140     09 16 C6 F9 | 	decod	arg03, #9
2d144     98 00 A0 FD | 	call	#\builtin_bytefill_
2d148     0C 4E 05 F1 | 	add	fp, #12
2d14c     A7 28 C2 FA | 	rdbyte	local02, fp
2d150     0C 4E 85 F1 | 	sub	fp, #12
2d154     20 28 CE F7 | 	test	local02, #32 wz
2d158     0C 02 90 AD |  if_e	jmp	#LR__4604
2d15c     04 4E 05 F1 | 	add	fp, #4
2d160     A7 26 02 FB | 	rdlong	local01, fp
2d164     04 4E 85 F1 | 	sub	fp, #4
2d168     0C 26 06 F1 | 	add	local01, #12
2d16c     13 29 02 FB | 	rdlong	local02, local01
2d170     01 28 16 F2 | 	cmp	local02, #1 wc
2d174     F0 01 90 CD |  if_b	jmp	#LR__4604
2d178     04 4E 05 F1 | 	add	fp, #4
2d17c     A7 26 02 FB | 	rdlong	local01, fp
2d180     13 29 02 F6 | 	mov	local02, local01
2d184     0C 26 06 F1 | 	add	local01, #12
2d188     13 27 02 FB | 	rdlong	local01, local01
2d18c     14 28 06 F1 | 	add	local02, #20
2d190     14 27 62 FC | 	wrlong	local01, local02
2d194     40 4E 05 F1 | 	add	fp, #64
2d198     A7 28 02 FB | 	rdlong	local02, fp
2d19c     0A 28 06 F1 | 	add	local02, #10
2d1a0     14 29 E2 FA | 	rdword	local02, local02
2d1a4     09 28 66 F0 | 	shl	local02, #9
2d1a8     08 4E 05 F1 | 	add	fp, #8
2d1ac     A7 28 62 FC | 	wrlong	local02, fp
2d1b0     48 4E 85 F1 | 	sub	fp, #72
2d1b4     A7 28 02 FB | 	rdlong	local02, fp
2d1b8     08 28 06 F1 | 	add	local02, #8
2d1bc     14 27 02 FB | 	rdlong	local01, local02
2d1c0     4C 4E 05 F1 | 	add	fp, #76
2d1c4     A7 26 62 FC | 	wrlong	local01, fp
2d1c8                 | ' 				fp->fptr = fp->obj.objsize;
2d1c8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d1c8                 | ' 				clst = fp->obj.sclust;
2d1c8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2d1c8     4C 4E 85 F1 | 	sub	fp, #76
2d1cc     A7 28 02 FB | 	rdlong	local02, fp
2d1d0     0C 28 06 F1 | 	add	local02, #12
2d1d4     14 27 02 FB | 	rdlong	local01, local02
2d1d8     58 4E 05 F1 | 	add	fp, #88
2d1dc     A7 26 62 FC | 	wrlong	local01, fp
2d1e0     5C 4E 85 F1 | 	sub	fp, #92
2d1e4                 | LR__4600
2d1e4     10 4E 05 F1 | 	add	fp, #16
2d1e8     A7 28 0A FB | 	rdlong	local02, fp wz
2d1ec     10 4E 85 F1 | 	sub	fp, #16
2d1f0     94 00 90 5D |  if_ne	jmp	#LR__4601
2d1f4     5C 4E 05 F1 | 	add	fp, #92
2d1f8     A7 28 02 FB | 	rdlong	local02, fp
2d1fc     10 4E 85 F1 | 	sub	fp, #16
2d200     A7 26 02 FB | 	rdlong	local01, fp
2d204     4C 4E 85 F1 | 	sub	fp, #76
2d208     13 29 1A F2 | 	cmp	local02, local01 wcz
2d20c     78 00 90 ED |  if_be	jmp	#LR__4601
2d210     04 4E 05 F1 | 	add	fp, #4
2d214     A7 12 02 FB | 	rdlong	arg01, fp
2d218     4C 4E 05 F1 | 	add	fp, #76
2d21c     A7 14 02 FB | 	rdlong	arg02, fp
2d220     50 4E 85 F1 | 	sub	fp, #80
2d224     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2d228     50 4E 05 F1 | 	add	fp, #80
2d22c     A7 FA 61 FC | 	wrlong	result1, fp
2d230     50 4E 85 F1 | 	sub	fp, #80
2d234     02 FA 15 F2 | 	cmp	result1, #2 wc
2d238     10 4E 05 C1 |  if_b	add	fp, #16
2d23c     A7 04 68 CC |  if_b	wrlong	#2, fp
2d240     10 4E 85 C1 |  if_b	sub	fp, #16
2d244     50 4E 05 F1 | 	add	fp, #80
2d248     A7 28 02 FB | 	rdlong	local02, fp
2d24c     50 4E 85 F1 | 	sub	fp, #80
2d250     FF FF 7F FF 
2d254     FF 29 0E F2 | 	cmp	local02, ##-1 wz
2d258     10 4E 05 A1 |  if_e	add	fp, #16
2d25c     A7 02 68 AC |  if_e	wrlong	#1, fp
2d260     10 4E 85 A1 |  if_e	sub	fp, #16
2d264     5C 4E 05 F1 | 	add	fp, #92
2d268     A7 28 02 FB | 	rdlong	local02, fp
2d26c     10 4E 85 F1 | 	sub	fp, #16
2d270     A7 26 02 FB | 	rdlong	local01, fp
2d274     13 29 82 F1 | 	sub	local02, local01
2d278     10 4E 05 F1 | 	add	fp, #16
2d27c     A7 28 62 FC | 	wrlong	local02, fp
2d280     5C 4E 85 F1 | 	sub	fp, #92
2d284     5C FF 9F FD | 	jmp	#LR__4600
2d288                 | LR__4601
2d288     04 4E 05 F1 | 	add	fp, #4
2d28c     A7 28 02 FB | 	rdlong	local02, fp
2d290     4C 4E 05 F1 | 	add	fp, #76
2d294     A7 26 02 FB | 	rdlong	local01, fp
2d298     18 28 06 F1 | 	add	local02, #24
2d29c     14 27 62 FC | 	wrlong	local01, local02
2d2a0     40 4E 85 F1 | 	sub	fp, #64
2d2a4     A7 28 0A FB | 	rdlong	local02, fp wz
2d2a8     10 4E 85 F1 | 	sub	fp, #16
2d2ac     B8 00 90 5D |  if_ne	jmp	#LR__4603
2d2b0     5C 4E 05 F1 | 	add	fp, #92
2d2b4     A7 26 02 FB | 	rdlong	local01, fp
2d2b8     5C 4E 85 F1 | 	sub	fp, #92
2d2bc     FF 27 CE F7 | 	test	local01, #511 wz
2d2c0     A4 00 90 AD |  if_e	jmp	#LR__4603
2d2c4     44 4E 05 F1 | 	add	fp, #68
2d2c8     A7 12 02 FB | 	rdlong	arg01, fp
2d2cc     0C 4E 05 F1 | 	add	fp, #12
2d2d0     A7 14 02 FB | 	rdlong	arg02, fp
2d2d4     50 4E 85 F1 | 	sub	fp, #80
2d2d8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2d2dc     58 4E 05 F1 | 	add	fp, #88
2d2e0     A7 FA 61 FC | 	wrlong	result1, fp
2d2e4     00 FA 4D F2 | 	cmps	result1, #0 wz
2d2e8     58 4E 85 F1 | 	sub	fp, #88
2d2ec     10 4E 05 A1 |  if_e	add	fp, #16
2d2f0     A7 04 68 AC |  if_e	wrlong	#2, fp
2d2f4     10 4E 85 A1 |  if_e	sub	fp, #16
2d2f8     6C 00 90 AD |  if_e	jmp	#LR__4602
2d2fc     04 4E 05 F1 | 	add	fp, #4
2d300     A7 28 02 FB | 	rdlong	local02, fp
2d304     54 4E 05 F1 | 	add	fp, #84
2d308     A7 26 02 FB | 	rdlong	local01, fp
2d30c     04 4E 05 F1 | 	add	fp, #4
2d310     A7 18 02 FB | 	rdlong	arg04, fp
2d314     09 18 46 F0 | 	shr	arg04, #9
2d318     0C 27 02 F1 | 	add	local01, arg04
2d31c     1C 28 06 F1 | 	add	local02, #28
2d320     14 27 62 FC | 	wrlong	local01, local02
2d324     18 4E 85 F1 | 	sub	fp, #24
2d328     A7 28 02 FB | 	rdlong	local02, fp
2d32c     01 28 06 F1 | 	add	local02, #1
2d330     14 13 C2 FA | 	rdbyte	arg01, local02
2d334     40 4E 85 F1 | 	sub	fp, #64
2d338     A7 28 02 FB | 	rdlong	local02, fp
2d33c     14 15 02 F6 | 	mov	arg02, local02
2d340     28 14 06 F1 | 	add	arg02, #40
2d344     04 4E 85 F1 | 	sub	fp, #4
2d348     1C 28 06 F1 | 	add	local02, #28
2d34c     14 17 02 FB | 	rdlong	arg03, local02
2d350     01 18 06 F6 | 	mov	arg04, #1
2d354     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2d358     00 FA 0D F2 | 	cmp	result1, #0 wz
2d35c     10 4E 05 51 |  if_ne	add	fp, #16
2d360     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d364     10 4E 85 51 |  if_ne	sub	fp, #16
2d368                 | LR__4602
2d368                 | LR__4603
2d368                 | LR__4604
2d368                 | LR__4605
2d368                 | LR__4606
2d368     10 4E 05 F1 | 	add	fp, #16
2d36c     A7 28 0A FB | 	rdlong	local02, fp wz
2d370     10 4E 85 F1 | 	sub	fp, #16
2d374     04 4E 05 51 |  if_ne	add	fp, #4
2d378     A7 28 02 5B |  if_ne	rdlong	local02, fp
2d37c     04 4E 85 51 |  if_ne	sub	fp, #4
2d380     14 01 68 5C |  if_ne	wrlong	#0, local02
2d384                 | ' 
2d384                 | ' 	return res ;
2d384     10 4E 05 F1 | 	add	fp, #16
2d388     A7 FA 01 FB | 	rdlong	result1, fp
2d38c     10 4E 85 F1 | 	sub	fp, #16
2d390                 | LR__4607
2d390     A7 F0 03 F6 | 	mov	ptra, fp
2d394     B2 00 A0 FD | 	call	#popregs_
2d398                 | _fatfs_cc_f_open_ret
2d398     2D 00 64 FD | 	ret
2d39c                 | 
2d39c                 | _fatfs_cc_f_read
2d39c     0E 4A 05 F6 | 	mov	COUNT_, #14
2d3a0     A8 00 A0 FD | 	call	#pushregs_
2d3a4     38 F0 07 F1 | 	add	ptra, #56
2d3a8     04 4E 05 F1 | 	add	fp, #4
2d3ac     A7 12 62 FC | 	wrlong	arg01, fp
2d3b0     04 4E 05 F1 | 	add	fp, #4
2d3b4     A7 14 62 FC | 	wrlong	arg02, fp
2d3b8     04 4E 05 F1 | 	add	fp, #4
2d3bc     A7 16 62 FC | 	wrlong	arg03, fp
2d3c0     04 4E 05 F1 | 	add	fp, #4
2d3c4     A7 18 62 FC | 	wrlong	arg04, fp
2d3c8     08 4E 85 F1 | 	sub	fp, #8
2d3cc     A7 FA 01 FB | 	rdlong	result1, fp
2d3d0     2C 4E 05 F1 | 	add	fp, #44
2d3d4     A7 FA 61 FC | 	wrlong	result1, fp
2d3d8     24 4E 85 F1 | 	sub	fp, #36
2d3dc     A7 FA 01 FB | 	rdlong	result1, fp
2d3e0     FD 00 68 FC | 	wrlong	#0, result1
2d3e4     0C 4E 85 F1 | 	sub	fp, #12
2d3e8     A7 12 02 FB | 	rdlong	arg01, fp
2d3ec     14 4E 05 F1 | 	add	fp, #20
2d3f0     A7 14 02 F6 | 	mov	arg02, fp
2d3f4     18 4E 85 F1 | 	sub	fp, #24
2d3f8     24 F7 BF FD | 	call	#_fatfs_cc_validate
2d3fc     14 4E 05 F1 | 	add	fp, #20
2d400     A7 FA 61 FC | 	wrlong	result1, fp
2d404     00 FA 4D F2 | 	cmps	result1, #0 wz
2d408     14 4E 85 F1 | 	sub	fp, #20
2d40c     20 00 90 5D |  if_ne	jmp	#LR__4610
2d410     04 4E 05 F1 | 	add	fp, #4
2d414     A7 14 02 FB | 	rdlong	arg02, fp
2d418     11 14 06 F1 | 	add	arg02, #17
2d41c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2d420     10 4E 05 F1 | 	add	fp, #16
2d424     A7 14 62 FC | 	wrlong	arg02, fp
2d428     14 4E 85 F1 | 	sub	fp, #20
2d42c     10 00 90 AD |  if_e	jmp	#LR__4611
2d430                 | LR__4610
2d430     14 4E 05 F1 | 	add	fp, #20
2d434     A7 FA 01 FB | 	rdlong	result1, fp
2d438     14 4E 85 F1 | 	sub	fp, #20
2d43c     EC 05 90 FD | 	jmp	#LR__4630
2d440                 | LR__4611
2d440     04 4E 05 F1 | 	add	fp, #4
2d444     A7 18 02 FB | 	rdlong	arg04, fp
2d448     04 4E 85 F1 | 	sub	fp, #4
2d44c     10 18 06 F1 | 	add	arg04, #16
2d450     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d454     01 18 CE F7 | 	test	arg04, #1 wz
2d458     07 FA 05 A6 |  if_e	mov	result1, #7
2d45c     CC 05 90 AD |  if_e	jmp	#LR__4630
2d460     04 4E 05 F1 | 	add	fp, #4
2d464     A7 26 02 FB | 	rdlong	local01, fp
2d468     13 29 02 F6 | 	mov	local02, local01
2d46c     0C 28 06 F1 | 	add	local02, #12
2d470     14 2B 02 FB | 	rdlong	local03, local02
2d474     14 26 06 F1 | 	add	local01, #20
2d478     13 27 02 FB | 	rdlong	local01, local01
2d47c     13 2B 82 F1 | 	sub	local03, local01
2d480     20 4E 05 F1 | 	add	fp, #32
2d484     A7 2A 62 FC | 	wrlong	local03, fp
2d488     18 4E 85 F1 | 	sub	fp, #24
2d48c     A7 2C 02 FB | 	rdlong	local04, fp
2d490     0C 4E 85 F1 | 	sub	fp, #12
2d494     15 2D 1A F2 | 	cmp	local04, local03 wcz
2d498     24 4E 05 11 |  if_a	add	fp, #36
2d49c     A7 2C 02 1B |  if_a	rdlong	local04, fp
2d4a0     18 4E 85 11 |  if_a	sub	fp, #24
2d4a4     A7 2C 62 1C |  if_a	wrlong	local04, fp
2d4a8     0C 4E 85 11 |  if_a	sub	fp, #12
2d4ac                 | ' 
2d4ac                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2d4ac                 | LR__4612
2d4ac     0C 4E 05 F1 | 	add	fp, #12
2d4b0     A7 28 02 FB | 	rdlong	local02, fp
2d4b4     0C 4E 85 F1 | 	sub	fp, #12
2d4b8     14 2D 02 F6 | 	mov	local04, local02
2d4bc     01 2C 16 F2 | 	cmp	local04, #1 wc
2d4c0     64 05 90 CD |  if_b	jmp	#LR__4629
2d4c4     04 4E 05 F1 | 	add	fp, #4
2d4c8     A7 2A 02 FB | 	rdlong	local03, fp
2d4cc     04 4E 85 F1 | 	sub	fp, #4
2d4d0     14 2A 06 F1 | 	add	local03, #20
2d4d4     15 2B 02 FB | 	rdlong	local03, local03
2d4d8     FF 2B CE F7 | 	test	local03, #511 wz
2d4dc     3C 04 90 5D |  if_ne	jmp	#LR__4627
2d4e0     04 4E 05 F1 | 	add	fp, #4
2d4e4     A7 26 02 FB | 	rdlong	local01, fp
2d4e8     14 26 06 F1 | 	add	local01, #20
2d4ec     13 2B 02 FB | 	rdlong	local03, local01
2d4f0     09 2A 46 F0 | 	shr	local03, #9
2d4f4     14 4E 05 F1 | 	add	fp, #20
2d4f8     A7 2E 02 FB | 	rdlong	local05, fp
2d4fc     17 31 02 F6 | 	mov	local06, local05
2d500     0A 30 06 F1 | 	add	local06, #10
2d504     18 33 E2 FA | 	rdword	local07, local06
2d508     0A 30 86 F1 | 	sub	local06, #10
2d50c     19 35 32 F9 | 	getword	local08, local07, #0
2d510     01 34 86 F1 | 	sub	local08, #1
2d514     1A 2B 0A F5 | 	and	local03, local08 wz
2d518     18 4E 05 F1 | 	add	fp, #24
2d51c     A7 2A 62 FC | 	wrlong	local03, fp
2d520     30 4E 85 F1 | 	sub	fp, #48
2d524     E0 00 90 5D |  if_ne	jmp	#LR__4617
2d528     04 4E 05 F1 | 	add	fp, #4
2d52c     A7 2A 02 FB | 	rdlong	local03, fp
2d530     04 4E 85 F1 | 	sub	fp, #4
2d534     14 2A 06 F1 | 	add	local03, #20
2d538     15 2B 0A FB | 	rdlong	local03, local03 wz
2d53c     20 00 90 5D |  if_ne	jmp	#LR__4613
2d540     04 4E 05 F1 | 	add	fp, #4
2d544     A7 2A 02 FB | 	rdlong	local03, fp
2d548     08 2A 06 F1 | 	add	local03, #8
2d54c     15 2B 02 FB | 	rdlong	local03, local03
2d550     18 4E 05 F1 | 	add	fp, #24
2d554     A7 2A 62 FC | 	wrlong	local03, fp
2d558     1C 4E 85 F1 | 	sub	fp, #28
2d55c     28 00 90 FD | 	jmp	#LR__4614
2d560                 | LR__4613
2d560     04 4E 05 F1 | 	add	fp, #4
2d564     A7 34 02 FB | 	rdlong	local08, fp
2d568     1A 13 02 F6 | 	mov	arg01, local08
2d56c     04 4E 85 F1 | 	sub	fp, #4
2d570     18 34 06 F1 | 	add	local08, #24
2d574     1A 15 02 FB | 	rdlong	arg02, local08
2d578     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2d57c     1C 4E 05 F1 | 	add	fp, #28
2d580     A7 FA 61 FC | 	wrlong	result1, fp
2d584     1C 4E 85 F1 | 	sub	fp, #28
2d588                 | LR__4614
2d588     1C 4E 05 F1 | 	add	fp, #28
2d58c     A7 2A 02 FB | 	rdlong	local03, fp
2d590     1C 4E 85 F1 | 	sub	fp, #28
2d594     02 2A 16 F2 | 	cmp	local03, #2 wc
2d598     1C 00 90 3D |  if_ae	jmp	#LR__4615
2d59c     04 4E 05 F1 | 	add	fp, #4
2d5a0     A7 2A 02 FB | 	rdlong	local03, fp
2d5a4     04 4E 85 F1 | 	sub	fp, #4
2d5a8     11 2A 06 F1 | 	add	local03, #17
2d5ac     15 05 48 FC | 	wrbyte	#2, local03
2d5b0     02 FA 05 F6 | 	mov	result1, #2
2d5b4     74 04 90 FD | 	jmp	#LR__4630
2d5b8                 | LR__4615
2d5b8     1C 4E 05 F1 | 	add	fp, #28
2d5bc     A7 2A 02 FB | 	rdlong	local03, fp
2d5c0     1C 4E 85 F1 | 	sub	fp, #28
2d5c4     FF FF 7F FF 
2d5c8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
2d5cc     1C 00 90 5D |  if_ne	jmp	#LR__4616
2d5d0     04 4E 05 F1 | 	add	fp, #4
2d5d4     A7 2A 02 FB | 	rdlong	local03, fp
2d5d8     04 4E 85 F1 | 	sub	fp, #4
2d5dc     11 2A 06 F1 | 	add	local03, #17
2d5e0     15 03 48 FC | 	wrbyte	#1, local03
2d5e4     01 FA 05 F6 | 	mov	result1, #1
2d5e8     40 04 90 FD | 	jmp	#LR__4630
2d5ec                 | LR__4616
2d5ec     04 4E 05 F1 | 	add	fp, #4
2d5f0     A7 2A 02 FB | 	rdlong	local03, fp
2d5f4     18 4E 05 F1 | 	add	fp, #24
2d5f8     A7 34 02 FB | 	rdlong	local08, fp
2d5fc     1C 4E 85 F1 | 	sub	fp, #28
2d600     18 2A 06 F1 | 	add	local03, #24
2d604     15 35 62 FC | 	wrlong	local08, local03
2d608                 | LR__4617
2d608     18 4E 05 F1 | 	add	fp, #24
2d60c     A7 12 02 FB | 	rdlong	arg01, fp
2d610     14 4E 85 F1 | 	sub	fp, #20
2d614     A7 2A 02 FB | 	rdlong	local03, fp
2d618     04 4E 85 F1 | 	sub	fp, #4
2d61c     18 2A 06 F1 | 	add	local03, #24
2d620     15 15 02 FB | 	rdlong	arg02, local03
2d624     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2d628     20 4E 05 F1 | 	add	fp, #32
2d62c     A7 FA 61 FC | 	wrlong	result1, fp
2d630     20 4E 85 F1 | 	sub	fp, #32
2d634     00 FA 0D F2 | 	cmp	result1, #0 wz
2d638     1C 00 90 5D |  if_ne	jmp	#LR__4618
2d63c     04 4E 05 F1 | 	add	fp, #4
2d640     A7 2A 02 FB | 	rdlong	local03, fp
2d644     04 4E 85 F1 | 	sub	fp, #4
2d648     11 2A 06 F1 | 	add	local03, #17
2d64c     15 05 48 FC | 	wrbyte	#2, local03
2d650     02 FA 05 F6 | 	mov	result1, #2
2d654     D4 03 90 FD | 	jmp	#LR__4630
2d658                 | LR__4618
2d658     20 4E 05 F1 | 	add	fp, #32
2d65c     A7 2A 02 FB | 	rdlong	local03, fp
2d660     10 4E 05 F1 | 	add	fp, #16
2d664     A7 34 02 FB | 	rdlong	local08, fp
2d668     1A 2B 02 F1 | 	add	local03, local08
2d66c     10 4E 85 F1 | 	sub	fp, #16
2d670     A7 2A 62 FC | 	wrlong	local03, fp
2d674     14 4E 85 F1 | 	sub	fp, #20
2d678     A7 2A 02 FB | 	rdlong	local03, fp
2d67c     09 2A 46 F0 | 	shr	local03, #9
2d680     20 4E 05 F1 | 	add	fp, #32
2d684     A7 2A 62 FC | 	wrlong	local03, fp
2d688     2C 4E 85 F1 | 	sub	fp, #44
2d68c     01 2A 16 F2 | 	cmp	local03, #1 wc
2d690     5C 01 90 CD |  if_b	jmp	#LR__4622
2d694     30 4E 05 F1 | 	add	fp, #48
2d698     A7 2A 02 FB | 	rdlong	local03, fp
2d69c     04 4E 85 F1 | 	sub	fp, #4
2d6a0     A7 34 02 FB | 	rdlong	local08, fp
2d6a4     1A 2B 02 F1 | 	add	local03, local08
2d6a8     14 4E 85 F1 | 	sub	fp, #20
2d6ac     A7 34 02 FB | 	rdlong	local08, fp
2d6b0     18 4E 85 F1 | 	sub	fp, #24
2d6b4     0A 34 06 F1 | 	add	local08, #10
2d6b8     1A 35 E2 FA | 	rdword	local08, local08
2d6bc     1A 2B 1A F2 | 	cmp	local03, local08 wcz
2d6c0     28 00 90 ED |  if_be	jmp	#LR__4619
2d6c4     18 4E 05 F1 | 	add	fp, #24
2d6c8     A7 26 02 FB | 	rdlong	local01, fp
2d6cc     0A 26 06 F1 | 	add	local01, #10
2d6d0     13 2B E2 FA | 	rdword	local03, local01
2d6d4     18 4E 05 F1 | 	add	fp, #24
2d6d8     A7 34 02 FB | 	rdlong	local08, fp
2d6dc     1A 2B 82 F1 | 	sub	local03, local08
2d6e0     04 4E 85 F1 | 	sub	fp, #4
2d6e4     A7 2A 62 FC | 	wrlong	local03, fp
2d6e8     2C 4E 85 F1 | 	sub	fp, #44
2d6ec                 | LR__4619
2d6ec     18 4E 05 F1 | 	add	fp, #24
2d6f0     A7 26 02 FB | 	rdlong	local01, fp
2d6f4     01 26 06 F1 | 	add	local01, #1
2d6f8     13 13 C2 FA | 	rdbyte	arg01, local01
2d6fc     1C 4E 05 F1 | 	add	fp, #28
2d700     A7 14 02 FB | 	rdlong	arg02, fp
2d704     14 4E 85 F1 | 	sub	fp, #20
2d708     A7 16 02 FB | 	rdlong	arg03, fp
2d70c     0C 4E 05 F1 | 	add	fp, #12
2d710     A7 18 02 FB | 	rdlong	arg04, fp
2d714     2C 4E 85 F1 | 	sub	fp, #44
2d718     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2d71c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d720     1C 00 90 AD |  if_e	jmp	#LR__4620
2d724     04 4E 05 F1 | 	add	fp, #4
2d728     A7 2A 02 FB | 	rdlong	local03, fp
2d72c     04 4E 85 F1 | 	sub	fp, #4
2d730     11 2A 06 F1 | 	add	local03, #17
2d734     15 03 48 FC | 	wrbyte	#1, local03
2d738     01 FA 05 F6 | 	mov	result1, #1
2d73c     EC 02 90 FD | 	jmp	#LR__4630
2d740                 | LR__4620
2d740     04 4E 05 F1 | 	add	fp, #4
2d744     A7 26 02 FB | 	rdlong	local01, fp
2d748     04 4E 85 F1 | 	sub	fp, #4
2d74c     10 26 06 F1 | 	add	local01, #16
2d750     13 2B C2 FA | 	rdbyte	local03, local01
2d754     80 2A CE F7 | 	test	local03, #128 wz
2d758     78 00 90 AD |  if_e	jmp	#LR__4621
2d75c     04 4E 05 F1 | 	add	fp, #4
2d760     A7 34 02 FB | 	rdlong	local08, fp
2d764     1C 34 06 F1 | 	add	local08, #28
2d768     1A 35 02 FB | 	rdlong	local08, local08
2d76c     1C 4E 05 F1 | 	add	fp, #28
2d770     A7 36 02 FB | 	rdlong	local09, fp
2d774     1B 35 82 F1 | 	sub	local08, local09
2d778     0C 4E 05 F1 | 	add	fp, #12
2d77c     A7 38 02 FB | 	rdlong	local10, fp
2d780     2C 4E 85 F1 | 	sub	fp, #44
2d784     1C 3B 02 F6 | 	mov	local11, local10
2d788     1D 35 12 F2 | 	cmp	local08, local11 wc
2d78c     44 00 90 3D |  if_ae	jmp	#LR__4621
2d790     34 4E 05 F1 | 	add	fp, #52
2d794     A7 12 02 FB | 	rdlong	arg01, fp
2d798     30 4E 85 F1 | 	sub	fp, #48
2d79c     A7 14 02 FB | 	rdlong	arg02, fp
2d7a0     0A 3B 02 F6 | 	mov	local11, arg02
2d7a4     1C 3A 06 F1 | 	add	local11, #28
2d7a8     1D 37 02 FB | 	rdlong	local09, local11
2d7ac     1C 4E 05 F1 | 	add	fp, #28
2d7b0     A7 2E 02 FB | 	rdlong	local05, fp
2d7b4     17 37 82 F1 | 	sub	local09, local05
2d7b8     09 36 66 F0 | 	shl	local09, #9
2d7bc     1B 3B 02 F6 | 	mov	local11, local09
2d7c0     1B 13 02 F1 | 	add	arg01, local09
2d7c4     20 4E 85 F1 | 	sub	fp, #32
2d7c8     28 14 06 F1 | 	add	arg02, #40
2d7cc     09 16 C6 F9 | 	decod	arg03, #9
2d7d0     60 43 BF FD | 	call	#__system____builtin_memmove
2d7d4                 | LR__4621
2d7d4     2C 4E 05 F1 | 	add	fp, #44
2d7d8     A7 2A 02 FB | 	rdlong	local03, fp
2d7dc     09 2A 66 F0 | 	shl	local03, #9
2d7e0     04 4E 85 F1 | 	sub	fp, #4
2d7e4     A7 2A 62 FC | 	wrlong	local03, fp
2d7e8     28 4E 85 F1 | 	sub	fp, #40
2d7ec                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2d7ec                 | ' 				}
2d7ec                 | ' 
2d7ec                 | ' 
2d7ec                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2d7ec                 | ' 				continue;
2d7ec     B4 01 90 FD | 	jmp	#LR__4628
2d7f0                 | LR__4622
2d7f0     04 4E 05 F1 | 	add	fp, #4
2d7f4     A7 2A 02 FB | 	rdlong	local03, fp
2d7f8     1C 2A 06 F1 | 	add	local03, #28
2d7fc     15 2B 02 FB | 	rdlong	local03, local03
2d800     1C 4E 05 F1 | 	add	fp, #28
2d804     A7 26 02 FB | 	rdlong	local01, fp
2d808     20 4E 85 F1 | 	sub	fp, #32
2d80c     13 2B 0A F2 | 	cmp	local03, local01 wz
2d810     EC 00 90 AD |  if_e	jmp	#LR__4626
2d814     04 4E 05 F1 | 	add	fp, #4
2d818     A7 26 02 FB | 	rdlong	local01, fp
2d81c     04 4E 85 F1 | 	sub	fp, #4
2d820     10 26 06 F1 | 	add	local01, #16
2d824     13 2B C2 FA | 	rdbyte	local03, local01
2d828     80 2A CE F7 | 	test	local03, #128 wz
2d82c     7C 00 90 AD |  if_e	jmp	#LR__4624
2d830     18 4E 05 F1 | 	add	fp, #24
2d834     A7 26 02 FB | 	rdlong	local01, fp
2d838     01 26 06 F1 | 	add	local01, #1
2d83c     13 13 C2 FA | 	rdbyte	arg01, local01
2d840     14 4E 85 F1 | 	sub	fp, #20
2d844     A7 2A 02 FB | 	rdlong	local03, fp
2d848     15 15 02 F6 | 	mov	arg02, local03
2d84c     28 14 06 F1 | 	add	arg02, #40
2d850     04 4E 85 F1 | 	sub	fp, #4
2d854     1C 2A 06 F1 | 	add	local03, #28
2d858     15 17 02 FB | 	rdlong	arg03, local03
2d85c     01 18 06 F6 | 	mov	arg04, #1
2d860     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2d864     00 FA 0D F2 | 	cmp	result1, #0 wz
2d868     1C 00 90 AD |  if_e	jmp	#LR__4623
2d86c     04 4E 05 F1 | 	add	fp, #4
2d870     A7 2A 02 FB | 	rdlong	local03, fp
2d874     04 4E 85 F1 | 	sub	fp, #4
2d878     11 2A 06 F1 | 	add	local03, #17
2d87c     15 03 48 FC | 	wrbyte	#1, local03
2d880     01 FA 05 F6 | 	mov	result1, #1
2d884     A4 01 90 FD | 	jmp	#LR__4630
2d888                 | LR__4623
2d888     04 4E 05 F1 | 	add	fp, #4
2d88c     A7 3A 02 FB | 	rdlong	local11, fp
2d890     1D 2B 02 F6 | 	mov	local03, local11
2d894     04 4E 85 F1 | 	sub	fp, #4
2d898     10 3A 06 F1 | 	add	local11, #16
2d89c     1D 3B C2 FA | 	rdbyte	local11, local11
2d8a0     7F 3A 06 F5 | 	and	local11, #127
2d8a4     10 2A 06 F1 | 	add	local03, #16
2d8a8     15 3B 42 FC | 	wrbyte	local11, local03
2d8ac                 | LR__4624
2d8ac     18 4E 05 F1 | 	add	fp, #24
2d8b0     A7 26 02 FB | 	rdlong	local01, fp
2d8b4     01 26 06 F1 | 	add	local01, #1
2d8b8     13 13 C2 FA | 	rdbyte	arg01, local01
2d8bc     14 4E 85 F1 | 	sub	fp, #20
2d8c0     A7 14 02 FB | 	rdlong	arg02, fp
2d8c4     28 14 06 F1 | 	add	arg02, #40
2d8c8     1C 4E 05 F1 | 	add	fp, #28
2d8cc     A7 16 02 FB | 	rdlong	arg03, fp
2d8d0     20 4E 85 F1 | 	sub	fp, #32
2d8d4     01 18 06 F6 | 	mov	arg04, #1
2d8d8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2d8dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8e0     1C 00 90 AD |  if_e	jmp	#LR__4625
2d8e4     04 4E 05 F1 | 	add	fp, #4
2d8e8     A7 2A 02 FB | 	rdlong	local03, fp
2d8ec     04 4E 85 F1 | 	sub	fp, #4
2d8f0     11 2A 06 F1 | 	add	local03, #17
2d8f4     15 03 48 FC | 	wrbyte	#1, local03
2d8f8     01 FA 05 F6 | 	mov	result1, #1
2d8fc     2C 01 90 FD | 	jmp	#LR__4630
2d900                 | LR__4625
2d900                 | LR__4626
2d900     04 4E 05 F1 | 	add	fp, #4
2d904     A7 2A 02 FB | 	rdlong	local03, fp
2d908     1C 4E 05 F1 | 	add	fp, #28
2d90c     A7 3A 02 FB | 	rdlong	local11, fp
2d910     20 4E 85 F1 | 	sub	fp, #32
2d914     1C 2A 06 F1 | 	add	local03, #28
2d918     15 3B 62 FC | 	wrlong	local11, local03
2d91c                 | LR__4627
2d91c     04 4E 05 F1 | 	add	fp, #4
2d920     A7 26 02 FB | 	rdlong	local01, fp
2d924     14 26 06 F1 | 	add	local01, #20
2d928     13 3B 02 FB | 	rdlong	local11, local01
2d92c     FF 3B 06 F5 | 	and	local11, #511
2d930     09 2A C6 F9 | 	decod	local03, #9
2d934     1D 2B 82 F1 | 	sub	local03, local11
2d938     24 4E 05 F1 | 	add	fp, #36
2d93c     A7 2A 62 FC | 	wrlong	local03, fp
2d940     1C 4E 85 F1 | 	sub	fp, #28
2d944     A7 3A 02 FB | 	rdlong	local11, fp
2d948     0C 4E 85 F1 | 	sub	fp, #12
2d94c     1D 2B 1A F2 | 	cmp	local03, local11 wcz
2d950     0C 4E 05 11 |  if_a	add	fp, #12
2d954     A7 2A 02 1B |  if_a	rdlong	local03, fp
2d958     1C 4E 05 11 |  if_a	add	fp, #28
2d95c     A7 2A 62 1C |  if_a	wrlong	local03, fp
2d960     28 4E 85 11 |  if_a	sub	fp, #40
2d964     34 4E 05 F1 | 	add	fp, #52
2d968     A7 12 02 FB | 	rdlong	arg01, fp
2d96c     30 4E 85 F1 | 	sub	fp, #48
2d970     A7 30 02 FB | 	rdlong	local06, fp
2d974     18 15 02 F6 | 	mov	arg02, local06
2d978     28 14 06 F1 | 	add	arg02, #40
2d97c     14 30 06 F1 | 	add	local06, #20
2d980     18 3B 02 FB | 	rdlong	local11, local06
2d984     1D 37 02 F6 | 	mov	local09, local11
2d988     1B 39 02 F6 | 	mov	local10, local09
2d98c     FF 39 06 F5 | 	and	local10, #511
2d990     1C 15 02 F1 | 	add	arg02, local10
2d994     24 4E 05 F1 | 	add	fp, #36
2d998     A7 16 02 FB | 	rdlong	arg03, fp
2d99c     28 4E 85 F1 | 	sub	fp, #40
2d9a0     90 41 BF FD | 	call	#__system____builtin_memmove
2d9a4                 | LR__4628
2d9a4     0C 4E 05 F1 | 	add	fp, #12
2d9a8     A7 2A 02 FB | 	rdlong	local03, fp
2d9ac     1C 4E 05 F1 | 	add	fp, #28
2d9b0     A7 34 02 FB | 	rdlong	local08, fp
2d9b4     1A 2B 82 F1 | 	sub	local03, local08
2d9b8     1C 4E 85 F1 | 	sub	fp, #28
2d9bc     A7 2A 62 FC | 	wrlong	local03, fp
2d9c0     04 4E 05 F1 | 	add	fp, #4
2d9c4     A7 26 02 FB | 	rdlong	local01, fp
2d9c8     13 33 02 FB | 	rdlong	local07, local01
2d9cc     18 4E 05 F1 | 	add	fp, #24
2d9d0     A7 34 02 FB | 	rdlong	local08, fp
2d9d4     1A 33 02 F1 | 	add	local07, local08
2d9d8     13 33 62 FC | 	wrlong	local07, local01
2d9dc     0C 4E 05 F1 | 	add	fp, #12
2d9e0     A7 2A 02 FB | 	rdlong	local03, fp
2d9e4     0C 4E 85 F1 | 	sub	fp, #12
2d9e8     A7 3C 02 FB | 	rdlong	local12, fp
2d9ec     1E 2B 02 F1 | 	add	local03, local12
2d9f0     0C 4E 05 F1 | 	add	fp, #12
2d9f4     A7 2A 62 FC | 	wrlong	local03, fp
2d9f8     30 4E 85 F1 | 	sub	fp, #48
2d9fc     A7 3E 02 FB | 	rdlong	local13, fp
2da00     1F 2B 02 F6 | 	mov	local03, local13
2da04     14 3E 06 F1 | 	add	local13, #20
2da08     1F 41 02 FB | 	rdlong	local14, local13
2da0c     24 4E 05 F1 | 	add	fp, #36
2da10     A7 30 02 FB | 	rdlong	local06, fp
2da14     28 4E 85 F1 | 	sub	fp, #40
2da18     18 41 02 F1 | 	add	local14, local06
2da1c     14 2A 06 F1 | 	add	local03, #20
2da20     15 41 62 FC | 	wrlong	local14, local03
2da24     84 FA 9F FD | 	jmp	#LR__4612
2da28                 | LR__4629
2da28                 | ' 
2da28                 | ' 
2da28                 | ' 
2da28                 | ' 
2da28                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2da28                 | ' 
2da28                 | ' 	}
2da28                 | ' 
2da28                 | ' 	return FR_OK ;
2da28     00 FA 05 F6 | 	mov	result1, #0
2da2c                 | LR__4630
2da2c     A7 F0 03 F6 | 	mov	ptra, fp
2da30     B2 00 A0 FD | 	call	#popregs_
2da34                 | _fatfs_cc_f_read_ret
2da34     2D 00 64 FD | 	ret
2da38                 | 
2da38                 | _fatfs_cc_f_write
2da38     15 4A 05 F6 | 	mov	COUNT_, #21
2da3c     A8 00 A0 FD | 	call	#pushregs_
2da40     34 F0 07 F1 | 	add	ptra, #52
2da44     04 4E 05 F1 | 	add	fp, #4
2da48     A7 12 62 FC | 	wrlong	arg01, fp
2da4c     04 4E 05 F1 | 	add	fp, #4
2da50     A7 14 62 FC | 	wrlong	arg02, fp
2da54     04 4E 05 F1 | 	add	fp, #4
2da58     A7 16 62 FC | 	wrlong	arg03, fp
2da5c     04 4E 05 F1 | 	add	fp, #4
2da60     A7 18 62 FC | 	wrlong	arg04, fp
2da64     08 4E 85 F1 | 	sub	fp, #8
2da68     A7 FA 01 FB | 	rdlong	result1, fp
2da6c     28 4E 05 F1 | 	add	fp, #40
2da70     A7 FA 61 FC | 	wrlong	result1, fp
2da74     20 4E 85 F1 | 	sub	fp, #32
2da78     A7 FA 01 FB | 	rdlong	result1, fp
2da7c     FD 00 68 FC | 	wrlong	#0, result1
2da80     0C 4E 85 F1 | 	sub	fp, #12
2da84     A7 12 02 FB | 	rdlong	arg01, fp
2da88     14 4E 05 F1 | 	add	fp, #20
2da8c     A7 14 02 F6 | 	mov	arg02, fp
2da90     18 4E 85 F1 | 	sub	fp, #24
2da94     88 F0 BF FD | 	call	#_fatfs_cc_validate
2da98     14 4E 05 F1 | 	add	fp, #20
2da9c     A7 FA 61 FC | 	wrlong	result1, fp
2daa0     00 FA 4D F2 | 	cmps	result1, #0 wz
2daa4     14 4E 85 F1 | 	sub	fp, #20
2daa8     20 00 90 5D |  if_ne	jmp	#LR__4640
2daac     04 4E 05 F1 | 	add	fp, #4
2dab0     A7 14 02 FB | 	rdlong	arg02, fp
2dab4     11 14 06 F1 | 	add	arg02, #17
2dab8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2dabc     10 4E 05 F1 | 	add	fp, #16
2dac0     A7 14 62 FC | 	wrlong	arg02, fp
2dac4     14 4E 85 F1 | 	sub	fp, #20
2dac8     10 00 90 AD |  if_e	jmp	#LR__4641
2dacc                 | LR__4640
2dacc     14 4E 05 F1 | 	add	fp, #20
2dad0     A7 FA 01 FB | 	rdlong	result1, fp
2dad4     14 4E 85 F1 | 	sub	fp, #20
2dad8     44 07 90 FD | 	jmp	#LR__4663
2dadc                 | LR__4641
2dadc     04 4E 05 F1 | 	add	fp, #4
2dae0     A7 14 02 FB | 	rdlong	arg02, fp
2dae4     04 4E 85 F1 | 	sub	fp, #4
2dae8     10 14 06 F1 | 	add	arg02, #16
2daec     0A 15 C2 FA | 	rdbyte	arg02, arg02
2daf0     02 14 CE F7 | 	test	arg02, #2 wz
2daf4     07 FA 05 A6 |  if_e	mov	result1, #7
2daf8     24 07 90 AD |  if_e	jmp	#LR__4663
2dafc     04 4E 05 F1 | 	add	fp, #4
2db00     A7 14 02 FB | 	rdlong	arg02, fp
2db04     0A 13 02 F6 | 	mov	arg01, arg02
2db08     14 12 06 F1 | 	add	arg01, #20
2db0c     09 13 02 FB | 	rdlong	arg01, arg01
2db10     08 4E 05 F1 | 	add	fp, #8
2db14     A7 FA 01 FB | 	rdlong	result1, fp
2db18     FD 12 02 F1 | 	add	arg01, result1
2db1c     0C 4E 85 F1 | 	sub	fp, #12
2db20     14 14 06 F1 | 	add	arg02, #20
2db24     0A FB 01 FB | 	rdlong	result1, arg02
2db28     FD 12 12 F2 | 	cmp	arg01, result1 wc
2db2c     24 00 90 3D |  if_ae	jmp	#LR__4642
2db30     04 4E 05 F1 | 	add	fp, #4
2db34     A7 14 02 FB | 	rdlong	arg02, fp
2db38     01 FA 65 F6 | 	neg	result1, #1
2db3c     14 14 06 F1 | 	add	arg02, #20
2db40     0A 15 02 FB | 	rdlong	arg02, arg02
2db44     0A FB 81 F1 | 	sub	result1, arg02
2db48     08 4E 05 F1 | 	add	fp, #8
2db4c     A7 FA 61 FC | 	wrlong	result1, fp
2db50     0C 4E 85 F1 | 	sub	fp, #12
2db54                 | LR__4642
2db54                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2db54                 | ' 	}
2db54                 | ' 
2db54                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2db54                 | LR__4643
2db54     0C 4E 05 F1 | 	add	fp, #12
2db58     A7 FA 01 FB | 	rdlong	result1, fp
2db5c     0C 4E 85 F1 | 	sub	fp, #12
2db60     01 FA 15 F2 | 	cmp	result1, #1 wc
2db64     90 06 90 CD |  if_b	jmp	#LR__4662
2db68     04 4E 05 F1 | 	add	fp, #4
2db6c     A7 FA 01 FB | 	rdlong	result1, fp
2db70     04 4E 85 F1 | 	sub	fp, #4
2db74     14 FA 05 F1 | 	add	result1, #20
2db78     FD FA 01 FB | 	rdlong	result1, result1
2db7c     FF FB CD F7 | 	test	result1, #511 wz
2db80     D8 04 90 5D |  if_ne	jmp	#LR__4658
2db84     04 4E 05 F1 | 	add	fp, #4
2db88     A7 FA 01 FB | 	rdlong	result1, fp
2db8c     14 FA 05 F1 | 	add	result1, #20
2db90     FD FA 01 FB | 	rdlong	result1, result1
2db94     09 FA 45 F0 | 	shr	result1, #9
2db98     14 4E 05 F1 | 	add	fp, #20
2db9c     A7 14 02 FB | 	rdlong	arg02, fp
2dba0     0A 14 06 F1 | 	add	arg02, #10
2dba4     0A 19 E2 FA | 	rdword	arg04, arg02
2dba8     0C 15 32 F9 | 	getword	arg02, arg04, #0
2dbac     01 14 86 F1 | 	sub	arg02, #1
2dbb0     0A FB 09 F5 | 	and	result1, arg02 wz
2dbb4     14 4E 05 F1 | 	add	fp, #20
2dbb8     A7 FA 61 FC | 	wrlong	result1, fp
2dbbc     2C 4E 85 F1 | 	sub	fp, #44
2dbc0     44 01 90 5D |  if_ne	jmp	#LR__4649
2dbc4     04 4E 05 F1 | 	add	fp, #4
2dbc8     A7 FA 01 FB | 	rdlong	result1, fp
2dbcc     04 4E 85 F1 | 	sub	fp, #4
2dbd0     14 FA 05 F1 | 	add	result1, #20
2dbd4     FD 14 0A FB | 	rdlong	arg02, result1 wz
2dbd8     44 00 90 5D |  if_ne	jmp	#LR__4644
2dbdc     04 4E 05 F1 | 	add	fp, #4
2dbe0     A7 14 02 FB | 	rdlong	arg02, fp
2dbe4     08 14 06 F1 | 	add	arg02, #8
2dbe8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2dbec     18 4E 05 F1 | 	add	fp, #24
2dbf0     A7 14 62 FC | 	wrlong	arg02, fp
2dbf4     1C 4E 85 F1 | 	sub	fp, #28
2dbf8     4C 00 90 5D |  if_ne	jmp	#LR__4645
2dbfc     04 4E 05 F1 | 	add	fp, #4
2dc00     A7 12 02 FB | 	rdlong	arg01, fp
2dc04     04 4E 85 F1 | 	sub	fp, #4
2dc08     00 14 06 F6 | 	mov	arg02, #0
2dc0c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2dc10     1C 4E 05 F1 | 	add	fp, #28
2dc14     A7 FA 61 FC | 	wrlong	result1, fp
2dc18     1C 4E 85 F1 | 	sub	fp, #28
2dc1c     28 00 90 FD | 	jmp	#LR__4645
2dc20                 | LR__4644
2dc20     04 4E 05 F1 | 	add	fp, #4
2dc24     A7 18 02 FB | 	rdlong	arg04, fp
2dc28     0C 13 02 F6 | 	mov	arg01, arg04
2dc2c     04 4E 85 F1 | 	sub	fp, #4
2dc30     18 18 06 F1 | 	add	arg04, #24
2dc34     0C 15 02 FB | 	rdlong	arg02, arg04
2dc38     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2dc3c     1C 4E 05 F1 | 	add	fp, #28
2dc40     A7 FA 61 FC | 	wrlong	result1, fp
2dc44     1C 4E 85 F1 | 	sub	fp, #28
2dc48                 | LR__4645
2dc48     1C 4E 05 F1 | 	add	fp, #28
2dc4c     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc50     1C 4E 85 F1 | 	sub	fp, #28
2dc54     A0 05 90 AD |  if_e	jmp	#LR__4662
2dc58     1C 4E 05 F1 | 	add	fp, #28
2dc5c     A7 FA 01 FB | 	rdlong	result1, fp
2dc60     1C 4E 85 F1 | 	sub	fp, #28
2dc64     01 FA 0D F2 | 	cmp	result1, #1 wz
2dc68     1C 00 90 5D |  if_ne	jmp	#LR__4646
2dc6c     04 4E 05 F1 | 	add	fp, #4
2dc70     A7 FA 01 FB | 	rdlong	result1, fp
2dc74     04 4E 85 F1 | 	sub	fp, #4
2dc78     11 FA 05 F1 | 	add	result1, #17
2dc7c     FD 04 48 FC | 	wrbyte	#2, result1
2dc80     02 FA 05 F6 | 	mov	result1, #2
2dc84     98 05 90 FD | 	jmp	#LR__4663
2dc88                 | LR__4646
2dc88     1C 4E 05 F1 | 	add	fp, #28
2dc8c     A7 FA 01 FB | 	rdlong	result1, fp
2dc90     1C 4E 85 F1 | 	sub	fp, #28
2dc94     FF FF 7F FF 
2dc98     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2dc9c     1C 00 90 5D |  if_ne	jmp	#LR__4647
2dca0     04 4E 05 F1 | 	add	fp, #4
2dca4     A7 FA 01 FB | 	rdlong	result1, fp
2dca8     04 4E 85 F1 | 	sub	fp, #4
2dcac     11 FA 05 F1 | 	add	result1, #17
2dcb0     FD 02 48 FC | 	wrbyte	#1, result1
2dcb4     01 FA 05 F6 | 	mov	result1, #1
2dcb8     64 05 90 FD | 	jmp	#LR__4663
2dcbc                 | LR__4647
2dcbc     04 4E 05 F1 | 	add	fp, #4
2dcc0     A7 FA 01 FB | 	rdlong	result1, fp
2dcc4     18 4E 05 F1 | 	add	fp, #24
2dcc8     A7 18 02 FB | 	rdlong	arg04, fp
2dccc     18 FA 05 F1 | 	add	result1, #24
2dcd0     FD 18 62 FC | 	wrlong	arg04, result1
2dcd4     18 4E 85 F1 | 	sub	fp, #24
2dcd8     A7 FA 01 FB | 	rdlong	result1, fp
2dcdc     04 4E 85 F1 | 	sub	fp, #4
2dce0     08 FA 05 F1 | 	add	result1, #8
2dce4     FD FA 09 FB | 	rdlong	result1, result1 wz
2dce8     1C 00 90 5D |  if_ne	jmp	#LR__4648
2dcec     04 4E 05 F1 | 	add	fp, #4
2dcf0     A7 18 02 FB | 	rdlong	arg04, fp
2dcf4     18 4E 05 F1 | 	add	fp, #24
2dcf8     A7 FA 01 FB | 	rdlong	result1, fp
2dcfc     1C 4E 85 F1 | 	sub	fp, #28
2dd00     08 18 06 F1 | 	add	arg04, #8
2dd04     0C FB 61 FC | 	wrlong	result1, arg04
2dd08                 | LR__4648
2dd08                 | LR__4649
2dd08     04 4E 05 F1 | 	add	fp, #4
2dd0c     A7 18 02 FB | 	rdlong	arg04, fp
2dd10     04 4E 85 F1 | 	sub	fp, #4
2dd14     10 18 06 F1 | 	add	arg04, #16
2dd18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dd1c     80 18 CE F7 | 	test	arg04, #128 wz
2dd20     7C 00 90 AD |  if_e	jmp	#LR__4651
2dd24     18 4E 05 F1 | 	add	fp, #24
2dd28     A7 18 02 FB | 	rdlong	arg04, fp
2dd2c     01 18 06 F1 | 	add	arg04, #1
2dd30     0C 13 C2 FA | 	rdbyte	arg01, arg04
2dd34     14 4E 85 F1 | 	sub	fp, #20
2dd38     A7 18 02 FB | 	rdlong	arg04, fp
2dd3c     0C 15 02 F6 | 	mov	arg02, arg04
2dd40     28 14 06 F1 | 	add	arg02, #40
2dd44     04 4E 85 F1 | 	sub	fp, #4
2dd48     1C 18 06 F1 | 	add	arg04, #28
2dd4c     0C 17 02 FB | 	rdlong	arg03, arg04
2dd50     01 18 06 F6 | 	mov	arg04, #1
2dd54     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2dd58     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd5c     1C 00 90 AD |  if_e	jmp	#LR__4650
2dd60     04 4E 05 F1 | 	add	fp, #4
2dd64     A7 FA 01 FB | 	rdlong	result1, fp
2dd68     04 4E 85 F1 | 	sub	fp, #4
2dd6c     11 FA 05 F1 | 	add	result1, #17
2dd70     FD 02 48 FC | 	wrbyte	#1, result1
2dd74     01 FA 05 F6 | 	mov	result1, #1
2dd78     A4 04 90 FD | 	jmp	#LR__4663
2dd7c                 | LR__4650
2dd7c     04 4E 05 F1 | 	add	fp, #4
2dd80     A7 18 02 FB | 	rdlong	arg04, fp
2dd84     0C FB 01 F6 | 	mov	result1, arg04
2dd88     04 4E 85 F1 | 	sub	fp, #4
2dd8c     10 18 06 F1 | 	add	arg04, #16
2dd90     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dd94     7F 18 06 F5 | 	and	arg04, #127
2dd98     10 FA 05 F1 | 	add	result1, #16
2dd9c     FD 18 42 FC | 	wrbyte	arg04, result1
2dda0                 | LR__4651
2dda0     18 4E 05 F1 | 	add	fp, #24
2dda4     A7 12 02 FB | 	rdlong	arg01, fp
2dda8     14 4E 85 F1 | 	sub	fp, #20
2ddac     A7 14 02 FB | 	rdlong	arg02, fp
2ddb0     04 4E 85 F1 | 	sub	fp, #4
2ddb4     18 14 06 F1 | 	add	arg02, #24
2ddb8     0A 15 02 FB | 	rdlong	arg02, arg02
2ddbc     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2ddc0     20 4E 05 F1 | 	add	fp, #32
2ddc4     A7 FA 61 FC | 	wrlong	result1, fp
2ddc8     20 4E 85 F1 | 	sub	fp, #32
2ddcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddd0     1C 00 90 5D |  if_ne	jmp	#LR__4652
2ddd4     04 4E 05 F1 | 	add	fp, #4
2ddd8     A7 FA 01 FB | 	rdlong	result1, fp
2dddc     04 4E 85 F1 | 	sub	fp, #4
2dde0     11 FA 05 F1 | 	add	result1, #17
2dde4     FD 04 48 FC | 	wrbyte	#2, result1
2dde8     02 FA 05 F6 | 	mov	result1, #2
2ddec     30 04 90 FD | 	jmp	#LR__4663
2ddf0                 | LR__4652
2ddf0     20 4E 05 F1 | 	add	fp, #32
2ddf4     A7 FA 01 FB | 	rdlong	result1, fp
2ddf8     0C 4E 05 F1 | 	add	fp, #12
2ddfc     A7 26 02 FB | 	rdlong	local01, fp
2de00     13 FB 01 F1 | 	add	result1, local01
2de04     0C 4E 85 F1 | 	sub	fp, #12
2de08     A7 FA 61 FC | 	wrlong	result1, fp
2de0c     14 4E 85 F1 | 	sub	fp, #20
2de10     A7 FA 01 FB | 	rdlong	result1, fp
2de14     09 FA 45 F0 | 	shr	result1, #9
2de18     1C 4E 05 F1 | 	add	fp, #28
2de1c     A7 FA 61 FC | 	wrlong	result1, fp
2de20     28 4E 85 F1 | 	sub	fp, #40
2de24     01 FA 15 F2 | 	cmp	result1, #1 wc
2de28     60 01 90 CD |  if_b	jmp	#LR__4656
2de2c     2C 4E 05 F1 | 	add	fp, #44
2de30     A7 FA 01 FB | 	rdlong	result1, fp
2de34     04 4E 85 F1 | 	sub	fp, #4
2de38     A7 18 02 FB | 	rdlong	arg04, fp
2de3c     0C FB 01 F1 | 	add	result1, arg04
2de40     10 4E 85 F1 | 	sub	fp, #16
2de44     A7 18 02 FB | 	rdlong	arg04, fp
2de48     18 4E 85 F1 | 	sub	fp, #24
2de4c     0A 18 06 F1 | 	add	arg04, #10
2de50     0C 19 E2 FA | 	rdword	arg04, arg04
2de54     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2de58     28 00 90 ED |  if_be	jmp	#LR__4653
2de5c     18 4E 05 F1 | 	add	fp, #24
2de60     A7 FA 01 FB | 	rdlong	result1, fp
2de64     0A FA 05 F1 | 	add	result1, #10
2de68     FD FA E1 FA | 	rdword	result1, result1
2de6c     14 4E 05 F1 | 	add	fp, #20
2de70     A7 18 02 FB | 	rdlong	arg04, fp
2de74     0C FB 81 F1 | 	sub	result1, arg04
2de78     04 4E 85 F1 | 	sub	fp, #4
2de7c     A7 FA 61 FC | 	wrlong	result1, fp
2de80     28 4E 85 F1 | 	sub	fp, #40
2de84                 | LR__4653
2de84     18 4E 05 F1 | 	add	fp, #24
2de88     A7 18 02 FB | 	rdlong	arg04, fp
2de8c     01 18 06 F1 | 	add	arg04, #1
2de90     0C 13 C2 FA | 	rdbyte	arg01, arg04
2de94     18 4E 05 F1 | 	add	fp, #24
2de98     A7 14 02 FB | 	rdlong	arg02, fp
2de9c     10 4E 85 F1 | 	sub	fp, #16
2dea0     A7 16 02 FB | 	rdlong	arg03, fp
2dea4     08 4E 05 F1 | 	add	fp, #8
2dea8     A7 18 02 FB | 	rdlong	arg04, fp
2deac     28 4E 85 F1 | 	sub	fp, #40
2deb0     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2deb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2deb8     1C 00 90 AD |  if_e	jmp	#LR__4654
2debc     04 4E 05 F1 | 	add	fp, #4
2dec0     A7 26 02 FB | 	rdlong	local01, fp
2dec4     04 4E 85 F1 | 	sub	fp, #4
2dec8     11 26 06 F1 | 	add	local01, #17
2decc     13 03 48 FC | 	wrbyte	#1, local01
2ded0     01 FA 05 F6 | 	mov	result1, #1
2ded4     48 03 90 FD | 	jmp	#LR__4663
2ded8                 | LR__4654
2ded8     04 4E 05 F1 | 	add	fp, #4
2dedc     A7 FA 01 FB | 	rdlong	result1, fp
2dee0     1C FA 05 F1 | 	add	result1, #28
2dee4     FD FA 01 FB | 	rdlong	result1, result1
2dee8     1C 4E 05 F1 | 	add	fp, #28
2deec     A7 28 02 FB | 	rdlong	local02, fp
2def0     14 FB 81 F1 | 	sub	result1, local02
2def4     08 4E 05 F1 | 	add	fp, #8
2def8     A7 18 02 FB | 	rdlong	arg04, fp
2defc     28 4E 85 F1 | 	sub	fp, #40
2df00     0C FB 11 F2 | 	cmp	result1, arg04 wc
2df04     68 00 90 3D |  if_ae	jmp	#LR__4655
2df08     04 4E 05 F1 | 	add	fp, #4
2df0c     A7 12 02 FB | 	rdlong	arg01, fp
2df10     28 12 06 F1 | 	add	arg01, #40
2df14     2C 4E 05 F1 | 	add	fp, #44
2df18     A7 14 02 FB | 	rdlong	arg02, fp
2df1c     2C 4E 85 F1 | 	sub	fp, #44
2df20     A7 FA 01 FB | 	rdlong	result1, fp
2df24     1C FA 05 F1 | 	add	result1, #28
2df28     FD 2A 02 FB | 	rdlong	local03, result1
2df2c     1C 4E 05 F1 | 	add	fp, #28
2df30     A7 18 02 FB | 	rdlong	arg04, fp
2df34     20 4E 85 F1 | 	sub	fp, #32
2df38     0C 2B 82 F1 | 	sub	local03, arg04
2df3c     09 2A 66 F0 | 	shl	local03, #9
2df40     15 15 02 F1 | 	add	arg02, local03
2df44     09 16 C6 F9 | 	decod	arg03, #9
2df48     E8 3B BF FD | 	call	#__system____builtin_memmove
2df4c     04 4E 05 F1 | 	add	fp, #4
2df50     A7 18 02 FB | 	rdlong	arg04, fp
2df54     0C FB 01 F6 | 	mov	result1, arg04
2df58     04 4E 85 F1 | 	sub	fp, #4
2df5c     10 18 06 F1 | 	add	arg04, #16
2df60     0C 19 C2 FA | 	rdbyte	arg04, arg04
2df64     7F 18 06 F5 | 	and	arg04, #127
2df68     10 FA 05 F1 | 	add	result1, #16
2df6c     FD 18 42 FC | 	wrbyte	arg04, result1
2df70                 | LR__4655
2df70     28 4E 05 F1 | 	add	fp, #40
2df74     A7 FA 01 FB | 	rdlong	result1, fp
2df78     09 FA 65 F0 | 	shl	result1, #9
2df7c     04 4E 85 F1 | 	sub	fp, #4
2df80     A7 FA 61 FC | 	wrlong	result1, fp
2df84     24 4E 85 F1 | 	sub	fp, #36
2df88                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2df88                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2df88                 | ' 				}
2df88                 | ' 
2df88                 | ' 
2df88                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2df88                 | ' 				continue;
2df88     74 01 90 FD | 	jmp	#LR__4659
2df8c                 | LR__4656
2df8c     04 4E 05 F1 | 	add	fp, #4
2df90     A7 28 02 FB | 	rdlong	local02, fp
2df94     1C 28 06 F1 | 	add	local02, #28
2df98     14 FB 01 FB | 	rdlong	result1, local02
2df9c     1C 4E 05 F1 | 	add	fp, #28
2dfa0     A7 28 02 FB | 	rdlong	local02, fp
2dfa4     20 4E 85 F1 | 	sub	fp, #32
2dfa8     14 FB 09 F2 | 	cmp	result1, local02 wz
2dfac     90 00 90 AD |  if_e	jmp	#LR__4657
2dfb0     04 4E 05 F1 | 	add	fp, #4
2dfb4     A7 FA 01 FB | 	rdlong	result1, fp
2dfb8     FD 2A 02 F6 | 	mov	local03, result1
2dfbc     04 4E 85 F1 | 	sub	fp, #4
2dfc0     14 2A 06 F1 | 	add	local03, #20
2dfc4     15 2B 02 FB | 	rdlong	local03, local03
2dfc8     0C FA 05 F1 | 	add	result1, #12
2dfcc     FD 2C 02 FB | 	rdlong	local04, result1
2dfd0     16 2F 02 F6 | 	mov	local05, local04
2dfd4     17 2B 12 F2 | 	cmp	local03, local05 wc
2dfd8     64 00 90 3D |  if_ae	jmp	#LR__4657
2dfdc     18 4E 05 F1 | 	add	fp, #24
2dfe0     A7 18 02 FB | 	rdlong	arg04, fp
2dfe4     01 18 06 F1 | 	add	arg04, #1
2dfe8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2dfec     14 4E 85 F1 | 	sub	fp, #20
2dff0     A7 30 02 FB | 	rdlong	local06, fp
2dff4     28 30 06 F1 | 	add	local06, #40
2dff8     18 33 02 F6 | 	mov	local07, local06
2dffc     1C 4E 05 F1 | 	add	fp, #28
2e000     A7 34 02 FB | 	rdlong	local08, fp
2e004     20 4E 85 F1 | 	sub	fp, #32
2e008     01 36 06 F6 | 	mov	local09, #1
2e00c     19 15 02 F6 | 	mov	arg02, local07
2e010     1A 17 02 F6 | 	mov	arg03, local08
2e014     01 18 06 F6 | 	mov	arg04, #1
2e018     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2e01c     FD 38 0A F6 | 	mov	local10, result1 wz
2e020     1C 00 90 AD |  if_e	jmp	#LR__4657
2e024     04 4E 05 F1 | 	add	fp, #4
2e028     A7 38 02 FB | 	rdlong	local10, fp
2e02c     04 4E 85 F1 | 	sub	fp, #4
2e030     11 38 06 F1 | 	add	local10, #17
2e034     1C 03 48 FC | 	wrbyte	#1, local10
2e038                 | ' 				fp->fptr < fp->obj.objsize &&
2e038                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2e038                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2e038     01 FA 05 F6 | 	mov	result1, #1
2e03c     E0 01 90 FD | 	jmp	#LR__4663
2e040                 | LR__4657
2e040     04 4E 05 F1 | 	add	fp, #4
2e044     A7 18 02 FB | 	rdlong	arg04, fp
2e048     1C 4E 05 F1 | 	add	fp, #28
2e04c     A7 FA 01 FB | 	rdlong	result1, fp
2e050     20 4E 85 F1 | 	sub	fp, #32
2e054     1C 18 06 F1 | 	add	arg04, #28
2e058     0C FB 61 FC | 	wrlong	result1, arg04
2e05c                 | LR__4658
2e05c     04 4E 05 F1 | 	add	fp, #4
2e060     A7 FA 01 FB | 	rdlong	result1, fp
2e064     14 FA 05 F1 | 	add	result1, #20
2e068     FD FA 01 FB | 	rdlong	result1, result1
2e06c     FF FB 05 F5 | 	and	result1, #511
2e070     09 3A C6 F9 | 	decod	local11, #9
2e074     FD 3A 82 F1 | 	sub	local11, result1
2e078     20 4E 05 F1 | 	add	fp, #32
2e07c     A7 3A 62 FC | 	wrlong	local11, fp
2e080     18 4E 85 F1 | 	sub	fp, #24
2e084     A7 FA 01 FB | 	rdlong	result1, fp
2e088     0C 4E 85 F1 | 	sub	fp, #12
2e08c     FD 3A 1A F2 | 	cmp	local11, result1 wcz
2e090     0C 4E 05 11 |  if_a	add	fp, #12
2e094     A7 3A 02 1B |  if_a	rdlong	local11, fp
2e098     18 4E 05 11 |  if_a	add	fp, #24
2e09c     A7 3A 62 1C |  if_a	wrlong	local11, fp
2e0a0     24 4E 85 11 |  if_a	sub	fp, #36
2e0a4     04 4E 05 F1 | 	add	fp, #4
2e0a8     A7 3A 02 FB | 	rdlong	local11, fp
2e0ac     1D 13 02 F6 | 	mov	arg01, local11
2e0b0     28 12 06 F1 | 	add	arg01, #40
2e0b4     14 3A 06 F1 | 	add	local11, #20
2e0b8     1D 3B 02 FB | 	rdlong	local11, local11
2e0bc     FF 3B 06 F5 | 	and	local11, #511
2e0c0     1D 13 02 F1 | 	add	arg01, local11
2e0c4     2C 4E 05 F1 | 	add	fp, #44
2e0c8     A7 14 02 FB | 	rdlong	arg02, fp
2e0cc     0C 4E 85 F1 | 	sub	fp, #12
2e0d0     A7 16 02 FB | 	rdlong	arg03, fp
2e0d4     24 4E 85 F1 | 	sub	fp, #36
2e0d8     58 3A BF FD | 	call	#__system____builtin_memmove
2e0dc     04 4E 05 F1 | 	add	fp, #4
2e0e0     A7 FA 01 FB | 	rdlong	result1, fp
2e0e4     FD 3A 02 F6 | 	mov	local11, result1
2e0e8     04 4E 85 F1 | 	sub	fp, #4
2e0ec     10 FA 05 F1 | 	add	result1, #16
2e0f0     FD FA C1 FA | 	rdbyte	result1, result1
2e0f4     80 FA 45 F5 | 	or	result1, #128
2e0f8     10 3A 06 F1 | 	add	local11, #16
2e0fc     1D FB 41 FC | 	wrbyte	result1, local11
2e100                 | LR__4659
2e100     0C 4E 05 F1 | 	add	fp, #12
2e104     A7 3A 02 FB | 	rdlong	local11, fp
2e108     18 4E 05 F1 | 	add	fp, #24
2e10c     A7 FA 01 FB | 	rdlong	result1, fp
2e110     FD 3A 82 F1 | 	sub	local11, result1
2e114     18 4E 85 F1 | 	sub	fp, #24
2e118     A7 3A 62 FC | 	wrlong	local11, fp
2e11c     04 4E 05 F1 | 	add	fp, #4
2e120     A7 3C 02 FB | 	rdlong	local12, fp
2e124     1E 3B 02 FB | 	rdlong	local11, local12
2e128     14 4E 05 F1 | 	add	fp, #20
2e12c     A7 3E 02 FB | 	rdlong	local13, fp
2e130     1F 3B 02 F1 | 	add	local11, local13
2e134     1E 3B 62 FC | 	wrlong	local11, local12
2e138     0C 4E 05 F1 | 	add	fp, #12
2e13c     A7 3A 02 FB | 	rdlong	local11, fp
2e140     0C 4E 85 F1 | 	sub	fp, #12
2e144     A7 40 02 FB | 	rdlong	local14, fp
2e148     20 3B 02 F1 | 	add	local11, local14
2e14c     0C 4E 05 F1 | 	add	fp, #12
2e150     A7 3A 62 FC | 	wrlong	local11, fp
2e154     2C 4E 85 F1 | 	sub	fp, #44
2e158     A7 42 02 FB | 	rdlong	local15, fp
2e15c     21 3B 02 F6 | 	mov	local11, local15
2e160     14 42 06 F1 | 	add	local15, #20
2e164     21 43 02 FB | 	rdlong	local15, local15
2e168     20 4E 05 F1 | 	add	fp, #32
2e16c     A7 44 02 FB | 	rdlong	local16, fp
2e170     22 43 02 F1 | 	add	local15, local16
2e174     14 3A 06 F1 | 	add	local11, #20
2e178     1D 43 62 FC | 	wrlong	local15, local11
2e17c     20 4E 85 F1 | 	sub	fp, #32
2e180     A7 46 02 FB | 	rdlong	local17, fp
2e184     23 3B 02 F6 | 	mov	local11, local17
2e188     23 49 02 F6 | 	mov	local18, local17
2e18c     04 4E 85 F1 | 	sub	fp, #4
2e190     14 46 06 F1 | 	add	local17, #20
2e194     23 4B 02 FB | 	rdlong	local19, local17
2e198     0C 48 06 F1 | 	add	local18, #12
2e19c     24 4D 02 FB | 	rdlong	local20, local18
2e1a0     26 4B 1A F2 | 	cmp	local19, local20 wcz
2e1a4     24 00 90 ED |  if_be	jmp	#LR__4660
2e1a8     04 4E 05 F1 | 	add	fp, #4
2e1ac     A7 2E 02 FB | 	rdlong	local05, fp
2e1b0     04 4E 85 F1 | 	sub	fp, #4
2e1b4     17 2B 02 F6 | 	mov	local03, local05
2e1b8     14 2A 06 F1 | 	add	local03, #20
2e1bc     15 2D 02 FB | 	rdlong	local04, local03
2e1c0     14 2A 86 F1 | 	sub	local03, #20
2e1c4     16 4F 02 F6 | 	mov	local21, local04
2e1c8     20 00 90 FD | 	jmp	#LR__4661
2e1cc                 | LR__4660
2e1cc     04 4E 05 F1 | 	add	fp, #4
2e1d0     A7 32 02 FB | 	rdlong	local07, fp
2e1d4     04 4E 85 F1 | 	sub	fp, #4
2e1d8     19 39 02 F6 | 	mov	local10, local07
2e1dc     0C 38 06 F1 | 	add	local10, #12
2e1e0     1C 35 02 FB | 	rdlong	local08, local10
2e1e4     0C 38 86 F1 | 	sub	local10, #12
2e1e8     1A 4F 02 F6 | 	mov	local21, local08
2e1ec                 | LR__4661
2e1ec     0C 3A 06 F1 | 	add	local11, #12
2e1f0     1D 4F 62 FC | 	wrlong	local21, local11
2e1f4     5C F9 9F FD | 	jmp	#LR__4643
2e1f8                 | LR__4662
2e1f8     04 4E 05 F1 | 	add	fp, #4
2e1fc     A7 3C 02 FB | 	rdlong	local12, fp
2e200     1E 27 02 F6 | 	mov	local01, local12
2e204     04 4E 85 F1 | 	sub	fp, #4
2e208     10 3C 06 F1 | 	add	local12, #16
2e20c     1E 3B C2 FA | 	rdbyte	local11, local12
2e210     40 3A 46 F5 | 	or	local11, #64
2e214     10 26 06 F1 | 	add	local01, #16
2e218     13 3B 42 FC | 	wrbyte	local11, local01
2e21c                 | ' 
2e21c                 | ' 
2e21c                 | ' 
2e21c                 | ' 
2e21c                 | ' 
2e21c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2e21c                 | ' 		fp->flag |=  0x80 ;
2e21c                 | ' 
2e21c                 | ' 	}
2e21c                 | ' 
2e21c                 | ' 	fp->flag |=  0x40 ;
2e21c                 | ' 
2e21c                 | ' 	return FR_OK ;
2e21c     00 FA 05 F6 | 	mov	result1, #0
2e220                 | LR__4663
2e220     A7 F0 03 F6 | 	mov	ptra, fp
2e224     B2 00 A0 FD | 	call	#popregs_
2e228                 | _fatfs_cc_f_write_ret
2e228     2D 00 64 FD | 	ret
2e22c                 | 
2e22c                 | _fatfs_cc_f_sync
2e22c     00 4A 05 F6 | 	mov	COUNT_, #0
2e230     A8 00 A0 FD | 	call	#pushregs_
2e234     18 F0 07 F1 | 	add	ptra, #24
2e238     04 4E 05 F1 | 	add	fp, #4
2e23c     A7 12 62 FC | 	wrlong	arg01, fp
2e240     08 4E 05 F1 | 	add	fp, #8
2e244     A7 14 02 F6 | 	mov	arg02, fp
2e248     0C 4E 85 F1 | 	sub	fp, #12
2e24c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2e250     08 4E 05 F1 | 	add	fp, #8
2e254     A7 FA 61 FC | 	wrlong	result1, fp
2e258     08 4E 85 F1 | 	sub	fp, #8
2e25c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e260     C0 01 90 5D |  if_ne	jmp	#LR__4673
2e264     04 4E 05 F1 | 	add	fp, #4
2e268     A7 18 02 FB | 	rdlong	arg04, fp
2e26c     04 4E 85 F1 | 	sub	fp, #4
2e270     10 18 06 F1 | 	add	arg04, #16
2e274     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e278     40 18 CE F7 | 	test	arg04, #64 wz
2e27c     A4 01 90 AD |  if_e	jmp	#LR__4672
2e280     04 4E 05 F1 | 	add	fp, #4
2e284     A7 18 02 FB | 	rdlong	arg04, fp
2e288     04 4E 85 F1 | 	sub	fp, #4
2e28c     10 18 06 F1 | 	add	arg04, #16
2e290     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e294     80 18 CE F7 | 	test	arg04, #128 wz
2e298     64 00 90 AD |  if_e	jmp	#LR__4670
2e29c     0C 4E 05 F1 | 	add	fp, #12
2e2a0     A7 18 02 FB | 	rdlong	arg04, fp
2e2a4     01 18 06 F1 | 	add	arg04, #1
2e2a8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2e2ac     08 4E 85 F1 | 	sub	fp, #8
2e2b0     A7 18 02 FB | 	rdlong	arg04, fp
2e2b4     0C 15 02 F6 | 	mov	arg02, arg04
2e2b8     28 14 06 F1 | 	add	arg02, #40
2e2bc     04 4E 85 F1 | 	sub	fp, #4
2e2c0     1C 18 06 F1 | 	add	arg04, #28
2e2c4     0C 17 02 FB | 	rdlong	arg03, arg04
2e2c8     01 18 06 F6 | 	mov	arg04, #1
2e2cc     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2e2d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2d4     01 FA 05 56 |  if_ne	mov	result1, #1
2e2d8     54 01 90 5D |  if_ne	jmp	#LR__4674
2e2dc     04 4E 05 F1 | 	add	fp, #4
2e2e0     A7 18 02 FB | 	rdlong	arg04, fp
2e2e4     0C 17 02 F6 | 	mov	arg03, arg04
2e2e8     04 4E 85 F1 | 	sub	fp, #4
2e2ec     10 18 06 F1 | 	add	arg04, #16
2e2f0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e2f4     7F 18 06 F5 | 	and	arg04, #127
2e2f8     10 16 06 F1 | 	add	arg03, #16
2e2fc     0B 19 42 FC | 	wrbyte	arg04, arg03
2e300                 | LR__4670
2e300     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2e304     10 4E 05 F1 | 	add	fp, #16
2e308     A7 FA 61 FC | 	wrlong	result1, fp
2e30c     04 4E 85 F1 | 	sub	fp, #4
2e310     A7 12 02 FB | 	rdlong	arg01, fp
2e314     08 4E 85 F1 | 	sub	fp, #8
2e318     A7 18 02 FB | 	rdlong	arg04, fp
2e31c     04 4E 85 F1 | 	sub	fp, #4
2e320     20 18 06 F1 | 	add	arg04, #32
2e324     0C 15 02 FB | 	rdlong	arg02, arg04
2e328     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2e32c     08 4E 05 F1 | 	add	fp, #8
2e330     A7 FA 61 FC | 	wrlong	result1, fp
2e334     08 4E 85 F1 | 	sub	fp, #8
2e338     00 FA 0D F2 | 	cmp	result1, #0 wz
2e33c     E4 00 90 5D |  if_ne	jmp	#LR__4671
2e340     04 4E 05 F1 | 	add	fp, #4
2e344     A7 18 02 FB | 	rdlong	arg04, fp
2e348     24 18 06 F1 | 	add	arg04, #36
2e34c     0C 19 02 FB | 	rdlong	arg04, arg04
2e350     10 4E 05 F1 | 	add	fp, #16
2e354     A7 18 62 FC | 	wrlong	arg04, fp
2e358     0C 17 02 F6 | 	mov	arg03, arg04
2e35c     0B 16 06 F1 | 	add	arg03, #11
2e360     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e364     20 16 46 F5 | 	or	arg03, #32
2e368     0B 18 06 F1 | 	add	arg04, #11
2e36c     0C 17 42 FC | 	wrbyte	arg03, arg04
2e370     10 4E 85 F1 | 	sub	fp, #16
2e374     A7 18 02 FB | 	rdlong	arg04, fp
2e378     0C 13 02 FB | 	rdlong	arg01, arg04
2e37c     10 4E 05 F1 | 	add	fp, #16
2e380     A7 14 02 FB | 	rdlong	arg02, fp
2e384     14 4E 85 F1 | 	sub	fp, #20
2e388     08 18 06 F1 | 	add	arg04, #8
2e38c     0C 17 02 FB | 	rdlong	arg03, arg04
2e390     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2e394     14 4E 05 F1 | 	add	fp, #20
2e398     A7 12 02 FB | 	rdlong	arg01, fp
2e39c     1C 12 06 F1 | 	add	arg01, #28
2e3a0     10 4E 85 F1 | 	sub	fp, #16
2e3a4     A7 18 02 FB | 	rdlong	arg04, fp
2e3a8     0C 18 06 F1 | 	add	arg04, #12
2e3ac     0C 15 02 FB | 	rdlong	arg02, arg04
2e3b0     09 15 62 FC | 	wrlong	arg02, arg01
2e3b4     10 4E 05 F1 | 	add	fp, #16
2e3b8     A7 12 02 FB | 	rdlong	arg01, fp
2e3bc     16 12 06 F1 | 	add	arg01, #22
2e3c0     04 4E 85 F1 | 	sub	fp, #4
2e3c4     A7 14 02 FB | 	rdlong	arg02, fp
2e3c8     09 15 62 FC | 	wrlong	arg02, arg01
2e3cc     04 4E 05 F1 | 	add	fp, #4
2e3d0     A7 12 02 FB | 	rdlong	arg01, fp
2e3d4     12 12 06 F1 | 	add	arg01, #18
2e3d8     09 01 58 FC | 	wrword	#0, arg01
2e3dc     08 4E 85 F1 | 	sub	fp, #8
2e3e0     A7 18 02 FB | 	rdlong	arg04, fp
2e3e4     03 18 06 F1 | 	add	arg04, #3
2e3e8     0C 03 48 FC | 	wrbyte	#1, arg04
2e3ec     A7 12 02 FB | 	rdlong	arg01, fp
2e3f0     0C 4E 85 F1 | 	sub	fp, #12
2e3f4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2e3f8     08 4E 05 F1 | 	add	fp, #8
2e3fc     A7 FA 61 FC | 	wrlong	result1, fp
2e400     04 4E 85 F1 | 	sub	fp, #4
2e404     A7 18 02 FB | 	rdlong	arg04, fp
2e408     0C 17 02 F6 | 	mov	arg03, arg04
2e40c     04 4E 85 F1 | 	sub	fp, #4
2e410     10 18 06 F1 | 	add	arg04, #16
2e414     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e418     BF 18 06 F5 | 	and	arg04, #191
2e41c     10 16 06 F1 | 	add	arg03, #16
2e420     0B 19 42 FC | 	wrbyte	arg04, arg03
2e424                 | LR__4671
2e424                 | LR__4672
2e424                 | LR__4673
2e424                 | ' 					dir = fp->dir_ptr;
2e424                 | ' 					dir[ 11 ] |=  0x20 ;
2e424                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2e424                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2e424                 | ' 					st_dword(dir +  22 , tm);
2e424                 | ' 					st_word(dir +  18 , 0);
2e424                 | ' 					fs->wflag = 1;
2e424                 | ' 					res = sync_fs(fs);
2e424                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2e424                 | ' 				}
2e424                 | ' 			}
2e424                 | ' 		}
2e424                 | ' 	}
2e424                 | ' 
2e424                 | ' 	return res ;
2e424     08 4E 05 F1 | 	add	fp, #8
2e428     A7 FA 01 FB | 	rdlong	result1, fp
2e42c     08 4E 85 F1 | 	sub	fp, #8
2e430                 | LR__4674
2e430     A7 F0 03 F6 | 	mov	ptra, fp
2e434     B2 00 A0 FD | 	call	#popregs_
2e438                 | _fatfs_cc_f_sync_ret
2e438     2D 00 64 FD | 	ret
2e43c                 | 
2e43c                 | _fatfs_cc_f_close
2e43c     01 4A 05 F6 | 	mov	COUNT_, #1
2e440     A8 00 A0 FD | 	call	#pushregs_
2e444     10 F0 07 F1 | 	add	ptra, #16
2e448     04 4E 05 F1 | 	add	fp, #4
2e44c     A7 12 62 FC | 	wrlong	arg01, fp
2e450     04 4E 85 F1 | 	sub	fp, #4
2e454     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2e458     08 4E 05 F1 | 	add	fp, #8
2e45c     A7 FA 61 FC | 	wrlong	result1, fp
2e460     08 4E 85 F1 | 	sub	fp, #8
2e464     00 FA 0D F2 | 	cmp	result1, #0 wz
2e468     38 00 90 5D |  if_ne	jmp	#LR__4680
2e46c     04 4E 05 F1 | 	add	fp, #4
2e470     A7 12 02 FB | 	rdlong	arg01, fp
2e474     08 4E 05 F1 | 	add	fp, #8
2e478     A7 14 02 F6 | 	mov	arg02, fp
2e47c     0C 4E 85 F1 | 	sub	fp, #12
2e480     9C E6 BF FD | 	call	#_fatfs_cc_validate
2e484     08 4E 05 F1 | 	add	fp, #8
2e488     A7 FA 61 FC | 	wrlong	result1, fp
2e48c     08 4E 85 F1 | 	sub	fp, #8
2e490     00 FA 0D F2 | 	cmp	result1, #0 wz
2e494     04 4E 05 A1 |  if_e	add	fp, #4
2e498     A7 26 02 AB |  if_e	rdlong	local01, fp
2e49c     04 4E 85 A1 |  if_e	sub	fp, #4
2e4a0     13 01 68 AC |  if_e	wrlong	#0, local01
2e4a4                 | LR__4680
2e4a4                 | ' 
2e4a4                 | ' 
2e4a4                 | ' 
2e4a4                 | ' 
2e4a4                 | ' 			fp->obj.fs = 0;
2e4a4                 | ' #line 4192 "ff.c"
2e4a4                 | ' 		}
2e4a4                 | ' 	}
2e4a4                 | ' 	return res;
2e4a4     08 4E 05 F1 | 	add	fp, #8
2e4a8     A7 FA 01 FB | 	rdlong	result1, fp
2e4ac     08 4E 85 F1 | 	sub	fp, #8
2e4b0     A7 F0 03 F6 | 	mov	ptra, fp
2e4b4     B2 00 A0 FD | 	call	#popregs_
2e4b8                 | _fatfs_cc_f_close_ret
2e4b8     2D 00 64 FD | 	ret
2e4bc                 | 
2e4bc                 | _fatfs_cc_f_lseek
2e4bc     00 4A 05 F6 | 	mov	COUNT_, #0
2e4c0     A8 00 A0 FD | 	call	#pushregs_
2e4c4     24 F0 07 F1 | 	add	ptra, #36
2e4c8     04 4E 05 F1 | 	add	fp, #4
2e4cc     A7 12 62 FC | 	wrlong	arg01, fp
2e4d0     04 4E 05 F1 | 	add	fp, #4
2e4d4     A7 14 62 FC | 	wrlong	arg02, fp
2e4d8     04 4E 85 F1 | 	sub	fp, #4
2e4dc     A7 12 02 FB | 	rdlong	arg01, fp
2e4e0     0C 4E 05 F1 | 	add	fp, #12
2e4e4     A7 14 02 F6 | 	mov	arg02, fp
2e4e8     10 4E 85 F1 | 	sub	fp, #16
2e4ec     30 E6 BF FD | 	call	#_fatfs_cc_validate
2e4f0     0C 4E 05 F1 | 	add	fp, #12
2e4f4     A7 FA 61 FC | 	wrlong	result1, fp
2e4f8     0C 4E 85 F1 | 	sub	fp, #12
2e4fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e500     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e504     04 4E 05 F1 | 	add	fp, #4
2e508     A7 18 02 FB | 	rdlong	arg04, fp
2e50c     11 18 06 F1 | 	add	arg04, #17
2e510     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e514     08 4E 05 F1 | 	add	fp, #8
2e518     A7 18 62 FC | 	wrlong	arg04, fp
2e51c     0C 4E 85 F1 | 	sub	fp, #12
2e520                 | LR__4690
2e520     0C 4E 05 F1 | 	add	fp, #12
2e524     A7 18 0A FB | 	rdlong	arg04, fp wz
2e528     0C 4E 85 F1 | 	sub	fp, #12
2e52c     0C 4E 05 51 |  if_ne	add	fp, #12
2e530     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2e534     0C 4E 85 51 |  if_ne	sub	fp, #12
2e538     40 06 90 5D |  if_ne	jmp	#LR__4713
2e53c     04 4E 05 F1 | 	add	fp, #4
2e540     A7 18 02 FB | 	rdlong	arg04, fp
2e544     04 4E 05 F1 | 	add	fp, #4
2e548     A7 16 02 FB | 	rdlong	arg03, fp
2e54c     08 4E 85 F1 | 	sub	fp, #8
2e550     0C 18 06 F1 | 	add	arg04, #12
2e554     0C 19 02 FB | 	rdlong	arg04, arg04
2e558     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2e55c     3C 00 90 ED |  if_be	jmp	#LR__4691
2e560     04 4E 05 F1 | 	add	fp, #4
2e564     A7 16 02 FB | 	rdlong	arg03, fp
2e568     04 4E 85 F1 | 	sub	fp, #4
2e56c     10 16 06 F1 | 	add	arg03, #16
2e570     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e574     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2e578     02 16 CE F7 | 	test	arg03, #2 wz
2e57c     1C 00 90 5D |  if_ne	jmp	#LR__4691
2e580     04 4E 05 F1 | 	add	fp, #4
2e584     A7 16 02 FB | 	rdlong	arg03, fp
2e588     0C 16 06 F1 | 	add	arg03, #12
2e58c     0B 17 02 FB | 	rdlong	arg03, arg03
2e590     04 4E 05 F1 | 	add	fp, #4
2e594     A7 16 62 FC | 	wrlong	arg03, fp
2e598     08 4E 85 F1 | 	sub	fp, #8
2e59c                 | LR__4691
2e59c     04 4E 05 F1 | 	add	fp, #4
2e5a0     A7 16 02 FB | 	rdlong	arg03, fp
2e5a4     14 16 06 F1 | 	add	arg03, #20
2e5a8     0B 17 02 FB | 	rdlong	arg03, arg03
2e5ac     1C 4E 05 F1 | 	add	fp, #28
2e5b0     A7 16 62 FC | 	wrlong	arg03, fp
2e5b4     1C 4E 85 F1 | 	sub	fp, #28
2e5b8     A7 16 02 FB | 	rdlong	arg03, fp
2e5bc     18 4E 05 F1 | 	add	fp, #24
2e5c0     A7 00 68 FC | 	wrlong	#0, fp
2e5c4     14 16 06 F1 | 	add	arg03, #20
2e5c8     0B 01 68 FC | 	wrlong	#0, arg03
2e5cc     14 4E 85 F1 | 	sub	fp, #20
2e5d0     A7 16 02 FB | 	rdlong	arg03, fp
2e5d4     08 4E 85 F1 | 	sub	fp, #8
2e5d8     01 16 16 F2 | 	cmp	arg03, #1 wc
2e5dc     E4 03 90 CD |  if_b	jmp	#LR__4707
2e5e0     10 4E 05 F1 | 	add	fp, #16
2e5e4     A7 16 02 FB | 	rdlong	arg03, fp
2e5e8     0A 16 06 F1 | 	add	arg03, #10
2e5ec     0B 19 E2 FA | 	rdword	arg04, arg03
2e5f0     09 18 66 F0 | 	shl	arg04, #9
2e5f4     08 4E 05 F1 | 	add	fp, #8
2e5f8     A7 18 62 FC | 	wrlong	arg04, fp
2e5fc     08 4E 05 F1 | 	add	fp, #8
2e600     A7 18 02 FB | 	rdlong	arg04, fp
2e604     20 4E 85 F1 | 	sub	fp, #32
2e608     01 18 16 F2 | 	cmp	arg04, #1 wc
2e60c     AC 00 90 CD |  if_b	jmp	#LR__4692
2e610     08 4E 05 F1 | 	add	fp, #8
2e614     A7 18 02 FB | 	rdlong	arg04, fp
2e618     01 18 86 F1 | 	sub	arg04, #1
2e61c     10 4E 05 F1 | 	add	fp, #16
2e620     A7 16 02 FB | 	rdlong	arg03, fp
2e624     0B 19 12 FD | 	qdiv	arg04, arg03
2e628     08 4E 05 F1 | 	add	fp, #8
2e62c     A7 FA 01 FB | 	rdlong	result1, fp
2e630     01 FA 85 F1 | 	sub	result1, #1
2e634     18 18 62 FD | 	getqx	arg04
2e638     0B FB 11 FD | 	qdiv	result1, arg03
2e63c     20 4E 85 F1 | 	sub	fp, #32
2e640     18 16 62 FD | 	getqx	arg03
2e644     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2e648     70 00 90 CD |  if_b	jmp	#LR__4692
2e64c     04 4E 05 F1 | 	add	fp, #4
2e650     A7 16 02 FB | 	rdlong	arg03, fp
2e654     1C 4E 05 F1 | 	add	fp, #28
2e658     A7 FA 01 FB | 	rdlong	result1, fp
2e65c     01 FA 85 F1 | 	sub	result1, #1
2e660     08 4E 85 F1 | 	sub	fp, #8
2e664     A7 18 02 FB | 	rdlong	arg04, fp
2e668     01 18 86 F1 | 	sub	arg04, #1
2e66c     0C FB 21 F5 | 	andn	result1, arg04
2e670     14 16 06 F1 | 	add	arg03, #20
2e674     0B FB 61 FC | 	wrlong	result1, arg03
2e678     10 4E 85 F1 | 	sub	fp, #16
2e67c     A7 16 02 FB | 	rdlong	arg03, fp
2e680     04 4E 85 F1 | 	sub	fp, #4
2e684     A7 18 02 FB | 	rdlong	arg04, fp
2e688     14 18 06 F1 | 	add	arg04, #20
2e68c     0C 19 02 FB | 	rdlong	arg04, arg04
2e690     0C 17 82 F1 | 	sub	arg03, arg04
2e694     04 4E 05 F1 | 	add	fp, #4
2e698     A7 16 62 FC | 	wrlong	arg03, fp
2e69c     04 4E 85 F1 | 	sub	fp, #4
2e6a0     A7 16 02 FB | 	rdlong	arg03, fp
2e6a4     18 16 06 F1 | 	add	arg03, #24
2e6a8     0B 17 02 FB | 	rdlong	arg03, arg03
2e6ac     10 4E 05 F1 | 	add	fp, #16
2e6b0     A7 16 62 FC | 	wrlong	arg03, fp
2e6b4     14 4E 85 F1 | 	sub	fp, #20
2e6b8     D0 00 90 FD | 	jmp	#LR__4696
2e6bc                 | LR__4692
2e6bc     04 4E 05 F1 | 	add	fp, #4
2e6c0     A7 16 02 FB | 	rdlong	arg03, fp
2e6c4     08 16 06 F1 | 	add	arg03, #8
2e6c8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2e6cc     10 4E 05 F1 | 	add	fp, #16
2e6d0     A7 16 62 FC | 	wrlong	arg03, fp
2e6d4     14 4E 85 F1 | 	sub	fp, #20
2e6d8     94 00 90 5D |  if_ne	jmp	#LR__4695
2e6dc     04 4E 05 F1 | 	add	fp, #4
2e6e0     A7 12 02 FB | 	rdlong	arg01, fp
2e6e4     04 4E 85 F1 | 	sub	fp, #4
2e6e8     00 14 06 F6 | 	mov	arg02, #0
2e6ec     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2e6f0     14 4E 05 F1 | 	add	fp, #20
2e6f4     A7 FA 61 FC | 	wrlong	result1, fp
2e6f8     14 4E 85 F1 | 	sub	fp, #20
2e6fc     01 FA 0D F2 | 	cmp	result1, #1 wz
2e700     1C 00 90 5D |  if_ne	jmp	#LR__4693
2e704     04 4E 05 F1 | 	add	fp, #4
2e708     A7 16 02 FB | 	rdlong	arg03, fp
2e70c     04 4E 85 F1 | 	sub	fp, #4
2e710     11 16 06 F1 | 	add	arg03, #17
2e714     0B 05 48 FC | 	wrbyte	#2, arg03
2e718     02 FA 05 F6 | 	mov	result1, #2
2e71c     5C 04 90 FD | 	jmp	#LR__4713
2e720                 | LR__4693
2e720     14 4E 05 F1 | 	add	fp, #20
2e724     A7 FA 01 FB | 	rdlong	result1, fp
2e728     14 4E 85 F1 | 	sub	fp, #20
2e72c     FF FF 7F FF 
2e730     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2e734     1C 00 90 5D |  if_ne	jmp	#LR__4694
2e738     04 4E 05 F1 | 	add	fp, #4
2e73c     A7 16 02 FB | 	rdlong	arg03, fp
2e740     04 4E 85 F1 | 	sub	fp, #4
2e744     11 16 06 F1 | 	add	arg03, #17
2e748     0B 03 48 FC | 	wrbyte	#1, arg03
2e74c     01 FA 05 F6 | 	mov	result1, #1
2e750     28 04 90 FD | 	jmp	#LR__4713
2e754                 | LR__4694
2e754     04 4E 05 F1 | 	add	fp, #4
2e758     A7 16 02 FB | 	rdlong	arg03, fp
2e75c     10 4E 05 F1 | 	add	fp, #16
2e760     A7 18 02 FB | 	rdlong	arg04, fp
2e764     14 4E 85 F1 | 	sub	fp, #20
2e768     08 16 06 F1 | 	add	arg03, #8
2e76c     0B 19 62 FC | 	wrlong	arg04, arg03
2e770                 | LR__4695
2e770     04 4E 05 F1 | 	add	fp, #4
2e774     A7 16 02 FB | 	rdlong	arg03, fp
2e778     10 4E 05 F1 | 	add	fp, #16
2e77c     A7 18 02 FB | 	rdlong	arg04, fp
2e780     14 4E 85 F1 | 	sub	fp, #20
2e784     18 16 06 F1 | 	add	arg03, #24
2e788     0B 19 62 FC | 	wrlong	arg04, arg03
2e78c                 | LR__4696
2e78c     14 4E 05 F1 | 	add	fp, #20
2e790     A7 16 0A FB | 	rdlong	arg03, fp wz
2e794     14 4E 85 F1 | 	sub	fp, #20
2e798     28 02 90 AD |  if_e	jmp	#LR__4706
2e79c                 | ' 				while (ofs > bcs) {
2e79c                 | LR__4697
2e79c     08 4E 05 F1 | 	add	fp, #8
2e7a0     A7 18 02 FB | 	rdlong	arg04, fp
2e7a4     10 4E 05 F1 | 	add	fp, #16
2e7a8     A7 16 02 FB | 	rdlong	arg03, fp
2e7ac     18 4E 85 F1 | 	sub	fp, #24
2e7b0     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2e7b4     68 01 90 ED |  if_be	jmp	#LR__4703
2e7b8     08 4E 05 F1 | 	add	fp, #8
2e7bc     A7 18 02 FB | 	rdlong	arg04, fp
2e7c0     10 4E 05 F1 | 	add	fp, #16
2e7c4     A7 16 02 FB | 	rdlong	arg03, fp
2e7c8     0B 19 82 F1 | 	sub	arg04, arg03
2e7cc     10 4E 85 F1 | 	sub	fp, #16
2e7d0     A7 18 62 FC | 	wrlong	arg04, fp
2e7d4     04 4E 85 F1 | 	sub	fp, #4
2e7d8     A7 18 02 FB | 	rdlong	arg04, fp
2e7dc     0C FB 01 F6 | 	mov	result1, arg04
2e7e0     14 18 06 F1 | 	add	arg04, #20
2e7e4     0C 19 02 FB | 	rdlong	arg04, arg04
2e7e8     14 4E 05 F1 | 	add	fp, #20
2e7ec     A7 16 02 FB | 	rdlong	arg03, fp
2e7f0     0B 19 02 F1 | 	add	arg04, arg03
2e7f4     14 FA 05 F1 | 	add	result1, #20
2e7f8     FD 18 62 FC | 	wrlong	arg04, result1
2e7fc     14 4E 85 F1 | 	sub	fp, #20
2e800     A7 16 02 FB | 	rdlong	arg03, fp
2e804     04 4E 85 F1 | 	sub	fp, #4
2e808     10 16 06 F1 | 	add	arg03, #16
2e80c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e810     02 16 CE F7 | 	test	arg03, #2 wz
2e814     3C 00 90 AD |  if_e	jmp	#LR__4698
2e818     04 4E 05 F1 | 	add	fp, #4
2e81c     A7 12 02 FB | 	rdlong	arg01, fp
2e820     10 4E 05 F1 | 	add	fp, #16
2e824     A7 14 02 FB | 	rdlong	arg02, fp
2e828     14 4E 85 F1 | 	sub	fp, #20
2e82c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2e830     14 4E 05 F1 | 	add	fp, #20
2e834     A7 FA 61 FC | 	wrlong	result1, fp
2e838     00 FA 4D F2 | 	cmps	result1, #0 wz
2e83c     14 4E 85 F1 | 	sub	fp, #20
2e840     08 4E 05 A1 |  if_e	add	fp, #8
2e844     A7 00 68 AC |  if_e	wrlong	#0, fp
2e848     08 4E 85 A1 |  if_e	sub	fp, #8
2e84c                 | ' 							ofs = 0; break;
2e84c     D0 00 90 AD |  if_e	jmp	#LR__4703
2e850     24 00 90 FD | 	jmp	#LR__4699
2e854                 | LR__4698
2e854     04 4E 05 F1 | 	add	fp, #4
2e858     A7 12 02 FB | 	rdlong	arg01, fp
2e85c     10 4E 05 F1 | 	add	fp, #16
2e860     A7 14 02 FB | 	rdlong	arg02, fp
2e864     14 4E 85 F1 | 	sub	fp, #20
2e868     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2e86c     14 4E 05 F1 | 	add	fp, #20
2e870     A7 FA 61 FC | 	wrlong	result1, fp
2e874     14 4E 85 F1 | 	sub	fp, #20
2e878                 | LR__4699
2e878     14 4E 05 F1 | 	add	fp, #20
2e87c     A7 16 02 FB | 	rdlong	arg03, fp
2e880     14 4E 85 F1 | 	sub	fp, #20
2e884     FF FF 7F FF 
2e888     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2e88c     1C 00 90 5D |  if_ne	jmp	#LR__4700
2e890     04 4E 05 F1 | 	add	fp, #4
2e894     A7 16 02 FB | 	rdlong	arg03, fp
2e898     04 4E 85 F1 | 	sub	fp, #4
2e89c     11 16 06 F1 | 	add	arg03, #17
2e8a0     0B 03 48 FC | 	wrbyte	#1, arg03
2e8a4     01 FA 05 F6 | 	mov	result1, #1
2e8a8     D0 02 90 FD | 	jmp	#LR__4713
2e8ac                 | LR__4700
2e8ac     14 4E 05 F1 | 	add	fp, #20
2e8b0     A7 16 02 FB | 	rdlong	arg03, fp
2e8b4     14 4E 85 F1 | 	sub	fp, #20
2e8b8     02 16 16 F2 | 	cmp	arg03, #2 wc
2e8bc     24 00 90 CD |  if_b	jmp	#LR__4701
2e8c0     10 4E 05 F1 | 	add	fp, #16
2e8c4     A7 18 02 FB | 	rdlong	arg04, fp
2e8c8     04 4E 05 F1 | 	add	fp, #4
2e8cc     A7 16 02 FB | 	rdlong	arg03, fp
2e8d0     14 4E 85 F1 | 	sub	fp, #20
2e8d4     18 18 06 F1 | 	add	arg04, #24
2e8d8     0C 19 02 FB | 	rdlong	arg04, arg04
2e8dc     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2e8e0     1C 00 90 CD |  if_b	jmp	#LR__4702
2e8e4                 | LR__4701
2e8e4     04 4E 05 F1 | 	add	fp, #4
2e8e8     A7 16 02 FB | 	rdlong	arg03, fp
2e8ec     04 4E 85 F1 | 	sub	fp, #4
2e8f0     11 16 06 F1 | 	add	arg03, #17
2e8f4     0B 05 48 FC | 	wrbyte	#2, arg03
2e8f8     02 FA 05 F6 | 	mov	result1, #2
2e8fc     7C 02 90 FD | 	jmp	#LR__4713
2e900                 | LR__4702
2e900     04 4E 05 F1 | 	add	fp, #4
2e904     A7 18 02 FB | 	rdlong	arg04, fp
2e908     10 4E 05 F1 | 	add	fp, #16
2e90c     A7 16 02 FB | 	rdlong	arg03, fp
2e910     14 4E 85 F1 | 	sub	fp, #20
2e914     18 18 06 F1 | 	add	arg04, #24
2e918     0C 17 62 FC | 	wrlong	arg03, arg04
2e91c     7C FE 9F FD | 	jmp	#LR__4697
2e920                 | LR__4703
2e920     04 4E 05 F1 | 	add	fp, #4
2e924     A7 16 02 FB | 	rdlong	arg03, fp
2e928     0B 13 02 F6 | 	mov	arg01, arg03
2e92c     14 16 06 F1 | 	add	arg03, #20
2e930     0B 15 02 FB | 	rdlong	arg02, arg03
2e934     04 4E 05 F1 | 	add	fp, #4
2e938     A7 16 02 FB | 	rdlong	arg03, fp
2e93c     0B 15 02 F1 | 	add	arg02, arg03
2e940     14 12 06 F1 | 	add	arg01, #20
2e944     09 15 62 FC | 	wrlong	arg02, arg01
2e948     A7 16 02 FB | 	rdlong	arg03, fp
2e94c     08 4E 85 F1 | 	sub	fp, #8
2e950     FF 17 CE F7 | 	test	arg03, #511 wz
2e954     6C 00 90 AD |  if_e	jmp	#LR__4705
2e958     10 4E 05 F1 | 	add	fp, #16
2e95c     A7 12 02 FB | 	rdlong	arg01, fp
2e960     04 4E 05 F1 | 	add	fp, #4
2e964     A7 14 02 FB | 	rdlong	arg02, fp
2e968     14 4E 85 F1 | 	sub	fp, #20
2e96c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2e970     1C 4E 05 F1 | 	add	fp, #28
2e974     A7 FA 61 FC | 	wrlong	result1, fp
2e978     1C 4E 85 F1 | 	sub	fp, #28
2e97c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e980     1C 00 90 5D |  if_ne	jmp	#LR__4704
2e984     04 4E 05 F1 | 	add	fp, #4
2e988     A7 16 02 FB | 	rdlong	arg03, fp
2e98c     04 4E 85 F1 | 	sub	fp, #4
2e990     11 16 06 F1 | 	add	arg03, #17
2e994     0B 05 48 FC | 	wrbyte	#2, arg03
2e998     02 FA 05 F6 | 	mov	result1, #2
2e99c     DC 01 90 FD | 	jmp	#LR__4713
2e9a0                 | LR__4704
2e9a0     1C 4E 05 F1 | 	add	fp, #28
2e9a4     A7 18 02 FB | 	rdlong	arg04, fp
2e9a8     14 4E 85 F1 | 	sub	fp, #20
2e9ac     A7 16 02 FB | 	rdlong	arg03, fp
2e9b0     09 16 46 F0 | 	shr	arg03, #9
2e9b4     0B 19 02 F1 | 	add	arg04, arg03
2e9b8     14 4E 05 F1 | 	add	fp, #20
2e9bc     A7 18 62 FC | 	wrlong	arg04, fp
2e9c0     1C 4E 85 F1 | 	sub	fp, #28
2e9c4                 | LR__4705
2e9c4                 | LR__4706
2e9c4                 | LR__4707
2e9c4     04 4E 05 F1 | 	add	fp, #4
2e9c8     A7 18 02 FB | 	rdlong	arg04, fp
2e9cc     0C 17 02 F6 | 	mov	arg03, arg04
2e9d0     04 4E 85 F1 | 	sub	fp, #4
2e9d4     14 16 06 F1 | 	add	arg03, #20
2e9d8     0B 17 02 FB | 	rdlong	arg03, arg03
2e9dc     0C 18 06 F1 | 	add	arg04, #12
2e9e0     0C 19 02 FB | 	rdlong	arg04, arg04
2e9e4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2e9e8     3C 00 90 ED |  if_be	jmp	#LR__4708
2e9ec     04 4E 05 F1 | 	add	fp, #4
2e9f0     A7 18 02 FB | 	rdlong	arg04, fp
2e9f4     0C 17 02 F6 | 	mov	arg03, arg04
2e9f8     14 18 06 F1 | 	add	arg04, #20
2e9fc     0C 19 02 FB | 	rdlong	arg04, arg04
2ea00     0C 16 06 F1 | 	add	arg03, #12
2ea04     0B 19 62 FC | 	wrlong	arg04, arg03
2ea08     A7 18 02 FB | 	rdlong	arg04, fp
2ea0c     0C 17 02 F6 | 	mov	arg03, arg04
2ea10     04 4E 85 F1 | 	sub	fp, #4
2ea14     10 18 06 F1 | 	add	arg04, #16
2ea18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ea1c     40 18 46 F5 | 	or	arg04, #64
2ea20     10 16 06 F1 | 	add	arg03, #16
2ea24     0B 19 42 FC | 	wrbyte	arg04, arg03
2ea28                 | LR__4708
2ea28     04 4E 05 F1 | 	add	fp, #4
2ea2c     A7 16 02 FB | 	rdlong	arg03, fp
2ea30     04 4E 85 F1 | 	sub	fp, #4
2ea34     14 16 06 F1 | 	add	arg03, #20
2ea38     0B 17 02 FB | 	rdlong	arg03, arg03
2ea3c     FF 17 CE F7 | 	test	arg03, #511 wz
2ea40     2C 01 90 AD |  if_e	jmp	#LR__4712
2ea44     04 4E 05 F1 | 	add	fp, #4
2ea48     A7 18 02 FB | 	rdlong	arg04, fp
2ea4c     18 4E 05 F1 | 	add	fp, #24
2ea50     A7 16 02 FB | 	rdlong	arg03, fp
2ea54     1C 4E 85 F1 | 	sub	fp, #28
2ea58     1C 18 06 F1 | 	add	arg04, #28
2ea5c     0C 19 02 FB | 	rdlong	arg04, arg04
2ea60     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2ea64     08 01 90 AD |  if_e	jmp	#LR__4712
2ea68     04 4E 05 F1 | 	add	fp, #4
2ea6c     A7 16 02 FB | 	rdlong	arg03, fp
2ea70     04 4E 85 F1 | 	sub	fp, #4
2ea74     10 16 06 F1 | 	add	arg03, #16
2ea78     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ea7c     80 16 CE F7 | 	test	arg03, #128 wz
2ea80     7C 00 90 AD |  if_e	jmp	#LR__4710
2ea84     10 4E 05 F1 | 	add	fp, #16
2ea88     A7 16 02 FB | 	rdlong	arg03, fp
2ea8c     01 16 06 F1 | 	add	arg03, #1
2ea90     0B 13 C2 FA | 	rdbyte	arg01, arg03
2ea94     0C 4E 85 F1 | 	sub	fp, #12
2ea98     A7 16 02 FB | 	rdlong	arg03, fp
2ea9c     0B 15 02 F6 | 	mov	arg02, arg03
2eaa0     28 14 06 F1 | 	add	arg02, #40
2eaa4     04 4E 85 F1 | 	sub	fp, #4
2eaa8     1C 16 06 F1 | 	add	arg03, #28
2eaac     0B 17 02 FB | 	rdlong	arg03, arg03
2eab0     01 18 06 F6 | 	mov	arg04, #1
2eab4     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2eab8     00 FA 0D F2 | 	cmp	result1, #0 wz
2eabc     1C 00 90 AD |  if_e	jmp	#LR__4709
2eac0     04 4E 05 F1 | 	add	fp, #4
2eac4     A7 16 02 FB | 	rdlong	arg03, fp
2eac8     04 4E 85 F1 | 	sub	fp, #4
2eacc     11 16 06 F1 | 	add	arg03, #17
2ead0     0B 03 48 FC | 	wrbyte	#1, arg03
2ead4     01 FA 05 F6 | 	mov	result1, #1
2ead8     A0 00 90 FD | 	jmp	#LR__4713
2eadc                 | LR__4709
2eadc     04 4E 05 F1 | 	add	fp, #4
2eae0     A7 18 02 FB | 	rdlong	arg04, fp
2eae4     0C 17 02 F6 | 	mov	arg03, arg04
2eae8     04 4E 85 F1 | 	sub	fp, #4
2eaec     10 18 06 F1 | 	add	arg04, #16
2eaf0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2eaf4     7F 18 06 F5 | 	and	arg04, #127
2eaf8     10 16 06 F1 | 	add	arg03, #16
2eafc     0B 19 42 FC | 	wrbyte	arg04, arg03
2eb00                 | LR__4710
2eb00     10 4E 05 F1 | 	add	fp, #16
2eb04     A7 16 02 FB | 	rdlong	arg03, fp
2eb08     01 16 06 F1 | 	add	arg03, #1
2eb0c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2eb10     0C 4E 85 F1 | 	sub	fp, #12
2eb14     A7 14 02 FB | 	rdlong	arg02, fp
2eb18     28 14 06 F1 | 	add	arg02, #40
2eb1c     18 4E 05 F1 | 	add	fp, #24
2eb20     A7 16 02 FB | 	rdlong	arg03, fp
2eb24     1C 4E 85 F1 | 	sub	fp, #28
2eb28     01 18 06 F6 | 	mov	arg04, #1
2eb2c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2eb30     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb34     1C 00 90 AD |  if_e	jmp	#LR__4711
2eb38     04 4E 05 F1 | 	add	fp, #4
2eb3c     A7 16 02 FB | 	rdlong	arg03, fp
2eb40     04 4E 85 F1 | 	sub	fp, #4
2eb44     11 16 06 F1 | 	add	arg03, #17
2eb48     0B 03 48 FC | 	wrbyte	#1, arg03
2eb4c     01 FA 05 F6 | 	mov	result1, #1
2eb50     28 00 90 FD | 	jmp	#LR__4713
2eb54                 | LR__4711
2eb54     04 4E 05 F1 | 	add	fp, #4
2eb58     A7 18 02 FB | 	rdlong	arg04, fp
2eb5c     18 4E 05 F1 | 	add	fp, #24
2eb60     A7 16 02 FB | 	rdlong	arg03, fp
2eb64     1C 4E 85 F1 | 	sub	fp, #28
2eb68     1C 18 06 F1 | 	add	arg04, #28
2eb6c     0C 17 62 FC | 	wrlong	arg03, arg04
2eb70                 | LR__4712
2eb70                 | ' 
2eb70                 | ' 			fp->sect = nsect;
2eb70                 | ' 		}
2eb70                 | ' 	}
2eb70                 | ' 
2eb70                 | ' 	return res ;
2eb70     0C 4E 05 F1 | 	add	fp, #12
2eb74     A7 FA 01 FB | 	rdlong	result1, fp
2eb78     0C 4E 85 F1 | 	sub	fp, #12
2eb7c                 | LR__4713
2eb7c     A7 F0 03 F6 | 	mov	ptra, fp
2eb80     B2 00 A0 FD | 	call	#popregs_
2eb84                 | _fatfs_cc_f_lseek_ret
2eb84     2D 00 64 FD | 	ret
2eb88                 | 
2eb88                 | _fatfs_cc_f_opendir
2eb88     01 4A 05 F6 | 	mov	COUNT_, #1
2eb8c     A8 00 A0 FD | 	call	#pushregs_
2eb90     14 F0 07 F1 | 	add	ptra, #20
2eb94     04 4E 05 F1 | 	add	fp, #4
2eb98     A7 12 62 FC | 	wrlong	arg01, fp
2eb9c     04 4E 05 F1 | 	add	fp, #4
2eba0     A7 14 62 FC | 	wrlong	arg02, fp
2eba4     04 4E 85 F1 | 	sub	fp, #4
2eba8     A7 16 0A FB | 	rdlong	arg03, fp wz
2ebac     04 4E 85 F1 | 	sub	fp, #4
2ebb0     09 FA 05 A6 |  if_e	mov	result1, #9
2ebb4     78 01 90 AD |  if_e	jmp	#LR__4726
2ebb8     08 4E 05 F1 | 	add	fp, #8
2ebbc     A7 12 02 F6 | 	mov	arg01, fp
2ebc0     08 4E 05 F1 | 	add	fp, #8
2ebc4     A7 14 02 F6 | 	mov	arg02, fp
2ebc8     10 4E 85 F1 | 	sub	fp, #16
2ebcc     00 16 06 F6 | 	mov	arg03, #0
2ebd0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2ebd4     0C 4E 05 F1 | 	add	fp, #12
2ebd8     A7 FA 61 FC | 	wrlong	result1, fp
2ebdc     0C 4E 85 F1 | 	sub	fp, #12
2ebe0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebe4     20 01 90 5D |  if_ne	jmp	#LR__4725
2ebe8     04 4E 05 F1 | 	add	fp, #4
2ebec     A7 16 02 FB | 	rdlong	arg03, fp
2ebf0     0C 4E 05 F1 | 	add	fp, #12
2ebf4     A7 FA 01 FB | 	rdlong	result1, fp
2ebf8     0B FB 61 FC | 	wrlong	result1, arg03
2ebfc     0C 4E 85 F1 | 	sub	fp, #12
2ec00     A7 12 02 FB | 	rdlong	arg01, fp
2ec04     04 4E 05 F1 | 	add	fp, #4
2ec08     A7 14 02 FB | 	rdlong	arg02, fp
2ec0c     08 4E 85 F1 | 	sub	fp, #8
2ec10     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2ec14     0C 4E 05 F1 | 	add	fp, #12
2ec18     A7 FA 61 FC | 	wrlong	result1, fp
2ec1c     0C 4E 85 F1 | 	sub	fp, #12
2ec20     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec24     C4 00 90 5D |  if_ne	jmp	#LR__4724
2ec28     04 4E 05 F1 | 	add	fp, #4
2ec2c     A7 16 02 FB | 	rdlong	arg03, fp
2ec30     04 4E 85 F1 | 	sub	fp, #4
2ec34     2B 16 06 F1 | 	add	arg03, #43
2ec38     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ec3c     80 16 CE F7 | 	test	arg03, #128 wz
2ec40     58 00 90 5D |  if_ne	jmp	#LR__4722
2ec44     04 4E 05 F1 | 	add	fp, #4
2ec48     A7 16 02 FB | 	rdlong	arg03, fp
2ec4c     04 4E 85 F1 | 	sub	fp, #4
2ec50     06 16 06 F1 | 	add	arg03, #6
2ec54     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ec58     10 16 CE F7 | 	test	arg03, #16 wz
2ec5c     30 00 90 AD |  if_e	jmp	#LR__4720
2ec60     04 4E 05 F1 | 	add	fp, #4
2ec64     A7 16 02 FB | 	rdlong	arg03, fp
2ec68     0B 27 02 F6 | 	mov	local01, arg03
2ec6c     0C 4E 05 F1 | 	add	fp, #12
2ec70     A7 12 02 FB | 	rdlong	arg01, fp
2ec74     10 4E 85 F1 | 	sub	fp, #16
2ec78     1C 16 06 F1 | 	add	arg03, #28
2ec7c     0B 15 02 FB | 	rdlong	arg02, arg03
2ec80     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2ec84     08 26 06 F1 | 	add	local01, #8
2ec88     13 FB 61 FC | 	wrlong	result1, local01
2ec8c     0C 00 90 FD | 	jmp	#LR__4721
2ec90                 | LR__4720
2ec90     0C 4E 05 F1 | 	add	fp, #12
2ec94     A7 0A 68 FC | 	wrlong	#5, fp
2ec98     0C 4E 85 F1 | 	sub	fp, #12
2ec9c                 | LR__4721
2ec9c                 | LR__4722
2ec9c     0C 4E 05 F1 | 	add	fp, #12
2eca0     A7 26 0A FB | 	rdlong	local01, fp wz
2eca4     0C 4E 85 F1 | 	sub	fp, #12
2eca8     40 00 90 5D |  if_ne	jmp	#LR__4723
2ecac     04 4E 05 F1 | 	add	fp, #4
2ecb0     A7 26 02 FB | 	rdlong	local01, fp
2ecb4     0C 4E 05 F1 | 	add	fp, #12
2ecb8     A7 16 02 FB | 	rdlong	arg03, fp
2ecbc     06 16 06 F1 | 	add	arg03, #6
2ecc0     0B 17 E2 FA | 	rdword	arg03, arg03
2ecc4     04 26 06 F1 | 	add	local01, #4
2ecc8     13 17 52 FC | 	wrword	arg03, local01
2eccc     0C 4E 85 F1 | 	sub	fp, #12
2ecd0     A7 12 02 FB | 	rdlong	arg01, fp
2ecd4     04 4E 85 F1 | 	sub	fp, #4
2ecd8     00 14 06 F6 | 	mov	arg02, #0
2ecdc     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2ece0     0C 4E 05 F1 | 	add	fp, #12
2ece4     A7 FA 61 FC | 	wrlong	result1, fp
2ece8     0C 4E 85 F1 | 	sub	fp, #12
2ecec                 | LR__4723
2ecec                 | LR__4724
2ecec     0C 4E 05 F1 | 	add	fp, #12
2ecf0     A7 26 02 FB | 	rdlong	local01, fp
2ecf4     0C 4E 85 F1 | 	sub	fp, #12
2ecf8     04 26 0E F2 | 	cmp	local01, #4 wz
2ecfc     0C 4E 05 A1 |  if_e	add	fp, #12
2ed00     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ed04     0C 4E 85 A1 |  if_e	sub	fp, #12
2ed08                 | LR__4725
2ed08     0C 4E 05 F1 | 	add	fp, #12
2ed0c     A7 26 0A FB | 	rdlong	local01, fp wz
2ed10     0C 4E 85 F1 | 	sub	fp, #12
2ed14     04 4E 05 51 |  if_ne	add	fp, #4
2ed18     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ed1c     04 4E 85 51 |  if_ne	sub	fp, #4
2ed20     13 01 68 5C |  if_ne	wrlong	#0, local01
2ed24                 | ' 
2ed24                 | ' 	return res ;
2ed24     0C 4E 05 F1 | 	add	fp, #12
2ed28     A7 FA 01 FB | 	rdlong	result1, fp
2ed2c     0C 4E 85 F1 | 	sub	fp, #12
2ed30                 | LR__4726
2ed30     A7 F0 03 F6 | 	mov	ptra, fp
2ed34     B2 00 A0 FD | 	call	#popregs_
2ed38                 | _fatfs_cc_f_opendir_ret
2ed38     2D 00 64 FD | 	ret
2ed3c                 | 
2ed3c                 | _fatfs_cc_f_closedir
2ed3c     00 4A 05 F6 | 	mov	COUNT_, #0
2ed40     A8 00 A0 FD | 	call	#pushregs_
2ed44     10 F0 07 F1 | 	add	ptra, #16
2ed48     04 4E 05 F1 | 	add	fp, #4
2ed4c     A7 12 62 FC | 	wrlong	arg01, fp
2ed50     08 4E 05 F1 | 	add	fp, #8
2ed54     A7 14 02 F6 | 	mov	arg02, fp
2ed58     0C 4E 85 F1 | 	sub	fp, #12
2ed5c     C0 DD BF FD | 	call	#_fatfs_cc_validate
2ed60     08 4E 05 F1 | 	add	fp, #8
2ed64     A7 FA 61 FC | 	wrlong	result1, fp
2ed68     08 4E 85 F1 | 	sub	fp, #8
2ed6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed70     04 4E 05 A1 |  if_e	add	fp, #4
2ed74     A7 FA 01 AB |  if_e	rdlong	result1, fp
2ed78     04 4E 85 A1 |  if_e	sub	fp, #4
2ed7c     FD 00 68 AC |  if_e	wrlong	#0, result1
2ed80                 | ' 
2ed80                 | ' 
2ed80                 | ' 
2ed80                 | ' 
2ed80                 | ' 		dp->obj.fs = 0;
2ed80                 | ' #line 4633 "ff.c"
2ed80                 | ' 	}
2ed80                 | ' 	return res;
2ed80     08 4E 05 F1 | 	add	fp, #8
2ed84     A7 FA 01 FB | 	rdlong	result1, fp
2ed88     08 4E 85 F1 | 	sub	fp, #8
2ed8c     A7 F0 03 F6 | 	mov	ptra, fp
2ed90     B2 00 A0 FD | 	call	#popregs_
2ed94                 | _fatfs_cc_f_closedir_ret
2ed94     2D 00 64 FD | 	ret
2ed98                 | 
2ed98                 | _fatfs_cc_f_readdir
2ed98     00 4A 05 F6 | 	mov	COUNT_, #0
2ed9c     A8 00 A0 FD | 	call	#pushregs_
2eda0     14 F0 07 F1 | 	add	ptra, #20
2eda4     04 4E 05 F1 | 	add	fp, #4
2eda8     A7 12 62 FC | 	wrlong	arg01, fp
2edac     04 4E 05 F1 | 	add	fp, #4
2edb0     A7 14 62 FC | 	wrlong	arg02, fp
2edb4     04 4E 85 F1 | 	sub	fp, #4
2edb8     A7 12 02 FB | 	rdlong	arg01, fp
2edbc     0C 4E 05 F1 | 	add	fp, #12
2edc0     A7 14 02 F6 | 	mov	arg02, fp
2edc4     10 4E 85 F1 | 	sub	fp, #16
2edc8     54 DD BF FD | 	call	#_fatfs_cc_validate
2edcc     0C 4E 05 F1 | 	add	fp, #12
2edd0     A7 FA 61 FC | 	wrlong	result1, fp
2edd4     0C 4E 85 F1 | 	sub	fp, #12
2edd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2eddc     BC 00 90 5D |  if_ne	jmp	#LR__4733
2ede0     08 4E 05 F1 | 	add	fp, #8
2ede4     A7 FA 09 FB | 	rdlong	result1, fp wz
2ede8     08 4E 85 F1 | 	sub	fp, #8
2edec     24 00 90 5D |  if_ne	jmp	#LR__4730
2edf0     04 4E 05 F1 | 	add	fp, #4
2edf4     A7 12 02 FB | 	rdlong	arg01, fp
2edf8     04 4E 85 F1 | 	sub	fp, #4
2edfc     00 14 06 F6 | 	mov	arg02, #0
2ee00     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2ee04     0C 4E 05 F1 | 	add	fp, #12
2ee08     A7 FA 61 FC | 	wrlong	result1, fp
2ee0c     0C 4E 85 F1 | 	sub	fp, #12
2ee10     88 00 90 FD | 	jmp	#LR__4732
2ee14                 | LR__4730
2ee14     04 4E 05 F1 | 	add	fp, #4
2ee18     A7 12 02 FB | 	rdlong	arg01, fp
2ee1c     04 4E 85 F1 | 	sub	fp, #4
2ee20     00 14 06 F6 | 	mov	arg02, #0
2ee24     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2ee28     0C 4E 05 F1 | 	add	fp, #12
2ee2c     A7 FA 61 FC | 	wrlong	result1, fp
2ee30     0C 4E 85 F1 | 	sub	fp, #12
2ee34     04 FA 0D F2 | 	cmp	result1, #4 wz
2ee38     0C 4E 05 A1 |  if_e	add	fp, #12
2ee3c     A7 00 68 AC |  if_e	wrlong	#0, fp
2ee40     0C 4E 85 A1 |  if_e	sub	fp, #12
2ee44     0C 4E 05 F1 | 	add	fp, #12
2ee48     A7 FA 09 FB | 	rdlong	result1, fp wz
2ee4c     0C 4E 85 F1 | 	sub	fp, #12
2ee50     48 00 90 5D |  if_ne	jmp	#LR__4731
2ee54     04 4E 05 F1 | 	add	fp, #4
2ee58     A7 12 02 FB | 	rdlong	arg01, fp
2ee5c     04 4E 05 F1 | 	add	fp, #4
2ee60     A7 14 02 FB | 	rdlong	arg02, fp
2ee64     08 4E 85 F1 | 	sub	fp, #8
2ee68     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2ee6c     04 4E 05 F1 | 	add	fp, #4
2ee70     A7 12 02 FB | 	rdlong	arg01, fp
2ee74     04 4E 85 F1 | 	sub	fp, #4
2ee78     00 14 06 F6 | 	mov	arg02, #0
2ee7c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2ee80     0C 4E 05 F1 | 	add	fp, #12
2ee84     A7 FA 61 FC | 	wrlong	result1, fp
2ee88     0C 4E 85 F1 | 	sub	fp, #12
2ee8c     04 FA 0D F2 | 	cmp	result1, #4 wz
2ee90     0C 4E 05 A1 |  if_e	add	fp, #12
2ee94     A7 00 68 AC |  if_e	wrlong	#0, fp
2ee98     0C 4E 85 A1 |  if_e	sub	fp, #12
2ee9c                 | LR__4731
2ee9c                 | LR__4732
2ee9c                 | LR__4733
2ee9c                 | ' 			}
2ee9c                 | ' 			;
2ee9c                 | ' 		}
2ee9c                 | ' 	}
2ee9c                 | ' 	return res ;
2ee9c     0C 4E 05 F1 | 	add	fp, #12
2eea0     A7 FA 01 FB | 	rdlong	result1, fp
2eea4     0C 4E 85 F1 | 	sub	fp, #12
2eea8     A7 F0 03 F6 | 	mov	ptra, fp
2eeac     B2 00 A0 FD | 	call	#popregs_
2eeb0                 | _fatfs_cc_f_readdir_ret
2eeb0     2D 00 64 FD | 	ret
2eeb4                 | 
2eeb4                 | _fatfs_cc_f_stat
2eeb4     00 4A 05 F6 | 	mov	COUNT_, #0
2eeb8     A8 00 A0 FD | 	call	#pushregs_
2eebc     40 F0 07 F1 | 	add	ptra, #64
2eec0     04 4E 05 F1 | 	add	fp, #4
2eec4     A7 12 62 FC | 	wrlong	arg01, fp
2eec8     04 4E 05 F1 | 	add	fp, #4
2eecc     A7 14 62 FC | 	wrlong	arg02, fp
2eed0     04 4E 85 F1 | 	sub	fp, #4
2eed4     A7 12 02 F6 | 	mov	arg01, fp
2eed8     0C 4E 05 F1 | 	add	fp, #12
2eedc     A7 14 02 F6 | 	mov	arg02, fp
2eee0     10 4E 85 F1 | 	sub	fp, #16
2eee4     00 16 06 F6 | 	mov	arg03, #0
2eee8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2eeec     0C 4E 05 F1 | 	add	fp, #12
2eef0     A7 FA 61 FC | 	wrlong	result1, fp
2eef4     0C 4E 85 F1 | 	sub	fp, #12
2eef8     00 FA 0D F2 | 	cmp	result1, #0 wz
2eefc     74 00 90 5D |  if_ne	jmp	#LR__4743
2ef00     10 4E 05 F1 | 	add	fp, #16
2ef04     A7 12 02 F6 | 	mov	arg01, fp
2ef08     0C 4E 85 F1 | 	sub	fp, #12
2ef0c     A7 14 02 FB | 	rdlong	arg02, fp
2ef10     04 4E 85 F1 | 	sub	fp, #4
2ef14     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2ef18     0C 4E 05 F1 | 	add	fp, #12
2ef1c     A7 FA 61 FC | 	wrlong	result1, fp
2ef20     0C 4E 85 F1 | 	sub	fp, #12
2ef24     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef28     48 00 90 5D |  if_ne	jmp	#LR__4742
2ef2c     3B 4E 05 F1 | 	add	fp, #59
2ef30     A7 FA C1 FA | 	rdbyte	result1, fp
2ef34     3B 4E 85 F1 | 	sub	fp, #59
2ef38     80 FA CD F7 | 	test	result1, #128 wz
2ef3c     0C 4E 05 51 |  if_ne	add	fp, #12
2ef40     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ef44     0C 4E 85 51 |  if_ne	sub	fp, #12
2ef48     28 00 90 5D |  if_ne	jmp	#LR__4741
2ef4c     08 4E 05 F1 | 	add	fp, #8
2ef50     A7 FA 09 FB | 	rdlong	result1, fp wz
2ef54     08 4E 85 F1 | 	sub	fp, #8
2ef58     18 00 90 AD |  if_e	jmp	#LR__4740
2ef5c     10 4E 05 F1 | 	add	fp, #16
2ef60     A7 12 02 F6 | 	mov	arg01, fp
2ef64     08 4E 85 F1 | 	sub	fp, #8
2ef68     A7 14 02 FB | 	rdlong	arg02, fp
2ef6c     08 4E 85 F1 | 	sub	fp, #8
2ef70     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2ef74                 | LR__4740
2ef74                 | LR__4741
2ef74                 | LR__4742
2ef74                 | LR__4743
2ef74                 | ' 			}
2ef74                 | ' 		}
2ef74                 | ' 		;
2ef74                 | ' 	}
2ef74                 | ' 
2ef74                 | ' 	return res ;
2ef74     0C 4E 05 F1 | 	add	fp, #12
2ef78     A7 FA 01 FB | 	rdlong	result1, fp
2ef7c     0C 4E 85 F1 | 	sub	fp, #12
2ef80     A7 F0 03 F6 | 	mov	ptra, fp
2ef84     B2 00 A0 FD | 	call	#popregs_
2ef88                 | _fatfs_cc_f_stat_ret
2ef88     2D 00 64 FD | 	ret
2ef8c                 | 
2ef8c                 | _fatfs_cc_f_unlink
2ef8c     00 4A 05 F6 | 	mov	COUNT_, #0
2ef90     A8 00 A0 FD | 	call	#pushregs_
2ef94     74 F0 07 F1 | 	add	ptra, #116
2ef98     04 4E 05 F1 | 	add	fp, #4
2ef9c     A7 12 62 FC | 	wrlong	arg01, fp
2efa0     68 4E 05 F1 | 	add	fp, #104
2efa4     A7 00 68 FC | 	wrlong	#0, fp
2efa8     68 4E 85 F1 | 	sub	fp, #104
2efac     A7 12 02 F6 | 	mov	arg01, fp
2efb0     6C 4E 05 F1 | 	add	fp, #108
2efb4     A7 14 02 F6 | 	mov	arg02, fp
2efb8     70 4E 85 F1 | 	sub	fp, #112
2efbc     02 16 06 F6 | 	mov	arg03, #2
2efc0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2efc4     08 4E 05 F1 | 	add	fp, #8
2efc8     A7 FA 61 FC | 	wrlong	result1, fp
2efcc     08 4E 85 F1 | 	sub	fp, #8
2efd0     00 FA 0D F2 | 	cmp	result1, #0 wz
2efd4     E4 01 90 5D |  if_ne	jmp	#LR__4758
2efd8     70 4E 05 F1 | 	add	fp, #112
2efdc     A7 16 02 FB | 	rdlong	arg03, fp
2efe0     64 4E 85 F1 | 	sub	fp, #100
2efe4     A7 16 62 FC | 	wrlong	arg03, fp
2efe8     A7 12 02 F6 | 	mov	arg01, fp
2efec     08 4E 85 F1 | 	sub	fp, #8
2eff0     A7 14 02 FB | 	rdlong	arg02, fp
2eff4     04 4E 85 F1 | 	sub	fp, #4
2eff8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2effc     08 4E 05 F1 | 	add	fp, #8
2f000     A7 FA 61 FC | 	wrlong	result1, fp
2f004     00 FA 4D F2 | 	cmps	result1, #0 wz
2f008     08 4E 85 F1 | 	sub	fp, #8
2f00c     AC 01 90 5D |  if_ne	jmp	#LR__4757
2f010     37 4E 05 F1 | 	add	fp, #55
2f014     A7 FA C1 FA | 	rdbyte	result1, fp
2f018     37 4E 85 F1 | 	sub	fp, #55
2f01c     80 FA CD F7 | 	test	result1, #128 wz
2f020     08 4E 05 51 |  if_ne	add	fp, #8
2f024     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f028     08 4E 85 51 |  if_ne	sub	fp, #8
2f02c     1C 00 90 5D |  if_ne	jmp	#LR__4750
2f030     12 4E 05 F1 | 	add	fp, #18
2f034     A7 FA C1 FA | 	rdbyte	result1, fp
2f038     12 4E 85 F1 | 	sub	fp, #18
2f03c     01 FA CD F7 | 	test	result1, #1 wz
2f040     08 4E 05 51 |  if_ne	add	fp, #8
2f044     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2f048     08 4E 85 51 |  if_ne	sub	fp, #8
2f04c                 | LR__4750
2f04c     08 4E 05 F1 | 	add	fp, #8
2f050     A7 FA 09 FB | 	rdlong	result1, fp wz
2f054     08 4E 85 F1 | 	sub	fp, #8
2f058     C8 00 90 5D |  if_ne	jmp	#LR__4753
2f05c     70 4E 05 F1 | 	add	fp, #112
2f060     A7 12 02 FB | 	rdlong	arg01, fp
2f064     48 4E 85 F1 | 	sub	fp, #72
2f068     A7 14 02 FB | 	rdlong	arg02, fp
2f06c     28 4E 85 F1 | 	sub	fp, #40
2f070     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2f074     6C 4E 05 F1 | 	add	fp, #108
2f078     A7 FA 61 FC | 	wrlong	result1, fp
2f07c     5A 4E 85 F1 | 	sub	fp, #90
2f080     A7 FA C1 FA | 	rdbyte	result1, fp
2f084     12 4E 85 F1 | 	sub	fp, #18
2f088     10 FA CD F7 | 	test	result1, #16 wz
2f08c     94 00 90 AD |  if_e	jmp	#LR__4752
2f090     70 4E 05 F1 | 	add	fp, #112
2f094     A7 FA 01 FB | 	rdlong	result1, fp
2f098     34 4E 85 F1 | 	sub	fp, #52
2f09c     A7 FA 61 FC | 	wrlong	result1, fp
2f0a0     30 4E 05 F1 | 	add	fp, #48
2f0a4     A7 16 02 FB | 	rdlong	arg03, fp
2f0a8     28 4E 85 F1 | 	sub	fp, #40
2f0ac     A7 16 62 FC | 	wrlong	arg03, fp
2f0b0     08 4E 85 F1 | 	sub	fp, #8
2f0b4     A7 12 02 F6 | 	mov	arg01, fp
2f0b8     3C 4E 85 F1 | 	sub	fp, #60
2f0bc     00 14 06 F6 | 	mov	arg02, #0
2f0c0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2f0c4     08 4E 05 F1 | 	add	fp, #8
2f0c8     A7 FA 61 FC | 	wrlong	result1, fp
2f0cc     08 4E 85 F1 | 	sub	fp, #8
2f0d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f0d4     4C 00 90 5D |  if_ne	jmp	#LR__4751
2f0d8     3C 4E 05 F1 | 	add	fp, #60
2f0dc     A7 12 02 F6 | 	mov	arg01, fp
2f0e0     3C 4E 85 F1 | 	sub	fp, #60
2f0e4     00 14 06 F6 | 	mov	arg02, #0
2f0e8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2f0ec     08 4E 05 F1 | 	add	fp, #8
2f0f0     A7 FA 61 FC | 	wrlong	result1, fp
2f0f4     00 FA 4D F2 | 	cmps	result1, #0 wz
2f0f8     08 4E 85 F1 | 	sub	fp, #8
2f0fc     08 4E 05 A1 |  if_e	add	fp, #8
2f100     A7 0E 68 AC |  if_e	wrlong	#7, fp
2f104     08 4E 85 A1 |  if_e	sub	fp, #8
2f108     08 4E 05 F1 | 	add	fp, #8
2f10c     A7 FA 01 FB | 	rdlong	result1, fp
2f110     08 4E 85 F1 | 	sub	fp, #8
2f114     04 FA 0D F2 | 	cmp	result1, #4 wz
2f118     08 4E 05 A1 |  if_e	add	fp, #8
2f11c     A7 00 68 AC |  if_e	wrlong	#0, fp
2f120     08 4E 85 A1 |  if_e	sub	fp, #8
2f124                 | LR__4751
2f124                 | LR__4752
2f124                 | LR__4753
2f124     08 4E 05 F1 | 	add	fp, #8
2f128     A7 FA 09 FB | 	rdlong	result1, fp wz
2f12c     08 4E 85 F1 | 	sub	fp, #8
2f130     88 00 90 5D |  if_ne	jmp	#LR__4756
2f134     0C 4E 05 F1 | 	add	fp, #12
2f138     A7 12 02 F6 | 	mov	arg01, fp
2f13c     0C 4E 85 F1 | 	sub	fp, #12
2f140     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2f144     08 4E 05 F1 | 	add	fp, #8
2f148     A7 FA 61 FC | 	wrlong	result1, fp
2f14c     08 4E 85 F1 | 	sub	fp, #8
2f150     00 FA 0D F2 | 	cmp	result1, #0 wz
2f154     38 00 90 5D |  if_ne	jmp	#LR__4754
2f158     6C 4E 05 F1 | 	add	fp, #108
2f15c     A7 FA 09 FB | 	rdlong	result1, fp wz
2f160     6C 4E 85 F1 | 	sub	fp, #108
2f164     28 00 90 AD |  if_e	jmp	#LR__4754
2f168     0C 4E 05 F1 | 	add	fp, #12
2f16c     A7 12 02 F6 | 	mov	arg01, fp
2f170     60 4E 05 F1 | 	add	fp, #96
2f174     A7 14 02 FB | 	rdlong	arg02, fp
2f178     6C 4E 85 F1 | 	sub	fp, #108
2f17c     00 16 06 F6 | 	mov	arg03, #0
2f180     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2f184     08 4E 05 F1 | 	add	fp, #8
2f188     A7 FA 61 FC | 	wrlong	result1, fp
2f18c     08 4E 85 F1 | 	sub	fp, #8
2f190                 | LR__4754
2f190     08 4E 05 F1 | 	add	fp, #8
2f194     A7 FA 09 FB | 	rdlong	result1, fp wz
2f198     08 4E 85 F1 | 	sub	fp, #8
2f19c     1C 00 90 5D |  if_ne	jmp	#LR__4755
2f1a0     70 4E 05 F1 | 	add	fp, #112
2f1a4     A7 12 02 FB | 	rdlong	arg01, fp
2f1a8     70 4E 85 F1 | 	sub	fp, #112
2f1ac     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2f1b0     08 4E 05 F1 | 	add	fp, #8
2f1b4     A7 FA 61 FC | 	wrlong	result1, fp
2f1b8     08 4E 85 F1 | 	sub	fp, #8
2f1bc                 | LR__4755
2f1bc                 | LR__4756
2f1bc                 | LR__4757
2f1bc                 | LR__4758
2f1bc                 | ' 			}
2f1bc                 | ' 		}
2f1bc                 | ' 		;
2f1bc                 | ' 	}
2f1bc                 | ' 
2f1bc                 | ' 	return res ;
2f1bc     08 4E 05 F1 | 	add	fp, #8
2f1c0     A7 FA 01 FB | 	rdlong	result1, fp
2f1c4     08 4E 85 F1 | 	sub	fp, #8
2f1c8     A7 F0 03 F6 | 	mov	ptra, fp
2f1cc     B2 00 A0 FD | 	call	#popregs_
2f1d0                 | _fatfs_cc_f_unlink_ret
2f1d0     2D 00 64 FD | 	ret
2f1d4                 | 
2f1d4                 | _fatfs_cc_f_mkdir
2f1d4     00 4A 05 F6 | 	mov	COUNT_, #0
2f1d8     A8 00 A0 FD | 	call	#pushregs_
2f1dc     5C F0 07 F1 | 	add	ptra, #92
2f1e0     04 4E 05 F1 | 	add	fp, #4
2f1e4     A7 12 62 FC | 	wrlong	arg01, fp
2f1e8     A7 12 02 F6 | 	mov	arg01, fp
2f1ec     48 4E 05 F1 | 	add	fp, #72
2f1f0     A7 14 02 F6 | 	mov	arg02, fp
2f1f4     4C 4E 85 F1 | 	sub	fp, #76
2f1f8     02 16 06 F6 | 	mov	arg03, #2
2f1fc     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2f200     08 4E 05 F1 | 	add	fp, #8
2f204     A7 FA 61 FC | 	wrlong	result1, fp
2f208     08 4E 85 F1 | 	sub	fp, #8
2f20c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f210     C4 02 90 5D |  if_ne	jmp	#LR__4765
2f214     4C 4E 05 F1 | 	add	fp, #76
2f218     A7 16 02 FB | 	rdlong	arg03, fp
2f21c     40 4E 85 F1 | 	sub	fp, #64
2f220     A7 16 62 FC | 	wrlong	arg03, fp
2f224     A7 12 02 F6 | 	mov	arg01, fp
2f228     08 4E 85 F1 | 	sub	fp, #8
2f22c     A7 14 02 FB | 	rdlong	arg02, fp
2f230     04 4E 85 F1 | 	sub	fp, #4
2f234     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2f238     08 4E 05 F1 | 	add	fp, #8
2f23c     A7 FA 61 FC | 	wrlong	result1, fp
2f240     00 FA 4D F2 | 	cmps	result1, #0 wz
2f244     08 4E 85 F1 | 	sub	fp, #8
2f248     08 4E 05 A1 |  if_e	add	fp, #8
2f24c     A7 10 68 AC |  if_e	wrlong	#8, fp
2f250     08 4E 85 A1 |  if_e	sub	fp, #8
2f254     08 4E 05 F1 | 	add	fp, #8
2f258     A7 FA 01 FB | 	rdlong	result1, fp
2f25c     08 4E 85 F1 | 	sub	fp, #8
2f260     04 FA 0D F2 | 	cmp	result1, #4 wz
2f264     70 02 90 5D |  if_ne	jmp	#LR__4764
2f268     4C 4E 05 F1 | 	add	fp, #76
2f26c     A7 16 02 FB | 	rdlong	arg03, fp
2f270     10 4E 85 F1 | 	sub	fp, #16
2f274     A7 16 62 FC | 	wrlong	arg03, fp
2f278     A7 12 02 F6 | 	mov	arg01, fp
2f27c     3C 4E 85 F1 | 	sub	fp, #60
2f280     00 14 06 F6 | 	mov	arg02, #0
2f284     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2f288     50 4E 05 F1 | 	add	fp, #80
2f28c     A7 FA 61 FC | 	wrlong	result1, fp
2f290     48 4E 85 F1 | 	sub	fp, #72
2f294     A7 00 68 FC | 	wrlong	#0, fp
2f298     48 4E 05 F1 | 	add	fp, #72
2f29c     A7 FA 09 FB | 	rdlong	result1, fp wz
2f2a0     50 4E 85 F1 | 	sub	fp, #80
2f2a4     08 4E 05 A1 |  if_e	add	fp, #8
2f2a8     A7 0E 68 AC |  if_e	wrlong	#7, fp
2f2ac     08 4E 85 A1 |  if_e	sub	fp, #8
2f2b0     50 4E 05 F1 | 	add	fp, #80
2f2b4     A7 FA 01 FB | 	rdlong	result1, fp
2f2b8     50 4E 85 F1 | 	sub	fp, #80
2f2bc     01 FA 0D F2 | 	cmp	result1, #1 wz
2f2c0     08 4E 05 A1 |  if_e	add	fp, #8
2f2c4     A7 04 68 AC |  if_e	wrlong	#2, fp
2f2c8     08 4E 85 A1 |  if_e	sub	fp, #8
2f2cc     50 4E 05 F1 | 	add	fp, #80
2f2d0     A7 16 02 FB | 	rdlong	arg03, fp
2f2d4     50 4E 85 F1 | 	sub	fp, #80
2f2d8     FF FF 7F FF 
2f2dc     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2f2e0     08 4E 05 A1 |  if_e	add	fp, #8
2f2e4     A7 02 68 AC |  if_e	wrlong	#1, fp
2f2e8     08 4E 85 A1 |  if_e	sub	fp, #8
2f2ec     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2f2f0     58 4E 05 F1 | 	add	fp, #88
2f2f4     A7 FA 61 FC | 	wrlong	result1, fp
2f2f8     50 4E 85 F1 | 	sub	fp, #80
2f2fc     A7 FA 09 FB | 	rdlong	result1, fp wz
2f300     08 4E 85 F1 | 	sub	fp, #8
2f304     1C 01 90 5D |  if_ne	jmp	#LR__4761
2f308     4C 4E 05 F1 | 	add	fp, #76
2f30c     A7 12 02 FB | 	rdlong	arg01, fp
2f310     04 4E 05 F1 | 	add	fp, #4
2f314     A7 14 02 FB | 	rdlong	arg02, fp
2f318     50 4E 85 F1 | 	sub	fp, #80
2f31c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2f320     08 4E 05 F1 | 	add	fp, #8
2f324     A7 FA 61 FC | 	wrlong	result1, fp
2f328     00 FA 4D F2 | 	cmps	result1, #0 wz
2f32c     08 4E 85 F1 | 	sub	fp, #8
2f330     F0 00 90 5D |  if_ne	jmp	#LR__4760
2f334     4C 4E 05 F1 | 	add	fp, #76
2f338     A7 12 02 FB | 	rdlong	arg01, fp
2f33c     4C 4E 85 F1 | 	sub	fp, #76
2f340     34 12 06 F1 | 	add	arg01, #52
2f344     20 14 06 F6 | 	mov	arg02, #32
2f348     0B 16 06 F6 | 	mov	arg03, #11
2f34c     98 00 A0 FD | 	call	#\builtin_bytefill_
2f350     4C 4E 05 F1 | 	add	fp, #76
2f354     A7 FA 01 FB | 	rdlong	result1, fp
2f358     34 FA 05 F1 | 	add	result1, #52
2f35c     FD 5C 48 FC | 	wrbyte	#46, result1
2f360     A7 16 02 FB | 	rdlong	arg03, fp
2f364     3F 16 06 F1 | 	add	arg03, #63
2f368     0B 21 48 FC | 	wrbyte	#16, arg03
2f36c     A7 12 02 FB | 	rdlong	arg01, fp
2f370     4A 12 06 F1 | 	add	arg01, #74
2f374     0C 4E 05 F1 | 	add	fp, #12
2f378     A7 14 02 FB | 	rdlong	arg02, fp
2f37c     09 15 62 FC | 	wrlong	arg02, arg01
2f380     0C 4E 85 F1 | 	sub	fp, #12
2f384     A7 14 02 FB | 	rdlong	arg02, fp
2f388     0A 13 02 F6 | 	mov	arg01, arg02
2f38c     34 14 06 F1 | 	add	arg02, #52
2f390     04 4E 05 F1 | 	add	fp, #4
2f394     A7 16 02 FB | 	rdlong	arg03, fp
2f398     50 4E 85 F1 | 	sub	fp, #80
2f39c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2f3a0     4C 4E 05 F1 | 	add	fp, #76
2f3a4     A7 14 02 FB | 	rdlong	arg02, fp
2f3a8     0A 13 02 F6 | 	mov	arg01, arg02
2f3ac     54 12 06 F1 | 	add	arg01, #84
2f3b0     4C 4E 85 F1 | 	sub	fp, #76
2f3b4     34 14 06 F1 | 	add	arg02, #52
2f3b8     20 16 06 F6 | 	mov	arg03, #32
2f3bc     74 27 BF FD | 	call	#__system____builtin_memmove
2f3c0     4C 4E 05 F1 | 	add	fp, #76
2f3c4     A7 16 02 FB | 	rdlong	arg03, fp
2f3c8     55 16 06 F1 | 	add	arg03, #85
2f3cc     0B 5D 48 FC | 	wrbyte	#46, arg03
2f3d0     38 4E 85 F1 | 	sub	fp, #56
2f3d4     A7 16 02 FB | 	rdlong	arg03, fp
2f3d8     40 4E 05 F1 | 	add	fp, #64
2f3dc     A7 16 62 FC | 	wrlong	arg03, fp
2f3e0     08 4E 85 F1 | 	sub	fp, #8
2f3e4     A7 14 02 FB | 	rdlong	arg02, fp
2f3e8     0A 13 02 F6 | 	mov	arg01, arg02
2f3ec     54 14 06 F1 | 	add	arg02, #84
2f3f0     4C 4E 85 F1 | 	sub	fp, #76
2f3f4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2f3f8     4C 4E 05 F1 | 	add	fp, #76
2f3fc     A7 16 02 FB | 	rdlong	arg03, fp
2f400     03 16 06 F1 | 	add	arg03, #3
2f404     0B 03 48 FC | 	wrbyte	#1, arg03
2f408     40 4E 85 F1 | 	sub	fp, #64
2f40c     A7 12 02 F6 | 	mov	arg01, fp
2f410     0C 4E 85 F1 | 	sub	fp, #12
2f414     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2f418     08 4E 05 F1 | 	add	fp, #8
2f41c     A7 FA 61 FC | 	wrlong	result1, fp
2f420     08 4E 85 F1 | 	sub	fp, #8
2f424                 | LR__4760
2f424                 | LR__4761
2f424     08 4E 05 F1 | 	add	fp, #8
2f428     A7 FA 09 FB | 	rdlong	result1, fp wz
2f42c     08 4E 85 F1 | 	sub	fp, #8
2f430     88 00 90 5D |  if_ne	jmp	#LR__4762
2f434     28 4E 05 F1 | 	add	fp, #40
2f438     A7 12 02 FB | 	rdlong	arg01, fp
2f43c     16 12 06 F1 | 	add	arg01, #22
2f440     30 4E 05 F1 | 	add	fp, #48
2f444     A7 14 02 FB | 	rdlong	arg02, fp
2f448     09 15 62 FC | 	wrlong	arg02, arg01
2f44c     0C 4E 85 F1 | 	sub	fp, #12
2f450     A7 12 02 FB | 	rdlong	arg01, fp
2f454     24 4E 85 F1 | 	sub	fp, #36
2f458     A7 14 02 FB | 	rdlong	arg02, fp
2f45c     28 4E 05 F1 | 	add	fp, #40
2f460     A7 16 02 FB | 	rdlong	arg03, fp
2f464     50 4E 85 F1 | 	sub	fp, #80
2f468     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2f46c     28 4E 05 F1 | 	add	fp, #40
2f470     A7 FA 01 FB | 	rdlong	result1, fp
2f474     0B FA 05 F1 | 	add	result1, #11
2f478     FD 20 48 FC | 	wrbyte	#16, result1
2f47c     24 4E 05 F1 | 	add	fp, #36
2f480     A7 FA 01 FB | 	rdlong	result1, fp
2f484     03 FA 05 F1 | 	add	result1, #3
2f488     FD 02 48 FC | 	wrbyte	#1, result1
2f48c     44 4E 85 F1 | 	sub	fp, #68
2f490     A7 FA 09 FB | 	rdlong	result1, fp wz
2f494     08 4E 85 F1 | 	sub	fp, #8
2f498     3C 00 90 5D |  if_ne	jmp	#LR__4763
2f49c     4C 4E 05 F1 | 	add	fp, #76
2f4a0     A7 12 02 FB | 	rdlong	arg01, fp
2f4a4     4C 4E 85 F1 | 	sub	fp, #76
2f4a8     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2f4ac     08 4E 05 F1 | 	add	fp, #8
2f4b0     A7 FA 61 FC | 	wrlong	result1, fp
2f4b4     08 4E 85 F1 | 	sub	fp, #8
2f4b8     1C 00 90 FD | 	jmp	#LR__4763
2f4bc                 | LR__4762
2f4bc     3C 4E 05 F1 | 	add	fp, #60
2f4c0     A7 12 02 F6 | 	mov	arg01, fp
2f4c4     14 4E 05 F1 | 	add	fp, #20
2f4c8     A7 14 02 FB | 	rdlong	arg02, fp
2f4cc     50 4E 85 F1 | 	sub	fp, #80
2f4d0     00 16 06 F6 | 	mov	arg03, #0
2f4d4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2f4d8                 | LR__4763
2f4d8                 | LR__4764
2f4d8                 | LR__4765
2f4d8                 | ' 				remove_chain(&sobj, dcl, 0);
2f4d8                 | ' 			}
2f4d8                 | ' 		}
2f4d8                 | ' 		;
2f4d8                 | ' 	}
2f4d8                 | ' 
2f4d8                 | ' 	return res ;
2f4d8     08 4E 05 F1 | 	add	fp, #8
2f4dc     A7 FA 01 FB | 	rdlong	result1, fp
2f4e0     08 4E 85 F1 | 	sub	fp, #8
2f4e4     A7 F0 03 F6 | 	mov	ptra, fp
2f4e8     B2 00 A0 FD | 	call	#popregs_
2f4ec                 | _fatfs_cc_f_mkdir_ret
2f4ec     2D 00 64 FD | 	ret
2f4f0                 | 
2f4f0                 | _fatfs_cc_f_rename
2f4f0     01 4A 05 F6 | 	mov	COUNT_, #1
2f4f4     A8 00 A0 FD | 	call	#pushregs_
2f4f8     9C F0 07 F1 | 	add	ptra, #156
2f4fc     04 4E 05 F1 | 	add	fp, #4
2f500     A7 12 62 FC | 	wrlong	arg01, fp
2f504     04 4E 05 F1 | 	add	fp, #4
2f508     A7 14 62 FC | 	wrlong	arg02, fp
2f50c     A7 12 02 F6 | 	mov	arg01, fp
2f510     08 4E 85 F1 | 	sub	fp, #8
2f514     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2f518     04 4E 05 F1 | 	add	fp, #4
2f51c     A7 12 02 F6 | 	mov	arg01, fp
2f520     6C 4E 05 F1 | 	add	fp, #108
2f524     A7 14 02 F6 | 	mov	arg02, fp
2f528     70 4E 85 F1 | 	sub	fp, #112
2f52c     02 16 06 F6 | 	mov	arg03, #2
2f530     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2f534     0C 4E 05 F1 | 	add	fp, #12
2f538     A7 FA 61 FC | 	wrlong	result1, fp
2f53c     0C 4E 85 F1 | 	sub	fp, #12
2f540     00 FA 0D F2 | 	cmp	result1, #0 wz
2f544     44 03 90 5D |  if_ne	jmp	#LR__4783
2f548     70 4E 05 F1 | 	add	fp, #112
2f54c     A7 16 02 FB | 	rdlong	arg03, fp
2f550     60 4E 85 F1 | 	sub	fp, #96
2f554     A7 16 62 FC | 	wrlong	arg03, fp
2f558     A7 12 02 F6 | 	mov	arg01, fp
2f55c     0C 4E 85 F1 | 	sub	fp, #12
2f560     A7 14 02 FB | 	rdlong	arg02, fp
2f564     04 4E 85 F1 | 	sub	fp, #4
2f568     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2f56c     0C 4E 05 F1 | 	add	fp, #12
2f570     A7 FA 61 FC | 	wrlong	result1, fp
2f574     00 FA 4D F2 | 	cmps	result1, #0 wz
2f578     0C 4E 85 F1 | 	sub	fp, #12
2f57c     1C 00 90 5D |  if_ne	jmp	#LR__4770
2f580     3B 4E 05 F1 | 	add	fp, #59
2f584     A7 FA C1 FA | 	rdbyte	result1, fp
2f588     3B 4E 85 F1 | 	sub	fp, #59
2f58c     A0 FA CD F7 | 	test	result1, #160 wz
2f590     0C 4E 05 51 |  if_ne	add	fp, #12
2f594     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f598     0C 4E 85 51 |  if_ne	sub	fp, #12
2f59c                 | LR__4770
2f59c     0C 4E 05 F1 | 	add	fp, #12
2f5a0     A7 26 0A FB | 	rdlong	local01, fp wz
2f5a4     0C 4E 85 F1 | 	sub	fp, #12
2f5a8     E0 02 90 5D |  if_ne	jmp	#LR__4782
2f5ac     74 4E 05 F1 | 	add	fp, #116
2f5b0     A7 12 02 F6 | 	mov	arg01, fp
2f5b4     48 4E 85 F1 | 	sub	fp, #72
2f5b8     A7 14 02 FB | 	rdlong	arg02, fp
2f5bc     2C 4E 85 F1 | 	sub	fp, #44
2f5c0     20 16 06 F6 | 	mov	arg03, #32
2f5c4     6C 25 BF FD | 	call	#__system____builtin_memmove
2f5c8     40 4E 05 F1 | 	add	fp, #64
2f5cc     A7 12 02 F6 | 	mov	arg01, fp
2f5d0     30 4E 85 F1 | 	sub	fp, #48
2f5d4     A7 14 02 F6 | 	mov	arg02, fp
2f5d8     10 4E 85 F1 | 	sub	fp, #16
2f5dc     30 16 06 F6 | 	mov	arg03, #48
2f5e0     50 25 BF FD | 	call	#__system____builtin_memmove
2f5e4     40 4E 05 F1 | 	add	fp, #64
2f5e8     A7 12 02 F6 | 	mov	arg01, fp
2f5ec     38 4E 85 F1 | 	sub	fp, #56
2f5f0     A7 14 02 FB | 	rdlong	arg02, fp
2f5f4     08 4E 85 F1 | 	sub	fp, #8
2f5f8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2f5fc     0C 4E 05 F1 | 	add	fp, #12
2f600     A7 FA 61 FC | 	wrlong	result1, fp
2f604     0C 4E 85 F1 | 	sub	fp, #12
2f608     00 FA 0D F2 | 	cmp	result1, #0 wz
2f60c     4C 00 90 5D |  if_ne	jmp	#LR__4773
2f610     48 4E 05 F1 | 	add	fp, #72
2f614     A7 FA 01 FB | 	rdlong	result1, fp
2f618     30 4E 85 F1 | 	sub	fp, #48
2f61c     A7 16 02 FB | 	rdlong	arg03, fp
2f620     18 4E 85 F1 | 	sub	fp, #24
2f624     0B FB 09 F2 | 	cmp	result1, arg03 wz
2f628     20 00 90 5D |  if_ne	jmp	#LR__4771
2f62c     50 4E 05 F1 | 	add	fp, #80
2f630     A7 FA 01 FB | 	rdlong	result1, fp
2f634     30 4E 85 F1 | 	sub	fp, #48
2f638     A7 16 02 FB | 	rdlong	arg03, fp
2f63c     20 4E 85 F1 | 	sub	fp, #32
2f640     0B FB 09 F2 | 	cmp	result1, arg03 wz
2f644     04 26 06 A6 |  if_e	mov	local01, #4
2f648     04 00 90 AD |  if_e	jmp	#LR__4772
2f64c                 | LR__4771
2f64c     08 26 06 F6 | 	mov	local01, #8
2f650                 | LR__4772
2f650     0C 4E 05 F1 | 	add	fp, #12
2f654     A7 26 62 FC | 	wrlong	local01, fp
2f658     0C 4E 85 F1 | 	sub	fp, #12
2f65c                 | LR__4773
2f65c     0C 4E 05 F1 | 	add	fp, #12
2f660     A7 26 02 FB | 	rdlong	local01, fp
2f664     0C 4E 85 F1 | 	sub	fp, #12
2f668     04 26 0E F2 | 	cmp	local01, #4 wz
2f66c     CC 01 90 5D |  if_ne	jmp	#LR__4779
2f670     40 4E 05 F1 | 	add	fp, #64
2f674     A7 12 02 F6 | 	mov	arg01, fp
2f678     40 4E 85 F1 | 	sub	fp, #64
2f67c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2f680     0C 4E 05 F1 | 	add	fp, #12
2f684     A7 FA 61 FC | 	wrlong	result1, fp
2f688     0C 4E 85 F1 | 	sub	fp, #12
2f68c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f690     A8 01 90 5D |  if_ne	jmp	#LR__4778
2f694     5C 4E 05 F1 | 	add	fp, #92
2f698     A7 12 02 FB | 	rdlong	arg01, fp
2f69c     38 4E 05 F1 | 	add	fp, #56
2f6a0     A7 12 62 FC | 	wrlong	arg01, fp
2f6a4     0D 12 06 F1 | 	add	arg01, #13
2f6a8     20 4E 85 F1 | 	sub	fp, #32
2f6ac     A7 14 02 F6 | 	mov	arg02, fp
2f6b0     74 4E 85 F1 | 	sub	fp, #116
2f6b4     0D 14 06 F1 | 	add	arg02, #13
2f6b8     13 16 06 F6 | 	mov	arg03, #19
2f6bc     74 24 BF FD | 	call	#__system____builtin_memmove
2f6c0     94 4E 05 F1 | 	add	fp, #148
2f6c4     A7 26 02 FB | 	rdlong	local01, fp
2f6c8     15 4E 85 F1 | 	sub	fp, #21
2f6cc     A7 FA C1 FA | 	rdbyte	result1, fp
2f6d0     0B 26 06 F1 | 	add	local01, #11
2f6d4     13 FB 41 FC | 	wrbyte	result1, local01
2f6d8     15 4E 05 F1 | 	add	fp, #21
2f6dc     A7 26 02 FB | 	rdlong	local01, fp
2f6e0     94 4E 85 F1 | 	sub	fp, #148
2f6e4     0B 26 06 F1 | 	add	local01, #11
2f6e8     13 27 C2 FA | 	rdbyte	local01, local01
2f6ec     10 26 CE F7 | 	test	local01, #16 wz
2f6f0     24 00 90 5D |  if_ne	jmp	#LR__4774
2f6f4     94 4E 05 F1 | 	add	fp, #148
2f6f8     A7 FA 01 FB | 	rdlong	result1, fp
2f6fc     FD 26 02 F6 | 	mov	local01, result1
2f700     94 4E 85 F1 | 	sub	fp, #148
2f704     0B FA 05 F1 | 	add	result1, #11
2f708     FD FA C1 FA | 	rdbyte	result1, result1
2f70c     20 FA 45 F5 | 	or	result1, #32
2f710     0B 26 06 F1 | 	add	local01, #11
2f714     13 FB 41 FC | 	wrbyte	result1, local01
2f718                 | LR__4774
2f718     70 4E 05 F1 | 	add	fp, #112
2f71c     A7 26 02 FB | 	rdlong	local01, fp
2f720     03 26 06 F1 | 	add	local01, #3
2f724     13 03 48 FC | 	wrbyte	#1, local01
2f728     24 4E 05 F1 | 	add	fp, #36
2f72c     A7 26 02 FB | 	rdlong	local01, fp
2f730     94 4E 85 F1 | 	sub	fp, #148
2f734     0B 26 06 F1 | 	add	local01, #11
2f738     13 27 C2 FA | 	rdbyte	local01, local01
2f73c     10 26 CE F7 | 	test	local01, #16 wz
2f740     F8 00 90 AD |  if_e	jmp	#LR__4777
2f744     18 4E 05 F1 | 	add	fp, #24
2f748     A7 16 02 FB | 	rdlong	arg03, fp
2f74c     30 4E 05 F1 | 	add	fp, #48
2f750     A7 26 02 FB | 	rdlong	local01, fp
2f754     48 4E 85 F1 | 	sub	fp, #72
2f758     13 17 0A F2 | 	cmp	arg03, local01 wz
2f75c     DC 00 90 AD |  if_e	jmp	#LR__4777
2f760     70 4E 05 F1 | 	add	fp, #112
2f764     A7 12 02 FB | 	rdlong	arg01, fp
2f768     09 27 02 F6 | 	mov	local01, arg01
2f76c     24 4E 05 F1 | 	add	fp, #36
2f770     A7 14 02 FB | 	rdlong	arg02, fp
2f774     94 4E 85 F1 | 	sub	fp, #148
2f778     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2f77c     FD 14 02 F6 | 	mov	arg02, result1
2f780     13 13 02 F6 | 	mov	arg01, local01
2f784     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2f788     98 4E 05 F1 | 	add	fp, #152
2f78c     A7 FA 61 FC | 	wrlong	result1, fp
2f790     00 FA 4D F2 | 	cmps	result1, #0 wz
2f794     98 4E 85 F1 | 	sub	fp, #152
2f798     0C 4E 05 A1 |  if_e	add	fp, #12
2f79c     A7 04 68 AC |  if_e	wrlong	#2, fp
2f7a0     0C 4E 85 A1 |  if_e	sub	fp, #12
2f7a4     94 00 90 AD |  if_e	jmp	#LR__4776
2f7a8     70 4E 05 F1 | 	add	fp, #112
2f7ac     A7 12 02 FB | 	rdlong	arg01, fp
2f7b0     28 4E 05 F1 | 	add	fp, #40
2f7b4     A7 14 02 FB | 	rdlong	arg02, fp
2f7b8     98 4E 85 F1 | 	sub	fp, #152
2f7bc     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2f7c0     0C 4E 05 F1 | 	add	fp, #12
2f7c4     A7 FA 61 FC | 	wrlong	result1, fp
2f7c8     64 4E 05 F1 | 	add	fp, #100
2f7cc     A7 26 02 FB | 	rdlong	local01, fp
2f7d0     54 26 06 F1 | 	add	local01, #84
2f7d4     24 4E 05 F1 | 	add	fp, #36
2f7d8     A7 26 62 FC | 	wrlong	local01, fp
2f7dc     88 4E 85 F1 | 	sub	fp, #136
2f7e0     A7 26 0A FB | 	rdlong	local01, fp wz
2f7e4     0C 4E 85 F1 | 	sub	fp, #12
2f7e8     50 00 90 5D |  if_ne	jmp	#LR__4775
2f7ec     94 4E 05 F1 | 	add	fp, #148
2f7f0     A7 26 02 FB | 	rdlong	local01, fp
2f7f4     94 4E 85 F1 | 	sub	fp, #148
2f7f8     01 26 06 F1 | 	add	local01, #1
2f7fc     13 27 C2 FA | 	rdbyte	local01, local01
2f800     2E 26 0E F2 | 	cmp	local01, #46 wz
2f804     34 00 90 5D |  if_ne	jmp	#LR__4775
2f808     70 4E 05 F1 | 	add	fp, #112
2f80c     A7 12 02 FB | 	rdlong	arg01, fp
2f810     24 4E 05 F1 | 	add	fp, #36
2f814     A7 14 02 FB | 	rdlong	arg02, fp
2f818     4C 4E 85 F1 | 	sub	fp, #76
2f81c     A7 16 02 FB | 	rdlong	arg03, fp
2f820     48 4E 85 F1 | 	sub	fp, #72
2f824     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2f828     70 4E 05 F1 | 	add	fp, #112
2f82c     A7 26 02 FB | 	rdlong	local01, fp
2f830     70 4E 85 F1 | 	sub	fp, #112
2f834     03 26 06 F1 | 	add	local01, #3
2f838     13 03 48 FC | 	wrbyte	#1, local01
2f83c                 | LR__4775
2f83c                 | LR__4776
2f83c                 | LR__4777
2f83c                 | LR__4778
2f83c                 | LR__4779
2f83c     0C 4E 05 F1 | 	add	fp, #12
2f840     A7 26 0A FB | 	rdlong	local01, fp wz
2f844     0C 4E 85 F1 | 	sub	fp, #12
2f848     40 00 90 5D |  if_ne	jmp	#LR__4781
2f84c     10 4E 05 F1 | 	add	fp, #16
2f850     A7 12 02 F6 | 	mov	arg01, fp
2f854     10 4E 85 F1 | 	sub	fp, #16
2f858     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2f85c     0C 4E 05 F1 | 	add	fp, #12
2f860     A7 FA 61 FC | 	wrlong	result1, fp
2f864     0C 4E 85 F1 | 	sub	fp, #12
2f868     00 FA 0D F2 | 	cmp	result1, #0 wz
2f86c     1C 00 90 5D |  if_ne	jmp	#LR__4780
2f870     70 4E 05 F1 | 	add	fp, #112
2f874     A7 12 02 FB | 	rdlong	arg01, fp
2f878     70 4E 85 F1 | 	sub	fp, #112
2f87c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2f880     0C 4E 05 F1 | 	add	fp, #12
2f884     A7 FA 61 FC | 	wrlong	result1, fp
2f888     0C 4E 85 F1 | 	sub	fp, #12
2f88c                 | LR__4780
2f88c                 | LR__4781
2f88c                 | LR__4782
2f88c                 | LR__4783
2f88c                 | ' 					res = sync_fs(fs);
2f88c                 | ' 				}
2f88c                 | ' 			}
2f88c                 | ' 
2f88c                 | ' 		}
2f88c                 | ' 		;
2f88c                 | ' 	}
2f88c                 | ' 
2f88c                 | ' 	return res ;
2f88c     0C 4E 05 F1 | 	add	fp, #12
2f890     A7 FA 01 FB | 	rdlong	result1, fp
2f894     0C 4E 85 F1 | 	sub	fp, #12
2f898     A7 F0 03 F6 | 	mov	ptra, fp
2f89c     B2 00 A0 FD | 	call	#popregs_
2f8a0                 | _fatfs_cc_f_rename_ret
2f8a0     2D 00 64 FD | 	ret
2f8a4                 | 
2f8a4                 | _fatfs_cc_time
2f8a4     00 4A 05 F6 | 	mov	COUNT_, #0
2f8a8     A8 00 A0 FD | 	call	#pushregs_
2f8ac     14 F0 07 F1 | 	add	ptra, #20
2f8b0     04 4E 05 F1 | 	add	fp, #4
2f8b4     A7 12 62 FC | 	wrlong	arg01, fp
2f8b8     04 4E 05 F1 | 	add	fp, #4
2f8bc     A7 12 02 F6 | 	mov	arg01, fp
2f8c0     08 4E 85 F1 | 	sub	fp, #8
2f8c4     00 14 06 F6 | 	mov	arg02, #0
2f8c8     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2f8cc     08 4E 05 F1 | 	add	fp, #8
2f8d0     A7 FA 01 FB | 	rdlong	result1, fp
2f8d4     08 4E 05 F1 | 	add	fp, #8
2f8d8     A7 FA 61 FC | 	wrlong	result1, fp
2f8dc     0C 4E 85 F1 | 	sub	fp, #12
2f8e0     A7 FA 09 FB | 	rdlong	result1, fp wz
2f8e4     04 4E 85 F1 | 	sub	fp, #4
2f8e8     18 00 90 AD |  if_e	jmp	#LR__4790
2f8ec     04 4E 05 F1 | 	add	fp, #4
2f8f0     A7 FA 01 FB | 	rdlong	result1, fp
2f8f4     0C 4E 05 F1 | 	add	fp, #12
2f8f8     A7 14 02 FB | 	rdlong	arg02, fp
2f8fc     10 4E 85 F1 | 	sub	fp, #16
2f900     FD 14 62 FC | 	wrlong	arg02, result1
2f904                 | LR__4790
2f904                 | '         *tp = now;
2f904                 | '     return now;
2f904     10 4E 05 F1 | 	add	fp, #16
2f908     A7 FA 01 FB | 	rdlong	result1, fp
2f90c     10 4E 85 F1 | 	sub	fp, #16
2f910     A7 F0 03 F6 | 	mov	ptra, fp
2f914     B2 00 A0 FD | 	call	#popregs_
2f918                 | _fatfs_cc_time_ret
2f918     2D 00 64 FD | 	ret
2f91c                 | 
2f91c                 | _fatfs_cc_mktime
2f91c     06 4A 05 F6 | 	mov	COUNT_, #6
2f920     A8 00 A0 FD | 	call	#pushregs_
2f924     09 27 02 F6 | 	mov	local01, arg01
2f928     14 26 06 F1 | 	add	local01, #20
2f92c     13 13 02 FB | 	rdlong	arg01, local01
2f930     14 26 86 F1 | 	sub	local01, #20
2f934     46 12 56 F2 | 	cmps	arg01, #70 wc
2f938                 | '                 return (time_t) -1;
2f938     01 FA 65 C6 |  if_b	neg	result1, #1
2f93c     7C 01 90 CD |  if_b	jmp	#LR__4804
2f940     03 00 00 FF 
2f944     6C 29 06 F6 | 	mov	local02, ##1900
2f948     14 26 06 F1 | 	add	local01, #20
2f94c     13 FB 01 FB | 	rdlong	result1, local01
2f950     FD 28 02 F1 | 	add	local02, result1
2f954     08 26 86 F1 | 	sub	local01, #8
2f958     13 2B 02 FB | 	rdlong	local03, local01
2f95c     01 2A 86 F1 | 	sub	local03, #1
2f960     04 26 06 F1 | 	add	local01, #4
2f964     13 13 02 FB | 	rdlong	arg01, local01
2f968     10 26 86 F1 | 	sub	local01, #16
2f96c     02 12 66 F0 | 	shl	arg01, #2
2f970     02 00 00 FF 
2f974     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2f978     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2f97c     09 FB 01 FB | 	rdlong	result1, arg01
2f980     FD 2A 02 F1 | 	add	local03, result1
2f984     14 13 02 F6 | 	mov	arg01, local02
2f988     02 00 00 FF 
2f98c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2f990     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f994     00 FA 0D F2 | 	cmp	result1, #0 wz
2f998     1C 00 90 AD |  if_e	jmp	#LR__4800
2f99c     00 2C 06 F6 | 	mov	local04, #0
2f9a0     10 26 06 F1 | 	add	local01, #16
2f9a4     13 FB 01 FB | 	rdlong	result1, local01
2f9a8     10 26 86 F1 | 	sub	local01, #16
2f9ac     02 FA 55 F2 | 	cmps	result1, #2 wc
2f9b0     01 2C 06 36 |  if_ae	mov	local04, #1
2f9b4     04 00 90 FD | 	jmp	#LR__4801
2f9b8                 | LR__4800
2f9b8     00 2C 06 F6 | 	mov	local04, #0
2f9bc                 | LR__4801
2f9bc     04 26 06 F1 | 	add	local01, #4
2f9c0     13 FB 01 FB | 	rdlong	result1, local01
2f9c4     04 26 86 F1 | 	sub	local01, #4
2f9c8     13 2F 02 FB | 	rdlong	local05, local01
2f9cc     08 26 06 F1 | 	add	local01, #8
2f9d0     13 13 02 FB | 	rdlong	arg01, local01
2f9d4     07 00 00 FF 
2f9d8     10 12 06 FD | 	qmul	arg01, ##3600
2f9dc     16 2B 02 F1 | 	add	local03, local04
2f9e0     FD 2C 02 F6 | 	mov	local04, result1
2f9e4     04 2C 66 F0 | 	shl	local04, #4
2f9e8     FD 2C 82 F1 | 	sub	local04, result1
2f9ec     02 2C 66 F0 | 	shl	local04, #2
2f9f0     16 2F 02 F1 | 	add	local05, local04
2f9f4     08 26 86 F1 | 	sub	local01, #8
2f9f8     18 2C 62 FD | 	getqx	local04
2f9fc     A8 00 00 FF 
2fa00     80 2B 06 FD | 	qmul	local03, ##86400
2fa04     16 2F 02 F1 | 	add	local05, local04
2fa08     14 2B 02 F6 | 	mov	local03, local02
2fa0c     03 00 00 FF 
2fa10     B2 2B 86 F1 | 	sub	local03, ##1970
2fa14     18 2C 62 FD | 	getqx	local04
2fa18     99 F0 00 FF 
2fa1c     80 2B 06 FD | 	qmul	local03, ##31536000
2fa20     16 2F 02 F1 | 	add	local05, local04
2fa24     14 2B 02 F6 | 	mov	local03, local02
2fa28     03 00 00 FF 
2fa2c     B1 2B 86 F1 | 	sub	local03, ##1969
2fa30     15 31 52 F6 | 	abs	local06, local03 wc
2fa34     02 30 46 F0 | 	shr	local06, #2
2fa38     18 31 82 F6 | 	negc	local06, local06
2fa3c     03 00 00 FF 
2fa40     D1 29 56 F2 | 	cmps	local02, ##2001 wc
2fa44     18 2C 62 FD | 	getqx	local04
2fa48     16 2F 02 F1 | 	add	local05, local04
2fa4c     18 00 90 CD |  if_b	jmp	#LR__4802
2fa50     03 00 00 FF 
2fa54     D0 29 86 F1 | 	sub	local02, ##2000
2fa58     14 2D 52 F6 | 	abs	local04, local02 wc
2fa5c     64 2C 16 FD | 	qdiv	local04, #100
2fa60     18 2C 62 FD | 	getqx	local04
2fa64     16 31 A2 F3 | 	sumnc	local06, local04
2fa68                 | LR__4802
2fa68     A8 00 00 FF 
2fa6c     80 31 06 FD | 	qmul	local06, ##86400
2fa70     18 30 62 FD | 	getqx	local06
2fa74     18 2F 02 F1 | 	add	local05, local06
2fa78     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2fa7c     02 00 00 FF 
2fa80     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2fa84     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2fa88     18 2F 02 F1 | 	add	local05, local06
2fa8c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2fa90     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2fa94     02 00 00 FF 
2fa98     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2fa9c     01 2A 0E F2 | 	cmp	local03, #1 wz
2faa0     14 00 90 5D |  if_ne	jmp	#LR__4803
2faa4     13 13 02 F6 | 	mov	arg01, local01
2faa8     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2faac     00 FA 0D F2 | 	cmp	result1, #0 wz
2fab0     07 00 00 5F 
2fab4     10 2E 86 51 |  if_ne	sub	local05, ##3600
2fab8                 | LR__4803
2fab8                 | '                 s -=  (3600L) ;
2fab8                 | ' 
2fab8                 | '         return s;
2fab8     17 FB 01 F6 | 	mov	result1, local05
2fabc                 | LR__4804
2fabc     A7 F0 03 F6 | 	mov	ptra, fp
2fac0     B2 00 A0 FD | 	call	#popregs_
2fac4                 | _fatfs_cc_mktime_ret
2fac4     2D 00 64 FD | 	ret
2fac8                 | 
2fac8                 | _fatfs_cc__gmtime_r
2fac8     03 4A 05 F6 | 	mov	COUNT_, #3
2facc     A8 00 A0 FD | 	call	#pushregs_
2fad0     09 27 02 FB | 	rdlong	local01, arg01
2fad4     A8 00 00 FF 
2fad8     80 27 16 FD | 	qdiv	local01, ##86400
2fadc     18 FA 61 FD | 	getqx	result1
2fae0     04 FA 05 F1 | 	add	result1, #4
2fae4     07 FA 15 FD | 	qdiv	result1, #7
2fae8     18 14 06 F1 | 	add	arg02, #24
2faec     D1 7F 27 FF 
2faf0     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
2faf4     D1 7F 27 3F 
2faf8     00 26 86 31 |  if_ae	sub	local01, ##1325376000
2fafc     03 00 00 3F 
2fb00     DC 29 06 36 |  if_ae	mov	local02, ##2012
2fb04     03 00 00 CF 
2fb08     B2 29 06 C6 |  if_b	mov	local02, ##1970
2fb0c                 | ' 	  year = 1970;
2fb0c                 | ' 	}
2fb0c                 | ' 
2fb0c                 | ' 	for(;;) {
2fb0c     19 FA 61 FD | 	getqy	result1
2fb10     0A FB 61 FC | 	wrlong	result1, arg02
2fb14     18 14 86 F1 | 	sub	arg02, #24
2fb18                 | LR__4810
2fb18     14 13 02 F6 | 	mov	arg01, local02
2fb1c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2fb20     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb24     42 F1 00 5F 
2fb28     00 2B 06 56 |  if_ne	mov	local03, ##31622400
2fb2c     99 F0 00 AF 
2fb30     80 2B 06 A6 |  if_e	mov	local03, ##31536000
2fb34     15 27 12 F2 | 	cmp	local01, local03 wc
2fb38                 | ' 	    break;
2fb38     01 28 06 31 |  if_ae	add	local02, #1
2fb3c     15 27 82 31 |  if_ae	sub	local01, local03
2fb40     D4 FF 9F 3D |  if_ae	jmp	#LR__4810
2fb44     A8 00 00 FF 
2fb48     80 27 16 FD | 	qdiv	local01, ##86400
2fb4c     14 2B 02 F6 | 	mov	local03, local02
2fb50     03 00 00 FF 
2fb54     6C 2B 86 F1 | 	sub	local03, ##1900
2fb58     14 14 06 F1 | 	add	arg02, #20
2fb5c     0A 2B 62 FC | 	wrlong	local03, arg02
2fb60     08 14 06 F1 | 	add	arg02, #8
2fb64     14 13 02 F6 | 	mov	arg01, local02
2fb68     18 28 62 FD | 	getqx	local02
2fb6c     0A 29 62 FC | 	wrlong	local02, arg02
2fb70     1C 14 86 F1 | 	sub	arg02, #28
2fb74     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2fb78     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb7c     1D 2A 06 56 |  if_ne	mov	local03, #29
2fb80     1C 2A 06 A6 |  if_e	mov	local03, #28
2fb84     02 00 00 FF 
2fb88     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2fb8c     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2fb90     02 00 00 FF 
2fb94     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2fb98                 | ' 
2fb98                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2fb98                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2fb98     00 12 06 F6 | 	mov	arg01, #0
2fb9c     97 2A 48 FB | 	callpa	#(@LR__4812-@LR__4811)>>2,fcache_load_ptr_
2fba0                 | LR__4811
2fba0     09 2B 02 F6 | 	mov	local03, arg01
2fba4     02 2A 66 F0 | 	shl	local03, #2
2fba8     02 00 00 FF 
2fbac     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2fbb0     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2fbb4     15 2B 02 FB | 	rdlong	local03, local03
2fbb8     15 29 52 F2 | 	cmps	local02, local03 wc
2fbbc     02 00 00 FF 
2fbc0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2fbc4     2C 00 90 CD |  if_b	jmp	#LR__4813
2fbc8     09 2B 02 F6 | 	mov	local03, arg01
2fbcc     02 2A 66 F0 | 	shl	local03, #2
2fbd0     02 00 00 FF 
2fbd4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2fbd8     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2fbdc     15 2B 02 FB | 	rdlong	local03, local03
2fbe0     15 29 82 F1 | 	sub	local02, local03
2fbe4     01 12 06 F1 | 	add	arg01, #1
2fbe8     02 00 00 FF 
2fbec     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2fbf0     AC FF 9F FD | 	jmp	#LR__4811
2fbf4                 | LR__4812
2fbf4                 | LR__4813
2fbf4     A8 00 00 FF 
2fbf8     80 27 16 FD | 	qdiv	local01, ##86400
2fbfc     10 14 06 F1 | 	add	arg02, #16
2fc00     0A 13 62 FC | 	wrlong	arg01, arg02
2fc04     01 28 06 F1 | 	add	local02, #1
2fc08     04 14 86 F1 | 	sub	arg02, #4
2fc0c     0A 29 62 FC | 	wrlong	local02, arg02
2fc10     19 26 62 FD | 	getqy	local01
2fc14     07 00 00 FF 
2fc18     10 26 16 FD | 	qdiv	local01, ##3600
2fc1c     18 2A 62 FD | 	getqx	local03
2fc20     07 00 00 FF 
2fc24     10 26 16 FD | 	qdiv	local01, ##3600
2fc28     04 14 86 F1 | 	sub	arg02, #4
2fc2c     0A 2B 62 FC | 	wrlong	local03, arg02
2fc30     19 26 62 FD | 	getqy	local01
2fc34     3C 26 16 FD | 	qdiv	local01, #60
2fc38     18 2A 62 FD | 	getqx	local03
2fc3c     3C 26 16 FD | 	qdiv	local01, #60
2fc40     04 14 86 F1 | 	sub	arg02, #4
2fc44     0A 2B 62 FC | 	wrlong	local03, arg02
2fc48     04 14 86 F1 | 	sub	arg02, #4
2fc4c                 | '         stm->tm_isdst = 0;
2fc4c                 | ' 
2fc4c                 | ' ;
2fc4c                 | '         return stm;
2fc4c     0A FB 01 F6 | 	mov	result1, arg02
2fc50     19 2A 62 FD | 	getqy	local03
2fc54     0A 2B 62 FC | 	wrlong	local03, arg02
2fc58     20 14 06 F1 | 	add	arg02, #32
2fc5c     0A 01 68 FC | 	wrlong	#0, arg02
2fc60     A7 F0 03 F6 | 	mov	ptra, fp
2fc64     B2 00 A0 FD | 	call	#popregs_
2fc68                 | _fatfs_cc__gmtime_r_ret
2fc68     2D 00 64 FD | 	ret
2fc6c                 | 
2fc6c                 | _fatfs_cc__tzset
2fc6c     8B 01 00 FF 
2fc70     B1 13 06 F6 | 	mov	arg01, ##@LR__5125
2fc74     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2fc78     FD 12 02 F6 | 	mov	arg01, result1
2fc7c     02 00 00 FF 
2fc80     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2fc84     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2fc88     02 00 00 FF 
2fc8c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2fc90     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2fc94     02 00 00 FF 
2fc98     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2fc9c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2fca0     02 00 00 FF 
2fca4     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2fca8                 | _fatfs_cc__tzset_ret
2fca8     2D 00 64 FD | 	ret
2fcac                 | 
2fcac                 | _fatfs_cc_getenv
2fcac     06 4A 05 F6 | 	mov	COUNT_, #6
2fcb0     A8 00 A0 FD | 	call	#pushregs_
2fcb4     09 27 02 F6 | 	mov	local01, arg01
2fcb8     09 29 02 F6 | 	mov	local02, arg01
2fcbc     97 06 48 FB | 	callpa	#(@LR__4821-@LR__4820)>>2,fcache_load_ptr_
2fcc0                 | LR__4820
2fcc0     14 FB C9 FA | 	rdbyte	result1, local02 wz
2fcc4     01 28 06 51 |  if_ne	add	local02, #1
2fcc8     F4 FF 9F 5D |  if_ne	jmp	#LR__4820
2fccc                 | LR__4821
2fccc     09 29 82 F1 | 	sub	local02, arg01
2fcd0     14 FB 01 F6 | 	mov	result1, local02
2fcd4     02 00 00 FF 
2fcd8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2fcdc     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2fce0     02 00 00 FF 
2fce4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2fce8                 | '             return 0;
2fce8     00 FA 05 A6 |  if_e	mov	result1, #0
2fcec     5C 00 90 AD |  if_e	jmp	#LR__4824
2fcf0                 | ' 
2fcf0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2fcf0     02 00 00 FF 
2fcf4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2fcf8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2fcfc     02 00 00 FF 
2fd00     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2fd04                 | LR__4822
2fd04     15 2D 0A FB | 	rdlong	local04, local03 wz
2fd08     3C 00 90 AD |  if_e	jmp	#LR__4823
2fd0c     16 13 02 F6 | 	mov	arg01, local04
2fd10     13 15 02 F6 | 	mov	arg02, local01
2fd14     14 17 02 F6 | 	mov	arg03, local02
2fd18     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2fd1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd20     14 2F 02 A6 |  if_e	mov	local05, local02
2fd24     16 2F 02 A1 |  if_e	add	local05, local04
2fd28     17 31 C2 AA |  if_e	rdbyte	local06, local05
2fd2c     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
2fd30                 | ' 			return name+len+1;
2fd30     14 2D 02 A1 |  if_e	add	local04, local02
2fd34     01 2C 06 A1 |  if_e	add	local04, #1
2fd38     16 FB 01 A6 |  if_e	mov	result1, local04
2fd3c     0C 00 90 AD |  if_e	jmp	#LR__4824
2fd40     04 2A 06 F1 | 	add	local03, #4
2fd44     BC FF 9F FD | 	jmp	#LR__4822
2fd48                 | LR__4823
2fd48                 | ' 	}
2fd48                 | ' 	return 0;
2fd48     00 FA 05 F6 | 	mov	result1, #0
2fd4c                 | LR__4824
2fd4c     A7 F0 03 F6 | 	mov	ptra, fp
2fd50     B2 00 A0 FD | 	call	#popregs_
2fd54                 | _fatfs_cc_getenv_ret
2fd54     2D 00 64 FD | 	ret
2fd58                 | 
2fd58                 | _fatfs_cc__get_fattime
2fd58     00 4A 05 F6 | 	mov	COUNT_, #0
2fd5c     A8 00 A0 FD | 	call	#pushregs_
2fd60     34 F0 07 F1 | 	add	ptra, #52
2fd64     00 12 06 F6 | 	mov	arg01, #0
2fd68     38 FB BF FD | 	call	#_fatfs_cc_time
2fd6c     04 4E 05 F1 | 	add	fp, #4
2fd70     A7 FA 61 FC | 	wrlong	result1, fp
2fd74     A7 12 02 F6 | 	mov	arg01, fp
2fd78     0C 4E 05 F1 | 	add	fp, #12
2fd7c     A7 14 02 F6 | 	mov	arg02, fp
2fd80     10 4E 85 F1 | 	sub	fp, #16
2fd84     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2fd88     24 4E 05 F1 | 	add	fp, #36
2fd8c     A7 14 02 FB | 	rdlong	arg02, fp
2fd90     50 14 86 F1 | 	sub	arg02, #80
2fd94     09 14 66 F0 | 	shl	arg02, #9
2fd98     04 4E 85 F1 | 	sub	fp, #4
2fd9c     A7 FA 01 FB | 	rdlong	result1, fp
2fda0     01 FA 05 F1 | 	add	result1, #1
2fda4     05 FA 65 F0 | 	shl	result1, #5
2fda8     FD 14 42 F5 | 	or	arg02, result1
2fdac     04 4E 85 F1 | 	sub	fp, #4
2fdb0     A7 FA 01 FB | 	rdlong	result1, fp
2fdb4     FD 14 42 F5 | 	or	arg02, result1
2fdb8     14 4E 85 F1 | 	sub	fp, #20
2fdbc     A7 14 62 FC | 	wrlong	arg02, fp
2fdc0     10 4E 05 F1 | 	add	fp, #16
2fdc4     A7 14 02 FB | 	rdlong	arg02, fp
2fdc8     0B 14 66 F0 | 	shl	arg02, #11
2fdcc     04 4E 85 F1 | 	sub	fp, #4
2fdd0     A7 FA 01 FB | 	rdlong	result1, fp
2fdd4     05 FA 65 F0 | 	shl	result1, #5
2fdd8     FD 14 42 F5 | 	or	arg02, result1
2fddc     04 4E 85 F1 | 	sub	fp, #4
2fde0     A7 FA 01 FB | 	rdlong	result1, fp
2fde4     FD 14 42 F5 | 	or	arg02, result1
2fde8     04 4E 85 F1 | 	sub	fp, #4
2fdec     A7 14 62 FC | 	wrlong	arg02, fp
2fdf0                 | ' 
2fdf0                 | '     now = time(0);
2fdf0                 | '     _gmtime_r (&now, &date);
2fdf0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2fdf0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2fdf0                 | '     return (ffdate << 16) | fftime;
2fdf0     04 4E 85 F1 | 	sub	fp, #4
2fdf4     A7 FA 01 FB | 	rdlong	result1, fp
2fdf8     10 FA 65 F0 | 	shl	result1, #16
2fdfc     08 4E 85 F1 | 	sub	fp, #8
2fe00     0A FB 41 F5 | 	or	result1, arg02
2fe04     A7 F0 03 F6 | 	mov	ptra, fp
2fe08     B2 00 A0 FD | 	call	#popregs_
2fe0c                 | _fatfs_cc__get_fattime_ret
2fe0c     2D 00 64 FD | 	ret
2fe10                 | 
2fe10                 | _fatfs_cc_unixtime_0997
2fe10     00 4A 05 F6 | 	mov	COUNT_, #0
2fe14     A8 00 A0 FD | 	call	#pushregs_
2fe18     34 F0 07 F1 | 	add	ptra, #52
2fe1c     04 4E 05 F1 | 	add	fp, #4
2fe20     A7 12 62 FC | 	wrlong	arg01, fp
2fe24     04 4E 05 F1 | 	add	fp, #4
2fe28     A7 14 62 FC | 	wrlong	arg02, fp
2fe2c     04 4E 85 F1 | 	sub	fp, #4
2fe30     A7 14 02 FB | 	rdlong	arg02, fp
2fe34     09 14 46 F0 | 	shr	arg02, #9
2fe38     7F 14 06 F5 | 	and	arg02, #127
2fe3c     50 FA 05 F6 | 	mov	result1, #80
2fe40     0A FB 01 F1 | 	add	result1, arg02
2fe44     20 4E 05 F1 | 	add	fp, #32
2fe48     A7 FA 61 FC | 	wrlong	result1, fp
2fe4c     20 4E 85 F1 | 	sub	fp, #32
2fe50     A7 FA 01 FB | 	rdlong	result1, fp
2fe54     05 FA 45 F0 | 	shr	result1, #5
2fe58     FD FA 41 F8 | 	getnib	result1, result1, #0
2fe5c     01 FA 85 F1 | 	sub	result1, #1
2fe60     1C 4E 05 F1 | 	add	fp, #28
2fe64     A7 FA 61 FC | 	wrlong	result1, fp
2fe68     1C 4E 85 F1 | 	sub	fp, #28
2fe6c     A7 FA 01 FB | 	rdlong	result1, fp
2fe70     1F FA 05 F5 | 	and	result1, #31
2fe74     18 4E 05 F1 | 	add	fp, #24
2fe78     A7 FA 61 FC | 	wrlong	result1, fp
2fe7c     14 4E 85 F1 | 	sub	fp, #20
2fe80     A7 FA 01 FB | 	rdlong	result1, fp
2fe84     0B FA 45 F0 | 	shr	result1, #11
2fe88     1F FA 05 F5 | 	and	result1, #31
2fe8c     10 4E 05 F1 | 	add	fp, #16
2fe90     A7 FA 61 FC | 	wrlong	result1, fp
2fe94     10 4E 85 F1 | 	sub	fp, #16
2fe98     A7 FA 01 FB | 	rdlong	result1, fp
2fe9c     05 FA 45 F0 | 	shr	result1, #5
2fea0     3F FA 05 F5 | 	and	result1, #63
2fea4     0C 4E 05 F1 | 	add	fp, #12
2fea8     A7 FA 61 FC | 	wrlong	result1, fp
2feac     0C 4E 85 F1 | 	sub	fp, #12
2feb0     A7 14 02 FB | 	rdlong	arg02, fp
2feb4     1F 14 06 F5 | 	and	arg02, #31
2feb8     01 14 66 F0 | 	shl	arg02, #1
2febc     08 4E 05 F1 | 	add	fp, #8
2fec0     A7 14 62 FC | 	wrlong	arg02, fp
2fec4     A7 12 02 F6 | 	mov	arg01, fp
2fec8     10 4E 85 F1 | 	sub	fp, #16
2fecc     4C FA BF FD | 	call	#_fatfs_cc_mktime
2fed0     0C 4E 05 F1 | 	add	fp, #12
2fed4     A7 FA 61 FC | 	wrlong	result1, fp
2fed8                 | ' 
2fed8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2fed8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2fed8                 | '     date.tm_mday = (dosdate & 0x1f);
2fed8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2fed8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2fed8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2fed8                 | ' 
2fed8                 | '     t = mktime(&date);
2fed8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fed8                 | '     return t;
2fed8     0C 4E 85 F1 | 	sub	fp, #12
2fedc     A7 F0 03 F6 | 	mov	ptra, fp
2fee0     B2 00 A0 FD | 	call	#popregs_
2fee4                 | _fatfs_cc_unixtime_0997_ret
2fee4     2D 00 64 FD | 	ret
2fee8                 | 
2fee8                 | _fatfs_cc__set_dos_error_0999
2fee8     09 01 02 F6 | 	mov	_var01, arg01
2feec                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2feec                 | '     switch (derr) {
2feec     14 00 26 F3 | 	fle	_var01, #20
2fef0     30 00 62 FD | 	jmprel	_var01
2fef4                 | LR__4830
2fef4     50 00 90 FD | 	jmp	#LR__4831
2fef8     84 00 90 FD | 	jmp	#LR__4845
2fefc     80 00 90 FD | 	jmp	#LR__4846
2ff00     7C 00 90 FD | 	jmp	#LR__4847
2ff04     48 00 90 FD | 	jmp	#LR__4832
2ff08     44 00 90 FD | 	jmp	#LR__4833
2ff0c     40 00 90 FD | 	jmp	#LR__4834
2ff10     44 00 90 FD | 	jmp	#LR__4835
2ff14     48 00 90 FD | 	jmp	#LR__4837
2ff18     54 00 90 FD | 	jmp	#LR__4840
2ff1c     38 00 90 FD | 	jmp	#LR__4836
2ff20     4C 00 90 FD | 	jmp	#LR__4841
2ff24     48 00 90 FD | 	jmp	#LR__4842
2ff28     44 00 90 FD | 	jmp	#LR__4843
2ff2c     50 00 90 FD | 	jmp	#LR__4848
2ff30     4C 00 90 FD | 	jmp	#LR__4848
2ff34     48 00 90 FD | 	jmp	#LR__4848
2ff38     2C 00 90 FD | 	jmp	#LR__4838
2ff3c     38 00 90 FD | 	jmp	#LR__4844
2ff40     2C 00 90 FD | 	jmp	#LR__4839
2ff44     38 00 90 FD | 	jmp	#LR__4848
2ff48                 | LR__4831
2ff48     00 02 06 F6 | 	mov	_var02, #0
2ff4c                 | '         r = 0;
2ff4c                 | '         break;
2ff4c     34 00 90 FD | 	jmp	#LR__4849
2ff50                 | LR__4832
2ff50                 | LR__4833
2ff50                 | LR__4834
2ff50     04 02 06 F6 | 	mov	_var02, #4
2ff54                 | '         r =  4 ;
2ff54                 | '         break;
2ff54     2C 00 90 FD | 	jmp	#LR__4849
2ff58                 | LR__4835
2ff58                 | LR__4836
2ff58     06 02 06 F6 | 	mov	_var02, #6
2ff5c                 | '         r =  6 ;
2ff5c                 | '         break;
2ff5c     24 00 90 FD | 	jmp	#LR__4849
2ff60                 | LR__4837
2ff60     09 02 06 F6 | 	mov	_var02, #9
2ff64                 | '         r =  9 ;
2ff64                 | '         break;
2ff64     1C 00 90 FD | 	jmp	#LR__4849
2ff68                 | LR__4838
2ff68     07 02 06 F6 | 	mov	_var02, #7
2ff6c                 | '         r =  7 ;
2ff6c                 | '         break;
2ff6c     14 00 90 FD | 	jmp	#LR__4849
2ff70                 | LR__4839
2ff70                 | LR__4840
2ff70                 | LR__4841
2ff70                 | LR__4842
2ff70                 | LR__4843
2ff70     0A 02 06 F6 | 	mov	_var02, #10
2ff74                 | '         r =  10 ;
2ff74                 | '         break;
2ff74     0C 00 90 FD | 	jmp	#LR__4849
2ff78                 | LR__4844
2ff78     0B 02 06 F6 | 	mov	_var02, #11
2ff7c                 | '         r =  11 ;
2ff7c                 | '         break;
2ff7c     04 00 90 FD | 	jmp	#LR__4849
2ff80                 | LR__4845
2ff80                 | LR__4846
2ff80                 | LR__4847
2ff80                 | LR__4848
2ff80     0C 02 06 F6 | 	mov	_var02, #12
2ff84                 | '         r =  12 ;
2ff84                 | '         break;
2ff84                 | LR__4849
2ff84                 | '     }
2ff84                 | '     return _seterror(r);
2ff84     00 02 4E F2 | 	cmps	_var02, #0 wz
2ff88     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ff8c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2ff90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ff94     01 FA 65 56 |  if_ne	neg	result1, #1
2ff98     00 FA 05 A6 |  if_e	mov	result1, #0
2ff9c                 | _fatfs_cc__set_dos_error_0999_ret
2ff9c     2D 00 64 FD | 	ret
2ffa0                 | 
2ffa0                 | _fatfs_cc_v_creat
2ffa0     04 4A 05 F6 | 	mov	COUNT_, #4
2ffa4     A8 00 A0 FD | 	call	#pushregs_
2ffa8     09 27 02 F6 | 	mov	local01, arg01
2ffac     0A 29 02 F6 | 	mov	local02, arg02
2ffb0     03 00 00 FF 
2ffb4     3C 12 06 F6 | 	mov	arg01, ##1596
2ffb8                 | '     return _gc_alloc(size);
2ffb8     10 14 06 F6 | 	mov	arg02, #16
2ffbc     68 5D BF FD | 	call	#__system___gc_doalloc
2ffc0     FD 2A 0A F6 | 	mov	local03, result1 wz
2ffc4                 | '       return _seterror( 7 );
2ffc4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ffc8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ffcc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ffd0     01 FA 65 A6 |  if_e	neg	result1, #1
2ffd4     58 00 90 AD |  if_e	jmp	#LR__4851
2ffd8     15 13 02 F6 | 	mov	arg01, local03
2ffdc     00 14 06 F6 | 	mov	arg02, #0
2ffe0     03 00 00 FF 
2ffe4     3C 16 06 F6 | 	mov	arg03, ##1596
2ffe8     98 00 A0 FD | 	call	#\builtin_bytefill_
2ffec     02 00 00 FF 
2fff0     14 2A 06 F1 | 	add	local03, ##1044
2fff4     15 13 02 F6 | 	mov	arg01, local03
2fff8     02 00 00 FF 
2fffc     14 2A 86 F1 | 	sub	local03, ##1044
30000     14 15 02 F6 | 	mov	arg02, local02
30004     07 16 06 F6 | 	mov	arg03, #7
30008     B4 CC BF FD | 	call	#_fatfs_cc_f_open
3000c     FD 2C 0A F6 | 	mov	local04, result1 wz
30010     14 00 90 AD |  if_e	jmp	#LR__4850
30014     15 13 02 F6 | 	mov	arg01, local03
30018                 | '     return _gc_free(ptr);
30018     18 5E BF FD | 	call	#__system___gc_free
3001c                 | '     free(f);
3001c                 | '     return _set_dos_error(r);
3001c     16 13 02 F6 | 	mov	arg01, local04
30020     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30024     08 00 90 FD | 	jmp	#LR__4851
30028                 | LR__4850
30028     13 2B 62 FC | 	wrlong	local03, local01
3002c                 | '   }
3002c                 | '   fil->vfsdata = f;
3002c                 | '   return 0;
3002c     00 FA 05 F6 | 	mov	result1, #0
30030                 | LR__4851
30030     A7 F0 03 F6 | 	mov	ptra, fp
30034     B2 00 A0 FD | 	call	#popregs_
30038                 | _fatfs_cc_v_creat_ret
30038     2D 00 64 FD | 	ret
3003c                 | 
3003c                 | _fatfs_cc_v_close
3003c     02 4A 05 F6 | 	mov	COUNT_, #2
30040     A8 00 A0 FD | 	call	#pushregs_
30044     09 27 02 FB | 	rdlong	local01, arg01
30048     02 00 00 FF 
3004c     14 26 06 F1 | 	add	local01, ##1044
30050     13 13 02 F6 | 	mov	arg01, local01
30054     02 00 00 FF 
30058     14 26 86 F1 | 	sub	local01, ##1044
3005c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
30060     FD 28 02 F6 | 	mov	local02, result1
30064     13 13 02 F6 | 	mov	arg01, local01
30068                 | '     return _gc_free(ptr);
30068     C8 5D BF FD | 	call	#__system___gc_free
3006c                 | '     FAT_FIL *f = fil->vfsdata;
3006c                 | '     r=f_close(&f->fil);
3006c                 | '     free(f);
3006c                 | '     return _set_dos_error(r);
3006c     14 13 02 F6 | 	mov	arg01, local02
30070     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30074     A7 F0 03 F6 | 	mov	ptra, fp
30078     B2 00 A0 FD | 	call	#popregs_
3007c                 | _fatfs_cc_v_close_ret
3007c     2D 00 64 FD | 	ret
30080                 | 
30080                 | _fatfs_cc_v_opendir
30080     04 4A 05 F6 | 	mov	COUNT_, #4
30084     A8 00 A0 FD | 	call	#pushregs_
30088     09 27 02 F6 | 	mov	local01, arg01
3008c     0A 29 02 F6 | 	mov	local02, arg02
30090     30 12 06 F6 | 	mov	arg01, #48
30094                 | '     return _gc_alloc(size);
30094     10 14 06 F6 | 	mov	arg02, #16
30098     8C 5C BF FD | 	call	#__system___gc_doalloc
3009c     FD 2A 0A F6 | 	mov	local03, result1 wz
300a0                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
300a0                 | '       return _seterror( 7 );
300a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
300a4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
300a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
300ac     01 FA 65 A6 |  if_e	neg	result1, #1
300b0     34 00 90 AD |  if_e	jmp	#LR__4861
300b4     14 15 02 F6 | 	mov	arg02, local02
300b8     15 13 02 F6 | 	mov	arg01, local03
300bc     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
300c0     FD 2C 0A F6 | 	mov	local04, result1 wz
300c4     14 00 90 AD |  if_e	jmp	#LR__4860
300c8     15 13 02 F6 | 	mov	arg01, local03
300cc                 | '     return _gc_free(ptr);
300cc     64 5D BF FD | 	call	#__system___gc_free
300d0                 | '         free(f);
300d0                 | '         return _set_dos_error(r);
300d0     16 13 02 F6 | 	mov	arg01, local04
300d4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0999
300d8     0C 00 90 FD | 	jmp	#LR__4861
300dc                 | LR__4860
300dc     04 26 06 F1 | 	add	local01, #4
300e0     13 2B 62 FC | 	wrlong	local03, local01
300e4                 | '     }
300e4                 | '     dir->vfsdata = f;
300e4                 | '     return 0;
300e4     00 FA 05 F6 | 	mov	result1, #0
300e8                 | LR__4861
300e8     A7 F0 03 F6 | 	mov	ptra, fp
300ec     B2 00 A0 FD | 	call	#popregs_
300f0                 | _fatfs_cc_v_opendir_ret
300f0     2D 00 64 FD | 	ret
300f4                 | 
300f4                 | _fatfs_cc_v_closedir
300f4     02 4A 05 F6 | 	mov	COUNT_, #2
300f8     A8 00 A0 FD | 	call	#pushregs_
300fc     04 12 06 F1 | 	add	arg01, #4
30100     09 27 02 FB | 	rdlong	local01, arg01
30104     13 13 02 F6 | 	mov	arg01, local01
30108     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
3010c     FD 28 02 F6 | 	mov	local02, result1
30110     13 13 02 F6 | 	mov	arg01, local01
30114                 | '     return _gc_free(ptr);
30114     1C 5D BF FD | 	call	#__system___gc_free
30118     00 28 0E F2 | 	cmp	local02, #0 wz
3011c     14 13 02 56 |  if_ne	mov	arg01, local02
30120     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0999
30124                 | '     return r;
30124     14 FB 01 F6 | 	mov	result1, local02
30128     A7 F0 03 F6 | 	mov	ptra, fp
3012c     B2 00 A0 FD | 	call	#popregs_
30130                 | _fatfs_cc_v_closedir_ret
30130     2D 00 64 FD | 	ret
30134                 | 
30134                 | _fatfs_cc_v_readdir
30134     01 4A 05 F6 | 	mov	COUNT_, #1
30138     A8 00 A0 FD | 	call	#pushregs_
3013c     2C F1 07 F1 | 	add	ptra, #300
30140     04 4E 05 F1 | 	add	fp, #4
30144     A7 12 62 FC | 	wrlong	arg01, fp
30148     04 4E 05 F1 | 	add	fp, #4
3014c     A7 14 62 FC | 	wrlong	arg02, fp
30150     04 4E 85 F1 | 	sub	fp, #4
30154     A7 16 02 FB | 	rdlong	arg03, fp
30158     04 16 06 F1 | 	add	arg03, #4
3015c     0B 13 02 FB | 	rdlong	arg01, arg03
30160     08 4E 05 F1 | 	add	fp, #8
30164     A7 14 02 F6 | 	mov	arg02, fp
30168     0C 4E 85 F1 | 	sub	fp, #12
3016c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
30170     28 4F 05 F1 | 	add	fp, #296
30174     A7 FA 61 FC | 	wrlong	result1, fp
30178     28 4F 85 F1 | 	sub	fp, #296
3017c     00 FA 0D F2 | 	cmp	result1, #0 wz
30180     14 00 90 AD |  if_e	jmp	#LR__4870
30184                 | '         return _set_dos_error(r);
30184     28 4F 05 F1 | 	add	fp, #296
30188     A7 12 02 FB | 	rdlong	arg01, fp
3018c     28 4F 85 F1 | 	sub	fp, #296
30190     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30194     C4 00 90 FD | 	jmp	#LR__4873
30198                 | LR__4870
30198     28 4E 05 F1 | 	add	fp, #40
3019c     A7 16 CA FA | 	rdbyte	arg03, fp wz
301a0     28 4E 85 F1 | 	sub	fp, #40
301a4                 | '         return -1;
301a4     01 FA 65 A6 |  if_e	neg	result1, #1
301a8     B0 00 90 AD |  if_e	jmp	#LR__4873
301ac     08 4E 05 F1 | 	add	fp, #8
301b0     A7 12 02 FB | 	rdlong	arg01, fp
301b4     20 4E 05 F1 | 	add	fp, #32
301b8     A7 14 02 F6 | 	mov	arg02, fp
301bc     28 4E 85 F1 | 	sub	fp, #40
301c0     3F 16 06 F6 | 	mov	arg03, #63
301c4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
301c8     08 4E 05 F1 | 	add	fp, #8
301cc     A7 16 02 FB | 	rdlong	arg03, fp
301d0     3F 16 06 F1 | 	add	arg03, #63
301d4     0B 01 48 FC | 	wrbyte	#0, arg03
301d8     0C 4E 05 F1 | 	add	fp, #12
301dc     A7 16 C2 FA | 	rdbyte	arg03, fp
301e0     14 4E 85 F1 | 	sub	fp, #20
301e4     10 16 CE F7 | 	test	arg03, #16 wz
301e8     18 00 90 AD |  if_e	jmp	#LR__4871
301ec     08 4E 05 F1 | 	add	fp, #8
301f0     A7 16 02 FB | 	rdlong	arg03, fp
301f4     08 4E 85 F1 | 	sub	fp, #8
301f8     50 16 06 F1 | 	add	arg03, #80
301fc     0B 03 48 FC | 	wrbyte	#1, arg03
30200     14 00 90 FD | 	jmp	#LR__4872
30204                 | LR__4871
30204     08 4E 05 F1 | 	add	fp, #8
30208     A7 16 02 FB | 	rdlong	arg03, fp
3020c     08 4E 85 F1 | 	sub	fp, #8
30210     50 16 06 F1 | 	add	arg03, #80
30214     0B 01 48 FC | 	wrbyte	#0, arg03
30218                 | LR__4872
30218     08 4E 05 F1 | 	add	fp, #8
3021c     A7 16 02 FB | 	rdlong	arg03, fp
30220     04 4E 05 F1 | 	add	fp, #4
30224     A7 14 02 FB | 	rdlong	arg02, fp
30228     48 16 06 F1 | 	add	arg03, #72
3022c     0B 15 62 FC | 	wrlong	arg02, arg03
30230     04 4E 85 F1 | 	sub	fp, #4
30234     A7 26 02 FB | 	rdlong	local01, fp
30238     08 4E 05 F1 | 	add	fp, #8
3023c     A7 12 E2 FA | 	rdword	arg01, fp
30240     02 4E 05 F1 | 	add	fp, #2
30244     A7 14 E2 FA | 	rdword	arg02, fp
30248     12 4E 85 F1 | 	sub	fp, #18
3024c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0997
30250     4C 26 06 F1 | 	add	local01, #76
30254     13 FB 61 FC | 	wrlong	result1, local01
30258                 | '         ent->d_type =  (0) ;
30258                 | '     }
30258                 | '     ent->d_size = finfo.fsize;
30258                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
30258                 | '     return 0;
30258     00 FA 05 F6 | 	mov	result1, #0
3025c                 | LR__4873
3025c     A7 F0 03 F6 | 	mov	ptra, fp
30260     B2 00 A0 FD | 	call	#popregs_
30264                 | _fatfs_cc_v_readdir_ret
30264     2D 00 64 FD | 	ret
30268                 | 
30268                 | _fatfs_cc_v_stat
30268     03 4A 05 F6 | 	mov	COUNT_, #3
3026c     A8 00 A0 FD | 	call	#pushregs_
30270     30 F1 07 F1 | 	add	ptra, #304
30274     04 4E 05 F1 | 	add	fp, #4
30278     A7 12 62 FC | 	wrlong	arg01, fp
3027c     04 4E 05 F1 | 	add	fp, #4
30280     A7 14 62 FC | 	wrlong	arg02, fp
30284     08 4E 85 F1 | 	sub	fp, #8
30288     0A 13 02 F6 | 	mov	arg01, arg02
3028c     00 14 06 F6 | 	mov	arg02, #0
30290     30 16 06 F6 | 	mov	arg03, #48
30294     98 00 A0 FD | 	call	#\builtin_bytefill_
30298     04 4E 05 F1 | 	add	fp, #4
3029c     A7 FA 01 FB | 	rdlong	result1, fp
302a0     04 4E 85 F1 | 	sub	fp, #4
302a4     FD FA C9 FA | 	rdbyte	result1, result1 wz
302a8     2C 00 90 AD |  if_e	jmp	#LR__4880
302ac     04 4E 05 F1 | 	add	fp, #4
302b0     A7 FA 01 FB | 	rdlong	result1, fp
302b4     04 4E 85 F1 | 	sub	fp, #4
302b8     FD FA C1 FA | 	rdbyte	result1, result1
302bc     2E FA 0D F2 | 	cmp	result1, #46 wz
302c0     04 4E 05 A1 |  if_e	add	fp, #4
302c4     A7 26 02 AB |  if_e	rdlong	local01, fp
302c8     04 4E 85 A1 |  if_e	sub	fp, #4
302cc     01 26 06 A1 |  if_e	add	local01, #1
302d0     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
302d4     18 00 90 5D |  if_ne	jmp	#LR__4881
302d8                 | LR__4880
302d8     18 4E 05 F1 | 	add	fp, #24
302dc     A7 20 48 FC | 	wrbyte	#16, fp
302e0     0C 4E 85 F1 | 	sub	fp, #12
302e4     A7 00 68 FC | 	wrlong	#0, fp
302e8     0C 4E 85 F1 | 	sub	fp, #12
302ec     24 00 90 FD | 	jmp	#LR__4882
302f0                 | LR__4881
302f0     04 4E 05 F1 | 	add	fp, #4
302f4     A7 12 02 FB | 	rdlong	arg01, fp
302f8     0C 4E 05 F1 | 	add	fp, #12
302fc     A7 14 02 F6 | 	mov	arg02, fp
30300     10 4E 85 F1 | 	sub	fp, #16
30304     AC EB BF FD | 	call	#_fatfs_cc_f_stat
30308     0C 4E 05 F1 | 	add	fp, #12
3030c     A7 FA 61 FC | 	wrlong	result1, fp
30310     0C 4E 85 F1 | 	sub	fp, #12
30314                 | LR__4882
30314     0C 4E 05 F1 | 	add	fp, #12
30318     A7 28 0A FB | 	rdlong	local02, fp wz
3031c     0C 4E 85 F1 | 	sub	fp, #12
30320     14 00 90 AD |  if_e	jmp	#LR__4883
30324                 | '         return _set_dos_error(r);
30324     0C 4E 05 F1 | 	add	fp, #12
30328     A7 12 02 FB | 	rdlong	arg01, fp
3032c     0C 4E 85 F1 | 	sub	fp, #12
30330     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30334     14 01 90 FD | 	jmp	#LR__4884
30338                 | LR__4883
30338     2C 4F 05 F1 | 	add	fp, #300
3033c     A7 48 6A FC | 	wrlong	#292, fp
30340     14 4F 85 F1 | 	sub	fp, #276
30344     A7 2A C2 FA | 	rdbyte	local03, fp
30348     18 4E 85 F1 | 	sub	fp, #24
3034c     01 2A CE F7 | 	test	local03, #1 wz
30350     2C 4F 05 A1 |  if_e	add	fp, #300
30354     A7 2A 02 AB |  if_e	rdlong	local03, fp
30358     92 2A 46 A5 |  if_e	or	local03, #146
3035c     A7 2A 62 AC |  if_e	wrlong	local03, fp
30360     2C 4F 85 A1 |  if_e	sub	fp, #300
30364     18 4E 05 F1 | 	add	fp, #24
30368     A7 2A C2 FA | 	rdbyte	local03, fp
3036c     18 4E 85 F1 | 	sub	fp, #24
30370     10 2A CE F7 | 	test	local03, #16 wz
30374     2C 4F 05 51 |  if_ne	add	fp, #300
30378     A7 2A 02 5B |  if_ne	rdlong	local03, fp
3037c     08 00 00 5F 
30380     49 2A 46 55 |  if_ne	or	local03, ##4169
30384     A7 2A 62 5C |  if_ne	wrlong	local03, fp
30388     2C 4F 85 51 |  if_ne	sub	fp, #300
3038c     08 4E 05 F1 | 	add	fp, #8
30390     A7 2A 02 FB | 	rdlong	local03, fp
30394     24 4F 05 F1 | 	add	fp, #292
30398     A7 28 02 FB | 	rdlong	local02, fp
3039c     08 2A 06 F1 | 	add	local03, #8
303a0     15 29 62 FC | 	wrlong	local02, local03
303a4     24 4F 85 F1 | 	sub	fp, #292
303a8     A7 2A 02 FB | 	rdlong	local03, fp
303ac     0C 2A 06 F1 | 	add	local03, #12
303b0     15 03 68 FC | 	wrlong	#1, local03
303b4     A7 2A 02 FB | 	rdlong	local03, fp
303b8     08 4E 05 F1 | 	add	fp, #8
303bc     A7 28 02 FB | 	rdlong	local02, fp
303c0     18 2A 06 F1 | 	add	local03, #24
303c4     15 29 62 FC | 	wrlong	local02, local03
303c8     08 4E 85 F1 | 	sub	fp, #8
303cc     A7 2A 02 FB | 	rdlong	local03, fp
303d0     1C 2A 06 F1 | 	add	local03, #28
303d4     01 00 80 FF 
303d8     15 01 68 FC | 	wrlong	##512, local03
303dc     A7 28 02 FB | 	rdlong	local02, fp
303e0     14 2B 02 F6 | 	mov	local03, local02
303e4     18 28 06 F1 | 	add	local02, #24
303e8     14 29 02 FB | 	rdlong	local02, local02
303ec     FF 29 06 F1 | 	add	local02, #511
303f0     14 29 52 F6 | 	abs	local02, local02 wc
303f4     09 28 46 F0 | 	shr	local02, #9
303f8     14 29 82 F6 | 	negc	local02, local02
303fc     20 2A 06 F1 | 	add	local03, #32
30400     15 29 62 FC | 	wrlong	local02, local03
30404     A7 28 02 FB | 	rdlong	local02, fp
30408     14 2B 02 F6 | 	mov	local03, local02
3040c     14 27 02 F6 | 	mov	local01, local02
30410     0C 4E 05 F1 | 	add	fp, #12
30414     A7 12 E2 FA | 	rdword	arg01, fp
30418     02 4E 05 F1 | 	add	fp, #2
3041c     A7 14 E2 FA | 	rdword	arg02, fp
30420     16 4E 85 F1 | 	sub	fp, #22
30424     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0997
30428     2C 26 06 F1 | 	add	local01, #44
3042c     13 FB 61 FC | 	wrlong	result1, local01
30430     28 28 06 F1 | 	add	local02, #40
30434     14 FB 61 FC | 	wrlong	result1, local02
30438     24 2A 06 F1 | 	add	local03, #36
3043c     15 FB 61 FC | 	wrlong	result1, local03
30440                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
30440                 | '     }
30440                 | '     buf->st_mode = mode;
30440                 | '     buf->st_nlink = 1;
30440                 | '     buf->st_size = finfo.fsize;
30440                 | '     buf->st_blksize = 512;
30440                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
30440                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
30440                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30440                 | '     return r;
30440     0C 4E 05 F1 | 	add	fp, #12
30444     A7 FA 01 FB | 	rdlong	result1, fp
30448     0C 4E 85 F1 | 	sub	fp, #12
3044c                 | LR__4884
3044c     A7 F0 03 F6 | 	mov	ptra, fp
30450     B2 00 A0 FD | 	call	#popregs_
30454                 | _fatfs_cc_v_stat_ret
30454     2D 00 64 FD | 	ret
30458                 | 
30458                 | _fatfs_cc_v_read
30458     00 4A 05 F6 | 	mov	COUNT_, #0
3045c     A8 00 A0 FD | 	call	#pushregs_
30460     1C F0 07 F1 | 	add	ptra, #28
30464     04 4E 05 F1 | 	add	fp, #4
30468     A7 12 62 FC | 	wrlong	arg01, fp
3046c     04 4E 05 F1 | 	add	fp, #4
30470     A7 14 62 FC | 	wrlong	arg02, fp
30474     04 4E 05 F1 | 	add	fp, #4
30478     A7 16 62 FC | 	wrlong	arg03, fp
3047c     08 4E 85 F1 | 	sub	fp, #8
30480     A7 12 02 FB | 	rdlong	arg01, fp
30484     09 13 0A FB | 	rdlong	arg01, arg01 wz
30488     0C 4E 05 F1 | 	add	fp, #12
3048c     A7 12 62 FC | 	wrlong	arg01, fp
30490     10 4E 85 F1 | 	sub	fp, #16
30494                 | '         return _seterror( 5 );
30494     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30498     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3049c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
304a0     01 FA 65 A6 |  if_e	neg	result1, #1
304a4     B8 00 90 AD |  if_e	jmp	#LR__4892
304a8     10 4E 05 F1 | 	add	fp, #16
304ac     A7 12 02 FB | 	rdlong	arg01, fp
304b0     02 00 00 FF 
304b4     14 12 06 F1 | 	add	arg01, ##1044
304b8     08 4E 85 F1 | 	sub	fp, #8
304bc     A7 14 02 FB | 	rdlong	arg02, fp
304c0     04 4E 05 F1 | 	add	fp, #4
304c4     A7 16 02 FB | 	rdlong	arg03, fp
304c8     0C 4E 05 F1 | 	add	fp, #12
304cc     A7 18 02 F6 | 	mov	arg04, fp
304d0     18 4E 85 F1 | 	sub	fp, #24
304d4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
304d8     14 4E 05 F1 | 	add	fp, #20
304dc     A7 FA 61 FC | 	wrlong	result1, fp
304e0     14 4E 85 F1 | 	sub	fp, #20
304e4     00 FA 0D F2 | 	cmp	result1, #0 wz
304e8     34 00 90 AD |  if_e	jmp	#LR__4890
304ec     04 4E 05 F1 | 	add	fp, #4
304f0     A7 18 02 FB | 	rdlong	arg04, fp
304f4     0C 17 02 F6 | 	mov	arg03, arg04
304f8     08 18 06 F1 | 	add	arg04, #8
304fc     0C 19 02 FB | 	rdlong	arg04, arg04
30500     20 18 46 F5 | 	or	arg04, #32
30504     08 16 06 F1 | 	add	arg03, #8
30508     0B 19 62 FC | 	wrlong	arg04, arg03
3050c                 | '         fil->state |=  (0x20) ;
3050c                 | '         return _set_dos_error(r);
3050c     10 4E 05 F1 | 	add	fp, #16
30510     A7 12 02 FB | 	rdlong	arg01, fp
30514     14 4E 85 F1 | 	sub	fp, #20
30518     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
3051c     40 00 90 FD | 	jmp	#LR__4892
30520                 | LR__4890
30520     18 4E 05 F1 | 	add	fp, #24
30524     A7 FA 09 FB | 	rdlong	result1, fp wz
30528     18 4E 85 F1 | 	sub	fp, #24
3052c     24 00 90 5D |  if_ne	jmp	#LR__4891
30530     04 4E 05 F1 | 	add	fp, #4
30534     A7 FA 01 FB | 	rdlong	result1, fp
30538     FD 18 02 F6 | 	mov	arg04, result1
3053c     04 4E 85 F1 | 	sub	fp, #4
30540     08 FA 05 F1 | 	add	result1, #8
30544     FD FA 01 FB | 	rdlong	result1, result1
30548     10 FA 45 F5 | 	or	result1, #16
3054c     08 18 06 F1 | 	add	arg04, #8
30550     0C FB 61 FC | 	wrlong	result1, arg04
30554                 | LR__4891
30554                 | '         fil->state |=  (0x10) ;
30554                 | '     }
30554                 | '     return x;
30554     18 4E 05 F1 | 	add	fp, #24
30558     A7 FA 01 FB | 	rdlong	result1, fp
3055c     18 4E 85 F1 | 	sub	fp, #24
30560                 | LR__4892
30560     A7 F0 03 F6 | 	mov	ptra, fp
30564     B2 00 A0 FD | 	call	#popregs_
30568                 | _fatfs_cc_v_read_ret
30568     2D 00 64 FD | 	ret
3056c                 | 
3056c                 | _fatfs_cc_v_write
3056c     00 4A 05 F6 | 	mov	COUNT_, #0
30570     A8 00 A0 FD | 	call	#pushregs_
30574     1C F0 07 F1 | 	add	ptra, #28
30578     04 4E 05 F1 | 	add	fp, #4
3057c     A7 12 62 FC | 	wrlong	arg01, fp
30580     04 4E 05 F1 | 	add	fp, #4
30584     A7 14 62 FC | 	wrlong	arg02, fp
30588     04 4E 05 F1 | 	add	fp, #4
3058c     A7 16 62 FC | 	wrlong	arg03, fp
30590     08 4E 85 F1 | 	sub	fp, #8
30594     A7 12 02 FB | 	rdlong	arg01, fp
30598     09 13 0A FB | 	rdlong	arg01, arg01 wz
3059c     0C 4E 05 F1 | 	add	fp, #12
305a0     A7 12 62 FC | 	wrlong	arg01, fp
305a4     10 4E 85 F1 | 	sub	fp, #16
305a8                 | '         return _seterror( 5 );
305a8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
305ac     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
305b0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
305b4     01 FA 65 A6 |  if_e	neg	result1, #1
305b8     84 00 90 AD |  if_e	jmp	#LR__4901
305bc     10 4E 05 F1 | 	add	fp, #16
305c0     A7 12 02 FB | 	rdlong	arg01, fp
305c4     02 00 00 FF 
305c8     14 12 06 F1 | 	add	arg01, ##1044
305cc     08 4E 85 F1 | 	sub	fp, #8
305d0     A7 14 02 FB | 	rdlong	arg02, fp
305d4     04 4E 05 F1 | 	add	fp, #4
305d8     A7 16 02 FB | 	rdlong	arg03, fp
305dc     0C 4E 05 F1 | 	add	fp, #12
305e0     A7 18 02 F6 | 	mov	arg04, fp
305e4     18 4E 85 F1 | 	sub	fp, #24
305e8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
305ec     14 4E 05 F1 | 	add	fp, #20
305f0     A7 FA 61 FC | 	wrlong	result1, fp
305f4     14 4E 85 F1 | 	sub	fp, #20
305f8     00 FA 0D F2 | 	cmp	result1, #0 wz
305fc     34 00 90 AD |  if_e	jmp	#LR__4900
30600     04 4E 05 F1 | 	add	fp, #4
30604     A7 18 02 FB | 	rdlong	arg04, fp
30608     0C 17 02 F6 | 	mov	arg03, arg04
3060c     08 18 06 F1 | 	add	arg04, #8
30610     0C 19 02 FB | 	rdlong	arg04, arg04
30614     20 18 46 F5 | 	or	arg04, #32
30618     08 16 06 F1 | 	add	arg03, #8
3061c     0B 19 62 FC | 	wrlong	arg04, arg03
30620                 | '         fil->state |=  (0x20) ;
30620                 | '         return _set_dos_error(r);
30620     10 4E 05 F1 | 	add	fp, #16
30624     A7 12 02 FB | 	rdlong	arg01, fp
30628     14 4E 85 F1 | 	sub	fp, #20
3062c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30630     0C 00 90 FD | 	jmp	#LR__4901
30634                 | LR__4900
30634                 | '     }
30634                 | '     return x;
30634     18 4E 05 F1 | 	add	fp, #24
30638     A7 FA 01 FB | 	rdlong	result1, fp
3063c     18 4E 85 F1 | 	sub	fp, #24
30640                 | LR__4901
30640     A7 F0 03 F6 | 	mov	ptra, fp
30644     B2 00 A0 FD | 	call	#popregs_
30648                 | _fatfs_cc_v_write_ret
30648     2D 00 64 FD | 	ret
3064c                 | 
3064c                 | _fatfs_cc_v_lseek
3064c     04 4A 05 F6 | 	mov	COUNT_, #4
30650     A8 00 A0 FD | 	call	#pushregs_
30654     0A 27 02 F6 | 	mov	local01, arg02
30658     0B 29 02 F6 | 	mov	local02, arg03
3065c     09 2B 02 FB | 	rdlong	local03, arg01
30660     02 00 00 FF 
30664     14 2A 0E F1 | 	add	local03, ##1044 wz
30668                 | '         return _seterror( 5 );
30668     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3066c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30670     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30674     01 FA 65 A6 |  if_e	neg	result1, #1
30678     4C 00 90 AD |  if_e	jmp	#LR__4912
3067c     00 28 0E F2 | 	cmp	local02, #0 wz
30680     24 00 90 AD |  if_e	jmp	#LR__4910
30684     01 28 0E F2 | 	cmp	local02, #1 wz
30688     14 2A 06 A1 |  if_e	add	local03, #20
3068c     15 2D 02 AB |  if_e	rdlong	local04, local03
30690     14 2A 86 A1 |  if_e	sub	local03, #20
30694     16 27 02 A1 |  if_e	add	local01, local04
30698     0C 2A 06 51 |  if_ne	add	local03, #12
3069c     15 2D 02 5B |  if_ne	rdlong	local04, local03
306a0     0C 2A 86 51 |  if_ne	sub	local03, #12
306a4     16 27 02 51 |  if_ne	add	local01, local04
306a8                 | LR__4910
306a8     13 15 02 F6 | 	mov	arg02, local01
306ac     15 13 02 F6 | 	mov	arg01, local03
306b0     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
306b4     FD 12 0A F6 | 	mov	arg01, result1 wz
306b8     08 00 90 AD |  if_e	jmp	#LR__4911
306bc                 | '         return _set_dos_error(result);
306bc     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
306c0     04 00 90 FD | 	jmp	#LR__4912
306c4                 | LR__4911
306c4                 | '     }
306c4                 | '     return offset;
306c4     13 FB 01 F6 | 	mov	result1, local01
306c8                 | LR__4912
306c8     A7 F0 03 F6 | 	mov	ptra, fp
306cc     B2 00 A0 FD | 	call	#popregs_
306d0                 | _fatfs_cc_v_lseek_ret
306d0     2D 00 64 FD | 	ret
306d4                 | 
306d4                 | _fatfs_cc_v_ioctl
306d4                 | ' {
306d4                 | '     return _seterror( 10 );
306d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
306d8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
306dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
306e0     01 FA 65 F6 | 	neg	result1, #1
306e4                 | _fatfs_cc_v_ioctl_ret
306e4     2D 00 64 FD | 	ret
306e8                 | 
306e8                 | _fatfs_cc_v_mkdir
306e8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
306ec     FD 12 02 F6 | 	mov	arg01, result1
306f0                 | ' 
306f0                 | '     r = f_mkdir(name);
306f0                 | '     return _set_dos_error(r);
306f0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
306f4                 | _fatfs_cc_v_mkdir_ret
306f4     2D 00 64 FD | 	ret
306f8                 | 
306f8                 | _fatfs_cc_v_remove
306f8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
306fc     FD 12 02 F6 | 	mov	arg01, result1
30700                 | ' 
30700                 | '     r = f_unlink(name);
30700                 | '     return _set_dos_error(r);
30700     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30704                 | _fatfs_cc_v_remove_ret
30704     2D 00 64 FD | 	ret
30708                 | 
30708                 | _fatfs_cc_v_rmdir
30708     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
3070c     FD 12 02 F6 | 	mov	arg01, result1
30710                 | ' 
30710                 | '     r = f_unlink(name);
30710                 | '     return _set_dos_error(r);
30710     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30714                 | _fatfs_cc_v_rmdir_ret
30714     2D 00 64 FD | 	ret
30718                 | 
30718                 | _fatfs_cc_v_rename
30718     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
3071c     FD 12 02 F6 | 	mov	arg01, result1
30720                 | '     return _set_dos_error(r);
30720     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30724                 | _fatfs_cc_v_rename_ret
30724     2D 00 64 FD | 	ret
30728                 | 
30728                 | _fatfs_cc_v_open
30728     07 4A 05 F6 | 	mov	COUNT_, #7
3072c     A8 00 A0 FD | 	call	#pushregs_
30730     09 27 02 F6 | 	mov	local01, arg01
30734     0A 29 02 F6 | 	mov	local02, arg02
30738     0B 2B 02 F6 | 	mov	local03, arg03
3073c     03 00 00 FF 
30740     3C 12 06 F6 | 	mov	arg01, ##1596
30744                 | '     return _gc_alloc(size);
30744     10 14 06 F6 | 	mov	arg02, #16
30748     DC 55 BF FD | 	call	#__system___gc_doalloc
3074c     FD 2C 0A F6 | 	mov	local04, result1 wz
30750                 | '       return _seterror( 7 );
30750     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30754     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
30758     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3075c     01 FA 65 A6 |  if_e	neg	result1, #1
30760     98 00 90 AD |  if_e	jmp	#LR__4926
30764     16 13 02 F6 | 	mov	arg01, local04
30768     00 14 06 F6 | 	mov	arg02, #0
3076c     03 00 00 FF 
30770     3C 16 06 F6 | 	mov	arg03, ##1596
30774     98 00 A0 FD | 	call	#\builtin_bytefill_
30778                 | '   switch (flags & 3) {
30778     15 2F 02 F6 | 	mov	local05, local03
3077c     03 2E 0E F5 | 	and	local05, #3 wz
30780     0C 00 90 AD |  if_e	jmp	#LR__4920
30784     01 2E 0E F2 | 	cmp	local05, #1 wz
30788     0C 00 90 AD |  if_e	jmp	#LR__4921
3078c     10 00 90 FD | 	jmp	#LR__4922
30790                 | LR__4920
30790     01 30 06 F6 | 	mov	local06, #1
30794                 | '       fs_flags =  0x01 ;
30794                 | '       break;
30794     0C 00 90 FD | 	jmp	#LR__4923
30798                 | LR__4921
30798     02 30 06 F6 | 	mov	local06, #2
3079c                 | '       fs_flags =  0x02 ;
3079c                 | '       break;
3079c     04 00 90 FD | 	jmp	#LR__4923
307a0                 | LR__4922
307a0     03 30 06 F6 | 	mov	local06, #3
307a4                 | '       fs_flags =  0x01  |  0x02 ;
307a4                 | '       break;
307a4                 | LR__4923
307a4     08 2A CE F7 | 	test	local03, #8 wz
307a8     18 30 46 55 |  if_ne	or	local06, #24
307ac     08 00 90 5D |  if_ne	jmp	#LR__4924
307b0     20 2A CE F7 | 	test	local03, #32 wz
307b4     30 30 46 55 |  if_ne	or	local06, #48
307b8                 | LR__4924
307b8     02 00 00 FF 
307bc     14 2C 06 F1 | 	add	local04, ##1044
307c0     16 13 02 F6 | 	mov	arg01, local04
307c4     02 00 00 FF 
307c8     14 2C 86 F1 | 	sub	local04, ##1044
307cc     14 15 02 F6 | 	mov	arg02, local02
307d0     18 17 02 F6 | 	mov	arg03, local06
307d4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
307d8     FD 32 0A F6 | 	mov	local07, result1 wz
307dc     14 00 90 AD |  if_e	jmp	#LR__4925
307e0     16 13 02 F6 | 	mov	arg01, local04
307e4                 | '     return _gc_free(ptr);
307e4     4C 56 BF FD | 	call	#__system___gc_free
307e8                 | '     free(f);
307e8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
307e8                 | '     return _set_dos_error(r);
307e8     19 13 02 F6 | 	mov	arg01, local07
307ec     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
307f0     08 00 90 FD | 	jmp	#LR__4926
307f4                 | LR__4925
307f4     13 2D 62 FC | 	wrlong	local04, local01
307f8                 | '   }
307f8                 | '   fil->vfsdata = f;
307f8                 | '   return 0;
307f8     00 FA 05 F6 | 	mov	result1, #0
307fc                 | LR__4926
307fc     A7 F0 03 F6 | 	mov	ptra, fp
30800     B2 00 A0 FD | 	call	#popregs_
30804                 | _fatfs_cc_v_open_ret
30804     2D 00 64 FD | 	ret
30808                 | 
30808                 | _fatfs_cc_v_flush
30808     09 13 02 FB | 	rdlong	arg01, arg01
3080c     02 00 00 FF 
30810     14 12 0E F1 | 	add	arg01, ##1044 wz
30814                 | '         return _seterror( 5 );
30814     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30818     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3081c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30820     01 FA 65 A6 |  if_e	neg	result1, #1
30824     0C 00 90 AD |  if_e	jmp	#LR__4930
30828     00 DA BF FD | 	call	#_fatfs_cc_f_sync
3082c     FD 12 02 F6 | 	mov	arg01, result1
30830                 | '     }
30830                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30830                 | '     result = f_sync(f);
30830                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30830                 | '     return _set_dos_error(result);
30830     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30834                 | LR__4930
30834                 | _fatfs_cc_v_flush_ret
30834     2D 00 64 FD | 	ret
30838                 | 
30838                 | _fatfs_cc_v_init
30838                 | ' {
30838                 | '     return 0;
30838     00 FA 05 F6 | 	mov	result1, #0
3083c                 | _fatfs_cc_v_init_ret
3083c     2D 00 64 FD | 	ret
30840                 | 
30840                 | _fatfs_cc_v_deinit
30840     8B 01 00 FF 
30844     B4 15 06 F6 | 	mov	arg02, ##@LR__5126
30848     00 12 06 F6 | 	mov	arg01, #0
3084c     00 16 06 F6 | 	mov	arg03, #0
30850     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
30854     01 00 00 FF 
30858     08 E4 05 F1 | 	add	objptr, ##520
3085c     F2 12 02 FB | 	rdlong	arg01, objptr
30860     04 E4 05 F1 | 	add	objptr, #4
30864     F2 14 02 FB | 	rdlong	arg02, objptr
30868     01 00 00 FF 
3086c     0C E4 85 F1 | 	sub	objptr, ##524
30870     30 3D BF FD | 	call	#__system___freepins
30874                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30874                 | '     _freepins(f_pinmask);
30874                 | '     return 0;
30874     00 FA 05 F6 | 	mov	result1, #0
30878                 | _fatfs_cc_v_deinit_ret
30878     2D 00 64 FD | 	ret
3087c                 | 
3087c                 | _fatfs_cc_get_vfs
3087c     01 4A 05 F6 | 	mov	COUNT_, #1
30880     A8 00 A0 FD | 	call	#pushregs_
30884     09 27 02 F6 | 	mov	local01, arg01
30888     50 12 06 F6 | 	mov	arg01, #80
3088c     68 54 BF FD | 	call	#__system___gc_alloc_managed
30890     FD 12 02 F6 | 	mov	arg01, result1
30894     F2 FA 01 F6 | 	mov	result1, objptr
30898     00 08 05 FF 
3089c     00 FA 45 F5 | 	or	result1, ##168820736
308a0     09 FB 61 FC | 	wrlong	result1, arg01
308a4     F2 FA 01 F6 | 	mov	result1, objptr
308a8     00 10 05 FF 
308ac     00 FA 45 F5 | 	or	result1, ##169869312
308b0     04 12 06 F1 | 	add	arg01, #4
308b4     09 FB 61 FC | 	wrlong	result1, arg01
308b8     F2 FA 01 F6 | 	mov	result1, objptr
308bc     00 18 05 FF 
308c0     00 FA 45 F5 | 	or	result1, ##170917888
308c4     04 12 06 F1 | 	add	arg01, #4
308c8     09 FB 61 FC | 	wrlong	result1, arg01
308cc     F2 FA 01 F6 | 	mov	result1, objptr
308d0     00 20 05 FF 
308d4     00 FA 45 F5 | 	or	result1, ##171966464
308d8     04 12 06 F1 | 	add	arg01, #4
308dc     09 FB 61 FC | 	wrlong	result1, arg01
308e0     F2 FA 01 F6 | 	mov	result1, objptr
308e4     00 28 05 FF 
308e8     00 FA 45 F5 | 	or	result1, ##173015040
308ec     04 12 06 F1 | 	add	arg01, #4
308f0     09 FB 61 FC | 	wrlong	result1, arg01
308f4     04 12 06 F1 | 	add	arg01, #4
308f8     09 01 68 FC | 	wrlong	#0, arg01
308fc     04 12 06 F1 | 	add	arg01, #4
30900     09 27 62 FC | 	wrlong	local01, arg01
30904     04 12 06 F1 | 	add	arg01, #4
30908     09 01 68 FC | 	wrlong	#0, arg01
3090c     F2 FA 01 F6 | 	mov	result1, objptr
30910     00 30 05 FF 
30914     00 FA 45 F5 | 	or	result1, ##174063616
30918     04 12 06 F1 | 	add	arg01, #4
3091c     09 FB 61 FC | 	wrlong	result1, arg01
30920     F2 FA 01 F6 | 	mov	result1, objptr
30924     00 38 05 FF 
30928     00 FA 45 F5 | 	or	result1, ##175112192
3092c     04 12 06 F1 | 	add	arg01, #4
30930     09 FB 61 FC | 	wrlong	result1, arg01
30934     F2 FA 01 F6 | 	mov	result1, objptr
30938     00 40 05 FF 
3093c     00 FA 45 F5 | 	or	result1, ##176160768
30940     04 12 06 F1 | 	add	arg01, #4
30944     09 FB 61 FC | 	wrlong	result1, arg01
30948     F2 FA 01 F6 | 	mov	result1, objptr
3094c     00 48 05 FF 
30950     00 FA 45 F5 | 	or	result1, ##177209344
30954     04 12 06 F1 | 	add	arg01, #4
30958     09 FB 61 FC | 	wrlong	result1, arg01
3095c     F2 FA 01 F6 | 	mov	result1, objptr
30960     00 50 05 FF 
30964     00 FA 45 F5 | 	or	result1, ##178257920
30968     04 12 06 F1 | 	add	arg01, #4
3096c     09 FB 61 FC | 	wrlong	result1, arg01
30970     F2 FA 01 F6 | 	mov	result1, objptr
30974     00 58 05 FF 
30978     00 FA 45 F5 | 	or	result1, ##179306496
3097c     04 12 06 F1 | 	add	arg01, #4
30980     09 FB 61 FC | 	wrlong	result1, arg01
30984     F2 FA 01 F6 | 	mov	result1, objptr
30988     00 60 05 FF 
3098c     00 FA 45 F5 | 	or	result1, ##180355072
30990     04 12 06 F1 | 	add	arg01, #4
30994     09 FB 61 FC | 	wrlong	result1, arg01
30998     F2 FA 01 F6 | 	mov	result1, objptr
3099c     00 68 05 FF 
309a0     00 FA 45 F5 | 	or	result1, ##181403648
309a4     04 12 06 F1 | 	add	arg01, #4
309a8     09 FB 61 FC | 	wrlong	result1, arg01
309ac     F2 FA 01 F6 | 	mov	result1, objptr
309b0     00 70 05 FF 
309b4     00 FA 45 F5 | 	or	result1, ##182452224
309b8     04 12 06 F1 | 	add	arg01, #4
309bc     09 FB 61 FC | 	wrlong	result1, arg01
309c0     F2 FA 01 F6 | 	mov	result1, objptr
309c4     00 78 05 FF 
309c8     00 FA 45 F5 | 	or	result1, ##183500800
309cc     04 12 06 F1 | 	add	arg01, #4
309d0     09 FB 61 FC | 	wrlong	result1, arg01
309d4     F2 FA 01 F6 | 	mov	result1, objptr
309d8     00 80 05 FF 
309dc     00 FA 45 F5 | 	or	result1, ##184549376
309e0     04 12 06 F1 | 	add	arg01, #4
309e4     09 FB 61 FC | 	wrlong	result1, arg01
309e8     F2 FA 01 F6 | 	mov	result1, objptr
309ec     00 88 05 FF 
309f0     00 FA 45 F5 | 	or	result1, ##185597952
309f4     04 12 06 F1 | 	add	arg01, #4
309f8     09 FB 61 FC | 	wrlong	result1, arg01
309fc     4C 12 86 F1 | 	sub	arg01, #76
30a00                 | ' 
30a00                 | '     v->close = &v_close;
30a00                 | '     v->read = &v_read;
30a00                 | '     v->write = &v_write;
30a00                 | '     v->lseek = &v_lseek;
30a00                 | '     v->ioctl = &v_ioctl;
30a00                 | '     v->flush = 0;
30a00                 | '     v->vfs_data = ptr;
30a00                 | '     v->reserved = 0;
30a00                 | ' 
30a00                 | '     v->open = &v_open;
30a00                 | '     v->creat = &v_creat;
30a00                 | '     v->opendir = &v_opendir;
30a00                 | '     v->closedir = &v_closedir;
30a00                 | '     v->readdir = &v_readdir;
30a00                 | '     v->stat = &v_stat;
30a00                 | ' 
30a00                 | '     v->mkdir = &v_mkdir;
30a00                 | '     v->rmdir = &v_rmdir;
30a00                 | ' 
30a00                 | '     v->remove = &v_remove;
30a00                 | '     v->rename = &v_rename;
30a00                 | ' 
30a00                 | '     v->init = &v_init;
30a00                 | '     v->deinit = &v_deinit;
30a00                 | ' 
30a00                 | '     return v;
30a00     09 FB 01 F6 | 	mov	result1, arg01
30a04     A7 F0 03 F6 | 	mov	ptra, fp
30a08     B2 00 A0 FD | 	call	#popregs_
30a0c                 | _fatfs_cc_get_vfs_ret
30a0c     2D 00 64 FD | 	ret
30a10                 | 
30a10                 | _fatfs_cc_xmit_mmc_1150
30a10     01 00 00 FF 
30a14     10 E4 05 F1 | 	add	objptr, ##528
30a18     F2 00 02 FB | 	rdlong	_var01, objptr
30a1c     08 E4 05 F1 | 	add	objptr, #8
30a20     F2 02 02 FB | 	rdlong	_var02, objptr
30a24     01 00 00 FF 
30a28     18 E4 85 F1 | 	sub	objptr, ##536
30a2c     40 02 62 FD | 	dirl	_var02
30a30     28 02 64 FD | 	setq	#1
30a34     09 05 02 FB | 	rdlong	_var03, arg01
30a38     69 04 62 FD | 	rev	_var03
30a3c     1B 04 FE F9 | 	movbyts	_var03, #27
30a40     01 05 22 FC | 	wypin	_var03, _var02
30a44     0A 05 02 F6 | 	mov	_var03, arg02
30a48     02 14 4E F0 | 	shr	arg02, #2 wz
30a4c     03 04 66 F0 | 	shl	_var03, #3
30a50     00 05 22 FC | 	wypin	_var03, _var01
30a54     41 02 62 FD | 	dirh	_var02
30a58     08 12 06 F1 | 	add	arg01, #8
30a5c     69 06 62 FD | 	rev	_var04
30a60     1B 06 FE F9 | 	movbyts	_var04, #27
30a64                 | LR__4940
30a64     01 07 22 5C |  if_ne	wypin	_var04, _var02
30a68     09 07 02 5B |  if_ne	rdlong	_var04, arg01
30a6c     04 12 06 51 |  if_ne	add	arg01, #4
30a70     69 06 62 5D |  if_ne	rev	_var04
30a74     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
30a78                 | LR__4941
30a78     40 02 72 5D |  if_ne	testp	_var02 wc
30a7c     F8 FF 9F 1D |  if_a	jmp	#LR__4941
30a80     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4940
30a84                 | LR__4942
30a84     40 00 72 FD | 	testp	_var01 wc
30a88     F8 FF 9F 3D |  if_ae	jmp	#LR__4942
30a8c     40 02 62 FD | 	dirl	_var02
30a90     FF FF FF FF 
30a94     01 FF 2B FC | 	wypin	##-1, _var02
30a98     41 02 62 FD | 	dirh	_var02
30a9c                 | _fatfs_cc_xmit_mmc_1150_ret
30a9c     2D 00 64 FD | 	ret
30aa0                 | 
30aa0                 | _fatfs_cc_rcvr_mmc_1157
30aa0     01 00 00 FF 
30aa4     10 E4 05 F1 | 	add	objptr, ##528
30aa8     F2 00 02 FB | 	rdlong	_var01, objptr
30aac     0C E4 05 F1 | 	add	objptr, #12
30ab0     F2 02 02 FB | 	rdlong	_var02, objptr
30ab4     01 00 00 FF 
30ab8     1C E4 85 F1 | 	sub	objptr, ##540
30abc     01 03 08 FC | 	akpin	_var02
30ac0     0A 05 0A F6 | 	mov	_var03, arg02 wz
30ac4     02 04 4E F0 | 	shr	_var03, #2 wz
30ac8     30 00 90 AD |  if_e	jmp	#LR__4952
30acc     02 07 02 F6 | 	mov	_var04, _var03
30ad0     05 06 66 F0 | 	shl	_var04, #5
30ad4     00 07 22 FC | 	wypin	_var04, _var01
30ad8     01 7F 18 FC | 	wxpin	#63, _var02
30adc                 | LR__4950
30adc                 | LR__4951
30adc     40 02 72 FD | 	testp	_var02 wc
30ae0     F8 FF 9F 3D |  if_ae	jmp	#LR__4951
30ae4     01 07 8A FA | 	rdpin	_var04, _var02
30ae8     69 06 62 FD | 	rev	_var04
30aec     1B 06 FE F9 | 	movbyts	_var04, #27
30af0     09 07 62 FC | 	wrlong	_var04, arg01
30af4     04 12 06 F1 | 	add	arg01, #4
30af8     F8 05 6E FB | 	djnz	_var03, #LR__4950
30afc                 | LR__4952
30afc     03 14 0E F5 | 	and	arg02, #3 wz
30b00     24 00 90 AD |  if_e	jmp	#LR__4955
30b04     01 4F 18 FC | 	wxpin	#39, _var02
30b08                 | LR__4953
30b08     00 11 28 FC | 	wypin	#8, _var01
30b0c                 | LR__4954
30b0c     40 02 72 FD | 	testp	_var02 wc
30b10     F8 FF 9F 3D |  if_ae	jmp	#LR__4954
30b14     01 07 8A FA | 	rdpin	_var04, _var02
30b18     69 06 62 FD | 	rev	_var04
30b1c     09 07 42 FC | 	wrbyte	_var04, arg01
30b20     01 12 06 F1 | 	add	arg01, #1
30b24     F8 15 6E FB | 	djnz	arg02, #LR__4953
30b28                 | LR__4955
30b28                 | _fatfs_cc_rcvr_mmc_1157_ret
30b28     2D 00 64 FD | 	ret
30b2c                 | 
30b2c                 | _fatfs_cc_wait_ready_1161
30b2c     01 4A 05 F6 | 	mov	COUNT_, #1
30b30     A8 00 A0 FD | 	call	#pushregs_
30b34     10 F0 07 F1 | 	add	ptra, #16
30b38     1A FA 61 FD | 	getct	result1
30b3c     08 4E 05 F1 | 	add	fp, #8
30b40     A7 FA 61 FC | 	wrlong	result1, fp
30b44     14 26 06 FB | 	rdlong	local01, #20
30b48     01 26 46 F0 | 	shr	local01, #1
30b4c     04 4E 05 F1 | 	add	fp, #4
30b50     A7 26 62 FC | 	wrlong	local01, fp
30b54     0C 4E 85 F1 | 	sub	fp, #12
30b58                 | ' {
30b58                 | ' 	BYTE d;
30b58                 | ' 	UINT tmr, tmout;
30b58                 | ' 
30b58                 | ' 	tmr = _cnt();
30b58                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
30b58                 | ' 	for(;;) {
30b58                 | LR__4960
30b58     04 4E 05 F1 | 	add	fp, #4
30b5c     A7 12 02 F6 | 	mov	arg01, fp
30b60     04 4E 85 F1 | 	sub	fp, #4
30b64     01 14 06 F6 | 	mov	arg02, #1
30b68     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30b6c     04 4E 05 F1 | 	add	fp, #4
30b70     A7 26 C2 FA | 	rdbyte	local01, fp
30b74     04 4E 85 F1 | 	sub	fp, #4
30b78     FF 26 0E F2 | 	cmp	local01, #255 wz
30b7c     01 FA 05 A6 |  if_e	mov	result1, #1
30b80     28 00 90 AD |  if_e	jmp	#LR__4961
30b84     1A FA 61 FD | 	getct	result1
30b88     08 4E 05 F1 | 	add	fp, #8
30b8c     A7 26 02 FB | 	rdlong	local01, fp
30b90     13 FB 81 F1 | 	sub	result1, local01
30b94     04 4E 05 F1 | 	add	fp, #4
30b98     A7 26 02 FB | 	rdlong	local01, fp
30b9c     0C 4E 85 F1 | 	sub	fp, #12
30ba0     13 FB 11 F2 | 	cmp	result1, local01 wc
30ba4     00 FA 05 36 |  if_ae	mov	result1, #0
30ba8     AC FF 9F CD |  if_b	jmp	#LR__4960
30bac                 | LR__4961
30bac     A7 F0 03 F6 | 	mov	ptra, fp
30bb0     B2 00 A0 FD | 	call	#popregs_
30bb4                 | _fatfs_cc_wait_ready_1161_ret
30bb4     2D 00 64 FD | 	ret
30bb8                 | 
30bb8                 | _fatfs_cc_deselect_1167
30bb8     00 4A 05 F6 | 	mov	COUNT_, #0
30bbc     A8 00 A0 FD | 	call	#pushregs_
30bc0     14 F0 07 F1 | 	add	ptra, #20
30bc4     01 00 00 FF 
30bc8     14 E4 05 F1 | 	add	objptr, ##532
30bcc     F2 14 02 FB | 	rdlong	arg02, objptr
30bd0     04 4E 05 F1 | 	add	fp, #4
30bd4     A7 14 62 FC | 	wrlong	arg02, fp
30bd8     04 E4 85 F1 | 	sub	objptr, #4
30bdc     F2 14 02 FB | 	rdlong	arg02, objptr
30be0     04 4E 05 F1 | 	add	fp, #4
30be4     A7 14 62 FC | 	wrlong	arg02, fp
30be8     08 E4 05 F1 | 	add	objptr, #8
30bec     F2 14 02 FB | 	rdlong	arg02, objptr
30bf0     04 4E 05 F1 | 	add	fp, #4
30bf4     A7 14 62 FC | 	wrlong	arg02, fp
30bf8     04 E4 05 F1 | 	add	objptr, #4
30bfc     F2 14 02 FB | 	rdlong	arg02, objptr
30c00     01 00 00 FF 
30c04     1C E4 85 F1 | 	sub	objptr, ##540
30c08     04 4E 05 F1 | 	add	fp, #4
30c0c     A7 14 62 FC | 	wrlong	arg02, fp
30c10     0C 4E 85 F1 | 	sub	fp, #12
30c14     A7 12 02 FB | 	rdlong	arg01, fp
30c18     04 4E 85 F1 | 	sub	fp, #4
30c1c     59 12 62 FD | 	drvh	arg01
30c20     1F 20 64 FD | 	waitx	#16
30c24     A7 12 02 F6 | 	mov	arg01, fp
30c28     01 14 06 F6 | 	mov	arg02, #1
30c2c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30c30     A7 F0 03 F6 | 	mov	ptra, fp
30c34     B2 00 A0 FD | 	call	#popregs_
30c38                 | _fatfs_cc_deselect_1167_ret
30c38     2D 00 64 FD | 	ret
30c3c                 | 
30c3c                 | _fatfs_cc_select_1171
30c3c     00 4A 05 F6 | 	mov	COUNT_, #0
30c40     A8 00 A0 FD | 	call	#pushregs_
30c44     10 F0 07 F1 | 	add	ptra, #16
30c48     01 00 00 FF 
30c4c     14 E4 05 F1 | 	add	objptr, ##532
30c50     F2 14 02 FB | 	rdlong	arg02, objptr
30c54     08 4E 05 F1 | 	add	fp, #8
30c58     A7 14 62 FC | 	wrlong	arg02, fp
30c5c     08 E4 05 F1 | 	add	objptr, #8
30c60     F2 12 02 FB | 	rdlong	arg01, objptr
30c64     01 00 00 FF 
30c68     1C E4 85 F1 | 	sub	objptr, ##540
30c6c     04 4E 05 F1 | 	add	fp, #4
30c70     A7 12 62 FC | 	wrlong	arg01, fp
30c74     50 12 62 FD | 	fltl	arg01
30c78     04 4E 85 F1 | 	sub	fp, #4
30c7c     A7 12 02 FB | 	rdlong	arg01, fp
30c80     58 12 62 FD | 	drvl	arg01
30c84     1F 20 64 FD | 	waitx	#16
30c88     04 4E 05 F1 | 	add	fp, #4
30c8c     A7 12 02 FB | 	rdlong	arg01, fp
30c90     41 12 62 FD | 	dirh	arg01
30c94     08 4E 85 F1 | 	sub	fp, #8
30c98     A7 12 02 F6 | 	mov	arg01, fp
30c9c     04 4E 85 F1 | 	sub	fp, #4
30ca0     01 14 06 F6 | 	mov	arg02, #1
30ca4     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30ca8     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1161
30cac     00 FA 0D F2 | 	cmp	result1, #0 wz
30cb0     01 FA 05 56 |  if_ne	mov	result1, #1
30cb4     08 00 90 5D |  if_ne	jmp	#LR__4970
30cb8     FC FE BF FD | 	call	#_fatfs_cc_deselect_1167
30cbc                 | ' 
30cbc                 | ' 	deselect();
30cbc                 | ' 	return 0;
30cbc     00 FA 05 F6 | 	mov	result1, #0
30cc0                 | LR__4970
30cc0     A7 F0 03 F6 | 	mov	ptra, fp
30cc4     B2 00 A0 FD | 	call	#popregs_
30cc8                 | _fatfs_cc_select_1171_ret
30cc8     2D 00 64 FD | 	ret
30ccc                 | 
30ccc                 | _fatfs_cc_rcvr_datablock_1175
30ccc     01 4A 05 F6 | 	mov	COUNT_, #1
30cd0     A8 00 A0 FD | 	call	#pushregs_
30cd4     18 F0 07 F1 | 	add	ptra, #24
30cd8     04 4E 05 F1 | 	add	fp, #4
30cdc     A7 12 62 FC | 	wrlong	arg01, fp
30ce0     04 4E 05 F1 | 	add	fp, #4
30ce4     A7 14 62 FC | 	wrlong	arg02, fp
30ce8     1A FA 61 FD | 	getct	result1
30cec     08 4E 05 F1 | 	add	fp, #8
30cf0     A7 FA 61 FC | 	wrlong	result1, fp
30cf4     14 26 06 FB | 	rdlong	local01, #20
30cf8     03 26 46 F0 | 	shr	local01, #3
30cfc     04 4E 05 F1 | 	add	fp, #4
30d00     A7 26 62 FC | 	wrlong	local01, fp
30d04     14 4E 85 F1 | 	sub	fp, #20
30d08                 | ' 	BYTE *buff,
30d08                 | ' 	UINT btr
30d08                 | ' )
30d08                 | ' {
30d08                 | ' 	BYTE d[2];
30d08                 | ' 	UINT tmr, tmout;
30d08                 | ' 
30d08                 | ' 	tmr = _cnt();
30d08                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
30d08                 | ' 	for(;;) {
30d08                 | LR__4980
30d08     0C 4E 05 F1 | 	add	fp, #12
30d0c     A7 12 02 F6 | 	mov	arg01, fp
30d10     0C 4E 85 F1 | 	sub	fp, #12
30d14     01 14 06 F6 | 	mov	arg02, #1
30d18     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30d1c     0C 4E 05 F1 | 	add	fp, #12
30d20     A7 26 C2 FA | 	rdbyte	local01, fp
30d24     0C 4E 85 F1 | 	sub	fp, #12
30d28     FF 26 0E F2 | 	cmp	local01, #255 wz
30d2c     28 00 90 5D |  if_ne	jmp	#LR__4981
30d30     1A FA 61 FD | 	getct	result1
30d34     FD 26 02 F6 | 	mov	local01, result1
30d38     10 4E 05 F1 | 	add	fp, #16
30d3c     A7 14 02 FB | 	rdlong	arg02, fp
30d40     0A 27 82 F1 | 	sub	local01, arg02
30d44     04 4E 05 F1 | 	add	fp, #4
30d48     A7 14 02 FB | 	rdlong	arg02, fp
30d4c     14 4E 85 F1 | 	sub	fp, #20
30d50     0A 27 12 F2 | 	cmp	local01, arg02 wc
30d54     B0 FF 9F CD |  if_b	jmp	#LR__4980
30d58                 | LR__4981
30d58     0C 4E 05 F1 | 	add	fp, #12
30d5c     A7 26 C2 FA | 	rdbyte	local01, fp
30d60     0C 4E 85 F1 | 	sub	fp, #12
30d64     FE 26 0E F2 | 	cmp	local01, #254 wz
30d68     00 FA 05 56 |  if_ne	mov	result1, #0
30d6c     30 00 90 5D |  if_ne	jmp	#LR__4982
30d70     04 4E 05 F1 | 	add	fp, #4
30d74     A7 12 02 FB | 	rdlong	arg01, fp
30d78     04 4E 05 F1 | 	add	fp, #4
30d7c     A7 14 02 FB | 	rdlong	arg02, fp
30d80     08 4E 85 F1 | 	sub	fp, #8
30d84     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30d88     0C 4E 05 F1 | 	add	fp, #12
30d8c     A7 12 02 F6 | 	mov	arg01, fp
30d90     0C 4E 85 F1 | 	sub	fp, #12
30d94     02 14 06 F6 | 	mov	arg02, #2
30d98     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30d9c                 | ' 
30d9c                 | ' 	rcvr_mmc(buff, btr);
30d9c                 | ' 	rcvr_mmc(d, 2);
30d9c                 | ' 
30d9c                 | ' 	return 1;
30d9c     01 FA 05 F6 | 	mov	result1, #1
30da0                 | LR__4982
30da0     A7 F0 03 F6 | 	mov	ptra, fp
30da4     B2 00 A0 FD | 	call	#popregs_
30da8                 | _fatfs_cc_rcvr_datablock_1175_ret
30da8     2D 00 64 FD | 	ret
30dac                 | 
30dac                 | _fatfs_cc_xmit_datablock_1177
30dac     00 4A 05 F6 | 	mov	COUNT_, #0
30db0     A8 00 A0 FD | 	call	#pushregs_
30db4     10 F0 07 F1 | 	add	ptra, #16
30db8     04 4E 05 F1 | 	add	fp, #4
30dbc     A7 12 62 FC | 	wrlong	arg01, fp
30dc0     04 4E 05 F1 | 	add	fp, #4
30dc4     A7 14 42 FC | 	wrbyte	arg02, fp
30dc8     08 4E 85 F1 | 	sub	fp, #8
30dcc     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1161
30dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
30dd4     00 FA 05 A6 |  if_e	mov	result1, #0
30dd8     90 00 90 AD |  if_e	jmp	#LR__4991
30ddc     08 4E 05 F1 | 	add	fp, #8
30de0     A7 14 C2 FA | 	rdbyte	arg02, fp
30de4     04 4E 05 F1 | 	add	fp, #4
30de8     A7 14 42 FC | 	wrbyte	arg02, fp
30dec     A7 12 02 F6 | 	mov	arg01, fp
30df0     0C 4E 85 F1 | 	sub	fp, #12
30df4     01 14 06 F6 | 	mov	arg02, #1
30df8     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1150
30dfc     08 4E 05 F1 | 	add	fp, #8
30e00     A7 14 C2 FA | 	rdbyte	arg02, fp
30e04     08 4E 85 F1 | 	sub	fp, #8
30e08     FD 14 0E F2 | 	cmp	arg02, #253 wz
30e0c     58 00 90 AD |  if_e	jmp	#LR__4990
30e10     04 4E 05 F1 | 	add	fp, #4
30e14     A7 12 02 FB | 	rdlong	arg01, fp
30e18     04 4E 85 F1 | 	sub	fp, #4
30e1c     09 14 C6 F9 | 	decod	arg02, #9
30e20     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1150
30e24     0C 4E 05 F1 | 	add	fp, #12
30e28     A7 12 02 F6 | 	mov	arg01, fp
30e2c     0C 4E 85 F1 | 	sub	fp, #12
30e30     02 14 06 F6 | 	mov	arg02, #2
30e34     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30e38     0C 4E 05 F1 | 	add	fp, #12
30e3c     A7 12 02 F6 | 	mov	arg01, fp
30e40     0C 4E 85 F1 | 	sub	fp, #12
30e44     01 14 06 F6 | 	mov	arg02, #1
30e48     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30e4c     0C 4E 05 F1 | 	add	fp, #12
30e50     A7 14 C2 FA | 	rdbyte	arg02, fp
30e54     0C 4E 85 F1 | 	sub	fp, #12
30e58     1F 14 06 F5 | 	and	arg02, #31
30e5c     05 14 0E F2 | 	cmp	arg02, #5 wz
30e60                 | ' 			return 0;
30e60     00 FA 05 56 |  if_ne	mov	result1, #0
30e64     04 00 90 5D |  if_ne	jmp	#LR__4991
30e68                 | LR__4990
30e68                 | ' 	}
30e68                 | ' 
30e68                 | ' 	return 1;
30e68     01 FA 05 F6 | 	mov	result1, #1
30e6c                 | LR__4991
30e6c     A7 F0 03 F6 | 	mov	ptra, fp
30e70     B2 00 A0 FD | 	call	#popregs_
30e74                 | _fatfs_cc_xmit_datablock_1177_ret
30e74     2D 00 64 FD | 	ret
30e78                 | 
30e78                 | _fatfs_cc_send_cmd_1181
30e78     01 4A 05 F6 | 	mov	COUNT_, #1
30e7c     A8 00 A0 FD | 	call	#pushregs_
30e80     1C F0 07 F1 | 	add	ptra, #28
30e84                 | _fatfs_cc_send_cmd_1181_enter
30e84     04 4E 05 F1 | 	add	fp, #4
30e88     A7 12 42 FC | 	wrbyte	arg01, fp
30e8c     04 4E 05 F1 | 	add	fp, #4
30e90     A7 14 62 FC | 	wrlong	arg02, fp
30e94     04 4E 85 F1 | 	sub	fp, #4
30e98     A7 FA C1 FA | 	rdbyte	result1, fp
30e9c     04 4E 85 F1 | 	sub	fp, #4
30ea0     80 FA CD F7 | 	test	result1, #128 wz
30ea4     44 00 90 AD |  if_e	jmp	#LR__5000
30ea8     04 4E 05 F1 | 	add	fp, #4
30eac     A7 14 C2 FA | 	rdbyte	arg02, fp
30eb0     7F 14 06 F5 | 	and	arg02, #127
30eb4     A7 14 42 FC | 	wrbyte	arg02, fp
30eb8     04 4E 85 F1 | 	sub	fp, #4
30ebc     37 12 06 F6 | 	mov	arg01, #55
30ec0     00 14 06 F6 | 	mov	arg02, #0
30ec4     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1181
30ec8     0C 4E 05 F1 | 	add	fp, #12
30ecc     A7 FA 41 FC | 	wrbyte	result1, fp
30ed0     A7 14 C2 FA | 	rdbyte	arg02, fp
30ed4     0C 4E 85 F1 | 	sub	fp, #12
30ed8     02 14 16 F2 | 	cmp	arg02, #2 wc
30edc     0C 4E 05 31 |  if_ae	add	fp, #12
30ee0     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
30ee4     0C 4E 85 31 |  if_ae	sub	fp, #12
30ee8     6C 01 90 3D |  if_ae	jmp	#LR__5004
30eec                 | LR__5000
30eec     04 4E 05 F1 | 	add	fp, #4
30ef0     A7 14 C2 FA | 	rdbyte	arg02, fp
30ef4     04 4E 85 F1 | 	sub	fp, #4
30ef8     0C 14 0E F2 | 	cmp	arg02, #12 wz
30efc     14 00 90 AD |  if_e	jmp	#LR__5001
30f00     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1167
30f04     34 FD BF FD | 	call	#_fatfs_cc_select_1171
30f08     00 FA 0D F2 | 	cmp	result1, #0 wz
30f0c     FF FA 05 A6 |  if_e	mov	result1, #255
30f10     44 01 90 AD |  if_e	jmp	#LR__5004
30f14                 | LR__5001
30f14     04 4E 05 F1 | 	add	fp, #4
30f18     A7 14 C2 FA | 	rdbyte	arg02, fp
30f1c     40 FA 05 F6 | 	mov	result1, #64
30f20     0A FB 41 F5 | 	or	result1, arg02
30f24     10 4E 05 F1 | 	add	fp, #16
30f28     A7 FA 41 FC | 	wrbyte	result1, fp
30f2c     0C 4E 85 F1 | 	sub	fp, #12
30f30     A7 FA 01 FB | 	rdlong	result1, fp
30f34     18 FA 45 F0 | 	shr	result1, #24
30f38     0D 4E 05 F1 | 	add	fp, #13
30f3c     A7 FA 41 FC | 	wrbyte	result1, fp
30f40     0D 4E 85 F1 | 	sub	fp, #13
30f44     A7 FA 01 FB | 	rdlong	result1, fp
30f48     10 FA 45 F0 | 	shr	result1, #16
30f4c     0E 4E 05 F1 | 	add	fp, #14
30f50     A7 FA 41 FC | 	wrbyte	result1, fp
30f54     0E 4E 85 F1 | 	sub	fp, #14
30f58     A7 FA 01 FB | 	rdlong	result1, fp
30f5c     08 FA 45 F0 | 	shr	result1, #8
30f60     0F 4E 05 F1 | 	add	fp, #15
30f64     A7 FA 41 FC | 	wrbyte	result1, fp
30f68     0F 4E 85 F1 | 	sub	fp, #15
30f6c     A7 FA 01 FB | 	rdlong	result1, fp
30f70     10 4E 05 F1 | 	add	fp, #16
30f74     A7 FA 41 FC | 	wrbyte	result1, fp
30f78     0C 4E 85 F1 | 	sub	fp, #12
30f7c     A7 02 48 FC | 	wrbyte	#1, fp
30f80     08 4E 85 F1 | 	sub	fp, #8
30f84     A7 FA C9 FA | 	rdbyte	result1, fp wz
30f88     04 4E 85 F1 | 	sub	fp, #4
30f8c     0C 4E 05 A1 |  if_e	add	fp, #12
30f90     A7 2A 49 AC |  if_e	wrbyte	#149, fp
30f94     0C 4E 85 A1 |  if_e	sub	fp, #12
30f98     04 4E 05 F1 | 	add	fp, #4
30f9c     A7 FA C1 FA | 	rdbyte	result1, fp
30fa0     04 4E 85 F1 | 	sub	fp, #4
30fa4     08 FA 0D F2 | 	cmp	result1, #8 wz
30fa8     0C 4E 05 A1 |  if_e	add	fp, #12
30fac     A7 0E 49 AC |  if_e	wrbyte	#135, fp
30fb0     0C 4E 85 A1 |  if_e	sub	fp, #12
30fb4     0C 4E 05 F1 | 	add	fp, #12
30fb8     A7 14 C2 FA | 	rdbyte	arg02, fp
30fbc     0D 4E 05 F1 | 	add	fp, #13
30fc0     A7 14 42 FC | 	wrbyte	arg02, fp
30fc4     05 4E 85 F1 | 	sub	fp, #5
30fc8     A7 12 02 F6 | 	mov	arg01, fp
30fcc     14 4E 85 F1 | 	sub	fp, #20
30fd0     06 14 06 F6 | 	mov	arg02, #6
30fd4     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1150
30fd8     04 4E 05 F1 | 	add	fp, #4
30fdc     A7 26 C2 FA | 	rdbyte	local01, fp
30fe0     04 4E 85 F1 | 	sub	fp, #4
30fe4     0C 26 0E F2 | 	cmp	local01, #12 wz
30fe8     10 4E 05 A1 |  if_e	add	fp, #16
30fec     A7 12 02 A6 |  if_e	mov	arg01, fp
30ff0     10 4E 85 A1 |  if_e	sub	fp, #16
30ff4     01 14 06 A6 |  if_e	mov	arg02, #1
30ff8     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1157
30ffc     0C 4E 05 F1 | 	add	fp, #12
31000     A7 14 48 FC | 	wrbyte	#10, fp
31004     0C 4E 85 F1 | 	sub	fp, #12
31008                 | ' 	n = 10;
31008                 | ' 	do
31008                 | LR__5002
31008     10 4E 05 F1 | 	add	fp, #16
3100c     A7 12 02 F6 | 	mov	arg01, fp
31010     10 4E 85 F1 | 	sub	fp, #16
31014     01 14 06 F6 | 	mov	arg02, #1
31018     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
3101c     10 4E 05 F1 | 	add	fp, #16
31020     A7 26 C2 FA | 	rdbyte	local01, fp
31024     10 4E 85 F1 | 	sub	fp, #16
31028     80 26 CE F7 | 	test	local01, #128 wz
3102c     1C 00 90 AD |  if_e	jmp	#LR__5003
31030     0C 4E 05 F1 | 	add	fp, #12
31034     A7 26 C2 FA | 	rdbyte	local01, fp
31038     01 26 86 F1 | 	sub	local01, #1
3103c     A7 26 42 FC | 	wrbyte	local01, fp
31040     A7 26 CA FA | 	rdbyte	local01, fp wz
31044     0C 4E 85 F1 | 	sub	fp, #12
31048     BC FF 9F 5D |  if_ne	jmp	#LR__5002
3104c                 | LR__5003
3104c                 | ' 
3104c                 | ' 	return d;
3104c     10 4E 05 F1 | 	add	fp, #16
31050     A7 FA C1 FA | 	rdbyte	result1, fp
31054     10 4E 85 F1 | 	sub	fp, #16
31058                 | LR__5004
31058     A7 F0 03 F6 | 	mov	ptra, fp
3105c     B2 00 A0 FD | 	call	#popregs_
31060                 | _fatfs_cc_send_cmd_1181_ret
31060     2D 00 64 FD | 	ret
31064                 | 
31064                 | _fatfs_cc_disk_deinitialize
31064     03 4A 05 F6 | 	mov	COUNT_, #3
31068     A8 00 A0 FD | 	call	#pushregs_
3106c     00 12 4E F2 | 	cmps	arg01, #0 wz
31070     01 00 00 FF 
31074     14 E4 05 F1 | 	add	objptr, ##532
31078     F2 12 02 FB | 	rdlong	arg01, objptr
3107c     04 E4 85 F1 | 	sub	objptr, #4
31080     F2 26 02 FB | 	rdlong	local01, objptr
31084     08 E4 05 F1 | 	add	objptr, #8
31088     F2 28 02 FB | 	rdlong	local02, objptr
3108c     04 E4 05 F1 | 	add	objptr, #4
31090     F2 2A 02 FB | 	rdlong	local03, objptr
31094     01 00 00 FF 
31098     1C E4 85 F1 | 	sub	objptr, ##540
3109c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
3109c                 | '         return RES_NOTRDY;
3109c     03 FA 05 56 |  if_ne	mov	result1, #3
310a0     2C 00 90 5D |  if_ne	jmp	#LR__5010
310a4     50 12 62 FD | 	fltl	arg01
310a8     09 01 08 FC | 	wrpin	#0, arg01
310ac     50 26 62 FD | 	fltl	local01
310b0     13 01 08 FC | 	wrpin	#0, local01
310b4     50 28 62 FD | 	fltl	local02
310b8     14 01 08 FC | 	wrpin	#0, local02
310bc     50 2A 62 FD | 	fltl	local03
310c0     15 01 08 FC | 	wrpin	#0, local03
310c4     0A 12 06 F6 | 	mov	arg01, #10
310c8     3C 0E BF FD | 	call	#__system___waitms
310cc                 | '     }
310cc                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
310cc                 | '     _pinclear(PIN_SS);
310cc                 | '     _pinclear(PIN_CLK);
310cc                 | '     _pinclear(PIN_DI);
310cc                 | '     _pinclear(PIN_DO);
310cc                 | ' 
310cc                 | '     _waitms(10);
310cc                 | ' 
310cc                 | '     return 0;
310cc     00 FA 05 F6 | 	mov	result1, #0
310d0                 | LR__5010
310d0     A7 F0 03 F6 | 	mov	ptra, fp
310d4     B2 00 A0 FD | 	call	#popregs_
310d8                 | _fatfs_cc_disk_deinitialize_ret
310d8     2D 00 64 FD | 	ret
310dc                 | 
310dc                 | _fatfs_cc_gettimeofday
310dc     04 4A 05 F6 | 	mov	COUNT_, #4
310e0     A8 00 A0 FD | 	call	#pushregs_
310e4     09 27 02 F6 | 	mov	local01, arg01
310e8     F8 09 BF FD | 	call	#__system___getus
310ec     FD 12 02 F6 | 	mov	arg01, result1
310f0     02 00 00 FF 
310f4     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
310f8     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
310fc     09 FB 01 F6 | 	mov	result1, arg01
31100     14 FB 81 F1 | 	sub	result1, local02
31104     A1 07 00 FF 
31108     40 FA 15 FD | 	qdiv	result1, ##1000000
3110c     02 00 00 FF 
31110     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
31114     18 28 62 FD | 	getqx	local02
31118     A1 07 00 FF 
3111c     40 FA 15 FD | 	qdiv	result1, ##1000000
31120     00 28 0E F2 | 	cmp	local02, #0 wz
31124     19 2A 62 FD | 	getqy	local03
31128     28 00 90 AD |  if_e	jmp	#LR__5020
3112c     02 00 00 FF 
31130     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
31134     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31138     14 2D 02 F1 | 	add	local04, local02
3113c     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31140     15 13 82 F1 | 	sub	arg01, local03
31144     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
31148     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
3114c     02 00 00 FF 
31150     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
31154                 | LR__5020
31154     02 00 00 FF 
31158     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
3115c     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31160     02 00 00 FF 
31164     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
31168     13 2D 62 FC | 	wrlong	local04, local01
3116c     04 26 06 F1 | 	add	local01, #4
31170     13 2B 62 FC | 	wrlong	local03, local01
31174                 | '         lastsec += secs;
31174                 | '         lastus = now - leftover;
31174                 | '     }
31174                 | '     tv->tv_sec = lastsec;
31174                 | '     tv->tv_usec = leftover;
31174                 | '     return 0;
31174     00 FA 05 F6 | 	mov	result1, #0
31178     A7 F0 03 F6 | 	mov	ptra, fp
3117c     B2 00 A0 FD | 	call	#popregs_
31180                 | _fatfs_cc_gettimeofday_ret
31180     2D 00 64 FD | 	ret
31184                 | 
31184                 | _fatfs_cc__is_leap_year
31184     09 FB 51 F6 | 	abs	result1, arg01 wc
31188     03 FA 05 F5 | 	and	result1, #3
3118c     FD FA 89 F6 | 	negc	result1, result1 wz
31190     38 00 90 5D |  if_ne	jmp	#LR__5031
31194     09 FB 51 F6 | 	abs	result1, arg01 wc
31198     64 FA 15 FD | 	qdiv	result1, #100
3119c     19 FA 61 FD | 	getqy	result1
311a0     FD FA 89 F6 | 	negc	result1, result1 wz
311a4     1C 00 90 5D |  if_ne	jmp	#LR__5030
311a8     09 FB 51 F6 | 	abs	result1, arg01 wc
311ac     90 FB 15 FD | 	qdiv	result1, #400
311b0                 | '       return (0 == y % 400);
311b0     00 FA 05 F6 | 	mov	result1, #0
311b4     19 00 62 FD | 	getqy	_var01
311b8     00 01 8A F6 | 	negc	_var01, _var01 wz
311bc     01 FA 05 A6 |  if_e	mov	result1, #1
311c0     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
311c4                 | LR__5030
311c4                 | '     return 1;
311c4     01 FA 05 F6 | 	mov	result1, #1
311c8     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
311cc                 | LR__5031
311cc                 | '   }
311cc                 | '   return 0;
311cc     00 FA 05 F6 | 	mov	result1, #0
311d0                 | _fatfs_cc__is_leap_year_ret
311d0     2D 00 64 FD | 	ret
311d4                 | 
311d4                 | _fatfs_cc___tzoffset
311d4     09 01 0A F6 | 	mov	_var01, arg01 wz
311d8     FF FF FF FF 
311dc     0A FF 6B FC | 	wrlong	##-1, arg02
311e0     01 02 06 F6 | 	mov	_var02, #1
311e4     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
311e8                 | '                 return 0;
311e8     00 FA 05 A6 |  if_e	mov	result1, #0
311ec     94 02 90 AD |  if_e	jmp	#LR__5057
311f0     0A 01 68 FC | 	wrlong	#0, arg02
311f4     02 00 00 FF 
311f8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
311fc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31200                 | ' 
31200                 | '        *hasdst = 0;
31200                 | ' 
31200                 | ' 	n = stdname;
31200                 | '         while (*s && isalpha(*s)) {
31200     02 00 00 FF 
31204     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
31208     97 28 48 FB | 	callpa	#(@LR__5041-@LR__5040)>>2,fcache_load_ptr_
3120c                 | LR__5040
3120c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
31210     48 00 90 AD |  if_e	jmp	#LR__5042
31214     00 13 C2 FA | 	rdbyte	arg01, _var01
31218                 | ' {
31218                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31218     80 12 36 F3 | 	fle	arg01, #128 wc
3121c                 | '     return __ctype[c];
3121c     02 00 00 FF 
31220     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
31224     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31228     09 FB C1 FA | 	rdbyte	result1, arg01
3122c     02 00 00 FF 
31230     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31234     0C FA CD F7 | 	test	result1, #12 wz
31238     20 00 90 AD |  if_e	jmp	#LR__5042
3123c     00 09 02 F6 | 	mov	_var05, _var01
31240     00 0B 02 F6 | 	mov	_var06, _var01
31244     01 0A 06 F1 | 	add	_var06, #1
31248     04 0D C2 FA | 	rdbyte	_var07, _var05
3124c     05 01 02 F6 | 	mov	_var01, _var06
31250     03 0D 42 FC | 	wrbyte	_var07, _var04
31254     01 06 06 F1 | 	add	_var04, #1
31258     B0 FF 9F FD | 	jmp	#LR__5040
3125c                 | LR__5041
3125c                 | LR__5042
3125c     03 01 48 FC | 	wrbyte	#0, _var04
31260     00 0E 06 F6 | 	mov	_var08, #0
31264     00 05 C2 FA | 	rdbyte	_var03, _var01
31268     2D 04 0E F2 | 	cmp	_var03, #45 wz
3126c     01 02 66 A6 |  if_e	neg	_var02, #1
31270     01 00 06 A1 |  if_e	add	_var01, #1
31274     97 28 48 FB | 	callpa	#(@LR__5044-@LR__5043)>>2,fcache_load_ptr_
31278                 | '                 sgn = -1;
31278                 | '                 s++;
31278                 | '         }
31278                 | '         while (isdigit(*s)) {
31278                 | LR__5043
31278     00 13 C2 FA | 	rdbyte	arg01, _var01
3127c                 | ' {
3127c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3127c     80 12 36 F3 | 	fle	arg01, #128 wc
31280                 | '     return __ctype[c];
31280     02 00 00 FF 
31284     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
31288     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3128c     09 FB C1 FA | 	rdbyte	result1, arg01
31290     02 00 00 FF 
31294     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31298     02 FA CD F7 | 	test	result1, #2 wz
3129c     28 00 90 AD |  if_e	jmp	#LR__5045
312a0     07 05 02 F6 | 	mov	_var03, _var08
312a4     02 04 66 F0 | 	shl	_var03, #2
312a8     07 05 02 F1 | 	add	_var03, _var08
312ac     01 04 66 F0 | 	shl	_var03, #1
312b0     00 09 C2 FA | 	rdbyte	_var05, _var01
312b4     30 08 86 F1 | 	sub	_var05, #48
312b8     04 05 02 F1 | 	add	_var03, _var05
312bc     02 0F 02 F6 | 	mov	_var08, _var03
312c0     01 00 06 F1 | 	add	_var01, #1
312c4     B0 FF 9F FD | 	jmp	#LR__5043
312c8                 | LR__5044
312c8                 | LR__5045
312c8     07 00 00 FF 
312cc     10 0E 06 FD | 	qmul	_var08, ##3600
312d0     00 05 C2 FA | 	rdbyte	_var03, _var01
312d4     3A 04 0E F2 | 	cmp	_var03, #58 wz
312d8     18 10 62 FD | 	getqx	_var09
312dc     70 00 90 5D |  if_ne	jmp	#LR__5049
312e0     00 0E 06 F6 | 	mov	_var08, #0
312e4     01 00 06 F1 | 	add	_var01, #1
312e8     97 28 48 FB | 	callpa	#(@LR__5047-@LR__5046)>>2,fcache_load_ptr_
312ec                 | '                 x = 0;
312ec                 | '                 s++;
312ec                 | '                 while (isdigit(*s)) {
312ec                 | LR__5046
312ec     00 13 C2 FA | 	rdbyte	arg01, _var01
312f0                 | ' {
312f0                 | '   return  (__ctype_get(c) & 0x02 ) ;
312f0     80 12 36 F3 | 	fle	arg01, #128 wc
312f4                 | '     return __ctype[c];
312f4     02 00 00 FF 
312f8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
312fc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31300     09 FB C1 FA | 	rdbyte	result1, arg01
31304     02 00 00 FF 
31308     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3130c     02 FA CD F7 | 	test	result1, #2 wz
31310     28 00 90 AD |  if_e	jmp	#LR__5048
31314     07 05 02 F6 | 	mov	_var03, _var08
31318     02 04 66 F0 | 	shl	_var03, #2
3131c     07 05 02 F1 | 	add	_var03, _var08
31320     01 04 66 F0 | 	shl	_var03, #1
31324     00 09 C2 FA | 	rdbyte	_var05, _var01
31328     30 08 86 F1 | 	sub	_var05, #48
3132c     04 05 02 F1 | 	add	_var03, _var05
31330     02 0F 02 F6 | 	mov	_var08, _var03
31334     01 00 06 F1 | 	add	_var01, #1
31338     B0 FF 9F FD | 	jmp	#LR__5046
3133c                 | LR__5047
3133c                 | LR__5048
3133c     07 0D 02 F6 | 	mov	_var07, _var08
31340     04 0C 66 F0 | 	shl	_var07, #4
31344     07 0D 82 F1 | 	sub	_var07, _var08
31348     02 0C 66 F0 | 	shl	_var07, #2
3134c     06 11 02 F1 | 	add	_var09, _var07
31350                 | LR__5049
31350     02 00 00 FF 
31354     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
31358     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3135c     00 13 C2 FA | 	rdbyte	arg01, _var01
31360                 | ' {
31360                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31360     80 12 36 F3 | 	fle	arg01, #128 wc
31364                 | '     return __ctype[c];
31364     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
31368     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3136c     09 FB C1 FA | 	rdbyte	result1, arg01
31370     02 00 00 FF 
31374     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31378     0C FA CD F7 | 	test	result1, #12 wz
3137c     50 00 90 AD |  if_e	jmp	#LR__5052
31380     0A 03 68 FC | 	wrlong	#1, arg02
31384                 | '                 *hasdst = 1;
31384                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
31384                 | LR__5050
31384     00 05 CA FA | 	rdbyte	_var03, _var01 wz
31388     44 00 90 AD |  if_e	jmp	#LR__5051
3138c     00 13 C2 FA | 	rdbyte	arg01, _var01
31390                 | ' {
31390                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31390     80 12 36 F3 | 	fle	arg01, #128 wc
31394                 | '     return __ctype[c];
31394     02 00 00 FF 
31398     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3139c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
313a0     09 FB C1 FA | 	rdbyte	result1, arg01
313a4     02 00 00 FF 
313a8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
313ac     0C FA CD F7 | 	test	result1, #12 wz
313b0     1C 00 90 AD |  if_e	jmp	#LR__5051
313b4     00 0B 02 F6 | 	mov	_var06, _var01
313b8     01 0A 06 F1 | 	add	_var06, #1
313bc     00 0D C2 FA | 	rdbyte	_var07, _var01
313c0     05 01 02 F6 | 	mov	_var01, _var06
313c4     03 0D 42 FC | 	wrbyte	_var07, _var04
313c8     01 06 06 F1 | 	add	_var04, #1
313cc     B4 FF 9F FD | 	jmp	#LR__5050
313d0                 | LR__5051
313d0                 | LR__5052
313d0     03 01 48 FC | 	wrbyte	#0, _var04
313d4     02 00 00 FF 
313d8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
313dc     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
313e0     02 00 00 FF 
313e4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
313e8     20 00 90 AD |  if_e	jmp	#LR__5053
313ec     02 00 00 FF 
313f0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
313f4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
313f8     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
313fc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31400     02 00 00 FF 
31404     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
31408     1C 00 90 FD | 	jmp	#LR__5054
3140c                 | LR__5053
3140c     02 00 00 FF 
31410     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
31414     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31418     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3141c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31420     02 00 00 FF 
31424     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
31428                 | LR__5054
31428     02 00 00 FF 
3142c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
31430     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
31434     02 00 00 FF 
31438     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
3143c     20 00 90 AD |  if_e	jmp	#LR__5055
31440     02 00 00 FF 
31444     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
31448     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3144c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
31450     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31454     02 00 00 FF 
31458     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3145c     1C 00 90 FD | 	jmp	#LR__5056
31460                 | LR__5055
31460     02 00 00 FF 
31464     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
31468     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3146c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
31470     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31474     02 00 00 FF 
31478     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3147c                 | LR__5056
3147c     08 03 02 FD | 	qmul	_var02, _var09
31480                 | ' 		_tzname[1] = stdname;
31480                 | ' 
31480                 | '         return sgn * off;
31480     18 FA 61 FD | 	getqx	result1
31484                 | LR__5057
31484                 | _fatfs_cc___tzoffset_ret
31484     2D 00 64 FD | 	ret
31488                 | 
31488                 | _fatfs_cc___indst
31488     10 12 06 F1 | 	add	arg01, #16
3148c     09 01 02 FB | 	rdlong	_var01, arg01
31490     10 12 86 F1 | 	sub	arg01, #16
31494     02 00 0E F2 | 	cmp	_var01, #2 wz
31498     30 00 90 5D |  if_ne	jmp	#LR__5060
3149c     07 00 06 F6 | 	mov	_var01, #7
314a0     18 12 06 F1 | 	add	arg01, #24
314a4     09 03 02 FB | 	rdlong	_var02, arg01
314a8     01 01 02 F1 | 	add	_var01, _var02
314ac     0C 12 86 F1 | 	sub	arg01, #12
314b0     09 05 02 FB | 	rdlong	_var03, arg01
314b4     02 01 82 F1 | 	sub	_var01, _var03
314b8     00 00 56 F2 | 	cmps	_var01, #0 wc
314bc                 | '                         return 1;
314bc     01 FA 05 C6 |  if_b	mov	result1, #1
314c0     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
314c4                 | '                 return 0;
314c4     00 FA 05 F6 | 	mov	result1, #0
314c8     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
314cc                 | LR__5060
314cc     10 12 06 F1 | 	add	arg01, #16
314d0     09 01 02 FB | 	rdlong	_var01, arg01
314d4     10 12 86 F1 | 	sub	arg01, #16
314d8     0A 00 0E F2 | 	cmp	_var01, #10 wz
314dc     28 00 90 5D |  if_ne	jmp	#LR__5061
314e0     18 12 06 F1 | 	add	arg01, #24
314e4     09 01 02 FB | 	rdlong	_var01, arg01
314e8     0C 12 86 F1 | 	sub	arg01, #12
314ec     09 07 02 FB | 	rdlong	_var04, arg01
314f0     03 01 82 F1 | 	sub	_var01, _var04
314f4     00 00 56 F2 | 	cmps	_var01, #0 wc
314f8                 | '                         return 0;
314f8     00 FA 05 C6 |  if_b	mov	result1, #0
314fc     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
31500                 | '                 return 1;
31500     01 FA 05 F6 | 	mov	result1, #1
31504     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
31508                 | LR__5061
31508                 | '         }
31508                 | ' 
31508                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
31508     00 00 06 F6 | 	mov	_var01, #0
3150c     10 12 06 F1 | 	add	arg01, #16
31510     09 03 02 FB | 	rdlong	_var02, arg01
31514     10 12 86 F1 | 	sub	arg01, #16
31518     03 02 56 F2 | 	cmps	_var02, #3 wc
3151c     10 00 90 CD |  if_b	jmp	#LR__5062
31520     10 12 06 F1 | 	add	arg01, #16
31524     09 05 02 FB | 	rdlong	_var03, arg01
31528     0A 04 56 F2 | 	cmps	_var03, #10 wc
3152c     01 00 06 C6 |  if_b	mov	_var01, #1
31530                 | LR__5062
31530     00 FB 01 F6 | 	mov	result1, _var01
31534                 | _fatfs_cc___indst_ret
31534     2D 00 64 FD | 	ret
31538                 | 
31538                 | ' 	
31538                 | ' 	FUNCTION pfunc(c as integer) as integer
31538                 | ___strs_cl_pfunc
31538                 | ' 		if (i < 16) then
31538     04 E4 05 F1 | 	add	objptr, #4
3153c     F2 FA 01 FB | 	rdlong	result1, objptr
31540     04 E4 85 F1 | 	sub	objptr, #4
31544     10 FA 55 F2 | 	cmps	result1, #16 wc
31548     2C 00 90 3D |  if_ae	jmp	#LR__5070
3154c     F2 FA 01 FB | 	rdlong	result1, objptr
31550     04 E4 05 F1 | 	add	objptr, #4
31554     F2 00 02 FB | 	rdlong	_var01, objptr
31558     FD 00 02 F1 | 	add	_var01, result1
3155c     00 13 42 FC | 	wrbyte	arg01, _var01
31560     F2 FA 01 FB | 	rdlong	result1, objptr
31564     01 FA 05 F1 | 	add	result1, #1
31568     F2 FA 61 FC | 	wrlong	result1, objptr
3156c     04 E4 85 F1 | 	sub	objptr, #4
31570                 | ' 			p(i) = c
31570                 | ' 			i = i+1
31570                 | ' 			return 1
31570     01 FA 05 F6 | 	mov	result1, #1
31574     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
31578                 | LR__5070
31578                 | ' 			return -1
31578     01 FA 65 F6 | 	neg	result1, #1
3157c                 | ___strs_cl_pfunc_ret
3157c     2D 00 64 FD | 	ret
31580                 | 
31580                 | __struct__s_vfs_file_t_putchar
31580     04 4A 05 F6 | 	mov	COUNT_, #4
31584     A8 00 A0 FD | 	call	#pushregs_
31588     1C E4 05 F1 | 	add	objptr, #28
3158c     F2 26 0A FB | 	rdlong	local01, objptr wz
31590     1C E4 85 F1 | 	sub	objptr, #28
31594     00 FA 05 A6 |  if_e	mov	result1, #0
31598     48 00 90 AD |  if_e	jmp	#LR__5080
3159c     1C E4 05 F1 | 	add	objptr, #28
315a0     F2 28 02 FB | 	rdlong	local02, objptr
315a4     14 2B 02 F6 | 	mov	local03, local02
315a8     1C E4 85 F1 | 	sub	objptr, #28
315ac     13 2A 46 F7 | 	zerox	local03, #19
315b0     14 28 46 F0 | 	shr	local02, #20
315b4     02 28 66 F0 | 	shl	local02, #2
315b8     ED 28 02 F1 | 	add	local02, __methods__
315bc     14 29 02 FB | 	rdlong	local02, local02
315c0     F2 14 02 F6 | 	mov	arg02, objptr
315c4     F2 2C 02 F6 | 	mov	local04, objptr
315c8     15 E5 01 F6 | 	mov	objptr, local03
315cc     2D 28 62 FD | 	call	local02
315d0     16 E5 01 F6 | 	mov	objptr, local04
315d4                 | '     return (i < 0) ? 0 : 1;
315d4     00 FA 55 F2 | 	cmps	result1, #0 wc
315d8     00 26 06 C6 |  if_b	mov	local01, #0
315dc     01 26 06 36 |  if_ae	mov	local01, #1
315e0     13 FB 01 F6 | 	mov	result1, local01
315e4                 | LR__5080
315e4     A7 F0 03 F6 | 	mov	ptra, fp
315e8     B2 00 A0 FD | 	call	#popregs_
315ec                 | __struct__s_vfs_file_t_putchar_ret
315ec     2D 00 64 FD | 	ret
315f0                 | 
315f0                 | __struct__s_vfs_file_t_getchar
315f0     03 4A 05 F6 | 	mov	COUNT_, #3
315f4     A8 00 A0 FD | 	call	#pushregs_
315f8     20 E4 05 F1 | 	add	objptr, #32
315fc     F2 12 0A FB | 	rdlong	arg01, objptr wz
31600     20 E4 85 F1 | 	sub	objptr, #32
31604     01 FA 65 A6 |  if_e	neg	result1, #1
31608     38 00 90 AD |  if_e	jmp	#LR__5090
3160c                 | '     return getcf(__this);
3160c     20 E4 05 F1 | 	add	objptr, #32
31610     F2 26 02 FB | 	rdlong	local01, objptr
31614     13 29 02 F6 | 	mov	local02, local01
31618     20 E4 85 F1 | 	sub	objptr, #32
3161c     13 28 46 F7 | 	zerox	local02, #19
31620     14 26 46 F0 | 	shr	local01, #20
31624     02 26 66 F0 | 	shl	local01, #2
31628     ED 26 02 F1 | 	add	local01, __methods__
3162c     13 27 02 FB | 	rdlong	local01, local01
31630     F2 12 02 F6 | 	mov	arg01, objptr
31634     F2 2A 02 F6 | 	mov	local03, objptr
31638     14 E5 01 F6 | 	mov	objptr, local02
3163c     2D 26 62 FD | 	call	local01
31640     15 E5 01 F6 | 	mov	objptr, local03
31644                 | LR__5090
31644     A7 F0 03 F6 | 	mov	ptra, fp
31648     B2 00 A0 FD | 	call	#popregs_
3164c                 | __struct__s_vfs_file_t_getchar_ret
3164c     2D 00 64 FD | 	ret
31650                 | 
31650                 | __struct___bas_wrap_sender_tx
31650     03 4A 05 F6 | 	mov	COUNT_, #3
31654     A8 00 A0 FD | 	call	#pushregs_
31658     F2 26 02 FB | 	rdlong	local01, objptr
3165c     13 29 02 F6 | 	mov	local02, local01
31660     13 26 46 F7 | 	zerox	local01, #19
31664     14 28 46 F0 | 	shr	local02, #20
31668     02 28 66 F0 | 	shl	local02, #2
3166c     ED 28 02 F1 | 	add	local02, __methods__
31670     14 29 02 FB | 	rdlong	local02, local02
31674     F2 2A 02 F6 | 	mov	local03, objptr
31678     13 E5 01 F6 | 	mov	objptr, local01
3167c     2D 28 62 FD | 	call	local02
31680     15 E5 01 F6 | 	mov	objptr, local03
31684     01 FA 05 F6 | 	mov	result1, #1
31688     A7 F0 03 F6 | 	mov	ptra, fp
3168c     B2 00 A0 FD | 	call	#popregs_
31690                 | __struct___bas_wrap_sender_tx_ret
31690     2D 00 64 FD | 	ret
31694                 | 
31694                 | __struct___bas_wrap_sender_rx
31694     03 4A 05 F6 | 	mov	COUNT_, #3
31698     A8 00 A0 FD | 	call	#pushregs_
3169c     04 E4 05 F1 | 	add	objptr, #4
316a0     F2 26 02 FB | 	rdlong	local01, objptr
316a4     13 29 02 F6 | 	mov	local02, local01
316a8     04 E4 85 F1 | 	sub	objptr, #4
316ac     13 28 46 F7 | 	zerox	local02, #19
316b0     14 26 46 F0 | 	shr	local01, #20
316b4     02 26 66 F0 | 	shl	local01, #2
316b8     ED 26 02 F1 | 	add	local01, __methods__
316bc     13 27 02 FB | 	rdlong	local01, local01
316c0     F2 2A 02 F6 | 	mov	local03, objptr
316c4     14 E5 01 F6 | 	mov	objptr, local02
316c8     2D 26 62 FD | 	call	local01
316cc     15 E5 01 F6 | 	mov	objptr, local03
316d0     A7 F0 03 F6 | 	mov	ptra, fp
316d4     B2 00 A0 FD | 	call	#popregs_
316d8                 | __struct___bas_wrap_sender_rx_ret
316d8     2D 00 64 FD | 	ret
316dc                 | 
316dc                 | __struct___bas_wrap_sender_close
316dc     03 4A 05 F6 | 	mov	COUNT_, #3
316e0     A8 00 A0 FD | 	call	#pushregs_
316e4     08 E4 05 F1 | 	add	objptr, #8
316e8     F2 26 02 FB | 	rdlong	local01, objptr
316ec     13 29 02 F6 | 	mov	local02, local01
316f0     08 E4 85 F1 | 	sub	objptr, #8
316f4     13 28 46 F7 | 	zerox	local02, #19
316f8     14 26 46 F0 | 	shr	local01, #20
316fc     02 26 66 F0 | 	shl	local01, #2
31700     ED 26 02 F1 | 	add	local01, __methods__
31704     13 27 02 FB | 	rdlong	local01, local01
31708     F2 2A 02 F6 | 	mov	local03, objptr
3170c     14 E5 01 F6 | 	mov	objptr, local02
31710     2D 26 62 FD | 	call	local01
31714     15 E5 01 F6 | 	mov	objptr, local03
31718     A7 F0 03 F6 | 	mov	ptra, fp
3171c     B2 00 A0 FD | 	call	#popregs_
31720                 | __struct___bas_wrap_sender_close_ret
31720     2D 00 64 FD | 	ret
31724                 | 
31724                 | LR__5100
31724     2F          | 	byte	"/"
31725     00          | 	byte	0
31726                 | LR__5101
31726     69 6E 66    | 	byte	"inf"
31729     00          | 	byte	0
3172a                 | LR__5102
3172a     6E 61 6E    | 	byte	"nan"
3172d     00          | 	byte	0
3172e                 | LR__5103
3172e                 | 	byte	
3172e     00          | 	byte	0
3172f                 | LR__5104
3172f                 | 	byte	
3172f     00          | 	byte	0
31730                 | LR__5105
31730                 | 	byte	
31730     00          | 	byte	0
31731                 | LR__5106
31731                 | 	byte	
31731     00          | 	byte	0
31732                 | LR__5107
31732                 | 	byte	
31732     00          | 	byte	0
31733                 | LR__5108
31733                 | 	byte	
31733     00          | 	byte	0
31734                 | LR__5109
31734                 | 	byte	
31734     00          | 	byte	0
31735                 | LR__5110
31735                 | 	byte	
31735     00          | 	byte	0
31736                 | LR__5111
31736     00          | 	byte	0
31737     00          | 	byte	0
31738                 | LR__5112
31738     00          | 	byte	0
31739     00          | 	byte	0
3173a                 | LR__5113
3173a     00          | 	byte	0
3173b     00          | 	byte	0
3173c                 | LR__5114
3173c     20 21 21 21 
31740     20 63 6F 72 
31744     72 75 70 74 
31748     65 64 20 68 
3174c     65 61 70 3F 
31750     3F 3F 20 21 
31754     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
31757     00          | 	byte	0
31758                 | LR__5115
31758     20 21 21 21 
3175c     20 6F 75 74 
31760     20 6F 66 20 
31764     68 65 61 70 
31768     20 6D 65 6D 
3176c     6F 72 79 20 
31770     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
31774     00          | 	byte	0
31775                 | LR__5116
31775     20 21 21 21 
31779     20 63 6F 72 
3177d     72 75 70 74 
31781     65 64 20 68 
31785     65 61 70 20 
31789     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
3178d     00          | 	byte	0
3178e                 | LR__5117
3178e     00          | 	byte	0
3178f     00          | 	byte	0
31790                 | LR__5118
31790     2E          | 	byte	"."
31791     00          | 	byte	0
31792                 | LR__5119
31792     00          | 	byte	0
31793     00          | 	byte	0
31794                 | LR__5120
31794     00          | 	byte	0
31795     00          | 	byte	0
31796                 | LR__5121
31796     00          | 	byte	0
31797     00          | 	byte	0
31798                 | LR__5122
31798     2A 3A 3C 3E 
3179c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
317a0     00          | 	byte	0
317a1                 | LR__5123
317a1     2B 2C 3B 3D 
317a5     5B 5D       | 	byte	"+,;=[]"
317a7     00          | 	byte	0
317a8                 | LR__5124
317a8     46 41 54 33 
317ac     32 20 20 20 | 	byte	"FAT32   "
317b0     00          | 	byte	0
317b1                 | LR__5125
317b1     54 5A       | 	byte	"TZ"
317b3     00          | 	byte	0
317b4                 | LR__5126
317b4     00          | 	byte	0
317b5     00          | 	byte	0
317b6                 | LR__5127
317b6                 | 	byte	
317b6     00          | 	byte	0
317b7                 | LR__5128
317b7                 | 	byte	
317b7     00          | 	byte	0
317b8                 | LR__5129
317b8                 | 	byte	
317b8     00          | 	byte	0
317b9                 | LR__5130
317b9                 | 	byte	
317b9     00          | 	byte	0
317ba                 | LR__5131
317ba     22          | 	byte	34
317bb     00          | 	byte	0
317bc                 | LR__5132
317bc     22          | 	byte	34
317bd     00          | 	byte	0
317be                 | LR__5133
317be     3A          | 	byte	":"
317bf     00          | 	byte	0
317c0                 | LR__5134
317c0                 | 	byte	
317c0     00          | 	byte	0
317c1                 | LR__5135
317c1                 | 	byte	
317c1     00          | 	byte	0
317c2                 | LR__5136
317c2                 | 	byte	
317c2     00          | 	byte	0
317c3                 | LR__5137
317c3                 | 	byte	
317c3     00          | 	byte	0
317c4                 | LR__5138
317c4                 | 	byte	
317c4     00          | 	byte	0
317c5                 | LR__5139
317c5                 | 	byte	
317c5     00          | 	byte	0
317c6                 | LR__5140
317c6                 | 	byte	
317c6     00          | 	byte	0
317c7                 | LR__5141
317c7     30          | 	byte	"0"
317c8     00          | 	byte	0
317c9                 | LR__5142
317c9     22          | 	byte	34
317ca     00          | 	byte	0
317cb                 | LR__5143
317cb     22          | 	byte	34
317cc     00          | 	byte	0
317cd                 | LR__5144
317cd     22          | 	byte	34
317ce     00          | 	byte	0
317cf                 | LR__5145
317cf     22          | 	byte	34
317d0     00          | 	byte	0
317d1                 | LR__5146
317d1     22          | 	byte	34
317d2     00          | 	byte	0
317d3                 | LR__5147
317d3     3E          | 	byte	">"
317d4     00          | 	byte	0
317d5                 | LR__5148
317d5     3C          | 	byte	"<"
317d6     00          | 	byte	0
317d7                 | LR__5149
317d7     2B          | 	byte	"+"
317d8     00          | 	byte	0
317d9                 | LR__5150
317d9     2D          | 	byte	"-"
317da     00          | 	byte	0
317db                 | LR__5151
317db     2A          | 	byte	"*"
317dc     00          | 	byte	0
317dd                 | LR__5152
317dd     2F          | 	byte	"/"
317de     00          | 	byte	0
317df                 | LR__5153
317df     5E          | 	byte	"^"
317e0     00          | 	byte	0
317e1                 | LR__5154
317e1     3D          | 	byte	"="
317e2     00          | 	byte	0
317e3                 | LR__5155
317e3     2B          | 	byte	"+"
317e4     00          | 	byte	0
317e5                 | LR__5156
317e5     2B          | 	byte	"+"
317e6     00          | 	byte	0
317e7                 | LR__5157
317e7     2D          | 	byte	"-"
317e8     00          | 	byte	0
317e9                 | LR__5158
317e9     2D          | 	byte	"-"
317ea     00          | 	byte	0
317eb                 | LR__5159
317eb     3C          | 	byte	"<"
317ec     00          | 	byte	0
317ed                 | LR__5160
317ed     3E          | 	byte	">"
317ee     00          | 	byte	0
317ef                 | LR__5161
317ef     22          | 	byte	34
317f0     00          | 	byte	0
317f1                 | LR__5162
317f1     22          | 	byte	34
317f2     00          | 	byte	0
317f3                 | LR__5163
317f3     65 6C 73 65 | 	byte	"else"
317f7     00          | 	byte	0
317f8                 | LR__5164
317f8     74 68 65 6E | 	byte	"then"
317fc     00          | 	byte	0
317fd                 | LR__5165
317fd     2E          | 	byte	"."
317fe     00          | 	byte	0
317ff                 | LR__5166
317ff     3F          | 	byte	"?"
31800     00          | 	byte	0
31801                 | LR__5167
31801     3F          | 	byte	"?"
31802     00          | 	byte	0
31803                 | LR__5168
31803     6D 6F 75 73 
31807     65          | 	byte	"mouse"
31808     00          | 	byte	0
31809                 | LR__5169
31809     63 75 72 73 
3180d     6F 72       | 	byte	"cursor"
3180f     00          | 	byte	0
31810                 | LR__5170
31810     63 6C 69 63 
31814     6B          | 	byte	"click"
31815     00          | 	byte	0
31816                 | LR__5171
31816     6F 6E       | 	byte	"on"
31818     00          | 	byte	0
31819                 | LR__5172
31819     31          | 	byte	"1"
3181a     00          | 	byte	0
3181b                 | LR__5173
3181b     6F 66 66    | 	byte	"off"
3181e     00          | 	byte	0
3181f                 | LR__5174
3181f     30          | 	byte	"0"
31820     00          | 	byte	0
31821                 | LR__5175
31821     6D 6F 64 65 | 	byte	"mode"
31825     00          | 	byte	0
31826                 | LR__5176
31826     6D 2E       | 	byte	"m."
31828     00          | 	byte	0
31829                 | LR__5177
31829     61 74 61 72 
3182d     69          | 	byte	"atari"
3182e     00          | 	byte	0
3182f                 | LR__5178
3182f     30          | 	byte	"0"
31830     00          | 	byte	0
31831                 | LR__5179
31831     70 63 5F 61 
31835     6D 62 65 72 | 	byte	"pc_amber"
31839     00          | 	byte	0
3183a                 | LR__5180
3183a     31          | 	byte	"1"
3183b     00          | 	byte	0
3183c                 | LR__5181
3183c     70 63 5F 67 
31840     72 65 65 6E | 	byte	"pc_green"
31844     00          | 	byte	0
31845                 | LR__5182
31845     32          | 	byte	"2"
31846     00          | 	byte	0
31847                 | LR__5183
31847     70 63 5F 77 
3184b     68 69 74 65 | 	byte	"pc_white"
3184f     00          | 	byte	0
31850                 | LR__5184
31850     33          | 	byte	"3"
31851     00          | 	byte	0
31852                 | LR__5185
31852     73 74       | 	byte	"st"
31854     00          | 	byte	0
31855                 | LR__5186
31855     34          | 	byte	"4"
31856     00          | 	byte	0
31857                 | LR__5187
31857                 | 	byte	
31857     00          | 	byte	0
31858                 | LR__5188
31858     6C 6F 61 64 | 	byte	"load"
3185c     00          | 	byte	0
3185d                 | LR__5189
3185d     73 61 76 65 | 	byte	"save"
31861     00          | 	byte	0
31862                 | LR__5190
31862     62 72 75 6E | 	byte	"brun"
31866     00          | 	byte	0
31867                 | LR__5191
31867     72 75 6E    | 	byte	"run"
3186a     00          | 	byte	0
3186b                 | LR__5192
3186b     6C 6F 2E    | 	byte	"lo."
3186e     00          | 	byte	0
3186f                 | LR__5193
3186f     73 2E       | 	byte	"s."
31871     00          | 	byte	0
31872                 | LR__5194
31872     62 72 2E    | 	byte	"br."
31875     00          | 	byte	0
31876                 | LR__5195
31876     65 6E 74 65 
3187a     72          | 	byte	"enter"
3187b     00          | 	byte	0
3187c                 | LR__5196
3187c     65 2E       | 	byte	"e."
3187e     00          | 	byte	0
3187f                 | LR__5197
3187f     64 65 6C 65 
31883     74 65       | 	byte	"delete"
31885     00          | 	byte	0
31886                 | LR__5198
31886     6D 6B 64 69 
3188a     72          | 	byte	"mkdir"
3188b     00          | 	byte	0
3188c                 | LR__5199
3188c     63 64       | 	byte	"cd"
3188e     00          | 	byte	0
3188f                 | LR__5200
3188f     63 64 2E    | 	byte	"cd."
31892     00          | 	byte	0
31893                 | LR__5201
31893     2E          | 	byte	"."
31894     00          | 	byte	0
31895                 | LR__5202
31895     2E 2E       | 	byte	".."
31897     00          | 	byte	0
31898                 | LR__5203
31898     63 64       | 	byte	"cd"
3189a     00          | 	byte	0
3189b                 | LR__5204
3189b     2F          | 	byte	"/"
3189c     00          | 	byte	0
3189d                 | LR__5205
3189d                 | 	byte	
3189d     00          | 	byte	0
3189e                 | LR__5206
3189e                 | 	byte	
3189e     00          | 	byte	0
3189f                 | LR__5207
3189f                 | 	byte	
3189f     00          | 	byte	0
318a0                 | LR__5208
318a0                 | 	byte	
318a0     00          | 	byte	0
318a1                 | LR__5209
318a1                 | 	byte	
318a1     00          | 	byte	0
318a2                 | LR__5210
318a2     52 65 61 64 
318a6     79          | 	byte	"Ready"
318a7     00          | 	byte	0
318a8                 | LR__5211
318a8     2B          | 	byte	"+"
318a9     00          | 	byte	0
318aa                 | LR__5212
318aa     2D          | 	byte	"-"
318ab     00          | 	byte	0
318ac                 | LR__5213
318ac     6F 72       | 	byte	"or"
318ae     00          | 	byte	0
318af                 | LR__5214
318af     78 6F 72    | 	byte	"xor"
318b2     00          | 	byte	0
318b3                 | LR__5215
318b3     2A          | 	byte	"*"
318b4     00          | 	byte	0
318b5                 | LR__5216
318b5     2F          | 	byte	"/"
318b6     00          | 	byte	0
318b7                 | LR__5217
318b7     61 6E 64    | 	byte	"and"
318ba     00          | 	byte	0
318bb                 | LR__5218
318bb     64 69 76    | 	byte	"div"
318be     00          | 	byte	0
318bf                 | LR__5219
318bf     6D 6F 64    | 	byte	"mod"
318c2     00          | 	byte	0
318c3                 | LR__5220
318c3     73 68 6C    | 	byte	"shl"
318c6     00          | 	byte	0
318c7                 | LR__5221
318c7     73 68 72    | 	byte	"shr"
318ca     00          | 	byte	0
318cb                 | LR__5222
318cb     5E          | 	byte	"^"
318cc     00          | 	byte	0
318cd                 | LR__5223
318cd     6E 6F 74    | 	byte	"not"
318d0     00          | 	byte	0
318d1                 | LR__5224
318d1     40          | 	byte	"@"
318d2     00          | 	byte	0
318d3                 | LR__5225
318d3     3D          | 	byte	"="
318d4     00          | 	byte	0
318d5                 | LR__5226
318d5     3E 3D       | 	byte	">="
318d7     00          | 	byte	0
318d8                 | LR__5227
318d8     3C 3D       | 	byte	"<="
318da     00          | 	byte	0
318db                 | LR__5228
318db     3C          | 	byte	"<"
318dc     00          | 	byte	0
318dd                 | LR__5229
318dd     3E          | 	byte	">"
318de     00          | 	byte	0
318df                 | LR__5230
318df     3C 3E       | 	byte	"<>"
318e1     00          | 	byte	0
318e2                 | LR__5231
318e2     2B 2B       | 	byte	"++"
318e4     00          | 	byte	0
318e5                 | LR__5232
318e5     2D 2D       | 	byte	"--"
318e7     00          | 	byte	0
318e8                 | LR__5233
318e8     23          | 	byte	"#"
318e9     00          | 	byte	0
318ea                 | LR__5234
318ea     30          | 	byte	"0"
318eb     00          | 	byte	0
318ec                 | LR__5235
318ec     39          | 	byte	"9"
318ed     00          | 	byte	0
318ee                 | LR__5236
318ee     23 72 65 61 
318f2     64          | 	byte	"#read"
318f3     00          | 	byte	0
318f4                 | LR__5237
318f4     23 77 72 69 
318f8     74 65       | 	byte	"#write"
318fa     00          | 	byte	0
318fb                 | LR__5238
318fb     23 61 70 70 
318ff     65 6E 64    | 	byte	"#append"
31902     00          | 	byte	0
31903                 | LR__5239
31903     23          | 	byte	"#"
31904     00          | 	byte	0
31905                 | LR__5240
31905     23          | 	byte	"#"
31906     00          | 	byte	0
31907                 | LR__5241
31907     2D          | 	byte	"-"
31908     00          | 	byte	0
31909                 | LR__5242
31909     30          | 	byte	"0"
3190a     00          | 	byte	0
3190b                 | LR__5243
3190b     63          | 	byte	"c"
3190c     00          | 	byte	0
3190d                 | LR__5244
3190d     63 23       | 	byte	"c#"
3190f     00          | 	byte	0
31910                 | LR__5245
31910     64          | 	byte	"d"
31911     00          | 	byte	0
31912                 | LR__5246
31912     64 23       | 	byte	"d#"
31914     00          | 	byte	0
31915                 | LR__5247
31915     65          | 	byte	"e"
31916     00          | 	byte	0
31917                 | LR__5248
31917     66          | 	byte	"f"
31918     00          | 	byte	0
31919                 | LR__5249
31919     66 23       | 	byte	"f#"
3191b     00          | 	byte	0
3191c                 | LR__5250
3191c     67          | 	byte	"g"
3191d     00          | 	byte	0
3191e                 | LR__5251
3191e     67 23       | 	byte	"g#"
31920     00          | 	byte	0
31921                 | LR__5252
31921     61          | 	byte	"a"
31922     00          | 	byte	0
31923                 | LR__5253
31923     61 23       | 	byte	"a#"
31925     00          | 	byte	0
31926                 | LR__5254
31926     68          | 	byte	"h"
31927     00          | 	byte	0
31928                 | LR__5255
31928     62          | 	byte	"b"
31929     00          | 	byte	0
3192a                 | LR__5256
3192a     2B          | 	byte	"+"
3192b     00          | 	byte	0
3192c                 | LR__5257
3192c     2D          | 	byte	"-"
3192d     00          | 	byte	0
3192e                 | LR__5258
3192e     3D          | 	byte	"="
3192f     00          | 	byte	0
31930                 | LR__5259
31930     2C          | 	byte	","
31931     00          | 	byte	0
31932                 | LR__5260
31932     2A          | 	byte	"*"
31933     00          | 	byte	0
31934                 | LR__5261
31934     2F          | 	byte	"/"
31935     00          | 	byte	0
31936                 | LR__5262
31936     3B          | 	byte	";"
31937     00          | 	byte	0
31938                 | LR__5263
31938     22          | 	byte	34
31939     00          | 	byte	0
3193a                 | LR__5264
3193a     5E          | 	byte	"^"
3193b     00          | 	byte	0
3193c                 | LR__5265
3193c     29          | 	byte	")"
3193d     00          | 	byte	0
3193e                 | LR__5266
3193e     28          | 	byte	"("
3193f     00          | 	byte	0
31940                 | LR__5267
31940     3A          | 	byte	":"
31941     00          | 	byte	0
31942                 | LR__5268
31942     20          | 	byte	" "
31943     00          | 	byte	0
31944                 | LR__5269
31944     3E          | 	byte	">"
31945     00          | 	byte	0
31946                 | LR__5270
31946     3C          | 	byte	"<"
31947     00          | 	byte	0
31948                 | LR__5271
31948     3D          | 	byte	"="
31949     00          | 	byte	0
3194a                 | LR__5272
3194a     62 65 65 70 | 	byte	"beep"
3194e     00          | 	byte	0
3194f                 | LR__5273
3194f     62 2E       | 	byte	"b."
31951     00          | 	byte	0
31952                 | LR__5274
31952     62 6C 69 74 | 	byte	"blit"
31956     00          | 	byte	0
31957                 | LR__5275
31957     62 6F 78    | 	byte	"box"
3195a     00          | 	byte	0
3195b                 | LR__5276
3195b     62 72 75 6E | 	byte	"brun"
3195f     00          | 	byte	0
31960                 | LR__5277
31960     62 72 2E    | 	byte	"br."
31963     00          | 	byte	0
31964                 | LR__5278
31964     63 64       | 	byte	"cd"
31966     00          | 	byte	0
31967                 | LR__5279
31967     63 68 61 6E 
3196b     67 65 66 72 
3196f     65 71       | 	byte	"changefreq"
31971     00          | 	byte	0
31972                 | LR__5280
31972     63 66 2E    | 	byte	"cf."
31975     00          | 	byte	0
31976                 | LR__5281
31976     63 68 61 6E 
3197a     67 65 70 61 
3197e     6E          | 	byte	"changepan"
3197f     00          | 	byte	0
31980                 | LR__5282
31980     63 70 2E    | 	byte	"cp."
31983     00          | 	byte	0
31984                 | LR__5283
31984     63 68 61 6E 
31988     67 65 76 6F 
3198c     6C          | 	byte	"changevol"
3198d     00          | 	byte	0
3198e                 | LR__5284
3198e     63 76 2E    | 	byte	"cv."
31991     00          | 	byte	0
31992                 | LR__5285
31992     63 68 61 6E 
31996     67 65 77 61 
3199a     76 65       | 	byte	"changewave"
3199c     00          | 	byte	0
3199d                 | LR__5286
3199d     63 77 2E    | 	byte	"cw."
319a0     00          | 	byte	0
319a1                 | LR__5287
319a1     63 69 72 63 
319a5     6C 65       | 	byte	"circle"
319a7     00          | 	byte	0
319a8                 | LR__5288
319a8     63 69 2E    | 	byte	"ci."
319ab     00          | 	byte	0
319ac                 | LR__5289
319ac     63 6C 69 63 
319b0     6B          | 	byte	"click"
319b1     00          | 	byte	0
319b2                 | LR__5290
319b2     63 6C 6F 73 
319b6     65          | 	byte	"close"
319b7     00          | 	byte	0
319b8                 | LR__5291
319b8     63 6C 73    | 	byte	"cls"
319bb     00          | 	byte	0
319bc                 | LR__5292
319bc     63 6F 6C 6F 
319c0     72          | 	byte	"color"
319c1     00          | 	byte	0
319c2                 | LR__5293
319c2     63 2E       | 	byte	"c."
319c4     00          | 	byte	0
319c5                 | LR__5294
319c5     63 73 61 76 
319c9     65          | 	byte	"csave"
319ca     00          | 	byte	0
319cb                 | LR__5295
319cb     63 73 2E    | 	byte	"cs."
319ce     00          | 	byte	0
319cf                 | LR__5296
319cf     63 75 72 73 
319d3     6F 72       | 	byte	"cursor"
319d5     00          | 	byte	0
319d6                 | LR__5297
319d6     64 65 66 73 
319da     6E 64       | 	byte	"defsnd"
319dc     00          | 	byte	0
319dd                 | LR__5298
319dd     64 65 66 65 
319e1     6E 76       | 	byte	"defenv"
319e3     00          | 	byte	0
319e4                 | LR__5299
319e4     64 65 66 73 
319e8     70 72 69 74 
319ec     65          | 	byte	"defsprite"
319ed     00          | 	byte	0
319ee                 | LR__5300
319ee     64 73 2E    | 	byte	"ds."
319f1     00          | 	byte	0
319f2                 | LR__5301
319f2     64 65 67    | 	byte	"deg"
319f5     00          | 	byte	0
319f6                 | LR__5302
319f6     64 65 6C 65 
319fa     74 65       | 	byte	"delete"
319fc     00          | 	byte	0
319fd                 | LR__5303
319fd     64 69 6D    | 	byte	"dim"
31a00     00          | 	byte	0
31a01                 | LR__5304
31a01     64 69 72    | 	byte	"dir"
31a04     00          | 	byte	0
31a05                 | LR__5305
31a05     64 70 6F 6B 
31a09     65          | 	byte	"dpoke"
31a0a     00          | 	byte	0
31a0b                 | LR__5306
31a0b     64 72 61 77 | 	byte	"draw"
31a0f     00          | 	byte	0
31a10                 | LR__5307
31a10     64 72 61 77 
31a14     74 6F       | 	byte	"drawto"
31a16     00          | 	byte	0
31a17                 | LR__5308
31a17     64 72 2E    | 	byte	"dr."
31a1a     00          | 	byte	0
31a1b                 | LR__5309
31a1b     65 6C 73 65 | 	byte	"else"
31a1f     00          | 	byte	0
31a20                 | LR__5310
31a20     65 6E 64    | 	byte	"end"
31a23     00          | 	byte	0
31a24                 | LR__5311
31a24     65 6E 74 65 
31a28     72          | 	byte	"enter"
31a29     00          | 	byte	0
31a2a                 | LR__5312
31a2a     65 2E       | 	byte	"e."
31a2c     00          | 	byte	0
31a2d                 | LR__5313
31a2d     66 63 69 72 
31a31     63 6C 65    | 	byte	"fcircle"
31a34     00          | 	byte	0
31a35                 | LR__5314
31a35     66 63 2E    | 	byte	"fc."
31a38     00          | 	byte	0
31a39                 | LR__5315
31a39     66 69 6C 6C | 	byte	"fill"
31a3d     00          | 	byte	0
31a3e                 | LR__5316
31a3e     66 69 2E    | 	byte	"fi."
31a41     00          | 	byte	0
31a42                 | LR__5317
31a42     66 6F 6E 74 | 	byte	"font"
31a46     00          | 	byte	0
31a47                 | LR__5318
31a47     66 6F 72    | 	byte	"for"
31a4a     00          | 	byte	0
31a4b                 | LR__5319
31a4b     66 2E       | 	byte	"f."
31a4d     00          | 	byte	0
31a4e                 | LR__5320
31a4e     66 72 61 6D 
31a52     65          | 	byte	"frame"
31a53     00          | 	byte	0
31a54                 | LR__5321
31a54     66 72 2E    | 	byte	"fr."
31a57     00          | 	byte	0
31a58                 | LR__5322
31a58     67 65 74    | 	byte	"get"
31a5b     00          | 	byte	0
31a5c                 | LR__5323
31a5c     67 6F 73 75 
31a60     62          | 	byte	"gosub"
31a61     00          | 	byte	0
31a62                 | LR__5324
31a62     67 6F 74 6F | 	byte	"goto"
31a66     00          | 	byte	0
31a67                 | LR__5325
31a67     67 2E       | 	byte	"g."
31a69     00          | 	byte	0
31a6a                 | LR__5326
31a6a     69 66       | 	byte	"if"
31a6c     00          | 	byte	0
31a6d                 | LR__5327
31a6d     69 6E 6B    | 	byte	"ink"
31a70     00          | 	byte	0
31a71                 | LR__5328
31a71     69 2E       | 	byte	"i."
31a73     00          | 	byte	0
31a74                 | LR__5329
31a74     6C 69 73 74 | 	byte	"list"
31a78     00          | 	byte	0
31a79                 | LR__5330
31a79     6C 2E       | 	byte	"l."
31a7b     00          | 	byte	0
31a7c                 | LR__5331
31a7c     6C 6F 61 64 | 	byte	"load"
31a80     00          | 	byte	0
31a81                 | LR__5332
31a81     6C 6F 2E    | 	byte	"lo."
31a84     00          | 	byte	0
31a85                 | LR__5333
31a85     6C 70 6F 6B 
31a89     65          | 	byte	"lpoke"
31a8a     00          | 	byte	0
31a8b                 | LR__5334
31a8b     6D 6B 64 69 
31a8f     72          | 	byte	"mkdir"
31a90     00          | 	byte	0
31a91                 | LR__5335
31a91     6D 6F 64 65 | 	byte	"mode"
31a95     00          | 	byte	0
31a96                 | LR__5336
31a96     6D 2E       | 	byte	"m."
31a98     00          | 	byte	0
31a99                 | LR__5337
31a99     6D 6F 75 73 
31a9d     65          | 	byte	"mouse"
31a9e     00          | 	byte	0
31a9f                 | LR__5338
31a9f     6E 65 77    | 	byte	"new"
31aa2     00          | 	byte	0
31aa3                 | LR__5339
31aa3     6E 65 78 74 | 	byte	"next"
31aa7     00          | 	byte	0
31aa8                 | LR__5340
31aa8     6E 2E       | 	byte	"n."
31aaa     00          | 	byte	0
31aab                 | LR__5341
31aab     6F 70 65 6E | 	byte	"open"
31aaf     00          | 	byte	0
31ab0                 | LR__5342
31ab0     70 61 70 65 
31ab4     72          | 	byte	"paper"
31ab5     00          | 	byte	0
31ab6                 | LR__5343
31ab6     70 61 2E    | 	byte	"pa."
31ab9     00          | 	byte	0
31aba                 | LR__5344
31aba     70 69 6E 66 
31abe     6C 6F 61 74 | 	byte	"pinfloat"
31ac2     00          | 	byte	0
31ac3                 | LR__5345
31ac3     70 69 6E 68 
31ac7     69          | 	byte	"pinhi"
31ac8     00          | 	byte	0
31ac9                 | LR__5346
31ac9     70 69 6E 6C 
31acd     6F          | 	byte	"pinlo"
31ace     00          | 	byte	0
31acf                 | LR__5347
31acf     70 69 6E 73 
31ad3     74 61 72 74 | 	byte	"pinstart"
31ad7     00          | 	byte	0
31ad8                 | LR__5348
31ad8     70 69 6E 74 
31adc     6F 67 67 6C 
31ae0     65          | 	byte	"pintoggle"
31ae1     00          | 	byte	0
31ae2                 | LR__5349
31ae2     70 69 6E 77 
31ae6     72 69 74 65 | 	byte	"pinwrite"
31aea     00          | 	byte	0
31aeb                 | LR__5350
31aeb     70 6C 61 79 | 	byte	"play"
31aef     00          | 	byte	0
31af0                 | LR__5351
31af0     70 2E       | 	byte	"p."
31af2     00          | 	byte	0
31af3                 | LR__5352
31af3     70 6C 6F 74 | 	byte	"plot"
31af7     00          | 	byte	0
31af8                 | LR__5353
31af8     70 6C 2E    | 	byte	"pl."
31afb     00          | 	byte	0
31afc                 | LR__5354
31afc     70 6F 6B 65 | 	byte	"poke"
31b00     00          | 	byte	0
31b01                 | LR__5355
31b01     70 6F 70    | 	byte	"pop"
31b04     00          | 	byte	0
31b05                 | LR__5356
31b05     70 6F 73 69 
31b09     74 69 6F 6E | 	byte	"position"
31b0d     00          | 	byte	0
31b0e                 | LR__5357
31b0e     70 6F 73 2E | 	byte	"pos."
31b12     00          | 	byte	0
31b13                 | LR__5358
31b13     70 72 69 6E 
31b17     74          | 	byte	"print"
31b18     00          | 	byte	0
31b19                 | LR__5359
31b19     3F          | 	byte	"?"
31b1a     00          | 	byte	0
31b1b                 | LR__5360
31b1b     70 75 74    | 	byte	"put"
31b1e     00          | 	byte	0
31b1f                 | LR__5361
31b1f     72 61 64    | 	byte	"rad"
31b22     00          | 	byte	0
31b23                 | LR__5362
31b23     72 65 6C 65 
31b27     61 73 65    | 	byte	"release"
31b2a     00          | 	byte	0
31b2b                 | LR__5363
31b2b     72 65 6D    | 	byte	"rem"
31b2e     00          | 	byte	0
31b2f                 | LR__5364
31b2f     27          | 	byte	"'"
31b30     00          | 	byte	0
31b31                 | LR__5365
31b31     72 65 74 75 
31b35     72 6E       | 	byte	"return"
31b37     00          | 	byte	0
31b38                 | LR__5366
31b38     72 75 6E    | 	byte	"run"
31b3b     00          | 	byte	0
31b3c                 | LR__5367
31b3c     73 61 76 65 | 	byte	"save"
31b40     00          | 	byte	0
31b41                 | LR__5368
31b41     73 2E       | 	byte	"s."
31b43     00          | 	byte	0
31b44                 | LR__5369
31b44     73 65 74 64 
31b48     65 6C 61 79 | 	byte	"setdelay"
31b4c     00          | 	byte	0
31b4d                 | LR__5370
31b4d     73 64 2E    | 	byte	"sd."
31b50     00          | 	byte	0
31b51                 | LR__5371
31b51     73 65 74 65 
31b55     6E 76       | 	byte	"setenv"
31b57     00          | 	byte	0
31b58                 | LR__5372
31b58     73 65 2E    | 	byte	"se."
31b5b     00          | 	byte	0
31b5c                 | LR__5373
31b5c     73 65 74 6C 
31b60     65 6E       | 	byte	"setlen"
31b62     00          | 	byte	0
31b63                 | LR__5374
31b63     73 6C 2E    | 	byte	"sl."
31b66     00          | 	byte	0
31b67                 | LR__5375
31b67     73 65 74 70 
31b6b     61 6E       | 	byte	"setpan"
31b6d     00          | 	byte	0
31b6e                 | LR__5376
31b6e     73 70       | 	byte	"sp"
31b70     00          | 	byte	0
31b71                 | LR__5377
31b71     73 65 74 73 
31b75     75 73 74 61 
31b79     69 6E       | 	byte	"setsustain"
31b7b     00          | 	byte	0
31b7c                 | LR__5378
31b7c     73 73 2E    | 	byte	"ss."
31b7f     00          | 	byte	0
31b80                 | LR__5379
31b80     73 65 74 76 
31b84     6F 6C       | 	byte	"setvol"
31b86     00          | 	byte	0
31b87                 | LR__5380
31b87     73 76 2E    | 	byte	"sv."
31b8a     00          | 	byte	0
31b8b                 | LR__5381
31b8b     73 65 74 77 
31b8f     61 76 65    | 	byte	"setwave"
31b92     00          | 	byte	0
31b93                 | LR__5382
31b93     73 77 2E    | 	byte	"sw."
31b96     00          | 	byte	0
31b97                 | LR__5383
31b97     73 65 74 77 
31b9b     61 76       | 	byte	"setwav"
31b9d     00          | 	byte	0
31b9e                 | LR__5384
31b9e     73 68 75 74 
31ba2     75 70       | 	byte	"shutup"
31ba4     00          | 	byte	0
31ba5                 | LR__5385
31ba5     73 68 2E    | 	byte	"sh."
31ba8     00          | 	byte	0
31ba9                 | LR__5386
31ba9     73 6F 75 6E 
31bad     64          | 	byte	"sound"
31bae     00          | 	byte	0
31baf                 | LR__5387
31baf     73 6F 2E    | 	byte	"so."
31bb2     00          | 	byte	0
31bb3                 | LR__5388
31bb3     73 70 72 69 
31bb7     74 65       | 	byte	"sprite"
31bb9     00          | 	byte	0
31bba                 | LR__5389
31bba     73 70 72 2E | 	byte	"spr."
31bbe     00          | 	byte	0
31bbf                 | LR__5390
31bbf     74 68 65 6E | 	byte	"then"
31bc3     00          | 	byte	0
31bc4                 | LR__5391
31bc4     77 61 69 74 
31bc8     6D 73       | 	byte	"waitms"
31bca     00          | 	byte	0
31bcb                 | LR__5392
31bcb     77 2E       | 	byte	"w."
31bcd     00          | 	byte	0
31bce                 | LR__5393
31bce     77 61 69 74 
31bd2     63 6C 6F 63 
31bd6     6B          | 	byte	"waitclock"
31bd7     00          | 	byte	0
31bd8                 | LR__5394
31bd8     77 63 2E    | 	byte	"wc."
31bdb     00          | 	byte	0
31bdc                 | LR__5395
31bdc     77 61 69 74 
31be0     76 62 6C    | 	byte	"waitvbl"
31be3     00          | 	byte	0
31be4                 | LR__5396
31be4     77 76 2E    | 	byte	"wv."
31be7     00          | 	byte	0
31be8                 | LR__5397
31be8     77 72 70 69 
31bec     6E          | 	byte	"wrpin"
31bed     00          | 	byte	0
31bee                 | LR__5398
31bee     77 78 70 69 
31bf2     6E          | 	byte	"wxpin"
31bf3     00          | 	byte	0
31bf4                 | LR__5399
31bf4     77 79 70 69 
31bf8     6E          | 	byte	"wypin"
31bf9     00          | 	byte	0
31bfa                 | LR__5400
31bfa     61 62 73    | 	byte	"abs"
31bfd     00          | 	byte	0
31bfe                 | LR__5401
31bfe     61 63 6F 73 | 	byte	"acos"
31c02     00          | 	byte	0
31c03                 | LR__5402
31c03     61 64 72    | 	byte	"adr"
31c06     00          | 	byte	0
31c07                 | LR__5403
31c07     61 64 64 72 | 	byte	"addr"
31c0b     00          | 	byte	0
31c0c                 | LR__5404
31c0c     61 73 63    | 	byte	"asc"
31c0f     00          | 	byte	0
31c10                 | LR__5405
31c10     61 73 69 6E | 	byte	"asin"
31c14     00          | 	byte	0
31c15                 | LR__5406
31c15     61 74 6E    | 	byte	"atn"
31c18     00          | 	byte	0
31c19                 | LR__5407
31c19     62 69 6E 24 | 	byte	"bin$"
31c1d     00          | 	byte	0
31c1e                 | LR__5408
31c1e     63 68 72 24 | 	byte	"chr$"
31c22     00          | 	byte	0
31c23                 | LR__5409
31c23     63 6F 73    | 	byte	"cos"
31c26     00          | 	byte	0
31c27                 | LR__5410
31c27     64 70 65 65 
31c2b     6B          | 	byte	"dpeek"
31c2c     00          | 	byte	0
31c2d                 | LR__5411
31c2d     66 72 61 6D 
31c31     65 62 75 66 | 	byte	"framebuf"
31c35     00          | 	byte	0
31c36                 | LR__5412
31c36     66 62 2E    | 	byte	"fb."
31c39     00          | 	byte	0
31c3a                 | LR__5413
31c3a     66 72 65    | 	byte	"fre"
31c3d     00          | 	byte	0
31c3e                 | LR__5414
31c3e     67 65 74 70 
31c42     69 78 65 6C | 	byte	"getpixel"
31c46     00          | 	byte	0
31c47                 | LR__5415
31c47     67 65 2E    | 	byte	"ge."
31c4a     00          | 	byte	0
31c4b                 | LR__5416
31c4b     67 65 74 65 
31c4f     6E 76 73 75 
31c53     73 74 61 69 
31c57     6E          | 	byte	"getenvsustain"
31c58     00          | 	byte	0
31c59                 | LR__5417
31c59     67 65 74 6E 
31c5d     6F 74 65 76 
31c61     61 6C 75 65 | 	byte	"getnotevalue"
31c65     00          | 	byte	0
31c66                 | LR__5418
31c66     67 65 74 74 
31c6a     69 6D 65    | 	byte	"gettime"
31c6d     00          | 	byte	0
31c6e                 | LR__5419
31c6e     68 65 78 24 | 	byte	"hex$"
31c72     00          | 	byte	0
31c73                 | LR__5420
31c73     69 6E 6B 65 
31c77     79 24       | 	byte	"inkey$"
31c79     00          | 	byte	0
31c7a                 | LR__5421
31c7a     69 6E 74    | 	byte	"int"
31c7d     00          | 	byte	0
31c7e                 | LR__5422
31c7e     6C 65 66 74 
31c82     24          | 	byte	"left$"
31c83     00          | 	byte	0
31c84                 | LR__5423
31c84     6C 65 6E    | 	byte	"len"
31c87     00          | 	byte	0
31c88                 | LR__5424
31c88     6C 6F 67    | 	byte	"log"
31c8b     00          | 	byte	0
31c8c                 | LR__5425
31c8c     6C 70 65 65 
31c90     6B          | 	byte	"lpeek"
31c91     00          | 	byte	0
31c92                 | LR__5426
31c92     6D 69 64 24 | 	byte	"mid$"
31c96     00          | 	byte	0
31c97                 | LR__5427
31c97     6D 6F 75 73 
31c9b     65 6B       | 	byte	"mousek"
31c9d     00          | 	byte	0
31c9e                 | LR__5428
31c9e     6D 6F 75 73 
31ca2     65 77       | 	byte	"mousew"
31ca4     00          | 	byte	0
31ca5                 | LR__5429
31ca5     6D 6F 75 73 
31ca9     65 78       | 	byte	"mousex"
31cab     00          | 	byte	0
31cac                 | LR__5430
31cac     6D 6F 75 73 
31cb0     65 79       | 	byte	"mousey"
31cb2     00          | 	byte	0
31cb3                 | LR__5431
31cb3     70 65 65 6B | 	byte	"peek"
31cb7     00          | 	byte	0
31cb8                 | LR__5432
31cb8     70 69 6E 72 
31cbc     65 61 64    | 	byte	"pinread"
31cbf     00          | 	byte	0
31cc0                 | LR__5433
31cc0     72 64 70 69 
31cc4     6E          | 	byte	"rdpin"
31cc5     00          | 	byte	0
31cc6                 | LR__5434
31cc6     72 69 67 68 
31cca     74 24       | 	byte	"right$"
31ccc     00          | 	byte	0
31ccd                 | LR__5435
31ccd     72 71 70 69 
31cd1     6E          | 	byte	"rqpin"
31cd2     00          | 	byte	0
31cd3                 | LR__5436
31cd3     72 6F 75 6E 
31cd7     64          | 	byte	"round"
31cd8     00          | 	byte	0
31cd9                 | LR__5437
31cd9     72 6E 64    | 	byte	"rnd"
31cdc     00          | 	byte	0
31cdd                 | LR__5438
31cdd     73 69 6E    | 	byte	"sin"
31ce0     00          | 	byte	0
31ce1                 | LR__5439
31ce1     73 71 72    | 	byte	"sqr"
31ce4     00          | 	byte	0
31ce5                 | LR__5440
31ce5     73 74 69 63 
31ce9     6B          | 	byte	"stick"
31cea     00          | 	byte	0
31ceb                 | LR__5441
31ceb     73 74 72 69 
31cef     67          | 	byte	"strig"
31cf0     00          | 	byte	0
31cf1                 | LR__5442
31cf1     73 74 72 24 | 	byte	"str$"
31cf5     00          | 	byte	0
31cf6                 | LR__5443
31cf6     74 61 6E    | 	byte	"tan"
31cf9     00          | 	byte	0
31cfa                 | LR__5444
31cfa     76 61 6C    | 	byte	"val"
31cfd     00          | 	byte	0
31cfe                 | LR__5445
31cfe     76 61 72 70 
31d02     74 72       | 	byte	"varptr"
31d04     00          | 	byte	0
31d05                 | LR__5446
31d05     61          | 	byte	"a"
31d06     00          | 	byte	0
31d07                 | LR__5447
31d07     7A          | 	byte	"z"
31d08     00          | 	byte	0
31d09                 | LR__5448
31d09     5F          | 	byte	"_"
31d0a     00          | 	byte	0
31d0b                 | LR__5449
31d0b     61          | 	byte	"a"
31d0c     00          | 	byte	0
31d0d                 | LR__5450
31d0d     7A          | 	byte	"z"
31d0e     00          | 	byte	0
31d0f                 | LR__5451
31d0f     30          | 	byte	"0"
31d10     00          | 	byte	0
31d11                 | LR__5452
31d11     39          | 	byte	"9"
31d12     00          | 	byte	0
31d13                 | LR__5453
31d13     5F          | 	byte	"_"
31d14     00          | 	byte	0
31d15                 | LR__5454
31d15     2E          | 	byte	"."
31d16     00          | 	byte	0
31d17                 | LR__5455
31d17     61          | 	byte	"a"
31d18     00          | 	byte	0
31d19                 | LR__5456
31d19     7A          | 	byte	"z"
31d1a     00          | 	byte	0
31d1b                 | LR__5457
31d1b     30          | 	byte	"0"
31d1c     00          | 	byte	0
31d1d                 | LR__5458
31d1d     39          | 	byte	"9"
31d1e     00          | 	byte	0
31d1f                 | LR__5459
31d1f     5F          | 	byte	"_"
31d20     00          | 	byte	0
31d21                 | LR__5460
31d21     24          | 	byte	"$"
31d22     00          | 	byte	0
31d23                 | LR__5461
31d23     25          | 	byte	"%"
31d24     00          | 	byte	0
31d25                 | LR__5462
31d25     21          | 	byte	"!"
31d26     00          | 	byte	0
31d27                 | LR__5463
31d27     30          | 	byte	"0"
31d28     00          | 	byte	0
31d29                 | LR__5464
31d29     39          | 	byte	"9"
31d2a     00          | 	byte	0
31d2b                 | LR__5465
31d2b     2E          | 	byte	"."
31d2c     00          | 	byte	0
31d2d                 | LR__5466
31d2d     24          | 	byte	"$"
31d2e     00          | 	byte	0
31d2f                 | LR__5467
31d2f     25          | 	byte	"%"
31d30     00          | 	byte	0
31d31                 | LR__5468
31d31     2D          | 	byte	"-"
31d32     00          | 	byte	0
31d33                 | LR__5469
31d33     2E          | 	byte	"."
31d34     00          | 	byte	0
31d35                 | LR__5470
31d35     24          | 	byte	"$"
31d36     00          | 	byte	0
31d37                 | LR__5471
31d37     25          | 	byte	"%"
31d38     00          | 	byte	0
31d39                 | LR__5472
31d39     30          | 	byte	"0"
31d3a     00          | 	byte	0
31d3b                 | LR__5473
31d3b     39          | 	byte	"9"
31d3c     00          | 	byte	0
31d3d                 | LR__5474
31d3d     5F          | 	byte	"_"
31d3e     00          | 	byte	0
31d3f                 | LR__5475
31d3f     2E          | 	byte	"."
31d40     00          | 	byte	0
31d41                 | LR__5476
31d41     45          | 	byte	"E"
31d42     00          | 	byte	0
31d43                 | LR__5477
31d43     65          | 	byte	"e"
31d44     00          | 	byte	0
31d45                 | LR__5478
31d45     2D          | 	byte	"-"
31d46     00          | 	byte	0
31d47                 | LR__5479
31d47     61          | 	byte	"a"
31d48     00          | 	byte	0
31d49                 | LR__5480
31d49     66          | 	byte	"f"
31d4a     00          | 	byte	0
31d4b                 | LR__5481
31d4b     30          | 	byte	"0"
31d4c     00          | 	byte	0
31d4d                 | LR__5482
31d4d     31          | 	byte	"1"
31d4e     00          | 	byte	0
31d4f                 | LR__5483
31d4f     5F          | 	byte	"_"
31d50     00          | 	byte	0
31d51                 | LR__5484
31d51     2D          | 	byte	"-"
31d52     00          | 	byte	0
31d53                 | LR__5485
31d53     65          | 	byte	"e"
31d54     00          | 	byte	0
31d55                 | LR__5486
31d55     2E          | 	byte	"."
31d56     00          | 	byte	0
31d57                 | LR__5487
31d57     45          | 	byte	"E"
31d58     00          | 	byte	0
31d59                 | LR__5488
31d59     65          | 	byte	"e"
31d5a     00          | 	byte	0
31d5b                 | LR__5489
31d5b     30          | 	byte	"0"
31d5c     00          | 	byte	0
31d5d                 | LR__5490
31d5d     39          | 	byte	"9"
31d5e     00          | 	byte	0
31d5f                 | LR__5491
31d5f     24          | 	byte	"$"
31d60     00          | 	byte	0
31d61                 | LR__5492
31d61     25          | 	byte	"%"
31d62     00          | 	byte	0
31d63                 | LR__5493
31d63     2D          | 	byte	"-"
31d64     00          | 	byte	0
31d65                 | LR__5494
31d65     24          | 	byte	"$"
31d66     00          | 	byte	0
31d67                 | LR__5495
31d67     25          | 	byte	"%"
31d68     00          | 	byte	0
31d69                 | LR__5496
31d69     30          | 	byte	"0"
31d6a     00          | 	byte	0
31d6b                 | LR__5497
31d6b     39          | 	byte	"9"
31d6c     00          | 	byte	0
31d6d                 | LR__5498
31d6d     5F          | 	byte	"_"
31d6e     00          | 	byte	0
31d6f                 | LR__5499
31d6f     30          | 	byte	"0"
31d70     00          | 	byte	0
31d71                 | LR__5500
31d71     39          | 	byte	"9"
31d72     00          | 	byte	0
31d73                 | LR__5501
31d73     61          | 	byte	"a"
31d74     00          | 	byte	0
31d75                 | LR__5502
31d75     66          | 	byte	"f"
31d76     00          | 	byte	0
31d77                 | LR__5503
31d77     5F          | 	byte	"_"
31d78     00          | 	byte	0
31d79                 | LR__5504
31d79     30          | 	byte	"0"
31d7a     00          | 	byte	0
31d7b                 | LR__5505
31d7b     31          | 	byte	"1"
31d7c     00          | 	byte	0
31d7d                 | LR__5506
31d7d     5F          | 	byte	"_"
31d7e     00          | 	byte	0
31d7f                 | LR__5507
31d7f     30          | 	byte	"0"
31d80     00          | 	byte	0
31d81                 | LR__5508
31d81     39          | 	byte	"9"
31d82     00          | 	byte	0
31d83                 | LR__5509
31d83     5F          | 	byte	"_"
31d84     00          | 	byte	0
31d85                 | LR__5510
31d85     22          | 	byte	34
31d86     00          | 	byte	0
31d87                 | LR__5511
31d87     22          | 	byte	34
31d88     00          | 	byte	0
31d89                 | LR__5512
31d89     44 69 6D 3A 
31d8d     20 61 74 20 
31d91     6C 69 6E 65 
31d95     20          | 	byte	"Dim: at line "
31d96     00          | 	byte	0
31d97                 | LR__5513
31d97     3A 20 77 61 
31d9b     72 6E 69 6E 
31d9f     67 3A 20 74 
31da3     68 65 20 76 
31da7     61 72 69 61 
31dab     62 6C 65 20 
31daf     65 78 69 73 
31db3     74 65 64 2E | 	byte	": warning: the variable existed."
31db7     00          | 	byte	0
31db8                 | LR__5514
31db8     28          | 	byte	"("
31db9     00          | 	byte	0
31dba                 | LR__5515
31dba     61 73       | 	byte	"as"
31dbc     00          | 	byte	0
31dbd                 | LR__5516
31dbd     61 73       | 	byte	"as"
31dbf     00          | 	byte	0
31dc0                 | LR__5517
31dc0     2C          | 	byte	","
31dc1     00          | 	byte	0
31dc2                 | LR__5518
31dc2     29          | 	byte	")"
31dc3     00          | 	byte	0
31dc4                 | LR__5519
31dc4     29          | 	byte	")"
31dc5     00          | 	byte	0
31dc6                 | LR__5520
31dc6     61 73       | 	byte	"as"
31dc8     00          | 	byte	0
31dc9                 | LR__5521
31dc9     62 79 74 65 | 	byte	"byte"
31dcd     00          | 	byte	0
31dce                 | LR__5522
31dce     75 62 79 74 
31dd2     65          | 	byte	"ubyte"
31dd3     00          | 	byte	0
31dd4                 | LR__5523
31dd4     73 68 6F 72 
31dd8     74          | 	byte	"short"
31dd9     00          | 	byte	0
31dda                 | LR__5524
31dda     75 73 68 6F 
31dde     72 74       | 	byte	"ushort"
31de0     00          | 	byte	0
31de1                 | LR__5525
31de1     6C 6F 6E 67 | 	byte	"long"
31de5     00          | 	byte	0
31de6                 | LR__5526
31de6     69 6E 74 65 
31dea     67 65 72    | 	byte	"integer"
31ded     00          | 	byte	0
31dee                 | LR__5527
31dee     75 6C 6F 6E 
31df2     67          | 	byte	"ulong"
31df3     00          | 	byte	0
31df4                 | LR__5528
31df4     69 6E 74 36 
31df8     34          | 	byte	"int64"
31df9     00          | 	byte	0
31dfa                 | LR__5529
31dfa     75 69 6E 74 
31dfe     36 34       | 	byte	"uint64"
31e00     00          | 	byte	0
31e01                 | LR__5530
31e01     73 69 6E 67 
31e05     6C 65       | 	byte	"single"
31e07     00          | 	byte	0
31e08                 | LR__5531
31e08     64 6F 75 62 
31e0c     6C 65       | 	byte	"double"
31e0e     00          | 	byte	0
31e0f                 | LR__5532
31e0f     73 74 72 69 
31e13     6E 67       | 	byte	"string"
31e15     00          | 	byte	0
31e16                 | LR__5533
31e16     74 6F       | 	byte	"to"
31e18     00          | 	byte	0
31e19                 | LR__5534
31e19     73 74 65 70 | 	byte	"step"
31e1d     00          | 	byte	0
31e1e                 | LR__5535
31e1e     73 2E       | 	byte	"s."
31e20     00          | 	byte	0
31e21                 | LR__5536
31e21     24          | 	byte	"$"
31e22     00          | 	byte	0
31e23                 | LR__5537
31e23     26 68       | 	byte	"&h"
31e25     00          | 	byte	0
31e26                 | LR__5538
31e26     25          | 	byte	"%"
31e27     00          | 	byte	0
31e28                 | LR__5539
31e28     26 62       | 	byte	"&b"
31e2a     00          | 	byte	0
31e2b                 | LR__5540
31e2b                 | 	byte	
31e2b     00          | 	byte	0
31e2c                 | LR__5541
31e2c     61 63 6F 73 
31e30     3A 20       | 	byte	"acos: "
31e32     00          | 	byte	0
31e33                 | LR__5542
31e33     61 73 63 3A 
31e37     20          | 	byte	"asc: "
31e38     00          | 	byte	0
31e39                 | LR__5543
31e39     61 73 63 3A 
31e3d     20          | 	byte	"asc: "
31e3e     00          | 	byte	0
31e3f                 | LR__5544
31e3f     61 73 69 6E 
31e43     3A 20       | 	byte	"asin: "
31e45     00          | 	byte	0
31e46                 | LR__5545
31e46     61 74 6E 3A 
31e4a     20          | 	byte	"atn: "
31e4b     00          | 	byte	0
31e4c                 | LR__5546
31e4c     62 6C 69 74 
31e50     3A 20       | 	byte	"blit: "
31e52     00          | 	byte	0
31e53                 | LR__5547
31e53     62 69 6E 24 
31e57     3A 20       | 	byte	"bin$: "
31e59     00          | 	byte	0
31e5a                 | LR__5548
31e5a     2F          | 	byte	"/"
31e5b     00          | 	byte	0
31e5c                 | LR__5549
31e5c     2F 73 64 2F 
31e60     62 69 6E 2F | 	byte	"/sd/bin/"
31e64     00          | 	byte	0
31e65                 | LR__5550
31e65     53 79 73 74 
31e69     65 6D 20 65 
31e6d     72 72 6F 72 
31e71     20          | 	byte	"System error "
31e72     00          | 	byte	0
31e73                 | LR__5551
31e73     3A 20       | 	byte	": "
31e75     00          | 	byte	0
31e76                 | LR__5552
31e76     2A          | 	byte	"*"
31e77     00          | 	byte	0
31e78                 | LR__5553
31e78     2E 2E       | 	byte	".."
31e7a     00          | 	byte	0
31e7b                 | LR__5554
31e7b     2F          | 	byte	"/"
31e7c     00          | 	byte	0
31e7d                 | LR__5555
31e7d     2F          | 	byte	"/"
31e7e     00          | 	byte	0
31e7f                 | LR__5556
31e7f     53 79 73 74 
31e83     65 6D 20 65 
31e87     72 72 6F 72 
31e8b     20          | 	byte	"System error "
31e8c     00          | 	byte	0
31e8d                 | LR__5557
31e8d     3A 20       | 	byte	": "
31e8f     00          | 	byte	0
31e90                 | LR__5558
31e90     43 75 72 72 
31e94     65 6E 74 20 
31e98     64 69 72 65 
31e9c     63 74 6F 72 
31ea0     79 3A 20    | 	byte	"Current directory: "
31ea3     00          | 	byte	0
31ea4                 | LR__5559
31ea4     2F          | 	byte	"/"
31ea5     00          | 	byte	0
31ea6                 | LR__5560
31ea6     53 79 73 74 
31eaa     65 6D 20 65 
31eae     72 72 6F 72 
31eb2     20          | 	byte	"System error "
31eb3     00          | 	byte	0
31eb4                 | LR__5561
31eb4     3A 20       | 	byte	": "
31eb6     00          | 	byte	0
31eb7                 | LR__5562
31eb7     43 75 72 72 
31ebb     65 6E 74 20 
31ebf     64 69 72 65 
31ec3     63 74 6F 72 
31ec7     79 3A 20    | 	byte	"Current directory: "
31eca     00          | 	byte	0
31ecb                 | LR__5563
31ecb     2F          | 	byte	"/"
31ecc     00          | 	byte	0
31ecd                 | LR__5564
31ecd     2F          | 	byte	"/"
31ece     00          | 	byte	0
31ecf                 | LR__5565
31ecf     2F          | 	byte	"/"
31ed0     00          | 	byte	0
31ed1                 | LR__5566
31ed1     53 79 73 74 
31ed5     65 6D 20 65 
31ed9     72 72 6F 72 
31edd     20          | 	byte	"System error "
31ede     00          | 	byte	0
31edf                 | LR__5567
31edf     3A 20       | 	byte	": "
31ee1     00          | 	byte	0
31ee2                 | LR__5568
31ee2     43 75 72 72 
31ee6     65 6E 74 20 
31eea     64 69 72 65 
31eee     63 74 6F 72 
31ef2     79 3A 20    | 	byte	"Current directory: "
31ef5     00          | 	byte	0
31ef6                 | LR__5569
31ef6     63 68 72 24 
31efa     3A 20       | 	byte	"chr$: "
31efc     00          | 	byte	0
31efd                 | LR__5570
31efd     63 68 61 6E 
31f01     6E 65 6C 23 
31f05     20 65 78 70 
31f09     65 63 74 65 
31f0d     64          | 	byte	"channel# expected"
31f0e     00          | 	byte	0
31f0f                 | LR__5571
31f0f     63 6F 73 3A 
31f13     20          | 	byte	"cos: "
31f14     00          | 	byte	0
31f15                 | LR__5572
31f15                 | 	byte	
31f15     00          | 	byte	0
31f16                 | LR__5573
31f16                 | 	byte	
31f16     00          | 	byte	0
31f17                 | LR__5574
31f17     2F 73 64 2F 
31f1b     6D 65 64 69 
31f1f     61 2F 68 2F | 	byte	"/sd/media/h/"
31f23     00          | 	byte	0
31f24                 | LR__5575
31f24     53 79 73 74 
31f28     65 6D 20 65 
31f2c     72 72 6F 72 
31f30     20          | 	byte	"System error "
31f31     00          | 	byte	0
31f32                 | LR__5576
31f32     3A 20       | 	byte	": "
31f34     00          | 	byte	0
31f35                 | LR__5577
31f35                 | 	byte	
31f35     00          | 	byte	0
31f36                 | LR__5578
31f36                 | 	byte	
31f36     00          | 	byte	0
31f37                 | LR__5579
31f37     2F 73 64 2F 
31f3b     6D 65 64 69 
31f3f     61 2F 73 2F | 	byte	"/sd/media/s/"
31f43     00          | 	byte	0
31f44                 | LR__5580
31f44     53 79 73 74 
31f48     65 6D 20 65 
31f4c     72 72 6F 72 
31f50     20          | 	byte	"System error "
31f51     00          | 	byte	0
31f52                 | LR__5581
31f52     3A 20       | 	byte	": "
31f54     00          | 	byte	0
31f55                 | LR__5582
31f55     2F          | 	byte	"/"
31f56     00          | 	byte	0
31f57                 | LR__5583
31f57     2F          | 	byte	"/"
31f58     00          | 	byte	0
31f59                 | LR__5584
31f59     2F          | 	byte	"/"
31f5a     00          | 	byte	0
31f5b                 | LR__5585
31f5b     43 61 6E 6E 
31f5f     6F 74 20 64 
31f63     65 6C 65 74 
31f67     65 20 66 69 
31f6b     6C 65 20 6F 
31f6f     72 20 66 69 
31f73     6C 65 20 64 
31f77     6F 65 73 6E 
31f7b     27 74 20 65 
31f7f     78 69 73 74 
31f83     3A 20 73 79 
31f87     73 74 65 6D 
31f8b     20 65 72 72 
31f8f     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
31f92     00          | 	byte	0
31f93                 | LR__5586
31f93     43 75 72 72 
31f97     65 6E 74 20 
31f9b     64 69 72 65 
31f9f     63 74 6F 72 
31fa3     79 3A 20    | 	byte	"Current directory: "
31fa6     00          | 	byte	0
31fa7                 | LR__5587
31fa7                 | 	byte	
31fa7     00          | 	byte	0
31fa8                 | LR__5588
31fa8     2A          | 	byte	"*"
31fa9     00          | 	byte	0
31faa                 | LR__5589
31faa                 | 	byte	
31faa     00          | 	byte	0
31fab                 | LR__5590
31fab     5B 64 69 72 
31faf     5D 20       | 	byte	"[dir] "
31fb1     00          | 	byte	0
31fb2                 | LR__5591
31fb2     4D 6F 72 65 
31fb6     20 74 68 61 
31fba     6E 20 31 32 
31fbe     38 20 65 6E 
31fc2     74 72 69 65 
31fc6     73 20 66 6F 
31fca     75 6E 64 3A 
31fce     20 63 6C 65 
31fd2     61 6E 20 79 
31fd6     6F 75 72 20 
31fda     64 69 72 65 
31fde     63 74 6F 72 
31fe2     79          | 	byte	"More than 128 entries found: clean your directory"
31fe3     00          | 	byte	0
31fe4                 | LR__5592
31fe4     2A          | 	byte	"*"
31fe5     00          | 	byte	0
31fe6                 | LR__5593
31fe6                 | 	byte	
31fe6     00          | 	byte	0
31fe7                 | LR__5594
31fe7     4D 6F 72 65 
31feb     20 74 68 61 
31fef     6E 20 31 32 
31ff3     38 20 65 6E 
31ff7     74 72 69 65 
31ffb     73 20 66 6F 
31fff     75 6E 64 3A 
32003     20 63 6C 65 
32007     61 6E 20 79 
3200b     6F 75 72 20 
3200f     64 69 72 65 
32013     63 74 6F 72 
32017     79          | 	byte	"More than 128 entries found: clean your directory"
32018     00          | 	byte	0
32019                 | LR__5595
32019     45 72 72 6F 
3201d     72 20       | 	byte	"Error "
3201f     00          | 	byte	0
32020                 | LR__5596
32020     3A 20       | 	byte	": "
32022     00          | 	byte	0
32023                 | LR__5597
32023     67 65 74 65 
32027     6E 76 73 75 
3202b     73 74 61 69 
3202f     6E 3A 20    | 	byte	"getenvsustain: "
32032     00          | 	byte	0
32033                 | LR__5598
32033     67 65 74 70 
32037     69 78 65 6C 
3203b     3A 20       | 	byte	"getpixel: "
3203d     00          | 	byte	0
3203e                 | LR__5599
3203e     68 65 78 24 
32042     3A 20       | 	byte	"hex$: "
32044     00          | 	byte	0
32045                 | LR__5600
32045                 | 	byte	
32045     00          | 	byte	0
32046                 | LR__5601
32046     6C 65 66 74 
3204a     24 3A 20    | 	byte	"left$: "
3204d     00          | 	byte	0
3204e                 | LR__5602
3204e     6C 65 66 74 
32052     24 3A 20    | 	byte	"left$: "
32055     00          | 	byte	0
32056                 | LR__5603
32056     6C 65 6E 3A 
3205a     20          | 	byte	"len: "
3205b     00          | 	byte	0
3205c                 | LR__5604
3205c     6C 65 6E 3A 
32060     20          | 	byte	"len: "
32061     00          | 	byte	0
32062                 | LR__5605
32062                 | 	byte	
32062     00          | 	byte	0
32063                 | LR__5606
32063     2F          | 	byte	"/"
32064     00          | 	byte	0
32065                 | LR__5607
32065     2F          | 	byte	"/"
32066     00          | 	byte	0
32067                 | LR__5608
32067     2E 62 61 73 | 	byte	".bas"
3206b     00          | 	byte	0
3206c                 | LR__5609
3206c     53 79 73 74 
32070     65 6D 20 65 
32074     72 72 6F 72 
32078     20          | 	byte	"System error "
32079     00          | 	byte	0
3207a                 | LR__5610
3207a     3A 20       | 	byte	": "
3207c     00          | 	byte	0
3207d                 | LR__5611
3207d     2E 62 61 73 | 	byte	".bas"
32081     00          | 	byte	0
32082                 | LR__5612
32082     2F          | 	byte	"/"
32083     00          | 	byte	0
32084                 | LR__5613
32084                 | 	byte	
32084     00          | 	byte	0
32085                 | LR__5614
32085     4C 6F 61 64 
32089     65 64 20    | 	byte	"Loaded "
3208c     00          | 	byte	0
3208d                 | LR__5615
3208d     2F          | 	byte	"/"
3208e     00          | 	byte	0
3208f                 | LR__5616
3208f     6C 6F 67 3A 
32093     20          | 	byte	"log: "
32094     00          | 	byte	0
32095                 | LR__5617
32095     6D 69 64 24 
32099     3A 20       | 	byte	"mid$: "
3209b     00          | 	byte	0
3209c                 | LR__5618
3209c     6D 69 64 24 
320a0     3A 20       | 	byte	"mid$: "
320a2     00          | 	byte	0
320a3                 | LR__5619
320a3     43 61 6E 6E 
320a7     6F 74 20 63 
320ab     72 65 61 74 
320af     65 20 61 20 
320b3     64 69 72 65 
320b7     63 74 6F 72 
320bb     79 3A 20 73 
320bf     79 73 74 65 
320c3     6D 20 65 72 
320c7     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
320cb     00          | 	byte	0
320cc                 | LR__5620
320cc     20 42 41 53 
320d0     49 43 20 62 
320d4     79 74 65 73 
320d8     20 66 72 65 
320dc     65          | 	byte	" BASIC bytes free"
320dd     00          | 	byte	0
320de                 | LR__5621
320de                 | 	byte	
320de     00          | 	byte	0
320df                 | LR__5622
320df                 | 	byte	
320df     00          | 	byte	0
320e0                 | LR__5623
320e0     6E 6F 6E 61 
320e4     6D 65 2E 62 
320e8     61 73       | 	byte	"noname.bas"
320ea     00          | 	byte	0
320eb                 | LR__5624
320eb     66 69 6C 65 
320ef     6E 61 6D 65 
320f3     20 65 78 70 
320f7     65 63 74 65 
320fb     64          | 	byte	"filename expected"
320fc     00          | 	byte	0
320fd                 | LR__5625
320fd     72 65 61 64 | 	byte	"read"
32101     00          | 	byte	0
32102                 | LR__5626
32102     77 72 69 74 
32106     65          | 	byte	"write"
32107     00          | 	byte	0
32108                 | LR__5627
32108     61 70 70 65 
3210c     6E 64       | 	byte	"append"
3210e     00          | 	byte	0
3210f                 | LR__5628
3210f     63 68 61 6E 
32113     6E 65 6C 23 
32117     20 65 78 70 
3211b     65 63 74 65 
3211f     64          | 	byte	"channel# expected"
32120     00          | 	byte	0
32121                 | LR__5629
32121     4F 70 65 6E 
32125     3A 20 69 6E 
32129     76 61 6C 69 
3212d     64 20 6D 6F 
32131     64 65       | 	byte	"Open: invalid mode"
32133     00          | 	byte	0
32134                 | LR__5630
32134     50 72 69 6E 
32138     74 20 74 6F 
3213c     20 63 68 61 
32140     6E 6E 65 6C 
32144     20 28 6E 6F 
32148     74 20 79 65 
3214c     74 20 69 6D 
32150     70 6C 65 6D 
32154     65 6E 74 65 
32158     64 29       | 	byte	"Print to channel (not yet implemented)"
3215a     00          | 	byte	0
3215b                 | LR__5631
3215b     72 69 67 68 
3215f     74 24 3A 20 | 	byte	"right$: "
32163     00          | 	byte	0
32164                 | LR__5632
32164     72 69 67 68 
32168     74 24 3A 20 | 	byte	"right$: "
3216c     00          | 	byte	0
3216d                 | LR__5633
3216d     72 6E 64 3A 
32171     20          | 	byte	"rnd: "
32172     00          | 	byte	0
32173                 | LR__5634
32173     72 6E 64 3A 
32177     20          | 	byte	"rnd: "
32178     00          | 	byte	0
32179                 | LR__5635
32179     53 74 6F 70 
3217d     70 65 64 20 
32181     61 74 20 6C 
32185     69 6E 65 20 | 	byte	"Stopped at line "
32189     00          | 	byte	0
3218a                 | LR__5636
3218a                 | 	byte	
3218a     00          | 	byte	0
3218b                 | LR__5637
3218b     2F          | 	byte	"/"
3218c     00          | 	byte	0
3218d                 | LR__5638
3218d                 | 	byte	
3218d     00          | 	byte	0
3218e                 | LR__5639
3218e     53 61 76 65 
32192     64 20 61 73 
32196     20          | 	byte	"Saved as "
32197     00          | 	byte	0
32198                 | LR__5640
32198     2F          | 	byte	"/"
32199     00          | 	byte	0
3219a                 | LR__5641
3219a     73 69 6E 3A 
3219e     20          | 	byte	"sin: "
3219f     00          | 	byte	0
321a0                 | LR__5642
321a0     73 71 72 3A 
321a4     20          | 	byte	"sqr: "
321a5     00          | 	byte	0
321a6                 | LR__5643
321a6     73 74 69 63 
321aa     6B 3A 20    | 	byte	"stick: "
321ad     00          | 	byte	0
321ae                 | LR__5644
321ae     73 74 72 69 
321b2     67 3A 20    | 	byte	"strig: "
321b5     00          | 	byte	0
321b6                 | LR__5645
321b6     74 61 6E 3A 
321ba     20          | 	byte	"tan: "
321bb     00          | 	byte	0
321bc                 | LR__5646
321bc     76 61 6C 3A 
321c0     20          | 	byte	"val: "
321c1     00          | 	byte	0
321c2                 | LR__5647
321c2     76 61 6C 3A 
321c6     20          | 	byte	"val: "
321c7     00          | 	byte	0
321c8                 | LR__5648
321c8     24          | 	byte	"$"
321c9     00          | 	byte	0
321ca                 | LR__5649
321ca     26 68       | 	byte	"&h"
321cc     00          | 	byte	0
321cd                 | LR__5650
321cd     25          | 	byte	"%"
321ce     00          | 	byte	0
321cf                 | LR__5651
321cf     26 62       | 	byte	"&b"
321d1     00          | 	byte	0
321d2                 | LR__5652
321d2                 | 	byte	
321d2     00          | 	byte	0
321d3                 | LR__5653
321d3     45 78 70 65 
321d7     63 74 65 64 
321db     20 6E 75 6D 
321df     62 65 72 2C 
321e3     20 67 6F 74 
321e7     20 73 6F 6D 
321eb     65 74 68 69 
321ef     6E 67 20 65 
321f3     6C 73 65    | 	byte	"Expected number, got something else"
321f6     00          | 	byte	0
321f7                 | LR__5654
321f7     43 61 6E 6E 
321fb     6F 74 20 61 
321ff     64 64 20 61 
32203     20 6E 75 6D 
32207     62 65 72 20 
3220b     74 6F 20 61 
3220f     20 73 74 72 
32213     69 6E 67    | 	byte	"Cannot add a number to a string"
32216     00          | 	byte	0
32217                 | LR__5655
32217     43 61 6E 6E 
3221b     6F 74 20 73 
3221f     75 62 73 74 
32223     72 61 63 74 
32227     20 73 74 72 
3222b     69 6E 67 73 | 	byte	"Cannot substract strings"
3222f     00          | 	byte	0
32230                 | LR__5656
32230     55 6E 6B 6E 
32234     6F 77 6E 20 
32238     65 72 72 6F 
3223c     72 20 77 68 
32240     69 6C 65 20 
32244     61 64 64 69 
32248     6E 67       | 	byte	"Unknown error while adding"
3224a     00          | 	byte	0
3224b                 | LR__5657
3224b     55 6E 6B 6E 
3224f     6F 77 6E 20 
32253     65 72 72 6F 
32257     72 20 77 68 
3225b     69 6C 65 20 
3225f     73 75 62 73 
32263     74 72 61 63 
32267     74 69 6E 67 | 	byte	"Unknown error while substracting"
3226b     00          | 	byte	0
3226c                 | LR__5658
3226c     43 61 6E 6E 
32270     6F 74 20 64 
32274     6F 20 6C 6F 
32278     67 69 63 20 
3227c     6F 70 65 72 
32280     61 74 69 6F 
32284     6E 20 6F 6E 
32288     20 73 74 72 
3228c     69 6E 67 20 
32290     6F 72 20 66 
32294     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
32298     00          | 	byte	0
32299                 | LR__5659
32299     55 6E 6B 6E 
3229d     6F 77 6E 20 
322a1     65 72 72 6F 
322a5     72 20 77 68 
322a9     69 6C 65 20 
322ad     64 6F 69 6E 
322b1     67 20 6C 6F 
322b5     67 69 63 20 
322b9     6F 70 65 72 
322bd     61 74 69 6F 
322c1     6E          | 	byte	"Unknown error while doing logic operation"
322c2     00          | 	byte	0
322c3                 | LR__5660
322c3     43 61 6E 6E 
322c7     6F 74 20 6D 
322cb     75 6C 74 69 
322cf     70 6C 79 20 
322d3     73 74 72 69 
322d7     6E 67 73    | 	byte	"Cannot multiply strings"
322da     00          | 	byte	0
322db                 | LR__5661
322db     55 6E 6B 6E 
322df     6F 77 6E 20 
322e3     65 72 72 6F 
322e7     72 20 77 68 
322eb     69 6C 65 20 
322ef     6D 75 6C 74 
322f3     69 70 6C 79 
322f7     69 6E 67    | 	byte	"Unknown error while multiplying"
322fa     00          | 	byte	0
322fb                 | LR__5662
322fb     43 61 6E 6E 
322ff     6F 74 20 64 
32303     69 76 69 64 
32307     65 20 73 74 
3230b     72 69 6E 67 
3230f     73          | 	byte	"Cannot divide strings"
32310     00          | 	byte	0
32311                 | LR__5663
32311     55 6E 6B 6E 
32315     6F 77 6E 20 
32319     65 72 72 6F 
3231d     72 20 77 68 
32321     69 6C 65 20 
32325     64 69 76 69 
32329     64 69 6E 67 | 	byte	"Unknown error while dividing"
3232d     00          | 	byte	0
3232e                 | LR__5664
3232e     43 61 6E 6E 
32332     6F 74 20 63 
32336     6F 6D 70 75 
3233a     74 65 20 61 
3233e     20 70 6F 77 
32342     65 72 20 6F 
32346     66 20 61 20 
3234a     73 74 72 69 
3234e     6E 67       | 	byte	"Cannot compute a power of a string"
32350     00          | 	byte	0
32351                 | LR__5665
32351     55 6E 6B 6E 
32355     6F 77 6E 20 
32359     65 72 72 6F 
3235d     72 20 77 68 
32361     69 6C 65 20 
32365     63 6F 6D 70 
32369     75 74 69 6E 
3236d     67 20 61 20 
32371     70 6F 77 65 
32375     72          | 	byte	"Unknown error while computing a power"
32376     00          | 	byte	0
32377                 | LR__5666
32377     52 69 67 68 
3237b     74 20 70 61 
3237f     72 65 6E 74 
32383     68 65 73 69 
32387     73 20 65 78 
3238b     70 65 63 74 
3238f     65 64       | 	byte	"Right parenthesis expected"
32391     00          | 	byte	0
32392                 | LR__5667
32392     45 78 70 65 
32396     63 74 65 64 
3239a     20 73 74 72 
3239e     69 6E 67    | 	byte	"Expected string"
323a1     00          | 	byte	0
323a2                 | LR__5668
323a2     45 78 70 65 
323a6     63 74 65 64 
323aa     20 66 6C 6F 
323ae     61 74       | 	byte	"Expected float"
323b0     00          | 	byte	0
323b1                 | LR__5669
323b1     45 78 70 65 
323b5     63 74 65 64 
323b9     20 75 6E 73 
323bd     69 67 6E 65 
323c1     64 20 69 6E 
323c5     74 65 67 65 
323c9     72          | 	byte	"Expected unsigned integer"
323ca     00          | 	byte	0
323cb                 | LR__5670
323cb     45 78 70 65 
323cf     63 74 65 64 
323d3     20 69 6E 74 
323d7     65 67 65 72 | 	byte	"Expected integer"
323db     00          | 	byte	0
323dc                 | LR__5671
323dc     4E 6F 20 6D 
323e0     6F 72 65 20 
323e4     76 61 72 69 
323e8     61 62 6C 65 
323ec     20 73 6C 6F 
323f0     74 73       | 	byte	"No more variable slots"
323f2     00          | 	byte	0
323f3                 | LR__5672
323f3     56 61 72 69 
323f7     61 62 6C 65 
323fb     20 6E 6F 74 
323ff     20 66 6F 75 
32403     6E 64       | 	byte	"Variable not found"
32405     00          | 	byte	0
32406                 | LR__5673
32406     43 6F 6D 6D 
3240a     61 20 65 78 
3240e     70 65 63 74 
32412     65 64       | 	byte	"Comma expected"
32414     00          | 	byte	0
32415                 | LR__5674
32415     43 6F 6D 6D 
32419     61 20 6F 72 
3241d     20 73 65 6D 
32421     69 63 6F 6C 
32425     6F 6E 20 65 
32429     78 70 65 63 
3242d     74 65 64    | 	byte	"Comma or semicolon expected"
32430     00          | 	byte	0
32431                 | LR__5675
32431     55 6E 6B 6E 
32435     6F 77 6E 20 
32439     63 6F 6D 6D 
3243d     61 6E 64    | 	byte	"Unknown command"
32440     00          | 	byte	0
32441                 | LR__5676
32441     53 74 61 63 
32445     6B 20 75 6E 
32449     64 65 72 66 
3244d     6C 6F 77    | 	byte	"Stack underflow"
32450     00          | 	byte	0
32451                 | LR__5677
32451     43 61 6E 6E 
32455     6F 74 20 65 
32459     78 65 63 75 
3245d     74 65 20 67 
32461     6F 74 6F 20 
32465     6F 72 20 67 
32469     6F 73 75 62 
3246d     20 69 6E 20 
32471     74 68 65 20 
32475     69 6D 6D 65 
32479     64 69 61 74 
3247d     65 20 6D 6F 
32481     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
32483     00          | 	byte	0
32484                 | LR__5678
32484     43 61 6E 6E 
32488     6F 74 20 6C 
3248c     6F 61 64 20 
32490     66 72 6F 6D 
32494     20 74 68 69 
32498     73 20 66 69 
3249c     6C 65       | 	byte	"Cannot load from this file"
3249e     00          | 	byte	0
3249f                 | LR__5679
3249f     54 68 65 20 
324a3     70 72 6F 67 
324a7     72 61 6D 20 
324ab     69 73 20 65 
324af     6D 70 74 79 | 	byte	"The program is empty"
324b3     00          | 	byte	0
324b4                 | LR__5680
324b4     49 66 20 61 
324b8     66 74 65 72 
324bc     20 69 66    | 	byte	"If after if"
324bf     00          | 	byte	0
324c0                 | LR__5681
324c0     45 6D 70 74 
324c4     79 20 65 78 
324c8     70 72 65 73 
324cc     73 69 6F 6E | 	byte	"Empty expression"
324d0     00          | 	byte	0
324d1                 | LR__5682
324d1     53 74 72 69 
324d5     6E 67 20 65 
324d9     78 70 65 63 
324dd     74 65 64    | 	byte	"String expected"
324e0     00          | 	byte	0
324e1                 | LR__5683
324e1     49 6E 74 65 
324e5     72 70 72 65 
324e9     74 65 72 20 
324ed     69 6E 74 65 
324f1     72 6E 61 6C 
324f5     20 65 72 72 
324f9     6F 72       | 	byte	"Interpreter internal error"
324fb     00          | 	byte	0
324fc                 | LR__5684
324fc     45 78 70 65 
32500     63 74 65 64 
32504     20 61 73 73 
32508     69 67 6E    | 	byte	"Expected assign"
3250b     00          | 	byte	0
3250c                 | LR__5685
3250c     45 78 70 65 
32510     63 74 65 64 
32514     20 27 74 6F 
32518     27          | 	byte	"Expected 'to'"
32519     00          | 	byte	0
3251a                 | LR__5686
3251a     45 78 70 65 
3251e     63 74 65 64 
32522     20 69 6E 74 
32526     65 67 65 72 
3252a     20 76 61 72 
3252e     69 61 62 6C 
32532     65          | 	byte	"Expected integer variable"
32533     00          | 	byte	0
32534                 | LR__5687
32534     55 6E 69 6E 
32538     69 74 69 61 
3253c     6C 69 7A 65 
32540     64 20 76 61 
32544     72 69 61 62 
32548     6C 65 20 69 
3254c     6E 20 27 6E 
32550     65 78 74 27 
32554     2C 20 75 73 
32558     65 20 27 66 
3255c     6F 72 27 20 
32560     62 65 66 6F 
32564     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
32566     00          | 	byte	0
32567                 | LR__5688
32567     4E 6F 20 6D 
3256b     6F 72 65 20 
3256f     73 6C 6F 74 
32573     73 20 66 6F 
32577     72 20 27 66 
3257b     6F 72 27    | 	byte	"No more slots for 'for'"
3257e     00          | 	byte	0
3257f                 | LR__5689
3257f     27 4E 65 78 
32583     74 27 20 64 
32587     6F 65 73 6E 
3258b     27 74 20 6D 
3258f     61 74 63 68 
32593     20 27 66 6F 
32597     72 27       | 	byte	"'Next' doesn't match 'for'"
32599     00          | 	byte	0
3259a                 | LR__5690
3259a     27 47 6F 74 
3259e     6F 27 20 74 
325a2     61 72 67 65 
325a6     74 20 6C 69 
325aa     6E 65 20 6E 
325ae     6F 74 20 66 
325b2     6F 75 6E 64 | 	byte	"'Goto' target line not found"
325b6     00          | 	byte	0
325b7                 | LR__5691
325b7     42 61 64 20 
325bb     6E 75 6D 62 
325bf     65 72 20 6F 
325c3     66 20 70 61 
325c7     72 61 6D 65 
325cb     74 65 72 73 | 	byte	"Bad number of parameters"
325cf     00          | 	byte	0
325d0                 | LR__5692
325d0     46 75 6E 63 
325d4     74 69 6F 6E 
325d8     20 75 6E 64 
325dc     65 66 69 6E 
325e0     65 64 20 66 
325e4     6F 72 20 73 
325e8     74 72 69 6E 
325ec     67 73       | 	byte	"Function undefined for strings"
325ee     00          | 	byte	0
325ef                 | LR__5693
325ef     42 61 64 20 
325f3     70 61 72 61 
325f7     6D 65 74 65 
325fb     72          | 	byte	"Bad parameter"
325fc     00          | 	byte	0
325fd                 | LR__5694
325fd     43 61 6E 6E 
32601     6F 74 20 64 
32605     65 63 6C 61 
32609     72 65 20 61 
3260d     6E 20 61 72 
32611     72 61 79 3A 
32615     20 74 68 65 
32619     20 76 61 72 
3261d     69 61 62 6C 
32621     65 20 65 78 
32625     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
32629     00          | 	byte	0
3262a                 | LR__5695
3262a     45 78 70 65 
3262e     63 74 65 64 
32632     20 27 28 27 | 	byte	"Expected '('"
32636     00          | 	byte	0
32637                 | LR__5696
32637     45 78 70 65 
3263b     63 74 65 64 
3263f     20 27 29 27 
32643     20 6F 72 20 
32647     27 2C 27    | 	byte	"Expected ')' or ','"
3264a     00          | 	byte	0
3264b                 | LR__5697
3264b     4E 6F 20 6D 
3264f     6F 72 65 20 
32653     74 68 61 6E 
32657     20 33 20 64 
3265b     69 6D 65 6E 
3265f     73 69 6F 6E 
32663     73 20 73 75 
32667     70 70 6F 72 
3266b     74 65 64    | 	byte	"No more than 3 dimensions supported"
3266e     00          | 	byte	0
3266f                 | LR__5698
3266f     56 61 72 69 
32673     61 62 6C 65 
32677     20 6E 61 6D 
3267b     65 20 65 78 
3267f     70 65 63 74 
32683     65 64       | 	byte	"Variable name expected"
32685     00          | 	byte	0
32686                 | LR__5699
32686     54 79 70 65 
3268a     20 6E 61 6D 
3268e     65 20 65 78 
32692     70 65 63 74 
32696     65 64       | 	byte	"Type name expected"
32698     00          | 	byte	0
32699                 | LR__5700
32699     54 79 70 65 
3269d     20 6E 6F 74 
326a1     20 73 75 70 
326a5     70 6F 72 74 
326a9     65 64 20 79 
326ad     65 74       | 	byte	"Type not supported yet"
326af     00          | 	byte	0
326b0                 | LR__5701
326b0     41 72 72 61 
326b4     79 20 69 6E 
326b8     64 65 78 20 
326bc     6F 75 74 20 
326c0     6F 66 20 72 
326c4     61 6E 67 65 | 	byte	"Array index out of range"
326c8     00          | 	byte	0
326c9                 | LR__5702
326c9     42 61 64 20 
326cd     74 79 70 65 
326d1     20 77 68 69 
326d5     6C 65 20 61 
326d9     73 73 69 67 
326dd     6E 69 6E 67 
326e1     20 74 6F 20 
326e5     61 72 72 61 
326e9     79          | 	byte	"Bad type while assigning to array"
326ea     00          | 	byte	0
326eb                 | LR__5703
326eb     54 6F 6F 20 
326ef     6D 61 6E 79 
326f3     20 76 61 72 
326f7     69 61 62 6C 
326fb     65 73       | 	byte	"Too many variables"
326fd     00          | 	byte	0
326fe                 | LR__5704
326fe     27 54 68 65 
32702     6E 27 20 65 
32706     78 70 65 63 
3270a     74 65 64    | 	byte	"'Then' expected"
3270d     00          | 	byte	0
3270e                 | LR__5705
3270e     44 69 72 65 
32712     63 74 6F 72 
32716     79 20 64 6F 
3271a     65 73 6E 27 
3271e     74 20 65 78 
32722     69 73 74    | 	byte	"Directory doesn't exist"
32725     00          | 	byte	0
32726                 | LR__5706
32726     45 72 72 6F 
3272a     72 20       | 	byte	"Error "
3272c     00          | 	byte	0
3272d                 | LR__5707
3272d     20 2D 20    | 	byte	" - "
32730     00          | 	byte	0
32731                 | LR__5708
32731     20 69 6E 20 
32735     6C 69 6E 65 
32739     20          | 	byte	" in line "
3273a     00          | 	byte	0
3273b                 | LR__5709
3273b     2F 73 64    | 	byte	"/sd"
3273e     00          | 	byte	0
3273f                 | LR__5710
3273f     2F 73 64 2F 
32743     62 61 73    | 	byte	"/sd/bas"
32746     00          | 	byte	0
32747                 | LR__5711
32747     2F 73 64 2F 
3274b     62 61 73    | 	byte	"/sd/bas"
3274e     00          | 	byte	0
3274f                 | LR__5712
3274f     20 42 41 53 
32753     49 43 20 62 
32757     79 74 65 73 
3275b     20 66 72 65 
3275f     65          | 	byte	" BASIC bytes free"
32760     00          | 	byte	0
32761                 | LR__5713
32761     52 65 61 64 
32765     79          | 	byte	"Ready"
32766     00          | 	byte	0
32767                 | LR__5714
32767     6E 6F 6E 61 
3276b     6D 65 2E 62 
3276f     61 73       | 	byte	"noname.bas"
32771     00          | 	byte	0
32772                 | LR__5715
32772                 | 	byte	
32772     00          | 	byte	0
32773     00          | 	alignl
32774                 | _dat_
32774     00 00 00 00 
32778     00 00 00 00 
3277c     00 00 00 00 
32780     00 00 00 00 | 	byte	$00[16]
32784     61 41 17 0E 
32788     62 42 00 00 
3278c     63 43 19 10 
32790     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
32794     65 45 18 0F 
32798     66 46 00 00 
3279c     67 47 00 00 
327a0     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
327a4     69 49 00 00 
327a8     6A 4A 00 00 
327ac     6B 4B 00 00 
327b0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
327b4     6D 4D 00 00 
327b8     6E 4E 1A 11 
327bc     6F 4F 1E 15 
327c0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
327c4     71 51 00 00 
327c8     72 52 00 00 
327cc     73 53 1B 12 
327d0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
327d4     75 55 00 00 
327d8     76 56 00 00 
327dc     77 57 00 00 
327e0     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
327e4     79 59 00 00 
327e8     7A 5A 1D 14 
327ec     31 21 04 00 
327f0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
327f4     33 23 06 00 
327f8     34 24 07 00 
327fc     35 25 08 00 
32800     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
32804     37 26 0A 00 
32808     38 2A 0B 00 
3280c     39 28 0C 00 
32810     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
32814     8D 8D 00 00 
32818     9B 9B 00 00 
3281c     88 88 00 00 
32820     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
32824     20 20 00 00 
32828     2D 5F 00 00 
3282c     3D 2B 00 00 
32830     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
32834     5D 7D 00 00 
32838     5C 7C 00 00 
3283c     23 7E 00 00 
32840     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
32844     27 22 00 00 
32848     60 7E 03 00 
3284c     2C 3C 00 00 
32850     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
32854     2F 3F 00 00 
32858     B9 B9 00 00 
3285c     BA 00 00 00 
32860     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
32864     BC 00 00 00 
32868     BD 00 00 00 
3286c     BE 00 00 00 
32870     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
32874     C0 00 00 00 
32878     C1 00 00 00 
3287c     C2 00 00 00 
32880     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
32884     C4 00 00 00 
32888     C5 00 00 00 
3288c     C6 00 00 00 
32890     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
32894     C8 00 00 00 
32898     C9 00 00 00 
3289c     CA 00 00 00 
328a0     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
328a4     7F 7F 00 00 
328a8     CC 00 00 00 
328ac     CD 00 00 00 
328b0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
328b4     CF 00 00 00 
328b8     D0 00 00 00 
328bc     D1 00 00 00 
328c0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
328c4     2F 2F 00 00 
328c8     2A 2A 00 00 
328cc     2D 2D 00 00 
328d0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
328d4     8D 8D 00 00 
328d8     31 31 00 00 
328dc     32 32 00 00 
328e0     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
328e4     34 34 00 00 
328e8     35 35 00 00 
328ec     36 36 00 00 
328f0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
328f4     38 38 00 00 
328f8     39 39 00 00 
328fc     30 30 00 00 
32900     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
32904     5C 7C 00 00 
32908     00 00 00 00 
3290c     00 00 00 00 
32910     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
32914     00 00 00 00 
      ...             
3296c     00 00 00 00 
32970     00 00 00 00 | 	byte	$00[96]
32974     2B 00 A6 F2 
32978     24 A7 09 80 
3297c     5B 88 4D 89 
32980     80 88 A5 88 | atari_spl file "atari.spl"
32984     6D 88 B8 88 
32988     80 88 CB 88 
3298c     92 88 A5 88 
32990     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
32994     A5 88 CA 88 
32998     A6 88 DD 88 
3299c     B8 88 AB 89 
329a0     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
329a4     C8 AD C6 F1 
329a8     91 06 B6 FF 
329ac     13 00 4A 00 
329b0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
329b4     5D 00 5E 00 
329b8     5D 00 5E 00 
329bc     5E 00 5D 00 
329c0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
329c4     38 00 83 00 
329c8     25 00 83 00 
329cc     C3 FE D1 04 
329d0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
329d4     48 88 38 85 
329d8     41 8A CB 88 
329dc     28 89 B8 88 
329e0     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
329e4     15 89 03 89 
329e8     02 89 15 89 
329ec     16 89 15 89 
329f0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
329f4     15 89 3A 89 
329f8     72 89 E3 89 
329fc     52 83 AD 97 
32a00     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
32a04     0C 02 B6 FF 
32a08     E1 00 A8 00 
32a0c     F3 00 A8 00 
32a10     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
32a14     CE 00 CD 00 
32a18     CD 00 BA 00 
32a1c     E1 00 BB 00 
32a20     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
32a24     DF 00 C9 FF 
32a28     E6 01 B6 06 
32a2c     EE DD 8D 98 
32a30     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
32a34     97 89 73 89 
32a38     3B 89 60 89 
32a3c     60 89 60 89 
32a40     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
32a44     73 89 72 89 
32a48     85 89 73 89 
32a4c     AA 89 60 89 
32a50     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
32a54     E8 8A 18 86 
32a58     92 88 A5 C2 
32a5c     E0 00 C3 05 
32a60     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
32a64     F2 00 64 01 
32a68     06 01 3E 01 
32a6c     2B 01 2B 01 
32a70     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
32a74     2B 01 2A 01 
32a78     2B 01 2B 01 
32a7c     2B 01 18 01 
32a80     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
32a84     39 07 61 F3 
32a88     C0 AF 37 85 
32a8c     0F 88 8B 8A 
32a90     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
32a94     AB 89 D0 89 
32a98     AB 89 D0 89 
32a9c     D0 89 CF 89 
32aa0     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
32aa4     D0 89 F5 89 
32aa8     BD 89 08 8A 
32aac     CF 89 E8 8A 
32ab0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
32ab4     53 B3 0D F8 
32ab8     F4 07 38 00 
32abc     63 01 63 01 
32ac0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
32ac4     88 01 88 01 
32ac8     76 01 88 01 
32acc     88 01 89 01 
32ad0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
32ad4     75 01 AE 01 
32ad8     76 01 88 01 
32adc     4A 00 46 06 
32ae0     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
32ae4     08 8A 9A 86 
32ae8     33 8B 08 8A 
32aec     2D 8A F5 89 
32af0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
32af4     2D 8A 2D 8A 
32af8     2E 8A 1B 8A 
32afc     40 8A 2D 8A 
32b00     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
32b04     2E 8A 79 8A 
32b08     66 8A C8 8B 
32b0c     72 82 2B 97 
32b10     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
32b14     1D 02 05 01 
32b18     F8 01 C0 01 
32b1c     0B 02 C0 01 
32b20     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
32b24     F9 01 D3 01 
32b28     F8 01 D3 01 
32b2c     F8 01 D2 01 
32b30     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
32b34     E6 01 2B 01 
32b38     8E 02 5F 07 
32b3c     F7 E2 ED 9C 
32b40     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
32b44     E8 8A 78 8A 
32b48     78 8A 65 8A 
32b4c     8B 8A 78 8A 
32b50     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
32b54     8B 8A 9D 8A 
32b58     9D 8A 8B 8A 
32b5c     C2 8A 78 8A 
32b60     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
32b64     70 8C 18 86 
32b68     8B 8A 23 C9 
32b6c     CB 03 C4 05 
32b70     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
32b74     0B 02 7B 02 
32b78     1E 02 55 02 
32b7c     30 02 43 02 
32b80     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
32b84     43 02 44 02 
32b88     43 02 30 02 
32b8c     68 02 31 02 
32b90     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
32b94     07 08 3F F7 
32b98     73 B2 13 85 
32b9c     15 89 ED 8B 
32ba0     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
32ba4     B0 8A FB 8A 
32ba8     D5 8A FA 8A 
32bac     E8 8A FB 8A 
32bb0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
32bb4     E8 8A 21 8B 
32bb8     E7 8A 33 8B 
32bbc     E8 8A 26 8C 
32bc0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
32bc4     8D B0 27 F6 
32bc8     9C 08 AD 01 
32bcc     7B 02 8D 02 
32bd0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
32bd4     A1 02 A0 02 
32bd8     A1 02 A0 02 
32bdc     A0 02 A0 02 
32be0     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
32be4     7B 02 D8 02 
32be8     7B 02 C6 02 
32bec     3E 01 C3 05 
32bf0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
32bf4     00 8C 2A 86 
32bf8     E0 8C FA 8A 
32bfc     6A 8B FB 8A 
32c00     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
32c04     45 8B 45 8B 
32c08     45 8B 6B 8B 
32c0c     46 8B 59 8B 
32c10     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
32c14     6B 8B 6B 8B 
32c18     6B 8B 6B 8B 
32c1c     7D 8B 7D 8B 
32c20     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
32c24     90 8B 91 8B 
32c28     90 8B 90 8B 
32c2c     A3 8B A3 8B 
32c30     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
32c34     B5 8B B6 8B 
32c38     B5 8B B5 8B 
32c3c     B6 8B C8 8B 
32c40     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
32c44     C8 8B DA 8B 
32c48     DB 8B DB 8B 
32c4c     DB 8B DC 8B 
32c50     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
32c54     EE 8B EE 8B 
32c58     00 8C 01 8C 
32c5c     00 8C 01 8C 
32c60     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
32c64     12 8C 13 8C 
32c68     13 8C 26 8C 
32c6c     26 8C 26 8C 
32c70     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
32c74     38 8C 38 8C 
32c78     38 8C 38 8C 
32c7c     4B 8C 4B 8C 
32c80     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
32c84     5E 8C 5E 8C 
32c88     5E 8C 5E 8C 
32c8c     70 8C 70 8C 
32c90     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
32c94     70 8C 83 8C 
32c98     83 8C 83 8C 
32c9c     83 8C 96 8C 
32ca0     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
32ca4     95 8C A9 8C 
32ca8     A9 8C A8 8C 
32cac     A8 8C A8 8C 
32cb0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
32cb4     BB 8C BB 8C 
32cb8     BB 8C CE 8C 
32cbc     CE 8C CE 8C 
32cc0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
32cc4     E0 8C E1 8C 
32cc8     E1 8C E0 8C 
32ccc     F4 8C F2 8C 
32cd0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
32cd4     05 8D 05 8D 
32cd8     06 8D 06 8D 
32cdc     19 8D 19 8D 
32ce0     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
32ce4     18 8D 2B 8D 
32ce8     2B 8D 2B 8D 
32cec     2A 8D 3E 8D 
32cf0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
32cf4     3E 8D 51 8D 
32cf8     50 8D 50 8D 
32cfc     50 8D 51 8D 
32d00     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
32d04     63 8D 64 8D 
32d08     76 8D 75 8D 
32d0c     75 8D 76 8D 
32d10     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
32d14     88 8D 88 8D 
32d18     89 8D 9B 8D 
32d1c     9A 8D 9B 8D 
32d20     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
32d24     AD 8D AE 8D 
32d28     AD 8D AE 8D 
32d2c     C1 8D C1 8D 
32d30     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
32d34     D3 8D D3 8D 
32d38     D3 8D D3 8D 
32d3c     D3 8D E6 8D 
32d40     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
32d44     E6 8D E6 8D 
32d48     F9 8D F9 8D 
32d4c     F9 8D F8 8D 
32d50     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
32d54     0B 8E 0B 8E 
32d58     1D 8E 1D 8E 
32d5c     1E 8E 1E 8E 
32d60     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
32d64     31 8E 31 8E 
32d68     31 8E 42 8E 
32d6c     43 8E 43 8E 
32d70     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
32d74     56 8E 56 8E 
32d78     55 8E 56 8E 
32d7c     68 8E 69 8E 
32d80     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
32d84     69 8E 7B 8E 
32d88     7C 8E 7B 8E 
32d8c     7B 8E 8D 8E 
32d90     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
32d94     8D 8E A1 8E 
32d98     A0 8E A1 8E 
32d9c     A1 8E A0 8E 
32da0     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
32da4     B3 8E B3 8E 
32da8     C6 8E C5 8E 
32dac     C6 8E C6 8E 
32db0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
32db4     D8 8E D9 8E 
32db8     D8 8E EC 8E 
32dbc     EB 8E EC 8E 
32dc0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
32dc4     FE 8E FE 8E 
32dc8     FE 8E FE 8E 
32dcc     10 8F 10 8F 
32dd0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
32dd4     11 8F 23 8F 
32dd8     24 8F 23 8F 
32ddc     24 8F 37 8F 
32de0     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
32de4     36 8F 36 8F 
32de8     48 8F 49 8F 
32dec     49 8F 49 8F 
32df0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
32df4     5B 8F 5C 8F 
32df8     5B 8F 6E 8F 
32dfc     6E 8F 6E 8F 
32e00     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
32e04     81 8F 81 8F 
32e08     81 8F 81 8F 
32e0c     93 8F 93 8F 
32e10     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
32e14     93 8F A6 8F 
32e18     A6 8F A6 8F 
32e1c     A6 8F B9 8F 
32e20     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
32e24     B9 8F B9 8F 
32e28     CC 8F CB 8F 
32e2c     CB 8F CC 8F 
32e30     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
32e34     DF 8F DE 8F 
32e38     DE 8F F1 8F 
32e3c     F1 8F F1 8F 
32e40     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
32e44     03 90 04 90 
32e48     04 90 04 90 
32e4c     16 90 17 90 
32e50     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
32e54     29 90 28 90 
32e58     29 90 28 90 
32e5c     29 90 3C 90 
32e60     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
32e64     3C 90 4F 90 
32e68     4E 90 4E 90 
32e6c     4E 90 4E 90 
32e70     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
32e74     61 90 61 90 
32e78     73 90 74 90 
32e7c     74 90 74 90 
32e80     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
32e84     87 90 86 90 
32e88     87 90 86 90 
32e8c     99 90 99 90 
32e90     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
32e94     AB 90 AB 90 
32e98     AC 90 AB 90 
32e9c     AB 90 BF 90 
32ea0     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
32ea4     BE 90 D1 90 
32ea8     D0 90 D1 90 
32eac     D1 90 D1 90 
32eb0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
32eb4     E3 90 E4 90 
32eb8     F6 90 F6 90 
32ebc     F6 90 F6 90 
32ec0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
32ec4     09 91 0A 91 
32ec8     0A 91 1C 91 
32ecc     1C 91 1C 91 
32ed0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
32ed4     2F 91 2E 91 
32ed8     2F 91 2F 91 
32edc     2E 91 41 91 
32ee0     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
32ee4     41 91 53 91 
32ee8     54 91 54 91 
32eec     53 91 54 91 
32ef0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
32ef4     67 91 67 91 
32ef8     79 91 7A 91 
32efc     79 91 78 91 
32f00     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
32f04     8C 91 8B 91 
32f08     8C 91 8C 91 
32f0c     9E 91 9E 91 
32f10     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
32f14     B1 91 B1 91 
32f18     B2 91 B1 91 
32f1c     B1 91 C4 91 
32f20     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
32f24     C4 91 D6 91 
32f28     D7 91 D7 91 
32f2c     D7 91 D6 91 
32f30     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
32f34     EA 91 EA 91 
32f38     EA 91 FC 91 
32f3c     FC 91 FB 91 
32f40     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
32f44     0E 92 0F 92 
32f48     0F 92 0E 92 
32f4c     21 92 21 92 
32f50     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
32f54     21 92 34 92 
32f58     33 92 34 92 
32f5c     34 92 47 92 
32f60     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
32f64     46 92 47 92 
32f68     59 92 59 92 
32f6c     59 92 59 92 
32f70     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
32f74     6C 92 6C 92 
32f78     6B 92 7E 92 
32f7c     7E 92 7E 92 
32f80     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
32f84     92 92 91 92 
32f88     91 92 90 92 
32f8c     91 92 A4 92 
32f90     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
32f94     A3 92 B6 92 
32f98     B6 92 B7 92 
32f9c     B7 92 B6 92 
32fa0     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
32fa4     CA 92 C9 92 
32fa8     CA 92 DC 92 
32fac     DC 92 DC 92 
32fb0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
32fb4     EF 92 EF 92 
32fb8     EF 92 EF 92 
32fbc     01 93 01 93 
32fc0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
32fc4     15 93 14 93 
32fc8     14 93 14 93 
32fcc     14 93 27 93 
32fd0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
32fd4     27 93 39 93 
32fd8     3A 93 39 93 
32fdc     39 93 39 93 
32fe0     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
32fe4     4B 93 4C 93 
32fe8     5F 93 5F 93 
32fec     5F 93 5E 93 
32ff0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
32ff4     5F 93 84 93 
32ff8     4C 93 96 93 
32ffc     5F 93 AE 94 
33000     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
33004     7B C1 00 00 
33008     00 00 00 00 
3300c     00 00 00 00 
33010     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33014     00 00 00 00 | 	byte	$00, $00, $00, $00
33018     7A D7 00 80 
3301c     87 8A 48 8F 
33020     EC 8C 76 8D 
33024     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
33028     3C 8D 82 8D 
3302c     42 8D 88 8D 
33030     8C 8D 8E 8D 
33034     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
33038     97 8D DE 8D 
3303c     E1 8D F1 8E 
33040     D8 8C A3 83 
33044     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
33048     65 71 C9 65 
3304c     FC 64 C4 65 
33050     C1 65 BF 65 
33054     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
33058     B6 65 B4 65 
3305c     B2 65 AE 65 
33060     AC 65 ED 65 
33064     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
33068     5E 65 25 66 
3306c     FA 62 23 6B 
33070     B5 6C 61 0A 
33074     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
33078     5D 90 BE 8D 
3307c     47 8E C3 8D 
33080     09 8E C9 8D 
33084     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
33088     15 8E 19 8E 
3308c     1B 8E 62 8E 
33090     64 8E 68 8E 
33094     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
33098     B5 8E 4C 90 
3309c     FA 84 3C 9D 
330a0     98 13 79 6D 
330a4     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
330a8     D9 66 50 66 
330ac     D4 66 4B 66 
330b0     8C 66 46 66 
330b4     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
330b8     81 66 3A 66 
330bc     7C 66 36 66 
330c0     76 66 30 66 
330c4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
330c8     6B 66 88 72 
330cc     BF 37 E7 B7 
330d0     75 83 8B 8E 
330d4     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
330d8     94 8E 96 8E 
330dc     DD 8E 9C 8E 
330e0     E2 8E A2 8E 
330e4     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
330e8     EE 8E AE 8E 
330ec     38 8F B5 8E 
330f0     3F 8F FD 8E 
330f4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
330f8     A5 87 1E E3 
330fc     6D 5D FA 71 
33100     41 64 25 67 
33104     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
33108     D9 66 1A 67 
3310c     18 67 15 67 
33110     12 67 0F 67 
33114     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
33118     07 67 C0 66 
3311c     01 67 BC 66 
33120     B8 66 DE 64 
33124     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
33128     43 E5 1F 8B 
3312c     14 8A F1 90 
33130     1C 8F 63 8F 
33134     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
33138     29 8F 6E 8F 
3313c     72 8F 75 8F 
33140     34 8F BE 8F 
33144     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
33148     84 8F 87 8F 
3314c     CC 8F 56 90 
33150     67 91 49 80 
33154     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
33158     46 77 A6 66 
3315c     E8 66 B0 67 
33160     AD 67 ED 67 
33164     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
33168     A2 67 E3 67 
3316c     9D 67 9A 67 
33170     98 67 94 67 
33174     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
33178     49 67 CD 67 
3317c     28 65 5F 6E 
33180     82 67 3A 01 
33184     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
33188     C2 91 A9 8F 
3318c     EF 8F AE 8F 
33190     F4 8F B5 8F 
33194     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
33198     01 90 03 90 
3319c     07 90 09 90 
331a0     0C 90 53 90 
331a4     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
331a8     18 90 44 93 
331ac     85 84 D6 9D 
331b0     87 1F 2F 75 
331b4     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
331b8     C4 68 F6 67 
331bc     BE 68 F1 67 
331c0     76 68 2E 68 
331c4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
331c8     27 68 24 68 
331cc     64 68 1E 68 
331d0     5F 68 19 68 
331d4     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
331d8     DC 68 56 72 
331dc     7E 36 C2 B8 
331e0     D7 84 73 90 
331e4     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
331e8     7B 90 7F 90 
331ec     82 90 84 90 
331f0     CB 90 8B 90 
331f4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
331f8     D7 90 96 90 
331fc     20 91 59 90 
33200     25 91 A2 90 
33204     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
33208     D0 89 40 EE 
3320c     12 64 C4 71 
33210     29 66 0C 69 
33214     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
33218     C0 68 02 69 
3321c     FE 68 FB 68 
33220     F9 68 F6 68 
33224     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
33228     EE 68 A8 68 
3322c     2C 69 5F 68 
33230     E2 68 81 66 
33234     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
33238     1E EB A6 8A 
3323c     73 8B 5E 93 
33240     7B 90 48 91 
33244     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
33248     0D 91 11 91 
3324c     14 91 16 91 
33250     5C 91 1C 91 
33254     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
33258     68 91 AF 91 
3325c     2A 91 B5 91 
33260     75 91 1A 94 
33264     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
33268     70 0E CB 6C 
3326c     5D 6E C4 67 
33270     99 69 54 69 
33274     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
33278     D2 69 49 69 
3327c     89 69 86 69 
33280     40 69 C4 69 
33284     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
33288     35 69 76 69 
3328c     58 67 EB 6D 
33290     E9 6D 89 0F 
33294     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
33298     33 94 94 91 
3329c     D9 91 56 91 
332a0     E0 91 9F 91 
332a4     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
332a8     EC 91 EE 91 
332ac     F1 91 F4 91 
332b0     F7 91 3D 92 
332b4     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
332b8     46 92 21 94 
332bc     11 89 A4 9D 
332c0     FD 0E 8F 6C 
332c4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
332c8     28 6A E1 69 
332cc     65 6A 1F 6A 
332d0     5F 6A 1A 6A 
332d4     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
332d8     54 6A 0F 6A 
332dc     4F 6A 09 6A 
332e0     06 6A 03 6A 
332e4     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
332e8     23 68 69 77 
332ec     3A 4D 38 CA 
332f0     38 86 4E 91 
332f4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
332f8     64 92 24 92 
332fc     6A 92 2A 92 
33300     70 92 30 92 
33304     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
33308     7B 92 7E 92 
3330c     C5 92 84 92 
33310     CB 92 8A 92 
33314     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
33318     4D 8D F9 E2 
3331c     97 59 FE 74 
33320     DB 68 6D 6A 
33324     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
33328     A8 6A A5 6A 
3332c     A3 6A 9F 6A 
33330     9D 6A 9B 6A 
33334     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
33338     D6 6A 8F 6A 
3333c     CF 6A 46 6A 
33340     CA 6A E1 67 
33344     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
33348     D3 F7 15 92 
3334c     90 8C BF 94 
33350     A6 92 EB 92 
33354     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
33358     B1 92 F7 92 
3335c     FA 92 FD 92 
33360     00 93 02 93 
33364     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
33368     4F 93 52 93 
3336c     54 93 22 94 
33370     5A 93 8F 88 
33374     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
33378     1C 77 07 6C 
3337c     E8 69 7A 6B 
33380     34 6B 75 6B 
33384     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
33388     29 6B 26 6B 
3338c     24 6B 21 6B 
33390     1D 6B 5E 6B 
33394     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
33398     12 6B 52 6B 
3339c     34 69 34 6E 
333a0     BA 73 A4 24 
333a4     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
333a8     7A 94 B3 93 
333ac     72 93 31 93 
333b0     78 93 7A 93 
333b4     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
333b8     83 93 86 93 
333bc     89 93 D0 93 
333c0     D2 93 D5 93 
333c4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
333c8     DD 93 40 96 
333cc     30 8B 99 9C 
333d0     52 10 94 71 
333d4     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
333d8     46 6C 79 6B 
333dc     40 6C B7 6B 
333e0     F7 6B B1 6B 
333e4     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
333e8     EC 6B A5 6B 
333ec     A2 6B 9F 6B 
333f0     9D 6B 9A 6B 
333f4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
333f8     C8 6A E4 76 
333fc     20 4B F9 CE 
33400     2E 8A 1A 92 
33404     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
33408     FB 93 BA 93 
3340c     01 94 03 94 
33410     4A 94 09 94 
33414     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
33418     55 94 14 94 
3341c     9E 94 1A 94 
33420     61 94 20 94 
33424     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
33428     3E 87 E5 CD 
3342c     5F 50 6C 78 
33430     B5 6A 04 6C 
33434     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
33438     83 6C 7F 6C 
3343c     7C 6C 36 6C 
33440     76 6C 74 6C 
33444     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
33448     6B 6C 25 6C 
3344c     66 6C 1F 6C 
33450     1D 6C 41 6A 
33454     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
33458     BA FA FC 94 
3345c     5B 8D 97 96 
33460     3B 94 C5 94 
33464     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
33468     89 94 8C 94 
3346c     8F 94 92 94 
33470     94 94 DB 94 
33474     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
33478     E4 94 E7 94 
3347c     2D 95 74 95 
33480     C8 96 15 89 
33484     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
33488     CB 75 31 6F 
3348c     7E 6B 10 6D 
33490     C9 6C 0A 6D 
33494     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
33498     BD 6C FF 6C 
3349c     FB 6C F9 6C 
334a0     B2 6C F3 6C 
334a4     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
334a8     A7 6C E8 6C 
334ac     0D 6B 85 6F 
334b0     C7 74 10 28 
334b4     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
334b8     96 96 47 95 
334bc     06 95 0A 95 
334c0     0C 95 0F 95 
334c4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
334c8     17 95 5E 95 
334cc     61 95 63 95 
334d0     22 95 AC 95 
334d4     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
334d8     72 95 17 98 
334dc     59 8E 01 96 
334e0     CF FC 5A 68 
334e4     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
334e8     96 6D 50 6D 
334ec     D5 6D 4A 6D 
334f0     8C 6D 89 6D 
334f4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
334f8     80 6D 3A 6D 
334fc     7A 6D 77 6D 
33500     75 6D 71 6D 
33504     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
33508     18 6C BC 78 
3350c     9A 4F 7E CF 
33510     1F 89 F1 93 
33514     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
33518     D2 95 4E 95 
3351c     D7 95 53 95 
33520     DD 95 E0 95 
33524     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
33528     A5 95 EB 95 
3352c     EE 95 F0 95 
33530     37 96 B3 95 
33534     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
33538     1A 98 D5 8D 
3353c     C5 9F CD 0F 
33540     0F 71 F3 73 
33544     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
33548     D9 6D 5E 6E 
3354c     D3 6D 58 6E 
33550     12 6E 0F 6E 
33554     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
33558     49 6E BF 6D 
3355c     87 6E 76 6D 
33560     81 6E 11 6B 
33564     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
33568     3F 09 44 95 
3356c     E5 8D 3F 99 
33570     D4 95 A2 96 
33574     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
33578     23 96 69 96 
3357c     6B 96 6E 96 
33580     71 96 74 96 
33584     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
33588     BF 96 3C 96 
3358c     C6 96 C8 96 
33590     A3 98 51 8D 
33594     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
33598     CF 75 29 73 
3359c     90 6C EC 6E 
335a0     62 6E E7 6E 
335a4     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
335a8     9A 6E 98 6E 
335ac     95 6E 91 6E 
335b0     8E 6E CF 6E 
335b4     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
335b8     40 6E C3 6E 
335bc     E8 6C 45 6F 
335c0     A5 7B C9 35 
335c4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
335c8     2D 98 23 97 
335cc     E1 96 A0 96 
335d0     A4 96 EA 96 
335d4     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
335d8     AF 96 F4 96 
335dc     F8 96 3E 97 
335e0     FD 96 43 97 
335e4     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
335e8     08 97 6B 99 
335ec     D6 92 88 91 
335f0     D8 EE 84 66 
335f4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
335f8     2E 6F E7 6E 
335fc     6C 6F 24 6F 
33600     21 6F 1F 6F 
33604     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
33608     17 6F 13 6F 
3360c     54 6F 0E 6F 
33610     0B 6F 4B 6F 
33614     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
33618     27 6D 1C 7B 
3361c     19 59 9F DB 
33620     66 8E BC 94 
33624     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
33628     67 97 26 97 
3362c     6D 97 2B 97 
33630     72 97 32 97 
33634     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
33638     C1 97 7F 97 
3363c     C6 97 85 97 
33640     CB 97 CE 97 
33644     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
33648     EC 8A C4 C6 
3364c     68 4C F4 7D 
33650     63 6E E8 6E 
33654     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
33658     ED 6F A7 6F 
3365c     E7 6F A0 6F 
33660     E1 6F 9B 6F 
33664     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
33668     D5 6F 8F 6F 
3366c     CE 6F 45 6F 
33670     86 6F 68 6D 
33674     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
33678     C0 13 AD A2 
3367c     A7 8E 79 99 
33680     E6 97 E8 97 
33684     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
33688     F1 97 F3 97 
3368c     F6 97 F9 97 
33690     FB 97 FE 97 
33694     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
33698     4A 98 0A 98 
3369c     93 98 0F 98 
336a0     7F 9B BF 8C 
336a4     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
336a8     91 7B 62 73 
336ac     1A 6E B9 70 
336b0     EB 6F B3 70 
336b4     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
336b8     25 70 20 70 
336bc     1E 70 1B 70 
336c0     18 70 15 70 
336c4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
336c8     0D 70 09 70 
336cc     07 70 03 70 
336d0     01 70 FD 6F 
336d4     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
336d8     F6 6F F2 6F 
336dc     EF 6F EC 6F 
336e0     2C 70 E6 6F 
336e4     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
336e8     DD 6F 97 6F 
336ec     D7 6F 84 6E 
336f0     8F 6F 3F 7D 
336f4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
336f6     FF FF FF FF 
336fa     FF FF       | atarist_spl file "atarist.spl" '512
336fc     00 00 00 00 
33700     00 00 00 00 
33704     00 00       | 	byte	$00[10]
33706     17 7F F2 7F 
3370a     B2 7F 72 7F 
3370e     33 7F F4 7E 
33712     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
33716     36 7E F5 7D 
3371a     E9 51 F2 0D 
3371e     8E 00 F3 FD 
33722     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
33726     57 FD 58 FD 
3372a     5B FD 5C FD 
3372e     5C FD 60 7D 
33732     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
33736     D6 7C 98 7C 
3373a     59 7C 1A 7C 
3373e     DC 7B 9E 7B 
33742     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
33746     F3 05 00 FD 
3374a     41 FB EA FA 
3374e     D9 FA DB FA 
33752     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
33756     E4 FA 9B 36 
3375a     F8 7A C0 7A 
3375e     84 7A 45 7A 
33762     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
33766     8E 79 51 79 
3376a     15 79 D7 78 
3376e     3C 1F EB FF 
33772     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
33776     6D F8 65 F8 
3377a     68 F8 6D F8 
3377e     70 F8 74 F8 
33782     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
33786     AB 60 79 60 
3378a     4B 60 1A 60 
3378e     E9 5F B9 5F 
33792     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
33796     FB 59 B2 0B 
3379a     92 FA 3A F7 
3379e     96 F6 79 F6 
337a2     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
337a6     82 F6 86 F6 
337aa     8C F6 DB 5D 
337ae     F1 5E C1 5E 
337b2     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
337b6     34 5E 04 5E 
337ba     D6 5D A6 5D 
337be     78 5D D4 3E 
337c2     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
337c6     27 F5 BA F4 
337ca     AB F4 AD F4 
337ce     B2 F4 B8 F4 
337d2     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
337d6     26 5D 2B 5D 
337da     FC 5C CD 5C 
337de     9F 5C 70 5C 
337e2     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
337e6     E5 5B B8 5B 
337ea     DB 24 A7 FC 
337ee     D1 F4 4D F3 
337f2     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
337f6     04 F3 0B F3 
337fa     11 F3 16 F3 
337fe     DE 18 98 5B 
33802     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
33806     4E 4A 29 48 
3380a     A0 47 6A 47 
3380e     43 47 20 47 
33812     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
33816     E2 F6 98 F2 
3381a     C5 F1 A3 F1 
3381e     A3 F1 A8 F1 
33822     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
33826     BF F1 00 3D 
3382a     EF 46 CD 46 
3382e     AA 46 86 46 
33832     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
33836     1C 46 F9 45 
3383a     D7 45 EE 43 
3383e     DE 02 E8 F3 
33842     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
33846     61 F0 65 F0 
3384a     6D F0 74 F0 
3384e     7C F0 84 F0 
33852     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
33856     8E 45 6D 45 
3385a     49 45 27 45 
3385e     05 45 E1 44 
33862     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
33866     F1 2F A9 FB 
3386a     8B F1 9B EF 
3386e     40 EF 36 EF 
33872     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
33876     4D EF 56 EF 
3387a     5E EF 7B 44 
3387e     8C 44 69 44 
33882     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
33886     03 44 E1 43 
3388a     C0 43 F5 37 
3388e     69 33 0F 11 
33892     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
33896     66 EE 37 EE 
3389a     38 EE 40 EE 
3389e     48 EE 51 EE 
338a2     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
338a6     7D 32 6A 32 
338aa     51 32 37 32 
338ae     1F 32 05 32 
338b2     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
338b6     B9 31 A1 31 
338ba     F1 04 F4 F1 
338be     50 EE A0 ED 
338c2     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
338c6     93 ED 9A ED 
338ca     A4 ED AD ED 
338ce     F4 27 C1 31 
338d2     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
338d6     78 31 5F 31 
338da     46 31 2E 31 
338de     15 31 FC 30 
338e2     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
338e6     C4 EF 4A ED 
338ea     DC EC CB EC 
338ee     D2 EC DA EC 
338f2     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
338f6     F9 EC 64 2F 
338fa     0A 31 F1 30 
338fe     D9 30 C0 30 
33902     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
33906     78 30 5F 30 
3390a     46 30 38 23 
3390e     A6 F6 19 EE 
33912     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
33916     20 EC 28 EC 
3391a     32 EC 3C EC 
3391e     47 EC 51 EC 
33922     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
33926     A3 22 93 22 
3392a     7F 22 6E 22 
3392e     5D 22 4C 22 
33932     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
33936     77 09 76 F1 
3393a     CC EC F0 EB 
3393e     CD EB CE EB 
33942     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
33946     ED EB F5 EB 
3394a     3E F6 6B 22 
3394e     5F 22 4E 22 
33952     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
33956     1B 22 0B 22 
3395a     FA 21 E9 21 
3395e     D8 21 4D FF 
33962     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
33966     92 EB 7B EB 
3396a     82 EB 8C EB 
3396e     97 EB A1 EB 
33972     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
33976     15 22 04 22 
3397a     F3 21 E3 21 
3397e     D2 21 C0 21 
33982     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
33986     8E 21 7D 21 
3398a     9A F8 A4 ED 
3398e     8E EB 2F EB 
33992     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
33996     37 EB 42 EB 
3399a     4C EB 57 EB 
3399e     B2 17 22 19 
339a2     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
339a6     FD 18 EF 18 
339aa     E3 18 D6 18 
339ae     CA 18 BD 18 
339b2     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
339b6     60 EC 35 EB 
339ba     01 EB 01 EB 
339be     0C EB 16 EB 
339c2     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
339c6     34 EB D0 18 
339ca     00 19 F4 18 
339ce     E8 18 DA 18 
339d2     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
339d6     B6 18 A9 18 
339da     9D 18 91 05 
339de     F0 EF CA EB 
339e2     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
339e6     E8 EA F2 EA 
339ea     FE EA 07 EB 
339ee     12 EB C2 EF 
339f2     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
339f6     D9 18 CD 18 
339fa     C0 18 B3 18 
339fe     A7 18 9B 18 
33a02     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
33a06     B8 FC 30 EE 
33a0a     61 EB DC EA 
33a0e     CD EA D2 EA 
33a12     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
33a16     F3 EA FE EA 
33a1a     D2 09 D1 18 
33a1e     C3 18 17 18 
33a22     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
33a26     66 11 52 11 
33a2a     49 11 41 11 
33a2e     38 11 E0 F4 
33a32     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
33a36     C9 EA C5 EA 
33a3a     CF EA DB EA 
33a3e     E6 EA EF EA 
33a42     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
33a46     89 11 80 11 
33a4a     78 11 6E 11 
33a4e     67 11 5D 11 
33a52     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
33a56     43 11 32 0D 
33a5a     9C F1 07 EC 
33a5e     F8 EA CD EA 
33a62     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
33a66     E4 EA ED EA 
33a6a     F8 EA 02 EB 
33a6e     55 11 91 11 
33a72     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
33a76     75 11 6E 11 
33a7a     64 11 5E 11 
33a7e     54 11 4A 11 
33a82     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
33a86     A8 EB F1 EA 
33a8a     D9 EA DC EA 
33a8e     E8 EA F1 EA 
33a92     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
33a96     A6 EB 9E 11 
33a9a     A0 11 96 11 
33a9e     8D 11 85 11 
33aa2     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
33aa6     6A 11 CA 0D 
33aaa     36 0B 57 F8 
33aae     6C ED 57 EB 
33ab2     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
33ab6     F4 EA FF EA 
33aba     09 EB 15 EB 
33abe     1E EB 1A FD 
33ac2     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
33ac6     ED 0A E8 0A 
33aca     E2 0A DC 0A 
33ace     D6 0A D1 0A 
33ad2     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
33ad6     F8 F3 BC EC 
33ada     57 EB 1E EB 
33ade     18 EB 24 EB 
33ae2     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
33ae6     42 EB 4D EB 
33aea     08 09 20 0B 
33aee     1A 0B 14 0B 
33af2     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
33af6     04 0B FE 0A 
33afa     F9 0A F2 0A 
33afe     84 08 3A F1 
33b02     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
33b06     42 EB 42 EB 
33b0a     4E EB 57 EB 
33b0e     62 EB 6B EB 
33b12     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
33b16     48 0B 43 0B 
33b1a     3C 0B 36 0B 
33b1e     31 0B 2C 0B 
33b22     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
33b26     1B 0B 5C 00 
33b2a     6A EF 1B EC 
33b2e     81 EB 6A EB 
33b32     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
33b36     85 EB 8E EB 
33b3a     99 EB A3 EB 
33b3e     DD 05 E5 05 
33b42     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
33b46     DB 05 D8 05 
33b4a     D5 05 D1 05 
33b4e     D0 05 CB 05 
33b52     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
33b56     0C EC BB EB 
33b5a     B3 EB BB EB 
33b5e     C5 EB D0 EB 
33b62     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
33b66     E4 F7 2C 06 
33b6a     28 06 24 06 
33b6e     22 06 1F 06 
33b72     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
33b76     16 06 14 06 
33b7a     0F 06 D0 F3 
33b7e     65 ED 2D EC 
33b82     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
33b86     01 EC 0A EC 
33b8a     14 EC 1E EC 
33b8e     29 EC FB 03 
33b92     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
33b96     63 06 60 06 
33b9a     5E 06 59 06 
33b9e     58 06 54 06 
33ba2     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
33ba6     69 F1 21 ED 
33baa     55 EC 33 EC 
33bae     36 EC 40 EC 
33bb2     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
33bb6     5C EC 68 EC 
33bba     92 02 D9 02 
33bbe     D7 02 D7 02 
33bc2     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
33bc6     D1 02 D1 02 
33bca     CE 02 CD 02 
33bce     5D FC 80 EF 
33bd2     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
33bd6     83 EC 8A EC 
33bda     93 EC 9C EC 
33bde     A5 EC B1 EC 
33be2     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
33be6     2B 03 2A 03 
33bea     29 03 26 03 
33bee     25 03 24 03 
33bf2     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
33bf6     1F 03 70 F7 
33bfa     D0 EE 27 ED 
33bfe     DB EC D4 EC 
33c02     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
33c06     F0 EC FA EC 
33c0a     02 ED F9 F4 
33c0e     7B 03 7C 03 
33c12     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
33c16     75 03 73 03 
33c1a     72 03 70 03 
33c1e     6D 03 6C 03 
33c22     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
33c26     54 ED 22 ED 
33c2a     22 ED 2C ED 
33c2e     35 ED 3F ED 
33c32     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
33c36     14 01 C3 03 
33c3a     C1 03 C0 03 
33c3e     5F 01 A5 00 
33c42     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
33c46     7B 00 7C 00 
33c4a     20 00 85 F1 
33c4e     2A EE 89 ED 
33c52     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
33c56     80 ED 87 ED 
33c5a     90 ED 9A ED 
33c5e     A3 ED 73 00 
33c62     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
33c66     D0 00 D0 00 
33c6a     D0 00 D0 00 
33c6e     D0 00 CF 00 
33c72     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
33c76     80 F0 3D EE 
33c7a     D5 ED C7 ED 
33c7e     CD ED D6 ED 
33c82     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
33c86     F2 ED FA ED 
33c8a     1D 01 29 01 
33c8e     27 01 27 01 
33c92     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
33c96     25 01 26 01 
33c9a     26 01 23 01 
33c9e     D0 F7 EC EF 
33ca2     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
33ca6     1C EE 24 EE 
33caa     2D EE 37 EE 
33cae     40 EE 47 EE 
33cb2     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
33cb6     7D 01 7B 01 
33cba     7A 01 7A 01 
33cbe     79 01 78 01 
33cc2     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
33cc6     84 FE DE F3 
33cca     6C EF 93 EE 
33cce     72 EE 72 EE 
33cd2     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
33cd6     8B EE 95 EE 
33cda     9E EE 15 FC 
33cde     67 FE 67 FE 
33ce2     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
33ce6     6B FE 6B FE 
33cea     6D FE 6D FE 
33cee     6D FE 6F FE 
33cf2     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
33cf6     DF EE CC EE 
33cfa     CF EE D9 EE 
33cfe     E1 EE EA EE 
33d02     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
33d06     5A FE C4 FE 
33d0a     C3 FE C5 FE 
33d0e     C6 FE C6 FE 
33d12     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
33d16     C8 FE C7 FE 
33d1a     DA FB 85 F1 
33d1e     8D EF 31 EF 
33d22     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
33d26     34 EF 3E EF 
33d2a     46 EF 4F EF 
33d2e     57 EF 0D FF 
33d32     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
33d36     1F FF 1F FF 
33d3a     21 FF 21 FF 
33d3e     21 FF 21 FF 
33d42     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
33d46     15 F1 BE EF 
33d4a     84 EF 7E EF 
33d4e     88 EF 8F EF 
33d52     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
33d56     A9 EF 06 F2 
33d5a     A6 FC AB FC 
33d5e     AD FC AE FC 
33d62     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
33d66     B2 FC B4 FC 
33d6a     B6 FC B7 FC 
33d6e     8B F4 BD F0 
33d72     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
33d76     E4 EF EE EF 
33d7a     F6 EF FD EF 
33d7e     04 F0 0E F0 
33d82     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
33d86     0B FD 0D FD 
33d8a     0F FD 11 FD 
33d8e     11 FD 13 FD 
33d92     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
33d96     17 FD 64 F3 
33d9a     CD F0 52 F0 
33d9e     41 F0 45 F0 
33da2     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
33da6     5B F0 64 F0 
33daa     6D F0 FB FC 
33dae     65 FD 68 FD 
33db2     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
33db6     6C FD 6D FD 
33dba     6F FD 70 FD 
33dbe     72 FD B3 FB 
33dc2     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
33dc6     A4 F0 99 F0 
33dca     A0 F0 A8 F0 
33dce     AE F0 B9 F0 
33dd2     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
33dd6     CB FB DD FB 
33dda     DE FB E0 FB 
33dde     E3 FB E3 FB 
33de2     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
33de6     E9 FB EC FB 
33dea     62 F7 27 F2 
33dee     2A F1 FF F0 
33df2     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
33df6     0C F1 13 F1 
33dfa     1B F1 23 F1 
33dfe     33 F2 3C FC 
33e02     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
33e06     42 FC 45 FC 
33e0a     47 FC 48 FC 
33e0e     4A FC 4C FC 
33e12     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
33e16     20 F2 77 F1 
33e1a     5C F1 5F F1 
33e1e     64 F1 6C F1 
33e22     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
33e26     83 F1 DC F8 
33e2a     9A FC 9A FC 
33e2e     9B FC 9E FC 
33e32     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
33e36     A3 FC A4 FC 
33e3a     A6 FC A9 FC 
33e3e     90 F4 33 F2 
33e42     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
33e46     BA F1 BF F1 
33e4a     C7 F1 CE F1 
33e4e     D6 F1 DC F1 
33e52     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
33e56     F3 FC F5 FC 
33e5a     FE FB 79 FB 
33e5e     62 FB 5F FB 
33e62     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
33e66     6F FA AF F3 
33e6a     53 F2 12 F2 
33e6e     0F F2 15 F2 
33e72     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
33e76     2A F2 32 F2 
33e7a     38 F2 9A FB 
33e7e     AF FB B1 FB 
33e82     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
33e86     B7 FB B8 FB 
33e8a     BA FB BC FB 
33e8e     C1 FB 3B F8 
33e92     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
33e96     6E F2 6C F2 
33e9a     74 F2 7A F2 
33e9e     81 F2 87 F2 
33ea2     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
33ea6     06 FC 09 FC 
33eaa     0C FC 0E FC 
33eae     0F FC 12 FC 
33eb2     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
33eb6     17 FC 1A FC 
33eba     B2 F6 7B F3 
33ebe     DD F2 C5 F2 
33ec2     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
33ec6     D4 F2 DB F2 
33eca     E0 F2 E8 F2 
33ece     28 F8 60 FC 
33ed2     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
33ed6     64 FC 66 FC 
33eda     68 FC 6A FC 
33ede     6D FC 52 FC 
33ee2     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
33ee6     78 F3 24 F3 
33eea     1A F3 1E F3 
33eee     24 F3 2A F3 
33ef2     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
33ef6     3D F3 80 FA 
33efa     0C FB 0F FB 
33efe     10 FB 14 FB 
33f02     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
33f06     1B FB 1D FB 
33f0a     1F FB 92 FA 
33f0e     DE F4 AE F3 
33f12     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
33f16     79 F3 7E F3 
33f1a     84 F3 8C F3 
33f1e     92 F3 97 F3 
33f22     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
33f26     67 FB 69 FB 
33f2a     6B FB 6F FB 
33f2e     71 FB 72 FB 
33f32     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
33f36     E3 F8 BA F4 
33f3a     EE F3 CC F3 
33f3e     CA F3 CF F3 
33f42     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
33f46     E2 F3 E8 F3 
33f4a     ED F3 B7 FB 
33f4e     BC FB BE FB 
33f52     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
33f56     C4 FB C6 FB 
33f5a     C8 FB C9 FB 
33f5e     CC FB 8F F7 
33f62     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
33f66     1E F4 1E F4 
33f6a     24 F4 2A F4 
33f6e     30 F4 38 F4 
33f72     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
33f76     AD FA B1 FA 
33f7a     B4 FA B6 FA 
33f7e     BA FA BB FA 
33f82     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
33f86     C2 FA C6 FA 
33f8a     55 F6 C6 F4 
33f8e     7D F4 72 F4 
33f92     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
33f96     83 F4 89 F4 
33f9a     8F F4 94 F4 
33f9e     66 FA 03 FB 
33fa2     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
33fa6     0A FB 0E FB 
33faa     10 FB 11 FB 
33fae     16 FB 18 FB 
33fb2     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
33fb6     F9 F4 CA F4 
33fba     C5 F4 CB F4 
33fbe     D1 F4 D7 F4 
33fc2     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
33fc6     E8 F4 3F FB 
33fca     56 FB 58 FB 
33fce     5A FB 5E FB 
33fd2     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
33fd6     64 FB 64 FB 
33fda     69 FB 99 F9 
33fde     E9 F5 33 F5 
33fe2     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
33fe6     1D F5 22 F5 
33fea     27 F5 2E F5 
33fee     32 F5 37 F5 
33ff2     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
33ff6     BC FA BC FA 
33ffa     C1 FA C2 FA 
33ffe     C4 FA C8 FA 
34002     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
34006     F9 F7 DB F5 
3400a     78 F5 69 F5 
3400e     6A F5 70 F5 
34012     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
34016     7F F5 85 F5 
3401a     6E F7 06 FB 
3401e     0A FB 0B FB 
34022     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
34026     14 FB 15 FB 
3402a     18 FB 1B FB 
3402e     1D FB 70 F7 
34032     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
34036     B6 F5 BB F5 
3403a     C0 F5 C6 F5 
3403e     CA F5 CF F5 
34042     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
34046     54 FB 56 FB 
3404a     5A FB 5B FB 
3404e     5E FB 5F FB 
34052     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
34056     67 FB 52 FB 
3405a     29 F7 33 F6 
3405e     06 F6 02 F6 
34062     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
34066     10 F6 16 F6 
3406a     1A F6 1F F6 
3406e     81 FB 9F FB 
34072     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
34076     51 FB F2 FA 
3407a     E3 FA E3 FA 
3407e     E5 FA E9 FA 
34082     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
34086     64 F6 4D F6 
3408a     4D F6 53 F6 
3408e     57 F6 5C F6 
34092     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
34096     6A F6 19 FB 
3409a     1E FB 22 FB 
3409e     23 FB 24 FB 
340a2     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
340a6     2C FB 2E FB 
340aa     32 FB F0 F8 
340ae     01 F7 A5 F6 
340b2     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
340b6     9F F6 A3 F6 
340ba     A6 F6 AC F6 
340be     B0 F6 EB F7 
340c2     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
340c6     68 FB 6C FB 
340ca     6E FB 71 FB 
340ce     72 FB 74 FB 
340d2     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
340d6     71 F8 21 F7 
340da     E5 F6 DD F6 
340de     E1 F6 E6 F6 
340e2     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
340e6     F5 F6 F7 F6 
340ea     F7 FA AB FB 
340ee     AD FB AF FB 
340f2     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
340f6     B6 FB B9 FB 
340fa     BB FB BC FB 
340fe     21 FB 07 F8 
34102     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
34106     22 F7 26 F7 
3410a     2B F7 2E F7 
3410e     34 F7 38 F7 
34112     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
34116     13 FB 16 FB 
3411a     17 FB 1B FB 
3411e     1E FB 20 FB 
34122     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
34126     26 FB 77 FA 
3412a     F3 F7 7C F7 
3412e     67 F7 6A F7 
34132     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
34136     74 F7 7A F7 
3413a     7E F7 82 F7 
3413e     53 FB 5A FB 
34142     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
34146     5F FB 63 FB 
3414a     65 FB 67 FB 
3414e     69 FB 6A FB 
34152     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
34156     B5 F7 A9 F7 
3415a     AD F7 B0 F7 
3415e     B5 F7 B8 F7 
34162     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
34166     6E F8 99 FB 
3416a     9C FB 9D FB 
3416e     9F FB A4 FB 
34172     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
34176     A9 FB AB FB 
3417a     AD FB 46 F9 
3417e     26 F8 F0 F7 
34182     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
34186     F4 F7 F8 F7 
3418a     FB F7 FF F7 
3418e     03 F8 65 FA 
34192     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
34196     2B FB 2F FB 
3419a     30 FB 32 FB 
3419e     34 FB 38 FB 
341a2     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
341a6     E9 F8 4A F8 
341aa     2E F8 2C F8 
341ae     2F F8 36 F8 
341b2     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
341b6     41 F8 44 F8 
341ba     4A FB 67 FB 
341be     68 FB 6B FB 
341c2     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
341c6     73 FB 74 FB 
341ca     78 FB 7A FB 
341ce     14 FB E7 F8 
341d2     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
341d6     6D F8 70 F8 
341da     73 F8 78 F8 
341de     7C F8 80 F8 
341e2     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
341e6     A6 FB A7 FB 
341ea     A9 FB AC FB 
341ee     AF FB B1 FB 
341f2     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
341f6     B7 FB 73 FA 
341fa     F8 F8 B4 F8 
341fe     A9 F8 AB F8 
34202     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
34206     B4 F8 B8 F8 
3420a     BB F8 FA F8 
3420e     64 FB 65 FB 
34212     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
34216     6D FB 6F FB 
3421a     70 FB 74 FB 
3421e     77 FB 77 FB 
34222     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
34226     E9 F8 E4 F8 
3422a     E8 F8 EB F8 
3422e     EE F8 F2 F8 
34232     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
34236     B5 FA 9F FB 
3423a     A1 FB A4 FB 
3423e     A5 FB A9 FB 
34242     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
34246     AE FB B1 FB 
3424a     B2 FB C7 F9 
3424e     39 F9 22 F9 
34252     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
34256     26 F9 2A F9 
3425a     2E F9 32 F9 
3425e     33 F9 BA FB 
34262     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
34266     DE FB E1 FB 
3426a     E2 FB E4 FB 
3426e     E5 FB E7 FB 
34272     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
34276     C5 F9 67 F9 
3427a     57 F9 56 F9 
3427e     5B F9 5F F9 
34282     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
34286     68 F9 6C F9 
3428a     0B FC 11 FC 
3428e     14 FC 15 FC 
34292     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
34296     B5 FB B5 FB 
3429a     B6 FB B8 FB 
3429e     E9 FA C8 F9 
342a2     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
342a6     90 F9 94 F9 
342aa     95 F9 99 F9 
342ae     9D F9 9F F9 
342b2     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
342b6     DE FB DF FB 
342ba     E2 FB E4 FB 
342be     E6 FB E8 FB 
342c2     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
342c6     EF FB AC FA 
342ca     E9 F9 C7 F9 
342ce     C3 F9 C8 F9 
342d2     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
342d6     D0 F9 D4 F9 
342da     D6 F9 0E FB 
342de     11 FC 13 FC 
342e2     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
342e6     19 FC 1B FC 
342ea     1D FC 1E FC 
342ee     21 FC 22 FC 
342f2     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
342f6     F7 F9 F7 F9 
342fa     FB F9 FE F9 
342fe     00 FA 03 FA 
34302     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
34306     1B FC 45 FC 
3430a     46 FC 48 FC 
3430e     4A FC 4B FC 
34312     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
34316     52 FC 54 FC 
3431a     F3 FB 82 FA 
3431e     35 FA 28 FA 
34322     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
34326     31 FA 32 FA 
3432a     37 FA 37 FA 
3432e     3C FA 00 FC 
34332     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
34336     09 FC 0B FC 
3433a     0F FC 12 FC 
3433e     12 FC 15 FC 
34342     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
34346     8D FA 60 FA 
3434a     5B FA 5C FA 
3434e     60 FA 61 FA 
34352     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
34356     6C FA 6D FA 
3435a     37 FC 3A FC 
3435e     3B FC 3D FC 
34362     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
34366     43 FC 44 FC 
3436a     45 FC 47 FC 
3436e     51 FB AB FA 
34372     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
34376     8E FA 91 FA 
3437a     93 FA 95 FA 
3437e     98 FA 9B FA 
34382     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
34386     68 FC 6A FC 
3438a     6C FC 6E FC 
3438e     70 FC 72 FC 
34392     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
34396     76 FC 3B FB 
3439a     D0 FA BB FA 
3439e     B9 FA BD FA 
343a2     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
343a6     C4 FA C6 FA 
343aa     CA FA 13 FC 
343ae     3A FC 3A FC 
343b2     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
343b6     41 FC 43 FC 
343ba     44 FC 47 FC 
343be     48 FC 3C FC 
343c2     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
343c6     E6 FA E8 FA 
343ca     EB FA EE FA 
343ce     F0 FA F2 FA 
343d2     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
343d6     61 FC 66 FC 
343da     68 FC 6B FC 
343de     6C FC 6E FC 
343e2     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
343e6     73 FC 75 FC 
343ea     13 FC 3F FB 
343ee     17 FB 12 FB 
343f2     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
343f6     1A FB 1D FB 
343fa     1F FB 20 FB 
343fe     23 FB 92 FC 
34402     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
34406     96 FC 97 FC 
3440a     9A FC 9C FC 
3440e     9E FC 9F FC 
34412     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
34416     5A FB 41 FB 
3441a     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
3441e     73 32 00 04 
34422     00 00 10 00 
34426     00 00 00 00 
3442a     00 00 00 00 | atari2 file "atari2.s2"
3442e     43 87 43 87 
34432     43 87 44 87 
34436     43 87 44 87 
3443a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3443e     43 87 43 87 
34442     43 87 44 87 
34446     43 87 43 87 
3444a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3444e     44 87 43 87 
34452     44 87 43 87 
34456     43 87 43 87 
3445a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3445e     43 87 43 87 
34462     44 87 43 87 
34466     44 87 44 87 
3446a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
3446e     43 87 43 87 
34472     44 87 43 87 
34476     43 87 42 87 
3447a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3447e     43 87 43 87 
34482     43 87 43 87 
34486     44 87 43 87 
3448a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3448e     44 87 44 87 
34492     43 87 44 87 
34496     43 87 44 87 
3449a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3449e     44 87 43 87 
344a2     44 87 44 87 
344a6     43 87 43 87 
344aa     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
344ae     43 87 44 87 
344b2     44 87 43 87 
344b6     43 87 44 87 
344ba     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
344be     43 87 43 87 
344c2     43 87 43 87 
344c6     43 87 43 87 
344ca     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
344ce     42 87 43 87 
344d2     44 87 42 87 
344d6     43 87 43 87 
344da     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
344de     43 87 44 87 
344e2     44 87 43 87 
344e6     43 87 43 87 
344ea     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
344ee     43 87 5C 87 
344f2     EE 86 AC 87 
344f6     4C 7C A3 78 
344fa     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
344fe     BC 78 BB 78 
34502     BD 78 BC 78 
34506     BB 78 BD 78 
3450a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3450e     BB 78 BB 78 
34512     BC 78 BC 78 
34516     BC 78 BB 78 
3451a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3451e     BC 78 BC 78 
34522     BC 78 BC 78 
34526     BC 78 BC 78 
3452a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3452e     BB 78 BC 78 
34532     A0 78 4C 7C 
34536     11 7A 29 89 
3453a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3453e     44 87 43 87 
34542     44 87 43 87 
34546     43 87 42 87 
3454a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3454e     43 87 43 87 
34552     44 87 ED 85 
34556     71 85 52 79 
3455a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3455e     BC 78 BC 78 
34562     BC 78 BC 78 
34566     BC 78 BC 78 
3456a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3456e     BC 78 BC 78 
34572     BC 78 A0 78 
34576     CF 7A B9 81 
3457a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3457e     44 87 43 87 
34582     43 87 44 87 
34586     43 87 44 87 
3458a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3458e     43 87 43 87 
34592     43 87 43 87 
34596     44 87 43 87 
3459a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3459e     43 87 43 87 
345a2     44 87 43 87 
345a6     44 87 43 87 
345aa     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
345ae     44 87 43 87 
345b2     43 87 43 87 
345b6     5A 87 39 81 
345ba     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
345be     A5 78 BC 78 
345c2     BB 78 BC 78 
345c6     BB 78 BC 78 
345ca     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
345ce     BC 78 BC 78 
345d2     BC 78 BC 78 
345d6     BC 78 8F 79 
345da     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
345de     09 85 47 87 
345e2     43 87 43 87 
345e6     42 87 42 87 
345ea     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
345ee     43 87 43 87 
345f2     43 87 43 87 
345f6     43 87 44 87 
345fa     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
345fe     43 87 43 87 
34602     44 87 43 87 
34606     42 87 43 87 
3460a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3460e     44 87 43 87 
34612     43 87 43 87 
34616     44 87 44 87 
3461a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3461e     94 78 55 7A 
34622     B9 78 BC 78 
34626     BC 78 BC 78 
3462a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3462e     BC 78 BB 78 
34632     BC 78 BC 78 
34636     BC 78 BC 78 
3463a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3463e     BB 78 BC 78 
34642     BC 78 BC 78 
34646     BB 78 BC 78 
3464a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3464e     BC 78 BC 78 
34652     BD 78 BC 78 
34656     BC 78 BB 78 
3465a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3465e     94 78 B3 84 
34662     36 84 4A 87 
34666     43 87 43 87 
3466a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3466e     43 87 44 87 
34672     43 87 43 87 
34676     43 87 43 87 
3467a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3467e     43 87 44 87 
34682     43 87 44 87 
34686     43 87 43 87 
3468a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3468e     43 87 43 87 
34692     43 87 45 87 
34696     43 87 43 87 
3469a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3469e     43 87 44 87 
346a2     44 87 44 87 
346a6     43 87 43 87 
346aa     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
346ae     43 87 42 87 
346b2     43 87 43 87 
346b6     44 87 43 87 
346ba     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
346be     54 87 3C 82 
346c2     36 83 52 79 
346c6     C6 78 BC 78 
346ca     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
346ce     BB 78 BB 78 
346d2     BC 78 BC 78 
346d6     BC 78 BC 78 
346da     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
346de     BD 78 ED 78 
346e2     1B 79 F4 83 
346e6     4D 83 4E 87 
346ea     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
346ee     44 87 43 87 
346f2     42 87 44 87 
346f6     43 87 42 87 
346fa     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
346fe     43 87 54 87 
34702     26 82 B3 84 
34706     D6 77 BB 78 
3470a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3470e     BC 78 BB 78 
34712     BB 78 BB 78 
34716     BB 78 BB 78 
3471a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3471e     BC 78 BC 78 
34722     26 79 18 75 
34726     36 83 1F 84 
3472a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3472e     43 87 43 87 
34732     43 87 43 87 
34736     43 87 44 87 
3473a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3473e     43 87 44 87 
34742     44 87 43 87 
34746     43 87 43 87 
3474a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3474e     43 87 43 87 
34752     43 87 43 87 
34756     44 87 44 87 
3475a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3475e     44 87 43 87 
34762     43 87 43 87 
34766     43 87 44 87 
3476a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3476e     44 87 44 87 
34772     44 87 43 87 
34776     44 87 43 87 
3477a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3477e     43 87 43 87 
34782     43 87 44 87 
34786     44 87 43 87 
3478a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3478e     43 87 43 87 
34792     43 87 43 87 
34796     43 87 44 87 
3479a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3479e     43 87 44 87 
347a2     43 87 44 87 
347a6     19 87 7D 86 
347aa     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
347ae     B1 78 BC 78 
347b2     BC 78 BC 78 
347b6     BC 78 BC 78 
347ba     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
347be     BC 78 BC 78 
347c2     BD 78 BC 78 
347c6     B7 78 3B 7B 
347ca     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
347ce     96 86 44 87 
347d2     43 87 43 87 
347d6     43 87 43 87 
347da     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
347de     44 87 44 87 
347e2     43 87 44 87 
347e6     43 87 44 87 
347ea     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
347ee     43 87 44 87 
347f2     43 87 44 87 
347f6     43 87 44 87 
347fa     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
347fe     43 87 44 87 
34802     43 87 43 87 
34806     44 87 43 87 
3480a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3480e     44 87 44 87 
34812     43 87 43 87 
34816     43 87 44 87 
3481a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3481e     43 87 43 87 
34822     43 87 43 87 
34826     44 87 44 87 
3482a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3482e     36 83 CF 7A 
34832     AB 78 BB 78 
34836     BC 78 BC 78 
3483a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3483e     BB 78 BC 78 
34842     BC 78 BC 78 
34846     BC 78 BC 78 
3484a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3484e     BC 78 BC 78 
34852     BC 78 BB 78 
34856     BC 78 BC 78 
3485a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3485e     BB 78 BC 78 
34862     BB 78 BC 78 
34866     BC 78 BD 78 
3486a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3486e     BC 78 BC 78 
34872     BC 78 BC 78 
34876     BC 78 BD 78 
3487a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3487e     BC 78 BB 78 
34882     BC 78 BB 78 
34886     BB 78 BC 78 
3488a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3488e     BC 78 BC 78 
34892     BC 78 BC 78 
34896     BC 78 BB 78 
3489a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3489e     BC 78 BC 78 
348a2     BC 78 BD 78 
348a6     BB 78 BC 78 
348aa     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
348ae     BC 78 BC 78 
348b2     BC 78 BB 78 
348b6     BC 78 BB 78 
348ba     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
348be     BB 78 BC 78 
348c2     BC 78 BC 78 
348c6     BC 78 BB 78 
348ca     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
348ce     BC 78 BC 78 
348d2     BC 78 BB 78 
348d6     BC 78 BB 78 
348da     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
348de     BC 78 BC 78 
348e2     BC 78 BC 78 
348e6     BB 78 BC 78 
348ea     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
348ee     BC 78 9F 78 
348f2     52 79 B3 84 
348f6     2F 86 60 87 
348fa     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
348fe     44 87 43 87 
34902     43 87 43 87 
34906     43 87 43 87 
3490a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3490e     43 87 43 87 
34912     43 87 44 87 
34916     43 87 43 87 
3491a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3491e     43 87 43 87 
34922     43 87 43 87 
34926     43 87 44 87 
3492a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3492e     44 87 44 87 
34932     5E 87 BC 80 
34936     FB 80 94 78 
3493a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3493e     BD 78 BC 78 
34942     BB 78 BC 78 
34946     BB 78 BB 78 
3494a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3494e     BC 78 BB 78 
34952     BB 78 6B 79 
34956     D6 77 AC 87 
3495a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3495e     43 87 44 87 
34962     43 87 43 87 
34966     44 87 43 87 
3496a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3496e     43 87 44 87 
34972     43 87 5C 87 
34976     E7 80 00 80 
3497a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3497e     BC 78 BD 78 
34982     BC 78 BC 78 
34986     BC 78 BB 78 
3498a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3498e     BC 78 BC 78 
34992     BB 78 BC 78 
34996     BB 78 BC 78 
3499a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3499e     BB 78 BC 78 
349a2     BC 78 BC 78 
349a6     BC 78 BC 78 
349aa     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
349ae     BC 78 BC 78 
349b2     BC 78 BC 78 
349b6     A0 78 8D 7B 
349ba     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
349be     60 87 43 87 
349c2     44 87 44 87 
349c6     43 87 43 87 
349ca     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
349ce     44 87 43 87 
349d2     43 87 43 87 
349d6     44 87 73 86 
349da     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
349de     51 7B B6 78 
349e2     BC 78 BD 78 
349e6     BC 78 BC 78 
349ea     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
349ee     BB 78 BC 78 
349f2     BD 78 BB 78 
349f6     BC 78 BB 78 
349fa     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
349fe     BC 78 BC 78 
34a02     BC 78 BC 78 
34a06     BB 78 BC 78 
34a0a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34a0e     BC 78 BB 78 
34a12     BB 78 BC 78 
34a16     BC 78 BB 78 
34a1a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
34a1e     22 8C AF 84 
34a22     48 87 43 87 
34a26     44 87 43 87 
34a2a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
34a2e     43 87 42 87 
34a32     43 87 43 87 
34a36     44 87 43 87 
34a3a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34a3e     43 87 43 87 
34a42     44 87 44 87 
34a46     43 87 43 87 
34a4a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34a4e     43 87 43 87 
34a52     43 87 43 87 
34a56     44 87 43 87 
34a5a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
34a5e     9F 8B D6 77 
34a62     16 7C B3 78 
34a66     BC 78 BB 78 
34a6a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
34a6e     BB 78 BC 78 
34a72     BB 78 BC 78 
34a76     BC 78 BC 78 
34a7a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34a7e     BC 78 BB 78 
34a82     BB 78 BC 78 
34a86     BB 78 BC 78 
34a8a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
34a8e     BB 78 BB 78 
34a92     BC 78 BC 78 
34a96     BC 78 BB 78 
34a9a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
34a9e     BC 78 BC 78 
34aa2     BC 78 BD 78 
34aa6     BB 78 BC 78 
34aaa     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
34aae     BC 78 BC 78 
34ab2     BC 78 BB 78 
34ab6     BC 78 BC 78 
34aba     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34abe     A8 78 54 7E 
34ac2     F4 83 17 82 
34ac6     50 87 43 87 
34aca     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
34ace     44 87 43 87 
34ad2     44 87 43 87 
34ad6     43 87 44 87 
34ada     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34ade     43 87 28 87 
34ae2     20 85 CF 7A 
34ae6     70 7D AD 78 
34aea     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
34aee     BB 78 BC 78 
34af2     BC 78 BC 78 
34af6     BB 78 BB 78 
34afa     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
34afe     BB 78 B2 78 
34b02     9A 7C CF 7A 
34b06     4A 87 0D 87 
34b0a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
34b0e     43 87 44 87 
34b12     43 87 44 87 
34b16     43 87 43 87 
34b1a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
34b1e     44 87 43 87 
34b22     28 87 51 85 
34b26     11 7A 1E 7D 
34b2a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
34b2e     BC 78 BB 78 
34b32     BC 78 BC 78 
34b36     BC 78 BC 78 
34b3a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34b3e     BB 78 BC 78 
34b42     BB 78 BC 78 
34b46     BC 78 BC 78 
34b4a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34b4e     BB 78 BC 78 
34b52     BC 78 BC 78 
34b56     BD 78 BB 78 
34b5a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
34b5e     BC 78 BB 78 
34b62     BC 78 BC 78 
34b66     BC 78 BB 78 
34b6a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34b6e     BC 78 BC 78 
34b72     BC 78 BC 78 
34b76     BB 78 BC 78 
34b7a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34b7e     BC 78 BD 78 
34b82     BC 78 BC 78 
34b86     BC 78 BB 78 
34b8a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34b8e     BC 78 BB 78 
34b92     BB 78 BC 78 
34b96     BC 78 BB 78 
34b9a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34b9e     BB 78 BB 78 
34ba2     BB 78 BC 78 
34ba6     B6 78 48 7D 
34baa     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
34bae     56 87 43 87 
34bb2     42 87 44 87 
34bb6     44 87 43 87 
34bba     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
34bbe     43 87 44 87 
34bc2     43 87 44 87 
34bc6     4C 87 7E 83 
34bca     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
34bce     F7 78 BC 78 
34bd2     BC 78 BB 78 
34bd6     BB 78 BC 78 
34bda     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34bde     BC 78 BB 78 
34be2     BC 78 BC 78 
34be6     BB 78 BC 78 
34bea     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
34bee     BB 78 BC 78 
34bf2     BC 78 BC 78 
34bf6     BC 78 BB 78 
34bfa     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34bfe     BC 78 BC 78 
34c02     BC 78 BC 78 
34c06     BC 78 BB 78 
34c0a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34c0e     BC 78 BB 78 
34c12     BB 78 BC 78 
34c16     BC 78 BB 78 
34c1a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34c1e     BC 78 BC 78 
34c22     BB 78 BC 78 
34c26     BC 78 BC 78 
34c2a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
34c2e     73 32 00 04 
34c32     00 00 10 00 
34c36     00 00 00 00 
34c3a     00 00 00 00 | atari12 file "atari12.s2"
34c3e     00 6D 00 6D 
34c42     00 6D 00 6D 
34c46     00 6D 00 6D 
34c4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c4e     00 6D 00 6D 
34c52     00 6D 00 6D 
34c56     00 6D 00 6D 
34c5a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c5e     00 6D 00 6D 
34c62     00 6D 00 6D 
34c66     00 6D 00 6D 
34c6a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c6e     00 6D 00 6D 
34c72     00 6D 00 6D 
34c76     00 6D 00 6D 
34c7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34c7e     00 6D 00 6D 
34c82     00 6D 00 6D 
34c86     00 6D 00 6D 
34c8a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
34c8e     00 6C 00 6C 
34c92     00 6C 00 6C 
34c96     00 6C 00 6C 
34c9a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34c9e     00 6C 00 6C 
34ca2     00 6C 00 6C 
34ca6     00 6C 00 6C 
34caa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34cae     00 6C 00 6C 
34cb2     00 6C 00 6C 
34cb6     00 6C 00 6C 
34cba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34cbe     00 6C 00 6C 
34cc2     00 6C 00 6C 
34cc6     00 6C 00 6C 
34cca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34cce     00 6C 00 6C 
34cd2     00 6C 00 6C 
34cd6     00 6C 00 6C 
34cda     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34cde     00 6C 00 6C 
34ce2     00 6C 00 6C 
34ce6     00 6C 00 6C 
34cea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34cee     00 6C 00 6C 
34cf2     00 6C 00 6C 
34cf6     00 6C 00 6C 
34cfa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34cfe     00 6C 00 6C 
34d02     00 6C 00 6C 
34d06     00 6C 00 6C 
34d0a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34d0e     00 6C 00 6C 
34d12     00 6C 00 6C 
34d16     00 6C 00 6C 
34d1a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34d1e     00 6C 00 6C 
34d22     00 6C 00 6C 
34d26     00 6C 00 6C 
34d2a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34d2e     00 6C 00 6C 
34d32     00 6C 00 6C 
34d36     00 6C 00 6C 
34d3a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34d3e     00 6C 00 6B 
34d42     00 6B 00 6B 
34d46     00 6B 00 6B 
34d4a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34d4e     00 6B 00 6B 
34d52     00 6B 00 6B 
34d56     00 6B 00 6B 
34d5a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34d5e     00 6B 00 6B 
34d62     00 6B 00 6B 
34d66     00 6B 00 6B 
34d6a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34d6e     00 6B 00 6B 
34d72     00 6B 00 6B 
34d76     00 6B 00 6B 
34d7a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34d7e     00 6B 00 6B 
34d82     00 6B 00 6B 
34d86     00 6B 00 6B 
34d8a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34d8e     00 6B 00 6B 
34d92     00 6B 00 6B 
34d96     00 6B 00 6B 
34d9a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34d9e     00 6B 00 6B 
34da2     00 6B 00 6B 
34da6     00 6B 00 6B 
34daa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34dae     00 6B 00 6B 
34db2     00 6B 00 6B 
34db6     00 6B 00 6B 
34dba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34dbe     00 6B 00 6B 
34dc2     00 6B 00 6B 
34dc6     00 6B 00 6B 
34dca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34dce     00 6B 00 6B 
34dd2     00 6B 00 6B 
34dd6     00 6A 00 9D 
34dda     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
34dde     00 9E 00 9E 
34de2     00 9E 00 9E 
34de6     00 9E 00 9E 
34dea     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34dee     00 9E 00 9E 
34df2     00 9E 00 9E 
34df6     00 9E 00 9E 
34dfa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34dfe     00 9E 00 9E 
34e02     00 9E 00 9E 
34e06     00 9E 00 9E 
34e0a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34e0e     00 9E 00 9E 
34e12     00 9E 00 9E 
34e16     00 9E 00 9E 
34e1a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34e1e     00 9E 00 9E 
34e22     00 9E 00 9E 
34e26     00 9E 00 9E 
34e2a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34e2e     00 9E 00 9E 
34e32     00 9E 00 9E 
34e36     00 9E 00 9E 
34e3a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34e3e     00 9E 00 9E 
34e42     00 9E 00 9E 
34e46     00 9E 00 9E 
34e4a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34e4e     00 9E 00 9E 
34e52     00 9E 00 9E 
34e56     00 9E 00 9E 
34e5a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34e5e     00 9E 00 9E 
34e62     00 9E 00 9E 
34e66     00 9E 00 9E 
34e6a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
34e6e     00 9F 00 9F 
34e72     00 9F 00 9F 
34e76     00 9F 00 9F 
34e7a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34e7e     00 9F 00 9F 
34e82     00 9F 00 9F 
34e86     00 9F 00 9F 
34e8a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34e8e     00 9F 00 9F 
34e92     00 9F 00 9F 
34e96     00 9F 00 9F 
34e9a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34e9e     00 9F 00 9F 
34ea2     00 9F 00 9F 
34ea6     00 9F 00 9F 
34eaa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34eae     00 9F 00 9F 
34eb2     00 9F 00 9F 
34eb6     00 9F 00 9F 
34eba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34ebe     00 9F 00 9F 
34ec2     00 9F 00 9F 
34ec6     00 9F 00 9F 
34eca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34ece     00 9F 00 9F 
34ed2     00 9F 00 9F 
34ed6     00 9F 00 9F 
34eda     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34ede     00 9F 00 9F 
34ee2     00 9F 00 9F 
34ee6     00 9F 00 9F 
34eea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34eee     00 9F 00 9F 
34ef2     00 9F 00 9F 
34ef6     00 9F 00 9F 
34efa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34efe     00 9F 00 9F 
34f02     00 9F 00 9F 
34f06     00 9F 00 9F 
34f0a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34f0e     00 9F 00 9F 
34f12     00 9F 00 9F 
34f16     00 9F 00 9F 
34f1a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34f1e     00 9F 00 9F 
34f22     00 9F 00 9F 
34f26     00 9F 00 9F 
34f2a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34f2e     00 9F 00 9F 
34f32     00 9F 00 A0 
34f36     00 A0 00 A0 
34f3a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34f3e     00 A0 00 A0 
34f42     00 A0 00 A0 
34f46     00 A0 00 A0 
34f4a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34f4e     00 A0 00 A0 
34f52     00 A0 00 A0 
34f56     00 A0 00 A0 
34f5a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34f5e     00 A0 00 A0 
34f62     00 A0 00 A0 
34f66     00 A0 00 A0 
34f6a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34f6e     00 A0 00 A0 
34f72     00 A0 00 A0 
34f76     00 A0 00 A0 
34f7a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34f7e     00 A0 00 A0 
34f82     00 A0 00 A0 
34f86     00 A0 00 A0 
34f8a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34f8e     00 A0 00 A0 
34f92     00 A0 00 A0 
34f96     00 A0 00 A0 
34f9a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34f9e     00 A0 00 A0 
34fa2     00 A0 00 A0 
34fa6     00 A0 00 A0 
34faa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34fae     00 A0 00 A0 
34fb2     00 A0 00 A0 
34fb6     00 A0 00 A0 
34fba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34fbe     00 A0 00 A0 
34fc2     00 A0 00 A0 
34fc6     00 A0 00 A0 
34fca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34fce     00 A0 00 A0 
34fd2     00 A0 00 A0 
34fd6     00 A0 00 A0 
34fda     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34fde     00 A0 00 A0 
34fe2     00 A0 00 A0 
34fe6     00 A0 00 A0 
34fea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34fee     00 A0 00 A0 
34ff2     00 A0 00 A0 
34ff6     00 A0 00 A0 
34ffa     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
34ffe     00 6D 00 6D 
35002     00 6D 00 6D 
35006     00 6D 00 6D 
3500a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3500e     00 6D 00 6D 
35012     00 6D 00 6D 
35016     00 6D 00 6D 
3501a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3501e     00 6D 00 6D 
35022     00 6D 00 6D 
35026     00 6D 00 6D 
3502a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3502e     00 6D 00 6D 
35032     00 6D 00 6D 
35036     00 6D 00 6D 
3503a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3503e     00 6D 00 6D 
35042     00 6D 00 6D 
35046     00 6D 00 6D 
3504a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3504e     00 6D 00 6D 
35052     00 6D 00 6D 
35056     00 6D 00 6D 
3505a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3505e     00 6D 00 6D 
35062     00 6D 00 6D 
35066     00 6D 00 6D 
3506a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3506e     00 6D 00 6D 
35072     00 6D 00 6D 
35076     00 6D 00 6D 
3507a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3507e     00 6D 00 6D 
35082     00 A0 00 A0 
35086     00 A0 00 A0 
3508a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3508e     00 A0 00 A0 
35092     00 A0 00 A0 
35096     00 A0 00 A0 
3509a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3509e     00 A0 00 A0 
350a2     00 A0 00 A0 
350a6     00 A0 00 A0 
350aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350ae     00 A0 00 A0 
350b2     00 A0 00 A0 
350b6     00 A0 00 A0 
350ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350be     00 A0 00 A0 
350c2     00 A0 00 A0 
350c6     00 A0 00 A0 
350ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350ce     00 A0 00 A0 
350d2     00 A0 00 A0 
350d6     00 A0 00 A0 
350da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350de     00 A0 00 A0 
350e2     00 A0 00 A0 
350e6     00 A0 00 A0 
350ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350ee     00 A0 00 A0 
350f2     00 A0 00 A0 
350f6     00 A0 00 A0 
350fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350fe     00 A0 00 A0 
35102     00 A0 00 A0 
35106     00 A0 00 A0 
3510a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3510e     00 6D 00 6D 
35112     00 6D 00 6D 
35116     00 6D 00 6D 
3511a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3511e     00 6D 00 6D 
35122     00 6D 00 6D 
35126     00 6D 00 6D 
3512a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3512e     00 6D 00 6D 
35132     00 6D 00 6D 
35136     00 6D 00 6D 
3513a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3513e     00 6D 00 6D 
35142     00 6D 00 6D 
35146     00 6D 00 6D 
3514a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3514e     00 6D 00 6D 
35152     00 6D 00 6D 
35156     00 6D 00 6D 
3515a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3515e     00 6D 00 6D 
35162     00 6D 00 6D 
35166     00 6D 00 6D 
3516a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3516e     00 6D 00 6D 
35172     00 6D 00 6D 
35176     00 6D 00 6D 
3517a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3517e     00 6D 00 6D 
35182     00 6D 00 6D 
35186     00 6D 00 6D 
3518a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3518e     00 6D 00 6D 
35192     00 6C 00 A0 
35196     00 9F 00 A0 
3519a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3519e     00 A0 00 A0 
351a2     00 A0 00 A0 
351a6     00 A0 00 A0 
351aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351ae     00 A0 00 A0 
351b2     00 A0 00 A0 
351b6     00 A0 00 A0 
351ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351be     00 A0 00 A0 
351c2     00 A0 00 A0 
351c6     00 A0 00 A0 
351ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351ce     00 A0 00 A0 
351d2     00 A0 00 A0 
351d6     00 A0 00 A0 
351da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351de     00 A0 00 A0 
351e2     00 A0 00 A0 
351e6     00 A0 00 A0 
351ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351ee     00 A0 00 A0 
351f2     00 A0 00 A0 
351f6     00 A0 00 A0 
351fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351fe     00 A0 00 A0 
35202     00 A0 00 A0 
35206     00 A0 00 A0 
3520a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3520e     00 A0 00 A0 
35212     00 A0 00 A0 
35216     00 A0 00 A0 
3521a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3521e     00 A0 00 A0 
35222     00 A0 00 A0 
35226     00 A0 00 A0 
3522a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3522e     00 A0 00 A0 
35232     00 A0 00 A0 
35236     00 A0 00 A0 
3523a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3523e     00 A0 00 A0 
35242     00 A0 00 A0 
35246     00 A0 00 A0 
3524a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3524e     00 A1 00 A1 
35252     00 A1 00 A1 
35256     00 A1 00 A1 
3525a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3525e     00 A1 00 A1 
35262     00 A1 00 A1 
35266     00 A1 00 A1 
3526a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3526e     00 A1 00 A1 
35272     00 A1 00 A1 
35276     00 A1 00 A1 
3527a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3527e     00 A1 00 A1 
35282     00 A1 00 A1 
35286     00 A1 00 A1 
3528a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3528e     00 A1 00 A1 
35292     00 A1 00 A1 
35296     00 A1 00 A1 
3529a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3529e     00 A1 00 A1 
352a2     00 A1 00 A1 
352a6     00 6E 00 6E 
352aa     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
352ae     00 6E 00 6E 
352b2     00 6E 00 6E 
352b6     00 6E 00 6E 
352ba     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
352be     00 6E 00 6E 
352c2     00 6E 00 6E 
352c6     00 6E 00 6E 
352ca     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
352ce     00 6E 00 6E 
352d2     00 6E 00 6E 
352d6     00 6E 00 6E 
352da     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
352de     00 6E 00 6D 
352e2     00 6D 00 6D 
352e6     00 6D 00 6D 
352ea     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
352ee     00 6D 00 6D 
352f2     00 6D 00 6D 
352f6     00 6D 00 6D 
352fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
352fe     00 6D 00 6D 
35302     00 6D 00 6D 
35306     00 6D 00 6D 
3530a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3530e     00 6D 00 6D 
35312     00 6D 00 6D 
35316     00 6D 00 6D 
3531a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3531e     00 6D 00 6D 
35322     00 6D 00 6D 
35326     00 6D 00 6D 
3532a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3532e     00 6D 00 6D 
35332     00 6D 00 6D 
35336     00 6D 00 6D 
3533a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3533e     00 6D 00 6D 
35342     00 6D 00 6D 
35346     00 6D 00 6D 
3534a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3534e     00 6D 00 6D 
35352     00 6D 00 6D 
35356     00 6D 00 6D 
3535a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3535e     00 6D 00 6D 
35362     00 6D 00 6D 
35366     00 6D 00 6D 
3536a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3536e     00 6D 00 6D 
35372     00 6D 00 6D 
35376     00 6D 00 6D 
3537a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3537e     00 6D 00 6D 
35382     00 6D 00 6D 
35386     00 6D 00 6D 
3538a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3538e     00 6D 00 6D 
35392     00 6C 00 6C 
35396     00 6C 00 6C 
3539a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3539e     00 6C 00 6C 
353a2     00 6C 00 6C 
353a6     00 6C 00 6C 
353aa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
353ae     00 6C 00 6C 
353b2     00 6C 00 6C 
353b6     00 9D 00 9F 
353ba     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
353be     00 9F 00 9F 
353c2     00 9F 00 9F 
353c6     00 A0 00 A0 
353ca     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
353ce     00 A0 00 A0 
353d2     00 A0 00 A0 
353d6     00 A0 00 A0 
353da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
353de     00 A0 00 A0 
353e2     00 A0 00 A0 
353e6     00 A0 00 A0 
353ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
353ee     00 A0 00 A0 
353f2     00 A0 00 A0 
353f6     00 A0 00 A0 
353fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
353fe     00 A0 00 A0 
35402     00 A0 00 A0 
35406     00 A0 00 A0 
3540a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3540e     00 A0 00 A0 
35412     00 A0 00 A0 
35416     00 A0 00 A0 
3541a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3541e     00 A0 00 A0 
35422     00 A0 00 A0 
35426     00 A0 00 A0 
3542a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3542e     00 A0 00 A0 
35432     00 A0 00 A0 
35436     00 A0 00 A0 
3543a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3543e     01 00 00 00 
35442     00 00 00 00 
35446     00 00 00 00 
3544a     00 00 00 00 | mouse  file "mouse2.def"
3544e     00 00 00 00 
35452     00 00 00 00 
35456     00 00 00 00 
3545a     00 00 00 00 | 	byte	$00[16]
3545e     01 01 00 00 
35462     00 00 00 00 
35466     00 00 00 00 
3546a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3546e     00 00 00 00 
35472     00 00 00 00 
35476     00 00 00 00 
3547a     00 00 00 00 | 	byte	$00[16]
3547e     01 0D 01 00 
35482     00 00 00 00 
35486     00 00 00 00 
3548a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3548e     00 00 00 00 
35492     00 00 00 00 
35496     00 00 00 00 
3549a     00 00 00 00 | 	byte	$00[16]
3549e     01 0D 0D 01 
354a2     00 00 00 00 
354a6     00 00 00 00 
354aa     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354ae     00 00 00 00 
354b2     00 00 00 00 
354b6     00 00 00 00 
354ba     00 00 00 00 | 	byte	$00[16]
354be     01 0D 0D 0D 
354c2     01 00 00 00 
354c6     00 00 00 00 
354ca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354ce     00 00 00 00 
354d2     00 00 00 00 
354d6     00 00 00 00 
354da     00 00 00 00 | 	byte	$00[16]
354de     01 0D 0D 0D 
354e2     0D 01 00 00 
354e6     00 00 00 00 
354ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354ee     00 00 00 00 
354f2     00 00 00 00 
354f6     00 00 00 00 
354fa     00 00 00 00 | 	byte	$00[16]
354fe     01 0D 0D 0D 
35502     0D 0D 01 00 
35506     00 00 00 00 
3550a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3550e     00 00 00 00 
35512     00 00 00 00 
35516     00 00 00 00 
3551a     00 00 00 00 | 	byte	$00[16]
3551e     01 0D 0D 0D 
35522     0D 0D 0D 01 
35526     00 00 00 00 
3552a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3552e     00 00 00 00 
35532     00 00 00 00 
35536     00 00 00 00 
3553a     00 00 00 00 | 	byte	$00[16]
3553e     01 0D 0D 0D 
35542     0D 0D 0D 0C 
35546     01 00 00 00 
3554a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3554e     00 00 00 00 
35552     00 00 00 00 
35556     00 00 00 00 
3555a     00 00 00 00 | 	byte	$00[16]
3555e     01 0D 0D 0D 
35562     0D 0D 0D 0D 
35566     0C 01 00 00 
3556a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3556e     00 00 00 00 
35572     00 00 00 00 
35576     00 00 00 00 
3557a     00 00 00 00 | 	byte	$00[16]
3557e     01 0D 0D 0D 
35582     0D 0D 0D 0D 
35586     0D 0C 01 00 
3558a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3558e     00 00 00 00 
35592     00 00 00 00 
35596     00 00 00 00 
3559a     00 00 00 00 | 	byte	$00[16]
3559e     01 0D 0D 0D 
355a2     0D 0D 0D 0D 
355a6     0D 0D 0B 01 
355aa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
355ae     00 00 00 00 
355b2     00 00 00 00 
355b6     00 00 00 00 
355ba     00 00 00 00 | 	byte	$00[16]
355be     01 0D 0D 0D 
355c2     0C 0D 0D 03 
355c6     01 01 01 01 
355ca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
355ce     00 00 00 00 
355d2     00 00 00 00 
355d6     00 00 00 00 
355da     00 00 00 00 | 	byte	$00[16]
355de     01 0D 0D 0C 
355e2     01 09 0D 03 
355e6     00 00 00 00 
355ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
355ee     00 00 00 00 
355f2     00 00 00 00 
355f6     00 00 00 00 
355fa     00 00 00 00 | 	byte	$00[16]
355fe     01 0D 0C 01 
35602     00 01 0D 0B 
35606     01 00 00 00 
3560a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3560e     00 00 00 00 
35612     00 00 00 00 
35616     00 00 00 00 
3561a     00 00 00 00 | 	byte	$00[16]
3561e     01 0C 01 00 
35622     00 01 0A 0D 
35626     01 00 00 00 
3562a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3562e     00 00 00 00 
35632     00 00 00 00 
35636     00 00 00 00 
3563a     00 00 00 00 | 	byte	$00[16]
3563e     01 01 00 00 
35642     00 00 01 0D 
35646     0B 01 00 00 
3564a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3564e     00 00 00 00 
35652     00 00 00 00 
35656     00 00 00 00 
3565a     00 00 00 00 
3565e     00 00 00 00 
35662     00 00       | 	byte	$00[22]
35664     01 0B 0D 01 
35668     00 00 00 00 
3566c     00 00 00 00 
35670     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35674     00 00 00 00 
35678     00 00 00 00 
3567c     00 00 00 00 
35680     00 00 00 00 
35684     00          | 	byte	$00[17]
35685     01 01 00 00 
35689     00 00 00 00 
3568d     00 00 00 00 
35691     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35695     00 00 00 00 
      ...             
35839     00 00 00 00 
3583d     00          | 	byte	$00[425]
3583e                 | 
3583e     00 00       |              	org
35840 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
35844 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
35848 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3584c 003             | 
3584c 003 00 30 04 F6 |                 mov     psramaddr,#0
35850 004             | 
35850 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
35854 005 20 00 00 FF 
35858 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3585c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
35860 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
35864 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
35868 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3586c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
35870 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
35874 00d             | 
35874 00d 20 00 00 FF 
35878 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3587c 00f E0 03 00 FF 
35880 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
35884 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
35888 012             | 
35888 012             |                 
35888 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3588c 013             |     
3588c 013 01 2C 60 FD |                 cogid 	t11				' get id
35890 014 00 00 EC FC |                 coginit #0,#0				' start the new program
35894 015 03 2C 60 FD |                 cogstop t11				' stop the loader
35898 016             | 
35898 016 00 00 00 00 | t11 		long 	0
3589c 017 00 FF 07 00 | mailbox 	long 	$7FF00
358a0 018 00 00 00 00 | psramaddr 	long 	0
358a4 019 00 00 00 00 | pslockval	long 	0
358a8 01a 00 00 00 00 | cmd             long    0
358ac 01b 00 00 00 00 | buf1            long    0
358b0 01c 00 40 00 00 | buf2            long    16384
358b4 01d B8 58 03 00 | 	long	@@@_dat_ + 12612
358b8 01e 50 32 20 52 
358bc 01f 65 74 72 6F 
358c0 020 6D 61 63 68 
358c4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
358c8 022 42 41 53 49 
358cc 023 43 20 76 65 
358d0 024 72 73 69 6F 
358d4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
358d8 026 33 32 00 00 | 	byte	$33, $32, $00, $00
358dc 027             | 	alignl
358dc 027             | _hg010b_spin2_dat_
358dc 027             | 
358dc 027 00 00 00 00 
358e0 028 00 00 00 00 
358e4 029 00 00 00 00 
358e8 02a 00 00 00 00 
358ec 02b 00 00 00    | vga_font       file "vgafont.def"
358ef 02b 7E 81 A5 81 
358f3 02c 81 BD 99 81 
358f7 02d 81 7E 00 00 
358fb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
358ff 02f 7E FF DB FF 
35903 030 FF C3 E7 FF 
35907 031 FF 7E 00 00 
3590b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3590f 033 00 36 7F 7F 
35913 034 7F 7F 3E 1C 
35917 035 08 00 00 00 
3591b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3591f 037 00 08 1C 3E 
35923 038 7F 3E 1C 08 
35927 039 00 00 00 00 
3592b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3592f 03b 18 3C 3C E7 
35933 03c E7 E7 18 18 
35937 03d 3C 00 00 00 
3593b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3593f 03f 18 3C 7E FF 
35943 040 FF 7E 18 18 
35947 041 3C 00 00 00 
3594b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3594f 043 00 00 00 18 
35953 044 3C 3C 18 00 
35957 045 00 00 00 00 
3595b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3595f 047 FF FF FF E7 
35963 048 C3 C3 E7 FF 
35967 049 FF FF FF FF 
3596b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3596f 04b 00 00 3C 66 
35973 04c 42 42 66 3C 
35977 04d 00 00 00 00 
3597b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3597f 04f FF FF C3 99 
35983 050 BD BD 99 C3 
35987 051 FF FF FF FF 
3598b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3598f 053 78 70 58 4C 
35993 054 1E 33 33 33 
35997 055 33 1E 00 00 
3599b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3599f 057 3C 66 66 66 
359a3 058 66 3C 18 7E 
359a7 059 18 18 00 00 
359ab 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
359af 05b FC CC FC 0C 
359b3 05c 0C 0C 0C 0E 
359b7 05d 0F 07 00 00 
359bb 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
359bf 05f FE C6 FE C6 
359c3 060 C6 C6 C6 E6 
359c7 061 E7 67 03 00 
359cb 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
359cf 063 18 18 DB 3C 
359d3 064 E7 3C DB 18 
359d7 065 18 00 00 00 
359db 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
359df 067 03 07 0F 1F 
359e3 068 7F 1F 0F 07 
359e7 069 03 01 00 00 
359eb 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
359ef 06b 60 70 78 7C 
359f3 06c 7F 7C 78 70 
359f7 06d 60 40 00 00 
359fb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
359ff 06f 18 3C 7E 18 
35a03 070 18 18 7E 3C 
35a07 071 18 00 00 00 
35a0b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
35a0f 073 66 66 66 66 
35a13 074 66 66 66    | 	byte	$66[7]
35a16 075 00 66 66 00 
35a1a 076 00 00 00 00 
35a1e 077 00 FE DB DB 
35a22 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
35a26 079 D8 D8 D8 00 
35a2a 07a 00 00 00 3E 
35a2e 07b 63 06 1C 36 
35a32 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
35a36 07d 30 63 3E 00 
35a3a 07e 00 00 00 00 
35a3e 07f 00 00 00 00 
35a42 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
35a46 081 7F 7F 7F 00 
35a4a 082 00 00 00 00 
35a4e 083 00 18 3C 7E 
35a52 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
35a56 085 3C 18 7E 00 
35a5a 086 00 00 00 00 
35a5e 087 00 18 3C 7E 
35a62 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
35a66 089 18 18 18 00 
35a6a 08a 00 00 00 00 
35a6e 08b 00 18 18 18 
35a72 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35a76 08d 7E 3C 18 00 
35a7a 08e 00 00 00 00 
35a7e 08f 00 00 00 18 
35a82 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
35a86 091 00 00 00 00 
35a8a 092 00 00 00 00 
35a8e 093 00 00 00    | 	byte	$00[11]
35a91 094 0C 06 7F 06 
35a95 095 0C 00 00 00 
35a99 096 00 00 00 00 
35a9d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35aa1 098 00 03 03 03 
35aa5 099 7F 00 00 00 
35aa9 09a 00 00 00 00 
35aad 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ab1 09c 14 36 7F 36 
35ab5 09d 14 00 00 00 
35ab9 09e 00 00 00 00 
35abd 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
35ac1 0a0 1C 1C 3E 3E 
35ac5 0a1 7F 7F 00 00 
35ac9 0a2 00 00 00 00 
35acd 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
35ad1 0a4 7F 3E 3E 1C 
35ad5 0a5 1C 08 00 00 
35ad9 0a6 00 00 00 00 
35add 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ae1 0a8 00 00 00 00 
35ae5 0a9 00 00 00 00 
35ae9 0aa 00 00 00 00 
35aed 0ab 00 00       | 	byte	$00[14]
35aef 0ab 18 3C 3C 3C 
35af3 0ac 18 18 18 00 
35af7 0ad 18 18 00 00 
35afb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
35aff 0af 66 24 00 00 
35b03 0b0 00 00 00 00 
35b07 0b1 00 00 00 00 
35b0b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b0f 0b3 00 36 36 7F 
35b13 0b4 36 36 36 7F 
35b17 0b5 36 36 00 00 
35b1b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
35b1f 0b7 3E 63 43 03 
35b23 0b8 3E 60 60 61 
35b27 0b9 63 3E 18 18 
35b2b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
35b2f 0bb 00 00 43 63 
35b33 0bc 30 18 0C 06 
35b37 0bd 63 61 00 00 
35b3b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
35b3f 0bf 1C 36 36 1C 
35b43 0c0 6E 3B 33 33 
35b47 0c1 33 6E 00 00 
35b4b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
35b4f 0c3 0C 0C 0C 06 
35b53 0c4 00 00 00 00 
35b57 0c5 00 00 00 00 
35b5b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b5f 0c7 30 18 0C 0C 
35b63 0c8 0C 0C 0C 0C 
35b67 0c9 18 30 00 00 
35b6b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
35b6f 0cb 0C 18 30 30 
35b73 0cc 30 30 30 30 
35b77 0cd 18 0C 00 00 
35b7b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
35b7f 0cf 00 00 00 66 
35b83 0d0 3C FF 3C 66 
35b87 0d1 00 00 00 00 
35b8b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
35b8f 0d3 00 00 00 18 
35b93 0d4 18 7E 18 18 
35b97 0d5 00 00 00 00 
35b9b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
35b9f 0d7 00 00 00 00 
35ba3 0d8 00 00 00 00 | 	byte	$00[8]
35ba7 0d9 18 18 18 0C 
35bab 0da 00 00 00 00 
35baf 0db 00 00 00 00 
35bb3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
35bb7 0dd 00 00 00 00 
35bbb 0de 00 00 00 00 
35bbf 0df 00 00 00 00 
35bc3 0e0 00 00 00 00 | 	byte	$00[16]
35bc7 0e1 18 18 00 00 
35bcb 0e2 00 00 00 00 
35bcf 0e3 00 00 40 60 
35bd3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
35bd7 0e5 03 01 00 00 
35bdb 0e6 00 00 00 00 
35bdf 0e7 1C 36 63 63 
35be3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
35be7 0e9 36 1C 00 00 
35beb 0ea 00 00 00 00 
35bef 0eb 18 1C 1E 18 
35bf3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
35bf7 0ed 18 7E 00 00 
35bfb 0ee 00 00 00 00 
35bff 0ef 3E 63 60 30 
35c03 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
35c07 0f1 63 7F 00 00 
35c0b 0f2 00 00 00 00 
35c0f 0f3 3E 63 60 60 
35c13 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
35c17 0f5 63 3E 00 00 
35c1b 0f6 00 00 00 00 
35c1f 0f7 30 38 3C 36 
35c23 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
35c27 0f9 30 78 00 00 
35c2b 0fa 00 00 00 00 
35c2f 0fb 7F 03 03 03 
35c33 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
35c37 0fd 63 3E 00 00 
35c3b 0fe 00 00 00 00 
35c3f 0ff 1C 06 03 03 
35c43 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
35c47 101 63 3E 00 00 
35c4b 102 00 00 00 00 
35c4f 103 7F 63 60 60 
35c53 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
35c57 105 0C 0C 00 00 
35c5b 106 00 00 00 00 
35c5f 107 3E 63 63 63 
35c63 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
35c67 109 63 3E 00 00 
35c6b 10a 00 00 00 00 
35c6f 10b 3E 63 63 63 
35c73 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
35c77 10d 30 1E 00 00 
35c7b 10e 00 00 00 00 
35c7f 10f 00 00 00 18 
35c83 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
35c87 111 18 18 00 00 
35c8b 112 00 00 00 00 
35c8f 113 00 00 00 18 
35c93 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
35c97 115 18 18 0C 00 
35c9b 116 00 00 00 00 
35c9f 117 00 60 30 18 
35ca3 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
35ca7 119 30 60 00 00 
35cab 11a 00 00 00 00 
35caf 11b 00 00 00 7E 
35cb3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
35cb7 11d 00 00 00 00 
35cbb 11e 00 00 00 00 
35cbf 11f 00          | 	byte	$00[9]
35cc0 120 06 0C 18 30 
35cc4 121 60 30 18 0C 
35cc8 122 06 00 00 00 
35ccc 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
35cd0 124 63 63 30 18 
35cd4 125 18 18 00 18 
35cd8 126 18 00 00 00 
35cdc 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
35ce0 128 3E 63 63 7B 
35ce4 129 7B 7B 3B 03 
35ce8 12a 3E 00 00 00 
35cec 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
35cf0 12c 1C 36 63 63 
35cf4 12d 7F 63 63 63 
35cf8 12e 63 00 00 00 
35cfc 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
35d00 130 66 66 66 3E 
35d04 131 66 66 66 66 
35d08 132 3F 00 00 00 
35d0c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
35d10 134 66 43 03 03 
35d14 135 03 03 43 66 
35d18 136 3C 00 00 00 
35d1c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
35d20 138 36 66 66 66 
35d24 139 66 66 66 36 
35d28 13a 1F 00 00 00 
35d2c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
35d30 13c 66 46 16 1E 
35d34 13d 16 06 46 66 
35d38 13e 7F 00 00 00 
35d3c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
35d40 140 66 46 16 1E 
35d44 141 16 06 06 06 
35d48 142 0F 00 00 00 
35d4c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
35d50 144 66 43 03 03 
35d54 145 7B 63 63 66 
35d58 146 5C 00 00 00 
35d5c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
35d60 148 63 63 63 7F 
35d64 149 63 63 63 63 
35d68 14a 63 00 00 00 
35d6c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
35d70 14c 18 18 18 18 
35d74 14d 18 18 18 18 | 	byte	$18[8]
35d78 14e 3C 00 00 00 
35d7c 14f 00 00 00 78 
35d80 150 30 30 30 30 
35d84 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
35d88 152 1E 00 00 00 
35d8c 153 00 00 00 67 
35d90 154 66 66 36 1E 
35d94 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
35d98 156 67 00 00 00 
35d9c 157 00 00 00 0F 
35da0 158 06 06 06 06 
35da4 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
35da8 15a 7F 00 00 00 
35dac 15b 00 00 00 63 
35db0 15c 77 7F 7F 6B 
35db4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
35db8 15e 63 00 00 00 
35dbc 15f 00 00 00 63 
35dc0 160 67 6F 7F 7B 
35dc4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
35dc8 162 63 00 00 00 
35dcc 163 00 00 00 3E 
35dd0 164 63 63 63 63 
35dd4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35dd8 166 3E 00 00 00 
35ddc 167 00 00 00 3F 
35de0 168 66 66 66 3E 
35de4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
35de8 16a 0F 00 00 00 
35dec 16b 00 00 00 3E 
35df0 16c 63 63 63 63 
35df4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
35df8 16e 3E 30 70 00 
35dfc 16f 00 00 00 3F 
35e00 170 66 66 66 3E 
35e04 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
35e08 172 67 00 00 00 
35e0c 173 00 00 00 3E 
35e10 174 63 63 06 1C 
35e14 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
35e18 176 3E 00 00 00 
35e1c 177 00 00 00 7E 
35e20 178 7E 5A 18 18 
35e24 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
35e28 17a 3C 00 00 00 
35e2c 17b 00 00 00 63 
35e30 17c 63 63 63 63 
35e34 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
35e38 17e 3E 00 00 00 
35e3c 17f 00 00 00 63 
35e40 180 63 63 63 63 
35e44 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
35e48 182 08 00 00 00 
35e4c 183 00 00 00 63 
35e50 184 63 63 63 6B 
35e54 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
35e58 186 36 00 00 00 
35e5c 187 00 00 00 63 
35e60 188 63 36 3E 1C 
35e64 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
35e68 18a 63 00 00 00 
35e6c 18b 00 00 00 66 
35e70 18c 66 66 66 3C 
35e74 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
35e78 18e 3C 00 00 00 
35e7c 18f 00 00 00 7F 
35e80 190 63 61 30 18 
35e84 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
35e88 192 7F 00 00 00 
35e8c 193 00 00 00 3C 
35e90 194 0C 0C 0C 0C 
35e94 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
35e98 196 3C 00 00 00 
35e9c 197 00 00 00 00 
35ea0 198 01 03 07 0E 
35ea4 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
35ea8 19a 40 00 00 00 
35eac 19b 00 00 00 3C 
35eb0 19c 30 30 30 30 
35eb4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
35eb8 19e 3C 00 00 00 
35ebc 19f 1C 36 00 00 
35ec0 1a0 00 00 00 00 
35ec4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ec8 1a2 00 00 00 00 
35ecc 1a3 00 00 00 00 
35ed0 1a4 00 00 00 00 
35ed4 1a5 00 00 00 00 
35ed8 1a6 00          | 	byte	$00[17]
35ed9 1a6 FF 00 00 0C 
35edd 1a7 18 00 00 00 
35ee1 1a8 00 00 00 00 
35ee5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ee9 1aa 00 00 00 00 
35eed 1ab 00 00 00 00 
35ef1 1ac 00          | 	byte	$00[9]
35ef2 1ac 1E 30 3E 33 
35ef6 1ad 33 33 6E 00 
35efa 1ae 00 00 00 00 
35efe 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
35f02 1b0 1E 36 66 66 
35f06 1b1 66 66 3E 00 
35f0a 1b2 00 00 00 00 
35f0e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
35f12 1b4 3E 63 03 03 
35f16 1b5 03 63 3E 00 
35f1a 1b6 00 00 00 00 
35f1e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
35f22 1b8 3C 36 33 33 
35f26 1b9 33 33 6E 00 
35f2a 1ba 00 00 00 00 
35f2e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
35f32 1bc 3E 63 7F 03 
35f36 1bd 03 63 3E 00 
35f3a 1be 00 00 00 00 
35f3e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
35f42 1c0 0C 1E 0C 0C 
35f46 1c1 0C 0C 1E 00 
35f4a 1c2 00 00 00 00 
35f4e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
35f52 1c4 6E 33 33 33 
35f56 1c5 33 33 3E 30 
35f5a 1c6 33 1E 00 00 
35f5e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
35f62 1c8 36 6E 66 66 
35f66 1c9 66 66 67 00 
35f6a 1ca 00 00 00 00 
35f6e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
35f72 1cc 1C 18 18 18 
35f76 1cd 18 18 3C 00 
35f7a 1ce 00 00 00 00 
35f7e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
35f82 1d0 70 60 60 60 
35f86 1d1 60 60 60 66 
35f8a 1d2 66 3C 00 00 
35f8e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
35f92 1d4 66 36 1E 1E 
35f96 1d5 36 66 67 00 
35f9a 1d6 00 00 00 00 
35f9e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
35fa2 1d8 18 18 18 18 
35fa6 1d9 18 18       | 	byte	$18[6]
35fa8 1da 3C 00 00 00 
35fac 1db 00 00 00 00 
35fb0 1dc 00 00 37 7F 
35fb4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
35fb8 1de 63 00 00 00 
35fbc 1df 00 00 00 00 
35fc0 1e0 00 00 3B 66 
35fc4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35fc8 1e2 66 00 00 00 
35fcc 1e3 00 00 00 00 
35fd0 1e4 00 00 3E 63 
35fd4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
35fd8 1e6 3E 00 00 00 
35fdc 1e7 00 00 00 00 
35fe0 1e8 00 00 3B 66 
35fe4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35fe8 1ea 3E 06 06 0F 
35fec 1eb 00 00 00 00 
35ff0 1ec 00 00 6E 33 
35ff4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
35ff8 1ee 3E 30 30 78 
35ffc 1ef 00 00 00 00 
36000 1f0 00 00 3B 6E 
36004 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
36008 1f2 0F 00 00 00 
3600c 1f3 00 00 00 00 
36010 1f4 00 00 3E 63 
36014 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
36018 1f6 3E 00 00 00 
3601c 1f7 00 00 00 08 
36020 1f8 0C 0C 3F 0C 
36024 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
36028 1fa 38 00 00 00 
3602c 1fb 00 00 00 00 
36030 1fc 00 00 33 33 
36034 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
36038 1fe 6E 00 00 00 
3603c 1ff 00 00 00 00 
36040 200 00 00 63 63 
36044 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
36048 202 1C 00 00 00 
3604c 203 00 00 00 00 
36050 204 00 00 63 63 
36054 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
36058 206 36 00 00 00 
3605c 207 00 00 00 00 
36060 208 00 00 63 36 
36064 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
36068 20a 63 00 00 00 
3606c 20b 00 00 00 00 
36070 20c 00 00 63 63 
36074 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
36078 20e 7E 60 30 1F 
3607c 20f 00 00 00 00 
36080 210 00 00 7F 33 
36084 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
36088 212 7F 00 00 00 
3608c 213 00 00 00 70 
36090 214 18 18 18 0E 
36094 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
36098 216 70 00 00 00 
3609c 217 00 00 00 18 
360a0 218 18 18 18 18 
360a4 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
360a8 21a 18 00 00 00 
360ac 21b 00 00 00 0E 
360b0 21c 18 18 18 70 
360b4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
360b8 21e 0E 00 00 00 
360bc 21f 6E 3B 00 00 
360c0 220 00 00 00 00 
360c4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
360c8 222 00 00 00 00 
360cc 223 00 00 00 00 
360d0 224 00 00       | 	byte	$00[10]
360d2 224 08 1C 36 63 
360d6 225 63 63 7F 00 
360da 226 00 00 00 00 
360de 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
360e2 228 03 03 03 03 
360e6 229 43 66 3C 18 
360ea 22a 30 1E 00 00 
360ee 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
360f2 22c 33 33 33 33 
360f6 22d 33 33       | 	byte	$33[6]
360f8 22e 6E 00 00 00 
360fc 22f 00 00 60 30 
36100 230 18 00 3E 63 
36104 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
36108 232 3E 00 00 00 
3610c 233 00 00 08 1C 
36110 234 36 00 1E 30 
36114 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
36118 236 6E 00 00 00 
3611c 237 00 00 00 00 
36120 238 33 00 1E 30 
36124 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
36128 23a 6E 00 00 00 
3612c 23b 00 00 1C 36 
36130 23c 1C 00 33 33 
36134 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
36138 23e 6E 00 00 00 
3613c 23f 00 00 60 30 
36140 240 18 00 3E 63 
36144 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
36148 242 3E 00 00 00 
3614c 243 00 00 00 00 
36150 244 00 00 3E 63 
36154 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
36158 246 3E 18 30 1E 
3615c 247 00 00 00 1C 
36160 248 58 78 38 18 
36164 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
36168 24a 3C 00 00 00 
3616c 24b 00 00 00 00 
36170 24c 63 00 3E 63 
36174 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
36178 24e 3E 00 00 00 
3617c 24f 66 33 00 3E 
36180 250 63 63 63 63 
36184 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36188 252 3E 00 00 00 
3618c 253 00 00 CC 66 
36190 254 33 00 3E 63 
36194 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
36198 256 3E 00 00 00 
3619c 257 00 00 18 3C 
361a0 258 66 00 1C 18 
361a4 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
361a8 25a 3C 00 00 00 
361ac 25b 30 18 00 7F 
361b0 25c 63 61 30 18 
361b4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
361b8 25e 7F 00 00 00 
361bc 25f 00 63 00 08 
361c0 260 1C 36 63 63 
361c4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
361c8 262 63 00 00 00 
361cc 263 30 18 00 3C 
361d0 264 66 43 03 03 
361d4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
361d8 266 3C 00 00 00 
361dc 267 30 18 00 7F 
361e0 268 66 46 16 1E 
361e4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
361e8 26a 7F 00 00 00 
361ec 26b 0C 06 00 0F 
361f0 26c 06 06 06 06 
361f4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
361f8 26e 7F 00 00 00 
361fc 26f 30 18 00 1C 
36200 270 18 18 18 18 
36204 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
36208 272 3C 00 00 00 
3620c 273 00 00 08 1C 
36210 274 36 00 3E 63 
36214 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
36218 276 3E 00 00 00 
3621c 277 00 00 00 00 
36220 278 63 00 3E 63 
36224 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
36228 27a 3E 00 00 00 
3622c 27b 00 00 00 6F 
36230 27c 46 26 06 06 
36234 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
36238 27e 7F 00 00 00 
3623c 27f 00 00 00 6E 
36240 280 4C 2C 0C 0C 
36244 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
36248 282 1E 00 00 00 
3624c 283 30 18 00 3E 
36250 284 63 63 06 1C 
36254 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36258 286 3E 00 00 00 
3625c 287 00 00 60 30 
36260 288 18 00 3E 63 
36264 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
36268 28a 3E 00 00 00 
3626c 28b 00 63 00 3E 
36270 28c 63 63 63 63 
36274 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36278 28e 3E 00 00 00 
3627c 28f 00 63 00 63 
36280 290 63 63 63 63 
36284 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36288 292 3E 00 00 00 
3628c 293 6C 38 00 7E 
36290 294 7E 5A 18 18 
36294 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36298 296 3C 00 00 00 
3629c 297 00 00 60 48 
362a0 298 2C 0C 3F 0C 
362a4 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
362a8 29a 38 00 00 00 
362ac 29b 00 00 00 0F 
362b0 29c 26 36 1E 0E 
362b4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
362b8 29e 7F 00 00 00 
362bc 29f 00 00 00 00 
362c0 2a0 00 63 36 1C 
362c4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
362c8 2a2 00 00 00 00 
362cc 2a3 00 00       | 	byte	$00[6]
362ce 2a3 36 1C 08 00 
362d2 2a4 3E 63 03 03 
362d6 2a5 03 63 3E 00 
362da 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
362de 2a7 30 18 0C 00 
362e2 2a8 1E 30 3E 33 
362e6 2a9 33 33 6E 00 
362ea 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
362ee 2ab 60 30 18 00 
362f2 2ac 1C 18 18 18 
362f6 2ad 18 18 3C 00 
362fa 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
362fe 2af 60 30 18 00 
36302 2b0 3E 63 63 63 
36306 2b1 63 63 3E 00 
3630a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3630e 2b3 30 18 0C 00 
36312 2b4 33 33 33 33 
36316 2b5 33 33 6E 00 
3631a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3631e 2b7 00 08 1C 36 
36322 2b8 63 63 7F 63 
36326 2b9 63 63 63 18 
3632a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3632e 2bb 00 00 00 00 
36332 2bc 1E 30 3E 33 
36336 2bd 33 33 6E 18 
3633a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3633e 2bf 00 7F 63 61 
36342 2c0 30 18 0C 06 
36346 2c1 43 63 7F 00 
3634a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3634e 2c3 36 1C 08 00 
36352 2c4 7F 33 18 0C 
36356 2c5 06 63 7F 00 
3635a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3635e 2c7 00 7F 66 46 
36362 2c8 16 1E 16 06 
36366 2c9 46 66 7F 18 
3636a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3636e 2cb 00 00 00 00 
36372 2cc 3E 63 7F 03 
36376 2cd 03 63 3E 18 
3637a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3637e 2cf 00 3C 66 03 
36382 2d0 1F 03 0F 03 
36386 2d1 03 66 3C 00 
3638a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3638e 2d3 60 30 18 00 
36392 2d4 7F 33 18 0C 
36396 2d5 06 63 7F 00 
3639a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3639e 2d7 00 3C 66 43 
363a2 2d8 03 03 03 03 
363a6 2d9 43 66 3C 00 
363aa 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
363ae 2db 00 00 00 00 
363b2 2dc 3E 63 06 1C 
363b6 2dd 30 63 3E 18 
363ba 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
363be 2df 00 00 00 00 
363c2 2e0 00 00       | 	byte	$00[6]
363c4 2e1 6C 36 1B 36 
363c8 2e2 6C 00 00 00 
363cc 2e3 00 00 00 00 
363d0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
363d4 2e5 1B 36 6C 36 
363d8 2e6 1B 00 00 00 
363dc 2e7 88 22 88 22 
363e0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
363e4 2e9 88 22 88 22 
363e8 2ea 88 22 88 22 
363ec 2eb AA 55 AA 55 
363f0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
363f4 2ed AA 55 AA 55 
363f8 2ee AA 55 AA 55 
363fc 2ef BB EE BB EE 
36400 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
36404 2f1 BB EE BB EE 
36408 2f2 BB EE BB EE 
3640c 2f3 18 18 18 18 
36410 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
36414 2f5 18 18 18 18 
36418 2f6 18 18 18 18 
3641c 2f7 18 18 18 18 
36420 2f8 18 18 18    | 	byte	$18[15]
36423 2f8 1F 18 18 18 
36427 2f9 18 18 18 18 
3642b 2fa 18 30 18 00 
3642f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
36433 2fc 63 7F 63 63 
36437 2fd 63 63 00 00 
3643b 2fe 00 1C 36 00 
3643f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
36443 300 63 7F 63 63 
36447 301 63 63 00 00 
3644b 302 00 36 1C 00 
3644f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
36453 304 1E 16 06 46 
36457 305 66 7F 00 00 
3645b 306 00 00 00 00 
3645f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
36463 308 1C 30 60 63 
36467 309 63 3E 18 30 
3646b 30a 1E 6C 6C 6C 
3646f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
36473 30c 6F 6C 6C 6C 
36477 30d 6C 6C 6C 6C 
3647b 30e 6C 6C 6C 6C 
3647f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36483 310 6C 6C 6C 6C 
36487 311 6C 6C 6C 6C 
3648b 312 6C          | 	byte	$6c[9]
3648c 313 00 00 00 00 
36490 314 00          | 	byte	$00[5]
36491 314 7F 60 6F 6C 
36495 315 6C 6C 6C 6C 
36499 316 6C 6C 6C 6C 
3649d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
364a1 318 6F 60 7F 00 
364a5 319 00 00 00 00 
364a9 31a 00 00 00 18 
364ad 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
364b1 31c 61 30 18 0C 
364b5 31d 06 43 63 7F 
364b9 31e 00 00 00 00 
364bd 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
364c1 320 00 7F 33 18 
364c5 321 0C 06 63 7F 
364c9 322 00 00 00 00 
364cd 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
364d1 324 00 00 1F 18 
364d5 325 18 18 18 18 
364d9 326 18 18 18 18 
364dd 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
364e1 328 18 18 F8 00 
364e5 329 00 00 00 00 
364e9 32a 00 00 00 18 
364ed 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
364f1 32c 18 18 FF 00 
364f5 32d 00 00 00 00 
364f9 32e 00 00 00 00 
364fd 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36501 330 00 00 FF 18 
36505 331 18 18 18 18 
36509 332 18 18 18 18 
3650d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36511 334 18 18 F8 18 
36515 335 18 18 18 18 
36519 336 18 18 18 00 
3651d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
36521 338 00 00 FF 00 
36525 339 00 00 00 00 
36529 33a 00 00 00 18 
3652d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
36531 33c 18 18 FF 18 
36535 33d 18 18 18 18 
36539 33e 18 18 18 63 
3653d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
36541 340 36 63 63 7F 
36545 341 63 63 63 63 
36549 342 00 00 00 00 
3654d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
36551 344 00 1E 30 3E 
36555 345 33 33 33 6E 
36559 346 00 00 00 6C 
3655d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
36561 348 EC 0C FC 00 
36565 349 00 00 00 00 
36569 34a 00 00 00 00 
3656d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36571 34c FC 0C EC 6C 
36575 34d 6C 6C 6C 6C 
36579 34e 6C 6C 6C 6C 
3657d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36581 350 EF 00 FF 00 
36585 351 00 00 00 00 
36589 352 00 00 00 00 
3658d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36591 354 FF 00 EF 6C 
36595 355 6C 6C 6C 6C 
36599 356 6C 6C 6C 6C 
3659d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
365a1 358 EC 0C EC 6C 
365a5 359 6C 6C 6C 6C 
365a9 35a 6C 6C 6C 00 
365ad 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
365b1 35c FF 00 FF 00 
365b5 35d 00 00 00 00 
365b9 35e 00 00 00 6C 
365bd 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
365c1 360 EF 00 EF 6C 
365c5 361 6C 6C 6C 6C 
365c9 362 6C 6C 6C 00 
365cd 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
365d1 364 63 3E 63 63 
365d5 365 63 63 3E 63 
365d9 366 00 00 00 00 
365dd 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
365e1 368 30 3C 36 33 
365e5 369 33 33 33 6E 
365e9 36a 00 00 00 00 
365ed 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
365f1 36c 66 66 6F 66 
365f5 36d 66 66 36 1F 
365f9 36e 00 00 00 36 
365fd 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
36601 370 66 66 66 66 
36605 371 66 66       | 	byte	$66[6]
36607 371 36 1F 00 00 
3660b 372 00 00 63 00 
3660f 373 7F 66 46 16 
36613 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
36617 375 66 7F 00 00 
3661b 376 00 6C 38 00 
3661f 377 38 30 30 3C 
36623 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
36627 379 33 6E 00 00 
3662b 37a 00 36 1C 00 
3662f 37b 63 67 6F 7F 
36633 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
36637 37d 63 63 00 00 
3663b 37e 00 30 18 00 
3663f 37f 3C 18 18 18 
36643 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
36647 381 18 3C 00 00 
3664b 382 00 3C 66 00 
3664f 383 3C 18 18 18 
36653 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
36657 385 18 3C 00 00 
3665b 386 00 00 00 36 
3665f 387 1C 08 00 3E 
36663 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
36667 389 63 3E 00 00 
3666b 38a 00 18 18 18 
3666f 38b 18 18 18 18 
36673 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
36677 38d 00 00 00 00 
3667b 38e 00 00 00 00 
3667f 38f 00 00 00 00 | 	byte	$00[12]
36683 390 F8 18 18 18 
36687 391 18 18 18 18 
3668b 392 18 FF FF FF 
3668f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
36693 394 FF FF FF FF 
36697 395 FF FF FF FF 
3669b 396 FF          | 	byte	$ff[9]
3669c 397 00 00 00 00 
366a0 398 00 00 00    | 	byte	$00[7]
366a3 398 FF FF FF FF 
366a7 399 FF FF FF FF 
366ab 39a FF          | 	byte	$ff[9]
366ac 39b 00 00 00 7E 
366b0 39c 7E 5A 18 18 
366b4 39d 18 18 18 18 
366b8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
366bc 39f 1C 36 1C 63 
366c0 3a0 63 63 63 63 
366c4 3a1 63 63 63 63 
366c8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
366cc 3a3 FF FF FF FF 
366d0 3a4 FF FF FF    | 	byte	$ff[7]
366d3 3a4 00 00 00 00 
366d7 3a5 00 00 00 00 
366db 3a6 00          | 	byte	$00[9]
366dc 3a7 30 18 00 3E 
366e0 3a8 63 63 63 63 
366e4 3a9 63 63 63 63 
366e8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
366ec 3ab 00 00 00 1E 
366f0 3ac 33 33 33 1B 
366f4 3ad 33 63 63 63 
366f8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
366fc 3af 1C 36 00 3E 
36700 3b0 63 63 63 63 
36704 3b1 63 63 63 63 
36708 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3670c 3b3 30 18 00 63 
36710 3b4 67 6F 7F 7B 
36714 3b5 73 63 63 63 
36718 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3671c 3b7 00 00 60 30 
36720 3b8 18 00 3B 66 
36724 3b9 66 66 66 66 
36728 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3672c 3bb 00 00 36 1C 
36730 3bc 08 00 3B 66 
36734 3bd 66 66 66 66 
36738 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3673c 3bf 36 1C 00 3E 
36740 3c0 63 63 06 1C 
36744 3c1 30 60 63 63 
36748 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3674c 3c3 00 00 36 1C 
36750 3c4 08 00 3E 63 
36754 3c5 06 1C 30 63 
36758 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3675c 3c7 30 18 00 3F 
36760 3c8 66 66 66 3E 
36764 3c9 36 66 66 66 
36768 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3676c 3cb 30 18 00 63 
36770 3cc 63 63 63 63 
36774 3cd 63 63 63 63 
36778 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3677c 3cf 00 00 60 30 
36780 3d0 18 00 3B 6E 
36784 3d1 66 06 06 06 
36788 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3678c 3d3 66 33 00 63 
36790 3d4 63 63 63 63 
36794 3d5 63 63 63 63 
36798 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3679c 3d7 00 00 60 30 
367a0 3d8 18 00 63 63 
367a4 3d9 63 63 63 63 
367a8 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
367ac 3db 30 18 00 66 
367b0 3dc 66 66 66 3C 
367b4 3dd 18 18 18 18 
367b8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
367bc 3df 00 00 00 08 
367c0 3e0 0C 0C 3F 0C 
367c4 3e1 0C 0C 0C 6C 
367c8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
367cc 3e3 30 18 00 00 
367d0 3e4 00 00 00 00 
367d4 3e5 00 00 00 00 
367d8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
367dc 3e7 00 00 00 00 
367e0 3e8 00 00 00 00 | 	byte	$00[8]
367e4 3e9 7F 00 00 00 
367e8 3ea 00 00 00 00 
367ec 3eb 66 33 00 00 
367f0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
367f4 3ed 00 00 00 00 
367f8 3ee 00 00 00 00 
367fc 3ef 00 00 00 00 
36800 3f0 00 00 00 00 
36804 3f1 00 00 00 00 
36808 3f2 00          | 	byte	$00[21]
36809 3f2 0C 06 3C 36 
3680d 3f3 1C 00 00 00 
36811 3f4 00 00 00 00 
36815 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36819 3f6 00 00 00 63 
3681d 3f7 3E 00 00 00 
36821 3f8 00 00 00 00 
36825 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36829 3fa 00 00 00 00 
3682d 3fb 3E 63 06 1C 
36831 3fc 36 63 63 36 
36835 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
36839 3fe 00 00 00 00 
3683d 3ff 00 00 00 00 | 	byte	$00[8]
36841 400 18 00 7E 00 
36845 401 18 00 00 00 
36849 402 00 00 00 00 
3684d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36851 404 00 00 00 00 
36855 405 00 00 00 00 | 	byte	$00[8]
36859 406 18 30 1E 00 
3685d 407 00 00 1C 36 
36861 408 36 1C 00 00 
36865 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
36869 40a 00 00 00 00 
3686d 40b 63 00 00 00 
36871 40c 00 00 00 00 
36875 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36879 40e 00 00 00 18 
3687d 40f 18 00 00 00 
36881 410 00 00 00 00 
36885 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36889 412 00 00 00 00 
3688d 413 00          | 	byte	$00[5]
3688e 413 CC 66 33 00 
36892 414 33 33 33 33 
36896 415 33 33 6E 00 
3689a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3689e 417 00 3F 66 66 
368a2 418 66 3E 36 66 
368a6 419 66 66 6F 00 
368aa 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
368ae 41b 36 1C 08 00 
368b2 41c 3B 6E 66 06 
368b6 41d 06 06 0F 00 
368ba 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
368be 41f 00 00 00 7E 
368c2 420 7E 7E 7E 7E 
368c6 421 7E 7E 00 00 
368ca 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
368ce 423 00 00 00 00 
368d2 424 00 00 00 00 
368d6 425 00 00 00 00 
368da 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
368dc 427             | 'vga_font       file "vgafont.def"
368dc 427 00 00 00 00 
      ...             
3690c 433 00 00 00 00 
36910 434 00 00 00    | st_font        file "st4font.def"
36913 434 FF FF 00 00 
36917 435 00 00 00 00 
3691b 436 00 18 18 18 
3691f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36923 438 18 18 18 18 
36927 439 18 18 18 18 
3692b 43a 18          | 	byte	$18[9]
3692c 43b 00 00 00 00 
36930 43c 00 00 00    | 	byte	$00[7]
36933 43c FF FF 18 18 
36937 43d 18 18 18 18 
3693b 43e 18 18 18 18 
3693f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36943 440 FF FF 00 00 
36947 441 00 00 00 00 
3694b 442 00 18 18 18 
3694f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36953 444 1F 1F 18 18 
36957 445 18 18 18 18 
3695b 446 18 18 18 18 
3695f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36963 448 F8 F8 18 18 
36967 449 18 18 18 18 
3696b 44a 18 00 00 00 
3696f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36973 44c 1F 1F 18 18 
36977 44d 18 18 18 18 
3697b 44e 18 00 00 00 
3697f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36983 450 F8 F8 18 18 
36987 451 18 18 18 18 
3698b 452 18 18 18 18 
3698f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36993 454 1F 1F 00 00 
36997 455 00 00 00 00 
3699b 456 00 18 18 18 
3699f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
369a3 458 F8 F8 00 00 
369a7 459 00 00 00 00 
369ab 45a 00 18 18 18 
369af 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
369b3 45c FF FF 18 18 
369b7 45d 18 18 18 18 
369bb 45e 18 00 00 18 
369bf 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
369c3 460 66 7E 7E 66 
369c7 461 66 66 66 30 
369cb 462 18 00 00 7E 
369cf 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
369d3 464 3E 06 06 06 
369d7 465 06 7E 7E 18 
369db 466 0C 30 18 3C 
369df 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
369e3 468 06 06 06 66 
369e7 469 66 7E 3C 00 
369eb 46a 00 30 18 66 
369ef 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
369f3 46c 7E 7E 76 76 
369f7 46d 66 66 66 00 
369fb 46e 00 30 18 7C 
369ff 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
36a03 470 1C 38 70 60 
36a07 471 60 7E 3E 00 
36a0b 472 00 30 18 7E 
36a0f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
36a13 474 18 0C 0C 06 
36a17 475 06 7E 7E 00 
36a1b 476 00 18 18 00 
36a1f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
36a23 478 18 18 0C 0C 
36a27 479 06 7E 7E 00 
36a2b 47a 00 30 18 3C 
36a2f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
36a33 47c 66 66 66 66 
36a37 47d 66          | 	byte	$66[5]
36a38 47e 7E 3C 00 00 
36a3c 47f 00 00 06 06 
36a40 480 06 06 16 1E 
36a44 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
36a48 482 7E 7E 00 00 
36a4c 483 00 00 00 00 
36a50 484 00 3C 7C 60 
36a54 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
36a58 486 7E 7C 30 18 
36a5c 487 00 00 00 00 
36a60 488 00 3C 7E 66 
36a64 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
36a68 48a 7E 7C 18 0C 
36a6c 48b 00 00 30 18 
36a70 48c 00 3C 3E 06 
36a74 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
36a78 48e 7E 7C 00 00 
36a7c 48f 00 00 30 18 
36a80 490 00 3E 7E 66 
36a84 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
36a88 492 66 66 00 00 
36a8c 493 00 00 30 18 
36a90 494 00 7C 7E 06 
36a94 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
36a98 496 7E 3E 00 00 
36a9c 497 00 00 30 18 
36aa0 498 00 7E 7E 30 
36aa4 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36aa8 49a 7E 7E 00 00 
36aac 49b 00 00 18 18 
36ab0 49c 00 7E 7E 30 
36ab4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36ab8 49e 7E 7E 00 00 
36abc 49f 00 00 30 18 
36ac0 4a0 00 3C 7E 66 
36ac4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
36ac8 4a2 7E 3C 00 00 
36acc 4a3 00 00 1C 1C 
36ad0 4a4 18 18 38 3C 
36ad4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
36ad8 4a6 3C 3C 00 00 
36adc 4a7 00 00 00 00 
36ae0 4a8 00 00 00 00 
36ae4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ae8 4aa 00 00 00 00 
36aec 4ab 00 00       | 	byte	$00[6]
36aee 4ab 18 18 18 18 
36af2 4ac 18 18 18 18 | 	byte	$18[8]
36af6 4ad 00 00 18 18 
36afa 4ae 00 00 00 00 
36afe 4af 66 66 66 66 
36b02 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
36b06 4b1 00 00 00 00 
36b0a 4b2 00 00 00 00 
36b0e 4b3 00          | 	byte	$00[9]
36b0f 4b3 66 66 FF FF 
36b13 4b4 66 66 FF FF 
36b17 4b5 66 66 00 00 
36b1b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
36b1f 4b7 7C 7E 06 06 
36b23 4b8 3E 7C 60 60 
36b27 4b9 7E 3E 18 18 
36b2b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
36b2f 4bb 66 30 30 18 
36b33 4bc 18 0C 0C 66 
36b37 4bd 66 00 00 00 
36b3b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
36b3f 4bf 66 66 3C 1C 
36b43 4c0 1C FC FE 66 
36b47 4c1 66 FE FC 00 
36b4b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
36b4f 4c3 18 18 18 18 
36b53 4c4 00 00 00 00 
36b57 4c5 00 00 00 00 
36b5b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
36b5f 4c7 18 1C 0C 0C 
36b63 4c8 0C 0C 0C 0C 
36b67 4c9 1C 18 30 00 
36b6b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
36b6f 4cb 18 38 30 30 
36b73 4cc 30 30 30 30 
36b77 4cd 38 18 0C 00 
36b7b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
36b7f 4cf 66 66 3C 3C 
36b83 4d0 FF FF 3C 3C 
36b87 4d1 66 66 00 00 
36b8b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
36b8f 4d3 00 18 18 18 
36b93 4d4 7E 7E 18 18 
36b97 4d5 18 00 00 00 
36b9b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36b9f 4d7 00 00 00 00 
36ba3 4d8 00 00       | 	byte	$00[6]
36ba5 4d9 18 18 18 18 
36ba9 4da 18          | 	byte	$18[5]
36baa 4da 0C 04 00 00 
36bae 4db 00 00 00 00 
36bb2 4dc 7E 7E 00 00 
36bb6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
36bba 4de 00 00 00 00 
36bbe 4df 00 00 00 00 
36bc2 4e0 00 00 00 00 
36bc6 4e1 00          | 	byte	$00[13]
36bc7 4e1 18 18 18 00 
36bcb 4e2 00 00 00 60 
36bcf 4e3 60 60 30 30 
36bd3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
36bd7 4e5 06 06 06 00 
36bdb 4e6 00 00 00 3C 
36bdf 4e7 7E 66 66 66 
36be3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
36be7 4e9 66 7E 3C 00 
36beb 4ea 00 00 00 18 
36bef 4eb 18 1C 1C 18 
36bf3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
36bf7 4ed 18 7E 7E 00 
36bfb 4ee 00 00 00 3C 
36bff 4ef 7E 66 66 30 
36c03 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
36c07 4f1 0C 7E 7E 00 
36c0b 4f2 00 00 00 7E 
36c0f 4f3 7E 30 30 18 
36c13 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
36c17 4f5 66 7E 3C 00 
36c1b 4f6 00 00 00 30 
36c1f 4f7 30 38 38 3C 
36c23 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
36c27 4f9 7E 30 30 00 
36c2b 4fa 00 00 00 7E 
36c2f 4fb 7E 06 06 3E 
36c33 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
36c37 4fd 66 7E 3C 00 
36c3b 4fe 00 00 00 38 
36c3f 4ff 3C 0E 06 06 
36c43 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
36c47 501 66 7E 3C 00 
36c4b 502 00 00 00 7E 
36c4f 503 7E 60 60 30 
36c53 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
36c57 505 0C 0C 0C 00 
36c5b 506 00 00 00 3C 
36c5f 507 7E 66 66 3C 
36c63 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
36c67 509 66 7E 3C 00 
36c6b 50a 00 00 00 3C 
36c6f 50b 7E 66 66 7E 
36c73 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
36c77 50d 70 3C 1C 00 
36c7b 50e 00 00 00 00 
36c7f 50f 00 00 18 18 
36c83 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
36c87 511 18 18 18 00 
36c8b 512 00 00 00 00 
36c8f 513 00 00 18 18 
36c93 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
36c97 515 18 18 18 0C 
36c9b 516 04 00 00 00 
36c9f 517 70 38 1C 0E 
36ca3 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
36ca7 519 70 00 00 00 
36cab 51a 00 00 00 00 
36caf 51b 00 00 7E 7E 
36cb3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
36cb7 51d 00 00 00 00 
36cbb 51e 00 00 00 00 | 	byte	$00[8]
36cbf 51f 0E 1C 38 70 
36cc3 520 E0 70 38 1C 
36cc7 521 0E 00 00 00 
36ccb 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
36ccf 523 7E 66 66 30 
36cd3 524 30 18 18 18 
36cd7 525 00 18 18 00 
36cdb 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
36cdf 527 7E 66 66 66 
36ce3 528 66 36 06 66 
36ce7 529 66 7E 3C 00 
36ceb 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
36cef 52b 3C 7E 66 66 
36cf3 52c 66 7E 7E 66 
36cf7 52d 66 66 66 00 
36cfb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
36cff 52f 7E 66 66 7E 
36d03 530 3E 66 66 66 
36d07 531 66 7E 3E 00 
36d0b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
36d0f 533 7E 66 66 06 
36d13 534 06 06 06 66 
36d17 535 66 7E 3C 00 
36d1b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
36d1f 537 7E 66 66 66 
36d23 538 66 66 66 66 
36d27 539 66 7E 3E 00 
36d2b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
36d2f 53b 7E 06 06 3E 
36d33 53c 3E 06 06 06 
36d37 53d 06 7E 7E 00 
36d3b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
36d3f 53f 7E 06 06 3E 
36d43 540 3E 06 06 06 
36d47 541 06 06 06 00 
36d4b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
36d4f 543 7E 06 06 76 
36d53 544 76 66 66 66 
36d57 545 66 7E 3C 00 
36d5b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
36d5f 547 66 66 66 7E 
36d63 548 7E 66 66 66 
36d67 549 66 66 66 00 
36d6b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
36d6f 54b 7E 18 18 18 
36d73 54c 18 18 18 18 
36d77 54d 18 7E 7E 00 
36d7b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
36d7f 54f 60 60 60 60 
36d83 550 60 60 60    | 	byte	$60[7]
36d86 551 66 66 7E 3C 
36d8a 552 00 00 00 00 
36d8e 553 66 66 36 36 
36d92 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
36d96 555 66 66 C6 C6 
36d9a 556 00 00 00 00 
36d9e 557 06 06 06 06 
36da2 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
36da6 559 06 06 7E 7E 
36daa 55a 00 00 00 00 
36dae 55b C6 C6 EE EE 
36db2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
36db6 55d C6 C6 C6 C6 
36dba 55e 00 00 00 00 
36dbe 55f 66 66 66 6E 
36dc2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
36dc6 561 76 66 66 66 
36dca 562 00 00 00 00 
36dce 563 3C 7E 66 66 
36dd2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
36dd6 565 66 66 7E 3C 
36dda 566 00 00 00 00 
36dde 567 3E 7E 66 66 
36de2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
36de6 569 06 06 06 06 
36dea 56a 00 00 00 00 
36dee 56b 3C 7E 66 66 
36df2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
36df6 56d 66 56 3E 6C 
36dfa 56e 00 00 00 00 
36dfe 56f 3E 7E 66 66 
36e02 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
36e06 571 66 66 C6 C6 
36e0a 572 00 00 00 00 
36e0e 573 7C 7E 06 06 
36e12 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
36e16 575 60 60 7E 3E 
36e1a 576 00 00 00 00 
36e1e 577 7E 7E 18 18 
36e22 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
36e26 579 18 18 18 18 
36e2a 57a 00 00 00 00 
36e2e 57b 66 66 66 66 
36e32 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
36e36 57d 66 66 7E 3C 
36e3a 57e 00 00 00 00 
36e3e 57f 66 66 66 66 
36e42 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
36e46 581 3C 3C 18 18 
36e4a 582 00 00 00 00 
36e4e 583 C6 C6 C6 C6 
36e52 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
36e56 585 FE EE C6 82 
36e5a 586 00 00 00 00 
36e5e 587 66 66 66 3C 
36e62 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
36e66 589 3C 66 66 66 
36e6a 58a 00 00 00 00 
36e6e 58b 66 66 66 66 
36e72 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
36e76 58d 18 18 18 18 
36e7a 58e 00 00 00 00 
36e7e 58f 7E 7E 30 30 
36e82 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
36e86 591 06 06 7E 7E 
36e8a 592 00 00 00 00 
36e8e 593 3C 3C 0C 0C 
36e92 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
36e96 595 0C 0C 3C 3C 
36e9a 596 00 00 00 00 
36e9e 597 06 06 0C 0C 
36ea2 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
36ea6 599 60 60 C0 C0 
36eaa 59a 00 00 00 00 
36eae 59b 3C 3C 30 30 
36eb2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
36eb6 59d 30 30 3C 3C 
36eba 59e 00 00 00 00 
36ebe 59f 18 18 3C 3C 
36ec2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
36ec6 5a1 00 00 00 00 
36eca 5a2 00 00 00 00 
36ece 5a3 00 00 00 00 
36ed2 5a4 00 00 00 00 
36ed6 5a5 00 00       | 	byte	$00[18]
36ed8 5a6 FE FE 00 00 
36edc 5a7 00 00 0C 0C 
36ee0 5a8 18 18 00 00 
36ee4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
36ee8 5aa 00 00 00 00 
36eec 5ab 00 00 00 00 
36ef0 5ac 00          | 	byte	$00[9]
36ef1 5ac 3C 7C 60 7C 
36ef5 5ad 7E 66 66 7E 
36ef9 5ae 7C 00 00 00 
36efd 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
36f01 5b0 3E 7E 66 66 
36f05 5b1 66 66 66 7E 
36f09 5b2 3E 00 00 00 
36f0d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
36f11 5b4 3C 3E 06 06 
36f15 5b5 06 06 06 7E 
36f19 5b6 7C 00 00 00 
36f1d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
36f21 5b8 7C 7E 66 66 
36f25 5b9 66 66 66 7E 
36f29 5ba 7C 00 00 00 
36f2d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
36f31 5bc 3C 7E 66 66 
36f35 5bd 7E 06 06 7E 
36f39 5be 7C 00 00 00 
36f3d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
36f41 5c0 18 7E 7E 18 
36f45 5c1 18 18 18 18 
36f49 5c2 18 00 00 00 
36f4d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36f51 5c4 7C 7E 66 66 
36f55 5c5 66 66 7E 7C 
36f59 5c6 60 7E 3E 00 
36f5d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
36f61 5c8 3E 7E 66 66 
36f65 5c9 66 66 66 66 
36f69 5ca 66 00 00 00 
36f6d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
36f71 5cc 1C 1C 18 18 
36f75 5cd 18 18 18 3C 
36f79 5ce 3C 00 00 00 
36f7d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
36f81 5d0 30 30 30 30 
36f85 5d1 30 30 30 30 
36f89 5d2 30          | 	byte	$30[9]
36f8a 5d2 3E 1E 00 00 
36f8e 5d3 06 06 06 36 
36f92 5d4 36 1E 1E 1E 
36f96 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
36f9a 5d6 00 00 00 00 
36f9e 5d7 1C 1C 18 18 
36fa2 5d8 18 18 18 18 
36fa6 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
36faa 5da 00 00 00 00 
36fae 5db 00 00 00    | 	byte	$00[7]
36fb1 5dc 6C FE FE D6 
36fb5 5dd D6 C6 C6 C6 
36fb9 5de C6 00 00 00 
36fbd 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
36fc1 5e0 3E 7E 66 66 
36fc5 5e1 66 66 66 66 
36fc9 5e2 66 00 00 00 
36fcd 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
36fd1 5e4 3C 7E 66 66 
36fd5 5e5 66 66 66 7E 
36fd9 5e6 3C 00 00 00 
36fdd 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
36fe1 5e8 3E 7E 66 66 
36fe5 5e9 66 66 66 7E 
36fe9 5ea 3E 06 06 00 
36fed 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
36ff1 5ec 7C 7E 66 66 
36ff5 5ed 66 66 66 7E 
36ff9 5ee 7C 60 60 00 
36ffd 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
37001 5f0 3E 7E 66 06 
37005 5f1 06 06 06 06 
37009 5f2 06 00 00 00 
3700d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
37011 5f4 7C 7E 06 0E 
37015 5f5 3C 70 60 7E 
37019 5f6 3E 00 00 00 
3701d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
37021 5f8 7E 7E 18 18 
37025 5f9 18 18 18 78 
37029 5fa 70 00 00 00 
3702d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
37031 5fc 66 66 66 66 
37035 5fd 66 66 66    | 	byte	$66[7]
37038 5fe 7E 7C 00 00 
3703c 5ff 00 00 00 00 
37040 600 00 66 66 66 
37044 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
37048 602 18 18 00 00 
3704c 603 00 00 00 00 
37050 604 00 C6 C6 D6 
37054 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
37058 606 C6 82 00 00 
3705c 607 00 00 00 00 
37060 608 00 66 66 3C 
37064 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
37068 60a 66 66 00 00 
3706c 60b 00 00 00 00 
37070 60c 00 66 66 66 
37074 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
37078 60e 7C 60 7E 3E 
3707c 60f 00 00 00 00 
37080 610 00 7E 7E 30 
37084 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37088 612 7E 7E 00 00 
3708c 613 00 00 30 18 
37090 614 18 18 18 0C 
37094 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
37098 616 18 30 00 00 
3709c 617 00 00 18 18 
370a0 618 18 18 18 18 
370a4 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
370a8 61a 18 18 00 00 
370ac 61b 00 00 0C 18 
370b0 61c 18 18 18 30 
370b4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
370b8 61e 18 0C 00 00 
370bc 61f 00 00 6C 7E 
370c0 620 36 00 00 00 
370c4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
370c8 622 00 00 00 00 
370cc 623 00 00 00 00 
370d0 624 00          | 	byte	$00[9]
370d1 624 18 18 18 18 
370d5 625 18 18 00 00 
370d9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
370dc 627             | 'amiga_font     file "amigafont.def"
370dc 627 00 6C FE FE 
370e0 628 7C 38 10 00 
370e4 629 18 18 18 F8 
370e8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
370ec 62b C0 C0 C0 C0 
370f0 62c C0 C0 C0 C0 | 	byte	$c0[8]
370f4 62d 18 18 18 1F 
370f8 62e 1F 00 00 00 
370fc 62f 18 18 18 1F 
37100 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
37104 631 00 00 00 1F 
37108 632 1F 18 18 18 
3710c 633 C0 E0 70 38 
37110 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
37114 635 03 07 0E 1C 
37118 636 38 70 E0 C0 
3711c 637 80 C0 E0 F0 
37120 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
37124 639 00 00 00 00 
37128 63a F0 F0 F0 F0 
3712c 63b 01 03 07 0F 
37130 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
37134 63d F0 F0 F0 F0 
37138 63e 00 00 00 00 
3713c 63f 0F 0F 0F 0F 
37140 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
37144 641 FF FF 00 00 
37148 642 00 00 00 00 
3714c 643 00 00 00 00 
37150 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
37154 645 00 00 00 00 
37158 646 0F 0F 0F 0F 
3715c 647 00 38 38 EE 
37160 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
37164 649 00 00 00 F8 
37168 64a F8 18 18 18 
3716c 64b 00 00 00 FF 
37170 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
37174 64d 18 18 18 FF 
37178 64e FF 18 18 18 
3717c 64f 00 00 3C 7E 
37180 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
37184 651 00 00 00 00 
37188 652 FF FF FF FF 
3718c 653 03 03 03 03 
37190 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
37194 655 00 00 00 FF 
37198 656 FF 18 18 18 
3719c 657 18 18 18 FF 
371a0 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
371a4 659 0F 0F 0F 0F 
371a8 65a 0F 0F 0F 0F | 	byte	$0f[8]
371ac 65b 18 18 18 F8 
371b0 65c F8 00 00 00 
371b4 65d 1E 06 1E 06 
371b8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
371bc 65f 00 18 3C 7E 
371c0 660 18 18 18 00 
371c4 661 00 18 18 18 
371c8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
371cc 663 00 18 0C 7E 
371d0 664 0C 18 00 00 
371d4 665 00 18 30 7E 
371d8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
371dc 667 00 00 00 00 
371e0 668 00 00 00 00 
371e4 669 00          | 	byte	$00[9]
371e5 669 18 18 18 18 
371e9 66a 00 18 00 00 
371ed 66b 66 66 66 00 
371f1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
371f5 66d 66 FF 66 66 
371f9 66e FF 66 00 18 
371fd 66f 7C 06 3C 60 
37201 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
37205 671 66 36 18 0C 
37209 672 66 62 00 38 
3720d 673 6C 38 1C F6 
37211 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
37215 675 18 18 18 00 
37219 676 00 00 00 00 
3721d 677 70 38 18 18 
37221 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
37225 679 0E 1C 18 18 
37229 67a 1C 0E 00 00 
3722d 67b 66 3C FF 3C 
37231 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
37235 67d 18 18 7E 18 
37239 67e 18 00 00 00 
3723d 67f 00 00 00 00 
37241 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
37245 681 00 00 7E 00 
37249 682 00 00 00 00 
3724d 683 00 00 00 00 
37251 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
37255 685 60 30 18 0C 
37259 686 06 02 00 00 
3725d 687 3C 66 76 6E 
37261 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
37265 689 18 1C 18 18 
37269 68a 18 7E 00 00 
3726d 68b 3C 66 30 18 
37271 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
37275 68d 7E 30 18 30 
37279 68e 66 3C 00 00 
3727d 68f 30 38 3C 36 
37281 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
37285 691 7E 06 3E 60 
37289 692 66 3C 00 00 
3728d 693 3C 06 3E 66 
37291 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
37295 695 7E 60 30 18 
37299 696 0C 0C 00 00 
3729d 697 3C 66 3C 66 
372a1 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
372a5 699 3C 66 7C 60 
372a9 69a 30 1C 00 00 
372ad 69b 00 18 18 00 
372b1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
372b5 69d 00 18 18 00 
372b9 69e 18 18 0C 60 
372bd 69f 30 18 0C 18 
372c1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
372c5 6a1 00 7E 00 00 
372c9 6a2 7E 00 00 06 
372cd 6a3 0C 18 30 18 
372d1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
372d5 6a5 3C 66 30 18 
372d9 6a6 00 18 00 00 
372dd 6a7 3C 66 76 76 
372e1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
372e5 6a9 18 3C 66 66 
372e9 6aa 7E 66 00 00 
372ed 6ab 3E 66 3E 66 
372f1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
372f5 6ad 3C 66 06 06 
372f9 6ae 66 3C 00 00 
372fd 6af 1E 36 66 66 
37301 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
37305 6b1 7E 06 3E 06 
37309 6b2 06 7E 00 00 
3730d 6b3 7E 06 3E 06 
37311 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
37315 6b5 7C 06 06 76 
37319 6b6 66 7C 00 00 
3731d 6b7 66 66 7E 66 
37321 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
37325 6b9 7E 18 18 18 
37329 6ba 18 7E 00 00 
3732d 6bb 60 60 60 60 
37331 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
37335 6bd 66 36 1E 1E 
37339 6be 36 66 00 00 
3733d 6bf 06 06 06 06 
37341 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
37345 6c1 C6 EE FE D6 
37349 6c2 C6 C6 00 00 
3734d 6c3 66 6E 7E 7E 
37351 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
37355 6c5 3C 66 66 66 
37359 6c6 66 3C 00 00 
3735d 6c7 3E 66 66 3E 
37361 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
37365 6c9 3C 66 66 66 
37369 6ca 36 6C 00 00 
3736d 6cb 3E 66 66 3E 
37371 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
37375 6cd 3C 06 3C 60 
37379 6ce 60 3C 00 00 
3737d 6cf 7E 18 18 18 
37381 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
37385 6d1 66 66 66 66 
37389 6d2 66          | 	byte	$66[5]
3738a 6d2 7E 00 00 66 
3738e 6d3 66 66 66 3C 
37392 6d4 18 00 00 C6 
37396 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3739a 6d6 C6 00 00 66 
3739e 6d7 66 3C 3C 66 
373a2 6d8 66 00 00 66 
373a6 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
373aa 6da 18 00 00 7E 
373ae 6db 30 18 0C 06 
373b2 6dc 7E 00 00 78 
373b6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
373ba 6de 78 00 00 02 
373be 6df 06 0C 18 30 
373c2 6e0 60 00 00 1E 
373c6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
373ca 6e2 1E 00 00 10 
373ce 6e3 38 6C C6 00 
373d2 6e4 00 00 00 00 
373d6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
373da 6e6 FF 00 00 18 
373de 6e7 3C 7E 7E 3C 
373e2 6e8 18 00 00 00 
373e6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
373ea 6ea 7C 00 00 06 
373ee 6eb 06 3E 66 66 
373f2 6ec 3E 00 00 00 
373f6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
373fa 6ee 3C 00 00 60 
373fe 6ef 60 7C 66 66 
37402 6f0 7C 00 00 00 
37406 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3740a 6f2 3C 00 00 70 
3740e 6f3 18 7C 18 18 
37412 6f4 18 00 00 00 
37416 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3741a 6f6 60 3E 00 06 
3741e 6f7 06 3E 66 66 
37422 6f8 66 00 00 18 
37426 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3742a 6fa 3C 00 00 60 
3742e 6fb 00 60 60 60 
37432 6fc 60 3C 00 06 
37436 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3743a 6fe 66 00 00 1C 
3743e 6ff 18 18 18 18 
37442 700 3C 00 00 00 
37446 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3744a 702 C6 00 00 00 
3744e 703 3E 66 66 66 
37452 704 66 00 00 00 
37456 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3745a 706 3C 00 00 00 
3745e 707 3E 66 66 3E 
37462 708 06 06 00 00 
37466 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3746a 70a 60 60 00 00 
3746e 70b 3E 66 06 06 
37472 70c 06 00 00 00 
37476 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3747a 70e 3E 00 00 18 
3747e 70f 7E 18 18 18 
37482 710 70 00 00 00 
37486 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3748a 712 7C 00 00 00 
3748e 713 66 66 66 3C 
37492 714 18 00 00 00 
37496 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3749a 716 6C 00 00 00 
3749e 717 66 3C 18 3C 
374a2 718 66 00 00 00 
374a6 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
374aa 71a 30 1E 00 00 
374ae 71b 7E 30 18 0C 
374b2 71c 7E 00 00 18 
374b6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
374ba 71e 3C 00 18 18 
374be 71f 18 18 18 18 
374c2 720 18 18 00 7E 
374c6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
374ca 722 60 00 10 18 
374ce 723 1C 1E 1C 18 
374d2 724 10 00 08 18 
374d6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
374da 726 08 00       | 	byte	$08, $00
374dc 727 00 00 00 00 
374e0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
374e1 728 80 00 00 00 
374e5 729 00 80 00 00 
374e9 72a 80 80 00 00 
374ed 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
374f1 72c 80 00 80 00 
374f5 72d 00 40 80 00 
374f9 72e AA AA AA 00 
374fd 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
37501 730 FF 00 00 00 
37505 731 00 FF 00 00 
37509 732 FF FF 00 00 
3750d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
37511 734 FF 00 FF 00 
37515 735 00 FF FF 00 
37519 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3751c 737 00 00 00 00 
37520 738 00          | ataripalette   file "ataripalettep2.def"
37521 738 11 11 11 00 
37525 739 22 22 22 00 
37529 73a 33 33 33 00 
3752d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
37531 73c 55 55 55 00 
37535 73d 66 66 66 00 
37539 73e 77 77 77 00 
3753d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
37541 740 99 99 99 00 
37545 741 AA AA AA 00 
37549 742 BB BB BB 00 
3754d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
37551 744 DD DD DD 00 
37555 745 EE EE EE 00 
37559 746 FF FF FF 00 
3755d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
37561 748 00 14 40 00 
37565 749 00 1E 60 00 
37569 74a 00 28 80 00 
3756d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
37571 74c 00 3C BF 00 
37575 74d 00 46 DF 00 
37579 74e 00 50 FF 00 
3757d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
37581 750 39 77 FF 00 
37585 751 55 8A FF 00 
37589 752 71 9E FF 00 
3758d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
37591 754 AA C5 FF 00 
37595 755 C6 D8 FF 00 
37599 756 E3 EC FF 00 
3759d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
375a1 758 00 00 40 00 
375a5 759 00 00 60 00 
375a9 75a 00 00 80 00 
375ad 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
375b1 75c 00 00 BF 00 
375b5 75d 00 00 DF 00 
375b9 75e 00 00 FF 00 
375bd 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
375c1 760 39 39 FF 00 
375c5 761 55 55 FF 00 
375c9 762 71 71 FF 00 
375cd 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
375d1 764 AA AA FF 00 
375d5 765 C6 C6 FF 00 
375d9 766 E3 E3 FF 00 
375dd 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
375e1 768 20 00 40 00 
375e5 769 30 00 60 00 
375e9 76a 40 00 80 00 
375ed 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
375f1 76c 60 00 BF 00 
375f5 76d 70 00 DF 00 
375f9 76e 80 00 FF 00 
375fd 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
37601 770 9C 39 FF 00 
37605 771 AA 55 FF 00 
37609 772 B8 71 FF 00 
3760d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
37611 774 D5 AA FF 00 
37615 775 E3 C6 FF 00 
37619 776 F1 E3 FF 00 
3761d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
37621 778 40 00 40 00 
37625 779 60 00 60 00 
37629 77a 80 00 80 00 
3762d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
37631 77c BF 00 BF 00 
37635 77d DF 00 DF 00 
37639 77e FF 00 FF 00 
3763d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
37641 780 FF 39 FF 00 
37645 781 FF 55 FF 00 
37649 782 FF 71 FF 00 
3764d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
37651 784 FF AA FF 00 
37655 785 FF C6 FF 00 
37659 786 FF E3 FF 00 
3765d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
37661 788 40 00 20 00 
37665 789 60 00 30 00 
37669 78a 80 00 40 00 
3766d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
37671 78c BF 00 60 00 
37675 78d DF 00 70 00 
37679 78e FF 00 80 00 
3767d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
37681 790 FF 39 9C 00 
37685 791 FF 55 AA 00 
37689 792 FF 71 B8 00 
3768d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
37691 794 FF AA D5 00 
37695 795 FF C6 E3 00 
37699 796 FF E3 F1 00 
3769d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
376a1 798 40 00 00 00 
376a5 799 60 00 00 00 
376a9 79a 80 00 00 00 
376ad 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
376b1 79c BF 00 00 00 
376b5 79d DF 00 00 00 
376b9 79e FF 00 00 00 
376bd 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
376c1 7a0 FF 39 39 00 
376c5 7a1 FF 55 55 00 
376c9 7a2 FF 71 71 00 
376cd 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
376d1 7a4 FF AA AA 00 
376d5 7a5 FF C6 C6 00 
376d9 7a6 FF E3 E3 00 
376dd 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
376e1 7a8 40 10 00 00 
376e5 7a9 60 18 00 00 
376e9 7aa 80 20 00 00 
376ed 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
376f1 7ac BF 30 00 00 
376f5 7ad DF 38 00 00 
376f9 7ae FF 40 00 00 
376fd 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
37701 7b0 FF 6A 39 00 
37705 7b1 FF 80 55 00 
37709 7b2 FF 95 71 00 
3770d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
37711 7b4 FF BF AA 00 
37715 7b5 FF D5 C6 00 
37719 7b6 FF EA E3 00 
3771d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
37721 7b8 40 20 00 00 
37725 7b9 60 30 00 00 
37729 7ba 80 40 00 00 
3772d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
37731 7bc BF 60 00 00 
37735 7bd DF 70 00 00 
37739 7be FF 80 00 00 
3773d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
37741 7c0 FF 9C 39 00 
37745 7c1 FF AA 55 00 
37749 7c2 FF B8 71 00 
3774d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
37751 7c4 FF D5 AA 00 
37755 7c5 FF E3 C6 00 
37759 7c6 FF F1 E3 00 
3775d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
37761 7c8 40 30 00 00 
37765 7c9 60 48 00 00 
37769 7ca 80 60 00 00 
3776d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
37771 7cc BF 90 00 00 
37775 7cd DF A8 00 00 
37779 7ce FF C0 00 00 
3777d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
37781 7d0 FF CE 39 00 
37785 7d1 FF D5 55 00 
37789 7d2 FF DC 71 00 
3778d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
37791 7d4 FF EA AA 00 
37795 7d5 FF F1 C6 00 
37799 7d6 FF F8 E3 00 
3779d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
377a1 7d8 30 40 00 00 
377a5 7d9 48 60 00 00 
377a9 7da 60 80 00 00 
377ad 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
377b1 7dc 90 BF 00 00 
377b5 7dd A8 DF 00 00 
377b9 7de C0 FF 00 00 
377bd 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
377c1 7e0 CE FF 39 00 
377c5 7e1 D5 FF 55 00 
377c9 7e2 DC FF 71 00 
377cd 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
377d1 7e4 EA FF AA 00 
377d5 7e5 F1 FF C6 00 
377d9 7e6 F8 FF E3 00 
377dd 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
377e1 7e8 00 40 00 00 
377e5 7e9 00 60 00 00 
377e9 7ea 00 80 00 00 
377ed 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
377f1 7ec 00 BF 00 00 
377f5 7ed 00 DF 00 00 
377f9 7ee 00 FF 00 00 
377fd 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
37801 7f0 39 FF 39 00 
37805 7f1 55 FF 55 00 
37809 7f2 71 FF 71 00 
3780d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
37811 7f4 AA FF AA 00 
37815 7f5 C6 FF C6 00 
37819 7f6 E3 FF E3 00 
3781d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
37821 7f8 00 40 14 00 
37825 7f9 00 60 1E 00 
37829 7fa 00 80 28 00 
3782d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
37831 7fc 00 BF 3C 00 
37835 7fd 00 DF 46 00 
37839 7fe 00 FF 50 00 
3783d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
37841 800 39 FF 77 00 
37845 801 55 FF 8A 00 
37849 802 71 FF 9E 00 
3784d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
37851 804 AA FF C5 00 
37855 805 C6 FF D8 00 
37859 806 E3 FF EC 00 
3785d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
37861 808 00 40 28 00 
37865 809 00 60 3C 00 
37869 80a 00 80 50 00 
3786d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
37871 80c 00 BF 78 00 
37875 80d 00 DF 8C 00 
37879 80e 00 FF A0 00 
3787d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
37881 810 39 FF B5 00 
37885 811 55 FF C0 00 
37889 812 71 FF CA 00 
3788d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
37891 814 AA FF DF 00 
37895 815 C6 FF EA 00 
37899 816 E3 FF F4 00 
3789d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
378a1 818 00 40 40 00 
378a5 819 00 60 60 00 
378a9 81a 00 80 80 00 
378ad 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
378b1 81c 00 BF BF 00 
378b5 81d 00 DF DF 00 
378b9 81e 00 FF FF 00 
378bd 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
378c1 820 39 FF FF 00 
378c5 821 55 FF FF 00 
378c9 822 71 FF FF 00 
378cd 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
378d1 824 AA FF FF 00 
378d5 825 C6 FF FF 00 
378d9 826 E3 FF FF 00 
378dd 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
378e1 828 00 28 40 00 
378e5 829 00 3C 60 00 
378e9 82a 00 50 80 00 
378ed 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
378f1 82c 00 78 BF 00 
378f5 82d 00 8C DF 00 
378f9 82e 00 A0 FF 00 
378fd 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
37901 830 39 B5 FF 00 
37905 831 55 C0 FF 00 
37909 832 71 CA FF 00 
3790d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
37911 834 AA DF FF 00 
37915 835 C6 EA FF 00 
37919 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3791c 837             | 
3791c 837             | '**********************************************************************************
3791c 837             | '
3791c 837             | '        Timings and colors definitions
3791c 837             | '
3791c 837             | '**********************************************************************************
3791c 837             | 
3791c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3791c 837 08 00 00 00 
37920 838 3C 00 00 00 
37924 839 08 00 00 00 
37928 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3792c 83b 07 00 00 00 
37930 83c 04 00 00 00 
37934 83d 01 00 00 00 
37938 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3793c 83f 58 02 00 00 
37940 840 20 9E 4B 14 
37944 841 FB A8 9E 01 
37948 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3794c 843 00 00 00 00 
37950 844 C0 00 00 00 
37954 845 00 00 00 00 
37958 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3795c 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3795c 847 00 75 C7 97 
37960 848 27 47 F6 0A 
37964 849 05 79 CB 9B 
37968 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3796c 84b             | 
3796c 84b             | ''--------  Initialization  ----------------------------------------------------------------
3796c 84b             | 
3796c 84b 28 0C 64 FD | hdmi            setq    #6
37970 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
37974 84d 28 10 64 FD |                 setq    #8
37978 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3797c 84f             | 
3797c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
37980 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
37984 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
37988 852 D6 C6 01 F1 |                 add     t1,hbase
3798c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
37990 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
37994 855 7B 0B 80 5F 
37998 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3799c 857 66 66 86 FF 
379a0 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
379a4 859             | '
379a4 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
379a8 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
379ac 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
379b0 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
379b4 85d             | 
379b4 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
379b8 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
379bc 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
379c0 860             | 
379c0 860             | ''--------  frame rendering main loop  ---------------------------------------------------
379c0 860             | 
379c0 860 28 06 64 FD | p101            setq 	#3
379c4 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
379c8 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
379cc 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
379d0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
379d4 865 00 A0 05 F6 |                 mov     dlinum, #0
379d8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
379dc 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
379e0 868             | 
379e0 868             | 
379e0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
379e4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
379e8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
379ec 86b             |                 
379ec 86b             | 
379ec 86b             | 
379ec 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
379ec 86b             |   
379ec 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
379f0 86c 29 FE 65 3D |          if_nc  setq2   #255
379f4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
379f8 86e             | 
379f8 86e             | '' -----   up porch (before the picture)
379f8 86e             | 
379f8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
379fc 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
37a00 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
37a04 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
37a08 872             |  
37a08 872             |    
37a08 872             |  
37a08 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
37a0c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
37a10 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
37a14 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
37a18 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
37a1c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
37a20 878             | 
37a20 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
37a24 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
37a28 87a 48 00 B0 FD | 		call    #dli
37a2c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
37a30 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
37a34 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
37a38 87e             |                 	
37a38 87e             |                 
37a38 87e             | 
37a38 87e             |  
37a38 87e             | '' ------- the main screen drawing starts here
37a38 87e             | 
37a38 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
37a3c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
37a40 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
37a44 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
37a48 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
37a4c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
37a50 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
37a54 885             |               
37a54 885             | 
37a54 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
37a58 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
37a5c 887             | 
37a5c 887             | ' ---------------- All visible lines displayed now, start vblank  
37a5c 887             | 
37a5c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
37a60 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
37a64 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
37a68 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
37a6c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
37a70 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
37a74 88d             | 
37a74 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
37a74 88d             | 
37a74 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
37a74 88d             | 
37a74 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
37a78 88e             | 
37a78 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
37a7c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
37a80 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
37a84 891             | 
37a84 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
37a88 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
37a8c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
37a90 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
37a94 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
37a98 896             | 
37a98 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
37a9c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
37aa0 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
37aa4 899 70 00 90 AD |     if_z        jmp     #preload
37aa8 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
37aac 89b 94 00 90 AD |     if_z        jmp     #preload2
37ab0 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
37ab4 89d 0C 00 90 AD |     if_z        jmp     #p390
37ab8 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
37abc 89f 28 00 90 AD |     if_z        jmp     #p391  
37ac0 8a0             | 
37ac0 8a0 2D 00 64 FD | p308            ret
37ac4 8a1             |    
37ac4 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
37ac8 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
37acc 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
37ad0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
37ad4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
37ad8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
37adc 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
37ae0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
37ae4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
37ae8 8aa             |  
37ae8 8aa             | '' --------  Reload palette. To do 
37ae8 8aa             | 
37ae8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
37aec 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
37af0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
37af4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
37af8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
37afc 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
37b00 8b0 70 FF 9F FD |         	jmp     #dli                
37b04 8b1             |       
37b04 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
37b04 8b1             | 
37b04 8b1             | 
37b04 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
37b04 8b1             | 
37b04 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
37b08 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
37b0c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
37b10 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
37b14 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
37b18 8b6             |         
37b18 8b6             | '' -------------- Preload a line from PSRAM        
37b18 8b6             |         
37b18 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
37b1c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
37b20 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
37b24 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
37b28 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
37b2c 8bb             | 
37b2c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
37b30 8bc 32 B7 01 F6 |                 mov     buf2,a1024
37b34 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
37b38 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
37b3c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
37b40 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
37b44 8c1             |  
37b44 8c1             |  
37b44 8c1             | preload2      '  incmod  dlinum,#3
37b44 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
37b48 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
37b4c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
37b50 8c4 28 02 64 FD |                 setq	#1
37b54 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
37b58 8c6             |                 
37b58 8c6             | 
37b58 8c6             | '' -------------- Draw sprites
37b58 8c6             | 
37b58 8c6 CF 5C 02 F6 | sprite          mov t8,frames
37b5c 8c7 10 5C 0E F5 | 		and t8,#16 wz
37b60 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
37b64 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
37b68 8ca             | 		
37b68 8ca             | 
37b68 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
37b6c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
37b70 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
37b74 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
37b78 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
37b7c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
37b80 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
37b84 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
37b88 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
37b8c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
37b90 8d4 01 52 86 F1 |                 sub     sprite_h,#1
37b94 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
37b98 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
37b9c 8d7             | 
37b9c 8d7             | 
37b9c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
37ba0 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
37ba4 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
37ba8 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
37bac 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
37bb0 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
37bb4 8dd 00 5E 06 F6 |                 mov 	t9,#0
37bb8 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
37bbc 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
37bc0 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
37bc4 8e1             |      
37bc4 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
37bc8 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
37bcc 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
37bd0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
37bd4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
37bd8 8e6             |                 
37bd8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
37bdc 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
37be0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
37be4 8e9             |   		
37be4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
37be8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
37bec 8eb             | 
37bec 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
37bf0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
37bf4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
37bf8 8ee             |  
37bf8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
37bfc 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
37c00 8f0 10 00 90 CD |      if_c 	jmp     #p899		
37c04 8f1             | 	
37c04 8f1             | 	
37c04 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
37c08 8f2 28 CD 01 F1 | 		add	t4,sprite_w
37c0c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
37c10 8f4             | 
37c10 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
37c14 8f5             | 
37c14 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
37c18 8f6 01 58 86 F1 | 	 	sub     t6,#1
37c1c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
37c20 8f8             | 
37c20 8f8 28 58 62 FD |                 setq   	t6
37c24 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
37c28 8fa 28 5D 02 F6 |                 mov t8,sprite_w
37c2c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
37c30 8fc 24 00 90 AD |         if_z    jmp #p898
37c34 8fd             |          
37c34 8fd             |         
37c34 8fd 70 5F 06 F6 |                 mov  t9,#368
37c38 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
37c3c 8ff             | 
37c3c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
37c40 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
37c44 901 FF FF 7F FF 
37c48 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
37c4c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
37c50 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
37c54 905 2D 01 00 F5 |                 and 0-0, t7
37c58 906             |                
37c58 906             | 
37c58 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
37c5c 907 E5 E0 7A FA |                 wmlong 368,t3				
37c60 908             |                 
37c60 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
37c64 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
37c68 90a 2D 00 64 FD |                 ret
37c6c 90b             | 	
37c6c 90b             | 	
37c6c 90b             |                
37c6c 90b             |  
37c6c 90b             | '' -------------- Graphics line ------------------------------------------------------------
37c6c 90b             |  
37c6c 90b             | 
37c6c 90b             | '' consts and vars
37c6c 90b             | 
37c6c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
37c70 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
37c74 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
37c78 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
37c7c 90f             | 
37c7c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
37c80 910             | 
37c80 910             | '------ these longs will be set by setmode function
37c80 910             | 
37c80 910 00 00 00 00 | m_bs            long    0        'blanks before sync
37c84 911 00 00 00 00 | m_sn            long    0        'sync
37c88 912 00 00 00 00 | m_bv            long    0        'blanks before visible
37c8c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
37c90 914             | 'm_border        long    0        'left/right borders
37c90 914 00 00 00 00 | i_upporch       long    0        'up porch lines
37c94 915 00 00 00 00 | i_vsync         long    0        'vsync lines
37c98 916 00 00 00 00 | i_downporch     long    0        'down porch lines
37c9c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
37ca0 918 00 00 00 00 | i_totalvis      long    0
37ca4 919             | 
37ca4 919             | '-------------------------------------
37ca4 919             |  
37ca4 919 00 00 00 00 | linenum         long    0
37ca8 91a 00 00 00 00 | frames          long    0
37cac 91b 00 00 00 00 | dlinum long 0
37cb0 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
37cb4 91d             | 
37cb4 91d 00 00 00 00 | vblankptr       long    0
37cb8 91e 00 00 00 00 | modeptr         long    0
37cbc 91f 00 00 00 00 | paletteptr      long    0
37cc0 920 00 00 00 00 | dlptr           long    0
37cc4 921 01 00 00 00 | hbase           long    1
37cc8 922 00 00 00 00 | mailbox         long    0
37ccc 923 00 00 00 00 | spriteptr          long 0
37cd0 924             | 
37cd0 924 00 00 00 00 | cmd             long    0
37cd4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
37cd8 926 00 04 00 00 | buf2            long    1024
37cdc 927 01 00 00 00 | dlptr2          long    1
37ce0 928 01 00 00 00 | dl              long    1
37ce4 929             | 
37ce4 929 00 00 00 00 | buf1c long 0
37ce8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
37cec 92b 01 00 00 00 | framebuf2       long    1
37cf0 92c 01 00 00 00 | hsync0          long    1
37cf4 92d 01 00 00 00 | hsync1          long    1
37cf8 92e             | 
37cf8 92e 01 00 00 00 | t1              long    1
37cfc 92f 00 00 00 00 | t2 long 0
37d00 930 00 00 00 00 | t3 long 0
37d04 931 00 00 00 00 | t4 long 0
37d08 932             | 
37d08 932 00 00 00 00 | rcnt            long    0  'dl repeat count
37d0c 933 00 00 00 00 | rcnt2           long    0
37d10 934 00 00 00 00 | rcnt2a          long    0
37d14 935 00 00 00 00 | roffset         long    0
37d18 936 00 00 00 00 | rdl             long    0  'dl repeat line
37d1c 937 00 00 00 00 | dlc             long    0  'dl command
37d20 938             | 
37d20 938 FF FF FF FF | affffffff       long    $ffffffff
37d24 939 00 00 00 00 | sprite1pointer long 0
37d28 93a 00 00 00 00 | sprite1xy      long 0
37d2c 93b 00 00 00 00 | sprite1wh      long 0
37d30 93c 00 00 00 00 | sprite2pointer long 0
37d34 93d 00 00 00 00 | sprite2xy      long 0
37d38 93e 00 00 00 00 | sprite2wh      long 0
37d3c 93f 00 00 00 00 | sprite3pointer long 0
37d40 940 00 00 00 00 | sprite3xy      long 0
37d44 941 00 00 00 00 | sprite3wh      long 0
37d48 942 00 00 00 00 | sprite4pointer long 0
37d4c 943 00 00 00 00 | sprite4xy      long 0
37d50 944 00 00 00 00 | sprite4wh      long 0
37d54 945 00 00 00 00 | sprite5pointer long 0
37d58 946 00 00 00 00 | sprite5xy      long 0
37d5c 947 00 00 00 00 | sprite5wh      long 0
37d60 948 00 00 00 00 | sprite6pointer long 0
37d64 949 00 00 00 00 | sprite6xy      long 0
37d68 94a 00 00 00 00 | sprite6wh      long 0
37d6c 94b 00 00 00 00 | sprite7pointer long 0
37d70 94c 00 00 00 00 | sprite7xy      long 0
37d74 94d 00 00 00 00 | sprite7wh      long 0
37d78 94e 00 00 00 00 | sprite8pointer long 0
37d7c 94f 00 00 00 00 | sprite8xy      long 0
37d80 950 00 00 00 00 | sprite8wh      long 0
37d84 951 00 00 00 00 | sprite9pointer long 0
37d88 952 00 00 00 00 | sprite9xy      long 0
37d8c 953 00 00 00 00 | sprite9wh      long 0
37d90 954 00 00 00 00 | sprite10pointer long 0
37d94 955 00 00 00 00 | sprite10xy      long 0
37d98 956 00 00 00 00 | sprite10wh      long 0
37d9c 957 00 00 00 00 | sprite11pointer long 0
37da0 958 00 00 00 00 | sprite11xy      long 0
37da4 959 00 00 00 00 | sprite11wh      long 0
37da8 95a 00 00 00 00 | sprite12pointer long 0
37dac 95b 00 00 00 00 | sprite12xy      long 0
37db0 95c 00 00 00 00 | sprite12wh      long 0
37db4 95d 00 00 00 00 | sprite13pointer long 0
37db8 95e 00 00 00 00 | sprite13xy      long 0
37dbc 95f 00 00 00 00 | sprite13wh      long 0
37dc0 960 00 00 00 00 | sprite14pointer long 0
37dc4 961 00 00 00 00 | sprite14xy      long 0
37dc8 962 00 00 00 00 | sprite14wh      long 0
37dcc 963 00 00 00 00 | sprite15pointer long 0
37dd0 964 00 00 00 00 | sprite15xy      long 0
37dd4 965 00 00 00 00 | sprite15wh      long 0
37dd8 966 00 00 00 00 | sprite16pointer long 0
37ddc 967 00 00 00 00 | sprite16xy      long 0
37de0 968 00 00 00 00 | sprite16wh      long 0
37de4 969 00 00 00 00 | sprite17pointer long 0
37de8 96a 00 00 00 00 | sprite17xy      long 0
37dec 96b 00 00 00 00 | sprite17wh      long 0
37df0 96c 00 00 00 00 | sprite18pointer long 0
37df4 96d 00 00 00 00 | sprite18xy      long 0
37df8 96e 00 00 00 00 | sprite18wh      long 0
37dfc 96f 00 00 00 00 | spritenum long 0
37e00 970             | 
37e00 970 00 00 00 00 | spriteline long 0
37e04 971 84 03 00 00 | sprite_x long 900
37e08 972 00 00 00 00 | sprite_y long 0
37e0c 973 10 00 00 00 | sprite_w long 16
37e10 974 40 00 00 00 | sprite_h long 64
37e14 975 00 00 00 00 | l2 long 0
37e18 976 00 00 00 00 | t5 long 0
37e1c 977 00 00 00 00 | t6 long 0
37e20 978 00 00 00 00 | t7 long 0
37e24 979 00 00 00 00 | t8 long 0
37e28 97a 00 00 00 00 | t9 long 0
37e2c 97b 00 00 00 00 | preloadaddr long 0
37e30 97c 00 00 00 00 | preloadlineaddr long 0
37e34 97d 00 04 00 00 | a1024 long 1024
37e38 97e             | 
37e38 97e E0 03 00 00 | aa long 992
37e3c 97f FF 03 00 00 | a1023 long 1023
37e40 980 00 10 00 00 | a4096 long 4096
37e44 981             |  fit 368
37e44 981             | _psram_spin2_dat_
37e44 981 00 00 00 00 
      ...             
37f3c 9bf 00 00 00 00 
37f40 9c0 00 00 00 00 |     listdata long 0[8*8]
37f44 9c1             |             orgh
37f44                 | 
37f44                 | ' driver state
37f44     FF FF FF FF | drivercog   long    -1  ' COG id of driver
37f48     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
37f4c                 | 
37f4c                 | ' delay profile
37f4c     07 00 00 00 
37f50     00 CF 7B 05 
37f54     80 D1 F0 08 
37f58     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
37f5c     80 C4 60 0F 
37f60     80 39 7A 12 
37f64     40 2D D9 13 
37f68     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
37f6c                 | 
37f6c                 | ' data to be passed to driver when starting it
37f6c                 | startupData
37f6c     00 00 00 00 |     long    0           ' current frequency
37f70     00 00 00 00 |     long    FLAGS       ' optional flags for driver
37f74     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
37f78     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
37f7c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
37f80     8C 7F 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
37f84     0C 80 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
37f88     2C 80 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
37f8c                 | 
37f8c                 | ' data for memory
37f8c                 | deviceData
37f8c                 |     ' 16 bank parameters follow (16MB per bank)
37f8c     00 00 00 00 
      ...             
37fc4     00 00 00 00 
37fc8     00 00 00 00 |     long    0[16]                               ' banks 0-15
37fcc                 |     ' 16 banks of pin parameters follow
37fcc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
37fd0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
37fd4     FF FF FF FF 
      ...             
38004     FF FF FF FF 
38008     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3800c                 | 
3800c                 | ' data for COG polling
3800c                 | qosData 
3800c     00 00 FF FF 
38010     00 00 FF FF 
38014     00 00 FF FF 
38018     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3801c     00 00 FF FF 
38020     00 00 FF FF 
38024     00 00 FF FF 
38028     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3802c                 |     
3802c                 | ' mailbox storage
3802c                 | 
3802c                 | mailboxes
3802c     00 00 00 00 
      ...             
38084     00 00 00 00 
38088     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3808c                 | 	alignl
3808c                 | _psram16drv_spin2_dat_
3808c                 |                             orgh
3808c     00 00 00 00 
      ...             
380a4     00 00 00 00 
380a8     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
380ac                 | 
380ac                 | driver_start
380ac                 |                             org
380ac 000             | '..................................................................................................
380ac 000             | ' Memory layout for COG RAM once operational:
380ac 000             | '
380ac 000             | '  COG RAM address      Usage
380ac 000             | '  ---------------      ----
380ac 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
380ac 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
380ac 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
380ac 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
380ac 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
380ac 000             | '  ~$198-$1F3           State and register variables
380ac 000             | '
380ac 000             | ' Also during driver COG startup:
380ac 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
380ac 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
380ac 000             | '..................................................................................................
380ac 000             |                             
380ac 000             | ' Mailbox storage after vector initialization
380ac 000             | 
380ac 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
380b0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
380b4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
380b8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
380bc 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
380c0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
380c4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
380c8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
380cc 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
380d0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
380d4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
380d8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
380dc 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
380e0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
380e4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
380e8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
380ec 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
380f0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
380f4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
380f8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
380fc 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
38100 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
38104 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
38108 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3810c 018             | 
3810c 018             | ' Mailbox parameter addresses per COG once patched
3810c 018             |                             
3810c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
38110 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
38114 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
38118 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3811c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
38120 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
38124 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
38128 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3812c 020             | 
3812c 020             | '..................................................................................................
3812c 020             | ' Per COG request and state setup and service branching
3812c 020             |         
3812c 020             | cog0                 
3812c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
38130 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
38134 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
38138 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3813c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38140 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38144 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
38148 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3814c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
38150 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38154 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38158 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3815c 02c             | cog1                        
3815c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
38160 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
38164 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
38168 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3816c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38170 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38174 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
38178 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3817c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
38180 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38184 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38188 037 33 CA 63 FD |                             execf   request-0               'jump to service
3818c 038             | cog2                         
3818c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
38190 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
38194 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
38198 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3819c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
381a0 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
381a4 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
381a8 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
381ac 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
381b0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
381b4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
381b8 043 33 CA 63 FD |                             execf   request-0               'jump to service
381bc 044             | cog3                        
381bc 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
381c0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
381c4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
381c8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
381cc 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
381d0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
381d4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
381d8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
381dc 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
381e0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
381e4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
381e8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
381ec 050             | cog4                        
381ec 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
381f0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
381f4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
381f8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
381fc 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38200 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38204 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
38208 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3820c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
38210 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38214 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38218 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3821c 05c             | cog5                        
3821c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
38220 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
38224 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
38228 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3822c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38230 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38234 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
38238 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3823c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
38240 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38244 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38248 067 33 CA 63 FD |                             execf   request-0               'jump to service
3824c 068             | cog6                        
3824c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
38250 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
38254 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
38258 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3825c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38260 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38264 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
38268 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3826c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
38270 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38274 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38278 073 33 CA 63 FD |                             execf   request-0               'jump to service
3827c 074             | cog7                        
3827c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
38280 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
38284 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
38288 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3828c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38290 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38294 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
38298 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3829c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
382a0 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
382a4 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
382a8 07f 33 CA 63 FD |                             execf   request-0               'jump to service
382ac 080             |                             fit     128
382ac 080             | 
382ac 080             |                             fit     128
382ac 080             | pad                         long    0[128-$]                'align init code to $80
382ac 080             | 
382ac 080             | '..................................................................................................
382ac 080             | 
382ac 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
382ac 080             | 
382ac 080             | init                        
382ac 080             |                             ' get driver scratch long address in hub
382ac 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
382b0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
382b4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
382b8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
382bc 084             |                     
382bc 084             |                             ' read in the additional LUT RAM code
382bc 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
382c0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
382c4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
382c8 087             | 
382c8 087             |                             ' read the startup parameters
382c8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
382cc 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
382d0 089             | 
382d0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
382d0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
382d4 08a             | 
382d4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
382d8 08b 01 00 00 5F 
382dc 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
382e0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
382e4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
382e8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
382ec 090             | 
382ec 090             |                             ' setup data pin modes and data bus pin group in streamer commands
382ec 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
382f0 091 01 00 00 FF 
382f4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
382f8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
382fc 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
38300 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
38304 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
38308 097 08 DE 47 F5 |                             or      a, #8
3830c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
38310 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
38314 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
38318 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3831c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
38320 09d 01 DE 07 F1 |                             add     a, #1
38324 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
38328 09f             |  
38328 09f             |                             ' setup device control pin states
38328 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3832c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
38330 0a1 01 00 00 FF 
38334 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
38338 0a3             | 
38338 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3833c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
38340 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
38344 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
38348 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3834c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
38350 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
38354 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
38358 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3835c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
38360 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
38364 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
38368 0af             | pinloop
38368 0af             |                             ' generate minimum CE high time before access
38368 0af A1 07 00 FF 
3836c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
38370 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
38374 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
38378 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3837c 0b4 1F DE 63 FD |                             waitx   a                       'delay
38380 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
38384 0b6             | 
38384 0b6             |                             ' setup the COG mailboxes and addresses 
38384 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
38388 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3838c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
38390 0b9             | 
38390 0b9 28 2E 64 FD |                             setq    #24-1
38394 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
38398 0bb             | 
38398 0bb             |                             ' setup the polling loop for active COGs 
38398 0bb 01 C2 63 FD |                             cogid   id
3839c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
383a0 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
383a4 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
383a8 0bf 0A F0 07 F6 |                             mov     ptra, #10
383ac 0c0 E1 F1 03 FA |                             mul     ptra, id
383b0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
383b4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
383b8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
383bc 0c4 03 C2 07 FA |                             mul     id, #3
383c0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
383c4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
383c8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
383cc 0c8 D8 01 B0 FD |                             call    #reloadcogs
383d0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
383d4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
383d8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
383d8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
383dc 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
383e0 0cd 08 04 DC FC |                             rep     #2, #8
383e4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
383e8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
383ec 0d0             | 
383ec 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
383ec 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
383ec 0d0 01 C2 63 FD |                             cogid   id
383f0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
383f4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
383f8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
383fc 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
38400 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
38404 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
38408 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3840c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
38410 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
38414 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
38418 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3841c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
38420 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
38424 0de A5 E5 03 F1 |                             add     d, const512
38428 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3842c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
38430 0e1 00 00 00 F6 |                             mov     0-0, 0-0
38434 0e2             |                             
38434 0e2             |                             ' setup register values for control vector loop setup after we return
38434 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
38438 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3843c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
38440 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
38444 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
38448 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3844c 0e8 D0 C3 8F F9 |                             altd    id, #id0
38450 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
38454 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
38458 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3845c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
38460 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
38464 0ee             |  
38464 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
38468 0ef 07 CA 07 F5 |                             and     request, #7
3846c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
38470 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
38474 0f2             |                             fit     $100                    'ensure all init code fits this space
38474 0f2             | 
38474 0f2             |                             fit     $100                    'ensure all init code fits this space
38474 0f2             | 
38474 0f2 00 00 00 00 
      ...             
384a4 0fe 00 00 00 00 
384a8 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
384ac 100             | 
384ac 100             | '..................................................................................................
384ac 100             | ' Error result handling and COG notification of request completion
384ac 100             | 
384ac 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
384b0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
384b4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
384b8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
384bc 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
384c0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
384c4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
384c8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
384cc 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
384d0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
384d4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
384d8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
384dc 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
384e0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
384e4 10e             | ' Poller re-starts here after a COG is serviced
384e4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
384e8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
384ec 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
384f0 111             | ' Main dynamic polling loop repeats until a request arrives
384f0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
384f4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
384f8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
384fc 114             | 
384fc 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
38500 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
38504 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
38508 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3850c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
38510 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
38514 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
38518 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3851c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
38520 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
38524 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
38528 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3852c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
38530 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
38534 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
38538 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3853c 124             | 
3853c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
38540 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
38544 126             |  
38544 126             | '..................................................................................................
38544 126             | ' List handler                               
38544 126             | 
38544 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
38548 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3854c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
38550 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
38554 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
38558 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3855c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
38560 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
38564 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
38568 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3856c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
38570 131 33 00 60 FD |                             execf   0-0                     'process the request 
38574 132             | 
38574 132             | '..................................................................................................
38574 132             | ' Restoring per COG state and resuming where we left off
38574 132             | 
38574 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
38578 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3857c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
38580 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
38584 136 D8 CB FB F8 |                             getbyte request, addr1, #3
38588 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3858c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
38590 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
38594 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
38598 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3859c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
385a0 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
385a4 13e             |                    
385a4 13e             | '..................................................................................................
385a4 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
385a4 13e             | 
385a4 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
385a8 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
385ac 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
385b0 141 D0 DF B7 F9 |                             setd    a, #id0
385b4 142 D8 DF BF F9 |                             sets    a, #addr1
385b8 143 FE FF FF FF 
385bc 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
385c0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
385c4 146 3F DE A7 F9 |                             alti    a, #%111_111 
385c8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
385cc 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
385d0 149 01 E2 63 FD |                             cogid   c
385d4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
385d8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
385dc 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
385e0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
385e4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
385e8 14f 00 E0 03 F6 |                             mov     b, 0-0
385ec 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
385f0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
385f4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
385f8 153 0C 00 90 AD |             if_z            jmp     #excluded               
385fc 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
38600 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
38604 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
38608 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3860c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
38610 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
38614 15a             | 
38614 15a             | 'determine priority cogs and build instructions for the polling sequence
38614 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
38618 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3861c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
38620 15d             | 
38620 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
38624 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
38628 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3862c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
38630 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
38634 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
38638 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3863c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
38640 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
38644 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
38648 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3864c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
38650 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
38654 16a             | endprioloop
38654 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
38658 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3865c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
38660 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
38664 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
38668 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3866c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
38670 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
38674 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
38678 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3867c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
38680 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
38684 176             | 
38684 176             | ' populate the round robin COG polling instructions
38684 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
38688 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3868c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
38690 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
38694 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
38698 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3869c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
386a0 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
386a4 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
386a8 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
386ac 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
386b0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
386b4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
386b8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
386bc 184             | '..................................................................................................
386bc 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
386bc 184             | 
386bc 184             | set_latency                                                 '            (a) set latency
386bc 184             | get_latency                                                 '            (b) get latency
386bc 184             | set_burst                                                   '            (c) set burst size of bank
386bc 184             | get_burst                                                   '            (d) get burst size of bank
386bc 184             |                                                             '            (e) dump state
386bc 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
386c0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
386c4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
386c8 187             |                                                             ' | | | | e  account for following AUGS
386c8 187 04 00 00 FF 
386cc 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
386d0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
386d4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
386d8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
386dc 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
386e0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
386e4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
386e8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
386ec 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
386f0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
386f4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
386f8 193             | 
386f8 193             | '..................................................................................................
386f8 193             | ' Misc EXECF code
386f8 193             | 
386f8 193 33 72 63 FD | start_read_exec             execf   newburstr
386fc 194 33 7C 63 FD | start_write_exec            execf   resumewrites
38700 195 33 78 63 FD | continue_read_exec          execf   lockedreads
38704 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
38708 197             | 
38708 197             | '..................................................................................................
38708 197             | ' Variables
38708 197             | 
38708 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3870c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
38710 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
38714 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
38718 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3871c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
38720 19d             | 
38720 19d 00 00 00 80 | xfreq1          long    $80000000
38724 19e 00 00 00 40 | xfreq2          long    $40000000
38728 19f 03 00 00 00 | delay           long    3
3872c 1a0             | 
3872c 1a0             | lutcodeaddr                 
3872c 1a0             | startupparams
3872c 1a0             | excludedcogs                                    'careful: shared register use!
3872c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
38730 1a1 00 00 00 00 | flags           long    0
38734 1a2             | mask                                            'careful: shared register use!
38734 1a2 00 00 00 00 | resetmaskA      long    0
38738 1a3             | limit                                           'careful: shared register use!
38738 1a3 00 00 00 00 | resetmaskB      long    0
3873c 1a4 00 00 00 00 | datapins        long    0
38740 1a5             | const512                                        'careful: shared register use!
38740 1a5 00 00 00 00 | devicelist      long    0
38744 1a6 00 00 00 00 | coglist         long    0
38748 1a7 00 00 00 00 | mbox            long    0 
3874c 1a8             | 
3874c 1a8             | clkpin                                          'shared with code patched during init
3874c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
38750 1a9             | cspin                                           'shared with code patched during init
38750 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
38754 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
38758 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3875c 1ac 01 00 00 00 | clkdelay        long    1
38760 1ad 00 00 00 00 | regdatabus      long    0
38764 1ae             | 
38764 1ae 10 00 00 00 | deviceaddr      long    $10
38768 1af             | rrcounter
38768 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3876c 1b0             | 
3876c 1b0             | ' jump addresses for the per COG handlers
3876c 1b0 20 00 00 00 | cog0_handler    long    cog0
38770 1b1 2C 00 00 00 | cog1_handler    long    cog1
38774 1b2 38 00 00 00 | cog2_handler    long    cog2
38778 1b3 44 00 00 00 | cog3_handler    long    cog3
3877c 1b4 50 00 00 00 | cog4_handler    long    cog4
38780 1b5 5C 00 00 00 | cog5_handler    long    cog5
38784 1b6 68 00 00 00 | cog6_handler    long    cog6
38788 1b7 74 00 00 00 | cog7_handler    long    cog7
3878c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
38790 1b9             | 
38790 1b9             | ' EXECF sequences
38790 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
38794 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
38798 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3879c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
387a0 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
387a4 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
387a8 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
387ac 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
387ac 1c0             | 
387ac 1c0             | 
387ac 1c0             | ' SKIPF sequences
387ac 1c0             | skiptable
387ac 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
387b0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
387b4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
387b8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
387bc 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
387c0 1c5 00 00 00 00 | pattern2        long    0
387c4 1c6 00 00 00 00 | pattern3        long    0
387c8 1c7 77 02 00 00 | singlelong      long    %1001110111  
387cc 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
387d0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
387d4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
387d8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
387dc 1cc             | 
387dc 1cc             | ' LUT RAM address values
387dc 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
387e0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
387e4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
387e8 1cf F6 02 00 00 | noread          long    noread_lut
387ec 1d0             | 
387ec 1d0 00 00 00 00 | id0             long    0
387f0 1d1 01 00 00 00 | id1             long    1
387f4 1d2 02 00 00 00 | id2             long    2
387f8 1d3 03 00 00 00 | id3             long    3
387fc 1d4 04 00 00 00 | id4             long    4
38800 1d5 05 00 00 00 | id5             long    5
38804 1d6 06 00 00 00 | id6             long    6
38808 1d7 07 00 00 00 | id7             long    7
3880c 1d8             | 
3880c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3880c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3880c 1d8 00 00 00 00 | addr1           long    0
38810 1d9 00 00 00 00 | hubdata         long    0
38814 1da 00 00 00 00 | count           long    0
38818 1db 00 00 00 00 | addr2           long    0
3881c 1dc 00 00 00 00 | total           long    0
38820 1dd 00 00 00 00 | offset1         long    0
38824 1de 00 00 00 00 | offset2         long    0
38828 1df 00 00 00 00 | link            long    0
3882c 1e0             | 
3882c 1e0             | burstwrite                                      'note shared register use during init
3882c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
38830 1e1 00 00 00 00 | id              long    0
38834 1e2             | 
38834 1e2 00 00 00 00 | header          long    0
38838 1e3 00 00 00 00 | trailer         long    0
3883c 1e4 00 00 00 00 | cmdaddr         long    0
38840 1e5 00 00 00 00 | request         long    0
38844 1e6 00 00 00 00 | rrlimit         long    0
38848 1e7 00 00 00 00 | pinconfig       long    0
3884c 1e8 00 00 00 00 | clks            long    0
38850 1e9 00 00 00 00 | resume          long    0
38854 1ea 00 00 00 00 | orighubsize     long    0
38858 1eb 00 00 00 00 | wrclks          long    0
3885c 1ec             | 
3885c 1ec 00 00 00 00 | pattern         long    0
38860 1ed 00 00 00 00 | hubscratch      long    0
38864 1ee 00 10 00 00 | val4k           long    4096
38868 1ef             | 
38868 1ef             | ' temporary general purpose regs
38868 1ef 00 00 00 00 | a               long    0
3886c 1f0 00 00 00 00 | b               long    0
38870 1f1 00 00 00 00 | c               long    0
38874 1f2 00 00 00 00 | d               long    0
38878 1f3             |                 fit     502
38878 1f3             | 
38878 1f3             |                 fit     502
38878 1f3             | 
38878 1f3             | '..................................................................................................
38878 1f3             | 
38878 1f3             |             orgh
38878                 | 
38878                 | lut_code
38878                 | 'HW init code up to 80 longs
38878                 | 
38878                 | '..................................................................................................
38878                 | ' Memory layout for LUT RAM once operational:
38878                 | '
38878                 | '  LUT RAM address      Usage
38878                 | '  ---------------      ----
38878                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
38878                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
38878                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
38878                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
38878                 | '
38878                 | ' Also during driver COG startup:
38878                 | ' $230-$24F is used for HW init setup
38878                 | ' $250-$26F is used as temporary vector storage 
38878                 | '..................................................................................................
38878                 | 
38878                 |                 org $230    
38878 230             | 
38878 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
38878 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3887c 231 24 16 60 FD |                             pollxfi
38880 232 FF AA 2A FF 
38884 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
38888 234 28 00 B0 FD |                             call    #sendqspi
3888c 235 07 F8 07 FF 
38890 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
38894 237 28 00 B0 FD |                             call    #sendspi
38898 238 F8 07 78 FF 
3889c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
388a0 23a 1C 00 B0 FD |                             call    #sendspi
388a4 23b 7F 78 78 FF 
388a8 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
388ac 23d 10 00 B0 FD |                             call    #sendspi 
388b0 23e 2D 00 64 FD |                             ret
388b4 23f             | 
388b4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
388b8 240 32 0C 64 FD |                             skipf   #%110
388bc 241 9C EF 03 F6 |                             mov     pb, xsendimm
388c0 242             | 
388c0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
388c4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
388c8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
388cc 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
388d0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
388d4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
388d8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
388dc 249 50 48 63 FD |                             fltl    datapins                'float data bus
388e0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
388e4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
388e8 24c             | 
388e8 24c 00 00 00 00 
388ec 24d 00 00 00 00 
388f0 24e 00 00 00 00 
388f4 24f 00 00 00 00 |                 long    0[$270-32-$]
388f8 250             |                 fit     $270-32  ' keep room for 32 vector longs
388f8 250             |     
388f8 250             |                 fit     $270-32  ' keep room for 32 vector longs
388f8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
388f8 250             | rw_vect ' PSRAM jump vectors
388f8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
388fc 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38900 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
38904 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
38908 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3890c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
38910 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
38914 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
38918 258             | ro_vect ' R/O PSRAM jump vectors
38918 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3891c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38920 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
38924 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
38928 25c 00 01 00 00 |                 long    unsupported
3892c 25d 00 01 00 00 |                 long    unsupported
38930 25e 00 01 00 00 |                 long    unsupported
38934 25f 00 01 00 00 |                 long    unsupported
38938 260             | ctrl_vect ' Control jump vectors
38938 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3893c 261 00 01 00 00 |                 long    unsupported
38940 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
38944 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
38948 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3894c 265 00 01 00 00 |                 long    unsupported
38950 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
38954 267 3E 01 00 00 |                 long    reconfig 
38958 268             | no_vect ' Invalid bank jump vectors
38958 268 01 01 00 00 |                 long    invalidbank
3895c 269 01 01 00 00 |                 long    invalidbank
38960 26a 01 01 00 00 |                 long    invalidbank
38964 26b 01 01 00 00 |                 long    invalidbank
38968 26c 01 01 00 00 |                 long    invalidbank
3896c 26d 01 01 00 00 |                 long    invalidbank
38970 26e 01 01 00 00 |                 long    invalidbank
38974 26f 01 01 00 00 |                 long    invalidbank
38978 270             |                 fit     $270
38978 270             | 
38978 270             |                 fit     $270
38978 270             | '..................................................................................................
38978 270             | ' PSRAM READS
38978 270             |                                                             ' a b c d e f
38978 270             |                                                             ' B W L B R L  (a) byte read
38978 270             |                                                             ' Y O O U E O  (b) word read
38978 270             |                                                             ' T R N R S C  (c) long read
38978 270             |                                                             ' E D G S U K  (d) new burst read
38978 270             |                                                             '       T M E  (e) resumed sub-burst
38978 270             |                                                             '         E D  (f) locked sub-burst
38978 270             | 
38978 270             | 
38978 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3897c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
38980 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
38984 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
38988 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3898c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
38990 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
38994 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
38998 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3899c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
389a0 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
389a4 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
389a8 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
389ac 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
389b0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
389b4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
389b8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
389bc 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
389c0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
389c4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
389c8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
389cc 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
389d0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
389d4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
389d8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
389dc 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
389e0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
389e4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
389e8 28c             | 
389e8 28c             |                             ' fall through to read bursts
389e8 28c             |                         
389e8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
389e8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
389ec 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
389f0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
389f4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
389f8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
389fc 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
38a00 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
38a04 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
38a08 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
38a0c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
38a10 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
38a14 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
38a18 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
38a1c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
38a20 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
38a24 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
38a28 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
38a2c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
38a30 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
38a34 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
38a38 2a0 E8 D1 03 F1 |                             add     clks, clks
38a3c 2a1             | readcommon
38a3c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
38a40 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
38a44 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
38a48 2a4             | 
38a48 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
38a4c 2a5 69 C8 63 FD |                             rev     cmdaddr
38a50 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
38a54 2a7 61 C8 63 FD |                             mergeb  cmdaddr
38a58 2a8             | 
38a58 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
38a5c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
38a60 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
38a60 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
38a64 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
38a68 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
38a6c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
38a70 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
38a70 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
38a74 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
38a78 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
38a7c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
38a80 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
38a84 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
38a88 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
38a88 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
38a8c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
38a90 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
38a94 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
38a98 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
38a9c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
38aa0 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
38aa4 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
38aa8 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
38aac 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
38ab0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
38ab4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
38ab8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
38abc 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
38ac0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
38ac0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
38ac4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
38ac8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
38acc 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
38ad0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
38ad4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
38ad8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
38adc 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
38ae0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
38ae4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
38ae8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
38aec 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
38af0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
38af4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
38af8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
38afc 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
38b00 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
38b04 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
38b08 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
38b0c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
38b10 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
38b14 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
38b18 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
38b1c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
38b20 2da 10 03 90 FD |                             jmp     #writecommon
38b24 2db             | 
38b24 2db             | '..................................................................................................
38b24 2db             | ' Burst continuation testing
38b24 2db             | 
38b24 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
38b28 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
38b2c 2dd             | continue_read_lut          
38b2c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
38b30 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
38b34 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
38b38 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
38b3c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
38b40 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
38b44 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
38b48 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
38b4c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
38b50 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
38b54 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
38b58 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
38b5c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
38b60 2ea             | 
38b60 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
38b64 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
38b68 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
38b6c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
38b70 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
38b74 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
38b78 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
38b7c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
38b80 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
38b84 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
38b88 2f4 2A 1C 66 0D |             _ret_           push    #poller
38b8c 2f5             | 
38b8c 2f5             | 
38b8c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
38b90 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
38b90 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
38b94 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
38b98 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
38b9c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
38ba0 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
38ba4 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
38ba8 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
38bac 2fd 2D 00 64 FD |                             ret                             ' | continue processing
38bb0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
38bb4 2ff             | '..................................................................................................
38bb4 2ff             | ' Completion of requests
38bb4 2ff             | 
38bb4 2ff             | complete_rw_lut             
38bb4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
38bb8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
38bbc 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
38bc0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
38bc4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
38bc8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
38bcc 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
38bd0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
38bd4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
38bd8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
38bdc 309 32 62 64 AD |             if_z            skipf   #%110001
38be0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
38be4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
38be8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
38bec 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
38bf0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
38bf4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
38bf8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
38bfc 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
38c00 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
38c04 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
38c08 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
38c0c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
38c10 316             |                                                             ' skipcase (a) gfx copy to/from hub
38c10 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
38c10 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
38c10 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
38c14 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
38c18 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
38c1c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
38c20 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
38c24 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
38c28 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
38c2c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
38c30 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
38c34 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
38c38 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
38c3c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
38c40 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
38c44 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
38c48 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
38c4c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
38c50 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
38c54 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
38c58 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
38c5c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
38c60 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
38c64 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
38c68 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
38c6c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
38c70 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
38c74 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
38c78 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
38c7c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
38c80 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
38c84 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
38c88 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
38c8c 335 DF B7 03 A6 |             if_z            mov     addr2, link
38c90 336 34 FF 9F AD |             if_z            jmp     #checknext
38c94 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
38c98 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
38c9c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
38ca0 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
38ca4 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
38ca8 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
38cac 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
38cb0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
38cb4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
38cb8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
38cbc 341             | 
38cbc 341             | '..................................................................................................
38cbc 341             | ' PSRAM WRITES
38cbc 341             |                                                             '  a b c d e f g h
38cbc 341             | 
38cbc 341             |                                                             '  B W L F B R L L (a) byte write(s)
38cbc 341             |                                                             '  Y O O I U E O O (b) word write(s)
38cbc 341             |                                                             '  T R N L R S C C (c) long write(s)
38cbc 341             |                                                             '  E D G L S U K K (d) resumed fill
38cbc 341             |                                                             '          T M E E (e) new burst write
38cbc 341             |                                                             '            E D D (f) resumed burst
38cbc 341             |                                                             '              F B (g) locked fill
38cbc 341             |                                                             '              I U (h) locked burst write
38cbc 341             |                                                             '              L R 
38cbc 341             |                                                             '              L S 
38cbc 341             |                                                             '                T 
38cbc 341             | 
38cbc 341             | w_single                   
38cbc 341             | w_fill_cont           
38cbc 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
38cc0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
38cc4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
38cc8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
38ccc 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
38cd0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
38cd4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
38cd8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
38cdc 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
38ce0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
38ce4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
38ce8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
38cec 34d             |                ' disable call to r_resume_burst for single longs when z=0
38cec 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
38cf0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
38cf4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
38cf8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
38cfc 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
38d00 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
38d04 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
38d08 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
38d0c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
38d10 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
38d14 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
38d18 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
38d1c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
38d20 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
38d24 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
38d28 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
38d2c 35d             |         
38d2c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
38d2c 35d             |             '
38d2c 35d             |             '  At least one of these 3 optional components will be sent
38d2c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
38d2c 35d             |             '     body - N x full longs of data
38d2c 35d             |             '     trailer - last partial long of data
38d2c 35d             |             '
38d2c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
38d2c 35d             |             '
38d2c 35d             |             'Case    Type                           Sends
38d2c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
38d2c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
38d2c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
38d2c 35d             |             ' 4)     Multiple long fill             body only
38d2c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
38d2c 35d             | 
38d2c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
38d2c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
38d30 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
38d34 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
38d38 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38d3c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
38d40 362 13 8C 07 F6 |                             mov     pattern3, #%10011
38d44 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
38d48 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
38d4c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
38d50 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
38d54 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
38d58 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
38d5c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
38d60 36a             |                             
38d60 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
38d64 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
38d68 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
38d6c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
38d70 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
38d74 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
38d78 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
38d7c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
38d80 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
38d84 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
38d88 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
38d8c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
38d90 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
38d94 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
38d98 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
38d9c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
38da0 37a             | 
38da0 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
38da4 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
38da8 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
38dac 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
38db0 37e             |                  
38db0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
38db4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
38db8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
38dbc 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
38dc0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
38dc4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
38dc8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
38dcc 385             | 
38dcc 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
38dd0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
38dd4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
38dd8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
38ddc 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
38de0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
38de4 38b             | 
38de4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
38de4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
38de8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
38dec 38d 2A B0 63 FD |                             push    addr1                   'save address
38df0 38e             | 
38df0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
38df0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
38df4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
38df8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
38dfc 391             |             
38dfc 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
38e00 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
38e04 393 2B B0 63 FD |                             pop     addr1                   'restore address
38e08 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
38e0c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
38e10 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
38e14 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
38e18 398             | 
38e18 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
38e1c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
38e20 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
38e24 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
38e28 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
38e2c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
38e30 39e             | 
38e30 39e             |                             'trailer is done
38e30 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
38e34 39f             | 
38e34 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
38e38 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
38e3c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
38e40 3a2             | 
38e40 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
38e44 3a3 69 C8 63 FD |                             rev     cmdaddr                 
38e48 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
38e4c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
38e50 3a6             |                             
38e50 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
38e54 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
38e58 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
38e5c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
38e60 3aa             |                                                          
38e60 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
38e64 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
38e68 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
38e6c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
38e70 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
38e74 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
38e78 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
38e7c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
38e80 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
38e84 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
38e88 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
38e8c 3b5             |  
38e8c 3b5 59 52 63 FD |                             drvh    cspin
38e90 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
38e94 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
38e98 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
38e9c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
38ea0 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
38ea4 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
38ea8 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
38eac 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
38eb0 3be EA E5 03 F6 |                             mov     d, orighubsize
38eb4 3bf EF E5 63 F0 |                             shl     d, a
38eb8 3c0 F2 E3 83 F1 |                             sub     c, d
38ebc 3c1 DD E3 03 F1 |                             add     c, offset1
38ec0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
38ec4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
38ec8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
38ecc 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
38ed0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
38ed4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
38ed8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
38edc 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
38ee0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
38ee4 3cb BB D3 03 F6 |                             mov     resume, restorefill
38ee8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
38eec 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
38ef0 3ce 6C FC BF CD |             if_c            call    #yield
38ef4 3cf 2D 00 64 FD |                             ret
38ef8 3d0             |                            
38ef8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
38ef8 3d0             |                       '     rczl    pa                      'rotate left into address offset
38ef8 3d0             |                       '     rczl    c wcz                   'restore count and flags
38ef8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
38efc 3d1 02 EC 67 F0 |                             shl     pa, #2
38f00 3d2 28 06 64 AD |             if_z            setq    #3
38f04 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
38f08 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
38f0c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
38f10 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
38f14 3d7             | 
38f14 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
38f18 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
38f1c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
38f20 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
38f24 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
38f28 3dc             |                 fit 1024-32
38f28 3dc             |         
38f28 3dc             | 
38f28 3dc             | '..................................................................................................
38f28 3dc             | 
38f28 3dc             |                 fit 1024-32
38f28 3dc 00 00 00 00 
38f2c 3dd 00 00 00 00 
38f30 3de 00 00 00 00 
38f34 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
38f38 3e0             |                 org 1024-32
38f38 000             | 
38f38 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
38f38 000 00 00 00 00 |                 long $0000
38f3c 001 11 11 00 00 |                 long $1111
38f40 002 22 22 00 00 |                 long $2222
38f44 003 33 33 00 00 |                 long $3333
38f48 004 44 44 00 00 |                 long $4444
38f4c 005 55 55 00 00 |                 long $5555
38f50 006 66 66 00 00 |                 long $6666
38f54 007 77 77 00 00 |                 long $7777
38f58 008 88 88 00 00 |                 long $8888
38f5c 009 99 99 00 00 |                 long $9999
38f60 00a AA AA 00 00 |                 long $aaaa
38f64 00b BB BB 00 00 |                 long $bbbb
38f68 00c CC CC 00 00 |                 long $cccc
38f6c 00d DD DD 00 00 |                 long $dddd
38f70 00e EE EE 00 00 |                 long $eeee
38f74 00f FF FF 00 00 |                 long $ffff
38f78 010             | 
38f78 010             | 'masks
38f78 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
38f7c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
38f80 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
38f84 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
38f88 014             | 
38f88 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
38f8c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
38f90 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
38f94 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
38f98 018             | 
38f98 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
38f9c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
38fa0 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
38fa4 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
38fa8 01c             | 
38fa8 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
38fac 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
38fb0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
38fb4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
38fb8 020             |         fit 1024
38fb8 020             | 
38fb8 020             |         fit 1024
38fb8 020             | 
38fb8 020             | '--------------------------------------------------------------------------------------------------
38fb8 020             |         orgh
38fb8                 | 
38fb8                 | gfxexpansion
38fb8                 |                             'simple line drawing graphics expansion of memory driver
38fb8                 |                             'jmp     #donerepeats                'just return for now
38fb8                 | 
38fb8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
38fbc     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
38fc0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
38fc4     DD E1 03 F6 |                             mov     b, offset1              'get error term
38fc8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
38fcc     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
38fd0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
38fd4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
38fd8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
38fdc     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
38fe0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
38fe4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
38fe8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
38fec     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
38ff0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
38ff4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
38ff8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
38ffc     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
39000     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
39004     DC E5 33 F9 |                             getword d, total, #0            'get line width
39008     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3900c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
39010     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
39014     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
39018     C3 03 80 FD |                             jmp     #readmask               'continue filling
3901c                 | 	alignl
3901c                 | _usbnew_spin2_dat_
3901c                 |                 org     $000
3901c 000             | 
3901c 000             | usb_host_start
3901c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
39020 001             | 
39020 001 03 00 00 FF 
39024 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
39028 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3902c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
39030 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
39034 006 29 70 63 FD |                 setq2   htmp
39038 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3903c 008             | 
3903c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
39040 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
39044 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
39048 00b             | 
39048 00b             | '------------------------------------------------------------------------------
39048 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
39048 00b             | ' special because the receiving function must not respond with either STALL or
39048 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
39048 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
39048 00b             | ' corrupt packet, it must ignore the transaction
39048 00b             | '------------------------------------------------------------------------------
39048 00b             | ' On entry:
39048 00b             | '   PTRA - start address of the SETUP data struct.
39048 00b             | ' On exit:
39048 00b             | '   retval - PID_ACK on success, otherwise error code.
39048 00b             | '------------------------------------------------------------------------------
39048 00b             | txn_setup
39048 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3904c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
39050 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
39054 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
39058 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3905c 010             | .setup
3905c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
39060 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39064 012 2D 00 64 AD |         if_z    ret
39068 013 7C 0B B0 FD |                 call    #retry_wait
3906c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39070 015 2D 00 64 AD |         if_z    ret
39074 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
39078 017 E0 FF 9F FD |                 jmp     #.setup
3907c 018             | 
3907c 018             | '------------------------------------------------------------------------------
3907c 018             | ' IN/INTERRUPT transaction.
3907c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3907c 018             | '------------------------------------------------------------------------------
3907c 018             | ' On entry:
3907c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3907c 018             | '     CRC(b19..23).
3907c 018             | ' On exit:
3907c 018             | '------------------------------------------------------------------------------
3907c 018             | txn_in
3907c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
39080 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
39084 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
39088 01b             | 
39088 01b             |                 ' Fall through to urx_packet
39088 01b             | 
39088 01b             | '------------------------------------------------------------------------------
39088 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
39088 01b             | ' received are handshakes and IN DATAx.
39088 01b             | '------------------------------------------------------------------------------
39088 01b             | ' On entry:
39088 01b             | ' On exit:
39088 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
39088 01b             | '     returned.
39088 01b             | '------------------------------------------------------------------------------
39088 01b             | urx_packet
39088 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3908c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
39090 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
39094 01e 1A 92 63 FD |                 getct   hct2
39098 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3909c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
390a0 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
390a4 022             | .wait_sop
390a4 022 22 A7 8A FA |                 rdpin   urx, dm
390a8 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
390ac 024 08 00 90 CD |         if_c    jmp     #.get_pid
390b0 025 FC 25 CC FB |                 jnct2   #.wait_sop
390b4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
390b8 027             | .get_pid
390b8 027 28 02 B0 FD |                 call    #urx_next
390bc 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
390c0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
390c4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
390c8 02b             | .chk_pid
390c8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
390cc 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
390d0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
390d4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
390d8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
390dc 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
390e0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
390e4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
390e8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
390ec 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
390f0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
390f4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
390f8 037             | .ack_resend
390f8 037 22 A7 82 FA |                 rqpin   urx, dm
390fc 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
39100 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
39104 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
39108 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3910c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
39110 03d             | .chk_eop
39110 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39114 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
39118 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3911c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
39120 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
39124 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
39128 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3912c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
39130 045 2D 00 64 FD |                 ret
39134 046             | .idle
39134 046 22 A7 82 FA |                 rqpin   urx, dm
39138 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3913c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
39140 049 2D 00 64 FD |                 ret
39144 04a             | 
39144 04a             | '------------------------------------------------------------------------------
39144 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
39144 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
39144 04a             | ' if one is required.
39144 04a             | '------------------------------------------------------------------------------
39144 04a             | ' On entry:
39144 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
39144 04a             | ' On exit:
39144 04a             | '------------------------------------------------------------------------------
39144 04a             | utx_token
39144 04a 22 A7 82 FA |                 rqpin   urx, dm
39148 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3914c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
39150 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
39154 04e 34 0D B0 CD |         if_c    call    #utx_pre
39158 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3915c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
39160 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
39164 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
39168 053             | .next_byte
39168 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3916c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
39170 055             | .wait
39170 055 40 46 72 FD |                 testp   dp                      wc
39174 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
39178 057 23 03 08 FC |                 akpin   dp
3917c 058 22 A5 22 FC |                 wypin   utx, dm
39180 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
39184 05a             | 
39184 05a             | '------------------------------------------------------------------------------
39184 05a             | ' SETUP/OUT/INTERRUPT transaction.
39184 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
39184 05a             | '------------------------------------------------------------------------------
39184 05a             | ' On entry:
39184 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
39184 05a             | '     CRC(b19..23).
39184 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
39184 05a             | '   pkt_data - count of DATAx payload bytes to send.
39184 05a             | ' On exit:
39184 05a             | '------------------------------------------------------------------------------
39184 05a             | txn_out
39184 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
39188 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3918c 05c 00 00 C0 FF 
39190 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
39194 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
39198 05f             | 
39198 05f             |                 ' Fall through to utx_data
39198 05f             | 
39198 05f             | '------------------------------------------------------------------------------
39198 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
39198 05f             | ' calculated while the data byte is being shifted out. Since data stage
39198 05f             | ' success/fail is not determined until the status stage of the transaction,
39198 05f             | ' this routine is only concerned about the current DATAx packet.
39198 05f             | '------------------------------------------------------------------------------
39198 05f             | ' On entry:
39198 05f             | '   PTRA - hub start address of the data to read.
39198 05f             | '   pkt_cnt - data payload size.
39198 05f             | ' On exit:
39198 05f             | '------------------------------------------------------------------------------
39198 05f             | utx_data
39198 05f 22 A7 82 FA |                 rqpin   urx, dm
3919c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
391a0 061 F4 FF 9F CD |         if_c    jmp     #utx_data
391a4 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
391a8 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
391ac 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
391b0 065 D8 0C B0 CD |         if_c    call    #utx_pre
391b4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
391b8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
391bc 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
391c0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
391c4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
391c8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
391cc 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
391d0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
391d4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
391d8 06f             | .read_byte
391d8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
391dc 070 F0 00 B0 FD |                 call    #utx_byte
391e0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
391e4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
391e8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
391ec 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
391f0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
391f4 076             | .send_crc
391f4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
391f8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
391fc 078 D0 00 B0 FD |                 call    #utx_byte
39200 079 5D A5 EA F8 |                 getbyte utx, crc, #1
39204 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
39208 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3920c 07c             | 
3920c 07c             | '------------------------------------------------------------------------------
3920c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3920c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3920c 07c             | ' expects that the packet includes at least the CRC word.
3920c 07c             | '
3920c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3920c 07c             | ' was requested, which makes it difficult to determine where the data stops
3920c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3920c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3920c 07c             | ' USB-16 expected residual value of 0xB001.
3920c 07c             | '
3920c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3920c 07c             | ' so the caller can verify IN success before writing the data to its final
3920c 07c             | ' destination.
3920c 07c             | '------------------------------------------------------------------------------
3920c 07c             | ' On entry:
3920c 07c             | '   pkt_data - max byte count expected to be in the packet.
3920c 07c             | '   newb_flg - signals new byte ready when toggled.
3920c 07c             | ' On exit:
3920c 07c             | '   pkt_cnt - actual number of bytes read.
3920c 07c             | '------------------------------------------------------------------------------
3920c 07c             | urx_data
3920c 07c F7 75 03 F6 |                 mov     htmp2, pb
39210 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
39214 07e 00 00 C0 FF 
39218 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3921c 080 BA EF 03 F6 |                 mov     pb, htmp2
39220 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
39224 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
39228 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3922c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
39230 085             | .wait_byte
39230 085             | ' In-line rx for max speed
39230 085 22 A7 82 FA |                 rqpin   urx, dm
39234 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
39238 087 53 A5 02 F5 |                 and     utx, urx
3923c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
39240 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
39244 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
39248 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3924c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
39250 08d DC FF 9F FD |                 jmp     #.wait_byte
39254 08e             | .get_byte
39254 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
39258 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3925c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
39260 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
39264 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
39268 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3926c 094             | .end_crc
3926c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
39270 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
39274 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
39278 097 2D 00 64 1D |         if_a    ret
3927c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3927c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3927c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3927c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3927c 098 22 A7 82 FA |                 rqpin   urx, dm
39280 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
39284 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
39288 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
39288 09b             | .chk_crc
39288 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3928c 09c 58 00 00 FF 
39290 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
39294 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
39298 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3929c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
392a0 0a1 34 09 B0 FD |                 call    #poll_waitx
392a4 0a2             | 
392a4 0a2             |                 ' Fall through to utx_handshake
392a4 0a2             | 
392a4 0a2             | '------------------------------------------------------------------------------
392a4 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
392a4 0a2             | ' the appropriate IP delay has been inserted.
392a4 0a2             | '------------------------------------------------------------------------------
392a4 0a2             | ' On entry:
392a4 0a2             | '   retval - handshake PID to send.
392a4 0a2             | ' On exit:
392a4 0a2             | '   retval unchanged.
392a4 0a2             | '------------------------------------------------------------------------------
392a4 0a2             | utx_handshake
392a4 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
392a8 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
392ac 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
392b0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
392b4 0a6 5F A5 02 F6 |                 mov     utx, retval
392b8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
392bc 0a8             | .idle
392bc 0a8 22 A7 82 FA |                 rqpin   urx, dm
392c0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
392c4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
392c8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
392cc 0ac 08 09 90 FD |                 jmp     #poll_waitx
392d0 0ad             | 
392d0 0ad             | '------------------------------------------------------------------------------
392d0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
392d0 0ad             | '------------------------------------------------------------------------------
392d0 0ad             | ' On entry:
392d0 0ad             | '   utx - byte to transmit.
392d0 0ad             | ' On exit:
392d0 0ad             | '------------------------------------------------------------------------------
392d0 0ad             | utx_byte
392d0 0ad 40 46 72 FD |                 testp   dp                      wc
392d4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
392d8 0af 23 03 08 FC |                 akpin   dp
392dc 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
392e0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
392e4 0b2             | 
392e4 0b2             | '------------------------------------------------------------------------------
392e4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
392e4 0b2             | '------------------------------------------------------------------------------
392e4 0b2             | ' On entry:
392e4 0b2             | ' On exit:
392e4 0b2             | '   retval - the byte read.
392e4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
392e4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
392e4 0b2             | '     received.
392e4 0b2             | '------------------------------------------------------------------------------
392e4 0b2             | urx_next
392e4 0b2 22 A7 8A FA |                 rdpin   urx, dm
392e8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
392ec 0b4 53 A5 02 F5 |                 and     utx, urx
392f0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
392f4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
392f8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
392fc 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
39300 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
39304 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
39308 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3930c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
39310 0bd 2D 00 64 FD |                 ret
39314 0be             | 
39314 0be             | '------------------------------------------------------------------------------
39314 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
39314 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
39314 0be             | ' length, and the PID is not included in the CRC calculation:
39314 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
39314 0be             | '  CRC5  ENDP ADDRESS PID
39314 0be             | ' %00000_1111_1111111_xxxxxxxx
39314 0be             | '------------------------------------------------------------------------------
39314 0be             | ' On entry:
39314 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
39314 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
39314 0be             | ' On exit:
39314 0be             | '   ep_addr_pid - CRC value appended to the packet.
39314 0be             | '------------------------------------------------------------------------------
39314 0be             | calc_crc5
39314 0be FF 03 00 FF 
39318 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3931c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
39320 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
39324 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
39328 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3932c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
39330 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
39334 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
39338 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3933c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
39340 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
39344 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
39348 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3934c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
39350 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
39354 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
39358 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3935c 0d0             | 
3935c 0d0             | '------------------------------------------------------------------------------
3935c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3935c 0d0             | '------------------------------------------------------------------------------
3935c 0d0             | isr1_fsframe
3935c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
39360 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39364 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39368 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3936c 0d4             | .wait
3936c 0d4 40 46 72 FD |                 testp   dp                      wc
39370 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
39374 0d6 23 03 08 FC |                 akpin   dp
39378 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3937c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
39380 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
39384 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
39388 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3938c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
39390 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
39394 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
39398 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3939c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
393a0 0e1 2C FF BF FD |                 call    #utx_byte
393a4 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
393a8 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
393ac 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
393b0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
393b4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
393b8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
393bc 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
393c0 0e9 5B A5 42 F5 |                 or      utx, icrc
393c4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
393c8 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
393cc 0ec 20 00 90 FD |                 jmp     #isr1_wait
393d0 0ed             | isr1_lsframe
393d0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
393d4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
393d8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
393dc 0f0             | .wait
393dc 0f0 40 46 72 FD |                 testp   dp                      wc
393e0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
393e4 0f2 23 03 08 FC |                 akpin   dp
393e8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
393ec 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
393f0 0f5             | isr1_wait
393f0 0f5 22 A5 82 FA |                 rqpin   utx, dm
393f4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
393f8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
393fc 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
39400 0f9 03 00 00 FF 
39404 0fa FF B3 06 F5 |                 and     frame, ##$7ff
39408 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3940c 0fc F5 FF 3B FB |                 reti1
39410 0fd             | 
39410 0fd             | '------------------------------------------------------------------------------
39410 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
39410 0fd             | ' transaction will complete before the next frame is triggered.
39410 0fd             | '------------------------------------------------------------------------------
39410 0fd             | ' On entry:
39410 0fd             | ' On exit:
39410 0fd             | '------------------------------------------------------------------------------
39410 0fd             | wait_txn_ok
39410 0fd 1A 74 63 FD |                 getct   htmp2
39414 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
39418 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3941c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
39420 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
39424 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
39428 103 2D 00 64 FD |                 ret
3942c 104             | 
3942c 104             | '------------------------------------------------------------------------------
3942c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3942c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3942c 104             | ' and perform a reset sequence prior to device enumeration.
3942c 104             | '------------------------------------------------------------------------------
3942c 104             | dev_reset
3942c 104 22 A7 82 FA |                 rqpin   urx, dm
39430 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
39434 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
39438 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3943c 108             | reset
3943c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
39440 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
39444 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
39448 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3944c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
39450 10d 1A 92 62 FD |                 getct   iframe_ct_base
39454 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39458 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3945c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
39460 111 24 70 07 F1 |                 add     htmp, #36
39464 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
39468 113             | .framewait
39468 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3946c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
39470 115 2D 00 64 FD |                 ret
39474 116             | 
39474 116             | '------------------------------------------------------------------------------
39474 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
39474 116             | '------------------------------------------------------------------------------
39474 116             | ' On entry:
39474 116             | '   PTRA - source address.
39474 116             | '   PB - destination address.
39474 116             | '   hr0 - length of copy, in bytes.
39474 116             | ' On exit:
39474 116             | '------------------------------------------------------------------------------
39474 116             | hmemcpy
39474 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
39478 117 F7 71 43 FC |                 wrbyte  htmp, pb
3947c 118 01 EE 07 F1 |                 add     pb, #1
39480 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
39484 11a             | 
39484 11a             | '------------------------------------------------------------------------------
39484 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
39484 11a             | ' loop until the errant device is disconnected.
39484 11a             | '------------------------------------------------------------------------------
39484 11a             | ' On entry:
39484 11a             | ' On exit:
39484 11a             | '------------------------------------------------------------------------------
39484 11a             | host_error
39484 11a             |           if ERROR_LED >= 0
39484 11a             |           end
39484 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
39488 11b             | 
39488 11b             | '------------------------------------------------------------------------------
39488 11b             | ' Get HID descriptor buffer for current port
39488 11b             | '------------------------------------------------------------------------------
39488 11b             | ' On entry:
39488 11b             | ' On exit:
39488 11b             | '   PB - HID descriptor buffer pointer
39488 11b             | '------------------------------------------------------------------------------
39488 11b             | get_hid_descr_buffer
39488 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3948c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
39490 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
39494 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
39498 11f             | 
39498 11f             | 
39498 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3949c 120             | 
3949c 120             | ' USB commands and error codes
3949c 120 00 00 00 00 | cmd_data        long    0
394a0 121 00 00 00 00 | usb_err_code    long    ERR_NONE
394a4 122             | 
394a4 122             | ' Parameters block assigned at cog startup
394a4 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
394a8 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
394ac 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
394b0 125             | if ACTIVITY_LED >= 0
394b0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
394b0 125             | end
394b0 125             | if ERROR_LED >= 0
394b0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
394b0 125             | end
394b0 125 00 00 00 00 | hid_descr_p     long    0
394b4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
394b4 126             | 'hkbd_report_p   long    0
394b4 126 00 00 00 00 | hub_descr_p     long    0
394b8 127 00 00 00 00 | urx_buff_p      long    0
394bc 128 00 00 00 00 | dev_desc_buff_p long    0
394c0 129 00 00 00 00 | con_desc_buff_p long    0
394c4 12a 00 00 00 00 | cache_start_p   long    0
394c8 12b 00 00 00 00 | cache_end_p     long    0
394cc 12c             | if EMUPAD_MAX_PLAYER > 0
394cc 12c             | emupad_out_ptr  long    0
394cc 12c             | end
394cc 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
394d0 12d             | 
394d0 12d             | hdev_init_start
394d0 12d             | hdev_port       res     1
394d0 12d             | hdev_port       res     1
394d0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
394d0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
394d0 12d             | kbm_next_datax  res     1
394d0 12d             | kbm_next_datax  res     1
394d0 12d             | hub_intf_num    res     1
394d0 12d             | hub_intf_num    res     1
394d0 12d             | hub_next_datax  res     1
394d0 12d             | hub_next_datax  res     1
394d0 12d             | hub_status_chg  res     1
394d0 12d             | hub_status_chg  res     1
394d0 12d             | hub_port_status res     1
394d0 12d             | hub_port_status res     1
394d0 12d             | if HAVE_MOUSE
394d0 12d             | ms_intf_num     res     1
394d0 12d             | ms_intf_num     res     1
394d0 12d             | ms_in_max_pkt   res     1
394d0 12d             | ms_in_max_pkt   res     1
394d0 12d             | end
394d0 12d             | kb_intf_num     res     1
394d0 12d             | kb_intf_num     res     1
394d0 12d             | kb_interval     res     1
394d0 12d             | kb_interval     res     1
394d0 12d             | kb_in_max_pkt   res     1
394d0 12d             | kb_in_max_pkt   res     1
394d0 12d             | kb_max_index    res     1
394d0 12d             | kb_max_index    res     1
394d0 12d             | kb_led_states   res     1
394d0 12d             | kb_led_states   res     1
394d0 12d             | gp_intf_num     res     1
394d0 12d             | gp_intf_num     res     1
394d0 12d             | gp_interval     res     1
394d0 12d             | gp_interval     res     1
394d0 12d             | gp_max_index    res     1
394d0 12d             | gp_max_index    res     1
394d0 12d             | gp_descr_len    res     1+MAX_DEVICES
394d0 12d             | gp_descr_len    res     1+MAX_DEVICES
394d0 12d             | hdev_init_end
394d0 12d             | 
394d0 12d             | ' Initialized at cog startup:
394d0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
394d0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
394d0 12d             | iframe_ct_new   res     1
394d0 12d             | iframe_ct_new   res     1
394d0 12d             | iframe_ct_base  res     1
394d0 12d             | iframe_ct_base  res     1
394d0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
394d0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
394d0 12d             | 
394d0 12d             | ' This register block is reset to zero when a USB device connects
394d0 12d             | hreg_init_start
394d0 12d             | hstatus         res     1         ' Host status flags
394d0 12d             | hstatus         res     1         ' Host status flags
394d0 12d             | hctwait         res     1         ' Poll-based wait clocks
394d0 12d             | hctwait         res     1         ' Poll-based wait clocks
394d0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
394d0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
394d0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
394d0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
394d0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
394d0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
394d0 12d             | xfer_retry      res     1         ' Control transfer retry count
394d0 12d             | xfer_retry      res     1         ' Control transfer retry count
394d0 12d             | retry           res     1         ' Transaction retry count
394d0 12d             | retry           res     1         ' Transaction retry count
394d0 12d             | utx             res     1         ' Byte to transmit on USB
394d0 12d             | utx             res     1         ' Byte to transmit on USB
394d0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
394d0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
394d0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
394d0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
394d0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
394d0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
394d0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
394d0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
394d0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
394d0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
394d0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
394d0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
394d0 12d             | frame           res     1         ' USB 1ms frame counter value
394d0 12d             | frame           res     1         ' USB 1ms frame counter value
394d0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
394d0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
394d0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
394d0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
394d0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
394d0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
394d0 12d             | crc             res     1         ' Used for CRC16 calculation
394d0 12d             | crc             res     1         ' Used for CRC16 calculation
394d0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
394d0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
394d0 12d             | retval          res     1         ' Global success/fail return parameter
394d0 12d             | retval          res     1         ' Global success/fail return parameter
394d0 12d             | context_retval  res     1         ' Operation contextual return parameter
394d0 12d             | context_retval  res     1         ' Operation contextual return parameter
394d0 12d             | ' Device stuff
394d0 12d             | hdev_id         res     1+MAX_DEVICES
394d0 12d             | hdev_id         res     1+MAX_DEVICES
394d0 12d             | hdev_bcd        res     1
394d0 12d             | hdev_bcd        res     1
394d0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
394d0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
394d0 12d             | ' Keyboard/mouse stuff
394d0 12d             | hctrl_ep_addr   res     1
394d0 12d             | hctrl_ep_addr   res     1
394d0 12d             | hctrl_max_pkt   res     1
394d0 12d             | hctrl_max_pkt   res     1
394d0 12d             | hconfig_base    res     1
394d0 12d             | hconfig_base    res     1
394d0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
394d0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
394d0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
394d0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
394d0 12d             | hdev_class      res     1
394d0 12d             | hdev_class      res     1
394d0 12d             | hdev_subclass   res     1
394d0 12d             | hdev_subclass   res     1
394d0 12d             | hdev_protocol   res     1
394d0 12d             | hdev_protocol   res     1
394d0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
394d0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
394d0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
394d0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
394d0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
394d0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
394d0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
394d0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
394d0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
394d0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
394d0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
394d0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
394d0 12d             | if HAVE_MOUSE
394d0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
394d0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
394d0 12d             | end
394d0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
394d0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
394d0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
394d0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
394d0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
394d0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
394d0 12d             | hdev_out_addr   res     1
394d0 12d             | hdev_out_addr   res     1
394d0 12d             | 
394d0 12d             | if EMUPAD_MAX_PLAYER > 0
394d0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
394d0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
394d0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
394d0 12d             | end
394d0 12d             | 
394d0 12d             | hreg_init_end
394d0 12d             | 
394d0 12d             | hidr_start
394d0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
394d0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
394d0 12d             | hidr_flags      res     1
394d0 12d             | hidr_flags      res     1
394d0 12d             | hidr_axis       res     3
394d0 12d             | hidr_axis       res     3
394d0 12d             | hidr_buttons    res     1
394d0 12d             | hidr_buttons    res     1
394d0 12d             | hidr_hats       res     1
394d0 12d             | hidr_hats       res     1
394d0 12d             | '' Above are actually useful values, 6 longs
394d0 12d             | hidr_id         res     1
394d0 12d             | hidr_id         res     1
394d0 12d             | hidr_state      res     1
394d0 12d             | hidr_state      res     1
394d0 12d             | hidr_size       res     1
394d0 12d             | hidr_size       res     1
394d0 12d             | hidr_count      res     1
394d0 12d             | hidr_count      res     1
394d0 12d             | hidr_offset     res     1
394d0 12d             | hidr_offset     res     1
394d0 12d             | hidr_usage_idx  res     1
394d0 12d             | hidr_usage_idx  res     1
394d0 12d             | hidr_lminmax    res     1
394d0 12d             | hidr_lminmax    res     1
394d0 12d             | hidr_pminmax    res     1
394d0 12d             | hidr_pminmax    res     1
394d0 12d             | hidr_type       res     1
394d0 12d             | hidr_type       res     1
394d0 12d             | hidr_end
394d0 12d             | 
394d0 12d             | ' Variables dependent on the system freqency
394d0 12d             | _var_64_lower_  res     1
394d0 12d             | _var_64_lower_  res     1
394d0 12d             | _var_64_upper_  res     1
394d0 12d             | _var_64_upper_  res     1
394d0 12d             | _12Mbps_        res     1
394d0 12d             | _12Mbps_        res     1
394d0 12d             | _1_5Mbps_       res     1
394d0 12d             | _1_5Mbps_       res     1
394d0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
394d0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
394d0 12d             | _1us_           res     1         ' 1us
394d0 12d             | _1us_           res     1         ' 1us
394d0 12d             | _10us_          res     1         ' 10us
394d0 12d             | _10us_          res     1         ' 10us
394d0 12d             | _33us_          res     1         ' 33us
394d0 12d             | _33us_          res     1         ' 33us
394d0 12d             | _txn_err_       res     1         ' 250us
394d0 12d             | _txn_err_       res     1         ' 250us
394d0 12d             | _500us_         res     1         ' 500us
394d0 12d             | _500us_         res     1         ' 500us
394d0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
394d0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
394d0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
394d0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
394d0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
394d0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
394d0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
394d0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
394d0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
394d0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
394d0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
394d0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
394d0 12d             | _preamble_wait_ res     1
394d0 12d             | _preamble_wait_ res     1
394d0 12d             | _1ms_           res     1         ' 1ms
394d0 12d             | _1ms_           res     1         ' 1ms
394d0 12d             | _2ms_           res     1         ' 2ms
394d0 12d             | _2ms_           res     1         ' 2ms
394d0 12d             | _suspend_wait_  res     1         ' 3ms
394d0 12d             | _suspend_wait_  res     1         ' 3ms
394d0 12d             | _4ms_           res     1         ' 4ms
394d0 12d             | _4ms_           res     1         ' 4ms
394d0 12d             | _xfer_wait_     res     1         ' 5ms
394d0 12d             | _xfer_wait_     res     1         ' 5ms
394d0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
394d0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
394d0 12d             | _reset_hold_    res     1         ' 15ms
394d0 12d             | _reset_hold_    res     1         ' 15ms
394d0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
394d0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
394d0 12d             | _21ms_          res     1         ' 21ms
394d0 12d             | _21ms_          res     1         ' 21ms
394d0 12d             | _100ms_         res     1         ' 100ms
394d0 12d             | _100ms_         res     1         ' 100ms
394d0 12d             | _500ms_         res     1         ' 500ms
394d0 12d             | _500ms_         res     1         ' 500ms
394d0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
394d0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
394d0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
394d0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
394d0 12d             | '------------------------------------------------------------------------------
394d0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
394d0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
394d0 12d             | _usb_d_ls_nco_  res     1
394d0 12d             | _usb_d_ls_nco_  res     1
394d0 12d             | _usb_h_fs_nco_  res     1
394d0 12d             | _usb_h_fs_nco_  res     1
394d0 12d             | _usb_d_fs_nco_  res     1
394d0 12d             | _usb_d_fs_nco_  res     1
394d0 12d             | '------------------------------------------------------------------------------
394d0 12d             | ' Scratch registers
394d0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
394d0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
394d0 12d             | htmp1           res     1
394d0 12d             | htmp1           res     1
394d0 12d             | htmp2           res     1
394d0 12d             | htmp2           res     1
394d0 12d             | htmp3           res     1
394d0 12d             | htmp3           res     1
394d0 12d             | hrep            res     1         ' Repeat count
394d0 12d             | hrep            res     1         ' Repeat count
394d0 12d             | hsave0          res     1         ' Subroutine parameter saves
394d0 12d             | hsave0          res     1         ' Subroutine parameter saves
394d0 12d             | hsave1          res     1
394d0 12d             | hsave1          res     1
394d0 12d             | hsave2          res     1
394d0 12d             | hsave2          res     1
394d0 12d             | isrtmp1         res     1
394d0 12d             | isrtmp1         res     1
394d0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
394d0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
394d0 12d             | hr0             res     1         ' Multi-purpose registers
394d0 12d             | hr0             res     1         ' Multi-purpose registers
394d0 12d             | hr1             res     1
394d0 12d             | hr1             res     1
394d0 12d             | hr2             res     1
394d0 12d             | hr2             res     1
394d0 12d             | hr3             res     1
394d0 12d             | hr3             res     1
394d0 12d             | hpar1           res     1         ' Routine entry/exit parameters
394d0 12d             | hpar1           res     1         ' Routine entry/exit parameters
394d0 12d             | hpar2           res     1
394d0 12d             | hpar2           res     1
394d0 12d             | hpar3           res     1
394d0 12d             | hpar3           res     1
394d0 12d             | hct2            res     1         ' Function response bus turn-around timer
394d0 12d             | hct2            res     1         ' Function response bus turn-around timer
394d0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
394d0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
394d0 12d             | mod_cnt         res     1         ' Used in idle loops
394d0 12d             | mod_cnt         res     1         ' Used in idle loops
394d0 12d             |                 fit     $1F0
394d0 12d             |                 org     $200
394d0 200             | hlut_start
394d0 200             | 
394d0 200             | '------------------------------------------------------------------------------
394d0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
394d0 200             | ' settings to startup defaults.
394d0 200             | '------------------------------------------------------------------------------
394d0 200             | ' On entry:
394d0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
394d0 200             | '------------------------------------------------------------------------------
394d0 200             | set_speed_full
394d0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
394d4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
394d8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
394dc 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
394e0 204             | '                ret                             wcz     ' Restore caller flags on exit
394e0 204             | 
394e0 204             | '------------------------------------------------------------------------------
394e0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
394e0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
394e0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
394e0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
394e0 204             | ' putting the smart pins into reset.
394e0 204             | '------------------------------------------------------------------------------
394e0 204             | ' On entry:
394e0 204             | ' On exit: CZ flags restored to caller states
394e0 204             | '------------------------------------------------------------------------------
394e0 204             | set_speed_low
394e0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
394e4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
394e8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
394ec 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
394f0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
394f4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
394f8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
394fc 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
39500 20c             | 
39500 20c             | '------------------------------------------------------------------------------
39500 20c             | ' Perform configuration stuff required when a device intitially connects.
39500 20c             | '------------------------------------------------------------------------------
39500 20c             | ' On entry:
39500 20c             | ' On exit:
39500 20c             | '------------------------------------------------------------------------------
39500 20c             | on_connect
39500 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
39504 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
39508 20e             | .retry
39508 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3950c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
39510 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
39514 211 00 08 00 FF 
39518 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3951c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
39520 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39524 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39528 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3952c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
39530 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39534 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
39538 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3953c 21b 4C 03 B0 FD |                 call    #poll_waitx
39540 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
39544 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
39548 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3954c 21f B8 FF 9F FD |                 jmp     #.retry
39550 220             | .get_dev_desc
39550 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39554 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
39558 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3955c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
39560 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
39564 225 88 FB BF FD |                 call    #reset
39568 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3956c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39570 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
39574 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
39578 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3957c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
39580 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
39584 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39588 22e 04 00 00 FF 
3958c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
39590 230 34 FA BF FD |                 call    #calc_crc5
39594 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
39598 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3959c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
395a0 234 F7 AD C2 FA |                 rdbyte  total_data, pb
395a4 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
395a8 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
395ac 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
395b0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
395b4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
395b8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
395bc 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
395c0 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
395c4 23d C4 02 B0 FD |                 call    #poll_waitx
395c8 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
395cc 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
395d0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
395d4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
395d8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
395dc 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
395e0 244 2D 00 64 5D |         if_nz   ret
395e4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
395e8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
395ec 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
395f0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
395f4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
395f8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
395fc 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39600 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39604 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39608 24e 2C FB 9F CD |         if_b    jmp     #host_error
3960c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
39610 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
39614 251 2D EC 63 FD |                 call    pa
39618 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3961c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
39620 254 2C EC 63 FD |                 jmp     pa
39624 255             | 
39624 255             | '------------------------------------------------------------------------------
39624 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
39624 255             | ' Status reporting is always in the function-to-host direction.
39624 255             | '------------------------------------------------------------------------------
39624 255             | ' On entry:
39624 255             | '   PTRA - start address of the SETUP data in hub.
39624 255             | '   PB - start address of the buffer/struct to be written to during the IN data
39624 255             | '     stage.
39624 255             | '   ep_addr_pid - device address, endpoint and CRC5.
39624 255             | ' On exit:
39624 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
39624 255             | '     contains the count of data stage bytes actually received, which must
39624 255             | '     always be <= the count requested.
39624 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
39624 255             | '     more specific USB operation error code.
39624 255             | '------------------------------------------------------------------------------
39624 255             | control_read
39624 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
39628 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3962c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
39630 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
39634 259             | .xfer_start
39634 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
39638 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3963c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39640 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
39644 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
39648 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3964c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
39650 260 61 00 00 FF 
39654 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
39658 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3965c 263             | .data
3965c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
39660 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
39664 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
39668 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3966c 267             | .nak_retry
3966c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
39670 268             | .in_retry
39670 268 BC F6 BF FD |                 call    #txn_in
39674 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
39678 26a 28 00 90 AD |         if_z    jmp     #.commit
3967c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39680 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
39684 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39688 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3968c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
39690 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
39694 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
39698 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3969c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
396a0 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
396a4 275             | .commit
396a4 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
396a8 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
396ac 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
396b0 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
396b4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
396b8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
396bc 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
396c0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
396c4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
396c8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
396cc 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
396d0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
396d4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
396d8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
396dc 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
396e0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
396e4 285             | .pre_status
396e4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
396e8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
396ec 287 00 B0 06 F6 |                 mov     pkt_data, #0
396f0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
396f4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
396f8 28a 61 00 00 FF 
396fc 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
39700 28c             | .out_retry
39700 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
39704 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39708 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3970c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39710 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
39714 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39718 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3971c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
39720 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39724 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
39728 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3972c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3972c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3972c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3972c 297             | .xfer_retry
3972c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
39730 298 58 01 B0 FD |                 call    #poll_waitx
39734 299 8C F9 BF FD |                 call    #wait_txn_ok
39738 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3973c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
39740 29c C8 EF 03 F6 |                 mov     pb, hpar3
39744 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
39748 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3974c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
39750 2a0             | 
39750 2a0             | '------------------------------------------------------------------------------
39750 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
39750 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
39750 2a0             | ' the SETUP data struct is filled with the required values.
39750 2a0             | '------------------------------------------------------------------------------
39750 2a0             | ' On entry:
39750 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
39750 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
39750 2a0             | '     stage.
39750 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
39750 2a0             | ' On exit:
39750 2a0             | '   retval - used to convey the success/failure of each stage.
39750 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
39750 2a0             | '     more specific USB operation error code.
39750 2a0             | '------------------------------------------------------------------------------
39750 2a0             | control_write
39750 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
39754 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39758 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3975c 2a3             | 
3975c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
39760 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
39764 2a5 F7 91 03 F6 |                 mov     hpar3, pb
39768 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3976c 2a7             | .xfer_start
3976c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
39770 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
39774 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
39778 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3977c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
39780 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
39784 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
39788 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3978c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
39790 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
39794 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
39798 2b2             | .data
39798 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3979c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
397a0 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
397a4 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
397a8 2b6             | .out_retry
397a8 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
397ac 2b7 88 F6 BF FD |                 call    #txn_out
397b0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
397b4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
397b8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
397bc 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
397c0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
397c4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
397c8 2be             | .commit
397c8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
397cc 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
397d0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
397d4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
397d8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
397dc 2c3             | pre_status_in
397dc 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
397e0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
397e4 2c5             | .status_retry
397e4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
397e8 2c6 44 F5 BF FD |                 call    #txn_in
397ec 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
397f0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
397f4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
397f8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
397fc 2cb 2D 00 64 AD |         if_z    ret
39800 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
39804 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39808 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3980c 2cf             | '               ret                                     ' Caller must handle transfer retirement
3980c 2cf             | 
3980c 2cf             | '------------------------------------------------------------------------------
3980c 2cf             | ' Execute an IN interrupt transaction.
3980c 2cf             | '------------------------------------------------------------------------------
3980c 2cf             | ' On entry:
3980c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3980c 2cf             | '   hpar2 - Address of the IN data buffer
3980c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3980c 2cf             | ' On exit:
3980c 2cf             | '   retval - the result of the operation.
3980c 2cf             | '   hpar3 - the count of IN data bytes actually received.
3980c 2cf             | '------------------------------------------------------------------------------
3980c 2cf             | do_int_in
3980c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
39810 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39814 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39818 2d2             | 
39818 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3981c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
39820 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
39824 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
39828 2d6             | .retry
39828 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3982c 2d7 00 F5 BF FD |                 call    #txn_in
39830 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
39834 2d9 1C 00 90 AD |         if_z    jmp     #.commit
39838 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3983c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
39840 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
39844 2dd 54 00 B0 FD |                 call    #retry_wait
39848 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3984c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
39850 2e0 D4 FF 9F FD |                 jmp     #.retry
39854 2e1             | .commit
39854 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
39858 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3985c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
39860 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
39864 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
39868 2e6             | .post_ret
39868 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3986c 2e7             | 
3986c 2e7             | 
3986c 2e7             | '------------------------------------------------------------------------------
3986c 2e7             | ' Resets the downstream hub port to FS
3986c 2e7             | '------------------------------------------------------------------------------
3986c 2e7             | dwnstream_reset
3986c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
39870 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
39874 2e9             | 
39874 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
39878 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3987c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39880 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
39884 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39888 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3988c 2ef             | 
3988c 2ef             | '------------------------------------------------------------------------------
3988c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3988c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3988c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3988c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3988c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3988c 2ef             | '------------------------------------------------------------------------------
3988c 2ef             | ' On entry:
3988c 2ef             | '   hctwait - wait interval in sysclocks.
3988c 2ef             | ' On exit:
3988c 2ef             | '------------------------------------------------------------------------------
3988c 2ef             | poll_waitx
3988c 2ef 1A 92 63 FD |                 getct   hct2
39890 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
39894 2f1             | .wait
39894 2f1 FF 25 CC FB |                 jnct2   #.wait
39898 2f2 2D 00 64 FD |                 ret
3989c 2f3             | 
3989c 2f3             | '------------------------------------------------------------------------------
3989c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3989c 2f3             | '------------------------------------------------------------------------------
3989c 2f3             | ' On entry:
3989c 2f3             | '   retval - transaction response PID or error code.
3989c 2f3             | ' On exit:
3989c 2f3             | '------------------------------------------------------------------------------
3989c 2f3             | retry_wait
3989c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
398a0 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
398a4 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
398a8 2f6 14 00 90 AD |         if_z    jmp     #.nak
398ac 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
398b0 2f8 D8 FF BF FD |                 call    #poll_waitx
398b4 2f9             | .dec
398b4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
398b8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
398bc 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
398c0 2fc             | .nak
398c0 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
398c4 2fd C4 FF BF FD |                 call    #poll_waitx
398c8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
398cc 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
398d0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
398d4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
398d8 302 2D 00 64 FD |                 ret
398dc 303             | 
398dc 303             | host_reset
398dc 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
398e0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
398e4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
398e4 305 BD 01 05 FF 
398e8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
398ec 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
398f0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
398f4 309             | ' Check to see if the system clock has been changed.
398f4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
398f8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
398fc 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
39900 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
39904 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39908 30e 40 46 62 FD |                 dirl    dp
3990c 30f             | 
3990c 30f 28 02 64 FD |                 setq    #1
39910 310 80 00 80 FF 
39914 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
39918 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3991c 313             | .enable
3991c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
39920 314 41 46 62 FD |                 dirh    dp
39924 315 1F 36 63 FD |                 waitx   _1us_
39928 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3992c 317             | 
3992c 317             |                 ' Handle Port protection enable and startup delay
3992c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
39930 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
39934 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
39938 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3993c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
39940 31c             | 
39940 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
39944 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
39948 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3994c 31f 00 00 04 F6 |                 mov     0-0, #0
39950 320             | .regloop
39950 320             | 
39950 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
39950 320             | 
39950 320             | discon_entry
39950 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
39954 321             | 
39954 321             |               
39954 321             |         if HAVE_HIDPAD
39954 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
39958 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3995c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
39960 324 F7 01 68 FC |                 wrlong  #0,pb
39964 325             |         end
39964 325             |         if EMUPAD_MAX_PLAYER > 0
39964 325             |         end
39964 325             | 
39964 325             |                 ' Fall through to disconnected loop
39964 325             | 
39964 325             | '-----------------------------------------------------------------------------------------------------------------
39964 325             | ' Device connect handling (Section 7.1.7.3).
39964 325             | '-----------------------------------------------------------------------------------------------------------------
39964 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
39964 325             | ' device to connect (Section 7.1.7.3).
39964 325             | '-----------------------------------------------------------------------------------------------------------------
39964 325             | disconnected
39964 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
39968 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3996c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
39970 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
39974 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
39978 32a             |         if ACTIVITY_LED >= 0
39978 32a             |         end
39978 32a 22 A7 82 FA |                 rqpin   urx, dm
3997c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
39980 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
39984 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
39988 32e             | .se1_test
39988 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3998c 32f FC FE BF FD |                 call    #poll_waitx
39990 330 22 A7 82 FA |                 rqpin   urx, dm
39994 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
39998 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3999c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
399a0 334             | .se1            'SE1 is a fatal error condition
399a0 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
399a4 335 E4 FE BF FD |                 call    #poll_waitx
399a8 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
399ac 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
399b0 338             | .connect_test                                           ' Test lines until stable J/K state seen
399b0 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
399b4 339 22 A7 82 FA |                 rqpin   urx, dm
399b8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
399bc 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
399c0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
399c4 33d             | connected
399c4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
399c8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
399cc 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
399d0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
399d4 341             | .set_pulse
399d4 341 1A 64 63 FD |                 getct   _pulse_time_
399d8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
399dc 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
399dc 343             | ' of 1ms and make a correction, if necessary.
399dc 343             | '                mov     htmp, _1ms_
399dc 343             | '                subs    htmp, iframe_delta
399dc 343             | '                adds    _frame1ms_clks_, htmp
399dc 343             | '                debug(udec(_frame1ms_clks_))
399dc 343             | 
399dc 343             |                 ' Fall through to idle/processing loop
399dc 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
399e0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
399e4 345             | 
399e4 345             | hidle
399e4 345 22 A7 82 FA |                 rqpin   urx, dm
399e8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
399ec 347 98 00 90 CD |         if_c    jmp     #.se0_test
399f0 348 24 06 70 FD |                 pollct3                         wc
399f4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
399f8 34a 1A 94 63 FD |                 getct   hct3
399fc 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
39a00 34c             | 
39a00 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39a04 34d 00 70 E3 F8 |                 getbyte htmp
39a08 34e             | 
39a08 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
39a0c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
39a10 350 40 00 90 AD |         if_z    jmp     #.poll
39a14 351             | 
39a14 351             |         if _HAVE_GAMEPAD
39a14 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
39a18 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
39a1c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
39a20 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
39a24 355 2C 00 90 AD |         if_z    jmp     #.poll
39a28 356             |         end
39a28 356             | 
39a28 356             |         if HAVE_MOUSE
39a28 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39a2c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
39a30 358 20 00 90 AD |         if_z    jmp     #.poll
39a34 359             |         end
39a34 359             | 
39a34 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
39a38 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
39a3c 35b 14 00 90 AD |         if_z    jmp     #.poll
39a40 35c             | 
39a40 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
39a44 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
39a48 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
39a4c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
39a50 360             |         if HAVE_MOUSE
39a50 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
39a54 361             |         else
39a54 361             |         end
39a54 361             | 
39a54 361             | .poll
39a54 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
39a58 362 2D EC 63 FD |                 call    pa
39a5c 363             | .skip_poll
39a5c 363             | 
39a5c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
39a60 364             | 
39a60 364             | .nopoll
39a60 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
39a64 365 44 00 90 AD |         if_z    jmp     #hsuspend
39a68 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
39a6c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
39a70 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
39a74 369 1A 84 63 FD |                 getct   hr0
39a78 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
39a7c 36b             |         if ACTIVITY_LED >= 0
39a7c 36b             |         end
39a7c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
39a80 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
39a84 36d 5C FF 9F FD |                 jmp     #hidle
39a88 36e             | ' Check for extended SE0 state on the bus
39a88 36e             | .se0_test
39a88 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
39a8c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
39a90 370 22 A7 82 FA |                 rqpin   urx, dm
39a94 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
39a98 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
39a9c 373 24 F6 BF FD |                 call    #wait_txn_ok
39aa0 374 00 00 80 FF 
39aa4 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
39aa8 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
39aa8 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
39aac 377             | 
39aac 377             | hsuspend
39aac 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
39ab0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
39ab4 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
39ab8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
39abc 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
39ac0 37c 00 96 07 F6 |                 mov     mod_cnt, #0
39ac4 37d             | 
39ac4 37d             |                 ' Fall through to resume wait loop
39ac4 37d             | 
39ac4 37d             | hwait_resume
39ac4 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
39ac8 37e 02 86 47 F0 |                 shr     hr1, #2
39acc 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
39ad0 380             |         if ACTIVITY_LED >= 0
39ad0 380             |         end
39ad0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
39ad4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
39ad8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
39adc 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
39ae0 384 18 00 90 AD |         if_z    jmp     #.resume
39ae4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
39ae8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
39aec 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
39af0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39af4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
39af8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
39afc 38b             | .resume
39afc 38b 22 05 28 FC |                 wypin   #OUT_K, dm
39b00 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
39b04 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
39b08 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
39b0c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
39b10 390 1F 70 63 FD |                 waitx   htmp
39b14 391 22 07 28 FC |                 wypin   #OUT_J, dm
39b18 392 01 70 47 F0 |                 shr     htmp, #1
39b1c 393 1F 70 63 FD |                 waitx   htmp
39b20 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39b24 395 1A 92 62 FD |                 getct   iframe_ct_base
39b28 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39b2c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39b30 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
39b34 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
39b38 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
39b3c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
39b40 39c             | 
39b40 39c             | '------------------------------------------------------------------------------
39b40 39c             | ' Send preamble to enable low-speed HUB ports
39b40 39c             | '------------------------------------------------------------------------------
39b40 39c             | ' On entry:
39b40 39c             | ' On exit:
39b40 39c             | '   USB baud rate set to low-speed
39b40 39c             | '------------------------------------------------------------------------------
39b40 39c             | utx_pre
39b40 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39b44 39d 40 46 62 FD |                 dirl    dp
39b48 39e 28 02 64 FD |                 setq    #1
39b4c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
39b50 3a0 58 44 62 FD |                 drvl    dm
39b54 3a1 59 46 62 FD |                 drvh    dp
39b58 3a2             | 
39b58 3a2 1E 00 00 FF 
39b5c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
39b60 3a4             | 
39b60 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
39b64 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
39b68 3a6 28 02 64 3D |         if_nc   setq    #1
39b6c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
39b70 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
39b74 3a9             | .l1
39b74 3a9             | 
39b74 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39b78 3aa 40 46 62 FD |                 dirl    dp
39b7c 3ab 28 02 64 FD |                 setq    #1
39b80 3ac 80 00 80 FF 
39b84 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
39b88 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
39b8c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
39b90 3b0 41 46 62 FD |                 dirh    dp
39b94 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39b98 3b2             | 
39b98 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
39b9c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
39ba0 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
39ba4 3b5             | 
39ba4 3b5             | hlut_end
39ba4 3b5             |                 fit     $400
39ba4 3b5             |                 orgh
39ba4                 | if OVERLAP_MEMORY
39ba4                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
39ba4                 | end
39ba4                 | '------------------------------------------------------------------------------
39ba4                 | ' Routines called from cog space.
39ba4                 | '------------------------------------------------------------------------------
39ba4                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
39ba4                 | '------------------------------------------------------------------------------
39ba4                 | 
39ba4                 | '------------------------------------------------------------------------------
39ba4                 | ' USB host cog initialization.
39ba4                 | '------------------------------------------------------------------------------
39ba4                 | usb_host_init
39ba4                 |                 ' Initialize buffer pointers
39ba4                 |         if OVERLAP_MEMORY
39ba4                 |         else
39ba4     40 15 B0 FE |                 loc     pb, #hid_descr
39ba8                 |         end
39ba8     F7 4B 02 F6 |                 mov     hid_descr_p, pb
39bac                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
39bac                 |                 {
39bac                 |                 }
39bac                 |         
39bac                 |                 {
39bac                 |                 }
39bac                 |                 'loc     pb,#hkbd_report
39bac                 |                 'mov     hkbd_report_p,pb
39bac                 | 
39bac     08 1D B0 FE |                 loc     pb, #hub_descr
39bb0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
39bb4     1D 1D B0 FE |                 loc     pb, #urx_buff
39bb8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
39bbc     95 1D B0 FE |                 loc     pb, #dev_desc_buff
39bc0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
39bc4     9F 1D B0 FE |                 loc     pb, #con_desc_buff
39bc8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
39bcc     18 15 B0 FE |                 loc     pb, #usb_cache_start
39bd0     F7 55 02 F6 |                 mov     cache_start_p, pb
39bd4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
39bd8     F7 57 02 F6 |                 mov     cache_end_p, pb
39bdc                 | 
39bdc                 |         if ERROR_LED >= 0
39bdc                 |         end
39bdc                 | 
39bdc                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
39bdc                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
39bdc                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
39bdc                 | ' Configure and enable the Serial Host USB port.
39bdc     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
39be0                 | 
39be0                 | '------------------------------------------------------------------------------
39be0                 | ' Timing calculations happen before any interrupt(s) are enabled.
39be0                 | '------------------------------------------------------------------------------
39be0                 | ' On entry:
39be0                 | '   htmp - current CLKFREQ value.
39be0                 | '------------------------------------------------------------------------------
39be0                 | hinit_usb_timings
39be0                 | '                getct   htmp2
39be0     B8 59 02 F6 |                 mov     save_sysclk, htmp
39be4     8D 5B 80 FF 
39be8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
39bec     18 30 63 FD |                 getqx   _12Mbps_
39bf0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
39bf4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
39bf8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
39bfc     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
39c00     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
39c04     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
39c08     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
39c0c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
39c10     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
39c14     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
39c18     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
39c1c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
39c20     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
39c24     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
39c28     80 00 00 FF 
39c2c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
39c30     18 2C 63 FD |                 getqx   _var_64_lower_
39c34     19 2E 63 FD |                 getqy   _var_64_upper_
39c38     28 2C 63 FD |                 setq    _var_64_lower_
39c3c     65 CD 1D FF 
39c40     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
39c44     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
39c48     01 00 00 FF 
39c4c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
39c50     18 2C 63 FD |                 getqx   _var_64_lower_
39c54     19 2E 63 FD |                 getqy   _var_64_upper_
39c58     28 2C 63 FD |                 setq    _var_64_lower_
39c5c     A1 07 00 FF 
39c60     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
39c64     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
39c68     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
39c6c     09 36 57 F0 |                 shr     _1us_, #9               wc
39c70     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
39c74     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
39c78     18 38 63 FD |                 getqx   _10us_
39c7c     09 38 57 F0 |                 shr     _10us_, #9              wc
39c80     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
39c84     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
39c88     18 3A 63 FD |                 getqx   _33us_
39c8c     09 3A 57 F0 |                 shr     _33us_, #9              wc
39c90     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
39c94     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
39c98     18 3C 63 FD |                 getqx   _txn_err_
39c9c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
39ca0     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
39ca4     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
39ca8     18 3E 63 FD |                 getqx   _500us_
39cac     09 3E 57 F0 |                 shr     _500us_, #9             wc
39cb0     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
39cb4     01 00 00 FF 
39cb8     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
39cbc     18 40 63 FD |                 getqx   _txn_ok_ls_
39cc0     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
39cc4     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
39cc8     01 00 00 FF 
39ccc     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
39cd0     18 42 63 FD |                 getqx   _txn_ok_fs_
39cd4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
39cd8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
39cdc     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
39ce0     05 00 00 FF 
39ce4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
39ce8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
39cec     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
39cf0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
39cf4     1C 00 00 FF 
39cf8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
39cfc     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
39d00     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
39d04     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
39d08     00 00 00 FF 
39d0c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
39d10     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
39d14     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
39d18     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
39d1c     04 00 00 FF 
39d20     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
39d24     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
39d28     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
39d2c     8D 5B 00 FF 
39d30     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
39d34     18 4C 63 FD |                 getqx   _preamble_wait_
39d38     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
39d3c     01 00 00 FF 
39d40     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
39d44     18 2C 63 FD |                 getqx   _var_64_lower_
39d48     19 2E 63 FD |                 getqy   _var_64_upper_
39d4c     28 2C 63 FD |                 setq    _var_64_lower_
39d50     01 00 00 FF 
39d54     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
39d58     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
39d5c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
39d60     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
39d64     FF FF 7F FF 
39d68     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
39d6c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
39d70     A7 51 03 F6 |                 mov     _2ms_, _1ms_
39d74     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
39d78     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
39d7c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
39d80     A7 55 03 F6 |                 mov     _4ms_, _1ms_
39d84     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
39d88     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
39d8c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
39d90     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
39d94     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
39d98     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
39d9c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
39da0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
39da4     A7 59 03 F6 |                 mov     _8ms_, _1ms_
39da8     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
39dac     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
39db0     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
39db4     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
39db8     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
39dbc     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
39dc0     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
39dc4     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
39dc8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
39dcc     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
39dd0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
39dd4                 | '        _ret_   mov     _1sec_, save_sysclk
39dd4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
39dd4                 | '                ret
39dd4                 | {
39dd4                 | }
39dd4                 | 
39dd4                 | '------------------------------------------------------------------------------
39dd4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
39dd4                 | ' one. If it is, start the task progression that will configure the device for
39dd4                 | ' use.
39dd4                 | '------------------------------------------------------------------------------
39dd4                 | ' On entry:
39dd4                 | '   hconfig_base - start address of the cached config descriptor chain.
39dd4                 | ' On exit:
39dd4                 | '------------------------------------------------------------------------------
39dd4                 | hparse_con_desc
39dd4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
39dd8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
39ddc     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
39de0     4E 70 FF F9 |                 movbyts htmp,#%%1032
39de4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
39de8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
39de8                 | 
39de8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
39dec     6E ED 03 F1 |                 add     pa, hconfig_base
39df0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
39df4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
39df4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
39df4                 | ' that defines a keyboard and/or mouse.
39df4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
39df8                 | .next_intf
39df8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39dfc     BC 01 90 3D |         if_ae   jmp     #hset_config
39e00     6E F3 03 F6 |                 mov     ptrb, hconfig_base
39e04     75 F3 03 F1 |                 add     ptrb, hnext_desc
39e08     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
39e0c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
39e10     0C 00 90 AD |         if_z    jmp     #.intf
39e14     80 71 C7 FA |                 rdbyte  htmp, ptrb
39e18     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
39e1c     D8 FF 9F FD |                 jmp     #.next_intf
39e20                 | .intf
39e20     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
39e24     00 90 07 F6 |                 mov     hpar3, #0
39e28     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
39e2c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
39e30     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
39e34     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
39e38                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
39e38                 | 
39e38                 | .endp
39e38     80 71 C7 FA |                 rdbyte  htmp, ptrb
39e3c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
39e40     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39e44     78 00 90 3D |         if_ae   jmp     #.get_device
39e48     6E F3 03 F6 |                 mov     ptrb, hconfig_base
39e4c     75 F3 03 F1 |                 add     ptrb, hnext_desc
39e50     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
39e54     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
39e58     64 00 90 AD |         if_z    jmp     #.get_device
39e5c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
39e60     04 00 90 AD |         if_z    jmp     #.get_ep
39e64     D0 FF 9F FD |                 jmp     #.endp
39e68                 | .get_ep
39e68     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
39e6c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
39e70     0F 86 67 F0 |                 shl     hr1, #8 + 7
39e74     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
39e78     3F 00 00 FF 
39e7c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
39e80     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
39e84     00 8E 0F F2 |                 cmp     hpar2, #0               wz
39e88     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
39e8c     00 90 0F F2 |                 cmp     hpar3, #0               wz
39e90     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
39e94     A0 FF 9F FD |                 jmp     #.endp
39e98                 | .in_ep
39e98     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
39e9c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
39ea0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
39ea0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
39ea4     C2 89 DB F8 |                 setbyte hr2, hr0, #3
39ea8     8C FF 9F FD |                 jmp     #.endp
39eac                 | .out_ep
39eac     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
39eb0     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
39eb4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
39eb4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
39eb8     C2 8B DB F8 |                 setbyte hr3, hr0, #3
39ebc     78 FF 9F FD |                 jmp     #.endp
39ec0                 | 
39ec0                 | .get_device
39ec0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
39ec4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
39ec8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
39ecc     68 00 90 AD |         if_z    jmp     #.gamepad
39ed0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
39ed4     AC 00 90 AD |         if_z    jmp     #.hub
39ed8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
39edc     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
39ee0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
39ee4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
39ee8     4C 00 90 AD |         if_z    jmp     #.gamepad
39eec     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
39ef0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
39ef4                 | .keyboard
39ef4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
39ef8                 |         if HAVE_MOUSE
39ef8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
39efc                 |         else
39efc                 |         end
39efc     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
39f00     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
39f04     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39f08     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
39f0c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
39f10     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
39f14                 |                 'debug(udec(kb_intf_num))
39f14                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
39f14     E0 FE 9F FD |                 jmp     #.next_intf
39f18                 | if HAVE_MOUSE
39f18                 | .mouse
39f18     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
39f1c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
39f20     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
39f24     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
39f28     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39f2c                 |                 'getbyte ms_interval, hr2, #3
39f2c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
39f30     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
39f34                 |                 'debug(udec(kb_intf_num))
39f34                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
39f34     C0 FE 9F FD |                 jmp     #.next_intf
39f38                 | end
39f38                 | .gamepad
39f38     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
39f3c     C7 71 63 F5 |                 xor     htmp, hpar2
39f40     3F 00 00 FF 
39f44     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39f48     AC FE 9F AD |         if_z    jmp     #.next_intf
39f4c                 |         if HAVE_MOUSE
39f4c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
39f50     C7 71 63 F5 |                 xor     htmp, hpar2
39f54     3F 00 00 FF 
39f58     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39f5c     98 FE 9F AD |         if_z    jmp     #.next_intf
39f60                 |         end
39f60     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
39f64     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
39f68     8C FE 9F 5D |         if_nz   jmp     #.next_intf
39f6c                 | 
39f6c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39f70     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
39f74     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39f78     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
39f7c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
39f80                 |                 'debug(udec(gp_intf_num))
39f80                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
39f80     74 FE 9F FD |                 jmp     #.next_intf
39f84                 | .hub
39f84     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
39f88     6C FE 9F 5D |         if_nz   jmp     #.next_intf
39f8c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
39f90     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
39f94     60 FE 9F 5D |         if_nz   jmp     #.next_intf
39f98     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
39f9c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
39fa0     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
39fa4     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
39fa8     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
39fac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39fb0     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
39fb4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
39fb8                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
39fb8     3C FE 9F FD |                 jmp     #.next_intf
39fbc                 | 
39fbc                 | '------------------------------------------------------------------------------
39fbc                 | ' If a newly-connected device is recognized, do whatever is needed to configure
39fbc                 | ' it according to its function, or functions. In the case of this boot protocol
39fbc                 | ' keyboard/mouse class driver:
39fbc                 | ' - SetConfiguration(config_num)
39fbc                 | ' - SetProtocol(boot)
39fbc                 | ' - SetIdle(indefinite)
39fbc                 | ' - Enter the device interrupt IN polling task stage.
39fbc                 | '------------------------------------------------------------------------------
39fbc                 | ' On entry:
39fbc                 | ' On exit:
39fbc                 | '------------------------------------------------------------------------------
39fbc                 | hset_config
39fbc                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
39fbc                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
39fbc     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
39fc0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39fc4     00 00 0C F2 |                 cmp     0-0, #0                 wz
39fc8     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
39fcc                 |         if HAVE_MOUSE
39fcc     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
39fd0                 |         end
39fd0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
39fd4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
39fd8                 | .set_config
39fd8     6C 0E D0 FE |                 loc     ptra, #set_config
39fdc     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
39fe0     6E ED 03 F1 |                 add     pa, hconfig_base
39fe4     F6 8D C3 FA |                 rdbyte  hpar1, pa
39fe8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
39fec     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
39ff0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
39ff4     A0 02 A0 FD |                 call    #control_write
39ff8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39ffc     2D 00 64 5D |         if_nz   ret
3a000                 | .kbd_config
3a000     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3a004     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3a008                 | 
3a008     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3a00c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a010     3F 00 00 FF 
3a014     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a018     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3a01c                 | 
3a01c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3a020     34 0E D0 FE |                 loc     ptra, #set_protocol
3a024     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3a028     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a02c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3a030     A0 02 A0 FD |                 call    #control_write
3a034     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a038     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3a03c     E4 02 90 5D |         if_nz   jmp     #.notify_client
3a040     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3a044     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3a048     30 03 B0 FD |                 call    #hset_idle
3a04c                 |                 'cmp     retval, #PID_ACK        wz
3a04c                 |         'if_nz   mov     hkbd_ep_addr, #0
3a04c                 |         'if_nz   jmp     #.notify_client
3a04c     A8 99 02 F6 |                 mov     hctwait, _2ms_
3a050     EF 02 A0 FD |                 call    #poll_waitx
3a054     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3a058     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3a05c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3a060     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3a064     2C 03 B0 FD |                 call    #hset_kbdled_report
3a068     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a06c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3a070     B0 02 90 5D |         if_nz   jmp     #.notify_client
3a074     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3a078     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a07c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a080     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3a084     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3a088     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3a08c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3a090     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3a094     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3a098     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3a09c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3a0a0                 |         if !!HAVE_MOUSE
3a0a0                 |         end
3a0a0                 | 
3a0a0                 | .mouse_config
3a0a0                 | if HAVE_MOUSE
3a0a0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3a0a4     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3a0a8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3a0ac     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a0b0     3F 00 00 FF 
3a0b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a0b8     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3a0bc                 | 
3a0bc                 |                 debug("mouse passed addr check")
3a0bc                 | 
3a0bc     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3a0c0     00 00 80 FF 
3a0c4     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3a0c8     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3a0cc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a0d0     55 02 A0 FD |                 call    #control_read
3a0d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a0d8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3a0dc     44 02 90 5D |         if_nz   jmp     #.notify_client
3a0e0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3a0e4     56 01 00 F6 |                 mov     0-0, total_data
3a0e8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a0ec                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3a0ec                 | 
3a0ec     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3a0f0     64 0D D0 FE |                 loc     ptra, #set_protocol
3a0f4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3a0f8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a0fc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3a100     A0 02 A0 FD |                 call    #control_write
3a104     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a108     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3a10c     14 02 90 5D |         if_nz   jmp     #.notify_client
3a110                 |                 debug("mouse passed SetProtocol")
3a110     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3a114     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3a118     60 02 B0 FD |                 call    #hset_idle
3a11c                 |                 'cmp     retval, #PID_ACK        wz
3a11c                 |         'if_nz   mov     hmouse_ep_addr, #0
3a11c                 |         'if_nz   jmp     #.notify_client
3a11c                 |                 debug("mouse passed SetIdle")
3a11c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3a120     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a124     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a128     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3a12c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3a130     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3a134     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3a138     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3a13c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3a140     3F 00 00 FF 
3a144     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3a148     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3a14c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3a150     D0 01 90 FD |                 jmp     #.notify_client
3a154                 | end
3a154                 | .gamepad_config
3a154                 | if _HAVE_GAMEPAD
3a154     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a158     00 00 0C F2 |                 cmp     0-0, #0                 wz
3a15c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3a160     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3a164     00 70 03 F6 |                 mov     htmp, 0-0
3a168     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a16c     3F 00 00 FF 
3a170     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a174     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3a178                 | 
3a178     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3a17c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3a180     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a184     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a188     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3a18c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a190     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3a194     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3a198     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3a19c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a1a0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a1a4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3a1a8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3a1ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3a1b0                 | 
3a1b0                 |                 if EMUPAD_MAX_PLAYER > 0
3a1b0                 |                 
3a1b0                 | .rule_loop           
3a1b0                 |                 end
3a1b0                 | 
3a1b0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3a1b4     5C 00 90 AD |         if_e    jmp     #.xinput
3a1b8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3a1bc     00 70 03 F6 |                 mov     htmp,0-0
3a1c0     01 A6 02 FF 
3a1c4     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3a1c8     7C 00 90 AD |         if_e    jmp     #.ps3
3a1cc                 | 
3a1cc     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3a1d0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3a1d4     00 00 80 5F 
3a1d8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3a1dc     03 00 80 AF 
3a1e0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3a1e4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3a1e8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a1ec     55 02 A0 FD |                 call    #control_read
3a1f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a1f4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3a1f8     00 00 04 56 |         if_nz   mov     0-0, #0
3a1fc     24 01 90 5D |         if_nz   jmp     #.notify_client
3a200     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3a204     56 01 00 F6 |                 mov     0-0, total_data
3a208     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a20c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3a20c                 | 
3a20c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3a210     10 01 90 FD |                 jmp     #.notify_client
3a214                 | .xinput
3a214     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3a218     2D EF 03 F6 |                 mov     pb,hdev_port
3a21c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3a220     03 EE 27 F3 |                 fle     pb,#3
3a224     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3a228     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3a22c                 | 
3a22c     03 B0 06 F6 |                 mov     pkt_data, #3
3a230     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3a234     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3a238     5A 00 A0 FD |                 call    #txn_out
3a23c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3a240                 | 
3a240     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3a244     DC 00 90 FD |                 jmp     #.notify_client
3a248                 | .ps3
3a248     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3a24c     2D EF 03 F6 |                 mov     pb,hdev_port
3a250     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3a254     04 EE 27 F3 |                 fle     pb,#4
3a258     F7 EF C3 F9 |                 decod   pb
3a25c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3a260                 | 
3a260     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3a264     00 0C D0 FE |                 loc     ptra, #set_report
3a268     01 00 80 FF 
3a26c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3a270     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a274     03 61 5C FC |                 wrword  #48, ptra[wLength]
3a278     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3a27c     A0 02 A0 FD |                 call    #control_write
3a280                 | 
3a280     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3a284     E0 0B D0 FE |                 loc     ptra, #set_report
3a288     01 00 80 FF 
3a28c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3a290     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a294     03 09 5C FC |                 wrword  #4, ptra[wLength]
3a298     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3a29c     A0 02 A0 FD |                 call    #control_write
3a2a0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3a2a4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3a2a8     00 00 04 56 |         if_nz   mov     0-0, #0
3a2ac     74 00 90 5D |         if_nz   jmp     #.notify_client
3a2b0                 | 
3a2b0     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3a2b4     6C 00 90 FD |                 jmp     #.notify_client
3a2b8                 | end
3a2b8                 | 
3a2b8                 | .hub_config
3a2b8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3a2bc     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3a2c0     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3a2c4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a2c8     3F 00 00 FF 
3a2cc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a2d0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3a2d4                 | 
3a2d4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3a2d8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3a2dc     26 EF 03 F6 |                 mov     pb, hub_descr_p
3a2e0     55 02 A0 FD |                 call    #control_read
3a2e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a2e8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3a2ec     34 00 90 5D |         if_nz   jmp     #.notify_client
3a2f0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3a2f0                 | 
3a2f0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3a2f4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3a2f8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3a2fc                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3a2fc                 | .pwr_loop
3a2fc     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3a300     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3a304     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3a308     A0 02 A0 FD |                 call    #control_write
3a30c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3a310                 | 
3a310     B1 99 02 F6 |                 mov     hctwait, _500ms_
3a314     B0 99 02 F1 |                 add     hctwait, _100ms_
3a318     EF 02 A0 FD |                 call    #poll_waitx
3a31c                 | 
3a31c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3a320     00 00 90 FD |                 jmp     #.notify_client
3a324                 | 
3a324                 | .notify_client
3a324     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3a328     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3a32c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3a32c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3a32c     2D 00 64 FD |                 ret
3a330                 | 
3a330                 | '------------------------------------------------------------------------------
3a330                 | ' Initialize the keyboard/mouse data area to start-up values.
3a330                 | '------------------------------------------------------------------------------
3a330                 | ' On entry:
3a330                 | ' On exit:
3a330                 | '------------------------------------------------------------------------------
3a330                 | init_kbdm_data
3a330     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3a334     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3a338                 | 
3a338     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3a33c     2B ED 03 F6 |                 mov     pa, cache_end_p
3a340                 | .loop
3a340     61 01 4C FC |                 wrbyte  #0, ptra++
3a344     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3a348     F4 FF 9F CD |         if_b    jmp     #.loop
3a34c                 |         
3a34c                 |         if EMUPAD_MAX_PLAYER > 0
3a34c                 |         end
3a34c                 | 
3a34c                 | 
3a34c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3a350                 | .regloop
3a350     00 EC 8F F9 |                 altd    pa
3a354     00 00 04 F6 |                 mov     0-0, #0
3a358     01 EC 07 F1 |                 add     pa, #1
3a35c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3a360     EC FF 9F 5D |         if_nz   jmp     #.regloop
3a364                 | 
3a364     E1 E1 61 FF 
3a368     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3a36c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3a370     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3a374     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3a378                 | 
3a378     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3a37c                 | 
3a37c                 | '------------------------------------------------------------------------------
3a37c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3a37c                 | ' function.
3a37c                 | '------------------------------------------------------------------------------
3a37c                 | ' On entry:
3a37c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3a37c                 | '   hpar2 - index number of the target interface.
3a37c                 | ' On exit:
3a37c                 | '------------------------------------------------------------------------------
3a37c                 | hset_idle
3a37c     A8 99 02 F6 |                 mov     hctwait, _2ms_
3a380     EF 02 A0 FD |                 call    #poll_waitx
3a384     D8 0A D0 FE |                 loc     ptra, #set_idle
3a388     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3a38c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3a390     A0 02 80 FD |                 jmp     #control_write
3a394                 | 
3a394                 | '------------------------------------------------------------------------------
3a394                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3a394                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3a394                 | '------------------------------------------------------------------------------
3a394                 | ' On entry:
3a394                 | '   ep_addr_pid - device address and enpoint for the request.
3a394                 | ' On exit:
3a394                 | '   retval - transaction result.
3a394                 | '------------------------------------------------------------------------------
3a394                 | hset_kbdled_report
3a394     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3a398     CC 0A D0 FE |                 loc     ptra, #set_report
3a39c     01 00 80 FF 
3a3a0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3a3a4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a3a8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3a3ac     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a3b0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3a3b4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3a3b8                 | 
3a3b8                 | '------------------------------------------------------------------------------
3a3b8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3a3b8                 | '------------------------------------------------------------------------------
3a3b8                 | ' On entry:
3a3b8                 | ' On exit:
3a3b8                 | '------------------------------------------------------------------------------
3a3b8                 | hget_kbd_in_report
3a3b8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3a3bc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a3c0     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3a3c4     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3a3c8     CF 02 A0 FD |                 call    #do_int_in
3a3cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a3d0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3a3d4                 | 
3a3d4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a3d8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a3dc                 | 
3a3dc     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3a3e0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3a3e4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3a3e8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3a3ec                 | 
3a3ec     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3a3f0     18 00 B0 FD |                 call    #hkbd_compare
3a3f4                 |         if EMUPAD_MAX_PLAYER > 0
3a3f4                 |         end
3a3f4                 | 
3a3f4                 | .led_check
3a3f4     3B 71 03 F6 |                 mov     htmp, kb_led_states
3a3f8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3a3fc     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3a400     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3a404     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3a408     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3a40c                 | 
3a40c                 | '------------------------------------------------------------------------------
3a40c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3a40c                 | '------------------------------------------------------------------------------
3a40c                 | hkbd_compare
3a40c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3a410     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3a414     61 73 07 FB |                 rdlong  htmp1, ptra++
3a418     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3a41c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3a420     61 73 07 FB |                 rdlong  htmp1, ptra++
3a424     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3a428     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3a42c     2D 00 64 AD |         if_z    ret
3a430                 | 
3a430     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3a434                 | 
3a434                 |                 ' Handle modifiers
3a434     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3a438     00 87 C7 FA |                 rdbyte  hr1, ptra
3a43c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3a440     63 86 63 FD |                 mergew  hr1
3a444     08 EC 07 F6 |                 mov     pa,#8
3a448                 | .modloop
3a448     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3a44c     E8 8C 07 F6 |                 mov     hpar1,#$E8
3a450     F6 8D 83 F1 |                 sub     hpar1,pa
3a454     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3a458     FB ED 6F FB |                 djnz    pa,#.modloop
3a45c                 | 
3a45c     6F E0 75 FD | .release        modc    _set    wc
3a460                 |                 'alts    hdev_port, #hid_report_p
3a460                 |                 'mov     ptra, hid_report_p
3a460     02 F0 07 F1 |                 add     ptra, #2
3a464     06 EC 07 F6 |                 mov     pa, #6
3a468     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3a46c     20 00 90 AD |         if_z    jmp     #.rl3
3a470     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3a474     02 F2 07 F1 |                 add     ptrb, #2
3a478     06 EE 07 F6 |                 mov     pb, #6
3a47c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3a480     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3a484     08 00 90 AD |         if_z    jmp     #.rl3
3a488     FC EF 6F FB |                 djnz    pb, #.rl2
3a48c     68 00 B0 FD |                 call    #hkbd_translate
3a490     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3a494                 | 
3a494     00 90 07 F6 |                 mov     hpar3, #0
3a498     1F 90 27 F4 |                 bith    hpar3, #31
3a49c                 | 
3a49c     6F 00 74 FD | .press          modc    _clr    wc
3a4a0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3a4a4     02 F0 07 F1 |                 add     ptra, #2
3a4a8     06 EC 07 F6 |                 mov     pa, #6
3a4ac     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3a4b0     20 00 90 AD |         if_z    jmp     #.pl3
3a4b4     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3a4b8     02 F2 07 F1 |                 add     ptrb, #2
3a4bc     06 EE 07 F6 |                 mov     pb, #6
3a4c0     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3a4c4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3a4c8     08 00 90 AD |         if_z    jmp     #.pl3
3a4cc     FC EF 6F FB |                 djnz    pb, #.pl2
3a4d0     24 00 B0 FD |                 call    #hkbd_translate
3a4d4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3a4d8                 | 
3a4d8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3a4dc     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3a4e0     28 02 64 FD |                 setq #1
3a4e4     61 73 07 FB |                 rdlong  htmp1, ptra++
3a4e8     28 02 64 FD |                 setq #1
3a4ec     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3a4f0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3a4f4                 | 
3a4f4     2D 00 64 FD |                 ret
3a4f8                 | 
3a4f8                 | '------------------------------------------------------------------------------
3a4f8                 | ' Translate keyboard scancode to ASCII
3a4f8                 | '------------------------------------------------------------------------------
3a4f8                 | ' On entry:
3a4f8                 | '   hpar1 - scancode
3a4f8                 | '   hpar2 - key modifiers state
3a4f8                 | '       c - pressed (0) or released (1) flag
3a4f8                 | ' On exit:
3a4f8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3a4f8                 | '               30..17 = unused
3a4f8                 | '                   18 = scroll-lock state 
3a4f8                 | '                   17 = caps-lock state
3a4f8                 | '                   16 = num-lock state 
3a4f8                 | '                15..8 = key modifiers state
3a4f8                 | '                 7..0 = scancode
3a4f8                 | '------------------------------------------------------------------------------
3a4f8                 | hkbd_translate
3a4f8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3a4fc     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3a500     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3a504     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3a508     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3a50c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3a510                 | 
3a510                 |         if EMUPAD_MAX_PLAYER > 0
3a510                 | 
3a510                 |         if EMUPAD_BT0_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT1_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT2_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT3_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT4_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT5_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT6_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT7_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT8_BIT >= 0
3a510                 |         end
3a510                 |         if EMUPAD_BT9_BIT >= 0
3a510                 |         end
3a510                 | 
3a510                 |         end
3a510     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3a514     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3a518     1F 8C 47 F4 |                 bitc    hpar1, #31
3a51c                 |         if KEYQUEUE_SIZE > 0
3a51c     C4 09 B0 FE |                 loc pb,#keyq_head
3a520     F7 71 E3 FA |                 rdword htmp,pb
3a524     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3a528     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3a52c     B8 75 03 F6 |                 mov htmp2,htmp
3a530     04 74 07 FA |                 mul htmp2,#4
3a534     F7 75 03 F1 |                 add htmp2,pb
3a538     02 74 07 F1 |                 add htmp2,#2
3a53c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3a540     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3a544     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3a548     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3a54c                 |         end
3a54c     2D 00 7C FD |                 ret wcz
3a550                 | 
3a550                 | if HAVE_MOUSE
3a550                 | '------------------------------------------------------------------------------
3a550                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3a550                 | '------------------------------------------------------------------------------
3a550                 | ' On entry:
3a550                 | ' On exit:
3a550                 | '------------------------------------------------------------------------------
3a550                 | hget_mouse_in_report
3a550     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3a554     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a558     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3a55c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3a560     CF 02 A0 FD |                 call    #do_int_in
3a564     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a568     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3a56c                 | 
3a56c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a570     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a574                 | 
3a574     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3a578     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3a57c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3a580     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3a584                 | 
3a584     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3a588     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3a58c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3a590     01 90 87 31 |         if_ae   sub     hpar3, #1
3a594                 | 
3a594     40 09 90 FE |                 loc     pa, #mouse_limits
3a598     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3a59c                 | 
3a59c                 |                 ' load xacc,yacc,zacc
3a59c     28 04 64 FD |                 setq    #3-1
3a5a0     80 87 07 FB |                 rdlong  hr1,ptrb
3a5a4                 |                 ' load limits and outptr
3a5a4     28 04 64 FD |                 setq    #3-1
3a5a8     F6 73 03 FB |                 rdlong  htmp1,pa
3a5ac                 | 
3a5ac     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3a5b0     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3a5b4     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3a5b8     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3a5bc     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3a5c0     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3a5c4     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3a5c8     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3a5cc                 |               
3a5cc                 | 
3a5cc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3a5d0     07 70 67 F7 |                 signx   htmp, #7
3a5d4     B8 87 03 F1 |                 add     hr1,htmp
3a5d8     00 72 0F F2 |                 cmp     htmp1,#0 wz
3a5dc     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3a5e0     00 86 47 53 |         if_ne   fges    hr1,#0
3a5e4                 | 
3a5e4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3a5e8     07 70 67 F7 |                 signx   htmp, #7
3a5ec     B8 89 03 F1 |                 add     hr2,htmp
3a5f0     00 74 0F F2 |                 cmp     htmp2,#0 wz
3a5f4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3a5f8     00 88 47 53 |         if_ne   fges    hr2,#0
3a5fc                 |                 
3a5fc                 | 
3a5fc     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3a600     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3a604     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3a608     B8 8B 03 A1 |         if_z    add     hr3,htmp
3a60c                 | 
3a60c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3a610     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3a614                 | 
3a614                 |                 ' write back accumulators
3a614     28 04 64 FD |                 setq    #3-1
3a618     80 87 67 FC |                 wrlong  hr1,ptrb
3a61c                 |                 ' if outptr set, write X/Y words
3a61c     00 76 0F F2 |                 cmp htmp3,#0                    wz
3a620     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3a624     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3a628     2D 00 64 FD |                 ret
3a62c                 | end
3a62c                 | 
3a62c                 | '------------------------------------------------------------------------------
3a62c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3a62c                 | '------------------------------------------------------------------------------
3a62c                 | ' On entry:
3a62c                 | ' On exit:
3a62c                 | '------------------------------------------------------------------------------
3a62c                 | if _HAVE_GAMEPAD
3a62c                 | hget_gp_in_report
3a62c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3a630     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3a634                 | 
3a634     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a638     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3a63c     00 90 E3 F8 |                 getbyte hpar3
3a640     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3a644     CF 02 A0 FD |                 call    #do_int_in
3a648     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a64c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3a650                 | 
3a650     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a654     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a658                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3a658                 | 
3a658     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3a65c     00 70 E3 F8 |                 getbyte htmp                            ' |
3a660     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3a664     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3a668     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3a66c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3a670     B8 01 C0 F8 |                 setbyte htmp                            ' |
3a674                 | 
3a674                 | ' Note: the following code compares the current and previous reports
3a674                 | ' and process the data if there are changes to ease the debug output.
3a674                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3a674                 | ' gpPreReport buffer.
3a674                 | 
3a674                 |                 ' ----- start of block to remove
3a674                 |                 {
3a674                 |                 }
3a674                 |                 ' ----- end of block to remove
3a674     F4 04 90 FE |                 loc pa,#hpad_translate
3a678     2A EC 63 FD |                 push pa
3a67c                 | 
3a67c                 |                 ' FALL THROUGH !!!!
3a67c                 | 
3a67c                 | '------------------------------------------------------------------------------
3a67c                 | ' Decode controller report
3a67c                 | '------------------------------------------------------------------------------
3a67c                 | hid_decode
3a67c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3a67c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3a680     00 04 00 FF 
3a684     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3a688                 | 
3a688     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3a68c                 | 
3a68c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3a690     00 2A E3 F8 |                 getbyte hidr_type
3a694     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3a698     34 02 90 AD |         if_z    jmp     #hpad_xinput
3a69c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3a6a0     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3a6a4     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3a6a8     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3a6ac     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3a6b0                 |                 
3a6b0                 | 
3a6b0                 | '------------------------------------------------------------------------------
3a6b0                 | ' Handle HID controller (or mouse now
3a6b0                 | ' On entry:
3a6b0                 | '   ptrb - controller report
3a6b0                 | '------------------------------------------------------------------------------
3a6b0                 | hpad_hid
3a6b0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a6b4     F7 F1 03 F6 |                 mov     ptra, pb
3a6b8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3a6bc     00 EC 03 F6 |                 mov     pa, 0-0
3a6c0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3a6c0     19 2A 3B FF 
3a6c4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3a6c8                 | 
3a6c8                 | .next
3a6c8     00 EC 5F F2 |                 cmps    pa, #0      wcz
3a6cc     2D 00 7C ED |         if_be   ret     wcz
3a6d0                 | 
3a6d0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3a6d4     01 EC 87 F1 |                 sub     pa, #1
3a6d8     00 8E 07 F6 |                 mov     hpar2, #0
3a6dc                 | 
3a6dc     C6 71 03 F6 |                 mov     htmp, hpar1
3a6e0     03 70 07 F5 |                 and     htmp, #$03
3a6e4     01 70 0F F2 |                 cmp     htmp, #1    wz
3a6e8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3a6ec     07 8E 67 A7 |         if_z    signx   hpar2,#7
3a6f0     01 EC 87 A1 |         if_z    sub     pa, #1
3a6f4     02 70 0F F2 |                 cmp     htmp, #2    wz
3a6f8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3a6fc     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3a700     02 EC 87 A1 |         if_z    sub     pa, #2
3a704     03 70 0F F2 |                 cmp     htmp, #3    wz
3a708     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3a70c     04 EC 87 A1 |         if_z    sub     pa, #4
3a710                 | 
3a710     FC 8C 07 F5 |                 and     hpar1, #$FC
3a714                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3a714                 | 
3a714     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3a718     0C 01 90 AD |         if_z    jmp     #.report_id
3a71c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3a720     24 01 90 AD |         if_z    jmp     #.usage_page
3a724     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3a728     2C 01 90 AD |         if_z    jmp     #.usage
3a72c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3a730     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3a734     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3a738     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3a73c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3a740     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3a744     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3a748     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3a74c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3a750     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3a754     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3a758     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3a75c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3a760     64 FF 9F 5D |         if_nz   jmp     #.next
3a764                 | 
3a764     D8 1D A7 FB |                 tjf     hidr_state,#.next
3a768                 | 
3a768     03 8E 07 F5 |                 and     hpar2, #$03
3a76c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3a770     18 00 90 5D |         if_nz   jmp     #.skip
3a774                 | 
3a774     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3a778     20 00 90 AD |         if_z    jmp     #.axes
3a77c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3a780     5C 00 90 AD |         if_z    jmp     #.hats
3a784     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3a788     70 00 90 AD |         if_z    jmp     #.buttons
3a78c                 | .skip
3a78c     8F 71 03 F6 |                 mov     htmp, hidr_size
3a790     90 71 03 FA |                 mul     htmp, hidr_count
3a794     B8 23 03 F1 |                 add     hidr_offset, htmp
3a798     2C FF 9F FD |                 jmp     #.next
3a79c                 | .axes
3a79c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3a79c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3a7a0     90 87 03 F6 |                 mov     hr1, hidr_count
3a7a4                 | .l1
3a7a4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a7a8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a7ac     04 03 B0 FD |                 call    #hpad_getbits
3a7b0     64 03 B0 FD |                 call    #hpad_normalize
3a7b4     06 84 1F F2 |                 cmp     hr0, #6         wcz
3a7b8     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3a7bc     00 88 43 C8 |         if_b    getnib  hr2
3a7c0     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3a7c4     5F 01 20 C9 |         if_b    setword retval
3a7c8     01 84 07 C1 |         if_b    add     hr0, #1
3a7cc     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3a7d0     F4 87 6F FB |                 djnz    hr1, #.l1
3a7d4                 | 
3a7d4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3a7d8     01 1C 07 F6 |                 mov     hidr_state, #1
3a7dc     E8 FE 9F FD |                 jmp     #.next
3a7e0                 | .hats
3a7e0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3a7e0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a7e4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a7e8     C8 02 B0 FD |                 call    #hpad_getbits
3a7ec     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3a7f0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a7f4     01 1C 07 F6 |                 mov     hidr_state, #1
3a7f8     90 FF 9F FD |                 jmp     #.skip
3a7fc                 | .buttons
3a7fc                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3a7fc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a800     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a804     90 8F 03 FA |                 mul     hpar2, hidr_count
3a808     A8 02 B0 FD |                 call    #hpad_getbits
3a80c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3a810     B8 BF 62 F0 |                 shl     retval, htmp
3a814     5F 17 43 F5 |                 or      hidr_buttons, retval
3a818     90 71 03 F1 |                 add     htmp, hidr_count
3a81c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3a820     01 1C 07 F6 |                 mov     hidr_state, #1
3a824     64 FF 9F FD |                 jmp     #.skip
3a828                 | .report_id
3a828     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3a82c     2D 00 7C 5D |         if_nz   ret     wcz
3a830     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a834     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3a838     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3a83c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3a840     01 F2 87 51 |         if_nz   sub     ptrb,#1
3a844     80 FE 9F FD |                 jmp     #.next
3a848                 | .usage_page
3a848     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3a84c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3a850     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3a854     70 FE 9F FD |                 jmp     #.next
3a858                 | .usage
3a858     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3a85c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3a860     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3a864     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a868     5C FE 9F AD |         if_z    jmp     #.next
3a86c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3a870     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3a874     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a878     4C FE 9F AD |         if_z    jmp     #.next
3a87c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3a880     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3a884     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3a888     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3a88c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3a890     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3a894     10 00 90 AD |         if_z    jmp     #.usage_axis
3a898     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3a89c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3a8a0     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3a8a4     20 FE 9F FD |                 jmp     #.next
3a8a8                 | .usage_axis
3a8a8     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3a8ac     18 FE 9F CD |         if_b    jmp     #.next
3a8b0     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3a8b4     C7 01 00 F8 |                 setnib  hpar2
3a8b8                 | 
3a8b8     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3a8bc     C7 8F C3 F9 |                 decod   hpar2
3a8c0     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3a8c4                 | 
3a8c4     01 24 07 F1 |                 add     hidr_usage_idx, #1
3a8c8     02 1C 07 F6 |                 mov     hidr_state, #2
3a8cc     F8 FD 9F FD |                 jmp     #.next
3a8d0                 | 
3a8d0                 | '------------------------------------------------------------------------------
3a8d0                 | ' Handle XInput controller
3a8d0                 | ' On entry:
3a8d0                 | '   ptrb - controller report
3a8d0                 | '------------------------------------------------------------------------------
3a8d0                 | '   Default implementation translates the report to a pseudo-defacto hid
3a8d0                 | '   standard and jumps to hpad_translate for actions.
3a8d0                 | '   Implementors may take specific actions for this kind of controller.
3a8d0                 | '------------------------------------------------------------------------------
3a8d0                 | hpad_xinput
3a8d0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3a8d4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3a8d8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3a8dc     14 70 0F F2 |                 cmp     htmp, #$14      wz
3a8e0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3a8e4                 | 
3a8e4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a8e4                 | 
3a8e4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3a8e8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3a8ec                 | 
3a8ec     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3a8f0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3a8f4     5F BF 22 F6 |                 not     retval
3a8f8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a8fc     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3a900     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3a904     5F BF 22 F6 |                 not     retval
3a908     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3a90c                 | 
3a90c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3a910     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3a914     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3a918     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3a91c     F8 01 B0 FD |                 call    #hpad_normalize
3a920     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3a924     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3a928     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3a92c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3a930     E4 01 B0 FD |                 call    #hpad_normalize
3a934     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3a938                 | 
3a938     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3a93c     81 BF E6 FA |                 rdword  retval, ptrb[1]
3a940     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3a944     00 16 47 F4 |                 bitc    hidr_buttons, #0
3a948     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3a94c     01 16 47 F4 |                 bitc    hidr_buttons, #1
3a950     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3a954     02 16 47 F4 |                 bitc    hidr_buttons, #2
3a958     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3a95c     03 16 47 F4 |                 bitc    hidr_buttons, #3
3a960     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3a964     04 16 47 F4 |                 bitc    hidr_buttons, #4
3a968     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3a96c     05 16 47 F4 |                 bitc    hidr_buttons, #5
3a970     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3a974     08 16 47 F4 |                 bitc    hidr_buttons, #8
3a978     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3a97c     09 16 47 F4 |                 bitc    hidr_buttons, #9
3a980     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3a984     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3a988     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3a98c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3a990     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3a994     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3a998                 | 
3a998     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a99c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3a9a0     7A BB 7A FF 
3a9a4     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3a9a8     F9 FF 7F FF 
3a9ac     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3a9b0     B9 71 5F F9 |                 altgn   htmp, #htmp1
3a9b4     00 70 43 F8 |                 getnib  htmp
3a9b8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3a9bc                 | 
3a9bc     AC 01 90 FD |                 jmp     #hpad_translate
3a9c0                 | 
3a9c0                 | '------------------------------------------------------------------------------
3a9c0                 | ' Handle PS3 controller
3a9c0                 | ' On entry:
3a9c0                 | '   ptrb - controller report
3a9c0                 | '------------------------------------------------------------------------------
3a9c0                 | '   Default implementation translates the report to a pseudo-defacto hid
3a9c0                 | '   standard and jumps to hpad_translate for actions.
3a9c0                 | '   Implementors may take specific actions for this kind of controller.
3a9c0                 | '------------------------------------------------------------------------------
3a9c0                 | hpad_ps3
3a9c0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a9c4     01 70 0F F2 |                 cmp     htmp, #$01      wz
3a9c8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3a9cc                 | 
3a9cc                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a9cc                 | 
3a9cc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3a9d0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3a9d4     40 01 B0 FD |                 call    #hpad_normalize
3a9d8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3a9dc     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3a9e0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3a9e4     30 01 B0 FD |                 call    #hpad_normalize
3a9e8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a9ec     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3a9f0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3a9f4     20 01 B0 FD |                 call    #hpad_normalize
3a9f8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3a9fc     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3aa00     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3aa04     10 01 B0 FD |                 call    #hpad_normalize
3aa08     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3aa0c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3aa10     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3aa14                 | 
3aa14     08 8C 07 F6 |                 mov     hpar1, #8
3aa18     13 8E 07 F6 |                 mov     hpar2, #19
3aa1c     94 00 B0 FD |                 call    #hpad_getbits
3aa20                 | 
3aa20     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3aa24     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3aa28     00 16 47 F4 |                 bitc    hidr_buttons, #0
3aa2c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3aa30     01 16 47 F4 |                 bitc    hidr_buttons, #1
3aa34     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3aa38     02 16 47 F4 |                 bitc    hidr_buttons, #2
3aa3c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3aa40     03 16 47 F4 |                 bitc    hidr_buttons, #3
3aa44     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3aa48     04 16 47 F4 |                 bitc    hidr_buttons, #4
3aa4c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3aa50     05 16 47 F4 |                 bitc    hidr_buttons, #5
3aa54     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3aa58     06 16 47 F4 |                 bitc    hidr_buttons, #6
3aa5c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3aa60     07 16 47 F4 |                 bitc    hidr_buttons, #7
3aa64     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3aa68     08 16 47 F4 |                 bitc    hidr_buttons, #8
3aa6c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3aa70     09 16 47 F4 |                 bitc    hidr_buttons, #9
3aa74     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3aa78     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3aa7c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3aa80     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3aa84     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3aa88     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3aa8c                 | 
3aa8c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3aa90     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3aa94     09 FA 79 FF 
3aa98     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3aa9c     FF FA 7F FF 
3aaa0     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3aaa4     B9 71 5F F9 |                 altgn   htmp, #htmp1
3aaa8     00 70 43 F8 |                 getnib  htmp
3aaac     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3aab0                 | 
3aab0     B8 00 90 FD |                 jmp     #hpad_translate
3aab4                 | 
3aab4                 | '------------------------------------------------------------------------------
3aab4                 | ' Read bits from report data buffer
3aab4                 | '------------------------------------------------------------------------------
3aab4                 | ' On entry:
3aab4                 | '   PTRB - report buffer
3aab4                 | '   hpar1 - start bit
3aab4                 | '   hpar2 - number of bits
3aab4                 | ' On exit:
3aab4                 | '   retval - bits
3aab4                 | '------------------------------------------------------------------------------
3aab4                 | hpad_getbits
3aab4     C6 71 03 F6 |                 mov     htmp, hpar1
3aab8     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3aabc     F9 71 03 F1 |                 add     htmp, ptrb
3aac0     B8 BF 02 FB |                 rdlong  retval, htmp
3aac4                 | 
3aac4     C6 73 03 F6 |                 mov     htmp1, hpar1
3aac8     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3aacc     B9 BF 42 F0 |                 shr     retval, htmp1
3aad0                 | 
3aad0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3aad4     10 00 90 1D |         if_a    jmp     #.l1
3aad8                 | 
3aad8     C7 8F C3 F9 |                 decod   hpar2
3aadc     01 8E 87 F1 |                 sub     hpar2, #1
3aae0     C7 BF 02 F5 |                 and     retval, hpar2
3aae4     2D 00 64 FD |                 ret
3aae8                 | .l1
3aae8     FF 7F 00 FF 
3aaec     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3aaf0     03 70 07 F1 |                 add     htmp, #3
3aaf4     B8 75 03 FB |                 rdlong  htmp2, htmp
3aaf8     18 8E 87 F1 |                 sub     hpar2, #24
3aafc     C7 8F C3 F9 |                 decod   hpar2
3ab00     01 8E 87 F1 |                 sub     hpar2, #1
3ab04     B9 75 43 F0 |                 shr     htmp2, htmp1
3ab08     C7 75 03 F5 |                 and     htmp2, hpar2
3ab0c     18 74 67 F0 |                 shl     htmp2, #24
3ab10     BA BF 42 F5 |                 or      retval, htmp2
3ab14     2D 00 64 FD |                 ret
3ab18                 | 
3ab18                 | '------------------------------------------------------------------------------
3ab18                 | ' Normalize value to signed word (-32768 / 32767)
3ab18                 | '------------------------------------------------------------------------------
3ab18                 | ' On entry:
3ab18                 | '   retval - value to normalize
3ab18                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3ab18                 | '   - or -
3ab18                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3ab18                 | '   hidr_size - value bits length
3ab18                 | ' On exit:
3ab18                 | '   retval - normalized value
3ab18                 | '------------------------------------------------------------------------------
3ab18                 | hpad_normalize
3ab18     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3ab1c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3ab20     2D 00 64 AD |         if_z    ret
3ab24     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3ab28     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3ab2c     0F 72 77 F7 |                 signx   htmp1, #15      wc
3ab30     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3ab34     00 BE 66 C7 |         if_c    signx   retval, #0-0
3ab38     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3ab3c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3ab40     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3ab44     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3ab48     B8 71 53 F6 |                 abs     htmp            wc
3ab4c     1F BE 0E F4 |                 testb   retval, #31     wz
3ab50     5F BF 42 F6 |                 abs     retval
3ab54     B8 BF 12 FD |                 qdiv    retval, htmp
3ab58     18 BE 62 FD |                 getqx   retval
3ab5c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3ab60     C0 FF 7F FF 
3ab64     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3ab68     2D 00 64 FD |                 ret
3ab6c                 | 
3ab6c                 | '------------------------------------------------------------------------------
3ab6c                 | ' Perform controller actions
3ab6c                 | ' On entry:
3ab6c                 | '    hidr_id        report id
3ab6c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3ab6c                 | '                      X = hidr_axis+0, #0
3ab6c                 | '                      Y = hidr_axis+0, #1
3ab6c                 | '                      Z = hidr_axis+1, #0
3ab6c                 | '                     RX = hidr_axis+1, #1
3ab6c                 | '                     RY = hidr_axis+2, #0
3ab6c                 | '                     RZ = hidr_axis+2, #1
3ab6c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3ab6c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3ab6c                 | '
3ab6c                 | '                     -------3 -------2 -------1 -------0 byte
3ab6c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3ab6c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3ab6c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3ab6c                 | '                                |||||| ||||++++--------- n. axes
3ab6c                 | '                                |||||| ++++------------- n. hats
3ab6c                 | '                                ++++++------------------ valid axes
3ab6c                 | '------------------------------------------------------------------------------
3ab6c                 | hpad_translate
3ab6c                 | 
3ab6c                 | 
3ab6c                 |         if HAVE_HIDPAD
3ab6c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3ab70     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3ab74     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3ab78     01 70 E7 F2 |                 cmpsub  htmp,#1
3ab7c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3ab80     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3ab84     2D 00 7C 3D |         if_ae   ret     wcz
3ab88     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3ab8c     B8 F3 03 F1 |                 add     ptrb,htmp
3ab90     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3ab94     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3ab98     28 0C 64 FD |                 setq    #7-1
3ab9c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3aba0                 |         end
3aba0                 | 
3aba0                 | 
3aba0                 |         if EMUPAD_MAX_PLAYER > 0
3aba0                 | .emupad_no_hat
3aba0                 |         if EMUPAD_BT0_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT1_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT2_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT3_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT4_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT5_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT6_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT7_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT8_BIT >= 0
3aba0                 |         end
3aba0                 |         if EMUPAD_BT9_BIT >= 0
3aba0                 |         end
3aba0                 | .emupad_slot_over
3aba0                 |         end
3aba0                 | 
3aba0                 |         if 0
3aba0                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3aba0                 | 
3aba0                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3aba0                 | 
3aba0                 |         end
3aba0     2D 00 64 FD |                 ret
3aba4                 | end
3aba4                 | 
3aba4                 | if EMUPAD_MAX_PLAYER > 0
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | ' Clear EmuPad state
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | emupad_reset
3aba4                 | 
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | ' Get EmuPad Player number for current device (into retval)
3aba4                 | ' Z flag is also set if current device is valid
3aba4                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | emupad_getnum
3aba4                 | .loop
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | emupad_discon
3aba4                 | .loop         
3aba4                 |         
3aba4                 |         ' FALL THROUGH!!!
3aba4                 | 
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | ' Update EmuPad reports (all of them...)
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | emupad_write_reports
3aba4                 | .devloop
3aba4                 | 
3aba4                 | end
3aba4                 | 
3aba4                 | 
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | ' On entry:
3aba4                 | ' On exit:
3aba4                 | '------------------------------------------------------------------------------
3aba4                 | hget_hub_status
3aba4     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3aba8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3abac     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3abb0     01 90 2F F9 |                 setword hpar3, #1, #1
3abb4     CF 02 A0 FD |                 call    #do_int_in
3abb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3abbc     0C 00 90 AD |         if_z    jmp     #.data
3abc0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3abc4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3abc8     2D 00 64 FD |                 ret
3abcc                 | .data
3abcc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3abd0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3abd4                 | 
3abd4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3abd8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3abdc     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3abe0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3abe4                 |                 debug(ubin_long(hub_status_chg))
3abe4                 | 
3abe4     01 5A 06 F6 |                 mov     hdev_port, #1
3abe8                 | .loop
3abe8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3abec     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3abf0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3abf4     F0 FF 9F 3D |         if_nc   jmp     #.loop
3abf8     2D 00 64 FD |                 ret
3abfc                 | 
3abfc                 | hub_port_handler
3abfc     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3ac00     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ac04     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ac08     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ac0c     55 02 A0 FD |                 call    #control_read
3ac10     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ac14                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ac14                 | 
3ac14     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3ac18     50 01 90 5D |         if_x0   jmp     #.other
3ac1c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3ac20     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3ac24     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ac28     A0 02 A0 FD |                 call    #control_write
3ac2c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3ac30     7C 01 90 5D |         if_x0   jmp     #.disconnect
3ac34     B0 99 02 F6 |                 mov     hctwait, _100ms_
3ac38     EF 02 A0 FD |                 call    #poll_waitx
3ac3c                 | 
3ac3c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3ac40     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3ac44     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ac48     A0 02 A0 FD |                 call    #control_write
3ac4c                 | 
3ac4c     02 76 07 F6 |                 mov     htmp3, #2
3ac50                 | .wait_reset
3ac50     AC 99 02 F6 |                 mov     hctwait, _8ms_
3ac54     EF 02 A0 FD |                 call    #poll_waitx
3ac58     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ac5c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ac60     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ac64     55 02 A0 FD |                 call    #control_read
3ac68     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ac6c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3ac70     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3ac74                 | 
3ac74     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3ac78     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3ac7c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ac80     A0 02 A0 FD |                 call    #control_write
3ac84                 | 
3ac84     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3ac88                 | .wait_recover
3ac88     A7 99 02 F6 |                 mov     hctwait, _1ms_
3ac8c     EF 02 A0 FD |                 call    #poll_waitx
3ac90     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3ac94                 | 
3ac94     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ac98     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3ac9c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3aca0                 | 
3aca0     00 08 00 FF 
3aca4     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3aca8     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3acac     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3acb0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3acb4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3acb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3acbc     48 01 90 5D |         if_nz   jmp     #.done
3acc0                 | .get_dev_desc
3acc0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3acc4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3acc8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3accc     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3acd0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3acd4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3acd8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3acdc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ace0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3ace4     AC 99 02 F6 |                 mov     hctwait, _8ms_
3ace8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3acec     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3acf0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3acf4     BE 00 A0 FD |                 call    #calc_crc5
3acf8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3acfc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3ad00     F7 AD C2 FA |                 rdbyte  total_data, pb
3ad04     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3ad08     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3ad0c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ad10     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3ad14     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3ad18     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3ad1c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3ad1c     9F 99 02 F6 |                 mov     hctwait, _500us_
3ad20     EF 02 A0 FD |                 call    #poll_waitx
3ad24     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3ad28     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3ad2c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3ad30     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3ad34     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ad38     CC 00 90 5D |         if_nz   jmp     #.done
3ad3c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3ad40     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3ad44     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3ad48     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3ad4c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3ad50     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3ad54     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3ad58     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3ad5c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3ad60     A4 00 90 CD |         if_b    jmp     #.done
3ad64     6C F0 BF FD |                 call    #hparse_con_desc
3ad68     9C 00 90 FD |                 jmp     #.done
3ad6c                 | 
3ad6c                 | .other
3ad6c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3ad70     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3ad74     28 00 90 AD |         if_x1   jmp     #.reset_feature
3ad78     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3ad7c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3ad80     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3ad84     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3ad88     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3ad8c     10 00 90 AD |         if_x1   jmp     #.reset_feature
3ad90     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3ad94     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3ad98     04 00 90 AD |         if_x1   jmp     #.reset_feature
3ad9c     68 00 90 FD |                 jmp     #.done
3ada0                 | .reset_feature
3ada0     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3ada4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ada8     A0 02 A0 FD |                 call    #control_write
3adac     58 00 90 FD |                 jmp     #.done
3adb0                 | .disconnect
3adb0                 | 
3adb0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3adb4     00 70 E3 F8 |                 getbyte htmp
3adb8     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3adbc     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3adc0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3adc4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3adc8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3adcc     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3add0                 |         if EMUPAD_MAX_PLAYER > 0
3add0                 |         end
3add0                 |         if HAVE_MOUSE
3add0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3add4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3add8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3addc                 |         end
3addc                 |         if HAVE_HIDPAD
3addc     14 0A F0 FE |                 loc ptrb,#hidpad_report
3ade0     2D 71 03 F6 |                 mov htmp,hdev_port
3ade4     01 70 E7 F2 |                 cmpsub htmp,#1
3ade8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3adec     B8 F3 03 F1 |                 add ptrb,htmp
3adf0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3adf4     80 01 6C FC |                 wrlong #0,ptrb
3adf8                 |         end
3adf8                 | 
3adf8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3adfc     00 00 C4 F8 |                 setbyte #0
3ae00     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ae04     00 00 04 F6 |                 mov     0-0, #0
3ae08                 | 
3ae08                 | .done
3ae08     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3ae0c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3ae10     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3ae14     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3ae18     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3ae1c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3ae20                 | 
3ae20     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ae24     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ae28     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ae2c     55 02 A0 FD |                 call    #control_read
3ae30     00 69 06 FB |                 rdlong  hub_port_status, ptra
3ae34                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ae34     2D 00 64 FD |                 ret
3ae38                 | 
3ae38                 | '------------------------------------------------------------------------------
3ae38                 | ' Partially populated SETUP packets
3ae38                 | '------------------------------------------------------------------------------
3ae38     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ae39     06          |                 byte    REQ_GET_DESC
3ae3a     00 01       |                 word    TYPE_DEVICE << 8
3ae3c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ae3e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ae40     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3ae41     06          |                 byte    REQ_GET_DESC
3ae42     00 02       |                 word    TYPE_CONFIG << 8
3ae44     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ae46     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ae48     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ae49     09          |                 byte    REQ_SET_CONFIG
3ae4a     00 00       |                 word    0       ' Configuration value
3ae4c     00 00       |                 word    0       ' Zero
3ae4e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3ae50     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3ae51     05          |                 byte    REQ_SET_ADDR
3ae52     00 00       |                 word    0       ' Zero
3ae54     00 00       |                 word    0       ' Zero
3ae56     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3ae58                 | '------------------------------------------------------------------------------
3ae58                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3ae58                 | ' wValue field dictates which protocol should be used.
3ae58                 | '
3ae58                 | ' When initialized, all devices default to report protocol. However the host
3ae58                 | ' should not make any assumptions about the device state and should set the
3ae58                 | ' desired protocol whenever initializing a device.
3ae58                 | '------------------------------------------------------------------------------
3ae58     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ae59     0B          |                 byte    HID_SET_PROTO
3ae5a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3ae5c                 |                                                 ' (HID 1.11 Section 7.2.6).
3ae5c     00 00       |                 word    0               ' Interface index number.
3ae5e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3ae60                 | '------------------------------------------------------------------------------
3ae60     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ae61     0A          |                 byte    HID_SET_IDLE
3ae62     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3ae64                 |                                         ' reporting until a change is detected in the report data
3ae64                 | 
3ae64                 |                                         ' (HID 1.11 Section 7.2.4).
3ae64     00 00       |                 word    0       ' Interface index number.
3ae66     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3ae68     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3ae69     09          |                 byte    HID_SET_REPORT
3ae6a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3ae6c                 |                                         ' (HID 1.11 Section 7.2.2).
3ae6c     00 00       |                 word    0       ' Interface index number.
3ae6e     00 00       |                 word    0       ' Size of the report, in bytes.
3ae70     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3ae71     06          |                 byte    REQ_GET_DESC
3ae72     00 22       |                 word    TYPE_REPORT << 8
3ae74     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ae76     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ae78                 | '------------------------------------------------------------------------------
3ae78     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3ae79     06          |                 byte    REQ_GET_DESC
3ae7a     00 29       |                 word    TYPE_HUB << 8
3ae7c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3ae7e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ae80     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3ae81     03          |                 byte    REQ_SET_FEATURE
3ae82     00 00       |                 word    0       ' port power
3ae84     01 00       |                 word    1       ' Port index number (1+)
3ae86     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ae88     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3ae89     01          |                 byte    REQ_CLEAR_FEATURE
3ae8a     00 00       |                 word    0       ' port power
3ae8c     01 00       |                 word    1       ' Port index number (1+)
3ae8e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3ae90     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3ae91     00          |                 byte    REQ_GET_STATUS
3ae92     00 00       |                 word    0
3ae94     01 00       |                 word    1       ' Port index number (1+)
3ae96     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3ae98                 | '------------------------------------------------------------------------------
3ae98                 | if _HAVE_GAMEPAD
3ae98     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3ae9c                 | ps3_command_buff
3ae9c     00 00 00 00 
3aea0     00          |                 byte    $00, $00, $00, $00, $00
3aea1     00 00 00 00 
3aea5     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3aea6     FF 27 10 00 
3aeaa     32          |                 byte    $FF, $27, $10, $00, $32
3aeab     FF 27 10 00 
3aeaf     32          |                 byte    $FF, $27, $10, $00, $32
3aeb0     FF 27 10 00 
3aeb4     32          |                 byte    $FF, $27, $10, $00, $32
3aeb5     FF 27 10 00 
3aeb9     32          |                 byte    $FF, $27, $10, $00, $32
3aeba     00 00 00 00 
3aebe     00          |                 byte    $00, $00, $00, $00, $00
3aebf     00 00 00 00 
3aec3     00          |                 byte    $00, $00, $00, $00, $00
3aec4     00 00 00 00 
3aec8     00          |                 byte    $00, $00, $00, $00, $00
3aec9     00 00 00    |                 byte    $00, $00, $00
3aecc                 | '------------------------------------------------------------------------------
3aecc     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3aecf                 |                                         ' 0x01 All blinking
3aecf                 |                                         ' 0x02 1 flashes, then on
3aecf                 |                                         ' 0x03 2 flashes, then on
3aecf                 |                                         ' 0x04 3 flashes, then on
3aecf                 |                                         ' 0x05 4 flashes, then on
3aecf                 |                                         ' 0x06 1 on
3aecf                 |                                         ' 0x07 2 on
3aecf                 |                                         ' 0x08 3 on
3aecf                 |                                         ' 0x09 4 on
3aecf                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3aecf                 |                                         ' 0x0B Blinking*
3aecf                 |                                         ' 0x0C Slow blinking*
3aecf                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3aecf     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3aed2     00          |                 byte    $00             ' Left rumble
3aed3     00          |                 byte    $00             ' Right rumble
3aed4     00 00 00    |                 byte    $00, $00, $00
3aed7     00          | end
3aed8                 | alignl
3aed8                 | 
3aed8                 | if HAVE_MOUSE
3aed8     00 00 00 00 
3aedc     00 00 00 00 | mouse_limits long 0[2]
3aee0     00 00 00 00 | mouse_outptr long 0
3aee4                 | end
3aee4                 | 
3aee4                 | if KEYQUEUE_SIZE > 0
3aee4     00          | keyq_head byte 0
3aee5     00          | keyq_tail byte 0
3aee6     00 00 00 00 
      ...             
3b0e2     00 00 00 00 
3b0e6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3b0e8                 | alignl
3b0e8                 | end
3b0e8                 | 
3b0e8                 | if EMUPAD_MAX_PLAYER > 0
3b0e8                 | emupad_rule_buffer
3b0e8                 | if EMUPAD_BUILTIN_RULES
3b0e8                 | file "padmap_builtin.dat"
3b0e8                 | end
3b0e8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3b0e8                 | '' Default rule directly follows!
3b0e8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3b0e8                 | end
3b0e8                 | 
3b0e8                 | '------------------------------------------------------------------------------
3b0e8                 | ' The USB data cache area gets zero-filled at every device disconnect
3b0e8                 | '------------------------------------------------------------------------------
3b0e8                 | usb_cache_start
3b0e8                 | 
3b0e8                 | ' HID descriptor and report buffers
3b0e8                 | if !!OVERLAP_MEMORY
3b0e8     00 00 00 00 
      ...             
3b7e0     00 00 00 00 
3b7e4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3b7e8                 | end
3b7e8     00 00 00 00 
3b7ec     00 00 00 00 | hkbd_report     byte    0[8]
3b7f0     00 00 00 00 | hkbd_led_rep    byte    0
3b7f4                 | alignl
3b7f4                 | 
3b7f4                 | if HAVE_HIDPAD
3b7f4     00 00 00 00 
      ...             
3b8b0     00 00 00 00 
3b8b4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3b8b8                 | end
3b8b8                 | 
3b8b8                 | ' HUB descriptor
3b8b8     00          | hub_descr       byte    0   ' bDescLength
3b8b9     00          |                 byte    0   ' bDescriptorType
3b8ba     00          |                 byte    0   ' bNbrPorts
3b8bb     00 00       |                 word    0   ' wHubCharacteristics
3b8bd     00          |                 byte    0   ' bPwrOn2PwrGood
3b8be     00          |                 byte    0   ' bHubContrCurrent
3b8bf     00          |                 byte    0   ' DeviceRemoveable
3b8c0     00          |                 byte    0   ' PortPwrCtrlMask
3b8c1                 | 
3b8c1                 | usb_cache_end
3b8c1                 | 
3b8c1                 | if HAVE_MOUSE
3b8c1     00 00 00 00 | mouse_xacc      long 0
3b8c5     00 00 00 00 | mouse_yacc      long 0
3b8c9     00 00 00 00 | mouse_zacc      long 0
3b8cd     00          | mouse_bstate    byte 0
3b8ce     00          | mouse_lpending  byte 0
3b8cf     00          | mouse_rpending  byte 0
3b8d0     00          | mouse_mpending  byte 0
3b8d1     00          | mouse_lock      byte 0
3b8d2     00 00 00    |                 byte 0[3] ' padding
3b8d5                 | end
3b8d5                 | 
3b8d5     00 00 00 00 
      ...             
3b94d     00 00 00 00 
3b951     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3b955     00 00 00 00 
3b959     00 00 00 00 
3b95d     00 00 00 00 
3b961     00 00 00 00 
3b965     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3b967     00 00 00 00 
      ...             
3ba5f     00 00 00 00 
3ba63     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3ba67                 | 
3ba67     00          | driver_cog      byte    0                       ' Current driver cog + 1
3ba68                 | 	alignl
3ba68                 | _audio096_spin2_dat_
3ba68                 | 
3ba68                 | audio       org     0
3ba68                 | 
3ba68     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3ba6c     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3ba70     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3ba74                 |  
3ba74     01 EC 63 FD |             cogid   pa                   ' compute cogid
3ba78     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3ba7c     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3ba80     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3ba84                 | 
3ba84     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3ba88     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3ba8c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3ba90     0F 24 06 FC |             wrpin   dac2,#right
3ba94     0F 00 1E FC |             wxpin   #256,#right    
3ba98     41 9C 64 FD |             dirh    #left addpins 1
3ba9c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3baa0     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3baa4     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3baa8                 |             
3baa8                 | '---------------------------------------------------------------------------------        
3baa8                 | '----------------- The main loop -------------------------------------------------
3baa8                 | '---------------------------------------------------------------------------------
3baa8                 | 
3baa8     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3baac     10 00 90 CD |       if_c  jmp     #loop1
3bab0                 |   
3bab0     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3bab4     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3bab8     D5 00 80 F1 |             sub     0-0,a40000000
3babc     FD 01 6E FB |             djnz    cn,#p402
3bac0                 |     
3bac0     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3bac4     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3bac8     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3bacc     01 00 06 C6 |     if_c    mov     cn,#1
3bad0     DA 02 3A F3 |             fle     ct,time3 wcz
3bad4     02 00 06 C6 |     if_c    mov     cn,#2     
3bad8     DB 02 3A F3 |             fle     ct,time4 wcz
3badc     03 00 06 C6 |     if_c    mov     cn,#3
3bae0     DC 02 3A F3 |             fle     ct,time5 wcz
3bae4     04 00 06 C6 |     if_c    mov     cn,#4
3bae8     DD 02 3A F3 |             fle     ct,time6 wcz
3baec     05 00 06 C6 |     if_c    mov     cn,#5
3baf0     DE 02 3A F3 |             fle     ct,time7 wcz
3baf4     06 00 06 C6 |     if_c    mov     cn,#6
3baf8     DF 02 3A F3 |             fle     ct,time8 wcz
3bafc     07 00 06 C6 |     if_c    mov     cn,#7
3bb00                 | 
3bb00                 | 
3bb00                 | '----------------------------------------------------------------------------------
3bb00                 | '------------- Compute channel samples --------------------------------------------
3bb00                 | '----------------------------------------------------------------------------------
3bb00                 | 
3bb00                 | 
3bb00     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3bb04     06 C0 65 F0 |             shl     channeladd,#6
3bb08     E0 F0 03 F1 |             add     ptra,channeladd
3bb0c                 | 
3bb0c     28 16 64 FD |             setq    #11                        	' read parameters
3bb10     00 D7 05 FB |             rdlong  pointer0,ptra
3bb14                 |     	    
3bb14     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3bb18     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3bb1c     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3bb20     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3bb24     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3bb28     00 C4 0D F2 |             cmp     qq,#0 wz                         
3bb2c     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3bb30     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3bb34                 |             
3bb34     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3bb38     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3bb3c     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3bb40                 | 
3bb40     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3bb44     EC 08 3A F9 |             getword oldrs,sample0,#1
3bb48     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3bb4c     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3bb50     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3bb54     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3bb58                 | 
3bb58     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3bb5c     00 04 02 F6 |             mov     dt0,0-0    
3bb60     D7 04 82 F1 |             sub     dt0,time0
3bb64                 |             
3bb64     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3bb68     FB 00 00 F1 |             add     0-0,afreq0  	
3bb6c                 |             
3bb6c                 | '---- envelopes
3bb6c                 |             
3bb6c     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3bb70     20 00 00 AF 
3bb74     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3bb78     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3bb7c                 | 
3bb7c     FB 48 02 F6 |             mov     envs1,afreq0
3bb80     F5 48 02 FA |             mul     envs1,envspd0
3bb84     24 E7 01 F1 |             add     envph0,envs1 
3bb88                 | 
3bb88     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3bb8c     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3bb90     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3bb94     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3bb98     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3bb9c     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3bba0     00 46 06 36 |     if_ge   mov     envlo,#0
3bba4     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3bba8     16 E6 65 30 |     if_ge   shl     envph0,#22
3bbac                 | 
3bbac     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3bbb0     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3bbb4     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3bbb8     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3bbbc     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3bbc0     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3bbc4     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3bbc8     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3bbcc     23 49 02 FA |             mul     envs1,envlo
3bbd0     25 49 02 F1 |             add     envs1,envs2
3bbd4     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3bbd8                 |             
3bbd8     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3bbdc     1B C6 61 AD |     if_z    getrnd  spl
3bbe0     58 00 90 AD |     if_z    jmp     #p406
3bbe4                 |  
3bbe4     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3bbe8     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3bbec     08 D6 45 F0 |             shr     pointer0,#8
3bbf0                 |          
3bbf0     1F DA 0D F4 |             testb   sstart0,#31 wz            
3bbf4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3bbf8     1C DA 0D F4 |             testb   sstart0,#28 wz            
3bbfc     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3bc00                 |         
3bc00     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3bc04     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3bc08     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3bc0c                 |             
3bc0c     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3bc10     ED C4 01 F1 |             add     qq,sstart0            
3bc14                 | 
3bc14     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3bc18     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3bc1c     1C 01 B0 1D |     if_gt   call    #cache_read
3bc20                 |          
3bc20     1F DA 0D F4 |             testb   sstart0,#31 wz 
3bc24     08 C6 65 50 |     if_nz   shl     spl,#8
3bc28     08 D6 65 50 |     if_nz   shl     pointer0,#8
3bc2c     07 D6 65 A0 |     if_z    shl     pointer0,#7
3bc30     1C DA 0D F4 |             testb   sstart0,#28 wz            
3bc34     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3bc38     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3bc3c                 | 
3bc3c                 | 
3bc3c     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3bc40     00 C6 01 F6 |             mov     spl,0-0
3bc44     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3bc48     00 C6 01 F6 |             mov     spl,0-0
3bc4c                 | 
3bc4c     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3bc50     00 0A 02 F6 |             mov     ls0,0-0
3bc54     20 00 00 FF 
3bc58     00 C4 05 F6 |             mov     qq,##16384
3bc5c     FE C4 81 F1 |             sub     qq,apan0
3bc60     E2 C6 31 FA |             scas    spl,qq
3bc64     00 0C 02 F6 |             mov     rs0, 0-0
3bc68                 | 
3bc68     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3bc6c     06 11 02 F1 |             add     rs,rs0
3bc70     03 0F 82 F1 |             sub     ls,oldls
3bc74     05 0F 02 F1 |             add     ls,ls0
3bc78                 |    
3bc78     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3bc7c     05 D9 21 F9 |             setword sample0,ls0,#0
3bc80                 |             
3bc80     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3bc84     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3bc88     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3bc8c                 |   '  if_z    mov     sample0,#0
3bc8c     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3bc90     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3bc94     04 00 00 AF 
3bc98     00 B0 05 A1 |     if_z    add     time1,##2048
3bc9c     D8 B2 01 A6 |     if_z    mov     time2,time1
3bca0     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3bca4                 | 
3bca4     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3bca8     00 D7 65 FC |             wrlong  pointer0,ptra
3bcac     08 E7 65 FC |             wrlong  envph0,ptra[8]
3bcb0     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3bcb4                 |                       
3bcb4     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3bcb8     FF C3 25 A7 |     if_z    decmod  front, #511          
3bcbc                 |          
3bcbc     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3bcc0     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3bcc4     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3bcc8     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3bccc                 | 	    
3bccc                 | 		    
3bccc     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3bcd0     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3bcd4     04 15 02 F6 |             mov     newsample, oldrs       
3bcd8                 | 
3bcd8     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3bcdc     02 AF 01 F1 |             add     time0,dt0    
3bce0                 |                                      
3bce0     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3bce4     D8 FD 9F AD |     if_z    jmp     #loop1
3bce8     02 C5 01 F6 |             mov     qq,dt0
3bcec                 | 
3bcec                 |     
3bcec                 |             
3bcec     01 4E 36 F0 | p301        rol     dropper,#1 wc
3bcf0     40 00 90 3D |     if_nc   jmp     #p399
3bcf4     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3bcf8     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3bcfc     F4 FF 9F AD |     if_e    jmp     #p398   
3bd00                 | 		
3bd00     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3bd04     20 00 90 AD |     if_z    jmp     #p302	   
3bd08                 |   
3bd08     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3bd0c     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3bd10     02 1E 66 C0 |     if_c    shl     scptr2,#2
3bd14     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3bd18     60 1E 66 FC |             wrlong  scptr2,#$60
3bd1c     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3bd20     01 00 00 CF 
3bd24     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3bd28                 | 			    
3bd28     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3bd2c     00 00 00 FF 
3bd30     FF C3 05 F7 |             incmod  front, ##511
3bd34     ED C5 6D FB | p399        djnz    qq,#p301
3bd38                 |             
3bd38     6C FD 9F FD |             jmp     #loop            'loop
3bd3c                 | 
3bd3c                 | '----------------------------------------------------------------------------------
3bd3c                 | '------------- This is the end of the main loop -----------------------------------
3bd3c                 | '----------------------------------------------------------------------------------
3bd3c                 | 
3bd3c                 | '----------------------------------------------------------------------------------
3bd3c                 | '------------- PSRAM cache ----------- --------------------------------------------
3bd3c                 | '----------------------------------------------------------------------------------
3bd3c                 | 
3bd3c                 | ' There are 8 cache pointers for 8 channels
3bd3c                 | ' if 24 higher bits of address=cache, then get a word from the cache
3bd3c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3bd3c                 | 
3bd3c                 | 
3bd3c     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3bd40                 |             
3bd40     E2 40 02 F6 | 	    mov     addrhi,qq		
3bd44     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3bd48     14 01 96 F9 | 	    alts    cn,#cache1            
3bd4c     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3bd50     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3bd54                 | 	
3bd54     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3bd58     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3bd5c     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3bd60     08 38 66 F0 | 	    shl     cmd,#8
3bd64     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3bd68     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3bd6c     08 3A 66 F0 |             shl     hubaddr,#8                  '
3bd70     13 3B 02 F1 |             add     hubaddr,hubptr 
3bd74     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3bd78     28 04 64 FD |             setq    #2                          ' write 3 longs
3bd7c     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3bd80     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3bd84     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3bd88                 |             
3bd88                 | 	
3bd88     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3bd8c     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3bd90     13 C5 01 F1 | 	    add     qq,hubptr
3bd94     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3bd98     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3bd9c                 |           
3bd9c                 | 
3bd9c                 | '--------------------------------------------------------------------------
3bd9c                 | '------ Interrupt service -------------------------------------------------
3bd9c                 | '------ Output the sample, get the next one if exists ---------------------
3bd9c                 | '--------------------------------------------------------------------------
3bd9c                 | 
3bd9c     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3bda0     0F D0 25 FC |             wypin   rsample,#right       '4
3bda4     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3bda8     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3bdac     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3bdb0     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3bdb4     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3bdb8                 |     
3bdb8     F5 FF 3B FB |             reti1                        '17/19 
3bdbc                 |           
3bdbc                 | '---------------------------------------------------------------------------
3bdbc                 | '-------- End of interrupt -------------------------------------------------
3bdbc                 | '---------------------------------------------------------------------------    
3bdbc                 | 
3bdbc                 | 
3bdbc                 | '---------------------------------------------------------------------------
3bdbc                 | '------- Variables ---------------------------------------------------------
3bdbc                 | '---------------------------------------------------------------------------
3bdbc                 | 
3bdbc                 | ' constants
3bdbc                 | 
3bdbc     00 00 00 40 | a40000000   long $40000000
3bdc0     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3bdc4                 | 
3bdc4                 | ' Time variables
3bdc4                 | 
3bdc4     00 00 00 00 | time0       long 0    ' Global sample computing time
3bdc8     01 00 00 00 | time1       long 1    ' Local channels time
3bdcc     02 00 00 00 | time2       long 2
3bdd0     03 00 00 00 | time3       long 3
3bdd4     04 00 00 00 | time4       long 4
3bdd8     05 00 00 00 | time5       long 5
3bddc     06 00 00 00 | time6       long 6
3bde0     07 00 00 00 | time7       long 7
3bde4     08 00 00 00 | time8       long 8
3bde8                 | 
3bde8     00 00 00 00 | channeladd long 0
3bdec                 | 
3bdec     00 00 00 00 | front       long 0
3bdf0                 | 
3bdf0                 | ' temporary variables 
3bdf0     00 00 00 00 | qq          long 0
3bdf4     00 00 00 00 | spl         long 0
3bdf8     00 00 00 00 | zero        long 0
3bdfc     00 00 00 00 | mailbox     long 0
3be00     00 00 00 00 | mailbox2 long 0
3be04                 | 
3be04                 | ' Interrupt ISR variables
3be04                 | 
3be04     00 00 00 00 | lsample     long 0
3be08     00 00 00 00 | rsample     long 0
3be0c     00 00 00 00 | lsnext      long 0
3be10     00 00 00 00 | rsnext      long 0 
3be14                 | 
3be14                 | ' channel parameter block
3be14                 | 
3be14     00 00 00 00 | pointer0    long 0     
3be18     00 00 00 00 | sample0     long 0
3be1c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3be20     00 00 00 00 | lstart0     long 0
3be24     00 00 00 00 | lend0       long 0
3be28     00 00 00 00 | volpan0     long 0
3be2c     00 00 00 00 | freqskip0   long 0
3be30     00 00 00 00 | command0    long 0
3be34     00 00 00 00 | envph0	    long 0
3be38     00 00 00 00 | envptr0	    long 0
3be3c     00 00 00 00 | envspd0	    long 0
3be40     00 00 00 00 | envlen0	    long 0
3be44     00 00 00 00 | res5	    long 0
3be48     00 00 00 00 | res6	    long 0
3be4c     00 00 00 00 | res7	    long 0
3be50     00 00 00 00 | res8	    long 0
3be54                 | 
3be54     00 00 00 00 | afreq0      long 0
3be58     00 00 00 00 | askip0      long 0
3be5c     00 00 00 00 | avol0       long 0
3be60     00 00 00 00 | apan0       long 0
3be64                 | 
3be64     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3be68     00 00 00 00 | cn          long 0
3be6c     00 00 00 00 | ct          long 0
3be70     00 00 00 00 | dt0         long 0
3be74                 | 
3be74                 | ' Samples
3be74     00 00 00 00 | oldls       long 0
3be78     00 00 00 00 | oldrs       long 0
3be7c                 | 
3be7c     00 00 00 00 | ls0         long 0
3be80     00 00 00 00 | rs0         long 0
3be84                 | 
3be84     00 00 00 00 | ls          long 0    
3be88     00 00 00 00 | rs          long 0
3be8c                 | 
3be8c     00 00 00 00 | oldsample   long 0
3be90     00 00 00 00 | newsample   long 0
3be94                 | 
3be94     00 00 00 00 | nrsample    long 0
3be98     00 00 00 00 | nlsample    long 0
3be9c                 | 
3be9c     00 00 00 00 | scbase long 0
3bea0     00 00 00 00 | scptr long 0
3bea4     00 00 00 00 | scptr2 long 0
3bea8     00 00 00 00 | scope long 0
3beac                 | 
3beac     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3beb0     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3beb4                 | 
3beb4     00 18 07 00 | hubptr      long $71800
3beb8     00 00 00 00 | cache1      long 0
3bebc     00 00 00 00 | cache2      long 0
3bec0     00 00 00 00 | cache3      long 0
3bec4     00 00 00 00 | cache4      long 0
3bec8     00 00 00 00 | cache5      long 0
3becc     00 00 00 00 | cache6      long 0
3bed0     00 00 00 00 | cache7      long 0
3bed4     00 00 00 00 | cache8      long 0
3bed8                 | 
3bed8                 | 
3bed8     00 00 00 00 | cmd         long 0
3bedc     00 00 00 00 | hubaddr     long 0
3bee0     00 01 00 00 | count       long 256
3bee4     00 00 00 00 | addrlo long 0
3bee8     00 00 00 00 | addrhi long 0
3beec     00 00 00 00 | pointer00 long 0
3bef0     00 00 00 00 | envhi long 0
3bef4     00 00 00 00 | envlo long 0
3bef8     00 00 00 00 | envs1 long 0
3befc     00 00 00 00 | envs2 long 0
3bf00     00 00 00 00 | noise0 long 0
3bf04     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3bf08     00 00 00 00 
3bf0c     00 00 00 00 | null  			long 	0,0           ' for channel reset
3bf10                 | 	alignl
3bf10                 | __system__dat_
3bf10     00 00 00 00 
3bf14     00 00 00 00 | 	byte	$00[8]
3bf18     03 00 00 00 
3bf1c     00 00 00 00 
3bf20     00 00 00 00 
3bf24     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf28     00 00 00 00 
      ...             
3c1b4     00 00 00 00 
3c1b8     00 00 00 00 | 	byte	$00[660]
3c1bc     00 00 A0 09 | 	long	(154 {__system____root_opendir})<<20
3c1c0     00 00 B0 09 | 	long	(155 {__system____root_closedir})<<20
3c1c4     00 00 C0 09 | 	long	(156 {__system____root_readdir})<<20
3c1c8     00 00 D0 09 | 	long	(157 {__system____root_stat})<<20
3c1cc     00 00 00 00 
3c1d0     00 00 00 00 
3c1d4     00 00 00 00 
3c1d8     00 00 00 00 
3c1dc     00 00 00 00 
3c1e0     00 00 00 00 
3c1e4     00 00 00 00 | 	byte	$00[28]
3c1e8     50 C2 03 00 | 	long	@@@__system__dat_ + 832
3c1ec     53 C2 03 00 | 	long	@@@__system__dat_ + 835
3c1f0     74 C2 03 00 | 	long	@@@__system__dat_ + 868
3c1f4     8D C2 03 00 | 	long	@@@__system__dat_ + 893
3c1f8     A8 C2 03 00 | 	long	@@@__system__dat_ + 920
3c1fc     C2 C2 03 00 | 	long	@@@__system__dat_ + 946
3c200     D2 C2 03 00 | 	long	@@@__system__dat_ + 962
3c204     E4 C2 03 00 | 	long	@@@__system__dat_ + 980
3c208     F6 C2 03 00 | 	long	@@@__system__dat_ + 998
3c20c     08 C3 03 00 | 	long	@@@__system__dat_ + 1016
3c210     14 C3 03 00 | 	long	@@@__system__dat_ + 1028
3c214     25 C3 03 00 | 	long	@@@__system__dat_ + 1045
3c218     39 C3 03 00 | 	long	@@@__system__dat_ + 1065
3c21c     43 C3 03 00 | 	long	@@@__system__dat_ + 1075
3c220     53 C3 03 00 | 	long	@@@__system__dat_ + 1091
3c224     62 C3 03 00 | 	long	@@@__system__dat_ + 1106
3c228     78 C3 03 00 | 	long	@@@__system__dat_ + 1128
3c22c     91 C3 03 00 | 	long	@@@__system__dat_ + 1153
3c230     A5 C3 03 00 | 	long	@@@__system__dat_ + 1173
3c234     B3 C3 03 00 | 	long	@@@__system__dat_ + 1187
3c238     C7 C3 03 00 | 	long	@@@__system__dat_ + 1207
3c23c     D3 C3 03 00 | 	long	@@@__system__dat_ + 1219
3c240     E5 C3 03 00 | 	long	@@@__system__dat_ + 1237
3c244     FD C3 03 00 | 	long	@@@__system__dat_ + 1261
3c248     0F C4 03 00 | 	long	@@@__system__dat_ + 1279
3c24c     22 C4 03 00 | 	long	@@@__system__dat_ + 1298
3c250     4F 4B 00 4E 
3c254     75 6D 65 72 
3c258     69 63 61 6C 
3c25c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3c260     75 6D 65 6E 
3c264     74 20 6F 75 
3c268     74 20 6F 66 
3c26c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3c270     61 69 6E 00 
3c274     52 65 73 75 
3c278     6C 74 20 6E 
3c27c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3c280     65 70 72 65 
3c284     73 65 6E 74 
3c288     61 62 6C 65 
3c28c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3c290     65 67 61 6C 
3c294     20 6D 75 6C 
3c298     74 69 62 79 
3c29c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3c2a0     65 71 75 65 
3c2a4     6E 63 65 00 
3c2a8     4E 6F 20 73 
3c2ac     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3c2b0     66 69 6C 65 
3c2b4     20 6F 72 20 
3c2b8     64 69 72 65 
3c2bc     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3c2c0     79 00 42 61 
3c2c4     64 20 66 69 
3c2c8     6C 65 20 6E 
3c2cc     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3c2d0     72 00 50 65 
3c2d4     72 6D 69 73 
3c2d8     73 69 6F 6E 
3c2dc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3c2e0     69 65 64 00 
3c2e4     4E 6F 74 20 
3c2e8     65 6E 6F 75 
3c2ec     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3c2f0     65 6D 6F 72 
3c2f4     79 00 54 65 
3c2f8     6D 70 6F 72 
3c2fc     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3c300     66 61 69 6C 
3c304     75 72 65 00 
3c308     46 69 6C 65 
3c30c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3c310     73 74 73 00 
3c314     49 6E 76 61 
3c318     6C 69 64 20 
3c31c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3c320     6D 65 6E 74 
3c324     00 54 6F 6F 
3c328     20 6D 61 6E 
3c32c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3c330     65 6E 20 66 
3c334     69 6C 65 73 
3c338     00 49 2F 4F 
3c33c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3c340     6F 72 00 4E 
3c344     6F 74 20 61 
3c348     20 64 69 72 
3c34c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3c350     72 79 00 49 
3c354     73 20 61 20 
3c358     64 69 72 65 
3c35c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3c360     79 00 52 65 
3c364     61 64 20 6F 
3c368     6E 6C 79 20 
3c36c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3c370     20 73 79 73 
3c374     74 65 6D 00 
3c378     46 75 6E 63 
3c37c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3c380     20 6E 6F 74 
3c384     20 69 6D 70 
3c388     6C 65 6D 65 
3c38c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3c390     00 44 69 72 
3c394     65 63 74 6F 
3c398     72 79 20 6E 
3c39c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3c3a0     6D 70 74 79 
3c3a4     00 4E 61 6D 
3c3a8     65 20 74 6F 
3c3ac     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3c3b0     6E 67 00 44 
3c3b4     65 76 69 63 
3c3b8     65 20 6E 6F 
3c3bc     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3c3c0     65 6B 61 62 
3c3c4     6C 65 00 42 
3c3c8     61 64 20 61 
3c3cc     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3c3d0     73 73 00 42 
3c3d4     72 6F 6B 65 
3c3d8     6E 20 63 6F 
3c3dc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3c3e0     74 69 6F 6E 
3c3e4     00 44 65 76 
3c3e8     69 63 65 20 
3c3ec     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3c3f0     65 73 6F 75 
3c3f4     72 63 65 20 
3c3f8     62 75 73 79 
3c3fc     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3c400     73 73 20 64 
3c404     65 76 69 63 
3c408     65 20 6C 69 
3c40c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3c410     6F 20 73 70 
3c414     61 63 65 20 
3c418     6F 6E 20 64 
3c41c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3c420     65 00 55 6E 
3c424     6B 6E 6F 77 
3c428     6E 20 65 72 
3c42c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3c430     00 00 00 00 
3c434     00 00 00 00 
3c438     00 00 00 00 | 	byte	$00[12]
3c43c     05 00 00 00 
3c440     00 00 00 00 
3c444     00 00 00 00 
3c448     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c44c     00 00 00 00 | 	byte	$00, $00, $00, $00
3c450     00 00 20 0B | 	long	(178 {__system___tx})<<20
3c454     00 00 30 0B | 	long	(179 {__system___rx})<<20
3c458     00 00 00 00 | 	byte	$00, $00, $00, $00
3c45c     00 00 40 0B | 	long	(180 {__system___rxtxioctl_0733})<<20
3c460     00 00 50 0B | 	long	(181 {__system____dummy_flush_0734})<<20
3c464     00 00 00 00 
3c468     00 00 00 00 | 	byte	$00[8]
3c46c     01 00 00 00 
3c470     06 00 00 00 
3c474     00 00 00 00 
3c478     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c47c     00 00 00 00 
3c480     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c484     00 00 20 0B | 	long	(178 {__system___tx})<<20
3c488     00 00 30 0B | 	long	(179 {__system___rx})<<20
3c48c     00 00 00 00 | 	byte	$00, $00, $00, $00
3c490     00 00 40 0B | 	long	(180 {__system___rxtxioctl_0733})<<20
3c494     00 00 50 0B | 	long	(181 {__system____dummy_flush_0734})<<20
3c498     00 00 00 00 
3c49c     00 00 00 00 | 	byte	$00[8]
3c4a0     01 00 00 00 
3c4a4     06 00 00 00 
3c4a8     00 00 00 00 
3c4ac     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c4b0     00 00 00 00 
3c4b4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c4b8     00 00 20 0B | 	long	(178 {__system___tx})<<20
3c4bc     00 00 30 0B | 	long	(179 {__system___rx})<<20
3c4c0     00 00 00 00 | 	byte	$00, $00, $00, $00
3c4c4     00 00 40 0B | 	long	(180 {__system___rxtxioctl_0733})<<20
3c4c8     00 00 50 0B | 	long	(181 {__system____dummy_flush_0734})<<20
3c4cc     00 00 00 00 
      ...             
3c63c     00 00 00 00 
3c640     00 00 00 00 | 	byte	$00[376]
3c644     48 C6 03 00 | 	long	@@@__system__dat_ + 1848
3c648     00 00 00 00 
3c64c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c650                 | 	alignl
3c650                 | _fatfs_cc_dat_
3c650     C7 00 FC 00 
3c654     E9 00 E2 00 
3c658     E4 00 E0 00 
3c65c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3c660     EA 00 EB 00 
3c664     E8 00 EF 00 
3c668     EE 00 EC 00 
3c66c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3c670     C9 00 E6 00 
3c674     C6 00 F4 00 
3c678     F6 00 F2 00 
3c67c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3c680     FF 00 D6 00 
3c684     DC 00 F8 00 
3c688     A3 00 D8 00 
3c68c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3c690     E1 00 ED 00 
3c694     F3 00 FA 00 
3c698     F1 00 D1 00 
3c69c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3c6a0     BF 00 AE 00 
3c6a4     AC 00 BD 00 
3c6a8     BC 00 A1 00 
3c6ac     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3c6b0     91 25 92 25 
3c6b4     93 25 02 25 
3c6b8     24 25 C1 00 
3c6bc     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3c6c0     A9 00 63 25 
3c6c4     51 25 57 25 
3c6c8     5D 25 A2 00 
3c6cc     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3c6d0     14 25 34 25 
3c6d4     2C 25 1C 25 
3c6d8     00 25 3C 25 
3c6dc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3c6e0     5A 25 54 25 
3c6e4     69 25 66 25 
3c6e8     60 25 50 25 
3c6ec     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3c6f0     F0 00 D0 00 
3c6f4     CA 00 CB 00 
3c6f8     C8 00 31 01 
3c6fc     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3c700     CF 00 18 25 
3c704     0C 25 88 25 
3c708     84 25 A6 00 
3c70c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3c710     D3 00 DF 00 
3c714     D4 00 D2 00 
3c718     F5 00 D5 00 
3c71c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3c720     DE 00 DA 00 
3c724     DB 00 D9 00 
3c728     FD 00 DD 00 
3c72c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3c730     AD 00 B1 00 
3c734     17 20 BE 00 
3c738     B6 00 A7 00 
3c73c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3c740     B0 00 A8 00 
3c744     B7 00 B9 00 
3c748     B3 00 B2 00 
3c74c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3c750     61 00 1A 03 
3c754     E0 00 17 03 
3c758     F8 00 07 03 
3c75c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3c760     78 01 00 01 
3c764     30 01 32 01 
3c768     06 01 39 01 
3c76c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3c770     2E 01 79 01 
3c774     06 01 80 01 
3c778     4D 00 43 02 
3c77c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3c780     82 01 84 01 
3c784     84 01 86 01 
3c788     87 01 87 01 
3c78c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3c790     8B 01 8B 01 
3c794     8D 01 8E 01 
3c798     8F 01 90 01 
3c79c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3c7a0     93 01 94 01 
3c7a4     F6 01 96 01 
3c7a8     97 01 98 01 
3c7ac     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3c7b0     9B 01 9C 01 
3c7b4     9D 01 20 02 
3c7b8     9F 01 A0 01 
3c7bc     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3c7c0     A2 01 A4 01 
3c7c4     A4 01 A6 01 
3c7c8     A7 01 A7 01 
3c7cc     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3c7d0     AB 01 AC 01 
3c7d4     AC 01 AE 01 
3c7d8     AF 01 AF 01 
3c7dc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3c7e0     B3 01 B3 01 
3c7e4     B5 01 B5 01 
3c7e8     B7 01 B8 01 
3c7ec     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3c7f0     BB 01 BC 01 
3c7f4     BC 01 BE 01 
3c7f8     F7 01 C0 01 
3c7fc     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3c800     C3 01 C4 01 
3c804     C5 01 C4 01 
3c808     C7 01 C8 01 
3c80c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3c810     CB 01 CA 01 
3c814     CD 01 10 01 
3c818     DD 01 01 00 
3c81c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3c820     12 01 F3 01 
3c824     03 00 F1 01 
3c828     F4 01 F4 01 
3c82c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3c830     22 02 12 01 
3c834     3A 02 09 00 
3c838     65 2C 3B 02 
3c83c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3c840     66 2C 3F 02 
3c844     40 02 41 02 
3c848     41 02 46 02 
3c84c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3c850     40 00 81 01 
3c854     86 01 55 02 
3c858     89 01 8A 01 
3c85c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3c860     5A 02 90 01 
3c864     5C 02 5D 02 
3c868     5E 02 5F 02 
3c86c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3c870     62 02 94 01 
3c874     64 02 65 02 
3c878     66 02 67 02 
3c87c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3c880     6A 02 62 2C 
3c884     6C 02 6D 02 
3c888     6E 02 9C 01 
3c88c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3c890     9D 01 73 02 
3c894     74 02 9F 01 
3c898     76 02 77 02 
3c89c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3c8a0     7A 02 7B 02 
3c8a4     7C 02 64 2C 
3c8a8     7E 02 7F 02 
3c8ac     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3c8b0     82 02 A9 01 
3c8b4     84 02 85 02 
3c8b8     86 02 87 02 
3c8bc     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3c8c0     B1 01 B2 01 
3c8c4     45 02 8D 02 
3c8c8     8E 02 8F 02 
3c8cc     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3c8d0     B7 01 7B 03 
3c8d4     03 00 FD 03 
3c8d8     FE 03 FF 03 
3c8dc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3c8e0     86 03 88 03 
3c8e4     89 03 8A 03 
3c8e8     B1 03 11 03 
3c8ec     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3c8f0     A3 03 A3 03 
3c8f4     C4 03 08 03 
3c8f8     CC 03 03 00 
3c8fc     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3c900     8F 03 D8 03 
3c904     18 01 F2 03 
3c908     0A 00 F9 03 
3c90c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3c910     F5 03 F6 03 
3c914     F7 03 F7 03 
3c918     F9 03 FA 03 
3c91c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3c920     20 03 50 04 
3c924     10 07 60 04 
3c928     22 01 8A 04 
3c92c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3c930     0E 01 CF 04 
3c934     01 00 C0 04 
3c938     D0 04 44 01 
3c93c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3c940     00 00 7D 1D 
3c944     01 00 63 2C 
3c948     00 1E 96 01 
3c94c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3c950     00 1F 08 06 
3c954     10 1F 06 06 
3c958     20 1F 08 06 
3c95c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3c960     40 1F 06 06 
3c964     51 1F 07 00 
3c968     59 1F 52 1F 
3c96c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3c970     5D 1F 56 1F 
3c974     5F 1F 60 1F 
3c978     08 06 70 1F 
3c97c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3c980     BB 1F C8 1F 
3c984     C9 1F CA 1F 
3c988     CB 1F DA 1F 
3c98c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3c990     F9 1F EA 1F 
3c994     EB 1F FA 1F 
3c998     FB 1F 80 1F 
3c99c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3c9a0     08 06 A0 1F 
3c9a4     08 06 B0 1F 
3c9a8     04 00 B8 1F 
3c9ac     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3c9b0     BC 1F CC 1F 
3c9b4     01 00 C3 1F 
3c9b8     D0 1F 02 06 
3c9bc     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3c9c0     E5 1F 01 00 
3c9c4     EC 1F F3 1F 
3c9c8     01 00 FC 1F 
3c9cc     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3c9d0     32 21 70 21 
3c9d4     10 02 84 21 
3c9d8     01 00 83 21 
3c9dc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3c9e0     30 2C 2F 04 
3c9e4     60 2C 02 01 
3c9e8     67 2C 06 01 
3c9ec     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3c9f0     80 2C 64 01 
3c9f4     00 2D 26 08 
3c9f8     41 FF 1A 03 
3c9fc     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3ca00     05 07 09 0E 
3ca04     10 12 14 16 
3ca08     18 1C 1E 43 
3ca0c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3ca10     41 41 43 45 
3ca14     45 45 49 49 
3ca18     49 41 41 45 
3ca1c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3ca20     4F 55 55 59 
3ca24     4F 55 4F 9C 
3ca28     4F 9E 9F 41 
3ca2c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3ca30     A5 A6 A7 A8 
3ca34     A9 AA AB AC 
3ca38     AD AE AF B0 
3ca3c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3ca40     41 41 41 B8 
3ca44     B9 BA BB BC 
3ca48     BD BE BF C0 
3ca4c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3ca50     C5 41 41 C8 
3ca54     C9 CA CB CC 
3ca58     CD CE CF D1 
3ca5c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3ca60     49 49 49 49 
3ca64     D9 DA DB DC 
3ca68     DD 49 DF 4F 
3ca6c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3ca70     4F E6 E8 E8 
3ca74     55 55 55 59 
3ca78     59 EE EF F0 
3ca7c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3ca80     F5 F6 F7 F8 
3ca84     F9 FA FB FC 
3ca88     FD FE FF 00 
3ca8c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3ca90     00 00 00 00 | 	byte	$00, $00, $00, $00
3ca94     00 00 10 0A | 	long	(161 {_fatfs_cc_v_close})<<20
3ca98     00 00 20 0A | 	long	(162 {_fatfs_cc_v_read})<<20
3ca9c     00 00 30 0A | 	long	(163 {_fatfs_cc_v_write})<<20
3caa0     00 00 40 0A | 	long	(164 {_fatfs_cc_v_lseek})<<20
3caa4     00 00 50 0A | 	long	(165 {_fatfs_cc_v_ioctl})<<20
3caa8     00 00 60 0B | 	long	(182 {_fatfs_cc_v_flush})<<20
3caac     00 00 00 00 
3cab0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3cab4     00 00 60 0A | 	long	(166 {_fatfs_cc_v_open})<<20
3cab8     00 00 70 0A | 	long	(167 {_fatfs_cc_v_creat})<<20
3cabc     00 00 80 0A | 	long	(168 {_fatfs_cc_v_opendir})<<20
3cac0     00 00 90 0A | 	long	(169 {_fatfs_cc_v_closedir})<<20
3cac4     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_readdir})<<20
3cac8     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_stat})<<20
3cacc     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_mkdir})<<20
3cad0     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_rmdir})<<20
3cad4     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_remove})<<20
3cad8     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_rename})<<20
3cadc     00 00 00 0B | 	long	(176 {_fatfs_cc_v_init})<<20
3cae0     00 00 10 0B | 	long	(177 {_fatfs_cc_v_deinit})<<20
3cae4     FF FF FF FF 
3cae8     1F 00 00 00 
3caec     1C 00 00 00 
3caf0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3caf4     1E 00 00 00 
3caf8     1F 00 00 00 
3cafc     1E 00 00 00 
3cb00     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3cb04     1F 00 00 00 
3cb08     1E 00 00 00 
3cb0c     1F 00 00 00 
3cb10     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3cb14     1F 00 00 00 
3cb18     00 00 00 00 
3cb1c     1F 00 00 00 
3cb20     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3cb24     5A 00 00 00 
3cb28     78 00 00 00 
3cb2c     97 00 00 00 
3cb30     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3cb34     D4 00 00 00 
3cb38     F3 00 00 00 
3cb3c     11 01 00 00 
3cb40     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3cb44     4E 01 00 00 
3cb48     6D 01 00 00 
3cb4c     FF FF FF FF 
3cb50     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3cb54     00 00 00 00 
      ...             
3cb6c     00 00 00 00 
3cb70     00 00 00 00 | 	byte	$00[32]
3cb74     92 CB 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3cb78     96 CB 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3cb7c     00 00 00 00 
3cb80     00 00 00 00 
3cb84     00 00 00 00 
3cb88     00 00 00 00 
3cb8c     00 00       | 	byte	$00[18]
3cb8e     3F 3F 3F 00 
3cb92     55 43 54 00 
3cb96     55 43 54 00 
3cb9a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3cb9e     00 00 00 00 
3cba2     00 00 00    | 	byte	$00[7]
3cba5     CA 9A 3B 00 
3cba9     00 00 00 01 
3cbad     01 01 01 01 
3cbb1     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3cbb5     91 11 11 11 
3cbb9     11 01 01 01 
3cbbd     01 01 01 01 
3cbc1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3cbc5     01 01 01 01 
3cbc9     01 01 01    | 	byte	$01[7]
3cbcc     90 20 20 20 
3cbd0     20 20 20 20 
3cbd4     20 20 20 20 
3cbd8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3cbdc     42 42 42 42 
3cbe0     42 42 42 42 
3cbe4     42 42       | 	byte	$42[10]
3cbe6     20 20 20 20 
3cbea     20 20 20    | 	byte	$20[7]
3cbed     44 44 44 44 
3cbf1     44 44       | 	byte	$44[6]
3cbf3     04 04 04 04 
3cbf7     04 04 04 04 
3cbfb     04 04 04 04 
3cbff     04 04 04 04 
3cc03     04 04 04 04 | 	byte	$04[20]
3cc07     20 20 20 20 
3cc0b     20 20       | 	byte	$20[6]
3cc0d     48 48 48 48 
3cc11     48 48       | 	byte	$48[6]
3cc13     08 08 08 08 
3cc17     08 08 08 08 
3cc1b     08 08 08 08 
3cc1f     08 08 08 08 
3cc23     08 08 08 08 | 	byte	$08[20]
3cc27     20 20 20 20 
3cc2b     01 00 00 00 
3cc2f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3cc30                 | __methodtable__
3cc30     34 3C 01 00 | 	long	@_do_no_command
3cc34     C8 BA 01 00 | 	long	@_do_plus
3cc38     EC AA 01 00 | 	long	@_do_minus
3cc3c     B0 B9 01 00 | 	long	@_do_or
3cc40     6C B1 01 00 | 	long	@_do_mul
3cc44     D4 95 01 00 | 	long	@_do_fdiv
3cc48     C4 8D 01 00 | 	long	@_do_and
3cc4c     DC 8E 01 00 | 	long	@_do_div
3cc50     4C AF 01 00 | 	long	@_do_mod
3cc54     7C C1 01 00 | 	long	@_do_shl
3cc58     94 C2 01 00 | 	long	@_do_shr
3cc5c     B4 BF 01 00 | 	long	@_do_power
3cc60     1C 84 01 00 | 	long	@_do_getvar
3cc64     AC 57 01 00 | 	long	@_do_push
3cc68     14 7E 01 00 | 	long	@_do_assign
3cc6c     24 E1 00 00 | 	long	@_do_cls
3cc70     4C 36 01 00 | 	long	@_do_new
3cc74     F0 4F 01 00 | 	long	@_do_plot
3cc78     24 03 01 00 | 	long	@_do_draw
3cc7c     58 52 01 00 | 	long	@_do_print
3cc80     04 DF 00 00 | 	long	@_do_circle
3cc84     58 05 01 00 | 	long	@_do_fcircle
3cc88     F8 CD 00 00 | 	long	@_do_box
3cc8c     3C 0A 01 00 | 	long	@_do_frame
3cc90     64 E1 00 00 | 	long	@_do_color
3cc94     CC 07 01 00 | 	long	@_do_for
3cc98     6C 38 01 00 | 	long	@_do_next
3cc9c     78 24 01 00 | 	long	@_do_list
3cca0     04 64 01 00 | 	long	@_do_run
3cca4     80 04 01 00 | 	long	@_do_error
3cca8     88 16 01 00 | 	long	@_do_fast_goto
3ccac     78 17 01 00 | 	long	@_do_find_goto
3ccb0     8C 19 01 00 | 	long	@_do_slow_goto
3ccb4     44 3C 01 00 | 	long	@_do_nothing
3ccb8     FC C0 00 00 | 	long	@_test_csave
3ccbc     B8 67 01 00 | 	long	@_do_save
3ccc0     14 27 01 00 | 	long	@_do_load
3ccc4     2C 43 01 00 | 	long	@_do_pinwrite
3ccc8     54 7B 01 00 | 	long	@_do_waitms
3cccc     88 7C 01 00 | 	long	@_do_waitvbl
3ccd0     80 1C 01 00 | 	long	@_do_if
3ccd4     18 04 01 00 | 	long	@_do_else
3ccd8     FC 90 01 00 | 	long	@_do_eq
3ccdc     9C 97 01 00 | 	long	@_do_ge
3cce0     4C A1 01 00 | 	long	@_do_le
3cce4     74 9C 01 00 | 	long	@_do_gt
3cce8     24 A6 01 00 | 	long	@_do_lt
3ccec     D8 B4 01 00 | 	long	@_do_ne
3ccf0     6C 61 01 00 | 	long	@_do_rnd
3ccf4     E0 CF 00 00 | 	long	@_do_brun
3ccf8     7C C9 00 00 | 	long	@_do_beep
3ccfc     B4 FB 00 00 | 	long	@_do_dir
3cd00     60 3F 01 00 | 	long	@_do_paper
3cd04     3C 20 01 00 | 	long	@_do_ink
3cd08     50 07 01 00 | 	long	@_do_font
3cd0c     5C 31 01 00 | 	long	@_do_mode
3cd10     08 35 01 00 | 	long	@_do_mouse
3cd14     08 15 01 00 | 	long	@_do_gettime
3cd18     C0 E2 00 00 | 	long	@_do_cursor
3cd1c     7C E0 00 00 | 	long	@_do_click
3cd20     C4 35 01 00 | 	long	@_do_mousex
3cd24     08 36 01 00 | 	long	@_do_mousey
3cd28     3C 35 01 00 | 	long	@_do_mousek
3cd2c     80 35 01 00 | 	long	@_do_mousew
3cd30     04 71 01 00 | 	long	@_do_sin
3cd34     F4 73 01 00 | 	long	@_do_stick
3cd38     84 75 01 00 | 	long	@_do_strig
3cd3c     14 72 01 00 | 	long	@_do_sprite
3cd40     DC F6 00 00 | 	long	@_do_defsprite
3cd44     B4 13 01 00 | 	long	@_do_getpixel
3cd48     30 7B 01 00 | 	long	@_do_waitclock
3cd4c     9C AE 01 00 | 	long	@_do_negative
3cd50     30 5E 01 00 | 	long	@_do_rdpin
3cd54     90 63 01 00 | 	long	@_do_rqpin
3cd58     58 41 01 00 | 	long	@_do_pinread
3cd5c     94 7C 01 00 | 	long	@_do_wrpin
3cd60     14 7D 01 00 | 	long	@_do_wxpin
3cd64     94 7D 01 00 | 	long	@_do_wypin
3cd68     98 40 01 00 | 	long	@_do_pinfloat
3cd6c     18 41 01 00 | 	long	@_do_pinlo
3cd70     D8 40 01 00 | 	long	@_do_pinhi
3cd74     DC 41 01 00 | 	long	@_do_pinstart
3cd78     EC 42 01 00 | 	long	@_do_pintoggle
3cd7c     D0 51 01 00 | 	long	@_do_position
3cd80     9C E1 00 00 | 	long	@_do_cos
3cd84     14 77 01 00 | 	long	@_do_tan
3cd88     64 C8 00 00 | 	long	@_do_atn
3cd8c     54 C7 00 00 | 	long	@_do_asin
3cd90     E4 C4 00 00 | 	long	@_do_acos
3cd94     00 73 01 00 | 	long	@_do_sqr
3cd98     3C 06 01 00 | 	long	@_do_fill
3cd9c     F0 ED 00 00 | 	long	@_do_defsnd
3cda0     F4 E2 00 00 | 	long	@_do_defenv
3cda4     08 5E 01 00 | 	long	@_do_rad
3cda8     50 FA 00 00 | 	long	@_do_deg
3cdac     BC 20 01 00 | 	long	@_do_int
3cdb0     B4 43 01 00 | 	long	@_do_play
3cdb4     5C 6B 01 00 | 	long	@_do_setdelay
3cdb8     04 6C 01 00 | 	long	@_do_setenv
3cdbc     AC 6C 01 00 | 	long	@_do_setlen
3cdc0     54 6D 01 00 | 	long	@_do_setpan
3cdc4     A4 6E 01 00 | 	long	@_do_setvol
3cdc8     4C 6F 01 00 | 	long	@_do_setwave
3cdcc     FC 6D 01 00 | 	long	@_do_setsustain
3cdd0     9C 5E 01 00 | 	long	@_do_release
3cdd4     A0 11 01 00 | 	long	@_do_getenvsustain
3cdd8     C0 50 01 00 | 	long	@_do_poke
3cddc     4C 02 01 00 | 	long	@_do_dpoke
3cde0     EC 2D 01 00 | 	long	@_do_lpoke
3cde4     E8 3F 01 00 | 	long	@_do_peek
3cde8     A0 01 01 00 | 	long	@_do_dpeek
3cdec     40 2D 01 00 | 	long	@_do_lpeek
3cdf0     98 0B 01 00 | 	long	@_do_fre
3cdf4     B0 12 01 00 | 	long	@_do_getnotevalue
3cdf8     D4 89 01 00 | 	long	@_do_getaddr
3cdfc     64 1D 01 00 | 	long	@_do_inkey
3ce00     64 C4 00 00 | 	long	@_do_abs
3ce04     1C 1B 01 00 | 	long	@_do_hex
3ce08     94 CC 00 00 | 	long	@_do_bin
3ce0c     24 78 01 00 | 	long	@_do_val
3ce10     04 DE 00 00 | 	long	@_do_chr
3ce14     F4 C5 00 00 | 	long	@_do_asc
3ce18     78 21 01 00 | 	long	@_do_left
3ce1c     E0 5F 01 00 | 	long	@_do_right
3ce20     C4 2E 01 00 | 	long	@_do_mid
3ce24     04 23 01 00 | 	long	@_do_len
3ce28     70 15 01 00 | 	long	@_do_gosub
3ce2c     34 5F 01 00 | 	long	@_do_return
3ce30     3C 04 01 00 | 	long	@_do_end
3ce34     98 51 01 00 | 	long	@_do_pop
3ce38     C4 2B 01 00 | 	long	@_do_log
3ce3c     F8 DB 00 00 | 	long	@_do_changevol
3ce40     D8 DC 00 00 | 	long	@_do_changewav
3ce44     E8 DA 00 00 | 	long	@_do_changepan
3ce48     CC D7 00 00 | 	long	@_do_changefreq
3ce4c     F4 6F 01 00 | 	long	@_do_shutup
3ce50     3C 63 01 00 | 	long	@_do_round
3ce54     70 04 01 00 | 	long	@_do_enter
3ce58     48 3C 01 00 | 	long	@_do_open
3ce5c     A8 E0 00 00 | 	long	@_do_close
3ce60     FC 0B 01 00 | 	long	@_do_get
3ce64     C8 58 01 00 | 	long	@_do_put
3ce68     18 D2 00 00 | 	long	@_do_cd
3ce6c     78 FA 00 00 | 	long	@_do_delete
3ce70     90 30 01 00 | 	long	@_do_mkdir
3ce74     90 CA 00 00 | 	long	@_do_blit
3ce78     64 0B 01 00 | 	long	@_do_framebuf
3ce7c     AC 00 02 00 | 	long	@_hg010b_spin2_putchar
3ce80     50 16 03 00 | 	long	@__struct___bas_wrap_sender_tx
3ce84     94 16 03 00 | 	long	@__struct___bas_wrap_sender_rx
3ce88     DC 16 03 00 | 	long	@__struct___bas_wrap_sender_close
3ce8c     80 15 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3ce90     F0 15 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3ce94     38 15 03 00 | 	long	@___strs_cl_pfunc
3ce98     CC 72 02 00 | 	long	@__system____root_opendir
3ce9c     68 73 02 00 | 	long	@__system____root_closedir
3cea0     E4 72 02 00 | 	long	@__system____root_readdir
3cea4     70 73 02 00 | 	long	@__system____root_stat
3cea8     FC 6A 02 00 | 	long	@__system____default_putc
3ceac     80 6A 02 00 | 	long	@__system____default_getc
3ceb0     A4 6B 02 00 | 	long	@__system____default_flush
3ceb4     3C 00 03 00 | 	long	@_fatfs_cc_v_close
3ceb8     58 04 03 00 | 	long	@_fatfs_cc_v_read
3cebc     6C 05 03 00 | 	long	@_fatfs_cc_v_write
3cec0     4C 06 03 00 | 	long	@_fatfs_cc_v_lseek
3cec4     D4 06 03 00 | 	long	@_fatfs_cc_v_ioctl
3cec8     28 07 03 00 | 	long	@_fatfs_cc_v_open
3cecc     A0 FF 02 00 | 	long	@_fatfs_cc_v_creat
3ced0     80 00 03 00 | 	long	@_fatfs_cc_v_opendir
3ced4     F4 00 03 00 | 	long	@_fatfs_cc_v_closedir
3ced8     34 01 03 00 | 	long	@_fatfs_cc_v_readdir
3cedc     68 02 03 00 | 	long	@_fatfs_cc_v_stat
3cee0     E8 06 03 00 | 	long	@_fatfs_cc_v_mkdir
3cee4     08 07 03 00 | 	long	@_fatfs_cc_v_rmdir
3cee8     F8 06 03 00 | 	long	@_fatfs_cc_v_remove
3ceec     18 07 03 00 | 	long	@_fatfs_cc_v_rename
3cef0     38 08 03 00 | 	long	@_fatfs_cc_v_init
3cef4     40 08 03 00 | 	long	@_fatfs_cc_v_deinit
3cef8     0C 1D 02 00 | 	long	@__system___tx
3cefc     4C 1D 02 00 | 	long	@__system___rx
3cf00     DC 7E 02 00 | 	long	@__system___rxtxioctl_0733
3cf04     34 7F 02 00 | 	long	@__system____dummy_flush_0734
3cf08     08 08 03 00 | 	long	@_fatfs_cc_v_flush
3cf0c                 | __heap_base
3cf0c     00 00 00 00 
      ...             
5460c     00 00 00 00 
54610     00 00 00 00 | 	long	0[24002]
54614                 | objmem
54614     00 00 00 00 
      ...             
5ea38     00 00 00 00 
5ea3c     00 00 00 00 | 	long	0[10507]
5ea40                 | stackspace
5ea40     00 00 00 00 | 	long	0[1]
5ea44 100             | 	org	COG_BSS_START
5ea44 100             | _var01
5ea44 100             | 	res	1
5ea44 101             | _var02
5ea44 101             | 	res	1
5ea44 102             | _var03
5ea44 102             | 	res	1
5ea44 103             | _var04
5ea44 103             | 	res	1
5ea44 104             | _var05
5ea44 104             | 	res	1
5ea44 105             | _var06
5ea44 105             | 	res	1
5ea44 106             | _var07
5ea44 106             | 	res	1
5ea44 107             | _var08
5ea44 107             | 	res	1
5ea44 108             | _var09
5ea44 108             | 	res	1
5ea44 109             | arg01
5ea44 109             | 	res	1
5ea44 10a             | arg02
5ea44 10a             | 	res	1
5ea44 10b             | arg03
5ea44 10b             | 	res	1
5ea44 10c             | arg04
5ea44 10c             | 	res	1
5ea44 10d             | arg05
5ea44 10d             | 	res	1
5ea44 10e             | arg06
5ea44 10e             | 	res	1
5ea44 10f             | arg07
5ea44 10f             | 	res	1
5ea44 110             | arg08
5ea44 110             | 	res	1
5ea44 111             | arg09
5ea44 111             | 	res	1
5ea44 112             | arg10
5ea44 112             | 	res	1
5ea44 113             | local01
5ea44 113             | 	res	1
5ea44 114             | local02
5ea44 114             | 	res	1
5ea44 115             | local03
5ea44 115             | 	res	1
5ea44 116             | local04
5ea44 116             | 	res	1
5ea44 117             | local05
5ea44 117             | 	res	1
5ea44 118             | local06
5ea44 118             | 	res	1
5ea44 119             | local07
5ea44 119             | 	res	1
5ea44 11a             | local08
5ea44 11a             | 	res	1
5ea44 11b             | local09
5ea44 11b             | 	res	1
5ea44 11c             | local10
5ea44 11c             | 	res	1
5ea44 11d             | local11
5ea44 11d             | 	res	1
5ea44 11e             | local12
5ea44 11e             | 	res	1
5ea44 11f             | local13
5ea44 11f             | 	res	1
5ea44 120             | local14
5ea44 120             | 	res	1
5ea44 121             | local15
5ea44 121             | 	res	1
5ea44 122             | local16
5ea44 122             | 	res	1
5ea44 123             | local17
5ea44 123             | 	res	1
5ea44 124             | local18
5ea44 124             | 	res	1
5ea44 125             | local19
5ea44 125             | 	res	1
5ea44 126             | local20
5ea44 126             | 	res	1
5ea44 127             | local21
5ea44 127             | 	res	1
5ea44 128             | local22
5ea44 128             | 	res	1
5ea44 129             | local23
5ea44 129             | 	res	1
5ea44 12a             | local24
5ea44 12a             | 	res	1
5ea44 12b             | local25
5ea44 12b             | 	res	1
5ea44 12c             | local26
5ea44 12c             | 	res	1
5ea44 12d             | local27
5ea44 12d             | 	res	1
5ea44 12e             | local28
5ea44 12e             | 	res	1
5ea44 12f             | local29
5ea44 12f             | 	res	1
5ea44 130             | local30
5ea44 130             | 	res	1
5ea44 131             | local31
5ea44 131             | 	res	1
5ea44 132             | local32
5ea44 132             | 	res	1
5ea44 133             | local33
5ea44 133             | 	res	1
5ea44 134             | local34
5ea44 134             | 	res	1
5ea44 135             | local35
5ea44 135             | 	res	1
5ea44 136             | local36
5ea44 136             | 	res	1
5ea44 137             | local37
5ea44 137             | 	res	1
5ea44 138             | local38
5ea44 138             | 	res	1
5ea44 139             | local39
5ea44 139             | 	res	1
5ea44 13a             | local40
5ea44 13a             | 	res	1
5ea44 13b             | local41
5ea44 13b             | 	res	1
5ea44 13c             | local42
5ea44 13c             | 	res	1
5ea44 13d             | local43
5ea44 13d             | 	res	1
5ea44 13e             | local44
5ea44 13e             | 	res	1
5ea44 13f             | local45
5ea44 13f             | 	res	1
5ea44 140             | local46
5ea44 140             | 	res	1
5ea44 141             | local47
5ea44 141             | 	res	1
5ea44 142             | local48
5ea44 142             | 	res	1
5ea44 143             | local49
5ea44 143             | 	res	1
5ea44 144             | muldiva_
5ea44 144             | 	res	1
5ea44 145             | muldivb_
5ea44 145             | 	res	1
5ea44 146             | 	fit	480
5ea44 146             | 
