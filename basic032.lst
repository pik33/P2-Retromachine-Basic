00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 14 FA A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec CC E2 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed E4 DF 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 D4 59 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 C4 D2 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 1C CE 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 28 3B 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 04 DA 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 90 6C 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 40 94 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa F8 91 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb D0 A3 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 04 FE 05 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     C4 0A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     58 1F B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     F0 E5 05 F1 | 	add	objptr, ##41968
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     F0 E5 85 F1 | 	sub	objptr, ##41968
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     50 22 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     A4 29 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     9C 23 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     60 21 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     9C EF B1 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     F0 E5 05 F1 | 	add	objptr, ##41968
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     F0 E5 85 F1 | 	sub	objptr, ##41968
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     94 ED B1 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     34 ED B1 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F8 E5 05 F1 | 	add	objptr, ##41976
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     BA E5 85 F1 | 	sub	objptr, ##41914
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     BC E5 05 F1 | 	add	objptr, ##41916
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     BA E5 85 F1 | 	sub	objptr, ##41914
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     C4 EC B1 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     0C 05 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F8 E5 05 F1 | 	add	objptr, ##41976
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F8 E5 85 F1 | 	sub	objptr, ##41976
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     28 08 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     8C 1E B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     E0 25 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     DC 1F B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     95 01 00 FF 
00ccc     32 51 06 F6 | 	mov	local22, ##@LR__5187
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     58 EB B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     BC 44 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     CC 22 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     78 0C B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     A8 0E B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     18 1D B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     6C 24 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     68 1E B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     F4 E9 B1 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     E8 03 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     DC 03 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     6C 03 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     38 03 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     58 03 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     48 03 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     98 E8 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     44 E8 B1 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     14 E8 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F8 E5 05 F1 | 	add	objptr, ##41976
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     BA E5 85 F1 | 	sub	objptr, ##41914
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     BC E5 05 F1 | 	add	objptr, ##41916
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     BA E5 85 F1 | 	sub	objptr, ##41914
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     AC E7 B1 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     F4 FF B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F8 E5 05 F1 | 	add	objptr, ##41976
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F8 E5 85 F1 | 	sub	objptr, ##41976
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     D0 00 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     94 E6 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     40 E6 B1 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     10 E6 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F8 E5 05 F1 | 	add	objptr, ##41976
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     BA E5 85 F1 | 	sub	objptr, ##41914
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     BC E5 05 F1 | 	add	objptr, ##41916
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     BA E5 85 F1 | 	sub	objptr, ##41914
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     A8 E5 B1 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     F0 FD B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F8 E5 05 F1 | 	add	objptr, ##41976
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F8 E5 85 F1 | 	sub	objptr, ##41976
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     95 01 00 FF 
01328     33 51 06 F6 | 	mov	local22, ##@LR__5188
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     18 FF B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     B8 FE B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     0C FE B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     B0 FD B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     FC EB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     EC EB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     20 1D B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     F8 1C B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     D0 1C B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     28 12 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     78 12 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     68 12 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     CC 11 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     30 3D B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     68 3C B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     95 01 00 FF 
01800     34 17 06 F6 | 	mov	arg03, ##@LR__5189
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     58 3C B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     90 3B B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     95 01 00 FF 
01860     35 2D 06 F6 | 	mov	local04, ##@LR__5190
01864     1A 00 00 FF 
01868     E0 E5 05 F1 | 	add	objptr, ##13792
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     E0 E5 85 F1 | 	sub	objptr, ##13792
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     52 00 00 FF 
018a0     00 E4 05 F1 | 	add	objptr, ##41984
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     52 00 00 FF 
018ac     00 E4 85 F1 | 	sub	objptr, ##41984
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     10 38 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     95 01 00 FF 
01920     36 15 06 F6 | 	mov	arg02, ##@LR__5191
01924     94 16 B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     D0 37 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     95 01 00 FF 
01960     38 15 06 F6 | 	mov	arg02, ##@LR__5192
01964     54 16 B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     60 37 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     95 01 00 FF 
019d0     3A 39 06 F6 | 	mov	local10, ##@LR__5193
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     E0 15 B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     52 00 00 FF 
01a1c     00 E4 05 F1 | 	add	objptr, ##41984
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     52 00 00 FF 
01a28     00 E4 85 F1 | 	sub	objptr, ##41984
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     52 00 00 FF 
01a40     00 E4 05 F1 | 	add	objptr, ##41984
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     52 00 00 FF 
01a4c     00 E4 85 F1 | 	sub	objptr, ##41984
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     FC 35 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     FC 39 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     34 39 B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     04 E4 05 F1 | 	add	objptr, ##41988
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E8 E5 85 F1 | 	sub	objptr, ##13800
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     38 35 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     C0 39 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     F8 38 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     95 01 00 FF 
01b04     3C 2D 06 F6 | 	mov	local04, ##@LR__5194
01b08     52 00 00 FF 
01b0c     04 E4 05 F1 | 	add	objptr, ##41988
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     04 E4 85 F1 | 	sub	objptr, ##41988
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     04 E4 05 F1 | 	add	objptr, ##41988
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     04 E4 85 F1 | 	sub	objptr, ##41988
01b50     95 01 00 FF 
01b54     3D 31 06 F6 | 	mov	local06, ##@LR__5195
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     5C 14 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     04 E4 05 F1 | 	add	objptr, ##41988
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     04 E4 85 F1 | 	sub	objptr, ##41988
01bb0     95 01 00 FF 
01bb4     3E 15 06 F6 | 	mov	arg02, ##@LR__5196
01bb8     00 14 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     04 E4 05 F1 | 	add	objptr, ##41988
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     04 E4 85 F1 | 	sub	objptr, ##41988
01c08     95 01 00 FF 
01c0c     3F 15 06 F6 | 	mov	arg02, ##@LR__5197
01c10     A8 13 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     04 E4 05 F1 | 	add	objptr, ##41988
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     04 E4 85 F1 | 	sub	objptr, ##41988
01c60     95 01 00 FF 
01c64     40 15 06 F6 | 	mov	arg02, ##@LR__5198
01c68     50 13 B2 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     6C 34 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     52 00 00 FF 
01cf0     00 E4 05 F1 | 	add	objptr, ##41984
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     52 00 00 FF 
01cfc     00 E4 85 F1 | 	sub	objptr, ##41984
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     0C E4 05 F1 | 	add	objptr, ##41996
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     0C E4 85 F1 | 	sub	objptr, ##41996
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     F0 E5 05 F1 | 	add	objptr, ##13808
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     0C E4 85 F1 | 	sub	objptr, ##41996
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     6C 33 B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     95 01 00 FF 
01dc4     41 15 06 F6 | 	mov	arg02, ##@LR__5199
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     EC 11 B2 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     F0 E5 05 F1 | 	add	objptr, ##13808
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     0C E4 85 F1 | 	sub	objptr, ##41996
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     E8 32 B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     95 01 00 FF 
01e48     42 15 06 F6 | 	mov	arg02, ##@LR__5200
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     68 11 B2 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     04 4B B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     95 01 00 FF 
01f5c     43 2D 06 F6 | 	mov	local04, ##@LR__5201
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     95 01 00 FF 
01f90     45 15 06 F6 | 	mov	arg02, ##@LR__5202
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     1C 10 B2 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     F0 0F B2 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     95 01 00 FF 
02098     47 15 06 F6 | 	mov	arg02, ##@LR__5203
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     18 0F B2 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     95 01 00 FF 
020b4     49 15 06 F6 | 	mov	arg02, ##@LR__5204
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     FC 0E B2 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     94 2F B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     95 01 00 FF 
0210c     4B 15 06 F6 | 	mov	arg02, ##@LR__5205
02110     A8 0E B2 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     C4 2E B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     95 01 00 FF 
02154     4D 15 06 F6 | 	mov	arg02, ##@LR__5206
02158     60 0E B2 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     AC 2E B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     F4 0D B2 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     95 01 00 FF 
022d8     4F 15 06 F6 | 	mov	arg02, ##@LR__5207
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     D0 0C B2 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     95 01 00 FF 
022f8     51 15 06 F6 | 	mov	arg02, ##@LR__5208
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     B8 0C B2 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     95 01 00 FF 
02310     53 31 06 F6 | 	mov	local06, ##@LR__5209
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     9C 0C B2 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     95 01 00 FF 
0232c     55 3D 06 F6 | 	mov	local12, ##@LR__5210
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     80 0C B2 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     95 01 00 FF 
02348     57 3B 06 F6 | 	mov	local11, ##@LR__5211
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     60 0C B2 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     95 01 00 FF 
02368     59 3B 06 F6 | 	mov	local11, ##@LR__5212
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     44 0C B2 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     95 01 00 FF 
02384     5B 41 06 F6 | 	mov	local14, ##@LR__5213
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     28 0C B2 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     95 01 00 FF 
023a0     5D 5D 06 F6 | 	mov	local28, ##@LR__5214
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     08 0C B2 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     95 01 00 FF 
023c0     5F 5D 06 F6 | 	mov	local28, ##@LR__5215
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     EC 0B B2 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     95 01 00 FF 
023dc     61 53 06 F6 | 	mov	local23, ##@LR__5216
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     CC 0B B2 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     95 01 00 FF 
023fc     63 53 06 F6 | 	mov	local23, ##@LR__5217
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     B0 0B B2 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     95 01 00 FF 
02418     65 5F 06 F6 | 	mov	local29, ##@LR__5218
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     90 0B B2 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     95 01 00 FF 
02438     67 61 06 F6 | 	mov	local30, ##@LR__5219
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     70 0B B2 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     95 01 00 FF 
02458     69 63 06 F6 | 	mov	local31, ##@LR__5220
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     50 0B B2 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     50 0B B2 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     00 2F B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     38 2E B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     0C 29 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     95 01 00 FF 
0270c     6B 15 06 F6 | 	mov	arg02, ##@LR__5221
02710     A8 08 B2 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     50 29 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     95 01 00 FF 
02750     6D 15 06 F6 | 	mov	arg02, ##@LR__5222
02754     64 08 B2 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     88 2B B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     D4 41 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     95 01 00 FF 
02828     6F 15 06 F6 | 	mov	arg02, ##@LR__5223
0282c     8C 07 B2 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     95 01 00 FF 
02858     74 15 06 F6 | 	mov	arg02, ##@LR__5224
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     54 07 B2 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     95 01 00 FF 
028a8     79 17 06 F6 | 	mov	arg03, ##@LR__5225
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     9C 2C B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     B0 26 B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     E4 25 B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     B8 25 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     95 01 00 FF 
02a60     7B 15 06 F6 | 	mov	arg02, ##@LR__5226
02a64     54 05 B2 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     F4 24 B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     95 01 00 FF 
02bc0     7D 31 06 F6 | 	mov	local06, ##@LR__5227
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     95 01 00 FF 
02bec     7F 15 06 F6 | 	mov	arg02, ##@LR__5228
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     BC 03 B2 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     95 01 00 FF 
02c0c     85 15 06 F6 | 	mov	arg02, ##@LR__5229
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     A4 03 B2 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     95 01 00 FF 
02c24     8C 15 06 F6 | 	mov	arg02, ##@LR__5230
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     8C 03 B2 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     95 01 00 FF 
02c58     92 15 06 F6 | 	mov	arg02, ##@LR__5231
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     54 03 B2 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     95 01 00 FF 
02c8c     95 31 06 F6 | 	mov	local06, ##@LR__5232
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     95 01 00 FF 
02cc8     97 15 06 F6 | 	mov	arg02, ##@LR__5233
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     E4 02 B2 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     95 01 00 FF 
02cfc     9B 31 06 F6 | 	mov	local06, ##@LR__5234
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     95 01 00 FF 
02d1c     9D 15 06 F6 | 	mov	arg02, ##@LR__5235
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     94 02 B2 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     95 01 00 FF 
02d34     A2 15 06 F6 | 	mov	arg02, ##@LR__5236
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     7C 02 B2 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     95 01 00 FF 
02d68     A5 15 06 F6 | 	mov	arg02, ##@LR__5237
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     44 02 B2 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     95 01 00 FF 
02d9c     AB 31 06 F6 | 	mov	local06, ##@LR__5238
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     95 01 00 FF 
02dcc     AD 15 06 F6 | 	mov	arg02, ##@LR__5239
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     E0 01 B2 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     95 01 00 FF 
02e00     B6 31 06 F6 | 	mov	local06, ##@LR__5240
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     95 01 00 FF 
02e30     B8 15 06 F6 | 	mov	arg02, ##@LR__5241
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     7C 01 B2 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     95 01 00 FF 
02e64     C1 31 06 F6 | 	mov	local06, ##@LR__5242
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     95 01 00 FF 
02e94     C3 15 06 F6 | 	mov	arg02, ##@LR__5243
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     18 01 B2 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     95 01 00 FF 
02ec8     CC 31 06 F6 | 	mov	local06, ##@LR__5244
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     95 01 00 FF 
02ef8     CE 15 06 F6 | 	mov	arg02, ##@LR__5245
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     B4 00 B2 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     95 01 00 FF 
02f2c     D1 31 06 F6 | 	mov	local06, ##@LR__5246
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     96 01 00 FF 
03064     C4 14 06 F6 | 	mov	arg02, ##@LR__5331
03068     50 FF B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     98 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     D0 38 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     B4 1F B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     68 1D B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     E8 25 B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     DC 1D B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     C0 2E B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     84 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     00 35 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     C0 34 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     A8 1A B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     24 2A B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     95 01 00 FF 
0371c     D3 31 06 F6 | 	mov	local06, ##@LR__5247
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     95 01 00 FF 
0373c     D4 15 06 F6 | 	mov	arg02, ##@LR__5248
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     74 F8 B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     95 01 00 FF 
03754     D9 15 06 F6 | 	mov	arg02, ##@LR__5249
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     5C F8 B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     95 01 00 FF 
0376c     DE 31 06 F6 | 	mov	local06, ##@LR__5250
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     40 F8 B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     95 01 00 FF 
03788     E3 3D 06 F6 | 	mov	local12, ##@LR__5251
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     20 F8 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     95 01 00 FF 
037a8     E7 3B 06 F6 | 	mov	local11, ##@LR__5252
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     00 F8 B1 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     95 01 00 FF 
037c8     EB 41 06 F6 | 	mov	local14, ##@LR__5253
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     E0 F7 B1 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     95 01 00 FF 
037e8     EE 3F 06 F6 | 	mov	local13, ##@LR__5254
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     C0 F7 B1 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     95 01 00 FF 
03808     F2 3F 06 F6 | 	mov	local13, ##@LR__5255
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     A4 F7 B1 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     95 01 00 FF 
03824     F8 51 06 F6 | 	mov	local22, ##@LR__5256
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     84 F7 B1 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     95 01 00 FF 
038c0     FB 15 06 F6 | 	mov	arg02, ##@LR__5257
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     F0 F6 B1 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     96 01 00 FF 
038d8     02 2E 06 F6 | 	mov	local05, ##@LR__5258
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     D4 F6 B1 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     96 01 00 FF 
03970     08 14 06 F6 | 	mov	arg02, ##@LR__5259
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     40 F6 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     96 01 00 FF 
039c0     0B 14 06 F6 | 	mov	arg02, ##@LR__5260
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     F0 F5 B1 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     96 01 00 FF 
039f8     0F 2E 06 F6 | 	mov	local05, ##@LR__5261
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     B0 F5 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     96 01 00 FF 
03a4c     11 30 06 F6 | 	mov	local06, ##@LR__5262
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     96 01 00 FF 
03a7c     14 38 06 F6 | 	mov	local10, ##@LR__5263
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     30 F5 B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     96 01 00 FF 
03ab8     17 2E 06 F6 | 	mov	local05, ##@LR__5264
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     EC F4 B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     68 F4 B1 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     28 2E B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     B0 28 B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     44 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     F0 42 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     20 B9 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     04 E4 05 F1 | 	add	objptr, ##41988
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     04 E4 85 F1 | 	sub	objptr, ##41988
03cfc     96 01 00 FF 
03d00     19 14 06 F6 | 	mov	arg02, ##@LR__5265
03d04     B4 F2 B1 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     04 E4 05 F1 | 	add	objptr, ##41988
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E8 E5 85 F1 | 	sub	objptr, ##13800
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     FC 41 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     2C B8 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     04 E4 05 F1 | 	add	objptr, ##41988
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     04 E4 85 F1 | 	sub	objptr, ##41988
03df0     96 01 00 FF 
03df4     1A 14 06 F6 | 	mov	arg02, ##@LR__5266
03df8     C0 F1 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     04 E4 05 F1 | 	add	objptr, ##41988
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E8 E5 85 F1 | 	sub	objptr, ##13800
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     D8 41 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     40 B7 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     04 E4 05 F1 | 	add	objptr, ##41988
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     04 E4 85 F1 | 	sub	objptr, ##41988
03edc     96 01 00 FF 
03ee0     1B 14 06 F6 | 	mov	arg02, ##@LR__5267
03ee4     D4 F0 B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     04 E4 05 F1 | 	add	objptr, ##41988
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E8 E5 85 F1 | 	sub	objptr, ##13800
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     E8 40 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     50 B6 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     04 E4 05 F1 | 	add	objptr, ##41988
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     04 E4 85 F1 | 	sub	objptr, ##41988
03fcc     96 01 00 FF 
03fd0     1C 14 06 F6 | 	mov	arg02, ##@LR__5268
03fd4     E4 EF B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     04 E4 05 F1 | 	add	objptr, ##41988
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E8 E5 85 F1 | 	sub	objptr, ##13800
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     B0 87 B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     96 01 00 FF 
04048     1D 12 06 F6 | 	mov	arg01, ##@LR__5269
0404c                 | ' 
0404c                 | ' write(text)
0404c     C8 D6 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     C4 DB B1 FD | 	call	#_hg010b_spin2_crlf
04054     96 01 00 FF 
04058     1E 12 06 F6 | 	mov	arg01, ##@LR__5270
0405c                 | ' 
0405c                 | ' write(text)
0405c     B8 D6 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     B4 DB B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     2C 4C B2 FD | 	call	#__system___getiolock_0558
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     FC EE B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     D0 FB B1 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     68 FB B1 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     EC 4B B2 FD | 	call	#__system___getiolock_0558
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     96 01 00 FF 
040f0     24 14 06 F6 | 	mov	arg02, ##@LR__5271
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     C0 EE B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     96 01 00 FF 
04108     26 14 06 F6 | 	mov	arg02, ##@LR__5272
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     A8 EE B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     96 01 00 FF 
04120     28 14 06 F6 | 	mov	arg02, ##@LR__5273
04124     13 13 02 F6 | 	mov	arg01, local01
04128     90 EE B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     96 01 00 FF 
04138     2B 14 06 F6 | 	mov	arg02, ##@LR__5274
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     78 EE B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     96 01 00 FF 
04150     2F 14 06 F6 | 	mov	arg02, ##@LR__5275
04154     13 13 02 F6 | 	mov	arg01, local01
04158     60 EE B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     96 01 00 FF 
04168     31 14 06 F6 | 	mov	arg02, ##@LR__5276
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     48 EE B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     96 01 00 FF 
04180     33 14 06 F6 | 	mov	arg02, ##@LR__5277
04184     13 13 02 F6 | 	mov	arg01, local01
04188     30 EE B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     96 01 00 FF 
04198     37 14 06 F6 | 	mov	arg02, ##@LR__5278
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     18 EE B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     96 01 00 FF 
041b0     3B 14 06 F6 | 	mov	arg02, ##@LR__5279
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     00 EE B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     96 01 00 FF 
041c8     3F 14 06 F6 | 	mov	arg02, ##@LR__5280
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     E8 ED B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     96 01 00 FF 
041e0     43 14 06 F6 | 	mov	arg02, ##@LR__5281
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     D0 ED B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     96 01 00 FF 
041f8     47 14 06 F6 | 	mov	arg02, ##@LR__5282
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     B8 ED B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     96 01 00 FF 
04210     49 14 06 F6 | 	mov	arg02, ##@LR__5283
04214     13 13 02 F6 | 	mov	arg01, local01
04218     A0 ED B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     96 01 00 FF 
04228     4D 14 06 F6 | 	mov	arg02, ##@LR__5284
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     88 ED B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     96 01 00 FF 
04240     4F 14 06 F6 | 	mov	arg02, ##@LR__5285
04244     13 13 02 F6 | 	mov	arg01, local01
04248     70 ED B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     96 01 00 FF 
04258     51 14 06 F6 | 	mov	arg02, ##@LR__5286
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     58 ED B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     96 01 00 FF 
04270     54 14 06 F6 | 	mov	arg02, ##@LR__5287
04274     13 13 02 F6 | 	mov	arg01, local01
04278     40 ED B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     96 01 00 FF 
04288     57 14 06 F6 | 	mov	arg02, ##@LR__5288
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     28 ED B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     96 01 00 FF 
042a0     59 14 06 F6 | 	mov	arg02, ##@LR__5289
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     10 ED B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     96 01 00 FF 
042b8     5B 14 06 F6 | 	mov	arg02, ##@LR__5290
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     F8 EC B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     96 01 00 FF 
042d0     5E 14 06 F6 | 	mov	arg02, ##@LR__5291
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     E0 EC B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     96 01 00 FF 
042e8     61 14 06 F6 | 	mov	arg02, ##@LR__5292
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     C8 EC B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     3C 0C B2 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     96 01 00 FF 
043dc     64 14 06 F6 | 	mov	arg02, ##@LR__5293
043e0     D8 EB B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     70 0C B2 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     96 01 00 FF 
04430     66 14 06 F6 | 	mov	arg02, ##@LR__5294
04434     84 EB B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     4C 0C B2 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     96 01 00 FF 
04454     68 14 06 F6 | 	mov	arg02, ##@LR__5295
04458     60 EB B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     20 0C B2 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     98 21 B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     AC 15 B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     38 1E B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     96 01 00 FF 
044b8     6A 14 06 F6 | 	mov	arg02, ##@LR__5296
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     F8 EA B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     96 01 00 FF 
044d0     70 14 06 F6 | 	mov	arg02, ##@LR__5297
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     E0 EA B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     96 01 00 FF 
044e8     77 14 06 F6 | 	mov	arg02, ##@LR__5298
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     C8 EA B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     D4 0A B2 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     96 01 00 FF 
04544     7F 14 06 F6 | 	mov	arg02, ##@LR__5299
04548     70 EA B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     C0 0B B2 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     96 01 00 FF 
04570     81 14 06 F6 | 	mov	arg02, ##@LR__5300
04574     44 EA B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     98 0B B2 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     80 0B B2 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     4C 0B B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     96 01 00 FF 
045e4     83 14 06 F6 | 	mov	arg02, ##@LR__5301
045e8     D0 E9 B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     98 0A B2 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     10 20 B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     C0 1C B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     70 0A B2 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     E8 1F B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     CC 17 B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     88 1C B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     34 0A B2 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     96 01 00 FF 
0466c     85 14 06 F6 | 	mov	arg02, ##@LR__5302
04670     48 E9 B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     96 01 00 FF 
04684     87 14 06 F6 | 	mov	arg02, ##@LR__5303
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     2C E9 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     96 01 00 FF 
0469c     89 14 06 F6 | 	mov	arg02, ##@LR__5304
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     14 E9 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     96 01 00 FF 
046b4     8C 14 06 F6 | 	mov	arg02, ##@LR__5305
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     FC E8 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     96 01 00 FF 
046cc     8E 14 06 F6 | 	mov	arg02, ##@LR__5306
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     E4 E8 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     96 01 00 FF 
046e4     91 14 06 F6 | 	mov	arg02, ##@LR__5307
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     CC E8 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     96 01 00 FF 
046fc     93 14 06 F6 | 	mov	arg02, ##@LR__5308
04700     17 13 02 F6 | 	mov	arg01, local05
04704     B4 E8 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     96 01 00 FF 
04714     95 14 06 F6 | 	mov	arg02, ##@LR__5309
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     9C E8 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     96 01 00 FF 
0472c     98 14 06 F6 | 	mov	arg02, ##@LR__5310
04730     17 13 02 F6 | 	mov	arg01, local05
04734     84 E8 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     96 01 00 FF 
04744     9A 14 06 F6 | 	mov	arg02, ##@LR__5311
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     6C E8 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     96 01 00 FF 
0475c     9D 14 06 F6 | 	mov	arg02, ##@LR__5312
04760     17 13 02 F6 | 	mov	arg01, local05
04764     54 E8 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     96 01 00 FF 
04774     9F 14 06 F6 | 	mov	arg02, ##@LR__5313
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     3C E8 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     96 01 00 FF 
0478c     A2 14 06 F6 | 	mov	arg02, ##@LR__5314
04790     17 13 02 F6 | 	mov	arg01, local05
04794     24 E8 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     96 01 00 FF 
047a4     A4 14 06 F6 | 	mov	arg02, ##@LR__5315
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     0C E8 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     96 01 00 FF 
048a4     A6 14 06 F6 | 	mov	arg02, ##@LR__5316
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     0C E7 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     96 01 00 FF 
048bc     A8 14 06 F6 | 	mov	arg02, ##@LR__5317
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     F4 E6 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     96 01 00 FF 
048d4     AA 14 06 F6 | 	mov	arg02, ##@LR__5318
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     DC E6 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     96 01 00 FF 
048ec     AC 14 06 F6 | 	mov	arg02, ##@LR__5319
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     C4 E6 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     96 01 00 FF 
04904     AE 14 06 F6 | 	mov	arg02, ##@LR__5320
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     AC E6 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     96 01 00 FF 
0491c     B0 14 06 F6 | 	mov	arg02, ##@LR__5321
04920     13 13 02 F6 | 	mov	arg01, local01
04924     94 E6 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     96 01 00 FF 
04934     B2 14 06 F6 | 	mov	arg02, ##@LR__5322
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     7C E6 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     96 01 00 FF 
0494c     B4 14 06 F6 | 	mov	arg02, ##@LR__5323
04950     13 13 02 F6 | 	mov	arg01, local01
04954     64 E6 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     96 01 00 FF 
04964     B6 14 06 F6 | 	mov	arg02, ##@LR__5324
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     4C E6 B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     96 01 00 FF 
0497c     B8 14 06 F6 | 	mov	arg02, ##@LR__5325
04980     13 13 02 F6 | 	mov	arg01, local01
04984     34 E6 B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     96 01 00 FF 
04994     BA 14 06 F6 | 	mov	arg02, ##@LR__5326
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     1C E6 B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     96 01 00 FF 
049ac     BC 14 06 F6 | 	mov	arg02, ##@LR__5327
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     04 E6 B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     96 01 00 FF 
049c4     BE 14 06 F6 | 	mov	arg02, ##@LR__5328
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     EC E5 B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     96 01 00 FF 
049dc     C0 14 06 F6 | 	mov	arg02, ##@LR__5329
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     D4 E5 B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     96 01 00 FF 
049f4     C2 14 06 F6 | 	mov	arg02, ##@LR__5330
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     BC E5 B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     96 01 00 FF 
04aa4     C6 14 06 F6 | 	mov	arg02, ##@LR__5332
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     0C E5 B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     1C 0C 90 AD |  if_e	jmp	#LR__0310
04ab8     96 01 00 FF 
04abc     CB 14 06 F6 | 	mov	arg02, ##@LR__5333
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     F4 E4 B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     0C 0C 90 AD |  if_e	jmp	#LR__0311
04ad0     96 01 00 FF 
04ad4     CE 14 06 F6 | 	mov	arg02, ##@LR__5334
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     DC E4 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     FC 0B 90 AD |  if_e	jmp	#LR__0312
04ae8     96 01 00 FF 
04aec     D3 14 06 F6 | 	mov	arg02, ##@LR__5335
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     C4 E4 B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     EC 0B 90 AD |  if_e	jmp	#LR__0313
04b00     96 01 00 FF 
04b04     D7 14 06 F6 | 	mov	arg02, ##@LR__5336
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     AC E4 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     DC 0B 90 AD |  if_e	jmp	#LR__0314
04b18     96 01 00 FF 
04b1c     DC 14 06 F6 | 	mov	arg02, ##@LR__5337
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     94 E4 B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     CC 0B 90 AD |  if_e	jmp	#LR__0315
04b30     96 01 00 FF 
04b34     E0 14 06 F6 | 	mov	arg02, ##@LR__5338
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     7C E4 B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     BC 0B 90 AD |  if_e	jmp	#LR__0316
04b48     96 01 00 FF 
04b4c     E3 14 06 F6 | 	mov	arg02, ##@LR__5339
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     64 E4 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     AC 0B 90 AD |  if_e	jmp	#LR__0317
04b60     96 01 00 FF 
04b64     EE 14 06 F6 | 	mov	arg02, ##@LR__5340
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     4C E4 B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     9C 0B 90 AD |  if_e	jmp	#LR__0318
04b78     96 01 00 FF 
04b7c     F2 14 06 F6 | 	mov	arg02, ##@LR__5341
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     34 E4 B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     8C 0B 90 AD |  if_e	jmp	#LR__0319
04b90     96 01 00 FF 
04b94     FC 14 06 F6 | 	mov	arg02, ##@LR__5342
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     1C E4 B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     7C 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     96 01 00 FF 
04bac     00 15 06 F6 | 	mov	arg02, ##@LR__5343
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     04 E4 B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     6C 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     96 01 00 FF 
04bc4     0A 15 06 F6 | 	mov	arg02, ##@LR__5344
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     EC E3 B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     5C 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     96 01 00 FF 
04bdc     0E 15 06 F6 | 	mov	arg02, ##@LR__5345
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     D4 E3 B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     4C 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     96 01 00 FF 
04bf4     19 15 06 F6 | 	mov	arg02, ##@LR__5346
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     BC E3 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     3C 0B 90 AD |  if_e	jmp	#LR__0324
04c08     96 01 00 FF 
04c0c     1D 15 06 F6 | 	mov	arg02, ##@LR__5347
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     A4 E3 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     2C 0B 90 AD |  if_e	jmp	#LR__0325
04c20     96 01 00 FF 
04c24     24 15 06 F6 | 	mov	arg02, ##@LR__5348
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     8C E3 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     1C 0B 90 AD |  if_e	jmp	#LR__0326
04c38     96 01 00 FF 
04c3c     28 15 06 F6 | 	mov	arg02, ##@LR__5349
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     74 E3 B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     0C 0B 90 AD |  if_e	jmp	#LR__0327
04c50     96 01 00 FF 
04c54     2E 15 06 F6 | 	mov	arg02, ##@LR__5350
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     5C E3 B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     FC 0A 90 AD |  if_e	jmp	#LR__0328
04c68     96 01 00 FF 
04c6c     34 15 06 F6 | 	mov	arg02, ##@LR__5351
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     44 E3 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     EC 0A 90 AD |  if_e	jmp	#LR__0329
04c80     96 01 00 FF 
04c84     38 15 06 F6 | 	mov	arg02, ##@LR__5352
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     2C E3 B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     DC 0A 90 AD |  if_e	jmp	#LR__0330
04c98     96 01 00 FF 
04c9c     3E 15 06 F6 | 	mov	arg02, ##@LR__5353
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     14 E3 B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     CC 0A 90 AD |  if_e	jmp	#LR__0331
04cb0     96 01 00 FF 
04cb4     41 15 06 F6 | 	mov	arg02, ##@LR__5354
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     FC E2 B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     BC 0A 90 AD |  if_e	jmp	#LR__0332
04cc8     96 01 00 FF 
04ccc     47 15 06 F6 | 	mov	arg02, ##@LR__5355
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     E4 E2 B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     AC 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     96 01 00 FF 
04ce4     4B 15 06 F6 | 	mov	arg02, ##@LR__5356
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     CC E2 B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     9C 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     96 01 00 FF 
04cfc     52 15 06 F6 | 	mov	arg02, ##@LR__5357
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     B4 E2 B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     8C 0A 90 AD |  if_e	jmp	#LR__0335
04d10     96 01 00 FF 
04d14     59 15 06 F6 | 	mov	arg02, ##@LR__5358
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     9C E2 B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     7C 0A 90 AD |  if_e	jmp	#LR__0336
04d28     96 01 00 FF 
04d2c     60 15 06 F6 | 	mov	arg02, ##@LR__5359
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     84 E2 B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     6C 0A 90 AD |  if_e	jmp	#LR__0337
04d40     96 01 00 FF 
04d44     6A 15 06 F6 | 	mov	arg02, ##@LR__5360
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     6C E2 B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     5C 0A 90 AD |  if_e	jmp	#LR__0338
04d58     96 01 00 FF 
04d5c     6E 15 06 F6 | 	mov	arg02, ##@LR__5361
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     54 E2 B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     4C 0A 90 AD |  if_e	jmp	#LR__0339
04d70     96 01 00 FF 
04d74     72 15 06 F6 | 	mov	arg02, ##@LR__5362
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     3C E2 B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     3C 0A 90 AD |  if_e	jmp	#LR__0340
04d88     96 01 00 FF 
04d8c     79 15 06 F6 | 	mov	arg02, ##@LR__5363
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     24 E2 B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     2C 0A 90 AD |  if_e	jmp	#LR__0341
04da0     96 01 00 FF 
04da4     7D 15 06 F6 | 	mov	arg02, ##@LR__5364
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     0C E2 B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     1C 0A 90 AD |  if_e	jmp	#LR__0342
04db8     96 01 00 FF 
04dbc     81 15 06 F6 | 	mov	arg02, ##@LR__5365
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     F4 E1 B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     0C 0A 90 AD |  if_e	jmp	#LR__0343
04dd0     96 01 00 FF 
04dd4     87 15 06 F6 | 	mov	arg02, ##@LR__5366
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     DC E1 B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     FC 09 90 AD |  if_e	jmp	#LR__0344
04de8     96 01 00 FF 
04dec     8C 15 06 F6 | 	mov	arg02, ##@LR__5367
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     C4 E1 B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     EC 09 90 AD |  if_e	jmp	#LR__0345
04e00     96 01 00 FF 
04e04     93 15 06 F6 | 	mov	arg02, ##@LR__5368
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     AC E1 B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     DC 09 90 AD |  if_e	jmp	#LR__0346
04e18     96 01 00 FF 
04e1c     97 15 06 F6 | 	mov	arg02, ##@LR__5369
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     94 E1 B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     CC 09 90 AD |  if_e	jmp	#LR__0347
04e30     96 01 00 FF 
04e34     9C 15 06 F6 | 	mov	arg02, ##@LR__5370
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     7C E1 B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     BC 09 90 AD |  if_e	jmp	#LR__0348
04e48     96 01 00 FF 
04e4c     A0 15 06 F6 | 	mov	arg02, ##@LR__5371
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     64 E1 B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     AC 09 90 AD |  if_e	jmp	#LR__0349
04e60     96 01 00 FF 
04e64     A6 15 06 F6 | 	mov	arg02, ##@LR__5372
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     4C E1 B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     9C 09 90 AD |  if_e	jmp	#LR__0350
04e78     96 01 00 FF 
04e7c     A9 15 06 F6 | 	mov	arg02, ##@LR__5373
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     34 E1 B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     8C 09 90 AD |  if_e	jmp	#LR__0351
04e90     96 01 00 FF 
04e94     B1 15 06 F6 | 	mov	arg02, ##@LR__5374
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     1C E1 B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     7C 09 90 AD |  if_e	jmp	#LR__0352
04ea8     96 01 00 FF 
04eac     B5 15 06 F6 | 	mov	arg02, ##@LR__5375
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     04 E1 B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     6C 09 90 AD |  if_e	jmp	#LR__0353
04ec0     96 01 00 FF 
04ec4     BA 15 06 F6 | 	mov	arg02, ##@LR__5376
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     EC E0 B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     5C 09 90 AD |  if_e	jmp	#LR__0354
04ed8     96 01 00 FF 
04edc     BE 15 06 F6 | 	mov	arg02, ##@LR__5377
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     D4 E0 B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     4C 09 90 AD |  if_e	jmp	#LR__0355
04ef0     96 01 00 FF 
04ef4     C3 15 06 F6 | 	mov	arg02, ##@LR__5378
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     BC E0 B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     3C 09 90 AD |  if_e	jmp	#LR__0356
04f08     96 01 00 FF 
04f0c     C7 15 06 F6 | 	mov	arg02, ##@LR__5379
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     A4 E0 B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     2C 09 90 AD |  if_e	jmp	#LR__0357
04f20     96 01 00 FF 
04f24     CA 15 06 F6 | 	mov	arg02, ##@LR__5380
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     8C E0 B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     1C 09 90 AD |  if_e	jmp	#LR__0358
04f38     96 01 00 FF 
04f3c     D0 15 06 F6 | 	mov	arg02, ##@LR__5381
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     74 E0 B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     0C 09 90 AD |  if_e	jmp	#LR__0359
04f50     96 01 00 FF 
04f54     D4 15 06 F6 | 	mov	arg02, ##@LR__5382
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     5C E0 B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     FC 08 90 AD |  if_e	jmp	#LR__0360
04f68     96 01 00 FF 
04f6c     D8 15 06 F6 | 	mov	arg02, ##@LR__5383
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     44 E0 B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     EC 08 90 AD |  if_e	jmp	#LR__0361
04f80     96 01 00 FF 
04f84     DE 15 06 F6 | 	mov	arg02, ##@LR__5384
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     2C E0 B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     DC 08 90 AD |  if_e	jmp	#LR__0362
04f98     96 01 00 FF 
04f9c     E3 15 06 F6 | 	mov	arg02, ##@LR__5385
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     14 E0 B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     CC 08 90 AD |  if_e	jmp	#LR__0363
04fb0     96 01 00 FF 
04fb4     E6 15 06 F6 | 	mov	arg02, ##@LR__5386
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     FC DF B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     BC 08 90 AD |  if_e	jmp	#LR__0364
04fc8     96 01 00 FF 
04fcc     E9 15 06 F6 | 	mov	arg02, ##@LR__5387
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     E4 DF B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     AC 08 90 AD |  if_e	jmp	#LR__0365
04fe0     96 01 00 FF 
04fe4     ED 15 06 F6 | 	mov	arg02, ##@LR__5388
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     CC DF B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     9C 08 90 AD |  if_e	jmp	#LR__0366
04ff8     96 01 00 FF 
04ffc     F0 15 06 F6 | 	mov	arg02, ##@LR__5389
05000     13 13 02 F6 | 	mov	arg01, local01
05004     B4 DF B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     8C 08 90 AD |  if_e	jmp	#LR__0367
05010     96 01 00 FF 
05014     F6 15 06 F6 | 	mov	arg02, ##@LR__5390
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     9C DF B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     7C 08 90 AD |  if_e	jmp	#LR__0368
05028     96 01 00 FF 
0502c     FB 15 06 F6 | 	mov	arg02, ##@LR__5391
05030     13 13 02 F6 | 	mov	arg01, local01
05034     84 DF B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     6C 08 90 AD |  if_e	jmp	#LR__0369
05040     96 01 00 FF 
05044     FE 15 06 F6 | 	mov	arg02, ##@LR__5392
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     6C DF B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     5C 08 90 AD |  if_e	jmp	#LR__0370
05058     97 01 00 FF 
0505c     03 14 06 F6 | 	mov	arg02, ##@LR__5393
05060     13 13 02 F6 | 	mov	arg01, local01
05064     54 DF B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     4C 08 90 AD |  if_e	jmp	#LR__0371
05070     97 01 00 FF 
05074     07 14 06 F6 | 	mov	arg02, ##@LR__5394
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     3C DF B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     3C 08 90 AD |  if_e	jmp	#LR__0372
05088     97 01 00 FF 
0508c     0D 14 06 F6 | 	mov	arg02, ##@LR__5395
05090     13 13 02 F6 | 	mov	arg01, local01
05094     24 DF B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     2C 08 90 AD |  if_e	jmp	#LR__0373
050a0     97 01 00 FF 
050a4     13 14 06 F6 | 	mov	arg02, ##@LR__5396
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     0C DF B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     1C 08 90 AD |  if_e	jmp	#LR__0374
050b8     97 01 00 FF 
050bc     18 14 06 F6 | 	mov	arg02, ##@LR__5397
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     F4 DE B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     0C 08 90 AD |  if_e	jmp	#LR__0375
050d0     97 01 00 FF 
050d4     1B 14 06 F6 | 	mov	arg02, ##@LR__5398
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     DC DE B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     FC 07 90 AD |  if_e	jmp	#LR__0376
050e8     97 01 00 FF 
050ec     21 14 06 F6 | 	mov	arg02, ##@LR__5399
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     C4 DE B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     EC 07 90 AD |  if_e	jmp	#LR__0377
05100     97 01 00 FF 
05104     25 14 06 F6 | 	mov	arg02, ##@LR__5400
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     AC DE B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     DC 07 90 AD |  if_e	jmp	#LR__0378
05118     97 01 00 FF 
0511c     2A 14 06 F6 | 	mov	arg02, ##@LR__5401
05120     13 13 02 F6 | 	mov	arg01, local01
05124     94 DE B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     CC 07 90 AD |  if_e	jmp	#LR__0379
05130     97 01 00 FF 
05134     2D 14 06 F6 | 	mov	arg02, ##@LR__5402
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     7C DE B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     BC 07 90 AD |  if_e	jmp	#LR__0380
05148     97 01 00 FF 
0514c     30 14 06 F6 | 	mov	arg02, ##@LR__5403
05150     13 13 02 F6 | 	mov	arg01, local01
05154     64 DE B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     AC 07 90 AD |  if_e	jmp	#LR__0381
05160     97 01 00 FF 
05164     35 14 06 F6 | 	mov	arg02, ##@LR__5404
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     4C DE B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     9C 07 90 AD |  if_e	jmp	#LR__0382
05178     97 01 00 FF 
0517c     3B 14 06 F6 | 	mov	arg02, ##@LR__5405
05180     13 13 02 F6 | 	mov	arg01, local01
05184     34 DE B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     8C 07 90 AD |  if_e	jmp	#LR__0383
05190     97 01 00 FF 
05194     3F 14 06 F6 | 	mov	arg02, ##@LR__5406
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     1C DE B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     7C 07 90 AD |  if_e	jmp	#LR__0384
051a8     97 01 00 FF 
051ac     48 14 06 F6 | 	mov	arg02, ##@LR__5407
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     04 DE B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     6C 07 90 AD |  if_e	jmp	#LR__0385
051c0     97 01 00 FF 
051c4     4E 14 06 F6 | 	mov	arg02, ##@LR__5408
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     EC DD B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     5C 07 90 AD |  if_e	jmp	#LR__0386
051d8     97 01 00 FF 
051dc     54 14 06 F6 | 	mov	arg02, ##@LR__5409
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     D4 DD B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     4C 07 90 AD |  if_e	jmp	#LR__0387
051f0     97 01 00 FF 
051f4     5D 14 06 F6 | 	mov	arg02, ##@LR__5410
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     BC DD B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     3C 07 90 AD |  if_e	jmp	#LR__0388
05208     97 01 00 FF 
0520c     67 14 06 F6 | 	mov	arg02, ##@LR__5411
05210     13 13 02 F6 | 	mov	arg01, local01
05214     A4 DD B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     2C 07 90 AD |  if_e	jmp	#LR__0389
05220     97 01 00 FF 
05224     70 14 06 F6 | 	mov	arg02, ##@LR__5412
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     8C DD B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     1C 07 90 AD |  if_e	jmp	#LR__0390
05238     97 01 00 FF 
0523c     75 14 06 F6 | 	mov	arg02, ##@LR__5413
05240     13 13 02 F6 | 	mov	arg01, local01
05244     74 DD B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     0C 07 90 AD |  if_e	jmp	#LR__0391
05250     97 01 00 FF 
05254     78 14 06 F6 | 	mov	arg02, ##@LR__5414
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     5C DD B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     FC 06 90 AD |  if_e	jmp	#LR__0392
05268     97 01 00 FF 
0526c     7D 14 06 F6 | 	mov	arg02, ##@LR__5415
05270     13 13 02 F6 | 	mov	arg01, local01
05274     44 DD B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     EC 06 90 AD |  if_e	jmp	#LR__0393
05280     97 01 00 FF 
05284     81 14 06 F6 | 	mov	arg02, ##@LR__5416
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     2C DD B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     DC 06 90 AD |  if_e	jmp	#LR__0394
05298     97 01 00 FF 
0529c     86 14 06 F6 | 	mov	arg02, ##@LR__5417
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     14 DD B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     CC 06 90 AD |  if_e	jmp	#LR__0395
052b0     97 01 00 FF 
052b4     8A 14 06 F6 | 	mov	arg02, ##@LR__5418
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     FC DC B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     BC 06 90 AD |  if_e	jmp	#LR__0396
052c8     97 01 00 FF 
052cc     93 14 06 F6 | 	mov	arg02, ##@LR__5419
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     E4 DC B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     AC 06 90 AD |  if_e	jmp	#LR__0397
052e0     97 01 00 FF 
052e4     98 14 06 F6 | 	mov	arg02, ##@LR__5420
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     CC DC B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     9C 06 90 AD |  if_e	jmp	#LR__0398
052f8     97 01 00 FF 
052fc     9E 14 06 F6 | 	mov	arg02, ##@LR__5421
05300     13 13 02 F6 | 	mov	arg01, local01
05304     B4 DC B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     8C 06 90 AD |  if_e	jmp	#LR__0399
05310     97 01 00 FF 
05314     A0 14 06 F6 | 	mov	arg02, ##@LR__5422
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     9C DC B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     7C 06 90 AD |  if_e	jmp	#LR__0400
05328     97 01 00 FF 
0532c     A4 14 06 F6 | 	mov	arg02, ##@LR__5423
05330     13 13 02 F6 | 	mov	arg01, local01
05334     84 DC B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     6C 06 90 AD |  if_e	jmp	#LR__0401
05340     97 01 00 FF 
05344     A8 14 06 F6 | 	mov	arg02, ##@LR__5424
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     6C DC B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     5C 06 90 AD |  if_e	jmp	#LR__0402
05358     97 01 00 FF 
0535c     B0 14 06 F6 | 	mov	arg02, ##@LR__5425
05360     13 13 02 F6 | 	mov	arg01, local01
05364     54 DC B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     4C 06 90 AD |  if_e	jmp	#LR__0403
05370     97 01 00 FF 
05374     B4 14 06 F6 | 	mov	arg02, ##@LR__5426
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     3C DC B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     3C 06 90 AD |  if_e	jmp	#LR__0404
05388     97 01 00 FF 
0538c     B6 14 06 F6 | 	mov	arg02, ##@LR__5427
05390     13 13 02 F6 | 	mov	arg01, local01
05394     24 DC B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     2C 06 90 AD |  if_e	jmp	#LR__0405
053a0     97 01 00 FF 
053a4     BD 14 06 F6 | 	mov	arg02, ##@LR__5428
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     0C DC B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     1C 06 90 AD |  if_e	jmp	#LR__0406
053b8     97 01 00 FF 
053bc     C1 14 06 F6 | 	mov	arg02, ##@LR__5429
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     F4 DB B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     0C 06 90 AD |  if_e	jmp	#LR__0407
053d0     97 01 00 FF 
053d4     C6 14 06 F6 | 	mov	arg02, ##@LR__5430
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     DC DB B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     FC 05 90 AD |  if_e	jmp	#LR__0408
053e8     97 01 00 FF 
053ec     C9 14 06 F6 | 	mov	arg02, ##@LR__5431
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     C4 DB B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     EC 05 90 AD |  if_e	jmp	#LR__0409
05400     97 01 00 FF 
05404     D2 14 06 F6 | 	mov	arg02, ##@LR__5432
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     AC DB B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     DC 05 90 AD |  if_e	jmp	#LR__0410
05418     97 01 00 FF 
0541c     D6 14 06 F6 | 	mov	arg02, ##@LR__5433
05420     13 13 02 F6 | 	mov	arg01, local01
05424     94 DB B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     CC 05 90 AD |  if_e	jmp	#LR__0411
05430     97 01 00 FF 
05434     DD 14 06 F6 | 	mov	arg02, ##@LR__5434
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     7C DB B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     BC 05 90 AD |  if_e	jmp	#LR__0412
05448     97 01 00 FF 
0544c     E1 14 06 F6 | 	mov	arg02, ##@LR__5435
05450     13 13 02 F6 | 	mov	arg01, local01
05454     64 DB B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     AC 05 90 AD |  if_e	jmp	#LR__0413
05460     97 01 00 FF 
05464     E8 14 06 F6 | 	mov	arg02, ##@LR__5436
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     4C DB B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     9C 05 90 AD |  if_e	jmp	#LR__0414
05478     97 01 00 FF 
0547c     EC 14 06 F6 | 	mov	arg02, ##@LR__5437
05480     13 13 02 F6 | 	mov	arg01, local01
05484     34 DB B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     8C 05 90 AD |  if_e	jmp	#LR__0415
05490     97 01 00 FF 
05494     F3 14 06 F6 | 	mov	arg02, ##@LR__5438
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     1C DB B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     7C 05 90 AD |  if_e	jmp	#LR__0416
054a8     97 01 00 FF 
054ac     F7 14 06 F6 | 	mov	arg02, ##@LR__5439
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     04 DB B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     6C 05 90 AD |  if_e	jmp	#LR__0417
054c0     97 01 00 FF 
054c4     02 15 06 F6 | 	mov	arg02, ##@LR__5440
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     EC DA B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     5C 05 90 AD |  if_e	jmp	#LR__0418
054d8     97 01 00 FF 
054dc     06 15 06 F6 | 	mov	arg02, ##@LR__5441
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     D4 DA B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     4C 05 90 AD |  if_e	jmp	#LR__0419
054f0     97 01 00 FF 
054f4     0D 15 06 F6 | 	mov	arg02, ##@LR__5442
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     BC DA B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     3C 05 90 AD |  if_e	jmp	#LR__0420
05508     97 01 00 FF 
0550c     11 15 06 F6 | 	mov	arg02, ##@LR__5443
05510     13 13 02 F6 | 	mov	arg01, local01
05514     A4 DA B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     2C 05 90 AD |  if_e	jmp	#LR__0421
05520     97 01 00 FF 
05524     19 15 06 F6 | 	mov	arg02, ##@LR__5444
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     8C DA B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     1C 05 90 AD |  if_e	jmp	#LR__0422
05538     97 01 00 FF 
0553c     1D 15 06 F6 | 	mov	arg02, ##@LR__5445
05540     13 13 02 F6 | 	mov	arg01, local01
05544     74 DA B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     0C 05 90 AD |  if_e	jmp	#LR__0423
05550     97 01 00 FF 
05554     24 15 06 F6 | 	mov	arg02, ##@LR__5446
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     5C DA B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     FC 04 90 AD |  if_e	jmp	#LR__0424
05568     97 01 00 FF 
0556c     2B 15 06 F6 | 	mov	arg02, ##@LR__5447
05570     13 13 02 F6 | 	mov	arg01, local01
05574     44 DA B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     EC 04 90 AD |  if_e	jmp	#LR__0425
05580     97 01 00 FF 
05584     2F 15 06 F6 | 	mov	arg02, ##@LR__5448
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     2C DA B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     DC 04 90 AD |  if_e	jmp	#LR__0426
05598     97 01 00 FF 
0559c     35 15 06 F6 | 	mov	arg02, ##@LR__5449
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     14 DA B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     CC 04 90 AD |  if_e	jmp	#LR__0427
055b0     97 01 00 FF 
055b4     39 15 06 F6 | 	mov	arg02, ##@LR__5450
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     FC D9 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     BC 04 90 AD |  if_e	jmp	#LR__0428
055c8     97 01 00 FF 
055cc     40 15 06 F6 | 	mov	arg02, ##@LR__5451
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     E4 D9 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     AC 04 90 AD |  if_e	jmp	#LR__0429
055e0     97 01 00 FF 
055e4     45 15 06 F6 | 	mov	arg02, ##@LR__5452
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     CC D9 B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     9C 04 90 AD |  if_e	jmp	#LR__0430
055f8     97 01 00 FF 
055fc     4A 15 06 F6 | 	mov	arg02, ##@LR__5453
05600     13 13 02 F6 | 	mov	arg01, local01
05604     B4 D9 B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     8C 04 90 AD |  if_e	jmp	#LR__0431
05610     97 01 00 FF 
05614     51 15 06 F6 | 	mov	arg02, ##@LR__5454
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     9C D9 B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     7C 04 90 AD |  if_e	jmp	#LR__0432
05628     97 01 00 FF 
0562c     54 15 06 F6 | 	mov	arg02, ##@LR__5455
05630     13 13 02 F6 | 	mov	arg01, local01
05634     84 D9 B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     6C 04 90 AD |  if_e	jmp	#LR__0433
05640     97 01 00 FF 
05644     5E 15 06 F6 | 	mov	arg02, ##@LR__5456
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     6C D9 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     5C 04 90 AD |  if_e	jmp	#LR__0434
05658     97 01 00 FF 
0565c     62 15 06 F6 | 	mov	arg02, ##@LR__5457
05660     13 13 02 F6 | 	mov	arg01, local01
05664     54 D9 B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     4C 04 90 AD |  if_e	jmp	#LR__0435
05670     97 01 00 FF 
05674     6A 15 06 F6 | 	mov	arg02, ##@LR__5458
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     3C D9 B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     3C 04 90 AD |  if_e	jmp	#LR__0436
05688     97 01 00 FF 
0568c     6E 15 06 F6 | 	mov	arg02, ##@LR__5459
05690     13 13 02 F6 | 	mov	arg01, local01
05694     24 D9 B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     2C 04 90 AD |  if_e	jmp	#LR__0437
056a0     97 01 00 FF 
056a4     74 15 06 F6 | 	mov	arg02, ##@LR__5460
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     0C D9 B1 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     1C 04 90 AD |  if_e	jmp	#LR__0438
056b8     97 01 00 FF 
056bc     7A 15 06 F6 | 	mov	arg02, ##@LR__5461
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     F4 D8 B1 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     0C 04 90 AD |  if_e	jmp	#LR__0439
056d0     10 04 90 FD | 	jmp	#LR__0440
056d4                 | LR__0310
056d4     5C FA 05 F6 | 	mov	result1, #92
056d8     0C 04 90 FD | 	jmp	#LR__0441
056dc                 | LR__0311
056dc     5C FA 05 F6 | 	mov	result1, #92
056e0     04 04 90 FD | 	jmp	#LR__0441
056e4                 | LR__0312
056e4     B9 FA 05 F6 | 	mov	result1, #185
056e8     FC 03 90 FD | 	jmp	#LR__0441
056ec                 | LR__0313
056ec     47 FA 05 F6 | 	mov	result1, #71
056f0     F4 03 90 FD | 	jmp	#LR__0441
056f4                 | LR__0314
056f4     59 FA 05 F6 | 	mov	result1, #89
056f8     EC 03 90 FD | 	jmp	#LR__0441
056fc                 | LR__0315
056fc     59 FA 05 F6 | 	mov	result1, #89
05700     E4 03 90 FD | 	jmp	#LR__0441
05704                 | LR__0316
05704     C3 FA 05 F6 | 	mov	result1, #195
05708     DC 03 90 FD | 	jmp	#LR__0441
0570c                 | LR__0317
0570c     AE FA 05 F6 | 	mov	result1, #174
05710     D4 03 90 FD | 	jmp	#LR__0441
05714                 | LR__0318
05714     AE FA 05 F6 | 	mov	result1, #174
05718     CC 03 90 FD | 	jmp	#LR__0441
0571c                 | LR__0319
0571c     B1 FA 05 F6 | 	mov	result1, #177
05720     C4 03 90 FD | 	jmp	#LR__0441
05724                 | LR__0320
05724     B1 FA 05 F6 | 	mov	result1, #177
05728     BC 03 90 FD | 	jmp	#LR__0441
0572c                 | LR__0321
0572c     AF FA 05 F6 | 	mov	result1, #175
05730     B4 03 90 FD | 	jmp	#LR__0441
05734                 | LR__0322
05734     AF FA 05 F6 | 	mov	result1, #175
05738     AC 03 90 FD | 	jmp	#LR__0441
0573c                 | LR__0323
0573c     B0 FA 05 F6 | 	mov	result1, #176
05740     A4 03 90 FD | 	jmp	#LR__0441
05744                 | LR__0324
05744     B0 FA 05 F6 | 	mov	result1, #176
05748     9C 03 90 FD | 	jmp	#LR__0441
0574c                 | LR__0325
0574c     45 FA 05 F6 | 	mov	result1, #69
05750     94 03 90 FD | 	jmp	#LR__0441
05754                 | LR__0326
05754     45 FA 05 F6 | 	mov	result1, #69
05758     8C 03 90 FD | 	jmp	#LR__0441
0575c                 | LR__0327
0575c     69 FA 05 F6 | 	mov	result1, #105
05760     84 03 90 FD | 	jmp	#LR__0441
05764                 | LR__0328
05764     B4 FA 05 F6 | 	mov	result1, #180
05768     7C 03 90 FD | 	jmp	#LR__0441
0576c                 | LR__0329
0576c     40 FA 05 F6 | 	mov	result1, #64
05770     74 03 90 FD | 	jmp	#LR__0441
05774                 | LR__0330
05774     49 FA 05 F6 | 	mov	result1, #73
05778     6C 03 90 FD | 	jmp	#LR__0441
0577c                 | LR__0331
0577c     49 FA 05 F6 | 	mov	result1, #73
05780     64 03 90 FD | 	jmp	#LR__0441
05784                 | LR__0332
05784     50 FA 05 F6 | 	mov	result1, #80
05788     5C 03 90 FD | 	jmp	#LR__0441
0578c                 | LR__0333
0578c     50 FA 05 F6 | 	mov	result1, #80
05790     54 03 90 FD | 	jmp	#LR__0441
05794                 | LR__0334
05794     68 FA 05 F6 | 	mov	result1, #104
05798     4C 03 90 FD | 	jmp	#LR__0441
0579c                 | LR__0335
0579c     73 FA 05 F6 | 	mov	result1, #115
057a0     44 03 90 FD | 	jmp	#LR__0441
057a4                 | LR__0336
057a4     74 FA 05 F6 | 	mov	result1, #116
057a8     3C 03 90 FD | 	jmp	#LR__0441
057ac                 | LR__0337
057ac     6C FA 05 F6 | 	mov	result1, #108
057b0     34 03 90 FD | 	jmp	#LR__0441
057b4                 | LR__0338
057b4     6C FA 05 F6 | 	mov	result1, #108
057b8     2C 03 90 FD | 	jmp	#LR__0441
057bc                 | LR__0339
057bc     89 FA 05 F6 | 	mov	result1, #137
057c0     24 03 90 FD | 	jmp	#LR__0441
057c4                 | LR__0340
057c4     C2 FA 05 F6 | 	mov	result1, #194
057c8     1C 03 90 FD | 	jmp	#LR__0441
057cc                 | LR__0341
057cc     72 FA 05 F6 | 	mov	result1, #114
057d0     14 03 90 FD | 	jmp	#LR__0441
057d4                 | LR__0342
057d4     5D FA 05 F6 | 	mov	result1, #93
057d8     0C 03 90 FD | 	jmp	#LR__0441
057dc                 | LR__0343
057dc     96 FA 05 F6 | 	mov	result1, #150
057e0     04 03 90 FD | 	jmp	#LR__0441
057e4                 | LR__0344
057e4     43 FA 05 F6 | 	mov	result1, #67
057e8     FC 02 90 FD | 	jmp	#LR__0441
057ec                 | LR__0345
057ec     43 FA 05 F6 | 	mov	result1, #67
057f0     F4 02 90 FD | 	jmp	#LR__0441
057f4                 | LR__0346
057f4     43 FA 05 F6 | 	mov	result1, #67
057f8     EC 02 90 FD | 	jmp	#LR__0441
057fc                 | LR__0347
057fc     5A FA 05 F6 | 	mov	result1, #90
05800     E4 02 90 FD | 	jmp	#LR__0441
05804                 | LR__0348
05804     AB FA 05 F6 | 	mov	result1, #171
05808     DC 02 90 FD | 	jmp	#LR__0441
0580c                 | LR__0349
0580c     BD FA 05 F6 | 	mov	result1, #189
05810     D4 02 90 FD | 	jmp	#LR__0441
05814                 | LR__0350
05814     BD FA 05 F6 | 	mov	result1, #189
05818     CC 02 90 FD | 	jmp	#LR__0441
0581c                 | LR__0351
0581c     46 FA 05 F6 | 	mov	result1, #70
05820     C4 02 90 FD | 	jmp	#LR__0441
05824                 | LR__0352
05824     46 FA 05 F6 | 	mov	result1, #70
05828     BC 02 90 FD | 	jmp	#LR__0441
0582c                 | LR__0353
0582c     71 FA 05 F6 | 	mov	result1, #113
05830     B4 02 90 FD | 	jmp	#LR__0441
05834                 | LR__0354
05834     71 FA 05 F6 | 	mov	result1, #113
05838     AC 02 90 FD | 	jmp	#LR__0441
0583c                 | LR__0355
0583c     60 FA 05 F6 | 	mov	result1, #96
05840     A4 02 90 FD | 	jmp	#LR__0441
05844                 | LR__0356
05844     4A FA 05 F6 | 	mov	result1, #74
05848     9C 02 90 FD | 	jmp	#LR__0441
0584c                 | LR__0357
0584c     4A FA 05 F6 | 	mov	result1, #74
05850     94 02 90 FD | 	jmp	#LR__0441
05854                 | LR__0358
05854     48 FA 05 F6 | 	mov	result1, #72
05858     8C 02 90 FD | 	jmp	#LR__0441
0585c                 | LR__0359
0585c     48 FA 05 F6 | 	mov	result1, #72
05860     84 02 90 FD | 	jmp	#LR__0441
05864                 | LR__0360
05864     BB FA 05 F6 | 	mov	result1, #187
05868     7C 02 90 FD | 	jmp	#LR__0441
0586c                 | LR__0361
0586c     A9 FA 05 F6 | 	mov	result1, #169
05870     74 02 90 FD | 	jmp	#LR__0441
05874                 | LR__0362
05874     4E FA 05 F6 | 	mov	result1, #78
05878     6C 02 90 FD | 	jmp	#LR__0441
0587c                 | LR__0363
0587c     4E FA 05 F6 | 	mov	result1, #78
05880     64 02 90 FD | 	jmp	#LR__0441
05884                 | LR__0364
05884     58 FA 05 F6 | 	mov	result1, #88
05888     5C 02 90 FD | 	jmp	#LR__0441
0588c                 | LR__0365
0588c     5F FA 05 F6 | 	mov	result1, #95
05890     54 02 90 FD | 	jmp	#LR__0441
05894                 | LR__0366
05894     5F FA 05 F6 | 	mov	result1, #95
05898     4C 02 90 FD | 	jmp	#LR__0441
0589c                 | LR__0367
0589c     B5 FA 05 F6 | 	mov	result1, #181
058a0     44 02 90 FD | 	jmp	#LR__0441
058a4                 | LR__0368
058a4     4C FA 05 F6 | 	mov	result1, #76
058a8     3C 02 90 FD | 	jmp	#LR__0441
058ac                 | LR__0369
058ac     4C FA 05 F6 | 	mov	result1, #76
058b0     34 02 90 FD | 	jmp	#LR__0441
058b4                 | LR__0370
058b4     52 FA 05 F6 | 	mov	result1, #82
058b8     2C 02 90 FD | 	jmp	#LR__0441
058bc                 | LR__0371
058bc     52 FA 05 F6 | 	mov	result1, #82
058c0     24 02 90 FD | 	jmp	#LR__0441
058c4                 | LR__0372
058c4     97 FA 05 F6 | 	mov	result1, #151
058c8     1C 02 90 FD | 	jmp	#LR__0441
058cc                 | LR__0373
058cc     C6 FA 05 F6 | 	mov	result1, #198
058d0     14 02 90 FD | 	jmp	#LR__0441
058d4                 | LR__0374
058d4     61 FA 05 F6 | 	mov	result1, #97
058d8     0C 02 90 FD | 	jmp	#LR__0441
058dc                 | LR__0375
058dc     61 FA 05 F6 | 	mov	result1, #97
058e0     04 02 90 FD | 	jmp	#LR__0441
058e4                 | LR__0376
058e4     63 FA 05 F6 | 	mov	result1, #99
058e8     FC 01 90 FD | 	jmp	#LR__0441
058ec                 | LR__0377
058ec     41 FA 05 F6 | 	mov	result1, #65
058f0     F4 01 90 FD | 	jmp	#LR__0441
058f4                 | LR__0378
058f4     4B FA 05 F6 | 	mov	result1, #75
058f8     EC 01 90 FD | 	jmp	#LR__0441
058fc                 | LR__0379
058fc     4B FA 05 F6 | 	mov	result1, #75
05900     E4 01 90 FD | 	jmp	#LR__0441
05904                 | LR__0380
05904     C1 FA 05 F6 | 	mov	result1, #193
05908     DC 01 90 FD | 	jmp	#LR__0441
0590c                 | LR__0381
0590c     B3 FA 05 F6 | 	mov	result1, #179
05910     D4 01 90 FD | 	jmp	#LR__0441
05914                 | LR__0382
05914     5E FA 05 F6 | 	mov	result1, #94
05918     CC 01 90 FD | 	jmp	#LR__0441
0591c                 | LR__0383
0591c     5E FA 05 F6 | 	mov	result1, #94
05920     C4 01 90 FD | 	jmp	#LR__0441
05924                 | LR__0384
05924     7C FA 05 F6 | 	mov	result1, #124
05928     BC 01 90 FD | 	jmp	#LR__0441
0592c                 | LR__0385
0592c     7E FA 05 F6 | 	mov	result1, #126
05930     B4 01 90 FD | 	jmp	#LR__0441
05934                 | LR__0386
05934     7D FA 05 F6 | 	mov	result1, #125
05938     AC 01 90 FD | 	jmp	#LR__0441
0593c                 | LR__0387
0593c     7F FA 05 F6 | 	mov	result1, #127
05940     A4 01 90 FD | 	jmp	#LR__0441
05944                 | LR__0388
05944     80 FA 05 F6 | 	mov	result1, #128
05948     9C 01 90 FD | 	jmp	#LR__0441
0594c                 | LR__0389
0594c     55 FA 05 F6 | 	mov	result1, #85
05950     94 01 90 FD | 	jmp	#LR__0441
05954                 | LR__0390
05954     75 FA 05 F6 | 	mov	result1, #117
05958     8C 01 90 FD | 	jmp	#LR__0441
0595c                 | LR__0391
0595c     75 FA 05 F6 | 	mov	result1, #117
05960     84 01 90 FD | 	jmp	#LR__0441
05964                 | LR__0392
05964     42 FA 05 F6 | 	mov	result1, #66
05968     7C 01 90 FD | 	jmp	#LR__0441
0596c                 | LR__0393
0596c     42 FA 05 F6 | 	mov	result1, #66
05970     74 01 90 FD | 	jmp	#LR__0441
05974                 | LR__0394
05974     95 FA 05 F6 | 	mov	result1, #149
05978     6C 01 90 FD | 	jmp	#LR__0441
0597c                 | LR__0395
0597c     AC FA 05 F6 | 	mov	result1, #172
05980     64 01 90 FD | 	jmp	#LR__0441
05984                 | LR__0396
05984     81 FA 05 F6 | 	mov	result1, #129
05988     5C 01 90 FD | 	jmp	#LR__0441
0598c                 | LR__0397
0598c     81 FA 05 F6 | 	mov	result1, #129
05990     54 01 90 FD | 	jmp	#LR__0441
05994                 | LR__0398
05994     44 FA 05 F6 | 	mov	result1, #68
05998     4C 01 90 FD | 	jmp	#LR__0441
0599c                 | LR__0399
0599c     44 FA 05 F6 | 	mov	result1, #68
059a0     44 01 90 FD | 	jmp	#LR__0441
059a4                 | LR__0400
059a4     BC FA 05 F6 | 	mov	result1, #188
059a8     3C 01 90 FD | 	jmp	#LR__0441
059ac                 | LR__0401
059ac     88 FA 05 F6 | 	mov	result1, #136
059b0     34 01 90 FD | 	jmp	#LR__0441
059b4                 | LR__0402
059b4     92 FA 05 F6 | 	mov	result1, #146
059b8     2C 01 90 FD | 	jmp	#LR__0441
059bc                 | LR__0403
059bc     BE FA 05 F6 | 	mov	result1, #190
059c0     24 01 90 FD | 	jmp	#LR__0441
059c4                 | LR__0404
059c4     BE FA 05 F6 | 	mov	result1, #190
059c8     1C 01 90 FD | 	jmp	#LR__0441
059cc                 | LR__0405
059cc     AA FA 05 F6 | 	mov	result1, #170
059d0     14 01 90 FD | 	jmp	#LR__0441
059d4                 | LR__0406
059d4     4D FA 05 F6 | 	mov	result1, #77
059d8     0C 01 90 FD | 	jmp	#LR__0441
059dc                 | LR__0407
059dc     51 FA 05 F6 | 	mov	result1, #81
059e0     04 01 90 FD | 	jmp	#LR__0441
059e4                 | LR__0408
059e4     51 FA 05 F6 | 	mov	result1, #81
059e8     FC 00 90 FD | 	jmp	#LR__0441
059ec                 | LR__0409
059ec     8E FA 05 F6 | 	mov	result1, #142
059f0     F4 00 90 FD | 	jmp	#LR__0441
059f4                 | LR__0410
059f4     8E FA 05 F6 | 	mov	result1, #142
059f8     EC 00 90 FD | 	jmp	#LR__0441
059fc                 | LR__0411
059fc     90 FA 05 F6 | 	mov	result1, #144
05a00     E4 00 90 FD | 	jmp	#LR__0441
05a04                 | LR__0412
05a04     90 FA 05 F6 | 	mov	result1, #144
05a08     DC 00 90 FD | 	jmp	#LR__0441
05a0c                 | LR__0413
05a0c     8D FA 05 F6 | 	mov	result1, #141
05a10     D4 00 90 FD | 	jmp	#LR__0441
05a14                 | LR__0414
05a14     8D FA 05 F6 | 	mov	result1, #141
05a18     CC 00 90 FD | 	jmp	#LR__0441
05a1c                 | LR__0415
05a1c     8C FA 05 F6 | 	mov	result1, #140
05a20     C4 00 90 FD | 	jmp	#LR__0441
05a24                 | LR__0416
05a24     8C FA 05 F6 | 	mov	result1, #140
05a28     BC 00 90 FD | 	jmp	#LR__0441
05a2c                 | LR__0417
05a2c     91 FA 05 F6 | 	mov	result1, #145
05a30     B4 00 90 FD | 	jmp	#LR__0441
05a34                 | LR__0418
05a34     91 FA 05 F6 | 	mov	result1, #145
05a38     AC 00 90 FD | 	jmp	#LR__0441
05a3c                 | LR__0419
05a3c     8B FA 05 F6 | 	mov	result1, #139
05a40     A4 00 90 FD | 	jmp	#LR__0441
05a44                 | LR__0420
05a44     8B FA 05 F6 | 	mov	result1, #139
05a48     9C 00 90 FD | 	jmp	#LR__0441
05a4c                 | LR__0421
05a4c     8F FA 05 F6 | 	mov	result1, #143
05a50     94 00 90 FD | 	jmp	#LR__0441
05a54                 | LR__0422
05a54     8F FA 05 F6 | 	mov	result1, #143
05a58     8C 00 90 FD | 	jmp	#LR__0441
05a5c                 | LR__0423
05a5c     8F FA 05 F6 | 	mov	result1, #143
05a60     84 00 90 FD | 	jmp	#LR__0441
05a64                 | LR__0424
05a64     B2 FA 05 F6 | 	mov	result1, #178
05a68     7C 00 90 FD | 	jmp	#LR__0441
05a6c                 | LR__0425
05a6c     B2 FA 05 F6 | 	mov	result1, #178
05a70     74 00 90 FD | 	jmp	#LR__0441
05a74                 | LR__0426
05a74     75 FA 05 F6 | 	mov	result1, #117
05a78     6C 00 90 FD | 	jmp	#LR__0441
05a7c                 | LR__0427
05a7c     75 FA 05 F6 | 	mov	result1, #117
05a80     64 00 90 FD | 	jmp	#LR__0441
05a84                 | LR__0428
05a84     6D FA 05 F6 | 	mov	result1, #109
05a88     5C 00 90 FD | 	jmp	#LR__0441
05a8c                 | LR__0429
05a8c     6D FA 05 F6 | 	mov	result1, #109
05a90     54 00 90 FD | 	jmp	#LR__0441
05a94                 | LR__0430
05a94     5B FA 05 F6 | 	mov	result1, #91
05a98     4C 00 90 FD | 	jmp	#LR__0441
05a9c                 | LR__0431
05a9c     56 FA 05 F6 | 	mov	result1, #86
05aa0     44 00 90 FD | 	jmp	#LR__0441
05aa4                 | LR__0432
05aa4     56 FA 05 F6 | 	mov	result1, #86
05aa8     3C 00 90 FD | 	jmp	#LR__0441
05aac                 | LR__0433
05aac     70 FA 05 F6 | 	mov	result1, #112
05ab0     34 00 90 FD | 	jmp	#LR__0441
05ab4                 | LR__0434
05ab4     70 FA 05 F6 | 	mov	result1, #112
05ab8     2C 00 90 FD | 	jmp	#LR__0441
05abc                 | LR__0435
05abc     57 FA 05 F6 | 	mov	result1, #87
05ac0     24 00 90 FD | 	jmp	#LR__0441
05ac4                 | LR__0436
05ac4     57 FA 05 F6 | 	mov	result1, #87
05ac8     1C 00 90 FD | 	jmp	#LR__0441
05acc                 | LR__0437
05acc     79 FA 05 F6 | 	mov	result1, #121
05ad0     14 00 90 FD | 	jmp	#LR__0441
05ad4                 | LR__0438
05ad4     77 FA 05 F6 | 	mov	result1, #119
05ad8     0C 00 90 FD | 	jmp	#LR__0441
05adc                 | LR__0439
05adc     78 FA 05 F6 | 	mov	result1, #120
05ae0     04 00 90 FD | 	jmp	#LR__0441
05ae4                 | LR__0440
05ae4     00 FA 05 F6 | 	mov	result1, #0
05ae8                 | LR__0441
05ae8     A7 F0 03 F6 | 	mov	ptra, fp
05aec     B2 00 A0 FD | 	call	#popregs_
05af0                 | _iscommand_ret
05af0     2D 00 64 FD | 	ret
05af4                 | 
05af4                 | ' 
05af4                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05af4                 | ' 
05af4                 | ' function isfunction(s as string) as ubyte
05af4                 | _isfunction
05af4     01 4A 05 F6 | 	mov	COUNT_, #1
05af8     A8 00 A0 FD | 	call	#pushregs_
05afc                 | ' 
05afc                 | ' select case s
05afc     09 27 02 F6 | 	mov	local01, arg01
05b00     97 01 00 FF 
05b04     80 15 06 F6 | 	mov	arg02, ##@LR__5462
05b08     13 13 02 F6 | 	mov	arg01, local01
05b0c     AC D4 B1 FD | 	call	#__system___string_cmp
05b10     00 FA 0D F2 | 	cmp	result1, #0 wz
05b14     3C 04 90 AD |  if_e	jmp	#LR__0450
05b18     97 01 00 FF 
05b1c     84 15 06 F6 | 	mov	arg02, ##@LR__5463
05b20     13 13 02 F6 | 	mov	arg01, local01
05b24     94 D4 B1 FD | 	call	#__system___string_cmp
05b28     00 FA 0D F2 | 	cmp	result1, #0 wz
05b2c     2C 04 90 AD |  if_e	jmp	#LR__0451
05b30     97 01 00 FF 
05b34     89 15 06 F6 | 	mov	arg02, ##@LR__5464
05b38     13 13 02 F6 | 	mov	arg01, local01
05b3c     7C D4 B1 FD | 	call	#__system___string_cmp
05b40     00 FA 0D F2 | 	cmp	result1, #0 wz
05b44     1C 04 90 AD |  if_e	jmp	#LR__0452
05b48     97 01 00 FF 
05b4c     8D 15 06 F6 | 	mov	arg02, ##@LR__5465
05b50     13 13 02 F6 | 	mov	arg01, local01
05b54     64 D4 B1 FD | 	call	#__system___string_cmp
05b58     00 FA 0D F2 | 	cmp	result1, #0 wz
05b5c     0C 04 90 AD |  if_e	jmp	#LR__0453
05b60     97 01 00 FF 
05b64     92 15 06 F6 | 	mov	arg02, ##@LR__5466
05b68     13 13 02 F6 | 	mov	arg01, local01
05b6c     4C D4 B1 FD | 	call	#__system___string_cmp
05b70     00 FA 0D F2 | 	cmp	result1, #0 wz
05b74     FC 03 90 AD |  if_e	jmp	#LR__0454
05b78     97 01 00 FF 
05b7c     96 15 06 F6 | 	mov	arg02, ##@LR__5467
05b80     13 13 02 F6 | 	mov	arg01, local01
05b84     34 D4 B1 FD | 	call	#__system___string_cmp
05b88     00 FA 0D F2 | 	cmp	result1, #0 wz
05b8c     EC 03 90 AD |  if_e	jmp	#LR__0455
05b90     97 01 00 FF 
05b94     9B 15 06 F6 | 	mov	arg02, ##@LR__5468
05b98     13 13 02 F6 | 	mov	arg01, local01
05b9c     1C D4 B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ba4     DC 03 90 AD |  if_e	jmp	#LR__0456
05ba8     97 01 00 FF 
05bac     9F 15 06 F6 | 	mov	arg02, ##@LR__5469
05bb0     13 13 02 F6 | 	mov	arg01, local01
05bb4     04 D4 B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bbc     CC 03 90 AD |  if_e	jmp	#LR__0457
05bc0     97 01 00 FF 
05bc4     A4 15 06 F6 | 	mov	arg02, ##@LR__5470
05bc8     13 13 02 F6 | 	mov	arg01, local01
05bcc     EC D3 B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bd4     BC 03 90 AD |  if_e	jmp	#LR__0458
05bd8     97 01 00 FF 
05bdc     A9 15 06 F6 | 	mov	arg02, ##@LR__5471
05be0     13 13 02 F6 | 	mov	arg01, local01
05be4     D4 D3 B1 FD | 	call	#__system___string_cmp
05be8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bec     AC 03 90 AD |  if_e	jmp	#LR__0459
05bf0     97 01 00 FF 
05bf4     AD 15 06 F6 | 	mov	arg02, ##@LR__5472
05bf8     13 13 02 F6 | 	mov	arg01, local01
05bfc     BC D3 B1 FD | 	call	#__system___string_cmp
05c00     00 FA 0D F2 | 	cmp	result1, #0 wz
05c04     9C 03 90 AD |  if_e	jmp	#LR__0460
05c08     97 01 00 FF 
05c0c     B3 15 06 F6 | 	mov	arg02, ##@LR__5473
05c10     13 13 02 F6 | 	mov	arg01, local01
05c14     A4 D3 B1 FD | 	call	#__system___string_cmp
05c18     00 FA 0D F2 | 	cmp	result1, #0 wz
05c1c     8C 03 90 AD |  if_e	jmp	#LR__0461
05c20     97 01 00 FF 
05c24     BC 15 06 F6 | 	mov	arg02, ##@LR__5474
05c28     13 13 02 F6 | 	mov	arg01, local01
05c2c     8C D3 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     7C 03 90 AD |  if_e	jmp	#LR__0462
05c38     97 01 00 FF 
05c3c     C0 15 06 F6 | 	mov	arg02, ##@LR__5475
05c40     13 13 02 F6 | 	mov	arg01, local01
05c44     74 D3 B1 FD | 	call	#__system___string_cmp
05c48     00 FA 0D F2 | 	cmp	result1, #0 wz
05c4c     6C 03 90 AD |  if_e	jmp	#LR__0463
05c50     97 01 00 FF 
05c54     C4 15 06 F6 | 	mov	arg02, ##@LR__5476
05c58     13 13 02 F6 | 	mov	arg01, local01
05c5c     5C D3 B1 FD | 	call	#__system___string_cmp
05c60     00 FA 0D F2 | 	cmp	result1, #0 wz
05c64     5C 03 90 AD |  if_e	jmp	#LR__0464
05c68     97 01 00 FF 
05c6c     CD 15 06 F6 | 	mov	arg02, ##@LR__5477
05c70     13 13 02 F6 | 	mov	arg01, local01
05c74     44 D3 B1 FD | 	call	#__system___string_cmp
05c78     00 FA 0D F2 | 	cmp	result1, #0 wz
05c7c     4C 03 90 AD |  if_e	jmp	#LR__0465
05c80     97 01 00 FF 
05c84     D1 15 06 F6 | 	mov	arg02, ##@LR__5478
05c88     13 13 02 F6 | 	mov	arg01, local01
05c8c     2C D3 B1 FD | 	call	#__system___string_cmp
05c90     00 FA 0D F2 | 	cmp	result1, #0 wz
05c94     3C 03 90 AD |  if_e	jmp	#LR__0466
05c98     97 01 00 FF 
05c9c     DF 15 06 F6 | 	mov	arg02, ##@LR__5479
05ca0     13 13 02 F6 | 	mov	arg01, local01
05ca4     14 D3 B1 FD | 	call	#__system___string_cmp
05ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cac     2C 03 90 AD |  if_e	jmp	#LR__0467
05cb0     97 01 00 FF 
05cb4     EC 15 06 F6 | 	mov	arg02, ##@LR__5480
05cb8     13 13 02 F6 | 	mov	arg01, local01
05cbc     FC D2 B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc4     1C 03 90 AD |  if_e	jmp	#LR__0468
05cc8     97 01 00 FF 
05ccc     F4 15 06 F6 | 	mov	arg02, ##@LR__5481
05cd0     13 13 02 F6 | 	mov	arg01, local01
05cd4     E4 D2 B1 FD | 	call	#__system___string_cmp
05cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cdc     0C 03 90 AD |  if_e	jmp	#LR__0469
05ce0     97 01 00 FF 
05ce4     F9 15 06 F6 | 	mov	arg02, ##@LR__5482
05ce8     13 13 02 F6 | 	mov	arg01, local01
05cec     CC D2 B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf4     FC 02 90 AD |  if_e	jmp	#LR__0470
05cf8     98 01 00 FF 
05cfc     00 14 06 F6 | 	mov	arg02, ##@LR__5483
05d00     13 13 02 F6 | 	mov	arg01, local01
05d04     B4 D2 B1 FD | 	call	#__system___string_cmp
05d08     00 FA 0D F2 | 	cmp	result1, #0 wz
05d0c     EC 02 90 AD |  if_e	jmp	#LR__0471
05d10     98 01 00 FF 
05d14     04 14 06 F6 | 	mov	arg02, ##@LR__5484
05d18     13 13 02 F6 | 	mov	arg01, local01
05d1c     9C D2 B1 FD | 	call	#__system___string_cmp
05d20     00 FA 0D F2 | 	cmp	result1, #0 wz
05d24     DC 02 90 AD |  if_e	jmp	#LR__0472
05d28     98 01 00 FF 
05d2c     0A 14 06 F6 | 	mov	arg02, ##@LR__5485
05d30     13 13 02 F6 | 	mov	arg01, local01
05d34     84 D2 B1 FD | 	call	#__system___string_cmp
05d38     00 FA 0D F2 | 	cmp	result1, #0 wz
05d3c     CC 02 90 AD |  if_e	jmp	#LR__0473
05d40     98 01 00 FF 
05d44     0E 14 06 F6 | 	mov	arg02, ##@LR__5486
05d48     13 13 02 F6 | 	mov	arg01, local01
05d4c     6C D2 B1 FD | 	call	#__system___string_cmp
05d50     00 FA 0D F2 | 	cmp	result1, #0 wz
05d54     BC 02 90 AD |  if_e	jmp	#LR__0474
05d58     98 01 00 FF 
05d5c     12 14 06 F6 | 	mov	arg02, ##@LR__5487
05d60     13 13 02 F6 | 	mov	arg01, local01
05d64     54 D2 B1 FD | 	call	#__system___string_cmp
05d68     00 FA 0D F2 | 	cmp	result1, #0 wz
05d6c     AC 02 90 AD |  if_e	jmp	#LR__0475
05d70     98 01 00 FF 
05d74     18 14 06 F6 | 	mov	arg02, ##@LR__5488
05d78     13 13 02 F6 | 	mov	arg01, local01
05d7c     3C D2 B1 FD | 	call	#__system___string_cmp
05d80     00 FA 0D F2 | 	cmp	result1, #0 wz
05d84     9C 02 90 AD |  if_e	jmp	#LR__0476
05d88     98 01 00 FF 
05d8c     1D 14 06 F6 | 	mov	arg02, ##@LR__5489
05d90     13 13 02 F6 | 	mov	arg01, local01
05d94     24 D2 B1 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     8C 02 90 AD |  if_e	jmp	#LR__0477
05da0     98 01 00 FF 
05da4     24 14 06 F6 | 	mov	arg02, ##@LR__5490
05da8     13 13 02 F6 | 	mov	arg01, local01
05dac     0C D2 B1 FD | 	call	#__system___string_cmp
05db0     00 FA 0D F2 | 	cmp	result1, #0 wz
05db4     7C 02 90 AD |  if_e	jmp	#LR__0478
05db8     98 01 00 FF 
05dbc     2B 14 06 F6 | 	mov	arg02, ##@LR__5491
05dc0     13 13 02 F6 | 	mov	arg01, local01
05dc4     F4 D1 B1 FD | 	call	#__system___string_cmp
05dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dcc     6C 02 90 AD |  if_e	jmp	#LR__0479
05dd0     98 01 00 FF 
05dd4     32 14 06 F6 | 	mov	arg02, ##@LR__5492
05dd8     13 13 02 F6 | 	mov	arg01, local01
05ddc     DC D1 B1 FD | 	call	#__system___string_cmp
05de0     00 FA 0D F2 | 	cmp	result1, #0 wz
05de4     5C 02 90 AD |  if_e	jmp	#LR__0480
05de8     98 01 00 FF 
05dec     39 14 06 F6 | 	mov	arg02, ##@LR__5493
05df0     13 13 02 F6 | 	mov	arg01, local01
05df4     C4 D1 B1 FD | 	call	#__system___string_cmp
05df8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dfc     4C 02 90 AD |  if_e	jmp	#LR__0481
05e00     98 01 00 FF 
05e04     3E 14 06 F6 | 	mov	arg02, ##@LR__5494
05e08     13 13 02 F6 | 	mov	arg01, local01
05e0c     AC D1 B1 FD | 	call	#__system___string_cmp
05e10     00 FA 0D F2 | 	cmp	result1, #0 wz
05e14     3C 02 90 AD |  if_e	jmp	#LR__0482
05e18     98 01 00 FF 
05e1c     46 14 06 F6 | 	mov	arg02, ##@LR__5495
05e20     13 13 02 F6 | 	mov	arg01, local01
05e24     94 D1 B1 FD | 	call	#__system___string_cmp
05e28     00 FA 0D F2 | 	cmp	result1, #0 wz
05e2c     2C 02 90 AD |  if_e	jmp	#LR__0483
05e30     98 01 00 FF 
05e34     4C 14 06 F6 | 	mov	arg02, ##@LR__5496
05e38     13 13 02 F6 | 	mov	arg01, local01
05e3c     7C D1 B1 FD | 	call	#__system___string_cmp
05e40     00 FA 0D F2 | 	cmp	result1, #0 wz
05e44     1C 02 90 AD |  if_e	jmp	#LR__0484
05e48     98 01 00 FF 
05e4c     53 14 06 F6 | 	mov	arg02, ##@LR__5497
05e50     13 13 02 F6 | 	mov	arg01, local01
05e54     64 D1 B1 FD | 	call	#__system___string_cmp
05e58     00 FA 0D F2 | 	cmp	result1, #0 wz
05e5c     0C 02 90 AD |  if_e	jmp	#LR__0485
05e60     98 01 00 FF 
05e64     59 14 06 F6 | 	mov	arg02, ##@LR__5498
05e68     13 13 02 F6 | 	mov	arg01, local01
05e6c     4C D1 B1 FD | 	call	#__system___string_cmp
05e70     00 FA 0D F2 | 	cmp	result1, #0 wz
05e74     FC 01 90 AD |  if_e	jmp	#LR__0486
05e78     98 01 00 FF 
05e7c     5F 14 06 F6 | 	mov	arg02, ##@LR__5499
05e80     13 13 02 F6 | 	mov	arg01, local01
05e84     34 D1 B1 FD | 	call	#__system___string_cmp
05e88     00 FA 0D F2 | 	cmp	result1, #0 wz
05e8c     EC 01 90 AD |  if_e	jmp	#LR__0487
05e90     98 01 00 FF 
05e94     63 14 06 F6 | 	mov	arg02, ##@LR__5500
05e98     13 13 02 F6 | 	mov	arg01, local01
05e9c     1C D1 B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     DC 01 90 AD |  if_e	jmp	#LR__0488
05ea8     98 01 00 FF 
05eac     67 14 06 F6 | 	mov	arg02, ##@LR__5501
05eb0     13 13 02 F6 | 	mov	arg01, local01
05eb4     04 D1 B1 FD | 	call	#__system___string_cmp
05eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ebc     CC 01 90 AD |  if_e	jmp	#LR__0489
05ec0     98 01 00 FF 
05ec4     6B 14 06 F6 | 	mov	arg02, ##@LR__5502
05ec8     13 13 02 F6 | 	mov	arg01, local01
05ecc     EC D0 B1 FD | 	call	#__system___string_cmp
05ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed4     BC 01 90 AD |  if_e	jmp	#LR__0490
05ed8     98 01 00 FF 
05edc     71 14 06 F6 | 	mov	arg02, ##@LR__5503
05ee0     13 13 02 F6 | 	mov	arg01, local01
05ee4     D4 D0 B1 FD | 	call	#__system___string_cmp
05ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
05eec     AC 01 90 AD |  if_e	jmp	#LR__0491
05ef0     98 01 00 FF 
05ef4     77 14 06 F6 | 	mov	arg02, ##@LR__5504
05ef8     13 13 02 F6 | 	mov	arg01, local01
05efc     BC D0 B1 FD | 	call	#__system___string_cmp
05f00     00 FA 0D F2 | 	cmp	result1, #0 wz
05f04     9C 01 90 AD |  if_e	jmp	#LR__0492
05f08     98 01 00 FF 
05f0c     7C 14 06 F6 | 	mov	arg02, ##@LR__5505
05f10     13 13 02 F6 | 	mov	arg01, local01
05f14     A4 D0 B1 FD | 	call	#__system___string_cmp
05f18     00 FA 0D F2 | 	cmp	result1, #0 wz
05f1c     8C 01 90 AD |  if_e	jmp	#LR__0493
05f20     98 01 00 FF 
05f24     80 14 06 F6 | 	mov	arg02, ##@LR__5506
05f28     13 13 02 F6 | 	mov	arg01, local01
05f2c     8C D0 B1 FD | 	call	#__system___string_cmp
05f30     00 FA 0D F2 | 	cmp	result1, #0 wz
05f34     7C 01 90 AD |  if_e	jmp	#LR__0494
05f38     98 01 00 FF 
05f3c     84 14 06 F6 | 	mov	arg02, ##@LR__5507
05f40     13 13 02 F6 | 	mov	arg01, local01
05f44     74 D0 B1 FD | 	call	#__system___string_cmp
05f48     00 FA 0D F2 | 	cmp	result1, #0 wz
05f4c     6C 01 90 AD |  if_e	jmp	#LR__0495
05f50     70 01 90 FD | 	jmp	#LR__0496
05f54                 | LR__0450
05f54     9E FA 05 F6 | 	mov	result1, #158
05f58     6C 01 90 FD | 	jmp	#LR__0497
05f5c                 | LR__0451
05f5c     85 FA 05 F6 | 	mov	result1, #133
05f60     64 01 90 FD | 	jmp	#LR__0497
05f64                 | LR__0452
05f64     9B FA 05 F6 | 	mov	result1, #155
05f68     5C 01 90 FD | 	jmp	#LR__0497
05f6c                 | LR__0453
05f6c     9B FA 05 F6 | 	mov	result1, #155
05f70     54 01 90 FD | 	jmp	#LR__0497
05f74                 | LR__0454
05f74     A7 FA 05 F6 | 	mov	result1, #167
05f78     4C 01 90 FD | 	jmp	#LR__0497
05f7c                 | LR__0455
05f7c     84 FA 05 F6 | 	mov	result1, #132
05f80     44 01 90 FD | 	jmp	#LR__0497
05f84                 | LR__0456
05f84     86 FA 05 F6 | 	mov	result1, #134
05f88     3C 01 90 FD | 	jmp	#LR__0497
05f8c                 | LR__0457
05f8c     A2 FA 05 F6 | 	mov	result1, #162
05f90     34 01 90 FD | 	jmp	#LR__0497
05f94                 | LR__0458
05f94     9F FA 05 F6 | 	mov	result1, #159
05f98     2C 01 90 FD | 	jmp	#LR__0497
05f9c                 | LR__0459
05f9c     82 FA 05 F6 | 	mov	result1, #130
05fa0     24 01 90 FD | 	jmp	#LR__0497
05fa4                 | LR__0460
05fa4     99 FA 05 F6 | 	mov	result1, #153
05fa8     1C 01 90 FD | 	jmp	#LR__0497
05fac                 | LR__0461
05fac     C5 FA 05 F6 | 	mov	result1, #197
05fb0     14 01 90 FD | 	jmp	#LR__0497
05fb4                 | LR__0462
05fb4     C5 FA 05 F6 | 	mov	result1, #197
05fb8     0C 01 90 FD | 	jmp	#LR__0497
05fbc                 | LR__0463
05fbc     9C FA 05 F6 | 	mov	result1, #156
05fc0     04 01 90 FD | 	jmp	#LR__0497
05fc4                 | LR__0464
05fc4     6F FA 05 F6 | 	mov	result1, #111
05fc8     FC 00 90 FD | 	jmp	#LR__0497
05fcc                 | LR__0465
05fcc     6F FA 05 F6 | 	mov	result1, #111
05fd0     F4 00 90 FD | 	jmp	#LR__0497
05fd4                 | LR__0466
05fd4     93 FA 05 F6 | 	mov	result1, #147
05fd8     EC 00 90 FD | 	jmp	#LR__0497
05fdc                 | LR__0467
05fdc     94 FA 05 F6 | 	mov	result1, #148
05fe0     E4 00 90 FD | 	jmp	#LR__0497
05fe4                 | LR__0468
05fe4     62 FA 05 F6 | 	mov	result1, #98
05fe8     DC 00 90 FD | 	jmp	#LR__0497
05fec                 | LR__0469
05fec     A3 FA 05 F6 | 	mov	result1, #163
05ff0     D4 00 90 FD | 	jmp	#LR__0497
05ff4                 | LR__0470
05ff4     9D FA 05 F6 | 	mov	result1, #157
05ff8     CC 00 90 FD | 	jmp	#LR__0497
05ffc                 | LR__0471
05ffc     8A FA 05 F6 | 	mov	result1, #138
06000     C4 00 90 FD | 	jmp	#LR__0497
06004                 | LR__0472
06004     A4 FA 05 F6 | 	mov	result1, #164
06008     BC 00 90 FD | 	jmp	#LR__0497
0600c                 | LR__0473
0600c     A8 FA 05 F6 | 	mov	result1, #168
06010     B4 00 90 FD | 	jmp	#LR__0497
06014                 | LR__0474
06014     AD FA 05 F6 | 	mov	result1, #173
06018     AC 00 90 FD | 	jmp	#LR__0497
0601c                 | LR__0475
0601c     9A FA 05 F6 | 	mov	result1, #154
06020     A4 00 90 FD | 	jmp	#LR__0497
06024                 | LR__0476
06024     A6 FA 05 F6 | 	mov	result1, #166
06028     9C 00 90 FD | 	jmp	#LR__0497
0602c                 | LR__0477
0602c     66 FA 05 F6 | 	mov	result1, #102
06030     94 00 90 FD | 	jmp	#LR__0497
06034                 | LR__0478
06034     67 FA 05 F6 | 	mov	result1, #103
06038     8C 00 90 FD | 	jmp	#LR__0497
0603c                 | LR__0479
0603c     64 FA 05 F6 | 	mov	result1, #100
06040     84 00 90 FD | 	jmp	#LR__0497
06044                 | LR__0480
06044     65 FA 05 F6 | 	mov	result1, #101
06048     7C 00 90 FD | 	jmp	#LR__0497
0604c                 | LR__0481
0604c     98 FA 05 F6 | 	mov	result1, #152
06050     74 00 90 FD | 	jmp	#LR__0497
06054                 | LR__0482
06054     7B FA 05 F6 | 	mov	result1, #123
06058     6C 00 90 FD | 	jmp	#LR__0497
0605c                 | LR__0483
0605c     76 FA 05 F6 | 	mov	result1, #118
06060     64 00 90 FD | 	jmp	#LR__0497
06064                 | LR__0484
06064     A5 FA 05 F6 | 	mov	result1, #165
06068     5C 00 90 FD | 	jmp	#LR__0497
0606c                 | LR__0485
0606c     7A FA 05 F6 | 	mov	result1, #122
06070     54 00 90 FD | 	jmp	#LR__0497
06074                 | LR__0486
06074     BF FA 05 F6 | 	mov	result1, #191
06078     4C 00 90 FD | 	jmp	#LR__0497
0607c                 | LR__0487
0607c     54 FA 05 F6 | 	mov	result1, #84
06080     44 00 90 FD | 	jmp	#LR__0497
06084                 | LR__0488
06084     6B FA 05 F6 | 	mov	result1, #107
06088     3C 00 90 FD | 	jmp	#LR__0497
0608c                 | LR__0489
0608c     87 FA 05 F6 | 	mov	result1, #135
06090     34 00 90 FD | 	jmp	#LR__0497
06094                 | LR__0490
06094     6A FA 05 F6 | 	mov	result1, #106
06098     2C 00 90 FD | 	jmp	#LR__0497
0609c                 | LR__0491
0609c     6E FA 05 F6 | 	mov	result1, #110
060a0     24 00 90 FD | 	jmp	#LR__0497
060a4                 | LR__0492
060a4     A1 FA 05 F6 | 	mov	result1, #161
060a8     1C 00 90 FD | 	jmp	#LR__0497
060ac                 | LR__0493
060ac     83 FA 05 F6 | 	mov	result1, #131
060b0     14 00 90 FD | 	jmp	#LR__0497
060b4                 | LR__0494
060b4     A0 FA 05 F6 | 	mov	result1, #160
060b8     0C 00 90 FD | 	jmp	#LR__0497
060bc                 | LR__0495
060bc     9B FA 05 F6 | 	mov	result1, #155
060c0     04 00 90 FD | 	jmp	#LR__0497
060c4                 | LR__0496
060c4     00 FA 05 F6 | 	mov	result1, #0
060c8                 | LR__0497
060c8     A7 F0 03 F6 | 	mov	ptra, fp
060cc     B2 00 A0 FD | 	call	#popregs_
060d0                 | _isfunction_ret
060d0     2D 00 64 FD | 	ret
060d4                 | 
060d4                 | ' 
060d4                 | ' ' Check if the part is a name
060d4                 | ' 
060d4                 | ' function isname(s as string) as boolean
060d4                 | _isname
060d4     0D 4A 05 F6 | 	mov	COUNT_, #13
060d8     A8 00 A0 FD | 	call	#pushregs_
060dc     09 27 02 F6 | 	mov	local01, arg01
060e0     09 29 02 F6 | 	mov	local02, arg01
060e4     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
060e8                 | LR__0500
060e8     14 FB C9 FA | 	rdbyte	result1, local02 wz
060ec     01 28 06 51 |  if_ne	add	local02, #1
060f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
060f4                 | LR__0501
060f4     09 29 82 F1 | 	sub	local02, arg01
060f8     14 FB 01 F6 | 	mov	result1, local02
060fc     FD 2A 0A F6 | 	mov	local03, result1 wz
06100     00 FA 05 A6 |  if_e	mov	result1, #0
06104     34 02 90 AD |  if_e	jmp	#LR__0513
06108     13 13 02 F6 | 	mov	arg01, local01
0610c     01 14 06 F6 | 	mov	arg02, #1
06110     01 16 06 F6 | 	mov	arg03, #1
06114     10 F0 B1 FD | 	call	#__system__Mid_S
06118     FD 2C 02 F6 | 	mov	local04, result1
0611c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0611c     98 01 00 FF 
06120     8B 14 06 F6 | 	mov	arg02, ##@LR__5508
06124     16 13 02 F6 | 	mov	arg01, local04
06128     90 CE B1 FD | 	call	#__system___string_cmp
0612c     00 FA 55 F2 | 	cmps	result1, #0 wc
06130     18 00 90 CD |  if_b	jmp	#LR__0502
06134     98 01 00 FF 
06138     8D 14 06 F6 | 	mov	arg02, ##@LR__5509
0613c     16 13 02 F6 | 	mov	arg01, local04
06140     78 CE B1 FD | 	call	#__system___string_cmp
06144     01 FA 55 F2 | 	cmps	result1, #1 wc
06148     1C 00 90 CD |  if_b	jmp	#LR__0503
0614c                 | LR__0502
0614c     98 01 00 FF 
06150     8F 14 06 F6 | 	mov	arg02, ##@LR__5510
06154     16 13 02 F6 | 	mov	arg01, local04
06158     60 CE B1 FD | 	call	#__system___string_cmp
0615c     00 FA 0D F2 | 	cmp	result1, #0 wz
06160     00 FA 05 56 |  if_ne	mov	result1, #0
06164     D4 01 90 5D |  if_ne	jmp	#LR__0513
06168                 | LR__0503
06168                 | ' if l>2 then 
06168     03 2A 56 F2 | 	cmps	local03, #3 wc
0616c     C8 01 90 CD |  if_b	jmp	#LR__0512
06170                 | '   for i=2 to l
06170     02 2E 06 F6 | 	mov	local05, #2
06174     15 31 02 F6 | 	mov	local06, local03
06178     01 30 06 F1 | 	add	local06, #1
0617c                 | LR__0504
0617c     18 2F 52 F2 | 	cmps	local05, local06 wc
06180     B4 01 90 3D |  if_ae	jmp	#LR__0511
06184     13 13 02 F6 | 	mov	arg01, local01
06188     17 15 02 F6 | 	mov	arg02, local05
0618c     01 16 06 F6 | 	mov	arg03, #1
06190     94 EF B1 FD | 	call	#__system__Mid_S
06194     FD 2C 02 F6 | 	mov	local04, result1
06198                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06198     15 2F 52 F2 | 	cmps	local05, local03 wc
0619c     9C 00 90 3D |  if_ae	jmp	#LR__0507
061a0     98 01 00 FF 
061a4     91 14 06 F6 | 	mov	arg02, ##@LR__5511
061a8     16 13 02 F6 | 	mov	arg01, local04
061ac     0C CE B1 FD | 	call	#__system___string_cmp
061b0     00 FA 55 F2 | 	cmps	result1, #0 wc
061b4     18 00 90 CD |  if_b	jmp	#LR__0505
061b8     98 01 00 FF 
061bc     93 14 06 F6 | 	mov	arg02, ##@LR__5512
061c0     16 13 02 F6 | 	mov	arg01, local04
061c4     F4 CD B1 FD | 	call	#__system___string_cmp
061c8     01 FA 55 F2 | 	cmps	result1, #1 wc
061cc     6C 00 90 CD |  if_b	jmp	#LR__0507
061d0                 | LR__0505
061d0     98 01 00 FF 
061d4     95 14 06 F6 | 	mov	arg02, ##@LR__5513
061d8     16 13 02 F6 | 	mov	arg01, local04
061dc     DC CD B1 FD | 	call	#__system___string_cmp
061e0     00 FA 55 F2 | 	cmps	result1, #0 wc
061e4     18 00 90 CD |  if_b	jmp	#LR__0506
061e8     98 01 00 FF 
061ec     97 14 06 F6 | 	mov	arg02, ##@LR__5514
061f0     16 13 02 F6 | 	mov	arg01, local04
061f4     C4 CD B1 FD | 	call	#__system___string_cmp
061f8     01 FA 55 F2 | 	cmps	result1, #1 wc
061fc     3C 00 90 CD |  if_b	jmp	#LR__0507
06200                 | LR__0506
06200     98 01 00 FF 
06204     99 32 06 F6 | 	mov	local07, ##@LR__5515
06208     16 13 02 F6 | 	mov	arg01, local04
0620c     19 15 02 F6 | 	mov	arg02, local07
06210     A8 CD B1 FD | 	call	#__system___string_cmp
06214     00 FA 0D F2 | 	cmp	result1, #0 wz
06218     20 00 90 AD |  if_e	jmp	#LR__0507
0621c     98 01 00 FF 
06220     9B 34 06 F6 | 	mov	local08, ##@LR__5516
06224     16 13 02 F6 | 	mov	arg01, local04
06228     1A 15 02 F6 | 	mov	arg02, local08
0622c     8C CD B1 FD | 	call	#__system___string_cmp
06230     FD 36 0A F6 | 	mov	local09, result1 wz
06234     00 FA 05 56 |  if_ne	mov	result1, #0
06238     00 01 90 5D |  if_ne	jmp	#LR__0513
0623c                 | LR__0507
0623c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0623c     15 2F 0A F2 | 	cmp	local05, local03 wz
06240     EC 00 90 5D |  if_ne	jmp	#LR__0510
06244     98 01 00 FF 
06248     9D 38 06 F6 | 	mov	local10, ##@LR__5517
0624c     16 13 02 F6 | 	mov	arg01, local04
06250     1C 15 02 F6 | 	mov	arg02, local10
06254     64 CD B1 FD | 	call	#__system___string_cmp
06258     FD 3A 02 F6 | 	mov	local11, result1
0625c     00 3A 56 F2 | 	cmps	local11, #0 wc
06260     1C 00 90 CD |  if_b	jmp	#LR__0508
06264     98 01 00 FF 
06268     9F 14 06 F6 | 	mov	arg02, ##@LR__5518
0626c     16 13 02 F6 | 	mov	arg01, local04
06270     48 CD B1 FD | 	call	#__system___string_cmp
06274     FD 38 02 F6 | 	mov	local10, result1
06278     01 38 56 F2 | 	cmps	local10, #1 wc
0627c     B0 00 90 CD |  if_b	jmp	#LR__0510
06280                 | LR__0508
06280     98 01 00 FF 
06284     A1 14 06 F6 | 	mov	arg02, ##@LR__5519
06288     16 13 02 F6 | 	mov	arg01, local04
0628c     2C CD B1 FD | 	call	#__system___string_cmp
06290     00 FA 55 F2 | 	cmps	result1, #0 wc
06294     1C 00 90 CD |  if_b	jmp	#LR__0509
06298     98 01 00 FF 
0629c     A3 36 06 F6 | 	mov	local09, ##@LR__5520
062a0     16 13 02 F6 | 	mov	arg01, local04
062a4     1B 15 02 F6 | 	mov	arg02, local09
062a8     10 CD B1 FD | 	call	#__system___string_cmp
062ac     01 FA 55 F2 | 	cmps	result1, #1 wc
062b0     7C 00 90 CD |  if_b	jmp	#LR__0510
062b4                 | LR__0509
062b4     98 01 00 FF 
062b8     A5 36 06 F6 | 	mov	local09, ##@LR__5521
062bc     16 13 02 F6 | 	mov	arg01, local04
062c0     1B 15 02 F6 | 	mov	arg02, local09
062c4     F4 CC B1 FD | 	call	#__system___string_cmp
062c8     00 FA 4D F2 | 	cmps	result1, #0 wz
062cc     60 00 90 AD |  if_e	jmp	#LR__0510
062d0     98 01 00 FF 
062d4     A7 34 06 F6 | 	mov	local08, ##@LR__5522
062d8     16 13 02 F6 | 	mov	arg01, local04
062dc     1A 15 02 F6 | 	mov	arg02, local08
062e0     D8 CC B1 FD | 	call	#__system___string_cmp
062e4     FD 36 0A F6 | 	mov	local09, result1 wz
062e8     44 00 90 AD |  if_e	jmp	#LR__0510
062ec     98 01 00 FF 
062f0     A9 3C 06 F6 | 	mov	local12, ##@LR__5523
062f4     1E 35 02 F6 | 	mov	local08, local12
062f8     16 13 02 F6 | 	mov	arg01, local04
062fc     1A 15 02 F6 | 	mov	arg02, local08
06300     B8 CC B1 FD | 	call	#__system___string_cmp
06304     FD 32 0A F6 | 	mov	local07, result1 wz
06308     24 00 90 AD |  if_e	jmp	#LR__0510
0630c     98 01 00 FF 
06310     AB 3E 06 F6 | 	mov	local13, ##@LR__5524
06314     1F 3D 02 F6 | 	mov	local12, local13
06318     16 13 02 F6 | 	mov	arg01, local04
0631c     1E 15 02 F6 | 	mov	arg02, local12
06320     98 CC B1 FD | 	call	#__system___string_cmp
06324     FD 34 0A F6 | 	mov	local08, result1 wz
06328     00 FA 05 56 |  if_ne	mov	result1, #0
0632c     0C 00 90 5D |  if_ne	jmp	#LR__0513
06330                 | LR__0510
06330     01 2E 06 F1 | 	add	local05, #1
06334     44 FE 9F FD | 	jmp	#LR__0504
06338                 | LR__0511
06338                 | LR__0512
06338                 | ' return true
06338     01 FA 65 F6 | 	neg	result1, #1
0633c                 | LR__0513
0633c     A7 F0 03 F6 | 	mov	ptra, fp
06340     B2 00 A0 FD | 	call	#popregs_
06344                 | _isname_ret
06344     2D 00 64 FD | 	ret
06348                 | 
06348                 | ' 
06348                 | ' ' Check if the part is a number.  
06348                 | ' 
06348                 | ' function isnum(s as string) as boolean 
06348                 | _isnum
06348     13 4A 05 F6 | 	mov	COUNT_, #19
0634c     A8 00 A0 FD | 	call	#pushregs_
06350     09 27 02 F6 | 	mov	local01, arg01
06354     00 28 06 F6 | 	mov	local02, #0
06358     00 2A 06 F6 | 	mov	local03, #0
0635c     13 13 02 F6 | 	mov	arg01, local01
06360     09 2D 02 F6 | 	mov	local04, arg01
06364     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06368                 | LR__0520
06368     16 FB C9 FA | 	rdbyte	result1, local04 wz
0636c     01 2C 06 51 |  if_ne	add	local04, #1
06370     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06374                 | LR__0521
06374     09 2D 82 F1 | 	sub	local04, arg01
06378     16 FB 01 F6 | 	mov	result1, local04
0637c     FD 2E 0A F6 | 	mov	local05, result1 wz
06380     00 FA 05 A6 |  if_e	mov	result1, #0
06384     A0 03 90 AD |  if_e	jmp	#LR__0536
06388     13 13 02 F6 | 	mov	arg01, local01
0638c     01 14 06 F6 | 	mov	arg02, #1
06390     01 16 06 F6 | 	mov	arg03, #1
06394     90 ED B1 FD | 	call	#__system__Mid_S
06398     FD 30 02 F6 | 	mov	local06, result1
0639c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0639c     98 01 00 FF 
063a0     AD 14 06 F6 | 	mov	arg02, ##@LR__5525
063a4     18 13 02 F6 | 	mov	arg01, local06
063a8     10 CC B1 FD | 	call	#__system___string_cmp
063ac     00 FA 55 F2 | 	cmps	result1, #0 wc
063b0     1C 00 90 CD |  if_b	jmp	#LR__0522
063b4     98 01 00 FF 
063b8     AF 32 06 F6 | 	mov	local07, ##@LR__5526
063bc     18 13 02 F6 | 	mov	arg01, local06
063c0     19 15 02 F6 | 	mov	arg02, local07
063c4     F4 CB B1 FD | 	call	#__system___string_cmp
063c8     01 FA 55 F2 | 	cmps	result1, #1 wc
063cc     84 00 90 CD |  if_b	jmp	#LR__0523
063d0                 | LR__0522
063d0     98 01 00 FF 
063d4     B1 34 06 F6 | 	mov	local08, ##@LR__5527
063d8     1A 33 02 F6 | 	mov	local07, local08
063dc     18 13 02 F6 | 	mov	arg01, local06
063e0     19 15 02 F6 | 	mov	arg02, local07
063e4     D4 CB B1 FD | 	call	#__system___string_cmp
063e8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ec     64 00 90 AD |  if_e	jmp	#LR__0523
063f0     98 01 00 FF 
063f4     B3 36 06 F6 | 	mov	local09, ##@LR__5528
063f8     1B 35 02 F6 | 	mov	local08, local09
063fc     18 13 02 F6 | 	mov	arg01, local06
06400     1A 15 02 F6 | 	mov	arg02, local08
06404     B4 CB B1 FD | 	call	#__system___string_cmp
06408     FD 32 0A F6 | 	mov	local07, result1 wz
0640c     44 00 90 AD |  if_e	jmp	#LR__0523
06410     98 01 00 FF 
06414     B5 38 06 F6 | 	mov	local10, ##@LR__5529
06418     1C 37 02 F6 | 	mov	local09, local10
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     1B 15 02 F6 | 	mov	arg02, local09
06424     94 CB B1 FD | 	call	#__system___string_cmp
06428     FD 34 0A F6 | 	mov	local08, result1 wz
0642c     24 00 90 AD |  if_e	jmp	#LR__0523
06430     98 01 00 FF 
06434     B7 3A 06 F6 | 	mov	local11, ##@LR__5530
06438     1D 39 02 F6 | 	mov	local10, local11
0643c     18 13 02 F6 | 	mov	arg01, local06
06440     1C 15 02 F6 | 	mov	arg02, local10
06444     74 CB B1 FD | 	call	#__system___string_cmp
06448     FD 36 0A F6 | 	mov	local09, result1 wz
0644c     00 FA 05 56 |  if_ne	mov	result1, #0
06450     D4 02 90 5D |  if_ne	jmp	#LR__0536
06454                 | LR__0523
06454                 | ' if m$="." then ds=1
06454     98 01 00 FF 
06458     B9 14 06 F6 | 	mov	arg02, ##@LR__5531
0645c     18 13 02 F6 | 	mov	arg01, local06
06460     58 CB B1 FD | 	call	#__system___string_cmp
06464     00 FA 0D F2 | 	cmp	result1, #0 wz
06468     01 28 06 A6 |  if_e	mov	local02, #1
0646c                 | ' if m$="$" then hex=1 else hex=0
0646c     98 01 00 FF 
06470     BB 14 06 F6 | 	mov	arg02, ##@LR__5532
06474     18 13 02 F6 | 	mov	arg01, local06
06478     40 CB B1 FD | 	call	#__system___string_cmp
0647c     00 FA 0D F2 | 	cmp	result1, #0 wz
06480     01 3C 06 A6 |  if_e	mov	local12, #1
06484     00 3C 06 56 |  if_ne	mov	local12, #0
06488                 | ' if m$="%" then bin=1 else bin=0
06488     98 01 00 FF 
0648c     BD 14 06 F6 | 	mov	arg02, ##@LR__5533
06490     18 13 02 F6 | 	mov	arg01, local06
06494     24 CB B1 FD | 	call	#__system___string_cmp
06498     00 FA 0D F2 | 	cmp	result1, #0 wz
0649c     01 3E 06 A6 |  if_e	mov	local13, #1
064a0     00 3E 06 56 |  if_ne	mov	local13, #0
064a4                 | ' if l>1 then 
064a4     02 2E 56 F2 | 	cmps	local05, #2 wc
064a8     78 02 90 CD |  if_b	jmp	#LR__0535
064ac                 | '   for i=2 to l
064ac     02 40 06 F6 | 	mov	local14, #2
064b0     17 43 02 F6 | 	mov	local15, local05
064b4     01 42 06 F1 | 	add	local15, #1
064b8                 | LR__0524
064b8     21 41 52 F2 | 	cmps	local14, local15 wc
064bc     64 02 90 3D |  if_ae	jmp	#LR__0534
064c0     13 13 02 F6 | 	mov	arg01, local01
064c4     20 15 02 F6 | 	mov	arg02, local14
064c8     01 16 06 F6 | 	mov	arg03, #1
064cc     58 EC B1 FD | 	call	#__system__Mid_S
064d0     FD 30 02 F6 | 	mov	local06, result1
064d4     00 44 06 F6 | 	mov	local16, #0
064d8                 | '     m$=mid$(s,i,1) : b=false
064d8                 | '     if m$>="0" andalso m$<="9" then b=true  
064d8     98 01 00 FF 
064dc     BF 14 06 F6 | 	mov	arg02, ##@LR__5534
064e0     18 13 02 F6 | 	mov	arg01, local06
064e4     D4 CA B1 FD | 	call	#__system___string_cmp
064e8     00 FA 55 F2 | 	cmps	result1, #0 wc
064ec     1C 00 90 CD |  if_b	jmp	#LR__0525
064f0     98 01 00 FF 
064f4     C1 32 06 F6 | 	mov	local07, ##@LR__5535
064f8     18 13 02 F6 | 	mov	arg01, local06
064fc     19 15 02 F6 | 	mov	arg02, local07
06500     B8 CA B1 FD | 	call	#__system___string_cmp
06504     01 FA 55 F2 | 	cmps	result1, #1 wc
06508     01 44 66 C6 |  if_b	neg	local16, #1
0650c                 | LR__0525
0650c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0650c     98 01 00 FF 
06510     C3 14 06 F6 | 	mov	arg02, ##@LR__5536
06514     18 13 02 F6 | 	mov	arg01, local06
06518     A0 CA B1 FD | 	call	#__system___string_cmp
0651c     00 FA 0D F2 | 	cmp	result1, #0 wz
06520     7C 00 90 AD |  if_e	jmp	#LR__0526
06524     98 01 00 FF 
06528     C5 32 06 F6 | 	mov	local07, ##@LR__5537
0652c     18 13 02 F6 | 	mov	arg01, local06
06530     19 15 02 F6 | 	mov	arg02, local07
06534     84 CA B1 FD | 	call	#__system___string_cmp
06538     00 FA 0D F2 | 	cmp	result1, #0 wz
0653c     60 00 90 AD |  if_e	jmp	#LR__0526
06540     98 01 00 FF 
06544     C7 34 06 F6 | 	mov	local08, ##@LR__5538
06548     1A 33 02 F6 | 	mov	local07, local08
0654c     18 13 02 F6 | 	mov	arg01, local06
06550     19 15 02 F6 | 	mov	arg02, local07
06554     64 CA B1 FD | 	call	#__system___string_cmp
06558     00 FA 0D F2 | 	cmp	result1, #0 wz
0655c     40 00 90 AD |  if_e	jmp	#LR__0526
06560     98 01 00 FF 
06564     C9 36 06 F6 | 	mov	local09, ##@LR__5539
06568     1B 35 02 F6 | 	mov	local08, local09
0656c     18 13 02 F6 | 	mov	arg01, local06
06570     1A 15 02 F6 | 	mov	arg02, local08
06574     44 CA B1 FD | 	call	#__system___string_cmp
06578     FD 32 0A F6 | 	mov	local07, result1 wz
0657c     20 00 90 AD |  if_e	jmp	#LR__0526
06580     98 01 00 FF 
06584     CB 38 06 F6 | 	mov	local10, ##@LR__5540
06588     1C 37 02 F6 | 	mov	local09, local10
0658c     18 13 02 F6 | 	mov	arg01, local06
06590     1B 15 02 F6 | 	mov	arg02, local09
06594     24 CA B1 FD | 	call	#__system___string_cmp
06598     FD 34 0A F6 | 	mov	local08, result1 wz
0659c     04 00 90 5D |  if_ne	jmp	#LR__0527
065a0                 | LR__0526
065a0     01 44 66 F6 | 	neg	local16, #1
065a4                 | LR__0527
065a4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
065a4     01 3C 0E F2 | 	cmp	local12, #1 wz
065a8     34 00 90 5D |  if_ne	jmp	#LR__0528
065ac     98 01 00 FF 
065b0     CD 14 06 F6 | 	mov	arg02, ##@LR__5541
065b4     18 13 02 F6 | 	mov	arg01, local06
065b8     00 CA B1 FD | 	call	#__system___string_cmp
065bc     00 FA 55 F2 | 	cmps	result1, #0 wc
065c0     1C 00 90 CD |  if_b	jmp	#LR__0528
065c4     98 01 00 FF 
065c8     CF 32 06 F6 | 	mov	local07, ##@LR__5542
065cc     18 13 02 F6 | 	mov	arg01, local06
065d0     19 15 02 F6 | 	mov	arg02, local07
065d4     E4 C9 B1 FD | 	call	#__system___string_cmp
065d8     01 FA 55 F2 | 	cmps	result1, #1 wc
065dc     01 44 66 C6 |  if_b	neg	local16, #1
065e0                 | LR__0528
065e0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
065e0     01 3E 0E F2 | 	cmp	local13, #1 wz
065e4     58 00 90 5D |  if_ne	jmp	#LR__0530
065e8     98 01 00 FF 
065ec     D1 14 06 F6 | 	mov	arg02, ##@LR__5543
065f0     18 13 02 F6 | 	mov	arg01, local06
065f4     C4 C9 B1 FD | 	call	#__system___string_cmp
065f8     00 FA 55 F2 | 	cmps	result1, #0 wc
065fc     1C 00 90 CD |  if_b	jmp	#LR__0529
06600     98 01 00 FF 
06604     D3 32 06 F6 | 	mov	local07, ##@LR__5544
06608     18 13 02 F6 | 	mov	arg01, local06
0660c     19 15 02 F6 | 	mov	arg02, local07
06610     A8 C9 B1 FD | 	call	#__system___string_cmp
06614     01 FA 55 F2 | 	cmps	result1, #1 wc
06618     24 00 90 CD |  if_b	jmp	#LR__0530
0661c                 | LR__0529
0661c     98 01 00 FF 
06620     D5 34 06 F6 | 	mov	local08, ##@LR__5545
06624     1A 33 02 F6 | 	mov	local07, local08
06628     18 13 02 F6 | 	mov	arg01, local06
0662c     19 15 02 F6 | 	mov	arg02, local07
06630     88 C9 B1 FD | 	call	#__system___string_cmp
06634     00 FA 0D F2 | 	cmp	result1, #0 wz
06638     00 FA 05 56 |  if_ne	mov	result1, #0
0663c     E8 00 90 5D |  if_ne	jmp	#LR__0536
06640                 | LR__0530
06640                 | '     if not b then return false
06640     22 45 22 F6 | 	not	local16, local16
06644     00 44 0E F2 | 	cmp	local16, #0 wz
06648     00 FA 05 56 |  if_ne	mov	result1, #0
0664c     D8 00 90 5D |  if_ne	jmp	#LR__0536
06650                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06650     98 01 00 FF 
06654     D7 14 06 F6 | 	mov	arg02, ##@LR__5546
06658     18 13 02 F6 | 	mov	arg01, local06
0665c     5C C9 B1 FD | 	call	#__system___string_cmp
06660     00 FA 0D F2 | 	cmp	result1, #0 wz
06664     3C 00 90 5D |  if_ne	jmp	#LR__0531
06668     20 15 02 F6 | 	mov	arg02, local14
0666c     01 14 86 F1 | 	sub	arg02, #1
06670     13 13 02 F6 | 	mov	arg01, local01
06674     01 16 06 F6 | 	mov	arg03, #1
06678     AC EA B1 FD | 	call	#__system__Mid_S
0667c     FD 12 02 F6 | 	mov	arg01, result1
06680     9C EC B1 FD | 	call	#__system__LCase_S
06684     FD 12 02 F6 | 	mov	arg01, result1
06688     98 01 00 FF 
0668c     D9 32 06 F6 | 	mov	local07, ##@LR__5547
06690     19 15 02 F6 | 	mov	arg02, local07
06694     24 C9 B1 FD | 	call	#__system___string_cmp
06698     00 FA 0D F2 | 	cmp	result1, #0 wz
0669c     00 FA 05 56 |  if_ne	mov	result1, #0
066a0     84 00 90 5D |  if_ne	jmp	#LR__0536
066a4                 | LR__0531
066a4                 | '     if m$="." then ds+=1: if ds>1 then return false
066a4     98 01 00 FF 
066a8     DB 14 06 F6 | 	mov	arg02, ##@LR__5548
066ac     18 13 02 F6 | 	mov	arg01, local06
066b0     08 C9 B1 FD | 	call	#__system___string_cmp
066b4     00 FA 0D F2 | 	cmp	result1, #0 wz
066b8     01 28 06 A1 |  if_e	add	local02, #1
066bc     02 28 56 A2 |  if_e	cmps	local02, #2 wc
066c0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
066c4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0536
066c8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
066c8     98 01 00 FF 
066cc     DD 46 06 F6 | 	mov	local17, ##@LR__5549
066d0     23 49 02 F6 | 	mov	local18, local17
066d4     18 13 02 F6 | 	mov	arg01, local06
066d8     24 15 02 F6 | 	mov	arg02, local18
066dc     DC C8 B1 FD | 	call	#__system___string_cmp
066e0     FD 4A 0A F6 | 	mov	local19, result1 wz
066e4     20 00 90 AD |  if_e	jmp	#LR__0532
066e8     98 01 00 FF 
066ec     DF 32 06 F6 | 	mov	local07, ##@LR__5550
066f0     19 47 02 F6 | 	mov	local17, local07
066f4     18 13 02 F6 | 	mov	arg01, local06
066f8     23 15 02 F6 | 	mov	arg02, local17
066fc     BC C8 B1 FD | 	call	#__system___string_cmp
06700     FD 48 0A F6 | 	mov	local18, result1 wz
06704     14 00 90 5D |  if_ne	jmp	#LR__0533
06708                 | LR__0532
06708     01 2A 06 F1 | 	add	local03, #1
0670c     00 3C 0E F2 | 	cmp	local12, #0 wz
06710     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06714     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06718     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0536
0671c                 | LR__0533
0671c     01 40 06 F1 | 	add	local14, #1
06720     94 FD 9F FD | 	jmp	#LR__0524
06724                 | LR__0534
06724                 | LR__0535
06724                 | ' return true
06724     01 FA 65 F6 | 	neg	result1, #1
06728                 | LR__0536
06728     A7 F0 03 F6 | 	mov	ptra, fp
0672c     B2 00 A0 FD | 	call	#popregs_
06730                 | _isnum_ret
06730     2D 00 64 FD | 	ret
06734                 | 
06734                 | '   
06734                 | ' ' Check if the part is an integer number.    
06734                 | '   
06734                 | ' function isint(s as string) as boolean
06734                 | _isint
06734     0E 4A 05 F6 | 	mov	COUNT_, #14
06738     A8 00 A0 FD | 	call	#pushregs_
0673c     09 27 02 F6 | 	mov	local01, arg01
06740     09 29 02 F6 | 	mov	local02, arg01
06744     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
06748                 | LR__0540
06748     14 FB C9 FA | 	rdbyte	result1, local02 wz
0674c     01 28 06 51 |  if_ne	add	local02, #1
06750     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06754                 | LR__0541
06754     09 29 82 F1 | 	sub	local02, arg01
06758     14 FB 01 F6 | 	mov	result1, local02
0675c     FD 2A 0A F6 | 	mov	local03, result1 wz
06760     00 FA 05 A6 |  if_e	mov	result1, #0
06764     64 02 90 AD |  if_e	jmp	#LR__0554
06768     13 13 02 F6 | 	mov	arg01, local01
0676c     01 14 06 F6 | 	mov	arg02, #1
06770     01 16 06 F6 | 	mov	arg03, #1
06774     B0 E9 B1 FD | 	call	#__system__Mid_S
06778     FD 2C 02 F6 | 	mov	local04, result1
0677c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0677c     98 01 00 FF 
06780     E1 14 06 F6 | 	mov	arg02, ##@LR__5551
06784     16 13 02 F6 | 	mov	arg01, local04
06788     30 C8 B1 FD | 	call	#__system___string_cmp
0678c     00 FA 55 F2 | 	cmps	result1, #0 wc
06790     1C 00 90 CD |  if_b	jmp	#LR__0542
06794     98 01 00 FF 
06798     E3 2E 06 F6 | 	mov	local05, ##@LR__5552
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     17 15 02 F6 | 	mov	arg02, local05
067a4     14 C8 B1 FD | 	call	#__system___string_cmp
067a8     01 FA 55 F2 | 	cmps	result1, #1 wc
067ac     64 00 90 CD |  if_b	jmp	#LR__0543
067b0                 | LR__0542
067b0     98 01 00 FF 
067b4     E5 30 06 F6 | 	mov	local06, ##@LR__5553
067b8     18 2F 02 F6 | 	mov	local05, local06
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     17 15 02 F6 | 	mov	arg02, local05
067c4     F4 C7 B1 FD | 	call	#__system___string_cmp
067c8     00 FA 0D F2 | 	cmp	result1, #0 wz
067cc     44 00 90 AD |  if_e	jmp	#LR__0543
067d0     98 01 00 FF 
067d4     E7 32 06 F6 | 	mov	local07, ##@LR__5554
067d8     19 31 02 F6 | 	mov	local06, local07
067dc     16 13 02 F6 | 	mov	arg01, local04
067e0     18 15 02 F6 | 	mov	arg02, local06
067e4     D4 C7 B1 FD | 	call	#__system___string_cmp
067e8     FD 2E 0A F6 | 	mov	local05, result1 wz
067ec     24 00 90 AD |  if_e	jmp	#LR__0543
067f0     98 01 00 FF 
067f4     E9 34 06 F6 | 	mov	local08, ##@LR__5555
067f8     1A 33 02 F6 | 	mov	local07, local08
067fc     16 13 02 F6 | 	mov	arg01, local04
06800     19 15 02 F6 | 	mov	arg02, local07
06804     B4 C7 B1 FD | 	call	#__system___string_cmp
06808     FD 30 0A F6 | 	mov	local06, result1 wz
0680c     00 FA 05 56 |  if_ne	mov	result1, #0
06810     B8 01 90 5D |  if_ne	jmp	#LR__0554
06814                 | LR__0543
06814                 | ' if m$="$" then hex=1 else hex=0
06814     98 01 00 FF 
06818     EB 14 06 F6 | 	mov	arg02, ##@LR__5556
0681c     16 13 02 F6 | 	mov	arg01, local04
06820     98 C7 B1 FD | 	call	#__system___string_cmp
06824     00 FA 0D F2 | 	cmp	result1, #0 wz
06828     01 36 06 A6 |  if_e	mov	local09, #1
0682c     00 36 06 56 |  if_ne	mov	local09, #0
06830                 | ' if m$="%" then bin=1 else bin=0
06830     98 01 00 FF 
06834     ED 14 06 F6 | 	mov	arg02, ##@LR__5557
06838     16 13 02 F6 | 	mov	arg01, local04
0683c     7C C7 B1 FD | 	call	#__system___string_cmp
06840     00 FA 0D F2 | 	cmp	result1, #0 wz
06844     01 38 06 A6 |  if_e	mov	local10, #1
06848     00 38 06 56 |  if_ne	mov	local10, #0
0684c                 | ' if l>1 then 
0684c     02 2A 56 F2 | 	cmps	local03, #2 wc
06850     74 01 90 CD |  if_b	jmp	#LR__0553
06854                 | '   for i=2 to l
06854     02 3A 06 F6 | 	mov	local11, #2
06858     15 3D 02 F6 | 	mov	local12, local03
0685c     01 3C 06 F1 | 	add	local12, #1
06860                 | LR__0544
06860     1E 3B 52 F2 | 	cmps	local11, local12 wc
06864     60 01 90 3D |  if_ae	jmp	#LR__0552
06868     13 13 02 F6 | 	mov	arg01, local01
0686c     1D 15 02 F6 | 	mov	arg02, local11
06870     01 16 06 F6 | 	mov	arg03, #1
06874     B0 E8 B1 FD | 	call	#__system__Mid_S
06878     FD 2C 02 F6 | 	mov	local04, result1
0687c                 | '     m$=mid$(s,i,1) 
0687c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0687c     00 36 0E F2 | 	cmp	local09, #0 wz
06880     50 00 90 5D |  if_ne	jmp	#LR__0546
06884     98 01 00 FF 
06888     EF 14 06 F6 | 	mov	arg02, ##@LR__5558
0688c     16 13 02 F6 | 	mov	arg01, local04
06890     28 C7 B1 FD | 	call	#__system___string_cmp
06894     00 FA 55 F2 | 	cmps	result1, #0 wc
06898     18 00 90 CD |  if_b	jmp	#LR__0545
0689c     98 01 00 FF 
068a0     F1 14 06 F6 | 	mov	arg02, ##@LR__5559
068a4     16 13 02 F6 | 	mov	arg01, local04
068a8     10 C7 B1 FD | 	call	#__system___string_cmp
068ac     01 FA 55 F2 | 	cmps	result1, #1 wc
068b0     20 00 90 CD |  if_b	jmp	#LR__0546
068b4                 | LR__0545
068b4     98 01 00 FF 
068b8     F3 30 06 F6 | 	mov	local06, ##@LR__5560
068bc     16 13 02 F6 | 	mov	arg01, local04
068c0     18 15 02 F6 | 	mov	arg02, local06
068c4     F4 C6 B1 FD | 	call	#__system___string_cmp
068c8     00 FA 0D F2 | 	cmp	result1, #0 wz
068cc     00 FA 05 56 |  if_ne	mov	result1, #0
068d0     F8 00 90 5D |  if_ne	jmp	#LR__0554
068d4                 | LR__0546
068d4                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
068d4     01 36 0E F2 | 	cmp	local09, #1 wz
068d8     90 00 90 5D |  if_ne	jmp	#LR__0549
068dc     98 01 00 FF 
068e0     F5 14 06 F6 | 	mov	arg02, ##@LR__5561
068e4     16 13 02 F6 | 	mov	arg01, local04
068e8     D0 C6 B1 FD | 	call	#__system___string_cmp
068ec     00 FA 55 F2 | 	cmps	result1, #0 wc
068f0     1C 00 90 CD |  if_b	jmp	#LR__0547
068f4     98 01 00 FF 
068f8     F7 14 06 F6 | 	mov	arg02, ##@LR__5562
068fc     16 13 02 F6 | 	mov	arg01, local04
06900     B8 C6 B1 FD | 	call	#__system___string_cmp
06904     FD 3E 02 F6 | 	mov	local13, result1
06908     01 3E 56 F2 | 	cmps	local13, #1 wc
0690c     5C 00 90 CD |  if_b	jmp	#LR__0549
06910                 | LR__0547
06910     98 01 00 FF 
06914     F9 2E 06 F6 | 	mov	local05, ##@LR__5563
06918     16 13 02 F6 | 	mov	arg01, local04
0691c     17 15 02 F6 | 	mov	arg02, local05
06920     98 C6 B1 FD | 	call	#__system___string_cmp
06924     FD 40 02 F6 | 	mov	local14, result1
06928     00 40 56 F2 | 	cmps	local14, #0 wc
0692c     1C 00 90 CD |  if_b	jmp	#LR__0548
06930     98 01 00 FF 
06934     FB 32 06 F6 | 	mov	local07, ##@LR__5564
06938     16 13 02 F6 | 	mov	arg01, local04
0693c     19 15 02 F6 | 	mov	arg02, local07
06940     78 C6 B1 FD | 	call	#__system___string_cmp
06944     01 FA 55 F2 | 	cmps	result1, #1 wc
06948     20 00 90 CD |  if_b	jmp	#LR__0549
0694c                 | LR__0548
0694c     98 01 00 FF 
06950     FD 34 06 F6 | 	mov	local08, ##@LR__5565
06954     16 13 02 F6 | 	mov	arg01, local04
06958     1A 15 02 F6 | 	mov	arg02, local08
0695c     5C C6 B1 FD | 	call	#__system___string_cmp
06960     00 FA 0D F2 | 	cmp	result1, #0 wz
06964     00 FA 05 56 |  if_ne	mov	result1, #0
06968     60 00 90 5D |  if_ne	jmp	#LR__0554
0696c                 | LR__0549
0696c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0696c     01 38 0E F2 | 	cmp	local10, #1 wz
06970     4C 00 90 5D |  if_ne	jmp	#LR__0551
06974     98 01 00 FF 
06978     FF 14 06 F6 | 	mov	arg02, ##@LR__5566
0697c     16 13 02 F6 | 	mov	arg01, local04
06980     38 C6 B1 FD | 	call	#__system___string_cmp
06984     00 FA 55 F2 | 	cmps	result1, #0 wc
06988     18 00 90 CD |  if_b	jmp	#LR__0550
0698c     98 01 00 FF 
06990     01 15 06 F6 | 	mov	arg02, ##@LR__5567
06994     16 13 02 F6 | 	mov	arg01, local04
06998     20 C6 B1 FD | 	call	#__system___string_cmp
0699c     01 FA 55 F2 | 	cmps	result1, #1 wc
069a0     1C 00 90 CD |  if_b	jmp	#LR__0551
069a4                 | LR__0550
069a4     98 01 00 FF 
069a8     03 15 06 F6 | 	mov	arg02, ##@LR__5568
069ac     16 13 02 F6 | 	mov	arg01, local04
069b0     08 C6 B1 FD | 	call	#__system___string_cmp
069b4     00 FA 0D F2 | 	cmp	result1, #0 wz
069b8     00 FA 05 56 |  if_ne	mov	result1, #0
069bc     0C 00 90 5D |  if_ne	jmp	#LR__0554
069c0                 | LR__0551
069c0     01 3A 06 F1 | 	add	local11, #1
069c4     98 FE 9F FD | 	jmp	#LR__0544
069c8                 | LR__0552
069c8                 | LR__0553
069c8                 | ' return true
069c8     01 FA 65 F6 | 	neg	result1, #1
069cc                 | LR__0554
069cc     A7 F0 03 F6 | 	mov	ptra, fp
069d0     B2 00 A0 FD | 	call	#popregs_
069d4                 | _isint_ret
069d4     2D 00 64 FD | 	ret
069d8                 | 
069d8                 | ' 
069d8                 | ' ' Check if the part is a positive decimal number.  
069d8                 | ' 
069d8                 | ' function isdec(s as string) as boolean
069d8                 | _isdec
069d8     05 4A 05 F6 | 	mov	COUNT_, #5
069dc     A8 00 A0 FD | 	call	#pushregs_
069e0     09 27 02 F6 | 	mov	local01, arg01
069e4     09 29 02 F6 | 	mov	local02, arg01
069e8     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
069ec                 | LR__0560
069ec     14 FB C9 FA | 	rdbyte	result1, local02 wz
069f0     01 28 06 51 |  if_ne	add	local02, #1
069f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
069f8                 | LR__0561
069f8     09 29 82 F1 | 	sub	local02, arg01
069fc     14 FB 01 F6 | 	mov	result1, local02
06a00     FD 28 0A F6 | 	mov	local02, result1 wz
06a04     00 FA 05 A6 |  if_e	mov	result1, #0
06a08     80 00 90 AD |  if_e	jmp	#LR__0566
06a0c                 | ' for i=1 to l
06a0c     01 2A 06 F6 | 	mov	local03, #1
06a10     14 2D 02 F6 | 	mov	local04, local02
06a14     01 2C 06 F1 | 	add	local04, #1
06a18                 | LR__0562
06a18     16 2B 52 F2 | 	cmps	local03, local04 wc
06a1c     68 00 90 3D |  if_ae	jmp	#LR__0565
06a20     13 13 02 F6 | 	mov	arg01, local01
06a24     15 15 02 F6 | 	mov	arg02, local03
06a28     01 16 06 F6 | 	mov	arg03, #1
06a2c     F8 E6 B1 FD | 	call	#__system__Mid_S
06a30     FD 2E 02 F6 | 	mov	local05, result1
06a34                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06a34     98 01 00 FF 
06a38     05 15 06 F6 | 	mov	arg02, ##@LR__5569
06a3c     17 13 02 F6 | 	mov	arg01, local05
06a40     78 C5 B1 FD | 	call	#__system___string_cmp
06a44     00 FA 55 F2 | 	cmps	result1, #0 wc
06a48     18 00 90 CD |  if_b	jmp	#LR__0563
06a4c     98 01 00 FF 
06a50     07 15 06 F6 | 	mov	arg02, ##@LR__5570
06a54     17 13 02 F6 | 	mov	arg01, local05
06a58     60 C5 B1 FD | 	call	#__system___string_cmp
06a5c     01 FA 55 F2 | 	cmps	result1, #1 wc
06a60     1C 00 90 CD |  if_b	jmp	#LR__0564
06a64                 | LR__0563
06a64     98 01 00 FF 
06a68     09 15 06 F6 | 	mov	arg02, ##@LR__5571
06a6c     17 13 02 F6 | 	mov	arg01, local05
06a70     48 C5 B1 FD | 	call	#__system___string_cmp
06a74     00 FA 0D F2 | 	cmp	result1, #0 wz
06a78     00 FA 05 56 |  if_ne	mov	result1, #0
06a7c     0C 00 90 5D |  if_ne	jmp	#LR__0566
06a80                 | LR__0564
06a80     01 2A 06 F1 | 	add	local03, #1
06a84     90 FF 9F FD | 	jmp	#LR__0562
06a88                 | LR__0565
06a88                 | ' return true
06a88     01 FA 65 F6 | 	neg	result1, #1
06a8c                 | LR__0566
06a8c     A7 F0 03 F6 | 	mov	ptra, fp
06a90     B2 00 A0 FD | 	call	#popregs_
06a94                 | _isdec_ret
06a94     2D 00 64 FD | 	ret
06a98                 | 
06a98                 | ' 
06a98                 | ' ' Check if the part is a string.  
06a98                 | ' 
06a98                 | ' function isstring(s as string) as boolean
06a98                 | _isstring
06a98     01 4A 05 F6 | 	mov	COUNT_, #1
06a9c     A8 00 A0 FD | 	call	#pushregs_
06aa0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06aa0     09 27 02 F6 | 	mov	local01, arg01
06aa4     01 14 06 F6 | 	mov	arg02, #1
06aa8     64 E5 B1 FD | 	call	#__system__Left_S
06aac     FD 12 02 F6 | 	mov	arg01, result1
06ab0     98 01 00 FF 
06ab4     0B 15 06 F6 | 	mov	arg02, ##@LR__5572
06ab8     00 C5 B1 FD | 	call	#__system___string_cmp
06abc     00 FA 4D F2 | 	cmps	result1, #0 wz
06ac0     28 00 90 5D |  if_ne	jmp	#LR__0570
06ac4     13 13 02 F6 | 	mov	arg01, local01
06ac8     01 14 06 F6 | 	mov	arg02, #1
06acc     C8 E5 B1 FD | 	call	#__system__Right_S
06ad0     FD 12 02 F6 | 	mov	arg01, result1
06ad4     98 01 00 FF 
06ad8     0D 15 06 F6 | 	mov	arg02, ##@LR__5573
06adc     DC C4 B1 FD | 	call	#__system___string_cmp
06ae0     00 FA 4D F2 | 	cmps	result1, #0 wz
06ae4     01 FA 65 A6 |  if_e	neg	result1, #1
06ae8     04 00 90 AD |  if_e	jmp	#LR__0571
06aec                 | LR__0570
06aec     00 FA 05 F6 | 	mov	result1, #0
06af0                 | LR__0571
06af0     A7 F0 03 F6 | 	mov	ptra, fp
06af4     B2 00 A0 FD | 	call	#popregs_
06af8                 | _isstring_ret
06af8     2D 00 64 FD | 	ret
06afc                 | 
06afc                 | ' 
06afc                 | ' ' getnoteval. Returns the frequency of note token
06afc                 | ' 
06afc                 | ' function getnoteval(token) as single
06afc                 | _getnoteval
06afc     02 4A 05 F6 | 	mov	COUNT_, #2
06b00     A8 00 A0 FD | 	call	#pushregs_
06b04     01 00 00 FF 
06b08     00 13 86 F1 | 	sub	arg01, ##768
06b0c     09 15 52 F6 | 	abs	arg02, arg01 wc
06b10     0C 14 16 FD | 	qdiv	arg02, #12
06b14     14 00 00 FF 
06b18     D8 E4 05 F1 | 	add	objptr, ##10456
06b1c     19 14 62 FD | 	getqy	arg02
06b20     0A 15 82 F6 | 	negc	arg02, arg02
06b24     02 14 66 F0 | 	shl	arg02, #2
06b28     F2 14 02 F1 | 	add	arg02, objptr
06b2c     0A 27 02 FB | 	rdlong	local01, arg02
06b30     09 15 52 F6 | 	abs	arg02, arg01 wc
06b34     0C 14 16 FD | 	qdiv	arg02, #12
06b38     14 00 00 FF 
06b3c     D8 E4 85 F1 | 	sub	objptr, ##10456
06b40     01 12 06 F6 | 	mov	arg01, #1
06b44                 | ' noteexp=1+(note/12) 
06b44                 | ' return (2.0^noteexp)*notebase
06b44     18 14 62 FD | 	getqx	arg02
06b48     0A 13 82 F3 | 	sumc	arg01, arg02
06b4c     09 13 52 F6 | 	abs	arg01, arg01 wc
06b50     1F 28 C6 C9 |  if_b	decod	local02, #31
06b54     00 28 06 36 |  if_ae	mov	local02, #0
06b58     AC EE B1 FD | 	call	#__system___float_fromuns
06b5c     14 FB 61 F5 | 	xor	result1, local02
06b60     FD 14 02 F6 | 	mov	arg02, result1
06b64     1E 12 C6 F9 | 	decod	arg01, #30
06b68     A8 01 B2 FD | 	call	#__system____builtin_powf
06b6c     FD 12 02 F6 | 	mov	arg01, result1
06b70     13 15 02 F6 | 	mov	arg02, local01
06b74     94 F2 B1 FD | 	call	#__system___float_mul
06b78     A7 F0 03 F6 | 	mov	ptra, fp
06b7c     B2 00 A0 FD | 	call	#popregs_
06b80                 | _getnoteval_ret
06b80     2D 00 64 FD | 	ret
06b84                 | 
06b84                 | ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' '
06b84                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06b84                 | ' '
06b84                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06b84                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06b84                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06b84                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06b84                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06b84                 | ' ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' 
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' ' Helper functions to manage program lines
06b84                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b84                 | ' 
06b84                 | ' '----- delete a line from a program
06b84                 | ' 
06b84                 | ' function deleteline(aline as ulong) as integer
06b84                 | _deleteline
06b84     02 4A 05 F6 | 	mov	COUNT_, #2
06b88     A8 00 A0 FD | 	call	#pushregs_
06b8c     2C F0 07 F1 | 	add	ptra, #44
06b90     04 4E 05 F1 | 	add	fp, #4
06b94     A7 12 62 FC | 	wrlong	arg01, fp
06b98     4A 00 00 FF 
06b9c     88 E4 05 F1 | 	add	objptr, ##38024
06ba0     F2 26 02 FB | 	rdlong	local01, objptr
06ba4     0C 4E 05 F1 | 	add	fp, #12
06ba8     A7 26 62 FC | 	wrlong	local01, fp
06bac     10 4E 85 F1 | 	sub	fp, #16
06bb0                 | ' 
06bb0                 | ' searchptr=programstart
06bb0                 | ' do
06bb0     3E 00 00 FF 
06bb4     BC E5 85 F1 | 	sub	objptr, ##32188
06bb8                 | LR__0580
06bb8     14 4E 05 F1 | 	add	fp, #20
06bbc     A7 12 02 F6 | 	mov	arg01, fp
06bc0     04 4E 85 F1 | 	sub	fp, #4
06bc4     A7 14 02 FB | 	rdlong	arg02, fp
06bc8     10 4E 85 F1 | 	sub	fp, #16
06bcc     18 16 06 F6 | 	mov	arg03, #24
06bd0     80 B7 B1 FD | 	call	#_psram_spin2_read1
06bd4     10 4E 05 F1 | 	add	fp, #16
06bd8     A7 26 02 FB | 	rdlong	local01, fp
06bdc     08 4E 85 F1 | 	sub	fp, #8
06be0     A7 26 62 FC | 	wrlong	local01, fp
06be4     20 4E 05 F1 | 	add	fp, #32
06be8     A7 26 02 FB | 	rdlong	local01, fp
06bec     18 4E 85 F1 | 	sub	fp, #24
06bf0     A7 26 62 FC | 	wrlong	local01, fp
06bf4     04 4E 05 F1 | 	add	fp, #4
06bf8     A7 26 02 FB | 	rdlong	local01, fp
06bfc     10 4E 85 F1 | 	sub	fp, #16
06c00     A7 16 02 FB | 	rdlong	arg03, fp
06c04     04 4E 85 F1 | 	sub	fp, #4
06c08     0B 27 12 F2 | 	cmp	local01, arg03 wc
06c0c     28 4E 05 C1 |  if_b	add	fp, #40
06c10     A7 28 02 CB |  if_b	rdlong	local02, fp
06c14     28 4E 85 C1 |  if_b	sub	fp, #40
06c18     FF FF 3F CF 
06c1c     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06c20     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06c24     0B 00 00 FF 
06c28     CC E4 85 F1 | 	sub	objptr, ##5836
06c2c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06c2c     14 4E 05 F1 | 	add	fp, #20
06c30     A7 26 02 FB | 	rdlong	local01, fp
06c34     10 4E 85 F1 | 	sub	fp, #16
06c38     A7 28 02 FB | 	rdlong	local02, fp
06c3c     04 4E 85 F1 | 	sub	fp, #4
06c40     14 27 0A F2 | 	cmp	local01, local02 wz
06c44     01 FA 65 56 |  if_ne	neg	result1, #1
06c48     34 02 90 5D |  if_ne	jmp	#LR__0585
06c4c     08 4E 05 F1 | 	add	fp, #8
06c50     A7 12 02 FB | 	rdlong	arg01, fp
06c54     08 4E 85 F1 | 	sub	fp, #8
06c58     01 14 66 F6 | 	neg	arg02, #1
06c5c     30 8B B1 FD | 	call	#_pslpoke
06c60                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06c60                 | ' 
06c60                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06c60     28 4E 05 F1 | 	add	fp, #40
06c64     A7 26 02 FB | 	rdlong	local01, fp
06c68     28 4E 85 F1 | 	sub	fp, #40
06c6c     FF FF 3F FF 
06c70     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06c74     24 4E 05 A1 |  if_e	add	fp, #36
06c78     A7 28 02 AB |  if_e	rdlong	local02, fp
06c7c     24 4E 85 A1 |  if_e	sub	fp, #36
06c80     FF FF 7F AF 
06c84     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06c88     88 00 90 5D |  if_ne	jmp	#LR__0581
06c8c     4A 00 00 FF 
06c90     88 E4 05 F1 | 	add	objptr, ##38024
06c94     00 04 80 FF 
06c98     F2 00 68 FC | 	wrlong	##524288, objptr
06c9c     07 00 00 FF 
06ca0     2C E4 85 F1 | 	sub	objptr, ##3628
06ca4     00 04 80 FF 
06ca8     F2 00 68 FC | 	wrlong	##524288, objptr
06cac     07 00 00 FF 
06cb0     30 E4 05 F1 | 	add	objptr, ##3632
06cb4     F2 00 68 FC | 	wrlong	#0, objptr
06cb8     04 E4 05 F1 | 	add	objptr, #4
06cbc     FF FF FF FF 
06cc0     F2 FE 6B FC | 	wrlong	##-1, objptr
06cc4     4A 00 00 FF 
06cc8     90 E4 85 F1 | 	sub	objptr, ##38032
06ccc     00 12 06 F6 | 	mov	arg01, #0
06cd0     01 14 66 F6 | 	neg	arg02, #1
06cd4     B8 8A B1 FD | 	call	#_pslpoke
06cd8     10 12 06 F6 | 	mov	arg01, #16
06cdc     01 14 66 F6 | 	neg	arg02, #1
06ce0     AC 8A B1 FD | 	call	#_pslpoke
06ce4     14 12 06 F6 | 	mov	arg01, #20
06ce8     1E 14 CE F9 | 	bmask	arg02, #30
06cec     A0 8A B1 FD | 	call	#_pslpoke
06cf0     50 00 00 FF 
06cf4     B8 E4 05 F1 | 	add	objptr, ##41144
06cf8     00 04 80 FF 
06cfc     F2 00 68 FC | 	wrlong	##524288, objptr
06d00     04 E4 05 F1 | 	add	objptr, #4
06d04     00 04 80 FF 
06d08     F2 00 68 FC | 	wrlong	##524288, objptr
06d0c     50 00 00 FF 
06d10     BC E4 85 F1 | 	sub	objptr, ##41148
06d14                 | LR__0581
06d14                 | ' 
06d14                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06d14     28 4E 05 F1 | 	add	fp, #40
06d18     A7 26 02 FB | 	rdlong	local01, fp
06d1c     28 4E 85 F1 | 	sub	fp, #40
06d20     FF FF 3F FF 
06d24     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d28     74 00 90 5D |  if_ne	jmp	#LR__0582
06d2c     24 4E 05 F1 | 	add	fp, #36
06d30     A7 28 02 FB | 	rdlong	local02, fp
06d34     24 4E 85 F1 | 	sub	fp, #36
06d38     FF FF 7F FF 
06d3c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06d40     5C 00 90 AD |  if_e	jmp	#LR__0582
06d44     24 4E 05 F1 | 	add	fp, #36
06d48     A7 12 02 FB | 	rdlong	arg01, fp
06d4c     24 4E 85 F1 | 	sub	fp, #36
06d50     14 12 06 F1 | 	add	arg01, #20
06d54     1E 14 CE F9 | 	bmask	arg02, #30
06d58     34 8A B1 FD | 	call	#_pslpoke
06d5c     24 4E 05 F1 | 	add	fp, #36
06d60     A7 26 02 FB | 	rdlong	local01, fp
06d64     4A 00 00 FF 
06d68     90 E4 05 F1 | 	add	objptr, ##38032
06d6c     F2 26 62 FC | 	wrlong	local01, objptr
06d70     4A 00 00 FF 
06d74     90 E4 85 F1 | 	sub	objptr, ##38032
06d78     A7 12 02 FB | 	rdlong	arg01, fp
06d7c     24 4E 85 F1 | 	sub	fp, #36
06d80     3C 8B B1 FD | 	call	#_pslpeek
06d84     4A 00 00 FF 
06d88     8C E4 05 F1 | 	add	objptr, ##38028
06d8c     F2 FA 61 FC | 	wrlong	result1, objptr
06d90     4A 00 00 FF 
06d94     8C E4 85 F1 | 	sub	objptr, ##38028
06d98                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06d98                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06d98                 | '   lastline=pslpeek(header(4))
06d98                 | '   return 0
06d98     00 FA 05 F6 | 	mov	result1, #0
06d9c     E0 00 90 FD | 	jmp	#LR__0585
06da0                 | LR__0582
06da0                 | ' 
06da0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06da0     28 4E 05 F1 | 	add	fp, #40
06da4     A7 26 02 FB | 	rdlong	local01, fp
06da8     28 4E 85 F1 | 	sub	fp, #40
06dac     FF FF 3F FF 
06db0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06db4     58 00 90 AD |  if_e	jmp	#LR__0583
06db8     24 4E 05 F1 | 	add	fp, #36
06dbc     A7 28 02 FB | 	rdlong	local02, fp
06dc0     24 4E 85 F1 | 	sub	fp, #36
06dc4     FF FF 7F FF 
06dc8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06dcc     40 00 90 5D |  if_ne	jmp	#LR__0583
06dd0     28 4E 05 F1 | 	add	fp, #40
06dd4     A7 12 02 FB | 	rdlong	arg01, fp
06dd8     28 4E 85 F1 | 	sub	fp, #40
06ddc     10 12 06 F1 | 	add	arg01, #16
06de0     01 14 66 F6 | 	neg	arg02, #1
06de4     A8 89 B1 FD | 	call	#_pslpoke
06de8     28 4E 05 F1 | 	add	fp, #40
06dec     A7 26 02 FB | 	rdlong	local01, fp
06df0     28 4E 85 F1 | 	sub	fp, #40
06df4     4A 00 00 FF 
06df8     88 E4 05 F1 | 	add	objptr, ##38024
06dfc     F2 26 62 FC | 	wrlong	local01, objptr
06e00     4A 00 00 FF 
06e04     88 E4 85 F1 | 	sub	objptr, ##38024
06e08                 | ' '   print "deleted first line"
06e08                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06e08                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06e08                 | '   return 0
06e08     00 FA 05 F6 | 	mov	result1, #0
06e0c     70 00 90 FD | 	jmp	#LR__0585
06e10                 | LR__0583
06e10                 | ' 
06e10                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06e10     28 4E 05 F1 | 	add	fp, #40
06e14     A7 26 02 FB | 	rdlong	local01, fp
06e18     28 4E 85 F1 | 	sub	fp, #40
06e1c     FF FF 3F FF 
06e20     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e24     24 4E 05 51 |  if_ne	add	fp, #36
06e28     A7 28 02 5B |  if_ne	rdlong	local02, fp
06e2c     24 4E 85 51 |  if_ne	sub	fp, #36
06e30     FF FF 7F 5F 
06e34     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06e38     40 00 90 AD |  if_e	jmp	#LR__0584
06e3c     28 4E 05 F1 | 	add	fp, #40
06e40     A7 12 02 FB | 	rdlong	arg01, fp
06e44     10 12 06 F1 | 	add	arg01, #16
06e48     04 4E 85 F1 | 	sub	fp, #4
06e4c     A7 14 02 FB | 	rdlong	arg02, fp
06e50     24 4E 85 F1 | 	sub	fp, #36
06e54     38 89 B1 FD | 	call	#_pslpoke
06e58     24 4E 05 F1 | 	add	fp, #36
06e5c     A7 12 02 FB | 	rdlong	arg01, fp
06e60     14 12 06 F1 | 	add	arg01, #20
06e64     04 4E 05 F1 | 	add	fp, #4
06e68     A7 14 02 FB | 	rdlong	arg02, fp
06e6c     28 4E 85 F1 | 	sub	fp, #40
06e70     1C 89 B1 FD | 	call	#_pslpoke
06e74                 | '    pslpoke(header(5)+16,header(4))  
06e74                 | '    pslpoke(header(4)+20, header(5))
06e74                 | '    return 0
06e74     00 FA 05 F6 | 	mov	result1, #0
06e78     04 00 90 FD | 	jmp	#LR__0585
06e7c                 | LR__0584
06e7c     00 FA 05 F6 | 	mov	result1, #0
06e80                 | LR__0585
06e80     A7 F0 03 F6 | 	mov	ptra, fp
06e84     B2 00 A0 FD | 	call	#popregs_
06e88                 | _deleteline_ret
06e88     2D 00 64 FD | 	ret
06e8c                 | 
06e8c                 | ' 
06e8c                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06e8c                 | ' 
06e8c                 | ' sub save_line
06e8c                 | _save_line
06e8c     03 4A 05 F6 | 	mov	COUNT_, #3
06e90     A8 00 A0 FD | 	call	#pushregs_
06e94     4A 00 00 FF 
06e98     7C E4 05 F1 | 	add	objptr, ##38012
06e9c     F2 16 02 FB | 	rdlong	arg03, objptr
06ea0     01 16 06 F1 | 	add	arg03, #1
06ea4     05 00 00 FF 
06ea8     18 E4 85 F1 | 	sub	objptr, ##2584
06eac     F2 14 02 FB | 	rdlong	arg02, objptr
06eb0     0B 15 02 FD | 	qmul	arg02, arg03
06eb4     0E 00 00 FF 
06eb8     44 E4 85 F1 | 	sub	objptr, ##7236
06ebc     F2 12 02 FB | 	rdlong	arg01, objptr
06ec0     37 00 00 FF 
06ec4     20 E4 85 F1 | 	sub	objptr, ##28192
06ec8     09 27 02 F6 | 	mov	local01, arg01
06ecc     18 28 62 FD | 	getqx	local02
06ed0     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06ed4                 | LR__0590
06ed4     13 FB C9 FA | 	rdbyte	result1, local01 wz
06ed8     01 26 06 51 |  if_ne	add	local01, #1
06edc     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
06ee0                 | LR__0591
06ee0     09 27 82 F1 | 	sub	local01, arg01
06ee4     03 26 CE F7 | 	test	local01, #3 wz
06ee8     02 26 46 50 |  if_ne	shr	local01, #2
06eec     01 26 06 51 |  if_ne	add	local01, #1
06ef0     02 26 66 50 |  if_ne	shl	local01, #2
06ef4     14 2B 02 F6 | 	mov	local03, local02
06ef8     13 2B 02 F1 | 	add	local03, local01
06efc     43 00 00 FF 
06f00     5C E4 05 F1 | 	add	objptr, ##34396
06f04     F2 16 02 FB | 	rdlong	arg03, objptr
06f08     14 17 02 F1 | 	add	arg03, local02
06f0c     04 00 00 FF 
06f10     28 E4 05 F1 | 	add	objptr, ##2088
06f14     F2 16 62 FC | 	wrlong	arg03, objptr
06f18     04 E4 05 F1 | 	add	objptr, #4
06f1c     F2 26 62 FC | 	wrlong	local01, objptr
06f20     0C E4 85 F1 | 	sub	objptr, #12
06f24     F2 12 02 F6 | 	mov	arg01, objptr
06f28     04 00 00 FF 
06f2c     20 E4 85 F1 | 	sub	objptr, ##2080
06f30     F2 14 02 FB | 	rdlong	arg02, objptr
06f34     14 17 02 F6 | 	mov	arg03, local02
06f38     37 00 00 FF 
06f3c     90 E5 85 F1 | 	sub	objptr, ##28560
06f40     AC B4 B1 FD | 	call	#_psram_spin2_write
06f44     2B 00 00 FF 
06f48     54 E5 05 F1 | 	add	objptr, ##22356
06f4c     F2 12 02 FB | 	rdlong	arg01, objptr
06f50     0C 00 00 FF 
06f54     3C E4 05 F1 | 	add	objptr, ##6204
06f58     F2 14 02 FB | 	rdlong	arg02, objptr
06f5c     14 15 02 F1 | 	add	arg02, local02
06f60     13 17 02 F6 | 	mov	arg03, local01
06f64     37 00 00 FF 
06f68     90 E5 85 F1 | 	sub	objptr, ##28560
06f6c     80 B4 B1 FD | 	call	#_psram_spin2_write
06f70     37 00 00 FF 
06f74     90 E5 05 F1 | 	add	objptr, ##28560
06f78     F2 26 02 FB | 	rdlong	local01, objptr
06f7c     15 27 02 F1 | 	add	local01, local03
06f80     F2 26 62 FC | 	wrlong	local01, objptr
06f84     43 00 00 FF 
06f88     5C E4 85 F1 | 	sub	objptr, ##34396
06f8c     A7 F0 03 F6 | 	mov	ptra, fp
06f90     B2 00 A0 FD | 	call	#popregs_
06f94                 | _save_line_ret
06f94     2D 00 64 FD | 	ret
06f98                 | 
06f98                 | ' 
06f98                 | ' '----- Insert a new line into the middle of the program
06f98                 | ' 
06f98                 | ' function insertline(aline as ulong) as integer
06f98                 | _insertline
06f98     02 4A 05 F6 | 	mov	COUNT_, #2
06f9c     A8 00 A0 FD | 	call	#pushregs_
06fa0     28 F0 07 F1 | 	add	ptra, #40
06fa4     04 4E 05 F1 | 	add	fp, #4
06fa8     A7 12 62 FC | 	wrlong	arg01, fp
06fac     4A 00 00 FF 
06fb0     88 E4 05 F1 | 	add	objptr, ##38024
06fb4     F2 26 02 FB | 	rdlong	local01, objptr
06fb8     04 4E 05 F1 | 	add	fp, #4
06fbc     A7 26 62 FC | 	wrlong	local01, fp
06fc0     08 4E 85 F1 | 	sub	fp, #8
06fc4                 | ' 
06fc4                 | ' do
06fc4     3E 00 00 FF 
06fc8     BC E5 85 F1 | 	sub	objptr, ##32188
06fcc                 | LR__0600
06fcc     10 4E 05 F1 | 	add	fp, #16
06fd0     A7 12 02 F6 | 	mov	arg01, fp
06fd4     08 4E 85 F1 | 	sub	fp, #8
06fd8     A7 14 02 FB | 	rdlong	arg02, fp
06fdc     08 4E 85 F1 | 	sub	fp, #8
06fe0     18 16 06 F6 | 	mov	arg03, #24
06fe4     6C B3 B1 FD | 	call	#_psram_spin2_read1
06fe8     08 4E 05 F1 | 	add	fp, #8
06fec     A7 26 02 FB | 	rdlong	local01, fp
06ff0     04 4E 05 F1 | 	add	fp, #4
06ff4     A7 26 62 FC | 	wrlong	local01, fp
06ff8     18 4E 05 F1 | 	add	fp, #24
06ffc     A7 26 02 FB | 	rdlong	local01, fp
07000     1C 4E 85 F1 | 	sub	fp, #28
07004     A7 26 62 FC | 	wrlong	local01, fp
07008     08 4E 05 F1 | 	add	fp, #8
0700c     A7 26 02 FB | 	rdlong	local01, fp
07010     0C 4E 85 F1 | 	sub	fp, #12
07014     A7 16 02 FB | 	rdlong	arg03, fp
07018     04 4E 85 F1 | 	sub	fp, #4
0701c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07020     24 4E 05 C1 |  if_b	add	fp, #36
07024     A7 28 02 CB |  if_b	rdlong	local02, fp
07028     24 4E 85 C1 |  if_b	sub	fp, #36
0702c     FF FF 3F CF 
07030     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07034     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07038     0B 00 00 FF 
0703c     CC E4 85 F1 | 	sub	objptr, ##5836
07040                 | ' 
07040                 | ' if header(0)=aline then return -1 				' delete it first
07040     10 4E 05 F1 | 	add	fp, #16
07044     A7 26 02 FB | 	rdlong	local01, fp
07048     0C 4E 85 F1 | 	sub	fp, #12
0704c     A7 28 02 FB | 	rdlong	local02, fp
07050     04 4E 85 F1 | 	sub	fp, #4
07054     14 27 0A F2 | 	cmp	local01, local02 wz
07058     01 FA 65 A6 |  if_e	neg	result1, #1
0705c     48 01 90 AD |  if_e	jmp	#LR__0603
07060                 | ' if header(0)<aline then return -2 				' end of program reached
07060     10 4E 05 F1 | 	add	fp, #16
07064     A7 26 02 FB | 	rdlong	local01, fp
07068     0C 4E 85 F1 | 	sub	fp, #12
0706c     A7 16 02 FB | 	rdlong	arg03, fp
07070     04 4E 85 F1 | 	sub	fp, #4
07074     0B 27 12 F2 | 	cmp	local01, arg03 wc
07078     02 FA 65 C6 |  if_b	neg	result1, #2
0707c     28 01 90 CD |  if_b	jmp	#LR__0603
07080                 | ' 
07080                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07080     20 4E 05 F1 | 	add	fp, #32
07084     A7 26 02 FB | 	rdlong	local01, fp
07088     20 4E 85 F1 | 	sub	fp, #32
0708c     FF FF 7F FF 
07090     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07094     78 00 90 5D |  if_ne	jmp	#LR__0601
07098     43 00 00 FF 
0709c     5C E4 05 F1 | 	add	objptr, ##34396
070a0     F2 26 02 FB | 	rdlong	local01, objptr
070a4     07 00 00 FF 
070a8     2C E4 05 F1 | 	add	objptr, ##3628
070ac     F2 26 62 FC | 	wrlong	local01, objptr
070b0     0C 4E 05 F1 | 	add	fp, #12
070b4     A7 12 02 FB | 	rdlong	arg01, fp
070b8     0C 4E 85 F1 | 	sub	fp, #12
070bc     10 12 06 F1 | 	add	arg01, #16
070c0     07 00 00 FF 
070c4     2C E4 85 F1 | 	sub	objptr, ##3628
070c8     F2 14 02 FB | 	rdlong	arg02, objptr
070cc     43 00 00 FF 
070d0     5C E4 85 F1 | 	sub	objptr, ##34396
070d4     B8 86 B1 FD | 	call	#_pslpoke
070d8     47 00 00 FF 
070dc     8C E4 05 F1 | 	add	objptr, ##36492
070e0     FF FF FF FF 
070e4     F2 FE 6B FC | 	wrlong	##-1, objptr
070e8     0C 4E 05 F1 | 	add	fp, #12
070ec     A7 26 02 FB | 	rdlong	local01, fp
070f0     0C 4E 85 F1 | 	sub	fp, #12
070f4     04 E4 05 F1 | 	add	objptr, #4
070f8     F2 26 62 FC | 	wrlong	local01, objptr
070fc     47 00 00 FF 
07100     90 E4 85 F1 | 	sub	objptr, ##36496
07104     84 FD BF FD | 	call	#_save_line
07108                 | '   programstart=programptr
07108                 | '   pslpoke(lineptr2+16,programptr)
07108                 | '   ucompiledline(4)=$FFFF_FFFF
07108                 | '   ucompiledline(5)=lineptr2
07108                 | '   save_line
07108                 | '   return 0
07108     00 FA 05 F6 | 	mov	result1, #0
0710c     98 00 90 FD | 	jmp	#LR__0603
07110                 | LR__0601
07110                 | ' 
07110                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07110     20 4E 05 F1 | 	add	fp, #32
07114     A7 26 02 FB | 	rdlong	local01, fp
07118     20 4E 85 F1 | 	sub	fp, #32
0711c     FF FF 7F FF 
07120     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07124     7C 00 90 AD |  if_e	jmp	#LR__0602
07128     20 4E 05 F1 | 	add	fp, #32
0712c     A7 26 02 FB | 	rdlong	local01, fp
07130     47 00 00 FF 
07134     8C E4 05 F1 | 	add	objptr, ##36492
07138     F2 26 62 FC | 	wrlong	local01, objptr
0713c     14 4E 85 F1 | 	sub	fp, #20
07140     A7 26 02 FB | 	rdlong	local01, fp
07144     04 E4 05 F1 | 	add	objptr, #4
07148     F2 26 62 FC | 	wrlong	local01, objptr
0714c     A7 12 02 FB | 	rdlong	arg01, fp
07150     0C 4E 85 F1 | 	sub	fp, #12
07154     10 12 06 F1 | 	add	arg01, #16
07158     04 00 00 FF 
0715c     34 E4 85 F1 | 	sub	objptr, ##2100
07160     F2 14 02 FB | 	rdlong	arg02, objptr
07164     43 00 00 FF 
07168     5C E4 85 F1 | 	sub	objptr, ##34396
0716c     20 86 B1 FD | 	call	#_pslpoke
07170     20 4E 05 F1 | 	add	fp, #32
07174     A7 12 02 FB | 	rdlong	arg01, fp
07178     20 4E 85 F1 | 	sub	fp, #32
0717c     14 12 06 F1 | 	add	arg01, #20
07180     43 00 00 FF 
07184     5C E4 05 F1 | 	add	objptr, ##34396
07188     F2 14 02 FB | 	rdlong	arg02, objptr
0718c     43 00 00 FF 
07190     5C E4 85 F1 | 	sub	objptr, ##34396
07194     F8 85 B1 FD | 	call	#_pslpoke
07198     F0 FC BF FD | 	call	#_save_line
0719c                 | '   ucompiledline(4)=header(4)
0719c                 | '   ucompiledline(5)=lineptr2
0719c                 | '   pslpoke(lineptr2+16,programptr)
0719c                 | '   pslpoke(header(4)+20,programptr)
0719c                 | '   save_line
0719c                 | '   return 0
0719c     00 FA 05 F6 | 	mov	result1, #0
071a0     04 00 90 FD | 	jmp	#LR__0603
071a4                 | LR__0602
071a4     00 FA 05 F6 | 	mov	result1, #0
071a8                 | LR__0603
071a8     A7 F0 03 F6 | 	mov	ptra, fp
071ac     B2 00 A0 FD | 	call	#popregs_
071b0                 | _insertline_ret
071b0     2D 00 64 FD | 	ret
071b4                 | 
071b4                 | ' 
071b4                 | ' '----- Adds a new line at the end of the program
071b4                 | ' 
071b4                 | ' sub add_line_at_end(aline) 
071b4                 | _add_line_at_end
071b4     4A 00 00 FF 
071b8     8C E4 05 F1 | 	add	objptr, ##38028
071bc     F2 12 62 FC | 	wrlong	arg01, objptr
071c0     04 E4 05 F1 | 	add	objptr, #4
071c4     F2 14 02 FB | 	rdlong	arg02, objptr
071c8     03 00 00 FF 
071cc     04 E4 85 F1 | 	sub	objptr, ##1540
071d0     F2 14 62 FC | 	wrlong	arg02, objptr
071d4     03 00 00 FF 
071d8     04 E4 05 F1 | 	add	objptr, ##1540
071dc     F2 12 02 FB | 	rdlong	arg01, objptr
071e0     14 12 06 F1 | 	add	arg01, #20
071e4     07 00 00 FF 
071e8     34 E4 85 F1 | 	sub	objptr, ##3636
071ec     F2 14 02 FB | 	rdlong	arg02, objptr
071f0     43 00 00 FF 
071f4     5C E4 85 F1 | 	sub	objptr, ##34396
071f8     94 85 B1 FD | 	call	#_pslpoke
071fc     43 00 00 FF 
07200     5C E4 05 F1 | 	add	objptr, ##34396
07204     F2 14 02 FB | 	rdlong	arg02, objptr
07208     07 00 00 FF 
0720c     34 E4 05 F1 | 	add	objptr, ##3636
07210     F2 14 62 FC | 	wrlong	arg02, objptr
07214     03 00 00 FF 
07218     00 E4 85 F1 | 	sub	objptr, ##1536
0721c     FF FF BF FF 
07220     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07224                 | ' 
07224                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07224                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07224     04 00 00 FF 
07228     34 E4 85 F1 | 	sub	objptr, ##2100
0722c     F2 14 02 FB | 	rdlong	arg02, objptr
07230     43 00 00 FF 
07234     5C E4 85 F1 | 	sub	objptr, ##34396
07238     00 04 00 FF 
0723c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07240     47 00 00 AF 
07244     8C E4 05 A1 |  if_e	add	objptr, ##36492
07248     FF FF FF AF 
0724c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07250     47 00 00 AF 
07254     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07258     30 FC BF FD | 	call	#_save_line
0725c     43 00 00 FF 
07260     5C E4 05 F1 | 	add	objptr, ##34396
07264     F2 12 02 FB | 	rdlong	arg01, objptr
07268     43 00 00 FF 
0726c     5C E4 85 F1 | 	sub	objptr, ##34396
07270     01 14 66 F6 | 	neg	arg02, #1
07274     18 85 B1 FD | 	call	#_pslpoke
07278                 | _add_line_at_end_ret
07278     2D 00 64 FD | 	ret
0727c                 | 
0727c                 | ' 
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' 
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
0727c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0727c                 | ' 
0727c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
0727c                 | ' 
0727c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
0727c                 | _compile_immediate
0727c     0A 4A 05 F6 | 	mov	COUNT_, #10
07280     A8 00 A0 FD | 	call	#pushregs_
07284                 | _compile_immediate_enter
07284     09 2D 02 F6 | 	mov	local04, arg01
07288     0A 2F 02 F6 | 	mov	local05, arg02
0728c     00 30 06 F6 | 	mov	local06, #0
07290     00 32 06 F6 | 	mov	local07, #0
07294     00 34 06 F6 | 	mov	local08, #0
07298                 | ' 
07298                 | ' ' linetype=cont+1
07298                 | ' ' 1 : this is the first part of the line that will continue
07298                 | ' ' 2 - this is the continuation of the line
07298                 | ' ' 3 - this is the last continued line
07298                 | ' ' 4 - this is the one and only part
07298                 | ' ' 5 - continued after if/else
07298                 | ' 
07298                 | ' err=0
07298                 | ' cmd=0
07298                 | ' vars=0
07298                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07298     02 2C 0E F2 | 	cmp	local04, #2 wz
0729c     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
072a0     24 00 90 5D |  if_ne	jmp	#LR__0610
072a4     35 00 00 FF 
072a8     10 E4 05 F1 | 	add	objptr, ##27152
072ac     F2 32 02 FB | 	rdlong	local07, objptr
072b0     01 36 06 F6 | 	mov	local09, #1
072b4     02 00 00 FF 
072b8     34 E4 05 F1 | 	add	objptr, ##1076
072bc     F2 02 68 FC | 	wrlong	#1, objptr
072c0     37 00 00 FF 
072c4     44 E4 85 F1 | 	sub	objptr, ##28228
072c8                 | LR__0610
072c8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
072c8     04 2C 0E F2 | 	cmp	local04, #4 wz
072cc     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
072d0     30 00 90 5D |  if_ne	jmp	#LR__0611
072d4     35 00 00 FF 
072d8     18 E4 05 F1 | 	add	objptr, ##27160
072dc     F2 32 02 FB | 	rdlong	local07, objptr
072e0     02 36 06 F6 | 	mov	local09, #2
072e4     02 00 00 FF 
072e8     2C E4 05 F1 | 	add	objptr, ##1068
072ec     F2 04 68 FC | 	wrlong	#2, objptr
072f0     13 00 00 FF 
072f4     38 E4 05 F1 | 	add	objptr, ##9784
072f8     F2 04 68 FC | 	wrlong	#2, objptr
072fc     4A 00 00 FF 
07300     7C E4 85 F1 | 	sub	objptr, ##38012
07304                 | LR__0611
07304                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07304     05 2C 0E F2 | 	cmp	local04, #5 wz
07308     40 00 90 5D |  if_ne	jmp	#LR__0612
0730c     37 00 00 FF 
07310     44 E4 05 F1 | 	add	objptr, ##28228
07314     F2 FC 01 FB | 	rdlong	result2, objptr
07318     FE 36 02 F6 | 	mov	local09, result2
0731c     03 36 66 F0 | 	shl	local09, #3
07320     02 00 00 FF 
07324     38 E4 85 F1 | 	sub	objptr, ##1080
07328     F2 36 02 F1 | 	add	local09, objptr
0732c     04 36 06 F1 | 	add	local09, #4
07330     1B 33 02 FB | 	rdlong	local07, local09
07334     01 FC 05 F1 | 	add	result2, #1
07338     02 00 00 FF 
0733c     38 E4 05 F1 | 	add	objptr, ##1080
07340     F2 FC 61 FC | 	wrlong	result2, objptr
07344     37 00 00 FF 
07348     44 E4 85 F1 | 	sub	objptr, ##28228
0734c                 | LR__0612
0734c                 | ' 
0734c                 | ' 'print  "In compile_immediate cmd=:", cmd
0734c                 | ' 451 select case cmd
0734c     5C 32 0E F2 | 	cmp	local07, #92 wz
07350     B0 02 90 AD |  if_e	jmp	#LR__0613
07354     B9 32 0E F2 | 	cmp	local07, #185 wz
07358     B4 02 90 AD |  if_e	jmp	#LR__0614
0735c     47 32 0E F2 | 	cmp	local07, #71 wz
07360     BC 02 90 AD |  if_e	jmp	#LR__0615
07364     59 32 0E F2 | 	cmp	local07, #89 wz
07368     C4 02 90 AD |  if_e	jmp	#LR__0616
0736c     C3 32 0E F2 | 	cmp	local07, #195 wz
07370     CC 02 90 AD |  if_e	jmp	#LR__0617
07374     45 32 0E F2 | 	cmp	local07, #69 wz
07378     D0 02 90 AD |  if_e	jmp	#LR__0618
0737c     69 32 0E F2 | 	cmp	local07, #105 wz
07380     D8 02 90 AD |  if_e	jmp	#LR__0619
07384     40 32 0E F2 | 	cmp	local07, #64 wz
07388     A0 06 90 AD |  if_e	jmp	#LR__0691
0738c     B4 32 0E F2 | 	cmp	local07, #180 wz
07390     D4 02 90 AD |  if_e	jmp	#LR__0620
07394     49 32 0E F2 | 	cmp	local07, #73 wz
07398     D8 02 90 AD |  if_e	jmp	#LR__0621
0739c     50 32 0E F2 | 	cmp	local07, #80 wz
073a0     DC 02 90 AD |  if_e	jmp	#LR__0622
073a4     AE 32 0E F2 | 	cmp	local07, #174 wz
073a8     E4 02 90 AD |  if_e	jmp	#LR__0623
073ac     B0 32 0E F2 | 	cmp	local07, #176 wz
073b0     E8 02 90 AD |  if_e	jmp	#LR__0624
073b4     AF 32 0E F2 | 	cmp	local07, #175 wz
073b8     EC 02 90 AD |  if_e	jmp	#LR__0625
073bc     B1 32 0E F2 | 	cmp	local07, #177 wz
073c0     F0 02 90 AD |  if_e	jmp	#LR__0626
073c4     68 32 0E F2 | 	cmp	local07, #104 wz
073c8     F4 02 90 AD |  if_e	jmp	#LR__0627
073cc     74 32 0E F2 | 	cmp	local07, #116 wz
073d0     F8 02 90 AD |  if_e	jmp	#LR__0628
073d4     73 32 0E F2 | 	cmp	local07, #115 wz
073d8     00 03 90 AD |  if_e	jmp	#LR__0629
073dc     6C 32 0E F2 | 	cmp	local07, #108 wz
073e0     08 03 90 AD |  if_e	jmp	#LR__0630
073e4     89 32 0E F2 | 	cmp	local07, #137 wz
073e8     40 06 90 AD |  if_e	jmp	#LR__0691
073ec     C2 32 0E F2 | 	cmp	local07, #194 wz
073f0     08 03 90 AD |  if_e	jmp	#LR__0631
073f4     72 32 0E F2 | 	cmp	local07, #114 wz
073f8     0C 03 90 AD |  if_e	jmp	#LR__0632
073fc     5D 32 0E F2 | 	cmp	local07, #93 wz
07400     10 03 90 AD |  if_e	jmp	#LR__0633
07404     96 32 0E F2 | 	cmp	local07, #150 wz
07408     18 03 90 AD |  if_e	jmp	#LR__0634
0740c     43 32 0E F2 | 	cmp	local07, #67 wz
07410     1C 03 90 AD |  if_e	jmp	#LR__0635
07414     5A 32 0E F2 | 	cmp	local07, #90 wz
07418     24 03 90 AD |  if_e	jmp	#LR__0636
0741c     AB 32 0E F2 | 	cmp	local07, #171 wz
07420     08 06 90 AD |  if_e	jmp	#LR__0691
07424     BD 32 0E F2 | 	cmp	local07, #189 wz
07428     24 03 90 AD |  if_e	jmp	#LR__0637
0742c     BB 32 0E F2 | 	cmp	local07, #187 wz
07430     2C 03 90 AD |  if_e	jmp	#LR__0638
07434     4E 32 0E F2 | 	cmp	local07, #78 wz
07438     34 03 90 AD |  if_e	jmp	#LR__0639
0743c     A9 32 0E F2 | 	cmp	local07, #169 wz
07440     4C 03 90 AD |  if_e	jmp	#LR__0641
07444     46 32 0E F2 | 	cmp	local07, #70 wz
07448     64 03 90 AD |  if_e	jmp	#LR__0643
0744c     71 32 0E F2 | 	cmp	local07, #113 wz
07450     6C 03 90 AD |  if_e	jmp	#LR__0644
07454     60 32 0E F2 | 	cmp	local07, #96 wz
07458     70 03 90 AD |  if_e	jmp	#LR__0645
0745c     4A 32 0E F2 | 	cmp	local07, #74 wz
07460     74 03 90 AD |  if_e	jmp	#LR__0646
07464     48 32 0E F2 | 	cmp	local07, #72 wz
07468     78 03 90 AD |  if_e	jmp	#LR__0647
0746c     58 32 0E F2 | 	cmp	local07, #88 wz
07470     80 03 90 AD |  if_e	jmp	#LR__0648
07474     5F 32 0E F2 | 	cmp	local07, #95 wz
07478     88 03 90 AD |  if_e	jmp	#LR__0649
0747c     B5 32 0E F2 | 	cmp	local07, #181 wz
07480     8C 03 90 AD |  if_e	jmp	#LR__0650
07484     8A 32 0E F2 | 	cmp	local07, #138 wz
07488     94 03 90 AD |  if_e	jmp	#LR__0651
0748c     4C 32 0E F2 | 	cmp	local07, #76 wz
07490     98 03 90 AD |  if_e	jmp	#LR__0652
07494     52 32 0E F2 | 	cmp	local07, #82 wz
07498     A0 03 90 AD |  if_e	jmp	#LR__0653
0749c     97 32 0E F2 | 	cmp	local07, #151 wz
074a0     A8 03 90 AD |  if_e	jmp	#LR__0654
074a4     C6 32 0E F2 | 	cmp	local07, #198 wz
074a8     AC 03 90 AD |  if_e	jmp	#LR__0655
074ac     61 32 0E F2 | 	cmp	local07, #97 wz
074b0     B0 03 90 AD |  if_e	jmp	#LR__0656
074b4     63 32 0E F2 | 	cmp	local07, #99 wz
074b8     B4 03 90 AD |  if_e	jmp	#LR__0657
074bc     41 32 0E F2 | 	cmp	local07, #65 wz
074c0     68 05 90 AD |  if_e	jmp	#LR__0691
074c4     4B 32 0E F2 | 	cmp	local07, #75 wz
074c8     B0 03 90 AD |  if_e	jmp	#LR__0658
074cc     C1 32 0E F2 | 	cmp	local07, #193 wz
074d0     B4 03 90 AD |  if_e	jmp	#LR__0659
074d4     B3 32 0E F2 | 	cmp	local07, #179 wz
074d8     B8 03 90 AD |  if_e	jmp	#LR__0660
074dc     5E 32 0E F2 | 	cmp	local07, #94 wz
074e0     BC 03 90 AD |  if_e	jmp	#LR__0661
074e4     7C 32 0E F2 | 	cmp	local07, #124 wz
074e8     C0 03 90 AD |  if_e	jmp	#LR__0662
074ec     7D 32 0E F2 | 	cmp	local07, #125 wz
074f0     C4 03 90 AD |  if_e	jmp	#LR__0663
074f4     7E 32 0E F2 | 	cmp	local07, #126 wz
074f8     C8 03 90 AD |  if_e	jmp	#LR__0664
074fc     7F 32 0E F2 | 	cmp	local07, #127 wz
07500     CC 03 90 AD |  if_e	jmp	#LR__0665
07504     80 32 0E F2 | 	cmp	local07, #128 wz
07508     D0 03 90 AD |  if_e	jmp	#LR__0666
0750c     55 32 0E F2 | 	cmp	local07, #85 wz
07510     D4 03 90 AD |  if_e	jmp	#LR__0667
07514     75 32 0E F2 | 	cmp	local07, #117 wz
07518     D8 03 90 AD |  if_e	jmp	#LR__0668
0751c     42 32 0E F2 | 	cmp	local07, #66 wz
07520     E0 03 90 AD |  if_e	jmp	#LR__0669
07524     95 32 0E F2 | 	cmp	local07, #149 wz
07528     E8 03 90 AD |  if_e	jmp	#LR__0670
0752c     AC 32 0E F2 | 	cmp	local07, #172 wz
07530     F8 04 90 AD |  if_e	jmp	#LR__0691
07534     81 32 0E F2 | 	cmp	local07, #129 wz
07538     E4 03 90 AD |  if_e	jmp	#LR__0671
0753c     44 32 0E F2 | 	cmp	local07, #68 wz
07540     E8 03 90 AD |  if_e	jmp	#LR__0672
07544     BC 32 0E F2 | 	cmp	local07, #188 wz
07548     EC 03 90 AD |  if_e	jmp	#LR__0673
0754c     88 32 0E F2 | 	cmp	local07, #136 wz
07550     D8 04 90 AD |  if_e	jmp	#LR__0691
07554     92 32 0E F2 | 	cmp	local07, #146 wz
07558     EC 03 90 AD |  if_e	jmp	#LR__0674
0755c     BE 32 0E F2 | 	cmp	local07, #190 wz
07560     84 05 90 AD |  if_e	jmp	#LR__0692
07564     AA 32 0E F2 | 	cmp	local07, #170 wz
07568     C0 04 90 AD |  if_e	jmp	#LR__0691
0756c     4D 32 0E F2 | 	cmp	local07, #77 wz
07570     E0 03 90 AD |  if_e	jmp	#LR__0675
07574     51 32 0E F2 | 	cmp	local07, #81 wz
07578     E8 03 90 AD |  if_e	jmp	#LR__0676
0757c     8E 32 0E F2 | 	cmp	local07, #142 wz
07580     F0 03 90 AD |  if_e	jmp	#LR__0677
07584     90 32 0E F2 | 	cmp	local07, #144 wz
07588     F4 03 90 AD |  if_e	jmp	#LR__0678
0758c     8D 32 0E F2 | 	cmp	local07, #141 wz
07590     F8 03 90 AD |  if_e	jmp	#LR__0679
07594     8C 32 0E F2 | 	cmp	local07, #140 wz
07598     FC 03 90 AD |  if_e	jmp	#LR__0680
0759c     91 32 0E F2 | 	cmp	local07, #145 wz
075a0     00 04 90 AD |  if_e	jmp	#LR__0681
075a4     8B 32 0E F2 | 	cmp	local07, #139 wz
075a8     04 04 90 AD |  if_e	jmp	#LR__0682
075ac     8F 32 0E F2 | 	cmp	local07, #143 wz
075b0     08 04 90 AD |  if_e	jmp	#LR__0683
075b4     B2 32 0E F2 | 	cmp	local07, #178 wz
075b8     0C 04 90 AD |  if_e	jmp	#LR__0684
075bc     6D 32 0E F2 | 	cmp	local07, #109 wz
075c0     14 04 90 AD |  if_e	jmp	#LR__0685
075c4     70 32 0E F2 | 	cmp	local07, #112 wz
075c8     60 04 90 AD |  if_e	jmp	#LR__0691
075cc     56 32 0E F2 | 	cmp	local07, #86 wz
075d0     10 04 90 AD |  if_e	jmp	#LR__0686
075d4     57 32 0E F2 | 	cmp	local07, #87 wz
075d8     50 04 90 AD |  if_e	jmp	#LR__0691
075dc     79 32 0E F2 | 	cmp	local07, #121 wz
075e0     0C 04 90 AD |  if_e	jmp	#LR__0687
075e4     77 32 0E F2 | 	cmp	local07, #119 wz
075e8     10 04 90 AD |  if_e	jmp	#LR__0688
075ec     78 32 0E F2 | 	cmp	local07, #120 wz
075f0     14 04 90 AD |  if_e	jmp	#LR__0689
075f4     01 00 00 FF 
075f8     04 32 0E F2 | 	cmp	local07, ##516 wz
075fc     14 04 90 AD |  if_e	jmp	#LR__0690
07600     E4 04 90 FD | 	jmp	#LR__0692
07604                 | LR__0613
07604     30 0B B0 FD | 	call	#_compile_fun_2p
07608     FD 30 02 F6 | 	mov	local06, result1
0760c     1C 04 90 FD | 	jmp	#LR__0691
07610                 | LR__0614
07610     F4 0D B0 FD | 	call	#_compile_fun_varp
07614     FD 34 02 F6 | 	mov	local08, result1
07618     FE 30 02 F6 | 	mov	local06, result2
0761c     0C 04 90 FD | 	jmp	#LR__0691
07620                 | LR__0615
07620     E4 0D B0 FD | 	call	#_compile_fun_varp
07624     FD 34 02 F6 | 	mov	local08, result1
07628     FE 30 02 F6 | 	mov	local06, result2
0762c     FC 03 90 FD | 	jmp	#LR__0691
07630                 | LR__0616
07630     D4 0D B0 FD | 	call	#_compile_fun_varp
07634     FD 34 02 F6 | 	mov	local08, result1
07638     FE 30 02 F6 | 	mov	local06, result2
0763c     EC 03 90 FD | 	jmp	#LR__0691
07640                 | LR__0617
07640                 | ' return expr()
07640     80 3A B0 FD | 	call	#_expr
07644     FD 30 02 F6 | 	mov	local06, result1
07648     E0 03 90 FD | 	jmp	#LR__0691
0764c                 | LR__0618
0764c     B8 0D B0 FD | 	call	#_compile_fun_varp
07650     FD 34 02 F6 | 	mov	local08, result1
07654     FE 30 02 F6 | 	mov	local06, result2
07658     D0 03 90 FD | 	jmp	#LR__0691
0765c                 | LR__0619
0765c                 | ' return expr()
0765c     64 3A B0 FD | 	call	#_expr
07660     FD 30 02 F6 | 	mov	local06, result1
07664     C4 03 90 FD | 	jmp	#LR__0691
07668                 | LR__0620
07668                 | ' return expr()
07668     58 3A B0 FD | 	call	#_expr
0766c     FD 30 02 F6 | 	mov	local06, result1
07670     B8 03 90 FD | 	jmp	#LR__0691
07674                 | LR__0621
07674                 | ' return expr()
07674     4C 3A B0 FD | 	call	#_expr
07678     FD 30 02 F6 | 	mov	local06, result1
0767c     AC 03 90 FD | 	jmp	#LR__0691
07680                 | LR__0622
07680     84 0D B0 FD | 	call	#_compile_fun_varp
07684     FD 34 02 F6 | 	mov	local08, result1
07688     FE 30 02 F6 | 	mov	local06, result2
0768c     9C 03 90 FD | 	jmp	#LR__0691
07690                 | LR__0623
07690     A4 0A B0 FD | 	call	#_compile_fun_2p
07694     FD 30 02 F6 | 	mov	local06, result1
07698     90 03 90 FD | 	jmp	#LR__0691
0769c                 | LR__0624
0769c     98 0A B0 FD | 	call	#_compile_fun_2p
076a0     FD 30 02 F6 | 	mov	local06, result1
076a4     84 03 90 FD | 	jmp	#LR__0691
076a8                 | LR__0625
076a8     8C 0A B0 FD | 	call	#_compile_fun_2p
076ac     FD 30 02 F6 | 	mov	local06, result1
076b0     78 03 90 FD | 	jmp	#LR__0691
076b4                 | LR__0626
076b4     80 0A B0 FD | 	call	#_compile_fun_2p
076b8     FD 30 02 F6 | 	mov	local06, result1
076bc     6C 03 90 FD | 	jmp	#LR__0691
076c0                 | LR__0627
076c0                 | ' return expr()
076c0     00 3A B0 FD | 	call	#_expr
076c4     FD 30 02 F6 | 	mov	local06, result1
076c8     60 03 90 FD | 	jmp	#LR__0691
076cc                 | LR__0628
076cc     38 0D B0 FD | 	call	#_compile_fun_varp
076d0     FD 34 02 F6 | 	mov	local08, result1
076d4     FE 30 02 F6 | 	mov	local06, result2
076d8     50 03 90 FD | 	jmp	#LR__0691
076dc                 | LR__0629
076dc     28 0D B0 FD | 	call	#_compile_fun_varp
076e0     FD 34 02 F6 | 	mov	local08, result1
076e4     FE 30 02 F6 | 	mov	local06, result2
076e8     40 03 90 FD | 	jmp	#LR__0691
076ec                 | LR__0630
076ec     18 0D B0 FD | 	call	#_compile_fun_varp
076f0     FD 34 02 F6 | 	mov	local08, result1
076f4     FE 30 02 F6 | 	mov	local06, result2
076f8     30 03 90 FD | 	jmp	#LR__0691
076fc                 | LR__0631
076fc                 | ' return expr()
076fc     C4 39 B0 FD | 	call	#_expr
07700     FD 30 02 F6 | 	mov	local06, result1
07704     24 03 90 FD | 	jmp	#LR__0691
07708                 | LR__0632
07708     F8 1F B0 FD | 	call	#_compile_dim
0770c     FD 30 02 F6 | 	mov	local06, result1
07710     D4 03 90 FD | 	jmp	#LR__0692
07714                 | LR__0633
07714     F0 0C B0 FD | 	call	#_compile_fun_varp
07718     FD 34 02 F6 | 	mov	local08, result1
0771c     FE 30 02 F6 | 	mov	local06, result2
07720     08 03 90 FD | 	jmp	#LR__0691
07724                 | LR__0634
07724     10 0A B0 FD | 	call	#_compile_fun_2p
07728     FD 30 02 F6 | 	mov	local06, result1
0772c     FC 02 90 FD | 	jmp	#LR__0691
07730                 | LR__0635
07730     D4 0C B0 FD | 	call	#_compile_fun_varp
07734     FD 34 02 F6 | 	mov	local08, result1
07738     FE 30 02 F6 | 	mov	local06, result2
0773c     EC 02 90 FD | 	jmp	#LR__0691
07740                 | LR__0636
07740     17 13 02 F6 | 	mov	arg01, local05
07744     84 1E B0 FD | 	call	#_compile_else
07748     FD 30 02 F6 | 	mov	local06, result1
0774c     98 03 90 FD | 	jmp	#LR__0692
07750                 | LR__0637
07750     B4 0C B0 FD | 	call	#_compile_fun_varp
07754     FD 34 02 F6 | 	mov	local08, result1
07758     FE 30 02 F6 | 	mov	local06, result2
0775c     CC 02 90 FD | 	jmp	#LR__0691
07760                 | LR__0638
07760     A4 0C B0 FD | 	call	#_compile_fun_varp
07764     FD 34 02 F6 | 	mov	local08, result1
07768     FE 30 02 F6 | 	mov	local06, result2
0776c     BC 02 90 FD | 	jmp	#LR__0691
07770                 | LR__0639
07770     01 2E 16 F2 | 	cmp	local05, #1 wc
07774     08 00 90 CD |  if_b	jmp	#LR__0640
07778     9C 2B B0 FD | 	call	#_compile_goto
0777c     68 03 90 FD | 	jmp	#LR__0692
07780                 | LR__0640
07780     19 12 06 F6 | 	mov	arg01, #25
07784     00 14 06 F6 | 	mov	arg02, #0
07788     78 7E B1 FD | 	call	#_printerror
0778c     58 03 90 FD | 	jmp	#LR__0692
07790                 | LR__0641
07790     01 2E 16 F2 | 	cmp	local05, #1 wc
07794     08 00 90 CD |  if_b	jmp	#LR__0642
07798     18 2B B0 FD | 	call	#_compile_gosub
0779c     48 03 90 FD | 	jmp	#LR__0692
077a0                 | LR__0642
077a0     19 12 06 F6 | 	mov	arg01, #25
077a4     00 14 06 F6 | 	mov	arg02, #0
077a8     58 7E B1 FD | 	call	#_printerror
077ac     38 03 90 FD | 	jmp	#LR__0692
077b0                 | LR__0643
077b0     54 0C B0 FD | 	call	#_compile_fun_varp
077b4     FD 34 02 F6 | 	mov	local08, result1
077b8     FE 30 02 F6 | 	mov	local06, result2
077bc     6C 02 90 FD | 	jmp	#LR__0691
077c0                 | LR__0644
077c0     EC 0A B0 FD | 	call	#_compile_fun_4p
077c4     FD 30 02 F6 | 	mov	local06, result1
077c8     60 02 90 FD | 	jmp	#LR__0691
077cc                 | LR__0645
077cc                 | ' return expr()
077cc     F4 38 B0 FD | 	call	#_expr
077d0     FD 30 02 F6 | 	mov	local06, result1
077d4     54 02 90 FD | 	jmp	#LR__0691
077d8                 | LR__0646
077d8     FC 25 B0 FD | 	call	#_compile_for
077dc     FD 30 02 F6 | 	mov	local06, result1
077e0     04 03 90 FD | 	jmp	#LR__0692
077e4                 | LR__0647
077e4     20 0C B0 FD | 	call	#_compile_fun_varp
077e8     FD 34 02 F6 | 	mov	local08, result1
077ec     FE 30 02 F6 | 	mov	local06, result2
077f0     38 02 90 FD | 	jmp	#LR__0691
077f4                 | LR__0648
077f4     17 13 02 F6 | 	mov	arg01, local05
077f8     48 1C B0 FD | 	call	#_compile_if
077fc     FD 30 02 F6 | 	mov	local06, result1
07800     E4 02 90 FD | 	jmp	#LR__0692
07804                 | LR__0649
07804                 | ' return expr()
07804     BC 38 B0 FD | 	call	#_expr
07808     FD 30 02 F6 | 	mov	local06, result1
0780c     1C 02 90 FD | 	jmp	#LR__0691
07810                 | LR__0650
07810     D0 0C B0 FD | 	call	#_compile_input
07814     FD 34 02 F6 | 	mov	local08, result1
07818     FE 30 02 F6 | 	mov	local06, result2
0781c     0C 02 90 FD | 	jmp	#LR__0691
07820                 | LR__0651
07820                 | ' return expr()
07820     A0 38 B0 FD | 	call	#_expr
07824     FD 30 02 F6 | 	mov	local06, result1
07828     00 02 90 FD | 	jmp	#LR__0691
0782c                 | LR__0652
0782c     D8 0B B0 FD | 	call	#_compile_fun_varp
07830     FD 34 02 F6 | 	mov	local08, result1
07834     FE 30 02 F6 | 	mov	local06, result2
07838     F0 01 90 FD | 	jmp	#LR__0691
0783c                 | LR__0653
0783c     C8 0B B0 FD | 	call	#_compile_fun_varp
07840     FD 34 02 F6 | 	mov	local08, result1
07844     FE 30 02 F6 | 	mov	local06, result2
07848     E0 01 90 FD | 	jmp	#LR__0691
0784c                 | LR__0654
0784c     E8 08 B0 FD | 	call	#_compile_fun_2p
07850     FD 30 02 F6 | 	mov	local06, result1
07854     D4 01 90 FD | 	jmp	#LR__0691
07858                 | LR__0655
07858                 | ' return expr()
07858     68 38 B0 FD | 	call	#_expr
0785c     FD 30 02 F6 | 	mov	local06, result1
07860     C8 01 90 FD | 	jmp	#LR__0691
07864                 | LR__0656
07864                 | ' return expr()
07864     5C 38 B0 FD | 	call	#_expr
07868     FD 30 02 F6 | 	mov	local06, result1
0786c     BC 01 90 FD | 	jmp	#LR__0691
07870                 | LR__0657
07870                 | ' return expr()
07870     50 38 B0 FD | 	call	#_expr
07874     FD 30 02 F6 | 	mov	local06, result1
07878     B0 01 90 FD | 	jmp	#LR__0691
0787c                 | LR__0658
0787c     9C 28 B0 FD | 	call	#_compile_next
07880     FD 30 02 F6 | 	mov	local06, result1
07884     60 02 90 FD | 	jmp	#LR__0692
07888                 | LR__0659
07888     7C 2E B0 FD | 	call	#_compile_on
0788c     FD 30 02 F6 | 	mov	local06, result1
07890     54 02 90 FD | 	jmp	#LR__0692
07894                 | LR__0660
07894     28 09 B0 FD | 	call	#_compile_fun_3p
07898     FD 30 02 F6 | 	mov	local06, result1
0789c     8C 01 90 FD | 	jmp	#LR__0691
078a0                 | LR__0661
078a0                 | ' return expr()
078a0     20 38 B0 FD | 	call	#_expr
078a4     FD 30 02 F6 | 	mov	local06, result1
078a8     80 01 90 FD | 	jmp	#LR__0691
078ac                 | LR__0662
078ac                 | ' return expr()
078ac     14 38 B0 FD | 	call	#_expr
078b0     FD 30 02 F6 | 	mov	local06, result1
078b4     74 01 90 FD | 	jmp	#LR__0691
078b8                 | LR__0663
078b8                 | ' return expr()
078b8     08 38 B0 FD | 	call	#_expr
078bc     FD 30 02 F6 | 	mov	local06, result1
078c0     68 01 90 FD | 	jmp	#LR__0691
078c4                 | LR__0664
078c4                 | ' return expr()
078c4     FC 37 B0 FD | 	call	#_expr
078c8     FD 30 02 F6 | 	mov	local06, result1
078cc     5C 01 90 FD | 	jmp	#LR__0691
078d0                 | LR__0665
078d0     DC 09 B0 FD | 	call	#_compile_fun_4p
078d4     FD 30 02 F6 | 	mov	local06, result1
078d8     50 01 90 FD | 	jmp	#LR__0691
078dc                 | LR__0666
078dc                 | ' return expr()
078dc     E4 37 B0 FD | 	call	#_expr
078e0     FD 30 02 F6 | 	mov	local06, result1
078e4     44 01 90 FD | 	jmp	#LR__0691
078e8                 | LR__0667
078e8     4C 08 B0 FD | 	call	#_compile_fun_2p
078ec     FD 30 02 F6 | 	mov	local06, result1
078f0     38 01 90 FD | 	jmp	#LR__0691
078f4                 | LR__0668
078f4     10 0B B0 FD | 	call	#_compile_fun_varp
078f8     FD 34 02 F6 | 	mov	local08, result1
078fc     FE 30 02 F6 | 	mov	local06, result2
07900     28 01 90 FD | 	jmp	#LR__0691
07904                 | LR__0669
07904     00 0B B0 FD | 	call	#_compile_fun_varp
07908     FD 34 02 F6 | 	mov	local08, result1
0790c     FE 30 02 F6 | 	mov	local06, result2
07910     18 01 90 FD | 	jmp	#LR__0691
07914                 | LR__0670
07914     20 08 B0 FD | 	call	#_compile_fun_2p
07918     FD 30 02 F6 | 	mov	local06, result1
0791c     0C 01 90 FD | 	jmp	#LR__0691
07920                 | LR__0671
07920     14 08 B0 FD | 	call	#_compile_fun_2p
07924     FD 30 02 F6 | 	mov	local06, result1
07928     00 01 90 FD | 	jmp	#LR__0691
0792c                 | LR__0672
0792c     3C 14 B0 FD | 	call	#_compile_print
07930     FD 30 02 F6 | 	mov	local06, result1
07934     B0 01 90 FD | 	jmp	#LR__0692
07938                 | LR__0673
07938     CC 0A B0 FD | 	call	#_compile_fun_varp
0793c     FD 34 02 F6 | 	mov	local08, result1
07940     FE 30 02 F6 | 	mov	local06, result2
07944     E4 00 90 FD | 	jmp	#LR__0691
07948                 | LR__0674
07948                 | ' return expr()
07948     78 37 B0 FD | 	call	#_expr
0794c     FD 30 02 F6 | 	mov	local06, result1
07950     D8 00 90 FD | 	jmp	#LR__0691
07954                 | LR__0675
07954     B0 0A B0 FD | 	call	#_compile_fun_varp
07958     FD 34 02 F6 | 	mov	local08, result1
0795c     FE 30 02 F6 | 	mov	local06, result2
07960     C8 00 90 FD | 	jmp	#LR__0691
07964                 | LR__0676
07964     A0 0A B0 FD | 	call	#_compile_fun_varp
07968     FD 34 02 F6 | 	mov	local08, result1
0796c     FE 30 02 F6 | 	mov	local06, result2
07970     B8 00 90 FD | 	jmp	#LR__0691
07974                 | LR__0677
07974     C0 07 B0 FD | 	call	#_compile_fun_2p
07978     FD 30 02 F6 | 	mov	local06, result1
0797c     AC 00 90 FD | 	jmp	#LR__0691
07980                 | LR__0678
07980     B4 07 B0 FD | 	call	#_compile_fun_2p
07984     FD 30 02 F6 | 	mov	local06, result1
07988     A0 00 90 FD | 	jmp	#LR__0691
0798c                 | LR__0679
0798c     A8 07 B0 FD | 	call	#_compile_fun_2p
07990     FD 30 02 F6 | 	mov	local06, result1
07994     94 00 90 FD | 	jmp	#LR__0691
07998                 | LR__0680
07998     9C 07 B0 FD | 	call	#_compile_fun_2p
0799c     FD 30 02 F6 | 	mov	local06, result1
079a0     88 00 90 FD | 	jmp	#LR__0691
079a4                 | LR__0681
079a4     90 07 B0 FD | 	call	#_compile_fun_2p
079a8     FD 30 02 F6 | 	mov	local06, result1
079ac     7C 00 90 FD | 	jmp	#LR__0691
079b0                 | LR__0682
079b0     84 07 B0 FD | 	call	#_compile_fun_2p
079b4     FD 30 02 F6 | 	mov	local06, result1
079b8     70 00 90 FD | 	jmp	#LR__0691
079bc                 | LR__0683
079bc     78 07 B0 FD | 	call	#_compile_fun_2p
079c0     FD 30 02 F6 | 	mov	local06, result1
079c4     64 00 90 FD | 	jmp	#LR__0691
079c8                 | LR__0684
079c8     3C 0A B0 FD | 	call	#_compile_fun_varp
079cc     FD 34 02 F6 | 	mov	local08, result1
079d0     FE 30 02 F6 | 	mov	local06, result2
079d4     54 00 90 FD | 	jmp	#LR__0691
079d8                 | LR__0685
079d8     E4 07 B0 FD | 	call	#_compile_fun_3p
079dc     FD 30 02 F6 | 	mov	local06, result1
079e0     48 00 90 FD | 	jmp	#LR__0691
079e4                 | LR__0686
079e4                 | ' return expr()
079e4     DC 36 B0 FD | 	call	#_expr
079e8     FD 30 02 F6 | 	mov	local06, result1
079ec     3C 00 90 FD | 	jmp	#LR__0691
079f0                 | LR__0687
079f0     44 07 B0 FD | 	call	#_compile_fun_2p
079f4     FD 30 02 F6 | 	mov	local06, result1
079f8     30 00 90 FD | 	jmp	#LR__0691
079fc                 | LR__0688
079fc     38 07 B0 FD | 	call	#_compile_fun_2p
07a00     FD 30 02 F6 | 	mov	local06, result1
07a04     24 00 90 FD | 	jmp	#LR__0691
07a08                 | LR__0689
07a08     2C 07 B0 FD | 	call	#_compile_fun_2p
07a0c     FD 30 02 F6 | 	mov	local06, result1
07a10     18 00 90 FD | 	jmp	#LR__0691
07a14                 | LR__0690
07a14     F4 10 B0 FD | 	call	#_compile_array_assign
07a18     FD 30 02 F6 | 	mov	local06, result1
07a1c     0E 30 0E F2 | 	cmp	local06, #14 wz
07a20     C4 00 90 5D |  if_ne	jmp	#LR__0692
07a24                 | ' return 23
07a24     17 30 06 F6 | 	mov	local06, #23
07a28     BC 00 90 FD | 	jmp	#LR__0692
07a2c                 | ' return 23
07a2c                 | LR__0691
07a2c     19 2B 02 F6 | 	mov	local03, local07
07a30     1A 27 02 F6 | 	mov	local01, local08
07a34     13 37 02 F6 | 	mov	local09, local01
07a38     14 39 02 F6 | 	mov	local10, local02
07a3c     15 33 02 F6 | 	mov	local07, local03
07a40     4A 00 00 FF 
07a44     7C E4 05 F1 | 	add	objptr, ##38012
07a48     F2 26 02 FB | 	rdlong	local01, objptr
07a4c     13 35 02 F6 | 	mov	local08, local01
07a50     01 34 66 F0 | 	shl	local08, #1
07a54     13 35 02 F1 | 	add	local08, local01
07a58     02 34 66 F0 | 	shl	local08, #2
07a5c     03 00 00 FF 
07a60     00 E4 85 F1 | 	sub	objptr, ##1536
07a64     F2 34 02 F1 | 	add	local08, objptr
07a68     1A 37 62 FC | 	wrlong	local09, local08
07a6c     03 00 00 FF 
07a70     00 E4 05 F1 | 	add	objptr, ##1536
07a74     F2 26 02 FB | 	rdlong	local01, objptr
07a78     13 37 02 F6 | 	mov	local09, local01
07a7c     01 36 66 F0 | 	shl	local09, #1
07a80     13 37 02 F1 | 	add	local09, local01
07a84     02 36 66 F0 | 	shl	local09, #2
07a88     03 00 00 FF 
07a8c     00 E4 85 F1 | 	sub	objptr, ##1536
07a90     F2 36 02 F1 | 	add	local09, objptr
07a94     04 36 06 F1 | 	add	local09, #4
07a98     1B 39 62 FC | 	wrlong	local10, local09
07a9c     03 00 00 FF 
07aa0     00 E4 05 F1 | 	add	objptr, ##1536
07aa4     F2 26 02 FB | 	rdlong	local01, objptr
07aa8     13 39 02 F6 | 	mov	local10, local01
07aac     01 38 66 F0 | 	shl	local10, #1
07ab0     13 39 02 F1 | 	add	local10, local01
07ab4     02 38 66 F0 | 	shl	local10, #2
07ab8     03 00 00 FF 
07abc     00 E4 85 F1 | 	sub	objptr, ##1536
07ac0     F2 38 02 F1 | 	add	local10, objptr
07ac4     08 38 06 F1 | 	add	local10, #8
07ac8     1C 33 62 FC | 	wrlong	local07, local10
07acc     03 00 00 FF 
07ad0     00 E4 05 F1 | 	add	objptr, ##1536
07ad4     F2 36 02 FB | 	rdlong	local09, objptr
07ad8     01 36 06 F1 | 	add	local09, #1
07adc     F2 36 62 FC | 	wrlong	local09, objptr
07ae0     4A 00 00 FF 
07ae4     7C E4 85 F1 | 	sub	objptr, ##38012
07ae8                 | LR__0692
07ae8                 | ' 
07ae8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07ae8                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07ae8     03 2C 0E F2 | 	cmp	local04, #3 wz
07aec     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07af0     38 00 90 5D |  if_ne	jmp	#LR__0693
07af4     4A 00 00 FF 
07af8     7C E4 05 F1 | 	add	objptr, ##38012
07afc     F2 38 02 FB | 	rdlong	local10, objptr
07b00     1C 27 02 F6 | 	mov	local01, local10
07b04     01 26 66 F0 | 	shl	local01, #1
07b08     1C 27 02 F1 | 	add	local01, local10
07b0c     02 26 66 F0 | 	shl	local01, #2
07b10     03 00 00 FF 
07b14     00 E4 85 F1 | 	sub	objptr, ##1536
07b18     F2 26 02 F1 | 	add	local01, objptr
07b1c     08 26 06 F1 | 	add	local01, #8
07b20     13 FD 6B FC | 	wrlong	#510, local01
07b24     47 00 00 FF 
07b28     7C E4 85 F1 | 	sub	objptr, ##36476
07b2c                 | LR__0693
07b2c                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07b2c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07b2c     4A 00 00 FF 
07b30     7C E4 05 F1 | 	add	objptr, ##38012
07b34     F2 26 02 FB | 	rdlong	local01, objptr
07b38     4A 00 00 FF 
07b3c     7C E4 85 F1 | 	sub	objptr, ##38012
07b40     97 58 48 FB | 	callpa	#(@LR__0696-@LR__0694)>>2,fcache_load_ptr_
07b44                 | LR__0694
07b44     13 39 02 F6 | 	mov	local10, local01
07b48     01 38 66 F0 | 	shl	local10, #1
07b4c     13 39 02 F1 | 	add	local10, local01
07b50     02 38 66 F0 | 	shl	local10, #2
07b54     47 00 00 FF 
07b58     7C E4 05 F1 | 	add	objptr, ##36476
07b5c     F2 38 02 F1 | 	add	local10, objptr
07b60     08 38 06 F1 | 	add	local10, #8
07b64     1C 39 02 FB | 	rdlong	local10, local10
07b68     9B 38 0E F2 | 	cmp	local10, #155 wz
07b6c     47 00 00 FF 
07b70     7C E4 85 F1 | 	sub	objptr, ##36476
07b74     70 00 90 5D |  if_ne	jmp	#LR__0695
07b78     13 37 02 F6 | 	mov	local09, local01
07b7c     01 36 86 F1 | 	sub	local09, #1
07b80     1B 39 02 F6 | 	mov	local10, local09
07b84     01 38 66 F0 | 	shl	local10, #1
07b88     1B 39 02 F1 | 	add	local10, local09
07b8c     02 38 66 F0 | 	shl	local10, #2
07b90     47 00 00 FF 
07b94     7C E4 05 F1 | 	add	objptr, ##36476
07b98     F2 38 02 F1 | 	add	local10, objptr
07b9c     08 38 06 F1 | 	add	local10, #8
07ba0     1C 39 02 FB | 	rdlong	local10, local10
07ba4     11 38 0E F2 | 	cmp	local10, #17 wz
07ba8     47 00 00 FF 
07bac     7C E4 85 F1 | 	sub	objptr, ##36476
07bb0     34 00 90 5D |  if_ne	jmp	#LR__0695
07bb4     13 37 02 F6 | 	mov	local09, local01
07bb8     01 36 86 F1 | 	sub	local09, #1
07bbc     1B 39 02 F6 | 	mov	local10, local09
07bc0     01 38 66 F0 | 	shl	local10, #1
07bc4     1B 39 02 F1 | 	add	local10, local09
07bc8     02 38 66 F0 | 	shl	local10, #2
07bcc     47 00 00 FF 
07bd0     7C E4 05 F1 | 	add	objptr, ##36476
07bd4     F2 38 02 F1 | 	add	local10, objptr
07bd8     08 38 06 F1 | 	add	local10, #8
07bdc     1C 25 68 FC | 	wrlong	#18, local10
07be0     47 00 00 FF 
07be4     7C E4 85 F1 | 	sub	objptr, ##36476
07be8                 | LR__0695
07be8     01 26 86 F1 | 	sub	local01, #1
07bec     01 26 56 F2 | 	cmps	local01, #1 wc
07bf0     50 FF 9F 3D |  if_ae	jmp	#LR__0694
07bf4                 | LR__0696
07bf4                 | ' '''''' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07bf4                 | ' return err
07bf4     18 FB 01 F6 | 	mov	result1, local06
07bf8     A7 F0 03 F6 | 	mov	ptra, fp
07bfc     B2 00 A0 FD | 	call	#popregs_
07c00                 | _compile_immediate_ret
07c00     2D 00 64 FD | 	ret
07c04                 | 
07c04                 | ' 
07c04                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07c04                 | ' 
07c04                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07c04                 | _compile_immediate_assign
07c04     0C 4A 05 F6 | 	mov	COUNT_, #12
07c08     A8 00 A0 FD | 	call	#pushregs_
07c0c     09 2D 02 F6 | 	mov	local04, arg01
07c10     FF 2A 06 F6 | 	mov	local03, #255
07c14     01 2E 66 F6 | 	neg	local05, #1
07c18     00 30 06 F6 | 	mov	local06, #0
07c1c                 | ' 
07c1c                 | ' t1.result_type=result_error : t1.result.uresult=0
07c1c                 | ' i=-1: j=-1 : err=0
07c1c                 | ' 
07c1c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07c1c     02 2C 0E F2 | 	cmp	local04, #2 wz
07c20     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07c24     35 00 00 AF 
07c28     0C E4 05 A1 |  if_e	add	objptr, ##27148
07c2c     F2 32 02 AB |  if_e	rdlong	local07, objptr
07c30     02 00 00 AF 
07c34     38 E4 05 A1 |  if_e	add	objptr, ##1080
07c38     F2 04 68 AC |  if_e	wrlong	#2, objptr
07c3c     37 00 00 AF 
07c40     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07c44                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07c44     04 2C 0E F2 | 	cmp	local04, #4 wz
07c48     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07c4c     2C 00 90 5D |  if_ne	jmp	#LR__0700
07c50     35 00 00 FF 
07c54     14 E4 05 F1 | 	add	objptr, ##27156
07c58     F2 32 02 FB | 	rdlong	local07, objptr
07c5c     02 00 00 FF 
07c60     30 E4 05 F1 | 	add	objptr, ##1072
07c64     F2 06 68 FC | 	wrlong	#3, objptr
07c68     13 00 00 FF 
07c6c     38 E4 05 F1 | 	add	objptr, ##9784
07c70     F2 04 68 FC | 	wrlong	#2, objptr
07c74     4A 00 00 FF 
07c78     7C E4 85 F1 | 	sub	objptr, ##38012
07c7c                 | LR__0700
07c7c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07c7c     05 2C 0E F2 | 	cmp	local04, #5 wz
07c80     3C 00 90 5D |  if_ne	jmp	#LR__0701
07c84     37 00 00 FF 
07c88     44 E4 05 F1 | 	add	objptr, ##28228
07c8c     F2 FA 01 FB | 	rdlong	result1, objptr
07c90     FD 32 02 F6 | 	mov	local07, result1
07c94     03 32 66 F0 | 	shl	local07, #3
07c98     02 00 00 FF 
07c9c     38 E4 85 F1 | 	sub	objptr, ##1080
07ca0     F2 32 02 F1 | 	add	local07, objptr
07ca4     19 33 02 FB | 	rdlong	local07, local07
07ca8     02 FA 05 F1 | 	add	result1, #2
07cac     02 00 00 FF 
07cb0     38 E4 05 F1 | 	add	objptr, ##1080
07cb4     F2 FA 61 FC | 	wrlong	result1, objptr
07cb8     37 00 00 FF 
07cbc     44 E4 85 F1 | 	sub	objptr, ##28228
07cc0                 | LR__0701
07cc0     19 13 02 F6 | 	mov	arg01, local07
07cc4     01 14 06 F6 | 	mov	arg02, #1
07cc8     CC D3 B1 FD | 	call	#__system__Right_S
07ccc     FD 34 02 F6 | 	mov	local08, result1
07cd0     F0 33 B0 FD | 	call	#_expr
07cd4                 | ' 
07cd4                 | ' suffix2$=right$(varname2$,1)
07cd4                 | ' expr()
07cd4                 | ' if varnum>0 then					' try to find a variable
07cd4     35 00 00 FF 
07cd8     08 E4 05 F1 | 	add	objptr, ##27144
07cdc     F2 36 02 FB | 	rdlong	local09, objptr
07ce0     35 00 00 FF 
07ce4     08 E4 85 F1 | 	sub	objptr, ##27144
07ce8     01 36 56 F2 | 	cmps	local09, #1 wc
07cec     58 00 90 CD |  if_b	jmp	#LR__0704
07cf0                 | '   for i=0 to varnum-1
07cf0     00 38 06 F6 | 	mov	local10, #0
07cf4     35 00 00 FF 
07cf8     08 E4 05 F1 | 	add	objptr, ##27144
07cfc     F2 3A 02 FB | 	rdlong	local11, objptr
07d00     35 00 00 FF 
07d04     08 E4 85 F1 | 	sub	objptr, ##27144
07d08                 | LR__0702
07d08     1D 39 52 F2 | 	cmps	local10, local11 wc
07d0c     38 00 90 3D |  if_ae	jmp	#LR__0703
07d10                 | '     if variables(i).name=varname2$ then j=i : exit
07d10     1C 37 02 F6 | 	mov	local09, local10
07d14     04 36 66 F0 | 	shl	local09, #4
07d18     14 00 00 FF 
07d1c     F8 E5 05 F1 | 	add	objptr, ##10744
07d20     F2 36 02 F1 | 	add	local09, objptr
07d24     1B 13 02 FB | 	rdlong	arg01, local09
07d28     19 15 02 F6 | 	mov	arg02, local07
07d2c     14 00 00 FF 
07d30     F8 E5 85 F1 | 	sub	objptr, ##10744
07d34     84 B2 B1 FD | 	call	#__system___string_cmp
07d38     00 FA 0D F2 | 	cmp	result1, #0 wz
07d3c     1C 2F 02 A6 |  if_e	mov	local05, local10
07d40     01 38 06 51 |  if_ne	add	local10, #1
07d44     C0 FF 9F 5D |  if_ne	jmp	#LR__0702
07d48                 | LR__0703
07d48                 | LR__0704
07d48                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07d48     FF FF 7F FF 
07d4c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07d50     60 00 90 5D |  if_ne	jmp	#LR__0705
07d54     35 00 00 FF 
07d58     08 E4 05 F1 | 	add	objptr, ##27144
07d5c     F2 36 02 FB | 	rdlong	local09, objptr
07d60     35 00 00 FF 
07d64     08 E4 85 F1 | 	sub	objptr, ##27144
07d68     02 00 00 FF 
07d6c     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d70     40 00 90 3D |  if_ae	jmp	#LR__0705
07d74     35 00 00 FF 
07d78     08 E4 05 F1 | 	add	objptr, ##27144
07d7c     F2 3A 02 FB | 	rdlong	local11, objptr
07d80     04 3A 66 F0 | 	shl	local11, #4
07d84     20 00 00 FF 
07d88     10 E4 85 F1 | 	sub	objptr, ##16400
07d8c     F2 3A 02 F1 | 	add	local11, objptr
07d90     1D 33 62 FC | 	wrlong	local07, local11
07d94     20 00 00 FF 
07d98     10 E4 05 F1 | 	add	objptr, ##16400
07d9c     F2 36 02 FB | 	rdlong	local09, objptr
07da0     1B 2F 02 F6 | 	mov	local05, local09
07da4     01 36 06 F1 | 	add	local09, #1
07da8     F2 36 62 FC | 	wrlong	local09, objptr
07dac     35 00 00 FF 
07db0     08 E4 85 F1 | 	sub	objptr, ##27144
07db4                 | LR__0705
07db4                 | ' if varnum>=maxvars then
07db4     35 00 00 FF 
07db8     08 E4 05 F1 | 	add	objptr, ##27144
07dbc     F2 36 02 FB | 	rdlong	local09, objptr
07dc0     35 00 00 FF 
07dc4     08 E4 85 F1 | 	sub	objptr, ##27144
07dc8     02 00 00 FF 
07dcc     00 36 56 F2 | 	cmps	local09, ##1024 wc
07dd0     2D 30 06 36 |  if_ae	mov	local06, #45
07dd4     C8 01 90 3D |  if_ae	jmp	#LR__0710
07dd8     17 27 02 F6 | 	mov	local01, local05
07ddc     17 2A 06 F6 | 	mov	local03, #23
07de0     13 37 02 F6 | 	mov	local09, local01
07de4     14 3D 02 F6 | 	mov	local12, local02
07de8     15 27 02 F6 | 	mov	local01, local03
07dec     4A 00 00 FF 
07df0     7C E4 05 F1 | 	add	objptr, ##38012
07df4     F2 3A 02 FB | 	rdlong	local11, objptr
07df8     1D 39 02 F6 | 	mov	local10, local11
07dfc     01 38 66 F0 | 	shl	local10, #1
07e00     1D 39 02 F1 | 	add	local10, local11
07e04     02 38 66 F0 | 	shl	local10, #2
07e08     03 00 00 FF 
07e0c     00 E4 85 F1 | 	sub	objptr, ##1536
07e10     F2 38 02 F1 | 	add	local10, objptr
07e14     1C 37 62 FC | 	wrlong	local09, local10
07e18     03 00 00 FF 
07e1c     00 E4 05 F1 | 	add	objptr, ##1536
07e20     F2 36 02 FB | 	rdlong	local09, objptr
07e24     1B 3B 02 F6 | 	mov	local11, local09
07e28     01 3A 66 F0 | 	shl	local11, #1
07e2c     1B 3B 02 F1 | 	add	local11, local09
07e30     02 3A 66 F0 | 	shl	local11, #2
07e34     03 00 00 FF 
07e38     00 E4 85 F1 | 	sub	objptr, ##1536
07e3c     F2 3A 02 F1 | 	add	local11, objptr
07e40     04 3A 06 F1 | 	add	local11, #4
07e44     1D 3D 62 FC | 	wrlong	local12, local11
07e48     03 00 00 FF 
07e4c     00 E4 05 F1 | 	add	objptr, ##1536
07e50     F2 36 02 FB | 	rdlong	local09, objptr
07e54     1B 3D 02 F6 | 	mov	local12, local09
07e58     01 3C 66 F0 | 	shl	local12, #1
07e5c     1B 3D 02 F1 | 	add	local12, local09
07e60     02 3C 66 F0 | 	shl	local12, #2
07e64     03 00 00 FF 
07e68     00 E4 85 F1 | 	sub	objptr, ##1536
07e6c     F2 3C 02 F1 | 	add	local12, objptr
07e70     08 3C 06 F1 | 	add	local12, #8
07e74     1E 27 62 FC | 	wrlong	local01, local12
07e78     03 00 00 FF 
07e7c     00 E4 05 F1 | 	add	objptr, ##1536
07e80     F2 36 02 FB | 	rdlong	local09, objptr
07e84     01 36 06 F1 | 	add	local09, #1
07e88     F2 36 62 FC | 	wrlong	local09, objptr
07e8c     4A 00 00 FF 
07e90     7C E4 85 F1 | 	sub	objptr, ##38012
07e94                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07e94                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07e94                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07e94     03 2C 0E F2 | 	cmp	local04, #3 wz
07e98     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07e9c     38 00 90 5D |  if_ne	jmp	#LR__0706
07ea0     4A 00 00 FF 
07ea4     7C E4 05 F1 | 	add	objptr, ##38012
07ea8     F2 3C 02 FB | 	rdlong	local12, objptr
07eac     1E 27 02 F6 | 	mov	local01, local12
07eb0     01 26 66 F0 | 	shl	local01, #1
07eb4     1E 27 02 F1 | 	add	local01, local12
07eb8     02 26 66 F0 | 	shl	local01, #2
07ebc     03 00 00 FF 
07ec0     00 E4 85 F1 | 	sub	objptr, ##1536
07ec4     F2 26 02 F1 | 	add	local01, objptr
07ec8     08 26 06 F1 | 	add	local01, #8
07ecc     13 FD 6B FC | 	wrlong	#510, local01
07ed0     47 00 00 FF 
07ed4     7C E4 85 F1 | 	sub	objptr, ##36476
07ed8                 | LR__0706
07ed8                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ed8     4A 00 00 FF 
07edc     7C E4 05 F1 | 	add	objptr, ##38012
07ee0     F2 38 02 FB | 	rdlong	local10, objptr
07ee4     4A 00 00 FF 
07ee8     7C E4 85 F1 | 	sub	objptr, ##38012
07eec     97 58 48 FB | 	callpa	#(@LR__0709-@LR__0707)>>2,fcache_load_ptr_
07ef0                 | LR__0707
07ef0     1C 3D 02 F6 | 	mov	local12, local10
07ef4     01 3C 66 F0 | 	shl	local12, #1
07ef8     1C 3D 02 F1 | 	add	local12, local10
07efc     02 3C 66 F0 | 	shl	local12, #2
07f00     47 00 00 FF 
07f04     7C E4 05 F1 | 	add	objptr, ##36476
07f08     F2 3C 02 F1 | 	add	local12, objptr
07f0c     08 3C 06 F1 | 	add	local12, #8
07f10     1E 3D 02 FB | 	rdlong	local12, local12
07f14     9B 3C 0E F2 | 	cmp	local12, #155 wz
07f18     47 00 00 FF 
07f1c     7C E4 85 F1 | 	sub	objptr, ##36476
07f20     70 00 90 5D |  if_ne	jmp	#LR__0708
07f24     1C 3D 02 F6 | 	mov	local12, local10
07f28     01 3C 86 F1 | 	sub	local12, #1
07f2c     1E 27 02 F6 | 	mov	local01, local12
07f30     01 26 66 F0 | 	shl	local01, #1
07f34     1E 27 02 F1 | 	add	local01, local12
07f38     02 26 66 F0 | 	shl	local01, #2
07f3c     47 00 00 FF 
07f40     7C E4 05 F1 | 	add	objptr, ##36476
07f44     F2 26 02 F1 | 	add	local01, objptr
07f48     08 26 06 F1 | 	add	local01, #8
07f4c     13 27 02 FB | 	rdlong	local01, local01
07f50     11 26 0E F2 | 	cmp	local01, #17 wz
07f54     47 00 00 FF 
07f58     7C E4 85 F1 | 	sub	objptr, ##36476
07f5c     34 00 90 5D |  if_ne	jmp	#LR__0708
07f60     1C 3D 02 F6 | 	mov	local12, local10
07f64     01 3C 86 F1 | 	sub	local12, #1
07f68     1E 27 02 F6 | 	mov	local01, local12
07f6c     01 26 66 F0 | 	shl	local01, #1
07f70     1E 27 02 F1 | 	add	local01, local12
07f74     02 26 66 F0 | 	shl	local01, #2
07f78     47 00 00 FF 
07f7c     7C E4 05 F1 | 	add	objptr, ##36476
07f80     F2 26 02 F1 | 	add	local01, objptr
07f84     08 26 06 F1 | 	add	local01, #8
07f88     13 25 68 FC | 	wrlong	#18, local01
07f8c     47 00 00 FF 
07f90     7C E4 85 F1 | 	sub	objptr, ##36476
07f94                 | LR__0708
07f94     01 38 86 F1 | 	sub	local10, #1
07f98     01 38 56 F2 | 	cmps	local10, #1 wc
07f9c     50 FF 9F 3D |  if_ae	jmp	#LR__0707
07fa0                 | LR__0709
07fa0                 | LR__0710
07fa0                 | ' return err
07fa0     18 FB 01 F6 | 	mov	result1, local06
07fa4     A7 F0 03 F6 | 	mov	ptra, fp
07fa8     B2 00 A0 FD | 	call	#popregs_
07fac                 | _compile_immediate_assign_ret
07fac     2D 00 64 FD | 	ret
07fb0                 | 
07fb0                 | ' 
07fb0                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07fb0                 | ' 
07fb0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07fb0                 | _compile
07fb0     03 4A 05 F6 | 	mov	COUNT_, #3
07fb4     A8 00 A0 FD | 	call	#pushregs_
07fb8     09 27 02 F6 | 	mov	local01, arg01
07fbc     0B 29 02 F6 | 	mov	local02, arg03
07fc0     47 00 00 FF 
07fc4     7C E4 05 F1 | 	add	objptr, ##36476
07fc8     F2 26 62 FC | 	wrlong	local01, objptr
07fcc     04 E4 05 F1 | 	add	objptr, #4
07fd0     F2 14 62 FC | 	wrlong	arg02, objptr
07fd4     47 00 00 FF 
07fd8     80 E4 85 F1 | 	sub	objptr, ##36480
07fdc     14 13 02 F6 | 	mov	arg01, local02
07fe0     01 12 06 F1 | 	add	arg01, #1
07fe4     13 15 02 F6 | 	mov	arg02, local01
07fe8     90 F2 BF FD | 	call	#_compile_immediate
07fec     FD 2A 0A F6 | 	mov	local03, result1 wz
07ff0                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07ff0                 | ' ucompiledline(0)=alinemajor
07ff0                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07ff0                 | ' 
07ff0                 | ' ' cont: 
07ff0                 | ' ' 0 - this is the first part of the line that will continue
07ff0                 | ' ' 1 - this is the continuation of the line
07ff0                 | ' ' 2 - this is the last continued line
07ff0                 | ' ' 3 - this is the one and only part
07ff0                 | ' 
07ff0                 | ' err=compile_immediate(cont+1,alinemajor) 
07ff0                 | ' if err=0 andalso alinemajor>0 then
07ff0     74 00 90 5D |  if_ne	jmp	#LR__0725
07ff4     01 26 16 F2 | 	cmp	local01, #1 wc
07ff8     6C 00 90 CD |  if_b	jmp	#LR__0725
07ffc                 | '   if cont=3 orelse cont=2 then 
07ffc     03 28 0E F2 | 	cmp	local02, #3 wz
08000     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08004     60 00 90 5D |  if_ne	jmp	#LR__0724
08008                 | '     if alinemajor >lastline then 
08008     4A 00 00 FF 
0800c     8C E4 05 F1 | 	add	objptr, ##38028
08010     F2 14 02 FB | 	rdlong	arg02, objptr
08014     4A 00 00 FF 
08018     8C E4 85 F1 | 	sub	objptr, ##38028
0801c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08020     0C 00 90 ED |  if_be	jmp	#LR__0720
08024     13 13 02 F6 | 	mov	arg01, local01
08028     88 F1 BF FD | 	call	#_add_line_at_end
0802c     38 00 90 FD | 	jmp	#LR__0723
08030                 | LR__0720
08030     13 13 02 F6 | 	mov	arg01, local01
08034     4C EB BF FD | 	call	#_deleteline
08038                 | '       deleteline(alinemajor)  
08038                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08038     4A 00 00 FF 
0803c     8C E4 05 F1 | 	add	objptr, ##38028
08040     F2 14 02 FB | 	rdlong	arg02, objptr
08044     4A 00 00 FF 
08048     8C E4 85 F1 | 	sub	objptr, ##38028
0804c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08050     0C 00 90 ED |  if_be	jmp	#LR__0721
08054     13 13 02 F6 | 	mov	arg01, local01
08058     58 F1 BF FD | 	call	#_add_line_at_end
0805c     08 00 90 FD | 	jmp	#LR__0722
08060                 | LR__0721
08060     13 13 02 F6 | 	mov	arg01, local01
08064     30 EF BF FD | 	call	#_insertline
08068                 | LR__0722
08068                 | LR__0723
08068                 | LR__0724
08068                 | LR__0725
08068                 | ' return err
08068     15 FB 01 F6 | 	mov	result1, local03
0806c     A7 F0 03 F6 | 	mov	ptra, fp
08070     B2 00 A0 FD | 	call	#popregs_
08074                 | _compile_ret
08074     2D 00 64 FD | 	ret
08078                 | 
08078                 | ' 
08078                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08078                 | ' 
08078                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08078                 | _compile_assign
08078     03 4A 05 F6 | 	mov	COUNT_, #3
0807c     A8 00 A0 FD | 	call	#pushregs_
08080     09 27 02 F6 | 	mov	local01, arg01
08084     0B 29 02 F6 | 	mov	local02, arg03
08088     47 00 00 FF 
0808c     7C E4 05 F1 | 	add	objptr, ##36476
08090     F2 26 62 FC | 	wrlong	local01, objptr
08094     04 E4 05 F1 | 	add	objptr, #4
08098     F2 14 62 FC | 	wrlong	arg02, objptr
0809c     47 00 00 FF 
080a0     80 E4 85 F1 | 	sub	objptr, ##36480
080a4     14 13 02 F6 | 	mov	arg01, local02
080a8     01 12 06 F1 | 	add	arg01, #1
080ac     54 FB BF FD | 	call	#_compile_immediate_assign
080b0     FD 2A 02 F6 | 	mov	local03, result1
080b4                 | ' 
080b4                 | ' ucompiledline(0)=alinemajor
080b4                 | ' ucompiledline(1)=alineminor
080b4                 | ' 
080b4                 | ' err=compile_immediate_assign(cont+1) 
080b4                 | ' if alinemajor>0 then
080b4     01 26 16 F2 | 	cmp	local01, #1 wc
080b8     6C 00 90 CD |  if_b	jmp	#LR__0735
080bc                 | '   if cont=3 orelse cont=2 then 
080bc     03 28 0E F2 | 	cmp	local02, #3 wz
080c0     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
080c4     60 00 90 5D |  if_ne	jmp	#LR__0734
080c8                 | '     if alinemajor >lastline then 
080c8     4A 00 00 FF 
080cc     8C E4 05 F1 | 	add	objptr, ##38028
080d0     F2 14 02 FB | 	rdlong	arg02, objptr
080d4     4A 00 00 FF 
080d8     8C E4 85 F1 | 	sub	objptr, ##38028
080dc     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080e0     0C 00 90 ED |  if_be	jmp	#LR__0730
080e4     13 13 02 F6 | 	mov	arg01, local01
080e8     C8 F0 BF FD | 	call	#_add_line_at_end
080ec     38 00 90 FD | 	jmp	#LR__0733
080f0                 | LR__0730
080f0     13 13 02 F6 | 	mov	arg01, local01
080f4     8C EA BF FD | 	call	#_deleteline
080f8                 | '       deleteline(alinemajor)  
080f8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
080f8     4A 00 00 FF 
080fc     8C E4 05 F1 | 	add	objptr, ##38028
08100     F2 14 02 FB | 	rdlong	arg02, objptr
08104     4A 00 00 FF 
08108     8C E4 85 F1 | 	sub	objptr, ##38028
0810c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08110     0C 00 90 ED |  if_be	jmp	#LR__0731
08114     13 13 02 F6 | 	mov	arg01, local01
08118     98 F0 BF FD | 	call	#_add_line_at_end
0811c     08 00 90 FD | 	jmp	#LR__0732
08120                 | LR__0731
08120     13 13 02 F6 | 	mov	arg01, local01
08124     70 EE BF FD | 	call	#_insertline
08128                 | LR__0732
08128                 | LR__0733
08128                 | LR__0734
08128                 | LR__0735
08128                 | ' return err
08128     15 FB 01 F6 | 	mov	result1, local03
0812c     A7 F0 03 F6 | 	mov	ptra, fp
08130     B2 00 A0 FD | 	call	#popregs_
08134                 | _compile_assign_ret
08134     2D 00 64 FD | 	ret
08138                 | 
08138                 | ' 
08138                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08138                 | ' 
08138                 | ' function compile_fun_2p() as ulong
08138                 | _compile_fun_2p
08138     01 4A 05 F6 | 	mov	COUNT_, #1
0813c     A8 00 A0 FD | 	call	#pushregs_
08140     80 2F B0 FD | 	call	#_expr
08144     FD 26 02 F6 | 	mov	local01, result1
08148                 | ' err=expr() : if err>0 then return err
08148     01 26 16 F2 | 	cmp	local01, #1 wc
0814c     13 FB 01 36 |  if_ae	mov	result1, local01
08150     60 00 90 3D |  if_ae	jmp	#LR__0740
08154                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08154     37 00 00 FF 
08158     44 E4 05 F1 | 	add	objptr, ##28228
0815c     F2 26 02 FB | 	rdlong	local01, objptr
08160     03 26 66 F0 | 	shl	local01, #3
08164     02 00 00 FF 
08168     38 E4 85 F1 | 	sub	objptr, ##1080
0816c     F2 26 02 F1 | 	add	local01, objptr
08170     04 26 06 F1 | 	add	local01, #4
08174     13 27 02 FB | 	rdlong	local01, local01
08178     11 26 0E F2 | 	cmp	local01, #17 wz
0817c     35 00 00 FF 
08180     0C E4 85 F1 | 	sub	objptr, ##27148
08184     15 FA 05 56 |  if_ne	mov	result1, #21
08188     28 00 90 5D |  if_ne	jmp	#LR__0740
0818c     37 00 00 FF 
08190     44 E4 05 F1 | 	add	objptr, ##28228
08194     F2 26 02 FB | 	rdlong	local01, objptr
08198     01 26 06 F1 | 	add	local01, #1
0819c     F2 26 62 FC | 	wrlong	local01, objptr
081a0     37 00 00 FF 
081a4     44 E4 85 F1 | 	sub	objptr, ##28228
081a8     18 2F B0 FD | 	call	#_expr
081ac                 | ' err=expr() : if err>0 then return err
081ac     01 FA 15 F2 | 	cmp	result1, #1 wc
081b0                 | ' return 0
081b0     00 FA 05 C6 |  if_b	mov	result1, #0
081b4                 | LR__0740
081b4     A7 F0 03 F6 | 	mov	ptra, fp
081b8     B2 00 A0 FD | 	call	#popregs_
081bc                 | _compile_fun_2p_ret
081bc     2D 00 64 FD | 	ret
081c0                 | 
081c0                 | ' 
081c0                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
081c0                 | ' 
081c0                 | ' function compile_fun_3p() as ulong
081c0                 | _compile_fun_3p
081c0     01 4A 05 F6 | 	mov	COUNT_, #1
081c4     A8 00 A0 FD | 	call	#pushregs_
081c8     F8 2E B0 FD | 	call	#_expr
081cc     FD 26 02 F6 | 	mov	local01, result1
081d0                 | ' err=expr() : if err>0 then return err
081d0     01 26 16 F2 | 	cmp	local01, #1 wc
081d4     13 FB 01 36 |  if_ae	mov	result1, local01
081d8     C8 00 90 3D |  if_ae	jmp	#LR__0750
081dc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081dc     37 00 00 FF 
081e0     44 E4 05 F1 | 	add	objptr, ##28228
081e4     F2 26 02 FB | 	rdlong	local01, objptr
081e8     03 26 66 F0 | 	shl	local01, #3
081ec     02 00 00 FF 
081f0     38 E4 85 F1 | 	sub	objptr, ##1080
081f4     F2 26 02 F1 | 	add	local01, objptr
081f8     04 26 06 F1 | 	add	local01, #4
081fc     13 27 02 FB | 	rdlong	local01, local01
08200     11 26 0E F2 | 	cmp	local01, #17 wz
08204     35 00 00 FF 
08208     0C E4 85 F1 | 	sub	objptr, ##27148
0820c     15 FA 05 56 |  if_ne	mov	result1, #21
08210     90 00 90 5D |  if_ne	jmp	#LR__0750
08214     37 00 00 FF 
08218     44 E4 05 F1 | 	add	objptr, ##28228
0821c     F2 26 02 FB | 	rdlong	local01, objptr
08220     01 26 06 F1 | 	add	local01, #1
08224     F2 26 62 FC | 	wrlong	local01, objptr
08228     37 00 00 FF 
0822c     44 E4 85 F1 | 	sub	objptr, ##28228
08230     90 2E B0 FD | 	call	#_expr
08234     FD 26 02 F6 | 	mov	local01, result1
08238                 | ' err=expr() : if err>0 then return err
08238     01 26 16 F2 | 	cmp	local01, #1 wc
0823c     13 FB 01 36 |  if_ae	mov	result1, local01
08240     60 00 90 3D |  if_ae	jmp	#LR__0750
08244                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08244     37 00 00 FF 
08248     44 E4 05 F1 | 	add	objptr, ##28228
0824c     F2 26 02 FB | 	rdlong	local01, objptr
08250     03 26 66 F0 | 	shl	local01, #3
08254     02 00 00 FF 
08258     38 E4 85 F1 | 	sub	objptr, ##1080
0825c     F2 26 02 F1 | 	add	local01, objptr
08260     04 26 06 F1 | 	add	local01, #4
08264     13 27 02 FB | 	rdlong	local01, local01
08268     11 26 0E F2 | 	cmp	local01, #17 wz
0826c     35 00 00 FF 
08270     0C E4 85 F1 | 	sub	objptr, ##27148
08274     15 FA 05 56 |  if_ne	mov	result1, #21
08278     28 00 90 5D |  if_ne	jmp	#LR__0750
0827c     37 00 00 FF 
08280     44 E4 05 F1 | 	add	objptr, ##28228
08284     F2 26 02 FB | 	rdlong	local01, objptr
08288     01 26 06 F1 | 	add	local01, #1
0828c     F2 26 62 FC | 	wrlong	local01, objptr
08290     37 00 00 FF 
08294     44 E4 85 F1 | 	sub	objptr, ##28228
08298     28 2E B0 FD | 	call	#_expr
0829c                 | ' err=expr() : if err>0 then return err
0829c     01 FA 15 F2 | 	cmp	result1, #1 wc
082a0                 | ' return 0
082a0     00 FA 05 C6 |  if_b	mov	result1, #0
082a4                 | LR__0750
082a4     A7 F0 03 F6 | 	mov	ptra, fp
082a8     B2 00 A0 FD | 	call	#popregs_
082ac                 | _compile_fun_3p_ret
082ac     2D 00 64 FD | 	ret
082b0                 | 
082b0                 | ' 
082b0                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
082b0                 | ' 
082b0                 | ' function compile_fun_4p() as ulong
082b0                 | _compile_fun_4p
082b0     01 4A 05 F6 | 	mov	COUNT_, #1
082b4     A8 00 A0 FD | 	call	#pushregs_
082b8     08 2E B0 FD | 	call	#_expr
082bc     FD 26 02 F6 | 	mov	local01, result1
082c0                 | ' err=expr() : if err>0 then return err
082c0     01 26 16 F2 | 	cmp	local01, #1 wc
082c4     13 FB 01 36 |  if_ae	mov	result1, local01
082c8     30 01 90 3D |  if_ae	jmp	#LR__0760
082cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
082cc     37 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##28228
082d4     F2 26 02 FB | 	rdlong	local01, objptr
082d8     03 26 66 F0 | 	shl	local01, #3
082dc     02 00 00 FF 
082e0     38 E4 85 F1 | 	sub	objptr, ##1080
082e4     F2 26 02 F1 | 	add	local01, objptr
082e8     04 26 06 F1 | 	add	local01, #4
082ec     13 27 02 FB | 	rdlong	local01, local01
082f0     11 26 0E F2 | 	cmp	local01, #17 wz
082f4     35 00 00 FF 
082f8     0C E4 85 F1 | 	sub	objptr, ##27148
082fc     15 FA 05 56 |  if_ne	mov	result1, #21
08300     F8 00 90 5D |  if_ne	jmp	#LR__0760
08304     37 00 00 FF 
08308     44 E4 05 F1 | 	add	objptr, ##28228
0830c     F2 26 02 FB | 	rdlong	local01, objptr
08310     01 26 06 F1 | 	add	local01, #1
08314     F2 26 62 FC | 	wrlong	local01, objptr
08318     37 00 00 FF 
0831c     44 E4 85 F1 | 	sub	objptr, ##28228
08320     A0 2D B0 FD | 	call	#_expr
08324     FD 26 02 F6 | 	mov	local01, result1
08328                 | ' err=expr() : if err>0 then return err
08328     01 26 16 F2 | 	cmp	local01, #1 wc
0832c     13 FB 01 36 |  if_ae	mov	result1, local01
08330     C8 00 90 3D |  if_ae	jmp	#LR__0760
08334                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08334     37 00 00 FF 
08338     44 E4 05 F1 | 	add	objptr, ##28228
0833c     F2 26 02 FB | 	rdlong	local01, objptr
08340     03 26 66 F0 | 	shl	local01, #3
08344     02 00 00 FF 
08348     38 E4 85 F1 | 	sub	objptr, ##1080
0834c     F2 26 02 F1 | 	add	local01, objptr
08350     04 26 06 F1 | 	add	local01, #4
08354     13 27 02 FB | 	rdlong	local01, local01
08358     11 26 0E F2 | 	cmp	local01, #17 wz
0835c     35 00 00 FF 
08360     0C E4 85 F1 | 	sub	objptr, ##27148
08364     15 FA 05 56 |  if_ne	mov	result1, #21
08368     90 00 90 5D |  if_ne	jmp	#LR__0760
0836c     37 00 00 FF 
08370     44 E4 05 F1 | 	add	objptr, ##28228
08374     F2 26 02 FB | 	rdlong	local01, objptr
08378     01 26 06 F1 | 	add	local01, #1
0837c     F2 26 62 FC | 	wrlong	local01, objptr
08380     37 00 00 FF 
08384     44 E4 85 F1 | 	sub	objptr, ##28228
08388     38 2D B0 FD | 	call	#_expr
0838c     FD 26 02 F6 | 	mov	local01, result1
08390                 | ' err=expr() : if err>0 then return err
08390     01 26 16 F2 | 	cmp	local01, #1 wc
08394     13 FB 01 36 |  if_ae	mov	result1, local01
08398     60 00 90 3D |  if_ae	jmp	#LR__0760
0839c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
0839c     37 00 00 FF 
083a0     44 E4 05 F1 | 	add	objptr, ##28228
083a4     F2 26 02 FB | 	rdlong	local01, objptr
083a8     03 26 66 F0 | 	shl	local01, #3
083ac     02 00 00 FF 
083b0     38 E4 85 F1 | 	sub	objptr, ##1080
083b4     F2 26 02 F1 | 	add	local01, objptr
083b8     04 26 06 F1 | 	add	local01, #4
083bc     13 27 02 FB | 	rdlong	local01, local01
083c0     11 26 0E F2 | 	cmp	local01, #17 wz
083c4     35 00 00 FF 
083c8     0C E4 85 F1 | 	sub	objptr, ##27148
083cc     15 FA 05 56 |  if_ne	mov	result1, #21
083d0     28 00 90 5D |  if_ne	jmp	#LR__0760
083d4     37 00 00 FF 
083d8     44 E4 05 F1 | 	add	objptr, ##28228
083dc     F2 26 02 FB | 	rdlong	local01, objptr
083e0     01 26 06 F1 | 	add	local01, #1
083e4     F2 26 62 FC | 	wrlong	local01, objptr
083e8     37 00 00 FF 
083ec     44 E4 85 F1 | 	sub	objptr, ##28228
083f0     D0 2C B0 FD | 	call	#_expr
083f4                 | ' err=expr() : if err>0 then return err
083f4     01 FA 15 F2 | 	cmp	result1, #1 wc
083f8                 | ' return 0
083f8     00 FA 05 C6 |  if_b	mov	result1, #0
083fc                 | LR__0760
083fc     A7 F0 03 F6 | 	mov	ptra, fp
08400     B2 00 A0 FD | 	call	#popregs_
08404                 | _compile_fun_4p_ret
08404     2D 00 64 FD | 	ret
08408                 | 
08408                 | ' 
08408                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08408                 | ' 
08408                 | ' function compile_fun_varp() as ulong,ulong 
08408                 | _compile_fun_varp
08408     03 4A 05 F6 | 	mov	COUNT_, #3
0840c     A8 00 A0 FD | 	call	#pushregs_
08410     00 26 06 F6 | 	mov	local01, #0
08414                 | ' 
08414                 | ' i=0 : err=0
08414                 | ' if lparts(ct).token<>token_end then
08414     37 00 00 FF 
08418     44 E4 05 F1 | 	add	objptr, ##28228
0841c     F2 28 02 FB | 	rdlong	local02, objptr
08420     03 28 66 F0 | 	shl	local02, #3
08424     02 00 00 FF 
08428     38 E4 85 F1 | 	sub	objptr, ##1080
0842c     F2 28 02 F1 | 	add	local02, objptr
08430     04 28 06 F1 | 	add	local02, #4
08434     14 29 02 FB | 	rdlong	local02, local02
08438     FE 29 0E F2 | 	cmp	local02, #510 wz
0843c     35 00 00 FF 
08440     0C E4 85 F1 | 	sub	objptr, ##27148
08444     88 00 90 AD |  if_e	jmp	#LR__0771
08448                 | '   do
08448                 | LR__0770
08448     78 2C B0 FD | 	call	#_expr
0844c     01 26 06 F1 | 	add	local01, #1
08450                 | '     expr()
08450                 | '     i+=1
08450                 | '     if lparts(ct).token=token_comma then ct+=1
08450     37 00 00 FF 
08454     44 E4 05 F1 | 	add	objptr, ##28228
08458     F2 28 02 FB | 	rdlong	local02, objptr
0845c     03 28 66 F0 | 	shl	local02, #3
08460     02 00 00 FF 
08464     38 E4 85 F1 | 	sub	objptr, ##1080
08468     F2 28 02 F1 | 	add	local02, objptr
0846c     04 28 06 F1 | 	add	local02, #4
08470     14 29 02 FB | 	rdlong	local02, local02
08474     11 28 0E F2 | 	cmp	local02, #17 wz
08478     35 00 00 FF 
0847c     0C E4 85 F1 | 	sub	objptr, ##27148
08480     37 00 00 AF 
08484     44 E4 05 A1 |  if_e	add	objptr, ##28228
08488     F2 2A 02 AB |  if_e	rdlong	local03, objptr
0848c     01 2A 06 A1 |  if_e	add	local03, #1
08490     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08494     37 00 00 AF 
08498     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0849c                 | '     if lparts(ct).token=token_end then exit loop
0849c     37 00 00 FF 
084a0     44 E4 05 F1 | 	add	objptr, ##28228
084a4     F2 28 02 FB | 	rdlong	local02, objptr
084a8     03 28 66 F0 | 	shl	local02, #3
084ac     02 00 00 FF 
084b0     38 E4 85 F1 | 	sub	objptr, ##1080
084b4     F2 28 02 F1 | 	add	local02, objptr
084b8     04 28 06 F1 | 	add	local02, #4
084bc     14 29 02 FB | 	rdlong	local02, local02
084c0     FE 29 0E F2 | 	cmp	local02, #510 wz
084c4     35 00 00 FF 
084c8     0C E4 85 F1 | 	sub	objptr, ##27148
084cc     78 FF 9F 5D |  if_ne	jmp	#LR__0770
084d0                 | LR__0771
084d0                 | ' return i,err
084d0     13 FB 01 F6 | 	mov	result1, local01
084d4     00 FC 05 F6 | 	mov	result2, #0
084d8     A7 F0 03 F6 | 	mov	ptra, fp
084dc     B2 00 A0 FD | 	call	#popregs_
084e0                 | _compile_fun_varp_ret
084e0     2D 00 64 FD | 	ret
084e4                 | 
084e4                 | ' 
084e4                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
084e4                 | ' 
084e4                 | ' function compile_input() as ulong,ulong 
084e4                 | _compile_input
084e4     0B 4A 05 F6 | 	mov	COUNT_, #11
084e8     A8 00 A0 FD | 	call	#pushregs_
084ec                 | ' 
084ec                 | ' if lparts(ct).token=token_string then
084ec     37 00 00 FF 
084f0     44 E4 05 F1 | 	add	objptr, ##28228
084f4     F2 16 02 FB | 	rdlong	arg03, objptr
084f8     03 16 66 F0 | 	shl	arg03, #3
084fc     02 00 00 FF 
08500     38 E4 85 F1 | 	sub	objptr, ##1080
08504     F2 16 02 F1 | 	add	arg03, objptr
08508     04 16 06 F1 | 	add	arg03, #4
0850c     0B FD 01 FB | 	rdlong	result2, arg03
08510     01 00 00 FF 
08514     03 FC 0D F2 | 	cmp	result2, ##515 wz
08518     35 00 00 FF 
0851c     0C E4 85 F1 | 	sub	objptr, ##27148
08520     04 05 90 5D |  if_ne	jmp	#LR__0786
08524     37 00 00 FF 
08528     44 E4 05 F1 | 	add	objptr, ##28228
0852c     F2 16 02 FB | 	rdlong	arg03, objptr
08530     03 16 66 F0 | 	shl	arg03, #3
08534     02 00 00 FF 
08538     38 E4 85 F1 | 	sub	objptr, ##1080
0853c     F2 16 02 F1 | 	add	arg03, objptr
08540     0B 13 02 FB | 	rdlong	arg01, arg03
08544     35 00 00 FF 
08548     0C E4 85 F1 | 	sub	objptr, ##27148
0854c     09 2D 02 F6 | 	mov	local04, arg01
08550     97 06 48 FB | 	callpa	#(@LR__0781-@LR__0780)>>2,fcache_load_ptr_
08554                 | LR__0780
08554     16 FB C9 FA | 	rdbyte	result1, local04 wz
08558     01 2C 06 51 |  if_ne	add	local04, #1
0855c     F4 FF 9F 5D |  if_ne	jmp	#LR__0780
08560                 | LR__0781
08560     09 2D 82 F1 | 	sub	local04, arg01
08564     16 FB 01 F6 | 	mov	result1, local04
08568     52 00 00 FF 
0856c     00 E4 05 F1 | 	add	objptr, ##41984
08570     F2 FA 61 FC | 	wrlong	result1, objptr
08574     54 E4 85 F1 | 	sub	objptr, #84
08578     F2 12 02 FB | 	rdlong	arg01, objptr
0857c     FD 12 82 F1 | 	sub	arg01, result1
08580     04 12 86 F1 | 	sub	arg01, #4
08584     03 12 26 F5 | 	andn	arg01, #3
08588     F2 12 62 FC | 	wrlong	arg01, objptr
0858c     54 E4 05 F1 | 	add	objptr, #84
08590     F2 14 02 FB | 	rdlong	arg02, objptr
08594     52 00 00 FF 
08598     00 E4 85 F1 | 	sub	objptr, ##41984
0859c     F0 71 B1 FD | 	call	#_pslpoke
085a0                 | '   pslpoke memtop,l
085a0                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
085a0     01 2E 06 F6 | 	mov	local05, #1
085a4     52 00 00 FF 
085a8     00 E4 05 F1 | 	add	objptr, ##41984
085ac     F2 30 02 FB | 	rdlong	local06, objptr
085b0     52 00 00 FF 
085b4     00 E4 85 F1 | 	sub	objptr, ##41984
085b8     01 30 06 F1 | 	add	local06, #1
085bc                 | LR__0782
085bc     18 2F 52 F2 | 	cmps	local05, local06 wc
085c0     5C 00 90 3D |  if_ae	jmp	#LR__0783
085c4     51 00 00 FF 
085c8     AC E5 05 F1 | 	add	objptr, ##41900
085cc     F2 2C 02 FB | 	rdlong	local04, objptr
085d0     03 2C 06 F1 | 	add	local04, #3
085d4     17 2D 02 F1 | 	add	local04, local05
085d8     1A 00 00 FF 
085dc     68 E5 85 F1 | 	sub	objptr, ##13672
085e0     F2 16 02 FB | 	rdlong	arg03, objptr
085e4     03 16 66 F0 | 	shl	arg03, #3
085e8     02 00 00 FF 
085ec     38 E4 85 F1 | 	sub	objptr, ##1080
085f0     F2 16 02 F1 | 	add	arg03, objptr
085f4     0B 13 02 FB | 	rdlong	arg01, arg03
085f8     17 15 02 F6 | 	mov	arg02, local05
085fc     01 16 06 F6 | 	mov	arg03, #1
08600     35 00 00 FF 
08604     0C E4 85 F1 | 	sub	objptr, ##27148
08608     1C CB B1 FD | 	call	#__system__Mid_S
0860c     FD 14 C2 FA | 	rdbyte	arg02, result1
08610     16 13 02 F6 | 	mov	arg01, local04
08614     08 72 B1 FD | 	call	#_pspoke
08618     01 2E 06 F1 | 	add	local05, #1
0861c     9C FF 9F FD | 	jmp	#LR__0782
08620                 | LR__0783
08620     51 00 00 FF 
08624     AC E5 05 F1 | 	add	objptr, ##41900
08628     F2 26 02 FB | 	rdlong	local01, objptr
0862c     2B 2A 06 F6 | 	mov	local03, #43
08630     13 33 02 F6 | 	mov	local07, local01
08634     14 35 02 F6 | 	mov	local08, local02
08638     15 15 02 F6 | 	mov	arg02, local03
0863c     07 00 00 FF 
08640     30 E5 85 F1 | 	sub	objptr, ##3888
08644     F2 30 02 FB | 	rdlong	local06, objptr
08648     18 2F 02 F6 | 	mov	local05, local06
0864c     01 2E 66 F0 | 	shl	local05, #1
08650     18 2F 02 F1 | 	add	local05, local06
08654     02 2E 66 F0 | 	shl	local05, #2
08658     03 00 00 FF 
0865c     00 E4 85 F1 | 	sub	objptr, ##1536
08660     F2 2E 02 F1 | 	add	local05, objptr
08664     17 33 62 FC | 	wrlong	local07, local05
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 32 02 FB | 	rdlong	local07, objptr
08674     19 31 02 F6 | 	mov	local06, local07
08678     01 30 66 F0 | 	shl	local06, #1
0867c     19 31 02 F1 | 	add	local06, local07
08680     02 30 66 F0 | 	shl	local06, #2
08684     03 00 00 FF 
08688     00 E4 85 F1 | 	sub	objptr, ##1536
0868c     F2 30 02 F1 | 	add	local06, objptr
08690     04 30 06 F1 | 	add	local06, #4
08694     18 35 62 FC | 	wrlong	local08, local06
08698     03 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##1536
086a0     F2 32 02 FB | 	rdlong	local07, objptr
086a4     19 35 02 F6 | 	mov	local08, local07
086a8     01 34 66 F0 | 	shl	local08, #1
086ac     19 35 02 F1 | 	add	local08, local07
086b0     02 34 66 F0 | 	shl	local08, #2
086b4     03 00 00 FF 
086b8     00 E4 85 F1 | 	sub	objptr, ##1536
086bc     F2 34 02 F1 | 	add	local08, objptr
086c0     08 34 06 F1 | 	add	local08, #8
086c4     1A 15 62 FC | 	wrlong	arg02, local08
086c8     03 00 00 FF 
086cc     00 E4 05 F1 | 	add	objptr, ##1536
086d0     F2 32 02 FB | 	rdlong	local07, objptr
086d4     01 32 06 F1 | 	add	local07, #1
086d8     F2 32 62 FC | 	wrlong	local07, objptr
086dc     13 00 00 FF 
086e0     38 E4 85 F1 | 	sub	objptr, ##9784
086e4     F2 32 02 FB | 	rdlong	local07, objptr
086e8     01 32 06 F1 | 	add	local07, #1
086ec     F2 32 62 FC | 	wrlong	local07, objptr
086f0                 | '   t1.result.uresult=memtop
086f0                 | '   t1.result_type=result_string2  
086f0                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
086f0                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
086f0     03 32 66 F0 | 	shl	local07, #3
086f4     02 00 00 FF 
086f8     38 E4 85 F1 | 	sub	objptr, ##1080
086fc     F2 32 02 F1 | 	add	local07, objptr
08700     04 32 06 F1 | 	add	local07, #4
08704     19 33 02 FB | 	rdlong	local07, local07
08708     11 32 0E F2 | 	cmp	local07, #17 wz
0870c     35 00 00 FF 
08710     0C E4 85 F1 | 	sub	objptr, ##27148
08714     60 01 90 5D |  if_ne	jmp	#LR__0784
08718     21 2A 06 F6 | 	mov	local03, #33
0871c     13 33 02 F6 | 	mov	local07, local01
08720     14 35 02 F6 | 	mov	local08, local02
08724     15 37 02 F6 | 	mov	local09, local03
08728     4A 00 00 FF 
0872c     7C E4 05 F1 | 	add	objptr, ##38012
08730     F2 30 02 FB | 	rdlong	local06, objptr
08734     18 2F 02 F6 | 	mov	local05, local06
08738     01 2E 66 F0 | 	shl	local05, #1
0873c     18 2F 02 F1 | 	add	local05, local06
08740     02 2E 66 F0 | 	shl	local05, #2
08744     03 00 00 FF 
08748     00 E4 85 F1 | 	sub	objptr, ##1536
0874c     F2 2E 02 F1 | 	add	local05, objptr
08750     17 33 62 FC | 	wrlong	local07, local05
08754     03 00 00 FF 
08758     00 E4 05 F1 | 	add	objptr, ##1536
0875c     F2 38 02 FB | 	rdlong	local10, objptr
08760     1C 33 02 F6 | 	mov	local07, local10
08764     01 32 66 F0 | 	shl	local07, #1
08768     1C 33 02 F1 | 	add	local07, local10
0876c     02 32 66 F0 | 	shl	local07, #2
08770     03 00 00 FF 
08774     00 E4 85 F1 | 	sub	objptr, ##1536
08778     F2 32 02 F1 | 	add	local07, objptr
0877c     04 32 06 F1 | 	add	local07, #4
08780     19 35 62 FC | 	wrlong	local08, local07
08784     03 00 00 FF 
08788     00 E4 05 F1 | 	add	objptr, ##1536
0878c     F2 32 02 FB | 	rdlong	local07, objptr
08790     19 3B 02 F6 | 	mov	local11, local07
08794     01 3A 66 F0 | 	shl	local11, #1
08798     19 3B 02 F1 | 	add	local11, local07
0879c     02 3A 66 F0 | 	shl	local11, #2
087a0     03 00 00 FF 
087a4     00 E4 85 F1 | 	sub	objptr, ##1536
087a8     F2 3A 02 F1 | 	add	local11, objptr
087ac     08 3A 06 F1 | 	add	local11, #8
087b0     1D 37 62 FC | 	wrlong	local09, local11
087b4     03 00 00 FF 
087b8     00 E4 05 F1 | 	add	objptr, ##1536
087bc     F2 32 02 FB | 	rdlong	local07, objptr
087c0     01 32 06 F1 | 	add	local07, #1
087c4     F2 32 62 FC | 	wrlong	local07, objptr
087c8     44 2A 06 F6 | 	mov	local03, #68
087cc     13 33 02 F6 | 	mov	local07, local01
087d0     14 35 02 F6 | 	mov	local08, local02
087d4     15 37 02 F6 | 	mov	local09, local03
087d8     F2 3A 02 FB | 	rdlong	local11, objptr
087dc     1D 39 02 F6 | 	mov	local10, local11
087e0     01 38 66 F0 | 	shl	local10, #1
087e4     1D 39 02 F1 | 	add	local10, local11
087e8     02 38 66 F0 | 	shl	local10, #2
087ec     03 00 00 FF 
087f0     00 E4 85 F1 | 	sub	objptr, ##1536
087f4     F2 38 02 F1 | 	add	local10, objptr
087f8     1C 33 62 FC | 	wrlong	local07, local10
087fc     03 00 00 FF 
08800     00 E4 05 F1 | 	add	objptr, ##1536
08804     F2 3A 02 FB | 	rdlong	local11, objptr
08808     1D 39 02 F6 | 	mov	local10, local11
0880c     01 38 66 F0 | 	shl	local10, #1
08810     1D 39 02 F1 | 	add	local10, local11
08814     02 38 66 F0 | 	shl	local10, #2
08818     03 00 00 FF 
0881c     00 E4 85 F1 | 	sub	objptr, ##1536
08820     F2 38 02 F1 | 	add	local10, objptr
08824     04 38 06 F1 | 	add	local10, #4
08828     1C 35 62 FC | 	wrlong	local08, local10
0882c     03 00 00 FF 
08830     00 E4 05 F1 | 	add	objptr, ##1536
08834     F2 38 02 FB | 	rdlong	local10, objptr
08838     1C 3B 02 F6 | 	mov	local11, local10
0883c     01 3A 66 F0 | 	shl	local11, #1
08840     1C 3B 02 F1 | 	add	local11, local10
08844     02 3A 66 F0 | 	shl	local11, #2
08848     03 00 00 FF 
0884c     00 E4 85 F1 | 	sub	objptr, ##1536
08850     F2 3A 02 F1 | 	add	local11, objptr
08854     08 3A 06 F1 | 	add	local11, #8
08858     1D 37 62 FC | 	wrlong	local09, local11
0885c     03 00 00 FF 
08860     00 E4 05 F1 | 	add	objptr, ##1536
08864     F2 32 02 FB | 	rdlong	local07, objptr
08868     01 32 06 F1 | 	add	local07, #1
0886c     F2 32 62 FC | 	wrlong	local07, objptr
08870     4A 00 00 FF 
08874     7C E4 85 F1 | 	sub	objptr, ##38012
08878                 | LR__0784
08878                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08878     37 00 00 FF 
0887c     44 E4 05 F1 | 	add	objptr, ##28228
08880     F2 32 02 FB | 	rdlong	local07, objptr
08884     03 32 66 F0 | 	shl	local07, #3
08888     02 00 00 FF 
0888c     38 E4 85 F1 | 	sub	objptr, ##1080
08890     F2 32 02 F1 | 	add	local07, objptr
08894     04 32 06 F1 | 	add	local07, #4
08898     19 3B 02 FB | 	rdlong	local11, local07
0889c     12 3A 0E F2 | 	cmp	local11, #18 wz
088a0     35 00 00 FF 
088a4     0C E4 85 F1 | 	sub	objptr, ##27148
088a8     60 01 90 5D |  if_ne	jmp	#LR__0785
088ac     22 2A 06 F6 | 	mov	local03, #34
088b0     13 33 02 F6 | 	mov	local07, local01
088b4     14 35 02 F6 | 	mov	local08, local02
088b8     15 37 02 F6 | 	mov	local09, local03
088bc     4A 00 00 FF 
088c0     7C E4 05 F1 | 	add	objptr, ##38012
088c4     F2 3A 02 FB | 	rdlong	local11, objptr
088c8     1D 39 02 F6 | 	mov	local10, local11
088cc     01 38 66 F0 | 	shl	local10, #1
088d0     1D 39 02 F1 | 	add	local10, local11
088d4     02 38 66 F0 | 	shl	local10, #2
088d8     03 00 00 FF 
088dc     00 E4 85 F1 | 	sub	objptr, ##1536
088e0     F2 38 02 F1 | 	add	local10, objptr
088e4     1C 33 62 FC | 	wrlong	local07, local10
088e8     03 00 00 FF 
088ec     00 E4 05 F1 | 	add	objptr, ##1536
088f0     F2 3A 02 FB | 	rdlong	local11, objptr
088f4     1D 33 02 F6 | 	mov	local07, local11
088f8     01 32 66 F0 | 	shl	local07, #1
088fc     1D 33 02 F1 | 	add	local07, local11
08900     02 32 66 F0 | 	shl	local07, #2
08904     03 00 00 FF 
08908     00 E4 85 F1 | 	sub	objptr, ##1536
0890c     F2 32 02 F1 | 	add	local07, objptr
08910     04 32 06 F1 | 	add	local07, #4
08914     19 35 62 FC | 	wrlong	local08, local07
08918     03 00 00 FF 
0891c     00 E4 05 F1 | 	add	objptr, ##1536
08920     F2 32 02 FB | 	rdlong	local07, objptr
08924     19 3B 02 F6 | 	mov	local11, local07
08928     01 3A 66 F0 | 	shl	local11, #1
0892c     19 3B 02 F1 | 	add	local11, local07
08930     02 3A 66 F0 | 	shl	local11, #2
08934     03 00 00 FF 
08938     00 E4 85 F1 | 	sub	objptr, ##1536
0893c     F2 3A 02 F1 | 	add	local11, objptr
08940     08 3A 06 F1 | 	add	local11, #8
08944     1D 37 62 FC | 	wrlong	local09, local11
08948     03 00 00 FF 
0894c     00 E4 05 F1 | 	add	objptr, ##1536
08950     F2 32 02 FB | 	rdlong	local07, objptr
08954     01 32 06 F1 | 	add	local07, #1
08958     F2 32 62 FC | 	wrlong	local07, objptr
0895c     44 2A 06 F6 | 	mov	local03, #68
08960     13 33 02 F6 | 	mov	local07, local01
08964     14 35 02 F6 | 	mov	local08, local02
08968     15 37 02 F6 | 	mov	local09, local03
0896c     F2 3A 02 FB | 	rdlong	local11, objptr
08970     1D 39 02 F6 | 	mov	local10, local11
08974     01 38 66 F0 | 	shl	local10, #1
08978     1D 39 02 F1 | 	add	local10, local11
0897c     02 38 66 F0 | 	shl	local10, #2
08980     03 00 00 FF 
08984     00 E4 85 F1 | 	sub	objptr, ##1536
08988     F2 38 02 F1 | 	add	local10, objptr
0898c     1C 33 62 FC | 	wrlong	local07, local10
08990     03 00 00 FF 
08994     00 E4 05 F1 | 	add	objptr, ##1536
08998     F2 3A 02 FB | 	rdlong	local11, objptr
0899c     1D 39 02 F6 | 	mov	local10, local11
089a0     01 38 66 F0 | 	shl	local10, #1
089a4     1D 39 02 F1 | 	add	local10, local11
089a8     02 38 66 F0 | 	shl	local10, #2
089ac     03 00 00 FF 
089b0     00 E4 85 F1 | 	sub	objptr, ##1536
089b4     F2 38 02 F1 | 	add	local10, objptr
089b8     04 38 06 F1 | 	add	local10, #4
089bc     1C 35 62 FC | 	wrlong	local08, local10
089c0     03 00 00 FF 
089c4     00 E4 05 F1 | 	add	objptr, ##1536
089c8     F2 38 02 FB | 	rdlong	local10, objptr
089cc     1C 3B 02 F6 | 	mov	local11, local10
089d0     01 3A 66 F0 | 	shl	local11, #1
089d4     1C 3B 02 F1 | 	add	local11, local10
089d8     02 3A 66 F0 | 	shl	local11, #2
089dc     03 00 00 FF 
089e0     00 E4 85 F1 | 	sub	objptr, ##1536
089e4     F2 3A 02 F1 | 	add	local11, objptr
089e8     08 3A 06 F1 | 	add	local11, #8
089ec     1D 37 62 FC | 	wrlong	local09, local11
089f0     03 00 00 FF 
089f4     00 E4 05 F1 | 	add	objptr, ##1536
089f8     F2 32 02 FB | 	rdlong	local07, objptr
089fc     01 32 06 F1 | 	add	local07, #1
08a00     F2 32 62 FC | 	wrlong	local07, objptr
08a04     4A 00 00 FF 
08a08     7C E4 85 F1 | 	sub	objptr, ##38012
08a0c                 | LR__0785
08a0c     37 00 00 FF 
08a10     44 E4 05 F1 | 	add	objptr, ##28228
08a14     F2 32 02 FB | 	rdlong	local07, objptr
08a18     01 32 06 F1 | 	add	local07, #1
08a1c     F2 32 62 FC | 	wrlong	local07, objptr
08a20     37 00 00 FF 
08a24     44 E4 85 F1 | 	sub	objptr, ##28228
08a28                 | LR__0786
08a28     00 2E 06 F6 | 	mov	local05, #0
08a2c     00 3A 06 F6 | 	mov	local11, #0
08a30                 | ' 
08a30                 | ' i=0 : err=0
08a30                 | ' if lparts(ct).token<>token_end then
08a30     37 00 00 FF 
08a34     44 E4 05 F1 | 	add	objptr, ##28228
08a38     F2 38 02 FB | 	rdlong	local10, objptr
08a3c     03 38 66 F0 | 	shl	local10, #3
08a40     02 00 00 FF 
08a44     38 E4 85 F1 | 	sub	objptr, ##1080
08a48     F2 38 02 F1 | 	add	local10, objptr
08a4c     04 38 06 F1 | 	add	local10, #4
08a50     1C 39 02 FB | 	rdlong	local10, local10
08a54     FE 39 0E F2 | 	cmp	local10, #510 wz
08a58     35 00 00 FF 
08a5c     0C E4 85 F1 | 	sub	objptr, ##27148
08a60     94 00 90 AD |  if_e	jmp	#LR__0788
08a64                 | '   do
08a64                 | LR__0787
08a64     C8 22 B0 FD | 	call	#_getaddr
08a68     FD 3A 02 F6 | 	mov	local11, result1
08a6c     37 00 00 FF 
08a70     44 E4 05 F1 | 	add	objptr, ##28228
08a74     F2 38 02 FB | 	rdlong	local10, objptr
08a78     01 38 06 F1 | 	add	local10, #1
08a7c     F2 38 62 FC | 	wrlong	local10, objptr
08a80     01 2E 06 F1 | 	add	local05, #1
08a84                 | '     err=getaddr() :ct+=1
08a84                 | '     i+=1 
08a84                 | '     if lparts(ct).token=token_comma then ct+=1 
08a84     03 38 66 F0 | 	shl	local10, #3
08a88     02 00 00 FF 
08a8c     38 E4 85 F1 | 	sub	objptr, ##1080
08a90     F2 38 02 F1 | 	add	local10, objptr
08a94     04 38 06 F1 | 	add	local10, #4
08a98     1C 39 02 FB | 	rdlong	local10, local10
08a9c     11 38 0E F2 | 	cmp	local10, #17 wz
08aa0     35 00 00 FF 
08aa4     0C E4 85 F1 | 	sub	objptr, ##27148
08aa8     37 00 00 AF 
08aac     44 E4 05 A1 |  if_e	add	objptr, ##28228
08ab0     F2 32 02 AB |  if_e	rdlong	local07, objptr
08ab4     01 32 06 A1 |  if_e	add	local07, #1
08ab8     F2 32 62 AC |  if_e	wrlong	local07, objptr
08abc     37 00 00 AF 
08ac0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08ac4                 | '     if lparts(ct).token=token_end then exit loop
08ac4     37 00 00 FF 
08ac8     44 E4 05 F1 | 	add	objptr, ##28228
08acc     F2 38 02 FB | 	rdlong	local10, objptr
08ad0     03 38 66 F0 | 	shl	local10, #3
08ad4     02 00 00 FF 
08ad8     38 E4 85 F1 | 	sub	objptr, ##1080
08adc     F2 38 02 F1 | 	add	local10, objptr
08ae0     04 38 06 F1 | 	add	local10, #4
08ae4     1C 39 02 FB | 	rdlong	local10, local10
08ae8     FE 39 0E F2 | 	cmp	local10, #510 wz
08aec     35 00 00 FF 
08af0     0C E4 85 F1 | 	sub	objptr, ##27148
08af4     6C FF 9F 5D |  if_ne	jmp	#LR__0787
08af8                 | LR__0788
08af8                 | ' return i,err
08af8     17 FB 01 F6 | 	mov	result1, local05
08afc     1D FD 01 F6 | 	mov	result2, local11
08b00     A7 F0 03 F6 | 	mov	ptra, fp
08b04     B2 00 A0 FD | 	call	#popregs_
08b08                 | _compile_input_ret
08b08     2D 00 64 FD | 	ret
08b0c                 | 
08b0c                 | ' 
08b0c                 | ' '----- compile assign to an array element
08b0c                 | ' 
08b0c                 | ' function compile_array_assign() as ulong 
08b0c                 | _compile_array_assign
08b0c     0B 4A 05 F6 | 	mov	COUNT_, #11
08b10     A8 00 A0 FD | 	call	#pushregs_
08b14     00 2C 06 F6 | 	mov	local04, #0
08b18     00 2E 06 F6 | 	mov	local05, #0
08b1c     37 00 00 FF 
08b20     44 E4 05 F1 | 	add	objptr, ##28228
08b24     F2 30 02 FB | 	rdlong	local06, objptr
08b28     18 FB 01 F6 | 	mov	result1, local06
08b2c     01 FA 85 F1 | 	sub	result1, #1
08b30     03 FA 65 F0 | 	shl	result1, #3
08b34     02 00 00 FF 
08b38     38 E4 85 F1 | 	sub	objptr, ##1080
08b3c     F2 FA 01 F1 | 	add	result1, objptr
08b40     FD 32 02 FB | 	rdlong	local07, result1
08b44                 | ' numpar=0 : err=0
08b44                 | ' varname$=lparts(ct-1).part$
08b44                 | ' if lparts(ct).token=token_lpar then
08b44     03 30 66 F0 | 	shl	local06, #3
08b48     F2 30 02 F1 | 	add	local06, objptr
08b4c     04 30 06 F1 | 	add	local06, #4
08b50     18 31 02 FB | 	rdlong	local06, local06
08b54     15 30 0E F2 | 	cmp	local06, #21 wz
08b58     35 00 00 FF 
08b5c     0C E4 85 F1 | 	sub	objptr, ##27148
08b60     F4 01 90 5D |  if_ne	jmp	#LR__0794
08b64     37 00 00 FF 
08b68     44 E4 05 F1 | 	add	objptr, ##28228
08b6c     F2 34 02 FB | 	rdlong	local08, objptr
08b70     01 34 06 F1 | 	add	local08, #1
08b74     F2 34 62 FC | 	wrlong	local08, objptr
08b78     37 00 00 FF 
08b7c     44 E4 85 F1 | 	sub	objptr, ##28228
08b80                 | '   ct+=1 											' omit this lpar, this is for expr list
08b80                 | '   do
08b80                 | LR__0790
08b80     40 25 B0 FD | 	call	#_expr
08b84     37 00 00 FF 
08b88     44 E4 05 F1 | 	add	objptr, ##28228
08b8c     F2 30 02 FB | 	rdlong	local06, objptr
08b90     01 30 06 F1 | 	add	local06, #1
08b94     F2 30 62 FC | 	wrlong	local06, objptr
08b98     01 2C 06 F1 | 	add	local04, #1
08b9c     01 30 86 F1 | 	sub	local06, #1
08ba0     03 30 66 F0 | 	shl	local06, #3
08ba4     02 00 00 FF 
08ba8     38 E4 85 F1 | 	sub	objptr, ##1080
08bac     F2 30 02 F1 | 	add	local06, objptr
08bb0     04 30 06 F1 | 	add	local06, #4
08bb4     18 35 02 FB | 	rdlong	local08, local06
08bb8     14 34 0E F2 | 	cmp	local08, #20 wz
08bbc     35 00 00 FF 
08bc0     0C E4 85 F1 | 	sub	objptr, ##27148
08bc4     34 00 90 AD |  if_e	jmp	#LR__0791
08bc8     37 00 00 FF 
08bcc     44 E4 05 F1 | 	add	objptr, ##28228
08bd0     F2 34 02 FB | 	rdlong	local08, objptr
08bd4     03 34 66 F0 | 	shl	local08, #3
08bd8     02 00 00 FF 
08bdc     38 E4 85 F1 | 	sub	objptr, ##1080
08be0     F2 34 02 F1 | 	add	local08, objptr
08be4     04 34 06 F1 | 	add	local08, #4
08be8     1A 35 02 FB | 	rdlong	local08, local08
08bec     FE 35 0E F2 | 	cmp	local08, #510 wz
08bf0     35 00 00 FF 
08bf4     0C E4 85 F1 | 	sub	objptr, ##27148
08bf8     84 FF 9F 5D |  if_ne	jmp	#LR__0790
08bfc                 | LR__0791
08bfc     37 00 00 FF 
08c00     44 E4 05 F1 | 	add	objptr, ##28228
08c04     F2 34 02 FB | 	rdlong	local08, objptr
08c08     01 34 06 F1 | 	add	local08, #1
08c0c     F2 34 62 FC | 	wrlong	local08, objptr
08c10     37 00 00 FF 
08c14     44 E4 85 F1 | 	sub	objptr, ##28228
08c18     A8 24 B0 FD | 	call	#_expr
08c1c     01 36 66 F6 | 	neg	local09, #1
08c20     00 38 06 F6 | 	mov	local10, #0
08c24                 | '   ct+=1 : expr()
08c24                 | '   j=-1 : i=0 
08c24                 | '   do 
08c24                 | LR__0792
08c24                 | '     if variables(i).name=varname$ then j=i: exit loop
08c24     1C 31 02 F6 | 	mov	local06, local10
08c28     04 30 66 F0 | 	shl	local06, #4
08c2c     14 00 00 FF 
08c30     F8 E5 05 F1 | 	add	objptr, ##10744
08c34     F2 30 02 F1 | 	add	local06, objptr
08c38     18 13 02 FB | 	rdlong	arg01, local06
08c3c     19 15 02 F6 | 	mov	arg02, local07
08c40     14 00 00 FF 
08c44     F8 E5 85 F1 | 	sub	objptr, ##10744
08c48     70 A3 B1 FD | 	call	#__system___string_cmp
08c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c50     1C 37 02 A6 |  if_e	mov	local09, local10
08c54     20 00 90 AD |  if_e	jmp	#LR__0793
08c58     01 38 06 F1 | 	add	local10, #1
08c5c     35 00 00 FF 
08c60     08 E4 05 F1 | 	add	objptr, ##27144
08c64     F2 34 02 FB | 	rdlong	local08, objptr
08c68     35 00 00 FF 
08c6c     08 E4 85 F1 | 	sub	objptr, ##27144
08c70     1A 39 5A F2 | 	cmps	local10, local08 wcz
08c74     AC FF 9F ED |  if_be	jmp	#LR__0792
08c78                 | LR__0793
08c78     1B 27 02 F6 | 	mov	local01, local09
08c7c     16 29 02 F6 | 	mov	local02, local04
08c80     17 2A 06 F6 | 	mov	local03, #23
08c84     13 35 02 F6 | 	mov	local08, local01
08c88     14 3B 02 F6 | 	mov	local11, local02
08c8c     15 33 02 F6 | 	mov	local07, local03
08c90     4A 00 00 FF 
08c94     7C E4 05 F1 | 	add	objptr, ##38012
08c98     F2 26 02 FB | 	rdlong	local01, objptr
08c9c     13 37 02 F6 | 	mov	local09, local01
08ca0     01 36 66 F0 | 	shl	local09, #1
08ca4     13 37 02 F1 | 	add	local09, local01
08ca8     02 36 66 F0 | 	shl	local09, #2
08cac     03 00 00 FF 
08cb0     00 E4 85 F1 | 	sub	objptr, ##1536
08cb4     F2 36 02 F1 | 	add	local09, objptr
08cb8     1B 35 62 FC | 	wrlong	local08, local09
08cbc     03 00 00 FF 
08cc0     00 E4 05 F1 | 	add	objptr, ##1536
08cc4     F2 26 02 FB | 	rdlong	local01, objptr
08cc8     13 37 02 F6 | 	mov	local09, local01
08ccc     01 36 66 F0 | 	shl	local09, #1
08cd0     13 37 02 F1 | 	add	local09, local01
08cd4     02 36 66 F0 | 	shl	local09, #2
08cd8     03 00 00 FF 
08cdc     00 E4 85 F1 | 	sub	objptr, ##1536
08ce0     F2 36 02 F1 | 	add	local09, objptr
08ce4     04 36 06 F1 | 	add	local09, #4
08ce8     1B 3B 62 FC | 	wrlong	local11, local09
08cec     03 00 00 FF 
08cf0     00 E4 05 F1 | 	add	objptr, ##1536
08cf4     F2 3A 02 FB | 	rdlong	local11, objptr
08cf8     1D 27 02 F6 | 	mov	local01, local11
08cfc     01 26 66 F0 | 	shl	local01, #1
08d00     1D 27 02 F1 | 	add	local01, local11
08d04     02 26 66 F0 | 	shl	local01, #2
08d08     03 00 00 FF 
08d0c     00 E4 85 F1 | 	sub	objptr, ##1536
08d10     F2 26 02 F1 | 	add	local01, objptr
08d14     08 26 06 F1 | 	add	local01, #8
08d18     13 33 62 FC | 	wrlong	local07, local01
08d1c     03 00 00 FF 
08d20     00 E4 05 F1 | 	add	objptr, ##1536
08d24     F2 34 02 FB | 	rdlong	local08, objptr
08d28     01 34 06 F1 | 	add	local08, #1
08d2c     F2 34 62 FC | 	wrlong	local08, objptr
08d30                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
08d30                 | '   if numpar>3 then err=45
08d30     04 2C 16 F2 | 	cmp	local04, #4 wc
08d34     2D 2E 06 36 |  if_ae	mov	local05, #45
08d38                 | '   if i>varnum then err=20
08d38     15 00 00 FF 
08d3c     74 E4 85 F1 | 	sub	objptr, ##10868
08d40     F2 34 02 FB | 	rdlong	local08, objptr
08d44     35 00 00 FF 
08d48     08 E4 85 F1 | 	sub	objptr, ##27144
08d4c     1A 39 5A F2 | 	cmps	local10, local08 wcz
08d50     14 2E 06 16 |  if_a	mov	local05, #20
08d54     04 00 90 FD | 	jmp	#LR__0795
08d58                 | LR__0794
08d58     0E 2E 06 F6 | 	mov	local05, #14
08d5c                 | LR__0795
08d5c                 | ' return err
08d5c     17 FB 01 F6 | 	mov	result1, local05
08d60     A7 F0 03 F6 | 	mov	ptra, fp
08d64     B2 00 A0 FD | 	call	#popregs_
08d68                 | _compile_array_assign_ret
08d68     2D 00 64 FD | 	ret
08d6c                 | 
08d6c                 | ' 
08d6c                 | ' '----- compile print command with its ";" and "," modifiers
08d6c                 | ' 
08d6c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08d6c                 | _compile_print
08d6c     0B 4A 05 F6 | 	mov	COUNT_, #11
08d70     A8 00 A0 FD | 	call	#pushregs_
08d74     00 26 06 F6 | 	mov	local01, #0
08d78     1D 2A 06 F6 | 	mov	local03, #29
08d7c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08d7c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08d7c     37 00 00 FF 
08d80     44 E4 05 F1 | 	add	objptr, ##28228
08d84     F2 2C 02 FB | 	rdlong	local04, objptr
08d88     03 2C 66 F0 | 	shl	local04, #3
08d8c     02 00 00 FF 
08d90     38 E4 85 F1 | 	sub	objptr, ##1080
08d94     F2 2C 02 F1 | 	add	local04, objptr
08d98     04 2C 06 F1 | 	add	local04, #4
08d9c     16 2D 02 FB | 	rdlong	local04, local04
08da0     FE 2D 0E F2 | 	cmp	local04, #510 wz
08da4     35 00 00 FF 
08da8     0C E4 85 F1 | 	sub	objptr, ##27148
08dac     68 01 90 5D |  if_ne	jmp	#LR__0800
08db0     20 2A 06 F6 | 	mov	local03, #32
08db4     13 2F 02 F6 | 	mov	local05, local01
08db8     14 31 02 F6 | 	mov	local06, local02
08dbc     15 33 02 F6 | 	mov	local07, local03
08dc0     4A 00 00 FF 
08dc4     7C E4 05 F1 | 	add	objptr, ##38012
08dc8     F2 34 02 FB | 	rdlong	local08, objptr
08dcc     1A 37 02 F6 | 	mov	local09, local08
08dd0     01 36 66 F0 | 	shl	local09, #1
08dd4     1A 37 02 F1 | 	add	local09, local08
08dd8     02 36 66 F0 | 	shl	local09, #2
08ddc     03 00 00 FF 
08de0     00 E4 85 F1 | 	sub	objptr, ##1536
08de4     F2 36 02 F1 | 	add	local09, objptr
08de8     1B 2F 62 FC | 	wrlong	local05, local09
08dec     03 00 00 FF 
08df0     00 E4 05 F1 | 	add	objptr, ##1536
08df4     F2 2E 02 FB | 	rdlong	local05, objptr
08df8     17 39 02 F6 | 	mov	local10, local05
08dfc     01 38 66 F0 | 	shl	local10, #1
08e00     17 39 02 F1 | 	add	local10, local05
08e04     02 38 66 F0 | 	shl	local10, #2
08e08     03 00 00 FF 
08e0c     00 E4 85 F1 | 	sub	objptr, ##1536
08e10     F2 38 02 F1 | 	add	local10, objptr
08e14     04 38 06 F1 | 	add	local10, #4
08e18     1C 31 62 FC | 	wrlong	local06, local10
08e1c     03 00 00 FF 
08e20     00 E4 05 F1 | 	add	objptr, ##1536
08e24     F2 2E 02 FB | 	rdlong	local05, objptr
08e28     17 3B 02 F6 | 	mov	local11, local05
08e2c     01 3A 66 F0 | 	shl	local11, #1
08e30     17 3B 02 F1 | 	add	local11, local05
08e34     02 3A 66 F0 | 	shl	local11, #2
08e38     03 00 00 FF 
08e3c     00 E4 85 F1 | 	sub	objptr, ##1536
08e40     F2 3A 02 F1 | 	add	local11, objptr
08e44     08 3A 06 F1 | 	add	local11, #8
08e48     1D 33 62 FC | 	wrlong	local07, local11
08e4c     03 00 00 FF 
08e50     00 E4 05 F1 | 	add	objptr, ##1536
08e54     F2 2E 02 FB | 	rdlong	local05, objptr
08e58     01 2E 06 F1 | 	add	local05, #1
08e5c     F2 2E 62 FC | 	wrlong	local05, objptr
08e60     44 2A 06 F6 | 	mov	local03, #68
08e64     13 2F 02 F6 | 	mov	local05, local01
08e68     14 31 02 F6 | 	mov	local06, local02
08e6c     15 33 02 F6 | 	mov	local07, local03
08e70     F2 34 02 FB | 	rdlong	local08, objptr
08e74     1A 37 02 F6 | 	mov	local09, local08
08e78     01 36 66 F0 | 	shl	local09, #1
08e7c     1A 37 02 F1 | 	add	local09, local08
08e80     02 36 66 F0 | 	shl	local09, #2
08e84     03 00 00 FF 
08e88     00 E4 85 F1 | 	sub	objptr, ##1536
08e8c     F2 36 02 F1 | 	add	local09, objptr
08e90     1B 2F 62 FC | 	wrlong	local05, local09
08e94     03 00 00 FF 
08e98     00 E4 05 F1 | 	add	objptr, ##1536
08e9c     F2 3A 02 FB | 	rdlong	local11, objptr
08ea0     1D 39 02 F6 | 	mov	local10, local11
08ea4     01 38 66 F0 | 	shl	local10, #1
08ea8     1D 39 02 F1 | 	add	local10, local11
08eac     02 38 66 F0 | 	shl	local10, #2
08eb0     03 00 00 FF 
08eb4     00 E4 85 F1 | 	sub	objptr, ##1536
08eb8     F2 38 02 F1 | 	add	local10, objptr
08ebc     04 38 06 F1 | 	add	local10, #4
08ec0     1C 31 62 FC | 	wrlong	local06, local10
08ec4     03 00 00 FF 
08ec8     00 E4 05 F1 | 	add	objptr, ##1536
08ecc     F2 38 02 FB | 	rdlong	local10, objptr
08ed0     1C 3B 02 F6 | 	mov	local11, local10
08ed4     01 3A 66 F0 | 	shl	local11, #1
08ed8     1C 3B 02 F1 | 	add	local11, local10
08edc     02 3A 66 F0 | 	shl	local11, #2
08ee0     03 00 00 FF 
08ee4     00 E4 85 F1 | 	sub	objptr, ##1536
08ee8     F2 3A 02 F1 | 	add	local11, objptr
08eec     08 3A 06 F1 | 	add	local11, #8
08ef0     1D 33 62 FC | 	wrlong	local07, local11
08ef4     03 00 00 FF 
08ef8     00 E4 05 F1 | 	add	objptr, ##1536
08efc     F2 2E 02 FB | 	rdlong	local05, objptr
08f00     01 2E 06 F1 | 	add	local05, #1
08f04     F2 2E 62 FC | 	wrlong	local05, objptr
08f08     4A 00 00 FF 
08f0c     7C E4 85 F1 | 	sub	objptr, ##38012
08f10     00 FA 05 F6 | 	mov	result1, #0
08f14     20 05 90 FD | 	jmp	#LR__0807
08f18                 | LR__0800
08f18                 | ' do
08f18                 | LR__0801
08f18     A8 21 B0 FD | 	call	#_expr
08f1c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
08f1c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08f1c     37 00 00 FF 
08f20     44 E4 05 F1 | 	add	objptr, ##28228
08f24     F2 2C 02 FB | 	rdlong	local04, objptr
08f28     03 2C 66 F0 | 	shl	local04, #3
08f2c     02 00 00 FF 
08f30     38 E4 85 F1 | 	sub	objptr, ##1080
08f34     F2 2C 02 F1 | 	add	local04, objptr
08f38     04 2C 06 F1 | 	add	local04, #4
08f3c     16 35 02 FB | 	rdlong	local08, local04
08f40     11 34 0E F2 | 	cmp	local08, #17 wz
08f44     35 00 00 FF 
08f48     0C E4 85 F1 | 	sub	objptr, ##27148
08f4c     60 01 90 5D |  if_ne	jmp	#LR__0802
08f50     21 2A 06 F6 | 	mov	local03, #33
08f54     13 2F 02 F6 | 	mov	local05, local01
08f58     14 31 02 F6 | 	mov	local06, local02
08f5c     15 33 02 F6 | 	mov	local07, local03
08f60     4A 00 00 FF 
08f64     7C E4 05 F1 | 	add	objptr, ##38012
08f68     F2 34 02 FB | 	rdlong	local08, objptr
08f6c     1A 37 02 F6 | 	mov	local09, local08
08f70     01 36 66 F0 | 	shl	local09, #1
08f74     1A 37 02 F1 | 	add	local09, local08
08f78     02 36 66 F0 | 	shl	local09, #2
08f7c     03 00 00 FF 
08f80     00 E4 85 F1 | 	sub	objptr, ##1536
08f84     F2 36 02 F1 | 	add	local09, objptr
08f88     1B 2F 62 FC | 	wrlong	local05, local09
08f8c     03 00 00 FF 
08f90     00 E4 05 F1 | 	add	objptr, ##1536
08f94     F2 3A 02 FB | 	rdlong	local11, objptr
08f98     1D 39 02 F6 | 	mov	local10, local11
08f9c     01 38 66 F0 | 	shl	local10, #1
08fa0     1D 39 02 F1 | 	add	local10, local11
08fa4     02 38 66 F0 | 	shl	local10, #2
08fa8     03 00 00 FF 
08fac     00 E4 85 F1 | 	sub	objptr, ##1536
08fb0     F2 38 02 F1 | 	add	local10, objptr
08fb4     04 38 06 F1 | 	add	local10, #4
08fb8     1C 31 62 FC | 	wrlong	local06, local10
08fbc     03 00 00 FF 
08fc0     00 E4 05 F1 | 	add	objptr, ##1536
08fc4     F2 2E 02 FB | 	rdlong	local05, objptr
08fc8     17 3B 02 F6 | 	mov	local11, local05
08fcc     01 3A 66 F0 | 	shl	local11, #1
08fd0     17 3B 02 F1 | 	add	local11, local05
08fd4     02 3A 66 F0 | 	shl	local11, #2
08fd8     03 00 00 FF 
08fdc     00 E4 85 F1 | 	sub	objptr, ##1536
08fe0     F2 3A 02 F1 | 	add	local11, objptr
08fe4     08 3A 06 F1 | 	add	local11, #8
08fe8     1D 33 62 FC | 	wrlong	local07, local11
08fec     03 00 00 FF 
08ff0     00 E4 05 F1 | 	add	objptr, ##1536
08ff4     F2 2E 02 FB | 	rdlong	local05, objptr
08ff8     01 2E 06 F1 | 	add	local05, #1
08ffc     F2 2E 62 FC | 	wrlong	local05, objptr
09000     44 2A 06 F6 | 	mov	local03, #68
09004     13 2F 02 F6 | 	mov	local05, local01
09008     14 31 02 F6 | 	mov	local06, local02
0900c     15 33 02 F6 | 	mov	local07, local03
09010     F2 34 02 FB | 	rdlong	local08, objptr
09014     1A 37 02 F6 | 	mov	local09, local08
09018     01 36 66 F0 | 	shl	local09, #1
0901c     1A 37 02 F1 | 	add	local09, local08
09020     02 36 66 F0 | 	shl	local09, #2
09024     03 00 00 FF 
09028     00 E4 85 F1 | 	sub	objptr, ##1536
0902c     F2 36 02 F1 | 	add	local09, objptr
09030     1B 2F 62 FC | 	wrlong	local05, local09
09034     03 00 00 FF 
09038     00 E4 05 F1 | 	add	objptr, ##1536
0903c     F2 3A 02 FB | 	rdlong	local11, objptr
09040     1D 39 02 F6 | 	mov	local10, local11
09044     01 38 66 F0 | 	shl	local10, #1
09048     1D 39 02 F1 | 	add	local10, local11
0904c     02 38 66 F0 | 	shl	local10, #2
09050     03 00 00 FF 
09054     00 E4 85 F1 | 	sub	objptr, ##1536
09058     F2 38 02 F1 | 	add	local10, objptr
0905c     04 38 06 F1 | 	add	local10, #4
09060     1C 31 62 FC | 	wrlong	local06, local10
09064     03 00 00 FF 
09068     00 E4 05 F1 | 	add	objptr, ##1536
0906c     F2 38 02 FB | 	rdlong	local10, objptr
09070     1C 3B 02 F6 | 	mov	local11, local10
09074     01 3A 66 F0 | 	shl	local11, #1
09078     1C 3B 02 F1 | 	add	local11, local10
0907c     02 3A 66 F0 | 	shl	local11, #2
09080     03 00 00 FF 
09084     00 E4 85 F1 | 	sub	objptr, ##1536
09088     F2 3A 02 F1 | 	add	local11, objptr
0908c     08 3A 06 F1 | 	add	local11, #8
09090     1D 33 62 FC | 	wrlong	local07, local11
09094     03 00 00 FF 
09098     00 E4 05 F1 | 	add	objptr, ##1536
0909c     F2 2E 02 FB | 	rdlong	local05, objptr
090a0     01 2E 06 F1 | 	add	local05, #1
090a4     F2 2E 62 FC | 	wrlong	local05, objptr
090a8     4A 00 00 FF 
090ac     7C E4 85 F1 | 	sub	objptr, ##38012
090b0                 | LR__0802
090b0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
090b0     37 00 00 FF 
090b4     44 E4 05 F1 | 	add	objptr, ##28228
090b8     F2 2C 02 FB | 	rdlong	local04, objptr
090bc     03 2C 66 F0 | 	shl	local04, #3
090c0     02 00 00 FF 
090c4     38 E4 85 F1 | 	sub	objptr, ##1080
090c8     F2 2C 02 F1 | 	add	local04, objptr
090cc     04 2C 06 F1 | 	add	local04, #4
090d0     16 35 02 FB | 	rdlong	local08, local04
090d4     12 34 0E F2 | 	cmp	local08, #18 wz
090d8     35 00 00 FF 
090dc     0C E4 85 F1 | 	sub	objptr, ##27148
090e0     60 01 90 5D |  if_ne	jmp	#LR__0803
090e4     22 2A 06 F6 | 	mov	local03, #34
090e8     13 2F 02 F6 | 	mov	local05, local01
090ec     14 31 02 F6 | 	mov	local06, local02
090f0     15 33 02 F6 | 	mov	local07, local03
090f4     4A 00 00 FF 
090f8     7C E4 05 F1 | 	add	objptr, ##38012
090fc     F2 34 02 FB | 	rdlong	local08, objptr
09100     1A 37 02 F6 | 	mov	local09, local08
09104     01 36 66 F0 | 	shl	local09, #1
09108     1A 37 02 F1 | 	add	local09, local08
0910c     02 36 66 F0 | 	shl	local09, #2
09110     03 00 00 FF 
09114     00 E4 85 F1 | 	sub	objptr, ##1536
09118     F2 36 02 F1 | 	add	local09, objptr
0911c     1B 2F 62 FC | 	wrlong	local05, local09
09120     03 00 00 FF 
09124     00 E4 05 F1 | 	add	objptr, ##1536
09128     F2 3A 02 FB | 	rdlong	local11, objptr
0912c     1D 39 02 F6 | 	mov	local10, local11
09130     01 38 66 F0 | 	shl	local10, #1
09134     1D 39 02 F1 | 	add	local10, local11
09138     02 38 66 F0 | 	shl	local10, #2
0913c     03 00 00 FF 
09140     00 E4 85 F1 | 	sub	objptr, ##1536
09144     F2 38 02 F1 | 	add	local10, objptr
09148     04 38 06 F1 | 	add	local10, #4
0914c     1C 31 62 FC | 	wrlong	local06, local10
09150     03 00 00 FF 
09154     00 E4 05 F1 | 	add	objptr, ##1536
09158     F2 2E 02 FB | 	rdlong	local05, objptr
0915c     17 3B 02 F6 | 	mov	local11, local05
09160     01 3A 66 F0 | 	shl	local11, #1
09164     17 3B 02 F1 | 	add	local11, local05
09168     02 3A 66 F0 | 	shl	local11, #2
0916c     03 00 00 FF 
09170     00 E4 85 F1 | 	sub	objptr, ##1536
09174     F2 3A 02 F1 | 	add	local11, objptr
09178     08 3A 06 F1 | 	add	local11, #8
0917c     1D 33 62 FC | 	wrlong	local07, local11
09180     03 00 00 FF 
09184     00 E4 05 F1 | 	add	objptr, ##1536
09188     F2 2E 02 FB | 	rdlong	local05, objptr
0918c     01 2E 06 F1 | 	add	local05, #1
09190     F2 2E 62 FC | 	wrlong	local05, objptr
09194     44 2A 06 F6 | 	mov	local03, #68
09198     13 2F 02 F6 | 	mov	local05, local01
0919c     14 31 02 F6 | 	mov	local06, local02
091a0     15 33 02 F6 | 	mov	local07, local03
091a4     F2 34 02 FB | 	rdlong	local08, objptr
091a8     1A 37 02 F6 | 	mov	local09, local08
091ac     01 36 66 F0 | 	shl	local09, #1
091b0     1A 37 02 F1 | 	add	local09, local08
091b4     02 36 66 F0 | 	shl	local09, #2
091b8     03 00 00 FF 
091bc     00 E4 85 F1 | 	sub	objptr, ##1536
091c0     F2 36 02 F1 | 	add	local09, objptr
091c4     1B 2F 62 FC | 	wrlong	local05, local09
091c8     03 00 00 FF 
091cc     00 E4 05 F1 | 	add	objptr, ##1536
091d0     F2 3A 02 FB | 	rdlong	local11, objptr
091d4     1D 39 02 F6 | 	mov	local10, local11
091d8     01 38 66 F0 | 	shl	local10, #1
091dc     1D 39 02 F1 | 	add	local10, local11
091e0     02 38 66 F0 | 	shl	local10, #2
091e4     03 00 00 FF 
091e8     00 E4 85 F1 | 	sub	objptr, ##1536
091ec     F2 38 02 F1 | 	add	local10, objptr
091f0     04 38 06 F1 | 	add	local10, #4
091f4     1C 31 62 FC | 	wrlong	local06, local10
091f8     03 00 00 FF 
091fc     00 E4 05 F1 | 	add	objptr, ##1536
09200     F2 38 02 FB | 	rdlong	local10, objptr
09204     1C 3B 02 F6 | 	mov	local11, local10
09208     01 3A 66 F0 | 	shl	local11, #1
0920c     1C 3B 02 F1 | 	add	local11, local10
09210     02 3A 66 F0 | 	shl	local11, #2
09214     03 00 00 FF 
09218     00 E4 85 F1 | 	sub	objptr, ##1536
0921c     F2 3A 02 F1 | 	add	local11, objptr
09220     08 3A 06 F1 | 	add	local11, #8
09224     1D 33 62 FC | 	wrlong	local07, local11
09228     03 00 00 FF 
0922c     00 E4 05 F1 | 	add	objptr, ##1536
09230     F2 2E 02 FB | 	rdlong	local05, objptr
09234     01 2E 06 F1 | 	add	local05, #1
09238     F2 2E 62 FC | 	wrlong	local05, objptr
0923c     4A 00 00 FF 
09240     7C E4 85 F1 | 	sub	objptr, ##38012
09244                 | LR__0803
09244                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09244     37 00 00 FF 
09248     44 E4 05 F1 | 	add	objptr, ##28228
0924c     F2 2C 02 FB | 	rdlong	local04, objptr
09250     03 2C 66 F0 | 	shl	local04, #3
09254     02 00 00 FF 
09258     38 E4 85 F1 | 	sub	objptr, ##1080
0925c     F2 2C 02 F1 | 	add	local04, objptr
09260     04 2C 06 F1 | 	add	local04, #4
09264     16 35 02 FB | 	rdlong	local08, local04
09268     FE 35 0E F2 | 	cmp	local08, #510 wz
0926c     35 00 00 FF 
09270     0C E4 85 F1 | 	sub	objptr, ##27148
09274     B8 00 90 5D |  if_ne	jmp	#LR__0804
09278     44 2A 06 F6 | 	mov	local03, #68
0927c     13 2F 02 F6 | 	mov	local05, local01
09280     14 31 02 F6 | 	mov	local06, local02
09284     15 33 02 F6 | 	mov	local07, local03
09288     4A 00 00 FF 
0928c     7C E4 05 F1 | 	add	objptr, ##38012
09290     F2 34 02 FB | 	rdlong	local08, objptr
09294     1A 37 02 F6 | 	mov	local09, local08
09298     01 36 66 F0 | 	shl	local09, #1
0929c     1A 37 02 F1 | 	add	local09, local08
092a0     02 36 66 F0 | 	shl	local09, #2
092a4     03 00 00 FF 
092a8     00 E4 85 F1 | 	sub	objptr, ##1536
092ac     F2 36 02 F1 | 	add	local09, objptr
092b0     1B 2F 62 FC | 	wrlong	local05, local09
092b4     03 00 00 FF 
092b8     00 E4 05 F1 | 	add	objptr, ##1536
092bc     F2 3A 02 FB | 	rdlong	local11, objptr
092c0     1D 39 02 F6 | 	mov	local10, local11
092c4     01 38 66 F0 | 	shl	local10, #1
092c8     1D 39 02 F1 | 	add	local10, local11
092cc     02 38 66 F0 | 	shl	local10, #2
092d0     03 00 00 FF 
092d4     00 E4 85 F1 | 	sub	objptr, ##1536
092d8     F2 38 02 F1 | 	add	local10, objptr
092dc     04 38 06 F1 | 	add	local10, #4
092e0     1C 31 62 FC | 	wrlong	local06, local10
092e4     03 00 00 FF 
092e8     00 E4 05 F1 | 	add	objptr, ##1536
092ec     F2 38 02 FB | 	rdlong	local10, objptr
092f0     1C 3B 02 F6 | 	mov	local11, local10
092f4     01 3A 66 F0 | 	shl	local11, #1
092f8     1C 3B 02 F1 | 	add	local11, local10
092fc     02 3A 66 F0 | 	shl	local11, #2
09300     03 00 00 FF 
09304     00 E4 85 F1 | 	sub	objptr, ##1536
09308     F2 3A 02 F1 | 	add	local11, objptr
0930c     08 3A 06 F1 | 	add	local11, #8
09310     1D 33 62 FC | 	wrlong	local07, local11
09314     03 00 00 FF 
09318     00 E4 05 F1 | 	add	objptr, ##1536
0931c     F2 2E 02 FB | 	rdlong	local05, objptr
09320     01 2E 06 F1 | 	add	local05, #1
09324     F2 2E 62 FC | 	wrlong	local05, objptr
09328     4A 00 00 FF 
0932c     7C E4 85 F1 | 	sub	objptr, ##38012
09330                 | LR__0804
09330                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09330     37 00 00 FF 
09334     44 E4 05 F1 | 	add	objptr, ##28228
09338     F2 2C 02 FB | 	rdlong	local04, objptr
0933c     03 2C 66 F0 | 	shl	local04, #3
09340     02 00 00 FF 
09344     38 E4 85 F1 | 	sub	objptr, ##1080
09348     F2 2C 02 F1 | 	add	local04, objptr
0934c     04 2C 06 F1 | 	add	local04, #4
09350     16 35 02 FB | 	rdlong	local08, local04
09354     11 34 0E F2 | 	cmp	local08, #17 wz
09358     35 00 00 FF 
0935c     0C E4 85 F1 | 	sub	objptr, ##27148
09360     6C 00 90 AD |  if_e	jmp	#LR__0805
09364     37 00 00 FF 
09368     44 E4 05 F1 | 	add	objptr, ##28228
0936c     F2 34 02 FB | 	rdlong	local08, objptr
09370     03 34 66 F0 | 	shl	local08, #3
09374     02 00 00 FF 
09378     38 E4 85 F1 | 	sub	objptr, ##1080
0937c     F2 34 02 F1 | 	add	local08, objptr
09380     04 34 06 F1 | 	add	local08, #4
09384     1A 35 02 FB | 	rdlong	local08, local08
09388     12 34 0E F2 | 	cmp	local08, #18 wz
0938c     35 00 00 FF 
09390     0C E4 85 F1 | 	sub	objptr, ##27148
09394     38 00 90 AD |  if_e	jmp	#LR__0805
09398     37 00 00 FF 
0939c     44 E4 05 F1 | 	add	objptr, ##28228
093a0     F2 3A 02 FB | 	rdlong	local11, objptr
093a4     03 3A 66 F0 | 	shl	local11, #3
093a8     02 00 00 FF 
093ac     38 E4 85 F1 | 	sub	objptr, ##1080
093b0     F2 3A 02 F1 | 	add	local11, objptr
093b4     04 3A 06 F1 | 	add	local11, #4
093b8     1D 3B 02 FB | 	rdlong	local11, local11
093bc     FE 3B 0E F2 | 	cmp	local11, #510 wz
093c0     35 00 00 FF 
093c4     0C E4 85 F1 | 	sub	objptr, ##27148
093c8     16 FA 05 56 |  if_ne	mov	result1, #22
093cc     68 00 90 5D |  if_ne	jmp	#LR__0807
093d0                 | LR__0805
093d0     37 00 00 FF 
093d4     44 E4 05 F1 | 	add	objptr, ##28228
093d8     F2 2C 02 FB | 	rdlong	local04, objptr
093dc     01 2C 06 F1 | 	add	local04, #1
093e0     F2 2C 62 FC | 	wrlong	local04, objptr
093e4     03 2C 66 F0 | 	shl	local04, #3
093e8     02 00 00 FF 
093ec     38 E4 85 F1 | 	sub	objptr, ##1080
093f0     F2 2C 02 F1 | 	add	local04, objptr
093f4     04 2C 06 F1 | 	add	local04, #4
093f8     16 35 02 FB | 	rdlong	local08, local04
093fc     FE 35 0E F2 | 	cmp	local08, #510 wz
09400     35 00 00 FF 
09404     0C E4 85 F1 | 	sub	objptr, ##27148
09408     28 00 90 AD |  if_e	jmp	#LR__0806
0940c     37 00 00 FF 
09410     44 E4 05 F1 | 	add	objptr, ##28228
09414     F2 3A 02 FB | 	rdlong	local11, objptr
09418     0E 00 00 FF 
0941c     1C E4 05 F1 | 	add	objptr, ##7196
09420     F2 38 02 FB | 	rdlong	local10, objptr
09424     45 00 00 FF 
09428     60 E4 85 F1 | 	sub	objptr, ##35424
0942c     1C 3B 52 F2 | 	cmps	local11, local10 wc
09430     E4 FA 9F CD |  if_b	jmp	#LR__0801
09434                 | LR__0806
09434                 | ' return 0
09434     00 FA 05 F6 | 	mov	result1, #0
09438                 | LR__0807
09438     A7 F0 03 F6 | 	mov	ptra, fp
0943c     B2 00 A0 FD | 	call	#popregs_
09440                 | _compile_print_ret
09440     2D 00 64 FD | 	ret
09444                 | 
09444                 | ' 
09444                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09444                 | ' 
09444                 | ' function compile_if(aline as ulong) as ulong  
09444                 | _compile_if
09444     09 4A 05 F6 | 	mov	COUNT_, #9
09448     A8 00 A0 FD | 	call	#pushregs_
0944c                 | _compile_if_enter
0944c     09 2D 02 F6 | 	mov	local04, arg01
09450                 | ' return expr()
09450     70 1C B0 FD | 	call	#_expr
09454     37 00 00 FF 
09458     44 E4 05 F1 | 	add	objptr, ##28228
0945c     F2 14 02 FB | 	rdlong	arg02, objptr
09460     0A 2F 02 F6 | 	mov	local05, arg02
09464     03 2E 66 F0 | 	shl	local05, #3
09468     02 00 00 FF 
0946c     38 E4 85 F1 | 	sub	objptr, ##1080
09470     F2 2E 02 F1 | 	add	local05, objptr
09474     04 2E 06 F1 | 	add	local05, #4
09478     17 2F 02 FB | 	rdlong	local05, local05
0947c     01 14 06 F1 | 	add	arg02, #1
09480     02 00 00 FF 
09484     38 E4 05 F1 | 	add	objptr, ##1080
09488     F2 14 62 FC | 	wrlong	arg02, objptr
0948c     37 00 00 FF 
09490     44 E4 85 F1 | 	sub	objptr, ##28228
09494                 | ' 
09494                 | ' err=compile_fun_1p()
09494                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09494     5B 2E 0E F2 | 	cmp	local05, #91 wz
09498     34 FA 05 56 |  if_ne	mov	result1, #52
0949c     20 01 90 5D |  if_ne	jmp	#LR__0812
094a0     58 2A 06 F6 | 	mov	local03, #88
094a4     13 31 02 F6 | 	mov	local06, local01
094a8     14 33 02 F6 | 	mov	local07, local02
094ac     15 15 02 F6 | 	mov	arg02, local03
094b0     4A 00 00 FF 
094b4     7C E4 05 F1 | 	add	objptr, ##38012
094b8     F2 12 02 FB | 	rdlong	arg01, objptr
094bc     09 35 02 F6 | 	mov	local08, arg01
094c0     01 34 66 F0 | 	shl	local08, #1
094c4     09 35 02 F1 | 	add	local08, arg01
094c8     02 34 66 F0 | 	shl	local08, #2
094cc     03 00 00 FF 
094d0     00 E4 85 F1 | 	sub	objptr, ##1536
094d4     F2 34 02 F1 | 	add	local08, objptr
094d8     1A 31 62 FC | 	wrlong	local06, local08
094dc     03 00 00 FF 
094e0     00 E4 05 F1 | 	add	objptr, ##1536
094e4     F2 30 02 FB | 	rdlong	local06, objptr
094e8     18 13 02 F6 | 	mov	arg01, local06
094ec     01 12 66 F0 | 	shl	arg01, #1
094f0     18 13 02 F1 | 	add	arg01, local06
094f4     02 12 66 F0 | 	shl	arg01, #2
094f8     03 00 00 FF 
094fc     00 E4 85 F1 | 	sub	objptr, ##1536
09500     F2 12 02 F1 | 	add	arg01, objptr
09504     04 12 06 F1 | 	add	arg01, #4
09508     09 33 62 FC | 	wrlong	local07, arg01
0950c     03 00 00 FF 
09510     00 E4 05 F1 | 	add	objptr, ##1536
09514     F2 30 02 FB | 	rdlong	local06, objptr
09518     18 13 02 F6 | 	mov	arg01, local06
0951c     01 12 66 F0 | 	shl	arg01, #1
09520     18 13 02 F1 | 	add	arg01, local06
09524     02 12 66 F0 | 	shl	arg01, #2
09528     03 00 00 FF 
0952c     00 E4 85 F1 | 	sub	objptr, ##1536
09530     F2 12 02 F1 | 	add	arg01, objptr
09534     08 12 06 F1 | 	add	arg01, #8
09538     09 15 62 FC | 	wrlong	arg02, arg01
0953c     03 00 00 FF 
09540     00 E4 05 F1 | 	add	objptr, ##1536
09544     F2 30 02 FB | 	rdlong	local06, objptr
09548     01 30 06 F1 | 	add	local06, #1
0954c     F2 30 62 FC | 	wrlong	local06, objptr
09550                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09550                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09550     13 00 00 FF 
09554     38 E4 85 F1 | 	sub	objptr, ##9784
09558     F2 14 02 FB | 	rdlong	arg02, objptr
0955c     01 14 06 F1 | 	add	arg02, #1
09560     03 14 66 F0 | 	shl	arg02, #3
09564     02 00 00 FF 
09568     38 E4 85 F1 | 	sub	objptr, ##1080
0956c     F2 14 02 F1 | 	add	arg02, objptr
09570     0A 13 02 FB | 	rdlong	arg01, arg02
09574     35 00 00 FF 
09578     0C E4 85 F1 | 	sub	objptr, ##27148
0957c                 | ' 
0957c                 | ' select case s
0957c     96 01 00 FF 
09580     C4 14 06 F6 | 	mov	arg02, ##@LR__5331
09584     34 9A B1 FD | 	call	#__system___string_cmp
09588     00 FA 0D F2 | 	cmp	result1, #0 wz
0958c     1B FA 05 A6 |  if_e	mov	result1, #27
09590     00 FA 05 56 |  if_ne	mov	result1, #0
09594     00 FA 0D F2 | 	cmp	result1, #0 wz
09598     10 00 90 AD |  if_e	jmp	#LR__0810
0959c     05 12 06 F6 | 	mov	arg01, #5
095a0     60 E6 BF FD | 	call	#_compile_immediate_assign
095a4     FD 36 02 F6 | 	mov	local09, result1
095a8     10 00 90 FD | 	jmp	#LR__0811
095ac                 | LR__0810
095ac     05 12 06 F6 | 	mov	arg01, #5
095b0     16 15 02 F6 | 	mov	arg02, local04
095b4     C4 DC BF FD | 	call	#_compile_immediate
095b8     FD 36 02 F6 | 	mov	local09, result1
095bc                 | LR__0811
095bc                 | ' return err
095bc     1B FB 01 F6 | 	mov	result1, local09
095c0                 | LR__0812
095c0     A7 F0 03 F6 | 	mov	ptra, fp
095c4     B2 00 A0 FD | 	call	#popregs_
095c8                 | _compile_if_ret
095c8     2D 00 64 FD | 	ret
095cc                 | 
095cc                 | ' 
095cc                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
095cc                 | ' 
095cc                 | ' function compile_else(aline as ulong) as ulong  
095cc                 | _compile_else
095cc     07 4A 05 F6 | 	mov	COUNT_, #7
095d0     A8 00 A0 FD | 	call	#pushregs_
095d4                 | _compile_else_enter
095d4     09 2D 02 F6 | 	mov	local04, arg01
095d8     5A 2A 06 F6 | 	mov	local03, #90
095dc     13 2F 02 F6 | 	mov	local05, local01
095e0     14 31 02 F6 | 	mov	local06, local02
095e4     15 27 02 F6 | 	mov	local01, local03
095e8     4A 00 00 FF 
095ec     7C E4 05 F1 | 	add	objptr, ##38012
095f0     F2 14 02 FB | 	rdlong	arg02, objptr
095f4     0A 13 02 F6 | 	mov	arg01, arg02
095f8     01 12 66 F0 | 	shl	arg01, #1
095fc     0A 13 02 F1 | 	add	arg01, arg02
09600     02 12 66 F0 | 	shl	arg01, #2
09604     03 00 00 FF 
09608     00 E4 85 F1 | 	sub	objptr, ##1536
0960c     F2 12 02 F1 | 	add	arg01, objptr
09610     09 2F 62 FC | 	wrlong	local05, arg01
09614     03 00 00 FF 
09618     00 E4 05 F1 | 	add	objptr, ##1536
0961c     F2 2E 02 FB | 	rdlong	local05, objptr
09620     17 15 02 F6 | 	mov	arg02, local05
09624     01 14 66 F0 | 	shl	arg02, #1
09628     17 15 02 F1 | 	add	arg02, local05
0962c     02 14 66 F0 | 	shl	arg02, #2
09630     03 00 00 FF 
09634     00 E4 85 F1 | 	sub	objptr, ##1536
09638     F2 14 02 F1 | 	add	arg02, objptr
0963c     04 14 06 F1 | 	add	arg02, #4
09640     0A 31 62 FC | 	wrlong	local06, arg02
09644     03 00 00 FF 
09648     00 E4 05 F1 | 	add	objptr, ##1536
0964c     F2 30 02 FB | 	rdlong	local06, objptr
09650     18 2F 02 F6 | 	mov	local05, local06
09654     01 2E 66 F0 | 	shl	local05, #1
09658     18 2F 02 F1 | 	add	local05, local06
0965c     02 2E 66 F0 | 	shl	local05, #2
09660     03 00 00 FF 
09664     00 E4 85 F1 | 	sub	objptr, ##1536
09668     F2 2E 02 F1 | 	add	local05, objptr
0966c     08 2E 06 F1 | 	add	local05, #8
09670     17 27 62 FC | 	wrlong	local01, local05
09674     03 00 00 FF 
09678     00 E4 05 F1 | 	add	objptr, ##1536
0967c     F2 2E 02 FB | 	rdlong	local05, objptr
09680     01 2E 06 F1 | 	add	local05, #1
09684     F2 2E 62 FC | 	wrlong	local05, objptr
09688                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09688                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09688     13 00 00 FF 
0968c     38 E4 85 F1 | 	sub	objptr, ##9784
09690     F2 30 02 FB | 	rdlong	local06, objptr
09694     01 30 06 F1 | 	add	local06, #1
09698     03 30 66 F0 | 	shl	local06, #3
0969c     02 00 00 FF 
096a0     38 E4 85 F1 | 	sub	objptr, ##1080
096a4     F2 30 02 F1 | 	add	local06, objptr
096a8     18 13 02 FB | 	rdlong	arg01, local06
096ac     35 00 00 FF 
096b0     0C E4 85 F1 | 	sub	objptr, ##27148
096b4                 | ' 
096b4                 | ' select case s
096b4     96 01 00 FF 
096b8     C4 14 06 F6 | 	mov	arg02, ##@LR__5331
096bc     FC 98 B1 FD | 	call	#__system___string_cmp
096c0     00 FA 0D F2 | 	cmp	result1, #0 wz
096c4     1B FA 05 A6 |  if_e	mov	result1, #27
096c8     00 FA 05 56 |  if_ne	mov	result1, #0
096cc     00 FA 0D F2 | 	cmp	result1, #0 wz
096d0     10 00 90 AD |  if_e	jmp	#LR__0820
096d4     05 12 06 F6 | 	mov	arg01, #5
096d8     28 E5 BF FD | 	call	#_compile_immediate_assign
096dc     FD 32 02 F6 | 	mov	local07, result1
096e0     10 00 90 FD | 	jmp	#LR__0821
096e4                 | LR__0820
096e4     05 12 06 F6 | 	mov	arg01, #5
096e8     16 15 02 F6 | 	mov	arg02, local04
096ec     8C DB BF FD | 	call	#_compile_immediate
096f0     FD 32 02 F6 | 	mov	local07, result1
096f4                 | LR__0821
096f4                 | ' return err
096f4     19 FB 01 F6 | 	mov	result1, local07
096f8     A7 F0 03 F6 | 	mov	ptra, fp
096fc     B2 00 A0 FD | 	call	#popregs_
09700                 | _compile_else_ret
09700     2D 00 64 FD | 	ret
09704                 | 
09704                 | ' 
09704                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09704                 | ' 
09704                 | ' function compile_dim() as ulong  
09704                 | _compile_dim
09704     11 4A 05 F6 | 	mov	COUNT_, #17
09708     A8 00 A0 FD | 	call	#pushregs_
0970c     01 26 06 F6 | 	mov	local01, #1
09710     01 28 06 F6 | 	mov	local02, #1
09714     01 2A 06 F6 | 	mov	local03, #1
09718                 | ' 
09718                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09718                 | ' if isname(lparts(ct).part$) then 
09718     37 00 00 FF 
0971c     44 E4 05 F1 | 	add	objptr, ##28228
09720     F2 18 02 FB | 	rdlong	arg04, objptr
09724     03 18 66 F0 | 	shl	arg04, #3
09728     02 00 00 FF 
0972c     38 E4 85 F1 | 	sub	objptr, ##1080
09730     F2 18 02 F1 | 	add	arg04, objptr
09734     0C 13 02 FB | 	rdlong	arg01, arg04
09738     35 00 00 FF 
0973c     0C E4 85 F1 | 	sub	objptr, ##27148
09740     90 C9 BF FD | 	call	#_isname
09744     00 FA 0D F2 | 	cmp	result1, #0 wz
09748     78 05 90 AD |  if_e	jmp	#LR__0853
0974c     37 00 00 FF 
09750     44 E4 05 F1 | 	add	objptr, ##28228
09754     F2 2C 02 FB | 	rdlong	local04, objptr
09758     03 2C 66 F0 | 	shl	local04, #3
0975c     02 00 00 FF 
09760     38 E4 85 F1 | 	sub	objptr, ##1080
09764     F2 2C 02 F1 | 	add	local04, objptr
09768     16 2F 02 FB | 	rdlong	local05, local04
0976c     01 30 66 F6 | 	neg	local06, #1
09770                 | '   varname2$=lparts(ct).part$ 
09770                 | '   j=-1
09770                 | '   if varnum>0 then
09770     04 E4 85 F1 | 	sub	objptr, #4
09774     F2 32 02 FB | 	rdlong	local07, objptr
09778     35 00 00 FF 
0977c     08 E4 85 F1 | 	sub	objptr, ##27144
09780     01 32 56 F2 | 	cmps	local07, #1 wc
09784     58 00 90 CD |  if_b	jmp	#LR__0832
09788                 | '     for i=0 to varnum-1
09788     00 34 06 F6 | 	mov	local08, #0
0978c     35 00 00 FF 
09790     08 E4 05 F1 | 	add	objptr, ##27144
09794     F2 36 02 FB | 	rdlong	local09, objptr
09798     35 00 00 FF 
0979c     08 E4 85 F1 | 	sub	objptr, ##27144
097a0                 | LR__0830
097a0     1B 35 52 F2 | 	cmps	local08, local09 wc
097a4     38 00 90 3D |  if_ae	jmp	#LR__0831
097a8                 | '       if variables(i).name=varname2$ then j=i : exit
097a8     1A 2D 02 F6 | 	mov	local04, local08
097ac     04 2C 66 F0 | 	shl	local04, #4
097b0     14 00 00 FF 
097b4     F8 E5 05 F1 | 	add	objptr, ##10744
097b8     F2 2C 02 F1 | 	add	local04, objptr
097bc     16 13 02 FB | 	rdlong	arg01, local04
097c0     17 15 02 F6 | 	mov	arg02, local05
097c4     14 00 00 FF 
097c8     F8 E5 85 F1 | 	sub	objptr, ##10744
097cc     EC 97 B1 FD | 	call	#__system___string_cmp
097d0     00 FA 0D F2 | 	cmp	result1, #0 wz
097d4     1A 31 02 A6 |  if_e	mov	local06, local08
097d8     01 34 06 51 |  if_ne	add	local08, #1
097dc     C0 FF 9F 5D |  if_ne	jmp	#LR__0830
097e0                 | LR__0831
097e0                 | LR__0832
097e0                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
097e0     FF FF 7F FF 
097e4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
097e8     35 00 00 AF 
097ec     08 E4 05 A1 |  if_e	add	objptr, ##27144
097f0     F2 30 02 AB |  if_e	rdlong	local06, objptr
097f4     35 00 00 AF 
097f8     08 E4 85 A1 |  if_e	sub	objptr, ##27144
097fc     78 00 90 AD |  if_e	jmp	#LR__0833
09800     00 12 06 F6 | 	mov	arg01, #0
09804     B4 F4 B1 FD | 	call	#__system___getiolock_0558
09808     FD 12 02 F6 | 	mov	arg01, result1
0980c     84 97 B1 FD | 	call	#__system___lockmem
09810     98 01 00 FF 
09814     0F 15 06 F6 | 	mov	arg02, ##@LR__5574
09818     00 12 06 F6 | 	mov	arg01, #0
0981c     00 16 06 F6 | 	mov	arg03, #0
09820     64 A4 B1 FD | 	call	#__system___basic_print_string
09824     51 00 00 FF 
09828     C4 E5 05 F1 | 	add	objptr, ##41924
0982c     F2 14 02 FB | 	rdlong	arg02, objptr
09830     51 00 00 FF 
09834     C4 E5 85 F1 | 	sub	objptr, ##41924
09838     00 12 06 F6 | 	mov	arg01, #0
0983c     00 16 06 F6 | 	mov	arg03, #0
09840     0A 18 06 F6 | 	mov	arg04, #10
09844     C4 A4 B1 FD | 	call	#__system___basic_print_unsigned
09848     98 01 00 FF 
0984c     1D 15 06 F6 | 	mov	arg02, ##@LR__5575
09850     00 12 06 F6 | 	mov	arg01, #0
09854     00 16 06 F6 | 	mov	arg03, #0
09858     2C A4 B1 FD | 	call	#__system___basic_print_string
0985c     00 12 06 F6 | 	mov	arg01, #0
09860     0A 14 06 F6 | 	mov	arg02, #10
09864     00 16 06 F6 | 	mov	arg03, #0
09868     C4 A3 B1 FD | 	call	#__system___basic_print_char
0986c     00 12 06 F6 | 	mov	arg01, #0
09870     48 F4 B1 FD | 	call	#__system___getiolock_0558
09874     FD 00 68 FC | 	wrlong	#0, result1
09878                 | LR__0833
09878                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09878     37 00 00 FF 
0987c     44 E4 05 F1 | 	add	objptr, ##28228
09880     F2 14 02 FB | 	rdlong	arg02, objptr
09884     01 14 06 F1 | 	add	arg02, #1
09888     03 14 66 F0 | 	shl	arg02, #3
0988c     02 00 00 FF 
09890     38 E4 85 F1 | 	sub	objptr, ##1080
09894     F2 14 02 F1 | 	add	arg02, objptr
09898     0A 13 02 FB | 	rdlong	arg01, arg02
0989c     98 01 00 FF 
098a0     3E 15 06 F6 | 	mov	arg02, ##@LR__5576
098a4     35 00 00 FF 
098a8     0C E4 85 F1 | 	sub	objptr, ##27148
098ac     0C 97 B1 FD | 	call	#__system___string_cmp
098b0     00 FA 0D F2 | 	cmp	result1, #0 wz
098b4     44 00 90 AD |  if_e	jmp	#LR__0834
098b8     37 00 00 FF 
098bc     44 E4 05 F1 | 	add	objptr, ##28228
098c0     F2 36 02 FB | 	rdlong	local09, objptr
098c4     01 36 06 F1 | 	add	local09, #1
098c8     03 36 66 F0 | 	shl	local09, #3
098cc     02 00 00 FF 
098d0     38 E4 85 F1 | 	sub	objptr, ##1080
098d4     F2 36 02 F1 | 	add	local09, objptr
098d8     1B 13 02 FB | 	rdlong	arg01, local09
098dc     98 01 00 FF 
098e0     40 15 06 F6 | 	mov	arg02, ##@LR__5577
098e4     35 00 00 FF 
098e8     0C E4 85 F1 | 	sub	objptr, ##27148
098ec     CC 96 B1 FD | 	call	#__system___string_cmp
098f0     00 FA 0D F2 | 	cmp	result1, #0 wz
098f4     2B FA 05 56 |  if_ne	mov	result1, #43
098f8     D0 04 90 5D |  if_ne	jmp	#LR__0855
098fc                 | LR__0834
098fc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
098fc     37 00 00 FF 
09900     44 E4 05 F1 | 	add	objptr, ##28228
09904     F2 14 02 FB | 	rdlong	arg02, objptr
09908     01 14 06 F1 | 	add	arg02, #1
0990c     03 14 66 F0 | 	shl	arg02, #3
09910     02 00 00 FF 
09914     38 E4 85 F1 | 	sub	objptr, ##1080
09918     F2 14 02 F1 | 	add	arg02, objptr
0991c     0A 13 02 FB | 	rdlong	arg01, arg02
09920     98 01 00 FF 
09924     43 15 06 F6 | 	mov	arg02, ##@LR__5578
09928     35 00 00 FF 
0992c     0C E4 85 F1 | 	sub	objptr, ##27148
09930     88 96 B1 FD | 	call	#__system___string_cmp
09934     00 FA 0D F2 | 	cmp	result1, #0 wz
09938     37 00 00 AF 
0993c     44 E4 05 A1 |  if_e	add	objptr, ##28228
09940     F2 38 02 AB |  if_e	rdlong	local10, objptr
09944     37 00 00 AF 
09948     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0994c     01 38 06 A1 |  if_e	add	local10, #1
09950     5C 01 90 AD |  if_e	jmp	#LR__0839
09954     37 00 00 FF 
09958     44 E4 05 F1 | 	add	objptr, ##28228
0995c     F2 38 02 FB | 	rdlong	local10, objptr
09960     37 00 00 FF 
09964     44 E4 85 F1 | 	sub	objptr, ##28228
09968     02 38 06 F1 | 	add	local10, #2
0996c     00 3A 06 F6 | 	mov	local11, #0
09970                 | '   l=ct+2 : m=0 : do
09970                 | LR__0835
09970                 | '   if isdec(lparts(l).part$) then 
09970     1C 2D 02 F6 | 	mov	local04, local10
09974     03 2C 66 F0 | 	shl	local04, #3
09978     35 00 00 FF 
0997c     0C E4 05 F1 | 	add	objptr, ##27148
09980     F2 2C 02 F1 | 	add	local04, objptr
09984     16 13 02 FB | 	rdlong	arg01, local04
09988     35 00 00 FF 
0998c     0C E4 85 F1 | 	sub	objptr, ##27148
09990     44 D0 BF FD | 	call	#_isdec
09994     00 FA 0D F2 | 	cmp	result1, #0 wz
09998     44 00 90 AD |  if_e	jmp	#LR__0836
0999c     1D 3D 02 F6 | 	mov	local12, local11
099a0     13 3D 06 F1 | 	add	local12, #local01
099a4     1C 37 02 F6 | 	mov	local09, local10
099a8     03 36 66 F0 | 	shl	local09, #3
099ac     35 00 00 FF 
099b0     0C E4 05 F1 | 	add	objptr, ##27148
099b4     F2 36 02 F1 | 	add	local09, objptr
099b8     1B 13 02 FB | 	rdlong	arg01, local09
099bc     00 14 06 F6 | 	mov	arg02, #0
099c0     35 00 00 FF 
099c4     0C E4 85 F1 | 	sub	objptr, ##27148
099c8     B8 CA B1 FD | 	call	#__system____builtin_atoi
099cc     FD 3E 02 F6 | 	mov	local13, result1
099d0                 | 	'.live	local13
099d0                 | 	'.live	local12
099d0     00 3C 8E F9 | 	altd	local12, #0
099d4     1F 3D 02 F6 | 	mov	local12, local13
099d8     01 3A 06 F1 | 	add	local11, #1
099dc     08 00 90 FD | 	jmp	#LR__0837
099e0                 | LR__0836
099e0                 | '     return(17)
099e0     11 FA 05 F6 | 	mov	result1, #17
099e4     E4 03 90 FD | 	jmp	#LR__0855
099e8                 | LR__0837
099e8                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
099e8     1C 2D 02 F6 | 	mov	local04, local10
099ec     01 2C 06 F1 | 	add	local04, #1
099f0     03 2C 66 F0 | 	shl	local04, #3
099f4     35 00 00 FF 
099f8     0C E4 05 F1 | 	add	objptr, ##27148
099fc     F2 2C 02 F1 | 	add	local04, objptr
09a00     16 13 02 FB | 	rdlong	arg01, local04
09a04     98 01 00 FF 
09a08     46 15 06 F6 | 	mov	arg02, ##@LR__5579
09a0c     35 00 00 FF 
09a10     0C E4 85 F1 | 	sub	objptr, ##27148
09a14     A4 95 B1 FD | 	call	#__system___string_cmp
09a18     00 FA 0D F2 | 	cmp	result1, #0 wz
09a1c     3C 00 90 AD |  if_e	jmp	#LR__0838
09a20     1C 3F 02 F6 | 	mov	local13, local10
09a24     01 3E 06 F1 | 	add	local13, #1
09a28     03 3E 66 F0 | 	shl	local13, #3
09a2c     35 00 00 FF 
09a30     0C E4 05 F1 | 	add	objptr, ##27148
09a34     F2 3E 02 F1 | 	add	local13, objptr
09a38     1F 13 02 FB | 	rdlong	arg01, local13
09a3c     98 01 00 FF 
09a40     48 15 06 F6 | 	mov	arg02, ##@LR__5580
09a44     35 00 00 FF 
09a48     0C E4 85 F1 | 	sub	objptr, ##27148
09a4c     6C 95 B1 FD | 	call	#__system___string_cmp
09a50     00 FA 0D F2 | 	cmp	result1, #0 wz
09a54     2C FA 05 56 |  if_ne	mov	result1, #44
09a58     70 03 90 5D |  if_ne	jmp	#LR__0855
09a5c                 | LR__0838
09a5c     02 38 06 F1 | 	add	local10, #2
09a60     1C 2D 02 F6 | 	mov	local04, local10
09a64     01 2C 86 F1 | 	sub	local04, #1
09a68     03 2C 66 F0 | 	shl	local04, #3
09a6c     35 00 00 FF 
09a70     0C E4 05 F1 | 	add	objptr, ##27148
09a74     F2 2C 02 F1 | 	add	local04, objptr
09a78     16 13 02 FB | 	rdlong	arg01, local04
09a7c     98 01 00 FF 
09a80     4A 15 06 F6 | 	mov	arg02, ##@LR__5581
09a84     35 00 00 FF 
09a88     0C E4 85 F1 | 	sub	objptr, ##27148
09a8c     2C 95 B1 FD | 	call	#__system___string_cmp
09a90     00 FA 0D F2 | 	cmp	result1, #0 wz
09a94     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09a98     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0835
09a9c                 | '   if m>3 then return 45
09a9c     04 3A 56 F2 | 	cmps	local11, #4 wc
09aa0     2D FA 05 36 |  if_ae	mov	result1, #45
09aa4     24 03 90 3D |  if_ae	jmp	#LR__0855
09aa8     00 41 06 F6 | 	mov	local14, #256
09aac     0C 42 06 F6 | 	mov	local15, #12
09ab0                 | LR__0839
09ab0                 | '   arraytype=array_no_type : esize=12
09ab0                 | ' 1350 
09ab0                 | '   if lparts(l).part$="as" then
09ab0     1C 2D 02 F6 | 	mov	local04, local10
09ab4     03 2C 66 F0 | 	shl	local04, #3
09ab8     35 00 00 FF 
09abc     0C E4 05 F1 | 	add	objptr, ##27148
09ac0     F2 2C 02 F1 | 	add	local04, objptr
09ac4     16 13 02 FB | 	rdlong	arg01, local04
09ac8     98 01 00 FF 
09acc     4C 15 06 F6 | 	mov	arg02, ##@LR__5582
09ad0     35 00 00 FF 
09ad4     0C E4 85 F1 | 	sub	objptr, ##27148
09ad8     E0 94 B1 FD | 	call	#__system___string_cmp
09adc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ae0     E8 01 90 5D |  if_ne	jmp	#LR__0854
09ae4                 | '     select case lparts(l+1).part$
09ae4     1C 3D 02 F6 | 	mov	local12, local10
09ae8     01 3C 06 F1 | 	add	local12, #1
09aec     03 3C 66 F0 | 	shl	local12, #3
09af0     35 00 00 FF 
09af4     0C E4 05 F1 | 	add	objptr, ##27148
09af8     F2 3C 02 F1 | 	add	local12, objptr
09afc     1E 45 02 FB | 	rdlong	local16, local12
09b00     98 01 00 FF 
09b04     4F 15 06 F6 | 	mov	arg02, ##@LR__5583
09b08     22 13 02 F6 | 	mov	arg01, local16
09b0c     35 00 00 FF 
09b10     0C E4 85 F1 | 	sub	objptr, ##27148
09b14     A4 94 B1 FD | 	call	#__system___string_cmp
09b18     00 FA 0D F2 | 	cmp	result1, #0 wz
09b1c     0C 01 90 AD |  if_e	jmp	#LR__0840
09b20     98 01 00 FF 
09b24     54 15 06 F6 | 	mov	arg02, ##@LR__5584
09b28     22 13 02 F6 | 	mov	arg01, local16
09b2c     8C 94 B1 FD | 	call	#__system___string_cmp
09b30     00 FA 0D F2 | 	cmp	result1, #0 wz
09b34     00 01 90 AD |  if_e	jmp	#LR__0841
09b38     98 01 00 FF 
09b3c     5A 15 06 F6 | 	mov	arg02, ##@LR__5585
09b40     22 13 02 F6 | 	mov	arg01, local16
09b44     74 94 B1 FD | 	call	#__system___string_cmp
09b48     00 FA 0D F2 | 	cmp	result1, #0 wz
09b4c     F4 00 90 AD |  if_e	jmp	#LR__0842
09b50     98 01 00 FF 
09b54     60 15 06 F6 | 	mov	arg02, ##@LR__5586
09b58     22 13 02 F6 | 	mov	arg01, local16
09b5c     5C 94 B1 FD | 	call	#__system___string_cmp
09b60     00 FA 0D F2 | 	cmp	result1, #0 wz
09b64     E8 00 90 AD |  if_e	jmp	#LR__0843
09b68     98 01 00 FF 
09b6c     67 15 06 F6 | 	mov	arg02, ##@LR__5587
09b70     22 13 02 F6 | 	mov	arg01, local16
09b74     44 94 B1 FD | 	call	#__system___string_cmp
09b78     00 FA 0D F2 | 	cmp	result1, #0 wz
09b7c     DC 00 90 AD |  if_e	jmp	#LR__0844
09b80     98 01 00 FF 
09b84     6C 15 06 F6 | 	mov	arg02, ##@LR__5588
09b88     22 13 02 F6 | 	mov	arg01, local16
09b8c     2C 94 B1 FD | 	call	#__system___string_cmp
09b90     00 FA 0D F2 | 	cmp	result1, #0 wz
09b94     D0 00 90 AD |  if_e	jmp	#LR__0845
09b98     98 01 00 FF 
09b9c     74 15 06 F6 | 	mov	arg02, ##@LR__5589
09ba0     22 13 02 F6 | 	mov	arg01, local16
09ba4     14 94 B1 FD | 	call	#__system___string_cmp
09ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
09bac     C4 00 90 AD |  if_e	jmp	#LR__0846
09bb0     98 01 00 FF 
09bb4     7A 15 06 F6 | 	mov	arg02, ##@LR__5590
09bb8     22 13 02 F6 | 	mov	arg01, local16
09bbc     FC 93 B1 FD | 	call	#__system___string_cmp
09bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
09bc4     B8 00 90 AD |  if_e	jmp	#LR__0847
09bc8     98 01 00 FF 
09bcc     80 15 06 F6 | 	mov	arg02, ##@LR__5591
09bd0     22 13 02 F6 | 	mov	arg01, local16
09bd4     E4 93 B1 FD | 	call	#__system___string_cmp
09bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
09bdc     AC 00 90 AD |  if_e	jmp	#LR__0848
09be0     98 01 00 FF 
09be4     87 15 06 F6 | 	mov	arg02, ##@LR__5592
09be8     22 13 02 F6 | 	mov	arg01, local16
09bec     CC 93 B1 FD | 	call	#__system___string_cmp
09bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
09bf4     A0 00 90 AD |  if_e	jmp	#LR__0849
09bf8     98 01 00 FF 
09bfc     8E 15 06 F6 | 	mov	arg02, ##@LR__5593
09c00     22 13 02 F6 | 	mov	arg01, local16
09c04     B4 93 B1 FD | 	call	#__system___string_cmp
09c08     00 FA 0D F2 | 	cmp	result1, #0 wz
09c0c     94 00 90 AD |  if_e	jmp	#LR__0850
09c10     98 01 00 FF 
09c14     95 15 06 F6 | 	mov	arg02, ##@LR__5594
09c18     22 13 02 F6 | 	mov	arg01, local16
09c1c     9C 93 B1 FD | 	call	#__system___string_cmp
09c20     00 FA 0D F2 | 	cmp	result1, #0 wz
09c24     88 00 90 AD |  if_e	jmp	#LR__0851
09c28     90 00 90 FD | 	jmp	#LR__0852
09c2c                 | LR__0840
09c2c     01 41 06 F6 | 	mov	local14, #257
09c30     01 42 06 F6 | 	mov	local15, #1
09c34     94 00 90 FD | 	jmp	#LR__0854
09c38                 | LR__0841
09c38     02 41 06 F6 | 	mov	local14, #258
09c3c     01 42 06 F6 | 	mov	local15, #1
09c40     88 00 90 FD | 	jmp	#LR__0854
09c44                 | LR__0842
09c44     03 41 06 F6 | 	mov	local14, #259
09c48     02 42 06 F6 | 	mov	local15, #2
09c4c     7C 00 90 FD | 	jmp	#LR__0854
09c50                 | LR__0843
09c50     04 41 06 F6 | 	mov	local14, #260
09c54     02 42 06 F6 | 	mov	local15, #2
09c58     70 00 90 FD | 	jmp	#LR__0854
09c5c                 | LR__0844
09c5c     05 41 06 F6 | 	mov	local14, #261
09c60     04 42 06 F6 | 	mov	local15, #4
09c64     64 00 90 FD | 	jmp	#LR__0854
09c68                 | LR__0845
09c68     05 41 06 F6 | 	mov	local14, #261
09c6c     04 42 06 F6 | 	mov	local15, #4
09c70     58 00 90 FD | 	jmp	#LR__0854
09c74                 | LR__0846
09c74     06 41 06 F6 | 	mov	local14, #262
09c78     04 42 06 F6 | 	mov	local15, #4
09c7c     4C 00 90 FD | 	jmp	#LR__0854
09c80                 | LR__0847
09c80     07 41 06 F6 | 	mov	local14, #263
09c84     08 42 06 F6 | 	mov	local15, #8
09c88     40 00 90 FD | 	jmp	#LR__0854
09c8c                 | LR__0848
09c8c     08 41 06 F6 | 	mov	local14, #264
09c90     08 42 06 F6 | 	mov	local15, #8
09c94     34 00 90 FD | 	jmp	#LR__0854
09c98                 | LR__0849
09c98     09 41 06 F6 | 	mov	local14, #265
09c9c     04 42 06 F6 | 	mov	local15, #4
09ca0     28 00 90 FD | 	jmp	#LR__0854
09ca4                 | LR__0850
09ca4     0A 41 06 F6 | 	mov	local14, #266
09ca8     08 42 06 F6 | 	mov	local15, #8
09cac     1C 00 90 FD | 	jmp	#LR__0854
09cb0                 | LR__0851
09cb0     0B 41 06 F6 | 	mov	local14, #267
09cb4     04 42 06 F6 | 	mov	local15, #4
09cb8     10 00 90 FD | 	jmp	#LR__0854
09cbc                 | LR__0852
09cbc     2F FA 05 F6 | 	mov	result1, #47
09cc0     08 01 90 FD | 	jmp	#LR__0855
09cc4                 | LR__0853
09cc4                 | '   return 46
09cc4     2E FA 05 F6 | 	mov	result1, #46
09cc8     00 01 90 FD | 	jmp	#LR__0855
09ccc                 | LR__0854
09ccc     13 43 02 FD | 	qmul	local15, local01
09cd0     18 32 62 FD | 	getqx	local07
09cd4     14 33 02 FD | 	qmul	local07, local02
09cd8     18 44 62 FD | 	getqx	local16
09cdc     15 45 02 FD | 	qmul	local16, local03
09ce0     51 00 00 FF 
09ce4     AC E5 05 F1 | 	add	objptr, ##41900
09ce8     F2 46 02 FB | 	rdlong	local17, objptr
09cec     20 15 02 F6 | 	mov	arg02, local14
09cf0     18 44 62 FD | 	getqx	local16
09cf4     22 47 82 F1 | 	sub	local17, local16
09cf8     10 46 86 F1 | 	sub	local17, #16
09cfc     0F 46 26 F5 | 	andn	local17, #15
09d00     F2 46 62 FC | 	wrlong	local17, objptr
09d04     51 00 00 FF 
09d08     AC E5 85 F1 | 	sub	objptr, ##41900
09d0c     23 13 02 F6 | 	mov	arg01, local17
09d10     C4 5A B1 FD | 	call	#_psdpoke
09d14     23 13 02 F6 | 	mov	arg01, local17
09d18     02 12 06 F1 | 	add	arg01, #2
09d1c     21 15 02 F6 | 	mov	arg02, local15
09d20     B4 5A B1 FD | 	call	#_psdpoke
09d24     23 13 02 F6 | 	mov	arg01, local17
09d28     04 12 06 F1 | 	add	arg01, #4
09d2c     13 15 02 F6 | 	mov	arg02, local01
09d30     5C 5A B1 FD | 	call	#_pslpoke
09d34     23 13 02 F6 | 	mov	arg01, local17
09d38     08 12 06 F1 | 	add	arg01, #8
09d3c     14 15 02 F6 | 	mov	arg02, local02
09d40     4C 5A B1 FD | 	call	#_pslpoke
09d44     23 13 02 F6 | 	mov	arg01, local17
09d48     0C 12 06 F1 | 	add	arg01, #12
09d4c     15 15 02 F6 | 	mov	arg02, local03
09d50     3C 5A B1 FD | 	call	#_pslpoke
09d54     18 3D 02 F6 | 	mov	local12, local06
09d58     04 3C 66 F0 | 	shl	local12, #4
09d5c     14 00 00 FF 
09d60     F8 E5 05 F1 | 	add	objptr, ##10744
09d64     F2 3C 02 F1 | 	add	local12, objptr
09d68     1E 2F 62 FC | 	wrlong	local05, local12
09d6c     18 3D 02 F6 | 	mov	local12, local06
09d70     04 3C 66 F0 | 	shl	local12, #4
09d74     F2 3C 02 F1 | 	add	local12, objptr
09d78     04 3C 06 F1 | 	add	local12, #4
09d7c     1E 47 62 FC | 	wrlong	local17, local12
09d80     18 3D 02 F6 | 	mov	local12, local06
09d84     04 3C 66 F0 | 	shl	local12, #4
09d88     F2 3C 02 F1 | 	add	local12, objptr
09d8c     0C 3C 06 F1 | 	add	local12, #12
09d90     1E 41 62 FC | 	wrlong	local14, local12
09d94                 | ' memtop=arrayptr
09d94                 | ' psdpoke arrayptr,arraytype 
09d94                 | ' psdpoke arrayptr+2,esize 
09d94                 | ' pslpoke arrayptr+4,dims(0)
09d94                 | ' pslpoke arrayptr+8,dims(1)
09d94                 | ' pslpoke arrayptr+12,dims(2)
09d94                 | ' variables(j).name=varname2$
09d94                 | ' variables(j).value.uresult=arrayptr
09d94                 | ' variables(j).vartype=arraytype
09d94                 | ' if j=varnum then varnum+=1
09d94     20 00 00 FF 
09d98     10 E4 05 F1 | 	add	objptr, ##16400
09d9c     F2 32 02 FB | 	rdlong	local07, objptr
09da0     35 00 00 FF 
09da4     08 E4 85 F1 | 	sub	objptr, ##27144
09da8     19 31 0A F2 | 	cmp	local06, local07 wz
09dac     35 00 00 AF 
09db0     08 E4 05 A1 |  if_e	add	objptr, ##27144
09db4     F2 32 02 AB |  if_e	rdlong	local07, objptr
09db8     01 32 06 A1 |  if_e	add	local07, #1
09dbc     F2 32 62 AC |  if_e	wrlong	local07, objptr
09dc0     35 00 00 AF 
09dc4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09dc8                 | ' return 0
09dc8     00 FA 05 F6 | 	mov	result1, #0
09dcc                 | LR__0855
09dcc     A7 F0 03 F6 | 	mov	ptra, fp
09dd0     B2 00 A0 FD | 	call	#popregs_
09dd4                 | _compile_dim_ret
09dd4     2D 00 64 FD | 	ret
09dd8                 | 
09dd8                 | ' 
09dd8                 | ' '----- compile 'for' command. 
09dd8                 | ' 
09dd8                 | ' function compile_for() as ulong  
09dd8                 | _compile_for
09dd8     05 4A 05 F6 | 	mov	COUNT_, #5
09ddc     A8 00 A0 FD | 	call	#pushregs_
09de0                 | ' 
09de0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09de0     37 00 00 FF 
09de4     44 E4 05 F1 | 	add	objptr, ##28228
09de8     F2 14 02 FB | 	rdlong	arg02, objptr
09dec     01 14 06 F1 | 	add	arg02, #1
09df0     03 14 66 F0 | 	shl	arg02, #3
09df4     02 00 00 FF 
09df8     38 E4 85 F1 | 	sub	objptr, ##1080
09dfc     F2 14 02 F1 | 	add	arg02, objptr
09e00     0A 13 02 FB | 	rdlong	arg01, arg02
09e04     35 00 00 FF 
09e08     0C E4 85 F1 | 	sub	objptr, ##27148
09e0c                 | ' 
09e0c                 | ' select case s
09e0c     96 01 00 FF 
09e10     C4 14 06 F6 | 	mov	arg02, ##@LR__5331
09e14     A4 91 B1 FD | 	call	#__system___string_cmp
09e18     00 FA 0D F2 | 	cmp	result1, #0 wz
09e1c     1B FA 05 A6 |  if_e	mov	result1, #27
09e20     00 FA 05 56 |  if_ne	mov	result1, #0
09e24     00 FA 0D F2 | 	cmp	result1, #0 wz
09e28     0C 00 90 AD |  if_e	jmp	#LR__0860
09e2c     05 12 06 F6 | 	mov	arg01, #5
09e30     D0 DD BF FD | 	call	#_compile_immediate_assign
09e34     08 00 90 FD | 	jmp	#LR__0861
09e38                 | LR__0860
09e38     20 FA 05 F6 | 	mov	result1, #32
09e3c     D0 02 90 FD | 	jmp	#LR__0865
09e40                 | LR__0861
09e40     4A 00 00 FF 
09e44     7C E4 05 F1 | 	add	objptr, ##38012
09e48     F2 14 02 FB | 	rdlong	arg02, objptr
09e4c     0A 13 02 F6 | 	mov	arg01, arg02
09e50     01 12 86 F1 | 	sub	arg01, #1
09e54     09 2D 02 F6 | 	mov	local04, arg01
09e58     01 2C 66 F0 | 	shl	local04, #1
09e5c     09 2D 02 F1 | 	add	local04, arg01
09e60     02 2C 66 F0 | 	shl	local04, #2
09e64     03 00 00 FF 
09e68     00 E4 85 F1 | 	sub	objptr, ##1536
09e6c     F2 2C 02 F1 | 	add	local04, objptr
09e70     16 27 02 FB | 	rdlong	local01, local04
09e74     04 2C 06 F1 | 	add	local04, #4
09e78     16 2D 02 FB | 	rdlong	local04, local04
09e7c     01 14 86 F1 | 	sub	arg02, #1
09e80     0A 13 02 F6 | 	mov	arg01, arg02
09e84     01 12 66 F0 | 	shl	arg01, #1
09e88     0A 13 02 F1 | 	add	arg01, arg02
09e8c     02 12 66 F0 | 	shl	arg01, #2
09e90     F2 12 02 F1 | 	add	arg01, objptr
09e94     08 12 06 F1 | 	add	arg01, #8
09e98     09 15 02 FB | 	rdlong	arg02, arg01
09e9c     16 29 02 F6 | 	mov	local02, local04
09ea0     0A 2B 02 F6 | 	mov	local03, arg02
09ea4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09ea4     17 2A 0E F2 | 	cmp	local03, #23 wz
09ea8     47 00 00 FF 
09eac     7C E4 85 F1 | 	sub	objptr, ##36476
09eb0     22 FA 05 56 |  if_ne	mov	result1, #34
09eb4     58 02 90 5D |  if_ne	jmp	#LR__0865
09eb8     13 2F 02 F6 | 	mov	local05, local01
09ebc                 | ' varnum=t1.result.uresult
09ebc                 | ' if lparts(ct).part$<>"to" then return 33
09ebc     37 00 00 FF 
09ec0     44 E4 05 F1 | 	add	objptr, ##28228
09ec4     F2 26 02 FB | 	rdlong	local01, objptr
09ec8     03 26 66 F0 | 	shl	local01, #3
09ecc     02 00 00 FF 
09ed0     38 E4 85 F1 | 	sub	objptr, ##1080
09ed4     F2 26 02 F1 | 	add	local01, objptr
09ed8     13 13 02 FB | 	rdlong	arg01, local01
09edc     98 01 00 FF 
09ee0     9C 15 06 F6 | 	mov	arg02, ##@LR__5595
09ee4     35 00 00 FF 
09ee8     0C E4 85 F1 | 	sub	objptr, ##27148
09eec     CC 90 B1 FD | 	call	#__system___string_cmp
09ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ef4     21 FA 05 56 |  if_ne	mov	result1, #33
09ef8     14 02 90 5D |  if_ne	jmp	#LR__0865
09efc     37 00 00 FF 
09f00     44 E4 05 F1 | 	add	objptr, ##28228
09f04     F2 2C 02 FB | 	rdlong	local04, objptr
09f08     01 2C 06 F1 | 	add	local04, #1
09f0c     F2 2C 62 FC | 	wrlong	local04, objptr
09f10     37 00 00 FF 
09f14     44 E4 85 F1 | 	sub	objptr, ##28228
09f18     A8 11 B0 FD | 	call	#_expr
09f1c                 | ' ct+=1
09f1c                 | ' expr()  										' there is "to" value pushed on the stack
09f1c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09f1c     37 00 00 FF 
09f20     44 E4 05 F1 | 	add	objptr, ##28228
09f24     F2 2C 02 FB | 	rdlong	local04, objptr
09f28     03 2C 66 F0 | 	shl	local04, #3
09f2c     02 00 00 FF 
09f30     38 E4 85 F1 | 	sub	objptr, ##1080
09f34     F2 2C 02 F1 | 	add	local04, objptr
09f38     16 13 02 FB | 	rdlong	arg01, local04
09f3c     98 01 00 FF 
09f40     9F 15 06 F6 | 	mov	arg02, ##@LR__5596
09f44     35 00 00 FF 
09f48     0C E4 85 F1 | 	sub	objptr, ##27148
09f4c     6C 90 B1 FD | 	call	#__system___string_cmp
09f50     00 FA 0D F2 | 	cmp	result1, #0 wz
09f54     3C 00 90 AD |  if_e	jmp	#LR__0862
09f58     37 00 00 FF 
09f5c     44 E4 05 F1 | 	add	objptr, ##28228
09f60     F2 2C 02 FB | 	rdlong	local04, objptr
09f64     03 2C 66 F0 | 	shl	local04, #3
09f68     02 00 00 FF 
09f6c     38 E4 85 F1 | 	sub	objptr, ##1080
09f70     F2 2C 02 F1 | 	add	local04, objptr
09f74     16 13 02 FB | 	rdlong	arg01, local04
09f78     98 01 00 FF 
09f7c     A4 15 06 F6 | 	mov	arg02, ##@LR__5597
09f80     35 00 00 FF 
09f84     0C E4 85 F1 | 	sub	objptr, ##27148
09f88     30 90 B1 FD | 	call	#__system___string_cmp
09f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f90     24 00 90 5D |  if_ne	jmp	#LR__0863
09f94                 | LR__0862
09f94     37 00 00 FF 
09f98     44 E4 05 F1 | 	add	objptr, ##28228
09f9c     F2 26 02 FB | 	rdlong	local01, objptr
09fa0     01 26 06 F1 | 	add	local01, #1
09fa4     F2 26 62 FC | 	wrlong	local01, objptr
09fa8     37 00 00 FF 
09fac     44 E4 85 F1 | 	sub	objptr, ##28228
09fb0     10 11 B0 FD | 	call	#_expr
09fb4     78 00 90 FD | 	jmp	#LR__0864
09fb8                 | LR__0863
09fb8     4A 00 00 FF 
09fbc     7C E4 05 F1 | 	add	objptr, ##38012
09fc0     F2 26 02 FB | 	rdlong	local01, objptr
09fc4     13 2D 02 F6 | 	mov	local04, local01
09fc8     01 2C 66 F0 | 	shl	local04, #1
09fcc     13 2D 02 F1 | 	add	local04, local01
09fd0     02 2C 66 F0 | 	shl	local04, #2
09fd4     03 00 00 FF 
09fd8     00 E4 85 F1 | 	sub	objptr, ##1536
09fdc     F2 2C 02 F1 | 	add	local04, objptr
09fe0     08 2C 06 F1 | 	add	local04, #8
09fe4     16 39 68 FC | 	wrlong	#28, local04
09fe8     03 00 00 FF 
09fec     00 E4 05 F1 | 	add	objptr, ##1536
09ff0     F2 26 02 FB | 	rdlong	local01, objptr
09ff4     13 2D 02 F6 | 	mov	local04, local01
09ff8     01 2C 66 F0 | 	shl	local04, #1
09ffc     13 2D 02 F1 | 	add	local04, local01
0a000     02 2C 66 F0 | 	shl	local04, #2
0a004     03 00 00 FF 
0a008     00 E4 85 F1 | 	sub	objptr, ##1536
0a00c     F2 2C 02 F1 | 	add	local04, objptr
0a010     16 03 68 FC | 	wrlong	#1, local04
0a014     03 00 00 FF 
0a018     00 E4 05 F1 | 	add	objptr, ##1536
0a01c     F2 26 02 FB | 	rdlong	local01, objptr
0a020     01 26 06 F1 | 	add	local01, #1
0a024     F2 26 62 FC | 	wrlong	local01, objptr
0a028     4A 00 00 FF 
0a02c     7C E4 85 F1 | 	sub	objptr, ##38012
0a030                 | LR__0864
0a030     4A 00 00 FF 
0a034     7C E4 05 F1 | 	add	objptr, ##38012
0a038     F2 26 02 FB | 	rdlong	local01, objptr
0a03c     13 2D 02 F6 | 	mov	local04, local01
0a040     01 2C 66 F0 | 	shl	local04, #1
0a044     13 2D 02 F1 | 	add	local04, local01
0a048     02 2C 66 F0 | 	shl	local04, #2
0a04c     03 00 00 FF 
0a050     00 E4 85 F1 | 	sub	objptr, ##1536
0a054     F2 2C 02 F1 | 	add	local04, objptr
0a058     08 2C 06 F1 | 	add	local04, #8
0a05c     16 39 68 FC | 	wrlong	#28, local04
0a060     03 00 00 FF 
0a064     00 E4 05 F1 | 	add	objptr, ##1536
0a068     F2 26 02 FB | 	rdlong	local01, objptr
0a06c     13 2D 02 F6 | 	mov	local04, local01
0a070     01 2C 66 F0 | 	shl	local04, #1
0a074     13 2D 02 F1 | 	add	local04, local01
0a078     02 2C 66 F0 | 	shl	local04, #2
0a07c     03 00 00 FF 
0a080     00 E4 85 F1 | 	sub	objptr, ##1536
0a084     F2 2C 02 F1 | 	add	local04, objptr
0a088     16 2F 62 FC | 	wrlong	local05, local04
0a08c     03 00 00 FF 
0a090     00 E4 05 F1 | 	add	objptr, ##1536
0a094     F2 2E 02 FB | 	rdlong	local05, objptr
0a098     01 2E 06 F1 | 	add	local05, #1
0a09c     F2 2E 62 FC | 	wrlong	local05, objptr
0a0a0     17 27 02 F6 | 	mov	local01, local05
0a0a4     01 26 66 F0 | 	shl	local01, #1
0a0a8     17 27 02 F1 | 	add	local01, local05
0a0ac     02 26 66 F0 | 	shl	local01, #2
0a0b0     03 00 00 FF 
0a0b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a0b8     F2 26 02 F1 | 	add	local01, objptr
0a0bc     08 26 06 F1 | 	add	local01, #8
0a0c0     13 95 68 FC | 	wrlong	#74, local01
0a0c4     03 00 00 FF 
0a0c8     00 E4 05 F1 | 	add	objptr, ##1536
0a0cc     F2 2E 02 FB | 	rdlong	local05, objptr
0a0d0     17 27 02 F6 | 	mov	local01, local05
0a0d4     01 26 66 F0 | 	shl	local01, #1
0a0d8     17 27 02 F1 | 	add	local01, local05
0a0dc     02 26 66 F0 | 	shl	local01, #2
0a0e0     03 00 00 FF 
0a0e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a0e8     F2 26 02 F1 | 	add	local01, objptr
0a0ec     13 01 68 FC | 	wrlong	#0, local01
0a0f0     03 00 00 FF 
0a0f4     00 E4 05 F1 | 	add	objptr, ##1536
0a0f8     F2 2E 02 FB | 	rdlong	local05, objptr
0a0fc     01 2E 06 F1 | 	add	local05, #1
0a100     F2 2E 62 FC | 	wrlong	local05, objptr
0a104     4A 00 00 FF 
0a108     7C E4 85 F1 | 	sub	objptr, ##38012
0a10c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0a10c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a10c                 | ' return 0
0a10c     00 FA 05 F6 | 	mov	result1, #0
0a110                 | LR__0865
0a110     A7 F0 03 F6 | 	mov	ptra, fp
0a114     B2 00 A0 FD | 	call	#popregs_
0a118                 | _compile_for_ret
0a118     2D 00 64 FD | 	ret
0a11c                 | 
0a11c                 | ' 
0a11c                 | ' '----- compile 'next' command. 
0a11c                 | ' 
0a11c                 | ' function compile_next() as ulong
0a11c                 | _compile_next
0a11c     04 4A 05 F6 | 	mov	COUNT_, #4
0a120     A8 00 A0 FD | 	call	#pushregs_
0a124     37 00 00 FF 
0a128     44 E4 05 F1 | 	add	objptr, ##28228
0a12c     F2 14 02 FB | 	rdlong	arg02, objptr
0a130     03 14 66 F0 | 	shl	arg02, #3
0a134     02 00 00 FF 
0a138     38 E4 85 F1 | 	sub	objptr, ##1080
0a13c     F2 14 02 F1 | 	add	arg02, objptr
0a140     0A 27 02 FB | 	rdlong	local01, arg02
0a144                 | ' 
0a144                 | ' varname$=lparts(ct).part$ 
0a144                 | ' if varnum=0 then return 35
0a144     04 E4 85 F1 | 	sub	objptr, #4
0a148     F2 14 0A FB | 	rdlong	arg02, objptr wz
0a14c     35 00 00 FF 
0a150     08 E4 85 F1 | 	sub	objptr, ##27144
0a154     23 FA 05 A6 |  if_e	mov	result1, #35
0a158     4C 01 90 AD |  if_e	jmp	#LR__0872
0a15c     01 28 66 F6 | 	neg	local02, #1
0a160                 | ' j=-1
0a160                 | ' for i=0 to varnum-1
0a160     00 2A 06 F6 | 	mov	local03, #0
0a164     35 00 00 FF 
0a168     08 E4 05 F1 | 	add	objptr, ##27144
0a16c     F2 2C 02 FB | 	rdlong	local04, objptr
0a170     35 00 00 FF 
0a174     08 E4 85 F1 | 	sub	objptr, ##27144
0a178                 | LR__0870
0a178     16 2B 12 F2 | 	cmp	local03, local04 wc
0a17c     38 00 90 3D |  if_ae	jmp	#LR__0871
0a180                 | '   if variables(i).name=varname$ then j=i : exit
0a180     15 15 02 F6 | 	mov	arg02, local03
0a184     04 14 66 F0 | 	shl	arg02, #4
0a188     14 00 00 FF 
0a18c     F8 E5 05 F1 | 	add	objptr, ##10744
0a190     F2 14 02 F1 | 	add	arg02, objptr
0a194     0A 13 02 FB | 	rdlong	arg01, arg02
0a198     13 15 02 F6 | 	mov	arg02, local01
0a19c     14 00 00 FF 
0a1a0     F8 E5 85 F1 | 	sub	objptr, ##10744
0a1a4     14 8E B1 FD | 	call	#__system___string_cmp
0a1a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1ac     15 29 02 A6 |  if_e	mov	local02, local03
0a1b0     01 2A 06 51 |  if_ne	add	local03, #1
0a1b4     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
0a1b8                 | LR__0871
0a1b8                 | ' if j=-1 then return 35
0a1b8     FF FF 7F FF 
0a1bc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0a1c0     23 FA 05 A6 |  if_e	mov	result1, #35
0a1c4     E0 00 90 AD |  if_e	jmp	#LR__0872
0a1c8     4A 00 00 FF 
0a1cc     7C E4 05 F1 | 	add	objptr, ##38012
0a1d0     F2 2C 02 FB | 	rdlong	local04, objptr
0a1d4     16 2B 02 F6 | 	mov	local03, local04
0a1d8     01 2A 66 F0 | 	shl	local03, #1
0a1dc     16 2B 02 F1 | 	add	local03, local04
0a1e0     02 2A 66 F0 | 	shl	local03, #2
0a1e4     03 00 00 FF 
0a1e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a1ec     F2 2A 02 F1 | 	add	local03, objptr
0a1f0     08 2A 06 F1 | 	add	local03, #8
0a1f4     15 39 68 FC | 	wrlong	#28, local03
0a1f8     03 00 00 FF 
0a1fc     00 E4 05 F1 | 	add	objptr, ##1536
0a200     F2 2C 02 FB | 	rdlong	local04, objptr
0a204     16 2B 02 F6 | 	mov	local03, local04
0a208     01 2A 66 F0 | 	shl	local03, #1
0a20c     16 2B 02 F1 | 	add	local03, local04
0a210     02 2A 66 F0 | 	shl	local03, #2
0a214     03 00 00 FF 
0a218     00 E4 85 F1 | 	sub	objptr, ##1536
0a21c     F2 2A 02 F1 | 	add	local03, objptr
0a220     15 29 62 FC | 	wrlong	local02, local03
0a224     03 00 00 FF 
0a228     00 E4 05 F1 | 	add	objptr, ##1536
0a22c     F2 2C 02 FB | 	rdlong	local04, objptr
0a230     01 2C 06 F1 | 	add	local04, #1
0a234     F2 2C 62 FC | 	wrlong	local04, objptr
0a238     16 2B 02 F6 | 	mov	local03, local04
0a23c     01 2A 66 F0 | 	shl	local03, #1
0a240     16 2B 02 F1 | 	add	local03, local04
0a244     02 2A 66 F0 | 	shl	local03, #2
0a248     03 00 00 FF 
0a24c     00 E4 85 F1 | 	sub	objptr, ##1536
0a250     F2 2A 02 F1 | 	add	local03, objptr
0a254     08 2A 06 F1 | 	add	local03, #8
0a258     15 97 68 FC | 	wrlong	#75, local03
0a25c     03 00 00 FF 
0a260     00 E4 05 F1 | 	add	objptr, ##1536
0a264     F2 2C 02 FB | 	rdlong	local04, objptr
0a268     16 2B 02 F6 | 	mov	local03, local04
0a26c     01 2A 66 F0 | 	shl	local03, #1
0a270     16 2B 02 F1 | 	add	local03, local04
0a274     02 2A 66 F0 | 	shl	local03, #2
0a278     03 00 00 FF 
0a27c     00 E4 85 F1 | 	sub	objptr, ##1536
0a280     F2 2A 02 F1 | 	add	local03, objptr
0a284     15 01 68 FC | 	wrlong	#0, local03
0a288     03 00 00 FF 
0a28c     00 E4 05 F1 | 	add	objptr, ##1536
0a290     F2 2C 02 FB | 	rdlong	local04, objptr
0a294     01 2C 06 F1 | 	add	local04, #1
0a298     F2 2C 62 FC | 	wrlong	local04, objptr
0a29c     4A 00 00 FF 
0a2a0     7C E4 85 F1 | 	sub	objptr, ##38012
0a2a4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0a2a4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0a2a4                 | ' return 0
0a2a4     00 FA 05 F6 | 	mov	result1, #0
0a2a8                 | LR__0872
0a2a8     A7 F0 03 F6 | 	mov	ptra, fp
0a2ac     B2 00 A0 FD | 	call	#popregs_
0a2b0                 | _compile_next_ret
0a2b0     2D 00 64 FD | 	ret
0a2b4                 | 
0a2b4                 | ' 
0a2b4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0a2b4                 | ' 
0a2b4                 | ' function compile_gosub() as ulong
0a2b4                 | _compile_gosub
0a2b4     02 4A 05 F6 | 	mov	COUNT_, #2
0a2b8     A8 00 A0 FD | 	call	#pushregs_
0a2bc     4A 00 00 FF 
0a2c0     7C E4 05 F1 | 	add	objptr, ##38012
0a2c4     F2 26 02 FB | 	rdlong	local01, objptr
0a2c8     13 29 02 F6 | 	mov	local02, local01
0a2cc     01 28 66 F0 | 	shl	local02, #1
0a2d0     13 29 02 F1 | 	add	local02, local01
0a2d4     02 28 66 F0 | 	shl	local02, #2
0a2d8     03 00 00 FF 
0a2dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a2e0     F2 28 02 F1 | 	add	local02, objptr
0a2e4     08 28 06 F1 | 	add	local02, #8
0a2e8     14 53 69 FC | 	wrlong	#169, local02
0a2ec     03 00 00 FF 
0a2f0     00 E4 05 F1 | 	add	objptr, ##1536
0a2f4     F2 28 02 FB | 	rdlong	local02, objptr
0a2f8     01 28 06 F1 | 	add	local02, #1
0a2fc     F2 28 62 FC | 	wrlong	local02, objptr
0a300     4A 00 00 FF 
0a304     7C E4 85 F1 | 	sub	objptr, ##38012
0a308     0C 00 B0 FD | 	call	#_compile_goto
0a30c                 | ' compiledline(lineptr).result_type=token_gosub
0a30c                 | ' lineptr+=1
0a30c                 | ' err=compile_goto()
0a30c                 | ' return err
0a30c     A7 F0 03 F6 | 	mov	ptra, fp
0a310     B2 00 A0 FD | 	call	#popregs_
0a314                 | _compile_gosub_ret
0a314     2D 00 64 FD | 	ret
0a318                 | 
0a318                 | ' 
0a318                 | ' '----- compile 'goto' 
0a318                 | ' 
0a318                 | ' function compile_goto() as ulong
0a318                 | _compile_goto
0a318     03 4A 05 F6 | 	mov	COUNT_, #3
0a31c     A8 00 A0 FD | 	call	#pushregs_
0a320     34 F0 07 F1 | 	add	ptra, #52
0a324                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0a324     37 00 00 FF 
0a328     44 E4 05 F1 | 	add	objptr, ##28228
0a32c     F2 16 02 FB | 	rdlong	arg03, objptr
0a330     03 16 66 F0 | 	shl	arg03, #3
0a334     02 00 00 FF 
0a338     38 E4 85 F1 | 	sub	objptr, ##1080
0a33c     F2 16 02 F1 | 	add	arg03, objptr
0a340     04 16 06 F1 | 	add	arg03, #4
0a344     0B 17 02 FB | 	rdlong	arg03, arg03
0a348     01 00 00 FF 
0a34c     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a350     35 00 00 FF 
0a354     0C E4 85 F1 | 	sub	objptr, ##27148
0a358     CC 02 90 5D |  if_ne	jmp	#LR__0885
0a35c     37 00 00 FF 
0a360     44 E4 05 F1 | 	add	objptr, ##28228
0a364     F2 16 02 FB | 	rdlong	arg03, objptr
0a368     01 16 06 F1 | 	add	arg03, #1
0a36c     03 16 66 F0 | 	shl	arg03, #3
0a370     02 00 00 FF 
0a374     38 E4 85 F1 | 	sub	objptr, ##1080
0a378     F2 16 02 F1 | 	add	arg03, objptr
0a37c     04 16 06 F1 | 	add	arg03, #4
0a380     0B 17 02 FB | 	rdlong	arg03, arg03
0a384     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a388     35 00 00 FF 
0a38c     0C E4 85 F1 | 	sub	objptr, ##27148
0a390     94 02 90 5D |  if_ne	jmp	#LR__0885
0a394     37 00 00 FF 
0a398     44 E4 05 F1 | 	add	objptr, ##28228
0a39c     F2 16 02 FB | 	rdlong	arg03, objptr
0a3a0     03 16 66 F0 | 	shl	arg03, #3
0a3a4     02 00 00 FF 
0a3a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a3ac     F2 16 02 F1 | 	add	arg03, objptr
0a3b0     0B 13 02 FB | 	rdlong	arg01, arg03
0a3b4     00 14 06 F6 | 	mov	arg02, #0
0a3b8     35 00 00 FF 
0a3bc     0C E4 85 F1 | 	sub	objptr, ##27148
0a3c0     C0 C0 B1 FD | 	call	#__system____builtin_atoi
0a3c4     04 4E 05 F1 | 	add	fp, #4
0a3c8     A7 FA 61 FC | 	wrlong	result1, fp
0a3cc     4A 00 00 FF 
0a3d0     7C E4 05 F1 | 	add	objptr, ##38012
0a3d4     F2 26 02 FB | 	rdlong	local01, objptr
0a3d8     13 29 02 F6 | 	mov	local02, local01
0a3dc     01 28 66 F0 | 	shl	local02, #1
0a3e0     13 29 02 F1 | 	add	local02, local01
0a3e4     02 28 66 F0 | 	shl	local02, #2
0a3e8     03 00 00 FF 
0a3ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a3f0     F2 28 02 F1 | 	add	local02, objptr
0a3f4     08 28 06 F1 | 	add	local02, #8
0a3f8     14 9D 68 FC | 	wrlong	#78, local02
0a3fc     03 00 00 FF 
0a400     0C E4 05 F1 | 	add	objptr, ##1548
0a404     F2 2A 02 FB | 	rdlong	local03, objptr
0a408     4A 00 00 FF 
0a40c     88 E4 85 F1 | 	sub	objptr, ##38024
0a410     04 4E 05 F1 | 	add	fp, #4
0a414     A7 2A 62 FC | 	wrlong	local03, fp
0a418     08 4E 85 F1 | 	sub	fp, #8
0a41c                 | '   gotoline=val%(lparts(ct).part$) 
0a41c                 | '   compiledline(lineptr).result_type=token_fast_goto
0a41c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0a41c                 | '   do
0a41c                 | LR__0880
0a41c     10 4E 05 F1 | 	add	fp, #16
0a420     A7 12 02 F6 | 	mov	arg01, fp
0a424     08 4E 85 F1 | 	sub	fp, #8
0a428     A7 14 02 FB | 	rdlong	arg02, fp
0a42c     08 4E 85 F1 | 	sub	fp, #8
0a430     18 16 06 F6 | 	mov	arg03, #24
0a434     0B 00 00 FF 
0a438     CC E4 05 F1 | 	add	objptr, ##5836
0a43c     14 7F B1 FD | 	call	#_psram_spin2_read1
0a440     0B 00 00 FF 
0a444     CC E4 85 F1 | 	sub	objptr, ##5836
0a448                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a448                 | '     if gotoheader(0)<>$FFFFFFFF then
0a448     10 4E 05 F1 | 	add	fp, #16
0a44c     A7 2A 02 FB | 	rdlong	local03, fp
0a450     10 4E 85 F1 | 	sub	fp, #16
0a454     FF FF 7F FF 
0a458     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0a45c     24 00 90 AD |  if_e	jmp	#LR__0881
0a460     08 4E 05 F1 | 	add	fp, #8
0a464     A7 2A 02 FB | 	rdlong	local03, fp
0a468     04 4E 05 F1 | 	add	fp, #4
0a46c     A7 2A 62 FC | 	wrlong	local03, fp
0a470     18 4E 05 F1 | 	add	fp, #24
0a474     A7 2A 02 FB | 	rdlong	local03, fp
0a478     1C 4E 85 F1 | 	sub	fp, #28
0a47c     A7 2A 62 FC | 	wrlong	local03, fp
0a480     08 4E 85 F1 | 	sub	fp, #8
0a484                 | LR__0881
0a484     24 4E 05 F1 | 	add	fp, #36
0a488     A7 2A 02 FB | 	rdlong	local03, fp
0a48c     24 4E 85 F1 | 	sub	fp, #36
0a490     FF FF 3F FF 
0a494     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0a498     10 4E 05 51 |  if_ne	add	fp, #16
0a49c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0a4a0     10 4E 85 51 |  if_ne	sub	fp, #16
0a4a4     FF FF 7F 5F 
0a4a8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a4ac     1C 00 90 AD |  if_e	jmp	#LR__0882
0a4b0     10 4E 05 F1 | 	add	fp, #16
0a4b4     A7 2A 02 FB | 	rdlong	local03, fp
0a4b8     0C 4E 85 F1 | 	sub	fp, #12
0a4bc     A7 28 02 FB | 	rdlong	local02, fp
0a4c0     04 4E 85 F1 | 	sub	fp, #4
0a4c4     14 2B 0A F2 | 	cmp	local03, local02 wz
0a4c8     50 FF 9F 5D |  if_ne	jmp	#LR__0880
0a4cc                 | LR__0882
0a4cc                 | '   if gotoheader(0)=gotoline then
0a4cc     10 4E 05 F1 | 	add	fp, #16
0a4d0     A7 2A 02 FB | 	rdlong	local03, fp
0a4d4     0C 4E 85 F1 | 	sub	fp, #12
0a4d8     A7 26 02 FB | 	rdlong	local01, fp
0a4dc     04 4E 85 F1 | 	sub	fp, #4
0a4e0     13 2B 0A F2 | 	cmp	local03, local01 wz
0a4e4     7C 00 90 5D |  if_ne	jmp	#LR__0883
0a4e8     4A 00 00 FF 
0a4ec     7C E4 05 F1 | 	add	objptr, ##38012
0a4f0     F2 26 02 FB | 	rdlong	local01, objptr
0a4f4     13 29 02 F6 | 	mov	local02, local01
0a4f8     01 28 66 F0 | 	shl	local02, #1
0a4fc     13 29 02 F1 | 	add	local02, local01
0a500     02 28 66 F0 | 	shl	local02, #2
0a504     03 00 00 FF 
0a508     00 E4 85 F1 | 	sub	objptr, ##1536
0a50c     F2 28 02 F1 | 	add	local02, objptr
0a510     0C 4E 05 F1 | 	add	fp, #12
0a514     A7 2A 02 FB | 	rdlong	local03, fp
0a518     14 2B 62 FC | 	wrlong	local03, local02
0a51c     03 00 00 FF 
0a520     00 E4 05 F1 | 	add	objptr, ##1536
0a524     F2 26 02 FB | 	rdlong	local01, objptr
0a528     13 29 02 F6 | 	mov	local02, local01
0a52c     01 28 66 F0 | 	shl	local02, #1
0a530     13 29 02 F1 | 	add	local02, local01
0a534     02 28 66 F0 | 	shl	local02, #2
0a538     03 00 00 FF 
0a53c     00 E4 85 F1 | 	sub	objptr, ##1536
0a540     F2 28 02 F1 | 	add	local02, objptr
0a544     08 4E 85 F1 | 	sub	fp, #8
0a548     A7 2A 02 FB | 	rdlong	local03, fp
0a54c     04 4E 85 F1 | 	sub	fp, #4
0a550     04 28 06 F1 | 	add	local02, #4
0a554     14 2B 62 FC | 	wrlong	local03, local02
0a558     47 00 00 FF 
0a55c     7C E4 85 F1 | 	sub	objptr, ##36476
0a560     A4 00 90 FD | 	jmp	#LR__0884
0a564                 | LR__0883
0a564     4A 00 00 FF 
0a568     7C E4 05 F1 | 	add	objptr, ##38012
0a56c     F2 26 02 FB | 	rdlong	local01, objptr
0a570     13 29 02 F6 | 	mov	local02, local01
0a574     01 28 66 F0 | 	shl	local02, #1
0a578     13 29 02 F1 | 	add	local02, local01
0a57c     02 28 66 F0 | 	shl	local02, #2
0a580     03 00 00 FF 
0a584     00 E4 85 F1 | 	sub	objptr, ##1536
0a588     F2 28 02 F1 | 	add	local02, objptr
0a58c     00 00 C0 FF 
0a590     14 01 68 FC | 	wrlong	##-2147483648, local02
0a594     03 00 00 FF 
0a598     00 E4 05 F1 | 	add	objptr, ##1536
0a59c     F2 26 02 FB | 	rdlong	local01, objptr
0a5a0     13 29 02 F6 | 	mov	local02, local01
0a5a4     01 28 66 F0 | 	shl	local02, #1
0a5a8     13 29 02 F1 | 	add	local02, local01
0a5ac     02 28 66 F0 | 	shl	local02, #2
0a5b0     03 00 00 FF 
0a5b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a5b8     F2 28 02 F1 | 	add	local02, objptr
0a5bc     04 4E 05 F1 | 	add	fp, #4
0a5c0     A7 2A 02 FB | 	rdlong	local03, fp
0a5c4     04 4E 85 F1 | 	sub	fp, #4
0a5c8     04 28 06 F1 | 	add	local02, #4
0a5cc     14 2B 62 FC | 	wrlong	local03, local02
0a5d0     03 00 00 FF 
0a5d4     00 E4 05 F1 | 	add	objptr, ##1536
0a5d8     F2 26 02 FB | 	rdlong	local01, objptr
0a5dc     13 29 02 F6 | 	mov	local02, local01
0a5e0     01 28 66 F0 | 	shl	local02, #1
0a5e4     13 29 02 F1 | 	add	local02, local01
0a5e8     02 28 66 F0 | 	shl	local02, #2
0a5ec     03 00 00 FF 
0a5f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a5f4     F2 28 02 F1 | 	add	local02, objptr
0a5f8     08 28 06 F1 | 	add	local02, #8
0a5fc     14 A7 68 FC | 	wrlong	#83, local02
0a600     47 00 00 FF 
0a604     7C E4 85 F1 | 	sub	objptr, ##36476
0a608                 | LR__0884
0a608     4A 00 00 FF 
0a60c     7C E4 05 F1 | 	add	objptr, ##38012
0a610     F2 2A 02 FB | 	rdlong	local03, objptr
0a614     01 2A 06 F1 | 	add	local03, #1
0a618     F2 2A 62 FC | 	wrlong	local03, objptr
0a61c     4A 00 00 FF 
0a620     7C E4 85 F1 | 	sub	objptr, ##38012
0a624     D0 00 90 FD | 	jmp	#LR__0886
0a628                 | LR__0885
0a628     98 0A B0 FD | 	call	#_expr
0a62c     30 4E 05 F1 | 	add	fp, #48
0a630     A7 9E 68 FC | 	wrlong	#79, fp
0a634     08 4E 85 F1 | 	sub	fp, #8
0a638     A7 00 68 FC | 	wrlong	#0, fp
0a63c     04 4E 05 F1 | 	add	fp, #4
0a640     A7 2A 02 FB | 	rdlong	local03, fp
0a644     04 4E 05 F1 | 	add	fp, #4
0a648     A7 26 02 FB | 	rdlong	local01, fp
0a64c     30 4E 85 F1 | 	sub	fp, #48
0a650     4A 00 00 FF 
0a654     7C E4 05 F1 | 	add	objptr, ##38012
0a658     F2 28 02 FB | 	rdlong	local02, objptr
0a65c     14 17 02 F6 | 	mov	arg03, local02
0a660     01 16 66 F0 | 	shl	arg03, #1
0a664     14 17 02 F1 | 	add	arg03, local02
0a668     02 16 66 F0 | 	shl	arg03, #2
0a66c     03 00 00 FF 
0a670     00 E4 85 F1 | 	sub	objptr, ##1536
0a674     F2 16 02 F1 | 	add	arg03, objptr
0a678     0B 01 68 FC | 	wrlong	#0, arg03
0a67c     03 00 00 FF 
0a680     00 E4 05 F1 | 	add	objptr, ##1536
0a684     F2 28 02 FB | 	rdlong	local02, objptr
0a688     14 17 02 F6 | 	mov	arg03, local02
0a68c     01 16 66 F0 | 	shl	arg03, #1
0a690     14 17 02 F1 | 	add	arg03, local02
0a694     02 16 66 F0 | 	shl	arg03, #2
0a698     03 00 00 FF 
0a69c     00 E4 85 F1 | 	sub	objptr, ##1536
0a6a0     F2 16 02 F1 | 	add	arg03, objptr
0a6a4     04 16 06 F1 | 	add	arg03, #4
0a6a8     0B 2B 62 FC | 	wrlong	local03, arg03
0a6ac     03 00 00 FF 
0a6b0     00 E4 05 F1 | 	add	objptr, ##1536
0a6b4     F2 2A 02 FB | 	rdlong	local03, objptr
0a6b8     15 29 02 F6 | 	mov	local02, local03
0a6bc     01 28 66 F0 | 	shl	local02, #1
0a6c0     15 29 02 F1 | 	add	local02, local03
0a6c4     02 28 66 F0 | 	shl	local02, #2
0a6c8     03 00 00 FF 
0a6cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a6d0     F2 28 02 F1 | 	add	local02, objptr
0a6d4     08 28 06 F1 | 	add	local02, #8
0a6d8     14 27 62 FC | 	wrlong	local01, local02
0a6dc     03 00 00 FF 
0a6e0     00 E4 05 F1 | 	add	objptr, ##1536
0a6e4     F2 2A 02 FB | 	rdlong	local03, objptr
0a6e8     01 2A 06 F1 | 	add	local03, #1
0a6ec     F2 2A 62 FC | 	wrlong	local03, objptr
0a6f0     4A 00 00 FF 
0a6f4     7C E4 85 F1 | 	sub	objptr, ##38012
0a6f8                 | LR__0886
0a6f8                 | ' return 0
0a6f8     00 FA 05 F6 | 	mov	result1, #0
0a6fc     A7 F0 03 F6 | 	mov	ptra, fp
0a700     B2 00 A0 FD | 	call	#popregs_
0a704                 | _compile_goto_ret
0a704     2D 00 64 FD | 	ret
0a708                 | 
0a708                 | ' 
0a708                 | ' '----- compile 'on' (on..goto, on..gosub) 
0a708                 | ' 
0a708                 | ' function compile_on() as ulong
0a708                 | _compile_on
0a708     04 4A 05 F6 | 	mov	COUNT_, #4
0a70c     A8 00 A0 FD | 	call	#pushregs_
0a710     B0 09 B0 FD | 	call	#_expr
0a714     00 26 06 F6 | 	mov	local01, #0
0a718     4A 00 00 FF 
0a71c     7C E4 05 F1 | 	add	objptr, ##38012
0a720     F2 14 02 FB | 	rdlong	arg02, objptr
0a724     0A 13 02 F6 | 	mov	arg01, arg02
0a728     01 12 66 F0 | 	shl	arg01, #1
0a72c     0A 13 02 F1 | 	add	arg01, arg02
0a730     02 12 66 F0 | 	shl	arg01, #2
0a734     03 00 00 FF 
0a738     00 E4 85 F1 | 	sub	objptr, ##1536
0a73c     F2 12 02 F1 | 	add	arg01, objptr
0a740     08 12 06 F1 | 	add	arg01, #8
0a744     09 83 69 FC | 	wrlong	#193, arg01
0a748     03 00 00 FF 
0a74c     00 E4 05 F1 | 	add	objptr, ##1536
0a750     F2 14 02 FB | 	rdlong	arg02, objptr
0a754     0A 29 02 F6 | 	mov	local02, arg02
0a758     01 14 06 F1 | 	add	arg02, #1
0a75c     F2 14 62 FC | 	wrlong	arg02, objptr
0a760                 | ' expr()
0a760                 | ' 'print lparts(ct).part$ 'ok
0a760                 | ' numpar=0
0a760                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0a760                 | ' if lparts(ct).part$="goto" then
0a760     13 00 00 FF 
0a764     38 E4 85 F1 | 	sub	objptr, ##9784
0a768     F2 14 02 FB | 	rdlong	arg02, objptr
0a76c     03 14 66 F0 | 	shl	arg02, #3
0a770     02 00 00 FF 
0a774     38 E4 85 F1 | 	sub	objptr, ##1080
0a778     F2 14 02 F1 | 	add	arg02, objptr
0a77c     0A 13 02 FB | 	rdlong	arg01, arg02
0a780     98 01 00 FF 
0a784     A7 15 06 F6 | 	mov	arg02, ##@LR__5598
0a788     35 00 00 FF 
0a78c     0C E4 85 F1 | 	sub	objptr, ##27148
0a790     28 88 B1 FD | 	call	#__system___string_cmp
0a794     00 FA 0D F2 | 	cmp	result1, #0 wz
0a798     14 02 90 5D |  if_ne	jmp	#LR__0895
0a79c     37 00 00 FF 
0a7a0     44 E4 05 F1 | 	add	objptr, ##28228
0a7a4     F2 2A 02 FB | 	rdlong	local03, objptr
0a7a8     37 00 00 FF 
0a7ac     44 E4 85 F1 | 	sub	objptr, ##28228
0a7b0     01 2A 06 F1 | 	add	local03, #1
0a7b4                 | '   i=ct+1
0a7b4                 | '   do
0a7b4                 | LR__0890
0a7b4                 | '     if lparts(i).token=token_decimal then
0a7b4     15 FB 01 F6 | 	mov	result1, local03
0a7b8     03 FA 65 F0 | 	shl	result1, #3
0a7bc     35 00 00 FF 
0a7c0     0C E4 05 F1 | 	add	objptr, ##27148
0a7c4     F2 FA 01 F1 | 	add	result1, objptr
0a7c8     04 FA 05 F1 | 	add	result1, #4
0a7cc     FD FA 01 FB | 	rdlong	result1, result1
0a7d0     01 00 00 FF 
0a7d4     00 FA 0D F2 | 	cmp	result1, ##512 wz
0a7d8     35 00 00 FF 
0a7dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a7e0     DC 00 90 5D |  if_ne	jmp	#LR__0891
0a7e4     4A 00 00 FF 
0a7e8     7C E4 05 F1 | 	add	objptr, ##38012
0a7ec     F2 FA 01 FB | 	rdlong	result1, objptr
0a7f0     FD 14 02 F6 | 	mov	arg02, result1
0a7f4     01 14 66 F0 | 	shl	arg02, #1
0a7f8     FD 14 02 F1 | 	add	arg02, result1
0a7fc     02 14 66 F0 | 	shl	arg02, #2
0a800     03 00 00 FF 
0a804     00 E4 85 F1 | 	sub	objptr, ##1536
0a808     F2 14 02 F1 | 	add	arg02, objptr
0a80c     00 00 C0 FF 
0a810     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0a814     03 00 00 FF 
0a818     00 E4 05 F1 | 	add	objptr, ##1536
0a81c     F2 14 02 FB | 	rdlong	arg02, objptr
0a820     0A 2D 02 F6 | 	mov	local04, arg02
0a824     01 2C 66 F0 | 	shl	local04, #1
0a828     0A 2D 02 F1 | 	add	local04, arg02
0a82c     02 2C 66 F0 | 	shl	local04, #2
0a830     03 00 00 FF 
0a834     00 E4 85 F1 | 	sub	objptr, ##1536
0a838     F2 2C 02 F1 | 	add	local04, objptr
0a83c     15 15 02 F6 | 	mov	arg02, local03
0a840     03 14 66 F0 | 	shl	arg02, #3
0a844     12 00 00 FF 
0a848     70 E4 85 F1 | 	sub	objptr, ##9328
0a84c     F2 14 02 F1 | 	add	arg02, objptr
0a850     0A 13 02 FB | 	rdlong	arg01, arg02
0a854     00 14 06 F6 | 	mov	arg02, #0
0a858     35 00 00 FF 
0a85c     0C E4 85 F1 | 	sub	objptr, ##27148
0a860     20 BC B1 FD | 	call	#__system____builtin_atoi
0a864     04 2C 06 F1 | 	add	local04, #4
0a868     16 FB 61 FC | 	wrlong	result1, local04
0a86c     4A 00 00 FF 
0a870     7C E4 05 F1 | 	add	objptr, ##38012
0a874     F2 14 02 FB | 	rdlong	arg02, objptr
0a878     0A 2D 02 F6 | 	mov	local04, arg02
0a87c     01 2C 66 F0 | 	shl	local04, #1
0a880     0A 2D 02 F1 | 	add	local04, arg02
0a884     02 2C 66 F0 | 	shl	local04, #2
0a888     03 00 00 FF 
0a88c     00 E4 85 F1 | 	sub	objptr, ##1536
0a890     F2 2C 02 F1 | 	add	local04, objptr
0a894     08 2C 06 F1 | 	add	local04, #8
0a898     16 A7 68 FC | 	wrlong	#83, local04
0a89c     03 00 00 FF 
0a8a0     00 E4 05 F1 | 	add	objptr, ##1536
0a8a4     F2 2C 02 FB | 	rdlong	local04, objptr
0a8a8     01 2C 06 F1 | 	add	local04, #1
0a8ac     F2 2C 62 FC | 	wrlong	local04, objptr
0a8b0     4A 00 00 FF 
0a8b4     7C E4 85 F1 | 	sub	objptr, ##38012
0a8b8     01 26 06 F1 | 	add	local01, #1
0a8bc     08 00 90 FD | 	jmp	#LR__0892
0a8c0                 | LR__0891
0a8c0                 | '       return 17
0a8c0     11 FA 05 F6 | 	mov	result1, #17
0a8c4     5C 04 90 FD | 	jmp	#LR__0905
0a8c8                 | LR__0892
0a8c8     01 2A 06 F1 | 	add	local03, #1
0a8cc                 | '     i+=1
0a8cc                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0a8cc     15 2D 02 F6 | 	mov	local04, local03
0a8d0     03 2C 66 F0 | 	shl	local04, #3
0a8d4     35 00 00 FF 
0a8d8     0C E4 05 F1 | 	add	objptr, ##27148
0a8dc     F2 2C 02 F1 | 	add	local04, objptr
0a8e0     04 2C 06 F1 | 	add	local04, #4
0a8e4     16 2D 02 FB | 	rdlong	local04, local04
0a8e8     11 2C 0E F2 | 	cmp	local04, #17 wz
0a8ec     35 00 00 FF 
0a8f0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8f4     30 00 90 AD |  if_e	jmp	#LR__0893
0a8f8     15 2D 02 F6 | 	mov	local04, local03
0a8fc     03 2C 66 F0 | 	shl	local04, #3
0a900     35 00 00 FF 
0a904     0C E4 05 F1 | 	add	objptr, ##27148
0a908     F2 2C 02 F1 | 	add	local04, objptr
0a90c     04 2C 06 F1 | 	add	local04, #4
0a910     16 2D 02 FB | 	rdlong	local04, local04
0a914     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a918     35 00 00 FF 
0a91c     0C E4 85 F1 | 	sub	objptr, ##27148
0a920     15 FA 05 56 |  if_ne	mov	result1, #21
0a924     FC 03 90 5D |  if_ne	jmp	#LR__0905
0a928                 | LR__0893
0a928                 | '     if lparts(i).token=token_end then exit loop
0a928     15 2D 02 F6 | 	mov	local04, local03
0a92c     03 2C 66 F0 | 	shl	local04, #3
0a930     35 00 00 FF 
0a934     0C E4 05 F1 | 	add	objptr, ##27148
0a938     F2 2C 02 F1 | 	add	local04, objptr
0a93c     04 2C 06 F1 | 	add	local04, #4
0a940     16 2D 02 FB | 	rdlong	local04, local04
0a944     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a948     35 00 00 FF 
0a94c     0C E4 85 F1 | 	sub	objptr, ##27148
0a950     30 00 90 AD |  if_e	jmp	#LR__0894
0a954     01 2A 06 F1 | 	add	local03, #1
0a958     15 2D 02 F6 | 	mov	local04, local03
0a95c     03 2C 66 F0 | 	shl	local04, #3
0a960     35 00 00 FF 
0a964     0C E4 05 F1 | 	add	objptr, ##27148
0a968     F2 2C 02 F1 | 	add	local04, objptr
0a96c     04 2C 06 F1 | 	add	local04, #4
0a970     16 2D 02 FB | 	rdlong	local04, local04
0a974     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a978     35 00 00 FF 
0a97c     0C E4 85 F1 | 	sub	objptr, ##27148
0a980     30 FE 9F 5D |  if_ne	jmp	#LR__0890
0a984                 | LR__0894
0a984     14 2D 02 F6 | 	mov	local04, local02
0a988     01 2C 66 F0 | 	shl	local04, #1
0a98c     14 2D 02 F1 | 	add	local04, local02
0a990     02 2C 66 F0 | 	shl	local04, #2
0a994     47 00 00 FF 
0a998     7C E4 05 F1 | 	add	objptr, ##36476
0a99c     F2 2C 02 F1 | 	add	local04, objptr
0a9a0     04 2C 06 F1 | 	add	local04, #4
0a9a4     16 03 68 FC | 	wrlong	#1, local04
0a9a8     47 00 00 FF 
0a9ac     7C E4 85 F1 | 	sub	objptr, ##36476
0a9b0                 | LR__0895
0a9b0                 | ' 
0a9b0                 | ' if lparts(ct).part$="gosub" then
0a9b0     37 00 00 FF 
0a9b4     44 E4 05 F1 | 	add	objptr, ##28228
0a9b8     F2 2A 02 FB | 	rdlong	local03, objptr
0a9bc     03 2A 66 F0 | 	shl	local03, #3
0a9c0     02 00 00 FF 
0a9c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c8     F2 2A 02 F1 | 	add	local03, objptr
0a9cc     15 13 02 FB | 	rdlong	arg01, local03
0a9d0     98 01 00 FF 
0a9d4     AC 15 06 F6 | 	mov	arg02, ##@LR__5599
0a9d8     35 00 00 FF 
0a9dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a9e0     D8 85 B1 FD | 	call	#__system___string_cmp
0a9e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a9e8     84 02 90 5D |  if_ne	jmp	#LR__0901
0a9ec     37 00 00 FF 
0a9f0     44 E4 05 F1 | 	add	objptr, ##28228
0a9f4     F2 2A 02 FB | 	rdlong	local03, objptr
0a9f8     37 00 00 FF 
0a9fc     44 E4 85 F1 | 	sub	objptr, ##28228
0aa00     01 2A 06 F1 | 	add	local03, #1
0aa04                 | '   i=ct+1
0aa04                 | '   do
0aa04                 | LR__0896
0aa04                 | '     if lparts(i).token=token_decimal then
0aa04     15 2D 02 F6 | 	mov	local04, local03
0aa08     03 2C 66 F0 | 	shl	local04, #3
0aa0c     35 00 00 FF 
0aa10     0C E4 05 F1 | 	add	objptr, ##27148
0aa14     F2 2C 02 F1 | 	add	local04, objptr
0aa18     04 2C 06 F1 | 	add	local04, #4
0aa1c     16 2D 02 FB | 	rdlong	local04, local04
0aa20     01 00 00 FF 
0aa24     00 2C 0E F2 | 	cmp	local04, ##512 wz
0aa28     35 00 00 FF 
0aa2c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa30     4C 01 90 5D |  if_ne	jmp	#LR__0897
0aa34     4A 00 00 FF 
0aa38     7C E4 05 F1 | 	add	objptr, ##38012
0aa3c     F2 FA 01 FB | 	rdlong	result1, objptr
0aa40     FD 2C 02 F6 | 	mov	local04, result1
0aa44     01 2C 66 F0 | 	shl	local04, #1
0aa48     FD 2C 02 F1 | 	add	local04, result1
0aa4c     02 2C 66 F0 | 	shl	local04, #2
0aa50     03 00 00 FF 
0aa54     00 E4 85 F1 | 	sub	objptr, ##1536
0aa58     F2 2C 02 F1 | 	add	local04, objptr
0aa5c     08 2C 06 F1 | 	add	local04, #8
0aa60     16 53 69 FC | 	wrlong	#169, local04
0aa64     03 00 00 FF 
0aa68     00 E4 05 F1 | 	add	objptr, ##1536
0aa6c     F2 FA 01 FB | 	rdlong	result1, objptr
0aa70     01 FA 05 F1 | 	add	result1, #1
0aa74     F2 FA 61 FC | 	wrlong	result1, objptr
0aa78     FD 2C 02 F6 | 	mov	local04, result1
0aa7c     01 2C 66 F0 | 	shl	local04, #1
0aa80     FD 2C 02 F1 | 	add	local04, result1
0aa84     02 2C 66 F0 | 	shl	local04, #2
0aa88     03 00 00 FF 
0aa8c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa90     F2 2C 02 F1 | 	add	local04, objptr
0aa94     00 00 C0 FF 
0aa98     16 01 68 FC | 	wrlong	##-2147483648, local04
0aa9c     03 00 00 FF 
0aaa0     00 E4 05 F1 | 	add	objptr, ##1536
0aaa4     F2 FA 01 FB | 	rdlong	result1, objptr
0aaa8     FD 2C 02 F6 | 	mov	local04, result1
0aaac     01 2C 66 F0 | 	shl	local04, #1
0aab0     FD 2C 02 F1 | 	add	local04, result1
0aab4     02 2C 66 F0 | 	shl	local04, #2
0aab8     03 00 00 FF 
0aabc     00 E4 85 F1 | 	sub	objptr, ##1536
0aac0     F2 2C 02 F1 | 	add	local04, objptr
0aac4     15 13 02 F6 | 	mov	arg01, local03
0aac8     03 12 66 F0 | 	shl	arg01, #3
0aacc     12 00 00 FF 
0aad0     70 E4 85 F1 | 	sub	objptr, ##9328
0aad4     F2 12 02 F1 | 	add	arg01, objptr
0aad8     09 13 02 FB | 	rdlong	arg01, arg01
0aadc     00 14 06 F6 | 	mov	arg02, #0
0aae0     35 00 00 FF 
0aae4     0C E4 85 F1 | 	sub	objptr, ##27148
0aae8     98 B9 B1 FD | 	call	#__system____builtin_atoi
0aaec     04 2C 06 F1 | 	add	local04, #4
0aaf0     16 FB 61 FC | 	wrlong	result1, local04
0aaf4     4A 00 00 FF 
0aaf8     7C E4 05 F1 | 	add	objptr, ##38012
0aafc     F2 12 02 FB | 	rdlong	arg01, objptr
0ab00     09 2D 02 F6 | 	mov	local04, arg01
0ab04     01 2C 66 F0 | 	shl	local04, #1
0ab08     09 2D 02 F1 | 	add	local04, arg01
0ab0c     02 2C 66 F0 | 	shl	local04, #2
0ab10     03 00 00 FF 
0ab14     00 E4 85 F1 | 	sub	objptr, ##1536
0ab18     F2 2C 02 F1 | 	add	local04, objptr
0ab1c     08 2C 06 F1 | 	add	local04, #8
0ab20     16 A7 68 FC | 	wrlong	#83, local04
0ab24     03 00 00 FF 
0ab28     00 E4 05 F1 | 	add	objptr, ##1536
0ab2c     F2 12 02 FB | 	rdlong	arg01, objptr
0ab30     01 12 06 F1 | 	add	arg01, #1
0ab34     F2 12 62 FC | 	wrlong	arg01, objptr
0ab38     01 26 06 F1 | 	add	local01, #1
0ab3c     09 2D 02 F6 | 	mov	local04, arg01
0ab40     01 2C 66 F0 | 	shl	local04, #1
0ab44     09 2D 02 F1 | 	add	local04, arg01
0ab48     02 2C 66 F0 | 	shl	local04, #2
0ab4c     03 00 00 FF 
0ab50     00 E4 85 F1 | 	sub	objptr, ##1536
0ab54     F2 2C 02 F1 | 	add	local04, objptr
0ab58     08 2C 06 F1 | 	add	local04, #8
0ab5c     16 5B 68 FC | 	wrlong	#45, local04
0ab60     03 00 00 FF 
0ab64     00 E4 05 F1 | 	add	objptr, ##1536
0ab68     F2 2C 02 FB | 	rdlong	local04, objptr
0ab6c     01 2C 06 F1 | 	add	local04, #1
0ab70     F2 2C 62 FC | 	wrlong	local04, objptr
0ab74     4A 00 00 FF 
0ab78     7C E4 85 F1 | 	sub	objptr, ##38012
0ab7c     08 00 90 FD | 	jmp	#LR__0898
0ab80                 | LR__0897
0ab80                 | '       return 17
0ab80     11 FA 05 F6 | 	mov	result1, #17
0ab84     9C 01 90 FD | 	jmp	#LR__0905
0ab88                 | LR__0898
0ab88     01 2A 06 F1 | 	add	local03, #1
0ab8c                 | '     i+=1
0ab8c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0ab8c     15 2D 02 F6 | 	mov	local04, local03
0ab90     03 2C 66 F0 | 	shl	local04, #3
0ab94     35 00 00 FF 
0ab98     0C E4 05 F1 | 	add	objptr, ##27148
0ab9c     F2 2C 02 F1 | 	add	local04, objptr
0aba0     04 2C 06 F1 | 	add	local04, #4
0aba4     16 2D 02 FB | 	rdlong	local04, local04
0aba8     11 2C 0E F2 | 	cmp	local04, #17 wz
0abac     35 00 00 FF 
0abb0     0C E4 85 F1 | 	sub	objptr, ##27148
0abb4     30 00 90 AD |  if_e	jmp	#LR__0899
0abb8     15 2D 02 F6 | 	mov	local04, local03
0abbc     03 2C 66 F0 | 	shl	local04, #3
0abc0     35 00 00 FF 
0abc4     0C E4 05 F1 | 	add	objptr, ##27148
0abc8     F2 2C 02 F1 | 	add	local04, objptr
0abcc     04 2C 06 F1 | 	add	local04, #4
0abd0     16 2D 02 FB | 	rdlong	local04, local04
0abd4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0abd8     35 00 00 FF 
0abdc     0C E4 85 F1 | 	sub	objptr, ##27148
0abe0     15 FA 05 56 |  if_ne	mov	result1, #21
0abe4     3C 01 90 5D |  if_ne	jmp	#LR__0905
0abe8                 | LR__0899
0abe8                 | '     if lparts(i).token=token_end then exit loop
0abe8     15 2D 02 F6 | 	mov	local04, local03
0abec     03 2C 66 F0 | 	shl	local04, #3
0abf0     35 00 00 FF 
0abf4     0C E4 05 F1 | 	add	objptr, ##27148
0abf8     F2 2C 02 F1 | 	add	local04, objptr
0abfc     04 2C 06 F1 | 	add	local04, #4
0ac00     16 2D 02 FB | 	rdlong	local04, local04
0ac04     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ac08     35 00 00 FF 
0ac0c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac10     30 00 90 AD |  if_e	jmp	#LR__0900
0ac14     01 2A 06 F1 | 	add	local03, #1
0ac18     15 2D 02 F6 | 	mov	local04, local03
0ac1c     03 2C 66 F0 | 	shl	local04, #3
0ac20     35 00 00 FF 
0ac24     0C E4 05 F1 | 	add	objptr, ##27148
0ac28     F2 2C 02 F1 | 	add	local04, objptr
0ac2c     04 2C 06 F1 | 	add	local04, #4
0ac30     16 2D 02 FB | 	rdlong	local04, local04
0ac34     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ac38     35 00 00 FF 
0ac3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac40     C0 FD 9F 5D |  if_ne	jmp	#LR__0896
0ac44                 | LR__0900
0ac44     14 2D 02 F6 | 	mov	local04, local02
0ac48     01 2C 66 F0 | 	shl	local04, #1
0ac4c     14 2D 02 F1 | 	add	local04, local02
0ac50     02 2C 66 F0 | 	shl	local04, #2
0ac54     47 00 00 FF 
0ac58     7C E4 05 F1 | 	add	objptr, ##36476
0ac5c     F2 2C 02 F1 | 	add	local04, objptr
0ac60     04 2C 06 F1 | 	add	local04, #4
0ac64     16 07 68 FC | 	wrlong	#3, local04
0ac68     47 00 00 FF 
0ac6c     7C E4 85 F1 | 	sub	objptr, ##36476
0ac70                 | LR__0901
0ac70     14 2B 02 F6 | 	mov	local03, local02
0ac74     01 2A 66 F0 | 	shl	local03, #1
0ac78     14 2B 02 F1 | 	add	local03, local02
0ac7c     02 2A 66 F0 | 	shl	local03, #2
0ac80     47 00 00 FF 
0ac84     7C E4 05 F1 | 	add	objptr, ##36476
0ac88     F2 2A 02 F1 | 	add	local03, objptr
0ac8c     15 27 62 FC | 	wrlong	local01, local03
0ac90                 | ' compiledline(onlineptr).result.uresult=numpar
0ac90                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0ac90     03 00 00 FF 
0ac94     00 E4 05 F1 | 	add	objptr, ##1536
0ac98     F2 2A 02 FB | 	rdlong	local03, objptr
0ac9c     4A 00 00 FF 
0aca0     7C E4 85 F1 | 	sub	objptr, ##38012
0aca4     97 3C 48 FB | 	callpa	#(@LR__0904-@LR__0902)>>2,fcache_load_ptr_
0aca8                 | LR__0902
0aca8     15 2D 02 F6 | 	mov	local04, local03
0acac     01 2C 66 F0 | 	shl	local04, #1
0acb0     15 2D 02 F1 | 	add	local04, local03
0acb4     02 2C 66 F0 | 	shl	local04, #2
0acb8     47 00 00 FF 
0acbc     7C E4 05 F1 | 	add	objptr, ##36476
0acc0     F2 2C 02 F1 | 	add	local04, objptr
0acc4     08 2C 06 F1 | 	add	local04, #8
0acc8     16 2D 02 FB | 	rdlong	local04, local04
0accc     2D 2C 0E F2 | 	cmp	local04, #45 wz
0acd0     47 00 00 FF 
0acd4     7C E4 85 F1 | 	sub	objptr, ##36476
0acd8     38 00 90 5D |  if_ne	jmp	#LR__0903
0acdc     15 2D 02 F6 | 	mov	local04, local03
0ace0     01 2C 66 F0 | 	shl	local04, #1
0ace4     15 2D 02 F1 | 	add	local04, local03
0ace8     02 2C 66 F0 | 	shl	local04, #2
0acec     47 00 00 FF 
0acf0     7C E4 05 F1 | 	add	objptr, ##36476
0acf4     F2 2C 02 F1 | 	add	local04, objptr
0acf8     03 00 00 FF 
0acfc     00 E4 05 F1 | 	add	objptr, ##1536
0ad00     F2 26 02 FB | 	rdlong	local01, objptr
0ad04     4A 00 00 FF 
0ad08     7C E4 85 F1 | 	sub	objptr, ##38012
0ad0c     02 26 86 F1 | 	sub	local01, #2
0ad10     16 27 62 FC | 	wrlong	local01, local04
0ad14                 | LR__0903
0ad14     01 2A 86 F1 | 	sub	local03, #1
0ad18     14 2B 52 F2 | 	cmps	local03, local02 wc
0ad1c     88 FF 9F 3D |  if_ae	jmp	#LR__0902
0ad20                 | LR__0904
0ad20                 | ' return 0
0ad20     00 FA 05 F6 | 	mov	result1, #0
0ad24                 | LR__0905
0ad24     A7 F0 03 F6 | 	mov	ptra, fp
0ad28     B2 00 A0 FD | 	call	#popregs_
0ad2c                 | _compile_on_ret
0ad2c     2D 00 64 FD | 	ret
0ad30                 | 
0ad30                 | ' 
0ad30                 | ' '----- A helper for compile_input and compile_read
0ad30                 | '  
0ad30                 | ' function getaddr() as ulong
0ad30                 | _getaddr
0ad30     0B 4A 05 F6 | 	mov	COUNT_, #11
0ad34     A8 00 A0 FD | 	call	#pushregs_
0ad38     37 00 00 FF 
0ad3c     44 E4 05 F1 | 	add	objptr, ##28228
0ad40     F2 2C 02 FB | 	rdlong	local04, objptr
0ad44     03 2C 66 F0 | 	shl	local04, #3
0ad48     02 00 00 FF 
0ad4c     38 E4 85 F1 | 	sub	objptr, ##1080
0ad50     F2 2C 02 F1 | 	add	local04, objptr
0ad54     16 2F 02 FB | 	rdlong	local05, local04
0ad58     01 30 66 F6 | 	neg	local06, #1
0ad5c                 | ' 
0ad5c                 | ' varname$=lparts(ct).part$
0ad5c                 | ' j=-1
0ad5c                 | ' 
0ad5c                 | ' for i=0 to varnum-1
0ad5c     00 32 06 F6 | 	mov	local07, #0
0ad60     04 E4 85 F1 | 	sub	objptr, #4
0ad64     F2 34 02 FB | 	rdlong	local08, objptr
0ad68     35 00 00 FF 
0ad6c     08 E4 85 F1 | 	sub	objptr, ##27144
0ad70                 | LR__0910
0ad70     1A 33 52 F2 | 	cmps	local07, local08 wc
0ad74     38 00 90 3D |  if_ae	jmp	#LR__0911
0ad78                 | '   if variables(i).name=varname$ then j=i : exit
0ad78     19 2D 02 F6 | 	mov	local04, local07
0ad7c     04 2C 66 F0 | 	shl	local04, #4
0ad80     14 00 00 FF 
0ad84     F8 E5 05 F1 | 	add	objptr, ##10744
0ad88     F2 2C 02 F1 | 	add	local04, objptr
0ad8c     16 13 02 FB | 	rdlong	arg01, local04
0ad90     17 15 02 F6 | 	mov	arg02, local05
0ad94     14 00 00 FF 
0ad98     F8 E5 85 F1 | 	sub	objptr, ##10744
0ad9c     1C 82 B1 FD | 	call	#__system___string_cmp
0ada0     00 FA 0D F2 | 	cmp	result1, #0 wz
0ada4     19 31 02 A6 |  if_e	mov	local06, local07
0ada8     01 32 06 51 |  if_ne	add	local07, #1
0adac     C0 FF 9F 5D |  if_ne	jmp	#LR__0910
0adb0                 | LR__0911
0adb0                 | ' if  j=-1 andalso varnum<maxvars then   
0adb0     FF FF 7F FF 
0adb4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0adb8     A8 00 90 5D |  if_ne	jmp	#LR__0912
0adbc     35 00 00 FF 
0adc0     08 E4 05 F1 | 	add	objptr, ##27144
0adc4     F2 34 02 FB | 	rdlong	local08, objptr
0adc8     35 00 00 FF 
0adcc     08 E4 85 F1 | 	sub	objptr, ##27144
0add0     02 00 00 FF 
0add4     00 34 56 F2 | 	cmps	local08, ##1024 wc
0add8     88 00 90 3D |  if_ae	jmp	#LR__0912
0addc     35 00 00 FF 
0ade0     08 E4 05 F1 | 	add	objptr, ##27144
0ade4     F2 2C 02 FB | 	rdlong	local04, objptr
0ade8     04 2C 66 F0 | 	shl	local04, #4
0adec     20 00 00 FF 
0adf0     10 E4 85 F1 | 	sub	objptr, ##16400
0adf4     F2 2C 02 F1 | 	add	local04, objptr
0adf8     16 2F 62 FC | 	wrlong	local05, local04
0adfc     20 00 00 FF 
0ae00     10 E4 05 F1 | 	add	objptr, ##16400
0ae04     F2 2C 02 FB | 	rdlong	local04, objptr
0ae08     04 2C 66 F0 | 	shl	local04, #4
0ae0c     20 00 00 FF 
0ae10     10 E4 85 F1 | 	sub	objptr, ##16400
0ae14     F2 2C 02 F1 | 	add	local04, objptr
0ae18     04 2C 06 F1 | 	add	local04, #4
0ae1c     16 01 68 FC | 	wrlong	#0, local04
0ae20     20 00 00 FF 
0ae24     10 E4 05 F1 | 	add	objptr, ##16400
0ae28     F2 2C 02 FB | 	rdlong	local04, objptr
0ae2c     04 2C 66 F0 | 	shl	local04, #4
0ae30     20 00 00 FF 
0ae34     10 E4 85 F1 | 	sub	objptr, ##16400
0ae38     F2 2C 02 F1 | 	add	local04, objptr
0ae3c     0C 2C 06 F1 | 	add	local04, #12
0ae40     16 39 68 FC | 	wrlong	#28, local04
0ae44     20 00 00 FF 
0ae48     10 E4 05 F1 | 	add	objptr, ##16400
0ae4c     F2 34 02 FB | 	rdlong	local08, objptr
0ae50     1A 31 02 F6 | 	mov	local06, local08
0ae54     01 34 06 F1 | 	add	local08, #1
0ae58     F2 34 62 FC | 	wrlong	local08, objptr
0ae5c     35 00 00 FF 
0ae60     08 E4 85 F1 | 	sub	objptr, ##27144
0ae64                 | LR__0912
0ae64     00 34 06 F6 | 	mov	local08, #0
0ae68                 | ' numpar=0
0ae68                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0ae68     37 00 00 FF 
0ae6c     44 E4 05 F1 | 	add	objptr, ##28228
0ae70     F2 2C 02 FB | 	rdlong	local04, objptr
0ae74     01 2C 06 F1 | 	add	local04, #1
0ae78     03 2C 66 F0 | 	shl	local04, #3
0ae7c     02 00 00 FF 
0ae80     38 E4 85 F1 | 	sub	objptr, ##1080
0ae84     F2 2C 02 F1 | 	add	local04, objptr
0ae88     04 2C 06 F1 | 	add	local04, #4
0ae8c     16 33 02 FB | 	rdlong	local07, local04
0ae90     15 32 0E F2 | 	cmp	local07, #21 wz
0ae94     35 00 00 FF 
0ae98     0C E4 85 F1 | 	sub	objptr, ##27148
0ae9c     54 01 90 5D |  if_ne	jmp	#LR__0917
0aea0     37 00 00 FF 
0aea4     44 E4 05 F1 | 	add	objptr, ##28228
0aea8     F2 36 02 FB | 	rdlong	local09, objptr
0aeac     01 36 06 F1 | 	add	local09, #1
0aeb0     F2 36 62 FC | 	wrlong	local09, objptr
0aeb4     37 00 00 FF 
0aeb8     44 E4 85 F1 | 	sub	objptr, ##28228
0aebc                 | '   ct+=1 											' omit this lpar, this is for expr list
0aebc                 | '   do
0aebc                 | LR__0913
0aebc     37 00 00 FF 
0aec0     44 E4 05 F1 | 	add	objptr, ##28228
0aec4     F2 2C 02 FB | 	rdlong	local04, objptr
0aec8     01 2C 06 F1 | 	add	local04, #1
0aecc     F2 2C 62 FC | 	wrlong	local04, objptr
0aed0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0aed0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0aed0     03 2C 66 F0 | 	shl	local04, #3
0aed4     02 00 00 FF 
0aed8     38 E4 85 F1 | 	sub	objptr, ##1080
0aedc     F2 2C 02 F1 | 	add	local04, objptr
0aee0     04 2C 06 F1 | 	add	local04, #4
0aee4     16 37 02 FB | 	rdlong	local09, local04
0aee8     15 36 0E F2 | 	cmp	local09, #21 wz
0aeec     35 00 00 FF 
0aef0     0C E4 85 F1 | 	sub	objptr, ##27148
0aef4     44 00 90 5D |  if_ne	jmp	#LR__0914
0aef8     37 00 00 FF 
0aefc     44 E4 05 F1 | 	add	objptr, ##28228
0af00     F2 36 02 FB | 	rdlong	local09, objptr
0af04     01 36 06 F1 | 	add	local09, #1
0af08     F2 36 62 FC | 	wrlong	local09, objptr
0af0c     37 00 00 FF 
0af10     44 E4 85 F1 | 	sub	objptr, ##28228
0af14     AC 01 B0 FD | 	call	#_expr
0af18     FD 38 02 F6 | 	mov	local10, result1
0af1c     37 00 00 FF 
0af20     44 E4 05 F1 | 	add	objptr, ##28228
0af24     F2 36 02 FB | 	rdlong	local09, objptr
0af28     01 36 06 F1 | 	add	local09, #1
0af2c     F2 36 62 FC | 	wrlong	local09, objptr
0af30     37 00 00 FF 
0af34     44 E4 85 F1 | 	sub	objptr, ##28228
0af38     08 00 90 FD | 	jmp	#LR__0915
0af3c                 | LR__0914
0af3c     84 01 B0 FD | 	call	#_expr
0af40     FD 38 02 F6 | 	mov	local10, result1
0af44                 | LR__0915
0af44                 | '     if err>0 then return err
0af44     01 38 56 F2 | 	cmps	local10, #1 wc
0af48     1C FB 01 36 |  if_ae	mov	result1, local10
0af4c     68 01 90 3D |  if_ae	jmp	#LR__0918
0af50     01 34 06 F1 | 	add	local08, #1
0af54     37 00 00 FF 
0af58     44 E4 05 F1 | 	add	objptr, ##28228
0af5c     F2 2C 02 FB | 	rdlong	local04, objptr
0af60     03 2C 66 F0 | 	shl	local04, #3
0af64     02 00 00 FF 
0af68     38 E4 85 F1 | 	sub	objptr, ##1080
0af6c     F2 2C 02 F1 | 	add	local04, objptr
0af70     04 2C 06 F1 | 	add	local04, #4
0af74     16 39 02 FB | 	rdlong	local10, local04
0af78     14 38 0E F2 | 	cmp	local10, #20 wz
0af7c     35 00 00 FF 
0af80     0C E4 85 F1 | 	sub	objptr, ##27148
0af84     34 00 90 AD |  if_e	jmp	#LR__0916
0af88     37 00 00 FF 
0af8c     44 E4 05 F1 | 	add	objptr, ##28228
0af90     F2 38 02 FB | 	rdlong	local10, objptr
0af94     03 38 66 F0 | 	shl	local10, #3
0af98     02 00 00 FF 
0af9c     38 E4 85 F1 | 	sub	objptr, ##1080
0afa0     F2 38 02 F1 | 	add	local10, objptr
0afa4     04 38 06 F1 | 	add	local10, #4
0afa8     1C 39 02 FB | 	rdlong	local10, local10
0afac     FE 39 0E F2 | 	cmp	local10, #510 wz
0afb0     35 00 00 FF 
0afb4     0C E4 85 F1 | 	sub	objptr, ##27148
0afb8     00 FF 9F 5D |  if_ne	jmp	#LR__0913
0afbc                 | LR__0916
0afbc                 | '     if lparts(ct).token=token_end then return 14
0afbc     37 00 00 FF 
0afc0     44 E4 05 F1 | 	add	objptr, ##28228
0afc4     F2 2C 02 FB | 	rdlong	local04, objptr
0afc8     03 2C 66 F0 | 	shl	local04, #3
0afcc     02 00 00 FF 
0afd0     38 E4 85 F1 | 	sub	objptr, ##1080
0afd4     F2 2C 02 F1 | 	add	local04, objptr
0afd8     04 2C 06 F1 | 	add	local04, #4
0afdc     16 39 02 FB | 	rdlong	local10, local04
0afe0     FE 39 0E F2 | 	cmp	local10, #510 wz
0afe4     35 00 00 FF 
0afe8     0C E4 85 F1 | 	sub	objptr, ##27148
0afec     0E FA 05 A6 |  if_e	mov	result1, #14
0aff0     C4 00 90 AD |  if_e	jmp	#LR__0918
0aff4                 | LR__0917
0aff4     1A 29 02 F6 | 	mov	local02, local08
0aff8     12 2A 06 F6 | 	mov	local03, #18
0affc     18 27 02 F6 | 	mov	local01, local06
0b000     13 37 02 F6 | 	mov	local09, local01
0b004     14 3B 02 F6 | 	mov	local11, local02
0b008     15 27 02 F6 | 	mov	local01, local03
0b00c     4A 00 00 FF 
0b010     7C E4 05 F1 | 	add	objptr, ##38012
0b014     F2 38 02 FB | 	rdlong	local10, objptr
0b018     1C 35 02 F6 | 	mov	local08, local10
0b01c     01 34 66 F0 | 	shl	local08, #1
0b020     1C 35 02 F1 | 	add	local08, local10
0b024     02 34 66 F0 | 	shl	local08, #2
0b028     03 00 00 FF 
0b02c     00 E4 85 F1 | 	sub	objptr, ##1536
0b030     F2 34 02 F1 | 	add	local08, objptr
0b034     1A 37 62 FC | 	wrlong	local09, local08
0b038     03 00 00 FF 
0b03c     00 E4 05 F1 | 	add	objptr, ##1536
0b040     F2 38 02 FB | 	rdlong	local10, objptr
0b044     1C 37 02 F6 | 	mov	local09, local10
0b048     01 36 66 F0 | 	shl	local09, #1
0b04c     1C 37 02 F1 | 	add	local09, local10
0b050     02 36 66 F0 | 	shl	local09, #2
0b054     03 00 00 FF 
0b058     00 E4 85 F1 | 	sub	objptr, ##1536
0b05c     F2 36 02 F1 | 	add	local09, objptr
0b060     04 36 06 F1 | 	add	local09, #4
0b064     1B 3B 62 FC | 	wrlong	local11, local09
0b068     03 00 00 FF 
0b06c     00 E4 05 F1 | 	add	objptr, ##1536
0b070     F2 3A 02 FB | 	rdlong	local11, objptr
0b074     1D 39 02 F6 | 	mov	local10, local11
0b078     01 38 66 F0 | 	shl	local10, #1
0b07c     1D 39 02 F1 | 	add	local10, local11
0b080     02 38 66 F0 | 	shl	local10, #2
0b084     03 00 00 FF 
0b088     00 E4 85 F1 | 	sub	objptr, ##1536
0b08c     F2 38 02 F1 | 	add	local10, objptr
0b090     08 38 06 F1 | 	add	local10, #8
0b094     1C 27 62 FC | 	wrlong	local01, local10
0b098     03 00 00 FF 
0b09c     00 E4 05 F1 | 	add	objptr, ##1536
0b0a0     F2 36 02 FB | 	rdlong	local09, objptr
0b0a4     01 36 06 F1 | 	add	local09, #1
0b0a8     F2 36 62 FC | 	wrlong	local09, objptr
0b0ac     4A 00 00 FF 
0b0b0     7C E4 85 F1 | 	sub	objptr, ##38012
0b0b4                 | ' t2.result.twowords(1)=numpar
0b0b4                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0b0b4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b0b4                 | ' return 0
0b0b4     00 FA 05 F6 | 	mov	result1, #0
0b0b8                 | LR__0918
0b0b8     A7 F0 03 F6 | 	mov	ptra, fp
0b0bc     B2 00 A0 FD | 	call	#popregs_
0b0c0                 | _getaddr_ret
0b0c0     2D 00 64 FD | 	ret
0b0c4                 | 
0b0c4                 | ' 
0b0c4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b0c4                 | ' '--------------------------------------------- 
0b0c4                 | ' 
0b0c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b0c4                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0b0c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b0c4                 | ' 
0b0c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b0c4                 | ' '
0b0c4                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0b0c4                 | ' '
0b0c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b0c4                 | ' 
0b0c4                 | ' function expr() as ulong 
0b0c4                 | _expr
0b0c4     07 4A 05 F6 | 	mov	COUNT_, #7
0b0c8     A8 00 A0 FD | 	call	#pushregs_
0b0cc                 | _expr_enter
0b0cc     37 00 00 FF 
0b0d0     44 E4 05 F1 | 	add	objptr, ##28228
0b0d4     F2 2C 02 FB | 	rdlong	local04, objptr
0b0d8     03 2C 66 F0 | 	shl	local04, #3
0b0dc     02 00 00 FF 
0b0e0     38 E4 85 F1 | 	sub	objptr, ##1080
0b0e4     F2 2C 02 F1 | 	add	local04, objptr
0b0e8     04 2C 06 F1 | 	add	local04, #4
0b0ec     16 2F 02 FB | 	rdlong	local05, local04
0b0f0                 | ' 
0b0f0                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0b0f0     FE 2F 0E F2 | 	cmp	local05, #510 wz
0b0f4     35 00 00 FF 
0b0f8     0C E4 85 F1 | 	sub	objptr, ##27148
0b0fc     C4 00 90 5D |  if_ne	jmp	#LR__0920
0b100     1D 26 06 F6 | 	mov	local01, #29
0b104     FF 2A 06 F6 | 	mov	local03, #255
0b108     13 31 02 F6 | 	mov	local06, local01
0b10c     14 33 02 F6 | 	mov	local07, local02
0b110     15 27 02 F6 | 	mov	local01, local03
0b114     4A 00 00 FF 
0b118     7C E4 05 F1 | 	add	objptr, ##38012
0b11c     F2 2E 02 FB | 	rdlong	local05, objptr
0b120     17 2D 02 F6 | 	mov	local04, local05
0b124     01 2C 66 F0 | 	shl	local04, #1
0b128     17 2D 02 F1 | 	add	local04, local05
0b12c     02 2C 66 F0 | 	shl	local04, #2
0b130     03 00 00 FF 
0b134     00 E4 85 F1 | 	sub	objptr, ##1536
0b138     F2 2C 02 F1 | 	add	local04, objptr
0b13c     16 31 62 FC | 	wrlong	local06, local04
0b140     03 00 00 FF 
0b144     00 E4 05 F1 | 	add	objptr, ##1536
0b148     F2 30 02 FB | 	rdlong	local06, objptr
0b14c     18 2F 02 F6 | 	mov	local05, local06
0b150     01 2E 66 F0 | 	shl	local05, #1
0b154     18 2F 02 F1 | 	add	local05, local06
0b158     02 2E 66 F0 | 	shl	local05, #2
0b15c     03 00 00 FF 
0b160     00 E4 85 F1 | 	sub	objptr, ##1536
0b164     F2 2E 02 F1 | 	add	local05, objptr
0b168     04 2E 06 F1 | 	add	local05, #4
0b16c     17 33 62 FC | 	wrlong	local07, local05
0b170     03 00 00 FF 
0b174     00 E4 05 F1 | 	add	objptr, ##1536
0b178     F2 32 02 FB | 	rdlong	local07, objptr
0b17c     19 31 02 F6 | 	mov	local06, local07
0b180     01 30 66 F0 | 	shl	local06, #1
0b184     19 31 02 F1 | 	add	local06, local07
0b188     02 30 66 F0 | 	shl	local06, #2
0b18c     03 00 00 FF 
0b190     00 E4 85 F1 | 	sub	objptr, ##1536
0b194     F2 30 02 F1 | 	add	local06, objptr
0b198     08 30 06 F1 | 	add	local06, #8
0b19c     18 27 62 FC | 	wrlong	local01, local06
0b1a0     03 00 00 FF 
0b1a4     00 E4 05 F1 | 	add	objptr, ##1536
0b1a8     F2 30 02 FB | 	rdlong	local06, objptr
0b1ac     01 30 06 F1 | 	add	local06, #1
0b1b0     F2 30 62 FC | 	wrlong	local06, objptr
0b1b4     4A 00 00 FF 
0b1b8     7C E4 85 F1 | 	sub	objptr, ##38012
0b1bc     1D FA 05 F6 | 	mov	result1, #29
0b1c0     64 01 90 FD | 	jmp	#LR__0923
0b1c4                 | LR__0920
0b1c4     00 26 06 F6 | 	mov	local01, #0
0b1c8     68 01 B0 FD | 	call	#_addsub
0b1cc                 | ' t3.result.uresult=0
0b1cc                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0b1cc                 | ' if err>0 then return err
0b1cc     01 FA 15 F2 | 	cmp	result1, #1 wc
0b1d0     54 01 90 3D |  if_ae	jmp	#LR__0923
0b1d4     37 00 00 FF 
0b1d8     44 E4 05 F1 | 	add	objptr, ##28228
0b1dc     F2 2C 02 FB | 	rdlong	local04, objptr
0b1e0     03 2C 66 F0 | 	shl	local04, #3
0b1e4     02 00 00 FF 
0b1e8     38 E4 85 F1 | 	sub	objptr, ##1080
0b1ec     F2 2C 02 F1 | 	add	local04, objptr
0b1f0     04 2C 06 F1 | 	add	local04, #4
0b1f4     16 2F 02 FB | 	rdlong	local05, local04
0b1f8                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0b1f8                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0b1f8     35 00 00 FF 
0b1fc     0C E4 85 F1 | 	sub	objptr, ##27148
0b200                 | LR__0921
0b200     1B 2E 0E F2 | 	cmp	local05, #27 wz
0b204     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0b208     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0b20c     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0b210     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0b214     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0b218     08 01 90 5D |  if_ne	jmp	#LR__0922
0b21c     37 00 00 FF 
0b220     44 E4 05 F1 | 	add	objptr, ##28228
0b224     F2 30 02 FB | 	rdlong	local06, objptr
0b228     01 30 06 F1 | 	add	local06, #1
0b22c     F2 30 62 FC | 	wrlong	local06, objptr
0b230     37 00 00 FF 
0b234     44 E4 85 F1 | 	sub	objptr, ##28228
0b238     F8 00 B0 FD | 	call	#_addsub
0b23c                 | '   ct+=1
0b23c                 | '   err=addsub() : if err>0 then return err
0b23c     01 FA 15 F2 | 	cmp	result1, #1 wc
0b240     E4 00 90 3D |  if_ae	jmp	#LR__0923
0b244     17 2B 02 F6 | 	mov	local03, local05
0b248     13 31 02 F6 | 	mov	local06, local01
0b24c     14 33 02 F6 | 	mov	local07, local02
0b250     15 2F 02 F6 | 	mov	local05, local03
0b254     4A 00 00 FF 
0b258     7C E4 05 F1 | 	add	objptr, ##38012
0b25c     F2 2C 02 FB | 	rdlong	local04, objptr
0b260     16 FB 01 F6 | 	mov	result1, local04
0b264     01 FA 65 F0 | 	shl	result1, #1
0b268     16 FB 01 F1 | 	add	result1, local04
0b26c     02 FA 65 F0 | 	shl	result1, #2
0b270     03 00 00 FF 
0b274     00 E4 85 F1 | 	sub	objptr, ##1536
0b278     F2 FA 01 F1 | 	add	result1, objptr
0b27c     FD 30 62 FC | 	wrlong	local06, result1
0b280     03 00 00 FF 
0b284     00 E4 05 F1 | 	add	objptr, ##1536
0b288     F2 30 02 FB | 	rdlong	local06, objptr
0b28c     18 2D 02 F6 | 	mov	local04, local06
0b290     01 2C 66 F0 | 	shl	local04, #1
0b294     18 2D 02 F1 | 	add	local04, local06
0b298     02 2C 66 F0 | 	shl	local04, #2
0b29c     03 00 00 FF 
0b2a0     00 E4 85 F1 | 	sub	objptr, ##1536
0b2a4     F2 2C 02 F1 | 	add	local04, objptr
0b2a8     04 2C 06 F1 | 	add	local04, #4
0b2ac     16 33 62 FC | 	wrlong	local07, local04
0b2b0     03 00 00 FF 
0b2b4     00 E4 05 F1 | 	add	objptr, ##1536
0b2b8     F2 32 02 FB | 	rdlong	local07, objptr
0b2bc     19 31 02 F6 | 	mov	local06, local07
0b2c0     01 30 66 F0 | 	shl	local06, #1
0b2c4     19 31 02 F1 | 	add	local06, local07
0b2c8     02 30 66 F0 | 	shl	local06, #2
0b2cc     03 00 00 FF 
0b2d0     00 E4 85 F1 | 	sub	objptr, ##1536
0b2d4     F2 30 02 F1 | 	add	local06, objptr
0b2d8     08 30 06 F1 | 	add	local06, #8
0b2dc     18 2F 62 FC | 	wrlong	local05, local06
0b2e0     03 00 00 FF 
0b2e4     00 E4 05 F1 | 	add	objptr, ##1536
0b2e8     F2 30 02 FB | 	rdlong	local06, objptr
0b2ec     01 30 06 F1 | 	add	local06, #1
0b2f0     F2 30 62 FC | 	wrlong	local06, objptr
0b2f4     13 00 00 FF 
0b2f8     38 E4 85 F1 | 	sub	objptr, ##9784
0b2fc     F2 2C 02 FB | 	rdlong	local04, objptr
0b300     03 2C 66 F0 | 	shl	local04, #3
0b304     02 00 00 FF 
0b308     38 E4 85 F1 | 	sub	objptr, ##1080
0b30c     F2 2C 02 F1 | 	add	local04, objptr
0b310     04 2C 06 F1 | 	add	local04, #4
0b314     16 2F 02 FB | 	rdlong	local05, local04
0b318     35 00 00 FF 
0b31c     0C E4 85 F1 | 	sub	objptr, ##27148
0b320     DC FE 9F FD | 	jmp	#LR__0921
0b324                 | LR__0922
0b324                 | ' return 0  
0b324     00 FA 05 F6 | 	mov	result1, #0
0b328                 | LR__0923
0b328     A7 F0 03 F6 | 	mov	ptra, fp
0b32c     B2 00 A0 FD | 	call	#popregs_
0b330                 | _expr_ret
0b330     2D 00 64 FD | 	ret
0b334                 | 
0b334                 | ' 
0b334                 | ' ' Second level operators : add, sub, logic
0b334                 | ' 
0b334                 | ' function addsub() as ulong
0b334                 | _addsub
0b334     07 4A 05 F6 | 	mov	COUNT_, #7
0b338     A8 00 A0 FD | 	call	#pushregs_
0b33c                 | _addsub_enter
0b33c     00 26 06 F6 | 	mov	local01, #0
0b340     60 01 B0 FD | 	call	#_muldiv
0b344                 | ' 
0b344                 | ' t3.result.uresult=0
0b344                 | ' err=muldiv() : if err>0 then return err           			 
0b344     01 FA 15 F2 | 	cmp	result1, #1 wc
0b348     4C 01 90 3D |  if_ae	jmp	#LR__0932
0b34c     37 00 00 FF 
0b350     44 E4 05 F1 | 	add	objptr, ##28228
0b354     F2 2C 02 FB | 	rdlong	local04, objptr
0b358     03 2C 66 F0 | 	shl	local04, #3
0b35c     02 00 00 FF 
0b360     38 E4 85 F1 | 	sub	objptr, ##1080
0b364     F2 2C 02 F1 | 	add	local04, objptr
0b368     04 2C 06 F1 | 	add	local04, #4
0b36c     16 2F 02 FB | 	rdlong	local05, local04
0b370                 | ' op = lparts(ct).token				 
0b370                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0b370     35 00 00 FF 
0b374     0C E4 85 F1 | 	sub	objptr, ##27148
0b378                 | LR__0930
0b378     01 2E 0E F2 | 	cmp	local05, #1 wz
0b37c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0b380     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0b384     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0b388     08 01 90 5D |  if_ne	jmp	#LR__0931
0b38c     37 00 00 FF 
0b390     44 E4 05 F1 | 	add	objptr, ##28228
0b394     F2 2C 02 FB | 	rdlong	local04, objptr
0b398     01 2C 06 F1 | 	add	local04, #1
0b39c     F2 2C 62 FC | 	wrlong	local04, objptr
0b3a0     37 00 00 FF 
0b3a4     44 E4 85 F1 | 	sub	objptr, ##28228
0b3a8     F8 00 B0 FD | 	call	#_muldiv
0b3ac                 | '   ct+=1
0b3ac                 | '   err=muldiv() : if err>0 then return err   
0b3ac     01 FA 15 F2 | 	cmp	result1, #1 wc
0b3b0     E4 00 90 3D |  if_ae	jmp	#LR__0932
0b3b4     17 2B 02 F6 | 	mov	local03, local05
0b3b8     13 31 02 F6 | 	mov	local06, local01
0b3bc     14 33 02 F6 | 	mov	local07, local02
0b3c0     15 2F 02 F6 | 	mov	local05, local03
0b3c4     4A 00 00 FF 
0b3c8     7C E4 05 F1 | 	add	objptr, ##38012
0b3cc     F2 2C 02 FB | 	rdlong	local04, objptr
0b3d0     16 FB 01 F6 | 	mov	result1, local04
0b3d4     01 FA 65 F0 | 	shl	result1, #1
0b3d8     16 FB 01 F1 | 	add	result1, local04
0b3dc     02 FA 65 F0 | 	shl	result1, #2
0b3e0     03 00 00 FF 
0b3e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e8     F2 FA 01 F1 | 	add	result1, objptr
0b3ec     FD 30 62 FC | 	wrlong	local06, result1
0b3f0     03 00 00 FF 
0b3f4     00 E4 05 F1 | 	add	objptr, ##1536
0b3f8     F2 30 02 FB | 	rdlong	local06, objptr
0b3fc     18 2D 02 F6 | 	mov	local04, local06
0b400     01 2C 66 F0 | 	shl	local04, #1
0b404     18 2D 02 F1 | 	add	local04, local06
0b408     02 2C 66 F0 | 	shl	local04, #2
0b40c     03 00 00 FF 
0b410     00 E4 85 F1 | 	sub	objptr, ##1536
0b414     F2 2C 02 F1 | 	add	local04, objptr
0b418     04 2C 06 F1 | 	add	local04, #4
0b41c     16 33 62 FC | 	wrlong	local07, local04
0b420     03 00 00 FF 
0b424     00 E4 05 F1 | 	add	objptr, ##1536
0b428     F2 32 02 FB | 	rdlong	local07, objptr
0b42c     19 31 02 F6 | 	mov	local06, local07
0b430     01 30 66 F0 | 	shl	local06, #1
0b434     19 31 02 F1 | 	add	local06, local07
0b438     02 30 66 F0 | 	shl	local06, #2
0b43c     03 00 00 FF 
0b440     00 E4 85 F1 | 	sub	objptr, ##1536
0b444     F2 30 02 F1 | 	add	local06, objptr
0b448     08 30 06 F1 | 	add	local06, #8
0b44c     18 2F 62 FC | 	wrlong	local05, local06
0b450     03 00 00 FF 
0b454     00 E4 05 F1 | 	add	objptr, ##1536
0b458     F2 30 02 FB | 	rdlong	local06, objptr
0b45c     01 30 06 F1 | 	add	local06, #1
0b460     F2 30 62 FC | 	wrlong	local06, objptr
0b464     13 00 00 FF 
0b468     38 E4 85 F1 | 	sub	objptr, ##9784
0b46c     F2 2C 02 FB | 	rdlong	local04, objptr
0b470     03 2C 66 F0 | 	shl	local04, #3
0b474     02 00 00 FF 
0b478     38 E4 85 F1 | 	sub	objptr, ##1080
0b47c     F2 2C 02 F1 | 	add	local04, objptr
0b480     04 2C 06 F1 | 	add	local04, #4
0b484     16 2F 02 FB | 	rdlong	local05, local04
0b488     35 00 00 FF 
0b48c     0C E4 85 F1 | 	sub	objptr, ##27148
0b490     E4 FE 9F FD | 	jmp	#LR__0930
0b494                 | LR__0931
0b494                 | ' return 0
0b494     00 FA 05 F6 | 	mov	result1, #0
0b498                 | LR__0932
0b498     A7 F0 03 F6 | 	mov	ptra, fp
0b49c     B2 00 A0 FD | 	call	#popregs_
0b4a0                 | _addsub_ret
0b4a0     2D 00 64 FD | 	ret
0b4a4                 | 
0b4a4                 | ' 
0b4a4                 | ' ' Third level operators : mul,div,shift,power
0b4a4                 | ' 
0b4a4                 | ' function muldiv() as ulong
0b4a4                 | _muldiv
0b4a4     07 4A 05 F6 | 	mov	COUNT_, #7
0b4a8     A8 00 A0 FD | 	call	#pushregs_
0b4ac                 | _muldiv_enter
0b4ac     00 26 06 F6 | 	mov	local01, #0
0b4b0     6C 01 B0 FD | 	call	#_getvalue
0b4b4                 | ' 
0b4b4                 | ' t3.result.uresult=0
0b4b4                 | ' err=getvalue() : if err>0 then return err     
0b4b4     01 FA 15 F2 | 	cmp	result1, #1 wc
0b4b8     58 01 90 3D |  if_ae	jmp	#LR__0942
0b4bc     37 00 00 FF 
0b4c0     44 E4 05 F1 | 	add	objptr, ##28228
0b4c4     F2 2C 02 FB | 	rdlong	local04, objptr
0b4c8     03 2C 66 F0 | 	shl	local04, #3
0b4cc     02 00 00 FF 
0b4d0     38 E4 85 F1 | 	sub	objptr, ##1080
0b4d4     F2 2C 02 F1 | 	add	local04, objptr
0b4d8     04 2C 06 F1 | 	add	local04, #4
0b4dc     16 2F 02 FB | 	rdlong	local05, local04
0b4e0                 | ' op = lparts(ct).token
0b4e0                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0b4e0     35 00 00 FF 
0b4e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b4e8                 | LR__0940
0b4e8     05 2E 0E F2 | 	cmp	local05, #5 wz
0b4ec     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0b4f0     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0b4f4     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0b4f8     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0b4fc     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0b500     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0b504     08 01 90 5D |  if_ne	jmp	#LR__0941
0b508     37 00 00 FF 
0b50c     44 E4 05 F1 | 	add	objptr, ##28228
0b510     F2 2C 02 FB | 	rdlong	local04, objptr
0b514     01 2C 06 F1 | 	add	local04, #1
0b518     F2 2C 62 FC | 	wrlong	local04, objptr
0b51c     37 00 00 FF 
0b520     44 E4 85 F1 | 	sub	objptr, ##28228
0b524     F8 00 B0 FD | 	call	#_getvalue
0b528                 | '   ct+=1
0b528                 | '   err=getvalue() :if err>0 then return err   
0b528     01 FA 15 F2 | 	cmp	result1, #1 wc
0b52c     E4 00 90 3D |  if_ae	jmp	#LR__0942
0b530     17 2B 02 F6 | 	mov	local03, local05
0b534     13 31 02 F6 | 	mov	local06, local01
0b538     14 33 02 F6 | 	mov	local07, local02
0b53c     15 2F 02 F6 | 	mov	local05, local03
0b540     4A 00 00 FF 
0b544     7C E4 05 F1 | 	add	objptr, ##38012
0b548     F2 2C 02 FB | 	rdlong	local04, objptr
0b54c     16 FB 01 F6 | 	mov	result1, local04
0b550     01 FA 65 F0 | 	shl	result1, #1
0b554     16 FB 01 F1 | 	add	result1, local04
0b558     02 FA 65 F0 | 	shl	result1, #2
0b55c     03 00 00 FF 
0b560     00 E4 85 F1 | 	sub	objptr, ##1536
0b564     F2 FA 01 F1 | 	add	result1, objptr
0b568     FD 30 62 FC | 	wrlong	local06, result1
0b56c     03 00 00 FF 
0b570     00 E4 05 F1 | 	add	objptr, ##1536
0b574     F2 30 02 FB | 	rdlong	local06, objptr
0b578     18 2D 02 F6 | 	mov	local04, local06
0b57c     01 2C 66 F0 | 	shl	local04, #1
0b580     18 2D 02 F1 | 	add	local04, local06
0b584     02 2C 66 F0 | 	shl	local04, #2
0b588     03 00 00 FF 
0b58c     00 E4 85 F1 | 	sub	objptr, ##1536
0b590     F2 2C 02 F1 | 	add	local04, objptr
0b594     04 2C 06 F1 | 	add	local04, #4
0b598     16 33 62 FC | 	wrlong	local07, local04
0b59c     03 00 00 FF 
0b5a0     00 E4 05 F1 | 	add	objptr, ##1536
0b5a4     F2 32 02 FB | 	rdlong	local07, objptr
0b5a8     19 31 02 F6 | 	mov	local06, local07
0b5ac     01 30 66 F0 | 	shl	local06, #1
0b5b0     19 31 02 F1 | 	add	local06, local07
0b5b4     02 30 66 F0 | 	shl	local06, #2
0b5b8     03 00 00 FF 
0b5bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b5c0     F2 30 02 F1 | 	add	local06, objptr
0b5c4     08 30 06 F1 | 	add	local06, #8
0b5c8     18 2F 62 FC | 	wrlong	local05, local06
0b5cc     03 00 00 FF 
0b5d0     00 E4 05 F1 | 	add	objptr, ##1536
0b5d4     F2 30 02 FB | 	rdlong	local06, objptr
0b5d8     01 30 06 F1 | 	add	local06, #1
0b5dc     F2 30 62 FC | 	wrlong	local06, objptr
0b5e0     13 00 00 FF 
0b5e4     38 E4 85 F1 | 	sub	objptr, ##9784
0b5e8     F2 2C 02 FB | 	rdlong	local04, objptr
0b5ec     03 2C 66 F0 | 	shl	local04, #3
0b5f0     02 00 00 FF 
0b5f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b5f8     F2 2C 02 F1 | 	add	local04, objptr
0b5fc     04 2C 06 F1 | 	add	local04, #4
0b600     16 2F 02 FB | 	rdlong	local05, local04
0b604     35 00 00 FF 
0b608     0C E4 85 F1 | 	sub	objptr, ##27148
0b60c     D8 FE 9F FD | 	jmp	#LR__0940
0b610                 | LR__0941
0b610                 | ' return 0
0b610     00 FA 05 F6 | 	mov	result1, #0
0b614                 | LR__0942
0b614     A7 F0 03 F6 | 	mov	ptra, fp
0b618     B2 00 A0 FD | 	call	#popregs_
0b61c                 | _muldiv_ret
0b61c     2D 00 64 FD | 	ret
0b620                 | 
0b620                 | ' 
0b620                 | ' ' Get a value for operations
0b620                 | ' 
0b620                 | ' function getvalue()  as ulong
0b620                 | _getvalue
0b620     0B 4A 05 F6 | 	mov	COUNT_, #11
0b624     A8 00 A0 FD | 	call	#pushregs_
0b628                 | _getvalue_enter
0b628     01 2C 06 F6 | 	mov	local04, #1
0b62c     00 26 06 F6 | 	mov	local01, #0
0b630     1D 2A 06 F6 | 	mov	local03, #29
0b634     37 00 00 FF 
0b638     44 E4 05 F1 | 	add	objptr, ##28228
0b63c     F2 16 02 FB | 	rdlong	arg03, objptr
0b640     03 16 66 F0 | 	shl	arg03, #3
0b644     02 00 00 FF 
0b648     38 E4 85 F1 | 	sub	objptr, ##1080
0b64c     F2 16 02 F1 | 	add	arg03, objptr
0b650     04 16 06 F1 | 	add	arg03, #4
0b654     0B 2F 02 FB | 	rdlong	local05, arg03
0b658                 | ' 
0b658                 | ' m=1											' for negative numbers
0b658                 | ' t1.result.uresult=0: t1.result_type=result_uint
0b658                 | ' op=lparts(ct).token
0b658                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0b658     02 2E 0E F2 | 	cmp	local05, #2 wz
0b65c     35 00 00 FF 
0b660     0C E4 85 F1 | 	sub	objptr, ##27148
0b664     38 00 90 5D |  if_ne	jmp	#LR__0950
0b668     01 2C 66 F6 | 	neg	local04, #1
0b66c     37 00 00 FF 
0b670     44 E4 05 F1 | 	add	objptr, ##28228
0b674     F2 2E 02 FB | 	rdlong	local05, objptr
0b678     01 2E 06 F1 | 	add	local05, #1
0b67c     F2 2E 62 FC | 	wrlong	local05, objptr
0b680     03 2E 66 F0 | 	shl	local05, #3
0b684     02 00 00 FF 
0b688     38 E4 85 F1 | 	sub	objptr, ##1080
0b68c     F2 2E 02 F1 | 	add	local05, objptr
0b690     04 2E 06 F1 | 	add	local05, #4
0b694     17 2F 02 FB | 	rdlong	local05, local05
0b698     35 00 00 FF 
0b69c     0C E4 85 F1 | 	sub	objptr, ##27148
0b6a0                 | LR__0950
0b6a0                 | ' select case op
0b6a0     01 00 00 FF 
0b6a4     00 2E 0E F2 | 	cmp	local05, ##512 wz
0b6a8     44 00 90 AD |  if_e	jmp	#LR__0951
0b6ac     01 00 00 FF 
0b6b0     01 2E 0E F2 | 	cmp	local05, ##513 wz
0b6b4     90 01 90 AD |  if_e	jmp	#LR__0954
0b6b8     01 00 00 FF 
0b6bc     02 2E 0E F2 | 	cmp	local05, ##514 wz
0b6c0     44 04 90 AD |  if_e	jmp	#LR__0961
0b6c4     01 00 00 FF 
0b6c8     03 2E 0E F2 | 	cmp	local05, ##515 wz
0b6cc     A8 05 90 AD |  if_e	jmp	#LR__0964
0b6d0     2C 2E 0E F2 | 	cmp	local05, #44 wz
0b6d4     78 07 90 AD |  if_e	jmp	#LR__0969
0b6d8     01 00 00 FF 
0b6dc     04 2E 0E F2 | 	cmp	local05, ##516 wz
0b6e0     70 08 90 AD |  if_e	jmp	#LR__0970
0b6e4     15 2E 0E F2 | 	cmp	local05, #21 wz
0b6e8     98 08 90 AD |  if_e	jmp	#LR__0971
0b6ec     10 09 90 FD | 	jmp	#LR__0972
0b6f0                 | LR__0951
0b6f0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0b6f0     01 2C 0E F2 | 	cmp	local04, #1 wz
0b6f4     3C 00 90 5D |  if_ne	jmp	#LR__0952
0b6f8     37 00 00 FF 
0b6fc     44 E4 05 F1 | 	add	objptr, ##28228
0b700     F2 2E 02 FB | 	rdlong	local05, objptr
0b704     03 2E 66 F0 | 	shl	local05, #3
0b708     02 00 00 FF 
0b70c     38 E4 85 F1 | 	sub	objptr, ##1080
0b710     F2 2E 02 F1 | 	add	local05, objptr
0b714     17 13 02 FB | 	rdlong	arg01, local05
0b718     00 14 06 F6 | 	mov	arg02, #0
0b71c     35 00 00 FF 
0b720     0C E4 85 F1 | 	sub	objptr, ##27148
0b724     5C AD B1 FD | 	call	#__system____builtin_atoi
0b728     FD 2C 02 FD | 	qmul	local04, result1
0b72c     18 26 62 FD | 	getqx	local01
0b730     1C 2A 06 F6 | 	mov	local03, #28
0b734                 | LR__0952
0b734                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0b734     FF FF 7F FF 
0b738     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b73c     3C 00 90 5D |  if_ne	jmp	#LR__0953
0b740     37 00 00 FF 
0b744     44 E4 05 F1 | 	add	objptr, ##28228
0b748     F2 2E 02 FB | 	rdlong	local05, objptr
0b74c     03 2E 66 F0 | 	shl	local05, #3
0b750     02 00 00 FF 
0b754     38 E4 85 F1 | 	sub	objptr, ##1080
0b758     F2 2E 02 F1 | 	add	local05, objptr
0b75c     17 13 02 FB | 	rdlong	arg01, local05
0b760     00 14 06 F6 | 	mov	arg02, #0
0b764     35 00 00 FF 
0b768     0C E4 85 F1 | 	sub	objptr, ##27148
0b76c     14 AD B1 FD | 	call	#__system____builtin_atoi
0b770     FD 2C 02 FD | 	qmul	local04, result1
0b774     18 26 62 FD | 	getqx	local01
0b778     1C 2A 06 F6 | 	mov	local03, #28
0b77c                 | LR__0953
0b77c     13 31 02 F6 | 	mov	local06, local01
0b780     14 33 02 F6 | 	mov	local07, local02
0b784     15 2F 02 F6 | 	mov	local05, local03
0b788     4A 00 00 FF 
0b78c     7C E4 05 F1 | 	add	objptr, ##38012
0b790     F2 26 02 FB | 	rdlong	local01, objptr
0b794     13 2D 02 F6 | 	mov	local04, local01
0b798     01 2C 66 F0 | 	shl	local04, #1
0b79c     13 2D 02 F1 | 	add	local04, local01
0b7a0     02 2C 66 F0 | 	shl	local04, #2
0b7a4     03 00 00 FF 
0b7a8     00 E4 85 F1 | 	sub	objptr, ##1536
0b7ac     F2 2C 02 F1 | 	add	local04, objptr
0b7b0     16 31 62 FC | 	wrlong	local06, local04
0b7b4     03 00 00 FF 
0b7b8     00 E4 05 F1 | 	add	objptr, ##1536
0b7bc     F2 30 02 FB | 	rdlong	local06, objptr
0b7c0     18 27 02 F6 | 	mov	local01, local06
0b7c4     01 26 66 F0 | 	shl	local01, #1
0b7c8     18 27 02 F1 | 	add	local01, local06
0b7cc     02 26 66 F0 | 	shl	local01, #2
0b7d0     03 00 00 FF 
0b7d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b7d8     F2 26 02 F1 | 	add	local01, objptr
0b7dc     04 26 06 F1 | 	add	local01, #4
0b7e0     13 33 62 FC | 	wrlong	local07, local01
0b7e4     03 00 00 FF 
0b7e8     00 E4 05 F1 | 	add	objptr, ##1536
0b7ec     F2 32 02 FB | 	rdlong	local07, objptr
0b7f0     19 31 02 F6 | 	mov	local06, local07
0b7f4     01 30 66 F0 | 	shl	local06, #1
0b7f8     19 31 02 F1 | 	add	local06, local07
0b7fc     02 30 66 F0 | 	shl	local06, #2
0b800     03 00 00 FF 
0b804     00 E4 85 F1 | 	sub	objptr, ##1536
0b808     F2 30 02 F1 | 	add	local06, objptr
0b80c     08 30 06 F1 | 	add	local06, #8
0b810     18 2F 62 FC | 	wrlong	local05, local06
0b814     03 00 00 FF 
0b818     00 E4 05 F1 | 	add	objptr, ##1536
0b81c     F2 30 02 FB | 	rdlong	local06, objptr
0b820     01 30 06 F1 | 	add	local06, #1
0b824     F2 30 62 FC | 	wrlong	local06, objptr
0b828     13 00 00 FF 
0b82c     38 E4 85 F1 | 	sub	objptr, ##9784
0b830     F2 30 02 FB | 	rdlong	local06, objptr
0b834     01 30 06 F1 | 	add	local06, #1
0b838     F2 30 62 FC | 	wrlong	local06, objptr
0b83c     37 00 00 FF 
0b840     44 E4 85 F1 | 	sub	objptr, ##28228
0b844     E4 07 90 FD | 	jmp	#LR__0973
0b848                 | LR__0954
0b848                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0b848     37 00 00 FF 
0b84c     44 E4 05 F1 | 	add	objptr, ##28228
0b850     F2 16 02 FB | 	rdlong	arg03, objptr
0b854     03 16 66 F0 | 	shl	arg03, #3
0b858     02 00 00 FF 
0b85c     38 E4 85 F1 | 	sub	objptr, ##1080
0b860     F2 16 02 F1 | 	add	arg03, objptr
0b864     0B 13 02 FB | 	rdlong	arg01, arg03
0b868     01 14 06 F6 | 	mov	arg02, #1
0b86c     35 00 00 FF 
0b870     0C E4 85 F1 | 	sub	objptr, ##27148
0b874     98 97 B1 FD | 	call	#__system__Left_S
0b878     FD 12 02 F6 | 	mov	arg01, result1
0b87c     98 01 00 FF 
0b880     B2 15 06 F6 | 	mov	arg02, ##@LR__5600
0b884     34 77 B1 FD | 	call	#__system___string_cmp
0b888     00 FA 0D F2 | 	cmp	result1, #0 wz
0b88c     94 00 90 5D |  if_ne	jmp	#LR__0957
0b890     37 00 00 FF 
0b894     44 E4 05 F1 | 	add	objptr, ##28228
0b898     F2 32 02 FB | 	rdlong	local07, objptr
0b89c     19 31 02 F6 | 	mov	local06, local07
0b8a0     03 30 66 F0 | 	shl	local06, #3
0b8a4     02 00 00 FF 
0b8a8     38 E4 85 F1 | 	sub	objptr, ##1080
0b8ac     F2 30 02 F1 | 	add	local06, objptr
0b8b0     98 01 00 FF 
0b8b4     B4 2F 06 F6 | 	mov	local05, ##@LR__5601
0b8b8     03 32 66 F0 | 	shl	local07, #3
0b8bc     F2 32 02 F1 | 	add	local07, objptr
0b8c0     19 33 02 FB | 	rdlong	local07, local07
0b8c4     02 00 00 FF 
0b8c8     38 E4 05 F1 | 	add	objptr, ##1080
0b8cc     F2 26 02 FB | 	rdlong	local01, objptr
0b8d0     03 26 66 F0 | 	shl	local01, #3
0b8d4     02 00 00 FF 
0b8d8     38 E4 85 F1 | 	sub	objptr, ##1080
0b8dc     F2 26 02 F1 | 	add	local01, objptr
0b8e0     13 13 02 FB | 	rdlong	arg01, local01
0b8e4     35 00 00 FF 
0b8e8     0C E4 85 F1 | 	sub	objptr, ##27148
0b8ec     09 35 02 F6 | 	mov	local08, arg01
0b8f0     97 06 48 FB | 	callpa	#(@LR__0956-@LR__0955)>>2,fcache_load_ptr_
0b8f4                 | LR__0955
0b8f4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0b8f8     01 34 06 51 |  if_ne	add	local08, #1
0b8fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0955
0b900                 | LR__0956
0b900     09 35 82 F1 | 	sub	local08, arg01
0b904     1A 15 02 F6 | 	mov	arg02, local08
0b908     01 14 86 F1 | 	sub	arg02, #1
0b90c     19 13 02 F6 | 	mov	arg01, local07
0b910     84 97 B1 FD | 	call	#__system__Right_S
0b914     FD 14 02 F6 | 	mov	arg02, result1
0b918     17 13 02 F6 | 	mov	arg01, local05
0b91c     D0 76 B1 FD | 	call	#__system___string_concat
0b920     18 FB 61 FC | 	wrlong	result1, local06
0b924                 | LR__0957
0b924                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0b924     37 00 00 FF 
0b928     44 E4 05 F1 | 	add	objptr, ##28228
0b92c     F2 16 02 FB | 	rdlong	arg03, objptr
0b930     03 16 66 F0 | 	shl	arg03, #3
0b934     02 00 00 FF 
0b938     38 E4 85 F1 | 	sub	objptr, ##1080
0b93c     F2 16 02 F1 | 	add	arg03, objptr
0b940     0B 13 02 FB | 	rdlong	arg01, arg03
0b944     01 14 06 F6 | 	mov	arg02, #1
0b948     35 00 00 FF 
0b94c     0C E4 85 F1 | 	sub	objptr, ##27148
0b950     BC 96 B1 FD | 	call	#__system__Left_S
0b954     FD 12 02 F6 | 	mov	arg01, result1
0b958     98 01 00 FF 
0b95c     B7 15 06 F6 | 	mov	arg02, ##@LR__5602
0b960     58 76 B1 FD | 	call	#__system___string_cmp
0b964     00 FA 0D F2 | 	cmp	result1, #0 wz
0b968     94 00 90 5D |  if_ne	jmp	#LR__0960
0b96c     37 00 00 FF 
0b970     44 E4 05 F1 | 	add	objptr, ##28228
0b974     F2 32 02 FB | 	rdlong	local07, objptr
0b978     19 31 02 F6 | 	mov	local06, local07
0b97c     03 30 66 F0 | 	shl	local06, #3
0b980     02 00 00 FF 
0b984     38 E4 85 F1 | 	sub	objptr, ##1080
0b988     F2 30 02 F1 | 	add	local06, objptr
0b98c     98 01 00 FF 
0b990     B9 2F 06 F6 | 	mov	local05, ##@LR__5603
0b994     03 32 66 F0 | 	shl	local07, #3
0b998     F2 32 02 F1 | 	add	local07, objptr
0b99c     19 33 02 FB | 	rdlong	local07, local07
0b9a0     02 00 00 FF 
0b9a4     38 E4 05 F1 | 	add	objptr, ##1080
0b9a8     F2 26 02 FB | 	rdlong	local01, objptr
0b9ac     03 26 66 F0 | 	shl	local01, #3
0b9b0     02 00 00 FF 
0b9b4     38 E4 85 F1 | 	sub	objptr, ##1080
0b9b8     F2 26 02 F1 | 	add	local01, objptr
0b9bc     13 13 02 FB | 	rdlong	arg01, local01
0b9c0     35 00 00 FF 
0b9c4     0C E4 85 F1 | 	sub	objptr, ##27148
0b9c8     09 35 02 F6 | 	mov	local08, arg01
0b9cc     97 06 48 FB | 	callpa	#(@LR__0959-@LR__0958)>>2,fcache_load_ptr_
0b9d0                 | LR__0958
0b9d0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0b9d4     01 34 06 51 |  if_ne	add	local08, #1
0b9d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0958
0b9dc                 | LR__0959
0b9dc     09 35 82 F1 | 	sub	local08, arg01
0b9e0     1A 15 02 F6 | 	mov	arg02, local08
0b9e4     01 14 86 F1 | 	sub	arg02, #1
0b9e8     19 13 02 F6 | 	mov	arg01, local07
0b9ec     A8 96 B1 FD | 	call	#__system__Right_S
0b9f0     FD 14 02 F6 | 	mov	arg02, result1
0b9f4     17 13 02 F6 | 	mov	arg01, local05
0b9f8     F4 75 B1 FD | 	call	#__system___string_concat
0b9fc     18 FB 61 FC | 	wrlong	result1, local06
0ba00                 | LR__0960
0ba00     37 00 00 FF 
0ba04     44 E4 05 F1 | 	add	objptr, ##28228
0ba08     F2 30 02 FB | 	rdlong	local06, objptr
0ba0c     03 30 66 F0 | 	shl	local06, #3
0ba10     02 00 00 FF 
0ba14     38 E4 85 F1 | 	sub	objptr, ##1080
0ba18     F2 30 02 F1 | 	add	local06, objptr
0ba1c     18 13 02 FB | 	rdlong	arg01, local06
0ba20     00 14 06 F6 | 	mov	arg02, #0
0ba24     35 00 00 FF 
0ba28     0C E4 85 F1 | 	sub	objptr, ##27148
0ba2c     54 AA B1 FD | 	call	#__system____builtin_atoi
0ba30     FD 2C 02 FD | 	qmul	local04, result1
0ba34     4A 00 00 FF 
0ba38     7C E4 05 F1 | 	add	objptr, ##38012
0ba3c     F2 30 02 FB | 	rdlong	local06, objptr
0ba40     18 37 02 F6 | 	mov	local09, local06
0ba44     01 36 66 F0 | 	shl	local09, #1
0ba48     18 37 02 F1 | 	add	local09, local06
0ba4c     02 36 66 F0 | 	shl	local09, #2
0ba50     03 00 00 FF 
0ba54     00 E4 85 F1 | 	sub	objptr, ##1536
0ba58     F2 36 02 F1 | 	add	local09, objptr
0ba5c     03 00 00 FF 
0ba60     00 E4 05 F1 | 	add	objptr, ##1536
0ba64     18 26 62 FD | 	getqx	local01
0ba68     1C 2A 06 F6 | 	mov	local03, #28
0ba6c     13 31 02 F6 | 	mov	local06, local01
0ba70     14 33 02 F6 | 	mov	local07, local02
0ba74     1B 31 62 FC | 	wrlong	local06, local09
0ba78     15 37 02 F6 | 	mov	local09, local03
0ba7c     F2 30 02 FB | 	rdlong	local06, objptr
0ba80     18 2F 02 F6 | 	mov	local05, local06
0ba84     01 2E 66 F0 | 	shl	local05, #1
0ba88     18 2F 02 F1 | 	add	local05, local06
0ba8c     02 2E 66 F0 | 	shl	local05, #2
0ba90     03 00 00 FF 
0ba94     00 E4 85 F1 | 	sub	objptr, ##1536
0ba98     F2 2E 02 F1 | 	add	local05, objptr
0ba9c     04 2E 06 F1 | 	add	local05, #4
0baa0     17 33 62 FC | 	wrlong	local07, local05
0baa4     03 00 00 FF 
0baa8     00 E4 05 F1 | 	add	objptr, ##1536
0baac     F2 32 02 FB | 	rdlong	local07, objptr
0bab0     19 31 02 F6 | 	mov	local06, local07
0bab4     01 30 66 F0 | 	shl	local06, #1
0bab8     19 31 02 F1 | 	add	local06, local07
0babc     02 30 66 F0 | 	shl	local06, #2
0bac0     03 00 00 FF 
0bac4     00 E4 85 F1 | 	sub	objptr, ##1536
0bac8     F2 30 02 F1 | 	add	local06, objptr
0bacc     08 30 06 F1 | 	add	local06, #8
0bad0     18 37 62 FC | 	wrlong	local09, local06
0bad4     03 00 00 FF 
0bad8     00 E4 05 F1 | 	add	objptr, ##1536
0badc     F2 30 02 FB | 	rdlong	local06, objptr
0bae0     01 30 06 F1 | 	add	local06, #1
0bae4     F2 30 62 FC | 	wrlong	local06, objptr
0bae8     13 00 00 FF 
0baec     38 E4 85 F1 | 	sub	objptr, ##9784
0baf0     F2 30 02 FB | 	rdlong	local06, objptr
0baf4     01 30 06 F1 | 	add	local06, #1
0baf8     F2 30 62 FC | 	wrlong	local06, objptr
0bafc     37 00 00 FF 
0bb00     44 E4 85 F1 | 	sub	objptr, ##28228
0bb04     24 05 90 FD | 	jmp	#LR__0973
0bb08                 | LR__0961
0bb08                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0bb08     01 2C 0E F2 | 	cmp	local04, #1 wz
0bb0c     48 00 90 5D |  if_ne	jmp	#LR__0962
0bb10     00 C0 1F FF 
0bb14     00 30 06 F6 | 	mov	local06, ##1065353216
0bb18     37 00 00 FF 
0bb1c     44 E4 05 F1 | 	add	objptr, ##28228
0bb20     F2 36 02 FB | 	rdlong	local09, objptr
0bb24     03 36 66 F0 | 	shl	local09, #3
0bb28     02 00 00 FF 
0bb2c     38 E4 85 F1 | 	sub	objptr, ##1080
0bb30     F2 36 02 F1 | 	add	local09, objptr
0bb34     1B 13 02 FB | 	rdlong	arg01, local09
0bb38     35 00 00 FF 
0bb3c     0C E4 85 F1 | 	sub	objptr, ##27148
0bb40     D4 AA B1 FD | 	call	#__system____builtin_atof
0bb44     FD 14 02 F6 | 	mov	arg02, result1
0bb48     18 13 02 F6 | 	mov	arg01, local06
0bb4c     BC A2 B1 FD | 	call	#__system___float_mul
0bb50     FD 26 02 F6 | 	mov	local01, result1
0bb54     1E 2A 06 F6 | 	mov	local03, #30
0bb58                 | LR__0962
0bb58                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0bb58     FF FF 7F FF 
0bb5c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0bb60     48 00 90 5D |  if_ne	jmp	#LR__0963
0bb64     00 C0 5F FF 
0bb68     00 30 06 F6 | 	mov	local06, ##-1082130432
0bb6c     37 00 00 FF 
0bb70     44 E4 05 F1 | 	add	objptr, ##28228
0bb74     F2 36 02 FB | 	rdlong	local09, objptr
0bb78     03 36 66 F0 | 	shl	local09, #3
0bb7c     02 00 00 FF 
0bb80     38 E4 85 F1 | 	sub	objptr, ##1080
0bb84     F2 36 02 F1 | 	add	local09, objptr
0bb88     1B 13 02 FB | 	rdlong	arg01, local09
0bb8c     35 00 00 FF 
0bb90     0C E4 85 F1 | 	sub	objptr, ##27148
0bb94     80 AA B1 FD | 	call	#__system____builtin_atof
0bb98     FD 14 02 F6 | 	mov	arg02, result1
0bb9c     18 13 02 F6 | 	mov	arg01, local06
0bba0     68 A2 B1 FD | 	call	#__system___float_mul
0bba4     FD 26 02 F6 | 	mov	local01, result1
0bba8     1E 2A 06 F6 | 	mov	local03, #30
0bbac                 | LR__0963
0bbac     13 31 02 F6 | 	mov	local06, local01
0bbb0     14 33 02 F6 | 	mov	local07, local02
0bbb4     15 2F 02 F6 | 	mov	local05, local03
0bbb8     4A 00 00 FF 
0bbbc     7C E4 05 F1 | 	add	objptr, ##38012
0bbc0     F2 26 02 FB | 	rdlong	local01, objptr
0bbc4     13 37 02 F6 | 	mov	local09, local01
0bbc8     01 36 66 F0 | 	shl	local09, #1
0bbcc     13 37 02 F1 | 	add	local09, local01
0bbd0     02 36 66 F0 | 	shl	local09, #2
0bbd4     03 00 00 FF 
0bbd8     00 E4 85 F1 | 	sub	objptr, ##1536
0bbdc     F2 36 02 F1 | 	add	local09, objptr
0bbe0     1B 31 62 FC | 	wrlong	local06, local09
0bbe4     03 00 00 FF 
0bbe8     00 E4 05 F1 | 	add	objptr, ##1536
0bbec     F2 36 02 FB | 	rdlong	local09, objptr
0bbf0     1B 31 02 F6 | 	mov	local06, local09
0bbf4     01 30 66 F0 | 	shl	local06, #1
0bbf8     1B 31 02 F1 | 	add	local06, local09
0bbfc     02 30 66 F0 | 	shl	local06, #2
0bc00     03 00 00 FF 
0bc04     00 E4 85 F1 | 	sub	objptr, ##1536
0bc08     F2 30 02 F1 | 	add	local06, objptr
0bc0c     04 30 06 F1 | 	add	local06, #4
0bc10     18 33 62 FC | 	wrlong	local07, local06
0bc14     03 00 00 FF 
0bc18     00 E4 05 F1 | 	add	objptr, ##1536
0bc1c     F2 36 02 FB | 	rdlong	local09, objptr
0bc20     1B 33 02 F6 | 	mov	local07, local09
0bc24     01 32 66 F0 | 	shl	local07, #1
0bc28     1B 33 02 F1 | 	add	local07, local09
0bc2c     02 32 66 F0 | 	shl	local07, #2
0bc30     03 00 00 FF 
0bc34     00 E4 85 F1 | 	sub	objptr, ##1536
0bc38     F2 32 02 F1 | 	add	local07, objptr
0bc3c     08 32 06 F1 | 	add	local07, #8
0bc40     19 2F 62 FC | 	wrlong	local05, local07
0bc44     03 00 00 FF 
0bc48     00 E4 05 F1 | 	add	objptr, ##1536
0bc4c     F2 30 02 FB | 	rdlong	local06, objptr
0bc50     01 30 06 F1 | 	add	local06, #1
0bc54     F2 30 62 FC | 	wrlong	local06, objptr
0bc58     13 00 00 FF 
0bc5c     38 E4 85 F1 | 	sub	objptr, ##9784
0bc60     F2 30 02 FB | 	rdlong	local06, objptr
0bc64     01 30 06 F1 | 	add	local06, #1
0bc68     F2 30 62 FC | 	wrlong	local06, objptr
0bc6c     37 00 00 FF 
0bc70     44 E4 85 F1 | 	sub	objptr, ##28228
0bc74     B4 03 90 FD | 	jmp	#LR__0973
0bc78                 | LR__0964
0bc78     37 00 00 FF 
0bc7c     44 E4 05 F1 | 	add	objptr, ##28228
0bc80     F2 16 02 FB | 	rdlong	arg03, objptr
0bc84     03 16 66 F0 | 	shl	arg03, #3
0bc88     02 00 00 FF 
0bc8c     38 E4 85 F1 | 	sub	objptr, ##1080
0bc90     F2 16 02 F1 | 	add	arg03, objptr
0bc94     0B 13 02 FB | 	rdlong	arg01, arg03
0bc98     35 00 00 FF 
0bc9c     0C E4 85 F1 | 	sub	objptr, ##27148
0bca0     09 35 02 F6 | 	mov	local08, arg01
0bca4     97 06 48 FB | 	callpa	#(@LR__0966-@LR__0965)>>2,fcache_load_ptr_
0bca8                 | LR__0965
0bca8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0bcac     01 34 06 51 |  if_ne	add	local08, #1
0bcb0     F4 FF 9F 5D |  if_ne	jmp	#LR__0965
0bcb4                 | LR__0966
0bcb4     09 35 82 F1 | 	sub	local08, arg01
0bcb8     1A FB 01 F6 | 	mov	result1, local08
0bcbc     52 00 00 FF 
0bcc0     00 E4 05 F1 | 	add	objptr, ##41984
0bcc4     F2 FA 61 FC | 	wrlong	result1, objptr
0bcc8     54 E4 85 F1 | 	sub	objptr, #84
0bccc     F2 12 02 FB | 	rdlong	arg01, objptr
0bcd0     FD 12 82 F1 | 	sub	arg01, result1
0bcd4     04 12 86 F1 | 	sub	arg01, #4
0bcd8     03 12 26 F5 | 	andn	arg01, #3
0bcdc     F2 12 62 FC | 	wrlong	arg01, objptr
0bce0     54 E4 05 F1 | 	add	objptr, #84
0bce4     F2 14 02 FB | 	rdlong	arg02, objptr
0bce8     52 00 00 FF 
0bcec     00 E4 85 F1 | 	sub	objptr, ##41984
0bcf0     9C 3A B1 FD | 	call	#_pslpoke
0bcf4                 | '     pslpoke memtop,l
0bcf4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0bcf4     01 38 06 F6 | 	mov	local10, #1
0bcf8     52 00 00 FF 
0bcfc     00 E4 05 F1 | 	add	objptr, ##41984
0bd00     F2 3A 02 FB | 	rdlong	local11, objptr
0bd04     52 00 00 FF 
0bd08     00 E4 85 F1 | 	sub	objptr, ##41984
0bd0c     01 3A 06 F1 | 	add	local11, #1
0bd10                 | LR__0967
0bd10     1D 39 52 F2 | 	cmps	local10, local11 wc
0bd14     5C 00 90 3D |  if_ae	jmp	#LR__0968
0bd18     51 00 00 FF 
0bd1c     AC E5 05 F1 | 	add	objptr, ##41900
0bd20     F2 32 02 FB | 	rdlong	local07, objptr
0bd24     03 32 06 F1 | 	add	local07, #3
0bd28     1C 33 02 F1 | 	add	local07, local10
0bd2c     1A 00 00 FF 
0bd30     68 E5 85 F1 | 	sub	objptr, ##13672
0bd34     F2 36 02 FB | 	rdlong	local09, objptr
0bd38     03 36 66 F0 | 	shl	local09, #3
0bd3c     02 00 00 FF 
0bd40     38 E4 85 F1 | 	sub	objptr, ##1080
0bd44     F2 36 02 F1 | 	add	local09, objptr
0bd48     1B 13 02 FB | 	rdlong	arg01, local09
0bd4c     1C 15 02 F6 | 	mov	arg02, local10
0bd50     01 16 06 F6 | 	mov	arg03, #1
0bd54     35 00 00 FF 
0bd58     0C E4 85 F1 | 	sub	objptr, ##27148
0bd5c     C8 93 B1 FD | 	call	#__system__Mid_S
0bd60     FD 14 C2 FA | 	rdbyte	arg02, result1
0bd64     19 13 02 F6 | 	mov	arg01, local07
0bd68     B4 3A B1 FD | 	call	#_pspoke
0bd6c     01 38 06 F1 | 	add	local10, #1
0bd70     9C FF 9F FD | 	jmp	#LR__0967
0bd74                 | LR__0968
0bd74     51 00 00 FF 
0bd78     AC E5 05 F1 | 	add	objptr, ##41900
0bd7c     F2 26 02 FB | 	rdlong	local01, objptr
0bd80     2B 2A 06 F6 | 	mov	local03, #43
0bd84     13 31 02 F6 | 	mov	local06, local01
0bd88     14 33 02 F6 | 	mov	local07, local02
0bd8c     15 3B 02 F6 | 	mov	local11, local03
0bd90     07 00 00 FF 
0bd94     30 E5 85 F1 | 	sub	objptr, ##3888
0bd98     F2 38 02 FB | 	rdlong	local10, objptr
0bd9c     1C 37 02 F6 | 	mov	local09, local10
0bda0     01 36 66 F0 | 	shl	local09, #1
0bda4     1C 37 02 F1 | 	add	local09, local10
0bda8     02 36 66 F0 | 	shl	local09, #2
0bdac     03 00 00 FF 
0bdb0     00 E4 85 F1 | 	sub	objptr, ##1536
0bdb4     F2 36 02 F1 | 	add	local09, objptr
0bdb8     1B 31 62 FC | 	wrlong	local06, local09
0bdbc     03 00 00 FF 
0bdc0     00 E4 05 F1 | 	add	objptr, ##1536
0bdc4     F2 38 02 FB | 	rdlong	local10, objptr
0bdc8     1C 37 02 F6 | 	mov	local09, local10
0bdcc     01 36 66 F0 | 	shl	local09, #1
0bdd0     1C 37 02 F1 | 	add	local09, local10
0bdd4     02 36 66 F0 | 	shl	local09, #2
0bdd8     03 00 00 FF 
0bddc     00 E4 85 F1 | 	sub	objptr, ##1536
0bde0     F2 36 02 F1 | 	add	local09, objptr
0bde4     04 36 06 F1 | 	add	local09, #4
0bde8     1B 33 62 FC | 	wrlong	local07, local09
0bdec     03 00 00 FF 
0bdf0     00 E4 05 F1 | 	add	objptr, ##1536
0bdf4     F2 38 02 FB | 	rdlong	local10, objptr
0bdf8     1C 37 02 F6 | 	mov	local09, local10
0bdfc     01 36 66 F0 | 	shl	local09, #1
0be00     1C 37 02 F1 | 	add	local09, local10
0be04     02 36 66 F0 | 	shl	local09, #2
0be08     03 00 00 FF 
0be0c     00 E4 85 F1 | 	sub	objptr, ##1536
0be10     F2 36 02 F1 | 	add	local09, objptr
0be14     08 36 06 F1 | 	add	local09, #8
0be18     1B 3B 62 FC | 	wrlong	local11, local09
0be1c     03 00 00 FF 
0be20     00 E4 05 F1 | 	add	objptr, ##1536
0be24     F2 30 02 FB | 	rdlong	local06, objptr
0be28     01 30 06 F1 | 	add	local06, #1
0be2c     F2 30 62 FC | 	wrlong	local06, objptr
0be30     13 00 00 FF 
0be34     38 E4 85 F1 | 	sub	objptr, ##9784
0be38     F2 30 02 FB | 	rdlong	local06, objptr
0be3c     01 30 06 F1 | 	add	local06, #1
0be40     F2 30 62 FC | 	wrlong	local06, objptr
0be44     37 00 00 FF 
0be48     44 E4 85 F1 | 	sub	objptr, ##28228
0be4c     DC 01 90 FD | 	jmp	#LR__0973
0be50                 | LR__0969
0be50     2C 2A 06 F6 | 	mov	local03, #44
0be54     37 00 00 FF 
0be58     44 E4 05 F1 | 	add	objptr, ##28228
0be5c     F2 30 02 FB | 	rdlong	local06, objptr
0be60     03 30 66 F0 | 	shl	local06, #3
0be64     02 00 00 FF 
0be68     38 E4 85 F1 | 	sub	objptr, ##1080
0be6c     F2 30 02 F1 | 	add	local06, objptr
0be70     18 13 02 FB | 	rdlong	arg01, local06
0be74     00 14 06 F6 | 	mov	arg02, #0
0be78     35 00 00 FF 
0be7c     0C E4 85 F1 | 	sub	objptr, ##27148
0be80     00 A6 B1 FD | 	call	#__system____builtin_atoi
0be84     FD 26 02 F6 | 	mov	local01, result1
0be88     13 31 02 F6 | 	mov	local06, local01
0be8c     14 33 02 F6 | 	mov	local07, local02
0be90     15 3B 02 F6 | 	mov	local11, local03
0be94     4A 00 00 FF 
0be98     7C E4 05 F1 | 	add	objptr, ##38012
0be9c     F2 38 02 FB | 	rdlong	local10, objptr
0bea0     1C 37 02 F6 | 	mov	local09, local10
0bea4     01 36 66 F0 | 	shl	local09, #1
0bea8     1C 37 02 F1 | 	add	local09, local10
0beac     02 36 66 F0 | 	shl	local09, #2
0beb0     03 00 00 FF 
0beb4     00 E4 85 F1 | 	sub	objptr, ##1536
0beb8     F2 36 02 F1 | 	add	local09, objptr
0bebc     1B 31 62 FC | 	wrlong	local06, local09
0bec0     03 00 00 FF 
0bec4     00 E4 05 F1 | 	add	objptr, ##1536
0bec8     F2 38 02 FB | 	rdlong	local10, objptr
0becc     1C 37 02 F6 | 	mov	local09, local10
0bed0     01 36 66 F0 | 	shl	local09, #1
0bed4     1C 37 02 F1 | 	add	local09, local10
0bed8     02 36 66 F0 | 	shl	local09, #2
0bedc     03 00 00 FF 
0bee0     00 E4 85 F1 | 	sub	objptr, ##1536
0bee4     F2 36 02 F1 | 	add	local09, objptr
0bee8     04 36 06 F1 | 	add	local09, #4
0beec     1B 33 62 FC | 	wrlong	local07, local09
0bef0     03 00 00 FF 
0bef4     00 E4 05 F1 | 	add	objptr, ##1536
0bef8     F2 38 02 FB | 	rdlong	local10, objptr
0befc     1C 37 02 F6 | 	mov	local09, local10
0bf00     01 36 66 F0 | 	shl	local09, #1
0bf04     1C 37 02 F1 | 	add	local09, local10
0bf08     02 36 66 F0 | 	shl	local09, #2
0bf0c     03 00 00 FF 
0bf10     00 E4 85 F1 | 	sub	objptr, ##1536
0bf14     F2 36 02 F1 | 	add	local09, objptr
0bf18     08 36 06 F1 | 	add	local09, #8
0bf1c     1B 3B 62 FC | 	wrlong	local11, local09
0bf20     03 00 00 FF 
0bf24     00 E4 05 F1 | 	add	objptr, ##1536
0bf28     F2 30 02 FB | 	rdlong	local06, objptr
0bf2c     01 30 06 F1 | 	add	local06, #1
0bf30     F2 30 62 FC | 	wrlong	local06, objptr
0bf34     13 00 00 FF 
0bf38     38 E4 85 F1 | 	sub	objptr, ##9784
0bf3c     F2 30 02 FB | 	rdlong	local06, objptr
0bf40     01 30 06 F1 | 	add	local06, #1
0bf44     F2 30 62 FC | 	wrlong	local06, objptr
0bf48     37 00 00 FF 
0bf4c     44 E4 85 F1 | 	sub	objptr, ##28228
0bf50     D8 00 90 FD | 	jmp	#LR__0973
0bf54                 | LR__0970
0bf54     16 13 02 F6 | 	mov	arg01, local04
0bf58     24 04 B0 FD | 	call	#_getvar
0bf5c     37 00 00 FF 
0bf60     44 E4 05 F1 | 	add	objptr, ##28228
0bf64     F2 30 02 FB | 	rdlong	local06, objptr
0bf68     01 30 06 F1 | 	add	local06, #1
0bf6c     F2 30 62 FC | 	wrlong	local06, objptr
0bf70     37 00 00 FF 
0bf74     44 E4 85 F1 | 	sub	objptr, ##28228
0bf78                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0bf78     01 FA 55 F2 | 	cmps	result1, #1 wc
0bf7c     B0 00 90 3D |  if_ae	jmp	#LR__0974
0bf80     A8 00 90 FD | 	jmp	#LR__0973
0bf84                 | LR__0971
0bf84     37 00 00 FF 
0bf88     44 E4 05 F1 | 	add	objptr, ##28228
0bf8c     F2 30 02 FB | 	rdlong	local06, objptr
0bf90     01 30 06 F1 | 	add	local06, #1
0bf94     F2 30 62 FC | 	wrlong	local06, objptr
0bf98     37 00 00 FF 
0bf9c     44 E4 85 F1 | 	sub	objptr, ##28228
0bfa0     20 F1 BF FD | 	call	#_expr
0bfa4                 | '     ct+=1
0bfa4                 | '     err=expr() : if err>0 then return err 
0bfa4     01 FA 55 F2 | 	cmps	result1, #1 wc
0bfa8     84 00 90 3D |  if_ae	jmp	#LR__0974
0bfac                 | '     if lparts(ct).token=token_rpar then ct+=1
0bfac     37 00 00 FF 
0bfb0     44 E4 05 F1 | 	add	objptr, ##28228
0bfb4     F2 3A 02 FB | 	rdlong	local11, objptr
0bfb8     03 3A 66 F0 | 	shl	local11, #3
0bfbc     02 00 00 FF 
0bfc0     38 E4 85 F1 | 	sub	objptr, ##1080
0bfc4     F2 3A 02 F1 | 	add	local11, objptr
0bfc8     04 3A 06 F1 | 	add	local11, #4
0bfcc     1D 3B 02 FB | 	rdlong	local11, local11
0bfd0     14 3A 0E F2 | 	cmp	local11, #20 wz
0bfd4     35 00 00 FF 
0bfd8     0C E4 85 F1 | 	sub	objptr, ##27148
0bfdc     4C 00 90 5D |  if_ne	jmp	#LR__0973
0bfe0     37 00 00 FF 
0bfe4     44 E4 05 F1 | 	add	objptr, ##28228
0bfe8     F2 30 02 FB | 	rdlong	local06, objptr
0bfec     01 30 06 F1 | 	add	local06, #1
0bff0     F2 30 62 FC | 	wrlong	local06, objptr
0bff4     37 00 00 FF 
0bff8     44 E4 85 F1 | 	sub	objptr, ##28228
0bffc     2C 00 90 FD | 	jmp	#LR__0973
0c000                 | LR__0972
0c000     16 13 02 F6 | 	mov	arg01, local04
0c004     34 00 B0 FD | 	call	#_getfun
0c008     37 00 00 FF 
0c00c     44 E4 05 F1 | 	add	objptr, ##28228
0c010     F2 30 02 FB | 	rdlong	local06, objptr
0c014     01 30 06 F1 | 	add	local06, #1
0c018     F2 30 62 FC | 	wrlong	local06, objptr
0c01c     37 00 00 FF 
0c020     44 E4 85 F1 | 	sub	objptr, ##28228
0c024                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0c024     01 FA 55 F2 | 	cmps	result1, #1 wc
0c028     04 00 90 3D |  if_ae	jmp	#LR__0974
0c02c                 | LR__0973
0c02c                 | ' return 0  
0c02c     00 FA 05 F6 | 	mov	result1, #0
0c030                 | LR__0974
0c030     A7 F0 03 F6 | 	mov	ptra, fp
0c034     B2 00 A0 FD | 	call	#popregs_
0c038                 | _getvalue_ret
0c038     2D 00 64 FD | 	ret
0c03c                 | 
0c03c                 | ' 
0c03c                 | ' ' Get a function result 
0c03c                 | ' 
0c03c                 | ' function getfun(m as integer) as ulong
0c03c                 | _getfun
0c03c     0F 4A 05 F6 | 	mov	COUNT_, #15
0c040     A8 00 A0 FD | 	call	#pushregs_
0c044                 | _getfun_enter
0c044     09 2D 02 F6 | 	mov	local04, arg01
0c048     37 00 00 FF 
0c04c     44 E4 05 F1 | 	add	objptr, ##28228
0c050     F2 2E 02 FB | 	rdlong	local05, objptr
0c054     17 31 02 F6 | 	mov	local06, local05
0c058     00 32 06 F6 | 	mov	local07, #0
0c05c                 | ' oldct=ct
0c05c                 | ' numpar=0
0c05c                 | ' if lparts(ct+1).token=token_lpar then
0c05c     01 2E 06 F1 | 	add	local05, #1
0c060     03 2E 66 F0 | 	shl	local05, #3
0c064     02 00 00 FF 
0c068     38 E4 85 F1 | 	sub	objptr, ##1080
0c06c     F2 2E 02 F1 | 	add	local05, objptr
0c070     04 2E 06 F1 | 	add	local05, #4
0c074     17 2F 02 FB | 	rdlong	local05, local05
0c078     15 2E 0E F2 | 	cmp	local05, #21 wz
0c07c     35 00 00 FF 
0c080     0C E4 85 F1 | 	sub	objptr, ##27148
0c084     54 01 90 5D |  if_ne	jmp	#LR__0984
0c088     37 00 00 FF 
0c08c     44 E4 05 F1 | 	add	objptr, ##28228
0c090     F2 34 02 FB | 	rdlong	local08, objptr
0c094     01 34 06 F1 | 	add	local08, #1
0c098     F2 34 62 FC | 	wrlong	local08, objptr
0c09c     37 00 00 FF 
0c0a0     44 E4 85 F1 | 	sub	objptr, ##28228
0c0a4                 | '   ct+=1 											' omit this lpar, this is for expr list
0c0a4                 | '   do
0c0a4                 | LR__0980
0c0a4     37 00 00 FF 
0c0a8     44 E4 05 F1 | 	add	objptr, ##28228
0c0ac     F2 2E 02 FB | 	rdlong	local05, objptr
0c0b0     01 2E 06 F1 | 	add	local05, #1
0c0b4     F2 2E 62 FC | 	wrlong	local05, objptr
0c0b8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c0b8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c0b8     03 2E 66 F0 | 	shl	local05, #3
0c0bc     02 00 00 FF 
0c0c0     38 E4 85 F1 | 	sub	objptr, ##1080
0c0c4     F2 2E 02 F1 | 	add	local05, objptr
0c0c8     04 2E 06 F1 | 	add	local05, #4
0c0cc     17 35 02 FB | 	rdlong	local08, local05
0c0d0     15 34 0E F2 | 	cmp	local08, #21 wz
0c0d4     35 00 00 FF 
0c0d8     0C E4 85 F1 | 	sub	objptr, ##27148
0c0dc     44 00 90 5D |  if_ne	jmp	#LR__0981
0c0e0     37 00 00 FF 
0c0e4     44 E4 05 F1 | 	add	objptr, ##28228
0c0e8     F2 34 02 FB | 	rdlong	local08, objptr
0c0ec     01 34 06 F1 | 	add	local08, #1
0c0f0     F2 34 62 FC | 	wrlong	local08, objptr
0c0f4     37 00 00 FF 
0c0f8     44 E4 85 F1 | 	sub	objptr, ##28228
0c0fc     C4 EF BF FD | 	call	#_expr
0c100     FD 36 02 F6 | 	mov	local09, result1
0c104     37 00 00 FF 
0c108     44 E4 05 F1 | 	add	objptr, ##28228
0c10c     F2 34 02 FB | 	rdlong	local08, objptr
0c110     01 34 06 F1 | 	add	local08, #1
0c114     F2 34 62 FC | 	wrlong	local08, objptr
0c118     37 00 00 FF 
0c11c     44 E4 85 F1 | 	sub	objptr, ##28228
0c120     08 00 90 FD | 	jmp	#LR__0982
0c124                 | LR__0981
0c124     9C EF BF FD | 	call	#_expr
0c128     FD 36 02 F6 | 	mov	local09, result1
0c12c                 | LR__0982
0c12c                 | '     if err>0 then return err
0c12c     01 36 16 F2 | 	cmp	local09, #1 wc
0c130     1B FB 01 36 |  if_ae	mov	result1, local09
0c134     3C 02 90 3D |  if_ae	jmp	#LR__0986
0c138     01 32 06 F1 | 	add	local07, #1
0c13c     37 00 00 FF 
0c140     44 E4 05 F1 | 	add	objptr, ##28228
0c144     F2 2E 02 FB | 	rdlong	local05, objptr
0c148     03 2E 66 F0 | 	shl	local05, #3
0c14c     02 00 00 FF 
0c150     38 E4 85 F1 | 	sub	objptr, ##1080
0c154     F2 2E 02 F1 | 	add	local05, objptr
0c158     04 2E 06 F1 | 	add	local05, #4
0c15c     17 37 02 FB | 	rdlong	local09, local05
0c160     14 36 0E F2 | 	cmp	local09, #20 wz
0c164     35 00 00 FF 
0c168     0C E4 85 F1 | 	sub	objptr, ##27148
0c16c     34 00 90 AD |  if_e	jmp	#LR__0983
0c170     37 00 00 FF 
0c174     44 E4 05 F1 | 	add	objptr, ##28228
0c178     F2 36 02 FB | 	rdlong	local09, objptr
0c17c     03 36 66 F0 | 	shl	local09, #3
0c180     02 00 00 FF 
0c184     38 E4 85 F1 | 	sub	objptr, ##1080
0c188     F2 36 02 F1 | 	add	local09, objptr
0c18c     04 36 06 F1 | 	add	local09, #4
0c190     1B 37 02 FB | 	rdlong	local09, local09
0c194     FE 37 0E F2 | 	cmp	local09, #510 wz
0c198     35 00 00 FF 
0c19c     0C E4 85 F1 | 	sub	objptr, ##27148
0c1a0     00 FF 9F 5D |  if_ne	jmp	#LR__0980
0c1a4                 | LR__0983
0c1a4                 | '   if lparts(ct).token=token_end then return 14
0c1a4     37 00 00 FF 
0c1a8     44 E4 05 F1 | 	add	objptr, ##28228
0c1ac     F2 2E 02 FB | 	rdlong	local05, objptr
0c1b0     03 2E 66 F0 | 	shl	local05, #3
0c1b4     02 00 00 FF 
0c1b8     38 E4 85 F1 | 	sub	objptr, ##1080
0c1bc     F2 2E 02 F1 | 	add	local05, objptr
0c1c0     04 2E 06 F1 | 	add	local05, #4
0c1c4     17 37 02 FB | 	rdlong	local09, local05
0c1c8     FE 37 0E F2 | 	cmp	local09, #510 wz
0c1cc     35 00 00 FF 
0c1d0     0C E4 85 F1 | 	sub	objptr, ##27148
0c1d4     0E FA 05 A6 |  if_e	mov	result1, #14
0c1d8     98 01 90 AD |  if_e	jmp	#LR__0986
0c1dc                 | LR__0984
0c1dc     19 27 02 F6 | 	mov	local01, local07
0c1e0     03 30 66 F0 | 	shl	local06, #3
0c1e4     35 00 00 FF 
0c1e8     0C E4 05 F1 | 	add	objptr, ##27148
0c1ec     F2 30 02 F1 | 	add	local06, objptr
0c1f0     04 30 06 F1 | 	add	local06, #4
0c1f4     18 2B 02 FB | 	rdlong	local03, local06
0c1f8     13 35 02 F6 | 	mov	local08, local01
0c1fc     14 39 02 F6 | 	mov	local10, local02
0c200     15 3B 02 F6 | 	mov	local11, local03
0c204     15 00 00 FF 
0c208     70 E4 05 F1 | 	add	objptr, ##10864
0c20c     F2 3C 02 FB | 	rdlong	local12, objptr
0c210     1E 3F 02 F6 | 	mov	local13, local12
0c214     01 3E 66 F0 | 	shl	local13, #1
0c218     1E 3F 02 F1 | 	add	local13, local12
0c21c     02 3E 66 F0 | 	shl	local13, #2
0c220     03 00 00 FF 
0c224     00 E4 85 F1 | 	sub	objptr, ##1536
0c228     F2 3E 02 F1 | 	add	local13, objptr
0c22c     1F 35 62 FC | 	wrlong	local08, local13
0c230     03 00 00 FF 
0c234     00 E4 05 F1 | 	add	objptr, ##1536
0c238     F2 34 02 FB | 	rdlong	local08, objptr
0c23c     1A 41 02 F6 | 	mov	local14, local08
0c240     01 40 66 F0 | 	shl	local14, #1
0c244     1A 41 02 F1 | 	add	local14, local08
0c248     02 40 66 F0 | 	shl	local14, #2
0c24c     03 00 00 FF 
0c250     00 E4 85 F1 | 	sub	objptr, ##1536
0c254     F2 40 02 F1 | 	add	local14, objptr
0c258     04 40 06 F1 | 	add	local14, #4
0c25c     20 39 62 FC | 	wrlong	local10, local14
0c260     03 00 00 FF 
0c264     00 E4 05 F1 | 	add	objptr, ##1536
0c268     F2 34 02 FB | 	rdlong	local08, objptr
0c26c     1A 43 02 F6 | 	mov	local15, local08
0c270     01 42 66 F0 | 	shl	local15, #1
0c274     1A 43 02 F1 | 	add	local15, local08
0c278     02 42 66 F0 | 	shl	local15, #2
0c27c     03 00 00 FF 
0c280     00 E4 85 F1 | 	sub	objptr, ##1536
0c284     F2 42 02 F1 | 	add	local15, objptr
0c288     08 42 06 F1 | 	add	local15, #8
0c28c     21 3B 62 FC | 	wrlong	local11, local15
0c290     03 00 00 FF 
0c294     00 E4 05 F1 | 	add	objptr, ##1536
0c298     F2 34 02 FB | 	rdlong	local08, objptr
0c29c     01 34 06 F1 | 	add	local08, #1
0c2a0     F2 34 62 FC | 	wrlong	local08, objptr
0c2a4     4A 00 00 FF 
0c2a8     7C E4 85 F1 | 	sub	objptr, ##38012
0c2ac                 | ' t2.result.uresult=numpar
0c2ac                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0c2ac                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c2ac                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c2ac     FF FF 7F FF 
0c2b0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c2b4     B8 00 90 5D |  if_ne	jmp	#LR__0985
0c2b8     15 2A 06 F6 | 	mov	local03, #21
0c2bc     13 35 02 F6 | 	mov	local08, local01
0c2c0     14 39 02 F6 | 	mov	local10, local02
0c2c4     15 3B 02 F6 | 	mov	local11, local03
0c2c8     4A 00 00 FF 
0c2cc     7C E4 05 F1 | 	add	objptr, ##38012
0c2d0     F2 3C 02 FB | 	rdlong	local12, objptr
0c2d4     1E 3F 02 F6 | 	mov	local13, local12
0c2d8     01 3E 66 F0 | 	shl	local13, #1
0c2dc     1E 3F 02 F1 | 	add	local13, local12
0c2e0     02 3E 66 F0 | 	shl	local13, #2
0c2e4     03 00 00 FF 
0c2e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c2ec     F2 3E 02 F1 | 	add	local13, objptr
0c2f0     1F 35 62 FC | 	wrlong	local08, local13
0c2f4     03 00 00 FF 
0c2f8     00 E4 05 F1 | 	add	objptr, ##1536
0c2fc     F2 42 02 FB | 	rdlong	local15, objptr
0c300     21 41 02 F6 | 	mov	local14, local15
0c304     01 40 66 F0 | 	shl	local14, #1
0c308     21 41 02 F1 | 	add	local14, local15
0c30c     02 40 66 F0 | 	shl	local14, #2
0c310     03 00 00 FF 
0c314     00 E4 85 F1 | 	sub	objptr, ##1536
0c318     F2 40 02 F1 | 	add	local14, objptr
0c31c     04 40 06 F1 | 	add	local14, #4
0c320     20 39 62 FC | 	wrlong	local10, local14
0c324     03 00 00 FF 
0c328     00 E4 05 F1 | 	add	objptr, ##1536
0c32c     F2 40 02 FB | 	rdlong	local14, objptr
0c330     20 43 02 F6 | 	mov	local15, local14
0c334     01 42 66 F0 | 	shl	local15, #1
0c338     20 43 02 F1 | 	add	local15, local14
0c33c     02 42 66 F0 | 	shl	local15, #2
0c340     03 00 00 FF 
0c344     00 E4 85 F1 | 	sub	objptr, ##1536
0c348     F2 42 02 F1 | 	add	local15, objptr
0c34c     08 42 06 F1 | 	add	local15, #8
0c350     21 3B 62 FC | 	wrlong	local11, local15
0c354     03 00 00 FF 
0c358     00 E4 05 F1 | 	add	objptr, ##1536
0c35c     F2 34 02 FB | 	rdlong	local08, objptr
0c360     01 34 06 F1 | 	add	local08, #1
0c364     F2 34 62 FC | 	wrlong	local08, objptr
0c368     4A 00 00 FF 
0c36c     7C E4 85 F1 | 	sub	objptr, ##38012
0c370                 | LR__0985
0c370                 | ' return 0
0c370     00 FA 05 F6 | 	mov	result1, #0
0c374                 | LR__0986
0c374     A7 F0 03 F6 | 	mov	ptra, fp
0c378     B2 00 A0 FD | 	call	#popregs_
0c37c                 | _getfun_ret
0c37c     2D 00 64 FD | 	ret
0c380                 | 
0c380                 | '   
0c380                 | '   
0c380                 | ' function getvar(m as integer) as ulong
0c380                 | _getvar
0c380     11 4A 05 F6 | 	mov	COUNT_, #17
0c384     A8 00 A0 FD | 	call	#pushregs_
0c388                 | _getvar_enter
0c388     09 2D 02 F6 | 	mov	local04, arg01
0c38c     37 00 00 FF 
0c390     44 E4 05 F1 | 	add	objptr, ##28228
0c394     F2 2E 02 FB | 	rdlong	local05, objptr
0c398     03 2E 66 F0 | 	shl	local05, #3
0c39c     02 00 00 FF 
0c3a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c3a4     F2 2E 02 F1 | 	add	local05, objptr
0c3a8     17 31 02 FB | 	rdlong	local06, local05
0c3ac     01 32 66 F6 | 	neg	local07, #1
0c3b0                 | ' 
0c3b0                 | ' varname$=lparts(ct).part$
0c3b0                 | ' j=-1
0c3b0                 | ' 
0c3b0                 | ' for i=0 to varnum-1
0c3b0     00 34 06 F6 | 	mov	local08, #0
0c3b4     04 E4 85 F1 | 	sub	objptr, #4
0c3b8     F2 36 02 FB | 	rdlong	local09, objptr
0c3bc     35 00 00 FF 
0c3c0     08 E4 85 F1 | 	sub	objptr, ##27144
0c3c4                 | LR__0990
0c3c4     1B 35 52 F2 | 	cmps	local08, local09 wc
0c3c8     38 00 90 3D |  if_ae	jmp	#LR__0991
0c3cc                 | '   if variables(i).name=varname$ then j=i : exit
0c3cc     1A 2F 02 F6 | 	mov	local05, local08
0c3d0     04 2E 66 F0 | 	shl	local05, #4
0c3d4     14 00 00 FF 
0c3d8     F8 E5 05 F1 | 	add	objptr, ##10744
0c3dc     F2 2E 02 F1 | 	add	local05, objptr
0c3e0     17 13 02 FB | 	rdlong	arg01, local05
0c3e4     18 15 02 F6 | 	mov	arg02, local06
0c3e8     14 00 00 FF 
0c3ec     F8 E5 85 F1 | 	sub	objptr, ##10744
0c3f0     C8 6B B1 FD | 	call	#__system___string_cmp
0c3f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c3f8     1A 33 02 A6 |  if_e	mov	local07, local08
0c3fc     01 34 06 51 |  if_ne	add	local08, #1
0c400     C0 FF 9F 5D |  if_ne	jmp	#LR__0990
0c404                 | LR__0991
0c404                 | ' if  j=-1 andalso varnum<maxvars then   
0c404     FF FF 7F FF 
0c408     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0c40c     A8 00 90 5D |  if_ne	jmp	#LR__0992
0c410     35 00 00 FF 
0c414     08 E4 05 F1 | 	add	objptr, ##27144
0c418     F2 36 02 FB | 	rdlong	local09, objptr
0c41c     35 00 00 FF 
0c420     08 E4 85 F1 | 	sub	objptr, ##27144
0c424     02 00 00 FF 
0c428     00 36 56 F2 | 	cmps	local09, ##1024 wc
0c42c     88 00 90 3D |  if_ae	jmp	#LR__0992
0c430     35 00 00 FF 
0c434     08 E4 05 F1 | 	add	objptr, ##27144
0c438     F2 2E 02 FB | 	rdlong	local05, objptr
0c43c     04 2E 66 F0 | 	shl	local05, #4
0c440     20 00 00 FF 
0c444     10 E4 85 F1 | 	sub	objptr, ##16400
0c448     F2 2E 02 F1 | 	add	local05, objptr
0c44c     17 31 62 FC | 	wrlong	local06, local05
0c450     20 00 00 FF 
0c454     10 E4 05 F1 | 	add	objptr, ##16400
0c458     F2 2E 02 FB | 	rdlong	local05, objptr
0c45c     04 2E 66 F0 | 	shl	local05, #4
0c460     20 00 00 FF 
0c464     10 E4 85 F1 | 	sub	objptr, ##16400
0c468     F2 2E 02 F1 | 	add	local05, objptr
0c46c     04 2E 06 F1 | 	add	local05, #4
0c470     17 01 68 FC | 	wrlong	#0, local05
0c474     20 00 00 FF 
0c478     10 E4 05 F1 | 	add	objptr, ##16400
0c47c     F2 2E 02 FB | 	rdlong	local05, objptr
0c480     04 2E 66 F0 | 	shl	local05, #4
0c484     20 00 00 FF 
0c488     10 E4 85 F1 | 	sub	objptr, ##16400
0c48c     F2 2E 02 F1 | 	add	local05, objptr
0c490     0C 2E 06 F1 | 	add	local05, #12
0c494     17 39 68 FC | 	wrlong	#28, local05
0c498     20 00 00 FF 
0c49c     10 E4 05 F1 | 	add	objptr, ##16400
0c4a0     F2 36 02 FB | 	rdlong	local09, objptr
0c4a4     1B 33 02 F6 | 	mov	local07, local09
0c4a8     01 36 06 F1 | 	add	local09, #1
0c4ac     F2 36 62 FC | 	wrlong	local09, objptr
0c4b0     35 00 00 FF 
0c4b4     08 E4 85 F1 | 	sub	objptr, ##27144
0c4b8                 | LR__0992
0c4b8     00 36 06 F6 | 	mov	local09, #0
0c4bc                 | ' numpar=0
0c4bc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0c4bc     37 00 00 FF 
0c4c0     44 E4 05 F1 | 	add	objptr, ##28228
0c4c4     F2 2E 02 FB | 	rdlong	local05, objptr
0c4c8     01 2E 06 F1 | 	add	local05, #1
0c4cc     03 2E 66 F0 | 	shl	local05, #3
0c4d0     02 00 00 FF 
0c4d4     38 E4 85 F1 | 	sub	objptr, ##1080
0c4d8     F2 2E 02 F1 | 	add	local05, objptr
0c4dc     04 2E 06 F1 | 	add	local05, #4
0c4e0     17 35 02 FB | 	rdlong	local08, local05
0c4e4     15 34 0E F2 | 	cmp	local08, #21 wz
0c4e8     35 00 00 FF 
0c4ec     0C E4 85 F1 | 	sub	objptr, ##27148
0c4f0     54 01 90 5D |  if_ne	jmp	#LR__0997
0c4f4     37 00 00 FF 
0c4f8     44 E4 05 F1 | 	add	objptr, ##28228
0c4fc     F2 38 02 FB | 	rdlong	local10, objptr
0c500     01 38 06 F1 | 	add	local10, #1
0c504     F2 38 62 FC | 	wrlong	local10, objptr
0c508     37 00 00 FF 
0c50c     44 E4 85 F1 | 	sub	objptr, ##28228
0c510                 | '   ct+=1 											' omit this lpar, this is for expr list
0c510                 | '   do
0c510                 | LR__0993
0c510     37 00 00 FF 
0c514     44 E4 05 F1 | 	add	objptr, ##28228
0c518     F2 2E 02 FB | 	rdlong	local05, objptr
0c51c     01 2E 06 F1 | 	add	local05, #1
0c520     F2 2E 62 FC | 	wrlong	local05, objptr
0c524                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0c524                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0c524     03 2E 66 F0 | 	shl	local05, #3
0c528     02 00 00 FF 
0c52c     38 E4 85 F1 | 	sub	objptr, ##1080
0c530     F2 2E 02 F1 | 	add	local05, objptr
0c534     04 2E 06 F1 | 	add	local05, #4
0c538     17 39 02 FB | 	rdlong	local10, local05
0c53c     15 38 0E F2 | 	cmp	local10, #21 wz
0c540     35 00 00 FF 
0c544     0C E4 85 F1 | 	sub	objptr, ##27148
0c548     44 00 90 5D |  if_ne	jmp	#LR__0994
0c54c     37 00 00 FF 
0c550     44 E4 05 F1 | 	add	objptr, ##28228
0c554     F2 38 02 FB | 	rdlong	local10, objptr
0c558     01 38 06 F1 | 	add	local10, #1
0c55c     F2 38 62 FC | 	wrlong	local10, objptr
0c560     37 00 00 FF 
0c564     44 E4 85 F1 | 	sub	objptr, ##28228
0c568     58 EB BF FD | 	call	#_expr
0c56c     FD 3A 02 F6 | 	mov	local11, result1
0c570     37 00 00 FF 
0c574     44 E4 05 F1 | 	add	objptr, ##28228
0c578     F2 38 02 FB | 	rdlong	local10, objptr
0c57c     01 38 06 F1 | 	add	local10, #1
0c580     F2 38 62 FC | 	wrlong	local10, objptr
0c584     37 00 00 FF 
0c588     44 E4 85 F1 | 	sub	objptr, ##28228
0c58c     08 00 90 FD | 	jmp	#LR__0995
0c590                 | LR__0994
0c590     30 EB BF FD | 	call	#_expr
0c594     FD 3A 02 F6 | 	mov	local11, result1
0c598                 | LR__0995
0c598                 | '     if err>0 then return err
0c598     01 3A 56 F2 | 	cmps	local11, #1 wc
0c59c     1D FB 01 36 |  if_ae	mov	result1, local11
0c5a0     2C 02 90 3D |  if_ae	jmp	#LR__0999
0c5a4     01 36 06 F1 | 	add	local09, #1
0c5a8     37 00 00 FF 
0c5ac     44 E4 05 F1 | 	add	objptr, ##28228
0c5b0     F2 2E 02 FB | 	rdlong	local05, objptr
0c5b4     03 2E 66 F0 | 	shl	local05, #3
0c5b8     02 00 00 FF 
0c5bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c5c0     F2 2E 02 F1 | 	add	local05, objptr
0c5c4     04 2E 06 F1 | 	add	local05, #4
0c5c8     17 3B 02 FB | 	rdlong	local11, local05
0c5cc     14 3A 0E F2 | 	cmp	local11, #20 wz
0c5d0     35 00 00 FF 
0c5d4     0C E4 85 F1 | 	sub	objptr, ##27148
0c5d8     34 00 90 AD |  if_e	jmp	#LR__0996
0c5dc     37 00 00 FF 
0c5e0     44 E4 05 F1 | 	add	objptr, ##28228
0c5e4     F2 3A 02 FB | 	rdlong	local11, objptr
0c5e8     03 3A 66 F0 | 	shl	local11, #3
0c5ec     02 00 00 FF 
0c5f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c5f4     F2 3A 02 F1 | 	add	local11, objptr
0c5f8     04 3A 06 F1 | 	add	local11, #4
0c5fc     1D 3B 02 FB | 	rdlong	local11, local11
0c600     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c604     35 00 00 FF 
0c608     0C E4 85 F1 | 	sub	objptr, ##27148
0c60c     00 FF 9F 5D |  if_ne	jmp	#LR__0993
0c610                 | LR__0996
0c610                 | '     if lparts(ct).token=token_end then return 14
0c610     37 00 00 FF 
0c614     44 E4 05 F1 | 	add	objptr, ##28228
0c618     F2 2E 02 FB | 	rdlong	local05, objptr
0c61c     03 2E 66 F0 | 	shl	local05, #3
0c620     02 00 00 FF 
0c624     38 E4 85 F1 | 	sub	objptr, ##1080
0c628     F2 2E 02 F1 | 	add	local05, objptr
0c62c     04 2E 06 F1 | 	add	local05, #4
0c630     17 3B 02 FB | 	rdlong	local11, local05
0c634     FE 3B 0E F2 | 	cmp	local11, #510 wz
0c638     35 00 00 FF 
0c63c     0C E4 85 F1 | 	sub	objptr, ##27148
0c640     0E FA 05 A6 |  if_e	mov	result1, #14
0c644     88 01 90 AD |  if_e	jmp	#LR__0999
0c648                 | LR__0997
0c648     1B 29 02 F6 | 	mov	local02, local09
0c64c     11 2A 06 F6 | 	mov	local03, #17
0c650     19 27 02 F6 | 	mov	local01, local07
0c654     13 39 02 F6 | 	mov	local10, local01
0c658     14 3D 02 F6 | 	mov	local12, local02
0c65c     15 3F 02 F6 | 	mov	local13, local03
0c660     4A 00 00 FF 
0c664     7C E4 05 F1 | 	add	objptr, ##38012
0c668     F2 40 02 FB | 	rdlong	local14, objptr
0c66c     20 43 02 F6 | 	mov	local15, local14
0c670     01 42 66 F0 | 	shl	local15, #1
0c674     20 43 02 F1 | 	add	local15, local14
0c678     02 42 66 F0 | 	shl	local15, #2
0c67c     03 00 00 FF 
0c680     00 E4 85 F1 | 	sub	objptr, ##1536
0c684     F2 42 02 F1 | 	add	local15, objptr
0c688     21 39 62 FC | 	wrlong	local10, local15
0c68c     03 00 00 FF 
0c690     00 E4 05 F1 | 	add	objptr, ##1536
0c694     F2 38 02 FB | 	rdlong	local10, objptr
0c698     1C 45 02 F6 | 	mov	local16, local10
0c69c     01 44 66 F0 | 	shl	local16, #1
0c6a0     1C 45 02 F1 | 	add	local16, local10
0c6a4     02 44 66 F0 | 	shl	local16, #2
0c6a8     03 00 00 FF 
0c6ac     00 E4 85 F1 | 	sub	objptr, ##1536
0c6b0     F2 44 02 F1 | 	add	local16, objptr
0c6b4     04 44 06 F1 | 	add	local16, #4
0c6b8     22 3D 62 FC | 	wrlong	local12, local16
0c6bc     03 00 00 FF 
0c6c0     00 E4 05 F1 | 	add	objptr, ##1536
0c6c4     F2 38 02 FB | 	rdlong	local10, objptr
0c6c8     1C 47 02 F6 | 	mov	local17, local10
0c6cc     01 46 66 F0 | 	shl	local17, #1
0c6d0     1C 47 02 F1 | 	add	local17, local10
0c6d4     02 46 66 F0 | 	shl	local17, #2
0c6d8     03 00 00 FF 
0c6dc     00 E4 85 F1 | 	sub	objptr, ##1536
0c6e0     F2 46 02 F1 | 	add	local17, objptr
0c6e4     08 46 06 F1 | 	add	local17, #8
0c6e8     23 3F 62 FC | 	wrlong	local13, local17
0c6ec     03 00 00 FF 
0c6f0     00 E4 05 F1 | 	add	objptr, ##1536
0c6f4     F2 38 02 FB | 	rdlong	local10, objptr
0c6f8     01 38 06 F1 | 	add	local10, #1
0c6fc     F2 38 62 FC | 	wrlong	local10, objptr
0c700     4A 00 00 FF 
0c704     7C E4 85 F1 | 	sub	objptr, ##38012
0c708                 | ' t2.result.twowords(1)=numpar
0c708                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0c708                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0c708                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0c708     FF FF 7F FF 
0c70c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c710     B8 00 90 5D |  if_ne	jmp	#LR__0998
0c714     15 2A 06 F6 | 	mov	local03, #21
0c718     13 39 02 F6 | 	mov	local10, local01
0c71c     14 3D 02 F6 | 	mov	local12, local02
0c720     15 3F 02 F6 | 	mov	local13, local03
0c724     4A 00 00 FF 
0c728     7C E4 05 F1 | 	add	objptr, ##38012
0c72c     F2 40 02 FB | 	rdlong	local14, objptr
0c730     20 43 02 F6 | 	mov	local15, local14
0c734     01 42 66 F0 | 	shl	local15, #1
0c738     20 43 02 F1 | 	add	local15, local14
0c73c     02 42 66 F0 | 	shl	local15, #2
0c740     03 00 00 FF 
0c744     00 E4 85 F1 | 	sub	objptr, ##1536
0c748     F2 42 02 F1 | 	add	local15, objptr
0c74c     21 39 62 FC | 	wrlong	local10, local15
0c750     03 00 00 FF 
0c754     00 E4 05 F1 | 	add	objptr, ##1536
0c758     F2 46 02 FB | 	rdlong	local17, objptr
0c75c     23 45 02 F6 | 	mov	local16, local17
0c760     01 44 66 F0 | 	shl	local16, #1
0c764     23 45 02 F1 | 	add	local16, local17
0c768     02 44 66 F0 | 	shl	local16, #2
0c76c     03 00 00 FF 
0c770     00 E4 85 F1 | 	sub	objptr, ##1536
0c774     F2 44 02 F1 | 	add	local16, objptr
0c778     04 44 06 F1 | 	add	local16, #4
0c77c     22 3D 62 FC | 	wrlong	local12, local16
0c780     03 00 00 FF 
0c784     00 E4 05 F1 | 	add	objptr, ##1536
0c788     F2 44 02 FB | 	rdlong	local16, objptr
0c78c     22 47 02 F6 | 	mov	local17, local16
0c790     01 46 66 F0 | 	shl	local17, #1
0c794     22 47 02 F1 | 	add	local17, local16
0c798     02 46 66 F0 | 	shl	local17, #2
0c79c     03 00 00 FF 
0c7a0     00 E4 85 F1 | 	sub	objptr, ##1536
0c7a4     F2 46 02 F1 | 	add	local17, objptr
0c7a8     08 46 06 F1 | 	add	local17, #8
0c7ac     23 3F 62 FC | 	wrlong	local13, local17
0c7b0     03 00 00 FF 
0c7b4     00 E4 05 F1 | 	add	objptr, ##1536
0c7b8     F2 38 02 FB | 	rdlong	local10, objptr
0c7bc     01 38 06 F1 | 	add	local10, #1
0c7c0     F2 38 62 FC | 	wrlong	local10, objptr
0c7c4     4A 00 00 FF 
0c7c8     7C E4 85 F1 | 	sub	objptr, ##38012
0c7cc                 | LR__0998
0c7cc                 | ' return 0
0c7cc     00 FA 05 F6 | 	mov	result1, #0
0c7d0                 | LR__0999
0c7d0     A7 F0 03 F6 | 	mov	ptra, fp
0c7d4     B2 00 A0 FD | 	call	#popregs_
0c7d8                 | _getvar_ret
0c7d8     2D 00 64 FD | 	ret
0c7dc                 | 
0c7dc                 | ' 
0c7dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c7dc                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0c7dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c7dc                 | ' 
0c7dc                 | ' 
0c7dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c7dc                 | ' '                                                                                                                                       -
0c7dc                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0c7dc                 | ' '                                                                                                                                       -
0c7dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c7dc                 | ' 
0c7dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c7dc                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0c7dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0c7dc                 | ' 
0c7dc                 | ' function execute_line (astart=0 as integer) as integer
0c7dc                 | _execute_line
0c7dc     04 4A 05 F6 | 	mov	COUNT_, #4
0c7e0     A8 00 A0 FD | 	call	#pushregs_
0c7e4     50 00 00 FF 
0c7e8     BC E4 05 F1 | 	add	objptr, ##41148
0c7ec     F2 00 68 FC | 	wrlong	#0, objptr
0c7f0                 | ' 
0c7f0                 | ' runptr2=0
0c7f0                 | ' for lineptr_e=astart to lineptr-1
0c7f0     06 00 00 FF 
0c7f4     3C E4 85 F1 | 	sub	objptr, ##3132
0c7f8     F2 12 62 FC | 	wrlong	arg01, objptr
0c7fc     04 E4 85 F1 | 	sub	objptr, #4
0c800     F2 26 02 FB | 	rdlong	local01, objptr
0c804     4A 00 00 FF 
0c808     7C E4 85 F1 | 	sub	objptr, ##38012
0c80c                 | LR__1000
0c80c     4A 00 00 FF 
0c810     80 E4 05 F1 | 	add	objptr, ##38016
0c814     F2 FA 01 FB | 	rdlong	result1, objptr
0c818     4A 00 00 FF 
0c81c     80 E4 85 F1 | 	sub	objptr, ##38016
0c820     13 FB 51 F2 | 	cmps	result1, local01 wc
0c824     98 00 90 3D |  if_ae	jmp	#LR__1001
0c828     4A 00 00 FF 
0c82c     80 E4 05 F1 | 	add	objptr, ##38016
0c830     F2 FA 01 FB | 	rdlong	result1, objptr
0c834     FD 28 02 F6 | 	mov	local02, result1
0c838     01 28 66 F0 | 	shl	local02, #1
0c83c     FD 28 02 F1 | 	add	local02, result1
0c840     02 28 66 F0 | 	shl	local02, #2
0c844     03 00 00 FF 
0c848     04 E4 85 F1 | 	sub	objptr, ##1540
0c84c     F2 28 02 F1 | 	add	local02, objptr
0c850     08 28 06 F1 | 	add	local02, #8
0c854     14 29 02 FB | 	rdlong	local02, local02
0c858     14 29 E2 F8 | 	getbyte	local02, local02, #0
0c85c     02 28 66 F0 | 	shl	local02, #2
0c860     04 00 00 FF 
0c864     1C E4 85 F1 | 	sub	objptr, ##2076
0c868     F2 28 02 F1 | 	add	local02, objptr
0c86c     14 29 02 FB | 	rdlong	local02, local02
0c870     14 2B 02 F6 | 	mov	local03, local02
0c874     13 28 46 F7 | 	zerox	local02, #19
0c878     14 2A 46 F0 | 	shr	local03, #20
0c87c     02 2A 66 F0 | 	shl	local03, #2
0c880     ED 2A 02 F1 | 	add	local03, __methods__
0c884     15 2B 02 FB | 	rdlong	local03, local03
0c888     43 00 00 FF 
0c88c     60 E4 85 F1 | 	sub	objptr, ##34400
0c890     F2 2C 02 F6 | 	mov	local04, objptr
0c894     14 E5 01 F6 | 	mov	objptr, local02
0c898     2D 2A 62 FD | 	call	local03
0c89c     16 E5 01 F6 | 	mov	objptr, local04
0c8a0     4A 00 00 FF 
0c8a4     80 E4 05 F1 | 	add	objptr, ##38016
0c8a8     F2 2C 02 FB | 	rdlong	local04, objptr
0c8ac     01 2C 06 F1 | 	add	local04, #1
0c8b0     F2 2C 62 FC | 	wrlong	local04, objptr
0c8b4     4A 00 00 FF 
0c8b8     80 E4 85 F1 | 	sub	objptr, ##38016
0c8bc     4C FF 9F FD | 	jmp	#LR__1000
0c8c0                 | LR__1001
0c8c0                 | ' return runptr2
0c8c0     50 00 00 FF 
0c8c4     BC E4 05 F1 | 	add	objptr, ##41148
0c8c8     F2 FA 01 FB | 	rdlong	result1, objptr
0c8cc     50 00 00 FF 
0c8d0     BC E4 85 F1 | 	sub	objptr, ##41148
0c8d4     A7 F0 03 F6 | 	mov	ptra, fp
0c8d8     B2 00 A0 FD | 	call	#popregs_
0c8dc                 | _execute_line_ret
0c8dc     2D 00 64 FD | 	ret
0c8e0                 | 
0c8e0                 | ' 
0c8e0                 | ' 
0c8e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c8e0                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0c8e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c8e0                 | ' 
0c8e0                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0c8e0                 | ' 
0c8e0                 | ' function pop() as expr_result
0c8e0                 | _pop
0c8e0                 | ' if stackpointer=0 then
0c8e0     43 00 00 FF 
0c8e4     58 E4 05 F1 | 	add	objptr, ##34392
0c8e8     F2 FA 09 FB | 	rdlong	result1, objptr wz
0c8ec     43 00 00 FF 
0c8f0     58 E4 85 F1 | 	sub	objptr, ##34392
0c8f4     FF 04 06 A6 |  if_e	mov	_var03, #255
0c8f8     18 00 06 A6 |  if_e	mov	_var01, #24
0c8fc     68 00 90 AD |  if_e	jmp	#LR__1010
0c900     43 00 00 FF 
0c904     58 E4 05 F1 | 	add	objptr, ##34392
0c908     F2 FA 01 FB | 	rdlong	result1, objptr
0c90c     01 FA 85 F1 | 	sub	result1, #1
0c910     F2 FA 61 FC | 	wrlong	result1, objptr
0c914     FD FE 01 F6 | 	mov	result3, result1
0c918     01 FE 65 F0 | 	shl	result3, #1
0c91c     FD FE 01 F1 | 	add	result3, result1
0c920     02 FE 65 F0 | 	shl	result3, #2
0c924     0C 00 00 FF 
0c928     0C E4 85 F1 | 	sub	objptr, ##6156
0c92c     F2 FE 01 F1 | 	add	result3, objptr
0c930     FF 00 02 FB | 	rdlong	_var01, result3
0c934     04 FE 05 F1 | 	add	result3, #4
0c938     FF FE 01 FB | 	rdlong	result3, result3
0c93c     FD FC 01 F6 | 	mov	result2, result1
0c940     01 FC 65 F0 | 	shl	result2, #1
0c944     FD FC 01 F1 | 	add	result2, result1
0c948     02 FC 65 F0 | 	shl	result2, #2
0c94c     F2 FC 01 F1 | 	add	result2, objptr
0c950     08 FC 05 F1 | 	add	result2, #8
0c954     FE FA 01 FB | 	rdlong	result1, result2
0c958     FF 02 02 F6 | 	mov	_var02, result3
0c95c     FD 04 02 F6 | 	mov	_var03, result1
0c960     37 00 00 FF 
0c964     4C E4 85 F1 | 	sub	objptr, ##28236
0c968                 | LR__1010
0c968                 | ' return t1
0c968     01 FD 01 F6 | 	mov	result2, _var02
0c96c     02 FF 01 F6 | 	mov	result3, _var03
0c970     00 FB 01 F6 | 	mov	result1, _var01
0c974                 | _pop_ret
0c974     2D 00 64 FD | 	ret
0c978                 | 
0c978                 | ' 
0c978                 | ' sub push(t1 as expr_result )
0c978                 | _push
0c978                 | ' if stackpointer<maxstack then 
0c978     43 00 00 FF 
0c97c     58 E4 05 F1 | 	add	objptr, ##34392
0c980     F2 00 02 FB | 	rdlong	_var01, objptr
0c984     43 00 00 FF 
0c988     58 E4 85 F1 | 	sub	objptr, ##34392
0c98c     01 00 00 FF 
0c990     00 00 56 F2 | 	cmps	_var01, ##512 wc
0c994     BC 00 90 3D |  if_ae	jmp	#LR__1020
0c998     09 01 02 FB | 	rdlong	_var01, arg01
0c99c     04 12 06 F1 | 	add	arg01, #4
0c9a0     09 03 02 FB | 	rdlong	_var02, arg01
0c9a4     04 12 06 F1 | 	add	arg01, #4
0c9a8     09 13 02 FB | 	rdlong	arg01, arg01
0c9ac     43 00 00 FF 
0c9b0     58 E4 05 F1 | 	add	objptr, ##34392
0c9b4     F2 04 02 FB | 	rdlong	_var03, objptr
0c9b8     02 07 02 F6 | 	mov	_var04, _var03
0c9bc     01 06 66 F0 | 	shl	_var04, #1
0c9c0     02 07 02 F1 | 	add	_var04, _var03
0c9c4     02 06 66 F0 | 	shl	_var04, #2
0c9c8     0C 00 00 FF 
0c9cc     0C E4 85 F1 | 	sub	objptr, ##6156
0c9d0     F2 06 02 F1 | 	add	_var04, objptr
0c9d4     03 01 62 FC | 	wrlong	_var01, _var04
0c9d8     0C 00 00 FF 
0c9dc     0C E4 05 F1 | 	add	objptr, ##6156
0c9e0     F2 06 02 FB | 	rdlong	_var04, objptr
0c9e4     03 05 02 F6 | 	mov	_var03, _var04
0c9e8     01 04 66 F0 | 	shl	_var03, #1
0c9ec     03 05 02 F1 | 	add	_var03, _var04
0c9f0     02 04 66 F0 | 	shl	_var03, #2
0c9f4     0C 00 00 FF 
0c9f8     0C E4 85 F1 | 	sub	objptr, ##6156
0c9fc     F2 04 02 F1 | 	add	_var03, objptr
0ca00     04 04 06 F1 | 	add	_var03, #4
0ca04     02 03 62 FC | 	wrlong	_var02, _var03
0ca08     0C 00 00 FF 
0ca0c     0C E4 05 F1 | 	add	objptr, ##6156
0ca10     F2 06 02 FB | 	rdlong	_var04, objptr
0ca14     03 05 02 F6 | 	mov	_var03, _var04
0ca18     01 04 66 F0 | 	shl	_var03, #1
0ca1c     03 05 02 F1 | 	add	_var03, _var04
0ca20     02 04 66 F0 | 	shl	_var03, #2
0ca24     0C 00 00 FF 
0ca28     0C E4 85 F1 | 	sub	objptr, ##6156
0ca2c     F2 04 02 F1 | 	add	_var03, objptr
0ca30     08 04 06 F1 | 	add	_var03, #8
0ca34     02 13 62 FC | 	wrlong	arg01, _var03
0ca38     0C 00 00 FF 
0ca3c     0C E4 05 F1 | 	add	objptr, ##6156
0ca40     F2 00 02 FB | 	rdlong	_var01, objptr
0ca44     01 00 06 F1 | 	add	_var01, #1
0ca48     F2 00 62 FC | 	wrlong	_var01, objptr
0ca4c     43 00 00 FF 
0ca50     58 E4 85 F1 | 	sub	objptr, ##34392
0ca54                 | LR__1020
0ca54                 | _push_ret
0ca54     2D 00 64 FD | 	ret
0ca58                 | 
0ca58                 | ' 
0ca58                 | ' ' -------------------------------- Runtime converting functions
0ca58                 | ' 
0ca58                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0ca58                 | ' 
0ca58                 | ' function  convertstring(psaddr as ulong) as string
0ca58                 | _convertstring
0ca58     04 4A 05 F6 | 	mov	COUNT_, #4
0ca5c     A8 00 A0 FD | 	call	#pushregs_
0ca60     09 27 02 F6 | 	mov	local01, arg01
0ca64     58 2E B1 FD | 	call	#_pslpeek
0ca68     FD 28 02 F6 | 	mov	local02, result1
0ca6c     98 01 00 FF 
0ca70     BC 2B 06 F6 | 	mov	local03, ##@LR__5604
0ca74                 | ' l=pslpeek(psaddr)
0ca74                 | ' s="" 
0ca74                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ca74     01 2C 06 F6 | 	mov	local04, #1
0ca78     01 28 06 F1 | 	add	local02, #1
0ca7c                 | LR__1030
0ca7c     14 2D 52 F2 | 	cmps	local04, local02 wc
0ca80     30 00 90 3D |  if_ae	jmp	#LR__1031
0ca84     13 13 02 F6 | 	mov	arg01, local01
0ca88     03 12 06 F1 | 	add	arg01, #3
0ca8c     16 13 02 F1 | 	add	arg01, local04
0ca90     D4 2D B1 FD | 	call	#_pspeek
0ca94     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ca98     38 87 B1 FD | 	call	#__system__Chr_S
0ca9c     FD 14 02 F6 | 	mov	arg02, result1
0caa0     15 13 02 F6 | 	mov	arg01, local03
0caa4     48 65 B1 FD | 	call	#__system___string_concat
0caa8     FD 2A 02 F6 | 	mov	local03, result1
0caac     01 2C 06 F1 | 	add	local04, #1
0cab0     C8 FF 9F FD | 	jmp	#LR__1030
0cab4                 | LR__1031
0cab4                 | ' return s
0cab4     15 FB 01 F6 | 	mov	result1, local03
0cab8     A7 F0 03 F6 | 	mov	ptra, fp
0cabc     B2 00 A0 FD | 	call	#popregs_
0cac0                 | _convertstring_ret
0cac0     2D 00 64 FD | 	ret
0cac4                 | 
0cac4                 | ' 
0cac4                 | ' ' converts a variable to an integer
0cac4                 | ' 
0cac4                 | ' function converttoint (t1 as expr_result) as integer 
0cac4                 | _converttoint
0cac4     02 4A 05 F6 | 	mov	COUNT_, #2
0cac8     A8 00 A0 FD | 	call	#pushregs_
0cacc     09 27 02 F6 | 	mov	local01, arg01
0cad0                 | ' 
0cad0                 | ' select case t1.result_type
0cad0     08 26 06 F1 | 	add	local01, #8
0cad4     13 29 02 FB | 	rdlong	local02, local01
0cad8     08 26 86 F1 | 	sub	local01, #8
0cadc     1C 28 0E F2 | 	cmp	local02, #28 wz
0cae0     2C 00 90 AD |  if_e	jmp	#LR__1040
0cae4     1D 28 0E F2 | 	cmp	local02, #29 wz
0cae8     2C 00 90 AD |  if_e	jmp	#LR__1041
0caec     1E 28 0E F2 | 	cmp	local02, #30 wz
0caf0     2C 00 90 AD |  if_e	jmp	#LR__1042
0caf4     1F 28 0E F2 | 	cmp	local02, #31 wz
0caf8     34 00 90 AD |  if_e	jmp	#LR__1043
0cafc     2B 28 0E F2 | 	cmp	local02, #43 wz
0cb00     44 00 90 AD |  if_e	jmp	#LR__1044
0cb04     2C 28 0E F2 | 	cmp	local02, #44 wz
0cb08     5C 00 90 AD |  if_e	jmp	#LR__1045
0cb0c     60 00 90 FD | 	jmp	#LR__1046
0cb10                 | LR__1040
0cb10     13 FB 01 FB | 	rdlong	result1, local01
0cb14     5C 00 90 FD | 	jmp	#LR__1047
0cb18                 | LR__1041
0cb18     13 FB 01 FB | 	rdlong	result1, local01
0cb1c     54 00 90 FD | 	jmp	#LR__1047
0cb20                 | LR__1042
0cb20     13 13 02 FB | 	rdlong	arg01, local01
0cb24     01 14 06 F6 | 	mov	arg02, #1
0cb28     A8 97 B1 FD | 	call	#__system___float_tointeger
0cb2c     44 00 90 FD | 	jmp	#LR__1047
0cb30                 | LR__1043
0cb30     13 13 02 FB | 	rdlong	arg01, local01
0cb34     E0 9A B1 FD | 	call	#__system____builtin_atof
0cb38     FD 12 02 F6 | 	mov	arg01, result1
0cb3c     01 14 06 F6 | 	mov	arg02, #1
0cb40     90 97 B1 FD | 	call	#__system___float_tointeger
0cb44     2C 00 90 FD | 	jmp	#LR__1047
0cb48                 | LR__1044
0cb48     13 13 02 FB | 	rdlong	arg01, local01
0cb4c     08 FF BF FD | 	call	#_convertstring
0cb50     FD 12 02 F6 | 	mov	arg01, result1
0cb54     C0 9A B1 FD | 	call	#__system____builtin_atof
0cb58     FD 12 02 F6 | 	mov	arg01, result1
0cb5c     01 14 06 F6 | 	mov	arg02, #1
0cb60     70 97 B1 FD | 	call	#__system___float_tointeger
0cb64     0C 00 90 FD | 	jmp	#LR__1047
0cb68                 | LR__1045
0cb68     13 FB 01 FB | 	rdlong	result1, local01
0cb6c     04 00 90 FD | 	jmp	#LR__1047
0cb70                 | LR__1046
0cb70     00 FA 05 F6 | 	mov	result1, #0
0cb74                 | LR__1047
0cb74     A7 F0 03 F6 | 	mov	ptra, fp
0cb78     B2 00 A0 FD | 	call	#popregs_
0cb7c                 | _converttoint_ret
0cb7c     2D 00 64 FD | 	ret
0cb80                 | 
0cb80                 | ' 
0cb80                 | ' ' converts a variable to float
0cb80                 | ' 
0cb80                 | ' function converttofloat (t1 as expr_result) as single
0cb80                 | _converttofloat
0cb80     03 4A 05 F6 | 	mov	COUNT_, #3
0cb84     A8 00 A0 FD | 	call	#pushregs_
0cb88     09 27 02 F6 | 	mov	local01, arg01
0cb8c                 | ' 
0cb8c                 | ' select case t1.result_type
0cb8c     08 26 06 F1 | 	add	local01, #8
0cb90     13 29 02 FB | 	rdlong	local02, local01
0cb94     08 26 86 F1 | 	sub	local01, #8
0cb98     1C 28 0E F2 | 	cmp	local02, #28 wz
0cb9c     24 00 90 AD |  if_e	jmp	#LR__1050
0cba0     1D 28 0E F2 | 	cmp	local02, #29 wz
0cba4     38 00 90 AD |  if_e	jmp	#LR__1051
0cba8     1E 28 0E F2 | 	cmp	local02, #30 wz
0cbac     3C 00 90 AD |  if_e	jmp	#LR__1052
0cbb0     1F 28 0E F2 | 	cmp	local02, #31 wz
0cbb4     3C 00 90 AD |  if_e	jmp	#LR__1053
0cbb8     2B 28 0E F2 | 	cmp	local02, #43 wz
0cbbc     40 00 90 AD |  if_e	jmp	#LR__1054
0cbc0     50 00 90 FD | 	jmp	#LR__1055
0cbc4                 | LR__1050
0cbc4     13 13 02 FB | 	rdlong	arg01, local01
0cbc8     09 13 52 F6 | 	abs	arg01, arg01 wc
0cbcc     1F 2A C6 C9 |  if_b	decod	local03, #31
0cbd0     00 2A 06 36 |  if_ae	mov	local03, #0
0cbd4     30 8E B1 FD | 	call	#__system___float_fromuns
0cbd8     15 FB 61 F5 | 	xor	result1, local03
0cbdc     38 00 90 FD | 	jmp	#LR__1056
0cbe0                 | LR__1051
0cbe0     13 13 02 FB | 	rdlong	arg01, local01
0cbe4     20 8E B1 FD | 	call	#__system___float_fromuns
0cbe8     2C 00 90 FD | 	jmp	#LR__1056
0cbec                 | LR__1052
0cbec     13 FB 01 FB | 	rdlong	result1, local01
0cbf0     24 00 90 FD | 	jmp	#LR__1056
0cbf4                 | LR__1053
0cbf4     13 13 02 FB | 	rdlong	arg01, local01
0cbf8     1C 9A B1 FD | 	call	#__system____builtin_atof
0cbfc     18 00 90 FD | 	jmp	#LR__1056
0cc00                 | LR__1054
0cc00     13 13 02 FB | 	rdlong	arg01, local01
0cc04     50 FE BF FD | 	call	#_convertstring
0cc08     FD 12 02 F6 | 	mov	arg01, result1
0cc0c     08 9A B1 FD | 	call	#__system____builtin_atof
0cc10     04 00 90 FD | 	jmp	#LR__1056
0cc14                 | LR__1055
0cc14     00 FA 05 F6 | 	mov	result1, #0
0cc18                 | LR__1056
0cc18     A7 F0 03 F6 | 	mov	ptra, fp
0cc1c     B2 00 A0 FD | 	call	#popregs_
0cc20                 | _converttofloat_ret
0cc20     2D 00 64 FD | 	ret
0cc24                 | 
0cc24                 | ' 
0cc24                 | ' '----------------- End of converting 
0cc24                 | ' 
0cc24                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cc24                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0cc24                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cc24                 | ' 
0cc24                 | ' sub csave_block(address as ulong)
0cc24                 | _csave_block
0cc24     09 01 02 F6 | 	mov	_var01, arg01
0cc28                 | ' 
0cc28                 | ' for i=0 to 63 step 2
0cc28     00 02 06 F6 | 	mov	_var02, #0
0cc2c                 | LR__1060
0cc2c                 | '   do: loop until lpeek(base+64*7)>32768
0cc2c     37 00 00 FF 
0cc30     10 E4 05 F1 | 	add	objptr, ##28176
0cc34     97 0C 48 FB | 	callpa	#(@LR__1062-@LR__1061)>>2,fcache_load_ptr_
0cc38                 | LR__1061
0cc38     F2 12 02 FB | 	rdlong	arg01, objptr
0cc3c     C0 13 06 F1 | 	add	arg01, #448
0cc40     09 FB 01 FB | 	rdlong	result1, arg01
0cc44     40 00 00 FF 
0cc48     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cc4c     E8 FF 9F CD |  if_b	jmp	#LR__1061
0cc50                 | LR__1062
0cc50     00 13 02 F6 | 	mov	arg01, _var01
0cc54     01 05 02 F6 | 	mov	_var03, _var02
0cc58     02 04 66 F0 | 	shl	_var03, #2
0cc5c     02 13 02 F1 | 	add	arg01, _var03
0cc60     09 07 02 FB | 	rdlong	_var04, arg01
0cc64     1B 00 00 FF 
0cc68     08 E4 05 F1 | 	add	objptr, ##13832
0cc6c     F2 06 62 FC | 	wrlong	_var04, objptr
0cc70     52 00 00 FF 
0cc74     18 E4 85 F1 | 	sub	objptr, ##42008
0cc78                 | '   q=lpeek(address+4*i)
0cc78                 | '      for bit=0 to 31
0cc78     00 08 06 F6 | 	mov	_var05, #0
0cc7c     97 84 48 FB | 	callpa	#(@LR__1067-@LR__1063)>>2,fcache_load_ptr_
0cc80                 | LR__1063
0cc80                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0cc80     52 00 00 FF 
0cc84     18 E4 05 F1 | 	add	objptr, ##42008
0cc88     F2 06 02 FB | 	rdlong	_var04, objptr
0cc8c     52 00 00 FF 
0cc90     18 E4 85 F1 | 	sub	objptr, ##42008
0cc94     04 05 C2 F9 | 	decod	_var03, _var05
0cc98     02 07 CA F7 | 	test	_var04, _var03 wz
0cc9c     60 00 90 AD |  if_e	jmp	#LR__1064
0cca0     04 05 02 F6 | 	mov	_var03, _var05
0cca4     02 04 66 F0 | 	shl	_var03, #2
0cca8     4D 00 00 FF 
0ccac     B4 E5 05 F1 | 	add	objptr, ##39860
0ccb0     F2 04 02 F1 | 	add	_var03, objptr
0ccb4     02 FF 48 FC | 	wrbyte	#127, _var03
0ccb8     04 05 02 F6 | 	mov	_var03, _var05
0ccbc     02 04 66 F0 | 	shl	_var03, #2
0ccc0     01 04 06 F1 | 	add	_var03, #1
0ccc4     F2 04 02 F1 | 	add	_var03, objptr
0ccc8     02 01 49 FC | 	wrbyte	#128, _var03
0cccc     04 05 02 F6 | 	mov	_var03, _var05
0ccd0     02 04 66 F0 | 	shl	_var03, #2
0ccd4     02 04 06 F1 | 	add	_var03, #2
0ccd8     F2 04 02 F1 | 	add	_var03, objptr
0ccdc     02 FF 48 FC | 	wrbyte	#127, _var03
0cce0     04 05 02 F6 | 	mov	_var03, _var05
0cce4     02 04 66 F0 | 	shl	_var03, #2
0cce8     03 04 06 F1 | 	add	_var03, #3
0ccec     F2 04 02 F1 | 	add	_var03, objptr
0ccf0     02 01 49 FC | 	wrbyte	#128, _var03
0ccf4     4D 00 00 FF 
0ccf8     B4 E5 85 F1 | 	sub	objptr, ##39860
0ccfc     5C 00 90 FD | 	jmp	#LR__1065
0cd00                 | LR__1064
0cd00     04 05 02 F6 | 	mov	_var03, _var05
0cd04     02 04 66 F0 | 	shl	_var03, #2
0cd08     4D 00 00 FF 
0cd0c     B4 E5 05 F1 | 	add	objptr, ##39860
0cd10     F2 04 02 F1 | 	add	_var03, objptr
0cd14     02 01 49 FC | 	wrbyte	#128, _var03
0cd18     04 05 02 F6 | 	mov	_var03, _var05
0cd1c     02 04 66 F0 | 	shl	_var03, #2
0cd20     01 04 06 F1 | 	add	_var03, #1
0cd24     F2 04 02 F1 | 	add	_var03, objptr
0cd28     02 01 49 FC | 	wrbyte	#128, _var03
0cd2c     04 05 02 F6 | 	mov	_var03, _var05
0cd30     02 04 66 F0 | 	shl	_var03, #2
0cd34     02 04 06 F1 | 	add	_var03, #2
0cd38     F2 04 02 F1 | 	add	_var03, objptr
0cd3c     02 FF 48 FC | 	wrbyte	#127, _var03
0cd40     04 05 02 F6 | 	mov	_var03, _var05
0cd44     02 04 66 F0 | 	shl	_var03, #2
0cd48     03 04 06 F1 | 	add	_var03, #3
0cd4c     F2 04 02 F1 | 	add	_var03, objptr
0cd50     02 FF 48 FC | 	wrbyte	#127, _var03
0cd54     4D 00 00 FF 
0cd58     B4 E5 85 F1 | 	sub	objptr, ##39860
0cd5c                 | LR__1065
0cd5c     01 08 06 F1 | 	add	_var05, #1
0cd60     20 08 56 F2 | 	cmps	_var05, #32 wc
0cd64     18 FF 9F CD |  if_b	jmp	#LR__1063
0cd68                 | '   do: loop until lpeek(base+64*7)<32768
0cd68     37 00 00 FF 
0cd6c     10 E4 05 F1 | 	add	objptr, ##28176
0cd70                 | LR__1066
0cd70     F2 12 02 FB | 	rdlong	arg01, objptr
0cd74     C0 13 06 F1 | 	add	arg01, #448
0cd78     09 FB 01 FB | 	rdlong	result1, arg01
0cd7c     40 00 00 FF 
0cd80     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0cd84     E8 FF 9F 3D |  if_ae	jmp	#LR__1066
0cd88                 | LR__1067
0cd88     00 13 02 F6 | 	mov	arg01, _var01
0cd8c     04 12 06 F1 | 	add	arg01, #4
0cd90     01 05 02 F6 | 	mov	_var03, _var02
0cd94     02 04 66 F0 | 	shl	_var03, #2
0cd98     02 13 02 F1 | 	add	arg01, _var03
0cd9c     09 07 02 FB | 	rdlong	_var04, arg01
0cda0     1B 00 00 FF 
0cda4     08 E4 05 F1 | 	add	objptr, ##13832
0cda8     F2 06 62 FC | 	wrlong	_var04, objptr
0cdac     52 00 00 FF 
0cdb0     18 E4 85 F1 | 	sub	objptr, ##42008
0cdb4                 | '   q=lpeek(address+4+4*i)
0cdb4                 | '      for bit=0 to 31
0cdb4     00 08 06 F6 | 	mov	_var05, #0
0cdb8     97 94 48 FB | 	callpa	#(@LR__1071-@LR__1068)>>2,fcache_load_ptr_
0cdbc                 | LR__1068
0cdbc                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0cdbc     52 00 00 FF 
0cdc0     18 E4 05 F1 | 	add	objptr, ##42008
0cdc4     F2 06 02 FB | 	rdlong	_var04, objptr
0cdc8     52 00 00 FF 
0cdcc     18 E4 85 F1 | 	sub	objptr, ##42008
0cdd0     04 05 C2 F9 | 	decod	_var03, _var05
0cdd4     02 07 CA F7 | 	test	_var04, _var03 wz
0cdd8     80 00 90 AD |  if_e	jmp	#LR__1069
0cddc     04 0B 02 F6 | 	mov	_var06, _var05
0cde0     02 0A 66 F0 | 	shl	_var06, #2
0cde4     80 04 06 F6 | 	mov	_var03, #128
0cde8     05 05 02 F1 | 	add	_var03, _var06
0cdec     4D 00 00 FF 
0cdf0     B4 E5 05 F1 | 	add	objptr, ##39860
0cdf4     F2 04 02 F1 | 	add	_var03, objptr
0cdf8     02 FF 48 FC | 	wrbyte	#127, _var03
0cdfc     04 0B 02 F6 | 	mov	_var06, _var05
0ce00     02 0A 66 F0 | 	shl	_var06, #2
0ce04     80 04 06 F6 | 	mov	_var03, #128
0ce08     05 05 02 F1 | 	add	_var03, _var06
0ce0c     01 04 06 F1 | 	add	_var03, #1
0ce10     F2 04 02 F1 | 	add	_var03, objptr
0ce14     02 01 49 FC | 	wrbyte	#128, _var03
0ce18     04 0B 02 F6 | 	mov	_var06, _var05
0ce1c     02 0A 66 F0 | 	shl	_var06, #2
0ce20     80 04 06 F6 | 	mov	_var03, #128
0ce24     05 05 02 F1 | 	add	_var03, _var06
0ce28     02 04 06 F1 | 	add	_var03, #2
0ce2c     F2 04 02 F1 | 	add	_var03, objptr
0ce30     02 FF 48 FC | 	wrbyte	#127, _var03
0ce34     04 0B 02 F6 | 	mov	_var06, _var05
0ce38     02 0A 66 F0 | 	shl	_var06, #2
0ce3c     80 04 06 F6 | 	mov	_var03, #128
0ce40     05 05 02 F1 | 	add	_var03, _var06
0ce44     03 04 06 F1 | 	add	_var03, #3
0ce48     F2 04 02 F1 | 	add	_var03, objptr
0ce4c     02 01 49 FC | 	wrbyte	#128, _var03
0ce50     4D 00 00 FF 
0ce54     B4 E5 85 F1 | 	sub	objptr, ##39860
0ce58     7C 00 90 FD | 	jmp	#LR__1070
0ce5c                 | LR__1069
0ce5c     04 0B 02 F6 | 	mov	_var06, _var05
0ce60     02 0A 66 F0 | 	shl	_var06, #2
0ce64     80 04 06 F6 | 	mov	_var03, #128
0ce68     05 05 02 F1 | 	add	_var03, _var06
0ce6c     4D 00 00 FF 
0ce70     B4 E5 05 F1 | 	add	objptr, ##39860
0ce74     F2 04 02 F1 | 	add	_var03, objptr
0ce78     02 01 49 FC | 	wrbyte	#128, _var03
0ce7c     04 0B 02 F6 | 	mov	_var06, _var05
0ce80     02 0A 66 F0 | 	shl	_var06, #2
0ce84     80 04 06 F6 | 	mov	_var03, #128
0ce88     05 05 02 F1 | 	add	_var03, _var06
0ce8c     01 04 06 F1 | 	add	_var03, #1
0ce90     F2 04 02 F1 | 	add	_var03, objptr
0ce94     02 01 49 FC | 	wrbyte	#128, _var03
0ce98     04 0B 02 F6 | 	mov	_var06, _var05
0ce9c     02 0A 66 F0 | 	shl	_var06, #2
0cea0     80 04 06 F6 | 	mov	_var03, #128
0cea4     05 05 02 F1 | 	add	_var03, _var06
0cea8     02 04 06 F1 | 	add	_var03, #2
0ceac     F2 04 02 F1 | 	add	_var03, objptr
0ceb0     02 FF 48 FC | 	wrbyte	#127, _var03
0ceb4     04 0B 02 F6 | 	mov	_var06, _var05
0ceb8     02 0A 66 F0 | 	shl	_var06, #2
0cebc     80 04 06 F6 | 	mov	_var03, #128
0cec0     05 05 02 F1 | 	add	_var03, _var06
0cec4     03 04 06 F1 | 	add	_var03, #3
0cec8     F2 04 02 F1 | 	add	_var03, objptr
0cecc     02 FF 48 FC | 	wrbyte	#127, _var03
0ced0     4D 00 00 FF 
0ced4     B4 E5 85 F1 | 	sub	objptr, ##39860
0ced8                 | LR__1070
0ced8     01 08 06 F1 | 	add	_var05, #1
0cedc     20 08 56 F2 | 	cmps	_var05, #32 wc
0cee0     D8 FE 9F CD |  if_b	jmp	#LR__1068
0cee4                 | LR__1071
0cee4     02 02 06 F1 | 	add	_var02, #2
0cee8     40 02 56 F2 | 	cmps	_var02, #64 wc
0ceec     3C FD 9F CD |  if_b	jmp	#LR__1060
0cef0                 | ' do: loop until lpeek(base+64*7)>32768
0cef0     37 00 00 FF 
0cef4     10 E4 05 F1 | 	add	objptr, ##28176
0cef8     97 84 48 FB | 	callpa	#(@LR__1080-@LR__1072)>>2,fcache_load_ptr_
0cefc                 | LR__1072
0cefc     F2 12 02 FB | 	rdlong	arg01, objptr
0cf00     C0 13 06 F1 | 	add	arg01, #448
0cf04     09 FB 01 FB | 	rdlong	result1, arg01
0cf08     40 00 00 FF 
0cf0c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0cf10     E8 FF 9F CD |  if_b	jmp	#LR__1072
0cf14     37 00 00 FF 
0cf18     10 E4 85 F1 | 	sub	objptr, ##28176
0cf1c                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0cf1c     00 02 06 F6 | 	mov	_var02, #0
0cf20                 | LR__1073
0cf20     01 07 52 F6 | 	abs	_var04, _var02 wc
0cf24     07 06 06 F5 | 	and	_var04, #7
0cf28     03 07 82 F6 | 	negc	_var04, _var04
0cf2c     04 06 56 F2 | 	cmps	_var04, #4 wc
0cf30     20 00 90 3D |  if_ae	jmp	#LR__1074
0cf34     01 0B 02 F6 | 	mov	_var06, _var02
0cf38     4D 00 00 FF 
0cf3c     B4 E5 05 F1 | 	add	objptr, ##39860
0cf40     F2 0A 02 F1 | 	add	_var06, objptr
0cf44     05 FF 48 FC | 	wrbyte	#127, _var06
0cf48     4D 00 00 FF 
0cf4c     B4 E5 85 F1 | 	sub	objptr, ##39860
0cf50     1C 00 90 FD | 	jmp	#LR__1075
0cf54                 | LR__1074
0cf54     01 0B 02 F6 | 	mov	_var06, _var02
0cf58     4D 00 00 FF 
0cf5c     B4 E5 05 F1 | 	add	objptr, ##39860
0cf60     F2 0A 02 F1 | 	add	_var06, objptr
0cf64     05 01 49 FC | 	wrbyte	#128, _var06
0cf68     4D 00 00 FF 
0cf6c     B4 E5 85 F1 | 	sub	objptr, ##39860
0cf70                 | LR__1075
0cf70     01 02 06 F1 | 	add	_var02, #1
0cf74     80 02 56 F2 | 	cmps	_var02, #128 wc
0cf78     A4 FF 9F CD |  if_b	jmp	#LR__1073
0cf7c                 | ' 
0cf7c                 | ' do: loop until lpeek(base+64*7)<32768
0cf7c     37 00 00 FF 
0cf80     10 E4 05 F1 | 	add	objptr, ##28176
0cf84                 | LR__1076
0cf84     F2 12 02 FB | 	rdlong	arg01, objptr
0cf88     C0 13 06 F1 | 	add	arg01, #448
0cf8c     09 FB 01 FB | 	rdlong	result1, arg01
0cf90     40 00 00 FF 
0cf94     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0cf98     E8 FF 9F 3D |  if_ae	jmp	#LR__1076
0cf9c     37 00 00 FF 
0cfa0     10 E4 85 F1 | 	sub	objptr, ##28176
0cfa4                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0cfa4     80 02 06 F6 | 	mov	_var02, #128
0cfa8                 | LR__1077
0cfa8     01 07 52 F6 | 	abs	_var04, _var02 wc
0cfac     07 06 06 F5 | 	and	_var04, #7
0cfb0     03 07 82 F6 | 	negc	_var04, _var04
0cfb4     04 06 56 F2 | 	cmps	_var04, #4 wc
0cfb8     20 00 90 3D |  if_ae	jmp	#LR__1078
0cfbc     01 0B 02 F6 | 	mov	_var06, _var02
0cfc0     4D 00 00 FF 
0cfc4     B4 E5 05 F1 | 	add	objptr, ##39860
0cfc8     F2 0A 02 F1 | 	add	_var06, objptr
0cfcc     05 FF 48 FC | 	wrbyte	#127, _var06
0cfd0     4D 00 00 FF 
0cfd4     B4 E5 85 F1 | 	sub	objptr, ##39860
0cfd8     1C 00 90 FD | 	jmp	#LR__1079
0cfdc                 | LR__1078
0cfdc     01 0B 02 F6 | 	mov	_var06, _var02
0cfe0     4D 00 00 FF 
0cfe4     B4 E5 05 F1 | 	add	objptr, ##39860
0cfe8     F2 0A 02 F1 | 	add	_var06, objptr
0cfec     05 01 49 FC | 	wrbyte	#128, _var06
0cff0     4D 00 00 FF 
0cff4     B4 E5 85 F1 | 	sub	objptr, ##39860
0cff8                 | LR__1079
0cff8     01 02 06 F1 | 	add	_var02, #1
0cffc     00 03 16 F2 | 	cmp	_var02, #256 wc
0d000     A4 FF 9F CD |  if_b	jmp	#LR__1077
0d004                 | LR__1080
0d004                 | _csave_block_ret
0d004     2D 00 64 FD | 	ret
0d008                 | 
0d008                 | ' 
0d008                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0d008                 | _csave_addtoblock
0d008     04 4A 05 F6 | 	mov	COUNT_, #4
0d00c     A8 00 A0 FD | 	call	#pushregs_
0d010     09 27 02 F6 | 	mov	local01, arg01
0d014                 | ' 
0d014                 | ' if force=0 then
0d014     07 14 4E F7 | 	zerox	arg02, #7 wz
0d018     78 00 90 5D |  if_ne	jmp	#LR__1090
0d01c     50 00 00 FF 
0d020     B4 E4 05 F1 | 	add	objptr, ##41140
0d024     F2 14 02 FB | 	rdlong	arg02, objptr
0d028     02 00 00 FF 
0d02c     00 E4 85 F1 | 	sub	objptr, ##1024
0d030     F2 14 02 F1 | 	add	arg02, objptr
0d034     0A 27 42 FC | 	wrbyte	local01, arg02
0d038     02 00 00 FF 
0d03c     00 E4 05 F1 | 	add	objptr, ##1024
0d040     F2 26 02 FB | 	rdlong	local01, objptr
0d044     01 26 06 F1 | 	add	local01, #1
0d048     F2 26 62 FC | 	wrlong	local01, objptr
0d04c                 | '   block(blockptr)=d
0d04c                 | '   blockptr+=1
0d04c                 | '   if blockptr>=255 then
0d04c     50 00 00 FF 
0d050     B4 E4 85 F1 | 	sub	objptr, ##41140
0d054     FF 26 16 F2 | 	cmp	local01, #255 wc
0d058     E4 00 90 CD |  if_b	jmp	#LR__1094
0d05c     4E 00 00 FF 
0d060     B4 E4 05 F1 | 	add	objptr, ##40116
0d064     F2 12 02 F6 | 	mov	arg01, objptr
0d068     4E 00 00 FF 
0d06c     B4 E4 85 F1 | 	sub	objptr, ##40116
0d070     B0 FB BF FD | 	call	#_csave_block
0d074     50 00 00 FF 
0d078     B4 E4 05 F1 | 	add	objptr, ##41140
0d07c     F2 00 68 FC | 	wrlong	#0, objptr
0d080     50 00 00 FF 
0d084     B4 E4 85 F1 | 	sub	objptr, ##41140
0d088     2C 13 06 F6 | 	mov	arg01, #300
0d08c     F8 61 B1 FD | 	call	#__system___waitms
0d090     AC 00 90 FD | 	jmp	#LR__1094
0d094                 | LR__1090
0d094     50 00 00 FF 
0d098     B4 E4 05 F1 | 	add	objptr, ##41140
0d09c     F2 28 02 FB | 	rdlong	local02, objptr
0d0a0     02 00 00 FF 
0d0a4     00 E4 85 F1 | 	sub	objptr, ##1024
0d0a8     F2 28 02 F1 | 	add	local02, objptr
0d0ac     14 27 42 FC | 	wrbyte	local01, local02
0d0b0                 | '   block(blockptr)=d
0d0b0                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0d0b0     02 00 00 FF 
0d0b4     00 E4 05 F1 | 	add	objptr, ##1024
0d0b8     F2 2A 02 FB | 	rdlong	local03, objptr
0d0bc     50 00 00 FF 
0d0c0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d0c4     FF 2A 16 F2 | 	cmp	local03, #255 wc
0d0c8     40 00 90 3D |  if_ae	jmp	#LR__1093
0d0cc     50 00 00 FF 
0d0d0     B4 E4 05 F1 | 	add	objptr, ##41140
0d0d4     F2 2C 02 FB | 	rdlong	local04, objptr
0d0d8     50 00 00 FF 
0d0dc     B4 E4 85 F1 | 	sub	objptr, ##41140
0d0e0                 | LR__1091
0d0e0     00 2D 56 F2 | 	cmps	local04, #256 wc
0d0e4     24 00 90 3D |  if_ae	jmp	#LR__1092
0d0e8     16 29 02 F6 | 	mov	local02, local04
0d0ec     4E 00 00 FF 
0d0f0     B4 E4 05 F1 | 	add	objptr, ##40116
0d0f4     F2 28 02 F1 | 	add	local02, objptr
0d0f8     14 01 48 FC | 	wrbyte	#0, local02
0d0fc     01 2C 06 F1 | 	add	local04, #1
0d100     4E 00 00 FF 
0d104     B4 E4 85 F1 | 	sub	objptr, ##40116
0d108     D4 FF 9F FD | 	jmp	#LR__1091
0d10c                 | LR__1092
0d10c                 | LR__1093
0d10c     4E 00 00 FF 
0d110     B4 E4 05 F1 | 	add	objptr, ##40116
0d114     F2 12 02 F6 | 	mov	arg01, objptr
0d118     4E 00 00 FF 
0d11c     B4 E4 85 F1 | 	sub	objptr, ##40116
0d120     00 FB BF FD | 	call	#_csave_block
0d124     50 00 00 FF 
0d128     B4 E4 05 F1 | 	add	objptr, ##41140
0d12c     F2 00 68 FC | 	wrlong	#0, objptr
0d130     50 00 00 FF 
0d134     B4 E4 85 F1 | 	sub	objptr, ##41140
0d138     2C 13 06 F6 | 	mov	arg01, #300
0d13c     48 61 B1 FD | 	call	#__system___waitms
0d140                 | LR__1094
0d140     A7 F0 03 F6 | 	mov	ptra, fp
0d144     B2 00 A0 FD | 	call	#popregs_
0d148                 | _csave_addtoblock_ret
0d148     2D 00 64 FD | 	ret
0d14c                 | 
0d14c                 | ' 
0d14c                 | ' '----------------------- csave
0d14c                 | ' 
0d14c                 | ' sub test_csave
0d14c                 | _test_csave
0d14c     04 4A 05 F6 | 	mov	COUNT_, #4
0d150     A8 00 A0 FD | 	call	#pushregs_
0d154     C0 F0 07 F1 | 	add	ptra, #192
0d158                 | ' 'dim fileheader,savestart, saveptr as ulong
0d158                 | ' 
0d158                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0d158     4A 00 00 FF 
0d15c     88 E4 05 F1 | 	add	objptr, ##38024
0d160     F2 12 02 FB | 	rdlong	arg01, objptr
0d164     4A 00 00 FF 
0d168     88 E4 85 F1 | 	sub	objptr, ##38024
0d16c     50 27 B1 FD | 	call	#_pslpeek
0d170     FF FF 7F FF 
0d174     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0d178     10 00 90 5D |  if_ne	jmp	#LR__1100
0d17c     1B 12 06 F6 | 	mov	arg01, #27
0d180     00 14 06 F6 | 	mov	arg02, #0
0d184     7C 24 B1 FD | 	call	#_printerror
0d188     1C 03 90 FD | 	jmp	#LR__1114
0d18c                 | LR__1100
0d18c     50 F7 BF FD | 	call	#_pop
0d190     90 4E 05 F1 | 	add	fp, #144
0d194     A7 FA 61 FC | 	wrlong	result1, fp
0d198     04 4E 05 F1 | 	add	fp, #4
0d19c     A7 FC 61 FC | 	wrlong	result2, fp
0d1a0     04 4E 05 F1 | 	add	fp, #4
0d1a4     A7 FE 61 FC | 	wrlong	result3, fp
0d1a8                 | ' t1=pop()
0d1a8                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0d1a8     98 4E 85 F1 | 	sub	fp, #152
0d1ac     1F FE 0D F2 | 	cmp	result3, #31 wz
0d1b0     24 00 90 AD |  if_e	jmp	#LR__1101
0d1b4     51 00 00 FF 
0d1b8     D8 E5 05 F1 | 	add	objptr, ##41944
0d1bc     F2 1C 02 FB | 	rdlong	arg06, objptr
0d1c0     51 00 00 FF 
0d1c4     D8 E5 85 F1 | 	sub	objptr, ##41944
0d1c8     8C 4E 05 F1 | 	add	fp, #140
0d1cc     A7 1C 62 FC | 	wrlong	arg06, fp
0d1d0     8C 4E 85 F1 | 	sub	fp, #140
0d1d4     14 00 90 FD | 	jmp	#LR__1102
0d1d8                 | LR__1101
0d1d8     90 4E 05 F1 | 	add	fp, #144
0d1dc     A7 1C 02 FB | 	rdlong	arg06, fp
0d1e0     04 4E 85 F1 | 	sub	fp, #4
0d1e4     A7 1C 62 FC | 	wrlong	arg06, fp
0d1e8     8C 4E 85 F1 | 	sub	fp, #140
0d1ec                 | LR__1102
0d1ec                 | ' 
0d1ec                 | ' ' prepare 1 kHz header wave
0d1ec                 | ' 
0d1ec                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0d1ec     A7 00 68 FC | 	wrlong	#0, fp
0d1f0     97 34 48 FB | 	callpa	#(@LR__1106-@LR__1103)>>2,fcache_load_ptr_
0d1f4                 | LR__1103
0d1f4     A7 1C 02 FB | 	rdlong	arg06, fp
0d1f8     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0d1fc     07 1A 06 F5 | 	and	arg05, #7
0d200     0D 1B 82 F6 | 	negc	arg05, arg05
0d204     04 1A 56 F2 | 	cmps	arg05, #4 wc
0d208     20 00 90 3D |  if_ae	jmp	#LR__1104
0d20c     A7 1A 02 FB | 	rdlong	arg05, fp
0d210     4D 00 00 FF 
0d214     B4 E5 05 F1 | 	add	objptr, ##39860
0d218     F2 1A 02 F1 | 	add	arg05, objptr
0d21c     0D FF 48 FC | 	wrbyte	#127, arg05
0d220     4D 00 00 FF 
0d224     B4 E5 85 F1 | 	sub	objptr, ##39860
0d228     1C 00 90 FD | 	jmp	#LR__1105
0d22c                 | LR__1104
0d22c     A7 1A 02 FB | 	rdlong	arg05, fp
0d230     4D 00 00 FF 
0d234     B4 E5 05 F1 | 	add	objptr, ##39860
0d238     F2 1A 02 F1 | 	add	arg05, objptr
0d23c     0D 01 49 FC | 	wrbyte	#128, arg05
0d240     4D 00 00 FF 
0d244     B4 E5 85 F1 | 	sub	objptr, ##39860
0d248                 | LR__1105
0d248     A7 1A 02 FB | 	rdlong	arg05, fp
0d24c     01 1A 06 F1 | 	add	arg05, #1
0d250     A7 1A 62 FC | 	wrlong	arg05, fp
0d254     00 1B 56 F2 | 	cmps	arg05, #256 wc
0d258     98 FF 9F CD |  if_b	jmp	#LR__1103
0d25c                 | LR__1106
0d25c     4D 00 00 FF 
0d260     B4 E5 05 F1 | 	add	objptr, ##39860
0d264     F2 14 02 F6 | 	mov	arg02, objptr
0d268     07 12 06 F6 | 	mov	arg01, #7
0d26c     0F 00 00 FF 
0d270     40 17 06 F6 | 	mov	arg03, ##8000
0d274     0E 18 C6 F9 | 	decod	arg04, #14
0d278     00 1B 06 F6 | 	mov	arg05, #256
0d27c     00 1C 06 F6 | 	mov	arg06, #0
0d280     42 00 00 FF 
0d284     E8 E4 85 F1 | 	sub	objptr, ##34024
0d288     64 59 B1 FD | 	call	#_audio096_spin2_play8
0d28c     0B 00 00 FF 
0d290     CC E4 85 F1 | 	sub	objptr, ##5836
0d294     05 00 00 FF 
0d298     B8 13 06 F6 | 	mov	arg01, ##3000
0d29c     E8 5F B1 FD | 	call	#__system___waitms
0d2a0     50 00 00 FF 
0d2a4     B4 E4 05 F1 | 	add	objptr, ##41140
0d2a8     F2 00 68 FC | 	wrlong	#0, objptr
0d2ac     50 00 00 FF 
0d2b0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d2b4     72 12 06 F6 | 	mov	arg01, #114
0d2b8     00 14 06 F6 | 	mov	arg02, #0
0d2bc     48 FD BF FD | 	call	#_csave_addtoblock
0d2c0     62 12 06 F6 | 	mov	arg01, #98
0d2c4     00 14 06 F6 | 	mov	arg02, #0
0d2c8     3C FD BF FD | 	call	#_csave_addtoblock
0d2cc     61 12 06 F6 | 	mov	arg01, #97
0d2d0     00 14 06 F6 | 	mov	arg02, #0
0d2d4     30 FD BF FD | 	call	#_csave_addtoblock
0d2d8     0D 12 06 F6 | 	mov	arg01, #13
0d2dc     00 14 06 F6 | 	mov	arg02, #0
0d2e0     24 FD BF FD | 	call	#_csave_addtoblock
0d2e4                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0d2e4                 | ' waitms 3000 
0d2e4                 | ' 
0d2e4                 | ' blockptr=0
0d2e4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0d2e4                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0d2e4     A7 02 68 FC | 	wrlong	#1, fp
0d2e8     8C 4E 05 F1 | 	add	fp, #140
0d2ec     A7 12 02 FB | 	rdlong	arg01, fp
0d2f0     8C 4E 85 F1 | 	sub	fp, #140
0d2f4     09 27 02 F6 | 	mov	local01, arg01
0d2f8     97 06 48 FB | 	callpa	#(@LR__1108-@LR__1107)>>2,fcache_load_ptr_
0d2fc                 | LR__1107
0d2fc     13 FB C9 FA | 	rdbyte	result1, local01 wz
0d300     01 26 06 51 |  if_ne	add	local01, #1
0d304     F4 FF 9F 5D |  if_ne	jmp	#LR__1107
0d308                 | LR__1108
0d308     09 27 82 F1 | 	sub	local01, arg01
0d30c     13 29 02 F6 | 	mov	local02, local01
0d310     01 28 06 F1 | 	add	local02, #1
0d314                 | LR__1109
0d314     A7 1A 02 FB | 	rdlong	arg05, fp
0d318     14 1B 52 F2 | 	cmps	arg05, local02 wc
0d31c     34 00 90 3D |  if_ae	jmp	#LR__1110
0d320     8C 4E 05 F1 | 	add	fp, #140
0d324     A7 12 02 FB | 	rdlong	arg01, fp
0d328     8C 4E 85 F1 | 	sub	fp, #140
0d32c     A7 14 02 FB | 	rdlong	arg02, fp
0d330     01 16 06 F6 | 	mov	arg03, #1
0d334     F0 7D B1 FD | 	call	#__system__Mid_S
0d338     FD 12 C2 FA | 	rdbyte	arg01, result1
0d33c     00 14 06 F6 | 	mov	arg02, #0
0d340     C4 FC BF FD | 	call	#_csave_addtoblock
0d344     A7 1A 02 FB | 	rdlong	arg05, fp
0d348     01 1A 06 F1 | 	add	arg05, #1
0d34c     A7 1A 62 FC | 	wrlong	arg05, fp
0d350     C0 FF 9F FD | 	jmp	#LR__1109
0d354                 | LR__1110
0d354     00 12 06 F6 | 	mov	arg01, #0
0d358     00 14 06 F6 | 	mov	arg02, #0
0d35c     A8 FC BF FD | 	call	#_csave_addtoblock
0d360     72 12 06 F6 | 	mov	arg01, #114
0d364     00 14 06 F6 | 	mov	arg02, #0
0d368     9C FC BF FD | 	call	#_csave_addtoblock
0d36c     62 12 06 F6 | 	mov	arg01, #98
0d370     00 14 06 F6 | 	mov	arg02, #0
0d374     90 FC BF FD | 	call	#_csave_addtoblock
0d378     73 12 06 F6 | 	mov	arg01, #115
0d37c     00 14 06 F6 | 	mov	arg02, #0
0d380     84 FC BF FD | 	call	#_csave_addtoblock
0d384     0D 12 06 F6 | 	mov	arg01, #13
0d388     00 14 06 F6 | 	mov	arg02, #0
0d38c     78 FC BF FD | 	call	#_csave_addtoblock
0d390     4A 00 00 FF 
0d394     88 E4 05 F1 | 	add	objptr, ##38024
0d398     F2 2A 02 FB | 	rdlong	local03, objptr
0d39c     4A 00 00 FF 
0d3a0     88 E4 85 F1 | 	sub	objptr, ##38024
0d3a4     9C 4E 05 F1 | 	add	fp, #156
0d3a8     A7 2A 62 FC | 	wrlong	local03, fp
0d3ac     9C 4E 85 F1 | 	sub	fp, #156
0d3b0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0d3b0                 | ' 
0d3b0                 | ' saveptr=programstart
0d3b0                 | ' do
0d3b0                 | LR__1111
0d3b0     A0 4E 05 F1 | 	add	fp, #160
0d3b4     A7 12 02 F6 | 	mov	arg01, fp
0d3b8     04 4E 85 F1 | 	sub	fp, #4
0d3bc     A7 14 02 FB | 	rdlong	arg02, fp
0d3c0     9C 4E 85 F1 | 	sub	fp, #156
0d3c4     18 16 06 F6 | 	mov	arg03, #24
0d3c8     0B 00 00 FF 
0d3cc     CC E4 05 F1 | 	add	objptr, ##5836
0d3d0     80 4F B1 FD | 	call	#_psram_spin2_read1
0d3d4     0C 4E 05 F1 | 	add	fp, #12
0d3d8     A7 12 02 F6 | 	mov	arg01, fp
0d3dc     9C 4E 05 F1 | 	add	fp, #156
0d3e0     A7 14 02 FB | 	rdlong	arg02, fp
0d3e4     04 4E 05 F1 | 	add	fp, #4
0d3e8     A7 16 02 FB | 	rdlong	arg03, fp
0d3ec     AC 4E 85 F1 | 	sub	fp, #172
0d3f0     60 4F B1 FD | 	call	#_psram_spin2_read1
0d3f4     0B 00 00 FF 
0d3f8     CC E4 85 F1 | 	sub	objptr, ##5836
0d3fc     AC 4E 05 F1 | 	add	fp, #172
0d400     A7 12 02 FB | 	rdlong	arg01, fp
0d404     AC 4E 85 F1 | 	sub	fp, #172
0d408     00 14 06 F6 | 	mov	arg02, #0
0d40c     F8 FB BF FD | 	call	#_csave_addtoblock
0d410                 | ' 
0d410                 | '   psram.read1(varptr(header(0)),saveptr,24)
0d410                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0d410                 | '   csave_addtoblock(header(3),0) ' that's always <255
0d410                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0d410     A7 00 68 FC | 	wrlong	#0, fp
0d414     AC 4E 05 F1 | 	add	fp, #172
0d418     A7 2C 02 FB | 	rdlong	local04, fp
0d41c     AC 4E 85 F1 | 	sub	fp, #172
0d420                 | LR__1112
0d420     A7 2A 02 FB | 	rdlong	local03, fp
0d424     16 2B 52 F2 | 	cmps	local03, local04 wc
0d428     2C 00 90 3D |  if_ae	jmp	#LR__1113
0d42c     A7 2A 02 FB | 	rdlong	local03, fp
0d430     0C 4E 05 F1 | 	add	fp, #12
0d434     A7 2A 02 F1 | 	add	local03, fp
0d438     15 13 C2 FA | 	rdbyte	arg01, local03
0d43c     00 14 06 F6 | 	mov	arg02, #0
0d440     0C 4E 85 F1 | 	sub	fp, #12
0d444     C0 FB BF FD | 	call	#_csave_addtoblock
0d448     A7 2A 02 FB | 	rdlong	local03, fp
0d44c     01 2A 06 F1 | 	add	local03, #1
0d450     A7 2A 62 FC | 	wrlong	local03, fp
0d454     C8 FF 9F FD | 	jmp	#LR__1112
0d458                 | LR__1113
0d458     B4 4E 05 F1 | 	add	fp, #180
0d45c     A7 2A 02 FB | 	rdlong	local03, fp
0d460     18 4E 85 F1 | 	sub	fp, #24
0d464     A7 2A 62 FC | 	wrlong	local03, fp
0d468     18 4E 05 F1 | 	add	fp, #24
0d46c     A7 2A 02 FB | 	rdlong	local03, fp
0d470     B4 4E 85 F1 | 	sub	fp, #180
0d474     FF FF 3F FF 
0d478     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0d47c     30 FF 9F 5D |  if_ne	jmp	#LR__1111
0d480     00 12 06 F6 | 	mov	arg01, #0
0d484     01 14 06 F6 | 	mov	arg02, #1
0d488     7C FB BF FD | 	call	#_csave_addtoblock
0d48c     37 00 00 FF 
0d490     10 E4 05 F1 | 	add	objptr, ##28176
0d494     F2 12 02 FB | 	rdlong	arg01, objptr
0d498     37 00 00 FF 
0d49c     10 E4 85 F1 | 	sub	objptr, ##28176
0d4a0     D4 13 06 F1 | 	add	arg01, #468
0d4a4     09 01 58 FC | 	wrword	#0, arg01
0d4a8                 | LR__1114
0d4a8     A7 F0 03 F6 | 	mov	ptra, fp
0d4ac     B2 00 A0 FD | 	call	#popregs_
0d4b0                 | _test_csave_ret
0d4b0     2D 00 64 FD | 	ret
0d4b4                 | 
0d4b4                 | ' 
0d4b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4b4                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d4b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4b4                 | ' 
0d4b4                 | ' 
0d4b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4b4                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d4b4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4b4                 | ' 
0d4b4                 | ' '-------------------- abs
0d4b4                 | ' 
0d4b4                 | ' sub do_abs
0d4b4                 | _do_abs
0d4b4     01 4A 05 F6 | 	mov	COUNT_, #1
0d4b8     A8 00 A0 FD | 	call	#pushregs_
0d4bc     0C F0 07 F1 | 	add	ptra, #12
0d4c0     1C F4 BF FD | 	call	#_pop
0d4c4     FF 26 02 F6 | 	mov	local01, result3
0d4c8     A7 FA 61 FC | 	wrlong	result1, fp
0d4cc     04 4E 05 F1 | 	add	fp, #4
0d4d0     A7 FC 61 FC | 	wrlong	result2, fp
0d4d4     04 4E 05 F1 | 	add	fp, #4
0d4d8     A7 26 62 FC | 	wrlong	local01, fp
0d4dc                 | ' 
0d4dc                 | ' t1=pop()
0d4dc                 | ' if t1.result_type=result_int then 
0d4dc     08 4E 85 F1 | 	sub	fp, #8
0d4e0     1C 26 0E F2 | 	cmp	local01, #28 wz
0d4e4     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d4e8     09 27 42 A6 |  if_e	abs	local01, arg01
0d4ec     A7 26 62 AC |  if_e	wrlong	local01, fp
0d4f0     2C 00 90 AD |  if_e	jmp	#LR__1120
0d4f4     08 4E 05 F1 | 	add	fp, #8
0d4f8     A7 26 02 FB | 	rdlong	local01, fp
0d4fc     08 4E 85 F1 | 	sub	fp, #8
0d500     1E 26 0E F2 | 	cmp	local01, #30 wz
0d504     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d508     1F FA 05 A4 |  if_e	bitl	result1, #31
0d50c     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d510     08 4E 05 51 |  if_ne	add	fp, #8
0d514     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d518     08 4E 85 51 |  if_ne	sub	fp, #8
0d51c     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d520                 | LR__1120
0d520     A7 12 02 F6 | 	mov	arg01, fp
0d524     50 F4 BF FD | 	call	#_push
0d528     A7 F0 03 F6 | 	mov	ptra, fp
0d52c     B2 00 A0 FD | 	call	#popregs_
0d530                 | _do_abs_ret
0d530     2D 00 64 FD | 	ret
0d534                 | 
0d534                 | ' 
0d534                 | ' '-------------------- acos
0d534                 | ' 
0d534                 | ' sub do_acos
0d534                 | _do_acos
0d534     01 4A 05 F6 | 	mov	COUNT_, #1
0d538     A8 00 A0 FD | 	call	#pushregs_
0d53c     10 F0 07 F1 | 	add	ptra, #16
0d540     4A 00 00 FF 
0d544     80 E4 05 F1 | 	add	objptr, ##38016
0d548     F2 26 02 FB | 	rdlong	local01, objptr
0d54c     13 17 02 F6 | 	mov	arg03, local01
0d550     01 16 66 F0 | 	shl	arg03, #1
0d554     13 17 02 F1 | 	add	arg03, local01
0d558     02 16 66 F0 | 	shl	arg03, #2
0d55c     03 00 00 FF 
0d560     04 E4 85 F1 | 	sub	objptr, ##1540
0d564     F2 16 02 F1 | 	add	arg03, objptr
0d568     0B 17 02 FB | 	rdlong	arg03, arg03
0d56c     0C 4E 05 F1 | 	add	fp, #12
0d570     A7 16 62 FC | 	wrlong	arg03, fp
0d574                 | ' 
0d574                 | ' numpar=compiledline(lineptr_e).result.uresult
0d574                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d574     0C 4E 85 F1 | 	sub	fp, #12
0d578     02 16 16 F2 | 	cmp	arg03, #2 wc
0d57c     47 00 00 FF 
0d580     7C E4 85 F1 | 	sub	objptr, ##36476
0d584     0C 4E 05 C1 |  if_b	add	fp, #12
0d588     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d58c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d590     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0d594     00 12 06 F6 | 	mov	arg01, #0
0d598     20 B7 B1 FD | 	call	#__system___getiolock_0558
0d59c     FD 12 02 F6 | 	mov	arg01, result1
0d5a0     F0 59 B1 FD | 	call	#__system___lockmem
0d5a4     98 01 00 FF 
0d5a8     BD 15 06 F6 | 	mov	arg02, ##@LR__5605
0d5ac     00 12 06 F6 | 	mov	arg01, #0
0d5b0     00 16 06 F6 | 	mov	arg03, #0
0d5b4     D0 66 B1 FD | 	call	#__system___basic_print_string
0d5b8     00 12 06 F6 | 	mov	arg01, #0
0d5bc     FC B6 B1 FD | 	call	#__system___getiolock_0558
0d5c0     FD 00 68 FC | 	wrlong	#0, result1
0d5c4     27 12 06 F6 | 	mov	arg01, #39
0d5c8     00 14 06 F6 | 	mov	arg02, #0
0d5cc     34 20 B1 FD | 	call	#_printerror
0d5d0     64 00 90 FD | 	jmp	#LR__1131
0d5d4                 | LR__1130
0d5d4     08 F3 BF FD | 	call	#_pop
0d5d8     FF 26 02 F6 | 	mov	local01, result3
0d5dc     A7 FA 61 FC | 	wrlong	result1, fp
0d5e0     04 4E 05 F1 | 	add	fp, #4
0d5e4     A7 FC 61 FC | 	wrlong	result2, fp
0d5e8     04 4E 05 F1 | 	add	fp, #4
0d5ec     A7 26 62 FC | 	wrlong	local01, fp
0d5f0     08 4E 85 F1 | 	sub	fp, #8
0d5f4     A7 12 02 F6 | 	mov	arg01, fp
0d5f8     84 F5 BF FD | 	call	#_converttofloat
0d5fc     FD 12 02 F6 | 	mov	arg01, result1
0d600     48 93 B1 FD | 	call	#__system____builtin_acosf
0d604     FD 12 02 F6 | 	mov	arg01, result1
0d608     51 00 00 FF 
0d60c     C0 E5 05 F1 | 	add	objptr, ##41920
0d610     F2 14 02 FB | 	rdlong	arg02, objptr
0d614     51 00 00 FF 
0d618     C0 E5 85 F1 | 	sub	objptr, ##41920
0d61c     EC 87 B1 FD | 	call	#__system___float_mul
0d620     A7 FA 61 FC | 	wrlong	result1, fp
0d624     08 4E 05 F1 | 	add	fp, #8
0d628     A7 3C 68 FC | 	wrlong	#30, fp
0d62c     08 4E 85 F1 | 	sub	fp, #8
0d630     A7 12 02 F6 | 	mov	arg01, fp
0d634     40 F3 BF FD | 	call	#_push
0d638                 | LR__1131
0d638     A7 F0 03 F6 | 	mov	ptra, fp
0d63c     B2 00 A0 FD | 	call	#popregs_
0d640                 | _do_acos_ret
0d640     2D 00 64 FD | 	ret
0d644                 | 
0d644                 | ' 
0d644                 | ' '-------------------- asc
0d644                 | ' 
0d644                 | ' sub do_asc
0d644                 | _do_asc
0d644     01 4A 05 F6 | 	mov	COUNT_, #1
0d648     A8 00 A0 FD | 	call	#pushregs_
0d64c     14 F0 07 F1 | 	add	ptra, #20
0d650     4A 00 00 FF 
0d654     80 E4 05 F1 | 	add	objptr, ##38016
0d658     F2 26 02 FB | 	rdlong	local01, objptr
0d65c     13 17 02 F6 | 	mov	arg03, local01
0d660     01 16 66 F0 | 	shl	arg03, #1
0d664     13 17 02 F1 | 	add	arg03, local01
0d668     02 16 66 F0 | 	shl	arg03, #2
0d66c     03 00 00 FF 
0d670     04 E4 85 F1 | 	sub	objptr, ##1540
0d674     F2 16 02 F1 | 	add	arg03, objptr
0d678     0B 17 02 FB | 	rdlong	arg03, arg03
0d67c     0C 4E 05 F1 | 	add	fp, #12
0d680     A7 16 62 FC | 	wrlong	arg03, fp
0d684                 | ' 
0d684                 | ' numpar=compiledline(lineptr_e).result.uresult
0d684                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0d684     0C 4E 85 F1 | 	sub	fp, #12
0d688     02 16 16 F2 | 	cmp	arg03, #2 wc
0d68c     47 00 00 FF 
0d690     7C E4 85 F1 | 	sub	objptr, ##36476
0d694     0C 4E 05 C1 |  if_b	add	fp, #12
0d698     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d69c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d6a0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0d6a4     00 12 06 F6 | 	mov	arg01, #0
0d6a8     10 B6 B1 FD | 	call	#__system___getiolock_0558
0d6ac     FD 12 02 F6 | 	mov	arg01, result1
0d6b0     E0 58 B1 FD | 	call	#__system___lockmem
0d6b4     98 01 00 FF 
0d6b8     C4 15 06 F6 | 	mov	arg02, ##@LR__5606
0d6bc     00 12 06 F6 | 	mov	arg01, #0
0d6c0     00 16 06 F6 | 	mov	arg03, #0
0d6c4     C0 65 B1 FD | 	call	#__system___basic_print_string
0d6c8     00 12 06 F6 | 	mov	arg01, #0
0d6cc     EC B5 B1 FD | 	call	#__system___getiolock_0558
0d6d0     FD 00 68 FC | 	wrlong	#0, result1
0d6d4     27 12 06 F6 | 	mov	arg01, #39
0d6d8     00 14 06 F6 | 	mov	arg02, #0
0d6dc     24 1F B1 FD | 	call	#_printerror
0d6e0     B4 00 90 FD | 	jmp	#LR__1143
0d6e4                 | LR__1140
0d6e4     F8 F1 BF FD | 	call	#_pop
0d6e8     FF 16 02 F6 | 	mov	arg03, result3
0d6ec     A7 FA 61 FC | 	wrlong	result1, fp
0d6f0     04 4E 05 F1 | 	add	fp, #4
0d6f4     A7 FC 61 FC | 	wrlong	result2, fp
0d6f8     04 4E 05 F1 | 	add	fp, #4
0d6fc     A7 16 62 FC | 	wrlong	arg03, fp
0d700                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d700     08 4E 85 F1 | 	sub	fp, #8
0d704     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d708     18 00 90 5D |  if_ne	jmp	#LR__1141
0d70c     A7 12 02 FB | 	rdlong	arg01, fp
0d710     44 F3 BF FD | 	call	#_convertstring
0d714     A7 FA 61 FC | 	wrlong	result1, fp
0d718     08 4E 05 F1 | 	add	fp, #8
0d71c     A7 3E 68 FC | 	wrlong	#31, fp
0d720     08 4E 85 F1 | 	sub	fp, #8
0d724                 | LR__1141
0d724                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0d724     08 4E 05 F1 | 	add	fp, #8
0d728     A7 16 02 FB | 	rdlong	arg03, fp
0d72c     08 4E 85 F1 | 	sub	fp, #8
0d730     1F 16 0E F2 | 	cmp	arg03, #31 wz
0d734     40 00 90 AD |  if_e	jmp	#LR__1142
0d738     00 12 06 F6 | 	mov	arg01, #0
0d73c     7C B5 B1 FD | 	call	#__system___getiolock_0558
0d740     FD 12 02 F6 | 	mov	arg01, result1
0d744     4C 58 B1 FD | 	call	#__system___lockmem
0d748     98 01 00 FF 
0d74c     CA 15 06 F6 | 	mov	arg02, ##@LR__5607
0d750     00 12 06 F6 | 	mov	arg01, #0
0d754     00 16 06 F6 | 	mov	arg03, #0
0d758     2C 65 B1 FD | 	call	#__system___basic_print_string
0d75c     00 12 06 F6 | 	mov	arg01, #0
0d760     58 B5 B1 FD | 	call	#__system___getiolock_0558
0d764     FD 00 68 FC | 	wrlong	#0, result1
0d768     0F 12 06 F6 | 	mov	arg01, #15
0d76c     00 14 06 F6 | 	mov	arg02, #0
0d770     90 1E B1 FD | 	call	#_printerror
0d774     20 00 90 FD | 	jmp	#LR__1143
0d778                 | LR__1142
0d778     A7 26 02 FB | 	rdlong	local01, fp
0d77c     13 27 C2 FA | 	rdbyte	local01, local01
0d780     A7 26 62 FC | 	wrlong	local01, fp
0d784     08 4E 05 F1 | 	add	fp, #8
0d788     A7 38 68 FC | 	wrlong	#28, fp
0d78c     08 4E 85 F1 | 	sub	fp, #8
0d790     A7 12 02 F6 | 	mov	arg01, fp
0d794     E0 F1 BF FD | 	call	#_push
0d798                 | LR__1143
0d798     A7 F0 03 F6 | 	mov	ptra, fp
0d79c     B2 00 A0 FD | 	call	#popregs_
0d7a0                 | _do_asc_ret
0d7a0     2D 00 64 FD | 	ret
0d7a4                 | 
0d7a4                 | ' 
0d7a4                 | ' '-------------------- asin
0d7a4                 | ' 
0d7a4                 | ' sub do_asin
0d7a4                 | _do_asin
0d7a4     01 4A 05 F6 | 	mov	COUNT_, #1
0d7a8     A8 00 A0 FD | 	call	#pushregs_
0d7ac     10 F0 07 F1 | 	add	ptra, #16
0d7b0     4A 00 00 FF 
0d7b4     80 E4 05 F1 | 	add	objptr, ##38016
0d7b8     F2 26 02 FB | 	rdlong	local01, objptr
0d7bc     13 17 02 F6 | 	mov	arg03, local01
0d7c0     01 16 66 F0 | 	shl	arg03, #1
0d7c4     13 17 02 F1 | 	add	arg03, local01
0d7c8     02 16 66 F0 | 	shl	arg03, #2
0d7cc     03 00 00 FF 
0d7d0     04 E4 85 F1 | 	sub	objptr, ##1540
0d7d4     F2 16 02 F1 | 	add	arg03, objptr
0d7d8     0B 17 02 FB | 	rdlong	arg03, arg03
0d7dc     0C 4E 05 F1 | 	add	fp, #12
0d7e0     A7 16 62 FC | 	wrlong	arg03, fp
0d7e4                 | ' 
0d7e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d7e4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0d7e4     0C 4E 85 F1 | 	sub	fp, #12
0d7e8     02 16 16 F2 | 	cmp	arg03, #2 wc
0d7ec     47 00 00 FF 
0d7f0     7C E4 85 F1 | 	sub	objptr, ##36476
0d7f4     0C 4E 05 C1 |  if_b	add	fp, #12
0d7f8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d7fc     0C 4E 85 C1 |  if_b	sub	fp, #12
0d800     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0d804     00 12 06 F6 | 	mov	arg01, #0
0d808     B0 B4 B1 FD | 	call	#__system___getiolock_0558
0d80c     FD 12 02 F6 | 	mov	arg01, result1
0d810     80 57 B1 FD | 	call	#__system___lockmem
0d814     98 01 00 FF 
0d818     D0 15 06 F6 | 	mov	arg02, ##@LR__5608
0d81c     00 12 06 F6 | 	mov	arg01, #0
0d820     00 16 06 F6 | 	mov	arg03, #0
0d824     60 64 B1 FD | 	call	#__system___basic_print_string
0d828     00 12 06 F6 | 	mov	arg01, #0
0d82c     8C B4 B1 FD | 	call	#__system___getiolock_0558
0d830     FD 00 68 FC | 	wrlong	#0, result1
0d834     27 12 06 F6 | 	mov	arg01, #39
0d838     00 14 06 F6 | 	mov	arg02, #0
0d83c     C4 1D B1 FD | 	call	#_printerror
0d840     64 00 90 FD | 	jmp	#LR__1151
0d844                 | LR__1150
0d844     98 F0 BF FD | 	call	#_pop
0d848     FF 26 02 F6 | 	mov	local01, result3
0d84c     A7 FA 61 FC | 	wrlong	result1, fp
0d850     04 4E 05 F1 | 	add	fp, #4
0d854     A7 FC 61 FC | 	wrlong	result2, fp
0d858     04 4E 05 F1 | 	add	fp, #4
0d85c     A7 26 62 FC | 	wrlong	local01, fp
0d860     08 4E 85 F1 | 	sub	fp, #8
0d864     A7 12 02 F6 | 	mov	arg01, fp
0d868     14 F3 BF FD | 	call	#_converttofloat
0d86c     FD 12 02 F6 | 	mov	arg01, result1
0d870     8C 90 B1 FD | 	call	#__system____builtin_asinf
0d874     FD 12 02 F6 | 	mov	arg01, result1
0d878     51 00 00 FF 
0d87c     C0 E5 05 F1 | 	add	objptr, ##41920
0d880     F2 14 02 FB | 	rdlong	arg02, objptr
0d884     51 00 00 FF 
0d888     C0 E5 85 F1 | 	sub	objptr, ##41920
0d88c     7C 85 B1 FD | 	call	#__system___float_mul
0d890     A7 FA 61 FC | 	wrlong	result1, fp
0d894     08 4E 05 F1 | 	add	fp, #8
0d898     A7 3C 68 FC | 	wrlong	#30, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     A7 12 02 F6 | 	mov	arg01, fp
0d8a4     D0 F0 BF FD | 	call	#_push
0d8a8                 | LR__1151
0d8a8     A7 F0 03 F6 | 	mov	ptra, fp
0d8ac     B2 00 A0 FD | 	call	#popregs_
0d8b0                 | _do_asin_ret
0d8b0     2D 00 64 FD | 	ret
0d8b4                 | 
0d8b4                 | ' 
0d8b4                 | ' '-------------------- atn
0d8b4                 | ' 
0d8b4                 | ' sub do_atn
0d8b4                 | _do_atn
0d8b4     01 4A 05 F6 | 	mov	COUNT_, #1
0d8b8     A8 00 A0 FD | 	call	#pushregs_
0d8bc     10 F0 07 F1 | 	add	ptra, #16
0d8c0     4A 00 00 FF 
0d8c4     80 E4 05 F1 | 	add	objptr, ##38016
0d8c8     F2 26 02 FB | 	rdlong	local01, objptr
0d8cc     13 17 02 F6 | 	mov	arg03, local01
0d8d0     01 16 66 F0 | 	shl	arg03, #1
0d8d4     13 17 02 F1 | 	add	arg03, local01
0d8d8     02 16 66 F0 | 	shl	arg03, #2
0d8dc     03 00 00 FF 
0d8e0     04 E4 85 F1 | 	sub	objptr, ##1540
0d8e4     F2 16 02 F1 | 	add	arg03, objptr
0d8e8     0B 17 02 FB | 	rdlong	arg03, arg03
0d8ec     0C 4E 05 F1 | 	add	fp, #12
0d8f0     A7 16 62 FC | 	wrlong	arg03, fp
0d8f4                 | ' 
0d8f4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d8f4                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0d8f4     0C 4E 85 F1 | 	sub	fp, #12
0d8f8     02 16 16 F2 | 	cmp	arg03, #2 wc
0d8fc     47 00 00 FF 
0d900     7C E4 85 F1 | 	sub	objptr, ##36476
0d904     0C 4E 05 C1 |  if_b	add	fp, #12
0d908     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d90c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d910     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0d914     00 12 06 F6 | 	mov	arg01, #0
0d918     A0 B3 B1 FD | 	call	#__system___getiolock_0558
0d91c     FD 12 02 F6 | 	mov	arg01, result1
0d920     70 56 B1 FD | 	call	#__system___lockmem
0d924     98 01 00 FF 
0d928     D7 15 06 F6 | 	mov	arg02, ##@LR__5609
0d92c     00 12 06 F6 | 	mov	arg01, #0
0d930     00 16 06 F6 | 	mov	arg03, #0
0d934     50 63 B1 FD | 	call	#__system___basic_print_string
0d938     00 12 06 F6 | 	mov	arg01, #0
0d93c     7C B3 B1 FD | 	call	#__system___getiolock_0558
0d940     FD 00 68 FC | 	wrlong	#0, result1
0d944     27 12 06 F6 | 	mov	arg01, #39
0d948     00 14 06 F6 | 	mov	arg02, #0
0d94c     B4 1C B1 FD | 	call	#_printerror
0d950     6C 00 90 FD | 	jmp	#LR__1161
0d954                 | LR__1160
0d954     88 EF BF FD | 	call	#_pop
0d958     FF 26 02 F6 | 	mov	local01, result3
0d95c     A7 FA 61 FC | 	wrlong	result1, fp
0d960     04 4E 05 F1 | 	add	fp, #4
0d964     A7 FC 61 FC | 	wrlong	result2, fp
0d968     04 4E 05 F1 | 	add	fp, #4
0d96c     A7 26 62 FC | 	wrlong	local01, fp
0d970     08 4E 85 F1 | 	sub	fp, #8
0d974     A7 12 02 F6 | 	mov	arg01, fp
0d978     04 F2 BF FD | 	call	#_converttofloat
0d97c     FD 12 02 F6 | 	mov	arg01, result1
0d980     00 C0 1F FF 
0d984     00 14 06 F6 | 	mov	arg02, ##1065353216
0d988     0C 90 B1 FD | 	call	#__system____builtin_atan2f
0d98c     FD 12 02 F6 | 	mov	arg01, result1
0d990     51 00 00 FF 
0d994     C0 E5 05 F1 | 	add	objptr, ##41920
0d998     F2 14 02 FB | 	rdlong	arg02, objptr
0d99c     51 00 00 FF 
0d9a0     C0 E5 85 F1 | 	sub	objptr, ##41920
0d9a4     64 84 B1 FD | 	call	#__system___float_mul
0d9a8     A7 FA 61 FC | 	wrlong	result1, fp
0d9ac     08 4E 05 F1 | 	add	fp, #8
0d9b0     A7 3C 68 FC | 	wrlong	#30, fp
0d9b4     08 4E 85 F1 | 	sub	fp, #8
0d9b8     A7 12 02 F6 | 	mov	arg01, fp
0d9bc     B8 EF BF FD | 	call	#_push
0d9c0                 | LR__1161
0d9c0     A7 F0 03 F6 | 	mov	ptra, fp
0d9c4     B2 00 A0 FD | 	call	#popregs_
0d9c8                 | _do_atn_ret
0d9c8     2D 00 64 FD | 	ret
0d9cc                 | 
0d9cc                 | ' 
0d9cc                 | ' '-------------------- beep
0d9cc                 | ' 
0d9cc                 | ' sub do_beep
0d9cc                 | _do_beep
0d9cc     02 4A 05 F6 | 	mov	COUNT_, #2
0d9d0     A8 00 A0 FD | 	call	#pushregs_
0d9d4     20 F0 07 F1 | 	add	ptra, #32
0d9d8     04 EF BF FD | 	call	#_pop
0d9dc     FD 26 02 F6 | 	mov	local01, result1
0d9e0     FE 1C 02 F6 | 	mov	arg06, result2
0d9e4     FF 28 02 F6 | 	mov	local02, result3
0d9e8     0C 4E 05 F1 | 	add	fp, #12
0d9ec     A7 26 62 FC | 	wrlong	local01, fp
0d9f0     04 4E 05 F1 | 	add	fp, #4
0d9f4     A7 1C 62 FC | 	wrlong	arg06, fp
0d9f8     04 4E 05 F1 | 	add	fp, #4
0d9fc     A7 28 62 FC | 	wrlong	local02, fp
0da00     14 4E 85 F1 | 	sub	fp, #20
0da04     D8 EE BF FD | 	call	#_pop
0da08     A7 FA 61 FC | 	wrlong	result1, fp
0da0c     04 4E 05 F1 | 	add	fp, #4
0da10     A7 FC 61 FC | 	wrlong	result2, fp
0da14     04 4E 05 F1 | 	add	fp, #4
0da18     A7 FE 61 FC | 	wrlong	result3, fp
0da1c                 | ' 
0da1c                 | ' t2=pop()
0da1c                 | ' t1=pop()
0da1c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0da1c     08 4E 85 F1 | 	sub	fp, #8
0da20     1C FE 0D F2 | 	cmp	result3, #28 wz
0da24     08 4E 05 51 |  if_ne	add	fp, #8
0da28     A7 28 02 5B |  if_ne	rdlong	local02, fp
0da2c     08 4E 85 51 |  if_ne	sub	fp, #8
0da30     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0da34     A7 26 02 AB |  if_e	rdlong	local01, fp
0da38     18 4E 05 A1 |  if_e	add	fp, #24
0da3c     A7 26 62 AC |  if_e	wrlong	local01, fp
0da40     18 4E 85 A1 |  if_e	sub	fp, #24
0da44     14 00 90 AD |  if_e	jmp	#LR__1170
0da48     A7 12 02 F6 | 	mov	arg01, fp
0da4c     74 F0 BF FD | 	call	#_converttoint
0da50     18 4E 05 F1 | 	add	fp, #24
0da54     A7 FA 61 FC | 	wrlong	result1, fp
0da58     18 4E 85 F1 | 	sub	fp, #24
0da5c                 | LR__1170
0da5c     1C 4E 05 F1 | 	add	fp, #28
0da60     A7 FE 48 FC | 	wrbyte	#127, fp
0da64     01 4E 05 F1 | 	add	fp, #1
0da68     A7 00 49 FC | 	wrbyte	#128, fp
0da6c     01 4E 85 F1 | 	sub	fp, #1
0da70     A7 14 02 F6 | 	mov	arg02, fp
0da74     04 4E 85 F1 | 	sub	fp, #4
0da78     A7 16 02 FB | 	rdlong	arg03, fp
0da7c     18 4E 85 F1 | 	sub	fp, #24
0da80     01 16 66 F0 | 	shl	arg03, #1
0da84     07 12 06 F6 | 	mov	arg01, #7
0da88     0E 18 C6 F9 | 	decod	arg04, #14
0da8c     02 1A 06 F6 | 	mov	arg05, #2
0da90     00 1C 06 F6 | 	mov	arg06, #0
0da94     0B 00 00 FF 
0da98     CC E4 05 F1 | 	add	objptr, ##5836
0da9c     50 51 B1 FD | 	call	#_audio096_spin2_play8
0daa0     0B 00 00 FF 
0daa4     CC E4 85 F1 | 	sub	objptr, ##5836
0daa8     0C 4E 05 F1 | 	add	fp, #12
0daac     A7 12 02 F6 | 	mov	arg01, fp
0dab0     0C 4E 85 F1 | 	sub	fp, #12
0dab4     C0 EE BF FD | 	call	#_push
0dab8     C0 B2 B0 FD | 	call	#_do_waitms
0dabc     07 12 06 F6 | 	mov	arg01, #7
0dac0     0B 00 00 FF 
0dac4     CC E4 05 F1 | 	add	objptr, ##5836
0dac8     C8 51 B1 FD | 	call	#_audio096_spin2_stop
0dacc     0B 00 00 FF 
0dad0     CC E4 85 F1 | 	sub	objptr, ##5836
0dad4     A7 F0 03 F6 | 	mov	ptra, fp
0dad8     B2 00 A0 FD | 	call	#popregs_
0dadc                 | _do_beep_ret
0dadc     2D 00 64 FD | 	ret
0dae0                 | 
0dae0                 | ' 
0dae0                 | ' '-------------------- blit
0dae0                 | ' 
0dae0                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dae0                 | ' sub do_blit
0dae0                 | _do_blit
0dae0     02 4A 05 F6 | 	mov	COUNT_, #2
0dae4     A8 00 A0 FD | 	call	#pushregs_
0dae8     3C F0 07 F1 | 	add	ptra, #60
0daec     4A 00 00 FF 
0daf0     80 E4 05 F1 | 	add	objptr, ##38016
0daf4     F2 26 02 FB | 	rdlong	local01, objptr
0daf8     13 25 02 F6 | 	mov	arg10, local01
0dafc     01 24 66 F0 | 	shl	arg10, #1
0db00     13 25 02 F1 | 	add	arg10, local01
0db04     02 24 66 F0 | 	shl	arg10, #2
0db08     03 00 00 FF 
0db0c     04 E4 85 F1 | 	sub	objptr, ##1540
0db10     F2 24 02 F1 | 	add	arg10, objptr
0db14     12 25 02 FB | 	rdlong	arg10, arg10
0db18     38 4E 05 F1 | 	add	fp, #56
0db1c     A7 24 62 FC | 	wrlong	arg10, fp
0db20                 | ' 
0db20                 | ' numpar=compiledline(lineptr_e).result.uresult
0db20                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0db20     38 4E 85 F1 | 	sub	fp, #56
0db24     0A 24 0E F2 | 	cmp	arg10, #10 wz
0db28     47 00 00 FF 
0db2c     7C E4 85 F1 | 	sub	objptr, ##36476
0db30     38 4E 05 51 |  if_ne	add	fp, #56
0db34     A7 26 02 5B |  if_ne	rdlong	local01, fp
0db38     38 4E 85 51 |  if_ne	sub	fp, #56
0db3c     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0db40     50 00 90 AD |  if_e	jmp	#LR__1180
0db44     00 12 06 F6 | 	mov	arg01, #0
0db48     70 B1 B1 FD | 	call	#__system___getiolock_0558
0db4c     FD 12 02 F6 | 	mov	arg01, result1
0db50     40 54 B1 FD | 	call	#__system___lockmem
0db54     98 01 00 FF 
0db58     DD 15 06 F6 | 	mov	arg02, ##@LR__5610
0db5c     00 12 06 F6 | 	mov	arg01, #0
0db60     00 16 06 F6 | 	mov	arg03, #0
0db64     20 61 B1 FD | 	call	#__system___basic_print_string
0db68     00 12 06 F6 | 	mov	arg01, #0
0db6c     4C B1 B1 FD | 	call	#__system___getiolock_0558
0db70     FD 00 68 FC | 	wrlong	#0, result1
0db74     50 00 00 FF 
0db78     F0 E4 05 F1 | 	add	objptr, ##41200
0db7c     F2 14 02 FB | 	rdlong	arg02, objptr
0db80     50 00 00 FF 
0db84     F0 E4 85 F1 | 	sub	objptr, ##41200
0db88     27 12 06 F6 | 	mov	arg01, #39
0db8c     74 1A B1 FD | 	call	#_printerror
0db90     44 01 90 FD | 	jmp	#LR__1185
0db94                 | LR__1180
0db94                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0db94     38 4E 05 F1 | 	add	fp, #56
0db98     A7 28 02 FB | 	rdlong	local02, fp
0db9c     01 28 86 F1 | 	sub	local02, #1
0dba0     04 4E 85 F1 | 	sub	fp, #4
0dba4     A7 28 62 FC | 	wrlong	local02, fp
0dba8     34 4E 85 F1 | 	sub	fp, #52
0dbac                 | LR__1181
0dbac     38 4E 05 F1 | 	add	fp, #56
0dbb0     A7 26 02 FB | 	rdlong	local01, fp
0dbb4     01 26 86 F1 | 	sub	local01, #1
0dbb8     04 4E 85 F1 | 	sub	fp, #4
0dbbc     A7 24 02 FB | 	rdlong	arg10, fp
0dbc0     34 4E 85 F1 | 	sub	fp, #52
0dbc4     13 25 1A F2 | 	cmp	arg10, local01 wcz
0dbc8     54 00 90 1D |  if_a	jmp	#LR__1182
0dbcc     10 ED BF FD | 	call	#_pop
0dbd0     A7 FA 61 FC | 	wrlong	result1, fp
0dbd4     04 4E 05 F1 | 	add	fp, #4
0dbd8     A7 FC 61 FC | 	wrlong	result2, fp
0dbdc     04 4E 05 F1 | 	add	fp, #4
0dbe0     A7 FE 61 FC | 	wrlong	result3, fp
0dbe4     2C 4E 05 F1 | 	add	fp, #44
0dbe8     A7 28 02 FB | 	rdlong	local02, fp
0dbec     02 28 66 F0 | 	shl	local02, #2
0dbf0     28 4E 85 F1 | 	sub	fp, #40
0dbf4     A7 28 02 F1 | 	add	local02, fp
0dbf8     0C 4E 85 F1 | 	sub	fp, #12
0dbfc     A7 12 02 F6 | 	mov	arg01, fp
0dc00     C0 EE BF FD | 	call	#_converttoint
0dc04     14 FB 61 FC | 	wrlong	result1, local02
0dc08     34 4E 05 F1 | 	add	fp, #52
0dc0c     A7 28 02 FB | 	rdlong	local02, fp
0dc10     01 28 86 F1 | 	sub	local02, #1
0dc14     A7 28 62 FC | 	wrlong	local02, fp
0dc18     34 4E 85 F1 | 	sub	fp, #52
0dc1c     8C FF 9F FD | 	jmp	#LR__1181
0dc20                 | LR__1182
0dc20                 | ' if numpar=10 then 
0dc20     38 4E 05 F1 | 	add	fp, #56
0dc24     A7 28 02 FB | 	rdlong	local02, fp
0dc28     38 4E 85 F1 | 	sub	fp, #56
0dc2c     0A 28 0E F2 | 	cmp	local02, #10 wz
0dc30     5C 00 90 5D |  if_ne	jmp	#LR__1183
0dc34     0C 4E 05 F1 | 	add	fp, #12
0dc38     A7 12 02 FB | 	rdlong	arg01, fp
0dc3c     04 4E 05 F1 | 	add	fp, #4
0dc40     A7 14 02 FB | 	rdlong	arg02, fp
0dc44     04 4E 05 F1 | 	add	fp, #4
0dc48     A7 16 02 FB | 	rdlong	arg03, fp
0dc4c     04 4E 05 F1 | 	add	fp, #4
0dc50     A7 18 02 FB | 	rdlong	arg04, fp
0dc54     04 4E 05 F1 | 	add	fp, #4
0dc58     A7 1A 02 FB | 	rdlong	arg05, fp
0dc5c     04 4E 05 F1 | 	add	fp, #4
0dc60     A7 1C 02 FB | 	rdlong	arg06, fp
0dc64     04 4E 05 F1 | 	add	fp, #4
0dc68     A7 1E 02 FB | 	rdlong	arg07, fp
0dc6c     04 4E 05 F1 | 	add	fp, #4
0dc70     A7 20 02 FB | 	rdlong	arg08, fp
0dc74     04 4E 05 F1 | 	add	fp, #4
0dc78     A7 22 02 FB | 	rdlong	arg09, fp
0dc7c     04 4E 05 F1 | 	add	fp, #4
0dc80     A7 24 02 FB | 	rdlong	arg10, fp
0dc84     30 4E 85 F1 | 	sub	fp, #48
0dc88     3C 41 B1 FD | 	call	#_hg010b_spin2_blit
0dc8c     48 00 90 FD | 	jmp	#LR__1184
0dc90                 | LR__1183
0dc90     F2 1E 02 FB | 	rdlong	arg07, objptr
0dc94     0C 4E 05 F1 | 	add	fp, #12
0dc98     A7 14 02 FB | 	rdlong	arg02, fp
0dc9c     04 4E 05 F1 | 	add	fp, #4
0dca0     A7 16 02 FB | 	rdlong	arg03, fp
0dca4     04 4E 05 F1 | 	add	fp, #4
0dca8     A7 18 02 FB | 	rdlong	arg04, fp
0dcac     04 4E 05 F1 | 	add	fp, #4
0dcb0     A7 1A 02 FB | 	rdlong	arg05, fp
0dcb4     04 4E 05 F1 | 	add	fp, #4
0dcb8     A7 20 02 FB | 	rdlong	arg08, fp
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 22 02 FB | 	rdlong	arg09, fp
0dcc4     20 4E 85 F1 | 	sub	fp, #32
0dcc8     0F 13 02 F6 | 	mov	arg01, arg07
0dccc     0A 1C C6 F9 | 	decod	arg06, #10
0dcd0     0A 24 C6 F9 | 	decod	arg10, #10
0dcd4     F0 40 B1 FD | 	call	#_hg010b_spin2_blit
0dcd8                 | LR__1184
0dcd8                 | LR__1185
0dcd8     A7 F0 03 F6 | 	mov	ptra, fp
0dcdc     B2 00 A0 FD | 	call	#popregs_
0dce0                 | _do_blit_ret
0dce0     2D 00 64 FD | 	ret
0dce4                 | 
0dce4                 | ' 
0dce4                 | ' 
0dce4                 | ' '-------------------- bin$
0dce4                 | ' 
0dce4                 | ' sub do_bin
0dce4                 | _do_bin
0dce4     01 4A 05 F6 | 	mov	COUNT_, #1
0dce8     A8 00 A0 FD | 	call	#pushregs_
0dcec     18 F0 07 F1 | 	add	ptra, #24
0dcf0     4A 00 00 FF 
0dcf4     80 E4 05 F1 | 	add	objptr, ##38016
0dcf8     F2 26 02 FB | 	rdlong	local01, objptr
0dcfc     13 17 02 F6 | 	mov	arg03, local01
0dd00     01 16 66 F0 | 	shl	arg03, #1
0dd04     13 17 02 F1 | 	add	arg03, local01
0dd08     02 16 66 F0 | 	shl	arg03, #2
0dd0c     03 00 00 FF 
0dd10     04 E4 85 F1 | 	sub	objptr, ##1540
0dd14     F2 16 02 F1 | 	add	arg03, objptr
0dd18     0B 17 02 FB | 	rdlong	arg03, arg03
0dd1c     0C 4E 05 F1 | 	add	fp, #12
0dd20     A7 16 62 FC | 	wrlong	arg03, fp
0dd24                 | ' 
0dd24                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd24                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0dd24     0C 4E 85 F1 | 	sub	fp, #12
0dd28     03 16 16 F2 | 	cmp	arg03, #3 wc
0dd2c     47 00 00 FF 
0dd30     7C E4 85 F1 | 	sub	objptr, ##36476
0dd34     0C 4E 05 C1 |  if_b	add	fp, #12
0dd38     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd3c     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd40     40 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0dd44     00 12 06 F6 | 	mov	arg01, #0
0dd48     70 AF B1 FD | 	call	#__system___getiolock_0558
0dd4c     FD 12 02 F6 | 	mov	arg01, result1
0dd50     40 52 B1 FD | 	call	#__system___lockmem
0dd54     98 01 00 FF 
0dd58     E4 15 06 F6 | 	mov	arg02, ##@LR__5611
0dd5c     00 12 06 F6 | 	mov	arg01, #0
0dd60     00 16 06 F6 | 	mov	arg03, #0
0dd64     20 5F B1 FD | 	call	#__system___basic_print_string
0dd68     00 12 06 F6 | 	mov	arg01, #0
0dd6c     4C AF B1 FD | 	call	#__system___getiolock_0558
0dd70     FD 00 68 FC | 	wrlong	#0, result1
0dd74     27 12 06 F6 | 	mov	arg01, #39
0dd78     00 14 06 F6 | 	mov	arg02, #0
0dd7c     84 18 B1 FD | 	call	#_printerror
0dd80     B8 00 90 FD | 	jmp	#LR__1193
0dd84                 | LR__1190
0dd84                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0dd84     0C 4E 05 F1 | 	add	fp, #12
0dd88     A7 26 02 FB | 	rdlong	local01, fp
0dd8c     0C 4E 85 F1 | 	sub	fp, #12
0dd90     02 26 0E F2 | 	cmp	local01, #2 wz
0dd94     38 00 90 5D |  if_ne	jmp	#LR__1191
0dd98     44 EB BF FD | 	call	#_pop
0dd9c     FF 26 02 F6 | 	mov	local01, result3
0dda0     A7 FA 61 FC | 	wrlong	result1, fp
0dda4     04 4E 05 F1 | 	add	fp, #4
0dda8     A7 FC 61 FC | 	wrlong	result2, fp
0ddac     04 4E 05 F1 | 	add	fp, #4
0ddb0     A7 26 62 FC | 	wrlong	local01, fp
0ddb4     08 4E 85 F1 | 	sub	fp, #8
0ddb8     A7 12 02 F6 | 	mov	arg01, fp
0ddbc     04 ED BF FD | 	call	#_converttoint
0ddc0     14 4E 05 F1 | 	add	fp, #20
0ddc4     A7 FA 61 FC | 	wrlong	result1, fp
0ddc8     14 4E 85 F1 | 	sub	fp, #20
0ddcc     0C 00 90 FD | 	jmp	#LR__1192
0ddd0                 | LR__1191
0ddd0     14 4E 05 F1 | 	add	fp, #20
0ddd4     A7 00 68 FC | 	wrlong	#0, fp
0ddd8     14 4E 85 F1 | 	sub	fp, #20
0dddc                 | LR__1192
0dddc     00 EB BF FD | 	call	#_pop
0dde0     FF 26 02 F6 | 	mov	local01, result3
0dde4     A7 FA 61 FC | 	wrlong	result1, fp
0dde8     04 4E 05 F1 | 	add	fp, #4
0ddec     A7 FC 61 FC | 	wrlong	result2, fp
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 26 62 FC | 	wrlong	local01, fp
0ddf8     08 4E 85 F1 | 	sub	fp, #8
0ddfc     A7 12 02 F6 | 	mov	arg01, fp
0de00     C0 EC BF FD | 	call	#_converttoint
0de04     10 4E 05 F1 | 	add	fp, #16
0de08     A7 FA 61 FC | 	wrlong	result1, fp
0de0c     FD 12 02 F6 | 	mov	arg01, result1
0de10     04 4E 05 F1 | 	add	fp, #4
0de14     A7 14 02 FB | 	rdlong	arg02, fp
0de18     14 4E 85 F1 | 	sub	fp, #20
0de1c     02 16 06 F6 | 	mov	arg03, #2
0de20     40 74 B1 FD | 	call	#__system__Number_S
0de24     A7 FA 61 FC | 	wrlong	result1, fp
0de28     08 4E 05 F1 | 	add	fp, #8
0de2c     A7 3E 68 FC | 	wrlong	#31, fp
0de30     08 4E 85 F1 | 	sub	fp, #8
0de34     A7 12 02 F6 | 	mov	arg01, fp
0de38     3C EB BF FD | 	call	#_push
0de3c                 | LR__1193
0de3c     A7 F0 03 F6 | 	mov	ptra, fp
0de40     B2 00 A0 FD | 	call	#popregs_
0de44                 | _do_bin_ret
0de44     2D 00 64 FD | 	ret
0de48                 | 
0de48                 | ' 
0de48                 | ' '-------------------- box
0de48                 | ' 
0de48                 | ' sub do_box
0de48                 | _do_box
0de48     03 4A 05 F6 | 	mov	COUNT_, #3
0de4c     A8 00 A0 FD | 	call	#pushregs_
0de50     30 F0 07 F1 | 	add	ptra, #48
0de54     88 EA BF FD | 	call	#_pop
0de58     FD 1A 02 F6 | 	mov	arg05, result1
0de5c     FE 18 02 F6 | 	mov	arg04, result2
0de60     FF 16 02 F6 | 	mov	arg03, result3
0de64     24 4E 05 F1 | 	add	fp, #36
0de68     A7 1A 62 FC | 	wrlong	arg05, fp
0de6c     04 4E 05 F1 | 	add	fp, #4
0de70     A7 18 62 FC | 	wrlong	arg04, fp
0de74     04 4E 05 F1 | 	add	fp, #4
0de78     A7 16 62 FC | 	wrlong	arg03, fp
0de7c     2C 4E 85 F1 | 	sub	fp, #44
0de80     5C EA BF FD | 	call	#_pop
0de84     FD 1A 02 F6 | 	mov	arg05, result1
0de88     FE 18 02 F6 | 	mov	arg04, result2
0de8c     FF 16 02 F6 | 	mov	arg03, result3
0de90     18 4E 05 F1 | 	add	fp, #24
0de94     A7 1A 62 FC | 	wrlong	arg05, fp
0de98     04 4E 05 F1 | 	add	fp, #4
0de9c     A7 18 62 FC | 	wrlong	arg04, fp
0dea0     04 4E 05 F1 | 	add	fp, #4
0dea4     A7 16 62 FC | 	wrlong	arg03, fp
0dea8     20 4E 85 F1 | 	sub	fp, #32
0deac     30 EA BF FD | 	call	#_pop
0deb0     FD 1A 02 F6 | 	mov	arg05, result1
0deb4     FE 18 02 F6 | 	mov	arg04, result2
0deb8     FF 26 02 F6 | 	mov	local01, result3
0debc     0C 4E 05 F1 | 	add	fp, #12
0dec0     A7 1A 62 FC | 	wrlong	arg05, fp
0dec4     04 4E 05 F1 | 	add	fp, #4
0dec8     A7 18 62 FC | 	wrlong	arg04, fp
0decc     04 4E 05 F1 | 	add	fp, #4
0ded0     A7 26 62 FC | 	wrlong	local01, fp
0ded4     14 4E 85 F1 | 	sub	fp, #20
0ded8     04 EA BF FD | 	call	#_pop
0dedc     A7 FA 61 FC | 	wrlong	result1, fp
0dee0     04 4E 05 F1 | 	add	fp, #4
0dee4     A7 FC 61 FC | 	wrlong	result2, fp
0dee8     04 4E 05 F1 | 	add	fp, #4
0deec     A7 FE 61 FC | 	wrlong	result3, fp
0def0                 | ' 
0def0                 | ' t4=pop()
0def0                 | ' t3=pop()
0def0                 | ' t2=pop()
0def0                 | ' t1=pop()
0def0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0def0     FF 1A 02 F6 | 	mov	arg05, result3
0def4     08 4E 85 F1 | 	sub	fp, #8
0def8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0defc     08 4E 05 51 |  if_ne	add	fp, #8
0df00     A7 26 02 5B |  if_ne	rdlong	local01, fp
0df04     08 4E 85 51 |  if_ne	sub	fp, #8
0df08     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0df0c     A8 00 90 5D |  if_ne	jmp	#LR__1200
0df10     14 4E 05 F1 | 	add	fp, #20
0df14     A7 26 02 FB | 	rdlong	local01, fp
0df18     14 4E 85 F1 | 	sub	fp, #20
0df1c     1C 26 0E F2 | 	cmp	local01, #28 wz
0df20     14 4E 05 51 |  if_ne	add	fp, #20
0df24     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0df28     14 4E 85 51 |  if_ne	sub	fp, #20
0df2c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0df30     84 00 90 5D |  if_ne	jmp	#LR__1200
0df34     20 4E 05 F1 | 	add	fp, #32
0df38     A7 26 02 FB | 	rdlong	local01, fp
0df3c     20 4E 85 F1 | 	sub	fp, #32
0df40     1C 26 0E F2 | 	cmp	local01, #28 wz
0df44     20 4E 05 51 |  if_ne	add	fp, #32
0df48     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0df4c     20 4E 85 51 |  if_ne	sub	fp, #32
0df50     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0df54     60 00 90 5D |  if_ne	jmp	#LR__1200
0df58     2C 4E 05 F1 | 	add	fp, #44
0df5c     A7 26 02 FB | 	rdlong	local01, fp
0df60     2C 4E 85 F1 | 	sub	fp, #44
0df64     1C 26 0E F2 | 	cmp	local01, #28 wz
0df68     2C 4E 05 51 |  if_ne	add	fp, #44
0df6c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0df70     2C 4E 85 51 |  if_ne	sub	fp, #44
0df74     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0df78     3C 00 90 5D |  if_ne	jmp	#LR__1200
0df7c     A7 12 02 FB | 	rdlong	arg01, fp
0df80     0C 4E 05 F1 | 	add	fp, #12
0df84     A7 14 02 FB | 	rdlong	arg02, fp
0df88     0C 4E 05 F1 | 	add	fp, #12
0df8c     A7 16 02 FB | 	rdlong	arg03, fp
0df90     0C 4E 05 F1 | 	add	fp, #12
0df94     A7 18 02 FB | 	rdlong	arg04, fp
0df98     24 4E 85 F1 | 	sub	fp, #36
0df9c     37 00 00 FF 
0dfa0     28 E4 05 F1 | 	add	objptr, ##28200
0dfa4     F2 1A 02 FB | 	rdlong	arg05, objptr
0dfa8     37 00 00 FF 
0dfac     28 E4 85 F1 | 	sub	objptr, ##28200
0dfb0     DC 30 B1 FD | 	call	#_hg010b_spin2_box
0dfb4                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0dfb4     6C 00 90 FD | 	jmp	#LR__1201
0dfb8                 | LR__1200
0dfb8     A7 12 02 F6 | 	mov	arg01, fp
0dfbc     04 EB BF FD | 	call	#_converttoint
0dfc0     FD 28 02 F6 | 	mov	local02, result1
0dfc4     0C 4E 05 F1 | 	add	fp, #12
0dfc8     A7 12 02 F6 | 	mov	arg01, fp
0dfcc     0C 4E 85 F1 | 	sub	fp, #12
0dfd0     F0 EA BF FD | 	call	#_converttoint
0dfd4     FD 2A 02 F6 | 	mov	local03, result1
0dfd8     18 4E 05 F1 | 	add	fp, #24
0dfdc     A7 12 02 F6 | 	mov	arg01, fp
0dfe0     18 4E 85 F1 | 	sub	fp, #24
0dfe4     DC EA BF FD | 	call	#_converttoint
0dfe8     FD 26 02 F6 | 	mov	local01, result1
0dfec     24 4E 05 F1 | 	add	fp, #36
0dff0     A7 12 02 F6 | 	mov	arg01, fp
0dff4     24 4E 85 F1 | 	sub	fp, #36
0dff8     C8 EA BF FD | 	call	#_converttoint
0dffc     FD 18 02 F6 | 	mov	arg04, result1
0e000     37 00 00 FF 
0e004     28 E4 05 F1 | 	add	objptr, ##28200
0e008     F2 1A 02 FB | 	rdlong	arg05, objptr
0e00c     37 00 00 FF 
0e010     28 E4 85 F1 | 	sub	objptr, ##28200
0e014     14 13 02 F6 | 	mov	arg01, local02
0e018     15 15 02 F6 | 	mov	arg02, local03
0e01c     13 17 02 F6 | 	mov	arg03, local01
0e020     6C 30 B1 FD | 	call	#_hg010b_spin2_box
0e024                 | LR__1201
0e024     A7 F0 03 F6 | 	mov	ptra, fp
0e028     B2 00 A0 FD | 	call	#popregs_
0e02c                 | _do_box_ret
0e02c     2D 00 64 FD | 	ret
0e030                 | 
0e030                 | ' 
0e030                 | ' '-------------------- brun
0e030                 | ' 
0e030                 | ' sub do_brun
0e030                 | _do_brun
0e030     08 4A 05 F6 | 	mov	COUNT_, #8
0e034     A8 00 A0 FD | 	call	#pushregs_
0e038     A4 E8 BF FD | 	call	#_pop
0e03c     FE 1A 02 F6 | 	mov	arg05, result2
0e040     FF 18 02 F6 | 	mov	arg04, result3
0e044     FD 26 02 F6 | 	mov	local01, result1
0e048     0D 29 02 F6 | 	mov	local02, arg05
0e04c     0C 2B 02 F6 | 	mov	local03, arg04
0e050                 | ' 
0e050                 | ' t1=pop() 
0e050                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e050     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e054     10 00 90 5D |  if_ne	jmp	#LR__1210
0e058     13 13 02 F6 | 	mov	arg01, local01
0e05c     F8 E9 BF FD | 	call	#_convertstring
0e060     FD 26 02 F6 | 	mov	local01, result1
0e064     1F 2A 06 F6 | 	mov	local03, #31
0e068                 | LR__1210
0e068                 | ' if t1.result_type=result_string then
0e068     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e06c     EC 01 90 5D |  if_ne	jmp	#LR__1214
0e070     13 2D 02 F6 | 	mov	local04, local01
0e074                 | '   filename=t1.result.sresult
0e074                 | '   if left$(filename,1)="/" then 
0e074     16 13 02 F6 | 	mov	arg01, local04
0e078     01 14 06 F6 | 	mov	arg02, #1
0e07c     90 6F B1 FD | 	call	#__system__Left_S
0e080     FD 12 02 F6 | 	mov	arg01, result1
0e084     98 01 00 FF 
0e088     EB 15 06 F6 | 	mov	arg02, ##@LR__5612
0e08c     2C 4F B1 FD | 	call	#__system___string_cmp
0e090     00 FA 0D F2 | 	cmp	result1, #0 wz
0e094     16 2F 02 A6 |  if_e	mov	local05, local04
0e098     14 00 90 AD |  if_e	jmp	#LR__1211
0e09c     98 01 00 FF 
0e0a0     ED 13 06 F6 | 	mov	arg01, ##@LR__5613
0e0a4     16 15 02 F6 | 	mov	arg02, local04
0e0a8     44 4F B1 FD | 	call	#__system___string_concat
0e0ac     FD 2E 02 F6 | 	mov	local05, result1
0e0b0                 | LR__1211
0e0b0                 | '   open fullfilename for input as #9
0e0b0     09 12 06 F6 | 	mov	arg01, #9
0e0b4     17 15 02 F6 | 	mov	arg02, local05
0e0b8     00 16 06 F6 | 	mov	arg03, #0
0e0bc     D8 5A B1 FD | 	call	#__system___basic_open_string
0e0c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e0c4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e0c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e0cc     FD 30 0A F6 | 	mov	local06, result1 wz
0e0d0                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e0d0     8C 00 90 AD |  if_e	jmp	#LR__1212
0e0d4     00 12 06 F6 | 	mov	arg01, #0
0e0d8     E0 AB B1 FD | 	call	#__system___getiolock_0558
0e0dc     FD 12 02 F6 | 	mov	arg01, result1
0e0e0     B0 4E B1 FD | 	call	#__system___lockmem
0e0e4     98 01 00 FF 
0e0e8     F6 15 06 F6 | 	mov	arg02, ##@LR__5614
0e0ec     00 12 06 F6 | 	mov	arg01, #0
0e0f0     00 16 06 F6 | 	mov	arg03, #0
0e0f4     90 5B B1 FD | 	call	#__system___basic_print_string
0e0f8     00 12 06 F6 | 	mov	arg01, #0
0e0fc     18 15 02 F6 | 	mov	arg02, local06
0e100     00 16 06 F6 | 	mov	arg03, #0
0e104     0A 18 06 F6 | 	mov	arg04, #10
0e108     C0 5B B1 FD | 	call	#__system___basic_print_integer
0e10c     99 01 00 FF 
0e110     04 14 06 F6 | 	mov	arg02, ##@LR__5615
0e114     00 12 06 F6 | 	mov	arg01, #0
0e118     00 16 06 F6 | 	mov	arg03, #0
0e11c     68 5B B1 FD | 	call	#__system___basic_print_string
0e120     18 13 02 F6 | 	mov	arg01, local06
0e124     F8 77 B1 FD | 	call	#__system___strerror
0e128     FD 14 02 F6 | 	mov	arg02, result1
0e12c     00 12 06 F6 | 	mov	arg01, #0
0e130     00 16 06 F6 | 	mov	arg03, #0
0e134     50 5B B1 FD | 	call	#__system___basic_print_string
0e138     00 12 06 F6 | 	mov	arg01, #0
0e13c     0A 14 06 F6 | 	mov	arg02, #10
0e140     00 16 06 F6 | 	mov	arg03, #0
0e144     E8 5A B1 FD | 	call	#__system___basic_print_char
0e148     00 12 06 F6 | 	mov	arg01, #0
0e14c     6C AB B1 FD | 	call	#__system___getiolock_0558
0e150     FD 00 68 FC | 	wrlong	#0, result1
0e154     09 12 06 F6 | 	mov	arg01, #9
0e158     90 A1 B1 FD | 	call	#__system__close
0e15c     FC 00 90 FD | 	jmp	#LR__1215
0e160                 | LR__1212
0e160     01 32 06 F6 | 	mov	local07, #1
0e164     00 34 06 F6 | 	mov	local08, #0
0e168                 | '   do
0e168                 | LR__1213
0e168                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e168     4E 00 00 FF 
0e16c     B4 E4 05 F1 | 	add	objptr, ##40116
0e170     F2 16 02 F6 | 	mov	arg03, objptr
0e174     4E 00 00 FF 
0e178     B4 E4 85 F1 | 	sub	objptr, ##40116
0e17c     09 12 06 F6 | 	mov	arg01, #9
0e180     19 15 02 F6 | 	mov	arg02, local07
0e184     0A 18 C6 F9 | 	decod	arg04, #10
0e188     01 1A 06 F6 | 	mov	arg05, #1
0e18c     74 5C B1 FD | 	call	#__system___basic_get
0e190     FD 30 02 F6 | 	mov	local06, result1
0e194     FD 32 02 F1 | 	add	local07, result1
0e198     4E 00 00 FF 
0e19c     B4 E4 05 F1 | 	add	objptr, ##40116
0e1a0     F2 12 02 F6 | 	mov	arg01, objptr
0e1a4     1A 15 02 F6 | 	mov	arg02, local08
0e1a8     0A 16 C6 F9 | 	decod	arg03, #10
0e1ac     42 00 00 FF 
0e1b0     E8 E5 85 F1 | 	sub	objptr, ##34280
0e1b4     38 42 B1 FD | 	call	#_psram_spin2_write
0e1b8     0B 00 00 FF 
0e1bc     CC E4 85 F1 | 	sub	objptr, ##5836
0e1c0     18 35 02 F1 | 	add	local08, local06
0e1c4     02 00 00 FF 
0e1c8     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e1cc     E0 03 00 AF 
0e1d0     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e1d4     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1213
0e1d8     36 00 00 FF 
0e1dc     FC E5 05 F1 | 	add	objptr, ##28156
0e1e0     F2 12 02 FB | 	rdlong	arg01, objptr
0e1e4     03 12 62 FD | 	cogstop	arg01
0e1e8     04 E4 05 F1 | 	add	objptr, #4
0e1ec     F2 12 02 FB | 	rdlong	arg01, objptr
0e1f0     03 12 62 FD | 	cogstop	arg01
0e1f4     04 E4 05 F1 | 	add	objptr, #4
0e1f8     F2 12 02 FB | 	rdlong	arg01, objptr
0e1fc     03 12 62 FD | 	cogstop	arg01
0e200     19 00 00 FF 
0e204     14 E5 05 F1 | 	add	objptr, ##13076
0e208     F2 12 02 FB | 	rdlong	arg01, objptr
0e20c     03 12 62 FD | 	cogstop	arg01
0e210     18 00 00 FF 
0e214     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e218     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e21c     18 00 00 FF 
0e220     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e224     19 00 00 FF 
0e228     0C E5 85 F1 | 	sub	objptr, ##13068
0e22c     1E 34 06 F6 | 	mov	local08, #30
0e230     28 E4 61 FD | 	setq	objptr
0e234     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e238     01 34 66 C6 |  if_b	neg	local08, #1
0e23c     1B 00 00 FF 
0e240     1C E4 05 F1 | 	add	objptr, ##13852
0e244     F2 34 62 FC | 	wrlong	local08, objptr
0e248     52 00 00 FF 
0e24c     28 E4 85 F1 | 	sub	objptr, ##42024
0e250     00 12 06 F6 | 	mov	arg01, #0
0e254     01 12 62 FD | 	cogid	arg01
0e258     03 12 62 FD | 	cogstop	arg01
0e25c                 | LR__1214
0e25c                 | LR__1215
0e25c     A7 F0 03 F6 | 	mov	ptra, fp
0e260     B2 00 A0 FD | 	call	#popregs_
0e264                 | _do_brun_ret
0e264     2D 00 64 FD | 	ret
0e268                 | 
0e268                 | ' 
0e268                 | ' '-------------------- cd
0e268                 | ' 
0e268                 | ' sub do_cd
0e268                 | _do_cd
0e268     06 4A 05 F6 | 	mov	COUNT_, #6
0e26c     A8 00 A0 FD | 	call	#pushregs_
0e270     99 01 00 FF 
0e274     07 12 06 F6 | 	mov	arg01, ##@LR__5616
0e278     31 14 06 F6 | 	mov	arg02, #49
0e27c     74 AB B1 FD | 	call	#__system___basic_dir
0e280     5C E6 BF FD | 	call	#_pop
0e284     FE 18 02 F6 | 	mov	arg04, result2
0e288     FF 16 02 F6 | 	mov	arg03, result3
0e28c     FD 26 02 F6 | 	mov	local01, result1
0e290     0C 29 02 F6 | 	mov	local02, arg04
0e294     0B 2B 02 F6 | 	mov	local03, arg03
0e298                 | ' t1=pop()
0e298                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e298     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e29c     10 00 90 5D |  if_ne	jmp	#LR__1220
0e2a0     13 13 02 F6 | 	mov	arg01, local01
0e2a4     B0 E7 BF FD | 	call	#_convertstring
0e2a8     FD 26 02 F6 | 	mov	local01, result1
0e2ac     1F 2A 06 F6 | 	mov	local03, #31
0e2b0                 | LR__1220
0e2b0                 | ' if t1.result_type<>result_string then printerror(15): return
0e2b0     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e2b4     10 00 90 AD |  if_e	jmp	#LR__1221
0e2b8     0F 12 06 F6 | 	mov	arg01, #15
0e2bc     00 14 06 F6 | 	mov	arg02, #0
0e2c0     40 13 B1 FD | 	call	#_printerror
0e2c4     48 05 90 FD | 	jmp	#LR__1239
0e2c8                 | LR__1221
0e2c8     13 2D 02 F6 | 	mov	local04, local01
0e2cc                 | ' newdir$=t1.result.sresult
0e2cc                 | ' if newdir$=".." then 
0e2cc     99 01 00 FF 
0e2d0     09 14 06 F6 | 	mov	arg02, ##@LR__5617
0e2d4     16 13 02 F6 | 	mov	arg01, local04
0e2d8     E0 4C B1 FD | 	call	#__system___string_cmp
0e2dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0e2e0     C4 01 90 5D |  if_ne	jmp	#LR__1228
0e2e4     4A 00 00 FF 
0e2e8     94 E4 05 F1 | 	add	objptr, ##38036
0e2ec     F2 12 02 FB | 	rdlong	arg01, objptr
0e2f0     4A 00 00 FF 
0e2f4     94 E4 85 F1 | 	sub	objptr, ##38036
0e2f8     09 2F 02 F6 | 	mov	local05, arg01
0e2fc     97 06 48 FB | 	callpa	#(@LR__1223-@LR__1222)>>2,fcache_load_ptr_
0e300                 | LR__1222
0e300     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e304     01 2E 06 51 |  if_ne	add	local05, #1
0e308     F4 FF 9F 5D |  if_ne	jmp	#LR__1222
0e30c                 | LR__1223
0e30c     17 13 C2 F2 | 	subr	arg01, local05
0e310     4A 00 00 FF 
0e314     94 E4 05 F1 | 	add	objptr, ##38036
0e318     F2 14 02 FB | 	rdlong	arg02, objptr
0e31c     4A 00 00 FF 
0e320     94 E4 85 F1 | 	sub	objptr, ##38036
0e324     99 01 00 FF 
0e328     0C 16 06 F6 | 	mov	arg03, ##@LR__5618
0e32c     2C 73 B1 FD | 	call	#__system__InstrRev
0e330     FD 2C 02 F6 | 	mov	local04, result1
0e334                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e334     02 2C 56 F2 | 	cmps	local04, #2 wc
0e338     28 00 90 CD |  if_b	jmp	#LR__1224
0e33c     4A 00 00 FF 
0e340     94 E4 05 F1 | 	add	objptr, ##38036
0e344     F2 12 02 FB | 	rdlong	arg01, objptr
0e348     4A 00 00 FF 
0e34c     94 E4 85 F1 | 	sub	objptr, ##38036
0e350     01 2C 86 F1 | 	sub	local04, #1
0e354     16 15 02 F6 | 	mov	arg02, local04
0e358     B4 6C B1 FD | 	call	#__system__Left_S
0e35c     FD 2C 02 F6 | 	mov	local04, result1
0e360     08 00 90 FD | 	jmp	#LR__1225
0e364                 | LR__1224
0e364     99 01 00 FF 
0e368     0E 2C 06 F6 | 	mov	local04, ##@LR__5619
0e36c                 | LR__1225
0e36c     16 13 02 F6 | 	mov	arg01, local04
0e370     AC 52 B1 FD | 	call	#__system___chdir
0e374     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e378     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e37c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e380     FD 30 0A F6 | 	mov	local06, result1 wz
0e384                 | '   chdir newdir$
0e384                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e384     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e388     A4 00 90 AD |  if_e	jmp	#LR__1226
0e38c     00 12 06 F6 | 	mov	arg01, #0
0e390     28 A9 B1 FD | 	call	#__system___getiolock_0558
0e394     FD 12 02 F6 | 	mov	arg01, result1
0e398     F8 4B B1 FD | 	call	#__system___lockmem
0e39c     99 01 00 FF 
0e3a0     10 14 06 F6 | 	mov	arg02, ##@LR__5620
0e3a4     00 12 06 F6 | 	mov	arg01, #0
0e3a8     00 16 06 F6 | 	mov	arg03, #0
0e3ac     D8 58 B1 FD | 	call	#__system___basic_print_string
0e3b0     00 12 06 F6 | 	mov	arg01, #0
0e3b4     18 15 02 F6 | 	mov	arg02, local06
0e3b8     00 16 06 F6 | 	mov	arg03, #0
0e3bc     0A 18 06 F6 | 	mov	arg04, #10
0e3c0     08 59 B1 FD | 	call	#__system___basic_print_integer
0e3c4     99 01 00 FF 
0e3c8     1E 14 06 F6 | 	mov	arg02, ##@LR__5621
0e3cc     00 12 06 F6 | 	mov	arg01, #0
0e3d0     00 16 06 F6 | 	mov	arg03, #0
0e3d4     B0 58 B1 FD | 	call	#__system___basic_print_string
0e3d8     45 00 00 FF 
0e3dc     50 E5 05 F1 | 	add	objptr, ##35664
0e3e0     F2 14 02 FB | 	rdlong	arg02, objptr
0e3e4     45 00 00 FF 
0e3e8     50 E5 85 F1 | 	sub	objptr, ##35664
0e3ec     00 12 06 F6 | 	mov	arg01, #0
0e3f0     00 16 06 F6 | 	mov	arg03, #0
0e3f4     90 58 B1 FD | 	call	#__system___basic_print_string
0e3f8     00 12 06 F6 | 	mov	arg01, #0
0e3fc     0A 14 06 F6 | 	mov	arg02, #10
0e400     00 16 06 F6 | 	mov	arg03, #0
0e404     28 58 B1 FD | 	call	#__system___basic_print_char
0e408     00 12 06 F6 | 	mov	arg01, #0
0e40c     AC A8 B1 FD | 	call	#__system___getiolock_0558
0e410     FD 00 68 FC | 	wrlong	#0, result1
0e414     4A 00 00 FF 
0e418     94 E4 05 F1 | 	add	objptr, ##38036
0e41c     F2 12 02 FB | 	rdlong	arg01, objptr
0e420     4A 00 00 FF 
0e424     94 E4 85 F1 | 	sub	objptr, ##38036
0e428     F4 51 B1 FD | 	call	#__system___chdir
0e42c     14 00 90 FD | 	jmp	#LR__1227
0e430                 | LR__1226
0e430     4A 00 00 FF 
0e434     94 E4 05 F1 | 	add	objptr, ##38036
0e438     F2 2C 62 FC | 	wrlong	local04, objptr
0e43c     4A 00 00 FF 
0e440     94 E4 85 F1 | 	sub	objptr, ##38036
0e444                 | LR__1227
0e444                 | '   print "Current directory: ";currentdir$
0e444     00 12 06 F6 | 	mov	arg01, #0
0e448     70 A8 B1 FD | 	call	#__system___getiolock_0558
0e44c     FD 12 02 F6 | 	mov	arg01, result1
0e450     40 4B B1 FD | 	call	#__system___lockmem
0e454     99 01 00 FF 
0e458     21 14 06 F6 | 	mov	arg02, ##@LR__5622
0e45c     00 12 06 F6 | 	mov	arg01, #0
0e460     00 16 06 F6 | 	mov	arg03, #0
0e464     20 58 B1 FD | 	call	#__system___basic_print_string
0e468     4A 00 00 FF 
0e46c     94 E4 05 F1 | 	add	objptr, ##38036
0e470     F2 14 02 FB | 	rdlong	arg02, objptr
0e474     4A 00 00 FF 
0e478     94 E4 85 F1 | 	sub	objptr, ##38036
0e47c     00 12 06 F6 | 	mov	arg01, #0
0e480     00 16 06 F6 | 	mov	arg03, #0
0e484     00 58 B1 FD | 	call	#__system___basic_print_string
0e488     00 12 06 F6 | 	mov	arg01, #0
0e48c     0A 14 06 F6 | 	mov	arg02, #10
0e490     00 16 06 F6 | 	mov	arg03, #0
0e494     98 57 B1 FD | 	call	#__system___basic_print_char
0e498     00 12 06 F6 | 	mov	arg01, #0
0e49c     1C A8 B1 FD | 	call	#__system___getiolock_0558
0e4a0     FD 00 68 FC | 	wrlong	#0, result1
0e4a4                 | '   return
0e4a4     68 03 90 FD | 	jmp	#LR__1239
0e4a8                 | LR__1228
0e4a8                 | ' if left$(newdir$,1)="/" then 
0e4a8     16 13 02 F6 | 	mov	arg01, local04
0e4ac     01 14 06 F6 | 	mov	arg02, #1
0e4b0     5C 6B B1 FD | 	call	#__system__Left_S
0e4b4     FD 12 02 F6 | 	mov	arg01, result1
0e4b8     99 01 00 FF 
0e4bc     35 14 06 F6 | 	mov	arg02, ##@LR__5623
0e4c0     F8 4A B1 FD | 	call	#__system___string_cmp
0e4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e4c8     3C 01 90 5D |  if_ne	jmp	#LR__1231
0e4cc     16 13 02 F6 | 	mov	arg01, local04
0e4d0     4C 51 B1 FD | 	call	#__system___chdir
0e4d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4d8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e4dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4e0     FD 30 0A F6 | 	mov	local06, result1 wz
0e4e4                 | '   chdir(newdir$)
0e4e4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e4e4     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e4e8     A4 00 90 AD |  if_e	jmp	#LR__1229
0e4ec     00 12 06 F6 | 	mov	arg01, #0
0e4f0     C8 A7 B1 FD | 	call	#__system___getiolock_0558
0e4f4     FD 12 02 F6 | 	mov	arg01, result1
0e4f8     98 4A B1 FD | 	call	#__system___lockmem
0e4fc     99 01 00 FF 
0e500     37 14 06 F6 | 	mov	arg02, ##@LR__5624
0e504     00 12 06 F6 | 	mov	arg01, #0
0e508     00 16 06 F6 | 	mov	arg03, #0
0e50c     78 57 B1 FD | 	call	#__system___basic_print_string
0e510     00 12 06 F6 | 	mov	arg01, #0
0e514     18 15 02 F6 | 	mov	arg02, local06
0e518     00 16 06 F6 | 	mov	arg03, #0
0e51c     0A 18 06 F6 | 	mov	arg04, #10
0e520     A8 57 B1 FD | 	call	#__system___basic_print_integer
0e524     99 01 00 FF 
0e528     45 14 06 F6 | 	mov	arg02, ##@LR__5625
0e52c     00 12 06 F6 | 	mov	arg01, #0
0e530     00 16 06 F6 | 	mov	arg03, #0
0e534     50 57 B1 FD | 	call	#__system___basic_print_string
0e538     45 00 00 FF 
0e53c     50 E5 05 F1 | 	add	objptr, ##35664
0e540     F2 14 02 FB | 	rdlong	arg02, objptr
0e544     45 00 00 FF 
0e548     50 E5 85 F1 | 	sub	objptr, ##35664
0e54c     00 12 06 F6 | 	mov	arg01, #0
0e550     00 16 06 F6 | 	mov	arg03, #0
0e554     30 57 B1 FD | 	call	#__system___basic_print_string
0e558     00 12 06 F6 | 	mov	arg01, #0
0e55c     0A 14 06 F6 | 	mov	arg02, #10
0e560     00 16 06 F6 | 	mov	arg03, #0
0e564     C8 56 B1 FD | 	call	#__system___basic_print_char
0e568     00 12 06 F6 | 	mov	arg01, #0
0e56c     4C A7 B1 FD | 	call	#__system___getiolock_0558
0e570     FD 00 68 FC | 	wrlong	#0, result1
0e574     4A 00 00 FF 
0e578     94 E4 05 F1 | 	add	objptr, ##38036
0e57c     F2 12 02 FB | 	rdlong	arg01, objptr
0e580     4A 00 00 FF 
0e584     94 E4 85 F1 | 	sub	objptr, ##38036
0e588     94 50 B1 FD | 	call	#__system___chdir
0e58c     14 00 90 FD | 	jmp	#LR__1230
0e590                 | LR__1229
0e590     4A 00 00 FF 
0e594     94 E4 05 F1 | 	add	objptr, ##38036
0e598     F2 2C 62 FC | 	wrlong	local04, objptr
0e59c     4A 00 00 FF 
0e5a0     94 E4 85 F1 | 	sub	objptr, ##38036
0e5a4                 | LR__1230
0e5a4                 | '   print "Current directory: ";currentdir$
0e5a4     00 12 06 F6 | 	mov	arg01, #0
0e5a8     10 A7 B1 FD | 	call	#__system___getiolock_0558
0e5ac     FD 12 02 F6 | 	mov	arg01, result1
0e5b0     E0 49 B1 FD | 	call	#__system___lockmem
0e5b4     99 01 00 FF 
0e5b8     48 14 06 F6 | 	mov	arg02, ##@LR__5626
0e5bc     00 12 06 F6 | 	mov	arg01, #0
0e5c0     00 16 06 F6 | 	mov	arg03, #0
0e5c4     C0 56 B1 FD | 	call	#__system___basic_print_string
0e5c8     4A 00 00 FF 
0e5cc     94 E4 05 F1 | 	add	objptr, ##38036
0e5d0     F2 14 02 FB | 	rdlong	arg02, objptr
0e5d4     4A 00 00 FF 
0e5d8     94 E4 85 F1 | 	sub	objptr, ##38036
0e5dc     00 12 06 F6 | 	mov	arg01, #0
0e5e0     00 16 06 F6 | 	mov	arg03, #0
0e5e4     A0 56 B1 FD | 	call	#__system___basic_print_string
0e5e8     00 12 06 F6 | 	mov	arg01, #0
0e5ec     0A 14 06 F6 | 	mov	arg02, #10
0e5f0     00 16 06 F6 | 	mov	arg03, #0
0e5f4     38 56 B1 FD | 	call	#__system___basic_print_char
0e5f8     00 12 06 F6 | 	mov	arg01, #0
0e5fc     BC A6 B1 FD | 	call	#__system___getiolock_0558
0e600     FD 00 68 FC | 	wrlong	#0, result1
0e604                 | '   return
0e604     08 02 90 FD | 	jmp	#LR__1239
0e608                 | LR__1231
0e608                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e608     4A 00 00 FF 
0e60c     94 E4 05 F1 | 	add	objptr, ##38036
0e610     F2 12 02 FB | 	rdlong	arg01, objptr
0e614     4A 00 00 FF 
0e618     94 E4 85 F1 | 	sub	objptr, ##38036
0e61c     99 01 00 FF 
0e620     5C 14 06 F6 | 	mov	arg02, ##@LR__5627
0e624     94 49 B1 FD | 	call	#__system___string_cmp
0e628     00 FA 0D F2 | 	cmp	result1, #0 wz
0e62c     34 00 90 AD |  if_e	jmp	#LR__1232
0e630     4A 00 00 FF 
0e634     94 E4 05 F1 | 	add	objptr, ##38036
0e638     F2 12 02 FB | 	rdlong	arg01, objptr
0e63c     4A 00 00 FF 
0e640     94 E4 85 F1 | 	sub	objptr, ##38036
0e644     99 01 00 FF 
0e648     5E 14 06 F6 | 	mov	arg02, ##@LR__5628
0e64c     A0 49 B1 FD | 	call	#__system___string_concat
0e650     FD 12 02 F6 | 	mov	arg01, result1
0e654     16 15 02 F6 | 	mov	arg02, local04
0e658     94 49 B1 FD | 	call	#__system___string_concat
0e65c     FD 2C 02 F6 | 	mov	local04, result1
0e660     20 00 90 FD | 	jmp	#LR__1233
0e664                 | LR__1232
0e664     4A 00 00 FF 
0e668     94 E4 05 F1 | 	add	objptr, ##38036
0e66c     F2 12 02 FB | 	rdlong	arg01, objptr
0e670     4A 00 00 FF 
0e674     94 E4 85 F1 | 	sub	objptr, ##38036
0e678     16 15 02 F6 | 	mov	arg02, local04
0e67c     70 49 B1 FD | 	call	#__system___string_concat
0e680     FD 2C 02 F6 | 	mov	local04, result1
0e684                 | LR__1233
0e684                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0e684     16 13 02 F6 | 	mov	arg01, local04
0e688     01 14 06 F6 | 	mov	arg02, #1
0e68c     08 6A B1 FD | 	call	#__system__Right_S
0e690     FD 12 02 F6 | 	mov	arg01, result1
0e694     99 01 00 FF 
0e698     60 14 06 F6 | 	mov	arg02, ##@LR__5629
0e69c     1C 49 B1 FD | 	call	#__system___string_cmp
0e6a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0e6a4     30 00 90 5D |  if_ne	jmp	#LR__1236
0e6a8     16 13 02 F6 | 	mov	arg01, local04
0e6ac     09 2F 02 F6 | 	mov	local05, arg01
0e6b0     97 06 48 FB | 	callpa	#(@LR__1235-@LR__1234)>>2,fcache_load_ptr_
0e6b4                 | LR__1234
0e6b4     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e6b8     01 2E 06 51 |  if_ne	add	local05, #1
0e6bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1234
0e6c0                 | LR__1235
0e6c0     09 2F 82 F1 | 	sub	local05, arg01
0e6c4     17 15 02 F6 | 	mov	arg02, local05
0e6c8     01 14 86 F1 | 	sub	arg02, #1
0e6cc     16 13 02 F6 | 	mov	arg01, local04
0e6d0     3C 69 B1 FD | 	call	#__system__Left_S
0e6d4     FD 2C 02 F6 | 	mov	local04, result1
0e6d8                 | LR__1236
0e6d8     16 13 02 F6 | 	mov	arg01, local04
0e6dc     40 4F B1 FD | 	call	#__system___chdir
0e6e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e6e4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e6e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e6ec     FD 30 0A F6 | 	mov	local06, result1 wz
0e6f0                 | '   chdir(newdir$)
0e6f0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e6f0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e6f4     A4 00 90 AD |  if_e	jmp	#LR__1237
0e6f8     00 12 06 F6 | 	mov	arg01, #0
0e6fc     BC A5 B1 FD | 	call	#__system___getiolock_0558
0e700     FD 12 02 F6 | 	mov	arg01, result1
0e704     8C 48 B1 FD | 	call	#__system___lockmem
0e708     99 01 00 FF 
0e70c     62 14 06 F6 | 	mov	arg02, ##@LR__5630
0e710     00 12 06 F6 | 	mov	arg01, #0
0e714     00 16 06 F6 | 	mov	arg03, #0
0e718     6C 55 B1 FD | 	call	#__system___basic_print_string
0e71c     00 12 06 F6 | 	mov	arg01, #0
0e720     18 15 02 F6 | 	mov	arg02, local06
0e724     00 16 06 F6 | 	mov	arg03, #0
0e728     0A 18 06 F6 | 	mov	arg04, #10
0e72c     9C 55 B1 FD | 	call	#__system___basic_print_integer
0e730     99 01 00 FF 
0e734     70 14 06 F6 | 	mov	arg02, ##@LR__5631
0e738     00 12 06 F6 | 	mov	arg01, #0
0e73c     00 16 06 F6 | 	mov	arg03, #0
0e740     44 55 B1 FD | 	call	#__system___basic_print_string
0e744     45 00 00 FF 
0e748     50 E5 05 F1 | 	add	objptr, ##35664
0e74c     F2 14 02 FB | 	rdlong	arg02, objptr
0e750     45 00 00 FF 
0e754     50 E5 85 F1 | 	sub	objptr, ##35664
0e758     00 12 06 F6 | 	mov	arg01, #0
0e75c     00 16 06 F6 | 	mov	arg03, #0
0e760     24 55 B1 FD | 	call	#__system___basic_print_string
0e764     00 12 06 F6 | 	mov	arg01, #0
0e768     0A 14 06 F6 | 	mov	arg02, #10
0e76c     00 16 06 F6 | 	mov	arg03, #0
0e770     BC 54 B1 FD | 	call	#__system___basic_print_char
0e774     00 12 06 F6 | 	mov	arg01, #0
0e778     40 A5 B1 FD | 	call	#__system___getiolock_0558
0e77c     FD 00 68 FC | 	wrlong	#0, result1
0e780     4A 00 00 FF 
0e784     94 E4 05 F1 | 	add	objptr, ##38036
0e788     F2 12 02 FB | 	rdlong	arg01, objptr
0e78c     4A 00 00 FF 
0e790     94 E4 85 F1 | 	sub	objptr, ##38036
0e794     88 4E B1 FD | 	call	#__system___chdir
0e798     14 00 90 FD | 	jmp	#LR__1238
0e79c                 | LR__1237
0e79c     4A 00 00 FF 
0e7a0     94 E4 05 F1 | 	add	objptr, ##38036
0e7a4     F2 2C 62 FC | 	wrlong	local04, objptr
0e7a8     4A 00 00 FF 
0e7ac     94 E4 85 F1 | 	sub	objptr, ##38036
0e7b0                 | LR__1238
0e7b0                 | '   print "Current directory: ";currentdir$
0e7b0     00 12 06 F6 | 	mov	arg01, #0
0e7b4     04 A5 B1 FD | 	call	#__system___getiolock_0558
0e7b8     FD 12 02 F6 | 	mov	arg01, result1
0e7bc     D4 47 B1 FD | 	call	#__system___lockmem
0e7c0     99 01 00 FF 
0e7c4     73 14 06 F6 | 	mov	arg02, ##@LR__5632
0e7c8     00 12 06 F6 | 	mov	arg01, #0
0e7cc     00 16 06 F6 | 	mov	arg03, #0
0e7d0     B4 54 B1 FD | 	call	#__system___basic_print_string
0e7d4     4A 00 00 FF 
0e7d8     94 E4 05 F1 | 	add	objptr, ##38036
0e7dc     F2 14 02 FB | 	rdlong	arg02, objptr
0e7e0     4A 00 00 FF 
0e7e4     94 E4 85 F1 | 	sub	objptr, ##38036
0e7e8     00 12 06 F6 | 	mov	arg01, #0
0e7ec     00 16 06 F6 | 	mov	arg03, #0
0e7f0     94 54 B1 FD | 	call	#__system___basic_print_string
0e7f4     00 12 06 F6 | 	mov	arg01, #0
0e7f8     0A 14 06 F6 | 	mov	arg02, #10
0e7fc     00 16 06 F6 | 	mov	arg03, #0
0e800     2C 54 B1 FD | 	call	#__system___basic_print_char
0e804     00 12 06 F6 | 	mov	arg01, #0
0e808     B0 A4 B1 FD | 	call	#__system___getiolock_0558
0e80c     FD 00 68 FC | 	wrlong	#0, result1
0e810                 | LR__1239
0e810     A7 F0 03 F6 | 	mov	ptra, fp
0e814     B2 00 A0 FD | 	call	#popregs_
0e818                 | _do_cd_ret
0e818     2D 00 64 FD | 	ret
0e81c                 | 
0e81c                 | ' 
0e81c                 | ' '-------------------- changefreq
0e81c                 | ' 
0e81c                 | ' sub do_changefreq
0e81c                 | _do_changefreq
0e81c     04 4A 05 F6 | 	mov	COUNT_, #4
0e820     A8 00 A0 FD | 	call	#pushregs_
0e824     28 F0 07 F1 | 	add	ptra, #40
0e828     B4 E0 BF FD | 	call	#_pop
0e82c     FF 14 02 F6 | 	mov	arg02, result3
0e830     A7 FA 61 FC | 	wrlong	result1, fp
0e834     04 4E 05 F1 | 	add	fp, #4
0e838     A7 FC 61 FC | 	wrlong	result2, fp
0e83c     04 4E 05 F1 | 	add	fp, #4
0e840     A7 14 62 FC | 	wrlong	arg02, fp
0e844     08 4E 85 F1 | 	sub	fp, #8
0e848     A7 12 02 F6 | 	mov	arg01, fp
0e84c     30 E3 BF FD | 	call	#_converttofloat
0e850     24 4E 05 F1 | 	add	fp, #36
0e854     A7 FA 61 FC | 	wrlong	result1, fp
0e858     24 4E 85 F1 | 	sub	fp, #36
0e85c     FD 14 02 F6 | 	mov	arg02, result1
0e860     FC 16 20 FF 
0e864     54 12 06 F6 | 	mov	arg01, ##1076754516
0e868     70 85 B1 FD | 	call	#__system____builtin_logbase
0e86c     FD 26 02 F6 | 	mov	local01, result1
0e870     1E 14 C6 F9 | 	decod	arg02, #30
0e874     FC 16 20 FF 
0e878     54 12 06 F6 | 	mov	arg01, ##1076754516
0e87c     5C 85 B1 FD | 	call	#__system____builtin_logbase
0e880     FD 14 02 F6 | 	mov	arg02, result1
0e884     13 13 02 F6 | 	mov	arg01, local01
0e888     84 77 B1 FD | 	call	#__system___float_div
0e88c     FD 12 02 F6 | 	mov	arg01, result1
0e890     00 14 06 F6 | 	mov	arg02, #0
0e894     3C 7A B1 FD | 	call	#__system___float_tointeger
0e898     10 4E 05 F1 | 	add	fp, #16
0e89c     A7 FA 61 FC | 	wrlong	result1, fp
0e8a0     1E 26 C6 F9 | 	decod	local01, #30
0e8a4     FD 12 02 F6 | 	mov	arg01, result1
0e8a8     10 4E 85 F1 | 	sub	fp, #16
0e8ac     05 12 06 F1 | 	add	arg01, #5
0e8b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e8b4     1F 28 C6 C9 |  if_b	decod	local02, #31
0e8b8     00 28 06 36 |  if_ae	mov	local02, #0
0e8bc     48 71 B1 FD | 	call	#__system___float_fromuns
0e8c0     14 FB 61 F5 | 	xor	result1, local02
0e8c4     FD 14 02 F6 | 	mov	arg02, result1
0e8c8     13 13 02 F6 | 	mov	arg01, local01
0e8cc     44 84 B1 FD | 	call	#__system____builtin_powf
0e8d0     FD 12 02 F6 | 	mov	arg01, result1
0e8d4     01 14 06 F6 | 	mov	arg02, #1
0e8d8     F8 79 B1 FD | 	call	#__system___float_tointeger
0e8dc     14 4E 05 F1 | 	add	fp, #20
0e8e0     A7 FA 61 FC | 	wrlong	result1, fp
0e8e4                 | ' skip=round(2^(lfreq+5))
0e8e4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e8e4     14 4E 85 F1 | 	sub	fp, #20
0e8e8     40 00 00 FF 
0e8ec     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e8f0     30 00 90 CD |  if_b	jmp	#LR__1240
0e8f4     14 4E 05 F1 | 	add	fp, #20
0e8f8     A7 26 02 FB | 	rdlong	local01, fp
0e8fc     13 27 52 F6 | 	abs	local01, local01 wc
0e900     0F 26 46 F0 | 	shr	local01, #15
0e904     13 27 82 F6 | 	negc	local01, local01
0e908     04 4E 05 F1 | 	add	fp, #4
0e90c     A7 26 62 FC | 	wrlong	local01, fp
0e910     04 4E 85 F1 | 	sub	fp, #4
0e914     40 00 80 FF 
0e918     A7 00 68 FC | 	wrlong	##32768, fp
0e91c     14 4E 85 F1 | 	sub	fp, #20
0e920     0C 00 90 FD | 	jmp	#LR__1241
0e924                 | LR__1240
0e924     18 4E 05 F1 | 	add	fp, #24
0e928     A7 02 68 FC | 	wrlong	#1, fp
0e92c     18 4E 85 F1 | 	sub	fp, #24
0e930                 | LR__1241
0e930     24 4E 05 F1 | 	add	fp, #36
0e934     A7 14 02 FB | 	rdlong	arg02, fp
0e938     24 4E 85 F1 | 	sub	fp, #36
0e93c     3E 2C 25 FF 
0e940     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e944     C8 76 B1 FD | 	call	#__system___float_div
0e948     FD 26 02 F6 | 	mov	local01, result1
0e94c     18 4E 05 F1 | 	add	fp, #24
0e950     A7 12 02 FB | 	rdlong	arg01, fp
0e954     18 4E 85 F1 | 	sub	fp, #24
0e958     09 13 52 F6 | 	abs	arg01, arg01 wc
0e95c     1F 28 C6 C9 |  if_b	decod	local02, #31
0e960     00 28 06 36 |  if_ae	mov	local02, #0
0e964     A0 70 B1 FD | 	call	#__system___float_fromuns
0e968     14 FB 61 F5 | 	xor	result1, local02
0e96c     FD 2A 02 F6 | 	mov	local03, result1
0e970     1E 2C C6 F9 | 	decod	local04, #30
0e974     0D 12 06 F6 | 	mov	arg01, #13
0e978     10 4E 05 F1 | 	add	fp, #16
0e97c     A7 14 02 FB | 	rdlong	arg02, fp
0e980     10 4E 85 F1 | 	sub	fp, #16
0e984     0A 13 82 F1 | 	sub	arg01, arg02
0e988     09 13 52 F6 | 	abs	arg01, arg01 wc
0e98c     1F 28 C6 C9 |  if_b	decod	local02, #31
0e990     00 28 06 36 |  if_ae	mov	local02, #0
0e994     70 70 B1 FD | 	call	#__system___float_fromuns
0e998     14 FB 61 F5 | 	xor	result1, local02
0e99c     FD 14 02 F6 | 	mov	arg02, result1
0e9a0     16 13 02 F6 | 	mov	arg01, local04
0e9a4     6C 83 B1 FD | 	call	#__system____builtin_powf
0e9a8     FD 14 02 F6 | 	mov	arg02, result1
0e9ac     15 13 02 F6 | 	mov	arg01, local03
0e9b0     58 74 B1 FD | 	call	#__system___float_mul
0e9b4     FD 14 02 F6 | 	mov	arg02, result1
0e9b8     13 13 02 F6 | 	mov	arg01, local01
0e9bc     50 76 B1 FD | 	call	#__system___float_div
0e9c0     FD 12 02 F6 | 	mov	arg01, result1
0e9c4     01 14 06 F6 | 	mov	arg02, #1
0e9c8     08 79 B1 FD | 	call	#__system___float_tointeger
0e9cc     FD 26 02 F6 | 	mov	local01, result1
0e9d0     1C 4E 05 F1 | 	add	fp, #28
0e9d4     A7 26 62 FC | 	wrlong	local01, fp
0e9d8     1C 4E 85 F1 | 	sub	fp, #28
0e9dc     00 DF BF FD | 	call	#_pop
0e9e0     FF 2C 02 F6 | 	mov	local04, result3
0e9e4     A7 FA 61 FC | 	wrlong	result1, fp
0e9e8     04 4E 05 F1 | 	add	fp, #4
0e9ec     A7 FC 61 FC | 	wrlong	result2, fp
0e9f0     04 4E 05 F1 | 	add	fp, #4
0e9f4     A7 2C 62 FC | 	wrlong	local04, fp
0e9f8     08 4E 85 F1 | 	sub	fp, #8
0e9fc     A7 12 02 F6 | 	mov	arg01, fp
0ea00     C0 E0 BF FD | 	call	#_converttoint
0ea04     FD 2A 52 F6 | 	abs	local03, result1 wc
0ea08     07 2A 06 F5 | 	and	local03, #7
0ea0c     15 2B 82 F6 | 	negc	local03, local03
0ea10     0C 4E 05 F1 | 	add	fp, #12
0ea14     A7 2A 62 FC | 	wrlong	local03, fp
0ea18     08 4E 05 F1 | 	add	fp, #8
0ea1c     A7 26 02 FB | 	rdlong	local01, fp
0ea20     10 26 66 F0 | 	shl	local01, #16
0ea24     08 4E 05 F1 | 	add	fp, #8
0ea28     A7 2C 02 FB | 	rdlong	local04, fp
0ea2c     16 27 02 F1 | 	add	local01, local04
0ea30     04 4E 05 F1 | 	add	fp, #4
0ea34     A7 26 62 FC | 	wrlong	local01, fp
0ea38                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ea38     37 00 00 FF 
0ea3c     10 E4 05 F1 | 	add	objptr, ##28176
0ea40     F2 12 02 FB | 	rdlong	arg01, objptr
0ea44     37 00 00 FF 
0ea48     10 E4 85 F1 | 	sub	objptr, ##28176
0ea4c     14 4E 85 F1 | 	sub	fp, #20
0ea50     A7 2C 02 FB | 	rdlong	local04, fp
0ea54     0C 4E 85 F1 | 	sub	fp, #12
0ea58     06 2C 66 F0 | 	shl	local04, #6
0ea5c     16 13 02 F1 | 	add	arg01, local04
0ea60     08 12 06 F1 | 	add	arg01, #8
0ea64     09 FB 01 FB | 	rdlong	result1, arg01
0ea68     1B FA 2D F4 | 	testbn	result1, #27 wz
0ea6c     3C 00 90 5D |  if_ne	jmp	#LR__1242
0ea70     37 00 00 FF 
0ea74     10 E4 05 F1 | 	add	objptr, ##28176
0ea78     F2 12 02 FB | 	rdlong	arg01, objptr
0ea7c     37 00 00 FF 
0ea80     10 E4 85 F1 | 	sub	objptr, ##28176
0ea84     0C 4E 05 F1 | 	add	fp, #12
0ea88     A7 2C 02 FB | 	rdlong	local04, fp
0ea8c     06 2C 66 F0 | 	shl	local04, #6
0ea90     16 13 02 F1 | 	add	arg01, local04
0ea94     18 12 06 F1 | 	add	arg01, #24
0ea98     14 4E 05 F1 | 	add	fp, #20
0ea9c     A7 14 02 FB | 	rdlong	arg02, fp
0eaa0     20 4E 85 F1 | 	sub	fp, #32
0eaa4     09 15 62 FC | 	wrlong	arg02, arg01
0eaa8     80 00 90 FD | 	jmp	#LR__1243
0eaac                 | LR__1242
0eaac     37 00 00 FF 
0eab0     10 E4 05 F1 | 	add	objptr, ##28176
0eab4     F2 26 02 FB | 	rdlong	local01, objptr
0eab8     37 00 00 FF 
0eabc     10 E4 85 F1 | 	sub	objptr, ##28176
0eac0     0C 4E 05 F1 | 	add	fp, #12
0eac4     A7 2C 02 FB | 	rdlong	local04, fp
0eac8     06 2C 66 F0 | 	shl	local04, #6
0eacc     16 27 02 F1 | 	add	local01, local04
0ead0     18 26 06 F1 | 	add	local01, #24
0ead4     18 4E 05 F1 | 	add	fp, #24
0ead8     A7 14 02 FB | 	rdlong	arg02, fp
0eadc     24 4E 85 F1 | 	sub	fp, #36
0eae0     3E 2C 25 FF 
0eae4     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eae8     24 75 B1 FD | 	call	#__system___float_div
0eaec     FD 12 02 F6 | 	mov	arg01, result1
0eaf0     01 14 06 F6 | 	mov	arg02, #1
0eaf4     DC 77 B1 FD | 	call	#__system___float_tointeger
0eaf8     13 FB 51 FC | 	wrword	result1, local01
0eafc     37 00 00 FF 
0eb00     10 E4 05 F1 | 	add	objptr, ##28176
0eb04     F2 12 02 FB | 	rdlong	arg01, objptr
0eb08     37 00 00 FF 
0eb0c     10 E4 85 F1 | 	sub	objptr, ##28176
0eb10     0C 4E 05 F1 | 	add	fp, #12
0eb14     A7 2C 02 FB | 	rdlong	local04, fp
0eb18     0C 4E 85 F1 | 	sub	fp, #12
0eb1c     06 2C 66 F0 | 	shl	local04, #6
0eb20     16 13 02 F1 | 	add	arg01, local04
0eb24     1A 12 06 F1 | 	add	arg01, #26
0eb28     09 01 5A FC | 	wrword	#256, arg01
0eb2c                 | LR__1243
0eb2c     A7 F0 03 F6 | 	mov	ptra, fp
0eb30     B2 00 A0 FD | 	call	#popregs_
0eb34                 | _do_changefreq_ret
0eb34     2D 00 64 FD | 	ret
0eb38                 | 
0eb38                 | ' 
0eb38                 | ' '-------------------- changepan
0eb38                 | ' 
0eb38                 | ' sub do_changepan
0eb38                 | _do_changepan
0eb38     01 4A 05 F6 | 	mov	COUNT_, #1
0eb3c     A8 00 A0 FD | 	call	#pushregs_
0eb40     14 F0 07 F1 | 	add	ptra, #20
0eb44     98 DD BF FD | 	call	#_pop
0eb48     A7 FA 61 FC | 	wrlong	result1, fp
0eb4c     04 4E 05 F1 | 	add	fp, #4
0eb50     A7 FC 61 FC | 	wrlong	result2, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 FE 61 FC | 	wrlong	result3, fp
0eb5c     08 4E 85 F1 | 	sub	fp, #8
0eb60     00 00 23 FF 
0eb64     00 26 06 F6 | 	mov	local01, ##1174405120
0eb68     A7 12 02 F6 | 	mov	arg01, fp
0eb6c     10 E0 BF FD | 	call	#_converttofloat
0eb70     FD 14 02 F6 | 	mov	arg02, result1
0eb74     13 13 02 F6 | 	mov	arg01, local01
0eb78     90 72 B1 FD | 	call	#__system___float_mul
0eb7c     FD 12 02 F6 | 	mov	arg01, result1
0eb80     01 14 06 F6 | 	mov	arg02, #1
0eb84     4C 77 B1 FD | 	call	#__system___float_tointeger
0eb88     0D 26 C6 F9 | 	decod	local01, #13
0eb8c     FD 26 02 F1 | 	add	local01, result1
0eb90     10 4E 05 F1 | 	add	fp, #16
0eb94     A7 26 62 FC | 	wrlong	local01, fp
0eb98                 | ' 
0eb98                 | ' t1=pop()
0eb98                 | ' pan=8192+round(8192*converttofloat(t1)) 
0eb98                 | ' if pan<0 then pan=0
0eb98     10 4E 85 F1 | 	sub	fp, #16
0eb9c     00 26 56 F2 | 	cmps	local01, #0 wc
0eba0     10 4E 05 C1 |  if_b	add	fp, #16
0eba4     A7 00 68 CC |  if_b	wrlong	#0, fp
0eba8     10 4E 85 C1 |  if_b	sub	fp, #16
0ebac                 | ' if pan>16384 then pan=16384
0ebac     10 4E 05 F1 | 	add	fp, #16
0ebb0     A7 26 02 FB | 	rdlong	local01, fp
0ebb4     10 4E 85 F1 | 	sub	fp, #16
0ebb8     20 00 00 FF 
0ebbc     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ebc0     10 4E 05 31 |  if_ae	add	fp, #16
0ebc4     20 00 80 3F 
0ebc8     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ebcc     10 4E 85 31 |  if_ae	sub	fp, #16
0ebd0     0C DD BF FD | 	call	#_pop
0ebd4     FF 26 02 F6 | 	mov	local01, result3
0ebd8     A7 FA 61 FC | 	wrlong	result1, fp
0ebdc     04 4E 05 F1 | 	add	fp, #4
0ebe0     A7 FC 61 FC | 	wrlong	result2, fp
0ebe4     04 4E 05 F1 | 	add	fp, #4
0ebe8     A7 26 62 FC | 	wrlong	local01, fp
0ebec     08 4E 85 F1 | 	sub	fp, #8
0ebf0     A7 12 02 F6 | 	mov	arg01, fp
0ebf4     CC DE BF FD | 	call	#_converttoint
0ebf8     FD 26 52 F6 | 	abs	local01, result1 wc
0ebfc     07 26 06 F5 | 	and	local01, #7
0ec00     13 27 82 F6 | 	negc	local01, local01
0ec04     0C 4E 05 F1 | 	add	fp, #12
0ec08     A7 26 62 FC | 	wrlong	local01, fp
0ec0c     37 00 00 FF 
0ec10     10 E4 05 F1 | 	add	objptr, ##28176
0ec14     F2 12 02 FB | 	rdlong	arg01, objptr
0ec18     37 00 00 FF 
0ec1c     10 E4 85 F1 | 	sub	objptr, ##28176
0ec20     06 26 66 F0 | 	shl	local01, #6
0ec24     13 13 02 F1 | 	add	arg01, local01
0ec28     16 12 06 F1 | 	add	arg01, #22
0ec2c     04 4E 05 F1 | 	add	fp, #4
0ec30     A7 14 02 FB | 	rdlong	arg02, fp
0ec34     10 4E 85 F1 | 	sub	fp, #16
0ec38     09 15 52 FC | 	wrword	arg02, arg01
0ec3c     A7 F0 03 F6 | 	mov	ptra, fp
0ec40     B2 00 A0 FD | 	call	#popregs_
0ec44                 | _do_changepan_ret
0ec44     2D 00 64 FD | 	ret
0ec48                 | 
0ec48                 | ' 
0ec48                 | ' '-------------------- changevol
0ec48                 | ' 
0ec48                 | ' sub do_changevol
0ec48                 | _do_changevol
0ec48     00 4A 05 F6 | 	mov	COUNT_, #0
0ec4c     A8 00 A0 FD | 	call	#pushregs_
0ec50     14 F0 07 F1 | 	add	ptra, #20
0ec54     88 DC BF FD | 	call	#_pop
0ec58     FF 14 02 F6 | 	mov	arg02, result3
0ec5c     A7 FA 61 FC | 	wrlong	result1, fp
0ec60     04 4E 05 F1 | 	add	fp, #4
0ec64     A7 FC 61 FC | 	wrlong	result2, fp
0ec68     04 4E 05 F1 | 	add	fp, #4
0ec6c     A7 14 62 FC | 	wrlong	arg02, fp
0ec70     08 4E 85 F1 | 	sub	fp, #8
0ec74     A7 12 02 F6 | 	mov	arg01, fp
0ec78     04 DF BF FD | 	call	#_converttofloat
0ec7c     FD 12 02 F6 | 	mov	arg01, result1
0ec80     00 3D 22 FF 
0ec84     00 14 06 F6 | 	mov	arg02, ##1148846080
0ec88     80 71 B1 FD | 	call	#__system___float_mul
0ec8c     FD 12 02 F6 | 	mov	arg01, result1
0ec90     01 14 06 F6 | 	mov	arg02, #1
0ec94     3C 76 B1 FD | 	call	#__system___float_tointeger
0ec98     FD 14 52 F6 | 	abs	arg02, result1 wc
0ec9c     0D 14 46 F7 | 	zerox	arg02, #13
0eca0     0A 15 82 F6 | 	negc	arg02, arg02
0eca4     10 4E 05 F1 | 	add	fp, #16
0eca8     A7 14 62 FC | 	wrlong	arg02, fp
0ecac     10 4E 85 F1 | 	sub	fp, #16
0ecb0     2C DC BF FD | 	call	#_pop
0ecb4     FF 14 02 F6 | 	mov	arg02, result3
0ecb8     A7 FA 61 FC | 	wrlong	result1, fp
0ecbc     04 4E 05 F1 | 	add	fp, #4
0ecc0     A7 FC 61 FC | 	wrlong	result2, fp
0ecc4     04 4E 05 F1 | 	add	fp, #4
0ecc8     A7 14 62 FC | 	wrlong	arg02, fp
0eccc     08 4E 85 F1 | 	sub	fp, #8
0ecd0     A7 12 02 F6 | 	mov	arg01, fp
0ecd4     EC DD BF FD | 	call	#_converttoint
0ecd8     FD 14 52 F6 | 	abs	arg02, result1 wc
0ecdc     07 14 06 F5 | 	and	arg02, #7
0ece0     0A 15 82 F6 | 	negc	arg02, arg02
0ece4     0C 4E 05 F1 | 	add	fp, #12
0ece8     A7 14 62 FC | 	wrlong	arg02, fp
0ecec     37 00 00 FF 
0ecf0     10 E4 05 F1 | 	add	objptr, ##28176
0ecf4     F2 12 02 FB | 	rdlong	arg01, objptr
0ecf8     37 00 00 FF 
0ecfc     10 E4 85 F1 | 	sub	objptr, ##28176
0ed00     06 14 66 F0 | 	shl	arg02, #6
0ed04     0A 13 02 F1 | 	add	arg01, arg02
0ed08     14 12 06 F1 | 	add	arg01, #20
0ed0c     04 4E 05 F1 | 	add	fp, #4
0ed10     A7 14 02 FB | 	rdlong	arg02, fp
0ed14     10 4E 85 F1 | 	sub	fp, #16
0ed18     09 15 52 FC | 	wrword	arg02, arg01
0ed1c     A7 F0 03 F6 | 	mov	ptra, fp
0ed20     B2 00 A0 FD | 	call	#popregs_
0ed24                 | _do_changevol_ret
0ed24     2D 00 64 FD | 	ret
0ed28                 | 
0ed28                 | ' 
0ed28                 | ' '-------------------- changewav
0ed28                 | ' 
0ed28                 | ' sub do_changewav
0ed28                 | _do_changewav
0ed28     00 4A 05 F6 | 	mov	COUNT_, #0
0ed2c     A8 00 A0 FD | 	call	#pushregs_
0ed30     14 F0 07 F1 | 	add	ptra, #20
0ed34     A8 DB BF FD | 	call	#_pop
0ed38     FF 14 02 F6 | 	mov	arg02, result3
0ed3c     A7 FA 61 FC | 	wrlong	result1, fp
0ed40     04 4E 05 F1 | 	add	fp, #4
0ed44     A7 FC 61 FC | 	wrlong	result2, fp
0ed48     04 4E 05 F1 | 	add	fp, #4
0ed4c     A7 14 62 FC | 	wrlong	arg02, fp
0ed50     08 4E 85 F1 | 	sub	fp, #8
0ed54     A7 12 02 F6 | 	mov	arg01, fp
0ed58     68 DD BF FD | 	call	#_converttoint
0ed5c     10 4E 05 F1 | 	add	fp, #16
0ed60     A7 FA 61 FC | 	wrlong	result1, fp
0ed64                 | ' 
0ed64                 | ' t1=pop()
0ed64                 | ' wave=converttoint(t1)
0ed64                 | ' if wave<0 then wave=0
0ed64     FD 14 02 F6 | 	mov	arg02, result1
0ed68     10 4E 85 F1 | 	sub	fp, #16
0ed6c     00 14 56 F2 | 	cmps	arg02, #0 wc
0ed70     10 4E 05 C1 |  if_b	add	fp, #16
0ed74     A7 00 68 CC |  if_b	wrlong	#0, fp
0ed78     10 4E 85 C1 |  if_b	sub	fp, #16
0ed7c     60 DB BF FD | 	call	#_pop
0ed80     FF 14 02 F6 | 	mov	arg02, result3
0ed84     A7 FA 61 FC | 	wrlong	result1, fp
0ed88     04 4E 05 F1 | 	add	fp, #4
0ed8c     A7 FC 61 FC | 	wrlong	result2, fp
0ed90     04 4E 05 F1 | 	add	fp, #4
0ed94     A7 14 62 FC | 	wrlong	arg02, fp
0ed98     08 4E 85 F1 | 	sub	fp, #8
0ed9c     A7 12 02 F6 | 	mov	arg01, fp
0eda0     20 DD BF FD | 	call	#_converttoint
0eda4     FD 14 52 F6 | 	abs	arg02, result1 wc
0eda8     07 14 06 F5 | 	and	arg02, #7
0edac     0A 15 82 F6 | 	negc	arg02, arg02
0edb0     0C 4E 05 F1 | 	add	fp, #12
0edb4     A7 14 62 FC | 	wrlong	arg02, fp
0edb8                 | ' if wave <32 then 
0edb8     04 4E 05 F1 | 	add	fp, #4
0edbc     A7 14 02 FB | 	rdlong	arg02, fp
0edc0     10 4E 85 F1 | 	sub	fp, #16
0edc4     20 14 56 F2 | 	cmps	arg02, #32 wc
0edc8     48 00 90 3D |  if_ae	jmp	#LR__1250
0edcc     37 00 00 FF 
0edd0     10 E4 05 F1 | 	add	objptr, ##28176
0edd4     F2 12 02 FB | 	rdlong	arg01, objptr
0edd8     37 00 00 FF 
0eddc     10 E4 85 F1 | 	sub	objptr, ##28176
0ede0     0C 4E 05 F1 | 	add	fp, #12
0ede4     A7 14 02 FB | 	rdlong	arg02, fp
0ede8     06 14 66 F0 | 	shl	arg02, #6
0edec     0A 13 02 F1 | 	add	arg01, arg02
0edf0     08 12 06 F1 | 	add	arg01, #8
0edf4     04 4E 05 F1 | 	add	fp, #4
0edf8     A7 14 02 FB | 	rdlong	arg02, fp
0edfc     10 4E 85 F1 | 	sub	fp, #16
0ee00     0B 14 66 F0 | 	shl	arg02, #11
0ee04     00 00 40 FF 
0ee08     00 14 06 F1 | 	add	arg02, ##-2147483648
0ee0c     09 15 62 FC | 	wrlong	arg02, arg01
0ee10     34 00 90 FD | 	jmp	#LR__1251
0ee14                 | LR__1250
0ee14     37 00 00 FF 
0ee18     10 E4 05 F1 | 	add	objptr, ##28176
0ee1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ee20     37 00 00 FF 
0ee24     10 E4 85 F1 | 	sub	objptr, ##28176
0ee28     0C 4E 05 F1 | 	add	fp, #12
0ee2c     A7 14 02 FB | 	rdlong	arg02, fp
0ee30     0C 4E 85 F1 | 	sub	fp, #12
0ee34     06 14 66 F0 | 	shl	arg02, #6
0ee38     0A 13 02 F1 | 	add	arg01, arg02
0ee3c     08 12 06 F1 | 	add	arg01, #8
0ee40     00 00 C4 FF 
0ee44     09 01 68 FC | 	wrlong	##-2013265920, arg01
0ee48                 | LR__1251
0ee48     A7 F0 03 F6 | 	mov	ptra, fp
0ee4c     B2 00 A0 FD | 	call	#popregs_
0ee50                 | _do_changewav_ret
0ee50     2D 00 64 FD | 	ret
0ee54                 | 
0ee54                 | ' 
0ee54                 | ' '-------------------- chr$
0ee54                 | ' 
0ee54                 | ' sub do_chr
0ee54                 | _do_chr
0ee54     01 4A 05 F6 | 	mov	COUNT_, #1
0ee58     A8 00 A0 FD | 	call	#pushregs_
0ee5c     14 F0 07 F1 | 	add	ptra, #20
0ee60     4A 00 00 FF 
0ee64     80 E4 05 F1 | 	add	objptr, ##38016
0ee68     F2 26 02 FB | 	rdlong	local01, objptr
0ee6c     13 17 02 F6 | 	mov	arg03, local01
0ee70     01 16 66 F0 | 	shl	arg03, #1
0ee74     13 17 02 F1 | 	add	arg03, local01
0ee78     02 16 66 F0 | 	shl	arg03, #2
0ee7c     03 00 00 FF 
0ee80     04 E4 85 F1 | 	sub	objptr, ##1540
0ee84     F2 16 02 F1 | 	add	arg03, objptr
0ee88     0B 17 02 FB | 	rdlong	arg03, arg03
0ee8c     0C 4E 05 F1 | 	add	fp, #12
0ee90     A7 16 62 FC | 	wrlong	arg03, fp
0ee94                 | ' 
0ee94                 | ' numpar=compiledline(lineptr_e).result.uresult
0ee94                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0ee94     0C 4E 85 F1 | 	sub	fp, #12
0ee98     02 16 16 F2 | 	cmp	arg03, #2 wc
0ee9c     47 00 00 FF 
0eea0     7C E4 85 F1 | 	sub	objptr, ##36476
0eea4     0C 4E 05 C1 |  if_b	add	fp, #12
0eea8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0eeac     0C 4E 85 C1 |  if_b	sub	fp, #12
0eeb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1260
0eeb4     00 12 06 F6 | 	mov	arg01, #0
0eeb8     00 9E B1 FD | 	call	#__system___getiolock_0558
0eebc     FD 12 02 F6 | 	mov	arg01, result1
0eec0     D0 40 B1 FD | 	call	#__system___lockmem
0eec4     99 01 00 FF 
0eec8     87 14 06 F6 | 	mov	arg02, ##@LR__5633
0eecc     00 12 06 F6 | 	mov	arg01, #0
0eed0     00 16 06 F6 | 	mov	arg03, #0
0eed4     B0 4D B1 FD | 	call	#__system___basic_print_string
0eed8     00 12 06 F6 | 	mov	arg01, #0
0eedc     DC 9D B1 FD | 	call	#__system___getiolock_0558
0eee0     FD 00 68 FC | 	wrlong	#0, result1
0eee4     27 12 06 F6 | 	mov	arg01, #39
0eee8     00 14 06 F6 | 	mov	arg02, #0
0eeec     14 07 B1 FD | 	call	#_printerror
0eef0     54 00 90 FD | 	jmp	#LR__1261
0eef4                 | LR__1260
0eef4     E8 D9 BF FD | 	call	#_pop
0eef8     FF 26 02 F6 | 	mov	local01, result3
0eefc     A7 FA 61 FC | 	wrlong	result1, fp
0ef00     04 4E 05 F1 | 	add	fp, #4
0ef04     A7 FC 61 FC | 	wrlong	result2, fp
0ef08     04 4E 05 F1 | 	add	fp, #4
0ef0c     A7 26 62 FC | 	wrlong	local01, fp
0ef10     08 4E 85 F1 | 	sub	fp, #8
0ef14     A7 12 02 F6 | 	mov	arg01, fp
0ef18     A8 DB BF FD | 	call	#_converttoint
0ef1c     10 4E 05 F1 | 	add	fp, #16
0ef20     A7 FA 61 FC | 	wrlong	result1, fp
0ef24     FD 12 02 F6 | 	mov	arg01, result1
0ef28     10 4E 85 F1 | 	sub	fp, #16
0ef2c     A4 62 B1 FD | 	call	#__system__Chr_S
0ef30     A7 FA 61 FC | 	wrlong	result1, fp
0ef34     08 4E 05 F1 | 	add	fp, #8
0ef38     A7 3E 68 FC | 	wrlong	#31, fp
0ef3c     08 4E 85 F1 | 	sub	fp, #8
0ef40     A7 12 02 F6 | 	mov	arg01, fp
0ef44     30 DA BF FD | 	call	#_push
0ef48                 | LR__1261
0ef48     A7 F0 03 F6 | 	mov	ptra, fp
0ef4c     B2 00 A0 FD | 	call	#popregs_
0ef50                 | _do_chr_ret
0ef50     2D 00 64 FD | 	ret
0ef54                 | 
0ef54                 | ' 
0ef54                 | ' '-------------------- circle
0ef54                 | ' 
0ef54                 | ' sub do_circle
0ef54                 | _do_circle
0ef54     02 4A 05 F6 | 	mov	COUNT_, #2
0ef58     A8 00 A0 FD | 	call	#pushregs_
0ef5c     24 F0 07 F1 | 	add	ptra, #36
0ef60     7C D9 BF FD | 	call	#_pop
0ef64     FD 18 02 F6 | 	mov	arg04, result1
0ef68     FE 16 02 F6 | 	mov	arg03, result2
0ef6c     FF 14 02 F6 | 	mov	arg02, result3
0ef70     18 4E 05 F1 | 	add	fp, #24
0ef74     A7 18 62 FC | 	wrlong	arg04, fp
0ef78     04 4E 05 F1 | 	add	fp, #4
0ef7c     A7 16 62 FC | 	wrlong	arg03, fp
0ef80     04 4E 05 F1 | 	add	fp, #4
0ef84     A7 14 62 FC | 	wrlong	arg02, fp
0ef88     20 4E 85 F1 | 	sub	fp, #32
0ef8c     50 D9 BF FD | 	call	#_pop
0ef90     FD 18 02 F6 | 	mov	arg04, result1
0ef94     FE 16 02 F6 | 	mov	arg03, result2
0ef98     FF 26 02 F6 | 	mov	local01, result3
0ef9c     0C 4E 05 F1 | 	add	fp, #12
0efa0     A7 18 62 FC | 	wrlong	arg04, fp
0efa4     04 4E 05 F1 | 	add	fp, #4
0efa8     A7 16 62 FC | 	wrlong	arg03, fp
0efac     04 4E 05 F1 | 	add	fp, #4
0efb0     A7 26 62 FC | 	wrlong	local01, fp
0efb4     14 4E 85 F1 | 	sub	fp, #20
0efb8     24 D9 BF FD | 	call	#_pop
0efbc     A7 FA 61 FC | 	wrlong	result1, fp
0efc0     04 4E 05 F1 | 	add	fp, #4
0efc4     A7 FC 61 FC | 	wrlong	result2, fp
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 FE 61 FC | 	wrlong	result3, fp
0efd0                 | ' 
0efd0                 | ' t3=pop()
0efd0                 | ' t2=pop()
0efd0                 | ' t1=pop()
0efd0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0efd0     FF 18 02 F6 | 	mov	arg04, result3
0efd4     08 4E 85 F1 | 	sub	fp, #8
0efd8     1C 18 0E F2 | 	cmp	arg04, #28 wz
0efdc     08 4E 05 51 |  if_ne	add	fp, #8
0efe0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0efe4     08 4E 85 51 |  if_ne	sub	fp, #8
0efe8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0efec     7C 00 90 5D |  if_ne	jmp	#LR__1270
0eff0     14 4E 05 F1 | 	add	fp, #20
0eff4     A7 26 02 FB | 	rdlong	local01, fp
0eff8     14 4E 85 F1 | 	sub	fp, #20
0effc     1C 26 0E F2 | 	cmp	local01, #28 wz
0f000     14 4E 05 51 |  if_ne	add	fp, #20
0f004     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f008     14 4E 85 51 |  if_ne	sub	fp, #20
0f00c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f010     58 00 90 5D |  if_ne	jmp	#LR__1270
0f014     20 4E 05 F1 | 	add	fp, #32
0f018     A7 26 02 FB | 	rdlong	local01, fp
0f01c     20 4E 85 F1 | 	sub	fp, #32
0f020     1C 26 0E F2 | 	cmp	local01, #28 wz
0f024     20 4E 05 51 |  if_ne	add	fp, #32
0f028     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f02c     20 4E 85 51 |  if_ne	sub	fp, #32
0f030     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f034     34 00 90 5D |  if_ne	jmp	#LR__1270
0f038     A7 12 02 FB | 	rdlong	arg01, fp
0f03c     0C 4E 05 F1 | 	add	fp, #12
0f040     A7 14 02 FB | 	rdlong	arg02, fp
0f044     0C 4E 05 F1 | 	add	fp, #12
0f048     A7 16 02 FB | 	rdlong	arg03, fp
0f04c     18 4E 85 F1 | 	sub	fp, #24
0f050     37 00 00 FF 
0f054     28 E4 05 F1 | 	add	objptr, ##28200
0f058     F2 18 02 FB | 	rdlong	arg04, objptr
0f05c     37 00 00 FF 
0f060     28 E4 85 F1 | 	sub	objptr, ##28200
0f064     5C 1E B1 FD | 	call	#_hg010b_spin2_circle
0f068                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f068     54 00 90 FD | 	jmp	#LR__1271
0f06c                 | LR__1270
0f06c     A7 12 02 F6 | 	mov	arg01, fp
0f070     50 DA BF FD | 	call	#_converttoint
0f074     FD 26 02 F6 | 	mov	local01, result1
0f078     0C 4E 05 F1 | 	add	fp, #12
0f07c     A7 12 02 F6 | 	mov	arg01, fp
0f080     0C 4E 85 F1 | 	sub	fp, #12
0f084     3C DA BF FD | 	call	#_converttoint
0f088     FD 28 02 F6 | 	mov	local02, result1
0f08c     18 4E 05 F1 | 	add	fp, #24
0f090     A7 12 02 F6 | 	mov	arg01, fp
0f094     18 4E 85 F1 | 	sub	fp, #24
0f098     28 DA BF FD | 	call	#_converttoint
0f09c     FD 16 02 F6 | 	mov	arg03, result1
0f0a0     37 00 00 FF 
0f0a4     28 E4 05 F1 | 	add	objptr, ##28200
0f0a8     F2 18 02 FB | 	rdlong	arg04, objptr
0f0ac     37 00 00 FF 
0f0b0     28 E4 85 F1 | 	sub	objptr, ##28200
0f0b4     13 13 02 F6 | 	mov	arg01, local01
0f0b8     14 15 02 F6 | 	mov	arg02, local02
0f0bc     04 1E B1 FD | 	call	#_hg010b_spin2_circle
0f0c0                 | LR__1271
0f0c0     A7 F0 03 F6 | 	mov	ptra, fp
0f0c4     B2 00 A0 FD | 	call	#popregs_
0f0c8                 | _do_circle_ret
0f0c8     2D 00 64 FD | 	ret
0f0cc                 | 
0f0cc                 | ' 
0f0cc                 | ' '-------------------- click
0f0cc                 | ' 
0f0cc                 | ' sub do_click
0f0cc                 | _do_click
0f0cc     10 D8 BF FD | 	call	#_pop
0f0d0     00 FA 4D F2 | 	cmps	result1, #0 wz
0f0d4                 | ' 
0f0d4                 | ' t1=pop()
0f0d4                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f0d4     50 00 00 AF 
0f0d8     14 E5 05 A1 |  if_e	add	objptr, ##41236
0f0dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f0e0     50 00 00 FF 
0f0e4     14 E5 C5 F3 | 	sumz	objptr, ##41236
0f0e8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f0ec     50 00 00 5F 
0f0f0     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0f0f4                 | _do_click_ret
0f0f4     2D 00 64 FD | 	ret
0f0f8                 | 
0f0f8                 | ' 
0f0f8                 | ' '-------------------- close
0f0f8                 | ' 
0f0f8                 | ' sub do_close
0f0f8                 | _do_close
0f0f8     03 4A 05 F6 | 	mov	COUNT_, #3
0f0fc     A8 00 A0 FD | 	call	#pushregs_
0f100     DC D7 BF FD | 	call	#_pop
0f104     FD 26 02 F6 | 	mov	local01, result1
0f108     FF 16 02 F6 | 	mov	arg03, result3
0f10c     FE 28 02 F6 | 	mov	local02, result2
0f110     0B 2B 02 F6 | 	mov	local03, arg03
0f114                 | ' 
0f114                 | ' numpar=compiledline(lineptr_e).result.uresult
0f114                 | ' t1=pop()
0f114                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f114     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f118     44 00 90 AD |  if_e	jmp	#LR__1280
0f11c     00 12 06 F6 | 	mov	arg01, #0
0f120     98 9B B1 FD | 	call	#__system___getiolock_0558
0f124     FD 12 02 F6 | 	mov	arg01, result1
0f128     68 3E B1 FD | 	call	#__system___lockmem
0f12c     99 01 00 FF 
0f130     8E 14 06 F6 | 	mov	arg02, ##@LR__5634
0f134     00 12 06 F6 | 	mov	arg01, #0
0f138     00 16 06 F6 | 	mov	arg03, #0
0f13c     48 4B B1 FD | 	call	#__system___basic_print_string
0f140     00 12 06 F6 | 	mov	arg01, #0
0f144     0A 14 06 F6 | 	mov	arg02, #10
0f148     00 16 06 F6 | 	mov	arg03, #0
0f14c     E0 4A B1 FD | 	call	#__system___basic_print_char
0f150     00 12 06 F6 | 	mov	arg01, #0
0f154     64 9B B1 FD | 	call	#__system___getiolock_0558
0f158     FD 00 68 FC | 	wrlong	#0, result1
0f15c     08 00 90 FD | 	jmp	#LR__1281
0f160                 | LR__1280
0f160                 | ' channel  = t1.result.iresult
0f160                 | ' close #channel
0f160     13 13 02 F6 | 	mov	arg01, local01
0f164     84 91 B1 FD | 	call	#__system__close
0f168                 | LR__1281
0f168     A7 F0 03 F6 | 	mov	ptra, fp
0f16c     B2 00 A0 FD | 	call	#popregs_
0f170                 | _do_close_ret
0f170     2D 00 64 FD | 	ret
0f174                 | 
0f174                 | ' 
0f174                 | ' '-------------------- cls
0f174                 | ' 
0f174                 | ' sub do_cls
0f174                 | _do_cls
0f174     37 00 00 FF 
0f178     3C E4 05 F1 | 	add	objptr, ##28220
0f17c     F2 12 02 FB | 	rdlong	arg01, objptr
0f180     04 E4 85 F1 | 	sub	objptr, #4
0f184     F2 14 02 FB | 	rdlong	arg02, objptr
0f188     37 00 00 FF 
0f18c     38 E4 85 F1 | 	sub	objptr, ##28216
0f190     C4 21 B1 FD | 	call	#_hg010b_spin2_cls
0f194     37 00 00 FF 
0f198     3C E4 05 F1 | 	add	objptr, ##28220
0f19c     F2 14 02 FB | 	rdlong	arg02, objptr
0f1a0     14 E4 85 F1 | 	sub	objptr, #20
0f1a4     F2 14 62 FC | 	wrlong	arg02, objptr
0f1a8     37 00 00 FF 
0f1ac     28 E4 85 F1 | 	sub	objptr, ##28200
0f1b0                 | _do_cls_ret
0f1b0     2D 00 64 FD | 	ret
0f1b4                 | 
0f1b4                 | ' 
0f1b4                 | ' '-------------------- color
0f1b4                 | ' 
0f1b4                 | ' sub do_color
0f1b4                 | _do_color
0f1b4     03 4A 05 F6 | 	mov	COUNT_, #3
0f1b8     A8 00 A0 FD | 	call	#pushregs_
0f1bc     20 D7 BF FD | 	call	#_pop
0f1c0     FD 26 02 F6 | 	mov	local01, result1
0f1c4     FE 28 02 F6 | 	mov	local02, result2
0f1c8     FF 2A 02 F6 | 	mov	local03, result3
0f1cc     37 00 00 FF 
0f1d0     28 E4 05 F1 | 	add	objptr, ##28200
0f1d4     F2 26 62 FC | 	wrlong	local01, objptr
0f1d8     37 00 00 FF 
0f1dc     28 E4 85 F1 | 	sub	objptr, ##28200
0f1e0     A7 F0 03 F6 | 	mov	ptra, fp
0f1e4     B2 00 A0 FD | 	call	#popregs_
0f1e8                 | _do_color_ret
0f1e8     2D 00 64 FD | 	ret
0f1ec                 | 
0f1ec                 | ' 
0f1ec                 | ' '-------------------- cos
0f1ec                 | ' 
0f1ec                 | ' sub do_cos
0f1ec                 | _do_cos
0f1ec     01 4A 05 F6 | 	mov	COUNT_, #1
0f1f0     A8 00 A0 FD | 	call	#pushregs_
0f1f4     10 F0 07 F1 | 	add	ptra, #16
0f1f8     4A 00 00 FF 
0f1fc     80 E4 05 F1 | 	add	objptr, ##38016
0f200     F2 26 02 FB | 	rdlong	local01, objptr
0f204     13 17 02 F6 | 	mov	arg03, local01
0f208     01 16 66 F0 | 	shl	arg03, #1
0f20c     13 17 02 F1 | 	add	arg03, local01
0f210     02 16 66 F0 | 	shl	arg03, #2
0f214     03 00 00 FF 
0f218     04 E4 85 F1 | 	sub	objptr, ##1540
0f21c     F2 16 02 F1 | 	add	arg03, objptr
0f220     0B 17 02 FB | 	rdlong	arg03, arg03
0f224     0C 4E 05 F1 | 	add	fp, #12
0f228     A7 16 62 FC | 	wrlong	arg03, fp
0f22c                 | ' 
0f22c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f22c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f22c     0C 4E 85 F1 | 	sub	fp, #12
0f230     02 16 16 F2 | 	cmp	arg03, #2 wc
0f234     47 00 00 FF 
0f238     7C E4 85 F1 | 	sub	objptr, ##36476
0f23c     0C 4E 05 C1 |  if_b	add	fp, #12
0f240     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f244     0C 4E 85 C1 |  if_b	sub	fp, #12
0f248     40 00 90 4D |  if_c_and_nz	jmp	#LR__1290
0f24c     00 12 06 F6 | 	mov	arg01, #0
0f250     68 9A B1 FD | 	call	#__system___getiolock_0558
0f254     FD 12 02 F6 | 	mov	arg01, result1
0f258     38 3D B1 FD | 	call	#__system___lockmem
0f25c     99 01 00 FF 
0f260     A0 14 06 F6 | 	mov	arg02, ##@LR__5635
0f264     00 12 06 F6 | 	mov	arg01, #0
0f268     00 16 06 F6 | 	mov	arg03, #0
0f26c     18 4A B1 FD | 	call	#__system___basic_print_string
0f270     00 12 06 F6 | 	mov	arg01, #0
0f274     44 9A B1 FD | 	call	#__system___getiolock_0558
0f278     FD 00 68 FC | 	wrlong	#0, result1
0f27c     27 12 06 F6 | 	mov	arg01, #39
0f280     00 14 06 F6 | 	mov	arg02, #0
0f284     7C 03 B1 FD | 	call	#_printerror
0f288     78 00 90 FD | 	jmp	#LR__1291
0f28c                 | LR__1290
0f28c     50 D6 BF FD | 	call	#_pop
0f290     A7 FA 61 FC | 	wrlong	result1, fp
0f294     04 4E 05 F1 | 	add	fp, #4
0f298     A7 FC 61 FC | 	wrlong	result2, fp
0f29c     04 4E 05 F1 | 	add	fp, #4
0f2a0     A7 FE 61 FC | 	wrlong	result3, fp
0f2a4     08 4E 85 F1 | 	sub	fp, #8
0f2a8     51 00 00 FF 
0f2ac     BC E5 05 F1 | 	add	objptr, ##41916
0f2b0     F2 26 02 FB | 	rdlong	local01, objptr
0f2b4     51 00 00 FF 
0f2b8     BC E5 85 F1 | 	sub	objptr, ##41916
0f2bc     A7 12 02 F6 | 	mov	arg01, fp
0f2c0     BC D8 BF FD | 	call	#_converttofloat
0f2c4     FD 14 02 F6 | 	mov	arg02, result1
0f2c8     13 13 02 F6 | 	mov	arg01, local01
0f2cc     3C 6B B1 FD | 	call	#__system___float_mul
0f2d0     FD 14 02 F6 | 	mov	arg02, result1
0f2d4     87 E4 1F FF 
0f2d8     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f2dc     1F 14 E6 F4 | 	bitnot	arg02, #31
0f2e0     58 67 B1 FD | 	call	#__system___float_add
0f2e4     FD 12 02 F6 | 	mov	arg01, result1
0f2e8     80 74 B1 FD | 	call	#__system____builtin_sinf
0f2ec     A7 FA 61 FC | 	wrlong	result1, fp
0f2f0     08 4E 05 F1 | 	add	fp, #8
0f2f4     A7 3C 68 FC | 	wrlong	#30, fp
0f2f8     08 4E 85 F1 | 	sub	fp, #8
0f2fc     A7 12 02 F6 | 	mov	arg01, fp
0f300     74 D6 BF FD | 	call	#_push
0f304                 | LR__1291
0f304     A7 F0 03 F6 | 	mov	ptra, fp
0f308     B2 00 A0 FD | 	call	#popregs_
0f30c                 | _do_cos_ret
0f30c     2D 00 64 FD | 	ret
0f310                 | 
0f310                 | ' 
0f310                 | ' '-------------------- cursor
0f310                 | ' 
0f310                 | ' sub do_cursor
0f310                 | _do_cursor
0f310     CC D5 BF FD | 	call	#_pop
0f314     00 FA 4D F2 | 	cmps	result1, #0 wz
0f318                 | ' t1=pop()
0f318                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f318     14 00 90 5D |  if_ne	jmp	#LR__1300
0f31c     11 12 06 F6 | 	mov	arg01, #17
0f320     00 14 06 F6 | 	mov	arg02, #0
0f324     00 16 06 F6 | 	mov	arg03, #0
0f328     0C 13 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f32c     10 00 90 FD | 	jmp	#LR__1301
0f330                 | LR__1300
0f330     11 12 06 F6 | 	mov	arg01, #17
0f334     08 14 06 F6 | 	mov	arg02, #8
0f338     10 16 06 F6 | 	mov	arg03, #16
0f33c     F8 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f340                 | LR__1301
0f340                 | _do_cursor_ret
0f340     2D 00 64 FD | 	ret
0f344                 | 
0f344                 | ' 
0f344                 | ' '-------------------- defenv
0f344                 | ' 
0f344                 | ' sub do_defenv
0f344                 | _do_defenv
0f344     08 4A 05 F6 | 	mov	COUNT_, #8
0f348     A8 00 A0 FD | 	call	#pushregs_
0f34c     58 F0 07 F1 | 	add	ptra, #88
0f350     4A 00 00 FF 
0f354     80 E4 05 F1 | 	add	objptr, ##38016
0f358     F2 26 02 FB | 	rdlong	local01, objptr
0f35c     13 1B 02 F6 | 	mov	arg05, local01
0f360     01 1A 66 F0 | 	shl	arg05, #1
0f364     13 1B 02 F1 | 	add	arg05, local01
0f368     02 1A 66 F0 | 	shl	arg05, #2
0f36c     03 00 00 FF 
0f370     04 E4 85 F1 | 	sub	objptr, ##1540
0f374     F2 1A 02 F1 | 	add	arg05, objptr
0f378     0D 1B 02 FB | 	rdlong	arg05, arg05
0f37c     10 4E 05 F1 | 	add	fp, #16
0f380     A7 1A 62 FC | 	wrlong	arg05, fp
0f384                 | ' 
0f384                 | ' numpar=compiledline(lineptr_e).result.uresult
0f384                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f384     10 4E 85 F1 | 	sub	fp, #16
0f388     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f38c     47 00 00 FF 
0f390     7C E4 85 F1 | 	sub	objptr, ##36476
0f394     10 4E 05 51 |  if_ne	add	fp, #16
0f398     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f39c     10 4E 85 51 |  if_ne	sub	fp, #16
0f3a0     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f3a4     8C 0A 90 5D |  if_ne	jmp	#LR__1331
0f3a8                 | ' 
0f3a8                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f3a8     10 4E 05 F1 | 	add	fp, #16
0f3ac     A7 26 02 FB | 	rdlong	local01, fp
0f3b0     10 4E 85 F1 | 	sub	fp, #16
0f3b4     02 26 0E F2 | 	cmp	local01, #2 wz
0f3b8     24 04 90 5D |  if_ne	jmp	#LR__1323
0f3bc     20 D5 BF FD | 	call	#_pop
0f3c0     FF 1A 02 F6 | 	mov	arg05, result3
0f3c4     40 4E 05 F1 | 	add	fp, #64
0f3c8     A7 FA 61 FC | 	wrlong	result1, fp
0f3cc     04 4E 05 F1 | 	add	fp, #4
0f3d0     A7 FC 61 FC | 	wrlong	result2, fp
0f3d4     04 4E 05 F1 | 	add	fp, #4
0f3d8     A7 1A 62 FC | 	wrlong	arg05, fp
0f3dc                 | '   t1=pop()
0f3dc                 | '   if t1.result_type=result_string2 then 
0f3dc     48 4E 85 F1 | 	sub	fp, #72
0f3e0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f3e4     20 00 90 5D |  if_ne	jmp	#LR__1310
0f3e8     40 4E 05 F1 | 	add	fp, #64
0f3ec     A7 12 02 FB | 	rdlong	arg01, fp
0f3f0     40 4E 85 F1 | 	sub	fp, #64
0f3f4     60 D6 BF FD | 	call	#_convertstring
0f3f8     4C 4E 05 F1 | 	add	fp, #76
0f3fc     A7 FA 61 FC | 	wrlong	result1, fp
0f400     4C 4E 85 F1 | 	sub	fp, #76
0f404     58 00 90 FD | 	jmp	#LR__1313
0f408                 | LR__1310
0f408     48 4E 05 F1 | 	add	fp, #72
0f40c     A7 26 02 FB | 	rdlong	local01, fp
0f410     48 4E 85 F1 | 	sub	fp, #72
0f414     1F 26 0E F2 | 	cmp	local01, #31 wz
0f418     18 00 90 5D |  if_ne	jmp	#LR__1311
0f41c     40 4E 05 F1 | 	add	fp, #64
0f420     A7 26 02 FB | 	rdlong	local01, fp
0f424     0C 4E 05 F1 | 	add	fp, #12
0f428     A7 26 62 FC | 	wrlong	local01, fp
0f42c     4C 4E 85 F1 | 	sub	fp, #76
0f430     2C 00 90 FD | 	jmp	#LR__1312
0f434                 | LR__1311
0f434     99 01 00 FF 
0f438     A6 26 06 F6 | 	mov	local01, ##@LR__5636
0f43c     4C 4E 05 F1 | 	add	fp, #76
0f440     A7 26 62 FC | 	wrlong	local01, fp
0f444     0C 4E 85 F1 | 	sub	fp, #12
0f448     A7 12 02 F6 | 	mov	arg01, fp
0f44c     40 4E 85 F1 | 	sub	fp, #64
0f450     70 D6 BF FD | 	call	#_converttoint
0f454     1C 4E 05 F1 | 	add	fp, #28
0f458     A7 FA 61 FC | 	wrlong	result1, fp
0f45c     1C 4E 85 F1 | 	sub	fp, #28
0f460                 | LR__1312
0f460                 | LR__1313
0f460                 | '   if s1<>"" then 
0f460     4C 4E 05 F1 | 	add	fp, #76
0f464     A7 12 02 FB | 	rdlong	arg01, fp
0f468     4C 4E 85 F1 | 	sub	fp, #76
0f46c     99 01 00 FF 
0f470     A7 14 06 F6 | 	mov	arg02, ##@LR__5637
0f474     44 3B B1 FD | 	call	#__system___string_cmp
0f478     00 FA 0D F2 | 	cmp	result1, #0 wz
0f47c     24 02 90 AD |  if_e	jmp	#LR__1317
0f480     5C D4 BF FD | 	call	#_pop
0f484     FF 26 02 F6 | 	mov	local01, result3
0f488     40 4E 05 F1 | 	add	fp, #64
0f48c     A7 FA 61 FC | 	wrlong	result1, fp
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 FC 61 FC | 	wrlong	result2, fp
0f498     04 4E 05 F1 | 	add	fp, #4
0f49c     A7 26 62 FC | 	wrlong	local01, fp
0f4a0     08 4E 85 F1 | 	sub	fp, #8
0f4a4     A7 12 02 F6 | 	mov	arg01, fp
0f4a8     40 4E 85 F1 | 	sub	fp, #64
0f4ac     14 D6 BF FD | 	call	#_converttoint
0f4b0     18 4E 05 F1 | 	add	fp, #24
0f4b4     A7 FA 61 FC | 	wrlong	result1, fp
0f4b8     18 4E 85 F1 | 	sub	fp, #24
0f4bc                 | '     t1=pop()
0f4bc                 | '     channel=converttoint(t1) 
0f4bc                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f4bc     09 12 06 F6 | 	mov	arg01, #9
0f4c0     28 8E B1 FD | 	call	#__system__close
0f4c4     09 26 06 F6 | 	mov	local01, #9
0f4c8     99 01 00 FF 
0f4cc     A8 12 06 F6 | 	mov	arg01, ##@LR__5638
0f4d0     4C 4E 05 F1 | 	add	fp, #76
0f4d4     A7 14 02 FB | 	rdlong	arg02, fp
0f4d8     4C 4E 85 F1 | 	sub	fp, #76
0f4dc     10 3B B1 FD | 	call	#__system___string_concat
0f4e0     FD 14 02 F6 | 	mov	arg02, result1
0f4e4     13 13 02 F6 | 	mov	arg01, local01
0f4e8     00 16 06 F6 | 	mov	arg03, #0
0f4ec     A8 46 B1 FD | 	call	#__system___basic_open_string
0f4f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f4f4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f4f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f4fc     0C 4E 05 F1 | 	add	fp, #12
0f500     A7 FA 61 FC | 	wrlong	result1, fp
0f504                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f504     0C 4E 85 F1 | 	sub	fp, #12
0f508     A0 00 90 AD |  if_e	jmp	#LR__1314
0f50c     00 12 06 F6 | 	mov	arg01, #0
0f510     A8 97 B1 FD | 	call	#__system___getiolock_0558
0f514     FD 12 02 F6 | 	mov	arg01, result1
0f518     78 3A B1 FD | 	call	#__system___lockmem
0f51c     99 01 00 FF 
0f520     B5 14 06 F6 | 	mov	arg02, ##@LR__5639
0f524     00 12 06 F6 | 	mov	arg01, #0
0f528     00 16 06 F6 | 	mov	arg03, #0
0f52c     58 47 B1 FD | 	call	#__system___basic_print_string
0f530     0C 4E 05 F1 | 	add	fp, #12
0f534     A7 14 02 FB | 	rdlong	arg02, fp
0f538     0C 4E 85 F1 | 	sub	fp, #12
0f53c     00 12 06 F6 | 	mov	arg01, #0
0f540     00 16 06 F6 | 	mov	arg03, #0
0f544     0A 18 06 F6 | 	mov	arg04, #10
0f548     80 47 B1 FD | 	call	#__system___basic_print_integer
0f54c     99 01 00 FF 
0f550     C3 14 06 F6 | 	mov	arg02, ##@LR__5640
0f554     00 12 06 F6 | 	mov	arg01, #0
0f558     00 16 06 F6 | 	mov	arg03, #0
0f55c     28 47 B1 FD | 	call	#__system___basic_print_string
0f560     00 26 06 F6 | 	mov	local01, #0
0f564     0C 4E 05 F1 | 	add	fp, #12
0f568     A7 12 02 FB | 	rdlong	arg01, fp
0f56c     0C 4E 85 F1 | 	sub	fp, #12
0f570     AC 63 B1 FD | 	call	#__system___strerror
0f574     FD 14 02 F6 | 	mov	arg02, result1
0f578     13 13 02 F6 | 	mov	arg01, local01
0f57c     00 16 06 F6 | 	mov	arg03, #0
0f580     04 47 B1 FD | 	call	#__system___basic_print_string
0f584     00 12 06 F6 | 	mov	arg01, #0
0f588     0A 14 06 F6 | 	mov	arg02, #10
0f58c     00 16 06 F6 | 	mov	arg03, #0
0f590     9C 46 B1 FD | 	call	#__system___basic_print_char
0f594     00 12 06 F6 | 	mov	arg01, #0
0f598     20 97 B1 FD | 	call	#__system___getiolock_0558
0f59c     FD 00 68 FC | 	wrlong	#0, result1
0f5a0     09 12 06 F6 | 	mov	arg01, #9
0f5a4     44 8D B1 FD | 	call	#__system__close
0f5a8     88 08 90 FD | 	jmp	#LR__1331
0f5ac                 | LR__1314
0f5ac                 | '     get #9,17,envbuf8(channel,0),256
0f5ac     18 4E 05 F1 | 	add	fp, #24
0f5b0     A7 1A 02 FB | 	rdlong	arg05, fp
0f5b4     18 4E 85 F1 | 	sub	fp, #24
0f5b8     0D 17 02 F6 | 	mov	arg03, arg05
0f5bc     09 16 66 F0 | 	shl	arg03, #9
0f5c0     0D 17 02 F1 | 	add	arg03, arg05
0f5c4     0C 00 00 FF 
0f5c8     D8 E4 05 F1 | 	add	objptr, ##6360
0f5cc     F2 16 02 F1 | 	add	arg03, objptr
0f5d0     09 12 06 F6 | 	mov	arg01, #9
0f5d4     11 14 06 F6 | 	mov	arg02, #17
0f5d8     00 19 06 F6 | 	mov	arg04, #256
0f5dc     01 1A 06 F6 | 	mov	arg05, #1
0f5e0     0C 00 00 FF 
0f5e4     D8 E4 85 F1 | 	sub	objptr, ##6360
0f5e8     18 48 B1 FD | 	call	#__system___basic_get
0f5ec                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f5ec     14 4E 05 F1 | 	add	fp, #20
0f5f0     A7 FE 69 FC | 	wrlong	#255, fp
0f5f4     14 4E 85 F1 | 	sub	fp, #20
0f5f8     0C 00 00 FF 
0f5fc     D8 E4 05 F1 | 	add	objptr, ##6360
0f600     97 30 48 FB | 	callpa	#(@LR__1316-@LR__1315)>>2,fcache_load_ptr_
0f604                 | LR__1315
0f604     18 4E 05 F1 | 	add	fp, #24
0f608     A7 16 02 FB | 	rdlong	arg03, fp
0f60c     0B 27 02 F6 | 	mov	local01, arg03
0f610     09 26 66 F0 | 	shl	local01, #9
0f614     F2 26 02 F1 | 	add	local01, objptr
0f618     04 4E 85 F1 | 	sub	fp, #4
0f61c     A7 1A 02 FB | 	rdlong	arg05, fp
0f620     0D 19 02 F6 | 	mov	arg04, arg05
0f624     01 18 66 F0 | 	shl	arg04, #1
0f628     13 19 02 F1 | 	add	arg04, local01
0f62c     0B 27 02 F6 | 	mov	local01, arg03
0f630     09 26 66 F0 | 	shl	local01, #9
0f634     0B 27 02 F1 | 	add	local01, arg03
0f638     F2 26 02 F1 | 	add	local01, objptr
0f63c     13 1B 02 F1 | 	add	arg05, local01
0f640     0D 27 C2 FA | 	rdbyte	local01, arg05
0f644     00 27 06 FA | 	mul	local01, #256
0f648     0C 27 52 FC | 	wrword	local01, arg04
0f64c     A7 26 02 FB | 	rdlong	local01, fp
0f650     01 26 86 F1 | 	sub	local01, #1
0f654     A7 26 62 FC | 	wrlong	local01, fp
0f658     14 4E 85 F1 | 	sub	fp, #20
0f65c     00 26 56 F2 | 	cmps	local01, #0 wc
0f660     A0 FF 9F 3D |  if_ae	jmp	#LR__1315
0f664                 | LR__1316
0f664     0C 00 00 FF 
0f668     D8 E4 85 F1 | 	sub	objptr, ##6360
0f66c                 | '     close #9
0f66c     09 12 06 F6 | 	mov	arg01, #9
0f670     78 8C B1 FD | 	call	#__system__close
0f674     18 4E 05 F1 | 	add	fp, #24
0f678     A7 26 02 FB | 	rdlong	local01, fp
0f67c     18 4E 85 F1 | 	sub	fp, #24
0f680     09 26 66 F0 | 	shl	local01, #9
0f684     0C 00 00 FF 
0f688     D8 E4 05 F1 | 	add	objptr, ##6360
0f68c     F2 26 02 F1 | 	add	local01, objptr
0f690     FE 27 06 F1 | 	add	local01, #510
0f694     13 01 58 FC | 	wrword	#0, local01
0f698                 | '     envbuf(channel,255)=0                                                              
0f698                 | '     return
0f698     0C 00 00 FF 
0f69c     D8 E4 85 F1 | 	sub	objptr, ##6360
0f6a0     90 07 90 FD | 	jmp	#LR__1331
0f6a4                 | LR__1317
0f6a4                 | '     if wptr < $80000 then 
0f6a4     1C 4E 05 F1 | 	add	fp, #28
0f6a8     A7 28 02 FB | 	rdlong	local02, fp
0f6ac     1C 4E 85 F1 | 	sub	fp, #28
0f6b0     00 04 00 FF 
0f6b4     00 28 56 F2 | 	cmps	local02, ##524288 wc
0f6b8     7C 00 90 3D |  if_ae	jmp	#LR__1320
0f6bc                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0f6bc     14 4E 05 F1 | 	add	fp, #20
0f6c0     A7 00 68 FC | 	wrlong	#0, fp
0f6c4     14 4E 85 F1 | 	sub	fp, #20
0f6c8     0C 00 00 FF 
0f6cc     D8 E4 05 F1 | 	add	objptr, ##6360
0f6d0     97 2C 48 FB | 	callpa	#(@LR__1319-@LR__1318)>>2,fcache_load_ptr_
0f6d4                 | LR__1318
0f6d4     18 4E 05 F1 | 	add	fp, #24
0f6d8     A7 28 02 FB | 	rdlong	local02, fp
0f6dc     09 28 66 F0 | 	shl	local02, #9
0f6e0     F2 28 02 F1 | 	add	local02, objptr
0f6e4     04 4E 85 F1 | 	sub	fp, #4
0f6e8     A7 26 02 FB | 	rdlong	local01, fp
0f6ec     13 1B 02 F6 | 	mov	arg05, local01
0f6f0     01 1A 66 F0 | 	shl	arg05, #1
0f6f4     14 1B 02 F1 | 	add	arg05, local02
0f6f8     08 4E 05 F1 | 	add	fp, #8
0f6fc     A7 12 02 FB | 	rdlong	arg01, fp
0f700     01 26 66 F0 | 	shl	local01, #1
0f704     13 13 02 F1 | 	add	arg01, local01
0f708     09 FB E1 FA | 	rdword	result1, arg01
0f70c     0D FB 51 FC | 	wrword	result1, arg05
0f710     08 4E 85 F1 | 	sub	fp, #8
0f714     A7 28 02 FB | 	rdlong	local02, fp
0f718     01 28 06 F1 | 	add	local02, #1
0f71c     A7 28 62 FC | 	wrlong	local02, fp
0f720     14 4E 85 F1 | 	sub	fp, #20
0f724     00 29 56 F2 | 	cmps	local02, #256 wc
0f728     A8 FF 9F CD |  if_b	jmp	#LR__1318
0f72c                 | LR__1319
0f72c     0C 00 00 FF 
0f730     D8 E4 85 F1 | 	sub	objptr, ##6360
0f734     78 00 90 FD | 	jmp	#LR__1322
0f738                 | LR__1320
0f738                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0f738     14 4E 05 F1 | 	add	fp, #20
0f73c     A7 00 68 FC | 	wrlong	#0, fp
0f740     14 4E 85 F1 | 	sub	fp, #20
0f744                 | LR__1321
0f744     18 4E 05 F1 | 	add	fp, #24
0f748     A7 28 02 FB | 	rdlong	local02, fp
0f74c     09 28 66 F0 | 	shl	local02, #9
0f750     0C 00 00 FF 
0f754     D8 E4 05 F1 | 	add	objptr, ##6360
0f758     F2 28 02 F1 | 	add	local02, objptr
0f75c     04 4E 85 F1 | 	sub	fp, #4
0f760     A7 26 02 FB | 	rdlong	local01, fp
0f764     13 2B 02 F6 | 	mov	local03, local01
0f768     01 2A 66 F0 | 	shl	local03, #1
0f76c     14 2B 02 F1 | 	add	local03, local02
0f770     08 4E 05 F1 | 	add	fp, #8
0f774     A7 12 02 FB | 	rdlong	arg01, fp
0f778     1C 4E 85 F1 | 	sub	fp, #28
0f77c     01 26 66 F0 | 	shl	local01, #1
0f780     13 13 02 F1 | 	add	arg01, local01
0f784     0C 00 00 FF 
0f788     D8 E4 85 F1 | 	sub	objptr, ##6360
0f78c     88 01 B1 FD | 	call	#_psdpeek
0f790     15 FB 51 FC | 	wrword	result1, local03
0f794     14 4E 05 F1 | 	add	fp, #20
0f798     A7 2A 02 FB | 	rdlong	local03, fp
0f79c     01 2A 06 F1 | 	add	local03, #1
0f7a0     A7 2A 62 FC | 	wrlong	local03, fp
0f7a4     14 4E 85 F1 | 	sub	fp, #20
0f7a8     00 2B 56 F2 | 	cmps	local03, #256 wc
0f7ac     94 FF 9F CD |  if_b	jmp	#LR__1321
0f7b0                 | LR__1322
0f7b0     18 4E 05 F1 | 	add	fp, #24
0f7b4     A7 2A 02 FB | 	rdlong	local03, fp
0f7b8     18 4E 85 F1 | 	sub	fp, #24
0f7bc     09 2A 66 F0 | 	shl	local03, #9
0f7c0     0C 00 00 FF 
0f7c4     D8 E4 05 F1 | 	add	objptr, ##6360
0f7c8     F2 2A 02 F1 | 	add	local03, objptr
0f7cc     FE 2B 06 F1 | 	add	local03, #510
0f7d0     15 01 58 FC | 	wrword	#0, local03
0f7d4                 | '     envbuf(channel,255)=0
0f7d4                 | '     return   
0f7d4     0C 00 00 FF 
0f7d8     D8 E4 85 F1 | 	sub	objptr, ##6360
0f7dc     54 06 90 FD | 	jmp	#LR__1331
0f7e0                 | LR__1323
0f7e0                 | ' 
0f7e0                 | ' if numpar=5 then   						 'simple adsr
0f7e0     10 4E 05 F1 | 	add	fp, #16
0f7e4     A7 28 02 FB | 	rdlong	local02, fp
0f7e8     10 4E 85 F1 | 	sub	fp, #16
0f7ec     05 28 0E F2 | 	cmp	local02, #5 wz
0f7f0     14 06 90 5D |  if_ne	jmp	#LR__1330
0f7f4     E8 D0 BF FD | 	call	#_pop
0f7f8     FF 26 02 F6 | 	mov	local01, result3
0f7fc     40 4E 05 F1 | 	add	fp, #64
0f800     A7 FA 61 FC | 	wrlong	result1, fp
0f804     04 4E 05 F1 | 	add	fp, #4
0f808     A7 FC 61 FC | 	wrlong	result2, fp
0f80c     04 4E 05 F1 | 	add	fp, #4
0f810     A7 26 62 FC | 	wrlong	local01, fp
0f814     08 4E 85 F1 | 	sub	fp, #8
0f818     A7 12 02 F6 | 	mov	arg01, fp
0f81c     40 4E 85 F1 | 	sub	fp, #64
0f820     5C D3 BF FD | 	call	#_converttofloat
0f824     FD 28 02 F6 | 	mov	local02, result1
0f828     2C 4E 05 F1 | 	add	fp, #44
0f82c     A7 28 62 FC | 	wrlong	local02, fp
0f830     2C 4E 85 F1 | 	sub	fp, #44
0f834     A8 D0 BF FD | 	call	#_pop
0f838     FF 26 02 F6 | 	mov	local01, result3
0f83c     40 4E 05 F1 | 	add	fp, #64
0f840     A7 FA 61 FC | 	wrlong	result1, fp
0f844     04 4E 05 F1 | 	add	fp, #4
0f848     A7 FC 61 FC | 	wrlong	result2, fp
0f84c     04 4E 05 F1 | 	add	fp, #4
0f850     A7 26 62 FC | 	wrlong	local01, fp
0f854     08 4E 85 F1 | 	sub	fp, #8
0f858     A7 12 02 F6 | 	mov	arg01, fp
0f85c     40 4E 85 F1 | 	sub	fp, #64
0f860     1C D3 BF FD | 	call	#_converttofloat
0f864     FD 28 02 F6 | 	mov	local02, result1
0f868     28 4E 05 F1 | 	add	fp, #40
0f86c     A7 28 62 FC | 	wrlong	local02, fp
0f870     28 4E 85 F1 | 	sub	fp, #40
0f874     68 D0 BF FD | 	call	#_pop
0f878     FF 26 02 F6 | 	mov	local01, result3
0f87c     40 4E 05 F1 | 	add	fp, #64
0f880     A7 FA 61 FC | 	wrlong	result1, fp
0f884     04 4E 05 F1 | 	add	fp, #4
0f888     A7 FC 61 FC | 	wrlong	result2, fp
0f88c     04 4E 05 F1 | 	add	fp, #4
0f890     A7 26 62 FC | 	wrlong	local01, fp
0f894     08 4E 85 F1 | 	sub	fp, #8
0f898     A7 12 02 F6 | 	mov	arg01, fp
0f89c     40 4E 85 F1 | 	sub	fp, #64
0f8a0     DC D2 BF FD | 	call	#_converttofloat
0f8a4     FD 28 02 F6 | 	mov	local02, result1
0f8a8     24 4E 05 F1 | 	add	fp, #36
0f8ac     A7 28 62 FC | 	wrlong	local02, fp
0f8b0     24 4E 85 F1 | 	sub	fp, #36
0f8b4     28 D0 BF FD | 	call	#_pop
0f8b8     FF 26 02 F6 | 	mov	local01, result3
0f8bc     40 4E 05 F1 | 	add	fp, #64
0f8c0     A7 FA 61 FC | 	wrlong	result1, fp
0f8c4     04 4E 05 F1 | 	add	fp, #4
0f8c8     A7 FC 61 FC | 	wrlong	result2, fp
0f8cc     04 4E 05 F1 | 	add	fp, #4
0f8d0     A7 26 62 FC | 	wrlong	local01, fp
0f8d4     08 4E 85 F1 | 	sub	fp, #8
0f8d8     A7 12 02 F6 | 	mov	arg01, fp
0f8dc     40 4E 85 F1 | 	sub	fp, #64
0f8e0     9C D2 BF FD | 	call	#_converttofloat
0f8e4     FD 28 02 F6 | 	mov	local02, result1
0f8e8     20 4E 05 F1 | 	add	fp, #32
0f8ec     A7 28 62 FC | 	wrlong	local02, fp
0f8f0     20 4E 85 F1 | 	sub	fp, #32
0f8f4     E8 CF BF FD | 	call	#_pop
0f8f8     FF 26 02 F6 | 	mov	local01, result3
0f8fc     40 4E 05 F1 | 	add	fp, #64
0f900     A7 FA 61 FC | 	wrlong	result1, fp
0f904     04 4E 05 F1 | 	add	fp, #4
0f908     A7 FC 61 FC | 	wrlong	result2, fp
0f90c     04 4E 05 F1 | 	add	fp, #4
0f910     A7 26 62 FC | 	wrlong	local01, fp
0f914     08 4E 85 F1 | 	sub	fp, #8
0f918     A7 12 02 F6 | 	mov	arg01, fp
0f91c     40 4E 85 F1 | 	sub	fp, #64
0f920     A0 D1 BF FD | 	call	#_converttoint
0f924     18 4E 05 F1 | 	add	fp, #24
0f928     A7 FA 61 FC | 	wrlong	result1, fp
0f92c                 | '   t1=pop() : rr=converttofloat(t1)
0f92c                 | '   t1=pop() : ss=converttofloat(t1) 
0f92c                 | '   t1=pop() : dd=converttofloat(t1)
0f92c                 | '   t1=pop() : aa=converttofloat(t1)
0f92c                 | '   t1=pop() : channel=converttoint(t1)
0f92c                 | '   if ss<0.0 then ss=0.0 
0f92c     10 4E 05 F1 | 	add	fp, #16
0f930     A7 12 02 FB | 	rdlong	arg01, fp
0f934     28 4E 85 F1 | 	sub	fp, #40
0f938     00 14 06 F6 | 	mov	arg02, #0
0f93c     01 16 06 F6 | 	mov	arg03, #1
0f940     FC 68 B1 FD | 	call	#__system___float_cmp
0f944     00 FA 55 F2 | 	cmps	result1, #0 wc
0f948     28 4E 05 C1 |  if_b	add	fp, #40
0f94c     A7 00 68 CC |  if_b	wrlong	#0, fp
0f950     28 4E 85 C1 |  if_b	sub	fp, #40
0f954                 | '   if ss>1.0 then ss=1.0
0f954     28 4E 05 F1 | 	add	fp, #40
0f958     A7 12 02 FB | 	rdlong	arg01, fp
0f95c     28 4E 85 F1 | 	sub	fp, #40
0f960     00 C0 1F FF 
0f964     00 14 06 F6 | 	mov	arg02, ##1065353216
0f968     01 16 66 F6 | 	neg	arg03, #1
0f96c     D0 68 B1 FD | 	call	#__system___float_cmp
0f970     01 FA 55 F2 | 	cmps	result1, #1 wc
0f974     28 4E 05 31 |  if_ae	add	fp, #40
0f978     00 C0 9F 3F 
0f97c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0f980     28 4E 85 31 |  if_ae	sub	fp, #40
0f984     20 4E 05 F1 | 	add	fp, #32
0f988     A7 12 02 FB | 	rdlong	arg01, fp
0f98c     04 4E 05 F1 | 	add	fp, #4
0f990     A7 14 02 FB | 	rdlong	arg02, fp
0f994     24 4E 85 F1 | 	sub	fp, #36
0f998     A0 60 B1 FD | 	call	#__system___float_add
0f99c     FD 12 02 F6 | 	mov	arg01, result1
0f9a0     2C 4E 05 F1 | 	add	fp, #44
0f9a4     A7 14 02 FB | 	rdlong	arg02, fp
0f9a8     2C 4E 85 F1 | 	sub	fp, #44
0f9ac     8C 60 B1 FD | 	call	#__system___float_add
0f9b0     30 4E 05 F1 | 	add	fp, #48
0f9b4     A7 FA 61 FC | 	wrlong	result1, fp
0f9b8     FD 14 02 F6 | 	mov	arg02, result1
0f9bc     30 4E 85 F1 | 	sub	fp, #48
0f9c0     00 C0 21 FF 
0f9c4     00 12 06 F6 | 	mov	arg01, ##1132462080
0f9c8     44 66 B1 FD | 	call	#__system___float_div
0f9cc     34 4E 05 F1 | 	add	fp, #52
0f9d0     A7 FA 61 FC | 	wrlong	result1, fp
0f9d4     14 4E 85 F1 | 	sub	fp, #20
0f9d8     A7 12 02 FB | 	rdlong	arg01, fp
0f9dc     FD 14 02 F6 | 	mov	arg02, result1
0f9e0     20 4E 85 F1 | 	sub	fp, #32
0f9e4     24 64 B1 FD | 	call	#__system___float_mul
0f9e8     FD 12 02 F6 | 	mov	arg01, result1
0f9ec     01 14 06 F6 | 	mov	arg02, #1
0f9f0     E0 68 B1 FD | 	call	#__system___float_tointeger
0f9f4     A7 FA 61 FC | 	wrlong	result1, fp
0f9f8     24 4E 05 F1 | 	add	fp, #36
0f9fc     A7 12 02 FB | 	rdlong	arg01, fp
0fa00     10 4E 05 F1 | 	add	fp, #16
0fa04     A7 14 02 FB | 	rdlong	arg02, fp
0fa08     34 4E 85 F1 | 	sub	fp, #52
0fa0c     FC 63 B1 FD | 	call	#__system___float_mul
0fa10     FD 12 02 F6 | 	mov	arg01, result1
0fa14     01 14 06 F6 | 	mov	arg02, #1
0fa18     B8 68 B1 FD | 	call	#__system___float_tointeger
0fa1c     04 4E 05 F1 | 	add	fp, #4
0fa20     A7 FA 61 FC | 	wrlong	result1, fp
0fa24     28 4E 05 F1 | 	add	fp, #40
0fa28     A7 12 02 FB | 	rdlong	arg01, fp
0fa2c     08 4E 05 F1 | 	add	fp, #8
0fa30     A7 14 02 FB | 	rdlong	arg02, fp
0fa34     34 4E 85 F1 | 	sub	fp, #52
0fa38     D0 63 B1 FD | 	call	#__system___float_mul
0fa3c     FD 12 02 F6 | 	mov	arg01, result1
0fa40     01 14 06 F6 | 	mov	arg02, #1
0fa44     8C 68 B1 FD | 	call	#__system___float_tointeger
0fa48     0C 4E 05 F1 | 	add	fp, #12
0fa4c     A7 FA 61 FC | 	wrlong	result1, fp
0fa50     0C 4E 85 F1 | 	sub	fp, #12
0fa54     F8 BF 23 FF 
0fa58     00 28 06 F6 | 	mov	local02, ##1199566848
0fa5c     A7 12 02 FB | 	rdlong	arg01, fp
0fa60     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa64     1F 2C C6 C9 |  if_b	decod	local04, #31
0fa68     00 2C 06 36 |  if_ae	mov	local04, #0
0fa6c     98 5F B1 FD | 	call	#__system___float_fromuns
0fa70     16 FB 61 F5 | 	xor	result1, local04
0fa74     FD 14 02 F6 | 	mov	arg02, result1
0fa78     14 13 02 F6 | 	mov	arg01, local02
0fa7c     90 65 B1 FD | 	call	#__system___float_div
0fa80     38 4E 05 F1 | 	add	fp, #56
0fa84     A7 FA 61 FC | 	wrlong	result1, fp
0fa88     F8 BF 23 FF 
0fa8c     00 28 06 F6 | 	mov	local02, ##1199566848
0fa90     10 4E 85 F1 | 	sub	fp, #16
0fa94     A7 14 02 FB | 	rdlong	arg02, fp
0fa98     28 4E 85 F1 | 	sub	fp, #40
0fa9c     F8 BF 23 FF 
0faa0     00 12 06 F6 | 	mov	arg01, ##1199566848
0faa4     64 63 B1 FD | 	call	#__system___float_mul
0faa8     FD 14 02 F6 | 	mov	arg02, result1
0faac     14 13 02 F6 | 	mov	arg01, local02
0fab0     1F 14 E6 F4 | 	bitnot	arg02, #31
0fab4     84 5F B1 FD | 	call	#__system___float_add
0fab8     FD 28 02 F6 | 	mov	local02, result1
0fabc     04 4E 05 F1 | 	add	fp, #4
0fac0     A7 12 02 FB | 	rdlong	arg01, fp
0fac4     04 4E 85 F1 | 	sub	fp, #4
0fac8     09 13 52 F6 | 	abs	arg01, arg01 wc
0facc     1F 2C C6 C9 |  if_b	decod	local04, #31
0fad0     00 2C 06 36 |  if_ae	mov	local04, #0
0fad4     30 5F B1 FD | 	call	#__system___float_fromuns
0fad8     16 FB 61 F5 | 	xor	result1, local04
0fadc     FD 14 02 F6 | 	mov	arg02, result1
0fae0     14 13 02 F6 | 	mov	arg01, local02
0fae4     28 65 B1 FD | 	call	#__system___float_div
0fae8     24 4E 05 F1 | 	add	fp, #36
0faec     A7 FA 61 FC | 	wrlong	result1, fp
0faf0     04 4E 05 F1 | 	add	fp, #4
0faf4     A7 14 02 FB | 	rdlong	arg02, fp
0faf8     28 4E 85 F1 | 	sub	fp, #40
0fafc     F8 BF 23 FF 
0fb00     00 12 06 F6 | 	mov	arg01, ##1199566848
0fb04     04 63 B1 FD | 	call	#__system___float_mul
0fb08     FD 28 02 F6 | 	mov	local02, result1
0fb0c     0C 4E 05 F1 | 	add	fp, #12
0fb10     A7 12 02 FB | 	rdlong	arg01, fp
0fb14     0C 4E 85 F1 | 	sub	fp, #12
0fb18     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb1c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fb20     00 2C 06 36 |  if_ae	mov	local04, #0
0fb24     E0 5E B1 FD | 	call	#__system___float_fromuns
0fb28     16 FB 61 F5 | 	xor	result1, local04
0fb2c     FD 14 02 F6 | 	mov	arg02, result1
0fb30     14 13 02 F6 | 	mov	arg01, local02
0fb34     D8 64 B1 FD | 	call	#__system___float_div
0fb38     3C 4E 05 F1 | 	add	fp, #60
0fb3c     A7 FA 61 FC | 	wrlong	result1, fp
0fb40     24 4E 85 F1 | 	sub	fp, #36
0fb44     A7 2E 02 FB | 	rdlong	local05, fp
0fb48     18 4E 85 F1 | 	sub	fp, #24
0fb4c     01 2E 66 F0 | 	shl	local05, #1
0fb50     51 00 00 FF 
0fb54     C8 E5 05 F1 | 	add	objptr, ##41928
0fb58     F2 2E 02 F1 | 	add	local05, objptr
0fb5c     A7 30 02 FB | 	rdlong	local06, fp
0fb60     04 4E 05 F1 | 	add	fp, #4
0fb64     A7 2A 02 FB | 	rdlong	local03, fp
0fb68     15 31 02 F1 | 	add	local06, local03
0fb6c     17 31 52 FC | 	wrword	local06, local05
0fb70     1C 4E 05 F1 | 	add	fp, #28
0fb74     A7 00 68 FC | 	wrlong	#0, fp
0fb78                 | '   fulltime=aa+dd+rr
0fb78                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0fb78                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0fb78                 | '   suspoints(channel)=a+d
0fb78                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0fb78     0C 4E 85 F1 | 	sub	fp, #12
0fb7c     A7 00 68 FC | 	wrlong	#0, fp
0fb80     14 4E 85 F1 | 	sub	fp, #20
0fb84     A7 32 02 FB | 	rdlong	local07, fp
0fb88     51 00 00 FF 
0fb8c     C8 E5 85 F1 | 	sub	objptr, ##41928
0fb90                 | LR__1324
0fb90     14 4E 05 F1 | 	add	fp, #20
0fb94     A7 28 02 FB | 	rdlong	local02, fp
0fb98     14 4E 85 F1 | 	sub	fp, #20
0fb9c     19 29 52 F2 | 	cmps	local02, local07 wc
0fba0     80 00 90 3D |  if_ae	jmp	#LR__1325
0fba4     18 4E 05 F1 | 	add	fp, #24
0fba8     A7 30 02 FB | 	rdlong	local06, fp
0fbac     09 30 66 F0 | 	shl	local06, #9
0fbb0     0C 00 00 FF 
0fbb4     D8 E4 05 F1 | 	add	objptr, ##6360
0fbb8     F2 30 02 F1 | 	add	local06, objptr
0fbbc     04 4E 85 F1 | 	sub	fp, #4
0fbc0     A7 2E 02 FB | 	rdlong	local05, fp
0fbc4     01 2E 66 F0 | 	shl	local05, #1
0fbc8     18 2F 02 F1 | 	add	local05, local06
0fbcc     0C 4E 05 F1 | 	add	fp, #12
0fbd0     A7 12 02 FB | 	rdlong	arg01, fp
0fbd4     20 4E 85 F1 | 	sub	fp, #32
0fbd8     0C 00 00 FF 
0fbdc     D8 E4 85 F1 | 	sub	objptr, ##6360
0fbe0     01 14 06 F6 | 	mov	arg02, #1
0fbe4     EC 66 B1 FD | 	call	#__system___float_tointeger
0fbe8     17 FB 51 FC | 	wrword	result1, local05
0fbec     20 4E 05 F1 | 	add	fp, #32
0fbf0     A7 12 02 FB | 	rdlong	arg01, fp
0fbf4     18 4E 05 F1 | 	add	fp, #24
0fbf8     A7 14 02 FB | 	rdlong	arg02, fp
0fbfc     38 4E 85 F1 | 	sub	fp, #56
0fc00     38 5E B1 FD | 	call	#__system___float_add
0fc04     20 4E 05 F1 | 	add	fp, #32
0fc08     A7 FA 61 FC | 	wrlong	result1, fp
0fc0c     0C 4E 85 F1 | 	sub	fp, #12
0fc10     A7 30 02 FB | 	rdlong	local06, fp
0fc14     01 30 06 F1 | 	add	local06, #1
0fc18     A7 30 62 FC | 	wrlong	local06, fp
0fc1c     14 4E 85 F1 | 	sub	fp, #20
0fc20     6C FF 9F FD | 	jmp	#LR__1324
0fc24                 | LR__1325
0fc24                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0fc24     A7 28 02 FB | 	rdlong	local02, fp
0fc28     14 4E 05 F1 | 	add	fp, #20
0fc2c     A7 28 62 FC | 	wrlong	local02, fp
0fc30     14 4E 85 F1 | 	sub	fp, #20
0fc34     A7 34 02 FB | 	rdlong	local08, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 28 02 FB | 	rdlong	local02, fp
0fc40     04 4E 85 F1 | 	sub	fp, #4
0fc44     14 35 02 F1 | 	add	local08, local02
0fc48                 | LR__1326
0fc48     14 4E 05 F1 | 	add	fp, #20
0fc4c     A7 28 02 FB | 	rdlong	local02, fp
0fc50     14 4E 85 F1 | 	sub	fp, #20
0fc54     1A 29 52 F2 | 	cmps	local02, local08 wc
0fc58     A8 00 90 3D |  if_ae	jmp	#LR__1327
0fc5c     18 4E 05 F1 | 	add	fp, #24
0fc60     A7 32 02 FB | 	rdlong	local07, fp
0fc64     09 32 66 F0 | 	shl	local07, #9
0fc68     0C 00 00 FF 
0fc6c     D8 E4 05 F1 | 	add	objptr, ##6360
0fc70     F2 32 02 F1 | 	add	local07, objptr
0fc74     04 4E 85 F1 | 	sub	fp, #4
0fc78     A7 30 02 FB | 	rdlong	local06, fp
0fc7c     01 30 66 F0 | 	shl	local06, #1
0fc80     19 31 02 F1 | 	add	local06, local07
0fc84     0C 4E 05 F1 | 	add	fp, #12
0fc88     A7 12 02 FB | 	rdlong	arg01, fp
0fc8c     20 4E 85 F1 | 	sub	fp, #32
0fc90     0C 00 00 FF 
0fc94     D8 E4 85 F1 | 	sub	objptr, ##6360
0fc98     01 14 06 F6 | 	mov	arg02, #1
0fc9c     34 66 B1 FD | 	call	#__system___float_tointeger
0fca0     18 FB 51 FC | 	wrword	result1, local06
0fca4     20 4E 05 F1 | 	add	fp, #32
0fca8     A7 12 02 FB | 	rdlong	arg01, fp
0fcac     04 4E 05 F1 | 	add	fp, #4
0fcb0     A7 14 02 FB | 	rdlong	arg02, fp
0fcb4     24 4E 85 F1 | 	sub	fp, #36
0fcb8     1F 14 E6 F4 | 	bitnot	arg02, #31
0fcbc     7C 5D B1 FD | 	call	#__system___float_add
0fcc0     20 4E 05 F1 | 	add	fp, #32
0fcc4     A7 FA 61 FC | 	wrlong	result1, fp
0fcc8     20 4E 85 F1 | 	sub	fp, #32
0fccc     FD 12 02 F6 | 	mov	arg01, result1
0fcd0     00 14 06 F6 | 	mov	arg02, #0
0fcd4     01 16 06 F6 | 	mov	arg03, #1
0fcd8     64 65 B1 FD | 	call	#__system___float_cmp
0fcdc     00 FA 55 F2 | 	cmps	result1, #0 wc
0fce0     20 4E 05 C1 |  if_b	add	fp, #32
0fce4     A7 00 68 CC |  if_b	wrlong	#0, fp
0fce8     20 4E 85 C1 |  if_b	sub	fp, #32
0fcec     14 4E 05 F1 | 	add	fp, #20
0fcf0     A7 32 02 FB | 	rdlong	local07, fp
0fcf4     01 32 06 F1 | 	add	local07, #1
0fcf8     A7 32 62 FC | 	wrlong	local07, fp
0fcfc     14 4E 85 F1 | 	sub	fp, #20
0fd00     44 FF 9F FD | 	jmp	#LR__1326
0fd04                 | LR__1327
0fd04                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0fd04     A7 28 02 FB | 	rdlong	local02, fp
0fd08     04 4E 05 F1 | 	add	fp, #4
0fd0c     A7 34 02 FB | 	rdlong	local08, fp
0fd10     1A 29 02 F1 | 	add	local02, local08
0fd14     10 4E 05 F1 | 	add	fp, #16
0fd18     A7 28 62 FC | 	wrlong	local02, fp
0fd1c     14 4E 85 F1 | 	sub	fp, #20
0fd20                 | LR__1328
0fd20     14 4E 05 F1 | 	add	fp, #20
0fd24     A7 2E 02 FB | 	rdlong	local05, fp
0fd28     14 4E 85 F1 | 	sub	fp, #20
0fd2c     00 2F 56 F2 | 	cmps	local05, #256 wc
0fd30     A8 00 90 3D |  if_ae	jmp	#LR__1329
0fd34     18 4E 05 F1 | 	add	fp, #24
0fd38     A7 34 02 FB | 	rdlong	local08, fp
0fd3c     09 34 66 F0 | 	shl	local08, #9
0fd40     0C 00 00 FF 
0fd44     D8 E4 05 F1 | 	add	objptr, ##6360
0fd48     F2 34 02 F1 | 	add	local08, objptr
0fd4c     04 4E 85 F1 | 	sub	fp, #4
0fd50     A7 32 02 FB | 	rdlong	local07, fp
0fd54     01 32 66 F0 | 	shl	local07, #1
0fd58     1A 33 02 F1 | 	add	local07, local08
0fd5c     0C 4E 05 F1 | 	add	fp, #12
0fd60     A7 12 02 FB | 	rdlong	arg01, fp
0fd64     20 4E 85 F1 | 	sub	fp, #32
0fd68     0C 00 00 FF 
0fd6c     D8 E4 85 F1 | 	sub	objptr, ##6360
0fd70     01 14 06 F6 | 	mov	arg02, #1
0fd74     5C 65 B1 FD | 	call	#__system___float_tointeger
0fd78     19 FB 51 FC | 	wrword	result1, local07
0fd7c     20 4E 05 F1 | 	add	fp, #32
0fd80     A7 12 02 FB | 	rdlong	arg01, fp
0fd84     1C 4E 05 F1 | 	add	fp, #28
0fd88     A7 14 02 FB | 	rdlong	arg02, fp
0fd8c     3C 4E 85 F1 | 	sub	fp, #60
0fd90     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd94     A4 5C B1 FD | 	call	#__system___float_add
0fd98     20 4E 05 F1 | 	add	fp, #32
0fd9c     A7 FA 61 FC | 	wrlong	result1, fp
0fda0     20 4E 85 F1 | 	sub	fp, #32
0fda4     FD 12 02 F6 | 	mov	arg01, result1
0fda8     00 14 06 F6 | 	mov	arg02, #0
0fdac     01 16 06 F6 | 	mov	arg03, #1
0fdb0     8C 64 B1 FD | 	call	#__system___float_cmp
0fdb4     00 FA 55 F2 | 	cmps	result1, #0 wc
0fdb8     20 4E 05 C1 |  if_b	add	fp, #32
0fdbc     A7 00 68 CC |  if_b	wrlong	#0, fp
0fdc0     20 4E 85 C1 |  if_b	sub	fp, #32
0fdc4     14 4E 05 F1 | 	add	fp, #20
0fdc8     A7 34 02 FB | 	rdlong	local08, fp
0fdcc     01 34 06 F1 | 	add	local08, #1
0fdd0     A7 34 62 FC | 	wrlong	local08, fp
0fdd4     14 4E 85 F1 | 	sub	fp, #20
0fdd8     44 FF 9F FD | 	jmp	#LR__1328
0fddc                 | LR__1329
0fddc     18 4E 05 F1 | 	add	fp, #24
0fde0     A7 2E 02 FB | 	rdlong	local05, fp
0fde4     18 4E 85 F1 | 	sub	fp, #24
0fde8     09 2E 66 F0 | 	shl	local05, #9
0fdec     0C 00 00 FF 
0fdf0     D8 E4 05 F1 | 	add	objptr, ##6360
0fdf4     F2 2E 02 F1 | 	add	local05, objptr
0fdf8     FE 2F 06 F1 | 	add	local05, #510
0fdfc     17 01 58 FC | 	wrword	#0, local05
0fe00     0C 00 00 FF 
0fe04     D8 E4 85 F1 | 	sub	objptr, ##6360
0fe08                 | LR__1330
0fe08     18 4E 05 F1 | 	add	fp, #24
0fe0c     A7 2E 02 FB | 	rdlong	local05, fp
0fe10     18 4E 85 F1 | 	sub	fp, #24
0fe14     09 2E 66 F0 | 	shl	local05, #9
0fe18     0C 00 00 FF 
0fe1c     D8 E4 05 F1 | 	add	objptr, ##6360
0fe20     F2 2E 02 F1 | 	add	local05, objptr
0fe24     FE 2F 06 F1 | 	add	local05, #510
0fe28     17 01 58 FC | 	wrword	#0, local05
0fe2c     0C 00 00 FF 
0fe30     D8 E4 85 F1 | 	sub	objptr, ##6360
0fe34                 | LR__1331
0fe34     A7 F0 03 F6 | 	mov	ptra, fp
0fe38     B2 00 A0 FD | 	call	#popregs_
0fe3c                 | _do_defenv_ret
0fe3c     2D 00 64 FD | 	ret
0fe40                 | 
0fe40                 | ' 
0fe40                 | ' '-------------------- defsnd
0fe40                 | ' 
0fe40                 | ' sub do_defsnd
0fe40                 | _do_defsnd
0fe40     04 4A 05 F6 | 	mov	COUNT_, #4
0fe44     A8 00 A0 FD | 	call	#pushregs_
0fe48     88 F0 07 F1 | 	add	ptra, #136
0fe4c     4A 00 00 FF 
0fe50     80 E4 05 F1 | 	add	objptr, ##38016
0fe54     F2 1A 02 FB | 	rdlong	arg05, objptr
0fe58     0D 19 02 F6 | 	mov	arg04, arg05
0fe5c     01 18 66 F0 | 	shl	arg04, #1
0fe60     0D 19 02 F1 | 	add	arg04, arg05
0fe64     02 18 66 F0 | 	shl	arg04, #2
0fe68     03 00 00 FF 
0fe6c     04 E4 85 F1 | 	sub	objptr, ##1540
0fe70     F2 18 02 F1 | 	add	arg04, objptr
0fe74     0C 1B 02 FB | 	rdlong	arg05, arg04
0fe78     A7 1A 62 FC | 	wrlong	arg05, fp
0fe7c                 | ' 
0fe7c                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe7c                 | ' 
0fe7c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0fe7c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0fe7c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0fe7c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0fe7c                 | ' 
0fe7c                 | ' if numpar<2 then return
0fe7c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0fe80     47 00 00 FF 
0fe84     7C E4 85 F1 | 	sub	objptr, ##36476
0fe88     94 08 90 CD |  if_b	jmp	#LR__1363
0fe8c                 | '  
0fe8c                 | ' if numpar=2 then
0fe8c     A7 1A 02 FB | 	rdlong	arg05, fp
0fe90     02 1A 0E F2 | 	cmp	arg05, #2 wz
0fe94     A0 03 90 5D |  if_ne	jmp	#LR__1350
0fe98     44 CA BF FD | 	call	#_pop
0fe9c     FF 1A 02 F6 | 	mov	arg05, result3
0fea0     2C 4E 05 F1 | 	add	fp, #44
0fea4     A7 FA 61 FC | 	wrlong	result1, fp
0fea8     04 4E 05 F1 | 	add	fp, #4
0feac     A7 FC 61 FC | 	wrlong	result2, fp
0feb0     04 4E 05 F1 | 	add	fp, #4
0feb4     A7 1A 62 FC | 	wrlong	arg05, fp
0feb8                 | '   t1=pop()
0feb8                 | '   if t1.result_type=result_string2 then 
0feb8     34 4E 85 F1 | 	sub	fp, #52
0febc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0fec0     20 00 90 5D |  if_ne	jmp	#LR__1340
0fec4     2C 4E 05 F1 | 	add	fp, #44
0fec8     A7 12 02 FB | 	rdlong	arg01, fp
0fecc     2C 4E 85 F1 | 	sub	fp, #44
0fed0     84 CB BF FD | 	call	#_convertstring
0fed4     38 4E 05 F1 | 	add	fp, #56
0fed8     A7 FA 61 FC | 	wrlong	result1, fp
0fedc     38 4E 85 F1 | 	sub	fp, #56
0fee0     58 00 90 FD | 	jmp	#LR__1343
0fee4                 | LR__1340
0fee4     34 4E 05 F1 | 	add	fp, #52
0fee8     A7 1A 02 FB | 	rdlong	arg05, fp
0feec     34 4E 85 F1 | 	sub	fp, #52
0fef0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0fef4     18 00 90 5D |  if_ne	jmp	#LR__1341
0fef8     2C 4E 05 F1 | 	add	fp, #44
0fefc     A7 1A 02 FB | 	rdlong	arg05, fp
0ff00     0C 4E 05 F1 | 	add	fp, #12
0ff04     A7 1A 62 FC | 	wrlong	arg05, fp
0ff08     38 4E 85 F1 | 	sub	fp, #56
0ff0c     2C 00 90 FD | 	jmp	#LR__1342
0ff10                 | LR__1341
0ff10     99 01 00 FF 
0ff14     C6 1A 06 F6 | 	mov	arg05, ##@LR__5641
0ff18     38 4E 05 F1 | 	add	fp, #56
0ff1c     A7 1A 62 FC | 	wrlong	arg05, fp
0ff20     0C 4E 85 F1 | 	sub	fp, #12
0ff24     A7 12 02 F6 | 	mov	arg01, fp
0ff28     2C 4E 85 F1 | 	sub	fp, #44
0ff2c     94 CB BF FD | 	call	#_converttoint
0ff30     14 4E 05 F1 | 	add	fp, #20
0ff34     A7 FA 61 FC | 	wrlong	result1, fp
0ff38     14 4E 85 F1 | 	sub	fp, #20
0ff3c                 | LR__1342
0ff3c                 | LR__1343
0ff3c                 | '   if s<>"" then 
0ff3c     38 4E 05 F1 | 	add	fp, #56
0ff40     A7 12 02 FB | 	rdlong	arg01, fp
0ff44     38 4E 85 F1 | 	sub	fp, #56
0ff48     99 01 00 FF 
0ff4c     C7 14 06 F6 | 	mov	arg02, ##@LR__5642
0ff50     68 30 B1 FD | 	call	#__system___string_cmp
0ff54     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff58     E0 01 90 AD |  if_e	jmp	#LR__1346
0ff5c     80 C9 BF FD | 	call	#_pop
0ff60     FF 1A 02 F6 | 	mov	arg05, result3
0ff64     2C 4E 05 F1 | 	add	fp, #44
0ff68     A7 FA 61 FC | 	wrlong	result1, fp
0ff6c     04 4E 05 F1 | 	add	fp, #4
0ff70     A7 FC 61 FC | 	wrlong	result2, fp
0ff74     04 4E 05 F1 | 	add	fp, #4
0ff78     A7 1A 62 FC | 	wrlong	arg05, fp
0ff7c     08 4E 85 F1 | 	sub	fp, #8
0ff80     A7 12 02 F6 | 	mov	arg01, fp
0ff84     2C 4E 85 F1 | 	sub	fp, #44
0ff88     38 CB BF FD | 	call	#_converttoint
0ff8c     10 4E 05 F1 | 	add	fp, #16
0ff90     A7 FA 61 FC | 	wrlong	result1, fp
0ff94                 | '     t1=pop()
0ff94                 | '     channel=converttoint(t1) : if channel>31 then return
0ff94     FD 1A 02 F6 | 	mov	arg05, result1
0ff98     10 4E 85 F1 | 	sub	fp, #16
0ff9c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0ffa0     7C 07 90 3D |  if_ae	jmp	#LR__1363
0ffa4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0ffa4     09 12 06 F6 | 	mov	arg01, #9
0ffa8     40 83 B1 FD | 	call	#__system__close
0ffac     09 26 06 F6 | 	mov	local01, #9
0ffb0     99 01 00 FF 
0ffb4     C8 12 06 F6 | 	mov	arg01, ##@LR__5643
0ffb8     38 4E 05 F1 | 	add	fp, #56
0ffbc     A7 14 02 FB | 	rdlong	arg02, fp
0ffc0     38 4E 85 F1 | 	sub	fp, #56
0ffc4     28 30 B1 FD | 	call	#__system___string_concat
0ffc8     FD 14 02 F6 | 	mov	arg02, result1
0ffcc     13 13 02 F6 | 	mov	arg01, local01
0ffd0     00 16 06 F6 | 	mov	arg03, #0
0ffd4     C0 3B B1 FD | 	call	#__system___basic_open_string
0ffd8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ffdc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ffe0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ffe4     52 00 00 FF 
0ffe8     20 E4 05 F1 | 	add	objptr, ##42016
0ffec     F2 FA 61 FC | 	wrlong	result1, objptr
0fff0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0fff0     52 00 00 FF 
0fff4     20 E4 85 F1 | 	sub	objptr, ##42016
0fff8     B0 00 90 AD |  if_e	jmp	#LR__1344
0fffc     00 12 06 F6 | 	mov	arg01, #0
10000     B8 8C B1 FD | 	call	#__system___getiolock_0558
10004     FD 12 02 F6 | 	mov	arg01, result1
10008     88 2F B1 FD | 	call	#__system___lockmem
1000c     99 01 00 FF 
10010     D5 14 06 F6 | 	mov	arg02, ##@LR__5644
10014     00 12 06 F6 | 	mov	arg01, #0
10018     00 16 06 F6 | 	mov	arg03, #0
1001c     68 3C B1 FD | 	call	#__system___basic_print_string
10020     52 00 00 FF 
10024     20 E4 05 F1 | 	add	objptr, ##42016
10028     F2 14 02 FB | 	rdlong	arg02, objptr
1002c     52 00 00 FF 
10030     20 E4 85 F1 | 	sub	objptr, ##42016
10034     00 12 06 F6 | 	mov	arg01, #0
10038     00 16 06 F6 | 	mov	arg03, #0
1003c     0A 18 06 F6 | 	mov	arg04, #10
10040     88 3C B1 FD | 	call	#__system___basic_print_integer
10044     99 01 00 FF 
10048     E3 14 06 F6 | 	mov	arg02, ##@LR__5645
1004c     00 12 06 F6 | 	mov	arg01, #0
10050     00 16 06 F6 | 	mov	arg03, #0
10054     30 3C B1 FD | 	call	#__system___basic_print_string
10058     00 26 06 F6 | 	mov	local01, #0
1005c     52 00 00 FF 
10060     20 E4 05 F1 | 	add	objptr, ##42016
10064     F2 12 02 FB | 	rdlong	arg01, objptr
10068     52 00 00 FF 
1006c     20 E4 85 F1 | 	sub	objptr, ##42016
10070     AC 58 B1 FD | 	call	#__system___strerror
10074     FD 14 02 F6 | 	mov	arg02, result1
10078     13 13 02 F6 | 	mov	arg01, local01
1007c     00 16 06 F6 | 	mov	arg03, #0
10080     04 3C B1 FD | 	call	#__system___basic_print_string
10084     00 12 06 F6 | 	mov	arg01, #0
10088     0A 14 06 F6 | 	mov	arg02, #10
1008c     00 16 06 F6 | 	mov	arg03, #0
10090     9C 3B B1 FD | 	call	#__system___basic_print_char
10094     00 12 06 F6 | 	mov	arg01, #0
10098     20 8C B1 FD | 	call	#__system___getiolock_0558
1009c     FD 00 68 FC | 	wrlong	#0, result1
100a0     09 12 06 F6 | 	mov	arg01, #9
100a4     44 82 B1 FD | 	call	#__system__close
100a8     74 06 90 FD | 	jmp	#LR__1363
100ac                 | LR__1344
100ac                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
100ac     04 4E 05 F1 | 	add	fp, #4
100b0     A7 00 68 FC | 	wrlong	#0, fp
100b4                 | LR__1345
100b4     A7 26 02 FB | 	rdlong	local01, fp
100b8     01 26 66 F0 | 	shl	local01, #1
100bc     11 14 06 F6 | 	mov	arg02, #17
100c0     13 15 02 F1 | 	add	arg02, local01
100c4     78 4E 05 F1 | 	add	fp, #120
100c8     A7 16 02 F6 | 	mov	arg03, fp
100cc     7C 4E 85 F1 | 	sub	fp, #124
100d0     09 12 06 F6 | 	mov	arg01, #9
100d4     01 18 06 F6 | 	mov	arg04, #1
100d8     02 1A 06 F6 | 	mov	arg05, #2
100dc     24 3D B1 FD | 	call	#__system___basic_get
100e0     10 4E 05 F1 | 	add	fp, #16
100e4     A7 12 02 FB | 	rdlong	arg01, fp
100e8     0B 12 66 F0 | 	shl	arg01, #11
100ec     0C 4E 85 F1 | 	sub	fp, #12
100f0     A7 26 02 FB | 	rdlong	local01, fp
100f4     01 26 66 F0 | 	shl	local01, #1
100f8     13 13 02 F1 | 	add	arg01, local01
100fc     78 4E 05 F1 | 	add	fp, #120
10100     A7 14 E2 FA | 	rdword	arg02, fp
10104     7C 4E 85 F1 | 	sub	fp, #124
10108     0F 14 66 F7 | 	signx	arg02, #15
1010c     C8 F6 B0 FD | 	call	#_psdpoke
10110     04 4E 05 F1 | 	add	fp, #4
10114     A7 26 02 FB | 	rdlong	local01, fp
10118     01 26 06 F1 | 	add	local01, #1
1011c     A7 26 62 FC | 	wrlong	local01, fp
10120     02 00 00 FF 
10124     01 26 56 F2 | 	cmps	local01, ##1025 wc
10128     88 FF 9F CD |  if_b	jmp	#LR__1345
1012c     04 4E 85 F1 | 	sub	fp, #4
10130                 | '     close #9
10130     09 12 06 F6 | 	mov	arg01, #9
10134     B4 81 B1 FD | 	call	#__system__close
10138                 | '     return
10138     E4 05 90 FD | 	jmp	#LR__1363
1013c                 | LR__1346
1013c                 | '     if wptr < ($80000 - 2048) then 
1013c     14 4E 05 F1 | 	add	fp, #20
10140     A7 26 02 FB | 	rdlong	local01, fp
10144     14 4E 85 F1 | 	sub	fp, #20
10148     FC 03 00 FF 
1014c     00 26 56 F2 | 	cmps	local01, ##522240 wc
10150     70 00 90 3D |  if_ae	jmp	#LR__1348
10154                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10154     04 4E 05 F1 | 	add	fp, #4
10158     A7 00 68 FC | 	wrlong	#0, fp
1015c     04 4E 85 F1 | 	sub	fp, #4
10160                 | LR__1347
10160     10 4E 05 F1 | 	add	fp, #16
10164     A7 26 02 FB | 	rdlong	local01, fp
10168     0B 26 66 F0 | 	shl	local01, #11
1016c     0C 4E 85 F1 | 	sub	fp, #12
10170     A7 1A 02 FB | 	rdlong	arg05, fp
10174     0D 19 02 F6 | 	mov	arg04, arg05
10178     01 18 66 F0 | 	shl	arg04, #1
1017c     0C 27 02 F1 | 	add	local01, arg04
10180     10 4E 05 F1 | 	add	fp, #16
10184     A7 12 02 FB | 	rdlong	arg01, fp
10188     14 4E 85 F1 | 	sub	fp, #20
1018c     01 1A 66 F0 | 	shl	arg05, #1
10190     0D 13 02 F1 | 	add	arg01, arg05
10194     09 15 E2 FA | 	rdword	arg02, arg01
10198     13 13 02 F6 | 	mov	arg01, local01
1019c     38 F6 B0 FD | 	call	#_psdpoke
101a0     04 4E 05 F1 | 	add	fp, #4
101a4     A7 26 02 FB | 	rdlong	local01, fp
101a8     01 26 06 F1 | 	add	local01, #1
101ac     A7 26 62 FC | 	wrlong	local01, fp
101b0     04 4E 85 F1 | 	sub	fp, #4
101b4     02 00 00 FF 
101b8     00 26 56 F2 | 	cmps	local01, ##1024 wc
101bc     A0 FF 9F CD |  if_b	jmp	#LR__1347
101c0     5C 05 90 FD | 	jmp	#LR__1363
101c4                 | LR__1348
101c4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
101c4     04 4E 05 F1 | 	add	fp, #4
101c8     A7 00 68 FC | 	wrlong	#0, fp
101cc     04 4E 85 F1 | 	sub	fp, #4
101d0                 | LR__1349
101d0     10 4E 05 F1 | 	add	fp, #16
101d4     A7 26 02 FB | 	rdlong	local01, fp
101d8     0B 26 66 F0 | 	shl	local01, #11
101dc     0C 4E 85 F1 | 	sub	fp, #12
101e0     A7 1A 02 FB | 	rdlong	arg05, fp
101e4     0D 19 02 F6 | 	mov	arg04, arg05
101e8     01 18 66 F0 | 	shl	arg04, #1
101ec     0C 27 02 F1 | 	add	local01, arg04
101f0     10 4E 05 F1 | 	add	fp, #16
101f4     A7 12 02 FB | 	rdlong	arg01, fp
101f8     14 4E 85 F1 | 	sub	fp, #20
101fc     01 1A 66 F0 | 	shl	arg05, #1
10200     0D 13 02 F1 | 	add	arg01, arg05
10204     10 F7 B0 FD | 	call	#_psdpeek
10208     FD 14 02 F6 | 	mov	arg02, result1
1020c     13 13 02 F6 | 	mov	arg01, local01
10210     C4 F5 B0 FD | 	call	#_psdpoke
10214     04 4E 05 F1 | 	add	fp, #4
10218     A7 26 02 FB | 	rdlong	local01, fp
1021c     01 26 06 F1 | 	add	local01, #1
10220     A7 26 62 FC | 	wrlong	local01, fp
10224     04 4E 85 F1 | 	sub	fp, #4
10228     02 00 00 FF 
1022c     00 26 56 F2 | 	cmps	local01, ##1024 wc
10230     9C FF 9F CD |  if_b	jmp	#LR__1349
10234                 | '     return 
10234     E8 04 90 FD | 	jmp	#LR__1363
10238                 | '   return
10238                 | LR__1350
10238                 | ' for i=0 to 15 : harm(i)=0: next i  
10238     04 4E 05 F1 | 	add	fp, #4
1023c     A7 00 68 FC | 	wrlong	#0, fp
10240     97 16 48 FB | 	callpa	#(@LR__1352-@LR__1351)>>2,fcache_load_ptr_
10244                 | LR__1351
10244     A7 26 02 FB | 	rdlong	local01, fp
10248     02 26 66 F0 | 	shl	local01, #2
1024c     38 4E 05 F1 | 	add	fp, #56
10250     A7 26 02 F1 | 	add	local01, fp
10254     13 01 68 FC | 	wrlong	#0, local01
10258     38 4E 85 F1 | 	sub	fp, #56
1025c     A7 26 02 FB | 	rdlong	local01, fp
10260     01 26 06 F1 | 	add	local01, #1
10264     A7 26 62 FC | 	wrlong	local01, fp
10268     10 26 56 F2 | 	cmps	local01, #16 wc
1026c     D4 FF 9F CD |  if_b	jmp	#LR__1351
10270                 | LR__1352
10270     04 4E 85 F1 | 	sub	fp, #4
10274                 | ' for i=numpar to 2 step -1 
10274     A7 26 02 FB | 	rdlong	local01, fp
10278     04 4E 05 F1 | 	add	fp, #4
1027c     A7 26 62 FC | 	wrlong	local01, fp
10280     04 4E 85 F1 | 	sub	fp, #4
10284                 | LR__1353
10284     58 C6 BF FD | 	call	#_pop
10288     2C 4E 05 F1 | 	add	fp, #44
1028c     A7 FA 61 FC | 	wrlong	result1, fp
10290     04 4E 05 F1 | 	add	fp, #4
10294     A7 FC 61 FC | 	wrlong	result2, fp
10298     04 4E 05 F1 | 	add	fp, #4
1029c     A7 FE 61 FC | 	wrlong	result3, fp
102a0     30 4E 85 F1 | 	sub	fp, #48
102a4     A7 26 02 FB | 	rdlong	local01, fp
102a8     02 26 86 F1 | 	sub	local01, #2
102ac     02 26 66 F0 | 	shl	local01, #2
102b0     38 4E 05 F1 | 	add	fp, #56
102b4     A7 26 02 F1 | 	add	local01, fp
102b8     10 4E 85 F1 | 	sub	fp, #16
102bc     A7 12 02 F6 | 	mov	arg01, fp
102c0     2C 4E 85 F1 | 	sub	fp, #44
102c4     B8 C8 BF FD | 	call	#_converttofloat
102c8     13 FB 61 FC | 	wrlong	result1, local01
102cc     04 4E 05 F1 | 	add	fp, #4
102d0     A7 26 02 FB | 	rdlong	local01, fp
102d4     01 26 86 F1 | 	sub	local01, #1
102d8     A7 26 62 FC | 	wrlong	local01, fp
102dc     04 4E 85 F1 | 	sub	fp, #4
102e0     02 26 56 F2 | 	cmps	local01, #2 wc
102e4     9C FF 9F 3D |  if_ae	jmp	#LR__1353
102e8     F4 C5 BF FD | 	call	#_pop
102ec     FF 26 02 F6 | 	mov	local01, result3
102f0     2C 4E 05 F1 | 	add	fp, #44
102f4     A7 FA 61 FC | 	wrlong	result1, fp
102f8     04 4E 05 F1 | 	add	fp, #4
102fc     A7 FC 61 FC | 	wrlong	result2, fp
10300     04 4E 05 F1 | 	add	fp, #4
10304     A7 26 62 FC | 	wrlong	local01, fp
10308     08 4E 85 F1 | 	sub	fp, #8
1030c     A7 12 02 F6 | 	mov	arg01, fp
10310     2C 4E 85 F1 | 	sub	fp, #44
10314     AC C7 BF FD | 	call	#_converttoint
10318     10 4E 05 F1 | 	add	fp, #16
1031c     A7 FA 61 FC | 	wrlong	result1, fp
10320                 | ' t1=pop()
10320                 | ' channel=converttoint(t1) : : if channel>31 then return
10320     FD 26 02 F6 | 	mov	local01, result1
10324     10 4E 85 F1 | 	sub	fp, #16
10328     20 26 56 F2 | 	cmps	local01, #32 wc
1032c     F0 03 90 3D |  if_ae	jmp	#LR__1363
10330     20 4E 05 F1 | 	add	fp, #32
10334     A7 00 68 FC | 	wrlong	#0, fp
10338                 | ' max=0
10338                 | ' if harm(0)<0 then
10338     1C 4E 05 F1 | 	add	fp, #28
1033c     A7 12 02 FB | 	rdlong	arg01, fp
10340     3C 4E 85 F1 | 	sub	fp, #60
10344     00 14 06 F6 | 	mov	arg02, #0
10348     01 16 06 F6 | 	mov	arg03, #1
1034c     F0 5E B1 FD | 	call	#__system___float_cmp
10350     00 FA 55 F2 | 	cmps	result1, #0 wc
10354     04 01 90 3D |  if_ae	jmp	#LR__1356
10358     3C 4E 05 F1 | 	add	fp, #60
1035c     A7 FA 01 FB | 	rdlong	result1, fp
10360     1F FA 05 F4 | 	bitl	result1, #31
10364     24 4E 85 F1 | 	sub	fp, #36
10368     A7 FA 61 FC | 	wrlong	result1, fp
1036c     28 4E 05 F1 | 	add	fp, #40
10370     A7 FA 01 FB | 	rdlong	result1, fp
10374     1F FA 05 F4 | 	bitl	result1, #31
10378     24 4E 85 F1 | 	sub	fp, #36
1037c     A7 FA 61 FC | 	wrlong	result1, fp
10380     20 4E 05 F1 | 	add	fp, #32
10384     00 C0 9F FF 
10388     A7 00 68 FC | 	wrlong	##1065353216, fp
1038c     24 4E 85 F1 | 	sub	fp, #36
10390     A7 26 02 FB | 	rdlong	local01, fp
10394     28 4E 05 F1 | 	add	fp, #40
10398     A7 26 62 FC | 	wrlong	local01, fp
1039c     24 4E 85 F1 | 	sub	fp, #36
103a0     A7 26 02 FB | 	rdlong	local01, fp
103a4     28 4E 05 F1 | 	add	fp, #40
103a8     A7 26 62 FC | 	wrlong	local01, fp
103ac                 | '   harm(0)=1
103ac                 | '   harm(1)=even
103ac                 | '   harm(2)=odd
103ac                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
103ac     40 4E 85 F1 | 	sub	fp, #64
103b0     A7 06 68 FC | 	wrlong	#3, fp
103b4                 | LR__1354
103b4     A7 1A 02 FB | 	rdlong	arg05, fp
103b8     0D 29 02 F6 | 	mov	local02, arg05
103bc     02 28 66 F0 | 	shl	local02, #2
103c0     38 4E 05 F1 | 	add	fp, #56
103c4     A7 28 02 F1 | 	add	local02, fp
103c8     02 1A 86 F1 | 	sub	arg05, #2
103cc     02 1A 66 F0 | 	shl	arg05, #2
103d0     A7 1A 02 F1 | 	add	arg05, fp
103d4     0D 13 02 FB | 	rdlong	arg01, arg05
103d8     24 4E 85 F1 | 	sub	fp, #36
103dc     A7 14 02 FB | 	rdlong	arg02, fp
103e0     18 4E 85 F1 | 	sub	fp, #24
103e4     24 5A B1 FD | 	call	#__system___float_mul
103e8     14 FB 61 FC | 	wrlong	result1, local02
103ec     04 4E 05 F1 | 	add	fp, #4
103f0     A7 2A 02 FB | 	rdlong	local03, fp
103f4     02 2A 06 F1 | 	add	local03, #2
103f8     A7 2A 62 FC | 	wrlong	local03, fp
103fc     10 2A 56 F2 | 	cmps	local03, #16 wc
10400     B0 FF 9F CD |  if_b	jmp	#LR__1354
10404                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10404     A7 08 68 FC | 	wrlong	#4, fp
10408                 | LR__1355
10408     A7 2A 02 FB | 	rdlong	local03, fp
1040c     15 29 02 F6 | 	mov	local02, local03
10410     02 28 66 F0 | 	shl	local02, #2
10414     38 4E 05 F1 | 	add	fp, #56
10418     A7 28 02 F1 | 	add	local02, fp
1041c     02 2A 86 F1 | 	sub	local03, #2
10420     02 2A 66 F0 | 	shl	local03, #2
10424     A7 2A 02 F1 | 	add	local03, fp
10428     15 13 02 FB | 	rdlong	arg01, local03
1042c     20 4E 85 F1 | 	sub	fp, #32
10430     A7 14 02 FB | 	rdlong	arg02, fp
10434     1C 4E 85 F1 | 	sub	fp, #28
10438     D0 59 B1 FD | 	call	#__system___float_mul
1043c     14 FB 61 FC | 	wrlong	result1, local02
10440     04 4E 05 F1 | 	add	fp, #4
10444     A7 2A 02 FB | 	rdlong	local03, fp
10448     02 2A 06 F1 | 	add	local03, #2
1044c     A7 2A 62 FC | 	wrlong	local03, fp
10450     0F 2A 56 F2 | 	cmps	local03, #15 wc
10454     B0 FF 9F CD |  if_b	jmp	#LR__1355
10458     04 4E 85 F1 | 	sub	fp, #4
1045c                 | LR__1356
1045c                 | ' if harm(0)>=0 then ' synthesize with harmonics
1045c     3C 4E 05 F1 | 	add	fp, #60
10460     A7 12 02 FB | 	rdlong	arg01, fp
10464     3C 4E 85 F1 | 	sub	fp, #60
10468     00 14 06 F6 | 	mov	arg02, #0
1046c     01 16 66 F6 | 	neg	arg03, #1
10470     CC 5D B1 FD | 	call	#__system___float_cmp
10474     00 FA 55 F2 | 	cmps	result1, #0 wc
10478     A4 02 90 CD |  if_b	jmp	#LR__1362
1047c                 | '   for i=0 to 1023
1047c     04 4E 05 F1 | 	add	fp, #4
10480     A7 00 68 FC | 	wrlong	#0, fp
10484     04 4E 85 F1 | 	sub	fp, #4
10488                 | LR__1357
10488     24 4E 05 F1 | 	add	fp, #36
1048c     A7 00 68 FC | 	wrlong	#0, fp
10490                 | '     spl=0
10490                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10490     1C 4E 85 F1 | 	sub	fp, #28
10494     A7 00 68 FC | 	wrlong	#0, fp
10498                 | LR__1358
10498     A7 28 02 FB | 	rdlong	local02, fp
1049c     02 28 66 F0 | 	shl	local02, #2
104a0     34 4E 05 F1 | 	add	fp, #52
104a4     A7 28 02 F1 | 	add	local02, fp
104a8     14 2B 02 FB | 	rdlong	local03, local02
104ac     87 E4 1D FF 
104b0     DB 29 06 F6 | 	mov	local02, ##1003032539
104b4     38 4E 85 F1 | 	sub	fp, #56
104b8     A7 12 02 FB | 	rdlong	arg01, fp
104bc     04 4E 85 F1 | 	sub	fp, #4
104c0     09 13 52 F6 | 	abs	arg01, arg01 wc
104c4     1F 2C C6 C9 |  if_b	decod	local04, #31
104c8     00 2C 06 36 |  if_ae	mov	local04, #0
104cc     38 55 B1 FD | 	call	#__system___float_fromuns
104d0     16 FB 61 F5 | 	xor	result1, local04
104d4     FD 14 02 F6 | 	mov	arg02, result1
104d8     14 13 02 F6 | 	mov	arg01, local02
104dc     2C 59 B1 FD | 	call	#__system___float_mul
104e0     FD 28 02 F6 | 	mov	local02, result1
104e4     08 4E 05 F1 | 	add	fp, #8
104e8     A7 12 02 FB | 	rdlong	arg01, fp
104ec     08 4E 85 F1 | 	sub	fp, #8
104f0     01 12 06 F1 | 	add	arg01, #1
104f4     09 13 52 F6 | 	abs	arg01, arg01 wc
104f8     1F 2C C6 C9 |  if_b	decod	local04, #31
104fc     00 2C 06 36 |  if_ae	mov	local04, #0
10500     04 55 B1 FD | 	call	#__system___float_fromuns
10504     16 FB 61 F5 | 	xor	result1, local04
10508     FD 14 02 F6 | 	mov	arg02, result1
1050c     14 13 02 F6 | 	mov	arg01, local02
10510     F8 58 B1 FD | 	call	#__system___float_mul
10514     FD 12 02 F6 | 	mov	arg01, result1
10518     50 62 B1 FD | 	call	#__system____builtin_sinf
1051c     FD 14 02 F6 | 	mov	arg02, result1
10520     15 13 02 F6 | 	mov	arg01, local03
10524     E4 58 B1 FD | 	call	#__system___float_mul
10528     FD 14 02 F6 | 	mov	arg02, result1
1052c     24 4E 05 F1 | 	add	fp, #36
10530     A7 12 02 FB | 	rdlong	arg01, fp
10534     24 4E 85 F1 | 	sub	fp, #36
10538     00 55 B1 FD | 	call	#__system___float_add
1053c     24 4E 05 F1 | 	add	fp, #36
10540     A7 FA 61 FC | 	wrlong	result1, fp
10544     1C 4E 85 F1 | 	sub	fp, #28
10548     A7 16 02 FB | 	rdlong	arg03, fp
1054c     01 16 06 F1 | 	add	arg03, #1
10550     A7 16 62 FC | 	wrlong	arg03, fp
10554     10 16 56 F2 | 	cmps	arg03, #16 wc
10558     3C FF 9F CD |  if_b	jmp	#LR__1358
1055c                 | '     if abs(spl)>max then max=abs(spl)  
1055c     1C 4E 05 F1 | 	add	fp, #28
10560     A7 12 02 FB | 	rdlong	arg01, fp
10564     1F 12 06 F4 | 	bitl	arg01, #31
10568     04 4E 85 F1 | 	sub	fp, #4
1056c     A7 14 02 FB | 	rdlong	arg02, fp
10570     20 4E 85 F1 | 	sub	fp, #32
10574     01 16 66 F6 | 	neg	arg03, #1
10578     C4 5C B1 FD | 	call	#__system___float_cmp
1057c     01 FA 55 F2 | 	cmps	result1, #1 wc
10580     18 00 90 CD |  if_b	jmp	#LR__1359
10584     24 4E 05 F1 | 	add	fp, #36
10588     A7 FA 01 FB | 	rdlong	result1, fp
1058c     1F FA 05 F4 | 	bitl	result1, #31
10590     04 4E 85 F1 | 	sub	fp, #4
10594     A7 FA 61 FC | 	wrlong	result1, fp
10598     20 4E 85 F1 | 	sub	fp, #32
1059c                 | LR__1359
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 2A 02 FB | 	rdlong	local03, fp
105a4     01 2A 06 F1 | 	add	local03, #1
105a8     A7 2A 62 FC | 	wrlong	local03, fp
105ac     04 4E 85 F1 | 	sub	fp, #4
105b0     02 00 00 FF 
105b4     00 2A 56 F2 | 	cmps	local03, ##1024 wc
105b8     CC FE 9F CD |  if_b	jmp	#LR__1357
105bc                 | '   for i=0 to 1023
105bc     04 4E 05 F1 | 	add	fp, #4
105c0     A7 00 68 FC | 	wrlong	#0, fp
105c4     04 4E 85 F1 | 	sub	fp, #4
105c8                 | LR__1360
105c8     24 4E 05 F1 | 	add	fp, #36
105cc     A7 00 68 FC | 	wrlong	#0, fp
105d0                 | '     spl=0
105d0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
105d0     1C 4E 85 F1 | 	sub	fp, #28
105d4     A7 00 68 FC | 	wrlong	#0, fp
105d8                 | LR__1361
105d8     A7 2A 02 FB | 	rdlong	local03, fp
105dc     02 2A 66 F0 | 	shl	local03, #2
105e0     34 4E 05 F1 | 	add	fp, #52
105e4     A7 2A 02 F1 | 	add	local03, fp
105e8     15 2B 02 FB | 	rdlong	local03, local03
105ec     1C 4E 85 F1 | 	sub	fp, #28
105f0     A7 14 02 FB | 	rdlong	arg02, fp
105f4     20 4E 85 F1 | 	sub	fp, #32
105f8     58 7F 23 FF 
105fc     00 12 06 F6 | 	mov	arg01, ##1191096320
10600     0C 5A B1 FD | 	call	#__system___float_div
10604     FD 14 02 F6 | 	mov	arg02, result1
10608     15 13 02 F6 | 	mov	arg01, local03
1060c     FC 57 B1 FD | 	call	#__system___float_mul
10610     FD 2A 02 F6 | 	mov	local03, result1
10614     87 E4 1D FF 
10618     DB 29 06 F6 | 	mov	local02, ##1003032539
1061c     04 4E 05 F1 | 	add	fp, #4
10620     A7 12 02 FB | 	rdlong	arg01, fp
10624     04 4E 85 F1 | 	sub	fp, #4
10628     09 13 52 F6 | 	abs	arg01, arg01 wc
1062c     1F 2C C6 C9 |  if_b	decod	local04, #31
10630     00 2C 06 36 |  if_ae	mov	local04, #0
10634     D0 53 B1 FD | 	call	#__system___float_fromuns
10638     16 FB 61 F5 | 	xor	result1, local04
1063c     FD 14 02 F6 | 	mov	arg02, result1
10640     14 13 02 F6 | 	mov	arg01, local02
10644     C4 57 B1 FD | 	call	#__system___float_mul
10648     FD 28 02 F6 | 	mov	local02, result1
1064c     08 4E 05 F1 | 	add	fp, #8
10650     A7 12 02 FB | 	rdlong	arg01, fp
10654     08 4E 85 F1 | 	sub	fp, #8
10658     01 12 06 F1 | 	add	arg01, #1
1065c     09 13 52 F6 | 	abs	arg01, arg01 wc
10660     1F 2C C6 C9 |  if_b	decod	local04, #31
10664     00 2C 06 36 |  if_ae	mov	local04, #0
10668     9C 53 B1 FD | 	call	#__system___float_fromuns
1066c     16 FB 61 F5 | 	xor	result1, local04
10670     FD 14 02 F6 | 	mov	arg02, result1
10674     14 13 02 F6 | 	mov	arg01, local02
10678     90 57 B1 FD | 	call	#__system___float_mul
1067c     FD 12 02 F6 | 	mov	arg01, result1
10680     E8 60 B1 FD | 	call	#__system____builtin_sinf
10684     FD 14 02 F6 | 	mov	arg02, result1
10688     15 13 02 F6 | 	mov	arg01, local03
1068c     7C 57 B1 FD | 	call	#__system___float_mul
10690     FD 14 02 F6 | 	mov	arg02, result1
10694     24 4E 05 F1 | 	add	fp, #36
10698     A7 12 02 FB | 	rdlong	arg01, fp
1069c     24 4E 85 F1 | 	sub	fp, #36
106a0     98 53 B1 FD | 	call	#__system___float_add
106a4     24 4E 05 F1 | 	add	fp, #36
106a8     A7 FA 61 FC | 	wrlong	result1, fp
106ac     1C 4E 85 F1 | 	sub	fp, #28
106b0     A7 2A 02 FB | 	rdlong	local03, fp
106b4     01 2A 06 F1 | 	add	local03, #1
106b8     A7 2A 62 FC | 	wrlong	local03, fp
106bc     10 2A 56 F2 | 	cmps	local03, #16 wc
106c0     14 FF 9F CD |  if_b	jmp	#LR__1361
106c4     08 4E 05 F1 | 	add	fp, #8
106c8     A7 2A 02 FB | 	rdlong	local03, fp
106cc     0B 2A 66 F0 | 	shl	local03, #11
106d0     0C 4E 85 F1 | 	sub	fp, #12
106d4     A7 28 02 FB | 	rdlong	local02, fp
106d8     01 28 66 F0 | 	shl	local02, #1
106dc     14 2B 02 F1 | 	add	local03, local02
106e0     20 4E 05 F1 | 	add	fp, #32
106e4     A7 12 02 FB | 	rdlong	arg01, fp
106e8     24 4E 85 F1 | 	sub	fp, #36
106ec     01 14 06 F6 | 	mov	arg02, #1
106f0     E0 5B B1 FD | 	call	#__system___float_tointeger
106f4     FD 14 02 F6 | 	mov	arg02, result1
106f8     15 13 02 F6 | 	mov	arg01, local03
106fc     D8 F0 B0 FD | 	call	#_psdpoke
10700     04 4E 05 F1 | 	add	fp, #4
10704     A7 2A 02 FB | 	rdlong	local03, fp
10708     01 2A 06 F1 | 	add	local03, #1
1070c     A7 2A 62 FC | 	wrlong	local03, fp
10710     04 4E 85 F1 | 	sub	fp, #4
10714     02 00 00 FF 
10718     00 2A 56 F2 | 	cmps	local03, ##1024 wc
1071c     A8 FE 9F CD |  if_b	jmp	#LR__1360
10720                 | LR__1362
10720                 | LR__1363
10720     A7 F0 03 F6 | 	mov	ptra, fp
10724     B2 00 A0 FD | 	call	#popregs_
10728                 | _do_defsnd_ret
10728     2D 00 64 FD | 	ret
1072c                 | 
1072c                 | ' 
1072c                 | ' '-------------------- defsprite
1072c                 | ' 
1072c                 | ' sub do_defsprite
1072c                 | _do_defsprite
1072c     07 4A 05 F6 | 	mov	COUNT_, #7
10730     A8 00 A0 FD | 	call	#pushregs_
10734     60 F0 07 F1 | 	add	ptra, #96
10738     A4 C1 BF FD | 	call	#_pop
1073c     FD 16 02 F6 | 	mov	arg03, result1
10740     FE 14 02 F6 | 	mov	arg02, result2
10744     FF 12 02 F6 | 	mov	arg01, result3
10748     30 4E 05 F1 | 	add	fp, #48
1074c     A7 16 62 FC | 	wrlong	arg03, fp
10750     04 4E 05 F1 | 	add	fp, #4
10754     A7 14 62 FC | 	wrlong	arg02, fp
10758     04 4E 05 F1 | 	add	fp, #4
1075c     A7 12 62 FC | 	wrlong	arg01, fp
10760     38 4E 85 F1 | 	sub	fp, #56
10764     78 C1 BF FD | 	call	#_pop
10768     FD 16 02 F6 | 	mov	arg03, result1
1076c     FE 14 02 F6 | 	mov	arg02, result2
10770     FF 12 02 F6 | 	mov	arg01, result3
10774     24 4E 05 F1 | 	add	fp, #36
10778     A7 16 62 FC | 	wrlong	arg03, fp
1077c     04 4E 05 F1 | 	add	fp, #4
10780     A7 14 62 FC | 	wrlong	arg02, fp
10784     04 4E 05 F1 | 	add	fp, #4
10788     A7 12 62 FC | 	wrlong	arg01, fp
1078c     2C 4E 85 F1 | 	sub	fp, #44
10790     4C C1 BF FD | 	call	#_pop
10794     FD 16 02 F6 | 	mov	arg03, result1
10798     FE 14 02 F6 | 	mov	arg02, result2
1079c     FF 12 02 F6 | 	mov	arg01, result3
107a0     18 4E 05 F1 | 	add	fp, #24
107a4     A7 16 62 FC | 	wrlong	arg03, fp
107a8     04 4E 05 F1 | 	add	fp, #4
107ac     A7 14 62 FC | 	wrlong	arg02, fp
107b0     04 4E 05 F1 | 	add	fp, #4
107b4     A7 12 62 FC | 	wrlong	arg01, fp
107b8     20 4E 85 F1 | 	sub	fp, #32
107bc     20 C1 BF FD | 	call	#_pop
107c0     FD 16 02 F6 | 	mov	arg03, result1
107c4     FE 14 02 F6 | 	mov	arg02, result2
107c8     FF 12 02 F6 | 	mov	arg01, result3
107cc     0C 4E 05 F1 | 	add	fp, #12
107d0     A7 16 62 FC | 	wrlong	arg03, fp
107d4     04 4E 05 F1 | 	add	fp, #4
107d8     A7 14 62 FC | 	wrlong	arg02, fp
107dc     04 4E 05 F1 | 	add	fp, #4
107e0     A7 12 62 FC | 	wrlong	arg01, fp
107e4     14 4E 85 F1 | 	sub	fp, #20
107e8     F4 C0 BF FD | 	call	#_pop
107ec     FF 16 02 F6 | 	mov	arg03, result3
107f0     A7 FA 61 FC | 	wrlong	result1, fp
107f4     04 4E 05 F1 | 	add	fp, #4
107f8     A7 FC 61 FC | 	wrlong	result2, fp
107fc     04 4E 05 F1 | 	add	fp, #4
10800     A7 16 62 FC | 	wrlong	arg03, fp
10804     08 4E 85 F1 | 	sub	fp, #8
10808     A7 12 02 F6 | 	mov	arg01, fp
1080c     B4 C2 BF FD | 	call	#_converttoint
10810     3C 4E 05 F1 | 	add	fp, #60
10814     A7 FA 61 FC | 	wrlong	result1, fp
10818     30 4E 85 F1 | 	sub	fp, #48
1081c     A7 12 02 F6 | 	mov	arg01, fp
10820     0C 4E 85 F1 | 	sub	fp, #12
10824     9C C2 BF FD | 	call	#_converttoint
10828     40 4E 05 F1 | 	add	fp, #64
1082c     A7 FA 61 FC | 	wrlong	result1, fp
10830     28 4E 85 F1 | 	sub	fp, #40
10834     A7 12 02 F6 | 	mov	arg01, fp
10838     18 4E 85 F1 | 	sub	fp, #24
1083c     84 C2 BF FD | 	call	#_converttoint
10840     44 4E 05 F1 | 	add	fp, #68
10844     A7 FA 61 FC | 	wrlong	result1, fp
10848     20 4E 85 F1 | 	sub	fp, #32
1084c     A7 12 02 F6 | 	mov	arg01, fp
10850     24 4E 85 F1 | 	sub	fp, #36
10854     6C C2 BF FD | 	call	#_converttoint
10858     48 4E 05 F1 | 	add	fp, #72
1085c     A7 FA 61 FC | 	wrlong	result1, fp
10860     18 4E 85 F1 | 	sub	fp, #24
10864     A7 12 02 F6 | 	mov	arg01, fp
10868     30 4E 85 F1 | 	sub	fp, #48
1086c     54 C2 BF FD | 	call	#_converttoint
10870     4C 4E 05 F1 | 	add	fp, #76
10874     A7 FA 61 FC | 	wrlong	result1, fp
10878                 | ' 
10878                 | ' t5=pop()
10878                 | ' t4=pop()
10878                 | ' t3=pop()
10878                 | ' t2=pop()
10878                 | ' t1=pop()
10878                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10878                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10878     10 4E 85 F1 | 	sub	fp, #16
1087c     A7 16 02 FB | 	rdlong	arg03, fp
10880     3C 4E 85 F1 | 	sub	fp, #60
10884     02 16 66 F0 | 	shl	arg03, #2
10888     51 00 00 FF 
1088c     68 E5 05 F1 | 	add	objptr, ##41832
10890     F2 16 02 F1 | 	add	arg03, objptr
10894     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10898     51 00 00 FF 
1089c     68 E5 85 F1 | 	sub	objptr, ##41832
108a0     2C 00 90 AD |  if_e	jmp	#LR__1370
108a4     3C 4E 05 F1 | 	add	fp, #60
108a8     A7 16 02 FB | 	rdlong	arg03, fp
108ac     3C 4E 85 F1 | 	sub	fp, #60
108b0     02 16 66 F0 | 	shl	arg03, #2
108b4     51 00 00 FF 
108b8     68 E5 05 F1 | 	add	objptr, ##41832
108bc     F2 16 02 F1 | 	add	arg03, objptr
108c0     0B 13 02 FB | 	rdlong	arg01, arg03
108c4     51 00 00 FF 
108c8     68 E5 85 F1 | 	sub	objptr, ##41832
108cc     A0 69 B1 FD | 	call	#__system___gc_free
108d0                 | LR__1370
108d0     3C 4E 05 F1 | 	add	fp, #60
108d4     A7 26 02 FB | 	rdlong	local01, fp
108d8     0C 4E 05 F1 | 	add	fp, #12
108dc     A7 16 02 FB | 	rdlong	arg03, fp
108e0     04 4E 05 F1 | 	add	fp, #4
108e4     A7 14 02 FB | 	rdlong	arg02, fp
108e8     0A 17 02 FD | 	qmul	arg03, arg02
108ec     02 26 66 F0 | 	shl	local01, #2
108f0     51 00 00 FF 
108f4     68 E5 05 F1 | 	add	objptr, ##41832
108f8     F2 26 02 F1 | 	add	local01, objptr
108fc     4C 4E 85 F1 | 	sub	fp, #76
10900     51 00 00 FF 
10904     68 E5 85 F1 | 	sub	objptr, ##41832
10908     18 12 62 FD | 	getqx	arg01
1090c     24 68 B1 FD | 	call	#__system___gc_alloc_managed
10910     13 FB 61 FC | 	wrlong	result1, local01
10914                 | ' for y=a3 to a3+a5-1
10914     44 4E 05 F1 | 	add	fp, #68
10918     A7 28 02 FB | 	rdlong	local02, fp
1091c     0C 4E 05 F1 | 	add	fp, #12
10920     A7 28 62 FC | 	wrlong	local02, fp
10924     0C 4E 85 F1 | 	sub	fp, #12
10928     A7 2A 02 FB | 	rdlong	local03, fp
1092c     08 4E 05 F1 | 	add	fp, #8
10930     A7 2C 02 FB | 	rdlong	local04, fp
10934     4C 4E 85 F1 | 	sub	fp, #76
10938     16 2B 02 F1 | 	add	local03, local04
1093c                 | LR__1371
1093c     50 4E 05 F1 | 	add	fp, #80
10940     A7 28 02 FB | 	rdlong	local02, fp
10944     50 4E 85 F1 | 	sub	fp, #80
10948     15 29 52 F2 | 	cmps	local02, local03 wc
1094c     F4 00 90 3D |  if_ae	jmp	#LR__1374
10950                 | '   for x=a2 to a4+a2-1
10950     40 4E 05 F1 | 	add	fp, #64
10954     A7 26 02 FB | 	rdlong	local01, fp
10958     14 4E 05 F1 | 	add	fp, #20
1095c     A7 26 62 FC | 	wrlong	local01, fp
10960     0C 4E 85 F1 | 	sub	fp, #12
10964     A7 2E 02 FB | 	rdlong	local05, fp
10968     08 4E 85 F1 | 	sub	fp, #8
1096c     A7 30 02 FB | 	rdlong	local06, fp
10970     40 4E 85 F1 | 	sub	fp, #64
10974     18 2F 02 F1 | 	add	local05, local06
10978                 | LR__1372
10978     54 4E 05 F1 | 	add	fp, #84
1097c     A7 26 02 FB | 	rdlong	local01, fp
10980     54 4E 85 F1 | 	sub	fp, #84
10984     17 27 52 F2 | 	cmps	local01, local05 wc
10988     A0 00 90 3D |  if_ae	jmp	#LR__1373
1098c     3C 4E 05 F1 | 	add	fp, #60
10990     A7 30 02 FB | 	rdlong	local06, fp
10994     18 4E 05 F1 | 	add	fp, #24
10998     A7 2C 02 FB | 	rdlong	local04, fp
1099c     14 4E 85 F1 | 	sub	fp, #20
109a0     A7 28 02 FB | 	rdlong	local02, fp
109a4     10 4E 05 F1 | 	add	fp, #16
109a8     A7 26 02 FB | 	rdlong	local01, fp
109ac     13 17 02 F6 | 	mov	arg03, local01
109b0     0C 4E 85 F1 | 	sub	fp, #12
109b4     A7 14 02 FB | 	rdlong	arg02, fp
109b8     0A 17 82 F1 | 	sub	arg03, arg02
109bc     04 4E 05 F1 | 	add	fp, #4
109c0     A7 14 02 FB | 	rdlong	arg02, fp
109c4     0A 17 02 FD | 	qmul	arg03, arg02
109c8     02 30 66 F0 | 	shl	local06, #2
109cc     51 00 00 FF 
109d0     68 E5 05 F1 | 	add	objptr, ##41832
109d4     F2 30 02 F1 | 	add	local06, objptr
109d8     18 31 02 FB | 	rdlong	local06, local06
109dc     16 33 02 F6 | 	mov	local07, local04
109e0     14 33 82 F1 | 	sub	local07, local02
109e4     51 00 00 FF 
109e8     68 E5 85 F1 | 	sub	objptr, ##41832
109ec     F2 12 02 FB | 	rdlong	arg01, objptr
109f0     16 13 02 F1 | 	add	arg01, local04
109f4     48 4E 85 F1 | 	sub	fp, #72
109f8     0A 26 66 F0 | 	shl	local01, #10
109fc     13 13 02 F1 | 	add	arg01, local01
10a00     18 2C 62 FD | 	getqx	local04
10a04     16 33 02 F1 | 	add	local07, local04
10a08     18 33 02 F1 | 	add	local07, local06
10a0c     58 EE B0 FD | 	call	#_pspeek
10a10     19 FB 41 FC | 	wrbyte	result1, local07
10a14     54 4E 05 F1 | 	add	fp, #84
10a18     A7 32 02 FB | 	rdlong	local07, fp
10a1c     01 32 06 F1 | 	add	local07, #1
10a20     A7 32 62 FC | 	wrlong	local07, fp
10a24     54 4E 85 F1 | 	sub	fp, #84
10a28     4C FF 9F FD | 	jmp	#LR__1372
10a2c                 | LR__1373
10a2c     50 4E 05 F1 | 	add	fp, #80
10a30     A7 32 02 FB | 	rdlong	local07, fp
10a34     01 32 06 F1 | 	add	local07, #1
10a38     A7 32 62 FC | 	wrlong	local07, fp
10a3c     50 4E 85 F1 | 	sub	fp, #80
10a40     F8 FE 9F FD | 	jmp	#LR__1371
10a44                 | LR__1374
10a44     3C 4E 05 F1 | 	add	fp, #60
10a48     A7 32 02 FB | 	rdlong	local07, fp
10a4c     19 13 02 F6 | 	mov	arg01, local07
10a50     3C 4E 85 F1 | 	sub	fp, #60
10a54     02 32 66 F0 | 	shl	local07, #2
10a58     51 00 00 FF 
10a5c     68 E5 05 F1 | 	add	objptr, ##41832
10a60     F2 32 02 F1 | 	add	local07, objptr
10a64     19 15 02 FB | 	rdlong	arg02, local07
10a68     51 00 00 FF 
10a6c     68 E5 85 F1 | 	sub	objptr, ##41832
10a70     34 FB B0 FD | 	call	#_hg010b_spin2_setspriteptr
10a74     3C 4E 05 F1 | 	add	fp, #60
10a78     A7 12 02 FB | 	rdlong	arg01, fp
10a7c     0C 4E 05 F1 | 	add	fp, #12
10a80     A7 14 02 FB | 	rdlong	arg02, fp
10a84     04 4E 05 F1 | 	add	fp, #4
10a88     A7 16 02 FB | 	rdlong	arg03, fp
10a8c     4C 4E 85 F1 | 	sub	fp, #76
10a90     A4 FB B0 FD | 	call	#_hg010b_spin2_setspritesize
10a94     A7 F0 03 F6 | 	mov	ptra, fp
10a98     B2 00 A0 FD | 	call	#popregs_
10a9c                 | _do_defsprite_ret
10a9c     2D 00 64 FD | 	ret
10aa0                 | 
10aa0                 | ' 
10aa0                 | ' '-------------------- deg
10aa0                 | ' 
10aa0                 | ' sub do_deg
10aa0                 | _do_deg
10aa0     51 00 00 FF 
10aa4     BC E5 05 F1 | 	add	objptr, ##41916
10aa8     7D 47 9E FF 
10aac     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10ab0     04 E4 05 F1 | 	add	objptr, #4
10ab4     97 32 A1 FF 
10ab8     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10abc     51 00 00 FF 
10ac0     C0 E5 85 F1 | 	sub	objptr, ##41920
10ac4                 | _do_deg_ret
10ac4     2D 00 64 FD | 	ret
10ac8                 | 
10ac8                 | ' 
10ac8                 | ' '-------------------- delete
10ac8                 | ' 
10ac8                 | ' sub do_delete
10ac8                 | _do_delete
10ac8     05 4A 05 F6 | 	mov	COUNT_, #5
10acc     A8 00 A0 FD | 	call	#pushregs_
10ad0     0C BE BF FD | 	call	#_pop
10ad4     FE 18 02 F6 | 	mov	arg04, result2
10ad8     FF 16 02 F6 | 	mov	arg03, result3
10adc     FD 26 02 F6 | 	mov	local01, result1
10ae0     0C 29 02 F6 | 	mov	local02, arg04
10ae4     0B 2B 02 F6 | 	mov	local03, arg03
10ae8                 | ' 
10ae8                 | ' t1=pop()
10ae8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10ae8     2B 2A 0E F2 | 	cmp	local03, #43 wz
10aec     10 00 90 5D |  if_ne	jmp	#LR__1380
10af0     13 13 02 F6 | 	mov	arg01, local01
10af4     60 BF BF FD | 	call	#_convertstring
10af8     FD 26 02 F6 | 	mov	local01, result1
10afc     1F 2A 06 F6 | 	mov	local03, #31
10b00                 | LR__1380
10b00                 | ' if t1.result_type<>result_string then printerror(15): return
10b00     1F 2A 0E F2 | 	cmp	local03, #31 wz
10b04     10 00 90 AD |  if_e	jmp	#LR__1381
10b08     0F 12 06 F6 | 	mov	arg01, #15
10b0c     00 14 06 F6 | 	mov	arg02, #0
10b10     F0 EA B0 FD | 	call	#_printerror
10b14     E0 00 90 FD | 	jmp	#LR__1385
10b18                 | LR__1381
10b18                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10b18     4A 00 00 FF 
10b1c     94 E4 05 F1 | 	add	objptr, ##38036
10b20     F2 12 02 FB | 	rdlong	arg01, objptr
10b24     4A 00 00 FF 
10b28     94 E4 85 F1 | 	sub	objptr, ##38036
10b2c     99 01 00 FF 
10b30     E6 14 06 F6 | 	mov	arg02, ##@LR__5646
10b34     84 24 B1 FD | 	call	#__system___string_cmp
10b38     00 FA 0D F2 | 	cmp	result1, #0 wz
10b3c     34 00 90 AD |  if_e	jmp	#LR__1382
10b40     4A 00 00 FF 
10b44     94 E4 05 F1 | 	add	objptr, ##38036
10b48     F2 12 02 FB | 	rdlong	arg01, objptr
10b4c     4A 00 00 FF 
10b50     94 E4 85 F1 | 	sub	objptr, ##38036
10b54     99 01 00 FF 
10b58     E8 14 06 F6 | 	mov	arg02, ##@LR__5647
10b5c     90 24 B1 FD | 	call	#__system___string_concat
10b60     FD 12 02 F6 | 	mov	arg01, result1
10b64     13 15 02 F6 | 	mov	arg02, local01
10b68     84 24 B1 FD | 	call	#__system___string_concat
10b6c     FD 2C 02 F6 | 	mov	local04, result1
10b70     14 00 90 FD | 	jmp	#LR__1383
10b74                 | LR__1382
10b74     99 01 00 FF 
10b78     EA 12 06 F6 | 	mov	arg01, ##@LR__5648
10b7c     13 15 02 F6 | 	mov	arg02, local01
10b80     6C 24 B1 FD | 	call	#__system___string_concat
10b84     FD 2C 02 F6 | 	mov	local04, result1
10b88                 | LR__1383
10b88     16 13 02 F6 | 	mov	arg01, local04
10b8c     D0 4B B1 FD | 	call	#__system___remove
10b90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10b94     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10b98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10b9c     FD 2E 0A F6 | 	mov	local05, result1 wz
10ba0                 | ' kill filename$
10ba0                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10ba0     54 00 90 AD |  if_e	jmp	#LR__1384
10ba4     00 12 06 F6 | 	mov	arg01, #0
10ba8     10 81 B1 FD | 	call	#__system___getiolock_0558
10bac     FD 12 02 F6 | 	mov	arg01, result1
10bb0     E0 23 B1 FD | 	call	#__system___lockmem
10bb4     99 01 00 FF 
10bb8     EC 14 06 F6 | 	mov	arg02, ##@LR__5649
10bbc     00 12 06 F6 | 	mov	arg01, #0
10bc0     00 16 06 F6 | 	mov	arg03, #0
10bc4     C0 30 B1 FD | 	call	#__system___basic_print_string
10bc8     00 12 06 F6 | 	mov	arg01, #0
10bcc     17 15 02 F6 | 	mov	arg02, local05
10bd0     00 16 06 F6 | 	mov	arg03, #0
10bd4     0A 18 06 F6 | 	mov	arg04, #10
10bd8     F0 30 B1 FD | 	call	#__system___basic_print_integer
10bdc     00 12 06 F6 | 	mov	arg01, #0
10be0     0A 14 06 F6 | 	mov	arg02, #10
10be4     00 16 06 F6 | 	mov	arg03, #0
10be8     44 30 B1 FD | 	call	#__system___basic_print_char
10bec     00 12 06 F6 | 	mov	arg01, #0
10bf0     C8 80 B1 FD | 	call	#__system___getiolock_0558
10bf4     FD 00 68 FC | 	wrlong	#0, result1
10bf8                 | LR__1384
10bf8                 | LR__1385
10bf8     A7 F0 03 F6 | 	mov	ptra, fp
10bfc     B2 00 A0 FD | 	call	#popregs_
10c00                 | _do_delete_ret
10c00     2D 00 64 FD | 	ret
10c04                 | 
10c04                 | ' 
10c04                 | ' '-------------------- dir
10c04                 | ' 
10c04                 | ' sub do_dir
10c04                 | _do_dir
10c04     13 4A 05 F6 | 	mov	COUNT_, #19
10c08     A8 00 A0 FD | 	call	#pushregs_
10c0c     01 00 00 FF 
10c10     38 F0 07 F1 | 	add	ptra, ##568
10c14                 | ' 
10c14                 | ' print "Current directory: "; currentdir$ 
10c14     00 12 06 F6 | 	mov	arg01, #0
10c18     A0 80 B1 FD | 	call	#__system___getiolock_0558
10c1c     FD 12 02 F6 | 	mov	arg01, result1
10c20     70 23 B1 FD | 	call	#__system___lockmem
10c24     99 01 00 FF 
10c28     24 15 06 F6 | 	mov	arg02, ##@LR__5650
10c2c     00 12 06 F6 | 	mov	arg01, #0
10c30     00 16 06 F6 | 	mov	arg03, #0
10c34     50 30 B1 FD | 	call	#__system___basic_print_string
10c38     4A 00 00 FF 
10c3c     94 E4 05 F1 | 	add	objptr, ##38036
10c40     F2 14 02 FB | 	rdlong	arg02, objptr
10c44     4A 00 00 FF 
10c48     94 E4 85 F1 | 	sub	objptr, ##38036
10c4c     00 12 06 F6 | 	mov	arg01, #0
10c50     00 16 06 F6 | 	mov	arg03, #0
10c54     30 30 B1 FD | 	call	#__system___basic_print_string
10c58     00 12 06 F6 | 	mov	arg01, #0
10c5c     0A 14 06 F6 | 	mov	arg02, #10
10c60     00 16 06 F6 | 	mov	arg03, #0
10c64     C8 2F B1 FD | 	call	#__system___basic_print_char
10c68     01 26 06 F6 | 	mov	local01, #1
10c6c     00 12 06 F6 | 	mov	arg01, #0
10c70     48 80 B1 FD | 	call	#__system___getiolock_0558
10c74     FD 00 68 FC | 	wrlong	#0, result1
10c78     00 28 06 F6 | 	mov	local02, #0
10c7c     00 2A 06 F6 | 	mov	local03, #0
10c80                 | ' px=0
10c80                 | ' for i=0 to 127: filelist(i)="" : next i
10c80     00 2C 06 F6 | 	mov	local04, #0
10c84     1C 4E 05 F1 | 	add	fp, #28
10c88     97 12 48 FB | 	callpa	#(@LR__1391-@LR__1390)>>2,fcache_load_ptr_
10c8c                 | LR__1390
10c8c     16 2F 02 F6 | 	mov	local05, local04
10c90     02 2E 66 F0 | 	shl	local05, #2
10c94     A7 2E 02 F1 | 	add	local05, fp
10c98     99 01 00 FF 
10c9c     38 31 06 F6 | 	mov	local06, ##@LR__5651
10ca0     17 31 62 FC | 	wrlong	local06, local05
10ca4     01 2C 06 F1 | 	add	local04, #1
10ca8     80 2C 56 F2 | 	cmps	local04, #128 wc
10cac     DC FF 9F CD |  if_b	jmp	#LR__1390
10cb0                 | LR__1391
10cb0     1C 4E 85 F1 | 	sub	fp, #28
10cb4     99 01 00 FF 
10cb8     39 13 06 F6 | 	mov	arg01, ##@LR__5652
10cbc     10 14 06 F6 | 	mov	arg02, #16
10cc0     30 81 B1 FD | 	call	#__system___basic_dir
10cc4     FD 32 02 F6 | 	mov	local07, result1
10cc8     00 34 06 F6 | 	mov	local08, #0
10ccc                 | ' filename=dir$("*", fbDirectory)
10ccc                 | ' n=0
10ccc                 | ' while filename <> "" andalso filename <> nil andalso n<128
10ccc                 | LR__1392
10ccc     99 01 00 FF 
10cd0     3B 37 06 F6 | 	mov	local09, ##@LR__5653
10cd4     19 13 02 F6 | 	mov	arg01, local07
10cd8     1B 15 02 F6 | 	mov	arg02, local09
10cdc     DC 22 B1 FD | 	call	#__system___string_cmp
10ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
10ce4     68 00 90 AD |  if_e	jmp	#LR__1393
10ce8     00 36 06 F6 | 	mov	local09, #0
10cec     19 13 02 F6 | 	mov	arg01, local07
10cf0     00 14 06 F6 | 	mov	arg02, #0
10cf4     C4 22 B1 FD | 	call	#__system___string_cmp
10cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
10cfc     50 00 90 AD |  if_e	jmp	#LR__1393
10d00     80 34 56 F2 | 	cmps	local08, #128 wc
10d04     48 00 90 3D |  if_ae	jmp	#LR__1393
10d08     99 01 00 FF 
10d0c     3C 13 06 F6 | 	mov	arg01, ##@LR__5654
10d10     19 15 02 F6 | 	mov	arg02, local07
10d14     D8 22 B1 FD | 	call	#__system___string_concat
10d18     FD 32 02 F6 | 	mov	local07, result1
10d1c     1A 2F 02 F6 | 	mov	local05, local08
10d20     02 2E 66 F0 | 	shl	local05, #2
10d24     1C 4E 05 F1 | 	add	fp, #28
10d28     A7 2E 02 F1 | 	add	local05, fp
10d2c     17 33 62 FC | 	wrlong	local07, local05
10d30     01 34 06 F1 | 	add	local08, #1
10d34     00 2E 06 F6 | 	mov	local05, #0
10d38     00 12 06 F6 | 	mov	arg01, #0
10d3c     00 14 06 F6 | 	mov	arg02, #0
10d40     1C 4E 85 F1 | 	sub	fp, #28
10d44     AC 80 B1 FD | 	call	#__system___basic_dir
10d48     FD 32 02 F6 | 	mov	local07, result1
10d4c     7C FF 9F FD | 	jmp	#LR__1392
10d50                 | LR__1393
10d50                 | ' for i=0 to n-1			' now sort this
10d50     00 2C 06 F6 | 	mov	local04, #0
10d54     1A 39 02 F6 | 	mov	local10, local08
10d58                 | LR__1394
10d58     1C 2D 52 F2 | 	cmps	local04, local10 wc
10d5c     DC 00 90 3D |  if_ae	jmp	#LR__1398
10d60     00 3A 06 F6 | 	mov	local11, #0
10d64                 | '   swapped=false
10d64                 | '   for j=0 to n-i-2
10d64     00 3C 06 F6 | 	mov	local12, #0
10d68     1A 3F 02 F6 | 	mov	local13, local08
10d6c     16 3F 82 F1 | 	sub	local13, local04
10d70     01 3E 86 F1 | 	sub	local13, #1
10d74                 | LR__1395
10d74     1F 3D 52 F2 | 	cmps	local12, local13 wc
10d78     B0 00 90 3D |  if_ae	jmp	#LR__1397
10d7c                 | '     if filelist(j) > filelist(j+1) then
10d7c     1E 37 02 F6 | 	mov	local09, local12
10d80     02 36 66 F0 | 	shl	local09, #2
10d84     1C 4E 05 F1 | 	add	fp, #28
10d88     A7 36 02 F1 | 	add	local09, fp
10d8c     1B 13 02 FB | 	rdlong	arg01, local09
10d90     1E 37 02 F6 | 	mov	local09, local12
10d94     01 36 06 F1 | 	add	local09, #1
10d98     1B 31 02 F6 | 	mov	local06, local09
10d9c     02 30 66 F0 | 	shl	local06, #2
10da0     A7 26 02 F6 | 	mov	local01, fp
10da4     A7 30 02 F1 | 	add	local06, fp
10da8     18 2F 02 FB | 	rdlong	local05, local06
10dac     17 15 02 F6 | 	mov	arg02, local05
10db0     1C 4E 85 F1 | 	sub	fp, #28
10db4     04 22 B1 FD | 	call	#__system___string_cmp
10db8     01 FA 55 F2 | 	cmps	result1, #1 wc
10dbc     64 00 90 CD |  if_b	jmp	#LR__1396
10dc0     1E 37 02 F6 | 	mov	local09, local12
10dc4     01 36 06 F1 | 	add	local09, #1
10dc8     02 36 66 F0 | 	shl	local09, #2
10dcc     1C 4E 05 F1 | 	add	fp, #28
10dd0     A7 36 02 F1 | 	add	local09, fp
10dd4     1B 3B 02 FB | 	rdlong	local11, local09
10dd8     1E 31 02 F6 | 	mov	local06, local12
10ddc     02 30 66 F0 | 	shl	local06, #2
10de0     A7 30 02 F1 | 	add	local06, fp
10de4     18 2F 02 FB | 	rdlong	local05, local06
10de8     1E 37 02 F6 | 	mov	local09, local12
10dec     1B 31 02 F6 | 	mov	local06, local09
10df0     02 30 66 F0 | 	shl	local06, #2
10df4     A7 26 02 F6 | 	mov	local01, fp
10df8     A7 30 02 F1 | 	add	local06, fp
10dfc     18 3B 62 FC | 	wrlong	local11, local06
10e00     1E 29 02 F6 | 	mov	local02, local12
10e04     01 28 06 F1 | 	add	local02, #1
10e08     14 41 02 F6 | 	mov	local14, local02
10e0c     02 40 66 F0 | 	shl	local14, #2
10e10     A7 42 02 F6 | 	mov	local15, fp
10e14     A7 40 02 F1 | 	add	local14, fp
10e18     20 2F 62 FC | 	wrlong	local05, local14
10e1c     01 3A 66 F6 | 	neg	local11, #1
10e20     1C 4E 85 F1 | 	sub	fp, #28
10e24                 | LR__1396
10e24     01 3C 06 F1 | 	add	local12, #1
10e28     48 FF 9F FD | 	jmp	#LR__1395
10e2c                 | LR__1397
10e2c                 | ' if not swapped then exit for
10e2c     1D 45 22 F6 | 	not	local16, local11
10e30     00 44 0E F2 | 	cmp	local16, #0 wz
10e34     01 2C 06 A1 |  if_e	add	local04, #1
10e38     1C FF 9F AD |  if_e	jmp	#LR__1394
10e3c                 | LR__1398
10e3c                 | ' for i=0 to n-1
10e3c     00 2C 06 F6 | 	mov	local04, #0
10e40     1A 47 02 F6 | 	mov	local17, local08
10e44                 | LR__1399
10e44     23 2D 52 F2 | 	cmps	local04, local17 wc
10e48     94 00 90 3D |  if_ae	jmp	#LR__1401
10e4c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10e4c     00 12 06 F6 | 	mov	arg01, #0
10e50     68 7E B1 FD | 	call	#__system___getiolock_0558
10e54     FD 12 02 F6 | 	mov	arg01, result1
10e58     38 21 B1 FD | 	call	#__system___lockmem
10e5c     16 29 02 F6 | 	mov	local02, local04
10e60     02 28 66 F0 | 	shl	local02, #2
10e64     1C 4E 05 F1 | 	add	fp, #28
10e68     A7 40 02 F6 | 	mov	local14, fp
10e6c     A7 28 02 F1 | 	add	local02, fp
10e70     14 15 02 FB | 	rdlong	arg02, local02
10e74     00 26 06 F6 | 	mov	local01, #0
10e78     00 12 06 F6 | 	mov	arg01, #0
10e7c     00 16 06 F6 | 	mov	arg03, #0
10e80     1C 4E 85 F1 | 	sub	fp, #28
10e84     00 2E B1 FD | 	call	#__system___basic_print_string
10e88     00 12 06 F6 | 	mov	arg01, #0
10e8c     2C 7E B1 FD | 	call	#__system___getiolock_0558
10e90     FD 00 68 FC | 	wrlong	#0, result1
10e94     40 2A 06 F1 | 	add	local03, #64
10e98     15 13 02 F6 | 	mov	arg01, local03
10e9c     E4 03 B1 FD | 	call	#_hg010b_spin2_setcursorx
10ea0     00 2B 56 F2 | 	cmps	local03, #256 wc
10ea4     30 00 90 CD |  if_b	jmp	#LR__1400
10ea8     00 2A 06 F6 | 	mov	local03, #0
10eac     00 12 06 F6 | 	mov	arg01, #0
10eb0     08 7E B1 FD | 	call	#__system___getiolock_0558
10eb4     FD 12 02 F6 | 	mov	arg01, result1
10eb8     D8 20 B1 FD | 	call	#__system___lockmem
10ebc     00 12 06 F6 | 	mov	arg01, #0
10ec0     0A 14 06 F6 | 	mov	arg02, #10
10ec4     00 16 06 F6 | 	mov	arg03, #0
10ec8     64 2D B1 FD | 	call	#__system___basic_print_char
10ecc     00 12 06 F6 | 	mov	arg01, #0
10ed0     E8 7D B1 FD | 	call	#__system___getiolock_0558
10ed4     FD 00 68 FC | 	wrlong	#0, result1
10ed8                 | LR__1400
10ed8     01 2C 06 F1 | 	add	local04, #1
10edc     64 FF 9F FD | 	jmp	#LR__1399
10ee0                 | LR__1401
10ee0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
10ee0     80 34 56 F2 | 	cmps	local08, #128 wc
10ee4     44 00 90 CD |  if_b	jmp	#LR__1402
10ee8     00 12 06 F6 | 	mov	arg01, #0
10eec     CC 7D B1 FD | 	call	#__system___getiolock_0558
10ef0     FD 12 02 F6 | 	mov	arg01, result1
10ef4     9C 20 B1 FD | 	call	#__system___lockmem
10ef8     99 01 00 FF 
10efc     43 15 06 F6 | 	mov	arg02, ##@LR__5655
10f00     00 12 06 F6 | 	mov	arg01, #0
10f04     00 16 06 F6 | 	mov	arg03, #0
10f08     7C 2D B1 FD | 	call	#__system___basic_print_string
10f0c     00 12 06 F6 | 	mov	arg01, #0
10f10     0A 14 06 F6 | 	mov	arg02, #10
10f14     00 16 06 F6 | 	mov	arg03, #0
10f18     14 2D B1 FD | 	call	#__system___basic_print_char
10f1c     00 12 06 F6 | 	mov	arg01, #0
10f20     98 7D B1 FD | 	call	#__system___getiolock_0558
10f24     FD 00 68 FC | 	wrlong	#0, result1
10f28     00 26 06 F6 | 	mov	local01, #0
10f2c                 | LR__1402
10f2c                 | ' print
10f2c     00 12 06 F6 | 	mov	arg01, #0
10f30     88 7D B1 FD | 	call	#__system___getiolock_0558
10f34     FD 12 02 F6 | 	mov	arg01, result1
10f38     58 20 B1 FD | 	call	#__system___lockmem
10f3c     00 12 06 F6 | 	mov	arg01, #0
10f40     0A 14 06 F6 | 	mov	arg02, #10
10f44     00 16 06 F6 | 	mov	arg03, #0
10f48     E4 2C B1 FD | 	call	#__system___basic_print_char
10f4c     00 12 06 F6 | 	mov	arg01, #0
10f50     68 7D B1 FD | 	call	#__system___getiolock_0558
10f54     FD 00 68 FC | 	wrlong	#0, result1
10f58     00 30 06 F6 | 	mov	local06, #0
10f5c     00 34 06 F6 | 	mov	local08, #0
10f60     00 2A 06 F6 | 	mov	local03, #0
10f64                 | ' return cursor_y
10f64     3E E4 05 F1 | 	add	objptr, #62
10f68     F2 48 C2 FA | 	rdbyte	local18, objptr
10f6c     3E E4 85 F1 | 	sub	objptr, #62
10f70     99 01 00 FF 
10f74     75 13 06 F6 | 	mov	arg01, ##@LR__5656
10f78     21 14 06 F6 | 	mov	arg02, #33
10f7c     74 7E B1 FD | 	call	#__system___basic_dir
10f80     FD 32 02 F6 | 	mov	local07, result1
10f84                 | ' n=0
10f84                 | ' px=0: py=v.getcursory()
10f84                 | ' filename = dir$("*", fbNormal )   
10f84                 | ' do while filename <> "" andalso filename <> nil andalso n<128
10f84                 | LR__1403
10f84     99 01 00 FF 
10f88     77 37 06 F6 | 	mov	local09, ##@LR__5657
10f8c     19 13 02 F6 | 	mov	arg01, local07
10f90     1B 15 02 F6 | 	mov	arg02, local09
10f94     24 20 B1 FD | 	call	#__system___string_cmp
10f98     00 FA 0D F2 | 	cmp	result1, #0 wz
10f9c     54 00 90 AD |  if_e	jmp	#LR__1404
10fa0     00 36 06 F6 | 	mov	local09, #0
10fa4     19 13 02 F6 | 	mov	arg01, local07
10fa8     00 14 06 F6 | 	mov	arg02, #0
10fac     0C 20 B1 FD | 	call	#__system___string_cmp
10fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
10fb4     3C 00 90 AD |  if_e	jmp	#LR__1404
10fb8     80 34 56 F2 | 	cmps	local08, #128 wc
10fbc     34 00 90 3D |  if_ae	jmp	#LR__1404
10fc0     1A 2F 02 F6 | 	mov	local05, local08
10fc4     02 2E 66 F0 | 	shl	local05, #2
10fc8     1C 4E 05 F1 | 	add	fp, #28
10fcc     A7 2E 02 F1 | 	add	local05, fp
10fd0     17 33 62 FC | 	wrlong	local07, local05
10fd4     01 34 06 F1 | 	add	local08, #1
10fd8     00 2E 06 F6 | 	mov	local05, #0
10fdc     00 12 06 F6 | 	mov	arg01, #0
10fe0     00 14 06 F6 | 	mov	arg02, #0
10fe4     1C 4E 85 F1 | 	sub	fp, #28
10fe8     08 7E B1 FD | 	call	#__system___basic_dir
10fec     FD 32 02 F6 | 	mov	local07, result1
10ff0     90 FF 9F FD | 	jmp	#LR__1403
10ff4                 | LR__1404
10ff4                 | ' for i =0 to n-1
10ff4     00 2C 06 F6 | 	mov	local04, #0
10ff8                 | LR__1405
10ff8     1A 2D 52 F2 | 	cmps	local04, local08 wc
10ffc     D8 00 90 3D |  if_ae	jmp	#LR__1409
11000     00 3A 06 F6 | 	mov	local11, #0
11004                 | '   swapped=false
11004                 | '   for j=0 to n-i-2
11004     00 3C 06 F6 | 	mov	local12, #0
11008     1A 4B 02 F6 | 	mov	local19, local08
1100c     16 4B 82 F1 | 	sub	local19, local04
11010     01 4A 86 F1 | 	sub	local19, #1
11014                 | LR__1406
11014     25 3D 52 F2 | 	cmps	local12, local19 wc
11018     AC 00 90 3D |  if_ae	jmp	#LR__1408
1101c                 | '     if filelist(j) > filelist(j+1) then
1101c     1E 37 02 F6 | 	mov	local09, local12
11020     02 36 66 F0 | 	shl	local09, #2
11024     1C 4E 05 F1 | 	add	fp, #28
11028     A7 36 02 F1 | 	add	local09, fp
1102c     1B 13 02 FB | 	rdlong	arg01, local09
11030     1E 37 02 F6 | 	mov	local09, local12
11034     01 36 06 F1 | 	add	local09, #1
11038     1B 31 02 F6 | 	mov	local06, local09
1103c     02 30 66 F0 | 	shl	local06, #2
11040     A7 26 02 F6 | 	mov	local01, fp
11044     A7 30 02 F1 | 	add	local06, fp
11048     18 2F 02 FB | 	rdlong	local05, local06
1104c     17 15 02 F6 | 	mov	arg02, local05
11050     1C 4E 85 F1 | 	sub	fp, #28
11054     64 1F B1 FD | 	call	#__system___string_cmp
11058     01 FA 55 F2 | 	cmps	result1, #1 wc
1105c     60 00 90 CD |  if_b	jmp	#LR__1407
11060     1E 37 02 F6 | 	mov	local09, local12
11064     01 36 06 F1 | 	add	local09, #1
11068     02 36 66 F0 | 	shl	local09, #2
1106c     1C 4E 05 F1 | 	add	fp, #28
11070     A7 36 02 F1 | 	add	local09, fp
11074     1B 45 02 FB | 	rdlong	local16, local09
11078     1E 31 02 F6 | 	mov	local06, local12
1107c     02 30 66 F0 | 	shl	local06, #2
11080     A7 30 02 F1 | 	add	local06, fp
11084     18 2F 02 FB | 	rdlong	local05, local06
11088     1E 37 02 F6 | 	mov	local09, local12
1108c     1B 31 02 F6 | 	mov	local06, local09
11090     02 30 66 F0 | 	shl	local06, #2
11094     A7 26 02 F6 | 	mov	local01, fp
11098     A7 30 02 F1 | 	add	local06, fp
1109c     18 45 62 FC | 	wrlong	local16, local06
110a0     1E 41 02 F6 | 	mov	local14, local12
110a4     01 40 06 F1 | 	add	local14, #1
110a8     02 40 66 F0 | 	shl	local14, #2
110ac     A7 42 02 F6 | 	mov	local15, fp
110b0     A7 40 02 F1 | 	add	local14, fp
110b4     20 2F 62 FC | 	wrlong	local05, local14
110b8     01 3A 66 F6 | 	neg	local11, #1
110bc     1C 4E 85 F1 | 	sub	fp, #28
110c0                 | LR__1407
110c0     01 3C 06 F1 | 	add	local12, #1
110c4     4C FF 9F FD | 	jmp	#LR__1406
110c8                 | LR__1408
110c8                 | ' if not swapped then exit for
110c8     1D 45 22 F6 | 	not	local16, local11
110cc     00 44 0E F2 | 	cmp	local16, #0 wz
110d0     01 2C 06 A1 |  if_e	add	local04, #1
110d4     20 FF 9F AD |  if_e	jmp	#LR__1405
110d8                 | LR__1409
110d8                 | ' for i=0 to n-1
110d8     00 2C 06 F6 | 	mov	local04, #0
110dc                 | LR__1410
110dc     1A 2D 52 F2 | 	cmps	local04, local08 wc
110e0     8C 00 90 3D |  if_ae	jmp	#LR__1412
110e4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
110e4     00 12 06 F6 | 	mov	arg01, #0
110e8     D0 7B B1 FD | 	call	#__system___getiolock_0558
110ec     FD 12 02 F6 | 	mov	arg01, result1
110f0     A0 1E B1 FD | 	call	#__system___lockmem
110f4     16 29 02 F6 | 	mov	local02, local04
110f8     02 28 66 F0 | 	shl	local02, #2
110fc     1C 4E 05 F1 | 	add	fp, #28
11100     A7 28 02 F1 | 	add	local02, fp
11104     14 15 02 FB | 	rdlong	arg02, local02
11108     00 12 06 F6 | 	mov	arg01, #0
1110c     00 16 06 F6 | 	mov	arg03, #0
11110     1C 4E 85 F1 | 	sub	fp, #28
11114     70 2B B1 FD | 	call	#__system___basic_print_string
11118     00 12 06 F6 | 	mov	arg01, #0
1111c     9C 7B B1 FD | 	call	#__system___getiolock_0558
11120     FD 00 68 FC | 	wrlong	#0, result1
11124     40 2A 06 F1 | 	add	local03, #64
11128     15 13 02 F6 | 	mov	arg01, local03
1112c     54 01 B1 FD | 	call	#_hg010b_spin2_setcursorx
11130     00 2B 56 F2 | 	cmps	local03, #256 wc
11134     30 00 90 CD |  if_b	jmp	#LR__1411
11138     00 2A 06 F6 | 	mov	local03, #0
1113c     00 12 06 F6 | 	mov	arg01, #0
11140     78 7B B1 FD | 	call	#__system___getiolock_0558
11144     FD 12 02 F6 | 	mov	arg01, result1
11148     48 1E B1 FD | 	call	#__system___lockmem
1114c     00 12 06 F6 | 	mov	arg01, #0
11150     0A 14 06 F6 | 	mov	arg02, #10
11154     00 16 06 F6 | 	mov	arg03, #0
11158     D4 2A B1 FD | 	call	#__system___basic_print_char
1115c     00 12 06 F6 | 	mov	arg01, #0
11160     58 7B B1 FD | 	call	#__system___getiolock_0558
11164     FD 00 68 FC | 	wrlong	#0, result1
11168                 | LR__1411
11168     01 2C 06 F1 | 	add	local04, #1
1116c     6C FF 9F FD | 	jmp	#LR__1410
11170                 | LR__1412
11170                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11170     80 34 56 F2 | 	cmps	local08, #128 wc
11174     40 00 90 CD |  if_b	jmp	#LR__1413
11178     00 12 06 F6 | 	mov	arg01, #0
1117c     3C 7B B1 FD | 	call	#__system___getiolock_0558
11180     FD 12 02 F6 | 	mov	arg01, result1
11184     0C 1E B1 FD | 	call	#__system___lockmem
11188     99 01 00 FF 
1118c     78 15 06 F6 | 	mov	arg02, ##@LR__5658
11190     00 12 06 F6 | 	mov	arg01, #0
11194     00 16 06 F6 | 	mov	arg03, #0
11198     EC 2A B1 FD | 	call	#__system___basic_print_string
1119c     00 12 06 F6 | 	mov	arg01, #0
111a0     0A 14 06 F6 | 	mov	arg02, #10
111a4     00 16 06 F6 | 	mov	arg03, #0
111a8     84 2A B1 FD | 	call	#__system___basic_print_char
111ac     00 12 06 F6 | 	mov	arg01, #0
111b0     08 7B B1 FD | 	call	#__system___getiolock_0558
111b4     FD 00 68 FC | 	wrlong	#0, result1
111b8                 | LR__1413
111b8                 | ' print
111b8     00 12 06 F6 | 	mov	arg01, #0
111bc     FC 7A B1 FD | 	call	#__system___getiolock_0558
111c0     FD 12 02 F6 | 	mov	arg01, result1
111c4     CC 1D B1 FD | 	call	#__system___lockmem
111c8     00 12 06 F6 | 	mov	arg01, #0
111cc     0A 14 06 F6 | 	mov	arg02, #10
111d0     00 16 06 F6 | 	mov	arg03, #0
111d4     58 2A B1 FD | 	call	#__system___basic_print_char
111d8     00 12 06 F6 | 	mov	arg01, #0
111dc     DC 7A B1 FD | 	call	#__system___getiolock_0558
111e0     FD 00 68 FC | 	wrlong	#0, result1
111e4     A7 F0 03 F6 | 	mov	ptra, fp
111e8     B2 00 A0 FD | 	call	#popregs_
111ec                 | _do_dir_ret
111ec     2D 00 64 FD | 	ret
111f0                 | 
111f0                 | ' 
111f0                 | ' '-------------------- dpeek
111f0                 | ' 
111f0                 | ' sub do_dpeek
111f0                 | _do_dpeek
111f0     00 4A 05 F6 | 	mov	COUNT_, #0
111f4     A8 00 A0 FD | 	call	#pushregs_
111f8     14 F0 07 F1 | 	add	ptra, #20
111fc     E0 B6 BF FD | 	call	#_pop
11200     A7 FA 61 FC | 	wrlong	result1, fp
11204     04 4E 05 F1 | 	add	fp, #4
11208     A7 FC 61 FC | 	wrlong	result2, fp
1120c     04 4E 05 F1 | 	add	fp, #4
11210     A7 FE 61 FC | 	wrlong	result3, fp
11214     08 4E 85 F1 | 	sub	fp, #8
11218     A7 12 02 F6 | 	mov	arg01, fp
1121c     A4 B8 BF FD | 	call	#_converttoint
11220     0C 4E 05 F1 | 	add	fp, #12
11224     A7 FA 61 FC | 	wrlong	result1, fp
11228                 | ' 
11228                 | ' t1=pop()
11228                 | ' a=converttoint(t1)
11228                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11228     0C 4E 85 F1 | 	sub	fp, #12
1122c     00 04 00 FF 
11230     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11234     1C 00 90 3D |  if_ae	jmp	#LR__1420
11238     0C 4E 05 F1 | 	add	fp, #12
1123c     A7 12 02 FB | 	rdlong	arg01, fp
11240     09 FB E1 FA | 	rdword	result1, arg01
11244     04 4E 05 F1 | 	add	fp, #4
11248     A7 FA 61 FC | 	wrlong	result1, fp
1124c     10 4E 85 F1 | 	sub	fp, #16
11250     1C 00 90 FD | 	jmp	#LR__1421
11254                 | LR__1420
11254     0C 4E 05 F1 | 	add	fp, #12
11258     A7 12 02 FB | 	rdlong	arg01, fp
1125c     0C 4E 85 F1 | 	sub	fp, #12
11260     B4 E6 B0 FD | 	call	#_psdpeek
11264     10 4E 05 F1 | 	add	fp, #16
11268     A7 FA 61 FC | 	wrlong	result1, fp
1126c     10 4E 85 F1 | 	sub	fp, #16
11270                 | LR__1421
11270     08 4E 05 F1 | 	add	fp, #8
11274     A7 3A 68 FC | 	wrlong	#29, fp
11278     08 4E 05 F1 | 	add	fp, #8
1127c     A7 12 02 FB | 	rdlong	arg01, fp
11280     10 4E 85 F1 | 	sub	fp, #16
11284     A7 12 62 FC | 	wrlong	arg01, fp
11288     A7 12 02 F6 | 	mov	arg01, fp
1128c     E8 B6 BF FD | 	call	#_push
11290     A7 F0 03 F6 | 	mov	ptra, fp
11294     B2 00 A0 FD | 	call	#popregs_
11298                 | _do_dpeek_ret
11298     2D 00 64 FD | 	ret
1129c                 | 
1129c                 | ' 
1129c                 | ' '-------------------- dpoke
1129c                 | ' 
1129c                 | ' sub do_dpoke
1129c                 | _do_dpoke
1129c     01 4A 05 F6 | 	mov	COUNT_, #1
112a0     A8 00 A0 FD | 	call	#pushregs_
112a4     20 F0 07 F1 | 	add	ptra, #32
112a8     34 B6 BF FD | 	call	#_pop
112ac     FD 14 02 F6 | 	mov	arg02, result1
112b0     FE 12 02 F6 | 	mov	arg01, result2
112b4     FF 26 02 F6 | 	mov	local01, result3
112b8     A7 14 62 FC | 	wrlong	arg02, fp
112bc     04 4E 05 F1 | 	add	fp, #4
112c0     A7 12 62 FC | 	wrlong	arg01, fp
112c4     04 4E 05 F1 | 	add	fp, #4
112c8     A7 26 62 FC | 	wrlong	local01, fp
112cc     08 4E 85 F1 | 	sub	fp, #8
112d0     0C B6 BF FD | 	call	#_pop
112d4     FF 26 02 F6 | 	mov	local01, result3
112d8     0C 4E 05 F1 | 	add	fp, #12
112dc     A7 FA 61 FC | 	wrlong	result1, fp
112e0     04 4E 05 F1 | 	add	fp, #4
112e4     A7 FC 61 FC | 	wrlong	result2, fp
112e8     04 4E 05 F1 | 	add	fp, #4
112ec     A7 26 62 FC | 	wrlong	local01, fp
112f0     08 4E 85 F1 | 	sub	fp, #8
112f4     A7 12 02 F6 | 	mov	arg01, fp
112f8     0C 4E 85 F1 | 	sub	fp, #12
112fc     C4 B7 BF FD | 	call	#_converttoint
11300     18 4E 05 F1 | 	add	fp, #24
11304     A7 FA 61 FC | 	wrlong	result1, fp
11308     18 4E 85 F1 | 	sub	fp, #24
1130c     A7 12 02 F6 | 	mov	arg01, fp
11310     B0 B7 BF FD | 	call	#_converttoint
11314     1C 4E 05 F1 | 	add	fp, #28
11318     A7 FA 61 FC | 	wrlong	result1, fp
1131c                 | ' 
1131c                 | ' t1=pop() 'value
1131c                 | ' t2=pop() 
1131c                 | ' a=converttoint(t2) : v=converttoint(t1)
1131c                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1131c     04 4E 85 F1 | 	sub	fp, #4
11320     A7 26 02 FB | 	rdlong	local01, fp
11324     18 4E 85 F1 | 	sub	fp, #24
11328     00 04 00 FF 
1132c     00 26 16 F2 | 	cmp	local01, ##524288 wc
11330     1C 00 90 3D |  if_ae	jmp	#LR__1430
11334     18 4E 05 F1 | 	add	fp, #24
11338     A7 12 02 FB | 	rdlong	arg01, fp
1133c     04 4E 05 F1 | 	add	fp, #4
11340     A7 14 02 FB | 	rdlong	arg02, fp
11344     1C 4E 85 F1 | 	sub	fp, #28
11348     09 15 52 FC | 	wrword	arg02, arg01
1134c     18 00 90 FD | 	jmp	#LR__1431
11350                 | LR__1430
11350     18 4E 05 F1 | 	add	fp, #24
11354     A7 12 02 FB | 	rdlong	arg01, fp
11358     04 4E 05 F1 | 	add	fp, #4
1135c     A7 14 02 FB | 	rdlong	arg02, fp
11360     1C 4E 85 F1 | 	sub	fp, #28
11364     70 E4 B0 FD | 	call	#_psdpoke
11368                 | LR__1431
11368     A7 F0 03 F6 | 	mov	ptra, fp
1136c     B2 00 A0 FD | 	call	#popregs_
11370                 | _do_dpoke_ret
11370     2D 00 64 FD | 	ret
11374                 | 
11374                 | ' '-------------------- draw
11374                 | ' 
11374                 | ' sub do_draw
11374                 | _do_draw
11374     00 4A 05 F6 | 	mov	COUNT_, #0
11378     A8 00 A0 FD | 	call	#pushregs_
1137c     20 F0 07 F1 | 	add	ptra, #32
11380     5C B5 BF FD | 	call	#_pop
11384     FD 1A 02 F6 | 	mov	arg05, result1
11388     FE 18 02 F6 | 	mov	arg04, result2
1138c     FF 16 02 F6 | 	mov	arg03, result3
11390     0C 4E 05 F1 | 	add	fp, #12
11394     A7 1A 62 FC | 	wrlong	arg05, fp
11398     04 4E 05 F1 | 	add	fp, #4
1139c     A7 18 62 FC | 	wrlong	arg04, fp
113a0     04 4E 05 F1 | 	add	fp, #4
113a4     A7 16 62 FC | 	wrlong	arg03, fp
113a8     14 4E 85 F1 | 	sub	fp, #20
113ac     30 B5 BF FD | 	call	#_pop
113b0     FF 1A 02 F6 | 	mov	arg05, result3
113b4     A7 FA 61 FC | 	wrlong	result1, fp
113b8     04 4E 05 F1 | 	add	fp, #4
113bc     A7 FC 61 FC | 	wrlong	result2, fp
113c0     04 4E 05 F1 | 	add	fp, #4
113c4     A7 1A 62 FC | 	wrlong	arg05, fp
113c8     08 4E 85 F1 | 	sub	fp, #8
113cc     A7 12 02 F6 | 	mov	arg01, fp
113d0     F0 B6 BF FD | 	call	#_converttoint
113d4     18 4E 05 F1 | 	add	fp, #24
113d8     A7 FA 61 FC | 	wrlong	result1, fp
113dc     0C 4E 85 F1 | 	sub	fp, #12
113e0     A7 12 02 F6 | 	mov	arg01, fp
113e4     0C 4E 85 F1 | 	sub	fp, #12
113e8     D8 B6 BF FD | 	call	#_converttoint
113ec     1C 4E 05 F1 | 	add	fp, #28
113f0     A7 FA 61 FC | 	wrlong	result1, fp
113f4     37 00 00 FF 
113f8     2C E4 05 F1 | 	add	objptr, ##28204
113fc     F2 12 02 FB | 	rdlong	arg01, objptr
11400     04 E4 05 F1 | 	add	objptr, #4
11404     F2 14 02 FB | 	rdlong	arg02, objptr
11408     04 4E 85 F1 | 	sub	fp, #4
1140c     A7 16 02 FB | 	rdlong	arg03, fp
11410     FD 18 02 F6 | 	mov	arg04, result1
11414     18 4E 85 F1 | 	sub	fp, #24
11418     08 E4 85 F1 | 	sub	objptr, #8
1141c     F2 1A 02 FB | 	rdlong	arg05, objptr
11420     37 00 00 FF 
11424     28 E4 85 F1 | 	sub	objptr, ##28200
11428     08 F5 B0 FD | 	call	#_hg010b_spin2_draw
1142c     18 4E 05 F1 | 	add	fp, #24
11430     A7 1A 02 FB | 	rdlong	arg05, fp
11434     37 00 00 FF 
11438     2C E4 05 F1 | 	add	objptr, ##28204
1143c     F2 1A 62 FC | 	wrlong	arg05, objptr
11440     04 4E 05 F1 | 	add	fp, #4
11444     A7 1A 02 FB | 	rdlong	arg05, fp
11448     1C 4E 85 F1 | 	sub	fp, #28
1144c     04 E4 05 F1 | 	add	objptr, #4
11450     F2 1A 62 FC | 	wrlong	arg05, objptr
11454     37 00 00 FF 
11458     30 E4 85 F1 | 	sub	objptr, ##28208
1145c     A7 F0 03 F6 | 	mov	ptra, fp
11460     B2 00 A0 FD | 	call	#popregs_
11464                 | _do_draw_ret
11464     2D 00 64 FD | 	ret
11468                 | 
11468                 | ' 
11468                 | ' '-------------------- else
11468                 | ' 
11468                 | ' sub do_else
11468                 | _do_else
11468     4A 00 00 FF 
1146c     7C E4 05 F1 | 	add	objptr, ##38012
11470     F2 00 02 FB | 	rdlong	_var01, objptr
11474     01 00 86 F1 | 	sub	_var01, #1
11478     04 E4 05 F1 | 	add	objptr, #4
1147c     F2 00 62 FC | 	wrlong	_var01, objptr
11480     4A 00 00 FF 
11484     80 E4 85 F1 | 	sub	objptr, ##38016
11488                 | _do_else_ret
11488     2D 00 64 FD | 	ret
1148c                 | 
1148c                 | ' 
1148c                 | ' '-------------------- end
1148c                 | ' 
1148c                 | ' sub do_end
1148c                 | _do_end
1148c     4A 00 00 FF 
11490     7C E4 05 F1 | 	add	objptr, ##38012
11494     F2 00 02 FB | 	rdlong	_var01, objptr
11498     01 00 86 F1 | 	sub	_var01, #1
1149c     04 E4 05 F1 | 	add	objptr, #4
114a0     F2 00 62 FC | 	wrlong	_var01, objptr
114a4     06 00 00 FF 
114a8     38 E4 05 F1 | 	add	objptr, ##3128
114ac     FF FF BF FF 
114b0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
114b4     50 00 00 FF 
114b8     B8 E4 85 F1 | 	sub	objptr, ##41144
114bc                 | _do_end_ret
114bc     2D 00 64 FD | 	ret
114c0                 | 
114c0                 | ' 
114c0                 | ' '-------------------- enter
114c0                 | ' 
114c0                 | ' sub do_enter
114c0                 | _do_enter
114c0     02 00 00 FF 
114c4     D2 12 06 F6 | 	mov	arg01, ##1234
114c8     AC 22 B0 FD | 	call	#_do_load
114cc                 | _do_enter_ret
114cc     2D 00 64 FD | 	ret
114d0                 | 
114d0                 | ' 
114d0                 | ' '------------------- error processing
114d0                 | ' 
114d0                 | ' sub do_error
114d0                 | _do_error
114d0     01 4A 05 F6 | 	mov	COUNT_, #1
114d4     A8 00 A0 FD | 	call	#pushregs_
114d8     4A 00 00 FF 
114dc     80 E4 05 F1 | 	add	objptr, ##38016
114e0     F2 18 02 FB | 	rdlong	arg04, objptr
114e4     0C 17 02 F6 | 	mov	arg03, arg04
114e8     01 16 66 F0 | 	shl	arg03, #1
114ec     0C 17 02 F1 | 	add	arg03, arg04
114f0     02 16 66 F0 | 	shl	arg03, #2
114f4     03 00 00 FF 
114f8     04 E4 85 F1 | 	sub	objptr, ##1540
114fc     F2 16 02 F1 | 	add	arg03, objptr
11500     0B 27 02 FB | 	rdlong	local01, arg03
11504                 | ' r=compiledline(lineptr_e).result.uresult
11504                 | ' print "Error ";r;": ";errors$(r)
11504     00 12 06 F6 | 	mov	arg01, #0
11508     47 00 00 FF 
1150c     7C E4 85 F1 | 	sub	objptr, ##36476
11510     A8 77 B1 FD | 	call	#__system___getiolock_0558
11514     FD 12 02 F6 | 	mov	arg01, result1
11518     78 1A B1 FD | 	call	#__system___lockmem
1151c     99 01 00 FF 
11520     AA 15 06 F6 | 	mov	arg02, ##@LR__5659
11524     00 12 06 F6 | 	mov	arg01, #0
11528     00 16 06 F6 | 	mov	arg03, #0
1152c     58 27 B1 FD | 	call	#__system___basic_print_string
11530     00 12 06 F6 | 	mov	arg01, #0
11534     13 15 02 F6 | 	mov	arg02, local01
11538     00 16 06 F6 | 	mov	arg03, #0
1153c     0A 18 06 F6 | 	mov	arg04, #10
11540     C8 27 B1 FD | 	call	#__system___basic_print_unsigned
11544     99 01 00 FF 
11548     B1 15 06 F6 | 	mov	arg02, ##@LR__5660
1154c     00 12 06 F6 | 	mov	arg01, #0
11550     00 16 06 F6 | 	mov	arg03, #0
11554     30 27 B1 FD | 	call	#__system___basic_print_string
11558     02 26 66 F0 | 	shl	local01, #2
1155c     45 00 00 FF 
11560     7C E4 05 F1 | 	add	objptr, ##35452
11564     F2 26 02 F1 | 	add	local01, objptr
11568     13 15 02 FB | 	rdlong	arg02, local01
1156c     00 12 06 F6 | 	mov	arg01, #0
11570     00 16 06 F6 | 	mov	arg03, #0
11574     45 00 00 FF 
11578     7C E4 85 F1 | 	sub	objptr, ##35452
1157c     08 27 B1 FD | 	call	#__system___basic_print_string
11580     00 12 06 F6 | 	mov	arg01, #0
11584     0A 14 06 F6 | 	mov	arg02, #10
11588     00 16 06 F6 | 	mov	arg03, #0
1158c     A0 26 B1 FD | 	call	#__system___basic_print_char
11590     00 12 06 F6 | 	mov	arg01, #0
11594     24 77 B1 FD | 	call	#__system___getiolock_0558
11598     FD 00 68 FC | 	wrlong	#0, result1
1159c     A7 F0 03 F6 | 	mov	ptra, fp
115a0     B2 00 A0 FD | 	call	#popregs_
115a4                 | _do_error_ret
115a4     2D 00 64 FD | 	ret
115a8                 | 
115a8                 | ' 
115a8                 | ' '-------------------- fcircle
115a8                 | ' 
115a8                 | ' sub do_fcircle
115a8                 | _do_fcircle
115a8     02 4A 05 F6 | 	mov	COUNT_, #2
115ac     A8 00 A0 FD | 	call	#pushregs_
115b0     24 F0 07 F1 | 	add	ptra, #36
115b4     28 B3 BF FD | 	call	#_pop
115b8     FD 14 02 F6 | 	mov	arg02, result1
115bc     FE 18 02 F6 | 	mov	arg04, result2
115c0     FF 16 02 F6 | 	mov	arg03, result3
115c4     18 4E 05 F1 | 	add	fp, #24
115c8     A7 14 62 FC | 	wrlong	arg02, fp
115cc     04 4E 05 F1 | 	add	fp, #4
115d0     A7 18 62 FC | 	wrlong	arg04, fp
115d4     04 4E 05 F1 | 	add	fp, #4
115d8     A7 16 62 FC | 	wrlong	arg03, fp
115dc     20 4E 85 F1 | 	sub	fp, #32
115e0     FC B2 BF FD | 	call	#_pop
115e4     FD 14 02 F6 | 	mov	arg02, result1
115e8     FE 18 02 F6 | 	mov	arg04, result2
115ec     FF 16 02 F6 | 	mov	arg03, result3
115f0     0C 4E 05 F1 | 	add	fp, #12
115f4     A7 14 62 FC | 	wrlong	arg02, fp
115f8     04 4E 05 F1 | 	add	fp, #4
115fc     A7 18 62 FC | 	wrlong	arg04, fp
11600     04 4E 05 F1 | 	add	fp, #4
11604     A7 16 62 FC | 	wrlong	arg03, fp
11608     14 4E 85 F1 | 	sub	fp, #20
1160c     D0 B2 BF FD | 	call	#_pop
11610     FF 14 02 F6 | 	mov	arg02, result3
11614     A7 FA 61 FC | 	wrlong	result1, fp
11618     04 4E 05 F1 | 	add	fp, #4
1161c     A7 FC 61 FC | 	wrlong	result2, fp
11620     04 4E 05 F1 | 	add	fp, #4
11624     A7 14 62 FC | 	wrlong	arg02, fp
11628     08 4E 85 F1 | 	sub	fp, #8
1162c     A7 12 02 F6 | 	mov	arg01, fp
11630     90 B4 BF FD | 	call	#_converttoint
11634     FD 26 02 F6 | 	mov	local01, result1
11638     0C 4E 05 F1 | 	add	fp, #12
1163c     A7 12 02 F6 | 	mov	arg01, fp
11640     0C 4E 85 F1 | 	sub	fp, #12
11644     7C B4 BF FD | 	call	#_converttoint
11648     FD 28 02 F6 | 	mov	local02, result1
1164c     18 4E 05 F1 | 	add	fp, #24
11650     A7 12 02 F6 | 	mov	arg01, fp
11654     18 4E 85 F1 | 	sub	fp, #24
11658     68 B4 BF FD | 	call	#_converttoint
1165c     FD 16 02 F6 | 	mov	arg03, result1
11660     37 00 00 FF 
11664     28 E4 05 F1 | 	add	objptr, ##28200
11668     F2 18 02 FB | 	rdlong	arg04, objptr
1166c     37 00 00 FF 
11670     28 E4 85 F1 | 	sub	objptr, ##28200
11674     13 13 02 F6 | 	mov	arg01, local01
11678     14 15 02 F6 | 	mov	arg02, local02
1167c     38 F7 B0 FD | 	call	#_hg010b_spin2_fcircle
11680     A7 F0 03 F6 | 	mov	ptra, fp
11684     B2 00 A0 FD | 	call	#popregs_
11688                 | _do_fcircle_ret
11688     2D 00 64 FD | 	ret
1168c                 | 
1168c                 | ' 
1168c                 | ' '-------------------- fill
1168c                 | ' 
1168c                 | ' sub do_fill
1168c                 | _do_fill
1168c     03 4A 05 F6 | 	mov	COUNT_, #3
11690     A8 00 A0 FD | 	call	#pushregs_
11694     30 F0 07 F1 | 	add	ptra, #48
11698     44 B2 BF FD | 	call	#_pop
1169c     FD 16 02 F6 | 	mov	arg03, result1
116a0     FE 14 02 F6 | 	mov	arg02, result2
116a4     FF 18 02 F6 | 	mov	arg04, result3
116a8     24 4E 05 F1 | 	add	fp, #36
116ac     A7 16 62 FC | 	wrlong	arg03, fp
116b0     04 4E 05 F1 | 	add	fp, #4
116b4     A7 14 62 FC | 	wrlong	arg02, fp
116b8     04 4E 05 F1 | 	add	fp, #4
116bc     A7 18 62 FC | 	wrlong	arg04, fp
116c0     2C 4E 85 F1 | 	sub	fp, #44
116c4     18 B2 BF FD | 	call	#_pop
116c8     FD 16 02 F6 | 	mov	arg03, result1
116cc     FE 14 02 F6 | 	mov	arg02, result2
116d0     FF 18 02 F6 | 	mov	arg04, result3
116d4     18 4E 05 F1 | 	add	fp, #24
116d8     A7 16 62 FC | 	wrlong	arg03, fp
116dc     04 4E 05 F1 | 	add	fp, #4
116e0     A7 14 62 FC | 	wrlong	arg02, fp
116e4     04 4E 05 F1 | 	add	fp, #4
116e8     A7 18 62 FC | 	wrlong	arg04, fp
116ec     20 4E 85 F1 | 	sub	fp, #32
116f0     EC B1 BF FD | 	call	#_pop
116f4     FD 16 02 F6 | 	mov	arg03, result1
116f8     FE 14 02 F6 | 	mov	arg02, result2
116fc     FF 18 02 F6 | 	mov	arg04, result3
11700     0C 4E 05 F1 | 	add	fp, #12
11704     A7 16 62 FC | 	wrlong	arg03, fp
11708     04 4E 05 F1 | 	add	fp, #4
1170c     A7 14 62 FC | 	wrlong	arg02, fp
11710     04 4E 05 F1 | 	add	fp, #4
11714     A7 18 62 FC | 	wrlong	arg04, fp
11718     14 4E 85 F1 | 	sub	fp, #20
1171c     C0 B1 BF FD | 	call	#_pop
11720     FF 16 02 F6 | 	mov	arg03, result3
11724     A7 FA 61 FC | 	wrlong	result1, fp
11728     04 4E 05 F1 | 	add	fp, #4
1172c     A7 FC 61 FC | 	wrlong	result2, fp
11730     04 4E 05 F1 | 	add	fp, #4
11734     A7 16 62 FC | 	wrlong	arg03, fp
11738     08 4E 85 F1 | 	sub	fp, #8
1173c     A7 12 02 F6 | 	mov	arg01, fp
11740     80 B3 BF FD | 	call	#_converttoint
11744     FD 26 02 F6 | 	mov	local01, result1
11748     0C 4E 05 F1 | 	add	fp, #12
1174c     A7 12 02 F6 | 	mov	arg01, fp
11750     0C 4E 85 F1 | 	sub	fp, #12
11754     6C B3 BF FD | 	call	#_converttoint
11758     FD 28 02 F6 | 	mov	local02, result1
1175c     18 4E 05 F1 | 	add	fp, #24
11760     A7 12 02 F6 | 	mov	arg01, fp
11764     18 4E 85 F1 | 	sub	fp, #24
11768     58 B3 BF FD | 	call	#_converttoint
1176c     FD 2A 02 F6 | 	mov	local03, result1
11770     24 4E 05 F1 | 	add	fp, #36
11774     A7 12 02 F6 | 	mov	arg01, fp
11778     24 4E 85 F1 | 	sub	fp, #36
1177c     44 B3 BF FD | 	call	#_converttoint
11780     FD 18 02 F6 | 	mov	arg04, result1
11784     13 13 02 F6 | 	mov	arg01, local01
11788     14 15 02 F6 | 	mov	arg02, local02
1178c     15 17 02 F6 | 	mov	arg03, local03
11790     90 F3 B0 FD | 	call	#_hg010b_spin2_fill
11794     A7 F0 03 F6 | 	mov	ptra, fp
11798     B2 00 A0 FD | 	call	#popregs_
1179c                 | _do_fill_ret
1179c     2D 00 64 FD | 	ret
117a0                 | 
117a0                 | ' 
117a0                 | ' '-------------------- font
117a0                 | ' 
117a0                 | ' sub do_font
117a0                 | _do_font
117a0     03 4A 05 F6 | 	mov	COUNT_, #3
117a4     A8 00 A0 FD | 	call	#pushregs_
117a8     34 B1 BF FD | 	call	#_pop
117ac     FD 26 02 F6 | 	mov	local01, result1
117b0     FE 28 02 F6 | 	mov	local02, result2
117b4     FF 2A 02 F6 | 	mov	local03, result3
117b8                 | ' 
117b8                 | ' t1=pop() 
117b8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
117b8     1E 2A 0E F2 | 	cmp	local03, #30 wz
117bc     10 00 90 5D |  if_ne	jmp	#LR__1440
117c0     13 13 02 F6 | 	mov	arg01, local01
117c4     00 14 06 F6 | 	mov	arg02, #0
117c8     08 4B B1 FD | 	call	#__system___float_tointeger
117cc     FD 26 02 F6 | 	mov	local01, result1
117d0                 | LR__1440
117d0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
117d0     1F 2A 0E F2 | 	cmp	local03, #31 wz
117d4     18 00 90 5D |  if_ne	jmp	#LR__1441
117d8     13 13 02 F6 | 	mov	arg01, local01
117dc     38 4E B1 FD | 	call	#__system____builtin_atof
117e0     FD 12 02 F6 | 	mov	arg01, result1
117e4     00 14 06 F6 | 	mov	arg02, #0
117e8     E8 4A B1 FD | 	call	#__system___float_tointeger
117ec     FD 26 02 F6 | 	mov	local01, result1
117f0                 | LR__1441
117f0     37 00 00 FF 
117f4     40 E4 05 F1 | 	add	objptr, ##28224
117f8     F2 26 62 FC | 	wrlong	local01, objptr
117fc     37 00 00 FF 
11800     40 E4 85 F1 | 	sub	objptr, ##28224
11804     02 26 66 F0 | 	shl	local01, #2
11808     13 13 02 F6 | 	mov	arg01, local01
1180c     F8 F9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
11810     A7 F0 03 F6 | 	mov	ptra, fp
11814     B2 00 A0 FD | 	call	#popregs_
11818                 | _do_font_ret
11818     2D 00 64 FD | 	ret
1181c                 | 
1181c                 | ' 
1181c                 | ' '-------------------- for
1181c                 | ' 
1181c                 | ' sub do_for()
1181c                 | _do_for
1181c     01 4A 05 F6 | 	mov	COUNT_, #1
11820     A8 00 A0 FD | 	call	#pushregs_
11824     10 F0 07 F1 | 	add	ptra, #16
11828     50 00 00 FF 
1182c     08 E5 05 F1 | 	add	objptr, ##41224
11830     F2 12 02 FB | 	rdlong	arg01, objptr
11834     01 12 06 F1 | 	add	arg01, #1
11838     F2 12 62 FC | 	wrlong	arg01, objptr
1183c     50 00 00 FF 
11840     08 E5 85 F1 | 	sub	objptr, ##41224
11844     98 B0 BF FD | 	call	#_pop
11848     A7 FA 61 FC | 	wrlong	result1, fp
1184c     04 4E 05 F1 | 	add	fp, #4
11850     A7 FC 61 FC | 	wrlong	result2, fp
11854     04 4E 05 F1 | 	add	fp, #4
11858     A7 FE 61 FC | 	wrlong	result3, fp
1185c     08 4E 85 F1 | 	sub	fp, #8
11860     50 00 00 FF 
11864     08 E5 05 F1 | 	add	objptr, ##41224
11868     F2 12 02 FB | 	rdlong	arg01, objptr
1186c     09 27 02 F6 | 	mov	local01, arg01
11870     02 26 66 F0 | 	shl	local01, #2
11874     09 27 02 F1 | 	add	local01, arg01
11878     02 26 66 F0 | 	shl	local01, #2
1187c     06 00 00 FF 
11880     70 E4 85 F1 | 	sub	objptr, ##3184
11884     F2 26 02 F1 | 	add	local01, objptr
11888     A7 12 02 FB | 	rdlong	arg01, fp
1188c     08 26 06 F1 | 	add	local01, #8
11890     13 13 62 FC | 	wrlong	arg01, local01
11894     4A 00 00 FF 
11898     98 E4 85 F1 | 	sub	objptr, ##38040
1189c     40 B0 BF FD | 	call	#_pop
118a0     A7 FA 61 FC | 	wrlong	result1, fp
118a4     04 4E 05 F1 | 	add	fp, #4
118a8     A7 FC 61 FC | 	wrlong	result2, fp
118ac     04 4E 05 F1 | 	add	fp, #4
118b0     A7 FE 61 FC | 	wrlong	result3, fp
118b4     08 4E 85 F1 | 	sub	fp, #8
118b8     50 00 00 FF 
118bc     08 E5 05 F1 | 	add	objptr, ##41224
118c0     F2 12 02 FB | 	rdlong	arg01, objptr
118c4     09 27 02 F6 | 	mov	local01, arg01
118c8     02 26 66 F0 | 	shl	local01, #2
118cc     09 27 02 F1 | 	add	local01, arg01
118d0     02 26 66 F0 | 	shl	local01, #2
118d4     06 00 00 FF 
118d8     70 E4 85 F1 | 	sub	objptr, ##3184
118dc     F2 26 02 F1 | 	add	local01, objptr
118e0     A7 12 02 F6 | 	mov	arg01, fp
118e4     4A 00 00 FF 
118e8     98 E4 85 F1 | 	sub	objptr, ##38040
118ec     D4 B1 BF FD | 	call	#_converttoint
118f0     FD 12 02 F6 | 	mov	arg01, result1
118f4     0C 26 06 F1 | 	add	local01, #12
118f8     13 13 62 FC | 	wrlong	arg01, local01
118fc     E0 AF BF FD | 	call	#_pop
11900     A7 FA 61 FC | 	wrlong	result1, fp
11904     04 4E 05 F1 | 	add	fp, #4
11908     A7 FC 61 FC | 	wrlong	result2, fp
1190c     04 4E 05 F1 | 	add	fp, #4
11910     A7 FE 61 FC | 	wrlong	result3, fp
11914     08 4E 85 F1 | 	sub	fp, #8
11918     50 00 00 FF 
1191c     08 E5 05 F1 | 	add	objptr, ##41224
11920     F2 12 02 FB | 	rdlong	arg01, objptr
11924     09 27 02 F6 | 	mov	local01, arg01
11928     02 26 66 F0 | 	shl	local01, #2
1192c     09 27 02 F1 | 	add	local01, arg01
11930     02 26 66 F0 | 	shl	local01, #2
11934     06 00 00 FF 
11938     70 E4 85 F1 | 	sub	objptr, ##3184
1193c     F2 26 02 F1 | 	add	local01, objptr
11940     A7 12 02 F6 | 	mov	arg01, fp
11944     4A 00 00 FF 
11948     98 E4 85 F1 | 	sub	objptr, ##38040
1194c     74 B1 BF FD | 	call	#_converttoint
11950     10 26 06 F1 | 	add	local01, #16
11954     13 FB 61 FC | 	wrlong	result1, local01
11958                 | ' fortop+=1
11958                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11958                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11958                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11958                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11958     4A 00 00 FF 
1195c     80 E4 05 F1 | 	add	objptr, ##38016
11960     F2 12 02 FB | 	rdlong	arg01, objptr
11964     09 27 02 F6 | 	mov	local01, arg01
11968     01 26 66 F0 | 	shl	local01, #1
1196c     09 27 02 F1 | 	add	local01, arg01
11970     02 26 66 F0 | 	shl	local01, #2
11974     03 00 00 FF 
11978     04 E4 85 F1 | 	sub	objptr, ##1540
1197c     F2 26 02 F1 | 	add	local01, objptr
11980     08 26 06 F1 | 	add	local01, #8
11984     13 27 02 FB | 	rdlong	local01, local01
11988     FE 27 0E F2 | 	cmp	local01, #510 wz
1198c     47 00 00 FF 
11990     7C E4 85 F1 | 	sub	objptr, ##36476
11994     70 00 90 5D |  if_ne	jmp	#LR__1450
11998     50 00 00 FF 
1199c     08 E5 05 F1 | 	add	objptr, ##41224
119a0     F2 12 02 FB | 	rdlong	arg01, objptr
119a4     09 27 02 F6 | 	mov	local01, arg01
119a8     02 26 66 F0 | 	shl	local01, #2
119ac     09 27 02 F1 | 	add	local01, arg01
119b0     02 26 66 F0 | 	shl	local01, #2
119b4     06 00 00 FF 
119b8     70 E4 85 F1 | 	sub	objptr, ##3184
119bc     F2 26 02 F1 | 	add	local01, objptr
119c0     06 00 00 FF 
119c4     20 E4 05 F1 | 	add	objptr, ##3104
119c8     F2 12 02 FB | 	rdlong	arg01, objptr
119cc     13 13 62 FC | 	wrlong	arg01, local01
119d0     50 E4 05 F1 | 	add	objptr, #80
119d4     F2 12 02 FB | 	rdlong	arg01, objptr
119d8     09 27 02 F6 | 	mov	local01, arg01
119dc     02 26 66 F0 | 	shl	local01, #2
119e0     09 27 02 F1 | 	add	local01, arg01
119e4     02 26 66 F0 | 	shl	local01, #2
119e8     06 00 00 FF 
119ec     70 E4 85 F1 | 	sub	objptr, ##3184
119f0     F2 26 02 F1 | 	add	local01, objptr
119f4     04 26 06 F1 | 	add	local01, #4
119f8     13 01 68 FC | 	wrlong	#0, local01
119fc     4A 00 00 FF 
11a00     98 E4 85 F1 | 	sub	objptr, ##38040
11a04     78 00 90 FD | 	jmp	#LR__1451
11a08                 | LR__1450
11a08     50 00 00 FF 
11a0c     08 E5 05 F1 | 	add	objptr, ##41224
11a10     F2 12 02 FB | 	rdlong	arg01, objptr
11a14     09 27 02 F6 | 	mov	local01, arg01
11a18     02 26 66 F0 | 	shl	local01, #2
11a1c     09 27 02 F1 | 	add	local01, arg01
11a20     02 26 66 F0 | 	shl	local01, #2
11a24     06 00 00 FF 
11a28     70 E4 85 F1 | 	sub	objptr, ##3184
11a2c     F2 26 02 F1 | 	add	local01, objptr
11a30     06 00 00 FF 
11a34     28 E4 05 F1 | 	add	objptr, ##3112
11a38     F2 12 02 FB | 	rdlong	arg01, objptr
11a3c     13 13 62 FC | 	wrlong	arg01, local01
11a40     48 E4 05 F1 | 	add	objptr, #72
11a44     F2 12 02 FB | 	rdlong	arg01, objptr
11a48     09 27 02 F6 | 	mov	local01, arg01
11a4c     02 26 66 F0 | 	shl	local01, #2
11a50     09 27 02 F1 | 	add	local01, arg01
11a54     02 26 66 F0 | 	shl	local01, #2
11a58     06 00 00 FF 
11a5c     70 E4 85 F1 | 	sub	objptr, ##3184
11a60     F2 26 02 F1 | 	add	local01, objptr
11a64     18 E4 85 F1 | 	sub	objptr, #24
11a68     F2 12 02 FB | 	rdlong	arg01, objptr
11a6c     4A 00 00 FF 
11a70     80 E4 85 F1 | 	sub	objptr, ##38016
11a74     01 12 06 F1 | 	add	arg01, #1
11a78     04 26 06 F1 | 	add	local01, #4
11a7c     13 13 62 FC | 	wrlong	arg01, local01
11a80                 | LR__1451
11a80     A7 F0 03 F6 | 	mov	ptra, fp
11a84     B2 00 A0 FD | 	call	#popregs_
11a88                 | _do_for_ret
11a88     2D 00 64 FD | 	ret
11a8c                 | 
11a8c                 | ' 
11a8c                 | ' '-------------------- frame
11a8c                 | ' 
11a8c                 | ' sub do_frame
11a8c                 | _do_frame
11a8c     03 4A 05 F6 | 	mov	COUNT_, #3
11a90     A8 00 A0 FD | 	call	#pushregs_
11a94     30 F0 07 F1 | 	add	ptra, #48
11a98     44 AE BF FD | 	call	#_pop
11a9c     FD 16 02 F6 | 	mov	arg03, result1
11aa0     FE 14 02 F6 | 	mov	arg02, result2
11aa4     FF 1A 02 F6 | 	mov	arg05, result3
11aa8     24 4E 05 F1 | 	add	fp, #36
11aac     A7 16 62 FC | 	wrlong	arg03, fp
11ab0     04 4E 05 F1 | 	add	fp, #4
11ab4     A7 14 62 FC | 	wrlong	arg02, fp
11ab8     04 4E 05 F1 | 	add	fp, #4
11abc     A7 1A 62 FC | 	wrlong	arg05, fp
11ac0     2C 4E 85 F1 | 	sub	fp, #44
11ac4     18 AE BF FD | 	call	#_pop
11ac8     FD 16 02 F6 | 	mov	arg03, result1
11acc     FE 14 02 F6 | 	mov	arg02, result2
11ad0     FF 1A 02 F6 | 	mov	arg05, result3
11ad4     18 4E 05 F1 | 	add	fp, #24
11ad8     A7 16 62 FC | 	wrlong	arg03, fp
11adc     04 4E 05 F1 | 	add	fp, #4
11ae0     A7 14 62 FC | 	wrlong	arg02, fp
11ae4     04 4E 05 F1 | 	add	fp, #4
11ae8     A7 1A 62 FC | 	wrlong	arg05, fp
11aec     20 4E 85 F1 | 	sub	fp, #32
11af0     EC AD BF FD | 	call	#_pop
11af4     FD 16 02 F6 | 	mov	arg03, result1
11af8     FE 14 02 F6 | 	mov	arg02, result2
11afc     FF 1A 02 F6 | 	mov	arg05, result3
11b00     0C 4E 05 F1 | 	add	fp, #12
11b04     A7 16 62 FC | 	wrlong	arg03, fp
11b08     04 4E 05 F1 | 	add	fp, #4
11b0c     A7 14 62 FC | 	wrlong	arg02, fp
11b10     04 4E 05 F1 | 	add	fp, #4
11b14     A7 1A 62 FC | 	wrlong	arg05, fp
11b18     14 4E 85 F1 | 	sub	fp, #20
11b1c     C0 AD BF FD | 	call	#_pop
11b20     FF 16 02 F6 | 	mov	arg03, result3
11b24     A7 FA 61 FC | 	wrlong	result1, fp
11b28     04 4E 05 F1 | 	add	fp, #4
11b2c     A7 FC 61 FC | 	wrlong	result2, fp
11b30     04 4E 05 F1 | 	add	fp, #4
11b34     A7 16 62 FC | 	wrlong	arg03, fp
11b38     08 4E 85 F1 | 	sub	fp, #8
11b3c     A7 12 02 F6 | 	mov	arg01, fp
11b40     80 AF BF FD | 	call	#_converttoint
11b44     FD 26 02 F6 | 	mov	local01, result1
11b48     0C 4E 05 F1 | 	add	fp, #12
11b4c     A7 12 02 F6 | 	mov	arg01, fp
11b50     0C 4E 85 F1 | 	sub	fp, #12
11b54     6C AF BF FD | 	call	#_converttoint
11b58     FD 28 02 F6 | 	mov	local02, result1
11b5c     18 4E 05 F1 | 	add	fp, #24
11b60     A7 12 02 F6 | 	mov	arg01, fp
11b64     18 4E 85 F1 | 	sub	fp, #24
11b68     58 AF BF FD | 	call	#_converttoint
11b6c     FD 2A 02 F6 | 	mov	local03, result1
11b70     24 4E 05 F1 | 	add	fp, #36
11b74     A7 12 02 F6 | 	mov	arg01, fp
11b78     24 4E 85 F1 | 	sub	fp, #36
11b7c     44 AF BF FD | 	call	#_converttoint
11b80     FD 18 02 F6 | 	mov	arg04, result1
11b84     37 00 00 FF 
11b88     28 E4 05 F1 | 	add	objptr, ##28200
11b8c     F2 1A 02 FB | 	rdlong	arg05, objptr
11b90     37 00 00 FF 
11b94     28 E4 85 F1 | 	sub	objptr, ##28200
11b98     13 13 02 F6 | 	mov	arg01, local01
11b9c     14 15 02 F6 | 	mov	arg02, local02
11ba0     15 17 02 F6 | 	mov	arg03, local03
11ba4     68 F4 B0 FD | 	call	#_hg010b_spin2_frame
11ba8     A7 F0 03 F6 | 	mov	ptra, fp
11bac     B2 00 A0 FD | 	call	#popregs_
11bb0                 | _do_frame_ret
11bb0     2D 00 64 FD | 	ret
11bb4                 | 
11bb4                 | ' 
11bb4                 | ' '-------------------- framebuf
11bb4                 | ' 
11bb4                 | ' sub do_framebuf
11bb4                 | _do_framebuf
11bb4     00 4A 05 F6 | 	mov	COUNT_, #0
11bb8     A8 00 A0 FD | 	call	#pushregs_
11bbc     0C F0 07 F1 | 	add	ptra, #12
11bc0     08 4E 05 F1 | 	add	fp, #8
11bc4     A7 3A 68 FC | 	wrlong	#29, fp
11bc8     F2 12 02 FB | 	rdlong	arg01, objptr
11bcc     08 4E 85 F1 | 	sub	fp, #8
11bd0     A7 12 62 FC | 	wrlong	arg01, fp
11bd4     A7 12 02 F6 | 	mov	arg01, fp
11bd8     9C AD BF FD | 	call	#_push
11bdc     A7 F0 03 F6 | 	mov	ptra, fp
11be0     B2 00 A0 FD | 	call	#popregs_
11be4                 | _do_framebuf_ret
11be4     2D 00 64 FD | 	ret
11be8                 | 
11be8                 | ' '-------------------- fre
11be8                 | ' 
11be8                 | ' sub do_fre
11be8                 | _do_fre
11be8     01 4A 05 F6 | 	mov	COUNT_, #1
11bec     A8 00 A0 FD | 	call	#pushregs_
11bf0     0C F0 07 F1 | 	add	ptra, #12
11bf4     51 00 00 FF 
11bf8     AC E5 05 F1 | 	add	objptr, ##41900
11bfc     F2 12 02 FB | 	rdlong	arg01, objptr
11c00     0E 00 00 FF 
11c04     50 E5 85 F1 | 	sub	objptr, ##7504
11c08     F2 26 02 FB | 	rdlong	local01, objptr
11c0c     13 13 82 F1 | 	sub	arg01, local01
11c10     0E 00 00 FF 
11c14     C4 E5 05 F1 | 	add	objptr, ##7620
11c18     F2 12 62 FC | 	wrlong	arg01, objptr
11c1c     08 4E 05 F1 | 	add	fp, #8
11c20     A7 3A 68 FC | 	wrlong	#29, fp
11c24     08 4E 85 F1 | 	sub	fp, #8
11c28     F2 26 02 FB | 	rdlong	local01, objptr
11c2c     52 00 00 FF 
11c30     20 E4 85 F1 | 	sub	objptr, ##42016
11c34     A7 26 62 FC | 	wrlong	local01, fp
11c38     A7 12 02 F6 | 	mov	arg01, fp
11c3c     38 AD BF FD | 	call	#_push
11c40     A7 F0 03 F6 | 	mov	ptra, fp
11c44     B2 00 A0 FD | 	call	#popregs_
11c48                 | _do_fre_ret
11c48     2D 00 64 FD | 	ret
11c4c                 | 
11c4c                 | ' 
11c4c                 | ' '-------------------- get
11c4c                 | ' 
11c4c                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11c4c                 | _do_get
11c4c     09 4A 05 F6 | 	mov	COUNT_, #9
11c50     A8 00 A0 FD | 	call	#pushregs_
11c54     40 F0 07 F1 | 	add	ptra, #64
11c58     4A 00 00 FF 
11c5c     80 E4 05 F1 | 	add	objptr, ##38016
11c60     F2 1A 02 FB | 	rdlong	arg05, objptr
11c64     0D 19 02 F6 | 	mov	arg04, arg05
11c68     01 18 66 F0 | 	shl	arg04, #1
11c6c     0D 19 02 F1 | 	add	arg04, arg05
11c70     02 18 66 F0 | 	shl	arg04, #2
11c74     03 00 00 FF 
11c78     04 E4 85 F1 | 	sub	objptr, ##1540
11c7c     F2 18 02 F1 | 	add	arg04, objptr
11c80     0C 1B 02 FB | 	rdlong	arg05, arg04
11c84     A7 1A 62 FC | 	wrlong	arg05, fp
11c88                 | ' 
11c88                 | ' numpar=compiledline(lineptr_e).result.uresult
11c88                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11c88     04 1A 0E F2 | 	cmp	arg05, #4 wz
11c8c     47 00 00 FF 
11c90     7C E4 85 F1 | 	sub	objptr, ##36476
11c94     48 00 90 5D |  if_ne	jmp	#LR__1460
11c98     44 AC BF FD | 	call	#_pop
11c9c     FF 1A 02 F6 | 	mov	arg05, result3
11ca0     1C 4E 05 F1 | 	add	fp, #28
11ca4     A7 FA 61 FC | 	wrlong	result1, fp
11ca8     04 4E 05 F1 | 	add	fp, #4
11cac     A7 FC 61 FC | 	wrlong	result2, fp
11cb0     04 4E 05 F1 | 	add	fp, #4
11cb4     A7 1A 62 FC | 	wrlong	arg05, fp
11cb8     08 4E 85 F1 | 	sub	fp, #8
11cbc     A7 12 02 F6 | 	mov	arg01, fp
11cc0     1C 4E 85 F1 | 	sub	fp, #28
11cc4     FC AD BF FD | 	call	#_converttoint
11cc8     52 00 00 FF 
11ccc     1C E4 05 F1 | 	add	objptr, ##42012
11cd0     F2 FA 61 FC | 	wrlong	result1, objptr
11cd4     52 00 00 FF 
11cd8     1C E4 85 F1 | 	sub	objptr, ##42012
11cdc     18 00 90 FD | 	jmp	#LR__1461
11ce0                 | LR__1460
11ce0     52 00 00 FF 
11ce4     1C E4 05 F1 | 	add	objptr, ##42012
11ce8     FF FF FF FF 
11cec     F2 FE 6B FC | 	wrlong	##-1, objptr
11cf0     52 00 00 FF 
11cf4     1C E4 85 F1 | 	sub	objptr, ##42012
11cf8                 | LR__1461
11cf8                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11cf8     A7 16 02 FB | 	rdlong	arg03, fp
11cfc     03 16 56 F2 | 	cmps	arg03, #3 wc
11d00     40 00 90 CD |  if_b	jmp	#LR__1462
11d04     D8 AB BF FD | 	call	#_pop
11d08     FF 16 02 F6 | 	mov	arg03, result3
11d0c     1C 4E 05 F1 | 	add	fp, #28
11d10     A7 FA 61 FC | 	wrlong	result1, fp
11d14     04 4E 05 F1 | 	add	fp, #4
11d18     A7 FC 61 FC | 	wrlong	result2, fp
11d1c     04 4E 05 F1 | 	add	fp, #4
11d20     A7 16 62 FC | 	wrlong	arg03, fp
11d24     08 4E 85 F1 | 	sub	fp, #8
11d28     A7 12 02 F6 | 	mov	arg01, fp
11d2c     1C 4E 85 F1 | 	sub	fp, #28
11d30     90 AD BF FD | 	call	#_converttoint
11d34     08 4E 05 F1 | 	add	fp, #8
11d38     A7 FA 61 FC | 	wrlong	result1, fp
11d3c     08 4E 85 F1 | 	sub	fp, #8
11d40     0C 00 90 FD | 	jmp	#LR__1463
11d44                 | LR__1462
11d44     08 4E 05 F1 | 	add	fp, #8
11d48     A7 02 68 FC | 	wrlong	#1, fp
11d4c     08 4E 85 F1 | 	sub	fp, #8
11d50                 | LR__1463
11d50                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
11d50     A7 16 02 FB | 	rdlong	arg03, fp
11d54     02 16 56 F2 | 	cmps	arg03, #2 wc
11d58     3C 00 90 CD |  if_b	jmp	#LR__1464
11d5c     80 AB BF FD | 	call	#_pop
11d60     FF 16 02 F6 | 	mov	arg03, result3
11d64     1C 4E 05 F1 | 	add	fp, #28
11d68     A7 FA 61 FC | 	wrlong	result1, fp
11d6c     04 4E 05 F1 | 	add	fp, #4
11d70     A7 FC 61 FC | 	wrlong	result2, fp
11d74     04 4E 05 F1 | 	add	fp, #4
11d78     A7 16 62 FC | 	wrlong	arg03, fp
11d7c     08 4E 85 F1 | 	sub	fp, #8
11d80     A7 12 02 F6 | 	mov	arg01, fp
11d84     1C 4E 85 F1 | 	sub	fp, #28
11d88     38 AD BF FD | 	call	#_converttoint
11d8c     0C 4E 05 F1 | 	add	fp, #12
11d90     A7 FA 61 FC | 	wrlong	result1, fp
11d94     0C 4E 85 F1 | 	sub	fp, #12
11d98                 | LR__1464
11d98     44 AB BF FD | 	call	#_pop
11d9c     FF 16 02 F6 | 	mov	arg03, result3
11da0     1C 4E 05 F1 | 	add	fp, #28
11da4     A7 FA 61 FC | 	wrlong	result1, fp
11da8     04 4E 05 F1 | 	add	fp, #4
11dac     A7 FC 61 FC | 	wrlong	result2, fp
11db0     04 4E 05 F1 | 	add	fp, #4
11db4     A7 16 62 FC | 	wrlong	arg03, fp
11db8     08 4E 85 F1 | 	sub	fp, #8
11dbc     A7 12 02 F6 | 	mov	arg01, fp
11dc0     1C 4E 85 F1 | 	sub	fp, #28
11dc4     FC AC BF FD | 	call	#_converttoint
11dc8     04 4E 05 F1 | 	add	fp, #4
11dcc     A7 FA 61 FC | 	wrlong	result1, fp
11dd0     10 4E 05 F1 | 	add	fp, #16
11dd4     A7 16 02 FB | 	rdlong	arg03, fp
11dd8     14 4E 85 F1 | 	sub	fp, #20
11ddc     02 16 66 F0 | 	shl	arg03, #2
11de0     50 00 00 FF 
11de4     C4 E4 05 F1 | 	add	objptr, ##41156
11de8     F2 26 02 F6 | 	mov	local01, objptr
11dec     F2 16 02 F1 | 	add	arg03, objptr
11df0     0B 01 68 FC | 	wrlong	#0, arg03
11df4                 | ' t1=pop() : channel=converttoint(t1)
11df4                 | ' getres(j)=0
11df4                 | ' if pos>=0 then
11df4     01 00 00 FF 
11df8     58 E5 05 F1 | 	add	objptr, ##856
11dfc     F2 28 02 FB | 	rdlong	local02, objptr
11e00     52 00 00 FF 
11e04     1C E4 85 F1 | 	sub	objptr, ##42012
11e08     00 28 56 F2 | 	cmps	local02, #0 wc
11e0c     F0 01 90 CD |  if_b	jmp	#LR__1471
11e10                 | '   for i=0 to  amount/1024
11e10     10 4E 05 F1 | 	add	fp, #16
11e14     A7 00 68 FC | 	wrlong	#0, fp
11e18     08 4E 85 F1 | 	sub	fp, #8
11e1c     A7 2A 02 FB | 	rdlong	local03, fp
11e20     08 4E 85 F1 | 	sub	fp, #8
11e24     15 2D 52 F6 | 	abs	local04, local03 wc
11e28     0A 2C 46 F0 | 	shr	local04, #10
11e2c     16 2D 82 F6 | 	negc	local04, local04
11e30     01 2C 06 F1 | 	add	local04, #1
11e34                 | LR__1465
11e34     10 4E 05 F1 | 	add	fp, #16
11e38     A7 2A 02 FB | 	rdlong	local03, fp
11e3c     10 4E 85 F1 | 	sub	fp, #16
11e40     16 2B 52 F2 | 	cmps	local03, local04 wc
11e44     9C 03 90 3D |  if_ae	jmp	#LR__1479
11e48                 | '     get #channel,pos+1,block(0),amount,r
11e48     04 4E 05 F1 | 	add	fp, #4
11e4c     A7 12 02 FB | 	rdlong	arg01, fp
11e50     52 00 00 FF 
11e54     1C E4 05 F1 | 	add	objptr, ##42012
11e58     F2 14 02 FB | 	rdlong	arg02, objptr
11e5c     01 14 06 F1 | 	add	arg02, #1
11e60     03 00 00 FF 
11e64     68 E5 85 F1 | 	sub	objptr, ##1896
11e68     F2 16 02 F6 | 	mov	arg03, objptr
11e6c     4E 00 00 FF 
11e70     B4 E4 85 F1 | 	sub	objptr, ##40116
11e74     04 4E 05 F1 | 	add	fp, #4
11e78     A7 18 02 FB | 	rdlong	arg04, fp
11e7c     08 4E 85 F1 | 	sub	fp, #8
11e80     01 1A 06 F6 | 	mov	arg05, #1
11e84     7C 1F B1 FD | 	call	#__system___basic_get
11e88     18 4E 05 F1 | 	add	fp, #24
11e8c     A7 FA 61 FC | 	wrlong	result1, fp
11e90                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
11e90     0C 4E 85 F1 | 	sub	fp, #12
11e94     A7 28 02 FB | 	rdlong	local02, fp
11e98     0C 4E 85 F1 | 	sub	fp, #12
11e9c     00 04 00 FF 
11ea0     00 28 56 F2 | 	cmps	local02, ##524288 wc
11ea4     7C 00 90 3D |  if_ae	jmp	#LR__1467
11ea8     14 4E 05 F1 | 	add	fp, #20
11eac     A7 00 68 FC | 	wrlong	#0, fp
11eb0     04 4E 05 F1 | 	add	fp, #4
11eb4     A7 2E 02 FB | 	rdlong	local05, fp
11eb8     18 4E 85 F1 | 	sub	fp, #24
11ebc                 | LR__1466
11ebc     14 4E 05 F1 | 	add	fp, #20
11ec0     A7 28 02 FB | 	rdlong	local02, fp
11ec4     14 4E 85 F1 | 	sub	fp, #20
11ec8     17 29 52 F2 | 	cmps	local02, local05 wc
11ecc     D8 00 90 3D |  if_ae	jmp	#LR__1470
11ed0     0C 4E 05 F1 | 	add	fp, #12
11ed4     A7 12 02 FB | 	rdlong	arg01, fp
11ed8     04 4E 05 F1 | 	add	fp, #4
11edc     A7 2A 02 FB | 	rdlong	local03, fp
11ee0     0A 2A 66 F0 | 	shl	local03, #10
11ee4     15 13 02 F1 | 	add	arg01, local03
11ee8     04 4E 05 F1 | 	add	fp, #4
11eec     A7 2A 02 FB | 	rdlong	local03, fp
11ef0     15 13 02 F1 | 	add	arg01, local03
11ef4     4E 00 00 FF 
11ef8     B4 E4 05 F1 | 	add	objptr, ##40116
11efc     F2 2A 02 F1 | 	add	local03, objptr
11f00     15 15 C2 FA | 	rdbyte	arg02, local03
11f04     09 15 42 FC | 	wrbyte	arg02, arg01
11f08     4E 00 00 FF 
11f0c     B4 E4 85 F1 | 	sub	objptr, ##40116
11f10     A7 2A 02 FB | 	rdlong	local03, fp
11f14     01 2A 06 F1 | 	add	local03, #1
11f18     A7 2A 62 FC | 	wrlong	local03, fp
11f1c     14 4E 85 F1 | 	sub	fp, #20
11f20     98 FF 9F FD | 	jmp	#LR__1466
11f24                 | LR__1467
11f24     14 4E 05 F1 | 	add	fp, #20
11f28     A7 00 68 FC | 	wrlong	#0, fp
11f2c     04 4E 05 F1 | 	add	fp, #4
11f30     A7 30 02 FB | 	rdlong	local06, fp
11f34     18 4E 85 F1 | 	sub	fp, #24
11f38                 | LR__1468
11f38     14 4E 05 F1 | 	add	fp, #20
11f3c     A7 28 02 FB | 	rdlong	local02, fp
11f40     14 4E 85 F1 | 	sub	fp, #20
11f44     18 29 52 F2 | 	cmps	local02, local06 wc
11f48     5C 00 90 3D |  if_ae	jmp	#LR__1469
11f4c     0C 4E 05 F1 | 	add	fp, #12
11f50     A7 12 02 FB | 	rdlong	arg01, fp
11f54     04 4E 05 F1 | 	add	fp, #4
11f58     A7 2E 02 FB | 	rdlong	local05, fp
11f5c     0A 2E 66 F0 | 	shl	local05, #10
11f60     17 13 02 F1 | 	add	arg01, local05
11f64     04 4E 05 F1 | 	add	fp, #4
11f68     A7 2E 02 FB | 	rdlong	local05, fp
11f6c     17 13 02 F1 | 	add	arg01, local05
11f70     14 4E 85 F1 | 	sub	fp, #20
11f74     4E 00 00 FF 
11f78     B4 E4 05 F1 | 	add	objptr, ##40116
11f7c     F2 2E 02 F1 | 	add	local05, objptr
11f80     17 15 C2 FA | 	rdbyte	arg02, local05
11f84     4E 00 00 FF 
11f88     B4 E4 85 F1 | 	sub	objptr, ##40116
11f8c     90 D8 B0 FD | 	call	#_pspoke
11f90     14 4E 05 F1 | 	add	fp, #20
11f94     A7 2E 02 FB | 	rdlong	local05, fp
11f98     01 2E 06 F1 | 	add	local05, #1
11f9c     A7 2E 62 FC | 	wrlong	local05, fp
11fa0     14 4E 85 F1 | 	sub	fp, #20
11fa4     90 FF 9F FD | 	jmp	#LR__1468
11fa8                 | LR__1469
11fa8                 | LR__1470
11fa8     14 4E 05 F1 | 	add	fp, #20
11fac     A7 30 02 FB | 	rdlong	local06, fp
11fb0     18 2B 02 F6 | 	mov	local03, local06
11fb4     02 2A 66 F0 | 	shl	local03, #2
11fb8     50 00 00 FF 
11fbc     C4 E4 05 F1 | 	add	objptr, ##41156
11fc0     F2 2A 02 F1 | 	add	local03, objptr
11fc4     02 30 66 F0 | 	shl	local06, #2
11fc8     F2 30 02 F1 | 	add	local06, objptr
11fcc     18 31 02 FB | 	rdlong	local06, local06
11fd0     04 4E 05 F1 | 	add	fp, #4
11fd4     A7 2E 02 FB | 	rdlong	local05, fp
11fd8     17 31 02 F1 | 	add	local06, local05
11fdc     15 31 62 FC | 	wrlong	local06, local03
11fe0     08 4E 85 F1 | 	sub	fp, #8
11fe4     A7 30 02 FB | 	rdlong	local06, fp
11fe8     01 30 06 F1 | 	add	local06, #1
11fec     A7 30 62 FC | 	wrlong	local06, fp
11ff0     10 4E 85 F1 | 	sub	fp, #16
11ff4     50 00 00 FF 
11ff8     C4 E4 85 F1 | 	sub	objptr, ##41156
11ffc     34 FE 9F FD | 	jmp	#LR__1465
12000                 | LR__1471
12000                 | '   for i=0 to  amount/1024
12000     10 4E 05 F1 | 	add	fp, #16
12004     A7 00 68 FC | 	wrlong	#0, fp
12008     08 4E 85 F1 | 	sub	fp, #8
1200c     A7 2A 02 FB | 	rdlong	local03, fp
12010     08 4E 85 F1 | 	sub	fp, #8
12014     15 33 52 F6 | 	abs	local07, local03 wc
12018     0A 32 46 F0 | 	shr	local07, #10
1201c     19 33 82 F6 | 	negc	local07, local07
12020     01 32 06 F1 | 	add	local07, #1
12024                 | LR__1472
12024     10 4E 05 F1 | 	add	fp, #16
12028     A7 2A 02 FB | 	rdlong	local03, fp
1202c     10 4E 85 F1 | 	sub	fp, #16
12030     19 2B 52 F2 | 	cmps	local03, local07 wc
12034     AC 01 90 3D |  if_ae	jmp	#LR__1478
12038                 | '     get #channel,,block(0),amount,r
12038     04 4E 05 F1 | 	add	fp, #4
1203c     A7 12 02 FB | 	rdlong	arg01, fp
12040     4E 00 00 FF 
12044     B4 E4 05 F1 | 	add	objptr, ##40116
12048     F2 16 02 F6 | 	mov	arg03, objptr
1204c     4E 00 00 FF 
12050     B4 E4 85 F1 | 	sub	objptr, ##40116
12054     04 4E 05 F1 | 	add	fp, #4
12058     A7 18 02 FB | 	rdlong	arg04, fp
1205c     08 4E 85 F1 | 	sub	fp, #8
12060     00 14 06 F6 | 	mov	arg02, #0
12064     01 1A 06 F6 | 	mov	arg05, #1
12068     98 1D B1 FD | 	call	#__system___basic_get
1206c     18 4E 05 F1 | 	add	fp, #24
12070     A7 FA 61 FC | 	wrlong	result1, fp
12074                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12074     0C 4E 85 F1 | 	sub	fp, #12
12078     A7 28 02 FB | 	rdlong	local02, fp
1207c     0C 4E 85 F1 | 	sub	fp, #12
12080     00 04 00 FF 
12084     00 28 56 F2 | 	cmps	local02, ##524288 wc
12088     7C 00 90 3D |  if_ae	jmp	#LR__1474
1208c     14 4E 05 F1 | 	add	fp, #20
12090     A7 00 68 FC | 	wrlong	#0, fp
12094     04 4E 05 F1 | 	add	fp, #4
12098     A7 34 02 FB | 	rdlong	local08, fp
1209c     18 4E 85 F1 | 	sub	fp, #24
120a0                 | LR__1473
120a0     14 4E 05 F1 | 	add	fp, #20
120a4     A7 28 02 FB | 	rdlong	local02, fp
120a8     14 4E 85 F1 | 	sub	fp, #20
120ac     1A 29 52 F2 | 	cmps	local02, local08 wc
120b0     D8 00 90 3D |  if_ae	jmp	#LR__1477
120b4     0C 4E 05 F1 | 	add	fp, #12
120b8     A7 12 02 FB | 	rdlong	arg01, fp
120bc     04 4E 05 F1 | 	add	fp, #4
120c0     A7 30 02 FB | 	rdlong	local06, fp
120c4     0A 30 66 F0 | 	shl	local06, #10
120c8     18 13 02 F1 | 	add	arg01, local06
120cc     04 4E 05 F1 | 	add	fp, #4
120d0     A7 30 02 FB | 	rdlong	local06, fp
120d4     18 13 02 F1 | 	add	arg01, local06
120d8     4E 00 00 FF 
120dc     B4 E4 05 F1 | 	add	objptr, ##40116
120e0     F2 30 02 F1 | 	add	local06, objptr
120e4     18 15 C2 FA | 	rdbyte	arg02, local06
120e8     09 15 42 FC | 	wrbyte	arg02, arg01
120ec     4E 00 00 FF 
120f0     B4 E4 85 F1 | 	sub	objptr, ##40116
120f4     A7 30 02 FB | 	rdlong	local06, fp
120f8     01 30 06 F1 | 	add	local06, #1
120fc     A7 30 62 FC | 	wrlong	local06, fp
12100     14 4E 85 F1 | 	sub	fp, #20
12104     98 FF 9F FD | 	jmp	#LR__1473
12108                 | LR__1474
12108     14 4E 05 F1 | 	add	fp, #20
1210c     A7 00 68 FC | 	wrlong	#0, fp
12110     04 4E 05 F1 | 	add	fp, #4
12114     A7 36 02 FB | 	rdlong	local09, fp
12118     18 4E 85 F1 | 	sub	fp, #24
1211c                 | LR__1475
1211c     14 4E 05 F1 | 	add	fp, #20
12120     A7 28 02 FB | 	rdlong	local02, fp
12124     14 4E 85 F1 | 	sub	fp, #20
12128     1B 29 52 F2 | 	cmps	local02, local09 wc
1212c     5C 00 90 3D |  if_ae	jmp	#LR__1476
12130     0C 4E 05 F1 | 	add	fp, #12
12134     A7 12 02 FB | 	rdlong	arg01, fp
12138     04 4E 05 F1 | 	add	fp, #4
1213c     A7 34 02 FB | 	rdlong	local08, fp
12140     0A 34 66 F0 | 	shl	local08, #10
12144     1A 13 02 F1 | 	add	arg01, local08
12148     04 4E 05 F1 | 	add	fp, #4
1214c     A7 34 02 FB | 	rdlong	local08, fp
12150     1A 13 02 F1 | 	add	arg01, local08
12154     14 4E 85 F1 | 	sub	fp, #20
12158     4E 00 00 FF 
1215c     B4 E4 05 F1 | 	add	objptr, ##40116
12160     F2 34 02 F1 | 	add	local08, objptr
12164     1A 15 C2 FA | 	rdbyte	arg02, local08
12168     4E 00 00 FF 
1216c     B4 E4 85 F1 | 	sub	objptr, ##40116
12170     AC D6 B0 FD | 	call	#_pspoke
12174     14 4E 05 F1 | 	add	fp, #20
12178     A7 34 02 FB | 	rdlong	local08, fp
1217c     01 34 06 F1 | 	add	local08, #1
12180     A7 34 62 FC | 	wrlong	local08, fp
12184     14 4E 85 F1 | 	sub	fp, #20
12188     90 FF 9F FD | 	jmp	#LR__1475
1218c                 | LR__1476
1218c                 | LR__1477
1218c     14 4E 05 F1 | 	add	fp, #20
12190     A7 36 02 FB | 	rdlong	local09, fp
12194     1B 31 02 F6 | 	mov	local06, local09
12198     02 30 66 F0 | 	shl	local06, #2
1219c     50 00 00 FF 
121a0     C4 E4 05 F1 | 	add	objptr, ##41156
121a4     F2 30 02 F1 | 	add	local06, objptr
121a8     02 36 66 F0 | 	shl	local09, #2
121ac     F2 36 02 F1 | 	add	local09, objptr
121b0     1B 37 02 FB | 	rdlong	local09, local09
121b4     04 4E 05 F1 | 	add	fp, #4
121b8     A7 34 02 FB | 	rdlong	local08, fp
121bc     1A 37 02 F1 | 	add	local09, local08
121c0     18 37 62 FC | 	wrlong	local09, local06
121c4     08 4E 85 F1 | 	sub	fp, #8
121c8     A7 36 02 FB | 	rdlong	local09, fp
121cc     01 36 06 F1 | 	add	local09, #1
121d0     A7 36 62 FC | 	wrlong	local09, fp
121d4     10 4E 85 F1 | 	sub	fp, #16
121d8     50 00 00 FF 
121dc     C4 E4 85 F1 | 	sub	objptr, ##41156
121e0     40 FE 9F FD | 	jmp	#LR__1472
121e4                 | LR__1478
121e4                 | LR__1479
121e4     A7 F0 03 F6 | 	mov	ptra, fp
121e8     B2 00 A0 FD | 	call	#popregs_
121ec                 | _do_get_ret
121ec     2D 00 64 FD | 	ret
121f0                 | 
121f0                 | ' 
121f0                 | ' '-------------------- getenvsustain
121f0                 | ' 
121f0                 | ' sub do_getenvsustain
121f0                 | _do_getenvsustain
121f0     01 4A 05 F6 | 	mov	COUNT_, #1
121f4     A8 00 A0 FD | 	call	#pushregs_
121f8     10 F0 07 F1 | 	add	ptra, #16
121fc     4A 00 00 FF 
12200     80 E4 05 F1 | 	add	objptr, ##38016
12204     F2 26 02 FB | 	rdlong	local01, objptr
12208     13 17 02 F6 | 	mov	arg03, local01
1220c     01 16 66 F0 | 	shl	arg03, #1
12210     13 17 02 F1 | 	add	arg03, local01
12214     02 16 66 F0 | 	shl	arg03, #2
12218     03 00 00 FF 
1221c     04 E4 85 F1 | 	sub	objptr, ##1540
12220     F2 16 02 F1 | 	add	arg03, objptr
12224     0B 17 02 FB | 	rdlong	arg03, arg03
12228     0C 4E 05 F1 | 	add	fp, #12
1222c     A7 16 62 FC | 	wrlong	arg03, fp
12230                 | ' 
12230                 | ' numpar=compiledline(lineptr_e).result.uresult
12230                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12230     0C 4E 85 F1 | 	sub	fp, #12
12234     02 16 16 F2 | 	cmp	arg03, #2 wc
12238     47 00 00 FF 
1223c     7C E4 85 F1 | 	sub	objptr, ##36476
12240     0C 4E 05 C1 |  if_b	add	fp, #12
12244     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12248     0C 4E 85 C1 |  if_b	sub	fp, #12
1224c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1480
12250     00 12 06 F6 | 	mov	arg01, #0
12254     64 6A B1 FD | 	call	#__system___getiolock_0558
12258     FD 12 02 F6 | 	mov	arg01, result1
1225c     34 0D B1 FD | 	call	#__system___lockmem
12260     99 01 00 FF 
12264     B4 15 06 F6 | 	mov	arg02, ##@LR__5661
12268     00 12 06 F6 | 	mov	arg01, #0
1226c     00 16 06 F6 | 	mov	arg03, #0
12270     14 1A B1 FD | 	call	#__system___basic_print_string
12274     00 12 06 F6 | 	mov	arg01, #0
12278     40 6A B1 FD | 	call	#__system___getiolock_0558
1227c     FD 00 68 FC | 	wrlong	#0, result1
12280     27 12 06 F6 | 	mov	arg01, #39
12284     00 14 06 F6 | 	mov	arg02, #0
12288     78 D3 B0 FD | 	call	#_printerror
1228c     64 00 90 FD | 	jmp	#LR__1481
12290                 | LR__1480
12290     4C A6 BF FD | 	call	#_pop
12294     FD 26 02 F6 | 	mov	local01, result1
12298     FE 16 02 F6 | 	mov	arg03, result2
1229c     A7 26 62 FC | 	wrlong	local01, fp
122a0     04 4E 05 F1 | 	add	fp, #4
122a4     A7 16 62 FC | 	wrlong	arg03, fp
122a8     04 4E 05 F1 | 	add	fp, #4
122ac     A7 FE 61 FC | 	wrlong	result3, fp
122b0     08 4E 85 F1 | 	sub	fp, #8
122b4     A7 12 02 F6 | 	mov	arg01, fp
122b8     08 A8 BF FD | 	call	#_converttoint
122bc     FD 26 02 F6 | 	mov	local01, result1
122c0     01 26 66 F0 | 	shl	local01, #1
122c4     51 00 00 FF 
122c8     C8 E5 05 F1 | 	add	objptr, ##41928
122cc     F2 26 02 F1 | 	add	local01, objptr
122d0     13 27 E2 FA | 	rdword	local01, local01
122d4     A7 26 62 FC | 	wrlong	local01, fp
122d8     08 4E 05 F1 | 	add	fp, #8
122dc     A7 38 68 FC | 	wrlong	#28, fp
122e0     08 4E 85 F1 | 	sub	fp, #8
122e4     A7 12 02 F6 | 	mov	arg01, fp
122e8     51 00 00 FF 
122ec     C8 E5 85 F1 | 	sub	objptr, ##41928
122f0     84 A6 BF FD | 	call	#_push
122f4                 | LR__1481
122f4     A7 F0 03 F6 | 	mov	ptra, fp
122f8     B2 00 A0 FD | 	call	#popregs_
122fc                 | _do_getenvsustain_ret
122fc     2D 00 64 FD | 	ret
12300                 | 
12300                 | ' 
12300                 | ' '-------------------- getnotevalue
12300                 | ' 
12300                 | ' sub do_getnotevalue
12300                 | _do_getnotevalue
12300     01 4A 05 F6 | 	mov	COUNT_, #1
12304     A8 00 A0 FD | 	call	#pushregs_
12308     1C F0 07 F1 | 	add	ptra, #28
1230c     D0 A5 BF FD | 	call	#_pop
12310     FF 14 02 F6 | 	mov	arg02, result3
12314     10 4E 05 F1 | 	add	fp, #16
12318     A7 FA 61 FC | 	wrlong	result1, fp
1231c     04 4E 05 F1 | 	add	fp, #4
12320     A7 FC 61 FC | 	wrlong	result2, fp
12324     04 4E 05 F1 | 	add	fp, #4
12328     A7 14 62 FC | 	wrlong	arg02, fp
1232c     08 4E 85 F1 | 	sub	fp, #8
12330     A7 12 02 F6 | 	mov	arg01, fp
12334     10 4E 85 F1 | 	sub	fp, #16
12338     88 A7 BF FD | 	call	#_converttoint
1233c     FD 14 52 F6 | 	abs	arg02, result1 wc
12340     0C 14 16 FD | 	qdiv	arg02, #12
12344     0C 4E 05 F1 | 	add	fp, #12
12348     A7 FA 61 FC | 	wrlong	result1, fp
1234c     14 00 00 FF 
12350     D8 E4 05 F1 | 	add	objptr, ##10456
12354     08 4E 85 F1 | 	sub	fp, #8
12358     19 14 62 FD | 	getqy	arg02
1235c     0A 15 82 F6 | 	negc	arg02, arg02
12360     02 14 66 F0 | 	shl	arg02, #2
12364     F2 14 02 F1 | 	add	arg02, objptr
12368     0A 15 02 FB | 	rdlong	arg02, arg02
1236c     A7 14 62 FC | 	wrlong	arg02, fp
12370     08 4E 05 F1 | 	add	fp, #8
12374     A7 14 02 FB | 	rdlong	arg02, fp
12378     0A 15 52 F6 | 	abs	arg02, arg02 wc
1237c     0C 14 16 FD | 	qdiv	arg02, #12
12380     0C 4E 85 F1 | 	sub	fp, #12
12384     14 00 00 FF 
12388     D8 E4 85 F1 | 	sub	objptr, ##10456
1238c     18 14 62 FD | 	getqx	arg02
12390     0A 13 82 F6 | 	negc	arg01, arg02
12394     09 13 52 F6 | 	abs	arg01, arg01 wc
12398     1F 26 C6 C9 |  if_b	decod	local01, #31
1239c     00 26 06 36 |  if_ae	mov	local01, #0
123a0     64 36 B1 FD | 	call	#__system___float_fromuns
123a4     13 FB 61 F5 | 	xor	result1, local01
123a8     08 4E 05 F1 | 	add	fp, #8
123ac     A7 FA 61 FC | 	wrlong	result1, fp
123b0     FD 14 02 F6 | 	mov	arg02, result1
123b4     08 4E 85 F1 | 	sub	fp, #8
123b8     1E 12 C6 F9 | 	decod	arg01, #30
123bc     54 49 B1 FD | 	call	#__system____builtin_powf
123c0     FD 12 02 F6 | 	mov	arg01, result1
123c4     04 4E 05 F1 | 	add	fp, #4
123c8     A7 14 02 FB | 	rdlong	arg02, fp
123cc     04 4E 85 F1 | 	sub	fp, #4
123d0     38 3A B1 FD | 	call	#__system___float_mul
123d4     A7 FA 61 FC | 	wrlong	result1, fp
123d8     10 4E 05 F1 | 	add	fp, #16
123dc     A7 FA 61 FC | 	wrlong	result1, fp
123e0     08 4E 05 F1 | 	add	fp, #8
123e4     A7 3C 68 FC | 	wrlong	#30, fp
123e8     08 4E 85 F1 | 	sub	fp, #8
123ec     A7 12 02 F6 | 	mov	arg01, fp
123f0     10 4E 85 F1 | 	sub	fp, #16
123f4     80 A5 BF FD | 	call	#_push
123f8     A7 F0 03 F6 | 	mov	ptra, fp
123fc     B2 00 A0 FD | 	call	#popregs_
12400                 | _do_getnotevalue_ret
12400     2D 00 64 FD | 	ret
12404                 | 
12404                 | ' 
12404                 | ' '-------------------- getpixel
12404                 | ' 
12404                 | ' sub do_getpixel
12404                 | _do_getpixel
12404     00 4A 05 F6 | 	mov	COUNT_, #0
12408     A8 00 A0 FD | 	call	#pushregs_
1240c     24 F0 07 F1 | 	add	ptra, #36
12410     4A 00 00 FF 
12414     80 E4 05 F1 | 	add	objptr, ##38016
12418     F2 16 02 FB | 	rdlong	arg03, objptr
1241c     0B 15 02 F6 | 	mov	arg02, arg03
12420     01 14 66 F0 | 	shl	arg02, #1
12424     0B 15 02 F1 | 	add	arg02, arg03
12428     02 14 66 F0 | 	shl	arg02, #2
1242c     03 00 00 FF 
12430     04 E4 85 F1 | 	sub	objptr, ##1540
12434     F2 14 02 F1 | 	add	arg02, objptr
12438     0A 17 02 FB | 	rdlong	arg03, arg02
1243c     18 4E 05 F1 | 	add	fp, #24
12440     A7 16 62 FC | 	wrlong	arg03, fp
12444                 | ' 
12444                 | ' numpar=compiledline(lineptr_e).result.uresult
12444                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12444     18 4E 85 F1 | 	sub	fp, #24
12448     02 16 0E F2 | 	cmp	arg03, #2 wz
1244c     47 00 00 FF 
12450     7C E4 85 F1 | 	sub	objptr, ##36476
12454     40 00 90 AD |  if_e	jmp	#LR__1490
12458     00 12 06 F6 | 	mov	arg01, #0
1245c     5C 68 B1 FD | 	call	#__system___getiolock_0558
12460     FD 12 02 F6 | 	mov	arg01, result1
12464     2C 0B B1 FD | 	call	#__system___lockmem
12468     99 01 00 FF 
1246c     C4 15 06 F6 | 	mov	arg02, ##@LR__5662
12470     00 12 06 F6 | 	mov	arg01, #0
12474     00 16 06 F6 | 	mov	arg03, #0
12478     0C 18 B1 FD | 	call	#__system___basic_print_string
1247c     00 12 06 F6 | 	mov	arg01, #0
12480     38 68 B1 FD | 	call	#__system___getiolock_0558
12484     FD 00 68 FC | 	wrlong	#0, result1
12488     27 12 06 F6 | 	mov	arg01, #39
1248c     00 14 06 F6 | 	mov	arg02, #0
12490     70 D1 B0 FD | 	call	#_printerror
12494     B4 00 90 FD | 	jmp	#LR__1491
12498                 | LR__1490
12498     44 A4 BF FD | 	call	#_pop
1249c     FD 16 02 F6 | 	mov	arg03, result1
124a0     FE 14 02 F6 | 	mov	arg02, result2
124a4     FF 12 02 F6 | 	mov	arg01, result3
124a8     0C 4E 05 F1 | 	add	fp, #12
124ac     A7 16 62 FC | 	wrlong	arg03, fp
124b0     04 4E 05 F1 | 	add	fp, #4
124b4     A7 14 62 FC | 	wrlong	arg02, fp
124b8     04 4E 05 F1 | 	add	fp, #4
124bc     A7 12 62 FC | 	wrlong	arg01, fp
124c0     14 4E 85 F1 | 	sub	fp, #20
124c4     18 A4 BF FD | 	call	#_pop
124c8     FF 16 02 F6 | 	mov	arg03, result3
124cc     A7 FA 61 FC | 	wrlong	result1, fp
124d0     04 4E 05 F1 | 	add	fp, #4
124d4     A7 FC 61 FC | 	wrlong	result2, fp
124d8     04 4E 05 F1 | 	add	fp, #4
124dc     A7 16 62 FC | 	wrlong	arg03, fp
124e0     08 4E 85 F1 | 	sub	fp, #8
124e4     A7 12 02 F6 | 	mov	arg01, fp
124e8     D8 A5 BF FD | 	call	#_converttoint
124ec     1C 4E 05 F1 | 	add	fp, #28
124f0     A7 FA 61 FC | 	wrlong	result1, fp
124f4     10 4E 85 F1 | 	sub	fp, #16
124f8     A7 12 02 F6 | 	mov	arg01, fp
124fc     0C 4E 85 F1 | 	sub	fp, #12
12500     C0 A5 BF FD | 	call	#_converttoint
12504     FD 16 02 F6 | 	mov	arg03, result1
12508     20 4E 05 F1 | 	add	fp, #32
1250c     A7 16 62 FC | 	wrlong	arg03, fp
12510     F2 12 02 FB | 	rdlong	arg01, objptr
12514     04 4E 85 F1 | 	sub	fp, #4
12518     A7 FE 01 FB | 	rdlong	result3, fp
1251c     FF 12 02 F1 | 	add	arg01, result3
12520     1C 4E 85 F1 | 	sub	fp, #28
12524     0A 16 66 F0 | 	shl	arg03, #10
12528     0B 13 02 F1 | 	add	arg01, arg03
1252c     38 D3 B0 FD | 	call	#_pspeek
12530     FD FA E1 F8 | 	getbyte	result1, result1, #0
12534     A7 FA 61 FC | 	wrlong	result1, fp
12538     08 4E 05 F1 | 	add	fp, #8
1253c     A7 3A 68 FC | 	wrlong	#29, fp
12540     08 4E 85 F1 | 	sub	fp, #8
12544     A7 12 02 F6 | 	mov	arg01, fp
12548     2C A4 BF FD | 	call	#_push
1254c                 | LR__1491
1254c     A7 F0 03 F6 | 	mov	ptra, fp
12550     B2 00 A0 FD | 	call	#popregs_
12554                 | _do_getpixel_ret
12554     2D 00 64 FD | 	ret
12558                 | 
12558                 | ' 
12558                 | ' '-------------------- gettime
12558                 | ' 
12558                 | ' sub do_gettime
12558                 | _do_gettime
12558     02 4A 05 F6 | 	mov	COUNT_, #2
1255c     A8 00 A0 FD | 	call	#pushregs_
12560     14 F0 07 F1 | 	add	ptra, #20
12564                 | ' 
12564                 | ' const asm 
12564     1A 26 72 FD | 	getct	local01 wc
12568     1A 28 62 FD | 	getct	local02
1256c                 | ' return hi1, lo1
1256c     14 FD 01 F6 | 	mov	result2, local02
12570     A7 26 62 FC | 	wrlong	local01, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 FC 61 FC | 	wrlong	result2, fp
1257c     0C 4E 05 F1 | 	add	fp, #12
12580     A7 3A 68 FC | 	wrlong	#29, fp
12584     0C 4E 85 F1 | 	sub	fp, #12
12588     A7 12 02 FB | 	rdlong	arg01, fp
1258c     04 4E 05 F1 | 	add	fp, #4
12590     A7 12 62 FC | 	wrlong	arg01, fp
12594     08 4E 85 F1 | 	sub	fp, #8
12598     A7 12 02 FB | 	rdlong	arg01, fp
1259c     0C 4E 05 F1 | 	add	fp, #12
125a0     A7 12 62 FC | 	wrlong	arg01, fp
125a4     04 4E 85 F1 | 	sub	fp, #4
125a8     A7 12 02 F6 | 	mov	arg01, fp
125ac     08 4E 85 F1 | 	sub	fp, #8
125b0     C4 A3 BF FD | 	call	#_push
125b4     A7 F0 03 F6 | 	mov	ptra, fp
125b8     B2 00 A0 FD | 	call	#popregs_
125bc                 | _do_gettime_ret
125bc     2D 00 64 FD | 	ret
125c0                 | 
125c0                 | ' 
125c0                 | ' '-------------------- gosub
125c0                 | ' 
125c0                 | ' sub do_gosub()
125c0                 | _do_gosub
125c0     50 00 00 FF 
125c4     0C E5 05 F1 | 	add	objptr, ##41228
125c8     F2 00 02 FB | 	rdlong	_var01, objptr
125cc     01 00 06 F1 | 	add	_var01, #1
125d0     F2 00 62 FC | 	wrlong	_var01, objptr
125d4                 | ' gosubtop+=1
125d4                 | ' if compiledline(lineptr_e+1).result_type=token_end then
125d4     06 00 00 FF 
125d8     8C E4 85 F1 | 	sub	objptr, ##3212
125dc     F2 00 02 FB | 	rdlong	_var01, objptr
125e0     01 00 06 F1 | 	add	_var01, #1
125e4     00 03 02 F6 | 	mov	_var02, _var01
125e8     01 02 66 F0 | 	shl	_var02, #1
125ec     00 03 02 F1 | 	add	_var02, _var01
125f0     02 02 66 F0 | 	shl	_var02, #2
125f4     03 00 00 FF 
125f8     04 E4 85 F1 | 	sub	objptr, ##1540
125fc     F2 02 02 F1 | 	add	_var02, objptr
12600     08 02 06 F1 | 	add	_var02, #8
12604     01 03 02 FB | 	rdlong	_var02, _var02
12608     FE 03 0E F2 | 	cmp	_var02, #510 wz
1260c     47 00 00 FF 
12610     7C E4 85 F1 | 	sub	objptr, ##36476
12614     58 00 90 5D |  if_ne	jmp	#LR__1500
12618     50 00 00 FF 
1261c     0C E5 05 F1 | 	add	objptr, ##41228
12620     F2 02 02 FB | 	rdlong	_var02, objptr
12624     03 02 66 F0 | 	shl	_var02, #3
12628     03 00 00 FF 
1262c     60 E5 85 F1 | 	sub	objptr, ##1888
12630     F2 02 02 F1 | 	add	_var02, objptr
12634     03 00 00 FF 
12638     0C E5 05 F1 | 	add	objptr, ##1804
1263c     F2 00 02 FB | 	rdlong	_var01, objptr
12640     01 01 62 FC | 	wrlong	_var01, _var02
12644     54 E4 05 F1 | 	add	objptr, #84
12648     F2 02 02 FB | 	rdlong	_var02, objptr
1264c     03 02 66 F0 | 	shl	_var02, #3
12650     03 00 00 FF 
12654     60 E5 85 F1 | 	sub	objptr, ##1888
12658     F2 02 02 F1 | 	add	_var02, objptr
1265c     04 02 06 F1 | 	add	_var02, #4
12660     01 01 68 FC | 	wrlong	#0, _var02
12664     4C 00 00 FF 
12668     AC E5 85 F1 | 	sub	objptr, ##39340
1266c     64 00 90 FD | 	jmp	#LR__1501
12670                 | LR__1500
12670     50 00 00 FF 
12674     0C E5 05 F1 | 	add	objptr, ##41228
12678     F2 02 02 FB | 	rdlong	_var02, objptr
1267c     03 02 66 F0 | 	shl	_var02, #3
12680     03 00 00 FF 
12684     60 E5 85 F1 | 	sub	objptr, ##1888
12688     F2 02 02 F1 | 	add	_var02, objptr
1268c     03 00 00 FF 
12690     14 E5 05 F1 | 	add	objptr, ##1812
12694     F2 00 02 FB | 	rdlong	_var01, objptr
12698     01 01 62 FC | 	wrlong	_var01, _var02
1269c     4C E4 05 F1 | 	add	objptr, #76
126a0     F2 02 02 FB | 	rdlong	_var02, objptr
126a4     03 02 66 F0 | 	shl	_var02, #3
126a8     03 00 00 FF 
126ac     60 E5 85 F1 | 	sub	objptr, ##1888
126b0     F2 02 02 F1 | 	add	_var02, objptr
126b4     02 00 00 FF 
126b8     2C E5 85 F1 | 	sub	objptr, ##1324
126bc     F2 00 02 FB | 	rdlong	_var01, objptr
126c0     4A 00 00 FF 
126c4     80 E4 85 F1 | 	sub	objptr, ##38016
126c8     02 00 06 F1 | 	add	_var01, #2
126cc     04 02 06 F1 | 	add	_var02, #4
126d0     01 01 62 FC | 	wrlong	_var01, _var02
126d4                 | LR__1501
126d4                 | _do_gosub_ret
126d4     2D 00 64 FD | 	ret
126d8                 | 
126d8                 | ' 
126d8                 | ' '--------------------- goto
126d8                 | ' 
126d8                 | ' '------- fast goto
126d8                 | ' 
126d8                 | ' sub do_fast_goto
126d8                 | _do_fast_goto
126d8     02 4A 05 F6 | 	mov	COUNT_, #2
126dc     A8 00 A0 FD | 	call	#pushregs_
126e0                 | _do_fast_goto_enter
126e0     4A 00 00 FF 
126e4     80 E4 05 F1 | 	add	objptr, ##38016
126e8     F2 12 02 FB | 	rdlong	arg01, objptr
126ec     09 27 02 F6 | 	mov	local01, arg01
126f0     01 26 66 F0 | 	shl	local01, #1
126f4     09 27 02 F1 | 	add	local01, arg01
126f8     02 26 66 F0 | 	shl	local01, #2
126fc     03 00 00 FF 
12700     04 E4 85 F1 | 	sub	objptr, ##1540
12704     F2 26 02 F1 | 	add	local01, objptr
12708     13 29 02 FB | 	rdlong	local02, local01
1270c     14 13 02 F6 | 	mov	arg01, local02
12710     47 00 00 FF 
12714     7C E4 85 F1 | 	sub	objptr, ##36476
12718     A4 D1 B0 FD | 	call	#_pslpeek
1271c     FD 12 02 F6 | 	mov	arg01, result1
12720                 | ' 
12720                 | ' testptr=compiledline(lineptr_e).result.uresult
12720                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
12720                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
12720     4A 00 00 FF 
12724     80 E4 05 F1 | 	add	objptr, ##38016
12728     F2 FA 01 FB | 	rdlong	result1, objptr
1272c     FD 26 02 F6 | 	mov	local01, result1
12730     01 26 66 F0 | 	shl	local01, #1
12734     FD 26 02 F1 | 	add	local01, result1
12738     02 26 66 F0 | 	shl	local01, #2
1273c     03 00 00 FF 
12740     04 E4 85 F1 | 	sub	objptr, ##1540
12744     F2 26 02 F1 | 	add	local01, objptr
12748     04 26 06 F1 | 	add	local01, #4
1274c     13 27 02 FB | 	rdlong	local01, local01
12750     13 13 0A F2 | 	cmp	arg01, local01 wz
12754     47 00 00 FF 
12758     7C E4 85 F1 | 	sub	objptr, ##36476
1275c     58 00 90 5D |  if_ne	jmp	#LR__1510
12760     50 00 00 FF 
12764     B8 E4 05 F1 | 	add	objptr, ##41144
12768     F2 28 62 FC | 	wrlong	local02, objptr
1276c     06 00 00 FF 
12770     3C E4 85 F1 | 	sub	objptr, ##3132
12774     F2 28 02 FB | 	rdlong	local02, objptr
12778     01 28 86 F1 | 	sub	local02, #1
1277c     04 E4 05 F1 | 	add	objptr, #4
12780     F2 28 62 FC | 	wrlong	local02, objptr
12784                 | '   runptr=testptr
12784                 | '   lineptr_e=lineptr-1
12784                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12784     06 00 00 FF 
12788     84 E4 05 F1 | 	add	objptr, ##3204
1278c     F2 28 02 FB | 	rdlong	local02, objptr
12790     50 00 00 FF 
12794     04 E5 85 F1 | 	sub	objptr, ##41220
12798     FF FF 3F FF 
1279c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
127a0     50 00 00 AF 
127a4     04 E5 05 A1 |  if_e	add	objptr, ##41220
127a8     F2 00 68 AC |  if_e	wrlong	#0, objptr
127ac     50 00 00 AF 
127b0     04 E5 85 A1 |  if_e	sub	objptr, ##41220
127b4     04 00 90 FD | 	jmp	#LR__1511
127b8                 | LR__1510
127b8     0C 00 B0 FD | 	call	#_do_find_goto
127bc                 | LR__1511
127bc     A7 F0 03 F6 | 	mov	ptra, fp
127c0     B2 00 A0 FD | 	call	#popregs_
127c4                 | _do_fast_goto_ret
127c4     2D 00 64 FD | 	ret
127c8                 | 
127c8                 | ' 
127c8                 | ' '------- find goto  
127c8                 | ' 
127c8                 | ' sub do_find_goto
127c8                 | _do_find_goto
127c8     03 4A 05 F6 | 	mov	COUNT_, #3
127cc     A8 00 A0 FD | 	call	#pushregs_
127d0     24 F0 07 F1 | 	add	ptra, #36
127d4                 | _do_find_goto_enter
127d4     4A 00 00 FF 
127d8     80 E4 05 F1 | 	add	objptr, ##38016
127dc     F2 26 02 FB | 	rdlong	local01, objptr
127e0     13 29 02 F6 | 	mov	local02, local01
127e4     01 28 66 F0 | 	shl	local02, #1
127e8     13 29 02 F1 | 	add	local02, local01
127ec     02 28 66 F0 | 	shl	local02, #2
127f0     03 00 00 FF 
127f4     04 E4 85 F1 | 	sub	objptr, ##1540
127f8     F2 28 02 F1 | 	add	local02, objptr
127fc     04 28 06 F1 | 	add	local02, #4
12800     14 29 02 FB | 	rdlong	local02, local02
12804     A7 28 62 FC | 	wrlong	local02, fp
12808     03 00 00 FF 
1280c     0C E4 05 F1 | 	add	objptr, ##1548
12810     F2 2A 02 FB | 	rdlong	local03, objptr
12814     4A 00 00 FF 
12818     88 E4 85 F1 | 	sub	objptr, ##38024
1281c     04 4E 05 F1 | 	add	fp, #4
12820     A7 2A 62 FC | 	wrlong	local03, fp
12824     04 4E 85 F1 | 	sub	fp, #4
12828                 | ' 
12828                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
12828                 | ' gotoptr=programstart
12828                 | ' do
12828                 | LR__1520
12828     0C 4E 05 F1 | 	add	fp, #12
1282c     A7 12 02 F6 | 	mov	arg01, fp
12830     08 4E 85 F1 | 	sub	fp, #8
12834     A7 14 02 FB | 	rdlong	arg02, fp
12838     04 4E 85 F1 | 	sub	fp, #4
1283c     18 16 06 F6 | 	mov	arg03, #24
12840     0B 00 00 FF 
12844     CC E4 05 F1 | 	add	objptr, ##5836
12848     08 FB B0 FD | 	call	#_psram_spin2_read1
1284c     0B 00 00 FF 
12850     CC E4 85 F1 | 	sub	objptr, ##5836
12854                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12854                 | '   if gotoheader(0)<>$FFFFFFFF then
12854     0C 4E 05 F1 | 	add	fp, #12
12858     A7 2A 02 FB | 	rdlong	local03, fp
1285c     0C 4E 85 F1 | 	sub	fp, #12
12860     FF FF 7F FF 
12864     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
12868     24 00 90 AD |  if_e	jmp	#LR__1521
1286c     04 4E 05 F1 | 	add	fp, #4
12870     A7 2A 02 FB | 	rdlong	local03, fp
12874     04 4E 05 F1 | 	add	fp, #4
12878     A7 2A 62 FC | 	wrlong	local03, fp
1287c     18 4E 05 F1 | 	add	fp, #24
12880     A7 2A 02 FB | 	rdlong	local03, fp
12884     1C 4E 85 F1 | 	sub	fp, #28
12888     A7 2A 62 FC | 	wrlong	local03, fp
1288c     04 4E 85 F1 | 	sub	fp, #4
12890                 | LR__1521
12890     20 4E 05 F1 | 	add	fp, #32
12894     A7 2A 02 FB | 	rdlong	local03, fp
12898     20 4E 85 F1 | 	sub	fp, #32
1289c     FF FF 3F FF 
128a0     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
128a4     0C 4E 05 51 |  if_ne	add	fp, #12
128a8     A7 26 02 5B |  if_ne	rdlong	local01, fp
128ac     0C 4E 85 51 |  if_ne	sub	fp, #12
128b0     FF FF 7F 5F 
128b4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
128b8     18 00 90 AD |  if_e	jmp	#LR__1522
128bc     0C 4E 05 F1 | 	add	fp, #12
128c0     A7 2A 02 FB | 	rdlong	local03, fp
128c4     0C 4E 85 F1 | 	sub	fp, #12
128c8     A7 28 02 FB | 	rdlong	local02, fp
128cc     14 2B 0A F2 | 	cmp	local03, local02 wz
128d0     54 FF 9F 5D |  if_ne	jmp	#LR__1520
128d4                 | LR__1522
128d4                 | ' 
128d4                 | ' if gotoheader(0)=gotoline then
128d4     0C 4E 05 F1 | 	add	fp, #12
128d8     A7 2A 02 FB | 	rdlong	local03, fp
128dc     0C 4E 85 F1 | 	sub	fp, #12
128e0     A7 26 02 FB | 	rdlong	local01, fp
128e4     13 2B 0A F2 | 	cmp	local03, local01 wz
128e8     D8 00 90 5D |  if_ne	jmp	#LR__1523
128ec     4A 00 00 FF 
128f0     80 E4 05 F1 | 	add	objptr, ##38016
128f4     F2 26 02 FB | 	rdlong	local01, objptr
128f8     13 29 02 F6 | 	mov	local02, local01
128fc     01 28 66 F0 | 	shl	local02, #1
12900     13 29 02 F1 | 	add	local02, local01
12904     02 28 66 F0 | 	shl	local02, #2
12908     03 00 00 FF 
1290c     04 E4 85 F1 | 	sub	objptr, ##1540
12910     F2 28 02 F1 | 	add	local02, objptr
12914     08 4E 05 F1 | 	add	fp, #8
12918     A7 2A 02 FB | 	rdlong	local03, fp
1291c     14 2B 62 FC | 	wrlong	local03, local02
12920     03 00 00 FF 
12924     04 E4 05 F1 | 	add	objptr, ##1540
12928     F2 26 02 FB | 	rdlong	local01, objptr
1292c     13 29 02 F6 | 	mov	local02, local01
12930     01 28 66 F0 | 	shl	local02, #1
12934     13 29 02 F1 | 	add	local02, local01
12938     02 28 66 F0 | 	shl	local02, #2
1293c     03 00 00 FF 
12940     04 E4 85 F1 | 	sub	objptr, ##1540
12944     F2 28 02 F1 | 	add	local02, objptr
12948     08 28 06 F1 | 	add	local02, #8
1294c     14 9D 68 FC | 	wrlong	#78, local02
12950     03 00 00 FF 
12954     04 E4 05 F1 | 	add	objptr, ##1540
12958     F2 28 02 FB | 	rdlong	local02, objptr
1295c     14 13 02 F6 | 	mov	arg01, local02
12960     01 12 66 F0 | 	shl	arg01, #1
12964     14 13 02 F1 | 	add	arg01, local02
12968     02 12 66 F0 | 	shl	arg01, #2
1296c     03 00 00 FF 
12970     04 E4 85 F1 | 	sub	objptr, ##1540
12974     F2 12 02 F1 | 	add	arg01, objptr
12978     09 00 00 FF 
1297c     44 E4 05 F1 | 	add	objptr, ##4676
12980     F2 14 02 FB | 	rdlong	arg02, objptr
12984     02 2A 06 F6 | 	mov	local03, #2
12988     14 2B 02 F1 | 	add	local03, local02
1298c     0B 00 00 FF 
12990     5C E4 85 F1 | 	sub	objptr, ##5724
12994     F2 16 02 FB | 	rdlong	arg03, objptr
12998     0B 2B 02 FD | 	qmul	local03, arg03
1299c     08 4E 85 F1 | 	sub	fp, #8
129a0     39 00 00 FF 
129a4     98 E5 85 F1 | 	sub	objptr, ##29592
129a8     18 2A 62 FD | 	getqx	local03
129ac     15 15 02 F1 | 	add	arg02, local03
129b0     3C FA B0 FD | 	call	#_psram_spin2_write
129b4     0B 00 00 FF 
129b8     CC E4 85 F1 | 	sub	objptr, ##5836
129bc     18 FD BF FD | 	call	#_do_fast_goto
129c0     0C 00 90 FD | 	jmp	#LR__1524
129c4                 | LR__1523
129c4     26 12 06 F6 | 	mov	arg01, #38
129c8     00 14 06 F6 | 	mov	arg02, #0
129cc     34 CC B0 FD | 	call	#_printerror
129d0                 | LR__1524
129d0     A7 F0 03 F6 | 	mov	ptra, fp
129d4     B2 00 A0 FD | 	call	#popregs_
129d8                 | _do_find_goto_ret
129d8     2D 00 64 FD | 	ret
129dc                 | 
129dc                 | ' 
129dc                 | ' '------- slow goto  
129dc                 | ' 
129dc                 | ' sub do_slow_goto
129dc                 | _do_slow_goto
129dc     02 4A 05 F6 | 	mov	COUNT_, #2
129e0     A8 00 A0 FD | 	call	#pushregs_
129e4     30 F0 07 F1 | 	add	ptra, #48
129e8     F4 9E BF FD | 	call	#_pop
129ec     FF 26 02 F6 | 	mov	local01, result3
129f0     24 4E 05 F1 | 	add	fp, #36
129f4     A7 FA 61 FC | 	wrlong	result1, fp
129f8     04 4E 05 F1 | 	add	fp, #4
129fc     A7 FC 61 FC | 	wrlong	result2, fp
12a00     04 4E 05 F1 | 	add	fp, #4
12a04     A7 26 62 FC | 	wrlong	local01, fp
12a08     08 4E 85 F1 | 	sub	fp, #8
12a0c     A7 12 02 F6 | 	mov	arg01, fp
12a10     24 4E 85 F1 | 	sub	fp, #36
12a14     AC A0 BF FD | 	call	#_converttoint
12a18     A7 FA 61 FC | 	wrlong	result1, fp
12a1c     4A 00 00 FF 
12a20     88 E4 05 F1 | 	add	objptr, ##38024
12a24     F2 28 02 FB | 	rdlong	local02, objptr
12a28     4A 00 00 FF 
12a2c     88 E4 85 F1 | 	sub	objptr, ##38024
12a30     04 4E 05 F1 | 	add	fp, #4
12a34     A7 28 62 FC | 	wrlong	local02, fp
12a38     04 4E 85 F1 | 	sub	fp, #4
12a3c                 | ' 
12a3c                 | ' t1=pop() : gotoline=converttoint(t1)
12a3c                 | ' gotoptr=programstart
12a3c                 | ' do
12a3c                 | LR__1530
12a3c     0C 4E 05 F1 | 	add	fp, #12
12a40     A7 12 02 F6 | 	mov	arg01, fp
12a44     08 4E 85 F1 | 	sub	fp, #8
12a48     A7 14 02 FB | 	rdlong	arg02, fp
12a4c     04 4E 85 F1 | 	sub	fp, #4
12a50     18 16 06 F6 | 	mov	arg03, #24
12a54     0B 00 00 FF 
12a58     CC E4 05 F1 | 	add	objptr, ##5836
12a5c     F4 F8 B0 FD | 	call	#_psram_spin2_read1
12a60     0B 00 00 FF 
12a64     CC E4 85 F1 | 	sub	objptr, ##5836
12a68                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12a68                 | '   if gotoheader(0)<>$FFFFFFFF then
12a68     0C 4E 05 F1 | 	add	fp, #12
12a6c     A7 28 02 FB | 	rdlong	local02, fp
12a70     0C 4E 85 F1 | 	sub	fp, #12
12a74     FF FF 7F FF 
12a78     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12a7c     24 00 90 AD |  if_e	jmp	#LR__1531
12a80     04 4E 05 F1 | 	add	fp, #4
12a84     A7 28 02 FB | 	rdlong	local02, fp
12a88     04 4E 05 F1 | 	add	fp, #4
12a8c     A7 28 62 FC | 	wrlong	local02, fp
12a90     18 4E 05 F1 | 	add	fp, #24
12a94     A7 28 02 FB | 	rdlong	local02, fp
12a98     1C 4E 85 F1 | 	sub	fp, #28
12a9c     A7 28 62 FC | 	wrlong	local02, fp
12aa0     04 4E 85 F1 | 	sub	fp, #4
12aa4                 | LR__1531
12aa4     20 4E 05 F1 | 	add	fp, #32
12aa8     A7 28 02 FB | 	rdlong	local02, fp
12aac     20 4E 85 F1 | 	sub	fp, #32
12ab0     FF FF 3F FF 
12ab4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12ab8     0C 4E 05 51 |  if_ne	add	fp, #12
12abc     A7 26 02 5B |  if_ne	rdlong	local01, fp
12ac0     0C 4E 85 51 |  if_ne	sub	fp, #12
12ac4     FF FF 7F 5F 
12ac8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12acc     18 00 90 AD |  if_e	jmp	#LR__1532
12ad0     0C 4E 05 F1 | 	add	fp, #12
12ad4     A7 28 02 FB | 	rdlong	local02, fp
12ad8     0C 4E 85 F1 | 	sub	fp, #12
12adc     A7 16 02 FB | 	rdlong	arg03, fp
12ae0     0B 29 0A F2 | 	cmp	local02, arg03 wz
12ae4     54 FF 9F 5D |  if_ne	jmp	#LR__1530
12ae8                 | LR__1532
12ae8                 | ' if gotoheader(0)=gotoline then  
12ae8     0C 4E 05 F1 | 	add	fp, #12
12aec     A7 28 02 FB | 	rdlong	local02, fp
12af0     0C 4E 85 F1 | 	sub	fp, #12
12af4     A7 26 02 FB | 	rdlong	local01, fp
12af8     13 29 0A F2 | 	cmp	local02, local01 wz
12afc     60 00 90 5D |  if_ne	jmp	#LR__1533
12b00     08 4E 05 F1 | 	add	fp, #8
12b04     A7 28 02 FB | 	rdlong	local02, fp
12b08     08 4E 85 F1 | 	sub	fp, #8
12b0c     50 00 00 FF 
12b10     B8 E4 05 F1 | 	add	objptr, ##41144
12b14     F2 28 62 FC | 	wrlong	local02, objptr
12b18     06 00 00 FF 
12b1c     3C E4 85 F1 | 	sub	objptr, ##3132
12b20     F2 28 02 FB | 	rdlong	local02, objptr
12b24     01 28 86 F1 | 	sub	local02, #1
12b28     04 E4 05 F1 | 	add	objptr, #4
12b2c     F2 28 62 FC | 	wrlong	local02, objptr
12b30                 | '    runptr=oldgotoptr
12b30                 | '    lineptr_e=lineptr-1
12b30                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12b30     06 00 00 FF 
12b34     84 E4 05 F1 | 	add	objptr, ##3204
12b38     F2 28 02 FB | 	rdlong	local02, objptr
12b3c     50 00 00 FF 
12b40     04 E5 85 F1 | 	sub	objptr, ##41220
12b44     FF FF 3F FF 
12b48     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12b4c     50 00 00 AF 
12b50     04 E5 05 A1 |  if_e	add	objptr, ##41220
12b54     F2 00 68 AC |  if_e	wrlong	#0, objptr
12b58     50 00 00 AF 
12b5c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12b60                 | LR__1533
12b60     A7 F0 03 F6 | 	mov	ptra, fp
12b64     B2 00 A0 FD | 	call	#popregs_
12b68                 | _do_slow_goto_ret
12b68     2D 00 64 FD | 	ret
12b6c                 | 
12b6c                 | ' 
12b6c                 | ' ' ----------------  hex$
12b6c                 | ' 
12b6c                 | ' sub do_hex
12b6c                 | _do_hex
12b6c     01 4A 05 F6 | 	mov	COUNT_, #1
12b70     A8 00 A0 FD | 	call	#pushregs_
12b74     18 F0 07 F1 | 	add	ptra, #24
12b78     4A 00 00 FF 
12b7c     80 E4 05 F1 | 	add	objptr, ##38016
12b80     F2 26 02 FB | 	rdlong	local01, objptr
12b84     13 17 02 F6 | 	mov	arg03, local01
12b88     01 16 66 F0 | 	shl	arg03, #1
12b8c     13 17 02 F1 | 	add	arg03, local01
12b90     02 16 66 F0 | 	shl	arg03, #2
12b94     03 00 00 FF 
12b98     04 E4 85 F1 | 	sub	objptr, ##1540
12b9c     F2 16 02 F1 | 	add	arg03, objptr
12ba0     0B 17 02 FB | 	rdlong	arg03, arg03
12ba4     0C 4E 05 F1 | 	add	fp, #12
12ba8     A7 16 62 FC | 	wrlong	arg03, fp
12bac                 | ' 
12bac                 | ' numpar=compiledline(lineptr_e).result.uresult
12bac                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12bac     0C 4E 85 F1 | 	sub	fp, #12
12bb0     03 16 16 F2 | 	cmp	arg03, #3 wc
12bb4     47 00 00 FF 
12bb8     7C E4 85 F1 | 	sub	objptr, ##36476
12bbc     0C 4E 05 C1 |  if_b	add	fp, #12
12bc0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12bc4     0C 4E 85 C1 |  if_b	sub	fp, #12
12bc8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1540
12bcc     00 12 06 F6 | 	mov	arg01, #0
12bd0     E8 60 B1 FD | 	call	#__system___getiolock_0558
12bd4     FD 12 02 F6 | 	mov	arg01, result1
12bd8     B8 03 B1 FD | 	call	#__system___lockmem
12bdc     99 01 00 FF 
12be0     CF 15 06 F6 | 	mov	arg02, ##@LR__5663
12be4     00 12 06 F6 | 	mov	arg01, #0
12be8     00 16 06 F6 | 	mov	arg03, #0
12bec     98 10 B1 FD | 	call	#__system___basic_print_string
12bf0     00 12 06 F6 | 	mov	arg01, #0
12bf4     C4 60 B1 FD | 	call	#__system___getiolock_0558
12bf8     FD 00 68 FC | 	wrlong	#0, result1
12bfc     27 12 06 F6 | 	mov	arg01, #39
12c00     00 14 06 F6 | 	mov	arg02, #0
12c04     FC C9 B0 FD | 	call	#_printerror
12c08     B8 00 90 FD | 	jmp	#LR__1543
12c0c                 | LR__1540
12c0c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12c0c     0C 4E 05 F1 | 	add	fp, #12
12c10     A7 26 02 FB | 	rdlong	local01, fp
12c14     0C 4E 85 F1 | 	sub	fp, #12
12c18     02 26 0E F2 | 	cmp	local01, #2 wz
12c1c     38 00 90 5D |  if_ne	jmp	#LR__1541
12c20     BC 9C BF FD | 	call	#_pop
12c24     FF 26 02 F6 | 	mov	local01, result3
12c28     A7 FA 61 FC | 	wrlong	result1, fp
12c2c     04 4E 05 F1 | 	add	fp, #4
12c30     A7 FC 61 FC | 	wrlong	result2, fp
12c34     04 4E 05 F1 | 	add	fp, #4
12c38     A7 26 62 FC | 	wrlong	local01, fp
12c3c     08 4E 85 F1 | 	sub	fp, #8
12c40     A7 12 02 F6 | 	mov	arg01, fp
12c44     7C 9E BF FD | 	call	#_converttoint
12c48     14 4E 05 F1 | 	add	fp, #20
12c4c     A7 FA 61 FC | 	wrlong	result1, fp
12c50     14 4E 85 F1 | 	sub	fp, #20
12c54     0C 00 90 FD | 	jmp	#LR__1542
12c58                 | LR__1541
12c58     14 4E 05 F1 | 	add	fp, #20
12c5c     A7 10 68 FC | 	wrlong	#8, fp
12c60     14 4E 85 F1 | 	sub	fp, #20
12c64                 | LR__1542
12c64     78 9C BF FD | 	call	#_pop
12c68     FF 26 02 F6 | 	mov	local01, result3
12c6c     A7 FA 61 FC | 	wrlong	result1, fp
12c70     04 4E 05 F1 | 	add	fp, #4
12c74     A7 FC 61 FC | 	wrlong	result2, fp
12c78     04 4E 05 F1 | 	add	fp, #4
12c7c     A7 26 62 FC | 	wrlong	local01, fp
12c80     08 4E 85 F1 | 	sub	fp, #8
12c84     A7 12 02 F6 | 	mov	arg01, fp
12c88     38 9E BF FD | 	call	#_converttoint
12c8c     10 4E 05 F1 | 	add	fp, #16
12c90     A7 FA 61 FC | 	wrlong	result1, fp
12c94     FD 12 02 F6 | 	mov	arg01, result1
12c98     04 4E 05 F1 | 	add	fp, #4
12c9c     A7 14 02 FB | 	rdlong	arg02, fp
12ca0     14 4E 85 F1 | 	sub	fp, #20
12ca4     10 16 06 F6 | 	mov	arg03, #16
12ca8     B8 25 B1 FD | 	call	#__system__Number_S
12cac     A7 FA 61 FC | 	wrlong	result1, fp
12cb0     08 4E 05 F1 | 	add	fp, #8
12cb4     A7 3E 68 FC | 	wrlong	#31, fp
12cb8     08 4E 85 F1 | 	sub	fp, #8
12cbc     A7 12 02 F6 | 	mov	arg01, fp
12cc0     B4 9C BF FD | 	call	#_push
12cc4                 | LR__1543
12cc4     A7 F0 03 F6 | 	mov	ptra, fp
12cc8     B2 00 A0 FD | 	call	#popregs_
12ccc                 | _do_hex_ret
12ccc     2D 00 64 FD | 	ret
12cd0                 | 
12cd0                 | ' 
12cd0                 | ' ' ----------------  if
12cd0                 | ' 
12cd0                 | ' sub do_if
12cd0                 | _do_if
12cd0     05 4A 05 F6 | 	mov	COUNT_, #5
12cd4     A8 00 A0 FD | 	call	#pushregs_
12cd8     04 9C BF FD | 	call	#_pop
12cdc     FD 26 0A F6 | 	mov	local01, result1 wz
12ce0     FE 28 02 F6 | 	mov	local02, result2
12ce4     FF 2A 02 F6 | 	mov	local03, result3
12ce8                 | ' t1=pop()
12ce8                 | ' ' if uresult=0, jump over else
12ce8                 | ' if t1.result.uresult = 0 then 
12ce8     BC 00 90 5D |  if_ne	jmp	#LR__1552
12cec                 | '   for i=lineptr_e to lineptr-1
12cec     4A 00 00 FF 
12cf0     80 E4 05 F1 | 	add	objptr, ##38016
12cf4     F2 2C 02 FB | 	rdlong	local04, objptr
12cf8     04 E4 85 F1 | 	sub	objptr, #4
12cfc     F2 2E 02 FB | 	rdlong	local05, objptr
12d00     4A 00 00 FF 
12d04     7C E4 85 F1 | 	sub	objptr, ##38012
12d08                 | LR__1550
12d08     17 2D 52 F2 | 	cmps	local04, local05 wc
12d0c     78 00 90 3D |  if_ae	jmp	#LR__1551
12d10     16 FF 01 F6 | 	mov	result3, local04
12d14     01 FE 65 F0 | 	shl	result3, #1
12d18     16 FF 01 F1 | 	add	result3, local04
12d1c     02 FE 65 F0 | 	shl	result3, #2
12d20     47 00 00 FF 
12d24     7C E4 05 F1 | 	add	objptr, ##36476
12d28     F2 FE 01 F1 | 	add	result3, objptr
12d2c     FF 26 02 FB | 	rdlong	local01, result3
12d30     04 FE 05 F1 | 	add	result3, #4
12d34     FF FC 01 FB | 	rdlong	result2, result3
12d38     16 FF 01 F6 | 	mov	result3, local04
12d3c     01 FE 65 F0 | 	shl	result3, #1
12d40     16 FF 01 F1 | 	add	result3, local04
12d44     02 FE 65 F0 | 	shl	result3, #2
12d48     F2 FE 01 F1 | 	add	result3, objptr
12d4c     08 FE 05 F1 | 	add	result3, #8
12d50     FF FE 01 FB | 	rdlong	result3, result3
12d54     FE 28 02 F6 | 	mov	local02, result2
12d58     FF 2A 02 F6 | 	mov	local03, result3
12d5c                 | '     t1=compiledline(i)
12d5c                 | '     if t1.result_type=token_else then lineptr_e=i : return
12d5c     5A 2A 0E F2 | 	cmp	local03, #90 wz
12d60     47 00 00 FF 
12d64     7C E4 85 F1 | 	sub	objptr, ##36476
12d68     4A 00 00 AF 
12d6c     80 E4 05 A1 |  if_e	add	objptr, ##38016
12d70     F2 2C 62 AC |  if_e	wrlong	local04, objptr
12d74     4A 00 00 AF 
12d78     80 E4 85 A1 |  if_e	sub	objptr, ##38016
12d7c     28 00 90 AD |  if_e	jmp	#LR__1553
12d80     01 2C 06 F1 | 	add	local04, #1
12d84     80 FF 9F FD | 	jmp	#LR__1550
12d88                 | LR__1551
12d88     4A 00 00 FF 
12d8c     7C E4 05 F1 | 	add	objptr, ##38012
12d90     F2 2E 02 FB | 	rdlong	local05, objptr
12d94     01 2E 86 F1 | 	sub	local05, #1
12d98     04 E4 05 F1 | 	add	objptr, #4
12d9c     F2 2E 62 FC | 	wrlong	local05, objptr
12da0     4A 00 00 FF 
12da4     80 E4 85 F1 | 	sub	objptr, ##38016
12da8                 | LR__1552
12da8                 | LR__1553
12da8     A7 F0 03 F6 | 	mov	ptra, fp
12dac     B2 00 A0 FD | 	call	#popregs_
12db0                 | _do_if_ret
12db0     2D 00 64 FD | 	ret
12db4                 | 
12db4                 | ' 
12db4                 | ' ' ----------------  inkey$
12db4                 | ' 
12db4                 | ' sub do_inkey
12db4                 | _do_inkey
12db4     02 4A 05 F6 | 	mov	COUNT_, #2
12db8     A8 00 A0 FD | 	call	#pushregs_
12dbc     0C F0 07 F1 | 	add	ptra, #12
12dc0     BC F9 B0 FD | 	call	#_usbnew_spin2_get_key
12dc4     45 00 00 FF 
12dc8     74 E4 05 F1 | 	add	objptr, ##35444
12dcc     F2 FA 61 FC | 	wrlong	result1, objptr
12dd0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12dd0     45 00 00 FF 
12dd4     74 E4 85 F1 | 	sub	objptr, ##35444
12dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
12ddc     94 00 90 AD |  if_e	jmp	#LR__1561
12de0     45 00 00 FF 
12de4     74 E4 05 F1 | 	add	objptr, ##35444
12de8     F2 1C 02 FB | 	rdlong	arg06, objptr
12dec     45 00 00 FF 
12df0     74 E4 85 F1 | 	sub	objptr, ##35444
12df4     00 00 40 FF 
12df8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12dfc     45 00 00 CF 
12e00     74 E4 05 C1 |  if_b	add	objptr, ##35444
12e04     F2 26 02 CB |  if_b	rdlong	local01, objptr
12e08     45 00 00 CF 
12e0c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12e10     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
12e14     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
12e18     58 00 90 3D |  if_ae	jmp	#LR__1561
12e1c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12e1c     50 00 00 FF 
12e20     14 E5 05 F1 | 	add	objptr, ##41236
12e24     F2 1C 02 FB | 	rdlong	arg06, objptr
12e28     50 00 00 FF 
12e2c     14 E5 85 F1 | 	sub	objptr, ##41236
12e30     01 1C 0E F2 | 	cmp	arg06, #1 wz
12e34     3C 00 90 5D |  if_ne	jmp	#LR__1560
12e38     51 00 00 FF 
12e3c     B8 E5 05 F1 | 	add	objptr, ##41912
12e40     F2 14 02 FB | 	rdlong	arg02, objptr
12e44     04 E4 85 F1 | 	sub	objptr, #4
12e48     F2 1A 02 FB | 	rdlong	arg05, objptr
12e4c     07 12 06 F6 | 	mov	arg01, #7
12e50     56 00 00 FF 
12e54     44 16 06 F6 | 	mov	arg03, ##44100
12e58     0C 18 C6 F9 | 	decod	arg04, #12
12e5c     01 1C 66 F6 | 	neg	arg06, #1
12e60     46 00 00 FF 
12e64     E8 E4 85 F1 | 	sub	objptr, ##36072
12e68     B8 FC B0 FD | 	call	#_audio096_spin2_play
12e6c     0B 00 00 FF 
12e70     CC E4 85 F1 | 	sub	objptr, ##5836
12e74                 | LR__1560
12e74                 | LR__1561
12e74                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12e74     45 00 00 FF 
12e78     74 E4 05 F1 | 	add	objptr, ##35444
12e7c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
12e80     45 00 00 FF 
12e84     74 E4 85 F1 | 	sub	objptr, ##35444
12e88     D4 01 90 AD |  if_e	jmp	#LR__1570
12e8c     45 00 00 FF 
12e90     74 E4 05 F1 | 	add	objptr, ##35444
12e94     F2 1C 02 FB | 	rdlong	arg06, objptr
12e98     45 00 00 FF 
12e9c     74 E4 85 F1 | 	sub	objptr, ##35444
12ea0     00 00 40 FF 
12ea4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12ea8     45 00 00 CF 
12eac     74 E4 05 C1 |  if_b	add	objptr, ##35444
12eb0     F2 26 02 CB |  if_b	rdlong	local01, objptr
12eb4     45 00 00 CF 
12eb8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12ebc     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
12ec0     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
12ec4     98 01 90 3D |  if_ae	jmp	#LR__1570
12ec8                 | '   if leds and 2 = 2 then 
12ec8     51 00 00 FF 
12ecc     F0 E5 05 F1 | 	add	objptr, ##41968
12ed0     F2 26 0A FB | 	rdlong	local01, objptr wz
12ed4     51 00 00 FF 
12ed8     F0 E5 85 F1 | 	sub	objptr, ##41968
12edc     58 01 90 AD |  if_e	jmp	#LR__1569
12ee0                 | '     if key>96 andalso key<123 then
12ee0     45 00 00 FF 
12ee4     74 E4 05 F1 | 	add	objptr, ##35444
12ee8     F2 26 02 FB | 	rdlong	local01, objptr
12eec     45 00 00 FF 
12ef0     74 E4 85 F1 | 	sub	objptr, ##35444
12ef4     61 26 16 F2 | 	cmp	local01, #97 wc
12ef8     3C 00 90 CD |  if_b	jmp	#LR__1562
12efc     45 00 00 FF 
12f00     74 E4 05 F1 | 	add	objptr, ##35444
12f04     F2 26 02 FB | 	rdlong	local01, objptr
12f08     45 00 00 FF 
12f0c     74 E4 85 F1 | 	sub	objptr, ##35444
12f10     7B 26 16 F2 | 	cmp	local01, #123 wc
12f14     20 00 90 3D |  if_ae	jmp	#LR__1562
12f18     45 00 00 FF 
12f1c     74 E4 05 F1 | 	add	objptr, ##35444
12f20     F2 26 02 FB | 	rdlong	local01, objptr
12f24     20 26 86 F1 | 	sub	local01, #32
12f28     F2 26 62 FC | 	wrlong	local01, objptr
12f2c     45 00 00 FF 
12f30     74 E4 85 F1 | 	sub	objptr, ##35444
12f34     00 01 90 FD | 	jmp	#LR__1568
12f38                 | LR__1562
12f38     45 00 00 FF 
12f3c     74 E4 05 F1 | 	add	objptr, ##35444
12f40     F2 26 02 FB | 	rdlong	local01, objptr
12f44     45 00 00 FF 
12f48     74 E4 85 F1 | 	sub	objptr, ##35444
12f4c     41 26 16 F2 | 	cmp	local01, #65 wc
12f50     3C 00 90 CD |  if_b	jmp	#LR__1563
12f54     45 00 00 FF 
12f58     74 E4 05 F1 | 	add	objptr, ##35444
12f5c     F2 26 02 FB | 	rdlong	local01, objptr
12f60     45 00 00 FF 
12f64     74 E4 85 F1 | 	sub	objptr, ##35444
12f68     5B 26 16 F2 | 	cmp	local01, #91 wc
12f6c     20 00 90 3D |  if_ae	jmp	#LR__1563
12f70     45 00 00 FF 
12f74     74 E4 05 F1 | 	add	objptr, ##35444
12f78     F2 26 02 FB | 	rdlong	local01, objptr
12f7c     20 26 06 F1 | 	add	local01, #32
12f80     F2 26 62 FC | 	wrlong	local01, objptr
12f84     45 00 00 FF 
12f88     74 E4 85 F1 | 	sub	objptr, ##35444
12f8c     A8 00 90 FD | 	jmp	#LR__1567
12f90                 | LR__1563
12f90     45 00 00 FF 
12f94     74 E4 05 F1 | 	add	objptr, ##35444
12f98     F2 26 02 FB | 	rdlong	local01, objptr
12f9c     45 00 00 FF 
12fa0     74 E4 85 F1 | 	sub	objptr, ##35444
12fa4     17 26 16 F2 | 	cmp	local01, #23 wc
12fa8     3C 00 90 CD |  if_b	jmp	#LR__1564
12fac     45 00 00 FF 
12fb0     74 E4 05 F1 | 	add	objptr, ##35444
12fb4     F2 26 02 FB | 	rdlong	local01, objptr
12fb8     45 00 00 FF 
12fbc     74 E4 85 F1 | 	sub	objptr, ##35444
12fc0     20 26 16 F2 | 	cmp	local01, #32 wc
12fc4     20 00 90 3D |  if_ae	jmp	#LR__1564
12fc8     45 00 00 FF 
12fcc     74 E4 05 F1 | 	add	objptr, ##35444
12fd0     F2 26 02 FB | 	rdlong	local01, objptr
12fd4     09 26 86 F1 | 	sub	local01, #9
12fd8     F2 26 62 FC | 	wrlong	local01, objptr
12fdc     45 00 00 FF 
12fe0     74 E4 85 F1 | 	sub	objptr, ##35444
12fe4     50 00 90 FD | 	jmp	#LR__1566
12fe8                 | LR__1564
12fe8     45 00 00 FF 
12fec     74 E4 05 F1 | 	add	objptr, ##35444
12ff0     F2 28 02 FB | 	rdlong	local02, objptr
12ff4     45 00 00 FF 
12ff8     74 E4 85 F1 | 	sub	objptr, ##35444
12ffc     0E 28 16 F2 | 	cmp	local02, #14 wc
13000     34 00 90 CD |  if_b	jmp	#LR__1565
13004     45 00 00 FF 
13008     74 E4 05 F1 | 	add	objptr, ##35444
1300c     F2 26 02 FB | 	rdlong	local01, objptr
13010     45 00 00 FF 
13014     74 E4 85 F1 | 	sub	objptr, ##35444
13018     17 26 16 F2 | 	cmp	local01, #23 wc
1301c     51 00 00 CF 
13020     F4 E5 05 C1 |  if_b	add	objptr, ##41972
13024     F2 28 02 CB |  if_b	rdlong	local02, objptr
13028     27 28 06 C1 |  if_b	add	local02, #39
1302c     F2 28 62 CC |  if_b	wrlong	local02, objptr
13030     51 00 00 CF 
13034     F4 E5 85 C1 |  if_b	sub	objptr, ##41972
13038                 | LR__1565
13038                 | LR__1566
13038                 | LR__1567
13038                 | LR__1568
13038                 | LR__1569
13038     45 00 00 FF 
1303c     74 E4 05 F1 | 	add	objptr, ##35444
13040     F2 12 02 FB | 	rdlong	arg01, objptr
13044     45 00 00 FF 
13048     74 E4 85 F1 | 	sub	objptr, ##35444
1304c     20 C9 B0 FD | 	call	#_scantochar
13050     FD 12 02 F6 | 	mov	arg01, result1
13054     7C 21 B1 FD | 	call	#__system__Chr_S
13058     A7 FA 61 FC | 	wrlong	result1, fp
1305c     0C 00 90 FD | 	jmp	#LR__1571
13060                 | LR__1570
13060     99 01 00 FF 
13064     D6 29 06 F6 | 	mov	local02, ##@LR__5664
13068     A7 28 62 FC | 	wrlong	local02, fp
1306c                 | LR__1571
1306c     08 4E 05 F1 | 	add	fp, #8
13070     A7 3E 68 FC | 	wrlong	#31, fp
13074     08 4E 85 F1 | 	sub	fp, #8
13078     A7 12 02 F6 | 	mov	arg01, fp
1307c     F8 98 BF FD | 	call	#_push
13080     A7 F0 03 F6 | 	mov	ptra, fp
13084     B2 00 A0 FD | 	call	#popregs_
13088                 | _do_inkey_ret
13088     2D 00 64 FD | 	ret
1308c                 | 
1308c                 | ' 
1308c                 | ' ' ----------------  ink
1308c                 | ' 
1308c                 | ' sub do_ink
1308c                 | _do_ink
1308c     00 4A 05 F6 | 	mov	COUNT_, #0
13090     A8 00 A0 FD | 	call	#pushregs_
13094     0C F0 07 F1 | 	add	ptra, #12
13098     44 98 BF FD | 	call	#_pop
1309c     FF 14 02 F6 | 	mov	arg02, result3
130a0     A7 FA 61 FC | 	wrlong	result1, fp
130a4     04 4E 05 F1 | 	add	fp, #4
130a8     A7 FC 61 FC | 	wrlong	result2, fp
130ac     04 4E 05 F1 | 	add	fp, #4
130b0     A7 14 62 FC | 	wrlong	arg02, fp
130b4     08 4E 85 F1 | 	sub	fp, #8
130b8     A7 12 02 F6 | 	mov	arg01, fp
130bc     04 9A BF FD | 	call	#_converttoint
130c0     37 00 00 FF 
130c4     3C E4 05 F1 | 	add	objptr, ##28220
130c8     F2 FA 61 FC | 	wrlong	result1, objptr
130cc     04 E4 85 F1 | 	sub	objptr, #4
130d0     F2 14 02 FB | 	rdlong	arg02, objptr
130d4                 | ' 
130d4                 | ' write_color:=ff
130d4     36 00 00 FF 
130d8     F7 E5 85 F1 | 	sub	objptr, ##28151
130dc     F2 FA 61 FC | 	wrlong	result1, objptr
130e0                 | ' write_background:=bb
130e0     04 E4 05 F1 | 	add	objptr, #4
130e4     F2 14 62 FC | 	wrlong	arg02, objptr
130e8     36 00 00 FF 
130ec     F7 E5 05 F1 | 	add	objptr, ##28151
130f0     F2 12 02 FB | 	rdlong	arg01, objptr
130f4     37 00 00 FF 
130f8     3C E4 85 F1 | 	sub	objptr, ##28220
130fc     C4 D0 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13100     A7 F0 03 F6 | 	mov	ptra, fp
13104     B2 00 A0 FD | 	call	#popregs_
13108                 | _do_ink_ret
13108     2D 00 64 FD | 	ret
1310c                 | 
1310c                 | ' 
1310c                 | ' ' ----------------  int
1310c                 | ' 
1310c                 | ' sub do_int
1310c                 | _do_int
1310c     02 4A 05 F6 | 	mov	COUNT_, #2
13110     A8 00 A0 FD | 	call	#pushregs_
13114     10 F0 07 F1 | 	add	ptra, #16
13118     C4 97 BF FD | 	call	#_pop
1311c     FE 26 02 F6 | 	mov	local01, result2
13120     FF 28 02 F6 | 	mov	local02, result3
13124     A7 FA 61 FC | 	wrlong	result1, fp
13128     04 4E 05 F1 | 	add	fp, #4
1312c     A7 26 62 FC | 	wrlong	local01, fp
13130     04 4E 05 F1 | 	add	fp, #4
13134     A7 28 62 FC | 	wrlong	local02, fp
13138                 | ' 
13138                 | ' t1=pop()
13138                 | ' select case t1.result_type
13138     08 4E 85 F1 | 	sub	fp, #8
1313c     1E 28 0E F2 | 	cmp	local02, #30 wz
13140     14 00 90 AD |  if_e	jmp	#LR__1580
13144     1F 28 0E F2 | 	cmp	local02, #31 wz
13148     20 00 90 AD |  if_e	jmp	#LR__1581
1314c     2B 28 0E F2 | 	cmp	local02, #43 wz
13150     34 00 90 AD |  if_e	jmp	#LR__1582
13154     50 00 90 FD | 	jmp	#LR__1583
13158                 | LR__1580
13158     A7 12 02 FB | 	rdlong	arg01, fp
1315c     00 14 06 F6 | 	mov	arg02, #0
13160     70 31 B1 FD | 	call	#__system___float_tointeger
13164     A7 FA 61 FC | 	wrlong	result1, fp
13168     3C 00 90 FD | 	jmp	#LR__1583
1316c                 | LR__1581
1316c     A7 12 02 FB | 	rdlong	arg01, fp
13170     A4 34 B1 FD | 	call	#__system____builtin_atof
13174     FD 12 02 F6 | 	mov	arg01, result1
13178     00 14 06 F6 | 	mov	arg02, #0
1317c     54 31 B1 FD | 	call	#__system___float_tointeger
13180     A7 FA 61 FC | 	wrlong	result1, fp
13184     20 00 90 FD | 	jmp	#LR__1583
13188                 | LR__1582
13188     A7 12 02 FB | 	rdlong	arg01, fp
1318c     C8 98 BF FD | 	call	#_convertstring
13190     FD 12 02 F6 | 	mov	arg01, result1
13194     80 34 B1 FD | 	call	#__system____builtin_atof
13198     FD 12 02 F6 | 	mov	arg01, result1
1319c     00 14 06 F6 | 	mov	arg02, #0
131a0     30 31 B1 FD | 	call	#__system___float_tointeger
131a4     A7 FA 61 FC | 	wrlong	result1, fp
131a8                 | LR__1583
131a8     08 4E 05 F1 | 	add	fp, #8
131ac     A7 38 68 FC | 	wrlong	#28, fp
131b0     08 4E 85 F1 | 	sub	fp, #8
131b4     A7 12 02 F6 | 	mov	arg01, fp
131b8     BC 97 BF FD | 	call	#_push
131bc     A7 F0 03 F6 | 	mov	ptra, fp
131c0     B2 00 A0 FD | 	call	#popregs_
131c4                 | _do_int_ret
131c4     2D 00 64 FD | 	ret
131c8                 | 
131c8                 | ' 
131c8                 | ' ' ----------------  input
131c8                 | ' 
131c8                 | ' sub do_input
131c8                 | _do_input
131c8     47 00 00 FF 
131cc     7C E4 05 F1 | 	add	objptr, ##36476
131d0     47 00 00 FF 
131d4     7C E4 85 F1 | 	sub	objptr, ##36476
131d8                 | _do_input_ret
131d8     2D 00 64 FD | 	ret
131dc                 | 
131dc                 | ' 
131dc                 | ' ' ----------------  left$
131dc                 | ' 
131dc                 | ' sub do_left
131dc                 | _do_left
131dc     00 4A 05 F6 | 	mov	COUNT_, #0
131e0     A8 00 A0 FD | 	call	#pushregs_
131e4     14 F0 07 F1 | 	add	ptra, #20
131e8     4A 00 00 FF 
131ec     80 E4 05 F1 | 	add	objptr, ##38016
131f0     F2 16 02 FB | 	rdlong	arg03, objptr
131f4     0B 15 02 F6 | 	mov	arg02, arg03
131f8     01 14 66 F0 | 	shl	arg02, #1
131fc     0B 15 02 F1 | 	add	arg02, arg03
13200     02 14 66 F0 | 	shl	arg02, #2
13204     03 00 00 FF 
13208     04 E4 85 F1 | 	sub	objptr, ##1540
1320c     F2 14 02 F1 | 	add	arg02, objptr
13210     0A 17 02 FB | 	rdlong	arg03, arg02
13214     0C 4E 05 F1 | 	add	fp, #12
13218     A7 16 62 FC | 	wrlong	arg03, fp
1321c                 | ' 
1321c                 | ' numpar=compiledline(lineptr_e).result.uresult
1321c                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
1321c     0C 4E 85 F1 | 	sub	fp, #12
13220     02 16 0E F2 | 	cmp	arg03, #2 wz
13224     47 00 00 FF 
13228     7C E4 85 F1 | 	sub	objptr, ##36476
1322c     40 00 90 AD |  if_e	jmp	#LR__1590
13230     00 12 06 F6 | 	mov	arg01, #0
13234     84 5A B1 FD | 	call	#__system___getiolock_0558
13238     FD 12 02 F6 | 	mov	arg01, result1
1323c     54 FD B0 FD | 	call	#__system___lockmem
13240     99 01 00 FF 
13244     D7 15 06 F6 | 	mov	arg02, ##@LR__5665
13248     00 12 06 F6 | 	mov	arg01, #0
1324c     00 16 06 F6 | 	mov	arg03, #0
13250     34 0A B1 FD | 	call	#__system___basic_print_string
13254     00 12 06 F6 | 	mov	arg01, #0
13258     60 5A B1 FD | 	call	#__system___getiolock_0558
1325c     FD 00 68 FC | 	wrlong	#0, result1
13260     27 12 06 F6 | 	mov	arg01, #39
13264     00 14 06 F6 | 	mov	arg02, #0
13268     98 C3 B0 FD | 	call	#_printerror
1326c     EC 00 90 FD | 	jmp	#LR__1593
13270                 | LR__1590
13270     6C 96 BF FD | 	call	#_pop
13274     FF 16 02 F6 | 	mov	arg03, result3
13278     A7 FA 61 FC | 	wrlong	result1, fp
1327c     04 4E 05 F1 | 	add	fp, #4
13280     A7 FC 61 FC | 	wrlong	result2, fp
13284     04 4E 05 F1 | 	add	fp, #4
13288     A7 16 62 FC | 	wrlong	arg03, fp
1328c     08 4E 85 F1 | 	sub	fp, #8
13290     A7 12 02 F6 | 	mov	arg01, fp
13294     2C 98 BF FD | 	call	#_converttoint
13298     FD 16 02 F6 | 	mov	arg03, result1
1329c     10 4E 05 F1 | 	add	fp, #16
132a0     A7 16 62 FC | 	wrlong	arg03, fp
132a4     10 4E 85 F1 | 	sub	fp, #16
132a8     34 96 BF FD | 	call	#_pop
132ac     FF 16 02 F6 | 	mov	arg03, result3
132b0     A7 FA 61 FC | 	wrlong	result1, fp
132b4     04 4E 05 F1 | 	add	fp, #4
132b8     A7 FC 61 FC | 	wrlong	result2, fp
132bc     04 4E 05 F1 | 	add	fp, #4
132c0     A7 16 62 FC | 	wrlong	arg03, fp
132c4                 | ' t1=pop() : arg=converttoint(t1)
132c4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
132c4     08 4E 85 F1 | 	sub	fp, #8
132c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
132cc     18 00 90 5D |  if_ne	jmp	#LR__1591
132d0     A7 12 02 FB | 	rdlong	arg01, fp
132d4     80 97 BF FD | 	call	#_convertstring
132d8     A7 FA 61 FC | 	wrlong	result1, fp
132dc     08 4E 05 F1 | 	add	fp, #8
132e0     A7 3E 68 FC | 	wrlong	#31, fp
132e4     08 4E 85 F1 | 	sub	fp, #8
132e8                 | LR__1591
132e8                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
132e8     08 4E 05 F1 | 	add	fp, #8
132ec     A7 16 02 FB | 	rdlong	arg03, fp
132f0     08 4E 85 F1 | 	sub	fp, #8
132f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
132f8     40 00 90 AD |  if_e	jmp	#LR__1592
132fc     00 12 06 F6 | 	mov	arg01, #0
13300     B8 59 B1 FD | 	call	#__system___getiolock_0558
13304     FD 12 02 F6 | 	mov	arg01, result1
13308     88 FC B0 FD | 	call	#__system___lockmem
1330c     99 01 00 FF 
13310     DF 15 06 F6 | 	mov	arg02, ##@LR__5666
13314     00 12 06 F6 | 	mov	arg01, #0
13318     00 16 06 F6 | 	mov	arg03, #0
1331c     68 09 B1 FD | 	call	#__system___basic_print_string
13320     00 12 06 F6 | 	mov	arg01, #0
13324     94 59 B1 FD | 	call	#__system___getiolock_0558
13328     FD 00 68 FC | 	wrlong	#0, result1
1332c     0F 12 06 F6 | 	mov	arg01, #15
13330     00 14 06 F6 | 	mov	arg02, #0
13334     CC C2 B0 FD | 	call	#_printerror
13338     20 00 90 FD | 	jmp	#LR__1593
1333c                 | LR__1592
1333c     A7 12 02 FB | 	rdlong	arg01, fp
13340     10 4E 05 F1 | 	add	fp, #16
13344     A7 14 02 FB | 	rdlong	arg02, fp
13348     10 4E 85 F1 | 	sub	fp, #16
1334c     C0 1C B1 FD | 	call	#__system__Left_S
13350     A7 FA 61 FC | 	wrlong	result1, fp
13354     A7 12 02 F6 | 	mov	arg01, fp
13358     1C 96 BF FD | 	call	#_push
1335c                 | LR__1593
1335c     A7 F0 03 F6 | 	mov	ptra, fp
13360     B2 00 A0 FD | 	call	#popregs_
13364                 | _do_left_ret
13364     2D 00 64 FD | 	ret
13368                 | 
13368                 | ' 
13368                 | ' ' ----------------  len
13368                 | ' 
13368                 | ' sub do_len
13368                 | _do_len
13368     02 4A 05 F6 | 	mov	COUNT_, #2
1336c     A8 00 A0 FD | 	call	#pushregs_
13370     14 F0 07 F1 | 	add	ptra, #20
13374     4A 00 00 FF 
13378     80 E4 05 F1 | 	add	objptr, ##38016
1337c     F2 26 02 FB | 	rdlong	local01, objptr
13380     13 17 02 F6 | 	mov	arg03, local01
13384     01 16 66 F0 | 	shl	arg03, #1
13388     13 17 02 F1 | 	add	arg03, local01
1338c     02 16 66 F0 | 	shl	arg03, #2
13390     03 00 00 FF 
13394     04 E4 85 F1 | 	sub	objptr, ##1540
13398     F2 16 02 F1 | 	add	arg03, objptr
1339c     0B 17 02 FB | 	rdlong	arg03, arg03
133a0     0C 4E 05 F1 | 	add	fp, #12
133a4     A7 16 62 FC | 	wrlong	arg03, fp
133a8                 | ' 
133a8                 | ' numpar=compiledline(lineptr_e).result.uresult
133a8                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
133a8     0C 4E 85 F1 | 	sub	fp, #12
133ac     02 16 16 F2 | 	cmp	arg03, #2 wc
133b0     47 00 00 FF 
133b4     7C E4 85 F1 | 	sub	objptr, ##36476
133b8     0C 4E 05 C1 |  if_b	add	fp, #12
133bc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
133c0     0C 4E 85 C1 |  if_b	sub	fp, #12
133c4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1600
133c8     00 12 06 F6 | 	mov	arg01, #0
133cc     EC 58 B1 FD | 	call	#__system___getiolock_0558
133d0     FD 12 02 F6 | 	mov	arg01, result1
133d4     BC FB B0 FD | 	call	#__system___lockmem
133d8     99 01 00 FF 
133dc     E7 15 06 F6 | 	mov	arg02, ##@LR__5667
133e0     00 12 06 F6 | 	mov	arg01, #0
133e4     00 16 06 F6 | 	mov	arg03, #0
133e8     9C 08 B1 FD | 	call	#__system___basic_print_string
133ec     00 12 06 F6 | 	mov	arg01, #0
133f0     C8 58 B1 FD | 	call	#__system___getiolock_0558
133f4     FD 00 68 FC | 	wrlong	#0, result1
133f8     27 12 06 F6 | 	mov	arg01, #39
133fc     00 14 06 F6 | 	mov	arg02, #0
13400     00 C2 B0 FD | 	call	#_printerror
13404     C8 00 90 FD | 	jmp	#LR__1605
13408                 | LR__1600
13408     D4 94 BF FD | 	call	#_pop
1340c     FF 16 02 F6 | 	mov	arg03, result3
13410     A7 FA 61 FC | 	wrlong	result1, fp
13414     04 4E 05 F1 | 	add	fp, #4
13418     A7 FC 61 FC | 	wrlong	result2, fp
1341c     04 4E 05 F1 | 	add	fp, #4
13420     A7 16 62 FC | 	wrlong	arg03, fp
13424                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13424     08 4E 85 F1 | 	sub	fp, #8
13428     2B 16 0E F2 | 	cmp	arg03, #43 wz
1342c     18 00 90 5D |  if_ne	jmp	#LR__1601
13430     A7 12 02 FB | 	rdlong	arg01, fp
13434     20 96 BF FD | 	call	#_convertstring
13438     A7 FA 61 FC | 	wrlong	result1, fp
1343c     08 4E 05 F1 | 	add	fp, #8
13440     A7 3E 68 FC | 	wrlong	#31, fp
13444     08 4E 85 F1 | 	sub	fp, #8
13448                 | LR__1601
13448                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
13448     08 4E 05 F1 | 	add	fp, #8
1344c     A7 16 02 FB | 	rdlong	arg03, fp
13450     08 4E 85 F1 | 	sub	fp, #8
13454     1F 16 0E F2 | 	cmp	arg03, #31 wz
13458     40 00 90 AD |  if_e	jmp	#LR__1602
1345c     00 12 06 F6 | 	mov	arg01, #0
13460     58 58 B1 FD | 	call	#__system___getiolock_0558
13464     FD 12 02 F6 | 	mov	arg01, result1
13468     28 FB B0 FD | 	call	#__system___lockmem
1346c     99 01 00 FF 
13470     ED 15 06 F6 | 	mov	arg02, ##@LR__5668
13474     00 12 06 F6 | 	mov	arg01, #0
13478     00 16 06 F6 | 	mov	arg03, #0
1347c     08 08 B1 FD | 	call	#__system___basic_print_string
13480     00 12 06 F6 | 	mov	arg01, #0
13484     34 58 B1 FD | 	call	#__system___getiolock_0558
13488     FD 00 68 FC | 	wrlong	#0, result1
1348c     0F 12 06 F6 | 	mov	arg01, #15
13490     00 14 06 F6 | 	mov	arg02, #0
13494     6C C1 B0 FD | 	call	#_printerror
13498     34 00 90 FD | 	jmp	#LR__1605
1349c                 | LR__1602
1349c     A7 12 02 FB | 	rdlong	arg01, fp
134a0     09 29 02 F6 | 	mov	local02, arg01
134a4     97 06 48 FB | 	callpa	#(@LR__1604-@LR__1603)>>2,fcache_load_ptr_
134a8                 | LR__1603
134a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
134ac     01 28 06 51 |  if_ne	add	local02, #1
134b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
134b4                 | LR__1604
134b4     09 29 82 F1 | 	sub	local02, arg01
134b8     A7 28 62 FC | 	wrlong	local02, fp
134bc     08 4E 05 F1 | 	add	fp, #8
134c0     A7 38 68 FC | 	wrlong	#28, fp
134c4     08 4E 85 F1 | 	sub	fp, #8
134c8     A7 12 02 F6 | 	mov	arg01, fp
134cc     A8 94 BF FD | 	call	#_push
134d0                 | LR__1605
134d0     A7 F0 03 F6 | 	mov	ptra, fp
134d4     B2 00 A0 FD | 	call	#popregs_
134d8                 | _do_len_ret
134d8     2D 00 64 FD | 	ret
134dc                 | 
134dc                 | ' 
134dc                 | ' ' ----------------  list
134dc                 | ' 
134dc                 | ' sub do_list
134dc                 | _do_list
134dc     02 4A 05 F6 | 	mov	COUNT_, #2
134e0     A8 00 A0 FD | 	call	#pushregs_
134e4     B8 F0 07 F1 | 	add	ptra, #184
134e8     04 4E 05 F1 | 	add	fp, #4
134ec     A7 00 68 FC | 	wrlong	#0, fp
134f0     04 4E 05 F1 | 	add	fp, #4
134f4     FF FF BF FF 
134f8     A7 FE 6B FC | 	wrlong	##2147483647, fp
134fc     08 4E 85 F1 | 	sub	fp, #8
13500     4A 00 00 FF 
13504     80 E4 05 F1 | 	add	objptr, ##38016
13508     F2 26 02 FB | 	rdlong	local01, objptr
1350c     13 17 02 F6 | 	mov	arg03, local01
13510     01 16 66 F0 | 	shl	arg03, #1
13514     13 17 02 F1 | 	add	arg03, local01
13518     02 16 66 F0 | 	shl	arg03, #2
1351c     03 00 00 FF 
13520     04 E4 85 F1 | 	sub	objptr, ##1540
13524     F2 16 02 F1 | 	add	arg03, objptr
13528     0B 17 02 FB | 	rdlong	arg03, arg03
1352c     A7 16 62 FC | 	wrlong	arg03, fp
13530                 | ' 
13530                 | ' startline=0 : endline=$7FFFFFFF
13530                 | ' numpar=compiledline(lineptr_e).result.uresult
13530                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
13530     01 16 0E F2 | 	cmp	arg03, #1 wz
13534     47 00 00 FF 
13538     7C E4 85 F1 | 	sub	objptr, ##36476
1353c     3C 00 90 5D |  if_ne	jmp	#LR__1610
13540     9C 93 BF FD | 	call	#_pop
13544     FF 26 02 F6 | 	mov	local01, result3
13548     0C 4E 05 F1 | 	add	fp, #12
1354c     A7 FA 61 FC | 	wrlong	result1, fp
13550     04 4E 05 F1 | 	add	fp, #4
13554     A7 FC 61 FC | 	wrlong	result2, fp
13558     04 4E 05 F1 | 	add	fp, #4
1355c     A7 26 62 FC | 	wrlong	local01, fp
13560     08 4E 85 F1 | 	sub	fp, #8
13564     A7 12 02 F6 | 	mov	arg01, fp
13568     0C 4E 85 F1 | 	sub	fp, #12
1356c     54 95 BF FD | 	call	#_converttoint
13570     04 4E 05 F1 | 	add	fp, #4
13574     A7 FA 61 FC | 	wrlong	result1, fp
13578     04 4E 85 F1 | 	sub	fp, #4
1357c                 | LR__1610
1357c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
1357c     A7 16 02 FB | 	rdlong	arg03, fp
13580     02 16 0E F2 | 	cmp	arg03, #2 wz
13584     7C 00 90 5D |  if_ne	jmp	#LR__1611
13588     54 93 BF FD | 	call	#_pop
1358c     FF 26 02 F6 | 	mov	local01, result3
13590     0C 4E 05 F1 | 	add	fp, #12
13594     A7 FA 61 FC | 	wrlong	result1, fp
13598     04 4E 05 F1 | 	add	fp, #4
1359c     A7 FC 61 FC | 	wrlong	result2, fp
135a0     04 4E 05 F1 | 	add	fp, #4
135a4     A7 26 62 FC | 	wrlong	local01, fp
135a8     08 4E 85 F1 | 	sub	fp, #8
135ac     A7 12 02 F6 | 	mov	arg01, fp
135b0     0C 4E 85 F1 | 	sub	fp, #12
135b4     0C 95 BF FD | 	call	#_converttoint
135b8     FD 26 02 F6 | 	mov	local01, result1
135bc     08 4E 05 F1 | 	add	fp, #8
135c0     A7 26 62 FC | 	wrlong	local01, fp
135c4     08 4E 85 F1 | 	sub	fp, #8
135c8     14 93 BF FD | 	call	#_pop
135cc     FF 26 02 F6 | 	mov	local01, result3
135d0     0C 4E 05 F1 | 	add	fp, #12
135d4     A7 FA 61 FC | 	wrlong	result1, fp
135d8     04 4E 05 F1 | 	add	fp, #4
135dc     A7 FC 61 FC | 	wrlong	result2, fp
135e0     04 4E 05 F1 | 	add	fp, #4
135e4     A7 26 62 FC | 	wrlong	local01, fp
135e8     08 4E 85 F1 | 	sub	fp, #8
135ec     A7 12 02 F6 | 	mov	arg01, fp
135f0     0C 4E 85 F1 | 	sub	fp, #12
135f4     CC 94 BF FD | 	call	#_converttoint
135f8     04 4E 05 F1 | 	add	fp, #4
135fc     A7 FA 61 FC | 	wrlong	result1, fp
13600     04 4E 85 F1 | 	sub	fp, #4
13604                 | LR__1611
13604                 | ' 
13604                 | ' 
13604                 | ' print
13604     00 12 06 F6 | 	mov	arg01, #0
13608     B0 56 B1 FD | 	call	#__system___getiolock_0558
1360c     FD 12 02 F6 | 	mov	arg01, result1
13610     80 F9 B0 FD | 	call	#__system___lockmem
13614     00 12 06 F6 | 	mov	arg01, #0
13618     0A 14 06 F6 | 	mov	arg02, #10
1361c     00 16 06 F6 | 	mov	arg03, #0
13620     0C 06 B1 FD | 	call	#__system___basic_print_char
13624     00 12 06 F6 | 	mov	arg01, #0
13628     90 56 B1 FD | 	call	#__system___getiolock_0558
1362c     FD 00 68 FC | 	wrlong	#0, result1
13630     4A 00 00 FF 
13634     88 E4 05 F1 | 	add	objptr, ##38024
13638     F2 28 02 FB | 	rdlong	local02, objptr
1363c     07 00 00 FF 
13640     A4 E5 05 F1 | 	add	objptr, ##4004
13644     F2 28 62 FC | 	wrlong	local02, objptr
13648     52 00 00 FF 
1364c     2C E4 85 F1 | 	sub	objptr, ##42028
13650                 | ' do 
13650                 | LR__1612
13650     20 4E 05 F1 | 	add	fp, #32
13654     A7 12 02 F6 | 	mov	arg01, fp
13658     20 4E 85 F1 | 	sub	fp, #32
1365c     52 00 00 FF 
13660     2C E4 05 F1 | 	add	objptr, ##42028
13664     F2 14 02 FB | 	rdlong	arg02, objptr
13668     18 16 06 F6 | 	mov	arg03, #24
1366c     46 00 00 FF 
13670     60 E5 85 F1 | 	sub	objptr, ##36192
13674     DC EC B0 FD | 	call	#_psram_spin2_read1
13678     0B 00 00 FF 
1367c     CC E4 85 F1 | 	sub	objptr, ##5836
13680                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
13680                 | '   
13680                 | '   if header(0)<> $FFFFFFFF then
13680     20 4E 05 F1 | 	add	fp, #32
13684     A7 28 02 FB | 	rdlong	local02, fp
13688     20 4E 85 F1 | 	sub	fp, #32
1368c     FF FF 7F FF 
13690     FF 29 0E F2 | 	cmp	local02, ##-1 wz
13694     A8 00 90 AD |  if_e	jmp	#LR__1614
13698     38 4E 05 F1 | 	add	fp, #56
1369c     3F 16 06 F6 | 	mov	arg03, #63
136a0     28 16 62 FD | 	setq	arg03
136a4     A7 00 68 FC | 	wrlong	#0, fp
136a8     A7 12 02 F6 | 	mov	arg01, fp
136ac     10 4E 85 F1 | 	sub	fp, #16
136b0     A7 14 02 FB | 	rdlong	arg02, fp
136b4     04 4E 05 F1 | 	add	fp, #4
136b8     A7 16 02 FB | 	rdlong	arg03, fp
136bc     2C 4E 85 F1 | 	sub	fp, #44
136c0     0B 00 00 FF 
136c4     CC E4 05 F1 | 	add	objptr, ##5836
136c8     88 EC B0 FD | 	call	#_psram_spin2_read1
136cc     0B 00 00 FF 
136d0     CC E4 85 F1 | 	sub	objptr, ##5836
136d4                 | '     longfill(linebuf,0,64)
136d4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
136d4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
136d4     20 4E 05 F1 | 	add	fp, #32
136d8     A7 28 02 FB | 	rdlong	local02, fp
136dc     1C 4E 85 F1 | 	sub	fp, #28
136e0     A7 26 02 FB | 	rdlong	local01, fp
136e4     04 4E 85 F1 | 	sub	fp, #4
136e8     13 29 52 F2 | 	cmps	local02, local01 wc
136ec     30 00 90 CD |  if_b	jmp	#LR__1613
136f0     20 4E 05 F1 | 	add	fp, #32
136f4     A7 28 02 FB | 	rdlong	local02, fp
136f8     18 4E 85 F1 | 	sub	fp, #24
136fc     A7 16 02 FB | 	rdlong	arg03, fp
13700     08 4E 85 F1 | 	sub	fp, #8
13704     0B 29 5A F2 | 	cmps	local02, arg03 wcz
13708     14 00 90 1D |  if_a	jmp	#LR__1613
1370c     38 4E 05 F1 | 	add	fp, #56
13710     A7 12 02 F6 | 	mov	arg01, fp
13714     38 4E 85 F1 | 	sub	fp, #56
13718                 | ' 
13718                 | ' write(text)
13718     FC DF B0 FD | 	call	#_hg010b_spin2_write
1371c                 | ' crlf
1371c     F8 E4 B0 FD | 	call	#_hg010b_spin2_crlf
13720                 | LR__1613
13720     34 4E 05 F1 | 	add	fp, #52
13724     A7 28 02 FB | 	rdlong	local02, fp
13728     34 4E 85 F1 | 	sub	fp, #52
1372c     52 00 00 FF 
13730     2C E4 05 F1 | 	add	objptr, ##42028
13734     F2 28 62 FC | 	wrlong	local02, objptr
13738     52 00 00 FF 
1373c     2C E4 85 F1 | 	sub	objptr, ##42028
13740                 | LR__1614
13740     34 4E 05 F1 | 	add	fp, #52
13744     A7 28 02 FB | 	rdlong	local02, fp
13748     34 4E 85 F1 | 	sub	fp, #52
1374c     FF FF 3F FF 
13750     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13754     20 4E 05 51 |  if_ne	add	fp, #32
13758     A7 26 02 5B |  if_ne	rdlong	local01, fp
1375c     20 4E 85 51 |  if_ne	sub	fp, #32
13760     FF FF 7F 5F 
13764     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13768     E4 FE 9F 5D |  if_ne	jmp	#LR__1612
1376c     A7 F0 03 F6 | 	mov	ptra, fp
13770     B2 00 A0 FD | 	call	#popregs_
13774                 | _do_list_ret
13774     2D 00 64 FD | 	ret
13778                 | 
13778                 | ' 
13778                 | ' '-------------------- load
13778                 | ' 
13778                 | ' sub do_load(amode=0 as integer)  
13778                 | _do_load
13778     01 4A 05 F6 | 	mov	COUNT_, #1
1377c     A8 00 A0 FD | 	call	#pushregs_
13780     AC F0 07 F1 | 	add	ptra, #172
13784     A7 12 62 FC | 	wrlong	arg01, fp
13788     51 00 00 FF 
1378c     E8 E5 05 F1 | 	add	objptr, ##41960
13790     F2 02 68 FC | 	wrlong	#1, objptr
13794     07 00 00 FF 
13798     68 E5 85 F1 | 	sub	objptr, ##3944
1379c     F2 14 02 FB | 	rdlong	arg02, objptr
137a0     0A 13 02 F6 | 	mov	arg01, arg02
137a4     01 12 66 F0 | 	shl	arg01, #1
137a8     0A 13 02 F1 | 	add	arg01, arg02
137ac     02 12 66 F0 | 	shl	arg01, #2
137b0     03 00 00 FF 
137b4     04 E4 85 F1 | 	sub	objptr, ##1540
137b8     F2 12 02 F1 | 	add	arg01, objptr
137bc     09 15 02 FB | 	rdlong	arg02, arg01
137c0     1C 4E 05 F1 | 	add	fp, #28
137c4     A7 14 62 FC | 	wrlong	arg02, fp
137c8     8C 4E 05 F1 | 	add	fp, #140
137cc     A7 12 02 F6 | 	mov	arg01, fp
137d0     47 00 00 FF 
137d4     7C E4 85 F1 | 	sub	objptr, ##36476
137d8     80 4E 85 F1 | 	sub	fp, #128
137dc     09 4F 61 FC | 	wrlong	fp, arg01
137e0                 | ' 
137e0                 | ' inload=1
137e0                 | ' numpar=compiledline(lineptr_e).result.uresult
137e0                 | ' lpoke varptr(line2$),varptr(line2)
137e0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
137e0     0C 4E 85 F1 | 	sub	fp, #12
137e4     A7 26 02 FB | 	rdlong	local01, fp
137e8     1C 4E 85 F1 | 	sub	fp, #28
137ec     01 26 56 F2 | 	cmps	local01, #1 wc
137f0     24 00 90 CD |  if_b	jmp	#LR__1620
137f4     E8 90 BF FD | 	call	#_pop
137f8     04 4E 05 F1 | 	add	fp, #4
137fc     A7 FA 61 FC | 	wrlong	result1, fp
13800     04 4E 05 F1 | 	add	fp, #4
13804     A7 FC 61 FC | 	wrlong	result2, fp
13808     04 4E 05 F1 | 	add	fp, #4
1380c     A7 FE 61 FC | 	wrlong	result3, fp
13810     0C 4E 85 F1 | 	sub	fp, #12
13814     28 00 90 FD | 	jmp	#LR__1621
13818                 | LR__1620
13818     51 00 00 FF 
1381c     D8 E5 05 F1 | 	add	objptr, ##41944
13820     F2 26 02 FB | 	rdlong	local01, objptr
13824     51 00 00 FF 
13828     D8 E5 85 F1 | 	sub	objptr, ##41944
1382c     04 4E 05 F1 | 	add	fp, #4
13830     A7 26 62 FC | 	wrlong	local01, fp
13834     08 4E 05 F1 | 	add	fp, #8
13838     A7 3E 68 FC | 	wrlong	#31, fp
1383c     0C 4E 85 F1 | 	sub	fp, #12
13840                 | LR__1621
13840                 | ' 'print "popped "; t1.result.uresult, t1.result_type
13840                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
13840     0C 4E 05 F1 | 	add	fp, #12
13844     A7 26 02 FB | 	rdlong	local01, fp
13848     0C 4E 85 F1 | 	sub	fp, #12
1384c     2B 26 0E F2 | 	cmp	local01, #43 wz
13850     24 00 90 5D |  if_ne	jmp	#LR__1622
13854     04 4E 05 F1 | 	add	fp, #4
13858     A7 12 02 FB | 	rdlong	arg01, fp
1385c     04 4E 85 F1 | 	sub	fp, #4
13860     F4 91 BF FD | 	call	#_convertstring
13864     04 4E 05 F1 | 	add	fp, #4
13868     A7 FA 61 FC | 	wrlong	result1, fp
1386c     08 4E 05 F1 | 	add	fp, #8
13870     A7 3E 68 FC | 	wrlong	#31, fp
13874     0C 4E 85 F1 | 	sub	fp, #12
13878                 | LR__1622
13878                 | ' if t1.result_type=result_string then
13878     0C 4E 05 F1 | 	add	fp, #12
1387c     A7 26 02 FB | 	rdlong	local01, fp
13880     0C 4E 85 F1 | 	sub	fp, #12
13884     1F 26 0E F2 | 	cmp	local01, #31 wz
13888     E0 02 90 5D |  if_ne	jmp	#LR__1628
1388c                 | '   if amode<>1234 then do_new
1388c     A7 26 02 FB | 	rdlong	local01, fp
13890     02 00 00 FF 
13894     D2 26 0E F2 | 	cmp	local01, ##1234 wz
13898     08 0E B0 5D |  if_ne	call	#_do_new
1389c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1389c     04 4E 05 F1 | 	add	fp, #4
138a0     A7 12 02 FB | 	rdlong	arg01, fp
138a4     04 4E 85 F1 | 	sub	fp, #4
138a8     99 01 00 FF 
138ac     F3 15 06 F6 | 	mov	arg02, ##@LR__5669
138b0     08 F7 B0 FD | 	call	#__system___string_cmp
138b4     00 FA 0D F2 | 	cmp	result1, #0 wz
138b8     24 00 90 5D |  if_ne	jmp	#LR__1623
138bc     51 00 00 FF 
138c0     D8 E5 05 F1 | 	add	objptr, ##41944
138c4     F2 26 02 FB | 	rdlong	local01, objptr
138c8     51 00 00 FF 
138cc     D8 E5 85 F1 | 	sub	objptr, ##41944
138d0     04 4E 05 F1 | 	add	fp, #4
138d4     A7 26 62 FC | 	wrlong	local01, fp
138d8     04 4E 85 F1 | 	sub	fp, #4
138dc     20 00 90 FD | 	jmp	#LR__1624
138e0                 | LR__1623
138e0     04 4E 05 F1 | 	add	fp, #4
138e4     A7 26 02 FB | 	rdlong	local01, fp
138e8     04 4E 85 F1 | 	sub	fp, #4
138ec     51 00 00 FF 
138f0     D8 E5 05 F1 | 	add	objptr, ##41944
138f4     F2 26 62 FC | 	wrlong	local01, objptr
138f8     51 00 00 FF 
138fc     D8 E5 85 F1 | 	sub	objptr, ##41944
13900                 | LR__1624
13900                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
13900     09 12 06 F6 | 	mov	arg01, #9
13904     E4 49 B1 FD | 	call	#__system__close
13908     09 26 06 F6 | 	mov	local01, #9
1390c     4A 00 00 FF 
13910     94 E4 05 F1 | 	add	objptr, ##38036
13914     F2 12 02 FB | 	rdlong	arg01, objptr
13918     4A 00 00 FF 
1391c     94 E4 85 F1 | 	sub	objptr, ##38036
13920     99 01 00 FF 
13924     F4 15 06 F6 | 	mov	arg02, ##@LR__5670
13928     C4 F6 B0 FD | 	call	#__system___string_concat
1392c     FD 12 02 F6 | 	mov	arg01, result1
13930     04 4E 05 F1 | 	add	fp, #4
13934     A7 14 02 FB | 	rdlong	arg02, fp
13938     04 4E 85 F1 | 	sub	fp, #4
1393c     B0 F6 B0 FD | 	call	#__system___string_concat
13940     FD 14 02 F6 | 	mov	arg02, result1
13944     13 13 02 F6 | 	mov	arg01, local01
13948     00 16 06 F6 | 	mov	arg03, #0
1394c     48 02 B1 FD | 	call	#__system___basic_open_string
13950     20 E6 05 F1 | 	add	ptr___system__dat__, #32
13954     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
13958     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1395c     14 4E 05 F1 | 	add	fp, #20
13960     A7 FA 61 FC | 	wrlong	result1, fp
13964                 | '   r=geterr() 
13964                 | '   if r then 
13964     14 4E 85 F1 | 	sub	fp, #20
13968     50 01 90 AD |  if_e	jmp	#LR__1626
1396c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
1396c     09 12 06 F6 | 	mov	arg01, #9
13970     78 49 B1 FD | 	call	#__system__close
13974     09 26 06 F6 | 	mov	local01, #9
13978     4A 00 00 FF 
1397c     94 E4 05 F1 | 	add	objptr, ##38036
13980     F2 12 02 FB | 	rdlong	arg01, objptr
13984     4A 00 00 FF 
13988     94 E4 85 F1 | 	sub	objptr, ##38036
1398c     99 01 00 FF 
13990     F6 15 06 F6 | 	mov	arg02, ##@LR__5671
13994     58 F6 B0 FD | 	call	#__system___string_concat
13998     FD 12 02 F6 | 	mov	arg01, result1
1399c     04 4E 05 F1 | 	add	fp, #4
139a0     A7 14 02 FB | 	rdlong	arg02, fp
139a4     04 4E 85 F1 | 	sub	fp, #4
139a8     44 F6 B0 FD | 	call	#__system___string_concat
139ac     FD 12 02 F6 | 	mov	arg01, result1
139b0     99 01 00 FF 
139b4     F8 15 06 F6 | 	mov	arg02, ##@LR__5672
139b8     34 F6 B0 FD | 	call	#__system___string_concat
139bc     FD 14 02 F6 | 	mov	arg02, result1
139c0     13 13 02 F6 | 	mov	arg01, local01
139c4     00 16 06 F6 | 	mov	arg03, #0
139c8     CC 01 B1 FD | 	call	#__system___basic_open_string
139cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
139d0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
139d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
139d8     14 4E 05 F1 | 	add	fp, #20
139dc     A7 FA 61 FC | 	wrlong	result1, fp
139e0                 | '     r=geterr() 
139e0                 | '     if r then 
139e0     14 4E 85 F1 | 	sub	fp, #20
139e4     A0 00 90 AD |  if_e	jmp	#LR__1625
139e8                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
139e8     00 12 06 F6 | 	mov	arg01, #0
139ec     CC 52 B1 FD | 	call	#__system___getiolock_0558
139f0     FD 12 02 F6 | 	mov	arg01, result1
139f4     9C F5 B0 FD | 	call	#__system___lockmem
139f8     99 01 00 FF 
139fc     FD 15 06 F6 | 	mov	arg02, ##@LR__5673
13a00     00 12 06 F6 | 	mov	arg01, #0
13a04     00 16 06 F6 | 	mov	arg03, #0
13a08     7C 02 B1 FD | 	call	#__system___basic_print_string
13a0c     14 4E 05 F1 | 	add	fp, #20
13a10     A7 14 02 FB | 	rdlong	arg02, fp
13a14     14 4E 85 F1 | 	sub	fp, #20
13a18     00 12 06 F6 | 	mov	arg01, #0
13a1c     00 16 06 F6 | 	mov	arg03, #0
13a20     0A 18 06 F6 | 	mov	arg04, #10
13a24     A4 02 B1 FD | 	call	#__system___basic_print_integer
13a28     9A 01 00 FF 
13a2c     0B 14 06 F6 | 	mov	arg02, ##@LR__5674
13a30     00 12 06 F6 | 	mov	arg01, #0
13a34     00 16 06 F6 | 	mov	arg03, #0
13a38     4C 02 B1 FD | 	call	#__system___basic_print_string
13a3c     00 26 06 F6 | 	mov	local01, #0
13a40     14 4E 05 F1 | 	add	fp, #20
13a44     A7 12 02 FB | 	rdlong	arg01, fp
13a48     14 4E 85 F1 | 	sub	fp, #20
13a4c     D0 1E B1 FD | 	call	#__system___strerror
13a50     FD 14 02 F6 | 	mov	arg02, result1
13a54     13 13 02 F6 | 	mov	arg01, local01
13a58     00 16 06 F6 | 	mov	arg03, #0
13a5c     28 02 B1 FD | 	call	#__system___basic_print_string
13a60     00 12 06 F6 | 	mov	arg01, #0
13a64     0A 14 06 F6 | 	mov	arg02, #10
13a68     00 16 06 F6 | 	mov	arg03, #0
13a6c     C0 01 B1 FD | 	call	#__system___basic_print_char
13a70     00 12 06 F6 | 	mov	arg01, #0
13a74     44 52 B1 FD | 	call	#__system___getiolock_0558
13a78     FD 00 68 FC | 	wrlong	#0, result1
13a7c     09 12 06 F6 | 	mov	arg01, #9
13a80     68 48 B1 FD | 	call	#__system__close
13a84     94 01 90 FD | 	jmp	#LR__1630
13a88                 | LR__1625
13a88     51 00 00 FF 
13a8c     D8 E5 05 F1 | 	add	objptr, ##41944
13a90     F2 12 02 FB | 	rdlong	arg01, objptr
13a94     51 00 00 FF 
13a98     D8 E5 85 F1 | 	sub	objptr, ##41944
13a9c     9A 01 00 FF 
13aa0     0E 14 06 F6 | 	mov	arg02, ##@LR__5675
13aa4     48 F5 B0 FD | 	call	#__system___string_concat
13aa8     51 00 00 FF 
13aac     D8 E5 05 F1 | 	add	objptr, ##41944
13ab0     F2 FA 61 FC | 	wrlong	result1, objptr
13ab4     51 00 00 FF 
13ab8     D8 E5 85 F1 | 	sub	objptr, ##41944
13abc                 | LR__1626
13abc                 | '   close #9: open currentdir$+"/"+loadname for input as #9
13abc     09 12 06 F6 | 	mov	arg01, #9
13ac0     28 48 B1 FD | 	call	#__system__close
13ac4     09 26 06 F6 | 	mov	local01, #9
13ac8     4A 00 00 FF 
13acc     94 E4 05 F1 | 	add	objptr, ##38036
13ad0     F2 12 02 FB | 	rdlong	arg01, objptr
13ad4     4A 00 00 FF 
13ad8     94 E4 85 F1 | 	sub	objptr, ##38036
13adc     9A 01 00 FF 
13ae0     13 14 06 F6 | 	mov	arg02, ##@LR__5676
13ae4     08 F5 B0 FD | 	call	#__system___string_concat
13ae8     FD 12 02 F6 | 	mov	arg01, result1
13aec     51 00 00 FF 
13af0     D8 E5 05 F1 | 	add	objptr, ##41944
13af4     F2 14 02 FB | 	rdlong	arg02, objptr
13af8     51 00 00 FF 
13afc     D8 E5 85 F1 | 	sub	objptr, ##41944
13b00     EC F4 B0 FD | 	call	#__system___string_concat
13b04     FD 14 02 F6 | 	mov	arg02, result1
13b08     13 13 02 F6 | 	mov	arg01, local01
13b0c     00 16 06 F6 | 	mov	arg03, #0
13b10     84 00 B1 FD | 	call	#__system___basic_open_string
13b14                 | '   do
13b14                 | LR__1627
13b14     09 12 06 F6 | 	mov	arg01, #9
13b18     84 F6 B0 FD | 	call	#__system___basic_read_line
13b1c     FD 26 02 F6 | 	mov	local01, result1
13b20     37 00 00 FF 
13b24     1C E4 05 F1 | 	add	objptr, ##28188
13b28     F2 26 62 FC | 	wrlong	local01, objptr
13b2c     37 00 00 FF 
13b30     1C E4 85 F1 | 	sub	objptr, ##28188
13b34     10 DC BE FD | 	call	#_interpret
13b38     37 00 00 FF 
13b3c     1C E4 05 F1 | 	add	objptr, ##28188
13b40     F2 12 02 FB | 	rdlong	arg01, objptr
13b44     37 00 00 FF 
13b48     1C E4 85 F1 | 	sub	objptr, ##28188
13b4c     9A 01 00 FF 
13b50     15 14 06 F6 | 	mov	arg02, ##@LR__5677
13b54     64 F4 B0 FD | 	call	#__system___string_cmp
13b58     00 FA 0D F2 | 	cmp	result1, #0 wz
13b5c     B4 FF 9F 5D |  if_ne	jmp	#LR__1627
13b60                 | '   close #9   
13b60     09 12 06 F6 | 	mov	arg01, #9
13b64     84 47 B1 FD | 	call	#__system__close
13b68     0C 00 90 FD | 	jmp	#LR__1629
13b6c                 | LR__1628
13b6c     1E 12 06 F6 | 	mov	arg01, #30
13b70     00 14 06 F6 | 	mov	arg02, #0
13b74     8C BA B0 FD | 	call	#_printerror
13b78                 | LR__1629
13b78                 | ' print "Loaded ";currentdir$+"/"+loadname
13b78     00 12 06 F6 | 	mov	arg01, #0
13b7c     3C 51 B1 FD | 	call	#__system___getiolock_0558
13b80     FD 12 02 F6 | 	mov	arg01, result1
13b84     0C F4 B0 FD | 	call	#__system___lockmem
13b88     9A 01 00 FF 
13b8c     16 14 06 F6 | 	mov	arg02, ##@LR__5678
13b90     00 12 06 F6 | 	mov	arg01, #0
13b94     00 16 06 F6 | 	mov	arg03, #0
13b98     EC 00 B1 FD | 	call	#__system___basic_print_string
13b9c     00 26 06 F6 | 	mov	local01, #0
13ba0     4A 00 00 FF 
13ba4     94 E4 05 F1 | 	add	objptr, ##38036
13ba8     F2 12 02 FB | 	rdlong	arg01, objptr
13bac     4A 00 00 FF 
13bb0     94 E4 85 F1 | 	sub	objptr, ##38036
13bb4     9A 01 00 FF 
13bb8     1E 14 06 F6 | 	mov	arg02, ##@LR__5679
13bbc     30 F4 B0 FD | 	call	#__system___string_concat
13bc0     FD 12 02 F6 | 	mov	arg01, result1
13bc4     51 00 00 FF 
13bc8     D8 E5 05 F1 | 	add	objptr, ##41944
13bcc     F2 14 02 FB | 	rdlong	arg02, objptr
13bd0     51 00 00 FF 
13bd4     D8 E5 85 F1 | 	sub	objptr, ##41944
13bd8     14 F4 B0 FD | 	call	#__system___string_concat
13bdc     FD 14 02 F6 | 	mov	arg02, result1
13be0     13 13 02 F6 | 	mov	arg01, local01
13be4     00 16 06 F6 | 	mov	arg03, #0
13be8     9C 00 B1 FD | 	call	#__system___basic_print_string
13bec     00 12 06 F6 | 	mov	arg01, #0
13bf0     0A 14 06 F6 | 	mov	arg02, #10
13bf4     00 16 06 F6 | 	mov	arg03, #0
13bf8     34 00 B1 FD | 	call	#__system___basic_print_char
13bfc     00 12 06 F6 | 	mov	arg01, #0
13c00     B8 50 B1 FD | 	call	#__system___getiolock_0558
13c04     FD 00 68 FC | 	wrlong	#0, result1
13c08     51 00 00 FF 
13c0c     E8 E5 05 F1 | 	add	objptr, ##41960
13c10     F2 00 68 FC | 	wrlong	#0, objptr
13c14     51 00 00 FF 
13c18     E8 E5 85 F1 | 	sub	objptr, ##41960
13c1c                 | LR__1630
13c1c     A7 F0 03 F6 | 	mov	ptra, fp
13c20     B2 00 A0 FD | 	call	#popregs_
13c24                 | _do_load_ret
13c24     2D 00 64 FD | 	ret
13c28                 | 
13c28                 | ' 
13c28                 | ' '-------------------- log
13c28                 | ' 
13c28                 | ' sub do_log
13c28                 | _do_log
13c28     01 4A 05 F6 | 	mov	COUNT_, #1
13c2c     A8 00 A0 FD | 	call	#pushregs_
13c30     14 F0 07 F1 | 	add	ptra, #20
13c34     4A 00 00 FF 
13c38     80 E4 05 F1 | 	add	objptr, ##38016
13c3c     F2 26 02 FB | 	rdlong	local01, objptr
13c40     13 17 02 F6 | 	mov	arg03, local01
13c44     01 16 66 F0 | 	shl	arg03, #1
13c48     13 17 02 F1 | 	add	arg03, local01
13c4c     02 16 66 F0 | 	shl	arg03, #2
13c50     03 00 00 FF 
13c54     04 E4 85 F1 | 	sub	objptr, ##1540
13c58     F2 16 02 F1 | 	add	arg03, objptr
13c5c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13c60     0C 4E 05 F1 | 	add	fp, #12
13c64     A7 16 62 FC | 	wrlong	arg03, fp
13c68                 | ' 
13c68                 | ' numpar=compiledline(lineptr_e).result.uresult
13c68                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
13c68     0C 4E 85 F1 | 	sub	fp, #12
13c6c     47 00 00 FF 
13c70     7C E4 85 F1 | 	sub	objptr, ##36476
13c74     0C 4E 05 51 |  if_ne	add	fp, #12
13c78     A7 26 02 5B |  if_ne	rdlong	local01, fp
13c7c     0C 4E 85 51 |  if_ne	sub	fp, #12
13c80     03 26 16 52 |  if_ne	cmp	local01, #3 wc
13c84     40 00 90 4D |  if_c_and_nz	jmp	#LR__1640
13c88     00 12 06 F6 | 	mov	arg01, #0
13c8c     2C 50 B1 FD | 	call	#__system___getiolock_0558
13c90     FD 12 02 F6 | 	mov	arg01, result1
13c94     FC F2 B0 FD | 	call	#__system___lockmem
13c98     9A 01 00 FF 
13c9c     20 14 06 F6 | 	mov	arg02, ##@LR__5680
13ca0     00 12 06 F6 | 	mov	arg01, #0
13ca4     00 16 06 F6 | 	mov	arg03, #0
13ca8     DC FF B0 FD | 	call	#__system___basic_print_string
13cac     00 12 06 F6 | 	mov	arg01, #0
13cb0     08 50 B1 FD | 	call	#__system___getiolock_0558
13cb4     FD 00 68 FC | 	wrlong	#0, result1
13cb8     27 12 06 F6 | 	mov	arg01, #39
13cbc     00 14 06 F6 | 	mov	arg02, #0
13cc0     40 B9 B0 FD | 	call	#_printerror
13cc4     D0 00 90 FD | 	jmp	#LR__1643
13cc8                 | LR__1640
13cc8                 | ' if numpar=2 then 
13cc8     0C 4E 05 F1 | 	add	fp, #12
13ccc     A7 26 02 FB | 	rdlong	local01, fp
13cd0     0C 4E 85 F1 | 	sub	fp, #12
13cd4     02 26 0E F2 | 	cmp	local01, #2 wz
13cd8     48 00 90 5D |  if_ne	jmp	#LR__1641
13cdc     00 8C BF FD | 	call	#_pop
13ce0     FF 26 02 F6 | 	mov	local01, result3
13ce4     A7 FA 61 FC | 	wrlong	result1, fp
13ce8     04 4E 05 F1 | 	add	fp, #4
13cec     A7 FC 61 FC | 	wrlong	result2, fp
13cf0     04 4E 05 F1 | 	add	fp, #4
13cf4     A7 26 62 FC | 	wrlong	local01, fp
13cf8     08 4E 85 F1 | 	sub	fp, #8
13cfc     A7 12 02 F6 | 	mov	arg01, fp
13d00     7C 8E BF FD | 	call	#_converttofloat
13d04     FD 14 02 F6 | 	mov	arg02, result1
13d08     FC 16 20 FF 
13d0c     54 12 06 F6 | 	mov	arg01, ##1076754516
13d10     C8 30 B1 FD | 	call	#__system____builtin_logbase
13d14     10 4E 05 F1 | 	add	fp, #16
13d18     A7 FA 61 FC | 	wrlong	result1, fp
13d1c     10 4E 85 F1 | 	sub	fp, #16
13d20     10 00 90 FD | 	jmp	#LR__1642
13d24                 | LR__1641
13d24     10 4E 05 F1 | 	add	fp, #16
13d28     00 C0 9F FF 
13d2c     A7 00 68 FC | 	wrlong	##1065353216, fp
13d30     10 4E 85 F1 | 	sub	fp, #16
13d34                 | LR__1642
13d34     A8 8B BF FD | 	call	#_pop
13d38     FF 26 02 F6 | 	mov	local01, result3
13d3c     A7 FA 61 FC | 	wrlong	result1, fp
13d40     04 4E 05 F1 | 	add	fp, #4
13d44     A7 FC 61 FC | 	wrlong	result2, fp
13d48     04 4E 05 F1 | 	add	fp, #4
13d4c     A7 26 62 FC | 	wrlong	local01, fp
13d50     08 4E 85 F1 | 	sub	fp, #8
13d54     A7 12 02 F6 | 	mov	arg01, fp
13d58     24 8E BF FD | 	call	#_converttofloat
13d5c     FD 14 02 F6 | 	mov	arg02, result1
13d60     FC 16 20 FF 
13d64     54 12 06 F6 | 	mov	arg01, ##1076754516
13d68     70 30 B1 FD | 	call	#__system____builtin_logbase
13d6c     FD 12 02 F6 | 	mov	arg01, result1
13d70     10 4E 05 F1 | 	add	fp, #16
13d74     A7 14 02 FB | 	rdlong	arg02, fp
13d78     10 4E 85 F1 | 	sub	fp, #16
13d7c     90 22 B1 FD | 	call	#__system___float_div
13d80     A7 FA 61 FC | 	wrlong	result1, fp
13d84     08 4E 05 F1 | 	add	fp, #8
13d88     A7 3C 68 FC | 	wrlong	#30, fp
13d8c     08 4E 85 F1 | 	sub	fp, #8
13d90     A7 12 02 F6 | 	mov	arg01, fp
13d94     E0 8B BF FD | 	call	#_push
13d98                 | LR__1643
13d98     A7 F0 03 F6 | 	mov	ptra, fp
13d9c     B2 00 A0 FD | 	call	#popregs_
13da0                 | _do_log_ret
13da0     2D 00 64 FD | 	ret
13da4                 | 
13da4                 | ' 
13da4                 | ' '-------------------- lpeek
13da4                 | ' 
13da4                 | ' sub do_lpeek
13da4                 | _do_lpeek
13da4     00 4A 05 F6 | 	mov	COUNT_, #0
13da8     A8 00 A0 FD | 	call	#pushregs_
13dac     14 F0 07 F1 | 	add	ptra, #20
13db0     2C 8B BF FD | 	call	#_pop
13db4     A7 FA 61 FC | 	wrlong	result1, fp
13db8     04 4E 05 F1 | 	add	fp, #4
13dbc     A7 FC 61 FC | 	wrlong	result2, fp
13dc0     04 4E 05 F1 | 	add	fp, #4
13dc4     A7 FE 61 FC | 	wrlong	result3, fp
13dc8     08 4E 85 F1 | 	sub	fp, #8
13dcc     A7 12 02 F6 | 	mov	arg01, fp
13dd0     F0 8C BF FD | 	call	#_converttoint
13dd4     0C 4E 05 F1 | 	add	fp, #12
13dd8     A7 FA 61 FC | 	wrlong	result1, fp
13ddc                 | ' 
13ddc                 | ' t1=pop()
13ddc                 | ' a=converttoint(t1)
13ddc                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
13ddc     0C 4E 85 F1 | 	sub	fp, #12
13de0     00 04 00 FF 
13de4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
13de8     1C 00 90 3D |  if_ae	jmp	#LR__1650
13dec     0C 4E 05 F1 | 	add	fp, #12
13df0     A7 12 02 FB | 	rdlong	arg01, fp
13df4     09 FB 01 FB | 	rdlong	result1, arg01
13df8     04 4E 05 F1 | 	add	fp, #4
13dfc     A7 FA 61 FC | 	wrlong	result1, fp
13e00     10 4E 85 F1 | 	sub	fp, #16
13e04     1C 00 90 FD | 	jmp	#LR__1651
13e08                 | LR__1650
13e08     0C 4E 05 F1 | 	add	fp, #12
13e0c     A7 12 02 FB | 	rdlong	arg01, fp
13e10     0C 4E 85 F1 | 	sub	fp, #12
13e14     A8 BA B0 FD | 	call	#_pslpeek
13e18     10 4E 05 F1 | 	add	fp, #16
13e1c     A7 FA 61 FC | 	wrlong	result1, fp
13e20     10 4E 85 F1 | 	sub	fp, #16
13e24                 | LR__1651
13e24     08 4E 05 F1 | 	add	fp, #8
13e28     A7 3A 68 FC | 	wrlong	#29, fp
13e2c     08 4E 05 F1 | 	add	fp, #8
13e30     A7 12 02 FB | 	rdlong	arg01, fp
13e34     10 4E 85 F1 | 	sub	fp, #16
13e38     A7 12 62 FC | 	wrlong	arg01, fp
13e3c     A7 12 02 F6 | 	mov	arg01, fp
13e40     34 8B BF FD | 	call	#_push
13e44     A7 F0 03 F6 | 	mov	ptra, fp
13e48     B2 00 A0 FD | 	call	#popregs_
13e4c                 | _do_lpeek_ret
13e4c     2D 00 64 FD | 	ret
13e50                 | 
13e50                 | ' 
13e50                 | ' '-------------------- lpoke
13e50                 | ' 
13e50                 | ' sub do_lpoke
13e50                 | _do_lpoke
13e50     01 4A 05 F6 | 	mov	COUNT_, #1
13e54     A8 00 A0 FD | 	call	#pushregs_
13e58     20 F0 07 F1 | 	add	ptra, #32
13e5c     80 8A BF FD | 	call	#_pop
13e60     FD 14 02 F6 | 	mov	arg02, result1
13e64     FE 12 02 F6 | 	mov	arg01, result2
13e68     FF 26 02 F6 | 	mov	local01, result3
13e6c     A7 14 62 FC | 	wrlong	arg02, fp
13e70     04 4E 05 F1 | 	add	fp, #4
13e74     A7 12 62 FC | 	wrlong	arg01, fp
13e78     04 4E 05 F1 | 	add	fp, #4
13e7c     A7 26 62 FC | 	wrlong	local01, fp
13e80     08 4E 85 F1 | 	sub	fp, #8
13e84     58 8A BF FD | 	call	#_pop
13e88     FF 26 02 F6 | 	mov	local01, result3
13e8c     0C 4E 05 F1 | 	add	fp, #12
13e90     A7 FA 61 FC | 	wrlong	result1, fp
13e94     04 4E 05 F1 | 	add	fp, #4
13e98     A7 FC 61 FC | 	wrlong	result2, fp
13e9c     04 4E 05 F1 | 	add	fp, #4
13ea0     A7 26 62 FC | 	wrlong	local01, fp
13ea4     08 4E 85 F1 | 	sub	fp, #8
13ea8     A7 12 02 F6 | 	mov	arg01, fp
13eac     0C 4E 85 F1 | 	sub	fp, #12
13eb0     10 8C BF FD | 	call	#_converttoint
13eb4     18 4E 05 F1 | 	add	fp, #24
13eb8     A7 FA 61 FC | 	wrlong	result1, fp
13ebc     18 4E 85 F1 | 	sub	fp, #24
13ec0     A7 12 02 F6 | 	mov	arg01, fp
13ec4     FC 8B BF FD | 	call	#_converttoint
13ec8     1C 4E 05 F1 | 	add	fp, #28
13ecc     A7 FA 61 FC | 	wrlong	result1, fp
13ed0                 | ' 
13ed0                 | ' t1=pop() 'value
13ed0                 | ' t2=pop() 
13ed0                 | ' a=converttoint(t2) : v=converttoint(t1)
13ed0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
13ed0     04 4E 85 F1 | 	sub	fp, #4
13ed4     A7 26 02 FB | 	rdlong	local01, fp
13ed8     18 4E 85 F1 | 	sub	fp, #24
13edc     00 04 00 FF 
13ee0     00 26 16 F2 | 	cmp	local01, ##524288 wc
13ee4     1C 00 90 3D |  if_ae	jmp	#LR__1660
13ee8     18 4E 05 F1 | 	add	fp, #24
13eec     A7 12 02 FB | 	rdlong	arg01, fp
13ef0     04 4E 05 F1 | 	add	fp, #4
13ef4     A7 14 02 FB | 	rdlong	arg02, fp
13ef8     1C 4E 85 F1 | 	sub	fp, #28
13efc     09 15 62 FC | 	wrlong	arg02, arg01
13f00     18 00 90 FD | 	jmp	#LR__1661
13f04                 | LR__1660
13f04     18 4E 05 F1 | 	add	fp, #24
13f08     A7 12 02 FB | 	rdlong	arg01, fp
13f0c     04 4E 05 F1 | 	add	fp, #4
13f10     A7 14 02 FB | 	rdlong	arg02, fp
13f14     1C 4E 85 F1 | 	sub	fp, #28
13f18     74 B8 B0 FD | 	call	#_pslpoke
13f1c                 | LR__1661
13f1c     A7 F0 03 F6 | 	mov	ptra, fp
13f20     B2 00 A0 FD | 	call	#popregs_
13f24                 | _do_lpoke_ret
13f24     2D 00 64 FD | 	ret
13f28                 | 
13f28                 | ' 
13f28                 | ' '-------------------- mid$
13f28                 | ' 
13f28                 | ' sub do_mid
13f28                 | _do_mid
13f28     00 4A 05 F6 | 	mov	COUNT_, #0
13f2c     A8 00 A0 FD | 	call	#pushregs_
13f30     18 F0 07 F1 | 	add	ptra, #24
13f34     4A 00 00 FF 
13f38     80 E4 05 F1 | 	add	objptr, ##38016
13f3c     F2 16 02 FB | 	rdlong	arg03, objptr
13f40     0B 15 02 F6 | 	mov	arg02, arg03
13f44     01 14 66 F0 | 	shl	arg02, #1
13f48     0B 15 02 F1 | 	add	arg02, arg03
13f4c     02 14 66 F0 | 	shl	arg02, #2
13f50     03 00 00 FF 
13f54     04 E4 85 F1 | 	sub	objptr, ##1540
13f58     F2 14 02 F1 | 	add	arg02, objptr
13f5c     0A 17 02 FB | 	rdlong	arg03, arg02
13f60     0C 4E 05 F1 | 	add	fp, #12
13f64     A7 16 62 FC | 	wrlong	arg03, fp
13f68                 | ' 
13f68                 | ' numpar=compiledline(lineptr_e).result.uresult
13f68                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
13f68     0C 4E 85 F1 | 	sub	fp, #12
13f6c     03 16 0E F2 | 	cmp	arg03, #3 wz
13f70     47 00 00 FF 
13f74     7C E4 85 F1 | 	sub	objptr, ##36476
13f78     40 00 90 AD |  if_e	jmp	#LR__1670
13f7c     00 12 06 F6 | 	mov	arg01, #0
13f80     38 4D B1 FD | 	call	#__system___getiolock_0558
13f84     FD 12 02 F6 | 	mov	arg01, result1
13f88     08 F0 B0 FD | 	call	#__system___lockmem
13f8c     9A 01 00 FF 
13f90     26 14 06 F6 | 	mov	arg02, ##@LR__5681
13f94     00 12 06 F6 | 	mov	arg01, #0
13f98     00 16 06 F6 | 	mov	arg03, #0
13f9c     E8 FC B0 FD | 	call	#__system___basic_print_string
13fa0     00 12 06 F6 | 	mov	arg01, #0
13fa4     14 4D B1 FD | 	call	#__system___getiolock_0558
13fa8     FD 00 68 FC | 	wrlong	#0, result1
13fac     27 12 06 F6 | 	mov	arg01, #39
13fb0     00 14 06 F6 | 	mov	arg02, #0
13fb4     4C B6 B0 FD | 	call	#_printerror
13fb8     2C 01 90 FD | 	jmp	#LR__1673
13fbc                 | LR__1670
13fbc     20 89 BF FD | 	call	#_pop
13fc0     FF 16 02 F6 | 	mov	arg03, result3
13fc4     A7 FA 61 FC | 	wrlong	result1, fp
13fc8     04 4E 05 F1 | 	add	fp, #4
13fcc     A7 FC 61 FC | 	wrlong	result2, fp
13fd0     04 4E 05 F1 | 	add	fp, #4
13fd4     A7 16 62 FC | 	wrlong	arg03, fp
13fd8     08 4E 85 F1 | 	sub	fp, #8
13fdc     A7 12 02 F6 | 	mov	arg01, fp
13fe0     E0 8A BF FD | 	call	#_converttoint
13fe4     FD 16 02 F6 | 	mov	arg03, result1
13fe8     14 4E 05 F1 | 	add	fp, #20
13fec     A7 16 62 FC | 	wrlong	arg03, fp
13ff0     14 4E 85 F1 | 	sub	fp, #20
13ff4     E8 88 BF FD | 	call	#_pop
13ff8     FF 16 02 F6 | 	mov	arg03, result3
13ffc     A7 FA 61 FC | 	wrlong	result1, fp
14000     04 4E 05 F1 | 	add	fp, #4
14004     A7 FC 61 FC | 	wrlong	result2, fp
14008     04 4E 05 F1 | 	add	fp, #4
1400c     A7 16 62 FC | 	wrlong	arg03, fp
14010     08 4E 85 F1 | 	sub	fp, #8
14014     A7 12 02 F6 | 	mov	arg01, fp
14018     A8 8A BF FD | 	call	#_converttoint
1401c     FD 16 02 F6 | 	mov	arg03, result1
14020     10 4E 05 F1 | 	add	fp, #16
14024     A7 16 62 FC | 	wrlong	arg03, fp
14028     10 4E 85 F1 | 	sub	fp, #16
1402c     B0 88 BF FD | 	call	#_pop
14030     FF 16 02 F6 | 	mov	arg03, result3
14034     A7 FA 61 FC | 	wrlong	result1, fp
14038     04 4E 05 F1 | 	add	fp, #4
1403c     A7 FC 61 FC | 	wrlong	result2, fp
14040     04 4E 05 F1 | 	add	fp, #4
14044     A7 16 62 FC | 	wrlong	arg03, fp
14048                 | ' t1=pop() : arg2=converttoint(t1)
14048                 | ' t1=pop() : arg1=converttoint(t1)
14048                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14048     08 4E 85 F1 | 	sub	fp, #8
1404c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14050     18 00 90 5D |  if_ne	jmp	#LR__1671
14054     A7 12 02 FB | 	rdlong	arg01, fp
14058     FC 89 BF FD | 	call	#_convertstring
1405c     A7 FA 61 FC | 	wrlong	result1, fp
14060     08 4E 05 F1 | 	add	fp, #8
14064     A7 3E 68 FC | 	wrlong	#31, fp
14068     08 4E 85 F1 | 	sub	fp, #8
1406c                 | LR__1671
1406c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
1406c     08 4E 05 F1 | 	add	fp, #8
14070     A7 16 02 FB | 	rdlong	arg03, fp
14074     08 4E 85 F1 | 	sub	fp, #8
14078     1F 16 0E F2 | 	cmp	arg03, #31 wz
1407c     40 00 90 AD |  if_e	jmp	#LR__1672
14080     00 12 06 F6 | 	mov	arg01, #0
14084     34 4C B1 FD | 	call	#__system___getiolock_0558
14088     FD 12 02 F6 | 	mov	arg01, result1
1408c     04 EF B0 FD | 	call	#__system___lockmem
14090     9A 01 00 FF 
14094     2D 14 06 F6 | 	mov	arg02, ##@LR__5682
14098     00 12 06 F6 | 	mov	arg01, #0
1409c     00 16 06 F6 | 	mov	arg03, #0
140a0     E4 FB B0 FD | 	call	#__system___basic_print_string
140a4     00 12 06 F6 | 	mov	arg01, #0
140a8     10 4C B1 FD | 	call	#__system___getiolock_0558
140ac     FD 00 68 FC | 	wrlong	#0, result1
140b0     0F 12 06 F6 | 	mov	arg01, #15
140b4     00 14 06 F6 | 	mov	arg02, #0
140b8     48 B5 B0 FD | 	call	#_printerror
140bc     28 00 90 FD | 	jmp	#LR__1673
140c0                 | LR__1672
140c0     A7 12 02 FB | 	rdlong	arg01, fp
140c4     10 4E 05 F1 | 	add	fp, #16
140c8     A7 14 02 FB | 	rdlong	arg02, fp
140cc     04 4E 05 F1 | 	add	fp, #4
140d0     A7 16 02 FB | 	rdlong	arg03, fp
140d4     14 4E 85 F1 | 	sub	fp, #20
140d8     4C 10 B1 FD | 	call	#__system__Mid_S
140dc     A7 FA 61 FC | 	wrlong	result1, fp
140e0     A7 12 02 F6 | 	mov	arg01, fp
140e4     90 88 BF FD | 	call	#_push
140e8                 | LR__1673
140e8     A7 F0 03 F6 | 	mov	ptra, fp
140ec     B2 00 A0 FD | 	call	#popregs_
140f0                 | _do_mid_ret
140f0     2D 00 64 FD | 	ret
140f4                 | 
140f4                 | ' 
140f4                 | ' '-------------------- mkdir
140f4                 | ' 
140f4                 | ' sub do_mkdir
140f4                 | _do_mkdir
140f4     04 4A 05 F6 | 	mov	COUNT_, #4
140f8     A8 00 A0 FD | 	call	#pushregs_
140fc     E0 87 BF FD | 	call	#_pop
14100     FE 18 02 F6 | 	mov	arg04, result2
14104     FF 16 02 F6 | 	mov	arg03, result3
14108     FD 26 02 F6 | 	mov	local01, result1
1410c     0C 29 02 F6 | 	mov	local02, arg04
14110     0B 2B 02 F6 | 	mov	local03, arg03
14114                 | ' 
14114                 | ' t1=pop()
14114                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14114     2B 2A 0E F2 | 	cmp	local03, #43 wz
14118     10 00 90 5D |  if_ne	jmp	#LR__1680
1411c     13 13 02 F6 | 	mov	arg01, local01
14120     34 89 BF FD | 	call	#_convertstring
14124     FD 26 02 F6 | 	mov	local01, result1
14128     1F 2A 06 F6 | 	mov	local03, #31
1412c                 | LR__1680
1412c                 | ' if t1.result_type<>result_string then printerror(15): return
1412c     1F 2A 0E F2 | 	cmp	local03, #31 wz
14130     10 00 90 AD |  if_e	jmp	#LR__1681
14134     0F 12 06 F6 | 	mov	arg01, #15
14138     00 14 06 F6 | 	mov	arg02, #0
1413c     C4 B4 B0 FD | 	call	#_printerror
14140     64 00 90 FD | 	jmp	#LR__1683
14144                 | LR__1681
14144     13 13 02 F6 | 	mov	arg01, local01
14148     18 17 B1 FD | 	call	#__system___mkdir
1414c     FD 2C 0A F6 | 	mov	local04, result1 wz
14150                 | ' filename$=t1.result.sresult
14150                 | ' err=mkdir(filename$)
14150                 | ' 'err=geterr() : 
14150                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14150     54 00 90 AD |  if_e	jmp	#LR__1682
14154     00 12 06 F6 | 	mov	arg01, #0
14158     60 4B B1 FD | 	call	#__system___getiolock_0558
1415c     FD 12 02 F6 | 	mov	arg01, result1
14160     30 EE B0 FD | 	call	#__system___lockmem
14164     9A 01 00 FF 
14168     34 14 06 F6 | 	mov	arg02, ##@LR__5683
1416c     00 12 06 F6 | 	mov	arg01, #0
14170     00 16 06 F6 | 	mov	arg03, #0
14174     10 FB B0 FD | 	call	#__system___basic_print_string
14178     00 12 06 F6 | 	mov	arg01, #0
1417c     16 15 02 F6 | 	mov	arg02, local04
14180     00 16 06 F6 | 	mov	arg03, #0
14184     0A 18 06 F6 | 	mov	arg04, #10
14188     40 FB B0 FD | 	call	#__system___basic_print_integer
1418c     00 12 06 F6 | 	mov	arg01, #0
14190     0A 14 06 F6 | 	mov	arg02, #10
14194     00 16 06 F6 | 	mov	arg03, #0
14198     94 FA B0 FD | 	call	#__system___basic_print_char
1419c     00 12 06 F6 | 	mov	arg01, #0
141a0     18 4B B1 FD | 	call	#__system___getiolock_0558
141a4     FD 00 68 FC | 	wrlong	#0, result1
141a8                 | LR__1682
141a8                 | LR__1683
141a8     A7 F0 03 F6 | 	mov	ptra, fp
141ac     B2 00 A0 FD | 	call	#popregs_
141b0                 | _do_mkdir_ret
141b0     2D 00 64 FD | 	ret
141b4                 | 
141b4                 | ' 
141b4                 | ' '-------------------- mode
141b4                 | ' 
141b4                 | ' sub do_mode
141b4                 | _do_mode
141b4     05 4A 05 F6 | 	mov	COUNT_, #5
141b8     A8 00 A0 FD | 	call	#pushregs_
141bc     20 87 BF FD | 	call	#_pop
141c0     FD 26 02 F6 | 	mov	local01, result1
141c4     FE 28 02 F6 | 	mov	local02, result2
141c8     FF 2A 02 F6 | 	mov	local03, result3
141cc                 | ' t1=pop() 
141cc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
141cc     1E 2A 0E F2 | 	cmp	local03, #30 wz
141d0     10 00 90 5D |  if_ne	jmp	#LR__1690
141d4     13 13 02 F6 | 	mov	arg01, local01
141d8     00 14 06 F6 | 	mov	arg02, #0
141dc     F4 20 B1 FD | 	call	#__system___float_tointeger
141e0     FD 26 02 F6 | 	mov	local01, result1
141e4                 | LR__1690
141e4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
141e4     1F 2A 0E F2 | 	cmp	local03, #31 wz
141e8     18 00 90 5D |  if_ne	jmp	#LR__1691
141ec     13 13 02 F6 | 	mov	arg01, local01
141f0     24 24 B1 FD | 	call	#__system____builtin_atof
141f4     FD 12 02 F6 | 	mov	arg01, result1
141f8     00 14 06 F6 | 	mov	arg02, #0
141fc     D4 20 B1 FD | 	call	#__system___float_tointeger
14200     FD 26 02 F6 | 	mov	local01, result1
14204                 | LR__1691
14204                 | ' select case t1.result.iresult
14204     13 2D 02 F6 | 	mov	local04, local01
14208     05 2C 26 F3 | 	fle	local04, #5
1420c     30 2C 62 FD | 	jmprel	local04
14210                 | LR__1692
14210     14 00 90 FD | 	jmp	#LR__1693
14214     A8 00 90 FD | 	jmp	#LR__1694
14218     10 01 90 FD | 	jmp	#LR__1695
1421c     78 01 90 FD | 	jmp	#LR__1696
14220     E0 01 90 FD | 	jmp	#LR__1697
14224     70 02 90 FD | 	jmp	#LR__1698
14228                 | LR__1693
14228     37 00 00 FF 
1422c     40 E4 05 F1 | 	add	objptr, ##28224
14230     F2 02 68 FC | 	wrlong	#1, objptr
14234     04 E4 85 F1 | 	sub	objptr, #4
14238     F2 34 69 FC | 	wrlong	#154, objptr
1423c     19 00 00 FF 
14240     D8 E4 05 F1 | 	add	objptr, ##13016
14244     F2 02 68 FC | 	wrlong	#1, objptr
14248     19 00 00 FF 
1424c     DC E4 85 F1 | 	sub	objptr, ##13020
14250     F2 26 69 FC | 	wrlong	#147, objptr
14254     37 00 00 FF 
14258     38 E4 85 F1 | 	sub	objptr, ##28216
1425c     04 12 06 F6 | 	mov	arg01, #4
14260     A4 CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
14264     37 00 00 FF 
14268     3C E4 05 F1 | 	add	objptr, ##28220
1426c     F2 12 02 FB | 	rdlong	arg01, objptr
14270     04 E4 85 F1 | 	sub	objptr, #4
14274     F2 14 02 FB | 	rdlong	arg02, objptr
14278                 | ' 
14278                 | ' write_color:=ff
14278     36 00 00 FF 
1427c     F7 E5 85 F1 | 	sub	objptr, ##28151
14280     F2 12 62 FC | 	wrlong	arg01, objptr
14284                 | ' write_background:=bb
14284     04 E4 05 F1 | 	add	objptr, #4
14288     F2 14 62 FC | 	wrlong	arg02, objptr
1428c     01 00 00 FF 
14290     00 EA 05 F1 | 	add	ptr__dat__, ##512
14294     51 00 00 FF 
14298     73 E5 05 F1 | 	add	objptr, ##41843
1429c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
142a0     04 E4 85 F1 | 	sub	objptr, #4
142a4     03 00 80 FF 
142a8     F2 30 69 FC | 	wrlong	##1688, objptr
142ac     51 00 00 FF 
142b0     B4 E5 85 F1 | 	sub	objptr, ##41908
142b4     01 00 00 FF 
142b8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
142bc     D8 01 90 FD | 	jmp	#LR__1698
142c0                 | LR__1694
142c0     37 00 00 FF 
142c4     40 E4 05 F1 | 	add	objptr, ##28224
142c8     F2 00 68 FC | 	wrlong	#0, objptr
142cc     04 E4 85 F1 | 	sub	objptr, #4
142d0     F2 2E 68 FC | 	wrlong	#23, objptr
142d4     19 00 00 FF 
142d8     D8 E4 05 F1 | 	add	objptr, ##13016
142dc     F2 00 68 FC | 	wrlong	#0, objptr
142e0     19 00 00 FF 
142e4     DC E4 85 F1 | 	sub	objptr, ##13020
142e8     F2 00 68 FC | 	wrlong	#0, objptr
142ec     37 00 00 FF 
142f0     38 E4 85 F1 | 	sub	objptr, ##28216
142f4     00 12 06 F6 | 	mov	arg01, #0
142f8     0C CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
142fc     37 00 00 FF 
14300     3C E4 05 F1 | 	add	objptr, ##28220
14304     F2 12 02 FB | 	rdlong	arg01, objptr
14308     04 E4 85 F1 | 	sub	objptr, #4
1430c     F2 14 02 FB | 	rdlong	arg02, objptr
14310                 | ' 
14310                 | ' write_color:=ff
14310     36 00 00 FF 
14314     F7 E5 85 F1 | 	sub	objptr, ##28151
14318     F2 12 62 FC | 	wrlong	arg01, objptr
1431c                 | ' write_background:=bb
1431c     04 E4 05 F1 | 	add	objptr, #4
14320     F2 14 62 FC | 	wrlong	arg02, objptr
14324     45 E4 85 F1 | 	sub	objptr, #69
14328     6C 01 90 FD | 	jmp	#LR__1698
1432c                 | LR__1695
1432c     37 00 00 FF 
14330     40 E4 05 F1 | 	add	objptr, ##28224
14334     F2 00 68 FC | 	wrlong	#0, objptr
14338     04 E4 85 F1 | 	sub	objptr, #4
1433c     F2 6A 69 FC | 	wrlong	#181, objptr
14340     19 00 00 FF 
14344     D8 E4 05 F1 | 	add	objptr, ##13016
14348     F2 00 68 FC | 	wrlong	#0, objptr
1434c     19 00 00 FF 
14350     DC E4 85 F1 | 	sub	objptr, ##13020
14354     F2 00 68 FC | 	wrlong	#0, objptr
14358     37 00 00 FF 
1435c     38 E4 85 F1 | 	sub	objptr, ##28216
14360     00 12 06 F6 | 	mov	arg01, #0
14364     A0 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
14368     37 00 00 FF 
1436c     3C E4 05 F1 | 	add	objptr, ##28220
14370     F2 12 02 FB | 	rdlong	arg01, objptr
14374     04 E4 85 F1 | 	sub	objptr, #4
14378     F2 14 02 FB | 	rdlong	arg02, objptr
1437c                 | ' 
1437c                 | ' write_color:=ff
1437c     36 00 00 FF 
14380     F7 E5 85 F1 | 	sub	objptr, ##28151
14384     F2 12 62 FC | 	wrlong	arg01, objptr
14388                 | ' write_background:=bb
14388     04 E4 05 F1 | 	add	objptr, #4
1438c     F2 14 62 FC | 	wrlong	arg02, objptr
14390     45 E4 85 F1 | 	sub	objptr, #69
14394     00 01 90 FD | 	jmp	#LR__1698
14398                 | LR__1696
14398     37 00 00 FF 
1439c     40 E4 05 F1 | 	add	objptr, ##28224
143a0     F2 00 68 FC | 	wrlong	#0, objptr
143a4     04 E4 85 F1 | 	sub	objptr, #4
143a8     F2 1E 68 FC | 	wrlong	#15, objptr
143ac     19 00 00 FF 
143b0     D8 E4 05 F1 | 	add	objptr, ##13016
143b4     F2 00 68 FC | 	wrlong	#0, objptr
143b8     19 00 00 FF 
143bc     DC E4 85 F1 | 	sub	objptr, ##13020
143c0     F2 00 68 FC | 	wrlong	#0, objptr
143c4     37 00 00 FF 
143c8     38 E4 85 F1 | 	sub	objptr, ##28216
143cc     00 12 06 F6 | 	mov	arg01, #0
143d0     34 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
143d4     37 00 00 FF 
143d8     3C E4 05 F1 | 	add	objptr, ##28220
143dc     F2 12 02 FB | 	rdlong	arg01, objptr
143e0     04 E4 85 F1 | 	sub	objptr, #4
143e4     F2 14 02 FB | 	rdlong	arg02, objptr
143e8                 | ' 
143e8                 | ' write_color:=ff
143e8     36 00 00 FF 
143ec     F7 E5 85 F1 | 	sub	objptr, ##28151
143f0     F2 12 62 FC | 	wrlong	arg01, objptr
143f4                 | ' write_background:=bb
143f4     04 E4 05 F1 | 	add	objptr, #4
143f8     F2 14 62 FC | 	wrlong	arg02, objptr
143fc     45 E4 85 F1 | 	sub	objptr, #69
14400     94 00 90 FD | 	jmp	#LR__1698
14404                 | LR__1697
14404     37 00 00 FF 
14408     40 E4 05 F1 | 	add	objptr, ##28224
1440c     F2 02 68 FC | 	wrlong	#1, objptr
14410     04 E4 85 F1 | 	sub	objptr, #4
14414     F2 02 68 FC | 	wrlong	#1, objptr
14418     19 00 00 FF 
1441c     D8 E4 05 F1 | 	add	objptr, ##13016
14420     F2 02 68 FC | 	wrlong	#1, objptr
14424     19 00 00 FF 
14428     DC E4 85 F1 | 	sub	objptr, ##13020
1442c     F2 1C 68 FC | 	wrlong	#14, objptr
14430     37 00 00 FF 
14434     38 E4 85 F1 | 	sub	objptr, ##28216
14438     04 12 06 F6 | 	mov	arg01, #4
1443c     C8 CD B0 FD | 	call	#_hg010b_spin2_setfontfamily
14440     37 00 00 FF 
14444     3C E4 05 F1 | 	add	objptr, ##28220
14448     F2 12 02 FB | 	rdlong	arg01, objptr
1444c     04 E4 85 F1 | 	sub	objptr, #4
14450     F2 14 02 FB | 	rdlong	arg02, objptr
14454                 | ' 
14454                 | ' write_color:=ff
14454     36 00 00 FF 
14458     F7 E5 85 F1 | 	sub	objptr, ##28151
1445c     F2 12 62 FC | 	wrlong	arg01, objptr
14460                 | ' write_background:=bb
14460     04 E4 05 F1 | 	add	objptr, #4
14464     F2 14 62 FC | 	wrlong	arg02, objptr
14468     07 00 00 FF 
1446c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
14470     51 00 00 FF 
14474     73 E5 05 F1 | 	add	objptr, ##41843
14478     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1447c     04 E4 85 F1 | 	sub	objptr, #4
14480     03 00 80 FF 
14484     F2 30 69 FC | 	wrlong	##1688, objptr
14488     51 00 00 FF 
1448c     B4 E5 85 F1 | 	sub	objptr, ##41908
14490     07 00 00 FF 
14494     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
14498                 | LR__1698
14498     51 00 00 FF 
1449c     B0 E5 05 F1 | 	add	objptr, ##41904
144a0     F2 26 62 FC | 	wrlong	local01, objptr
144a4     04 E4 85 F1 | 	sub	objptr, #4
144a8     F2 12 02 FB | 	rdlong	arg01, objptr
144ac     0E 00 00 FF 
144b0     50 E5 85 F1 | 	sub	objptr, ##7504
144b4     F2 2E 02 FB | 	rdlong	local05, objptr
144b8     43 00 00 FF 
144bc     5C E4 85 F1 | 	sub	objptr, ##34396
144c0     17 13 82 F1 | 	sub	arg01, local05
144c4     00 14 06 F6 | 	mov	arg02, #0
144c8     0A 16 06 F6 | 	mov	arg03, #10
144cc     94 0D B1 FD | 	call	#__system__Number_S
144d0     FD 12 02 F6 | 	mov	arg01, result1
144d4     9A 01 00 FF 
144d8     5D 14 06 F6 | 	mov	arg02, ##@LR__5684
144dc     10 EB B0 FD | 	call	#__system___string_concat
144e0     50 00 00 FF 
144e4     10 E5 05 F1 | 	add	objptr, ##41232
144e8     F2 FA 61 FC | 	wrlong	result1, objptr
144ec     19 00 00 FF 
144f0     D4 E4 85 F1 | 	sub	objptr, ##13012
144f4     F2 12 02 FB | 	rdlong	arg01, objptr
144f8     04 E4 85 F1 | 	sub	objptr, #4
144fc     F2 14 02 FB | 	rdlong	arg02, objptr
14500     37 00 00 FF 
14504     38 E4 85 F1 | 	sub	objptr, ##28216
14508     4C CE B0 FD | 	call	#_hg010b_spin2_cls
1450c     9A 01 00 FF 
14510     6F 12 06 F6 | 	mov	arg01, ##@LR__5685
14514                 | ' 
14514                 | ' write(text)
14514     00 D2 B0 FD | 	call	#_hg010b_spin2_write
14518                 | ' crlf
14518     FC D6 B0 FD | 	call	#_hg010b_spin2_crlf
1451c     18 00 00 FF 
14520     40 EB 05 F1 | 	add	ptr__dat__, ##12608
14524     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
14528     18 00 00 FF 
1452c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
14530                 | ' 
14530                 | ' write(text)
14530     E4 D1 B0 FD | 	call	#_hg010b_spin2_write
14534                 | ' crlf
14534     E0 D6 B0 FD | 	call	#_hg010b_spin2_crlf
14538     50 00 00 FF 
1453c     10 E5 05 F1 | 	add	objptr, ##41232
14540     F2 12 02 FB | 	rdlong	arg01, objptr
14544     50 00 00 FF 
14548     10 E5 85 F1 | 	sub	objptr, ##41232
1454c                 | ' 
1454c                 | ' write(text)
1454c     C8 D1 B0 FD | 	call	#_hg010b_spin2_write
14550                 | ' crlf
14550     C4 D6 B0 FD | 	call	#_hg010b_spin2_crlf
14554     A7 F0 03 F6 | 	mov	ptra, fp
14558     B2 00 A0 FD | 	call	#popregs_
1455c                 | _do_mode_ret
1455c     2D 00 64 FD | 	ret
14560                 | 
14560                 | ' 
14560                 | ' '-------------------- mouse
14560                 | ' 
14560                 | ' sub do_mouse
14560                 | _do_mouse
14560     7C 83 BF FD | 	call	#_pop
14564     00 FA 4D F2 | 	cmps	result1, #0 wz
14568                 | ' 
14568                 | ' t1=pop()
14568                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
14568     14 00 90 5D |  if_ne	jmp	#LR__1700
1456c     10 12 06 F6 | 	mov	arg01, #16
14570     00 14 06 F6 | 	mov	arg02, #0
14574     00 16 06 F6 | 	mov	arg03, #0
14578     BC C0 B0 FD | 	call	#_hg010b_spin2_setspritesize
1457c     10 00 90 FD | 	jmp	#LR__1701
14580                 | LR__1700
14580     10 12 06 F6 | 	mov	arg01, #16
14584     20 14 06 F6 | 	mov	arg02, #32
14588     20 16 06 F6 | 	mov	arg03, #32
1458c     A8 C0 B0 FD | 	call	#_hg010b_spin2_setspritesize
14590                 | LR__1701
14590                 | _do_mouse_ret
14590     2D 00 64 FD | 	ret
14594                 | 
14594                 | ' 
14594                 | ' '-------------------- mousek
14594                 | ' 
14594                 | ' sub do_mousek
14594                 | _do_mousek
14594     00 4A 05 F6 | 	mov	COUNT_, #0
14598     A8 00 A0 FD | 	call	#pushregs_
1459c     0C F0 07 F1 | 	add	ptra, #12
145a0     08 4E 05 F1 | 	add	fp, #8
145a4     A7 3A 68 FC | 	wrlong	#29, fp
145a8     08 4E 85 F1 | 	sub	fp, #8
145ac     51 00 00 FF 
145b0     28 E5 05 F1 | 	add	objptr, ##41768
145b4     F2 12 02 FB | 	rdlong	arg01, objptr
145b8     51 00 00 FF 
145bc     28 E5 85 F1 | 	sub	objptr, ##41768
145c0     A7 12 62 FC | 	wrlong	arg01, fp
145c4     A7 12 02 F6 | 	mov	arg01, fp
145c8     AC 83 BF FD | 	call	#_push
145cc     A7 F0 03 F6 | 	mov	ptra, fp
145d0     B2 00 A0 FD | 	call	#popregs_
145d4                 | _do_mousek_ret
145d4     2D 00 64 FD | 	ret
145d8                 | 
145d8                 | ' 
145d8                 | ' '-------------------- mousew
145d8                 | ' 
145d8                 | ' sub do_mousew
145d8                 | _do_mousew
145d8     00 4A 05 F6 | 	mov	COUNT_, #0
145dc     A8 00 A0 FD | 	call	#pushregs_
145e0     0C F0 07 F1 | 	add	ptra, #12
145e4     08 4E 05 F1 | 	add	fp, #8
145e8     A7 38 68 FC | 	wrlong	#28, fp
145ec     08 4E 85 F1 | 	sub	fp, #8
145f0     51 00 00 FF 
145f4     2C E5 05 F1 | 	add	objptr, ##41772
145f8     F2 12 02 FB | 	rdlong	arg01, objptr
145fc     51 00 00 FF 
14600     2C E5 85 F1 | 	sub	objptr, ##41772
14604     A7 12 62 FC | 	wrlong	arg01, fp
14608     A7 12 02 F6 | 	mov	arg01, fp
1460c     68 83 BF FD | 	call	#_push
14610     A7 F0 03 F6 | 	mov	ptra, fp
14614     B2 00 A0 FD | 	call	#popregs_
14618                 | _do_mousew_ret
14618     2D 00 64 FD | 	ret
1461c                 | 
1461c                 | ' 
1461c                 | ' '-------------------- mousex
1461c                 | ' 
1461c                 | ' sub do_mousex
1461c                 | _do_mousex
1461c     00 4A 05 F6 | 	mov	COUNT_, #0
14620     A8 00 A0 FD | 	call	#pushregs_
14624     0C F0 07 F1 | 	add	ptra, #12
14628     08 4E 05 F1 | 	add	fp, #8
1462c     A7 3A 68 FC | 	wrlong	#29, fp
14630     08 4E 85 F1 | 	sub	fp, #8
14634     51 00 00 FF 
14638     20 E5 05 F1 | 	add	objptr, ##41760
1463c     F2 12 02 FB | 	rdlong	arg01, objptr
14640     51 00 00 FF 
14644     20 E5 85 F1 | 	sub	objptr, ##41760
14648     A7 12 62 FC | 	wrlong	arg01, fp
1464c     A7 12 02 F6 | 	mov	arg01, fp
14650     24 83 BF FD | 	call	#_push
14654     A7 F0 03 F6 | 	mov	ptra, fp
14658     B2 00 A0 FD | 	call	#popregs_
1465c                 | _do_mousex_ret
1465c     2D 00 64 FD | 	ret
14660                 | 
14660                 | ' 
14660                 | ' '-------------------- mousey
14660                 | ' 
14660                 | ' sub do_mousey
14660                 | _do_mousey
14660     00 4A 05 F6 | 	mov	COUNT_, #0
14664     A8 00 A0 FD | 	call	#pushregs_
14668     0C F0 07 F1 | 	add	ptra, #12
1466c     08 4E 05 F1 | 	add	fp, #8
14670     A7 3A 68 FC | 	wrlong	#29, fp
14674     08 4E 85 F1 | 	sub	fp, #8
14678     51 00 00 FF 
1467c     24 E5 05 F1 | 	add	objptr, ##41764
14680     F2 12 02 FB | 	rdlong	arg01, objptr
14684     51 00 00 FF 
14688     24 E5 85 F1 | 	sub	objptr, ##41764
1468c     A7 12 62 FC | 	wrlong	arg01, fp
14690     A7 12 02 F6 | 	mov	arg01, fp
14694     E0 82 BF FD | 	call	#_push
14698     A7 F0 03 F6 | 	mov	ptra, fp
1469c     B2 00 A0 FD | 	call	#popregs_
146a0                 | _do_mousey_ret
146a0     2D 00 64 FD | 	ret
146a4                 | 
146a4                 | ' 
146a4                 | ' '------------------ new
146a4                 | ' 
146a4                 | ' sub do_new
146a4                 | _do_new
146a4     03 4A 05 F6 | 	mov	COUNT_, #3
146a8     A8 00 A0 FD | 	call	#pushregs_
146ac                 | ' 
146ac                 | ' if inrun=1 then inrun=2
146ac     50 00 00 FF 
146b0     EC E4 05 F1 | 	add	objptr, ##41196
146b4     F2 16 02 FB | 	rdlong	arg03, objptr
146b8     50 00 00 FF 
146bc     EC E4 85 F1 | 	sub	objptr, ##41196
146c0     01 16 0E F2 | 	cmp	arg03, #1 wz
146c4     50 00 00 AF 
146c8     EC E4 05 A1 |  if_e	add	objptr, ##41196
146cc     F2 04 68 AC |  if_e	wrlong	#2, objptr
146d0     50 00 00 AF 
146d4     EC E4 85 A1 |  if_e	sub	objptr, ##41196
146d8     13 12 C6 F9 | 	decod	arg01, #19
146dc     01 14 66 F6 | 	neg	arg02, #1
146e0     AC B0 B0 FD | 	call	#_pslpoke
146e4     35 00 00 FF 
146e8     08 E4 05 F1 | 	add	objptr, ##27144
146ec     F2 00 68 FC | 	wrlong	#0, objptr
146f0                 | ' pslpoke(memlo,$FFFFFFFF)
146f0                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
146f0     00 26 06 F6 | 	mov	local01, #0
146f4     20 00 00 FF 
146f8     10 E4 85 F1 | 	sub	objptr, ##16400
146fc     97 1E 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
14700                 | LR__1710
14700     13 17 02 F6 | 	mov	arg03, local01
14704     04 16 66 F0 | 	shl	arg03, #4
14708     F2 16 02 F1 | 	add	arg03, objptr
1470c     9A 01 00 FF 
14710     70 14 06 F6 | 	mov	arg02, ##@LR__5686
14714     0B 15 62 FC | 	wrlong	arg02, arg03
14718     13 29 02 F6 | 	mov	local02, local01
1471c     04 28 66 F0 | 	shl	local02, #4
14720     F2 28 02 F1 | 	add	local02, objptr
14724     0C 28 06 F1 | 	add	local02, #12
14728     14 01 68 FC | 	wrlong	#0, local02
1472c     01 26 06 F1 | 	add	local01, #1
14730     02 00 00 FF 
14734     01 26 56 F2 | 	cmps	local01, ##1025 wc
14738     C4 FF 9F CD |  if_b	jmp	#LR__1710
1473c                 | LR__1711
1473c     35 00 00 FF 
14740     90 E4 05 F1 | 	add	objptr, ##27280
14744     00 04 80 FF 
14748     F2 00 68 FC | 	wrlong	##524288, objptr
1474c     06 00 00 FF 
14750     30 E4 05 F1 | 	add	objptr, ##3120
14754     00 04 80 FF 
14758     F2 00 68 FC | 	wrlong	##524288, objptr
1475c     04 E4 05 F1 | 	add	objptr, #4
14760     00 04 80 FF 
14764     F2 00 68 FC | 	wrlong	##524288, objptr
14768     0D 00 00 FF 
1476c     64 E4 85 F1 | 	sub	objptr, ##6756
14770     F2 00 68 FC | 	wrlong	#0, objptr
14774     07 00 00 FF 
14778     24 E4 05 F1 | 	add	objptr, ##3620
1477c     F2 00 68 FC | 	wrlong	#0, objptr
14780     07 00 00 FF 
14784     20 E4 85 F1 | 	sub	objptr, ##3616
14788     00 04 80 FF 
1478c     F2 00 68 FC | 	wrlong	##524288, objptr
14790     07 00 00 FF 
14794     30 E4 05 F1 | 	add	objptr, ##3632
14798     F2 00 68 FC | 	wrlong	#0, objptr
1479c     04 E4 05 F1 | 	add	objptr, #4
147a0     FF FF FF FF 
147a4     F2 FE 6B FC | 	wrlong	##-1, objptr
147a8     06 00 00 FF 
147ac     78 E4 05 F1 | 	add	objptr, ##3192
147b0     F2 00 68 FC | 	wrlong	#0, objptr
147b4     04 E4 05 F1 | 	add	objptr, #4
147b8     F2 00 68 FC | 	wrlong	#0, objptr
147bc                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
147bc                 | ' stackpointer=0
147bc                 | ' lineptr=0 
147bc                 | ' programptr=memlo ': stringptr=0
147bc                 | ' 
147bc                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
147bc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
147bc     00 26 06 F6 | 	mov	local01, #0
147c0     06 00 00 FF 
147c4     74 E4 85 F1 | 	sub	objptr, ##3188
147c8     97 16 48 FB | 	callpa	#(@LR__1713-@LR__1712)>>2,fcache_load_ptr_
147cc                 | LR__1712
147cc     13 29 02 F6 | 	mov	local02, local01
147d0     02 28 66 F0 | 	shl	local02, #2
147d4     13 29 02 F1 | 	add	local02, local01
147d8     02 28 66 F0 | 	shl	local02, #2
147dc     F2 28 02 F1 | 	add	local02, objptr
147e0     08 28 06 F1 | 	add	local02, #8
147e4     FF FF FF FF 
147e8     14 FF 6B FC | 	wrlong	##-1, local02
147ec     01 26 06 F1 | 	add	local01, #1
147f0     41 26 56 F2 | 	cmps	local01, #65 wc
147f4     D4 FF 9F CD |  if_b	jmp	#LR__1712
147f8                 | LR__1713
147f8     4A 00 00 FF 
147fc     98 E4 85 F1 | 	sub	objptr, ##38040
14800                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
14800     00 26 06 F6 | 	mov	local01, #0
14804                 | LR__1714
14804     13 29 02 F6 | 	mov	local02, local01
14808     02 28 66 F0 | 	shl	local02, #2
1480c     51 00 00 FF 
14810     68 E5 05 F1 | 	add	objptr, ##41832
14814     F2 28 02 F1 | 	add	local02, objptr
14818     14 2B 0A FB | 	rdlong	local03, local02 wz
1481c     51 00 00 FF 
14820     68 E5 85 F1 | 	sub	objptr, ##41832
14824     34 00 90 AD |  if_e	jmp	#LR__1715
14828     13 13 02 F6 | 	mov	arg01, local01
1482c     00 14 06 F6 | 	mov	arg02, #0
14830     00 16 06 F6 | 	mov	arg03, #0
14834     00 BE B0 FD | 	call	#_hg010b_spin2_setspritesize
14838     13 29 02 F6 | 	mov	local02, local01
1483c     02 28 66 F0 | 	shl	local02, #2
14840     51 00 00 FF 
14844     68 E5 05 F1 | 	add	objptr, ##41832
14848     F2 28 02 F1 | 	add	local02, objptr
1484c     14 13 02 FB | 	rdlong	arg01, local02
14850     51 00 00 FF 
14854     68 E5 85 F1 | 	sub	objptr, ##41832
14858     14 2A B1 FD | 	call	#__system___gc_free
1485c                 | LR__1715
1485c     01 26 06 F1 | 	add	local01, #1
14860     10 26 56 F2 | 	cmps	local01, #16 wc
14864     9C FF 9F CD |  if_b	jmp	#LR__1714
14868     51 00 00 FF 
1486c     BC E5 05 F1 | 	add	objptr, ##41916
14870     00 C0 9F FF 
14874     F2 00 68 FC | 	wrlong	##1065353216, objptr
14878     04 E4 05 F1 | 	add	objptr, #4
1487c     00 C0 9F FF 
14880     F2 00 68 FC | 	wrlong	##1065353216, objptr
14884     51 00 00 FF 
14888     BC E5 85 F1 | 	sub	objptr, ##41916
1488c     F2 2A 02 FB | 	rdlong	local03, objptr
14890     51 00 00 FF 
14894     A8 E5 05 F1 | 	add	objptr, ##41896
14898     F2 2A 62 FC | 	wrlong	local03, objptr
1489c     51 00 00 FF 
148a0     AC E5 85 F1 | 	sub	objptr, ##41900
148a4     11 12 06 F6 | 	mov	arg01, #17
148a8     08 14 06 F6 | 	mov	arg02, #8
148ac     10 16 06 F6 | 	mov	arg03, #16
148b0     84 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
148b4     10 12 06 F6 | 	mov	arg01, #16
148b8     20 14 06 F6 | 	mov	arg02, #32
148bc     20 16 06 F6 | 	mov	arg03, #32
148c0     74 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
148c4     9A 01 00 FF 
148c8     71 2A 06 F6 | 	mov	local03, ##@LR__5687
148cc     51 00 00 FF 
148d0     D8 E5 05 F1 | 	add	objptr, ##41944
148d4     F2 2A 62 FC | 	wrlong	local03, objptr
148d8     51 00 00 FF 
148dc     D8 E5 85 F1 | 	sub	objptr, ##41944
148e0     38 A1 B0 FD | 	call	#_init_audio
148e4     A7 F0 03 F6 | 	mov	ptra, fp
148e8     B2 00 A0 FD | 	call	#popregs_
148ec                 | _do_new_ret
148ec     2D 00 64 FD | 	ret
148f0                 | 
148f0                 | ' 
148f0                 | ' '-------------------- next
148f0                 | ' 
148f0                 | ' sub do_next()
148f0                 | _do_next
148f0     04 4A 05 F6 | 	mov	COUNT_, #4
148f4     A8 00 A0 FD | 	call	#pushregs_
148f8     E4 7F BF FD | 	call	#_pop
148fc     FD 26 02 F6 | 	mov	local01, result1
14900     FE 28 02 F6 | 	mov	local02, result2
14904     FF 2A 02 F6 | 	mov	local03, result3
14908                 | ' t1=pop() :varnum=t1.result.uresult
14908                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
14908     50 00 00 FF 
1490c     08 E5 05 F1 | 	add	objptr, ##41224
14910     F2 14 02 FB | 	rdlong	arg02, objptr
14914     0A 13 02 F6 | 	mov	arg01, arg02
14918     02 12 66 F0 | 	shl	arg01, #2
1491c     0A 13 02 F1 | 	add	arg01, arg02
14920     02 12 66 F0 | 	shl	arg01, #2
14924     06 00 00 FF 
14928     70 E4 85 F1 | 	sub	objptr, ##3184
1492c     F2 12 02 F1 | 	add	arg01, objptr
14930     08 12 06 F1 | 	add	arg01, #8
14934     09 15 02 FB | 	rdlong	arg02, arg01
14938     13 15 0A F2 | 	cmp	arg02, local01 wz
1493c     4A 00 00 FF 
14940     98 E4 85 F1 | 	sub	objptr, ##38040
14944     10 00 90 AD |  if_e	jmp	#LR__1720
14948     25 12 06 F6 | 	mov	arg01, #37
1494c     00 14 06 F6 | 	mov	arg02, #0
14950     B0 AC B0 FD | 	call	#_printerror
14954     54 03 90 FD | 	jmp	#LR__1727
14958                 | LR__1720
14958                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
14958     13 15 02 F6 | 	mov	arg02, local01
1495c     04 14 66 F0 | 	shl	arg02, #4
14960     14 00 00 FF 
14964     F8 E5 05 F1 | 	add	objptr, ##10744
14968     F2 14 02 F1 | 	add	arg02, objptr
1496c     0C 14 06 F1 | 	add	arg02, #12
14970     0A 15 02 FB | 	rdlong	arg02, arg02
14974     1E 14 0E F2 | 	cmp	arg02, #30 wz
14978     14 00 00 FF 
1497c     F8 E5 85 F1 | 	sub	objptr, ##10744
14980     54 00 90 5D |  if_ne	jmp	#LR__1721
14984     13 15 02 F6 | 	mov	arg02, local01
14988     04 14 66 F0 | 	shl	arg02, #4
1498c     14 00 00 FF 
14990     F8 E5 05 F1 | 	add	objptr, ##10744
14994     F2 14 02 F1 | 	add	arg02, objptr
14998     0C 14 06 F1 | 	add	arg02, #12
1499c     0A 39 68 FC | 	wrlong	#28, arg02
149a0     13 2D 02 F6 | 	mov	local04, local01
149a4     04 2C 66 F0 | 	shl	local04, #4
149a8     F2 2C 02 F1 | 	add	local04, objptr
149ac     13 15 02 F6 | 	mov	arg02, local01
149b0     04 14 66 F0 | 	shl	arg02, #4
149b4     F2 14 02 F1 | 	add	arg02, objptr
149b8     04 14 06 F1 | 	add	arg02, #4
149bc     0A 13 02 FB | 	rdlong	arg01, arg02
149c0     14 00 00 FF 
149c4     F8 E5 85 F1 | 	sub	objptr, ##10744
149c8     01 14 06 F6 | 	mov	arg02, #1
149cc     04 19 B1 FD | 	call	#__system___float_tointeger
149d0     04 2C 06 F1 | 	add	local04, #4
149d4     16 FB 61 FC | 	wrlong	result1, local04
149d8                 | LR__1721
149d8     50 00 00 FF 
149dc     08 E5 05 F1 | 	add	objptr, ##41224
149e0     F2 2C 02 FB | 	rdlong	local04, objptr
149e4     16 15 02 F6 | 	mov	arg02, local04
149e8     02 14 66 F0 | 	shl	arg02, #2
149ec     16 15 02 F1 | 	add	arg02, local04
149f0     02 14 66 F0 | 	shl	arg02, #2
149f4     06 00 00 FF 
149f8     70 E4 85 F1 | 	sub	objptr, ##3184
149fc     F2 14 02 F1 | 	add	arg02, objptr
14a00     0C 14 06 F1 | 	add	arg02, #12
14a04     0A FF 01 FB | 	rdlong	result3, arg02
14a08     13 2D 02 F6 | 	mov	local04, local01
14a0c     04 2C 66 F0 | 	shl	local04, #4
14a10     35 00 00 FF 
14a14     A0 E4 85 F1 | 	sub	objptr, ##27296
14a18     F2 2C 02 F1 | 	add	local04, objptr
14a1c     13 15 02 F6 | 	mov	arg02, local01
14a20     04 14 66 F0 | 	shl	arg02, #4
14a24     F2 14 02 F1 | 	add	arg02, objptr
14a28     04 14 06 F1 | 	add	arg02, #4
14a2c     0A 13 02 FB | 	rdlong	arg01, arg02
14a30     FF 12 02 F1 | 	add	arg01, result3
14a34     04 2C 06 F1 | 	add	local04, #4
14a38     16 13 62 FC | 	wrlong	arg01, local04
14a3c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
14a3c                 | ' if fortable(fortop).stepval>=0 then
14a3c     3B 00 00 FF 
14a40     10 E5 05 F1 | 	add	objptr, ##30480
14a44     F2 2C 02 FB | 	rdlong	local04, objptr
14a48     16 13 02 F6 | 	mov	arg01, local04
14a4c     02 12 66 F0 | 	shl	arg01, #2
14a50     16 13 02 F1 | 	add	arg01, local04
14a54     02 12 66 F0 | 	shl	arg01, #2
14a58     06 00 00 FF 
14a5c     70 E4 85 F1 | 	sub	objptr, ##3184
14a60     F2 12 02 F1 | 	add	arg01, objptr
14a64     0C 12 06 F1 | 	add	arg01, #12
14a68     09 13 02 FB | 	rdlong	arg01, arg01
14a6c     00 12 56 F2 | 	cmps	arg01, #0 wc
14a70     4A 00 00 FF 
14a74     98 E4 85 F1 | 	sub	objptr, ##38040
14a78     78 00 90 CD |  if_b	jmp	#LR__1722
14a7c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
14a7c     04 26 66 F0 | 	shl	local01, #4
14a80     14 00 00 FF 
14a84     F8 E5 05 F1 | 	add	objptr, ##10744
14a88     F2 26 02 F1 | 	add	local01, objptr
14a8c     3B 00 00 FF 
14a90     10 E5 05 F1 | 	add	objptr, ##30480
14a94     F2 12 02 FB | 	rdlong	arg01, objptr
14a98     09 2D 02 F6 | 	mov	local04, arg01
14a9c     02 2C 66 F0 | 	shl	local04, #2
14aa0     09 2D 02 F1 | 	add	local04, arg01
14aa4     02 2C 66 F0 | 	shl	local04, #2
14aa8     06 00 00 FF 
14aac     70 E4 85 F1 | 	sub	objptr, ##3184
14ab0     F2 2C 02 F1 | 	add	local04, objptr
14ab4     04 26 06 F1 | 	add	local01, #4
14ab8     13 27 02 FB | 	rdlong	local01, local01
14abc     10 2C 06 F1 | 	add	local04, #16
14ac0     16 2D 02 FB | 	rdlong	local04, local04
14ac4     16 27 5A F2 | 	cmps	local01, local04 wcz
14ac8     4A 00 00 FF 
14acc     98 E4 85 F1 | 	sub	objptr, ##38040
14ad0     9C 00 90 ED |  if_be	jmp	#LR__1724
14ad4     50 00 00 FF 
14ad8     08 E5 05 F1 | 	add	objptr, ##41224
14adc     F2 2C 02 FB | 	rdlong	local04, objptr
14ae0     01 2C 86 F1 | 	sub	local04, #1
14ae4     F2 2C 62 FC | 	wrlong	local04, objptr
14ae8     50 00 00 FF 
14aec     08 E5 85 F1 | 	sub	objptr, ##41224
14af0     B8 01 90 FD | 	jmp	#LR__1727
14af4                 | LR__1722
14af4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
14af4     13 2D 02 F6 | 	mov	local04, local01
14af8     04 2C 66 F0 | 	shl	local04, #4
14afc     14 00 00 FF 
14b00     F8 E5 05 F1 | 	add	objptr, ##10744
14b04     F2 2C 02 F1 | 	add	local04, objptr
14b08     3B 00 00 FF 
14b0c     10 E5 05 F1 | 	add	objptr, ##30480
14b10     F2 26 02 FB | 	rdlong	local01, objptr
14b14     13 13 02 F6 | 	mov	arg01, local01
14b18     02 12 66 F0 | 	shl	arg01, #2
14b1c     13 13 02 F1 | 	add	arg01, local01
14b20     02 12 66 F0 | 	shl	arg01, #2
14b24     06 00 00 FF 
14b28     70 E4 85 F1 | 	sub	objptr, ##3184
14b2c     F2 12 02 F1 | 	add	arg01, objptr
14b30     04 2C 06 F1 | 	add	local04, #4
14b34     16 2D 02 FB | 	rdlong	local04, local04
14b38     10 12 06 F1 | 	add	arg01, #16
14b3c     09 13 02 FB | 	rdlong	arg01, arg01
14b40     09 2D 52 F2 | 	cmps	local04, arg01 wc
14b44     4A 00 00 FF 
14b48     98 E4 85 F1 | 	sub	objptr, ##38040
14b4c     20 00 90 3D |  if_ae	jmp	#LR__1723
14b50     50 00 00 FF 
14b54     08 E5 05 F1 | 	add	objptr, ##41224
14b58     F2 2C 02 FB | 	rdlong	local04, objptr
14b5c     01 2C 86 F1 | 	sub	local04, #1
14b60     F2 2C 62 FC | 	wrlong	local04, objptr
14b64     50 00 00 FF 
14b68     08 E5 85 F1 | 	sub	objptr, ##41224
14b6c     3C 01 90 FD | 	jmp	#LR__1727
14b70                 | LR__1723
14b70                 | LR__1724
14b70                 | ' ' if not returned, goto pointer 
14b70                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
14b70     50 00 00 FF 
14b74     EC E4 05 F1 | 	add	objptr, ##41196
14b78     F2 2C 02 FB | 	rdlong	local04, objptr
14b7c     50 00 00 FF 
14b80     EC E4 85 F1 | 	sub	objptr, ##41196
14b84     01 2C 16 F2 | 	cmp	local04, #1 wc
14b88     DC 00 90 CD |  if_b	jmp	#LR__1725
14b8c     50 00 00 FF 
14b90     08 E5 05 F1 | 	add	objptr, ##41224
14b94     F2 2C 02 FB | 	rdlong	local04, objptr
14b98     16 27 02 F6 | 	mov	local01, local04
14b9c     02 26 66 F0 | 	shl	local01, #2
14ba0     16 27 02 F1 | 	add	local01, local04
14ba4     02 26 66 F0 | 	shl	local01, #2
14ba8     06 00 00 FF 
14bac     70 E4 85 F1 | 	sub	objptr, ##3184
14bb0     F2 26 02 F1 | 	add	local01, objptr
14bb4     06 00 00 FF 
14bb8     20 E4 05 F1 | 	add	objptr, ##3104
14bbc     F2 2C 02 FB | 	rdlong	local04, objptr
14bc0     50 00 00 FF 
14bc4     B8 E4 85 F1 | 	sub	objptr, ##41144
14bc8     13 27 02 FB | 	rdlong	local01, local01
14bcc     13 2D 0A F2 | 	cmp	local04, local01 wz
14bd0     94 00 90 AD |  if_e	jmp	#LR__1725
14bd4     50 00 00 FF 
14bd8     08 E5 05 F1 | 	add	objptr, ##41224
14bdc     F2 2C 02 FB | 	rdlong	local04, objptr
14be0     16 27 02 F6 | 	mov	local01, local04
14be4     02 26 66 F0 | 	shl	local01, #2
14be8     16 27 02 F1 | 	add	local01, local04
14bec     02 26 66 F0 | 	shl	local01, #2
14bf0     06 00 00 FF 
14bf4     70 E4 85 F1 | 	sub	objptr, ##3184
14bf8     F2 26 02 F1 | 	add	local01, objptr
14bfc     13 27 02 FB | 	rdlong	local01, local01
14c00     06 00 00 FF 
14c04     20 E4 05 F1 | 	add	objptr, ##3104
14c08     F2 26 62 FC | 	wrlong	local01, objptr
14c0c     50 E4 05 F1 | 	add	objptr, #80
14c10     F2 2C 02 FB | 	rdlong	local04, objptr
14c14     16 27 02 F6 | 	mov	local01, local04
14c18     02 26 66 F0 | 	shl	local01, #2
14c1c     16 27 02 F1 | 	add	local01, local04
14c20     02 26 66 F0 | 	shl	local01, #2
14c24     06 00 00 FF 
14c28     70 E4 85 F1 | 	sub	objptr, ##3184
14c2c     F2 26 02 F1 | 	add	local01, objptr
14c30     04 26 06 F1 | 	add	local01, #4
14c34     13 27 02 FB | 	rdlong	local01, local01
14c38     06 00 00 FF 
14c3c     24 E4 05 F1 | 	add	objptr, ##3108
14c40     F2 26 62 FC | 	wrlong	local01, objptr
14c44     06 00 00 FF 
14c48     40 E4 85 F1 | 	sub	objptr, ##3136
14c4c     F2 2C 02 FB | 	rdlong	local04, objptr
14c50     01 2C 86 F1 | 	sub	local04, #1
14c54     04 E4 05 F1 | 	add	objptr, #4
14c58     F2 2C 62 FC | 	wrlong	local04, objptr
14c5c     4A 00 00 FF 
14c60     80 E4 85 F1 | 	sub	objptr, ##38016
14c64     44 00 90 FD | 	jmp	#LR__1726
14c68                 | LR__1725
14c68     50 00 00 FF 
14c6c     08 E5 05 F1 | 	add	objptr, ##41224
14c70     F2 2C 02 FB | 	rdlong	local04, objptr
14c74     16 27 02 F6 | 	mov	local01, local04
14c78     02 26 66 F0 | 	shl	local01, #2
14c7c     16 27 02 F1 | 	add	local01, local04
14c80     02 26 66 F0 | 	shl	local01, #2
14c84     06 00 00 FF 
14c88     70 E4 85 F1 | 	sub	objptr, ##3184
14c8c     F2 26 02 F1 | 	add	local01, objptr
14c90     04 26 06 F1 | 	add	local01, #4
14c94     13 27 02 FB | 	rdlong	local01, local01
14c98     01 26 86 F1 | 	sub	local01, #1
14c9c     18 E4 85 F1 | 	sub	objptr, #24
14ca0     F2 26 62 FC | 	wrlong	local01, objptr
14ca4     4A 00 00 FF 
14ca8     80 E4 85 F1 | 	sub	objptr, ##38016
14cac                 | LR__1726
14cac                 | LR__1727
14cac     A7 F0 03 F6 | 	mov	ptra, fp
14cb0     B2 00 A0 FD | 	call	#popregs_
14cb4                 | _do_next_ret
14cb4     2D 00 64 FD | 	ret
14cb8                 | 
14cb8                 | ' 
14cb8                 | ' '-------------------- no command (print "Unknown command")
14cb8                 | ' 
14cb8                 | ' sub do_no_command
14cb8                 | _do_no_command
14cb8     17 12 06 F6 | 	mov	arg01, #23
14cbc     00 14 06 F6 | 	mov	arg02, #0
14cc0     40 A9 B0 FD | 	call	#_printerror
14cc4                 | _do_no_command_ret
14cc4     2D 00 64 FD | 	ret
14cc8                 | 
14cc8                 | ' 
14cc8                 | ' '-------------------- nothing
14cc8                 | ' 
14cc8                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
14cc8                 | _do_nothing
14cc8                 | _do_nothing_ret
14cc8     2D 00 64 FD | 	ret
14ccc                 | 
14ccc                 | ' 
14ccc                 | ' '-------------------- on
14ccc                 | ' 
14ccc                 | ' sub do_on
14ccc                 | _do_on
14ccc     01 4A 05 F6 | 	mov	COUNT_, #1
14cd0     A8 00 A0 FD | 	call	#pushregs_
14cd4     18 F0 07 F1 | 	add	ptra, #24
14cd8     4A 00 00 FF 
14cdc     80 E4 05 F1 | 	add	objptr, ##38016
14ce0     F2 12 02 FB | 	rdlong	arg01, objptr
14ce4     09 FD 01 F6 | 	mov	result2, arg01
14ce8     01 FC 65 F0 | 	shl	result2, #1
14cec     09 FD 01 F1 | 	add	result2, arg01
14cf0     02 FC 65 F0 | 	shl	result2, #2
14cf4     03 00 00 FF 
14cf8     04 E4 85 F1 | 	sub	objptr, ##1540
14cfc     F2 FC 01 F1 | 	add	result2, objptr
14d00     FE 12 02 FB | 	rdlong	arg01, result2
14d04     14 4E 05 F1 | 	add	fp, #20
14d08     A7 12 62 FC | 	wrlong	arg01, fp
14d0c     03 00 00 FF 
14d10     04 E4 05 F1 | 	add	objptr, ##1540
14d14     F2 12 02 FB | 	rdlong	arg01, objptr
14d18     09 27 02 F6 | 	mov	local01, arg01
14d1c     01 26 66 F0 | 	shl	local01, #1
14d20     09 27 02 F1 | 	add	local01, arg01
14d24     02 26 66 F0 | 	shl	local01, #2
14d28     03 00 00 FF 
14d2c     04 E4 85 F1 | 	sub	objptr, ##1540
14d30     F2 26 02 F1 | 	add	local01, objptr
14d34     04 26 06 F1 | 	add	local01, #4
14d38     13 27 02 FB | 	rdlong	local01, local01
14d3c     08 4E 85 F1 | 	sub	fp, #8
14d40     A7 26 62 FC | 	wrlong	local01, fp
14d44     0C 4E 85 F1 | 	sub	fp, #12
14d48     47 00 00 FF 
14d4c     7C E4 85 F1 | 	sub	objptr, ##36476
14d50     8C 7B BF FD | 	call	#_pop
14d54     FF 26 02 F6 | 	mov	local01, result3
14d58     A7 FA 61 FC | 	wrlong	result1, fp
14d5c     04 4E 05 F1 | 	add	fp, #4
14d60     A7 FC 61 FC | 	wrlong	result2, fp
14d64     04 4E 05 F1 | 	add	fp, #4
14d68     A7 26 62 FC | 	wrlong	local01, fp
14d6c     08 4E 85 F1 | 	sub	fp, #8
14d70     A7 12 02 F6 | 	mov	arg01, fp
14d74     4C 7D BF FD | 	call	#_converttoint
14d78     10 4E 05 F1 | 	add	fp, #16
14d7c     A7 FA 61 FC | 	wrlong	result1, fp
14d80                 | ' 
14d80                 | ' numpar=compiledline(lineptr_e).result.uresult
14d80                 | ' skip=compiledline(lineptr_e).result.twowords(1)
14d80                 | ' t1=pop()
14d80                 | ' t=converttoint(t1)
14d80                 | ' if t<1 orelse t>numpar then return
14d80     10 4E 85 F1 | 	sub	fp, #16
14d84     01 FA 55 F2 | 	cmps	result1, #1 wc
14d88     58 00 90 CD |  if_b	jmp	#LR__1730
14d8c     10 4E 05 F1 | 	add	fp, #16
14d90     A7 26 02 FB | 	rdlong	local01, fp
14d94     04 4E 05 F1 | 	add	fp, #4
14d98     A7 12 02 FB | 	rdlong	arg01, fp
14d9c     14 4E 85 F1 | 	sub	fp, #20
14da0     09 27 5A F2 | 	cmps	local01, arg01 wcz
14da4     3C 00 90 1D |  if_a	jmp	#LR__1730
14da8     10 4E 05 F1 | 	add	fp, #16
14dac     A7 26 02 FB | 	rdlong	local01, fp
14db0     01 26 86 F1 | 	sub	local01, #1
14db4     04 4E 85 F1 | 	sub	fp, #4
14db8     A7 12 02 FB | 	rdlong	arg01, fp
14dbc     13 13 02 FD | 	qmul	arg01, local01
14dc0     4A 00 00 FF 
14dc4     80 E4 05 F1 | 	add	objptr, ##38016
14dc8     F2 26 02 FB | 	rdlong	local01, objptr
14dcc     0C 4E 85 F1 | 	sub	fp, #12
14dd0     18 12 62 FD | 	getqx	arg01
14dd4     09 27 02 F1 | 	add	local01, arg01
14dd8     F2 26 62 FC | 	wrlong	local01, objptr
14ddc     4A 00 00 FF 
14de0     80 E4 85 F1 | 	sub	objptr, ##38016
14de4                 | LR__1730
14de4     A7 F0 03 F6 | 	mov	ptra, fp
14de8     B2 00 A0 FD | 	call	#popregs_
14dec                 | _do_on_ret
14dec     2D 00 64 FD | 	ret
14df0                 | 
14df0                 | ' 
14df0                 | ' '-------------------- open
14df0                 | ' 
14df0                 | ' sub do_open
14df0                 | _do_open
14df0     02 4A 05 F6 | 	mov	COUNT_, #2
14df4     A8 00 A0 FD | 	call	#pushregs_
14df8     20 F0 07 F1 | 	add	ptra, #32
14dfc     4A 00 00 FF 
14e00     80 E4 05 F1 | 	add	objptr, ##38016
14e04     F2 16 02 FB | 	rdlong	arg03, objptr
14e08     0B 15 02 F6 | 	mov	arg02, arg03
14e0c     01 14 66 F0 | 	shl	arg02, #1
14e10     0B 15 02 F1 | 	add	arg02, arg03
14e14     02 14 66 F0 | 	shl	arg02, #2
14e18     03 00 00 FF 
14e1c     04 E4 85 F1 | 	sub	objptr, ##1540
14e20     F2 14 02 F1 | 	add	arg02, objptr
14e24     0A 17 02 FB | 	rdlong	arg03, arg02
14e28     10 4E 05 F1 | 	add	fp, #16
14e2c     A7 16 62 FC | 	wrlong	arg03, fp
14e30     10 4E 85 F1 | 	sub	fp, #16
14e34     47 00 00 FF 
14e38     7C E4 85 F1 | 	sub	objptr, ##36476
14e3c     A0 7A BF FD | 	call	#_pop
14e40     FF 16 02 F6 | 	mov	arg03, result3
14e44     A7 FA 61 FC | 	wrlong	result1, fp
14e48     04 4E 05 F1 | 	add	fp, #4
14e4c     A7 FC 61 FC | 	wrlong	result2, fp
14e50     04 4E 05 F1 | 	add	fp, #4
14e54     A7 16 62 FC | 	wrlong	arg03, fp
14e58                 | ' 
14e58                 | ' numpar=compiledline(lineptr_e).result.uresult
14e58                 | ' 
14e58                 | ' t1=pop()
14e58                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e58     08 4E 85 F1 | 	sub	fp, #8
14e5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14e60     18 00 90 5D |  if_ne	jmp	#LR__1740
14e64     A7 12 02 FB | 	rdlong	arg01, fp
14e68     EC 7B BF FD | 	call	#_convertstring
14e6c     A7 FA 61 FC | 	wrlong	result1, fp
14e70     08 4E 05 F1 | 	add	fp, #8
14e74     A7 3E 68 FC | 	wrlong	#31, fp
14e78     08 4E 85 F1 | 	sub	fp, #8
14e7c                 | LR__1740
14e7c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
14e7c     08 4E 05 F1 | 	add	fp, #8
14e80     A7 16 02 FB | 	rdlong	arg03, fp
14e84     08 4E 85 F1 | 	sub	fp, #8
14e88     1F 16 0E F2 | 	cmp	arg03, #31 wz
14e8c     44 00 90 AD |  if_e	jmp	#LR__1741
14e90     00 12 06 F6 | 	mov	arg01, #0
14e94     24 3E B1 FD | 	call	#__system___getiolock_0558
14e98     FD 12 02 F6 | 	mov	arg01, result1
14e9c     F4 E0 B0 FD | 	call	#__system___lockmem
14ea0     9A 01 00 FF 
14ea4     7C 14 06 F6 | 	mov	arg02, ##@LR__5688
14ea8     00 12 06 F6 | 	mov	arg01, #0
14eac     00 16 06 F6 | 	mov	arg03, #0
14eb0     D4 ED B0 FD | 	call	#__system___basic_print_string
14eb4     00 12 06 F6 | 	mov	arg01, #0
14eb8     0A 14 06 F6 | 	mov	arg02, #10
14ebc     00 16 06 F6 | 	mov	arg03, #0
14ec0     6C ED B0 FD | 	call	#__system___basic_print_char
14ec4     00 12 06 F6 | 	mov	arg01, #0
14ec8     F0 3D B1 FD | 	call	#__system___getiolock_0558
14ecc     FD 00 68 FC | 	wrlong	#0, result1
14ed0     28 02 90 FD | 	jmp	#LR__1752
14ed4                 | LR__1741
14ed4     A7 16 02 FB | 	rdlong	arg03, fp
14ed8     0C 4E 05 F1 | 	add	fp, #12
14edc     A7 16 62 FC | 	wrlong	arg03, fp
14ee0     0C 4E 85 F1 | 	sub	fp, #12
14ee4     F8 79 BF FD | 	call	#_pop
14ee8     FF 16 02 F6 | 	mov	arg03, result3
14eec     A7 FA 61 FC | 	wrlong	result1, fp
14ef0     04 4E 05 F1 | 	add	fp, #4
14ef4     A7 FC 61 FC | 	wrlong	result2, fp
14ef8     04 4E 05 F1 | 	add	fp, #4
14efc     A7 16 62 FC | 	wrlong	arg03, fp
14f00                 | ' filename=t1.result.sresult
14f00                 | ' t1=pop()
14f00                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14f00     08 4E 85 F1 | 	sub	fp, #8
14f04     2B 16 0E F2 | 	cmp	arg03, #43 wz
14f08     18 00 90 5D |  if_ne	jmp	#LR__1742
14f0c     A7 12 02 FB | 	rdlong	arg01, fp
14f10     44 7B BF FD | 	call	#_convertstring
14f14     A7 FA 61 FC | 	wrlong	result1, fp
14f18     08 4E 05 F1 | 	add	fp, #8
14f1c     A7 3E 68 FC | 	wrlong	#31, fp
14f20     08 4E 85 F1 | 	sub	fp, #8
14f24                 | LR__1742
14f24     14 4E 05 F1 | 	add	fp, #20
14f28     A7 00 68 FC | 	wrlong	#0, fp
14f2c                 | ' mode=0
14f2c                 | ' if t1.result_type=result_string then
14f2c     0C 4E 85 F1 | 	sub	fp, #12
14f30     A7 14 02 FB | 	rdlong	arg02, fp
14f34     08 4E 85 F1 | 	sub	fp, #8
14f38     1F 14 0E F2 | 	cmp	arg02, #31 wz
14f3c     64 00 90 5D |  if_ne	jmp	#LR__1743
14f40                 | '   if t1.result.sresult="read" then mode=1
14f40     A7 12 02 FB | 	rdlong	arg01, fp
14f44     9A 01 00 FF 
14f48     8E 14 06 F6 | 	mov	arg02, ##@LR__5689
14f4c     6C E0 B0 FD | 	call	#__system___string_cmp
14f50     00 FA 0D F2 | 	cmp	result1, #0 wz
14f54     14 4E 05 A1 |  if_e	add	fp, #20
14f58     A7 02 68 AC |  if_e	wrlong	#1, fp
14f5c     14 4E 85 A1 |  if_e	sub	fp, #20
14f60                 | '   if t1.result.sresult="write" then mode=2
14f60     A7 12 02 FB | 	rdlong	arg01, fp
14f64     9A 01 00 FF 
14f68     93 14 06 F6 | 	mov	arg02, ##@LR__5690
14f6c     4C E0 B0 FD | 	call	#__system___string_cmp
14f70     00 FA 0D F2 | 	cmp	result1, #0 wz
14f74     14 4E 05 A1 |  if_e	add	fp, #20
14f78     A7 04 68 AC |  if_e	wrlong	#2, fp
14f7c     14 4E 85 A1 |  if_e	sub	fp, #20
14f80                 | '   if t1.result.sresult="append" then mode=4
14f80     A7 12 02 FB | 	rdlong	arg01, fp
14f84     9A 01 00 FF 
14f88     99 14 06 F6 | 	mov	arg02, ##@LR__5691
14f8c     2C E0 B0 FD | 	call	#__system___string_cmp
14f90     00 FA 0D F2 | 	cmp	result1, #0 wz
14f94     14 4E 05 A1 |  if_e	add	fp, #20
14f98     A7 08 68 AC |  if_e	wrlong	#4, fp
14f9c     14 4E 85 A1 |  if_e	sub	fp, #20
14fa0     14 00 90 FD | 	jmp	#LR__1744
14fa4                 | LR__1743
14fa4     A7 12 02 F6 | 	mov	arg01, fp
14fa8     18 7B BF FD | 	call	#_converttoint
14fac     14 4E 05 F1 | 	add	fp, #20
14fb0     A7 FA 61 FC | 	wrlong	result1, fp
14fb4     14 4E 85 F1 | 	sub	fp, #20
14fb8                 | LR__1744
14fb8     24 79 BF FD | 	call	#_pop
14fbc     FF 16 02 F6 | 	mov	arg03, result3
14fc0     A7 FA 61 FC | 	wrlong	result1, fp
14fc4     04 4E 05 F1 | 	add	fp, #4
14fc8     A7 FC 61 FC | 	wrlong	result2, fp
14fcc     04 4E 05 F1 | 	add	fp, #4
14fd0     A7 16 62 FC | 	wrlong	arg03, fp
14fd4                 | ' t1=pop()
14fd4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
14fd4     08 4E 85 F1 | 	sub	fp, #8
14fd8     2C 16 0E F2 | 	cmp	arg03, #44 wz
14fdc     44 00 90 AD |  if_e	jmp	#LR__1745
14fe0     00 12 06 F6 | 	mov	arg01, #0
14fe4     D4 3C B1 FD | 	call	#__system___getiolock_0558
14fe8     FD 12 02 F6 | 	mov	arg01, result1
14fec     A4 DF B0 FD | 	call	#__system___lockmem
14ff0     9A 01 00 FF 
14ff4     A0 14 06 F6 | 	mov	arg02, ##@LR__5692
14ff8     00 12 06 F6 | 	mov	arg01, #0
14ffc     00 16 06 F6 | 	mov	arg03, #0
15000     84 EC B0 FD | 	call	#__system___basic_print_string
15004     00 12 06 F6 | 	mov	arg01, #0
15008     0A 14 06 F6 | 	mov	arg02, #10
1500c     00 16 06 F6 | 	mov	arg03, #0
15010     1C EC B0 FD | 	call	#__system___basic_print_char
15014     00 12 06 F6 | 	mov	arg01, #0
15018     A0 3C B1 FD | 	call	#__system___getiolock_0558
1501c     FD 00 68 FC | 	wrlong	#0, result1
15020     D8 00 90 FD | 	jmp	#LR__1752
15024                 | LR__1745
15024     A7 26 02 FB | 	rdlong	local01, fp
15028     18 4E 05 F1 | 	add	fp, #24
1502c     A7 26 62 FC | 	wrlong	local01, fp
15030                 | ' channel  = t1.result.iresult
15030                 | ' select case  mode
15030     04 4E 85 F1 | 	sub	fp, #4
15034     A7 28 02 FB | 	rdlong	local02, fp
15038     14 4E 85 F1 | 	sub	fp, #20
1503c     01 28 86 F1 | 	sub	local02, #1
15040     04 28 26 F3 | 	fle	local02, #4
15044     30 28 62 FD | 	jmprel	local02
15048                 | LR__1746
15048     10 00 90 FD | 	jmp	#LR__1747
1504c     2C 00 90 FD | 	jmp	#LR__1748
15050     68 00 90 FD | 	jmp	#LR__1750
15054     44 00 90 FD | 	jmp	#LR__1749
15058     60 00 90 FD | 	jmp	#LR__1750
1505c                 | LR__1747
1505c     18 4E 05 F1 | 	add	fp, #24
15060     A7 12 02 FB | 	rdlong	arg01, fp
15064     0C 4E 85 F1 | 	sub	fp, #12
15068     A7 14 02 FB | 	rdlong	arg02, fp
1506c     0C 4E 85 F1 | 	sub	fp, #12
15070     00 16 06 F6 | 	mov	arg03, #0
15074     20 EB B0 FD | 	call	#__system___basic_open_string
15078     80 00 90 FD | 	jmp	#LR__1751
1507c                 | LR__1748
1507c     18 4E 05 F1 | 	add	fp, #24
15080     A7 12 02 FB | 	rdlong	arg01, fp
15084     0C 4E 85 F1 | 	sub	fp, #12
15088     A7 14 02 FB | 	rdlong	arg02, fp
1508c     0C 4E 85 F1 | 	sub	fp, #12
15090     0D 16 06 F6 | 	mov	arg03, #13
15094     00 EB B0 FD | 	call	#__system___basic_open_string
15098     60 00 90 FD | 	jmp	#LR__1751
1509c                 | LR__1749
1509c     18 4E 05 F1 | 	add	fp, #24
150a0     A7 12 02 FB | 	rdlong	arg01, fp
150a4     0C 4E 85 F1 | 	sub	fp, #12
150a8     A7 14 02 FB | 	rdlong	arg02, fp
150ac     0C 4E 85 F1 | 	sub	fp, #12
150b0     25 16 06 F6 | 	mov	arg03, #37
150b4     E0 EA B0 FD | 	call	#__system___basic_open_string
150b8     40 00 90 FD | 	jmp	#LR__1751
150bc                 | LR__1750
150bc     00 12 06 F6 | 	mov	arg01, #0
150c0     F8 3B B1 FD | 	call	#__system___getiolock_0558
150c4     FD 12 02 F6 | 	mov	arg01, result1
150c8     C8 DE B0 FD | 	call	#__system___lockmem
150cc     9A 01 00 FF 
150d0     B2 14 06 F6 | 	mov	arg02, ##@LR__5693
150d4     00 12 06 F6 | 	mov	arg01, #0
150d8     00 16 06 F6 | 	mov	arg03, #0
150dc     A8 EB B0 FD | 	call	#__system___basic_print_string
150e0     00 12 06 F6 | 	mov	arg01, #0
150e4     0A 14 06 F6 | 	mov	arg02, #10
150e8     00 16 06 F6 | 	mov	arg03, #0
150ec     40 EB B0 FD | 	call	#__system___basic_print_char
150f0     00 12 06 F6 | 	mov	arg01, #0
150f4     C4 3B B1 FD | 	call	#__system___getiolock_0558
150f8     FD 00 68 FC | 	wrlong	#0, result1
150fc                 | LR__1751
150fc                 | LR__1752
150fc     A7 F0 03 F6 | 	mov	ptra, fp
15100     B2 00 A0 FD | 	call	#popregs_
15104                 | _do_open_ret
15104     2D 00 64 FD | 	ret
15108                 | 
15108                 | ' 
15108                 | ' '-------------------- paper
15108                 | ' 
15108                 | ' sub do_paper
15108                 | _do_paper
15108     03 4A 05 F6 | 	mov	COUNT_, #3
1510c     A8 00 A0 FD | 	call	#pushregs_
15110     CC 77 BF FD | 	call	#_pop
15114     FD 26 02 F6 | 	mov	local01, result1
15118     FE 28 02 F6 | 	mov	local02, result2
1511c     FF 2A 02 F6 | 	mov	local03, result3
15120                 | ' t1=pop() 
15120                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15120     1E 2A 0E F2 | 	cmp	local03, #30 wz
15124     10 00 90 5D |  if_ne	jmp	#LR__1760
15128     13 13 02 F6 | 	mov	arg01, local01
1512c     00 14 06 F6 | 	mov	arg02, #0
15130     A0 11 B1 FD | 	call	#__system___float_tointeger
15134     FD 26 02 F6 | 	mov	local01, result1
15138                 | LR__1760
15138                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15138     1F 2A 0E F2 | 	cmp	local03, #31 wz
1513c     18 00 90 5D |  if_ne	jmp	#LR__1761
15140     13 13 02 F6 | 	mov	arg01, local01
15144     D0 14 B1 FD | 	call	#__system____builtin_atof
15148     FD 12 02 F6 | 	mov	arg01, result1
1514c     00 14 06 F6 | 	mov	arg02, #0
15150     80 11 B1 FD | 	call	#__system___float_tointeger
15154     FD 26 02 F6 | 	mov	local01, result1
15158                 | LR__1761
15158     37 00 00 FF 
1515c     38 E4 05 F1 | 	add	objptr, ##28216
15160     F2 26 62 FC | 	wrlong	local01, objptr
15164     04 E4 05 F1 | 	add	objptr, #4
15168     F2 12 02 FB | 	rdlong	arg01, objptr
1516c                 | ' 
1516c                 | ' write_color:=ff
1516c     36 00 00 FF 
15170     FB E5 85 F1 | 	sub	objptr, ##28155
15174     F2 12 62 FC | 	wrlong	arg01, objptr
15178                 | ' write_background:=bb
15178     04 E4 05 F1 | 	add	objptr, #4
1517c     F2 26 62 FC | 	wrlong	local01, objptr
15180     45 E4 85 F1 | 	sub	objptr, #69
15184     A7 F0 03 F6 | 	mov	ptra, fp
15188     B2 00 A0 FD | 	call	#popregs_
1518c                 | _do_paper_ret
1518c     2D 00 64 FD | 	ret
15190                 | 
15190                 | ' 
15190                 | ' '-------------------- peek
15190                 | ' 
15190                 | ' sub do_peek
15190                 | _do_peek
15190     00 4A 05 F6 | 	mov	COUNT_, #0
15194     A8 00 A0 FD | 	call	#pushregs_
15198     14 F0 07 F1 | 	add	ptra, #20
1519c     40 77 BF FD | 	call	#_pop
151a0     A7 FA 61 FC | 	wrlong	result1, fp
151a4     04 4E 05 F1 | 	add	fp, #4
151a8     A7 FC 61 FC | 	wrlong	result2, fp
151ac     04 4E 05 F1 | 	add	fp, #4
151b0     A7 FE 61 FC | 	wrlong	result3, fp
151b4     08 4E 85 F1 | 	sub	fp, #8
151b8     A7 12 02 F6 | 	mov	arg01, fp
151bc     04 79 BF FD | 	call	#_converttoint
151c0     0C 4E 05 F1 | 	add	fp, #12
151c4     A7 FA 61 FC | 	wrlong	result1, fp
151c8                 | ' 
151c8                 | ' t1=pop()
151c8                 | ' a=converttoint(t1)
151c8                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
151c8     0C 4E 85 F1 | 	sub	fp, #12
151cc     00 04 00 FF 
151d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
151d4     1C 00 90 3D |  if_ae	jmp	#LR__1770
151d8     0C 4E 05 F1 | 	add	fp, #12
151dc     A7 12 02 FB | 	rdlong	arg01, fp
151e0     09 FB C1 FA | 	rdbyte	result1, arg01
151e4     04 4E 05 F1 | 	add	fp, #4
151e8     A7 FA 61 FC | 	wrlong	result1, fp
151ec     10 4E 85 F1 | 	sub	fp, #16
151f0     20 00 90 FD | 	jmp	#LR__1771
151f4                 | LR__1770
151f4     0C 4E 05 F1 | 	add	fp, #12
151f8     A7 12 02 FB | 	rdlong	arg01, fp
151fc     0C 4E 85 F1 | 	sub	fp, #12
15200     64 A6 B0 FD | 	call	#_pspeek
15204     FD FA E1 F8 | 	getbyte	result1, result1, #0
15208     10 4E 05 F1 | 	add	fp, #16
1520c     A7 FA 61 FC | 	wrlong	result1, fp
15210     10 4E 85 F1 | 	sub	fp, #16
15214                 | LR__1771
15214     08 4E 05 F1 | 	add	fp, #8
15218     A7 3A 68 FC | 	wrlong	#29, fp
1521c     08 4E 05 F1 | 	add	fp, #8
15220     A7 12 02 FB | 	rdlong	arg01, fp
15224     10 4E 85 F1 | 	sub	fp, #16
15228     A7 12 62 FC | 	wrlong	arg01, fp
1522c     A7 12 02 F6 | 	mov	arg01, fp
15230     44 77 BF FD | 	call	#_push
15234     A7 F0 03 F6 | 	mov	ptra, fp
15238     B2 00 A0 FD | 	call	#popregs_
1523c                 | _do_peek_ret
1523c     2D 00 64 FD | 	ret
15240                 | 
15240                 | ' 
15240                 | ' '-------------------- pinfloat
15240                 | ' 
15240                 | ' sub do_pinfloat
15240                 | _do_pinfloat
15240     00 4A 05 F6 | 	mov	COUNT_, #0
15244     A8 00 A0 FD | 	call	#pushregs_
15248     0C F0 07 F1 | 	add	ptra, #12
1524c     90 76 BF FD | 	call	#_pop
15250     A7 FA 61 FC | 	wrlong	result1, fp
15254     04 4E 05 F1 | 	add	fp, #4
15258     A7 FC 61 FC | 	wrlong	result2, fp
1525c     04 4E 05 F1 | 	add	fp, #4
15260     A7 FE 61 FC | 	wrlong	result3, fp
15264     08 4E 85 F1 | 	sub	fp, #8
15268     A7 12 02 F6 | 	mov	arg01, fp
1526c     54 78 BF FD | 	call	#_converttoint
15270     50 FA 61 FD | 	fltl	result1
15274     A7 F0 03 F6 | 	mov	ptra, fp
15278     B2 00 A0 FD | 	call	#popregs_
1527c                 | _do_pinfloat_ret
1527c     2D 00 64 FD | 	ret
15280                 | 
15280                 | ' 
15280                 | ' '-------------------- pinhi
15280                 | ' 
15280                 | ' sub do_pinhi
15280                 | _do_pinhi
15280     00 4A 05 F6 | 	mov	COUNT_, #0
15284     A8 00 A0 FD | 	call	#pushregs_
15288     0C F0 07 F1 | 	add	ptra, #12
1528c     50 76 BF FD | 	call	#_pop
15290     A7 FA 61 FC | 	wrlong	result1, fp
15294     04 4E 05 F1 | 	add	fp, #4
15298     A7 FC 61 FC | 	wrlong	result2, fp
1529c     04 4E 05 F1 | 	add	fp, #4
152a0     A7 FE 61 FC | 	wrlong	result3, fp
152a4     08 4E 85 F1 | 	sub	fp, #8
152a8     A7 12 02 F6 | 	mov	arg01, fp
152ac     14 78 BF FD | 	call	#_converttoint
152b0     59 FA 61 FD | 	drvh	result1
152b4     A7 F0 03 F6 | 	mov	ptra, fp
152b8     B2 00 A0 FD | 	call	#popregs_
152bc                 | _do_pinhi_ret
152bc     2D 00 64 FD | 	ret
152c0                 | 
152c0                 | ' 
152c0                 | ' '-------------------- pinlo
152c0                 | ' 
152c0                 | ' sub do_pinlo
152c0                 | _do_pinlo
152c0     00 4A 05 F6 | 	mov	COUNT_, #0
152c4     A8 00 A0 FD | 	call	#pushregs_
152c8     0C F0 07 F1 | 	add	ptra, #12
152cc     10 76 BF FD | 	call	#_pop
152d0     A7 FA 61 FC | 	wrlong	result1, fp
152d4     04 4E 05 F1 | 	add	fp, #4
152d8     A7 FC 61 FC | 	wrlong	result2, fp
152dc     04 4E 05 F1 | 	add	fp, #4
152e0     A7 FE 61 FC | 	wrlong	result3, fp
152e4     08 4E 85 F1 | 	sub	fp, #8
152e8     A7 12 02 F6 | 	mov	arg01, fp
152ec     D4 77 BF FD | 	call	#_converttoint
152f0     58 FA 61 FD | 	drvl	result1
152f4     A7 F0 03 F6 | 	mov	ptra, fp
152f8     B2 00 A0 FD | 	call	#popregs_
152fc                 | _do_pinlo_ret
152fc     2D 00 64 FD | 	ret
15300                 | 
15300                 | ' 
15300                 | ' '-------------------- pinread
15300                 | ' 
15300                 | ' sub do_pinread
15300                 | _do_pinread
15300     00 4A 05 F6 | 	mov	COUNT_, #0
15304     A8 00 A0 FD | 	call	#pushregs_
15308     0C F0 07 F1 | 	add	ptra, #12
1530c     D0 75 BF FD | 	call	#_pop
15310     A7 FA 61 FC | 	wrlong	result1, fp
15314     04 4E 05 F1 | 	add	fp, #4
15318     A7 FC 61 FC | 	wrlong	result2, fp
1531c     04 4E 05 F1 | 	add	fp, #4
15320     A7 FE 61 FC | 	wrlong	result3, fp
15324     08 4E 85 F1 | 	sub	fp, #8
15328     A7 12 02 F6 | 	mov	arg01, fp
1532c     94 77 BF FD | 	call	#_converttoint
15330     FD 12 02 F6 | 	mov	arg01, result1
15334     20 12 CE F7 | 	test	arg01, #32 wz
15338     FF FB 01 56 |  if_ne	mov	result1, inb
1533c     FE FB 01 A6 |  if_e	mov	result1, ina
15340     09 FB 41 F0 | 	shr	result1, arg01
15344     06 12 46 F0 | 	shr	arg01, #6
15348     09 FB 41 F7 | 	zerox	result1, arg01
1534c     52 00 00 FF 
15350     20 E4 05 F1 | 	add	objptr, ##42016
15354     F2 FA 61 FC | 	wrlong	result1, objptr
15358     52 00 00 FF 
1535c     20 E4 85 F1 | 	sub	objptr, ##42016
15360     08 4E 05 F1 | 	add	fp, #8
15364     A7 3A 68 FC | 	wrlong	#29, fp
15368     08 4E 85 F1 | 	sub	fp, #8
1536c     A7 08 68 FC | 	wrlong	#4, fp
15370     A7 12 02 F6 | 	mov	arg01, fp
15374     00 76 BF FD | 	call	#_push
15378     A7 F0 03 F6 | 	mov	ptra, fp
1537c     B2 00 A0 FD | 	call	#popregs_
15380                 | _do_pinread_ret
15380     2D 00 64 FD | 	ret
15384                 | 
15384                 | ' 
15384                 | ' '-------------------- pinstart
15384                 | ' 
15384                 | ' sub do_pinstart
15384                 | _do_pinstart
15384     03 4A 05 F6 | 	mov	COUNT_, #3
15388     A8 00 A0 FD | 	call	#pushregs_
1538c     30 F0 07 F1 | 	add	ptra, #48
15390     4C 75 BF FD | 	call	#_pop
15394     FD 16 02 F6 | 	mov	arg03, result1
15398     FE 14 02 F6 | 	mov	arg02, result2
1539c     FF 18 02 F6 | 	mov	arg04, result3
153a0     A7 16 62 FC | 	wrlong	arg03, fp
153a4     04 4E 05 F1 | 	add	fp, #4
153a8     A7 14 62 FC | 	wrlong	arg02, fp
153ac     04 4E 05 F1 | 	add	fp, #4
153b0     A7 18 62 FC | 	wrlong	arg04, fp
153b4     08 4E 85 F1 | 	sub	fp, #8
153b8     24 75 BF FD | 	call	#_pop
153bc     FD 16 02 F6 | 	mov	arg03, result1
153c0     FE 14 02 F6 | 	mov	arg02, result2
153c4     FF 18 02 F6 | 	mov	arg04, result3
153c8     0C 4E 05 F1 | 	add	fp, #12
153cc     A7 16 62 FC | 	wrlong	arg03, fp
153d0     04 4E 05 F1 | 	add	fp, #4
153d4     A7 14 62 FC | 	wrlong	arg02, fp
153d8     04 4E 05 F1 | 	add	fp, #4
153dc     A7 18 62 FC | 	wrlong	arg04, fp
153e0     14 4E 85 F1 | 	sub	fp, #20
153e4     F8 74 BF FD | 	call	#_pop
153e8     FD 16 02 F6 | 	mov	arg03, result1
153ec     FE 14 02 F6 | 	mov	arg02, result2
153f0     FF 18 02 F6 | 	mov	arg04, result3
153f4     18 4E 05 F1 | 	add	fp, #24
153f8     A7 16 62 FC | 	wrlong	arg03, fp
153fc     04 4E 05 F1 | 	add	fp, #4
15400     A7 14 62 FC | 	wrlong	arg02, fp
15404     04 4E 05 F1 | 	add	fp, #4
15408     A7 18 62 FC | 	wrlong	arg04, fp
1540c     20 4E 85 F1 | 	sub	fp, #32
15410     CC 74 BF FD | 	call	#_pop
15414     FF 16 02 F6 | 	mov	arg03, result3
15418     24 4E 05 F1 | 	add	fp, #36
1541c     A7 FA 61 FC | 	wrlong	result1, fp
15420     04 4E 05 F1 | 	add	fp, #4
15424     A7 FC 61 FC | 	wrlong	result2, fp
15428     04 4E 05 F1 | 	add	fp, #4
1542c     A7 16 62 FC | 	wrlong	arg03, fp
15430     08 4E 85 F1 | 	sub	fp, #8
15434     A7 12 02 F6 | 	mov	arg01, fp
15438     24 4E 85 F1 | 	sub	fp, #36
1543c     84 76 BF FD | 	call	#_converttoint
15440     FD 26 02 F6 | 	mov	local01, result1
15444     18 4E 05 F1 | 	add	fp, #24
15448     A7 12 02 F6 | 	mov	arg01, fp
1544c     18 4E 85 F1 | 	sub	fp, #24
15450     70 76 BF FD | 	call	#_converttoint
15454     FD 28 02 F6 | 	mov	local02, result1
15458     0C 4E 05 F1 | 	add	fp, #12
1545c     A7 12 02 F6 | 	mov	arg01, fp
15460     0C 4E 85 F1 | 	sub	fp, #12
15464     5C 76 BF FD | 	call	#_converttoint
15468     FD 2A 02 F6 | 	mov	local03, result1
1546c     A7 12 02 F6 | 	mov	arg01, fp
15470     50 76 BF FD | 	call	#_converttoint
15474     40 26 62 FD | 	dirl	local01
15478     13 29 02 FC | 	wrpin	local02, local01
1547c     13 2B 12 FC | 	wxpin	local03, local01
15480     13 FB 21 FC | 	wypin	result1, local01
15484     41 26 62 FD | 	dirh	local01
15488     A7 F0 03 F6 | 	mov	ptra, fp
1548c     B2 00 A0 FD | 	call	#popregs_
15490                 | _do_pinstart_ret
15490     2D 00 64 FD | 	ret
15494                 | 
15494                 | ' 
15494                 | ' '-------------------- pintoggle
15494                 | ' 
15494                 | ' sub do_pintoggle
15494                 | _do_pintoggle
15494     00 4A 05 F6 | 	mov	COUNT_, #0
15498     A8 00 A0 FD | 	call	#pushregs_
1549c     0C F0 07 F1 | 	add	ptra, #12
154a0     3C 74 BF FD | 	call	#_pop
154a4     A7 FA 61 FC | 	wrlong	result1, fp
154a8     04 4E 05 F1 | 	add	fp, #4
154ac     A7 FC 61 FC | 	wrlong	result2, fp
154b0     04 4E 05 F1 | 	add	fp, #4
154b4     A7 FE 61 FC | 	wrlong	result3, fp
154b8     08 4E 85 F1 | 	sub	fp, #8
154bc     A7 12 02 F6 | 	mov	arg01, fp
154c0     00 76 BF FD | 	call	#_converttoint
154c4     5F FA 61 FD | 	drvnot	result1
154c8     A7 F0 03 F6 | 	mov	ptra, fp
154cc     B2 00 A0 FD | 	call	#popregs_
154d0                 | _do_pintoggle_ret
154d0     2D 00 64 FD | 	ret
154d4                 | 
154d4                 | ' 
154d4                 | ' '-------------------- pinwrite
154d4                 | ' 
154d4                 | ' sub do_pinwrite
154d4                 | _do_pinwrite
154d4     01 4A 05 F6 | 	mov	COUNT_, #1
154d8     A8 00 A0 FD | 	call	#pushregs_
154dc     18 F0 07 F1 | 	add	ptra, #24
154e0     FC 73 BF FD | 	call	#_pop
154e4     FD 14 02 F6 | 	mov	arg02, result1
154e8     FE 12 02 F6 | 	mov	arg01, result2
154ec     FF 26 02 F6 | 	mov	local01, result3
154f0     A7 14 62 FC | 	wrlong	arg02, fp
154f4     04 4E 05 F1 | 	add	fp, #4
154f8     A7 12 62 FC | 	wrlong	arg01, fp
154fc     04 4E 05 F1 | 	add	fp, #4
15500     A7 26 62 FC | 	wrlong	local01, fp
15504     08 4E 85 F1 | 	sub	fp, #8
15508     D4 73 BF FD | 	call	#_pop
1550c     FF 26 02 F6 | 	mov	local01, result3
15510     0C 4E 05 F1 | 	add	fp, #12
15514     A7 FA 61 FC | 	wrlong	result1, fp
15518     04 4E 05 F1 | 	add	fp, #4
1551c     A7 FC 61 FC | 	wrlong	result2, fp
15520     04 4E 05 F1 | 	add	fp, #4
15524     A7 26 62 FC | 	wrlong	local01, fp
15528     08 4E 85 F1 | 	sub	fp, #8
1552c     A7 12 02 F6 | 	mov	arg01, fp
15530     0C 4E 85 F1 | 	sub	fp, #12
15534     8C 75 BF FD | 	call	#_converttoint
15538     FD 26 02 F6 | 	mov	local01, result1
1553c     A7 12 02 F6 | 	mov	arg01, fp
15540     80 75 BF FD | 	call	#_converttoint
15544     FD 14 02 F6 | 	mov	arg02, result1
15548     13 13 02 F6 | 	mov	arg01, local01
1554c     F8 DB B0 FD | 	call	#__system___pinwrite
15550     A7 F0 03 F6 | 	mov	ptra, fp
15554     B2 00 A0 FD | 	call	#popregs_
15558                 | _do_pinwrite_ret
15558     2D 00 64 FD | 	ret
1555c                 | 
1555c                 | ' 
1555c                 | ' '-------------------- play
1555c                 | ' 
1555c                 | ' sub do_play
1555c                 | _do_play
1555c     08 4A 05 F6 | 	mov	COUNT_, #8
15560     A8 00 A0 FD | 	call	#pushregs_
15564     7C F0 07 F1 | 	add	ptra, #124
15568     68 4E 05 F1 | 	add	fp, #104
1556c     77 CC A1 FF 
15570     A7 7C 6B FC | 	wrlong	##1134096318, fp
15574                 | ' speed_coeff=305.873
15574                 | ' 
15574                 | ' for i=0 to 8 : params(i)=-2.0 : next i
15574     64 4E 85 F1 | 	sub	fp, #100
15578     A7 00 68 FC | 	wrlong	#0, fp
1557c     97 18 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
15580                 | LR__1780
15580     A7 16 02 FB | 	rdlong	arg03, fp
15584     02 16 66 F0 | 	shl	arg03, #2
15588     34 4E 05 F1 | 	add	fp, #52
1558c     A7 16 02 F1 | 	add	arg03, fp
15590     00 00 E0 FF 
15594     0B 01 68 FC | 	wrlong	##-1073741824, arg03
15598     34 4E 85 F1 | 	sub	fp, #52
1559c     A7 26 02 FB | 	rdlong	local01, fp
155a0     01 26 06 F1 | 	add	local01, #1
155a4     A7 26 62 FC | 	wrlong	local01, fp
155a8     09 26 56 F2 | 	cmps	local01, #9 wc
155ac     D0 FF 9F CD |  if_b	jmp	#LR__1780
155b0                 | LR__1781
155b0     04 4E 85 F1 | 	sub	fp, #4
155b4     4A 00 00 FF 
155b8     80 E4 05 F1 | 	add	objptr, ##38016
155bc     F2 28 02 FB | 	rdlong	local02, objptr
155c0     14 2B 02 F6 | 	mov	local03, local02
155c4     01 2A 66 F0 | 	shl	local03, #1
155c8     14 2B 02 F1 | 	add	local03, local02
155cc     02 2A 66 F0 | 	shl	local03, #2
155d0     03 00 00 FF 
155d4     04 E4 85 F1 | 	sub	objptr, ##1540
155d8     F2 2A 02 F1 | 	add	local03, objptr
155dc     15 2D 02 FB | 	rdlong	local04, local03
155e0     A7 2C 62 FC | 	wrlong	local04, fp
155e4                 | ' numpar=compiledline(lineptr_e).result.uresult
155e4                 | ' for i=numpar to 1 step -1 
155e4     04 4E 05 F1 | 	add	fp, #4
155e8     A7 2C 62 FC | 	wrlong	local04, fp
155ec     04 4E 85 F1 | 	sub	fp, #4
155f0     47 00 00 FF 
155f4     7C E4 85 F1 | 	sub	objptr, ##36476
155f8                 | LR__1782
155f8     E4 72 BF FD | 	call	#_pop
155fc     5C 4E 05 F1 | 	add	fp, #92
15600     A7 FA 61 FC | 	wrlong	result1, fp
15604     04 4E 05 F1 | 	add	fp, #4
15608     A7 FC 61 FC | 	wrlong	result2, fp
1560c     04 4E 05 F1 | 	add	fp, #4
15610     A7 FE 61 FC | 	wrlong	result3, fp
15614     60 4E 85 F1 | 	sub	fp, #96
15618     A7 2A 02 FB | 	rdlong	local03, fp
1561c     01 2A 86 F1 | 	sub	local03, #1
15620     02 2A 66 F0 | 	shl	local03, #2
15624     34 4E 05 F1 | 	add	fp, #52
15628     A7 2A 02 F1 | 	add	local03, fp
1562c     24 4E 05 F1 | 	add	fp, #36
15630     A7 2E 02 F6 | 	mov	local05, fp
15634     17 13 02 F6 | 	mov	arg01, local05
15638     5C 4E 85 F1 | 	sub	fp, #92
1563c     40 75 BF FD | 	call	#_converttofloat
15640     15 FB 61 FC | 	wrlong	result1, local03
15644     04 4E 05 F1 | 	add	fp, #4
15648     A7 26 02 FB | 	rdlong	local01, fp
1564c     01 26 86 F1 | 	sub	local01, #1
15650     A7 26 62 FC | 	wrlong	local01, fp
15654     04 4E 85 F1 | 	sub	fp, #4
15658     01 26 56 F2 | 	cmps	local01, #1 wc
1565c     98 FF 9F 3D |  if_ae	jmp	#LR__1782
15660                 | ' 
15660                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
15660     38 4E 05 F1 | 	add	fp, #56
15664     A7 12 02 FB | 	rdlong	arg01, fp
15668     38 4E 85 F1 | 	sub	fp, #56
1566c     00 14 06 F6 | 	mov	arg02, #0
15670     01 16 06 F6 | 	mov	arg03, #1
15674     C8 0B B1 FD | 	call	#__system___float_cmp
15678     00 FA 55 F2 | 	cmps	result1, #0 wc
1567c     0C 4E 05 C1 |  if_b	add	fp, #12
15680     A7 00 68 CC |  if_b	wrlong	#0, fp
15684     0C 4E 85 C1 |  if_b	sub	fp, #12
15688     2C 00 90 CD |  if_b	jmp	#LR__1783
1568c     38 4E 05 F1 | 	add	fp, #56
15690     A7 12 02 FB | 	rdlong	arg01, fp
15694     38 4E 85 F1 | 	sub	fp, #56
15698     01 14 06 F6 | 	mov	arg02, #1
1569c     34 0C B1 FD | 	call	#__system___float_tointeger
156a0     FD 26 52 F6 | 	abs	local01, result1 wc
156a4     07 26 06 F5 | 	and	local01, #7
156a8     13 27 82 F6 | 	negc	local01, local01
156ac     0C 4E 05 F1 | 	add	fp, #12
156b0     A7 26 62 FC | 	wrlong	local01, fp
156b4     0C 4E 85 F1 | 	sub	fp, #12
156b8                 | LR__1783
156b8                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
156b8     3C 4E 05 F1 | 	add	fp, #60
156bc     A7 12 02 FB | 	rdlong	arg01, fp
156c0     3C 4E 85 F1 | 	sub	fp, #60
156c4     00 14 06 F6 | 	mov	arg02, #0
156c8     01 16 06 F6 | 	mov	arg03, #1
156cc     70 0B B1 FD | 	call	#__system___float_cmp
156d0     00 FA 55 F2 | 	cmps	result1, #0 wc
156d4     40 00 90 3D |  if_ae	jmp	#LR__1784
156d8     0C 4E 05 F1 | 	add	fp, #12
156dc     A7 28 02 FB | 	rdlong	local02, fp
156e0     14 2B 02 F6 | 	mov	local03, local02
156e4     01 2A 66 F0 | 	shl	local03, #1
156e8     14 2B 02 F1 | 	add	local03, local02
156ec     03 2A 66 F0 | 	shl	local03, #3
156f0     14 00 00 FF 
156f4     38 E5 05 F1 | 	add	objptr, ##10552
156f8     F2 2A 02 F1 | 	add	local03, objptr
156fc     15 31 02 FB | 	rdlong	local06, local03
15700     60 4E 05 F1 | 	add	fp, #96
15704     A7 30 62 FC | 	wrlong	local06, fp
15708     6C 4E 85 F1 | 	sub	fp, #108
1570c     14 00 00 FF 
15710     38 E5 85 F1 | 	sub	objptr, ##10552
15714     44 00 90 FD | 	jmp	#LR__1785
15718                 | LR__1784
15718     3C 4E 05 F1 | 	add	fp, #60
1571c     A7 2C 02 FB | 	rdlong	local04, fp
15720     30 4E 05 F1 | 	add	fp, #48
15724     A7 2C 62 FC | 	wrlong	local04, fp
15728     60 4E 85 F1 | 	sub	fp, #96
1572c     A7 28 02 FB | 	rdlong	local02, fp
15730     14 2B 02 F6 | 	mov	local03, local02
15734     01 2A 66 F0 | 	shl	local03, #1
15738     14 2B 02 F1 | 	add	local03, local02
1573c     03 2A 66 F0 | 	shl	local03, #3
15740     14 00 00 FF 
15744     38 E5 05 F1 | 	add	objptr, ##10552
15748     F2 2A 02 F1 | 	add	local03, objptr
1574c     0C 4E 85 F1 | 	sub	fp, #12
15750     15 2D 62 FC | 	wrlong	local04, local03
15754     14 00 00 FF 
15758     38 E5 85 F1 | 	sub	objptr, ##10552
1575c                 | LR__1785
1575c                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
1575c     40 4E 05 F1 | 	add	fp, #64
15760     A7 12 02 FB | 	rdlong	arg01, fp
15764     40 4E 85 F1 | 	sub	fp, #64
15768     00 14 06 F6 | 	mov	arg02, #0
1576c     01 16 06 F6 | 	mov	arg03, #1
15770     CC 0A B1 FD | 	call	#__system___float_cmp
15774     00 FA 55 F2 | 	cmps	result1, #0 wc
15778     24 00 90 CD |  if_b	jmp	#LR__1786
1577c     40 4E 05 F1 | 	add	fp, #64
15780     A7 12 02 FB | 	rdlong	arg01, fp
15784     40 4E 85 F1 | 	sub	fp, #64
15788     20 0E 23 FF 
1578c     00 14 06 F6 | 	mov	arg02, ##1176256512
15790     01 16 66 F6 | 	neg	arg03, #1
15794     A8 0A B1 FD | 	call	#__system___float_cmp
15798     01 FA 55 F2 | 	cmps	result1, #1 wc
1579c     48 00 90 CD |  if_b	jmp	#LR__1787
157a0                 | LR__1786
157a0     0C 4E 05 F1 | 	add	fp, #12
157a4     A7 2A 02 FB | 	rdlong	local03, fp
157a8     15 33 02 F6 | 	mov	local07, local03
157ac     01 32 66 F0 | 	shl	local07, #1
157b0     15 33 02 F1 | 	add	local07, local03
157b4     03 32 66 F0 | 	shl	local07, #3
157b8     14 00 00 FF 
157bc     38 E5 05 F1 | 	add	objptr, ##10552
157c0     F2 32 02 F1 | 	add	local07, objptr
157c4     06 32 06 F1 | 	add	local07, #6
157c8     19 2F E2 FA | 	rdword	local05, local07
157cc     17 2D 32 F9 | 	getword	local04, local05, #0
157d0     1C 4E 05 F1 | 	add	fp, #28
157d4     A7 2C 62 FC | 	wrlong	local04, fp
157d8     28 4E 85 F1 | 	sub	fp, #40
157dc     14 00 00 FF 
157e0     38 E5 85 F1 | 	sub	objptr, ##10552
157e4     54 00 90 FD | 	jmp	#LR__1788
157e8                 | LR__1787
157e8     40 4E 05 F1 | 	add	fp, #64
157ec     A7 12 02 FB | 	rdlong	arg01, fp
157f0     40 4E 85 F1 | 	sub	fp, #64
157f4     01 14 06 F6 | 	mov	arg02, #1
157f8     D8 0A B1 FD | 	call	#__system___float_tointeger
157fc     28 4E 05 F1 | 	add	fp, #40
15800     A7 FA 61 FC | 	wrlong	result1, fp
15804     1C 4E 85 F1 | 	sub	fp, #28
15808     A7 28 02 FB | 	rdlong	local02, fp
1580c     14 2B 02 F6 | 	mov	local03, local02
15810     01 2A 66 F0 | 	shl	local03, #1
15814     14 2B 02 F1 | 	add	local03, local02
15818     03 2A 66 F0 | 	shl	local03, #3
1581c     14 00 00 FF 
15820     38 E5 05 F1 | 	add	objptr, ##10552
15824     F2 2A 02 F1 | 	add	local03, objptr
15828     0C 4E 85 F1 | 	sub	fp, #12
1582c     06 2A 06 F1 | 	add	local03, #6
15830     15 FB 51 FC | 	wrword	result1, local03
15834     14 00 00 FF 
15838     38 E5 85 F1 | 	sub	objptr, ##10552
1583c                 | LR__1788
1583c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
1583c     44 4E 05 F1 | 	add	fp, #68
15840     A7 12 02 FB | 	rdlong	arg01, fp
15844     44 4E 85 F1 | 	sub	fp, #68
15848     00 14 06 F6 | 	mov	arg02, #0
1584c     01 16 06 F6 | 	mov	arg03, #1
15850     EC 09 B1 FD | 	call	#__system___float_cmp
15854     00 FA 55 F2 | 	cmps	result1, #0 wc
15858     24 00 90 CD |  if_b	jmp	#LR__1789
1585c     44 4E 05 F1 | 	add	fp, #68
15860     A7 12 02 FB | 	rdlong	arg01, fp
15864     44 4E 85 F1 | 	sub	fp, #68
15868     89 C1 20 FF 
1586c     6F 14 06 F6 | 	mov	arg02, ##1099108975
15870     01 16 66 F6 | 	neg	arg03, #1
15874     C8 09 B1 FD | 	call	#__system___float_cmp
15878     01 FA 55 F2 | 	cmps	result1, #1 wc
1587c     44 00 90 CD |  if_b	jmp	#LR__1790
15880                 | LR__1789
15880     0C 4E 05 F1 | 	add	fp, #12
15884     A7 28 02 FB | 	rdlong	local02, fp
15888     14 2B 02 F6 | 	mov	local03, local02
1588c     01 2A 66 F0 | 	shl	local03, #1
15890     14 2B 02 F1 | 	add	local03, local02
15894     03 2A 66 F0 | 	shl	local03, #3
15898     14 00 00 FF 
1589c     38 E5 05 F1 | 	add	objptr, ##10552
158a0     F2 2A 02 F1 | 	add	local03, objptr
158a4     0C 2A 06 F1 | 	add	local03, #12
158a8     15 31 02 FB | 	rdlong	local06, local03
158ac     68 4E 05 F1 | 	add	fp, #104
158b0     A7 30 62 FC | 	wrlong	local06, fp
158b4     74 4E 85 F1 | 	sub	fp, #116
158b8     14 00 00 FF 
158bc     38 E5 85 F1 | 	sub	objptr, ##10552
158c0     48 00 90 FD | 	jmp	#LR__1791
158c4                 | LR__1790
158c4     44 4E 05 F1 | 	add	fp, #68
158c8     A7 2C 02 FB | 	rdlong	local04, fp
158cc     30 4E 05 F1 | 	add	fp, #48
158d0     A7 2C 62 FC | 	wrlong	local04, fp
158d4     68 4E 85 F1 | 	sub	fp, #104
158d8     A7 28 02 FB | 	rdlong	local02, fp
158dc     14 2B 02 F6 | 	mov	local03, local02
158e0     01 2A 66 F0 | 	shl	local03, #1
158e4     14 2B 02 F1 | 	add	local03, local02
158e8     03 2A 66 F0 | 	shl	local03, #3
158ec     14 00 00 FF 
158f0     38 E5 05 F1 | 	add	objptr, ##10552
158f4     F2 2A 02 F1 | 	add	local03, objptr
158f8     0C 4E 85 F1 | 	sub	fp, #12
158fc     0C 2A 06 F1 | 	add	local03, #12
15900     15 2D 62 FC | 	wrlong	local04, local03
15904     14 00 00 FF 
15908     38 E5 85 F1 | 	sub	objptr, ##10552
1590c                 | LR__1791
1590c                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
1590c     48 4E 05 F1 | 	add	fp, #72
15910     A7 12 02 FB | 	rdlong	arg01, fp
15914     48 4E 85 F1 | 	sub	fp, #72
15918     00 14 06 F6 | 	mov	arg02, #0
1591c     01 16 06 F6 | 	mov	arg03, #1
15920     1C 09 B1 FD | 	call	#__system___float_cmp
15924     00 FA 55 F2 | 	cmps	result1, #0 wc
15928     24 00 90 CD |  if_b	jmp	#LR__1792
1592c     48 4E 05 F1 | 	add	fp, #72
15930     A7 12 02 FB | 	rdlong	arg01, fp
15934     48 4E 85 F1 | 	sub	fp, #72
15938     00 00 21 FF 
1593c     00 14 06 F6 | 	mov	arg02, ##1107296256
15940     01 16 66 F6 | 	neg	arg03, #1
15944     F8 08 B1 FD | 	call	#__system___float_cmp
15948     01 FA 55 F2 | 	cmps	result1, #1 wc
1594c     48 00 90 CD |  if_b	jmp	#LR__1793
15950                 | LR__1792
15950     0C 4E 05 F1 | 	add	fp, #12
15954     A7 2A 02 FB | 	rdlong	local03, fp
15958     15 33 02 F6 | 	mov	local07, local03
1595c     01 32 66 F0 | 	shl	local07, #1
15960     15 33 02 F1 | 	add	local07, local03
15964     03 32 66 F0 | 	shl	local07, #3
15968     14 00 00 FF 
1596c     38 E5 05 F1 | 	add	objptr, ##10552
15970     F2 32 02 F1 | 	add	local07, objptr
15974     04 32 06 F1 | 	add	local07, #4
15978     19 2F C2 FA | 	rdbyte	local05, local07
1597c     17 2D E2 F8 | 	getbyte	local04, local05, #0
15980     14 4E 05 F1 | 	add	fp, #20
15984     A7 2C 62 FC | 	wrlong	local04, fp
15988     20 4E 85 F1 | 	sub	fp, #32
1598c     14 00 00 FF 
15990     38 E5 85 F1 | 	sub	objptr, ##10552
15994     54 00 90 FD | 	jmp	#LR__1794
15998                 | LR__1793
15998     48 4E 05 F1 | 	add	fp, #72
1599c     A7 12 02 FB | 	rdlong	arg01, fp
159a0     48 4E 85 F1 | 	sub	fp, #72
159a4     01 14 06 F6 | 	mov	arg02, #1
159a8     28 09 B1 FD | 	call	#__system___float_tointeger
159ac     20 4E 05 F1 | 	add	fp, #32
159b0     A7 FA 61 FC | 	wrlong	result1, fp
159b4     14 4E 85 F1 | 	sub	fp, #20
159b8     A7 28 02 FB | 	rdlong	local02, fp
159bc     14 2B 02 F6 | 	mov	local03, local02
159c0     01 2A 66 F0 | 	shl	local03, #1
159c4     14 2B 02 F1 | 	add	local03, local02
159c8     03 2A 66 F0 | 	shl	local03, #3
159cc     14 00 00 FF 
159d0     38 E5 05 F1 | 	add	objptr, ##10552
159d4     F2 2A 02 F1 | 	add	local03, objptr
159d8     0C 4E 85 F1 | 	sub	fp, #12
159dc     04 2A 06 F1 | 	add	local03, #4
159e0     15 FB 41 FC | 	wrbyte	result1, local03
159e4     14 00 00 FF 
159e8     38 E5 85 F1 | 	sub	objptr, ##10552
159ec                 | LR__1794
159ec                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
159ec     4C 4E 05 F1 | 	add	fp, #76
159f0     A7 12 02 FB | 	rdlong	arg01, fp
159f4     4C 4E 85 F1 | 	sub	fp, #76
159f8     00 14 06 F6 | 	mov	arg02, #0
159fc     01 16 06 F6 | 	mov	arg03, #1
15a00     3C 08 B1 FD | 	call	#__system___float_cmp
15a04     00 FA 55 F2 | 	cmps	result1, #0 wc
15a08     24 00 90 CD |  if_b	jmp	#LR__1795
15a0c     4C 4E 05 F1 | 	add	fp, #76
15a10     A7 12 02 FB | 	rdlong	arg01, fp
15a14     4C 4E 85 F1 | 	sub	fp, #76
15a18     00 80 20 FF 
15a1c     00 14 06 F6 | 	mov	arg02, ##1090519040
15a20     01 16 66 F6 | 	neg	arg03, #1
15a24     18 08 B1 FD | 	call	#__system___float_cmp
15a28     01 FA 55 F2 | 	cmps	result1, #1 wc
15a2c     48 00 90 CD |  if_b	jmp	#LR__1796
15a30                 | LR__1795
15a30     0C 4E 05 F1 | 	add	fp, #12
15a34     A7 2A 02 FB | 	rdlong	local03, fp
15a38     15 33 02 F6 | 	mov	local07, local03
15a3c     01 32 66 F0 | 	shl	local07, #1
15a40     15 33 02 F1 | 	add	local07, local03
15a44     03 32 66 F0 | 	shl	local07, #3
15a48     14 00 00 FF 
15a4c     38 E5 05 F1 | 	add	objptr, ##10552
15a50     F2 32 02 F1 | 	add	local07, objptr
15a54     05 32 06 F1 | 	add	local07, #5
15a58     19 2F C2 FA | 	rdbyte	local05, local07
15a5c     17 2D E2 F8 | 	getbyte	local04, local05, #0
15a60     18 4E 05 F1 | 	add	fp, #24
15a64     A7 2C 62 FC | 	wrlong	local04, fp
15a68     24 4E 85 F1 | 	sub	fp, #36
15a6c     14 00 00 FF 
15a70     38 E5 85 F1 | 	sub	objptr, ##10552
15a74     54 00 90 FD | 	jmp	#LR__1797
15a78                 | LR__1796
15a78     4C 4E 05 F1 | 	add	fp, #76
15a7c     A7 12 02 FB | 	rdlong	arg01, fp
15a80     4C 4E 85 F1 | 	sub	fp, #76
15a84     01 14 06 F6 | 	mov	arg02, #1
15a88     48 08 B1 FD | 	call	#__system___float_tointeger
15a8c     24 4E 05 F1 | 	add	fp, #36
15a90     A7 FA 61 FC | 	wrlong	result1, fp
15a94     18 4E 85 F1 | 	sub	fp, #24
15a98     A7 28 02 FB | 	rdlong	local02, fp
15a9c     14 2B 02 F6 | 	mov	local03, local02
15aa0     01 2A 66 F0 | 	shl	local03, #1
15aa4     14 2B 02 F1 | 	add	local03, local02
15aa8     03 2A 66 F0 | 	shl	local03, #3
15aac     14 00 00 FF 
15ab0     38 E5 05 F1 | 	add	objptr, ##10552
15ab4     F2 2A 02 F1 | 	add	local03, objptr
15ab8     0C 4E 85 F1 | 	sub	fp, #12
15abc     05 2A 06 F1 | 	add	local03, #5
15ac0     15 FB 41 FC | 	wrbyte	result1, local03
15ac4     14 00 00 FF 
15ac8     38 E5 85 F1 | 	sub	objptr, ##10552
15acc                 | LR__1797
15acc                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
15acc     50 4E 05 F1 | 	add	fp, #80
15ad0     A7 12 02 FB | 	rdlong	arg01, fp
15ad4     50 4E 85 F1 | 	sub	fp, #80
15ad8     00 14 06 F6 | 	mov	arg02, #0
15adc     01 16 06 F6 | 	mov	arg03, #1
15ae0     5C 07 B1 FD | 	call	#__system___float_cmp
15ae4     00 FA 55 F2 | 	cmps	result1, #0 wc
15ae8     24 00 90 CD |  if_b	jmp	#LR__1798
15aec     50 4E 05 F1 | 	add	fp, #80
15af0     A7 12 02 FB | 	rdlong	arg01, fp
15af4     50 4E 85 F1 | 	sub	fp, #80
15af8     00 3D 22 FF 
15afc     00 14 06 F6 | 	mov	arg02, ##1148846080
15b00     01 16 66 F6 | 	neg	arg03, #1
15b04     38 07 B1 FD | 	call	#__system___float_cmp
15b08     01 FA 55 F2 | 	cmps	result1, #1 wc
15b0c     44 00 90 CD |  if_b	jmp	#LR__1799
15b10                 | LR__1798
15b10     0C 4E 05 F1 | 	add	fp, #12
15b14     A7 28 02 FB | 	rdlong	local02, fp
15b18     14 2B 02 F6 | 	mov	local03, local02
15b1c     01 2A 66 F0 | 	shl	local03, #1
15b20     14 2B 02 F1 | 	add	local03, local02
15b24     03 2A 66 F0 | 	shl	local03, #3
15b28     14 00 00 FF 
15b2c     38 E5 05 F1 | 	add	objptr, ##10552
15b30     F2 2A 02 F1 | 	add	local03, objptr
15b34     08 2A 06 F1 | 	add	local03, #8
15b38     15 31 02 FB | 	rdlong	local06, local03
15b3c     6C 4E 05 F1 | 	add	fp, #108
15b40     A7 30 62 FC | 	wrlong	local06, fp
15b44     78 4E 85 F1 | 	sub	fp, #120
15b48     14 00 00 FF 
15b4c     38 E5 85 F1 | 	sub	objptr, ##10552
15b50     48 00 90 FD | 	jmp	#LR__1800
15b54                 | LR__1799
15b54     50 4E 05 F1 | 	add	fp, #80
15b58     A7 30 02 FB | 	rdlong	local06, fp
15b5c     28 4E 05 F1 | 	add	fp, #40
15b60     A7 30 62 FC | 	wrlong	local06, fp
15b64     6C 4E 85 F1 | 	sub	fp, #108
15b68     A7 28 02 FB | 	rdlong	local02, fp
15b6c     14 2B 02 F6 | 	mov	local03, local02
15b70     01 2A 66 F0 | 	shl	local03, #1
15b74     14 2B 02 F1 | 	add	local03, local02
15b78     03 2A 66 F0 | 	shl	local03, #3
15b7c     14 00 00 FF 
15b80     38 E5 05 F1 | 	add	objptr, ##10552
15b84     F2 2A 02 F1 | 	add	local03, objptr
15b88     0C 4E 85 F1 | 	sub	fp, #12
15b8c     08 2A 06 F1 | 	add	local03, #8
15b90     15 31 62 FC | 	wrlong	local06, local03
15b94     14 00 00 FF 
15b98     38 E5 85 F1 | 	sub	objptr, ##10552
15b9c                 | LR__1800
15b9c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
15b9c     54 4E 05 F1 | 	add	fp, #84
15ba0     A7 12 02 FB | 	rdlong	arg01, fp
15ba4     54 4E 85 F1 | 	sub	fp, #84
15ba8     00 C0 5F FF 
15bac     00 14 06 F6 | 	mov	arg02, ##-1082130432
15bb0     01 16 06 F6 | 	mov	arg03, #1
15bb4     88 06 B1 FD | 	call	#__system___float_cmp
15bb8     00 FA 55 F2 | 	cmps	result1, #0 wc
15bbc     24 00 90 CD |  if_b	jmp	#LR__1801
15bc0     54 4E 05 F1 | 	add	fp, #84
15bc4     A7 12 02 FB | 	rdlong	arg01, fp
15bc8     54 4E 85 F1 | 	sub	fp, #84
15bcc     00 C0 1F FF 
15bd0     00 14 06 F6 | 	mov	arg02, ##1065353216
15bd4     01 16 66 F6 | 	neg	arg03, #1
15bd8     64 06 B1 FD | 	call	#__system___float_cmp
15bdc     01 FA 55 F2 | 	cmps	result1, #1 wc
15be0     44 00 90 CD |  if_b	jmp	#LR__1802
15be4                 | LR__1801
15be4     0C 4E 05 F1 | 	add	fp, #12
15be8     A7 28 02 FB | 	rdlong	local02, fp
15bec     14 2B 02 F6 | 	mov	local03, local02
15bf0     01 2A 66 F0 | 	shl	local03, #1
15bf4     14 2B 02 F1 | 	add	local03, local02
15bf8     03 2A 66 F0 | 	shl	local03, #3
15bfc     14 00 00 FF 
15c00     38 E5 05 F1 | 	add	objptr, ##10552
15c04     F2 2A 02 F1 | 	add	local03, objptr
15c08     10 2A 06 F1 | 	add	local03, #16
15c0c     15 31 02 FB | 	rdlong	local06, local03
15c10     64 4E 05 F1 | 	add	fp, #100
15c14     A7 30 62 FC | 	wrlong	local06, fp
15c18     70 4E 85 F1 | 	sub	fp, #112
15c1c     14 00 00 FF 
15c20     38 E5 85 F1 | 	sub	objptr, ##10552
15c24     48 00 90 FD | 	jmp	#LR__1803
15c28                 | LR__1802
15c28     54 4E 05 F1 | 	add	fp, #84
15c2c     A7 30 02 FB | 	rdlong	local06, fp
15c30     1C 4E 05 F1 | 	add	fp, #28
15c34     A7 30 62 FC | 	wrlong	local06, fp
15c38     64 4E 85 F1 | 	sub	fp, #100
15c3c     A7 28 02 FB | 	rdlong	local02, fp
15c40     14 2B 02 F6 | 	mov	local03, local02
15c44     01 2A 66 F0 | 	shl	local03, #1
15c48     14 2B 02 F1 | 	add	local03, local02
15c4c     03 2A 66 F0 | 	shl	local03, #3
15c50     14 00 00 FF 
15c54     38 E5 05 F1 | 	add	objptr, ##10552
15c58     F2 2A 02 F1 | 	add	local03, objptr
15c5c     0C 4E 85 F1 | 	sub	fp, #12
15c60     10 2A 06 F1 | 	add	local03, #16
15c64     15 31 62 FC | 	wrlong	local06, local03
15c68     14 00 00 FF 
15c6c     38 E5 85 F1 | 	sub	objptr, ##10552
15c70                 | LR__1803
15c70                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
15c70     58 4E 05 F1 | 	add	fp, #88
15c74     A7 12 02 FB | 	rdlong	arg01, fp
15c78     58 4E 85 F1 | 	sub	fp, #88
15c7c     00 14 06 F6 | 	mov	arg02, #0
15c80     01 16 06 F6 | 	mov	arg03, #1
15c84     B8 05 B1 FD | 	call	#__system___float_cmp
15c88     00 FA 55 F2 | 	cmps	result1, #0 wc
15c8c     24 00 90 CD |  if_b	jmp	#LR__1804
15c90     58 4E 05 F1 | 	add	fp, #88
15c94     A7 12 02 FB | 	rdlong	arg01, fp
15c98     58 4E 85 F1 | 	sub	fp, #88
15c9c     80 BF 21 FF 
15ca0     00 14 06 F6 | 	mov	arg02, ##1132396544
15ca4     01 16 66 F6 | 	neg	arg03, #1
15ca8     94 05 B1 FD | 	call	#__system___float_cmp
15cac     01 FA 55 F2 | 	cmps	result1, #1 wc
15cb0     44 00 90 CD |  if_b	jmp	#LR__1805
15cb4                 | LR__1804
15cb4     0C 4E 05 F1 | 	add	fp, #12
15cb8     A7 2A 02 FB | 	rdlong	local03, fp
15cbc     15 33 02 F6 | 	mov	local07, local03
15cc0     01 32 66 F0 | 	shl	local07, #1
15cc4     15 33 02 F1 | 	add	local07, local03
15cc8     03 32 66 F0 | 	shl	local07, #3
15ccc     14 00 00 FF 
15cd0     38 E5 05 F1 | 	add	objptr, ##10552
15cd4     F2 32 02 F1 | 	add	local07, objptr
15cd8     14 32 06 F1 | 	add	local07, #20
15cdc     19 2D E2 FA | 	rdword	local04, local07
15ce0     20 4E 05 F1 | 	add	fp, #32
15ce4     A7 2C 62 FC | 	wrlong	local04, fp
15ce8     2C 4E 85 F1 | 	sub	fp, #44
15cec     14 00 00 FF 
15cf0     38 E5 85 F1 | 	sub	objptr, ##10552
15cf4     54 00 90 FD | 	jmp	#LR__1806
15cf8                 | LR__1805
15cf8     58 4E 05 F1 | 	add	fp, #88
15cfc     A7 12 02 FB | 	rdlong	arg01, fp
15d00     58 4E 85 F1 | 	sub	fp, #88
15d04     01 14 06 F6 | 	mov	arg02, #1
15d08     C8 05 B1 FD | 	call	#__system___float_tointeger
15d0c     2C 4E 05 F1 | 	add	fp, #44
15d10     A7 FA 61 FC | 	wrlong	result1, fp
15d14     20 4E 85 F1 | 	sub	fp, #32
15d18     A7 28 02 FB | 	rdlong	local02, fp
15d1c     14 2B 02 F6 | 	mov	local03, local02
15d20     01 2A 66 F0 | 	shl	local03, #1
15d24     14 2B 02 F1 | 	add	local03, local02
15d28     03 2A 66 F0 | 	shl	local03, #3
15d2c     14 00 00 FF 
15d30     38 E5 05 F1 | 	add	objptr, ##10552
15d34     F2 2A 02 F1 | 	add	local03, objptr
15d38     0C 4E 85 F1 | 	sub	fp, #12
15d3c     14 2A 06 F1 | 	add	local03, #20
15d40     15 FB 51 FC | 	wrword	result1, local03
15d44     14 00 00 FF 
15d48     38 E5 85 F1 | 	sub	objptr, ##10552
15d4c                 | LR__1806
15d4c     6C 4E 05 F1 | 	add	fp, #108
15d50     A7 14 02 FB | 	rdlong	arg02, fp
15d54     6C 4E 85 F1 | 	sub	fp, #108
15d58     FC 16 20 FF 
15d5c     54 12 06 F6 | 	mov	arg01, ##1076754516
15d60     78 10 B1 FD | 	call	#__system____builtin_logbase
15d64     FD 2C 02 F6 | 	mov	local04, result1
15d68     1E 14 C6 F9 | 	decod	arg02, #30
15d6c     FC 16 20 FF 
15d70     54 12 06 F6 | 	mov	arg01, ##1076754516
15d74     64 10 B1 FD | 	call	#__system____builtin_logbase
15d78     FD 14 02 F6 | 	mov	arg02, result1
15d7c     16 13 02 F6 | 	mov	arg01, local04
15d80     8C 02 B1 FD | 	call	#__system___float_div
15d84     FD 12 02 F6 | 	mov	arg01, result1
15d88     00 14 06 F6 | 	mov	arg02, #0
15d8c     44 05 B1 FD | 	call	#__system___float_tointeger
15d90     30 4E 05 F1 | 	add	fp, #48
15d94     A7 FA 61 FC | 	wrlong	result1, fp
15d98     1E 2C C6 F9 | 	decod	local04, #30
15d9c     FD 12 02 F6 | 	mov	arg01, result1
15da0     30 4E 85 F1 | 	sub	fp, #48
15da4     05 12 06 F1 | 	add	arg01, #5
15da8     09 13 52 F6 | 	abs	arg01, arg01 wc
15dac     1F 34 C6 C9 |  if_b	decod	local08, #31
15db0     00 34 06 36 |  if_ae	mov	local08, #0
15db4     50 FC B0 FD | 	call	#__system___float_fromuns
15db8     1A FB 61 F5 | 	xor	result1, local08
15dbc     FD 14 02 F6 | 	mov	arg02, result1
15dc0     16 13 02 F6 | 	mov	arg01, local04
15dc4     4C 0F B1 FD | 	call	#__system____builtin_powf
15dc8     FD 12 02 F6 | 	mov	arg01, result1
15dcc     01 14 06 F6 | 	mov	arg02, #1
15dd0     00 05 B1 FD | 	call	#__system___float_tointeger
15dd4     10 4E 05 F1 | 	add	fp, #16
15dd8     A7 FA 61 FC | 	wrlong	result1, fp
15ddc                 | ' skip=round(2^(lfreq+5))
15ddc                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
15ddc     10 4E 85 F1 | 	sub	fp, #16
15de0     40 00 00 FF 
15de4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
15de8     30 00 90 CD |  if_b	jmp	#LR__1807
15dec     10 4E 05 F1 | 	add	fp, #16
15df0     A7 26 02 FB | 	rdlong	local01, fp
15df4     13 2D 52 F6 | 	abs	local04, local01 wc
15df8     0F 2C 46 F0 | 	shr	local04, #15
15dfc     16 2D 82 F6 | 	negc	local04, local04
15e00     0C 4E 85 F1 | 	sub	fp, #12
15e04     A7 2C 62 FC | 	wrlong	local04, fp
15e08     0C 4E 05 F1 | 	add	fp, #12
15e0c     40 00 80 FF 
15e10     A7 00 68 FC | 	wrlong	##32768, fp
15e14     10 4E 85 F1 | 	sub	fp, #16
15e18     0C 00 90 FD | 	jmp	#LR__1808
15e1c                 | LR__1807
15e1c     04 4E 05 F1 | 	add	fp, #4
15e20     A7 02 68 FC | 	wrlong	#1, fp
15e24     04 4E 85 F1 | 	sub	fp, #4
15e28                 | LR__1808
15e28     6C 4E 05 F1 | 	add	fp, #108
15e2c     A7 14 02 FB | 	rdlong	arg02, fp
15e30     6C 4E 85 F1 | 	sub	fp, #108
15e34     3E 2C 25 FF 
15e38     3C 12 06 F6 | 	mov	arg01, ##1247312956
15e3c     D0 01 B1 FD | 	call	#__system___float_div
15e40     FD 2C 02 F6 | 	mov	local04, result1
15e44     04 4E 05 F1 | 	add	fp, #4
15e48     A7 12 02 FB | 	rdlong	arg01, fp
15e4c     04 4E 85 F1 | 	sub	fp, #4
15e50     09 13 52 F6 | 	abs	arg01, arg01 wc
15e54     1F 34 C6 C9 |  if_b	decod	local08, #31
15e58     00 34 06 36 |  if_ae	mov	local08, #0
15e5c     A8 FB B0 FD | 	call	#__system___float_fromuns
15e60     1A FB 61 F5 | 	xor	result1, local08
15e64     FD 26 02 F6 | 	mov	local01, result1
15e68     1E 28 C6 F9 | 	decod	local02, #30
15e6c     0D 12 06 F6 | 	mov	arg01, #13
15e70     30 4E 05 F1 | 	add	fp, #48
15e74     A7 30 02 FB | 	rdlong	local06, fp
15e78     30 4E 85 F1 | 	sub	fp, #48
15e7c     18 13 82 F1 | 	sub	arg01, local06
15e80     09 13 52 F6 | 	abs	arg01, arg01 wc
15e84     1F 34 C6 C9 |  if_b	decod	local08, #31
15e88     00 34 06 36 |  if_ae	mov	local08, #0
15e8c     78 FB B0 FD | 	call	#__system___float_fromuns
15e90     1A FB 61 F5 | 	xor	result1, local08
15e94     FD 14 02 F6 | 	mov	arg02, result1
15e98     14 13 02 F6 | 	mov	arg01, local02
15e9c     74 0E B1 FD | 	call	#__system____builtin_powf
15ea0     FD 14 02 F6 | 	mov	arg02, result1
15ea4     13 13 02 F6 | 	mov	arg01, local01
15ea8     60 FF B0 FD | 	call	#__system___float_mul
15eac     FD 14 02 F6 | 	mov	arg02, result1
15eb0     16 13 02 F6 | 	mov	arg01, local04
15eb4     58 01 B1 FD | 	call	#__system___float_div
15eb8     FD 12 02 F6 | 	mov	arg01, result1
15ebc     01 14 06 F6 | 	mov	arg02, #1
15ec0     10 04 B1 FD | 	call	#__system___float_tointeger
15ec4     34 4E 05 F1 | 	add	fp, #52
15ec8     A7 FA 61 FC | 	wrlong	result1, fp
15ecc     34 4E 05 F1 | 	add	fp, #52
15ed0     A7 12 02 FB | 	rdlong	arg01, fp
15ed4     10 4E 05 F1 | 	add	fp, #16
15ed8     A7 14 02 FB | 	rdlong	arg02, fp
15edc     78 4E 85 F1 | 	sub	fp, #120
15ee0     2C 01 B1 FD | 	call	#__system___float_div
15ee4     FD 12 02 F6 | 	mov	arg01, result1
15ee8     01 14 06 F6 | 	mov	arg02, #1
15eec     E4 03 B1 FD | 	call	#__system___float_tointeger
15ef0     FD 2C 02 F6 | 	mov	local04, result1
15ef4     14 4E 05 F1 | 	add	fp, #20
15ef8     A7 2C 62 FC | 	wrlong	local04, fp
15efc     5C 4E 05 F1 | 	add	fp, #92
15f00     A7 14 02 FB | 	rdlong	arg02, fp
15f04     70 4E 85 F1 | 	sub	fp, #112
15f08     00 00 23 FF 
15f0c     00 12 06 F6 | 	mov	arg01, ##1174405120
15f10     F8 FE B0 FD | 	call	#__system___float_mul
15f14     FD 12 02 F6 | 	mov	arg01, result1
15f18     01 14 06 F6 | 	mov	arg02, #1
15f1c     B4 03 B1 FD | 	call	#__system___float_tointeger
15f20     0D 2C C6 F9 | 	decod	local04, #13
15f24     FD 2C 02 F1 | 	add	local04, result1
15f28     18 4E 05 F1 | 	add	fp, #24
15f2c     A7 2C 62 FC | 	wrlong	local04, fp
15f30     5C 4E 05 F1 | 	add	fp, #92
15f34     A7 14 02 FB | 	rdlong	arg02, fp
15f38     74 4E 85 F1 | 	sub	fp, #116
15f3c     00 3D 22 FF 
15f40     00 12 06 F6 | 	mov	arg01, ##1148846080
15f44     C4 FE B0 FD | 	call	#__system___float_mul
15f48     FD 12 02 F6 | 	mov	arg01, result1
15f4c     01 14 06 F6 | 	mov	arg02, #1
15f50     80 03 B1 FD | 	call	#__system___float_tointeger
15f54     1C 4E 05 F1 | 	add	fp, #28
15f58     A7 FA 61 FC | 	wrlong	result1, fp
15f5c     37 00 00 FF 
15f60     10 E4 05 F1 | 	add	objptr, ##28176
15f64     F2 2C 02 FB | 	rdlong	local04, objptr
15f68     37 00 00 FF 
15f6c     10 E4 85 F1 | 	sub	objptr, ##28176
15f70     10 4E 85 F1 | 	sub	fp, #16
15f74     A7 28 02 FB | 	rdlong	local02, fp
15f78     06 28 66 F0 | 	shl	local02, #6
15f7c     14 2D 02 F1 | 	add	local04, local02
15f80     04 4E 85 F1 | 	sub	fp, #4
15f84     A7 2C 62 FC | 	wrlong	local04, fp
15f88                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
15f88                 | ' speed=round(speed_coeff/slen)
15f88                 | ' ipan=8192+round(8192*pan)
15f88                 | ' ivol=round(1000.0*vol)
15f88                 | ' base2=base+64*channel
15f88                 | ' if wave <32 then 
15f88     18 4E 05 F1 | 	add	fp, #24
15f8c     A7 2C 02 FB | 	rdlong	local04, fp
15f90     20 4E 85 F1 | 	sub	fp, #32
15f94     20 2C 56 F2 | 	cmps	local04, #32 wc
15f98     2C 00 90 3D |  if_ae	jmp	#LR__1809
15f9c     08 4E 05 F1 | 	add	fp, #8
15fa0     A7 12 02 FB | 	rdlong	arg01, fp
15fa4     08 12 06 F1 | 	add	arg01, #8
15fa8     18 4E 05 F1 | 	add	fp, #24
15fac     A7 14 02 FB | 	rdlong	arg02, fp
15fb0     20 4E 85 F1 | 	sub	fp, #32
15fb4     0B 14 66 F0 | 	shl	arg02, #11
15fb8     00 00 60 FF 
15fbc     00 14 06 F1 | 	add	arg02, ##-1073741824
15fc0     09 15 62 FC | 	wrlong	arg02, arg01
15fc4     18 00 90 FD | 	jmp	#LR__1810
15fc8                 | LR__1809
15fc8     08 4E 05 F1 | 	add	fp, #8
15fcc     A7 12 02 FB | 	rdlong	arg01, fp
15fd0     08 4E 85 F1 | 	sub	fp, #8
15fd4     08 12 06 F1 | 	add	arg01, #8
15fd8     00 00 E4 FF 
15fdc     09 01 68 FC | 	wrlong	##-939524096, arg01
15fe0                 | LR__1810
15fe0     08 4E 05 F1 | 	add	fp, #8
15fe4     A7 12 02 FB | 	rdlong	arg01, fp
15fe8     10 12 06 F1 | 	add	arg01, #16
15fec     04 00 80 FF 
15ff0     09 01 68 FC | 	wrlong	##2048, arg01
15ff4     A7 12 02 FB | 	rdlong	arg01, fp
15ff8     0C 12 06 F1 | 	add	arg01, #12
15ffc     09 01 68 FC | 	wrlong	#0, arg01
16000     A7 12 02 FB | 	rdlong	arg01, fp
16004     14 12 06 F1 | 	add	arg01, #20
16008     14 4E 05 F1 | 	add	fp, #20
1600c     A7 14 02 FB | 	rdlong	arg02, fp
16010     09 15 52 FC | 	wrword	arg02, arg01
16014     14 4E 85 F1 | 	sub	fp, #20
16018     A7 12 02 FB | 	rdlong	arg01, fp
1601c     16 12 06 F1 | 	add	arg01, #22
16020     10 4E 05 F1 | 	add	fp, #16
16024     A7 14 02 FB | 	rdlong	arg02, fp
16028     09 15 52 FC | 	wrword	arg02, arg01
1602c                 | ' lpoke base2+16,2048
1602c                 | ' lpoke base2+12,0
1602c                 | ' dpoke base2+20,ivol 
1602c                 | ' dpoke base2+22,ipan 
1602c                 | ' if wave<32 then
1602c     08 4E 05 F1 | 	add	fp, #8
16030     A7 2C 02 FB | 	rdlong	local04, fp
16034     20 4E 85 F1 | 	sub	fp, #32
16038     20 2C 56 F2 | 	cmps	local04, #32 wc
1603c     38 00 90 3D |  if_ae	jmp	#LR__1811
16040     08 4E 05 F1 | 	add	fp, #8
16044     A7 12 02 FB | 	rdlong	arg01, fp
16048     18 12 06 F1 | 	add	arg01, #24
1604c     2C 4E 05 F1 | 	add	fp, #44
16050     A7 14 02 FB | 	rdlong	arg02, fp
16054     09 15 52 FC | 	wrword	arg02, arg01
16058     2C 4E 85 F1 | 	sub	fp, #44
1605c     A7 12 02 FB | 	rdlong	arg01, fp
16060     1A 12 06 F1 | 	add	arg01, #26
16064     08 4E 05 F1 | 	add	fp, #8
16068     A7 14 02 FB | 	rdlong	arg02, fp
1606c     10 4E 85 F1 | 	sub	fp, #16
16070     09 15 52 FC | 	wrword	arg02, arg01
16074     48 00 90 FD | 	jmp	#LR__1812
16078                 | LR__1811
16078     08 4E 05 F1 | 	add	fp, #8
1607c     A7 2C 02 FB | 	rdlong	local04, fp
16080     18 2C 06 F1 | 	add	local04, #24
16084     64 4E 05 F1 | 	add	fp, #100
16088     A7 14 02 FB | 	rdlong	arg02, fp
1608c     6C 4E 85 F1 | 	sub	fp, #108
16090     3E 2C 25 FF 
16094     3C 12 06 F6 | 	mov	arg01, ##1247312956
16098     74 FF B0 FD | 	call	#__system___float_div
1609c     FD 12 02 F6 | 	mov	arg01, result1
160a0     01 14 06 F6 | 	mov	arg02, #1
160a4     2C 02 B1 FD | 	call	#__system___float_tointeger
160a8     16 FB 51 FC | 	wrword	result1, local04
160ac     08 4E 05 F1 | 	add	fp, #8
160b0     A7 12 02 FB | 	rdlong	arg01, fp
160b4     08 4E 85 F1 | 	sub	fp, #8
160b8     1A 12 06 F1 | 	add	arg01, #26
160bc     09 01 5A FC | 	wrword	#256, arg01
160c0                 | LR__1812
160c0     08 4E 05 F1 | 	add	fp, #8
160c4     A7 12 02 FB | 	rdlong	arg01, fp
160c8     1C 12 06 F1 | 	add	arg01, #28
160cc     09 01 68 FC | 	wrlong	#0, arg01
160d0     A7 12 02 FB | 	rdlong	arg01, fp
160d4     20 12 06 F1 | 	add	arg01, #32
160d8     09 01 68 FC | 	wrlong	#0, arg01
160dc                 | ' lpoke base2+28,$0000_0000
160dc                 | ' lpoke base2+32,0 
160dc                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
160dc     1C 4E 05 F1 | 	add	fp, #28
160e0     A7 2C 02 FB | 	rdlong	local04, fp
160e4     24 4E 85 F1 | 	sub	fp, #36
160e8     08 2C 0E F2 | 	cmp	local04, #8 wz
160ec     18 00 90 5D |  if_ne	jmp	#LR__1813
160f0     08 4E 05 F1 | 	add	fp, #8
160f4     A7 12 02 FB | 	rdlong	arg01, fp
160f8     08 4E 85 F1 | 	sub	fp, #8
160fc     24 12 06 F1 | 	add	arg01, #36
16100     09 01 68 FC | 	wrlong	#0, arg01
16104     34 00 90 FD | 	jmp	#LR__1814
16108                 | LR__1813
16108     08 4E 05 F1 | 	add	fp, #8
1610c     A7 12 02 FB | 	rdlong	arg01, fp
16110     24 12 06 F1 | 	add	arg01, #36
16114     1C 4E 05 F1 | 	add	fp, #28
16118     A7 14 02 FB | 	rdlong	arg02, fp
1611c     24 4E 85 F1 | 	sub	fp, #36
16120     09 14 66 F0 | 	shl	arg02, #9
16124     0C 00 00 FF 
16128     D8 E4 05 F1 | 	add	objptr, ##6360
1612c     F2 14 02 F1 | 	add	arg02, objptr
16130     0C 00 00 FF 
16134     D8 E4 85 F1 | 	sub	objptr, ##6360
16138     09 15 62 FC | 	wrlong	arg02, arg01
1613c                 | LR__1814
1613c     08 4E 05 F1 | 	add	fp, #8
16140     A7 12 02 FB | 	rdlong	arg01, fp
16144     28 12 06 F1 | 	add	arg01, #40
16148     0C 4E 05 F1 | 	add	fp, #12
1614c     A7 14 02 FB | 	rdlong	arg02, fp
16150     09 15 62 FC | 	wrlong	arg02, arg01
16154     0C 4E 85 F1 | 	sub	fp, #12
16158     A7 12 02 FB | 	rdlong	arg01, fp
1615c     2C 12 06 F1 | 	add	arg01, #44
16160     24 4E 05 F1 | 	add	fp, #36
16164     A7 14 02 FB | 	rdlong	arg02, fp
16168     09 15 62 FC | 	wrlong	arg02, arg01
1616c                 | ' lpoke base2+40,speed 
1616c                 | ' lpoke base2+44,sus 
1616c                 | ' if delay>0 then waitms(delay) 
1616c     04 4E 85 F1 | 	sub	fp, #4
16170     A7 2C 02 FB | 	rdlong	local04, fp
16174     28 4E 85 F1 | 	sub	fp, #40
16178     01 2C 56 F2 | 	cmps	local04, #1 wc
1617c     28 4E 05 31 |  if_ae	add	fp, #40
16180     A7 12 02 3B |  if_ae	rdlong	arg01, fp
16184     28 4E 85 31 |  if_ae	sub	fp, #40
16188     FC D0 B0 3D |  if_ae	call	#__system___waitms
1618c     A7 F0 03 F6 | 	mov	ptra, fp
16190     B2 00 A0 FD | 	call	#popregs_
16194                 | _do_play_ret
16194     2D 00 64 FD | 	ret
16198                 | 
16198                 | ' 
16198                 | ' '-------------------- plot
16198                 | ' 
16198                 | ' sub do_plot
16198                 | _do_plot
16198     00 4A 05 F6 | 	mov	COUNT_, #0
1619c     A8 00 A0 FD | 	call	#pushregs_
161a0     20 F0 07 F1 | 	add	ptra, #32
161a4     38 67 BF FD | 	call	#_pop
161a8     FD 16 02 F6 | 	mov	arg03, result1
161ac     FE 14 02 F6 | 	mov	arg02, result2
161b0     FF 12 02 F6 | 	mov	arg01, result3
161b4     0C 4E 05 F1 | 	add	fp, #12
161b8     A7 16 62 FC | 	wrlong	arg03, fp
161bc     04 4E 05 F1 | 	add	fp, #4
161c0     A7 14 62 FC | 	wrlong	arg02, fp
161c4     04 4E 05 F1 | 	add	fp, #4
161c8     A7 12 62 FC | 	wrlong	arg01, fp
161cc     14 4E 85 F1 | 	sub	fp, #20
161d0     0C 67 BF FD | 	call	#_pop
161d4     FF 16 02 F6 | 	mov	arg03, result3
161d8     A7 FA 61 FC | 	wrlong	result1, fp
161dc     04 4E 05 F1 | 	add	fp, #4
161e0     A7 FC 61 FC | 	wrlong	result2, fp
161e4     04 4E 05 F1 | 	add	fp, #4
161e8     A7 16 62 FC | 	wrlong	arg03, fp
161ec     08 4E 85 F1 | 	sub	fp, #8
161f0     A7 12 02 F6 | 	mov	arg01, fp
161f4     CC 68 BF FD | 	call	#_converttoint
161f8     18 4E 05 F1 | 	add	fp, #24
161fc     A7 FA 61 FC | 	wrlong	result1, fp
16200     0C 4E 85 F1 | 	sub	fp, #12
16204     A7 12 02 F6 | 	mov	arg01, fp
16208     0C 4E 85 F1 | 	sub	fp, #12
1620c     B4 68 BF FD | 	call	#_converttoint
16210     1C 4E 05 F1 | 	add	fp, #28
16214     A7 FA 61 FC | 	wrlong	result1, fp
16218     04 4E 85 F1 | 	sub	fp, #4
1621c     A7 16 02 FB | 	rdlong	arg03, fp
16220     37 00 00 FF 
16224     2C E4 05 F1 | 	add	objptr, ##28204
16228     F2 16 62 FC | 	wrlong	arg03, objptr
1622c     04 4E 05 F1 | 	add	fp, #4
16230     A7 14 02 FB | 	rdlong	arg02, fp
16234     1C 4E 85 F1 | 	sub	fp, #28
16238     04 E4 05 F1 | 	add	objptr, #4
1623c     F2 14 62 FC | 	wrlong	arg02, objptr
16240     04 E4 85 F1 | 	sub	objptr, #4
16244     F2 12 02 FB | 	rdlong	arg01, objptr
16248     04 E4 85 F1 | 	sub	objptr, #4
1624c     F2 16 02 FB | 	rdlong	arg03, objptr
16250     37 00 00 FF 
16254     28 E4 85 F1 | 	sub	objptr, ##28200
16258     28 A4 B0 FD | 	call	#_hg010b_spin2_putpixel
1625c     A7 F0 03 F6 | 	mov	ptra, fp
16260     B2 00 A0 FD | 	call	#popregs_
16264                 | _do_plot_ret
16264     2D 00 64 FD | 	ret
16268                 | 
16268                 | ' 
16268                 | ' '-------------------- poke
16268                 | ' 
16268                 | ' sub do_poke
16268                 | _do_poke
16268     01 4A 05 F6 | 	mov	COUNT_, #1
1626c     A8 00 A0 FD | 	call	#pushregs_
16270     20 F0 07 F1 | 	add	ptra, #32
16274     68 66 BF FD | 	call	#_pop
16278     FD 14 02 F6 | 	mov	arg02, result1
1627c     FE 12 02 F6 | 	mov	arg01, result2
16280     FF 26 02 F6 | 	mov	local01, result3
16284     A7 14 62 FC | 	wrlong	arg02, fp
16288     04 4E 05 F1 | 	add	fp, #4
1628c     A7 12 62 FC | 	wrlong	arg01, fp
16290     04 4E 05 F1 | 	add	fp, #4
16294     A7 26 62 FC | 	wrlong	local01, fp
16298     08 4E 85 F1 | 	sub	fp, #8
1629c     40 66 BF FD | 	call	#_pop
162a0     FF 26 02 F6 | 	mov	local01, result3
162a4     0C 4E 05 F1 | 	add	fp, #12
162a8     A7 FA 61 FC | 	wrlong	result1, fp
162ac     04 4E 05 F1 | 	add	fp, #4
162b0     A7 FC 61 FC | 	wrlong	result2, fp
162b4     04 4E 05 F1 | 	add	fp, #4
162b8     A7 26 62 FC | 	wrlong	local01, fp
162bc     08 4E 85 F1 | 	sub	fp, #8
162c0     A7 12 02 F6 | 	mov	arg01, fp
162c4     0C 4E 85 F1 | 	sub	fp, #12
162c8     F8 67 BF FD | 	call	#_converttoint
162cc     18 4E 05 F1 | 	add	fp, #24
162d0     A7 FA 61 FC | 	wrlong	result1, fp
162d4     18 4E 85 F1 | 	sub	fp, #24
162d8     A7 12 02 F6 | 	mov	arg01, fp
162dc     E4 67 BF FD | 	call	#_converttoint
162e0     1C 4E 05 F1 | 	add	fp, #28
162e4     A7 FA 61 FC | 	wrlong	result1, fp
162e8                 | ' t1=pop() 'value
162e8                 | ' t2=pop() 
162e8                 | ' a=converttoint(t2) : v=converttoint(t1)
162e8                 | ' if a<$80000 then poke a,v else pspoke a,v
162e8     04 4E 85 F1 | 	sub	fp, #4
162ec     A7 26 02 FB | 	rdlong	local01, fp
162f0     18 4E 85 F1 | 	sub	fp, #24
162f4     00 04 00 FF 
162f8     00 26 16 F2 | 	cmp	local01, ##524288 wc
162fc     1C 00 90 3D |  if_ae	jmp	#LR__1820
16300     18 4E 05 F1 | 	add	fp, #24
16304     A7 12 02 FB | 	rdlong	arg01, fp
16308     04 4E 05 F1 | 	add	fp, #4
1630c     A7 14 02 FB | 	rdlong	arg02, fp
16310     1C 4E 85 F1 | 	sub	fp, #28
16314     09 15 42 FC | 	wrbyte	arg02, arg01
16318     18 00 90 FD | 	jmp	#LR__1821
1631c                 | LR__1820
1631c     18 4E 05 F1 | 	add	fp, #24
16320     A7 12 02 FB | 	rdlong	arg01, fp
16324     04 4E 05 F1 | 	add	fp, #4
16328     A7 14 02 FB | 	rdlong	arg02, fp
1632c     1C 4E 85 F1 | 	sub	fp, #28
16330     EC 94 B0 FD | 	call	#_pspoke
16334                 | LR__1821
16334     A7 F0 03 F6 | 	mov	ptra, fp
16338     B2 00 A0 FD | 	call	#popregs_
1633c                 | _do_poke_ret
1633c     2D 00 64 FD | 	ret
16340                 | 
16340                 | ' 
16340                 | ' '-------------------- pop
16340                 | ' 
16340                 | ' sub do_pop()
16340                 | _do_pop
16340                 | ' if gosubtop>0 then  gosubtop -=1 
16340     50 00 00 FF 
16344     0C E5 05 F1 | 	add	objptr, ##41228
16348     F2 00 02 FB | 	rdlong	_var01, objptr
1634c     50 00 00 FF 
16350     0C E5 85 F1 | 	sub	objptr, ##41228
16354     01 00 56 F2 | 	cmps	_var01, #1 wc
16358     50 00 00 3F 
1635c     0C E5 05 31 |  if_ae	add	objptr, ##41228
16360     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
16364     01 00 86 31 |  if_ae	sub	_var01, #1
16368     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
1636c     50 00 00 3F 
16370     0C E5 85 31 |  if_ae	sub	objptr, ##41228
16374                 | _do_pop_ret
16374     2D 00 64 FD | 	ret
16378                 | 
16378                 | ' 
16378                 | ' '-------------------- position
16378                 | ' 
16378                 | ' sub do_position
16378                 | _do_position
16378     01 4A 05 F6 | 	mov	COUNT_, #1
1637c     A8 00 A0 FD | 	call	#pushregs_
16380     18 F0 07 F1 | 	add	ptra, #24
16384     58 65 BF FD | 	call	#_pop
16388     FD 14 02 F6 | 	mov	arg02, result1
1638c     FE 12 02 F6 | 	mov	arg01, result2
16390     FF 26 02 F6 | 	mov	local01, result3
16394     A7 14 62 FC | 	wrlong	arg02, fp
16398     04 4E 05 F1 | 	add	fp, #4
1639c     A7 12 62 FC | 	wrlong	arg01, fp
163a0     04 4E 05 F1 | 	add	fp, #4
163a4     A7 26 62 FC | 	wrlong	local01, fp
163a8     08 4E 85 F1 | 	sub	fp, #8
163ac     30 65 BF FD | 	call	#_pop
163b0     FF 26 02 F6 | 	mov	local01, result3
163b4     0C 4E 05 F1 | 	add	fp, #12
163b8     A7 FA 61 FC | 	wrlong	result1, fp
163bc     04 4E 05 F1 | 	add	fp, #4
163c0     A7 FC 61 FC | 	wrlong	result2, fp
163c4     04 4E 05 F1 | 	add	fp, #4
163c8     A7 26 62 FC | 	wrlong	local01, fp
163cc     08 4E 85 F1 | 	sub	fp, #8
163d0     A7 12 02 F6 | 	mov	arg01, fp
163d4     0C 4E 85 F1 | 	sub	fp, #12
163d8     E8 66 BF FD | 	call	#_converttoint
163dc     FD 26 02 F6 | 	mov	local01, result1
163e0     A7 12 02 F6 | 	mov	arg01, fp
163e4     DC 66 BF FD | 	call	#_converttoint
163e8     FD 14 02 F6 | 	mov	arg02, result1
163ec     13 13 02 F6 | 	mov	arg01, local01
163f0     54 AE B0 FD | 	call	#_hg010b_spin2_setcursorpos
163f4     A7 F0 03 F6 | 	mov	ptra, fp
163f8     B2 00 A0 FD | 	call	#popregs_
163fc                 | _do_position_ret
163fc     2D 00 64 FD | 	ret
16400                 | 
16400                 | ' 
16400                 | ' '-------------------- print
16400                 | ' 
16400                 | ' sub do_print  
16400                 | _do_print
16400     0B 4A 05 F6 | 	mov	COUNT_, #11
16404     A8 00 A0 FD | 	call	#pushregs_
16408     00 2C 06 F6 | 	mov	local04, #0
1640c     D0 64 BF FD | 	call	#_pop
16410     FD 2E 02 F6 | 	mov	local05, result1
16414     FE 30 02 F6 | 	mov	local06, result2
16418     FF 32 02 F6 | 	mov	local07, result3
1641c     17 27 02 F6 | 	mov	local01, local05
16420     18 29 02 F6 | 	mov	local02, local06
16424     19 2B 02 F6 | 	mov	local03, local07
16428                 | '  
16428                 | ' r=0
16428                 | ' t1=pop() 
16428                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
16428     21 2A 0E F2 | 	cmp	local03, #33 wz
1642c     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
16430     20 00 90 5D |  if_ne	jmp	#LR__1830
16434     15 2D 02 F6 | 	mov	local04, local03
16438     A4 64 BF FD | 	call	#_pop
1643c     FD 2E 02 F6 | 	mov	local05, result1
16440     FE 30 02 F6 | 	mov	local06, result2
16444     FF 32 02 F6 | 	mov	local07, result3
16448     17 27 02 F6 | 	mov	local01, local05
1644c     18 29 02 F6 | 	mov	local02, local06
16450     19 2B 02 F6 | 	mov	local03, local07
16454                 | LR__1830
16454                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
16454     20 2A 0E F2 | 	cmp	local03, #32 wz
16458     15 2D 02 A6 |  if_e	mov	local04, local03
1645c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
1645c     FF 2A 0E F2 | 	cmp	local03, #255 wz
16460     10 00 90 5D |  if_ne	jmp	#LR__1831
16464     13 13 02 F6 | 	mov	arg01, local01
16468     00 14 06 F6 | 	mov	arg02, #0
1646c     94 91 B0 FD | 	call	#_printerror
16470     D4 04 90 FD | 	jmp	#LR__1850
16474                 | LR__1831
16474                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
16474     2B 2A 0E F2 | 	cmp	local03, #43 wz
16478     14 00 90 5D |  if_ne	jmp	#LR__1832
1647c     13 13 02 F6 | 	mov	arg01, local01
16480     D4 65 BF FD | 	call	#_convertstring
16484     FD 2E 02 F6 | 	mov	local05, result1
16488     17 27 02 F6 | 	mov	local01, local05
1648c     1F 2A 06 F6 | 	mov	local03, #31
16490                 | LR__1832
16490                 | ' 
16490                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
16490     2C 2A 0E F2 | 	cmp	local03, #44 wz
16494     80 00 90 5D |  if_ne	jmp	#LR__1833
16498     00 12 06 F6 | 	mov	arg01, #0
1649c     1C 28 B1 FD | 	call	#__system___getiolock_0558
164a0     FD 12 02 F6 | 	mov	arg01, result1
164a4     EC CA B0 FD | 	call	#__system___lockmem
164a8     9A 01 00 FF 
164ac     C5 14 06 F6 | 	mov	arg02, ##@LR__5694
164b0     00 12 06 F6 | 	mov	arg01, #0
164b4     00 16 06 F6 | 	mov	arg03, #0
164b8     CC D7 B0 FD | 	call	#__system___basic_print_string
164bc     0A 34 06 F6 | 	mov	local08, #10
164c0     00 12 06 F6 | 	mov	arg01, #0
164c4     13 15 02 F6 | 	mov	arg02, local01
164c8     00 16 06 F6 | 	mov	arg03, #0
164cc     0A 18 06 F6 | 	mov	arg04, #10
164d0     F8 D7 B0 FD | 	call	#__system___basic_print_integer
164d4     FD 36 02 F6 | 	mov	local09, result1
164d8     00 12 06 F6 | 	mov	arg01, #0
164dc     0A 14 06 F6 | 	mov	arg02, #10
164e0     00 16 06 F6 | 	mov	arg03, #0
164e4     48 D7 B0 FD | 	call	#__system___basic_print_char
164e8     01 38 06 F6 | 	mov	local10, #1
164ec     00 12 06 F6 | 	mov	arg01, #0
164f0     C8 27 B1 FD | 	call	#__system___getiolock_0558
164f4     FD 00 68 FC | 	wrlong	#0, result1
164f8     00 3A 06 F6 | 	mov	local11, #0
164fc     E0 63 BF FD | 	call	#_pop
16500     FD 2E 02 F6 | 	mov	local05, result1
16504     FE 30 02 F6 | 	mov	local06, result2
16508     FF 32 02 F6 | 	mov	local07, result3
1650c     17 27 02 F6 | 	mov	local01, local05
16510     18 29 02 F6 | 	mov	local02, local06
16514     19 2B 02 F6 | 	mov	local03, local07
16518                 | LR__1833
16518                 | ' 
16518                 | ' if r=print_mod_comma  then
16518     21 2C 0E F2 | 	cmp	local04, #33 wz
1651c     AC 01 90 5D |  if_ne	jmp	#LR__1838
16520                 | '   if t1.result_type=result_int then print t1.result.iresult,
16520     1C 2A 0E F2 | 	cmp	local03, #28 wz
16524     64 00 90 5D |  if_ne	jmp	#LR__1834
16528     00 12 06 F6 | 	mov	arg01, #0
1652c     8C 27 B1 FD | 	call	#__system___getiolock_0558
16530     FD 12 02 F6 | 	mov	arg01, result1
16534     5C CA B0 FD | 	call	#__system___lockmem
16538     00 30 06 F6 | 	mov	local06, #0
1653c     00 12 06 F6 | 	mov	arg01, #0
16540     13 15 02 F6 | 	mov	arg02, local01
16544     00 16 06 F6 | 	mov	arg03, #0
16548     0A 18 06 F6 | 	mov	arg04, #10
1654c     7C D7 B0 FD | 	call	#__system___basic_print_integer
16550     FD 32 02 F6 | 	mov	local07, result1
16554     18 2F 02 F6 | 	mov	local05, local06
16558     19 2F 02 F1 | 	add	local05, local07
1655c     00 3A 06 F6 | 	mov	local11, #0
16560     00 12 06 F6 | 	mov	arg01, #0
16564     09 14 06 F6 | 	mov	arg02, #9
16568     00 16 06 F6 | 	mov	arg03, #0
1656c     C0 D6 B0 FD | 	call	#__system___basic_print_char
16570     FD 36 02 F6 | 	mov	local09, result1
16574     FD 2E 02 F1 | 	add	local05, result1
16578     00 12 06 F6 | 	mov	arg01, #0
1657c     3C 27 B1 FD | 	call	#__system___getiolock_0558
16580     FD 00 68 FC | 	wrlong	#0, result1
16584     00 FA 05 F6 | 	mov	result1, #0
16588     00 38 06 F6 | 	mov	local10, #0
1658c                 | LR__1834
1658c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1658c     1D 2A 0E F2 | 	cmp	local03, #29 wz
16590     64 00 90 5D |  if_ne	jmp	#LR__1835
16594     00 12 06 F6 | 	mov	arg01, #0
16598     20 27 B1 FD | 	call	#__system___getiolock_0558
1659c     FD 12 02 F6 | 	mov	arg01, result1
165a0     F0 C9 B0 FD | 	call	#__system___lockmem
165a4     00 30 06 F6 | 	mov	local06, #0
165a8     00 12 06 F6 | 	mov	arg01, #0
165ac     13 15 02 F6 | 	mov	arg02, local01
165b0     00 16 06 F6 | 	mov	arg03, #0
165b4     0A 18 06 F6 | 	mov	arg04, #10
165b8     50 D7 B0 FD | 	call	#__system___basic_print_unsigned
165bc     FD 32 02 F6 | 	mov	local07, result1
165c0     18 2F 02 F6 | 	mov	local05, local06
165c4     19 2F 02 F1 | 	add	local05, local07
165c8     00 3A 06 F6 | 	mov	local11, #0
165cc     00 12 06 F6 | 	mov	arg01, #0
165d0     09 14 06 F6 | 	mov	arg02, #9
165d4     00 16 06 F6 | 	mov	arg03, #0
165d8     54 D6 B0 FD | 	call	#__system___basic_print_char
165dc     FD 36 02 F6 | 	mov	local09, result1
165e0     FD 2E 02 F1 | 	add	local05, result1
165e4     00 12 06 F6 | 	mov	arg01, #0
165e8     D0 26 B1 FD | 	call	#__system___getiolock_0558
165ec     FD 00 68 FC | 	wrlong	#0, result1
165f0     00 FA 05 F6 | 	mov	result1, #0
165f4     00 38 06 F6 | 	mov	local10, #0
165f8                 | LR__1835
165f8                 | '   if t1.result_type=result_float then print t1.result.fresult,
165f8     1E 2A 0E F2 | 	cmp	local03, #30 wz
165fc     64 00 90 5D |  if_ne	jmp	#LR__1836
16600     00 12 06 F6 | 	mov	arg01, #0
16604     B4 26 B1 FD | 	call	#__system___getiolock_0558
16608     FD 12 02 F6 | 	mov	arg01, result1
1660c     84 C9 B0 FD | 	call	#__system___lockmem
16610     00 30 06 F6 | 	mov	local06, #0
16614     00 12 06 F6 | 	mov	arg01, #0
16618     13 15 02 F6 | 	mov	arg02, local01
1661c     00 16 06 F6 | 	mov	arg03, #0
16620     23 18 06 F6 | 	mov	arg04, #35
16624     FC FD B0 FD | 	call	#__system___basic_print_float
16628     FD 32 02 F6 | 	mov	local07, result1
1662c     18 2F 02 F6 | 	mov	local05, local06
16630     19 2F 02 F1 | 	add	local05, local07
16634     00 3A 06 F6 | 	mov	local11, #0
16638     00 12 06 F6 | 	mov	arg01, #0
1663c     09 14 06 F6 | 	mov	arg02, #9
16640     00 16 06 F6 | 	mov	arg03, #0
16644     E8 D5 B0 FD | 	call	#__system___basic_print_char
16648     FD 36 02 F6 | 	mov	local09, result1
1664c     FD 2E 02 F1 | 	add	local05, result1
16650     00 12 06 F6 | 	mov	arg01, #0
16654     64 26 B1 FD | 	call	#__system___getiolock_0558
16658     FD 00 68 FC | 	wrlong	#0, result1
1665c     00 FA 05 F6 | 	mov	result1, #0
16660     00 38 06 F6 | 	mov	local10, #0
16664                 | LR__1836
16664                 | '   if t1.result_type=result_string then print t1.result.sresult,
16664     1F 2A 0E F2 | 	cmp	local03, #31 wz
16668     60 00 90 5D |  if_ne	jmp	#LR__1837
1666c     00 12 06 F6 | 	mov	arg01, #0
16670     48 26 B1 FD | 	call	#__system___getiolock_0558
16674     FD 12 02 F6 | 	mov	arg01, result1
16678     18 C9 B0 FD | 	call	#__system___lockmem
1667c     00 30 06 F6 | 	mov	local06, #0
16680     00 12 06 F6 | 	mov	arg01, #0
16684     13 15 02 F6 | 	mov	arg02, local01
16688     00 16 06 F6 | 	mov	arg03, #0
1668c     F8 D5 B0 FD | 	call	#__system___basic_print_string
16690     FD 32 02 F6 | 	mov	local07, result1
16694     18 2F 02 F6 | 	mov	local05, local06
16698     19 2F 02 F1 | 	add	local05, local07
1669c     00 3A 06 F6 | 	mov	local11, #0
166a0     00 12 06 F6 | 	mov	arg01, #0
166a4     09 14 06 F6 | 	mov	arg02, #9
166a8     00 16 06 F6 | 	mov	arg03, #0
166ac     80 D5 B0 FD | 	call	#__system___basic_print_char
166b0     FD 36 02 F6 | 	mov	local09, result1
166b4     FD 2E 02 F1 | 	add	local05, result1
166b8     00 12 06 F6 | 	mov	arg01, #0
166bc     FC 25 B1 FD | 	call	#__system___getiolock_0558
166c0     FD 00 68 FC | 	wrlong	#0, result1
166c4     00 FA 05 F6 | 	mov	result1, #0
166c8     00 38 06 F6 | 	mov	local10, #0
166cc                 | LR__1837
166cc                 | LR__1838
166cc                 | ' if r=print_mod_semicolon then 
166cc     22 2C 0E F2 | 	cmp	local04, #34 wz
166d0     1C 01 90 5D |  if_ne	jmp	#LR__1843
166d4                 | '   if t1.result_type=result_int then print t1.result.iresult;
166d4     1C 2A 0E F2 | 	cmp	local03, #28 wz
166d8     50 00 90 5D |  if_ne	jmp	#LR__1839
166dc     00 12 06 F6 | 	mov	arg01, #0
166e0     D8 25 B1 FD | 	call	#__system___getiolock_0558
166e4     FD 12 02 F6 | 	mov	arg01, result1
166e8     A8 C8 B0 FD | 	call	#__system___lockmem
166ec     00 30 06 F6 | 	mov	local06, #0
166f0     00 38 06 F6 | 	mov	local10, #0
166f4     0A 3A 06 F6 | 	mov	local11, #10
166f8     00 12 06 F6 | 	mov	arg01, #0
166fc     13 15 02 F6 | 	mov	arg02, local01
16700     00 16 06 F6 | 	mov	arg03, #0
16704     0A 18 06 F6 | 	mov	arg04, #10
16708     C0 D5 B0 FD | 	call	#__system___basic_print_integer
1670c     FD 32 02 F6 | 	mov	local07, result1
16710     18 2F 02 F6 | 	mov	local05, local06
16714     19 2F 02 F1 | 	add	local05, local07
16718     00 12 06 F6 | 	mov	arg01, #0
1671c     9C 25 B1 FD | 	call	#__system___getiolock_0558
16720     FD 00 68 FC | 	wrlong	#0, result1
16724     00 FA 05 F6 | 	mov	result1, #0
16728     00 36 06 F6 | 	mov	local09, #0
1672c                 | LR__1839
1672c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1672c     1D 2A 0E F2 | 	cmp	local03, #29 wz
16730     50 00 90 5D |  if_ne	jmp	#LR__1840
16734     00 12 06 F6 | 	mov	arg01, #0
16738     80 25 B1 FD | 	call	#__system___getiolock_0558
1673c     FD 12 02 F6 | 	mov	arg01, result1
16740     50 C8 B0 FD | 	call	#__system___lockmem
16744     00 30 06 F6 | 	mov	local06, #0
16748     00 38 06 F6 | 	mov	local10, #0
1674c     0A 3A 06 F6 | 	mov	local11, #10
16750     00 12 06 F6 | 	mov	arg01, #0
16754     13 15 02 F6 | 	mov	arg02, local01
16758     00 16 06 F6 | 	mov	arg03, #0
1675c     0A 18 06 F6 | 	mov	arg04, #10
16760     A8 D5 B0 FD | 	call	#__system___basic_print_unsigned
16764     FD 32 02 F6 | 	mov	local07, result1
16768     18 2F 02 F6 | 	mov	local05, local06
1676c     19 2F 02 F1 | 	add	local05, local07
16770     00 12 06 F6 | 	mov	arg01, #0
16774     44 25 B1 FD | 	call	#__system___getiolock_0558
16778     FD 00 68 FC | 	wrlong	#0, result1
1677c     00 FA 05 F6 | 	mov	result1, #0
16780     00 36 06 F6 | 	mov	local09, #0
16784                 | LR__1840
16784                 | '   if t1.result_type=result_float then print t1.result.fresult;
16784     1E 2A 0E F2 | 	cmp	local03, #30 wz
16788     30 00 90 5D |  if_ne	jmp	#LR__1841
1678c     00 12 06 F6 | 	mov	arg01, #0
16790     28 25 B1 FD | 	call	#__system___getiolock_0558
16794     FD 12 02 F6 | 	mov	arg01, result1
16798     F8 C7 B0 FD | 	call	#__system___lockmem
1679c     00 12 06 F6 | 	mov	arg01, #0
167a0     13 15 02 F6 | 	mov	arg02, local01
167a4     00 16 06 F6 | 	mov	arg03, #0
167a8     23 18 06 F6 | 	mov	arg04, #35
167ac     74 FC B0 FD | 	call	#__system___basic_print_float
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     04 25 B1 FD | 	call	#__system___getiolock_0558
167b8     FD 00 68 FC | 	wrlong	#0, result1
167bc                 | LR__1841
167bc                 | '   if t1.result_type=result_string then print t1.result.sresult;
167bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
167c0     2C 00 90 5D |  if_ne	jmp	#LR__1842
167c4     00 12 06 F6 | 	mov	arg01, #0
167c8     F0 24 B1 FD | 	call	#__system___getiolock_0558
167cc     FD 12 02 F6 | 	mov	arg01, result1
167d0     C0 C7 B0 FD | 	call	#__system___lockmem
167d4     00 12 06 F6 | 	mov	arg01, #0
167d8     13 15 02 F6 | 	mov	arg02, local01
167dc     00 16 06 F6 | 	mov	arg03, #0
167e0     A4 D4 B0 FD | 	call	#__system___basic_print_string
167e4     00 12 06 F6 | 	mov	arg01, #0
167e8     D0 24 B1 FD | 	call	#__system___getiolock_0558
167ec     FD 00 68 FC | 	wrlong	#0, result1
167f0                 | LR__1842
167f0                 | LR__1843
167f0                 | ' if r=0 then 
167f0     00 2C 0E F2 | 	cmp	local04, #0 wz
167f4     1C 01 90 5D |  if_ne	jmp	#LR__1848
167f8                 | '   if t1.result_type=result_int then print t1.result.iresult
167f8     1C 2A 0E F2 | 	cmp	local03, #28 wz
167fc     40 00 90 5D |  if_ne	jmp	#LR__1844
16800     00 12 06 F6 | 	mov	arg01, #0
16804     B4 24 B1 FD | 	call	#__system___getiolock_0558
16808     FD 12 02 F6 | 	mov	arg01, result1
1680c     84 C7 B0 FD | 	call	#__system___lockmem
16810     00 12 06 F6 | 	mov	arg01, #0
16814     13 15 02 F6 | 	mov	arg02, local01
16818     00 16 06 F6 | 	mov	arg03, #0
1681c     0A 18 06 F6 | 	mov	arg04, #10
16820     A8 D4 B0 FD | 	call	#__system___basic_print_integer
16824     00 12 06 F6 | 	mov	arg01, #0
16828     0A 14 06 F6 | 	mov	arg02, #10
1682c     00 16 06 F6 | 	mov	arg03, #0
16830     FC D3 B0 FD | 	call	#__system___basic_print_char
16834     00 12 06 F6 | 	mov	arg01, #0
16838     80 24 B1 FD | 	call	#__system___getiolock_0558
1683c     FD 00 68 FC | 	wrlong	#0, result1
16840                 | LR__1844
16840                 | '   if t1.result_type=result_uint then print t1.result.uresult
16840     1D 2A 0E F2 | 	cmp	local03, #29 wz
16844     40 00 90 5D |  if_ne	jmp	#LR__1845
16848     00 12 06 F6 | 	mov	arg01, #0
1684c     6C 24 B1 FD | 	call	#__system___getiolock_0558
16850     FD 12 02 F6 | 	mov	arg01, result1
16854     3C C7 B0 FD | 	call	#__system___lockmem
16858     00 12 06 F6 | 	mov	arg01, #0
1685c     13 15 02 F6 | 	mov	arg02, local01
16860     00 16 06 F6 | 	mov	arg03, #0
16864     0A 18 06 F6 | 	mov	arg04, #10
16868     A0 D4 B0 FD | 	call	#__system___basic_print_unsigned
1686c     00 12 06 F6 | 	mov	arg01, #0
16870     0A 14 06 F6 | 	mov	arg02, #10
16874     00 16 06 F6 | 	mov	arg03, #0
16878     B4 D3 B0 FD | 	call	#__system___basic_print_char
1687c     00 12 06 F6 | 	mov	arg01, #0
16880     38 24 B1 FD | 	call	#__system___getiolock_0558
16884     FD 00 68 FC | 	wrlong	#0, result1
16888                 | LR__1845
16888                 | '   if t1.result_type=result_float then print t1.result.fresult
16888     1E 2A 0E F2 | 	cmp	local03, #30 wz
1688c     40 00 90 5D |  if_ne	jmp	#LR__1846
16890     00 12 06 F6 | 	mov	arg01, #0
16894     24 24 B1 FD | 	call	#__system___getiolock_0558
16898     FD 12 02 F6 | 	mov	arg01, result1
1689c     F4 C6 B0 FD | 	call	#__system___lockmem
168a0     00 12 06 F6 | 	mov	arg01, #0
168a4     13 15 02 F6 | 	mov	arg02, local01
168a8     00 16 06 F6 | 	mov	arg03, #0
168ac     23 18 06 F6 | 	mov	arg04, #35
168b0     70 FB B0 FD | 	call	#__system___basic_print_float
168b4     00 12 06 F6 | 	mov	arg01, #0
168b8     0A 14 06 F6 | 	mov	arg02, #10
168bc     00 16 06 F6 | 	mov	arg03, #0
168c0     6C D3 B0 FD | 	call	#__system___basic_print_char
168c4     00 12 06 F6 | 	mov	arg01, #0
168c8     F0 23 B1 FD | 	call	#__system___getiolock_0558
168cc     FD 00 68 FC | 	wrlong	#0, result1
168d0                 | LR__1846
168d0                 | '   if t1.result_type=result_string then print t1.result.sresult
168d0     1F 2A 0E F2 | 	cmp	local03, #31 wz
168d4     3C 00 90 5D |  if_ne	jmp	#LR__1847
168d8     00 12 06 F6 | 	mov	arg01, #0
168dc     DC 23 B1 FD | 	call	#__system___getiolock_0558
168e0     FD 12 02 F6 | 	mov	arg01, result1
168e4     AC C6 B0 FD | 	call	#__system___lockmem
168e8     00 12 06 F6 | 	mov	arg01, #0
168ec     13 15 02 F6 | 	mov	arg02, local01
168f0     00 16 06 F6 | 	mov	arg03, #0
168f4     90 D3 B0 FD | 	call	#__system___basic_print_string
168f8     00 12 06 F6 | 	mov	arg01, #0
168fc     0A 14 06 F6 | 	mov	arg02, #10
16900     00 16 06 F6 | 	mov	arg03, #0
16904     28 D3 B0 FD | 	call	#__system___basic_print_char
16908     00 12 06 F6 | 	mov	arg01, #0
1690c     AC 23 B1 FD | 	call	#__system___getiolock_0558
16910     FD 00 68 FC | 	wrlong	#0, result1
16914                 | LR__1847
16914                 | LR__1848
16914                 | ' if r=print_mod_empty then print
16914     20 2C 0E F2 | 	cmp	local04, #32 wz
16918     2C 00 90 5D |  if_ne	jmp	#LR__1849
1691c     00 12 06 F6 | 	mov	arg01, #0
16920     98 23 B1 FD | 	call	#__system___getiolock_0558
16924     FD 12 02 F6 | 	mov	arg01, result1
16928     68 C6 B0 FD | 	call	#__system___lockmem
1692c     00 12 06 F6 | 	mov	arg01, #0
16930     0A 14 06 F6 | 	mov	arg02, #10
16934     00 16 06 F6 | 	mov	arg03, #0
16938     F4 D2 B0 FD | 	call	#__system___basic_print_char
1693c     00 12 06 F6 | 	mov	arg01, #0
16940     78 23 B1 FD | 	call	#__system___getiolock_0558
16944     FD 00 68 FC | 	wrlong	#0, result1
16948                 | LR__1849
16948                 | LR__1850
16948     A7 F0 03 F6 | 	mov	ptra, fp
1694c     B2 00 A0 FD | 	call	#popregs_
16950                 | _do_print_ret
16950     2D 00 64 FD | 	ret
16954                 | 
16954                 | ' 
16954                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
16954                 | ' 
16954                 | ' sub do_push
16954                 | _do_push
16954                 | ' if stackpointer<maxstack then 
16954     43 00 00 FF 
16958     58 E4 05 F1 | 	add	objptr, ##34392
1695c     F2 00 02 FB | 	rdlong	_var01, objptr
16960     43 00 00 FF 
16964     58 E4 85 F1 | 	sub	objptr, ##34392
16968     01 00 00 FF 
1696c     00 00 56 F2 | 	cmps	_var01, ##512 wc
16970     F8 00 90 3D |  if_ae	jmp	#LR__1860
16974     4A 00 00 FF 
16978     80 E4 05 F1 | 	add	objptr, ##38016
1697c     F2 02 02 FB | 	rdlong	_var02, objptr
16980     01 05 02 F6 | 	mov	_var03, _var02
16984     01 04 66 F0 | 	shl	_var03, #1
16988     01 05 02 F1 | 	add	_var03, _var02
1698c     02 04 66 F0 | 	shl	_var03, #2
16990     03 00 00 FF 
16994     04 E4 85 F1 | 	sub	objptr, ##1540
16998     F2 04 02 F1 | 	add	_var03, objptr
1699c     02 01 02 FB | 	rdlong	_var01, _var03
169a0     04 04 06 F1 | 	add	_var03, #4
169a4     02 07 02 FB | 	rdlong	_var04, _var03
169a8     01 05 02 F6 | 	mov	_var03, _var02
169ac     01 04 66 F0 | 	shl	_var03, #1
169b0     01 05 02 F1 | 	add	_var03, _var02
169b4     02 04 66 F0 | 	shl	_var03, #2
169b8     F2 04 02 F1 | 	add	_var03, objptr
169bc     08 04 06 F1 | 	add	_var03, #8
169c0     02 03 02 FB | 	rdlong	_var02, _var03
169c4     04 00 00 FF 
169c8     24 E4 85 F1 | 	sub	objptr, ##2084
169cc     F2 04 02 FB | 	rdlong	_var03, objptr
169d0     02 09 02 F6 | 	mov	_var05, _var03
169d4     01 08 66 F0 | 	shl	_var05, #1
169d8     02 09 02 F1 | 	add	_var05, _var03
169dc     02 08 66 F0 | 	shl	_var05, #2
169e0     0C 00 00 FF 
169e4     0C E4 85 F1 | 	sub	objptr, ##6156
169e8     F2 08 02 F1 | 	add	_var05, objptr
169ec     04 01 62 FC | 	wrlong	_var01, _var05
169f0     0C 00 00 FF 
169f4     0C E4 05 F1 | 	add	objptr, ##6156
169f8     F2 08 02 FB | 	rdlong	_var05, objptr
169fc     04 05 02 F6 | 	mov	_var03, _var05
16a00     01 04 66 F0 | 	shl	_var03, #1
16a04     04 05 02 F1 | 	add	_var03, _var05
16a08     02 04 66 F0 | 	shl	_var03, #2
16a0c     0C 00 00 FF 
16a10     0C E4 85 F1 | 	sub	objptr, ##6156
16a14     F2 04 02 F1 | 	add	_var03, objptr
16a18     04 04 06 F1 | 	add	_var03, #4
16a1c     02 07 62 FC | 	wrlong	_var04, _var03
16a20     0C 00 00 FF 
16a24     0C E4 05 F1 | 	add	objptr, ##6156
16a28     F2 08 02 FB | 	rdlong	_var05, objptr
16a2c     04 07 02 F6 | 	mov	_var04, _var05
16a30     01 06 66 F0 | 	shl	_var04, #1
16a34     04 07 02 F1 | 	add	_var04, _var05
16a38     02 06 66 F0 | 	shl	_var04, #2
16a3c     0C 00 00 FF 
16a40     0C E4 85 F1 | 	sub	objptr, ##6156
16a44     F2 06 02 F1 | 	add	_var04, objptr
16a48     08 06 06 F1 | 	add	_var04, #8
16a4c     03 03 62 FC | 	wrlong	_var02, _var04
16a50     0C 00 00 FF 
16a54     0C E4 05 F1 | 	add	objptr, ##6156
16a58     F2 00 02 FB | 	rdlong	_var01, objptr
16a5c     01 00 06 F1 | 	add	_var01, #1
16a60     F2 00 62 FC | 	wrlong	_var01, objptr
16a64     43 00 00 FF 
16a68     58 E4 85 F1 | 	sub	objptr, ##34392
16a6c                 | LR__1860
16a6c                 | _do_push_ret
16a6c     2D 00 64 FD | 	ret
16a70                 | 
16a70                 | ' 
16a70                 | ' '-------------------- put
16a70                 | ' 
16a70                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
16a70                 | _do_put
16a70     03 4A 05 F6 | 	mov	COUNT_, #3
16a74     A8 00 A0 FD | 	call	#pushregs_
16a78     28 F0 07 F1 | 	add	ptra, #40
16a7c     4A 00 00 FF 
16a80     80 E4 05 F1 | 	add	objptr, ##38016
16a84     F2 1A 02 FB | 	rdlong	arg05, objptr
16a88     0D 19 02 F6 | 	mov	arg04, arg05
16a8c     01 18 66 F0 | 	shl	arg04, #1
16a90     0D 19 02 F1 | 	add	arg04, arg05
16a94     02 18 66 F0 | 	shl	arg04, #2
16a98     03 00 00 FF 
16a9c     04 E4 85 F1 | 	sub	objptr, ##1540
16aa0     F2 18 02 F1 | 	add	arg04, objptr
16aa4     0C 1B 02 FB | 	rdlong	arg05, arg04
16aa8     A7 1A 62 FC | 	wrlong	arg05, fp
16aac                 | ' 
16aac                 | ' numpar=compiledline(lineptr_e).result.uresult
16aac                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
16aac     04 1A 0E F2 | 	cmp	arg05, #4 wz
16ab0     47 00 00 FF 
16ab4     7C E4 85 F1 | 	sub	objptr, ##36476
16ab8     48 00 90 5D |  if_ne	jmp	#LR__1870
16abc     20 5E BF FD | 	call	#_pop
16ac0     FF 1A 02 F6 | 	mov	arg05, result3
16ac4     1C 4E 05 F1 | 	add	fp, #28
16ac8     A7 FA 61 FC | 	wrlong	result1, fp
16acc     04 4E 05 F1 | 	add	fp, #4
16ad0     A7 FC 61 FC | 	wrlong	result2, fp
16ad4     04 4E 05 F1 | 	add	fp, #4
16ad8     A7 1A 62 FC | 	wrlong	arg05, fp
16adc     08 4E 85 F1 | 	sub	fp, #8
16ae0     A7 12 02 F6 | 	mov	arg01, fp
16ae4     1C 4E 85 F1 | 	sub	fp, #28
16ae8     D8 5F BF FD | 	call	#_converttoint
16aec     52 00 00 FF 
16af0     1C E4 05 F1 | 	add	objptr, ##42012
16af4     F2 FA 61 FC | 	wrlong	result1, objptr
16af8     52 00 00 FF 
16afc     1C E4 85 F1 | 	sub	objptr, ##42012
16b00     18 00 90 FD | 	jmp	#LR__1871
16b04                 | LR__1870
16b04     52 00 00 FF 
16b08     1C E4 05 F1 | 	add	objptr, ##42012
16b0c     FF FF FF FF 
16b10     F2 FE 6B FC | 	wrlong	##-1, objptr
16b14     52 00 00 FF 
16b18     1C E4 85 F1 | 	sub	objptr, ##42012
16b1c                 | LR__1871
16b1c                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
16b1c     A7 1A 02 FB | 	rdlong	arg05, fp
16b20     03 1A 56 F2 | 	cmps	arg05, #3 wc
16b24     40 00 90 CD |  if_b	jmp	#LR__1872
16b28     B4 5D BF FD | 	call	#_pop
16b2c     FF 1A 02 F6 | 	mov	arg05, result3
16b30     1C 4E 05 F1 | 	add	fp, #28
16b34     A7 FA 61 FC | 	wrlong	result1, fp
16b38     04 4E 05 F1 | 	add	fp, #4
16b3c     A7 FC 61 FC | 	wrlong	result2, fp
16b40     04 4E 05 F1 | 	add	fp, #4
16b44     A7 1A 62 FC | 	wrlong	arg05, fp
16b48     08 4E 85 F1 | 	sub	fp, #8
16b4c     A7 12 02 F6 | 	mov	arg01, fp
16b50     1C 4E 85 F1 | 	sub	fp, #28
16b54     6C 5F BF FD | 	call	#_converttoint
16b58     08 4E 05 F1 | 	add	fp, #8
16b5c     A7 FA 61 FC | 	wrlong	result1, fp
16b60     08 4E 85 F1 | 	sub	fp, #8
16b64     0C 00 90 FD | 	jmp	#LR__1873
16b68                 | LR__1872
16b68     08 4E 05 F1 | 	add	fp, #8
16b6c     A7 02 68 FC | 	wrlong	#1, fp
16b70     08 4E 85 F1 | 	sub	fp, #8
16b74                 | LR__1873
16b74                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
16b74     A7 18 02 FB | 	rdlong	arg04, fp
16b78     02 18 56 F2 | 	cmps	arg04, #2 wc
16b7c     3C 00 90 CD |  if_b	jmp	#LR__1874
16b80     5C 5D BF FD | 	call	#_pop
16b84     FF 18 02 F6 | 	mov	arg04, result3
16b88     1C 4E 05 F1 | 	add	fp, #28
16b8c     A7 FA 61 FC | 	wrlong	result1, fp
16b90     04 4E 05 F1 | 	add	fp, #4
16b94     A7 FC 61 FC | 	wrlong	result2, fp
16b98     04 4E 05 F1 | 	add	fp, #4
16b9c     A7 18 62 FC | 	wrlong	arg04, fp
16ba0     08 4E 85 F1 | 	sub	fp, #8
16ba4     A7 12 02 F6 | 	mov	arg01, fp
16ba8     1C 4E 85 F1 | 	sub	fp, #28
16bac     14 5F BF FD | 	call	#_converttoint
16bb0     0C 4E 05 F1 | 	add	fp, #12
16bb4     A7 FA 61 FC | 	wrlong	result1, fp
16bb8     0C 4E 85 F1 | 	sub	fp, #12
16bbc                 | LR__1874
16bbc     20 5D BF FD | 	call	#_pop
16bc0     FF 18 02 F6 | 	mov	arg04, result3
16bc4     1C 4E 05 F1 | 	add	fp, #28
16bc8     A7 FA 61 FC | 	wrlong	result1, fp
16bcc     04 4E 05 F1 | 	add	fp, #4
16bd0     A7 FC 61 FC | 	wrlong	result2, fp
16bd4     04 4E 05 F1 | 	add	fp, #4
16bd8     A7 18 62 FC | 	wrlong	arg04, fp
16bdc     08 4E 85 F1 | 	sub	fp, #8
16be0     A7 12 02 F6 | 	mov	arg01, fp
16be4     1C 4E 85 F1 | 	sub	fp, #28
16be8     D8 5E BF FD | 	call	#_converttoint
16bec     04 4E 05 F1 | 	add	fp, #4
16bf0     A7 FA 61 FC | 	wrlong	result1, fp
16bf4     10 4E 05 F1 | 	add	fp, #16
16bf8     A7 26 02 FB | 	rdlong	local01, fp
16bfc     14 4E 85 F1 | 	sub	fp, #20
16c00     02 26 66 F0 | 	shl	local01, #2
16c04     50 00 00 FF 
16c08     C4 E4 05 F1 | 	add	objptr, ##41156
16c0c     F2 26 02 F1 | 	add	local01, objptr
16c10     13 01 68 FC | 	wrlong	#0, local01
16c14                 | ' t1=pop() : channel=converttoint(t1)
16c14                 | ' getres(j)=0
16c14                 | ' if pos>=0 then
16c14     01 00 00 FF 
16c18     58 E5 05 F1 | 	add	objptr, ##856
16c1c     F2 28 02 FB | 	rdlong	local02, objptr
16c20     52 00 00 FF 
16c24     1C E4 85 F1 | 	sub	objptr, ##42012
16c28     00 28 56 F2 | 	cmps	local02, #0 wc
16c2c     C0 01 90 CD |  if_b	jmp	#LR__1880
16c30     10 4E 05 F1 | 	add	fp, #16
16c34     A7 00 68 FC | 	wrlong	#0, fp
16c38     10 4E 85 F1 | 	sub	fp, #16
16c3c                 | '    i=0: do
16c3c                 | LR__1875
16c3c     14 4E 05 F1 | 	add	fp, #20
16c40     A7 00 68 FC | 	wrlong	#0, fp
16c44     14 4E 85 F1 | 	sub	fp, #20
16c48                 | '    j=0: do    
16c48                 | LR__1876
16c48                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
16c48     0C 4E 05 F1 | 	add	fp, #12
16c4c     A7 28 02 FB | 	rdlong	local02, fp
16c50     0C 4E 85 F1 | 	sub	fp, #12
16c54     00 04 00 FF 
16c58     00 28 56 F2 | 	cmps	local02, ##524288 wc
16c5c     4C 00 90 3D |  if_ae	jmp	#LR__1877
16c60     14 4E 05 F1 | 	add	fp, #20
16c64     A7 28 02 FB | 	rdlong	local02, fp
16c68     14 27 02 F6 | 	mov	local01, local02
16c6c     4E 00 00 FF 
16c70     B4 E4 05 F1 | 	add	objptr, ##40116
16c74     F2 26 02 F1 | 	add	local01, objptr
16c78     08 4E 85 F1 | 	sub	fp, #8
16c7c     A7 12 02 FB | 	rdlong	arg01, fp
16c80     04 4E 05 F1 | 	add	fp, #4
16c84     A7 18 02 FB | 	rdlong	arg04, fp
16c88     0A 18 66 F0 | 	shl	arg04, #10
16c8c     0C 13 02 F1 | 	add	arg01, arg04
16c90     10 4E 85 F1 | 	sub	fp, #16
16c94     14 13 02 F1 | 	add	arg01, local02
16c98     09 FB C1 FA | 	rdbyte	result1, arg01
16c9c     4E 00 00 FF 
16ca0     B4 E4 85 F1 | 	sub	objptr, ##40116
16ca4     13 FB 41 FC | 	wrbyte	result1, local01
16ca8     48 00 90 FD | 	jmp	#LR__1878
16cac                 | LR__1877
16cac     14 4E 05 F1 | 	add	fp, #20
16cb0     A7 28 02 FB | 	rdlong	local02, fp
16cb4     14 27 02 F6 | 	mov	local01, local02
16cb8     4E 00 00 FF 
16cbc     B4 E4 05 F1 | 	add	objptr, ##40116
16cc0     F2 26 02 F1 | 	add	local01, objptr
16cc4     08 4E 85 F1 | 	sub	fp, #8
16cc8     A7 12 02 FB | 	rdlong	arg01, fp
16ccc     04 4E 05 F1 | 	add	fp, #4
16cd0     A7 18 02 FB | 	rdlong	arg04, fp
16cd4     0A 18 66 F0 | 	shl	arg04, #10
16cd8     0C 13 02 F1 | 	add	arg01, arg04
16cdc     10 4E 85 F1 | 	sub	fp, #16
16ce0     14 13 02 F1 | 	add	arg01, local02
16ce4     4E 00 00 FF 
16ce8     B4 E4 85 F1 | 	sub	objptr, ##40116
16cec     78 8B B0 FD | 	call	#_pspeek
16cf0     13 FB 41 FC | 	wrbyte	result1, local01
16cf4                 | LR__1878
16cf4     14 4E 05 F1 | 	add	fp, #20
16cf8     A7 28 02 FB | 	rdlong	local02, fp
16cfc     01 28 06 F1 | 	add	local02, #1
16d00     A7 28 62 FC | 	wrlong	local02, fp
16d04     14 4E 85 F1 | 	sub	fp, #20
16d08     02 00 00 FF 
16d0c     00 28 56 F2 | 	cmps	local02, ##1024 wc
16d10     2C 00 90 3D |  if_ae	jmp	#LR__1879
16d14     10 4E 05 F1 | 	add	fp, #16
16d18     A7 26 02 FB | 	rdlong	local01, fp
16d1c     0A 26 66 F0 | 	shl	local01, #10
16d20     04 4E 05 F1 | 	add	fp, #4
16d24     A7 28 02 FB | 	rdlong	local02, fp
16d28     14 27 02 F1 | 	add	local01, local02
16d2c     0C 4E 85 F1 | 	sub	fp, #12
16d30     A7 28 02 FB | 	rdlong	local02, fp
16d34     08 4E 85 F1 | 	sub	fp, #8
16d38     14 27 5A F2 | 	cmps	local01, local02 wcz
16d3c     08 FF 9F ED |  if_be	jmp	#LR__1876
16d40                 | LR__1879
16d40                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
16d40     04 4E 05 F1 | 	add	fp, #4
16d44     A7 12 02 FB | 	rdlong	arg01, fp
16d48     52 00 00 FF 
16d4c     1C E4 05 F1 | 	add	objptr, ##42012
16d50     F2 14 02 FB | 	rdlong	arg02, objptr
16d54     01 14 06 F1 | 	add	arg02, #1
16d58     03 00 00 FF 
16d5c     68 E5 85 F1 | 	sub	objptr, ##1896
16d60     F2 16 02 F6 | 	mov	arg03, objptr
16d64     4E 00 00 FF 
16d68     B4 E4 85 F1 | 	sub	objptr, ##40116
16d6c     04 4E 05 F1 | 	add	fp, #4
16d70     A7 18 02 FB | 	rdlong	arg04, fp
16d74     08 4E 85 F1 | 	sub	fp, #8
16d78     01 1A 06 F6 | 	mov	arg05, #1
16d7c     18 D0 B0 FD | 	call	#__system___basic_put
16d80     18 4E 05 F1 | 	add	fp, #24
16d84     A7 FA 61 FC | 	wrlong	result1, fp
16d88     14 4E 85 F1 | 	sub	fp, #20
16d8c     A7 26 02 FB | 	rdlong	local01, fp
16d90     02 26 66 F0 | 	shl	local01, #2
16d94     50 00 00 FF 
16d98     C4 E4 05 F1 | 	add	objptr, ##41156
16d9c     F2 26 02 F1 | 	add	local01, objptr
16da0     13 FB 61 FC | 	wrlong	result1, local01
16da4                 | '    if 1024*i+j>amount then exit loop
16da4     0C 4E 05 F1 | 	add	fp, #12
16da8     A7 28 02 FB | 	rdlong	local02, fp
16dac     0A 28 66 F0 | 	shl	local02, #10
16db0     04 4E 05 F1 | 	add	fp, #4
16db4     A7 26 02 FB | 	rdlong	local01, fp
16db8     13 29 02 F1 | 	add	local02, local01
16dbc     0C 4E 85 F1 | 	sub	fp, #12
16dc0     A7 26 02 FB | 	rdlong	local01, fp
16dc4     08 4E 85 F1 | 	sub	fp, #8
16dc8     13 29 5A F2 | 	cmps	local02, local01 wcz
16dcc     50 00 00 FF 
16dd0     C4 E4 85 F1 | 	sub	objptr, ##41156
16dd4     CC 01 90 1D |  if_a	jmp	#LR__1887
16dd8     10 4E 05 F1 | 	add	fp, #16
16ddc     A7 28 02 FB | 	rdlong	local02, fp
16de0     01 28 06 F1 | 	add	local02, #1
16de4     A7 28 62 FC | 	wrlong	local02, fp
16de8     10 4E 85 F1 | 	sub	fp, #16
16dec     4C FE 9F FD | 	jmp	#LR__1875
16df0                 | LR__1880
16df0     10 4E 05 F1 | 	add	fp, #16
16df4     A7 00 68 FC | 	wrlong	#0, fp
16df8     10 4E 85 F1 | 	sub	fp, #16
16dfc                 | '    i=0: do
16dfc                 | LR__1881
16dfc     14 4E 05 F1 | 	add	fp, #20
16e00     A7 00 68 FC | 	wrlong	#0, fp
16e04     14 4E 85 F1 | 	sub	fp, #20
16e08                 | '    j=0: do  
16e08                 | LR__1882
16e08                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
16e08     0C 4E 05 F1 | 	add	fp, #12
16e0c     A7 28 02 FB | 	rdlong	local02, fp
16e10     0C 4E 85 F1 | 	sub	fp, #12
16e14     00 04 00 FF 
16e18     00 28 56 F2 | 	cmps	local02, ##524288 wc
16e1c     4C 00 90 3D |  if_ae	jmp	#LR__1883
16e20     14 4E 05 F1 | 	add	fp, #20
16e24     A7 28 02 FB | 	rdlong	local02, fp
16e28     14 27 02 F6 | 	mov	local01, local02
16e2c     4E 00 00 FF 
16e30     B4 E4 05 F1 | 	add	objptr, ##40116
16e34     F2 26 02 F1 | 	add	local01, objptr
16e38     08 4E 85 F1 | 	sub	fp, #8
16e3c     A7 12 02 FB | 	rdlong	arg01, fp
16e40     04 4E 05 F1 | 	add	fp, #4
16e44     A7 18 02 FB | 	rdlong	arg04, fp
16e48     0A 18 66 F0 | 	shl	arg04, #10
16e4c     0C 13 02 F1 | 	add	arg01, arg04
16e50     10 4E 85 F1 | 	sub	fp, #16
16e54     14 13 02 F1 | 	add	arg01, local02
16e58     09 FB C1 FA | 	rdbyte	result1, arg01
16e5c     4E 00 00 FF 
16e60     B4 E4 85 F1 | 	sub	objptr, ##40116
16e64     13 FB 41 FC | 	wrbyte	result1, local01
16e68     48 00 90 FD | 	jmp	#LR__1884
16e6c                 | LR__1883
16e6c     14 4E 05 F1 | 	add	fp, #20
16e70     A7 28 02 FB | 	rdlong	local02, fp
16e74     14 27 02 F6 | 	mov	local01, local02
16e78     4E 00 00 FF 
16e7c     B4 E4 05 F1 | 	add	objptr, ##40116
16e80     F2 26 02 F1 | 	add	local01, objptr
16e84     08 4E 85 F1 | 	sub	fp, #8
16e88     A7 12 02 FB | 	rdlong	arg01, fp
16e8c     04 4E 05 F1 | 	add	fp, #4
16e90     A7 18 02 FB | 	rdlong	arg04, fp
16e94     0A 18 66 F0 | 	shl	arg04, #10
16e98     0C 13 02 F1 | 	add	arg01, arg04
16e9c     10 4E 85 F1 | 	sub	fp, #16
16ea0     14 13 02 F1 | 	add	arg01, local02
16ea4     4E 00 00 FF 
16ea8     B4 E4 85 F1 | 	sub	objptr, ##40116
16eac     B8 89 B0 FD | 	call	#_pspeek
16eb0     13 FB 41 FC | 	wrbyte	result1, local01
16eb4                 | LR__1884
16eb4     14 4E 05 F1 | 	add	fp, #20
16eb8     A7 28 02 FB | 	rdlong	local02, fp
16ebc     01 28 06 F1 | 	add	local02, #1
16ec0     A7 28 62 FC | 	wrlong	local02, fp
16ec4     14 4E 85 F1 | 	sub	fp, #20
16ec8     02 00 00 FF 
16ecc     00 28 56 F2 | 	cmps	local02, ##1024 wc
16ed0     2C 00 90 3D |  if_ae	jmp	#LR__1885
16ed4     10 4E 05 F1 | 	add	fp, #16
16ed8     A7 26 02 FB | 	rdlong	local01, fp
16edc     0A 26 66 F0 | 	shl	local01, #10
16ee0     04 4E 05 F1 | 	add	fp, #4
16ee4     A7 28 02 FB | 	rdlong	local02, fp
16ee8     14 27 02 F1 | 	add	local01, local02
16eec     0C 4E 85 F1 | 	sub	fp, #12
16ef0     A7 28 02 FB | 	rdlong	local02, fp
16ef4     08 4E 85 F1 | 	sub	fp, #8
16ef8     14 27 5A F2 | 	cmps	local01, local02 wcz
16efc     08 FF 9F ED |  if_be	jmp	#LR__1882
16f00                 | LR__1885
16f00                 | '    put #channel,,block(0),amount, r : getres(channel)=r
16f00     04 4E 05 F1 | 	add	fp, #4
16f04     A7 12 02 FB | 	rdlong	arg01, fp
16f08     4E 00 00 FF 
16f0c     B4 E4 05 F1 | 	add	objptr, ##40116
16f10     F2 16 02 F6 | 	mov	arg03, objptr
16f14     4E 00 00 FF 
16f18     B4 E4 85 F1 | 	sub	objptr, ##40116
16f1c     04 4E 05 F1 | 	add	fp, #4
16f20     A7 18 02 FB | 	rdlong	arg04, fp
16f24     08 4E 85 F1 | 	sub	fp, #8
16f28     00 14 06 F6 | 	mov	arg02, #0
16f2c     01 1A 06 F6 | 	mov	arg05, #1
16f30     64 CE B0 FD | 	call	#__system___basic_put
16f34     18 4E 05 F1 | 	add	fp, #24
16f38     A7 FA 61 FC | 	wrlong	result1, fp
16f3c     14 4E 85 F1 | 	sub	fp, #20
16f40     A7 26 02 FB | 	rdlong	local01, fp
16f44     02 26 66 F0 | 	shl	local01, #2
16f48     50 00 00 FF 
16f4c     C4 E4 05 F1 | 	add	objptr, ##41156
16f50     F2 26 02 F1 | 	add	local01, objptr
16f54     13 FB 61 FC | 	wrlong	result1, local01
16f58                 | '    if 1024*i+j>amount then exit loop
16f58     0C 4E 05 F1 | 	add	fp, #12
16f5c     A7 28 02 FB | 	rdlong	local02, fp
16f60     0A 28 66 F0 | 	shl	local02, #10
16f64     04 4E 05 F1 | 	add	fp, #4
16f68     A7 26 02 FB | 	rdlong	local01, fp
16f6c     13 29 02 F1 | 	add	local02, local01
16f70     0C 4E 85 F1 | 	sub	fp, #12
16f74     A7 2A 02 FB | 	rdlong	local03, fp
16f78     08 4E 85 F1 | 	sub	fp, #8
16f7c     15 29 5A F2 | 	cmps	local02, local03 wcz
16f80     50 00 00 FF 
16f84     C4 E4 85 F1 | 	sub	objptr, ##41156
16f88     18 00 90 1D |  if_a	jmp	#LR__1886
16f8c     10 4E 05 F1 | 	add	fp, #16
16f90     A7 28 02 FB | 	rdlong	local02, fp
16f94     01 28 06 F1 | 	add	local02, #1
16f98     A7 28 62 FC | 	wrlong	local02, fp
16f9c     10 4E 85 F1 | 	sub	fp, #16
16fa0     58 FE 9F FD | 	jmp	#LR__1881
16fa4                 | LR__1886
16fa4                 | LR__1887
16fa4     A7 F0 03 F6 | 	mov	ptra, fp
16fa8     B2 00 A0 FD | 	call	#popregs_
16fac                 | _do_put_ret
16fac     2D 00 64 FD | 	ret
16fb0                 | 
16fb0                 | ' 
16fb0                 | ' '-------------------- rad
16fb0                 | ' 
16fb0                 | ' sub do_rad
16fb0                 | _do_rad
16fb0     51 00 00 FF 
16fb4     BC E5 05 F1 | 	add	objptr, ##41916
16fb8     00 C0 9F FF 
16fbc     F2 00 68 FC | 	wrlong	##1065353216, objptr
16fc0     04 E4 05 F1 | 	add	objptr, #4
16fc4     00 C0 9F FF 
16fc8     F2 00 68 FC | 	wrlong	##1065353216, objptr
16fcc     51 00 00 FF 
16fd0     C0 E5 85 F1 | 	sub	objptr, ##41920
16fd4                 | _do_rad_ret
16fd4     2D 00 64 FD | 	ret
16fd8                 | 
16fd8                 | ' 
16fd8                 | ' '-------------------- rdpin
16fd8                 | ' 
16fd8                 | ' sub do_rdpin
16fd8                 | _do_rdpin
16fd8     00 4A 05 F6 | 	mov	COUNT_, #0
16fdc     A8 00 A0 FD | 	call	#pushregs_
16fe0     0C F0 07 F1 | 	add	ptra, #12
16fe4     F8 58 BF FD | 	call	#_pop
16fe8     A7 FA 61 FC | 	wrlong	result1, fp
16fec     04 4E 05 F1 | 	add	fp, #4
16ff0     A7 FC 61 FC | 	wrlong	result2, fp
16ff4     04 4E 05 F1 | 	add	fp, #4
16ff8     A7 FE 61 FC | 	wrlong	result3, fp
16ffc     08 4E 85 F1 | 	sub	fp, #8
17000     A7 12 02 F6 | 	mov	arg01, fp
17004     BC 5A BF FD | 	call	#_converttoint
17008     FD FA 89 FA | 	rdpin	result1, result1
1700c     52 00 00 FF 
17010     20 E4 05 F1 | 	add	objptr, ##42016
17014     F2 FA 61 FC | 	wrlong	result1, objptr
17018     52 00 00 FF 
1701c     20 E4 85 F1 | 	sub	objptr, ##42016
17020     08 4E 05 F1 | 	add	fp, #8
17024     A7 3A 68 FC | 	wrlong	#29, fp
17028     08 4E 85 F1 | 	sub	fp, #8
1702c     A7 08 68 FC | 	wrlong	#4, fp
17030     A7 12 02 F6 | 	mov	arg01, fp
17034     40 59 BF FD | 	call	#_push
17038     A7 F0 03 F6 | 	mov	ptra, fp
1703c     B2 00 A0 FD | 	call	#popregs_
17040                 | _do_rdpin_ret
17040     2D 00 64 FD | 	ret
17044                 | 
17044                 | ' 
17044                 | ' '------------------- release
17044                 | ' 
17044                 | ' sub do_release
17044                 | _do_release
17044     00 4A 05 F6 | 	mov	COUNT_, #0
17048     A8 00 A0 FD | 	call	#pushregs_
1704c     10 F0 07 F1 | 	add	ptra, #16
17050     8C 58 BF FD | 	call	#_pop
17054     FF 14 02 F6 | 	mov	arg02, result3
17058     A7 FA 61 FC | 	wrlong	result1, fp
1705c     04 4E 05 F1 | 	add	fp, #4
17060     A7 FC 61 FC | 	wrlong	result2, fp
17064     04 4E 05 F1 | 	add	fp, #4
17068     A7 14 62 FC | 	wrlong	arg02, fp
1706c     08 4E 85 F1 | 	sub	fp, #8
17070     A7 12 02 F6 | 	mov	arg01, fp
17074     4C 5A BF FD | 	call	#_converttoint
17078     0C 4E 05 F1 | 	add	fp, #12
1707c     A7 FA 61 FC | 	wrlong	result1, fp
17080                 | ' 
17080                 | ' t1=pop()
17080                 | ' channel=converttoint(t1)
17080                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
17080     0C 4E 85 F1 | 	sub	fp, #12
17084     00 FA 55 F2 | 	cmps	result1, #0 wc
17088     44 00 90 CD |  if_b	jmp	#LR__1890
1708c     0C 4E 05 F1 | 	add	fp, #12
17090     A7 14 02 FB | 	rdlong	arg02, fp
17094     0C 4E 85 F1 | 	sub	fp, #12
17098     08 14 56 F2 | 	cmps	arg02, #8 wc
1709c     30 00 90 3D |  if_ae	jmp	#LR__1890
170a0     37 00 00 FF 
170a4     10 E4 05 F1 | 	add	objptr, ##28176
170a8     F2 12 02 FB | 	rdlong	arg01, objptr
170ac     37 00 00 FF 
170b0     10 E4 85 F1 | 	sub	objptr, ##28176
170b4     0C 4E 05 F1 | 	add	fp, #12
170b8     A7 14 02 FB | 	rdlong	arg02, fp
170bc     0C 4E 85 F1 | 	sub	fp, #12
170c0     06 14 66 F0 | 	shl	arg02, #6
170c4     0A 13 02 F1 | 	add	arg01, arg02
170c8     2C 12 06 F1 | 	add	arg01, #44
170cc     09 FF 69 FC | 	wrlong	#255, arg01
170d0                 | LR__1890
170d0     A7 F0 03 F6 | 	mov	ptra, fp
170d4     B2 00 A0 FD | 	call	#popregs_
170d8                 | _do_release_ret
170d8     2D 00 64 FD | 	ret
170dc                 | 
170dc                 | ' 
170dc                 | ' '------------------- return
170dc                 | ' 
170dc                 | ' sub do_return()
170dc                 | _do_return
170dc                 | ' if gosubtop>0 then
170dc     50 00 00 FF 
170e0     0C E5 05 F1 | 	add	objptr, ##41228
170e4     F2 00 02 FB | 	rdlong	_var01, objptr
170e8     50 00 00 FF 
170ec     0C E5 85 F1 | 	sub	objptr, ##41228
170f0     01 00 56 F2 | 	cmps	_var01, #1 wc
170f4     8C 00 90 CD |  if_b	jmp	#LR__1900
170f8     50 00 00 FF 
170fc     0C E5 05 F1 | 	add	objptr, ##41228
17100     F2 00 02 FB | 	rdlong	_var01, objptr
17104     03 00 66 F0 | 	shl	_var01, #3
17108     03 00 00 FF 
1710c     60 E5 85 F1 | 	sub	objptr, ##1888
17110     F2 00 02 F1 | 	add	_var01, objptr
17114     00 01 02 FB | 	rdlong	_var01, _var01
17118     03 00 00 FF 
1711c     0C E5 05 F1 | 	add	objptr, ##1804
17120     F2 00 62 FC | 	wrlong	_var01, objptr
17124     54 E4 05 F1 | 	add	objptr, #84
17128     F2 00 02 FB | 	rdlong	_var01, objptr
1712c     03 00 66 F0 | 	shl	_var01, #3
17130     03 00 00 FF 
17134     60 E5 85 F1 | 	sub	objptr, ##1888
17138     F2 00 02 F1 | 	add	_var01, objptr
1713c     04 00 06 F1 | 	add	_var01, #4
17140     00 01 02 FB | 	rdlong	_var01, _var01
17144     03 00 00 FF 
17148     10 E5 05 F1 | 	add	objptr, ##1808
1714c     F2 00 62 FC | 	wrlong	_var01, objptr
17150     06 00 00 FF 
17154     40 E4 85 F1 | 	sub	objptr, ##3136
17158     F2 00 02 FB | 	rdlong	_var01, objptr
1715c     01 00 86 F1 | 	sub	_var01, #1
17160     04 E4 05 F1 | 	add	objptr, #4
17164     F2 00 62 FC | 	wrlong	_var01, objptr
17168     06 00 00 FF 
1716c     8C E4 05 F1 | 	add	objptr, ##3212
17170     F2 00 02 FB | 	rdlong	_var01, objptr
17174     01 00 86 F1 | 	sub	_var01, #1
17178     F2 00 62 FC | 	wrlong	_var01, objptr
1717c     50 00 00 FF 
17180     0C E5 85 F1 | 	sub	objptr, ##41228
17184                 | LR__1900
17184                 | _do_return_ret
17184     2D 00 64 FD | 	ret
17188                 | 
17188                 | ' 
17188                 | ' '------------------- right$
17188                 | ' 
17188                 | ' sub do_right
17188                 | _do_right
17188     00 4A 05 F6 | 	mov	COUNT_, #0
1718c     A8 00 A0 FD | 	call	#pushregs_
17190     14 F0 07 F1 | 	add	ptra, #20
17194     4A 00 00 FF 
17198     80 E4 05 F1 | 	add	objptr, ##38016
1719c     F2 16 02 FB | 	rdlong	arg03, objptr
171a0     0B 15 02 F6 | 	mov	arg02, arg03
171a4     01 14 66 F0 | 	shl	arg02, #1
171a8     0B 15 02 F1 | 	add	arg02, arg03
171ac     02 14 66 F0 | 	shl	arg02, #2
171b0     03 00 00 FF 
171b4     04 E4 85 F1 | 	sub	objptr, ##1540
171b8     F2 14 02 F1 | 	add	arg02, objptr
171bc     0A 17 02 FB | 	rdlong	arg03, arg02
171c0     0C 4E 05 F1 | 	add	fp, #12
171c4     A7 16 62 FC | 	wrlong	arg03, fp
171c8                 | ' 
171c8                 | ' numpar=compiledline(lineptr_e).result.uresult
171c8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
171c8     0C 4E 85 F1 | 	sub	fp, #12
171cc     02 16 0E F2 | 	cmp	arg03, #2 wz
171d0     47 00 00 FF 
171d4     7C E4 85 F1 | 	sub	objptr, ##36476
171d8     40 00 90 AD |  if_e	jmp	#LR__1910
171dc     00 12 06 F6 | 	mov	arg01, #0
171e0     D8 1A B1 FD | 	call	#__system___getiolock_0558
171e4     FD 12 02 F6 | 	mov	arg01, result1
171e8     A8 BD B0 FD | 	call	#__system___lockmem
171ec     9A 01 00 FF 
171f0     EC 14 06 F6 | 	mov	arg02, ##@LR__5695
171f4     00 12 06 F6 | 	mov	arg01, #0
171f8     00 16 06 F6 | 	mov	arg03, #0
171fc     88 CA B0 FD | 	call	#__system___basic_print_string
17200     00 12 06 F6 | 	mov	arg01, #0
17204     B4 1A B1 FD | 	call	#__system___getiolock_0558
17208     FD 00 68 FC | 	wrlong	#0, result1
1720c     27 12 06 F6 | 	mov	arg01, #39
17210     00 14 06 F6 | 	mov	arg02, #0
17214     EC 83 B0 FD | 	call	#_printerror
17218     EC 00 90 FD | 	jmp	#LR__1913
1721c                 | LR__1910
1721c     C0 56 BF FD | 	call	#_pop
17220     FF 16 02 F6 | 	mov	arg03, result3
17224     A7 FA 61 FC | 	wrlong	result1, fp
17228     04 4E 05 F1 | 	add	fp, #4
1722c     A7 FC 61 FC | 	wrlong	result2, fp
17230     04 4E 05 F1 | 	add	fp, #4
17234     A7 16 62 FC | 	wrlong	arg03, fp
17238     08 4E 85 F1 | 	sub	fp, #8
1723c     A7 12 02 F6 | 	mov	arg01, fp
17240     80 58 BF FD | 	call	#_converttoint
17244     FD 16 02 F6 | 	mov	arg03, result1
17248     10 4E 05 F1 | 	add	fp, #16
1724c     A7 16 62 FC | 	wrlong	arg03, fp
17250     10 4E 85 F1 | 	sub	fp, #16
17254     88 56 BF FD | 	call	#_pop
17258     FF 16 02 F6 | 	mov	arg03, result3
1725c     A7 FA 61 FC | 	wrlong	result1, fp
17260     04 4E 05 F1 | 	add	fp, #4
17264     A7 FC 61 FC | 	wrlong	result2, fp
17268     04 4E 05 F1 | 	add	fp, #4
1726c     A7 16 62 FC | 	wrlong	arg03, fp
17270                 | ' t1=pop() : arg=converttoint(t1)
17270                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
17270     08 4E 85 F1 | 	sub	fp, #8
17274     2B 16 0E F2 | 	cmp	arg03, #43 wz
17278     18 00 90 5D |  if_ne	jmp	#LR__1911
1727c     A7 12 02 FB | 	rdlong	arg01, fp
17280     D4 57 BF FD | 	call	#_convertstring
17284     A7 FA 61 FC | 	wrlong	result1, fp
17288     08 4E 05 F1 | 	add	fp, #8
1728c     A7 3E 68 FC | 	wrlong	#31, fp
17290     08 4E 85 F1 | 	sub	fp, #8
17294                 | LR__1911
17294                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
17294     08 4E 05 F1 | 	add	fp, #8
17298     A7 16 02 FB | 	rdlong	arg03, fp
1729c     08 4E 85 F1 | 	sub	fp, #8
172a0     1F 16 0E F2 | 	cmp	arg03, #31 wz
172a4     40 00 90 AD |  if_e	jmp	#LR__1912
172a8     00 12 06 F6 | 	mov	arg01, #0
172ac     0C 1A B1 FD | 	call	#__system___getiolock_0558
172b0     FD 12 02 F6 | 	mov	arg01, result1
172b4     DC BC B0 FD | 	call	#__system___lockmem
172b8     9A 01 00 FF 
172bc     F5 14 06 F6 | 	mov	arg02, ##@LR__5696
172c0     00 12 06 F6 | 	mov	arg01, #0
172c4     00 16 06 F6 | 	mov	arg03, #0
172c8     BC C9 B0 FD | 	call	#__system___basic_print_string
172cc     00 12 06 F6 | 	mov	arg01, #0
172d0     E8 19 B1 FD | 	call	#__system___getiolock_0558
172d4     FD 00 68 FC | 	wrlong	#0, result1
172d8     0F 12 06 F6 | 	mov	arg01, #15
172dc     00 14 06 F6 | 	mov	arg02, #0
172e0     20 83 B0 FD | 	call	#_printerror
172e4     20 00 90 FD | 	jmp	#LR__1913
172e8                 | LR__1912
172e8     A7 12 02 FB | 	rdlong	arg01, fp
172ec     10 4E 05 F1 | 	add	fp, #16
172f0     A7 14 02 FB | 	rdlong	arg02, fp
172f4     10 4E 85 F1 | 	sub	fp, #16
172f8     9C DD B0 FD | 	call	#__system__Right_S
172fc     A7 FA 61 FC | 	wrlong	result1, fp
17300     A7 12 02 F6 | 	mov	arg01, fp
17304     70 56 BF FD | 	call	#_push
17308                 | LR__1913
17308     A7 F0 03 F6 | 	mov	ptra, fp
1730c     B2 00 A0 FD | 	call	#popregs_
17310                 | _do_right_ret
17310     2D 00 64 FD | 	ret
17314                 | 
17314                 | ' 
17314                 | ' '------------------- rnd
17314                 | ' 
17314                 | ' sub do_rnd
17314                 | _do_rnd
17314     01 4A 05 F6 | 	mov	COUNT_, #1
17318     A8 00 A0 FD | 	call	#pushregs_
1731c     10 F0 07 F1 | 	add	ptra, #16
17320     4A 00 00 FF 
17324     80 E4 05 F1 | 	add	objptr, ##38016
17328     F2 26 02 FB | 	rdlong	local01, objptr
1732c     13 17 02 F6 | 	mov	arg03, local01
17330     01 16 66 F0 | 	shl	arg03, #1
17334     13 17 02 F1 | 	add	arg03, local01
17338     02 16 66 F0 | 	shl	arg03, #2
1733c     03 00 00 FF 
17340     04 E4 85 F1 | 	sub	objptr, ##1540
17344     F2 16 02 F1 | 	add	arg03, objptr
17348     0B 17 02 FB | 	rdlong	arg03, arg03
1734c     0C 4E 05 F1 | 	add	fp, #12
17350     A7 16 62 FC | 	wrlong	arg03, fp
17354                 | ' 
17354                 | ' numpar=compiledline(lineptr_e).result.uresult
17354                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
17354     0C 4E 85 F1 | 	sub	fp, #12
17358     02 16 16 F2 | 	cmp	arg03, #2 wc
1735c     47 00 00 FF 
17360     7C E4 85 F1 | 	sub	objptr, ##36476
17364     40 00 90 CD |  if_b	jmp	#LR__1920
17368     00 12 06 F6 | 	mov	arg01, #0
1736c     4C 19 B1 FD | 	call	#__system___getiolock_0558
17370     FD 12 02 F6 | 	mov	arg01, result1
17374     1C BC B0 FD | 	call	#__system___lockmem
17378     9A 01 00 FF 
1737c     FE 14 06 F6 | 	mov	arg02, ##@LR__5697
17380     00 12 06 F6 | 	mov	arg01, #0
17384     00 16 06 F6 | 	mov	arg03, #0
17388     FC C8 B0 FD | 	call	#__system___basic_print_string
1738c     00 12 06 F6 | 	mov	arg01, #0
17390     28 19 B1 FD | 	call	#__system___getiolock_0558
17394     FD 00 68 FC | 	wrlong	#0, result1
17398     27 12 06 F6 | 	mov	arg01, #39
1739c     00 14 06 F6 | 	mov	arg02, #0
173a0     60 82 B0 FD | 	call	#_printerror
173a4     30 01 90 FD | 	jmp	#LR__1927
173a8                 | LR__1920
173a8                 | ' if numpar=0 then
173a8     0C 4E 05 F1 | 	add	fp, #12
173ac     A7 FE 09 FB | 	rdlong	result3, fp wz
173b0     0C 4E 85 F1 | 	sub	fp, #12
173b4     20 00 90 5D |  if_ne	jmp	#LR__1921
173b8     08 4E 05 F1 | 	add	fp, #8
173bc     A7 3A 68 FC | 	wrlong	#29, fp
173c0     08 4E 85 F1 | 	sub	fp, #8
173c4     1B FA 61 FD | 	getrnd	result1
173c8     A7 FA 61 FC | 	wrlong	result1, fp
173cc     A7 12 02 F6 | 	mov	arg01, fp
173d0     A4 55 BF FD | 	call	#_push
173d4     00 01 90 FD | 	jmp	#LR__1926
173d8                 | LR__1921
173d8     04 55 BF FD | 	call	#_pop
173dc     A7 FA 61 FC | 	wrlong	result1, fp
173e0     04 4E 05 F1 | 	add	fp, #4
173e4     A7 FC 61 FC | 	wrlong	result2, fp
173e8     04 4E 05 F1 | 	add	fp, #4
173ec     A7 FE 61 FC | 	wrlong	result3, fp
173f0                 | '   t1=pop()
173f0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
173f0     08 4E 85 F1 | 	sub	fp, #8
173f4     1C FE 0D F2 | 	cmp	result3, #28 wz
173f8     08 4E 05 51 |  if_ne	add	fp, #8
173fc     A7 26 02 5B |  if_ne	rdlong	local01, fp
17400     08 4E 85 51 |  if_ne	sub	fp, #8
17404     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17408     2C 00 90 5D |  if_ne	jmp	#LR__1922
1740c     1B FA 61 FD | 	getrnd	result1
17410     A7 26 02 FB | 	rdlong	local01, fp
17414     13 FB 11 FD | 	qdiv	result1, local01
17418     A7 12 02 F6 | 	mov	arg01, fp
1741c     19 26 62 FD | 	getqy	local01
17420     A7 26 62 FC | 	wrlong	local01, fp
17424     08 4E 05 F1 | 	add	fp, #8
17428     A7 3A 68 FC | 	wrlong	#29, fp
1742c     08 4E 85 F1 | 	sub	fp, #8
17430     44 55 BF FD | 	call	#_push
17434     A0 00 90 FD | 	jmp	#LR__1925
17438                 | LR__1922
17438     08 4E 05 F1 | 	add	fp, #8
1743c     A7 26 02 FB | 	rdlong	local01, fp
17440     08 4E 85 F1 | 	sub	fp, #8
17444     1E 26 0E F2 | 	cmp	local01, #30 wz
17448     48 00 90 5D |  if_ne	jmp	#LR__1923
1744c     A7 12 02 FB | 	rdlong	arg01, fp
17450     00 C0 24 FF 
17454     00 14 06 F6 | 	mov	arg02, ##1233125376
17458     B4 EB B0 FD | 	call	#__system___float_div
1745c     FD 26 02 F6 | 	mov	local01, result1
17460     1B 12 62 FD | 	getrnd	arg01
17464     74 13 06 F4 | 	bitl	arg01, #372
17468     9C E5 B0 FD | 	call	#__system___float_fromuns
1746c     FD 14 02 F6 | 	mov	arg02, result1
17470     13 13 02 F6 | 	mov	arg01, local01
17474     94 E9 B0 FD | 	call	#__system___float_mul
17478     A7 FA 61 FC | 	wrlong	result1, fp
1747c     08 4E 05 F1 | 	add	fp, #8
17480     A7 3C 68 FC | 	wrlong	#30, fp
17484     08 4E 85 F1 | 	sub	fp, #8
17488     A7 12 02 F6 | 	mov	arg01, fp
1748c     E8 54 BF FD | 	call	#_push
17490     44 00 90 FD | 	jmp	#LR__1924
17494                 | LR__1923
17494                 | '     print "rnd: "; : printerror(40) 
17494     00 12 06 F6 | 	mov	arg01, #0
17498     20 18 B1 FD | 	call	#__system___getiolock_0558
1749c     FD 12 02 F6 | 	mov	arg01, result1
174a0     F0 BA B0 FD | 	call	#__system___lockmem
174a4     9A 01 00 FF 
174a8     04 15 06 F6 | 	mov	arg02, ##@LR__5698
174ac     00 12 06 F6 | 	mov	arg01, #0
174b0     00 16 06 F6 | 	mov	arg03, #0
174b4     D0 C7 B0 FD | 	call	#__system___basic_print_string
174b8     00 12 06 F6 | 	mov	arg01, #0
174bc     FC 17 B1 FD | 	call	#__system___getiolock_0558
174c0     FD 00 68 FC | 	wrlong	#0, result1
174c4     28 12 06 F6 | 	mov	arg01, #40
174c8     00 14 06 F6 | 	mov	arg02, #0
174cc     34 81 B0 FD | 	call	#_printerror
174d0     A7 12 02 F6 | 	mov	arg01, fp
174d4     A0 54 BF FD | 	call	#_push
174d8                 | LR__1924
174d8                 | LR__1925
174d8                 | LR__1926
174d8                 | LR__1927
174d8     A7 F0 03 F6 | 	mov	ptra, fp
174dc     B2 00 A0 FD | 	call	#popregs_
174e0                 | _do_rnd_ret
174e0     2D 00 64 FD | 	ret
174e4                 | 
174e4                 | ' 
174e4                 | ' '-------------------- round
174e4                 | ' 
174e4                 | ' sub do_round
174e4                 | _do_round
174e4     00 4A 05 F6 | 	mov	COUNT_, #0
174e8     A8 00 A0 FD | 	call	#pushregs_
174ec     0C F0 07 F1 | 	add	ptra, #12
174f0     EC 53 BF FD | 	call	#_pop
174f4     A7 FA 61 FC | 	wrlong	result1, fp
174f8     04 4E 05 F1 | 	add	fp, #4
174fc     A7 FC 61 FC | 	wrlong	result2, fp
17500     04 4E 05 F1 | 	add	fp, #4
17504     A7 FE 61 FC | 	wrlong	result3, fp
17508     08 4E 85 F1 | 	sub	fp, #8
1750c     A7 12 02 F6 | 	mov	arg01, fp
17510     B0 55 BF FD | 	call	#_converttoint
17514     A7 FA 61 FC | 	wrlong	result1, fp
17518     08 4E 05 F1 | 	add	fp, #8
1751c     A7 38 68 FC | 	wrlong	#28, fp
17520     08 4E 85 F1 | 	sub	fp, #8
17524     A7 12 02 F6 | 	mov	arg01, fp
17528     4C 54 BF FD | 	call	#_push
1752c     A7 F0 03 F6 | 	mov	ptra, fp
17530     B2 00 A0 FD | 	call	#popregs_
17534                 | _do_round_ret
17534     2D 00 64 FD | 	ret
17538                 | 
17538                 | ' 
17538                 | ' '-------------------- rqpin
17538                 | ' 
17538                 | ' sub do_rqpin
17538                 | _do_rqpin
17538     00 4A 05 F6 | 	mov	COUNT_, #0
1753c     A8 00 A0 FD | 	call	#pushregs_
17540     0C F0 07 F1 | 	add	ptra, #12
17544     98 53 BF FD | 	call	#_pop
17548     A7 FA 61 FC | 	wrlong	result1, fp
1754c     04 4E 05 F1 | 	add	fp, #4
17550     A7 FC 61 FC | 	wrlong	result2, fp
17554     04 4E 05 F1 | 	add	fp, #4
17558     A7 FE 61 FC | 	wrlong	result3, fp
1755c     08 4E 85 F1 | 	sub	fp, #8
17560     A7 12 02 F6 | 	mov	arg01, fp
17564     5C 55 BF FD | 	call	#_converttoint
17568     FD 12 02 F6 | 	mov	arg01, result1
1756c     00 FA 05 F6 | 	mov	result1, #0
17570     09 FB 81 FA | 	rqpin	result1, arg01
17574     52 00 00 FF 
17578     20 E4 05 F1 | 	add	objptr, ##42016
1757c     F2 FA 61 FC | 	wrlong	result1, objptr
17580     52 00 00 FF 
17584     20 E4 85 F1 | 	sub	objptr, ##42016
17588     08 4E 05 F1 | 	add	fp, #8
1758c     A7 3A 68 FC | 	wrlong	#29, fp
17590     08 4E 85 F1 | 	sub	fp, #8
17594     A7 08 68 FC | 	wrlong	#4, fp
17598     A7 12 02 F6 | 	mov	arg01, fp
1759c     D8 53 BF FD | 	call	#_push
175a0     A7 F0 03 F6 | 	mov	ptra, fp
175a4     B2 00 A0 FD | 	call	#popregs_
175a8                 | _do_rqpin_ret
175a8     2D 00 64 FD | 	ret
175ac                 | 
175ac                 | ' 
175ac                 | ' ' ------------------ run
175ac                 | ' 
175ac                 | ' sub do_run
175ac                 | _do_run
175ac     04 4A 05 F6 | 	mov	COUNT_, #4
175b0     A8 00 A0 FD | 	call	#pushregs_
175b4     4A 00 00 FF 
175b8     80 E4 05 F1 | 	add	objptr, ##38016
175bc     F2 26 02 FB | 	rdlong	local01, objptr
175c0     06 00 00 FF 
175c4     38 E4 05 F1 | 	add	objptr, ##3128
175c8     F2 28 02 FB | 	rdlong	local02, objptr
175cc     04 E4 05 F1 | 	add	objptr, #4
175d0     F2 2A 02 FB | 	rdlong	local03, objptr
175d4     13 19 02 F6 | 	mov	arg04, local01
175d8     0C 17 02 F6 | 	mov	arg03, arg04
175dc     01 16 66 F0 | 	shl	arg03, #1
175e0     0C 17 02 F1 | 	add	arg03, arg04
175e4     02 16 66 F0 | 	shl	arg03, #2
175e8     09 00 00 FF 
175ec     40 E4 85 F1 | 	sub	objptr, ##4672
175f0     F2 16 02 F1 | 	add	arg03, objptr
175f4     0B 15 02 FB | 	rdlong	arg02, arg03
175f8                 | ' 
175f8                 | ' r_lineptr_e=lineptr_e
175f8                 | ' r_runptr=runptr
175f8                 | ' r_runptr2=runptr2
175f8                 | ' 
175f8                 | ' numpar=compiledline(lineptr_e).result.uresult
175f8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
175f8     01 14 0E F2 | 	cmp	arg02, #1 wz
175fc     47 00 00 FF 
17600     7C E4 85 F1 | 	sub	objptr, ##36476
17604     00 12 06 A6 |  if_e	mov	arg01, #0
17608     6C C1 BF AD |  if_e	call	#_do_load
1760c     4A 00 00 FF 
17610     88 E4 05 F1 | 	add	objptr, ##38024
17614     F2 18 02 FB | 	rdlong	arg04, objptr
17618     06 00 00 FF 
1761c     30 E4 05 F1 | 	add	objptr, ##3120
17620     F2 18 62 FC | 	wrlong	arg04, objptr
17624     04 E4 05 F1 | 	add	objptr, #4
17628     F2 00 68 FC | 	wrlong	#0, objptr
1762c     04 E4 05 F1 | 	add	objptr, #4
17630     FF FF FF FF 
17634     F2 FE 6B FC | 	wrlong	##-1, objptr
17638                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
17638                 | ' if inrun>0 then 
17638     2C E4 05 F1 | 	add	objptr, #44
1763c     F2 18 02 FB | 	rdlong	arg04, objptr
17640     50 00 00 FF 
17644     EC E4 85 F1 | 	sub	objptr, ##41196
17648     01 18 16 F2 | 	cmp	arg04, #1 wc
1764c     30 00 90 CD |  if_b	jmp	#LR__1930
17650     50 00 00 FF 
17654     F0 E4 05 F1 | 	add	objptr, ##41200
17658     F2 12 02 F6 | 	mov	arg01, objptr
1765c     38 E4 85 F1 | 	sub	objptr, #56
17660     F2 14 02 FB | 	rdlong	arg02, objptr
17664     18 16 06 F6 | 	mov	arg03, #24
17668     44 00 00 FF 
1766c     EC E5 85 F1 | 	sub	objptr, ##35308
17670     E0 AC B0 FD | 	call	#_psram_spin2_read1
17674     0B 00 00 FF 
17678     CC E4 85 F1 | 	sub	objptr, ##5836
1767c                 | '   psram.read1(varptr(runheader),runptr,24)  
1767c                 | '   return
1767c     0C 03 90 FD | 	jmp	#LR__1937
17680                 | LR__1930
17680     50 00 00 FF 
17684     EC E4 05 F1 | 	add	objptr, ##41196
17688     F2 02 68 FC | 	wrlong	#1, objptr
1768c     04 E4 05 F1 | 	add	objptr, #4
17690     F2 12 02 F6 | 	mov	arg01, objptr
17694     38 E4 85 F1 | 	sub	objptr, #56
17698     F2 14 02 FB | 	rdlong	arg02, objptr
1769c     18 16 06 F6 | 	mov	arg03, #24
176a0     44 00 00 FF 
176a4     EC E5 85 F1 | 	sub	objptr, ##35308
176a8     A8 AC B0 FD | 	call	#_psram_spin2_read1
176ac                 | ' inrun=1
176ac                 | ' psram.read1(varptr(runheader),runptr,24) 
176ac                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
176ac     45 00 00 FF 
176b0     24 E4 05 F1 | 	add	objptr, ##35364
176b4     F2 2C 02 FB | 	rdlong	local04, objptr
176b8     50 00 00 FF 
176bc     F0 E4 85 F1 | 	sub	objptr, ##41200
176c0     FF FF 7F FF 
176c4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
176c8     50 00 00 AF 
176cc     EC E4 05 A1 |  if_e	add	objptr, ##41196
176d0     F2 00 68 AC |  if_e	wrlong	#0, objptr
176d4     50 00 00 AF 
176d8     EC E4 85 A1 |  if_e	sub	objptr, ##41196
176dc     AC 02 90 AD |  if_e	jmp	#LR__1937
176e0                 | ' do 
176e0                 | LR__1931
176e0                 | '   if runptr<>oldrunptr then
176e0     50 00 00 FF 
176e4     B8 E4 05 F1 | 	add	objptr, ##41144
176e8     F2 2C 02 FB | 	rdlong	local04, objptr
176ec     08 E4 05 F1 | 	add	objptr, #8
176f0     F2 18 02 FB | 	rdlong	arg04, objptr
176f4     50 00 00 FF 
176f8     C0 E4 85 F1 | 	sub	objptr, ##41152
176fc     0C 2D 0A F2 | 	cmp	local04, arg04 wz
17700     CC 00 90 AD |  if_e	jmp	#LR__1932
17704     50 00 00 FF 
17708     F0 E4 05 F1 | 	add	objptr, ##41200
1770c     F2 12 02 F6 | 	mov	arg01, objptr
17710     38 E4 85 F1 | 	sub	objptr, #56
17714     F2 14 02 FB | 	rdlong	arg02, objptr
17718     18 16 06 F6 | 	mov	arg03, #24
1771c     44 00 00 FF 
17720     EC E5 85 F1 | 	sub	objptr, ##35308
17724     2C AC B0 FD | 	call	#_psram_spin2_read1
17728     3B 00 00 FF 
1772c     B0 E5 05 F1 | 	add	objptr, ##30640
17730     F2 12 02 F6 | 	mov	arg01, objptr
17734     09 00 00 FF 
17738     3C E4 05 F1 | 	add	objptr, ##4668
1773c     F2 14 02 FB | 	rdlong	arg02, objptr
17740     0B 00 00 FF 
17744     54 E4 85 F1 | 	sub	objptr, ##5716
17748     F2 2C 02 FB | 	rdlong	local04, objptr
1774c     01 2C 66 F0 | 	shl	local04, #1
17750     16 15 02 F1 | 	add	arg02, local04
17754     0B 00 00 FF 
17758     94 E4 05 F1 | 	add	objptr, ##5780
1775c     F2 16 02 FB | 	rdlong	arg03, objptr
17760     40 E4 85 F1 | 	sub	objptr, #64
17764     F2 2C 02 FB | 	rdlong	local04, objptr
17768     16 17 82 F1 | 	sub	arg03, local04
1776c     44 00 00 FF 
17770     EC E5 85 F1 | 	sub	objptr, ##35308
17774     DC AB B0 FD | 	call	#_psram_spin2_read1
17778     45 00 00 FF 
1777c     2C E4 05 F1 | 	add	objptr, ##35372
17780     F2 2C 02 FB | 	rdlong	local04, objptr
17784     40 E4 85 F1 | 	sub	objptr, #64
17788     F2 14 02 FB | 	rdlong	arg02, objptr
1778c     0A 2D 82 F1 | 	sub	local04, arg02
17790     0B 00 00 FF 
17794     54 E4 85 F1 | 	sub	objptr, ##5716
17798     F2 14 02 FB | 	rdlong	arg02, objptr
1779c     0A 2D 12 FD | 	qdiv	local04, arg02
177a0     05 00 00 FF 
177a4     18 E4 05 F1 | 	add	objptr, ##2584
177a8     18 2C 62 FD | 	getqx	local04
177ac     03 2C 86 F1 | 	sub	local04, #3
177b0     F2 2C 62 FC | 	wrlong	local04, objptr
177b4     06 00 00 FF 
177b8     3C E4 05 F1 | 	add	objptr, ##3132
177bc     F2 2C 02 FB | 	rdlong	local04, objptr
177c0     08 E4 05 F1 | 	add	objptr, #8
177c4     F2 2C 62 FC | 	wrlong	local04, objptr
177c8     50 00 00 FF 
177cc     C0 E4 85 F1 | 	sub	objptr, ##41152
177d0                 | LR__1932
177d0     50 00 00 FF 
177d4     04 E5 05 F1 | 	add	objptr, ##41220
177d8     F2 2C 02 FB | 	rdlong	local04, objptr
177dc     4C E4 85 F1 | 	sub	objptr, #76
177e0     F2 2C 62 FC | 	wrlong	local04, objptr
177e4     04 E4 05 F1 | 	add	objptr, #4
177e8     F2 12 02 FB | 	rdlong	arg01, objptr
177ec     50 00 00 FF 
177f0     BC E4 85 F1 | 	sub	objptr, ##41148
177f4     E4 4F BF FD | 	call	#_execute_line
177f8     50 00 00 FF 
177fc     BC E4 05 F1 | 	add	objptr, ##41148
17800     F2 FA 61 FC | 	wrlong	result1, objptr
17804     04 E4 85 F1 | 	sub	objptr, #4
17808     F2 2C 02 FB | 	rdlong	local04, objptr
1780c     50 00 00 FF 
17810     B8 E4 85 F1 | 	sub	objptr, ##41144
17814     FF FF 3F FF 
17818     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1781c     4C 00 90 AD |  if_e	jmp	#LR__1935
17820     E0 12 06 F6 | 	mov	arg01, #224
17824     BC AE B0 FD | 	call	#_usbnew_spin2_keystate
17828     00 FA 0D F2 | 	cmp	result1, #0 wz
1782c     10 00 90 5D |  if_ne	jmp	#LR__1933
17830     E4 12 06 F6 | 	mov	arg01, #228
17834     AC AE B0 FD | 	call	#_usbnew_spin2_keystate
17838     00 FA 0D F2 | 	cmp	result1, #0 wz
1783c     10 00 90 AD |  if_e	jmp	#LR__1934
17840                 | LR__1933
17840     06 12 06 F6 | 	mov	arg01, #6
17844     9C AE B0 FD | 	call	#_usbnew_spin2_keystate
17848     00 FA 0D F2 | 	cmp	result1, #0 wz
1784c     1C 00 90 5D |  if_ne	jmp	#LR__1935
17850                 | LR__1934
17850     50 00 00 FF 
17854     EC E4 05 F1 | 	add	objptr, ##41196
17858     F2 2C 02 FB | 	rdlong	local04, objptr
1785c     50 00 00 FF 
17860     EC E4 85 F1 | 	sub	objptr, ##41196
17864     02 2C 0E F2 | 	cmp	local04, #2 wz
17868     74 FE 9F 5D |  if_ne	jmp	#LR__1931
1786c                 | LR__1935
1786c                 | '   ''do whatever kbm.peek_latest_key()=$106 
1786c                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1786c     50 00 00 FF 
17870     B8 E4 05 F1 | 	add	objptr, ##41144
17874     F2 2C 02 FB | 	rdlong	local04, objptr
17878     50 00 00 FF 
1787c     B8 E4 85 F1 | 	sub	objptr, ##41144
17880     FF FF 3F FF 
17884     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
17888     AC 00 90 AD |  if_e	jmp	#LR__1936
1788c     50 00 00 FF 
17890     EC E4 05 F1 | 	add	objptr, ##41196
17894     F2 2C 02 FB | 	rdlong	local04, objptr
17898     50 00 00 FF 
1789c     EC E4 85 F1 | 	sub	objptr, ##41196
178a0     01 2C 0E F2 | 	cmp	local04, #1 wz
178a4     90 00 90 5D |  if_ne	jmp	#LR__1936
178a8                 | '   print: print "Stopped at line ";runheader(0) 
178a8     00 12 06 F6 | 	mov	arg01, #0
178ac     0C 14 B1 FD | 	call	#__system___getiolock_0558
178b0     FD 12 02 F6 | 	mov	arg01, result1
178b4     DC B6 B0 FD | 	call	#__system___lockmem
178b8     00 12 06 F6 | 	mov	arg01, #0
178bc     0A 14 06 F6 | 	mov	arg02, #10
178c0     00 16 06 F6 | 	mov	arg03, #0
178c4     68 C3 B0 FD | 	call	#__system___basic_print_char
178c8     00 12 06 F6 | 	mov	arg01, #0
178cc     EC 13 B1 FD | 	call	#__system___getiolock_0558
178d0     FD 00 68 FC | 	wrlong	#0, result1
178d4     00 12 06 F6 | 	mov	arg01, #0
178d8     E0 13 B1 FD | 	call	#__system___getiolock_0558
178dc     FD 12 02 F6 | 	mov	arg01, result1
178e0     B0 B6 B0 FD | 	call	#__system___lockmem
178e4     9A 01 00 FF 
178e8     0A 15 06 F6 | 	mov	arg02, ##@LR__5699
178ec     00 12 06 F6 | 	mov	arg01, #0
178f0     00 16 06 F6 | 	mov	arg03, #0
178f4     90 C3 B0 FD | 	call	#__system___basic_print_string
178f8     50 00 00 FF 
178fc     F0 E4 05 F1 | 	add	objptr, ##41200
17900     F2 14 02 FB | 	rdlong	arg02, objptr
17904     50 00 00 FF 
17908     F0 E4 85 F1 | 	sub	objptr, ##41200
1790c     00 12 06 F6 | 	mov	arg01, #0
17910     00 16 06 F6 | 	mov	arg03, #0
17914     0A 18 06 F6 | 	mov	arg04, #10
17918     F0 C3 B0 FD | 	call	#__system___basic_print_unsigned
1791c     00 12 06 F6 | 	mov	arg01, #0
17920     0A 14 06 F6 | 	mov	arg02, #10
17924     00 16 06 F6 | 	mov	arg03, #0
17928     04 C3 B0 FD | 	call	#__system___basic_print_char
1792c     00 12 06 F6 | 	mov	arg01, #0
17930     88 13 B1 FD | 	call	#__system___getiolock_0558
17934     FD 00 68 FC | 	wrlong	#0, result1
17938                 | LR__1936
17938     50 00 00 FF 
1793c     EC E4 05 F1 | 	add	objptr, ##41196
17940     F2 00 68 FC | 	wrlong	#0, objptr
17944     06 00 00 FF 
17948     6C E4 85 F1 | 	sub	objptr, ##3180
1794c     F2 26 62 FC | 	wrlong	local01, objptr
17950     06 00 00 FF 
17954     38 E4 05 F1 | 	add	objptr, ##3128
17958     F2 28 62 FC | 	wrlong	local02, objptr
1795c     04 E4 05 F1 | 	add	objptr, #4
17960     F2 2A 62 FC | 	wrlong	local03, objptr
17964     50 00 00 FF 
17968     BC E4 85 F1 | 	sub	objptr, ##41148
1796c     11 12 06 F6 | 	mov	arg01, #17
17970     08 14 06 F6 | 	mov	arg02, #8
17974     10 16 06 F6 | 	mov	arg03, #16
17978     BC 8C B0 FD | 	call	#_hg010b_spin2_setspritesize
1797c     10 12 06 F6 | 	mov	arg01, #16
17980     20 14 06 F6 | 	mov	arg02, #32
17984     20 16 06 F6 | 	mov	arg03, #32
17988     AC 8C B0 FD | 	call	#_hg010b_spin2_setspritesize
1798c                 | LR__1937
1798c     A7 F0 03 F6 | 	mov	ptra, fp
17990     B2 00 A0 FD | 	call	#popregs_
17994                 | _do_run_ret
17994     2D 00 64 FD | 	ret
17998                 | 
17998                 | ' 
17998                 | ' ' ------------------ save
17998                 | ' 
17998                 | ' sub do_save                        
17998                 | _do_save
17998     04 4A 05 F6 | 	mov	COUNT_, #4
1799c     A8 00 A0 FD | 	call	#pushregs_
179a0     B8 F0 07 F1 | 	add	ptra, #184
179a4     4A 00 00 FF 
179a8     80 E4 05 F1 | 	add	objptr, ##38016
179ac     F2 26 02 FB | 	rdlong	local01, objptr
179b0     13 29 02 F6 | 	mov	local02, local01
179b4     01 28 66 F0 | 	shl	local02, #1
179b8     13 29 02 F1 | 	add	local02, local01
179bc     02 28 66 F0 | 	shl	local02, #2
179c0     03 00 00 FF 
179c4     04 E4 85 F1 | 	sub	objptr, ##1540
179c8     F2 28 02 F1 | 	add	local02, objptr
179cc     14 2B 02 FB | 	rdlong	local03, local02
179d0     10 4E 05 F1 | 	add	fp, #16
179d4     A7 2A 62 FC | 	wrlong	local03, fp
179d8                 | ' 
179d8                 | ' numpar=compiledline(lineptr_e).result.uresult
179d8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
179d8     10 4E 85 F1 | 	sub	fp, #16
179dc     01 2A 56 F2 | 	cmps	local03, #1 wc
179e0     47 00 00 FF 
179e4     7C E4 85 F1 | 	sub	objptr, ##36476
179e8     20 00 90 CD |  if_b	jmp	#LR__1940
179ec     F0 4E BF FD | 	call	#_pop
179f0     A7 FA 61 FC | 	wrlong	result1, fp
179f4     04 4E 05 F1 | 	add	fp, #4
179f8     A7 FC 61 FC | 	wrlong	result2, fp
179fc     04 4E 05 F1 | 	add	fp, #4
17a00     A7 FE 61 FC | 	wrlong	result3, fp
17a04     08 4E 85 F1 | 	sub	fp, #8
17a08     24 00 90 FD | 	jmp	#LR__1941
17a0c                 | LR__1940
17a0c     51 00 00 FF 
17a10     D8 E5 05 F1 | 	add	objptr, ##41944
17a14     F2 2A 02 FB | 	rdlong	local03, objptr
17a18     51 00 00 FF 
17a1c     D8 E5 85 F1 | 	sub	objptr, ##41944
17a20     A7 2A 62 FC | 	wrlong	local03, fp
17a24     08 4E 05 F1 | 	add	fp, #8
17a28     A7 3E 68 FC | 	wrlong	#31, fp
17a2c     08 4E 85 F1 | 	sub	fp, #8
17a30                 | LR__1941
17a30                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
17a30     4A 00 00 FF 
17a34     88 E4 05 F1 | 	add	objptr, ##38024
17a38     F2 12 02 FB | 	rdlong	arg01, objptr
17a3c     4A 00 00 FF 
17a40     88 E4 85 F1 | 	sub	objptr, ##38024
17a44     78 7E B0 FD | 	call	#_pslpeek
17a48     FF FF 7F FF 
17a4c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
17a50     10 00 90 5D |  if_ne	jmp	#LR__1942
17a54     1B 12 06 F6 | 	mov	arg01, #27
17a58     00 14 06 F6 | 	mov	arg02, #0
17a5c     A4 7B B0 FD | 	call	#_printerror
17a60     CC 02 90 FD | 	jmp	#LR__1948
17a64                 | LR__1942
17a64                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
17a64     08 4E 05 F1 | 	add	fp, #8
17a68     A7 2A 02 FB | 	rdlong	local03, fp
17a6c     08 4E 85 F1 | 	sub	fp, #8
17a70     2B 2A 0E F2 | 	cmp	local03, #43 wz
17a74     18 00 90 5D |  if_ne	jmp	#LR__1943
17a78     A7 12 02 FB | 	rdlong	arg01, fp
17a7c     D8 4F BF FD | 	call	#_convertstring
17a80     A7 FA 61 FC | 	wrlong	result1, fp
17a84     08 4E 05 F1 | 	add	fp, #8
17a88     A7 3E 68 FC | 	wrlong	#31, fp
17a8c     08 4E 85 F1 | 	sub	fp, #8
17a90                 | LR__1943
17a90                 | ' if t1.result_type=result_string then
17a90     08 4E 05 F1 | 	add	fp, #8
17a94     A7 2A 02 FB | 	rdlong	local03, fp
17a98     08 4E 85 F1 | 	sub	fp, #8
17a9c     1F 2A 0E F2 | 	cmp	local03, #31 wz
17aa0     8C 02 90 5D |  if_ne	jmp	#LR__1947
17aa4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
17aa4     A7 12 02 FB | 	rdlong	arg01, fp
17aa8     9A 01 00 FF 
17aac     1B 15 06 F6 | 	mov	arg02, ##@LR__5700
17ab0     08 B5 B0 FD | 	call	#__system___string_cmp
17ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
17ab8     51 00 00 AF 
17abc     D8 E5 05 A1 |  if_e	add	objptr, ##41944
17ac0     F2 2A 02 AB |  if_e	rdlong	local03, objptr
17ac4     A7 2A 62 AC |  if_e	wrlong	local03, fp
17ac8     51 00 00 AF 
17acc     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
17ad0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
17ad4     51 00 00 5F 
17ad8     D8 E5 05 51 |  if_ne	add	objptr, ##41944
17adc     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
17ae0     51 00 00 5F 
17ae4     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
17ae8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
17ae8     09 12 06 F6 | 	mov	arg01, #9
17aec     FC 07 B1 FD | 	call	#__system__close
17af0     09 2A 06 F6 | 	mov	local03, #9
17af4     4A 00 00 FF 
17af8     94 E4 05 F1 | 	add	objptr, ##38036
17afc     F2 12 02 FB | 	rdlong	arg01, objptr
17b00     4A 00 00 FF 
17b04     94 E4 85 F1 | 	sub	objptr, ##38036
17b08     9A 01 00 FF 
17b0c     1C 15 06 F6 | 	mov	arg02, ##@LR__5701
17b10     DC B4 B0 FD | 	call	#__system___string_concat
17b14     FD 12 02 F6 | 	mov	arg01, result1
17b18     A7 14 02 FB | 	rdlong	arg02, fp
17b1c     D0 B4 B0 FD | 	call	#__system___string_concat
17b20     FD 14 02 F6 | 	mov	arg02, result1
17b24     15 13 02 F6 | 	mov	arg01, local03
17b28     0D 16 06 F6 | 	mov	arg03, #13
17b2c     68 C0 B0 FD | 	call	#__system___basic_open_string
17b30     4A 00 00 FF 
17b34     88 E4 05 F1 | 	add	objptr, ##38024
17b38     F2 2A 02 FB | 	rdlong	local03, objptr
17b3c     4A 00 00 FF 
17b40     88 E4 85 F1 | 	sub	objptr, ##38024
17b44     B0 4E 05 F1 | 	add	fp, #176
17b48     A7 2A 62 FC | 	wrlong	local03, fp
17b4c     B0 4E 85 F1 | 	sub	fp, #176
17b50                 | '   saveptr=programstart
17b50                 | '   do
17b50                 | LR__1944
17b50     14 4E 05 F1 | 	add	fp, #20
17b54     A7 12 02 F6 | 	mov	arg01, fp
17b58     9C 4E 05 F1 | 	add	fp, #156
17b5c     A7 14 02 FB | 	rdlong	arg02, fp
17b60     B0 4E 85 F1 | 	sub	fp, #176
17b64     18 16 06 F6 | 	mov	arg03, #24
17b68     0B 00 00 FF 
17b6c     CC E4 05 F1 | 	add	objptr, ##5836
17b70     E0 A7 B0 FD | 	call	#_psram_spin2_read1
17b74     2C 4E 05 F1 | 	add	fp, #44
17b78     A7 12 02 F6 | 	mov	arg01, fp
17b7c     10 4E 85 F1 | 	sub	fp, #16
17b80     A7 14 02 FB | 	rdlong	arg02, fp
17b84     04 4E 05 F1 | 	add	fp, #4
17b88     A7 16 02 FB | 	rdlong	arg03, fp
17b8c     20 4E 85 F1 | 	sub	fp, #32
17b90     C0 A7 B0 FD | 	call	#_psram_spin2_read1
17b94     0B 00 00 FF 
17b98     CC E4 85 F1 | 	sub	objptr, ##5836
17b9c     9A 01 00 FF 
17ba0     1E 2B 06 F6 | 	mov	local03, ##@LR__5702
17ba4     AC 4E 05 F1 | 	add	fp, #172
17ba8     A7 2A 62 FC | 	wrlong	local03, fp
17bac                 | '     psram.read1(varptr(header(0)),saveptr,24)
17bac                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
17bac                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
17bac     A0 4E 85 F1 | 	sub	fp, #160
17bb0     A7 02 68 FC | 	wrlong	#1, fp
17bb4     14 4E 05 F1 | 	add	fp, #20
17bb8     A7 2C 02 FB | 	rdlong	local04, fp
17bbc     20 4E 85 F1 | 	sub	fp, #32
17bc0     01 2C 06 F1 | 	add	local04, #1
17bc4                 | LR__1945
17bc4     0C 4E 05 F1 | 	add	fp, #12
17bc8     A7 2A 02 FB | 	rdlong	local03, fp
17bcc     0C 4E 85 F1 | 	sub	fp, #12
17bd0     16 2B 52 F2 | 	cmps	local03, local04 wc
17bd4     54 00 90 3D |  if_ae	jmp	#LR__1946
17bd8     AC 4E 05 F1 | 	add	fp, #172
17bdc     A7 26 02 FB | 	rdlong	local01, fp
17be0     A0 4E 85 F1 | 	sub	fp, #160
17be4     A7 2A 02 FB | 	rdlong	local03, fp
17be8     01 2A 86 F1 | 	sub	local03, #1
17bec     20 4E 05 F1 | 	add	fp, #32
17bf0     A7 2A 02 F1 | 	add	local03, fp
17bf4     15 13 C2 FA | 	rdbyte	arg01, local03
17bf8     2C 4E 85 F1 | 	sub	fp, #44
17bfc     D4 D5 B0 FD | 	call	#__system__Chr_S
17c00     FD 14 02 F6 | 	mov	arg02, result1
17c04     13 13 02 F6 | 	mov	arg01, local01
17c08     E4 B3 B0 FD | 	call	#__system___string_concat
17c0c     AC 4E 05 F1 | 	add	fp, #172
17c10     A7 FA 61 FC | 	wrlong	result1, fp
17c14     A0 4E 85 F1 | 	sub	fp, #160
17c18     A7 2A 02 FB | 	rdlong	local03, fp
17c1c     01 2A 06 F1 | 	add	local03, #1
17c20     A7 2A 62 FC | 	wrlong	local03, fp
17c24     0C 4E 85 F1 | 	sub	fp, #12
17c28     98 FF 9F FD | 	jmp	#LR__1945
17c2c                 | LR__1946
17c2c                 | '     print #9, saveline$
17c2c     09 12 06 F6 | 	mov	arg01, #9
17c30     88 10 B1 FD | 	call	#__system___getiolock_0558
17c34     FD 12 02 F6 | 	mov	arg01, result1
17c38     58 B3 B0 FD | 	call	#__system___lockmem
17c3c     AC 4E 05 F1 | 	add	fp, #172
17c40     A7 14 02 FB | 	rdlong	arg02, fp
17c44     AC 4E 85 F1 | 	sub	fp, #172
17c48     09 12 06 F6 | 	mov	arg01, #9
17c4c     00 16 06 F6 | 	mov	arg03, #0
17c50     34 C0 B0 FD | 	call	#__system___basic_print_string
17c54     09 12 06 F6 | 	mov	arg01, #9
17c58     0A 14 06 F6 | 	mov	arg02, #10
17c5c     00 16 06 F6 | 	mov	arg03, #0
17c60     CC BF B0 FD | 	call	#__system___basic_print_char
17c64     09 12 06 F6 | 	mov	arg01, #9
17c68     50 10 B1 FD | 	call	#__system___getiolock_0558
17c6c     FD 00 68 FC | 	wrlong	#0, result1
17c70     28 4E 05 F1 | 	add	fp, #40
17c74     A7 2A 02 FB | 	rdlong	local03, fp
17c78     88 4E 05 F1 | 	add	fp, #136
17c7c     A7 2A 62 FC | 	wrlong	local03, fp
17c80     88 4E 85 F1 | 	sub	fp, #136
17c84     A7 2A 02 FB | 	rdlong	local03, fp
17c88     28 4E 85 F1 | 	sub	fp, #40
17c8c     FF FF 3F FF 
17c90     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
17c94     B8 FE 9F 5D |  if_ne	jmp	#LR__1944
17c98                 | '   close #9  
17c98     09 12 06 F6 | 	mov	arg01, #9
17c9c     4C 06 B1 FD | 	call	#__system__close
17ca0                 | '   print "Saved as ";currentdir$+"/"+loadname
17ca0     00 12 06 F6 | 	mov	arg01, #0
17ca4     14 10 B1 FD | 	call	#__system___getiolock_0558
17ca8     FD 12 02 F6 | 	mov	arg01, result1
17cac     E4 B2 B0 FD | 	call	#__system___lockmem
17cb0     9A 01 00 FF 
17cb4     1F 15 06 F6 | 	mov	arg02, ##@LR__5703
17cb8     00 12 06 F6 | 	mov	arg01, #0
17cbc     00 16 06 F6 | 	mov	arg03, #0
17cc0     C4 BF B0 FD | 	call	#__system___basic_print_string
17cc4     00 28 06 F6 | 	mov	local02, #0
17cc8     4A 00 00 FF 
17ccc     94 E4 05 F1 | 	add	objptr, ##38036
17cd0     F2 12 02 FB | 	rdlong	arg01, objptr
17cd4     4A 00 00 FF 
17cd8     94 E4 85 F1 | 	sub	objptr, ##38036
17cdc     9A 01 00 FF 
17ce0     29 15 06 F6 | 	mov	arg02, ##@LR__5704
17ce4     08 B3 B0 FD | 	call	#__system___string_concat
17ce8     FD 12 02 F6 | 	mov	arg01, result1
17cec     51 00 00 FF 
17cf0     D8 E5 05 F1 | 	add	objptr, ##41944
17cf4     F2 14 02 FB | 	rdlong	arg02, objptr
17cf8     51 00 00 FF 
17cfc     D8 E5 85 F1 | 	sub	objptr, ##41944
17d00     EC B2 B0 FD | 	call	#__system___string_concat
17d04     FD 14 02 F6 | 	mov	arg02, result1
17d08     14 13 02 F6 | 	mov	arg01, local02
17d0c     00 16 06 F6 | 	mov	arg03, #0
17d10     74 BF B0 FD | 	call	#__system___basic_print_string
17d14     00 12 06 F6 | 	mov	arg01, #0
17d18     0A 14 06 F6 | 	mov	arg02, #10
17d1c     00 16 06 F6 | 	mov	arg03, #0
17d20     0C BF B0 FD | 	call	#__system___basic_print_char
17d24     00 12 06 F6 | 	mov	arg01, #0
17d28     90 0F B1 FD | 	call	#__system___getiolock_0558
17d2c     FD 00 68 FC | 	wrlong	#0, result1
17d30                 | LR__1947
17d30                 | LR__1948
17d30     A7 F0 03 F6 | 	mov	ptra, fp
17d34     B2 00 A0 FD | 	call	#popregs_
17d38                 | _do_save_ret
17d38     2D 00 64 FD | 	ret
17d3c                 | 
17d3c                 | ' 
17d3c                 | ' ' ------------------ setdelay
17d3c                 | ' 
17d3c                 | ' sub do_setdelay
17d3c                 | _do_setdelay
17d3c     02 4A 05 F6 | 	mov	COUNT_, #2
17d40     A8 00 A0 FD | 	call	#pushregs_
17d44     18 F0 07 F1 | 	add	ptra, #24
17d48     94 4B BF FD | 	call	#_pop
17d4c     FD 12 02 F6 | 	mov	arg01, result1
17d50     FE 26 02 F6 | 	mov	local01, result2
17d54     FF 28 02 F6 | 	mov	local02, result3
17d58     A7 12 62 FC | 	wrlong	arg01, fp
17d5c     04 4E 05 F1 | 	add	fp, #4
17d60     A7 26 62 FC | 	wrlong	local01, fp
17d64     04 4E 05 F1 | 	add	fp, #4
17d68     A7 28 62 FC | 	wrlong	local02, fp
17d6c     08 4E 85 F1 | 	sub	fp, #8
17d70     6C 4B BF FD | 	call	#_pop
17d74     FD 28 02 F6 | 	mov	local02, result1
17d78     0C 4E 05 F1 | 	add	fp, #12
17d7c     A7 28 62 FC | 	wrlong	local02, fp
17d80     04 4E 05 F1 | 	add	fp, #4
17d84     A7 FC 61 FC | 	wrlong	result2, fp
17d88     04 4E 05 F1 | 	add	fp, #4
17d8c     A7 FE 61 FC | 	wrlong	result3, fp
17d90     08 4E 85 F1 | 	sub	fp, #8
17d94     A7 12 02 F6 | 	mov	arg01, fp
17d98     0C 4E 85 F1 | 	sub	fp, #12
17d9c     24 4D BF FD | 	call	#_converttoint
17da0     FD 28 02 F6 | 	mov	local02, result1
17da4     14 27 02 F6 | 	mov	local01, local02
17da8     01 26 66 F0 | 	shl	local01, #1
17dac     14 27 02 F1 | 	add	local01, local02
17db0     03 26 66 F0 | 	shl	local01, #3
17db4     14 00 00 FF 
17db8     38 E5 05 F1 | 	add	objptr, ##10552
17dbc     F2 26 02 F1 | 	add	local01, objptr
17dc0     A7 12 02 F6 | 	mov	arg01, fp
17dc4     14 00 00 FF 
17dc8     38 E5 85 F1 | 	sub	objptr, ##10552
17dcc     F4 4C BF FD | 	call	#_converttoint
17dd0     06 26 06 F1 | 	add	local01, #6
17dd4     13 FB 51 FC | 	wrword	result1, local01
17dd8     A7 F0 03 F6 | 	mov	ptra, fp
17ddc     B2 00 A0 FD | 	call	#popregs_
17de0                 | _do_setdelay_ret
17de0     2D 00 64 FD | 	ret
17de4                 | 
17de4                 | ' 
17de4                 | ' ' ------------------ setenv
17de4                 | ' 
17de4                 | ' sub do_setenv
17de4                 | _do_setenv
17de4     02 4A 05 F6 | 	mov	COUNT_, #2
17de8     A8 00 A0 FD | 	call	#pushregs_
17dec     18 F0 07 F1 | 	add	ptra, #24
17df0     EC 4A BF FD | 	call	#_pop
17df4     FD 12 02 F6 | 	mov	arg01, result1
17df8     FE 26 02 F6 | 	mov	local01, result2
17dfc     FF 28 02 F6 | 	mov	local02, result3
17e00     A7 12 62 FC | 	wrlong	arg01, fp
17e04     04 4E 05 F1 | 	add	fp, #4
17e08     A7 26 62 FC | 	wrlong	local01, fp
17e0c     04 4E 05 F1 | 	add	fp, #4
17e10     A7 28 62 FC | 	wrlong	local02, fp
17e14     08 4E 85 F1 | 	sub	fp, #8
17e18     C4 4A BF FD | 	call	#_pop
17e1c     FD 28 02 F6 | 	mov	local02, result1
17e20     0C 4E 05 F1 | 	add	fp, #12
17e24     A7 28 62 FC | 	wrlong	local02, fp
17e28     04 4E 05 F1 | 	add	fp, #4
17e2c     A7 FC 61 FC | 	wrlong	result2, fp
17e30     04 4E 05 F1 | 	add	fp, #4
17e34     A7 FE 61 FC | 	wrlong	result3, fp
17e38     08 4E 85 F1 | 	sub	fp, #8
17e3c     A7 12 02 F6 | 	mov	arg01, fp
17e40     0C 4E 85 F1 | 	sub	fp, #12
17e44     7C 4C BF FD | 	call	#_converttoint
17e48     FD 28 02 F6 | 	mov	local02, result1
17e4c     14 27 02 F6 | 	mov	local01, local02
17e50     01 26 66 F0 | 	shl	local01, #1
17e54     14 27 02 F1 | 	add	local01, local02
17e58     03 26 66 F0 | 	shl	local01, #3
17e5c     14 00 00 FF 
17e60     38 E5 05 F1 | 	add	objptr, ##10552
17e64     F2 26 02 F1 | 	add	local01, objptr
17e68     A7 12 02 F6 | 	mov	arg01, fp
17e6c     14 00 00 FF 
17e70     38 E5 85 F1 | 	sub	objptr, ##10552
17e74     4C 4C BF FD | 	call	#_converttoint
17e78     05 26 06 F1 | 	add	local01, #5
17e7c     13 FB 41 FC | 	wrbyte	result1, local01
17e80     A7 F0 03 F6 | 	mov	ptra, fp
17e84     B2 00 A0 FD | 	call	#popregs_
17e88                 | _do_setenv_ret
17e88     2D 00 64 FD | 	ret
17e8c                 | 
17e8c                 | ' 
17e8c                 | ' ' ------------------ setlen
17e8c                 | ' 
17e8c                 | ' sub do_setlen
17e8c                 | _do_setlen
17e8c     02 4A 05 F6 | 	mov	COUNT_, #2
17e90     A8 00 A0 FD | 	call	#pushregs_
17e94     18 F0 07 F1 | 	add	ptra, #24
17e98     44 4A BF FD | 	call	#_pop
17e9c     FD 12 02 F6 | 	mov	arg01, result1
17ea0     FE 26 02 F6 | 	mov	local01, result2
17ea4     FF 28 02 F6 | 	mov	local02, result3
17ea8     A7 12 62 FC | 	wrlong	arg01, fp
17eac     04 4E 05 F1 | 	add	fp, #4
17eb0     A7 26 62 FC | 	wrlong	local01, fp
17eb4     04 4E 05 F1 | 	add	fp, #4
17eb8     A7 28 62 FC | 	wrlong	local02, fp
17ebc     08 4E 85 F1 | 	sub	fp, #8
17ec0     1C 4A BF FD | 	call	#_pop
17ec4     FD 28 02 F6 | 	mov	local02, result1
17ec8     0C 4E 05 F1 | 	add	fp, #12
17ecc     A7 28 62 FC | 	wrlong	local02, fp
17ed0     04 4E 05 F1 | 	add	fp, #4
17ed4     A7 FC 61 FC | 	wrlong	result2, fp
17ed8     04 4E 05 F1 | 	add	fp, #4
17edc     A7 FE 61 FC | 	wrlong	result3, fp
17ee0     08 4E 85 F1 | 	sub	fp, #8
17ee4     A7 12 02 F6 | 	mov	arg01, fp
17ee8     0C 4E 85 F1 | 	sub	fp, #12
17eec     D4 4B BF FD | 	call	#_converttoint
17ef0     FD 28 02 F6 | 	mov	local02, result1
17ef4     14 27 02 F6 | 	mov	local01, local02
17ef8     01 26 66 F0 | 	shl	local01, #1
17efc     14 27 02 F1 | 	add	local01, local02
17f00     03 26 66 F0 | 	shl	local01, #3
17f04     14 00 00 FF 
17f08     38 E5 05 F1 | 	add	objptr, ##10552
17f0c     F2 26 02 F1 | 	add	local01, objptr
17f10     A7 12 02 F6 | 	mov	arg01, fp
17f14     14 00 00 FF 
17f18     38 E5 85 F1 | 	sub	objptr, ##10552
17f1c     60 4C BF FD | 	call	#_converttofloat
17f20     08 26 06 F1 | 	add	local01, #8
17f24     13 FB 61 FC | 	wrlong	result1, local01
17f28     A7 F0 03 F6 | 	mov	ptra, fp
17f2c     B2 00 A0 FD | 	call	#popregs_
17f30                 | _do_setlen_ret
17f30     2D 00 64 FD | 	ret
17f34                 | 
17f34                 | ' 
17f34                 | ' ' ------------------ setpan
17f34                 | ' 
17f34                 | ' sub do_setpan
17f34                 | _do_setpan
17f34     02 4A 05 F6 | 	mov	COUNT_, #2
17f38     A8 00 A0 FD | 	call	#pushregs_
17f3c     18 F0 07 F1 | 	add	ptra, #24
17f40     9C 49 BF FD | 	call	#_pop
17f44     FD 12 02 F6 | 	mov	arg01, result1
17f48     FE 26 02 F6 | 	mov	local01, result2
17f4c     FF 28 02 F6 | 	mov	local02, result3
17f50     A7 12 62 FC | 	wrlong	arg01, fp
17f54     04 4E 05 F1 | 	add	fp, #4
17f58     A7 26 62 FC | 	wrlong	local01, fp
17f5c     04 4E 05 F1 | 	add	fp, #4
17f60     A7 28 62 FC | 	wrlong	local02, fp
17f64     08 4E 85 F1 | 	sub	fp, #8
17f68     74 49 BF FD | 	call	#_pop
17f6c     FD 28 02 F6 | 	mov	local02, result1
17f70     0C 4E 05 F1 | 	add	fp, #12
17f74     A7 28 62 FC | 	wrlong	local02, fp
17f78     04 4E 05 F1 | 	add	fp, #4
17f7c     A7 FC 61 FC | 	wrlong	result2, fp
17f80     04 4E 05 F1 | 	add	fp, #4
17f84     A7 FE 61 FC | 	wrlong	result3, fp
17f88     08 4E 85 F1 | 	sub	fp, #8
17f8c     A7 12 02 F6 | 	mov	arg01, fp
17f90     0C 4E 85 F1 | 	sub	fp, #12
17f94     2C 4B BF FD | 	call	#_converttoint
17f98     FD 28 02 F6 | 	mov	local02, result1
17f9c     14 27 02 F6 | 	mov	local01, local02
17fa0     01 26 66 F0 | 	shl	local01, #1
17fa4     14 27 02 F1 | 	add	local01, local02
17fa8     03 26 66 F0 | 	shl	local01, #3
17fac     14 00 00 FF 
17fb0     38 E5 05 F1 | 	add	objptr, ##10552
17fb4     F2 26 02 F1 | 	add	local01, objptr
17fb8     A7 12 02 F6 | 	mov	arg01, fp
17fbc     14 00 00 FF 
17fc0     38 E5 85 F1 | 	sub	objptr, ##10552
17fc4     B8 4B BF FD | 	call	#_converttofloat
17fc8     10 26 06 F1 | 	add	local01, #16
17fcc     13 FB 61 FC | 	wrlong	result1, local01
17fd0     A7 F0 03 F6 | 	mov	ptra, fp
17fd4     B2 00 A0 FD | 	call	#popregs_
17fd8                 | _do_setpan_ret
17fd8     2D 00 64 FD | 	ret
17fdc                 | 
17fdc                 | ' 
17fdc                 | ' ' ------------------ setsustain
17fdc                 | ' 
17fdc                 | ' sub do_setsustain
17fdc                 | _do_setsustain
17fdc     02 4A 05 F6 | 	mov	COUNT_, #2
17fe0     A8 00 A0 FD | 	call	#pushregs_
17fe4     18 F0 07 F1 | 	add	ptra, #24
17fe8     F4 48 BF FD | 	call	#_pop
17fec     FD 12 02 F6 | 	mov	arg01, result1
17ff0     FE 26 02 F6 | 	mov	local01, result2
17ff4     FF 28 02 F6 | 	mov	local02, result3
17ff8     A7 12 62 FC | 	wrlong	arg01, fp
17ffc     04 4E 05 F1 | 	add	fp, #4
18000     A7 26 62 FC | 	wrlong	local01, fp
18004     04 4E 05 F1 | 	add	fp, #4
18008     A7 28 62 FC | 	wrlong	local02, fp
1800c     08 4E 85 F1 | 	sub	fp, #8
18010     CC 48 BF FD | 	call	#_pop
18014     FD 28 02 F6 | 	mov	local02, result1
18018     0C 4E 05 F1 | 	add	fp, #12
1801c     A7 28 62 FC | 	wrlong	local02, fp
18020     04 4E 05 F1 | 	add	fp, #4
18024     A7 FC 61 FC | 	wrlong	result2, fp
18028     04 4E 05 F1 | 	add	fp, #4
1802c     A7 FE 61 FC | 	wrlong	result3, fp
18030     08 4E 85 F1 | 	sub	fp, #8
18034     A7 12 02 F6 | 	mov	arg01, fp
18038     0C 4E 85 F1 | 	sub	fp, #12
1803c     84 4A BF FD | 	call	#_converttoint
18040     FD 28 02 F6 | 	mov	local02, result1
18044     14 27 02 F6 | 	mov	local01, local02
18048     01 26 66 F0 | 	shl	local01, #1
1804c     14 27 02 F1 | 	add	local01, local02
18050     03 26 66 F0 | 	shl	local01, #3
18054     14 00 00 FF 
18058     38 E5 05 F1 | 	add	objptr, ##10552
1805c     F2 26 02 F1 | 	add	local01, objptr
18060     A7 12 02 F6 | 	mov	arg01, fp
18064     14 00 00 FF 
18068     38 E5 85 F1 | 	sub	objptr, ##10552
1806c     54 4A BF FD | 	call	#_converttoint
18070     14 26 06 F1 | 	add	local01, #20
18074     13 FB 51 FC | 	wrword	result1, local01
18078     A7 F0 03 F6 | 	mov	ptra, fp
1807c     B2 00 A0 FD | 	call	#popregs_
18080                 | _do_setsustain_ret
18080     2D 00 64 FD | 	ret
18084                 | 
18084                 | ' 
18084                 | ' ' ------------------ setvol
18084                 | ' 
18084                 | ' sub do_setvol
18084                 | _do_setvol
18084     02 4A 05 F6 | 	mov	COUNT_, #2
18088     A8 00 A0 FD | 	call	#pushregs_
1808c     18 F0 07 F1 | 	add	ptra, #24
18090     4C 48 BF FD | 	call	#_pop
18094     FD 12 02 F6 | 	mov	arg01, result1
18098     FE 26 02 F6 | 	mov	local01, result2
1809c     FF 28 02 F6 | 	mov	local02, result3
180a0     A7 12 62 FC | 	wrlong	arg01, fp
180a4     04 4E 05 F1 | 	add	fp, #4
180a8     A7 26 62 FC | 	wrlong	local01, fp
180ac     04 4E 05 F1 | 	add	fp, #4
180b0     A7 28 62 FC | 	wrlong	local02, fp
180b4     08 4E 85 F1 | 	sub	fp, #8
180b8     24 48 BF FD | 	call	#_pop
180bc     FD 28 02 F6 | 	mov	local02, result1
180c0     0C 4E 05 F1 | 	add	fp, #12
180c4     A7 28 62 FC | 	wrlong	local02, fp
180c8     04 4E 05 F1 | 	add	fp, #4
180cc     A7 FC 61 FC | 	wrlong	result2, fp
180d0     04 4E 05 F1 | 	add	fp, #4
180d4     A7 FE 61 FC | 	wrlong	result3, fp
180d8     08 4E 85 F1 | 	sub	fp, #8
180dc     A7 12 02 F6 | 	mov	arg01, fp
180e0     0C 4E 85 F1 | 	sub	fp, #12
180e4     DC 49 BF FD | 	call	#_converttoint
180e8     FD 28 02 F6 | 	mov	local02, result1
180ec     14 27 02 F6 | 	mov	local01, local02
180f0     01 26 66 F0 | 	shl	local01, #1
180f4     14 27 02 F1 | 	add	local01, local02
180f8     03 26 66 F0 | 	shl	local01, #3
180fc     14 00 00 FF 
18100     38 E5 05 F1 | 	add	objptr, ##10552
18104     F2 26 02 F1 | 	add	local01, objptr
18108     A7 12 02 F6 | 	mov	arg01, fp
1810c     14 00 00 FF 
18110     38 E5 85 F1 | 	sub	objptr, ##10552
18114     68 4A BF FD | 	call	#_converttofloat
18118     0C 26 06 F1 | 	add	local01, #12
1811c     13 FB 61 FC | 	wrlong	result1, local01
18120     A7 F0 03 F6 | 	mov	ptra, fp
18124     B2 00 A0 FD | 	call	#popregs_
18128                 | _do_setvol_ret
18128     2D 00 64 FD | 	ret
1812c                 | 
1812c                 | ' 
1812c                 | ' ' ------------------ setwave
1812c                 | ' 
1812c                 | ' sub do_setwave
1812c                 | _do_setwave
1812c     02 4A 05 F6 | 	mov	COUNT_, #2
18130     A8 00 A0 FD | 	call	#pushregs_
18134     18 F0 07 F1 | 	add	ptra, #24
18138     A4 47 BF FD | 	call	#_pop
1813c     FD 12 02 F6 | 	mov	arg01, result1
18140     FE 26 02 F6 | 	mov	local01, result2
18144     FF 28 02 F6 | 	mov	local02, result3
18148     A7 12 62 FC | 	wrlong	arg01, fp
1814c     04 4E 05 F1 | 	add	fp, #4
18150     A7 26 62 FC | 	wrlong	local01, fp
18154     04 4E 05 F1 | 	add	fp, #4
18158     A7 28 62 FC | 	wrlong	local02, fp
1815c     08 4E 85 F1 | 	sub	fp, #8
18160     7C 47 BF FD | 	call	#_pop
18164     FD 28 02 F6 | 	mov	local02, result1
18168     0C 4E 05 F1 | 	add	fp, #12
1816c     A7 28 62 FC | 	wrlong	local02, fp
18170     04 4E 05 F1 | 	add	fp, #4
18174     A7 FC 61 FC | 	wrlong	result2, fp
18178     04 4E 05 F1 | 	add	fp, #4
1817c     A7 FE 61 FC | 	wrlong	result3, fp
18180     08 4E 85 F1 | 	sub	fp, #8
18184     A7 12 02 F6 | 	mov	arg01, fp
18188     0C 4E 85 F1 | 	sub	fp, #12
1818c     34 49 BF FD | 	call	#_converttoint
18190     FD 28 02 F6 | 	mov	local02, result1
18194     14 27 02 F6 | 	mov	local01, local02
18198     01 26 66 F0 | 	shl	local01, #1
1819c     14 27 02 F1 | 	add	local01, local02
181a0     03 26 66 F0 | 	shl	local01, #3
181a4     14 00 00 FF 
181a8     38 E5 05 F1 | 	add	objptr, ##10552
181ac     F2 26 02 F1 | 	add	local01, objptr
181b0     A7 12 02 F6 | 	mov	arg01, fp
181b4     14 00 00 FF 
181b8     38 E5 85 F1 | 	sub	objptr, ##10552
181bc     04 49 BF FD | 	call	#_converttoint
181c0     04 26 06 F1 | 	add	local01, #4
181c4     13 FB 41 FC | 	wrbyte	result1, local01
181c8     A7 F0 03 F6 | 	mov	ptra, fp
181cc     B2 00 A0 FD | 	call	#popregs_
181d0                 | _do_setwave_ret
181d0     2D 00 64 FD | 	ret
181d4                 | 
181d4                 | ' 
181d4                 | ' ' ------------------ shutup
181d4                 | ' 
181d4                 | ' sub do_shutup
181d4                 | _do_shutup
181d4     03 4A 05 F6 | 	mov	COUNT_, #3
181d8     A8 00 A0 FD | 	call	#pushregs_
181dc     18 F0 07 F1 | 	add	ptra, #24
181e0     4A 00 00 FF 
181e4     80 E4 05 F1 | 	add	objptr, ##38016
181e8     F2 26 02 FB | 	rdlong	local01, objptr
181ec     13 29 02 F6 | 	mov	local02, local01
181f0     01 28 66 F0 | 	shl	local02, #1
181f4     13 29 02 F1 | 	add	local02, local01
181f8     02 28 66 F0 | 	shl	local02, #2
181fc     03 00 00 FF 
18200     04 E4 85 F1 | 	sub	objptr, ##1540
18204     F2 28 02 F1 | 	add	local02, objptr
18208     14 2B 0A FB | 	rdlong	local03, local02 wz
1820c     14 4E 05 F1 | 	add	fp, #20
18210     A7 2A 62 FC | 	wrlong	local03, fp
18214                 | ' 
18214                 | ' numpar=compiledline(lineptr_e).result.uresult
18214                 | ' if numpar=0 then
18214     14 4E 85 F1 | 	sub	fp, #20
18218     47 00 00 FF 
1821c     7C E4 85 F1 | 	sub	objptr, ##36476
18220     50 00 90 5D |  if_ne	jmp	#LR__1952
18224                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
18224     10 4E 05 F1 | 	add	fp, #16
18228     A7 00 68 FC | 	wrlong	#0, fp
1822c     37 00 00 FF 
18230     10 E4 05 F1 | 	add	objptr, ##28176
18234     97 16 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
18238                 | LR__1950
18238     F2 12 02 FB | 	rdlong	arg01, objptr
1823c     A7 2A 02 FB | 	rdlong	local03, fp
18240     06 2A 66 F0 | 	shl	local03, #6
18244     15 13 02 F1 | 	add	arg01, local03
18248     14 12 06 F1 | 	add	arg01, #20
1824c     09 01 58 FC | 	wrword	#0, arg01
18250     A7 2A 02 FB | 	rdlong	local03, fp
18254     01 2A 06 F1 | 	add	local03, #1
18258     A7 2A 62 FC | 	wrlong	local03, fp
1825c     08 2A 56 F2 | 	cmps	local03, #8 wc
18260     D4 FF 9F CD |  if_b	jmp	#LR__1950
18264                 | LR__1951
18264     37 00 00 FF 
18268     10 E4 85 F1 | 	sub	objptr, ##28176
1826c     10 4E 85 F1 | 	sub	fp, #16
18270     64 00 90 FD | 	jmp	#LR__1953
18274                 | LR__1952
18274     68 46 BF FD | 	call	#_pop
18278     FF 26 02 F6 | 	mov	local01, result3
1827c     A7 FA 61 FC | 	wrlong	result1, fp
18280     04 4E 05 F1 | 	add	fp, #4
18284     A7 FC 61 FC | 	wrlong	result2, fp
18288     04 4E 05 F1 | 	add	fp, #4
1828c     A7 26 62 FC | 	wrlong	local01, fp
18290     08 4E 85 F1 | 	sub	fp, #8
18294     A7 12 02 F6 | 	mov	arg01, fp
18298     28 48 BF FD | 	call	#_converttoint
1829c     FD 2A 52 F6 | 	abs	local03, result1 wc
182a0     07 2A 06 F5 | 	and	local03, #7
182a4     15 29 82 F6 | 	negc	local02, local03
182a8     0C 4E 05 F1 | 	add	fp, #12
182ac     A7 28 62 FC | 	wrlong	local02, fp
182b0     37 00 00 FF 
182b4     10 E4 05 F1 | 	add	objptr, ##28176
182b8     F2 12 02 FB | 	rdlong	arg01, objptr
182bc     37 00 00 FF 
182c0     10 E4 85 F1 | 	sub	objptr, ##28176
182c4     0C 4E 85 F1 | 	sub	fp, #12
182c8     06 28 66 F0 | 	shl	local02, #6
182cc     14 13 02 F1 | 	add	arg01, local02
182d0     14 12 06 F1 | 	add	arg01, #20
182d4     09 01 58 FC | 	wrword	#0, arg01
182d8                 | LR__1953
182d8     A7 F0 03 F6 | 	mov	ptra, fp
182dc     B2 00 A0 FD | 	call	#popregs_
182e0                 | _do_shutup_ret
182e0     2D 00 64 FD | 	ret
182e4                 | 
182e4                 | ' 
182e4                 | ' ' ------------------ sin
182e4                 | ' 
182e4                 | ' sub do_sin
182e4                 | _do_sin
182e4     01 4A 05 F6 | 	mov	COUNT_, #1
182e8     A8 00 A0 FD | 	call	#pushregs_
182ec     10 F0 07 F1 | 	add	ptra, #16
182f0     4A 00 00 FF 
182f4     80 E4 05 F1 | 	add	objptr, ##38016
182f8     F2 26 02 FB | 	rdlong	local01, objptr
182fc     13 17 02 F6 | 	mov	arg03, local01
18300     01 16 66 F0 | 	shl	arg03, #1
18304     13 17 02 F1 | 	add	arg03, local01
18308     02 16 66 F0 | 	shl	arg03, #2
1830c     03 00 00 FF 
18310     04 E4 85 F1 | 	sub	objptr, ##1540
18314     F2 16 02 F1 | 	add	arg03, objptr
18318     0B 17 02 FB | 	rdlong	arg03, arg03
1831c     0C 4E 05 F1 | 	add	fp, #12
18320     A7 16 62 FC | 	wrlong	arg03, fp
18324                 | ' 
18324                 | ' numpar=compiledline(lineptr_e).result.uresult
18324                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
18324     0C 4E 85 F1 | 	sub	fp, #12
18328     02 16 16 F2 | 	cmp	arg03, #2 wc
1832c     47 00 00 FF 
18330     7C E4 85 F1 | 	sub	objptr, ##36476
18334     0C 4E 05 C1 |  if_b	add	fp, #12
18338     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1833c     0C 4E 85 C1 |  if_b	sub	fp, #12
18340     40 00 90 4D |  if_c_and_nz	jmp	#LR__1960
18344     00 12 06 F6 | 	mov	arg01, #0
18348     70 09 B1 FD | 	call	#__system___getiolock_0558
1834c     FD 12 02 F6 | 	mov	arg01, result1
18350     40 AC B0 FD | 	call	#__system___lockmem
18354     9A 01 00 FF 
18358     2B 15 06 F6 | 	mov	arg02, ##@LR__5705
1835c     00 12 06 F6 | 	mov	arg01, #0
18360     00 16 06 F6 | 	mov	arg03, #0
18364     20 B9 B0 FD | 	call	#__system___basic_print_string
18368     00 12 06 F6 | 	mov	arg01, #0
1836c     4C 09 B1 FD | 	call	#__system___getiolock_0558
18370     FD 00 68 FC | 	wrlong	#0, result1
18374     27 12 06 F6 | 	mov	arg01, #39
18378     00 14 06 F6 | 	mov	arg02, #0
1837c     84 72 B0 FD | 	call	#_printerror
18380     64 00 90 FD | 	jmp	#LR__1961
18384                 | LR__1960
18384     58 45 BF FD | 	call	#_pop
18388     A7 FA 61 FC | 	wrlong	result1, fp
1838c     04 4E 05 F1 | 	add	fp, #4
18390     A7 FC 61 FC | 	wrlong	result2, fp
18394     04 4E 05 F1 | 	add	fp, #4
18398     A7 FE 61 FC | 	wrlong	result3, fp
1839c     08 4E 85 F1 | 	sub	fp, #8
183a0     51 00 00 FF 
183a4     BC E5 05 F1 | 	add	objptr, ##41916
183a8     F2 26 02 FB | 	rdlong	local01, objptr
183ac     51 00 00 FF 
183b0     BC E5 85 F1 | 	sub	objptr, ##41916
183b4     A7 12 02 F6 | 	mov	arg01, fp
183b8     C4 47 BF FD | 	call	#_converttofloat
183bc     FD 14 02 F6 | 	mov	arg02, result1
183c0     13 13 02 F6 | 	mov	arg01, local01
183c4     44 DA B0 FD | 	call	#__system___float_mul
183c8     FD 12 02 F6 | 	mov	arg01, result1
183cc     9C E3 B0 FD | 	call	#__system____builtin_sinf
183d0     A7 FA 61 FC | 	wrlong	result1, fp
183d4     08 4E 05 F1 | 	add	fp, #8
183d8     A7 3C 68 FC | 	wrlong	#30, fp
183dc     08 4E 85 F1 | 	sub	fp, #8
183e0     A7 12 02 F6 | 	mov	arg01, fp
183e4     90 45 BF FD | 	call	#_push
183e8                 | LR__1961
183e8     A7 F0 03 F6 | 	mov	ptra, fp
183ec     B2 00 A0 FD | 	call	#popregs_
183f0                 | _do_sin_ret
183f0     2D 00 64 FD | 	ret
183f4                 | 
183f4                 | ' 
183f4                 | ' ' ------------------ skip
183f4                 | ' ' A helper token for on-gosub: skips the rest of gosubs
183f4                 | ' 
183f4                 | ' sub do_skip
183f4                 | _do_skip
183f4     4A 00 00 FF 
183f8     80 E4 05 F1 | 	add	objptr, ##38016
183fc     F2 00 02 FB | 	rdlong	_var01, objptr
18400     00 03 02 F6 | 	mov	_var02, _var01
18404     01 02 66 F0 | 	shl	_var02, #1
18408     00 03 02 F1 | 	add	_var02, _var01
1840c     02 02 66 F0 | 	shl	_var02, #2
18410     03 00 00 FF 
18414     04 E4 85 F1 | 	sub	objptr, ##1540
18418     F2 02 02 F1 | 	add	_var02, objptr
1841c     01 03 02 FB | 	rdlong	_var02, _var02
18420     01 02 86 F1 | 	sub	_var02, #1
18424     03 00 00 FF 
18428     04 E4 05 F1 | 	add	objptr, ##1540
1842c     F2 02 62 FC | 	wrlong	_var02, objptr
18430     4A 00 00 FF 
18434     80 E4 85 F1 | 	sub	objptr, ##38016
18438                 | _do_skip_ret
18438     2D 00 64 FD | 	ret
1843c                 | 
1843c                 | ' 
1843c                 | ' ' ------------------ sprite
1843c                 | ' 
1843c                 | ' sub do_sprite
1843c                 | _do_sprite
1843c     00 4A 05 F6 | 	mov	COUNT_, #0
18440     A8 00 A0 FD | 	call	#pushregs_
18444     30 F0 07 F1 | 	add	ptra, #48
18448     94 44 BF FD | 	call	#_pop
1844c     FD 16 02 F6 | 	mov	arg03, result1
18450     FE 14 02 F6 | 	mov	arg02, result2
18454     FF 12 02 F6 | 	mov	arg01, result3
18458     18 4E 05 F1 | 	add	fp, #24
1845c     A7 16 62 FC | 	wrlong	arg03, fp
18460     04 4E 05 F1 | 	add	fp, #4
18464     A7 14 62 FC | 	wrlong	arg02, fp
18468     04 4E 05 F1 | 	add	fp, #4
1846c     A7 12 62 FC | 	wrlong	arg01, fp
18470     20 4E 85 F1 | 	sub	fp, #32
18474     68 44 BF FD | 	call	#_pop
18478     FD 16 02 F6 | 	mov	arg03, result1
1847c     FE 14 02 F6 | 	mov	arg02, result2
18480     FF 12 02 F6 | 	mov	arg01, result3
18484     0C 4E 05 F1 | 	add	fp, #12
18488     A7 16 62 FC | 	wrlong	arg03, fp
1848c     04 4E 05 F1 | 	add	fp, #4
18490     A7 14 62 FC | 	wrlong	arg02, fp
18494     04 4E 05 F1 | 	add	fp, #4
18498     A7 12 62 FC | 	wrlong	arg01, fp
1849c     14 4E 85 F1 | 	sub	fp, #20
184a0     3C 44 BF FD | 	call	#_pop
184a4     FF 16 02 F6 | 	mov	arg03, result3
184a8     A7 FA 61 FC | 	wrlong	result1, fp
184ac     04 4E 05 F1 | 	add	fp, #4
184b0     A7 FC 61 FC | 	wrlong	result2, fp
184b4     04 4E 05 F1 | 	add	fp, #4
184b8     A7 16 62 FC | 	wrlong	arg03, fp
184bc     08 4E 85 F1 | 	sub	fp, #8
184c0     A7 12 02 F6 | 	mov	arg01, fp
184c4     FC 45 BF FD | 	call	#_converttoint
184c8     24 4E 05 F1 | 	add	fp, #36
184cc     A7 FA 61 FC | 	wrlong	result1, fp
184d0     18 4E 85 F1 | 	sub	fp, #24
184d4     A7 12 02 F6 | 	mov	arg01, fp
184d8     0C 4E 85 F1 | 	sub	fp, #12
184dc     E4 45 BF FD | 	call	#_converttoint
184e0     28 4E 05 F1 | 	add	fp, #40
184e4     A7 FA 61 FC | 	wrlong	result1, fp
184e8     10 4E 85 F1 | 	sub	fp, #16
184ec     A7 12 02 F6 | 	mov	arg01, fp
184f0     18 4E 85 F1 | 	sub	fp, #24
184f4     CC 45 BF FD | 	call	#_converttoint
184f8     2C 4E 05 F1 | 	add	fp, #44
184fc     A7 FA 61 FC | 	wrlong	result1, fp
18500     08 4E 85 F1 | 	sub	fp, #8
18504     A7 12 02 FB | 	rdlong	arg01, fp
18508     04 4E 05 F1 | 	add	fp, #4
1850c     A7 14 02 FB | 	rdlong	arg02, fp
18510     FD 16 02 F6 | 	mov	arg03, result1
18514     28 4E 85 F1 | 	sub	fp, #40
18518     B4 80 B0 FD | 	call	#_hg010b_spin2_setspritepos
1851c     A7 F0 03 F6 | 	mov	ptra, fp
18520     B2 00 A0 FD | 	call	#popregs_
18524                 | _do_sprite_ret
18524     2D 00 64 FD | 	ret
18528                 | 
18528                 | ' 
18528                 | ' ' ------------------ sqr
18528                 | ' 
18528                 | ' sub do_sqr
18528                 | _do_sqr
18528     01 4A 05 F6 | 	mov	COUNT_, #1
1852c     A8 00 A0 FD | 	call	#pushregs_
18530     10 F0 07 F1 | 	add	ptra, #16
18534     4A 00 00 FF 
18538     80 E4 05 F1 | 	add	objptr, ##38016
1853c     F2 26 02 FB | 	rdlong	local01, objptr
18540     13 17 02 F6 | 	mov	arg03, local01
18544     01 16 66 F0 | 	shl	arg03, #1
18548     13 17 02 F1 | 	add	arg03, local01
1854c     02 16 66 F0 | 	shl	arg03, #2
18550     03 00 00 FF 
18554     04 E4 85 F1 | 	sub	objptr, ##1540
18558     F2 16 02 F1 | 	add	arg03, objptr
1855c     0B 17 02 FB | 	rdlong	arg03, arg03
18560     0C 4E 05 F1 | 	add	fp, #12
18564     A7 16 62 FC | 	wrlong	arg03, fp
18568                 | ' 
18568                 | ' numpar=compiledline(lineptr_e).result.uresult
18568                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
18568     0C 4E 85 F1 | 	sub	fp, #12
1856c     02 16 16 F2 | 	cmp	arg03, #2 wc
18570     47 00 00 FF 
18574     7C E4 85 F1 | 	sub	objptr, ##36476
18578     0C 4E 05 C1 |  if_b	add	fp, #12
1857c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
18580     0C 4E 85 C1 |  if_b	sub	fp, #12
18584     40 00 90 4D |  if_c_and_nz	jmp	#LR__1970
18588     00 12 06 F6 | 	mov	arg01, #0
1858c     2C 07 B1 FD | 	call	#__system___getiolock_0558
18590     FD 12 02 F6 | 	mov	arg01, result1
18594     FC A9 B0 FD | 	call	#__system___lockmem
18598     9A 01 00 FF 
1859c     31 15 06 F6 | 	mov	arg02, ##@LR__5706
185a0     00 12 06 F6 | 	mov	arg01, #0
185a4     00 16 06 F6 | 	mov	arg03, #0
185a8     DC B6 B0 FD | 	call	#__system___basic_print_string
185ac     00 12 06 F6 | 	mov	arg01, #0
185b0     08 07 B1 FD | 	call	#__system___getiolock_0558
185b4     FD 00 68 FC | 	wrlong	#0, result1
185b8     27 12 06 F6 | 	mov	arg01, #39
185bc     00 14 06 F6 | 	mov	arg02, #0
185c0     40 70 B0 FD | 	call	#_printerror
185c4     48 00 90 FD | 	jmp	#LR__1971
185c8                 | LR__1970
185c8     14 43 BF FD | 	call	#_pop
185cc     FF 26 02 F6 | 	mov	local01, result3
185d0     A7 FA 61 FC | 	wrlong	result1, fp
185d4     04 4E 05 F1 | 	add	fp, #4
185d8     A7 FC 61 FC | 	wrlong	result2, fp
185dc     04 4E 05 F1 | 	add	fp, #4
185e0     A7 26 62 FC | 	wrlong	local01, fp
185e4     08 4E 85 F1 | 	sub	fp, #8
185e8     A7 12 02 F6 | 	mov	arg01, fp
185ec     90 45 BF FD | 	call	#_converttofloat
185f0     FD 12 02 F6 | 	mov	arg01, result1
185f4     3C D7 B0 FD | 	call	#__system___float_sqrt
185f8     A7 FA 61 FC | 	wrlong	result1, fp
185fc     08 4E 05 F1 | 	add	fp, #8
18600     A7 3C 68 FC | 	wrlong	#30, fp
18604     08 4E 85 F1 | 	sub	fp, #8
18608     A7 12 02 F6 | 	mov	arg01, fp
1860c     68 43 BF FD | 	call	#_push
18610                 | LR__1971
18610     A7 F0 03 F6 | 	mov	ptra, fp
18614     B2 00 A0 FD | 	call	#popregs_
18618                 | _do_sqr_ret
18618     2D 00 64 FD | 	ret
1861c                 | 
1861c                 | ' 
1861c                 | ' ' ------------------ stick
1861c                 | ' 
1861c                 | ' sub do_stick
1861c                 | _do_stick
1861c     01 4A 05 F6 | 	mov	COUNT_, #1
18620     A8 00 A0 FD | 	call	#pushregs_
18624     10 F0 07 F1 | 	add	ptra, #16
18628     4A 00 00 FF 
1862c     80 E4 05 F1 | 	add	objptr, ##38016
18630     F2 26 02 FB | 	rdlong	local01, objptr
18634     13 17 02 F6 | 	mov	arg03, local01
18638     01 16 66 F0 | 	shl	arg03, #1
1863c     13 17 02 F1 | 	add	arg03, local01
18640     02 16 66 F0 | 	shl	arg03, #2
18644     03 00 00 FF 
18648     04 E4 85 F1 | 	sub	objptr, ##1540
1864c     F2 16 02 F1 | 	add	arg03, objptr
18650     0B 17 02 FB | 	rdlong	arg03, arg03
18654     0C 4E 05 F1 | 	add	fp, #12
18658     A7 16 62 FC | 	wrlong	arg03, fp
1865c                 | ' 
1865c                 | ' numpar=compiledline(lineptr_e).result.uresult
1865c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1865c     0C 4E 85 F1 | 	sub	fp, #12
18660     02 16 16 F2 | 	cmp	arg03, #2 wc
18664     47 00 00 FF 
18668     7C E4 85 F1 | 	sub	objptr, ##36476
1866c     40 00 90 CD |  if_b	jmp	#LR__1980
18670     00 12 06 F6 | 	mov	arg01, #0
18674     44 06 B1 FD | 	call	#__system___getiolock_0558
18678     FD 12 02 F6 | 	mov	arg01, result1
1867c     14 A9 B0 FD | 	call	#__system___lockmem
18680     9A 01 00 FF 
18684     37 15 06 F6 | 	mov	arg02, ##@LR__5707
18688     00 12 06 F6 | 	mov	arg01, #0
1868c     00 16 06 F6 | 	mov	arg03, #0
18690     F4 B5 B0 FD | 	call	#__system___basic_print_string
18694     00 12 06 F6 | 	mov	arg01, #0
18698     20 06 B1 FD | 	call	#__system___getiolock_0558
1869c     FD 00 68 FC | 	wrlong	#0, result1
186a0     27 12 06 F6 | 	mov	arg01, #39
186a4     00 14 06 F6 | 	mov	arg02, #0
186a8     58 6F B0 FD | 	call	#_printerror
186ac     F0 00 90 FD | 	jmp	#LR__1984
186b0                 | LR__1980
186b0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
186b0     0C 4E 05 F1 | 	add	fp, #12
186b4     A7 FE 09 FB | 	rdlong	result3, fp wz
186b8     0C 4E 85 F1 | 	sub	fp, #12
186bc     30 00 90 5D |  if_ne	jmp	#LR__1981
186c0     51 00 00 FF 
186c4     30 E5 05 F1 | 	add	objptr, ##41776
186c8     F2 26 02 FB | 	rdlong	local01, objptr
186cc     51 00 00 FF 
186d0     30 E5 85 F1 | 	sub	objptr, ##41776
186d4     A7 26 62 FC | 	wrlong	local01, fp
186d8     08 4E 05 F1 | 	add	fp, #8
186dc     A7 3A 68 FC | 	wrlong	#29, fp
186e0     08 4E 85 F1 | 	sub	fp, #8
186e4     A7 12 02 F6 | 	mov	arg01, fp
186e8     8C 42 BF FD | 	call	#_push
186ec     B0 00 90 FD | 	jmp	#LR__1984
186f0                 | LR__1981
186f0     EC 41 BF FD | 	call	#_pop
186f4     A7 FA 61 FC | 	wrlong	result1, fp
186f8     04 4E 05 F1 | 	add	fp, #4
186fc     A7 FC 61 FC | 	wrlong	result2, fp
18700     04 4E 05 F1 | 	add	fp, #4
18704     A7 FE 61 FC | 	wrlong	result3, fp
18708                 | ' t1=pop()
18708                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
18708     08 4E 85 F1 | 	sub	fp, #8
1870c     1C FE 0D F2 | 	cmp	result3, #28 wz
18710     08 4E 05 51 |  if_ne	add	fp, #8
18714     A7 26 02 5B |  if_ne	rdlong	local01, fp
18718     08 4E 85 51 |  if_ne	sub	fp, #8
1871c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
18720     70 00 90 5D |  if_ne	jmp	#LR__1983
18724     A7 26 02 FB | 	rdlong	local01, fp
18728     52 00 00 FF 
1872c     18 E4 05 F1 | 	add	objptr, ##42008
18730     F2 26 62 FC | 	wrlong	local01, objptr
18734                 | '   q=t1.result.uresult
18734                 | '   if q<7 then 
18734     52 00 00 FF 
18738     18 E4 85 F1 | 	sub	objptr, ##42008
1873c     07 26 56 F2 | 	cmps	local01, #7 wc
18740     40 00 90 3D |  if_ae	jmp	#LR__1982
18744     52 00 00 FF 
18748     18 E4 05 F1 | 	add	objptr, ##42008
1874c     F2 26 02 FB | 	rdlong	local01, objptr
18750     02 26 66 F0 | 	shl	local01, #2
18754     E8 E4 85 F1 | 	sub	objptr, #232
18758     F2 26 02 F1 | 	add	local01, objptr
1875c     13 27 02 FB | 	rdlong	local01, local01
18760     A7 26 62 FC | 	wrlong	local01, fp
18764     08 4E 05 F1 | 	add	fp, #8
18768     A7 3A 68 FC | 	wrlong	#29, fp
1876c     08 4E 85 F1 | 	sub	fp, #8
18770     A7 12 02 F6 | 	mov	arg01, fp
18774     51 00 00 FF 
18778     30 E5 85 F1 | 	sub	objptr, ##41776
1877c     F8 41 BF FD | 	call	#_push
18780                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
18780     1C 00 90 FD | 	jmp	#LR__1984
18784                 | LR__1982
18784     29 12 06 F6 | 	mov	arg01, #41
18788     00 14 06 F6 | 	mov	arg02, #0
1878c     74 6E B0 FD | 	call	#_printerror
18790                 | '      printerror(41) : return
18790     0C 00 90 FD | 	jmp	#LR__1984
18794                 | LR__1983
18794     29 12 06 F6 | 	mov	arg01, #41
18798     00 14 06 F6 | 	mov	arg02, #0
1879c     64 6E B0 FD | 	call	#_printerror
187a0                 | LR__1984
187a0     A7 F0 03 F6 | 	mov	ptra, fp
187a4     B2 00 A0 FD | 	call	#popregs_
187a8                 | _do_stick_ret
187a8     2D 00 64 FD | 	ret
187ac                 | 
187ac                 | ' 
187ac                 | ' ' ------------------ strig
187ac                 | ' 
187ac                 | ' sub do_strig
187ac                 | _do_strig
187ac     01 4A 05 F6 | 	mov	COUNT_, #1
187b0     A8 00 A0 FD | 	call	#pushregs_
187b4     10 F0 07 F1 | 	add	ptra, #16
187b8     4A 00 00 FF 
187bc     80 E4 05 F1 | 	add	objptr, ##38016
187c0     F2 26 02 FB | 	rdlong	local01, objptr
187c4     13 17 02 F6 | 	mov	arg03, local01
187c8     01 16 66 F0 | 	shl	arg03, #1
187cc     13 17 02 F1 | 	add	arg03, local01
187d0     02 16 66 F0 | 	shl	arg03, #2
187d4     03 00 00 FF 
187d8     04 E4 85 F1 | 	sub	objptr, ##1540
187dc     F2 16 02 F1 | 	add	arg03, objptr
187e0     0B 17 02 FB | 	rdlong	arg03, arg03
187e4     0C 4E 05 F1 | 	add	fp, #12
187e8     A7 16 62 FC | 	wrlong	arg03, fp
187ec                 | ' 
187ec                 | ' numpar=compiledline(lineptr_e).result.uresult
187ec                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
187ec     0C 4E 85 F1 | 	sub	fp, #12
187f0     02 16 16 F2 | 	cmp	arg03, #2 wc
187f4     47 00 00 FF 
187f8     7C E4 85 F1 | 	sub	objptr, ##36476
187fc     40 00 90 CD |  if_b	jmp	#LR__1990
18800     00 12 06 F6 | 	mov	arg01, #0
18804     B4 04 B1 FD | 	call	#__system___getiolock_0558
18808     FD 12 02 F6 | 	mov	arg01, result1
1880c     84 A7 B0 FD | 	call	#__system___lockmem
18810     9A 01 00 FF 
18814     3F 15 06 F6 | 	mov	arg02, ##@LR__5708
18818     00 12 06 F6 | 	mov	arg01, #0
1881c     00 16 06 F6 | 	mov	arg03, #0
18820     64 B4 B0 FD | 	call	#__system___basic_print_string
18824     00 12 06 F6 | 	mov	arg01, #0
18828     90 04 B1 FD | 	call	#__system___getiolock_0558
1882c     FD 00 68 FC | 	wrlong	#0, result1
18830     27 12 06 F6 | 	mov	arg01, #39
18834     00 14 06 F6 | 	mov	arg02, #0
18838     C8 6D B0 FD | 	call	#_printerror
1883c     F0 00 90 FD | 	jmp	#LR__1994
18840                 | LR__1990
18840                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
18840     0C 4E 05 F1 | 	add	fp, #12
18844     A7 FE 09 FB | 	rdlong	result3, fp wz
18848     0C 4E 85 F1 | 	sub	fp, #12
1884c     30 00 90 5D |  if_ne	jmp	#LR__1991
18850     51 00 00 FF 
18854     4C E5 05 F1 | 	add	objptr, ##41804
18858     F2 26 02 FB | 	rdlong	local01, objptr
1885c     51 00 00 FF 
18860     4C E5 85 F1 | 	sub	objptr, ##41804
18864     A7 26 62 FC | 	wrlong	local01, fp
18868     08 4E 05 F1 | 	add	fp, #8
1886c     A7 3A 68 FC | 	wrlong	#29, fp
18870     08 4E 85 F1 | 	sub	fp, #8
18874     A7 12 02 F6 | 	mov	arg01, fp
18878     FC 40 BF FD | 	call	#_push
1887c     B0 00 90 FD | 	jmp	#LR__1994
18880                 | LR__1991
18880     5C 40 BF FD | 	call	#_pop
18884     A7 FA 61 FC | 	wrlong	result1, fp
18888     04 4E 05 F1 | 	add	fp, #4
1888c     A7 FC 61 FC | 	wrlong	result2, fp
18890     04 4E 05 F1 | 	add	fp, #4
18894     A7 FE 61 FC | 	wrlong	result3, fp
18898                 | ' t1=pop()
18898                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
18898     08 4E 85 F1 | 	sub	fp, #8
1889c     1C FE 0D F2 | 	cmp	result3, #28 wz
188a0     08 4E 05 51 |  if_ne	add	fp, #8
188a4     A7 26 02 5B |  if_ne	rdlong	local01, fp
188a8     08 4E 85 51 |  if_ne	sub	fp, #8
188ac     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
188b0     70 00 90 5D |  if_ne	jmp	#LR__1993
188b4     A7 26 02 FB | 	rdlong	local01, fp
188b8     52 00 00 FF 
188bc     18 E4 05 F1 | 	add	objptr, ##42008
188c0     F2 26 62 FC | 	wrlong	local01, objptr
188c4                 | '   q=t1.result.uresult
188c4                 | '   if q<7 then 
188c4     52 00 00 FF 
188c8     18 E4 85 F1 | 	sub	objptr, ##42008
188cc     07 26 56 F2 | 	cmps	local01, #7 wc
188d0     40 00 90 3D |  if_ae	jmp	#LR__1992
188d4     52 00 00 FF 
188d8     18 E4 05 F1 | 	add	objptr, ##42008
188dc     F2 26 02 FB | 	rdlong	local01, objptr
188e0     02 26 66 F0 | 	shl	local01, #2
188e4     CC E4 85 F1 | 	sub	objptr, #204
188e8     F2 26 02 F1 | 	add	local01, objptr
188ec     13 27 02 FB | 	rdlong	local01, local01
188f0     A7 26 62 FC | 	wrlong	local01, fp
188f4     08 4E 05 F1 | 	add	fp, #8
188f8     A7 3A 68 FC | 	wrlong	#29, fp
188fc     08 4E 85 F1 | 	sub	fp, #8
18900     A7 12 02 F6 | 	mov	arg01, fp
18904     51 00 00 FF 
18908     4C E5 85 F1 | 	sub	objptr, ##41804
1890c     68 40 BF FD | 	call	#_push
18910                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
18910     1C 00 90 FD | 	jmp	#LR__1994
18914                 | LR__1992
18914     29 12 06 F6 | 	mov	arg01, #41
18918     00 14 06 F6 | 	mov	arg02, #0
1891c     E4 6C B0 FD | 	call	#_printerror
18920                 | '      printerror(41) : return
18920     0C 00 90 FD | 	jmp	#LR__1994
18924                 | LR__1993
18924     29 12 06 F6 | 	mov	arg01, #41
18928     00 14 06 F6 | 	mov	arg02, #0
1892c     D4 6C B0 FD | 	call	#_printerror
18930                 | LR__1994
18930     A7 F0 03 F6 | 	mov	ptra, fp
18934     B2 00 A0 FD | 	call	#popregs_
18938                 | _do_strig_ret
18938     2D 00 64 FD | 	ret
1893c                 | 
1893c                 | ' 
1893c                 | ' ' ------------------ tan
1893c                 | ' 
1893c                 | ' sub do_tan
1893c                 | _do_tan
1893c     01 4A 05 F6 | 	mov	COUNT_, #1
18940     A8 00 A0 FD | 	call	#pushregs_
18944     10 F0 07 F1 | 	add	ptra, #16
18948     4A 00 00 FF 
1894c     80 E4 05 F1 | 	add	objptr, ##38016
18950     F2 26 02 FB | 	rdlong	local01, objptr
18954     13 17 02 F6 | 	mov	arg03, local01
18958     01 16 66 F0 | 	shl	arg03, #1
1895c     13 17 02 F1 | 	add	arg03, local01
18960     02 16 66 F0 | 	shl	arg03, #2
18964     03 00 00 FF 
18968     04 E4 85 F1 | 	sub	objptr, ##1540
1896c     F2 16 02 F1 | 	add	arg03, objptr
18970     0B 17 02 FB | 	rdlong	arg03, arg03
18974     0C 4E 05 F1 | 	add	fp, #12
18978     A7 16 62 FC | 	wrlong	arg03, fp
1897c                 | ' 
1897c                 | ' numpar=compiledline(lineptr_e).result.uresult
1897c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1897c     0C 4E 85 F1 | 	sub	fp, #12
18980     02 16 16 F2 | 	cmp	arg03, #2 wc
18984     47 00 00 FF 
18988     7C E4 85 F1 | 	sub	objptr, ##36476
1898c     0C 4E 05 C1 |  if_b	add	fp, #12
18990     A7 26 0A CB |  if_b	rdlong	local01, fp wz
18994     0C 4E 85 C1 |  if_b	sub	fp, #12
18998     40 00 90 4D |  if_c_and_nz	jmp	#LR__2000
1899c     00 12 06 F6 | 	mov	arg01, #0
189a0     18 03 B1 FD | 	call	#__system___getiolock_0558
189a4     FD 12 02 F6 | 	mov	arg01, result1
189a8     E8 A5 B0 FD | 	call	#__system___lockmem
189ac     9A 01 00 FF 
189b0     47 15 06 F6 | 	mov	arg02, ##@LR__5709
189b4     00 12 06 F6 | 	mov	arg01, #0
189b8     00 16 06 F6 | 	mov	arg03, #0
189bc     C8 B2 B0 FD | 	call	#__system___basic_print_string
189c0     00 12 06 F6 | 	mov	arg01, #0
189c4     F4 02 B1 FD | 	call	#__system___getiolock_0558
189c8     FD 00 68 FC | 	wrlong	#0, result1
189cc     27 12 06 F6 | 	mov	arg01, #39
189d0     00 14 06 F6 | 	mov	arg02, #0
189d4     2C 6C B0 FD | 	call	#_printerror
189d8     64 00 90 FD | 	jmp	#LR__2001
189dc                 | LR__2000
189dc     00 3F BF FD | 	call	#_pop
189e0     A7 FA 61 FC | 	wrlong	result1, fp
189e4     04 4E 05 F1 | 	add	fp, #4
189e8     A7 FC 61 FC | 	wrlong	result2, fp
189ec     04 4E 05 F1 | 	add	fp, #4
189f0     A7 FE 61 FC | 	wrlong	result3, fp
189f4     08 4E 85 F1 | 	sub	fp, #8
189f8     51 00 00 FF 
189fc     BC E5 05 F1 | 	add	objptr, ##41916
18a00     F2 26 02 FB | 	rdlong	local01, objptr
18a04     51 00 00 FF 
18a08     BC E5 85 F1 | 	sub	objptr, ##41916
18a0c     A7 12 02 F6 | 	mov	arg01, fp
18a10     6C 41 BF FD | 	call	#_converttofloat
18a14     FD 14 02 F6 | 	mov	arg02, result1
18a18     13 13 02 F6 | 	mov	arg01, local01
18a1c     EC D3 B0 FD | 	call	#__system___float_mul
18a20     FD 12 02 F6 | 	mov	arg01, result1
18a24     90 DE B0 FD | 	call	#__system____builtin_tanf
18a28     A7 FA 61 FC | 	wrlong	result1, fp
18a2c     08 4E 05 F1 | 	add	fp, #8
18a30     A7 3C 68 FC | 	wrlong	#30, fp
18a34     08 4E 85 F1 | 	sub	fp, #8
18a38     A7 12 02 F6 | 	mov	arg01, fp
18a3c     38 3F BF FD | 	call	#_push
18a40                 | LR__2001
18a40     A7 F0 03 F6 | 	mov	ptra, fp
18a44     B2 00 A0 FD | 	call	#popregs_
18a48                 | _do_tan_ret
18a48     2D 00 64 FD | 	ret
18a4c                 | 
18a4c                 | ' 
18a4c                 | ' ' ------------------ val
18a4c                 | ' 
18a4c                 | ' sub do_val
18a4c                 | _do_val
18a4c     03 4A 05 F6 | 	mov	COUNT_, #3
18a50     A8 00 A0 FD | 	call	#pushregs_
18a54     20 F0 07 F1 | 	add	ptra, #32
18a58     4A 00 00 FF 
18a5c     80 E4 05 F1 | 	add	objptr, ##38016
18a60     F2 16 02 FB | 	rdlong	arg03, objptr
18a64     0B 27 02 F6 | 	mov	local01, arg03
18a68     01 26 66 F0 | 	shl	local01, #1
18a6c     0B 27 02 F1 | 	add	local01, arg03
18a70     02 26 66 F0 | 	shl	local01, #2
18a74     03 00 00 FF 
18a78     04 E4 85 F1 | 	sub	objptr, ##1540
18a7c     F2 26 02 F1 | 	add	local01, objptr
18a80     13 17 02 FB | 	rdlong	arg03, local01
18a84     0C 4E 05 F1 | 	add	fp, #12
18a88     A7 16 62 FC | 	wrlong	arg03, fp
18a8c                 | ' 
18a8c                 | ' numpar=compiledline(lineptr_e).result.uresult
18a8c                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
18a8c     0C 4E 85 F1 | 	sub	fp, #12
18a90     02 16 16 F2 | 	cmp	arg03, #2 wc
18a94     47 00 00 FF 
18a98     7C E4 85 F1 | 	sub	objptr, ##36476
18a9c     0C 4E 05 C1 |  if_b	add	fp, #12
18aa0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
18aa4     0C 4E 85 C1 |  if_b	sub	fp, #12
18aa8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2010
18aac     00 12 06 F6 | 	mov	arg01, #0
18ab0     08 02 B1 FD | 	call	#__system___getiolock_0558
18ab4     FD 12 02 F6 | 	mov	arg01, result1
18ab8     D8 A4 B0 FD | 	call	#__system___lockmem
18abc     9A 01 00 FF 
18ac0     4D 15 06 F6 | 	mov	arg02, ##@LR__5710
18ac4     00 12 06 F6 | 	mov	arg01, #0
18ac8     00 16 06 F6 | 	mov	arg03, #0
18acc     B8 B1 B0 FD | 	call	#__system___basic_print_string
18ad0     00 12 06 F6 | 	mov	arg01, #0
18ad4     E4 01 B1 FD | 	call	#__system___getiolock_0558
18ad8     FD 00 68 FC | 	wrlong	#0, result1
18adc     27 12 06 F6 | 	mov	arg01, #39
18ae0     00 14 06 F6 | 	mov	arg02, #0
18ae4     1C 6B B0 FD | 	call	#_printerror
18ae8     60 02 90 FD | 	jmp	#LR__2023
18aec                 | LR__2010
18aec     F0 3D BF FD | 	call	#_pop
18af0     FF 16 02 F6 | 	mov	arg03, result3
18af4     A7 FA 61 FC | 	wrlong	result1, fp
18af8     04 4E 05 F1 | 	add	fp, #4
18afc     A7 FC 61 FC | 	wrlong	result2, fp
18b00     04 4E 05 F1 | 	add	fp, #4
18b04     A7 16 62 FC | 	wrlong	arg03, fp
18b08                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
18b08     08 4E 85 F1 | 	sub	fp, #8
18b0c     2B 16 0E F2 | 	cmp	arg03, #43 wz
18b10     18 00 90 5D |  if_ne	jmp	#LR__2011
18b14     A7 12 02 FB | 	rdlong	arg01, fp
18b18     3C 3F BF FD | 	call	#_convertstring
18b1c     A7 FA 61 FC | 	wrlong	result1, fp
18b20     08 4E 05 F1 | 	add	fp, #8
18b24     A7 3E 68 FC | 	wrlong	#31, fp
18b28     08 4E 85 F1 | 	sub	fp, #8
18b2c                 | LR__2011
18b2c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
18b2c     08 4E 05 F1 | 	add	fp, #8
18b30     A7 16 02 FB | 	rdlong	arg03, fp
18b34     08 4E 85 F1 | 	sub	fp, #8
18b38     1F 16 0E F2 | 	cmp	arg03, #31 wz
18b3c     40 00 90 AD |  if_e	jmp	#LR__2012
18b40     00 12 06 F6 | 	mov	arg01, #0
18b44     74 01 B1 FD | 	call	#__system___getiolock_0558
18b48     FD 12 02 F6 | 	mov	arg01, result1
18b4c     44 A4 B0 FD | 	call	#__system___lockmem
18b50     9A 01 00 FF 
18b54     53 15 06 F6 | 	mov	arg02, ##@LR__5711
18b58     00 12 06 F6 | 	mov	arg01, #0
18b5c     00 16 06 F6 | 	mov	arg03, #0
18b60     24 B1 B0 FD | 	call	#__system___basic_print_string
18b64     00 12 06 F6 | 	mov	arg01, #0
18b68     50 01 B1 FD | 	call	#__system___getiolock_0558
18b6c     FD 00 68 FC | 	wrlong	#0, result1
18b70     0F 12 06 F6 | 	mov	arg01, #15
18b74     00 14 06 F6 | 	mov	arg02, #0
18b78     88 6A B0 FD | 	call	#_printerror
18b7c     CC 01 90 FD | 	jmp	#LR__2023
18b80                 | LR__2012
18b80                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
18b80     A7 12 02 FB | 	rdlong	arg01, fp
18b84     01 14 06 F6 | 	mov	arg02, #1
18b88     84 C4 B0 FD | 	call	#__system__Left_S
18b8c     FD 12 02 F6 | 	mov	arg01, result1
18b90     9A 01 00 FF 
18b94     59 15 06 F6 | 	mov	arg02, ##@LR__5712
18b98     20 A4 B0 FD | 	call	#__system___string_cmp
18b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
18ba0     48 00 90 5D |  if_ne	jmp	#LR__2015
18ba4     9A 01 00 FF 
18ba8     5B 27 06 F6 | 	mov	local01, ##@LR__5713
18bac     A7 16 02 FB | 	rdlong	arg03, fp
18bb0     0B 13 02 F6 | 	mov	arg01, arg03
18bb4     09 29 02 F6 | 	mov	local02, arg01
18bb8     97 06 48 FB | 	callpa	#(@LR__2014-@LR__2013)>>2,fcache_load_ptr_
18bbc                 | LR__2013
18bbc     14 FB C9 FA | 	rdbyte	result1, local02 wz
18bc0     01 28 06 51 |  if_ne	add	local02, #1
18bc4     F4 FF 9F 5D |  if_ne	jmp	#LR__2013
18bc8                 | LR__2014
18bc8     09 29 82 F1 | 	sub	local02, arg01
18bcc     14 15 02 F6 | 	mov	arg02, local02
18bd0     01 14 86 F1 | 	sub	arg02, #1
18bd4     0B 13 02 F6 | 	mov	arg01, arg03
18bd8     BC C4 B0 FD | 	call	#__system__Right_S
18bdc     FD 14 02 F6 | 	mov	arg02, result1
18be0     13 13 02 F6 | 	mov	arg01, local01
18be4     08 A4 B0 FD | 	call	#__system___string_concat
18be8     A7 FA 61 FC | 	wrlong	result1, fp
18bec                 | LR__2015
18bec                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
18bec     A7 12 02 FB | 	rdlong	arg01, fp
18bf0     01 14 06 F6 | 	mov	arg02, #1
18bf4     18 C4 B0 FD | 	call	#__system__Left_S
18bf8     FD 12 02 F6 | 	mov	arg01, result1
18bfc     9A 01 00 FF 
18c00     5E 15 06 F6 | 	mov	arg02, ##@LR__5714
18c04     B4 A3 B0 FD | 	call	#__system___string_cmp
18c08     00 FA 0D F2 | 	cmp	result1, #0 wz
18c0c     48 00 90 5D |  if_ne	jmp	#LR__2018
18c10     9A 01 00 FF 
18c14     60 27 06 F6 | 	mov	local01, ##@LR__5715
18c18     A7 16 02 FB | 	rdlong	arg03, fp
18c1c     0B 13 02 F6 | 	mov	arg01, arg03
18c20     09 29 02 F6 | 	mov	local02, arg01
18c24     97 06 48 FB | 	callpa	#(@LR__2017-@LR__2016)>>2,fcache_load_ptr_
18c28                 | LR__2016
18c28     14 FB C9 FA | 	rdbyte	result1, local02 wz
18c2c     01 28 06 51 |  if_ne	add	local02, #1
18c30     F4 FF 9F 5D |  if_ne	jmp	#LR__2016
18c34                 | LR__2017
18c34     09 29 82 F1 | 	sub	local02, arg01
18c38     14 15 02 F6 | 	mov	arg02, local02
18c3c     01 14 86 F1 | 	sub	arg02, #1
18c40     0B 13 02 F6 | 	mov	arg01, arg03
18c44     50 C4 B0 FD | 	call	#__system__Right_S
18c48     FD 14 02 F6 | 	mov	arg02, result1
18c4c     13 13 02 F6 | 	mov	arg01, local01
18c50     9C A3 B0 FD | 	call	#__system___string_concat
18c54     A7 FA 61 FC | 	wrlong	result1, fp
18c58                 | LR__2018
18c58     A7 12 02 FB | 	rdlong	arg01, fp
18c5c     B8 D9 B0 FD | 	call	#__system____builtin_atof
18c60     1C 4E 05 F1 | 	add	fp, #28
18c64     A7 FA 61 FC | 	wrlong	result1, fp
18c68     1C 4E 85 F1 | 	sub	fp, #28
18c6c     A7 12 02 FB | 	rdlong	arg01, fp
18c70     00 14 06 F6 | 	mov	arg02, #0
18c74     0C D8 B0 FD | 	call	#__system____builtin_atoi
18c78     18 4E 05 F1 | 	add	fp, #24
18c7c     A7 FA 61 FC | 	wrlong	result1, fp
18c80                 | ' fval=val(t1.result.sresult)
18c80                 | ' ival=val%(t1.result.sresult)
18c80                 | ' if fval=ival then
18c80     04 4E 05 F1 | 	add	fp, #4
18c84     A7 26 02 FB | 	rdlong	local01, fp
18c88     1C 4E 85 F1 | 	sub	fp, #28
18c8c     FD 12 52 F6 | 	abs	arg01, result1 wc
18c90     1F 2A C6 C9 |  if_b	decod	local03, #31
18c94     00 2A 06 36 |  if_ae	mov	local03, #0
18c98     6C CD B0 FD | 	call	#__system___float_fromuns
18c9c     15 FB 61 F5 | 	xor	result1, local03
18ca0     FD 14 02 F6 | 	mov	arg02, result1
18ca4     13 13 02 F6 | 	mov	arg01, local01
18ca8     01 16 06 F6 | 	mov	arg03, #1
18cac     90 D5 B0 FD | 	call	#__system___float_cmp
18cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
18cb4     20 00 90 5D |  if_ne	jmp	#LR__2019
18cb8     18 4E 05 F1 | 	add	fp, #24
18cbc     A7 26 02 FB | 	rdlong	local01, fp
18cc0     18 4E 85 F1 | 	sub	fp, #24
18cc4     A7 26 62 FC | 	wrlong	local01, fp
18cc8     08 4E 05 F1 | 	add	fp, #8
18ccc     A7 38 68 FC | 	wrlong	#28, fp
18cd0     08 4E 85 F1 | 	sub	fp, #8
18cd4     6C 00 90 FD | 	jmp	#LR__2022
18cd8                 | LR__2019
18cd8                 | '   if fval=0 andalso ival<>0 then
18cd8     1C 4E 05 F1 | 	add	fp, #28
18cdc     A7 12 02 FB | 	rdlong	arg01, fp
18ce0     1C 4E 85 F1 | 	sub	fp, #28
18ce4     00 14 06 F6 | 	mov	arg02, #0
18ce8     01 16 06 F6 | 	mov	arg03, #1
18cec     50 D5 B0 FD | 	call	#__system___float_cmp
18cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
18cf4     30 00 90 5D |  if_ne	jmp	#LR__2020
18cf8     18 4E 05 F1 | 	add	fp, #24
18cfc     A7 26 0A FB | 	rdlong	local01, fp wz
18d00     18 4E 85 F1 | 	sub	fp, #24
18d04     20 00 90 AD |  if_e	jmp	#LR__2020
18d08     18 4E 05 F1 | 	add	fp, #24
18d0c     A7 26 02 FB | 	rdlong	local01, fp
18d10     18 4E 85 F1 | 	sub	fp, #24
18d14     A7 26 62 FC | 	wrlong	local01, fp
18d18     08 4E 05 F1 | 	add	fp, #8
18d1c     A7 38 68 FC | 	wrlong	#28, fp
18d20     08 4E 85 F1 | 	sub	fp, #8
18d24     1C 00 90 FD | 	jmp	#LR__2021
18d28                 | LR__2020
18d28     1C 4E 05 F1 | 	add	fp, #28
18d2c     A7 26 02 FB | 	rdlong	local01, fp
18d30     1C 4E 85 F1 | 	sub	fp, #28
18d34     A7 26 62 FC | 	wrlong	local01, fp
18d38     08 4E 05 F1 | 	add	fp, #8
18d3c     A7 3C 68 FC | 	wrlong	#30, fp
18d40     08 4E 85 F1 | 	sub	fp, #8
18d44                 | LR__2021
18d44                 | LR__2022
18d44     A7 12 02 F6 | 	mov	arg01, fp
18d48     2C 3C BF FD | 	call	#_push
18d4c                 | LR__2023
18d4c     A7 F0 03 F6 | 	mov	ptra, fp
18d50     B2 00 A0 FD | 	call	#popregs_
18d54                 | _do_val_ret
18d54     2D 00 64 FD | 	ret
18d58                 | 
18d58                 | ' 
18d58                 | ' ' ------------------ waitclock
18d58                 | ' 
18d58                 | ' sub do_waitclock
18d58                 | _do_waitclock
18d58     51 00 00 FF 
18d5c     A8 E5 05 F1 | 	add	objptr, ##41896
18d60     F2 00 02 FB | 	rdlong	_var01, objptr
18d64                 | ' c=hkcnt
18d64                 | ' do: loop until hkcnt<>c
18d64                 | LR__2030
18d64     F2 02 02 FB | 	rdlong	_var02, objptr
18d68     00 03 0A F2 | 	cmp	_var02, _var01 wz
18d6c     F4 FF 9F AD |  if_e	jmp	#LR__2030
18d70     51 00 00 FF 
18d74     A8 E5 85 F1 | 	sub	objptr, ##41896
18d78                 | _do_waitclock_ret
18d78     2D 00 64 FD | 	ret
18d7c                 | 
18d7c                 | ' 
18d7c                 | ' ' ------------------ waitms
18d7c                 | ' 
18d7c                 | ' sub do_waitms
18d7c                 | _do_waitms
18d7c     01 4A 05 F6 | 	mov	COUNT_, #1
18d80     A8 00 A0 FD | 	call	#pushregs_
18d84     18 F0 07 F1 | 	add	ptra, #24
18d88     54 3B BF FD | 	call	#_pop
18d8c     A7 FA 61 FC | 	wrlong	result1, fp
18d90     04 4E 05 F1 | 	add	fp, #4
18d94     A7 FC 61 FC | 	wrlong	result2, fp
18d98     04 4E 05 F1 | 	add	fp, #4
18d9c     A7 FE 61 FC | 	wrlong	result3, fp
18da0     08 4E 85 F1 | 	sub	fp, #8
18da4     A7 12 02 F6 | 	mov	arg01, fp
18da8     18 3D BF FD | 	call	#_converttoint
18dac     0C 4E 05 F1 | 	add	fp, #12
18db0     A7 FA 61 FC | 	wrlong	result1, fp
18db4                 | ' 
18db4                 | ' t1=pop()  
18db4                 | ' t=converttoint(t1)
18db4                 | ' if t<0 then return
18db4     0C 4E 85 F1 | 	sub	fp, #12
18db8     00 FA 55 F2 | 	cmps	result1, #0 wc
18dbc     E4 00 90 CD |  if_b	jmp	#LR__2046
18dc0                 | ' if t < 1000 then 
18dc0     0C 4E 05 F1 | 	add	fp, #12
18dc4     A7 12 02 FB | 	rdlong	arg01, fp
18dc8     0C 4E 85 F1 | 	sub	fp, #12
18dcc     01 00 00 FF 
18dd0     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
18dd4     14 00 90 3D |  if_ae	jmp	#LR__2040
18dd8     0C 4E 05 F1 | 	add	fp, #12
18ddc     A7 12 02 FB | 	rdlong	arg01, fp
18de0     0C 4E 85 F1 | 	sub	fp, #12
18de4     A0 A4 B0 FD | 	call	#__system___waitms
18de8     B8 00 90 FD | 	jmp	#LR__2045
18dec                 | LR__2040
18dec     10 4E 05 F1 | 	add	fp, #16
18df0     A7 02 68 FC | 	wrlong	#1, fp
18df4     04 4E 85 F1 | 	sub	fp, #4
18df8     A7 12 02 FB | 	rdlong	arg01, fp
18dfc     09 13 52 F6 | 	abs	arg01, arg01 wc
18e00     01 00 00 FF 
18e04     E8 13 16 FD | 	qdiv	arg01, ##1000
18e08                 | '   for i=1 to t/1000
18e08     0C 4E 85 F1 | 	sub	fp, #12
18e0c     18 26 62 FD | 	getqx	local01
18e10     13 27 82 F6 | 	negc	local01, local01
18e14     01 26 06 F1 | 	add	local01, #1
18e18                 | LR__2041
18e18     10 4E 05 F1 | 	add	fp, #16
18e1c     A7 12 02 FB | 	rdlong	arg01, fp
18e20     10 4E 85 F1 | 	sub	fp, #16
18e24     13 13 52 F2 | 	cmps	arg01, local01 wc
18e28     54 00 90 3D |  if_ae	jmp	#LR__2044
18e2c     01 00 00 FF 
18e30     E8 13 06 F6 | 	mov	arg01, ##1000
18e34     50 A4 B0 FD | 	call	#__system___waitms
18e38                 | '     waitms(1000)
18e38                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
18e38     E0 12 06 F6 | 	mov	arg01, #224
18e3c     A4 98 B0 FD | 	call	#_usbnew_spin2_keystate
18e40     00 FA 0D F2 | 	cmp	result1, #0 wz
18e44     10 00 90 5D |  if_ne	jmp	#LR__2042
18e48     E4 12 06 F6 | 	mov	arg01, #228
18e4c     94 98 B0 FD | 	call	#_usbnew_spin2_keystate
18e50     00 FA 0D F2 | 	cmp	result1, #0 wz
18e54     10 00 90 AD |  if_e	jmp	#LR__2043
18e58                 | LR__2042
18e58     06 12 06 F6 | 	mov	arg01, #6
18e5c     84 98 B0 FD | 	call	#_usbnew_spin2_keystate
18e60     00 FA 0D F2 | 	cmp	result1, #0 wz
18e64     3C 00 90 5D |  if_ne	jmp	#LR__2046
18e68                 | LR__2043
18e68     10 4E 05 F1 | 	add	fp, #16
18e6c     A7 12 02 FB | 	rdlong	arg01, fp
18e70     01 12 06 F1 | 	add	arg01, #1
18e74     A7 12 62 FC | 	wrlong	arg01, fp
18e78     10 4E 85 F1 | 	sub	fp, #16
18e7c     98 FF 9F FD | 	jmp	#LR__2041
18e80                 | LR__2044
18e80     0C 4E 05 F1 | 	add	fp, #12
18e84     A7 26 02 FB | 	rdlong	local01, fp
18e88     13 27 52 F6 | 	abs	local01, local01 wc
18e8c     01 00 00 FF 
18e90     E8 27 16 FD | 	qdiv	local01, ##1000
18e94     0C 4E 85 F1 | 	sub	fp, #12
18e98     19 26 62 FD | 	getqy	local01
18e9c     13 13 82 F6 | 	negc	arg01, local01
18ea0     E4 A3 B0 FD | 	call	#__system___waitms
18ea4                 | LR__2045
18ea4                 | LR__2046
18ea4     A7 F0 03 F6 | 	mov	ptra, fp
18ea8     B2 00 A0 FD | 	call	#popregs_
18eac                 | _do_waitms_ret
18eac     2D 00 64 FD | 	ret
18eb0                 | 
18eb0                 | ' 
18eb0                 | ' ' ------------------ waitvbl
18eb0                 | ' 
18eb0                 | ' sub do_waitvbl
18eb0                 | _do_waitvbl
18eb0     01 12 06 F6 | 	mov	arg01, #1
18eb4     30 84 B0 FD | 	call	#_hg010b_spin2_waitvbl
18eb8                 | _do_waitvbl_ret
18eb8     2D 00 64 FD | 	ret
18ebc                 | 
18ebc                 | ' 
18ebc                 | ' ' ------------------ wrpin
18ebc                 | ' 
18ebc                 | ' sub do_wrpin
18ebc                 | _do_wrpin
18ebc     01 4A 05 F6 | 	mov	COUNT_, #1
18ec0     A8 00 A0 FD | 	call	#pushregs_
18ec4     18 F0 07 F1 | 	add	ptra, #24
18ec8     14 3A BF FD | 	call	#_pop
18ecc     FD 14 02 F6 | 	mov	arg02, result1
18ed0     FE 12 02 F6 | 	mov	arg01, result2
18ed4     FF 26 02 F6 | 	mov	local01, result3
18ed8     A7 14 62 FC | 	wrlong	arg02, fp
18edc     04 4E 05 F1 | 	add	fp, #4
18ee0     A7 12 62 FC | 	wrlong	arg01, fp
18ee4     04 4E 05 F1 | 	add	fp, #4
18ee8     A7 26 62 FC | 	wrlong	local01, fp
18eec     08 4E 85 F1 | 	sub	fp, #8
18ef0     EC 39 BF FD | 	call	#_pop
18ef4     FF 26 02 F6 | 	mov	local01, result3
18ef8     0C 4E 05 F1 | 	add	fp, #12
18efc     A7 FA 61 FC | 	wrlong	result1, fp
18f00     04 4E 05 F1 | 	add	fp, #4
18f04     A7 FC 61 FC | 	wrlong	result2, fp
18f08     04 4E 05 F1 | 	add	fp, #4
18f0c     A7 26 62 FC | 	wrlong	local01, fp
18f10     08 4E 85 F1 | 	sub	fp, #8
18f14     A7 12 02 F6 | 	mov	arg01, fp
18f18     0C 4E 85 F1 | 	sub	fp, #12
18f1c     A4 3B BF FD | 	call	#_converttoint
18f20     FD 26 02 F6 | 	mov	local01, result1
18f24     A7 12 02 F6 | 	mov	arg01, fp
18f28     98 3B BF FD | 	call	#_converttoint
18f2c     13 FB 01 FC | 	wrpin	result1, local01
18f30     A7 F0 03 F6 | 	mov	ptra, fp
18f34     B2 00 A0 FD | 	call	#popregs_
18f38                 | _do_wrpin_ret
18f38     2D 00 64 FD | 	ret
18f3c                 | 
18f3c                 | ' 
18f3c                 | ' ' ------------------ wxpin
18f3c                 | ' 
18f3c                 | ' sub do_wxpin
18f3c                 | _do_wxpin
18f3c     01 4A 05 F6 | 	mov	COUNT_, #1
18f40     A8 00 A0 FD | 	call	#pushregs_
18f44     18 F0 07 F1 | 	add	ptra, #24
18f48     94 39 BF FD | 	call	#_pop
18f4c     FD 14 02 F6 | 	mov	arg02, result1
18f50     FE 12 02 F6 | 	mov	arg01, result2
18f54     FF 26 02 F6 | 	mov	local01, result3
18f58     A7 14 62 FC | 	wrlong	arg02, fp
18f5c     04 4E 05 F1 | 	add	fp, #4
18f60     A7 12 62 FC | 	wrlong	arg01, fp
18f64     04 4E 05 F1 | 	add	fp, #4
18f68     A7 26 62 FC | 	wrlong	local01, fp
18f6c     08 4E 85 F1 | 	sub	fp, #8
18f70     6C 39 BF FD | 	call	#_pop
18f74     FF 26 02 F6 | 	mov	local01, result3
18f78     0C 4E 05 F1 | 	add	fp, #12
18f7c     A7 FA 61 FC | 	wrlong	result1, fp
18f80     04 4E 05 F1 | 	add	fp, #4
18f84     A7 FC 61 FC | 	wrlong	result2, fp
18f88     04 4E 05 F1 | 	add	fp, #4
18f8c     A7 26 62 FC | 	wrlong	local01, fp
18f90     08 4E 85 F1 | 	sub	fp, #8
18f94     A7 12 02 F6 | 	mov	arg01, fp
18f98     0C 4E 85 F1 | 	sub	fp, #12
18f9c     24 3B BF FD | 	call	#_converttoint
18fa0     FD 26 02 F6 | 	mov	local01, result1
18fa4     A7 12 02 F6 | 	mov	arg01, fp
18fa8     18 3B BF FD | 	call	#_converttoint
18fac     13 FB 11 FC | 	wxpin	result1, local01
18fb0     A7 F0 03 F6 | 	mov	ptra, fp
18fb4     B2 00 A0 FD | 	call	#popregs_
18fb8                 | _do_wxpin_ret
18fb8     2D 00 64 FD | 	ret
18fbc                 | 
18fbc                 | ' 
18fbc                 | ' ' ------------------ wypin
18fbc                 | ' 
18fbc                 | ' sub do_wypin
18fbc                 | _do_wypin
18fbc     01 4A 05 F6 | 	mov	COUNT_, #1
18fc0     A8 00 A0 FD | 	call	#pushregs_
18fc4     18 F0 07 F1 | 	add	ptra, #24
18fc8     14 39 BF FD | 	call	#_pop
18fcc     FD 14 02 F6 | 	mov	arg02, result1
18fd0     FE 12 02 F6 | 	mov	arg01, result2
18fd4     FF 26 02 F6 | 	mov	local01, result3
18fd8     A7 14 62 FC | 	wrlong	arg02, fp
18fdc     04 4E 05 F1 | 	add	fp, #4
18fe0     A7 12 62 FC | 	wrlong	arg01, fp
18fe4     04 4E 05 F1 | 	add	fp, #4
18fe8     A7 26 62 FC | 	wrlong	local01, fp
18fec     08 4E 85 F1 | 	sub	fp, #8
18ff0     EC 38 BF FD | 	call	#_pop
18ff4     FF 26 02 F6 | 	mov	local01, result3
18ff8     0C 4E 05 F1 | 	add	fp, #12
18ffc     A7 FA 61 FC | 	wrlong	result1, fp
19000     04 4E 05 F1 | 	add	fp, #4
19004     A7 FC 61 FC | 	wrlong	result2, fp
19008     04 4E 05 F1 | 	add	fp, #4
1900c     A7 26 62 FC | 	wrlong	local01, fp
19010     08 4E 85 F1 | 	sub	fp, #8
19014     A7 12 02 F6 | 	mov	arg01, fp
19018     0C 4E 85 F1 | 	sub	fp, #12
1901c     A4 3A BF FD | 	call	#_converttoint
19020     FD 26 02 F6 | 	mov	local01, result1
19024     A7 12 02 F6 | 	mov	arg01, fp
19028     98 3A BF FD | 	call	#_converttoint
1902c     13 FB 21 FC | 	wypin	result1, local01
19030     A7 F0 03 F6 | 	mov	ptra, fp
19034     B2 00 A0 FD | 	call	#popregs_
19038                 | _do_wypin_ret
19038     2D 00 64 FD | 	ret
1903c                 | 
1903c                 | ' 
1903c                 | ' 
1903c                 | ' 
1903c                 | ' 
1903c                 | ' 
1903c                 | ' 
1903c                 | ' 
1903c                 | ' 
1903c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1903c                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1903c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1903c                 | ' 
1903c                 | ' 
1903c                 | ' '------------------ Assign
1903c                 | ' 
1903c                 | ' sub do_assign
1903c                 | _do_assign
1903c     05 4A 05 F6 | 	mov	COUNT_, #5
19040     A8 00 A0 FD | 	call	#pushregs_
19044     44 F0 07 F1 | 	add	ptra, #68
19048     4A 00 00 FF 
1904c     80 E4 05 F1 | 	add	objptr, ##38016
19050     F2 16 02 FB | 	rdlong	arg03, objptr
19054     0B 15 02 F6 | 	mov	arg02, arg03
19058     01 14 66 F0 | 	shl	arg02, #1
1905c     0B 15 02 F1 | 	add	arg02, arg03
19060     02 14 66 F0 | 	shl	arg02, #2
19064     03 00 00 FF 
19068     04 E4 85 F1 | 	sub	objptr, ##1540
1906c     F2 14 02 F1 | 	add	arg02, objptr
19070     0A 15 02 FB | 	rdlong	arg02, arg02
19074     18 4E 05 F1 | 	add	fp, #24
19078     A7 14 62 FC | 	wrlong	arg02, fp
1907c                 | ' 
1907c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1907c                 | ' if variables(varnum).vartype<array_no_type then 
1907c     18 4E 85 F1 | 	sub	fp, #24
19080     04 14 66 F0 | 	shl	arg02, #4
19084     32 00 00 FF 
19088     84 E4 85 F1 | 	sub	objptr, ##25732
1908c     F2 14 02 F1 | 	add	arg02, objptr
19090     0C 14 06 F1 | 	add	arg02, #12
19094     0A 17 02 FB | 	rdlong	arg03, arg02
19098     00 17 16 F2 | 	cmp	arg03, #256 wc
1909c     14 00 00 FF 
190a0     F8 E5 85 F1 | 	sub	objptr, ##10744
190a4     18 01 90 3D |  if_ae	jmp	#LR__2050
190a8     34 38 BF FD | 	call	#_pop
190ac     A7 FA 61 FC | 	wrlong	result1, fp
190b0     04 4E 05 F1 | 	add	fp, #4
190b4     A7 FC 61 FC | 	wrlong	result2, fp
190b8     04 4E 05 F1 | 	add	fp, #4
190bc     A7 FE 61 FC | 	wrlong	result3, fp
190c0     08 4E 85 F1 | 	sub	fp, #8
190c4     A7 16 02 FB | 	rdlong	arg03, fp
190c8     04 4E 05 F1 | 	add	fp, #4
190cc     A7 14 02 FB | 	rdlong	arg02, fp
190d0     14 4E 05 F1 | 	add	fp, #20
190d4     A7 12 02 FB | 	rdlong	arg01, fp
190d8     04 12 66 F0 | 	shl	arg01, #4
190dc     14 00 00 FF 
190e0     F8 E5 05 F1 | 	add	objptr, ##10744
190e4     F2 12 02 F1 | 	add	arg01, objptr
190e8     04 12 06 F1 | 	add	arg01, #4
190ec     09 17 62 FC | 	wrlong	arg03, arg01
190f0     A7 16 02 FB | 	rdlong	arg03, fp
190f4     04 16 66 F0 | 	shl	arg03, #4
190f8     F2 16 02 F1 | 	add	arg03, objptr
190fc     08 16 06 F1 | 	add	arg03, #8
19100     0B 15 62 FC | 	wrlong	arg02, arg03
19104     A7 16 02 FB | 	rdlong	arg03, fp
19108     04 16 66 F0 | 	shl	arg03, #4
1910c     F2 16 02 F1 | 	add	arg03, objptr
19110     10 4E 85 F1 | 	sub	fp, #16
19114     A7 14 02 FB | 	rdlong	arg02, fp
19118     0C 16 06 F1 | 	add	arg03, #12
1911c     0B 15 62 FC | 	wrlong	arg02, arg03
19120                 | '   t1=pop() 
19120                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
19120                 | '   if variables(varnum).vartype<>result_string2 then return
19120     10 4E 05 F1 | 	add	fp, #16
19124     A7 16 02 FB | 	rdlong	arg03, fp
19128     18 4E 85 F1 | 	sub	fp, #24
1912c     04 16 66 F0 | 	shl	arg03, #4
19130     F2 16 02 F1 | 	add	arg03, objptr
19134     0C 16 06 F1 | 	add	arg03, #12
19138     0B 17 02 FB | 	rdlong	arg03, arg03
1913c     2B 16 0E F2 | 	cmp	arg03, #43 wz
19140     14 00 00 FF 
19144     F8 E5 85 F1 | 	sub	objptr, ##10744
19148     EC 04 90 5D |  if_ne	jmp	#LR__2073
1914c     18 4E 05 F1 | 	add	fp, #24
19150     A7 16 02 FB | 	rdlong	arg03, fp
19154     0B 27 02 F6 | 	mov	local01, arg03
19158     04 26 66 F0 | 	shl	local01, #4
1915c     14 00 00 FF 
19160     F8 E5 05 F1 | 	add	objptr, ##10744
19164     F2 26 02 F1 | 	add	local01, objptr
19168     18 4E 85 F1 | 	sub	fp, #24
1916c     04 16 66 F0 | 	shl	arg03, #4
19170     F2 16 02 F1 | 	add	arg03, objptr
19174     04 16 06 F1 | 	add	arg03, #4
19178     0B 13 02 FB | 	rdlong	arg01, arg03
1917c     14 00 00 FF 
19180     F8 E5 85 F1 | 	sub	objptr, ##10744
19184     D0 38 BF FD | 	call	#_convertstring
19188     04 26 06 F1 | 	add	local01, #4
1918c     13 FB 61 FC | 	wrlong	result1, local01
19190     18 4E 05 F1 | 	add	fp, #24
19194     A7 26 02 FB | 	rdlong	local01, fp
19198     18 4E 85 F1 | 	sub	fp, #24
1919c     04 26 66 F0 | 	shl	local01, #4
191a0     14 00 00 FF 
191a4     F8 E5 05 F1 | 	add	objptr, ##10744
191a8     F2 26 02 F1 | 	add	local01, objptr
191ac     0C 26 06 F1 | 	add	local01, #12
191b0     13 3F 68 FC | 	wrlong	#31, local01
191b4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
191b4                 | '   variables(varnum).vartype=result_string
191b4                 | '   return
191b4     14 00 00 FF 
191b8     F8 E5 85 F1 | 	sub	objptr, ##10744
191bc     78 04 90 FD | 	jmp	#LR__2073
191c0                 | LR__2050
191c0                 | ' for i=0 to 2 : arrid(i)=0 : next i
191c0     1C 4E 05 F1 | 	add	fp, #28
191c4     A7 00 68 FC | 	wrlong	#0, fp
191c8     97 16 48 FB | 	callpa	#(@LR__2052-@LR__2051)>>2,fcache_load_ptr_
191cc                 | LR__2051
191cc     A7 26 02 FB | 	rdlong	local01, fp
191d0     02 26 66 F0 | 	shl	local01, #2
191d4     18 4E 05 F1 | 	add	fp, #24
191d8     A7 26 02 F1 | 	add	local01, fp
191dc     13 01 68 FC | 	wrlong	#0, local01
191e0     18 4E 85 F1 | 	sub	fp, #24
191e4     A7 26 02 FB | 	rdlong	local01, fp
191e8     01 26 06 F1 | 	add	local01, #1
191ec     A7 26 62 FC | 	wrlong	local01, fp
191f0     03 26 16 F2 | 	cmp	local01, #3 wc
191f4     D4 FF 9F CD |  if_b	jmp	#LR__2051
191f8                 | LR__2052
191f8     4A 00 00 FF 
191fc     80 E4 05 F1 | 	add	objptr, ##38016
19200     F2 16 02 FB | 	rdlong	arg03, objptr
19204     0B 27 02 F6 | 	mov	local01, arg03
19208     01 26 66 F0 | 	shl	local01, #1
1920c     0B 27 02 F1 | 	add	local01, arg03
19210     02 26 66 F0 | 	shl	local01, #2
19214     03 00 00 FF 
19218     04 E4 85 F1 | 	sub	objptr, ##1540
1921c     F2 26 02 F1 | 	add	local01, objptr
19220     04 26 06 F1 | 	add	local01, #4
19224     13 29 02 FB | 	rdlong	local02, local01
19228     04 4E 05 F1 | 	add	fp, #4
1922c     A7 28 62 FC | 	wrlong	local02, fp
19230     20 4E 85 F1 | 	sub	fp, #32
19234     47 00 00 FF 
19238     7C E4 85 F1 | 	sub	objptr, ##36476
1923c     A0 36 BF FD | 	call	#_pop
19240     A7 FA 61 FC | 	wrlong	result1, fp
19244     04 4E 05 F1 | 	add	fp, #4
19248     A7 FC 61 FC | 	wrlong	result2, fp
1924c     04 4E 05 F1 | 	add	fp, #4
19250     A7 FE 61 FC | 	wrlong	result3, fp
19254                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
19254                 | ' t1=pop() ' var value
19254                 | ' if numpar>0 then
19254     18 4E 05 F1 | 	add	fp, #24
19258     A7 2A 02 FB | 	rdlong	local03, fp
1925c     20 4E 85 F1 | 	sub	fp, #32
19260     01 2A 16 F2 | 	cmp	local03, #1 wc
19264     78 00 90 CD |  if_b	jmp	#LR__2055
19268                 | '   for i=numpar to 1 step -1
19268     20 4E 05 F1 | 	add	fp, #32
1926c     A7 2C 0A FB | 	rdlong	local04, fp wz
19270     04 4E 85 F1 | 	sub	fp, #4
19274     A7 2C 62 FC | 	wrlong	local04, fp
19278     1C 4E 85 F1 | 	sub	fp, #28
1927c     60 00 90 AD |  if_e	jmp	#LR__2054
19280                 | LR__2053
19280     5C 36 BF FD | 	call	#_pop
19284     0C 4E 05 F1 | 	add	fp, #12
19288     A7 FA 61 FC | 	wrlong	result1, fp
1928c     04 4E 05 F1 | 	add	fp, #4
19290     A7 FC 61 FC | 	wrlong	result2, fp
19294     04 4E 05 F1 | 	add	fp, #4
19298     A7 FE 61 FC | 	wrlong	result3, fp
1929c     08 4E 05 F1 | 	add	fp, #8
192a0     A7 2A 02 FB | 	rdlong	local03, fp
192a4     01 2A 86 F1 | 	sub	local03, #1
192a8     02 2A 66 F0 | 	shl	local03, #2
192ac     18 4E 05 F1 | 	add	fp, #24
192b0     A7 2A 02 F1 | 	add	local03, fp
192b4     28 4E 85 F1 | 	sub	fp, #40
192b8     A7 12 02 F6 | 	mov	arg01, fp
192bc     0C 4E 85 F1 | 	sub	fp, #12
192c0     00 38 BF FD | 	call	#_converttoint
192c4     15 FB 61 FC | 	wrlong	result1, local03
192c8     1C 4E 05 F1 | 	add	fp, #28
192cc     A7 2C 02 FB | 	rdlong	local04, fp
192d0     01 2C 8E F1 | 	sub	local04, #1 wz
192d4     A7 2C 62 FC | 	wrlong	local04, fp
192d8     1C 4E 85 F1 | 	sub	fp, #28
192dc     A0 FF 9F 5D |  if_ne	jmp	#LR__2053
192e0                 | LR__2054
192e0                 | LR__2055
192e0     18 4E 05 F1 | 	add	fp, #24
192e4     A7 26 02 FB | 	rdlong	local01, fp
192e8     04 26 66 F0 | 	shl	local01, #4
192ec     14 00 00 FF 
192f0     F8 E5 05 F1 | 	add	objptr, ##10744
192f4     F2 26 02 F1 | 	add	local01, objptr
192f8     04 26 06 F1 | 	add	local01, #4
192fc     13 13 02 FB | 	rdlong	arg01, local01
19300     0C 4E 05 F1 | 	add	fp, #12
19304     A7 12 62 FC | 	wrlong	arg01, fp
19308     24 4E 85 F1 | 	sub	fp, #36
1930c     14 00 00 FF 
19310     F8 E5 85 F1 | 	sub	objptr, ##10744
19314     A8 65 B0 FD | 	call	#_pslpeek
19318     FD 2C 32 F9 | 	getword	local04, result1, #0
1931c     28 4E 05 F1 | 	add	fp, #40
19320     A7 2C 62 FC | 	wrlong	local04, fp
19324     04 4E 85 F1 | 	sub	fp, #4
19328     A7 12 02 FB | 	rdlong	arg01, fp
1932c     24 4E 85 F1 | 	sub	fp, #36
19330     02 12 06 F1 | 	add	arg01, #2
19334     30 65 B0 FD | 	call	#_pspeek
19338     FD FA E1 F8 | 	getbyte	result1, result1, #0
1933c     2C 4E 05 F1 | 	add	fp, #44
19340     A7 FA 61 FC | 	wrlong	result1, fp
19344                 | ' esize=pspeek(arrptr+2)
19344                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
19344     08 4E 85 F1 | 	sub	fp, #8
19348     A7 12 02 FB | 	rdlong	arg01, fp
1934c     24 4E 85 F1 | 	sub	fp, #36
19350     04 12 06 F1 | 	add	arg01, #4
19354     68 65 B0 FD | 	call	#_pslpeek
19358     FD 2C 02 F6 | 	mov	local04, result1
1935c     34 4E 05 F1 | 	add	fp, #52
19360     A7 26 02 FB | 	rdlong	local01, fp
19364     34 4E 85 F1 | 	sub	fp, #52
19368     16 27 12 F2 | 	cmp	local01, local04 wc
1936c     54 00 90 3D |  if_ae	jmp	#LR__2056
19370     24 4E 05 F1 | 	add	fp, #36
19374     A7 12 02 FB | 	rdlong	arg01, fp
19378     24 4E 85 F1 | 	sub	fp, #36
1937c     08 12 06 F1 | 	add	arg01, #8
19380     3C 65 B0 FD | 	call	#_pslpeek
19384     FD 26 02 F6 | 	mov	local01, result1
19388     38 4E 05 F1 | 	add	fp, #56
1938c     A7 2C 02 FB | 	rdlong	local04, fp
19390     38 4E 85 F1 | 	sub	fp, #56
19394     13 2D 12 F2 | 	cmp	local04, local01 wc
19398     28 00 90 3D |  if_ae	jmp	#LR__2056
1939c     24 4E 05 F1 | 	add	fp, #36
193a0     A7 12 02 FB | 	rdlong	arg01, fp
193a4     24 4E 85 F1 | 	sub	fp, #36
193a8     0C 12 06 F1 | 	add	arg01, #12
193ac     10 65 B0 FD | 	call	#_pslpeek
193b0     3C 4E 05 F1 | 	add	fp, #60
193b4     A7 2C 02 FB | 	rdlong	local04, fp
193b8     3C 4E 85 F1 | 	sub	fp, #60
193bc     FD 2C 12 F2 | 	cmp	local04, result1 wc
193c0     10 00 90 CD |  if_b	jmp	#LR__2057
193c4                 | LR__2056
193c4     31 12 06 F6 | 	mov	arg01, #49
193c8     00 14 06 F6 | 	mov	arg02, #0
193cc     34 62 B0 FD | 	call	#_printerror
193d0     64 02 90 FD | 	jmp	#LR__2073
193d4                 | LR__2057
193d4     24 4E 05 F1 | 	add	fp, #36
193d8     A7 12 02 FB | 	rdlong	arg01, fp
193dc     09 2D 02 F6 | 	mov	local04, arg01
193e0     10 2C 06 F1 | 	add	local04, #16
193e4     24 4E 85 F1 | 	sub	fp, #36
193e8     04 12 06 F1 | 	add	arg01, #4
193ec     D0 64 B0 FD | 	call	#_pslpeek
193f0     FD 26 02 F6 | 	mov	local01, result1
193f4     38 4E 05 F1 | 	add	fp, #56
193f8     A7 28 02 FB | 	rdlong	local02, fp
193fc     14 27 02 FD | 	qmul	local01, local02
19400     04 4E 85 F1 | 	sub	fp, #4
19404     A7 2A 02 FB | 	rdlong	local03, fp
19408     10 4E 85 F1 | 	sub	fp, #16
1940c     A7 12 02 FB | 	rdlong	arg01, fp
19410     24 4E 85 F1 | 	sub	fp, #36
19414     08 12 06 F1 | 	add	arg01, #8
19418     18 28 62 FD | 	getqx	local02
1941c     14 2B 02 F1 | 	add	local03, local02
19420     9C 64 B0 FD | 	call	#_pslpeek
19424     FD 28 02 F6 | 	mov	local02, result1
19428     24 4E 05 F1 | 	add	fp, #36
1942c     A7 12 02 FB | 	rdlong	arg01, fp
19430     24 4E 85 F1 | 	sub	fp, #36
19434     04 12 06 F1 | 	add	arg01, #4
19438     84 64 B0 FD | 	call	#_pslpeek
1943c     FD 28 02 FD | 	qmul	local02, result1
19440     3C 4E 05 F1 | 	add	fp, #60
19444     A7 28 02 FB | 	rdlong	local02, fp
19448     18 26 62 FD | 	getqx	local01
1944c     14 27 02 FD | 	qmul	local01, local02
19450     10 4E 85 F1 | 	sub	fp, #16
19454     A7 28 02 FB | 	rdlong	local02, fp
19458     18 26 62 FD | 	getqx	local01
1945c     13 2B 02 F1 | 	add	local03, local01
19460     15 29 02 FD | 	qmul	local02, local03
19464     04 4E 05 F1 | 	add	fp, #4
19468                 | ' 
19468                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
19468                 | ' select case arrtype
19468     18 2A 62 FD | 	getqx	local03
1946c     15 2D 02 F1 | 	add	local04, local03
19470     A7 2C 62 FC | 	wrlong	local04, fp
19474     08 4E 85 F1 | 	sub	fp, #8
19478     A7 2E 02 FB | 	rdlong	local05, fp
1947c     28 4E 85 F1 | 	sub	fp, #40
19480     00 2F 86 F1 | 	sub	local05, #256
19484     0C 2E 26 F3 | 	fle	local05, #12
19488     30 2E 62 FD | 	jmprel	local05
1948c                 | LR__2058
1948c     30 00 90 FD | 	jmp	#LR__2059
19490     58 00 90 FD | 	jmp	#LR__2060
19494     6C 00 90 FD | 	jmp	#LR__2061
19498     80 00 90 FD | 	jmp	#LR__2062
1949c     B0 00 90 FD | 	jmp	#LR__2063
194a0     E0 00 90 FD | 	jmp	#LR__2064
194a4     F4 00 90 FD | 	jmp	#LR__2065
194a8     08 01 90 FD | 	jmp	#LR__2066
194ac     1C 01 90 FD | 	jmp	#LR__2067
194b0     30 01 90 FD | 	jmp	#LR__2068
194b4     44 01 90 FD | 	jmp	#LR__2069
194b8     58 01 90 FD | 	jmp	#LR__2070
194bc     6C 01 90 FD | 	jmp	#LR__2071
194c0                 | LR__2059
194c0     A7 12 02 F6 | 	mov	arg01, fp
194c4     30 4E 05 F1 | 	add	fp, #48
194c8     A7 14 02 FB | 	rdlong	arg02, fp
194cc     30 4E 85 F1 | 	sub	fp, #48
194d0     0C 16 06 F6 | 	mov	arg03, #12
194d4     0B 00 00 FF 
194d8     CC E4 05 F1 | 	add	objptr, ##5836
194dc     10 8F B0 FD | 	call	#_psram_spin2_write
194e0     0B 00 00 FF 
194e4     CC E4 85 F1 | 	sub	objptr, ##5836
194e8     4C 01 90 FD | 	jmp	#LR__2072
194ec                 | LR__2060
194ec     30 4E 05 F1 | 	add	fp, #48
194f0     A7 12 02 FB | 	rdlong	arg01, fp
194f4     30 4E 85 F1 | 	sub	fp, #48
194f8     A7 14 02 FB | 	rdlong	arg02, fp
194fc     20 63 B0 FD | 	call	#_pspoke
19500     34 01 90 FD | 	jmp	#LR__2072
19504                 | LR__2061
19504     30 4E 05 F1 | 	add	fp, #48
19508     A7 12 02 FB | 	rdlong	arg01, fp
1950c     30 4E 85 F1 | 	sub	fp, #48
19510     A7 14 02 FB | 	rdlong	arg02, fp
19514     08 63 B0 FD | 	call	#_pspoke
19518     1C 01 90 FD | 	jmp	#LR__2072
1951c                 | LR__2062
1951c     30 4E 05 F1 | 	add	fp, #48
19520     A7 12 02 FB | 	rdlong	arg01, fp
19524     30 4E 85 F1 | 	sub	fp, #48
19528     A7 14 02 FB | 	rdlong	arg02, fp
1952c     F0 62 B0 FD | 	call	#_pspoke
19530     30 4E 05 F1 | 	add	fp, #48
19534     A7 12 02 FB | 	rdlong	arg01, fp
19538     30 4E 85 F1 | 	sub	fp, #48
1953c     01 12 06 F1 | 	add	arg01, #1
19540     A7 14 02 FB | 	rdlong	arg02, fp
19544     08 14 46 F0 | 	shr	arg02, #8
19548     D4 62 B0 FD | 	call	#_pspoke
1954c     E8 00 90 FD | 	jmp	#LR__2072
19550                 | LR__2063
19550     30 4E 05 F1 | 	add	fp, #48
19554     A7 12 02 FB | 	rdlong	arg01, fp
19558     30 4E 85 F1 | 	sub	fp, #48
1955c     A7 14 02 FB | 	rdlong	arg02, fp
19560     BC 62 B0 FD | 	call	#_pspoke
19564     30 4E 05 F1 | 	add	fp, #48
19568     A7 12 02 FB | 	rdlong	arg01, fp
1956c     30 4E 85 F1 | 	sub	fp, #48
19570     01 12 06 F1 | 	add	arg01, #1
19574     A7 14 02 FB | 	rdlong	arg02, fp
19578     08 14 46 F0 | 	shr	arg02, #8
1957c     A0 62 B0 FD | 	call	#_pspoke
19580     B4 00 90 FD | 	jmp	#LR__2072
19584                 | LR__2064
19584     30 4E 05 F1 | 	add	fp, #48
19588     A7 12 02 FB | 	rdlong	arg01, fp
1958c     30 4E 85 F1 | 	sub	fp, #48
19590     A7 14 02 FB | 	rdlong	arg02, fp
19594     F8 61 B0 FD | 	call	#_pslpoke
19598     9C 00 90 FD | 	jmp	#LR__2072
1959c                 | LR__2065
1959c     30 4E 05 F1 | 	add	fp, #48
195a0     A7 12 02 FB | 	rdlong	arg01, fp
195a4     30 4E 85 F1 | 	sub	fp, #48
195a8     A7 14 02 FB | 	rdlong	arg02, fp
195ac     E0 61 B0 FD | 	call	#_pslpoke
195b0     84 00 90 FD | 	jmp	#LR__2072
195b4                 | LR__2066
195b4     30 4E 05 F1 | 	add	fp, #48
195b8     A7 12 02 FB | 	rdlong	arg01, fp
195bc     30 4E 85 F1 | 	sub	fp, #48
195c0     A7 14 02 FB | 	rdlong	arg02, fp
195c4     C8 61 B0 FD | 	call	#_pslpoke
195c8     6C 00 90 FD | 	jmp	#LR__2072
195cc                 | LR__2067
195cc     30 4E 05 F1 | 	add	fp, #48
195d0     A7 12 02 FB | 	rdlong	arg01, fp
195d4     30 4E 85 F1 | 	sub	fp, #48
195d8     A7 14 02 FB | 	rdlong	arg02, fp
195dc     B0 61 B0 FD | 	call	#_pslpoke
195e0     54 00 90 FD | 	jmp	#LR__2072
195e4                 | LR__2068
195e4     30 4E 05 F1 | 	add	fp, #48
195e8     A7 12 02 FB | 	rdlong	arg01, fp
195ec     30 4E 85 F1 | 	sub	fp, #48
195f0     A7 14 02 FB | 	rdlong	arg02, fp
195f4     98 61 B0 FD | 	call	#_pslpoke
195f8     3C 00 90 FD | 	jmp	#LR__2072
195fc                 | LR__2069
195fc     30 4E 05 F1 | 	add	fp, #48
19600     A7 12 02 FB | 	rdlong	arg01, fp
19604     30 4E 85 F1 | 	sub	fp, #48
19608     A7 14 02 FB | 	rdlong	arg02, fp
1960c     80 61 B0 FD | 	call	#_pslpoke
19610     24 00 90 FD | 	jmp	#LR__2072
19614                 | LR__2070
19614     30 4E 05 F1 | 	add	fp, #48
19618     A7 12 02 FB | 	rdlong	arg01, fp
1961c     30 4E 85 F1 | 	sub	fp, #48
19620     A7 14 02 FB | 	rdlong	arg02, fp
19624     68 61 B0 FD | 	call	#_pslpoke
19628     0C 00 90 FD | 	jmp	#LR__2072
1962c                 | LR__2071
1962c     32 12 06 F6 | 	mov	arg01, #50
19630     00 14 06 F6 | 	mov	arg02, #0
19634     CC 5F B0 FD | 	call	#_printerror
19638                 | LR__2072
19638                 | LR__2073
19638     A7 F0 03 F6 | 	mov	ptra, fp
1963c     B2 00 A0 FD | 	call	#popregs_
19640                 | _do_assign_ret
19640     2D 00 64 FD | 	ret
19644                 | 
19644                 | ' 
19644                 | ' 
19644                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
19644                 | ' 
19644                 | ' sub do_getvar
19644                 | _do_getvar
19644     04 4A 05 F6 | 	mov	COUNT_, #4
19648     A8 00 A0 FD | 	call	#pushregs_
1964c     3C F0 07 F1 | 	add	ptra, #60
19650                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
19650     4A 00 00 FF 
19654     80 E4 05 F1 | 	add	objptr, ##38016
19658     F2 26 02 FB | 	rdlong	local01, objptr
1965c     13 17 02 F6 | 	mov	arg03, local01
19660     01 16 66 F0 | 	shl	arg03, #1
19664     13 17 02 F1 | 	add	arg03, local01
19668     02 16 66 F0 | 	shl	arg03, #2
1966c     03 00 00 FF 
19670     04 E4 85 F1 | 	sub	objptr, ##1540
19674     F2 16 02 F1 | 	add	arg03, objptr
19678     04 16 06 F1 | 	add	arg03, #4
1967c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
19680     47 00 00 FF 
19684     7C E4 85 F1 | 	sub	objptr, ##36476
19688     C4 00 90 5D |  if_ne	jmp	#LR__2081
1968c     4A 00 00 FF 
19690     80 E4 05 F1 | 	add	objptr, ##38016
19694     F2 26 02 FB | 	rdlong	local01, objptr
19698     13 13 02 F6 | 	mov	arg01, local01
1969c     01 12 66 F0 | 	shl	arg01, #1
196a0     13 13 02 F1 | 	add	arg01, local01
196a4     02 12 66 F0 | 	shl	arg01, #2
196a8     03 00 00 FF 
196ac     04 E4 85 F1 | 	sub	objptr, ##1540
196b0     F2 12 02 F1 | 	add	arg01, objptr
196b4     09 27 02 FB | 	rdlong	local01, arg01
196b8     04 26 66 F0 | 	shl	local01, #4
196bc     32 00 00 FF 
196c0     84 E4 85 F1 | 	sub	objptr, ##25732
196c4     F2 26 02 F1 | 	add	local01, objptr
196c8     04 26 06 F1 | 	add	local01, #4
196cc     13 13 02 FB | 	rdlong	arg01, local01
196d0     04 26 06 F1 | 	add	local01, #4
196d4     13 27 02 FB | 	rdlong	local01, local01
196d8     A7 12 62 FC | 	wrlong	arg01, fp
196dc     04 4E 05 F1 | 	add	fp, #4
196e0     A7 26 62 FC | 	wrlong	local01, fp
196e4     35 00 00 FF 
196e8     88 E4 05 F1 | 	add	objptr, ##27272
196ec     F2 26 02 FB | 	rdlong	local01, objptr
196f0     13 13 02 F6 | 	mov	arg01, local01
196f4     01 12 66 F0 | 	shl	arg01, #1
196f8     13 13 02 F1 | 	add	arg01, local01
196fc     02 12 66 F0 | 	shl	arg01, #2
19700     03 00 00 FF 
19704     04 E4 85 F1 | 	sub	objptr, ##1540
19708     F2 12 02 F1 | 	add	arg01, objptr
1970c     09 27 02 FB | 	rdlong	local01, arg01
19710     04 26 66 F0 | 	shl	local01, #4
19714     32 00 00 FF 
19718     84 E4 85 F1 | 	sub	objptr, ##25732
1971c     F2 26 02 F1 | 	add	local01, objptr
19720     0C 26 06 F1 | 	add	local01, #12
19724     13 27 02 FB | 	rdlong	local01, local01
19728     04 4E 05 F1 | 	add	fp, #4
1972c     A7 26 62 FC | 	wrlong	local01, fp
19730                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
19730                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
19730                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
19730     08 4E 85 F1 | 	sub	fp, #8
19734     00 27 16 F2 | 	cmp	local01, #256 wc
19738     14 00 00 FF 
1973c     F8 E5 85 F1 | 	sub	objptr, ##10744
19740     0C 00 90 3D |  if_ae	jmp	#LR__2080
19744     A7 12 02 F6 | 	mov	arg01, fp
19748     2C 32 BF FD | 	call	#_push
1974c     A0 04 90 FD | 	jmp	#LR__2102
19750                 | LR__2080
19750                 | LR__2081
19750     4A 00 00 FF 
19754     80 E4 05 F1 | 	add	objptr, ##38016
19758     F2 16 02 FB | 	rdlong	arg03, objptr
1975c     0B 15 02 F6 | 	mov	arg02, arg03
19760     01 14 66 F0 | 	shl	arg02, #1
19764     0B 15 02 F1 | 	add	arg02, arg03
19768     02 14 66 F0 | 	shl	arg02, #2
1976c     03 00 00 FF 
19770     04 E4 85 F1 | 	sub	objptr, ##1540
19774     F2 14 02 F1 | 	add	arg02, objptr
19778     0A 17 02 FB | 	rdlong	arg03, arg02
1977c     04 16 66 F0 | 	shl	arg03, #4
19780     32 00 00 FF 
19784     84 E4 85 F1 | 	sub	objptr, ##25732
19788     F2 16 02 F1 | 	add	arg03, objptr
1978c     04 16 06 F1 | 	add	arg03, #4
19790     0B 13 02 FB | 	rdlong	arg01, arg03
19794     0C 4E 05 F1 | 	add	fp, #12
19798     A7 12 62 FC | 	wrlong	arg01, fp
1979c     0C 4E 85 F1 | 	sub	fp, #12
197a0     14 00 00 FF 
197a4     F8 E5 85 F1 | 	sub	objptr, ##10744
197a8     14 61 B0 FD | 	call	#_pslpeek
197ac     FD FA 31 F9 | 	getword	result1, result1, #0
197b0     10 4E 05 F1 | 	add	fp, #16
197b4     A7 FA 61 FC | 	wrlong	result1, fp
197b8     4A 00 00 FF 
197bc     80 E4 05 F1 | 	add	objptr, ##38016
197c0     F2 16 02 FB | 	rdlong	arg03, objptr
197c4     0B 15 02 F6 | 	mov	arg02, arg03
197c8     01 14 66 F0 | 	shl	arg02, #1
197cc     0B 15 02 F1 | 	add	arg02, arg03
197d0     02 14 66 F0 | 	shl	arg02, #2
197d4     03 00 00 FF 
197d8     04 E4 85 F1 | 	sub	objptr, ##1540
197dc     F2 14 02 F1 | 	add	arg02, objptr
197e0     04 14 06 F1 | 	add	arg02, #4
197e4     0A 17 02 FB | 	rdlong	arg03, arg02
197e8     04 4E 05 F1 | 	add	fp, #4
197ec     A7 16 62 FC | 	wrlong	arg03, fp
197f0     08 4E 85 F1 | 	sub	fp, #8
197f4     A7 12 02 FB | 	rdlong	arg01, fp
197f8     0C 4E 85 F1 | 	sub	fp, #12
197fc     02 12 06 F1 | 	add	arg01, #2
19800     47 00 00 FF 
19804     7C E4 85 F1 | 	sub	objptr, ##36476
19808     5C 60 B0 FD | 	call	#_pspeek
1980c     FD FA E1 F8 | 	getbyte	result1, result1, #0
19810     18 4E 05 F1 | 	add	fp, #24
19814     A7 FA 61 FC | 	wrlong	result1, fp
19818     0C 4E 85 F1 | 	sub	fp, #12
1981c     A7 12 02 FB | 	rdlong	arg01, fp
19820     0C 4E 85 F1 | 	sub	fp, #12
19824     04 12 06 F1 | 	add	arg01, #4
19828     94 60 B0 FD | 	call	#_pslpeek
1982c     1C 4E 05 F1 | 	add	fp, #28
19830     A7 FA 61 FC | 	wrlong	result1, fp
19834     10 4E 85 F1 | 	sub	fp, #16
19838     A7 12 02 FB | 	rdlong	arg01, fp
1983c     0C 4E 85 F1 | 	sub	fp, #12
19840     08 12 06 F1 | 	add	arg01, #8
19844     78 60 B0 FD | 	call	#_pslpeek
19848     20 4E 05 F1 | 	add	fp, #32
1984c     A7 FA 61 FC | 	wrlong	result1, fp
19850     14 4E 85 F1 | 	sub	fp, #20
19854     A7 12 02 FB | 	rdlong	arg01, fp
19858     0C 4E 85 F1 | 	sub	fp, #12
1985c     0C 12 06 F1 | 	add	arg01, #12
19860     5C 60 B0 FD | 	call	#_pslpeek
19864     24 4E 05 F1 | 	add	fp, #36
19868     A7 FA 61 FC | 	wrlong	result1, fp
1986c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1986c                 | ' esize=pspeek(arrptr+2)
1986c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1986c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1986c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1986c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1986c     10 4E 85 F1 | 	sub	fp, #16
19870     A7 16 02 FB | 	rdlong	arg03, fp
19874     14 4E 85 F1 | 	sub	fp, #20
19878     03 16 16 F2 | 	cmp	arg03, #3 wc
1987c     38 00 90 CD |  if_b	jmp	#LR__2082
19880     5C 30 BF FD | 	call	#_pop
19884     FF 16 02 F6 | 	mov	arg03, result3
19888     A7 FA 61 FC | 	wrlong	result1, fp
1988c     04 4E 05 F1 | 	add	fp, #4
19890     A7 FC 61 FC | 	wrlong	result2, fp
19894     04 4E 05 F1 | 	add	fp, #4
19898     A7 16 62 FC | 	wrlong	arg03, fp
1989c     08 4E 85 F1 | 	sub	fp, #8
198a0     A7 12 02 F6 | 	mov	arg01, fp
198a4     1C 32 BF FD | 	call	#_converttoint
198a8     30 4E 05 F1 | 	add	fp, #48
198ac     A7 FA 61 FC | 	wrlong	result1, fp
198b0     30 4E 85 F1 | 	sub	fp, #48
198b4     0C 00 90 FD | 	jmp	#LR__2083
198b8                 | LR__2082
198b8     30 4E 05 F1 | 	add	fp, #48
198bc     A7 00 68 FC | 	wrlong	#0, fp
198c0     30 4E 85 F1 | 	sub	fp, #48
198c4                 | LR__2083
198c4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
198c4     14 4E 05 F1 | 	add	fp, #20
198c8     A7 16 02 FB | 	rdlong	arg03, fp
198cc     14 4E 85 F1 | 	sub	fp, #20
198d0     02 16 16 F2 | 	cmp	arg03, #2 wc
198d4     38 00 90 CD |  if_b	jmp	#LR__2084
198d8     04 30 BF FD | 	call	#_pop
198dc     FF 16 02 F6 | 	mov	arg03, result3
198e0     A7 FA 61 FC | 	wrlong	result1, fp
198e4     04 4E 05 F1 | 	add	fp, #4
198e8     A7 FC 61 FC | 	wrlong	result2, fp
198ec     04 4E 05 F1 | 	add	fp, #4
198f0     A7 16 62 FC | 	wrlong	arg03, fp
198f4     08 4E 85 F1 | 	sub	fp, #8
198f8     A7 12 02 F6 | 	mov	arg01, fp
198fc     C4 31 BF FD | 	call	#_converttoint
19900     2C 4E 05 F1 | 	add	fp, #44
19904     A7 FA 61 FC | 	wrlong	result1, fp
19908     2C 4E 85 F1 | 	sub	fp, #44
1990c     0C 00 90 FD | 	jmp	#LR__2085
19910                 | LR__2084
19910     2C 4E 05 F1 | 	add	fp, #44
19914     A7 00 68 FC | 	wrlong	#0, fp
19918     2C 4E 85 F1 | 	sub	fp, #44
1991c                 | LR__2085
1991c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1991c     14 4E 05 F1 | 	add	fp, #20
19920     A7 16 02 FB | 	rdlong	arg03, fp
19924     14 4E 85 F1 | 	sub	fp, #20
19928     01 16 16 F2 | 	cmp	arg03, #1 wc
1992c     38 00 90 CD |  if_b	jmp	#LR__2086
19930     AC 2F BF FD | 	call	#_pop
19934     FF 16 02 F6 | 	mov	arg03, result3
19938     A7 FA 61 FC | 	wrlong	result1, fp
1993c     04 4E 05 F1 | 	add	fp, #4
19940     A7 FC 61 FC | 	wrlong	result2, fp
19944     04 4E 05 F1 | 	add	fp, #4
19948     A7 16 62 FC | 	wrlong	arg03, fp
1994c     08 4E 85 F1 | 	sub	fp, #8
19950     A7 12 02 F6 | 	mov	arg01, fp
19954     6C 31 BF FD | 	call	#_converttoint
19958     28 4E 05 F1 | 	add	fp, #40
1995c     A7 FA 61 FC | 	wrlong	result1, fp
19960     28 4E 85 F1 | 	sub	fp, #40
19964     0C 00 90 FD | 	jmp	#LR__2087
19968                 | LR__2086
19968     28 4E 05 F1 | 	add	fp, #40
1996c     A7 00 68 FC | 	wrlong	#0, fp
19970     28 4E 85 F1 | 	sub	fp, #40
19974                 | LR__2087
19974     0C 4E 05 F1 | 	add	fp, #12
19978     A7 28 02 FB | 	rdlong	local02, fp
1997c     1C 4E 05 F1 | 	add	fp, #28
19980     A7 2A 02 FB | 	rdlong	local03, fp
19984     04 4E 05 F1 | 	add	fp, #4
19988     A7 FC 01 FB | 	rdlong	result2, fp
1998c     10 4E 85 F1 | 	sub	fp, #16
19990     A7 FE 01 FB | 	rdlong	result3, fp
19994     FF FC 01 FD | 	qmul	result2, result3
19998     10 28 06 F1 | 	add	local02, #16
1999c     14 4E 05 F1 | 	add	fp, #20
199a0     A7 FC 01 FB | 	rdlong	result2, fp
199a4     18 FA 61 FD | 	getqx	result1
199a8     FF FC 01 FD | 	qmul	result2, result3
199ac     FD 2A 02 F1 | 	add	local03, result1
199b0     10 4E 85 F1 | 	sub	fp, #16
199b4     A7 FE 01 FB | 	rdlong	result3, fp
199b8     18 FC 61 FD | 	getqx	result2
199bc     FF FC 01 FD | 	qmul	result2, result3
199c0     08 4E 85 F1 | 	sub	fp, #8
199c4     A7 FE 01 FB | 	rdlong	result3, fp
199c8     18 FC 61 FD | 	getqx	result2
199cc     FE 2A 02 F1 | 	add	local03, result2
199d0     FF 2A 02 FD | 	qmul	local03, result3
199d4     1C 4E 05 F1 | 	add	fp, #28
199d8                 | ' 
199d8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
199d8                 | ' 
199d8                 | ' select case vartype
199d8     18 FC 61 FD | 	getqx	result2
199dc     FE 28 02 F1 | 	add	local02, result2
199e0     A7 28 62 FC | 	wrlong	local02, fp
199e4     24 4E 85 F1 | 	sub	fp, #36
199e8     A7 2C 02 FB | 	rdlong	local04, fp
199ec     10 4E 85 F1 | 	sub	fp, #16
199f0     00 2D 86 F1 | 	sub	local04, #256
199f4     0C 2C 26 F3 | 	fle	local04, #12
199f8     30 2C 62 FD | 	jmprel	local04
199fc                 | LR__2088
199fc     30 00 90 FD | 	jmp	#LR__2089
19a00     58 00 90 FD | 	jmp	#LR__2090
19a04     8C 00 90 FD | 	jmp	#LR__2091
19a08     AC 00 90 FD | 	jmp	#LR__2092
19a0c     E8 00 90 FD | 	jmp	#LR__2093
19a10     08 01 90 FD | 	jmp	#LR__2094
19a14     24 01 90 FD | 	jmp	#LR__2095
19a18     40 01 90 FD | 	jmp	#LR__2096
19a1c     50 01 90 FD | 	jmp	#LR__2097
19a20     60 01 90 FD | 	jmp	#LR__2098
19a24     7C 01 90 FD | 	jmp	#LR__2099
19a28     8C 01 90 FD | 	jmp	#LR__2100
19a2c     B8 01 90 FD | 	jmp	#LR__2101
19a30                 | LR__2089
19a30     A7 12 02 F6 | 	mov	arg01, fp
19a34     34 4E 05 F1 | 	add	fp, #52
19a38     A7 14 02 FB | 	rdlong	arg02, fp
19a3c     34 4E 85 F1 | 	sub	fp, #52
19a40     0C 16 06 F6 | 	mov	arg03, #12
19a44     0B 00 00 FF 
19a48     CC E4 05 F1 | 	add	objptr, ##5836
19a4c     04 89 B0 FD | 	call	#_psram_spin2_read1
19a50     0B 00 00 FF 
19a54     CC E4 85 F1 | 	sub	objptr, ##5836
19a58     8C 01 90 FD | 	jmp	#LR__2101
19a5c                 | LR__2090
19a5c     08 4E 05 F1 | 	add	fp, #8
19a60     A7 38 68 FC | 	wrlong	#28, fp
19a64     2C 4E 05 F1 | 	add	fp, #44
19a68     A7 12 02 FB | 	rdlong	arg01, fp
19a6c     34 4E 85 F1 | 	sub	fp, #52
19a70     F4 5D B0 FD | 	call	#_pspeek
19a74     FD FA E1 F8 | 	getbyte	result1, result1, #0
19a78     A7 FA 61 FC | 	wrlong	result1, fp
19a7c     80 FA 15 F2 | 	cmp	result1, #128 wc
19a80     00 27 66 36 |  if_ae	neg	local01, #256
19a84     A7 2A 02 3B |  if_ae	rdlong	local03, fp
19a88     15 27 42 35 |  if_ae	or	local01, local03
19a8c     A7 26 62 3C |  if_ae	wrlong	local01, fp
19a90     54 01 90 FD | 	jmp	#LR__2101
19a94                 | LR__2091
19a94     08 4E 05 F1 | 	add	fp, #8
19a98     A7 3A 68 FC | 	wrlong	#29, fp
19a9c     2C 4E 05 F1 | 	add	fp, #44
19aa0     A7 12 02 FB | 	rdlong	arg01, fp
19aa4     34 4E 85 F1 | 	sub	fp, #52
19aa8     BC 5D B0 FD | 	call	#_pspeek
19aac     FD FA E1 F8 | 	getbyte	result1, result1, #0
19ab0     A7 FA 61 FC | 	wrlong	result1, fp
19ab4     30 01 90 FD | 	jmp	#LR__2101
19ab8                 | LR__2092
19ab8     08 4E 05 F1 | 	add	fp, #8
19abc     A7 38 68 FC | 	wrlong	#28, fp
19ac0     2C 4E 05 F1 | 	add	fp, #44
19ac4     A7 12 02 FB | 	rdlong	arg01, fp
19ac8     34 4E 85 F1 | 	sub	fp, #52
19acc     F0 5D B0 FD | 	call	#_pslpeek
19ad0     FD FA 31 F9 | 	getword	result1, result1, #0
19ad4     A7 FA 61 FC | 	wrlong	result1, fp
19ad8     40 00 00 FF 
19adc     00 FA 15 F2 | 	cmp	result1, ##32768 wc
19ae0     FF 7F 00 3F 
19ae4     00 27 06 36 |  if_ae	mov	local01, ##16776960
19ae8     A7 2A 02 3B |  if_ae	rdlong	local03, fp
19aec     15 27 42 35 |  if_ae	or	local01, local03
19af0     A7 26 62 3C |  if_ae	wrlong	local01, fp
19af4     F0 00 90 FD | 	jmp	#LR__2101
19af8                 | LR__2093
19af8     08 4E 05 F1 | 	add	fp, #8
19afc     A7 3A 68 FC | 	wrlong	#29, fp
19b00     2C 4E 05 F1 | 	add	fp, #44
19b04     A7 12 02 FB | 	rdlong	arg01, fp
19b08     34 4E 85 F1 | 	sub	fp, #52
19b0c     B0 5D B0 FD | 	call	#_pslpeek
19b10     FD FA 31 F9 | 	getword	result1, result1, #0
19b14     A7 FA 61 FC | 	wrlong	result1, fp
19b18     CC 00 90 FD | 	jmp	#LR__2101
19b1c                 | LR__2094
19b1c     08 4E 05 F1 | 	add	fp, #8
19b20     A7 38 68 FC | 	wrlong	#28, fp
19b24     2C 4E 05 F1 | 	add	fp, #44
19b28     A7 12 02 FB | 	rdlong	arg01, fp
19b2c     34 4E 85 F1 | 	sub	fp, #52
19b30     8C 5D B0 FD | 	call	#_pslpeek
19b34     A7 FA 61 FC | 	wrlong	result1, fp
19b38     AC 00 90 FD | 	jmp	#LR__2101
19b3c                 | LR__2095
19b3c     08 4E 05 F1 | 	add	fp, #8
19b40     A7 3A 68 FC | 	wrlong	#29, fp
19b44     2C 4E 05 F1 | 	add	fp, #44
19b48     A7 12 02 FB | 	rdlong	arg01, fp
19b4c     34 4E 85 F1 | 	sub	fp, #52
19b50     6C 5D B0 FD | 	call	#_pslpeek
19b54     A7 FA 61 FC | 	wrlong	result1, fp
19b58     8C 00 90 FD | 	jmp	#LR__2101
19b5c                 | LR__2096
19b5c     08 4E 05 F1 | 	add	fp, #8
19b60     A7 FE 69 FC | 	wrlong	#255, fp
19b64     08 4E 85 F1 | 	sub	fp, #8
19b68     A7 60 68 FC | 	wrlong	#48, fp
19b6c     78 00 90 FD | 	jmp	#LR__2101
19b70                 | LR__2097
19b70     08 4E 05 F1 | 	add	fp, #8
19b74     A7 FE 69 FC | 	wrlong	#255, fp
19b78     08 4E 85 F1 | 	sub	fp, #8
19b7c     A7 60 68 FC | 	wrlong	#48, fp
19b80     64 00 90 FD | 	jmp	#LR__2101
19b84                 | LR__2098
19b84     08 4E 05 F1 | 	add	fp, #8
19b88     A7 3C 68 FC | 	wrlong	#30, fp
19b8c     2C 4E 05 F1 | 	add	fp, #44
19b90     A7 12 02 FB | 	rdlong	arg01, fp
19b94     34 4E 85 F1 | 	sub	fp, #52
19b98     24 5D B0 FD | 	call	#_pslpeek
19b9c     A7 FA 61 FC | 	wrlong	result1, fp
19ba0     44 00 90 FD | 	jmp	#LR__2101
19ba4                 | LR__2099
19ba4     08 4E 05 F1 | 	add	fp, #8
19ba8     A7 FE 69 FC | 	wrlong	#255, fp
19bac     08 4E 85 F1 | 	sub	fp, #8
19bb0     A7 60 68 FC | 	wrlong	#48, fp
19bb4     30 00 90 FD | 	jmp	#LR__2101
19bb8                 | LR__2100
19bb8     08 4E 05 F1 | 	add	fp, #8
19bbc     A7 3E 68 FC | 	wrlong	#31, fp
19bc0     2C 4E 05 F1 | 	add	fp, #44
19bc4     A7 12 02 FB | 	rdlong	arg01, fp
19bc8     34 4E 85 F1 | 	sub	fp, #52
19bcc     F0 5C B0 FD | 	call	#_pslpeek
19bd0     A7 FA 61 FC | 	wrlong	result1, fp
19bd4     00 04 00 FF 
19bd8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
19bdc     08 4E 05 31 |  if_ae	add	fp, #8
19be0     A7 56 68 3C |  if_ae	wrlong	#43, fp
19be4     08 4E 85 31 |  if_ae	sub	fp, #8
19be8                 | LR__2101
19be8     A7 12 02 F6 | 	mov	arg01, fp
19bec     88 2D BF FD | 	call	#_push
19bf0                 | LR__2102
19bf0     A7 F0 03 F6 | 	mov	ptra, fp
19bf4     B2 00 A0 FD | 	call	#popregs_
19bf8                 | _do_getvar_ret
19bf8     2D 00 64 FD | 	ret
19bfc                 | 
19bfc                 | ' 
19bfc                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
19bfc                 | ' 
19bfc                 | ' sub do_getaddr
19bfc                 | _do_getaddr
19bfc     01 4A 05 F6 | 	mov	COUNT_, #1
19c00     A8 00 A0 FD | 	call	#pushregs_
19c04     38 F0 07 F1 | 	add	ptra, #56
19c08                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
19c08                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
19c08     4A 00 00 FF 
19c0c     80 E4 05 F1 | 	add	objptr, ##38016
19c10     F2 12 02 FB | 	rdlong	arg01, objptr
19c14     09 FD 01 F6 | 	mov	result2, arg01
19c18     01 FC 65 F0 | 	shl	result2, #1
19c1c     09 FD 01 F1 | 	add	result2, arg01
19c20     02 FC 65 F0 | 	shl	result2, #2
19c24     03 00 00 FF 
19c28     04 E4 85 F1 | 	sub	objptr, ##1540
19c2c     F2 FC 01 F1 | 	add	result2, objptr
19c30     04 FC 05 F1 | 	add	result2, #4
19c34     FE FC 09 FB | 	rdlong	result2, result2 wz
19c38     47 00 00 FF 
19c3c     7C E4 85 F1 | 	sub	objptr, ##36476
19c40     CC 00 90 5D |  if_ne	jmp	#LR__2110
19c44     4A 00 00 FF 
19c48     80 E4 05 F1 | 	add	objptr, ##38016
19c4c     F2 12 02 FB | 	rdlong	arg01, objptr
19c50     09 FD 01 F6 | 	mov	result2, arg01
19c54     01 FC 65 F0 | 	shl	result2, #1
19c58     09 FD 01 F1 | 	add	result2, arg01
19c5c     02 FC 65 F0 | 	shl	result2, #2
19c60     03 00 00 FF 
19c64     04 E4 85 F1 | 	sub	objptr, ##1540
19c68     F2 FC 01 F1 | 	add	result2, objptr
19c6c     FE 12 02 FB | 	rdlong	arg01, result2
19c70     04 12 66 F0 | 	shl	arg01, #4
19c74     32 00 00 FF 
19c78     84 E4 85 F1 | 	sub	objptr, ##25732
19c7c     F2 12 02 F1 | 	add	arg01, objptr
19c80     0C 12 06 F1 | 	add	arg01, #12
19c84     09 13 02 FB | 	rdlong	arg01, arg01
19c88     08 4E 05 F1 | 	add	fp, #8
19c8c     A7 12 62 FC | 	wrlong	arg01, fp
19c90                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
19c90                 | '    if t1.result_type>=array_no_type then goto 2200
19c90     08 4E 85 F1 | 	sub	fp, #8
19c94     00 13 16 F2 | 	cmp	arg01, #256 wc
19c98     14 00 00 FF 
19c9c     F8 E5 85 F1 | 	sub	objptr, ##10744
19ca0     6C 00 90 3D |  if_ae	jmp	#LR__2111
19ca4     4A 00 00 FF 
19ca8     80 E4 05 F1 | 	add	objptr, ##38016
19cac     F2 12 02 FB | 	rdlong	arg01, objptr
19cb0     09 FB 01 F6 | 	mov	result1, arg01
19cb4     01 FA 65 F0 | 	shl	result1, #1
19cb8     09 FB 01 F1 | 	add	result1, arg01
19cbc     02 FA 65 F0 | 	shl	result1, #2
19cc0     03 00 00 FF 
19cc4     04 E4 85 F1 | 	sub	objptr, ##1540
19cc8     F2 FA 01 F1 | 	add	result1, objptr
19ccc     FD FA 01 FB | 	rdlong	result1, result1
19cd0     04 FA 65 F0 | 	shl	result1, #4
19cd4     32 00 00 FF 
19cd8     84 E4 85 F1 | 	sub	objptr, ##25732
19cdc     F2 FA 01 F1 | 	add	result1, objptr
19ce0     04 FA 05 F1 | 	add	result1, #4
19ce4     14 00 00 FF 
19ce8     F8 E5 85 F1 | 	sub	objptr, ##10744
19cec     A7 FA 61 FC | 	wrlong	result1, fp
19cf0     04 4E 05 F1 | 	add	fp, #4
19cf4     A7 00 68 FC | 	wrlong	#0, fp
19cf8     04 4E 05 F1 | 	add	fp, #4
19cfc     A7 3A 68 FC | 	wrlong	#29, fp
19d00     08 4E 85 F1 | 	sub	fp, #8
19d04     A7 12 02 F6 | 	mov	arg01, fp
19d08     6C 2C BF FD | 	call	#_push
19d0c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
19d0c                 | '   t1.result.twowords(1)=0
19d0c                 | '   t1.result_type=result_uint
19d0c                 | '   push t1 : return
19d0c     2C 03 90 FD | 	jmp	#LR__2120
19d10                 | LR__2110
19d10                 | LR__2111
19d10     4A 00 00 FF 
19d14     80 E4 05 F1 | 	add	objptr, ##38016
19d18     F2 FE 01 FB | 	rdlong	result3, objptr
19d1c     FF FC 01 F6 | 	mov	result2, result3
19d20     01 FC 65 F0 | 	shl	result2, #1
19d24     FF FC 01 F1 | 	add	result2, result3
19d28     02 FC 65 F0 | 	shl	result2, #2
19d2c     03 00 00 FF 
19d30     04 E4 85 F1 | 	sub	objptr, ##1540
19d34     F2 FC 01 F1 | 	add	result2, objptr
19d38     FE FE 01 FB | 	rdlong	result3, result2
19d3c     04 FE 65 F0 | 	shl	result3, #4
19d40     32 00 00 FF 
19d44     84 E4 85 F1 | 	sub	objptr, ##25732
19d48     F2 FE 01 F1 | 	add	result3, objptr
19d4c     04 FE 05 F1 | 	add	result3, #4
19d50     FF FE 01 FB | 	rdlong	result3, result3
19d54     0C 4E 05 F1 | 	add	fp, #12
19d58     A7 FE 61 FC | 	wrlong	result3, fp
19d5c     35 00 00 FF 
19d60     88 E4 05 F1 | 	add	objptr, ##27272
19d64     F2 FE 01 FB | 	rdlong	result3, objptr
19d68     FF 12 02 F6 | 	mov	arg01, result3
19d6c     01 12 66 F0 | 	shl	arg01, #1
19d70     FF 12 02 F1 | 	add	arg01, result3
19d74     02 12 66 F0 | 	shl	arg01, #2
19d78     03 00 00 FF 
19d7c     04 E4 85 F1 | 	sub	objptr, ##1540
19d80     F2 12 02 F1 | 	add	arg01, objptr
19d84     09 13 02 FB | 	rdlong	arg01, arg01
19d88     04 12 66 F0 | 	shl	arg01, #4
19d8c     32 00 00 FF 
19d90     84 E4 85 F1 | 	sub	objptr, ##25732
19d94     F2 12 02 F1 | 	add	arg01, objptr
19d98     0C 12 06 F1 | 	add	arg01, #12
19d9c     09 13 02 FB | 	rdlong	arg01, arg01
19da0     08 4E 85 F1 | 	sub	fp, #8
19da4     A7 12 62 FC | 	wrlong	arg01, fp
19da8     08 4E 05 F1 | 	add	fp, #8
19dac     A7 12 02 FB | 	rdlong	arg01, fp
19db0     0C 4E 85 F1 | 	sub	fp, #12
19db4     14 00 00 FF 
19db8     F8 E5 85 F1 | 	sub	objptr, ##10744
19dbc     00 5B B0 FD | 	call	#_pslpeek
19dc0     FD FA 31 F9 | 	getword	result1, result1, #0
19dc4     10 4E 05 F1 | 	add	fp, #16
19dc8     A7 FA 61 FC | 	wrlong	result1, fp
19dcc     4A 00 00 FF 
19dd0     80 E4 05 F1 | 	add	objptr, ##38016
19dd4     F2 FE 01 FB | 	rdlong	result3, objptr
19dd8     FF 12 02 F6 | 	mov	arg01, result3
19ddc     01 12 66 F0 | 	shl	arg01, #1
19de0     FF 12 02 F1 | 	add	arg01, result3
19de4     02 12 66 F0 | 	shl	arg01, #2
19de8     03 00 00 FF 
19dec     04 E4 85 F1 | 	sub	objptr, ##1540
19df0     F2 12 02 F1 | 	add	arg01, objptr
19df4     04 12 06 F1 | 	add	arg01, #4
19df8     09 13 02 FB | 	rdlong	arg01, arg01
19dfc     04 4E 05 F1 | 	add	fp, #4
19e00     A7 12 62 FC | 	wrlong	arg01, fp
19e04     08 4E 85 F1 | 	sub	fp, #8
19e08     A7 12 02 FB | 	rdlong	arg01, fp
19e0c     0C 4E 85 F1 | 	sub	fp, #12
19e10     02 12 06 F1 | 	add	arg01, #2
19e14     47 00 00 FF 
19e18     7C E4 85 F1 | 	sub	objptr, ##36476
19e1c     48 5A B0 FD | 	call	#_pspeek
19e20     FD FA E1 F8 | 	getbyte	result1, result1, #0
19e24     18 4E 05 F1 | 	add	fp, #24
19e28     A7 FA 61 FC | 	wrlong	result1, fp
19e2c     0C 4E 85 F1 | 	sub	fp, #12
19e30     A7 12 02 FB | 	rdlong	arg01, fp
19e34     0C 4E 85 F1 | 	sub	fp, #12
19e38     04 12 06 F1 | 	add	arg01, #4
19e3c     80 5A B0 FD | 	call	#_pslpeek
19e40     1C 4E 05 F1 | 	add	fp, #28
19e44     A7 FA 61 FC | 	wrlong	result1, fp
19e48     10 4E 85 F1 | 	sub	fp, #16
19e4c     A7 12 02 FB | 	rdlong	arg01, fp
19e50     0C 4E 85 F1 | 	sub	fp, #12
19e54     08 12 06 F1 | 	add	arg01, #8
19e58     64 5A B0 FD | 	call	#_pslpeek
19e5c     20 4E 05 F1 | 	add	fp, #32
19e60     A7 FA 61 FC | 	wrlong	result1, fp
19e64     14 4E 85 F1 | 	sub	fp, #20
19e68     A7 12 02 FB | 	rdlong	arg01, fp
19e6c     0C 4E 85 F1 | 	sub	fp, #12
19e70     0C 12 06 F1 | 	add	arg01, #12
19e74     48 5A B0 FD | 	call	#_pslpeek
19e78     24 4E 05 F1 | 	add	fp, #36
19e7c     A7 FA 61 FC | 	wrlong	result1, fp
19e80                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
19e80                 | ' esize=pspeek(arrptr+2)
19e80                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
19e80                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
19e80                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
19e80                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
19e80     10 4E 85 F1 | 	sub	fp, #16
19e84     A7 12 02 FB | 	rdlong	arg01, fp
19e88     14 4E 85 F1 | 	sub	fp, #20
19e8c     03 12 16 F2 | 	cmp	arg01, #3 wc
19e90     34 00 90 CD |  if_b	jmp	#LR__2112
19e94     48 2A BF FD | 	call	#_pop
19e98     A7 FA 61 FC | 	wrlong	result1, fp
19e9c     04 4E 05 F1 | 	add	fp, #4
19ea0     A7 FC 61 FC | 	wrlong	result2, fp
19ea4     04 4E 05 F1 | 	add	fp, #4
19ea8     A7 FE 61 FC | 	wrlong	result3, fp
19eac     08 4E 85 F1 | 	sub	fp, #8
19eb0     A7 12 02 F6 | 	mov	arg01, fp
19eb4     0C 2C BF FD | 	call	#_converttoint
19eb8     30 4E 05 F1 | 	add	fp, #48
19ebc     A7 FA 61 FC | 	wrlong	result1, fp
19ec0     30 4E 85 F1 | 	sub	fp, #48
19ec4     0C 00 90 FD | 	jmp	#LR__2113
19ec8                 | LR__2112
19ec8     30 4E 05 F1 | 	add	fp, #48
19ecc     A7 00 68 FC | 	wrlong	#0, fp
19ed0     30 4E 85 F1 | 	sub	fp, #48
19ed4                 | LR__2113
19ed4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
19ed4     14 4E 05 F1 | 	add	fp, #20
19ed8     A7 12 02 FB | 	rdlong	arg01, fp
19edc     14 4E 85 F1 | 	sub	fp, #20
19ee0     02 12 16 F2 | 	cmp	arg01, #2 wc
19ee4     34 00 90 CD |  if_b	jmp	#LR__2114
19ee8     F4 29 BF FD | 	call	#_pop
19eec     A7 FA 61 FC | 	wrlong	result1, fp
19ef0     04 4E 05 F1 | 	add	fp, #4
19ef4     A7 FC 61 FC | 	wrlong	result2, fp
19ef8     04 4E 05 F1 | 	add	fp, #4
19efc     A7 FE 61 FC | 	wrlong	result3, fp
19f00     08 4E 85 F1 | 	sub	fp, #8
19f04     A7 12 02 F6 | 	mov	arg01, fp
19f08     B8 2B BF FD | 	call	#_converttoint
19f0c     2C 4E 05 F1 | 	add	fp, #44
19f10     A7 FA 61 FC | 	wrlong	result1, fp
19f14     2C 4E 85 F1 | 	sub	fp, #44
19f18     0C 00 90 FD | 	jmp	#LR__2115
19f1c                 | LR__2114
19f1c     2C 4E 05 F1 | 	add	fp, #44
19f20     A7 00 68 FC | 	wrlong	#0, fp
19f24     2C 4E 85 F1 | 	sub	fp, #44
19f28                 | LR__2115
19f28                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
19f28     14 4E 05 F1 | 	add	fp, #20
19f2c     A7 12 02 FB | 	rdlong	arg01, fp
19f30     14 4E 85 F1 | 	sub	fp, #20
19f34     01 12 16 F2 | 	cmp	arg01, #1 wc
19f38     34 00 90 CD |  if_b	jmp	#LR__2116
19f3c     A0 29 BF FD | 	call	#_pop
19f40     A7 FA 61 FC | 	wrlong	result1, fp
19f44     04 4E 05 F1 | 	add	fp, #4
19f48     A7 FC 61 FC | 	wrlong	result2, fp
19f4c     04 4E 05 F1 | 	add	fp, #4
19f50     A7 FE 61 FC | 	wrlong	result3, fp
19f54     08 4E 85 F1 | 	sub	fp, #8
19f58     A7 12 02 F6 | 	mov	arg01, fp
19f5c     64 2B BF FD | 	call	#_converttoint
19f60     28 4E 05 F1 | 	add	fp, #40
19f64     A7 FA 61 FC | 	wrlong	result1, fp
19f68     28 4E 85 F1 | 	sub	fp, #40
19f6c     0C 00 90 FD | 	jmp	#LR__2117
19f70                 | LR__2116
19f70     28 4E 05 F1 | 	add	fp, #40
19f74     A7 00 68 FC | 	wrlong	#0, fp
19f78     28 4E 85 F1 | 	sub	fp, #40
19f7c                 | LR__2117
19f7c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
19f7c                 | ' if numpar>0 then
19f7c     14 4E 05 F1 | 	add	fp, #20
19f80     A7 FE 01 FB | 	rdlong	result3, fp
19f84     14 4E 85 F1 | 	sub	fp, #20
19f88     01 FE 15 F2 | 	cmp	result3, #1 wc
19f8c     8C 00 90 CD |  if_b	jmp	#LR__2118
19f90     0C 4E 05 F1 | 	add	fp, #12
19f94     A7 FC 01 FB | 	rdlong	result2, fp
19f98     1C 4E 05 F1 | 	add	fp, #28
19f9c     A7 FE 01 FB | 	rdlong	result3, fp
19fa0     04 4E 05 F1 | 	add	fp, #4
19fa4     A7 12 02 FB | 	rdlong	arg01, fp
19fa8     10 4E 85 F1 | 	sub	fp, #16
19fac     A7 FA 01 FB | 	rdlong	result1, fp
19fb0     FD 12 02 FD | 	qmul	arg01, result1
19fb4     10 FC 05 F1 | 	add	result2, #16
19fb8     14 4E 05 F1 | 	add	fp, #20
19fbc     A7 26 02 FB | 	rdlong	local01, fp
19fc0     18 12 62 FD | 	getqx	arg01
19fc4     FD 26 02 FD | 	qmul	local01, result1
19fc8     09 FF 01 F1 | 	add	result3, arg01
19fcc     10 4E 85 F1 | 	sub	fp, #16
19fd0     A7 26 02 FB | 	rdlong	local01, fp
19fd4     18 FA 61 FD | 	getqx	result1
19fd8     13 FB 01 FD | 	qmul	result1, local01
19fdc     08 4E 85 F1 | 	sub	fp, #8
19fe0     A7 26 02 FB | 	rdlong	local01, fp
19fe4     18 FA 61 FD | 	getqx	result1
19fe8     FD FE 01 F1 | 	add	result3, result1
19fec     13 FF 01 FD | 	qmul	result3, local01
19ff0     1C 4E 05 F1 | 	add	fp, #28
19ff4     18 26 62 FD | 	getqx	local01
19ff8     13 FD 01 F1 | 	add	result2, local01
19ffc     A7 FC 61 FC | 	wrlong	result2, fp
1a000     2C 4E 85 F1 | 	sub	fp, #44
1a004     A7 3A 68 FC | 	wrlong	#29, fp
1a008     2C 4E 05 F1 | 	add	fp, #44
1a00c     A7 26 02 FB | 	rdlong	local01, fp
1a010     34 4E 85 F1 | 	sub	fp, #52
1a014     A7 26 62 FC | 	wrlong	local01, fp
1a018     18 00 90 FD | 	jmp	#LR__2119
1a01c                 | LR__2118
1a01c     08 4E 05 F1 | 	add	fp, #8
1a020     A7 3A 68 FC | 	wrlong	#29, fp
1a024     04 4E 05 F1 | 	add	fp, #4
1a028     A7 26 02 FB | 	rdlong	local01, fp
1a02c     0C 4E 85 F1 | 	sub	fp, #12
1a030     A7 26 62 FC | 	wrlong	local01, fp
1a034                 | LR__2119
1a034     A7 12 02 F6 | 	mov	arg01, fp
1a038     3C 29 BF FD | 	call	#_push
1a03c                 | LR__2120
1a03c     A7 F0 03 F6 | 	mov	ptra, fp
1a040     B2 00 A0 FD | 	call	#popregs_
1a044                 | _do_getaddr_ret
1a044     2D 00 64 FD | 	ret
1a048                 | 
1a048                 | ' 
1a048                 | ' 
1a048                 | ' 
1a048                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1a048                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1a048                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1a048                 | ' 
1a048                 | ' '--------------------------------- AND 
1a048                 | ' 
1a048                 | ' sub do_and 
1a048                 | _do_and
1a048     03 4A 05 F6 | 	mov	COUNT_, #3
1a04c     A8 00 A0 FD | 	call	#pushregs_
1a050     18 F0 07 F1 | 	add	ptra, #24
1a054     88 28 BF FD | 	call	#_pop
1a058     FD 12 02 F6 | 	mov	arg01, result1
1a05c     FE 26 02 F6 | 	mov	local01, result2
1a060     FF 28 02 F6 | 	mov	local02, result3
1a064     0C 4E 05 F1 | 	add	fp, #12
1a068     A7 12 62 FC | 	wrlong	arg01, fp
1a06c     04 4E 05 F1 | 	add	fp, #4
1a070     A7 26 62 FC | 	wrlong	local01, fp
1a074     04 4E 05 F1 | 	add	fp, #4
1a078     A7 28 62 FC | 	wrlong	local02, fp
1a07c     14 4E 85 F1 | 	sub	fp, #20
1a080     5C 28 BF FD | 	call	#_pop
1a084     FF 2A 02 F6 | 	mov	local03, result3
1a088     A7 FA 61 FC | 	wrlong	result1, fp
1a08c     04 4E 05 F1 | 	add	fp, #4
1a090     A7 FC 61 FC | 	wrlong	result2, fp
1a094     04 4E 05 F1 | 	add	fp, #4
1a098     A7 2A 62 FC | 	wrlong	local03, fp
1a09c                 | ' 
1a09c                 | ' t2=pop()
1a09c                 | ' t1=pop()
1a09c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1a09c     08 4E 85 F1 | 	sub	fp, #8
1a0a0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a0a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a0a8     A7 2A 62 AC |  if_e	wrlong	local03, fp
1a0ac     08 4E 05 A1 |  if_e	add	fp, #8
1a0b0     A7 3A 68 AC |  if_e	wrlong	#29, fp
1a0b4     08 4E 85 A1 |  if_e	sub	fp, #8
1a0b8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1a0b8     14 4E 05 F1 | 	add	fp, #20
1a0bc     A7 2A 02 FB | 	rdlong	local03, fp
1a0c0     14 4E 85 F1 | 	sub	fp, #20
1a0c4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1a0c8     18 00 90 5D |  if_ne	jmp	#LR__2130
1a0cc     0C 4E 05 F1 | 	add	fp, #12
1a0d0     A7 2A 02 FB | 	rdlong	local03, fp
1a0d4     A7 2A 62 FC | 	wrlong	local03, fp
1a0d8     08 4E 05 F1 | 	add	fp, #8
1a0dc     A7 3A 68 FC | 	wrlong	#29, fp
1a0e0     14 4E 85 F1 | 	sub	fp, #20
1a0e4                 | LR__2130
1a0e4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1a0e4     08 4E 05 F1 | 	add	fp, #8
1a0e8     A7 2A 02 FB | 	rdlong	local03, fp
1a0ec     08 4E 85 F1 | 	sub	fp, #8
1a0f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a0f4     14 4E 05 51 |  if_ne	add	fp, #20
1a0f8     A7 28 02 5B |  if_ne	rdlong	local02, fp
1a0fc     14 4E 85 51 |  if_ne	sub	fp, #20
1a100     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1a104     08 4E 05 51 |  if_ne	add	fp, #8
1a108     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1a10c     08 4E 85 51 |  if_ne	sub	fp, #8
1a110     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1a114     14 4E 05 51 |  if_ne	add	fp, #20
1a118     14 4E 85 51 |  if_ne	sub	fp, #20
1a11c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1a120     A7 0C 68 AC |  if_e	wrlong	#6, fp
1a124     08 4E 05 A1 |  if_e	add	fp, #8
1a128     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a12c     08 4E 85 A1 |  if_e	sub	fp, #8
1a130     18 00 90 AD |  if_e	jmp	#LR__2131
1a134     A7 2A 02 FB | 	rdlong	local03, fp
1a138     0C 4E 05 F1 | 	add	fp, #12
1a13c     A7 26 02 FB | 	rdlong	local01, fp
1a140     0C 4E 85 F1 | 	sub	fp, #12
1a144     13 2B 02 F5 | 	and	local03, local01
1a148     A7 2A 62 FC | 	wrlong	local03, fp
1a14c                 | LR__2131
1a14c     A7 12 02 F6 | 	mov	arg01, fp
1a150     24 28 BF FD | 	call	#_push
1a154     A7 F0 03 F6 | 	mov	ptra, fp
1a158     B2 00 A0 FD | 	call	#popregs_
1a15c                 | _do_and_ret
1a15c     2D 00 64 FD | 	ret
1a160                 | 
1a160                 | ' 
1a160                 | ' '--------------------------------- DIV (integer divide)
1a160                 | ' 
1a160                 | ' sub do_div 
1a160                 | _do_div
1a160     01 4A 05 F6 | 	mov	COUNT_, #1
1a164     A8 00 A0 FD | 	call	#pushregs_
1a168     18 F0 07 F1 | 	add	ptra, #24
1a16c     70 27 BF FD | 	call	#_pop
1a170     FD 8A 02 F6 | 	mov	muldivb_, result1
1a174     FE 88 02 F6 | 	mov	muldiva_, result2
1a178     FF 26 02 F6 | 	mov	local01, result3
1a17c     0C 4E 05 F1 | 	add	fp, #12
1a180     A7 8A 62 FC | 	wrlong	muldivb_, fp
1a184     04 4E 05 F1 | 	add	fp, #4
1a188     A7 88 62 FC | 	wrlong	muldiva_, fp
1a18c     04 4E 05 F1 | 	add	fp, #4
1a190     A7 26 62 FC | 	wrlong	local01, fp
1a194     14 4E 85 F1 | 	sub	fp, #20
1a198     44 27 BF FD | 	call	#_pop
1a19c     A7 FA 61 FC | 	wrlong	result1, fp
1a1a0     04 4E 05 F1 | 	add	fp, #4
1a1a4     A7 FC 61 FC | 	wrlong	result2, fp
1a1a8     04 4E 05 F1 | 	add	fp, #4
1a1ac     A7 FE 61 FC | 	wrlong	result3, fp
1a1b0                 | ' 
1a1b0                 | ' t2=pop()
1a1b0                 | ' t1=pop()
1a1b0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1a1b0     08 4E 85 F1 | 	sub	fp, #8
1a1b4     1F FE 0D F2 | 	cmp	result3, #31 wz
1a1b8     14 4E 05 51 |  if_ne	add	fp, #20
1a1bc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a1c0     14 4E 85 51 |  if_ne	sub	fp, #20
1a1c4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1a1c8     A7 14 68 AC |  if_e	wrlong	#10, fp
1a1cc     08 4E 05 A1 |  if_e	add	fp, #8
1a1d0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a1d4     08 4E 85 A1 |  if_e	sub	fp, #8
1a1d8     90 01 90 AD |  if_e	jmp	#LR__2146
1a1dc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1a1dc     08 4E 05 F1 | 	add	fp, #8
1a1e0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a1e4     08 4E 85 F1 | 	sub	fp, #8
1a1e8     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1a1ec     1C 00 90 5D |  if_ne	jmp	#LR__2140
1a1f0     08 4E 05 F1 | 	add	fp, #8
1a1f4     A7 38 68 FC | 	wrlong	#28, fp
1a1f8     08 4E 85 F1 | 	sub	fp, #8
1a1fc     A7 12 02 FB | 	rdlong	arg01, fp
1a200     00 14 06 F6 | 	mov	arg02, #0
1a204     CC C0 B0 FD | 	call	#__system___float_tointeger
1a208     A7 FA 61 FC | 	wrlong	result1, fp
1a20c                 | LR__2140
1a20c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1a20c     14 4E 05 F1 | 	add	fp, #20
1a210     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a214     14 4E 85 F1 | 	sub	fp, #20
1a218     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1a21c     28 00 90 5D |  if_ne	jmp	#LR__2141
1a220     14 4E 05 F1 | 	add	fp, #20
1a224     A7 38 68 FC | 	wrlong	#28, fp
1a228     08 4E 85 F1 | 	sub	fp, #8
1a22c     A7 12 02 FB | 	rdlong	arg01, fp
1a230     0C 4E 85 F1 | 	sub	fp, #12
1a234     00 14 06 F6 | 	mov	arg02, #0
1a238     98 C0 B0 FD | 	call	#__system___float_tointeger
1a23c     0C 4E 05 F1 | 	add	fp, #12
1a240     A7 FA 61 FC | 	wrlong	result1, fp
1a244     0C 4E 85 F1 | 	sub	fp, #12
1a248                 | LR__2141
1a248                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1a248     08 4E 05 F1 | 	add	fp, #8
1a24c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a250     08 4E 85 F1 | 	sub	fp, #8
1a254     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1a258     14 4E 05 A1 |  if_e	add	fp, #20
1a25c     A7 26 02 AB |  if_e	rdlong	local01, fp
1a260     14 4E 85 A1 |  if_e	sub	fp, #20
1a264     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1a268     20 00 90 5D |  if_ne	jmp	#LR__2142
1a26c     0C 4E 05 F1 | 	add	fp, #12
1a270     A7 26 02 FB | 	rdlong	local01, fp
1a274     0C 4E 85 F1 | 	sub	fp, #12
1a278     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a27c     13 8B 12 FD | 	qdiv	muldivb_, local01
1a280     18 26 62 FD | 	getqx	local01
1a284     A7 26 62 FC | 	wrlong	local01, fp
1a288     E0 00 90 FD | 	jmp	#LR__2146
1a28c                 | LR__2142
1a28c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1a28c     08 4E 05 F1 | 	add	fp, #8
1a290     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a294     08 4E 85 F1 | 	sub	fp, #8
1a298     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1a29c     14 4E 05 A1 |  if_e	add	fp, #20
1a2a0     A7 26 02 AB |  if_e	rdlong	local01, fp
1a2a4     14 4E 85 A1 |  if_e	sub	fp, #20
1a2a8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1a2ac     2C 00 90 5D |  if_ne	jmp	#LR__2143
1a2b0     0C 4E 05 F1 | 	add	fp, #12
1a2b4     A7 26 02 FB | 	rdlong	local01, fp
1a2b8     0C 4E 85 F1 | 	sub	fp, #12
1a2bc     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a2c0     13 8B 12 FD | 	qdiv	muldivb_, local01
1a2c4     18 26 62 FD | 	getqx	local01
1a2c8     A7 26 62 FC | 	wrlong	local01, fp
1a2cc     08 4E 05 F1 | 	add	fp, #8
1a2d0     A7 38 68 FC | 	wrlong	#28, fp
1a2d4     08 4E 85 F1 | 	sub	fp, #8
1a2d8     90 00 90 FD | 	jmp	#LR__2146
1a2dc                 | LR__2143
1a2dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1a2dc     08 4E 05 F1 | 	add	fp, #8
1a2e0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a2e4     08 4E 85 F1 | 	sub	fp, #8
1a2e8     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1a2ec     14 4E 05 A1 |  if_e	add	fp, #20
1a2f0     A7 26 02 AB |  if_e	rdlong	local01, fp
1a2f4     14 4E 85 A1 |  if_e	sub	fp, #20
1a2f8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1a2fc     1C 00 90 5D |  if_ne	jmp	#LR__2144
1a300     A7 88 02 FB | 	rdlong	muldiva_, fp
1a304     0C 4E 05 F1 | 	add	fp, #12
1a308     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a30c     0C 4E 85 F1 | 	sub	fp, #12
1a310     BA 00 A0 FD | 	call	#divide_
1a314     A7 8A 62 FC | 	wrlong	muldivb_, fp
1a318     50 00 90 FD | 	jmp	#LR__2146
1a31c                 | LR__2144
1a31c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1a31c     08 4E 05 F1 | 	add	fp, #8
1a320     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a324     08 4E 85 F1 | 	sub	fp, #8
1a328     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1a32c     14 4E 05 A1 |  if_e	add	fp, #20
1a330     A7 26 02 AB |  if_e	rdlong	local01, fp
1a334     14 4E 85 A1 |  if_e	sub	fp, #20
1a338     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1a33c     1C 00 90 5D |  if_ne	jmp	#LR__2145
1a340     A7 88 02 FB | 	rdlong	muldiva_, fp
1a344     0C 4E 05 F1 | 	add	fp, #12
1a348     A7 8A 02 FB | 	rdlong	muldivb_, fp
1a34c     0C 4E 85 F1 | 	sub	fp, #12
1a350     BA 00 A0 FD | 	call	#divide_
1a354     A7 8A 62 FC | 	wrlong	muldivb_, fp
1a358     10 00 90 FD | 	jmp	#LR__2146
1a35c                 | LR__2145
1a35c     A7 16 68 FC | 	wrlong	#11, fp
1a360     08 4E 05 F1 | 	add	fp, #8
1a364     A7 FE 69 FC | 	wrlong	#255, fp
1a368     08 4E 85 F1 | 	sub	fp, #8
1a36c                 | LR__2146
1a36c     A7 12 02 F6 | 	mov	arg01, fp
1a370     04 26 BF FD | 	call	#_push
1a374     A7 F0 03 F6 | 	mov	ptra, fp
1a378     B2 00 A0 FD | 	call	#popregs_
1a37c                 | _do_div_ret
1a37c     2D 00 64 FD | 	ret
1a380                 | 
1a380                 | ' 
1a380                 | ' '--------------------------------- equal (=)
1a380                 | ' 
1a380                 | ' sub do_eq
1a380                 | _do_eq
1a380     05 4A 05 F6 | 	mov	COUNT_, #5
1a384     A8 00 A0 FD | 	call	#pushregs_
1a388     18 F0 07 F1 | 	add	ptra, #24
1a38c     50 25 BF FD | 	call	#_pop
1a390     FD 26 02 F6 | 	mov	local01, result1
1a394     FE 28 02 F6 | 	mov	local02, result2
1a398     FF 2A 02 F6 | 	mov	local03, result3
1a39c     0C 4E 05 F1 | 	add	fp, #12
1a3a0     A7 26 62 FC | 	wrlong	local01, fp
1a3a4     04 4E 05 F1 | 	add	fp, #4
1a3a8     A7 28 62 FC | 	wrlong	local02, fp
1a3ac     04 4E 05 F1 | 	add	fp, #4
1a3b0     A7 2A 62 FC | 	wrlong	local03, fp
1a3b4     14 4E 85 F1 | 	sub	fp, #20
1a3b8     24 25 BF FD | 	call	#_pop
1a3bc     FF 2A 02 F6 | 	mov	local03, result3
1a3c0     A7 FA 61 FC | 	wrlong	result1, fp
1a3c4     04 4E 05 F1 | 	add	fp, #4
1a3c8     A7 FC 61 FC | 	wrlong	result2, fp
1a3cc     04 4E 05 F1 | 	add	fp, #4
1a3d0     A7 2A 62 FC | 	wrlong	local03, fp
1a3d4                 | ' 
1a3d4                 | ' t2=pop()
1a3d4                 | ' t1=pop()
1a3d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1a3d4     08 4E 85 F1 | 	sub	fp, #8
1a3d8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a3dc     14 4E 05 A1 |  if_e	add	fp, #20
1a3e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a3e4     14 4E 85 A1 |  if_e	sub	fp, #20
1a3e8     16 2B 02 A6 |  if_e	mov	local03, local04
1a3ec     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a3f0     28 00 90 5D |  if_ne	jmp	#LR__2150
1a3f4     00 26 06 F6 | 	mov	local01, #0
1a3f8     A7 12 02 FB | 	rdlong	arg01, fp
1a3fc     0C 4E 05 F1 | 	add	fp, #12
1a400     A7 14 02 FB | 	rdlong	arg02, fp
1a404     0C 4E 85 F1 | 	sub	fp, #12
1a408     B0 8B B0 FD | 	call	#__system___string_cmp
1a40c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a410     00 26 26 A6 |  if_e	not	local01, #0
1a414     A7 26 62 FC | 	wrlong	local01, fp
1a418     20 04 90 FD | 	jmp	#LR__2163
1a41c                 | LR__2150
1a41c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1a41c     08 4E 05 F1 | 	add	fp, #8
1a420     A7 26 02 FB | 	rdlong	local01, fp
1a424     08 4E 85 F1 | 	sub	fp, #8
1a428     1E 26 0E F2 | 	cmp	local01, #30 wz
1a42c     14 4E 05 A1 |  if_e	add	fp, #20
1a430     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a434     14 4E 85 A1 |  if_e	sub	fp, #20
1a438     16 2B 02 A6 |  if_e	mov	local03, local04
1a43c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a440     2C 00 90 5D |  if_ne	jmp	#LR__2151
1a444     00 26 06 F6 | 	mov	local01, #0
1a448     A7 12 02 FB | 	rdlong	arg01, fp
1a44c     0C 4E 05 F1 | 	add	fp, #12
1a450     A7 14 02 FB | 	rdlong	arg02, fp
1a454     0C 4E 85 F1 | 	sub	fp, #12
1a458     01 16 06 F6 | 	mov	arg03, #1
1a45c     E0 BD B0 FD | 	call	#__system___float_cmp
1a460     00 FA 0D F2 | 	cmp	result1, #0 wz
1a464     00 26 26 A6 |  if_e	not	local01, #0
1a468     A7 26 62 FC | 	wrlong	local01, fp
1a46c     CC 03 90 FD | 	jmp	#LR__2163
1a470                 | LR__2151
1a470                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1a470     08 4E 05 F1 | 	add	fp, #8
1a474     A7 26 02 FB | 	rdlong	local01, fp
1a478     08 4E 85 F1 | 	sub	fp, #8
1a47c     1E 26 0E F2 | 	cmp	local01, #30 wz
1a480     14 4E 05 A1 |  if_e	add	fp, #20
1a484     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a488     14 4E 85 A1 |  if_e	sub	fp, #20
1a48c     16 2B 02 A6 |  if_e	mov	local03, local04
1a490     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a494     48 00 90 5D |  if_ne	jmp	#LR__2152
1a498     00 26 06 F6 | 	mov	local01, #0
1a49c     A7 28 02 FB | 	rdlong	local02, fp
1a4a0     0C 4E 05 F1 | 	add	fp, #12
1a4a4     A7 12 02 FB | 	rdlong	arg01, fp
1a4a8     0C 4E 85 F1 | 	sub	fp, #12
1a4ac     09 13 52 F6 | 	abs	arg01, arg01 wc
1a4b0     1F 2E C6 C9 |  if_b	decod	local05, #31
1a4b4     00 2E 06 36 |  if_ae	mov	local05, #0
1a4b8     4C B5 B0 FD | 	call	#__system___float_fromuns
1a4bc     17 FB 61 F5 | 	xor	result1, local05
1a4c0     FD 14 02 F6 | 	mov	arg02, result1
1a4c4     14 13 02 F6 | 	mov	arg01, local02
1a4c8     01 16 06 F6 | 	mov	arg03, #1
1a4cc     70 BD B0 FD | 	call	#__system___float_cmp
1a4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a4d4     00 26 26 A6 |  if_e	not	local01, #0
1a4d8     A7 26 62 FC | 	wrlong	local01, fp
1a4dc     5C 03 90 FD | 	jmp	#LR__2163
1a4e0                 | LR__2152
1a4e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1a4e0     08 4E 05 F1 | 	add	fp, #8
1a4e4     A7 26 02 FB | 	rdlong	local01, fp
1a4e8     08 4E 85 F1 | 	sub	fp, #8
1a4ec     1E 26 0E F2 | 	cmp	local01, #30 wz
1a4f0     14 4E 05 A1 |  if_e	add	fp, #20
1a4f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a4f8     14 4E 85 A1 |  if_e	sub	fp, #20
1a4fc     16 2B 02 A6 |  if_e	mov	local03, local04
1a500     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a504     38 00 90 5D |  if_ne	jmp	#LR__2153
1a508     00 26 06 F6 | 	mov	local01, #0
1a50c     A7 28 02 FB | 	rdlong	local02, fp
1a510     0C 4E 05 F1 | 	add	fp, #12
1a514     A7 12 02 FB | 	rdlong	arg01, fp
1a518     0C 4E 85 F1 | 	sub	fp, #12
1a51c     E8 B4 B0 FD | 	call	#__system___float_fromuns
1a520     FD 14 02 F6 | 	mov	arg02, result1
1a524     14 13 02 F6 | 	mov	arg01, local02
1a528     01 16 06 F6 | 	mov	arg03, #1
1a52c     10 BD B0 FD | 	call	#__system___float_cmp
1a530     00 FA 0D F2 | 	cmp	result1, #0 wz
1a534     00 26 26 A6 |  if_e	not	local01, #0
1a538     A7 26 62 FC | 	wrlong	local01, fp
1a53c     FC 02 90 FD | 	jmp	#LR__2163
1a540                 | LR__2153
1a540                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1a540     08 4E 05 F1 | 	add	fp, #8
1a544     A7 26 02 FB | 	rdlong	local01, fp
1a548     08 4E 85 F1 | 	sub	fp, #8
1a54c     1C 26 0E F2 | 	cmp	local01, #28 wz
1a550     14 4E 05 A1 |  if_e	add	fp, #20
1a554     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a558     14 4E 85 A1 |  if_e	sub	fp, #20
1a55c     16 2B 02 A6 |  if_e	mov	local03, local04
1a560     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a564     44 00 90 5D |  if_ne	jmp	#LR__2154
1a568     00 26 06 F6 | 	mov	local01, #0
1a56c     A7 12 02 FB | 	rdlong	arg01, fp
1a570     09 13 52 F6 | 	abs	arg01, arg01 wc
1a574     1F 2E C6 C9 |  if_b	decod	local05, #31
1a578     00 2E 06 36 |  if_ae	mov	local05, #0
1a57c     88 B4 B0 FD | 	call	#__system___float_fromuns
1a580     17 FB 61 F5 | 	xor	result1, local05
1a584     FD 12 02 F6 | 	mov	arg01, result1
1a588     0C 4E 05 F1 | 	add	fp, #12
1a58c     A7 14 02 FB | 	rdlong	arg02, fp
1a590     0C 4E 85 F1 | 	sub	fp, #12
1a594     01 16 06 F6 | 	mov	arg03, #1
1a598     A4 BC B0 FD | 	call	#__system___float_cmp
1a59c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5a0     00 26 26 A6 |  if_e	not	local01, #0
1a5a4     A7 26 62 FC | 	wrlong	local01, fp
1a5a8     90 02 90 FD | 	jmp	#LR__2163
1a5ac                 | LR__2154
1a5ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1a5ac     08 4E 05 F1 | 	add	fp, #8
1a5b0     A7 26 02 FB | 	rdlong	local01, fp
1a5b4     08 4E 85 F1 | 	sub	fp, #8
1a5b8     1C 26 0E F2 | 	cmp	local01, #28 wz
1a5bc     14 4E 05 A1 |  if_e	add	fp, #20
1a5c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a5c4     14 4E 85 A1 |  if_e	sub	fp, #20
1a5c8     16 2B 02 A6 |  if_e	mov	local03, local04
1a5cc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a5d0     24 00 90 5D |  if_ne	jmp	#LR__2155
1a5d4     00 26 06 F6 | 	mov	local01, #0
1a5d8     A7 28 02 FB | 	rdlong	local02, fp
1a5dc     0C 4E 05 F1 | 	add	fp, #12
1a5e0     A7 2A 02 FB | 	rdlong	local03, fp
1a5e4     0C 4E 85 F1 | 	sub	fp, #12
1a5e8     15 29 0A F2 | 	cmp	local02, local03 wz
1a5ec     01 26 66 A6 |  if_e	neg	local01, #1
1a5f0     A7 26 62 FC | 	wrlong	local01, fp
1a5f4     44 02 90 FD | 	jmp	#LR__2163
1a5f8                 | LR__2155
1a5f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1a5f8     08 4E 05 F1 | 	add	fp, #8
1a5fc     A7 26 02 FB | 	rdlong	local01, fp
1a600     08 4E 85 F1 | 	sub	fp, #8
1a604     1C 26 0E F2 | 	cmp	local01, #28 wz
1a608     14 4E 05 A1 |  if_e	add	fp, #20
1a60c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a610     14 4E 85 A1 |  if_e	sub	fp, #20
1a614     16 2B 02 A6 |  if_e	mov	local03, local04
1a618     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a61c     24 00 90 5D |  if_ne	jmp	#LR__2156
1a620     00 26 06 F6 | 	mov	local01, #0
1a624     A7 28 02 FB | 	rdlong	local02, fp
1a628     0C 4E 05 F1 | 	add	fp, #12
1a62c     A7 2A 02 FB | 	rdlong	local03, fp
1a630     0C 4E 85 F1 | 	sub	fp, #12
1a634     15 29 0A F2 | 	cmp	local02, local03 wz
1a638     01 26 66 A6 |  if_e	neg	local01, #1
1a63c     A7 26 62 FC | 	wrlong	local01, fp
1a640     F8 01 90 FD | 	jmp	#LR__2163
1a644                 | LR__2156
1a644                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1a644     08 4E 05 F1 | 	add	fp, #8
1a648     A7 26 02 FB | 	rdlong	local01, fp
1a64c     08 4E 85 F1 | 	sub	fp, #8
1a650     1D 26 0E F2 | 	cmp	local01, #29 wz
1a654     14 4E 05 A1 |  if_e	add	fp, #20
1a658     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a65c     14 4E 85 A1 |  if_e	sub	fp, #20
1a660     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1a664     34 00 90 5D |  if_ne	jmp	#LR__2157
1a668     00 26 06 F6 | 	mov	local01, #0
1a66c     A7 12 02 FB | 	rdlong	arg01, fp
1a670     94 B3 B0 FD | 	call	#__system___float_fromuns
1a674     FD 12 02 F6 | 	mov	arg01, result1
1a678     0C 4E 05 F1 | 	add	fp, #12
1a67c     A7 14 02 FB | 	rdlong	arg02, fp
1a680     0C 4E 85 F1 | 	sub	fp, #12
1a684     01 16 06 F6 | 	mov	arg03, #1
1a688     B4 BB B0 FD | 	call	#__system___float_cmp
1a68c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a690     00 26 26 A6 |  if_e	not	local01, #0
1a694     A7 26 62 FC | 	wrlong	local01, fp
1a698     A0 01 90 FD | 	jmp	#LR__2163
1a69c                 | LR__2157
1a69c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1a69c     08 4E 05 F1 | 	add	fp, #8
1a6a0     A7 26 02 FB | 	rdlong	local01, fp
1a6a4     08 4E 85 F1 | 	sub	fp, #8
1a6a8     1D 26 0E F2 | 	cmp	local01, #29 wz
1a6ac     14 4E 05 A1 |  if_e	add	fp, #20
1a6b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a6b4     14 4E 85 A1 |  if_e	sub	fp, #20
1a6b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a6bc     24 00 90 5D |  if_ne	jmp	#LR__2158
1a6c0     00 26 06 F6 | 	mov	local01, #0
1a6c4     A7 28 02 FB | 	rdlong	local02, fp
1a6c8     0C 4E 05 F1 | 	add	fp, #12
1a6cc     A7 2A 02 FB | 	rdlong	local03, fp
1a6d0     0C 4E 85 F1 | 	sub	fp, #12
1a6d4     15 29 0A F2 | 	cmp	local02, local03 wz
1a6d8     01 26 66 A6 |  if_e	neg	local01, #1
1a6dc     A7 26 62 FC | 	wrlong	local01, fp
1a6e0     58 01 90 FD | 	jmp	#LR__2163
1a6e4                 | LR__2158
1a6e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1a6e4     08 4E 05 F1 | 	add	fp, #8
1a6e8     A7 26 02 FB | 	rdlong	local01, fp
1a6ec     08 4E 85 F1 | 	sub	fp, #8
1a6f0     1D 26 0E F2 | 	cmp	local01, #29 wz
1a6f4     14 4E 05 A1 |  if_e	add	fp, #20
1a6f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a6fc     14 4E 85 A1 |  if_e	sub	fp, #20
1a700     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a704     24 00 90 5D |  if_ne	jmp	#LR__2159
1a708     00 26 06 F6 | 	mov	local01, #0
1a70c     A7 28 02 FB | 	rdlong	local02, fp
1a710     0C 4E 05 F1 | 	add	fp, #12
1a714     A7 2A 02 FB | 	rdlong	local03, fp
1a718     0C 4E 85 F1 | 	sub	fp, #12
1a71c     15 29 0A F2 | 	cmp	local02, local03 wz
1a720     01 26 66 A6 |  if_e	neg	local01, #1
1a724     A7 26 62 FC | 	wrlong	local01, fp
1a728     10 01 90 FD | 	jmp	#LR__2163
1a72c                 | LR__2159
1a72c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1a72c     08 4E 05 F1 | 	add	fp, #8
1a730     A7 26 02 FB | 	rdlong	local01, fp
1a734     08 4E 85 F1 | 	sub	fp, #8
1a738     2B 26 0E F2 | 	cmp	local01, #43 wz
1a73c     14 4E 05 A1 |  if_e	add	fp, #20
1a740     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a744     14 4E 85 A1 |  if_e	sub	fp, #20
1a748     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a74c     30 00 90 5D |  if_ne	jmp	#LR__2160
1a750     00 26 06 F6 | 	mov	local01, #0
1a754     A7 12 02 FB | 	rdlong	arg01, fp
1a758     FC 22 BF FD | 	call	#_convertstring
1a75c     FD 12 02 F6 | 	mov	arg01, result1
1a760     0C 4E 05 F1 | 	add	fp, #12
1a764     A7 14 02 FB | 	rdlong	arg02, fp
1a768     0C 4E 85 F1 | 	sub	fp, #12
1a76c     4C 88 B0 FD | 	call	#__system___string_cmp
1a770     00 FA 0D F2 | 	cmp	result1, #0 wz
1a774     00 26 26 A6 |  if_e	not	local01, #0
1a778     A7 26 62 FC | 	wrlong	local01, fp
1a77c     BC 00 90 FD | 	jmp	#LR__2163
1a780                 | LR__2160
1a780                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1a780     08 4E 05 F1 | 	add	fp, #8
1a784     A7 26 02 FB | 	rdlong	local01, fp
1a788     08 4E 85 F1 | 	sub	fp, #8
1a78c     1F 26 0E F2 | 	cmp	local01, #31 wz
1a790     14 4E 05 A1 |  if_e	add	fp, #20
1a794     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a798     14 4E 85 A1 |  if_e	sub	fp, #20
1a79c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a7a0     34 00 90 5D |  if_ne	jmp	#LR__2161
1a7a4     00 26 06 F6 | 	mov	local01, #0
1a7a8     A7 28 02 FB | 	rdlong	local02, fp
1a7ac     0C 4E 05 F1 | 	add	fp, #12
1a7b0     A7 12 02 FB | 	rdlong	arg01, fp
1a7b4     0C 4E 85 F1 | 	sub	fp, #12
1a7b8     9C 22 BF FD | 	call	#_convertstring
1a7bc     FD 14 02 F6 | 	mov	arg02, result1
1a7c0     14 13 02 F6 | 	mov	arg01, local02
1a7c4     F4 87 B0 FD | 	call	#__system___string_cmp
1a7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a7cc     00 26 26 A6 |  if_e	not	local01, #0
1a7d0     A7 26 62 FC | 	wrlong	local01, fp
1a7d4     64 00 90 FD | 	jmp	#LR__2163
1a7d8                 | LR__2161
1a7d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1a7d8     08 4E 05 F1 | 	add	fp, #8
1a7dc     A7 26 02 FB | 	rdlong	local01, fp
1a7e0     08 4E 85 F1 | 	sub	fp, #8
1a7e4     2B 26 0E F2 | 	cmp	local01, #43 wz
1a7e8     14 4E 05 A1 |  if_e	add	fp, #20
1a7ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a7f0     14 4E 85 A1 |  if_e	sub	fp, #20
1a7f4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a7f8     3C 00 90 5D |  if_ne	jmp	#LR__2162
1a7fc     00 26 06 F6 | 	mov	local01, #0
1a800     A7 12 02 FB | 	rdlong	arg01, fp
1a804     50 22 BF FD | 	call	#_convertstring
1a808     FD 28 02 F6 | 	mov	local02, result1
1a80c     0C 4E 05 F1 | 	add	fp, #12
1a810     A7 12 02 FB | 	rdlong	arg01, fp
1a814     0C 4E 85 F1 | 	sub	fp, #12
1a818     3C 22 BF FD | 	call	#_convertstring
1a81c     FD 14 02 F6 | 	mov	arg02, result1
1a820     14 13 02 F6 | 	mov	arg01, local02
1a824     94 87 B0 FD | 	call	#__system___string_cmp
1a828     00 FA 0D F2 | 	cmp	result1, #0 wz
1a82c     00 26 26 A6 |  if_e	not	local01, #0
1a830     A7 26 62 FC | 	wrlong	local01, fp
1a834     04 00 90 FD | 	jmp	#LR__2163
1a838                 | LR__2162
1a838     A7 00 68 FC | 	wrlong	#0, fp
1a83c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1a83c                 | LR__2163
1a83c     08 4E 05 F1 | 	add	fp, #8
1a840     A7 38 68 FC | 	wrlong	#28, fp
1a844     08 4E 85 F1 | 	sub	fp, #8
1a848     A7 12 02 F6 | 	mov	arg01, fp
1a84c     28 21 BF FD | 	call	#_push
1a850     A7 F0 03 F6 | 	mov	ptra, fp
1a854     B2 00 A0 FD | 	call	#popregs_
1a858                 | _do_eq_ret
1a858     2D 00 64 FD | 	ret
1a85c                 | 
1a85c                 | ' 
1a85c                 | ' '--------------------------------- fdiv (/) - float divide
1a85c                 | ' 
1a85c                 | ' sub do_fdiv 
1a85c                 | _do_fdiv
1a85c     02 4A 05 F6 | 	mov	COUNT_, #2
1a860     A8 00 A0 FD | 	call	#pushregs_
1a864     18 F0 07 F1 | 	add	ptra, #24
1a868     74 20 BF FD | 	call	#_pop
1a86c     FD 14 02 F6 | 	mov	arg02, result1
1a870     FE 12 02 F6 | 	mov	arg01, result2
1a874     FF 26 02 F6 | 	mov	local01, result3
1a878     0C 4E 05 F1 | 	add	fp, #12
1a87c     A7 14 62 FC | 	wrlong	arg02, fp
1a880     04 4E 05 F1 | 	add	fp, #4
1a884     A7 12 62 FC | 	wrlong	arg01, fp
1a888     04 4E 05 F1 | 	add	fp, #4
1a88c     A7 26 62 FC | 	wrlong	local01, fp
1a890     14 4E 85 F1 | 	sub	fp, #20
1a894     48 20 BF FD | 	call	#_pop
1a898     A7 FA 61 FC | 	wrlong	result1, fp
1a89c     04 4E 05 F1 | 	add	fp, #4
1a8a0     A7 FC 61 FC | 	wrlong	result2, fp
1a8a4     04 4E 05 F1 | 	add	fp, #4
1a8a8     A7 FE 61 FC | 	wrlong	result3, fp
1a8ac                 | ' 
1a8ac                 | ' t2=pop()
1a8ac                 | ' t1=pop()
1a8ac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1a8ac     08 4E 85 F1 | 	sub	fp, #8
1a8b0     1F FE 0D F2 | 	cmp	result3, #31 wz
1a8b4     14 4E 05 51 |  if_ne	add	fp, #20
1a8b8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a8bc     14 4E 85 51 |  if_ne	sub	fp, #20
1a8c0     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1a8c4     A7 14 68 AC |  if_e	wrlong	#10, fp
1a8c8     08 4E 05 A1 |  if_e	add	fp, #8
1a8cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a8d0     08 4E 85 A1 |  if_e	sub	fp, #8
1a8d4     38 01 90 AD |  if_e	jmp	#LR__2175
1a8d8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1a8d8     08 4E 05 F1 | 	add	fp, #8
1a8dc     A7 14 02 FB | 	rdlong	arg02, fp
1a8e0     08 4E 85 F1 | 	sub	fp, #8
1a8e4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1a8e8     28 00 90 5D |  if_ne	jmp	#LR__2170
1a8ec     08 4E 05 F1 | 	add	fp, #8
1a8f0     A7 3C 68 FC | 	wrlong	#30, fp
1a8f4     08 4E 85 F1 | 	sub	fp, #8
1a8f8     A7 12 02 FB | 	rdlong	arg01, fp
1a8fc     09 13 52 F6 | 	abs	arg01, arg01 wc
1a900     1F 28 C6 C9 |  if_b	decod	local02, #31
1a904     00 28 06 36 |  if_ae	mov	local02, #0
1a908     FC B0 B0 FD | 	call	#__system___float_fromuns
1a90c     14 FB 61 F5 | 	xor	result1, local02
1a910     A7 FA 61 FC | 	wrlong	result1, fp
1a914                 | LR__2170
1a914                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1a914     08 4E 05 F1 | 	add	fp, #8
1a918     A7 14 02 FB | 	rdlong	arg02, fp
1a91c     08 4E 85 F1 | 	sub	fp, #8
1a920     1D 14 0E F2 | 	cmp	arg02, #29 wz
1a924     18 00 90 5D |  if_ne	jmp	#LR__2171
1a928     08 4E 05 F1 | 	add	fp, #8
1a92c     A7 3C 68 FC | 	wrlong	#30, fp
1a930     08 4E 85 F1 | 	sub	fp, #8
1a934     A7 12 02 FB | 	rdlong	arg01, fp
1a938     CC B0 B0 FD | 	call	#__system___float_fromuns
1a93c     A7 FA 61 FC | 	wrlong	result1, fp
1a940                 | LR__2171
1a940                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1a940     14 4E 05 F1 | 	add	fp, #20
1a944     A7 14 02 FB | 	rdlong	arg02, fp
1a948     14 4E 85 F1 | 	sub	fp, #20
1a94c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1a950     34 00 90 5D |  if_ne	jmp	#LR__2172
1a954     14 4E 05 F1 | 	add	fp, #20
1a958     A7 3C 68 FC | 	wrlong	#30, fp
1a95c     08 4E 85 F1 | 	sub	fp, #8
1a960     A7 12 02 FB | 	rdlong	arg01, fp
1a964     0C 4E 85 F1 | 	sub	fp, #12
1a968     09 13 52 F6 | 	abs	arg01, arg01 wc
1a96c     1F 28 C6 C9 |  if_b	decod	local02, #31
1a970     00 28 06 36 |  if_ae	mov	local02, #0
1a974     90 B0 B0 FD | 	call	#__system___float_fromuns
1a978     14 FB 61 F5 | 	xor	result1, local02
1a97c     0C 4E 05 F1 | 	add	fp, #12
1a980     A7 FA 61 FC | 	wrlong	result1, fp
1a984     0C 4E 85 F1 | 	sub	fp, #12
1a988                 | LR__2172
1a988                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1a988     14 4E 05 F1 | 	add	fp, #20
1a98c     A7 14 02 FB | 	rdlong	arg02, fp
1a990     14 4E 85 F1 | 	sub	fp, #20
1a994     1D 14 0E F2 | 	cmp	arg02, #29 wz
1a998     24 00 90 5D |  if_ne	jmp	#LR__2173
1a99c     14 4E 05 F1 | 	add	fp, #20
1a9a0     A7 3C 68 FC | 	wrlong	#30, fp
1a9a4     08 4E 85 F1 | 	sub	fp, #8
1a9a8     A7 12 02 FB | 	rdlong	arg01, fp
1a9ac     0C 4E 85 F1 | 	sub	fp, #12
1a9b0     54 B0 B0 FD | 	call	#__system___float_fromuns
1a9b4     0C 4E 05 F1 | 	add	fp, #12
1a9b8     A7 FA 61 FC | 	wrlong	result1, fp
1a9bc     0C 4E 85 F1 | 	sub	fp, #12
1a9c0                 | LR__2173
1a9c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1a9c0     08 4E 05 F1 | 	add	fp, #8
1a9c4     A7 14 02 FB | 	rdlong	arg02, fp
1a9c8     08 4E 85 F1 | 	sub	fp, #8
1a9cc     1E 14 0E F2 | 	cmp	arg02, #30 wz
1a9d0     14 4E 05 A1 |  if_e	add	fp, #20
1a9d4     A7 26 02 AB |  if_e	rdlong	local01, fp
1a9d8     14 4E 85 A1 |  if_e	sub	fp, #20
1a9dc     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1a9e0     1C 00 90 5D |  if_ne	jmp	#LR__2174
1a9e4     A7 12 02 FB | 	rdlong	arg01, fp
1a9e8     0C 4E 05 F1 | 	add	fp, #12
1a9ec     A7 14 02 FB | 	rdlong	arg02, fp
1a9f0     0C 4E 85 F1 | 	sub	fp, #12
1a9f4     18 B6 B0 FD | 	call	#__system___float_div
1a9f8     A7 FA 61 FC | 	wrlong	result1, fp
1a9fc     10 00 90 FD | 	jmp	#LR__2175
1aa00                 | LR__2174
1aa00     A7 16 68 FC | 	wrlong	#11, fp
1aa04     08 4E 05 F1 | 	add	fp, #8
1aa08     A7 FE 69 FC | 	wrlong	#255, fp
1aa0c     08 4E 85 F1 | 	sub	fp, #8
1aa10                 | LR__2175
1aa10     A7 12 02 F6 | 	mov	arg01, fp
1aa14     60 1F BF FD | 	call	#_push
1aa18     A7 F0 03 F6 | 	mov	ptra, fp
1aa1c     B2 00 A0 FD | 	call	#popregs_
1aa20                 | _do_fdiv_ret
1aa20     2D 00 64 FD | 	ret
1aa24                 | 
1aa24                 | ' 
1aa24                 | ' '--------------------------------- greater or equal (>=)
1aa24                 | ' 
1aa24                 | ' sub do_ge
1aa24                 | _do_ge
1aa24     05 4A 05 F6 | 	mov	COUNT_, #5
1aa28     A8 00 A0 FD | 	call	#pushregs_
1aa2c     18 F0 07 F1 | 	add	ptra, #24
1aa30     AC 1E BF FD | 	call	#_pop
1aa34     FD 26 02 F6 | 	mov	local01, result1
1aa38     FE 28 02 F6 | 	mov	local02, result2
1aa3c     FF 2A 02 F6 | 	mov	local03, result3
1aa40     0C 4E 05 F1 | 	add	fp, #12
1aa44     A7 26 62 FC | 	wrlong	local01, fp
1aa48     04 4E 05 F1 | 	add	fp, #4
1aa4c     A7 28 62 FC | 	wrlong	local02, fp
1aa50     04 4E 05 F1 | 	add	fp, #4
1aa54     A7 2A 62 FC | 	wrlong	local03, fp
1aa58     14 4E 85 F1 | 	sub	fp, #20
1aa5c     80 1E BF FD | 	call	#_pop
1aa60     FF 2A 02 F6 | 	mov	local03, result3
1aa64     A7 FA 61 FC | 	wrlong	result1, fp
1aa68     04 4E 05 F1 | 	add	fp, #4
1aa6c     A7 FC 61 FC | 	wrlong	result2, fp
1aa70     04 4E 05 F1 | 	add	fp, #4
1aa74     A7 2A 62 FC | 	wrlong	local03, fp
1aa78                 | ' 
1aa78                 | ' t2=pop()
1aa78                 | ' t1=pop()
1aa78                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1aa78     08 4E 85 F1 | 	sub	fp, #8
1aa7c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1aa80     14 4E 05 A1 |  if_e	add	fp, #20
1aa84     A7 2C 02 AB |  if_e	rdlong	local04, fp
1aa88     14 4E 85 A1 |  if_e	sub	fp, #20
1aa8c     16 2B 02 A6 |  if_e	mov	local03, local04
1aa90     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1aa94     28 00 90 5D |  if_ne	jmp	#LR__2180
1aa98     00 26 06 F6 | 	mov	local01, #0
1aa9c     A7 12 02 FB | 	rdlong	arg01, fp
1aaa0     0C 4E 05 F1 | 	add	fp, #12
1aaa4     A7 14 02 FB | 	rdlong	arg02, fp
1aaa8     0C 4E 85 F1 | 	sub	fp, #12
1aaac     0C 85 B0 FD | 	call	#__system___string_cmp
1aab0     00 FA 55 F2 | 	cmps	result1, #0 wc
1aab4     00 26 26 36 |  if_ae	not	local01, #0
1aab8     A7 26 62 FC | 	wrlong	local01, fp
1aabc     24 04 90 FD | 	jmp	#LR__2193
1aac0                 | LR__2180
1aac0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1aac0     08 4E 05 F1 | 	add	fp, #8
1aac4     A7 26 02 FB | 	rdlong	local01, fp
1aac8     08 4E 85 F1 | 	sub	fp, #8
1aacc     1E 26 0E F2 | 	cmp	local01, #30 wz
1aad0     14 4E 05 A1 |  if_e	add	fp, #20
1aad4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1aad8     14 4E 85 A1 |  if_e	sub	fp, #20
1aadc     16 2B 02 A6 |  if_e	mov	local03, local04
1aae0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1aae4     2C 00 90 5D |  if_ne	jmp	#LR__2181
1aae8     00 26 06 F6 | 	mov	local01, #0
1aaec     A7 12 02 FB | 	rdlong	arg01, fp
1aaf0     0C 4E 05 F1 | 	add	fp, #12
1aaf4     A7 14 02 FB | 	rdlong	arg02, fp
1aaf8     0C 4E 85 F1 | 	sub	fp, #12
1aafc     01 16 66 F6 | 	neg	arg03, #1
1ab00     3C B7 B0 FD | 	call	#__system___float_cmp
1ab04     00 FA 55 F2 | 	cmps	result1, #0 wc
1ab08     00 26 26 36 |  if_ae	not	local01, #0
1ab0c     A7 26 62 FC | 	wrlong	local01, fp
1ab10     D0 03 90 FD | 	jmp	#LR__2193
1ab14                 | LR__2181
1ab14                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1ab14     08 4E 05 F1 | 	add	fp, #8
1ab18     A7 26 02 FB | 	rdlong	local01, fp
1ab1c     08 4E 85 F1 | 	sub	fp, #8
1ab20     1E 26 0E F2 | 	cmp	local01, #30 wz
1ab24     14 4E 05 A1 |  if_e	add	fp, #20
1ab28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ab2c     14 4E 85 A1 |  if_e	sub	fp, #20
1ab30     16 2B 02 A6 |  if_e	mov	local03, local04
1ab34     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ab38     48 00 90 5D |  if_ne	jmp	#LR__2182
1ab3c     00 26 06 F6 | 	mov	local01, #0
1ab40     A7 28 02 FB | 	rdlong	local02, fp
1ab44     0C 4E 05 F1 | 	add	fp, #12
1ab48     A7 12 02 FB | 	rdlong	arg01, fp
1ab4c     0C 4E 85 F1 | 	sub	fp, #12
1ab50     09 13 52 F6 | 	abs	arg01, arg01 wc
1ab54     1F 2E C6 C9 |  if_b	decod	local05, #31
1ab58     00 2E 06 36 |  if_ae	mov	local05, #0
1ab5c     A8 AE B0 FD | 	call	#__system___float_fromuns
1ab60     17 FB 61 F5 | 	xor	result1, local05
1ab64     FD 14 02 F6 | 	mov	arg02, result1
1ab68     14 13 02 F6 | 	mov	arg01, local02
1ab6c     01 16 66 F6 | 	neg	arg03, #1
1ab70     CC B6 B0 FD | 	call	#__system___float_cmp
1ab74     00 FA 55 F2 | 	cmps	result1, #0 wc
1ab78     00 26 26 36 |  if_ae	not	local01, #0
1ab7c     A7 26 62 FC | 	wrlong	local01, fp
1ab80     60 03 90 FD | 	jmp	#LR__2193
1ab84                 | LR__2182
1ab84                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1ab84     08 4E 05 F1 | 	add	fp, #8
1ab88     A7 26 02 FB | 	rdlong	local01, fp
1ab8c     08 4E 85 F1 | 	sub	fp, #8
1ab90     1E 26 0E F2 | 	cmp	local01, #30 wz
1ab94     14 4E 05 A1 |  if_e	add	fp, #20
1ab98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ab9c     14 4E 85 A1 |  if_e	sub	fp, #20
1aba0     16 2B 02 A6 |  if_e	mov	local03, local04
1aba4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1aba8     38 00 90 5D |  if_ne	jmp	#LR__2183
1abac     00 26 06 F6 | 	mov	local01, #0
1abb0     A7 28 02 FB | 	rdlong	local02, fp
1abb4     0C 4E 05 F1 | 	add	fp, #12
1abb8     A7 12 02 FB | 	rdlong	arg01, fp
1abbc     0C 4E 85 F1 | 	sub	fp, #12
1abc0     44 AE B0 FD | 	call	#__system___float_fromuns
1abc4     FD 14 02 F6 | 	mov	arg02, result1
1abc8     14 13 02 F6 | 	mov	arg01, local02
1abcc     01 16 66 F6 | 	neg	arg03, #1
1abd0     6C B6 B0 FD | 	call	#__system___float_cmp
1abd4     00 FA 55 F2 | 	cmps	result1, #0 wc
1abd8     00 26 26 36 |  if_ae	not	local01, #0
1abdc     A7 26 62 FC | 	wrlong	local01, fp
1abe0     00 03 90 FD | 	jmp	#LR__2193
1abe4                 | LR__2183
1abe4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1abe4     08 4E 05 F1 | 	add	fp, #8
1abe8     A7 26 02 FB | 	rdlong	local01, fp
1abec     08 4E 85 F1 | 	sub	fp, #8
1abf0     1C 26 0E F2 | 	cmp	local01, #28 wz
1abf4     14 4E 05 A1 |  if_e	add	fp, #20
1abf8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1abfc     14 4E 85 A1 |  if_e	sub	fp, #20
1ac00     16 2B 02 A6 |  if_e	mov	local03, local04
1ac04     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ac08     44 00 90 5D |  if_ne	jmp	#LR__2184
1ac0c     00 26 06 F6 | 	mov	local01, #0
1ac10     A7 12 02 FB | 	rdlong	arg01, fp
1ac14     09 13 52 F6 | 	abs	arg01, arg01 wc
1ac18     1F 2E C6 C9 |  if_b	decod	local05, #31
1ac1c     00 2E 06 36 |  if_ae	mov	local05, #0
1ac20     E4 AD B0 FD | 	call	#__system___float_fromuns
1ac24     17 FB 61 F5 | 	xor	result1, local05
1ac28     FD 12 02 F6 | 	mov	arg01, result1
1ac2c     0C 4E 05 F1 | 	add	fp, #12
1ac30     A7 14 02 FB | 	rdlong	arg02, fp
1ac34     0C 4E 85 F1 | 	sub	fp, #12
1ac38     01 16 66 F6 | 	neg	arg03, #1
1ac3c     00 B6 B0 FD | 	call	#__system___float_cmp
1ac40     00 FA 55 F2 | 	cmps	result1, #0 wc
1ac44     00 26 26 36 |  if_ae	not	local01, #0
1ac48     A7 26 62 FC | 	wrlong	local01, fp
1ac4c     94 02 90 FD | 	jmp	#LR__2193
1ac50                 | LR__2184
1ac50                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1ac50     08 4E 05 F1 | 	add	fp, #8
1ac54     A7 26 02 FB | 	rdlong	local01, fp
1ac58     08 4E 85 F1 | 	sub	fp, #8
1ac5c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ac60     14 4E 05 A1 |  if_e	add	fp, #20
1ac64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ac68     14 4E 85 A1 |  if_e	sub	fp, #20
1ac6c     16 2B 02 A6 |  if_e	mov	local03, local04
1ac70     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ac74     24 00 90 5D |  if_ne	jmp	#LR__2185
1ac78     00 26 06 F6 | 	mov	local01, #0
1ac7c     A7 28 02 FB | 	rdlong	local02, fp
1ac80     0C 4E 05 F1 | 	add	fp, #12
1ac84     A7 2A 02 FB | 	rdlong	local03, fp
1ac88     0C 4E 85 F1 | 	sub	fp, #12
1ac8c     15 29 52 F2 | 	cmps	local02, local03 wc
1ac90     01 26 66 36 |  if_ae	neg	local01, #1
1ac94     A7 26 62 FC | 	wrlong	local01, fp
1ac98     48 02 90 FD | 	jmp	#LR__2193
1ac9c                 | LR__2185
1ac9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1ac9c     08 4E 05 F1 | 	add	fp, #8
1aca0     A7 26 02 FB | 	rdlong	local01, fp
1aca4     08 4E 85 F1 | 	sub	fp, #8
1aca8     1C 26 0E F2 | 	cmp	local01, #28 wz
1acac     14 4E 05 A1 |  if_e	add	fp, #20
1acb0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1acb4     14 4E 85 A1 |  if_e	sub	fp, #20
1acb8     16 2B 02 A6 |  if_e	mov	local03, local04
1acbc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1acc0     24 00 90 5D |  if_ne	jmp	#LR__2186
1acc4     00 26 06 F6 | 	mov	local01, #0
1acc8     A7 28 02 FB | 	rdlong	local02, fp
1accc     0C 4E 05 F1 | 	add	fp, #12
1acd0     A7 2A 02 FB | 	rdlong	local03, fp
1acd4     0C 4E 85 F1 | 	sub	fp, #12
1acd8     15 29 52 F2 | 	cmps	local02, local03 wc
1acdc     01 26 66 36 |  if_ae	neg	local01, #1
1ace0     A7 26 62 FC | 	wrlong	local01, fp
1ace4     FC 01 90 FD | 	jmp	#LR__2193
1ace8                 | LR__2186
1ace8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1ace8     08 4E 05 F1 | 	add	fp, #8
1acec     A7 26 02 FB | 	rdlong	local01, fp
1acf0     08 4E 85 F1 | 	sub	fp, #8
1acf4     1D 26 0E F2 | 	cmp	local01, #29 wz
1acf8     14 4E 05 A1 |  if_e	add	fp, #20
1acfc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ad00     14 4E 85 A1 |  if_e	sub	fp, #20
1ad04     16 2B 02 A6 |  if_e	mov	local03, local04
1ad08     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ad0c     34 00 90 5D |  if_ne	jmp	#LR__2187
1ad10     00 26 06 F6 | 	mov	local01, #0
1ad14     A7 12 02 FB | 	rdlong	arg01, fp
1ad18     EC AC B0 FD | 	call	#__system___float_fromuns
1ad1c     FD 12 02 F6 | 	mov	arg01, result1
1ad20     0C 4E 05 F1 | 	add	fp, #12
1ad24     A7 14 02 FB | 	rdlong	arg02, fp
1ad28     0C 4E 85 F1 | 	sub	fp, #12
1ad2c     01 16 66 F6 | 	neg	arg03, #1
1ad30     0C B5 B0 FD | 	call	#__system___float_cmp
1ad34     00 FA 55 F2 | 	cmps	result1, #0 wc
1ad38     00 26 26 36 |  if_ae	not	local01, #0
1ad3c     A7 26 62 FC | 	wrlong	local01, fp
1ad40     A0 01 90 FD | 	jmp	#LR__2193
1ad44                 | LR__2187
1ad44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1ad44     08 4E 05 F1 | 	add	fp, #8
1ad48     A7 26 02 FB | 	rdlong	local01, fp
1ad4c     08 4E 85 F1 | 	sub	fp, #8
1ad50     1D 26 0E F2 | 	cmp	local01, #29 wz
1ad54     14 4E 05 A1 |  if_e	add	fp, #20
1ad58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ad5c     14 4E 85 A1 |  if_e	sub	fp, #20
1ad60     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ad64     24 00 90 5D |  if_ne	jmp	#LR__2188
1ad68     00 26 06 F6 | 	mov	local01, #0
1ad6c     A7 28 02 FB | 	rdlong	local02, fp
1ad70     0C 4E 05 F1 | 	add	fp, #12
1ad74     A7 2A 02 FB | 	rdlong	local03, fp
1ad78     0C 4E 85 F1 | 	sub	fp, #12
1ad7c     15 29 52 F2 | 	cmps	local02, local03 wc
1ad80     01 26 66 36 |  if_ae	neg	local01, #1
1ad84     A7 26 62 FC | 	wrlong	local01, fp
1ad88     58 01 90 FD | 	jmp	#LR__2193
1ad8c                 | LR__2188
1ad8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1ad8c     08 4E 05 F1 | 	add	fp, #8
1ad90     A7 26 02 FB | 	rdlong	local01, fp
1ad94     08 4E 85 F1 | 	sub	fp, #8
1ad98     1D 26 0E F2 | 	cmp	local01, #29 wz
1ad9c     14 4E 05 A1 |  if_e	add	fp, #20
1ada0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ada4     14 4E 85 A1 |  if_e	sub	fp, #20
1ada8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1adac     24 00 90 5D |  if_ne	jmp	#LR__2189
1adb0     00 26 06 F6 | 	mov	local01, #0
1adb4     A7 28 02 FB | 	rdlong	local02, fp
1adb8     0C 4E 05 F1 | 	add	fp, #12
1adbc     A7 2A 02 FB | 	rdlong	local03, fp
1adc0     0C 4E 85 F1 | 	sub	fp, #12
1adc4     15 29 12 F2 | 	cmp	local02, local03 wc
1adc8     01 26 66 36 |  if_ae	neg	local01, #1
1adcc     A7 26 62 FC | 	wrlong	local01, fp
1add0     10 01 90 FD | 	jmp	#LR__2193
1add4                 | LR__2189
1add4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1add4     08 4E 05 F1 | 	add	fp, #8
1add8     A7 26 02 FB | 	rdlong	local01, fp
1addc     08 4E 85 F1 | 	sub	fp, #8
1ade0     2B 26 0E F2 | 	cmp	local01, #43 wz
1ade4     14 4E 05 A1 |  if_e	add	fp, #20
1ade8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1adec     14 4E 85 A1 |  if_e	sub	fp, #20
1adf0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1adf4     30 00 90 5D |  if_ne	jmp	#LR__2190
1adf8     00 26 06 F6 | 	mov	local01, #0
1adfc     A7 12 02 FB | 	rdlong	arg01, fp
1ae00     54 1C BF FD | 	call	#_convertstring
1ae04     FD 12 02 F6 | 	mov	arg01, result1
1ae08     0C 4E 05 F1 | 	add	fp, #12
1ae0c     A7 14 02 FB | 	rdlong	arg02, fp
1ae10     0C 4E 85 F1 | 	sub	fp, #12
1ae14     A4 81 B0 FD | 	call	#__system___string_cmp
1ae18     00 FA 55 F2 | 	cmps	result1, #0 wc
1ae1c     00 26 26 36 |  if_ae	not	local01, #0
1ae20     A7 26 62 FC | 	wrlong	local01, fp
1ae24     BC 00 90 FD | 	jmp	#LR__2193
1ae28                 | LR__2190
1ae28                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1ae28     08 4E 05 F1 | 	add	fp, #8
1ae2c     A7 26 02 FB | 	rdlong	local01, fp
1ae30     08 4E 85 F1 | 	sub	fp, #8
1ae34     1F 26 0E F2 | 	cmp	local01, #31 wz
1ae38     14 4E 05 A1 |  if_e	add	fp, #20
1ae3c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ae40     14 4E 85 A1 |  if_e	sub	fp, #20
1ae44     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ae48     34 00 90 5D |  if_ne	jmp	#LR__2191
1ae4c     00 26 06 F6 | 	mov	local01, #0
1ae50     A7 28 02 FB | 	rdlong	local02, fp
1ae54     0C 4E 05 F1 | 	add	fp, #12
1ae58     A7 12 02 FB | 	rdlong	arg01, fp
1ae5c     0C 4E 85 F1 | 	sub	fp, #12
1ae60     F4 1B BF FD | 	call	#_convertstring
1ae64     FD 14 02 F6 | 	mov	arg02, result1
1ae68     14 13 02 F6 | 	mov	arg01, local02
1ae6c     4C 81 B0 FD | 	call	#__system___string_cmp
1ae70     00 FA 55 F2 | 	cmps	result1, #0 wc
1ae74     00 26 26 36 |  if_ae	not	local01, #0
1ae78     A7 26 62 FC | 	wrlong	local01, fp
1ae7c     64 00 90 FD | 	jmp	#LR__2193
1ae80                 | LR__2191
1ae80                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1ae80     08 4E 05 F1 | 	add	fp, #8
1ae84     A7 26 02 FB | 	rdlong	local01, fp
1ae88     08 4E 85 F1 | 	sub	fp, #8
1ae8c     2B 26 0E F2 | 	cmp	local01, #43 wz
1ae90     14 4E 05 A1 |  if_e	add	fp, #20
1ae94     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ae98     14 4E 85 A1 |  if_e	sub	fp, #20
1ae9c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1aea0     3C 00 90 5D |  if_ne	jmp	#LR__2192
1aea4     00 26 06 F6 | 	mov	local01, #0
1aea8     A7 12 02 FB | 	rdlong	arg01, fp
1aeac     A8 1B BF FD | 	call	#_convertstring
1aeb0     FD 28 02 F6 | 	mov	local02, result1
1aeb4     0C 4E 05 F1 | 	add	fp, #12
1aeb8     A7 12 02 FB | 	rdlong	arg01, fp
1aebc     0C 4E 85 F1 | 	sub	fp, #12
1aec0     94 1B BF FD | 	call	#_convertstring
1aec4     FD 14 02 F6 | 	mov	arg02, result1
1aec8     14 13 02 F6 | 	mov	arg01, local02
1aecc     EC 80 B0 FD | 	call	#__system___string_cmp
1aed0     00 FA 55 F2 | 	cmps	result1, #0 wc
1aed4     00 26 26 36 |  if_ae	not	local01, #0
1aed8     A7 26 62 FC | 	wrlong	local01, fp
1aedc     04 00 90 FD | 	jmp	#LR__2193
1aee0                 | LR__2192
1aee0     A7 00 68 FC | 	wrlong	#0, fp
1aee4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1aee4                 | LR__2193
1aee4     08 4E 05 F1 | 	add	fp, #8
1aee8     A7 38 68 FC | 	wrlong	#28, fp
1aeec     08 4E 85 F1 | 	sub	fp, #8
1aef0                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1aef0     A7 26 0A FB | 	rdlong	local01, fp wz
1aef4     A7 02 68 5C |  if_ne	wrlong	#1, fp
1aef8     A7 12 02 F6 | 	mov	arg01, fp
1aefc     78 1A BF FD | 	call	#_push
1af00     A7 F0 03 F6 | 	mov	ptra, fp
1af04     B2 00 A0 FD | 	call	#popregs_
1af08                 | _do_ge_ret
1af08     2D 00 64 FD | 	ret
1af0c                 | 
1af0c                 | ' 
1af0c                 | ' '--------------------------------- greater than (>)
1af0c                 | ' 
1af0c                 | ' sub do_gt
1af0c                 | _do_gt
1af0c     05 4A 05 F6 | 	mov	COUNT_, #5
1af10     A8 00 A0 FD | 	call	#pushregs_
1af14     18 F0 07 F1 | 	add	ptra, #24
1af18     C4 19 BF FD | 	call	#_pop
1af1c     FD 26 02 F6 | 	mov	local01, result1
1af20     FE 28 02 F6 | 	mov	local02, result2
1af24     FF 2A 02 F6 | 	mov	local03, result3
1af28     0C 4E 05 F1 | 	add	fp, #12
1af2c     A7 26 62 FC | 	wrlong	local01, fp
1af30     04 4E 05 F1 | 	add	fp, #4
1af34     A7 28 62 FC | 	wrlong	local02, fp
1af38     04 4E 05 F1 | 	add	fp, #4
1af3c     A7 2A 62 FC | 	wrlong	local03, fp
1af40     14 4E 85 F1 | 	sub	fp, #20
1af44     98 19 BF FD | 	call	#_pop
1af48     FF 2A 02 F6 | 	mov	local03, result3
1af4c     A7 FA 61 FC | 	wrlong	result1, fp
1af50     04 4E 05 F1 | 	add	fp, #4
1af54     A7 FC 61 FC | 	wrlong	result2, fp
1af58     04 4E 05 F1 | 	add	fp, #4
1af5c     A7 2A 62 FC | 	wrlong	local03, fp
1af60                 | ' 
1af60                 | ' t2=pop()
1af60                 | ' t1=pop()
1af60                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1af60     08 4E 85 F1 | 	sub	fp, #8
1af64     1F 2A 0E F2 | 	cmp	local03, #31 wz
1af68     14 4E 05 A1 |  if_e	add	fp, #20
1af6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1af70     14 4E 85 A1 |  if_e	sub	fp, #20
1af74     16 2B 02 A6 |  if_e	mov	local03, local04
1af78     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1af7c     28 00 90 5D |  if_ne	jmp	#LR__2200
1af80     00 26 06 F6 | 	mov	local01, #0
1af84     A7 12 02 FB | 	rdlong	arg01, fp
1af88     0C 4E 05 F1 | 	add	fp, #12
1af8c     A7 14 02 FB | 	rdlong	arg02, fp
1af90     0C 4E 85 F1 | 	sub	fp, #12
1af94     24 80 B0 FD | 	call	#__system___string_cmp
1af98     01 FA 55 F2 | 	cmps	result1, #1 wc
1af9c     00 26 26 36 |  if_ae	not	local01, #0
1afa0     A7 26 62 FC | 	wrlong	local01, fp
1afa4     20 04 90 FD | 	jmp	#LR__2213
1afa8                 | LR__2200
1afa8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1afa8     08 4E 05 F1 | 	add	fp, #8
1afac     A7 26 02 FB | 	rdlong	local01, fp
1afb0     08 4E 85 F1 | 	sub	fp, #8
1afb4     1E 26 0E F2 | 	cmp	local01, #30 wz
1afb8     14 4E 05 A1 |  if_e	add	fp, #20
1afbc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1afc0     14 4E 85 A1 |  if_e	sub	fp, #20
1afc4     16 2B 02 A6 |  if_e	mov	local03, local04
1afc8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1afcc     2C 00 90 5D |  if_ne	jmp	#LR__2201
1afd0     00 26 06 F6 | 	mov	local01, #0
1afd4     A7 12 02 FB | 	rdlong	arg01, fp
1afd8     0C 4E 05 F1 | 	add	fp, #12
1afdc     A7 14 02 FB | 	rdlong	arg02, fp
1afe0     0C 4E 85 F1 | 	sub	fp, #12
1afe4     01 16 66 F6 | 	neg	arg03, #1
1afe8     54 B2 B0 FD | 	call	#__system___float_cmp
1afec     01 FA 55 F2 | 	cmps	result1, #1 wc
1aff0     00 26 26 36 |  if_ae	not	local01, #0
1aff4     A7 26 62 FC | 	wrlong	local01, fp
1aff8     CC 03 90 FD | 	jmp	#LR__2213
1affc                 | LR__2201
1affc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1affc     08 4E 05 F1 | 	add	fp, #8
1b000     A7 26 02 FB | 	rdlong	local01, fp
1b004     08 4E 85 F1 | 	sub	fp, #8
1b008     1E 26 0E F2 | 	cmp	local01, #30 wz
1b00c     14 4E 05 A1 |  if_e	add	fp, #20
1b010     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b014     14 4E 85 A1 |  if_e	sub	fp, #20
1b018     16 2B 02 A6 |  if_e	mov	local03, local04
1b01c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b020     48 00 90 5D |  if_ne	jmp	#LR__2202
1b024     00 26 06 F6 | 	mov	local01, #0
1b028     A7 28 02 FB | 	rdlong	local02, fp
1b02c     0C 4E 05 F1 | 	add	fp, #12
1b030     A7 12 02 FB | 	rdlong	arg01, fp
1b034     0C 4E 85 F1 | 	sub	fp, #12
1b038     09 13 52 F6 | 	abs	arg01, arg01 wc
1b03c     1F 2E C6 C9 |  if_b	decod	local05, #31
1b040     00 2E 06 36 |  if_ae	mov	local05, #0
1b044     C0 A9 B0 FD | 	call	#__system___float_fromuns
1b048     17 FB 61 F5 | 	xor	result1, local05
1b04c     FD 14 02 F6 | 	mov	arg02, result1
1b050     14 13 02 F6 | 	mov	arg01, local02
1b054     01 16 66 F6 | 	neg	arg03, #1
1b058     E4 B1 B0 FD | 	call	#__system___float_cmp
1b05c     01 FA 55 F2 | 	cmps	result1, #1 wc
1b060     00 26 26 36 |  if_ae	not	local01, #0
1b064     A7 26 62 FC | 	wrlong	local01, fp
1b068     5C 03 90 FD | 	jmp	#LR__2213
1b06c                 | LR__2202
1b06c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1b06c     08 4E 05 F1 | 	add	fp, #8
1b070     A7 26 02 FB | 	rdlong	local01, fp
1b074     08 4E 85 F1 | 	sub	fp, #8
1b078     1E 26 0E F2 | 	cmp	local01, #30 wz
1b07c     14 4E 05 A1 |  if_e	add	fp, #20
1b080     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b084     14 4E 85 A1 |  if_e	sub	fp, #20
1b088     16 2B 02 A6 |  if_e	mov	local03, local04
1b08c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b090     38 00 90 5D |  if_ne	jmp	#LR__2203
1b094     00 26 06 F6 | 	mov	local01, #0
1b098     A7 28 02 FB | 	rdlong	local02, fp
1b09c     0C 4E 05 F1 | 	add	fp, #12
1b0a0     A7 12 02 FB | 	rdlong	arg01, fp
1b0a4     0C 4E 85 F1 | 	sub	fp, #12
1b0a8     5C A9 B0 FD | 	call	#__system___float_fromuns
1b0ac     FD 14 02 F6 | 	mov	arg02, result1
1b0b0     14 13 02 F6 | 	mov	arg01, local02
1b0b4     01 16 66 F6 | 	neg	arg03, #1
1b0b8     84 B1 B0 FD | 	call	#__system___float_cmp
1b0bc     01 FA 55 F2 | 	cmps	result1, #1 wc
1b0c0     00 26 26 36 |  if_ae	not	local01, #0
1b0c4     A7 26 62 FC | 	wrlong	local01, fp
1b0c8     FC 02 90 FD | 	jmp	#LR__2213
1b0cc                 | LR__2203
1b0cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1b0cc     08 4E 05 F1 | 	add	fp, #8
1b0d0     A7 26 02 FB | 	rdlong	local01, fp
1b0d4     08 4E 85 F1 | 	sub	fp, #8
1b0d8     1C 26 0E F2 | 	cmp	local01, #28 wz
1b0dc     14 4E 05 A1 |  if_e	add	fp, #20
1b0e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b0e4     14 4E 85 A1 |  if_e	sub	fp, #20
1b0e8     16 2B 02 A6 |  if_e	mov	local03, local04
1b0ec     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b0f0     44 00 90 5D |  if_ne	jmp	#LR__2204
1b0f4     00 26 06 F6 | 	mov	local01, #0
1b0f8     A7 12 02 FB | 	rdlong	arg01, fp
1b0fc     09 13 52 F6 | 	abs	arg01, arg01 wc
1b100     1F 2E C6 C9 |  if_b	decod	local05, #31
1b104     00 2E 06 36 |  if_ae	mov	local05, #0
1b108     FC A8 B0 FD | 	call	#__system___float_fromuns
1b10c     17 FB 61 F5 | 	xor	result1, local05
1b110     FD 12 02 F6 | 	mov	arg01, result1
1b114     0C 4E 05 F1 | 	add	fp, #12
1b118     A7 14 02 FB | 	rdlong	arg02, fp
1b11c     0C 4E 85 F1 | 	sub	fp, #12
1b120     01 16 66 F6 | 	neg	arg03, #1
1b124     18 B1 B0 FD | 	call	#__system___float_cmp
1b128     01 FA 55 F2 | 	cmps	result1, #1 wc
1b12c     00 26 26 36 |  if_ae	not	local01, #0
1b130     A7 26 62 FC | 	wrlong	local01, fp
1b134     90 02 90 FD | 	jmp	#LR__2213
1b138                 | LR__2204
1b138                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1b138     08 4E 05 F1 | 	add	fp, #8
1b13c     A7 26 02 FB | 	rdlong	local01, fp
1b140     08 4E 85 F1 | 	sub	fp, #8
1b144     1C 26 0E F2 | 	cmp	local01, #28 wz
1b148     14 4E 05 A1 |  if_e	add	fp, #20
1b14c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b150     14 4E 85 A1 |  if_e	sub	fp, #20
1b154     16 2B 02 A6 |  if_e	mov	local03, local04
1b158     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b15c     24 00 90 5D |  if_ne	jmp	#LR__2205
1b160     00 26 06 F6 | 	mov	local01, #0
1b164     A7 28 02 FB | 	rdlong	local02, fp
1b168     0C 4E 05 F1 | 	add	fp, #12
1b16c     A7 2A 02 FB | 	rdlong	local03, fp
1b170     0C 4E 85 F1 | 	sub	fp, #12
1b174     15 29 5A F2 | 	cmps	local02, local03 wcz
1b178     01 26 66 16 |  if_a	neg	local01, #1
1b17c     A7 26 62 FC | 	wrlong	local01, fp
1b180     44 02 90 FD | 	jmp	#LR__2213
1b184                 | LR__2205
1b184                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1b184     08 4E 05 F1 | 	add	fp, #8
1b188     A7 26 02 FB | 	rdlong	local01, fp
1b18c     08 4E 85 F1 | 	sub	fp, #8
1b190     1C 26 0E F2 | 	cmp	local01, #28 wz
1b194     14 4E 05 A1 |  if_e	add	fp, #20
1b198     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b19c     14 4E 85 A1 |  if_e	sub	fp, #20
1b1a0     16 2B 02 A6 |  if_e	mov	local03, local04
1b1a4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b1a8     24 00 90 5D |  if_ne	jmp	#LR__2206
1b1ac     00 26 06 F6 | 	mov	local01, #0
1b1b0     A7 28 02 FB | 	rdlong	local02, fp
1b1b4     0C 4E 05 F1 | 	add	fp, #12
1b1b8     A7 2A 02 FB | 	rdlong	local03, fp
1b1bc     0C 4E 85 F1 | 	sub	fp, #12
1b1c0     15 29 5A F2 | 	cmps	local02, local03 wcz
1b1c4     01 26 66 16 |  if_a	neg	local01, #1
1b1c8     A7 26 62 FC | 	wrlong	local01, fp
1b1cc     F8 01 90 FD | 	jmp	#LR__2213
1b1d0                 | LR__2206
1b1d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1b1d0     08 4E 05 F1 | 	add	fp, #8
1b1d4     A7 26 02 FB | 	rdlong	local01, fp
1b1d8     08 4E 85 F1 | 	sub	fp, #8
1b1dc     1D 26 0E F2 | 	cmp	local01, #29 wz
1b1e0     14 4E 05 A1 |  if_e	add	fp, #20
1b1e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b1e8     14 4E 85 A1 |  if_e	sub	fp, #20
1b1ec     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1b1f0     34 00 90 5D |  if_ne	jmp	#LR__2207
1b1f4     00 26 06 F6 | 	mov	local01, #0
1b1f8     A7 12 02 FB | 	rdlong	arg01, fp
1b1fc     08 A8 B0 FD | 	call	#__system___float_fromuns
1b200     FD 12 02 F6 | 	mov	arg01, result1
1b204     0C 4E 05 F1 | 	add	fp, #12
1b208     A7 14 02 FB | 	rdlong	arg02, fp
1b20c     0C 4E 85 F1 | 	sub	fp, #12
1b210     01 16 66 F6 | 	neg	arg03, #1
1b214     28 B0 B0 FD | 	call	#__system___float_cmp
1b218     01 FA 55 F2 | 	cmps	result1, #1 wc
1b21c     00 26 26 36 |  if_ae	not	local01, #0
1b220     A7 26 62 FC | 	wrlong	local01, fp
1b224     A0 01 90 FD | 	jmp	#LR__2213
1b228                 | LR__2207
1b228                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1b228     08 4E 05 F1 | 	add	fp, #8
1b22c     A7 26 02 FB | 	rdlong	local01, fp
1b230     08 4E 85 F1 | 	sub	fp, #8
1b234     1D 26 0E F2 | 	cmp	local01, #29 wz
1b238     14 4E 05 A1 |  if_e	add	fp, #20
1b23c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b240     14 4E 85 A1 |  if_e	sub	fp, #20
1b244     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b248     24 00 90 5D |  if_ne	jmp	#LR__2208
1b24c     00 26 06 F6 | 	mov	local01, #0
1b250     A7 28 02 FB | 	rdlong	local02, fp
1b254     0C 4E 05 F1 | 	add	fp, #12
1b258     A7 2A 02 FB | 	rdlong	local03, fp
1b25c     0C 4E 85 F1 | 	sub	fp, #12
1b260     15 29 5A F2 | 	cmps	local02, local03 wcz
1b264     01 26 66 16 |  if_a	neg	local01, #1
1b268     A7 26 62 FC | 	wrlong	local01, fp
1b26c     58 01 90 FD | 	jmp	#LR__2213
1b270                 | LR__2208
1b270                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1b270     08 4E 05 F1 | 	add	fp, #8
1b274     A7 26 02 FB | 	rdlong	local01, fp
1b278     08 4E 85 F1 | 	sub	fp, #8
1b27c     1D 26 0E F2 | 	cmp	local01, #29 wz
1b280     14 4E 05 A1 |  if_e	add	fp, #20
1b284     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b288     14 4E 85 A1 |  if_e	sub	fp, #20
1b28c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b290     24 00 90 5D |  if_ne	jmp	#LR__2209
1b294     00 26 06 F6 | 	mov	local01, #0
1b298     A7 28 02 FB | 	rdlong	local02, fp
1b29c     0C 4E 05 F1 | 	add	fp, #12
1b2a0     A7 2A 02 FB | 	rdlong	local03, fp
1b2a4     0C 4E 85 F1 | 	sub	fp, #12
1b2a8     15 29 1A F2 | 	cmp	local02, local03 wcz
1b2ac     01 26 66 16 |  if_a	neg	local01, #1
1b2b0     A7 26 62 FC | 	wrlong	local01, fp
1b2b4     10 01 90 FD | 	jmp	#LR__2213
1b2b8                 | LR__2209
1b2b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1b2b8     08 4E 05 F1 | 	add	fp, #8
1b2bc     A7 26 02 FB | 	rdlong	local01, fp
1b2c0     08 4E 85 F1 | 	sub	fp, #8
1b2c4     2B 26 0E F2 | 	cmp	local01, #43 wz
1b2c8     14 4E 05 A1 |  if_e	add	fp, #20
1b2cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b2d0     14 4E 85 A1 |  if_e	sub	fp, #20
1b2d4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b2d8     30 00 90 5D |  if_ne	jmp	#LR__2210
1b2dc     00 26 06 F6 | 	mov	local01, #0
1b2e0     A7 12 02 FB | 	rdlong	arg01, fp
1b2e4     70 17 BF FD | 	call	#_convertstring
1b2e8     FD 12 02 F6 | 	mov	arg01, result1
1b2ec     0C 4E 05 F1 | 	add	fp, #12
1b2f0     A7 14 02 FB | 	rdlong	arg02, fp
1b2f4     0C 4E 85 F1 | 	sub	fp, #12
1b2f8     C0 7C B0 FD | 	call	#__system___string_cmp
1b2fc     01 FA 55 F2 | 	cmps	result1, #1 wc
1b300     00 26 26 36 |  if_ae	not	local01, #0
1b304     A7 26 62 FC | 	wrlong	local01, fp
1b308     BC 00 90 FD | 	jmp	#LR__2213
1b30c                 | LR__2210
1b30c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1b30c     08 4E 05 F1 | 	add	fp, #8
1b310     A7 26 02 FB | 	rdlong	local01, fp
1b314     08 4E 85 F1 | 	sub	fp, #8
1b318     1F 26 0E F2 | 	cmp	local01, #31 wz
1b31c     14 4E 05 A1 |  if_e	add	fp, #20
1b320     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b324     14 4E 85 A1 |  if_e	sub	fp, #20
1b328     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b32c     34 00 90 5D |  if_ne	jmp	#LR__2211
1b330     00 26 06 F6 | 	mov	local01, #0
1b334     A7 28 02 FB | 	rdlong	local02, fp
1b338     0C 4E 05 F1 | 	add	fp, #12
1b33c     A7 12 02 FB | 	rdlong	arg01, fp
1b340     0C 4E 85 F1 | 	sub	fp, #12
1b344     10 17 BF FD | 	call	#_convertstring
1b348     FD 14 02 F6 | 	mov	arg02, result1
1b34c     14 13 02 F6 | 	mov	arg01, local02
1b350     68 7C B0 FD | 	call	#__system___string_cmp
1b354     01 FA 55 F2 | 	cmps	result1, #1 wc
1b358     00 26 26 36 |  if_ae	not	local01, #0
1b35c     A7 26 62 FC | 	wrlong	local01, fp
1b360     64 00 90 FD | 	jmp	#LR__2213
1b364                 | LR__2211
1b364                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1b364     08 4E 05 F1 | 	add	fp, #8
1b368     A7 26 02 FB | 	rdlong	local01, fp
1b36c     08 4E 85 F1 | 	sub	fp, #8
1b370     2B 26 0E F2 | 	cmp	local01, #43 wz
1b374     14 4E 05 A1 |  if_e	add	fp, #20
1b378     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b37c     14 4E 85 A1 |  if_e	sub	fp, #20
1b380     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b384     3C 00 90 5D |  if_ne	jmp	#LR__2212
1b388     00 26 06 F6 | 	mov	local01, #0
1b38c     A7 12 02 FB | 	rdlong	arg01, fp
1b390     C4 16 BF FD | 	call	#_convertstring
1b394     FD 28 02 F6 | 	mov	local02, result1
1b398     0C 4E 05 F1 | 	add	fp, #12
1b39c     A7 12 02 FB | 	rdlong	arg01, fp
1b3a0     0C 4E 85 F1 | 	sub	fp, #12
1b3a4     B0 16 BF FD | 	call	#_convertstring
1b3a8     FD 14 02 F6 | 	mov	arg02, result1
1b3ac     14 13 02 F6 | 	mov	arg01, local02
1b3b0     08 7C B0 FD | 	call	#__system___string_cmp
1b3b4     01 FA 55 F2 | 	cmps	result1, #1 wc
1b3b8     00 26 26 36 |  if_ae	not	local01, #0
1b3bc     A7 26 62 FC | 	wrlong	local01, fp
1b3c0     04 00 90 FD | 	jmp	#LR__2213
1b3c4                 | LR__2212
1b3c4     A7 00 68 FC | 	wrlong	#0, fp
1b3c8                 | LR__2213
1b3c8     08 4E 05 F1 | 	add	fp, #8
1b3cc     A7 38 68 FC | 	wrlong	#28, fp
1b3d0     08 4E 85 F1 | 	sub	fp, #8
1b3d4                 | ' t1.result.uresult=0
1b3d4                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1b3d4     A7 26 0A FB | 	rdlong	local01, fp wz
1b3d8     A7 02 68 5C |  if_ne	wrlong	#1, fp
1b3dc     A7 12 02 F6 | 	mov	arg01, fp
1b3e0     94 15 BF FD | 	call	#_push
1b3e4     A7 F0 03 F6 | 	mov	ptra, fp
1b3e8     B2 00 A0 FD | 	call	#popregs_
1b3ec                 | _do_gt_ret
1b3ec     2D 00 64 FD | 	ret
1b3f0                 | 
1b3f0                 | ' 
1b3f0                 | ' '--------------------------------- less or equal (<=)
1b3f0                 | ' 
1b3f0                 | ' sub do_le
1b3f0                 | _do_le
1b3f0     05 4A 05 F6 | 	mov	COUNT_, #5
1b3f4     A8 00 A0 FD | 	call	#pushregs_
1b3f8     18 F0 07 F1 | 	add	ptra, #24
1b3fc     E0 14 BF FD | 	call	#_pop
1b400     FD 26 02 F6 | 	mov	local01, result1
1b404     FE 28 02 F6 | 	mov	local02, result2
1b408     FF 2A 02 F6 | 	mov	local03, result3
1b40c     0C 4E 05 F1 | 	add	fp, #12
1b410     A7 26 62 FC | 	wrlong	local01, fp
1b414     04 4E 05 F1 | 	add	fp, #4
1b418     A7 28 62 FC | 	wrlong	local02, fp
1b41c     04 4E 05 F1 | 	add	fp, #4
1b420     A7 2A 62 FC | 	wrlong	local03, fp
1b424     14 4E 85 F1 | 	sub	fp, #20
1b428     B4 14 BF FD | 	call	#_pop
1b42c     FF 2A 02 F6 | 	mov	local03, result3
1b430     A7 FA 61 FC | 	wrlong	result1, fp
1b434     04 4E 05 F1 | 	add	fp, #4
1b438     A7 FC 61 FC | 	wrlong	result2, fp
1b43c     04 4E 05 F1 | 	add	fp, #4
1b440     A7 2A 62 FC | 	wrlong	local03, fp
1b444                 | ' 
1b444                 | ' t2=pop()
1b444                 | ' t1=pop()
1b444                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1b444     08 4E 85 F1 | 	sub	fp, #8
1b448     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b44c     14 4E 05 A1 |  if_e	add	fp, #20
1b450     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b454     14 4E 85 A1 |  if_e	sub	fp, #20
1b458     16 2B 02 A6 |  if_e	mov	local03, local04
1b45c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b460     28 00 90 5D |  if_ne	jmp	#LR__2220
1b464     00 26 06 F6 | 	mov	local01, #0
1b468     A7 12 02 FB | 	rdlong	arg01, fp
1b46c     0C 4E 05 F1 | 	add	fp, #12
1b470     A7 14 02 FB | 	rdlong	arg02, fp
1b474     0C 4E 85 F1 | 	sub	fp, #12
1b478     40 7B B0 FD | 	call	#__system___string_cmp
1b47c     01 FA 55 F2 | 	cmps	result1, #1 wc
1b480     00 26 26 C6 |  if_b	not	local01, #0
1b484     A7 26 62 FC | 	wrlong	local01, fp
1b488     20 04 90 FD | 	jmp	#LR__2233
1b48c                 | LR__2220
1b48c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1b48c     08 4E 05 F1 | 	add	fp, #8
1b490     A7 26 02 FB | 	rdlong	local01, fp
1b494     08 4E 85 F1 | 	sub	fp, #8
1b498     1E 26 0E F2 | 	cmp	local01, #30 wz
1b49c     14 4E 05 A1 |  if_e	add	fp, #20
1b4a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b4a4     14 4E 85 A1 |  if_e	sub	fp, #20
1b4a8     16 2B 02 A6 |  if_e	mov	local03, local04
1b4ac     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b4b0     2C 00 90 5D |  if_ne	jmp	#LR__2221
1b4b4     00 26 06 F6 | 	mov	local01, #0
1b4b8     A7 12 02 FB | 	rdlong	arg01, fp
1b4bc     0C 4E 05 F1 | 	add	fp, #12
1b4c0     A7 14 02 FB | 	rdlong	arg02, fp
1b4c4     0C 4E 85 F1 | 	sub	fp, #12
1b4c8     01 16 06 F6 | 	mov	arg03, #1
1b4cc     70 AD B0 FD | 	call	#__system___float_cmp
1b4d0     01 FA 55 F2 | 	cmps	result1, #1 wc
1b4d4     00 26 26 C6 |  if_b	not	local01, #0
1b4d8     A7 26 62 FC | 	wrlong	local01, fp
1b4dc     CC 03 90 FD | 	jmp	#LR__2233
1b4e0                 | LR__2221
1b4e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1b4e0     08 4E 05 F1 | 	add	fp, #8
1b4e4     A7 26 02 FB | 	rdlong	local01, fp
1b4e8     08 4E 85 F1 | 	sub	fp, #8
1b4ec     1E 26 0E F2 | 	cmp	local01, #30 wz
1b4f0     14 4E 05 A1 |  if_e	add	fp, #20
1b4f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b4f8     14 4E 85 A1 |  if_e	sub	fp, #20
1b4fc     16 2B 02 A6 |  if_e	mov	local03, local04
1b500     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b504     48 00 90 5D |  if_ne	jmp	#LR__2222
1b508     00 26 06 F6 | 	mov	local01, #0
1b50c     A7 28 02 FB | 	rdlong	local02, fp
1b510     0C 4E 05 F1 | 	add	fp, #12
1b514     A7 12 02 FB | 	rdlong	arg01, fp
1b518     0C 4E 85 F1 | 	sub	fp, #12
1b51c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b520     1F 2E C6 C9 |  if_b	decod	local05, #31
1b524     00 2E 06 36 |  if_ae	mov	local05, #0
1b528     DC A4 B0 FD | 	call	#__system___float_fromuns
1b52c     17 FB 61 F5 | 	xor	result1, local05
1b530     FD 14 02 F6 | 	mov	arg02, result1
1b534     14 13 02 F6 | 	mov	arg01, local02
1b538     01 16 06 F6 | 	mov	arg03, #1
1b53c     00 AD B0 FD | 	call	#__system___float_cmp
1b540     01 FA 55 F2 | 	cmps	result1, #1 wc
1b544     00 26 26 C6 |  if_b	not	local01, #0
1b548     A7 26 62 FC | 	wrlong	local01, fp
1b54c     5C 03 90 FD | 	jmp	#LR__2233
1b550                 | LR__2222
1b550                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1b550     08 4E 05 F1 | 	add	fp, #8
1b554     A7 26 02 FB | 	rdlong	local01, fp
1b558     08 4E 85 F1 | 	sub	fp, #8
1b55c     1E 26 0E F2 | 	cmp	local01, #30 wz
1b560     14 4E 05 A1 |  if_e	add	fp, #20
1b564     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b568     14 4E 85 A1 |  if_e	sub	fp, #20
1b56c     16 2B 02 A6 |  if_e	mov	local03, local04
1b570     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b574     38 00 90 5D |  if_ne	jmp	#LR__2223
1b578     00 26 06 F6 | 	mov	local01, #0
1b57c     A7 28 02 FB | 	rdlong	local02, fp
1b580     0C 4E 05 F1 | 	add	fp, #12
1b584     A7 12 02 FB | 	rdlong	arg01, fp
1b588     0C 4E 85 F1 | 	sub	fp, #12
1b58c     78 A4 B0 FD | 	call	#__system___float_fromuns
1b590     FD 14 02 F6 | 	mov	arg02, result1
1b594     14 13 02 F6 | 	mov	arg01, local02
1b598     01 16 06 F6 | 	mov	arg03, #1
1b59c     A0 AC B0 FD | 	call	#__system___float_cmp
1b5a0     01 FA 55 F2 | 	cmps	result1, #1 wc
1b5a4     00 26 26 C6 |  if_b	not	local01, #0
1b5a8     A7 26 62 FC | 	wrlong	local01, fp
1b5ac     FC 02 90 FD | 	jmp	#LR__2233
1b5b0                 | LR__2223
1b5b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1b5b0     08 4E 05 F1 | 	add	fp, #8
1b5b4     A7 26 02 FB | 	rdlong	local01, fp
1b5b8     08 4E 85 F1 | 	sub	fp, #8
1b5bc     1C 26 0E F2 | 	cmp	local01, #28 wz
1b5c0     14 4E 05 A1 |  if_e	add	fp, #20
1b5c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b5c8     14 4E 85 A1 |  if_e	sub	fp, #20
1b5cc     16 2B 02 A6 |  if_e	mov	local03, local04
1b5d0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b5d4     44 00 90 5D |  if_ne	jmp	#LR__2224
1b5d8     00 26 06 F6 | 	mov	local01, #0
1b5dc     A7 12 02 FB | 	rdlong	arg01, fp
1b5e0     09 13 52 F6 | 	abs	arg01, arg01 wc
1b5e4     1F 2E C6 C9 |  if_b	decod	local05, #31
1b5e8     00 2E 06 36 |  if_ae	mov	local05, #0
1b5ec     18 A4 B0 FD | 	call	#__system___float_fromuns
1b5f0     17 FB 61 F5 | 	xor	result1, local05
1b5f4     FD 12 02 F6 | 	mov	arg01, result1
1b5f8     0C 4E 05 F1 | 	add	fp, #12
1b5fc     A7 14 02 FB | 	rdlong	arg02, fp
1b600     0C 4E 85 F1 | 	sub	fp, #12
1b604     01 16 06 F6 | 	mov	arg03, #1
1b608     34 AC B0 FD | 	call	#__system___float_cmp
1b60c     01 FA 55 F2 | 	cmps	result1, #1 wc
1b610     00 26 26 C6 |  if_b	not	local01, #0
1b614     A7 26 62 FC | 	wrlong	local01, fp
1b618     90 02 90 FD | 	jmp	#LR__2233
1b61c                 | LR__2224
1b61c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1b61c     08 4E 05 F1 | 	add	fp, #8
1b620     A7 26 02 FB | 	rdlong	local01, fp
1b624     08 4E 85 F1 | 	sub	fp, #8
1b628     1C 26 0E F2 | 	cmp	local01, #28 wz
1b62c     14 4E 05 A1 |  if_e	add	fp, #20
1b630     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b634     14 4E 85 A1 |  if_e	sub	fp, #20
1b638     16 2B 02 A6 |  if_e	mov	local03, local04
1b63c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b640     24 00 90 5D |  if_ne	jmp	#LR__2225
1b644     00 26 06 F6 | 	mov	local01, #0
1b648     A7 28 02 FB | 	rdlong	local02, fp
1b64c     0C 4E 05 F1 | 	add	fp, #12
1b650     A7 2A 02 FB | 	rdlong	local03, fp
1b654     0C 4E 85 F1 | 	sub	fp, #12
1b658     15 29 5A F2 | 	cmps	local02, local03 wcz
1b65c     01 26 66 E6 |  if_be	neg	local01, #1
1b660     A7 26 62 FC | 	wrlong	local01, fp
1b664     44 02 90 FD | 	jmp	#LR__2233
1b668                 | LR__2225
1b668                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1b668     08 4E 05 F1 | 	add	fp, #8
1b66c     A7 26 02 FB | 	rdlong	local01, fp
1b670     08 4E 85 F1 | 	sub	fp, #8
1b674     1C 26 0E F2 | 	cmp	local01, #28 wz
1b678     14 4E 05 A1 |  if_e	add	fp, #20
1b67c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b680     14 4E 85 A1 |  if_e	sub	fp, #20
1b684     16 2B 02 A6 |  if_e	mov	local03, local04
1b688     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b68c     24 00 90 5D |  if_ne	jmp	#LR__2226
1b690     00 26 06 F6 | 	mov	local01, #0
1b694     A7 28 02 FB | 	rdlong	local02, fp
1b698     0C 4E 05 F1 | 	add	fp, #12
1b69c     A7 2A 02 FB | 	rdlong	local03, fp
1b6a0     0C 4E 85 F1 | 	sub	fp, #12
1b6a4     15 29 5A F2 | 	cmps	local02, local03 wcz
1b6a8     01 26 66 E6 |  if_be	neg	local01, #1
1b6ac     A7 26 62 FC | 	wrlong	local01, fp
1b6b0     F8 01 90 FD | 	jmp	#LR__2233
1b6b4                 | LR__2226
1b6b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1b6b4     08 4E 05 F1 | 	add	fp, #8
1b6b8     A7 26 02 FB | 	rdlong	local01, fp
1b6bc     08 4E 85 F1 | 	sub	fp, #8
1b6c0     1D 26 0E F2 | 	cmp	local01, #29 wz
1b6c4     14 4E 05 A1 |  if_e	add	fp, #20
1b6c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b6cc     14 4E 85 A1 |  if_e	sub	fp, #20
1b6d0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1b6d4     34 00 90 5D |  if_ne	jmp	#LR__2227
1b6d8     00 26 06 F6 | 	mov	local01, #0
1b6dc     A7 12 02 FB | 	rdlong	arg01, fp
1b6e0     24 A3 B0 FD | 	call	#__system___float_fromuns
1b6e4     FD 12 02 F6 | 	mov	arg01, result1
1b6e8     0C 4E 05 F1 | 	add	fp, #12
1b6ec     A7 14 02 FB | 	rdlong	arg02, fp
1b6f0     0C 4E 85 F1 | 	sub	fp, #12
1b6f4     01 16 06 F6 | 	mov	arg03, #1
1b6f8     44 AB B0 FD | 	call	#__system___float_cmp
1b6fc     01 FA 55 F2 | 	cmps	result1, #1 wc
1b700     00 26 26 C6 |  if_b	not	local01, #0
1b704     A7 26 62 FC | 	wrlong	local01, fp
1b708     A0 01 90 FD | 	jmp	#LR__2233
1b70c                 | LR__2227
1b70c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1b70c     08 4E 05 F1 | 	add	fp, #8
1b710     A7 26 02 FB | 	rdlong	local01, fp
1b714     08 4E 85 F1 | 	sub	fp, #8
1b718     1D 26 0E F2 | 	cmp	local01, #29 wz
1b71c     14 4E 05 A1 |  if_e	add	fp, #20
1b720     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b724     14 4E 85 A1 |  if_e	sub	fp, #20
1b728     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b72c     24 00 90 5D |  if_ne	jmp	#LR__2228
1b730     00 26 06 F6 | 	mov	local01, #0
1b734     A7 28 02 FB | 	rdlong	local02, fp
1b738     0C 4E 05 F1 | 	add	fp, #12
1b73c     A7 2A 02 FB | 	rdlong	local03, fp
1b740     0C 4E 85 F1 | 	sub	fp, #12
1b744     15 29 5A F2 | 	cmps	local02, local03 wcz
1b748     01 26 66 E6 |  if_be	neg	local01, #1
1b74c     A7 26 62 FC | 	wrlong	local01, fp
1b750     58 01 90 FD | 	jmp	#LR__2233
1b754                 | LR__2228
1b754                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1b754     08 4E 05 F1 | 	add	fp, #8
1b758     A7 26 02 FB | 	rdlong	local01, fp
1b75c     08 4E 85 F1 | 	sub	fp, #8
1b760     1D 26 0E F2 | 	cmp	local01, #29 wz
1b764     14 4E 05 A1 |  if_e	add	fp, #20
1b768     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b76c     14 4E 85 A1 |  if_e	sub	fp, #20
1b770     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b774     24 00 90 5D |  if_ne	jmp	#LR__2229
1b778     00 26 06 F6 | 	mov	local01, #0
1b77c     A7 28 02 FB | 	rdlong	local02, fp
1b780     0C 4E 05 F1 | 	add	fp, #12
1b784     A7 2A 02 FB | 	rdlong	local03, fp
1b788     0C 4E 85 F1 | 	sub	fp, #12
1b78c     15 29 1A F2 | 	cmp	local02, local03 wcz
1b790     01 26 66 E6 |  if_be	neg	local01, #1
1b794     A7 26 62 FC | 	wrlong	local01, fp
1b798     10 01 90 FD | 	jmp	#LR__2233
1b79c                 | LR__2229
1b79c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1b79c     08 4E 05 F1 | 	add	fp, #8
1b7a0     A7 26 02 FB | 	rdlong	local01, fp
1b7a4     08 4E 85 F1 | 	sub	fp, #8
1b7a8     2B 26 0E F2 | 	cmp	local01, #43 wz
1b7ac     14 4E 05 A1 |  if_e	add	fp, #20
1b7b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b7b4     14 4E 85 A1 |  if_e	sub	fp, #20
1b7b8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b7bc     30 00 90 5D |  if_ne	jmp	#LR__2230
1b7c0     00 26 06 F6 | 	mov	local01, #0
1b7c4     A7 12 02 FB | 	rdlong	arg01, fp
1b7c8     8C 12 BF FD | 	call	#_convertstring
1b7cc     FD 12 02 F6 | 	mov	arg01, result1
1b7d0     0C 4E 05 F1 | 	add	fp, #12
1b7d4     A7 14 02 FB | 	rdlong	arg02, fp
1b7d8     0C 4E 85 F1 | 	sub	fp, #12
1b7dc     DC 77 B0 FD | 	call	#__system___string_cmp
1b7e0     01 FA 55 F2 | 	cmps	result1, #1 wc
1b7e4     00 26 26 C6 |  if_b	not	local01, #0
1b7e8     A7 26 62 FC | 	wrlong	local01, fp
1b7ec     BC 00 90 FD | 	jmp	#LR__2233
1b7f0                 | LR__2230
1b7f0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1b7f0     08 4E 05 F1 | 	add	fp, #8
1b7f4     A7 26 02 FB | 	rdlong	local01, fp
1b7f8     08 4E 85 F1 | 	sub	fp, #8
1b7fc     1F 26 0E F2 | 	cmp	local01, #31 wz
1b800     14 4E 05 A1 |  if_e	add	fp, #20
1b804     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b808     14 4E 85 A1 |  if_e	sub	fp, #20
1b80c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b810     34 00 90 5D |  if_ne	jmp	#LR__2231
1b814     00 26 06 F6 | 	mov	local01, #0
1b818     A7 28 02 FB | 	rdlong	local02, fp
1b81c     0C 4E 05 F1 | 	add	fp, #12
1b820     A7 12 02 FB | 	rdlong	arg01, fp
1b824     0C 4E 85 F1 | 	sub	fp, #12
1b828     2C 12 BF FD | 	call	#_convertstring
1b82c     FD 14 02 F6 | 	mov	arg02, result1
1b830     14 13 02 F6 | 	mov	arg01, local02
1b834     84 77 B0 FD | 	call	#__system___string_cmp
1b838     01 FA 55 F2 | 	cmps	result1, #1 wc
1b83c     00 26 26 C6 |  if_b	not	local01, #0
1b840     A7 26 62 FC | 	wrlong	local01, fp
1b844     64 00 90 FD | 	jmp	#LR__2233
1b848                 | LR__2231
1b848                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1b848     08 4E 05 F1 | 	add	fp, #8
1b84c     A7 26 02 FB | 	rdlong	local01, fp
1b850     08 4E 85 F1 | 	sub	fp, #8
1b854     2B 26 0E F2 | 	cmp	local01, #43 wz
1b858     14 4E 05 A1 |  if_e	add	fp, #20
1b85c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b860     14 4E 85 A1 |  if_e	sub	fp, #20
1b864     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b868     3C 00 90 5D |  if_ne	jmp	#LR__2232
1b86c     00 26 06 F6 | 	mov	local01, #0
1b870     A7 12 02 FB | 	rdlong	arg01, fp
1b874     E0 11 BF FD | 	call	#_convertstring
1b878     FD 28 02 F6 | 	mov	local02, result1
1b87c     0C 4E 05 F1 | 	add	fp, #12
1b880     A7 12 02 FB | 	rdlong	arg01, fp
1b884     0C 4E 85 F1 | 	sub	fp, #12
1b888     CC 11 BF FD | 	call	#_convertstring
1b88c     FD 14 02 F6 | 	mov	arg02, result1
1b890     14 13 02 F6 | 	mov	arg01, local02
1b894     24 77 B0 FD | 	call	#__system___string_cmp
1b898     01 FA 55 F2 | 	cmps	result1, #1 wc
1b89c     00 26 26 C6 |  if_b	not	local01, #0
1b8a0     A7 26 62 FC | 	wrlong	local01, fp
1b8a4     04 00 90 FD | 	jmp	#LR__2233
1b8a8                 | LR__2232
1b8a8     A7 00 68 FC | 	wrlong	#0, fp
1b8ac                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1b8ac                 | LR__2233
1b8ac     08 4E 05 F1 | 	add	fp, #8
1b8b0     A7 38 68 FC | 	wrlong	#28, fp
1b8b4     08 4E 85 F1 | 	sub	fp, #8
1b8b8     A7 12 02 F6 | 	mov	arg01, fp
1b8bc     B8 10 BF FD | 	call	#_push
1b8c0     A7 F0 03 F6 | 	mov	ptra, fp
1b8c4     B2 00 A0 FD | 	call	#popregs_
1b8c8                 | _do_le_ret
1b8c8     2D 00 64 FD | 	ret
1b8cc                 | 
1b8cc                 | ' 
1b8cc                 | ' '--------------------------------- less than (<)
1b8cc                 | ' 
1b8cc                 | ' sub do_lt
1b8cc                 | _do_lt
1b8cc     05 4A 05 F6 | 	mov	COUNT_, #5
1b8d0     A8 00 A0 FD | 	call	#pushregs_
1b8d4     18 F0 07 F1 | 	add	ptra, #24
1b8d8     04 10 BF FD | 	call	#_pop
1b8dc     FD 26 02 F6 | 	mov	local01, result1
1b8e0     FE 28 02 F6 | 	mov	local02, result2
1b8e4     FF 2A 02 F6 | 	mov	local03, result3
1b8e8     0C 4E 05 F1 | 	add	fp, #12
1b8ec     A7 26 62 FC | 	wrlong	local01, fp
1b8f0     04 4E 05 F1 | 	add	fp, #4
1b8f4     A7 28 62 FC | 	wrlong	local02, fp
1b8f8     04 4E 05 F1 | 	add	fp, #4
1b8fc     A7 2A 62 FC | 	wrlong	local03, fp
1b900     14 4E 85 F1 | 	sub	fp, #20
1b904     D8 0F BF FD | 	call	#_pop
1b908     FF 2A 02 F6 | 	mov	local03, result3
1b90c     A7 FA 61 FC | 	wrlong	result1, fp
1b910     04 4E 05 F1 | 	add	fp, #4
1b914     A7 FC 61 FC | 	wrlong	result2, fp
1b918     04 4E 05 F1 | 	add	fp, #4
1b91c     A7 2A 62 FC | 	wrlong	local03, fp
1b920                 | ' 
1b920                 | ' t2=pop()
1b920                 | ' t1=pop()
1b920                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1b920     08 4E 85 F1 | 	sub	fp, #8
1b924     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b928     14 4E 05 A1 |  if_e	add	fp, #20
1b92c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b930     14 4E 85 A1 |  if_e	sub	fp, #20
1b934     16 2B 02 A6 |  if_e	mov	local03, local04
1b938     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b93c     28 00 90 5D |  if_ne	jmp	#LR__2240
1b940     00 26 06 F6 | 	mov	local01, #0
1b944     A7 12 02 FB | 	rdlong	arg01, fp
1b948     0C 4E 05 F1 | 	add	fp, #12
1b94c     A7 14 02 FB | 	rdlong	arg02, fp
1b950     0C 4E 85 F1 | 	sub	fp, #12
1b954     64 76 B0 FD | 	call	#__system___string_cmp
1b958     00 FA 55 F2 | 	cmps	result1, #0 wc
1b95c     00 26 26 C6 |  if_b	not	local01, #0
1b960     A7 26 62 FC | 	wrlong	local01, fp
1b964     10 04 90 FD | 	jmp	#LR__2253
1b968                 | LR__2240
1b968                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1b968     08 4E 05 F1 | 	add	fp, #8
1b96c     A7 26 02 FB | 	rdlong	local01, fp
1b970     08 4E 85 F1 | 	sub	fp, #8
1b974     1E 26 0E F2 | 	cmp	local01, #30 wz
1b978     14 4E 05 A1 |  if_e	add	fp, #20
1b97c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b980     14 4E 85 A1 |  if_e	sub	fp, #20
1b984     16 2B 02 A6 |  if_e	mov	local03, local04
1b988     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b98c     2C 00 90 5D |  if_ne	jmp	#LR__2241
1b990     00 26 06 F6 | 	mov	local01, #0
1b994     A7 12 02 FB | 	rdlong	arg01, fp
1b998     0C 4E 05 F1 | 	add	fp, #12
1b99c     A7 14 02 FB | 	rdlong	arg02, fp
1b9a0     0C 4E 85 F1 | 	sub	fp, #12
1b9a4     01 16 06 F6 | 	mov	arg03, #1
1b9a8     94 A8 B0 FD | 	call	#__system___float_cmp
1b9ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1b9b0     00 26 26 C6 |  if_b	not	local01, #0
1b9b4     A7 26 62 FC | 	wrlong	local01, fp
1b9b8     BC 03 90 FD | 	jmp	#LR__2253
1b9bc                 | LR__2241
1b9bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1b9bc     08 4E 05 F1 | 	add	fp, #8
1b9c0     A7 26 02 FB | 	rdlong	local01, fp
1b9c4     08 4E 85 F1 | 	sub	fp, #8
1b9c8     1E 26 0E F2 | 	cmp	local01, #30 wz
1b9cc     14 4E 05 A1 |  if_e	add	fp, #20
1b9d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b9d4     14 4E 85 A1 |  if_e	sub	fp, #20
1b9d8     16 2B 02 A6 |  if_e	mov	local03, local04
1b9dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b9e0     48 00 90 5D |  if_ne	jmp	#LR__2242
1b9e4     00 26 06 F6 | 	mov	local01, #0
1b9e8     A7 28 02 FB | 	rdlong	local02, fp
1b9ec     0C 4E 05 F1 | 	add	fp, #12
1b9f0     A7 12 02 FB | 	rdlong	arg01, fp
1b9f4     0C 4E 85 F1 | 	sub	fp, #12
1b9f8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b9fc     1F 2E C6 C9 |  if_b	decod	local05, #31
1ba00     00 2E 06 36 |  if_ae	mov	local05, #0
1ba04     00 A0 B0 FD | 	call	#__system___float_fromuns
1ba08     17 FB 61 F5 | 	xor	result1, local05
1ba0c     FD 14 02 F6 | 	mov	arg02, result1
1ba10     14 13 02 F6 | 	mov	arg01, local02
1ba14     01 16 06 F6 | 	mov	arg03, #1
1ba18     24 A8 B0 FD | 	call	#__system___float_cmp
1ba1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ba20     00 26 26 C6 |  if_b	not	local01, #0
1ba24     A7 26 62 FC | 	wrlong	local01, fp
1ba28     4C 03 90 FD | 	jmp	#LR__2253
1ba2c                 | LR__2242
1ba2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1ba2c     08 4E 05 F1 | 	add	fp, #8
1ba30     A7 26 02 FB | 	rdlong	local01, fp
1ba34     08 4E 85 F1 | 	sub	fp, #8
1ba38     1E 26 0E F2 | 	cmp	local01, #30 wz
1ba3c     14 4E 05 A1 |  if_e	add	fp, #20
1ba40     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ba44     14 4E 85 A1 |  if_e	sub	fp, #20
1ba48     16 2B 02 A6 |  if_e	mov	local03, local04
1ba4c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ba50     38 00 90 5D |  if_ne	jmp	#LR__2243
1ba54     00 26 06 F6 | 	mov	local01, #0
1ba58     A7 28 02 FB | 	rdlong	local02, fp
1ba5c     0C 4E 05 F1 | 	add	fp, #12
1ba60     A7 12 02 FB | 	rdlong	arg01, fp
1ba64     0C 4E 85 F1 | 	sub	fp, #12
1ba68     9C 9F B0 FD | 	call	#__system___float_fromuns
1ba6c     FD 14 02 F6 | 	mov	arg02, result1
1ba70     14 13 02 F6 | 	mov	arg01, local02
1ba74     01 16 06 F6 | 	mov	arg03, #1
1ba78     C4 A7 B0 FD | 	call	#__system___float_cmp
1ba7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ba80     00 26 26 C6 |  if_b	not	local01, #0
1ba84     A7 26 62 FC | 	wrlong	local01, fp
1ba88     EC 02 90 FD | 	jmp	#LR__2253
1ba8c                 | LR__2243
1ba8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1ba8c     08 4E 05 F1 | 	add	fp, #8
1ba90     A7 26 02 FB | 	rdlong	local01, fp
1ba94     08 4E 85 F1 | 	sub	fp, #8
1ba98     1C 26 0E F2 | 	cmp	local01, #28 wz
1ba9c     14 4E 05 A1 |  if_e	add	fp, #20
1baa0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1baa4     14 4E 85 A1 |  if_e	sub	fp, #20
1baa8     16 2B 02 A6 |  if_e	mov	local03, local04
1baac     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bab0     44 00 90 5D |  if_ne	jmp	#LR__2244
1bab4     00 26 06 F6 | 	mov	local01, #0
1bab8     A7 12 02 FB | 	rdlong	arg01, fp
1babc     09 13 52 F6 | 	abs	arg01, arg01 wc
1bac0     1F 2E C6 C9 |  if_b	decod	local05, #31
1bac4     00 2E 06 36 |  if_ae	mov	local05, #0
1bac8     3C 9F B0 FD | 	call	#__system___float_fromuns
1bacc     17 FB 61 F5 | 	xor	result1, local05
1bad0     FD 12 02 F6 | 	mov	arg01, result1
1bad4     0C 4E 05 F1 | 	add	fp, #12
1bad8     A7 14 02 FB | 	rdlong	arg02, fp
1badc     0C 4E 85 F1 | 	sub	fp, #12
1bae0     01 16 06 F6 | 	mov	arg03, #1
1bae4     58 A7 B0 FD | 	call	#__system___float_cmp
1bae8     00 FA 55 F2 | 	cmps	result1, #0 wc
1baec     00 26 26 C6 |  if_b	not	local01, #0
1baf0     A7 26 62 FC | 	wrlong	local01, fp
1baf4     80 02 90 FD | 	jmp	#LR__2253
1baf8                 | LR__2244
1baf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1baf8     08 4E 05 F1 | 	add	fp, #8
1bafc     A7 26 02 FB | 	rdlong	local01, fp
1bb00     08 4E 85 F1 | 	sub	fp, #8
1bb04     1C 26 0E F2 | 	cmp	local01, #28 wz
1bb08     14 4E 05 A1 |  if_e	add	fp, #20
1bb0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb10     14 4E 85 A1 |  if_e	sub	fp, #20
1bb14     16 2B 02 A6 |  if_e	mov	local03, local04
1bb18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bb1c     20 00 90 5D |  if_ne	jmp	#LR__2245
1bb20     A7 28 02 FB | 	rdlong	local02, fp
1bb24     0C 4E 05 F1 | 	add	fp, #12
1bb28     A7 2A 02 FB | 	rdlong	local03, fp
1bb2c     0C 4E 85 F1 | 	sub	fp, #12
1bb30     15 29 52 F2 | 	cmps	local02, local03 wc
1bb34     13 27 A2 F1 | 	subx	local01, local01
1bb38     A7 26 62 FC | 	wrlong	local01, fp
1bb3c     38 02 90 FD | 	jmp	#LR__2253
1bb40                 | LR__2245
1bb40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1bb40     08 4E 05 F1 | 	add	fp, #8
1bb44     A7 26 02 FB | 	rdlong	local01, fp
1bb48     08 4E 85 F1 | 	sub	fp, #8
1bb4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1bb50     14 4E 05 A1 |  if_e	add	fp, #20
1bb54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb58     14 4E 85 A1 |  if_e	sub	fp, #20
1bb5c     16 2B 02 A6 |  if_e	mov	local03, local04
1bb60     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bb64     20 00 90 5D |  if_ne	jmp	#LR__2246
1bb68     A7 28 02 FB | 	rdlong	local02, fp
1bb6c     0C 4E 05 F1 | 	add	fp, #12
1bb70     A7 2A 02 FB | 	rdlong	local03, fp
1bb74     0C 4E 85 F1 | 	sub	fp, #12
1bb78     15 29 52 F2 | 	cmps	local02, local03 wc
1bb7c     13 27 A2 F1 | 	subx	local01, local01
1bb80     A7 26 62 FC | 	wrlong	local01, fp
1bb84     F0 01 90 FD | 	jmp	#LR__2253
1bb88                 | LR__2246
1bb88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1bb88     08 4E 05 F1 | 	add	fp, #8
1bb8c     A7 26 02 FB | 	rdlong	local01, fp
1bb90     08 4E 85 F1 | 	sub	fp, #8
1bb94     1D 26 0E F2 | 	cmp	local01, #29 wz
1bb98     14 4E 05 A1 |  if_e	add	fp, #20
1bb9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bba0     14 4E 85 A1 |  if_e	sub	fp, #20
1bba4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1bba8     34 00 90 5D |  if_ne	jmp	#LR__2247
1bbac     00 26 06 F6 | 	mov	local01, #0
1bbb0     A7 12 02 FB | 	rdlong	arg01, fp
1bbb4     50 9E B0 FD | 	call	#__system___float_fromuns
1bbb8     FD 12 02 F6 | 	mov	arg01, result1
1bbbc     0C 4E 05 F1 | 	add	fp, #12
1bbc0     A7 14 02 FB | 	rdlong	arg02, fp
1bbc4     0C 4E 85 F1 | 	sub	fp, #12
1bbc8     01 16 06 F6 | 	mov	arg03, #1
1bbcc     70 A6 B0 FD | 	call	#__system___float_cmp
1bbd0     00 FA 55 F2 | 	cmps	result1, #0 wc
1bbd4     00 26 26 C6 |  if_b	not	local01, #0
1bbd8     A7 26 62 FC | 	wrlong	local01, fp
1bbdc     98 01 90 FD | 	jmp	#LR__2253
1bbe0                 | LR__2247
1bbe0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1bbe0     08 4E 05 F1 | 	add	fp, #8
1bbe4     A7 26 02 FB | 	rdlong	local01, fp
1bbe8     08 4E 85 F1 | 	sub	fp, #8
1bbec     1D 26 0E F2 | 	cmp	local01, #29 wz
1bbf0     14 4E 05 A1 |  if_e	add	fp, #20
1bbf4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bbf8     14 4E 85 A1 |  if_e	sub	fp, #20
1bbfc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bc00     20 00 90 5D |  if_ne	jmp	#LR__2248
1bc04     A7 28 02 FB | 	rdlong	local02, fp
1bc08     0C 4E 05 F1 | 	add	fp, #12
1bc0c     A7 2A 02 FB | 	rdlong	local03, fp
1bc10     0C 4E 85 F1 | 	sub	fp, #12
1bc14     15 29 52 F2 | 	cmps	local02, local03 wc
1bc18     13 27 A2 F1 | 	subx	local01, local01
1bc1c     A7 26 62 FC | 	wrlong	local01, fp
1bc20     54 01 90 FD | 	jmp	#LR__2253
1bc24                 | LR__2248
1bc24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1bc24     08 4E 05 F1 | 	add	fp, #8
1bc28     A7 26 02 FB | 	rdlong	local01, fp
1bc2c     08 4E 85 F1 | 	sub	fp, #8
1bc30     1D 26 0E F2 | 	cmp	local01, #29 wz
1bc34     14 4E 05 A1 |  if_e	add	fp, #20
1bc38     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bc3c     14 4E 85 A1 |  if_e	sub	fp, #20
1bc40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bc44     20 00 90 5D |  if_ne	jmp	#LR__2249
1bc48     A7 28 02 FB | 	rdlong	local02, fp
1bc4c     0C 4E 05 F1 | 	add	fp, #12
1bc50     A7 2A 02 FB | 	rdlong	local03, fp
1bc54     0C 4E 85 F1 | 	sub	fp, #12
1bc58     15 29 12 F2 | 	cmp	local02, local03 wc
1bc5c     13 27 A2 F1 | 	subx	local01, local01
1bc60     A7 26 62 FC | 	wrlong	local01, fp
1bc64     10 01 90 FD | 	jmp	#LR__2253
1bc68                 | LR__2249
1bc68                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1bc68     08 4E 05 F1 | 	add	fp, #8
1bc6c     A7 26 02 FB | 	rdlong	local01, fp
1bc70     08 4E 85 F1 | 	sub	fp, #8
1bc74     2B 26 0E F2 | 	cmp	local01, #43 wz
1bc78     14 4E 05 A1 |  if_e	add	fp, #20
1bc7c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bc80     14 4E 85 A1 |  if_e	sub	fp, #20
1bc84     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1bc88     30 00 90 5D |  if_ne	jmp	#LR__2250
1bc8c     00 26 06 F6 | 	mov	local01, #0
1bc90     A7 12 02 FB | 	rdlong	arg01, fp
1bc94     C0 0D BF FD | 	call	#_convertstring
1bc98     FD 12 02 F6 | 	mov	arg01, result1
1bc9c     0C 4E 05 F1 | 	add	fp, #12
1bca0     A7 14 02 FB | 	rdlong	arg02, fp
1bca4     0C 4E 85 F1 | 	sub	fp, #12
1bca8     10 73 B0 FD | 	call	#__system___string_cmp
1bcac     00 FA 55 F2 | 	cmps	result1, #0 wc
1bcb0     00 26 26 C6 |  if_b	not	local01, #0
1bcb4     A7 26 62 FC | 	wrlong	local01, fp
1bcb8     BC 00 90 FD | 	jmp	#LR__2253
1bcbc                 | LR__2250
1bcbc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1bcbc     08 4E 05 F1 | 	add	fp, #8
1bcc0     A7 26 02 FB | 	rdlong	local01, fp
1bcc4     08 4E 85 F1 | 	sub	fp, #8
1bcc8     1F 26 0E F2 | 	cmp	local01, #31 wz
1bccc     14 4E 05 A1 |  if_e	add	fp, #20
1bcd0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bcd4     14 4E 85 A1 |  if_e	sub	fp, #20
1bcd8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bcdc     34 00 90 5D |  if_ne	jmp	#LR__2251
1bce0     00 26 06 F6 | 	mov	local01, #0
1bce4     A7 28 02 FB | 	rdlong	local02, fp
1bce8     0C 4E 05 F1 | 	add	fp, #12
1bcec     A7 12 02 FB | 	rdlong	arg01, fp
1bcf0     0C 4E 85 F1 | 	sub	fp, #12
1bcf4     60 0D BF FD | 	call	#_convertstring
1bcf8     FD 14 02 F6 | 	mov	arg02, result1
1bcfc     14 13 02 F6 | 	mov	arg01, local02
1bd00     B8 72 B0 FD | 	call	#__system___string_cmp
1bd04     00 FA 55 F2 | 	cmps	result1, #0 wc
1bd08     00 26 26 C6 |  if_b	not	local01, #0
1bd0c     A7 26 62 FC | 	wrlong	local01, fp
1bd10     64 00 90 FD | 	jmp	#LR__2253
1bd14                 | LR__2251
1bd14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1bd14     08 4E 05 F1 | 	add	fp, #8
1bd18     A7 26 02 FB | 	rdlong	local01, fp
1bd1c     08 4E 85 F1 | 	sub	fp, #8
1bd20     2B 26 0E F2 | 	cmp	local01, #43 wz
1bd24     14 4E 05 A1 |  if_e	add	fp, #20
1bd28     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bd2c     14 4E 85 A1 |  if_e	sub	fp, #20
1bd30     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bd34     3C 00 90 5D |  if_ne	jmp	#LR__2252
1bd38     00 26 06 F6 | 	mov	local01, #0
1bd3c     A7 12 02 FB | 	rdlong	arg01, fp
1bd40     14 0D BF FD | 	call	#_convertstring
1bd44     FD 28 02 F6 | 	mov	local02, result1
1bd48     0C 4E 05 F1 | 	add	fp, #12
1bd4c     A7 12 02 FB | 	rdlong	arg01, fp
1bd50     0C 4E 85 F1 | 	sub	fp, #12
1bd54     00 0D BF FD | 	call	#_convertstring
1bd58     FD 14 02 F6 | 	mov	arg02, result1
1bd5c     14 13 02 F6 | 	mov	arg01, local02
1bd60     58 72 B0 FD | 	call	#__system___string_cmp
1bd64     00 FA 55 F2 | 	cmps	result1, #0 wc
1bd68     00 26 26 C6 |  if_b	not	local01, #0
1bd6c     A7 26 62 FC | 	wrlong	local01, fp
1bd70     04 00 90 FD | 	jmp	#LR__2253
1bd74                 | LR__2252
1bd74     A7 00 68 FC | 	wrlong	#0, fp
1bd78                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1bd78                 | LR__2253
1bd78     08 4E 05 F1 | 	add	fp, #8
1bd7c     A7 38 68 FC | 	wrlong	#28, fp
1bd80     08 4E 85 F1 | 	sub	fp, #8
1bd84     A7 12 02 F6 | 	mov	arg01, fp
1bd88     EC 0B BF FD | 	call	#_push
1bd8c     A7 F0 03 F6 | 	mov	ptra, fp
1bd90     B2 00 A0 FD | 	call	#popregs_
1bd94                 | _do_lt_ret
1bd94     2D 00 64 FD | 	ret
1bd98                 | 
1bd98                 | ' 
1bd98                 | ' '--------------------------------- minus (-)
1bd98                 | ' 
1bd98                 | ' sub do_minus
1bd98                 | _do_minus
1bd98     05 4A 05 F6 | 	mov	COUNT_, #5
1bd9c     A8 00 A0 FD | 	call	#pushregs_
1bda0     18 F0 07 F1 | 	add	ptra, #24
1bda4     38 0B BF FD | 	call	#_pop
1bda8     FD 26 02 F6 | 	mov	local01, result1
1bdac     FE 28 02 F6 | 	mov	local02, result2
1bdb0     FF 2A 02 F6 | 	mov	local03, result3
1bdb4     0C 4E 05 F1 | 	add	fp, #12
1bdb8     A7 26 62 FC | 	wrlong	local01, fp
1bdbc     04 4E 05 F1 | 	add	fp, #4
1bdc0     A7 28 62 FC | 	wrlong	local02, fp
1bdc4     04 4E 05 F1 | 	add	fp, #4
1bdc8     A7 2A 62 FC | 	wrlong	local03, fp
1bdcc     14 4E 85 F1 | 	sub	fp, #20
1bdd0     0C 0B BF FD | 	call	#_pop
1bdd4     FF 2A 02 F6 | 	mov	local03, result3
1bdd8     A7 FA 61 FC | 	wrlong	result1, fp
1bddc     04 4E 05 F1 | 	add	fp, #4
1bde0     A7 FC 61 FC | 	wrlong	result2, fp
1bde4     04 4E 05 F1 | 	add	fp, #4
1bde8     A7 2A 62 FC | 	wrlong	local03, fp
1bdec                 | ' 
1bdec                 | ' t2=pop()
1bdec                 | ' t1=pop()
1bdec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1bdec     08 4E 85 F1 | 	sub	fp, #8
1bdf0     1D 2A 0E F2 | 	cmp	local03, #29 wz
1bdf4     14 4E 05 A1 |  if_e	add	fp, #20
1bdf8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bdfc     14 4E 85 A1 |  if_e	sub	fp, #20
1be00     16 2B 02 A6 |  if_e	mov	local03, local04
1be04     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1be08     5C 00 90 5D |  if_ne	jmp	#LR__2261
1be0c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1be0c     0C 4E 05 F1 | 	add	fp, #12
1be10     A7 26 02 FB | 	rdlong	local01, fp
1be14     0C 4E 85 F1 | 	sub	fp, #12
1be18     A7 2A 02 FB | 	rdlong	local03, fp
1be1c     15 27 12 F2 | 	cmp	local01, local03 wc
1be20     1C 00 90 3D |  if_ae	jmp	#LR__2260
1be24     A7 26 02 FB | 	rdlong	local01, fp
1be28     0C 4E 05 F1 | 	add	fp, #12
1be2c     A7 28 02 FB | 	rdlong	local02, fp
1be30     0C 4E 85 F1 | 	sub	fp, #12
1be34     14 27 82 F1 | 	sub	local01, local02
1be38     A7 26 62 FC | 	wrlong	local01, fp
1be3c     F4 02 90 FD | 	jmp	#LR__2270
1be40                 | LR__2260
1be40     A7 26 02 FB | 	rdlong	local01, fp
1be44     0C 4E 05 F1 | 	add	fp, #12
1be48     A7 28 02 FB | 	rdlong	local02, fp
1be4c     0C 4E 85 F1 | 	sub	fp, #12
1be50     14 27 82 F1 | 	sub	local01, local02
1be54     A7 26 62 FC | 	wrlong	local01, fp
1be58     08 4E 05 F1 | 	add	fp, #8
1be5c     A7 38 68 FC | 	wrlong	#28, fp
1be60     08 4E 85 F1 | 	sub	fp, #8
1be64     CC 02 90 FD | 	jmp	#LR__2270
1be68                 | LR__2261
1be68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1be68     08 4E 05 F1 | 	add	fp, #8
1be6c     A7 26 02 FB | 	rdlong	local01, fp
1be70     08 4E 85 F1 | 	sub	fp, #8
1be74     1D 26 0E F2 | 	cmp	local01, #29 wz
1be78     14 4E 05 A1 |  if_e	add	fp, #20
1be7c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1be80     14 4E 85 A1 |  if_e	sub	fp, #20
1be84     16 2B 02 A6 |  if_e	mov	local03, local04
1be88     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1be8c     28 00 90 5D |  if_ne	jmp	#LR__2262
1be90     A7 26 02 FB | 	rdlong	local01, fp
1be94     0C 4E 05 F1 | 	add	fp, #12
1be98     A7 28 02 FB | 	rdlong	local02, fp
1be9c     0C 4E 85 F1 | 	sub	fp, #12
1bea0     14 27 82 F1 | 	sub	local01, local02
1bea4     A7 26 62 FC | 	wrlong	local01, fp
1bea8     08 4E 05 F1 | 	add	fp, #8
1beac     A7 38 68 FC | 	wrlong	#28, fp
1beb0     08 4E 85 F1 | 	sub	fp, #8
1beb4     7C 02 90 FD | 	jmp	#LR__2270
1beb8                 | LR__2262
1beb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1beb8     08 4E 05 F1 | 	add	fp, #8
1bebc     A7 26 02 FB | 	rdlong	local01, fp
1bec0     08 4E 85 F1 | 	sub	fp, #8
1bec4     1D 26 0E F2 | 	cmp	local01, #29 wz
1bec8     14 4E 05 A1 |  if_e	add	fp, #20
1becc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bed0     14 4E 85 A1 |  if_e	sub	fp, #20
1bed4     16 2B 02 A6 |  if_e	mov	local03, local04
1bed8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bedc     34 00 90 5D |  if_ne	jmp	#LR__2263
1bee0     A7 12 02 FB | 	rdlong	arg01, fp
1bee4     20 9B B0 FD | 	call	#__system___float_fromuns
1bee8     FD 12 02 F6 | 	mov	arg01, result1
1beec     0C 4E 05 F1 | 	add	fp, #12
1bef0     A7 14 02 FB | 	rdlong	arg02, fp
1bef4     0C 4E 85 F1 | 	sub	fp, #12
1bef8     1F 14 E6 F4 | 	bitnot	arg02, #31
1befc     3C 9B B0 FD | 	call	#__system___float_add
1bf00     A7 FA 61 FC | 	wrlong	result1, fp
1bf04     08 4E 05 F1 | 	add	fp, #8
1bf08     A7 3C 68 FC | 	wrlong	#30, fp
1bf0c     08 4E 85 F1 | 	sub	fp, #8
1bf10     20 02 90 FD | 	jmp	#LR__2270
1bf14                 | LR__2263
1bf14                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1bf14     08 4E 05 F1 | 	add	fp, #8
1bf18     A7 26 02 FB | 	rdlong	local01, fp
1bf1c     08 4E 85 F1 | 	sub	fp, #8
1bf20     1C 26 0E F2 | 	cmp	local01, #28 wz
1bf24     14 4E 05 A1 |  if_e	add	fp, #20
1bf28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bf2c     14 4E 85 A1 |  if_e	sub	fp, #20
1bf30     16 2B 02 A6 |  if_e	mov	local03, local04
1bf34     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bf38     1C 00 90 5D |  if_ne	jmp	#LR__2264
1bf3c     A7 26 02 FB | 	rdlong	local01, fp
1bf40     0C 4E 05 F1 | 	add	fp, #12
1bf44     A7 28 02 FB | 	rdlong	local02, fp
1bf48     0C 4E 85 F1 | 	sub	fp, #12
1bf4c     14 27 82 F1 | 	sub	local01, local02
1bf50     A7 26 62 FC | 	wrlong	local01, fp
1bf54     DC 01 90 FD | 	jmp	#LR__2270
1bf58                 | LR__2264
1bf58                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1bf58     08 4E 05 F1 | 	add	fp, #8
1bf5c     A7 26 02 FB | 	rdlong	local01, fp
1bf60     08 4E 85 F1 | 	sub	fp, #8
1bf64     1C 26 0E F2 | 	cmp	local01, #28 wz
1bf68     14 4E 05 A1 |  if_e	add	fp, #20
1bf6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bf70     14 4E 85 A1 |  if_e	sub	fp, #20
1bf74     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1bf78     1C 00 90 5D |  if_ne	jmp	#LR__2265
1bf7c     A7 26 02 FB | 	rdlong	local01, fp
1bf80     0C 4E 05 F1 | 	add	fp, #12
1bf84     A7 28 02 FB | 	rdlong	local02, fp
1bf88     0C 4E 85 F1 | 	sub	fp, #12
1bf8c     14 27 82 F1 | 	sub	local01, local02
1bf90     A7 26 62 FC | 	wrlong	local01, fp
1bf94     9C 01 90 FD | 	jmp	#LR__2270
1bf98                 | LR__2265
1bf98                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1bf98     08 4E 05 F1 | 	add	fp, #8
1bf9c     A7 26 02 FB | 	rdlong	local01, fp
1bfa0     08 4E 85 F1 | 	sub	fp, #8
1bfa4     1C 26 0E F2 | 	cmp	local01, #28 wz
1bfa8     14 4E 05 A1 |  if_e	add	fp, #20
1bfac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bfb0     14 4E 85 A1 |  if_e	sub	fp, #20
1bfb4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bfb8     44 00 90 5D |  if_ne	jmp	#LR__2266
1bfbc     A7 12 02 FB | 	rdlong	arg01, fp
1bfc0     09 13 52 F6 | 	abs	arg01, arg01 wc
1bfc4     1F 2E C6 C9 |  if_b	decod	local05, #31
1bfc8     00 2E 06 36 |  if_ae	mov	local05, #0
1bfcc     38 9A B0 FD | 	call	#__system___float_fromuns
1bfd0     17 FB 61 F5 | 	xor	result1, local05
1bfd4     FD 12 02 F6 | 	mov	arg01, result1
1bfd8     0C 4E 05 F1 | 	add	fp, #12
1bfdc     A7 14 02 FB | 	rdlong	arg02, fp
1bfe0     0C 4E 85 F1 | 	sub	fp, #12
1bfe4     1F 14 E6 F4 | 	bitnot	arg02, #31
1bfe8     50 9A B0 FD | 	call	#__system___float_add
1bfec     A7 FA 61 FC | 	wrlong	result1, fp
1bff0     08 4E 05 F1 | 	add	fp, #8
1bff4     A7 3C 68 FC | 	wrlong	#30, fp
1bff8     08 4E 85 F1 | 	sub	fp, #8
1bffc     34 01 90 FD | 	jmp	#LR__2270
1c000                 | LR__2266
1c000                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1c000     08 4E 05 F1 | 	add	fp, #8
1c004     A7 26 02 FB | 	rdlong	local01, fp
1c008     08 4E 85 F1 | 	sub	fp, #8
1c00c     1E 26 0E F2 | 	cmp	local01, #30 wz
1c010     14 4E 05 A1 |  if_e	add	fp, #20
1c014     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c018     14 4E 85 A1 |  if_e	sub	fp, #20
1c01c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c020     2C 00 90 5D |  if_ne	jmp	#LR__2267
1c024     A7 26 02 FB | 	rdlong	local01, fp
1c028     0C 4E 05 F1 | 	add	fp, #12
1c02c     A7 12 02 FB | 	rdlong	arg01, fp
1c030     0C 4E 85 F1 | 	sub	fp, #12
1c034     D0 99 B0 FD | 	call	#__system___float_fromuns
1c038     FD 14 02 F6 | 	mov	arg02, result1
1c03c     13 13 02 F6 | 	mov	arg01, local01
1c040     1F 14 E6 F4 | 	bitnot	arg02, #31
1c044     F4 99 B0 FD | 	call	#__system___float_add
1c048     A7 FA 61 FC | 	wrlong	result1, fp
1c04c     E4 00 90 FD | 	jmp	#LR__2270
1c050                 | LR__2267
1c050                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1c050     08 4E 05 F1 | 	add	fp, #8
1c054     A7 26 02 FB | 	rdlong	local01, fp
1c058     08 4E 85 F1 | 	sub	fp, #8
1c05c     1E 26 0E F2 | 	cmp	local01, #30 wz
1c060     14 4E 05 A1 |  if_e	add	fp, #20
1c064     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c068     14 4E 85 A1 |  if_e	sub	fp, #20
1c06c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c070     3C 00 90 5D |  if_ne	jmp	#LR__2268
1c074     A7 26 02 FB | 	rdlong	local01, fp
1c078     0C 4E 05 F1 | 	add	fp, #12
1c07c     A7 12 02 FB | 	rdlong	arg01, fp
1c080     0C 4E 85 F1 | 	sub	fp, #12
1c084     09 13 52 F6 | 	abs	arg01, arg01 wc
1c088     1F 2E C6 C9 |  if_b	decod	local05, #31
1c08c     00 2E 06 36 |  if_ae	mov	local05, #0
1c090     74 99 B0 FD | 	call	#__system___float_fromuns
1c094     17 FB 61 F5 | 	xor	result1, local05
1c098     FD 14 02 F6 | 	mov	arg02, result1
1c09c     13 13 02 F6 | 	mov	arg01, local01
1c0a0     1F 14 E6 F4 | 	bitnot	arg02, #31
1c0a4     94 99 B0 FD | 	call	#__system___float_add
1c0a8     A7 FA 61 FC | 	wrlong	result1, fp
1c0ac     84 00 90 FD | 	jmp	#LR__2270
1c0b0                 | LR__2268
1c0b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1c0b0     08 4E 05 F1 | 	add	fp, #8
1c0b4     A7 26 02 FB | 	rdlong	local01, fp
1c0b8     08 4E 85 F1 | 	sub	fp, #8
1c0bc     1E 26 0E F2 | 	cmp	local01, #30 wz
1c0c0     14 4E 05 A1 |  if_e	add	fp, #20
1c0c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c0c8     14 4E 85 A1 |  if_e	sub	fp, #20
1c0cc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c0d0     20 00 90 5D |  if_ne	jmp	#LR__2269
1c0d4     A7 12 02 FB | 	rdlong	arg01, fp
1c0d8     0C 4E 05 F1 | 	add	fp, #12
1c0dc     A7 14 02 FB | 	rdlong	arg02, fp
1c0e0     0C 4E 85 F1 | 	sub	fp, #12
1c0e4     1F 14 E6 F4 | 	bitnot	arg02, #31
1c0e8     50 99 B0 FD | 	call	#__system___float_add
1c0ec     A7 FA 61 FC | 	wrlong	result1, fp
1c0f0     40 00 90 FD | 	jmp	#LR__2270
1c0f4                 | LR__2269
1c0f4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1c0f4     08 4E 05 F1 | 	add	fp, #8
1c0f8     A7 26 02 FB | 	rdlong	local01, fp
1c0fc     08 4E 85 F1 | 	sub	fp, #8
1c100     1F 26 0E F2 | 	cmp	local01, #31 wz
1c104     14 4E 05 51 |  if_ne	add	fp, #20
1c108     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c10c     14 4E 85 51 |  if_ne	sub	fp, #20
1c110     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1c114     A7 06 68 AC |  if_e	wrlong	#3, fp
1c118     08 4E 05 A1 |  if_e	add	fp, #8
1c11c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c120     08 4E 85 A1 |  if_e	sub	fp, #8
1c124     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1c128     08 4E 05 51 |  if_ne	add	fp, #8
1c12c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1c130     08 4E 85 51 |  if_ne	sub	fp, #8
1c134                 | LR__2270
1c134     A7 12 02 F6 | 	mov	arg01, fp
1c138     3C 08 BF FD | 	call	#_push
1c13c     A7 F0 03 F6 | 	mov	ptra, fp
1c140     B2 00 A0 FD | 	call	#popregs_
1c144                 | _do_minus_ret
1c144     2D 00 64 FD | 	ret
1c148                 | 
1c148                 | ' 
1c148                 | ' '--------------------------------- negative (-), one argument negative
1c148                 | ' 
1c148                 | ' sub do_negative
1c148                 | _do_negative
1c148     02 4A 05 F6 | 	mov	COUNT_, #2
1c14c     A8 00 A0 FD | 	call	#pushregs_
1c150     0C F0 07 F1 | 	add	ptra, #12
1c154     88 07 BF FD | 	call	#_pop
1c158     FF 26 02 F6 | 	mov	local01, result3
1c15c     A7 FA 61 FC | 	wrlong	result1, fp
1c160     04 4E 05 F1 | 	add	fp, #4
1c164     A7 FC 61 FC | 	wrlong	result2, fp
1c168     04 4E 05 F1 | 	add	fp, #4
1c16c     A7 26 62 FC | 	wrlong	local01, fp
1c170                 | ' 
1c170                 | ' t1=pop()
1c170                 | ' if t1.result_type=result_int then 
1c170     08 4E 85 F1 | 	sub	fp, #8
1c174     1C 26 0E F2 | 	cmp	local01, #28 wz
1c178     A7 28 02 AB |  if_e	rdlong	local02, fp
1c17c     14 27 62 A6 |  if_e	neg	local01, local02
1c180     A7 26 62 AC |  if_e	wrlong	local01, fp
1c184     5C 00 90 AD |  if_e	jmp	#LR__2282
1c188     08 4E 05 F1 | 	add	fp, #8
1c18c     A7 26 02 FB | 	rdlong	local01, fp
1c190     08 4E 85 F1 | 	sub	fp, #8
1c194     1D 26 0E F2 | 	cmp	local01, #29 wz
1c198     1C 00 90 5D |  if_ne	jmp	#LR__2280
1c19c     A7 28 02 FB | 	rdlong	local02, fp
1c1a0     14 27 62 F6 | 	neg	local01, local02
1c1a4     A7 26 62 FC | 	wrlong	local01, fp
1c1a8     08 4E 05 F1 | 	add	fp, #8
1c1ac     A7 38 68 FC | 	wrlong	#28, fp
1c1b0     08 4E 85 F1 | 	sub	fp, #8
1c1b4     2C 00 90 FD | 	jmp	#LR__2281
1c1b8                 | LR__2280
1c1b8     08 4E 05 F1 | 	add	fp, #8
1c1bc     A7 26 02 FB | 	rdlong	local01, fp
1c1c0     08 4E 85 F1 | 	sub	fp, #8
1c1c4     1E 26 0E F2 | 	cmp	local01, #30 wz
1c1c8     A7 FA 01 AB |  if_e	rdlong	result1, fp
1c1cc     1F FA E5 A4 |  if_e	bitnot	result1, #31
1c1d0     A7 FA 61 AC |  if_e	wrlong	result1, fp
1c1d4     08 4E 05 51 |  if_ne	add	fp, #8
1c1d8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1c1dc     08 4E 85 51 |  if_ne	sub	fp, #8
1c1e0     A7 50 68 5C |  if_ne	wrlong	#40, fp
1c1e4                 | LR__2281
1c1e4                 | LR__2282
1c1e4     A7 12 02 F6 | 	mov	arg01, fp
1c1e8     8C 07 BF FD | 	call	#_push
1c1ec     A7 F0 03 F6 | 	mov	ptra, fp
1c1f0     B2 00 A0 FD | 	call	#popregs_
1c1f4                 | _do_negative_ret
1c1f4     2D 00 64 FD | 	ret
1c1f8                 | 
1c1f8                 | ' 
1c1f8                 | ' '--------------------------------- MOD (modulo)
1c1f8                 | ' 
1c1f8                 | ' sub do_mod 
1c1f8                 | _do_mod
1c1f8     01 4A 05 F6 | 	mov	COUNT_, #1
1c1fc     A8 00 A0 FD | 	call	#pushregs_
1c200     18 F0 07 F1 | 	add	ptra, #24
1c204     D8 06 BF FD | 	call	#_pop
1c208     FD 8A 02 F6 | 	mov	muldivb_, result1
1c20c     FE 88 02 F6 | 	mov	muldiva_, result2
1c210     FF 26 02 F6 | 	mov	local01, result3
1c214     0C 4E 05 F1 | 	add	fp, #12
1c218     A7 8A 62 FC | 	wrlong	muldivb_, fp
1c21c     04 4E 05 F1 | 	add	fp, #4
1c220     A7 88 62 FC | 	wrlong	muldiva_, fp
1c224     04 4E 05 F1 | 	add	fp, #4
1c228     A7 26 62 FC | 	wrlong	local01, fp
1c22c     14 4E 85 F1 | 	sub	fp, #20
1c230     AC 06 BF FD | 	call	#_pop
1c234     A7 FA 61 FC | 	wrlong	result1, fp
1c238     04 4E 05 F1 | 	add	fp, #4
1c23c     A7 FC 61 FC | 	wrlong	result2, fp
1c240     04 4E 05 F1 | 	add	fp, #4
1c244     A7 FE 61 FC | 	wrlong	result3, fp
1c248                 | ' 
1c248                 | ' t2=pop()
1c248                 | ' t1=pop()
1c248                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1c248     08 4E 85 F1 | 	sub	fp, #8
1c24c     1F FE 0D F2 | 	cmp	result3, #31 wz
1c250     14 4E 05 51 |  if_ne	add	fp, #20
1c254     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1c258     14 4E 85 51 |  if_ne	sub	fp, #20
1c25c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1c260     A7 14 68 AC |  if_e	wrlong	#10, fp
1c264     08 4E 05 A1 |  if_e	add	fp, #8
1c268     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c26c     08 4E 85 A1 |  if_e	sub	fp, #8
1c270     90 01 90 AD |  if_e	jmp	#LR__2296
1c274                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1c274     08 4E 05 F1 | 	add	fp, #8
1c278     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c27c     08 4E 85 F1 | 	sub	fp, #8
1c280     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1c284     1C 00 90 5D |  if_ne	jmp	#LR__2290
1c288     08 4E 05 F1 | 	add	fp, #8
1c28c     A7 38 68 FC | 	wrlong	#28, fp
1c290     08 4E 85 F1 | 	sub	fp, #8
1c294     A7 12 02 FB | 	rdlong	arg01, fp
1c298     00 14 06 F6 | 	mov	arg02, #0
1c29c     34 A0 B0 FD | 	call	#__system___float_tointeger
1c2a0     A7 FA 61 FC | 	wrlong	result1, fp
1c2a4                 | LR__2290
1c2a4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1c2a4     14 4E 05 F1 | 	add	fp, #20
1c2a8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c2ac     14 4E 85 F1 | 	sub	fp, #20
1c2b0     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1c2b4     28 00 90 5D |  if_ne	jmp	#LR__2291
1c2b8     14 4E 05 F1 | 	add	fp, #20
1c2bc     A7 38 68 FC | 	wrlong	#28, fp
1c2c0     08 4E 85 F1 | 	sub	fp, #8
1c2c4     A7 12 02 FB | 	rdlong	arg01, fp
1c2c8     0C 4E 85 F1 | 	sub	fp, #12
1c2cc     00 14 06 F6 | 	mov	arg02, #0
1c2d0     00 A0 B0 FD | 	call	#__system___float_tointeger
1c2d4     0C 4E 05 F1 | 	add	fp, #12
1c2d8     A7 FA 61 FC | 	wrlong	result1, fp
1c2dc     0C 4E 85 F1 | 	sub	fp, #12
1c2e0                 | LR__2291
1c2e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1c2e0     08 4E 05 F1 | 	add	fp, #8
1c2e4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c2e8     08 4E 85 F1 | 	sub	fp, #8
1c2ec     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1c2f0     14 4E 05 A1 |  if_e	add	fp, #20
1c2f4     A7 26 02 AB |  if_e	rdlong	local01, fp
1c2f8     14 4E 85 A1 |  if_e	sub	fp, #20
1c2fc     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1c300     20 00 90 5D |  if_ne	jmp	#LR__2292
1c304     0C 4E 05 F1 | 	add	fp, #12
1c308     A7 26 02 FB | 	rdlong	local01, fp
1c30c     0C 4E 85 F1 | 	sub	fp, #12
1c310     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c314     13 8B 12 FD | 	qdiv	muldivb_, local01
1c318     19 26 62 FD | 	getqy	local01
1c31c     A7 26 62 FC | 	wrlong	local01, fp
1c320     E0 00 90 FD | 	jmp	#LR__2296
1c324                 | LR__2292
1c324                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1c324     08 4E 05 F1 | 	add	fp, #8
1c328     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c32c     08 4E 85 F1 | 	sub	fp, #8
1c330     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1c334     14 4E 05 A1 |  if_e	add	fp, #20
1c338     A7 26 02 AB |  if_e	rdlong	local01, fp
1c33c     14 4E 85 A1 |  if_e	sub	fp, #20
1c340     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1c344     2C 00 90 5D |  if_ne	jmp	#LR__2293
1c348     0C 4E 05 F1 | 	add	fp, #12
1c34c     A7 26 02 FB | 	rdlong	local01, fp
1c350     0C 4E 85 F1 | 	sub	fp, #12
1c354     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c358     13 8B 12 FD | 	qdiv	muldivb_, local01
1c35c     19 26 62 FD | 	getqy	local01
1c360     A7 26 62 FC | 	wrlong	local01, fp
1c364     08 4E 05 F1 | 	add	fp, #8
1c368     A7 38 68 FC | 	wrlong	#28, fp
1c36c     08 4E 85 F1 | 	sub	fp, #8
1c370     90 00 90 FD | 	jmp	#LR__2296
1c374                 | LR__2293
1c374                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1c374     08 4E 05 F1 | 	add	fp, #8
1c378     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c37c     08 4E 85 F1 | 	sub	fp, #8
1c380     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1c384     14 4E 05 A1 |  if_e	add	fp, #20
1c388     A7 26 02 AB |  if_e	rdlong	local01, fp
1c38c     14 4E 85 A1 |  if_e	sub	fp, #20
1c390     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1c394     1C 00 90 5D |  if_ne	jmp	#LR__2294
1c398     A7 88 02 FB | 	rdlong	muldiva_, fp
1c39c     0C 4E 05 F1 | 	add	fp, #12
1c3a0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c3a4     0C 4E 85 F1 | 	sub	fp, #12
1c3a8     BA 00 A0 FD | 	call	#divide_
1c3ac     A7 88 62 FC | 	wrlong	muldiva_, fp
1c3b0     50 00 90 FD | 	jmp	#LR__2296
1c3b4                 | LR__2294
1c3b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1c3b4     08 4E 05 F1 | 	add	fp, #8
1c3b8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c3bc     08 4E 85 F1 | 	sub	fp, #8
1c3c0     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1c3c4     14 4E 05 A1 |  if_e	add	fp, #20
1c3c8     A7 26 02 AB |  if_e	rdlong	local01, fp
1c3cc     14 4E 85 A1 |  if_e	sub	fp, #20
1c3d0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1c3d4     1C 00 90 5D |  if_ne	jmp	#LR__2295
1c3d8     A7 88 02 FB | 	rdlong	muldiva_, fp
1c3dc     0C 4E 05 F1 | 	add	fp, #12
1c3e0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1c3e4     0C 4E 85 F1 | 	sub	fp, #12
1c3e8     BA 00 A0 FD | 	call	#divide_
1c3ec     A7 88 62 FC | 	wrlong	muldiva_, fp
1c3f0     10 00 90 FD | 	jmp	#LR__2296
1c3f4                 | LR__2295
1c3f4     A7 16 68 FC | 	wrlong	#11, fp
1c3f8     08 4E 05 F1 | 	add	fp, #8
1c3fc     A7 FE 69 FC | 	wrlong	#255, fp
1c400     08 4E 85 F1 | 	sub	fp, #8
1c404                 | LR__2296
1c404     A7 12 02 F6 | 	mov	arg01, fp
1c408     6C 05 BF FD | 	call	#_push
1c40c     A7 F0 03 F6 | 	mov	ptra, fp
1c410     B2 00 A0 FD | 	call	#popregs_
1c414                 | _do_mod_ret
1c414     2D 00 64 FD | 	ret
1c418                 | 
1c418                 | ' 
1c418                 | ' '--------------------------------- mul (*)
1c418                 | ' 
1c418                 | ' sub do_mul
1c418                 | _do_mul
1c418     05 4A 05 F6 | 	mov	COUNT_, #5
1c41c     A8 00 A0 FD | 	call	#pushregs_
1c420     18 F0 07 F1 | 	add	ptra, #24
1c424     B8 04 BF FD | 	call	#_pop
1c428     FD 26 02 F6 | 	mov	local01, result1
1c42c     FE 28 02 F6 | 	mov	local02, result2
1c430     FF 2A 02 F6 | 	mov	local03, result3
1c434     0C 4E 05 F1 | 	add	fp, #12
1c438     A7 26 62 FC | 	wrlong	local01, fp
1c43c     04 4E 05 F1 | 	add	fp, #4
1c440     A7 28 62 FC | 	wrlong	local02, fp
1c444     04 4E 05 F1 | 	add	fp, #4
1c448     A7 2A 62 FC | 	wrlong	local03, fp
1c44c     14 4E 85 F1 | 	sub	fp, #20
1c450     8C 04 BF FD | 	call	#_pop
1c454     FF 2A 02 F6 | 	mov	local03, result3
1c458     A7 FA 61 FC | 	wrlong	result1, fp
1c45c     04 4E 05 F1 | 	add	fp, #4
1c460     A7 FC 61 FC | 	wrlong	result2, fp
1c464     04 4E 05 F1 | 	add	fp, #4
1c468     A7 2A 62 FC | 	wrlong	local03, fp
1c46c                 | ' 
1c46c                 | ' t2=pop()
1c46c                 | ' t1=pop()
1c46c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1c46c     08 4E 85 F1 | 	sub	fp, #8
1c470     1D 2A 0E F2 | 	cmp	local03, #29 wz
1c474     14 4E 05 A1 |  if_e	add	fp, #20
1c478     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c47c     14 4E 85 A1 |  if_e	sub	fp, #20
1c480     16 2B 02 A6 |  if_e	mov	local03, local04
1c484     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c488     20 00 90 5D |  if_ne	jmp	#LR__2300
1c48c     A7 28 02 FB | 	rdlong	local02, fp
1c490     0C 4E 05 F1 | 	add	fp, #12
1c494     A7 2A 02 FB | 	rdlong	local03, fp
1c498     15 29 02 FD | 	qmul	local02, local03
1c49c     0C 4E 85 F1 | 	sub	fp, #12
1c4a0     18 26 62 FD | 	getqx	local01
1c4a4     A7 26 62 FC | 	wrlong	local01, fp
1c4a8     C4 02 90 FD | 	jmp	#LR__2309
1c4ac                 | LR__2300
1c4ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1c4ac     08 4E 05 F1 | 	add	fp, #8
1c4b0     A7 26 02 FB | 	rdlong	local01, fp
1c4b4     08 4E 85 F1 | 	sub	fp, #8
1c4b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1c4bc     14 4E 05 A1 |  if_e	add	fp, #20
1c4c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c4c4     14 4E 85 A1 |  if_e	sub	fp, #20
1c4c8     16 2B 02 A6 |  if_e	mov	local03, local04
1c4cc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c4d0     2C 00 90 5D |  if_ne	jmp	#LR__2301
1c4d4     A7 28 02 FB | 	rdlong	local02, fp
1c4d8     0C 4E 05 F1 | 	add	fp, #12
1c4dc     A7 2A 02 FB | 	rdlong	local03, fp
1c4e0     15 29 02 FD | 	qmul	local02, local03
1c4e4     0C 4E 85 F1 | 	sub	fp, #12
1c4e8     18 26 62 FD | 	getqx	local01
1c4ec     A7 26 62 FC | 	wrlong	local01, fp
1c4f0     08 4E 05 F1 | 	add	fp, #8
1c4f4     A7 38 68 FC | 	wrlong	#28, fp
1c4f8     08 4E 85 F1 | 	sub	fp, #8
1c4fc     70 02 90 FD | 	jmp	#LR__2309
1c500                 | LR__2301
1c500                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1c500     08 4E 05 F1 | 	add	fp, #8
1c504     A7 26 02 FB | 	rdlong	local01, fp
1c508     08 4E 85 F1 | 	sub	fp, #8
1c50c     1D 26 0E F2 | 	cmp	local01, #29 wz
1c510     14 4E 05 A1 |  if_e	add	fp, #20
1c514     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c518     14 4E 85 A1 |  if_e	sub	fp, #20
1c51c     16 2B 02 A6 |  if_e	mov	local03, local04
1c520     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c524     30 00 90 5D |  if_ne	jmp	#LR__2302
1c528     A7 12 02 FB | 	rdlong	arg01, fp
1c52c     D8 94 B0 FD | 	call	#__system___float_fromuns
1c530     FD 12 02 F6 | 	mov	arg01, result1
1c534     0C 4E 05 F1 | 	add	fp, #12
1c538     A7 14 02 FB | 	rdlong	arg02, fp
1c53c     0C 4E 85 F1 | 	sub	fp, #12
1c540     C8 98 B0 FD | 	call	#__system___float_mul
1c544     A7 FA 61 FC | 	wrlong	result1, fp
1c548     08 4E 05 F1 | 	add	fp, #8
1c54c     A7 3C 68 FC | 	wrlong	#30, fp
1c550     08 4E 85 F1 | 	sub	fp, #8
1c554     18 02 90 FD | 	jmp	#LR__2309
1c558                 | LR__2302
1c558                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1c558     08 4E 05 F1 | 	add	fp, #8
1c55c     A7 26 02 FB | 	rdlong	local01, fp
1c560     08 4E 85 F1 | 	sub	fp, #8
1c564     1C 26 0E F2 | 	cmp	local01, #28 wz
1c568     14 4E 05 A1 |  if_e	add	fp, #20
1c56c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c570     14 4E 85 A1 |  if_e	sub	fp, #20
1c574     16 2B 02 A6 |  if_e	mov	local03, local04
1c578     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c57c     20 00 90 5D |  if_ne	jmp	#LR__2303
1c580     A7 28 02 FB | 	rdlong	local02, fp
1c584     0C 4E 05 F1 | 	add	fp, #12
1c588     A7 2A 02 FB | 	rdlong	local03, fp
1c58c     15 29 02 FD | 	qmul	local02, local03
1c590     0C 4E 85 F1 | 	sub	fp, #12
1c594     18 26 62 FD | 	getqx	local01
1c598     A7 26 62 FC | 	wrlong	local01, fp
1c59c     D0 01 90 FD | 	jmp	#LR__2309
1c5a0                 | LR__2303
1c5a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1c5a0     08 4E 05 F1 | 	add	fp, #8
1c5a4     A7 26 02 FB | 	rdlong	local01, fp
1c5a8     08 4E 85 F1 | 	sub	fp, #8
1c5ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1c5b0     14 4E 05 A1 |  if_e	add	fp, #20
1c5b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c5b8     14 4E 85 A1 |  if_e	sub	fp, #20
1c5bc     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1c5c0     20 00 90 5D |  if_ne	jmp	#LR__2304
1c5c4     A7 28 02 FB | 	rdlong	local02, fp
1c5c8     0C 4E 05 F1 | 	add	fp, #12
1c5cc     A7 2A 02 FB | 	rdlong	local03, fp
1c5d0     15 29 02 FD | 	qmul	local02, local03
1c5d4     0C 4E 85 F1 | 	sub	fp, #12
1c5d8     18 26 62 FD | 	getqx	local01
1c5dc     A7 26 62 FC | 	wrlong	local01, fp
1c5e0     8C 01 90 FD | 	jmp	#LR__2309
1c5e4                 | LR__2304
1c5e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1c5e4     08 4E 05 F1 | 	add	fp, #8
1c5e8     A7 26 02 FB | 	rdlong	local01, fp
1c5ec     08 4E 85 F1 | 	sub	fp, #8
1c5f0     1C 26 0E F2 | 	cmp	local01, #28 wz
1c5f4     14 4E 05 A1 |  if_e	add	fp, #20
1c5f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c5fc     14 4E 85 A1 |  if_e	sub	fp, #20
1c600     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c604     40 00 90 5D |  if_ne	jmp	#LR__2305
1c608     A7 12 02 FB | 	rdlong	arg01, fp
1c60c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c610     1F 2E C6 C9 |  if_b	decod	local05, #31
1c614     00 2E 06 36 |  if_ae	mov	local05, #0
1c618     EC 93 B0 FD | 	call	#__system___float_fromuns
1c61c     17 FB 61 F5 | 	xor	result1, local05
1c620     FD 12 02 F6 | 	mov	arg01, result1
1c624     0C 4E 05 F1 | 	add	fp, #12
1c628     A7 14 02 FB | 	rdlong	arg02, fp
1c62c     0C 4E 85 F1 | 	sub	fp, #12
1c630     D8 97 B0 FD | 	call	#__system___float_mul
1c634     A7 FA 61 FC | 	wrlong	result1, fp
1c638     08 4E 05 F1 | 	add	fp, #8
1c63c     A7 3C 68 FC | 	wrlong	#30, fp
1c640     08 4E 85 F1 | 	sub	fp, #8
1c644     28 01 90 FD | 	jmp	#LR__2309
1c648                 | LR__2305
1c648                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1c648     08 4E 05 F1 | 	add	fp, #8
1c64c     A7 26 02 FB | 	rdlong	local01, fp
1c650     08 4E 85 F1 | 	sub	fp, #8
1c654     1E 26 0E F2 | 	cmp	local01, #30 wz
1c658     14 4E 05 A1 |  if_e	add	fp, #20
1c65c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c660     14 4E 85 A1 |  if_e	sub	fp, #20
1c664     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c668     28 00 90 5D |  if_ne	jmp	#LR__2306
1c66c     A7 26 02 FB | 	rdlong	local01, fp
1c670     0C 4E 05 F1 | 	add	fp, #12
1c674     A7 12 02 FB | 	rdlong	arg01, fp
1c678     0C 4E 85 F1 | 	sub	fp, #12
1c67c     88 93 B0 FD | 	call	#__system___float_fromuns
1c680     FD 14 02 F6 | 	mov	arg02, result1
1c684     13 13 02 F6 | 	mov	arg01, local01
1c688     80 97 B0 FD | 	call	#__system___float_mul
1c68c     A7 FA 61 FC | 	wrlong	result1, fp
1c690     DC 00 90 FD | 	jmp	#LR__2309
1c694                 | LR__2306
1c694                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1c694     08 4E 05 F1 | 	add	fp, #8
1c698     A7 26 02 FB | 	rdlong	local01, fp
1c69c     08 4E 85 F1 | 	sub	fp, #8
1c6a0     1E 26 0E F2 | 	cmp	local01, #30 wz
1c6a4     14 4E 05 A1 |  if_e	add	fp, #20
1c6a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c6ac     14 4E 85 A1 |  if_e	sub	fp, #20
1c6b0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c6b4     38 00 90 5D |  if_ne	jmp	#LR__2307
1c6b8     A7 26 02 FB | 	rdlong	local01, fp
1c6bc     0C 4E 05 F1 | 	add	fp, #12
1c6c0     A7 12 02 FB | 	rdlong	arg01, fp
1c6c4     0C 4E 85 F1 | 	sub	fp, #12
1c6c8     09 13 52 F6 | 	abs	arg01, arg01 wc
1c6cc     1F 2E C6 C9 |  if_b	decod	local05, #31
1c6d0     00 2E 06 36 |  if_ae	mov	local05, #0
1c6d4     30 93 B0 FD | 	call	#__system___float_fromuns
1c6d8     17 FB 61 F5 | 	xor	result1, local05
1c6dc     FD 14 02 F6 | 	mov	arg02, result1
1c6e0     13 13 02 F6 | 	mov	arg01, local01
1c6e4     24 97 B0 FD | 	call	#__system___float_mul
1c6e8     A7 FA 61 FC | 	wrlong	result1, fp
1c6ec     80 00 90 FD | 	jmp	#LR__2309
1c6f0                 | LR__2307
1c6f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1c6f0     08 4E 05 F1 | 	add	fp, #8
1c6f4     A7 26 02 FB | 	rdlong	local01, fp
1c6f8     08 4E 85 F1 | 	sub	fp, #8
1c6fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1c700     14 4E 05 A1 |  if_e	add	fp, #20
1c704     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c708     14 4E 85 A1 |  if_e	sub	fp, #20
1c70c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c710     1C 00 90 5D |  if_ne	jmp	#LR__2308
1c714     A7 12 02 FB | 	rdlong	arg01, fp
1c718     0C 4E 05 F1 | 	add	fp, #12
1c71c     A7 14 02 FB | 	rdlong	arg02, fp
1c720     0C 4E 85 F1 | 	sub	fp, #12
1c724     E4 96 B0 FD | 	call	#__system___float_mul
1c728     A7 FA 61 FC | 	wrlong	result1, fp
1c72c     40 00 90 FD | 	jmp	#LR__2309
1c730                 | LR__2308
1c730                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1c730     08 4E 05 F1 | 	add	fp, #8
1c734     A7 26 02 FB | 	rdlong	local01, fp
1c738     08 4E 85 F1 | 	sub	fp, #8
1c73c     1F 26 0E F2 | 	cmp	local01, #31 wz
1c740     14 4E 05 51 |  if_ne	add	fp, #20
1c744     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c748     14 4E 85 51 |  if_ne	sub	fp, #20
1c74c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1c750     A7 10 68 AC |  if_e	wrlong	#8, fp
1c754     08 4E 05 A1 |  if_e	add	fp, #8
1c758     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c75c     08 4E 85 A1 |  if_e	sub	fp, #8
1c760     A7 12 68 5C |  if_ne	wrlong	#9, fp
1c764     08 4E 05 51 |  if_ne	add	fp, #8
1c768     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1c76c     08 4E 85 51 |  if_ne	sub	fp, #8
1c770                 | LR__2309
1c770     A7 12 02 F6 | 	mov	arg01, fp
1c774     00 02 BF FD | 	call	#_push
1c778     A7 F0 03 F6 | 	mov	ptra, fp
1c77c     B2 00 A0 FD | 	call	#popregs_
1c780                 | _do_mul_ret
1c780     2D 00 64 FD | 	ret
1c784                 | 
1c784                 | ' 
1c784                 | ' '--------------------------------- not equal (<>)
1c784                 | ' 
1c784                 | ' sub do_ne
1c784                 | _do_ne
1c784     05 4A 05 F6 | 	mov	COUNT_, #5
1c788     A8 00 A0 FD | 	call	#pushregs_
1c78c     18 F0 07 F1 | 	add	ptra, #24
1c790     4C 01 BF FD | 	call	#_pop
1c794     FD 26 02 F6 | 	mov	local01, result1
1c798     FE 28 02 F6 | 	mov	local02, result2
1c79c     FF 2A 02 F6 | 	mov	local03, result3
1c7a0     0C 4E 05 F1 | 	add	fp, #12
1c7a4     A7 26 62 FC | 	wrlong	local01, fp
1c7a8     04 4E 05 F1 | 	add	fp, #4
1c7ac     A7 28 62 FC | 	wrlong	local02, fp
1c7b0     04 4E 05 F1 | 	add	fp, #4
1c7b4     A7 2A 62 FC | 	wrlong	local03, fp
1c7b8     14 4E 85 F1 | 	sub	fp, #20
1c7bc     20 01 BF FD | 	call	#_pop
1c7c0     FF 2A 02 F6 | 	mov	local03, result3
1c7c4     A7 FA 61 FC | 	wrlong	result1, fp
1c7c8     04 4E 05 F1 | 	add	fp, #4
1c7cc     A7 FC 61 FC | 	wrlong	result2, fp
1c7d0     04 4E 05 F1 | 	add	fp, #4
1c7d4     A7 2A 62 FC | 	wrlong	local03, fp
1c7d8                 | ' 
1c7d8                 | ' t2=pop()
1c7d8                 | ' t1=pop()
1c7d8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1c7d8     08 4E 85 F1 | 	sub	fp, #8
1c7dc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c7e0     14 4E 05 A1 |  if_e	add	fp, #20
1c7e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c7e8     14 4E 85 A1 |  if_e	sub	fp, #20
1c7ec     16 2B 02 A6 |  if_e	mov	local03, local04
1c7f0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c7f4     28 00 90 5D |  if_ne	jmp	#LR__2310
1c7f8     00 26 06 F6 | 	mov	local01, #0
1c7fc     A7 12 02 FB | 	rdlong	arg01, fp
1c800     0C 4E 05 F1 | 	add	fp, #12
1c804     A7 14 02 FB | 	rdlong	arg02, fp
1c808     0C 4E 85 F1 | 	sub	fp, #12
1c80c     AC 67 B0 FD | 	call	#__system___string_cmp
1c810     00 FA 0D F2 | 	cmp	result1, #0 wz
1c814     00 26 26 56 |  if_ne	not	local01, #0
1c818     A7 26 62 FC | 	wrlong	local01, fp
1c81c     20 04 90 FD | 	jmp	#LR__2323
1c820                 | LR__2310
1c820                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1c820     08 4E 05 F1 | 	add	fp, #8
1c824     A7 26 02 FB | 	rdlong	local01, fp
1c828     08 4E 85 F1 | 	sub	fp, #8
1c82c     1E 26 0E F2 | 	cmp	local01, #30 wz
1c830     14 4E 05 A1 |  if_e	add	fp, #20
1c834     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c838     14 4E 85 A1 |  if_e	sub	fp, #20
1c83c     16 2B 02 A6 |  if_e	mov	local03, local04
1c840     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c844     2C 00 90 5D |  if_ne	jmp	#LR__2311
1c848     00 26 06 F6 | 	mov	local01, #0
1c84c     A7 12 02 FB | 	rdlong	arg01, fp
1c850     0C 4E 05 F1 | 	add	fp, #12
1c854     A7 14 02 FB | 	rdlong	arg02, fp
1c858     0C 4E 85 F1 | 	sub	fp, #12
1c85c     01 16 06 F6 | 	mov	arg03, #1
1c860     DC 99 B0 FD | 	call	#__system___float_cmp
1c864     00 FA 0D F2 | 	cmp	result1, #0 wz
1c868     00 26 26 56 |  if_ne	not	local01, #0
1c86c     A7 26 62 FC | 	wrlong	local01, fp
1c870     CC 03 90 FD | 	jmp	#LR__2323
1c874                 | LR__2311
1c874                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1c874     08 4E 05 F1 | 	add	fp, #8
1c878     A7 26 02 FB | 	rdlong	local01, fp
1c87c     08 4E 85 F1 | 	sub	fp, #8
1c880     1E 26 0E F2 | 	cmp	local01, #30 wz
1c884     14 4E 05 A1 |  if_e	add	fp, #20
1c888     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c88c     14 4E 85 A1 |  if_e	sub	fp, #20
1c890     16 2B 02 A6 |  if_e	mov	local03, local04
1c894     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c898     48 00 90 5D |  if_ne	jmp	#LR__2312
1c89c     00 26 06 F6 | 	mov	local01, #0
1c8a0     A7 28 02 FB | 	rdlong	local02, fp
1c8a4     0C 4E 05 F1 | 	add	fp, #12
1c8a8     A7 12 02 FB | 	rdlong	arg01, fp
1c8ac     0C 4E 85 F1 | 	sub	fp, #12
1c8b0     09 13 52 F6 | 	abs	arg01, arg01 wc
1c8b4     1F 2E C6 C9 |  if_b	decod	local05, #31
1c8b8     00 2E 06 36 |  if_ae	mov	local05, #0
1c8bc     48 91 B0 FD | 	call	#__system___float_fromuns
1c8c0     17 FB 61 F5 | 	xor	result1, local05
1c8c4     FD 14 02 F6 | 	mov	arg02, result1
1c8c8     14 13 02 F6 | 	mov	arg01, local02
1c8cc     01 16 06 F6 | 	mov	arg03, #1
1c8d0     6C 99 B0 FD | 	call	#__system___float_cmp
1c8d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c8d8     00 26 26 56 |  if_ne	not	local01, #0
1c8dc     A7 26 62 FC | 	wrlong	local01, fp
1c8e0     5C 03 90 FD | 	jmp	#LR__2323
1c8e4                 | LR__2312
1c8e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1c8e4     08 4E 05 F1 | 	add	fp, #8
1c8e8     A7 26 02 FB | 	rdlong	local01, fp
1c8ec     08 4E 85 F1 | 	sub	fp, #8
1c8f0     1E 26 0E F2 | 	cmp	local01, #30 wz
1c8f4     14 4E 05 A1 |  if_e	add	fp, #20
1c8f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c8fc     14 4E 85 A1 |  if_e	sub	fp, #20
1c900     16 2B 02 A6 |  if_e	mov	local03, local04
1c904     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c908     38 00 90 5D |  if_ne	jmp	#LR__2313
1c90c     00 26 06 F6 | 	mov	local01, #0
1c910     A7 28 02 FB | 	rdlong	local02, fp
1c914     0C 4E 05 F1 | 	add	fp, #12
1c918     A7 12 02 FB | 	rdlong	arg01, fp
1c91c     0C 4E 85 F1 | 	sub	fp, #12
1c920     E4 90 B0 FD | 	call	#__system___float_fromuns
1c924     FD 14 02 F6 | 	mov	arg02, result1
1c928     14 13 02 F6 | 	mov	arg01, local02
1c92c     01 16 06 F6 | 	mov	arg03, #1
1c930     0C 99 B0 FD | 	call	#__system___float_cmp
1c934     00 FA 0D F2 | 	cmp	result1, #0 wz
1c938     00 26 26 56 |  if_ne	not	local01, #0
1c93c     A7 26 62 FC | 	wrlong	local01, fp
1c940     FC 02 90 FD | 	jmp	#LR__2323
1c944                 | LR__2313
1c944                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1c944     08 4E 05 F1 | 	add	fp, #8
1c948     A7 26 02 FB | 	rdlong	local01, fp
1c94c     08 4E 85 F1 | 	sub	fp, #8
1c950     1C 26 0E F2 | 	cmp	local01, #28 wz
1c954     14 4E 05 A1 |  if_e	add	fp, #20
1c958     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c95c     14 4E 85 A1 |  if_e	sub	fp, #20
1c960     16 2B 02 A6 |  if_e	mov	local03, local04
1c964     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c968     44 00 90 5D |  if_ne	jmp	#LR__2314
1c96c     00 26 06 F6 | 	mov	local01, #0
1c970     A7 12 02 FB | 	rdlong	arg01, fp
1c974     09 13 52 F6 | 	abs	arg01, arg01 wc
1c978     1F 2E C6 C9 |  if_b	decod	local05, #31
1c97c     00 2E 06 36 |  if_ae	mov	local05, #0
1c980     84 90 B0 FD | 	call	#__system___float_fromuns
1c984     17 FB 61 F5 | 	xor	result1, local05
1c988     FD 12 02 F6 | 	mov	arg01, result1
1c98c     0C 4E 05 F1 | 	add	fp, #12
1c990     A7 14 02 FB | 	rdlong	arg02, fp
1c994     0C 4E 85 F1 | 	sub	fp, #12
1c998     01 16 06 F6 | 	mov	arg03, #1
1c99c     A0 98 B0 FD | 	call	#__system___float_cmp
1c9a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9a4     00 26 26 56 |  if_ne	not	local01, #0
1c9a8     A7 26 62 FC | 	wrlong	local01, fp
1c9ac     90 02 90 FD | 	jmp	#LR__2323
1c9b0                 | LR__2314
1c9b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1c9b0     08 4E 05 F1 | 	add	fp, #8
1c9b4     A7 26 02 FB | 	rdlong	local01, fp
1c9b8     08 4E 85 F1 | 	sub	fp, #8
1c9bc     1C 26 0E F2 | 	cmp	local01, #28 wz
1c9c0     14 4E 05 A1 |  if_e	add	fp, #20
1c9c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c9c8     14 4E 85 A1 |  if_e	sub	fp, #20
1c9cc     16 2B 02 A6 |  if_e	mov	local03, local04
1c9d0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c9d4     24 00 90 5D |  if_ne	jmp	#LR__2315
1c9d8     00 26 06 F6 | 	mov	local01, #0
1c9dc     A7 28 02 FB | 	rdlong	local02, fp
1c9e0     0C 4E 05 F1 | 	add	fp, #12
1c9e4     A7 2A 02 FB | 	rdlong	local03, fp
1c9e8     0C 4E 85 F1 | 	sub	fp, #12
1c9ec     15 29 0A F2 | 	cmp	local02, local03 wz
1c9f0     01 26 66 56 |  if_ne	neg	local01, #1
1c9f4     A7 26 62 FC | 	wrlong	local01, fp
1c9f8     44 02 90 FD | 	jmp	#LR__2323
1c9fc                 | LR__2315
1c9fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1c9fc     08 4E 05 F1 | 	add	fp, #8
1ca00     A7 26 02 FB | 	rdlong	local01, fp
1ca04     08 4E 85 F1 | 	sub	fp, #8
1ca08     1C 26 0E F2 | 	cmp	local01, #28 wz
1ca0c     14 4E 05 A1 |  if_e	add	fp, #20
1ca10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ca14     14 4E 85 A1 |  if_e	sub	fp, #20
1ca18     16 2B 02 A6 |  if_e	mov	local03, local04
1ca1c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ca20     24 00 90 5D |  if_ne	jmp	#LR__2316
1ca24     00 26 06 F6 | 	mov	local01, #0
1ca28     A7 28 02 FB | 	rdlong	local02, fp
1ca2c     0C 4E 05 F1 | 	add	fp, #12
1ca30     A7 2A 02 FB | 	rdlong	local03, fp
1ca34     0C 4E 85 F1 | 	sub	fp, #12
1ca38     15 29 0A F2 | 	cmp	local02, local03 wz
1ca3c     01 26 66 56 |  if_ne	neg	local01, #1
1ca40     A7 26 62 FC | 	wrlong	local01, fp
1ca44     F8 01 90 FD | 	jmp	#LR__2323
1ca48                 | LR__2316
1ca48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1ca48     08 4E 05 F1 | 	add	fp, #8
1ca4c     A7 26 02 FB | 	rdlong	local01, fp
1ca50     08 4E 85 F1 | 	sub	fp, #8
1ca54     1D 26 0E F2 | 	cmp	local01, #29 wz
1ca58     14 4E 05 A1 |  if_e	add	fp, #20
1ca5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ca60     14 4E 85 A1 |  if_e	sub	fp, #20
1ca64     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ca68     34 00 90 5D |  if_ne	jmp	#LR__2317
1ca6c     00 26 06 F6 | 	mov	local01, #0
1ca70     A7 12 02 FB | 	rdlong	arg01, fp
1ca74     90 8F B0 FD | 	call	#__system___float_fromuns
1ca78     FD 12 02 F6 | 	mov	arg01, result1
1ca7c     0C 4E 05 F1 | 	add	fp, #12
1ca80     A7 14 02 FB | 	rdlong	arg02, fp
1ca84     0C 4E 85 F1 | 	sub	fp, #12
1ca88     01 16 06 F6 | 	mov	arg03, #1
1ca8c     B0 97 B0 FD | 	call	#__system___float_cmp
1ca90     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca94     00 26 26 56 |  if_ne	not	local01, #0
1ca98     A7 26 62 FC | 	wrlong	local01, fp
1ca9c     A0 01 90 FD | 	jmp	#LR__2323
1caa0                 | LR__2317
1caa0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1caa0     08 4E 05 F1 | 	add	fp, #8
1caa4     A7 26 02 FB | 	rdlong	local01, fp
1caa8     08 4E 85 F1 | 	sub	fp, #8
1caac     1D 26 0E F2 | 	cmp	local01, #29 wz
1cab0     14 4E 05 A1 |  if_e	add	fp, #20
1cab4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cab8     14 4E 85 A1 |  if_e	sub	fp, #20
1cabc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cac0     24 00 90 5D |  if_ne	jmp	#LR__2318
1cac4     00 26 06 F6 | 	mov	local01, #0
1cac8     A7 28 02 FB | 	rdlong	local02, fp
1cacc     0C 4E 05 F1 | 	add	fp, #12
1cad0     A7 2A 02 FB | 	rdlong	local03, fp
1cad4     0C 4E 85 F1 | 	sub	fp, #12
1cad8     15 29 0A F2 | 	cmp	local02, local03 wz
1cadc     01 26 66 56 |  if_ne	neg	local01, #1
1cae0     A7 26 62 FC | 	wrlong	local01, fp
1cae4     58 01 90 FD | 	jmp	#LR__2323
1cae8                 | LR__2318
1cae8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1cae8     08 4E 05 F1 | 	add	fp, #8
1caec     A7 26 02 FB | 	rdlong	local01, fp
1caf0     08 4E 85 F1 | 	sub	fp, #8
1caf4     1D 26 0E F2 | 	cmp	local01, #29 wz
1caf8     14 4E 05 A1 |  if_e	add	fp, #20
1cafc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cb00     14 4E 85 A1 |  if_e	sub	fp, #20
1cb04     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cb08     24 00 90 5D |  if_ne	jmp	#LR__2319
1cb0c     00 26 06 F6 | 	mov	local01, #0
1cb10     A7 28 02 FB | 	rdlong	local02, fp
1cb14     0C 4E 05 F1 | 	add	fp, #12
1cb18     A7 2A 02 FB | 	rdlong	local03, fp
1cb1c     0C 4E 85 F1 | 	sub	fp, #12
1cb20     15 29 0A F2 | 	cmp	local02, local03 wz
1cb24     01 26 66 56 |  if_ne	neg	local01, #1
1cb28     A7 26 62 FC | 	wrlong	local01, fp
1cb2c     10 01 90 FD | 	jmp	#LR__2323
1cb30                 | LR__2319
1cb30                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1cb30     08 4E 05 F1 | 	add	fp, #8
1cb34     A7 26 02 FB | 	rdlong	local01, fp
1cb38     08 4E 85 F1 | 	sub	fp, #8
1cb3c     2B 26 0E F2 | 	cmp	local01, #43 wz
1cb40     14 4E 05 A1 |  if_e	add	fp, #20
1cb44     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cb48     14 4E 85 A1 |  if_e	sub	fp, #20
1cb4c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1cb50     30 00 90 5D |  if_ne	jmp	#LR__2320
1cb54     00 26 06 F6 | 	mov	local01, #0
1cb58     A7 12 02 FB | 	rdlong	arg01, fp
1cb5c     F8 FE BE FD | 	call	#_convertstring
1cb60     FD 12 02 F6 | 	mov	arg01, result1
1cb64     0C 4E 05 F1 | 	add	fp, #12
1cb68     A7 14 02 FB | 	rdlong	arg02, fp
1cb6c     0C 4E 85 F1 | 	sub	fp, #12
1cb70     48 64 B0 FD | 	call	#__system___string_cmp
1cb74     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb78     00 26 26 56 |  if_ne	not	local01, #0
1cb7c     A7 26 62 FC | 	wrlong	local01, fp
1cb80     BC 00 90 FD | 	jmp	#LR__2323
1cb84                 | LR__2320
1cb84                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1cb84     08 4E 05 F1 | 	add	fp, #8
1cb88     A7 26 02 FB | 	rdlong	local01, fp
1cb8c     08 4E 85 F1 | 	sub	fp, #8
1cb90     1F 26 0E F2 | 	cmp	local01, #31 wz
1cb94     14 4E 05 A1 |  if_e	add	fp, #20
1cb98     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cb9c     14 4E 85 A1 |  if_e	sub	fp, #20
1cba0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1cba4     34 00 90 5D |  if_ne	jmp	#LR__2321
1cba8     00 26 06 F6 | 	mov	local01, #0
1cbac     A7 28 02 FB | 	rdlong	local02, fp
1cbb0     0C 4E 05 F1 | 	add	fp, #12
1cbb4     A7 12 02 FB | 	rdlong	arg01, fp
1cbb8     0C 4E 85 F1 | 	sub	fp, #12
1cbbc     98 FE BE FD | 	call	#_convertstring
1cbc0     FD 14 02 F6 | 	mov	arg02, result1
1cbc4     14 13 02 F6 | 	mov	arg01, local02
1cbc8     F0 63 B0 FD | 	call	#__system___string_cmp
1cbcc     00 FA 0D F2 | 	cmp	result1, #0 wz
1cbd0     00 26 26 56 |  if_ne	not	local01, #0
1cbd4     A7 26 62 FC | 	wrlong	local01, fp
1cbd8     64 00 90 FD | 	jmp	#LR__2323
1cbdc                 | LR__2321
1cbdc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1cbdc     08 4E 05 F1 | 	add	fp, #8
1cbe0     A7 26 02 FB | 	rdlong	local01, fp
1cbe4     08 4E 85 F1 | 	sub	fp, #8
1cbe8     2B 26 0E F2 | 	cmp	local01, #43 wz
1cbec     14 4E 05 A1 |  if_e	add	fp, #20
1cbf0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cbf4     14 4E 85 A1 |  if_e	sub	fp, #20
1cbf8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1cbfc     3C 00 90 5D |  if_ne	jmp	#LR__2322
1cc00     00 26 06 F6 | 	mov	local01, #0
1cc04     A7 12 02 FB | 	rdlong	arg01, fp
1cc08     4C FE BE FD | 	call	#_convertstring
1cc0c     FD 28 02 F6 | 	mov	local02, result1
1cc10     0C 4E 05 F1 | 	add	fp, #12
1cc14     A7 12 02 FB | 	rdlong	arg01, fp
1cc18     0C 4E 85 F1 | 	sub	fp, #12
1cc1c     38 FE BE FD | 	call	#_convertstring
1cc20     FD 14 02 F6 | 	mov	arg02, result1
1cc24     14 13 02 F6 | 	mov	arg01, local02
1cc28     90 63 B0 FD | 	call	#__system___string_cmp
1cc2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cc30     00 26 26 56 |  if_ne	not	local01, #0
1cc34     A7 26 62 FC | 	wrlong	local01, fp
1cc38     04 00 90 FD | 	jmp	#LR__2323
1cc3c                 | LR__2322
1cc3c     A7 00 68 FC | 	wrlong	#0, fp
1cc40                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1cc40                 | LR__2323
1cc40     08 4E 05 F1 | 	add	fp, #8
1cc44     A7 38 68 FC | 	wrlong	#28, fp
1cc48     08 4E 85 F1 | 	sub	fp, #8
1cc4c     A7 12 02 F6 | 	mov	arg01, fp
1cc50     24 FD BE FD | 	call	#_push
1cc54     A7 F0 03 F6 | 	mov	ptra, fp
1cc58     B2 00 A0 FD | 	call	#popregs_
1cc5c                 | _do_ne_ret
1cc5c     2D 00 64 FD | 	ret
1cc60                 | 
1cc60                 | ' 
1cc60                 | ' '--------------------------------- OR
1cc60                 | ' 
1cc60                 | ' sub do_or 
1cc60                 | _do_or
1cc60     03 4A 05 F6 | 	mov	COUNT_, #3
1cc64     A8 00 A0 FD | 	call	#pushregs_
1cc68     18 F0 07 F1 | 	add	ptra, #24
1cc6c     70 FC BE FD | 	call	#_pop
1cc70     FD 12 02 F6 | 	mov	arg01, result1
1cc74     FE 26 02 F6 | 	mov	local01, result2
1cc78     FF 28 02 F6 | 	mov	local02, result3
1cc7c     0C 4E 05 F1 | 	add	fp, #12
1cc80     A7 12 62 FC | 	wrlong	arg01, fp
1cc84     04 4E 05 F1 | 	add	fp, #4
1cc88     A7 26 62 FC | 	wrlong	local01, fp
1cc8c     04 4E 05 F1 | 	add	fp, #4
1cc90     A7 28 62 FC | 	wrlong	local02, fp
1cc94     14 4E 85 F1 | 	sub	fp, #20
1cc98     44 FC BE FD | 	call	#_pop
1cc9c     FF 2A 02 F6 | 	mov	local03, result3
1cca0     A7 FA 61 FC | 	wrlong	result1, fp
1cca4     04 4E 05 F1 | 	add	fp, #4
1cca8     A7 FC 61 FC | 	wrlong	result2, fp
1ccac     04 4E 05 F1 | 	add	fp, #4
1ccb0     A7 2A 62 FC | 	wrlong	local03, fp
1ccb4                 | ' 
1ccb4                 | ' t2=pop()
1ccb4                 | ' t1=pop()
1ccb4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ccb4     08 4E 85 F1 | 	sub	fp, #8
1ccb8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ccbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ccc0     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ccc4     08 4E 05 A1 |  if_e	add	fp, #8
1ccc8     A7 3A 68 AC |  if_e	wrlong	#29, fp
1cccc     08 4E 85 A1 |  if_e	sub	fp, #8
1ccd0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ccd0     14 4E 05 F1 | 	add	fp, #20
1ccd4     A7 2A 02 FB | 	rdlong	local03, fp
1ccd8     14 4E 85 F1 | 	sub	fp, #20
1ccdc     1C 2A 0E F2 | 	cmp	local03, #28 wz
1cce0     18 00 90 5D |  if_ne	jmp	#LR__2330
1cce4     0C 4E 05 F1 | 	add	fp, #12
1cce8     A7 2A 02 FB | 	rdlong	local03, fp
1ccec     A7 2A 62 FC | 	wrlong	local03, fp
1ccf0     08 4E 05 F1 | 	add	fp, #8
1ccf4     A7 3A 68 FC | 	wrlong	#29, fp
1ccf8     14 4E 85 F1 | 	sub	fp, #20
1ccfc                 | LR__2330
1ccfc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1ccfc     08 4E 05 F1 | 	add	fp, #8
1cd00     A7 2A 02 FB | 	rdlong	local03, fp
1cd04     08 4E 85 F1 | 	sub	fp, #8
1cd08     1F 2A 0E F2 | 	cmp	local03, #31 wz
1cd0c     14 4E 05 51 |  if_ne	add	fp, #20
1cd10     A7 28 02 5B |  if_ne	rdlong	local02, fp
1cd14     14 4E 85 51 |  if_ne	sub	fp, #20
1cd18     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1cd1c     08 4E 05 51 |  if_ne	add	fp, #8
1cd20     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1cd24     08 4E 85 51 |  if_ne	sub	fp, #8
1cd28     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1cd2c     14 4E 05 51 |  if_ne	add	fp, #20
1cd30     14 4E 85 51 |  if_ne	sub	fp, #20
1cd34     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1cd38     A7 0C 68 AC |  if_e	wrlong	#6, fp
1cd3c     08 4E 05 A1 |  if_e	add	fp, #8
1cd40     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cd44     08 4E 85 A1 |  if_e	sub	fp, #8
1cd48     18 00 90 AD |  if_e	jmp	#LR__2331
1cd4c     A7 2A 02 FB | 	rdlong	local03, fp
1cd50     0C 4E 05 F1 | 	add	fp, #12
1cd54     A7 26 02 FB | 	rdlong	local01, fp
1cd58     0C 4E 85 F1 | 	sub	fp, #12
1cd5c     13 2B 42 F5 | 	or	local03, local01
1cd60     A7 2A 62 FC | 	wrlong	local03, fp
1cd64                 | LR__2331
1cd64     A7 12 02 F6 | 	mov	arg01, fp
1cd68     0C FC BE FD | 	call	#_push
1cd6c     A7 F0 03 F6 | 	mov	ptra, fp
1cd70     B2 00 A0 FD | 	call	#popregs_
1cd74                 | _do_or_ret
1cd74     2D 00 64 FD | 	ret
1cd78                 | 
1cd78                 | ' 
1cd78                 | ' '--------------------------------- plus (+)
1cd78                 | ' 
1cd78                 | ' sub do_plus 
1cd78                 | _do_plus
1cd78     05 4A 05 F6 | 	mov	COUNT_, #5
1cd7c     A8 00 A0 FD | 	call	#pushregs_
1cd80     18 F0 07 F1 | 	add	ptra, #24
1cd84     58 FB BE FD | 	call	#_pop
1cd88     FD 26 02 F6 | 	mov	local01, result1
1cd8c     FE 28 02 F6 | 	mov	local02, result2
1cd90     FF 2A 02 F6 | 	mov	local03, result3
1cd94     0C 4E 05 F1 | 	add	fp, #12
1cd98     A7 26 62 FC | 	wrlong	local01, fp
1cd9c     04 4E 05 F1 | 	add	fp, #4
1cda0     A7 28 62 FC | 	wrlong	local02, fp
1cda4     04 4E 05 F1 | 	add	fp, #4
1cda8     A7 2A 62 FC | 	wrlong	local03, fp
1cdac     14 4E 85 F1 | 	sub	fp, #20
1cdb0     2C FB BE FD | 	call	#_pop
1cdb4     FF 2A 02 F6 | 	mov	local03, result3
1cdb8     A7 FA 61 FC | 	wrlong	result1, fp
1cdbc     04 4E 05 F1 | 	add	fp, #4
1cdc0     A7 FC 61 FC | 	wrlong	result2, fp
1cdc4     04 4E 05 F1 | 	add	fp, #4
1cdc8     A7 2A 62 FC | 	wrlong	local03, fp
1cdcc                 | ' 
1cdcc                 | ' t2=pop()
1cdcc                 | ' t1=pop()
1cdcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1cdcc     08 4E 85 F1 | 	sub	fp, #8
1cdd0     1D 2A 0E F2 | 	cmp	local03, #29 wz
1cdd4     14 4E 05 A1 |  if_e	add	fp, #20
1cdd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cddc     14 4E 85 A1 |  if_e	sub	fp, #20
1cde0     16 2B 02 A6 |  if_e	mov	local03, local04
1cde4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cde8     1C 00 90 5D |  if_ne	jmp	#LR__2340
1cdec     A7 26 02 FB | 	rdlong	local01, fp
1cdf0     0C 4E 05 F1 | 	add	fp, #12
1cdf4     A7 28 02 FB | 	rdlong	local02, fp
1cdf8     0C 4E 85 F1 | 	sub	fp, #12
1cdfc     14 27 02 F1 | 	add	local01, local02
1ce00     A7 26 62 FC | 	wrlong	local01, fp
1ce04     48 04 90 FD | 	jmp	#LR__2355
1ce08                 | LR__2340
1ce08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1ce08     08 4E 05 F1 | 	add	fp, #8
1ce0c     A7 26 02 FB | 	rdlong	local01, fp
1ce10     08 4E 85 F1 | 	sub	fp, #8
1ce14     1D 26 0E F2 | 	cmp	local01, #29 wz
1ce18     14 4E 05 A1 |  if_e	add	fp, #20
1ce1c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce20     14 4E 85 A1 |  if_e	sub	fp, #20
1ce24     16 2B 02 A6 |  if_e	mov	local03, local04
1ce28     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ce2c     28 00 90 5D |  if_ne	jmp	#LR__2341
1ce30     A7 26 02 FB | 	rdlong	local01, fp
1ce34     0C 4E 05 F1 | 	add	fp, #12
1ce38     A7 28 02 FB | 	rdlong	local02, fp
1ce3c     0C 4E 85 F1 | 	sub	fp, #12
1ce40     14 27 02 F1 | 	add	local01, local02
1ce44     A7 26 62 FC | 	wrlong	local01, fp
1ce48     08 4E 05 F1 | 	add	fp, #8
1ce4c     A7 38 68 FC | 	wrlong	#28, fp
1ce50     08 4E 85 F1 | 	sub	fp, #8
1ce54     F8 03 90 FD | 	jmp	#LR__2355
1ce58                 | LR__2341
1ce58                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1ce58     08 4E 05 F1 | 	add	fp, #8
1ce5c     A7 26 02 FB | 	rdlong	local01, fp
1ce60     08 4E 85 F1 | 	sub	fp, #8
1ce64     1D 26 0E F2 | 	cmp	local01, #29 wz
1ce68     14 4E 05 A1 |  if_e	add	fp, #20
1ce6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ce70     14 4E 85 A1 |  if_e	sub	fp, #20
1ce74     16 2B 02 A6 |  if_e	mov	local03, local04
1ce78     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ce7c     30 00 90 5D |  if_ne	jmp	#LR__2342
1ce80     A7 12 02 FB | 	rdlong	arg01, fp
1ce84     80 8B B0 FD | 	call	#__system___float_fromuns
1ce88     FD 12 02 F6 | 	mov	arg01, result1
1ce8c     0C 4E 05 F1 | 	add	fp, #12
1ce90     A7 14 02 FB | 	rdlong	arg02, fp
1ce94     0C 4E 85 F1 | 	sub	fp, #12
1ce98     A0 8B B0 FD | 	call	#__system___float_add
1ce9c     A7 FA 61 FC | 	wrlong	result1, fp
1cea0     08 4E 05 F1 | 	add	fp, #8
1cea4     A7 3C 68 FC | 	wrlong	#30, fp
1cea8     08 4E 85 F1 | 	sub	fp, #8
1ceac     A0 03 90 FD | 	jmp	#LR__2355
1ceb0                 | LR__2342
1ceb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1ceb0     08 4E 05 F1 | 	add	fp, #8
1ceb4     A7 26 02 FB | 	rdlong	local01, fp
1ceb8     08 4E 85 F1 | 	sub	fp, #8
1cebc     1C 26 0E F2 | 	cmp	local01, #28 wz
1cec0     14 4E 05 A1 |  if_e	add	fp, #20
1cec4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cec8     14 4E 85 A1 |  if_e	sub	fp, #20
1cecc     16 2B 02 A6 |  if_e	mov	local03, local04
1ced0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ced4     1C 00 90 5D |  if_ne	jmp	#LR__2343
1ced8     A7 26 02 FB | 	rdlong	local01, fp
1cedc     0C 4E 05 F1 | 	add	fp, #12
1cee0     A7 28 02 FB | 	rdlong	local02, fp
1cee4     0C 4E 85 F1 | 	sub	fp, #12
1cee8     14 27 02 F1 | 	add	local01, local02
1ceec     A7 26 62 FC | 	wrlong	local01, fp
1cef0     5C 03 90 FD | 	jmp	#LR__2355
1cef4                 | LR__2343
1cef4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1cef4     08 4E 05 F1 | 	add	fp, #8
1cef8     A7 26 02 FB | 	rdlong	local01, fp
1cefc     08 4E 85 F1 | 	sub	fp, #8
1cf00     1C 26 0E F2 | 	cmp	local01, #28 wz
1cf04     14 4E 05 A1 |  if_e	add	fp, #20
1cf08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cf0c     14 4E 85 A1 |  if_e	sub	fp, #20
1cf10     16 2B 02 A6 |  if_e	mov	local03, local04
1cf14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1cf18     1C 00 90 5D |  if_ne	jmp	#LR__2344
1cf1c     A7 26 02 FB | 	rdlong	local01, fp
1cf20     0C 4E 05 F1 | 	add	fp, #12
1cf24     A7 28 02 FB | 	rdlong	local02, fp
1cf28     0C 4E 85 F1 | 	sub	fp, #12
1cf2c     14 27 02 F1 | 	add	local01, local02
1cf30     A7 26 62 FC | 	wrlong	local01, fp
1cf34     18 03 90 FD | 	jmp	#LR__2355
1cf38                 | LR__2344
1cf38                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1cf38     08 4E 05 F1 | 	add	fp, #8
1cf3c     A7 26 02 FB | 	rdlong	local01, fp
1cf40     08 4E 85 F1 | 	sub	fp, #8
1cf44     1C 26 0E F2 | 	cmp	local01, #28 wz
1cf48     14 4E 05 A1 |  if_e	add	fp, #20
1cf4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cf50     14 4E 85 A1 |  if_e	sub	fp, #20
1cf54     16 2B 02 A6 |  if_e	mov	local03, local04
1cf58     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1cf5c     40 00 90 5D |  if_ne	jmp	#LR__2345
1cf60     A7 12 02 FB | 	rdlong	arg01, fp
1cf64     09 13 52 F6 | 	abs	arg01, arg01 wc
1cf68     1F 2E C6 C9 |  if_b	decod	local05, #31
1cf6c     00 2E 06 36 |  if_ae	mov	local05, #0
1cf70     94 8A B0 FD | 	call	#__system___float_fromuns
1cf74     17 FB 61 F5 | 	xor	result1, local05
1cf78     FD 12 02 F6 | 	mov	arg01, result1
1cf7c     0C 4E 05 F1 | 	add	fp, #12
1cf80     A7 14 02 FB | 	rdlong	arg02, fp
1cf84     0C 4E 85 F1 | 	sub	fp, #12
1cf88     B0 8A B0 FD | 	call	#__system___float_add
1cf8c     A7 FA 61 FC | 	wrlong	result1, fp
1cf90     08 4E 05 F1 | 	add	fp, #8
1cf94     A7 3C 68 FC | 	wrlong	#30, fp
1cf98     08 4E 85 F1 | 	sub	fp, #8
1cf9c     B0 02 90 FD | 	jmp	#LR__2355
1cfa0                 | LR__2345
1cfa0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1cfa0     08 4E 05 F1 | 	add	fp, #8
1cfa4     A7 26 02 FB | 	rdlong	local01, fp
1cfa8     08 4E 85 F1 | 	sub	fp, #8
1cfac     1E 26 0E F2 | 	cmp	local01, #30 wz
1cfb0     14 4E 05 A1 |  if_e	add	fp, #20
1cfb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1cfb8     14 4E 85 A1 |  if_e	sub	fp, #20
1cfbc     16 2B 02 A6 |  if_e	mov	local03, local04
1cfc0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1cfc4     28 00 90 5D |  if_ne	jmp	#LR__2346
1cfc8     A7 26 02 FB | 	rdlong	local01, fp
1cfcc     0C 4E 05 F1 | 	add	fp, #12
1cfd0     A7 12 02 FB | 	rdlong	arg01, fp
1cfd4     0C 4E 85 F1 | 	sub	fp, #12
1cfd8     2C 8A B0 FD | 	call	#__system___float_fromuns
1cfdc     FD 14 02 F6 | 	mov	arg02, result1
1cfe0     13 13 02 F6 | 	mov	arg01, local01
1cfe4     54 8A B0 FD | 	call	#__system___float_add
1cfe8     A7 FA 61 FC | 	wrlong	result1, fp
1cfec     60 02 90 FD | 	jmp	#LR__2355
1cff0                 | LR__2346
1cff0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1cff0     08 4E 05 F1 | 	add	fp, #8
1cff4     A7 26 02 FB | 	rdlong	local01, fp
1cff8     08 4E 85 F1 | 	sub	fp, #8
1cffc     1E 26 0E F2 | 	cmp	local01, #30 wz
1d000     14 4E 05 A1 |  if_e	add	fp, #20
1d004     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d008     14 4E 85 A1 |  if_e	sub	fp, #20
1d00c     16 2B 02 A6 |  if_e	mov	local03, local04
1d010     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d014     38 00 90 5D |  if_ne	jmp	#LR__2347
1d018     A7 26 02 FB | 	rdlong	local01, fp
1d01c     0C 4E 05 F1 | 	add	fp, #12
1d020     A7 12 02 FB | 	rdlong	arg01, fp
1d024     0C 4E 85 F1 | 	sub	fp, #12
1d028     09 13 52 F6 | 	abs	arg01, arg01 wc
1d02c     1F 2E C6 C9 |  if_b	decod	local05, #31
1d030     00 2E 06 36 |  if_ae	mov	local05, #0
1d034     D0 89 B0 FD | 	call	#__system___float_fromuns
1d038     17 FB 61 F5 | 	xor	result1, local05
1d03c     FD 14 02 F6 | 	mov	arg02, result1
1d040     13 13 02 F6 | 	mov	arg01, local01
1d044     F4 89 B0 FD | 	call	#__system___float_add
1d048     A7 FA 61 FC | 	wrlong	result1, fp
1d04c     00 02 90 FD | 	jmp	#LR__2355
1d050                 | LR__2347
1d050                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1d050     08 4E 05 F1 | 	add	fp, #8
1d054     A7 26 02 FB | 	rdlong	local01, fp
1d058     08 4E 85 F1 | 	sub	fp, #8
1d05c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d060     14 4E 05 A1 |  if_e	add	fp, #20
1d064     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d068     14 4E 85 A1 |  if_e	sub	fp, #20
1d06c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d070     1C 00 90 5D |  if_ne	jmp	#LR__2348
1d074     A7 12 02 FB | 	rdlong	arg01, fp
1d078     0C 4E 05 F1 | 	add	fp, #12
1d07c     A7 14 02 FB | 	rdlong	arg02, fp
1d080     0C 4E 85 F1 | 	sub	fp, #12
1d084     B4 89 B0 FD | 	call	#__system___float_add
1d088     A7 FA 61 FC | 	wrlong	result1, fp
1d08c     C0 01 90 FD | 	jmp	#LR__2355
1d090                 | LR__2348
1d090                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1d090     08 4E 05 F1 | 	add	fp, #8
1d094     A7 26 02 FB | 	rdlong	local01, fp
1d098     08 4E 85 F1 | 	sub	fp, #8
1d09c     1F 26 0E F2 | 	cmp	local01, #31 wz
1d0a0     24 00 90 5D |  if_ne	jmp	#LR__2349
1d0a4     14 4E 05 F1 | 	add	fp, #20
1d0a8     A7 2A 02 FB | 	rdlong	local03, fp
1d0ac     14 4E 85 F1 | 	sub	fp, #20
1d0b0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d0b4     A7 04 68 5C |  if_ne	wrlong	#2, fp
1d0b8     08 4E 05 51 |  if_ne	add	fp, #8
1d0bc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1d0c0     08 4E 85 51 |  if_ne	sub	fp, #8
1d0c4     88 01 90 5D |  if_ne	jmp	#LR__2355
1d0c8                 | LR__2349
1d0c8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1d0c8     14 4E 05 F1 | 	add	fp, #20
1d0cc     A7 26 02 FB | 	rdlong	local01, fp
1d0d0     14 4E 85 F1 | 	sub	fp, #20
1d0d4     1F 26 0E F2 | 	cmp	local01, #31 wz
1d0d8     24 00 90 5D |  if_ne	jmp	#LR__2350
1d0dc     08 4E 05 F1 | 	add	fp, #8
1d0e0     A7 2A 02 FB | 	rdlong	local03, fp
1d0e4     08 4E 85 F1 | 	sub	fp, #8
1d0e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d0ec     A7 04 68 5C |  if_ne	wrlong	#2, fp
1d0f0     08 4E 05 51 |  if_ne	add	fp, #8
1d0f4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1d0f8     08 4E 85 51 |  if_ne	sub	fp, #8
1d0fc     50 01 90 5D |  if_ne	jmp	#LR__2355
1d100                 | LR__2350
1d100                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1d100     08 4E 05 F1 | 	add	fp, #8
1d104     A7 26 02 FB | 	rdlong	local01, fp
1d108     08 4E 85 F1 | 	sub	fp, #8
1d10c     1F 26 0E F2 | 	cmp	local01, #31 wz
1d110     14 4E 05 A1 |  if_e	add	fp, #20
1d114     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d118     14 4E 85 A1 |  if_e	sub	fp, #20
1d11c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d120     1C 00 90 5D |  if_ne	jmp	#LR__2351
1d124     A7 12 02 FB | 	rdlong	arg01, fp
1d128     0C 4E 05 F1 | 	add	fp, #12
1d12c     A7 14 02 FB | 	rdlong	arg02, fp
1d130     0C 4E 85 F1 | 	sub	fp, #12
1d134     B8 5E B0 FD | 	call	#__system___string_concat
1d138     A7 FA 61 FC | 	wrlong	result1, fp
1d13c     10 01 90 FD | 	jmp	#LR__2355
1d140                 | LR__2351
1d140                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1d140     08 4E 05 F1 | 	add	fp, #8
1d144     A7 26 02 FB | 	rdlong	local01, fp
1d148     08 4E 85 F1 | 	sub	fp, #8
1d14c     2B 26 0E F2 | 	cmp	local01, #43 wz
1d150     14 4E 05 A1 |  if_e	add	fp, #20
1d154     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d158     14 4E 85 A1 |  if_e	sub	fp, #20
1d15c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d160     30 00 90 5D |  if_ne	jmp	#LR__2352
1d164     A7 12 02 FB | 	rdlong	arg01, fp
1d168     EC F8 BE FD | 	call	#_convertstring
1d16c     FD 12 02 F6 | 	mov	arg01, result1
1d170     0C 4E 05 F1 | 	add	fp, #12
1d174     A7 14 02 FB | 	rdlong	arg02, fp
1d178     0C 4E 85 F1 | 	sub	fp, #12
1d17c     70 5E B0 FD | 	call	#__system___string_concat
1d180     A7 FA 61 FC | 	wrlong	result1, fp
1d184     08 4E 05 F1 | 	add	fp, #8
1d188     A7 3E 68 FC | 	wrlong	#31, fp
1d18c     08 4E 85 F1 | 	sub	fp, #8
1d190     BC 00 90 FD | 	jmp	#LR__2355
1d194                 | LR__2352
1d194                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1d194     08 4E 05 F1 | 	add	fp, #8
1d198     A7 26 02 FB | 	rdlong	local01, fp
1d19c     08 4E 85 F1 | 	sub	fp, #8
1d1a0     1F 26 0E F2 | 	cmp	local01, #31 wz
1d1a4     14 4E 05 A1 |  if_e	add	fp, #20
1d1a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d1ac     14 4E 85 A1 |  if_e	sub	fp, #20
1d1b0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d1b4     28 00 90 5D |  if_ne	jmp	#LR__2353
1d1b8     A7 26 02 FB | 	rdlong	local01, fp
1d1bc     0C 4E 05 F1 | 	add	fp, #12
1d1c0     A7 12 02 FB | 	rdlong	arg01, fp
1d1c4     0C 4E 85 F1 | 	sub	fp, #12
1d1c8     8C F8 BE FD | 	call	#_convertstring
1d1cc     FD 14 02 F6 | 	mov	arg02, result1
1d1d0     13 13 02 F6 | 	mov	arg01, local01
1d1d4     18 5E B0 FD | 	call	#__system___string_concat
1d1d8     A7 FA 61 FC | 	wrlong	result1, fp
1d1dc     70 00 90 FD | 	jmp	#LR__2355
1d1e0                 | LR__2353
1d1e0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1d1e0     08 4E 05 F1 | 	add	fp, #8
1d1e4     A7 26 02 FB | 	rdlong	local01, fp
1d1e8     08 4E 85 F1 | 	sub	fp, #8
1d1ec     2B 26 0E F2 | 	cmp	local01, #43 wz
1d1f0     14 4E 05 A1 |  if_e	add	fp, #20
1d1f4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d1f8     14 4E 85 A1 |  if_e	sub	fp, #20
1d1fc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d200     3C 00 90 5D |  if_ne	jmp	#LR__2354
1d204     A7 12 02 FB | 	rdlong	arg01, fp
1d208     4C F8 BE FD | 	call	#_convertstring
1d20c     FD 26 02 F6 | 	mov	local01, result1
1d210     0C 4E 05 F1 | 	add	fp, #12
1d214     A7 12 02 FB | 	rdlong	arg01, fp
1d218     0C 4E 85 F1 | 	sub	fp, #12
1d21c     38 F8 BE FD | 	call	#_convertstring
1d220     FD 14 02 F6 | 	mov	arg02, result1
1d224     13 13 02 F6 | 	mov	arg01, local01
1d228     C4 5D B0 FD | 	call	#__system___string_concat
1d22c     A7 FA 61 FC | 	wrlong	result1, fp
1d230     08 4E 05 F1 | 	add	fp, #8
1d234     A7 3E 68 FC | 	wrlong	#31, fp
1d238     08 4E 85 F1 | 	sub	fp, #8
1d23c     10 00 90 FD | 	jmp	#LR__2355
1d240                 | LR__2354
1d240     A7 08 68 FC | 	wrlong	#4, fp
1d244     08 4E 05 F1 | 	add	fp, #8
1d248     A7 FE 69 FC | 	wrlong	#255, fp
1d24c     08 4E 85 F1 | 	sub	fp, #8
1d250                 | LR__2355
1d250     A7 12 02 F6 | 	mov	arg01, fp
1d254     20 F7 BE FD | 	call	#_push
1d258     A7 F0 03 F6 | 	mov	ptra, fp
1d25c     B2 00 A0 FD | 	call	#popregs_
1d260                 | _do_plus_ret
1d260     2D 00 64 FD | 	ret
1d264                 | 
1d264                 | ' 
1d264                 | ' '--------------------------------- power (^)
1d264                 | ' 
1d264                 | ' sub do_power 
1d264                 | _do_power
1d264     02 4A 05 F6 | 	mov	COUNT_, #2
1d268     A8 00 A0 FD | 	call	#pushregs_
1d26c     18 F0 07 F1 | 	add	ptra, #24
1d270     6C F6 BE FD | 	call	#_pop
1d274     FD 14 02 F6 | 	mov	arg02, result1
1d278     FE 12 02 F6 | 	mov	arg01, result2
1d27c     FF 26 02 F6 | 	mov	local01, result3
1d280     0C 4E 05 F1 | 	add	fp, #12
1d284     A7 14 62 FC | 	wrlong	arg02, fp
1d288     04 4E 05 F1 | 	add	fp, #4
1d28c     A7 12 62 FC | 	wrlong	arg01, fp
1d290     04 4E 05 F1 | 	add	fp, #4
1d294     A7 26 62 FC | 	wrlong	local01, fp
1d298     14 4E 85 F1 | 	sub	fp, #20
1d29c     40 F6 BE FD | 	call	#_pop
1d2a0     A7 FA 61 FC | 	wrlong	result1, fp
1d2a4     04 4E 05 F1 | 	add	fp, #4
1d2a8     A7 FC 61 FC | 	wrlong	result2, fp
1d2ac     04 4E 05 F1 | 	add	fp, #4
1d2b0     A7 FE 61 FC | 	wrlong	result3, fp
1d2b4                 | ' 
1d2b4                 | ' t2=pop()
1d2b4                 | ' t1=pop()
1d2b4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1d2b4     08 4E 85 F1 | 	sub	fp, #8
1d2b8     1F FE 0D F2 | 	cmp	result3, #31 wz
1d2bc     14 4E 05 51 |  if_ne	add	fp, #20
1d2c0     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d2c4     14 4E 85 51 |  if_ne	sub	fp, #20
1d2c8     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1d2cc     A7 18 68 AC |  if_e	wrlong	#12, fp
1d2d0     08 4E 05 A1 |  if_e	add	fp, #8
1d2d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d2d8     08 4E 85 A1 |  if_e	sub	fp, #8
1d2dc     38 01 90 AD |  if_e	jmp	#LR__2365
1d2e0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1d2e0     08 4E 05 F1 | 	add	fp, #8
1d2e4     A7 14 02 FB | 	rdlong	arg02, fp
1d2e8     08 4E 85 F1 | 	sub	fp, #8
1d2ec     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d2f0     28 00 90 5D |  if_ne	jmp	#LR__2360
1d2f4     08 4E 05 F1 | 	add	fp, #8
1d2f8     A7 3C 68 FC | 	wrlong	#30, fp
1d2fc     08 4E 85 F1 | 	sub	fp, #8
1d300     A7 12 02 FB | 	rdlong	arg01, fp
1d304     09 13 52 F6 | 	abs	arg01, arg01 wc
1d308     1F 28 C6 C9 |  if_b	decod	local02, #31
1d30c     00 28 06 36 |  if_ae	mov	local02, #0
1d310     F4 86 B0 FD | 	call	#__system___float_fromuns
1d314     14 FB 61 F5 | 	xor	result1, local02
1d318     A7 FA 61 FC | 	wrlong	result1, fp
1d31c                 | LR__2360
1d31c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1d31c     08 4E 05 F1 | 	add	fp, #8
1d320     A7 14 02 FB | 	rdlong	arg02, fp
1d324     08 4E 85 F1 | 	sub	fp, #8
1d328     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d32c     18 00 90 5D |  if_ne	jmp	#LR__2361
1d330     08 4E 05 F1 | 	add	fp, #8
1d334     A7 3C 68 FC | 	wrlong	#30, fp
1d338     08 4E 85 F1 | 	sub	fp, #8
1d33c     A7 12 02 FB | 	rdlong	arg01, fp
1d340     C4 86 B0 FD | 	call	#__system___float_fromuns
1d344     A7 FA 61 FC | 	wrlong	result1, fp
1d348                 | LR__2361
1d348                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1d348     14 4E 05 F1 | 	add	fp, #20
1d34c     A7 14 02 FB | 	rdlong	arg02, fp
1d350     14 4E 85 F1 | 	sub	fp, #20
1d354     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d358     34 00 90 5D |  if_ne	jmp	#LR__2362
1d35c     14 4E 05 F1 | 	add	fp, #20
1d360     A7 3C 68 FC | 	wrlong	#30, fp
1d364     08 4E 85 F1 | 	sub	fp, #8
1d368     A7 12 02 FB | 	rdlong	arg01, fp
1d36c     0C 4E 85 F1 | 	sub	fp, #12
1d370     09 13 52 F6 | 	abs	arg01, arg01 wc
1d374     1F 28 C6 C9 |  if_b	decod	local02, #31
1d378     00 28 06 36 |  if_ae	mov	local02, #0
1d37c     88 86 B0 FD | 	call	#__system___float_fromuns
1d380     14 FB 61 F5 | 	xor	result1, local02
1d384     0C 4E 05 F1 | 	add	fp, #12
1d388     A7 FA 61 FC | 	wrlong	result1, fp
1d38c     0C 4E 85 F1 | 	sub	fp, #12
1d390                 | LR__2362
1d390                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1d390     14 4E 05 F1 | 	add	fp, #20
1d394     A7 14 02 FB | 	rdlong	arg02, fp
1d398     14 4E 85 F1 | 	sub	fp, #20
1d39c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d3a0     24 00 90 5D |  if_ne	jmp	#LR__2363
1d3a4     14 4E 05 F1 | 	add	fp, #20
1d3a8     A7 3C 68 FC | 	wrlong	#30, fp
1d3ac     08 4E 85 F1 | 	sub	fp, #8
1d3b0     A7 12 02 FB | 	rdlong	arg01, fp
1d3b4     0C 4E 85 F1 | 	sub	fp, #12
1d3b8     4C 86 B0 FD | 	call	#__system___float_fromuns
1d3bc     0C 4E 05 F1 | 	add	fp, #12
1d3c0     A7 FA 61 FC | 	wrlong	result1, fp
1d3c4     0C 4E 85 F1 | 	sub	fp, #12
1d3c8                 | LR__2363
1d3c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1d3c8     08 4E 05 F1 | 	add	fp, #8
1d3cc     A7 14 02 FB | 	rdlong	arg02, fp
1d3d0     08 4E 85 F1 | 	sub	fp, #8
1d3d4     1E 14 0E F2 | 	cmp	arg02, #30 wz
1d3d8     14 4E 05 A1 |  if_e	add	fp, #20
1d3dc     A7 26 02 AB |  if_e	rdlong	local01, fp
1d3e0     14 4E 85 A1 |  if_e	sub	fp, #20
1d3e4     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1d3e8     1C 00 90 5D |  if_ne	jmp	#LR__2364
1d3ec     A7 12 02 FB | 	rdlong	arg01, fp
1d3f0     0C 4E 05 F1 | 	add	fp, #12
1d3f4     A7 14 02 FB | 	rdlong	arg02, fp
1d3f8     0C 4E 85 F1 | 	sub	fp, #12
1d3fc     14 99 B0 FD | 	call	#__system____builtin_powf
1d400     A7 FA 61 FC | 	wrlong	result1, fp
1d404     10 00 90 FD | 	jmp	#LR__2365
1d408                 | LR__2364
1d408     A7 1A 68 FC | 	wrlong	#13, fp
1d40c     08 4E 05 F1 | 	add	fp, #8
1d410     A7 FE 69 FC | 	wrlong	#255, fp
1d414     08 4E 85 F1 | 	sub	fp, #8
1d418                 | LR__2365
1d418     A7 12 02 F6 | 	mov	arg01, fp
1d41c     58 F5 BE FD | 	call	#_push
1d420     A7 F0 03 F6 | 	mov	ptra, fp
1d424     B2 00 A0 FD | 	call	#popregs_
1d428                 | _do_power_ret
1d428     2D 00 64 FD | 	ret
1d42c                 | 
1d42c                 | ' 
1d42c                 | ' '--------------------------------- SHL
1d42c                 | ' 
1d42c                 | ' sub do_shl 
1d42c                 | _do_shl
1d42c     03 4A 05 F6 | 	mov	COUNT_, #3
1d430     A8 00 A0 FD | 	call	#pushregs_
1d434     18 F0 07 F1 | 	add	ptra, #24
1d438     A4 F4 BE FD | 	call	#_pop
1d43c     FD 12 02 F6 | 	mov	arg01, result1
1d440     FE 26 02 F6 | 	mov	local01, result2
1d444     FF 28 02 F6 | 	mov	local02, result3
1d448     0C 4E 05 F1 | 	add	fp, #12
1d44c     A7 12 62 FC | 	wrlong	arg01, fp
1d450     04 4E 05 F1 | 	add	fp, #4
1d454     A7 26 62 FC | 	wrlong	local01, fp
1d458     04 4E 05 F1 | 	add	fp, #4
1d45c     A7 28 62 FC | 	wrlong	local02, fp
1d460     14 4E 85 F1 | 	sub	fp, #20
1d464     78 F4 BE FD | 	call	#_pop
1d468     FF 2A 02 F6 | 	mov	local03, result3
1d46c     A7 FA 61 FC | 	wrlong	result1, fp
1d470     04 4E 05 F1 | 	add	fp, #4
1d474     A7 FC 61 FC | 	wrlong	result2, fp
1d478     04 4E 05 F1 | 	add	fp, #4
1d47c     A7 2A 62 FC | 	wrlong	local03, fp
1d480                 | ' 
1d480                 | ' t2=pop()
1d480                 | ' t1=pop()
1d480                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1d480     08 4E 85 F1 | 	sub	fp, #8
1d484     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d488     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d48c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1d490     08 4E 05 A1 |  if_e	add	fp, #8
1d494     A7 3A 68 AC |  if_e	wrlong	#29, fp
1d498     08 4E 85 A1 |  if_e	sub	fp, #8
1d49c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1d49c     14 4E 05 F1 | 	add	fp, #20
1d4a0     A7 2A 02 FB | 	rdlong	local03, fp
1d4a4     14 4E 85 F1 | 	sub	fp, #20
1d4a8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d4ac     18 00 90 5D |  if_ne	jmp	#LR__2370
1d4b0     0C 4E 05 F1 | 	add	fp, #12
1d4b4     A7 2A 02 FB | 	rdlong	local03, fp
1d4b8     A7 2A 62 FC | 	wrlong	local03, fp
1d4bc     08 4E 05 F1 | 	add	fp, #8
1d4c0     A7 3A 68 FC | 	wrlong	#29, fp
1d4c4     14 4E 85 F1 | 	sub	fp, #20
1d4c8                 | LR__2370
1d4c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1d4c8     08 4E 05 F1 | 	add	fp, #8
1d4cc     A7 2A 02 FB | 	rdlong	local03, fp
1d4d0     08 4E 85 F1 | 	sub	fp, #8
1d4d4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d4d8     14 4E 05 51 |  if_ne	add	fp, #20
1d4dc     A7 28 02 5B |  if_ne	rdlong	local02, fp
1d4e0     14 4E 85 51 |  if_ne	sub	fp, #20
1d4e4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1d4e8     08 4E 05 51 |  if_ne	add	fp, #8
1d4ec     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d4f0     08 4E 85 51 |  if_ne	sub	fp, #8
1d4f4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1d4f8     14 4E 05 51 |  if_ne	add	fp, #20
1d4fc     14 4E 85 51 |  if_ne	sub	fp, #20
1d500     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1d504     A7 0C 68 AC |  if_e	wrlong	#6, fp
1d508     08 4E 05 A1 |  if_e	add	fp, #8
1d50c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d510     08 4E 85 A1 |  if_e	sub	fp, #8
1d514     18 00 90 AD |  if_e	jmp	#LR__2371
1d518     A7 2A 02 FB | 	rdlong	local03, fp
1d51c     0C 4E 05 F1 | 	add	fp, #12
1d520     A7 26 02 FB | 	rdlong	local01, fp
1d524     0C 4E 85 F1 | 	sub	fp, #12
1d528     13 2B 62 F0 | 	shl	local03, local01
1d52c     A7 2A 62 FC | 	wrlong	local03, fp
1d530                 | LR__2371
1d530     A7 12 02 F6 | 	mov	arg01, fp
1d534     40 F4 BE FD | 	call	#_push
1d538     A7 F0 03 F6 | 	mov	ptra, fp
1d53c     B2 00 A0 FD | 	call	#popregs_
1d540                 | _do_shl_ret
1d540     2D 00 64 FD | 	ret
1d544                 | 
1d544                 | ' 
1d544                 | ' '--------------------------------- SHR
1d544                 | ' 
1d544                 | ' sub do_shr 
1d544                 | _do_shr
1d544     03 4A 05 F6 | 	mov	COUNT_, #3
1d548     A8 00 A0 FD | 	call	#pushregs_
1d54c     18 F0 07 F1 | 	add	ptra, #24
1d550     8C F3 BE FD | 	call	#_pop
1d554     FD 12 02 F6 | 	mov	arg01, result1
1d558     FE 26 02 F6 | 	mov	local01, result2
1d55c     FF 28 02 F6 | 	mov	local02, result3
1d560     0C 4E 05 F1 | 	add	fp, #12
1d564     A7 12 62 FC | 	wrlong	arg01, fp
1d568     04 4E 05 F1 | 	add	fp, #4
1d56c     A7 26 62 FC | 	wrlong	local01, fp
1d570     04 4E 05 F1 | 	add	fp, #4
1d574     A7 28 62 FC | 	wrlong	local02, fp
1d578     14 4E 85 F1 | 	sub	fp, #20
1d57c     60 F3 BE FD | 	call	#_pop
1d580     FF 2A 02 F6 | 	mov	local03, result3
1d584     A7 FA 61 FC | 	wrlong	result1, fp
1d588     04 4E 05 F1 | 	add	fp, #4
1d58c     A7 FC 61 FC | 	wrlong	result2, fp
1d590     04 4E 05 F1 | 	add	fp, #4
1d594     A7 2A 62 FC | 	wrlong	local03, fp
1d598                 | ' 
1d598                 | ' t2=pop()
1d598                 | ' t1=pop()
1d598                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1d598     08 4E 85 F1 | 	sub	fp, #8
1d59c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d5a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d5a4     A7 2A 62 AC |  if_e	wrlong	local03, fp
1d5a8     08 4E 05 A1 |  if_e	add	fp, #8
1d5ac     A7 3A 68 AC |  if_e	wrlong	#29, fp
1d5b0     08 4E 85 A1 |  if_e	sub	fp, #8
1d5b4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1d5b4     14 4E 05 F1 | 	add	fp, #20
1d5b8     A7 2A 02 FB | 	rdlong	local03, fp
1d5bc     14 4E 85 F1 | 	sub	fp, #20
1d5c0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d5c4     18 00 90 5D |  if_ne	jmp	#LR__2380
1d5c8     0C 4E 05 F1 | 	add	fp, #12
1d5cc     A7 2A 02 FB | 	rdlong	local03, fp
1d5d0     A7 2A 62 FC | 	wrlong	local03, fp
1d5d4     08 4E 05 F1 | 	add	fp, #8
1d5d8     A7 3A 68 FC | 	wrlong	#29, fp
1d5dc     14 4E 85 F1 | 	sub	fp, #20
1d5e0                 | LR__2380
1d5e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1d5e0     08 4E 05 F1 | 	add	fp, #8
1d5e4     A7 2A 02 FB | 	rdlong	local03, fp
1d5e8     08 4E 85 F1 | 	sub	fp, #8
1d5ec     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d5f0     14 4E 05 51 |  if_ne	add	fp, #20
1d5f4     A7 28 02 5B |  if_ne	rdlong	local02, fp
1d5f8     14 4E 85 51 |  if_ne	sub	fp, #20
1d5fc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1d600     08 4E 05 51 |  if_ne	add	fp, #8
1d604     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d608     08 4E 85 51 |  if_ne	sub	fp, #8
1d60c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1d610     14 4E 05 51 |  if_ne	add	fp, #20
1d614     14 4E 85 51 |  if_ne	sub	fp, #20
1d618     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1d61c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1d620     08 4E 05 A1 |  if_e	add	fp, #8
1d624     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d628     08 4E 85 A1 |  if_e	sub	fp, #8
1d62c     18 00 90 AD |  if_e	jmp	#LR__2381
1d630     A7 2A 02 FB | 	rdlong	local03, fp
1d634     0C 4E 05 F1 | 	add	fp, #12
1d638     A7 26 02 FB | 	rdlong	local01, fp
1d63c     0C 4E 85 F1 | 	sub	fp, #12
1d640     13 2B 42 F0 | 	shr	local03, local01
1d644     A7 2A 62 FC | 	wrlong	local03, fp
1d648                 | LR__2381
1d648     A7 12 02 F6 | 	mov	arg01, fp
1d64c     28 F3 BE FD | 	call	#_push
1d650     A7 F0 03 F6 | 	mov	ptra, fp
1d654     B2 00 A0 FD | 	call	#popregs_
1d658                 | _do_shr_ret
1d658     2D 00 64 FD | 	ret
1d65c                 | 
1d65c                 | ' 
1d65c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1d65c                 | ' 
1d65c                 | ' ''----------------------------------------------------------------------------------------------------
1d65c                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1d65c                 | ' ''----------------------------------------------------------------------------------------------------
1d65c                 | ' 
1d65c                 | ' ''--------------------------- Command function pointers
1d65c                 | ' 
1d65c                 | ' sub init_commands
1d65c                 | _init_commands
1d65c                 | ' 
1d65c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1d65c     00 00 06 F6 | 	mov	_var01, #0
1d660     97 16 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1d664                 | LR__2390
1d664     00 FB 01 F6 | 	mov	result1, _var01
1d668     02 FA 65 F0 | 	shl	result1, #2
1d66c     43 00 00 FF 
1d670     60 E4 05 F1 | 	add	objptr, ##34400
1d674     F2 FA 01 F1 | 	add	result1, objptr
1d678     43 00 00 FF 
1d67c     60 E4 85 F1 | 	sub	objptr, ##34400
1d680     FD E4 61 FC | 	wrlong	objptr, result1
1d684     01 00 06 F1 | 	add	_var01, #1
1d688     00 01 56 F2 | 	cmps	_var01, #256 wc
1d68c     D4 FF 9F CD |  if_b	jmp	#LR__2390
1d690                 | LR__2391
1d690     F2 FA 01 F6 | 	mov	result1, objptr
1d694     14 FA 25 F4 | 	bith	result1, #20
1d698     43 00 00 FF 
1d69c     64 E4 05 F1 | 	add	objptr, ##34404
1d6a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d6a4     43 00 00 FF 
1d6a8     64 E4 85 F1 | 	sub	objptr, ##34404
1d6ac     F2 FA 01 F6 | 	mov	result1, objptr
1d6b0     15 FA 25 F4 | 	bith	result1, #21
1d6b4     43 00 00 FF 
1d6b8     68 E4 05 F1 | 	add	objptr, ##34408
1d6bc     F2 FA 61 FC | 	wrlong	result1, objptr
1d6c0     43 00 00 FF 
1d6c4     68 E4 85 F1 | 	sub	objptr, ##34408
1d6c8     F2 FA 01 F6 | 	mov	result1, objptr
1d6cc     34 FA 25 F4 | 	bith	result1, #52
1d6d0     43 00 00 FF 
1d6d4     6C E4 05 F1 | 	add	objptr, ##34412
1d6d8     F2 FA 61 FC | 	wrlong	result1, objptr
1d6dc     43 00 00 FF 
1d6e0     6C E4 85 F1 | 	sub	objptr, ##34412
1d6e4     F2 FA 01 F6 | 	mov	result1, objptr
1d6e8     16 FA 25 F4 | 	bith	result1, #22
1d6ec     43 00 00 FF 
1d6f0     74 E4 05 F1 | 	add	objptr, ##34420
1d6f4     F2 FA 61 FC | 	wrlong	result1, objptr
1d6f8     43 00 00 FF 
1d6fc     74 E4 85 F1 | 	sub	objptr, ##34420
1d700     F2 FA 01 F6 | 	mov	result1, objptr
1d704     00 28 00 FF 
1d708     00 FA 45 F5 | 	or	result1, ##5242880
1d70c     43 00 00 FF 
1d710     78 E4 05 F1 | 	add	objptr, ##34424
1d714     F2 FA 61 FC | 	wrlong	result1, objptr
1d718     43 00 00 FF 
1d71c     78 E4 85 F1 | 	sub	objptr, ##34424
1d720     F2 FA 01 F6 | 	mov	result1, objptr
1d724     35 FA 25 F4 | 	bith	result1, #53
1d728     43 00 00 FF 
1d72c     7C E4 05 F1 | 	add	objptr, ##34428
1d730     F2 FA 61 FC | 	wrlong	result1, objptr
1d734     43 00 00 FF 
1d738     7C E4 85 F1 | 	sub	objptr, ##34428
1d73c     F2 FA 01 F6 | 	mov	result1, objptr
1d740     54 FA 25 F4 | 	bith	result1, #84
1d744     43 00 00 FF 
1d748     80 E4 05 F1 | 	add	objptr, ##34432
1d74c     F2 FA 61 FC | 	wrlong	result1, objptr
1d750     43 00 00 FF 
1d754     80 E4 85 F1 | 	sub	objptr, ##34432
1d758     F2 FA 01 F6 | 	mov	result1, objptr
1d75c     17 FA 25 F4 | 	bith	result1, #23
1d760     43 00 00 FF 
1d764     84 E4 05 F1 | 	add	objptr, ##34436
1d768     F2 FA 61 FC | 	wrlong	result1, objptr
1d76c     43 00 00 FF 
1d770     84 E4 85 F1 | 	sub	objptr, ##34436
1d774     F2 FA 01 F6 | 	mov	result1, objptr
1d778     00 48 00 FF 
1d77c     00 FA 45 F5 | 	or	result1, ##9437184
1d780     43 00 00 FF 
1d784     88 E4 05 F1 | 	add	objptr, ##34440
1d788     F2 FA 61 FC | 	wrlong	result1, objptr
1d78c     43 00 00 FF 
1d790     88 E4 85 F1 | 	sub	objptr, ##34440
1d794     F2 FA 01 F6 | 	mov	result1, objptr
1d798     00 50 00 FF 
1d79c     00 FA 45 F5 | 	or	result1, ##10485760
1d7a0     43 00 00 FF 
1d7a4     8C E4 05 F1 | 	add	objptr, ##34444
1d7a8     F2 FA 61 FC | 	wrlong	result1, objptr
1d7ac     43 00 00 FF 
1d7b0     8C E4 85 F1 | 	sub	objptr, ##34444
1d7b4     F2 FA 01 F6 | 	mov	result1, objptr
1d7b8     00 58 00 FF 
1d7bc     00 FA 45 F5 | 	or	result1, ##11534336
1d7c0     43 00 00 FF 
1d7c4     90 E4 05 F1 | 	add	objptr, ##34448
1d7c8     F2 FA 61 FC | 	wrlong	result1, objptr
1d7cc     43 00 00 FF 
1d7d0     90 E4 85 F1 | 	sub	objptr, ##34448
1d7d4     F2 FA 01 F6 | 	mov	result1, objptr
1d7d8     36 FA 25 F4 | 	bith	result1, #54
1d7dc     43 00 00 FF 
1d7e0     A4 E4 05 F1 | 	add	objptr, ##34468
1d7e4     F2 FA 61 FC | 	wrlong	result1, objptr
1d7e8     43 00 00 FF 
1d7ec     A4 E4 85 F1 | 	sub	objptr, ##34468
1d7f0     F2 FA 01 F6 | 	mov	result1, objptr
1d7f4     00 68 00 FF 
1d7f8     00 FA 45 F5 | 	or	result1, ##13631488
1d7fc     43 00 00 FF 
1d800     D4 E4 05 F1 | 	add	objptr, ##34516
1d804     F2 FA 61 FC | 	wrlong	result1, objptr
1d808     43 00 00 FF 
1d80c     D4 E4 85 F1 | 	sub	objptr, ##34516
1d810     F2 FA 01 F6 | 	mov	result1, objptr
1d814     00 68 00 FF 
1d818     00 FA 45 F5 | 	or	result1, ##13631488
1d81c     43 00 00 FF 
1d820     D0 E4 05 F1 | 	add	objptr, ##34512
1d824     F2 FA 61 FC | 	wrlong	result1, objptr
1d828     43 00 00 FF 
1d82c     D0 E4 85 F1 | 	sub	objptr, ##34512
1d830     F2 FA 01 F6 | 	mov	result1, objptr
1d834     00 68 00 FF 
1d838     00 FA 45 F5 | 	or	result1, ##13631488
1d83c     43 00 00 FF 
1d840     D8 E4 05 F1 | 	add	objptr, ##34520
1d844     F2 FA 61 FC | 	wrlong	result1, objptr
1d848     43 00 00 FF 
1d84c     D8 E4 85 F1 | 	sub	objptr, ##34520
1d850     F2 FA 01 F6 | 	mov	result1, objptr
1d854     00 68 00 FF 
1d858     00 FA 45 F5 | 	or	result1, ##13631488
1d85c     43 00 00 FF 
1d860     DC E4 05 F1 | 	add	objptr, ##34524
1d864     F2 FA 61 FC | 	wrlong	result1, objptr
1d868     43 00 00 FF 
1d86c     DC E4 85 F1 | 	sub	objptr, ##34524
1d870     F2 FA 01 F6 | 	mov	result1, objptr
1d874     00 68 00 FF 
1d878     00 FA 45 F5 | 	or	result1, ##13631488
1d87c     43 00 00 FF 
1d880     0C E5 05 F1 | 	add	objptr, ##34572
1d884     F2 FA 61 FC | 	wrlong	result1, objptr
1d888     43 00 00 FF 
1d88c     0C E5 85 F1 | 	sub	objptr, ##34572
1d890     F2 FA 01 F6 | 	mov	result1, objptr
1d894     55 FA 25 F4 | 	bith	result1, #85
1d898     43 00 00 FF 
1d89c     BC E4 05 F1 | 	add	objptr, ##34492
1d8a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d8a4     43 00 00 FF 
1d8a8     BC E4 85 F1 | 	sub	objptr, ##34492
1d8ac     F2 FA 01 F6 | 	mov	result1, objptr
1d8b0     00 68 00 FF 
1d8b4     00 FA 45 F5 | 	or	result1, ##13631488
1d8b8     43 00 00 FF 
1d8bc     10 E5 05 F1 | 	add	objptr, ##34576
1d8c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d8c4     43 00 00 FF 
1d8c8     10 E5 85 F1 | 	sub	objptr, ##34576
1d8cc     F2 FA 01 F6 | 	mov	result1, objptr
1d8d0     00 68 00 FF 
1d8d4     00 FA 45 F5 | 	or	result1, ##13631488
1d8d8     43 00 00 FF 
1d8dc     E0 E4 05 F1 | 	add	objptr, ##34528
1d8e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d8e4     43 00 00 FF 
1d8e8     E0 E4 85 F1 | 	sub	objptr, ##34528
1d8ec     F2 FA 01 F6 | 	mov	result1, objptr
1d8f0     00 68 00 FF 
1d8f4     00 FA 45 F5 | 	or	result1, ##13631488
1d8f8     43 00 00 FF 
1d8fc     E4 E4 05 F1 | 	add	objptr, ##34532
1d900     F2 FA 61 FC | 	wrlong	result1, objptr
1d904     43 00 00 FF 
1d908     E4 E4 85 F1 | 	sub	objptr, ##34532
1d90c     F2 FA 01 F6 | 	mov	result1, objptr
1d910     00 68 00 FF 
1d914     00 FA 45 F5 | 	or	result1, ##13631488
1d918     43 00 00 FF 
1d91c     E8 E4 05 F1 | 	add	objptr, ##34536
1d920     F2 FA 61 FC | 	wrlong	result1, objptr
1d924     43 00 00 FF 
1d928     E8 E4 85 F1 | 	sub	objptr, ##34536
1d92c     F2 FA 01 F6 | 	mov	result1, objptr
1d930     74 FA 25 F4 | 	bith	result1, #116
1d934     43 00 00 FF 
1d938     60 E5 05 F1 | 	add	objptr, ##34656
1d93c     F2 FA 61 FC | 	wrlong	result1, objptr
1d940     43 00 00 FF 
1d944     60 E5 85 F1 | 	sub	objptr, ##34656
1d948     F2 FA 01 F6 | 	mov	result1, objptr
1d94c     18 FA 25 F4 | 	bith	result1, #24
1d950     43 00 00 FF 
1d954     64 E5 05 F1 | 	add	objptr, ##34660
1d958     F2 FA 61 FC | 	wrlong	result1, objptr
1d95c     43 00 00 FF 
1d960     64 E5 85 F1 | 	sub	objptr, ##34660
1d964     F2 FA 01 F6 | 	mov	result1, objptr
1d968     00 88 00 FF 
1d96c     00 FA 45 F5 | 	or	result1, ##17825792
1d970     43 00 00 FF 
1d974     68 E5 05 F1 | 	add	objptr, ##34664
1d978     F2 FA 61 FC | 	wrlong	result1, objptr
1d97c     43 00 00 FF 
1d980     68 E5 85 F1 | 	sub	objptr, ##34664
1d984     F2 FA 01 F6 | 	mov	result1, objptr
1d988     00 90 00 FF 
1d98c     00 FA 45 F5 | 	or	result1, ##18874368
1d990     43 00 00 FF 
1d994     6C E5 05 F1 | 	add	objptr, ##34668
1d998     F2 FA 61 FC | 	wrlong	result1, objptr
1d99c     43 00 00 FF 
1d9a0     6C E5 85 F1 | 	sub	objptr, ##34668
1d9a4     F2 FA 01 F6 | 	mov	result1, objptr
1d9a8     00 98 00 FF 
1d9ac     00 FA 45 F5 | 	or	result1, ##19922944
1d9b0     43 00 00 FF 
1d9b4     70 E5 05 F1 | 	add	objptr, ##34672
1d9b8     F2 FA 61 FC | 	wrlong	result1, objptr
1d9bc     43 00 00 FF 
1d9c0     70 E5 85 F1 | 	sub	objptr, ##34672
1d9c4     F2 FA 01 F6 | 	mov	result1, objptr
1d9c8     00 A0 00 FF 
1d9cc     00 FA 45 F5 | 	or	result1, ##20971520
1d9d0     43 00 00 FF 
1d9d4     74 E5 05 F1 | 	add	objptr, ##34676
1d9d8     F2 FA 61 FC | 	wrlong	result1, objptr
1d9dc     43 00 00 FF 
1d9e0     74 E5 85 F1 | 	sub	objptr, ##34676
1d9e4     F2 FA 01 F6 | 	mov	result1, objptr
1d9e8     00 A8 00 FF 
1d9ec     00 FA 45 F5 | 	or	result1, ##22020096
1d9f0     43 00 00 FF 
1d9f4     78 E5 05 F1 | 	add	objptr, ##34680
1d9f8     F2 FA 61 FC | 	wrlong	result1, objptr
1d9fc     43 00 00 FF 
1da00     78 E5 85 F1 | 	sub	objptr, ##34680
1da04     F2 FA 01 F6 | 	mov	result1, objptr
1da08     00 B0 00 FF 
1da0c     00 FA 45 F5 | 	or	result1, ##23068672
1da10     43 00 00 FF 
1da14     7C E5 05 F1 | 	add	objptr, ##34684
1da18     F2 FA 61 FC | 	wrlong	result1, objptr
1da1c     43 00 00 FF 
1da20     7C E5 85 F1 | 	sub	objptr, ##34684
1da24     F2 FA 01 F6 | 	mov	result1, objptr
1da28     00 B8 00 FF 
1da2c     00 FA 45 F5 | 	or	result1, ##24117248
1da30     43 00 00 FF 
1da34     80 E5 05 F1 | 	add	objptr, ##34688
1da38     F2 FA 61 FC | 	wrlong	result1, objptr
1da3c     43 00 00 FF 
1da40     80 E5 85 F1 | 	sub	objptr, ##34688
1da44     F2 FA 01 F6 | 	mov	result1, objptr
1da48     37 FA 25 F4 | 	bith	result1, #55
1da4c     43 00 00 FF 
1da50     84 E5 05 F1 | 	add	objptr, ##34692
1da54     F2 FA 61 FC | 	wrlong	result1, objptr
1da58     43 00 00 FF 
1da5c     84 E5 85 F1 | 	sub	objptr, ##34692
1da60     F2 FA 01 F6 | 	mov	result1, objptr
1da64     00 C8 00 FF 
1da68     00 FA 45 F5 | 	or	result1, ##26214400
1da6c     43 00 00 FF 
1da70     88 E5 05 F1 | 	add	objptr, ##34696
1da74     F2 FA 61 FC | 	wrlong	result1, objptr
1da78     43 00 00 FF 
1da7c     88 E5 85 F1 | 	sub	objptr, ##34696
1da80     F2 FA 01 F6 | 	mov	result1, objptr
1da84     00 D0 00 FF 
1da88     00 FA 45 F5 | 	or	result1, ##27262976
1da8c     43 00 00 FF 
1da90     8C E5 05 F1 | 	add	objptr, ##34700
1da94     F2 FA 61 FC | 	wrlong	result1, objptr
1da98     43 00 00 FF 
1da9c     8C E5 85 F1 | 	sub	objptr, ##34700
1daa0     F2 FA 01 F6 | 	mov	result1, objptr
1daa4     00 D8 00 FF 
1daa8     00 FA 45 F5 | 	or	result1, ##28311552
1daac     43 00 00 FF 
1dab0     90 E5 05 F1 | 	add	objptr, ##34704
1dab4     F2 FA 61 FC | 	wrlong	result1, objptr
1dab8     43 00 00 FF 
1dabc     90 E5 85 F1 | 	sub	objptr, ##34704
1dac0     F2 FA 01 F6 | 	mov	result1, objptr
1dac4     56 FA 25 F4 | 	bith	result1, #86
1dac8     43 00 00 FF 
1dacc     94 E5 05 F1 | 	add	objptr, ##34708
1dad0     F2 FA 61 FC | 	wrlong	result1, objptr
1dad4     43 00 00 FF 
1dad8     94 E5 85 F1 | 	sub	objptr, ##34708
1dadc     F2 FA 01 F6 | 	mov	result1, objptr
1dae0     00 E8 00 FF 
1dae4     00 FA 45 F5 | 	or	result1, ##30408704
1dae8     45 00 00 FF 
1daec     5C E4 05 F1 | 	add	objptr, ##35420
1daf0     F2 FA 61 FC | 	wrlong	result1, objptr
1daf4     45 00 00 FF 
1daf8     5C E4 85 F1 | 	sub	objptr, ##35420
1dafc     F2 FA 01 F6 | 	mov	result1, objptr
1db00     75 FA 25 F4 | 	bith	result1, #117
1db04     43 00 00 FF 
1db08     98 E5 05 F1 | 	add	objptr, ##34712
1db0c     F2 FA 61 FC | 	wrlong	result1, objptr
1db10     43 00 00 FF 
1db14     98 E5 85 F1 | 	sub	objptr, ##34712
1db18     F2 FA 01 F6 | 	mov	result1, objptr
1db1c     94 FA 25 F4 | 	bith	result1, #148
1db20     43 00 00 FF 
1db24     AC E5 05 F1 | 	add	objptr, ##34732
1db28     F2 FA 61 FC | 	wrlong	result1, objptr
1db2c     43 00 00 FF 
1db30     AC E5 85 F1 | 	sub	objptr, ##34732
1db34     F2 FA 01 F6 | 	mov	result1, objptr
1db38     19 FA 25 F4 | 	bith	result1, #25
1db3c     43 00 00 FF 
1db40     9C E5 05 F1 | 	add	objptr, ##34716
1db44     F2 FA 61 FC | 	wrlong	result1, objptr
1db48     43 00 00 FF 
1db4c     9C E5 85 F1 | 	sub	objptr, ##34716
1db50     F2 FA 01 F6 | 	mov	result1, objptr
1db54     00 08 01 FF 
1db58     00 FA 45 F5 | 	or	result1, ##34603008
1db5c     43 00 00 FF 
1db60     B8 E4 05 F1 | 	add	objptr, ##34488
1db64     F2 FA 61 FC | 	wrlong	result1, objptr
1db68     43 00 00 FF 
1db6c     B8 E4 85 F1 | 	sub	objptr, ##34488
1db70     F2 FA 01 F6 | 	mov	result1, objptr
1db74     00 10 01 FF 
1db78     00 FA 45 F5 | 	or	result1, ##35651584
1db7c     43 00 00 FF 
1db80     A0 E5 05 F1 | 	add	objptr, ##34720
1db84     F2 FA 61 FC | 	wrlong	result1, objptr
1db88     43 00 00 FF 
1db8c     A0 E5 85 F1 | 	sub	objptr, ##34720
1db90     F2 FA 01 F6 | 	mov	result1, objptr
1db94     00 18 01 FF 
1db98     00 FA 45 F5 | 	or	result1, ##36700160
1db9c     43 00 00 FF 
1dba0     A4 E5 05 F1 | 	add	objptr, ##34724
1dba4     F2 FA 61 FC | 	wrlong	result1, objptr
1dba8     43 00 00 FF 
1dbac     A4 E5 85 F1 | 	sub	objptr, ##34724
1dbb0     F2 FA 01 F6 | 	mov	result1, objptr
1dbb4     00 20 01 FF 
1dbb8     00 FA 45 F5 | 	or	result1, ##37748736
1dbbc     43 00 00 FF 
1dbc0     A8 E5 05 F1 | 	add	objptr, ##34728
1dbc4     F2 FA 61 FC | 	wrlong	result1, objptr
1dbc8     43 00 00 FF 
1dbcc     A8 E5 85 F1 | 	sub	objptr, ##34728
1dbd0     F2 FA 01 F6 | 	mov	result1, objptr
1dbd4     00 28 01 FF 
1dbd8     00 FA 45 F5 | 	or	result1, ##38797312
1dbdc     43 00 00 FF 
1dbe0     B4 E5 05 F1 | 	add	objptr, ##34740
1dbe4     F2 FA 61 FC | 	wrlong	result1, objptr
1dbe8     43 00 00 FF 
1dbec     B4 E5 85 F1 | 	sub	objptr, ##34740
1dbf0     F2 FA 01 F6 | 	mov	result1, objptr
1dbf4     00 30 01 FF 
1dbf8     00 FA 45 F5 | 	or	result1, ##39845888
1dbfc     43 00 00 FF 
1dc00     B8 E5 05 F1 | 	add	objptr, ##34744
1dc04     F2 FA 61 FC | 	wrlong	result1, objptr
1dc08     43 00 00 FF 
1dc0c     B8 E5 85 F1 | 	sub	objptr, ##34744
1dc10     F2 FA 01 F6 | 	mov	result1, objptr
1dc14     00 38 01 FF 
1dc18     00 FA 45 F5 | 	or	result1, ##40894464
1dc1c     43 00 00 FF 
1dc20     BC E5 05 F1 | 	add	objptr, ##34748
1dc24     F2 FA 61 FC | 	wrlong	result1, objptr
1dc28     43 00 00 FF 
1dc2c     BC E5 85 F1 | 	sub	objptr, ##34748
1dc30     F2 FA 01 F6 | 	mov	result1, objptr
1dc34     00 40 01 FF 
1dc38     00 FA 45 F5 | 	or	result1, ##41943040
1dc3c     43 00 00 FF 
1dc40     C0 E5 05 F1 | 	add	objptr, ##34752
1dc44     F2 FA 61 FC | 	wrlong	result1, objptr
1dc48     43 00 00 FF 
1dc4c     C0 E5 85 F1 | 	sub	objptr, ##34752
1dc50     F2 FA 01 F6 | 	mov	result1, objptr
1dc54     00 48 01 FF 
1dc58     00 FA 45 F5 | 	or	result1, ##42991616
1dc5c     43 00 00 FF 
1dc60     C8 E5 05 F1 | 	add	objptr, ##34760
1dc64     F2 FA 61 FC | 	wrlong	result1, objptr
1dc68     43 00 00 FF 
1dc6c     C8 E5 85 F1 | 	sub	objptr, ##34760
1dc70     F2 FA 01 F6 | 	mov	result1, objptr
1dc74     00 08 01 FF 
1dc78     00 FA 45 F5 | 	or	result1, ##34603008
1dc7c     43 00 00 FF 
1dc80     CC E5 05 F1 | 	add	objptr, ##34764
1dc84     F2 FA 61 FC | 	wrlong	result1, objptr
1dc88     43 00 00 FF 
1dc8c     CC E5 85 F1 | 	sub	objptr, ##34764
1dc90     F2 FA 01 F6 | 	mov	result1, objptr
1dc94     00 50 01 FF 
1dc98     00 FA 45 F5 | 	or	result1, ##44040192
1dc9c     43 00 00 FF 
1dca0     CC E4 05 F1 | 	add	objptr, ##34508
1dca4     F2 FA 61 FC | 	wrlong	result1, objptr
1dca8     43 00 00 FF 
1dcac     CC E4 85 F1 | 	sub	objptr, ##34508
1dcb0     F2 FA 01 F6 | 	mov	result1, objptr
1dcb4     00 58 01 FF 
1dcb8     00 FA 45 F5 | 	or	result1, ##45088768
1dcbc     43 00 00 FF 
1dcc0     FC E4 05 F1 | 	add	objptr, ##34556
1dcc4     F2 FA 61 FC | 	wrlong	result1, objptr
1dcc8     43 00 00 FF 
1dccc     FC E4 85 F1 | 	sub	objptr, ##34556
1dcd0     F2 FA 01 F6 | 	mov	result1, objptr
1dcd4     00 60 01 FF 
1dcd8     00 FA 45 F5 | 	or	result1, ##46137344
1dcdc     43 00 00 FF 
1dce0     F8 E4 05 F1 | 	add	objptr, ##34552
1dce4     F2 FA 61 FC | 	wrlong	result1, objptr
1dce8     43 00 00 FF 
1dcec     F8 E4 85 F1 | 	sub	objptr, ##34552
1dcf0     F2 FA 01 F6 | 	mov	result1, objptr
1dcf4     00 68 01 FF 
1dcf8     00 FA 45 F5 | 	or	result1, ##47185920
1dcfc     43 00 00 FF 
1dd00     9C E4 05 F1 | 	add	objptr, ##34460
1dd04     F2 FA 61 FC | 	wrlong	result1, objptr
1dd08     43 00 00 FF 
1dd0c     9C E4 85 F1 | 	sub	objptr, ##34460
1dd10     F2 FA 01 F6 | 	mov	result1, objptr
1dd14     00 70 01 FF 
1dd18     00 FA 45 F5 | 	or	result1, ##48234496
1dd1c     43 00 00 FF 
1dd20     A0 E4 05 F1 | 	add	objptr, ##34464
1dd24     F2 FA 61 FC | 	wrlong	result1, objptr
1dd28     43 00 00 FF 
1dd2c     A0 E4 85 F1 | 	sub	objptr, ##34464
1dd30     F2 FA 01 F6 | 	mov	result1, objptr
1dd34     00 78 01 FF 
1dd38     00 FA 45 F5 | 	or	result1, ##49283072
1dd3c     43 00 00 FF 
1dd40     08 E5 05 F1 | 	add	objptr, ##34568
1dd44     F2 FA 61 FC | 	wrlong	result1, objptr
1dd48     43 00 00 FF 
1dd4c     08 E5 85 F1 | 	sub	objptr, ##34568
1dd50     F2 FA 01 F6 | 	mov	result1, objptr
1dd54     38 FA 25 F4 | 	bith	result1, #56
1dd58     43 00 00 FF 
1dd5c     B0 E5 05 F1 | 	add	objptr, ##34736
1dd60     F2 FA 61 FC | 	wrlong	result1, objptr
1dd64     43 00 00 FF 
1dd68     B0 E5 85 F1 | 	sub	objptr, ##34736
1dd6c     F2 FA 01 F6 | 	mov	result1, objptr
1dd70     00 88 01 FF 
1dd74     00 FA 45 F5 | 	or	result1, ##51380224
1dd78     43 00 00 FF 
1dd7c     C4 E5 05 F1 | 	add	objptr, ##34756
1dd80     F2 FA 61 FC | 	wrlong	result1, objptr
1dd84     43 00 00 FF 
1dd88     C4 E5 85 F1 | 	sub	objptr, ##34756
1dd8c     F2 FA 01 F6 | 	mov	result1, objptr
1dd90     00 90 01 FF 
1dd94     00 FA 45 F5 | 	or	result1, ##52428800
1dd98     43 00 00 FF 
1dd9c     D0 E5 05 F1 | 	add	objptr, ##34768
1dda0     F2 FA 61 FC | 	wrlong	result1, objptr
1dda4     43 00 00 FF 
1dda8     D0 E5 85 F1 | 	sub	objptr, ##34768
1ddac     F2 FA 01 F6 | 	mov	result1, objptr
1ddb0     00 98 01 FF 
1ddb4     00 FA 45 F5 | 	or	result1, ##53477376
1ddb8     43 00 00 FF 
1ddbc     D4 E5 05 F1 | 	add	objptr, ##34772
1ddc0     F2 FA 61 FC | 	wrlong	result1, objptr
1ddc4     43 00 00 FF 
1ddc8     D4 E5 85 F1 | 	sub	objptr, ##34772
1ddcc     F2 FA 01 F6 | 	mov	result1, objptr
1ddd0     00 A0 01 FF 
1ddd4     00 FA 45 F5 | 	or	result1, ##54525952
1ddd8     43 00 00 FF 
1dddc     D8 E5 05 F1 | 	add	objptr, ##34776
1dde0     F2 FA 61 FC | 	wrlong	result1, objptr
1dde4     43 00 00 FF 
1dde8     D8 E5 85 F1 | 	sub	objptr, ##34776
1ddec     F2 FA 01 F6 | 	mov	result1, objptr
1ddf0     00 A8 01 FF 
1ddf4     00 FA 45 F5 | 	or	result1, ##55574528
1ddf8     43 00 00 FF 
1ddfc     DC E5 05 F1 | 	add	objptr, ##34780
1de00     F2 FA 61 FC | 	wrlong	result1, objptr
1de04     43 00 00 FF 
1de08     DC E5 85 F1 | 	sub	objptr, ##34780
1de0c     F2 FA 01 F6 | 	mov	result1, objptr
1de10     00 B0 01 FF 
1de14     00 FA 45 F5 | 	or	result1, ##56623104
1de18     43 00 00 FF 
1de1c     E0 E5 05 F1 | 	add	objptr, ##34784
1de20     F2 FA 61 FC | 	wrlong	result1, objptr
1de24     43 00 00 FF 
1de28     E0 E5 85 F1 | 	sub	objptr, ##34784
1de2c     F2 FA 01 F6 | 	mov	result1, objptr
1de30     00 B8 01 FF 
1de34     00 FA 45 F5 | 	or	result1, ##57671680
1de38     43 00 00 FF 
1de3c     E4 E5 05 F1 | 	add	objptr, ##34788
1de40     F2 FA 61 FC | 	wrlong	result1, objptr
1de44     43 00 00 FF 
1de48     E4 E5 85 F1 | 	sub	objptr, ##34788
1de4c     F2 FA 01 F6 | 	mov	result1, objptr
1de50     94 FA 25 F4 | 	bith	result1, #148
1de54     43 00 00 FF 
1de58     AC E5 05 F1 | 	add	objptr, ##34732
1de5c     F2 FA 61 FC | 	wrlong	result1, objptr
1de60     43 00 00 FF 
1de64     AC E5 85 F1 | 	sub	objptr, ##34732
1de68     F2 FA 01 F6 | 	mov	result1, objptr
1de6c     57 FA 25 F4 | 	bith	result1, #87
1de70     43 00 00 FF 
1de74     EC E5 05 F1 | 	add	objptr, ##34796
1de78     F2 FA 61 FC | 	wrlong	result1, objptr
1de7c     43 00 00 FF 
1de80     EC E5 85 F1 | 	sub	objptr, ##34796
1de84     F2 FA 01 F6 | 	mov	result1, objptr
1de88     00 C8 01 FF 
1de8c     00 FA 45 F5 | 	or	result1, ##59768832
1de90     43 00 00 FF 
1de94     E8 E5 05 F1 | 	add	objptr, ##34792
1de98     F2 FA 61 FC | 	wrlong	result1, objptr
1de9c     43 00 00 FF 
1dea0     E8 E5 85 F1 | 	sub	objptr, ##34792
1dea4     F2 FA 01 F6 | 	mov	result1, objptr
1dea8     00 D0 01 FF 
1deac     00 FA 45 F5 | 	or	result1, ##60817408
1deb0     44 00 00 FF 
1deb4     00 E4 05 F1 | 	add	objptr, ##34816
1deb8     F2 FA 61 FC | 	wrlong	result1, objptr
1debc     44 00 00 FF 
1dec0     00 E4 85 F1 | 	sub	objptr, ##34816
1dec4     F2 FA 01 F6 | 	mov	result1, objptr
1dec8     00 D8 01 FF 
1decc     00 FA 45 F5 | 	or	result1, ##61865984
1ded0     44 00 00 FF 
1ded4     04 E4 05 F1 | 	add	objptr, ##34820
1ded8     F2 FA 61 FC | 	wrlong	result1, objptr
1dedc     44 00 00 FF 
1dee0     04 E4 85 F1 | 	sub	objptr, ##34820
1dee4     F2 FA 01 F6 | 	mov	result1, objptr
1dee8     76 FA 25 F4 | 	bith	result1, #118
1deec     43 00 00 FF 
1def0     F0 E5 05 F1 | 	add	objptr, ##34800
1def4     F2 FA 61 FC | 	wrlong	result1, objptr
1def8     43 00 00 FF 
1defc     F0 E5 85 F1 | 	sub	objptr, ##34800
1df00     F2 FA 01 F6 | 	mov	result1, objptr
1df04     00 E8 01 FF 
1df08     00 FA 45 F5 | 	or	result1, ##63963136
1df0c     43 00 00 FF 
1df10     F4 E5 05 F1 | 	add	objptr, ##34804
1df14     F2 FA 61 FC | 	wrlong	result1, objptr
1df18     43 00 00 FF 
1df1c     F4 E5 85 F1 | 	sub	objptr, ##34804
1df20     F2 FA 01 F6 | 	mov	result1, objptr
1df24     95 FA 25 F4 | 	bith	result1, #149
1df28     43 00 00 FF 
1df2c     F8 E5 05 F1 | 	add	objptr, ##34808
1df30     F2 FA 61 FC | 	wrlong	result1, objptr
1df34     43 00 00 FF 
1df38     F8 E5 85 F1 | 	sub	objptr, ##34808
1df3c     F2 FA 01 F6 | 	mov	result1, objptr
1df40     B4 FA 25 F4 | 	bith	result1, #180
1df44     43 00 00 FF 
1df48     FC E5 05 F1 | 	add	objptr, ##34812
1df4c     F2 FA 61 FC | 	wrlong	result1, objptr
1df50     43 00 00 FF 
1df54     FC E5 85 F1 | 	sub	objptr, ##34812
1df58     F2 FA 01 F6 | 	mov	result1, objptr
1df5c     1A FA 25 F4 | 	bith	result1, #26
1df60     44 00 00 FF 
1df64     0C E4 05 F1 | 	add	objptr, ##34828
1df68     F2 FA 61 FC | 	wrlong	result1, objptr
1df6c     44 00 00 FF 
1df70     0C E4 85 F1 | 	sub	objptr, ##34828
1df74     F2 FA 01 F6 | 	mov	result1, objptr
1df78     00 08 02 FF 
1df7c     00 FA 45 F5 | 	or	result1, ##68157440
1df80     44 00 00 FF 
1df84     08 E4 05 F1 | 	add	objptr, ##34824
1df88     F2 FA 61 FC | 	wrlong	result1, objptr
1df8c     44 00 00 FF 
1df90     08 E4 85 F1 | 	sub	objptr, ##34824
1df94     F2 FA 01 F6 | 	mov	result1, objptr
1df98     00 10 02 FF 
1df9c     00 FA 45 F5 | 	or	result1, ##69206016
1dfa0     44 00 00 FF 
1dfa4     18 E4 05 F1 | 	add	objptr, ##34840
1dfa8     F2 FA 61 FC | 	wrlong	result1, objptr
1dfac     44 00 00 FF 
1dfb0     18 E4 85 F1 | 	sub	objptr, ##34840
1dfb4     F2 FA 01 F6 | 	mov	result1, objptr
1dfb8     00 18 02 FF 
1dfbc     00 FA 45 F5 | 	or	result1, ##70254592
1dfc0     44 00 00 FF 
1dfc4     14 E4 05 F1 | 	add	objptr, ##34836
1dfc8     F2 FA 61 FC | 	wrlong	result1, objptr
1dfcc     44 00 00 FF 
1dfd0     14 E4 85 F1 | 	sub	objptr, ##34836
1dfd4     F2 FA 01 F6 | 	mov	result1, objptr
1dfd8     00 20 02 FF 
1dfdc     00 FA 45 F5 | 	or	result1, ##71303168
1dfe0     44 00 00 FF 
1dfe4     10 E4 05 F1 | 	add	objptr, ##34832
1dfe8     F2 FA 61 FC | 	wrlong	result1, objptr
1dfec     44 00 00 FF 
1dff0     10 E4 85 F1 | 	sub	objptr, ##34832
1dff4     F2 FA 01 F6 | 	mov	result1, objptr
1dff8     00 28 02 FF 
1dffc     00 FA 45 F5 | 	or	result1, ##72351744
1e000     44 00 00 FF 
1e004     1C E4 05 F1 | 	add	objptr, ##34844
1e008     F2 FA 61 FC | 	wrlong	result1, objptr
1e00c     44 00 00 FF 
1e010     1C E4 85 F1 | 	sub	objptr, ##34844
1e014     F2 FA 01 F6 | 	mov	result1, objptr
1e018     00 30 02 FF 
1e01c     00 FA 45 F5 | 	or	result1, ##73400320
1e020     44 00 00 FF 
1e024     20 E4 05 F1 | 	add	objptr, ##34848
1e028     F2 FA 61 FC | 	wrlong	result1, objptr
1e02c     44 00 00 FF 
1e030     20 E4 85 F1 | 	sub	objptr, ##34848
1e034     F2 FA 01 F6 | 	mov	result1, objptr
1e038     00 38 02 FF 
1e03c     00 FA 45 F5 | 	or	result1, ##74448896
1e040     43 00 00 FF 
1e044     B4 E4 05 F1 | 	add	objptr, ##34484
1e048     F2 FA 61 FC | 	wrlong	result1, objptr
1e04c     43 00 00 FF 
1e050     B4 E4 85 F1 | 	sub	objptr, ##34484
1e054     F2 FA 01 F6 | 	mov	result1, objptr
1e058     00 40 02 FF 
1e05c     00 FA 45 F5 | 	or	result1, ##75497472
1e060     44 00 00 FF 
1e064     38 E4 05 F1 | 	add	objptr, ##34872
1e068     F2 FA 61 FC | 	wrlong	result1, objptr
1e06c     44 00 00 FF 
1e070     38 E4 85 F1 | 	sub	objptr, ##34872
1e074     F2 FA 01 F6 | 	mov	result1, objptr
1e078     00 48 02 FF 
1e07c     00 FA 45 F5 | 	or	result1, ##76546048
1e080     44 00 00 FF 
1e084     48 E4 05 F1 | 	add	objptr, ##34888
1e088     F2 FA 61 FC | 	wrlong	result1, objptr
1e08c     44 00 00 FF 
1e090     48 E4 85 F1 | 	sub	objptr, ##34888
1e094     F2 FA 01 F6 | 	mov	result1, objptr
1e098     00 50 02 FF 
1e09c     00 FA 45 F5 | 	or	result1, ##77594624
1e0a0     44 00 00 FF 
1e0a4     4C E4 05 F1 | 	add	objptr, ##34892
1e0a8     F2 FA 61 FC | 	wrlong	result1, objptr
1e0ac     44 00 00 FF 
1e0b0     4C E4 85 F1 | 	sub	objptr, ##34892
1e0b4     F2 FA 01 F6 | 	mov	result1, objptr
1e0b8     00 58 02 FF 
1e0bc     00 FA 45 F5 | 	or	result1, ##78643200
1e0c0     44 00 00 FF 
1e0c4     44 E4 05 F1 | 	add	objptr, ##34884
1e0c8     F2 FA 61 FC | 	wrlong	result1, objptr
1e0cc     44 00 00 FF 
1e0d0     44 E4 85 F1 | 	sub	objptr, ##34884
1e0d4     F2 FA 01 F6 | 	mov	result1, objptr
1e0d8     00 60 02 FF 
1e0dc     00 FA 45 F5 | 	or	result1, ##79691776
1e0e0     44 00 00 FF 
1e0e4     3C E4 05 F1 | 	add	objptr, ##34876
1e0e8     F2 FA 61 FC | 	wrlong	result1, objptr
1e0ec     44 00 00 FF 
1e0f0     3C E4 85 F1 | 	sub	objptr, ##34876
1e0f4     F2 FA 01 F6 | 	mov	result1, objptr
1e0f8     00 68 02 FF 
1e0fc     00 FA 45 F5 | 	or	result1, ##80740352
1e100     44 00 00 FF 
1e104     40 E4 05 F1 | 	add	objptr, ##34880
1e108     F2 FA 61 FC | 	wrlong	result1, objptr
1e10c     44 00 00 FF 
1e110     40 E4 85 F1 | 	sub	objptr, ##34880
1e114     F2 FA 01 F6 | 	mov	result1, objptr
1e118     00 70 02 FF 
1e11c     00 FA 45 F5 | 	or	result1, ##81788928
1e120     44 00 00 FF 
1e124     50 E4 05 F1 | 	add	objptr, ##34896
1e128     F2 FA 61 FC | 	wrlong	result1, objptr
1e12c     44 00 00 FF 
1e130     50 E4 85 F1 | 	sub	objptr, ##34896
1e134     F2 FA 01 F6 | 	mov	result1, objptr
1e138     00 78 02 FF 
1e13c     00 FA 45 F5 | 	or	result1, ##82837504
1e140     44 00 00 FF 
1e144     54 E4 05 F1 | 	add	objptr, ##34900
1e148     F2 FA 61 FC | 	wrlong	result1, objptr
1e14c     44 00 00 FF 
1e150     54 E4 85 F1 | 	sub	objptr, ##34900
1e154     F2 FA 01 F6 | 	mov	result1, objptr
1e158     00 80 02 FF 
1e15c     00 FA 45 F5 | 	or	result1, ##83886080
1e160     44 00 00 FF 
1e164     58 E4 05 F1 | 	add	objptr, ##34904
1e168     F2 FA 61 FC | 	wrlong	result1, objptr
1e16c     44 00 00 FF 
1e170     58 E4 85 F1 | 	sub	objptr, ##34904
1e174     F2 FA 01 F6 | 	mov	result1, objptr
1e178     00 88 02 FF 
1e17c     00 FA 45 F5 | 	or	result1, ##84934656
1e180     44 00 00 FF 
1e184     5C E4 05 F1 | 	add	objptr, ##34908
1e188     F2 FA 61 FC | 	wrlong	result1, objptr
1e18c     44 00 00 FF 
1e190     5C E4 85 F1 | 	sub	objptr, ##34908
1e194     F2 FA 01 F6 | 	mov	result1, objptr
1e198     00 90 02 FF 
1e19c     00 FA 45 F5 | 	or	result1, ##85983232
1e1a0     44 00 00 FF 
1e1a4     60 E4 05 F1 | 	add	objptr, ##34912
1e1a8     F2 FA 61 FC | 	wrlong	result1, objptr
1e1ac     44 00 00 FF 
1e1b0     60 E4 85 F1 | 	sub	objptr, ##34912
1e1b4     F2 FA 01 F6 | 	mov	result1, objptr
1e1b8     00 98 02 FF 
1e1bc     00 FA 45 F5 | 	or	result1, ##87031808
1e1c0     44 00 00 FF 
1e1c4     64 E4 05 F1 | 	add	objptr, ##34916
1e1c8     F2 FA 61 FC | 	wrlong	result1, objptr
1e1cc     44 00 00 FF 
1e1d0     64 E4 85 F1 | 	sub	objptr, ##34916
1e1d4     F2 FA 01 F6 | 	mov	result1, objptr
1e1d8     00 A0 02 FF 
1e1dc     00 FA 45 F5 | 	or	result1, ##88080384
1e1e0     44 00 00 FF 
1e1e4     68 E4 05 F1 | 	add	objptr, ##34920
1e1e8     F2 FA 61 FC | 	wrlong	result1, objptr
1e1ec     44 00 00 FF 
1e1f0     68 E4 85 F1 | 	sub	objptr, ##34920
1e1f4     F2 FA 01 F6 | 	mov	result1, objptr
1e1f8     00 A8 02 FF 
1e1fc     00 FA 45 F5 | 	or	result1, ##89128960
1e200     44 00 00 FF 
1e204     6C E4 05 F1 | 	add	objptr, ##34924
1e208     F2 FA 61 FC | 	wrlong	result1, objptr
1e20c     44 00 00 FF 
1e210     6C E4 85 F1 | 	sub	objptr, ##34924
1e214     F2 FA 01 F6 | 	mov	result1, objptr
1e218     00 B0 02 FF 
1e21c     00 FA 45 F5 | 	or	result1, ##90177536
1e220     44 00 00 FF 
1e224     78 E4 05 F1 | 	add	objptr, ##34936
1e228     F2 FA 61 FC | 	wrlong	result1, objptr
1e22c     44 00 00 FF 
1e230     78 E4 85 F1 | 	sub	objptr, ##34936
1e234     F2 FA 01 F6 | 	mov	result1, objptr
1e238     00 B8 02 FF 
1e23c     00 FA 45 F5 | 	or	result1, ##91226112
1e240     44 00 00 FF 
1e244     70 E4 05 F1 | 	add	objptr, ##34928
1e248     F2 FA 61 FC | 	wrlong	result1, objptr
1e24c     44 00 00 FF 
1e250     70 E4 85 F1 | 	sub	objptr, ##34928
1e254     F2 FA 01 F6 | 	mov	result1, objptr
1e258     00 C0 02 FF 
1e25c     00 FA 45 F5 | 	or	result1, ##92274688
1e260     44 00 00 FF 
1e264     74 E4 05 F1 | 	add	objptr, ##34932
1e268     F2 FA 61 FC | 	wrlong	result1, objptr
1e26c     44 00 00 FF 
1e270     74 E4 85 F1 | 	sub	objptr, ##34932
1e274     F2 FA 01 F6 | 	mov	result1, objptr
1e278     00 C8 02 FF 
1e27c     00 FA 45 F5 | 	or	result1, ##93323264
1e280     44 00 00 FF 
1e284     7C E4 05 F1 | 	add	objptr, ##34940
1e288     F2 FA 61 FC | 	wrlong	result1, objptr
1e28c     44 00 00 FF 
1e290     7C E4 85 F1 | 	sub	objptr, ##34940
1e294     F2 FA 01 F6 | 	mov	result1, objptr
1e298     00 D0 02 FF 
1e29c     00 FA 45 F5 | 	or	result1, ##94371840
1e2a0     44 00 00 FF 
1e2a4     24 E4 05 F1 | 	add	objptr, ##34852
1e2a8     F2 FA 61 FC | 	wrlong	result1, objptr
1e2ac     44 00 00 FF 
1e2b0     24 E4 85 F1 | 	sub	objptr, ##34852
1e2b4     F2 FA 01 F6 | 	mov	result1, objptr
1e2b8     00 D8 02 FF 
1e2bc     00 FA 45 F5 | 	or	result1, ##95420416
1e2c0     44 00 00 FF 
1e2c4     2C E4 05 F1 | 	add	objptr, ##34860
1e2c8     F2 FA 61 FC | 	wrlong	result1, objptr
1e2cc     44 00 00 FF 
1e2d0     2C E4 85 F1 | 	sub	objptr, ##34860
1e2d4     F2 FA 01 F6 | 	mov	result1, objptr
1e2d8     00 E0 02 FF 
1e2dc     00 FA 45 F5 | 	or	result1, ##96468992
1e2e0     44 00 00 FF 
1e2e4     30 E4 05 F1 | 	add	objptr, ##34864
1e2e8     F2 FA 61 FC | 	wrlong	result1, objptr
1e2ec     44 00 00 FF 
1e2f0     30 E4 85 F1 | 	sub	objptr, ##34864
1e2f4     F2 FA 01 F6 | 	mov	result1, objptr
1e2f8     00 E8 02 FF 
1e2fc     00 FA 45 F5 | 	or	result1, ##97517568
1e300     44 00 00 FF 
1e304     80 E4 05 F1 | 	add	objptr, ##34944
1e308     F2 FA 61 FC | 	wrlong	result1, objptr
1e30c     44 00 00 FF 
1e310     80 E4 85 F1 | 	sub	objptr, ##34944
1e314     F2 FA 01 F6 | 	mov	result1, objptr
1e318     00 F0 02 FF 
1e31c     00 FA 45 F5 | 	or	result1, ##98566144
1e320     44 00 00 FF 
1e324     84 E4 05 F1 | 	add	objptr, ##34948
1e328     F2 FA 61 FC | 	wrlong	result1, objptr
1e32c     44 00 00 FF 
1e330     84 E4 85 F1 | 	sub	objptr, ##34948
1e334     F2 FA 01 F6 | 	mov	result1, objptr
1e338     00 F8 02 FF 
1e33c     00 FA 45 F5 | 	or	result1, ##99614720
1e340     44 00 00 FF 
1e344     88 E4 05 F1 | 	add	objptr, ##34952
1e348     F2 FA 61 FC | 	wrlong	result1, objptr
1e34c     44 00 00 FF 
1e350     88 E4 85 F1 | 	sub	objptr, ##34952
1e354     F2 FA 01 F6 | 	mov	result1, objptr
1e358     39 FA 25 F4 | 	bith	result1, #57
1e35c     44 00 00 FF 
1e360     34 E4 05 F1 | 	add	objptr, ##34868
1e364     F2 FA 61 FC | 	wrlong	result1, objptr
1e368     44 00 00 FF 
1e36c     34 E4 85 F1 | 	sub	objptr, ##34868
1e370     F2 FA 01 F6 | 	mov	result1, objptr
1e374     00 08 03 FF 
1e378     00 FA 45 F5 | 	or	result1, ##101711872
1e37c     44 00 00 FF 
1e380     98 E4 05 F1 | 	add	objptr, ##34968
1e384     F2 FA 61 FC | 	wrlong	result1, objptr
1e388     44 00 00 FF 
1e38c     98 E4 85 F1 | 	sub	objptr, ##34968
1e390     F2 FA 01 F6 | 	mov	result1, objptr
1e394     00 10 03 FF 
1e398     00 FA 45 F5 | 	or	result1, ##102760448
1e39c     44 00 00 FF 
1e3a0     A0 E4 05 F1 | 	add	objptr, ##34976
1e3a4     F2 FA 61 FC | 	wrlong	result1, objptr
1e3a8     44 00 00 FF 
1e3ac     A0 E4 85 F1 | 	sub	objptr, ##34976
1e3b0     F2 FA 01 F6 | 	mov	result1, objptr
1e3b4     00 18 03 FF 
1e3b8     00 FA 45 F5 | 	or	result1, ##103809024
1e3bc     44 00 00 FF 
1e3c0     94 E4 05 F1 | 	add	objptr, ##34964
1e3c4     F2 FA 61 FC | 	wrlong	result1, objptr
1e3c8     44 00 00 FF 
1e3cc     94 E4 85 F1 | 	sub	objptr, ##34964
1e3d0     F2 FA 01 F6 | 	mov	result1, objptr
1e3d4     00 20 03 FF 
1e3d8     00 FA 45 F5 | 	or	result1, ##104857600
1e3dc     44 00 00 FF 
1e3e0     90 E4 05 F1 | 	add	objptr, ##34960
1e3e4     F2 FA 61 FC | 	wrlong	result1, objptr
1e3e8     44 00 00 FF 
1e3ec     90 E4 85 F1 | 	sub	objptr, ##34960
1e3f0     F2 FA 01 F6 | 	mov	result1, objptr
1e3f4     00 28 03 FF 
1e3f8     00 FA 45 F5 | 	or	result1, ##105906176
1e3fc     44 00 00 FF 
1e400     8C E4 05 F1 | 	add	objptr, ##34956
1e404     F2 FA 61 FC | 	wrlong	result1, objptr
1e408     44 00 00 FF 
1e40c     8C E4 85 F1 | 	sub	objptr, ##34956
1e410     F2 FA 01 F6 | 	mov	result1, objptr
1e414     00 30 03 FF 
1e418     00 FA 45 F5 | 	or	result1, ##106954752
1e41c     44 00 00 FF 
1e420     9C E4 05 F1 | 	add	objptr, ##34972
1e424     F2 FA 61 FC | 	wrlong	result1, objptr
1e428     44 00 00 FF 
1e42c     9C E4 85 F1 | 	sub	objptr, ##34972
1e430     F2 FA 01 F6 | 	mov	result1, objptr
1e434     00 38 03 FF 
1e438     00 FA 45 F5 | 	or	result1, ##108003328
1e43c     44 00 00 FF 
1e440     A4 E4 05 F1 | 	add	objptr, ##34980
1e444     F2 FA 61 FC | 	wrlong	result1, objptr
1e448     44 00 00 FF 
1e44c     A4 E4 85 F1 | 	sub	objptr, ##34980
1e450     F2 FA 01 F6 | 	mov	result1, objptr
1e454     00 40 03 FF 
1e458     00 FA 45 F5 | 	or	result1, ##109051904
1e45c     44 00 00 FF 
1e460     A8 E4 05 F1 | 	add	objptr, ##34984
1e464     F2 FA 61 FC | 	wrlong	result1, objptr
1e468     44 00 00 FF 
1e46c     A8 E4 85 F1 | 	sub	objptr, ##34984
1e470     F2 FA 01 F6 | 	mov	result1, objptr
1e474     00 48 03 FF 
1e478     00 FA 45 F5 | 	or	result1, ##110100480
1e47c     44 00 00 FF 
1e480     AC E4 05 F1 | 	add	objptr, ##34988
1e484     F2 FA 61 FC | 	wrlong	result1, objptr
1e488     44 00 00 FF 
1e48c     AC E4 85 F1 | 	sub	objptr, ##34988
1e490     F2 FA 01 F6 | 	mov	result1, objptr
1e494     00 50 03 FF 
1e498     00 FA 45 F5 | 	or	result1, ##111149056
1e49c     44 00 00 FF 
1e4a0     B4 E4 05 F1 | 	add	objptr, ##34996
1e4a4     F2 FA 61 FC | 	wrlong	result1, objptr
1e4a8     44 00 00 FF 
1e4ac     B4 E4 85 F1 | 	sub	objptr, ##34996
1e4b0     F2 FA 01 F6 | 	mov	result1, objptr
1e4b4     00 58 03 FF 
1e4b8     00 FA 45 F5 | 	or	result1, ##112197632
1e4bc     44 00 00 FF 
1e4c0     B8 E4 05 F1 | 	add	objptr, ##35000
1e4c4     F2 FA 61 FC | 	wrlong	result1, objptr
1e4c8     44 00 00 FF 
1e4cc     B8 E4 85 F1 | 	sub	objptr, ##35000
1e4d0     F2 FA 01 F6 | 	mov	result1, objptr
1e4d4     00 60 03 FF 
1e4d8     00 FA 45 F5 | 	or	result1, ##113246208
1e4dc     44 00 00 FF 
1e4e0     BC E4 05 F1 | 	add	objptr, ##35004
1e4e4     F2 FA 61 FC | 	wrlong	result1, objptr
1e4e8     44 00 00 FF 
1e4ec     BC E4 85 F1 | 	sub	objptr, ##35004
1e4f0     F2 FA 01 F6 | 	mov	result1, objptr
1e4f4     00 68 03 FF 
1e4f8     00 FA 45 F5 | 	or	result1, ##114294784
1e4fc     44 00 00 FF 
1e500     C0 E4 05 F1 | 	add	objptr, ##35008
1e504     F2 FA 61 FC | 	wrlong	result1, objptr
1e508     44 00 00 FF 
1e50c     C0 E4 85 F1 | 	sub	objptr, ##35008
1e510     F2 FA 01 F6 | 	mov	result1, objptr
1e514     00 70 03 FF 
1e518     00 FA 45 F5 | 	or	result1, ##115343360
1e51c     44 00 00 FF 
1e520     C4 E4 05 F1 | 	add	objptr, ##35012
1e524     F2 FA 61 FC | 	wrlong	result1, objptr
1e528     44 00 00 FF 
1e52c     C4 E4 85 F1 | 	sub	objptr, ##35012
1e530     F2 FA 01 F6 | 	mov	result1, objptr
1e534     00 78 03 FF 
1e538     00 FA 45 F5 | 	or	result1, ##116391936
1e53c     44 00 00 FF 
1e540     C8 E4 05 F1 | 	add	objptr, ##35016
1e544     F2 FA 61 FC | 	wrlong	result1, objptr
1e548     44 00 00 FF 
1e54c     C8 E4 85 F1 | 	sub	objptr, ##35016
1e550     F2 FA 01 F6 | 	mov	result1, objptr
1e554     00 08 01 FF 
1e558     00 FA 45 F5 | 	or	result1, ##34603008
1e55c     44 00 00 FF 
1e560     CC E4 05 F1 | 	add	objptr, ##35020
1e564     F2 FA 61 FC | 	wrlong	result1, objptr
1e568     44 00 00 FF 
1e56c     CC E4 85 F1 | 	sub	objptr, ##35020
1e570     F2 FA 01 F6 | 	mov	result1, objptr
1e574     58 FA 25 F4 | 	bith	result1, #88
1e578     44 00 00 FF 
1e57c     D0 E4 05 F1 | 	add	objptr, ##35024
1e580     F2 FA 61 FC | 	wrlong	result1, objptr
1e584     44 00 00 FF 
1e588     D0 E4 85 F1 | 	sub	objptr, ##35024
1e58c     F2 FA 01 F6 | 	mov	result1, objptr
1e590     00 88 03 FF 
1e594     00 FA 45 F5 | 	or	result1, ##118489088
1e598     44 00 00 FF 
1e59c     B0 E4 05 F1 | 	add	objptr, ##34992
1e5a0     F2 FA 61 FC | 	wrlong	result1, objptr
1e5a4     44 00 00 FF 
1e5a8     B0 E4 85 F1 | 	sub	objptr, ##34992
1e5ac     F2 FA 01 F6 | 	mov	result1, objptr
1e5b0     00 90 03 FF 
1e5b4     00 FA 45 F5 | 	or	result1, ##119537664
1e5b8     43 00 00 FF 
1e5bc     A8 E4 05 F1 | 	add	objptr, ##34472
1e5c0     F2 FA 61 FC | 	wrlong	result1, objptr
1e5c4     43 00 00 FF 
1e5c8     A8 E4 85 F1 | 	sub	objptr, ##34472
1e5cc     F2 FA 01 F6 | 	mov	result1, objptr
1e5d0     00 98 03 FF 
1e5d4     00 FA 45 F5 | 	or	result1, ##120586240
1e5d8     44 00 00 FF 
1e5dc     D4 E4 05 F1 | 	add	objptr, ##35028
1e5e0     F2 FA 61 FC | 	wrlong	result1, objptr
1e5e4     44 00 00 FF 
1e5e8     D4 E4 85 F1 | 	sub	objptr, ##35028
1e5ec     F2 FA 01 F6 | 	mov	result1, objptr
1e5f0     00 A0 03 FF 
1e5f4     00 FA 45 F5 | 	or	result1, ##121634816
1e5f8     44 00 00 FF 
1e5fc     D8 E4 05 F1 | 	add	objptr, ##35032
1e600     F2 FA 61 FC | 	wrlong	result1, objptr
1e604     44 00 00 FF 
1e608     D8 E4 85 F1 | 	sub	objptr, ##35032
1e60c     F2 FA 01 F6 | 	mov	result1, objptr
1e610     00 A8 03 FF 
1e614     00 FA 45 F5 | 	or	result1, ##122683392
1e618     44 00 00 FF 
1e61c     EC E4 05 F1 | 	add	objptr, ##35052
1e620     F2 FA 61 FC | 	wrlong	result1, objptr
1e624     44 00 00 FF 
1e628     EC E4 85 F1 | 	sub	objptr, ##35052
1e62c     F2 FA 01 F6 | 	mov	result1, objptr
1e630     00 B0 03 FF 
1e634     00 FA 45 F5 | 	or	result1, ##123731968
1e638     44 00 00 FF 
1e63c     E8 E4 05 F1 | 	add	objptr, ##35048
1e640     F2 FA 61 FC | 	wrlong	result1, objptr
1e644     44 00 00 FF 
1e648     E8 E4 85 F1 | 	sub	objptr, ##35048
1e64c     F2 FA 01 F6 | 	mov	result1, objptr
1e650     00 B8 03 FF 
1e654     00 FA 45 F5 | 	or	result1, ##124780544
1e658     44 00 00 FF 
1e65c     E0 E4 05 F1 | 	add	objptr, ##35040
1e660     F2 FA 61 FC | 	wrlong	result1, objptr
1e664     44 00 00 FF 
1e668     E0 E4 85 F1 | 	sub	objptr, ##35040
1e66c     F2 FA 01 F6 | 	mov	result1, objptr
1e670     77 FA 25 F4 | 	bith	result1, #119
1e674     44 00 00 FF 
1e678     DC E4 05 F1 | 	add	objptr, ##35036
1e67c     F2 FA 61 FC | 	wrlong	result1, objptr
1e680     44 00 00 FF 
1e684     DC E4 85 F1 | 	sub	objptr, ##35036
1e688     F2 FA 01 F6 | 	mov	result1, objptr
1e68c     00 C8 03 FF 
1e690     00 FA 45 F5 | 	or	result1, ##126877696
1e694     44 00 00 FF 
1e698     FC E4 05 F1 | 	add	objptr, ##35068
1e69c     F2 FA 61 FC | 	wrlong	result1, objptr
1e6a0     44 00 00 FF 
1e6a4     FC E4 85 F1 | 	sub	objptr, ##35068
1e6a8     F2 FA 01 F6 | 	mov	result1, objptr
1e6ac     00 D0 03 FF 
1e6b0     00 FA 45 F5 | 	or	result1, ##127926272
1e6b4     44 00 00 FF 
1e6b8     F0 E4 05 F1 | 	add	objptr, ##35056
1e6bc     F2 FA 61 FC | 	wrlong	result1, objptr
1e6c0     44 00 00 FF 
1e6c4     F0 E4 85 F1 | 	sub	objptr, ##35056
1e6c8     F2 FA 01 F6 | 	mov	result1, objptr
1e6cc     00 D8 03 FF 
1e6d0     00 FA 45 F5 | 	or	result1, ##128974848
1e6d4     44 00 00 FF 
1e6d8     F4 E4 05 F1 | 	add	objptr, ##35060
1e6dc     F2 FA 61 FC | 	wrlong	result1, objptr
1e6e0     44 00 00 FF 
1e6e4     F4 E4 85 F1 | 	sub	objptr, ##35060
1e6e8     F2 FA 01 F6 | 	mov	result1, objptr
1e6ec     96 FA 25 F4 | 	bith	result1, #150
1e6f0     44 00 00 FF 
1e6f4     F8 E4 05 F1 | 	add	objptr, ##35064
1e6f8     F2 FA 61 FC | 	wrlong	result1, objptr
1e6fc     44 00 00 FF 
1e700     F8 E4 85 F1 | 	sub	objptr, ##35064
1e704     F2 FA 01 F6 | 	mov	result1, objptr
1e708     00 E8 03 FF 
1e70c     00 FA 45 F5 | 	or	result1, ##131072000
1e710     44 00 00 FF 
1e714     00 E5 05 F1 | 	add	objptr, ##35072
1e718     F2 FA 61 FC | 	wrlong	result1, objptr
1e71c     44 00 00 FF 
1e720     00 E5 85 F1 | 	sub	objptr, ##35072
1e724     F2 FA 01 F6 | 	mov	result1, objptr
1e728     B5 FA 25 F4 | 	bith	result1, #181
1e72c     44 00 00 FF 
1e730     04 E5 05 F1 | 	add	objptr, ##35076
1e734     F2 FA 61 FC | 	wrlong	result1, objptr
1e738     44 00 00 FF 
1e73c     04 E5 85 F1 | 	sub	objptr, ##35076
1e740     F2 FA 01 F6 | 	mov	result1, objptr
1e744     D4 FA 25 F4 | 	bith	result1, #212
1e748     44 00 00 FF 
1e74c     08 E5 05 F1 | 	add	objptr, ##35080
1e750     F2 FA 61 FC | 	wrlong	result1, objptr
1e754     44 00 00 FF 
1e758     08 E5 85 F1 | 	sub	objptr, ##35080
1e75c     F2 FA 01 F6 | 	mov	result1, objptr
1e760     1B FA 25 F4 | 	bith	result1, #27
1e764     44 00 00 FF 
1e768     0C E5 05 F1 | 	add	objptr, ##35084
1e76c     F2 FA 61 FC | 	wrlong	result1, objptr
1e770     44 00 00 FF 
1e774     0C E5 85 F1 | 	sub	objptr, ##35084
1e778     F2 FA 01 F6 | 	mov	result1, objptr
1e77c     00 08 04 FF 
1e780     00 FA 45 F5 | 	or	result1, ##135266304
1e784     44 00 00 FF 
1e788     10 E5 05 F1 | 	add	objptr, ##35088
1e78c     F2 FA 61 FC | 	wrlong	result1, objptr
1e790     44 00 00 FF 
1e794     10 E5 85 F1 | 	sub	objptr, ##35088
1e798     F2 FA 01 F6 | 	mov	result1, objptr
1e79c     00 10 04 FF 
1e7a0     00 FA 45 F5 | 	or	result1, ##136314880
1e7a4     44 00 00 FF 
1e7a8     14 E5 05 F1 | 	add	objptr, ##35092
1e7ac     F2 FA 61 FC | 	wrlong	result1, objptr
1e7b0     44 00 00 FF 
1e7b4     14 E5 85 F1 | 	sub	objptr, ##35092
1e7b8     F2 FA 01 F6 | 	mov	result1, objptr
1e7bc     00 18 04 FF 
1e7c0     00 FA 45 F5 | 	or	result1, ##137363456
1e7c4     44 00 00 FF 
1e7c8     1C E5 05 F1 | 	add	objptr, ##35100
1e7cc     F2 FA 61 FC | 	wrlong	result1, objptr
1e7d0     44 00 00 FF 
1e7d4     1C E5 85 F1 | 	sub	objptr, ##35100
1e7d8     F2 FA 01 F6 | 	mov	result1, objptr
1e7dc     00 20 04 FF 
1e7e0     00 FA 45 F5 | 	or	result1, ##138412032
1e7e4     44 00 00 FF 
1e7e8     20 E5 05 F1 | 	add	objptr, ##35104
1e7ec     F2 FA 61 FC | 	wrlong	result1, objptr
1e7f0     44 00 00 FF 
1e7f4     20 E5 85 F1 | 	sub	objptr, ##35104
1e7f8     F2 FA 01 F6 | 	mov	result1, objptr
1e7fc     00 28 04 FF 
1e800     00 FA 45 F5 | 	or	result1, ##139460608
1e804     44 00 00 FF 
1e808     24 E5 05 F1 | 	add	objptr, ##35108
1e80c     F2 FA 61 FC | 	wrlong	result1, objptr
1e810     44 00 00 FF 
1e814     24 E5 85 F1 | 	sub	objptr, ##35108
1e818     F2 FA 01 F6 | 	mov	result1, objptr
1e81c     00 30 04 FF 
1e820     00 FA 45 F5 | 	or	result1, ##140509184
1e824     44 00 00 FF 
1e828     18 E5 05 F1 | 	add	objptr, ##35096
1e82c     F2 FA 61 FC | 	wrlong	result1, objptr
1e830     44 00 00 FF 
1e834     18 E5 85 F1 | 	sub	objptr, ##35096
1e838     F2 FA 01 F6 | 	mov	result1, objptr
1e83c     00 38 04 FF 
1e840     00 FA 45 F5 | 	or	result1, ##141557760
1e844     44 00 00 FF 
1e848     28 E5 05 F1 | 	add	objptr, ##35112
1e84c     F2 FA 61 FC | 	wrlong	result1, objptr
1e850     44 00 00 FF 
1e854     28 E5 85 F1 | 	sub	objptr, ##35112
1e858     F2 FA 01 F6 | 	mov	result1, objptr
1e85c     00 40 04 FF 
1e860     00 FA 45 F5 | 	or	result1, ##142606336
1e864     44 00 00 FF 
1e868     5C E5 05 F1 | 	add	objptr, ##35164
1e86c     F2 FA 61 FC | 	wrlong	result1, objptr
1e870     44 00 00 FF 
1e874     5C E5 85 F1 | 	sub	objptr, ##35164
1e878     F2 FA 01 F6 | 	mov	result1, objptr
1e87c     00 48 04 FF 
1e880     00 FA 45 F5 | 	or	result1, ##143654912
1e884     44 00 00 FF 
1e888     54 E5 05 F1 | 	add	objptr, ##35156
1e88c     F2 FA 61 FC | 	wrlong	result1, objptr
1e890     44 00 00 FF 
1e894     54 E5 85 F1 | 	sub	objptr, ##35156
1e898     F2 FA 01 F6 | 	mov	result1, objptr
1e89c     00 50 04 FF 
1e8a0     00 FA 45 F5 | 	or	result1, ##144703488
1e8a4     44 00 00 FF 
1e8a8     2C E5 05 F1 | 	add	objptr, ##35116
1e8ac     F2 FA 61 FC | 	wrlong	result1, objptr
1e8b0     44 00 00 FF 
1e8b4     2C E5 85 F1 | 	sub	objptr, ##35116
1e8b8     F2 FA 01 F6 | 	mov	result1, objptr
1e8bc     00 58 04 FF 
1e8c0     00 FA 45 F5 | 	or	result1, ##145752064
1e8c4     44 00 00 FF 
1e8c8     30 E5 05 F1 | 	add	objptr, ##35120
1e8cc     F2 FA 61 FC | 	wrlong	result1, objptr
1e8d0     44 00 00 FF 
1e8d4     30 E5 85 F1 | 	sub	objptr, ##35120
1e8d8     F2 FA 01 F6 | 	mov	result1, objptr
1e8dc     00 60 04 FF 
1e8e0     00 FA 45 F5 | 	or	result1, ##146800640
1e8e4     44 00 00 FF 
1e8e8     4C E5 05 F1 | 	add	objptr, ##35148
1e8ec     F2 FA 61 FC | 	wrlong	result1, objptr
1e8f0     44 00 00 FF 
1e8f4     4C E5 85 F1 | 	sub	objptr, ##35148
1e8f8     F2 FA 01 F6 | 	mov	result1, objptr
1e8fc     00 68 04 FF 
1e900     00 FA 45 F5 | 	or	result1, ##147849216
1e904     44 00 00 FF 
1e908     50 E5 05 F1 | 	add	objptr, ##35152
1e90c     F2 FA 61 FC | 	wrlong	result1, objptr
1e910     44 00 00 FF 
1e914     50 E5 85 F1 | 	sub	objptr, ##35152
1e918     F2 FA 01 F6 | 	mov	result1, objptr
1e91c     00 70 04 FF 
1e920     00 FA 45 F5 | 	or	result1, ##148897792
1e924     44 00 00 FF 
1e928     6C E5 05 F1 | 	add	objptr, ##35180
1e92c     F2 FA 61 FC | 	wrlong	result1, objptr
1e930     44 00 00 FF 
1e934     6C E5 85 F1 | 	sub	objptr, ##35180
1e938     F2 FA 01 F6 | 	mov	result1, objptr
1e93c     00 78 04 FF 
1e940     00 FA 45 F5 | 	or	result1, ##149946368
1e944     44 00 00 FF 
1e948     68 E5 05 F1 | 	add	objptr, ##35176
1e94c     F2 FA 61 FC | 	wrlong	result1, objptr
1e950     44 00 00 FF 
1e954     68 E5 85 F1 | 	sub	objptr, ##35176
1e958     F2 FA 01 F6 | 	mov	result1, objptr
1e95c     00 80 04 FF 
1e960     00 FA 45 F5 | 	or	result1, ##150994944
1e964     44 00 00 FF 
1e968     78 E5 05 F1 | 	add	objptr, ##35192
1e96c     F2 FA 61 FC | 	wrlong	result1, objptr
1e970     44 00 00 FF 
1e974     78 E5 85 F1 | 	sub	objptr, ##35192
1e978     F2 FA 01 F6 | 	mov	result1, objptr
1e97c     00 88 04 FF 
1e980     00 FA 45 F5 | 	or	result1, ##152043520
1e984     44 00 00 FF 
1e988     44 E5 05 F1 | 	add	objptr, ##35140
1e98c     F2 FA 61 FC | 	wrlong	result1, objptr
1e990     44 00 00 FF 
1e994     44 E5 85 F1 | 	sub	objptr, ##35140
1e998     F2 FA 01 F6 | 	mov	result1, objptr
1e99c     00 90 04 FF 
1e9a0     00 FA 45 F5 | 	or	result1, ##153092096
1e9a4     44 00 00 FF 
1e9a8     74 E5 05 F1 | 	add	objptr, ##35188
1e9ac     F2 FA 61 FC | 	wrlong	result1, objptr
1e9b0     44 00 00 FF 
1e9b4     74 E5 85 F1 | 	sub	objptr, ##35188
1e9b8     F2 FA 01 F6 | 	mov	result1, objptr
1e9bc     00 98 04 FF 
1e9c0     00 FA 45 F5 | 	or	result1, ##154140672
1e9c4     44 00 00 FF 
1e9c8     64 E5 05 F1 | 	add	objptr, ##35172
1e9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1e9d0     44 00 00 FF 
1e9d4     64 E5 85 F1 | 	sub	objptr, ##35172
1e9d8     F2 FA 01 F6 | 	mov	result1, objptr
1e9dc     00 A0 04 FF 
1e9e0     00 FA 45 F5 | 	or	result1, ##155189248
1e9e4     43 00 00 FF 
1e9e8     14 E5 05 F1 | 	add	objptr, ##34580
1e9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1e9f0     43 00 00 FF 
1e9f4     14 E5 85 F1 | 	sub	objptr, ##34580
1e9f8     F2 FA 01 F6 | 	mov	result1, objptr
1e9fc     00 A8 04 FF 
1ea00     00 FA 45 F5 | 	or	result1, ##156237824
1ea04     44 00 00 FF 
1ea08     34 E5 05 F1 | 	add	objptr, ##35124
1ea0c     F2 FA 61 FC | 	wrlong	result1, objptr
1ea10     44 00 00 FF 
1ea14     34 E5 85 F1 | 	sub	objptr, ##35124
1ea18                 | _init_commands_ret
1ea18     2D 00 64 FD | 	ret
1ea1c                 | 
1ea1c                 | ' 
1ea1c                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1ea1c                 | ' 
1ea1c                 | ' sub init_audio
1ea1c                 | _init_audio
1ea1c     06 4A 05 F6 | 	mov	COUNT_, #6
1ea20     A8 00 A0 FD | 	call	#pushregs_
1ea24     00 C0 1F FF 
1ea28     00 26 06 F6 | 	mov	local01, ##1065353216
1ea2c                 | ' 
1ea2c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1ea2c     00 28 06 F6 | 	mov	local02, #0
1ea30                 | LR__2400
1ea30     14 2B 02 F6 | 	mov	local03, local02
1ea34     01 2A 66 F0 | 	shl	local03, #1
1ea38     58 7F 23 FF 
1ea3c     00 2C 06 F6 | 	mov	local04, ##1191096320
1ea40     14 13 52 F6 | 	abs	arg01, local02 wc
1ea44     1F 2E C6 C9 |  if_b	decod	local05, #31
1ea48     00 2E 06 36 |  if_ae	mov	local05, #0
1ea4c     B8 6F B0 FD | 	call	#__system___float_fromuns
1ea50     17 FB 61 F5 | 	xor	result1, local05
1ea54     FD 12 02 F6 | 	mov	arg01, result1
1ea58     87 24 20 FF 
1ea5c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1ea60     A8 73 B0 FD | 	call	#__system___float_mul
1ea64     FD 12 02 F6 | 	mov	arg01, result1
1ea68     00 00 22 FF 
1ea6c     00 14 06 F6 | 	mov	arg02, ##1140850688
1ea70     9C 75 B0 FD | 	call	#__system___float_div
1ea74     FD 12 02 F6 | 	mov	arg01, result1
1ea78     F0 7C B0 FD | 	call	#__system____builtin_sinf
1ea7c     FD 14 02 F6 | 	mov	arg02, result1
1ea80     16 13 02 F6 | 	mov	arg01, local04
1ea84     84 73 B0 FD | 	call	#__system___float_mul
1ea88     FD 12 02 F6 | 	mov	arg01, result1
1ea8c     01 14 06 F6 | 	mov	arg02, #1
1ea90     40 78 B0 FD | 	call	#__system___float_tointeger
1ea94     FD 14 02 F6 | 	mov	arg02, result1
1ea98     15 13 02 F6 | 	mov	arg01, local03
1ea9c     38 0D B0 FD | 	call	#_psdpoke
1eaa0     01 28 06 F1 | 	add	local02, #1
1eaa4     02 00 00 FF 
1eaa8     00 28 56 F2 | 	cmps	local02, ##1024 wc
1eaac     80 FF 9F CD |  if_b	jmp	#LR__2400
1eab0                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1eab0     00 28 06 F6 | 	mov	local02, #0
1eab4                 | LR__2401
1eab4     14 15 02 F6 | 	mov	arg02, local02
1eab8     01 14 66 F0 | 	shl	arg02, #1
1eabc     0B 12 C6 F9 | 	decod	arg01, #11
1eac0     0A 13 02 F1 | 	add	arg01, arg02
1eac4     14 2D 02 F6 | 	mov	local04, local02
1eac8     07 2C 66 F0 | 	shl	local04, #7
1eacc     14 2D 82 F1 | 	sub	local04, local02
1ead0     C0 FF 7F FF 
1ead4     00 15 06 F6 | 	mov	arg02, ##-32512
1ead8     16 15 02 F1 | 	add	arg02, local04
1eadc     F8 0C B0 FD | 	call	#_psdpoke
1eae0     09 2C C6 F9 | 	decod	local04, #9
1eae4     14 2D 02 F1 | 	add	local04, local02
1eae8     01 2C 66 F0 | 	shl	local04, #1
1eaec     0B 12 C6 F9 | 	decod	arg01, #11
1eaf0     16 13 02 F1 | 	add	arg01, local04
1eaf4     14 2F 02 F6 | 	mov	local05, local02
1eaf8     07 2E 66 F0 | 	shl	local05, #7
1eafc     14 2F 82 F1 | 	sub	local05, local02
1eb00     3F 00 00 FF 
1eb04     00 15 06 F6 | 	mov	arg02, ##32512
1eb08     17 15 82 F1 | 	sub	arg02, local05
1eb0c     C8 0C B0 FD | 	call	#_psdpoke
1eb10     01 28 06 F1 | 	add	local02, #1
1eb14     01 00 00 FF 
1eb18     00 28 56 F2 | 	cmps	local02, ##512 wc
1eb1c     94 FF 9F CD |  if_b	jmp	#LR__2401
1eb20                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1eb20     00 28 06 F6 | 	mov	local02, #0
1eb24                 | LR__2402
1eb24     14 2F 02 F6 | 	mov	local05, local02
1eb28     01 2E 66 F0 | 	shl	local05, #1
1eb2c     0C 12 C6 F9 | 	decod	arg01, #12
1eb30     17 13 02 F1 | 	add	arg01, local05
1eb34     14 2F 02 F6 | 	mov	local05, local02
1eb38     06 2E 66 F0 | 	shl	local05, #6
1eb3c     14 2F 82 F1 | 	sub	local05, local02
1eb40     C1 FF 7F FF 
1eb44     00 14 06 F6 | 	mov	arg02, ##-32256
1eb48     17 15 02 F1 | 	add	arg02, local05
1eb4c     88 0C B0 FD | 	call	#_psdpoke
1eb50     01 28 06 F1 | 	add	local02, #1
1eb54     02 00 00 FF 
1eb58     00 28 56 F2 | 	cmps	local02, ##1024 wc
1eb5c     C4 FF 9F CD |  if_b	jmp	#LR__2402
1eb60                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1eb60     00 28 06 F6 | 	mov	local02, #0
1eb64                 | LR__2403
1eb64     14 2F 02 F6 | 	mov	local05, local02
1eb68     01 2E 66 F0 | 	shl	local05, #1
1eb6c     0C 00 00 FF 
1eb70     00 12 06 F6 | 	mov	arg01, ##6144
1eb74     17 13 02 F1 | 	add	arg01, local05
1eb78     C0 FF 7F FF 
1eb7c     A8 14 06 F6 | 	mov	arg02, ##-32600
1eb80     54 0C B0 FD | 	call	#_psdpoke
1eb84     01 28 06 F1 | 	add	local02, #1
1eb88     80 28 56 F2 | 	cmps	local02, #128 wc
1eb8c     D4 FF 9F CD |  if_b	jmp	#LR__2403
1eb90     80 28 06 F6 | 	mov	local02, #128
1eb94                 | LR__2404
1eb94     14 2F 02 F6 | 	mov	local05, local02
1eb98     01 2E 66 F0 | 	shl	local05, #1
1eb9c     0C 00 00 FF 
1eba0     00 12 06 F6 | 	mov	arg01, ##6144
1eba4     17 13 02 F1 | 	add	arg01, local05
1eba8     3F 00 00 FF 
1ebac     58 15 06 F6 | 	mov	arg02, ##32600
1ebb0     24 0C B0 FD | 	call	#_psdpoke
1ebb4     01 28 06 F1 | 	add	local02, #1
1ebb8     02 00 00 FF 
1ebbc     00 28 16 F2 | 	cmp	local02, ##1024 wc
1ebc0     D0 FF 9F CD |  if_b	jmp	#LR__2404
1ebc4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1ebc4     00 28 06 F6 | 	mov	local02, #0
1ebc8                 | LR__2405
1ebc8     14 2F 02 F6 | 	mov	local05, local02
1ebcc     01 2E 66 F0 | 	shl	local05, #1
1ebd0     0D 12 C6 F9 | 	decod	arg01, #13
1ebd4     17 13 02 F1 | 	add	arg01, local05
1ebd8     C0 FF 7F FF 
1ebdc     A8 14 06 F6 | 	mov	arg02, ##-32600
1ebe0     F4 0B B0 FD | 	call	#_psdpoke
1ebe4     01 28 06 F1 | 	add	local02, #1
1ebe8     01 00 00 FF 
1ebec     00 28 56 F2 | 	cmps	local02, ##512 wc
1ebf0     D4 FF 9F CD |  if_b	jmp	#LR__2405
1ebf4     09 28 C6 F9 | 	decod	local02, #9
1ebf8                 | LR__2406
1ebf8     14 2F 02 F6 | 	mov	local05, local02
1ebfc     01 2E 66 F0 | 	shl	local05, #1
1ec00     0D 12 C6 F9 | 	decod	arg01, #13
1ec04     17 13 02 F1 | 	add	arg01, local05
1ec08     3F 00 00 FF 
1ec0c     58 15 06 F6 | 	mov	arg02, ##32600
1ec10     C4 0B B0 FD | 	call	#_psdpoke
1ec14     01 28 06 F1 | 	add	local02, #1
1ec18     02 00 00 FF 
1ec1c     00 28 16 F2 | 	cmp	local02, ##1024 wc
1ec20     D4 FF 9F CD |  if_b	jmp	#LR__2406
1ec24                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1ec24     00 28 06 F6 | 	mov	local02, #0
1ec28                 | LR__2407
1ec28     14 2F 02 F6 | 	mov	local05, local02
1ec2c     01 2E 66 F0 | 	shl	local05, #1
1ec30     14 00 00 FF 
1ec34     00 12 06 F6 | 	mov	arg01, ##10240
1ec38     17 13 02 F1 | 	add	arg01, local05
1ec3c     C0 FF 7F FF 
1ec40     A8 14 06 F6 | 	mov	arg02, ##-32600
1ec44     90 0B B0 FD | 	call	#_psdpoke
1ec48     01 28 06 F1 | 	add	local02, #1
1ec4c     00 29 56 F2 | 	cmps	local02, #256 wc
1ec50     D4 FF 9F CD |  if_b	jmp	#LR__2407
1ec54     00 29 06 F6 | 	mov	local02, #256
1ec58                 | LR__2408
1ec58     14 2F 02 F6 | 	mov	local05, local02
1ec5c     01 2E 66 F0 | 	shl	local05, #1
1ec60     14 00 00 FF 
1ec64     00 12 06 F6 | 	mov	arg01, ##10240
1ec68     17 13 02 F1 | 	add	arg01, local05
1ec6c     3F 00 00 FF 
1ec70     58 15 06 F6 | 	mov	arg02, ##32600
1ec74     60 0B B0 FD | 	call	#_psdpoke
1ec78     01 28 06 F1 | 	add	local02, #1
1ec7c     02 00 00 FF 
1ec80     00 28 16 F2 | 	cmp	local02, ##1024 wc
1ec84     D0 FF 9F CD |  if_b	jmp	#LR__2408
1ec88                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1ec88     18 00 00 FF 
1ec8c     00 28 06 F6 | 	mov	local02, ##12288
1ec90                 | LR__2409
1ec90     14 13 02 F6 | 	mov	arg01, local02
1ec94     00 14 06 F6 | 	mov	arg02, #0
1ec98     F4 0A B0 FD | 	call	#_pslpoke
1ec9c     04 28 06 F1 | 	add	local02, #4
1eca0     77 00 00 FF 
1eca4     FD 29 56 F2 | 	cmps	local02, ##61437 wc
1eca8     E4 FF 9F CD |  if_b	jmp	#LR__2409
1ecac                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1ecac     00 28 06 F6 | 	mov	local02, #0
1ecb0                 | LR__2410
1ecb0     14 2F 02 F6 | 	mov	local05, local02
1ecb4     01 2E 66 F0 | 	shl	local05, #1
1ecb8     78 00 00 FF 
1ecbc     00 2A 06 F6 | 	mov	local03, ##61440
1ecc0     17 2B 02 F1 | 	add	local03, local05
1ecc4     12 00 00 FF 
1ecc8     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1eccc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1ecd0     12 00 00 FF 
1ecd4     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1ecd8     10 12 06 F1 | 	add	arg01, #16
1ecdc     14 15 02 F6 | 	mov	arg02, local02
1ece0     01 14 66 F0 | 	shl	arg02, #1
1ece4     0A 13 02 F1 | 	add	arg01, arg02
1ece8     09 15 E2 FA | 	rdword	arg02, arg01
1ecec     15 13 02 F6 | 	mov	arg01, local03
1ecf0     E4 0A B0 FD | 	call	#_psdpoke
1ecf4     01 28 06 F1 | 	add	local02, #1
1ecf8     02 00 00 FF 
1ecfc     00 28 56 F2 | 	cmps	local02, ##1024 wc
1ed00     AC FF 9F CD |  if_b	jmp	#LR__2410
1ed04                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1ed04     00 28 06 F6 | 	mov	local02, #0
1ed08                 | LR__2411
1ed08     14 2F 02 F6 | 	mov	local05, local02
1ed0c     01 2E 66 F0 | 	shl	local05, #1
1ed10     7C 00 00 FF 
1ed14     00 2A 06 F6 | 	mov	local03, ##63488
1ed18     17 2B 02 F1 | 	add	local03, local05
1ed1c     0E 00 00 FF 
1ed20     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1ed24     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1ed28     0E 00 00 FF 
1ed2c     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1ed30     10 12 06 F1 | 	add	arg01, #16
1ed34     14 15 02 F6 | 	mov	arg02, local02
1ed38     01 14 66 F0 | 	shl	arg02, #1
1ed3c     0A 13 02 F1 | 	add	arg01, arg02
1ed40     09 15 E2 FA | 	rdword	arg02, arg01
1ed44     15 13 02 F6 | 	mov	arg01, local03
1ed48     8C 0A B0 FD | 	call	#_psdpoke
1ed4c     01 28 06 F1 | 	add	local02, #1
1ed50     02 00 00 FF 
1ed54     00 28 56 F2 | 	cmps	local02, ##1024 wc
1ed58     AC FF 9F CD |  if_b	jmp	#LR__2411
1ed5c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1ed5c     00 28 06 F6 | 	mov	local02, #0
1ed60     0C 00 00 FF 
1ed64     D8 E4 05 F1 | 	add	objptr, ##6360
1ed68     97 18 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1ed6c                 | LR__2412
1ed6c     14 2F 02 F6 | 	mov	local05, local02
1ed70     01 2E 66 F0 | 	shl	local05, #1
1ed74     F2 2E 02 F1 | 	add	local05, objptr
1ed78     14 2B 02 F6 | 	mov	local03, local02
1ed7c     08 2A 66 F0 | 	shl	local03, #8
1ed80     7F 00 00 FF 
1ed84     00 31 06 F6 | 	mov	local06, ##65280
1ed88     15 31 82 F1 | 	sub	local06, local03
1ed8c     17 31 52 FC | 	wrword	local06, local05
1ed90     01 28 06 F1 | 	add	local02, #1
1ed94     00 29 56 F2 | 	cmps	local02, #256 wc
1ed98     D0 FF 9F CD |  if_b	jmp	#LR__2412
1ed9c                 | LR__2413
1ed9c     0C 00 00 FF 
1eda0     D8 E4 85 F1 | 	sub	objptr, ##6360
1eda4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1eda4     00 28 06 F6 | 	mov	local02, #0
1eda8                 | LR__2414
1eda8     14 2F 02 F6 | 	mov	local05, local02
1edac     01 2E 66 F0 | 	shl	local05, #1
1edb0     0D 00 00 FF 
1edb4     D8 E4 05 F1 | 	add	objptr, ##6872
1edb8     F2 2E 02 F1 | 	add	local05, objptr
1edbc     80 BF 23 FF 
1edc0     00 12 06 F6 | 	mov	arg01, ##1199505408
1edc4     13 15 02 F6 | 	mov	arg02, local01
1edc8     0D 00 00 FF 
1edcc     D8 E4 85 F1 | 	sub	objptr, ##6872
1edd0     38 70 B0 FD | 	call	#__system___float_mul
1edd4     FD 12 02 F6 | 	mov	arg01, result1
1edd8     01 14 06 F6 | 	mov	arg02, #1
1eddc     F4 74 B0 FD | 	call	#__system___float_tointeger
1ede0     17 FB 51 FC | 	wrword	result1, local05
1ede4     13 13 02 F6 | 	mov	arg01, local01
1ede8     CC BC 1F FF 
1edec     9A 15 06 F6 | 	mov	arg02, ##1064933786
1edf0     18 70 B0 FD | 	call	#__system___float_mul
1edf4     FD 26 02 F6 | 	mov	local01, result1
1edf8     01 28 06 F1 | 	add	local02, #1
1edfc     00 29 56 F2 | 	cmps	local02, #256 wc
1ee00     A4 FF 9F CD |  if_b	jmp	#LR__2414
1ee04     0E 00 00 FF 
1ee08     D6 E4 05 F1 | 	add	objptr, ##7382
1ee0c     F2 00 58 FC | 	wrword	#0, objptr
1ee10                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1ee10     00 28 06 F6 | 	mov	local02, #0
1ee14     02 E4 05 F1 | 	add	objptr, #2
1ee18     97 10 48 FB | 	callpa	#(@LR__2416-@LR__2415)>>2,fcache_load_ptr_
1ee1c                 | LR__2415
1ee1c     14 2F 02 F6 | 	mov	local05, local02
1ee20     01 2E 66 F0 | 	shl	local05, #1
1ee24     F2 2E 02 F1 | 	add	local05, objptr
1ee28     7F 00 80 FF 
1ee2c     17 01 5A FC | 	wrword	##65280, local05
1ee30     01 28 06 F1 | 	add	local02, #1
1ee34     FF 28 56 F2 | 	cmps	local02, #255 wc
1ee38     E0 FF 9F CD |  if_b	jmp	#LR__2415
1ee3c                 | LR__2416
1ee3c     FE E5 05 F1 | 	add	objptr, #510
1ee40     F2 00 58 FC | 	wrword	#0, objptr
1ee44                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1ee44     00 28 06 F6 | 	mov	local02, #0
1ee48     02 E4 05 F1 | 	add	objptr, #2
1ee4c     97 52 48 FB | 	callpa	#(@LR__2421-@LR__2417)>>2,fcache_load_ptr_
1ee50                 | LR__2417
1ee50     14 2F 02 F6 | 	mov	local05, local02
1ee54     01 2E 66 F0 | 	shl	local05, #1
1ee58     F2 2E 02 F1 | 	add	local05, objptr
1ee5c     14 31 02 F6 | 	mov	local06, local02
1ee60     0C 30 66 F0 | 	shl	local06, #12
1ee64     17 31 52 FC | 	wrword	local06, local05
1ee68     01 28 06 F1 | 	add	local02, #1
1ee6c     10 28 56 F2 | 	cmps	local02, #16 wc
1ee70     DC FF 9F CD |  if_b	jmp	#LR__2417
1ee74                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1ee74     10 28 06 F6 | 	mov	local02, #16
1ee78                 | LR__2418
1ee78     14 2F 02 F6 | 	mov	local05, local02
1ee7c     01 2E 66 F0 | 	shl	local05, #1
1ee80     F2 2E 02 F1 | 	add	local05, objptr
1ee84     7F 00 80 FF 
1ee88     17 01 5A FC | 	wrword	##65280, local05
1ee8c     01 28 06 F1 | 	add	local02, #1
1ee90     F0 28 16 F2 | 	cmp	local02, #240 wc
1ee94     E0 FF 9F CD |  if_b	jmp	#LR__2418
1ee98                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1ee98     F0 28 06 F6 | 	mov	local02, #240
1ee9c                 | LR__2419
1ee9c     14 2F 02 F6 | 	mov	local05, local02
1eea0     01 2E 66 F0 | 	shl	local05, #1
1eea4     F2 2E 02 F1 | 	add	local05, objptr
1eea8     FF 2A 06 F6 | 	mov	local03, #255
1eeac     14 2B 82 F1 | 	sub	local03, local02
1eeb0     0C 2A 66 F0 | 	shl	local03, #12
1eeb4     17 2B 52 FC | 	wrword	local03, local05
1eeb8     01 28 06 F1 | 	add	local02, #1
1eebc     00 29 16 F2 | 	cmp	local02, #256 wc
1eec0     D8 FF 9F CD |  if_b	jmp	#LR__2419
1eec4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1eec4     00 28 06 F6 | 	mov	local02, #0
1eec8     01 00 00 FF 
1eecc     00 E4 05 F1 | 	add	objptr, ##512
1eed0                 | LR__2420
1eed0     14 2F 02 F6 | 	mov	local05, local02
1eed4     01 2E 66 F0 | 	shl	local05, #1
1eed8     F2 2E 02 F1 | 	add	local05, objptr
1eedc     14 31 02 F6 | 	mov	local06, local02
1eee0     08 30 66 F0 | 	shl	local06, #8
1eee4     17 31 52 FC | 	wrword	local06, local05
1eee8     01 28 06 F1 | 	add	local02, #1
1eeec     00 29 56 F2 | 	cmps	local02, #256 wc
1eef0     DC FF 9F CD |  if_b	jmp	#LR__2420
1eef4                 | LR__2421
1eef4     FE E5 05 F1 | 	add	objptr, #510
1eef8     F2 00 58 FC | 	wrword	#0, objptr
1eefc                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1eefc     00 28 06 F6 | 	mov	local02, #0
1ef00     02 E4 05 F1 | 	add	objptr, #2
1ef04     97 6A 48 FB | 	callpa	#(@LR__2426-@LR__2422)>>2,fcache_load_ptr_
1ef08                 | LR__2422
1ef08     14 2F 02 F6 | 	mov	local05, local02
1ef0c     01 2E 66 F0 | 	shl	local05, #1
1ef10     F2 2E 02 F1 | 	add	local05, objptr
1ef14     14 31 02 F6 | 	mov	local06, local02
1ef18     04 30 66 F0 | 	shl	local06, #4
1ef1c     14 31 02 F1 | 	add	local06, local02
1ef20     04 30 66 F0 | 	shl	local06, #4
1ef24     17 31 52 FC | 	wrword	local06, local05
1ef28     01 28 06 F1 | 	add	local02, #1
1ef2c     F0 28 56 F2 | 	cmps	local02, #240 wc
1ef30     D4 FF 9F CD |  if_b	jmp	#LR__2422
1ef34     F0 28 06 F6 | 	mov	local02, #240
1ef38                 | LR__2423
1ef38     14 2F 02 F6 | 	mov	local05, local02
1ef3c     01 2E 66 F0 | 	shl	local05, #1
1ef40     F2 2E 02 F1 | 	add	local05, objptr
1ef44     FF 2A 06 F6 | 	mov	local03, #255
1ef48     14 2B 82 F1 | 	sub	local03, local02
1ef4c     0C 2A 66 F0 | 	shl	local03, #12
1ef50     17 2B 52 FC | 	wrword	local03, local05
1ef54     01 28 06 F1 | 	add	local02, #1
1ef58     00 29 16 F2 | 	cmp	local02, #256 wc
1ef5c     D8 FF 9F CD |  if_b	jmp	#LR__2423
1ef60                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1ef60     00 28 06 F6 | 	mov	local02, #0
1ef64     01 00 00 FF 
1ef68     00 E4 05 F1 | 	add	objptr, ##512
1ef6c                 | LR__2424
1ef6c     14 2F 02 F6 | 	mov	local05, local02
1ef70     01 2E 66 F0 | 	shl	local05, #1
1ef74     F2 2E 02 F1 | 	add	local05, objptr
1ef78     14 31 02 F6 | 	mov	local06, local02
1ef7c     09 30 66 F0 | 	shl	local06, #9
1ef80     17 31 52 FC | 	wrword	local06, local05
1ef84     FF 2E 06 F6 | 	mov	local05, #255
1ef88     14 2F 82 F1 | 	sub	local05, local02
1ef8c     01 2E 66 F0 | 	shl	local05, #1
1ef90     F2 2E 02 F1 | 	add	local05, objptr
1ef94     14 31 02 F6 | 	mov	local06, local02
1ef98     09 30 66 F0 | 	shl	local06, #9
1ef9c     17 31 52 FC | 	wrword	local06, local05
1efa0     01 28 06 F1 | 	add	local02, #1
1efa4     80 28 56 F2 | 	cmps	local02, #128 wc
1efa8     C0 FF 9F CD |  if_b	jmp	#LR__2424
1efac                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1efac     00 28 06 F6 | 	mov	local02, #0
1efb0     01 00 00 FF 
1efb4     00 E4 05 F1 | 	add	objptr, ##512
1efb8                 | LR__2425
1efb8     14 2F 02 F6 | 	mov	local05, local02
1efbc     01 2E 66 F0 | 	shl	local05, #1
1efc0     F2 2E 02 F1 | 	add	local05, objptr
1efc4     14 31 02 F6 | 	mov	local06, local02
1efc8     0D 30 66 F0 | 	shl	local06, #13
1efcc     17 31 52 FC | 	wrword	local06, local05
1efd0     01 28 06 F1 | 	add	local02, #1
1efd4     08 28 56 F2 | 	cmps	local02, #8 wc
1efd8     DC FF 9F CD |  if_b	jmp	#LR__2425
1efdc                 | LR__2426
1efdc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1efdc     08 28 06 F6 | 	mov	local02, #8
1efe0     97 42 48 FB | 	callpa	#(@LR__2430-@LR__2427)>>2,fcache_load_ptr_
1efe4                 | LR__2427
1efe4     14 2F 02 F6 | 	mov	local05, local02
1efe8     01 2E 66 F0 | 	shl	local05, #1
1efec     F2 2E 02 F1 | 	add	local05, objptr
1eff0     14 27 02 F6 | 	mov	local01, local02
1eff4     08 26 86 F1 | 	sub	local01, #8
1eff8     0B 26 66 F0 | 	shl	local01, #11
1effc     7F 00 00 FF 
1f000     00 31 06 F6 | 	mov	local06, ##65280
1f004     13 31 82 F1 | 	sub	local06, local01
1f008     17 31 52 FC | 	wrword	local06, local05
1f00c     01 28 06 F1 | 	add	local02, #1
1f010     18 28 16 F2 | 	cmp	local02, #24 wc
1f014     CC FF 9F CD |  if_b	jmp	#LR__2427
1f018                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1f018     18 28 06 F6 | 	mov	local02, #24
1f01c                 | LR__2428
1f01c     14 2F 02 F6 | 	mov	local05, local02
1f020     01 2E 66 F0 | 	shl	local05, #1
1f024     F2 2E 02 F1 | 	add	local05, objptr
1f028     40 00 80 FF 
1f02c     17 01 58 FC | 	wrword	##32768, local05
1f030     01 28 06 F1 | 	add	local02, #1
1f034     81 28 16 F2 | 	cmp	local02, #129 wc
1f038     E0 FF 9F CD |  if_b	jmp	#LR__2428
1f03c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1f03c     81 28 06 F6 | 	mov	local02, #129
1f040                 | LR__2429
1f040     14 2F 02 F6 | 	mov	local05, local02
1f044     01 2E 66 F0 | 	shl	local05, #1
1f048     F2 2E 02 F1 | 	add	local05, objptr
1f04c     FF 2A 06 F6 | 	mov	local03, #255
1f050     14 2B 82 F1 | 	sub	local03, local02
1f054     08 2A 66 F0 | 	shl	local03, #8
1f058     17 2B 52 FC | 	wrword	local03, local05
1f05c     01 28 06 F1 | 	add	local02, #1
1f060     00 29 16 F2 | 	cmp	local02, #256 wc
1f064     D8 FF 9F CD |  if_b	jmp	#LR__2429
1f068                 | LR__2430
1f068     3E 00 00 FF 
1f06c     FE E4 05 F1 | 	add	objptr, ##31998
1f070     F2 00 59 FC | 	wrword	#128, objptr
1f074     51 00 00 FF 
1f078     D6 E5 85 F1 | 	sub	objptr, ##41942
1f07c                 | ' for i=0 to 7
1f07c     00 28 06 F6 | 	mov	local02, #0
1f080     97 8E 48 FB | 	callpa	#(@LR__2432-@LR__2431)>>2,fcache_load_ptr_
1f084                 | LR__2431
1f084     14 2F 02 F6 | 	mov	local05, local02
1f088     01 2E 66 F0 | 	shl	local05, #1
1f08c     14 2F 02 F1 | 	add	local05, local02
1f090     03 2E 66 F0 | 	shl	local05, #3
1f094     14 00 00 FF 
1f098     38 E5 05 F1 | 	add	objptr, ##10552
1f09c     F2 2E 02 F1 | 	add	local05, objptr
1f0a0     00 EE A1 FF 
1f0a4     17 01 68 FC | 	wrlong	##1138491392, local05
1f0a8     14 2F 02 F6 | 	mov	local05, local02
1f0ac     01 2E 66 F0 | 	shl	local05, #1
1f0b0     14 2F 02 F1 | 	add	local05, local02
1f0b4     03 2E 66 F0 | 	shl	local05, #3
1f0b8     F2 2E 02 F1 | 	add	local05, objptr
1f0bc     04 2E 06 F1 | 	add	local05, #4
1f0c0     17 29 42 FC | 	wrbyte	local02, local05
1f0c4     14 2F 02 F6 | 	mov	local05, local02
1f0c8     01 2E 66 F0 | 	shl	local05, #1
1f0cc     14 2F 02 F1 | 	add	local05, local02
1f0d0     03 2E 66 F0 | 	shl	local05, #3
1f0d4     F2 2E 02 F1 | 	add	local05, objptr
1f0d8     05 2E 06 F1 | 	add	local05, #5
1f0dc     17 29 42 FC | 	wrbyte	local02, local05
1f0e0     14 2F 02 F6 | 	mov	local05, local02
1f0e4     01 2E 66 F0 | 	shl	local05, #1
1f0e8     14 2F 02 F1 | 	add	local05, local02
1f0ec     03 2E 66 F0 | 	shl	local05, #3
1f0f0     F2 2E 02 F1 | 	add	local05, objptr
1f0f4     06 2E 06 F1 | 	add	local05, #6
1f0f8     17 01 58 FC | 	wrword	#0, local05
1f0fc     14 2F 02 F6 | 	mov	local05, local02
1f100     01 2E 66 F0 | 	shl	local05, #1
1f104     14 2F 02 F1 | 	add	local05, local02
1f108     03 2E 66 F0 | 	shl	local05, #3
1f10c     F2 2E 02 F1 | 	add	local05, objptr
1f110     08 2E 06 F1 | 	add	local05, #8
1f114     00 C0 9F FF 
1f118     17 01 68 FC | 	wrlong	##1065353216, local05
1f11c     14 2F 02 F6 | 	mov	local05, local02
1f120     01 2E 66 F0 | 	shl	local05, #1
1f124     14 2F 02 F1 | 	add	local05, local02
1f128     03 2E 66 F0 | 	shl	local05, #3
1f12c     F2 2E 02 F1 | 	add	local05, objptr
1f130     0C 2E 06 F1 | 	add	local05, #12
1f134     00 40 A0 FF 
1f138     17 01 68 FC | 	wrlong	##1082130432, local05
1f13c     14 2F 02 F6 | 	mov	local05, local02
1f140     01 2E 66 F0 | 	shl	local05, #1
1f144     14 2F 02 F1 | 	add	local05, local02
1f148     03 2E 66 F0 | 	shl	local05, #3
1f14c     F2 2E 02 F1 | 	add	local05, objptr
1f150     10 2E 06 F1 | 	add	local05, #16
1f154     17 01 68 FC | 	wrlong	#0, local05
1f158     14 2F 02 F6 | 	mov	local05, local02
1f15c     01 2E 66 F0 | 	shl	local05, #1
1f160     14 2F 02 F1 | 	add	local05, local02
1f164     03 2E 66 F0 | 	shl	local05, #3
1f168     F2 2E 02 F1 | 	add	local05, objptr
1f16c     14 2E 06 F1 | 	add	local05, #20
1f170     17 FF 59 FC | 	wrword	#255, local05
1f174     14 2F 02 F6 | 	mov	local05, local02
1f178     01 2E 66 F0 | 	shl	local05, #1
1f17c     3D 00 00 FF 
1f180     90 E4 05 F1 | 	add	objptr, ##31376
1f184     F2 2E 02 F1 | 	add	local05, objptr
1f188     17 FF 59 FC | 	wrword	#255, local05
1f18c     01 28 06 F1 | 	add	local02, #1
1f190     08 28 56 F2 | 	cmps	local02, #8 wc
1f194     51 00 00 FF 
1f198     C8 E5 85 F1 | 	sub	objptr, ##41928
1f19c     E4 FE 9F CD |  if_b	jmp	#LR__2431
1f1a0                 | LR__2432
1f1a0     00 6E 20 FF 
1f1a4     00 30 06 F6 | 	mov	local06, ##1088159744
1f1a8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1f1a8     03 2E 06 F6 | 	mov	local05, #3
1f1ac                 | LR__2433
1f1ac     18 13 02 F6 | 	mov	arg01, local06
1f1b0     CE C3 1F FF 
1f1b4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1f1b8     50 6C B0 FD | 	call	#__system___float_mul
1f1bc     FD 30 02 F6 | 	mov	local06, result1
1f1c0     FA 2F 6E FB | 	djnz	local05, #LR__2433
1f1c4     00 28 06 F6 | 	mov	local02, #0
1f1c8                 | LR__2434
1f1c8     14 2D 02 F6 | 	mov	local04, local02
1f1cc     02 2C 66 F0 | 	shl	local04, #2
1f1d0     14 00 00 FF 
1f1d4     D8 E4 05 F1 | 	add	objptr, ##10456
1f1d8     F2 2C 02 F1 | 	add	local04, objptr
1f1dc     16 31 62 FC | 	wrlong	local06, local04
1f1e0     18 13 02 F6 | 	mov	arg01, local06
1f1e4     CE C3 1F FF 
1f1e8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1f1ec     14 00 00 FF 
1f1f0     D8 E4 85 F1 | 	sub	objptr, ##10456
1f1f4     14 6C B0 FD | 	call	#__system___float_mul
1f1f8     FD 30 02 F6 | 	mov	local06, result1
1f1fc     01 28 06 F1 | 	add	local02, #1
1f200     0C 28 56 F2 | 	cmps	local02, #12 wc
1f204     C0 FF 9F CD |  if_b	jmp	#LR__2434
1f208     14 00 00 FF 
1f20c     08 E5 05 F1 | 	add	objptr, ##10504
1f210     F2 50 6B FC | 	wrlong	#424, objptr
1f214     04 E4 05 F1 | 	add	objptr, #4
1f218     F2 20 6B FC | 	wrlong	#400, objptr
1f21c     04 E4 05 F1 | 	add	objptr, #4
1f220     F2 F2 6A FC | 	wrlong	#377, objptr
1f224     04 E4 05 F1 | 	add	objptr, #4
1f228     F2 C8 6A FC | 	wrlong	#356, objptr
1f22c     04 E4 05 F1 | 	add	objptr, #4
1f230     F2 A0 6A FC | 	wrlong	#336, objptr
1f234     04 E4 05 F1 | 	add	objptr, #4
1f238     F2 7A 6A FC | 	wrlong	#317, objptr
1f23c     04 E4 05 F1 | 	add	objptr, #4
1f240     F2 58 6A FC | 	wrlong	#300, objptr
1f244     04 E4 05 F1 | 	add	objptr, #4
1f248     F2 36 6A FC | 	wrlong	#283, objptr
1f24c     04 E4 05 F1 | 	add	objptr, #4
1f250     F2 16 6A FC | 	wrlong	#267, objptr
1f254     04 E4 05 F1 | 	add	objptr, #4
1f258     F2 F8 69 FC | 	wrlong	#252, objptr
1f25c     04 E4 05 F1 | 	add	objptr, #4
1f260     F2 DC 69 FC | 	wrlong	#238, objptr
1f264     04 E4 05 F1 | 	add	objptr, #4
1f268     F2 C0 69 FC | 	wrlong	#224, objptr
1f26c     3D 00 00 FF 
1f270     A2 E4 05 F1 | 	add	objptr, ##31394
1f274     F2 00 59 FC | 	wrword	#128, objptr
1f278     02 E4 85 F1 | 	sub	objptr, #2
1f27c     F2 00 59 FC | 	wrword	#128, objptr
1f280     51 00 00 FF 
1f284     D4 E5 85 F1 | 	sub	objptr, ##41940
1f288     A7 F0 03 F6 | 	mov	ptra, fp
1f28c     B2 00 A0 FD | 	call	#popregs_
1f290                 | _init_audio_ret
1f290     2D 00 64 FD | 	ret
1f294                 | 
1f294                 | ' 
1f294                 | ' '------------------- Error messages
1f294                 | ' 
1f294                 | ' sub init_error_strings
1f294                 | _init_error_strings
1f294     9A 01 00 FF 
1f298     63 01 06 F6 | 	mov	_var01, ##@LR__5716
1f29c     45 00 00 FF 
1f2a0     7C E4 05 F1 | 	add	objptr, ##35452
1f2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1f2a8     9A 01 00 FF 
1f2ac     64 01 06 F6 | 	mov	_var01, ##@LR__5717
1f2b0     04 E4 05 F1 | 	add	objptr, #4
1f2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1f2b8     9A 01 00 FF 
1f2bc     88 01 06 F6 | 	mov	_var01, ##@LR__5718
1f2c0     04 E4 05 F1 | 	add	objptr, #4
1f2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1f2c8     9A 01 00 FF 
1f2cc     A8 01 06 F6 | 	mov	_var01, ##@LR__5719
1f2d0     04 E4 05 F1 | 	add	objptr, #4
1f2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1f2d8     9A 01 00 FF 
1f2dc     C1 01 06 F6 | 	mov	_var01, ##@LR__5720
1f2e0     04 E4 05 F1 | 	add	objptr, #4
1f2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1f2e8     9A 01 00 FF 
1f2ec     DC 01 06 F6 | 	mov	_var01, ##@LR__5721
1f2f0     04 E4 05 F1 | 	add	objptr, #4
1f2f4     F2 00 62 FC | 	wrlong	_var01, objptr
1f2f8     9A 01 00 FF 
1f2fc     FD 01 06 F6 | 	mov	_var01, ##@LR__5722
1f300     04 E4 05 F1 | 	add	objptr, #4
1f304     F2 00 62 FC | 	wrlong	_var01, objptr
1f308     9B 01 00 FF 
1f30c     2A 00 06 F6 | 	mov	_var01, ##@LR__5723
1f310     04 E4 05 F1 | 	add	objptr, #4
1f314     F2 00 62 FC | 	wrlong	_var01, objptr
1f318     9B 01 00 FF 
1f31c     54 00 06 F6 | 	mov	_var01, ##@LR__5724
1f320     04 E4 05 F1 | 	add	objptr, #4
1f324     F2 00 62 FC | 	wrlong	_var01, objptr
1f328     9B 01 00 FF 
1f32c     6C 00 06 F6 | 	mov	_var01, ##@LR__5725
1f330     04 E4 05 F1 | 	add	objptr, #4
1f334     F2 00 62 FC | 	wrlong	_var01, objptr
1f338     9B 01 00 FF 
1f33c     8C 00 06 F6 | 	mov	_var01, ##@LR__5726
1f340     04 E4 05 F1 | 	add	objptr, #4
1f344     F2 00 62 FC | 	wrlong	_var01, objptr
1f348     9B 01 00 FF 
1f34c     A2 00 06 F6 | 	mov	_var01, ##@LR__5727
1f350     04 E4 05 F1 | 	add	objptr, #4
1f354     F2 00 62 FC | 	wrlong	_var01, objptr
1f358     9B 01 00 FF 
1f35c     BF 00 06 F6 | 	mov	_var01, ##@LR__5728
1f360     04 E4 05 F1 | 	add	objptr, #4
1f364     F2 00 62 FC | 	wrlong	_var01, objptr
1f368     9B 01 00 FF 
1f36c     E2 00 06 F6 | 	mov	_var01, ##@LR__5729
1f370     04 E4 05 F1 | 	add	objptr, #4
1f374     F2 00 62 FC | 	wrlong	_var01, objptr
1f378     9B 01 00 FF 
1f37c     08 01 06 F6 | 	mov	_var01, ##@LR__5730
1f380     04 E4 05 F1 | 	add	objptr, #4
1f384     F2 00 62 FC | 	wrlong	_var01, objptr
1f388     9B 01 00 FF 
1f38c     23 01 06 F6 | 	mov	_var01, ##@LR__5731
1f390     04 E4 05 F1 | 	add	objptr, #4
1f394     F2 00 62 FC | 	wrlong	_var01, objptr
1f398     9B 01 00 FF 
1f39c     33 01 06 F6 | 	mov	_var01, ##@LR__5732
1f3a0     04 E4 05 F1 | 	add	objptr, #4
1f3a4     F2 00 62 FC | 	wrlong	_var01, objptr
1f3a8     9B 01 00 FF 
1f3ac     42 01 06 F6 | 	mov	_var01, ##@LR__5733
1f3b0     04 E4 05 F1 | 	add	objptr, #4
1f3b4     F2 00 62 FC | 	wrlong	_var01, objptr
1f3b8     9B 01 00 FF 
1f3bc     5C 01 06 F6 | 	mov	_var01, ##@LR__5734
1f3c0     04 E4 05 F1 | 	add	objptr, #4
1f3c4     F2 00 62 FC | 	wrlong	_var01, objptr
1f3c8     9B 01 00 FF 
1f3cc     6D 01 06 F6 | 	mov	_var01, ##@LR__5735
1f3d0     04 E4 05 F1 | 	add	objptr, #4
1f3d4     F2 00 62 FC | 	wrlong	_var01, objptr
1f3d8     9B 01 00 FF 
1f3dc     84 01 06 F6 | 	mov	_var01, ##@LR__5736
1f3e0     04 E4 05 F1 | 	add	objptr, #4
1f3e4     F2 00 62 FC | 	wrlong	_var01, objptr
1f3e8     9B 01 00 FF 
1f3ec     97 01 06 F6 | 	mov	_var01, ##@LR__5737
1f3f0     04 E4 05 F1 | 	add	objptr, #4
1f3f4     F2 00 62 FC | 	wrlong	_var01, objptr
1f3f8     9B 01 00 FF 
1f3fc     A6 01 06 F6 | 	mov	_var01, ##@LR__5738
1f400     04 E4 05 F1 | 	add	objptr, #4
1f404     F2 00 62 FC | 	wrlong	_var01, objptr
1f408     9B 01 00 FF 
1f40c     C2 01 06 F6 | 	mov	_var01, ##@LR__5739
1f410     04 E4 05 F1 | 	add	objptr, #4
1f414     F2 00 62 FC | 	wrlong	_var01, objptr
1f418     9B 01 00 FF 
1f41c     D2 01 06 F6 | 	mov	_var01, ##@LR__5740
1f420     04 E4 05 F1 | 	add	objptr, #4
1f424     F2 00 62 FC | 	wrlong	_var01, objptr
1f428     9B 01 00 FF 
1f42c     E2 01 06 F6 | 	mov	_var01, ##@LR__5741
1f430     04 E4 05 F1 | 	add	objptr, #4
1f434     F2 00 62 FC | 	wrlong	_var01, objptr
1f438     9C 01 00 FF 
1f43c     15 00 06 F6 | 	mov	_var01, ##@LR__5742
1f440     04 E4 05 F1 | 	add	objptr, #4
1f444     F2 00 62 FC | 	wrlong	_var01, objptr
1f448     9C 01 00 FF 
1f44c     30 00 06 F6 | 	mov	_var01, ##@LR__5743
1f450     04 E4 05 F1 | 	add	objptr, #4
1f454     F2 00 62 FC | 	wrlong	_var01, objptr
1f458     9C 01 00 FF 
1f45c     45 00 06 F6 | 	mov	_var01, ##@LR__5744
1f460     04 E4 05 F1 | 	add	objptr, #4
1f464     F2 00 62 FC | 	wrlong	_var01, objptr
1f468     9C 01 00 FF 
1f46c     51 00 06 F6 | 	mov	_var01, ##@LR__5745
1f470     04 E4 05 F1 | 	add	objptr, #4
1f474     F2 00 62 FC | 	wrlong	_var01, objptr
1f478     9C 01 00 FF 
1f47c     62 00 06 F6 | 	mov	_var01, ##@LR__5746
1f480     04 E4 05 F1 | 	add	objptr, #4
1f484     F2 00 62 FC | 	wrlong	_var01, objptr
1f488     9C 01 00 FF 
1f48c     72 00 06 F6 | 	mov	_var01, ##@LR__5747
1f490     04 E4 05 F1 | 	add	objptr, #4
1f494     F2 00 62 FC | 	wrlong	_var01, objptr
1f498     9C 01 00 FF 
1f49c     8D 00 06 F6 | 	mov	_var01, ##@LR__5748
1f4a0     04 E4 05 F1 | 	add	objptr, #4
1f4a4     F2 00 62 FC | 	wrlong	_var01, objptr
1f4a8     9C 01 00 FF 
1f4ac     9D 00 06 F6 | 	mov	_var01, ##@LR__5749
1f4b0     04 E4 05 F1 | 	add	objptr, #4
1f4b4     F2 00 62 FC | 	wrlong	_var01, objptr
1f4b8     9C 01 00 FF 
1f4bc     AB 00 06 F6 | 	mov	_var01, ##@LR__5750
1f4c0     04 E4 05 F1 | 	add	objptr, #4
1f4c4     F2 00 62 FC | 	wrlong	_var01, objptr
1f4c8     9C 01 00 FF 
1f4cc     C5 00 06 F6 | 	mov	_var01, ##@LR__5751
1f4d0     04 E4 05 F1 | 	add	objptr, #4
1f4d4     F2 00 62 FC | 	wrlong	_var01, objptr
1f4d8     9C 01 00 FF 
1f4dc     F8 00 06 F6 | 	mov	_var01, ##@LR__5752
1f4e0     04 E4 05 F1 | 	add	objptr, #4
1f4e4     F2 00 62 FC | 	wrlong	_var01, objptr
1f4e8     9C 01 00 FF 
1f4ec     10 01 06 F6 | 	mov	_var01, ##@LR__5753
1f4f0     04 E4 05 F1 | 	add	objptr, #4
1f4f4     F2 00 62 FC | 	wrlong	_var01, objptr
1f4f8     9C 01 00 FF 
1f4fc     2B 01 06 F6 | 	mov	_var01, ##@LR__5754
1f500     04 E4 05 F1 | 	add	objptr, #4
1f504     F2 00 62 FC | 	wrlong	_var01, objptr
1f508     9C 01 00 FF 
1f50c     48 01 06 F6 | 	mov	_var01, ##@LR__5755
1f510     04 E4 05 F1 | 	add	objptr, #4
1f514     F2 00 62 FC | 	wrlong	_var01, objptr
1f518     9C 01 00 FF 
1f51c     61 01 06 F6 | 	mov	_var01, ##@LR__5756
1f520     04 E4 05 F1 | 	add	objptr, #4
1f524     F2 00 62 FC | 	wrlong	_var01, objptr
1f528     9C 01 00 FF 
1f52c     80 01 06 F6 | 	mov	_var01, ##@LR__5757
1f530     04 E4 05 F1 | 	add	objptr, #4
1f534     F2 00 62 FC | 	wrlong	_var01, objptr
1f538     9C 01 00 FF 
1f53c     8E 01 06 F6 | 	mov	_var01, ##@LR__5758
1f540     04 E4 05 F1 | 	add	objptr, #4
1f544     F2 00 62 FC | 	wrlong	_var01, objptr
1f548     9C 01 00 FF 
1f54c     BB 01 06 F6 | 	mov	_var01, ##@LR__5759
1f550     04 E4 05 F1 | 	add	objptr, #4
1f554     F2 00 62 FC | 	wrlong	_var01, objptr
1f558     9C 01 00 FF 
1f55c     C8 01 06 F6 | 	mov	_var01, ##@LR__5760
1f560     04 E4 05 F1 | 	add	objptr, #4
1f564     F2 00 62 FC | 	wrlong	_var01, objptr
1f568     9C 01 00 FF 
1f56c     DC 01 06 F6 | 	mov	_var01, ##@LR__5761
1f570     04 E4 05 F1 | 	add	objptr, #4
1f574     F2 00 62 FC | 	wrlong	_var01, objptr
1f578     9D 01 00 FF 
1f57c     00 00 06 F6 | 	mov	_var01, ##@LR__5762
1f580     04 E4 05 F1 | 	add	objptr, #4
1f584     F2 00 62 FC | 	wrlong	_var01, objptr
1f588     9D 01 00 FF 
1f58c     17 00 06 F6 | 	mov	_var01, ##@LR__5763
1f590     04 E4 05 F1 | 	add	objptr, #4
1f594     F2 00 62 FC | 	wrlong	_var01, objptr
1f598     9D 01 00 FF 
1f59c     2A 00 06 F6 | 	mov	_var01, ##@LR__5764
1f5a0     04 E4 05 F1 | 	add	objptr, #4
1f5a4     F2 00 62 FC | 	wrlong	_var01, objptr
1f5a8     9D 01 00 FF 
1f5ac     41 00 06 F6 | 	mov	_var01, ##@LR__5765
1f5b0     04 E4 05 F1 | 	add	objptr, #4
1f5b4     F2 00 62 FC | 	wrlong	_var01, objptr
1f5b8     9D 01 00 FF 
1f5bc     5A 00 06 F6 | 	mov	_var01, ##@LR__5766
1f5c0     04 E4 05 F1 | 	add	objptr, #4
1f5c4     F2 00 62 FC | 	wrlong	_var01, objptr
1f5c8     9D 01 00 FF 
1f5cc     7C 00 06 F6 | 	mov	_var01, ##@LR__5767
1f5d0     04 E4 05 F1 | 	add	objptr, #4
1f5d4     F2 00 62 FC | 	wrlong	_var01, objptr
1f5d8     9D 01 00 FF 
1f5dc     8F 00 06 F6 | 	mov	_var01, ##@LR__5768
1f5e0     04 E4 05 F1 | 	add	objptr, #4
1f5e4     F2 00 62 FC | 	wrlong	_var01, objptr
1f5e8     9D 01 00 FF 
1f5ec     9F 00 06 F6 | 	mov	_var01, ##@LR__5769
1f5f0     04 E4 05 F1 | 	add	objptr, #4
1f5f4     F2 00 62 FC | 	wrlong	_var01, objptr
1f5f8     45 00 00 FF 
1f5fc     50 E5 85 F1 | 	sub	objptr, ##35664
1f600                 | _init_error_strings_ret
1f600     2D 00 64 FD | 	ret
1f604                 | 
1f604                 | '         
1f604                 | ' sub printerror(err as integer, linenum=0 as integer)
1f604                 | _printerror
1f604     02 4A 05 F6 | 	mov	COUNT_, #2
1f608     A8 00 A0 FD | 	call	#pushregs_
1f60c     09 27 02 F6 | 	mov	local01, arg01
1f610     0A 29 02 F6 | 	mov	local02, arg02
1f614     9D 01 00 FF 
1f618     B7 12 06 F6 | 	mov	arg01, ##@LR__5770
1f61c     F8 20 B0 FD | 	call	#_hg010b_spin2_write
1f620     13 13 02 F6 | 	mov	arg01, local01
1f624     94 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1f628     FD 12 02 F6 | 	mov	arg01, result1
1f62c     E8 20 B0 FD | 	call	#_hg010b_spin2_write
1f630     9D 01 00 FF 
1f634     BE 12 06 F6 | 	mov	arg01, ##@LR__5771
1f638     DC 20 B0 FD | 	call	#_hg010b_spin2_write
1f63c     02 26 66 F0 | 	shl	local01, #2
1f640     45 00 00 FF 
1f644     7C E4 05 F1 | 	add	objptr, ##35452
1f648     F2 26 02 F1 | 	add	local01, objptr
1f64c     13 13 02 FB | 	rdlong	arg01, local01
1f650     45 00 00 FF 
1f654     7C E4 85 F1 | 	sub	objptr, ##35452
1f658     BC 20 B0 FD | 	call	#_hg010b_spin2_write
1f65c                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
1f65c                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum))
1f65c     01 28 56 F2 | 	cmps	local02, #1 wc
1f660     20 00 90 CD |  if_b	jmp	#LR__2440
1f664     9D 01 00 FF 
1f668     C2 12 06 F6 | 	mov	arg01, ##@LR__5772
1f66c     A8 20 B0 FD | 	call	#_hg010b_spin2_write
1f670     14 13 02 F6 | 	mov	arg01, local02
1f674     44 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1f678     FD 12 02 F6 | 	mov	arg01, result1
1f67c                 | ' 
1f67c                 | ' write(text)
1f67c     98 20 B0 FD | 	call	#_hg010b_spin2_write
1f680                 | ' crlf
1f680     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
1f684                 | LR__2440
1f684     A7 F0 03 F6 | 	mov	ptra, fp
1f688     B2 00 A0 FD | 	call	#popregs_
1f68c                 | _printerror_ret
1f68c     2D 00 64 FD | 	ret
1f690                 | 
1f690                 | ' 
1f690                 | ' '' ------------------------------- Hardware start/stop/initialization 
1f690                 | ' 
1f690                 | ' sub startpsram
1f690                 | _startpsram
1f690     00 12 06 F6 | 	mov	arg01, #0
1f694     0A 14 C6 F9 | 	decod	arg02, #10
1f698     0B 16 06 F6 | 	mov	arg03, #11
1f69c     07 18 06 F6 | 	mov	arg04, #7
1f6a0     0B 00 00 FF 
1f6a4     CC E4 05 F1 | 	add	objptr, ##5836
1f6a8     7C 2A B0 FD | 	call	#_psram_spin2_startx
1f6ac     2B 00 00 FF 
1f6b0     3C E5 05 F1 | 	add	objptr, ##22332
1f6b4     F2 FA 61 FC | 	wrlong	result1, objptr
1f6b8                 | '     return $7FF00 + cog*12
1f6b8     0C E4 05 F1 | 	add	objptr, #12
1f6bc     FF 03 80 FF 
1f6c0     F2 00 6A FC | 	wrlong	##524032, objptr
1f6c4     37 00 00 FF 
1f6c8     14 E4 85 F1 | 	sub	objptr, ##28180
1f6cc                 | _startpsram_ret
1f6cc     2D 00 64 FD | 	ret
1f6d0                 | 
1f6d0                 | ' 
1f6d0                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1f6d0                 | _startvideo
1f6d0     01 4A 05 F6 | 	mov	COUNT_, #1
1f6d4     A8 00 A0 FD | 	call	#pushregs_
1f6d8     37 00 00 FF 
1f6dc     14 E4 05 F1 | 	add	objptr, ##28180
1f6e0     F2 18 02 FB | 	rdlong	arg04, objptr
1f6e4     37 00 00 FF 
1f6e8     14 E4 85 F1 | 	sub	objptr, ##28180
1f6ec     0A 13 02 F6 | 	mov	arg01, arg02
1f6f0     0C 15 02 F6 | 	mov	arg02, arg04
1f6f4     18 08 B0 FD | 	call	#_hg010b_spin2_start
1f6f8     37 00 00 FF 
1f6fc     00 E4 05 F1 | 	add	objptr, ##28160
1f700     F2 FA 61 FC | 	wrlong	result1, objptr
1f704                 | ' 
1f704                 | ' videocog=v.start(pin,mbox)
1f704                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1f704     00 26 06 F6 | 	mov	local01, #0
1f708     2B 00 00 FF 
1f70c     34 E5 85 F1 | 	sub	objptr, ##22324
1f710                 | LR__2450
1f710     13 13 02 F6 | 	mov	arg01, local01
1f714     00 28 00 FF 
1f718     00 14 06 F6 | 	mov	arg02, ##5242880
1f71c     60 2E B0 FD | 	call	#_psram_spin2_setQos
1f720     01 26 06 F1 | 	add	local01, #1
1f724     08 26 56 F2 | 	cmps	local01, #8 wc
1f728     E4 FF 9F CD |  if_b	jmp	#LR__2450
1f72c     2B 00 00 FF 
1f730     34 E5 05 F1 | 	add	objptr, ##22324
1f734     F2 12 02 FB | 	rdlong	arg01, objptr
1f738     7A 00 02 FF 
1f73c     00 14 06 F6 | 	mov	arg02, ##67171328
1f740     2B 00 00 FF 
1f744     34 E5 85 F1 | 	sub	objptr, ##22324
1f748     34 2E B0 FD | 	call	#_psram_spin2_setQos
1f74c     0B 00 00 FF 
1f750     CC E4 85 F1 | 	sub	objptr, ##5836
1f754                 | ' psram.setQoS(videocog, $0400f400) 
1f754                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1f754     F2 14 02 F6 | 	mov	arg02, objptr
1f758     00 B0 04 FF 
1f75c     00 14 46 F5 | 	or	arg02, ##157286400
1f760     00 16 06 F6 | 	mov	arg03, #0
1f764     00 18 06 F6 | 	mov	arg04, #0
1f768     00 12 06 F6 | 	mov	arg01, #0
1f76c     CC 42 B0 FD | 	call	#__system___basic_open
1f770                 | ' return videocog
1f770     37 00 00 FF 
1f774     00 E4 05 F1 | 	add	objptr, ##28160
1f778     F2 FA 01 FB | 	rdlong	result1, objptr
1f77c     37 00 00 FF 
1f780     00 E4 85 F1 | 	sub	objptr, ##28160
1f784     A7 F0 03 F6 | 	mov	ptra, fp
1f788     B2 00 A0 FD | 	call	#popregs_
1f78c                 | _startvideo_ret
1f78c     2D 00 64 FD | 	ret
1f790                 | 
1f790                 | ' 
1f790                 | ' 
1f790                 | ' 
1f790                 | ' '' ------------------------------- Convenient psram peek/poke
1f790                 | ' 
1f790                 | ' sub pslpoke(addr as ulong,value as ulong)
1f790                 | _pslpoke
1f790     00 4A 05 F6 | 	mov	COUNT_, #0
1f794     A8 00 A0 FD | 	call	#pushregs_
1f798     08 F0 07 F1 | 	add	ptra, #8
1f79c     A7 12 62 FC | 	wrlong	arg01, fp
1f7a0     04 4E 05 F1 | 	add	fp, #4
1f7a4     A7 14 62 FC | 	wrlong	arg02, fp
1f7a8     A7 12 02 F6 | 	mov	arg01, fp
1f7ac     04 4E 85 F1 | 	sub	fp, #4
1f7b0     A7 14 02 FB | 	rdlong	arg02, fp
1f7b4     04 16 06 F6 | 	mov	arg03, #4
1f7b8     0B 00 00 FF 
1f7bc     CC E4 05 F1 | 	add	objptr, ##5836
1f7c0     2C 2C B0 FD | 	call	#_psram_spin2_write
1f7c4     0B 00 00 FF 
1f7c8     CC E4 85 F1 | 	sub	objptr, ##5836
1f7cc     A7 F0 03 F6 | 	mov	ptra, fp
1f7d0     B2 00 A0 FD | 	call	#popregs_
1f7d4                 | _pslpoke_ret
1f7d4     2D 00 64 FD | 	ret
1f7d8                 | 
1f7d8                 | ' 
1f7d8                 | ' sub psdpoke(addr as ulong,value as ulong)
1f7d8                 | _psdpoke
1f7d8     00 4A 05 F6 | 	mov	COUNT_, #0
1f7dc     A8 00 A0 FD | 	call	#pushregs_
1f7e0     08 F0 07 F1 | 	add	ptra, #8
1f7e4     A7 12 62 FC | 	wrlong	arg01, fp
1f7e8     04 4E 05 F1 | 	add	fp, #4
1f7ec     A7 14 62 FC | 	wrlong	arg02, fp
1f7f0     A7 12 02 F6 | 	mov	arg01, fp
1f7f4     04 4E 85 F1 | 	sub	fp, #4
1f7f8     A7 14 02 FB | 	rdlong	arg02, fp
1f7fc     02 16 06 F6 | 	mov	arg03, #2
1f800     0B 00 00 FF 
1f804     CC E4 05 F1 | 	add	objptr, ##5836
1f808     E4 2B B0 FD | 	call	#_psram_spin2_write
1f80c     0B 00 00 FF 
1f810     CC E4 85 F1 | 	sub	objptr, ##5836
1f814     A7 F0 03 F6 | 	mov	ptra, fp
1f818     B2 00 A0 FD | 	call	#popregs_
1f81c                 | _psdpoke_ret
1f81c     2D 00 64 FD | 	ret
1f820                 | 
1f820                 | ' 
1f820                 | ' sub pspoke(addr as ulong,value as ulong)
1f820                 | _pspoke
1f820     00 4A 05 F6 | 	mov	COUNT_, #0
1f824     A8 00 A0 FD | 	call	#pushregs_
1f828     08 F0 07 F1 | 	add	ptra, #8
1f82c     A7 12 62 FC | 	wrlong	arg01, fp
1f830     04 4E 05 F1 | 	add	fp, #4
1f834     A7 14 62 FC | 	wrlong	arg02, fp
1f838     A7 12 02 F6 | 	mov	arg01, fp
1f83c     04 4E 85 F1 | 	sub	fp, #4
1f840     A7 14 02 FB | 	rdlong	arg02, fp
1f844     01 16 06 F6 | 	mov	arg03, #1
1f848     0B 00 00 FF 
1f84c     CC E4 05 F1 | 	add	objptr, ##5836
1f850     9C 2B B0 FD | 	call	#_psram_spin2_write
1f854     0B 00 00 FF 
1f858     CC E4 85 F1 | 	sub	objptr, ##5836
1f85c     A7 F0 03 F6 | 	mov	ptra, fp
1f860     B2 00 A0 FD | 	call	#popregs_
1f864                 | _pspoke_ret
1f864     2D 00 64 FD | 	ret
1f868                 | 
1f868                 | ' 
1f868                 | ' function pspeek(adr as ulong) as ubyte
1f868                 | _pspeek
1f868     00 4A 05 F6 | 	mov	COUNT_, #0
1f86c     A8 00 A0 FD | 	call	#pushregs_
1f870     0C F0 07 F1 | 	add	ptra, #12
1f874     04 4E 05 F1 | 	add	fp, #4
1f878     A7 12 62 FC | 	wrlong	arg01, fp
1f87c     04 4E 05 F1 | 	add	fp, #4
1f880     A7 12 02 F6 | 	mov	arg01, fp
1f884     04 4E 85 F1 | 	sub	fp, #4
1f888     A7 14 02 FB | 	rdlong	arg02, fp
1f88c     04 4E 85 F1 | 	sub	fp, #4
1f890     01 16 06 F6 | 	mov	arg03, #1
1f894     0B 00 00 FF 
1f898     CC E4 05 F1 | 	add	objptr, ##5836
1f89c     B4 2A B0 FD | 	call	#_psram_spin2_read1
1f8a0     0B 00 00 FF 
1f8a4     CC E4 85 F1 | 	sub	objptr, ##5836
1f8a8                 | ' psram.read1(varptr(res),adr,1)
1f8a8                 | ' return res
1f8a8     08 4E 05 F1 | 	add	fp, #8
1f8ac     A7 FA C1 FA | 	rdbyte	result1, fp
1f8b0     08 4E 85 F1 | 	sub	fp, #8
1f8b4     A7 F0 03 F6 | 	mov	ptra, fp
1f8b8     B2 00 A0 FD | 	call	#popregs_
1f8bc                 | _pspeek_ret
1f8bc     2D 00 64 FD | 	ret
1f8c0                 | 
1f8c0                 | ' 
1f8c0                 | ' function pslpeek(adr as ulong) as ulong
1f8c0                 | _pslpeek
1f8c0     00 4A 05 F6 | 	mov	COUNT_, #0
1f8c4     A8 00 A0 FD | 	call	#pushregs_
1f8c8     0C F0 07 F1 | 	add	ptra, #12
1f8cc     04 4E 05 F1 | 	add	fp, #4
1f8d0     A7 12 62 FC | 	wrlong	arg01, fp
1f8d4     04 4E 05 F1 | 	add	fp, #4
1f8d8     A7 12 02 F6 | 	mov	arg01, fp
1f8dc     04 4E 85 F1 | 	sub	fp, #4
1f8e0     A7 14 02 FB | 	rdlong	arg02, fp
1f8e4     04 4E 85 F1 | 	sub	fp, #4
1f8e8     04 16 06 F6 | 	mov	arg03, #4
1f8ec     0B 00 00 FF 
1f8f0     CC E4 05 F1 | 	add	objptr, ##5836
1f8f4     5C 2A B0 FD | 	call	#_psram_spin2_read1
1f8f8     0B 00 00 FF 
1f8fc     CC E4 85 F1 | 	sub	objptr, ##5836
1f900                 | ' psram.read1(varptr(res),adr,4)
1f900                 | ' return res
1f900     08 4E 05 F1 | 	add	fp, #8
1f904     A7 FA 01 FB | 	rdlong	result1, fp
1f908     08 4E 85 F1 | 	sub	fp, #8
1f90c     A7 F0 03 F6 | 	mov	ptra, fp
1f910     B2 00 A0 FD | 	call	#popregs_
1f914                 | _pslpeek_ret
1f914     2D 00 64 FD | 	ret
1f918                 | 
1f918                 | ' 
1f918                 | ' function psdpeek(adr as ulong) as ulong
1f918                 | _psdpeek
1f918     00 4A 05 F6 | 	mov	COUNT_, #0
1f91c     A8 00 A0 FD | 	call	#pushregs_
1f920     0C F0 07 F1 | 	add	ptra, #12
1f924     04 4E 05 F1 | 	add	fp, #4
1f928     A7 12 62 FC | 	wrlong	arg01, fp
1f92c     04 4E 05 F1 | 	add	fp, #4
1f930     A7 12 02 F6 | 	mov	arg01, fp
1f934     04 4E 85 F1 | 	sub	fp, #4
1f938     A7 14 02 FB | 	rdlong	arg02, fp
1f93c     04 4E 85 F1 | 	sub	fp, #4
1f940     02 16 06 F6 | 	mov	arg03, #2
1f944     0B 00 00 FF 
1f948     CC E4 05 F1 | 	add	objptr, ##5836
1f94c     04 2A B0 FD | 	call	#_psram_spin2_read1
1f950     0B 00 00 FF 
1f954     CC E4 85 F1 | 	sub	objptr, ##5836
1f958                 | ' psram.read1(varptr(res),adr,2)
1f958                 | ' return res
1f958     08 4E 05 F1 | 	add	fp, #8
1f95c     A7 FA E1 FA | 	rdword	result1, fp
1f960     08 4E 85 F1 | 	sub	fp, #8
1f964     A7 F0 03 F6 | 	mov	ptra, fp
1f968     B2 00 A0 FD | 	call	#popregs_
1f96c                 | _psdpeek_ret
1f96c     2D 00 64 FD | 	ret
1f970                 | 
1f970                 | ' 
1f970                 | ' '' ------------------------------- USB keyboard scan to char translator
1f970                 | ' 
1f970                 | ' function scantochar(key)
1f970                 | _scantochar
1f970                 | ' 
1f970                 | ' select case (key shr 8) and 255
1f970     09 01 02 F6 | 	mov	_var01, arg01
1f974     08 00 C6 F0 | 	sar	_var01, #8
1f978     FF 00 0E F5 | 	and	_var01, #255 wz
1f97c     24 00 90 AD |  if_e	jmp	#LR__2460
1f980     02 00 0E F2 | 	cmp	_var01, #2 wz
1f984     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1f988     30 00 90 AD |  if_e	jmp	#LR__2461
1f98c     40 00 0E F2 | 	cmp	_var01, #64 wz
1f990     44 00 90 AD |  if_e	jmp	#LR__2462
1f994     42 00 0E F2 | 	cmp	_var01, #66 wz
1f998     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1f99c     70 00 90 5D |  if_ne	jmp	#LR__2464
1f9a0     50 00 90 FD | 	jmp	#LR__2463
1f9a4                 | LR__2460
1f9a4     09 FB 01 F6 | 	mov	result1, arg01
1f9a8     7F FA 05 F5 | 	and	result1, #127
1f9ac     02 FA 65 F0 | 	shl	result1, #2
1f9b0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1f9b4     FD FA C1 FA | 	rdbyte	result1, result1
1f9b8     54 00 90 FD | 	jmp	#_scantochar_ret
1f9bc                 | LR__2461
1f9bc     09 FB 01 F6 | 	mov	result1, arg01
1f9c0     7F FA 05 F5 | 	and	result1, #127
1f9c4     02 FA 65 F0 | 	shl	result1, #2
1f9c8     01 FA 05 F1 | 	add	result1, #1
1f9cc     F5 FA 01 F1 | 	add	result1, ptr__dat__
1f9d0     FD FA C1 FA | 	rdbyte	result1, result1
1f9d4     38 00 90 FD | 	jmp	#_scantochar_ret
1f9d8                 | LR__2462
1f9d8     09 FB 01 F6 | 	mov	result1, arg01
1f9dc     7F FA 05 F5 | 	and	result1, #127
1f9e0     02 FA 65 F0 | 	shl	result1, #2
1f9e4     02 FA 05 F1 | 	add	result1, #2
1f9e8     F5 FA 01 F1 | 	add	result1, ptr__dat__
1f9ec     FD FA C1 FA | 	rdbyte	result1, result1
1f9f0     1C 00 90 FD | 	jmp	#_scantochar_ret
1f9f4                 | LR__2463
1f9f4     09 FB 01 F6 | 	mov	result1, arg01
1f9f8     7F FA 05 F5 | 	and	result1, #127
1f9fc     02 FA 65 F0 | 	shl	result1, #2
1fa00     03 FA 05 F1 | 	add	result1, #3
1fa04     F5 FA 01 F1 | 	add	result1, ptr__dat__
1fa08     FD FA C1 FA | 	rdbyte	result1, result1
1fa0c     00 00 90 FD | 	jmp	#_scantochar_ret
1fa10                 | LR__2464
1fa10                 | _scantochar_ret
1fa10     2D 00 64 FD | 	ret
1fa14                 | 
1fa14                 | _program
1fa14     01 4A 05 F6 | 	mov	COUNT_, #1
1fa18     A8 00 A0 FD | 	call	#pushregs_
1fa1c     70 FC BF FD | 	call	#_startpsram
1fa20     40 12 06 F6 | 	mov	arg01, #64
1fa24     00 14 06 F6 | 	mov	arg02, #0
1fa28     00 16 06 F6 | 	mov	arg03, #0
1fa2c     A0 FC BF FD | 	call	#_startvideo
1fa30     37 00 00 FF 
1fa34     14 E4 05 F1 | 	add	objptr, ##28180
1fa38     F2 12 02 FB | 	rdlong	arg01, objptr
1fa3c     00 14 06 F6 | 	mov	arg02, #0
1fa40     FB 03 00 FF 
1fa44     00 17 06 F6 | 	mov	arg03, ##521984
1fa48     2B 00 00 FF 
1fa4c     48 E5 85 F1 | 	sub	objptr, ##22344
1fa50     DC 2E B0 FD | 	call	#_audio096_spin2_start
1fa54     FE 16 02 F6 | 	mov	arg03, result2
1fa58     2B 00 00 FF 
1fa5c     30 E5 05 F1 | 	add	objptr, ##22320
1fa60     F2 FA 61 FC | 	wrlong	result1, objptr
1fa64     14 E4 05 F1 | 	add	objptr, #20
1fa68     F2 16 62 FC | 	wrlong	arg03, objptr
1fa6c     37 00 00 FF 
1fa70     10 E4 85 F1 | 	sub	objptr, ##28176
1fa74     32 12 06 F6 | 	mov	arg01, #50
1fa78     0C 38 B0 FD | 	call	#__system___waitms
1fa7c     37 00 00 FF 
1fa80     10 E4 05 F1 | 	add	objptr, ##28176
1fa84     F2 12 02 FB | 	rdlong	arg01, objptr
1fa88     37 00 00 FF 
1fa8c     10 E4 85 F1 | 	sub	objptr, ##28176
1fa90     14 12 06 F1 | 	add	arg01, #20
1fa94     20 00 80 FF 
1fa98     09 01 58 FC | 	wrword	##16384, arg01
1fa9c     E8 2B B0 FD | 	call	#_usbnew_spin2_start
1faa0     37 00 00 FF 
1faa4     04 E4 05 F1 | 	add	objptr, ##28164
1faa8     F2 FA 61 FC | 	wrlong	result1, objptr
1faac                 | '   mouse_limits[0] := xlim
1faac     0F 00 00 FF 
1fab0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1fab4     01 00 80 FF 
1fab8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1fabc                 | '   mouse_limits[1] := ylim
1fabc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1fac0     01 00 80 FF 
1fac4     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1fac8     36 00 00 FF 
1facc     F3 E4 85 F1 | 	sub	objptr, ##27891
1fad0     F2 12 02 F6 | 	mov	arg01, objptr
1fad4     11 E5 85 F1 | 	sub	objptr, #273
1fad8     C4 12 06 F1 | 	add	arg01, #196
1fadc                 | '   mouse_outptr := ptr
1fadc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1fae0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1fae4     0F 00 00 FF 
1fae8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1faec     16 00 00 FF 
1faf0     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1faf4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1faf8     16 00 00 FF 
1fafc     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1fb00     10 12 06 F6 | 	mov	arg01, #16
1fb04     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1fb08     10 12 06 F6 | 	mov	arg01, #16
1fb0c     20 14 06 F6 | 	mov	arg02, #32
1fb10     20 16 06 F6 | 	mov	arg03, #32
1fb14     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
1fb18     09 12 C6 F9 | 	decod	arg01, #9
1fb1c     2C 15 06 F6 | 	mov	arg02, #300
1fb20     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
1fb24     F2 16 02 F6 | 	mov	arg03, objptr
1fb28     50 00 00 FF 
1fb2c     1C E5 05 F1 | 	add	objptr, ##41244
1fb30     F2 14 02 F6 | 	mov	arg02, objptr
1fb34     0A 17 62 FC | 	wrlong	arg03, arg02
1fb38     04 14 06 F1 | 	add	arg02, #4
1fb3c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1fb40     EF 14 02 F6 | 	mov	arg02, entryptr__
1fb44     1E FA 05 F6 | 	mov	result1, #30
1fb48     28 E4 61 FD | 	setq	objptr
1fb4c     0A FB F1 FC | 	coginit	result1, arg02 wc
1fb50     01 FA 65 C6 |  if_b	neg	result1, #1
1fb54     04 E4 85 F1 | 	sub	objptr, #4
1fb58     F2 FA 61 FC | 	wrlong	result1, objptr
1fb5c     01 00 00 FF 
1fb60     90 E4 05 F1 | 	add	objptr, ##656
1fb64     F2 00 68 FC | 	wrlong	#0, objptr
1fb68     1A 00 00 FF 
1fb6c     74 E5 85 F1 | 	sub	objptr, ##13684
1fb70     F2 04 68 FC | 	wrlong	#2, objptr
1fb74     04 E4 05 F1 | 	add	objptr, #4
1fb78     F2 26 69 FC | 	wrlong	#147, objptr
1fb7c     04 E4 05 F1 | 	add	objptr, #4
1fb80     F2 34 69 FC | 	wrlong	#154, objptr
1fb84     04 E4 05 F1 | 	add	objptr, #4
1fb88     F2 08 68 FC | 	wrlong	#4, objptr
1fb8c     04 E4 85 F1 | 	sub	objptr, #4
1fb90     F2 16 02 FB | 	rdlong	arg03, objptr
1fb94     14 E4 85 F1 | 	sub	objptr, #20
1fb98     F2 16 62 FC | 	wrlong	arg03, objptr
1fb9c     04 E4 05 F1 | 	add	objptr, #4
1fba0     F2 00 68 FC | 	wrlong	#0, objptr
1fba4     04 E4 05 F1 | 	add	objptr, #4
1fba8     F2 00 68 FC | 	wrlong	#0, objptr
1fbac     19 00 00 FF 
1fbb0     E4 E4 05 F1 | 	add	objptr, ##13028
1fbb4     F2 02 68 FC | 	wrlong	#1, objptr
1fbb8     01 00 00 FF 
1fbbc     9C E4 05 F1 | 	add	objptr, ##668
1fbc0     F2 00 68 FC | 	wrlong	#0, objptr
1fbc4     01 00 00 FF 
1fbc8     00 EA 05 F1 | 	add	ptr__dat__, ##512
1fbcc     08 E4 05 F1 | 	add	objptr, #8
1fbd0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1fbd4     04 E4 85 F1 | 	sub	objptr, #4
1fbd8     03 00 80 FF 
1fbdc     F2 3C 69 FC | 	wrlong	##1694, objptr
1fbe0     0C 00 00 FF 
1fbe4     50 E5 85 F1 | 	sub	objptr, ##6480
1fbe8     F2 18 68 FC | 	wrlong	#12, objptr
1fbec     45 00 00 FF 
1fbf0     64 E4 85 F1 | 	sub	objptr, ##35428
1fbf4     01 00 00 FF 
1fbf8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1fbfc     5C DA BF FD | 	call	#_init_commands
1fc00     90 F6 BF FD | 	call	#_init_error_strings
1fc04     14 EE BF FD | 	call	#_init_audio
1fc08     98 4A BF FD | 	call	#_do_new
1fc0c     37 00 00 FF 
1fc10     3C E4 05 F1 | 	add	objptr, ##28220
1fc14     F2 12 02 FB | 	rdlong	arg01, objptr
1fc18     04 E4 85 F1 | 	sub	objptr, #4
1fc1c     F2 14 02 FB | 	rdlong	arg02, objptr
1fc20     37 00 00 FF 
1fc24     38 E4 85 F1 | 	sub	objptr, ##28216
1fc28     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
1fc2c     37 00 00 FF 
1fc30     40 E4 05 F1 | 	add	objptr, ##28224
1fc34     F2 12 02 FB | 	rdlong	arg01, objptr
1fc38     37 00 00 FF 
1fc3c     40 E4 85 F1 | 	sub	objptr, ##28224
1fc40     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1fc44                 | ' 
1fc44                 | ' leading_spaces:=amount
1fc44     01 00 00 FF 
1fc48     B6 E4 05 F1 | 	add	objptr, ##694
1fc4c     F2 04 68 FC | 	wrlong	#2, objptr
1fc50     01 00 00 FF 
1fc54     B6 E4 85 F1 | 	sub	objptr, ##694
1fc58     9D 01 00 FF 
1fc5c     CC 26 06 F6 | 	mov	local01, ##@LR__5773
1fc60     3D 12 06 F6 | 	mov	arg01, #61
1fc64     3C 14 06 F6 | 	mov	arg02, #60
1fc68     3B 16 06 F6 | 	mov	arg03, #59
1fc6c     3A 18 06 F6 | 	mov	arg04, #58
1fc70     A4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
1fc74     FD 14 02 F6 | 	mov	arg02, result1
1fc78     13 13 02 F6 | 	mov	arg01, local01
1fc7c     E0 36 B0 FD | 	call	#__system___mount
1fc80     9D 01 00 FF 
1fc84     D0 12 06 F6 | 	mov	arg01, ##@LR__5774
1fc88     94 39 B0 FD | 	call	#__system___chdir
1fc8c     9D 01 00 FF 
1fc90     D8 26 06 F6 | 	mov	local01, ##@LR__5775
1fc94     4A 00 00 FF 
1fc98     94 E4 05 F1 | 	add	objptr, ##38036
1fc9c     F2 26 62 FC | 	wrlong	local01, objptr
1fca0     13 00 00 FF 
1fca4     60 E4 85 F1 | 	sub	objptr, ##9824
1fca8     F2 12 02 FB | 	rdlong	arg01, objptr
1fcac     37 00 00 FF 
1fcb0     34 E4 85 F1 | 	sub	objptr, ##28212
1fcb4     01 12 66 F0 | 	shl	arg01, #1
1fcb8     01 14 06 F6 | 	mov	arg02, #1
1fcbc     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1fcc0                 | ' init_commands
1fcc0                 | ' init_error_strings
1fcc0                 | ' init_audio
1fcc0                 | ' do_new
1fcc0                 | ' cls(ink, paper)
1fcc0                 | ' v.setfontfamily(font) 				' use ST Mono font
1fcc0                 | ' v.setleadingspaces(2)
1fcc0                 | ' mount "/sd", _vfs_open_sdcard()
1fcc0                 | ' chdir "/sd/bas"
1fcc0                 | ' currentdir$="/sd/bas"
1fcc0                 | ' position 2*editor_spaces,1 : print ver$
1fcc0     00 12 06 F6 | 	mov	arg01, #0
1fcc4     F4 8F B0 FD | 	call	#__system___getiolock_0558
1fcc8     FD 12 02 F6 | 	mov	arg01, result1
1fccc     C4 32 B0 FD | 	call	#__system___lockmem
1fcd0     18 00 00 FF 
1fcd4     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1fcd8     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1fcdc     18 00 00 FF 
1fce0     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1fce4     00 12 06 F6 | 	mov	arg01, #0
1fce8     00 16 06 F6 | 	mov	arg03, #0
1fcec     98 3F B0 FD | 	call	#__system___basic_print_string
1fcf0     00 12 06 F6 | 	mov	arg01, #0
1fcf4     0A 14 06 F6 | 	mov	arg02, #10
1fcf8     00 16 06 F6 | 	mov	arg03, #0
1fcfc     30 3F B0 FD | 	call	#__system___basic_print_char
1fd00     00 12 06 F6 | 	mov	arg01, #0
1fd04     B4 8F B0 FD | 	call	#__system___getiolock_0558
1fd08     FD 00 68 FC | 	wrlong	#0, result1
1fd0c     51 00 00 FF 
1fd10     AC E5 05 F1 | 	add	objptr, ##41900
1fd14     F2 12 02 FB | 	rdlong	arg01, objptr
1fd18     0E 00 00 FF 
1fd1c     50 E5 85 F1 | 	sub	objptr, ##7504
1fd20     F2 26 02 FB | 	rdlong	local01, objptr
1fd24     43 00 00 FF 
1fd28     5C E4 85 F1 | 	sub	objptr, ##34396
1fd2c     13 13 82 F1 | 	sub	arg01, local01
1fd30     00 14 06 F6 | 	mov	arg02, #0
1fd34     0A 16 06 F6 | 	mov	arg03, #10
1fd38     28 55 B0 FD | 	call	#__system__Number_S
1fd3c     FD 12 02 F6 | 	mov	arg01, result1
1fd40     9D 01 00 FF 
1fd44     E0 14 06 F6 | 	mov	arg02, ##@LR__5776
1fd48     A4 32 B0 FD | 	call	#__system___string_concat
1fd4c     FD 26 02 F6 | 	mov	local01, result1
1fd50     50 00 00 FF 
1fd54     10 E5 05 F1 | 	add	objptr, ##41232
1fd58     F2 26 62 FC | 	wrlong	local01, objptr
1fd5c     50 00 00 FF 
1fd60     10 E5 85 F1 | 	sub	objptr, ##41232
1fd64                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1fd64     00 12 06 F6 | 	mov	arg01, #0
1fd68     50 8F B0 FD | 	call	#__system___getiolock_0558
1fd6c     FD 12 02 F6 | 	mov	arg01, result1
1fd70     20 32 B0 FD | 	call	#__system___lockmem
1fd74     50 00 00 FF 
1fd78     10 E5 05 F1 | 	add	objptr, ##41232
1fd7c     F2 14 02 FB | 	rdlong	arg02, objptr
1fd80     50 00 00 FF 
1fd84     10 E5 85 F1 | 	sub	objptr, ##41232
1fd88     00 12 06 F6 | 	mov	arg01, #0
1fd8c     00 16 06 F6 | 	mov	arg03, #0
1fd90     F4 3E B0 FD | 	call	#__system___basic_print_string
1fd94     00 12 06 F6 | 	mov	arg01, #0
1fd98     0A 14 06 F6 | 	mov	arg02, #10
1fd9c     00 16 06 F6 | 	mov	arg03, #0
1fda0     8C 3E B0 FD | 	call	#__system___basic_print_char
1fda4     00 12 06 F6 | 	mov	arg01, #0
1fda8     10 8F B0 FD | 	call	#__system___getiolock_0558
1fdac     FD 00 68 FC | 	wrlong	#0, result1
1fdb0     37 00 00 FF 
1fdb4     34 E4 05 F1 | 	add	objptr, ##28212
1fdb8     F2 12 02 FB | 	rdlong	arg01, objptr
1fdbc     37 00 00 FF 
1fdc0     34 E4 85 F1 | 	sub	objptr, ##28212
1fdc4     01 12 66 F0 | 	shl	arg01, #1
1fdc8     04 14 06 F6 | 	mov	arg02, #4
1fdcc     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1fdd0                 | ' position 2*editor_spaces,4 : print "Ready"
1fdd0     00 12 06 F6 | 	mov	arg01, #0
1fdd4     E4 8E B0 FD | 	call	#__system___getiolock_0558
1fdd8     FD 12 02 F6 | 	mov	arg01, result1
1fddc     B4 31 B0 FD | 	call	#__system___lockmem
1fde0     9D 01 00 FF 
1fde4     F2 14 06 F6 | 	mov	arg02, ##@LR__5777
1fde8     00 12 06 F6 | 	mov	arg01, #0
1fdec     00 16 06 F6 | 	mov	arg03, #0
1fdf0     94 3E B0 FD | 	call	#__system___basic_print_string
1fdf4     00 12 06 F6 | 	mov	arg01, #0
1fdf8     0A 14 06 F6 | 	mov	arg02, #10
1fdfc     00 16 06 F6 | 	mov	arg03, #0
1fe00     2C 3E B0 FD | 	call	#__system___basic_print_char
1fe04     00 12 06 F6 | 	mov	arg01, #0
1fe08     B0 8E B0 FD | 	call	#__system___getiolock_0558
1fe0c     FD 00 68 FC | 	wrlong	#0, result1
1fe10     00 14 06 F6 | 	mov	arg02, #0
1fe14     01 14 D6 F7 | 	test	arg02, #1 wc
1fe18     5A 4C 64 FD | 	drvc	#38
1fe1c     01 14 D6 F7 | 	test	arg02, #1 wc
1fe20     5A 4E 64 FD | 	drvc	#39
1fe24     9D 01 00 FF 
1fe28     F8 26 06 F6 | 	mov	local01, ##@LR__5778
1fe2c     51 00 00 FF 
1fe30     D8 E5 05 F1 | 	add	objptr, ##41944
1fe34     F2 26 62 FC | 	wrlong	local01, objptr
1fe38     04 E4 05 F1 | 	add	objptr, #4
1fe3c     FF FF FF FF 
1fe40     F2 FE 6B FC | 	wrlong	##-1, objptr
1fe44     0C E4 05 F1 | 	add	objptr, #12
1fe48     F2 00 68 FC | 	wrlong	#0, objptr
1fe4c     51 00 00 FF 
1fe50     E8 E5 85 F1 | 	sub	objptr, ##41960
1fe54                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1fe54                 | ' loadname="noname.bas"
1fe54                 | ' do_insert=-1
1fe54                 | ' inload=0
1fe54                 | ' 
1fe54                 | ' open "/sd/bas/autorun.bas" for input as #9
1fe54     9D 01 00 FF 
1fe58     03 15 06 F6 | 	mov	arg02, ##@LR__5779
1fe5c     09 12 06 F6 | 	mov	arg01, #9
1fe60     00 16 06 F6 | 	mov	arg03, #0
1fe64     30 3D B0 FD | 	call	#__system___basic_open_string
1fe68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fe6c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1fe70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fe74     51 00 00 FF 
1fe78     EC E5 05 F1 | 	add	objptr, ##41964
1fe7c     F2 FA 61 FC | 	wrlong	result1, objptr
1fe80     51 00 00 FF 
1fe84     EC E5 85 F1 | 	sub	objptr, ##41964
1fe88                 | ' err=geterr()
1fe88                 | ' close #9
1fe88     09 12 06 F6 | 	mov	arg01, #9
1fe8c     5C 84 B0 FD | 	call	#__system__close
1fe90                 | ' if err=0 then line$="run autorun.bas" : interpret
1fe90     51 00 00 FF 
1fe94     EC E5 05 F1 | 	add	objptr, ##41964
1fe98     F2 26 0A FB | 	rdlong	local01, objptr wz
1fe9c     51 00 00 FF 
1fea0     EC E5 85 F1 | 	sub	objptr, ##41964
1fea4     9D 01 00 AF 
1fea8     17 27 06 A6 |  if_e	mov	local01, ##@LR__5780
1feac     37 00 00 AF 
1feb0     1C E4 05 A1 |  if_e	add	objptr, ##28188
1feb4     F2 26 62 AC |  if_e	wrlong	local01, objptr
1feb8     37 00 00 AF 
1febc     1C E4 85 A1 |  if_e	sub	objptr, ##28188
1fec0     84 18 BE AD |  if_e	call	#_interpret
1fec4                 | ' 
1fec4                 | ' 
1fec4                 | ' '-------------------------------------------------------------------------------------------------------- 
1fec4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1fec4                 | ' '--------------------------------------------------------------------------------------------------------
1fec4                 | ' 
1fec4                 | ' do
1fec4                 | LR__2470
1fec4     3C 09 BE FD | 	call	#_edit
1fec8     FD 26 02 F6 | 	mov	local01, result1
1fecc     37 00 00 FF 
1fed0     1C E4 05 F1 | 	add	objptr, ##28188
1fed4     F2 26 62 FC | 	wrlong	local01, objptr
1fed8     37 00 00 FF 
1fedc     1C E4 85 F1 | 	sub	objptr, ##28188
1fee0     64 18 BE FD | 	call	#_interpret
1fee4     9D 01 00 FF 
1fee8     27 27 06 F6 | 	mov	local01, ##@LR__5781
1feec     37 00 00 FF 
1fef0     1C E4 05 F1 | 	add	objptr, ##28188
1fef4     F2 26 62 FC | 	wrlong	local01, objptr
1fef8     37 00 00 FF 
1fefc     1C E4 85 F1 | 	sub	objptr, ##28188
1ff00     C0 FF 9F FD | 	jmp	#LR__2470
1ff04     A7 F0 03 F6 | 	mov	ptra, fp
1ff08     B2 00 A0 FD | 	call	#popregs_
1ff0c                 | _program_ret
1ff0c     2D 00 64 FD | 	ret
1ff10                 | 
1ff10                 | ' '' this is not a main program.
1ff10                 | ' 
1ff10                 | ' '****************************************************************************************************************
1ff10                 | ' '                                                                                                             	*
1ff10                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1ff10                 | ' '                                                                                                            	*
1ff10                 | ' ' base - HDMI base pin												*
1ff10                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1ff10                 | ' '														*
1ff10                 | ' '														*
1ff10                 | ' '****************************************************************************************************************
1ff10                 | ' 
1ff10                 | ' pub start(base,mb):result |i
1ff10                 | _hg010b_spin2_start
1ff10                 | ' 
1ff10                 | ' '--------------------------- initialize pointers and variables
1ff10                 | ' 
1ff10                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1ff10     34 E4 05 F1 | 	add	objptr, #52
1ff14     F2 FA 01 F6 | 	mov	result1, objptr
1ff18     28 E4 85 F1 | 	sub	objptr, #40
1ff1c     F2 FA 61 FC | 	wrlong	result1, objptr
1ff20                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1ff20                 | ' hdmibase:=base							' HDMI base pin, 8*n
1ff20     18 E4 05 F1 | 	add	objptr, #24
1ff24     F2 12 62 FC | 	wrlong	arg01, objptr
1ff28                 | ' mailbox_ptr:=mb		
1ff28     04 E4 05 F1 | 	add	objptr, #4
1ff2c     F2 14 62 FC | 	wrlong	arg02, objptr
1ff30                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1ff30     C1 E5 05 F1 | 	add	objptr, #449
1ff34     F2 14 62 FC | 	wrlong	arg02, objptr
1ff38                 | ' sprite_ptr:=@spr1ptr
1ff38     D8 E4 85 F1 | 	sub	objptr, #216
1ff3c     F2 FA 01 F6 | 	mov	result1, objptr
1ff40     E5 E4 85 F1 | 	sub	objptr, #229
1ff44     F2 FA 61 FC | 	wrlong	result1, objptr
1ff48                 | ' 
1ff48                 | ' 		'
1ff48                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1ff48     E5 E4 05 F1 | 	add	objptr, #229
1ff4c     F2 FA 01 FB | 	rdlong	result1, objptr
1ff50     D0 FA 05 F1 | 	add	result1, #208
1ff54     FD 10 58 FC | 	wrword	#8, result1
1ff58                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1ff58     F2 16 02 FB | 	rdlong	arg03, objptr
1ff5c     D2 16 06 F1 | 	add	arg03, #210
1ff60     0B 21 58 FC | 	wrword	#16, arg03
1ff64                 | ' leading_spaces:=0				'
1ff64     A5 E5 05 F1 | 	add	objptr, #421
1ff68     F2 00 68 FC | 	wrlong	#0, objptr
1ff6c                 | ' 
1ff6c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1ff6c     99 E4 85 F1 | 	sub	objptr, #153
1ff70     00 00 A0 FF 
1ff74     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1ff78                 | ' emptydl[1]:=0
1ff78     04 E4 05 F1 | 	add	objptr, #4
1ff7c     F2 00 68 FC | 	wrlong	#0, objptr
1ff80                 | ' 
1ff80                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1ff80                 | ' 
1ff80                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1ff80     28 E5 85 F1 | 	sub	objptr, #296
1ff84     F2 02 68 FC | 	wrlong	#1, objptr
1ff88                 | ' if s_debug<>0
1ff88                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1ff88     20 00 80 FF 
1ff8c     F2 00 68 FC | 	wrlong	##16384, objptr
1ff90     F9 E4 85 F1 | 	sub	objptr, #249
1ff94                 | ' setmode()							' set the mode, see below
1ff94     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1ff98                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1ff98     49 E4 05 F1 | 	add	objptr, #73
1ff9c     F2 FA 01 F6 | 	mov	result1, objptr
1ffa0     35 E4 85 F1 | 	sub	objptr, #53
1ffa4     F2 FA 61 FC | 	wrlong	result1, objptr
1ffa8                 | ' cursor_ptr:=@cursor_x						
1ffa8     28 E4 05 F1 | 	add	objptr, #40
1ffac     F2 16 02 F6 | 	mov	arg03, objptr
1ffb0     2C E4 85 F1 | 	sub	objptr, #44
1ffb4     F2 16 62 FC | 	wrlong	arg03, objptr
1ffb8                 | ' fontnum:=0  							' start with a PC type font 
1ffb8     55 E4 05 F1 | 	add	objptr, #85
1ffbc     F2 00 68 FC | 	wrlong	#0, objptr
1ffc0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1ffc0     1C E4 05 F1 | 	add	objptr, #28
1ffc4     F2 12 02 F6 | 	mov	arg01, objptr
1ffc8     81 E4 85 F1 | 	sub	objptr, #129
1ffcc     10 00 00 FF 
1ffd0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1ffd4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ffd8     10 00 00 FF 
1ffdc     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1ffe0     10 16 06 F6 | 	mov	arg03, #16
1ffe4     CC 2E B0 FD | 	call	#__system____builtin_memmove
1ffe8                 | ' leading_spaces:=0
1ffe8     01 00 00 FF 
1ffec     B6 E4 05 F1 | 	add	objptr, ##694
1fff0     F2 00 68 FC | 	wrlong	#0, objptr
1fff4     01 00 00 FF 
1fff8     B6 E4 85 F1 | 	sub	objptr, ##694
1fffc                 | ' '---------------------------- initialize a cursor (MSDOS type)
1fffc                 | ' 
1fffc                 | ' initcursor(154)
1fffc     9A 12 06 F6 | 	mov	arg01, #154
20000     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
20004                 | ' 
20004                 | ' '---------------------------- start the cog
20004                 | ' 
20004                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
20004     10 00 00 FF 
20008     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
2000c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
20010     10 00 00 FF 
20014     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
20018     14 E4 05 F1 | 	add	objptr, #20
2001c     10 FA 05 F6 | 	mov	result1, #16
20020     28 E4 61 FD | 	setq	objptr
20024     0A FB F1 FC | 	coginit	result1, arg02 wc
20028     01 FA 65 C6 |  if_b	neg	result1, #1
2002c     1C E4 05 F1 | 	add	objptr, #28
20030     F2 FA 61 FC | 	wrlong	result1, objptr
20034     30 E4 85 F1 | 	sub	objptr, #48
20038                 | ' waitms(40)							' wait for stabilize
20038     28 12 06 F6 | 	mov	arg01, #40
2003c     48 32 B0 FD | 	call	#__system___waitms
20040                 | ' return cog							' return the driver's cog #
20040     30 E4 05 F1 | 	add	objptr, #48
20044     F2 FA 01 FB | 	rdlong	result1, objptr
20048     30 E4 85 F1 | 	sub	objptr, #48
2004c                 | _hg010b_spin2_start_ret
2004c     2D 00 64 FD | 	ret
20050                 | 
20050                 | ' 
20050                 | ' 
20050                 | ' '**************************************************************************************************************** 
20050                 | ' '                                                                                                             	*
20050                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
20050                 | ' '  Mode number - see start() above or bits below								*
20050                 | ' '                                                                                                             	*
20050                 | ' '****************************************************************************************************************
20050                 | ' 
20050                 | ' '---------------------------- initialize a cursor (MSDOS type)
20050                 | ' pub initcursor(color) |i
20050                 | _hg010b_spin2_initcursor
20050     03 4A 05 F6 | 	mov	COUNT_, #3
20054     A8 00 A0 FD | 	call	#pushregs_
20058     09 27 02 F6 | 	mov	local01, arg01
2005c                 | ' 
2005c                 | ' cursor_x:=0							' place the cursor at 0:0
2005c     3C E4 05 F1 | 	add	objptr, #60
20060     F2 00 58 FC | 	wrword	#0, objptr
20064                 | ' cursor_y:=0
20064     02 E4 05 F1 | 	add	objptr, #2
20068     F2 00 48 FC | 	wrbyte	#0, objptr
2006c                 | ' repeat i from 0 to 111
2006c     00 28 06 F6 | 	mov	local02, #0
20070     F8 E5 05 F1 | 	add	objptr, #504
20074     97 1A 48 FB | 	callpa	#(@LR__2482-@LR__2480)>>2,fcache_load_ptr_
20078                 | LR__2480
20078                 | '   cursor[i]:=0
20078     14 2B 02 F6 | 	mov	local03, local02
2007c     F2 2A 02 F1 | 	add	local03, objptr
20080     15 01 48 FC | 	wrbyte	#0, local03
20084     01 28 06 F1 | 	add	local02, #1
20088     70 28 56 F2 | 	cmps	local02, #112 wc
2008c     E8 FF 9F CD |  if_b	jmp	#LR__2480
20090                 | ' repeat i from 112 to 127
20090     70 28 06 F6 | 	mov	local02, #112
20094                 | LR__2481
20094                 | '   cursor[i]:=color  
20094     14 2B 02 F6 | 	mov	local03, local02
20098     F2 2A 02 F1 | 	add	local03, objptr
2009c     15 27 42 FC | 	wrbyte	local01, local03
200a0     01 28 06 F1 | 	add	local02, #1
200a4     80 28 16 F2 | 	cmp	local02, #128 wc
200a8     E8 FF 9F CD |  if_b	jmp	#LR__2481
200ac                 | LR__2482
200ac                 | ' 'repeat i from 0 to 127
200ac                 | ' '  if ((i/8)//2)
200ac                 | ' '    cursor[i]:=15
200ac                 | ' '  else
200ac                 | ' '    cursor[i]:=0
200ac                 | ' '  if i>=120    
200ac                 | ' '    cursor[i]:=40
200ac                 | ' setspriteptr(17,@cursor)
200ac     F2 14 02 F6 | 	mov	arg02, objptr
200b0     01 00 00 FF 
200b4     36 E4 85 F1 | 	sub	objptr, ##566
200b8     11 12 06 F6 | 	mov	arg01, #17
200bc     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
200c0                 | ' setspritesize(17,8,16)
200c0     11 12 06 F6 | 	mov	arg01, #17
200c4     08 14 06 F6 | 	mov	arg02, #8
200c8     10 16 06 F6 | 	mov	arg03, #16
200cc     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
200d0                 | ' setspritepos(17,0,0)
200d0     11 12 06 F6 | 	mov	arg01, #17
200d4     00 14 06 F6 | 	mov	arg02, #0
200d8     00 16 06 F6 | 	mov	arg03, #0
200dc     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
200e0                 | ' cursorshape:=14
200e0     0B 00 00 FF 
200e4     C6 E4 05 F1 | 	add	objptr, ##5830
200e8     F2 1C 68 FC | 	wrlong	#14, objptr
200ec                 | ' cursorcolor:=color
200ec     04 E4 85 F1 | 	sub	objptr, #4
200f0     F2 26 62 FC | 	wrlong	local01, objptr
200f4     0B 00 00 FF 
200f8     C2 E4 85 F1 | 	sub	objptr, ##5826
200fc     A7 F0 03 F6 | 	mov	ptra, fp
20100     B2 00 A0 FD | 	call	#popregs_
20104                 | _hg010b_spin2_initcursor_ret
20104     2D 00 64 FD | 	ret
20108                 | 
20108                 | ' 
20108                 | ' pub setcursorshape(shape) | i
20108                 | _hg010b_spin2_setcursorshape
20108                 | ' 
20108                 | ' cursorshape:=shape
20108     0B 00 00 FF 
2010c     C6 E4 05 F1 | 	add	objptr, ##5830
20110     F2 12 62 FC | 	wrlong	arg01, objptr
20114                 | ' repeat i from 0 to (8*cursorshape)-1
20114     00 00 06 F6 | 	mov	_var01, #0
20118     09 03 02 F6 | 	mov	_var02, arg01
2011c     03 02 66 F0 | 	shl	_var02, #3
20120     01 02 86 F1 | 	sub	_var02, #1
20124     00 02 56 F2 | 	cmps	_var02, #0 wc
20128     01 04 86 F6 | 	negc	_var03, #1
2012c     02 07 02 F6 | 	mov	_var04, _var03
20130     02 03 02 F1 | 	add	_var02, _var03
20134     0A 00 00 FF 
20138     90 E4 85 F1 | 	sub	objptr, ##5264
2013c     97 0C 48 FB | 	callpa	#(@LR__2491-@LR__2490)>>2,fcache_load_ptr_
20140                 | LR__2490
20140                 | '   cursor[i]:=0
20140     00 05 02 F6 | 	mov	_var03, _var01
20144     F2 04 02 F1 | 	add	_var03, objptr
20148     02 01 48 FC | 	wrbyte	#0, _var03
2014c     03 01 02 F1 | 	add	_var01, _var04
20150     01 01 0A F2 | 	cmp	_var01, _var02 wz
20154     E8 FF 9F 5D |  if_ne	jmp	#LR__2490
20158                 | LR__2491
20158                 | ' repeat i from 8*cursorshape to 127
20158     0A 00 00 FF 
2015c     90 E4 05 F1 | 	add	objptr, ##5264
20160     F2 06 02 FB | 	rdlong	_var04, objptr
20164     03 01 02 F6 | 	mov	_var01, _var04
20168     03 00 66 F0 | 	shl	_var01, #3
2016c     0B 00 00 FF 
20170     C6 E4 85 F1 | 	sub	objptr, ##5830
20174     03 06 66 F0 | 	shl	_var04, #3
20178     80 06 56 F2 | 	cmps	_var04, #128 wc
2017c     01 04 A6 F6 | 	negnc	_var03, #1
20180     7F 02 06 F6 | 	mov	_var02, #127
20184     02 03 02 F1 | 	add	_var02, _var03
20188     97 1A 48 FB | 	callpa	#(@LR__2493-@LR__2492)>>2,fcache_load_ptr_
2018c                 | LR__2492
2018c                 | '   cursor[i]:=cursorcolor
2018c     00 07 02 F6 | 	mov	_var04, _var01
20190     01 00 00 FF 
20194     36 E4 05 F1 | 	add	objptr, ##566
20198     F2 06 02 F1 | 	add	_var04, objptr
2019c     0A 00 00 FF 
201a0     8C E4 05 F1 | 	add	objptr, ##5260
201a4     F2 12 02 FB | 	rdlong	arg01, objptr
201a8     0B 00 00 FF 
201ac     C2 E4 85 F1 | 	sub	objptr, ##5826
201b0     03 13 42 FC | 	wrbyte	arg01, _var04
201b4     02 01 02 F1 | 	add	_var01, _var03
201b8     01 01 0A F2 | 	cmp	_var01, _var02 wz
201bc     CC FF 9F 5D |  if_ne	jmp	#LR__2492
201c0                 | LR__2493
201c0                 | _hg010b_spin2_setcursorshape_ret
201c0     2D 00 64 FD | 	ret
201c4                 | 
201c4                 | ' 
201c4                 | ' pub setcursorcolor(color) | i
201c4                 | _hg010b_spin2_setcursorcolor
201c4                 | ' 
201c4                 | ' cursorcolor:=color
201c4     0B 00 00 FF 
201c8     C2 E4 05 F1 | 	add	objptr, ##5826
201cc     F2 12 62 FC | 	wrlong	arg01, objptr
201d0                 | ' repeat i from 0 to (8*cursorshape)-1
201d0     00 12 06 F6 | 	mov	arg01, #0
201d4     04 E4 05 F1 | 	add	objptr, #4
201d8     F2 00 02 FB | 	rdlong	_var01, objptr
201dc     03 00 66 F0 | 	shl	_var01, #3
201e0     01 00 86 F1 | 	sub	_var01, #1
201e4     00 00 56 F2 | 	cmps	_var01, #0 wc
201e8     01 02 86 F6 | 	negc	_var02, #1
201ec     01 05 02 F6 | 	mov	_var03, _var02
201f0     01 01 02 F1 | 	add	_var01, _var02
201f4     0A 00 00 FF 
201f8     90 E4 85 F1 | 	sub	objptr, ##5264
201fc     97 0C 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
20200                 | LR__2500
20200                 | '   cursor[i]:=0
20200     09 03 02 F6 | 	mov	_var02, arg01
20204     F2 02 02 F1 | 	add	_var02, objptr
20208     01 01 48 FC | 	wrbyte	#0, _var02
2020c     02 13 02 F1 | 	add	arg01, _var03
20210     00 13 0A F2 | 	cmp	arg01, _var01 wz
20214     E8 FF 9F 5D |  if_ne	jmp	#LR__2500
20218                 | LR__2501
20218                 | ' repeat i from 8*cursorshape to 127
20218     0A 00 00 FF 
2021c     90 E4 05 F1 | 	add	objptr, ##5264
20220     F2 04 02 FB | 	rdlong	_var03, objptr
20224     02 13 02 F6 | 	mov	arg01, _var03
20228     03 12 66 F0 | 	shl	arg01, #3
2022c     0B 00 00 FF 
20230     C6 E4 85 F1 | 	sub	objptr, ##5830
20234     03 04 66 F0 | 	shl	_var03, #3
20238     80 04 56 F2 | 	cmps	_var03, #128 wc
2023c     01 02 A6 F6 | 	negnc	_var02, #1
20240     7F 00 06 F6 | 	mov	_var01, #127
20244     01 01 02 F1 | 	add	_var01, _var02
20248     97 1A 48 FB | 	callpa	#(@LR__2503-@LR__2502)>>2,fcache_load_ptr_
2024c                 | LR__2502
2024c                 | '   cursor[i]:=cursorcolor
2024c     09 05 02 F6 | 	mov	_var03, arg01
20250     01 00 00 FF 
20254     36 E4 05 F1 | 	add	objptr, ##566
20258     F2 04 02 F1 | 	add	_var03, objptr
2025c     0A 00 00 FF 
20260     8C E4 05 F1 | 	add	objptr, ##5260
20264     F2 06 02 FB | 	rdlong	_var04, objptr
20268     0B 00 00 FF 
2026c     C2 E4 85 F1 | 	sub	objptr, ##5826
20270     02 07 42 FC | 	wrbyte	_var04, _var03
20274     01 13 02 F1 | 	add	arg01, _var02
20278     00 13 0A F2 | 	cmp	arg01, _var01 wz
2027c     CC FF 9F 5D |  if_ne	jmp	#LR__2502
20280                 | LR__2503
20280                 | _hg010b_spin2_setcursorcolor_ret
20280     2D 00 64 FD | 	ret
20284                 | 
20284                 | '   
20284                 | '   
20284                 | '   
20284                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
20284                 | _hg010b_spin2_setmode
20284     02 4A 05 F6 | 	mov	COUNT_, #2
20288     A8 00 A0 FD | 	call	#pushregs_
2028c                 | ' 
2028c                 | ' 
2028c                 | ' dl_ptr:=@emptydl[0]
2028c     01 00 00 FF 
20290     1D E4 05 F1 | 	add	objptr, ##541
20294     F2 1A 02 F6 | 	mov	arg05, objptr
20298     FD E5 85 F1 | 	sub	objptr, #509
2029c     F2 1A 62 FC | 	wrlong	arg05, objptr
202a0                 | ' 
202a0                 | ' if cog>0 
202a0     10 E4 05 F1 | 	add	objptr, #16
202a4     F2 1A 02 FB | 	rdlong	arg05, objptr
202a8     30 E4 85 F1 | 	sub	objptr, #48
202ac     01 1A 56 F2 | 	cmps	arg05, #1 wc
202b0                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
202b0     01 12 06 36 |  if_ae	mov	arg01, #1
202b4     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
202b8                 | ' xres:=1024
202b8     01 00 00 FF 
202bc     26 E4 05 F1 | 	add	objptr, ##550
202c0     02 00 80 FF 
202c4     F2 00 68 FC | 	wrlong	##1024, objptr
202c8                 | ' yres:=600
202c8     04 E4 05 F1 | 	add	objptr, #4
202cc     01 00 80 FF 
202d0     F2 B0 68 FC | 	wrlong	##600, objptr
202d4                 | ' ppl:=(timings[3])
202d4     10 00 00 FF 
202d8     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
202dc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
202e0     51 E5 85 F1 | 	sub	objptr, #337
202e4     F2 1A 62 FC | 	wrlong	arg05, objptr
202e8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
202e8     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
202ec     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
202f0     01 26 66 F0 | 	shl	local01, #1
202f4     80 E4 85 F1 | 	sub	objptr, #128
202f8     F2 26 62 FC | 	wrlong	local01, objptr
202fc                 | ' cpl1:=cpl '' todo remove
202fc     04 E4 05 F1 | 	add	objptr, #4
20300     F2 26 62 FC | 	wrlong	local01, objptr
20304                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
20304     02 00 00 FF 
20308     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
2030c     41 E4 85 F1 | 	sub	objptr, #65
20310     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
20314                 | ' repeat i from 0 to 3
20314     00 28 06 F6 | 	mov	local02, #0
20318     02 00 00 FF 
2031c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
20320     08 E4 05 F1 | 	add	objptr, #8
20324     97 20 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
20328                 | LR__2510
20328                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
20328     14 27 02 F6 | 	mov	local01, local02
2032c     02 26 66 F0 | 	shl	local01, #2
20330     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
20334     F2 1A 02 FB | 	rdlong	arg05, objptr
20338     11 1A 66 F0 | 	shl	arg05, #17
2033c     13 27 02 FB | 	rdlong	local01, local01
20340     0D 27 02 F1 | 	add	local01, arg05
20344     80 40 38 FF 
20348     00 26 06 F1 | 	add	local01, ##1887502336
2034c     14 1B 02 F6 | 	mov	arg05, local02
20350     02 1A 66 F0 | 	shl	arg05, #2
20354     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
20358     0D 27 62 FC | 	wrlong	local01, arg05
2035c     01 28 06 F1 | 	add	local02, #1
20360     04 28 56 F2 | 	cmps	local02, #4 wc
20364     C0 FF 9F CD |  if_b	jmp	#LR__2510
20368                 | LR__2511
20368     24 E4 85 F1 | 	sub	objptr, #36
2036c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
2036c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
20370     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
20374     14 26 66 FC | 	wrlong	local01, #20
20378                 | ' hubset(timings[10])
20378     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
2037c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
20380     10 00 00 FF 
20384     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
20388     00 12 62 FD | 	hubset	arg01
2038c                 | ' waitms(1)                                                   	' wait for stabilization
2038c     01 12 06 F6 | 	mov	arg01, #1
20390     F4 2E B0 FD | 	call	#__system___waitms
20394     10 00 00 FF 
20398     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
2039c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
203a0     61 E4 05 F1 | 	add	objptr, #97
203a4     F2 28 62 FC | 	wrlong	local02, objptr
203a8     14 27 52 F6 | 	abs	local01, local02 wc
203ac     04 26 46 F0 | 	shr	local01, #4
203b0     13 27 82 F6 | 	negc	local01, local01
203b4     9C E4 05 F1 | 	add	objptr, #156
203b8     F2 26 62 FC | 	wrlong	local01, objptr
203bc     A4 E4 85 F1 | 	sub	objptr, #164
203c0     F2 28 02 FB | 	rdlong	local02, objptr
203c4     08 E4 05 F1 | 	add	objptr, #8
203c8     F2 26 02 FB | 	rdlong	local01, objptr
203cc     13 29 02 FD | 	qmul	local02, local01
203d0                 | ' lines:=timings[11]
203d0                 | ' t_lines:=lines/16
203d0                 | ' buflen:=cpl*lines						' framebuffer length in longs
203d0     29 E4 85 F1 | 	sub	objptr, #41
203d4     19 26 C6 F9 | 	decod	local01, #25
203d8     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
203dc     18 28 62 FD | 	getqx	local02
203e0     F2 28 62 FC | 	wrlong	local02, objptr
203e4     38 E4 85 F1 | 	sub	objptr, #56
203e8     02 28 66 F0 | 	shl	local02, #2
203ec     14 27 82 F1 | 	sub	local01, local02
203f0     F2 26 62 FC | 	wrlong	local01, objptr
203f4     FD E4 05 F1 | 	add	objptr, #253
203f8     F2 28 02 FB | 	rdlong	local02, objptr
203fc     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
20400     0D 29 02 FD | 	qmul	local02, arg05
20404                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
20404                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
20404     F9 E4 85 F1 | 	sub	objptr, #249
20408                 | ' mode_ptr:=@timings						' set pointers to timings
20408     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
2040c                 | ' graphmode:=1024+512+192+48							' det global variable
2040c                 | ' makedl(graphmode)							' make a DL for the mode
2040c     03 00 00 FF 
20410     F0 12 06 F6 | 	mov	arg01, ##1776
20414     18 28 62 FD | 	getqx	local02
20418     14 27 82 F1 | 	sub	local01, local02
2041c     F2 26 62 FC | 	wrlong	local01, objptr
20420     14 E4 05 F1 | 	add	objptr, #20
20424     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
20428     79 E4 05 F1 | 	add	objptr, #121
2042c     03 00 80 FF 
20430     F2 E0 69 FC | 	wrlong	##1776, objptr
20434     91 E4 85 F1 | 	sub	objptr, #145
20438     10 00 00 FF 
2043c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
20440     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
20444                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
20444     F2 26 02 FB | 	rdlong	local01, objptr
20448     DD E4 05 F1 | 	add	objptr, #221
2044c     F2 26 62 FC | 	wrlong	local01, objptr
20450                 | ' s_font_ptr:=font_ptr
20450     D5 E4 85 F1 | 	sub	objptr, #213
20454     F2 26 02 FB | 	rdlong	local01, objptr
20458     D9 E4 05 F1 | 	add	objptr, #217
2045c     F2 26 62 FC | 	wrlong	local01, objptr
20460                 | ' s_lines:=lines
20460     80 E4 85 F1 | 	sub	objptr, #128
20464     F2 26 02 FB | 	rdlong	local01, objptr
20468     84 E4 05 F1 | 	add	objptr, #132
2046c     F2 26 62 FC | 	wrlong	local01, objptr
20470                 | ' s_buflen:=buflen
20470     AD E4 85 F1 | 	sub	objptr, #173
20474     F2 26 02 FB | 	rdlong	local01, objptr
20478     B5 E4 05 F1 | 	add	objptr, #181
2047c     F2 26 62 FC | 	wrlong	local01, objptr
20480                 | ' s_cpl:=cpl
20480     94 E4 85 F1 | 	sub	objptr, #148
20484     F2 26 02 FB | 	rdlong	local01, objptr
20488     90 E4 05 F1 | 	add	objptr, #144
2048c     F2 26 62 FC | 	wrlong	local01, objptr
20490                 | ' s_cpl1:=cpl
20490     90 E4 85 F1 | 	sub	objptr, #144
20494     F2 26 02 FB | 	rdlong	local01, objptr
20498     98 E4 05 F1 | 	add	objptr, #152
2049c     F2 26 62 FC | 	wrlong	local01, objptr
204a0                 | ' st_lines:=t_lines
204a0     0C E4 05 F1 | 	add	objptr, #12
204a4     F2 26 02 FB | 	rdlong	local01, objptr
204a8     04 E4 05 F1 | 	add	objptr, #4
204ac     F2 26 62 FC | 	wrlong	local01, objptr
204b0                 | ' ppl:=ppl/xzoom  
204b0     28 E4 85 F1 | 	sub	objptr, #40
204b4     F2 88 02 FB | 	rdlong	muldiva_, objptr
204b8     2C E4 05 F1 | 	add	objptr, #44
204bc     F2 8A 02 FB | 	rdlong	muldivb_, objptr
204c0     05 E5 85 F1 | 	sub	objptr, #261
204c4     BA 00 A0 FD | 	call	#divide_
204c8     D9 E4 05 F1 | 	add	objptr, #217
204cc     F2 8A 62 FC | 	wrlong	muldivb_, objptr
204d0                 | ' s_ppl:=ppl
204d0     1C E4 05 F1 | 	add	objptr, #28
204d4     F2 8A 62 FC | 	wrlong	muldivb_, objptr
204d8     F5 E4 85 F1 | 	sub	objptr, #245
204dc                 | ' waitms(20)							' wait 
204dc     14 12 06 F6 | 	mov	arg01, #20
204e0     A4 2D B0 FD | 	call	#__system___waitms
204e4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
204e4     04 E4 05 F1 | 	add	objptr, #4
204e8     F2 12 02 FB | 	rdlong	arg01, objptr
204ec     04 E4 85 F1 | 	sub	objptr, #4
204f0     F2 16 02 FB | 	rdlong	arg03, objptr
204f4     09 17 82 F1 | 	sub	arg03, arg01
204f8     20 14 06 F6 | 	mov	arg02, #32
204fc     00 18 06 F6 | 	mov	arg04, #0
20500     01 1A 06 F6 | 	mov	arg05, #1
20504     0B 00 00 FF 
20508     CC E4 05 F1 | 	add	objptr, ##5836
2050c     7C 1F B0 FD | 	call	#_psram_spin2_fill
20510     0B 00 00 FF 
20514     CC E4 85 F1 | 	sub	objptr, ##5836
20518     A7 F0 03 F6 | 	mov	ptra, fp
2051c     B2 00 A0 FD | 	call	#popregs_
20520                 | _hg010b_spin2_setmode_ret
20520     2D 00 64 FD | 	ret
20524                 | 
20524                 | ' 
20524                 | ' '****************************************************************************************************************
20524                 | ' '                                                                                                             	*
20524                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
20524                 | ' '                                                                                                             	*
20524                 | ' '****************************************************************************************************************
20524                 | ' 
20524                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
20524                 | _hg010b_spin2_makedl
20524                 | ' 
20524                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
20524                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
20524                 | ' repeat i from 0 to 11                                                           ' clear DL
20524     00 00 06 F6 | 	mov	_var01, #0
20528     ED E5 05 F1 | 	add	objptr, #493
2052c     97 0E 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
20530                 | LR__2520
20530                 | '   displaylist[i]:=0 
20530     00 03 02 F6 | 	mov	_var02, _var01
20534     02 02 66 F0 | 	shl	_var02, #2
20538     F2 02 02 F1 | 	add	_var02, objptr
2053c     01 01 68 FC | 	wrlong	#0, _var02
20540     01 00 06 F1 | 	add	_var01, #1
20544     0C 00 56 F2 | 	cmps	_var01, #12 wc
20548     E4 FF 9F CD |  if_b	jmp	#LR__2520
2054c                 | LR__2521
2054c                 | '                         ' 
2054c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
2054c     8C E5 85 F1 | 	sub	objptr, #396
20550     F2 02 02 FB | 	rdlong	_var02, objptr
20554     14 02 66 F0 | 	shl	_var02, #20
20558     01 02 06 F1 | 	add	_var02, #1
2055c     04 E4 85 F1 | 	sub	objptr, #4
20560     F2 00 02 FB | 	rdlong	_var01, objptr
20564     02 00 66 F0 | 	shl	_var01, #2
20568     04 00 66 F0 | 	shl	_var01, #4
2056c     00 03 02 F1 | 	add	_var02, _var01
20570     90 E5 05 F1 | 	add	objptr, #400
20574     F2 02 62 FC | 	wrlong	_var02, objptr
20578     ED E5 85 F1 | 	sub	objptr, #493
2057c                 | ' displaylist[1]:=buf_ptr<<4+%10  
2057c     F2 02 02 FB | 	rdlong	_var02, objptr
20580     04 02 66 F0 | 	shl	_var02, #4
20584     02 02 06 F1 | 	add	_var02, #2
20588     F1 E5 05 F1 | 	add	objptr, #497
2058c     F2 02 62 FC | 	wrlong	_var02, objptr
20590                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
20590     04 E4 85 F1 | 	sub	objptr, #4
20594     F2 02 02 F6 | 	mov	_var02, objptr
20598     CD E5 85 F1 | 	sub	objptr, #461
2059c     F2 02 62 FC | 	wrlong	_var02, objptr
205a0     20 E4 85 F1 | 	sub	objptr, #32
205a4                 | _hg010b_spin2_makedl_ret
205a4     2D 00 64 FD | 	ret
205a8                 | 
205a8                 | ' 
205a8                 | ' 
205a8                 | ' '****************************************************************************************************************
205a8                 | ' '                                                                        					*
205a8                 | ' '  Graphic primitives                                                    					*
205a8                 | ' '                                                                        					*
205a8                 | ' '****************************************************************************************************************
205a8                 | ' 
205a8                 | ' pub setspriteptr(num,ptr)
205a8                 | _hg010b_spin2_setspriteptr
205a8                 | ' long[@spr1ptr+12*num]:=ptr
205a8     11 E5 05 F1 | 	add	objptr, #273
205ac     F2 00 02 F6 | 	mov	_var01, objptr
205b0     09 03 02 F6 | 	mov	_var02, arg01
205b4     01 02 66 F0 | 	shl	_var02, #1
205b8     09 03 02 F1 | 	add	_var02, arg01
205bc     02 02 66 F0 | 	shl	_var02, #2
205c0     01 01 02 F1 | 	add	_var01, _var02
205c4     00 15 62 FC | 	wrlong	arg02, _var01
205c8     11 E5 85 F1 | 	sub	objptr, #273
205cc                 | _hg010b_spin2_setspriteptr_ret
205cc     2D 00 64 FD | 	ret
205d0                 | 
205d0                 | ' 
205d0                 | ' pub setspritepos(num,x,y)
205d0                 | _hg010b_spin2_setspritepos
205d0                 | ' if y>601
205d0     01 00 00 FF 
205d4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
205d8                 | '   y:=601
205d8     01 00 00 3F 
205dc     59 16 06 36 |  if_ae	mov	arg03, ##601
205e0                 | ' if x>1024
205e0     02 00 00 FF 
205e4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
205e8                 | '   x:=1024
205e8     0A 14 C6 39 |  if_ae	decod	arg02, #10
205ec                 | ' word[@spr1ptr+12*num+4]:=x
205ec     11 E5 05 F1 | 	add	objptr, #273
205f0     F2 00 02 F6 | 	mov	_var01, objptr
205f4     09 03 02 F6 | 	mov	_var02, arg01
205f8     01 02 66 F0 | 	shl	_var02, #1
205fc     09 03 02 F1 | 	add	_var02, arg01
20600     02 02 66 F0 | 	shl	_var02, #2
20604     01 01 02 F1 | 	add	_var01, _var02
20608     04 00 06 F1 | 	add	_var01, #4
2060c     00 15 52 FC | 	wrword	arg02, _var01
20610                 | ' word[@spr1ptr+12*num+6]:=y
20610     F2 00 02 F6 | 	mov	_var01, objptr
20614     09 03 02 F6 | 	mov	_var02, arg01
20618     01 02 66 F0 | 	shl	_var02, #1
2061c     09 03 02 F1 | 	add	_var02, arg01
20620     02 02 66 F0 | 	shl	_var02, #2
20624     01 01 02 F1 | 	add	_var01, _var02
20628     06 00 06 F1 | 	add	_var01, #6
2062c     00 17 52 FC | 	wrword	arg03, _var01
20630     11 E5 85 F1 | 	sub	objptr, #273
20634                 | _hg010b_spin2_setspritepos_ret
20634     2D 00 64 FD | 	ret
20638                 | 
20638                 | ' 
20638                 | ' pub setspritesize(num,w,h)
20638                 | _hg010b_spin2_setspritesize
20638                 | ' word[@spr1ptr+12*num+8]:=w
20638     11 E5 05 F1 | 	add	objptr, #273
2063c     F2 00 02 F6 | 	mov	_var01, objptr
20640     09 03 02 F6 | 	mov	_var02, arg01
20644     01 02 66 F0 | 	shl	_var02, #1
20648     09 03 02 F1 | 	add	_var02, arg01
2064c     02 02 66 F0 | 	shl	_var02, #2
20650     01 01 02 F1 | 	add	_var01, _var02
20654     08 00 06 F1 | 	add	_var01, #8
20658     00 15 52 FC | 	wrword	arg02, _var01
2065c                 | ' word[@spr1ptr+12*num+10]:=h
2065c     F2 00 02 F6 | 	mov	_var01, objptr
20660     09 03 02 F6 | 	mov	_var02, arg01
20664     01 02 66 F0 | 	shl	_var02, #1
20668     09 03 02 F1 | 	add	_var02, arg01
2066c     02 02 66 F0 | 	shl	_var02, #2
20670     01 01 02 F1 | 	add	_var01, _var02
20674     0A 00 06 F1 | 	add	_var01, #10
20678     00 17 52 FC | 	wrword	arg03, _var01
2067c     11 E5 85 F1 | 	sub	objptr, #273
20680                 | _hg010b_spin2_setspritesize_ret
20680     2D 00 64 FD | 	ret
20684                 | 
20684                 | ' 
20684                 | ' 
20684                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
20684                 | ' 
20684                 | ' 
20684                 | ' pub putpixel(x,y,c)
20684                 | _hg010b_spin2_putpixel
20684     04 4A 05 F6 | 	mov	COUNT_, #4
20688     A8 00 A0 FD | 	call	#pushregs_
2068c     09 27 02 F6 | 	mov	local01, arg01
20690                 | ' 
20690                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
20690     00 28 06 F6 | 	mov	local02, #0
20694     00 26 56 F2 | 	cmps	local01, #0 wc
20698     01 28 66 36 |  if_ae	neg	local02, #1
2069c     E9 E4 05 F1 | 	add	objptr, #233
206a0     F2 1A 02 FB | 	rdlong	arg05, objptr
206a4     02 1A 66 F0 | 	shl	arg05, #2
206a8     0D 27 52 F2 | 	cmps	local01, arg05 wc
206ac     15 2B A2 F1 | 	subx	local03, local03
206b0     15 29 02 F5 | 	and	local02, local03
206b4     00 2A 06 F6 | 	mov	local03, #0
206b8     00 14 56 F2 | 	cmps	arg02, #0 wc
206bc     01 2A 66 36 |  if_ae	neg	local03, #1
206c0     15 29 02 F5 | 	and	local02, local03
206c4     04 E4 85 F1 | 	sub	objptr, #4
206c8     F2 2A 02 FB | 	rdlong	local03, objptr
206cc     E5 E4 85 F1 | 	sub	objptr, #229
206d0     15 15 52 F2 | 	cmps	arg02, local03 wc
206d4     16 2D A2 F1 | 	subx	local04, local04
206d8     16 29 CA F7 | 	test	local02, local04 wz
206dc     48 00 90 AD |  if_e	jmp	#LR__2530
206e0     DD E4 05 F1 | 	add	objptr, #221
206e4     F2 12 02 FB | 	rdlong	arg01, objptr
206e8     14 E4 05 F1 | 	add	objptr, #20
206ec     F2 2C 02 FB | 	rdlong	local04, objptr
206f0     02 2C 66 F0 | 	shl	local04, #2
206f4     0A 2D 02 FD | 	qmul	local04, arg02
206f8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
206f8     0B 15 02 F6 | 	mov	arg02, arg03
206fc     01 16 06 F6 | 	mov	arg03, #1
20700     00 18 06 F6 | 	mov	arg04, #0
20704     01 1A 06 F6 | 	mov	arg05, #1
20708     0A 00 00 FF 
2070c     DB E5 05 F1 | 	add	objptr, ##5595
20710     18 2C 62 FD | 	getqx	local04
20714     13 2D 02 F1 | 	add	local04, local01
20718     16 13 02 F1 | 	add	arg01, local04
2071c     6C 1D B0 FD | 	call	#_psram_spin2_fill
20720     0B 00 00 FF 
20724     CC E4 85 F1 | 	sub	objptr, ##5836
20728                 | LR__2530
20728     A7 F0 03 F6 | 	mov	ptra, fp
2072c     B2 00 A0 FD | 	call	#popregs_
20730                 | _hg010b_spin2_putpixel_ret
20730     2D 00 64 FD | 	ret
20734                 | 
20734                 | ' 
20734                 | ' pub putpixel2(x,y,c)
20734                 | _hg010b_spin2_putpixel2
20734     02 4A 05 F6 | 	mov	COUNT_, #2
20738     A8 00 A0 FD | 	call	#pushregs_
2073c     DD E4 05 F1 | 	add	objptr, #221
20740     F2 26 02 FB | 	rdlong	local01, objptr
20744     14 E4 05 F1 | 	add	objptr, #20
20748     F2 1A 02 FB | 	rdlong	arg05, objptr
2074c     02 1A 66 F0 | 	shl	arg05, #2
20750     0A 1B 02 FD | 	qmul	arg05, arg02
20754                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
20754     0B 15 02 F6 | 	mov	arg02, arg03
20758     01 16 06 F6 | 	mov	arg03, #1
2075c     00 18 06 F6 | 	mov	arg04, #0
20760     01 1A 06 F6 | 	mov	arg05, #1
20764     0A 00 00 FF 
20768     DB E5 05 F1 | 	add	objptr, ##5595
2076c     18 28 62 FD | 	getqx	local02
20770     09 29 02 F1 | 	add	local02, arg01
20774     14 27 02 F1 | 	add	local01, local02
20778     13 13 02 F6 | 	mov	arg01, local01
2077c     0C 1D B0 FD | 	call	#_psram_spin2_fill
20780     0B 00 00 FF 
20784     CC E4 85 F1 | 	sub	objptr, ##5836
20788     A7 F0 03 F6 | 	mov	ptra, fp
2078c     B2 00 A0 FD | 	call	#popregs_
20790                 | _hg010b_spin2_putpixel2_ret
20790     2D 00 64 FD | 	ret
20794                 | 
20794                 | ' 
20794                 | ' pub getpixel2(x,y): c 
20794                 | _hg010b_spin2_getpixel2
20794     02 4A 05 F6 | 	mov	COUNT_, #2
20798     A8 00 A0 FD | 	call	#pushregs_
2079c     0C F0 07 F1 | 	add	ptra, #12
207a0     04 4E 05 F1 | 	add	fp, #4
207a4     A7 12 62 FC | 	wrlong	arg01, fp
207a8     04 4E 05 F1 | 	add	fp, #4
207ac     A7 14 62 FC | 	wrlong	arg02, fp
207b0     08 4E 85 F1 | 	sub	fp, #8
207b4     A7 00 68 FC | 	wrlong	#0, fp
207b8     A7 12 02 F6 | 	mov	arg01, fp
207bc     DD E4 05 F1 | 	add	objptr, #221
207c0     F2 14 02 FB | 	rdlong	arg02, objptr
207c4     14 E4 05 F1 | 	add	objptr, #20
207c8     F2 16 02 FB | 	rdlong	arg03, objptr
207cc     02 16 66 F0 | 	shl	arg03, #2
207d0     08 4E 05 F1 | 	add	fp, #8
207d4     A7 FA 01 FB | 	rdlong	result1, fp
207d8     FD 16 02 FD | 	qmul	arg03, result1
207dc                 | ' 
207dc                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
207dc     04 4E 85 F1 | 	sub	fp, #4
207e0     A7 26 02 FB | 	rdlong	local01, fp
207e4     04 4E 85 F1 | 	sub	fp, #4
207e8     01 16 06 F6 | 	mov	arg03, #1
207ec     0A 00 00 FF 
207f0     DB E5 05 F1 | 	add	objptr, ##5595
207f4     18 28 62 FD | 	getqx	local02
207f8     13 29 02 F1 | 	add	local02, local01
207fc     14 15 02 F1 | 	add	arg02, local02
20800     50 1B B0 FD | 	call	#_psram_spin2_read1
20804     0B 00 00 FF 
20808     CC E4 85 F1 | 	sub	objptr, ##5836
2080c                 | ' return c
2080c     A7 FA 01 FB | 	rdlong	result1, fp
20810     A7 F0 03 F6 | 	mov	ptra, fp
20814     B2 00 A0 FD | 	call	#popregs_
20818                 | _hg010b_spin2_getpixel2_ret
20818     2D 00 64 FD | 	ret
2081c                 | 
2081c                 | '   
2081c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
2081c                 | ' 
2081c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
2081c                 | _hg010b_spin2_fastline
2081c     02 4A 05 F6 | 	mov	COUNT_, #2
20820     A8 00 A0 FD | 	call	#pushregs_
20824     09 27 02 F6 | 	mov	local01, arg01
20828     0A 29 02 F6 | 	mov	local02, arg02
2082c                 | ' 
2082c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
2082c     00 16 56 F2 | 	cmps	arg03, #0 wc
20830     F4 00 90 CD |  if_b	jmp	#LR__2540
20834     01 00 00 FF 
20838     2A E4 05 F1 | 	add	objptr, ##554
2083c     F2 1A 02 FB | 	rdlong	arg05, objptr
20840     01 00 00 FF 
20844     2A E4 85 F1 | 	sub	objptr, ##554
20848     0D 17 52 F2 | 	cmps	arg03, arg05 wc
2084c     D8 00 90 3D |  if_ae	jmp	#LR__2540
20850     00 26 56 F2 | 	cmps	local01, #0 wc
20854     00 28 56 C2 |  if_b	cmps	local02, #0 wc
20858     CC 00 90 CD |  if_b	jmp	#LR__2540
2085c     01 00 00 FF 
20860     26 E4 05 F1 | 	add	objptr, ##550
20864     F2 1A 02 FB | 	rdlong	arg05, objptr
20868     01 00 00 FF 
2086c     26 E4 85 F1 | 	sub	objptr, ##550
20870     0D 27 5A F2 | 	cmps	local01, arg05 wcz
20874     01 00 00 1F 
20878     26 E4 05 11 |  if_a	add	objptr, ##550
2087c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
20880     01 00 00 1F 
20884     26 E4 85 11 |  if_a	sub	objptr, ##550
20888     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
2088c                 | '   return
2088c     98 00 90 1D |  if_a	jmp	#LR__2540
20890     14 27 5A F2 | 	cmps	local01, local02 wcz
20894     13 1B 02 16 |  if_a	mov	arg05, local01
20898     14 27 02 16 |  if_a	mov	local01, local02
2089c     0D 29 02 16 |  if_a	mov	local02, arg05
208a0     00 26 56 F2 | 	cmps	local01, #0 wc
208a4     00 26 06 C6 |  if_b	mov	local01, #0
208a8     01 00 00 FF 
208ac     26 E4 05 F1 | 	add	objptr, ##550
208b0     F2 1A 02 FB | 	rdlong	arg05, objptr
208b4     01 00 00 FF 
208b8     26 E4 85 F1 | 	sub	objptr, ##550
208bc     0D 29 52 F2 | 	cmps	local02, arg05 wc
208c0     01 00 00 3F 
208c4     26 E4 05 31 |  if_ae	add	objptr, ##550
208c8     F2 28 02 3B |  if_ae	rdlong	local02, objptr
208cc     01 00 00 3F 
208d0     26 E4 85 31 |  if_ae	sub	objptr, ##550
208d4     DD E4 05 F1 | 	add	objptr, #221
208d8     F2 12 02 FB | 	rdlong	arg01, objptr
208dc     14 E4 05 F1 | 	add	objptr, #20
208e0     F2 1A 02 FB | 	rdlong	arg05, objptr
208e4     02 1A 66 F0 | 	shl	arg05, #2
208e8     0B 1B 02 FD | 	qmul	arg05, arg03
208ec                 | ' if x1>x2
208ec                 | '   x1,x2:=x2,x1
208ec                 | ' if x1<0 
208ec                 | '   x1:=0
208ec                 | ' if x2>=xres
208ec                 | '   x2:=xres-1  
208ec     01 28 86 31 |  if_ae	sub	local02, #1
208f0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
208f0     01 16 06 F6 | 	mov	arg03, #1
208f4     14 17 02 F1 | 	add	arg03, local02
208f8     13 17 82 F1 | 	sub	arg03, local01
208fc     0C 15 02 F6 | 	mov	arg02, arg04
20900     00 18 06 F6 | 	mov	arg04, #0
20904     01 1A 06 F6 | 	mov	arg05, #1
20908     0A 00 00 FF 
2090c     DB E5 05 F1 | 	add	objptr, ##5595
20910     18 28 62 FD | 	getqx	local02
20914     13 29 02 F1 | 	add	local02, local01
20918     14 13 02 F1 | 	add	arg01, local02
2091c     6C 1B B0 FD | 	call	#_psram_spin2_fill
20920     0B 00 00 FF 
20924     CC E4 85 F1 | 	sub	objptr, ##5836
20928                 | LR__2540
20928     A7 F0 03 F6 | 	mov	ptra, fp
2092c     B2 00 A0 FD | 	call	#popregs_
20930                 | _hg010b_spin2_fastline_ret
20930     2D 00 64 FD | 	ret
20934                 | 
20934                 | ' 
20934                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
20934                 | _hg010b_spin2_draw
20934     0E 4A 05 F6 | 	mov	COUNT_, #14
20938     A8 00 A0 FD | 	call	#pushregs_
2093c     09 27 02 F6 | 	mov	local01, arg01
20940     0A 29 02 F6 | 	mov	local02, arg02
20944     0B 2B 02 F6 | 	mov	local03, arg03
20948     0C 2D 02 F6 | 	mov	local04, arg04
2094c     0D 2F 02 F6 | 	mov	local05, arg05
20950                 | ' 
20950                 | ' if (y1==y2)
20950     16 29 0A F2 | 	cmp	local02, local04 wz
20954     18 00 90 5D |  if_ne	jmp	#LR__2550
20958                 | '   fastline(x1,x2,y1,c)
20958     13 13 02 F6 | 	mov	arg01, local01
2095c     15 15 02 F6 | 	mov	arg02, local03
20960     14 17 02 F6 | 	mov	arg03, local02
20964     17 19 02 F6 | 	mov	arg04, local05
20968     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
2096c     F8 00 90 FD | 	jmp	#LR__2556
20970                 | LR__2550
20970                 | ' else  
20970                 | '   x:=x1
20970     13 31 02 F6 | 	mov	local06, local01
20974                 | '   y:=y1
20974     14 33 02 F6 | 	mov	local07, local02
20978                 | ' 
20978                 | '   if (x1<x2) 
20978     15 27 52 F2 | 	cmps	local01, local03 wc
2097c                 | '     xi:=1
2097c     01 34 06 C6 |  if_b	mov	local08, #1
20980                 | '     dx:=x2-x1
20980     15 37 02 C6 |  if_b	mov	local09, local03
20984     13 37 82 C1 |  if_b	sub	local09, local01
20988                 | '   else
20988                 | '     xi:=-1
20988     01 34 66 36 |  if_ae	neg	local08, #1
2098c                 | '     dx:=x1-x2
2098c     15 27 82 31 |  if_ae	sub	local01, local03
20990     13 37 02 36 |  if_ae	mov	local09, local01
20994                 | '   
20994                 | '   if (y1<y2) 
20994     16 29 52 F2 | 	cmps	local02, local04 wc
20998                 | '     yi:=1
20998     01 38 06 C6 |  if_b	mov	local10, #1
2099c                 | '     dy:=y2-y1
2099c     16 3B 02 C6 |  if_b	mov	local11, local04
209a0     14 3B 82 C1 |  if_b	sub	local11, local02
209a4                 | '   else
209a4                 | '     yi:=-1
209a4     01 38 66 36 |  if_ae	neg	local10, #1
209a8                 | '     dy:=y1-y2
209a8     16 29 82 31 |  if_ae	sub	local02, local04
209ac     14 3B 02 36 |  if_ae	mov	local11, local02
209b0                 | ' 
209b0                 | '   putpixel(x,y,c)
209b0     17 17 02 F6 | 	mov	arg03, local05
209b4     18 13 02 F6 | 	mov	arg01, local06
209b8     19 15 02 F6 | 	mov	arg02, local07
209bc     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
209c0                 | ' 
209c0                 | '   if (dx>dy)
209c0     1D 37 5A F2 | 	cmps	local09, local11 wcz
209c4     50 00 90 ED |  if_be	jmp	#LR__2552
209c8                 | '     ai:=(dy-dx)*2
209c8     1D 3D 02 F6 | 	mov	local12, local11
209cc     1B 3D 82 F1 | 	sub	local12, local09
209d0     01 3C 66 F0 | 	shl	local12, #1
209d4                 | '     bi:=dy*2
209d4     01 3A 66 F0 | 	shl	local11, #1
209d8     1D 3F 02 F6 | 	mov	local13, local11
209dc                 | '     d:= bi-dx
209dc     1F 41 02 F6 | 	mov	local14, local13
209e0     1B 41 82 F1 | 	sub	local14, local09
209e4                 | '     repeat while (x<>x2) 
209e4                 | LR__2551
209e4     15 31 0A F2 | 	cmp	local06, local03 wz
209e8     7C 00 90 AD |  if_e	jmp	#LR__2555
209ec                 | '       if (d>=0) 
209ec     00 40 56 F2 | 	cmps	local14, #0 wc
209f0                 | '         x+=xi
209f0     1A 31 02 31 |  if_ae	add	local06, local08
209f4                 | '         y+=yi
209f4     1C 33 02 31 |  if_ae	add	local07, local10
209f8                 | '         d+=ai
209f8     1E 41 02 31 |  if_ae	add	local14, local12
209fc                 | '       else
209fc                 | '         d+=bi
209fc     1F 41 02 C1 |  if_b	add	local14, local13
20a00                 | '         x+=xi
20a00     1A 31 02 C1 |  if_b	add	local06, local08
20a04                 | '       putpixel(x,y,c)
20a04     18 13 02 F6 | 	mov	arg01, local06
20a08     19 15 02 F6 | 	mov	arg02, local07
20a0c     17 17 02 F6 | 	mov	arg03, local05
20a10     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
20a14     CC FF 9F FD | 	jmp	#LR__2551
20a18                 | LR__2552
20a18                 | '   else
20a18                 | '     ai:=(dx-dy)*2
20a18     1B 3D 02 F6 | 	mov	local12, local09
20a1c     1D 3D 82 F1 | 	sub	local12, local11
20a20     01 3C 66 F0 | 	shl	local12, #1
20a24                 | '     bi:=dx*2
20a24     01 36 66 F0 | 	shl	local09, #1
20a28     1B 3F 02 F6 | 	mov	local13, local09
20a2c                 | '     d:=bi-dy
20a2c     1F 41 02 F6 | 	mov	local14, local13
20a30     1D 41 82 F1 | 	sub	local14, local11
20a34                 | '     repeat while (y<>y2)
20a34                 | LR__2553
20a34     16 33 0A F2 | 	cmp	local07, local04 wz
20a38     2C 00 90 AD |  if_e	jmp	#LR__2554
20a3c                 | '       if (d>=0)
20a3c     00 40 56 F2 | 	cmps	local14, #0 wc
20a40                 | '         x+=xi
20a40     1A 31 02 31 |  if_ae	add	local06, local08
20a44                 | '         y+=yi
20a44     1C 33 02 31 |  if_ae	add	local07, local10
20a48                 | '         d+=ai
20a48     1E 41 02 31 |  if_ae	add	local14, local12
20a4c                 | '       else
20a4c                 | '         d+=bi
20a4c     1F 41 02 C1 |  if_b	add	local14, local13
20a50                 | '         y+=yi
20a50     1C 33 02 C1 |  if_b	add	local07, local10
20a54                 | '       putpixel(x, y,c)
20a54     18 13 02 F6 | 	mov	arg01, local06
20a58     19 15 02 F6 | 	mov	arg02, local07
20a5c     17 17 02 F6 | 	mov	arg03, local05
20a60     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
20a64     CC FF 9F FD | 	jmp	#LR__2553
20a68                 | LR__2554
20a68                 | LR__2555
20a68                 | LR__2556
20a68     A7 F0 03 F6 | 	mov	ptra, fp
20a6c     B2 00 A0 FD | 	call	#popregs_
20a70                 | _hg010b_spin2_draw_ret
20a70     2D 00 64 FD | 	ret
20a74                 | 
20a74                 | '  
20a74                 | ' pub fillpush(val) 
20a74                 | _hg010b_spin2_fillpush
20a74                 | ' fillstack[fillptr]:=val
20a74     0B 00 00 FF 
20a78     BA E4 05 F1 | 	add	objptr, ##5818
20a7c     F2 00 02 FB | 	rdlong	_var01, objptr
20a80     02 00 66 F0 | 	shl	_var01, #2
20a84     0A 00 00 FF 
20a88     00 E4 85 F1 | 	sub	objptr, ##5120
20a8c     F2 00 02 F1 | 	add	_var01, objptr
20a90     00 13 62 FC | 	wrlong	arg01, _var01
20a94                 | ' fillptr+=1   
20a94     0A 00 00 FF 
20a98     00 E4 05 F1 | 	add	objptr, ##5120
20a9c     F2 00 02 FB | 	rdlong	_var01, objptr
20aa0     01 00 06 F1 | 	add	_var01, #1
20aa4     F2 00 62 FC | 	wrlong	_var01, objptr
20aa8     0B 00 00 FF 
20aac     BA E4 85 F1 | 	sub	objptr, ##5818
20ab0                 | _hg010b_spin2_fillpush_ret
20ab0     2D 00 64 FD | 	ret
20ab4                 | 
20ab4                 | ' 
20ab4                 | '     
20ab4                 | ' pub fillpop() : val
20ab4                 | _hg010b_spin2_fillpop
20ab4                 | ' 
20ab4                 | ' fillptr-=1
20ab4     0B 00 00 FF 
20ab8     BA E4 05 F1 | 	add	objptr, ##5818
20abc     F2 FA 01 FB | 	rdlong	result1, objptr
20ac0     01 FA 85 F1 | 	sub	result1, #1
20ac4     F2 FA 61 FC | 	wrlong	result1, objptr
20ac8                 | ' if fillptr<0
20ac8     0B 00 00 FF 
20acc     BA E4 85 F1 | 	sub	objptr, ##5818
20ad0     00 FA 55 F2 | 	cmps	result1, #0 wc
20ad4                 | '   fillptr:=0
20ad4     0B 00 00 CF 
20ad8     BA E4 05 C1 |  if_b	add	objptr, ##5818
20adc     F2 00 68 CC |  if_b	wrlong	#0, objptr
20ae0     0B 00 00 CF 
20ae4     BA E4 85 C1 |  if_b	sub	objptr, ##5818
20ae8                 | '   val:=-12345
20ae8     E7 FF 7F CF 
20aec     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
20af0     28 00 90 CD |  if_b	jmp	#LR__2560
20af4                 | ' else 
20af4                 | '   val:=fillstack[fillptr]
20af4     0B 00 00 FF 
20af8     BA E4 05 F1 | 	add	objptr, ##5818
20afc     F2 00 02 FB | 	rdlong	_var01, objptr
20b00     02 00 66 F0 | 	shl	_var01, #2
20b04     0A 00 00 FF 
20b08     00 E4 85 F1 | 	sub	objptr, ##5120
20b0c     F2 00 02 F1 | 	add	_var01, objptr
20b10     00 01 02 FB | 	rdlong	_var01, _var01
20b14     01 00 00 FF 
20b18     BA E4 85 F1 | 	sub	objptr, ##698
20b1c                 | LR__2560
20b1c                 | ' return val
20b1c     00 FB 01 F6 | 	mov	result1, _var01
20b20                 | _hg010b_spin2_fillpop_ret
20b20     2D 00 64 FD | 	ret
20b24                 | 
20b24                 | ' 
20b24                 | '       
20b24                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
20b24                 | _hg010b_spin2_fill
20b24     0B 4A 05 F6 | 	mov	COUNT_, #11
20b28     A8 00 A0 FD | 	call	#pushregs_
20b2c                 | ' 
20b2c                 | ' newcolor:=newcolor & 255
20b2c     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
20b30                 | ' oldcolor:=oldcolor & 255
20b30     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
20b34                 | ' 
20b34                 | ' if (oldcolor == newcolor) 
20b34     13 29 0A F2 | 	cmp	local02, local01 wz
20b38                 | '   return
20b38     70 02 90 AD |  if_e	jmp	#LR__2579
20b3c                 | ' 
20b3c                 | ' fillptr:=0
20b3c     0B 00 00 FF 
20b40     BA E4 05 F1 | 	add	objptr, ##5818
20b44     F2 00 68 FC | 	wrlong	#0, objptr
20b48                 | ' fillmax:=0
20b48     04 E4 05 F1 | 	add	objptr, #4
20b4c     F2 00 68 FC | 	wrlong	#0, objptr
20b50     0B 00 00 FF 
20b54     BE E4 85 F1 | 	sub	objptr, ##5822
20b58                 | ' fillpush(x)
20b58     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
20b5c                 | ' fillpush(y)
20b5c     0A 13 02 F6 | 	mov	arg01, arg02
20b60     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
20b64                 | ' y:=fillpop()
20b64     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
20b68     FD 2A 02 F6 | 	mov	local03, result1
20b6c                 | ' x:=fillpop()
20b6c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
20b70     FD 2C 02 F6 | 	mov	local04, result1
20b74                 | ' 'pinhigh(38)
20b74                 | ' repeat while (x>-1)       
20b74                 | LR__2570
20b74     00 2C 56 F2 | 	cmps	local04, #0 wc
20b78     30 02 90 CD |  if_b	jmp	#LR__2578
20b7c                 | '  ' pintoggle(39)
20b7c                 | '   x1 := x
20b7c     16 2F 02 F6 | 	mov	local05, local04
20b80                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
20b80                 | LR__2571
20b80     00 30 06 F6 | 	mov	local06, #0
20b84     00 32 06 F6 | 	mov	local07, #0
20b88     00 2E 56 F2 | 	cmps	local05, #0 wc
20b8c     01 32 66 36 |  if_ae	neg	local07, #1
20b90     00 32 0E F2 | 	cmp	local07, #0 wz
20b94     00 30 26 56 |  if_ne	not	local06, #0
20b98     00 34 06 F6 | 	mov	local08, #0
20b9c     00 36 06 F6 | 	mov	local09, #0
20ba0     15 15 02 F6 | 	mov	arg02, local03
20ba4     17 13 02 F6 | 	mov	arg01, local05
20ba8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
20bac     14 FB 09 F2 | 	cmp	result1, local02 wz
20bb0     00 36 26 A6 |  if_e	not	local09, #0
20bb4     00 36 0E F2 | 	cmp	local09, #0 wz
20bb8     00 34 26 56 |  if_ne	not	local08, #0
20bbc     1A 31 CA F7 | 	test	local06, local08 wz
20bc0                 | '     x1--
20bc0     01 2E 86 51 |  if_ne	sub	local05, #1
20bc4     B8 FF 9F 5D |  if_ne	jmp	#LR__2571
20bc8                 | '   x1++
20bc8     01 2E 06 F1 | 	add	local05, #1
20bcc                 | '   spanabove := 0
20bcc     00 38 06 F6 | 	mov	local10, #0
20bd0                 | '   spanbelow := 0
20bd0     00 3A 06 F6 | 	mov	local11, #0
20bd4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
20bd4                 | LR__2572
20bd4     00 30 06 F6 | 	mov	local06, #0
20bd8     02 00 00 FF 
20bdc     00 2E 56 F2 | 	cmps	local05, ##1024 wc
20be0     00 30 26 C6 |  if_b	not	local06, #0
20be4     00 34 06 F6 | 	mov	local08, #0
20be8     00 36 06 F6 | 	mov	local09, #0
20bec     15 15 02 F6 | 	mov	arg02, local03
20bf0     17 13 02 F6 | 	mov	arg01, local05
20bf4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
20bf8     14 FB 09 F2 | 	cmp	result1, local02 wz
20bfc     00 36 26 A6 |  if_e	not	local09, #0
20c00     00 36 0E F2 | 	cmp	local09, #0 wz
20c04     00 34 26 56 |  if_ne	not	local08, #0
20c08     1A 31 CA F7 | 	test	local06, local08 wz
20c0c     88 01 90 AD |  if_e	jmp	#LR__2577
20c10                 | '     putpixel2 (x1,y, newcolor & 255)
20c10     13 17 E2 F8 | 	getbyte	arg03, local01, #0
20c14     17 13 02 F6 | 	mov	arg01, local05
20c18     15 15 02 F6 | 	mov	arg02, local03
20c1c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
20c20                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
20c20     00 30 06 F6 | 	mov	local06, #0
20c24     00 32 06 F6 | 	mov	local07, #0
20c28     00 38 0E F2 | 	cmp	local10, #0 wz
20c2c     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
20c30     01 32 66 26 |  if_nc_and_z	neg	local07, #1
20c34     00 32 0E F2 | 	cmp	local07, #0 wz
20c38     00 30 26 56 |  if_ne	not	local06, #0
20c3c     00 34 06 F6 | 	mov	local08, #0
20c40     00 36 06 F6 | 	mov	local09, #0
20c44     15 15 02 F6 | 	mov	arg02, local03
20c48     01 14 86 F1 | 	sub	arg02, #1
20c4c     17 13 02 F6 | 	mov	arg01, local05
20c50     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
20c54     14 FB 09 F2 | 	cmp	result1, local02 wz
20c58     00 36 26 A6 |  if_e	not	local09, #0
20c5c     00 36 0E F2 | 	cmp	local09, #0 wz
20c60     00 34 26 56 |  if_ne	not	local08, #0
20c64     1A 31 CA F7 | 	test	local06, local08 wz
20c68     1C 00 90 AD |  if_e	jmp	#LR__2573
20c6c                 | '       fillpush(x1)
20c6c     17 13 02 F6 | 	mov	arg01, local05
20c70     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
20c74                 | '       fillpush(y-1)
20c74     15 13 02 F6 | 	mov	arg01, local03
20c78     01 12 86 F1 | 	sub	arg01, #1
20c7c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
20c80                 | '       spanabove := 1 
20c80     01 38 06 F6 | 	mov	local10, #1
20c84     4C 00 90 FD | 	jmp	#LR__2574
20c88                 | LR__2573
20c88                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
20c88     00 30 06 F6 | 	mov	local06, #0
20c8c     00 32 06 F6 | 	mov	local07, #0
20c90     00 38 0E F2 | 	cmp	local10, #0 wz
20c94     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
20c98     01 32 66 16 |  if_a	neg	local07, #1
20c9c     00 32 0E F2 | 	cmp	local07, #0 wz
20ca0     00 30 26 56 |  if_ne	not	local06, #0
20ca4     00 34 06 F6 | 	mov	local08, #0
20ca8     00 36 06 F6 | 	mov	local09, #0
20cac     15 15 02 F6 | 	mov	arg02, local03
20cb0     01 14 86 F1 | 	sub	arg02, #1
20cb4     17 13 02 F6 | 	mov	arg01, local05
20cb8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
20cbc     14 FB 09 F2 | 	cmp	result1, local02 wz
20cc0     00 36 26 56 |  if_ne	not	local09, #0
20cc4     00 36 0E F2 | 	cmp	local09, #0 wz
20cc8     00 34 26 56 |  if_ne	not	local08, #0
20ccc     1A 31 CA F7 | 	test	local06, local08 wz
20cd0                 | '       spanabove := 0 
20cd0     00 38 06 56 |  if_ne	mov	local10, #0
20cd4                 | LR__2574
20cd4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
20cd4     00 30 06 F6 | 	mov	local06, #0
20cd8     00 32 06 F6 | 	mov	local07, #0
20cdc     00 3A 0E F2 | 	cmp	local11, #0 wz
20ce0     01 00 00 AF 
20ce4     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
20ce8     01 32 66 86 |  if_c_and_z	neg	local07, #1
20cec     00 32 0E F2 | 	cmp	local07, #0 wz
20cf0     00 30 26 56 |  if_ne	not	local06, #0
20cf4     00 34 06 F6 | 	mov	local08, #0
20cf8     00 36 06 F6 | 	mov	local09, #0
20cfc     15 15 02 F6 | 	mov	arg02, local03
20d00     01 14 06 F1 | 	add	arg02, #1
20d04     17 13 02 F6 | 	mov	arg01, local05
20d08     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
20d0c     14 FB 09 F2 | 	cmp	result1, local02 wz
20d10     00 36 26 A6 |  if_e	not	local09, #0
20d14     00 36 0E F2 | 	cmp	local09, #0 wz
20d18     00 34 26 56 |  if_ne	not	local08, #0
20d1c     1A 31 CA F7 | 	test	local06, local08 wz
20d20     1C 00 90 AD |  if_e	jmp	#LR__2575
20d24                 | '       fillpush(x1)
20d24     17 13 02 F6 | 	mov	arg01, local05
20d28     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
20d2c                 | '       fillpush(y + 1)
20d2c     15 13 02 F6 | 	mov	arg01, local03
20d30     01 12 06 F1 | 	add	arg01, #1
20d34     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
20d38                 | '       spanBelow := 1
20d38     01 3A 06 F6 | 	mov	local11, #1
20d3c     50 00 90 FD | 	jmp	#LR__2576
20d40                 | LR__2575
20d40                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
20d40     00 30 06 F6 | 	mov	local06, #0
20d44     00 32 06 F6 | 	mov	local07, #0
20d48     00 3A 0E F2 | 	cmp	local11, #0 wz
20d4c     01 00 00 5F 
20d50     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
20d54     01 32 66 46 |  if_c_and_nz	neg	local07, #1
20d58     00 32 0E F2 | 	cmp	local07, #0 wz
20d5c     00 30 26 56 |  if_ne	not	local06, #0
20d60     00 34 06 F6 | 	mov	local08, #0
20d64     00 36 06 F6 | 	mov	local09, #0
20d68     15 15 02 F6 | 	mov	arg02, local03
20d6c     01 14 06 F1 | 	add	arg02, #1
20d70     17 13 02 F6 | 	mov	arg01, local05
20d74     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
20d78     14 FB 09 F2 | 	cmp	result1, local02 wz
20d7c     00 36 26 56 |  if_ne	not	local09, #0
20d80     00 36 0E F2 | 	cmp	local09, #0 wz
20d84     00 34 26 56 |  if_ne	not	local08, #0
20d88     1A 31 CA F7 | 	test	local06, local08 wz
20d8c                 | '       spanbelow := 0
20d8c     00 3A 06 56 |  if_ne	mov	local11, #0
20d90                 | LR__2576
20d90                 | '     x1++
20d90     01 2E 06 F1 | 	add	local05, #1
20d94     3C FE 9F FD | 	jmp	#LR__2572
20d98                 | LR__2577
20d98                 | '   y:=fillpop()
20d98     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
20d9c     FD 2A 02 F6 | 	mov	local03, result1
20da0                 | '   x:=fillpop()
20da0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
20da4     FD 2C 02 F6 | 	mov	local04, result1
20da8     C8 FD 9F FD | 	jmp	#LR__2570
20dac                 | LR__2578
20dac                 | LR__2579
20dac     A7 F0 03 F6 | 	mov	ptra, fp
20db0     B2 00 A0 FD | 	call	#popregs_
20db4                 | _hg010b_spin2_fill_ret
20db4     2D 00 64 FD | 	ret
20db8                 | 
20db8                 | ' 'pinlow(38)    
20db8                 | ' 
20db8                 | ' '-- A filled circle -----------------------------------------------------
20db8                 | ' 
20db8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
20db8                 | _hg010b_spin2_fcircle
20db8     08 4A 05 F6 | 	mov	COUNT_, #8
20dbc     A8 00 A0 FD | 	call	#pushregs_
20dc0     0B 27 02 F6 | 	mov	local01, arg03
20dc4     FF FF 7F FF 
20dc8     FE 27 06 FD | 	qmul	local01, ##-2
20dcc     09 29 02 F6 | 	mov	local02, arg01
20dd0     0A 2B 02 F6 | 	mov	local03, arg02
20dd4     0C 2D 02 F6 | 	mov	local04, arg04
20dd8                 | ' 
20dd8                 | ' d:=5-4*r
20dd8     13 19 02 F6 | 	mov	arg04, local01
20ddc     02 18 66 F0 | 	shl	arg04, #2
20de0     05 2E 06 F6 | 	mov	local05, #5
20de4     0C 2F 82 F1 | 	sub	local05, arg04
20de8                 | ' x:=0
20de8     00 30 06 F6 | 	mov	local06, #0
20dec                 | ' y:=r
20dec                 | ' da:=(-2*r+5)*4
20dec                 | ' db:=3*4
20dec     0C 32 06 F6 | 	mov	local07, #12
20df0                 | ' repeat while (x<=y) 
20df0     18 34 62 FD | 	getqx	local08
20df4     05 34 06 F1 | 	add	local08, #5
20df8     02 34 66 F0 | 	shl	local08, #2
20dfc                 | LR__2580
20dfc     13 31 5A F2 | 	cmps	local06, local01 wcz
20e00     B4 00 90 1D |  if_a	jmp	#LR__2582
20e04                 | '   fastline(x0-x,x0+x,y0-y,c)
20e04     14 13 02 F6 | 	mov	arg01, local02
20e08     18 13 82 F1 | 	sub	arg01, local06
20e0c     14 15 02 F6 | 	mov	arg02, local02
20e10     18 15 02 F1 | 	add	arg02, local06
20e14     15 17 02 F6 | 	mov	arg03, local03
20e18     13 17 82 F1 | 	sub	arg03, local01
20e1c     16 19 02 F6 | 	mov	arg04, local04
20e20     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
20e24                 | '   fastline(x0-x,x0+x,y0+y,c)
20e24     14 13 02 F6 | 	mov	arg01, local02
20e28     18 13 82 F1 | 	sub	arg01, local06
20e2c     14 15 02 F6 | 	mov	arg02, local02
20e30     18 15 02 F1 | 	add	arg02, local06
20e34     15 17 02 F6 | 	mov	arg03, local03
20e38     13 17 02 F1 | 	add	arg03, local01
20e3c     16 19 02 F6 | 	mov	arg04, local04
20e40     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
20e44                 | '   fastline(x0-y,x0+y,y0-x,c)
20e44     14 13 02 F6 | 	mov	arg01, local02
20e48     13 13 82 F1 | 	sub	arg01, local01
20e4c     14 15 02 F6 | 	mov	arg02, local02
20e50     13 15 02 F1 | 	add	arg02, local01
20e54     15 17 02 F6 | 	mov	arg03, local03
20e58     18 17 82 F1 | 	sub	arg03, local06
20e5c     16 19 02 F6 | 	mov	arg04, local04
20e60     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
20e64                 | '   fastline(x0-y,x0+y,y0+x,c)
20e64     14 13 02 F6 | 	mov	arg01, local02
20e68     13 13 82 F1 | 	sub	arg01, local01
20e6c     14 15 02 F6 | 	mov	arg02, local02
20e70     13 15 02 F1 | 	add	arg02, local01
20e74     15 17 02 F6 | 	mov	arg03, local03
20e78     18 17 02 F1 | 	add	arg03, local06
20e7c     16 19 02 F6 | 	mov	arg04, local04
20e80     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
20e84                 | '   if d>0 
20e84     01 2E 56 F2 | 	cmps	local05, #1 wc
20e88     18 00 90 CD |  if_b	jmp	#LR__2581
20e8c                 | '     d+=da
20e8c     1A 2F 02 F1 | 	add	local05, local08
20e90                 | '     y-=1
20e90     01 26 86 F1 | 	sub	local01, #1
20e94                 | '     x+=1
20e94     01 30 06 F1 | 	add	local06, #1
20e98                 | '     da+=4*4
20e98     10 34 06 F1 | 	add	local08, #16
20e9c                 | '     db+=2*4
20e9c     08 32 06 F1 | 	add	local07, #8
20ea0     58 FF 9F FD | 	jmp	#LR__2580
20ea4                 | LR__2581
20ea4                 | '   else
20ea4                 | '     d+=db
20ea4     19 2F 02 F1 | 	add	local05, local07
20ea8                 | '     x+=1
20ea8     01 30 06 F1 | 	add	local06, #1
20eac                 | '     da+=2*4
20eac     08 34 06 F1 | 	add	local08, #8
20eb0                 | '     db+=2*4
20eb0     08 32 06 F1 | 	add	local07, #8
20eb4     44 FF 9F FD | 	jmp	#LR__2580
20eb8                 | LR__2582
20eb8     A7 F0 03 F6 | 	mov	ptra, fp
20ebc     B2 00 A0 FD | 	call	#popregs_
20ec0                 | _hg010b_spin2_fcircle_ret
20ec0     2D 00 64 FD | 	ret
20ec4                 | 
20ec4                 | '  
20ec4                 | ' '-- A circle ------------------------------------------------------------ 
20ec4                 | '  
20ec4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
20ec4                 | _hg010b_spin2_circle
20ec4     08 4A 05 F6 | 	mov	COUNT_, #8
20ec8     A8 00 A0 FD | 	call	#pushregs_
20ecc     0B 27 02 F6 | 	mov	local01, arg03
20ed0     FF FF 7F FF 
20ed4     FE 27 06 FD | 	qmul	local01, ##-2
20ed8     09 29 02 F6 | 	mov	local02, arg01
20edc     0A 2B 02 F6 | 	mov	local03, arg02
20ee0     0C 2D 02 F6 | 	mov	local04, arg04
20ee4                 | ' 
20ee4                 | '  
20ee4                 | ' d:=5-4*r
20ee4     13 19 02 F6 | 	mov	arg04, local01
20ee8     02 18 66 F0 | 	shl	arg04, #2
20eec     05 2E 06 F6 | 	mov	local05, #5
20ef0     0C 2F 82 F1 | 	sub	local05, arg04
20ef4                 | ' x:=0
20ef4     00 30 06 F6 | 	mov	local06, #0
20ef8                 | ' y:=r
20ef8                 | ' da:=(-2*r+5)*4
20ef8                 | ' db:=3*4
20ef8     0C 32 06 F6 | 	mov	local07, #12
20efc                 | ' repeat while (x<=y) 
20efc     18 34 62 FD | 	getqx	local08
20f00     05 34 06 F1 | 	add	local08, #5
20f04     02 34 66 F0 | 	shl	local08, #2
20f08                 | LR__2590
20f08     13 31 5A F2 | 	cmps	local06, local01 wcz
20f0c     F4 00 90 1D |  if_a	jmp	#LR__2592
20f10                 | '   putpixel(x0-x,y0-y,c)
20f10     14 13 02 F6 | 	mov	arg01, local02
20f14     18 13 82 F1 | 	sub	arg01, local06
20f18     15 15 02 F6 | 	mov	arg02, local03
20f1c     13 15 82 F1 | 	sub	arg02, local01
20f20     16 17 02 F6 | 	mov	arg03, local04
20f24     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
20f28                 | '   putpixel(x0-x,y0+y,c)
20f28     14 13 02 F6 | 	mov	arg01, local02
20f2c     18 13 82 F1 | 	sub	arg01, local06
20f30     15 15 02 F6 | 	mov	arg02, local03
20f34     13 15 02 F1 | 	add	arg02, local01
20f38     16 17 02 F6 | 	mov	arg03, local04
20f3c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
20f40                 | '   putpixel(x0+x,y0-y,c)
20f40     14 13 02 F6 | 	mov	arg01, local02
20f44     18 13 02 F1 | 	add	arg01, local06
20f48     15 15 02 F6 | 	mov	arg02, local03
20f4c     13 15 82 F1 | 	sub	arg02, local01
20f50     16 17 02 F6 | 	mov	arg03, local04
20f54     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
20f58                 | '   putpixel(x0+x,y0+y,c)
20f58     14 13 02 F6 | 	mov	arg01, local02
20f5c     18 13 02 F1 | 	add	arg01, local06
20f60     15 15 02 F6 | 	mov	arg02, local03
20f64     13 15 02 F1 | 	add	arg02, local01
20f68     16 17 02 F6 | 	mov	arg03, local04
20f6c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
20f70                 | '   putpixel(x0-y,y0-x,c)
20f70     14 13 02 F6 | 	mov	arg01, local02
20f74     13 13 82 F1 | 	sub	arg01, local01
20f78     15 15 02 F6 | 	mov	arg02, local03
20f7c     18 15 82 F1 | 	sub	arg02, local06
20f80     16 17 02 F6 | 	mov	arg03, local04
20f84     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
20f88                 | '   putpixel(x0-y,y0+x,c)
20f88     14 13 02 F6 | 	mov	arg01, local02
20f8c     13 13 82 F1 | 	sub	arg01, local01
20f90     15 15 02 F6 | 	mov	arg02, local03
20f94     18 15 02 F1 | 	add	arg02, local06
20f98     16 17 02 F6 | 	mov	arg03, local04
20f9c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
20fa0                 | '   putpixel(x0+y,y0-x,c)
20fa0     14 13 02 F6 | 	mov	arg01, local02
20fa4     13 13 02 F1 | 	add	arg01, local01
20fa8     15 15 02 F6 | 	mov	arg02, local03
20fac     18 15 82 F1 | 	sub	arg02, local06
20fb0     16 17 02 F6 | 	mov	arg03, local04
20fb4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
20fb8                 | '   putpixel(x0+y,y0+x,c)
20fb8     14 13 02 F6 | 	mov	arg01, local02
20fbc     13 13 02 F1 | 	add	arg01, local01
20fc0     15 15 02 F6 | 	mov	arg02, local03
20fc4     18 15 02 F1 | 	add	arg02, local06
20fc8     16 17 02 F6 | 	mov	arg03, local04
20fcc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
20fd0                 | '   if d>0 
20fd0     01 2E 56 F2 | 	cmps	local05, #1 wc
20fd4     18 00 90 CD |  if_b	jmp	#LR__2591
20fd8                 | '     d+=da
20fd8     1A 2F 02 F1 | 	add	local05, local08
20fdc                 | '     y-=1
20fdc     01 26 86 F1 | 	sub	local01, #1
20fe0                 | '     x+=1
20fe0     01 30 06 F1 | 	add	local06, #1
20fe4                 | '     da+=4*4
20fe4     10 34 06 F1 | 	add	local08, #16
20fe8                 | '     db+=2*4
20fe8     08 32 06 F1 | 	add	local07, #8
20fec     18 FF 9F FD | 	jmp	#LR__2590
20ff0                 | LR__2591
20ff0                 | '   else
20ff0                 | '     d+=db
20ff0     19 2F 02 F1 | 	add	local05, local07
20ff4                 | '     x+=1
20ff4     01 30 06 F1 | 	add	local06, #1
20ff8                 | '     da+=2*4
20ff8     08 34 06 F1 | 	add	local08, #8
20ffc                 | '     db+=2*4
20ffc     08 32 06 F1 | 	add	local07, #8
21000     04 FF 9F FD | 	jmp	#LR__2590
21004                 | LR__2592
21004     A7 F0 03 F6 | 	mov	ptra, fp
21008     B2 00 A0 FD | 	call	#popregs_
2100c                 | _hg010b_spin2_circle_ret
2100c     2D 00 64 FD | 	ret
21010                 | 
21010                 | '     
21010                 | ' '-- A frame (an empty rectangle) ---------------------------------------
21010                 | ' 
21010                 | ' pub frame(x1,y1,x2,y2,c)
21010                 | _hg010b_spin2_frame
21010     05 4A 05 F6 | 	mov	COUNT_, #5
21014     A8 00 A0 FD | 	call	#pushregs_
21018     09 27 02 F6 | 	mov	local01, arg01
2101c     0A 29 02 F6 | 	mov	local02, arg02
21020     0B 2B 02 F6 | 	mov	local03, arg03
21024     0C 2D 02 F6 | 	mov	local04, arg04
21028     0D 2F 02 F6 | 	mov	local05, arg05
2102c                 | ' 
2102c                 | ' fastline(x1,x2,y1,c)
2102c     13 13 02 F6 | 	mov	arg01, local01
21030     15 15 02 F6 | 	mov	arg02, local03
21034     14 17 02 F6 | 	mov	arg03, local02
21038     17 19 02 F6 | 	mov	arg04, local05
2103c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
21040                 | ' fastline(x1,x2,y2,c)
21040     13 13 02 F6 | 	mov	arg01, local01
21044     15 15 02 F6 | 	mov	arg02, local03
21048     16 17 02 F6 | 	mov	arg03, local04
2104c     17 19 02 F6 | 	mov	arg04, local05
21050     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
21054                 | ' line(x1,y1,x1,y2,c)
21054     13 13 02 F6 | 	mov	arg01, local01
21058     14 15 02 F6 | 	mov	arg02, local02
2105c     13 17 02 F6 | 	mov	arg03, local01
21060     16 19 02 F6 | 	mov	arg04, local04
21064     17 1B 02 F6 | 	mov	arg05, local05
21068                 | ' draw(x1,y1,x2,y2,c)
21068     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
2106c                 | ' line(x2,y1,x2,y2,c)
2106c     15 13 02 F6 | 	mov	arg01, local03
21070     14 15 02 F6 | 	mov	arg02, local02
21074     15 17 02 F6 | 	mov	arg03, local03
21078     16 19 02 F6 | 	mov	arg04, local04
2107c     17 1B 02 F6 | 	mov	arg05, local05
21080                 | ' draw(x1,y1,x2,y2,c)
21080     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
21084     A7 F0 03 F6 | 	mov	ptra, fp
21088     B2 00 A0 FD | 	call	#popregs_
2108c                 | _hg010b_spin2_frame_ret
2108c     2D 00 64 FD | 	ret
21090                 | 
21090                 | ' 
21090                 | ' '-- A box (a filled rectangle) ----------------------------------------
21090                 | ' 
21090                 | ' pub box(x1,y1,x2,y2,c) |yy
21090                 | _hg010b_spin2_box
21090     06 4A 05 F6 | 	mov	COUNT_, #6
21094     A8 00 A0 FD | 	call	#pushregs_
21098     09 27 02 F6 | 	mov	local01, arg01
2109c     0A 29 02 F6 | 	mov	local02, arg02
210a0     0B 2B 02 F6 | 	mov	local03, arg03
210a4     0C 2D 02 F6 | 	mov	local04, arg04
210a8     0D 2F 02 F6 | 	mov	local05, arg05
210ac                 | ' 
210ac                 | ' repeat yy from y1 to y2
210ac     14 2D 52 F2 | 	cmps	local04, local02 wc
210b0     01 30 86 F6 | 	negc	local06, #1
210b4     18 2D 02 F1 | 	add	local04, local06
210b8                 | LR__2600
210b8                 | '   fastline(x1,x2,yy,c)
210b8     13 13 02 F6 | 	mov	arg01, local01
210bc     15 15 02 F6 | 	mov	arg02, local03
210c0     17 19 02 F6 | 	mov	arg04, local05
210c4     14 17 02 F6 | 	mov	arg03, local02
210c8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
210cc     18 29 02 F1 | 	add	local02, local06
210d0     16 29 0A F2 | 	cmp	local02, local04 wz
210d4     E0 FF 9F 5D |  if_ne	jmp	#LR__2600
210d8     A7 F0 03 F6 | 	mov	ptra, fp
210dc     B2 00 A0 FD | 	call	#popregs_
210e0                 | _hg010b_spin2_box_ret
210e0     2D 00 64 FD | 	ret
210e4                 | 
210e4                 | '       
210e4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
210e4                 | _hg010b_spin2_putcharxycgf
210e4                 | ' 
210e4                 | '  
210e4                 | ' repeat yy from 0 to 15
210e4     00 00 06 F6 | 	mov	_var01, #0
210e8     97 8C 48 FB | 	callpa	#(@LR__2612-@LR__2610)>>2,fcache_load_ptr_
210ec                 | LR__2610
210ec                 | ' 
210ec                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
210ec     95 E4 05 F1 | 	add	objptr, #149
210f0     F2 02 02 FB | 	rdlong	_var02, objptr
210f4     0A 02 66 F0 | 	shl	_var02, #10
210f8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
210fc     01 05 02 F1 | 	add	_var03, _var02
21100     0B 03 02 F6 | 	mov	_var02, arg03
21104     04 02 66 F0 | 	shl	_var02, #4
21108     01 05 02 F1 | 	add	_var03, _var02
2110c     00 05 02 F1 | 	add	_var03, _var01
21110     02 05 C2 FA | 	rdbyte	_var03, _var03
21114                 | '   asm
21114     00 04 0E F4 | 	testb	_var03, #0 wz
21118     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
2111c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
21120     01 04 0E F4 | 	testb	_var03, #1 wz
21124     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
21128     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
2112c     02 04 0E F4 | 	testb	_var03, #2 wz
21130     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
21134     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
21138     03 04 0E F4 | 	testb	_var03, #3 wz
2113c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
21140     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
21144     04 04 0E F4 | 	testb	_var03, #4 wz
21148     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
2114c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
21150     05 04 0E F4 | 	testb	_var03, #5 wz
21154     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
21158     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
2115c     06 04 0E F4 | 	testb	_var03, #6 wz
21160     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
21164     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
21168     07 04 0E F4 | 	testb	_var03, #7 wz
2116c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
21170     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
21174                 | '   
21174                 | '   ccc[0]:=c1
21174     99 E5 05 F1 | 	add	objptr, #409
21178     F2 06 62 FC | 	wrlong	_var04, objptr
2117c                 | '   ccc[1]:=c2 
2117c     04 E4 05 F1 | 	add	objptr, #4
21180     F2 08 62 FC | 	wrlong	_var05, objptr
21184                 | '   long[mailbox0][2]:=8
21184     49 E4 85 F1 | 	sub	objptr, #73
21188     F2 04 02 FB | 	rdlong	_var03, objptr
2118c     08 04 06 F1 | 	add	_var03, #8
21190     02 11 68 FC | 	wrlong	#8, _var03
21194                 | '   long[mailbox0][1]:=@ccc
21194     45 E4 05 F1 | 	add	objptr, #69
21198     F2 04 02 F6 | 	mov	_var03, objptr
2119c     45 E4 85 F1 | 	sub	objptr, #69
211a0     F2 02 02 FB | 	rdlong	_var02, objptr
211a4     04 02 06 F1 | 	add	_var02, #4
211a8     01 05 62 FC | 	wrlong	_var03, _var02
211ac                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
211ac     0C E5 85 F1 | 	sub	objptr, #268
211b0     F2 04 02 FB | 	rdlong	_var03, objptr
211b4     0A 03 02 F6 | 	mov	_var02, arg02
211b8     00 03 02 F1 | 	add	_var02, _var01
211bc     0A 02 66 F0 | 	shl	_var02, #10
211c0     09 0B 02 F6 | 	mov	_var06, arg01
211c4     02 0A 66 F0 | 	shl	_var06, #2
211c8     05 03 02 F1 | 	add	_var02, _var06
211cc     01 05 02 F1 | 	add	_var03, _var02
211d0     00 00 78 FF 
211d4     00 04 06 F1 | 	add	_var03, ##-268435456
211d8     0C E5 05 F1 | 	add	objptr, #268
211dc     F2 0A 02 FB | 	rdlong	_var06, objptr
211e0     05 05 62 FC | 	wrlong	_var03, _var06
211e4                 | '   repeat
211e4                 | LR__2611
211e4     F2 04 02 FB | 	rdlong	_var03, objptr
211e8     02 03 02 FB | 	rdlong	_var02, _var03
211ec     00 02 56 F2 | 	cmps	_var02, #0 wc
211f0     F0 FF 9F CD |  if_b	jmp	#LR__2611
211f4     E9 E5 85 F1 | 	sub	objptr, #489
211f8     01 00 06 F1 | 	add	_var01, #1
211fc     10 00 56 F2 | 	cmps	_var01, #16 wc
21200     E8 FE 9F CD |  if_b	jmp	#LR__2610
21204                 | LR__2612
21204                 | _hg010b_spin2_putcharxycgf_ret
21204     2D 00 64 FD | 	ret
21208                 | 
21208                 | ' 
21208                 | ' 
21208                 | ' '**********************************************************************r***
21208                 | ' '                                                                        *
21208                 | ' ' Font related functions                                                 *
21208                 | ' '                                                                        *
21208                 | ' '*************************************************************************
21208                 | ' 
21208                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
21208                 | ' 
21208                 | ' pub setfontfamily(afontnum)
21208                 | _hg010b_spin2_setfontfamily
21208                 | ' 
21208                 | ' font_family:=afontnum
21208     95 E4 05 F1 | 	add	objptr, #149
2120c     F2 12 62 FC | 	wrlong	arg01, objptr
21210     95 E4 85 F1 | 	sub	objptr, #149
21214                 | ' 'if afontnum==8
21214                 | ' '  font_ptr:=@amiga_font
21214                 | ' 
21214                 | ' if afontnum==4
21214     04 12 0E F2 | 	cmp	arg01, #4 wz
21218                 | '   font_ptr:=@st_font
21218     08 00 00 AF 
2121c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
21220     08 E4 05 A1 |  if_e	add	objptr, #8
21224     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
21228     08 E4 85 A1 |  if_e	sub	objptr, #8
2122c     08 00 00 AF 
21230     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
21234                 | ' if afontnum==0
21234     00 12 0E F2 | 	cmp	arg01, #0 wz
21238                 | '   font_ptr:=@vga_font
21238     08 E4 05 A1 |  if_e	add	objptr, #8
2123c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
21240     08 E4 85 A1 |  if_e	sub	objptr, #8
21244                 | _hg010b_spin2_setfontfamily_ret
21244     2D 00 64 FD | 	ret
21248                 | 
21248                 | ' 
21248                 | ' '*************************************************************************
21248                 | ' '                                                                        *
21248                 | ' '  Cursor functions                                                      *
21248                 | ' '                                                                        *
21248                 | ' '*************************************************************************
21248                 | ' 
21248                 | ' 
21248                 | ' pub setcursorpos(x,y)
21248                 | _hg010b_spin2_setcursorpos
21248                 | ' 
21248                 | ' ''---------- Set the (x,y) position of cursor
21248                 | ' 
21248                 | ' cursor_x:=x
21248     3C E4 05 F1 | 	add	objptr, #60
2124c     F2 12 52 FC | 	wrword	arg01, objptr
21250                 | ' cursor_y:=y
21250     02 E4 05 F1 | 	add	objptr, #2
21254     F2 14 42 FC | 	wrbyte	arg02, objptr
21258                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
21258     02 E4 85 F1 | 	sub	objptr, #2
2125c     F2 14 E2 FA | 	rdword	arg02, objptr
21260     02 14 66 F0 | 	shl	arg02, #2
21264     02 E4 05 F1 | 	add	objptr, #2
21268     F2 16 C2 FA | 	rdbyte	arg03, objptr
2126c     3E E4 85 F1 | 	sub	objptr, #62
21270     04 16 66 F0 | 	shl	arg03, #4
21274     04 16 06 F1 | 	add	arg03, #4
21278     11 12 06 F6 | 	mov	arg01, #17
2127c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
21280                 | _hg010b_spin2_setcursorpos_ret
21280     2D 00 64 FD | 	ret
21284                 | 
21284                 | ' 
21284                 | ' pub setcursorx(x)
21284                 | _hg010b_spin2_setcursorx
21284                 | ' cursor_x:=x
21284     3C E4 05 F1 | 	add	objptr, #60
21288     F2 12 52 FC | 	wrword	arg01, objptr
2128c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2128c     F2 14 E2 FA | 	rdword	arg02, objptr
21290     02 14 66 F0 | 	shl	arg02, #2
21294     02 E4 05 F1 | 	add	objptr, #2
21298     F2 16 C2 FA | 	rdbyte	arg03, objptr
2129c     3E E4 85 F1 | 	sub	objptr, #62
212a0     04 16 66 F0 | 	shl	arg03, #4
212a4     04 16 06 F1 | 	add	arg03, #4
212a8     11 12 06 F6 | 	mov	arg01, #17
212ac     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
212b0                 | _hg010b_spin2_setcursorx_ret
212b0     2D 00 64 FD | 	ret
212b4                 | 
212b4                 | ' 
212b4                 | ' pub setcursory(y) 
212b4                 | _hg010b_spin2_setcursory
212b4                 | ' cursor_y:=y
212b4     3E E4 05 F1 | 	add	objptr, #62
212b8     F2 12 42 FC | 	wrbyte	arg01, objptr
212bc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
212bc     02 E4 85 F1 | 	sub	objptr, #2
212c0     F2 14 E2 FA | 	rdword	arg02, objptr
212c4     02 14 66 F0 | 	shl	arg02, #2
212c8     02 E4 05 F1 | 	add	objptr, #2
212cc     F2 16 C2 FA | 	rdbyte	arg03, objptr
212d0     3E E4 85 F1 | 	sub	objptr, #62
212d4     04 16 66 F0 | 	shl	arg03, #4
212d8     04 16 06 F1 | 	add	arg03, #4
212dc     11 12 06 F6 | 	mov	arg01, #17
212e0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
212e4                 | _hg010b_spin2_setcursory_ret
212e4     2D 00 64 FD | 	ret
212e8                 | 
212e8                 | ' 
212e8                 | ' '*************************************************************************
212e8                 | ' '                                                                        *
212e8                 | ' '  VBlank functions                                                      *
212e8                 | ' '                                                                        *
212e8                 | ' '*************************************************************************
212e8                 | ' 
212e8                 | ' pub waitvbl(amount) | i
212e8                 | _hg010b_spin2_waitvbl
212e8     03 4A 05 F6 | 	mov	COUNT_, #3
212ec     A8 00 A0 FD | 	call	#pushregs_
212f0     09 27 02 F6 | 	mov	local01, arg01
212f4                 | ' 
212f4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
212f4                 | ' 
212f4                 | ' repeat i from 1 to amount
212f4     01 28 06 F6 | 	mov	local02, #1
212f8     01 26 56 F2 | 	cmps	local01, #1 wc
212fc     01 2A 86 F6 | 	negc	local03, #1
21300     15 27 02 F1 | 	add	local01, local03
21304                 | LR__2620
21304                 | '   repeat until vblank==0
21304                 | LR__2621
21304     49 E4 05 F1 | 	add	objptr, #73
21308     F2 12 0A FB | 	rdlong	arg01, objptr wz
2130c     49 E4 85 F1 | 	sub	objptr, #73
21310     0C 00 90 AD |  if_e	jmp	#LR__2622
21314                 | '     waitus(100)
21314     64 12 06 F6 | 	mov	arg01, #100
21318     D8 1F B0 FD | 	call	#__system___waitus
2131c     E4 FF 9F FD | 	jmp	#LR__2621
21320                 | LR__2622
21320                 | '   repeat until vblank==1
21320                 | LR__2623
21320     49 E4 05 F1 | 	add	objptr, #73
21324     F2 12 02 FB | 	rdlong	arg01, objptr
21328     49 E4 85 F1 | 	sub	objptr, #73
2132c     01 12 0E F2 | 	cmp	arg01, #1 wz
21330     0C 00 90 AD |  if_e	jmp	#LR__2624
21334                 | '     waitus(100)
21334     64 12 06 F6 | 	mov	arg01, #100
21338     B8 1F B0 FD | 	call	#__system___waitus
2133c     E0 FF 9F FD | 	jmp	#LR__2623
21340                 | LR__2624
21340     15 29 02 F1 | 	add	local02, local03
21344     13 29 0A F2 | 	cmp	local02, local01 wz
21348     B8 FF 9F 5D |  if_ne	jmp	#LR__2620
2134c     A7 F0 03 F6 | 	mov	ptra, fp
21350     B2 00 A0 FD | 	call	#popregs_
21354                 | _hg010b_spin2_waitvbl_ret
21354     2D 00 64 FD | 	ret
21358                 | 
21358                 | ' 
21358                 | ' 
21358                 | ' pub cls(fc,bc)   :c,i
21358                 | _hg010b_spin2_cls
21358     02 4A 05 F6 | 	mov	COUNT_, #2
2135c     A8 00 A0 FD | 	call	#pushregs_
21360     09 27 02 F6 | 	mov	local01, arg01
21364     0A 29 02 F6 | 	mov	local02, arg02
21368                 | ' 
21368                 | ' c:=bc
21368                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
21368     DD E4 05 F1 | 	add	objptr, #221
2136c     F2 12 02 FB | 	rdlong	arg01, objptr
21370     A5 E4 85 F1 | 	sub	objptr, #165
21374     F2 16 02 FB | 	rdlong	arg03, objptr
21378     02 16 66 F0 | 	shl	arg03, #2
2137c     14 15 02 F6 | 	mov	arg02, local02
21380     00 18 06 F6 | 	mov	arg04, #0
21384     01 1A 06 F6 | 	mov	arg05, #1
21388     0B 00 00 FF 
2138c     94 E4 05 F1 | 	add	objptr, ##5780
21390     F8 10 B0 FD | 	call	#_psram_spin2_fill
21394                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
21394     0B 00 00 FF 
21398     C8 E4 85 F1 | 	sub	objptr, ##5832
2139c     F2 12 02 FB | 	rdlong	arg01, objptr
213a0     04 E4 85 F1 | 	sub	objptr, #4
213a4     F2 16 02 FB | 	rdlong	arg03, objptr
213a8     09 17 82 F1 | 	sub	arg03, arg01
213ac     20 14 06 F6 | 	mov	arg02, #32
213b0     00 18 06 F6 | 	mov	arg04, #0
213b4     01 1A 06 F6 | 	mov	arg05, #1
213b8     0B 00 00 FF 
213bc     CC E4 05 F1 | 	add	objptr, ##5836
213c0     C8 10 B0 FD | 	call	#_psram_spin2_fill
213c4                 | ' setwritecolors(fc,bc)
213c4                 | ' 
213c4                 | ' write_color:=ff
213c4     0B 00 00 FF 
213c8     8B E4 85 F1 | 	sub	objptr, ##5771
213cc     F2 26 62 FC | 	wrlong	local01, objptr
213d0                 | ' write_background:=bb
213d0     04 E4 05 F1 | 	add	objptr, #4
213d4     F2 28 62 FC | 	wrlong	local02, objptr
213d8                 | ' cursor_x:=0
213d8     09 E4 85 F1 | 	sub	objptr, #9
213dc     F2 00 58 FC | 	wrword	#0, objptr
213e0                 | ' cursor_y:=0
213e0     02 E4 05 F1 | 	add	objptr, #2
213e4     F2 00 48 FC | 	wrbyte	#0, objptr
213e8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
213e8     02 E4 85 F1 | 	sub	objptr, #2
213ec     F2 14 E2 FA | 	rdword	arg02, objptr
213f0     02 14 66 F0 | 	shl	arg02, #2
213f4     02 E4 05 F1 | 	add	objptr, #2
213f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
213fc     3E E4 85 F1 | 	sub	objptr, #62
21400     04 16 66 F0 | 	shl	arg03, #4
21404     04 16 06 F1 | 	add	arg03, #4
21408     11 12 06 F6 | 	mov	arg01, #17
2140c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
21410                 | ' setcursorcolor(fc)
21410     13 13 02 F6 | 	mov	arg01, local01
21414     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
21418     14 FB 01 F6 | 	mov	result1, local02
2141c     00 FC 05 F6 | 	mov	result2, #0
21420     A7 F0 03 F6 | 	mov	ptra, fp
21424     B2 00 A0 FD | 	call	#popregs_
21428                 | _hg010b_spin2_cls_ret
21428     2D 00 64 FD | 	ret
2142c                 | 
2142c                 | ' 
2142c                 | ' ''---------- Output a char at the cursor position, move the cursor 
2142c                 | ' 
2142c                 | ' pub putchar(achar) | c,x,y,l,newcpl
2142c                 | _hg010b_spin2_putchar
2142c     02 4A 05 F6 | 	mov	COUNT_, #2
21430     A8 00 A0 FD | 	call	#pushregs_
21434     09 27 02 F6 | 	mov	local01, arg01
21438                 | ' 
21438                 | ' if achar==10
21438     0A 26 0E F2 | 	cmp	local01, #10 wz
2143c                 | '   crlf()
2143c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
21440                 | ' if achar==9
21440     09 26 0E F2 | 	cmp	local01, #9 wz
21444     18 00 90 5D |  if_ne	jmp	#LR__2630
21448                 | '   cursor_x:=(cursor_x& %11110000)+16
21448     3C E4 05 F1 | 	add	objptr, #60
2144c     F2 16 E2 FA | 	rdword	arg03, objptr
21450     F0 16 06 F5 | 	and	arg03, #240
21454     10 16 06 F1 | 	add	arg03, #16
21458     F2 16 52 FC | 	wrword	arg03, objptr
2145c     3C E4 85 F1 | 	sub	objptr, #60
21460                 | LR__2630
21460                 | '   
21460                 | ' if (achar<>9) && (achar<>10) 
21460     09 26 0E F2 | 	cmp	local01, #9 wz
21464     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
21468     A8 00 90 AD |  if_e	jmp	#LR__2631
2146c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2146c     3C E4 05 F1 | 	add	objptr, #60
21470     F2 12 E2 FA | 	rdword	arg01, objptr
21474     02 E4 05 F1 | 	add	objptr, #2
21478     F2 14 C2 FA | 	rdbyte	arg02, objptr
2147c     04 14 66 F0 | 	shl	arg02, #4
21480     04 14 06 F1 | 	add	arg02, #4
21484     03 E4 05 F1 | 	add	objptr, #3
21488     F2 18 02 FB | 	rdlong	arg04, objptr
2148c     04 E4 05 F1 | 	add	objptr, #4
21490     F2 1A 02 FB | 	rdlong	arg05, objptr
21494     45 E4 85 F1 | 	sub	objptr, #69
21498     13 17 02 F6 | 	mov	arg03, local01
2149c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
214a0     04 E4 05 F1 | 	add	objptr, #4
214a4     F2 12 02 FB | 	rdlong	arg01, objptr
214a8     10 00 00 FF 
214ac     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
214b0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
214b4     3A E4 05 F1 | 	add	objptr, #58
214b8     F2 1A C2 FA | 	rdbyte	arg05, objptr
214bc     0D 17 02 FD | 	qmul	arg03, arg05
214c0                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
214c0     10 00 00 FF 
214c4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
214c8     02 E4 85 F1 | 	sub	objptr, #2
214cc     F2 28 E2 FA | 	rdword	local02, objptr
214d0     01 28 46 F0 | 	shr	local02, #1
214d4     13 15 02 F6 | 	mov	arg02, local01
214d8     01 16 06 F6 | 	mov	arg03, #1
214dc     00 18 06 F6 | 	mov	arg04, #0
214e0     01 1A 06 F6 | 	mov	arg05, #1
214e4     0B 00 00 FF 
214e8     90 E4 05 F1 | 	add	objptr, ##5776
214ec     18 26 62 FD | 	getqx	local01
214f0     14 27 02 F1 | 	add	local01, local02
214f4     13 13 02 F1 | 	add	arg01, local01
214f8     90 0F B0 FD | 	call	#_psram_spin2_fill
214fc                 | '   cursor_x+=2
214fc     0B 00 00 FF 
21500     90 E4 85 F1 | 	sub	objptr, ##5776
21504     F2 28 E2 FA | 	rdword	local02, objptr
21508     02 28 06 F1 | 	add	local02, #2
2150c     F2 28 52 FC | 	wrword	local02, objptr
21510     3C E4 85 F1 | 	sub	objptr, #60
21514                 | LR__2631
21514                 | ' 
21514                 | ' if cursor_x>=256
21514     3C E4 05 F1 | 	add	objptr, #60
21518     F2 28 E2 FA | 	rdword	local02, objptr
2151c     3C E4 85 F1 | 	sub	objptr, #60
21520     00 29 56 F2 | 	cmps	local02, #256 wc
21524     64 00 90 CD |  if_b	jmp	#LR__2633
21528                 | '   cursor_x:=0
21528     3C E4 05 F1 | 	add	objptr, #60
2152c     F2 00 58 FC | 	wrword	#0, objptr
21530                 | '   cursor_y+=1
21530     02 E4 05 F1 | 	add	objptr, #2
21534     F2 28 C2 FA | 	rdbyte	local02, objptr
21538     01 28 06 F1 | 	add	local02, #1
2153c     F2 28 42 FC | 	wrbyte	local02, objptr
21540                 | '   if cursor_y>st_lines-1
21540     C3 E4 05 F1 | 	add	objptr, #195
21544     F2 28 02 FB | 	rdlong	local02, objptr
21548     01 28 86 F1 | 	sub	local02, #1
2154c     C3 E4 85 F1 | 	sub	objptr, #195
21550     F2 16 C2 FA | 	rdbyte	arg03, objptr
21554     3E E4 85 F1 | 	sub	objptr, #62
21558     14 17 5A F2 | 	cmps	arg03, local02 wcz
2155c     2C 00 90 ED |  if_be	jmp	#LR__2632
21560                 | '     scrollup2()
21560     00 12 06 F6 | 	mov	arg01, #0
21564     01 00 00 FF 
21568     58 14 06 F6 | 	mov	arg02, ##600
2156c     10 16 06 F6 | 	mov	arg03, #16
21570     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
21574                 | '     cursor_y:=st_lines-1
21574     01 E5 05 F1 | 	add	objptr, #257
21578     F2 28 02 FB | 	rdlong	local02, objptr
2157c     01 28 86 F1 | 	sub	local02, #1
21580     C3 E4 85 F1 | 	sub	objptr, #195
21584     F2 28 42 FC | 	wrbyte	local02, objptr
21588     3E E4 85 F1 | 	sub	objptr, #62
2158c                 | LR__2632
2158c                 | LR__2633
2158c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2158c     3C E4 05 F1 | 	add	objptr, #60
21590     F2 14 E2 FA | 	rdword	arg02, objptr
21594     02 14 66 F0 | 	shl	arg02, #2
21598     02 E4 05 F1 | 	add	objptr, #2
2159c     F2 16 C2 FA | 	rdbyte	arg03, objptr
215a0     3E E4 85 F1 | 	sub	objptr, #62
215a4     04 16 66 F0 | 	shl	arg03, #4
215a8     04 16 06 F1 | 	add	arg03, #4
215ac     11 12 06 F6 | 	mov	arg01, #17
215b0     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
215b4     A7 F0 03 F6 | 	mov	ptra, fp
215b8     B2 00 A0 FD | 	call	#popregs_
215bc                 | _hg010b_spin2_putchar_ret
215bc     2D 00 64 FD | 	ret
215c0                 | 
215c0                 | '     
215c0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
215c0                 | ' 
215c0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
215c0                 | _hg010b_spin2_putchar2
215c0     02 4A 05 F6 | 	mov	COUNT_, #2
215c4     A8 00 A0 FD | 	call	#pushregs_
215c8     09 27 02 F6 | 	mov	local01, arg01
215cc                 | ' 
215cc                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
215cc     3C E4 05 F1 | 	add	objptr, #60
215d0     F2 12 E2 FA | 	rdword	arg01, objptr
215d4     02 E4 05 F1 | 	add	objptr, #2
215d8     F2 14 C2 FA | 	rdbyte	arg02, objptr
215dc     04 14 66 F0 | 	shl	arg02, #4
215e0     04 14 06 F1 | 	add	arg02, #4
215e4     03 E4 05 F1 | 	add	objptr, #3
215e8     F2 18 02 FB | 	rdlong	arg04, objptr
215ec     04 E4 05 F1 | 	add	objptr, #4
215f0     F2 1A 02 FB | 	rdlong	arg05, objptr
215f4     45 E4 85 F1 | 	sub	objptr, #69
215f8     13 17 02 F6 | 	mov	arg03, local01
215fc     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
21600     04 E4 05 F1 | 	add	objptr, #4
21604     F2 12 02 FB | 	rdlong	arg01, objptr
21608     10 00 00 FF 
2160c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
21610     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
21614     3A E4 05 F1 | 	add	objptr, #58
21618     F2 1A C2 FA | 	rdbyte	arg05, objptr
2161c     0D 17 02 FD | 	qmul	arg03, arg05
21620                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
21620     10 00 00 FF 
21624     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
21628     02 E4 85 F1 | 	sub	objptr, #2
2162c     F2 28 E2 FA | 	rdword	local02, objptr
21630     01 28 46 F0 | 	shr	local02, #1
21634     13 15 02 F6 | 	mov	arg02, local01
21638     01 16 06 F6 | 	mov	arg03, #1
2163c     00 18 06 F6 | 	mov	arg04, #0
21640     01 1A 06 F6 | 	mov	arg05, #1
21644     0B 00 00 FF 
21648     90 E4 05 F1 | 	add	objptr, ##5776
2164c     18 26 62 FD | 	getqx	local01
21650     14 27 02 F1 | 	add	local01, local02
21654     13 13 02 F1 | 	add	arg01, local01
21658     30 0E B0 FD | 	call	#_psram_spin2_fill
2165c                 | ' 
2165c                 | ' cursor_x+=2
2165c     0B 00 00 FF 
21660     90 E4 85 F1 | 	sub	objptr, ##5776
21664     F2 28 E2 FA | 	rdword	local02, objptr
21668     02 28 06 F1 | 	add	local02, #2
2166c     F2 28 52 FC | 	wrword	local02, objptr
21670                 | ' if cursor_x>=256
21670     F2 28 E2 FA | 	rdword	local02, objptr
21674     3C E4 85 F1 | 	sub	objptr, #60
21678     00 29 56 F2 | 	cmps	local02, #256 wc
2167c     64 00 90 CD |  if_b	jmp	#LR__2641
21680                 | '   cursor_x:=0
21680     3C E4 05 F1 | 	add	objptr, #60
21684     F2 00 58 FC | 	wrword	#0, objptr
21688                 | '   cursor_y+=1
21688     02 E4 05 F1 | 	add	objptr, #2
2168c     F2 28 C2 FA | 	rdbyte	local02, objptr
21690     01 28 06 F1 | 	add	local02, #1
21694     F2 28 42 FC | 	wrbyte	local02, objptr
21698                 | '   if cursor_y>st_lines-1
21698     C3 E4 05 F1 | 	add	objptr, #195
2169c     F2 28 02 FB | 	rdlong	local02, objptr
216a0     01 28 86 F1 | 	sub	local02, #1
216a4     C3 E4 85 F1 | 	sub	objptr, #195
216a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
216ac     3E E4 85 F1 | 	sub	objptr, #62
216b0     14 17 5A F2 | 	cmps	arg03, local02 wcz
216b4     2C 00 90 ED |  if_be	jmp	#LR__2640
216b8                 | '     scrollup2()
216b8     00 12 06 F6 | 	mov	arg01, #0
216bc     01 00 00 FF 
216c0     58 14 06 F6 | 	mov	arg02, ##600
216c4     10 16 06 F6 | 	mov	arg03, #16
216c8     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
216cc                 | '     cursor_y:=st_lines-1
216cc     01 E5 05 F1 | 	add	objptr, #257
216d0     F2 28 02 FB | 	rdlong	local02, objptr
216d4     01 28 86 F1 | 	sub	local02, #1
216d8     C3 E4 85 F1 | 	sub	objptr, #195
216dc     F2 28 42 FC | 	wrbyte	local02, objptr
216e0     3E E4 85 F1 | 	sub	objptr, #62
216e4                 | LR__2640
216e4                 | LR__2641
216e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
216e4     3C E4 05 F1 | 	add	objptr, #60
216e8     F2 14 E2 FA | 	rdword	arg02, objptr
216ec     02 14 66 F0 | 	shl	arg02, #2
216f0     02 E4 05 F1 | 	add	objptr, #2
216f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
216f8     3E E4 85 F1 | 	sub	objptr, #62
216fc     04 16 66 F0 | 	shl	arg03, #4
21700     04 16 06 F1 | 	add	arg03, #4
21704     11 12 06 F6 | 	mov	arg01, #17
21708     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2170c     A7 F0 03 F6 | 	mov	ptra, fp
21710     B2 00 A0 FD | 	call	#popregs_
21714                 | _hg010b_spin2_putchar2_ret
21714     2D 00 64 FD | 	ret
21718                 | 
21718                 | ' ''--------- Output a string at the cursor position, move the cursor  
21718                 | ' 
21718                 | ' pub write(text) | iii,c,ncx,ncy
21718                 | _hg010b_spin2_write
21718     04 4A 05 F6 | 	mov	COUNT_, #4
2171c     A8 00 A0 FD | 	call	#pushregs_
21720     09 27 02 F6 | 	mov	local01, arg01
21724                 | ' 
21724                 | ' repeat iii from 0 to strsize(text)-1
21724     00 28 06 F6 | 	mov	local02, #0
21728     13 13 02 F6 | 	mov	arg01, local01
2172c     09 2B 02 F6 | 	mov	local03, arg01
21730     97 06 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
21734                 | LR__2650
21734     15 FB C9 FA | 	rdbyte	result1, local03 wz
21738     01 2A 06 51 |  if_ne	add	local03, #1
2173c     F4 FF 9F 5D |  if_ne	jmp	#LR__2650
21740                 | LR__2651
21740     09 2B 82 F1 | 	sub	local03, arg01
21744     01 2A 86 F1 | 	sub	local03, #1
21748     00 2A 56 F2 | 	cmps	local03, #0 wc
2174c     01 2C 86 F6 | 	negc	local04, #1
21750     16 2B 02 F1 | 	add	local03, local04
21754                 | LR__2652
21754                 | '   putchar2(byte[text+iii])
21754     13 13 02 F6 | 	mov	arg01, local01
21758     14 13 02 F1 | 	add	arg01, local02
2175c     09 13 C2 FA | 	rdbyte	arg01, arg01
21760     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
21764     16 29 02 F1 | 	add	local02, local04
21768     15 29 0A F2 | 	cmp	local02, local03 wz
2176c     E4 FF 9F 5D |  if_ne	jmp	#LR__2652
21770     A7 F0 03 F6 | 	mov	ptra, fp
21774     B2 00 A0 FD | 	call	#popregs_
21778                 | _hg010b_spin2_write_ret
21778     2D 00 64 FD | 	ret
2177c                 | 
2177c                 | '    
2177c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
2177c                 | ' 
2177c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
2177c                 | _hg010b_spin2_scrollup2
2177c     03 4A 05 F6 | 	mov	COUNT_, #3
21780     A8 00 A0 FD | 	call	#pushregs_
21784                 | ' 	
21784                 | ' repeat i from 4 to 579 
21784     04 26 06 F6 | 	mov	local01, #4
21788                 | LR__2660
21788     F9 E4 05 F1 | 	add	objptr, #249
2178c     F2 1A 02 FB | 	rdlong	arg05, objptr
21790     1C E4 85 F1 | 	sub	objptr, #28
21794     F2 14 02 FB | 	rdlong	arg02, objptr
21798     13 19 02 F6 | 	mov	arg04, local01
2179c     10 18 06 F1 | 	add	arg04, #16
217a0     02 18 66 F0 | 	shl	arg04, #2
217a4     14 E4 05 F1 | 	add	objptr, #20
217a8     F2 16 02 FB | 	rdlong	arg03, objptr
217ac     0B 19 02 FD | 	qmul	arg04, arg03
217b0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
217b0     F6 03 00 FF 
217b4     00 12 06 F6 | 	mov	arg01, ##519168
217b8     0D 13 82 F1 | 	sub	arg01, arg05
217bc     02 16 66 F0 | 	shl	arg03, #2
217c0     0A 00 00 FF 
217c4     DB E5 05 F1 | 	add	objptr, ##5595
217c8     18 1A 62 FD | 	getqx	arg05
217cc     0D 15 02 F1 | 	add	arg02, arg05
217d0     80 0B B0 FD | 	call	#_psram_spin2_read1
217d4     0A 00 00 FF 
217d8     D3 E5 85 F1 | 	sub	objptr, ##5587
217dc     F2 1A 02 FB | 	rdlong	arg05, objptr
217e0     1C E4 85 F1 | 	sub	objptr, #28
217e4     F2 14 02 FB | 	rdlong	arg02, objptr
217e8     13 19 02 F6 | 	mov	arg04, local01
217ec     02 18 66 F0 | 	shl	arg04, #2
217f0     14 E4 05 F1 | 	add	objptr, #20
217f4     F2 16 02 FB | 	rdlong	arg03, objptr
217f8     0B 19 02 FD | 	qmul	arg04, arg03
217fc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
217fc     F6 03 00 FF 
21800     00 12 06 F6 | 	mov	arg01, ##519168
21804     0D 13 82 F1 | 	sub	arg01, arg05
21808     02 16 66 F0 | 	shl	arg03, #2
2180c     0A 00 00 FF 
21810     DB E5 05 F1 | 	add	objptr, ##5595
21814     18 1A 62 FD | 	getqx	arg05
21818     0D 15 02 F1 | 	add	arg02, arg05
2181c     D0 0B B0 FD | 	call	#_psram_spin2_write
21820     0B 00 00 FF 
21824     CC E4 85 F1 | 	sub	objptr, ##5836
21828     01 26 06 F1 | 	add	local01, #1
2182c     01 00 00 FF 
21830     44 26 16 F2 | 	cmp	local01, ##580 wc
21834     50 FF 9F CD |  if_b	jmp	#LR__2660
21838                 | ' 
21838                 | ' repeat i from 580 to 599
21838     01 00 00 FF 
2183c     44 26 06 F6 | 	mov	local01, ##580
21840                 | LR__2661
21840                 | '    fastline(0,1023,i,write_background)   
21840     45 E4 05 F1 | 	add	objptr, #69
21844     F2 18 02 FB | 	rdlong	arg04, objptr
21848     45 E4 85 F1 | 	sub	objptr, #69
2184c     00 12 06 F6 | 	mov	arg01, #0
21850     09 14 CE F9 | 	bmask	arg02, #9
21854     13 17 02 F6 | 	mov	arg03, local01
21858     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
2185c     01 26 06 F1 | 	add	local01, #1
21860     01 00 00 FF 
21864     58 26 16 F2 | 	cmp	local01, ##600 wc
21868     D4 FF 9F CD |  if_b	jmp	#LR__2661
2186c                 | ' repeat i from 0 to 3
2186c     00 26 06 F6 | 	mov	local01, #0
21870                 | LR__2662
21870                 | '    fastline(0,1023,i,write_background)      
21870     45 E4 05 F1 | 	add	objptr, #69
21874     F2 18 02 FB | 	rdlong	arg04, objptr
21878     45 E4 85 F1 | 	sub	objptr, #69
2187c     00 12 06 F6 | 	mov	arg01, #0
21880     09 14 CE F9 | 	bmask	arg02, #9
21884     13 17 02 F6 | 	mov	arg03, local01
21888     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2188c     01 26 06 F1 | 	add	local01, #1
21890     04 26 56 F2 | 	cmps	local01, #4 wc
21894     D8 FF 9F CD |  if_b	jmp	#LR__2662
21898                 | ' 
21898                 | ' repeat i from 0 to 35
21898     00 26 06 F6 | 	mov	local01, #0
2189c                 | LR__2663
2189c     13 1B 02 F6 | 	mov	arg05, local01
218a0     01 1A 06 F1 | 	add	arg05, #1
218a4     10 00 00 FF 
218a8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
218ac     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
218b0     0B 1B 02 FD | 	qmul	arg05, arg03
218b4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
218b4     F6 03 00 FF 
218b8     00 12 06 F6 | 	mov	arg01, ##519168
218bc     F9 E4 05 F1 | 	add	objptr, #249
218c0     F2 1A 02 FB | 	rdlong	arg05, objptr
218c4     0D 13 82 F1 | 	sub	arg01, arg05
218c8     F5 E4 85 F1 | 	sub	objptr, #245
218cc     F2 14 02 FB | 	rdlong	arg02, objptr
218d0     10 00 00 FF 
218d4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
218d8     0B 00 00 FF 
218dc     C8 E4 05 F1 | 	add	objptr, ##5832
218e0     18 1A 62 FD | 	getqx	arg05
218e4     0D 15 02 F1 | 	add	arg02, arg05
218e8     68 0A B0 FD | 	call	#_psram_spin2_read1
218ec     10 00 00 FF 
218f0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
218f4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
218f8     0B 27 02 FD | 	qmul	local01, arg03
218fc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
218fc     F6 03 00 FF 
21900     00 12 06 F6 | 	mov	arg01, ##519168
21904     0A 00 00 FF 
21908     D3 E5 85 F1 | 	sub	objptr, ##5587
2190c     F2 1A 02 FB | 	rdlong	arg05, objptr
21910     0D 13 82 F1 | 	sub	arg01, arg05
21914     F5 E4 85 F1 | 	sub	objptr, #245
21918     F2 14 02 FB | 	rdlong	arg02, objptr
2191c     10 00 00 FF 
21920     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
21924     0B 00 00 FF 
21928     C8 E4 05 F1 | 	add	objptr, ##5832
2192c     18 1A 62 FD | 	getqx	arg05
21930     0D 15 02 F1 | 	add	arg02, arg05
21934     B8 0A B0 FD | 	call	#_psram_spin2_write
21938     0B 00 00 FF 
2193c     CC E4 85 F1 | 	sub	objptr, ##5836
21940     01 26 06 F1 | 	add	local01, #1
21944     24 26 56 F2 | 	cmps	local01, #36 wc
21948     50 FF 9F CD |  if_b	jmp	#LR__2663
2194c                 | ' repeat i from 0 to timings[7]-1
2194c     00 26 06 F6 | 	mov	local01, #0
21950     10 00 00 FF 
21954     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
21958     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
2195c     10 00 00 FF 
21960     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
21964     01 28 86 F1 | 	sub	local02, #1
21968     00 28 56 F2 | 	cmps	local02, #0 wc
2196c     01 2A 86 F6 | 	negc	local03, #1
21970     15 29 02 F1 | 	add	local02, local03
21974                 | LR__2664
21974                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
21974     04 E4 05 F1 | 	add	objptr, #4
21978     F2 12 02 FB | 	rdlong	arg01, objptr
2197c     10 00 00 FF 
21980     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
21984     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
21988     10 00 00 FF 
2198c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
21990     0D 19 02 F6 | 	mov	arg04, arg05
21994     03 18 66 F0 | 	shl	arg04, #3
21998     0D 19 02 F1 | 	add	arg04, arg05
2199c     02 18 66 F0 | 	shl	arg04, #2
219a0     13 19 02 F1 | 	add	arg04, local01
219a4     0C 13 02 F1 | 	add	arg01, arg04
219a8     20 14 06 F6 | 	mov	arg02, #32
219ac     01 16 06 F6 | 	mov	arg03, #1
219b0     00 18 06 F6 | 	mov	arg04, #0
219b4     01 1A 06 F6 | 	mov	arg05, #1
219b8     0B 00 00 FF 
219bc     C8 E4 05 F1 | 	add	objptr, ##5832
219c0     C8 0A B0 FD | 	call	#_psram_spin2_fill
219c4     0B 00 00 FF 
219c8     CC E4 85 F1 | 	sub	objptr, ##5836
219cc     15 27 02 F1 | 	add	local01, local03
219d0     14 27 0A F2 | 	cmp	local01, local02 wz
219d4     9C FF 9F 5D |  if_ne	jmp	#LR__2664
219d8     A7 F0 03 F6 | 	mov	ptra, fp
219dc     B2 00 A0 FD | 	call	#popregs_
219e0                 | _hg010b_spin2_scrollup2_ret
219e0     2D 00 64 FD | 	ret
219e4                 | 
219e4                 | '  
219e4                 | ' ''----------- Scroll the screen one line down 
219e4                 | ' 
219e4                 | ' pub scrolldown(start=0) | i
219e4                 | _hg010b_spin2_scrolldown
219e4     05 4A 05 F6 | 	mov	COUNT_, #5
219e8     A8 00 A0 FD | 	call	#pushregs_
219ec     09 27 02 F6 | 	mov	local01, arg01
219f0                 | ' 
219f0                 | ' repeat i from 579 to (start*16)+4
219f0     01 00 00 FF 
219f4     43 28 06 F6 | 	mov	local02, ##579
219f8     13 2B 02 F6 | 	mov	local03, local01
219fc     04 2A 66 F0 | 	shl	local03, #4
21a00     04 2A 06 F1 | 	add	local03, #4
21a04     01 00 00 FF 
21a08     43 2A 56 F2 | 	cmps	local03, ##579 wc
21a0c     01 2C 86 F6 | 	negc	local04, #1
21a10     16 2F 02 F6 | 	mov	local05, local04
21a14     16 2B 02 F1 | 	add	local03, local04
21a18                 | LR__2670
21a18     F9 E4 05 F1 | 	add	objptr, #249
21a1c     F2 2C 02 FB | 	rdlong	local04, objptr
21a20     1C E4 85 F1 | 	sub	objptr, #28
21a24     F2 14 02 FB | 	rdlong	arg02, objptr
21a28     14 1B 02 F6 | 	mov	arg05, local02
21a2c     02 1A 66 F0 | 	shl	arg05, #2
21a30     14 E4 05 F1 | 	add	objptr, #20
21a34     F2 16 02 FB | 	rdlong	arg03, objptr
21a38     0B 1B 02 FD | 	qmul	arg05, arg03
21a3c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
21a3c     F6 03 00 FF 
21a40     00 12 06 F6 | 	mov	arg01, ##519168
21a44     16 13 82 F1 | 	sub	arg01, local04
21a48     02 16 66 F0 | 	shl	arg03, #2
21a4c     0A 00 00 FF 
21a50     DB E5 05 F1 | 	add	objptr, ##5595
21a54     18 2C 62 FD | 	getqx	local04
21a58     16 15 02 F1 | 	add	arg02, local04
21a5c     F4 08 B0 FD | 	call	#_psram_spin2_read1
21a60     0A 00 00 FF 
21a64     D3 E5 85 F1 | 	sub	objptr, ##5587
21a68     F2 2C 02 FB | 	rdlong	local04, objptr
21a6c     1C E4 85 F1 | 	sub	objptr, #28
21a70     F2 14 02 FB | 	rdlong	arg02, objptr
21a74     14 1B 02 F6 | 	mov	arg05, local02
21a78     10 1A 06 F1 | 	add	arg05, #16
21a7c     02 1A 66 F0 | 	shl	arg05, #2
21a80     14 E4 05 F1 | 	add	objptr, #20
21a84     F2 16 02 FB | 	rdlong	arg03, objptr
21a88     0B 1B 02 FD | 	qmul	arg05, arg03
21a8c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
21a8c     F6 03 00 FF 
21a90     00 12 06 F6 | 	mov	arg01, ##519168
21a94     16 13 82 F1 | 	sub	arg01, local04
21a98     02 16 66 F0 | 	shl	arg03, #2
21a9c     0A 00 00 FF 
21aa0     DB E5 05 F1 | 	add	objptr, ##5595
21aa4     18 2C 62 FD | 	getqx	local04
21aa8     16 15 02 F1 | 	add	arg02, local04
21aac     40 09 B0 FD | 	call	#_psram_spin2_write
21ab0     0B 00 00 FF 
21ab4     CC E4 85 F1 | 	sub	objptr, ##5836
21ab8     17 29 02 F1 | 	add	local02, local05
21abc     15 29 0A F2 | 	cmp	local02, local03 wz
21ac0     54 FF 9F 5D |  if_ne	jmp	#LR__2670
21ac4                 | ' 
21ac4                 | ' repeat i from (start*16)+4 to (start*16)+19
21ac4     13 29 02 F6 | 	mov	local02, local01
21ac8     04 28 66 F0 | 	shl	local02, #4
21acc     04 28 06 F1 | 	add	local02, #4
21ad0     13 2F 02 F6 | 	mov	local05, local01
21ad4     04 2E 66 F0 | 	shl	local05, #4
21ad8     13 2E 06 F1 | 	add	local05, #19
21adc     13 2D 02 F6 | 	mov	local04, local01
21ae0     04 2C 66 F0 | 	shl	local04, #4
21ae4     04 2C 06 F1 | 	add	local04, #4
21ae8     16 2F 52 F2 | 	cmps	local05, local04 wc
21aec     01 2C 86 F6 | 	negc	local04, #1
21af0     16 2B 02 F6 | 	mov	local03, local04
21af4     16 2F 02 F1 | 	add	local05, local04
21af8                 | LR__2671
21af8                 | '    fastline(0,1023,i,write_background)    
21af8     45 E4 05 F1 | 	add	objptr, #69
21afc     F2 18 02 FB | 	rdlong	arg04, objptr
21b00     45 E4 85 F1 | 	sub	objptr, #69
21b04     00 12 06 F6 | 	mov	arg01, #0
21b08     09 14 CE F9 | 	bmask	arg02, #9
21b0c     14 17 02 F6 | 	mov	arg03, local02
21b10     08 ED BF FD | 	call	#_hg010b_spin2_fastline
21b14     15 29 02 F1 | 	add	local02, local03
21b18     17 29 0A F2 | 	cmp	local02, local05 wz
21b1c     D8 FF 9F 5D |  if_ne	jmp	#LR__2671
21b20                 | '    
21b20                 | ' repeat i from 35 to start
21b20     23 28 06 F6 | 	mov	local02, #35
21b24     23 26 56 F2 | 	cmps	local01, #35 wc
21b28     01 2C 86 F6 | 	negc	local04, #1
21b2c     13 2F 02 F6 | 	mov	local05, local01
21b30     16 2F 02 F1 | 	add	local05, local04
21b34                 | LR__2672
21b34                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
21b34     F6 03 00 FF 
21b38     00 12 06 F6 | 	mov	arg01, ##519168
21b3c     F9 E4 05 F1 | 	add	objptr, #249
21b40     F2 2A 02 FB | 	rdlong	local03, objptr
21b44     15 13 82 F1 | 	sub	arg01, local03
21b48     F5 E4 85 F1 | 	sub	objptr, #245
21b4c     F2 14 02 FB | 	rdlong	arg02, objptr
21b50     14 2B 02 F6 | 	mov	local03, local02
21b54     07 2A 66 F0 | 	shl	local03, #7
21b58     15 15 02 F1 | 	add	arg02, local03
21b5c     80 16 06 F6 | 	mov	arg03, #128
21b60     0B 00 00 FF 
21b64     C8 E4 05 F1 | 	add	objptr, ##5832
21b68     E8 07 B0 FD | 	call	#_psram_spin2_read1
21b6c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
21b6c     F6 03 00 FF 
21b70     00 12 06 F6 | 	mov	arg01, ##519168
21b74     0A 00 00 FF 
21b78     D3 E5 85 F1 | 	sub	objptr, ##5587
21b7c     F2 2A 02 FB | 	rdlong	local03, objptr
21b80     15 13 82 F1 | 	sub	arg01, local03
21b84     F5 E4 85 F1 | 	sub	objptr, #245
21b88     F2 14 02 FB | 	rdlong	arg02, objptr
21b8c     14 2B 02 F6 | 	mov	local03, local02
21b90     01 2A 06 F1 | 	add	local03, #1
21b94     07 2A 66 F0 | 	shl	local03, #7
21b98     15 15 02 F1 | 	add	arg02, local03
21b9c     80 16 06 F6 | 	mov	arg03, #128
21ba0     0B 00 00 FF 
21ba4     C8 E4 05 F1 | 	add	objptr, ##5832
21ba8     44 08 B0 FD | 	call	#_psram_spin2_write
21bac     0B 00 00 FF 
21bb0     CC E4 85 F1 | 	sub	objptr, ##5836
21bb4     16 29 02 F1 | 	add	local02, local04
21bb8     17 29 0A F2 | 	cmp	local02, local05 wz
21bbc     74 FF 9F 5D |  if_ne	jmp	#LR__2672
21bc0                 | ' repeat i from 0 to 127
21bc0     00 28 06 F6 | 	mov	local02, #0
21bc4                 | LR__2673
21bc4                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
21bc4     04 E4 05 F1 | 	add	objptr, #4
21bc8     F2 12 02 FB | 	rdlong	arg01, objptr
21bcc     13 2F 02 F6 | 	mov	local05, local01
21bd0     07 2E 66 F0 | 	shl	local05, #7
21bd4     17 13 02 F1 | 	add	arg01, local05
21bd8     14 13 02 F1 | 	add	arg01, local02
21bdc     20 14 06 F6 | 	mov	arg02, #32
21be0     01 16 06 F6 | 	mov	arg03, #1
21be4     00 18 06 F6 | 	mov	arg04, #0
21be8     01 1A 06 F6 | 	mov	arg05, #1
21bec     0B 00 00 FF 
21bf0     C8 E4 05 F1 | 	add	objptr, ##5832
21bf4     94 08 B0 FD | 	call	#_psram_spin2_fill
21bf8     0B 00 00 FF 
21bfc     CC E4 85 F1 | 	sub	objptr, ##5836
21c00     01 28 06 F1 | 	add	local02, #1
21c04     80 28 56 F2 | 	cmps	local02, #128 wc
21c08     B8 FF 9F CD |  if_b	jmp	#LR__2673
21c0c     A7 F0 03 F6 | 	mov	ptra, fp
21c10     B2 00 A0 FD | 	call	#popregs_
21c14                 | _hg010b_spin2_scrolldown_ret
21c14     2D 00 64 FD | 	ret
21c18                 | 
21c18                 | ' 
21c18                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
21c18                 | ' 
21c18                 | ' pub crlf()
21c18                 | _hg010b_spin2_crlf
21c18                 | ' 
21c18                 | ' cursor_x:=leading_spaces*2
21c18     01 00 00 FF 
21c1c     B6 E4 05 F1 | 	add	objptr, ##694
21c20     F2 16 02 FB | 	rdlong	arg03, objptr
21c24     01 16 66 F0 | 	shl	arg03, #1
21c28     01 00 00 FF 
21c2c     7A E4 85 F1 | 	sub	objptr, ##634
21c30     F2 16 52 FC | 	wrword	arg03, objptr
21c34                 | ' cursor_y+=1
21c34     02 E4 05 F1 | 	add	objptr, #2
21c38     F2 16 C2 FA | 	rdbyte	arg03, objptr
21c3c     01 16 06 F1 | 	add	arg03, #1
21c40     F2 16 42 FC | 	wrbyte	arg03, objptr
21c44                 | ' if cursor_y>st_lines-1
21c44     C3 E4 05 F1 | 	add	objptr, #195
21c48     F2 16 02 FB | 	rdlong	arg03, objptr
21c4c     01 16 86 F1 | 	sub	arg03, #1
21c50     C3 E4 85 F1 | 	sub	objptr, #195
21c54     F2 14 C2 FA | 	rdbyte	arg02, objptr
21c58     3E E4 85 F1 | 	sub	objptr, #62
21c5c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
21c60     2C 00 90 ED |  if_be	jmp	#LR__2680
21c64                 | '   scrollup2()
21c64     00 12 06 F6 | 	mov	arg01, #0
21c68     01 00 00 FF 
21c6c     58 14 06 F6 | 	mov	arg02, ##600
21c70     10 16 06 F6 | 	mov	arg03, #16
21c74     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
21c78                 | '   cursor_y:=st_lines-1
21c78     01 E5 05 F1 | 	add	objptr, #257
21c7c     F2 16 02 FB | 	rdlong	arg03, objptr
21c80     01 16 86 F1 | 	sub	arg03, #1
21c84     C3 E4 85 F1 | 	sub	objptr, #195
21c88     F2 16 42 FC | 	wrbyte	arg03, objptr
21c8c     3E E4 85 F1 | 	sub	objptr, #62
21c90                 | LR__2680
21c90                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
21c90     3C E4 05 F1 | 	add	objptr, #60
21c94     F2 14 E2 FA | 	rdword	arg02, objptr
21c98     02 14 66 F0 | 	shl	arg02, #2
21c9c     02 E4 05 F1 | 	add	objptr, #2
21ca0     F2 16 C2 FA | 	rdbyte	arg03, objptr
21ca4     3E E4 85 F1 | 	sub	objptr, #62
21ca8     04 16 66 F0 | 	shl	arg03, #4
21cac     04 16 06 F1 | 	add	arg03, #4
21cb0     11 12 06 F6 | 	mov	arg01, #17
21cb4     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
21cb8                 | _hg010b_spin2_crlf_ret
21cb8     2D 00 64 FD | 	ret
21cbc                 | 
21cbc                 | ' 
21cbc                 | ' 
21cbc                 | ' '*************************************************************************
21cbc                 | ' '                                                                        *
21cbc                 | ' '  Conversions                                                           *
21cbc                 | ' '                                                                        *
21cbc                 | ' '*************************************************************************
21cbc                 | ' 
21cbc                 | ' ''---------- Convert a integer to dec string, return a pointer
21cbc                 | ' 
21cbc                 | ' pub inttostr(i):result |q,pos,k,j
21cbc                 | _hg010b_spin2_inttostr
21cbc     03 4A 05 F6 | 	mov	COUNT_, #3
21cc0     A8 00 A0 FD | 	call	#pushregs_
21cc4     09 27 0A F6 | 	mov	local01, arg01 wz
21cc8                 | ' 
21cc8                 | ' j:=i
21cc8                 | ' pos:=10
21cc8     0A 28 06 F6 | 	mov	local02, #10
21ccc                 | ' k:=0
21ccc     00 2A 06 F6 | 	mov	local03, #0
21cd0                 | ' 
21cd0                 | ' if (j==0)
21cd0     18 00 90 5D |  if_ne	jmp	#LR__2690
21cd4                 | '   n_string[0]:=48
21cd4     4D E4 05 F1 | 	add	objptr, #77
21cd8     F2 60 48 FC | 	wrbyte	#48, objptr
21cdc                 | '   n_string[1]:=0
21cdc     01 E4 05 F1 | 	add	objptr, #1
21ce0     F2 00 48 FC | 	wrbyte	#0, objptr
21ce4     4E E4 85 F1 | 	sub	objptr, #78
21ce8     C4 00 90 FD | 	jmp	#LR__2697
21cec                 | LR__2690
21cec                 | ' 
21cec                 | ' else
21cec                 | '   if (j<0)
21cec     13 27 52 F6 | 	abs	local01, local01 wc
21cf0                 | '     j:=0-j
21cf0                 | '     k:=45
21cf0     2D 2A 06 C6 |  if_b	mov	local03, #45
21cf4                 | ' 
21cf4                 | '   n_string[11]:=0
21cf4     58 E4 05 F1 | 	add	objptr, #88
21cf8     F2 00 48 FC | 	wrbyte	#0, objptr
21cfc     58 E4 85 F1 | 	sub	objptr, #88
21d00     97 24 48 FB | 	callpa	#(@LR__2692-@LR__2691)>>2,fcache_load_ptr_
21d04                 | '   repeat while (pos>-1)
21d04                 | LR__2691
21d04     00 28 56 F2 | 	cmps	local02, #0 wc
21d08     40 00 90 CD |  if_b	jmp	#LR__2693
21d0c     13 FB 51 F6 | 	abs	result1, local01 wc
21d10     0A FA 15 FD | 	qdiv	result1, #10
21d14                 | '     q:=j//10
21d14     19 FA 61 FD | 	getqy	result1
21d18     FD FA 81 F6 | 	negc	result1, result1
21d1c     13 27 52 F6 | 	abs	local01, local01 wc
21d20     0A 26 16 FD | 	qdiv	local01, #10
21d24                 | '     q:=48+q
21d24     30 FA 05 F1 | 	add	result1, #48
21d28                 | '     n_string[pos]:=q
21d28     14 27 02 F6 | 	mov	local01, local02
21d2c     4D E4 05 F1 | 	add	objptr, #77
21d30     F2 26 02 F1 | 	add	local01, objptr
21d34     13 FB 41 FC | 	wrbyte	result1, local01
21d38                 | '     j:=j/10
21d38     4D E4 85 F1 | 	sub	objptr, #77
21d3c                 | '     pos-=1
21d3c     01 28 86 F1 | 	sub	local02, #1
21d40     18 26 62 FD | 	getqx	local01
21d44     13 27 82 F6 | 	negc	local01, local01
21d48     B8 FF 9F FD | 	jmp	#LR__2691
21d4c                 | LR__2692
21d4c                 | LR__2693
21d4c                 | '   repeat while n_string[0]==48
21d4c                 | LR__2694
21d4c     4D E4 05 F1 | 	add	objptr, #77
21d50     F2 16 C2 FA | 	rdbyte	arg03, objptr
21d54     4D E4 85 F1 | 	sub	objptr, #77
21d58     30 16 0E F2 | 	cmp	arg03, #48 wz
21d5c     20 00 90 5D |  if_ne	jmp	#LR__2695
21d60                 | '     bytemove(@n_string,@n_string+1,12)
21d60     4D E4 05 F1 | 	add	objptr, #77
21d64     F2 12 02 F6 | 	mov	arg01, objptr
21d68     F2 14 02 F6 | 	mov	arg02, objptr
21d6c     4D E4 85 F1 | 	sub	objptr, #77
21d70     01 14 06 F1 | 	add	arg02, #1
21d74     0C 16 06 F6 | 	mov	arg03, #12
21d78     38 11 B0 FD | 	call	#__system____builtin_memmove
21d7c     CC FF 9F FD | 	jmp	#LR__2694
21d80                 | LR__2695
21d80                 | ' 
21d80                 | '   if k==45
21d80     2D 2A 0E F2 | 	cmp	local03, #45 wz
21d84     28 00 90 5D |  if_ne	jmp	#LR__2696
21d88                 | '      bytemove(@n_string+1,@n_string,12)
21d88     4D E4 05 F1 | 	add	objptr, #77
21d8c     F2 12 02 F6 | 	mov	arg01, objptr
21d90     01 12 06 F1 | 	add	arg01, #1
21d94     F2 14 02 F6 | 	mov	arg02, objptr
21d98     4D E4 85 F1 | 	sub	objptr, #77
21d9c     0C 16 06 F6 | 	mov	arg03, #12
21da0     10 11 B0 FD | 	call	#__system____builtin_memmove
21da4                 | '      n_string[0]:=k
21da4     4D E4 05 F1 | 	add	objptr, #77
21da8     F2 2A 42 FC | 	wrbyte	local03, objptr
21dac     4D E4 85 F1 | 	sub	objptr, #77
21db0                 | LR__2696
21db0                 | LR__2697
21db0                 | ' 
21db0                 | ' q:=@n_string
21db0     4D E4 05 F1 | 	add	objptr, #77
21db4     F2 FA 01 F6 | 	mov	result1, objptr
21db8     4D E4 85 F1 | 	sub	objptr, #77
21dbc                 | ' return q
21dbc     A7 F0 03 F6 | 	mov	ptra, fp
21dc0     B2 00 A0 FD | 	call	#popregs_
21dc4                 | _hg010b_spin2_inttostr_ret
21dc4     2D 00 64 FD | 	ret
21dc8                 | 
21dc8                 | ' 
21dc8                 | ' '**********************************************************************************
21dc8                 | ' '
21dc8                 | ' '        Blitting
21dc8                 | ' '
21dc8                 | ' '**********************************************************************************
21dc8                 | ' 
21dc8                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
21dc8                 | _hg010b_spin2_blit
21dc8     18 4A 05 F6 | 	mov	COUNT_, #24
21dcc     A8 00 A0 FD | 	call	#pushregs_
21dd0     09 27 02 F6 | 	mov	local01, arg01
21dd4     0A 29 02 F6 | 	mov	local02, arg02
21dd8     0B 2B 02 F6 | 	mov	local03, arg03
21ddc     0C 2D 02 F6 | 	mov	local04, arg04
21de0     0D 2F 02 F6 | 	mov	local05, arg05
21de4     0E 31 02 F6 | 	mov	local06, arg06
21de8     0F 33 02 F6 | 	mov	local07, arg07
21dec     10 35 02 F6 | 	mov	local08, arg08
21df0     11 37 02 F6 | 	mov	local09, arg09
21df4     12 39 02 F6 | 	mov	local10, arg10
21df8                 | ' 
21df8                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
21df8     00 04 00 FF 
21dfc     00 26 56 F2 | 	cmps	local01, ##524288 wc
21e00     00 04 00 3F 
21e04     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
21e08     7C 01 90 CD |  if_b	jmp	#LR__2704
21e0c     16 29 5A F2 | 	cmps	local02, local04 wcz
21e10     14 3B 02 16 |  if_a	mov	local11, local02
21e14     16 29 02 16 |  if_a	mov	local02, local04
21e18     1D 2D 02 16 |  if_a	mov	local04, local11
21e1c     17 2B 5A F2 | 	cmps	local03, local05 wcz
21e20     15 3B 02 16 |  if_a	mov	local11, local03
21e24     17 2B 02 16 |  if_a	mov	local03, local05
21e28     18 2B 02 FD | 	qmul	local03, local06
21e2c                 | '   if x1a>x2a
21e2c                 | '     x1a,x2a:=x2a,x1a
21e2c                 | '   if y1a>y2a
21e2c                 | '     y1a,y2a:=y2a,y1a  
21e2c     1D 2F 02 16 |  if_a	mov	local05, local11
21e30                 | ' 
21e30                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
21e30     19 3D 02 F6 | 	mov	local12, local07
21e34     14 3D 02 F1 | 	add	local12, local02
21e38     18 3A 62 FD | 	getqx	local11
21e3c     1C 37 02 FD | 	qmul	local09, local10
21e40     1D 3D 02 F1 | 	add	local12, local11
21e44     13 3F 02 F6 | 	mov	local13, local01
21e48     1A 3F 02 F1 | 	add	local13, local08
21e4c     18 3A 62 FD | 	getqx	local11
21e50     1D 3F 02 F1 | 	add	local13, local11
21e54     1F 3D 5A F2 | 	cmps	local12, local13 wcz
21e58     98 00 90 ED |  if_be	jmp	#LR__2701
21e5c                 | '     repeat y from y1a to y2a
21e5c     15 41 02 F6 | 	mov	local14, local03
21e60     15 2F 52 F2 | 	cmps	local05, local03 wc
21e64     01 42 86 F6 | 	negc	local15, #1
21e68     17 45 02 F6 | 	mov	local16, local05
21e6c     21 45 02 F1 | 	add	local16, local15
21e70     0B 00 00 FF 
21e74     CC E4 05 F1 | 	add	objptr, ##5836
21e78                 | LR__2700
21e78     18 41 02 FD | 	qmul	local14, local06
21e7c                 | '   '    writeln(string("I am here"))
21e7c                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
21e7c     13 15 02 F6 | 	mov	arg02, local01
21e80     16 17 02 F6 | 	mov	arg03, local04
21e84     14 17 82 F1 | 	sub	arg03, local02
21e88     01 16 06 F1 | 	add	arg03, #1
21e8c     F6 03 00 FF 
21e90     00 12 06 F6 | 	mov	arg01, ##519168
21e94     18 3E 62 FD | 	getqx	local13
21e98     1F 15 02 F1 | 	add	arg02, local13
21e9c     14 15 02 F1 | 	add	arg02, local02
21ea0     B0 04 B0 FD | 	call	#_psram_spin2_read1
21ea4     1B 3F 02 F6 | 	mov	local13, local09
21ea8     15 3F 82 F1 | 	sub	local13, local03
21eac     20 3F 02 F1 | 	add	local13, local14
21eb0     1C 3F 02 FD | 	qmul	local13, local10
21eb4                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
21eb4     19 15 02 F6 | 	mov	arg02, local07
21eb8     16 17 02 F6 | 	mov	arg03, local04
21ebc     14 17 82 F1 | 	sub	arg03, local02
21ec0     01 16 06 F1 | 	add	arg03, #1
21ec4     F6 03 00 FF 
21ec8     00 12 06 F6 | 	mov	arg01, ##519168
21ecc     18 3E 62 FD | 	getqx	local13
21ed0     1F 15 02 F1 | 	add	arg02, local13
21ed4     1A 15 02 F1 | 	add	arg02, local08
21ed8     14 05 B0 FD | 	call	#_psram_spin2_write
21edc     21 41 02 F1 | 	add	local14, local15
21ee0     22 41 0A F2 | 	cmp	local14, local16 wz
21ee4     90 FF 9F 5D |  if_ne	jmp	#LR__2700
21ee8     0B 00 00 FF 
21eec     CC E4 85 F1 | 	sub	objptr, ##5836
21ef0     94 00 90 FD | 	jmp	#LR__2703
21ef4                 | LR__2701
21ef4                 | '   else
21ef4                 | '     repeat y from y2a to y1a
21ef4     17 41 02 F6 | 	mov	local14, local05
21ef8     17 2B 52 F2 | 	cmps	local03, local05 wc
21efc     01 46 86 F6 | 	negc	local17, #1
21f00     15 49 02 F6 | 	mov	local18, local03
21f04     23 49 02 F1 | 	add	local18, local17
21f08     0B 00 00 FF 
21f0c     CC E4 05 F1 | 	add	objptr, ##5836
21f10                 | LR__2702
21f10     18 41 02 FD | 	qmul	local14, local06
21f14                 | '  '     writeln(string("I am there"))
21f14                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
21f14     13 15 02 F6 | 	mov	arg02, local01
21f18     16 17 02 F6 | 	mov	arg03, local04
21f1c     14 17 82 F1 | 	sub	arg03, local02
21f20     01 16 06 F1 | 	add	arg03, #1
21f24     F6 03 00 FF 
21f28     00 12 06 F6 | 	mov	arg01, ##519168
21f2c     18 44 62 FD | 	getqx	local16
21f30     22 15 02 F1 | 	add	arg02, local16
21f34     14 15 02 F1 | 	add	arg02, local02
21f38     18 04 B0 FD | 	call	#_psram_spin2_read1
21f3c     1B 45 02 F6 | 	mov	local16, local09
21f40     15 45 82 F1 | 	sub	local16, local03
21f44     20 45 02 F1 | 	add	local16, local14
21f48     1C 45 02 FD | 	qmul	local16, local10
21f4c                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
21f4c     19 15 02 F6 | 	mov	arg02, local07
21f50     16 17 02 F6 | 	mov	arg03, local04
21f54     14 17 82 F1 | 	sub	arg03, local02
21f58     01 16 06 F1 | 	add	arg03, #1
21f5c     F6 03 00 FF 
21f60     00 12 06 F6 | 	mov	arg01, ##519168
21f64     18 44 62 FD | 	getqx	local16
21f68     22 15 02 F1 | 	add	arg02, local16
21f6c     1A 15 02 F1 | 	add	arg02, local08
21f70     7C 04 B0 FD | 	call	#_psram_spin2_write
21f74     23 41 02 F1 | 	add	local14, local17
21f78     24 41 0A F2 | 	cmp	local14, local18 wz
21f7c     90 FF 9F 5D |  if_ne	jmp	#LR__2702
21f80     0B 00 00 FF 
21f84     CC E4 85 F1 | 	sub	objptr, ##5836
21f88                 | LR__2703
21f88                 | LR__2704
21f88                 | '     
21f88                 | ' if ((f>=$80000) && (t<$80000)) 
21f88     00 04 00 FF 
21f8c     00 26 56 F2 | 	cmps	local01, ##524288 wc
21f90     80 00 90 CD |  if_b	jmp	#LR__2706
21f94     00 04 00 FF 
21f98     00 32 56 F2 | 	cmps	local07, ##524288 wc
21f9c     74 00 90 3D |  if_ae	jmp	#LR__2706
21fa0                 | '   repeat y from y1a to y2a
21fa0     15 41 02 F6 | 	mov	local14, local03
21fa4     15 2F 52 F2 | 	cmps	local05, local03 wc
21fa8     01 4A 86 F6 | 	negc	local19, #1
21fac     17 4D 02 F6 | 	mov	local20, local05
21fb0     25 4D 02 F1 | 	add	local20, local19
21fb4     0B 00 00 FF 
21fb8     CC E4 05 F1 | 	add	objptr, ##5836
21fbc                 | LR__2705
21fbc     1B 49 02 F6 | 	mov	local18, local09
21fc0     15 49 82 F1 | 	sub	local18, local03
21fc4     20 49 02 F1 | 	add	local18, local14
21fc8     1C 49 02 FD | 	qmul	local18, local10
21fcc                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
21fcc     19 13 02 F6 | 	mov	arg01, local07
21fd0     18 48 62 FD | 	getqx	local18
21fd4     18 41 02 FD | 	qmul	local14, local06
21fd8     24 13 02 F1 | 	add	arg01, local18
21fdc     1A 13 02 F1 | 	add	arg01, local08
21fe0     13 15 02 F6 | 	mov	arg02, local01
21fe4     16 17 02 F6 | 	mov	arg03, local04
21fe8     14 17 82 F1 | 	sub	arg03, local02
21fec     01 16 06 F1 | 	add	arg03, #1
21ff0     18 48 62 FD | 	getqx	local18
21ff4     24 15 02 F1 | 	add	arg02, local18
21ff8     14 15 02 F1 | 	add	arg02, local02
21ffc     54 03 B0 FD | 	call	#_psram_spin2_read1
22000     25 41 02 F1 | 	add	local14, local19
22004     26 41 0A F2 | 	cmp	local14, local20 wz
22008     B0 FF 9F 5D |  if_ne	jmp	#LR__2705
2200c     0B 00 00 FF 
22010     CC E4 85 F1 | 	sub	objptr, ##5836
22014                 | LR__2706
22014                 | '     
22014                 | ' if ((f<$80000) && (t>=$80000)) 
22014     00 04 00 FF 
22018     00 26 56 F2 | 	cmps	local01, ##524288 wc
2201c     84 00 90 3D |  if_ae	jmp	#LR__2708
22020     00 04 00 FF 
22024     00 32 56 F2 | 	cmps	local07, ##524288 wc
22028     78 00 90 CD |  if_b	jmp	#LR__2708
2202c                 | '   t:=t & $FFFFFFF
2202c     7C 32 06 F4 | 	bitl	local07, #124
22030                 | '   repeat y from y1a to y2a
22030     15 41 02 F6 | 	mov	local14, local03
22034     15 2F 52 F2 | 	cmps	local05, local03 wc
22038     01 4E 86 F6 | 	negc	local21, #1
2203c     17 51 02 F6 | 	mov	local22, local05
22040     27 51 02 F1 | 	add	local22, local21
22044     0B 00 00 FF 
22048     CC E4 05 F1 | 	add	objptr, ##5836
2204c                 | LR__2707
2204c     18 41 02 FD | 	qmul	local14, local06
22050                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
22050     13 13 02 F6 | 	mov	arg01, local01
22054     1B 4D 02 F6 | 	mov	local20, local09
22058     15 4D 82 F1 | 	sub	local20, local03
2205c     20 4D 02 F1 | 	add	local20, local14
22060     18 4A 62 FD | 	getqx	local19
22064     1C 4D 02 FD | 	qmul	local20, local10
22068     25 13 02 F1 | 	add	arg01, local19
2206c     14 13 02 F1 | 	add	arg01, local02
22070     19 15 02 F6 | 	mov	arg02, local07
22074     16 17 02 F6 | 	mov	arg03, local04
22078     14 17 82 F1 | 	sub	arg03, local02
2207c     01 16 06 F1 | 	add	arg03, #1
22080     18 4C 62 FD | 	getqx	local20
22084     26 15 02 F1 | 	add	arg02, local20
22088     1A 15 02 F1 | 	add	arg02, local08
2208c     60 03 B0 FD | 	call	#_psram_spin2_write
22090     27 41 02 F1 | 	add	local14, local21
22094     28 41 0A F2 | 	cmp	local14, local22 wz
22098     B0 FF 9F 5D |  if_ne	jmp	#LR__2707
2209c     0B 00 00 FF 
220a0     CC E4 85 F1 | 	sub	objptr, ##5836
220a4                 | LR__2708
220a4                 | '     
220a4                 | ' if ((f<$80000) && (t<$80000)) 
220a4     00 04 00 FF 
220a8     00 26 56 F2 | 	cmps	local01, ##524288 wc
220ac     00 04 00 CF 
220b0     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
220b4     64 00 90 3D |  if_ae	jmp	#LR__2710
220b8                 | '   repeat y from y1a to y2a
220b8     15 41 02 F6 | 	mov	local14, local03
220bc     15 2F 52 F2 | 	cmps	local05, local03 wc
220c0     01 52 86 F6 | 	negc	local23, #1
220c4     17 55 02 F6 | 	mov	local24, local05
220c8     29 55 02 F1 | 	add	local24, local23
220cc                 | LR__2709
220cc     18 41 02 FD | 	qmul	local14, local06
220d0                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
220d0     13 13 02 F6 | 	mov	arg01, local01
220d4     1B 51 02 F6 | 	mov	local22, local09
220d8     15 51 82 F1 | 	sub	local22, local03
220dc     20 51 02 F1 | 	add	local22, local14
220e0     18 4E 62 FD | 	getqx	local21
220e4     1C 51 02 FD | 	qmul	local22, local10
220e8     27 13 02 F1 | 	add	arg01, local21
220ec     14 13 02 F1 | 	add	arg01, local02
220f0     19 15 02 F6 | 	mov	arg02, local07
220f4     16 17 02 F6 | 	mov	arg03, local04
220f8     14 17 82 F1 | 	sub	arg03, local02
220fc     01 16 06 F1 | 	add	arg03, #1
22100     18 50 62 FD | 	getqx	local22
22104     28 15 02 F1 | 	add	arg02, local22
22108     1A 15 02 F1 | 	add	arg02, local08
2210c     A4 0D B0 FD | 	call	#__system____builtin_memmove
22110     29 41 02 F1 | 	add	local14, local23
22114     2A 41 0A F2 | 	cmp	local14, local24 wz
22118     B0 FF 9F 5D |  if_ne	jmp	#LR__2709
2211c                 | LR__2710
2211c     A7 F0 03 F6 | 	mov	ptra, fp
22120     B2 00 A0 FD | 	call	#popregs_
22124                 | _hg010b_spin2_blit_ret
22124     2D 00 64 FD | 	ret
22128                 | 
22128                 | ' 
22128                 | ' '..............................................................................
22128                 | ' 
22128                 | ' {{
22128                 | ' }}
22128                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
22128                 | _psram_spin2_startx
22128     04 4A 05 F6 | 	mov	COUNT_, #4
2212c     A8 00 A0 FD | 	call	#pushregs_
22130     09 27 02 F6 | 	mov	local01, arg01
22134     0B 29 02 F6 | 	mov	local02, arg03
22138     0C 2B 02 F6 | 	mov	local03, arg04
2213c                 | '     stop() ' restart driver if required
2213c     54 01 B0 FD | 	call	#_psram_spin2_stop
22140     00 26 0E F2 | 	cmp	local01, #0 wz
22144     14 26 06 AB |  if_e	rdlong	local01, #20
22148     13 15 52 F6 | 	abs	arg02, local01 wc
2214c     A1 07 00 FF 
22150     40 14 16 FD | 	qdiv	arg02, ##1000000
22154                 | ' 
22154                 | '     ' use current frequency if none specified
22154                 | ' 
22154                 | '     if freq == 0 
22154                 | '         freq := clkfreq 
22154                 | ' 
22154                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
22154                 | ' 
22154                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
22154                 | '     if burst < 0
22154                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
22154     18 14 62 FD | 	getqx	arg02
22158     0A 19 82 F6 | 	negc	arg04, arg02
2215c     03 18 66 F0 | 	shl	arg04, #3
22160     84 18 86 F1 | 	sub	arg04, #132
22164     04 18 46 F0 | 	shr	arg04, #4
22168     04 18 66 F0 | 	shl	arg04, #4
2216c     00 18 56 F2 | 	cmps	arg04, #0 wc
22170     0E FA 65 C6 |  if_b	neg	result1, #14
22174     10 01 90 CD |  if_b	jmp	#LR__2723
22178                 | ' 
22178                 | '     ' compute the input delay
22178                 | ' 
22178                 | '     if delay <= 0
22178     01 28 56 F2 | 	cmps	local02, #1 wc
2217c     10 00 90 3D |  if_ae	jmp	#LR__2720
22180                 | '         delay := lookupDelay(freq)
22180     13 13 02 F6 | 	mov	arg01, local01
22184     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
22188     FD 28 02 F6 | 	mov	local02, result1
2218c     04 00 90 FD | 	jmp	#LR__2721
22190                 | LR__2720
22190                 | '     else
22190                 | '         delay <#= $f ' limit to 15
22190     0F 28 66 F3 | 	fles	local02, #15
22194                 | LR__2721
22194                 | ' 
22194                 | '     ' create our lock
22194                 | ' 
22194                 | '     driverlock := LOCKNEW()  
22194     00 FA 05 F6 | 	mov	result1, #0
22198     04 FA 61 FD | 	locknew	result1
2219c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
221a0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
221a4                 | '     if driverlock == -1
221a4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
221a8     FF FF 7F FF 
221ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
221b0                 | '         return ERR_NO_LOCK
221b0     1A FA 65 A6 |  if_e	neg	result1, #26
221b4     D0 00 90 AD |  if_e	jmp	#LR__2723
221b8                 | ' 
221b8                 | '     ' patch in the proper data and HUB addresses to the startup structure
221b8                 | ' 
221b8                 | '     long[@startupData][0]:=clkfreq
221b8     14 26 06 FB | 	rdlong	local01, #20
221bc     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
221c0     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
221c4                 | ' '    long[@startupData][1]:=$1000_0000
221c4                 | '     long[@startupData][5]:=@deviceData
221c4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
221c8     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
221cc     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
221d0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
221d4     14 14 06 F1 | 	add	arg02, #20
221d8     0A 27 62 FC | 	wrlong	local01, arg02
221dc                 | '     long[@startupData][6]:=@qosData
221dc     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
221e0     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
221e4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
221e8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
221ec     18 14 06 F1 | 	add	arg02, #24
221f0     0A 27 62 FC | 	wrlong	local01, arg02
221f4                 | '     long[@startupData][7]:=$7FF00
221f4     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
221f8     1C 26 06 F1 | 	add	local01, #28
221fc     FF 03 80 FF 
22200     13 01 6A FC | 	wrlong	##524032, local01
22204                 | ' 
22204                 | '     ' setup some default bank and QoS parameter values
22204                 | ' 
22204                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
22204     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
22208     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
2220c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
22210     10 18 66 F0 | 	shl	arg04, #16
22214     0C 28 66 F0 | 	shl	local02, #12
22218     14 19 42 F5 | 	or	arg04, local02
2221c     18 18 46 F5 | 	or	arg04, #24
22220     0C 15 02 F6 | 	mov	arg02, arg04
22224     02 16 06 F6 | 	mov	arg03, #2
22228     A0 00 A0 FD | 	call	#\builtin_longfill_
2222c                 | '     longfill(@qosData, $FFFF0000, 8)
2222c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
22230     07 16 06 F6 | 	mov	arg03, #7
22234     28 16 62 FD | 	setq	arg03
22238     80 FF FF FF 
2223c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
22240                 | ' 
22240                 | '     ' get the address of the PSRAM memory driver so we can start it
22240                 | ' 
22240                 | '     driverAddr:= driver.getDriverAddr()
22240                 | '     return @driver_start
22240     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
22244     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
22248     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2224c                 | ' 
2224c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2224c                 | ' 
2224c                 | '     if desiredcog < 0
2224c     00 2A 56 F2 | 	cmps	local03, #0 wc
22250                 | '         desiredcog := NEWCOG
22250     10 2A 06 C6 |  if_b	mov	local03, #16
22254                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
22254     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
22258     15 2D 02 F6 | 	mov	local04, local03
2225c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
22260     0A 2D F2 FC | 	coginit	local04, arg02 wc
22264     01 2C 66 C6 |  if_b	neg	local04, #1
22268     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2226c     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
22270                 | '     repeat until long[@startupData] == 0 
22270     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
22274                 | LR__2722
22274     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
22278     F8 FF 9F 5D |  if_ne	jmp	#LR__2722
2227c                 | ' 
2227c                 | '     return drivercog
2227c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
22280     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
22284     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
22288                 | LR__2723
22288     A7 F0 03 F6 | 	mov	ptra, fp
2228c     B2 00 A0 FD | 	call	#popregs_
22290                 | _psram_spin2_startx_ret
22290     2D 00 64 FD | 	ret
22294                 | 
22294                 | ' 
22294                 | ' '..............................................................................
22294                 | ' 
22294                 | ' {{
22294                 | ' }}
22294                 | ' PUB stop() : i
22294                 | _psram_spin2_stop
22294     00 00 06 F6 | 	mov	_var01, #0
22298                 | '     if drivercog <> -1
22298     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2229c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
222a0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
222a4     FF FF 7F FF 
222a8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
222ac     70 00 90 AD |  if_e	jmp	#LR__2733
222b0                 | '         cogstop(drivercog) ' a rather brutal stop
222b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
222b4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
222b8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
222bc     03 12 62 FD | 	cogstop	arg01
222c0     97 26 48 FB | 	callpa	#(@LR__2732-@LR__2730)>>2,fcache_load_ptr_
222c4                 | '         repeat i from 0 to 7
222c4                 | LR__2730
222c4                 | '             if long[$7FF00][i*3] < 0
222c4     00 FB 01 F6 | 	mov	result1, _var01
222c8     01 FA 65 F0 | 	shl	result1, #1
222cc     00 FB 01 F1 | 	add	result1, _var01
222d0     02 FA 65 F0 | 	shl	result1, #2
222d4     FF 03 00 FF 
222d8     00 FB 05 F1 | 	add	result1, ##524032
222dc     FD FA 01 FB | 	rdlong	result1, result1
222e0     00 FA 55 F2 | 	cmps	result1, #0 wc
222e4     1C 00 90 3D |  if_ae	jmp	#LR__2731
222e8                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
222e8     00 FB 01 F6 | 	mov	result1, _var01
222ec     01 FA 65 F0 | 	shl	result1, #1
222f0     00 FB 01 F1 | 	add	result1, _var01
222f4     02 FA 65 F0 | 	shl	result1, #2
222f8     FF 03 00 FF 
222fc     00 FB 05 F1 | 	add	result1, ##524032
22300     FD 20 68 FC | 	wrlong	#16, result1
22304                 | LR__2731
22304     01 00 06 F1 | 	add	_var01, #1
22308     08 00 56 F2 | 	cmps	_var01, #8 wc
2230c     B4 FF 9F CD |  if_b	jmp	#LR__2730
22310                 | LR__2732
22310                 | '         drivercog := -1
22310     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
22314     FF FF FF FF 
22318     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2231c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
22320                 | LR__2733
22320                 | '     if driverlock <> -1
22320     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
22324     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
22328     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2232c     FF FF 7F FF 
22330     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
22334                 | '         LOCKRET(driverlock)
22334     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
22338     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
2233c     05 12 62 5D |  if_ne	lockret	arg01
22340                 | '         driverlock := -1
22340     FF FF FF 5F 
22344     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
22348     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2234c     00 FB 01 F6 | 	mov	result1, _var01
22350                 | _psram_spin2_stop_ret
22350     2D 00 64 FD | 	ret
22354                 | 
22354                 | ' 
22354                 | ' '..............................................................................
22354                 | ' 
22354                 | ' {{
22354                 | ' }}
22354                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
22354                 | _psram_spin2_read1
22354                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
22354                 | '     if drivercog == -1 ' driver must be running
22354     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
22358     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2235c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
22360     FF FF 7F FF 
22364     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
22368                 | '         return ERR_INACTIVE
22368     0F FA 65 A6 |  if_e	neg	result1, #15
2236c     7C 00 90 AD |  if_e	jmp	#LR__2741
22370                 | '     if count == 0 ' don't even bother reading
22370     00 16 0E F2 | 	cmp	arg03, #0 wz
22374                 | '         return 0
22374     00 FA 05 A6 |  if_e	mov	result1, #0
22378     70 00 90 AD |  if_e	jmp	#LR__2741
2237c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2237c     00 FA 05 F6 | 	mov	result1, #0
22380     01 FA 61 FD | 	cogid	result1
22384     FD 00 02 F6 | 	mov	_var01, result1
22388     01 00 66 F0 | 	shl	_var01, #1
2238c     FD 00 02 F1 | 	add	_var01, result1
22390     02 00 66 F0 | 	shl	_var01, #2
22394     FF 03 00 FF 
22398     00 03 06 F6 | 	mov	_var02, ##524032
2239c     00 03 02 F1 | 	add	_var02, _var01
223a0                 | '     if long[mailbox] < 0
223a0     01 01 02 FB | 	rdlong	_var01, _var02
223a4     00 00 56 F2 | 	cmps	_var01, #0 wc
223a8                 | '         return ERR_MAILBOX_BUSY
223a8     1C FA 65 C6 |  if_b	neg	result1, #28
223ac     3C 00 90 CD |  if_b	jmp	#LR__2741
223b0                 | '     long[mailbox][2] := count
223b0     08 02 06 F1 | 	add	_var02, #8
223b4     01 17 62 FC | 	wrlong	arg03, _var02
223b8                 | '     long[mailbox][1] := dstHubAddr
223b8     04 02 86 F1 | 	sub	_var02, #4
223bc     01 13 62 FC | 	wrlong	arg01, _var02
223c0     04 02 86 F1 | 	sub	_var02, #4
223c4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
223c4     0A 05 02 F6 | 	mov	_var03, arg02
223c8     D9 04 06 F4 | 	bitl	_var03, #217
223cc     00 00 58 FF 
223d0     00 00 06 F6 | 	mov	_var01, ##-1342177280
223d4     02 01 02 F1 | 	add	_var01, _var03
223d8     01 01 62 FC | 	wrlong	_var01, _var02
223dc                 | '     repeat
223dc                 | LR__2740
223dc                 | '         result := long[mailbox]    
223dc     01 05 02 FB | 	rdlong	_var03, _var02
223e0     00 04 56 F2 | 	cmps	_var03, #0 wc
223e4     F4 FF 9F CD |  if_b	jmp	#LR__2740
223e8                 | '     while result < 0   
223e8                 | '     return -result                       'return success or error
223e8     02 FB 61 F6 | 	neg	result1, _var03
223ec                 | LR__2741
223ec                 | _psram_spin2_read1_ret
223ec     2D 00 64 FD | 	ret
223f0                 | 
223f0                 | ' 
223f0                 | ' '..............................................................................
223f0                 | ' 
223f0                 | ' {{
223f0                 | ' }}
223f0                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
223f0                 | _psram_spin2_write
223f0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
223f0                 | '     if drivercog == -1 ' driver must be running
223f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
223f4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
223f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
223fc     FF FF 7F FF 
22400     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
22404                 | '         return ERR_INACTIVE
22404     0F FA 65 A6 |  if_e	neg	result1, #15
22408     7C 00 90 AD |  if_e	jmp	#LR__2751
2240c                 | '     if count == 0 ' don't even bother writing
2240c     00 16 0E F2 | 	cmp	arg03, #0 wz
22410                 | '         return 0
22410     00 FA 05 A6 |  if_e	mov	result1, #0
22414     70 00 90 AD |  if_e	jmp	#LR__2751
22418                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
22418     00 FA 05 F6 | 	mov	result1, #0
2241c     01 FA 61 FD | 	cogid	result1
22420     FD 00 02 F6 | 	mov	_var01, result1
22424     01 00 66 F0 | 	shl	_var01, #1
22428     FD 00 02 F1 | 	add	_var01, result1
2242c     02 00 66 F0 | 	shl	_var01, #2
22430     FF 03 00 FF 
22434     00 03 06 F6 | 	mov	_var02, ##524032
22438     00 03 02 F1 | 	add	_var02, _var01
2243c                 | '     if long[mailbox] < 0
2243c     01 01 02 FB | 	rdlong	_var01, _var02
22440     00 00 56 F2 | 	cmps	_var01, #0 wc
22444                 | '         return ERR_MAILBOX_BUSY
22444     1C FA 65 C6 |  if_b	neg	result1, #28
22448     3C 00 90 CD |  if_b	jmp	#LR__2751
2244c                 | '     long[mailbox][2] := count
2244c     08 02 06 F1 | 	add	_var02, #8
22450     01 17 62 FC | 	wrlong	arg03, _var02
22454                 | '     long[mailbox][1] := srcHubAddr
22454     04 02 86 F1 | 	sub	_var02, #4
22458     01 13 62 FC | 	wrlong	arg01, _var02
2245c     04 02 86 F1 | 	sub	_var02, #4
22460                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
22460     0A 05 02 F6 | 	mov	_var03, arg02
22464     D9 04 06 F4 | 	bitl	_var03, #217
22468     00 00 78 FF 
2246c     00 00 06 F6 | 	mov	_var01, ##-268435456
22470     02 01 02 F1 | 	add	_var01, _var03
22474     01 01 62 FC | 	wrlong	_var01, _var02
22478                 | '     repeat
22478                 | LR__2750
22478                 | '         result := long[mailbox]    
22478     01 05 02 FB | 	rdlong	_var03, _var02
2247c     00 04 56 F2 | 	cmps	_var03, #0 wc
22480     F4 FF 9F CD |  if_b	jmp	#LR__2750
22484                 | '     while result < 0   
22484                 | '     return -result                       'return success or error
22484     02 FB 61 F6 | 	neg	result1, _var03
22488                 | LR__2751
22488                 | _psram_spin2_write_ret
22488     2D 00 64 FD | 	ret
2248c                 | 
2248c                 | ' 
2248c                 | ' ' generalized fill
2248c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
2248c                 | _psram_spin2_fill
2248c     09 01 02 F6 | 	mov	_var01, arg01
22490     0A 03 02 F6 | 	mov	_var02, arg02
22494     0B 05 02 F6 | 	mov	_var03, arg03
22498     0D 07 02 F6 | 	mov	_var04, arg05
2249c                 | '     case datasize 
2249c     01 06 86 F1 | 	sub	_var04, #1
224a0     04 06 26 F3 | 	fle	_var04, #4
224a4     30 06 62 FD | 	jmprel	_var04
224a8                 | LR__2760
224a8     10 00 90 FD | 	jmp	#LR__2761
224ac     18 00 90 FD | 	jmp	#LR__2762
224b0     2C 00 90 FD | 	jmp	#LR__2764
224b4     1C 00 90 FD | 	jmp	#LR__2763
224b8     24 00 90 FD | 	jmp	#LR__2764
224bc                 | LR__2761
224bc                 | '         1: req := driver.R_WRITEBYTE
224bc     00 00 60 FF 
224c0     00 08 06 F6 | 	mov	_var05, ##-1073741824
224c4     20 00 90 FD | 	jmp	#LR__2765
224c8                 | LR__2762
224c8                 | '         2: req := driver.R_WRITEWORD
224c8     00 00 68 FF 
224cc     00 08 06 F6 | 	mov	_var05, ##-805306368
224d0     14 00 90 FD | 	jmp	#LR__2765
224d4                 | LR__2763
224d4                 | '         4: req := driver.R_WRITELONG
224d4     00 00 70 FF 
224d8     00 08 06 F6 | 	mov	_var05, ##-536870912
224dc     08 00 90 FD | 	jmp	#LR__2765
224e0                 | LR__2764
224e0                 | '         other : return ERR_INVALID
224e0     06 FA 65 F6 | 	neg	result1, #6
224e4     94 00 90 FD | 	jmp	#LR__2767
224e8                 | LR__2765
224e8                 | '     if count == 0   ' nothing to do
224e8     00 04 0E F2 | 	cmp	_var03, #0 wz
224ec                 | '         return 0
224ec     00 FA 05 A6 |  if_e	mov	result1, #0
224f0     88 00 90 AD |  if_e	jmp	#LR__2767
224f4                 | '     if drivercog == -1
224f4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
224f8     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
224fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
22500     FF FF 7F FF 
22504     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
22508                 | '         return ERR_INACTIVE
22508     0F FA 65 A6 |  if_e	neg	result1, #15
2250c     6C 00 90 AD |  if_e	jmp	#LR__2767
22510                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
22510     00 FA 05 F6 | 	mov	result1, #0
22514     01 FA 61 FD | 	cogid	result1
22518     FD 06 02 F6 | 	mov	_var04, result1
2251c     01 06 66 F0 | 	shl	_var04, #1
22520     FD 06 02 F1 | 	add	_var04, result1
22524     02 06 66 F0 | 	shl	_var04, #2
22528     FF 03 00 FF 
2252c     00 0B 06 F6 | 	mov	_var06, ##524032
22530     03 0B 02 F1 | 	add	_var06, _var04
22534                 | '     if long[mailbox] < 0
22534     05 07 02 FB | 	rdlong	_var04, _var06
22538     00 06 56 F2 | 	cmps	_var04, #0 wc
2253c                 | '         return ERR_MAILBOX_BUSY
2253c     1C FA 65 C6 |  if_b	neg	result1, #28
22540     38 00 90 CD |  if_b	jmp	#LR__2767
22544                 | '     long[mailbox][2] := count
22544     08 0A 06 F1 | 	add	_var06, #8
22548     05 05 62 FC | 	wrlong	_var03, _var06
2254c                 | '     long[mailbox][1] := pattern
2254c     04 0A 86 F1 | 	sub	_var06, #4
22550     05 03 62 FC | 	wrlong	_var02, _var06
22554     04 0A 86 F1 | 	sub	_var06, #4
22558                 | '     long[mailbox] := req + (addr & $1ffffff)
22558     04 0D 02 F6 | 	mov	_var07, _var05
2255c     00 0F 02 F6 | 	mov	_var08, _var01
22560     D9 0E 06 F4 | 	bitl	_var08, #217
22564     07 0D 02 F1 | 	add	_var07, _var08
22568     05 0D 62 FC | 	wrlong	_var07, _var06
2256c                 | '     repeat
2256c                 | LR__2766
2256c                 | '         r := long[mailbox]
2256c     05 0F 02 FB | 	rdlong	_var08, _var06
22570     00 0E 56 F2 | 	cmps	_var08, #0 wc
22574     F4 FF 9F CD |  if_b	jmp	#LR__2766
22578                 | '     while r < 0
22578                 | '     return -r                  ' return 0 for success or negated error code
22578     07 FB 61 F6 | 	neg	result1, _var08
2257c                 | LR__2767
2257c                 | _psram_spin2_fill_ret
2257c     2D 00 64 FD | 	ret
22580                 | 
22580                 | ' 
22580                 | ' '..............................................................................
22580                 | ' 
22580                 | ' {{
22580                 | ' }}
22580                 | ' PUB setQos(cog, qos) : result | mailbox
22580                 | _psram_spin2_setQos
22580     09 01 02 F6 | 	mov	_var01, arg01
22584                 | '     if drivercog == -1 ' driver must be running
22584     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
22588     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2258c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
22590     FF FF 7F FF 
22594     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
22598                 | '         return ERR_INACTIVE
22598     0F FA 65 A6 |  if_e	neg	result1, #15
2259c     9C 00 90 AD |  if_e	jmp	#LR__2774
225a0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
225a0     00 00 56 F2 | 	cmps	_var01, #0 wc
225a4     08 00 90 CD |  if_b	jmp	#LR__2770
225a8     08 00 56 F2 | 	cmps	_var01, #8 wc
225ac     08 00 90 CD |  if_b	jmp	#LR__2771
225b0                 | LR__2770
225b0                 | '         return ERR_INVALID
225b0     06 FA 65 F6 | 	neg	result1, #6
225b4     84 00 90 FD | 	jmp	#LR__2774
225b8                 | LR__2771
225b8                 | '     long[@qosData][cog] := qos & !$1ff
225b8     FF 15 26 F5 | 	andn	arg02, #511
225bc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
225c0     02 00 66 F0 | 	shl	_var01, #2
225c4     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
225c8     00 15 62 FC | 	wrlong	arg02, _var01
225cc                 | '     mailbox := $7FF00 + drivercog*12
225cc     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
225d0     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
225d4     02 07 02 F6 | 	mov	_var04, _var03
225d8     01 06 66 F0 | 	shl	_var04, #1
225dc     02 07 02 F1 | 	add	_var04, _var03
225e0     02 06 66 F0 | 	shl	_var04, #2
225e4     FF 03 00 FF 
225e8     00 09 06 F6 | 	mov	_var05, ##524032
225ec     03 09 02 F1 | 	add	_var05, _var04
225f0                 | '     repeat until LOCKTRY(driverlock)
225f0     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
225f4                 | LR__2772
225f4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
225f8     06 12 72 FD | 	locktry	arg01 wc
225fc     F4 FF 9F 3D |  if_ae	jmp	#LR__2772
22600     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
22604                 | '     long[mailbox] := driver.R_CONFIG + cogid()
22604     00 06 06 F6 | 	mov	_var04, #0
22608     01 06 62 FD | 	cogid	_var04
2260c     00 00 78 FF 
22610     00 02 06 F6 | 	mov	_var02, ##-268435456
22614     03 03 02 F1 | 	add	_var02, _var04
22618     04 03 62 FC | 	wrlong	_var02, _var05
2261c                 | '     repeat while long[mailbox] < 0
2261c                 | LR__2773
2261c     04 03 02 FB | 	rdlong	_var02, _var05
22620     00 02 56 F2 | 	cmps	_var02, #0 wc
22624     F4 FF 9F CD |  if_b	jmp	#LR__2773
22628                 | '     LOCKREL(driverlock)
22628     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2262c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
22630     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
22634     07 12 72 FD | 	lockrel	arg01 wc
22638     00 FA 05 F6 | 	mov	result1, #0
2263c                 | LR__2774
2263c                 | _psram_spin2_setQos_ret
2263c     2D 00 64 FD | 	ret
22640                 | 
22640                 | ' 
22640                 | ' '..............................................................................
22640                 | ' 
22640                 | ' {{
22640                 | ' }}
22640                 | ' PRI lookupDelay(freq) : delay | profile
22640                 | _psram_spin2_lookupDelay
22640                 | '     profile := @delayTable
22640     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
22644     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
22648                 | '     delay := long[profile][0]
22648     00 03 02 FB | 	rdlong	_var02, _var01
2264c                 | '     repeat while long[profile][1] 
2264c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
22650     97 16 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
22654                 | LR__2780
22654     04 00 06 F1 | 	add	_var01, #4
22658     00 FB 09 FB | 	rdlong	result1, _var01 wz
2265c     04 00 86 F1 | 	sub	_var01, #4
22660     1C 00 90 AD |  if_e	jmp	#LR__2782
22664                 | '         if freq +< long[profile][1] 
22664     04 00 06 F1 | 	add	_var01, #4
22668     00 FB 01 FB | 	rdlong	result1, _var01
2266c     04 00 86 F1 | 	sub	_var01, #4
22670     FD 12 12 F2 | 	cmp	arg01, result1 wc
22674                 | '             quit
22674                 | '         profile += 4
22674     04 00 06 31 |  if_ae	add	_var01, #4
22678                 | '         delay++
22678     01 02 06 31 |  if_ae	add	_var02, #1
2267c     D4 FF 9F 3D |  if_ae	jmp	#LR__2780
22680                 | LR__2781
22680                 | LR__2782
22680     01 FB 01 F6 | 	mov	result1, _var02
22684                 | _psram_spin2_lookupDelay_ret
22684     2D 00 64 FD | 	ret
22688                 | 
22688                 | ' 
22688                 | ' PUB start() : r
22688                 | _usbnew_spin2_start
22688     00 00 06 F6 | 	mov	_var01, #0
2268c                 | '   ifnot driver_cog
2268c     15 00 00 FF 
22690     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
22694     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
22698     15 00 00 FF 
2269c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
226a0     38 00 90 5D |  if_ne	jmp	#LR__2790
226a4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
226a4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
226a8     10 00 06 F6 | 	mov	_var01, #16
226ac     00 16 06 F6 | 	mov	arg03, #0
226b0     28 16 62 FD | 	setq	arg03
226b4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
226b8     01 00 66 C6 |  if_b	neg	_var01, #1
226bc                 | '     if r >= 0
226bc     00 00 56 F2 | 	cmps	_var01, #0 wc
226c0                 | '       driver_cog := r+1
226c0     00 03 02 36 |  if_ae	mov	_var02, _var01
226c4     01 02 06 31 |  if_ae	add	_var02, #1
226c8     15 00 00 3F 
226cc     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
226d0     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
226d4     15 00 00 3F 
226d8     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
226dc                 | LR__2790
226dc     00 FB 01 F6 | 	mov	result1, _var01
226e0                 | _usbnew_spin2_start_ret
226e0     2D 00 64 FD | 	ret
226e4                 | 
226e4                 | '     '' (Always enabled)
226e4                 | ' 
226e4                 | ' '' Get current pressed state of a keyboard key
226e4                 | ' PUB keystate(key) : r | buf[2],tmp
226e4                 | _usbnew_spin2_keystate
226e4     00 04 06 F6 | 	mov	_var03, #0
226e8                 | '   if key >= $E0 && key < $E8
226e8     E0 12 56 F2 | 	cmps	arg01, #224 wc
226ec     34 00 90 CD |  if_b	jmp	#LR__2800
226f0     E8 12 56 F2 | 	cmps	arg01, #232 wc
226f4     2C 00 90 3D |  if_ae	jmp	#LR__2800
226f8                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
226f8     00 FA 05 F6 | 	mov	result1, #0
226fc     13 00 00 FF 
22700     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
22704     09 07 02 F6 | 	mov	_var04, arg01
22708     E0 06 86 F1 | 	sub	_var04, #224
2270c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
22710     03 09 4A F0 | 	shr	_var05, _var04 wz
22714     13 00 00 FF 
22718     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2271c     01 FA 65 56 |  if_ne	neg	result1, #1
22720     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
22724                 | LR__2800
22724                 | '   else
22724                 | '     '' Do this in inline ASM to ensure atomicity
22724                 | '     tmp := @hkbd_report
22724     13 00 00 FF 
22728     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
2272c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
22730                 | '     org
22730     13 00 00 FF 
22734     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
22738     97 1E 48 FB | 	callpa	#(@LR__2802-@LR__2801)>>2,fcache_load_ptr_
2273c                 | LR__2801
2273c 000             | 	org	0
2273c 000 28 02 64 FD | 	setq	#1
22740 001 04 01 02 FB | 	rdlong	_var01, _var05
22744 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
22748 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
2274c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
22750 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
22754 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
22758 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2275c 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
22760 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
22764 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
22768 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
2276c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
22770 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
22774 00e 01 04 66 A6 |  if_e	neg	_var03, #1
22778 00f             | LR__2802
22778                 | 	orgh
22778     02 FB 01 F6 | 	mov	result1, _var03
2277c                 | _usbnew_spin2_keystate_ret
2277c     2D 00 64 FD | 	ret
22780                 | 
22780                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
22780                 | ' 
22780                 | ' '' Return key event from buffer if there is one
22780                 | ' PUB get_key() : r | tail
22780                 | _usbnew_spin2_get_key
22780                 | '   tail := keyq_tail
22780     0F 00 00 FF 
22784     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
22788     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2278c                 | '   if keyq_head == tail
2278c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
22790     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
22794     0F 00 00 FF 
22798     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
2279c     00 03 0A F2 | 	cmp	_var02, _var01 wz
227a0                 | '     return 0 ' No event
227a0     00 FA 05 A6 |  if_e	mov	result1, #0
227a4     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
227a8                 | '   r := keyq_data[tail]
227a8     00 03 02 F6 | 	mov	_var02, _var01
227ac     02 02 66 F0 | 	shl	_var02, #2
227b0     0F 00 00 FF 
227b4     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
227b8     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
227bc     01 FB 01 FB | 	rdlong	result1, _var02
227c0                 | '   if ++tail == KEYQUEUE_SIZE
227c0     01 00 06 F1 | 	add	_var01, #1
227c4     80 00 0E F2 | 	cmp	_var01, #128 wz
227c8                 | '     tail := 0
227c8     00 00 06 A6 |  if_e	mov	_var01, #0
227cc                 | '   keyq_tail := tail
227cc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
227d0     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
227d4     0F 00 00 FF 
227d8     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
227dc                 | _usbnew_spin2_get_key_ret
227dc     2D 00 64 FD | 	ret
227e0                 | 
227e0                 | ' 
227e0                 | ' '' Emulate mouse movement
227e0                 | ' PUB mouse_move(x,y)
227e0                 | _usbnew_spin2_mouse_move
227e0     02 4A 05 F6 | 	mov	COUNT_, #2
227e4     A8 00 A0 FD | 	call	#pushregs_
227e8     09 27 02 F6 | 	mov	local01, arg01
227ec     0A 29 02 F6 | 	mov	local02, arg02
227f0                 | '   mouse_lock := 1
227f0     14 00 00 FF 
227f4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
227f8     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
227fc     14 00 00 FF 
22800     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
22804                 | '   waitus(2) ' hope driver is now done
22804     02 12 06 F6 | 	mov	arg01, #2
22808     E8 0A B0 FD | 	call	#__system___waitus
2280c                 | '   mouse_xacc := x
2280c     14 00 00 FF 
22810     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
22814     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
22818                 | '   mouse_yacc := y
22818     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2281c     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
22820                 | '   if mouse_outptr
22820     04 00 00 FF 
22824     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
22828     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
2282c     0F 00 00 FF 
22830     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
22834     24 00 90 AD |  if_e	jmp	#LR__2810
22838                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
22838     10 28 66 F0 | 	shl	local02, #16
2283c     13 27 32 F9 | 	getword	local01, local01, #0
22840     13 29 42 F5 | 	or	local02, local01
22844     0F 00 00 FF 
22848     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
2284c     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
22850     0F 00 00 FF 
22854     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
22858     13 29 62 FC | 	wrlong	local02, local01
2285c                 | LR__2810
2285c                 | '   mouse_lock := 0
2285c     14 00 00 FF 
22860     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
22864     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
22868     14 00 00 FF 
2286c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
22870     A7 F0 03 F6 | 	mov	ptra, fp
22874     B2 00 A0 FD | 	call	#popregs_
22878                 | _usbnew_spin2_mouse_move_ret
22878     2D 00 64 FD | 	ret
2287c                 | 
2287c                 | '     '' Set HAVE_HIDPAD to enable.
2287c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
2287c                 | ' 
2287c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
2287c                 | ' PUB hidpad_id(dev) : r
2287c                 | _usbnew_spin2_hidpad_id
2287c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
2287c     13 00 00 FF 
22880     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
22884     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
22888     09 01 02 F6 | 	mov	_var01, arg01
2288c     03 00 66 F0 | 	shl	_var01, #3
22890     09 01 82 F1 | 	sub	_var01, arg01
22894     02 00 66 F0 | 	shl	_var01, #2
22898     00 FB 01 F1 | 	add	result1, _var01
2289c     FD FA 01 FB | 	rdlong	result1, result1
228a0     13 00 00 FF 
228a4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
228a8                 | _usbnew_spin2_hidpad_id_ret
228a8     2D 00 64 FD | 	ret
228ac                 | 
228ac                 | ' 
228ac                 | ' '' Get all button states for a device
228ac                 | ' PUB hidpad_buttons(dev) : r 
228ac                 | _usbnew_spin2_hidpad_buttons
228ac                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
228ac     13 00 00 FF 
228b0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
228b4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
228b8     09 01 02 F6 | 	mov	_var01, arg01
228bc     03 00 66 F0 | 	shl	_var01, #3
228c0     09 01 82 F1 | 	sub	_var01, arg01
228c4     02 00 66 F0 | 	shl	_var01, #2
228c8     00 FB 01 F1 | 	add	result1, _var01
228cc     14 FA 05 F1 | 	add	result1, #20
228d0     FD FA 01 FB | 	rdlong	result1, result1
228d4     13 00 00 FF 
228d8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
228dc                 | _usbnew_spin2_hidpad_buttons_ret
228dc     2D 00 64 FD | 	ret
228e0                 | 
228e0                 | ' 
228e0                 | ' '' Get state of an axis (normalized between -32768 and 32767)
228e0                 | ' PUB hidpad_axis(dev,axnum) : r
228e0                 | _usbnew_spin2_hidpad_axis
228e0                 | '   if axnum +>= 6
228e0     06 14 16 F2 | 	cmp	arg02, #6 wc
228e4                 | '     return 0
228e4     00 FA 05 36 |  if_ae	mov	result1, #0
228e8     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
228ec                 | '   else 
228ec                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
228ec     13 00 00 FF 
228f0     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
228f4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
228f8     09 01 02 F6 | 	mov	_var01, arg01
228fc     03 00 66 F0 | 	shl	_var01, #3
22900     09 01 82 F1 | 	sub	_var01, arg01
22904     02 00 66 F0 | 	shl	_var01, #2
22908     00 FB 01 F1 | 	add	result1, _var01
2290c     04 00 06 F6 | 	mov	_var01, #4
22910     0A 01 02 F1 | 	add	_var01, arg02
22914     01 00 66 F0 | 	shl	_var01, #1
22918     FD 00 02 F1 | 	add	_var01, result1
2291c     00 FB E1 FA | 	rdword	result1, _var01
22920     0F FA 65 F7 | 	signx	result1, #15
22924     13 00 00 FF 
22928     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2292c                 | _usbnew_spin2_hidpad_axis_ret
2292c     2D 00 64 FD | 	ret
22930                 | 
22930                 | ' 
22930                 | ' 
22930                 | ' '--------------------------------------------------------------
22930                 | ' '---------- Init the variables, start the cog. ----------------
22930                 | ' '--------------------------------------------------------------
22930                 | ' 
22930                 | ' pub start(mbox,scope,cache) :cog,base | iii
22930                 | _audio096_spin2_start
22930     04 4A 05 F6 | 	mov	COUNT_, #4
22934     A8 00 A0 FD | 	call	#pushregs_
22938     09 27 02 F6 | 	mov	local01, arg01
2293c                 | ' 
2293c                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
2293c                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
2293c                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
2293c                 | ' 
2293c                 | ' mailboxaddr:=mbox 
2293c     F2 26 62 FC | 	wrlong	local01, objptr
22940                 | ' scope_ptr:=scope
22940     04 E4 05 F1 | 	add	objptr, #4
22944     F2 14 62 FC | 	wrlong	arg02, objptr
22948                 | ' cache_ptr:=cache
22948     04 E4 05 F1 | 	add	objptr, #4
2294c     F2 16 62 FC | 	wrlong	arg03, objptr
22950                 | ' base:=@channel1[0]
22950     04 E4 05 F1 | 	add	objptr, #4
22954     F2 28 02 F6 | 	mov	local02, objptr
22958                 | ' long[$40]:=mbox
22958     40 26 66 FC | 	wrlong	local01, #64
2295c                 | ' repeat iii from 0 to 7
2295c     00 2A 06 F6 | 	mov	local03, #0
22960     02 00 00 FF 
22964     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
22968     0C E4 85 F1 | 	sub	objptr, #12
2296c     97 BC 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
22970                 | LR__2820
22970                 | '   long[base+64*iii]:=0
22970     14 27 02 F6 | 	mov	local01, local02
22974     15 FD 01 F6 | 	mov	result2, local03
22978     06 FC 65 F0 | 	shl	result2, #6
2297c     FE 26 02 F1 | 	add	local01, result2
22980     13 01 68 FC | 	wrlong	#0, local01
22984                 | '   long[base+64*iii+4]:=0
22984     14 27 02 F6 | 	mov	local01, local02
22988     15 FD 01 F6 | 	mov	result2, local03
2298c     06 FC 65 F0 | 	shl	result2, #6
22990     FE 26 02 F1 | 	add	local01, result2
22994     04 26 06 F1 | 	add	local01, #4
22998     13 01 68 FC | 	wrlong	#0, local01
2299c                 | '   long[base+64*iii+12]:=0
2299c     14 2D 02 F6 | 	mov	local04, local02
229a0     15 27 02 F6 | 	mov	local01, local03
229a4     06 26 66 F0 | 	shl	local01, #6
229a8     13 2D 02 F1 | 	add	local04, local01
229ac     0C 2C 06 F1 | 	add	local04, #12
229b0     16 01 68 FC | 	wrlong	#0, local04
229b4                 | '   long[base+64*iii+16]:=2 
229b4     14 2D 02 F6 | 	mov	local04, local02
229b8     15 27 02 F6 | 	mov	local01, local03
229bc     06 26 66 F0 | 	shl	local01, #6
229c0     13 2D 02 F1 | 	add	local04, local01
229c4     10 2C 06 F1 | 	add	local04, #16
229c8     16 05 68 FC | 	wrlong	#2, local04
229cc                 | '   word[base+64*iii+20]:=0
229cc     14 2D 02 F6 | 	mov	local04, local02
229d0     15 27 02 F6 | 	mov	local01, local03
229d4     06 26 66 F0 | 	shl	local01, #6
229d8     13 2D 02 F1 | 	add	local04, local01
229dc     14 2C 06 F1 | 	add	local04, #20
229e0     16 01 58 FC | 	wrword	#0, local04
229e4                 | '   word[base+64*iii+22]:=8192
229e4     14 2D 02 F6 | 	mov	local04, local02
229e8     15 27 02 F6 | 	mov	local01, local03
229ec     06 26 66 F0 | 	shl	local01, #6
229f0     13 2D 02 F1 | 	add	local04, local01
229f4     16 2C 06 F1 | 	add	local04, #22
229f8     10 00 80 FF 
229fc     16 01 58 FC | 	wrword	##8192, local04
22a00                 | '   word[base+64*iii+24]:=4000+2*iii
22a00     15 2D 02 F6 | 	mov	local04, local03
22a04     01 2C 66 F0 | 	shl	local04, #1
22a08     07 00 00 FF 
22a0c     A0 27 06 F6 | 	mov	local01, ##4000
22a10     16 27 02 F1 | 	add	local01, local04
22a14     14 2D 02 F6 | 	mov	local04, local02
22a18     15 FD 01 F6 | 	mov	result2, local03
22a1c     06 FC 65 F0 | 	shl	result2, #6
22a20     FE 2C 02 F1 | 	add	local04, result2
22a24     18 2C 06 F1 | 	add	local04, #24
22a28     16 27 52 FC | 	wrword	local01, local04
22a2c                 | '   word[base+64*iii+26]:=2
22a2c     14 2D 02 F6 | 	mov	local04, local02
22a30     15 27 02 F6 | 	mov	local01, local03
22a34     06 26 66 F0 | 	shl	local01, #6
22a38     13 2D 02 F1 | 	add	local04, local01
22a3c     1A 2C 06 F1 | 	add	local04, #26
22a40     16 05 58 FC | 	wrword	#2, local04
22a44                 | '   long [base+64*iii+8]:=@null | $C0000000
22a44     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
22a48     3E 26 26 F4 | 	bith	local01, #62
22a4c     14 2D 02 F6 | 	mov	local04, local02
22a50     15 17 02 F6 | 	mov	arg03, local03
22a54     06 16 66 F0 | 	shl	arg03, #6
22a58     0B 2D 02 F1 | 	add	local04, arg03
22a5c     08 2C 06 F1 | 	add	local04, #8
22a60     16 27 62 FC | 	wrlong	local01, local04
22a64                 | '   long[base+64*iii+32]:=0
22a64     14 2D 02 F6 | 	mov	local04, local02
22a68     15 27 02 F6 | 	mov	local01, local03
22a6c     06 26 66 F0 | 	shl	local01, #6
22a70     13 2D 02 F1 | 	add	local04, local01
22a74     20 2C 06 F1 | 	add	local04, #32
22a78     16 01 68 FC | 	wrlong	#0, local04
22a7c                 | '   long[base+64*iii+36]:=0
22a7c     14 2D 02 F6 | 	mov	local04, local02
22a80     15 27 02 F6 | 	mov	local01, local03
22a84     06 26 66 F0 | 	shl	local01, #6
22a88     13 2D 02 F1 | 	add	local04, local01
22a8c     24 2C 06 F1 | 	add	local04, #36
22a90     16 01 68 FC | 	wrlong	#0, local04
22a94                 | '   long[base+64*iii+40]:=0
22a94     14 2D 02 F6 | 	mov	local04, local02
22a98     15 27 02 F6 | 	mov	local01, local03
22a9c     06 26 66 F0 | 	shl	local01, #6
22aa0     13 2D 02 F1 | 	add	local04, local01
22aa4     28 2C 06 F1 | 	add	local04, #40
22aa8     16 01 68 FC | 	wrlong	#0, local04
22aac                 | '   long[base+64*iii+44]:=0
22aac     14 2D 02 F6 | 	mov	local04, local02
22ab0     15 27 02 F6 | 	mov	local01, local03
22ab4     06 26 66 F0 | 	shl	local01, #6
22ab8     13 2D 02 F1 | 	add	local04, local01
22abc     2C 2C 06 F1 | 	add	local04, #44
22ac0     16 01 68 FC | 	wrlong	#0, local04
22ac4                 | '   long[base+64*iii+28]:=0
22ac4     14 2D 02 F6 | 	mov	local04, local02
22ac8     15 27 02 F6 | 	mov	local01, local03
22acc     06 26 66 F0 | 	shl	local01, #6
22ad0     13 2D 02 F1 | 	add	local04, local01
22ad4     1C 2C 06 F1 | 	add	local04, #28
22ad8     16 01 68 FC | 	wrlong	#0, local04
22adc     01 2A 06 F1 | 	add	local03, #1
22ae0     08 2A 56 F2 | 	cmps	local03, #8 wc
22ae4     88 FE 9F CD |  if_b	jmp	#LR__2820
22ae8                 | LR__2821
22ae8     02 00 00 FF 
22aec     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
22af0                 | '   
22af0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
22af0     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
22af4     F2 16 02 F6 | 	mov	arg03, objptr
22af8     10 2C 06 F6 | 	mov	local04, #16
22afc     28 16 62 FD | 	setq	arg03
22b00     0A 2D F2 FC | 	coginit	local04, arg02 wc
22b04     01 2C 66 C6 |  if_b	neg	local04, #1
22b08                 | ' waitms(100)
22b08     64 12 06 F6 | 	mov	arg01, #100
22b0c     78 07 B0 FD | 	call	#__system___waitms
22b10                 | ' return cog,base
22b10     14 FD 01 F6 | 	mov	result2, local02
22b14     16 FB 01 F6 | 	mov	result1, local04
22b18     A7 F0 03 F6 | 	mov	ptra, fp
22b1c     B2 00 A0 FD | 	call	#popregs_
22b20                 | _audio096_spin2_start_ret
22b20     2D 00 64 FD | 	ret
22b24                 | 
22b24                 | ' 
22b24                 | ' ' a simple play procedure to not poke everything. 
22b24                 | ' 
22b24                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
22b24                 | _audio096_spin2_play
22b24     0C E4 05 F1 | 	add	objptr, #12
22b28     F2 00 02 F6 | 	mov	_var01, objptr
22b2c     06 12 66 F0 | 	shl	arg01, #6
22b30     09 01 02 F1 | 	add	_var01, arg01
22b34     00 13 02 F6 | 	mov	arg01, _var01
22b38     0C 12 06 F1 | 	add	arg01, #12
22b3c     09 1B 62 FC | 	wrlong	arg05, arg01
22b40     00 1C 56 F2 | 	cmps	arg06, #0 wc
22b44     00 13 02 36 |  if_ae	mov	arg01, _var01
22b48     10 12 06 31 |  if_ae	add	arg01, #16
22b4c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
22b50     02 1A 06 C1 |  if_b	add	arg05, #2
22b54     00 13 02 C6 |  if_b	mov	arg01, _var01
22b58     10 12 06 C1 |  if_b	add	arg01, #16
22b5c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
22b60     0B 13 52 F6 | 	abs	arg01, arg03 wc
22b64     0F 1B 80 FF 
22b68     09 1F 1A FD | 	qdiv	##3546895, arg01
22b6c                 | ' 
22b6c                 | ' base2:=@channel1[0]+64*channel
22b6c                 | ' 
22b6c                 | ' 
22b6c                 | ' long[base2+12]:= len
22b6c                 | ' if loop >=0 
22b6c                 | '   long[base2+16]:= loop
22b6c     0C E4 85 F1 | 	sub	objptr, #12
22b70                 | ' else
22b70                 | '   long[base2+16]:= len+2
22b70                 | ' word[base2+20]:=vol
22b70     00 13 02 F6 | 	mov	arg01, _var01
22b74     14 12 06 F1 | 	add	arg01, #20
22b78     09 19 52 FC | 	wrword	arg04, arg01
22b7c                 | ' word[base2+24]:= 3546895/splfreq 
22b7c     00 19 02 F6 | 	mov	arg04, _var01
22b80     18 18 06 F1 | 	add	arg04, #24
22b84                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
22b84                 | ' long[base2+28]:=$40000000    
22b84                 | ' long[base2+32]:=0    
22b84                 | ' long[base2+36]:=0    
22b84                 | ' long[base2+40]:=0    
22b84                 | ' long[base2+44]:=0    
22b84                 | ' long[base2+8]:=sample+$C0000000     
22b84     00 00 60 FF 
22b88     00 14 06 F1 | 	add	arg02, ##-1073741824
22b8c     18 12 62 FD | 	getqx	arg01
22b90     09 13 82 F6 | 	negc	arg01, arg01
22b94     0C 13 52 FC | 	wrword	arg01, arg04
22b98     00 13 02 F6 | 	mov	arg01, _var01
22b9c     1A 12 06 F1 | 	add	arg01, #26
22ba0     09 01 5A FC | 	wrword	#256, arg01
22ba4     00 13 02 F6 | 	mov	arg01, _var01
22ba8     1C 12 06 F1 | 	add	arg01, #28
22bac     00 00 A0 FF 
22bb0     09 01 68 FC | 	wrlong	##1073741824, arg01
22bb4     00 13 02 F6 | 	mov	arg01, _var01
22bb8     20 12 06 F1 | 	add	arg01, #32
22bbc     09 01 68 FC | 	wrlong	#0, arg01
22bc0     00 13 02 F6 | 	mov	arg01, _var01
22bc4     24 12 06 F1 | 	add	arg01, #36
22bc8     09 01 68 FC | 	wrlong	#0, arg01
22bcc     00 13 02 F6 | 	mov	arg01, _var01
22bd0     28 12 06 F1 | 	add	arg01, #40
22bd4     09 01 68 FC | 	wrlong	#0, arg01
22bd8     00 13 02 F6 | 	mov	arg01, _var01
22bdc     2C 12 06 F1 | 	add	arg01, #44
22be0     09 01 68 FC | 	wrlong	#0, arg01
22be4     08 00 06 F1 | 	add	_var01, #8
22be8     00 15 62 FC | 	wrlong	arg02, _var01
22bec                 | _audio096_spin2_play_ret
22bec     2D 00 64 FD | 	ret
22bf0                 | 
22bf0                 | ' 
22bf0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
22bf0                 | _audio096_spin2_play8
22bf0                 | ' 
22bf0                 | ' base2:=@channel1[0]+64*channel
22bf0     0C E4 05 F1 | 	add	objptr, #12
22bf4     F2 00 02 F6 | 	mov	_var01, objptr
22bf8     06 12 66 F0 | 	shl	arg01, #6
22bfc     09 01 02 F1 | 	add	_var01, arg01
22c00                 | ' long[base2]:=0
22c00     00 01 68 FC | 	wrlong	#0, _var01
22c04                 | ' long[base2+8]:=sample+$40000000 
22c04     00 00 20 FF 
22c08     00 14 06 F1 | 	add	arg02, ##1073741824
22c0c     00 13 02 F6 | 	mov	arg01, _var01
22c10     08 12 06 F1 | 	add	arg01, #8
22c14     09 15 62 FC | 	wrlong	arg02, arg01
22c18                 | ' if loop>=0
22c18     00 1C 56 F2 | 	cmps	arg06, #0 wc
22c1c     0C E4 85 F1 | 	sub	objptr, #12
22c20     1C 00 90 CD |  if_b	jmp	#LR__2830
22c24                 | '   long[base2+12]:=loop
22c24     00 15 02 F6 | 	mov	arg02, _var01
22c28     0C 14 06 F1 | 	add	arg02, #12
22c2c     0A 1D 62 FC | 	wrlong	arg06, arg02
22c30                 | '   long[base2+16]:= len
22c30     00 1D 02 F6 | 	mov	arg06, _var01
22c34     10 1C 06 F1 | 	add	arg06, #16
22c38     0E 1B 62 FC | 	wrlong	arg05, arg06
22c3c     1C 00 90 FD | 	jmp	#LR__2831
22c40                 | LR__2830
22c40                 | ' else
22c40                 | '   long[base2+12]:= len
22c40     00 1D 02 F6 | 	mov	arg06, _var01
22c44     0C 1C 06 F1 | 	add	arg06, #12
22c48     0E 1B 62 FC | 	wrlong	arg05, arg06
22c4c                 | '   long[base2+16]:= len+1
22c4c     01 1A 06 F1 | 	add	arg05, #1
22c50     00 13 02 F6 | 	mov	arg01, _var01
22c54     10 12 06 F1 | 	add	arg01, #16
22c58     09 1B 62 FC | 	wrlong	arg05, arg01
22c5c                 | LR__2831
22c5c     0B 17 52 F6 | 	abs	arg03, arg03 wc
22c60     0F 1B 80 FF 
22c64     0B 1F 1A FD | 	qdiv	##3546895, arg03
22c68                 | ' word[base2+20]:=vol
22c68     00 17 02 F6 | 	mov	arg03, _var01
22c6c     14 16 06 F1 | 	add	arg03, #20
22c70     0B 19 52 FC | 	wrword	arg04, arg03
22c74                 | ' word[base2+24]:= 3546895 /splfreq 
22c74     00 13 02 F6 | 	mov	arg01, _var01
22c78     18 12 06 F1 | 	add	arg01, #24
22c7c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
22c7c     1A 00 06 F1 | 	add	_var01, #26
22c80     18 18 62 FD | 	getqx	arg04
22c84     0C 19 82 F6 | 	negc	arg04, arg04
22c88     09 19 52 FC | 	wrword	arg04, arg01
22c8c     00 01 5A FC | 	wrword	#256, _var01
22c90                 | _audio096_spin2_play8_ret
22c90     2D 00 64 FD | 	ret
22c94                 | 
22c94                 | ' 'long[base2+28]:=$40000000
22c94                 | ' 
22c94                 | '     
22c94                 | ' pub stop(channel) 'silence it
22c94                 | _audio096_spin2_stop
22c94                 | ' 
22c94                 | ' word[@channel1[0]+64*channel+20]:=0
22c94     0C E4 05 F1 | 	add	objptr, #12
22c98     F2 00 02 F6 | 	mov	_var01, objptr
22c9c     09 03 02 F6 | 	mov	_var02, arg01
22ca0     06 02 66 F0 | 	shl	_var02, #6
22ca4     01 01 02 F1 | 	add	_var01, _var02
22ca8     14 00 06 F1 | 	add	_var01, #20
22cac     00 01 58 FC | 	wrword	#0, _var01
22cb0                 | ' word[@channel1[0]+64*channel+20]:=0
22cb0     F2 00 02 F6 | 	mov	_var01, objptr
22cb4     06 12 66 F0 | 	shl	arg01, #6
22cb8     09 01 02 F1 | 	add	_var01, arg01
22cbc     14 00 06 F1 | 	add	_var01, #20
22cc0     00 01 58 FC | 	wrword	#0, _var01
22cc4     0C E4 85 F1 | 	sub	objptr, #12
22cc8                 | _audio096_spin2_stop_ret
22cc8     2D 00 64 FD | 	ret
22ccc                 | hubexit
22ccc     81 00 80 FD | 	jmp	#cogexit
22cd0                 | 
22cd0                 | __system___setbaud
22cd0     14 88 06 FB | 	rdlong	muldiva_, #20
22cd4     09 8B 02 F6 | 	mov	muldivb_, arg01
22cd8     BA 00 A0 FD | 	call	#divide_
22cdc     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
22ce0                 | LR__2840
22ce0     3E FA 9D FA | 	rdpin	result1, #62 wc
22ce4     FE FC A1 F1 | 	subx	result2, result2
22ce8     F4 FF 9F CD |  if_b	jmp	#LR__2840
22cec                 | LR__2841
22cec     40 7C 64 FD | 	dirl	#62
22cf0     40 7E 64 FD | 	dirl	#63
22cf4     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
22cf8     10 8A 66 F0 | 	shl	muldivb_, #16
22cfc     07 14 06 F6 | 	mov	arg02, #7
22d00     45 15 02 F1 | 	add	arg02, muldivb_
22d04     3E F8 0C FC | 	wrpin	#124, #62
22d08     3E 14 16 FC | 	wxpin	arg02, #62
22d0c     3F 7C 0C FC | 	wrpin	#62, #63
22d10     14 14 06 F1 | 	add	arg02, #20
22d14     3F 14 16 FC | 	wxpin	arg02, #63
22d18     41 7C 64 FD | 	dirh	#62
22d1c     41 7E 64 FD | 	dirh	#63
22d20                 | __system___setbaud_ret
22d20     2D 00 64 FD | 	ret
22d24                 | 
22d24                 | __system___txraw
22d24     01 4A 05 F6 | 	mov	COUNT_, #1
22d28     A8 00 A0 FD | 	call	#pushregs_
22d2c     09 27 02 F6 | 	mov	local01, arg01
22d30     97 06 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
22d34                 | LR__2850
22d34     3E FA 9D FA | 	rdpin	result1, #62 wc
22d38     FE FC A1 F1 | 	subx	result2, result2
22d3c     F4 FF 9F CD |  if_b	jmp	#LR__2850
22d40                 | LR__2851
22d40     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
22d44     C2 01 00 AF 
22d48     00 12 06 A6 |  if_e	mov	arg01, ##230400
22d4c     80 FF BF AD |  if_e	call	#__system___setbaud
22d50     58 7C 64 FD | 	drvl	#62
22d54     3E 26 26 FC | 	wypin	local01, #62
22d58     01 FA 05 F6 | 	mov	result1, #1
22d5c     A7 F0 03 F6 | 	mov	ptra, fp
22d60     B2 00 A0 FD | 	call	#popregs_
22d64                 | __system___txraw_ret
22d64     2D 00 64 FD | 	ret
22d68                 | 
22d68                 | __system___rxraw
22d68     0D 4A 05 F6 | 	mov	COUNT_, #13
22d6c     A8 00 A0 FD | 	call	#pushregs_
22d70     09 27 02 F6 | 	mov	local01, arg01
22d74     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
22d78     C2 01 00 AF 
22d7c     00 12 06 A6 |  if_e	mov	arg01, ##230400
22d80     4C FF BF AD |  if_e	call	#__system___setbaud
22d84     00 26 0E F2 | 	cmp	local01, #0 wz
22d88     20 00 90 AD |  if_e	jmp	#LR__2860
22d8c     14 2A 06 FB | 	rdlong	local03, #20
22d90     0A 2A 46 F0 | 	shr	local03, #10
22d94     15 27 02 FD | 	qmul	local01, local03
22d98     1A FA 61 FD | 	getct	result1
22d9c     18 2C 62 FD | 	getqx	local04
22da0     16 FB 01 F1 | 	add	result1, local04
22da4     FD 2E 02 F6 | 	mov	local05, result1
22da8     04 00 90 FD | 	jmp	#LR__2861
22dac                 | LR__2860
22dac     00 2E 06 F6 | 	mov	local05, #0
22db0                 | LR__2861
22db0     01 30 66 F6 | 	neg	local06, #1
22db4     3F 32 06 F6 | 	mov	local07, #63
22db8     00 34 06 F6 | 	mov	local08, #0
22dbc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22dc0     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
22dc4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
22dc8                 | LR__2862
22dc8     08 36 16 F4 | 	testb	local09, #8 wc
22dcc     09 36 76 F4 | 	testbn	local09, #9 andc
22dd0     0A 36 46 F0 | 	shr	local09, #10
22dd4     01 34 06 C6 |  if_b	mov	local08, #1
22dd8     40 7E 6C 3D |  if_ae	testp	#63 wz
22ddc     01 34 06 26 |  if_nc_and_z	mov	local08, #1
22de0     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
22de4     04 36 46 20 |  if_nc_and_z	shr	local09, #4
22de8                 | LR__2863
22de8     00 28 06 F6 | 	mov	local02, #0
22dec     00 34 0E F2 | 	cmp	local08, #0 wz
22df0     01 28 66 56 |  if_ne	neg	local02, #1
22df4     00 38 06 F6 | 	mov	local10, #0
22df8     00 2A 06 F6 | 	mov	local03, #0
22dfc     00 26 0E F2 | 	cmp	local01, #0 wz
22e00     01 2A 66 56 |  if_ne	neg	local03, #1
22e04     00 2C 06 F6 | 	mov	local04, #0
22e08     00 3A 06 F6 | 	mov	local11, #0
22e0c     17 3D 02 F6 | 	mov	local12, local05
22e10     1A FA 61 FD | 	getct	result1
22e14     FD 3E 02 F6 | 	mov	local13, result1
22e18     1F 3D 82 F1 | 	sub	local12, local13
22e1c     00 3C 56 F2 | 	cmps	local12, #0 wc
22e20     00 3A 26 C6 |  if_b	not	local11, #0
22e24     00 3A 0E F2 | 	cmp	local11, #0 wz
22e28     00 2C 26 56 |  if_ne	not	local04, #0
22e2c     16 2B CA F7 | 	test	local03, local04 wz
22e30     00 38 26 56 |  if_ne	not	local10, #0
22e34     1C 29 4A F5 | 	or	local02, local10 wz
22e38     8C FF 9F AD |  if_e	jmp	#LR__2862
22e3c     00 34 0E F2 | 	cmp	local08, #0 wz
22e40     1B 31 02 56 |  if_ne	mov	local06, local09
22e44     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
22e48     04 E6 05 F1 | 	add	ptr___system__dat__, #4
22e4c     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
22e50     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
22e54     18 FB 01 F6 | 	mov	result1, local06
22e58     A7 F0 03 F6 | 	mov	ptra, fp
22e5c     B2 00 A0 FD | 	call	#popregs_
22e60                 | __system___rxraw_ret
22e60     2D 00 64 FD | 	ret
22e64                 | 
22e64                 | __system___getus
22e64     1A FC 71 FD | 	getct	result2 wc
22e68     1A 00 62 FD | 	getct	_var01
22e6c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
22e70     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
22e74     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
22e78     20 00 90 5D |  if_ne	jmp	#LR__2870
22e7c     14 02 06 FB | 	rdlong	_var02, #20
22e80     A1 07 00 FF 
22e84     40 02 16 FD | 	qdiv	_var02, ##1000000
22e88     10 E6 05 F1 | 	add	ptr___system__dat__, #16
22e8c     18 FA 61 FD | 	getqx	result1
22e90     FD 02 02 F6 | 	mov	_var02, result1
22e94     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
22e98     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
22e9c                 | LR__2870
22e9c     01 FD 11 FD | 	qdiv	result2, _var02
22ea0     19 FC 61 FD | 	getqy	result2
22ea4     28 FC 61 FD | 	setq	result2
22ea8     01 01 12 FD | 	qdiv	_var01, _var02
22eac     18 FA 61 FD | 	getqx	result1
22eb0                 | __system___getus_ret
22eb0     2D 00 64 FD | 	ret
22eb4                 | 
22eb4                 | __system____builtin_memmove
22eb4     09 01 02 F6 | 	mov	_var01, arg01
22eb8     0A 13 52 F2 | 	cmps	arg01, arg02 wc
22ebc     10 00 90 CD |  if_b	jmp	#LR__2880
22ec0     0A 03 02 F6 | 	mov	_var02, arg02
22ec4     0B 03 02 F1 | 	add	_var02, arg03
22ec8     01 13 52 F2 | 	cmps	arg01, _var02 wc
22ecc     48 00 90 CD |  if_b	jmp	#LR__2886
22ed0                 | LR__2880
22ed0     0B 05 02 F6 | 	mov	_var03, arg03
22ed4     02 04 4E F0 | 	shr	_var03, #2 wz
22ed8     18 00 90 AD |  if_e	jmp	#LR__2885
22edc     97 0A 48 FB | 	callpa	#(@LR__2883-@LR__2881)>>2,fcache_load_ptr_
22ee0                 | LR__2881
22ee0     02 09 D8 FC | 	rep	@LR__2884, _var03
22ee4                 | LR__2882
22ee4     0A 05 02 FB | 	rdlong	_var03, arg02
22ee8     09 05 62 FC | 	wrlong	_var03, arg01
22eec     04 12 06 F1 | 	add	arg01, #4
22ef0     04 14 06 F1 | 	add	arg02, #4
22ef4                 | LR__2883
22ef4                 | LR__2884
22ef4                 | LR__2885
22ef4     02 16 CE F7 | 	test	arg03, #2 wz
22ef8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
22efc     09 03 52 5C |  if_ne	wrword	_var02, arg01
22f00     02 12 06 51 |  if_ne	add	arg01, #2
22f04     02 14 06 51 |  if_ne	add	arg02, #2
22f08     01 16 CE F7 | 	test	arg03, #1 wz
22f0c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
22f10     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
22f14     28 00 90 FD | 	jmp	#LR__2892
22f18                 | LR__2886
22f18     0B 13 02 F1 | 	add	arg01, arg03
22f1c     0B 15 02 F1 | 	add	arg02, arg03
22f20     0B 07 0A F6 | 	mov	_var04, arg03 wz
22f24     18 00 90 AD |  if_e	jmp	#LR__2891
22f28     97 0A 48 FB | 	callpa	#(@LR__2889-@LR__2887)>>2,fcache_load_ptr_
22f2c                 | LR__2887
22f2c     03 09 D8 FC | 	rep	@LR__2890, _var04
22f30                 | LR__2888
22f30     01 12 86 F1 | 	sub	arg01, #1
22f34     01 14 86 F1 | 	sub	arg02, #1
22f38     0A 03 C2 FA | 	rdbyte	_var02, arg02
22f3c     09 03 42 FC | 	wrbyte	_var02, arg01
22f40                 | LR__2889
22f40                 | LR__2890
22f40                 | LR__2891
22f40                 | LR__2892
22f40     00 FB 01 F6 | 	mov	result1, _var01
22f44                 | __system____builtin_memmove_ret
22f44     2D 00 64 FD | 	ret
22f48                 | 
22f48                 | __system____builtin_strcpy
22f48     09 01 02 F6 | 	mov	_var01, arg01
22f4c     97 0A 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
22f50                 | LR__2900
22f50     0A FB C9 FA | 	rdbyte	result1, arg02 wz
22f54     09 FB 41 FC | 	wrbyte	result1, arg01
22f58     01 14 06 F1 | 	add	arg02, #1
22f5c     01 12 06 F1 | 	add	arg01, #1
22f60     EC FF 9F 5D |  if_ne	jmp	#LR__2900
22f64                 | LR__2901
22f64     00 FB 01 F6 | 	mov	result1, _var01
22f68                 | __system____builtin_strcpy_ret
22f68     2D 00 64 FD | 	ret
22f6c                 | 
22f6c                 | __system____topofstack
22f6c     00 4A 05 F6 | 	mov	COUNT_, #0
22f70     A8 00 A0 FD | 	call	#pushregs_
22f74     08 F0 07 F1 | 	add	ptra, #8
22f78     04 4E 05 F1 | 	add	fp, #4
22f7c     A7 12 62 FC | 	wrlong	arg01, fp
22f80     A7 FA 01 F6 | 	mov	result1, fp
22f84     04 4E 85 F1 | 	sub	fp, #4
22f88     A7 F0 03 F6 | 	mov	ptra, fp
22f8c     B2 00 A0 FD | 	call	#popregs_
22f90                 | __system____topofstack_ret
22f90     2D 00 64 FD | 	ret
22f94                 | 
22f94                 | __system___lockmem
22f94     00 FA 05 F6 | 	mov	result1, #0
22f98     01 FA 61 FD | 	cogid	result1
22f9c     00 FB 05 F1 | 	add	result1, #256
22fa0                 | LR__2910
22fa0     09 01 0A FB | 	rdlong	_var01, arg01 wz
22fa4     09 FB 61 AC |  if_e	wrlong	result1, arg01
22fa8     09 01 02 AB |  if_e	rdlong	_var01, arg01
22fac     09 01 02 AB |  if_e	rdlong	_var01, arg01
22fb0     FD 00 0A F2 | 	cmp	_var01, result1 wz
22fb4     E8 FF 9F 5D |  if_ne	jmp	#LR__2910
22fb8                 | __system___lockmem_ret
22fb8     2D 00 64 FD | 	ret
22fbc                 | 
22fbc                 | __system___string_cmp
22fbc     97 14 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
22fc0                 | LR__2920
22fc0     09 01 C2 FA | 	rdbyte	_var01, arg01
22fc4     0A 03 C2 FA | 	rdbyte	_var02, arg02
22fc8     00 05 02 F6 | 	mov	_var03, _var01
22fcc     01 05 8A F1 | 	sub	_var03, _var02 wz
22fd0     01 12 06 F1 | 	add	arg01, #1
22fd4     01 14 06 F1 | 	add	arg02, #1
22fd8     0C 00 90 5D |  if_ne	jmp	#LR__2922
22fdc     00 00 0E F2 | 	cmp	_var01, #0 wz
22fe0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
22fe4     D8 FF 9F 5D |  if_ne	jmp	#LR__2920
22fe8                 | LR__2921
22fe8                 | LR__2922
22fe8     02 FB 01 F6 | 	mov	result1, _var03
22fec                 | __system___string_cmp_ret
22fec     2D 00 64 FD | 	ret
22ff0                 | 
22ff0                 | __system___string_concat
22ff0     05 4A 05 F6 | 	mov	COUNT_, #5
22ff4     A8 00 A0 FD | 	call	#pushregs_
22ff8     09 27 02 F6 | 	mov	local01, arg01
22ffc     0A 29 02 F6 | 	mov	local02, arg02
23000     13 13 02 F6 | 	mov	arg01, local01
23004     09 2B 02 F6 | 	mov	local03, arg01
23008     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
2300c                 | LR__2930
2300c     15 FB C9 FA | 	rdbyte	result1, local03 wz
23010     01 2A 06 51 |  if_ne	add	local03, #1
23014     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
23018                 | LR__2931
23018     09 2B 82 F1 | 	sub	local03, arg01
2301c     15 2D 02 F6 | 	mov	local04, local03
23020     14 13 02 F6 | 	mov	arg01, local02
23024     09 2B 02 F6 | 	mov	local03, arg01
23028     97 06 48 FB | 	callpa	#(@LR__2933-@LR__2932)>>2,fcache_load_ptr_
2302c                 | LR__2932
2302c     15 FB C9 FA | 	rdbyte	result1, local03 wz
23030     01 2A 06 51 |  if_ne	add	local03, #1
23034     F4 FF 9F 5D |  if_ne	jmp	#LR__2932
23038                 | LR__2933
23038     09 2B 82 F1 | 	sub	local03, arg01
2303c     16 13 02 F6 | 	mov	arg01, local04
23040     15 13 02 F1 | 	add	arg01, local03
23044     01 12 06 F1 | 	add	arg01, #1
23048     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
2304c     FD 2E 0A F6 | 	mov	local05, result1 wz
23050     28 00 90 AD |  if_e	jmp	#LR__2934
23054     17 13 02 F6 | 	mov	arg01, local05
23058     13 15 02 F6 | 	mov	arg02, local01
2305c     16 17 02 F6 | 	mov	arg03, local04
23060     50 FE BF FD | 	call	#__system____builtin_memmove
23064     17 13 02 F6 | 	mov	arg01, local05
23068     16 13 02 F1 | 	add	arg01, local04
2306c     01 2A 06 F1 | 	add	local03, #1
23070     14 15 02 F6 | 	mov	arg02, local02
23074     15 17 02 F6 | 	mov	arg03, local03
23078     38 FE BF FD | 	call	#__system____builtin_memmove
2307c                 | LR__2934
2307c     17 FB 01 F6 | 	mov	result1, local05
23080     A7 F0 03 F6 | 	mov	ptra, fp
23084     B2 00 A0 FD | 	call	#popregs_
23088                 | __system___string_concat_ret
23088     2D 00 64 FD | 	ret
2308c                 | 
2308c                 | __system___tx
2308c     02 4A 05 F6 | 	mov	COUNT_, #2
23090     A8 00 A0 FD | 	call	#pushregs_
23094     09 27 02 F6 | 	mov	local01, arg01
23098     0A 26 0E F2 | 	cmp	local01, #10 wz
2309c     18 00 90 5D |  if_ne	jmp	#LR__2940
230a0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
230a4     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
230a8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
230ac     02 28 CE F7 | 	test	local02, #2 wz
230b0     0D 12 06 56 |  if_ne	mov	arg01, #13
230b4     6C FC BF 5D |  if_ne	call	#__system___txraw
230b8                 | LR__2940
230b8     13 13 02 F6 | 	mov	arg01, local01
230bc     64 FC BF FD | 	call	#__system___txraw
230c0     A7 F0 03 F6 | 	mov	ptra, fp
230c4     B2 00 A0 FD | 	call	#popregs_
230c8                 | __system___tx_ret
230c8     2D 00 64 FD | 	ret
230cc                 | 
230cc                 | __system___rx
230cc     01 4A 05 F6 | 	mov	COUNT_, #1
230d0     A8 00 A0 FD | 	call	#pushregs_
230d4                 | LR__2950
230d4     00 12 06 F6 | 	mov	arg01, #0
230d8     8C FC BF FD | 	call	#__system___rxraw
230dc     FD 26 02 F6 | 	mov	local01, result1
230e0     FF FF 7F FF 
230e4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
230e8     E8 FF 9F AD |  if_e	jmp	#LR__2950
230ec     0D 26 0E F2 | 	cmp	local01, #13 wz
230f0     14 00 90 5D |  if_ne	jmp	#LR__2951
230f4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
230f8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
230fc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
23100     02 FA CD F7 | 	test	result1, #2 wz
23104     0A 26 06 56 |  if_ne	mov	local01, #10
23108                 | LR__2951
23108     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2310c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
23110     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
23114     01 12 CE F7 | 	test	arg01, #1 wz
23118     1C 00 90 AD |  if_e	jmp	#LR__2954
2311c     7F 26 0E F2 | 	cmp	local01, #127 wz
23120     0C 00 90 5D |  if_ne	jmp	#LR__2952
23124     08 12 06 F6 | 	mov	arg01, #8
23128     60 FF BF FD | 	call	#__system___tx
2312c     08 00 90 FD | 	jmp	#LR__2953
23130                 | LR__2952
23130     13 13 02 F6 | 	mov	arg01, local01
23134     54 FF BF FD | 	call	#__system___tx
23138                 | LR__2953
23138                 | LR__2954
23138     13 FB 01 F6 | 	mov	result1, local01
2313c     A7 F0 03 F6 | 	mov	ptra, fp
23140     B2 00 A0 FD | 	call	#popregs_
23144                 | __system___rx_ret
23144     2D 00 64 FD | 	ret
23148                 | 
23148                 | __system___pinwrite
23148     09 01 02 F6 | 	mov	_var01, arg01
2314c     1F 00 06 F5 | 	and	_var01, #31
23150     20 12 CE F7 | 	test	arg01, #32 wz
23154     06 12 46 F0 | 	shr	arg01, #6
23158     09 13 CA F9 | 	bmask	arg01, arg01
2315c     00 13 62 F0 | 	shl	arg01, _var01
23160     00 15 62 F0 | 	shl	arg02, _var01
23164     1C 00 90 AD |  if_e	jmp	#LR__2960
23168     09 F7 43 F5 | 	or	dirb, arg01
2316c     FD 01 02 F6 | 	mov	_var01, outb
23170     09 01 22 F5 | 	andn	_var01, arg01
23174     09 15 02 F5 | 	and	arg02, arg01
23178     0A 01 42 F5 | 	or	_var01, arg02
2317c     00 FB 03 F6 | 	mov	outb, _var01
23180     18 00 90 FD | 	jmp	#LR__2961
23184                 | LR__2960
23184     09 F5 43 F5 | 	or	dira, arg01
23188     FC 01 02 F6 | 	mov	_var01, outa
2318c     09 01 22 F5 | 	andn	_var01, arg01
23190     09 15 02 F5 | 	and	arg02, arg01
23194     0A 01 42 F5 | 	or	_var01, arg02
23198     00 F9 03 F6 | 	mov	outa, _var01
2319c                 | LR__2961
2319c                 | __system___pinwrite_ret
2319c     2D 00 64 FD | 	ret
231a0                 | 
231a0                 | __system___basic_read_line
231a0     06 4A 05 F6 | 	mov	COUNT_, #6
231a4     A8 00 A0 FD | 	call	#pushregs_
231a8     09 27 02 F6 | 	mov	local01, arg01
231ac     00 28 06 F6 | 	mov	local02, #0
231b0     18 2A 06 F6 | 	mov	local03, #24
231b4     00 2C 06 F6 | 	mov	local04, #0
231b8     18 12 06 F6 | 	mov	arg01, #24
231bc     74 3F B0 FD | 	call	#__system___gc_alloc_managed
231c0     FD 2E 0A F6 | 	mov	local05, result1 wz
231c4     17 FB 01 A6 |  if_e	mov	result1, local05
231c8     B0 00 90 AD |  if_e	jmp	#LR__2973
231cc                 | LR__2970
231cc     13 13 02 F6 | 	mov	arg01, local01
231d0     78 0B B0 FD | 	call	#__system___basic_get_char
231d4     FD 30 02 F6 | 	mov	local06, result1
231d8     01 30 56 F2 | 	cmps	local06, #1 wc
231dc     8C 00 90 CD |  if_b	jmp	#LR__2972
231e0     0A 30 0E F2 | 	cmp	local06, #10 wz
231e4     10 00 90 5D |  if_ne	jmp	#LR__2971
231e8     00 2C 0E F2 | 	cmp	local04, #0 wz
231ec     01 28 56 52 |  if_ne	cmps	local02, #1 wc
231f0     01 28 86 11 |  if_a	sub	local02, #1
231f4     74 00 90 FD | 	jmp	#LR__2972
231f8                 | LR__2971
231f8     0D 30 0E F2 | 	cmp	local06, #13 wz
231fc     01 2C 06 A6 |  if_e	mov	local04, #1
23200     00 2C 06 56 |  if_ne	mov	local04, #0
23204     08 30 0E F2 | 	cmp	local06, #8 wz
23208     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
2320c     01 28 56 A2 |  if_e	cmps	local02, #1 wc
23210     01 28 86 21 |  if_nc_and_z	sub	local02, #1
23214     B4 FF 9F AD |  if_e	jmp	#LR__2970
23218     17 17 02 F6 | 	mov	arg03, local05
2321c     14 17 02 F1 | 	add	arg03, local02
23220     0B 31 42 FC | 	wrbyte	local06, arg03
23224     01 28 06 F1 | 	add	local02, #1
23228     15 29 0A F2 | 	cmp	local02, local03 wz
2322c     9C FF 9F 5D |  if_ne	jmp	#LR__2970
23230     15 13 02 F6 | 	mov	arg01, local03
23234     20 12 06 F1 | 	add	arg01, #32
23238     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
2323c     FD 30 0A F6 | 	mov	local06, result1 wz
23240     18 FB 01 A6 |  if_e	mov	result1, local06
23244     34 00 90 AD |  if_e	jmp	#LR__2973
23248     18 13 02 F6 | 	mov	arg01, local06
2324c     17 15 02 F6 | 	mov	arg02, local05
23250     15 17 02 F6 | 	mov	arg03, local03
23254     5C FC BF FD | 	call	#__system____builtin_memmove
23258     20 2A 06 F1 | 	add	local03, #32
2325c     17 13 02 F6 | 	mov	arg01, local05
23260     0C 40 B0 FD | 	call	#__system___gc_free
23264     18 2F 02 F6 | 	mov	local05, local06
23268     60 FF 9F FD | 	jmp	#LR__2970
2326c                 | LR__2972
2326c     17 31 02 F6 | 	mov	local06, local05
23270     14 31 02 F1 | 	add	local06, local02
23274     18 01 48 FC | 	wrbyte	#0, local06
23278     17 FB 01 F6 | 	mov	result1, local05
2327c                 | LR__2973
2327c     A7 F0 03 F6 | 	mov	ptra, fp
23280     B2 00 A0 FD | 	call	#popregs_
23284                 | __system___basic_read_line_ret
23284     2D 00 64 FD | 	ret
23288                 | 
23288                 | __system___waitms
23288     09 01 02 F6 | 	mov	_var01, arg01
2328c     1A 02 62 FD | 	getct	_var02
23290     14 04 06 FB | 	rdlong	_var03, #20
23294     97 14 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
23298                 | LR__2980
23298     01 00 00 FF 
2329c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
232a0     1C 00 90 CD |  if_b	jmp	#LR__2982
232a4     02 03 02 F1 | 	add	_var02, _var03
232a8     01 13 02 F6 | 	mov	arg01, _var02
232ac     00 12 66 FA | 	addct1	arg01, #0
232b0     24 22 60 FD | 	waitct1
232b4     01 00 00 FF 
232b8     E8 01 86 F1 | 	sub	_var01, ##1000
232bc     D8 FF 9F FD | 	jmp	#LR__2980
232c0                 | LR__2981
232c0                 | LR__2982
232c0     01 00 56 F2 | 	cmps	_var01, #1 wc
232c4     28 00 90 CD |  if_b	jmp	#LR__2983
232c8     02 01 02 FD | 	qmul	_var01, _var03
232cc     01 00 00 FF 
232d0     E8 17 06 F6 | 	mov	arg03, ##1000
232d4     19 FA 61 FD | 	getqy	result1
232d8     18 12 62 FD | 	getqx	arg01
232dc     28 FA 61 FD | 	setq	result1
232e0     0B 13 12 FD | 	qdiv	arg01, arg03
232e4     18 12 62 FD | 	getqx	arg01
232e8     01 13 62 FA | 	addct1	arg01, _var02
232ec     24 22 60 FD | 	waitct1
232f0                 | LR__2983
232f0                 | __system___waitms_ret
232f0     2D 00 64 FD | 	ret
232f4                 | 
232f4                 | __system___waitus
232f4     09 01 02 F6 | 	mov	_var01, arg01
232f8     1A 02 62 FD | 	getct	_var02
232fc     14 04 06 FB | 	rdlong	_var03, #20
23300     97 14 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
23304                 | LR__2990
23304     A1 07 00 FF 
23308     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
2330c     1C 00 90 CD |  if_b	jmp	#LR__2992
23310     02 03 02 F1 | 	add	_var02, _var03
23314     01 13 02 F6 | 	mov	arg01, _var02
23318     00 12 66 FA | 	addct1	arg01, #0
2331c     24 22 60 FD | 	waitct1
23320     A1 07 00 FF 
23324     40 00 86 F1 | 	sub	_var01, ##1000000
23328     D8 FF 9F FD | 	jmp	#LR__2990
2332c                 | LR__2991
2332c                 | LR__2992
2332c     01 00 56 F2 | 	cmps	_var01, #1 wc
23330     28 00 90 CD |  if_b	jmp	#LR__2993
23334     02 01 02 FD | 	qmul	_var01, _var03
23338     A1 07 00 FF 
2333c     40 16 06 F6 | 	mov	arg03, ##1000000
23340     19 FA 61 FD | 	getqy	result1
23344     18 12 62 FD | 	getqx	arg01
23348     28 FA 61 FD | 	setq	result1
2334c     0B 13 12 FD | 	qdiv	arg01, arg03
23350     18 FA 61 FD | 	getqx	result1
23354     FD 02 62 FA | 	addct1	_var02, result1
23358     24 22 60 FD | 	waitct1
2335c                 | LR__2993
2335c                 | __system___waitus_ret
2335c     2D 00 64 FD | 	ret
23360                 | 
23360                 | __system___mount
23360     0B 4A 05 F6 | 	mov	COUNT_, #11
23364     A8 00 A0 FD | 	call	#pushregs_
23368     09 27 02 F6 | 	mov	local01, arg01
2336c     0A 29 0A F6 | 	mov	local02, arg02 wz
23370     01 2A 66 F6 | 	neg	local03, #1
23374     01 FA 65 A6 |  if_e	neg	result1, #1
23378     98 02 90 AD |  if_e	jmp	#LR__3015
2337c     13 FB C1 FA | 	rdbyte	result1, local01
23380     2F FA 0D F2 | 	cmp	result1, #47 wz
23384     28 00 90 5D |  if_ne	jmp	#LR__3002
23388     13 13 02 F6 | 	mov	arg01, local01
2338c     09 2D 02 F6 | 	mov	local04, arg01
23390     97 06 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
23394                 | LR__3000
23394     16 FB C9 FA | 	rdbyte	result1, local04 wz
23398     01 2C 06 51 |  if_ne	add	local04, #1
2339c     F4 FF 9F 5D |  if_ne	jmp	#LR__3000
233a0                 | LR__3001
233a0     09 2D 82 F1 | 	sub	local04, arg01
233a4     16 FB 01 F6 | 	mov	result1, local04
233a8     10 FA 55 F2 | 	cmps	result1, #16 wc
233ac     14 00 90 CD |  if_b	jmp	#LR__3003
233b0                 | LR__3002
233b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
233b4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
233b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
233bc     01 FA 65 F6 | 	neg	result1, #1
233c0     50 02 90 FD | 	jmp	#LR__3015
233c4                 | LR__3003
233c4     00 2E 06 F6 | 	mov	local05, #0
233c8                 | LR__3004
233c8     04 2E 56 F2 | 	cmps	local05, #4 wc
233cc     B0 00 90 3D |  if_ae	jmp	#LR__3009
233d0     17 13 02 F6 | 	mov	arg01, local05
233d4     02 12 66 F0 | 	shl	arg01, #2
233d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
233dc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
233e0     09 FB 09 FB | 	rdlong	result1, arg01 wz
233e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
233e8     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
233ec     17 2B 02 86 |  if_c_and_z	mov	local03, local05
233f0     84 00 90 8D |  if_c_and_z	jmp	#LR__3008
233f4     17 13 02 F6 | 	mov	arg01, local05
233f8     02 12 66 F0 | 	shl	arg01, #2
233fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23400     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23404     09 13 02 FB | 	rdlong	arg01, arg01
23408     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2340c     09 2D 02 F6 | 	mov	local04, arg01
23410     97 06 48 FB | 	callpa	#(@LR__3006-@LR__3005)>>2,fcache_load_ptr_
23414                 | LR__3005
23414     16 FB C9 FA | 	rdbyte	result1, local04 wz
23418     01 2C 06 51 |  if_ne	add	local04, #1
2341c     F4 FF 9F 5D |  if_ne	jmp	#LR__3005
23420                 | LR__3006
23420     09 2D 82 F1 | 	sub	local04, arg01
23424     16 31 02 F6 | 	mov	local06, local04
23428     18 13 02 F6 | 	mov	arg01, local06
2342c     13 13 02 F1 | 	add	arg01, local01
23430     09 FB C1 FA | 	rdbyte	result1, arg01
23434     2F FA 0D F2 | 	cmp	result1, #47 wz
23438     18 33 02 56 |  if_ne	mov	local07, local06
2343c     13 33 02 51 |  if_ne	add	local07, local01
23440     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
23444     30 00 90 5D |  if_ne	jmp	#LR__3007
23448     17 17 02 F6 | 	mov	arg03, local05
2344c     02 16 66 F0 | 	shl	arg03, #2
23450     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23454     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
23458     0B 15 02 FB | 	rdlong	arg02, arg03
2345c     13 13 02 F6 | 	mov	arg01, local01
23460     18 17 02 F6 | 	mov	arg03, local06
23464     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23468     48 51 B0 FD | 	call	#__system__strncmp
2346c     00 FA 0D F2 | 	cmp	result1, #0 wz
23470     17 2B 02 A6 |  if_e	mov	local03, local05
23474     08 00 90 AD |  if_e	jmp	#LR__3009
23478                 | LR__3007
23478                 | LR__3008
23478     01 2E 06 F1 | 	add	local05, #1
2347c     48 FF 9F FD | 	jmp	#LR__3004
23480                 | LR__3009
23480     FF FF 7F FF 
23484     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
23488     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2348c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
23490     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23494     01 FA 65 A6 |  if_e	neg	result1, #1
23498     78 01 90 AD |  if_e	jmp	#LR__3015
2349c     15 2F 02 F6 | 	mov	local05, local03
234a0     17 33 02 F6 | 	mov	local07, local05
234a4     02 32 66 F0 | 	shl	local07, #2
234a8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
234ac     F3 32 02 F1 | 	add	local07, ptr___system__dat__
234b0     19 31 0A FB | 	rdlong	local06, local07 wz
234b4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
234b8     58 00 90 AD |  if_e	jmp	#LR__3010
234bc     4C 30 06 F1 | 	add	local06, #76
234c0     18 33 0A FB | 	rdlong	local07, local06 wz
234c4     4C 30 86 F1 | 	sub	local06, #76
234c8     48 00 90 AD |  if_e	jmp	#LR__3010
234cc     4C 30 06 F1 | 	add	local06, #76
234d0     18 33 02 FB | 	rdlong	local07, local06
234d4     19 2B 02 F6 | 	mov	local03, local07
234d8     13 32 46 F7 | 	zerox	local07, #19
234dc     14 2A 46 F0 | 	shr	local03, #20
234e0     02 2A 66 F0 | 	shl	local03, #2
234e4     ED 2A 02 F1 | 	add	local03, __methods__
234e8     15 2B 02 FB | 	rdlong	local03, local03
234ec     17 31 02 F6 | 	mov	local06, local05
234f0     02 30 66 F0 | 	shl	local06, #2
234f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
234f8     F3 30 02 F1 | 	add	local06, ptr___system__dat__
234fc     18 13 02 FB | 	rdlong	arg01, local06
23500     F2 30 02 F6 | 	mov	local06, objptr
23504     19 E5 01 F6 | 	mov	objptr, local07
23508     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2350c     2D 2A 62 FD | 	call	local03
23510     18 E5 01 F6 | 	mov	objptr, local06
23514                 | LR__3010
23514     17 35 02 F6 | 	mov	local08, local05
23518     02 34 66 F0 | 	shl	local08, #2
2351c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
23520     F3 34 02 F1 | 	add	local08, ptr___system__dat__
23524     1A 29 62 FC | 	wrlong	local02, local08
23528     00 28 0E F2 | 	cmp	local02, #0 wz
2352c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
23530     18 00 90 5D |  if_ne	jmp	#LR__3011
23534     02 2E 66 F0 | 	shl	local05, #2
23538     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2353c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
23540     17 01 68 FC | 	wrlong	#0, local05
23544     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23548     C4 00 90 FD | 	jmp	#LR__3014
2354c                 | LR__3011
2354c     17 37 02 F6 | 	mov	local09, local05
23550     04 36 66 F0 | 	shl	local09, #4
23554     24 E6 05 F1 | 	add	ptr___system__dat__, #36
23558     F3 36 02 F1 | 	add	local09, ptr___system__dat__
2355c     1B 13 02 F6 | 	mov	arg01, local09
23560     13 15 02 F6 | 	mov	arg02, local01
23564     10 16 06 F6 | 	mov	arg03, #16
23568     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
2356c     98 4F B0 FD | 	call	#__system__strncpy
23570     48 28 06 F1 | 	add	local02, #72
23574     14 35 0A FB | 	rdlong	local08, local02 wz
23578     48 28 86 F1 | 	sub	local02, #72
2357c     7C 00 90 AD |  if_e	jmp	#LR__3013
23580     48 28 06 F1 | 	add	local02, #72
23584     14 35 02 FB | 	rdlong	local08, local02
23588     1A 39 02 F6 | 	mov	local10, local08
2358c     13 34 46 F7 | 	zerox	local08, #19
23590     14 38 46 F0 | 	shr	local10, #20
23594     02 38 66 F0 | 	shl	local10, #2
23598     ED 38 02 F1 | 	add	local10, __methods__
2359c     1C 39 02 FB | 	rdlong	local10, local10
235a0     1B 13 02 F6 | 	mov	arg01, local09
235a4     F2 3A 02 F6 | 	mov	local11, objptr
235a8     1A E5 01 F6 | 	mov	objptr, local08
235ac     2D 38 62 FD | 	call	local10
235b0     1D E5 01 F6 | 	mov	objptr, local11
235b4     FD 12 0A F6 | 	mov	arg01, result1 wz
235b8     40 00 90 AD |  if_e	jmp	#LR__3012
235bc     17 35 02 F6 | 	mov	local08, local05
235c0     02 34 66 F0 | 	shl	local08, #2
235c4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
235c8     F3 34 02 F1 | 	add	local08, ptr___system__dat__
235cc     1A 01 68 FC | 	wrlong	#0, local08
235d0     02 2E 66 F0 | 	shl	local05, #2
235d4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
235d8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
235dc     17 01 68 FC | 	wrlong	#0, local05
235e0     09 13 6A F6 | 	neg	arg01, arg01 wz
235e4     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
235e8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
235ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
235f0     01 FA 65 56 |  if_ne	neg	result1, #1
235f4     00 FA 05 A6 |  if_e	mov	result1, #0
235f8     18 00 90 FD | 	jmp	#LR__3015
235fc                 | LR__3012
235fc                 | LR__3013
235fc     02 2E 66 F0 | 	shl	local05, #2
23600     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23604     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
23608     17 37 62 FC | 	wrlong	local09, local05
2360c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23610                 | LR__3014
23610     00 FA 05 F6 | 	mov	result1, #0
23614                 | LR__3015
23614     A7 F0 03 F6 | 	mov	ptra, fp
23618     B2 00 A0 FD | 	call	#popregs_
2361c                 | __system___mount_ret
2361c     2D 00 64 FD | 	ret
23620                 | 
23620                 | __system___chdir
23620     00 4A 05 F6 | 	mov	COUNT_, #0
23624     A8 00 A0 FD | 	call	#pushregs_
23628     40 F0 07 F1 | 	add	ptra, #64
2362c     04 4E 05 F1 | 	add	fp, #4
23630     A7 12 62 FC | 	wrlong	arg01, fp
23634     04 4E 05 F1 | 	add	fp, #4
23638     A7 14 02 F6 | 	mov	arg02, fp
2363c     08 4E 85 F1 | 	sub	fp, #8
23640     68 4B B0 FD | 	call	#__system__stat
23644     3C 4E 05 F1 | 	add	fp, #60
23648     A7 FA 61 FC | 	wrlong	result1, fp
2364c     3C 4E 85 F1 | 	sub	fp, #60
23650     00 FA 0D F2 | 	cmp	result1, #0 wz
23654     3C 4E 05 51 |  if_ne	add	fp, #60
23658     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2365c     3C 4E 85 51 |  if_ne	sub	fp, #60
23660     BC 00 90 5D |  if_ne	jmp	#LR__3022
23664     10 4E 05 F1 | 	add	fp, #16
23668     A7 12 02 FB | 	rdlong	arg01, fp
2366c     10 4E 85 F1 | 	sub	fp, #16
23670     78 00 00 FF 
23674     00 12 06 F5 | 	and	arg01, ##61440
23678     08 00 00 FF 
2367c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
23680     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
23684     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
23688     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
2368c     01 FA 65 56 |  if_ne	neg	result1, #1
23690     8C 00 90 5D |  if_ne	jmp	#LR__3022
23694     04 4E 05 F1 | 	add	fp, #4
23698     A7 16 02 FB | 	rdlong	arg03, fp
2369c     04 4E 85 F1 | 	sub	fp, #4
236a0     0B 17 C2 FA | 	rdbyte	arg03, arg03
236a4     2F 16 0E F2 | 	cmp	arg03, #47 wz
236a8     24 00 90 5D |  if_ne	jmp	#LR__3020
236ac     84 E6 05 F1 | 	add	ptr___system__dat__, #132
236b0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
236b4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
236b8     04 4E 05 F1 | 	add	fp, #4
236bc     A7 14 02 FB | 	rdlong	arg02, fp
236c0     04 4E 85 F1 | 	sub	fp, #4
236c4     00 17 06 F6 | 	mov	arg03, #256
236c8     3C 4E B0 FD | 	call	#__system__strncpy
236cc     4C 00 90 FD | 	jmp	#LR__3021
236d0                 | LR__3020
236d0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
236d4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
236d8     38 4E 05 F1 | 	add	fp, #56
236dc     A7 12 62 FC | 	wrlong	arg01, fp
236e0     38 4E 85 F1 | 	sub	fp, #56
236e4     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
236e8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
236ec     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
236f0     00 17 06 F6 | 	mov	arg03, #256
236f4     10 4E B0 FD | 	call	#__system__strncpy
236f8     38 4E 05 F1 | 	add	fp, #56
236fc     A7 12 02 FB | 	rdlong	arg01, fp
23700     34 4E 85 F1 | 	sub	fp, #52
23704     A7 14 02 FB | 	rdlong	arg02, fp
23708     04 4E 85 F1 | 	sub	fp, #4
2370c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
23710     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
23714     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
23718     10 00 B0 FD | 	call	#__system____getvfsforfile
2371c                 | LR__3021
2371c     00 FA 05 F6 | 	mov	result1, #0
23720                 | LR__3022
23720     A7 F0 03 F6 | 	mov	ptra, fp
23724     B2 00 A0 FD | 	call	#popregs_
23728                 | __system___chdir_ret
23728     2D 00 64 FD | 	ret
2372c                 | 
2372c                 | __system____getvfsforfile
2372c     0E 4A 05 F6 | 	mov	COUNT_, #14
23730     A8 00 A0 FD | 	call	#pushregs_
23734     09 27 02 F6 | 	mov	local01, arg01
23738     0A 29 02 F6 | 	mov	local02, arg02
2373c     0B 2B 02 F6 | 	mov	local03, arg03
23740     97 10 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
23744                 | LR__3030
23744     14 FB C1 FA | 	rdbyte	result1, local02
23748     2F FA 0D F2 | 	cmp	result1, #47 wz
2374c     01 28 06 A1 |  if_e	add	local02, #1
23750     14 2D C2 AA |  if_e	rdbyte	local04, local02
23754     01 28 86 A1 |  if_e	sub	local02, #1
23758     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
2375c     01 28 06 A1 |  if_e	add	local02, #1
23760     E0 FF 9F AD |  if_e	jmp	#LR__3030
23764                 | LR__3031
23764     14 2D C2 FA | 	rdbyte	local04, local02
23768     2F 2C 0E F2 | 	cmp	local04, #47 wz
2376c     14 00 90 5D |  if_ne	jmp	#LR__3032
23770     13 13 02 F6 | 	mov	arg01, local01
23774     14 15 02 F6 | 	mov	arg02, local02
23778     00 17 06 F6 | 	mov	arg03, #256
2377c     88 4D B0 FD | 	call	#__system__strncpy
23780     7C 00 90 FD | 	jmp	#LR__3034
23784                 | LR__3032
23784     84 E6 05 F1 | 	add	ptr___system__dat__, #132
23788     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
2378c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
23790     13 13 02 F6 | 	mov	arg01, local01
23794     00 17 06 F6 | 	mov	arg03, #256
23798     6C 4D B0 FD | 	call	#__system__strncpy
2379c     14 2D CA FA | 	rdbyte	local04, local02 wz
237a0     5C 00 90 AD |  if_e	jmp	#LR__3033
237a4     14 2D C2 FA | 	rdbyte	local04, local02
237a8     2E 2C 0E F2 | 	cmp	local04, #46 wz
237ac     01 28 06 A1 |  if_e	add	local02, #1
237b0     14 2F C2 AA |  if_e	rdbyte	local05, local02
237b4     01 28 86 A1 |  if_e	sub	local02, #1
237b8     17 31 02 A6 |  if_e	mov	local06, local05
237bc     07 30 4E A7 |  if_e	zerox	local06, #7 wz
237c0     3C 00 90 AD |  if_e	jmp	#LR__3033
237c4     13 2F C2 FA | 	rdbyte	local05, local01
237c8     2F 2E 0E F2 | 	cmp	local05, #47 wz
237cc     01 26 06 A1 |  if_e	add	local01, #1
237d0     13 2D C2 AA |  if_e	rdbyte	local04, local01
237d4     01 26 86 A1 |  if_e	sub	local01, #1
237d8     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
237dc     95 01 00 5F 
237e0     A0 14 06 56 |  if_ne	mov	arg02, ##@LR__5160
237e4     13 13 02 56 |  if_ne	mov	arg01, local01
237e8     00 17 06 56 |  if_ne	mov	arg03, #256
237ec     64 4D B0 5D |  if_ne	call	#__system__strncat
237f0     13 13 02 F6 | 	mov	arg01, local01
237f4     14 15 02 F6 | 	mov	arg02, local02
237f8     00 17 06 F6 | 	mov	arg03, #256
237fc     54 4D B0 FD | 	call	#__system__strncat
23800                 | LR__3033
23800                 | LR__3034
23800     13 13 02 F6 | 	mov	arg01, local01
23804     0C 4F B0 FD | 	call	#__system___normalizeName
23808     13 2D CA FA | 	rdbyte	local04, local01 wz
2380c     1C 00 90 AD |  if_e	jmp	#LR__3035
23810     13 2D C2 FA | 	rdbyte	local04, local01
23814     2F 2C 0E F2 | 	cmp	local04, #47 wz
23818     01 26 06 A1 |  if_e	add	local01, #1
2381c     13 31 C2 AA |  if_e	rdbyte	local06, local01
23820     01 26 86 A1 |  if_e	sub	local01, #1
23824     00 30 4E A2 |  if_e	cmps	local06, #0 wz
23828     18 00 90 5D |  if_ne	jmp	#LR__3036
2382c                 | LR__3035
2382c     01 00 00 FF 
23830     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
23834     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
23838     01 00 00 FF 
2383c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
23840     EC 01 90 FD | 	jmp	#LR__3050
23844                 | LR__3036
23844     00 32 06 F6 | 	mov	local07, #0
23848                 | LR__3037
23848     04 32 56 F2 | 	cmps	local07, #4 wc
2384c     CC 01 90 3D |  if_ae	jmp	#LR__3049
23850     19 31 02 F6 | 	mov	local06, local07
23854     02 30 66 F0 | 	shl	local06, #2
23858     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2385c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
23860     18 31 0A FB | 	rdlong	local06, local06 wz
23864     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23868     A8 01 90 AD |  if_e	jmp	#LR__3048
2386c     19 2D 02 F6 | 	mov	local04, local07
23870     02 2C 66 F0 | 	shl	local04, #2
23874     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23878     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
2387c     16 13 02 FB | 	rdlong	arg01, local04
23880     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23884     09 35 02 F6 | 	mov	local08, arg01
23888     97 06 48 FB | 	callpa	#(@LR__3039-@LR__3038)>>2,fcache_load_ptr_
2388c                 | LR__3038
2388c     1A FB C9 FA | 	rdbyte	result1, local08 wz
23890     01 34 06 51 |  if_ne	add	local08, #1
23894     F4 FF 9F 5D |  if_ne	jmp	#LR__3038
23898                 | LR__3039
23898     09 35 82 F1 | 	sub	local08, arg01
2389c     1A 37 02 F6 | 	mov	local09, local08
238a0     1B 2D 02 F6 | 	mov	local04, local09
238a4     13 2D 02 F1 | 	add	local04, local01
238a8     16 31 C2 FA | 	rdbyte	local06, local04
238ac     2F 30 0E F2 | 	cmp	local06, #47 wz
238b0     1B 39 02 56 |  if_ne	mov	local10, local09
238b4     13 39 02 51 |  if_ne	add	local10, local01
238b8     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
238bc     54 01 90 5D |  if_ne	jmp	#LR__3047
238c0     19 17 02 F6 | 	mov	arg03, local07
238c4     02 16 66 F0 | 	shl	arg03, #2
238c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
238cc     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
238d0     0B 15 02 FB | 	rdlong	arg02, arg03
238d4     1B 17 02 F6 | 	mov	arg03, local09
238d8     13 13 02 F6 | 	mov	arg01, local01
238dc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
238e0     D0 4C B0 FD | 	call	#__system__strncmp
238e4     00 FA 4D F2 | 	cmps	result1, #0 wz
238e8     28 01 90 5D |  if_ne	jmp	#LR__3047
238ec     19 3B 02 F6 | 	mov	local11, local07
238f0     02 3A 66 F0 | 	shl	local11, #2
238f4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
238f8     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
238fc     1D 3D 02 FB | 	rdlong	local12, local11
23900     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
23904     97 22 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
23908                 | LR__3040
23908     1B 31 02 F6 | 	mov	local06, local09
2390c     01 30 06 F1 | 	add	local06, #1
23910     13 31 02 F1 | 	add	local06, local01
23914     18 3B C2 FA | 	rdbyte	local11, local06
23918     2E 3A 0E F2 | 	cmp	local11, #46 wz
2391c     2C 00 90 5D |  if_ne	jmp	#LR__3042
23920     1B 3B 02 F6 | 	mov	local11, local09
23924     02 3A 06 F1 | 	add	local11, #2
23928     13 3B 02 F1 | 	add	local11, local01
2392c     1D 39 C2 FA | 	rdbyte	local10, local11
23930     2F 38 0E F2 | 	cmp	local10, #47 wz
23934     1B 3F 02 56 |  if_ne	mov	local13, local09
23938     02 3E 06 51 |  if_ne	add	local13, #2
2393c     13 3F 02 51 |  if_ne	add	local13, local01
23940     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
23944     01 36 06 A1 |  if_e	add	local09, #1
23948     BC FF 9F AD |  if_e	jmp	#LR__3040
2394c                 | LR__3041
2394c                 | LR__3042
2394c     00 2A 0E F2 | 	cmp	local03, #0 wz
23950     15 13 02 56 |  if_ne	mov	arg01, local03
23954     13 15 02 56 |  if_ne	mov	arg02, local01
23958     00 17 06 56 |  if_ne	mov	arg03, #256
2395c     A8 4B B0 5D |  if_ne	call	#__system__strncpy
23960     13 15 02 F6 | 	mov	arg02, local01
23964     1B 15 02 F1 | 	add	arg02, local09
23968     01 14 06 F1 | 	add	arg02, #1
2396c     13 13 02 F6 | 	mov	arg01, local01
23970     D4 F5 BF FD | 	call	#__system____builtin_strcpy
23974     13 13 02 F6 | 	mov	arg01, local01
23978     09 35 02 F6 | 	mov	local08, arg01
2397c     97 06 48 FB | 	callpa	#(@LR__3044-@LR__3043)>>2,fcache_load_ptr_
23980                 | LR__3043
23980     1A FB C9 FA | 	rdbyte	result1, local08 wz
23984     01 34 06 51 |  if_ne	add	local08, #1
23988     F4 FF 9F 5D |  if_ne	jmp	#LR__3043
2398c                 | LR__3044
2398c     09 35 82 F1 | 	sub	local08, arg01
23990     1A 37 02 F6 | 	mov	local09, local08
23994                 | LR__3045
23994     01 36 56 F2 | 	cmps	local09, #1 wc
23998     70 00 90 CD |  if_b	jmp	#LR__3046
2399c     1B 2D 02 F6 | 	mov	local04, local09
239a0     13 2D 02 F1 | 	add	local04, local01
239a4     16 3B C2 FA | 	rdbyte	local11, local04
239a8     2F 3A 0E F2 | 	cmp	local11, #47 wz
239ac     1B 3B 02 A6 |  if_e	mov	local11, local09
239b0     13 3B 02 A1 |  if_e	add	local11, local01
239b4     1D 01 48 AC |  if_e	wrbyte	#0, local11
239b8     01 36 86 A1 |  if_e	sub	local09, #1
239bc     D4 FF 9F AD |  if_e	jmp	#LR__3045
239c0     1B 2D 02 F6 | 	mov	local04, local09
239c4     13 2D 02 F1 | 	add	local04, local01
239c8     16 3B C2 FA | 	rdbyte	local11, local04
239cc     2E 3A 0E F2 | 	cmp	local11, #46 wz
239d0     38 00 90 5D |  if_ne	jmp	#LR__3046
239d4     02 36 56 F2 | 	cmps	local09, #2 wc
239d8     30 00 90 CD |  if_b	jmp	#LR__3046
239dc     1B 41 02 F6 | 	mov	local14, local09
239e0     01 40 86 F1 | 	sub	local14, #1
239e4     13 41 02 F1 | 	add	local14, local01
239e8     20 2F C2 FA | 	rdbyte	local05, local14
239ec     2F 2E 0E F2 | 	cmp	local05, #47 wz
239f0     18 00 90 5D |  if_ne	jmp	#LR__3046
239f4     1B 2D 02 F6 | 	mov	local04, local09
239f8     01 2C 86 F1 | 	sub	local04, #1
239fc     13 2D 02 F1 | 	add	local04, local01
23a00     16 01 48 FC | 	wrbyte	#0, local04
23a04     02 36 86 F1 | 	sub	local09, #2
23a08     88 FF 9F FD | 	jmp	#LR__3045
23a0c                 | LR__3046
23a0c     1E FB 01 F6 | 	mov	result1, local12
23a10     1C 00 90 FD | 	jmp	#LR__3050
23a14                 | LR__3047
23a14                 | LR__3048
23a14     01 32 06 F1 | 	add	local07, #1
23a18     2C FE 9F FD | 	jmp	#LR__3037
23a1c                 | LR__3049
23a1c     02 00 00 FF 
23a20     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23a24     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23a28     02 00 00 FF 
23a2c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23a30                 | LR__3050
23a30     A7 F0 03 F6 | 	mov	ptra, fp
23a34     B2 00 A0 FD | 	call	#popregs_
23a38                 | __system____getvfsforfile_ret
23a38     2D 00 64 FD | 	ret
23a3c                 | 
23a3c                 | __system___basic_open
23a3c     05 4A 05 F6 | 	mov	COUNT_, #5
23a40     A8 00 A0 FD | 	call	#pushregs_
23a44     0A 27 02 F6 | 	mov	local01, arg02
23a48     0B 29 02 F6 | 	mov	local02, arg03
23a4c     0C 2B 02 F6 | 	mov	local03, arg04
23a50     00 2C 06 F6 | 	mov	local04, #0
23a54     88 4A B0 FD | 	call	#__system____getftab
23a58     FD 2E 0A F6 | 	mov	local05, result1 wz
23a5c     18 00 90 5D |  if_ne	jmp	#LR__3060
23a60     EE 12 02 F6 | 	mov	arg01, abortchain
23a64     0C 14 06 F6 | 	mov	arg02, #12
23a68     01 16 06 F6 | 	mov	arg03, #1
23a6c     DA 00 A0 FD | 	call	#__longjmp
23a70     01 FA 65 F6 | 	neg	result1, #1
23a74     14 01 90 FD | 	jmp	#LR__3069
23a78                 | LR__3060
23a78     08 2E 06 F1 | 	add	local05, #8
23a7c     17 FB 09 FB | 	rdlong	result1, local05 wz
23a80     08 2E 86 F1 | 	sub	local05, #8
23a84     17 13 02 56 |  if_ne	mov	arg01, local05
23a88     A8 41 B0 5D |  if_ne	call	#__system___closeraw
23a8c     00 26 0E F2 | 	cmp	local01, #0 wz
23a90     00 28 0E A2 |  if_e	cmp	local02, #0 wz
23a94     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
23a98     3C 00 90 AD |  if_e	jmp	#LR__3062
23a9c     0C 12 06 F6 | 	mov	arg01, #12
23aa0     90 36 B0 FD | 	call	#__system___gc_alloc_managed
23aa4     FD 2C 0A F6 | 	mov	local04, result1 wz
23aa8     18 00 90 5D |  if_ne	jmp	#LR__3061
23aac     EE 12 02 F6 | 	mov	arg01, abortchain
23ab0     07 14 06 F6 | 	mov	arg02, #7
23ab4     01 16 06 F6 | 	mov	arg03, #1
23ab8     DA 00 A0 FD | 	call	#__longjmp
23abc     01 FA 65 F6 | 	neg	result1, #1
23ac0     C8 00 90 FD | 	jmp	#LR__3069
23ac4                 | LR__3061
23ac4     16 01 68 FC | 	wrlong	#0, local04
23ac8     04 2C 06 F1 | 	add	local04, #4
23acc     16 01 68 FC | 	wrlong	#0, local04
23ad0     04 2C 86 F1 | 	sub	local04, #4
23ad4     17 2D 62 FC | 	wrlong	local04, local05
23ad8                 | LR__3062
23ad8     00 26 0E F2 | 	cmp	local01, #0 wz
23adc     20 00 90 AD |  if_e	jmp	#LR__3063
23ae0     16 27 62 FC | 	wrlong	local01, local04
23ae4     16 FB 01 F6 | 	mov	result1, local04
23ae8     00 B8 04 FF 
23aec     00 FA 45 F5 | 	or	result1, ##158334976
23af0     1C 2E 06 F1 | 	add	local05, #28
23af4     17 FB 61 FC | 	wrlong	result1, local05
23af8     1C 2E 86 F1 | 	sub	local05, #28
23afc     0C 00 90 FD | 	jmp	#LR__3064
23b00                 | LR__3063
23b00     1C 2E 06 F1 | 	add	local05, #28
23b04     17 01 68 FC | 	wrlong	#0, local05
23b08     1C 2E 86 F1 | 	sub	local05, #28
23b0c                 | LR__3064
23b0c     00 28 0E F2 | 	cmp	local02, #0 wz
23b10     28 00 90 AD |  if_e	jmp	#LR__3065
23b14     04 2C 06 F1 | 	add	local04, #4
23b18     16 29 62 FC | 	wrlong	local02, local04
23b1c     04 2C 86 F1 | 	sub	local04, #4
23b20     16 FB 01 F6 | 	mov	result1, local04
23b24     00 C0 04 FF 
23b28     00 FA 45 F5 | 	or	result1, ##159383552
23b2c     20 2E 06 F1 | 	add	local05, #32
23b30     17 FB 61 FC | 	wrlong	result1, local05
23b34     20 2E 86 F1 | 	sub	local05, #32
23b38     0C 00 90 FD | 	jmp	#LR__3066
23b3c                 | LR__3065
23b3c     20 2E 06 F1 | 	add	local05, #32
23b40     17 01 68 FC | 	wrlong	#0, local05
23b44     20 2E 86 F1 | 	sub	local05, #32
23b48                 | LR__3066
23b48     00 2A 0E F2 | 	cmp	local03, #0 wz
23b4c     24 00 90 AD |  if_e	jmp	#LR__3067
23b50     08 2C 06 F1 | 	add	local04, #8
23b54     16 2B 62 FC | 	wrlong	local03, local04
23b58     08 2C 86 F1 | 	sub	local04, #8
23b5c     00 C8 04 FF 
23b60     00 2C 46 F5 | 	or	local04, ##160432128
23b64     24 2E 06 F1 | 	add	local05, #36
23b68     17 2D 62 FC | 	wrlong	local04, local05
23b6c     24 2E 86 F1 | 	sub	local05, #36
23b70     0C 00 90 FD | 	jmp	#LR__3068
23b74                 | LR__3067
23b74     24 2E 06 F1 | 	add	local05, #36
23b78     17 01 68 FC | 	wrlong	#0, local05
23b7c     24 2E 86 F1 | 	sub	local05, #36
23b80                 | LR__3068
23b80     08 2E 06 F1 | 	add	local05, #8
23b84     17 0F 68 FC | 	wrlong	#7, local05
23b88     00 FA 05 F6 | 	mov	result1, #0
23b8c                 | LR__3069
23b8c     A7 F0 03 F6 | 	mov	ptra, fp
23b90     B2 00 A0 FD | 	call	#popregs_
23b94                 | __system___basic_open_ret
23b94     2D 00 64 FD | 	ret
23b98                 | 
23b98                 | __system___basic_open_string
23b98     04 4A 05 F6 | 	mov	COUNT_, #4
23b9c     A8 00 A0 FD | 	call	#pushregs_
23ba0     0A 27 02 F6 | 	mov	local01, arg02
23ba4     0B 29 02 F6 | 	mov	local02, arg03
23ba8     34 49 B0 FD | 	call	#__system____getftab
23bac     FD 2A 0A F6 | 	mov	local03, result1 wz
23bb0     18 00 90 5D |  if_ne	jmp	#LR__3070
23bb4     EE 12 02 F6 | 	mov	arg01, abortchain
23bb8     0C 14 06 F6 | 	mov	arg02, #12
23bbc     01 16 06 F6 | 	mov	arg03, #1
23bc0     DA 00 A0 FD | 	call	#__longjmp
23bc4     01 FA 65 F6 | 	neg	result1, #1
23bc8     58 00 90 FD | 	jmp	#LR__3072
23bcc                 | LR__3070
23bcc     08 2A 06 F1 | 	add	local03, #8
23bd0     15 19 0A FB | 	rdlong	arg04, local03 wz
23bd4     08 2A 86 F1 | 	sub	local03, #8
23bd8     15 13 02 56 |  if_ne	mov	arg01, local03
23bdc     54 40 B0 5D |  if_ne	call	#__system___closeraw
23be0     13 15 02 F6 | 	mov	arg02, local01
23be4     14 17 02 F6 | 	mov	arg03, local02
23be8     15 13 02 F6 | 	mov	arg01, local03
23bec     B6 19 06 F6 | 	mov	arg04, #438
23bf0     3C 3D B0 FD | 	call	#__system___openraw
23bf4     FD 2C 02 F6 | 	mov	local04, result1
23bf8     00 2C 56 F2 | 	cmps	local04, #0 wc
23bfc     20 00 90 3D |  if_ae	jmp	#LR__3071
23c00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23c04     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
23c08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23c0c     EE 12 02 F6 | 	mov	arg01, abortchain
23c10     01 16 06 F6 | 	mov	arg03, #1
23c14     DA 00 A0 FD | 	call	#__longjmp
23c18     01 FA 65 F6 | 	neg	result1, #1
23c1c     04 00 90 FD | 	jmp	#LR__3072
23c20                 | LR__3071
23c20     16 FB 01 F6 | 	mov	result1, local04
23c24                 | LR__3072
23c24     A7 F0 03 F6 | 	mov	ptra, fp
23c28     B2 00 A0 FD | 	call	#popregs_
23c2c                 | __system___basic_open_string_ret
23c2c     2D 00 64 FD | 	ret
23c30                 | 
23c30                 | __system___basic_print_char
23c30     03 4A 05 F6 | 	mov	COUNT_, #3
23c34     A8 00 A0 FD | 	call	#pushregs_
23c38     0A 27 02 F6 | 	mov	local01, arg02
23c3c     F4 4F B0 FD | 	call	#__system___gettxfunc
23c40     FD 28 0A F6 | 	mov	local02, result1 wz
23c44     00 FA 05 A6 |  if_e	mov	result1, #0
23c48     30 00 90 AD |  if_e	jmp	#LR__3080
23c4c     14 2B 02 F6 | 	mov	local03, local02
23c50     13 28 46 F7 | 	zerox	local02, #19
23c54     14 2A 46 F0 | 	shr	local03, #20
23c58     02 2A 66 F0 | 	shl	local03, #2
23c5c     ED 2A 02 F1 | 	add	local03, __methods__
23c60     15 2B 02 FB | 	rdlong	local03, local03
23c64     13 13 02 F6 | 	mov	arg01, local01
23c68     F2 26 02 F6 | 	mov	local01, objptr
23c6c     14 E5 01 F6 | 	mov	objptr, local02
23c70     2D 2A 62 FD | 	call	local03
23c74     13 E5 01 F6 | 	mov	objptr, local01
23c78     01 FA 05 F6 | 	mov	result1, #1
23c7c                 | LR__3080
23c7c     A7 F0 03 F6 | 	mov	ptra, fp
23c80     B2 00 A0 FD | 	call	#popregs_
23c84                 | __system___basic_print_char_ret
23c84     2D 00 64 FD | 	ret
23c88                 | 
23c88                 | __system___basic_print_string
23c88     03 4A 05 F6 | 	mov	COUNT_, #3
23c8c     A8 00 A0 FD | 	call	#pushregs_
23c90     0A 27 02 F6 | 	mov	local01, arg02
23c94     0B 29 02 F6 | 	mov	local02, arg03
23c98     98 4F B0 FD | 	call	#__system___gettxfunc
23c9c     FD 2A 0A F6 | 	mov	local03, result1 wz
23ca0     00 FA 05 A6 |  if_e	mov	result1, #0
23ca4     18 00 90 AD |  if_e	jmp	#LR__3090
23ca8     00 26 0E F2 | 	cmp	local01, #0 wz
23cac     00 FA 05 A6 |  if_e	mov	result1, #0
23cb0     15 13 02 56 |  if_ne	mov	arg01, local03
23cb4     14 15 02 56 |  if_ne	mov	arg02, local02
23cb8     13 17 02 56 |  if_ne	mov	arg03, local01
23cbc     08 02 B0 5D |  if_ne	call	#__system___fmtstr
23cc0                 | LR__3090
23cc0     A7 F0 03 F6 | 	mov	ptra, fp
23cc4     B2 00 A0 FD | 	call	#popregs_
23cc8                 | __system___basic_print_string_ret
23cc8     2D 00 64 FD | 	ret
23ccc                 | 
23ccc                 | __system___basic_print_integer
23ccc     04 4A 05 F6 | 	mov	COUNT_, #4
23cd0     A8 00 A0 FD | 	call	#pushregs_
23cd4     0A 27 02 F6 | 	mov	local01, arg02
23cd8     0B 29 02 F6 | 	mov	local02, arg03
23cdc     0C 2B 02 F6 | 	mov	local03, arg04
23ce0     50 4F B0 FD | 	call	#__system___gettxfunc
23ce4     FD 2C 0A F6 | 	mov	local04, result1 wz
23ce8     00 FA 05 A6 |  if_e	mov	result1, #0
23cec     16 13 02 56 |  if_ne	mov	arg01, local04
23cf0     14 15 02 56 |  if_ne	mov	arg02, local02
23cf4     13 17 02 56 |  if_ne	mov	arg03, local01
23cf8     15 19 02 56 |  if_ne	mov	arg04, local03
23cfc     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
23d00     A7 F0 03 F6 | 	mov	ptra, fp
23d04     B2 00 A0 FD | 	call	#popregs_
23d08                 | __system___basic_print_integer_ret
23d08     2D 00 64 FD | 	ret
23d0c                 | 
23d0c                 | __system___basic_print_unsigned
23d0c     03 4A 05 F6 | 	mov	COUNT_, #3
23d10     A8 00 A0 FD | 	call	#pushregs_
23d14     0A 27 02 F6 | 	mov	local01, arg02
23d18     0B 29 02 F6 | 	mov	local02, arg03
23d1c     0C 2B 02 F6 | 	mov	local03, arg04
23d20     10 4F B0 FD | 	call	#__system___gettxfunc
23d24     FD 12 0A F6 | 	mov	arg01, result1 wz
23d28     00 FA 05 A6 |  if_e	mov	result1, #0
23d2c     3A 28 26 54 |  if_ne	bith	local02, #58
23d30     14 15 02 56 |  if_ne	mov	arg02, local02
23d34     13 17 02 56 |  if_ne	mov	arg03, local01
23d38     15 19 02 56 |  if_ne	mov	arg04, local03
23d3c     74 02 B0 5D |  if_ne	call	#__system___fmtnum
23d40     A7 F0 03 F6 | 	mov	ptra, fp
23d44     B2 00 A0 FD | 	call	#popregs_
23d48                 | __system___basic_print_unsigned_ret
23d48     2D 00 64 FD | 	ret
23d4c                 | 
23d4c                 | __system___basic_get_char
23d4c     03 4A 05 F6 | 	mov	COUNT_, #3
23d50     A8 00 A0 FD | 	call	#pushregs_
23d54     20 4F B0 FD | 	call	#__system___getrxfunc
23d58     FD 26 0A F6 | 	mov	local01, result1 wz
23d5c     01 FA 65 A6 |  if_e	neg	result1, #1
23d60     28 00 90 AD |  if_e	jmp	#LR__3100
23d64     13 29 02 F6 | 	mov	local02, local01
23d68     13 26 46 F7 | 	zerox	local01, #19
23d6c     14 28 46 F0 | 	shr	local02, #20
23d70     02 28 66 F0 | 	shl	local02, #2
23d74     ED 28 02 F1 | 	add	local02, __methods__
23d78     14 29 02 FB | 	rdlong	local02, local02
23d7c     F2 2A 02 F6 | 	mov	local03, objptr
23d80     13 E5 01 F6 | 	mov	objptr, local01
23d84     2D 28 62 FD | 	call	local02
23d88     15 E5 01 F6 | 	mov	objptr, local03
23d8c                 | LR__3100
23d8c     A7 F0 03 F6 | 	mov	ptra, fp
23d90     B2 00 A0 FD | 	call	#popregs_
23d94                 | __system___basic_get_char_ret
23d94     2D 00 64 FD | 	ret
23d98                 | 
23d98                 | __system___basic_put
23d98     04 4A 05 F6 | 	mov	COUNT_, #4
23d9c     A8 00 A0 FD | 	call	#pushregs_
23da0     0D 27 02 F6 | 	mov	local01, arg05
23da4     13 19 02 FD | 	qmul	arg04, local01
23da8     09 29 02 F6 | 	mov	local02, arg01
23dac     0B 2B 02 F6 | 	mov	local03, arg03
23db0     00 14 0E F2 | 	cmp	arg02, #0 wz
23db4     01 14 86 51 |  if_ne	sub	arg02, #1
23db8     14 13 02 56 |  if_ne	mov	arg01, local02
23dbc     00 16 06 56 |  if_ne	mov	arg03, #0
23dc0     18 2C 62 FD | 	getqx	local04
23dc4     60 45 B0 5D |  if_ne	call	#__system__lseek
23dc8     15 15 02 F6 | 	mov	arg02, local03
23dcc     16 17 02 F6 | 	mov	arg03, local04
23dd0     14 13 02 F6 | 	mov	arg01, local02
23dd4     9C 44 B0 FD | 	call	#__system__write
23dd8     FD 2C 02 F6 | 	mov	local04, result1
23ddc     01 2C 56 F2 | 	cmps	local04, #1 wc
23de0     10 00 90 CD |  if_b	jmp	#LR__3110
23de4     16 89 02 F6 | 	mov	muldiva_, local04
23de8     13 8B 02 F6 | 	mov	muldivb_, local01
23dec     BA 00 A0 FD | 	call	#divide_
23df0     45 2D 02 F6 | 	mov	local04, muldivb_
23df4                 | LR__3110
23df4     16 FB 01 F6 | 	mov	result1, local04
23df8     A7 F0 03 F6 | 	mov	ptra, fp
23dfc     B2 00 A0 FD | 	call	#popregs_
23e00                 | __system___basic_put_ret
23e00     2D 00 64 FD | 	ret
23e04                 | 
23e04                 | __system___basic_get
23e04     04 4A 05 F6 | 	mov	COUNT_, #4
23e08     A8 00 A0 FD | 	call	#pushregs_
23e0c     0D 27 02 F6 | 	mov	local01, arg05
23e10     13 19 02 FD | 	qmul	arg04, local01
23e14     09 29 02 F6 | 	mov	local02, arg01
23e18     0B 2B 02 F6 | 	mov	local03, arg03
23e1c     00 14 0E F2 | 	cmp	arg02, #0 wz
23e20     01 14 86 51 |  if_ne	sub	arg02, #1
23e24     14 13 02 56 |  if_ne	mov	arg01, local02
23e28     00 16 06 56 |  if_ne	mov	arg03, #0
23e2c     18 2C 62 FD | 	getqx	local04
23e30     F4 44 B0 5D |  if_ne	call	#__system__lseek
23e34     15 15 02 F6 | 	mov	arg02, local03
23e38     16 17 02 F6 | 	mov	arg03, local04
23e3c     14 13 02 F6 | 	mov	arg01, local02
23e40     6C 44 B0 FD | 	call	#__system__read
23e44     FD 2C 02 F6 | 	mov	local04, result1
23e48     01 2C 56 F2 | 	cmps	local04, #1 wc
23e4c     10 00 90 CD |  if_b	jmp	#LR__3120
23e50     16 89 02 F6 | 	mov	muldiva_, local04
23e54     13 8B 02 F6 | 	mov	muldivb_, local01
23e58     BA 00 A0 FD | 	call	#divide_
23e5c     45 2D 02 F6 | 	mov	local04, muldivb_
23e60                 | LR__3120
23e60     16 FB 01 F6 | 	mov	result1, local04
23e64     A7 F0 03 F6 | 	mov	ptra, fp
23e68     B2 00 A0 FD | 	call	#popregs_
23e6c                 | __system___basic_get_ret
23e6c     2D 00 64 FD | 	ret
23e70                 | 
23e70                 | __system___fmtchar
23e70     00 4A 05 F6 | 	mov	COUNT_, #0
23e74     A8 00 A0 FD | 	call	#pushregs_
23e78     10 F0 07 F1 | 	add	ptra, #16
23e7c     04 4E 05 F1 | 	add	fp, #4
23e80     A7 12 62 FC | 	wrlong	arg01, fp
23e84     04 4E 05 F1 | 	add	fp, #4
23e88     A7 14 62 FC | 	wrlong	arg02, fp
23e8c     04 4E 05 F1 | 	add	fp, #4
23e90     A7 16 62 FC | 	wrlong	arg03, fp
23e94     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
23e98     A7 16 62 FC | 	wrlong	arg03, fp
23e9c     08 4E 85 F1 | 	sub	fp, #8
23ea0     A7 12 02 FB | 	rdlong	arg01, fp
23ea4     04 4E 05 F1 | 	add	fp, #4
23ea8     A7 14 02 FB | 	rdlong	arg02, fp
23eac     04 4E 05 F1 | 	add	fp, #4
23eb0     A7 16 02 F6 | 	mov	arg03, fp
23eb4     0C 4E 85 F1 | 	sub	fp, #12
23eb8     0C 00 B0 FD | 	call	#__system___fmtstr
23ebc     A7 F0 03 F6 | 	mov	ptra, fp
23ec0     B2 00 A0 FD | 	call	#popregs_
23ec4                 | __system___fmtchar_ret
23ec4     2D 00 64 FD | 	ret
23ec8                 | 
23ec8                 | __system___fmtstr
23ec8     09 4A 05 F6 | 	mov	COUNT_, #9
23ecc     A8 00 A0 FD | 	call	#pushregs_
23ed0     09 27 02 F6 | 	mov	local01, arg01
23ed4     0A 29 02 F6 | 	mov	local02, arg02
23ed8     0B 2B 02 F6 | 	mov	local03, arg03
23edc     14 19 E2 F8 | 	getbyte	arg04, local02, #0
23ee0     15 13 02 F6 | 	mov	arg01, local03
23ee4     09 2D 02 F6 | 	mov	local04, arg01
23ee8     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
23eec                 | LR__3130
23eec     16 FB C9 FA | 	rdbyte	result1, local04 wz
23ef0     01 2C 06 51 |  if_ne	add	local04, #1
23ef4     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
23ef8                 | LR__3131
23ef8     09 2D 82 F1 | 	sub	local04, arg01
23efc     00 18 0E F2 | 	cmp	arg04, #0 wz
23f00     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
23f04     14 15 02 F6 | 	mov	arg02, local02
23f08     16 17 02 F6 | 	mov	arg03, local04
23f0c     13 13 02 F6 | 	mov	arg01, local01
23f10     02 18 06 F6 | 	mov	arg04, #2
23f14     BC 49 B0 FD | 	call	#__system___fmtpad
23f18     FD 2E 02 F6 | 	mov	local05, result1
23f1c     00 2E 56 F2 | 	cmps	local05, #0 wc
23f20     17 FB 01 C6 |  if_b	mov	result1, local05
23f24     80 00 90 CD |  if_b	jmp	#LR__3134
23f28     01 2C 56 F2 | 	cmps	local04, #1 wc
23f2c     50 00 90 CD |  if_b	jmp	#LR__3133
23f30     16 31 02 F6 | 	mov	local06, local04
23f34                 | LR__3132
23f34     13 33 02 F6 | 	mov	local07, local01
23f38     13 35 02 F6 | 	mov	local08, local01
23f3c     13 32 46 F7 | 	zerox	local07, #19
23f40     14 34 46 F0 | 	shr	local08, #20
23f44     02 34 66 F0 | 	shl	local08, #2
23f48     ED 34 02 F1 | 	add	local08, __methods__
23f4c     1A 35 02 FB | 	rdlong	local08, local08
23f50     15 13 C2 FA | 	rdbyte	arg01, local03
23f54     F2 36 02 F6 | 	mov	local09, objptr
23f58     19 E5 01 F6 | 	mov	objptr, local07
23f5c     01 2A 06 F1 | 	add	local03, #1
23f60     2D 34 62 FD | 	call	local08
23f64     1B E5 01 F6 | 	mov	objptr, local09
23f68     FD 36 02 F6 | 	mov	local09, result1
23f6c     00 36 56 F2 | 	cmps	local09, #0 wc
23f70     1B FB 01 C6 |  if_b	mov	result1, local09
23f74     30 00 90 CD |  if_b	jmp	#LR__3134
23f78     1B 2F 02 F1 | 	add	local05, local09
23f7c     ED 31 6E FB | 	djnz	local06, #LR__3132
23f80                 | LR__3133
23f80     14 15 02 F6 | 	mov	arg02, local02
23f84     16 17 02 F6 | 	mov	arg03, local04
23f88     13 13 02 F6 | 	mov	arg01, local01
23f8c     01 18 06 F6 | 	mov	arg04, #1
23f90     40 49 B0 FD | 	call	#__system___fmtpad
23f94     FD 36 02 F6 | 	mov	local09, result1
23f98     00 36 56 F2 | 	cmps	local09, #0 wc
23f9c     1B FB 01 C6 |  if_b	mov	result1, local09
23fa0     1B 2F 02 31 |  if_ae	add	local05, local09
23fa4     17 FB 01 36 |  if_ae	mov	result1, local05
23fa8                 | LR__3134
23fa8     A7 F0 03 F6 | 	mov	ptra, fp
23fac     B2 00 A0 FD | 	call	#popregs_
23fb0                 | __system___fmtstr_ret
23fb0     2D 00 64 FD | 	ret
23fb4                 | 
23fb4                 | __system___fmtnum
23fb4     0B 4A 05 F6 | 	mov	COUNT_, #11
23fb8     A8 00 A0 FD | 	call	#pushregs_
23fbc     09 27 02 F6 | 	mov	local01, arg01
23fc0     0A 29 02 F6 | 	mov	local02, arg02
23fc4     0B 2B 02 F6 | 	mov	local03, arg03
23fc8     0C 2D 02 F6 | 	mov	local04, arg04
23fcc     F8 2F 02 F6 | 	mov	local05, ptra
23fd0     17 31 02 F6 | 	mov	local06, local05
23fd4     00 32 06 F6 | 	mov	local07, #0
23fd8     14 35 02 F6 | 	mov	local08, local02
23fdc     10 34 46 F0 | 	shr	local08, #16
23fe0     3F 34 06 F5 | 	and	local08, #63
23fe4     14 37 E2 F8 | 	getbyte	local09, local02, #0
23fe8     14 39 02 F6 | 	mov	local10, local02
23fec     1A 38 46 F0 | 	shr	local10, #26
23ff0     03 38 06 F5 | 	and	local10, #3
23ff4     1C 3B 02 F6 | 	mov	local11, local10
23ff8     01 34 56 F2 | 	cmps	local08, #1 wc
23ffc     44 F0 07 F1 | 	add	ptra, #68
24000     01 34 86 31 |  if_ae	sub	local08, #1
24004     41 36 56 F2 | 	cmps	local09, #65 wc
24008     00 36 0E C2 |  if_b	cmp	local09, #0 wz
2400c     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
24010     03 3A 0E F2 | 	cmp	local11, #3 wz
24014     00 3A 06 A6 |  if_e	mov	local11, #0
24018     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
2401c     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
24020     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
24024     00 3A 0E F2 | 	cmp	local11, #0 wz
24028     4C 00 90 AD |  if_e	jmp	#LR__3143
2402c     01 32 06 F6 | 	mov	local07, #1
24030     1B 35 0A F2 | 	cmp	local08, local09 wz
24034     18 00 90 5D |  if_ne	jmp	#LR__3141
24038     05 34 6E FB | 	djnz	local08, #LR__3140
2403c     13 13 02 F6 | 	mov	arg01, local01
24040     14 15 02 F6 | 	mov	arg02, local02
24044     23 16 06 F6 | 	mov	arg03, #35
24048     24 FE BF FD | 	call	#__system___fmtchar
2404c     88 00 90 FD | 	jmp	#LR__3147
24050                 | LR__3140
24050                 | LR__3141
24050     02 3A 0E F2 | 	cmp	local11, #2 wz
24054     18 39 02 A6 |  if_e	mov	local10, local06
24058     01 30 06 A1 |  if_e	add	local06, #1
2405c     1C 41 48 AC |  if_e	wrbyte	#32, local10
24060     14 00 90 AD |  if_e	jmp	#LR__3142
24064     04 3A 0E F2 | 	cmp	local11, #4 wz
24068     18 5B 48 AC |  if_e	wrbyte	#45, local06
2406c     01 30 06 A1 |  if_e	add	local06, #1
24070     18 57 48 5C |  if_ne	wrbyte	#43, local06
24074     01 30 06 51 |  if_ne	add	local06, #1
24078                 | LR__3142
24078                 | LR__3143
24078     18 13 02 F6 | 	mov	arg01, local06
2407c     15 15 02 F6 | 	mov	arg02, local03
24080     16 17 02 F6 | 	mov	arg03, local04
24084     1A 19 02 F6 | 	mov	arg04, local08
24088     00 1A 06 F6 | 	mov	arg05, #0
2408c     1D 28 2E F4 | 	testbn	local02, #29 wz
24090     01 1A 06 56 |  if_ne	mov	arg05, #1
24094     04 49 B0 FD | 	call	#__system___uitoa
24098     FD 32 02 F1 | 	add	local07, result1
2409c     1B 33 5A F2 | 	cmps	local07, local09 wcz
240a0     24 00 90 ED |  if_be	jmp	#LR__3146
240a4     97 0E 48 FB | 	callpa	#(@LR__3145-@LR__3144)>>2,fcache_load_ptr_
240a8                 | LR__3144
240a8     1B 39 02 F6 | 	mov	local10, local09
240ac     01 38 56 F2 | 	cmps	local10, #1 wc
240b0     01 36 86 F1 | 	sub	local09, #1
240b4     18 39 02 36 |  if_ae	mov	local10, local06
240b8     01 30 06 31 |  if_ae	add	local06, #1
240bc     1C 47 48 3C |  if_ae	wrbyte	#35, local10
240c0     E4 FF 9F 3D |  if_ae	jmp	#LR__3144
240c4                 | LR__3145
240c4     18 01 48 FC | 	wrbyte	#0, local06
240c8                 | LR__3146
240c8     13 13 02 F6 | 	mov	arg01, local01
240cc     14 15 02 F6 | 	mov	arg02, local02
240d0     17 17 02 F6 | 	mov	arg03, local05
240d4     F0 FD BF FD | 	call	#__system___fmtstr
240d8                 | LR__3147
240d8     A7 F0 03 F6 | 	mov	ptra, fp
240dc     B2 00 A0 FD | 	call	#popregs_
240e0                 | __system___fmtnum_ret
240e0     2D 00 64 FD | 	ret
240e4                 | 
240e4                 | __system___fmtfloat
240e4     10 4A 05 F6 | 	mov	COUNT_, #16
240e8     A8 00 A0 FD | 	call	#pushregs_
240ec     24 F1 07 F1 | 	add	ptra, #292
240f0     04 4E 05 F1 | 	add	fp, #4
240f4     A7 12 62 FC | 	wrlong	arg01, fp
240f8     04 4E 05 F1 | 	add	fp, #4
240fc     A7 14 62 FC | 	wrlong	arg02, fp
24100     04 4E 05 F1 | 	add	fp, #4
24104     A7 16 62 FC | 	wrlong	arg03, fp
24108     04 4E 05 F1 | 	add	fp, #4
2410c     A7 18 62 FC | 	wrlong	arg04, fp
24110     0C 4E 05 F1 | 	add	fp, #12
24114     A7 14 68 FC | 	wrlong	#10, fp
24118     08 4E 05 F1 | 	add	fp, #8
2411c     A7 00 68 FC | 	wrlong	#0, fp
24120     08 4E 05 F1 | 	add	fp, #8
24124     A7 00 68 FC | 	wrlong	#0, fp
24128     08 4E 05 F1 | 	add	fp, #8
2412c     A7 00 68 FC | 	wrlong	#0, fp
24130     04 4E 05 F1 | 	add	fp, #4
24134     A7 04 68 FC | 	wrlong	#2, fp
24138     04 4E 05 F1 | 	add	fp, #4
2413c     A7 00 68 FC | 	wrlong	#0, fp
24140     04 4E 05 F1 | 	add	fp, #4
24144     A7 00 68 FC | 	wrlong	#0, fp
24148     04 4E 05 F1 | 	add	fp, #4
2414c     A7 00 68 FC | 	wrlong	#0, fp
24150     04 4E 05 F1 | 	add	fp, #4
24154     A7 00 68 FC | 	wrlong	#0, fp
24158     18 4E 05 F1 | 	add	fp, #24
2415c     A7 00 68 FC | 	wrlong	#0, fp
24160     68 4E 05 F1 | 	add	fp, #104
24164     A7 26 02 F6 | 	mov	local01, fp
24168     08 4E 85 F1 | 	sub	fp, #8
2416c     A7 26 62 FC | 	wrlong	local01, fp
24170     04 4E 05 F1 | 	add	fp, #4
24174     A7 26 62 FC | 	wrlong	local01, fp
24178     BC 4E 85 F1 | 	sub	fp, #188
2417c     A7 26 02 FB | 	rdlong	local01, fp
24180     10 26 46 F0 | 	shr	local01, #16
24184     3F 26 06 F5 | 	and	local01, #63
24188     B0 4E 05 F1 | 	add	fp, #176
2418c     A7 26 62 FC | 	wrlong	local01, fp
24190     B0 4E 85 F1 | 	sub	fp, #176
24194     A7 26 02 FB | 	rdlong	local01, fp
24198     1C 26 46 F0 | 	shr	local01, #28
2419c     01 26 06 F5 | 	and	local01, #1
241a0     08 4F 05 F1 | 	add	fp, #264
241a4     A7 26 62 FC | 	wrlong	local01, fp
241a8     58 4E 85 F1 | 	sub	fp, #88
241ac     A7 26 0A FB | 	rdlong	local01, fp wz
241b0     B8 4E 85 F1 | 	sub	fp, #184
241b4     3C 00 90 5D |  if_ne	jmp	#LR__3151
241b8     10 4E 05 F1 | 	add	fp, #16
241bc     A7 26 02 FB | 	rdlong	local01, fp
241c0     10 4E 85 F1 | 	sub	fp, #16
241c4     61 26 0E F2 | 	cmp	local01, #97 wz
241c8     18 00 90 5D |  if_ne	jmp	#LR__3150
241cc     B8 4E 05 F1 | 	add	fp, #184
241d0     A7 1A 68 FC | 	wrlong	#13, fp
241d4     84 4E 85 F1 | 	sub	fp, #132
241d8     A7 02 68 FC | 	wrlong	#1, fp
241dc     34 4E 85 F1 | 	sub	fp, #52
241e0     24 00 90 FD | 	jmp	#LR__3152
241e4                 | LR__3150
241e4     B8 4E 05 F1 | 	add	fp, #184
241e8     A7 0C 68 FC | 	wrlong	#6, fp
241ec     B8 4E 85 F1 | 	sub	fp, #184
241f0     14 00 90 FD | 	jmp	#LR__3152
241f4                 | LR__3151
241f4     B8 4E 05 F1 | 	add	fp, #184
241f8     A7 26 02 FB | 	rdlong	local01, fp
241fc     01 26 86 F1 | 	sub	local01, #1
24200     A7 26 62 FC | 	wrlong	local01, fp
24204     B8 4E 85 F1 | 	sub	fp, #184
24208                 | LR__3152
24208     08 4E 05 F1 | 	add	fp, #8
2420c     A7 26 02 FB | 	rdlong	local01, fp
24210     16 26 46 F0 | 	shr	local01, #22
24214     03 26 06 F5 | 	and	local01, #3
24218     04 4F 05 F1 | 	add	fp, #260
2421c     A7 26 62 FC | 	wrlong	local01, fp
24220     04 4F 85 F1 | 	sub	fp, #260
24224     A7 26 02 FB | 	rdlong	local01, fp
24228     1D 26 46 F0 | 	shr	local01, #29
2422c     01 26 06 F5 | 	and	local01, #1
24230     B4 4E 05 F1 | 	add	fp, #180
24234     A7 26 62 FC | 	wrlong	local01, fp
24238     B4 4E 85 F1 | 	sub	fp, #180
2423c     A7 26 02 FB | 	rdlong	local01, fp
24240     13 27 EA F8 | 	getbyte	local01, local01, #1
24244     60 4E 05 F1 | 	add	fp, #96
24248     A7 26 62 FC | 	wrlong	local01, fp
2424c     60 4E 85 F1 | 	sub	fp, #96
24250     A7 26 02 FB | 	rdlong	local01, fp
24254     13 27 E2 F8 | 	getbyte	local01, local01, #0
24258     64 4E 05 F1 | 	add	fp, #100
2425c     A7 26 62 FC | 	wrlong	local01, fp
24260     00 26 06 F6 | 	mov	local01, #0
24264     5C 4E 85 F1 | 	sub	fp, #92
24268     A7 1A 02 FB | 	rdlong	arg05, fp
2426c     65 1A 0E F2 | 	cmp	arg05, #101 wz
24270     01 26 06 A6 |  if_e	mov	local01, #1
24274     14 4E 05 F1 | 	add	fp, #20
24278     A7 26 62 FC | 	wrlong	local01, fp
2427c     98 4E 05 F1 | 	add	fp, #152
24280     A7 28 0A FB | 	rdlong	local02, fp wz
24284     45 26 06 56 |  if_ne	mov	local01, #69
24288     65 26 06 A6 |  if_e	mov	local01, #101
2428c     8C 4E 85 F1 | 	sub	fp, #140
24290     A7 26 62 FC | 	wrlong	local01, fp
24294     20 4E 85 F1 | 	sub	fp, #32
24298     A7 26 02 FB | 	rdlong	local01, fp
2429c     10 4E 85 F1 | 	sub	fp, #16
242a0     61 26 0E F2 | 	cmp	local01, #97 wz
242a4     4C 00 90 5D |  if_ne	jmp	#LR__3153
242a8     24 4E 05 F1 | 	add	fp, #36
242ac     A7 02 68 FC | 	wrlong	#1, fp
242b0     98 4E 05 F1 | 	add	fp, #152
242b4     A7 28 0A FB | 	rdlong	local02, fp wz
242b8     50 26 06 56 |  if_ne	mov	local01, #80
242bc     70 26 06 A6 |  if_e	mov	local01, #112
242c0     8C 4E 85 F1 | 	sub	fp, #140
242c4     A7 26 62 FC | 	wrlong	local01, fp
242c8     14 4E 85 F1 | 	sub	fp, #20
242cc     A7 04 68 FC | 	wrlong	#2, fp
242d0     1C 4E 05 F1 | 	add	fp, #28
242d4     A7 02 68 FC | 	wrlong	#1, fp
242d8     84 4E 05 F1 | 	add	fp, #132
242dc     A7 28 0A FB | 	rdlong	local02, fp wz
242e0     58 26 06 56 |  if_ne	mov	local01, #88
242e4     78 26 06 A6 |  if_e	mov	local01, #120
242e8     7C 4E 85 F1 | 	sub	fp, #124
242ec     A7 26 62 FC | 	wrlong	local01, fp
242f0     40 4E 85 F1 | 	sub	fp, #64
242f4                 | LR__3153
242f4     10 4E 05 F1 | 	add	fp, #16
242f8     A7 26 02 FB | 	rdlong	local01, fp
242fc     10 4E 85 F1 | 	sub	fp, #16
24300     23 26 0E F2 | 	cmp	local01, #35 wz
24304     3C 00 90 5D |  if_ne	jmp	#LR__3156
24308     48 4E 05 F1 | 	add	fp, #72
2430c     A7 02 68 FC | 	wrlong	#1, fp
24310     C8 4E 05 F1 | 	add	fp, #200
24314     A7 26 0A FB | 	rdlong	local01, fp wz
24318     10 4F 85 F1 | 	sub	fp, #272
2431c     18 00 90 AD |  if_e	jmp	#LR__3154
24320     10 4E 05 F1 | 	add	fp, #16
24324     A7 CC 68 FC | 	wrlong	#102, fp
24328     00 4F 05 F1 | 	add	fp, #256
2432c     A7 00 68 FC | 	wrlong	#0, fp
24330     10 4F 85 F1 | 	sub	fp, #272
24334     0C 00 90 FD | 	jmp	#LR__3155
24338                 | LR__3154
24338     10 4F 05 F1 | 	add	fp, #272
2433c     A7 02 68 FC | 	wrlong	#1, fp
24340     10 4F 85 F1 | 	sub	fp, #272
24344                 | LR__3155
24344                 | LR__3156
24344     08 4E 05 F1 | 	add	fp, #8
24348     A7 26 02 FB | 	rdlong	local01, fp
2434c     1A 26 46 F0 | 	shr	local01, #26
24350     03 26 06 F5 | 	and	local01, #3
24354     5C 4E 05 F1 | 	add	fp, #92
24358     A7 26 62 FC | 	wrlong	local01, fp
2435c     58 4E 85 F1 | 	sub	fp, #88
24360     A7 FA 01 FB | 	rdlong	result1, fp
24364     0C 4E 85 F1 | 	sub	fp, #12
24368     1F FA 4D F0 | 	shr	result1, #31 wz
2436c     20 00 90 AD |  if_e	jmp	#LR__3157
24370     2C 4E 05 F1 | 	add	fp, #44
24374     A7 5A 68 FC | 	wrlong	#45, fp
24378     20 4E 85 F1 | 	sub	fp, #32
2437c     A7 FA 01 FB | 	rdlong	result1, fp
24380     1F FA E5 F4 | 	bitnot	result1, #31
24384     A7 FA 61 FC | 	wrlong	result1, fp
24388     0C 4E 85 F1 | 	sub	fp, #12
2438c     3C 00 90 FD | 	jmp	#LR__3159
24390                 | LR__3157
24390     64 4E 05 F1 | 	add	fp, #100
24394     A7 26 02 FB | 	rdlong	local01, fp
24398     64 4E 85 F1 | 	sub	fp, #100
2439c     01 26 0E F2 | 	cmp	local01, #1 wz
243a0     2C 4E 05 A1 |  if_e	add	fp, #44
243a4     A7 56 68 AC |  if_e	wrlong	#43, fp
243a8     2C 4E 85 A1 |  if_e	sub	fp, #44
243ac     1C 00 90 AD |  if_e	jmp	#LR__3158
243b0     64 4E 05 F1 | 	add	fp, #100
243b4     A7 26 02 FB | 	rdlong	local01, fp
243b8     64 4E 85 F1 | 	sub	fp, #100
243bc     02 26 0E F2 | 	cmp	local01, #2 wz
243c0     2C 4E 05 A1 |  if_e	add	fp, #44
243c4     A7 40 68 AC |  if_e	wrlong	#32, fp
243c8     2C 4E 85 A1 |  if_e	sub	fp, #44
243cc                 | LR__3158
243cc                 | LR__3159
243cc     08 4E 05 F1 | 	add	fp, #8
243d0     A7 26 02 FB | 	rdlong	local01, fp
243d4     18 26 46 F0 | 	shr	local01, #24
243d8     03 26 06 F5 | 	and	local01, #3
243dc     3C 4E 05 F1 | 	add	fp, #60
243e0     A7 26 62 FC | 	wrlong	local01, fp
243e4     00 26 06 F6 | 	mov	local01, #0
243e8     18 4E 85 F1 | 	sub	fp, #24
243ec     A7 2A 0A FB | 	rdlong	local03, fp wz
243f0     2C 4E 85 F1 | 	sub	fp, #44
243f4     18 00 90 5D |  if_ne	jmp	#LR__3160
243f8     1C 4E 05 F1 | 	add	fp, #28
243fc     A7 2C 02 FB | 	rdlong	local04, fp
24400     1C 4E 85 F1 | 	sub	fp, #28
24404     16 2F 02 F6 | 	mov	local05, local04
24408     0A 2E 0E F2 | 	cmp	local05, #10 wz
2440c     04 00 90 AD |  if_e	jmp	#LR__3161
24410                 | LR__3160
24410     01 26 66 F5 | 	xor	local01, #1
24414                 | LR__3161
24414     3C 4E 05 F1 | 	add	fp, #60
24418     A7 26 62 FC | 	wrlong	local01, fp
2441c     3C 4E 85 F1 | 	sub	fp, #60
24420     00 26 0E F2 | 	cmp	local01, #0 wz
24424     0C 01 90 AD |  if_e	jmp	#LR__3163
24428     44 4E 05 F1 | 	add	fp, #68
2442c     A7 2E 02 FB | 	rdlong	local05, fp
24430     44 4E 85 F1 | 	sub	fp, #68
24434     17 2B 02 F6 | 	mov	local03, local05
24438     02 2A 0E F2 | 	cmp	local03, #2 wz
2443c     F4 00 90 5D |  if_ne	jmp	#LR__3163
24440     0C 4F 05 F1 | 	add	fp, #268
24444     A7 30 02 FB | 	rdlong	local06, fp
24448     0C 4F 85 F1 | 	sub	fp, #268
2444c     18 2D 02 F6 | 	mov	local04, local06
24450     02 2C 0E F2 | 	cmp	local04, #2 wz
24454     DC 00 90 AD |  if_e	jmp	#LR__3163
24458     C0 4E 05 F1 | 	add	fp, #192
2445c     A7 12 02 FB | 	rdlong	arg01, fp
24460     94 4E 85 F1 | 	sub	fp, #148
24464     A7 14 02 FB | 	rdlong	arg02, fp
24468     14 4E 05 F1 | 	add	fp, #20
2446c     A7 16 02 FB | 	rdlong	arg03, fp
24470     40 4E 85 F1 | 	sub	fp, #64
24474     8C 47 B0 FD | 	call	#__system__emitsign_0518
24478     14 4F 05 F1 | 	add	fp, #276
2447c     A7 FA 61 FC | 	wrlong	result1, fp
24480     14 4F 85 F1 | 	sub	fp, #276
24484     00 FA 55 F2 | 	cmps	result1, #0 wc
24488     14 4F 05 C1 |  if_b	add	fp, #276
2448c     A7 FA 01 CB |  if_b	rdlong	result1, fp
24490     14 4F 85 C1 |  if_b	sub	fp, #276
24494     6C 0B 90 CD |  if_b	jmp	#LR__3213
24498     C0 4E 05 F1 | 	add	fp, #192
2449c     A7 26 02 FB | 	rdlong	local01, fp
244a0     54 4E 05 F1 | 	add	fp, #84
244a4     A7 2E 02 FB | 	rdlong	local05, fp
244a8     17 2B 02 F6 | 	mov	local03, local05
244ac     17 27 02 F1 | 	add	local01, local05
244b0     54 4E 85 F1 | 	sub	fp, #84
244b4     A7 26 62 FC | 	wrlong	local01, fp
244b8     58 4E 85 F1 | 	sub	fp, #88
244bc     A7 26 0A FB | 	rdlong	local01, fp wz
244c0     68 4E 85 F1 | 	sub	fp, #104
244c4     60 00 90 AD |  if_e	jmp	#LR__3162
244c8     68 4E 05 F1 | 	add	fp, #104
244cc     A7 26 02 FB | 	rdlong	local01, fp
244d0     AC 4E 05 F1 | 	add	fp, #172
244d4     A7 2A 02 FB | 	rdlong	local03, fp
244d8     15 27 82 F1 | 	sub	local01, local03
244dc     AC 4E 85 F1 | 	sub	fp, #172
244e0     A7 26 62 FC | 	wrlong	local01, fp
244e4     68 4E 85 F1 | 	sub	fp, #104
244e8     00 26 56 F2 | 	cmps	local01, #0 wc
244ec     68 4E 05 C1 |  if_b	add	fp, #104
244f0     A7 00 68 CC |  if_b	wrlong	#0, fp
244f4     68 4E 85 C1 |  if_b	sub	fp, #104
244f8     08 4E 05 F1 | 	add	fp, #8
244fc     A7 26 02 FB | 	rdlong	local01, fp
24500     E8 26 06 F4 | 	bitl	local01, #232
24504     A7 26 62 FC | 	wrlong	local01, fp
24508     60 4E 05 F1 | 	add	fp, #96
2450c     A7 2E 02 FB | 	rdlong	local05, fp
24510     17 2B 02 F6 | 	mov	local03, local05
24514     08 2A 66 F0 | 	shl	local03, #8
24518     15 27 42 F5 | 	or	local01, local03
2451c     60 4E 85 F1 | 	sub	fp, #96
24520     A7 26 62 FC | 	wrlong	local01, fp
24524     08 4E 85 F1 | 	sub	fp, #8
24528                 | LR__3162
24528     3C 4E 05 F1 | 	add	fp, #60
2452c     A7 00 68 FC | 	wrlong	#0, fp
24530     3C 4E 85 F1 | 	sub	fp, #60
24534                 | LR__3163
24534     0C 4E 05 F1 | 	add	fp, #12
24538     A7 12 02 FB | 	rdlong	arg01, fp
2453c     0C 4E 85 F1 | 	sub	fp, #12
24540     EC 21 B0 FD | 	call	#__system____builtin_ilogb
24544     FF FF 3F FF 
24548     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
2454c     50 00 90 5D |  if_ne	jmp	#LR__3165
24550     2C 4E 05 F1 | 	add	fp, #44
24554     A7 26 0A FB | 	rdlong	local01, fp wz
24558     2C 4E 85 F1 | 	sub	fp, #44
2455c     24 00 90 AD |  if_e	jmp	#LR__3164
24560     C0 4E 05 F1 | 	add	fp, #192
24564     A7 28 02 FB | 	rdlong	local02, fp
24568     14 2B 02 F6 | 	mov	local03, local02
2456c     01 2A 06 F1 | 	add	local03, #1
24570     A7 2A 62 FC | 	wrlong	local03, fp
24574     94 4E 85 F1 | 	sub	fp, #148
24578     A7 2C 02 FB | 	rdlong	local04, fp
2457c     2C 4E 85 F1 | 	sub	fp, #44
24580     14 2D 42 FC | 	wrbyte	local04, local02
24584                 | LR__3164
24584     C0 4E 05 F1 | 	add	fp, #192
24588     A7 12 02 FB | 	rdlong	arg01, fp
2458c     C0 4E 85 F1 | 	sub	fp, #192
24590     95 01 00 FF 
24594     A2 14 06 F6 | 	mov	arg02, ##@LR__5161
24598     AC E9 BF FD | 	call	#__system____builtin_strcpy
2459c     A4 08 90 FD | 	jmp	#LR__3201
245a0                 | LR__3165
245a0     0C 4E 05 F1 | 	add	fp, #12
245a4     A7 28 02 FB | 	rdlong	local02, fp
245a8     0C 4E 85 F1 | 	sub	fp, #12
245ac     14 13 02 F6 | 	mov	arg01, local02
245b0     7C 21 B0 FD | 	call	#__system____builtin_ilogb
245b4     00 00 40 FF 
245b8     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
245bc     50 00 90 5D |  if_ne	jmp	#LR__3167
245c0     2C 4E 05 F1 | 	add	fp, #44
245c4     A7 26 0A FB | 	rdlong	local01, fp wz
245c8     2C 4E 85 F1 | 	sub	fp, #44
245cc     24 00 90 AD |  if_e	jmp	#LR__3166
245d0     C0 4E 05 F1 | 	add	fp, #192
245d4     A7 28 02 FB | 	rdlong	local02, fp
245d8     14 2B 02 F6 | 	mov	local03, local02
245dc     01 2A 06 F1 | 	add	local03, #1
245e0     A7 2A 62 FC | 	wrlong	local03, fp
245e4     94 4E 85 F1 | 	sub	fp, #148
245e8     A7 2C 02 FB | 	rdlong	local04, fp
245ec     2C 4E 85 F1 | 	sub	fp, #44
245f0     14 2D 42 FC | 	wrbyte	local04, local02
245f4                 | LR__3166
245f4     C0 4E 05 F1 | 	add	fp, #192
245f8     A7 12 02 FB | 	rdlong	arg01, fp
245fc     C0 4E 85 F1 | 	sub	fp, #192
24600     95 01 00 FF 
24604     A6 14 06 F6 | 	mov	arg02, ##@LR__5162
24608     3C E9 BF FD | 	call	#__system____builtin_strcpy
2460c     34 08 90 FD | 	jmp	#LR__3201
24610                 | LR__3167
24610     10 4E 05 F1 | 	add	fp, #16
24614     A7 26 02 FB | 	rdlong	local01, fp
24618     10 4E 85 F1 | 	sub	fp, #16
2461c     67 26 0E F2 | 	cmp	local01, #103 wz
24620     10 4E 05 51 |  if_ne	add	fp, #16
24624     A7 2A 02 5B |  if_ne	rdlong	local03, fp
24628     10 4E 85 51 |  if_ne	sub	fp, #16
2462c     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
24630     94 01 90 5D |  if_ne	jmp	#LR__3172
24634     0C 4E 05 F1 | 	add	fp, #12
24638     A7 12 02 FB | 	rdlong	arg01, fp
2463c     08 4E 05 F1 | 	add	fp, #8
24640     A7 14 02 F6 | 	mov	arg02, fp
24644     0C 4E 05 F1 | 	add	fp, #12
24648     A7 16 02 F6 | 	mov	arg03, fp
2464c     98 4E 05 F1 | 	add	fp, #152
24650     A7 18 02 FB | 	rdlong	arg04, fp
24654     9C 4E 85 F1 | 	sub	fp, #156
24658     A7 1A 02 FB | 	rdlong	arg05, fp
2465c     1C 4E 85 F1 | 	sub	fp, #28
24660     AC 43 B0 FD | 	call	#__system__disassemble_0516
24664     10 4E 05 F1 | 	add	fp, #16
24668     A7 26 02 FB | 	rdlong	local01, fp
2466c     10 4E 85 F1 | 	sub	fp, #16
24670     23 26 0E F2 | 	cmp	local01, #35 wz
24674     A0 00 90 5D |  if_ne	jmp	#LR__3169
24678     20 4E 05 F1 | 	add	fp, #32
2467c     A7 26 02 FB | 	rdlong	local01, fp
24680     98 4E 05 F1 | 	add	fp, #152
24684     A7 2A 02 FB | 	rdlong	local03, fp
24688     B8 4E 85 F1 | 	sub	fp, #184
2468c     15 27 5A F2 | 	cmps	local01, local03 wcz
24690     24 4E 05 11 |  if_a	add	fp, #36
24694     A7 02 68 1C |  if_a	wrlong	#1, fp
24698     24 4E 85 11 |  if_a	sub	fp, #36
2469c     A4 01 90 1D |  if_a	jmp	#LR__3175
246a0     20 4E 05 F1 | 	add	fp, #32
246a4     A7 26 02 FB | 	rdlong	local01, fp
246a8     20 4E 85 F1 | 	sub	fp, #32
246ac     00 26 56 F2 | 	cmps	local01, #0 wc
246b0     2C 00 90 3D |  if_ae	jmp	#LR__3168
246b4     B8 4E 05 F1 | 	add	fp, #184
246b8     A7 26 02 FB | 	rdlong	local01, fp
246bc     13 27 62 F6 | 	neg	local01, local01
246c0     98 4E 85 F1 | 	sub	fp, #152
246c4     A7 2A 02 FB | 	rdlong	local03, fp
246c8     20 4E 85 F1 | 	sub	fp, #32
246cc     13 2B 5A F2 | 	cmps	local03, local01 wcz
246d0     24 4E 05 E1 |  if_be	add	fp, #36
246d4     A7 02 68 EC |  if_be	wrlong	#1, fp
246d8     24 4E 85 E1 |  if_be	sub	fp, #36
246dc     64 01 90 FD | 	jmp	#LR__3175
246e0                 | LR__3168
246e0     20 4E 05 F1 | 	add	fp, #32
246e4     A7 26 02 FB | 	rdlong	local01, fp
246e8     20 4E 85 F1 | 	sub	fp, #32
246ec     01 26 56 F2 | 	cmps	local01, #1 wc
246f0     50 01 90 CD |  if_b	jmp	#LR__3175
246f4     B8 4E 05 F1 | 	add	fp, #184
246f8     A7 26 02 FB | 	rdlong	local01, fp
246fc     98 4E 85 F1 | 	sub	fp, #152
24700     A7 2A 02 FB | 	rdlong	local03, fp
24704     15 27 82 F1 | 	sub	local01, local03
24708     98 4E 05 F1 | 	add	fp, #152
2470c     A7 26 62 FC | 	wrlong	local01, fp
24710     B8 4E 85 F1 | 	sub	fp, #184
24714     2C 01 90 FD | 	jmp	#LR__3175
24718                 | LR__3169
24718     00 26 06 F6 | 	mov	local01, #0
2471c     08 4E 05 F1 | 	add	fp, #8
24720     A7 28 02 FB | 	rdlong	local02, fp
24724     1C 28 46 F0 | 	shr	local02, #28
24728     01 28 0E F5 | 	and	local02, #1 wz
2472c     01 26 06 A6 |  if_e	mov	local01, #1
24730     2C 4E 05 F1 | 	add	fp, #44
24734     A7 26 62 FC | 	wrlong	local01, fp
24738     14 4E 85 F1 | 	sub	fp, #20
2473c     A7 26 02 FB | 	rdlong	local01, fp
24740     98 4E 05 F1 | 	add	fp, #152
24744     A7 2A 02 FB | 	rdlong	local03, fp
24748     B8 4E 85 F1 | 	sub	fp, #184
2474c     15 27 52 F2 | 	cmps	local01, local03 wc
24750     18 00 90 3D |  if_ae	jmp	#LR__3170
24754     20 4E 05 F1 | 	add	fp, #32
24758     A7 2C 02 FB | 	rdlong	local04, fp
2475c     20 4E 85 F1 | 	sub	fp, #32
24760     FF FF 7F FF 
24764     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
24768     10 00 90 3D |  if_ae	jmp	#LR__3171
2476c                 | LR__3170
2476c     24 4E 05 F1 | 	add	fp, #36
24770     A7 02 68 FC | 	wrlong	#1, fp
24774     24 4E 85 F1 | 	sub	fp, #36
24778     C8 00 90 FD | 	jmp	#LR__3175
2477c                 | LR__3171
2477c     B8 4E 05 F1 | 	add	fp, #184
24780     A7 2C 02 FB | 	rdlong	local04, fp
24784     98 4E 85 F1 | 	sub	fp, #152
24788     A7 2A 02 FB | 	rdlong	local03, fp
2478c     15 2D 82 F1 | 	sub	local04, local03
24790     98 4E 05 F1 | 	add	fp, #152
24794     A7 2C 62 FC | 	wrlong	local04, fp
24798     AC 4E 85 F1 | 	sub	fp, #172
2479c     A7 12 02 FB | 	rdlong	arg01, fp
247a0     08 4E 05 F1 | 	add	fp, #8
247a4     A7 14 02 F6 | 	mov	arg02, fp
247a8     0C 4E 05 F1 | 	add	fp, #12
247ac     A7 16 02 F6 | 	mov	arg03, fp
247b0     16 19 62 F6 | 	neg	arg04, local04
247b4     04 4E 85 F1 | 	sub	fp, #4
247b8     A7 1A 02 FB | 	rdlong	arg05, fp
247bc     1C 4E 85 F1 | 	sub	fp, #28
247c0     4C 42 B0 FD | 	call	#__system__disassemble_0516
247c4     7C 00 90 FD | 	jmp	#LR__3175
247c8                 | LR__3172
247c8     24 4E 05 F1 | 	add	fp, #36
247cc     A7 26 0A FB | 	rdlong	local01, fp wz
247d0     24 4E 85 F1 | 	sub	fp, #36
247d4     34 00 90 AD |  if_e	jmp	#LR__3173
247d8     0C 4E 05 F1 | 	add	fp, #12
247dc     A7 12 02 FB | 	rdlong	arg01, fp
247e0     08 4E 05 F1 | 	add	fp, #8
247e4     A7 14 02 F6 | 	mov	arg02, fp
247e8     0C 4E 05 F1 | 	add	fp, #12
247ec     A7 16 02 F6 | 	mov	arg03, fp
247f0     98 4E 05 F1 | 	add	fp, #152
247f4     A7 18 02 FB | 	rdlong	arg04, fp
247f8     9C 4E 85 F1 | 	sub	fp, #156
247fc     A7 1A 02 FB | 	rdlong	arg05, fp
24800     1C 4E 85 F1 | 	sub	fp, #28
24804     08 42 B0 FD | 	call	#__system__disassemble_0516
24808     38 00 90 FD | 	jmp	#LR__3174
2480c                 | LR__3173
2480c     0C 4E 05 F1 | 	add	fp, #12
24810     A7 12 02 FB | 	rdlong	arg01, fp
24814     08 4E 05 F1 | 	add	fp, #8
24818     A7 14 02 F6 | 	mov	arg02, fp
2481c     0C 4E 05 F1 | 	add	fp, #12
24820     A7 16 02 F6 | 	mov	arg03, fp
24824     98 4E 05 F1 | 	add	fp, #152
24828     A7 2C 02 FB | 	rdlong	local04, fp
2482c     01 2C 06 F1 | 	add	local04, #1
24830     16 19 62 F6 | 	neg	arg04, local04
24834     9C 4E 85 F1 | 	sub	fp, #156
24838     A7 1A 02 FB | 	rdlong	arg05, fp
2483c     1C 4E 85 F1 | 	sub	fp, #28
24840     CC 41 B0 FD | 	call	#__system__disassemble_0516
24844                 | LR__3174
24844                 | LR__3175
24844     1C 4E 05 F1 | 	add	fp, #28
24848     A7 26 02 FB | 	rdlong	local01, fp
2484c     1C 4E 85 F1 | 	sub	fp, #28
24850     02 26 0E F2 | 	cmp	local01, #2 wz
24854     4C 00 90 5D |  if_ne	jmp	#LR__3178
24858     1C 4E 05 F1 | 	add	fp, #28
2485c     A7 20 68 FC | 	wrlong	#16, fp
24860     1C 4E 85 F1 | 	sub	fp, #28
24864                 | LR__3176
24864     14 4E 05 F1 | 	add	fp, #20
24868     A7 26 0A FB | 	rdlong	local01, fp wz
2486c     14 4E 85 F1 | 	sub	fp, #20
24870     30 00 90 AD |  if_e	jmp	#LR__3177
24874     14 4E 05 F1 | 	add	fp, #20
24878     A7 2A 02 FB | 	rdlong	local03, fp
2487c     14 4E 85 F1 | 	sub	fp, #20
24880     00 80 00 FF 
24884     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
24888     18 00 90 3D |  if_ae	jmp	#LR__3177
2488c     14 4E 05 F1 | 	add	fp, #20
24890     A7 26 02 FB | 	rdlong	local01, fp
24894     01 26 66 F0 | 	shl	local01, #1
24898     A7 26 62 FC | 	wrlong	local01, fp
2489c     14 4E 85 F1 | 	sub	fp, #20
248a0     C0 FF 9F FD | 	jmp	#LR__3176
248a4                 | LR__3177
248a4                 | LR__3178
248a4     70 4E 05 F1 | 	add	fp, #112
248a8     A7 12 02 F6 | 	mov	arg01, fp
248ac     5C 4E 85 F1 | 	sub	fp, #92
248b0     A7 14 02 FB | 	rdlong	arg02, fp
248b4     08 4E 05 F1 | 	add	fp, #8
248b8     A7 16 02 FB | 	rdlong	arg03, fp
248bc     A0 4E 05 F1 | 	add	fp, #160
248c0     A7 1A 02 FB | 	rdlong	arg05, fp
248c4     BC 4E 85 F1 | 	sub	fp, #188
248c8     01 18 06 F6 | 	mov	arg04, #1
248cc     CC 40 B0 FD | 	call	#__system___uitoa
248d0     58 4E 05 F1 | 	add	fp, #88
248d4     A7 FA 61 FC | 	wrlong	result1, fp
248d8     38 4E 85 F1 | 	sub	fp, #56
248dc     A7 26 02 FB | 	rdlong	local01, fp
248e0     20 4E 85 F1 | 	sub	fp, #32
248e4     00 26 56 F2 | 	cmps	local01, #0 wc
248e8     50 00 90 3D |  if_ae	jmp	#LR__3179
248ec     60 4E 05 F1 | 	add	fp, #96
248f0     A7 5A 68 FC | 	wrlong	#45, fp
248f4     50 4E 05 F1 | 	add	fp, #80
248f8     A7 12 02 F6 | 	mov	arg01, fp
248fc     90 4E 85 F1 | 	sub	fp, #144
24900     A7 2A 02 FB | 	rdlong	local03, fp
24904     15 15 62 F6 | 	neg	arg02, local03
24908     18 4E 05 F1 | 	add	fp, #24
2490c     A7 18 02 FB | 	rdlong	arg04, fp
24910     84 4E 05 F1 | 	add	fp, #132
24914     A7 30 02 FB | 	rdlong	local06, fp
24918     BC 4E 85 F1 | 	sub	fp, #188
2491c     18 2D 02 F6 | 	mov	local04, local06
24920     0A 16 06 F6 | 	mov	arg03, #10
24924     16 1B 02 F6 | 	mov	arg05, local04
24928     70 40 B0 FD | 	call	#__system___uitoa
2492c     5C 4E 05 F1 | 	add	fp, #92
24930     A7 FA 61 FC | 	wrlong	result1, fp
24934     5C 4E 85 F1 | 	sub	fp, #92
24938     48 00 90 FD | 	jmp	#LR__3180
2493c                 | LR__3179
2493c     60 4E 05 F1 | 	add	fp, #96
24940     A7 56 68 FC | 	wrlong	#43, fp
24944     50 4E 05 F1 | 	add	fp, #80
24948     A7 12 02 F6 | 	mov	arg01, fp
2494c     90 4E 85 F1 | 	sub	fp, #144
24950     A7 14 02 FB | 	rdlong	arg02, fp
24954     18 4E 05 F1 | 	add	fp, #24
24958     A7 18 02 FB | 	rdlong	arg04, fp
2495c     84 4E 05 F1 | 	add	fp, #132
24960     A7 30 02 FB | 	rdlong	local06, fp
24964     BC 4E 85 F1 | 	sub	fp, #188
24968     18 2D 02 F6 | 	mov	local04, local06
2496c     0A 16 06 F6 | 	mov	arg03, #10
24970     16 1B 02 F6 | 	mov	arg05, local04
24974     24 40 B0 FD | 	call	#__system___uitoa
24978     5C 4E 05 F1 | 	add	fp, #92
2497c     A7 FA 61 FC | 	wrlong	result1, fp
24980     5C 4E 85 F1 | 	sub	fp, #92
24984                 | LR__3180
24984     24 4E 05 F1 | 	add	fp, #36
24988     A7 26 0A FB | 	rdlong	local01, fp wz
2498c     24 4E 85 F1 | 	sub	fp, #36
24990     2C 00 90 AD |  if_e	jmp	#LR__3181
24994     50 4E 05 F1 | 	add	fp, #80
24998     A7 00 68 FC | 	wrlong	#0, fp
2499c     04 4E 85 F1 | 	sub	fp, #4
249a0     A7 00 68 FC | 	wrlong	#0, fp
249a4     6C 4E 05 F1 | 	add	fp, #108
249a8     A7 26 02 FB | 	rdlong	local01, fp
249ac     01 26 06 F1 | 	add	local01, #1
249b0     64 4E 85 F1 | 	sub	fp, #100
249b4     A7 26 62 FC | 	wrlong	local01, fp
249b8     54 4E 85 F1 | 	sub	fp, #84
249bc     88 00 90 FD | 	jmp	#LR__3184
249c0                 | LR__3181
249c0     20 4E 05 F1 | 	add	fp, #32
249c4     A7 26 02 FB | 	rdlong	local01, fp
249c8     20 4E 85 F1 | 	sub	fp, #32
249cc     00 26 56 F2 | 	cmps	local01, #0 wc
249d0     40 00 90 3D |  if_ae	jmp	#LR__3182
249d4     20 4E 05 F1 | 	add	fp, #32
249d8     A7 28 02 FB | 	rdlong	local02, fp
249dc     30 4E 05 F1 | 	add	fp, #48
249e0     A7 28 62 FC | 	wrlong	local02, fp
249e4     04 4E 85 F1 | 	sub	fp, #4
249e8     A7 28 62 FC | 	wrlong	local02, fp
249ec     2C 4E 85 F1 | 	sub	fp, #44
249f0     A7 26 02 FB | 	rdlong	local01, fp
249f4     98 4E 05 F1 | 	add	fp, #152
249f8     A7 2A 02 FB | 	rdlong	local03, fp
249fc     15 27 02 F1 | 	add	local01, local03
24a00     01 26 06 F1 | 	add	local01, #1
24a04     64 4E 85 F1 | 	sub	fp, #100
24a08     A7 26 62 FC | 	wrlong	local01, fp
24a0c     54 4E 85 F1 | 	sub	fp, #84
24a10     34 00 90 FD | 	jmp	#LR__3183
24a14                 | LR__3182
24a14     4C 4E 05 F1 | 	add	fp, #76
24a18     A7 00 68 FC | 	wrlong	#0, fp
24a1c     2C 4E 85 F1 | 	sub	fp, #44
24a20     A7 26 02 FB | 	rdlong	local01, fp
24a24     30 4E 05 F1 | 	add	fp, #48
24a28     A7 26 62 FC | 	wrlong	local01, fp
24a2c     68 4E 05 F1 | 	add	fp, #104
24a30     A7 2A 02 FB | 	rdlong	local03, fp
24a34     15 27 02 F1 | 	add	local01, local03
24a38     01 26 06 F1 | 	add	local01, #1
24a3c     64 4E 85 F1 | 	sub	fp, #100
24a40     A7 26 62 FC | 	wrlong	local01, fp
24a44     54 4E 85 F1 | 	sub	fp, #84
24a48                 | LR__3183
24a48                 | LR__3184
24a48     54 4E 05 F1 | 	add	fp, #84
24a4c     A7 26 02 FB | 	rdlong	local01, fp
24a50     08 4E 85 F1 | 	sub	fp, #8
24a54     A7 2A 02 FB | 	rdlong	local03, fp
24a58     15 27 82 F1 | 	sub	local01, local03
24a5c     01 26 06 F1 | 	add	local01, #1
24a60     24 4E 85 F1 | 	sub	fp, #36
24a64     A7 26 62 FC | 	wrlong	local01, fp
24a68     04 4E 05 F1 | 	add	fp, #4
24a6c     A7 26 0A FB | 	rdlong	local01, fp wz
24a70     2C 4E 85 F1 | 	sub	fp, #44
24a74     28 4E 05 51 |  if_ne	add	fp, #40
24a78     A7 2A 02 5B |  if_ne	rdlong	local03, fp
24a7c     01 2A 06 51 |  if_ne	add	local03, #1
24a80     A7 2A 62 5C |  if_ne	wrlong	local03, fp
24a84     28 4E 85 51 |  if_ne	sub	fp, #40
24a88     1C 4E 05 F1 | 	add	fp, #28
24a8c     A7 26 02 FB | 	rdlong	local01, fp
24a90     1C 4E 85 F1 | 	sub	fp, #28
24a94     10 26 0E F2 | 	cmp	local01, #16 wz
24a98     28 4E 05 A1 |  if_e	add	fp, #40
24a9c     A7 26 02 AB |  if_e	rdlong	local01, fp
24aa0     02 26 06 A1 |  if_e	add	local01, #2
24aa4     A7 26 62 AC |  if_e	wrlong	local01, fp
24aa8     28 4E 85 A1 |  if_e	sub	fp, #40
24aac     24 4E 05 F1 | 	add	fp, #36
24ab0     A7 26 0A FB | 	rdlong	local01, fp wz
24ab4     24 4E 85 F1 | 	sub	fp, #36
24ab8     28 00 90 AD |  if_e	jmp	#LR__3185
24abc     28 4E 05 F1 | 	add	fp, #40
24ac0     A7 26 02 FB | 	rdlong	local01, fp
24ac4     02 2A 06 F6 | 	mov	local03, #2
24ac8     34 4E 05 F1 | 	add	fp, #52
24acc     A7 2E 02 FB | 	rdlong	local05, fp
24ad0     17 2B 02 F1 | 	add	local03, local05
24ad4     15 27 02 F1 | 	add	local01, local03
24ad8     34 4E 85 F1 | 	sub	fp, #52
24adc     A7 26 62 FC | 	wrlong	local01, fp
24ae0     28 4E 85 F1 | 	sub	fp, #40
24ae4                 | LR__3185
24ae4     28 4E 05 F1 | 	add	fp, #40
24ae8     A7 26 02 FB | 	rdlong	local01, fp
24aec     28 4E 85 F1 | 	sub	fp, #40
24af0     41 26 56 F2 | 	cmps	local01, #65 wc
24af4     01 FA 65 36 |  if_ae	neg	result1, #1
24af8     08 05 90 3D |  if_ae	jmp	#LR__3213
24afc     3C 4E 05 F1 | 	add	fp, #60
24b00     A7 26 0A FB | 	rdlong	local01, fp wz
24b04     3C 4E 85 F1 | 	sub	fp, #60
24b08     60 00 90 AD |  if_e	jmp	#LR__3186
24b0c     C0 4E 05 F1 | 	add	fp, #192
24b10     A7 12 02 FB | 	rdlong	arg01, fp
24b14     94 4E 85 F1 | 	sub	fp, #148
24b18     A7 14 02 FB | 	rdlong	arg02, fp
24b1c     14 4E 05 F1 | 	add	fp, #20
24b20     A7 16 02 FB | 	rdlong	arg03, fp
24b24     40 4E 85 F1 | 	sub	fp, #64
24b28     D8 40 B0 FD | 	call	#__system__emitsign_0518
24b2c     18 4F 05 F1 | 	add	fp, #280
24b30     A7 FA 61 FC | 	wrlong	result1, fp
24b34     18 4F 85 F1 | 	sub	fp, #280
24b38     00 FA 55 F2 | 	cmps	result1, #0 wc
24b3c     18 4F 05 C1 |  if_b	add	fp, #280
24b40     A7 FA 01 CB |  if_b	rdlong	result1, fp
24b44     18 4F 85 C1 |  if_b	sub	fp, #280
24b48     B8 04 90 CD |  if_b	jmp	#LR__3213
24b4c     C0 4E 05 F1 | 	add	fp, #192
24b50     A7 26 02 FB | 	rdlong	local01, fp
24b54     58 4E 05 F1 | 	add	fp, #88
24b58     A7 2A 02 FB | 	rdlong	local03, fp
24b5c     15 27 02 F1 | 	add	local01, local03
24b60     58 4E 85 F1 | 	sub	fp, #88
24b64     A7 26 62 FC | 	wrlong	local01, fp
24b68     C0 4E 85 F1 | 	sub	fp, #192
24b6c                 | LR__3186
24b6c     4C 4E 05 F1 | 	add	fp, #76
24b70     A7 26 02 FB | 	rdlong	local01, fp
24b74     34 4E 85 F1 | 	sub	fp, #52
24b78     A7 26 62 FC | 	wrlong	local01, fp
24b7c     18 4E 85 F1 | 	sub	fp, #24
24b80     97 9E 48 FB | 	callpa	#(@LR__3192-@LR__3187)>>2,fcache_load_ptr_
24b84                 | LR__3187
24b84     18 4E 05 F1 | 	add	fp, #24
24b88     A7 28 02 FB | 	rdlong	local02, fp
24b8c     3C 4E 05 F1 | 	add	fp, #60
24b90     A7 2E 02 FB | 	rdlong	local05, fp
24b94     54 4E 85 F1 | 	sub	fp, #84
24b98     17 29 52 F2 | 	cmps	local02, local05 wc
24b9c     20 01 90 3D |  if_ae	jmp	#LR__3193
24ba0     18 4E 05 F1 | 	add	fp, #24
24ba4     A7 30 02 FB | 	rdlong	local06, fp
24ba8     18 4E 85 F1 | 	sub	fp, #24
24bac     00 30 56 F2 | 	cmps	local06, #0 wc
24bb0     58 00 90 CD |  if_b	jmp	#LR__3188
24bb4     18 4E 05 F1 | 	add	fp, #24
24bb8     A7 30 02 FB | 	rdlong	local06, fp
24bbc     40 4E 05 F1 | 	add	fp, #64
24bc0     A7 32 02 FB | 	rdlong	local07, fp
24bc4     58 4E 85 F1 | 	sub	fp, #88
24bc8     19 31 52 F2 | 	cmps	local06, local07 wc
24bcc     3C 00 90 3D |  if_ae	jmp	#LR__3188
24bd0     C0 4E 05 F1 | 	add	fp, #192
24bd4     A7 34 02 FB | 	rdlong	local08, fp
24bd8     1A 33 02 F6 | 	mov	local07, local08
24bdc     01 32 06 F1 | 	add	local07, #1
24be0     A7 32 62 FC | 	wrlong	local07, fp
24be4     A8 4E 85 F1 | 	sub	fp, #168
24be8     A7 32 02 FB | 	rdlong	local07, fp
24bec     19 37 02 F6 | 	mov	local09, local07
24bf0     58 4E 05 F1 | 	add	fp, #88
24bf4     A7 38 02 F6 | 	mov	local10, fp
24bf8     A7 36 02 F1 | 	add	local09, fp
24bfc     1B 3B C2 FA | 	rdbyte	local11, local09
24c00     1A 3B 42 FC | 	wrbyte	local11, local08
24c04     70 4E 85 F1 | 	sub	fp, #112
24c08     20 00 90 FD | 	jmp	#LR__3189
24c0c                 | LR__3188
24c0c     C0 4E 05 F1 | 	add	fp, #192
24c10     A7 34 02 FB | 	rdlong	local08, fp
24c14     1A 37 02 F6 | 	mov	local09, local08
24c18     01 36 06 F1 | 	add	local09, #1
24c1c     A7 36 62 FC | 	wrlong	local09, fp
24c20     C0 4E 85 F1 | 	sub	fp, #192
24c24     30 36 06 F6 | 	mov	local09, #48
24c28     1A 61 48 FC | 	wrbyte	#48, local08
24c2c                 | LR__3189
24c2c     18 4E 05 F1 | 	add	fp, #24
24c30     A7 30 02 FB | 	rdlong	local06, fp
24c34     38 4E 05 F1 | 	add	fp, #56
24c38     A7 3C 02 FB | 	rdlong	local12, fp
24c3c     50 4E 85 F1 | 	sub	fp, #80
24c40     1E 31 0A F2 | 	cmp	local06, local12 wz
24c44     5C 00 90 5D |  if_ne	jmp	#LR__3191
24c48     10 4F 05 F1 | 	add	fp, #272
24c4c     A7 32 02 FB | 	rdlong	local07, fp
24c50     10 4F 85 F1 | 	sub	fp, #272
24c54     19 37 0A F6 | 	mov	local09, local07 wz
24c58     28 00 90 5D |  if_ne	jmp	#LR__3190
24c5c     54 4E 05 F1 | 	add	fp, #84
24c60     A7 3A 02 FB | 	rdlong	local11, fp
24c64     1D 39 02 F6 | 	mov	local10, local11
24c68     01 38 86 F1 | 	sub	local10, #1
24c6c     3C 4E 85 F1 | 	sub	fp, #60
24c70     A7 3E 02 FB | 	rdlong	local13, fp
24c74     18 4E 85 F1 | 	sub	fp, #24
24c78     1F 41 02 F6 | 	mov	local14, local13
24c7c     1C 41 52 F2 | 	cmps	local14, local10 wc
24c80     20 00 90 3D |  if_ae	jmp	#LR__3191
24c84                 | LR__3190
24c84     C0 4E 05 F1 | 	add	fp, #192
24c88     A7 34 02 FB | 	rdlong	local08, fp
24c8c     1A 3D 02 F6 | 	mov	local12, local08
24c90     01 3C 06 F1 | 	add	local12, #1
24c94     A7 3C 62 FC | 	wrlong	local12, fp
24c98     C0 4E 85 F1 | 	sub	fp, #192
24c9c     2E 36 06 F6 | 	mov	local09, #46
24ca0     1A 5D 48 FC | 	wrbyte	#46, local08
24ca4                 | LR__3191
24ca4     18 4E 05 F1 | 	add	fp, #24
24ca8     A7 42 02 FB | 	rdlong	local15, fp
24cac     21 3D 02 F6 | 	mov	local12, local15
24cb0     01 3C 06 F1 | 	add	local12, #1
24cb4     A7 3C 62 FC | 	wrlong	local12, fp
24cb8     18 4E 85 F1 | 	sub	fp, #24
24cbc     C4 FE 9F FD | 	jmp	#LR__3187
24cc0                 | LR__3192
24cc0                 | LR__3193
24cc0     34 4E 05 F1 | 	add	fp, #52
24cc4     A7 26 0A FB | 	rdlong	local01, fp wz
24cc8     34 4E 85 F1 | 	sub	fp, #52
24ccc     A0 00 90 AD |  if_e	jmp	#LR__3197
24cd0     C0 4E 05 F1 | 	add	fp, #192
24cd4     A7 26 02 FB | 	rdlong	local01, fp
24cd8     01 26 86 F1 | 	sub	local01, #1
24cdc     A7 26 62 FC | 	wrlong	local01, fp
24ce0     C0 4E 85 F1 | 	sub	fp, #192
24ce4     97 26 48 FB | 	callpa	#(@LR__3195-@LR__3194)>>2,fcache_load_ptr_
24ce8                 | LR__3194
24ce8     C0 4E 05 F1 | 	add	fp, #192
24cec     A7 26 02 FB | 	rdlong	local01, fp
24cf0     04 4E 05 F1 | 	add	fp, #4
24cf4     A7 2A 02 FB | 	rdlong	local03, fp
24cf8     C4 4E 85 F1 | 	sub	fp, #196
24cfc     15 27 5A F2 | 	cmps	local01, local03 wcz
24d00     30 00 90 ED |  if_be	jmp	#LR__3196
24d04     C0 4E 05 F1 | 	add	fp, #192
24d08     A7 30 02 FB | 	rdlong	local06, fp
24d0c     C0 4E 85 F1 | 	sub	fp, #192
24d10     18 2D C2 FA | 	rdbyte	local04, local06
24d14     30 2C 0E F2 | 	cmp	local04, #48 wz
24d18     18 00 90 5D |  if_ne	jmp	#LR__3196
24d1c     C0 4E 05 F1 | 	add	fp, #192
24d20     A7 26 02 FB | 	rdlong	local01, fp
24d24     01 26 86 F1 | 	sub	local01, #1
24d28     A7 26 62 FC | 	wrlong	local01, fp
24d2c     C0 4E 85 F1 | 	sub	fp, #192
24d30     B4 FF 9F FD | 	jmp	#LR__3194
24d34                 | LR__3195
24d34                 | LR__3196
24d34     C0 4E 05 F1 | 	add	fp, #192
24d38     A7 28 02 FB | 	rdlong	local02, fp
24d3c     C0 4E 85 F1 | 	sub	fp, #192
24d40     14 27 C2 FA | 	rdbyte	local01, local02
24d44     2E 26 0E F2 | 	cmp	local01, #46 wz
24d48     C0 4E 05 A1 |  if_e	add	fp, #192
24d4c     A7 26 02 AB |  if_e	rdlong	local01, fp
24d50     01 26 86 A1 |  if_e	sub	local01, #1
24d54     A7 26 62 AC |  if_e	wrlong	local01, fp
24d58     C0 4E 85 A1 |  if_e	sub	fp, #192
24d5c     C0 4E 05 F1 | 	add	fp, #192
24d60     A7 2A 02 FB | 	rdlong	local03, fp
24d64     01 2A 06 F1 | 	add	local03, #1
24d68     A7 2A 62 FC | 	wrlong	local03, fp
24d6c     C0 4E 85 F1 | 	sub	fp, #192
24d70                 | LR__3197
24d70     24 4E 05 F1 | 	add	fp, #36
24d74     A7 26 0A FB | 	rdlong	local01, fp wz
24d78     24 4E 85 F1 | 	sub	fp, #36
24d7c     B4 00 90 AD |  if_e	jmp	#LR__3200
24d80     C0 4E 05 F1 | 	add	fp, #192
24d84     A7 28 02 FB | 	rdlong	local02, fp
24d88     14 2B 02 F6 | 	mov	local03, local02
24d8c     01 2A 06 F1 | 	add	local03, #1
24d90     A7 2A 62 FC | 	wrlong	local03, fp
24d94     90 4E 85 F1 | 	sub	fp, #144
24d98     A7 2C 02 FB | 	rdlong	local04, fp
24d9c     14 2D 42 FC | 	wrbyte	local04, local02
24da0     90 4E 05 F1 | 	add	fp, #144
24da4     A7 28 02 FB | 	rdlong	local02, fp
24da8     14 2B 02 F6 | 	mov	local03, local02
24dac     01 2A 06 F1 | 	add	local03, #1
24db0     A7 2A 62 FC | 	wrlong	local03, fp
24db4     60 4E 85 F1 | 	sub	fp, #96
24db8     A7 2C 02 FB | 	rdlong	local04, fp
24dbc     14 2D 42 FC | 	wrbyte	local04, local02
24dc0     48 4E 85 F1 | 	sub	fp, #72
24dc4     A7 00 68 FC | 	wrlong	#0, fp
24dc8     18 4E 85 F1 | 	sub	fp, #24
24dcc                 | LR__3198
24dcc     18 4E 05 F1 | 	add	fp, #24
24dd0     A7 28 02 FB | 	rdlong	local02, fp
24dd4     44 4E 05 F1 | 	add	fp, #68
24dd8     A7 2E 02 FB | 	rdlong	local05, fp
24ddc     5C 4E 85 F1 | 	sub	fp, #92
24de0     17 29 52 F2 | 	cmps	local02, local05 wc
24de4     4C 00 90 3D |  if_ae	jmp	#LR__3199
24de8     C0 4E 05 F1 | 	add	fp, #192
24dec     A7 34 02 FB | 	rdlong	local08, fp
24df0     1A 3D 02 F6 | 	mov	local12, local08
24df4     01 3C 06 F1 | 	add	local12, #1
24df8     A7 3C 62 FC | 	wrlong	local12, fp
24dfc     A8 4E 85 F1 | 	sub	fp, #168
24e00     A7 32 02 FB | 	rdlong	local07, fp
24e04     19 37 02 F6 | 	mov	local09, local07
24e08     98 4E 05 F1 | 	add	fp, #152
24e0c     A7 38 02 F6 | 	mov	local10, fp
24e10     A7 36 02 F1 | 	add	local09, fp
24e14     1B 3B C2 FA | 	rdbyte	local11, local09
24e18     1A 3B 42 FC | 	wrbyte	local11, local08
24e1c     98 4E 85 F1 | 	sub	fp, #152
24e20     A7 3C 02 FB | 	rdlong	local12, fp
24e24     01 3C 06 F1 | 	add	local12, #1
24e28     A7 3C 62 FC | 	wrlong	local12, fp
24e2c     18 4E 85 F1 | 	sub	fp, #24
24e30     98 FF 9F FD | 	jmp	#LR__3198
24e34                 | LR__3199
24e34                 | LR__3200
24e34     C0 4E 05 F1 | 	add	fp, #192
24e38     A7 26 02 FB | 	rdlong	local01, fp
24e3c     C0 4E 85 F1 | 	sub	fp, #192
24e40     13 01 48 FC | 	wrbyte	#0, local01
24e44                 | LR__3201
24e44     6C 4E 05 F1 | 	add	fp, #108
24e48     A7 26 0A FB | 	rdlong	local01, fp wz
24e4c     6C 4E 85 F1 | 	sub	fp, #108
24e50     90 01 90 AD |  if_e	jmp	#LR__3212
24e54     48 4E 05 F1 | 	add	fp, #72
24e58     A7 2A 0A FB | 	rdlong	local03, fp wz
24e5c     48 4E 85 F1 | 	sub	fp, #72
24e60     80 01 90 AD |  if_e	jmp	#LR__3212
24e64     C4 4E 05 F1 | 	add	fp, #196
24e68     A7 12 02 FB | 	rdlong	arg01, fp
24e6c     C4 4E 85 F1 | 	sub	fp, #196
24e70     09 45 02 F6 | 	mov	local16, arg01
24e74     97 06 48 FB | 	callpa	#(@LR__3203-@LR__3202)>>2,fcache_load_ptr_
24e78                 | LR__3202
24e78     22 FB C9 FA | 	rdbyte	result1, local16 wz
24e7c     01 44 06 51 |  if_ne	add	local16, #1
24e80     F4 FF 9F 5D |  if_ne	jmp	#LR__3202
24e84                 | LR__3203
24e84     09 45 82 F1 | 	sub	local16, arg01
24e88     22 2D 02 F6 | 	mov	local04, local16
24e8c     6C 4E 05 F1 | 	add	fp, #108
24e90     A7 30 02 FB | 	rdlong	local06, fp
24e94     6C 4E 85 F1 | 	sub	fp, #108
24e98     18 2D 5A F2 | 	cmps	local04, local06 wcz
24e9c     44 01 90 ED |  if_be	jmp	#LR__3212
24ea0     C4 4E 05 F1 | 	add	fp, #196
24ea4     A7 26 02 FB | 	rdlong	local01, fp
24ea8     5C 4E 05 F1 | 	add	fp, #92
24eac     A7 26 62 FC | 	wrlong	local01, fp
24eb0     FC 4E 85 F1 | 	sub	fp, #252
24eb4     A7 26 0A FB | 	rdlong	local01, fp wz
24eb8     24 4E 85 F1 | 	sub	fp, #36
24ebc     20 00 90 AD |  if_e	jmp	#LR__3204
24ec0     B8 4E 05 F1 | 	add	fp, #184
24ec4     A7 00 68 FC | 	wrlong	#0, fp
24ec8     4C 4E 85 F1 | 	sub	fp, #76
24ecc     A7 26 02 FB | 	rdlong	local01, fp
24ed0     B0 4E 05 F1 | 	add	fp, #176
24ed4     A7 26 62 FC | 	wrlong	local01, fp
24ed8     1C 4F 85 F1 | 	sub	fp, #284
24edc     24 00 90 FD | 	jmp	#LR__3205
24ee0                 | LR__3204
24ee0     6C 4E 05 F1 | 	add	fp, #108
24ee4     A7 26 02 FB | 	rdlong	local01, fp
24ee8     01 26 86 F1 | 	sub	local01, #1
24eec     4C 4E 05 F1 | 	add	fp, #76
24ef0     A7 2A 02 FB | 	rdlong	local03, fp
24ef4     15 27 82 F1 | 	sub	local01, local03
24ef8     64 4E 05 F1 | 	add	fp, #100
24efc     A7 26 62 FC | 	wrlong	local01, fp
24f00     1C 4F 85 F1 | 	sub	fp, #284
24f04                 | LR__3205
24f04     97 20 48 FB | 	callpa	#(@LR__3207-@LR__3206)>>2,fcache_load_ptr_
24f08                 | LR__3206
24f08     1C 4F 05 F1 | 	add	fp, #284
24f0c     A7 26 0A FB | 	rdlong	local01, fp wz
24f10     1C 4F 85 F1 | 	sub	fp, #284
24f14     30 00 90 AD |  if_e	jmp	#LR__3208
24f18     20 4F 05 F1 | 	add	fp, #288
24f1c     A7 28 02 FB | 	rdlong	local02, fp
24f20     14 2B 02 F6 | 	mov	local03, local02
24f24     01 2A 06 F1 | 	add	local03, #1
24f28     A7 2A 62 FC | 	wrlong	local03, fp
24f2c     14 55 48 FC | 	wrbyte	#42, local02
24f30     04 4E 85 F1 | 	sub	fp, #4
24f34     A7 26 02 FB | 	rdlong	local01, fp
24f38     01 26 86 F1 | 	sub	local01, #1
24f3c     A7 26 62 FC | 	wrlong	local01, fp
24f40     1C 4F 85 F1 | 	sub	fp, #284
24f44     C0 FF 9F FD | 	jmp	#LR__3206
24f48                 | LR__3207
24f48                 | LR__3208
24f48     B8 4E 05 F1 | 	add	fp, #184
24f4c     A7 26 0A FB | 	rdlong	local01, fp wz
24f50     B8 4E 85 F1 | 	sub	fp, #184
24f54     70 00 90 AD |  if_e	jmp	#LR__3211
24f58     20 4F 05 F1 | 	add	fp, #288
24f5c     A7 28 02 FB | 	rdlong	local02, fp
24f60     14 2B 02 F6 | 	mov	local03, local02
24f64     01 2A 06 F1 | 	add	local03, #1
24f68     A7 2A 62 FC | 	wrlong	local03, fp
24f6c     14 5D 48 FC | 	wrbyte	#46, local02
24f70     04 4E 85 F1 | 	sub	fp, #4
24f74     A7 00 68 FC | 	wrlong	#0, fp
24f78     1C 4F 85 F1 | 	sub	fp, #284
24f7c                 | LR__3209
24f7c     1C 4F 05 F1 | 	add	fp, #284
24f80     A7 28 02 FB | 	rdlong	local02, fp
24f84     64 4E 85 F1 | 	sub	fp, #100
24f88     A7 2E 02 FB | 	rdlong	local05, fp
24f8c     B8 4E 85 F1 | 	sub	fp, #184
24f90     17 29 52 F2 | 	cmps	local02, local05 wc
24f94     30 00 90 3D |  if_ae	jmp	#LR__3210
24f98     20 4F 05 F1 | 	add	fp, #288
24f9c     A7 34 02 FB | 	rdlong	local08, fp
24fa0     1A 3D 02 F6 | 	mov	local12, local08
24fa4     01 3C 06 F1 | 	add	local12, #1
24fa8     A7 3C 62 FC | 	wrlong	local12, fp
24fac     1A 55 48 FC | 	wrbyte	#42, local08
24fb0     04 4E 85 F1 | 	sub	fp, #4
24fb4     A7 3C 02 FB | 	rdlong	local12, fp
24fb8     01 3C 06 F1 | 	add	local12, #1
24fbc     A7 3C 62 FC | 	wrlong	local12, fp
24fc0     1C 4F 85 F1 | 	sub	fp, #284
24fc4     B4 FF 9F FD | 	jmp	#LR__3209
24fc8                 | LR__3210
24fc8                 | LR__3211
24fc8     20 4F 05 F1 | 	add	fp, #288
24fcc     A7 28 02 FB | 	rdlong	local02, fp
24fd0     14 2B 02 F6 | 	mov	local03, local02
24fd4     01 2A 06 F1 | 	add	local03, #1
24fd8     A7 2A 62 FC | 	wrlong	local03, fp
24fdc     20 4F 85 F1 | 	sub	fp, #288
24fe0     14 01 48 FC | 	wrbyte	#0, local02
24fe4                 | LR__3212
24fe4     04 4E 05 F1 | 	add	fp, #4
24fe8     A7 12 02 FB | 	rdlong	arg01, fp
24fec     04 4E 05 F1 | 	add	fp, #4
24ff0     A7 14 02 FB | 	rdlong	arg02, fp
24ff4     BC 4E 05 F1 | 	add	fp, #188
24ff8     A7 16 02 FB | 	rdlong	arg03, fp
24ffc     C4 4E 85 F1 | 	sub	fp, #196
25000     C4 EE BF FD | 	call	#__system___fmtstr
25004                 | LR__3213
25004     A7 F0 03 F6 | 	mov	ptra, fp
25008     B2 00 A0 FD | 	call	#popregs_
2500c                 | __system___fmtfloat_ret
2500c     2D 00 64 FD | 	ret
25010                 | 
25010                 | __system__Left_S
25010     04 4A 05 F6 | 	mov	COUNT_, #4
25014     A8 00 A0 FD | 	call	#pushregs_
25018     09 27 02 F6 | 	mov	local01, arg01
2501c     0A 29 02 F6 | 	mov	local02, arg02
25020     01 28 56 F2 | 	cmps	local02, #1 wc
25024     95 01 00 CF 
25028     AA FA 05 C6 |  if_b	mov	result1, ##@LR__5163
2502c     5C 00 90 CD |  if_b	jmp	#LR__3223
25030     13 13 02 F6 | 	mov	arg01, local01
25034     09 2B 02 F6 | 	mov	local03, arg01
25038     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
2503c                 | LR__3220
2503c     15 FB C9 FA | 	rdbyte	result1, local03 wz
25040     01 2A 06 51 |  if_ne	add	local03, #1
25044     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
25048                 | LR__3221
25048     09 2B 82 F1 | 	sub	local03, arg01
2504c     15 FB 01 F6 | 	mov	result1, local03
25050     14 FB 59 F2 | 	cmps	result1, local02 wcz
25054     13 FB 01 E6 |  if_be	mov	result1, local01
25058     30 00 90 ED |  if_be	jmp	#LR__3223
2505c     14 13 02 F6 | 	mov	arg01, local02
25060     02 12 06 F1 | 	add	arg01, #2
25064     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
25068     FD 2C 0A F6 | 	mov	local04, result1 wz
2506c     18 00 90 AD |  if_e	jmp	#LR__3222
25070     16 13 02 F6 | 	mov	arg01, local04
25074     13 15 02 F6 | 	mov	arg02, local01
25078     14 17 02 F6 | 	mov	arg03, local02
2507c     34 DE BF FD | 	call	#__system____builtin_memmove
25080     16 29 02 F1 | 	add	local02, local04
25084     14 01 48 FC | 	wrbyte	#0, local02
25088                 | LR__3222
25088     16 FB 01 F6 | 	mov	result1, local04
2508c                 | LR__3223
2508c     A7 F0 03 F6 | 	mov	ptra, fp
25090     B2 00 A0 FD | 	call	#popregs_
25094                 | __system__Left_S_ret
25094     2D 00 64 FD | 	ret
25098                 | 
25098                 | __system__Right_S
25098     05 4A 05 F6 | 	mov	COUNT_, #5
2509c     A8 00 A0 FD | 	call	#pushregs_
250a0     09 27 02 F6 | 	mov	local01, arg01
250a4     0A 29 02 F6 | 	mov	local02, arg02
250a8     01 28 56 F2 | 	cmps	local02, #1 wc
250ac     95 01 00 CF 
250b0     AB FA 05 C6 |  if_b	mov	result1, ##@LR__5164
250b4     64 00 90 CD |  if_b	jmp	#LR__3233
250b8     13 13 02 F6 | 	mov	arg01, local01
250bc     09 2B 02 F6 | 	mov	local03, arg01
250c0     97 06 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
250c4                 | LR__3230
250c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
250c8     01 2A 06 51 |  if_ne	add	local03, #1
250cc     F4 FF 9F 5D |  if_ne	jmp	#LR__3230
250d0                 | LR__3231
250d0     09 2B 82 F1 | 	sub	local03, arg01
250d4     15 FB 01 F6 | 	mov	result1, local03
250d8     FD 2C 02 F6 | 	mov	local04, result1
250dc     14 2D 5A F2 | 	cmps	local04, local02 wcz
250e0     13 FB 01 E6 |  if_be	mov	result1, local01
250e4     34 00 90 ED |  if_be	jmp	#LR__3233
250e8     14 13 02 F6 | 	mov	arg01, local02
250ec     02 12 06 F1 | 	add	arg01, #2
250f0     40 20 B0 FD | 	call	#__system___gc_alloc_managed
250f4     FD 2E 0A F6 | 	mov	local05, result1 wz
250f8     1C 00 90 AD |  if_e	jmp	#LR__3232
250fc     14 2D 82 F1 | 	sub	local04, local02
25100     13 2D 02 F1 | 	add	local04, local01
25104     01 28 06 F1 | 	add	local02, #1
25108     17 13 02 F6 | 	mov	arg01, local05
2510c     16 15 02 F6 | 	mov	arg02, local04
25110     14 17 02 F6 | 	mov	arg03, local02
25114     9C DD BF FD | 	call	#__system____builtin_memmove
25118                 | LR__3232
25118     17 FB 01 F6 | 	mov	result1, local05
2511c                 | LR__3233
2511c     A7 F0 03 F6 | 	mov	ptra, fp
25120     B2 00 A0 FD | 	call	#popregs_
25124                 | __system__Right_S_ret
25124     2D 00 64 FD | 	ret
25128                 | 
25128                 | __system__Mid_S
25128     05 4A 05 F6 | 	mov	COUNT_, #5
2512c     A8 00 A0 FD | 	call	#pushregs_
25130     09 27 02 F6 | 	mov	local01, arg01
25134     0A 29 02 F6 | 	mov	local02, arg02
25138     01 16 56 F2 | 	cmps	arg03, #1 wc
2513c     95 01 00 CF 
25140     AC FA 05 C6 |  if_b	mov	result1, ##@LR__5165
25144     80 00 90 CD |  if_b	jmp	#LR__3243
25148     01 28 86 F1 | 	sub	local02, #1
2514c     00 28 56 F3 | 	fges	local02, #0 wc
25150     13 13 02 F6 | 	mov	arg01, local01
25154     09 2B 02 F6 | 	mov	local03, arg01
25158     97 06 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
2515c                 | LR__3240
2515c     15 FB C9 FA | 	rdbyte	result1, local03 wz
25160     01 2A 06 51 |  if_ne	add	local03, #1
25164     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
25168                 | LR__3241
25168     09 2B 82 F1 | 	sub	local03, arg01
2516c     15 FB 01 F6 | 	mov	result1, local03
25170     FD 14 02 F6 | 	mov	arg02, result1
25174     14 15 52 F2 | 	cmps	arg02, local02 wc
25178     95 01 00 CF 
2517c     AD FA 05 C6 |  if_b	mov	result1, ##@LR__5166
25180     44 00 90 CD |  if_b	jmp	#LR__3243
25184     0A 2D 02 F6 | 	mov	local04, arg02
25188     14 2D 82 F1 | 	sub	local04, local02
2518c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
25190     0B 2D 02 16 |  if_a	mov	local04, arg03
25194     16 13 02 F6 | 	mov	arg01, local04
25198     02 12 06 F1 | 	add	arg01, #2
2519c     94 1F B0 FD | 	call	#__system___gc_alloc_managed
251a0     FD 2E 0A F6 | 	mov	local05, result1 wz
251a4     1C 00 90 AD |  if_e	jmp	#LR__3242
251a8     13 29 02 F1 | 	add	local02, local01
251ac     17 13 02 F6 | 	mov	arg01, local05
251b0     14 15 02 F6 | 	mov	arg02, local02
251b4     16 17 02 F6 | 	mov	arg03, local04
251b8     F8 DC BF FD | 	call	#__system____builtin_memmove
251bc     17 2D 02 F1 | 	add	local04, local05
251c0     16 01 48 FC | 	wrbyte	#0, local04
251c4                 | LR__3242
251c4     17 FB 01 F6 | 	mov	result1, local05
251c8                 | LR__3243
251c8     A7 F0 03 F6 | 	mov	ptra, fp
251cc     B2 00 A0 FD | 	call	#popregs_
251d0                 | __system__Mid_S_ret
251d0     2D 00 64 FD | 	ret
251d4                 | 
251d4                 | __system__Chr_S
251d4     01 4A 05 F6 | 	mov	COUNT_, #1
251d8     A8 00 A0 FD | 	call	#pushregs_
251dc     09 27 02 F6 | 	mov	local01, arg01
251e0     03 12 06 F6 | 	mov	arg01, #3
251e4     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
251e8     00 FA 4D F2 | 	cmps	result1, #0 wz
251ec     FD 26 42 5C |  if_ne	wrbyte	local01, result1
251f0     01 FA 05 51 |  if_ne	add	result1, #1
251f4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
251f8     01 FA 85 51 |  if_ne	sub	result1, #1
251fc     A7 F0 03 F6 | 	mov	ptra, fp
25200     B2 00 A0 FD | 	call	#popregs_
25204                 | __system__Chr_S_ret
25204     2D 00 64 FD | 	ret
25208                 | 
25208                 | __system__str_S
25208     02 4A 05 F6 | 	mov	COUNT_, #2
2520c     A8 00 A0 FD | 	call	#pushregs_
25210     09 27 02 F6 | 	mov	local01, arg01
25214     10 12 06 F6 | 	mov	arg01, #16
25218     18 1F B0 FD | 	call	#__system___gc_alloc_managed
2521c     FD 28 0A F6 | 	mov	local02, result1 wz
25220     30 00 90 AD |  if_e	jmp	#LR__3250
25224     F8 13 02 F6 | 	mov	arg01, ptra
25228     08 F0 07 F1 | 	add	ptra, #8
2522c     09 29 62 FC | 	wrlong	local02, arg01
25230     04 12 06 F1 | 	add	arg01, #4
25234     09 01 68 FC | 	wrlong	#0, arg01
25238     04 12 86 F1 | 	sub	arg01, #4
2523c     00 E0 04 FF 
25240     00 12 46 F5 | 	or	arg01, ##163577856
25244     00 14 06 F6 | 	mov	arg02, #0
25248     13 17 02 F6 | 	mov	arg03, local01
2524c     67 18 06 F6 | 	mov	arg04, #103
25250     90 EE BF FD | 	call	#__system___fmtfloat
25254                 | LR__3250
25254     14 FB 01 F6 | 	mov	result1, local02
25258     A7 F0 03 F6 | 	mov	ptra, fp
2525c     B2 00 A0 FD | 	call	#popregs_
25260                 | __system__str_S_ret
25260     2D 00 64 FD | 	ret
25264                 | 
25264                 | __system__Number_S
25264     08 4A 05 F6 | 	mov	COUNT_, #8
25268     A8 00 A0 FD | 	call	#pushregs_
2526c     09 27 02 F6 | 	mov	local01, arg01
25270     0A 29 0A F6 | 	mov	local02, arg02 wz
25274     0B 2B 02 F6 | 	mov	local03, arg03
25278     3C 00 90 5D |  if_ne	jmp	#LR__3262
2527c     01 28 06 F6 | 	mov	local02, #1
25280     15 2D 02 F6 | 	mov	local04, local03
25284     01 2E 06 F6 | 	mov	local05, #1
25288     97 16 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
2528c                 | LR__3260
2528c     00 30 06 F6 | 	mov	local06, #0
25290     13 2D 1A F2 | 	cmp	local04, local01 wcz
25294     01 30 66 E6 |  if_be	neg	local06, #1
25298     16 2F 12 F2 | 	cmp	local05, local04 wc
2529c     19 33 A2 F1 | 	subx	local07, local07
252a0     19 31 CA F7 | 	test	local06, local07 wz
252a4     15 2D 02 5D |  if_ne	qmul	local04, local03
252a8     16 2F 02 56 |  if_ne	mov	local05, local04
252ac     01 28 06 51 |  if_ne	add	local02, #1
252b0     18 2C 62 5D |  if_ne	getqx	local04
252b4     D4 FF 9F 5D |  if_ne	jmp	#LR__3260
252b8                 | LR__3261
252b8                 | LR__3262
252b8     20 28 36 F3 | 	fle	local02, #32 wc
252bc     14 13 02 F6 | 	mov	arg01, local02
252c0     02 12 06 F1 | 	add	arg01, #2
252c4     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
252c8     FD 30 02 F6 | 	mov	local06, result1
252cc     14 33 02 F6 | 	mov	local07, local02
252d0     18 33 02 F1 | 	add	local07, local06
252d4     19 01 48 FC | 	wrbyte	#0, local07
252d8     97 1A 48 FB | 	callpa	#(@LR__3264-@LR__3263)>>2,fcache_load_ptr_
252dc                 | LR__3263
252dc     01 28 16 F2 | 	cmp	local02, #1 wc
252e0     2C 00 90 CD |  if_b	jmp	#LR__3265
252e4     15 27 12 FD | 	qdiv	local01, local03
252e8     01 28 86 F1 | 	sub	local02, #1
252ec     14 33 02 F6 | 	mov	local07, local02
252f0     18 33 02 F1 | 	add	local07, local06
252f4     19 34 62 FD | 	getqy	local08
252f8     0A 34 16 F2 | 	cmp	local08, #10 wc
252fc     30 34 06 C1 |  if_b	add	local08, #48
25300     37 34 06 31 |  if_ae	add	local08, #55
25304     19 35 42 FC | 	wrbyte	local08, local07
25308     18 26 62 FD | 	getqx	local01
2530c     CC FF 9F FD | 	jmp	#LR__3263
25310                 | LR__3264
25310                 | LR__3265
25310     18 FB 01 F6 | 	mov	result1, local06
25314     A7 F0 03 F6 | 	mov	ptra, fp
25318     B2 00 A0 FD | 	call	#popregs_
2531c                 | __system__Number_S_ret
2531c     2D 00 64 FD | 	ret
25320                 | 
25320                 | __system__LCase_S
25320     07 4A 05 F6 | 	mov	COUNT_, #7
25324     A8 00 A0 FD | 	call	#pushregs_
25328     09 27 02 F6 | 	mov	local01, arg01
2532c     09 29 02 F6 | 	mov	local02, arg01
25330     97 06 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
25334                 | LR__3270
25334     14 FB C9 FA | 	rdbyte	result1, local02 wz
25338     01 28 06 51 |  if_ne	add	local02, #1
2533c     F4 FF 9F 5D |  if_ne	jmp	#LR__3270
25340                 | LR__3271
25340     09 29 82 F1 | 	sub	local02, arg01
25344     14 FB 01 F6 | 	mov	result1, local02
25348     FD 28 0A F6 | 	mov	local02, result1 wz
2534c     95 01 00 AF 
25350     AE FA 05 A6 |  if_e	mov	result1, ##@LR__5167
25354     7C 00 90 AD |  if_e	jmp	#LR__3277
25358     14 13 02 F6 | 	mov	arg01, local02
2535c     02 12 06 F1 | 	add	arg01, #2
25360     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
25364     FD 2A 0A F6 | 	mov	local03, result1 wz
25368     64 00 90 AD |  if_e	jmp	#LR__3276
2536c     01 2C 66 F6 | 	neg	local04, #1
25370     97 26 48 FB | 	callpa	#(@LR__3275-@LR__3272)>>2,fcache_load_ptr_
25374                 | LR__3272
25374     01 2C 06 F1 | 	add	local04, #1
25378     16 2F 02 F6 | 	mov	local05, local04
2537c     13 2F 02 F1 | 	add	local05, local01
25380     17 31 C2 FA | 	rdbyte	local06, local05
25384     41 30 56 F2 | 	cmps	local06, #65 wc
25388     18 00 90 CD |  if_b	jmp	#LR__3273
2538c     5B 30 56 F2 | 	cmps	local06, #91 wc
25390     16 33 02 C6 |  if_b	mov	local07, local04
25394     15 33 02 C1 |  if_b	add	local07, local03
25398     20 30 06 C1 |  if_b	add	local06, #32
2539c     19 31 42 CC |  if_b	wrbyte	local06, local07
253a0     0C 00 90 CD |  if_b	jmp	#LR__3274
253a4                 | LR__3273
253a4     16 33 02 F6 | 	mov	local07, local04
253a8     15 33 02 F1 | 	add	local07, local03
253ac     19 31 42 FC | 	wrbyte	local06, local07
253b0                 | LR__3274
253b0     14 31 02 F6 | 	mov	local06, local02
253b4     01 30 86 F1 | 	sub	local06, #1
253b8     18 2D 0A F2 | 	cmp	local04, local06 wz
253bc     B4 FF 9F 5D |  if_ne	jmp	#LR__3272
253c0                 | LR__3275
253c0     15 29 02 F1 | 	add	local02, local03
253c4     14 01 48 FC | 	wrbyte	#0, local02
253c8     15 FB 01 F6 | 	mov	result1, local03
253cc     04 00 90 FD | 	jmp	#LR__3277
253d0                 | LR__3276
253d0     15 FB 01 F6 | 	mov	result1, local03
253d4                 | LR__3277
253d4     A7 F0 03 F6 | 	mov	ptra, fp
253d8     B2 00 A0 FD | 	call	#popregs_
253dc                 | __system__LCase_S_ret
253dc     2D 00 64 FD | 	ret
253e0                 | 
253e0                 | __system__LTrim_S
253e0     05 4A 05 F6 | 	mov	COUNT_, #5
253e4     A8 00 A0 FD | 	call	#pushregs_
253e8     09 27 02 F6 | 	mov	local01, arg01
253ec     09 29 02 F6 | 	mov	local02, arg01
253f0     97 06 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
253f4                 | LR__3280
253f4     14 FB C9 FA | 	rdbyte	result1, local02 wz
253f8     01 28 06 51 |  if_ne	add	local02, #1
253fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3280
25400                 | LR__3281
25400     09 29 82 F1 | 	sub	local02, arg01
25404     14 FB 01 F6 | 	mov	result1, local02
25408     FD 28 0A F6 | 	mov	local02, result1 wz
2540c     95 01 00 AF 
25410     AF FA 05 A6 |  if_e	mov	result1, ##@LR__5168
25414     7C 00 90 AD |  if_e	jmp	#LR__3286
25418     00 2A 06 F6 | 	mov	local03, #0
2541c     14 2D 02 F6 | 	mov	local04, local02
25420                 | LR__3282
25420     16 2B 52 F2 | 	cmps	local03, local04 wc
25424     68 00 90 3D |  if_ae	jmp	#LR__3285
25428     15 17 02 F6 | 	mov	arg03, local03
2542c     13 17 02 F1 | 	add	arg03, local01
25430     0B 17 C2 FA | 	rdbyte	arg03, arg03
25434     20 16 0E F2 | 	cmp	arg03, #32 wz
25438     4C 00 90 AD |  if_e	jmp	#LR__3284
2543c     14 13 02 F6 | 	mov	arg01, local02
25440     15 13 82 F1 | 	sub	arg01, local03
25444     02 12 06 F1 | 	add	arg01, #2
25448     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
2544c     FD 2E 0A F6 | 	mov	local05, result1 wz
25450     2C 00 90 AD |  if_e	jmp	#LR__3283
25454     15 15 02 F6 | 	mov	arg02, local03
25458     13 15 02 F1 | 	add	arg02, local01
2545c     14 17 02 F6 | 	mov	arg03, local02
25460     15 17 82 F1 | 	sub	arg03, local03
25464     17 13 02 F6 | 	mov	arg01, local05
25468     48 DA BF FD | 	call	#__system____builtin_memmove
2546c     15 29 82 F1 | 	sub	local02, local03
25470     17 29 02 F1 | 	add	local02, local05
25474     14 01 48 FC | 	wrbyte	#0, local02
25478     17 FB 01 F6 | 	mov	result1, local05
2547c     14 00 90 FD | 	jmp	#LR__3286
25480                 | LR__3283
25480     17 FB 01 F6 | 	mov	result1, local05
25484     0C 00 90 FD | 	jmp	#LR__3286
25488                 | LR__3284
25488     01 2A 06 F1 | 	add	local03, #1
2548c     90 FF 9F FD | 	jmp	#LR__3282
25490                 | LR__3285
25490     13 FB 01 F6 | 	mov	result1, local01
25494                 | LR__3286
25494     A7 F0 03 F6 | 	mov	ptra, fp
25498     B2 00 A0 FD | 	call	#popregs_
2549c                 | __system__LTrim_S_ret
2549c     2D 00 64 FD | 	ret
254a0                 | 
254a0                 | __system__RTrim_S
254a0     04 4A 05 F6 | 	mov	COUNT_, #4
254a4     A8 00 A0 FD | 	call	#pushregs_
254a8     09 27 02 F6 | 	mov	local01, arg01
254ac     09 29 02 F6 | 	mov	local02, arg01
254b0     97 06 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
254b4                 | LR__3290
254b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
254b8     01 28 06 51 |  if_ne	add	local02, #1
254bc     F4 FF 9F 5D |  if_ne	jmp	#LR__3290
254c0                 | LR__3291
254c0     09 29 82 F1 | 	sub	local02, arg01
254c4     14 FB 01 F6 | 	mov	result1, local02
254c8     FD 28 0A F6 | 	mov	local02, result1 wz
254cc     95 01 00 AF 
254d0     B0 FA 05 A6 |  if_e	mov	result1, ##@LR__5169
254d4     74 00 90 AD |  if_e	jmp	#LR__3295
254d8     14 2B 02 F6 | 	mov	local03, local02
254dc     01 2A 86 F1 | 	sub	local03, #1
254e0                 | LR__3292
254e0     15 15 02 F6 | 	mov	arg02, local03
254e4     13 15 02 F1 | 	add	arg02, local01
254e8     0A 29 C2 FA | 	rdbyte	local02, arg02
254ec     20 28 0E F2 | 	cmp	local02, #32 wz
254f0     44 00 90 AD |  if_e	jmp	#LR__3294
254f4     15 13 02 F6 | 	mov	arg01, local03
254f8     02 12 06 F1 | 	add	arg01, #2
254fc     34 1C B0 FD | 	call	#__system___gc_alloc_managed
25500     FD 2C 0A F6 | 	mov	local04, result1 wz
25504     28 00 90 AD |  if_e	jmp	#LR__3293
25508     15 17 02 F6 | 	mov	arg03, local03
2550c     01 16 06 F1 | 	add	arg03, #1
25510     16 13 02 F6 | 	mov	arg01, local04
25514     13 15 02 F6 | 	mov	arg02, local01
25518     98 D9 BF FD | 	call	#__system____builtin_memmove
2551c     01 2A 06 F1 | 	add	local03, #1
25520     16 2B 02 F1 | 	add	local03, local04
25524     15 01 48 FC | 	wrbyte	#0, local03
25528     16 FB 01 F6 | 	mov	result1, local04
2552c     1C 00 90 FD | 	jmp	#LR__3295
25530                 | LR__3293
25530     16 FB 01 F6 | 	mov	result1, local04
25534     14 00 90 FD | 	jmp	#LR__3295
25538                 | LR__3294
25538     01 2A 86 F1 | 	sub	local03, #1
2553c     00 2A 56 F2 | 	cmps	local03, #0 wc
25540     9C FF 9F 3D |  if_ae	jmp	#LR__3292
25544     95 01 00 FF 
25548     B1 FA 05 F6 | 	mov	result1, ##@LR__5170
2554c                 | LR__3295
2554c     A7 F0 03 F6 | 	mov	ptra, fp
25550     B2 00 A0 FD | 	call	#popregs_
25554                 | __system__RTrim_S_ret
25554     2D 00 64 FD | 	ret
25558                 | 
25558                 | __system__Instr
25558     07 4A 05 F6 | 	mov	COUNT_, #7
2555c     A8 00 A0 FD | 	call	#pushregs_
25560     09 27 02 F6 | 	mov	local01, arg01
25564     0A 29 02 F6 | 	mov	local02, arg02
25568     0B 2B 02 F6 | 	mov	local03, arg03
2556c     15 13 02 F6 | 	mov	arg01, local03
25570     09 2D 02 F6 | 	mov	local04, arg01
25574     97 06 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
25578                 | LR__3300
25578     16 FB C9 FA | 	rdbyte	result1, local04 wz
2557c     01 2C 06 51 |  if_ne	add	local04, #1
25580     F4 FF 9F 5D |  if_ne	jmp	#LR__3300
25584                 | LR__3301
25584     09 2D 82 F1 | 	sub	local04, arg01
25588     16 2F 02 F6 | 	mov	local05, local04
2558c     14 13 02 F6 | 	mov	arg01, local02
25590     09 2D 02 F6 | 	mov	local04, arg01
25594     97 06 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
25598                 | LR__3302
25598     16 FB C9 FA | 	rdbyte	result1, local04 wz
2559c     01 2C 06 51 |  if_ne	add	local04, #1
255a0     F4 FF 9F 5D |  if_ne	jmp	#LR__3302
255a4                 | LR__3303
255a4     09 2D 82 F1 | 	sub	local04, arg01
255a8     16 FB 01 F6 | 	mov	result1, local04
255ac     FD 18 0A F6 | 	mov	arg04, result1 wz
255b0     00 FA 05 A6 |  if_e	mov	result1, #0
255b4     98 00 90 AD |  if_e	jmp	#LR__3307
255b8     00 2E 0E F2 | 	cmp	local05, #0 wz
255bc     00 FA 05 A6 |  if_e	mov	result1, #0
255c0     8C 00 90 AD |  if_e	jmp	#LR__3307
255c4     0C 27 5A F2 | 	cmps	local01, arg04 wcz
255c8     00 FA 05 16 |  if_a	mov	result1, #0
255cc     80 00 90 1D |  if_a	jmp	#LR__3307
255d0     01 26 56 F2 | 	cmps	local01, #1 wc
255d4     01 26 06 C6 |  if_b	mov	local01, #1
255d8     15 31 C2 FA | 	rdbyte	local06, local03
255dc     01 2E 0E F2 | 	cmp	local05, #1 wz
255e0     18 00 90 5D |  if_ne	jmp	#LR__3304
255e4     14 13 02 F6 | 	mov	arg01, local02
255e8     18 15 02 F6 | 	mov	arg02, local06
255ec     13 17 02 F6 | 	mov	arg03, local01
255f0     00 18 06 F6 | 	mov	arg04, #0
255f4     14 37 B0 FD | 	call	#__system____ScanForChar
255f8     54 00 90 FD | 	jmp	#LR__3307
255fc                 | LR__3304
255fc     13 33 02 F6 | 	mov	local07, local01
25600                 | LR__3305
25600     14 13 02 F6 | 	mov	arg01, local02
25604     18 15 02 F6 | 	mov	arg02, local06
25608     19 17 02 F6 | 	mov	arg03, local07
2560c     00 18 06 F6 | 	mov	arg04, #0
25610     F8 36 B0 FD | 	call	#__system____ScanForChar
25614     FD 32 0A F6 | 	mov	local07, result1 wz
25618     30 00 90 AD |  if_e	jmp	#LR__3306
2561c     17 17 02 F6 | 	mov	arg03, local05
25620     14 13 02 F6 | 	mov	arg01, local02
25624     19 15 02 F6 | 	mov	arg02, local07
25628     FC FA BF FD | 	call	#__system__Mid_S
2562c     FD 12 02 F6 | 	mov	arg01, result1
25630     15 15 02 F6 | 	mov	arg02, local03
25634     84 D9 BF FD | 	call	#__system___string_cmp
25638     00 FA 0D F2 | 	cmp	result1, #0 wz
2563c     19 FB 01 A6 |  if_e	mov	result1, local07
25640     0C 00 90 AD |  if_e	jmp	#LR__3307
25644     17 33 02 F1 | 	add	local07, local05
25648     B4 FF 9F FD | 	jmp	#LR__3305
2564c                 | LR__3306
2564c     00 FA 05 F6 | 	mov	result1, #0
25650                 | LR__3307
25650     A7 F0 03 F6 | 	mov	ptra, fp
25654     B2 00 A0 FD | 	call	#popregs_
25658                 | __system__Instr_ret
25658     2D 00 64 FD | 	ret
2565c                 | 
2565c                 | __system__InstrRev
2565c     07 4A 05 F6 | 	mov	COUNT_, #7
25660     A8 00 A0 FD | 	call	#pushregs_
25664     09 27 02 F6 | 	mov	local01, arg01
25668     0A 29 02 F6 | 	mov	local02, arg02
2566c     0B 2B 02 F6 | 	mov	local03, arg03
25670     15 13 02 F6 | 	mov	arg01, local03
25674     09 2D 02 F6 | 	mov	local04, arg01
25678     97 06 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
2567c                 | LR__3310
2567c     16 FB C9 FA | 	rdbyte	result1, local04 wz
25680     01 2C 06 51 |  if_ne	add	local04, #1
25684     F4 FF 9F 5D |  if_ne	jmp	#LR__3310
25688                 | LR__3311
25688     09 2D 82 F1 | 	sub	local04, arg01
2568c     16 2F 02 F6 | 	mov	local05, local04
25690     14 13 02 F6 | 	mov	arg01, local02
25694     09 2D 02 F6 | 	mov	local04, arg01
25698     97 06 48 FB | 	callpa	#(@LR__3313-@LR__3312)>>2,fcache_load_ptr_
2569c                 | LR__3312
2569c     16 FB C9 FA | 	rdbyte	result1, local04 wz
256a0     01 2C 06 51 |  if_ne	add	local04, #1
256a4     F4 FF 9F 5D |  if_ne	jmp	#LR__3312
256a8                 | LR__3313
256a8     09 2D 82 F1 | 	sub	local04, arg01
256ac     16 FB 01 F6 | 	mov	result1, local04
256b0     FD 18 0A F6 | 	mov	arg04, result1 wz
256b4     00 FA 05 A6 |  if_e	mov	result1, #0
256b8     98 00 90 AD |  if_e	jmp	#LR__3317
256bc     00 2E 0E F2 | 	cmp	local05, #0 wz
256c0     00 FA 05 A6 |  if_e	mov	result1, #0
256c4     8C 00 90 AD |  if_e	jmp	#LR__3317
256c8     0C 27 5A F2 | 	cmps	local01, arg04 wcz
256cc     0C 27 02 16 |  if_a	mov	local01, arg04
256d0     01 26 56 F2 | 	cmps	local01, #1 wc
256d4     01 26 06 C6 |  if_b	mov	local01, #1
256d8     15 31 C2 FA | 	rdbyte	local06, local03
256dc     01 2E 0E F2 | 	cmp	local05, #1 wz
256e0     18 00 90 5D |  if_ne	jmp	#LR__3314
256e4     14 13 02 F6 | 	mov	arg01, local02
256e8     18 15 02 F6 | 	mov	arg02, local06
256ec     13 17 02 F6 | 	mov	arg03, local01
256f0     01 18 06 F6 | 	mov	arg04, #1
256f4     14 36 B0 FD | 	call	#__system____ScanForChar
256f8     58 00 90 FD | 	jmp	#LR__3317
256fc                 | LR__3314
256fc     17 33 02 F6 | 	mov	local07, local05
25700     01 32 86 F1 | 	sub	local07, #1
25704                 | LR__3315
25704     14 13 02 F6 | 	mov	arg01, local02
25708     18 15 02 F6 | 	mov	arg02, local06
2570c     19 17 02 F6 | 	mov	arg03, local07
25710     01 18 06 F6 | 	mov	arg04, #1
25714     F4 35 B0 FD | 	call	#__system____ScanForChar
25718     FD 32 0A F6 | 	mov	local07, result1 wz
2571c     30 00 90 AD |  if_e	jmp	#LR__3316
25720     17 17 02 F6 | 	mov	arg03, local05
25724     14 13 02 F6 | 	mov	arg01, local02
25728     19 15 02 F6 | 	mov	arg02, local07
2572c     F8 F9 BF FD | 	call	#__system__Mid_S
25730     FD 12 02 F6 | 	mov	arg01, result1
25734     15 15 02 F6 | 	mov	arg02, local03
25738     80 D8 BF FD | 	call	#__system___string_cmp
2573c     00 FA 0D F2 | 	cmp	result1, #0 wz
25740     19 FB 01 A6 |  if_e	mov	result1, local07
25744     0C 00 90 AD |  if_e	jmp	#LR__3317
25748     17 33 82 F1 | 	sub	local07, local05
2574c     B4 FF 9F FD | 	jmp	#LR__3315
25750                 | LR__3316
25750     00 FA 05 F6 | 	mov	result1, #0
25754                 | LR__3317
25754     A7 F0 03 F6 | 	mov	ptra, fp
25758     B2 00 A0 FD | 	call	#popregs_
2575c                 | __system__InstrRev_ret
2575c     2D 00 64 FD | 	ret
25760                 | 
25760                 | __system___remove
25760     06 4A 05 F6 | 	mov	COUNT_, #6
25764     A8 00 A0 FD | 	call	#pushregs_
25768     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2576c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
25770     09 15 02 F6 | 	mov	arg02, arg01
25774     13 13 02 F6 | 	mov	arg01, local01
25778     00 16 06 F6 | 	mov	arg03, #0
2577c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25780     A8 DF BF FD | 	call	#__system____getvfsforfile
25784     FD 28 0A F6 | 	mov	local02, result1 wz
25788     10 00 90 AD |  if_e	jmp	#LR__3320
2578c     20 28 06 F1 | 	add	local02, #32
25790     14 13 0A FB | 	rdlong	arg01, local02 wz
25794     20 28 86 F1 | 	sub	local02, #32
25798     14 00 90 5D |  if_ne	jmp	#LR__3321
2579c                 | LR__3320
2579c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
257a0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
257a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
257a8     01 FA 65 F6 | 	neg	result1, #1
257ac     A8 00 90 FD | 	jmp	#LR__3324
257b0                 | LR__3321
257b0     40 28 06 F1 | 	add	local02, #64
257b4     14 2B 02 FB | 	rdlong	local03, local02
257b8     15 2D 02 F6 | 	mov	local04, local03
257bc     40 28 86 F1 | 	sub	local02, #64
257c0     13 2C 46 F7 | 	zerox	local04, #19
257c4     14 2A 46 F0 | 	shr	local03, #20
257c8     02 2A 66 F0 | 	shl	local03, #2
257cc     ED 2A 02 F1 | 	add	local03, __methods__
257d0     15 2B 02 FB | 	rdlong	local03, local03
257d4     13 13 02 F6 | 	mov	arg01, local01
257d8     F2 2E 02 F6 | 	mov	local05, objptr
257dc     16 E5 01 F6 | 	mov	objptr, local04
257e0     2D 2A 62 FD | 	call	local03
257e4     17 E5 01 F6 | 	mov	objptr, local05
257e8     FD 30 02 F6 | 	mov	local06, result1
257ec     FF FF 7F FF 
257f0     F2 31 0E F2 | 	cmp	local06, ##-14 wz
257f4     38 00 90 5D |  if_ne	jmp	#LR__3322
257f8     3C 28 06 F1 | 	add	local02, #60
257fc     14 31 02 FB | 	rdlong	local06, local02
25800     18 2B 02 F6 | 	mov	local03, local06
25804     13 30 46 F7 | 	zerox	local06, #19
25808     14 2A 46 F0 | 	shr	local03, #20
2580c     02 2A 66 F0 | 	shl	local03, #2
25810     ED 2A 02 F1 | 	add	local03, __methods__
25814     15 2B 02 FB | 	rdlong	local03, local03
25818     13 13 02 F6 | 	mov	arg01, local01
2581c     F2 2E 02 F6 | 	mov	local05, objptr
25820     18 E5 01 F6 | 	mov	objptr, local06
25824     2D 2A 62 FD | 	call	local03
25828     17 E5 01 F6 | 	mov	objptr, local05
2582c     FD 30 02 F6 | 	mov	local06, result1
25830                 | LR__3322
25830     00 30 0E F2 | 	cmp	local06, #0 wz
25834     1C 00 90 AD |  if_e	jmp	#LR__3323
25838     18 13 6A F6 | 	neg	arg01, local06 wz
2583c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25840     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25844     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25848     01 FA 65 56 |  if_ne	neg	result1, #1
2584c     00 FA 05 A6 |  if_e	mov	result1, #0
25850     04 00 90 FD | 	jmp	#LR__3324
25854                 | LR__3323
25854     00 FA 05 F6 | 	mov	result1, #0
25858                 | LR__3324
25858     A7 F0 03 F6 | 	mov	ptra, fp
2585c     B2 00 A0 FD | 	call	#popregs_
25860                 | __system___remove_ret
25860     2D 00 64 FD | 	ret
25864                 | 
25864                 | __system___mkdir
25864     05 4A 05 F6 | 	mov	COUNT_, #5
25868     A8 00 A0 FD | 	call	#pushregs_
2586c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25870     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
25874     09 15 02 F6 | 	mov	arg02, arg01
25878     13 13 02 F6 | 	mov	arg01, local01
2587c     00 16 06 F6 | 	mov	arg03, #0
25880     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25884     A4 DE BF FD | 	call	#__system____getvfsforfile
25888     FD 28 0A F6 | 	mov	local02, result1 wz
2588c     10 00 90 AD |  if_e	jmp	#LR__3330
25890     20 28 06 F1 | 	add	local02, #32
25894     14 15 0A FB | 	rdlong	arg02, local02 wz
25898     20 28 86 F1 | 	sub	local02, #32
2589c     14 00 90 5D |  if_ne	jmp	#LR__3331
258a0                 | LR__3330
258a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
258a4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
258a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
258ac     01 FA 65 F6 | 	neg	result1, #1
258b0     60 00 90 FD | 	jmp	#LR__3333
258b4                 | LR__3331
258b4     38 28 06 F1 | 	add	local02, #56
258b8     14 2B 02 FB | 	rdlong	local03, local02
258bc     15 2D 02 F6 | 	mov	local04, local03
258c0     13 2A 46 F7 | 	zerox	local03, #19
258c4     14 2C 46 F0 | 	shr	local04, #20
258c8     02 2C 66 F0 | 	shl	local04, #2
258cc     ED 2C 02 F1 | 	add	local04, __methods__
258d0     16 2D 02 FB | 	rdlong	local04, local04
258d4     13 13 02 F6 | 	mov	arg01, local01
258d8     FF 15 06 F6 | 	mov	arg02, #511
258dc     F2 2E 02 F6 | 	mov	local05, objptr
258e0     15 E5 01 F6 | 	mov	objptr, local03
258e4     2D 2C 62 FD | 	call	local04
258e8     17 E5 01 F6 | 	mov	objptr, local05
258ec     FD 12 0A F6 | 	mov	arg01, result1 wz
258f0     1C 00 90 AD |  if_e	jmp	#LR__3332
258f4     09 13 6A F6 | 	neg	arg01, arg01 wz
258f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
258fc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25900     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25904     01 FA 65 56 |  if_ne	neg	result1, #1
25908     00 FA 05 A6 |  if_e	mov	result1, #0
2590c     04 00 90 FD | 	jmp	#LR__3333
25910                 | LR__3332
25910     00 FA 05 F6 | 	mov	result1, #0
25914                 | LR__3333
25914     A7 F0 03 F6 | 	mov	ptra, fp
25918     B2 00 A0 FD | 	call	#popregs_
2591c                 | __system___mkdir_ret
2591c     2D 00 64 FD | 	ret
25920                 | 
25920                 | __system___strerror
25920     00 12 56 F2 | 	cmps	arg01, #0 wc
25924     08 00 90 CD |  if_b	jmp	#LR__3340
25928     1A 12 56 F2 | 	cmps	arg01, #26 wc
2592c     04 00 90 CD |  if_b	jmp	#LR__3341
25930                 | LR__3340
25930     19 12 06 F6 | 	mov	arg01, #25
25934                 | LR__3341
25934     02 12 66 F0 | 	shl	arg01, #2
25938     01 00 00 FF 
2593c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
25940     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25944     09 FB 01 FB | 	rdlong	result1, arg01
25948     01 00 00 FF 
2594c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
25950                 | __system___strerror_ret
25950     2D 00 64 FD | 	ret
25954                 | 
25954                 | __system___int64_shl
25954     20 16 CE F7 | 	test	arg03, #32 wz
25958     09 15 02 56 |  if_ne	mov	arg02, arg01
2595c     00 12 06 56 |  if_ne	mov	arg01, #0
25960     1F 16 CE F7 | 	test	arg03, #31 wz
25964     18 00 90 AD |  if_e	jmp	#LR__3350
25968     0B 15 62 F0 | 	shl	arg02, arg03
2596c     09 FB 01 F6 | 	mov	result1, arg01
25970     0B FD 61 F6 | 	neg	result2, arg03
25974     FE FA 41 F0 | 	shr	result1, result2
25978     FD 14 42 F5 | 	or	arg02, result1
2597c     0B 13 62 F0 | 	shl	arg01, arg03
25980                 | LR__3350
25980     0A FD 01 F6 | 	mov	result2, arg02
25984     09 FB 01 F6 | 	mov	result1, arg01
25988                 | __system___int64_shl_ret
25988     2D 00 64 FD | 	ret
2598c                 | 
2598c                 | __system___usepins
2598c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
25990     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
25994     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
25998     00 13 CA F7 | 	test	arg01, _var01 wz
2599c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
259a0     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
259a4     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
259a8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
259ac     00 FA 05 56 |  if_ne	mov	result1, #0
259b0     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
259b4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
259b8     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
259bc     09 03 42 F5 | 	or	_var02, arg01
259c0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
259c4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
259c8     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
259cc     0A 03 42 F5 | 	or	_var02, arg02
259d0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
259d4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
259d8     01 FA 65 F6 | 	neg	result1, #1
259dc                 | __system___usepins_ret
259dc     2D 00 64 FD | 	ret
259e0                 | 
259e0                 | __system___freepins
259e0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
259e4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
259e8     09 01 22 F5 | 	andn	_var01, arg01
259ec     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
259f0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
259f4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
259f8     0A 01 22 F5 | 	andn	_var01, arg02
259fc     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
25a00     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
25a04                 | __system___freepins_ret
25a04     2D 00 64 FD | 	ret
25a08                 | 
25a08                 | __system___float_fromuns
25a08     09 17 0A F6 | 	mov	arg03, arg01 wz
25a0c     0B FB 01 A6 |  if_e	mov	result1, arg03
25a10     24 00 90 AD |  if_e	jmp	#LR__3360
25a14     0B 15 92 F7 | 	encod	arg02, arg03 wc
25a18     01 14 06 C1 |  if_b	add	arg02, #1
25a1c     01 14 86 F1 | 	sub	arg02, #1
25a20     1F 12 06 F6 | 	mov	arg01, #31
25a24     0A 13 82 F1 | 	sub	arg01, arg02
25a28     09 17 62 F0 | 	shl	arg03, arg01
25a2c     02 16 46 F0 | 	shr	arg03, #2
25a30     00 12 06 F6 | 	mov	arg01, #0
25a34     4C 09 B0 FD | 	call	#__system___float_Pack
25a38                 | LR__3360
25a38                 | __system___float_fromuns_ret
25a38     2D 00 64 FD | 	ret
25a3c                 | 
25a3c                 | __system___float_add
25a3c     0F 4A 05 F6 | 	mov	COUNT_, #15
25a40     A8 00 A0 FD | 	call	#pushregs_
25a44     09 27 02 F6 | 	mov	local01, arg01
25a48     0A 29 02 F6 | 	mov	local02, arg02
25a4c     00 2A 06 F6 | 	mov	local03, #0
25a50     13 2D 02 F6 | 	mov	local04, local01
25a54     16 2F 02 F6 | 	mov	local05, local04
25a58     16 2E 46 F7 | 	zerox	local05, #22
25a5c     16 31 02 F6 | 	mov	local06, local04
25a60     01 30 66 F0 | 	shl	local06, #1
25a64     18 30 46 F0 | 	shr	local06, #24
25a68     1F 2C 46 F0 | 	shr	local04, #31
25a6c     14 13 02 F6 | 	mov	arg01, local02
25a70     09 FB 01 F6 | 	mov	result1, arg01
25a74     FD 32 02 F6 | 	mov	local07, result1
25a78     19 35 02 F6 | 	mov	local08, local07
25a7c     16 34 46 F7 | 	zerox	local08, #22
25a80     19 37 02 F6 | 	mov	local09, local07
25a84     01 36 66 F0 | 	shl	local09, #1
25a88     18 36 46 F0 | 	shr	local09, #24
25a8c     1B 39 02 F6 | 	mov	local10, local09
25a90     1F 32 46 F0 | 	shr	local07, #31
25a94     00 3A 06 F6 | 	mov	local11, #0
25a98     00 3C 06 F6 | 	mov	local12, #0
25a9c     1C 31 12 F2 | 	cmp	local06, local10 wc
25aa0     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
25aa4     2C 00 90 1D |  if_a	jmp	#LR__3370
25aa8     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
25aac     24 00 90 3D |  if_ae	jmp	#LR__3370
25ab0     17 3F 02 F6 | 	mov	local13, local05
25ab4     1A 2F 02 F6 | 	mov	local05, local08
25ab8     1F 35 02 F6 | 	mov	local08, local13
25abc     18 3F 02 F6 | 	mov	local13, local06
25ac0     1C 31 02 F6 | 	mov	local06, local10
25ac4     1F 39 02 F6 | 	mov	local10, local13
25ac8     16 3F 02 F6 | 	mov	local13, local04
25acc     19 2D 02 F6 | 	mov	local04, local07
25ad0     1F 33 02 F6 | 	mov	local07, local13
25ad4                 | LR__3370
25ad4     FF 30 0E F2 | 	cmp	local06, #255 wz
25ad8     70 01 90 AD |  if_e	jmp	#LR__3385
25adc     00 30 0E F2 | 	cmp	local06, #0 wz
25ae0     AC 01 90 AD |  if_e	jmp	#LR__3387
25ae4     17 2E 26 F4 | 	bith	local05, #23
25ae8                 | LR__3371
25ae8     00 38 0E F2 | 	cmp	local10, #0 wz
25aec     F0 01 90 AD |  if_e	jmp	#LR__3391
25af0     17 34 26 F4 | 	bith	local08, #23
25af4                 | LR__3372
25af4     7F 30 86 F1 | 	sub	local06, #127
25af8     7F 38 86 F1 | 	sub	local10, #127
25afc     18 41 02 F6 | 	mov	local14, local06
25b00     1C 41 82 F1 | 	sub	local14, local10
25b04     97 14 48 FB | 	callpa	#(@LR__3374-@LR__3373)>>2,fcache_load_ptr_
25b08                 | LR__3373
25b08     20 40 56 F2 | 	cmps	local14, #32 wc
25b0c     20 00 90 CD |  if_b	jmp	#LR__3375
25b10     1A 37 02 F6 | 	mov	local09, local08
25b14     00 3A 0E F2 | 	cmp	local11, #0 wz
25b18     6F 3A 62 FD | 	wrnz	local11
25b1c     1D 37 42 F5 | 	or	local09, local11
25b20     1B 3B 02 F6 | 	mov	local11, local09
25b24     00 34 06 F6 | 	mov	local08, #0
25b28     20 40 86 F1 | 	sub	local14, #32
25b2c     D8 FF 9F FD | 	jmp	#LR__3373
25b30                 | LR__3374
25b30                 | LR__3375
25b30     00 40 0E F2 | 	cmp	local14, #0 wz
25b34     38 00 90 AD |  if_e	jmp	#LR__3376
25b38     1A 3F 02 F6 | 	mov	local13, local08
25b3c     20 38 06 F6 | 	mov	local10, #32
25b40     20 39 82 F1 | 	sub	local10, local14
25b44     1C 3F 62 F0 | 	shl	local13, local10
25b48     1D 39 02 F6 | 	mov	local10, local11
25b4c     20 36 06 F6 | 	mov	local09, #32
25b50     20 37 82 F1 | 	sub	local09, local14
25b54     1B 39 6A F0 | 	shl	local10, local09 wz
25b58     20 3B 42 F0 | 	shr	local11, local14
25b5c     20 35 42 F0 | 	shr	local08, local14
25b60     1F 3B 42 F5 | 	or	local11, local13
25b64     00 42 06 F6 | 	mov	local15, #0
25b68     01 42 06 56 |  if_ne	mov	local15, #1
25b6c     21 3B 42 F5 | 	or	local11, local15
25b70                 | LR__3376
25b70     16 43 02 F6 | 	mov	local15, local04
25b74     19 43 62 F5 | 	xor	local15, local07
25b78     01 42 CE F7 | 	test	local15, #1 wz
25b7c     18 00 90 AD |  if_e	jmp	#LR__3377
25b80     1A 35 22 F6 | 	not	local08, local08
25b84     1D 3B 22 F6 | 	not	local11, local11
25b88     01 3A 0E F1 | 	add	local11, #1 wz
25b8c     00 42 06 F6 | 	mov	local15, #0
25b90     01 42 06 A6 |  if_e	mov	local15, #1
25b94     21 35 02 F1 | 	add	local08, local15
25b98                 | LR__3377
25b98     1D 3D 12 F1 | 	add	local12, local11 wc
25b9c     1A 2F 22 F1 | 	addx	local05, local08
25ba0     00 2E 56 F2 | 	cmps	local05, #0 wc
25ba4     1C 00 90 3D |  if_ae	jmp	#LR__3378
25ba8     01 2C 66 F5 | 	xor	local04, #1
25bac     17 2F 22 F6 | 	not	local05, local05
25bb0     1E 3D 22 F6 | 	not	local12, local12
25bb4     01 3C 0E F1 | 	add	local12, #1 wz
25bb8     00 42 06 F6 | 	mov	local15, #0
25bbc     01 42 06 A6 |  if_e	mov	local15, #1
25bc0     21 2F 02 F1 | 	add	local05, local15
25bc4                 | LR__3378
25bc4     00 80 00 FF 
25bc8     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
25bcc     28 00 90 CD |  if_b	jmp	#LR__3379
25bd0     01 30 06 F1 | 	add	local06, #1
25bd4     1E 41 02 F6 | 	mov	local14, local12
25bd8     01 40 06 F5 | 	and	local14, #1
25bdc     01 3C 46 F0 | 	shr	local12, #1
25be0     17 43 02 F6 | 	mov	local15, local05
25be4     1F 42 66 F0 | 	shl	local15, #31
25be8     21 3D 42 F5 | 	or	local12, local15
25bec     20 3D 42 F5 | 	or	local12, local14
25bf0     01 2E 46 F0 | 	shr	local05, #1
25bf4     3C 00 90 FD | 	jmp	#LR__3384
25bf8                 | LR__3379
25bf8     00 40 00 FF 
25bfc     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
25c00     30 00 90 3D |  if_ae	jmp	#LR__3383
25c04     00 2E 0E F2 | 	cmp	local05, #0 wz
25c08     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
25c0c     08 2C 46 A5 |  if_e	or	local04, #8
25c10     01 2C 26 A5 |  if_e	andn	local04, #1
25c14     1C 00 90 AD |  if_e	jmp	#LR__3382
25c18                 | LR__3380
25c18     00 40 00 FF 
25c1c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
25c20     10 00 90 3D |  if_ae	jmp	#LR__3381
25c24     1E 3D 12 F1 | 	add	local12, local12 wc
25c28     17 2F 22 F1 | 	addx	local05, local05
25c2c     01 30 86 F1 | 	sub	local06, #1
25c30     E4 FF 9F FD | 	jmp	#LR__3380
25c34                 | LR__3381
25c34                 | LR__3382
25c34                 | LR__3383
25c34                 | LR__3384
25c34     17 13 02 F6 | 	mov	arg01, local05
25c38     1E 15 02 F6 | 	mov	arg02, local12
25c3c     18 17 02 F6 | 	mov	arg03, local06
25c40     16 19 02 F6 | 	mov	arg04, local04
25c44     08 35 B0 FD | 	call	#__system__pack_0630
25c48     DC 00 90 FD | 	jmp	#LR__3395
25c4c                 | LR__3385
25c4c     FF 38 0E F2 | 	cmp	local10, #255 wz
25c50     10 00 90 5D |  if_ne	jmp	#LR__3386
25c54     16 33 0A F2 | 	cmp	local07, local04 wz
25c58     00 F8 3F 5F 
25c5c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
25c60     C4 00 90 5D |  if_ne	jmp	#LR__3395
25c64                 | LR__3386
25c64     00 2E 0E F2 | 	cmp	local05, #0 wz
25c68     00 F8 3F 5F 
25c6c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
25c70     B4 00 90 5D |  if_ne	jmp	#LR__3395
25c74     1E 15 02 F6 | 	mov	arg02, local12
25c78     18 17 02 F6 | 	mov	arg03, local06
25c7c     16 19 02 F6 | 	mov	arg04, local04
25c80     02 18 46 F5 | 	or	arg04, #2
25c84     17 13 02 F6 | 	mov	arg01, local05
25c88     C4 34 B0 FD | 	call	#__system__pack_0630
25c8c     98 00 90 FD | 	jmp	#LR__3395
25c90                 | LR__3387
25c90     00 2E 0E F2 | 	cmp	local05, #0 wz
25c94     28 00 90 AD |  if_e	jmp	#LR__3390
25c98     01 2E 66 F0 | 	shl	local05, #1
25c9c     97 0E 48 FB | 	callpa	#(@LR__3389-@LR__3388)>>2,fcache_load_ptr_
25ca0                 | LR__3388
25ca0     00 40 00 FF 
25ca4     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
25ca8     18 43 02 C6 |  if_b	mov	local15, local06
25cac     01 42 86 C1 |  if_b	sub	local15, #1
25cb0     21 31 02 C6 |  if_b	mov	local06, local15
25cb4     01 2E 66 C0 |  if_b	shl	local05, #1
25cb8     E4 FF 9F CD |  if_b	jmp	#LR__3388
25cbc                 | LR__3389
25cbc     28 FE 9F FD | 	jmp	#LR__3371
25cc0                 | LR__3390
25cc0     19 2D 02 F5 | 	and	local04, local07
25cc4     16 19 02 F6 | 	mov	arg04, local04
25cc8     08 18 46 F5 | 	or	arg04, #8
25ccc     00 12 06 F6 | 	mov	arg01, #0
25cd0     00 14 06 F6 | 	mov	arg02, #0
25cd4     00 16 06 F6 | 	mov	arg03, #0
25cd8     74 34 B0 FD | 	call	#__system__pack_0630
25cdc     48 00 90 FD | 	jmp	#LR__3395
25ce0                 | LR__3391
25ce0     00 34 0E F2 | 	cmp	local08, #0 wz
25ce4     28 00 90 AD |  if_e	jmp	#LR__3394
25ce8     01 34 66 F0 | 	shl	local08, #1
25cec     97 0E 48 FB | 	callpa	#(@LR__3393-@LR__3392)>>2,fcache_load_ptr_
25cf0                 | LR__3392
25cf0     00 40 00 FF 
25cf4     00 34 16 F2 | 	cmp	local08, ##8388608 wc
25cf8     1C 43 02 C6 |  if_b	mov	local15, local10
25cfc     01 42 86 C1 |  if_b	sub	local15, #1
25d00     21 39 02 C6 |  if_b	mov	local10, local15
25d04     01 34 66 C0 |  if_b	shl	local08, #1
25d08     E4 FF 9F CD |  if_b	jmp	#LR__3392
25d0c                 | LR__3393
25d0c     E4 FD 9F FD | 	jmp	#LR__3372
25d10                 | LR__3394
25d10     7F 30 86 F1 | 	sub	local06, #127
25d14     17 13 02 F6 | 	mov	arg01, local05
25d18     1E 15 02 F6 | 	mov	arg02, local12
25d1c     18 17 02 F6 | 	mov	arg03, local06
25d20     16 19 02 F6 | 	mov	arg04, local04
25d24     28 34 B0 FD | 	call	#__system__pack_0630
25d28                 | LR__3395
25d28     A7 F0 03 F6 | 	mov	ptra, fp
25d2c     B2 00 A0 FD | 	call	#popregs_
25d30                 | __system___float_add_ret
25d30     2D 00 64 FD | 	ret
25d34                 | 
25d34                 | __system___float_sqrt
25d34     04 4A 05 F6 | 	mov	COUNT_, #4
25d38     A8 00 A0 FD | 	call	#pushregs_
25d3c     09 27 02 F6 | 	mov	local01, arg01
25d40     09 FB 01 F6 | 	mov	result1, arg01
25d44     FD 28 02 F6 | 	mov	local02, result1
25d48     14 2B 02 F6 | 	mov	local03, local02
25d4c     16 2A 46 F7 | 	zerox	local03, #22
25d50     14 2D 02 F6 | 	mov	local04, local02
25d54     01 2C 66 F0 | 	shl	local04, #1
25d58     18 2C 4E F0 | 	shr	local04, #24 wz
25d5c     1F 28 46 F0 | 	shr	local02, #31
25d60     70 00 90 AD |  if_e	jmp	#LR__3401
25d64     17 2A 26 F4 | 	bith	local03, #23
25d68                 | LR__3400
25d68     00 28 0E F2 | 	cmp	local02, #0 wz
25d6c     00 F8 3F 5F 
25d70     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
25d74     88 00 90 5D |  if_ne	jmp	#LR__3404
25d78     FF 2C 0E F2 | 	cmp	local04, #255 wz
25d7c     13 FB 01 A6 |  if_e	mov	result1, local01
25d80     7C 00 90 AD |  if_e	jmp	#LR__3404
25d84     7F 2C 86 F1 | 	sub	local04, #127
25d88     01 2C CE F7 | 	test	local04, #1 wz
25d8c     01 2A 66 50 |  if_ne	shl	local03, #1
25d90     05 2A 66 F0 | 	shl	local03, #5
25d94     15 01 38 FD | 	qsqrt	#0, local03
25d98     01 2C 86 51 |  if_ne	sub	local04, #1
25d9c     16 2D 52 F6 | 	abs	local04, local04 wc
25da0     01 2C 46 F0 | 	shr	local04, #1
25da4     16 17 82 F6 | 	negc	arg03, local04
25da8     14 19 02 F6 | 	mov	arg04, local02
25dac     18 12 62 FD | 	getqx	arg01
25db0     09 15 02 F6 | 	mov	arg02, arg01
25db4     19 14 66 F0 | 	shl	arg02, #25
25db8     07 12 46 F0 | 	shr	arg01, #7
25dbc     00 80 00 FF 
25dc0     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
25dc4     01 16 06 31 |  if_ae	add	arg03, #1
25dc8     01 12 46 30 |  if_ae	shr	arg01, #1
25dcc     80 33 B0 FD | 	call	#__system__pack_0630
25dd0     2C 00 90 FD | 	jmp	#LR__3404
25dd4                 | LR__3401
25dd4     00 2A 0E F2 | 	cmp	local03, #0 wz
25dd8     13 FB 01 A6 |  if_e	mov	result1, local01
25ddc     20 00 90 AD |  if_e	jmp	#LR__3404
25de0     01 2A 66 F0 | 	shl	local03, #1
25de4     97 0A 48 FB | 	callpa	#(@LR__3403-@LR__3402)>>2,fcache_load_ptr_
25de8                 | LR__3402
25de8     00 40 00 FF 
25dec     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
25df0     01 2C 86 C1 |  if_b	sub	local04, #1
25df4     01 2A 66 C0 |  if_b	shl	local03, #1
25df8     EC FF 9F CD |  if_b	jmp	#LR__3402
25dfc                 | LR__3403
25dfc     68 FF 9F FD | 	jmp	#LR__3400
25e00                 | LR__3404
25e00     A7 F0 03 F6 | 	mov	ptra, fp
25e04     B2 00 A0 FD | 	call	#popregs_
25e08                 | __system___float_sqrt_ret
25e08     2D 00 64 FD | 	ret
25e0c                 | 
25e0c                 | __system___float_mul
25e0c     0B 4A 05 F6 | 	mov	COUNT_, #11
25e10     A8 00 A0 FD | 	call	#pushregs_
25e14     09 27 02 F6 | 	mov	local01, arg01
25e18     0A 29 02 F6 | 	mov	local02, arg02
25e1c     13 2B 02 F6 | 	mov	local03, local01
25e20     15 2D 02 F6 | 	mov	local04, local03
25e24     16 2C 46 F7 | 	zerox	local04, #22
25e28     15 2F 02 F6 | 	mov	local05, local03
25e2c     01 2E 66 F0 | 	shl	local05, #1
25e30     18 2E 46 F0 | 	shr	local05, #24
25e34     1F 2A 46 F0 | 	shr	local03, #31
25e38     14 FB 01 F6 | 	mov	result1, local02
25e3c     FD 30 02 F6 | 	mov	local06, result1
25e40     18 33 02 F6 | 	mov	local07, local06
25e44     16 32 46 F7 | 	zerox	local07, #22
25e48     18 35 02 F6 | 	mov	local08, local06
25e4c     01 34 66 F0 | 	shl	local08, #1
25e50     18 34 46 F0 | 	shr	local08, #24
25e54     1F 30 46 F0 | 	shr	local06, #31
25e58     18 2B 62 F5 | 	xor	local03, local06
25e5c     FF 2E 0E F2 | 	cmp	local05, #255 wz
25e60     90 00 90 AD |  if_e	jmp	#LR__3413
25e64     FF 34 0E F2 | 	cmp	local08, #255 wz
25e68     D8 00 90 AD |  if_e	jmp	#LR__3415
25e6c     00 2E 0E F2 | 	cmp	local05, #0 wz
25e70     0C 01 90 AD |  if_e	jmp	#LR__3416
25e74     17 2C 26 F4 | 	bith	local04, #23
25e78                 | LR__3410
25e78     00 34 0E F2 | 	cmp	local08, #0 wz
25e7c     44 01 90 AD |  if_e	jmp	#LR__3420
25e80     17 32 26 F4 | 	bith	local07, #23
25e84                 | LR__3411
25e84     16 29 02 F6 | 	mov	local02, local04
25e88     04 28 66 F0 | 	shl	local02, #4
25e8c     19 31 02 F6 | 	mov	local06, local07
25e90     05 30 66 F0 | 	shl	local06, #5
25e94     18 29 02 FD | 	qmul	local02, local06
25e98     1A 2F 02 F1 | 	add	local05, local08
25e9c     FE 2E 86 F1 | 	sub	local05, #254
25ea0     17 37 02 F6 | 	mov	local09, local05
25ea4     04 2C 66 F0 | 	shl	local04, #4
25ea8     05 32 66 F0 | 	shl	local07, #5
25eac     18 38 62 FD | 	getqx	local10
25eb0     19 2D 02 FD | 	qmul	local04, local07
25eb4     19 3A 62 FD | 	getqy	local11
25eb8     00 80 00 FF 
25ebc     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
25ec0     18 00 90 CD |  if_b	jmp	#LR__3412
25ec4     01 36 06 F1 | 	add	local09, #1
25ec8     01 38 46 F0 | 	shr	local10, #1
25ecc     1D 35 02 F6 | 	mov	local08, local11
25ed0     1F 34 66 F0 | 	shl	local08, #31
25ed4     1A 39 42 F5 | 	or	local10, local08
25ed8     01 3A 46 F0 | 	shr	local11, #1
25edc                 | LR__3412
25edc     1D 13 02 F6 | 	mov	arg01, local11
25ee0     1C 15 02 F6 | 	mov	arg02, local10
25ee4     1B 17 02 F6 | 	mov	arg03, local09
25ee8     15 19 02 F6 | 	mov	arg04, local03
25eec     60 32 B0 FD | 	call	#__system__pack_0630
25ef0     10 01 90 FD | 	jmp	#LR__3424
25ef4                 | LR__3413
25ef4     00 2C 0E F2 | 	cmp	local04, #0 wz
25ef8     13 FB 01 56 |  if_ne	mov	result1, local01
25efc     04 01 90 5D |  if_ne	jmp	#LR__3424
25f00     FF 34 56 F2 | 	cmps	local08, #255 wc
25f04     00 34 0E C2 |  if_b	cmp	local08, #0 wz
25f08     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
25f0c     18 00 90 4D |  if_c_and_nz	jmp	#LR__3414
25f10     00 F8 3F CF 
25f14     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
25f18     E8 00 90 CD |  if_b	jmp	#LR__3424
25f1c     00 32 0E F2 | 	cmp	local07, #0 wz
25f20     14 FB 01 56 |  if_ne	mov	result1, local02
25f24     DC 00 90 5D |  if_ne	jmp	#LR__3424
25f28                 | LR__3414
25f28     02 2A 46 F5 | 	or	local03, #2
25f2c     00 12 06 F6 | 	mov	arg01, #0
25f30     00 14 06 F6 | 	mov	arg02, #0
25f34     17 17 02 F6 | 	mov	arg03, local05
25f38     15 19 02 F6 | 	mov	arg04, local03
25f3c     10 32 B0 FD | 	call	#__system__pack_0630
25f40     C0 00 90 FD | 	jmp	#LR__3424
25f44                 | LR__3415
25f44     00 2E 0E F2 | 	cmp	local05, #0 wz
25f48     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
25f4c     00 F8 3F AF 
25f50     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
25f54     AC 00 90 AD |  if_e	jmp	#LR__3424
25f58     00 32 0E F2 | 	cmp	local07, #0 wz
25f5c     14 FB 01 56 |  if_ne	mov	result1, local02
25f60     A0 00 90 5D |  if_ne	jmp	#LR__3424
25f64     1A 17 02 F6 | 	mov	arg03, local08
25f68     15 19 02 F6 | 	mov	arg04, local03
25f6c     02 18 46 F5 | 	or	arg04, #2
25f70     00 12 06 F6 | 	mov	arg01, #0
25f74     00 14 06 F6 | 	mov	arg02, #0
25f78     D4 31 B0 FD | 	call	#__system__pack_0630
25f7c     84 00 90 FD | 	jmp	#LR__3424
25f80                 | LR__3416
25f80     00 2C 0E F2 | 	cmp	local04, #0 wz
25f84     20 00 90 AD |  if_e	jmp	#LR__3419
25f88     01 2C 66 F0 | 	shl	local04, #1
25f8c     97 0A 48 FB | 	callpa	#(@LR__3418-@LR__3417)>>2,fcache_load_ptr_
25f90                 | LR__3417
25f90     00 40 00 FF 
25f94     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
25f98     01 2E 86 C1 |  if_b	sub	local05, #1
25f9c     01 2C 66 C0 |  if_b	shl	local04, #1
25fa0     EC FF 9F CD |  if_b	jmp	#LR__3417
25fa4                 | LR__3418
25fa4     D0 FE 9F FD | 	jmp	#LR__3410
25fa8                 | LR__3419
25fa8     08 2A 46 F5 | 	or	local03, #8
25fac     00 12 06 F6 | 	mov	arg01, #0
25fb0     00 14 06 F6 | 	mov	arg02, #0
25fb4     00 16 06 F6 | 	mov	arg03, #0
25fb8     15 19 02 F6 | 	mov	arg04, local03
25fbc     90 31 B0 FD | 	call	#__system__pack_0630
25fc0     40 00 90 FD | 	jmp	#LR__3424
25fc4                 | LR__3420
25fc4     00 32 0E F2 | 	cmp	local07, #0 wz
25fc8     20 00 90 AD |  if_e	jmp	#LR__3423
25fcc     01 32 66 F0 | 	shl	local07, #1
25fd0     97 0A 48 FB | 	callpa	#(@LR__3422-@LR__3421)>>2,fcache_load_ptr_
25fd4                 | LR__3421
25fd4     00 40 00 FF 
25fd8     00 32 16 F2 | 	cmp	local07, ##8388608 wc
25fdc     01 34 86 C1 |  if_b	sub	local08, #1
25fe0     01 32 66 C0 |  if_b	shl	local07, #1
25fe4     EC FF 9F CD |  if_b	jmp	#LR__3421
25fe8                 | LR__3422
25fe8     98 FE 9F FD | 	jmp	#LR__3411
25fec                 | LR__3423
25fec     08 2A 46 F5 | 	or	local03, #8
25ff0     00 12 06 F6 | 	mov	arg01, #0
25ff4     00 14 06 F6 | 	mov	arg02, #0
25ff8     00 16 06 F6 | 	mov	arg03, #0
25ffc     15 19 02 F6 | 	mov	arg04, local03
26000     4C 31 B0 FD | 	call	#__system__pack_0630
26004                 | LR__3424
26004     A7 F0 03 F6 | 	mov	ptra, fp
26008     B2 00 A0 FD | 	call	#popregs_
2600c                 | __system___float_mul_ret
2600c     2D 00 64 FD | 	ret
26010                 | 
26010                 | __system___float_div
26010     0E 4A 05 F6 | 	mov	COUNT_, #14
26014     A8 00 A0 FD | 	call	#pushregs_
26018     09 2B 02 F6 | 	mov	local03, arg01
2601c     0A 2D 02 F6 | 	mov	local04, arg02
26020     15 2F 02 F6 | 	mov	local05, local03
26024     17 31 02 F6 | 	mov	local06, local05
26028     16 30 46 F7 | 	zerox	local06, #22
2602c     17 33 02 F6 | 	mov	local07, local05
26030     01 32 66 F0 | 	shl	local07, #1
26034     18 32 46 F0 | 	shr	local07, #24
26038     1F 2E 46 F0 | 	shr	local05, #31
2603c     16 FB 01 F6 | 	mov	result1, local04
26040     FD 34 02 F6 | 	mov	local08, result1
26044     1A 37 02 F6 | 	mov	local09, local08
26048     16 36 46 F7 | 	zerox	local09, #22
2604c     1A 39 02 F6 | 	mov	local10, local08
26050     01 38 66 F0 | 	shl	local10, #1
26054     18 38 46 F0 | 	shr	local10, #24
26058     1F 34 46 F0 | 	shr	local08, #31
2605c     1A 2F 62 F5 | 	xor	local05, local08
26060     FF 32 0E F2 | 	cmp	local07, #255 wz
26064     D4 00 90 AD |  if_e	jmp	#LR__3435
26068     FF 38 0E F2 | 	cmp	local10, #255 wz
2606c     04 01 90 AD |  if_e	jmp	#LR__3436
26070     00 32 0E F2 | 	cmp	local07, #0 wz
26074     24 01 90 AD |  if_e	jmp	#LR__3437
26078     17 30 26 F4 | 	bith	local06, #23
2607c                 | LR__3430
2607c     00 38 0E F2 | 	cmp	local10, #0 wz
26080     70 01 90 AD |  if_e	jmp	#LR__3441
26084     17 36 26 F4 | 	bith	local09, #23
26088                 | LR__3431
26088     1C 33 82 F1 | 	sub	local07, local10
2608c     19 3B 02 F6 | 	mov	local11, local07
26090     18 13 02 F6 | 	mov	arg01, local06
26094     02 12 46 F0 | 	shr	arg01, #2
26098     1E 30 66 F0 | 	shl	local06, #30
2609c     18 15 02 F6 | 	mov	arg02, local06
260a0     1B 17 02 F6 | 	mov	arg03, local09
260a4     28 12 62 FD | 	setq	arg01
260a8     0B 15 12 FD | 	qdiv	arg02, arg03
260ac     00 3C 06 F6 | 	mov	local12, #0
260b0     18 26 62 FD | 	getqx	local01
260b4     19 FC 61 FD | 	getqy	result2
260b8     FE 28 02 F6 | 	mov	local02, result2
260bc     13 3F 02 F6 | 	mov	local13, local01
260c0     00 28 4E F2 | 	cmps	local02, #0 wz
260c4     1F 41 02 F6 | 	mov	local14, local13
260c8     19 40 66 F0 | 	shl	local14, #25
260cc     01 3C 06 56 |  if_ne	mov	local12, #1
260d0     1E 41 42 F5 | 	or	local14, local12
260d4     07 3E 46 F0 | 	shr	local13, #7
260d8     00 80 00 FF 
260dc     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
260e0     1C 00 90 CD |  if_b	jmp	#LR__3432
260e4     01 3A 06 F1 | 	add	local11, #1
260e8     01 40 46 F0 | 	shr	local14, #1
260ec     1F 3D 02 F6 | 	mov	local12, local13
260f0     1F 3C 66 F0 | 	shl	local12, #31
260f4     1E 41 42 F5 | 	or	local14, local12
260f8     01 3E 46 F0 | 	shr	local13, #1
260fc     24 00 90 FD | 	jmp	#LR__3434
26100                 | LR__3432
26100     00 40 00 FF 
26104     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
26108     18 00 90 3D |  if_ae	jmp	#LR__3433
2610c     01 3A 86 F1 | 	sub	local11, #1
26110     01 3E 66 F0 | 	shl	local13, #1
26114     20 3D 02 F6 | 	mov	local12, local14
26118     1F 3C 46 F0 | 	shr	local12, #31
2611c     1E 3F 42 F5 | 	or	local13, local12
26120     01 40 66 F0 | 	shl	local14, #1
26124                 | LR__3433
26124                 | LR__3434
26124     1F 13 02 F6 | 	mov	arg01, local13
26128     20 15 02 F6 | 	mov	arg02, local14
2612c     1D 17 02 F6 | 	mov	arg03, local11
26130     17 19 02 F6 | 	mov	arg04, local05
26134     18 30 B0 FD | 	call	#__system__pack_0630
26138     F8 00 90 FD | 	jmp	#LR__3445
2613c                 | LR__3435
2613c     00 30 0E F2 | 	cmp	local06, #0 wz
26140     15 FB 01 56 |  if_ne	mov	result1, local03
26144     EC 00 90 5D |  if_ne	jmp	#LR__3445
26148     FF 38 0E F2 | 	cmp	local10, #255 wz
2614c     00 F8 3F AF 
26150     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
26154     DC 00 90 AD |  if_e	jmp	#LR__3445
26158     02 2E 46 F5 | 	or	local05, #2
2615c     00 12 06 F6 | 	mov	arg01, #0
26160     00 14 06 F6 | 	mov	arg02, #0
26164     19 17 02 F6 | 	mov	arg03, local07
26168     17 19 02 F6 | 	mov	arg04, local05
2616c     E0 2F B0 FD | 	call	#__system__pack_0630
26170     C0 00 90 FD | 	jmp	#LR__3445
26174                 | LR__3436
26174     00 36 0E F2 | 	cmp	local09, #0 wz
26178     16 FB 01 56 |  if_ne	mov	result1, local04
2617c     B4 00 90 5D |  if_ne	jmp	#LR__3445
26180     17 19 02 F6 | 	mov	arg04, local05
26184     08 18 46 F5 | 	or	arg04, #8
26188     00 12 06 F6 | 	mov	arg01, #0
2618c     00 14 06 F6 | 	mov	arg02, #0
26190     00 16 06 F6 | 	mov	arg03, #0
26194     B8 2F B0 FD | 	call	#__system__pack_0630
26198     98 00 90 FD | 	jmp	#LR__3445
2619c                 | LR__3437
2619c     00 30 0E F2 | 	cmp	local06, #0 wz
261a0     20 00 90 AD |  if_e	jmp	#LR__3440
261a4     01 30 66 F0 | 	shl	local06, #1
261a8     97 0A 48 FB | 	callpa	#(@LR__3439-@LR__3438)>>2,fcache_load_ptr_
261ac                 | LR__3438
261ac     00 40 00 FF 
261b0     00 30 16 F2 | 	cmp	local06, ##8388608 wc
261b4     01 32 86 C1 |  if_b	sub	local07, #1
261b8     01 30 66 C0 |  if_b	shl	local06, #1
261bc     EC FF 9F CD |  if_b	jmp	#LR__3438
261c0                 | LR__3439
261c0     B8 FE 9F FD | 	jmp	#LR__3430
261c4                 | LR__3440
261c4     00 38 0E F2 | 	cmp	local10, #0 wz
261c8     00 36 0E A2 |  if_e	cmp	local09, #0 wz
261cc     00 F8 3F AF 
261d0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
261d4     5C 00 90 AD |  if_e	jmp	#LR__3445
261d8     17 19 02 F6 | 	mov	arg04, local05
261dc     08 18 46 F5 | 	or	arg04, #8
261e0     00 12 06 F6 | 	mov	arg01, #0
261e4     00 14 06 F6 | 	mov	arg02, #0
261e8     00 16 06 F6 | 	mov	arg03, #0
261ec     60 2F B0 FD | 	call	#__system__pack_0630
261f0     40 00 90 FD | 	jmp	#LR__3445
261f4                 | LR__3441
261f4     00 36 0E F2 | 	cmp	local09, #0 wz
261f8     20 00 90 AD |  if_e	jmp	#LR__3444
261fc     01 36 66 F0 | 	shl	local09, #1
26200     97 0A 48 FB | 	callpa	#(@LR__3443-@LR__3442)>>2,fcache_load_ptr_
26204                 | LR__3442
26204     00 40 00 FF 
26208     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2620c     01 38 86 C1 |  if_b	sub	local10, #1
26210     01 36 66 C0 |  if_b	shl	local09, #1
26214     EC FF 9F CD |  if_b	jmp	#LR__3442
26218                 | LR__3443
26218     6C FE 9F FD | 	jmp	#LR__3431
2621c                 | LR__3444
2621c     02 2E 46 F5 | 	or	local05, #2
26220     00 12 06 F6 | 	mov	arg01, #0
26224     00 14 06 F6 | 	mov	arg02, #0
26228     00 16 06 F6 | 	mov	arg03, #0
2622c     17 19 02 F6 | 	mov	arg04, local05
26230     1C 2F B0 FD | 	call	#__system__pack_0630
26234                 | LR__3445
26234     A7 F0 03 F6 | 	mov	ptra, fp
26238     B2 00 A0 FD | 	call	#popregs_
2623c                 | __system___float_div_ret
2623c     2D 00 64 FD | 	ret
26240                 | 
26240                 | __system___float_cmp
26240     00 C0 3F FF 
26244     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
26248     00 C0 3F CF 
2624c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
26250     0B FB 01 36 |  if_ae	mov	result1, arg03
26254     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
26258     00 C0 7F FF 
2625c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
26260     00 C0 7F CF 
26264     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
26268     0B FB 01 36 |  if_ae	mov	result1, arg03
2626c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
26270     00 12 56 F2 | 	cmps	arg01, #0 wc
26274     2C 00 90 3D |  if_ae	jmp	#LR__3450
26278     00 14 56 F2 | 	cmps	arg02, #0 wc
2627c     0A FB 01 C6 |  if_b	mov	result1, arg02
26280     09 FB 81 C1 |  if_b	sub	result1, arg01
26284     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
26288     00 14 0E F2 | 	cmp	arg02, #0 wz
2628c     00 00 40 AF 
26290     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
26294     00 FA 05 A6 |  if_e	mov	result1, #0
26298     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2629c     01 FA 65 F6 | 	neg	result1, #1
262a0     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
262a4                 | LR__3450
262a4     00 14 56 F2 | 	cmps	arg02, #0 wc
262a8     1C 00 90 3D |  if_ae	jmp	#LR__3451
262ac     00 12 0E F2 | 	cmp	arg01, #0 wz
262b0     00 00 40 AF 
262b4     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
262b8     00 FA 05 A6 |  if_e	mov	result1, #0
262bc     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
262c0     01 FA 05 F6 | 	mov	result1, #1
262c4     08 00 90 FD | 	jmp	#__system___float_cmp_ret
262c8                 | LR__3451
262c8     0A 13 82 F1 | 	sub	arg01, arg02
262cc     09 FB 01 F6 | 	mov	result1, arg01
262d0                 | __system___float_cmp_ret
262d0     2D 00 64 FD | 	ret
262d4                 | 
262d4                 | __system___float_tointeger
262d4     02 4A 05 F6 | 	mov	COUNT_, #2
262d8     A8 00 A0 FD | 	call	#pushregs_
262dc     50 00 B0 FD | 	call	#__system___float_Unpack
262e0     FF FF 7F FF 
262e4     FF FD 55 F2 | 	cmps	result2, ##-1 wc
262e8     34 00 90 CD |  if_b	jmp	#LR__3460
262ec     1F FC 55 F2 | 	cmps	result2, #31 wc
262f0     2C 00 90 3D |  if_ae	jmp	#LR__3460
262f4     02 FE 65 F0 | 	shl	result3, #2
262f8     1E 26 06 F6 | 	mov	local01, #30
262fc     FE 26 82 F1 | 	sub	local01, result2
26300     13 FF 41 F0 | 	shr	result3, local01
26304     FF 28 02 F6 | 	mov	local02, result3
26308     0A 29 02 F1 | 	add	local02, arg02
2630c     01 28 46 F0 | 	shr	local02, #1
26310     00 FA 0D F2 | 	cmp	result1, #0 wz
26314     14 29 62 56 |  if_ne	neg	local02, local02
26318     14 FB 01 F6 | 	mov	result1, local02
2631c     04 00 90 FD | 	jmp	#LR__3461
26320                 | LR__3460
26320     00 FA 05 F6 | 	mov	result1, #0
26324                 | LR__3461
26324     A7 F0 03 F6 | 	mov	ptra, fp
26328     B2 00 A0 FD | 	call	#popregs_
2632c                 | __system___float_tointeger_ret
2632c     2D 00 64 FD | 	ret
26330                 | 
26330                 | __system___float_Unpack
26330     09 01 02 F6 | 	mov	_var01, arg01
26334     1F 00 46 F0 | 	shr	_var01, #31
26338     09 03 02 F6 | 	mov	_var02, arg01
2633c     01 02 66 F0 | 	shl	_var02, #1
26340     18 02 4E F0 | 	shr	_var02, #24 wz
26344     17 13 06 F4 | 	bitl	arg01, #279
26348     06 12 66 50 |  if_ne	shl	arg01, #6
2634c     1D 12 26 54 |  if_ne	bith	arg01, #29
26350     1C 00 90 5D |  if_ne	jmp	#LR__3470
26354     09 05 92 F7 | 	encod	_var03, arg01 wc
26358     01 04 06 C1 |  if_b	add	_var03, #1
2635c     17 04 86 F1 | 	sub	_var03, #23
26360     02 03 02 F6 | 	mov	_var02, _var03
26364     07 FC 05 F6 | 	mov	result2, #7
26368     02 FD 81 F1 | 	sub	result2, _var03
2636c     FE 12 62 F0 | 	shl	arg01, result2
26370                 | LR__3470
26370     7F 02 86 F1 | 	sub	_var02, #127
26374     09 FF 01 F6 | 	mov	result3, arg01
26378     00 FB 01 F6 | 	mov	result1, _var01
2637c     01 FD 01 F6 | 	mov	result2, _var02
26380                 | __system___float_Unpack_ret
26380     2D 00 64 FD | 	ret
26384                 | 
26384                 | __system___float_Pack
26384     00 00 06 F6 | 	mov	_var01, #0
26388     00 16 0E F2 | 	cmp	arg03, #0 wz
2638c     8C 00 90 AD |  if_e	jmp	#LR__3481
26390     0B 03 92 F7 | 	encod	_var02, arg03 wc
26394     01 02 06 C1 |  if_b	add	_var02, #1
26398     21 00 06 F6 | 	mov	_var01, #33
2639c     01 01 82 F1 | 	sub	_var01, _var02
263a0     00 17 62 F0 | 	shl	arg03, _var01
263a4     03 02 06 F6 | 	mov	_var02, #3
263a8     00 03 82 F1 | 	sub	_var02, _var01
263ac     01 15 02 F1 | 	add	arg02, _var02
263b0     0A 05 02 F6 | 	mov	_var03, arg02
263b4     00 17 06 F1 | 	add	arg03, #256
263b8     0B 03 02 F6 | 	mov	_var02, arg03
263bc     FF 02 2E F5 | 	andn	_var02, #255 wz
263c0     01 04 06 A1 |  if_e	add	_var03, #1
263c4     7F 04 06 F1 | 	add	_var03, #127
263c8     FF FF 7F FF 
263cc     E9 05 46 F3 | 	fges	_var03, ##-23
263d0     FF 04 66 F3 | 	fles	_var03, #255
263d4     01 04 56 F2 | 	cmps	_var03, #1 wc
263d8     1C 00 90 3D |  if_ae	jmp	#LR__3480
263dc     01 16 46 F0 | 	shr	arg03, #1
263e0     1F 02 C6 F9 | 	decod	_var02, #31
263e4     0B 03 02 F1 | 	add	_var02, arg03
263e8     02 05 62 F6 | 	neg	_var03, _var03
263ec     02 03 42 F0 | 	shr	_var02, _var03
263f0     01 17 02 F6 | 	mov	arg03, _var02
263f4     00 04 06 F6 | 	mov	_var03, #0
263f8                 | LR__3480
263f8     09 FB 01 F6 | 	mov	result1, arg01
263fc     1F FA 65 F0 | 	shl	result1, #31
26400     02 03 02 F6 | 	mov	_var02, _var03
26404     17 02 66 F0 | 	shl	_var02, #23
26408     01 FB 41 F5 | 	or	result1, _var02
2640c     0B 07 02 F6 | 	mov	_var04, arg03
26410     09 06 46 F0 | 	shr	_var04, #9
26414     03 FB 41 F5 | 	or	result1, _var04
26418     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2641c                 | LR__3481
2641c     00 FB 01 F6 | 	mov	result1, _var01
26420                 | __system___float_Pack_ret
26420     2D 00 64 FD | 	ret
26424                 | 
26424                 | __system___basic_print_float
26424     05 4A 05 F6 | 	mov	COUNT_, #5
26428     A8 00 A0 FD | 	call	#pushregs_
2642c     09 27 02 F6 | 	mov	local01, arg01
26430     0A 29 02 F6 | 	mov	local02, arg02
26434     0B 2B 0A F6 | 	mov	local03, arg03 wz
26438     0C 2D 02 F6 | 	mov	local04, arg04
2643c     14 00 90 5D |  if_ne	jmp	#LR__3490
26440     23 2C 0E F2 | 	cmp	local04, #35 wz
26444     80 02 10 AF 
26448     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2644c     1D 2E C6 59 |  if_ne	decod	local05, #29
26450     17 2B 02 F6 | 	mov	local03, local05
26454                 | LR__3490
26454     13 13 02 F6 | 	mov	arg01, local01
26458     D8 27 B0 FD | 	call	#__system___gettxfunc
2645c     FD 2E 0A F6 | 	mov	local05, result1 wz
26460     00 FA 05 A6 |  if_e	mov	result1, #0
26464     17 13 02 56 |  if_ne	mov	arg01, local05
26468     15 15 02 56 |  if_ne	mov	arg02, local03
2646c     14 17 02 56 |  if_ne	mov	arg03, local02
26470     16 19 02 56 |  if_ne	mov	arg04, local04
26474     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
26478     A7 F0 03 F6 | 	mov	ptra, fp
2647c     B2 00 A0 FD | 	call	#popregs_
26480                 | __system___basic_print_float_ret
26480     2D 00 64 FD | 	ret
26484                 | 
26484                 | __system____builtin_atoi
26484     07 4A 05 F6 | 	mov	COUNT_, #7
26488     A8 00 A0 FD | 	call	#pushregs_
2648c                 | __system____builtin_atoi_enter
2648c     09 27 02 F6 | 	mov	local01, arg01
26490     0A 29 02 F6 | 	mov	local02, arg02
26494     00 2A 06 F6 | 	mov	local03, #0
26498     00 2C 06 F6 | 	mov	local04, #0
2649c     00 2E 06 F6 | 	mov	local05, #0
264a0     97 1C 48 FB | 	callpa	#(@LR__3502-@LR__3500)>>2,fcache_load_ptr_
264a4                 | LR__3500
264a4     13 31 C2 FA | 	rdbyte	local06, local01
264a8     20 30 0E F2 | 	cmp	local06, #32 wz
264ac     01 26 06 A1 |  if_e	add	local01, #1
264b0     F0 FF 9F AD |  if_e	jmp	#LR__3500
264b4     13 33 C2 FA | 	rdbyte	local07, local01
264b8                 | LR__3501
264b8     2D 32 0E F2 | 	cmp	local07, #45 wz
264bc     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
264c0     18 00 90 5D |  if_ne	jmp	#LR__3503
264c4     01 26 06 F1 | 	add	local01, #1
264c8     2D 32 0E F2 | 	cmp	local07, #45 wz
264cc     01 30 06 A6 |  if_e	mov	local06, #1
264d0     18 2F C2 A2 |  if_e	subr	local05, local06
264d4     13 33 C2 FA | 	rdbyte	local07, local01
264d8     DC FF 9F FD | 	jmp	#LR__3501
264dc                 | LR__3502
264dc                 | LR__3503
264dc     00 28 0E F2 | 	cmp	local02, #0 wz
264e0     1C 00 90 5D |  if_ne	jmp	#LR__3505
264e4     24 32 0E F2 | 	cmp	local07, #36 wz
264e8     10 28 06 A6 |  if_e	mov	local02, #16
264ec     01 26 06 A1 |  if_e	add	local01, #1
264f0     0C 00 90 AD |  if_e	jmp	#LR__3504
264f4     25 32 0E F2 | 	cmp	local07, #37 wz
264f8     02 28 06 A6 |  if_e	mov	local02, #2
264fc     01 26 06 A1 |  if_e	add	local01, #1
26500                 | LR__3504
26500                 | LR__3505
26500     97 48 48 FB | 	callpa	#(@LR__3513-@LR__3506)>>2,fcache_load_ptr_
26504                 | LR__3506
26504                 | LR__3507
26504     13 33 C2 FA | 	rdbyte	local07, local01
26508     5F 32 0E F2 | 	cmp	local07, #95 wz
2650c     01 26 06 F1 | 	add	local01, #1
26510     F0 FF 9F AD |  if_e	jmp	#LR__3507
26514     30 32 0E F2 | 	cmp	local07, #48 wz
26518     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2651c     00 2C 06 A6 |  if_e	mov	local04, #0
26520     60 00 90 AD |  if_e	jmp	#LR__3512
26524     31 32 56 F2 | 	cmps	local07, #49 wc
26528     18 00 90 CD |  if_b	jmp	#LR__3508
2652c     3A 32 56 F2 | 	cmps	local07, #58 wc
26530     19 2D 02 C6 |  if_b	mov	local04, local07
26534     30 2C 86 C1 |  if_b	sub	local04, #48
26538     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2653c     0A 28 06 86 |  if_c_and_z	mov	local02, #10
26540     40 00 90 CD |  if_b	jmp	#LR__3511
26544                 | LR__3508
26544     0B 28 56 F2 | 	cmps	local02, #11 wc
26548     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2654c     14 00 90 CD |  if_b	jmp	#LR__3509
26550     67 32 56 F2 | 	cmps	local07, #103 wc
26554     61 32 86 C1 |  if_b	sub	local07, #97
26558     0A 2C 06 C6 |  if_b	mov	local04, #10
2655c     19 2D 02 C1 |  if_b	add	local04, local07
26560     20 00 90 CD |  if_b	jmp	#LR__3510
26564                 | LR__3509
26564     0B 28 56 F2 | 	cmps	local02, #11 wc
26568     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2656c     24 00 90 CD |  if_b	jmp	#LR__3514
26570     47 32 56 F2 | 	cmps	local07, #71 wc
26574     41 32 86 C1 |  if_b	sub	local07, #65
26578     0A 2C 06 C6 |  if_b	mov	local04, #10
2657c     19 2D 02 C1 |  if_b	add	local04, local07
26580     10 00 90 3D |  if_ae	jmp	#LR__3514
26584                 | LR__3510
26584                 | LR__3511
26584                 | LR__3512
26584     15 29 02 FD | 	qmul	local02, local03
26588     18 2A 62 FD | 	getqx	local03
2658c     16 2B 02 F1 | 	add	local03, local04
26590     70 FF 9F FD | 	jmp	#LR__3506
26594                 | LR__3513
26594                 | LR__3514
26594     00 28 0E F2 | 	cmp	local02, #0 wz
26598     64 00 90 5D |  if_ne	jmp	#LR__3520
2659c     78 32 0E F2 | 	cmp	local07, #120 wz
265a0     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
265a4     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
265a8     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
265ac     14 00 90 5D |  if_ne	jmp	#LR__3515
265b0     13 13 02 F6 | 	mov	arg01, local01
265b4     10 14 06 F6 | 	mov	arg02, #16
265b8     C8 FE BF FD | 	call	#__system____builtin_atoi
265bc     FD 2A 02 F6 | 	mov	local03, result1
265c0     3C 00 90 FD | 	jmp	#LR__3519
265c4                 | LR__3515
265c4     62 32 0E F2 | 	cmp	local07, #98 wz
265c8     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
265cc     14 00 90 5D |  if_ne	jmp	#LR__3516
265d0     13 13 02 F6 | 	mov	arg01, local01
265d4     02 14 06 F6 | 	mov	arg02, #2
265d8     A8 FE BF FD | 	call	#__system____builtin_atoi
265dc     FD 2A 02 F6 | 	mov	local03, result1
265e0     1C 00 90 FD | 	jmp	#LR__3518
265e4                 | LR__3516
265e4     6F 32 0E F2 | 	cmp	local07, #111 wz
265e8     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
265ec     10 00 90 5D |  if_ne	jmp	#LR__3517
265f0     13 13 02 F6 | 	mov	arg01, local01
265f4     08 14 06 F6 | 	mov	arg02, #8
265f8     88 FE BF FD | 	call	#__system____builtin_atoi
265fc     FD 2A 02 F6 | 	mov	local03, result1
26600                 | LR__3517
26600                 | LR__3518
26600                 | LR__3519
26600                 | LR__3520
26600     00 2E 0E F2 | 	cmp	local05, #0 wz
26604     15 2B 62 56 |  if_ne	neg	local03, local03
26608     15 FB 01 F6 | 	mov	result1, local03
2660c     A7 F0 03 F6 | 	mov	ptra, fp
26610     B2 00 A0 FD | 	call	#popregs_
26614                 | __system____builtin_atoi_ret
26614     2D 00 64 FD | 	ret
26618                 | 
26618                 | __system____builtin_atof
26618     07 4A 05 F6 | 	mov	COUNT_, #7
2661c     A8 00 A0 FD | 	call	#pushregs_
26620     09 27 02 F6 | 	mov	local01, arg01
26624     00 28 06 F6 | 	mov	local02, #0
26628     00 2A 06 F6 | 	mov	local03, #0
2662c     00 2C 06 F6 | 	mov	local04, #0
26630     00 2E 06 F6 | 	mov	local05, #0
26634     97 08 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
26638                 | LR__3530
26638     13 17 C2 FA | 	rdbyte	arg03, local01
2663c     20 16 0E F2 | 	cmp	arg03, #32 wz
26640     01 26 06 A1 |  if_e	add	local01, #1
26644     F0 FF 9F AD |  if_e	jmp	#LR__3530
26648                 | LR__3531
26648     13 31 C2 FA | 	rdbyte	local06, local01
2664c                 | LR__3532
2664c     2B 30 0E F2 | 	cmp	local06, #43 wz
26650     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
26654     14 00 90 5D |  if_ne	jmp	#LR__3533
26658     2D 30 0E F2 | 	cmp	local06, #45 wz
2665c     1F 2C E6 A4 |  if_e	bitnot	local04, #31
26660     01 26 06 F1 | 	add	local01, #1
26664     13 31 C2 FA | 	rdbyte	local06, local01
26668     E0 FF 9F FD | 	jmp	#LR__3532
2666c                 | LR__3533
2666c                 | LR__3534
2666c     97 08 48 FB | 	callpa	#(@LR__3536-@LR__3535)>>2,fcache_load_ptr_
26670                 | LR__3535
26670     13 31 C2 FA | 	rdbyte	local06, local01
26674     5F 30 0E F2 | 	cmp	local06, #95 wz
26678     01 26 06 F1 | 	add	local01, #1
2667c     F0 FF 9F AD |  if_e	jmp	#LR__3535
26680                 | LR__3536
26680     00 30 0E F2 | 	cmp	local06, #0 wz
26684     5C 00 90 AD |  if_e	jmp	#LR__3538
26688     30 30 56 F2 | 	cmps	local06, #48 wc
2668c     44 00 90 CD |  if_b	jmp	#LR__3537
26690     3A 30 56 F2 | 	cmps	local06, #58 wc
26694     3C 00 90 3D |  if_ae	jmp	#LR__3537
26698     14 13 02 F6 | 	mov	arg01, local02
2669c     00 90 20 FF 
266a0     00 14 06 F6 | 	mov	arg02, ##1092616192
266a4     64 F7 BF FD | 	call	#__system___float_mul
266a8     FD 28 02 F6 | 	mov	local02, result1
266ac     30 30 86 F1 | 	sub	local06, #48
266b0     18 13 02 F6 | 	mov	arg01, local06
266b4     50 F3 BF FD | 	call	#__system___float_fromuns
266b8     FD 14 02 F6 | 	mov	arg02, result1
266bc     14 13 02 F6 | 	mov	arg01, local02
266c0     78 F3 BF FD | 	call	#__system___float_add
266c4     FD 28 02 F6 | 	mov	local02, result1
266c8     00 2E 0E F2 | 	cmp	local05, #0 wz
266cc     01 2A 86 51 |  if_ne	sub	local03, #1
266d0     98 FF 9F FD | 	jmp	#LR__3534
266d4                 | LR__3537
266d4     2E 30 0E F2 | 	cmp	local06, #46 wz
266d8     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
266dc     01 2E 06 A6 |  if_e	mov	local05, #1
266e0     88 FF 9F AD |  if_e	jmp	#LR__3534
266e4                 | LR__3538
266e4     45 30 0E F2 | 	cmp	local06, #69 wz
266e8     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
266ec     18 00 90 5D |  if_ne	jmp	#LR__3539
266f0     13 13 02 F6 | 	mov	arg01, local01
266f4     00 14 06 F6 | 	mov	arg02, #0
266f8     88 FD BF FD | 	call	#__system____builtin_atoi
266fc     15 FB 01 F1 | 	add	result1, local03
26700     FD 32 02 F6 | 	mov	local07, result1
26704     04 00 90 FD | 	jmp	#LR__3540
26708                 | LR__3539
26708     15 33 02 F6 | 	mov	local07, local03
2670c                 | LR__3540
2670c     19 17 02 F6 | 	mov	arg03, local07
26710     14 13 02 F6 | 	mov	arg01, local02
26714     00 90 20 FF 
26718     00 14 06 F6 | 	mov	arg02, ##1092616192
2671c     F4 06 B0 FD | 	call	#__system___float_pow_n
26720     16 FB 61 F5 | 	xor	result1, local04
26724     A7 F0 03 F6 | 	mov	ptra, fp
26728     B2 00 A0 FD | 	call	#popregs_
2672c                 | __system____builtin_atof_ret
2672c     2D 00 64 FD | 	ret
26730                 | 
26730                 | __system____builtin_ilogb
26730     FC FB BF FD | 	call	#__system___float_Unpack
26734     00 FE 0D F2 | 	cmp	result3, #0 wz
26738     00 00 40 AF 
2673c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
26740     24 00 90 AD |  if_e	jmp	#LR__3551
26744     80 FC 0D F2 | 	cmp	result2, #128 wz
26748     18 00 90 5D |  if_ne	jmp	#LR__3550
2674c     00 00 10 FF 
26750     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
26754     1E FA CD A9 |  if_e	bmask	result1, #30
26758     0C 00 90 AD |  if_e	jmp	#LR__3551
2675c     1F FA C5 F9 | 	decod	result1, #31
26760     04 00 90 FD | 	jmp	#LR__3551
26764                 | LR__3550
26764     FE FA 01 F6 | 	mov	result1, result2
26768                 | LR__3551
26768                 | __system____builtin_ilogb_ret
26768     2D 00 64 FD | 	ret
2676c                 | 
2676c                 | __system____builtin_sinf
2676c     03 4A 05 F6 | 	mov	COUNT_, #3
26770     A8 00 A0 FD | 	call	#pushregs_
26774     09 27 02 F6 | 	mov	local01, arg01
26778     87 64 20 FF 
2677c     DB 15 06 F6 | 	mov	arg02, ##1086918619
26780     8C F8 BF FD | 	call	#__system___float_div
26784     FD 12 02 F6 | 	mov	arg01, result1
26788     00 14 06 F6 | 	mov	arg02, #0
2678c     44 FB BF FD | 	call	#__system___float_tointeger
26790     FD 16 0A F6 | 	mov	arg03, result1 wz
26794     44 00 90 AD |  if_e	jmp	#LR__3560
26798     0B 13 52 F6 | 	abs	arg01, arg03 wc
2679c     1F 28 C6 C9 |  if_b	decod	local02, #31
267a0     00 28 06 36 |  if_ae	mov	local02, #0
267a4     60 F2 BF FD | 	call	#__system___float_fromuns
267a8     14 FB 61 F5 | 	xor	result1, local02
267ac     FD 12 02 F6 | 	mov	arg01, result1
267b0     1E 14 C6 F9 | 	decod	arg02, #30
267b4     54 F6 BF FD | 	call	#__system___float_mul
267b8     FD 12 02 F6 | 	mov	arg01, result1
267bc     87 24 20 FF 
267c0     DB 15 06 F6 | 	mov	arg02, ##1078530011
267c4     44 F6 BF FD | 	call	#__system___float_mul
267c8     FD 14 02 F6 | 	mov	arg02, result1
267cc     13 13 02 F6 | 	mov	arg01, local01
267d0     1F 14 E6 F4 | 	bitnot	arg02, #31
267d4     64 F2 BF FD | 	call	#__system___float_add
267d8     FD 26 02 F6 | 	mov	local01, result1
267dc                 | LR__3560
267dc     13 13 02 F6 | 	mov	arg01, local01
267e0     66 E6 1E FF 
267e4     CD 14 06 F6 | 	mov	arg02, ##1036831949
267e8     01 16 06 F6 | 	mov	arg03, #1
267ec     50 FA BF FD | 	call	#__system___float_cmp
267f0     00 FA 55 F2 | 	cmps	result1, #0 wc
267f4     5C 00 90 3D |  if_ae	jmp	#LR__3561
267f8     13 13 02 F6 | 	mov	arg01, local01
267fc     66 E6 5E FF 
26800     CD 14 06 F6 | 	mov	arg02, ##-1110651699
26804     01 16 66 F6 | 	neg	arg03, #1
26808     34 FA BF FD | 	call	#__system___float_cmp
2680c     01 FA 55 F2 | 	cmps	result1, #1 wc
26810     40 00 90 CD |  if_b	jmp	#LR__3561
26814     13 13 02 F6 | 	mov	arg01, local01
26818     13 15 02 F6 | 	mov	arg02, local01
2681c     EC F5 BF FD | 	call	#__system___float_mul
26820     FD 12 02 F6 | 	mov	arg01, result1
26824     13 15 02 F6 | 	mov	arg02, local01
26828     E0 F5 BF FD | 	call	#__system___float_mul
2682c     FD 12 02 F6 | 	mov	arg01, result1
26830     00 60 20 FF 
26834     00 14 06 F6 | 	mov	arg02, ##1086324736
26838     D4 F7 BF FD | 	call	#__system___float_div
2683c     FD 14 02 F6 | 	mov	arg02, result1
26840     13 13 02 F6 | 	mov	arg01, local01
26844     1F 14 E6 F4 | 	bitnot	arg02, #31
26848     F0 F1 BF FD | 	call	#__system___float_add
2684c     FD 2A 02 F6 | 	mov	local03, result1
26850     54 00 90 FD | 	jmp	#LR__3562
26854                 | LR__3561
26854     13 13 02 F6 | 	mov	arg01, local01
26858     7C 91 26 FF 
2685c     83 15 06 F6 | 	mov	arg02, ##1294137731
26860     A8 F5 BF FD | 	call	#__system___float_mul
26864     FD 12 02 F6 | 	mov	arg01, result1
26868     00 14 06 F6 | 	mov	arg02, #0
2686c     64 FA BF FD | 	call	#__system___float_tointeger
26870     02 FA 65 F0 | 	shl	result1, #2
26874     00 00 A0 FF 
26878     FD 00 48 FD | 	qrotate	##1073741824, result1
2687c     19 12 62 FD | 	getqy	arg01
26880     09 13 52 F6 | 	abs	arg01, arg01 wc
26884     1F 28 C6 C9 |  if_b	decod	local02, #31
26888     00 28 06 36 |  if_ae	mov	local02, #0
2688c     78 F1 BF FD | 	call	#__system___float_fromuns
26890     14 FB 61 F5 | 	xor	result1, local02
26894     FD 12 02 F6 | 	mov	arg01, result1
26898     00 40 27 FF 
2689c     00 14 06 F6 | 	mov	arg02, ##1317011456
268a0     6C F7 BF FD | 	call	#__system___float_div
268a4     FD 2A 02 F6 | 	mov	local03, result1
268a8                 | LR__3562
268a8     15 FB 01 F6 | 	mov	result1, local03
268ac     A7 F0 03 F6 | 	mov	ptra, fp
268b0     B2 00 A0 FD | 	call	#popregs_
268b4                 | __system____builtin_sinf_ret
268b4     2D 00 64 FD | 	ret
268b8                 | 
268b8                 | __system____builtin_tanf
268b8     02 4A 05 F6 | 	mov	COUNT_, #2
268bc     A8 00 A0 FD | 	call	#pushregs_
268c0     09 27 02 F6 | 	mov	local01, arg01
268c4     A4 FE BF FD | 	call	#__system____builtin_sinf
268c8     FD 28 02 F6 | 	mov	local02, result1
268cc     13 15 02 F6 | 	mov	arg02, local01
268d0     87 E4 1F FF 
268d4     DB 13 06 F6 | 	mov	arg01, ##1070141403
268d8     1F 14 E6 F4 | 	bitnot	arg02, #31
268dc     5C F1 BF FD | 	call	#__system___float_add
268e0     FD 12 02 F6 | 	mov	arg01, result1
268e4     84 FE BF FD | 	call	#__system____builtin_sinf
268e8     FD 14 02 F6 | 	mov	arg02, result1
268ec     14 13 02 F6 | 	mov	arg01, local02
268f0     1C F7 BF FD | 	call	#__system___float_div
268f4     A7 F0 03 F6 | 	mov	ptra, fp
268f8     B2 00 A0 FD | 	call	#popregs_
268fc                 | __system____builtin_tanf_ret
268fc     2D 00 64 FD | 	ret
26900                 | 
26900                 | __system____builtin_asinf
26900     01 4A 05 F6 | 	mov	COUNT_, #1
26904     A8 00 A0 FD | 	call	#pushregs_
26908     09 27 02 F6 | 	mov	local01, arg01
2690c     13 15 02 F6 | 	mov	arg02, local01
26910     13 13 02 F6 | 	mov	arg01, local01
26914     F4 F4 BF FD | 	call	#__system___float_mul
26918     FD 14 02 F6 | 	mov	arg02, result1
2691c     00 C0 1F FF 
26920     00 12 06 F6 | 	mov	arg01, ##1065353216
26924     1F 14 E6 F4 | 	bitnot	arg02, #31
26928     10 F1 BF FD | 	call	#__system___float_add
2692c     FD 12 02 F6 | 	mov	arg01, result1
26930     00 F4 BF FD | 	call	#__system___float_sqrt
26934     FD 14 02 F6 | 	mov	arg02, result1
26938     13 13 02 F6 | 	mov	arg01, local01
2693c     58 00 B0 FD | 	call	#__system____builtin_atan2f
26940     A7 F0 03 F6 | 	mov	ptra, fp
26944     B2 00 A0 FD | 	call	#popregs_
26948                 | __system____builtin_asinf_ret
26948     2D 00 64 FD | 	ret
2694c                 | 
2694c                 | __system____builtin_acosf
2694c     01 4A 05 F6 | 	mov	COUNT_, #1
26950     A8 00 A0 FD | 	call	#pushregs_
26954     09 27 02 F6 | 	mov	local01, arg01
26958     13 15 02 F6 | 	mov	arg02, local01
2695c     13 13 02 F6 | 	mov	arg01, local01
26960     A8 F4 BF FD | 	call	#__system___float_mul
26964     FD 14 02 F6 | 	mov	arg02, result1
26968     00 C0 1F FF 
2696c     00 12 06 F6 | 	mov	arg01, ##1065353216
26970     1F 14 E6 F4 | 	bitnot	arg02, #31
26974     C4 F0 BF FD | 	call	#__system___float_add
26978     FD 12 02 F6 | 	mov	arg01, result1
2697c     B4 F3 BF FD | 	call	#__system___float_sqrt
26980     FD 12 02 F6 | 	mov	arg01, result1
26984     13 15 02 F6 | 	mov	arg02, local01
26988     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2698c     A7 F0 03 F6 | 	mov	ptra, fp
26990     B2 00 A0 FD | 	call	#popregs_
26994                 | __system____builtin_acosf_ret
26994     2D 00 64 FD | 	ret
26998                 | 
26998                 | __system____builtin_atan2f
26998     04 4A 05 F6 | 	mov	COUNT_, #4
2699c     A8 00 A0 FD | 	call	#pushregs_
269a0     09 27 02 F6 | 	mov	local01, arg01
269a4     0A 29 02 F6 | 	mov	local02, arg02
269a8     13 13 02 F6 | 	mov	arg01, local01
269ac     00 14 06 F6 | 	mov	arg02, #0
269b0     01 16 06 F6 | 	mov	arg03, #1
269b4     88 F8 BF FD | 	call	#__system___float_cmp
269b8     00 FA 0D F2 | 	cmp	result1, #0 wz
269bc     28 00 90 5D |  if_ne	jmp	#LR__3570
269c0     14 13 02 F6 | 	mov	arg01, local02
269c4     00 14 06 F6 | 	mov	arg02, #0
269c8     01 16 06 F6 | 	mov	arg03, #1
269cc     70 F8 BF FD | 	call	#__system___float_cmp
269d0     00 FA 55 F2 | 	cmps	result1, #0 wc
269d4     87 24 60 CF 
269d8     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
269dc     DC 00 90 CD |  if_b	jmp	#LR__3571
269e0     00 FA 05 F6 | 	mov	result1, #0
269e4     D4 00 90 FD | 	jmp	#LR__3571
269e8                 | LR__3570
269e8     14 13 02 F6 | 	mov	arg01, local02
269ec     14 15 02 F6 | 	mov	arg02, local02
269f0     18 F4 BF FD | 	call	#__system___float_mul
269f4     FD 2A 02 F6 | 	mov	local03, result1
269f8     13 13 02 F6 | 	mov	arg01, local01
269fc     13 15 02 F6 | 	mov	arg02, local01
26a00     08 F4 BF FD | 	call	#__system___float_mul
26a04     FD 14 02 F6 | 	mov	arg02, result1
26a08     15 13 02 F6 | 	mov	arg01, local03
26a0c     2C F0 BF FD | 	call	#__system___float_add
26a10     FD 12 02 F6 | 	mov	arg01, result1
26a14     1C F3 BF FD | 	call	#__system___float_sqrt
26a18     FD 2A 02 F6 | 	mov	local03, result1
26a1c     14 13 02 F6 | 	mov	arg01, local02
26a20     15 15 02 F6 | 	mov	arg02, local03
26a24     E8 F5 BF FD | 	call	#__system___float_div
26a28     FD 28 02 F6 | 	mov	local02, result1
26a2c     13 13 02 F6 | 	mov	arg01, local01
26a30     15 15 02 F6 | 	mov	arg02, local03
26a34     D8 F5 BF FD | 	call	#__system___float_div
26a38     FD 26 02 F6 | 	mov	local01, result1
26a3c     00 40 27 FF 
26a40     00 12 06 F6 | 	mov	arg01, ##1317011456
26a44     14 15 02 F6 | 	mov	arg02, local02
26a48     C0 F3 BF FD | 	call	#__system___float_mul
26a4c     FD 12 02 F6 | 	mov	arg01, result1
26a50     00 14 06 F6 | 	mov	arg02, #0
26a54     7C F8 BF FD | 	call	#__system___float_tointeger
26a58     FD 2A 02 F6 | 	mov	local03, result1
26a5c     00 40 27 FF 
26a60     00 12 06 F6 | 	mov	arg01, ##1317011456
26a64     13 15 02 F6 | 	mov	arg02, local01
26a68     A0 F3 BF FD | 	call	#__system___float_mul
26a6c     FD 12 02 F6 | 	mov	arg01, result1
26a70     00 14 06 F6 | 	mov	arg02, #0
26a74     5C F8 BF FD | 	call	#__system___float_tointeger
26a78     FD 2A 52 FD | 	qvector	local03, result1
26a7c     87 24 20 FF 
26a80     DB 2B 06 F6 | 	mov	local03, ##1078530011
26a84     19 12 62 FD | 	getqy	arg01
26a88     01 12 C6 F0 | 	sar	arg01, #1
26a8c     09 13 52 F6 | 	abs	arg01, arg01 wc
26a90     1F 2C C6 C9 |  if_b	decod	local04, #31
26a94     00 2C 06 36 |  if_ae	mov	local04, #0
26a98     6C EF BF FD | 	call	#__system___float_fromuns
26a9c     16 FB 61 F5 | 	xor	result1, local04
26aa0     FD 12 02 F6 | 	mov	arg01, result1
26aa4     00 40 27 FF 
26aa8     00 14 06 F6 | 	mov	arg02, ##1317011456
26aac     60 F5 BF FD | 	call	#__system___float_div
26ab0     FD 14 02 F6 | 	mov	arg02, result1
26ab4     15 13 02 F6 | 	mov	arg01, local03
26ab8     50 F3 BF FD | 	call	#__system___float_mul
26abc                 | LR__3571
26abc     A7 F0 03 F6 | 	mov	ptra, fp
26ac0     B2 00 A0 FD | 	call	#popregs_
26ac4                 | __system____builtin_atan2f_ret
26ac4     2D 00 64 FD | 	ret
26ac8                 | 
26ac8                 | __system____builtin_exp2f
26ac8     04 4A 05 F6 | 	mov	COUNT_, #4
26acc     A8 00 A0 FD | 	call	#pushregs_
26ad0     09 27 02 F6 | 	mov	local01, arg01
26ad4     00 7F 21 FF 
26ad8     00 14 06 F6 | 	mov	arg02, ##1123942400
26adc     01 16 66 F6 | 	neg	arg03, #1
26ae0     5C F7 BF FD | 	call	#__system___float_cmp
26ae4     00 FA 55 F2 | 	cmps	result1, #0 wc
26ae8     00 C0 3F 3F 
26aec     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
26af0     DC 00 90 3D |  if_ae	jmp	#LR__3581
26af4     13 13 02 F6 | 	mov	arg01, local01
26af8     00 7F 61 FF 
26afc     00 14 06 F6 | 	mov	arg02, ##-1023541248
26b00     01 16 06 F6 | 	mov	arg03, #1
26b04     38 F7 BF FD | 	call	#__system___float_cmp
26b08     00 FA 55 F2 | 	cmps	result1, #0 wc
26b0c     00 FA 05 C6 |  if_b	mov	result1, #0
26b10     BC 00 90 CD |  if_b	jmp	#LR__3581
26b14     13 13 02 F6 | 	mov	arg01, local01
26b18     00 14 06 F6 | 	mov	arg02, #0
26b1c     B4 F7 BF FD | 	call	#__system___float_tointeger
26b20     FD 28 02 F6 | 	mov	local02, result1
26b24     14 13 52 F6 | 	abs	arg01, local02 wc
26b28     1F 2A C6 C9 |  if_b	decod	local03, #31
26b2c     00 2A 06 36 |  if_ae	mov	local03, #0
26b30     D4 EE BF FD | 	call	#__system___float_fromuns
26b34     15 FB 61 F5 | 	xor	result1, local03
26b38     FD 14 02 F6 | 	mov	arg02, result1
26b3c     13 13 02 F6 | 	mov	arg01, local01
26b40     1F 14 E6 F4 | 	bitnot	arg02, #31
26b44     F4 EE BF FD | 	call	#__system___float_add
26b48     FD 2C 02 F6 | 	mov	local04, result1
26b4c     16 13 02 F6 | 	mov	arg01, local04
26b50     00 14 06 F6 | 	mov	arg02, #0
26b54     01 16 06 F6 | 	mov	arg03, #1
26b58     E4 F6 BF FD | 	call	#__system___float_cmp
26b5c     00 FA 55 F2 | 	cmps	result1, #0 wc
26b60     18 00 90 3D |  if_ae	jmp	#LR__3580
26b64     16 13 02 F6 | 	mov	arg01, local04
26b68     00 C0 1F FF 
26b6c     00 14 06 F6 | 	mov	arg02, ##1065353216
26b70     C8 EE BF FD | 	call	#__system___float_add
26b74     FD 2C 02 F6 | 	mov	local04, result1
26b78     01 28 86 F1 | 	sub	local02, #1
26b7c                 | LR__3580
26b7c     7F 28 06 F1 | 	add	local02, #127
26b80     17 28 66 F0 | 	shl	local02, #23
26b84     16 13 02 F6 | 	mov	arg01, local04
26b88     00 80 26 FF 
26b8c     00 14 06 F6 | 	mov	arg02, ##1291845632
26b90     78 F2 BF FD | 	call	#__system___float_mul
26b94     FD 12 02 F6 | 	mov	arg01, result1
26b98     00 14 06 F6 | 	mov	arg02, #0
26b9c     34 F7 BF FD | 	call	#__system___float_tointeger
26ba0     FD 2C 0A F6 | 	mov	local04, result1 wz
26ba4     14 FB 01 A6 |  if_e	mov	result1, local02
26ba8     24 00 90 AD |  if_e	jmp	#LR__3581
26bac     3E 2C 26 F4 | 	bith	local04, #62
26bb0     0F 2C 62 FD | 	qexp	local04
26bb4     14 13 02 F6 | 	mov	arg01, local02
26bb8     18 14 62 FD | 	getqx	arg02
26bbc     01 14 06 F1 | 	add	arg02, #1
26bc0     01 14 46 F0 | 	shr	arg02, #1
26bc4     00 80 1F FF 
26bc8     00 14 06 F1 | 	add	arg02, ##1056964608
26bcc     3C F2 BF FD | 	call	#__system___float_mul
26bd0                 | LR__3581
26bd0     A7 F0 03 F6 | 	mov	ptra, fp
26bd4     B2 00 A0 FD | 	call	#popregs_
26bd8                 | __system____builtin_exp2f_ret
26bd8     2D 00 64 FD | 	ret
26bdc                 | 
26bdc                 | __system____builtin_log2f
26bdc     06 4A 05 F6 | 	mov	COUNT_, #6
26be0     A8 00 A0 FD | 	call	#pushregs_
26be4     09 27 02 F6 | 	mov	local01, arg01
26be8     09 29 0A F6 | 	mov	local02, arg01 wz
26bec     00 00 40 5F 
26bf0     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
26bf4     00 40 00 AF 
26bf8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
26bfc     08 01 90 AD |  if_e	jmp	#LR__3594
26c00     00 28 56 F2 | 	cmps	local02, #0 wc
26c04     00 E0 3F CF 
26c08     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
26c0c     F8 00 90 CD |  if_b	jmp	#LR__3594
26c10     13 13 02 F6 | 	mov	arg01, local01
26c14     00 90 20 FF 
26c18     00 14 06 F6 | 	mov	arg02, ##1092616192
26c1c     01 16 06 F6 | 	mov	arg03, #1
26c20     1C F6 BF FD | 	call	#__system___float_cmp
26c24     00 FA 0D F2 | 	cmp	result1, #0 wz
26c28     4D 2A 20 AF 
26c2c     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
26c30     D4 00 90 AD |  if_e	jmp	#LR__3594
26c34     13 13 02 F6 | 	mov	arg01, local01
26c38     FC 16 20 FF 
26c3c     54 14 06 F6 | 	mov	arg02, ##1076754516
26c40     01 16 06 F6 | 	mov	arg03, #1
26c44     F8 F5 BF FD | 	call	#__system___float_cmp
26c48     00 FA 0D F2 | 	cmp	result1, #0 wz
26c4c     55 DC 1F AF 
26c50     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
26c54     B0 00 90 AD |  if_e	jmp	#LR__3594
26c58     14 2B 02 F6 | 	mov	local03, local02
26c5c     17 2A 46 F0 | 	shr	local03, #23
26c60     15 2B E2 F8 | 	getbyte	local03, local03, #0
26c64     17 29 06 F4 | 	bitl	local02, #279
26c68     14 2D 02 F6 | 	mov	local04, local02
26c6c     FF 2A 0E F2 | 	cmp	local03, #255 wz
26c70     1C 00 90 5D |  if_ne	jmp	#LR__3590
26c74     00 2C 0E F2 | 	cmp	local04, #0 wz
26c78     00 C0 3F 5F 
26c7c     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
26c80     00 E0 3F AF 
26c84     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
26c88     17 FB 01 F6 | 	mov	result1, local05
26c8c     78 00 90 FD | 	jmp	#LR__3594
26c90                 | LR__3590
26c90     00 2A 0E F2 | 	cmp	local03, #0 wz
26c94     17 2C 26 54 |  if_ne	bith	local04, #23
26c98     7F 2A 86 51 |  if_ne	sub	local03, #127
26c9c     28 00 90 5D |  if_ne	jmp	#LR__3593
26ca0     00 2C 0E F2 | 	cmp	local04, #0 wz
26ca4     00 40 00 AF 
26ca8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
26cac     58 00 90 AD |  if_e	jmp	#LR__3594
26cb0     7E 2A 66 F6 | 	neg	local03, #126
26cb4     97 08 48 FB | 	callpa	#(@LR__3592-@LR__3591)>>2,fcache_load_ptr_
26cb8                 | LR__3591
26cb8     17 2C 2E F4 | 	testbn	local04, #23 wz
26cbc     01 2C 66 A0 |  if_e	shl	local04, #1
26cc0     01 2A 06 A1 |  if_e	add	local03, #1
26cc4     F0 FF 9F AD |  if_e	jmp	#LR__3591
26cc8                 | LR__3592
26cc8                 | LR__3593
26cc8     0E 2C 62 FD | 	qlog	local04
26ccc     01 2A 86 F1 | 	sub	local03, #1
26cd0     15 13 52 F6 | 	abs	arg01, local03 wc
26cd4     1F 30 C6 C9 |  if_b	decod	local06, #31
26cd8     00 30 06 36 |  if_ae	mov	local06, #0
26cdc     18 2E 62 FD | 	getqx	local05
26ce0     9B 2E 06 F4 | 	bitl	local05, #155
26ce4     08 2E 06 F1 | 	add	local05, #8
26ce8     04 2E 46 F0 | 	shr	local05, #4
26cec     00 C0 1F FF 
26cf0     00 2E 06 F1 | 	add	local05, ##1065353216
26cf4     10 ED BF FD | 	call	#__system___float_fromuns
26cf8     18 FB 61 F5 | 	xor	result1, local06
26cfc     FD 14 02 F6 | 	mov	arg02, result1
26d00     17 13 02 F6 | 	mov	arg01, local05
26d04     34 ED BF FD | 	call	#__system___float_add
26d08                 | LR__3594
26d08     A7 F0 03 F6 | 	mov	ptra, fp
26d0c     B2 00 A0 FD | 	call	#popregs_
26d10                 | __system____builtin_log2f_ret
26d10     2D 00 64 FD | 	ret
26d14                 | 
26d14                 | __system____builtin_powf
26d14     04 4A 05 F6 | 	mov	COUNT_, #4
26d18     A8 00 A0 FD | 	call	#pushregs_
26d1c     09 27 02 F6 | 	mov	local01, arg01
26d20     0A 29 02 F6 | 	mov	local02, arg02
26d24     14 13 02 F6 | 	mov	arg01, local02
26d28     00 14 06 F6 | 	mov	arg02, #0
26d2c     A4 F5 BF FD | 	call	#__system___float_tointeger
26d30     FD 2A 02 F6 | 	mov	local03, result1
26d34     15 13 52 F6 | 	abs	arg01, local03 wc
26d38     1F 2C C6 C9 |  if_b	decod	local04, #31
26d3c     00 2C 06 36 |  if_ae	mov	local04, #0
26d40     C4 EC BF FD | 	call	#__system___float_fromuns
26d44     16 FB 61 F5 | 	xor	result1, local04
26d48     FD 12 02 F6 | 	mov	arg01, result1
26d4c     14 15 02 F6 | 	mov	arg02, local02
26d50     01 16 06 F6 | 	mov	arg03, #1
26d54     E8 F4 BF FD | 	call	#__system___float_cmp
26d58     00 FA 0D F2 | 	cmp	result1, #0 wz
26d5c     18 00 90 5D |  if_ne	jmp	#LR__3600
26d60     00 C0 1F FF 
26d64     00 12 06 F6 | 	mov	arg01, ##1065353216
26d68     13 15 02 F6 | 	mov	arg02, local01
26d6c     15 17 02 F6 | 	mov	arg03, local03
26d70     A0 00 B0 FD | 	call	#__system___float_pow_n
26d74     58 00 90 FD | 	jmp	#LR__3601
26d78                 | LR__3600
26d78     13 13 02 F6 | 	mov	arg01, local01
26d7c     00 14 06 F6 | 	mov	arg02, #0
26d80     01 16 06 F6 | 	mov	arg03, #1
26d84     B8 F4 BF FD | 	call	#__system___float_cmp
26d88     00 FA 55 F2 | 	cmps	result1, #0 wc
26d8c     00 E0 3F CF 
26d90     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
26d94     38 00 90 CD |  if_b	jmp	#LR__3601
26d98     13 13 02 F6 | 	mov	arg01, local01
26d9c     00 14 06 F6 | 	mov	arg02, #0
26da0     01 16 06 F6 | 	mov	arg03, #1
26da4     98 F4 BF FD | 	call	#__system___float_cmp
26da8     00 FA 0D F2 | 	cmp	result1, #0 wz
26dac     00 FA 05 A6 |  if_e	mov	result1, #0
26db0     1C 00 90 AD |  if_e	jmp	#LR__3601
26db4     13 13 02 F6 | 	mov	arg01, local01
26db8     20 FE BF FD | 	call	#__system____builtin_log2f
26dbc     FD 12 02 F6 | 	mov	arg01, result1
26dc0     14 15 02 F6 | 	mov	arg02, local02
26dc4     44 F0 BF FD | 	call	#__system___float_mul
26dc8     FD 12 02 F6 | 	mov	arg01, result1
26dcc     F8 FC BF FD | 	call	#__system____builtin_exp2f
26dd0                 | LR__3601
26dd0     A7 F0 03 F6 | 	mov	ptra, fp
26dd4     B2 00 A0 FD | 	call	#popregs_
26dd8                 | __system____builtin_powf_ret
26dd8     2D 00 64 FD | 	ret
26ddc                 | 
26ddc                 | __system____builtin_logbase
26ddc     02 4A 05 F6 | 	mov	COUNT_, #2
26de0     A8 00 A0 FD | 	call	#pushregs_
26de4     09 27 02 F6 | 	mov	local01, arg01
26de8     0A 13 02 F6 | 	mov	arg01, arg02
26dec     EC FD BF FD | 	call	#__system____builtin_log2f
26df0     FD 28 02 F6 | 	mov	local02, result1
26df4     13 13 02 F6 | 	mov	arg01, local01
26df8     E0 FD BF FD | 	call	#__system____builtin_log2f
26dfc     FD 14 02 F6 | 	mov	arg02, result1
26e00     14 13 02 F6 | 	mov	arg01, local02
26e04     08 F2 BF FD | 	call	#__system___float_div
26e08     A7 F0 03 F6 | 	mov	ptra, fp
26e0c     B2 00 A0 FD | 	call	#popregs_
26e10                 | __system____builtin_logbase_ret
26e10     2D 00 64 FD | 	ret
26e14                 | 
26e14                 | __system___float_pow_n
26e14     05 4A 05 F6 | 	mov	COUNT_, #5
26e18     A8 00 A0 FD | 	call	#pushregs_
26e1c     09 27 02 F6 | 	mov	local01, arg01
26e20     0A 29 02 F6 | 	mov	local02, arg02
26e24     0B 2B 02 F6 | 	mov	local03, arg03
26e28     00 2A 56 F2 | 	cmps	local03, #0 wc
26e2c     18 00 90 3D |  if_ae	jmp	#LR__3610
26e30     01 2C 06 F6 | 	mov	local04, #1
26e34     15 2B 62 F6 | 	neg	local03, local03
26e38     00 2A 56 F2 | 	cmps	local03, #0 wc
26e3c     00 FA 05 C6 |  if_b	mov	result1, #0
26e40     94 00 90 CD |  if_b	jmp	#LR__3618
26e44     04 00 90 FD | 	jmp	#LR__3611
26e48                 | LR__3610
26e48     00 2C 06 F6 | 	mov	local04, #0
26e4c                 | LR__3611
26e4c     00 C0 1F FF 
26e50     00 2E 06 F6 | 	mov	local05, ##1065353216
26e54                 | LR__3612
26e54     01 2A 56 F2 | 	cmps	local03, #1 wc
26e58     30 00 90 CD |  if_b	jmp	#LR__3614
26e5c     01 2A CE F7 | 	test	local03, #1 wz
26e60     10 00 90 AD |  if_e	jmp	#LR__3613
26e64     17 13 02 F6 | 	mov	arg01, local05
26e68     14 15 02 F6 | 	mov	arg02, local02
26e6c     9C EF BF FD | 	call	#__system___float_mul
26e70     FD 2E 02 F6 | 	mov	local05, result1
26e74                 | LR__3613
26e74     01 2A C6 F0 | 	sar	local03, #1
26e78     14 13 02 F6 | 	mov	arg01, local02
26e7c     14 15 02 F6 | 	mov	arg02, local02
26e80     88 EF BF FD | 	call	#__system___float_mul
26e84     FD 28 02 F6 | 	mov	local02, result1
26e88     C8 FF 9F FD | 	jmp	#LR__3612
26e8c                 | LR__3614
26e8c     00 2C 0E F2 | 	cmp	local04, #0 wz
26e90     14 00 90 AD |  if_e	jmp	#LR__3615
26e94     13 13 02 F6 | 	mov	arg01, local01
26e98     17 15 02 F6 | 	mov	arg02, local05
26e9c     70 F1 BF FD | 	call	#__system___float_div
26ea0     FD 2E 02 F6 | 	mov	local05, result1
26ea4     2C 00 90 FD | 	jmp	#LR__3617
26ea8                 | LR__3615
26ea8     13 13 02 F6 | 	mov	arg01, local01
26eac     00 C0 1F FF 
26eb0     00 14 06 F6 | 	mov	arg02, ##1065353216
26eb4     01 16 06 F6 | 	mov	arg03, #1
26eb8     84 F3 BF FD | 	call	#__system___float_cmp
26ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
26ec0     10 00 90 AD |  if_e	jmp	#LR__3616
26ec4     13 13 02 F6 | 	mov	arg01, local01
26ec8     17 15 02 F6 | 	mov	arg02, local05
26ecc     3C EF BF FD | 	call	#__system___float_mul
26ed0     FD 2E 02 F6 | 	mov	local05, result1
26ed4                 | LR__3616
26ed4                 | LR__3617
26ed4     17 FB 01 F6 | 	mov	result1, local05
26ed8                 | LR__3618
26ed8     A7 F0 03 F6 | 	mov	ptra, fp
26edc     B2 00 A0 FD | 	call	#popregs_
26ee0                 | __system___float_pow_n_ret
26ee0     2D 00 64 FD | 	ret
26ee4                 | 
26ee4                 | __system___gc_ptrs
26ee4     EC 00 02 F6 | 	mov	_var01, __heap_ptr
26ee8     00 03 02 F6 | 	mov	_var02, _var01
26eec     BB 00 00 FF 
26ef0     F8 02 06 F1 | 	add	_var02, ##95992
26ef4     00 FD 09 FB | 	rdlong	result2, _var01 wz
26ef8     74 00 90 5D |  if_ne	jmp	#LR__3620
26efc     01 FD 01 F6 | 	mov	result2, _var02
26f00     00 FD 81 F1 | 	sub	result2, _var01
26f04     00 03 58 FC | 	wrword	#1, _var01
26f08     00 FB 01 F6 | 	mov	result1, _var01
26f0c     02 FA 05 F1 | 	add	result1, #2
26f10     36 00 80 FF 
26f14     FD 20 59 FC | 	wrword	##27792, result1
26f18     00 FB 01 F6 | 	mov	result1, _var01
26f1c     04 FA 05 F1 | 	add	result1, #4
26f20     FD 00 58 FC | 	wrword	#0, result1
26f24     00 FB 01 F6 | 	mov	result1, _var01
26f28     06 FA 05 F1 | 	add	result1, #6
26f2c     FD 02 58 FC | 	wrword	#1, result1
26f30     10 00 06 F1 | 	add	_var01, #16
26f34     FE FC 51 F6 | 	abs	result2, result2 wc
26f38     04 FC 45 F0 | 	shr	result2, #4
26f3c     FE FC 81 F6 | 	negc	result2, result2
26f40     00 FD 51 FC | 	wrword	result2, _var01
26f44     00 FD 01 F6 | 	mov	result2, _var01
26f48     02 FC 05 F1 | 	add	result2, #2
26f4c     36 00 80 FF 
26f50     FE 1E 59 FC | 	wrword	##27791, result2
26f54     00 FD 01 F6 | 	mov	result2, _var01
26f58     04 FC 05 F1 | 	add	result2, #4
26f5c     FE 00 58 FC | 	wrword	#0, result2
26f60     00 FD 01 F6 | 	mov	result2, _var01
26f64     06 FC 05 F1 | 	add	result2, #6
26f68     FE 00 58 FC | 	wrword	#0, result2
26f6c     10 00 86 F1 | 	sub	_var01, #16
26f70                 | LR__3620
26f70     00 FB 01 F6 | 	mov	result1, _var01
26f74     01 FD 01 F6 | 	mov	result2, _var02
26f78                 | __system___gc_ptrs_ret
26f78     2D 00 64 FD | 	ret
26f7c                 | 
26f7c                 | __system___gc_tryalloc
26f7c     0B 4A 05 F6 | 	mov	COUNT_, #11
26f80     A8 00 A0 FD | 	call	#pushregs_
26f84     09 27 02 F6 | 	mov	local01, arg01
26f88     0A 29 02 F6 | 	mov	local02, arg02
26f8c     54 FF BF FD | 	call	#__system___gc_ptrs
26f90     FD 2A 02 F6 | 	mov	local03, result1
26f94     FE 2C 02 F6 | 	mov	local04, result2
26f98     15 2F 02 F6 | 	mov	local05, local03
26f9c     00 30 06 F6 | 	mov	local06, #0
26fa0     97 1E 48 FB | 	callpa	#(@LR__3631-@LR__3630)>>2,fcache_load_ptr_
26fa4                 | LR__3630
26fa4     17 33 02 F6 | 	mov	local07, local05
26fa8     06 2E 06 F1 | 	add	local05, #6
26fac     17 15 EA FA | 	rdword	arg02, local05 wz
26fb0     15 13 02 F6 | 	mov	arg01, local03
26fb4     00 FA 05 A6 |  if_e	mov	result1, #0
26fb8     04 14 66 50 |  if_ne	shl	arg02, #4
26fbc     0A 13 02 51 |  if_ne	add	arg01, arg02
26fc0     09 FB 01 56 |  if_ne	mov	result1, arg01
26fc4     FD 2E 0A F6 | 	mov	local05, result1 wz
26fc8     17 31 E2 5A |  if_ne	rdword	local06, local05
26fcc     00 2E 0E F2 | 	cmp	local05, #0 wz
26fd0     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
26fd4     08 00 90 1D |  if_a	jmp	#LR__3632
26fd8     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
26fdc     C4 FF 9F 1D |  if_a	jmp	#LR__3630
26fe0                 | LR__3631
26fe0                 | LR__3632
26fe0     00 2E 0E F2 | 	cmp	local05, #0 wz
26fe4     17 FB 01 A6 |  if_e	mov	result1, local05
26fe8     3C 01 90 AD |  if_e	jmp	#LR__3635
26fec     17 FD 01 F6 | 	mov	result2, local05
26ff0     06 FC 05 F1 | 	add	result2, #6
26ff4     FE 34 E2 FA | 	rdword	local08, result2
26ff8     18 27 52 F2 | 	cmps	local01, local06 wc
26ffc     C0 00 90 3D |  if_ae	jmp	#LR__3634
27000     17 27 52 FC | 	wrword	local01, local05
27004     17 13 02 F6 | 	mov	arg01, local05
27008     13 35 02 F6 | 	mov	local08, local01
2700c     04 34 66 F0 | 	shl	local08, #4
27010     1A 13 02 F1 | 	add	arg01, local08
27014     13 31 82 F1 | 	sub	local06, local01
27018     09 31 52 FC | 	wrword	local06, arg01
2701c     09 35 02 F6 | 	mov	local08, arg01
27020     02 34 06 F1 | 	add	local08, #2
27024     36 00 80 FF 
27028     1A 1F 59 FC | 	wrword	##27791, local08
2702c     17 15 0A F6 | 	mov	arg02, local05 wz
27030     00 FA 05 A6 |  if_e	mov	result1, #0
27034     15 15 82 51 |  if_ne	sub	arg02, local03
27038     04 14 46 50 |  if_ne	shr	arg02, #4
2703c     0A FB 01 56 |  if_ne	mov	result1, arg02
27040     09 35 02 F6 | 	mov	local08, arg01
27044     04 34 06 F1 | 	add	local08, #4
27048     1A FB 51 FC | 	wrword	result1, local08
2704c     17 35 02 F6 | 	mov	local08, local05
27050     06 34 06 F1 | 	add	local08, #6
27054     09 15 02 F6 | 	mov	arg02, arg01
27058     1A 35 E2 FA | 	rdword	local08, local08
2705c     06 14 06 F1 | 	add	arg02, #6
27060     0A 35 52 FC | 	wrword	local08, arg02
27064     09 37 02 F6 | 	mov	local09, arg01
27068     1B 15 0A F6 | 	mov	arg02, local09 wz
2706c     00 FA 05 A6 |  if_e	mov	result1, #0
27070     15 15 82 51 |  if_ne	sub	arg02, local03
27074     04 14 46 50 |  if_ne	shr	arg02, #4
27078     0A FB 01 56 |  if_ne	mov	result1, arg02
2707c     FD 34 02 F6 | 	mov	local08, result1
27080     09 39 EA FA | 	rdword	local10, arg01 wz
27084     00 FA 05 A6 |  if_e	mov	result1, #0
27088     04 38 66 50 |  if_ne	shl	local10, #4
2708c     1C 13 02 51 |  if_ne	add	arg01, local10
27090     09 FB 01 56 |  if_ne	mov	result1, arg01
27094     FD 3A 0A F6 | 	mov	local11, result1 wz
27098     24 00 90 AD |  if_e	jmp	#LR__3633
2709c     16 3B 52 F2 | 	cmps	local11, local04 wc
270a0     1C 00 90 3D |  if_ae	jmp	#LR__3633
270a4     1B 15 0A F6 | 	mov	arg02, local09 wz
270a8     00 FA 05 A6 |  if_e	mov	result1, #0
270ac     15 15 82 51 |  if_ne	sub	arg02, local03
270b0     04 14 46 50 |  if_ne	shr	arg02, #4
270b4     0A FB 01 56 |  if_ne	mov	result1, arg02
270b8     04 3A 06 F1 | 	add	local11, #4
270bc     1D FB 51 FC | 	wrword	result1, local11
270c0                 | LR__3633
270c0                 | LR__3634
270c0     06 32 06 F1 | 	add	local07, #6
270c4     19 35 52 FC | 	wrword	local08, local07
270c8     36 00 00 FF 
270cc     80 36 06 F6 | 	mov	local09, ##27776
270d0     14 37 42 F5 | 	or	local09, local02
270d4     00 FA 05 F6 | 	mov	result1, #0
270d8     01 FA 61 FD | 	cogid	result1
270dc     FD 36 42 F5 | 	or	local09, result1
270e0     17 3B 02 F6 | 	mov	local11, local05
270e4     02 3A 06 F1 | 	add	local11, #2
270e8     1D 37 52 FC | 	wrword	local09, local11
270ec     15 37 02 F6 | 	mov	local09, local03
270f0     08 36 06 F1 | 	add	local09, #8
270f4     17 3B 02 F6 | 	mov	local11, local05
270f8     1B 37 E2 FA | 	rdword	local09, local09
270fc     06 3A 06 F1 | 	add	local11, #6
27100     1D 37 52 FC | 	wrword	local09, local11
27104     17 15 0A F6 | 	mov	arg02, local05 wz
27108     00 FA 05 A6 |  if_e	mov	result1, #0
2710c     15 15 82 51 |  if_ne	sub	arg02, local03
27110     04 14 46 50 |  if_ne	shr	arg02, #4
27114     0A FB 01 56 |  if_ne	mov	result1, arg02
27118     08 2A 06 F1 | 	add	local03, #8
2711c     15 FB 51 FC | 	wrword	result1, local03
27120     08 2E 06 F1 | 	add	local05, #8
27124     17 FB 01 F6 | 	mov	result1, local05
27128                 | LR__3635
27128     A7 F0 03 F6 | 	mov	ptra, fp
2712c     B2 00 A0 FD | 	call	#popregs_
27130                 | __system___gc_tryalloc_ret
27130     2D 00 64 FD | 	ret
27134                 | 
27134                 | __system___gc_alloc_managed
27134     01 4A 05 F6 | 	mov	COUNT_, #1
27138     A8 00 A0 FD | 	call	#pushregs_
2713c     09 27 02 F6 | 	mov	local01, arg01
27140     00 14 06 F6 | 	mov	arg02, #0
27144     1C 00 B0 FD | 	call	#__system___gc_doalloc
27148     FD 14 0A F6 | 	mov	arg02, result1 wz
2714c     01 26 56 A2 |  if_e	cmps	local01, #1 wc
27150     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
27154     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
27158     A7 F0 03 F6 | 	mov	ptra, fp
2715c     B2 00 A0 FD | 	call	#popregs_
27160                 | __system___gc_alloc_managed_ret
27160     2D 00 64 FD | 	ret
27164                 | 
27164                 | __system___gc_doalloc
27164     06 4A 05 F6 | 	mov	COUNT_, #6
27168     A8 00 A0 FD | 	call	#pushregs_
2716c     09 27 0A F6 | 	mov	local01, arg01 wz
27170     0A 29 02 F6 | 	mov	local02, arg02
27174     00 FA 05 A6 |  if_e	mov	result1, #0
27178     8C 00 90 AD |  if_e	jmp	#LR__3647
2717c     17 26 06 F1 | 	add	local01, #23
27180     0F 26 26 F5 | 	andn	local01, #15
27184     04 26 46 F0 | 	shr	local01, #4
27188     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2718c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27190     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
27194     FC BD BF FD | 	call	#__system___lockmem
27198     13 13 02 F6 | 	mov	arg01, local01
2719c     14 15 02 F6 | 	mov	arg02, local02
271a0     D8 FD BF FD | 	call	#__system___gc_tryalloc
271a4     FD 2A 0A F6 | 	mov	local03, result1 wz
271a8     14 00 90 5D |  if_ne	jmp	#LR__3640
271ac     70 03 B0 FD | 	call	#__system___gc_docollect
271b0     13 13 02 F6 | 	mov	arg01, local01
271b4     14 15 02 F6 | 	mov	arg02, local02
271b8     C0 FD BF FD | 	call	#__system___gc_tryalloc
271bc     FD 2A 02 F6 | 	mov	local03, result1
271c0                 | LR__3640
271c0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
271c4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
271c8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
271cc     09 01 68 FC | 	wrlong	#0, arg01
271d0     00 2A 0E F2 | 	cmp	local03, #0 wz
271d4     2C 00 90 AD |  if_e	jmp	#LR__3646
271d8     04 26 66 F0 | 	shl	local01, #4
271dc     08 26 86 F1 | 	sub	local01, #8
271e0     13 2D 52 F6 | 	abs	local04, local01 wc
271e4     02 2C 46 F0 | 	shr	local04, #2
271e8     16 2F 8A F6 | 	negc	local05, local04 wz
271ec     15 31 02 F6 | 	mov	local06, local03
271f0     10 00 90 AD |  if_e	jmp	#LR__3645
271f4     97 06 48 FB | 	callpa	#(@LR__3643-@LR__3641)>>2,fcache_load_ptr_
271f8                 | LR__3641
271f8     17 05 D8 FC | 	rep	@LR__3644, local05
271fc                 | LR__3642
271fc     18 01 68 FC | 	wrlong	#0, local06
27200     04 30 06 F1 | 	add	local06, #4
27204                 | LR__3643
27204                 | LR__3644
27204                 | LR__3645
27204                 | LR__3646
27204     15 FB 01 F6 | 	mov	result1, local03
27208                 | LR__3647
27208     A7 F0 03 F6 | 	mov	ptra, fp
2720c     B2 00 A0 FD | 	call	#popregs_
27210                 | __system___gc_doalloc_ret
27210     2D 00 64 FD | 	ret
27214                 | 
27214                 | __system___gc_isvalidptr
27214     F8 16 06 F4 | 	bitl	arg03, #248
27218     08 16 86 F1 | 	sub	arg03, #8
2721c     09 17 52 F2 | 	cmps	arg03, arg01 wc
27220     08 00 90 CD |  if_b	jmp	#LR__3650
27224     0A 17 52 F2 | 	cmps	arg03, arg02 wc
27228     08 00 90 CD |  if_b	jmp	#LR__3651
2722c                 | LR__3650
2722c     00 FA 05 F6 | 	mov	result1, #0
27230     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
27234                 | LR__3651
27234     0B 01 02 F6 | 	mov	_var01, arg03
27238     09 01 62 F5 | 	xor	_var01, arg01
2723c     0F 00 CE F7 | 	test	_var01, #15 wz
27240     00 FA 05 56 |  if_ne	mov	result1, #0
27244     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
27248     0B 01 02 F6 | 	mov	_var01, arg03
2724c     02 00 06 F1 | 	add	_var01, #2
27250     00 01 E2 FA | 	rdword	_var01, _var01
27254     7F 00 00 FF 
27258     C0 01 06 F5 | 	and	_var01, ##65472
2725c     36 00 00 FF 
27260     80 00 0E F2 | 	cmp	_var01, ##27776 wz
27264     00 FA 05 56 |  if_ne	mov	result1, #0
27268     0B FB 01 A6 |  if_e	mov	result1, arg03
2726c                 | __system___gc_isvalidptr_ret
2726c     2D 00 64 FD | 	ret
27270                 | 
27270                 | __system___gc_free
27270     09 17 02 F6 | 	mov	arg03, arg01
27274     6C FC BF FD | 	call	#__system___gc_ptrs
27278     FD 12 02 F6 | 	mov	arg01, result1
2727c     FE 14 02 F6 | 	mov	arg02, result2
27280     90 FF BF FD | 	call	#__system___gc_isvalidptr
27284     FD 14 0A F6 | 	mov	arg02, result1 wz
27288     28 00 90 AD |  if_e	jmp	#LR__3660
2728c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
27290     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27294     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
27298     F8 BC BF FD | 	call	#__system___lockmem
2729c     0A 13 02 F6 | 	mov	arg01, arg02
272a0     14 00 B0 FD | 	call	#__system___gc_dofree
272a4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
272a8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
272ac     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
272b0     09 01 68 FC | 	wrlong	#0, arg01
272b4                 | LR__3660
272b4                 | __system___gc_free_ret
272b4     2D 00 64 FD | 	ret
272b8                 | 
272b8                 | __system___gc_dofree
272b8     06 4A 05 F6 | 	mov	COUNT_, #6
272bc     A8 00 A0 FD | 	call	#pushregs_
272c0     09 27 02 F6 | 	mov	local01, arg01
272c4     1C FC BF FD | 	call	#__system___gc_ptrs
272c8     FD 28 02 F6 | 	mov	local02, result1
272cc     FE 2A 02 F6 | 	mov	local03, result2
272d0     13 15 02 F6 | 	mov	arg02, local01
272d4     02 14 06 F1 | 	add	arg02, #2
272d8     36 00 80 FF 
272dc     0A 1F 59 FC | 	wrword	##27791, arg02
272e0     13 2D 02 F6 | 	mov	local04, local01
272e4     13 13 02 F6 | 	mov	arg01, local01
272e8     09 2F EA FA | 	rdword	local05, arg01 wz
272ec     00 FA 05 A6 |  if_e	mov	result1, #0
272f0     04 2E 66 50 |  if_ne	shl	local05, #4
272f4     17 13 02 51 |  if_ne	add	arg01, local05
272f8     09 FB 01 56 |  if_ne	mov	result1, arg01
272fc     FD 30 02 F6 | 	mov	local06, result1
27300     97 24 48 FB | 	callpa	#(@LR__3671-@LR__3670)>>2,fcache_load_ptr_
27304                 | LR__3670
27304     04 2C 06 F1 | 	add	local04, #4
27308     16 15 EA FA | 	rdword	arg02, local04 wz
2730c     14 13 02 F6 | 	mov	arg01, local02
27310     00 FA 05 A6 |  if_e	mov	result1, #0
27314     04 14 66 50 |  if_ne	shl	arg02, #4
27318     0A 13 02 51 |  if_ne	add	arg01, arg02
2731c     09 FB 01 56 |  if_ne	mov	result1, arg01
27320     FD 2C 0A F6 | 	mov	local04, result1 wz
27324     24 00 90 AD |  if_e	jmp	#LR__3672
27328     16 13 02 F6 | 	mov	arg01, local04
2732c     00 FA 05 F6 | 	mov	result1, #0
27330     02 12 06 F1 | 	add	arg01, #2
27334     09 13 E2 FA | 	rdword	arg01, arg01
27338     36 00 00 FF 
2733c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
27340     01 FA 65 A6 |  if_e	neg	result1, #1
27344     00 FA 0D F2 | 	cmp	result1, #0 wz
27348     B8 FF 9F AD |  if_e	jmp	#LR__3670
2734c                 | LR__3671
2734c                 | LR__3672
2734c     00 2C 0E F2 | 	cmp	local04, #0 wz
27350     14 2D 02 A6 |  if_e	mov	local04, local02
27354     16 15 02 F6 | 	mov	arg02, local04
27358     06 14 06 F1 | 	add	arg02, #6
2735c     13 13 02 F6 | 	mov	arg01, local01
27360     0A 15 E2 FA | 	rdword	arg02, arg02
27364     06 12 06 F1 | 	add	arg01, #6
27368     09 15 52 FC | 	wrword	arg02, arg01
2736c     13 15 0A F6 | 	mov	arg02, local01 wz
27370     00 FA 05 A6 |  if_e	mov	result1, #0
27374     14 15 82 51 |  if_ne	sub	arg02, local02
27378     04 14 46 50 |  if_ne	shr	arg02, #4
2737c     0A FB 01 56 |  if_ne	mov	result1, arg02
27380     16 15 02 F6 | 	mov	arg02, local04
27384     06 14 06 F1 | 	add	arg02, #6
27388     0A FB 51 FC | 	wrword	result1, arg02
2738c     14 2D 0A F2 | 	cmp	local04, local02 wz
27390     A4 00 90 AD |  if_e	jmp	#LR__3675
27394     16 13 02 F6 | 	mov	arg01, local04
27398     09 2F EA FA | 	rdword	local05, arg01 wz
2739c     00 FA 05 A6 |  if_e	mov	result1, #0
273a0     04 2E 66 50 |  if_ne	shl	local05, #4
273a4     17 13 02 51 |  if_ne	add	arg01, local05
273a8     09 FB 01 56 |  if_ne	mov	result1, arg01
273ac     13 FB 09 F2 | 	cmp	result1, local01 wz
273b0     84 00 90 5D |  if_ne	jmp	#LR__3674
273b4     16 31 E2 FA | 	rdword	local06, local04
273b8     13 15 E2 FA | 	rdword	arg02, local01
273bc     0A 31 02 F1 | 	add	local06, arg02
273c0     16 31 52 FC | 	wrword	local06, local04
273c4     13 31 02 F6 | 	mov	local06, local01
273c8     02 30 06 F1 | 	add	local06, #2
273cc     18 01 58 FC | 	wrword	#0, local06
273d0     13 13 02 F6 | 	mov	arg01, local01
273d4     09 2F EA FA | 	rdword	local05, arg01 wz
273d8     00 FA 05 A6 |  if_e	mov	result1, #0
273dc     04 2E 66 50 |  if_ne	shl	local05, #4
273e0     17 13 02 51 |  if_ne	add	arg01, local05
273e4     09 FB 01 56 |  if_ne	mov	result1, arg01
273e8     FD 30 02 F6 | 	mov	local06, result1
273ec     15 31 52 F2 | 	cmps	local06, local03 wc
273f0     20 00 90 3D |  if_ae	jmp	#LR__3673
273f4     16 15 0A F6 | 	mov	arg02, local04 wz
273f8     00 FA 05 A6 |  if_e	mov	result1, #0
273fc     14 15 82 51 |  if_ne	sub	arg02, local02
27400     04 14 46 50 |  if_ne	shr	arg02, #4
27404     0A FB 01 56 |  if_ne	mov	result1, arg02
27408     18 15 02 F6 | 	mov	arg02, local06
2740c     04 14 06 F1 | 	add	arg02, #4
27410     0A FB 51 FC | 	wrword	result1, arg02
27414                 | LR__3673
27414     13 15 02 F6 | 	mov	arg02, local01
27418     06 14 06 F1 | 	add	arg02, #6
2741c     16 FD 01 F6 | 	mov	result2, local04
27420     0A 15 E2 FA | 	rdword	arg02, arg02
27424     06 FC 05 F1 | 	add	result2, #6
27428     FE 14 52 FC | 	wrword	arg02, result2
2742c     06 26 06 F1 | 	add	local01, #6
27430     13 01 58 FC | 	wrword	#0, local01
27434     16 27 02 F6 | 	mov	local01, local04
27438                 | LR__3674
27438                 | LR__3675
27438     13 13 02 F6 | 	mov	arg01, local01
2743c     09 2F EA FA | 	rdword	local05, arg01 wz
27440     00 FA 05 A6 |  if_e	mov	result1, #0
27444     04 2E 66 50 |  if_ne	shl	local05, #4
27448     17 13 02 51 |  if_ne	add	arg01, local05
2744c     09 FB 01 56 |  if_ne	mov	result1, arg01
27450     FD 14 0A F6 | 	mov	arg02, result1 wz
27454     B8 00 90 AD |  if_e	jmp	#LR__3677
27458     15 15 52 F2 | 	cmps	arg02, local03 wc
2745c     B0 00 90 3D |  if_ae	jmp	#LR__3677
27460     0A 13 02 F6 | 	mov	arg01, arg02
27464     00 FA 05 F6 | 	mov	result1, #0
27468     02 12 06 F1 | 	add	arg01, #2
2746c     09 13 E2 FA | 	rdword	arg01, arg01
27470     36 00 00 FF 
27474     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
27478     01 FA 65 A6 |  if_e	neg	result1, #1
2747c     00 FA 0D F2 | 	cmp	result1, #0 wz
27480     8C 00 90 AD |  if_e	jmp	#LR__3677
27484     13 2D 02 F6 | 	mov	local04, local01
27488     16 31 E2 FA | 	rdword	local06, local04
2748c     0A 13 02 F6 | 	mov	arg01, arg02
27490     09 27 E2 FA | 	rdword	local01, arg01
27494     13 31 02 F1 | 	add	local06, local01
27498     16 31 52 FC | 	wrword	local06, local04
2749c     09 31 02 F6 | 	mov	local06, arg01
274a0     06 30 06 F1 | 	add	local06, #6
274a4     16 27 02 F6 | 	mov	local01, local04
274a8     18 31 E2 FA | 	rdword	local06, local06
274ac     06 26 06 F1 | 	add	local01, #6
274b0     13 31 52 FC | 	wrword	local06, local01
274b4     09 31 02 F6 | 	mov	local06, arg01
274b8     02 30 06 F1 | 	add	local06, #2
274bc     18 55 59 FC | 	wrword	#170, local06
274c0     09 31 02 F6 | 	mov	local06, arg01
274c4     06 30 06 F1 | 	add	local06, #6
274c8     18 01 58 FC | 	wrword	#0, local06
274cc     09 2F EA FA | 	rdword	local05, arg01 wz
274d0     00 FA 05 A6 |  if_e	mov	result1, #0
274d4     04 2E 66 50 |  if_ne	shl	local05, #4
274d8     17 13 02 51 |  if_ne	add	arg01, local05
274dc     09 FB 01 56 |  if_ne	mov	result1, arg01
274e0     FD 30 0A F6 | 	mov	local06, result1 wz
274e4     28 00 90 AD |  if_e	jmp	#LR__3676
274e8     15 31 52 F2 | 	cmps	local06, local03 wc
274ec     20 00 90 3D |  if_ae	jmp	#LR__3676
274f0     16 15 0A F6 | 	mov	arg02, local04 wz
274f4     00 FA 05 A6 |  if_e	mov	result1, #0
274f8     14 15 82 51 |  if_ne	sub	arg02, local02
274fc     04 14 46 50 |  if_ne	shr	arg02, #4
27500     0A FB 01 56 |  if_ne	mov	result1, arg02
27504     18 2D 02 F6 | 	mov	local04, local06
27508     04 2C 06 F1 | 	add	local04, #4
2750c     16 FB 51 FC | 	wrword	result1, local04
27510                 | LR__3676
27510                 | LR__3677
27510     18 FB 01 F6 | 	mov	result1, local06
27514     A7 F0 03 F6 | 	mov	ptra, fp
27518     B2 00 A0 FD | 	call	#popregs_
2751c                 | __system___gc_dofree_ret
2751c     2D 00 64 FD | 	ret
27520                 | 
27520                 | __system___gc_docollect
27520     05 4A 05 F6 | 	mov	COUNT_, #5
27524     A8 00 A0 FD | 	call	#pushregs_
27528     B8 F9 BF FD | 	call	#__system___gc_ptrs
2752c     FE 26 02 F6 | 	mov	local01, result2
27530     FD 28 02 F6 | 	mov	local02, result1
27534     14 13 02 F6 | 	mov	arg01, local02
27538     09 2B EA FA | 	rdword	local03, arg01 wz
2753c     00 FA 05 A6 |  if_e	mov	result1, #0
27540     04 2A 66 50 |  if_ne	shl	local03, #4
27544     15 13 02 51 |  if_ne	add	arg01, local03
27548     09 FB 01 56 |  if_ne	mov	result1, arg01
2754c     FD 2C 0A F6 | 	mov	local04, result1 wz
27550     00 FA 05 F6 | 	mov	result1, #0
27554     01 FA 61 FD | 	cogid	result1
27558     FD 2E 02 F6 | 	mov	local05, result1
2755c     48 00 90 AD |  if_e	jmp	#LR__3682
27560     97 22 48 FB | 	callpa	#(@LR__3681-@LR__3680)>>2,fcache_load_ptr_
27564                 | LR__3680
27564     13 2D 52 F2 | 	cmps	local04, local01 wc
27568     3C 00 90 3D |  if_ae	jmp	#LR__3682
2756c     16 15 02 F6 | 	mov	arg02, local04
27570     02 14 06 F1 | 	add	arg02, #2
27574     0A 15 E2 FA | 	rdword	arg02, arg02
27578     20 14 26 F5 | 	andn	arg02, #32
2757c     16 13 02 F6 | 	mov	arg01, local04
27580     02 12 06 F1 | 	add	arg01, #2
27584     09 15 52 FC | 	wrword	arg02, arg01
27588     16 13 02 F6 | 	mov	arg01, local04
2758c     09 2B EA FA | 	rdword	local03, arg01 wz
27590     00 FA 05 A6 |  if_e	mov	result1, #0
27594     04 2A 66 50 |  if_ne	shl	local03, #4
27598     15 13 02 51 |  if_ne	add	arg01, local03
2759c     09 FB 01 56 |  if_ne	mov	result1, arg01
275a0     FD 2C 0A F6 | 	mov	local04, result1 wz
275a4     BC FF 9F 5D |  if_ne	jmp	#LR__3680
275a8                 | LR__3681
275a8                 | LR__3682
275a8     00 2A 06 F6 | 	mov	local03, #0
275ac     00 12 06 F6 | 	mov	arg01, #0
275b0     B8 B9 BF FD | 	call	#__system____topofstack
275b4     FD 14 02 F6 | 	mov	arg02, result1
275b8     15 13 02 F6 | 	mov	arg01, local03
275bc     90 00 B0 FD | 	call	#__system___gc_markhub
275c0     1C 01 B0 FD | 	call	#__system___gc_markcog
275c4     14 13 02 F6 | 	mov	arg01, local02
275c8     09 2B EA FA | 	rdword	local03, arg01 wz
275cc     00 FA 05 A6 |  if_e	mov	result1, #0
275d0     04 2A 66 50 |  if_ne	shl	local03, #4
275d4     15 13 02 51 |  if_ne	add	arg01, local03
275d8     09 FB 01 56 |  if_ne	mov	result1, arg01
275dc     FD 28 0A F6 | 	mov	local02, result1 wz
275e0     60 00 90 AD |  if_e	jmp	#LR__3686
275e4                 | LR__3683
275e4     14 2D 02 F6 | 	mov	local04, local02
275e8     16 13 02 F6 | 	mov	arg01, local04
275ec     09 2B EA FA | 	rdword	local03, arg01 wz
275f0     00 FA 05 A6 |  if_e	mov	result1, #0
275f4     04 2A 66 50 |  if_ne	shl	local03, #4
275f8     15 13 02 51 |  if_ne	add	arg01, local03
275fc     09 FB 01 56 |  if_ne	mov	result1, arg01
27600     FD 28 02 F6 | 	mov	local02, result1
27604     16 15 02 F6 | 	mov	arg02, local04
27608     02 14 06 F1 | 	add	arg02, #2
2760c     0A 15 E2 FA | 	rdword	arg02, arg02
27610     20 14 CE F7 | 	test	arg02, #32 wz
27614     10 14 CE A7 |  if_e	test	arg02, #16 wz
27618     1C 00 90 5D |  if_ne	jmp	#LR__3685
2761c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
27620     17 15 0A F2 | 	cmp	arg02, local05 wz
27624     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
27628     0C 00 90 5D |  if_ne	jmp	#LR__3684
2762c     16 13 02 F6 | 	mov	arg01, local04
27630     84 FC BF FD | 	call	#__system___gc_dofree
27634     FD 28 02 F6 | 	mov	local02, result1
27638                 | LR__3684
27638                 | LR__3685
27638     00 28 0E F2 | 	cmp	local02, #0 wz
2763c     13 29 52 52 |  if_ne	cmps	local02, local01 wc
27640     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3683
27644                 | LR__3686
27644     A7 F0 03 F6 | 	mov	ptra, fp
27648     B2 00 A0 FD | 	call	#popregs_
2764c                 | __system___gc_docollect_ret
2764c     2D 00 64 FD | 	ret
27650                 | 
27650                 | __system___gc_markhub
27650     04 4A 05 F6 | 	mov	COUNT_, #4
27654     A8 00 A0 FD | 	call	#pushregs_
27658     09 27 02 F6 | 	mov	local01, arg01
2765c     0A 29 02 F6 | 	mov	local02, arg02
27660     80 F8 BF FD | 	call	#__system___gc_ptrs
27664     FD 2A 02 F6 | 	mov	local03, result1
27668     FE 2C 02 F6 | 	mov	local04, result2
2766c                 | LR__3690
2766c     14 27 52 F2 | 	cmps	local01, local02 wc
27670     60 00 90 3D |  if_ae	jmp	#LR__3691
27674     13 17 02 FB | 	rdlong	arg03, local01
27678     04 26 06 F1 | 	add	local01, #4
2767c     16 15 02 F6 | 	mov	arg02, local04
27680     15 13 02 F6 | 	mov	arg01, local03
27684     8C FB BF FD | 	call	#__system___gc_isvalidptr
27688     FD 16 0A F6 | 	mov	arg03, result1 wz
2768c     DC FF 9F AD |  if_e	jmp	#LR__3690
27690     0B 13 02 F6 | 	mov	arg01, arg03
27694     00 FA 05 F6 | 	mov	result1, #0
27698     02 12 06 F1 | 	add	arg01, #2
2769c     09 13 E2 FA | 	rdword	arg01, arg01
276a0     36 00 00 FF 
276a4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
276a8     01 FA 65 A6 |  if_e	neg	result1, #1
276ac     00 FA 0D F2 | 	cmp	result1, #0 wz
276b0     B8 FF 9F 5D |  if_ne	jmp	#LR__3690
276b4     0B FD 01 F6 | 	mov	result2, arg03
276b8     02 FC 05 F1 | 	add	result2, #2
276bc     FE FC E1 FA | 	rdword	result2, result2
276c0     0F FC 25 F5 | 	andn	result2, #15
276c4     2E FC 45 F5 | 	or	result2, #46
276c8     02 16 06 F1 | 	add	arg03, #2
276cc     0B FD 51 FC | 	wrword	result2, arg03
276d0     98 FF 9F FD | 	jmp	#LR__3690
276d4                 | LR__3691
276d4     A7 F0 03 F6 | 	mov	ptra, fp
276d8     B2 00 A0 FD | 	call	#popregs_
276dc                 | __system___gc_markhub_ret
276dc     2D 00 64 FD | 	ret
276e0                 | 
276e0                 | __system___gc_markcog
276e0     04 4A 05 F6 | 	mov	COUNT_, #4
276e4     A8 00 A0 FD | 	call	#pushregs_
276e8     F8 F7 BF FD | 	call	#__system___gc_ptrs
276ec     FD 26 02 F6 | 	mov	local01, result1
276f0     FE 28 02 F6 | 	mov	local02, result2
276f4     EF 2B 06 F6 | 	mov	local03, #495
276f8                 | LR__3700
276f8                 | 	'.live	local03
276f8     00 2A 96 F9 | 	alts	local03, #0
276fc     15 2D 02 F6 | 	mov	local04, local03
27700     13 13 02 F6 | 	mov	arg01, local01
27704     14 15 02 F6 | 	mov	arg02, local02
27708     16 17 02 F6 | 	mov	arg03, local04
2770c     04 FB BF FD | 	call	#__system___gc_isvalidptr
27710     00 FA 0D F2 | 	cmp	result1, #0 wz
27714     18 00 90 AD |  if_e	jmp	#LR__3701
27718     FD 2C 02 F6 | 	mov	local04, result1
2771c     02 2C 06 F1 | 	add	local04, #2
27720     16 2D E2 FA | 	rdword	local04, local04
27724     20 2C 46 F5 | 	or	local04, #32
27728     02 FA 05 F1 | 	add	result1, #2
2772c     FD 2C 52 FC | 	wrword	local04, result1
27730                 | LR__3701
27730     01 2A 86 F1 | 	sub	local03, #1
27734     00 2A 56 F2 | 	cmps	local03, #0 wc
27738     BC FF 9F 3D |  if_ae	jmp	#LR__3700
2773c     A7 F0 03 F6 | 	mov	ptra, fp
27740     B2 00 A0 FD | 	call	#popregs_
27744                 | __system___gc_markcog_ret
27744     2D 00 64 FD | 	ret
27748                 | 
27748                 | __system__opendir
27748     06 4A 05 F6 | 	mov	COUNT_, #6
2774c     A8 00 A0 FD | 	call	#pushregs_
27750     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27754     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
27758     09 15 02 F6 | 	mov	arg02, arg01
2775c     13 13 02 F6 | 	mov	arg01, local01
27760     00 16 06 F6 | 	mov	arg03, #0
27764     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
27768     C0 BF BF FD | 	call	#__system____getvfsforfile
2776c     FD 28 0A F6 | 	mov	local02, result1 wz
27770     10 00 90 AD |  if_e	jmp	#LR__3710
27774     28 28 06 F1 | 	add	local02, #40
27778     14 17 0A FB | 	rdlong	arg03, local02 wz
2777c     28 28 86 F1 | 	sub	local02, #40
27780     14 00 90 5D |  if_ne	jmp	#LR__3711
27784                 | LR__3710
27784     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27788     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2778c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27790     00 FA 05 F6 | 	mov	result1, #0
27794     90 00 90 FD | 	jmp	#LR__3713
27798                 | LR__3711
27798     5C 12 06 F6 | 	mov	arg01, #92
2779c     10 14 06 F6 | 	mov	arg02, #16
277a0     C0 F9 BF FD | 	call	#__system___gc_doalloc
277a4     FD 2A 0A F6 | 	mov	local03, result1 wz
277a8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
277ac     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
277b0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
277b4     00 FA 05 A6 |  if_e	mov	result1, #0
277b8     6C 00 90 AD |  if_e	jmp	#LR__3713
277bc     28 28 06 F1 | 	add	local02, #40
277c0     14 2D 02 FB | 	rdlong	local04, local02
277c4     16 2F 02 F6 | 	mov	local05, local04
277c8     28 28 86 F1 | 	sub	local02, #40
277cc     13 2E 46 F7 | 	zerox	local05, #19
277d0     14 2C 46 F0 | 	shr	local04, #20
277d4     02 2C 66 F0 | 	shl	local04, #2
277d8     ED 2C 02 F1 | 	add	local04, __methods__
277dc     16 2D 02 FB | 	rdlong	local04, local04
277e0     15 13 02 F6 | 	mov	arg01, local03
277e4     13 15 02 F6 | 	mov	arg02, local01
277e8     F2 30 02 F6 | 	mov	local06, objptr
277ec     17 E5 01 F6 | 	mov	objptr, local05
277f0     2D 2C 62 FD | 	call	local04
277f4     18 E5 01 F6 | 	mov	objptr, local06
277f8     FD 16 0A F6 | 	mov	arg03, result1 wz
277fc     20 00 90 AD |  if_e	jmp	#LR__3712
27800     00 16 4E F2 | 	cmps	arg03, #0 wz
27804     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27808     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2780c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27810     15 13 02 F6 | 	mov	arg01, local03
27814     58 FA BF FD | 	call	#__system___gc_free
27818     00 FA 05 F6 | 	mov	result1, #0
2781c     08 00 90 FD | 	jmp	#LR__3713
27820                 | LR__3712
27820     15 29 62 FC | 	wrlong	local02, local03
27824     15 FB 01 F6 | 	mov	result1, local03
27828                 | LR__3713
27828     A7 F0 03 F6 | 	mov	ptra, fp
2782c     B2 00 A0 FD | 	call	#popregs_
27830                 | __system__opendir_ret
27830     2D 00 64 FD | 	ret
27834                 | 
27834                 | __system__closedir
27834     04 4A 05 F6 | 	mov	COUNT_, #4
27838     A8 00 A0 FD | 	call	#pushregs_
2783c     09 27 02 F6 | 	mov	local01, arg01
27840     13 13 02 FB | 	rdlong	arg01, local01
27844     2C 12 06 F1 | 	add	arg01, #44
27848     09 29 02 FB | 	rdlong	local02, arg01
2784c     14 2B 02 F6 | 	mov	local03, local02
27850     13 2A 46 F7 | 	zerox	local03, #19
27854     14 28 46 F0 | 	shr	local02, #20
27858     02 28 66 F0 | 	shl	local02, #2
2785c     ED 28 02 F1 | 	add	local02, __methods__
27860     14 29 02 FB | 	rdlong	local02, local02
27864     13 13 02 F6 | 	mov	arg01, local01
27868     F2 2C 02 F6 | 	mov	local04, objptr
2786c     15 E5 01 F6 | 	mov	objptr, local03
27870     2D 28 62 FD | 	call	local02
27874     16 E5 01 F6 | 	mov	objptr, local04
27878     FD 2C 02 F6 | 	mov	local04, result1
2787c     13 13 02 F6 | 	mov	arg01, local01
27880     EC F9 BF FD | 	call	#__system___gc_free
27884     00 2C 4E F2 | 	cmps	local04, #0 wz
27888     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2788c     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
27890     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27894     01 FA 65 56 |  if_ne	neg	result1, #1
27898     00 FA 05 A6 |  if_e	mov	result1, #0
2789c     A7 F0 03 F6 | 	mov	ptra, fp
278a0     B2 00 A0 FD | 	call	#popregs_
278a4                 | __system__closedir_ret
278a4     2D 00 64 FD | 	ret
278a8                 | 
278a8                 | __system__readdir
278a8     04 4A 05 F6 | 	mov	COUNT_, #4
278ac     A8 00 A0 FD | 	call	#pushregs_
278b0     09 15 0A FB | 	rdlong	arg02, arg01 wz
278b4     08 12 06 F1 | 	add	arg01, #8
278b8     09 27 02 F6 | 	mov	local01, arg01
278bc     08 12 86 F1 | 	sub	arg01, #8
278c0     00 FA 05 A6 |  if_e	mov	result1, #0
278c4     5C 00 90 AD |  if_e	jmp	#LR__3721
278c8     30 14 06 F1 | 	add	arg02, #48
278cc     0A 29 02 FB | 	rdlong	local02, arg02
278d0     14 2B 02 F6 | 	mov	local03, local02
278d4     13 2A 46 F7 | 	zerox	local03, #19
278d8     14 28 46 F0 | 	shr	local02, #20
278dc     02 28 66 F0 | 	shl	local02, #2
278e0     ED 28 02 F1 | 	add	local02, __methods__
278e4     14 29 02 FB | 	rdlong	local02, local02
278e8     13 15 02 F6 | 	mov	arg02, local01
278ec     F2 2C 02 F6 | 	mov	local04, objptr
278f0     15 E5 01 F6 | 	mov	objptr, local03
278f4     2D 28 62 FD | 	call	local02
278f8     16 E5 01 F6 | 	mov	objptr, local04
278fc     00 FA 4D F2 | 	cmps	result1, #0 wz
27900     1C 00 90 AD |  if_e	jmp	#LR__3720
27904     01 FA 55 F2 | 	cmps	result1, #1 wc
27908     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2790c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
27910     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
27914     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
27918     00 FA 05 F6 | 	mov	result1, #0
2791c     04 00 90 FD | 	jmp	#LR__3721
27920                 | LR__3720
27920     13 FB 01 F6 | 	mov	result1, local01
27924                 | LR__3721
27924     A7 F0 03 F6 | 	mov	ptra, fp
27928     B2 00 A0 FD | 	call	#popregs_
2792c                 | __system__readdir_ret
2792c     2D 00 64 FD | 	ret
27930                 | 
27930                 | __system___openraw
27930     15 4A 05 F6 | 	mov	COUNT_, #21
27934     A8 00 A0 FD | 	call	#pushregs_
27938     09 27 02 F6 | 	mov	local01, arg01
2793c     0A 29 02 F6 | 	mov	local02, arg02
27940     0B 2B 02 F6 | 	mov	local03, arg03
27944     0C 2D 02 F6 | 	mov	local04, arg04
27948     04 2E 06 F6 | 	mov	local05, #4
2794c     13 31 02 F6 | 	mov	local06, local01
27950     00 32 06 F6 | 	mov	local07, #0
27954     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27958     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2795c     1A 13 02 F6 | 	mov	arg01, local08
27960     14 15 02 F6 | 	mov	arg02, local02
27964     00 16 06 F6 | 	mov	arg03, #0
27968     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2796c     BC BD BF FD | 	call	#__system____getvfsforfile
27970     FD 36 0A F6 | 	mov	local09, result1 wz
27974     10 00 90 AD |  if_e	jmp	#LR__3730
27978     20 36 06 F1 | 	add	local09, #32
2797c     1B FB 09 FB | 	rdlong	result1, local09 wz
27980     20 36 86 F1 | 	sub	local09, #32
27984     14 00 90 5D |  if_ne	jmp	#LR__3731
27988                 | LR__3730
27988     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2798c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
27990     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27994     01 FA 65 F6 | 	neg	result1, #1
27998     8C 02 90 FD | 	jmp	#LR__3744
2799c                 | LR__3731
2799c     18 13 02 F6 | 	mov	arg01, local06
279a0     00 14 06 F6 | 	mov	arg02, #0
279a4     34 16 06 F6 | 	mov	arg03, #52
279a8     09 39 02 F6 | 	mov	local10, arg01
279ac     98 00 A0 FD | 	call	#\builtin_bytefill_
279b0     20 36 06 F1 | 	add	local09, #32
279b4     1B 3B 02 FB | 	rdlong	local11, local09
279b8     1D 3D 02 F6 | 	mov	local12, local11
279bc     1D 3F 02 F6 | 	mov	local13, local11
279c0     20 36 86 F1 | 	sub	local09, #32
279c4     1F 41 02 F6 | 	mov	local14, local13
279c8     13 3C 46 F7 | 	zerox	local12, #19
279cc     14 40 46 F0 | 	shr	local14, #20
279d0     02 40 66 F0 | 	shl	local14, #2
279d4     ED 40 02 F1 | 	add	local14, __methods__
279d8     20 41 02 FB | 	rdlong	local14, local14
279dc     18 43 02 F6 | 	mov	local15, local06
279e0     1A 45 02 F6 | 	mov	local16, local08
279e4     15 47 02 F6 | 	mov	local17, local03
279e8     21 13 02 F6 | 	mov	arg01, local15
279ec     22 15 02 F6 | 	mov	arg02, local16
279f0     23 17 02 F6 | 	mov	arg03, local17
279f4     F2 48 02 F6 | 	mov	local18, objptr
279f8     1E E5 01 F6 | 	mov	objptr, local12
279fc     2D 40 62 FD | 	call	local14
27a00     24 E5 01 F6 | 	mov	objptr, local18
27a04     FD 4A 0A F6 | 	mov	local19, result1 wz
27a08     04 2A CE 57 |  if_ne	test	local03, #4 wz
27a0c     58 00 90 AD |  if_e	jmp	#LR__3732
27a10     24 36 06 F1 | 	add	local09, #36
27a14     1B 3B 02 FB | 	rdlong	local11, local09
27a18     1D 3D 02 F6 | 	mov	local12, local11
27a1c     1D 3F 02 F6 | 	mov	local13, local11
27a20     24 36 86 F1 | 	sub	local09, #36
27a24     1F 41 02 F6 | 	mov	local14, local13
27a28     13 3C 46 F7 | 	zerox	local12, #19
27a2c     14 40 46 F0 | 	shr	local14, #20
27a30     02 40 66 F0 | 	shl	local14, #2
27a34     ED 40 02 F1 | 	add	local14, __methods__
27a38     20 41 02 FB | 	rdlong	local14, local14
27a3c     18 43 02 F6 | 	mov	local15, local06
27a40     1A 45 02 F6 | 	mov	local16, local08
27a44     16 47 02 F6 | 	mov	local17, local04
27a48     21 13 02 F6 | 	mov	arg01, local15
27a4c     22 15 02 F6 | 	mov	arg02, local16
27a50     23 17 02 F6 | 	mov	arg03, local17
27a54     F2 48 02 F6 | 	mov	local18, objptr
27a58     1E E5 01 F6 | 	mov	objptr, local12
27a5c     2D 40 62 FD | 	call	local14
27a60     24 E5 01 F6 | 	mov	objptr, local18
27a64     FD 4A 02 F6 | 	mov	local19, result1
27a68                 | LR__3732
27a68     00 4A 0E F2 | 	cmp	local19, #0 wz
27a6c     8C 01 90 5D |  if_ne	jmp	#LR__3742
27a70     15 4D 02 F6 | 	mov	local20, local03
27a74     03 4C 0E F5 | 	and	local20, #3 wz
27a78     02 2E 46 55 |  if_ne	or	local05, #2
27a7c     01 4C 0E F2 | 	cmp	local20, #1 wz
27a80     01 2E 46 55 |  if_ne	or	local05, #1
27a84     20 2A CE F7 | 	test	local03, #32 wz
27a88     C0 2E 46 55 |  if_ne	or	local05, #192
27a8c     08 30 06 F1 | 	add	local06, #8
27a90     18 2F 62 FC | 	wrlong	local05, local06
27a94     0C 30 06 F1 | 	add	local06, #12
27a98     18 4F 0A FB | 	rdlong	local21, local06 wz
27a9c     14 30 86 F1 | 	sub	local06, #20
27aa0     18 00 90 5D |  if_ne	jmp	#LR__3733
27aa4     04 36 06 F1 | 	add	local09, #4
27aa8     1B 4F 02 FB | 	rdlong	local21, local09
27aac     04 36 86 F1 | 	sub	local09, #4
27ab0     14 30 06 F1 | 	add	local06, #20
27ab4     18 4F 62 FC | 	wrlong	local21, local06
27ab8     14 30 86 F1 | 	sub	local06, #20
27abc                 | LR__3733
27abc     18 30 06 F1 | 	add	local06, #24
27ac0     18 4F 0A FB | 	rdlong	local21, local06 wz
27ac4     18 30 86 F1 | 	sub	local06, #24
27ac8     18 00 90 5D |  if_ne	jmp	#LR__3734
27acc     08 36 06 F1 | 	add	local09, #8
27ad0     1B 4F 02 FB | 	rdlong	local21, local09
27ad4     08 36 86 F1 | 	sub	local09, #8
27ad8     18 30 06 F1 | 	add	local06, #24
27adc     18 4F 62 FC | 	wrlong	local21, local06
27ae0     18 30 86 F1 | 	sub	local06, #24
27ae4                 | LR__3734
27ae4     24 30 06 F1 | 	add	local06, #36
27ae8     18 4F 0A FB | 	rdlong	local21, local06 wz
27aec     24 30 86 F1 | 	sub	local06, #36
27af0     1B 4F 02 AB |  if_e	rdlong	local21, local09
27af4     24 30 06 A1 |  if_e	add	local06, #36
27af8     18 4F 62 AC |  if_e	wrlong	local21, local06
27afc     24 30 86 A1 |  if_e	sub	local06, #36
27b00     28 30 06 F1 | 	add	local06, #40
27b04     18 4F 0A FB | 	rdlong	local21, local06 wz
27b08     28 30 86 F1 | 	sub	local06, #40
27b0c     18 00 90 5D |  if_ne	jmp	#LR__3735
27b10     10 36 06 F1 | 	add	local09, #16
27b14     1B 4F 02 FB | 	rdlong	local21, local09
27b18     10 36 86 F1 | 	sub	local09, #16
27b1c     28 30 06 F1 | 	add	local06, #40
27b20     18 4F 62 FC | 	wrlong	local21, local06
27b24     28 30 86 F1 | 	sub	local06, #40
27b28                 | LR__3735
27b28     30 30 06 F1 | 	add	local06, #48
27b2c     18 4F 0A FB | 	rdlong	local21, local06 wz
27b30     30 30 86 F1 | 	sub	local06, #48
27b34     18 00 90 5D |  if_ne	jmp	#LR__3736
27b38     0C 36 06 F1 | 	add	local09, #12
27b3c     1B 4F 02 FB | 	rdlong	local21, local09
27b40     0C 36 86 F1 | 	sub	local09, #12
27b44     30 30 06 F1 | 	add	local06, #48
27b48     18 4F 62 FC | 	wrlong	local21, local06
27b4c     30 30 86 F1 | 	sub	local06, #48
27b50                 | LR__3736
27b50     1C 30 06 F1 | 	add	local06, #28
27b54     18 4F 0A FB | 	rdlong	local21, local06 wz
27b58     1C 30 86 F1 | 	sub	local06, #28
27b5c     1C 00 90 5D |  if_ne	jmp	#LR__3737
27b60     01 32 06 F6 | 	mov	local07, #1
27b64     F2 12 02 F6 | 	mov	arg01, objptr
27b68     00 08 05 FF 
27b6c     00 12 46 F5 | 	or	arg01, ##168820736
27b70     1C 30 06 F1 | 	add	local06, #28
27b74     18 13 62 FC | 	wrlong	arg01, local06
27b78     1C 30 86 F1 | 	sub	local06, #28
27b7c                 | LR__3737
27b7c     20 30 06 F1 | 	add	local06, #32
27b80     18 4F 0A FB | 	rdlong	local21, local06 wz
27b84     20 30 86 F1 | 	sub	local06, #32
27b88     1C 00 90 5D |  if_ne	jmp	#LR__3738
27b8c     01 32 06 F6 | 	mov	local07, #1
27b90     F2 12 02 F6 | 	mov	arg01, objptr
27b94     00 10 05 FF 
27b98     00 12 46 F5 | 	or	arg01, ##169869312
27b9c     20 30 06 F1 | 	add	local06, #32
27ba0     18 13 62 FC | 	wrlong	arg01, local06
27ba4     20 30 86 F1 | 	sub	local06, #32
27ba8                 | LR__3738
27ba8     2C 30 06 F1 | 	add	local06, #44
27bac     18 4F 0A FB | 	rdlong	local21, local06 wz
27bb0     2C 30 86 F1 | 	sub	local06, #44
27bb4     44 00 90 5D |  if_ne	jmp	#LR__3741
27bb8     14 36 06 F1 | 	add	local09, #20
27bbc     1B 4F 0A FB | 	rdlong	local21, local09 wz
27bc0     14 36 86 F1 | 	sub	local09, #20
27bc4     18 00 90 AD |  if_e	jmp	#LR__3739
27bc8     14 36 06 F1 | 	add	local09, #20
27bcc     1B 4F 02 FB | 	rdlong	local21, local09
27bd0     2C 30 06 F1 | 	add	local06, #44
27bd4     18 4F 62 FC | 	wrlong	local21, local06
27bd8     2C 30 86 F1 | 	sub	local06, #44
27bdc     1C 00 90 FD | 	jmp	#LR__3740
27be0                 | LR__3739
27be0     01 32 06 F6 | 	mov	local07, #1
27be4     F2 12 02 F6 | 	mov	arg01, objptr
27be8     00 18 05 FF 
27bec     00 12 46 F5 | 	or	arg01, ##170917888
27bf0     2C 30 06 F1 | 	add	local06, #44
27bf4     18 13 62 FC | 	wrlong	arg01, local06
27bf8     2C 30 86 F1 | 	sub	local06, #44
27bfc                 | LR__3740
27bfc                 | LR__3741
27bfc                 | LR__3742
27bfc     00 32 0E F2 | 	cmp	local07, #0 wz
27c00     18 13 02 56 |  if_ne	mov	arg01, local06
27c04     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
27c08     00 4A 0E F2 | 	cmp	local19, #0 wz
27c0c     00 12 06 A6 |  if_e	mov	arg01, #0
27c10     10 00 90 5D |  if_ne	jmp	#LR__3743
27c14     00 12 4E F2 | 	cmps	arg01, #0 wz
27c18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27c1c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27c20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27c24                 | LR__3743
27c24     25 FB 01 F6 | 	mov	result1, local19
27c28                 | LR__3744
27c28     A7 F0 03 F6 | 	mov	ptra, fp
27c2c     B2 00 A0 FD | 	call	#popregs_
27c30                 | __system___openraw_ret
27c30     2D 00 64 FD | 	ret
27c34                 | 
27c34                 | __system___closeraw
27c34     05 4A 05 F6 | 	mov	COUNT_, #5
27c38     A8 00 A0 FD | 	call	#pushregs_
27c3c     09 27 02 F6 | 	mov	local01, arg01
27c40     00 28 06 F6 | 	mov	local02, #0
27c44     08 26 06 F1 | 	add	local01, #8
27c48     13 FB 09 FB | 	rdlong	result1, local01 wz
27c4c     08 26 86 F1 | 	sub	local01, #8
27c50     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27c54     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
27c58     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27c5c     01 FA 65 A6 |  if_e	neg	result1, #1
27c60     A8 00 90 AD |  if_e	jmp	#LR__3752
27c64     2C 26 06 F1 | 	add	local01, #44
27c68     13 FB 09 FB | 	rdlong	result1, local01 wz
27c6c     2C 26 86 F1 | 	sub	local01, #44
27c70     38 00 90 AD |  if_e	jmp	#LR__3750
27c74     2C 26 06 F1 | 	add	local01, #44
27c78     13 2B 02 FB | 	rdlong	local03, local01
27c7c     15 2D 02 F6 | 	mov	local04, local03
27c80     2C 26 86 F1 | 	sub	local01, #44
27c84     13 2C 46 F7 | 	zerox	local04, #19
27c88     14 2A 46 F0 | 	shr	local03, #20
27c8c     02 2A 66 F0 | 	shl	local03, #2
27c90     ED 2A 02 F1 | 	add	local03, __methods__
27c94     15 2B 02 FB | 	rdlong	local03, local03
27c98     13 13 02 F6 | 	mov	arg01, local01
27c9c     F2 2E 02 F6 | 	mov	local05, objptr
27ca0     16 E5 01 F6 | 	mov	objptr, local04
27ca4     2D 2A 62 FD | 	call	local03
27ca8     17 E5 01 F6 | 	mov	objptr, local05
27cac                 | LR__3750
27cac     24 26 06 F1 | 	add	local01, #36
27cb0     13 2F 0A FB | 	rdlong	local05, local01 wz
27cb4     24 26 86 F1 | 	sub	local01, #36
27cb8     3C 00 90 AD |  if_e	jmp	#LR__3751
27cbc     24 26 06 F1 | 	add	local01, #36
27cc0     13 2B 02 FB | 	rdlong	local03, local01
27cc4     15 2D 02 F6 | 	mov	local04, local03
27cc8     24 26 86 F1 | 	sub	local01, #36
27ccc     13 2C 46 F7 | 	zerox	local04, #19
27cd0     14 2A 46 F0 | 	shr	local03, #20
27cd4     02 2A 66 F0 | 	shl	local03, #2
27cd8     ED 2A 02 F1 | 	add	local03, __methods__
27cdc     15 2B 02 FB | 	rdlong	local03, local03
27ce0     13 13 02 F6 | 	mov	arg01, local01
27ce4     F2 2E 02 F6 | 	mov	local05, objptr
27ce8     16 E5 01 F6 | 	mov	objptr, local04
27cec     2D 2A 62 FD | 	call	local03
27cf0     17 E5 01 F6 | 	mov	objptr, local05
27cf4     FD 28 02 F6 | 	mov	local02, result1
27cf8                 | LR__3751
27cf8     13 13 02 F6 | 	mov	arg01, local01
27cfc     00 14 06 F6 | 	mov	arg02, #0
27d00     34 16 06 F6 | 	mov	arg03, #52
27d04     98 00 A0 FD | 	call	#\builtin_bytefill_
27d08     14 FB 01 F6 | 	mov	result1, local02
27d0c                 | LR__3752
27d0c     A7 F0 03 F6 | 	mov	ptra, fp
27d10     B2 00 A0 FD | 	call	#popregs_
27d14                 | __system___closeraw_ret
27d14     2D 00 64 FD | 	ret
27d18                 | 
27d18                 | __system___vfs_open_sdcardx
27d18     0B 4A 05 F6 | 	mov	COUNT_, #11
27d1c     A8 00 A0 FD | 	call	#pushregs_
27d20     09 2B 02 F6 | 	mov	local03, arg01
27d24     0A 2D 02 F6 | 	mov	local04, arg02
27d28     0B 2F 02 F6 | 	mov	local05, arg03
27d2c     0C 31 02 F6 | 	mov	local06, arg04
27d30     01 00 00 FF 
27d34     24 12 06 F6 | 	mov	arg01, ##548
27d38     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
27d3c     FD 32 02 F6 | 	mov	local07, result1
27d40     01 00 00 FF 
27d44     34 12 06 F6 | 	mov	arg01, ##564
27d48     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
27d4c     FD 34 02 F6 | 	mov	local08, result1
27d50     15 19 02 F6 | 	mov	arg04, local03
27d54     1F 18 C6 F0 | 	sar	arg04, #31
27d58     15 17 02 F6 | 	mov	arg03, local03
27d5c     01 12 06 F6 | 	mov	arg01, #1
27d60     00 14 06 F6 | 	mov	arg02, #0
27d64     EC DB BF FD | 	call	#__system___int64_shl
27d68     FD 26 02 F6 | 	mov	local01, result1
27d6c     FE 36 02 F6 | 	mov	local09, result2
27d70     16 19 02 F6 | 	mov	arg04, local04
27d74     1F 18 C6 F0 | 	sar	arg04, #31
27d78     16 17 02 F6 | 	mov	arg03, local04
27d7c     01 12 06 F6 | 	mov	arg01, #1
27d80     00 14 06 F6 | 	mov	arg02, #0
27d84     CC DB BF FD | 	call	#__system___int64_shl
27d88     FD 26 42 F5 | 	or	local01, result1
27d8c     FE 36 42 F5 | 	or	local09, result2
27d90     17 19 02 F6 | 	mov	arg04, local05
27d94     1F 18 C6 F0 | 	sar	arg04, #31
27d98     17 17 02 F6 | 	mov	arg03, local05
27d9c     01 12 06 F6 | 	mov	arg01, #1
27da0     00 14 06 F6 | 	mov	arg02, #0
27da4     AC DB BF FD | 	call	#__system___int64_shl
27da8     FD 26 42 F5 | 	or	local01, result1
27dac     FE 36 42 F5 | 	or	local09, result2
27db0     18 19 02 F6 | 	mov	arg04, local06
27db4     1F 18 C6 F0 | 	sar	arg04, #31
27db8     18 17 02 F6 | 	mov	arg03, local06
27dbc     01 12 06 F6 | 	mov	arg01, #1
27dc0     00 14 06 F6 | 	mov	arg02, #0
27dc4     8C DB BF FD | 	call	#__system___int64_shl
27dc8     1B 15 02 F6 | 	mov	arg02, local09
27dcc     FD 26 42 F5 | 	or	local01, result1
27dd0     0A FD 41 F5 | 	or	result2, arg02
27dd4     FE 28 02 F6 | 	mov	local02, result2
27dd8     13 13 02 F6 | 	mov	arg01, local01
27ddc     14 15 02 F6 | 	mov	arg02, local02
27de0     A8 DB BF FD | 	call	#__system___usepins
27de4     00 FA 0D F2 | 	cmp	result1, #0 wz
27de8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27dec     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
27df0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27df4     00 FA 05 A6 |  if_e	mov	result1, #0
27df8     B4 00 90 AD |  if_e	jmp	#LR__3762
27dfc     13 39 02 F6 | 	mov	local10, local01
27e00     14 37 02 F6 | 	mov	local09, local02
27e04     01 00 00 FF 
27e08     08 32 06 F1 | 	add	local07, ##520
27e0c     19 39 62 FC | 	wrlong	local10, local07
27e10     04 32 06 F1 | 	add	local07, #4
27e14     19 37 62 FC | 	wrlong	local09, local07
27e18     01 00 00 FF 
27e1c     0C 32 86 F1 | 	sub	local07, ##524
27e20     18 1B 02 F6 | 	mov	arg05, local06
27e24     00 12 06 F6 | 	mov	arg01, #0
27e28     15 15 02 F6 | 	mov	arg02, local03
27e2c     16 17 02 F6 | 	mov	arg03, local04
27e30     17 19 02 F6 | 	mov	arg04, local05
27e34     F2 38 02 F6 | 	mov	local10, objptr
27e38     19 E5 01 F6 | 	mov	objptr, local07
27e3c     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
27e40     1C E5 01 F6 | 	mov	objptr, local10
27e44     FD 3A 0A F6 | 	mov	local11, result1 wz
27e48     24 00 90 5D |  if_ne	jmp	#LR__3760
27e4c     95 01 00 FF 
27e50     0A 15 06 F6 | 	mov	arg02, ##@LR__5177
27e54     1A 13 02 F6 | 	mov	arg01, local08
27e58     00 16 06 F6 | 	mov	arg03, #0
27e5c     F2 3A 02 F6 | 	mov	local11, objptr
27e60     19 E5 01 F6 | 	mov	objptr, local07
27e64     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
27e68     1D E5 01 F6 | 	mov	objptr, local11
27e6c     FD 3A 02 F6 | 	mov	local11, result1
27e70                 | LR__3760
27e70     00 3A 0E F2 | 	cmp	local11, #0 wz
27e74     24 00 90 AD |  if_e	jmp	#LR__3761
27e78     13 13 02 F6 | 	mov	arg01, local01
27e7c     14 15 02 F6 | 	mov	arg02, local02
27e80     5C DB BF FD | 	call	#__system___freepins
27e84     1D 13 6A F6 | 	neg	arg01, local11 wz
27e88     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27e8c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27e90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27e94     00 FA 05 F6 | 	mov	result1, #0
27e98     14 00 90 FD | 	jmp	#LR__3762
27e9c                 | LR__3761
27e9c     19 13 02 F6 | 	mov	arg01, local07
27ea0     F2 3A 02 F6 | 	mov	local11, objptr
27ea4     19 E5 01 F6 | 	mov	objptr, local07
27ea8     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
27eac     1D E5 01 F6 | 	mov	objptr, local11
27eb0                 | LR__3762
27eb0     A7 F0 03 F6 | 	mov	ptra, fp
27eb4     B2 00 A0 FD | 	call	#popregs_
27eb8                 | __system___vfs_open_sdcardx_ret
27eb8     2D 00 64 FD | 	ret
27ebc                 | 
27ebc                 | __system____default_getc
27ebc     03 4A 05 F6 | 	mov	COUNT_, #3
27ec0     A8 00 A0 FD | 	call	#pushregs_
27ec4     09 27 02 F6 | 	mov	local01, arg01
27ec8     13 29 02 FB | 	rdlong	local02, local01
27ecc     08 28 06 F1 | 	add	local02, #8
27ed0     14 2B 02 FB | 	rdlong	local03, local02
27ed4     02 2A CE F7 | 	test	local03, #2 wz
27ed8     13 13 02 56 |  if_ne	mov	arg01, local01
27edc     00 01 B0 5D |  if_ne	call	#__system____default_flush
27ee0     14 2B 02 FB | 	rdlong	local03, local02
27ee4     01 2A 46 F5 | 	or	local03, #1
27ee8     14 2B 62 FC | 	wrlong	local03, local02
27eec     08 28 86 F1 | 	sub	local02, #8
27ef0     14 2B 0A FB | 	rdlong	local03, local02 wz
27ef4     0C 00 90 5D |  if_ne	jmp	#LR__3770
27ef8     13 13 02 F6 | 	mov	arg01, local01
27efc     68 18 B0 FD | 	call	#__system____default_filbuf
27f00     FD 2A 02 F6 | 	mov	local03, result1
27f04                 | LR__3770
27f04     01 2A 56 F2 | 	cmps	local03, #1 wc
27f08     01 FA 65 C6 |  if_b	neg	result1, #1
27f0c     1C 00 90 CD |  if_b	jmp	#LR__3771
27f10     01 2A 86 F1 | 	sub	local03, #1
27f14     14 2B 62 FC | 	wrlong	local03, local02
27f18     04 28 06 F1 | 	add	local02, #4
27f1c     14 2B 02 FB | 	rdlong	local03, local02
27f20     15 FB C1 FA | 	rdbyte	result1, local03
27f24     01 2A 06 F1 | 	add	local03, #1
27f28     14 2B 62 FC | 	wrlong	local03, local02
27f2c                 | LR__3771
27f2c     A7 F0 03 F6 | 	mov	ptra, fp
27f30     B2 00 A0 FD | 	call	#popregs_
27f34                 | __system____default_getc_ret
27f34     2D 00 64 FD | 	ret
27f38                 | 
27f38                 | __system____default_putc
27f38     06 4A 05 F6 | 	mov	COUNT_, #6
27f3c     A8 00 A0 FD | 	call	#pushregs_
27f40     09 27 02 F6 | 	mov	local01, arg01
27f44     0A 29 02 F6 | 	mov	local02, arg02
27f48     14 2B 02 FB | 	rdlong	local03, local02
27f4c     08 2A 06 F1 | 	add	local03, #8
27f50     15 FB 01 FB | 	rdlong	result1, local03
27f54     01 FA CD F7 | 	test	result1, #1 wz
27f58     14 13 02 56 |  if_ne	mov	arg01, local02
27f5c     80 00 B0 5D |  if_ne	call	#__system____default_flush
27f60     15 2D 02 FB | 	rdlong	local04, local03
27f64     02 2C 46 F5 | 	or	local04, #2
27f68     15 2D 62 FC | 	wrlong	local04, local03
27f6c     08 2A 86 F1 | 	sub	local03, #8
27f70     15 2F 02 FB | 	rdlong	local05, local03
27f74     10 2A 06 F1 | 	add	local03, #16
27f78     15 15 02 FB | 	rdlong	arg02, local03
27f7c     10 2A 86 F1 | 	sub	local03, #16
27f80     17 FB 01 F6 | 	mov	result1, local05
27f84     0A FB 01 F1 | 	add	result1, arg02
27f88     FD 26 42 FC | 	wrbyte	local01, result1
27f8c     13 27 E2 F8 | 	getbyte	local01, local01, #0
27f90     01 2E 06 F1 | 	add	local05, #1
27f94     15 2F 62 FC | 	wrlong	local05, local03
27f98     06 28 06 F1 | 	add	local02, #6
27f9c     14 31 EA FA | 	rdword	local06, local02 wz
27fa0     06 28 86 F1 | 	sub	local02, #6
27fa4     0C 2A 06 51 |  if_ne	add	local03, #12
27fa8     15 2D 02 5B |  if_ne	rdlong	local04, local03
27fac     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
27fb0     0C 00 90 AD |  if_e	jmp	#LR__3780
27fb4     0A 26 0E F2 | 	cmp	local01, #10 wz
27fb8     01 30 0E A2 |  if_e	cmp	local06, #1 wz
27fbc     10 00 90 5D |  if_ne	jmp	#LR__3781
27fc0                 | LR__3780
27fc0     14 13 02 F6 | 	mov	arg01, local02
27fc4     18 00 B0 FD | 	call	#__system____default_flush
27fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
27fcc     01 26 66 56 |  if_ne	neg	local01, #1
27fd0                 | LR__3781
27fd0     13 FB 01 F6 | 	mov	result1, local01
27fd4     A7 F0 03 F6 | 	mov	ptra, fp
27fd8     B2 00 A0 FD | 	call	#popregs_
27fdc                 | __system____default_putc_ret
27fdc     2D 00 64 FD | 	ret
27fe0                 | 
27fe0                 | __system____default_flush
27fe0     06 4A 05 F6 | 	mov	COUNT_, #6
27fe4     A8 00 A0 FD | 	call	#pushregs_
27fe8     09 27 02 F6 | 	mov	local01, arg01
27fec     13 29 02 FB | 	rdlong	local02, local01
27ff0     14 2B 02 FB | 	rdlong	local03, local02
27ff4     08 28 06 F1 | 	add	local02, #8
27ff8     14 FB 01 FB | 	rdlong	result1, local02
27ffc     08 28 86 F1 | 	sub	local02, #8
28000     02 FA CD F7 | 	test	result1, #2 wz
28004     D0 00 90 AD |  if_e	jmp	#LR__3792
28008     01 2A 56 F2 | 	cmps	local03, #1 wc
2800c     20 01 90 CD |  if_b	jmp	#LR__3794
28010     08 26 06 F1 | 	add	local01, #8
28014     13 FB 01 FB | 	rdlong	result1, local01
28018     08 26 86 F1 | 	sub	local01, #8
2801c     40 FA CD F7 | 	test	result1, #64 wz
28020     68 00 90 AD |  if_e	jmp	#LR__3791
28024     08 26 06 F1 | 	add	local01, #8
28028     13 17 02 FB | 	rdlong	arg03, local01
2802c     08 26 86 F1 | 	sub	local01, #8
28030     80 16 CE F7 | 	test	arg03, #128 wz
28034     54 00 90 AD |  if_e	jmp	#LR__3790
28038     30 26 06 F1 | 	add	local01, #48
2803c     13 2D 02 FB | 	rdlong	local04, local01
28040     16 2F 02 F6 | 	mov	local05, local04
28044     30 26 86 F1 | 	sub	local01, #48
28048     13 2E 46 F7 | 	zerox	local05, #19
2804c     14 2C 46 F0 | 	shr	local04, #20
28050     02 2C 66 F0 | 	shl	local04, #2
28054     ED 2C 02 F1 | 	add	local04, __methods__
28058     16 2D 02 FB | 	rdlong	local04, local04
2805c     13 13 02 F6 | 	mov	arg01, local01
28060     00 14 06 F6 | 	mov	arg02, #0
28064     02 16 06 F6 | 	mov	arg03, #2
28068     F2 30 02 F6 | 	mov	local06, objptr
2806c     17 E5 01 F6 | 	mov	objptr, local05
28070     2D 2C 62 FD | 	call	local04
28074     18 E5 01 F6 | 	mov	objptr, local06
28078     08 26 06 F1 | 	add	local01, #8
2807c     13 31 02 FB | 	rdlong	local06, local01
28080     80 30 26 F5 | 	andn	local06, #128
28084     13 31 62 FC | 	wrlong	local06, local01
28088     08 26 86 F1 | 	sub	local01, #8
2808c                 | LR__3790
2808c                 | LR__3791
2808c     18 26 06 F1 | 	add	local01, #24
28090     13 2D 02 FB | 	rdlong	local04, local01
28094     16 2F 02 F6 | 	mov	local05, local04
28098     18 26 86 F1 | 	sub	local01, #24
2809c     13 2E 46 F7 | 	zerox	local05, #19
280a0     14 2C 46 F0 | 	shr	local04, #20
280a4     02 2C 66 F0 | 	shl	local04, #2
280a8     ED 2C 02 F1 | 	add	local04, __methods__
280ac     16 2D 02 FB | 	rdlong	local04, local04
280b0     10 28 06 F1 | 	add	local02, #16
280b4     14 15 02 FB | 	rdlong	arg02, local02
280b8     10 28 86 F1 | 	sub	local02, #16
280bc     13 13 02 F6 | 	mov	arg01, local01
280c0     15 17 02 F6 | 	mov	arg03, local03
280c4     F2 30 02 F6 | 	mov	local06, objptr
280c8     17 E5 01 F6 | 	mov	objptr, local05
280cc     2D 2C 62 FD | 	call	local04
280d0     18 E5 01 F6 | 	mov	objptr, local06
280d4     58 00 90 FD | 	jmp	#LR__3794
280d8                 | LR__3792
280d8     08 28 06 F1 | 	add	local02, #8
280dc     14 31 02 FB | 	rdlong	local06, local02
280e0     08 28 86 F1 | 	sub	local02, #8
280e4     01 30 CE F7 | 	test	local06, #1 wz
280e8     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
280ec     40 00 90 AD |  if_e	jmp	#LR__3793
280f0     30 26 06 F1 | 	add	local01, #48
280f4     13 2D 02 FB | 	rdlong	local04, local01
280f8     16 2F 02 F6 | 	mov	local05, local04
280fc     30 26 86 F1 | 	sub	local01, #48
28100     13 2E 46 F7 | 	zerox	local05, #19
28104     14 2C 46 F0 | 	shr	local04, #20
28108     02 2C 66 F0 | 	shl	local04, #2
2810c     ED 2C 02 F1 | 	add	local04, __methods__
28110     16 2D 02 FB | 	rdlong	local04, local04
28114     13 13 02 F6 | 	mov	arg01, local01
28118     15 15 62 F6 | 	neg	arg02, local03
2811c     01 16 06 F6 | 	mov	arg03, #1
28120     F2 30 02 F6 | 	mov	local06, objptr
28124     17 E5 01 F6 | 	mov	objptr, local05
28128     2D 2C 62 FD | 	call	local04
2812c     18 E5 01 F6 | 	mov	objptr, local06
28130                 | LR__3793
28130                 | LR__3794
28130     14 01 68 FC | 	wrlong	#0, local02
28134     04 28 06 F1 | 	add	local02, #4
28138     14 01 68 FC | 	wrlong	#0, local02
2813c     04 28 06 F1 | 	add	local02, #4
28140     14 01 68 FC | 	wrlong	#0, local02
28144     00 FA 05 F6 | 	mov	result1, #0
28148     A7 F0 03 F6 | 	mov	ptra, fp
2814c     B2 00 A0 FD | 	call	#popregs_
28150                 | __system____default_flush_ret
28150     2D 00 64 FD | 	ret
28154                 | 
28154                 | __system____default_buffer_init
28154     02 4A 05 F6 | 	mov	COUNT_, #2
28158     A8 00 A0 FD | 	call	#pushregs_
2815c     09 27 02 F6 | 	mov	local01, arg01
28160     13 29 02 FB | 	rdlong	local02, local01
28164     13 13 02 F6 | 	mov	arg01, local01
28168     34 03 B0 FD | 	call	#__system___isatty
2816c     00 FA 0D F2 | 	cmp	result1, #0 wz
28170     06 26 06 51 |  if_ne	add	local01, #6
28174     13 0B 58 5C |  if_ne	wrword	#5, local01
28178     06 26 06 A1 |  if_e	add	local01, #6
2817c     13 0D 58 AC |  if_e	wrword	#6, local01
28180     14 28 06 F1 | 	add	local02, #20
28184     14 27 02 F6 | 	mov	local01, local02
28188     04 28 86 F1 | 	sub	local02, #4
2818c     14 27 62 FC | 	wrlong	local01, local02
28190     04 28 86 F1 | 	sub	local02, #4
28194     02 00 80 FF 
28198     14 01 68 FC | 	wrlong	##1024, local02
2819c     00 FA 05 F6 | 	mov	result1, #0
281a0     A7 F0 03 F6 | 	mov	ptra, fp
281a4     B2 00 A0 FD | 	call	#popregs_
281a8                 | __system____default_buffer_init_ret
281a8     2D 00 64 FD | 	ret
281ac                 | 
281ac                 | __system__stat
281ac     04 4A 05 F6 | 	mov	COUNT_, #4
281b0     A8 00 A0 FD | 	call	#pushregs_
281b4     0A 27 02 F6 | 	mov	local01, arg02
281b8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
281bc     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
281c0     09 15 02 F6 | 	mov	arg02, arg01
281c4     14 13 02 F6 | 	mov	arg01, local02
281c8     00 16 06 F6 | 	mov	arg03, #0
281cc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
281d0     58 B5 BF FD | 	call	#__system____getvfsforfile
281d4     FD 2A 0A F6 | 	mov	local03, result1 wz
281d8     10 00 90 AD |  if_e	jmp	#LR__3800
281dc     34 2A 06 F1 | 	add	local03, #52
281e0     15 17 0A FB | 	rdlong	arg03, local03 wz
281e4     34 2A 86 F1 | 	sub	local03, #52
281e8     14 00 90 5D |  if_ne	jmp	#LR__3801
281ec                 | LR__3800
281ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
281f0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
281f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
281f8     01 FA 65 F6 | 	neg	result1, #1
281fc     68 00 90 FD | 	jmp	#LR__3802
28200                 | LR__3801
28200     13 13 02 F6 | 	mov	arg01, local01
28204     00 14 06 F6 | 	mov	arg02, #0
28208     30 16 06 F6 | 	mov	arg03, #48
2820c     09 2D 02 F6 | 	mov	local04, arg01
28210     98 00 A0 FD | 	call	#\builtin_bytefill_
28214     16 FB 01 F6 | 	mov	result1, local04
28218     14 13 CA FA | 	rdbyte	arg01, local02 wz
2821c     08 26 06 A1 |  if_e	add	local01, #8
28220     08 00 80 AF 
28224     13 FF 6B AC |  if_e	wrlong	##4607, local01
28228     00 FA 05 A6 |  if_e	mov	result1, #0
2822c     38 00 90 AD |  if_e	jmp	#LR__3802
28230     34 2A 06 F1 | 	add	local03, #52
28234     15 2B 02 FB | 	rdlong	local03, local03
28238     15 2D 02 F6 | 	mov	local04, local03
2823c     13 2A 46 F7 | 	zerox	local03, #19
28240     14 2C 46 F0 | 	shr	local04, #20
28244     02 2C 66 F0 | 	shl	local04, #2
28248     ED 2C 02 F1 | 	add	local04, __methods__
2824c     16 2D 02 FB | 	rdlong	local04, local04
28250     14 13 02 F6 | 	mov	arg01, local02
28254     13 15 02 F6 | 	mov	arg02, local01
28258     F2 28 02 F6 | 	mov	local02, objptr
2825c     15 E5 01 F6 | 	mov	objptr, local03
28260     2D 2C 62 FD | 	call	local04
28264     14 E5 01 F6 | 	mov	objptr, local02
28268                 | LR__3802
28268     A7 F0 03 F6 | 	mov	ptra, fp
2826c     B2 00 A0 FD | 	call	#popregs_
28270                 | __system__stat_ret
28270     2D 00 64 FD | 	ret
28274                 | 
28274                 | __system__write
28274     0A 12 16 F2 | 	cmp	arg01, #10 wc
28278     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2827c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
28280     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
28284     01 FA 65 36 |  if_ae	neg	result1, #1
28288     20 00 90 3D |  if_ae	jmp	#LR__3810
2828c     34 12 06 FD | 	qmul	arg01, #52
28290     02 00 00 FF 
28294     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
28298     18 12 62 FD | 	getqx	arg01
2829c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
282a0     02 00 00 FF 
282a4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
282a8     0C 10 B0 FD | 	call	#__system___vfswrite
282ac                 | LR__3810
282ac                 | __system__write_ret
282ac     2D 00 64 FD | 	ret
282b0                 | 
282b0                 | __system__read
282b0     0A 12 16 F2 | 	cmp	arg01, #10 wc
282b4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
282b8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
282bc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
282c0     01 FA 65 36 |  if_ae	neg	result1, #1
282c4     20 00 90 3D |  if_ae	jmp	#LR__3820
282c8     34 12 06 FD | 	qmul	arg01, #52
282cc     02 00 00 FF 
282d0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
282d4     18 12 62 FD | 	getqx	arg01
282d8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
282dc     02 00 00 FF 
282e0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
282e4     98 11 B0 FD | 	call	#__system___vfsread
282e8                 | LR__3820
282e8                 | __system__read_ret
282e8     2D 00 64 FD | 	ret
282ec                 | 
282ec                 | __system__close
282ec     0A 12 16 F2 | 	cmp	arg01, #10 wc
282f0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
282f4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
282f8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
282fc     01 FA 65 36 |  if_ae	neg	result1, #1
28300     20 00 90 3D |  if_ae	jmp	#LR__3830
28304     34 12 06 FD | 	qmul	arg01, #52
28308     02 00 00 FF 
2830c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
28310     18 12 62 FD | 	getqx	arg01
28314     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
28318     02 00 00 FF 
2831c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
28320     10 F9 BF FD | 	call	#__system___closeraw
28324                 | LR__3830
28324                 | __system__close_ret
28324     2D 00 64 FD | 	ret
28328                 | 
28328                 | __system__lseek
28328     06 4A 05 F6 | 	mov	COUNT_, #6
2832c     A8 00 A0 FD | 	call	#pushregs_
28330     0A 12 16 F2 | 	cmp	arg01, #10 wc
28334     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
28338     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2833c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
28340     01 FA 65 36 |  if_ae	neg	result1, #1
28344     C4 00 90 3D |  if_ae	jmp	#LR__3841
28348     34 12 06 FD | 	qmul	arg01, #52
2834c     02 00 00 FF 
28350     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
28354     18 26 62 FD | 	getqx	local01
28358     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2835c     30 26 06 F1 | 	add	local01, #48
28360     13 13 0A FB | 	rdlong	arg01, local01 wz
28364     30 26 86 F1 | 	sub	local01, #48
28368     02 00 00 FF 
2836c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
28370     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28374     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
28378     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2837c     01 FA 65 A6 |  if_e	neg	result1, #1
28380     88 00 90 AD |  if_e	jmp	#LR__3841
28384     08 26 06 F1 | 	add	local01, #8
28388     13 29 02 FB | 	rdlong	local02, local01
2838c     08 26 86 F1 | 	sub	local01, #8
28390     40 28 CE F7 | 	test	local02, #64 wz
28394     08 26 06 51 |  if_ne	add	local01, #8
28398     13 29 02 5B |  if_ne	rdlong	local02, local01
2839c     80 28 46 55 |  if_ne	or	local02, #128
283a0     13 29 62 5C |  if_ne	wrlong	local02, local01
283a4     08 26 86 51 |  if_ne	sub	local01, #8
283a8     30 26 06 F1 | 	add	local01, #48
283ac     13 2B 02 FB | 	rdlong	local03, local01
283b0     15 2D 02 F6 | 	mov	local04, local03
283b4     30 26 86 F1 | 	sub	local01, #48
283b8     13 2C 46 F7 | 	zerox	local04, #19
283bc     14 2A 46 F0 | 	shr	local03, #20
283c0     02 2A 66 F0 | 	shl	local03, #2
283c4     ED 2A 02 F1 | 	add	local03, __methods__
283c8     15 2B 02 FB | 	rdlong	local03, local03
283cc     13 13 02 F6 | 	mov	arg01, local01
283d0     F2 2E 02 F6 | 	mov	local05, objptr
283d4     16 E5 01 F6 | 	mov	objptr, local04
283d8     2D 2A 62 FD | 	call	local03
283dc     17 E5 01 F6 | 	mov	objptr, local05
283e0     FD 30 02 F6 | 	mov	local06, result1
283e4     00 30 56 F2 | 	cmps	local06, #0 wc
283e8     1C 00 90 3D |  if_ae	jmp	#LR__3840
283ec     18 13 6A F6 | 	neg	arg01, local06 wz
283f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
283f4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
283f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
283fc     01 FA 65 56 |  if_ne	neg	result1, #1
28400     00 FA 05 A6 |  if_e	mov	result1, #0
28404     04 00 90 FD | 	jmp	#LR__3841
28408                 | LR__3840
28408     18 FB 01 F6 | 	mov	result1, local06
2840c                 | LR__3841
2840c     A7 F0 03 F6 | 	mov	ptra, fp
28410     B2 00 A0 FD | 	call	#popregs_
28414                 | __system__lseek_ret
28414     2D 00 64 FD | 	ret
28418                 | 
28418                 | __system___ioctl
28418     03 4A 05 F6 | 	mov	COUNT_, #3
2841c     A8 00 A0 FD | 	call	#pushregs_
28420     00 12 4E F2 | 	cmps	arg01, #0 wz
28424     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28428     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2842c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28430     01 FA 65 A6 |  if_e	neg	result1, #1
28434     5C 00 90 AD |  if_e	jmp	#LR__3851
28438     28 12 06 F1 | 	add	arg01, #40
2843c     09 27 02 FB | 	rdlong	local01, arg01
28440     13 29 02 F6 | 	mov	local02, local01
28444     28 12 86 F1 | 	sub	arg01, #40
28448     13 28 46 F7 | 	zerox	local02, #19
2844c     14 26 46 F0 | 	shr	local01, #20
28450     02 26 66 F0 | 	shl	local01, #2
28454     ED 26 02 F1 | 	add	local01, __methods__
28458     13 27 02 FB | 	rdlong	local01, local01
2845c     F2 2A 02 F6 | 	mov	local03, objptr
28460     14 E5 01 F6 | 	mov	objptr, local02
28464     2D 26 62 FD | 	call	local01
28468     15 E5 01 F6 | 	mov	objptr, local03
2846c     FD 12 0A F6 | 	mov	arg01, result1 wz
28470     1C 00 90 AD |  if_e	jmp	#LR__3850
28474     00 12 4E F2 | 	cmps	arg01, #0 wz
28478     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2847c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28480     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28484     01 FA 65 56 |  if_ne	neg	result1, #1
28488     00 FA 05 A6 |  if_e	mov	result1, #0
2848c     04 00 90 FD | 	jmp	#LR__3851
28490                 | LR__3850
28490     00 FA 05 F6 | 	mov	result1, #0
28494                 | LR__3851
28494     A7 F0 03 F6 | 	mov	ptra, fp
28498     B2 00 A0 FD | 	call	#popregs_
2849c                 | __system___ioctl_ret
2849c     2D 00 64 FD | 	ret
284a0                 | 
284a0                 | __system___isatty
284a0     00 4A 05 F6 | 	mov	COUNT_, #0
284a4     A8 00 A0 FD | 	call	#pushregs_
284a8     0C F0 07 F1 | 	add	ptra, #12
284ac     04 4E 05 F1 | 	add	fp, #4
284b0     A7 12 62 FC | 	wrlong	arg01, fp
284b4     04 4E 05 F1 | 	add	fp, #4
284b8     A7 16 02 F6 | 	mov	arg03, fp
284bc     08 4E 85 F1 | 	sub	fp, #8
284c0     00 15 06 F6 | 	mov	arg02, #256
284c4     50 FF BF FD | 	call	#__system___ioctl
284c8     00 FA 0D F2 | 	cmp	result1, #0 wz
284cc     01 FA 05 A6 |  if_e	mov	result1, #1
284d0     00 FA 05 56 |  if_ne	mov	result1, #0
284d4     A7 F0 03 F6 | 	mov	ptra, fp
284d8     B2 00 A0 FD | 	call	#popregs_
284dc                 | __system___isatty_ret
284dc     2D 00 64 FD | 	ret
284e0                 | 
284e0                 | __system____getftab
284e0     0A 12 16 F2 | 	cmp	arg01, #10 wc
284e4     34 12 06 CD |  if_b	qmul	arg01, #52
284e8     00 FA 05 36 |  if_ae	mov	result1, #0
284ec     02 00 00 CF 
284f0     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
284f4     18 FA 61 CD |  if_b	getqx	result1
284f8     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
284fc     02 00 00 CF 
28500     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
28504                 | __system____getftab_ret
28504     2D 00 64 FD | 	ret
28508                 | 
28508                 | __system__strncpy
28508     09 01 02 F6 | 	mov	_var01, arg01
2850c                 | LR__3860
2850c     01 16 86 F1 | 	sub	arg03, #1
28510     00 16 56 F2 | 	cmps	arg03, #0 wc
28514     18 00 90 CD |  if_b	jmp	#LR__3861
28518     0A FB C1 FA | 	rdbyte	result1, arg02
2851c     00 FB 41 FC | 	wrbyte	result1, _var01
28520     01 14 06 F1 | 	add	arg02, #1
28524     00 FB C9 FA | 	rdbyte	result1, _var01 wz
28528     01 00 06 F1 | 	add	_var01, #1
2852c     DC FF 9F 5D |  if_ne	jmp	#LR__3860
28530                 | LR__3861
28530     97 0C 48 FB | 	callpa	#(@LR__3863-@LR__3862)>>2,fcache_load_ptr_
28534                 | LR__3862
28534     01 16 86 F1 | 	sub	arg03, #1
28538     00 16 56 F2 | 	cmps	arg03, #0 wc
2853c     00 03 02 36 |  if_ae	mov	_var02, _var01
28540     01 00 06 31 |  if_ae	add	_var01, #1
28544     01 01 48 3C |  if_ae	wrbyte	#0, _var02
28548     E8 FF 9F 3D |  if_ae	jmp	#LR__3862
2854c                 | LR__3863
2854c     09 FB 01 F6 | 	mov	result1, arg01
28550                 | __system__strncpy_ret
28550     2D 00 64 FD | 	ret
28554                 | 
28554                 | __system__strncat
28554     00 14 4E F2 | 	cmps	arg02, #0 wz
28558     50 00 90 AD |  if_e	jmp	#LR__3874
2855c     01 16 16 F2 | 	cmp	arg03, #1 wc
28560     48 00 90 CD |  if_b	jmp	#LR__3874
28564     09 01 02 F6 | 	mov	_var01, arg01
28568     97 1E 48 FB | 	callpa	#(@LR__3872-@LR__3870)>>2,fcache_load_ptr_
2856c                 | LR__3870
2856c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
28570     01 00 06 51 |  if_ne	add	_var01, #1
28574     F4 FF 9F 5D |  if_ne	jmp	#LR__3870
28578     0B 03 02 F6 | 	mov	_var02, arg03
2857c                 | LR__3871
2857c     0A 05 C2 FA | 	rdbyte	_var03, arg02
28580     02 07 02 F6 | 	mov	_var04, _var03
28584     07 06 4E F7 | 	zerox	_var04, #7 wz
28588     01 14 06 F1 | 	add	arg02, #1
2858c     18 00 90 AD |  if_e	jmp	#LR__3873
28590     01 02 86 F1 | 	sub	_var02, #1
28594     00 02 56 F2 | 	cmps	_var02, #0 wc
28598     00 07 02 36 |  if_ae	mov	_var04, _var01
2859c     01 00 06 31 |  if_ae	add	_var01, #1
285a0     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
285a4     D4 FF 9F 3D |  if_ae	jmp	#LR__3871
285a8                 | LR__3872
285a8                 | LR__3873
285a8     00 01 48 FC | 	wrbyte	#0, _var01
285ac                 | LR__3874
285ac     09 FB 01 F6 | 	mov	result1, arg01
285b0                 | __system__strncat_ret
285b0     2D 00 64 FD | 	ret
285b4                 | 
285b4                 | __system__strncmp
285b4     09 01 0A F6 | 	mov	_var01, arg01 wz
285b8     14 00 90 5D |  if_ne	jmp	#LR__3880
285bc     00 14 0E F2 | 	cmp	arg02, #0 wz
285c0     01 02 66 56 |  if_ne	neg	_var02, #1
285c4     00 02 06 A6 |  if_e	mov	_var02, #0
285c8     01 FB 01 F6 | 	mov	result1, _var02
285cc     74 00 90 FD | 	jmp	#__system__strncmp_ret
285d0                 | LR__3880
285d0     00 14 0E F2 | 	cmp	arg02, #0 wz
285d4     01 FA 05 A6 |  if_e	mov	result1, #1
285d8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
285dc     0B 05 02 F6 | 	mov	_var03, arg03
285e0     97 16 48 FB | 	callpa	#(@LR__3882-@LR__3881)>>2,fcache_load_ptr_
285e4                 | LR__3881
285e4     00 07 C2 FA | 	rdbyte	_var04, _var01
285e8     0A 09 02 F6 | 	mov	_var05, arg02
285ec     04 0B C2 FA | 	rdbyte	_var06, _var05
285f0     01 04 86 F1 | 	sub	_var03, #1
285f4     00 04 56 F2 | 	cmps	_var03, #0 wc
285f8     01 00 06 F1 | 	add	_var01, #1
285fc     01 14 06 F1 | 	add	arg02, #1
28600     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
28604     08 00 90 2D |  if_nc_and_z	jmp	#LR__3883
28608     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2860c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3881
28610                 | LR__3882
28610                 | LR__3883
28610     00 04 56 F2 | 	cmps	_var03, #0 wc
28614     00 FA 05 C6 |  if_b	mov	result1, #0
28618     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2861c     05 07 0A F2 | 	cmp	_var04, _var06 wz
28620     00 FA 05 A6 |  if_e	mov	result1, #0
28624     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
28628     00 06 0E F2 | 	cmp	_var04, #0 wz
2862c     01 FA 65 A6 |  if_e	neg	result1, #1
28630     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
28634     00 0A 0E F2 | 	cmp	_var06, #0 wz
28638     01 FA 05 A6 |  if_e	mov	result1, #1
2863c     03 FB 01 56 |  if_ne	mov	result1, _var04
28640     05 FB 81 51 |  if_ne	sub	result1, _var06
28644                 | __system__strncmp_ret
28644     2D 00 64 FD | 	ret
28648                 | 
28648                 | __system____root_opendir
28648     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2864c     04 12 06 F1 | 	add	arg01, #4
28650     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
28654     00 FA 05 F6 | 	mov	result1, #0
28658     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2865c                 | __system____root_opendir_ret
2865c     2D 00 64 FD | 	ret
28660                 | 
28660                 | __system____root_readdir
28660     03 4A 05 F6 | 	mov	COUNT_, #3
28664     A8 00 A0 FD | 	call	#pushregs_
28668     09 27 02 F6 | 	mov	local01, arg01
2866c     0A 29 02 F6 | 	mov	local02, arg02
28670     04 26 06 F1 | 	add	local01, #4
28674     13 2B 02 FB | 	rdlong	local03, local01
28678     04 26 86 F1 | 	sub	local01, #4
2867c                 | LR__3890
2867c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
28680     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
28684     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
28688     01 FA 65 A6 |  if_e	neg	result1, #1
2868c     48 00 90 AD |  if_e	jmp	#LR__3891
28690     15 17 0A FB | 	rdlong	arg03, local03 wz
28694     04 2A 06 A1 |  if_e	add	local03, #4
28698     E0 FF 9F AD |  if_e	jmp	#LR__3890
2869c     15 15 02 FB | 	rdlong	arg02, local03
286a0     01 14 06 F1 | 	add	arg02, #1
286a4     14 13 02 F6 | 	mov	arg01, local02
286a8     40 16 06 F6 | 	mov	arg03, #64
286ac     58 FE BF FD | 	call	#__system__strncpy
286b0     50 28 06 F1 | 	add	local02, #80
286b4     14 03 48 FC | 	wrbyte	#1, local02
286b8     08 28 86 F1 | 	sub	local02, #8
286bc     14 01 68 FC | 	wrlong	#0, local02
286c0     04 28 06 F1 | 	add	local02, #4
286c4     14 01 68 FC | 	wrlong	#0, local02
286c8     04 2A 06 F1 | 	add	local03, #4
286cc     04 26 06 F1 | 	add	local01, #4
286d0     13 2B 62 FC | 	wrlong	local03, local01
286d4     00 FA 05 F6 | 	mov	result1, #0
286d8                 | LR__3891
286d8     A7 F0 03 F6 | 	mov	ptra, fp
286dc     B2 00 A0 FD | 	call	#popregs_
286e0                 | __system____root_readdir_ret
286e0     2D 00 64 FD | 	ret
286e4                 | 
286e4                 | __system____root_closedir
286e4     00 FA 05 F6 | 	mov	result1, #0
286e8                 | __system____root_closedir_ret
286e8     2D 00 64 FD | 	ret
286ec                 | 
286ec                 | __system____root_stat
286ec     0A 01 02 F6 | 	mov	_var01, arg02
286f0     00 13 02 F6 | 	mov	arg01, _var01
286f4     00 14 06 F6 | 	mov	arg02, #0
286f8     30 16 06 F6 | 	mov	arg03, #48
286fc     98 00 A0 FD | 	call	#\builtin_bytefill_
28700     08 00 06 F1 | 	add	_var01, #8
28704     08 00 80 FF 
28708     00 FF 6B FC | 	wrlong	##4607, _var01
2870c     00 FA 05 F6 | 	mov	result1, #0
28710                 | __system____root_stat_ret
28710     2D 00 64 FD | 	ret
28714                 | 
28714                 | __system___normalizeName
28714     00 00 06 F6 | 	mov	_var01, #0
28718     09 03 02 F6 | 	mov	_var02, arg01
2871c     01 05 02 F6 | 	mov	_var03, _var02
28720                 | LR__3900
28720     01 07 CA FA | 	rdbyte	_var04, _var02 wz
28724     5C 01 90 AD |  if_e	jmp	#LR__3919
28728     00 00 0E F2 | 	cmp	_var01, #0 wz
2872c     02 07 02 56 |  if_ne	mov	_var04, _var03
28730     01 04 06 51 |  if_ne	add	_var03, #1
28734     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
28738     00 00 06 56 |  if_ne	mov	_var01, #0
2873c     01 07 C2 FA | 	rdbyte	_var04, _var02
28740     2E 06 0E F2 | 	cmp	_var04, #46 wz
28744     D8 00 90 5D |  if_ne	jmp	#LR__3912
28748     01 02 06 F1 | 	add	_var02, #1
2874c     01 07 C2 FA | 	rdbyte	_var04, _var02
28750     01 02 86 F1 | 	sub	_var02, #1
28754     2F 06 0E F2 | 	cmp	_var04, #47 wz
28758     18 00 90 AD |  if_e	jmp	#LR__3901
2875c     01 02 06 F1 | 	add	_var02, #1
28760     01 09 C2 FA | 	rdbyte	_var05, _var02
28764     01 02 86 F1 | 	sub	_var02, #1
28768     04 0B 02 F6 | 	mov	_var06, _var05
2876c     07 0A 4E F7 | 	zerox	_var06, #7 wz
28770     10 00 90 5D |  if_ne	jmp	#LR__3902
28774                 | LR__3901
28774     01 0D 02 F6 | 	mov	_var07, _var02
28778     01 0C 06 F1 | 	add	_var07, #1
2877c     06 03 02 F6 | 	mov	_var02, _var07
28780     E0 00 90 FD | 	jmp	#LR__3916
28784                 | LR__3902
28784     01 02 06 F1 | 	add	_var02, #1
28788     01 0D C2 FA | 	rdbyte	_var07, _var02
2878c     01 02 86 F1 | 	sub	_var02, #1
28790     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
28794     2E 06 0E F2 | 	cmp	_var04, #46 wz
28798     84 00 90 5D |  if_ne	jmp	#LR__3911
2879c     02 02 06 F1 | 	add	_var02, #2
287a0     01 0D C2 FA | 	rdbyte	_var07, _var02
287a4     02 02 86 F1 | 	sub	_var02, #2
287a8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
287ac     2F 06 0E F2 | 	cmp	_var04, #47 wz
287b0     18 00 90 AD |  if_e	jmp	#LR__3903
287b4     02 02 06 F1 | 	add	_var02, #2
287b8     01 09 C2 FA | 	rdbyte	_var05, _var02
287bc     02 02 86 F1 | 	sub	_var02, #2
287c0     04 0B 02 F6 | 	mov	_var06, _var05
287c4     07 0A 4E F7 | 	zerox	_var06, #7 wz
287c8     54 00 90 5D |  if_ne	jmp	#LR__3910
287cc                 | LR__3903
287cc     02 02 06 F1 | 	add	_var02, #2
287d0     09 05 5A F2 | 	cmps	_var03, arg01 wcz
287d4     40 00 90 ED |  if_be	jmp	#LR__3909
287d8     02 0F 02 F6 | 	mov	_var08, _var03
287dc     01 0E 86 F1 | 	sub	_var08, #1
287e0                 | LR__3904
287e0     07 07 C2 FA | 	rdbyte	_var04, _var08
287e4     2F 06 0E F2 | 	cmp	_var04, #47 wz
287e8     0C 00 90 5D |  if_ne	jmp	#LR__3905
287ec     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
287f0     01 0E 86 11 |  if_a	sub	_var08, #1
287f4     E8 FF 9F 1D |  if_a	jmp	#LR__3904
287f8                 | LR__3905
287f8     97 0C 48 FB | 	callpa	#(@LR__3907-@LR__3906)>>2,fcache_load_ptr_
287fc                 | LR__3906
287fc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
28800     10 00 90 ED |  if_be	jmp	#LR__3908
28804     07 07 C2 FA | 	rdbyte	_var04, _var08
28808     2F 06 0E F2 | 	cmp	_var04, #47 wz
2880c     01 0E 86 51 |  if_ne	sub	_var08, #1
28810     E8 FF 9F 5D |  if_ne	jmp	#LR__3906
28814                 | LR__3907
28814                 | LR__3908
28814     07 05 02 F6 | 	mov	_var03, _var08
28818                 | LR__3909
28818     01 00 06 F6 | 	mov	_var01, #1
2881c     44 00 90 FD | 	jmp	#LR__3916
28820                 | LR__3910
28820                 | LR__3911
28820                 | LR__3912
28820     97 18 48 FB | 	callpa	#(@LR__3914-@LR__3913)>>2,fcache_load_ptr_
28824                 | LR__3913
28824     01 07 CA FA | 	rdbyte	_var04, _var02 wz
28828     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2882c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
28830     20 00 90 AD |  if_e	jmp	#LR__3915
28834     01 0B 02 F6 | 	mov	_var06, _var02
28838     01 09 02 F6 | 	mov	_var05, _var02
2883c     01 08 06 F1 | 	add	_var05, #1
28840     05 11 C2 FA | 	rdbyte	_var09, _var06
28844     04 03 02 F6 | 	mov	_var02, _var05
28848     02 11 42 FC | 	wrbyte	_var09, _var03
2884c     01 04 06 F1 | 	add	_var03, #1
28850     D0 FF 9F FD | 	jmp	#LR__3913
28854                 | LR__3914
28854                 | LR__3915
28854     01 07 C2 FA | 	rdbyte	_var04, _var02
28858     2F 06 0E F2 | 	cmp	_var04, #47 wz
2885c     C0 FE 9F 5D |  if_ne	jmp	#LR__3900
28860     01 00 06 F6 | 	mov	_var01, #1
28864                 | LR__3916
28864     97 0C 48 FB | 	callpa	#(@LR__3918-@LR__3917)>>2,fcache_load_ptr_
28868                 | LR__3917
28868     01 07 C2 FA | 	rdbyte	_var04, _var02
2886c     2F 06 0E F2 | 	cmp	_var04, #47 wz
28870     01 0D 02 A6 |  if_e	mov	_var07, _var02
28874     01 0C 06 A1 |  if_e	add	_var07, #1
28878     06 03 02 A6 |  if_e	mov	_var02, _var07
2887c     E8 FF 9F AD |  if_e	jmp	#LR__3917
28880                 | LR__3918
28880     9C FE 9F FD | 	jmp	#LR__3900
28884                 | LR__3919
28884     02 01 48 FC | 	wrbyte	#0, _var03
28888                 | __system___normalizeName_ret
28888     2D 00 64 FD | 	ret
2888c                 | 
2888c                 | __system___strrev
2888c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
28890     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
28894     09 03 02 F6 | 	mov	_var02, arg01
28898     97 1A 48 FB | 	callpa	#(@LR__3922-@LR__3920)>>2,fcache_load_ptr_
2889c                 | LR__3920
2889c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
288a0     01 02 06 51 |  if_ne	add	_var02, #1
288a4     F4 FF 9F 5D |  if_ne	jmp	#LR__3920
288a8     01 02 86 F1 | 	sub	_var02, #1
288ac                 | LR__3921
288ac     09 03 5A F2 | 	cmps	_var02, arg01 wcz
288b0     1C 00 90 ED |  if_be	jmp	#LR__3923
288b4     09 01 C2 FA | 	rdbyte	_var01, arg01
288b8     01 05 C2 FA | 	rdbyte	_var03, _var02
288bc     09 05 42 FC | 	wrbyte	_var03, arg01
288c0     01 01 42 FC | 	wrbyte	_var01, _var02
288c4     01 12 06 F1 | 	add	arg01, #1
288c8     01 02 86 F1 | 	sub	_var02, #1
288cc     DC FF 9F FD | 	jmp	#LR__3921
288d0                 | LR__3922
288d0                 | LR__3923
288d0                 | __system___strrev_ret
288d0     2D 00 64 FD | 	ret
288d4                 | 
288d4                 | __system___fmtpad
288d4     06 4A 05 F6 | 	mov	COUNT_, #6
288d8     A8 00 A0 FD | 	call	#pushregs_
288dc     09 27 02 F6 | 	mov	local01, arg01
288e0     0A 29 02 F6 | 	mov	local02, arg02
288e4     0B 2B 02 F6 | 	mov	local03, arg03
288e8     14 13 EA F8 | 	getbyte	arg01, local02, #1
288ec     16 28 46 F0 | 	shr	local02, #22
288f0     03 28 0E F5 | 	and	local02, #3 wz
288f4     00 2C 06 F6 | 	mov	local04, #0
288f8     01 28 06 A6 |  if_e	mov	local02, #1
288fc     0C 29 CA F7 | 	test	local02, arg04 wz
28900     00 FA 05 A6 |  if_e	mov	result1, #0
28904     88 00 90 AD |  if_e	jmp	#LR__3933
28908     09 2B C2 F2 | 	subr	local03, arg01
2890c     01 2A 56 F2 | 	cmps	local03, #1 wc
28910     00 FA 05 C6 |  if_b	mov	result1, #0
28914     78 00 90 CD |  if_b	jmp	#LR__3933
28918     03 28 0E F2 | 	cmp	local02, #3 wz
2891c     18 00 90 5D |  if_ne	jmp	#LR__3930
28920     01 18 0E F2 | 	cmp	arg04, #1 wz
28924     6E 28 62 FD | 	wrz	local02
28928     14 2B 02 F1 | 	add	local03, local02
2892c     15 2B 52 F6 | 	abs	local03, local03 wc
28930     01 2A 46 F0 | 	shr	local03, #1
28934     15 2B 82 F6 | 	negc	local03, local03
28938                 | LR__3930
28938     01 2A 56 F2 | 	cmps	local03, #1 wc
2893c     4C 00 90 CD |  if_b	jmp	#LR__3932
28940     15 2F 02 F6 | 	mov	local05, local03
28944                 | LR__3931
28944     13 29 02 F6 | 	mov	local02, local01
28948     13 31 02 F6 | 	mov	local06, local01
2894c     13 28 46 F7 | 	zerox	local02, #19
28950     14 30 46 F0 | 	shr	local06, #20
28954     02 30 66 F0 | 	shl	local06, #2
28958     ED 30 02 F1 | 	add	local06, __methods__
2895c     18 31 02 FB | 	rdlong	local06, local06
28960     20 12 06 F6 | 	mov	arg01, #32
28964     F2 2A 02 F6 | 	mov	local03, objptr
28968     14 E5 01 F6 | 	mov	objptr, local02
2896c     2D 30 62 FD | 	call	local06
28970     15 E5 01 F6 | 	mov	objptr, local03
28974     FD 30 02 F6 | 	mov	local06, result1
28978     00 30 56 F2 | 	cmps	local06, #0 wc
2897c     18 FB 01 C6 |  if_b	mov	result1, local06
28980     0C 00 90 CD |  if_b	jmp	#LR__3933
28984     18 2D 02 F1 | 	add	local04, local06
28988     EE 2F 6E FB | 	djnz	local05, #LR__3931
2898c                 | LR__3932
2898c     16 FB 01 F6 | 	mov	result1, local04
28990                 | LR__3933
28990     A7 F0 03 F6 | 	mov	ptra, fp
28994     B2 00 A0 FD | 	call	#popregs_
28998                 | __system___fmtpad_ret
28998     2D 00 64 FD | 	ret
2899c                 | 
2899c                 | __system___uitoa
2899c     04 4A 05 F6 | 	mov	COUNT_, #4
289a0     A8 00 A0 FD | 	call	#pushregs_
289a4     09 27 02 F6 | 	mov	local01, arg01
289a8     00 1A 4E F2 | 	cmps	arg05, #0 wz
289ac     13 1B 02 F6 | 	mov	arg05, local01
289b0     00 28 06 F6 | 	mov	local02, #0
289b4     37 2A 06 56 |  if_ne	mov	local03, #55
289b8     57 2A 06 A6 |  if_e	mov	local03, #87
289bc                 | LR__3940
289bc     0B 15 12 FD | 	qdiv	arg02, arg03
289c0     19 2C 62 FD | 	getqy	local04
289c4     0B 15 12 FD | 	qdiv	arg02, arg03
289c8     0A 2C 16 F2 | 	cmp	local04, #10 wc
289cc     30 2C 06 C1 |  if_b	add	local04, #48
289d0     15 2D 02 31 |  if_ae	add	local04, local03
289d4     0D 2D 42 FC | 	wrbyte	local04, arg05
289d8     01 1A 06 F1 | 	add	arg05, #1
289dc     01 28 06 F1 | 	add	local02, #1
289e0     18 14 62 FD | 	getqx	arg02
289e4     00 14 0E F2 | 	cmp	arg02, #0 wz
289e8     D0 FF 9F 5D |  if_ne	jmp	#LR__3940
289ec     0C 29 12 F2 | 	cmp	local02, arg04 wc
289f0     C8 FF 9F CD |  if_b	jmp	#LR__3940
289f4     0D 01 48 FC | 	wrbyte	#0, arg05
289f8     13 13 02 F6 | 	mov	arg01, local01
289fc     8C FE BF FD | 	call	#__system___strrev
28a00     14 FB 01 F6 | 	mov	result1, local02
28a04     A7 F0 03 F6 | 	mov	ptra, fp
28a08     B2 00 A0 FD | 	call	#popregs_
28a0c                 | __system___uitoa_ret
28a0c     2D 00 64 FD | 	ret
28a10                 | 
28a10                 | __system__disassemble_0516
28a10     10 4A 05 F6 | 	mov	COUNT_, #16
28a14     A8 00 A0 FD | 	call	#pushregs_
28a18     09 27 02 F6 | 	mov	local01, arg01
28a1c     0A 29 02 F6 | 	mov	local02, arg02
28a20     0B 2B 02 F6 | 	mov	local03, arg03
28a24     0C 2D 02 F6 | 	mov	local04, arg04
28a28     0D 2F 02 F6 | 	mov	local05, arg05
28a2c     17 13 52 F6 | 	abs	arg01, local05 wc
28a30     1F 30 C6 C9 |  if_b	decod	local06, #31
28a34     00 30 06 36 |  if_ae	mov	local06, #0
28a38     CC CF BF FD | 	call	#__system___float_fromuns
28a3c     18 FB 61 F5 | 	xor	result1, local06
28a40     FD 32 02 F6 | 	mov	local07, result1
28a44     00 34 06 F6 | 	mov	local08, #0
28a48     13 13 02 F6 | 	mov	arg01, local01
28a4c     00 14 06 F6 | 	mov	arg02, #0
28a50     01 16 06 F6 | 	mov	arg03, #1
28a54     E8 D7 BF FD | 	call	#__system___float_cmp
28a58     00 FA 0D F2 | 	cmp	result1, #0 wz
28a5c     00 36 06 A6 |  if_e	mov	local09, #0
28a60     14 01 68 AC |  if_e	wrlong	#0, local02
28a64     15 37 62 AC |  if_e	wrlong	local09, local03
28a68     8C 01 90 AD |  if_e	jmp	#LR__3962
28a6c     13 13 02 F6 | 	mov	arg01, local01
28a70     BC DC BF FD | 	call	#__system____builtin_ilogb
28a74     FD 38 02 F6 | 	mov	local10, result1
28a78     0A 2E 0E F2 | 	cmp	local05, #10 wz
28a7c     24 00 90 5D |  if_ne	jmp	#LR__3950
28a80     1C 37 02 F6 | 	mov	local09, local10
28a84     01 36 66 F0 | 	shl	local09, #1
28a88     1C 37 02 F1 | 	add	local09, local10
28a8c     1B 39 52 F6 | 	abs	local10, local09 wc
28a90     0A 38 16 FD | 	qdiv	local10, #10
28a94     09 3A 06 F6 | 	mov	local11, #9
28a98     18 38 62 FD | 	getqx	local10
28a9c     1C 39 82 F6 | 	negc	local10, local10
28aa0     04 00 90 FD | 	jmp	#LR__3951
28aa4                 | LR__3950
28aa4     18 3A 06 F6 | 	mov	local11, #24
28aa8                 | LR__3951
28aa8                 | LR__3952
28aa8     08 34 56 F2 | 	cmps	local08, #8 wc
28aac     01 34 06 F1 | 	add	local08, #1
28ab0     60 00 90 3D |  if_ae	jmp	#LR__3953
28ab4     00 C0 1F FF 
28ab8     00 12 06 F6 | 	mov	arg01, ##1065353216
28abc     19 15 02 F6 | 	mov	arg02, local07
28ac0     1C 17 02 F6 | 	mov	arg03, local10
28ac4     4C E3 BF FD | 	call	#__system___float_pow_n
28ac8     FD 14 02 F6 | 	mov	arg02, result1
28acc     13 13 02 F6 | 	mov	arg01, local01
28ad0     3C D5 BF FD | 	call	#__system___float_div
28ad4     FD 3C 02 F6 | 	mov	local12, result1
28ad8     1E 13 02 F6 | 	mov	arg01, local12
28adc     00 C0 1F FF 
28ae0     00 14 06 F6 | 	mov	arg02, ##1065353216
28ae4     01 16 06 F6 | 	mov	arg03, #1
28ae8     54 D7 BF FD | 	call	#__system___float_cmp
28aec     00 FA 55 F2 | 	cmps	result1, #0 wc
28af0     01 38 86 C1 |  if_b	sub	local10, #1
28af4     B0 FF 9F CD |  if_b	jmp	#LR__3952
28af8     19 15 02 F6 | 	mov	arg02, local07
28afc     1E 13 02 F6 | 	mov	arg01, local12
28b00     01 16 66 F6 | 	neg	arg03, #1
28b04     38 D7 BF FD | 	call	#__system___float_cmp
28b08     00 FA 55 F2 | 	cmps	result1, #0 wc
28b0c     01 38 06 31 |  if_ae	add	local10, #1
28b10     94 FF 9F 3D |  if_ae	jmp	#LR__3952
28b14                 | LR__3953
28b14     1E 13 02 F6 | 	mov	arg01, local12
28b18     14 DC BF FD | 	call	#__system____builtin_ilogb
28b1c     FD 3E 02 F6 | 	mov	local13, result1
28b20     1E 41 02 F6 | 	mov	local14, local12
28b24     17 41 06 F4 | 	bitl	local14, #279
28b28     17 40 26 F4 | 	bith	local14, #23
28b2c     1F 41 62 F0 | 	shl	local14, local13
28b30     02 2E 0E F2 | 	cmp	local05, #2 wz
28b34     02 2C 66 A0 |  if_e	shl	local04, #2
28b38     00 42 06 F6 | 	mov	local15, #0
28b3c     00 2C 56 F2 | 	cmps	local04, #0 wc
28b40     10 00 90 3D |  if_ae	jmp	#LR__3954
28b44     1C 2D C2 F2 | 	subr	local04, local10
28b48     00 2C 56 F2 | 	cmps	local04, #0 wc
28b4c     A0 00 90 CD |  if_b	jmp	#LR__3961
28b50     04 00 90 FD | 	jmp	#LR__3955
28b54                 | LR__3954
28b54     01 2C 06 F1 | 	add	local04, #1
28b58                 | LR__3955
28b58     1D 2D 7A F3 | 	fles	local04, local11 wcz
28b5c     01 44 06 F6 | 	mov	local16, #1
28b60     97 22 48 FB | 	callpa	#(@LR__3957-@LR__3956)>>2,fcache_load_ptr_
28b64                 | LR__3956
28b64     00 40 00 FF 
28b68     00 42 16 F2 | 	cmp	local15, ##8388608 wc
28b6c     38 00 90 3D |  if_ae	jmp	#LR__3958
28b70     01 2C 56 F2 | 	cmps	local04, #1 wc
28b74     01 2C 86 F1 | 	sub	local04, #1
28b78     2C 00 90 CD |  if_b	jmp	#LR__3958
28b7c     17 43 02 FD | 	qmul	local15, local05
28b80     20 3F 02 F6 | 	mov	local13, local14
28b84     17 3E 46 F0 | 	shr	local13, #23
28b88     17 41 06 F4 | 	bitl	local14, #279
28b8c     18 42 62 FD | 	getqx	local15
28b90     17 45 02 FD | 	qmul	local16, local05
28b94     18 44 62 FD | 	getqx	local16
28b98     17 41 02 FD | 	qmul	local14, local05
28b9c     1F 43 02 F1 | 	add	local15, local13
28ba0     18 40 62 FD | 	getqx	local14
28ba4     BC FF 9F FD | 	jmp	#LR__3956
28ba8                 | LR__3957
28ba8                 | LR__3958
28ba8     17 37 02 F6 | 	mov	local09, local05
28bac     17 36 66 F0 | 	shl	local09, #23
28bb0     1B 3F 52 F6 | 	abs	local13, local09 wc
28bb4     01 3E 46 F0 | 	shr	local13, #1
28bb8     1F 3F 82 F6 | 	negc	local13, local13
28bbc     1F 41 1A F2 | 	cmp	local14, local13 wcz
28bc0     20 00 90 1D |  if_a	jmp	#LR__3959
28bc4     17 2E 66 F0 | 	shl	local05, #23
28bc8     17 3F 52 F6 | 	abs	local13, local05 wc
28bcc     01 3E 46 F0 | 	shr	local13, #1
28bd0     1F 3F 82 F6 | 	negc	local13, local13
28bd4     1F 41 0A F2 | 	cmp	local14, local13 wz
28bd8     14 00 90 5D |  if_ne	jmp	#LR__3960
28bdc     01 42 CE F7 | 	test	local15, #1 wz
28be0     0C 00 90 AD |  if_e	jmp	#LR__3960
28be4                 | LR__3959
28be4     01 42 06 F1 | 	add	local15, #1
28be8     22 43 0A F2 | 	cmp	local15, local16 wz
28bec     01 38 06 A1 |  if_e	add	local10, #1
28bf0                 | LR__3960
28bf0                 | LR__3961
28bf0     14 43 62 FC | 	wrlong	local15, local02
28bf4     15 39 62 FC | 	wrlong	local10, local03
28bf8                 | LR__3962
28bf8     A7 F0 03 F6 | 	mov	ptra, fp
28bfc     B2 00 A0 FD | 	call	#popregs_
28c00                 | __system__disassemble_0516_ret
28c00     2D 00 64 FD | 	ret
28c04                 | 
28c04                 | __system__emitsign_0518
28c04     00 FA 05 F6 | 	mov	result1, #0
28c08     00 14 0E F2 | 	cmp	arg02, #0 wz
28c0c     09 01 02 56 |  if_ne	mov	_var01, arg01
28c10     01 12 06 51 |  if_ne	add	arg01, #1
28c14     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
28c18     01 FA 05 56 |  if_ne	mov	result1, #1
28c1c     00 16 0E F2 | 	cmp	arg03, #0 wz
28c20     09 61 48 5C |  if_ne	wrbyte	#48, arg01
28c24     01 12 06 51 |  if_ne	add	arg01, #1
28c28     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
28c2c     02 FA 05 51 |  if_ne	add	result1, #2
28c30                 | __system__emitsign_0518_ret
28c30     2D 00 64 FD | 	ret
28c34                 | 
28c34                 | __system___gettxfunc
28c34     01 4A 05 F6 | 	mov	COUNT_, #1
28c38     A8 00 A0 FD | 	call	#pushregs_
28c3c     A0 F8 BF FD | 	call	#__system____getftab
28c40     FD 26 0A F6 | 	mov	local01, result1 wz
28c44     10 00 90 AD |  if_e	jmp	#LR__3970
28c48     08 26 06 F1 | 	add	local01, #8
28c4c     13 15 0A FB | 	rdlong	arg02, local01 wz
28c50     08 26 86 F1 | 	sub	local01, #8
28c54     08 00 90 5D |  if_ne	jmp	#LR__3971
28c58                 | LR__3970
28c58     00 FA 05 F6 | 	mov	result1, #0
28c5c     0C 00 90 FD | 	jmp	#LR__3972
28c60                 | LR__3971
28c60     00 D0 04 FF 
28c64     00 26 46 F5 | 	or	local01, ##161480704
28c68     13 FB 01 F6 | 	mov	result1, local01
28c6c                 | LR__3972
28c6c     A7 F0 03 F6 | 	mov	ptra, fp
28c70     B2 00 A0 FD | 	call	#popregs_
28c74                 | __system___gettxfunc_ret
28c74     2D 00 64 FD | 	ret
28c78                 | 
28c78                 | __system___getrxfunc
28c78     01 4A 05 F6 | 	mov	COUNT_, #1
28c7c     A8 00 A0 FD | 	call	#pushregs_
28c80     5C F8 BF FD | 	call	#__system____getftab
28c84     FD 26 0A F6 | 	mov	local01, result1 wz
28c88     10 00 90 AD |  if_e	jmp	#LR__3980
28c8c     08 26 06 F1 | 	add	local01, #8
28c90     13 15 0A FB | 	rdlong	arg02, local01 wz
28c94     08 26 86 F1 | 	sub	local01, #8
28c98     08 00 90 5D |  if_ne	jmp	#LR__3981
28c9c                 | LR__3980
28c9c     00 FA 05 F6 | 	mov	result1, #0
28ca0     0C 00 90 FD | 	jmp	#LR__3982
28ca4                 | LR__3981
28ca4     00 D8 04 FF 
28ca8     00 26 46 F5 | 	or	local01, ##162529280
28cac     13 FB 01 F6 | 	mov	result1, local01
28cb0                 | LR__3982
28cb0     A7 F0 03 F6 | 	mov	ptra, fp
28cb4     B2 00 A0 FD | 	call	#popregs_
28cb8                 | __system___getrxfunc_ret
28cb8     2D 00 64 FD | 	ret
28cbc                 | 
28cbc                 | __system___getiolock_0558
28cbc     01 4A 05 F6 | 	mov	COUNT_, #1
28cc0     A8 00 A0 FD | 	call	#pushregs_
28cc4     18 F8 BF FD | 	call	#__system____getftab
28cc8     FD 26 0A F6 | 	mov	local01, result1 wz
28ccc     10 00 90 AD |  if_e	jmp	#LR__3990
28cd0     08 26 06 F1 | 	add	local01, #8
28cd4     13 FB 09 FB | 	rdlong	result1, local01 wz
28cd8     08 26 86 F1 | 	sub	local01, #8
28cdc     18 00 90 5D |  if_ne	jmp	#LR__3991
28ce0                 | LR__3990
28ce0     01 00 00 FF 
28ce4     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
28ce8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
28cec     01 00 00 FF 
28cf0     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
28cf4     08 00 90 FD | 	jmp	#LR__3992
28cf8                 | LR__3991
28cf8     0C 26 06 F1 | 	add	local01, #12
28cfc     13 FB 01 F6 | 	mov	result1, local01
28d00                 | LR__3992
28d00     A7 F0 03 F6 | 	mov	ptra, fp
28d04     B2 00 A0 FD | 	call	#popregs_
28d08                 | __system___getiolock_0558_ret
28d08     2D 00 64 FD | 	ret
28d0c                 | 
28d0c                 | __system____ScanForChar
28d0c     09 01 02 F6 | 	mov	_var01, arg01
28d10     09 03 02 F6 | 	mov	_var02, arg01
28d14     97 06 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
28d18                 | LR__4000
28d18     01 FB C9 FA | 	rdbyte	result1, _var02 wz
28d1c     01 02 06 51 |  if_ne	add	_var02, #1
28d20     F4 FF 9F 5D |  if_ne	jmp	#LR__4000
28d24                 | LR__4001
28d24     09 03 82 F1 | 	sub	_var02, arg01
28d28     01 FB 01 F6 | 	mov	result1, _var02
28d2c     FD 12 0A F6 | 	mov	arg01, result1 wz
28d30     00 FA 05 A6 |  if_e	mov	result1, #0
28d34     B8 00 90 AD |  if_e	jmp	#LR__4008
28d38     0A 05 02 F6 | 	mov	_var03, arg02
28d3c     07 04 4E F7 | 	zerox	_var03, #7 wz
28d40     00 FA 05 A6 |  if_e	mov	result1, #0
28d44     A8 00 90 AD |  if_e	jmp	#LR__4008
28d48     01 16 16 F2 | 	cmp	arg03, #1 wc
28d4c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
28d50     01 16 06 86 |  if_c_and_z	mov	arg03, #1
28d54     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
28d58     94 00 90 4D |  if_c_and_nz	jmp	#LR__4008
28d5c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
28d60     10 00 90 ED |  if_be	jmp	#LR__4002
28d64     00 18 0E F2 | 	cmp	arg04, #0 wz
28d68     00 FA 05 A6 |  if_e	mov	result1, #0
28d6c     80 00 90 AD |  if_e	jmp	#LR__4008
28d70     09 17 02 F6 | 	mov	arg03, arg01
28d74                 | LR__4002
28d74     01 16 86 F1 | 	sub	arg03, #1
28d78     00 18 0E F2 | 	cmp	arg04, #0 wz
28d7c     38 00 90 5D |  if_ne	jmp	#LR__4004
28d80     0B 07 02 F6 | 	mov	_var04, arg03
28d84     09 09 02 F6 | 	mov	_var05, arg01
28d88                 | LR__4003
28d88     04 07 12 F2 | 	cmp	_var04, _var05 wc
28d8c     5C 00 90 3D |  if_ae	jmp	#LR__4007
28d90     03 05 02 F6 | 	mov	_var03, _var04
28d94     00 05 02 F1 | 	add	_var03, _var01
28d98     02 05 C2 FA | 	rdbyte	_var03, _var03
28d9c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
28da0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
28da4     01 06 06 A1 |  if_e	add	_var04, #1
28da8     03 FB 01 A6 |  if_e	mov	result1, _var04
28dac     40 00 90 AD |  if_e	jmp	#LR__4008
28db0     01 06 06 F1 | 	add	_var04, #1
28db4     D0 FF 9F FD | 	jmp	#LR__4003
28db8                 | LR__4004
28db8     0B 07 02 F6 | 	mov	_var04, arg03
28dbc                 | LR__4005
28dbc     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
28dc0     28 00 90 1D |  if_a	jmp	#LR__4006
28dc4     03 09 02 F6 | 	mov	_var05, _var04
28dc8     00 09 02 F1 | 	add	_var05, _var01
28dcc     04 05 C2 FA | 	rdbyte	_var03, _var05
28dd0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
28dd4     04 05 0A F2 | 	cmp	_var03, _var05 wz
28dd8     01 06 06 A1 |  if_e	add	_var04, #1
28ddc     03 FB 01 A6 |  if_e	mov	result1, _var04
28de0     0C 00 90 AD |  if_e	jmp	#LR__4008
28de4     01 06 86 F1 | 	sub	_var04, #1
28de8     D0 FF 9F FD | 	jmp	#LR__4005
28dec                 | LR__4006
28dec                 | LR__4007
28dec     00 FA 05 F6 | 	mov	result1, #0
28df0                 | LR__4008
28df0                 | __system____ScanForChar_ret
28df0     2D 00 64 FD | 	ret
28df4                 | 
28df4                 | __system___basic_dir
28df4     05 4A 05 F6 | 	mov	COUNT_, #5
28df8     A8 00 A0 FD | 	call	#pushregs_
28dfc     4C F0 07 F1 | 	add	ptra, #76
28e00     04 4E 05 F1 | 	add	fp, #4
28e04     A7 12 62 FC | 	wrlong	arg01, fp
28e08     04 4E 05 F1 | 	add	fp, #4
28e0c     A7 14 62 FC | 	wrlong	arg02, fp
28e10     04 4E 85 F1 | 	sub	fp, #4
28e14     A7 14 0A FB | 	rdlong	arg02, fp wz
28e18     04 4E 85 F1 | 	sub	fp, #4
28e1c     04 4E 05 51 |  if_ne	add	fp, #4
28e20     A7 26 02 5B |  if_ne	rdlong	local01, fp
28e24     04 4E 85 51 |  if_ne	sub	fp, #4
28e28     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
28e2c     70 00 90 AD |  if_e	jmp	#LR__4010
28e30     03 00 00 FF 
28e34     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28e38     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
28e3c     03 00 00 FF 
28e40     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28e44     03 00 00 5F 
28e48     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
28e4c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
28e50     03 00 00 5F 
28e54     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
28e58     D8 E9 BF 5D |  if_ne	call	#__system__closedir
28e5c     95 01 00 FF 
28e60     0C 13 06 F6 | 	mov	arg01, ##@LR__5178
28e64     E0 E8 BF FD | 	call	#__system__opendir
28e68     03 00 00 FF 
28e6c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28e70     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
28e74     08 4E 05 F1 | 	add	fp, #8
28e78     A7 28 02 FB | 	rdlong	local02, fp
28e7c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
28e80     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
28e84     04 4E 85 F1 | 	sub	fp, #4
28e88     A7 28 02 FB | 	rdlong	local02, fp
28e8c     04 4E 85 F1 | 	sub	fp, #4
28e90     04 E6 05 F1 | 	add	ptr___system__dat__, #4
28e94     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
28e98     03 00 00 FF 
28e9c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
28ea0                 | LR__4010
28ea0     03 00 00 FF 
28ea4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28ea8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
28eac     03 00 00 FF 
28eb0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28eb4     95 01 00 AF 
28eb8     0E FB 05 A6 |  if_e	mov	result1, ##@LR__5179
28ebc     84 02 90 AD |  if_e	jmp	#LR__4023
28ec0                 | LR__4011
28ec0     03 00 00 FF 
28ec4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28ec8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
28ecc     03 00 00 FF 
28ed0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28ed4     D0 E9 BF FD | 	call	#__system__readdir
28ed8     0C 4E 05 F1 | 	add	fp, #12
28edc     A7 FA 61 FC | 	wrlong	result1, fp
28ee0     0C 4E 85 F1 | 	sub	fp, #12
28ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
28ee8     38 00 90 5D |  if_ne	jmp	#LR__4012
28eec     03 00 00 FF 
28ef0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28ef4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
28ef8     03 00 00 FF 
28efc     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28f00     30 E9 BF FD | 	call	#__system__closedir
28f04     03 00 00 FF 
28f08     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28f0c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
28f10     03 00 00 FF 
28f14     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28f18     95 01 00 FF 
28f1c     10 FB 05 F6 | 	mov	result1, ##@LR__5180
28f20     20 02 90 FD | 	jmp	#LR__4023
28f24                 | LR__4012
28f24     0C 4E 05 F1 | 	add	fp, #12
28f28     A7 12 02 FB | 	rdlong	arg01, fp
28f2c     0C 4E 85 F1 | 	sub	fp, #12
28f30     03 00 00 FF 
28f34     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
28f38     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
28f3c     03 00 00 FF 
28f40     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
28f44     10 09 B0 FD | 	call	#__system___pat_match
28f48     00 FA 0D F2 | 	cmp	result1, #0 wz
28f4c     70 FF 9F AD |  if_e	jmp	#LR__4011
28f50     03 00 00 FF 
28f54     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
28f58     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
28f5c     03 00 00 FF 
28f60     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
28f64     78 01 90 AD |  if_e	jmp	#LR__4019
28f68     0C 4E 05 F1 | 	add	fp, #12
28f6c     A7 12 02 FB | 	rdlong	arg01, fp
28f70     04 4E 05 F1 | 	add	fp, #4
28f74     A7 14 02 F6 | 	mov	arg02, fp
28f78     10 4E 85 F1 | 	sub	fp, #16
28f7c     2C F2 BF FD | 	call	#__system__stat
28f80     40 4E 05 F1 | 	add	fp, #64
28f84     A7 FA 61 FC | 	wrlong	result1, fp
28f88     40 4E 85 F1 | 	sub	fp, #64
28f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
28f90     95 01 00 5F 
28f94     12 FB 05 56 |  if_ne	mov	result1, ##@LR__5181
28f98     A8 01 90 5D |  if_ne	jmp	#LR__4023
28f9c     18 4E 05 F1 | 	add	fp, #24
28fa0     A7 28 02 FB | 	rdlong	local02, fp
28fa4     78 00 00 FF 
28fa8     00 28 06 F5 | 	and	local02, ##61440
28fac     2C 4E 05 F1 | 	add	fp, #44
28fb0     A7 28 62 FC | 	wrlong	local02, fp
28fb4     38 4E 85 F1 | 	sub	fp, #56
28fb8     A7 28 02 FB | 	rdlong	local02, fp
28fbc     0C 4E 85 F1 | 	sub	fp, #12
28fc0     14 29 C2 FA | 	rdbyte	local02, local02
28fc4     2E 28 0E F2 | 	cmp	local02, #46 wz
28fc8     08 4E 05 A1 |  if_e	add	fp, #8
28fcc     A7 04 68 AC |  if_e	wrlong	#2, fp
28fd0     08 4E C5 F3 | 	sumz	fp, #8
28fd4     A7 00 68 5C |  if_ne	wrlong	#0, fp
28fd8     08 4E 85 51 |  if_ne	sub	fp, #8
28fdc     44 4E 05 F1 | 	add	fp, #68
28fe0     A7 28 02 FB | 	rdlong	local02, fp
28fe4     44 4E 85 F1 | 	sub	fp, #68
28fe8     08 00 00 FF 
28fec     00 28 0E F2 | 	cmp	local02, ##4096 wz
28ff0     18 00 90 5D |  if_ne	jmp	#LR__4013
28ff4     08 4E 05 F1 | 	add	fp, #8
28ff8     A7 28 02 FB | 	rdlong	local02, fp
28ffc     10 28 46 F5 | 	or	local02, #16
29000     A7 28 62 FC | 	wrlong	local02, fp
29004     08 4E 85 F1 | 	sub	fp, #8
29008     AC 00 90 FD | 	jmp	#LR__4018
2900c                 | LR__4013
2900c     44 4E 05 F1 | 	add	fp, #68
29010     A7 28 02 FB | 	rdlong	local02, fp
29014     44 4E 85 F1 | 	sub	fp, #68
29018     10 00 00 FF 
2901c     00 28 0E F2 | 	cmp	local02, ##8192 wz
29020     44 4E 05 51 |  if_ne	add	fp, #68
29024     A7 26 02 5B |  if_ne	rdlong	local01, fp
29028     44 4E 85 51 |  if_ne	sub	fp, #68
2902c     18 00 00 5F 
29030     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
29034     44 4E 05 51 |  if_ne	add	fp, #68
29038     13 2B 02 56 |  if_ne	mov	local03, local01
2903c     44 4E 85 51 |  if_ne	sub	fp, #68
29040     20 00 00 5F 
29044     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
29048     18 00 90 5D |  if_ne	jmp	#LR__4014
2904c     08 4E 05 F1 | 	add	fp, #8
29050     A7 28 02 FB | 	rdlong	local02, fp
29054     04 28 46 F5 | 	or	local02, #4
29058     A7 28 62 FC | 	wrlong	local02, fp
2905c     08 4E 85 F1 | 	sub	fp, #8
29060     54 00 90 FD | 	jmp	#LR__4017
29064                 | LR__4014
29064     18 4E 05 F1 | 	add	fp, #24
29068     A7 28 02 FB | 	rdlong	local02, fp
2906c     18 4E 85 F1 | 	sub	fp, #24
29070     92 28 CE F7 | 	test	local02, #146 wz
29074     18 00 90 5D |  if_ne	jmp	#LR__4015
29078     08 4E 05 F1 | 	add	fp, #8
2907c     A7 28 02 FB | 	rdlong	local02, fp
29080     01 28 46 F5 | 	or	local02, #1
29084     A7 28 62 FC | 	wrlong	local02, fp
29088     08 4E 85 F1 | 	sub	fp, #8
2908c     28 00 90 FD | 	jmp	#LR__4016
29090                 | LR__4015
29090     44 4E 05 F1 | 	add	fp, #68
29094     A7 2C 02 FB | 	rdlong	local04, fp
29098     44 4E 85 F1 | 	sub	fp, #68
2909c     08 00 00 FF 
290a0     00 2C 0E F2 | 	cmp	local04, ##4096 wz
290a4     08 4E 05 51 |  if_ne	add	fp, #8
290a8     A7 2C 02 5B |  if_ne	rdlong	local04, fp
290ac     20 2C 46 55 |  if_ne	or	local04, #32
290b0     A7 2C 62 5C |  if_ne	wrlong	local04, fp
290b4     08 4E 85 51 |  if_ne	sub	fp, #8
290b8                 | LR__4016
290b8                 | LR__4017
290b8                 | LR__4018
290b8     08 4E 05 F1 | 	add	fp, #8
290bc     A7 2C 02 FB | 	rdlong	local04, fp
290c0     08 4E 85 F1 | 	sub	fp, #8
290c4     03 00 00 FF 
290c8     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
290cc     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
290d0     03 00 00 FF 
290d4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
290d8     13 2D CA F7 | 	test	local04, local01 wz
290dc     E0 FD 9F AD |  if_e	jmp	#LR__4011
290e0                 | LR__4019
290e0     0C 4E 05 F1 | 	add	fp, #12
290e4     A7 12 02 FB | 	rdlong	arg01, fp
290e8     0C 4E 85 F1 | 	sub	fp, #12
290ec     09 2F 02 F6 | 	mov	local05, arg01
290f0     97 06 48 FB | 	callpa	#(@LR__4021-@LR__4020)>>2,fcache_load_ptr_
290f4                 | LR__4020
290f4     17 FB C9 FA | 	rdbyte	result1, local05 wz
290f8     01 2E 06 51 |  if_ne	add	local05, #1
290fc     F4 FF 9F 5D |  if_ne	jmp	#LR__4020
29100                 | LR__4021
29100     17 13 C2 F2 | 	subr	arg01, local05
29104     01 12 06 F1 | 	add	arg01, #1
29108     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2910c     48 4E 05 F1 | 	add	fp, #72
29110     A7 FA 61 FC | 	wrlong	result1, fp
29114     48 4E 85 F1 | 	sub	fp, #72
29118     00 FA 0D F2 | 	cmp	result1, #0 wz
2911c     18 00 90 AD |  if_e	jmp	#LR__4022
29120     48 4E 05 F1 | 	add	fp, #72
29124     A7 12 02 FB | 	rdlong	arg01, fp
29128     3C 4E 85 F1 | 	sub	fp, #60
2912c     A7 14 02 FB | 	rdlong	arg02, fp
29130     0C 4E 85 F1 | 	sub	fp, #12
29134     10 9E BF FD | 	call	#__system____builtin_strcpy
29138                 | LR__4022
29138     48 4E 05 F1 | 	add	fp, #72
2913c     A7 FA 01 FB | 	rdlong	result1, fp
29140     48 4E 85 F1 | 	sub	fp, #72
29144                 | LR__4023
29144     A7 F0 03 F6 | 	mov	ptra, fp
29148     B2 00 A0 FD | 	call	#popregs_
2914c                 | __system___basic_dir_ret
2914c     2D 00 64 FD | 	ret
29150                 | 
29150                 | __system__pack_0630
29150     09 01 02 F6 | 	mov	_var01, arg01
29154     7F 16 06 F1 | 	add	arg03, #127
29158     04 18 CE F7 | 	test	arg04, #4 wz
2915c     10 00 90 AD |  if_e	jmp	#LR__4030
29160     00 00 0E F2 | 	cmp	_var01, #0 wz
29164     16 00 C6 A9 |  if_e	decod	_var01, #22
29168     F7 00 26 F4 | 	bith	_var01, #247
2916c     B4 00 90 FD | 	jmp	#LR__4039
29170                 | LR__4030
29170     02 18 CE F7 | 	test	arg04, #2 wz
29174     00 C0 3F 5F 
29178     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2917c     00 14 06 56 |  if_ne	mov	arg02, #0
29180     A0 00 90 5D |  if_ne	jmp	#LR__4038
29184     08 18 CE F7 | 	test	arg04, #8 wz
29188     00 00 06 56 |  if_ne	mov	_var01, #0
2918c     94 00 90 5D |  if_ne	jmp	#LR__4037
29190     FF 16 56 F2 | 	cmps	arg03, #255 wc
29194     00 C0 3F 3F 
29198     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2919c     00 14 06 36 |  if_ae	mov	arg02, #0
291a0     80 00 90 3D |  if_ae	jmp	#LR__4036
291a4     01 16 56 F2 | 	cmps	arg03, #1 wc
291a8     6C 00 90 3D |  if_ae	jmp	#LR__4034
291ac     01 14 46 F0 | 	shr	arg02, #1
291b0     00 03 02 F6 | 	mov	_var02, _var01
291b4     01 02 06 F5 | 	and	_var02, #1
291b8     1F 02 66 F0 | 	shl	_var02, #31
291bc     01 15 42 F5 | 	or	arg02, _var02
291c0     01 00 46 F0 | 	shr	_var01, #1
291c4     97 1E 48 FB | 	callpa	#(@LR__4032-@LR__4031)>>2,fcache_load_ptr_
291c8                 | LR__4031
291c8     00 16 56 F2 | 	cmps	arg03, #0 wc
291cc     34 00 90 3D |  if_ae	jmp	#LR__4033
291d0     00 00 0E F2 | 	cmp	_var01, #0 wz
291d4     2C 00 90 AD |  if_e	jmp	#LR__4033
291d8     0A 13 02 F6 | 	mov	arg01, arg02
291dc     01 12 06 F5 | 	and	arg01, #1
291e0     01 16 06 F1 | 	add	arg03, #1
291e4     01 14 46 F0 | 	shr	arg02, #1
291e8     00 03 02 F6 | 	mov	_var02, _var01
291ec     01 02 06 F5 | 	and	_var02, #1
291f0     1F 02 66 F0 | 	shl	_var02, #31
291f4     01 15 42 F5 | 	or	arg02, _var02
291f8     09 15 42 F5 | 	or	arg02, arg01
291fc     01 00 46 F0 | 	shr	_var01, #1
29200     C4 FF 9F FD | 	jmp	#LR__4031
29204                 | LR__4032
29204                 | LR__4033
29204     00 16 56 F2 | 	cmps	arg03, #0 wc
29208     18 00 90 3D |  if_ae	jmp	#LR__4035
2920c     00 14 0E F2 | 	cmp	arg02, #0 wz
29210     6F 14 62 FD | 	wrnz	arg02
29214     0C 00 90 FD | 	jmp	#LR__4035
29218                 | LR__4034
29218     17 01 06 F4 | 	bitl	_var01, #279
2921c     17 16 66 F0 | 	shl	arg03, #23
29220     0B 01 42 F5 | 	or	_var01, arg03
29224                 | LR__4035
29224                 | LR__4036
29224                 | LR__4037
29224                 | LR__4038
29224                 | LR__4039
29224     01 00 CE F7 | 	test	_var01, #1 wz
29228     01 14 46 55 |  if_ne	or	arg02, #1
2922c     0A 17 02 F6 | 	mov	arg03, arg02
29230     00 02 06 F6 | 	mov	_var02, #0
29234     FF FF 3F FF 
29238     FF 15 06 F1 | 	add	arg02, ##2147483647
2923c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
29240     01 02 06 C6 |  if_b	mov	_var02, #1
29244     01 01 02 F1 | 	add	_var01, _var02
29248     01 18 CE F7 | 	test	arg04, #1 wz
2924c     1F 00 26 54 |  if_ne	bith	_var01, #31
29250     00 FB 01 F6 | 	mov	result1, _var01
29254                 | __system__pack_0630_ret
29254     2D 00 64 FD | 	ret
29258                 | 
29258                 | __system___rxtxioctl_0720
29258     00 15 0E F2 | 	cmp	arg02, #256 wz
2925c     0C 00 90 AD |  if_e	jmp	#LR__4040
29260     01 15 0E F2 | 	cmp	arg02, #257 wz
29264     1C 00 90 AD |  if_e	jmp	#LR__4041
29268     30 00 90 FD | 	jmp	#LR__4042
2926c                 | LR__4040
2926c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
29270     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
29274     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
29278     0B FB 61 FC | 	wrlong	result1, arg03
2927c     00 FA 05 F6 | 	mov	result1, #0
29280     28 00 90 FD | 	jmp	#LR__4043
29284                 | LR__4041
29284     0B 13 02 FB | 	rdlong	arg01, arg03
29288     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2928c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29290     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
29294     00 FA 05 F6 | 	mov	result1, #0
29298     10 00 90 FD | 	jmp	#LR__4043
2929c                 | LR__4042
2929c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
292a0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
292a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
292a8     01 FA 65 F6 | 	neg	result1, #1
292ac                 | LR__4043
292ac                 | __system___rxtxioctl_0720_ret
292ac     2D 00 64 FD | 	ret
292b0                 | 
292b0                 | __system____dummy_flush_0721
292b0     00 FA 05 F6 | 	mov	result1, #0
292b4                 | __system____dummy_flush_0721_ret
292b4     2D 00 64 FD | 	ret
292b8                 | 
292b8                 | __system___vfswrite
292b8     09 4A 05 F6 | 	mov	COUNT_, #9
292bc     A8 00 A0 FD | 	call	#pushregs_
292c0     09 27 02 F6 | 	mov	local01, arg01
292c4     0A 29 02 F6 | 	mov	local02, arg02
292c8     0B 2B 02 F6 | 	mov	local03, arg03
292cc     14 2D 02 F6 | 	mov	local04, local02
292d0     08 26 06 F1 | 	add	local01, #8
292d4     13 13 02 FB | 	rdlong	arg01, local01
292d8     08 26 86 F1 | 	sub	local01, #8
292dc     02 12 CE F7 | 	test	arg01, #2 wz
292e0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
292e4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
292e8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
292ec     01 FA 65 A6 |  if_e	neg	result1, #1
292f0     80 01 90 AD |  if_e	jmp	#LR__4056
292f4     08 26 06 F1 | 	add	local01, #8
292f8     13 FB 01 FB | 	rdlong	result1, local01
292fc     08 26 86 F1 | 	sub	local01, #8
29300     40 FA CD F7 | 	test	result1, #64 wz
29304     68 00 90 AD |  if_e	jmp	#LR__4051
29308     08 26 06 F1 | 	add	local01, #8
2930c     13 15 02 FB | 	rdlong	arg02, local01
29310     08 26 86 F1 | 	sub	local01, #8
29314     80 14 CE F7 | 	test	arg02, #128 wz
29318     54 00 90 AD |  if_e	jmp	#LR__4050
2931c     30 26 06 F1 | 	add	local01, #48
29320     13 2F 02 FB | 	rdlong	local05, local01
29324     17 31 02 F6 | 	mov	local06, local05
29328     30 26 86 F1 | 	sub	local01, #48
2932c     13 30 46 F7 | 	zerox	local06, #19
29330     14 2E 46 F0 | 	shr	local05, #20
29334     02 2E 66 F0 | 	shl	local05, #2
29338     ED 2E 02 F1 | 	add	local05, __methods__
2933c     17 2F 02 FB | 	rdlong	local05, local05
29340     13 13 02 F6 | 	mov	arg01, local01
29344     00 14 06 F6 | 	mov	arg02, #0
29348     02 16 06 F6 | 	mov	arg03, #2
2934c     F2 32 02 F6 | 	mov	local07, objptr
29350     18 E5 01 F6 | 	mov	objptr, local06
29354     2D 2E 62 FD | 	call	local05
29358     19 E5 01 F6 | 	mov	objptr, local07
2935c     08 26 06 F1 | 	add	local01, #8
29360     13 33 02 FB | 	rdlong	local07, local01
29364     80 32 26 F5 | 	andn	local07, #128
29368     13 33 62 FC | 	wrlong	local07, local01
2936c     08 26 86 F1 | 	sub	local01, #8
29370                 | LR__4050
29370                 | LR__4051
29370     18 26 06 F1 | 	add	local01, #24
29374     13 33 0A FB | 	rdlong	local07, local01 wz
29378     18 26 86 F1 | 	sub	local01, #24
2937c     80 00 90 AD |  if_e	jmp	#LR__4053
29380     18 26 06 F1 | 	add	local01, #24
29384     13 2F 02 FB | 	rdlong	local05, local01
29388     17 31 02 F6 | 	mov	local06, local05
2938c     18 26 86 F1 | 	sub	local01, #24
29390     13 30 46 F7 | 	zerox	local06, #19
29394     14 2E 46 F0 | 	shr	local05, #20
29398     02 2E 66 F0 | 	shl	local05, #2
2939c     ED 2E 02 F1 | 	add	local05, __methods__
293a0     17 2F 02 FB | 	rdlong	local05, local05
293a4     14 15 02 F6 | 	mov	arg02, local02
293a8     15 17 02 F6 | 	mov	arg03, local03
293ac     13 13 02 F6 | 	mov	arg01, local01
293b0     F2 32 02 F6 | 	mov	local07, objptr
293b4     18 E5 01 F6 | 	mov	objptr, local06
293b8     2D 2E 62 FD | 	call	local05
293bc     19 E5 01 F6 | 	mov	objptr, local07
293c0     FD 34 02 F6 | 	mov	local08, result1
293c4     00 34 56 F2 | 	cmps	local08, #0 wc
293c8     2C 00 90 3D |  if_ae	jmp	#LR__4052
293cc     08 26 06 F1 | 	add	local01, #8
293d0     13 33 02 FB | 	rdlong	local07, local01
293d4     20 32 46 F5 | 	or	local07, #32
293d8     13 33 62 FC | 	wrlong	local07, local01
293dc     00 34 4E F2 | 	cmps	local08, #0 wz
293e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
293e4     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
293e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
293ec     01 FA 65 56 |  if_ne	neg	result1, #1
293f0     00 FA 05 A6 |  if_e	mov	result1, #0
293f4     7C 00 90 FD | 	jmp	#LR__4056
293f8                 | LR__4052
293f8     1A FB 01 F6 | 	mov	result1, local08
293fc     74 00 90 FD | 	jmp	#LR__4056
29400                 | LR__4053
29400     1C 26 06 F1 | 	add	local01, #28
29404     13 37 0A FB | 	rdlong	local09, local01 wz
29408     1C 26 86 F1 | 	sub	local01, #28
2940c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29410     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
29414     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29418     01 FA 65 A6 |  if_e	neg	result1, #1
2941c     54 00 90 AD |  if_e	jmp	#LR__4056
29420     00 34 06 F6 | 	mov	local08, #0
29424                 | LR__4054
29424     01 2A 16 F2 | 	cmp	local03, #1 wc
29428     44 00 90 CD |  if_b	jmp	#LR__4055
2942c     1B 31 02 F6 | 	mov	local06, local09
29430     1B 2F 02 F6 | 	mov	local05, local09
29434     13 30 46 F7 | 	zerox	local06, #19
29438     14 2E 46 F0 | 	shr	local05, #20
2943c     02 2E 66 F0 | 	shl	local05, #2
29440     ED 2E 02 F1 | 	add	local05, __methods__
29444     17 2F 02 FB | 	rdlong	local05, local05
29448     16 13 C2 FA | 	rdbyte	arg01, local04
2944c     13 15 02 F6 | 	mov	arg02, local01
29450     F2 32 02 F6 | 	mov	local07, objptr
29454     18 E5 01 F6 | 	mov	objptr, local06
29458     01 2C 06 F1 | 	add	local04, #1
2945c     2D 2E 62 FD | 	call	local05
29460     19 E5 01 F6 | 	mov	objptr, local07
29464     FD 34 02 F1 | 	add	local08, result1
29468     01 2A 86 F1 | 	sub	local03, #1
2946c     B4 FF 9F FD | 	jmp	#LR__4054
29470                 | LR__4055
29470     1A FB 01 F6 | 	mov	result1, local08
29474                 | LR__4056
29474     A7 F0 03 F6 | 	mov	ptra, fp
29478     B2 00 A0 FD | 	call	#popregs_
2947c                 | __system___vfswrite_ret
2947c     2D 00 64 FD | 	ret
29480                 | 
29480                 | __system___vfsread
29480     03 4A 05 F6 | 	mov	COUNT_, #3
29484     A8 00 A0 FD | 	call	#pushregs_
29488     28 F0 07 F1 | 	add	ptra, #40
2948c     04 4E 05 F1 | 	add	fp, #4
29490     A7 12 62 FC | 	wrlong	arg01, fp
29494     04 4E 05 F1 | 	add	fp, #4
29498     A7 14 62 FC | 	wrlong	arg02, fp
2949c     04 4E 05 F1 | 	add	fp, #4
294a0     A7 16 62 FC | 	wrlong	arg03, fp
294a4     04 4E 85 F1 | 	sub	fp, #4
294a8     A7 FA 01 FB | 	rdlong	result1, fp
294ac     14 4E 05 F1 | 	add	fp, #20
294b0     A7 FA 61 FC | 	wrlong	result1, fp
294b4     04 4E 05 F1 | 	add	fp, #4
294b8     A7 00 68 FC | 	wrlong	#0, fp
294bc     1C 4E 85 F1 | 	sub	fp, #28
294c0     A7 12 02 FB | 	rdlong	arg01, fp
294c4     04 4E 85 F1 | 	sub	fp, #4
294c8     08 12 06 F1 | 	add	arg01, #8
294cc     09 FB 01 FB | 	rdlong	result1, arg01
294d0     01 FA CD F7 | 	test	result1, #1 wz
294d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
294d8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
294dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
294e0     01 FA 65 A6 |  if_e	neg	result1, #1
294e4     74 02 90 AD |  if_e	jmp	#LR__4066
294e8     04 4E 05 F1 | 	add	fp, #4
294ec     A7 12 02 FB | 	rdlong	arg01, fp
294f0     04 4E 85 F1 | 	sub	fp, #4
294f4     14 12 06 F1 | 	add	arg01, #20
294f8     09 FB 09 FB | 	rdlong	result1, arg01 wz
294fc     B8 00 90 AD |  if_e	jmp	#LR__4061
29500     04 4E 05 F1 | 	add	fp, #4
29504     A7 12 02 FB | 	rdlong	arg01, fp
29508     09 17 02 F6 | 	mov	arg03, arg01
2950c     14 16 06 F1 | 	add	arg03, #20
29510     0B 27 02 FB | 	rdlong	local01, arg03
29514     13 29 02 F6 | 	mov	local02, local01
29518     13 26 46 F7 | 	zerox	local01, #19
2951c     14 28 46 F0 | 	shr	local02, #20
29520     02 28 66 F0 | 	shl	local02, #2
29524     ED 28 02 F1 | 	add	local02, __methods__
29528     14 29 02 FB | 	rdlong	local02, local02
2952c     04 4E 05 F1 | 	add	fp, #4
29530     A7 14 02 FB | 	rdlong	arg02, fp
29534     04 4E 05 F1 | 	add	fp, #4
29538     A7 16 02 FB | 	rdlong	arg03, fp
2953c     0C 4E 85 F1 | 	sub	fp, #12
29540     F2 2A 02 F6 | 	mov	local03, objptr
29544     13 E5 01 F6 | 	mov	objptr, local01
29548     2D 28 62 FD | 	call	local02
2954c     15 E5 01 F6 | 	mov	objptr, local03
29550     10 4E 05 F1 | 	add	fp, #16
29554     A7 FA 61 FC | 	wrlong	result1, fp
29558     10 4E 85 F1 | 	sub	fp, #16
2955c     00 FA 55 F2 | 	cmps	result1, #0 wc
29560     44 00 90 3D |  if_ae	jmp	#LR__4060
29564     04 4E 05 F1 | 	add	fp, #4
29568     A7 2A 02 FB | 	rdlong	local03, fp
2956c     15 27 02 F6 | 	mov	local01, local03
29570     08 2A 06 F1 | 	add	local03, #8
29574     15 29 02 FB | 	rdlong	local02, local03
29578     20 28 46 F5 | 	or	local02, #32
2957c     08 26 06 F1 | 	add	local01, #8
29580     13 29 62 FC | 	wrlong	local02, local01
29584     0C 4E 05 F1 | 	add	fp, #12
29588     A7 12 0A FB | 	rdlong	arg01, fp wz
2958c     10 4E 85 F1 | 	sub	fp, #16
29590     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29594     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29598     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2959c     01 FA 65 56 |  if_ne	neg	result1, #1
295a0     00 FA 05 A6 |  if_e	mov	result1, #0
295a4     B4 01 90 FD | 	jmp	#LR__4066
295a8                 | LR__4060
295a8     10 4E 05 F1 | 	add	fp, #16
295ac     A7 FA 01 FB | 	rdlong	result1, fp
295b0     10 4E 85 F1 | 	sub	fp, #16
295b4     A4 01 90 FD | 	jmp	#LR__4066
295b8                 | LR__4061
295b8     04 4E 05 F1 | 	add	fp, #4
295bc     A7 12 02 FB | 	rdlong	arg01, fp
295c0     20 12 06 F1 | 	add	arg01, #32
295c4     09 13 0A FB | 	rdlong	arg01, arg01 wz
295c8     14 4E 05 F1 | 	add	fp, #20
295cc     A7 12 62 FC | 	wrlong	arg01, fp
295d0     18 4E 85 F1 | 	sub	fp, #24
295d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
295d8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
295dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
295e0     01 FA 65 A6 |  if_e	neg	result1, #1
295e4     74 01 90 AD |  if_e	jmp	#LR__4066
295e8     04 4E 05 F1 | 	add	fp, #4
295ec     A7 2A 02 FB | 	rdlong	local03, fp
295f0     04 4E 85 F1 | 	sub	fp, #4
295f4     28 2A 06 F1 | 	add	local03, #40
295f8     15 29 0A FB | 	rdlong	local02, local03 wz
295fc     7C 00 90 AD |  if_e	jmp	#LR__4063
29600     04 4E 05 F1 | 	add	fp, #4
29604     A7 12 02 FB | 	rdlong	arg01, fp
29608     09 2B 02 F6 | 	mov	local03, arg01
2960c     28 2A 06 F1 | 	add	local03, #40
29610     15 27 02 FB | 	rdlong	local01, local03
29614     13 29 02 F6 | 	mov	local02, local01
29618     13 26 46 F7 | 	zerox	local01, #19
2961c     14 28 46 F0 | 	shr	local02, #20
29620     02 28 66 F0 | 	shl	local02, #2
29624     ED 28 02 F1 | 	add	local02, __methods__
29628     14 29 02 FB | 	rdlong	local02, local02
2962c     20 4E 05 F1 | 	add	fp, #32
29630     A7 16 02 F6 | 	mov	arg03, fp
29634     24 4E 85 F1 | 	sub	fp, #36
29638     00 15 06 F6 | 	mov	arg02, #256
2963c     F2 2A 02 F6 | 	mov	local03, objptr
29640     13 E5 01 F6 | 	mov	objptr, local01
29644     2D 28 62 FD | 	call	local02
29648     15 E5 01 F6 | 	mov	objptr, local03
2964c     10 4E 05 F1 | 	add	fp, #16
29650     A7 FA 61 FC | 	wrlong	result1, fp
29654     00 FA 4D F2 | 	cmps	result1, #0 wz
29658     10 4E 85 F1 | 	sub	fp, #16
2965c     1C 00 90 5D |  if_ne	jmp	#LR__4062
29660     24 4E 05 F1 | 	add	fp, #36
29664     A7 28 02 FB | 	rdlong	local02, fp
29668     24 4E 85 F1 | 	sub	fp, #36
2966c     02 28 CE F7 | 	test	local02, #2 wz
29670     20 4E 05 51 |  if_ne	add	fp, #32
29674     A7 02 68 5C |  if_ne	wrlong	#1, fp
29678     20 4E 85 51 |  if_ne	sub	fp, #32
2967c                 | LR__4062
2967c                 | LR__4063
2967c     10 4E 05 F1 | 	add	fp, #16
29680     A7 00 68 FC | 	wrlong	#0, fp
29684     10 4E 85 F1 | 	sub	fp, #16
29688                 | LR__4064
29688     0C 4E 05 F1 | 	add	fp, #12
2968c     A7 2A 02 FB | 	rdlong	local03, fp
29690     0C 4E 85 F1 | 	sub	fp, #12
29694     01 2A 16 F2 | 	cmp	local03, #1 wc
29698     B4 00 90 CD |  if_b	jmp	#LR__4065
2969c     18 4E 05 F1 | 	add	fp, #24
296a0     A7 28 02 FB | 	rdlong	local02, fp
296a4     14 2B 02 F6 | 	mov	local03, local02
296a8     13 2A 46 F7 | 	zerox	local03, #19
296ac     14 28 46 F0 | 	shr	local02, #20
296b0     02 28 66 F0 | 	shl	local02, #2
296b4     ED 28 02 F1 | 	add	local02, __methods__
296b8     14 29 02 FB | 	rdlong	local02, local02
296bc     14 4E 85 F1 | 	sub	fp, #20
296c0     A7 12 02 FB | 	rdlong	arg01, fp
296c4     04 4E 85 F1 | 	sub	fp, #4
296c8     F2 26 02 F6 | 	mov	local01, objptr
296cc     15 E5 01 F6 | 	mov	objptr, local03
296d0     2D 28 62 FD | 	call	local02
296d4     13 E5 01 F6 | 	mov	objptr, local01
296d8     14 4E 05 F1 | 	add	fp, #20
296dc     A7 FA 61 FC | 	wrlong	result1, fp
296e0     14 4E 85 F1 | 	sub	fp, #20
296e4     00 FA 55 F2 | 	cmps	result1, #0 wc
296e8     64 00 90 CD |  if_b	jmp	#LR__4065
296ec     1C 4E 05 F1 | 	add	fp, #28
296f0     A7 2A 02 FB | 	rdlong	local03, fp
296f4     15 29 02 F6 | 	mov	local02, local03
296f8     01 28 06 F1 | 	add	local02, #1
296fc     A7 28 62 FC | 	wrlong	local02, fp
29700     08 4E 85 F1 | 	sub	fp, #8
29704     A7 28 02 FB | 	rdlong	local02, fp
29708     15 29 42 FC | 	wrbyte	local02, local03
2970c     04 4E 85 F1 | 	sub	fp, #4
29710     A7 2A 02 FB | 	rdlong	local03, fp
29714     01 2A 06 F1 | 	add	local03, #1
29718     A7 2A 62 FC | 	wrlong	local03, fp
2971c     04 4E 85 F1 | 	sub	fp, #4
29720     A7 2A 02 FB | 	rdlong	local03, fp
29724     01 2A 86 F1 | 	sub	local03, #1
29728     A7 2A 62 FC | 	wrlong	local03, fp
2972c     14 4E 05 F1 | 	add	fp, #20
29730     A7 2A 0A FB | 	rdlong	local03, fp wz
29734     20 4E 85 F1 | 	sub	fp, #32
29738     4C FF 9F AD |  if_e	jmp	#LR__4064
2973c     14 4E 05 F1 | 	add	fp, #20
29740     A7 28 02 FB | 	rdlong	local02, fp
29744     14 4E 85 F1 | 	sub	fp, #20
29748     0A 28 0E F2 | 	cmp	local02, #10 wz
2974c     38 FF 9F 5D |  if_ne	jmp	#LR__4064
29750                 | LR__4065
29750     10 4E 05 F1 | 	add	fp, #16
29754     A7 FA 01 FB | 	rdlong	result1, fp
29758     10 4E 85 F1 | 	sub	fp, #16
2975c                 | LR__4066
2975c     A7 F0 03 F6 | 	mov	ptra, fp
29760     B2 00 A0 FD | 	call	#popregs_
29764                 | __system___vfsread_ret
29764     2D 00 64 FD | 	ret
29768                 | 
29768                 | __system____default_filbuf
29768     04 4A 05 F6 | 	mov	COUNT_, #4
2976c     A8 00 A0 FD | 	call	#pushregs_
29770     09 27 02 F6 | 	mov	local01, arg01
29774     13 29 02 FB | 	rdlong	local02, local01
29778     0C 28 06 F1 | 	add	local02, #12
2977c     14 FB 09 FB | 	rdlong	result1, local02 wz
29780     0C 28 86 F1 | 	sub	local02, #12
29784     20 00 90 5D |  if_ne	jmp	#LR__4070
29788     14 28 06 F1 | 	add	local02, #20
2978c     14 FB 01 F6 | 	mov	result1, local02
29790     04 28 86 F1 | 	sub	local02, #4
29794     14 FB 61 FC | 	wrlong	result1, local02
29798     04 28 86 F1 | 	sub	local02, #4
2979c     02 00 80 FF 
297a0     14 01 68 FC | 	wrlong	##1024, local02
297a4     0C 28 86 F1 | 	sub	local02, #12
297a8                 | LR__4070
297a8     14 26 06 F1 | 	add	local01, #20
297ac     13 2B 02 FB | 	rdlong	local03, local01
297b0     15 2D 02 F6 | 	mov	local04, local03
297b4     14 26 86 F1 | 	sub	local01, #20
297b8     13 2C 46 F7 | 	zerox	local04, #19
297bc     14 2A 46 F0 | 	shr	local03, #20
297c0     02 2A 66 F0 | 	shl	local03, #2
297c4     ED 2A 02 F1 | 	add	local03, __methods__
297c8     15 2B 02 FB | 	rdlong	local03, local03
297cc     10 28 06 F1 | 	add	local02, #16
297d0     14 15 02 FB | 	rdlong	arg02, local02
297d4     04 28 86 F1 | 	sub	local02, #4
297d8     14 17 02 FB | 	rdlong	arg03, local02
297dc     0C 28 86 F1 | 	sub	local02, #12
297e0     13 13 02 F6 | 	mov	arg01, local01
297e4     F2 26 02 F6 | 	mov	local01, objptr
297e8     16 E5 01 F6 | 	mov	objptr, local04
297ec     2D 2A 62 FD | 	call	local03
297f0     13 E5 01 F6 | 	mov	objptr, local01
297f4     FD 2C 02 F6 | 	mov	local04, result1
297f8     00 2C 56 F2 | 	cmps	local04, #0 wc
297fc     01 FA 65 C6 |  if_b	neg	result1, #1
29800     28 00 90 CD |  if_b	jmp	#LR__4071
29804     14 2D 62 FC | 	wrlong	local04, local02
29808     10 28 06 F1 | 	add	local02, #16
2980c     14 2B 02 FB | 	rdlong	local03, local02
29810     0C 28 86 F1 | 	sub	local02, #12
29814     14 2B 62 FC | 	wrlong	local03, local02
29818     04 28 06 F1 | 	add	local02, #4
2981c     14 2B 02 FB | 	rdlong	local03, local02
29820     01 2A 46 F5 | 	or	local03, #1
29824     14 2B 62 FC | 	wrlong	local03, local02
29828     16 FB 01 F6 | 	mov	result1, local04
2982c                 | LR__4071
2982c     A7 F0 03 F6 | 	mov	ptra, fp
29830     B2 00 A0 FD | 	call	#popregs_
29834                 | __system____default_filbuf_ret
29834     2D 00 64 FD | 	ret
29838                 | 
29838                 | __system__getlower_1110
29838     41 12 56 F2 | 	cmps	arg01, #65 wc
2983c     10 00 90 CD |  if_b	jmp	#LR__4080
29840     5B 12 56 F2 | 	cmps	arg01, #91 wc
29844     09 FB 01 C6 |  if_b	mov	result1, arg01
29848     20 FA 05 C1 |  if_b	add	result1, #32
2984c     04 00 90 CD |  if_b	jmp	#__system__getlower_1110_ret
29850                 | LR__4080
29850     09 FB 01 F6 | 	mov	result1, arg01
29854                 | __system__getlower_1110_ret
29854     2D 00 64 FD | 	ret
29858                 | 
29858                 | __system___pat_match
29858     08 4A 05 F6 | 	mov	COUNT_, #8
2985c     A8 00 A0 FD | 	call	#pushregs_
29860     09 27 02 F6 | 	mov	local01, arg01
29864                 | LR__4090
29864     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
29868     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2986c     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
29870     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
29874     2C 00 90 AD |  if_e	jmp	#LR__4091
29878     0A 13 C2 FA | 	rdbyte	arg01, arg02
2987c     B8 FF BF FD | 	call	#__system__getlower_1110
29880     FD 2A 02 F6 | 	mov	local03, result1
29884     13 13 C2 FA | 	rdbyte	arg01, local01
29888     AC FF BF FD | 	call	#__system__getlower_1110
2988c     15 FB 09 F2 | 	cmp	result1, local03 wz
29890     00 FA 05 56 |  if_ne	mov	result1, #0
29894     FC 00 90 5D |  if_ne	jmp	#LR__4099
29898     01 26 06 F1 | 	add	local01, #1
2989c     01 14 06 F1 | 	add	arg02, #1
298a0     C0 FF 9F FD | 	jmp	#LR__4090
298a4                 | LR__4091
298a4     0A 2B C2 FA | 	rdbyte	local03, arg02
298a8     2A 2A 0E F2 | 	cmp	local03, #42 wz
298ac     D4 00 90 5D |  if_ne	jmp	#LR__4098
298b0     01 14 06 F1 | 	add	arg02, #1
298b4     0A 29 C2 FA | 	rdbyte	local02, arg02
298b8     01 14 86 F1 | 	sub	arg02, #1
298bc     2E 28 0E F2 | 	cmp	local02, #46 wz
298c0     28 00 90 5D |  if_ne	jmp	#LR__4092
298c4     02 14 06 F1 | 	add	arg02, #2
298c8     0A 29 C2 FA | 	rdbyte	local02, arg02
298cc     02 14 86 F1 | 	sub	arg02, #2
298d0     2A 28 0E F2 | 	cmp	local02, #42 wz
298d4     03 14 06 A1 |  if_e	add	arg02, #3
298d8     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
298dc     03 14 86 A1 |  if_e	sub	arg02, #3
298e0     16 2F 0A A6 |  if_e	mov	local05, local04 wz
298e4     01 FA 05 A6 |  if_e	mov	result1, #1
298e8     A8 00 90 AD |  if_e	jmp	#LR__4099
298ec                 | LR__4092
298ec     01 14 06 F1 | 	add	arg02, #1
298f0     00 30 06 F6 | 	mov	local06, #0
298f4     97 1E 48 FB | 	callpa	#(@LR__4095-@LR__4093)>>2,fcache_load_ptr_
298f8                 | LR__4093
298f8     18 33 02 F6 | 	mov	local07, local06
298fc     0A 33 02 F1 | 	add	local07, arg02
29900     19 33 CA FA | 	rdbyte	local07, local07 wz
29904     18 2F 02 56 |  if_ne	mov	local05, local06
29908     01 2E 06 51 |  if_ne	add	local05, #1
2990c     17 31 02 56 |  if_ne	mov	local06, local05
29910     E4 FF 9F 5D |  if_ne	jmp	#LR__4093
29914     00 34 06 F6 | 	mov	local08, #0
29918                 | LR__4094
29918     1A 33 02 F6 | 	mov	local07, local08
2991c     13 33 02 F1 | 	add	local07, local01
29920     19 33 CA FA | 	rdbyte	local07, local07 wz
29924     1A 2F 02 56 |  if_ne	mov	local05, local08
29928     01 2E 06 51 |  if_ne	add	local05, #1
2992c     17 35 02 56 |  if_ne	mov	local08, local05
29930     E4 FF 9F 5D |  if_ne	jmp	#LR__4094
29934                 | LR__4095
29934     18 35 52 F2 | 	cmps	local08, local06 wc
29938     00 FA 05 C6 |  if_b	mov	result1, #0
2993c     54 00 90 CD |  if_b	jmp	#LR__4099
29940     1A 29 02 F6 | 	mov	local02, local08
29944     18 29 82 F1 | 	sub	local02, local06
29948     14 27 02 F1 | 	add	local01, local02
2994c                 | LR__4096
2994c     01 30 56 F2 | 	cmps	local06, #1 wc
29950     30 00 90 CD |  if_b	jmp	#LR__4097
29954     13 13 C2 FA | 	rdbyte	arg01, local01
29958     DC FE BF FD | 	call	#__system__getlower_1110
2995c     FD 34 02 F6 | 	mov	local08, result1
29960     0A 13 C2 FA | 	rdbyte	arg01, arg02
29964     D0 FE BF FD | 	call	#__system__getlower_1110
29968     FD 34 0A F2 | 	cmp	local08, result1 wz
2996c     00 FA 05 56 |  if_ne	mov	result1, #0
29970     20 00 90 5D |  if_ne	jmp	#LR__4099
29974     01 26 06 F1 | 	add	local01, #1
29978     01 14 06 F1 | 	add	arg02, #1
2997c     01 30 86 F1 | 	sub	local06, #1
29980     C8 FF 9F FD | 	jmp	#LR__4096
29984                 | LR__4097
29984                 | LR__4098
29984     0A 35 CA FA | 	rdbyte	local08, arg02 wz
29988     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2998c     01 FA 05 A6 |  if_e	mov	result1, #1
29990     00 FA 05 56 |  if_ne	mov	result1, #0
29994                 | LR__4099
29994     A7 F0 03 F6 | 	mov	ptra, fp
29998     B2 00 A0 FD | 	call	#popregs_
2999c                 | __system___pat_match_ret
2999c     2D 00 64 FD | 	ret
299a0                 | 
299a0                 | _fatfs_cc_ff_uni2oem
299a0     00 00 06 F6 | 	mov	_var01, #0
299a4     80 12 16 F2 | 	cmp	arg01, #128 wc
299a8     09 01 02 C6 |  if_b	mov	_var01, arg01
299ac     58 00 90 CD |  if_b	jmp	#LR__4104
299b0     80 00 00 FF 
299b4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
299b8     4C 00 90 3D |  if_ae	jmp	#LR__4103
299bc     0A FB 31 F9 | 	getword	result1, arg02, #0
299c0     01 00 00 FF 
299c4     52 FB 0D F2 | 	cmp	result1, ##850 wz
299c8     3C 00 90 5D |  if_ne	jmp	#LR__4103
299cc                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
299cc     00 00 06 F6 | 	mov	_var01, #0
299d0     97 14 48 FB | 	callpa	#(@LR__4101-@LR__4100)>>2,fcache_load_ptr_
299d4                 | LR__4100
299d4     00 FB 31 F9 | 	getword	result1, _var01, #0
299d8     80 FA 15 F2 | 	cmp	result1, #128 wc
299dc     1C 00 90 3D |  if_ae	jmp	#LR__4102
299e0     00 FB 31 F9 | 	getword	result1, _var01, #0
299e4     01 FA 65 F0 | 	shl	result1, #1
299e8     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
299ec     FD FA E1 FA | 	rdword	result1, result1
299f0     FD 12 0A F2 | 	cmp	arg01, result1 wz
299f4     01 00 06 51 |  if_ne	add	_var01, #1
299f8     D8 FF 9F 5D |  if_ne	jmp	#LR__4100
299fc                 | LR__4101
299fc                 | LR__4102
299fc     00 01 32 F9 | 	getword	_var01, _var01, #0
29a00     80 00 06 F1 | 	add	_var01, #128
29a04     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29a08                 | LR__4103
29a08                 | LR__4104
29a08                 | ' 			c = (c + 0x80) & 0xFF;
29a08                 | ' 		}
29a08                 | ' 	}
29a08                 | ' 
29a08                 | ' 	return c;
29a08     00 FB 01 F6 | 	mov	result1, _var01
29a0c                 | _fatfs_cc_ff_uni2oem_ret
29a0c     2D 00 64 FD | 	ret
29a10                 | 
29a10                 | _fatfs_cc_ff_oem2uni
29a10     00 00 06 F6 | 	mov	_var01, #0
29a14     09 FB 31 F9 | 	getword	result1, arg01, #0
29a18     80 FA 15 F2 | 	cmp	result1, #128 wc
29a1c     09 01 02 C6 |  if_b	mov	_var01, arg01
29a20     2C 00 90 CD |  if_b	jmp	#LR__4111
29a24     0A 15 32 F9 | 	getword	arg02, arg02, #0
29a28     01 00 00 FF 
29a2c     52 15 0E F2 | 	cmp	arg02, ##850 wz
29a30     1C 00 90 5D |  if_ne	jmp	#LR__4110
29a34     09 FB 31 F9 | 	getword	result1, arg01, #0
29a38     00 FB 15 F2 | 	cmp	result1, #256 wc
29a3c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
29a40     80 12 86 C1 |  if_b	sub	arg01, #128
29a44     01 12 66 C0 |  if_b	shl	arg01, #1
29a48     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
29a4c     09 01 E2 CA |  if_b	rdword	_var01, arg01
29a50                 | LR__4110
29a50                 | LR__4111
29a50                 | ' 		}
29a50                 | ' 	}
29a50                 | ' 
29a50                 | ' 	return c;
29a50     00 FB 01 F6 | 	mov	result1, _var01
29a54                 | _fatfs_cc_ff_oem2uni_ret
29a54     2D 00 64 FD | 	ret
29a58                 | 
29a58                 | _fatfs_cc_ff_wtoupper
29a58     09 01 02 F6 | 	mov	_var01, arg01
29a5c     80 00 00 FF 
29a60     00 00 16 F2 | 	cmp	_var01, ##65536 wc
29a64     60 01 90 3D |  if_ae	jmp	#LR__4133
29a68     00 03 02 F6 | 	mov	_var02, _var01
29a6c     01 01 32 F9 | 	getword	_var01, _var02, #0
29a70     08 00 00 FF 
29a74     00 00 16 F2 | 	cmp	_var01, ##4096 wc
29a78     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
29a7c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
29a80     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
29a84     01 00 00 3F 
29a88     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
29a8c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
29a90     01 00 00 3F 
29a94     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
29a98     02 07 02 F6 | 	mov	_var04, _var03
29a9c                 | ' 		uc = (WORD)uni;
29a9c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
29a9c                 | ' 		for (;;) {
29a9c                 | LR__4120
29a9c     03 09 E2 FA | 	rdword	_var05, _var04
29aa0     04 05 02 F6 | 	mov	_var03, _var05
29aa4     0F 04 4E F7 | 	zerox	_var03, #15 wz
29aa8     02 06 06 F1 | 	add	_var04, #2
29aac     14 01 90 AD |  if_e	jmp	#LR__4132
29ab0     01 05 32 F9 | 	getword	_var03, _var02, #0
29ab4     04 01 32 F9 | 	getword	_var01, _var05, #0
29ab8     00 05 12 F2 | 	cmp	_var03, _var01 wc
29abc     04 01 90 CD |  if_b	jmp	#LR__4132
29ac0     03 0B E2 FA | 	rdword	_var06, _var04
29ac4     05 0D 32 F9 | 	getword	_var07, _var06, #0
29ac8     08 0C 46 F0 | 	shr	_var07, #8
29acc     05 0B 32 F9 | 	getword	_var06, _var06, #0
29ad0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
29ad4     01 05 32 F9 | 	getword	_var03, _var02, #0
29ad8     04 0F 32 F9 | 	getword	_var08, _var05, #0
29adc     05 01 32 F9 | 	getword	_var01, _var06, #0
29ae0     00 0F 02 F1 | 	add	_var08, _var01
29ae4     07 05 52 F2 | 	cmps	_var03, _var08 wc
29ae8     02 06 06 F1 | 	add	_var04, #2
29aec     C4 00 90 3D |  if_ae	jmp	#LR__4131
29af0                 | ' 				switch (cmd) {
29af0     06 11 32 F9 | 	getword	_var09, _var07, #0
29af4     09 10 26 F3 | 	fle	_var09, #9
29af8     30 10 62 FD | 	jmprel	_var09
29afc                 | LR__4121
29afc     24 00 90 FD | 	jmp	#LR__4122
29b00     3C 00 90 FD | 	jmp	#LR__4123
29b04     54 00 90 FD | 	jmp	#LR__4124
29b08     5C 00 90 FD | 	jmp	#LR__4125
29b0c     64 00 90 FD | 	jmp	#LR__4126
29b10     6C 00 90 FD | 	jmp	#LR__4127
29b14     74 00 90 FD | 	jmp	#LR__4128
29b18     7C 00 90 FD | 	jmp	#LR__4129
29b1c     84 00 90 FD | 	jmp	#LR__4130
29b20     A0 00 90 FD | 	jmp	#LR__4132
29b24                 | LR__4122
29b24     01 03 32 F9 | 	getword	_var02, _var02, #0
29b28     04 09 32 F9 | 	getword	_var05, _var05, #0
29b2c     04 03 82 F1 | 	sub	_var02, _var05
29b30     01 02 66 F0 | 	shl	_var02, #1
29b34     03 03 02 F1 | 	add	_var02, _var04
29b38     01 03 E2 FA | 	rdword	_var02, _var02
29b3c     84 00 90 FD | 	jmp	#LR__4132
29b40                 | LR__4123
29b40     01 05 32 F9 | 	getword	_var03, _var02, #0
29b44     01 03 32 F9 | 	getword	_var02, _var02, #0
29b48     04 09 32 F9 | 	getword	_var05, _var05, #0
29b4c     04 03 82 F1 | 	sub	_var02, _var05
29b50     01 02 06 F5 | 	and	_var02, #1
29b54     02 03 C2 F2 | 	subr	_var02, _var03
29b58     68 00 90 FD | 	jmp	#LR__4132
29b5c                 | LR__4124
29b5c     01 03 32 F9 | 	getword	_var02, _var02, #0
29b60     10 02 86 F1 | 	sub	_var02, #16
29b64     5C 00 90 FD | 	jmp	#LR__4132
29b68                 | LR__4125
29b68     01 03 32 F9 | 	getword	_var02, _var02, #0
29b6c     20 02 86 F1 | 	sub	_var02, #32
29b70     50 00 90 FD | 	jmp	#LR__4132
29b74                 | LR__4126
29b74     01 03 32 F9 | 	getword	_var02, _var02, #0
29b78     30 02 86 F1 | 	sub	_var02, #48
29b7c     44 00 90 FD | 	jmp	#LR__4132
29b80                 | LR__4127
29b80     01 03 32 F9 | 	getword	_var02, _var02, #0
29b84     1A 02 86 F1 | 	sub	_var02, #26
29b88     38 00 90 FD | 	jmp	#LR__4132
29b8c                 | LR__4128
29b8c     01 03 32 F9 | 	getword	_var02, _var02, #0
29b90     08 02 06 F1 | 	add	_var02, #8
29b94     2C 00 90 FD | 	jmp	#LR__4132
29b98                 | LR__4129
29b98     01 03 32 F9 | 	getword	_var02, _var02, #0
29b9c     50 02 86 F1 | 	sub	_var02, #80
29ba0     20 00 90 FD | 	jmp	#LR__4132
29ba4                 | LR__4130
29ba4     01 03 32 F9 | 	getword	_var02, _var02, #0
29ba8     0E 00 00 FF 
29bac     60 02 86 F1 | 	sub	_var02, ##7264
29bb0                 | ' 				}
29bb0                 | ' 				break;
29bb0     10 00 90 FD | 	jmp	#LR__4132
29bb4                 | LR__4131
29bb4     0F 0C 4E F7 | 	zerox	_var07, #15 wz
29bb8     02 0A 06 AA |  if_e	mul	_var06, #2
29bbc     05 07 02 A1 |  if_e	add	_var04, _var06
29bc0     D8 FE 9F FD | 	jmp	#LR__4120
29bc4                 | LR__4132
29bc4     01 01 32 F9 | 	getword	_var01, _var02, #0
29bc8                 | LR__4133
29bc8                 | ' 		}
29bc8                 | ' 		uni = uc;
29bc8                 | ' 	}
29bc8                 | ' 
29bc8                 | ' 	return uni;
29bc8     00 FB 01 F6 | 	mov	result1, _var01
29bcc                 | _fatfs_cc_ff_wtoupper_ret
29bcc     2D 00 64 FD | 	ret
29bd0                 | 
29bd0                 | _fatfs_cc_strncpy
29bd0     09 01 02 F6 | 	mov	_var01, arg01
29bd4     97 12 48 FB | 	callpa	#(@LR__4141-@LR__4140)>>2,fcache_load_ptr_
29bd8                 | ' 
29bd8                 | ' 	dscan = dst;
29bd8                 | ' 	sscan = src;
29bd8                 | ' 	count = n;
29bd8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
29bd8                 | LR__4140
29bd8     01 16 86 F1 | 	sub	arg03, #1
29bdc     00 16 56 F2 | 	cmps	arg03, #0 wc
29be0     18 00 90 CD |  if_b	jmp	#LR__4142
29be4     0A FB C1 FA | 	rdbyte	result1, arg02
29be8     00 FB 41 FC | 	wrbyte	result1, _var01
29bec     01 14 06 F1 | 	add	arg02, #1
29bf0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
29bf4                 | ' 		continue;
29bf4     01 00 06 F1 | 	add	_var01, #1
29bf8     DC FF 9F 5D |  if_ne	jmp	#LR__4140
29bfc                 | LR__4141
29bfc                 | LR__4142
29bfc     97 0C 48 FB | 	callpa	#(@LR__4144-@LR__4143)>>2,fcache_load_ptr_
29c00                 | ' 	while (--count >= 0)
29c00                 | LR__4143
29c00     01 16 86 F1 | 	sub	arg03, #1
29c04     00 16 56 F2 | 	cmps	arg03, #0 wc
29c08     00 03 02 36 |  if_ae	mov	_var02, _var01
29c0c     01 00 06 31 |  if_ae	add	_var01, #1
29c10     01 01 48 3C |  if_ae	wrbyte	#0, _var02
29c14     E8 FF 9F 3D |  if_ae	jmp	#LR__4143
29c18                 | LR__4144
29c18                 | ' 		*dscan++ = '\0';
29c18                 | ' 	return(dst);
29c18     09 FB 01 F6 | 	mov	result1, arg01
29c1c                 | _fatfs_cc_strncpy_ret
29c1c     2D 00 64 FD | 	ret
29c20                 | 
29c20                 | _fatfs_cc_memcmp
29c20                 | ' 	for (n = size; n > 0; n--)
29c20     00 16 0E F2 | 	cmp	arg03, #0 wz
29c24     28 00 90 AD |  if_e	jmp	#LR__4151
29c28                 | LR__4150
29c28     09 01 C2 FA | 	rdbyte	_var01, arg01
29c2c     0A 03 C2 FA | 	rdbyte	_var02, arg02
29c30     01 01 0A F2 | 	cmp	_var01, _var02 wz
29c34     01 12 06 A1 |  if_e	add	arg01, #1
29c38     01 14 06 A1 |  if_e	add	arg02, #1
29c3c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
29c3c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
29c40     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
29c44     01 FB 81 51 |  if_ne	sub	result1, _var02
29c48     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
29c4c     F6 17 6E FB | 	djnz	arg03, #LR__4150
29c50                 | LR__4151
29c50                 | ' 
29c50                 | ' 	return(0);
29c50     00 FA 05 F6 | 	mov	result1, #0
29c54                 | _fatfs_cc_memcmp_ret
29c54     2D 00 64 FD | 	ret
29c58                 | 
29c58                 | _fatfs_cc_strncmp
29c58     09 01 0A F6 | 	mov	_var01, arg01 wz
29c5c     14 00 90 5D |  if_ne	jmp	#LR__4160
29c60                 | ' 		return scan2 ? -1 : 0;
29c60     00 14 0E F2 | 	cmp	arg02, #0 wz
29c64     01 02 66 56 |  if_ne	neg	_var02, #1
29c68     00 02 06 A6 |  if_e	mov	_var02, #0
29c6c     01 FB 01 F6 | 	mov	result1, _var02
29c70     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
29c74                 | LR__4160
29c74     00 14 0E F2 | 	cmp	arg02, #0 wz
29c78     01 FA 05 A6 |  if_e	mov	result1, #1
29c7c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
29c80     0B 05 02 F6 | 	mov	_var03, arg03
29c84     97 16 48 FB | 	callpa	#(@LR__4162-@LR__4161)>>2,fcache_load_ptr_
29c88                 | ' 	count = n;
29c88                 | ' 	do {
29c88                 | LR__4161
29c88     00 07 C2 FA | 	rdbyte	_var04, _var01
29c8c     0A 09 02 F6 | 	mov	_var05, arg02
29c90     04 0B C2 FA | 	rdbyte	_var06, _var05
29c94     01 04 86 F1 | 	sub	_var03, #1
29c98     00 04 56 F2 | 	cmps	_var03, #0 wc
29c9c     01 00 06 F1 | 	add	_var01, #1
29ca0     01 14 06 F1 | 	add	arg02, #1
29ca4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
29ca8     08 00 90 2D |  if_nc_and_z	jmp	#LR__4163
29cac     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
29cb0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4161
29cb4                 | LR__4162
29cb4                 | LR__4163
29cb4     00 04 56 F2 | 	cmps	_var03, #0 wc
29cb8                 | ' 		return(0);
29cb8     00 FA 05 C6 |  if_b	mov	result1, #0
29cbc     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
29cc0     05 07 0A F2 | 	cmp	_var04, _var06 wz
29cc4                 | ' 		return(0);
29cc4     00 FA 05 A6 |  if_e	mov	result1, #0
29cc8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
29ccc     00 06 0E F2 | 	cmp	_var04, #0 wz
29cd0                 | ' 		return(-1);
29cd0     01 FA 65 A6 |  if_e	neg	result1, #1
29cd4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
29cd8     00 0A 0E F2 | 	cmp	_var06, #0 wz
29cdc                 | ' 		return(1);
29cdc     01 FA 05 A6 |  if_e	mov	result1, #1
29ce0                 | ' 		return(c1 - c2);
29ce0     03 FB 01 56 |  if_ne	mov	result1, _var04
29ce4     05 FB 81 51 |  if_ne	sub	result1, _var06
29ce8                 | _fatfs_cc_strncmp_ret
29ce8     2D 00 64 FD | 	ret
29cec                 | 
29cec                 | _fatfs_cc_strchr
29cec                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
29cec                 | ' 	while ((c = *s++) != (char) charwanted)
29cec                 | LR__4170
29cec     09 01 02 F6 | 	mov	_var01, arg01
29cf0     00 03 C2 FA | 	rdbyte	_var02, _var01
29cf4     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
29cf8     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
29cfc     03 05 0A F2 | 	cmp	_var03, _var04 wz
29d00     01 12 06 F1 | 	add	arg01, #1
29d04     14 00 90 AD |  if_e	jmp	#LR__4171
29d08     01 05 02 F6 | 	mov	_var03, _var02
29d0c     07 04 4E F7 | 	zerox	_var03, #7 wz
29d10     00 FA 05 A6 |  if_e	mov	result1, #0
29d14     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
29d18     D0 FF 9F FD | 	jmp	#LR__4170
29d1c                 | LR__4171
29d1c                 | ' 	return((char *)--s);
29d1c     01 12 86 F1 | 	sub	arg01, #1
29d20     09 FB 01 F6 | 	mov	result1, arg01
29d24                 | _fatfs_cc_strchr_ret
29d24     2D 00 64 FD | 	ret
29d28                 | 
29d28                 | _fatfs_cc_disk_initialize
29d28     04 4A 05 F6 | 	mov	COUNT_, #4
29d2c     A8 00 A0 FD | 	call	#pushregs_
29d30     40 F0 07 F1 | 	add	ptra, #64
29d34     04 4E 05 F1 | 	add	fp, #4
29d38     A7 12 42 FC | 	wrbyte	arg01, fp
29d3c     01 00 00 FF 
29d40     14 E4 05 F1 | 	add	objptr, ##532
29d44     F2 18 02 FB | 	rdlong	arg04, objptr
29d48     2C 4E 05 F1 | 	add	fp, #44
29d4c     A7 18 62 FC | 	wrlong	arg04, fp
29d50     04 E4 85 F1 | 	sub	objptr, #4
29d54     F2 18 02 FB | 	rdlong	arg04, objptr
29d58     04 4E 05 F1 | 	add	fp, #4
29d5c     A7 18 62 FC | 	wrlong	arg04, fp
29d60     08 E4 05 F1 | 	add	objptr, #8
29d64     F2 18 02 FB | 	rdlong	arg04, objptr
29d68     04 4E 05 F1 | 	add	fp, #4
29d6c     A7 18 62 FC | 	wrlong	arg04, fp
29d70     04 E4 05 F1 | 	add	objptr, #4
29d74     F2 18 02 FB | 	rdlong	arg04, objptr
29d78     04 4E 05 F1 | 	add	fp, #4
29d7c     A7 18 62 FC | 	wrlong	arg04, fp
29d80     04 E4 05 F1 | 	add	objptr, #4
29d84     F2 02 48 FC | 	wrbyte	#1, objptr
29d88     01 00 00 FF 
29d8c     20 E4 85 F1 | 	sub	objptr, ##544
29d90     38 4E 85 F1 | 	sub	fp, #56
29d94     A7 18 CA FA | 	rdbyte	arg04, fp wz
29d98     04 4E 85 F1 | 	sub	fp, #4
29d9c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
29d9c                 | '             return RES_NOTRDY;
29d9c     03 FA 05 56 |  if_ne	mov	result1, #3
29da0     D8 05 90 5D |  if_ne	jmp	#LR__4198
29da4     13 00 00 FF 
29da8     10 13 06 F6 | 	mov	arg01, ##10000
29dac     44 95 BF FD | 	call	#__system___waitus
29db0     30 4E 05 F1 | 	add	fp, #48
29db4     A7 12 02 FB | 	rdlong	arg01, fp
29db8     09 01 08 FC | 	wrpin	#0, arg01
29dbc     04 4E 05 F1 | 	add	fp, #4
29dc0     A7 12 02 FB | 	rdlong	arg01, fp
29dc4     09 01 08 FC | 	wrpin	#0, arg01
29dc8     04 4E 05 F1 | 	add	fp, #4
29dcc     A7 12 02 FB | 	rdlong	arg01, fp
29dd0     09 01 08 FC | 	wrpin	#0, arg01
29dd4     04 4E 05 F1 | 	add	fp, #4
29dd8     A7 12 02 FB | 	rdlong	arg01, fp
29ddc     09 00 80 FF 
29de0     09 01 08 FC | 	wrpin	##4608, arg01
29de4     0C 4E 85 F1 | 	sub	fp, #12
29de8     A7 12 02 FB | 	rdlong	arg01, fp
29dec     59 12 62 FD | 	drvh	arg01
29df0     04 4E 05 F1 | 	add	fp, #4
29df4     A7 12 02 FB | 	rdlong	arg01, fp
29df8     59 12 62 FD | 	drvh	arg01
29dfc     04 4E 05 F1 | 	add	fp, #4
29e00     A7 12 02 FB | 	rdlong	arg01, fp
29e04     59 12 62 FD | 	drvh	arg01
29e08     04 4E 05 F1 | 	add	fp, #4
29e0c     A7 12 02 FB | 	rdlong	arg01, fp
29e10     59 12 62 FD | 	drvh	arg01
29e14     20 4E 85 F1 | 	sub	fp, #32
29e18     00 04 80 FF 
29e1c     A7 20 68 FC | 	wrlong	##524304, fp
29e20     04 4E 05 F1 | 	add	fp, #4
29e24     20 03 80 FF 
29e28     A7 90 68 FC | 	wrlong	##409672, fp
29e2c     14 4E 05 F1 | 	add	fp, #20
29e30     A7 26 02 FB | 	rdlong	local01, fp
29e34     18 4E 85 F1 | 	sub	fp, #24
29e38     A7 16 02 FB | 	rdlong	arg03, fp
29e3c     40 26 62 FD | 	dirl	local01
29e40     A0 03 80 FF 
29e44     13 91 08 FC | 	wrpin	##475208, local01
29e48     13 17 12 FC | 	wxpin	arg03, local01
29e4c     13 01 28 FC | 	wypin	#0, local01
29e50     41 26 62 FD | 	dirh	local01
29e54     1C 4E 05 F1 | 	add	fp, #28
29e58     A7 28 02 FB | 	rdlong	local02, fp
29e5c     14 27 82 F1 | 	sub	local01, local02
29e60     07 26 06 F5 | 	and	local01, #7
29e64     18 26 66 F0 | 	shl	local01, #24
29e68     78 14 06 F6 | 	mov	arg02, #120
29e6c     13 15 42 F5 | 	or	arg02, local01
29e70     14 4E 85 F1 | 	sub	fp, #20
29e74     A7 14 62 FC | 	wrlong	arg02, fp
29e78     14 4E 05 F1 | 	add	fp, #20
29e7c     A7 12 02 FB | 	rdlong	arg01, fp
29e80     10 14 26 F4 | 	bith	arg02, #16
29e84     40 12 62 FD | 	dirl	arg01
29e88     09 15 02 FC | 	wrpin	arg02, arg01
29e8c     09 3F 18 FC | 	wxpin	#31, arg01
29e90     FF FF FF FF 
29e94     09 FF 2B FC | 	wypin	##-1, arg01
29e98     41 12 62 FD | 	dirh	arg01
29e9c     04 4E 85 F1 | 	sub	fp, #4
29ea0     A7 14 02 FB | 	rdlong	arg02, fp
29ea4     08 4E 05 F1 | 	add	fp, #8
29ea8     A7 2A 02 FB | 	rdlong	local03, fp
29eac     15 15 82 F1 | 	sub	arg02, local03
29eb0     07 14 06 F5 | 	and	arg02, #7
29eb4     18 14 66 F0 | 	shl	arg02, #24
29eb8     14 4E 85 F1 | 	sub	fp, #20
29ebc     A7 14 62 FC | 	wrlong	arg02, fp
29ec0     29 00 00 FF 
29ec4     7A 14 46 F5 | 	or	arg02, ##21114
29ec8     A7 14 62 FC | 	wrlong	arg02, fp
29ecc     14 4E 05 F1 | 	add	fp, #20
29ed0     A7 12 02 FB | 	rdlong	arg01, fp
29ed4     40 12 62 FD | 	dirl	arg01
29ed8     09 15 02 FC | 	wrpin	arg02, arg01
29edc     09 4F 18 FC | 	wxpin	#39, arg01
29ee0     09 01 28 FC | 	wypin	#0, arg01
29ee4     41 12 62 FD | 	dirh	arg01
29ee8     28 4E 85 F1 | 	sub	fp, #40
29eec     A7 12 02 F6 | 	mov	arg01, fp
29ef0     14 4E 85 F1 | 	sub	fp, #20
29ef4     0A 14 06 F6 | 	mov	arg02, #10
29ef8     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1144
29efc     00 12 06 F6 | 	mov	arg01, #0
29f00     00 14 06 F6 | 	mov	arg02, #0
29f04     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
29f08     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1154
29f0c     64 12 06 F6 | 	mov	arg01, #100
29f10     E0 93 BF FD | 	call	#__system___waitus
29f14     14 4E 05 F1 | 	add	fp, #20
29f18     A7 12 02 F6 | 	mov	arg01, fp
29f1c     14 4E 85 F1 | 	sub	fp, #20
29f20     0A 14 06 F6 | 	mov	arg02, #10
29f24     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1144
29f28     0C 4E 05 F1 | 	add	fp, #12
29f2c     A7 00 48 FC | 	wrbyte	#0, fp
29f30     0C 4E 85 F1 | 	sub	fp, #12
29f34     00 12 06 F6 | 	mov	arg01, #0
29f38     00 14 06 F6 | 	mov	arg02, #0
29f3c     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
29f40     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
29f44     01 18 0E F2 | 	cmp	arg04, #1 wz
29f48     B8 03 90 5D |  if_ne	jmp	#LR__4197
29f4c     08 12 06 F6 | 	mov	arg01, #8
29f50     AA 15 06 F6 | 	mov	arg02, #426
29f54     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
29f58     FD FA E1 F8 | 	getbyte	result1, result1, #0
29f5c     01 FA 0D F2 | 	cmp	result1, #1 wz
29f60     98 01 90 5D |  if_ne	jmp	#LR__4183
29f64     14 4E 05 F1 | 	add	fp, #20
29f68     A7 12 02 F6 | 	mov	arg01, fp
29f6c     14 4E 85 F1 | 	sub	fp, #20
29f70     04 14 06 F6 | 	mov	arg02, #4
29f74     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1144
29f78     16 4E 05 F1 | 	add	fp, #22
29f7c     A7 2C C2 FA | 	rdbyte	local04, fp
29f80     16 4E 85 F1 | 	sub	fp, #22
29f84     01 2C 0E F2 | 	cmp	local04, #1 wz
29f88     17 4E 05 A1 |  if_e	add	fp, #23
29f8c     A7 2A C2 AA |  if_e	rdbyte	local03, fp
29f90     17 4E 85 A1 |  if_e	sub	fp, #23
29f94     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
29f98     68 03 90 5D |  if_ne	jmp	#LR__4196
29f9c                 | ' 				for (tmr = 1000; tmr; tmr--) {
29f9c     18 4E 05 F1 | 	add	fp, #24
29fa0     01 00 80 FF 
29fa4     A7 D0 6B FC | 	wrlong	##1000, fp
29fa8     18 4E 85 F1 | 	sub	fp, #24
29fac                 | LR__4180
29fac     18 4E 05 F1 | 	add	fp, #24
29fb0     A7 26 0A FB | 	rdlong	local01, fp wz
29fb4     18 4E 85 F1 | 	sub	fp, #24
29fb8     3C 00 90 AD |  if_e	jmp	#LR__4181
29fbc     A9 12 06 F6 | 	mov	arg01, #169
29fc0     1E 14 C6 F9 | 	decod	arg02, #30
29fc4     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
29fc8     FD 2C 02 F6 | 	mov	local04, result1
29fcc     07 2C 4E F7 | 	zerox	local04, #7 wz
29fd0     24 00 90 AD |  if_e	jmp	#LR__4181
29fd4     01 00 00 FF 
29fd8     E8 13 06 F6 | 	mov	arg01, ##1000
29fdc     14 93 BF FD | 	call	#__system___waitus
29fe0     18 4E 05 F1 | 	add	fp, #24
29fe4     A7 2C 02 FB | 	rdlong	local04, fp
29fe8     01 2C 86 F1 | 	sub	local04, #1
29fec     A7 2C 62 FC | 	wrlong	local04, fp
29ff0     18 4E 85 F1 | 	sub	fp, #24
29ff4     B4 FF 9F FD | 	jmp	#LR__4180
29ff8                 | LR__4181
29ff8     18 4E 05 F1 | 	add	fp, #24
29ffc     A7 2C 0A FB | 	rdlong	local04, fp wz
2a000     18 4E 85 F1 | 	sub	fp, #24
2a004     4C 00 90 AD |  if_e	jmp	#LR__4182
2a008     3A 12 06 F6 | 	mov	arg01, #58
2a00c     00 14 06 F6 | 	mov	arg02, #0
2a010     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a014     FD 2A 02 F6 | 	mov	local03, result1
2a018     07 2A 4E F7 | 	zerox	local03, #7 wz
2a01c     34 00 90 5D |  if_ne	jmp	#LR__4182
2a020     14 4E 05 F1 | 	add	fp, #20
2a024     A7 12 02 F6 | 	mov	arg01, fp
2a028     14 4E 85 F1 | 	sub	fp, #20
2a02c     04 14 06 F6 | 	mov	arg02, #4
2a030     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1144
2a034     14 4E 05 F1 | 	add	fp, #20
2a038     A7 26 C2 FA | 	rdbyte	local01, fp
2a03c     40 26 CE F7 | 	test	local01, #64 wz
2a040     0C 2C 06 56 |  if_ne	mov	local04, #12
2a044     04 2C 06 A6 |  if_e	mov	local04, #4
2a048     08 4E 85 F1 | 	sub	fp, #8
2a04c     A7 2C 42 FC | 	wrbyte	local04, fp
2a050     0C 4E 85 F1 | 	sub	fp, #12
2a054                 | LR__4182
2a054     14 2C 06 FB | 	rdlong	local04, #20
2a058     18 4E 05 F1 | 	add	fp, #24
2a05c     A7 2C 62 FC | 	wrlong	local04, fp
2a060     0C 4E 05 F1 | 	add	fp, #12
2a064     A7 2C 02 FB | 	rdlong	local04, fp
2a068     1B 2C 26 F4 | 	bith	local04, #27
2a06c     A7 2C 62 FC | 	wrlong	local04, fp
2a070     0C 4E 85 F1 | 	sub	fp, #12
2a074     A7 2C 02 FB | 	rdlong	local04, fp
2a078     18 4E 85 F1 | 	sub	fp, #24
2a07c     68 78 04 FF 
2a080     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2a084     1C 4E 05 C1 |  if_b	add	fp, #28
2a088     00 01 80 CF 
2a08c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2a090     1C 4E 85 C1 |  if_b	sub	fp, #28
2a094     6C 02 90 CD |  if_b	jmp	#LR__4196
2a098     18 4E 05 F1 | 	add	fp, #24
2a09c     A7 2C 02 FB | 	rdlong	local04, fp
2a0a0     18 4E 85 F1 | 	sub	fp, #24
2a0a4     E1 F5 05 FF 
2a0a8     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2a0ac     1C 4E 05 C1 |  if_b	add	fp, #28
2a0b0     00 01 80 CF 
2a0b4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2a0b8     1C 4E 85 C1 |  if_b	sub	fp, #28
2a0bc     44 02 90 CD |  if_b	jmp	#LR__4196
2a0c0     18 4E 05 F1 | 	add	fp, #24
2a0c4     A7 2C 02 FB | 	rdlong	local04, fp
2a0c8     18 4E 85 F1 | 	sub	fp, #24
2a0cc     3B 58 08 FF 
2a0d0     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2a0d4     1C 4E 05 C1 |  if_b	add	fp, #28
2a0d8     00 01 80 CF 
2a0dc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2a0e0     1C 4E 85 C1 |  if_b	sub	fp, #28
2a0e4     1C 02 90 CD |  if_b	jmp	#LR__4196
2a0e8     1C 4E 05 F1 | 	add	fp, #28
2a0ec     80 01 80 FF 
2a0f0     A7 10 68 FC | 	wrlong	##196616, fp
2a0f4     1C 4E 85 F1 | 	sub	fp, #28
2a0f8     08 02 90 FD | 	jmp	#LR__4196
2a0fc                 | LR__4183
2a0fc     A9 12 06 F6 | 	mov	arg01, #169
2a100     00 14 06 F6 | 	mov	arg02, #0
2a104     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a108     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2a10c     02 2C 16 F2 | 	cmp	local04, #2 wc
2a110     18 00 90 3D |  if_ae	jmp	#LR__4184
2a114     0C 4E 05 F1 | 	add	fp, #12
2a118     A7 04 48 FC | 	wrbyte	#2, fp
2a11c     04 4E 05 F1 | 	add	fp, #4
2a120     A7 52 49 FC | 	wrbyte	#169, fp
2a124     10 4E 85 F1 | 	sub	fp, #16
2a128     14 00 90 FD | 	jmp	#LR__4185
2a12c                 | LR__4184
2a12c     0C 4E 05 F1 | 	add	fp, #12
2a130     A7 02 48 FC | 	wrbyte	#1, fp
2a134     04 4E 05 F1 | 	add	fp, #4
2a138     A7 02 48 FC | 	wrbyte	#1, fp
2a13c     10 4E 85 F1 | 	sub	fp, #16
2a140                 | LR__4185
2a140                 | ' 				ty =  0x01 ; cmd =  (1) ;
2a140                 | ' 			}
2a140                 | ' 			for (tmr = 1000; tmr; tmr--) {
2a140     18 4E 05 F1 | 	add	fp, #24
2a144     01 00 80 FF 
2a148     A7 D0 6B FC | 	wrlong	##1000, fp
2a14c     18 4E 85 F1 | 	sub	fp, #24
2a150                 | LR__4186
2a150     18 4E 05 F1 | 	add	fp, #24
2a154     A7 2A 0A FB | 	rdlong	local03, fp wz
2a158     18 4E 85 F1 | 	sub	fp, #24
2a15c     44 00 90 AD |  if_e	jmp	#LR__4187
2a160     10 4E 05 F1 | 	add	fp, #16
2a164     A7 12 C2 FA | 	rdbyte	arg01, fp
2a168     10 4E 85 F1 | 	sub	fp, #16
2a16c     00 14 06 F6 | 	mov	arg02, #0
2a170     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a174     FD 2C 02 F6 | 	mov	local04, result1
2a178     07 2C 4E F7 | 	zerox	local04, #7 wz
2a17c     24 00 90 AD |  if_e	jmp	#LR__4187
2a180     01 00 00 FF 
2a184     E8 13 06 F6 | 	mov	arg01, ##1000
2a188     68 91 BF FD | 	call	#__system___waitus
2a18c     18 4E 05 F1 | 	add	fp, #24
2a190     A7 2C 02 FB | 	rdlong	local04, fp
2a194     01 2C 86 F1 | 	sub	local04, #1
2a198     A7 2C 62 FC | 	wrlong	local04, fp
2a19c     18 4E 85 F1 | 	sub	fp, #24
2a1a0     AC FF 9F FD | 	jmp	#LR__4186
2a1a4                 | LR__4187
2a1a4     18 4E 05 F1 | 	add	fp, #24
2a1a8     A7 2C 0A FB | 	rdlong	local04, fp wz
2a1ac     18 4E 85 F1 | 	sub	fp, #24
2a1b0     14 00 90 AD |  if_e	jmp	#LR__4188
2a1b4     10 12 06 F6 | 	mov	arg01, #16
2a1b8     09 14 C6 F9 | 	decod	arg02, #9
2a1bc     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a1c0     07 FA 4D F7 | 	zerox	result1, #7 wz
2a1c4     0C 00 90 AD |  if_e	jmp	#LR__4189
2a1c8                 | LR__4188
2a1c8     0C 4E 05 F1 | 	add	fp, #12
2a1cc     A7 00 48 FC | 	wrbyte	#0, fp
2a1d0     0C 4E 85 F1 | 	sub	fp, #12
2a1d4                 | LR__4189
2a1d4     14 2C 06 FB | 	rdlong	local04, #20
2a1d8     18 4E 05 F1 | 	add	fp, #24
2a1dc     A7 2C 62 FC | 	wrlong	local04, fp
2a1e0     18 4E 85 F1 | 	sub	fp, #24
2a1e4     F0 FA 02 FF 
2a1e8     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2a1ec     18 00 90 3D |  if_ae	jmp	#LR__4190
2a1f0     24 4E 05 F1 | 	add	fp, #36
2a1f4     A7 2C 02 FB | 	rdlong	local04, fp
2a1f8     1B 2C 26 F4 | 	bith	local04, #27
2a1fc     A7 2C 62 FC | 	wrlong	local04, fp
2a200     24 4E 85 F1 | 	sub	fp, #36
2a204     2C 00 90 FD | 	jmp	#LR__4191
2a208                 | LR__4190
2a208     18 4E 05 F1 | 	add	fp, #24
2a20c     A7 2C 02 FB | 	rdlong	local04, fp
2a210     18 4E 85 F1 | 	sub	fp, #24
2a214     E1 F5 05 FF 
2a218     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2a21c     24 4E 05 C1 |  if_b	add	fp, #36
2a220     A7 2C 02 CB |  if_b	rdlong	local04, fp
2a224     80 00 04 CF 
2a228     00 2C 46 C5 |  if_b	or	local04, ##134283264
2a22c     A7 2C 62 CC |  if_b	wrlong	local04, fp
2a230     24 4E 85 C1 |  if_b	sub	fp, #36
2a234                 | LR__4191
2a234     18 4E 05 F1 | 	add	fp, #24
2a238     A7 2C 02 FB | 	rdlong	local04, fp
2a23c     18 4E 85 F1 | 	sub	fp, #24
2a240     F0 FA 02 FF 
2a244     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2a248     1C 4E 05 C1 |  if_b	add	fp, #28
2a24c     00 01 80 CF 
2a250     A7 08 68 CC |  if_b	wrlong	##131076, fp
2a254     1C 4E 85 C1 |  if_b	sub	fp, #28
2a258     A8 00 90 CD |  if_b	jmp	#LR__4195
2a25c     18 4E 05 F1 | 	add	fp, #24
2a260     A7 2C 02 FB | 	rdlong	local04, fp
2a264     18 4E 85 F1 | 	sub	fp, #24
2a268     68 78 04 FF 
2a26c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2a270     1C 4E 05 C1 |  if_b	add	fp, #28
2a274     80 01 80 CF 
2a278     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2a27c     1C 4E 85 C1 |  if_b	sub	fp, #28
2a280     80 00 90 CD |  if_b	jmp	#LR__4194
2a284     18 4E 05 F1 | 	add	fp, #24
2a288     A7 2C 02 FB | 	rdlong	local04, fp
2a28c     18 4E 85 F1 | 	sub	fp, #24
2a290     E1 F5 05 FF 
2a294     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2a298     1C 4E 05 C1 |  if_b	add	fp, #28
2a29c     00 02 80 CF 
2a2a0     A7 10 68 CC |  if_b	wrlong	##262152, fp
2a2a4     1C 4E 85 C1 |  if_b	sub	fp, #28
2a2a8     58 00 90 CD |  if_b	jmp	#LR__4193
2a2ac     18 4E 05 F1 | 	add	fp, #24
2a2b0     A7 2C 02 FB | 	rdlong	local04, fp
2a2b4     18 4E 85 F1 | 	sub	fp, #24
2a2b8     59 73 07 FF 
2a2bc     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2a2c0     1C 4E 05 C1 |  if_b	add	fp, #28
2a2c4     80 02 80 CF 
2a2c8     A7 14 68 CC |  if_b	wrlong	##327690, fp
2a2cc     1C 4E 85 C1 |  if_b	sub	fp, #28
2a2d0     30 00 90 CD |  if_b	jmp	#LR__4192
2a2d4     18 4E 05 F1 | 	add	fp, #24
2a2d8     A7 2C 02 FB | 	rdlong	local04, fp
2a2dc     18 4E 85 F1 | 	sub	fp, #24
2a2e0     D1 F0 08 FF 
2a2e4     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2a2e8     1C 4E 05 C1 |  if_b	add	fp, #28
2a2ec     00 03 80 CF 
2a2f0     A7 18 68 CC |  if_b	wrlong	##393228, fp
2a2f4     1C 4E 85 F3 | 	sumc	fp, #28
2a2f8     80 03 80 3F 
2a2fc     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2a300     1C 4E 85 31 |  if_ae	sub	fp, #28
2a304                 | LR__4192
2a304                 | LR__4193
2a304                 | LR__4194
2a304                 | LR__4195
2a304                 | LR__4196
2a304                 | LR__4197
2a304     0C 4E 05 F1 | 	add	fp, #12
2a308     A7 2C C2 FA | 	rdbyte	local04, fp
2a30c     01 00 00 FF 
2a310     21 E4 05 F1 | 	add	objptr, ##545
2a314     F2 2C 42 FC | 	wrbyte	local04, objptr
2a318     A7 26 CA FA | 	rdbyte	local01, fp wz
2a31c     00 2C 06 56 |  if_ne	mov	local04, #0
2a320     01 2C 06 A6 |  if_e	mov	local04, #1
2a324     20 4E 05 F1 | 	add	fp, #32
2a328     A7 2C 42 FC | 	wrbyte	local04, fp
2a32c     A7 2C C2 FA | 	rdbyte	local04, fp
2a330     2C 4E 85 F1 | 	sub	fp, #44
2a334     01 E4 85 F1 | 	sub	objptr, #1
2a338     F2 2C 42 FC | 	wrbyte	local04, objptr
2a33c     01 00 00 FF 
2a340     20 E4 85 F1 | 	sub	objptr, ##544
2a344     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1154
2a348     34 4E 05 F1 | 	add	fp, #52
2a34c     A7 12 02 FB | 	rdlong	arg01, fp
2a350     18 4E 85 F1 | 	sub	fp, #24
2a354     A7 14 02 FB | 	rdlong	arg02, fp
2a358     09 15 12 FC | 	wxpin	arg02, arg01
2a35c     1C 4E 05 F1 | 	add	fp, #28
2a360     A7 12 02 FB | 	rdlong	arg01, fp
2a364     14 4E 85 F1 | 	sub	fp, #20
2a368     A7 14 02 FB | 	rdlong	arg02, fp
2a36c     09 15 02 FC | 	wrpin	arg02, arg01
2a370                 | ' 
2a370                 | ' 		}
2a370                 | ' 	}
2a370                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2a370                 | ' 	CardType = ty;
2a370                 | ' 	s = ty ? 0 :  0x01 ;
2a370                 | ' 	Stat = s;
2a370                 | ' 
2a370                 | ' 	deselect();
2a370                 | ' 
2a370                 | ' 
2a370                 | ' 	_wxpin( PIN_CLK, ck_div );
2a370                 | ' 	_wrpin( PIN_DI, spm_tx );
2a370                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2a370                 | ' 	return s;
2a370     08 4E 05 F1 | 	add	fp, #8
2a374     A7 FA C1 FA | 	rdbyte	result1, fp
2a378     2C 4E 85 F1 | 	sub	fp, #44
2a37c                 | LR__4198
2a37c     A7 F0 03 F6 | 	mov	ptra, fp
2a380     B2 00 A0 FD | 	call	#popregs_
2a384                 | _fatfs_cc_disk_initialize_ret
2a384     2D 00 64 FD | 	ret
2a388                 | 
2a388                 | _fatfs_cc_disk_read
2a388     05 4A 05 F6 | 	mov	COUNT_, #5
2a38c     A8 00 A0 FD | 	call	#pushregs_
2a390     0A 27 02 F6 | 	mov	local01, arg02
2a394     0B 29 02 F6 | 	mov	local02, arg03
2a398     0C 2B 02 F6 | 	mov	local03, arg04
2a39c     00 12 0E F2 | 	cmp	arg01, #0 wz
2a3a0     01 FA 05 56 |  if_ne	mov	result1, #1
2a3a4                 | ' 
2a3a4                 | ' 	return Stat;
2a3a4     01 00 00 AF 
2a3a8     20 E4 05 A1 |  if_e	add	objptr, ##544
2a3ac     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2a3b0     01 00 00 AF 
2a3b4     20 E4 85 A1 |  if_e	sub	objptr, ##544
2a3b8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a3bc     01 FA CD F7 | 	test	result1, #1 wz
2a3c0     03 FA 05 56 |  if_ne	mov	result1, #3
2a3c4     84 00 90 5D |  if_ne	jmp	#LR__4202
2a3c8     01 00 00 FF 
2a3cc     21 E4 05 F1 | 	add	objptr, ##545
2a3d0     F2 2C C2 FA | 	rdbyte	local04, objptr
2a3d4     01 00 00 FF 
2a3d8     21 E4 85 F1 | 	sub	objptr, ##545
2a3dc     08 2C CE F7 | 	test	local04, #8 wz
2a3e0     09 28 66 A0 |  if_e	shl	local02, #9
2a3e4     02 2A 16 F2 | 	cmp	local03, #2 wc
2a3e8     12 2C 06 36 |  if_ae	mov	local04, #18
2a3ec     11 2C 06 C6 |  if_b	mov	local04, #17
2a3f0     14 15 02 F6 | 	mov	arg02, local02
2a3f4     16 13 02 F6 | 	mov	arg01, local04
2a3f8     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a3fc     FD 2E 02 F6 | 	mov	local05, result1
2a400     07 2E 4E F7 | 	zerox	local05, #7 wz
2a404     30 00 90 5D |  if_ne	jmp	#LR__4201
2a408                 | ' 		do {
2a408                 | LR__4200
2a408     13 13 02 F6 | 	mov	arg01, local01
2a40c     09 14 C6 F9 | 	decod	arg02, #9
2a410     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1162
2a414     00 FA 0D F2 | 	cmp	result1, #0 wz
2a418     01 00 00 5F 
2a41c     00 26 06 51 |  if_ne	add	local01, ##512
2a420     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4200
2a424     16 2D E2 F8 | 	getbyte	local04, local04, #0
2a428     12 2C 0E F2 | 	cmp	local04, #18 wz
2a42c     0C 12 06 A6 |  if_e	mov	arg01, #12
2a430     00 14 06 A6 |  if_e	mov	arg02, #0
2a434     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1168
2a438                 | LR__4201
2a438     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1154
2a43c                 | ' 	}
2a43c                 | ' 	deselect();
2a43c                 | ' 
2a43c                 | ' 	return count ? RES_ERROR : RES_OK;
2a43c     00 2A 0E F2 | 	cmp	local03, #0 wz
2a440     01 2E 06 56 |  if_ne	mov	local05, #1
2a444     00 2E 06 A6 |  if_e	mov	local05, #0
2a448     17 FB 01 F6 | 	mov	result1, local05
2a44c                 | LR__4202
2a44c     A7 F0 03 F6 | 	mov	ptra, fp
2a450     B2 00 A0 FD | 	call	#popregs_
2a454                 | _fatfs_cc_disk_read_ret
2a454     2D 00 64 FD | 	ret
2a458                 | 
2a458                 | _fatfs_cc_disk_write
2a458     04 4A 05 F6 | 	mov	COUNT_, #4
2a45c     A8 00 A0 FD | 	call	#pushregs_
2a460     0A 27 02 F6 | 	mov	local01, arg02
2a464     0C 29 02 F6 | 	mov	local02, arg04
2a468     0B 2B 02 F6 | 	mov	local03, arg03
2a46c     00 12 0E F2 | 	cmp	arg01, #0 wz
2a470     01 FA 05 56 |  if_ne	mov	result1, #1
2a474                 | ' 
2a474                 | ' 	return Stat;
2a474     01 00 00 AF 
2a478     20 E4 05 A1 |  if_e	add	objptr, ##544
2a47c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2a480     01 00 00 AF 
2a484     20 E4 85 A1 |  if_e	sub	objptr, ##544
2a488     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a48c     01 FA CD F7 | 	test	result1, #1 wz
2a490     03 FA 05 56 |  if_ne	mov	result1, #3
2a494     D4 00 90 5D |  if_ne	jmp	#LR__4214
2a498     01 00 00 FF 
2a49c     21 E4 05 F1 | 	add	objptr, ##545
2a4a0     F2 16 C2 FA | 	rdbyte	arg03, objptr
2a4a4     01 00 00 FF 
2a4a8     21 E4 85 F1 | 	sub	objptr, ##545
2a4ac     08 16 CE F7 | 	test	arg03, #8 wz
2a4b0     09 2A 66 A0 |  if_e	shl	local03, #9
2a4b4     01 28 0E F2 | 	cmp	local02, #1 wz
2a4b8     30 00 90 5D |  if_ne	jmp	#LR__4210
2a4bc     18 12 06 F6 | 	mov	arg01, #24
2a4c0     15 15 02 F6 | 	mov	arg02, local03
2a4c4     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a4c8     FD 2C 02 F6 | 	mov	local04, result1
2a4cc     07 2C 4E F7 | 	zerox	local04, #7 wz
2a4d0     84 00 90 5D |  if_ne	jmp	#LR__4213
2a4d4     13 13 02 F6 | 	mov	arg01, local01
2a4d8     FE 14 06 F6 | 	mov	arg02, #254
2a4dc     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1164
2a4e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a4e4     00 28 06 56 |  if_ne	mov	local02, #0
2a4e8     6C 00 90 FD | 	jmp	#LR__4213
2a4ec                 | LR__4210
2a4ec     01 00 00 FF 
2a4f0     21 E4 05 F1 | 	add	objptr, ##545
2a4f4     F2 2C C2 FA | 	rdbyte	local04, objptr
2a4f8     01 00 00 FF 
2a4fc     21 E4 85 F1 | 	sub	objptr, ##545
2a500     06 2C CE F7 | 	test	local04, #6 wz
2a504     97 12 06 56 |  if_ne	mov	arg01, #151
2a508     14 15 02 56 |  if_ne	mov	arg02, local02
2a50c     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1168
2a510     15 15 02 F6 | 	mov	arg02, local03
2a514     19 12 06 F6 | 	mov	arg01, #25
2a518     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a51c     FD 2C 02 F6 | 	mov	local04, result1
2a520     07 2C 4E F7 | 	zerox	local04, #7 wz
2a524     30 00 90 5D |  if_ne	jmp	#LR__4212
2a528                 | ' 			do {
2a528                 | LR__4211
2a528     13 13 02 F6 | 	mov	arg01, local01
2a52c     FC 14 06 F6 | 	mov	arg02, #252
2a530     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1164
2a534     00 FA 0D F2 | 	cmp	result1, #0 wz
2a538     01 00 00 5F 
2a53c     00 26 06 51 |  if_ne	add	local01, ##512
2a540     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4211
2a544     00 12 06 F6 | 	mov	arg01, #0
2a548     FD 14 06 F6 | 	mov	arg02, #253
2a54c     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1164
2a550     00 FA 0D F2 | 	cmp	result1, #0 wz
2a554     01 28 06 A6 |  if_e	mov	local02, #1
2a558                 | LR__4212
2a558                 | LR__4213
2a558     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1154
2a55c                 | ' 				count = 1;
2a55c                 | ' 		}
2a55c                 | ' 	}
2a55c                 | ' 	deselect();
2a55c                 | ' 
2a55c                 | ' 	return count ? RES_ERROR : RES_OK;
2a55c     00 28 0E F2 | 	cmp	local02, #0 wz
2a560     01 2C 06 56 |  if_ne	mov	local04, #1
2a564     00 2C 06 A6 |  if_e	mov	local04, #0
2a568     16 FB 01 F6 | 	mov	result1, local04
2a56c                 | LR__4214
2a56c     A7 F0 03 F6 | 	mov	ptra, fp
2a570     B2 00 A0 FD | 	call	#popregs_
2a574                 | _fatfs_cc_disk_write_ret
2a574     2D 00 64 FD | 	ret
2a578                 | 
2a578                 | _fatfs_cc_disk_ioctl
2a578     01 4A 05 F6 | 	mov	COUNT_, #1
2a57c     A8 00 A0 FD | 	call	#pushregs_
2a580     30 F0 07 F1 | 	add	ptra, #48
2a584     04 4E 05 F1 | 	add	fp, #4
2a588     A7 12 42 FC | 	wrbyte	arg01, fp
2a58c     04 4E 05 F1 | 	add	fp, #4
2a590     A7 14 42 FC | 	wrbyte	arg02, fp
2a594     04 4E 05 F1 | 	add	fp, #4
2a598     A7 16 62 FC | 	wrlong	arg03, fp
2a59c     08 4E 85 F1 | 	sub	fp, #8
2a5a0     A7 12 CA FA | 	rdbyte	arg01, fp wz
2a5a4     04 4E 85 F1 | 	sub	fp, #4
2a5a8     01 FA 05 56 |  if_ne	mov	result1, #1
2a5ac                 | ' 
2a5ac                 | ' 	return Stat;
2a5ac     01 00 00 AF 
2a5b0     20 E4 05 A1 |  if_e	add	objptr, ##544
2a5b4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2a5b8     01 00 00 AF 
2a5bc     20 E4 85 A1 |  if_e	sub	objptr, ##544
2a5c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a5c4     01 FA CD F7 | 	test	result1, #1 wz
2a5c8     03 FA 05 56 |  if_ne	mov	result1, #3
2a5cc     E4 01 90 5D |  if_ne	jmp	#LR__4228
2a5d0     10 4E 05 F1 | 	add	fp, #16
2a5d4     A7 02 68 FC | 	wrlong	#1, fp
2a5d8                 | ' 
2a5d8                 | ' 	res = RES_ERROR;
2a5d8                 | ' 	switch (ctrl) {
2a5d8     08 4E 85 F1 | 	sub	fp, #8
2a5dc     A7 26 C2 FA | 	rdbyte	local01, fp
2a5e0     08 4E 85 F1 | 	sub	fp, #8
2a5e4     04 26 26 F3 | 	fle	local01, #4
2a5e8     30 26 62 FD | 	jmprel	local01
2a5ec                 | LR__4220
2a5ec     10 00 90 FD | 	jmp	#LR__4221
2a5f0     24 00 90 FD | 	jmp	#LR__4222
2a5f4     A0 01 90 FD | 	jmp	#LR__4226
2a5f8     80 01 90 FD | 	jmp	#LR__4225
2a5fc     98 01 90 FD | 	jmp	#LR__4226
2a600                 | LR__4221
2a600     B4 79 B0 FD | 	call	#_fatfs_cc_select_1158
2a604     00 FA 0D F2 | 	cmp	result1, #0 wz
2a608     10 4E 05 51 |  if_ne	add	fp, #16
2a60c     A7 00 68 5C |  if_ne	wrlong	#0, fp
2a610     10 4E 85 51 |  if_ne	sub	fp, #16
2a614                 | ' 			break;
2a614     8C 01 90 FD | 	jmp	#LR__4227
2a618                 | LR__4222
2a618     09 12 06 F6 | 	mov	arg01, #9
2a61c     00 14 06 F6 | 	mov	arg02, #0
2a620     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1168
2a624     FD 26 02 F6 | 	mov	local01, result1
2a628     07 26 4E F7 | 	zerox	local01, #7 wz
2a62c     74 01 90 5D |  if_ne	jmp	#LR__4227
2a630     18 4E 05 F1 | 	add	fp, #24
2a634     A7 12 02 F6 | 	mov	arg01, fp
2a638     18 4E 85 F1 | 	sub	fp, #24
2a63c     10 14 06 F6 | 	mov	arg02, #16
2a640     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1162
2a644     00 FA 0D F2 | 	cmp	result1, #0 wz
2a648     58 01 90 AD |  if_e	jmp	#LR__4227
2a64c     18 4E 05 F1 | 	add	fp, #24
2a650     A7 26 C2 FA | 	rdbyte	local01, fp
2a654     18 4E 85 F1 | 	sub	fp, #24
2a658     06 26 46 F0 | 	shr	local01, #6
2a65c     01 26 0E F2 | 	cmp	local01, #1 wz
2a660     5C 00 90 5D |  if_ne	jmp	#LR__4223
2a664     21 4E 05 F1 | 	add	fp, #33
2a668     A7 26 C2 FA | 	rdbyte	local01, fp
2a66c     01 4E 85 F1 | 	sub	fp, #1
2a670     A7 FA C1 FA | 	rdbyte	result1, fp
2a674     FD FA 31 F9 | 	getword	result1, result1, #0
2a678     08 FA 65 F0 | 	shl	result1, #8
2a67c     FD 26 02 F1 | 	add	local01, result1
2a680     01 4E 85 F1 | 	sub	fp, #1
2a684     A7 FA C1 FA | 	rdbyte	result1, fp
2a688     3F FA 05 F5 | 	and	result1, #63
2a68c     10 FA 65 F0 | 	shl	result1, #16
2a690     FD 26 02 F1 | 	add	local01, result1
2a694     01 26 06 F1 | 	add	local01, #1
2a698     09 4E 05 F1 | 	add	fp, #9
2a69c     A7 26 62 FC | 	wrlong	local01, fp
2a6a0     1C 4E 85 F1 | 	sub	fp, #28
2a6a4     A7 26 02 FB | 	rdlong	local01, fp
2a6a8     1C 4E 05 F1 | 	add	fp, #28
2a6ac     A7 FA 01 FB | 	rdlong	result1, fp
2a6b0     28 4E 85 F1 | 	sub	fp, #40
2a6b4     0A FA 65 F0 | 	shl	result1, #10
2a6b8     13 FB 61 FC | 	wrlong	result1, local01
2a6bc     AC 00 90 FD | 	jmp	#LR__4224
2a6c0                 | LR__4223
2a6c0     1D 4E 05 F1 | 	add	fp, #29
2a6c4     A7 26 C2 FA | 	rdbyte	local01, fp
2a6c8     13 27 42 F8 | 	getnib	local01, local01, #0
2a6cc     05 4E 05 F1 | 	add	fp, #5
2a6d0     A7 FA C1 FA | 	rdbyte	result1, fp
2a6d4     80 FA 05 F5 | 	and	result1, #128
2a6d8     07 FA C5 F0 | 	sar	result1, #7
2a6dc     FD 26 02 F1 | 	add	local01, result1
2a6e0     01 4E 85 F1 | 	sub	fp, #1
2a6e4     A7 FA C1 FA | 	rdbyte	result1, fp
2a6e8     03 FA 05 F5 | 	and	result1, #3
2a6ec     01 FA 65 F0 | 	shl	result1, #1
2a6f0     FD 26 02 F1 | 	add	local01, result1
2a6f4     02 26 06 F1 | 	add	local01, #2
2a6f8     0D 4E 85 F1 | 	sub	fp, #13
2a6fc     A7 26 42 FC | 	wrbyte	local01, fp
2a700     0C 4E 05 F1 | 	add	fp, #12
2a704     A7 26 C2 FA | 	rdbyte	local01, fp
2a708     06 26 46 F0 | 	shr	local01, #6
2a70c     01 4E 85 F1 | 	sub	fp, #1
2a710     A7 FA C1 FA | 	rdbyte	result1, fp
2a714     FD FA 31 F9 | 	getword	result1, result1, #0
2a718     02 FA 65 F0 | 	shl	result1, #2
2a71c     FD 26 02 F1 | 	add	local01, result1
2a720     01 4E 85 F1 | 	sub	fp, #1
2a724     A7 FA C1 FA | 	rdbyte	result1, fp
2a728     03 FA 05 F5 | 	and	result1, #3
2a72c     FD FA 31 F9 | 	getword	result1, result1, #0
2a730     0A FA 65 F0 | 	shl	result1, #10
2a734     FD 26 02 F1 | 	add	local01, result1
2a738     01 26 06 F1 | 	add	local01, #1
2a73c     0A 4E 05 F1 | 	add	fp, #10
2a740     A7 26 62 FC | 	wrlong	local01, fp
2a744     1C 4E 85 F1 | 	sub	fp, #28
2a748     A7 26 02 FB | 	rdlong	local01, fp
2a74c     1C 4E 05 F1 | 	add	fp, #28
2a750     A7 FA 01 FB | 	rdlong	result1, fp
2a754     14 4E 85 F1 | 	sub	fp, #20
2a758     A7 16 C2 FA | 	rdbyte	arg03, fp
2a75c     14 4E 85 F1 | 	sub	fp, #20
2a760     09 16 86 F1 | 	sub	arg03, #9
2a764     0B FB 61 F0 | 	shl	result1, arg03
2a768     13 FB 61 FC | 	wrlong	result1, local01
2a76c                 | LR__4224
2a76c     10 4E 05 F1 | 	add	fp, #16
2a770     A7 00 68 FC | 	wrlong	#0, fp
2a774     10 4E 85 F1 | 	sub	fp, #16
2a778                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2a778                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2a778                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2a778                 | ' 				}
2a778                 | ' 				res = RES_OK;
2a778                 | ' 			}
2a778                 | ' 			break;
2a778     28 00 90 FD | 	jmp	#LR__4227
2a77c                 | LR__4225
2a77c     0C 4E 05 F1 | 	add	fp, #12
2a780     A7 26 02 FB | 	rdlong	local01, fp
2a784     13 01 69 FC | 	wrlong	#128, local01
2a788     04 4E 05 F1 | 	add	fp, #4
2a78c     A7 00 68 FC | 	wrlong	#0, fp
2a790     10 4E 85 F1 | 	sub	fp, #16
2a794                 | ' 			*(DWORD*)buff = 128;
2a794                 | ' 			res = RES_OK;
2a794                 | ' 			break;
2a794     0C 00 90 FD | 	jmp	#LR__4227
2a798                 | LR__4226
2a798     10 4E 05 F1 | 	add	fp, #16
2a79c     A7 08 68 FC | 	wrlong	#4, fp
2a7a0     10 4E 85 F1 | 	sub	fp, #16
2a7a4                 | LR__4227
2a7a4     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1154
2a7a8                 | ' 			res = RES_PARERR;
2a7a8                 | ' 	}
2a7a8                 | ' 
2a7a8                 | ' 	deselect();
2a7a8                 | ' 
2a7a8                 | ' 	return res;
2a7a8     10 4E 05 F1 | 	add	fp, #16
2a7ac     A7 FA 01 FB | 	rdlong	result1, fp
2a7b0     10 4E 85 F1 | 	sub	fp, #16
2a7b4                 | LR__4228
2a7b4     A7 F0 03 F6 | 	mov	ptra, fp
2a7b8     B2 00 A0 FD | 	call	#popregs_
2a7bc                 | _fatfs_cc_disk_ioctl_ret
2a7bc     2D 00 64 FD | 	ret
2a7c0                 | 
2a7c0                 | _fatfs_cc_disk_setpins
2a7c0     00 12 0E F2 | 	cmp	arg01, #0 wz
2a7c4     01 FA 65 56 |  if_ne	neg	result1, #1
2a7c8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2a7cc     01 00 00 FF 
2a7d0     10 E4 05 F1 | 	add	objptr, ##528
2a7d4     F2 14 62 FC | 	wrlong	arg02, objptr
2a7d8     04 E4 05 F1 | 	add	objptr, #4
2a7dc     F2 16 62 FC | 	wrlong	arg03, objptr
2a7e0     04 E4 05 F1 | 	add	objptr, #4
2a7e4     F2 18 62 FC | 	wrlong	arg04, objptr
2a7e8     04 E4 05 F1 | 	add	objptr, #4
2a7ec     F2 1A 62 FC | 	wrlong	arg05, objptr
2a7f0     01 00 00 FF 
2a7f4     1C E4 85 F1 | 	sub	objptr, ##540
2a7f8     00 FA 05 F6 | 	mov	result1, #0
2a7fc                 | _fatfs_cc_disk_setpins_ret
2a7fc     2D 00 64 FD | 	ret
2a800                 | 
2a800                 | _fatfs_cc_tchar2uni
2a800     09 01 02 FB | 	rdlong	_var01, arg01
2a804     00 03 02 F6 | 	mov	_var02, _var01
2a808     01 00 06 F1 | 	add	_var01, #1
2a80c     00 05 02 F6 | 	mov	_var03, _var01
2a810     01 07 C2 FA | 	rdbyte	_var04, _var02
2a814     80 06 CE F7 | 	test	_var04, #128 wz
2a818     E8 00 90 AD |  if_e	jmp	#LR__4237
2a81c     03 09 02 F6 | 	mov	_var05, _var04
2a820     E0 08 06 F5 | 	and	_var05, #224
2a824     C0 08 0E F2 | 	cmp	_var05, #192 wz
2a828     1F 06 06 A5 |  if_e	and	_var04, #31
2a82c     01 0A 06 A6 |  if_e	mov	_var06, #1
2a830     34 00 90 AD |  if_e	jmp	#LR__4231
2a834     03 09 02 F6 | 	mov	_var05, _var04
2a838     F0 08 06 F5 | 	and	_var05, #240
2a83c     E0 08 0E F2 | 	cmp	_var05, #224 wz
2a840     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2a844     02 0A 06 A6 |  if_e	mov	_var06, #2
2a848     1C 00 90 AD |  if_e	jmp	#LR__4230
2a84c     03 09 02 F6 | 	mov	_var05, _var04
2a850     F8 08 06 F5 | 	and	_var05, #248
2a854     F0 08 0E F2 | 	cmp	_var05, #240 wz
2a858     07 06 06 A5 |  if_e	and	_var04, #7
2a85c     03 0A 06 A6 |  if_e	mov	_var06, #3
2a860                 | ' 			return 0xFFFFFFFF;
2a860     01 FA 65 56 |  if_ne	neg	result1, #1
2a864     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2a868                 | LR__4230
2a868                 | LR__4231
2a868                 | ' 		}
2a868                 | ' 		do {
2a868                 | LR__4232
2a868     02 0D C2 FA | 	rdbyte	_var07, _var03
2a86c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2a870     C0 08 06 F5 | 	and	_var05, #192
2a874     80 08 0E F2 | 	cmp	_var05, #128 wz
2a878     01 04 06 F1 | 	add	_var03, #1
2a87c     01 FA 65 56 |  if_ne	neg	result1, #1
2a880     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2a884     06 06 66 F0 | 	shl	_var04, #6
2a888     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2a88c     3F 02 06 F5 | 	and	_var02, #63
2a890     01 07 42 F5 | 	or	_var04, _var02
2a894     F4 0B 6E FB | 	djnz	_var06, #LR__4232
2a898     80 06 16 F2 | 	cmp	_var04, #128 wc
2a89c     24 00 90 CD |  if_b	jmp	#LR__4234
2a8a0     6C 00 00 FF 
2a8a4     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2a8a8     0C 00 90 CD |  if_b	jmp	#LR__4233
2a8ac     70 00 00 FF 
2a8b0     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2a8b4     0C 00 90 CD |  if_b	jmp	#LR__4234
2a8b8                 | LR__4233
2a8b8     80 08 00 FF 
2a8bc     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2a8c0     08 00 90 CD |  if_b	jmp	#LR__4235
2a8c4                 | LR__4234
2a8c4     01 FA 65 F6 | 	neg	result1, #1
2a8c8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2a8cc                 | LR__4235
2a8cc     80 00 00 FF 
2a8d0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2a8d4     2C 00 90 CD |  if_b	jmp	#LR__4236
2a8d8     03 03 02 F6 | 	mov	_var02, _var04
2a8dc     80 00 00 FF 
2a8e0     00 02 86 F1 | 	sub	_var02, ##65536
2a8e4     06 02 66 F0 | 	shl	_var02, #6
2a8e8     80 FF 01 FF 
2a8ec     00 02 06 F5 | 	and	_var02, ##67043328
2a8f0     6E 00 6C FF 
2a8f4     00 08 06 F6 | 	mov	_var05, ##-671032320
2a8f8     01 09 42 F5 | 	or	_var05, _var02
2a8fc     09 06 46 F7 | 	zerox	_var04, #9
2a900     04 07 42 F5 | 	or	_var04, _var05
2a904                 | LR__4236
2a904                 | LR__4237
2a904     09 05 62 FC | 	wrlong	_var03, arg01
2a908                 | ' 	}
2a908                 | ' #line 811 "ff.c"
2a908                 | ' 	*str = p;
2a908                 | ' 	return uc;
2a908     03 FB 01 F6 | 	mov	result1, _var04
2a90c                 | _fatfs_cc_tchar2uni_ret
2a90c     2D 00 64 FD | 	ret
2a910                 | 
2a910                 | _fatfs_cc_put_utf
2a910     80 12 16 F2 | 	cmp	arg01, #128 wc
2a914     18 00 90 3D |  if_ae	jmp	#LR__4240
2a918     01 16 16 F2 | 	cmp	arg03, #1 wc
2a91c     00 FA 05 C6 |  if_b	mov	result1, #0
2a920     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2a924     0A 13 42 FC | 	wrbyte	arg01, arg02
2a928                 | ' 		*buf = (TCHAR)chr;
2a928                 | ' 		return 1;
2a928     01 FA 05 F6 | 	mov	result1, #1
2a92c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2a930                 | LR__4240
2a930     04 00 00 FF 
2a934     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2a938     40 00 90 3D |  if_ae	jmp	#LR__4241
2a93c     02 16 16 F2 | 	cmp	arg03, #2 wc
2a940     00 FA 05 C6 |  if_b	mov	result1, #0
2a944     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2a948     09 FB 01 F6 | 	mov	result1, arg01
2a94c     06 FA 45 F0 | 	shr	result1, #6
2a950     1F FA 05 F5 | 	and	result1, #31
2a954     C0 16 06 F6 | 	mov	arg03, #192
2a958     FD 16 42 F5 | 	or	arg03, result1
2a95c     0A 17 42 FC | 	wrbyte	arg03, arg02
2a960     01 14 06 F1 | 	add	arg02, #1
2a964     3F 12 06 F5 | 	and	arg01, #63
2a968     80 FA 05 F6 | 	mov	result1, #128
2a96c     09 FB 41 F5 | 	or	result1, arg01
2a970     0A FB 41 FC | 	wrbyte	result1, arg02
2a974                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2a974                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2a974                 | ' 		return 2;
2a974     02 FA 05 F6 | 	mov	result1, #2
2a978     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2a97c                 | LR__4241
2a97c     80 00 00 FF 
2a980     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2a984     70 00 90 3D |  if_ae	jmp	#LR__4244
2a988     03 16 16 F2 | 	cmp	arg03, #3 wc
2a98c     18 00 90 CD |  if_b	jmp	#LR__4242
2a990     6C 00 00 FF 
2a994     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2a998     14 00 90 CD |  if_b	jmp	#LR__4243
2a99c     70 00 00 FF 
2a9a0     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2a9a4     08 00 90 3D |  if_ae	jmp	#LR__4243
2a9a8                 | LR__4242
2a9a8     00 FA 05 F6 | 	mov	result1, #0
2a9ac     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2a9b0                 | LR__4243
2a9b0     09 FB 59 F8 | 	getnib	result1, arg01, #3
2a9b4     E0 16 06 F6 | 	mov	arg03, #224
2a9b8     FD 16 42 F5 | 	or	arg03, result1
2a9bc     0A 17 42 FC | 	wrbyte	arg03, arg02
2a9c0     01 14 06 F1 | 	add	arg02, #1
2a9c4     09 FB 01 F6 | 	mov	result1, arg01
2a9c8     06 FA 45 F0 | 	shr	result1, #6
2a9cc     3F FA 05 F5 | 	and	result1, #63
2a9d0     80 16 06 F6 | 	mov	arg03, #128
2a9d4     FD 16 42 F5 | 	or	arg03, result1
2a9d8     0A 17 42 FC | 	wrbyte	arg03, arg02
2a9dc     01 14 06 F1 | 	add	arg02, #1
2a9e0     3F 12 06 F5 | 	and	arg01, #63
2a9e4     80 FA 05 F6 | 	mov	result1, #128
2a9e8     09 FB 41 F5 | 	or	result1, arg01
2a9ec     0A FB 41 FC | 	wrbyte	result1, arg02
2a9f0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2a9f0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2a9f0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2a9f0                 | ' 		return 3;
2a9f0     03 FA 05 F6 | 	mov	result1, #3
2a9f4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2a9f8                 | LR__4244
2a9f8     04 16 16 F2 | 	cmp	arg03, #4 wc
2a9fc     00 FA 05 C6 |  if_b	mov	result1, #0
2aa00     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2aa04     09 01 02 F6 | 	mov	_var01, arg01
2aa08     E0 01 06 F4 | 	bitl	_var01, #480
2aa0c     00 00 6C FF 
2aa10     00 00 86 F1 | 	sub	_var01, ##-671088640
2aa14     06 00 46 F0 | 	shr	_var01, #6
2aa18     09 13 32 F9 | 	getword	arg01, arg01, #0
2aa1c     6E 00 00 FF 
2aa20     00 12 86 F1 | 	sub	arg01, ##56320
2aa24     00 08 00 FF 
2aa28     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2aa2c     02 00 00 CF 
2aa30     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2aa34     00 FA 05 36 |  if_ae	mov	result1, #0
2aa38     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2aa3c     09 01 42 F5 | 	or	_var01, arg01
2aa40     80 00 00 FF 
2aa44     00 00 06 F1 | 	add	_var01, ##65536
2aa48     00 FB 01 F6 | 	mov	result1, _var01
2aa4c     12 FA 45 F0 | 	shr	result1, #18
2aa50     07 FA 05 F5 | 	and	result1, #7
2aa54     F0 16 06 F6 | 	mov	arg03, #240
2aa58     FD 16 42 F5 | 	or	arg03, result1
2aa5c     0A 17 42 FC | 	wrbyte	arg03, arg02
2aa60     01 14 06 F1 | 	add	arg02, #1
2aa64     00 FB 01 F6 | 	mov	result1, _var01
2aa68     0C FA 45 F0 | 	shr	result1, #12
2aa6c     3F FA 05 F5 | 	and	result1, #63
2aa70     80 16 06 F6 | 	mov	arg03, #128
2aa74     FD 16 42 F5 | 	or	arg03, result1
2aa78     0A 17 42 FC | 	wrbyte	arg03, arg02
2aa7c     01 14 06 F1 | 	add	arg02, #1
2aa80     00 FB 01 F6 | 	mov	result1, _var01
2aa84     06 FA 45 F0 | 	shr	result1, #6
2aa88     3F FA 05 F5 | 	and	result1, #63
2aa8c     80 16 06 F6 | 	mov	arg03, #128
2aa90     FD 16 42 F5 | 	or	arg03, result1
2aa94     0A 17 42 FC | 	wrbyte	arg03, arg02
2aa98     01 14 06 F1 | 	add	arg02, #1
2aa9c     3F 00 06 F5 | 	and	_var01, #63
2aaa0     80 FA 05 F6 | 	mov	result1, #128
2aaa4     00 FB 41 F5 | 	or	result1, _var01
2aaa8     0A FB 41 FC | 	wrbyte	result1, arg02
2aaac                 | ' 	chr = (hc | chr) + 0x10000;
2aaac                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2aaac                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2aaac                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2aaac                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2aaac                 | ' 	return 4;
2aaac     04 FA 05 F6 | 	mov	result1, #4
2aab0                 | _fatfs_cc_put_utf_ret
2aab0     2D 00 64 FD | 	ret
2aab4                 | 
2aab4                 | _fatfs_cc_sync_window
2aab4     02 4A 05 F6 | 	mov	COUNT_, #2
2aab8     A8 00 A0 FD | 	call	#pushregs_
2aabc     09 27 02 F6 | 	mov	local01, arg01
2aac0     00 28 06 F6 | 	mov	local02, #0
2aac4     03 26 06 F1 | 	add	local01, #3
2aac8     13 FB C9 FA | 	rdbyte	result1, local01 wz
2aacc     03 26 86 F1 | 	sub	local01, #3
2aad0     A4 00 90 AD |  if_e	jmp	#LR__4252
2aad4     01 26 06 F1 | 	add	local01, #1
2aad8     13 13 C2 FA | 	rdbyte	arg01, local01
2aadc     33 26 06 F1 | 	add	local01, #51
2aae0     13 15 02 F6 | 	mov	arg02, local01
2aae4     04 26 86 F1 | 	sub	local01, #4
2aae8     13 17 02 FB | 	rdlong	arg03, local01
2aaec     30 26 86 F1 | 	sub	local01, #48
2aaf0     01 18 06 F6 | 	mov	arg04, #1
2aaf4     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2aaf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2aafc     74 00 90 5D |  if_ne	jmp	#LR__4250
2ab00     03 26 06 F1 | 	add	local01, #3
2ab04     13 01 48 FC | 	wrbyte	#0, local01
2ab08     2D 26 06 F1 | 	add	local01, #45
2ab0c     13 FB 01 FB | 	rdlong	result1, local01
2ab10     0C 26 86 F1 | 	sub	local01, #12
2ab14     13 19 02 FB | 	rdlong	arg04, local01
2ab18     0C FB 81 F1 | 	sub	result1, arg04
2ab1c     08 26 86 F1 | 	sub	local01, #8
2ab20     13 19 02 FB | 	rdlong	arg04, local01
2ab24     1C 26 86 F1 | 	sub	local01, #28
2ab28     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ab2c     48 00 90 3D |  if_ae	jmp	#LR__4251
2ab30     02 26 06 F1 | 	add	local01, #2
2ab34     13 19 C2 FA | 	rdbyte	arg04, local01
2ab38     02 26 86 F1 | 	sub	local01, #2
2ab3c     02 18 0E F2 | 	cmp	arg04, #2 wz
2ab40     34 00 90 5D |  if_ne	jmp	#LR__4251
2ab44     01 26 06 F1 | 	add	local01, #1
2ab48     13 13 C2 FA | 	rdbyte	arg01, local01
2ab4c     33 26 06 F1 | 	add	local01, #51
2ab50     13 15 02 F6 | 	mov	arg02, local01
2ab54     04 26 86 F1 | 	sub	local01, #4
2ab58     13 17 02 FB | 	rdlong	arg03, local01
2ab5c     14 26 86 F1 | 	sub	local01, #20
2ab60     13 27 02 FB | 	rdlong	local01, local01
2ab64     13 17 02 F1 | 	add	arg03, local01
2ab68     01 18 06 F6 | 	mov	arg04, #1
2ab6c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2ab70     04 00 90 FD | 	jmp	#LR__4251
2ab74                 | LR__4250
2ab74     01 28 06 F6 | 	mov	local02, #1
2ab78                 | LR__4251
2ab78                 | LR__4252
2ab78                 | ' 			res = FR_DISK_ERR;
2ab78                 | ' 		}
2ab78                 | ' 	}
2ab78                 | ' 	return res;
2ab78     14 FB 01 F6 | 	mov	result1, local02
2ab7c     A7 F0 03 F6 | 	mov	ptra, fp
2ab80     B2 00 A0 FD | 	call	#popregs_
2ab84                 | _fatfs_cc_sync_window_ret
2ab84     2D 00 64 FD | 	ret
2ab88                 | 
2ab88                 | _fatfs_cc_move_window
2ab88     03 4A 05 F6 | 	mov	COUNT_, #3
2ab8c     A8 00 A0 FD | 	call	#pushregs_
2ab90     09 27 02 F6 | 	mov	local01, arg01
2ab94     0A 29 02 F6 | 	mov	local02, arg02
2ab98     00 2A 06 F6 | 	mov	local03, #0
2ab9c     30 26 06 F1 | 	add	local01, #48
2aba0     13 19 02 FB | 	rdlong	arg04, local01
2aba4     30 26 86 F1 | 	sub	local01, #48
2aba8     0C 29 0A F2 | 	cmp	local02, arg04 wz
2abac     40 00 90 AD |  if_e	jmp	#LR__4261
2abb0     13 13 02 F6 | 	mov	arg01, local01
2abb4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2abb8     FD 2A 0A F6 | 	mov	local03, result1 wz
2abbc     30 00 90 5D |  if_ne	jmp	#LR__4260
2abc0     01 26 06 F1 | 	add	local01, #1
2abc4     13 13 C2 FA | 	rdbyte	arg01, local01
2abc8     33 26 06 F1 | 	add	local01, #51
2abcc     13 15 02 F6 | 	mov	arg02, local01
2abd0     14 17 02 F6 | 	mov	arg03, local02
2abd4     01 18 06 F6 | 	mov	arg04, #1
2abd8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2abdc     00 FA 0D F2 | 	cmp	result1, #0 wz
2abe0     01 28 66 56 |  if_ne	neg	local02, #1
2abe4     01 2A 06 56 |  if_ne	mov	local03, #1
2abe8     04 26 86 F1 | 	sub	local01, #4
2abec     13 29 62 FC | 	wrlong	local02, local01
2abf0                 | LR__4260
2abf0                 | LR__4261
2abf0                 | ' 				sect = (LBA_t)0 - 1;
2abf0                 | ' 				res = FR_DISK_ERR;
2abf0                 | ' 			}
2abf0                 | ' 			fs->winsect = sect;
2abf0                 | ' 		}
2abf0                 | ' 	}
2abf0                 | ' 	return res;
2abf0     15 FB 01 F6 | 	mov	result1, local03
2abf4     A7 F0 03 F6 | 	mov	ptra, fp
2abf8     B2 00 A0 FD | 	call	#popregs_
2abfc                 | _fatfs_cc_move_window_ret
2abfc     2D 00 64 FD | 	ret
2ac00                 | 
2ac00                 | _fatfs_cc_sync_fs
2ac00     02 4A 05 F6 | 	mov	COUNT_, #2
2ac04     A8 00 A0 FD | 	call	#pushregs_
2ac08     09 27 02 F6 | 	mov	local01, arg01
2ac0c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2ac10     FD 28 0A F6 | 	mov	local02, result1 wz
2ac14     D8 00 90 5D |  if_ne	jmp	#LR__4271
2ac18     13 19 C2 FA | 	rdbyte	arg04, local01
2ac1c     03 18 0E F2 | 	cmp	arg04, #3 wz
2ac20     04 26 06 A1 |  if_e	add	local01, #4
2ac24     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2ac28     04 26 86 A1 |  if_e	sub	local01, #4
2ac2c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2ac30     A0 00 90 5D |  if_ne	jmp	#LR__4270
2ac34     34 26 06 F1 | 	add	local01, #52
2ac38     13 13 02 F6 | 	mov	arg01, local01
2ac3c     00 14 06 F6 | 	mov	arg02, #0
2ac40     09 16 C6 F9 | 	decod	arg03, #9
2ac44     98 00 A0 FD | 	call	#\builtin_bytefill_
2ac48     13 13 02 F6 | 	mov	arg01, local01
2ac4c     FE 13 06 F1 | 	add	arg01, #510
2ac50     55 00 80 FF 
2ac54     09 AB 58 FC | 	wrword	##43605, arg01
2ac58     A9 B0 A0 FF 
2ac5c     13 A5 68 FC | 	wrlong	##1096897106, local01
2ac60     13 13 02 F6 | 	mov	arg01, local01
2ac64     E4 13 06 F1 | 	add	arg01, #484
2ac68     B9 A0 B0 FF 
2ac6c     09 E5 68 FC | 	wrlong	##1631679090, arg01
2ac70     13 13 02 F6 | 	mov	arg01, local01
2ac74     E8 13 06 F1 | 	add	arg01, #488
2ac78     20 26 86 F1 | 	sub	local01, #32
2ac7c     13 15 02 FB | 	rdlong	arg02, local01
2ac80     09 15 62 FC | 	wrlong	arg02, arg01
2ac84     20 26 06 F1 | 	add	local01, #32
2ac88     13 13 02 F6 | 	mov	arg01, local01
2ac8c     EC 13 06 F1 | 	add	arg01, #492
2ac90     24 26 86 F1 | 	sub	local01, #36
2ac94     13 15 02 FB | 	rdlong	arg02, local01
2ac98     09 15 62 FC | 	wrlong	arg02, arg01
2ac9c     10 26 06 F1 | 	add	local01, #16
2aca0     13 17 02 FB | 	rdlong	arg03, local01
2aca4     01 16 06 F1 | 	add	arg03, #1
2aca8     10 26 06 F1 | 	add	local01, #16
2acac     13 17 62 FC | 	wrlong	arg03, local01
2acb0     2F 26 86 F1 | 	sub	local01, #47
2acb4     13 13 C2 FA | 	rdbyte	arg01, local01
2acb8     33 26 06 F1 | 	add	local01, #51
2acbc     13 15 02 F6 | 	mov	arg02, local01
2acc0     01 18 06 F6 | 	mov	arg04, #1
2acc4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2acc8     30 26 86 F1 | 	sub	local01, #48
2accc     13 01 48 FC | 	wrbyte	#0, local01
2acd0     04 26 86 F1 | 	sub	local01, #4
2acd4                 | LR__4270
2acd4     01 26 06 F1 | 	add	local01, #1
2acd8     13 13 C2 FA | 	rdbyte	arg01, local01
2acdc     00 14 06 F6 | 	mov	arg02, #0
2ace0     00 16 06 F6 | 	mov	arg03, #0
2ace4     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2ace8     00 FA 0D F2 | 	cmp	result1, #0 wz
2acec     01 28 06 56 |  if_ne	mov	local02, #1
2acf0                 | LR__4271
2acf0                 | ' 	}
2acf0                 | ' 
2acf0                 | ' 	return res;
2acf0     14 FB 01 F6 | 	mov	result1, local02
2acf4     A7 F0 03 F6 | 	mov	ptra, fp
2acf8     B2 00 A0 FD | 	call	#popregs_
2acfc                 | _fatfs_cc_sync_fs_ret
2acfc     2D 00 64 FD | 	ret
2ad00                 | 
2ad00                 | _fatfs_cc_clst2sect
2ad00     02 14 86 F1 | 	sub	arg02, #2
2ad04     18 12 06 F1 | 	add	arg01, #24
2ad08     09 01 02 FB | 	rdlong	_var01, arg01
2ad0c     18 12 86 F1 | 	sub	arg01, #24
2ad10     02 00 86 F1 | 	sub	_var01, #2
2ad14     00 15 12 F2 | 	cmp	arg02, _var01 wc
2ad18     00 FA 05 36 |  if_ae	mov	result1, #0
2ad1c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2ad20     0A 12 06 F1 | 	add	arg01, #10
2ad24     09 01 E2 FA | 	rdword	_var01, arg01
2ad28     0A 01 02 FD | 	qmul	_var01, arg02
2ad2c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2ad2c     22 12 06 F1 | 	add	arg01, #34
2ad30     09 FB 01 FB | 	rdlong	result1, arg01
2ad34     18 00 62 FD | 	getqx	_var01
2ad38     00 FB 01 F1 | 	add	result1, _var01
2ad3c                 | _fatfs_cc_clst2sect_ret
2ad3c     2D 00 64 FD | 	ret
2ad40                 | 
2ad40                 | _fatfs_cc_get_fat
2ad40     07 4A 05 F6 | 	mov	COUNT_, #7
2ad44     A8 00 A0 FD | 	call	#pushregs_
2ad48     0A 27 02 F6 | 	mov	local01, arg02
2ad4c     09 29 02 FB | 	rdlong	local02, arg01
2ad50     02 26 16 F2 | 	cmp	local01, #2 wc
2ad54     14 00 90 CD |  if_b	jmp	#LR__4280
2ad58     18 28 06 F1 | 	add	local02, #24
2ad5c     14 2B 02 FB | 	rdlong	local03, local02
2ad60     18 28 86 F1 | 	sub	local02, #24
2ad64     15 27 12 F2 | 	cmp	local01, local03 wc
2ad68     08 00 90 CD |  if_b	jmp	#LR__4281
2ad6c                 | LR__4280
2ad6c     01 2C 06 F6 | 	mov	local04, #1
2ad70     60 01 90 FD | 	jmp	#LR__4288
2ad74                 | LR__4281
2ad74     01 2C 66 F6 | 	neg	local04, #1
2ad78                 | ' 		val = 0xFFFFFFFF;
2ad78                 | ' 
2ad78                 | ' 		switch (fs->fs_type) {
2ad78     14 2F C2 FA | 	rdbyte	local05, local02
2ad7c     01 2E 86 F1 | 	sub	local05, #1
2ad80     03 2E 26 F3 | 	fle	local05, #3
2ad84     30 2E 62 FD | 	jmprel	local05
2ad88                 | LR__4282
2ad88     0C 00 90 FD | 	jmp	#LR__4283
2ad8c     B8 00 90 FD | 	jmp	#LR__4284
2ad90     F8 00 90 FD | 	jmp	#LR__4285
2ad94     38 01 90 FD | 	jmp	#LR__4286
2ad98                 | LR__4283
2ad98     13 2F 02 F6 | 	mov	local05, local01
2ad9c     13 13 02 F6 | 	mov	arg01, local01
2ada0     01 12 46 F0 | 	shr	arg01, #1
2ada4     09 2F 02 F1 | 	add	local05, arg01
2ada8     14 13 02 F6 | 	mov	arg01, local02
2adac     17 31 02 F6 | 	mov	local06, local05
2adb0     09 30 46 F0 | 	shr	local06, #9
2adb4     24 28 06 F1 | 	add	local02, #36
2adb8     14 15 02 FB | 	rdlong	arg02, local02
2adbc     24 28 86 F1 | 	sub	local02, #36
2adc0     18 15 02 F1 | 	add	arg02, local06
2adc4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2adc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2adcc     04 01 90 5D |  if_ne	jmp	#LR__4287
2add0     17 31 02 F6 | 	mov	local06, local05
2add4     FF 31 06 F5 | 	and	local06, #511
2add8     34 28 06 F1 | 	add	local02, #52
2addc     14 31 02 F1 | 	add	local06, local02
2ade0     18 33 C2 FA | 	rdbyte	local07, local06
2ade4     34 28 86 F1 | 	sub	local02, #52
2ade8     14 13 02 F6 | 	mov	arg01, local02
2adec     01 2E 06 F1 | 	add	local05, #1
2adf0     17 31 02 F6 | 	mov	local06, local05
2adf4     09 30 46 F0 | 	shr	local06, #9
2adf8     24 28 06 F1 | 	add	local02, #36
2adfc     14 15 02 FB | 	rdlong	arg02, local02
2ae00     24 28 86 F1 | 	sub	local02, #36
2ae04     18 15 02 F1 | 	add	arg02, local06
2ae08     7C FD BF FD | 	call	#_fatfs_cc_move_window
2ae0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae10     C0 00 90 5D |  if_ne	jmp	#LR__4287
2ae14     FF 2F 06 F5 | 	and	local05, #511
2ae18     34 28 06 F1 | 	add	local02, #52
2ae1c     14 2F 02 F1 | 	add	local05, local02
2ae20     17 31 C2 FA | 	rdbyte	local06, local05
2ae24     08 30 66 F0 | 	shl	local06, #8
2ae28     18 33 42 F5 | 	or	local07, local06
2ae2c     01 26 CE F7 | 	test	local01, #1 wz
2ae30     04 32 46 50 |  if_ne	shr	local07, #4
2ae34     19 2B 02 56 |  if_ne	mov	local03, local07
2ae38     0B 32 46 A7 |  if_e	zerox	local07, #11
2ae3c     19 2B 02 A6 |  if_e	mov	local03, local07
2ae40     15 2D 02 F6 | 	mov	local04, local03
2ae44                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ae44                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ae44                 | ' 			break;
2ae44     8C 00 90 FD | 	jmp	#LR__4287
2ae48                 | LR__4284
2ae48     14 13 02 F6 | 	mov	arg01, local02
2ae4c     13 31 02 F6 | 	mov	local06, local01
2ae50     08 30 46 F0 | 	shr	local06, #8
2ae54     24 28 06 F1 | 	add	local02, #36
2ae58     14 15 02 FB | 	rdlong	arg02, local02
2ae5c     24 28 86 F1 | 	sub	local02, #36
2ae60     18 15 02 F1 | 	add	arg02, local06
2ae64     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ae68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae6c     64 00 90 5D |  if_ne	jmp	#LR__4287
2ae70     34 28 06 F1 | 	add	local02, #52
2ae74     01 26 66 F0 | 	shl	local01, #1
2ae78     FF 27 06 F5 | 	and	local01, #511
2ae7c     13 29 02 F1 | 	add	local02, local01
2ae80                 | ' {
2ae80                 | ' 
2ae80                 | ' 	return *((WORD*)ptr);
2ae80     14 FB E1 FA | 	rdword	result1, local02
2ae84     FD 2C 32 F9 | 	getword	local04, result1, #0
2ae88                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ae88                 | ' 			break;
2ae88     48 00 90 FD | 	jmp	#LR__4287
2ae8c                 | LR__4285
2ae8c     14 13 02 F6 | 	mov	arg01, local02
2ae90     13 31 02 F6 | 	mov	local06, local01
2ae94     07 30 46 F0 | 	shr	local06, #7
2ae98     24 28 06 F1 | 	add	local02, #36
2ae9c     14 15 02 FB | 	rdlong	arg02, local02
2aea0     24 28 86 F1 | 	sub	local02, #36
2aea4     18 15 02 F1 | 	add	arg02, local06
2aea8     DC FC BF FD | 	call	#_fatfs_cc_move_window
2aeac     00 FA 0D F2 | 	cmp	result1, #0 wz
2aeb0     20 00 90 5D |  if_ne	jmp	#LR__4287
2aeb4     34 28 06 F1 | 	add	local02, #52
2aeb8     02 26 66 F0 | 	shl	local01, #2
2aebc     FF 27 06 F5 | 	and	local01, #511
2aec0     13 29 02 F1 | 	add	local02, local01
2aec4                 | ' {
2aec4                 | ' 
2aec4                 | ' 	return *((DWORD*)ptr);
2aec4     14 2D 02 FB | 	rdlong	local04, local02
2aec8     7C 2C 06 F4 | 	bitl	local04, #124
2aecc                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2aecc                 | ' 			break;
2aecc     04 00 90 FD | 	jmp	#LR__4287
2aed0                 | LR__4286
2aed0     01 2C 06 F6 | 	mov	local04, #1
2aed4                 | LR__4287
2aed4                 | LR__4288
2aed4                 | ' 			val = 1;
2aed4                 | ' 		}
2aed4                 | ' 	}
2aed4                 | ' 
2aed4                 | ' 	return val;
2aed4     16 FB 01 F6 | 	mov	result1, local04
2aed8     A7 F0 03 F6 | 	mov	ptra, fp
2aedc     B2 00 A0 FD | 	call	#popregs_
2aee0                 | _fatfs_cc_get_fat_ret
2aee0     2D 00 64 FD | 	ret
2aee4                 | 
2aee4                 | _fatfs_cc_put_fat
2aee4     08 4A 05 F6 | 	mov	COUNT_, #8
2aee8     A8 00 A0 FD | 	call	#pushregs_
2aeec     09 27 02 F6 | 	mov	local01, arg01
2aef0     0A 29 02 F6 | 	mov	local02, arg02
2aef4     0B 2B 02 F6 | 	mov	local03, arg03
2aef8     02 2C 06 F6 | 	mov	local04, #2
2aefc     02 28 16 F2 | 	cmp	local02, #2 wc
2af00     E0 01 90 CD |  if_b	jmp	#LR__4297
2af04     18 26 06 F1 | 	add	local01, #24
2af08     13 2F 02 FB | 	rdlong	local05, local01
2af0c     18 26 86 F1 | 	sub	local01, #24
2af10     17 29 12 F2 | 	cmp	local02, local05 wc
2af14     CC 01 90 3D |  if_ae	jmp	#LR__4297
2af18                 | ' 		switch (fs->fs_type) {
2af18     13 31 C2 FA | 	rdbyte	local06, local01
2af1c     01 30 86 F1 | 	sub	local06, #1
2af20     03 30 26 F3 | 	fle	local06, #3
2af24     30 30 62 FD | 	jmprel	local06
2af28                 | LR__4290
2af28     0C 00 90 FD | 	jmp	#LR__4291
2af2c     F8 00 90 FD | 	jmp	#LR__4294
2af30     40 01 90 FD | 	jmp	#LR__4295
2af34     AC 01 90 FD | 	jmp	#LR__4296
2af38                 | LR__4291
2af38     14 33 02 F6 | 	mov	local07, local02
2af3c     14 2F 02 F6 | 	mov	local05, local02
2af40     01 2E 46 F0 | 	shr	local05, #1
2af44     17 33 02 F1 | 	add	local07, local05
2af48     13 13 02 F6 | 	mov	arg01, local01
2af4c     19 31 02 F6 | 	mov	local06, local07
2af50     09 30 46 F0 | 	shr	local06, #9
2af54     24 26 06 F1 | 	add	local01, #36
2af58     13 15 02 FB | 	rdlong	arg02, local01
2af5c     24 26 86 F1 | 	sub	local01, #36
2af60     18 15 02 F1 | 	add	arg02, local06
2af64     20 FC BF FD | 	call	#_fatfs_cc_move_window
2af68     FD 2C 0A F6 | 	mov	local04, result1 wz
2af6c     74 01 90 5D |  if_ne	jmp	#LR__4296
2af70     34 26 06 F1 | 	add	local01, #52
2af74     13 35 02 F6 | 	mov	local08, local01
2af78     19 2F 02 F6 | 	mov	local05, local07
2af7c     FF 2F 06 F5 | 	and	local05, #511
2af80     17 35 02 F1 | 	add	local08, local05
2af84     01 28 CE F7 | 	test	local02, #1 wz
2af88     34 26 86 F1 | 	sub	local01, #52
2af8c     01 32 06 F1 | 	add	local07, #1
2af90     18 00 90 AD |  if_e	jmp	#LR__4292
2af94     1A 2F C2 FA | 	rdbyte	local05, local08
2af98     17 2F 42 F8 | 	getnib	local05, local05, #0
2af9c     15 31 E2 F8 | 	getbyte	local06, local03, #0
2afa0     04 30 66 F0 | 	shl	local06, #4
2afa4     18 2F 42 F5 | 	or	local05, local06
2afa8     04 00 90 FD | 	jmp	#LR__4293
2afac                 | LR__4292
2afac     15 2F 02 F6 | 	mov	local05, local03
2afb0                 | LR__4293
2afb0     1A 2F 42 FC | 	wrbyte	local05, local08
2afb4     03 26 06 F1 | 	add	local01, #3
2afb8     13 03 48 FC | 	wrbyte	#1, local01
2afbc     03 26 86 F1 | 	sub	local01, #3
2afc0     13 13 02 F6 | 	mov	arg01, local01
2afc4     19 35 02 F6 | 	mov	local08, local07
2afc8     09 34 46 F0 | 	shr	local08, #9
2afcc     24 26 06 F1 | 	add	local01, #36
2afd0     13 15 02 FB | 	rdlong	arg02, local01
2afd4     24 26 86 F1 | 	sub	local01, #36
2afd8     1A 15 02 F1 | 	add	arg02, local08
2afdc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2afe0     FD 2C 0A F6 | 	mov	local04, result1 wz
2afe4     FC 00 90 5D |  if_ne	jmp	#LR__4296
2afe8     34 26 06 F1 | 	add	local01, #52
2afec     13 35 02 F6 | 	mov	local08, local01
2aff0     FF 33 06 F5 | 	and	local07, #511
2aff4     19 35 02 F1 | 	add	local08, local07
2aff8     01 28 CE F7 | 	test	local02, #1 wz
2affc     04 2A 46 50 |  if_ne	shr	local03, #4
2b000     15 2F 02 56 |  if_ne	mov	local05, local03
2b004     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2b008     F0 2E 06 A5 |  if_e	and	local05, #240
2b00c     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2b010     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2b014     15 2F 42 A5 |  if_e	or	local05, local03
2b018     1A 2F 42 FC | 	wrbyte	local05, local08
2b01c     31 26 86 F1 | 	sub	local01, #49
2b020     13 03 48 FC | 	wrbyte	#1, local01
2b024                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2b024                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2b024                 | ' 			fs->wflag = 1;
2b024                 | ' 			break;
2b024     BC 00 90 FD | 	jmp	#LR__4296
2b028                 | LR__4294
2b028     13 13 02 F6 | 	mov	arg01, local01
2b02c     14 35 02 F6 | 	mov	local08, local02
2b030     08 34 46 F0 | 	shr	local08, #8
2b034     24 26 06 F1 | 	add	local01, #36
2b038     13 15 02 FB | 	rdlong	arg02, local01
2b03c     24 26 86 F1 | 	sub	local01, #36
2b040     1A 15 02 F1 | 	add	arg02, local08
2b044     40 FB BF FD | 	call	#_fatfs_cc_move_window
2b048     FD 2C 0A F6 | 	mov	local04, result1 wz
2b04c     94 00 90 5D |  if_ne	jmp	#LR__4296
2b050     34 26 06 F1 | 	add	local01, #52
2b054     13 13 02 F6 | 	mov	arg01, local01
2b058     01 28 66 F0 | 	shl	local02, #1
2b05c     FF 29 06 F5 | 	and	local02, #511
2b060     14 13 02 F1 | 	add	arg01, local02
2b064     09 2B 52 FC | 	wrword	local03, arg01
2b068     31 26 86 F1 | 	sub	local01, #49
2b06c     13 03 48 FC | 	wrbyte	#1, local01
2b070                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2b070                 | ' 			fs->wflag = 1;
2b070                 | ' 			break;
2b070     70 00 90 FD | 	jmp	#LR__4296
2b074                 | LR__4295
2b074     13 13 02 F6 | 	mov	arg01, local01
2b078     14 35 02 F6 | 	mov	local08, local02
2b07c     07 34 46 F0 | 	shr	local08, #7
2b080     24 26 06 F1 | 	add	local01, #36
2b084     13 15 02 FB | 	rdlong	arg02, local01
2b088     24 26 86 F1 | 	sub	local01, #36
2b08c     1A 15 02 F1 | 	add	arg02, local08
2b090     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2b094     FD 2C 0A F6 | 	mov	local04, result1 wz
2b098     48 00 90 5D |  if_ne	jmp	#LR__4296
2b09c     7C 2A 06 F4 | 	bitl	local03, #124
2b0a0     34 26 06 F1 | 	add	local01, #52
2b0a4     14 35 02 F6 | 	mov	local08, local02
2b0a8     02 34 66 F0 | 	shl	local08, #2
2b0ac     FF 35 06 F5 | 	and	local08, #511
2b0b0     13 13 02 F6 | 	mov	arg01, local01
2b0b4     1A 13 02 F1 | 	add	arg01, local08
2b0b8                 | ' {
2b0b8                 | ' 
2b0b8                 | ' 	return *((DWORD*)ptr);
2b0b8     09 35 02 FB | 	rdlong	local08, arg01
2b0bc     00 00 78 FF 
2b0c0     00 34 06 F5 | 	and	local08, ##-268435456
2b0c4     1A 2B 42 F5 | 	or	local03, local08
2b0c8     13 13 02 F6 | 	mov	arg01, local01
2b0cc     02 28 66 F0 | 	shl	local02, #2
2b0d0     FF 29 06 F5 | 	and	local02, #511
2b0d4     14 13 02 F1 | 	add	arg01, local02
2b0d8     09 2B 62 FC | 	wrlong	local03, arg01
2b0dc     31 26 86 F1 | 	sub	local01, #49
2b0e0     13 03 48 FC | 	wrbyte	#1, local01
2b0e4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2b0e4                 | ' 			}
2b0e4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2b0e4                 | ' 			fs->wflag = 1;
2b0e4                 | ' 			break;
2b0e4                 | LR__4296
2b0e4                 | LR__4297
2b0e4                 | ' 		}
2b0e4                 | ' 	}
2b0e4                 | ' 	return res;
2b0e4     16 FB 01 F6 | 	mov	result1, local04
2b0e8     A7 F0 03 F6 | 	mov	ptra, fp
2b0ec     B2 00 A0 FD | 	call	#popregs_
2b0f0                 | _fatfs_cc_put_fat_ret
2b0f0     2D 00 64 FD | 	ret
2b0f4                 | 
2b0f4                 | _fatfs_cc_remove_chain
2b0f4     05 4A 05 F6 | 	mov	COUNT_, #5
2b0f8     A8 00 A0 FD | 	call	#pushregs_
2b0fc     09 27 02 F6 | 	mov	local01, arg01
2b100     0A 29 02 F6 | 	mov	local02, arg02
2b104     0B 2B 02 F6 | 	mov	local03, arg03
2b108     13 2D 02 FB | 	rdlong	local04, local01
2b10c     02 28 16 F2 | 	cmp	local02, #2 wc
2b110     14 00 90 CD |  if_b	jmp	#LR__4300
2b114     18 2C 06 F1 | 	add	local04, #24
2b118     16 FB 01 FB | 	rdlong	result1, local04
2b11c     18 2C 86 F1 | 	sub	local04, #24
2b120     FD 28 12 F2 | 	cmp	local02, result1 wc
2b124     08 00 90 CD |  if_b	jmp	#LR__4301
2b128                 | LR__4300
2b128     02 FA 05 F6 | 	mov	result1, #2
2b12c     CC 00 90 FD | 	jmp	#LR__4306
2b130                 | LR__4301
2b130     00 2A 0E F2 | 	cmp	local03, #0 wz
2b134     18 00 90 AD |  if_e	jmp	#LR__4302
2b138     15 15 02 F6 | 	mov	arg02, local03
2b13c     16 13 02 F6 | 	mov	arg01, local04
2b140     01 16 66 F6 | 	neg	arg03, #1
2b144     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2b148     00 FA 0D F2 | 	cmp	result1, #0 wz
2b14c     AC 00 90 5D |  if_ne	jmp	#LR__4306
2b150                 | LR__4302
2b150                 | ' 	}
2b150                 | ' 
2b150                 | ' 
2b150                 | ' 	do {
2b150                 | LR__4303
2b150     14 15 02 F6 | 	mov	arg02, local02
2b154     13 13 02 F6 | 	mov	arg01, local01
2b158     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2b15c     FD 2E 0A F6 | 	mov	local05, result1 wz
2b160     94 00 90 AD |  if_e	jmp	#LR__4305
2b164     01 2E 0E F2 | 	cmp	local05, #1 wz
2b168     02 FA 05 A6 |  if_e	mov	result1, #2
2b16c     8C 00 90 AD |  if_e	jmp	#LR__4306
2b170     FF FF 7F FF 
2b174     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2b178     01 FA 05 A6 |  if_e	mov	result1, #1
2b17c     7C 00 90 AD |  if_e	jmp	#LR__4306
2b180     14 15 02 F6 | 	mov	arg02, local02
2b184     16 13 02 F6 | 	mov	arg01, local04
2b188     00 16 06 F6 | 	mov	arg03, #0
2b18c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2b190     FD 2A 0A F6 | 	mov	local03, result1 wz
2b194     15 FB 01 56 |  if_ne	mov	result1, local03
2b198     60 00 90 5D |  if_ne	jmp	#LR__4306
2b19c     18 2C 06 F1 | 	add	local04, #24
2b1a0     16 2B 02 FB | 	rdlong	local03, local04
2b1a4     02 2A 86 F1 | 	sub	local03, #2
2b1a8     04 2C 86 F1 | 	sub	local04, #4
2b1ac     16 29 02 FB | 	rdlong	local02, local04
2b1b0     14 2C 86 F1 | 	sub	local04, #20
2b1b4     15 29 12 F2 | 	cmp	local02, local03 wc
2b1b8     24 00 90 3D |  if_ae	jmp	#LR__4304
2b1bc     14 2C 06 F1 | 	add	local04, #20
2b1c0     16 2B 02 FB | 	rdlong	local03, local04
2b1c4     01 2A 06 F1 | 	add	local03, #1
2b1c8     16 2B 62 FC | 	wrlong	local03, local04
2b1cc     10 2C 86 F1 | 	sub	local04, #16
2b1d0     16 2B C2 FA | 	rdbyte	local03, local04
2b1d4     01 2A 46 F5 | 	or	local03, #1
2b1d8     16 2B 42 FC | 	wrbyte	local03, local04
2b1dc     04 2C 86 F1 | 	sub	local04, #4
2b1e0                 | LR__4304
2b1e0     17 29 02 F6 | 	mov	local02, local05
2b1e4     18 2C 06 F1 | 	add	local04, #24
2b1e8     16 2F 02 FB | 	rdlong	local05, local04
2b1ec     18 2C 86 F1 | 	sub	local04, #24
2b1f0     17 29 12 F2 | 	cmp	local02, local05 wc
2b1f4     58 FF 9F CD |  if_b	jmp	#LR__4303
2b1f8                 | LR__4305
2b1f8                 | ' #line 1500 "ff.c"
2b1f8                 | ' 	return FR_OK;
2b1f8     00 FA 05 F6 | 	mov	result1, #0
2b1fc                 | LR__4306
2b1fc     A7 F0 03 F6 | 	mov	ptra, fp
2b200     B2 00 A0 FD | 	call	#popregs_
2b204                 | _fatfs_cc_remove_chain_ret
2b204     2D 00 64 FD | 	ret
2b208                 | 
2b208                 | _fatfs_cc_create_chain
2b208     09 4A 05 F6 | 	mov	COUNT_, #9
2b20c     A8 00 A0 FD | 	call	#pushregs_
2b210     09 27 02 F6 | 	mov	local01, arg01
2b214     0A 29 0A F6 | 	mov	local02, arg02 wz
2b218     13 2B 02 FB | 	rdlong	local03, local01
2b21c     28 00 90 5D |  if_ne	jmp	#LR__4310
2b220     10 2A 06 F1 | 	add	local03, #16
2b224     15 2D 0A FB | 	rdlong	local04, local03 wz
2b228     10 2A 86 F1 | 	sub	local03, #16
2b22c     18 2A 06 51 |  if_ne	add	local03, #24
2b230     15 2F 02 5B |  if_ne	rdlong	local05, local03
2b234     18 2A 86 51 |  if_ne	sub	local03, #24
2b238     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2b23c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4311
2b240     01 2C 06 F6 | 	mov	local04, #1
2b244     48 00 90 FD | 	jmp	#LR__4311
2b248                 | LR__4310
2b248     14 15 02 F6 | 	mov	arg02, local02
2b24c     13 13 02 F6 | 	mov	arg01, local01
2b250     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2b254     FD 2C 02 F6 | 	mov	local04, result1
2b258     02 2C 16 F2 | 	cmp	local04, #2 wc
2b25c     01 FA 05 C6 |  if_b	mov	result1, #1
2b260     BC 01 90 CD |  if_b	jmp	#LR__4321
2b264     FF FF 7F FF 
2b268     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2b26c     16 FB 01 A6 |  if_e	mov	result1, local04
2b270     AC 01 90 AD |  if_e	jmp	#LR__4321
2b274     18 2A 06 F1 | 	add	local03, #24
2b278     15 2F 02 FB | 	rdlong	local05, local03
2b27c     18 2A 86 F1 | 	sub	local03, #24
2b280     17 2D 12 F2 | 	cmp	local04, local05 wc
2b284     16 FB 01 C6 |  if_b	mov	result1, local04
2b288     94 01 90 CD |  if_b	jmp	#LR__4321
2b28c     14 2D 02 F6 | 	mov	local04, local02
2b290                 | LR__4311
2b290     14 2A 06 F1 | 	add	local03, #20
2b294     15 2F 0A FB | 	rdlong	local05, local03 wz
2b298     14 2A 86 F1 | 	sub	local03, #20
2b29c     00 FA 05 A6 |  if_e	mov	result1, #0
2b2a0     7C 01 90 AD |  if_e	jmp	#LR__4321
2b2a4     00 30 06 F6 | 	mov	local06, #0
2b2a8     14 2D 0A F2 | 	cmp	local04, local02 wz
2b2ac     74 00 90 5D |  if_ne	jmp	#LR__4314
2b2b0     16 31 02 F6 | 	mov	local06, local04
2b2b4     01 30 06 F1 | 	add	local06, #1
2b2b8     18 2A 06 F1 | 	add	local03, #24
2b2bc     15 2F 02 FB | 	rdlong	local05, local03
2b2c0     18 2A 86 F1 | 	sub	local03, #24
2b2c4     17 31 12 F2 | 	cmp	local06, local05 wc
2b2c8     02 30 06 36 |  if_ae	mov	local06, #2
2b2cc     18 15 02 F6 | 	mov	arg02, local06
2b2d0     13 13 02 F6 | 	mov	arg01, local01
2b2d4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2b2d8     FD 2E 02 F6 | 	mov	local05, result1
2b2dc     01 2E 0E F2 | 	cmp	local05, #1 wz
2b2e0     FF FF 7F 5F 
2b2e4     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2b2e8     17 FB 01 A6 |  if_e	mov	result1, local05
2b2ec     30 01 90 AD |  if_e	jmp	#LR__4321
2b2f0     00 2E 0E F2 | 	cmp	local05, #0 wz
2b2f4     2C 00 90 AD |  if_e	jmp	#LR__4313
2b2f8     10 2A 06 F1 | 	add	local03, #16
2b2fc     15 33 02 FB | 	rdlong	local07, local03
2b300     10 2A 86 F1 | 	sub	local03, #16
2b304     02 32 16 F2 | 	cmp	local07, #2 wc
2b308     14 00 90 CD |  if_b	jmp	#LR__4312
2b30c     18 2A 06 F1 | 	add	local03, #24
2b310     15 2F 02 FB | 	rdlong	local05, local03
2b314     18 2A 86 F1 | 	sub	local03, #24
2b318     17 33 12 F2 | 	cmp	local07, local05 wc
2b31c     19 2D 02 C6 |  if_b	mov	local04, local07
2b320                 | LR__4312
2b320     00 30 06 F6 | 	mov	local06, #0
2b324                 | LR__4313
2b324                 | LR__4314
2b324     00 30 0E F2 | 	cmp	local06, #0 wz
2b328     60 00 90 5D |  if_ne	jmp	#LR__4317
2b32c     16 31 02 F6 | 	mov	local06, local04
2b330                 | ' 			ncl = scl;
2b330                 | ' 			for (;;) {
2b330                 | LR__4315
2b330     01 30 06 F1 | 	add	local06, #1
2b334     18 2A 06 F1 | 	add	local03, #24
2b338     15 2F 02 FB | 	rdlong	local05, local03
2b33c     18 2A 86 F1 | 	sub	local03, #24
2b340     17 31 12 F2 | 	cmp	local06, local05 wc
2b344     02 30 06 36 |  if_ae	mov	local06, #2
2b348     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2b34c     00 FA 05 16 |  if_a	mov	result1, #0
2b350     CC 00 90 1D |  if_a	jmp	#LR__4321
2b354     18 15 02 F6 | 	mov	arg02, local06
2b358     13 13 02 F6 | 	mov	arg01, local01
2b35c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2b360     FD 32 0A F6 | 	mov	local07, result1 wz
2b364     24 00 90 AD |  if_e	jmp	#LR__4316
2b368     01 32 0E F2 | 	cmp	local07, #1 wz
2b36c     FF FF 7F 5F 
2b370     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2b374     19 FB 01 A6 |  if_e	mov	result1, local07
2b378     A4 00 90 AD |  if_e	jmp	#LR__4321
2b37c     16 31 0A F2 | 	cmp	local06, local04 wz
2b380     00 FA 05 A6 |  if_e	mov	result1, #0
2b384     98 00 90 AD |  if_e	jmp	#LR__4321
2b388     A4 FF 9F FD | 	jmp	#LR__4315
2b38c                 | LR__4316
2b38c                 | LR__4317
2b38c     15 13 02 F6 | 	mov	arg01, local03
2b390     18 15 02 F6 | 	mov	arg02, local06
2b394     01 16 66 F6 | 	neg	arg03, #1
2b398     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2b39c     FD 34 0A F6 | 	mov	local08, result1 wz
2b3a0     1C 00 90 5D |  if_ne	jmp	#LR__4318
2b3a4     00 28 0E F2 | 	cmp	local02, #0 wz
2b3a8     14 00 90 AD |  if_e	jmp	#LR__4318
2b3ac     15 13 02 F6 | 	mov	arg01, local03
2b3b0     14 15 02 F6 | 	mov	arg02, local02
2b3b4     18 17 02 F6 | 	mov	arg03, local06
2b3b8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2b3bc     FD 34 02 F6 | 	mov	local08, result1
2b3c0                 | LR__4318
2b3c0     00 34 0E F2 | 	cmp	local08, #0 wz
2b3c4     4C 00 90 5D |  if_ne	jmp	#LR__4319
2b3c8     10 2A 06 F1 | 	add	local03, #16
2b3cc     15 31 62 FC | 	wrlong	local06, local03
2b3d0     08 2A 06 F1 | 	add	local03, #8
2b3d4     15 2F 02 FB | 	rdlong	local05, local03
2b3d8     02 2E 86 F1 | 	sub	local05, #2
2b3dc     04 2A 86 F1 | 	sub	local03, #4
2b3e0     15 37 02 FB | 	rdlong	local09, local03
2b3e4     14 2A 86 F1 | 	sub	local03, #20
2b3e8     17 37 1A F2 | 	cmp	local09, local05 wcz
2b3ec     14 2A 06 E1 |  if_be	add	local03, #20
2b3f0     15 37 02 EB |  if_be	rdlong	local09, local03
2b3f4     01 36 86 E1 |  if_be	sub	local09, #1
2b3f8     15 37 62 EC |  if_be	wrlong	local09, local03
2b3fc     14 2A 86 E1 |  if_be	sub	local03, #20
2b400     04 2A 06 F1 | 	add	local03, #4
2b404     15 2F C2 FA | 	rdbyte	local05, local03
2b408     01 2E 46 F5 | 	or	local05, #1
2b40c     15 2F 42 FC | 	wrbyte	local05, local03
2b410     08 00 90 FD | 	jmp	#LR__4320
2b414                 | LR__4319
2b414     01 34 0E F2 | 	cmp	local08, #1 wz
2b418     01 30 C6 F6 | 	negz	local06, #1
2b41c                 | LR__4320
2b41c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2b41c                 | ' 	}
2b41c                 | ' 
2b41c                 | ' 	return ncl;
2b41c     18 FB 01 F6 | 	mov	result1, local06
2b420                 | LR__4321
2b420     A7 F0 03 F6 | 	mov	ptra, fp
2b424     B2 00 A0 FD | 	call	#popregs_
2b428                 | _fatfs_cc_create_chain_ret
2b428     2D 00 64 FD | 	ret
2b42c                 | 
2b42c                 | _fatfs_cc_dir_clear
2b42c     06 4A 05 F6 | 	mov	COUNT_, #6
2b430     A8 00 A0 FD | 	call	#pushregs_
2b434     09 27 02 F6 | 	mov	local01, arg01
2b438     0A 29 02 F6 | 	mov	local02, arg02
2b43c     13 13 02 F6 | 	mov	arg01, local01
2b440     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2b444     00 FA 0D F2 | 	cmp	result1, #0 wz
2b448     01 FA 05 56 |  if_ne	mov	result1, #1
2b44c     90 00 90 5D |  if_ne	jmp	#LR__4332
2b450     13 13 02 F6 | 	mov	arg01, local01
2b454     14 15 02 F6 | 	mov	arg02, local02
2b458     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2b45c     FD 2A 02 F6 | 	mov	local03, result1
2b460     30 26 06 F1 | 	add	local01, #48
2b464     13 2B 62 FC | 	wrlong	local03, local01
2b468     04 26 06 F1 | 	add	local01, #4
2b46c     13 13 02 F6 | 	mov	arg01, local01
2b470     00 14 06 F6 | 	mov	arg02, #0
2b474     09 16 C6 F9 | 	decod	arg03, #9
2b478     98 00 A0 FD | 	call	#\builtin_bytefill_
2b47c     13 2D 02 F6 | 	mov	local04, local01
2b480                 | ' #line 1667 "ff.c"
2b480                 | ' 	{
2b480                 | ' 		ibuf = fs->win; szb = 1;
2b480                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2b480     00 2E 06 F6 | 	mov	local05, #0
2b484     34 26 86 F1 | 	sub	local01, #52
2b488                 | LR__4330
2b488     0A 26 06 F1 | 	add	local01, #10
2b48c     13 31 E2 FA | 	rdword	local06, local01
2b490     0A 26 86 F1 | 	sub	local01, #10
2b494     18 2F 12 F2 | 	cmp	local05, local06 wc
2b498     2C 00 90 3D |  if_ae	jmp	#LR__4331
2b49c     01 26 06 F1 | 	add	local01, #1
2b4a0     13 13 C2 FA | 	rdbyte	arg01, local01
2b4a4     01 26 86 F1 | 	sub	local01, #1
2b4a8     16 15 02 F6 | 	mov	arg02, local04
2b4ac     15 17 02 F6 | 	mov	arg03, local03
2b4b0     17 17 02 F1 | 	add	arg03, local05
2b4b4     01 18 06 F6 | 	mov	arg04, #1
2b4b8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2b4bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4c0     01 2E 06 A1 |  if_e	add	local05, #1
2b4c4     C0 FF 9F AD |  if_e	jmp	#LR__4330
2b4c8                 | LR__4331
2b4c8                 | ' 	}
2b4c8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2b4c8     0A 26 06 F1 | 	add	local01, #10
2b4cc     13 2D E2 FA | 	rdword	local04, local01
2b4d0     16 2F 0A F2 | 	cmp	local05, local04 wz
2b4d4     00 30 06 A6 |  if_e	mov	local06, #0
2b4d8     01 30 06 56 |  if_ne	mov	local06, #1
2b4dc     18 FB 01 F6 | 	mov	result1, local06
2b4e0                 | LR__4332
2b4e0     A7 F0 03 F6 | 	mov	ptra, fp
2b4e4     B2 00 A0 FD | 	call	#popregs_
2b4e8                 | _fatfs_cc_dir_clear_ret
2b4e8     2D 00 64 FD | 	ret
2b4ec                 | 
2b4ec                 | _fatfs_cc_dir_sdi
2b4ec     06 4A 05 F6 | 	mov	COUNT_, #6
2b4f0     A8 00 A0 FD | 	call	#pushregs_
2b4f4     09 27 02 F6 | 	mov	local01, arg01
2b4f8     0A 29 02 F6 | 	mov	local02, arg02
2b4fc     13 2B 02 FB | 	rdlong	local03, local01
2b500     00 10 00 FF 
2b504     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2b508     1F 28 CE C7 |  if_b	test	local02, #31 wz
2b50c                 | ' 		return FR_INT_ERR;
2b50c     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2b510     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4346
2b514     10 26 06 F1 | 	add	local01, #16
2b518     13 29 62 FC | 	wrlong	local02, local01
2b51c     08 26 86 F1 | 	sub	local01, #8
2b520     13 2D 0A FB | 	rdlong	local04, local01 wz
2b524     08 26 86 F1 | 	sub	local01, #8
2b528     15 2F C2 AA |  if_e	rdbyte	local05, local03
2b52c     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2b530     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2b534     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2b538     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2b53c     00 2C 0E F2 | 	cmp	local04, #0 wz
2b540     3C 00 90 5D |  if_ne	jmp	#LR__4340
2b544     14 2F 02 F6 | 	mov	local05, local02
2b548     05 2E 46 F0 | 	shr	local05, #5
2b54c     08 2A 06 F1 | 	add	local03, #8
2b550     15 15 E2 FA | 	rdword	arg02, local03
2b554     08 2A 86 F1 | 	sub	local03, #8
2b558     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2b55c     02 FA 05 36 |  if_ae	mov	result1, #2
2b560     E4 00 90 3D |  if_ae	jmp	#LR__4346
2b564     28 2A 06 F1 | 	add	local03, #40
2b568     15 2F 02 FB | 	rdlong	local05, local03
2b56c     28 2A 86 F1 | 	sub	local03, #40
2b570     18 26 06 F1 | 	add	local01, #24
2b574     13 2F 62 FC | 	wrlong	local05, local01
2b578     18 26 86 F1 | 	sub	local01, #24
2b57c     7C 00 90 FD | 	jmp	#LR__4345
2b580                 | LR__4340
2b580     0A 2A 06 F1 | 	add	local03, #10
2b584     15 31 E2 FA | 	rdword	local06, local03
2b588     0A 2A 86 F1 | 	sub	local03, #10
2b58c     09 30 66 F0 | 	shl	local06, #9
2b590                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2b590                 | ' 		while (ofs >= csz) {
2b590                 | LR__4341
2b590     18 29 12 F2 | 	cmp	local02, local06 wc
2b594     4C 00 90 CD |  if_b	jmp	#LR__4344
2b598     13 13 02 F6 | 	mov	arg01, local01
2b59c     16 15 02 F6 | 	mov	arg02, local04
2b5a0     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2b5a4     FD 2C 02 F6 | 	mov	local04, result1
2b5a8     FF FF 7F FF 
2b5ac     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2b5b0     01 FA 05 A6 |  if_e	mov	result1, #1
2b5b4     90 00 90 AD |  if_e	jmp	#LR__4346
2b5b8     02 2C 16 F2 | 	cmp	local04, #2 wc
2b5bc     14 00 90 CD |  if_b	jmp	#LR__4342
2b5c0     18 2A 06 F1 | 	add	local03, #24
2b5c4     15 2F 02 FB | 	rdlong	local05, local03
2b5c8     18 2A 86 F1 | 	sub	local03, #24
2b5cc     17 2D 12 F2 | 	cmp	local04, local05 wc
2b5d0     08 00 90 CD |  if_b	jmp	#LR__4343
2b5d4                 | LR__4342
2b5d4     02 FA 05 F6 | 	mov	result1, #2
2b5d8     6C 00 90 FD | 	jmp	#LR__4346
2b5dc                 | LR__4343
2b5dc     18 29 82 F1 | 	sub	local02, local06
2b5e0     AC FF 9F FD | 	jmp	#LR__4341
2b5e4                 | LR__4344
2b5e4     15 13 02 F6 | 	mov	arg01, local03
2b5e8     16 15 02 F6 | 	mov	arg02, local04
2b5ec     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2b5f0     18 26 06 F1 | 	add	local01, #24
2b5f4     13 FB 61 FC | 	wrlong	result1, local01
2b5f8     18 26 86 F1 | 	sub	local01, #24
2b5fc                 | LR__4345
2b5fc     14 26 06 F1 | 	add	local01, #20
2b600     13 2D 62 FC | 	wrlong	local04, local01
2b604     04 26 06 F1 | 	add	local01, #4
2b608     13 2F 0A FB | 	rdlong	local05, local01 wz
2b60c     18 26 86 F1 | 	sub	local01, #24
2b610     02 FA 05 A6 |  if_e	mov	result1, #2
2b614     30 00 90 AD |  if_e	jmp	#LR__4346
2b618     14 31 02 F6 | 	mov	local06, local02
2b61c     09 30 46 F0 | 	shr	local06, #9
2b620     18 26 06 F1 | 	add	local01, #24
2b624     13 2F 02 FB | 	rdlong	local05, local01
2b628     18 2F 02 F1 | 	add	local05, local06
2b62c     13 2F 62 FC | 	wrlong	local05, local01
2b630     34 2A 06 F1 | 	add	local03, #52
2b634     FF 29 06 F5 | 	and	local02, #511
2b638     14 2B 02 F1 | 	add	local03, local02
2b63c     04 26 06 F1 | 	add	local01, #4
2b640     13 2B 62 FC | 	wrlong	local03, local01
2b644                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2b644                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2b644                 | ' 
2b644                 | ' 	return FR_OK;
2b644     00 FA 05 F6 | 	mov	result1, #0
2b648                 | LR__4346
2b648     A7 F0 03 F6 | 	mov	ptra, fp
2b64c     B2 00 A0 FD | 	call	#popregs_
2b650                 | _fatfs_cc_dir_sdi_ret
2b650     2D 00 64 FD | 	ret
2b654                 | 
2b654                 | _fatfs_cc_dir_next
2b654     05 4A 05 F6 | 	mov	COUNT_, #5
2b658     A8 00 A0 FD | 	call	#pushregs_
2b65c     09 27 02 F6 | 	mov	local01, arg01
2b660     0A 29 02 F6 | 	mov	local02, arg02
2b664     13 2B 02 FB | 	rdlong	local03, local01
2b668     10 26 06 F1 | 	add	local01, #16
2b66c     13 2D 02 FB | 	rdlong	local04, local01
2b670     10 26 86 F1 | 	sub	local01, #16
2b674     20 2C 06 F1 | 	add	local04, #32
2b678     00 10 00 FF 
2b67c     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2b680     18 26 06 31 |  if_ae	add	local01, #24
2b684     13 01 68 3C |  if_ae	wrlong	#0, local01
2b688     18 26 86 31 |  if_ae	sub	local01, #24
2b68c     18 26 06 F1 | 	add	local01, #24
2b690     13 15 0A FB | 	rdlong	arg02, local01 wz
2b694     18 26 86 F1 | 	sub	local01, #24
2b698     04 FA 05 A6 |  if_e	mov	result1, #4
2b69c     64 01 90 AD |  if_e	jmp	#LR__4355
2b6a0     FF 2D CE F7 | 	test	local04, #511 wz
2b6a4     3C 01 90 5D |  if_ne	jmp	#LR__4354
2b6a8     18 26 06 F1 | 	add	local01, #24
2b6ac     13 15 02 FB | 	rdlong	arg02, local01
2b6b0     01 14 06 F1 | 	add	arg02, #1
2b6b4     13 15 62 FC | 	wrlong	arg02, local01
2b6b8     04 26 86 F1 | 	sub	local01, #4
2b6bc     13 15 0A FB | 	rdlong	arg02, local01 wz
2b6c0     14 26 86 F1 | 	sub	local01, #20
2b6c4     2C 00 90 5D |  if_ne	jmp	#LR__4350
2b6c8     16 15 02 F6 | 	mov	arg02, local04
2b6cc     05 14 46 F0 | 	shr	arg02, #5
2b6d0     08 2A 06 F1 | 	add	local03, #8
2b6d4     15 29 E2 FA | 	rdword	local02, local03
2b6d8     08 2A 86 F1 | 	sub	local03, #8
2b6dc     14 15 12 F2 | 	cmp	arg02, local02 wc
2b6e0     18 26 06 31 |  if_ae	add	local01, #24
2b6e4     13 01 68 3C |  if_ae	wrlong	#0, local01
2b6e8                 | ' 				dp->sect = 0; return FR_NO_FILE;
2b6e8     04 FA 05 36 |  if_ae	mov	result1, #4
2b6ec     14 01 90 3D |  if_ae	jmp	#LR__4355
2b6f0     F0 00 90 FD | 	jmp	#LR__4353
2b6f4                 | LR__4350
2b6f4     16 13 02 F6 | 	mov	arg01, local04
2b6f8     09 12 46 F0 | 	shr	arg01, #9
2b6fc     0A 2A 06 F1 | 	add	local03, #10
2b700     15 15 E2 FA | 	rdword	arg02, local03
2b704     0A 2A 86 F1 | 	sub	local03, #10
2b708     01 14 86 F1 | 	sub	arg02, #1
2b70c     0A 13 CA F7 | 	test	arg01, arg02 wz
2b710     D0 00 90 5D |  if_ne	jmp	#LR__4352
2b714     13 13 02 F6 | 	mov	arg01, local01
2b718     14 26 06 F1 | 	add	local01, #20
2b71c     13 15 02 FB | 	rdlong	arg02, local01
2b720     14 26 86 F1 | 	sub	local01, #20
2b724     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2b728     FD 2E 02 F6 | 	mov	local05, result1
2b72c     02 2E 16 F2 | 	cmp	local05, #2 wc
2b730     02 FA 05 C6 |  if_b	mov	result1, #2
2b734     CC 00 90 CD |  if_b	jmp	#LR__4355
2b738     FF FF 7F FF 
2b73c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2b740     01 FA 05 A6 |  if_e	mov	result1, #1
2b744     BC 00 90 AD |  if_e	jmp	#LR__4355
2b748     18 2A 06 F1 | 	add	local03, #24
2b74c     15 15 02 FB | 	rdlong	arg02, local03
2b750     18 2A 86 F1 | 	sub	local03, #24
2b754     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2b758     68 00 90 CD |  if_b	jmp	#LR__4351
2b75c     00 28 0E F2 | 	cmp	local02, #0 wz
2b760     18 26 06 A1 |  if_e	add	local01, #24
2b764     13 01 68 AC |  if_e	wrlong	#0, local01
2b768                 | ' 						dp->sect = 0; return FR_NO_FILE;
2b768     04 FA 05 A6 |  if_e	mov	result1, #4
2b76c     94 00 90 AD |  if_e	jmp	#LR__4355
2b770     13 13 02 F6 | 	mov	arg01, local01
2b774     14 26 06 F1 | 	add	local01, #20
2b778     13 15 02 FB | 	rdlong	arg02, local01
2b77c     14 26 86 F1 | 	sub	local01, #20
2b780     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2b784     FD 2E 0A F6 | 	mov	local05, result1 wz
2b788     07 FA 05 A6 |  if_e	mov	result1, #7
2b78c     74 00 90 AD |  if_e	jmp	#LR__4355
2b790     01 2E 0E F2 | 	cmp	local05, #1 wz
2b794     02 FA 05 A6 |  if_e	mov	result1, #2
2b798     68 00 90 AD |  if_e	jmp	#LR__4355
2b79c     FF FF 7F FF 
2b7a0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2b7a4     01 FA 05 A6 |  if_e	mov	result1, #1
2b7a8     58 00 90 AD |  if_e	jmp	#LR__4355
2b7ac     17 15 02 F6 | 	mov	arg02, local05
2b7b0     15 13 02 F6 | 	mov	arg01, local03
2b7b4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2b7b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7bc     01 FA 05 56 |  if_ne	mov	result1, #1
2b7c0     40 00 90 5D |  if_ne	jmp	#LR__4355
2b7c4                 | LR__4351
2b7c4     14 26 06 F1 | 	add	local01, #20
2b7c8     13 2F 62 FC | 	wrlong	local05, local01
2b7cc     15 13 02 F6 | 	mov	arg01, local03
2b7d0     17 15 02 F6 | 	mov	arg02, local05
2b7d4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2b7d8     04 26 06 F1 | 	add	local01, #4
2b7dc     13 FB 61 FC | 	wrlong	result1, local01
2b7e0     18 26 86 F1 | 	sub	local01, #24
2b7e4                 | LR__4352
2b7e4                 | LR__4353
2b7e4                 | LR__4354
2b7e4     10 26 06 F1 | 	add	local01, #16
2b7e8     13 2D 62 FC | 	wrlong	local04, local01
2b7ec     34 2A 06 F1 | 	add	local03, #52
2b7f0     FF 2D 06 F5 | 	and	local04, #511
2b7f4     16 2B 02 F1 | 	add	local03, local04
2b7f8     0C 26 06 F1 | 	add	local01, #12
2b7fc     13 2B 62 FC | 	wrlong	local03, local01
2b800                 | ' #line 1771 "ff.c"
2b800                 | ' 				}
2b800                 | ' 				dp->clust = clst;
2b800                 | ' 				dp->sect = clst2sect(fs, clst);
2b800                 | ' 			}
2b800                 | ' 		}
2b800                 | ' 	}
2b800                 | ' 	dp->dptr = ofs;
2b800                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2b800                 | ' 
2b800                 | ' 	return FR_OK;
2b800     00 FA 05 F6 | 	mov	result1, #0
2b804                 | LR__4355
2b804     A7 F0 03 F6 | 	mov	ptra, fp
2b808     B2 00 A0 FD | 	call	#popregs_
2b80c                 | _fatfs_cc_dir_next_ret
2b80c     2D 00 64 FD | 	ret
2b810                 | 
2b810                 | _fatfs_cc_dir_alloc
2b810     08 4A 05 F6 | 	mov	COUNT_, #8
2b814     A8 00 A0 FD | 	call	#pushregs_
2b818     09 27 02 F6 | 	mov	local01, arg01
2b81c     0A 29 02 F6 | 	mov	local02, arg02
2b820     13 2B 02 FB | 	rdlong	local03, local01
2b824     13 13 02 F6 | 	mov	arg01, local01
2b828     00 14 06 F6 | 	mov	arg02, #0
2b82c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2b830     FD 2C 0A F6 | 	mov	local04, result1 wz
2b834     70 00 90 5D |  if_ne	jmp	#LR__4364
2b838     00 2E 06 F6 | 	mov	local05, #0
2b83c                 | ' 		n = 0;
2b83c                 | ' 		do {
2b83c                 | LR__4360
2b83c     18 26 06 F1 | 	add	local01, #24
2b840     13 15 02 FB | 	rdlong	arg02, local01
2b844     18 26 86 F1 | 	sub	local01, #24
2b848     15 13 02 F6 | 	mov	arg01, local03
2b84c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2b850     FD 2C 0A F6 | 	mov	local04, result1 wz
2b854     50 00 90 5D |  if_ne	jmp	#LR__4363
2b858     1C 26 06 F1 | 	add	local01, #28
2b85c     13 31 02 FB | 	rdlong	local06, local01
2b860     1C 26 86 F1 | 	sub	local01, #28
2b864     18 31 C2 FA | 	rdbyte	local06, local06
2b868     E5 30 0E F2 | 	cmp	local06, #229 wz
2b86c     1C 26 06 51 |  if_ne	add	local01, #28
2b870     13 33 02 5B |  if_ne	rdlong	local07, local01
2b874     1C 26 86 51 |  if_ne	sub	local01, #28
2b878     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2b87c     10 00 90 5D |  if_ne	jmp	#LR__4361
2b880     01 2E 06 F1 | 	add	local05, #1
2b884     14 2F 0A F2 | 	cmp	local05, local02 wz
2b888     1C 00 90 AD |  if_e	jmp	#LR__4363
2b88c     04 00 90 FD | 	jmp	#LR__4362
2b890                 | LR__4361
2b890     00 2E 06 F6 | 	mov	local05, #0
2b894                 | LR__4362
2b894     13 13 02 F6 | 	mov	arg01, local01
2b898     01 14 06 F6 | 	mov	arg02, #1
2b89c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2b8a0     FD 2C 0A F6 | 	mov	local04, result1 wz
2b8a4     94 FF 9F AD |  if_e	jmp	#LR__4360
2b8a8                 | LR__4363
2b8a8                 | LR__4364
2b8a8     04 2C 0E F2 | 	cmp	local04, #4 wz
2b8ac     07 2C 06 A6 |  if_e	mov	local04, #7
2b8b0                 | ' 	return res;
2b8b0     16 FB 01 F6 | 	mov	result1, local04
2b8b4     A7 F0 03 F6 | 	mov	ptra, fp
2b8b8     B2 00 A0 FD | 	call	#popregs_
2b8bc                 | _fatfs_cc_dir_alloc_ret
2b8bc     2D 00 64 FD | 	ret
2b8c0                 | 
2b8c0                 | _fatfs_cc_ld_clust
2b8c0     09 01 02 F6 | 	mov	_var01, arg01
2b8c4     0A 13 02 F6 | 	mov	arg01, arg02
2b8c8     1A 12 06 F1 | 	add	arg01, #26
2b8cc                 | ' {
2b8cc                 | ' 
2b8cc                 | ' 	return *((WORD*)ptr);
2b8cc     09 FB E1 FA | 	rdword	result1, arg01
2b8d0     FD 12 32 F9 | 	getword	arg01, result1, #0
2b8d4     00 01 C2 FA | 	rdbyte	_var01, _var01
2b8d8     03 00 0E F2 | 	cmp	_var01, #3 wz
2b8dc     14 14 06 A1 |  if_e	add	arg02, #20
2b8e0                 | ' {
2b8e0                 | ' 
2b8e0                 | ' 	return *((WORD*)ptr);
2b8e0     0A FB E1 AA |  if_e	rdword	result1, arg02
2b8e4     10 FA 65 A0 |  if_e	shl	result1, #16
2b8e8     FD 12 42 A5 |  if_e	or	arg01, result1
2b8ec                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2b8ec                 | ' 	}
2b8ec                 | ' 
2b8ec                 | ' 	return cl;
2b8ec     09 FB 01 F6 | 	mov	result1, arg01
2b8f0                 | _fatfs_cc_ld_clust_ret
2b8f0     2D 00 64 FD | 	ret
2b8f4                 | 
2b8f4                 | _fatfs_cc_st_clust
2b8f4     09 01 02 F6 | 	mov	_var01, arg01
2b8f8     0A 13 02 F6 | 	mov	arg01, arg02
2b8fc     1A 12 06 F1 | 	add	arg01, #26
2b900     09 17 52 FC | 	wrword	arg03, arg01
2b904     00 01 C2 FA | 	rdbyte	_var01, _var01
2b908     03 00 0E F2 | 	cmp	_var01, #3 wz
2b90c     14 14 06 A1 |  if_e	add	arg02, #20
2b910     10 16 46 A0 |  if_e	shr	arg03, #16
2b914     0A 17 52 AC |  if_e	wrword	arg03, arg02
2b918                 | _fatfs_cc_st_clust_ret
2b918     2D 00 64 FD | 	ret
2b91c                 | 
2b91c                 | _fatfs_cc_cmp_lfn
2b91c     07 4A 05 F6 | 	mov	COUNT_, #7
2b920     A8 00 A0 FD | 	call	#pushregs_
2b924     09 27 02 F6 | 	mov	local01, arg01
2b928     0A 13 02 F6 | 	mov	arg01, arg02
2b92c     1A 12 06 F1 | 	add	arg01, #26
2b930                 | ' {
2b930                 | ' 
2b930                 | ' 	return *((WORD*)ptr);
2b930     09 FB E9 FA | 	rdword	result1, arg01 wz
2b934     00 FA 05 56 |  if_ne	mov	result1, #0
2b938     E0 00 90 5D |  if_ne	jmp	#LR__4376
2b93c     0A 29 C2 FA | 	rdbyte	local02, arg02
2b940     3F 28 06 F5 | 	and	local02, #63
2b944     01 28 86 F1 | 	sub	local02, #1
2b948     0D 28 06 FD | 	qmul	local02, #13
2b94c                 | ' 
2b94c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2b94c                 | ' 
2b94c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2b94c     01 2A 06 F6 | 	mov	local03, #1
2b950     00 2C 06 F6 | 	mov	local04, #0
2b954     18 2E 62 FD | 	getqx	local05
2b958                 | LR__4370
2b958     0D 2C 16 F2 | 	cmp	local04, #13 wc
2b95c     9C 00 90 3D |  if_ae	jmp	#LR__4375
2b960     0A 13 02 F6 | 	mov	arg01, arg02
2b964     16 29 02 F6 | 	mov	local02, local04
2b968     01 00 00 FF 
2b96c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2b970     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2b974     14 29 C2 FA | 	rdbyte	local02, local02
2b978     01 28 06 FA | 	mul	local02, #1
2b97c     14 13 02 F1 | 	add	arg01, local02
2b980     01 00 00 FF 
2b984     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2b988                 | ' {
2b988                 | ' 
2b988                 | ' 	return *((WORD*)ptr);
2b988     09 FB E1 FA | 	rdword	result1, arg01
2b98c     FD 30 02 F6 | 	mov	local06, result1
2b990     15 29 02 F6 | 	mov	local02, local03
2b994     0F 28 4E F7 | 	zerox	local02, #15 wz
2b998     44 00 90 AD |  if_e	jmp	#LR__4373
2b99c     00 2F 16 F2 | 	cmp	local05, #256 wc
2b9a0     2C 00 90 3D |  if_ae	jmp	#LR__4371
2b9a4     18 13 32 F9 | 	getword	arg01, local06, #0
2b9a8     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2b9ac     FD 28 02 F6 | 	mov	local02, result1
2b9b0     17 2B 02 F6 | 	mov	local03, local05
2b9b4     01 2A 66 F0 | 	shl	local03, #1
2b9b8     13 2B 02 F1 | 	add	local03, local01
2b9bc     15 13 E2 FA | 	rdword	arg01, local03
2b9c0     01 2E 06 F1 | 	add	local05, #1
2b9c4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2b9c8     FD 28 0A F2 | 	cmp	local02, result1 wz
2b9cc     08 00 90 AD |  if_e	jmp	#LR__4372
2b9d0                 | LR__4371
2b9d0                 | ' 				return 0;
2b9d0     00 FA 05 F6 | 	mov	result1, #0
2b9d4     44 00 90 FD | 	jmp	#LR__4376
2b9d8                 | LR__4372
2b9d8     18 2B 02 F6 | 	mov	local03, local06
2b9dc     14 00 90 FD | 	jmp	#LR__4374
2b9e0                 | LR__4373
2b9e0     18 31 32 F9 | 	getword	local06, local06, #0
2b9e4     7F 00 00 FF 
2b9e8     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2b9ec     00 FA 05 56 |  if_ne	mov	result1, #0
2b9f0     28 00 90 5D |  if_ne	jmp	#LR__4376
2b9f4                 | LR__4374
2b9f4     01 2C 06 F1 | 	add	local04, #1
2b9f8     5C FF 9F FD | 	jmp	#LR__4370
2b9fc                 | LR__4375
2b9fc     0A 29 C2 FA | 	rdbyte	local02, arg02
2ba00     40 28 CE F7 | 	test	local02, #64 wz
2ba04     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2ba08     01 2E 66 50 |  if_ne	shl	local05, #1
2ba0c     13 2F 02 51 |  if_ne	add	local05, local01
2ba10     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2ba14     00 FA 05 56 |  if_ne	mov	result1, #0
2ba18                 | ' 
2ba18                 | ' 	return 1;
2ba18     01 FA 05 A6 |  if_e	mov	result1, #1
2ba1c                 | LR__4376
2ba1c     A7 F0 03 F6 | 	mov	ptra, fp
2ba20     B2 00 A0 FD | 	call	#popregs_
2ba24                 | _fatfs_cc_cmp_lfn_ret
2ba24     2D 00 64 FD | 	ret
2ba28                 | 
2ba28                 | _fatfs_cc_pick_lfn
2ba28     09 01 02 F6 | 	mov	_var01, arg01
2ba2c     0A 13 02 F6 | 	mov	arg01, arg02
2ba30     1A 12 06 F1 | 	add	arg01, #26
2ba34                 | ' {
2ba34                 | ' 
2ba34                 | ' 	return *((WORD*)ptr);
2ba34     09 FB E9 FA | 	rdword	result1, arg01 wz
2ba38     00 FA 05 56 |  if_ne	mov	result1, #0
2ba3c     D4 00 90 5D |  if_ne	jmp	#LR__4385
2ba40     0A 03 C2 FA | 	rdbyte	_var02, arg02
2ba44     40 02 26 F5 | 	andn	_var02, #64
2ba48     01 02 86 F1 | 	sub	_var02, #1
2ba4c     0D 02 06 FD | 	qmul	_var02, #13
2ba50                 | ' 
2ba50                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2ba50                 | ' 
2ba50                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2ba50     01 04 06 F6 | 	mov	_var03, #1
2ba54     00 06 06 F6 | 	mov	_var04, #0
2ba58     18 08 62 FD | 	getqx	_var05
2ba5c                 | LR__4380
2ba5c     0D 06 16 F2 | 	cmp	_var04, #13 wc
2ba60     80 00 90 3D |  if_ae	jmp	#LR__4383
2ba64     0A 13 02 F6 | 	mov	arg01, arg02
2ba68     03 03 02 F6 | 	mov	_var02, _var04
2ba6c     01 00 00 FF 
2ba70     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2ba74     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2ba78     01 03 C2 FA | 	rdbyte	_var02, _var02
2ba7c     01 02 06 FA | 	mul	_var02, #1
2ba80     01 13 02 F1 | 	add	arg01, _var02
2ba84     01 00 00 FF 
2ba88     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2ba8c                 | ' {
2ba8c                 | ' 
2ba8c                 | ' 	return *((WORD*)ptr);
2ba8c     09 FB E1 FA | 	rdword	result1, arg01
2ba90     FD 0A 02 F6 | 	mov	_var06, result1
2ba94     02 03 02 F6 | 	mov	_var02, _var03
2ba98     0F 02 4E F7 | 	zerox	_var02, #15 wz
2ba9c     28 00 90 AD |  if_e	jmp	#LR__4381
2baa0     00 09 16 F2 | 	cmp	_var05, #256 wc
2baa4     00 FA 05 36 |  if_ae	mov	result1, #0
2baa8     68 00 90 3D |  if_ae	jmp	#LR__4385
2baac     04 03 02 F6 | 	mov	_var02, _var05
2bab0     01 02 66 F0 | 	shl	_var02, #1
2bab4     00 03 02 F1 | 	add	_var02, _var01
2bab8     05 05 02 F6 | 	mov	_var03, _var06
2babc     01 05 52 FC | 	wrword	_var03, _var02
2bac0     01 08 06 F1 | 	add	_var05, #1
2bac4     14 00 90 FD | 	jmp	#LR__4382
2bac8                 | LR__4381
2bac8     05 0B 32 F9 | 	getword	_var06, _var06, #0
2bacc     7F 00 00 FF 
2bad0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2bad4     00 FA 05 56 |  if_ne	mov	result1, #0
2bad8     38 00 90 5D |  if_ne	jmp	#LR__4385
2badc                 | LR__4382
2badc     01 06 06 F1 | 	add	_var04, #1
2bae0     78 FF 9F FD | 	jmp	#LR__4380
2bae4                 | LR__4383
2bae4     0A 03 C2 FA | 	rdbyte	_var02, arg02
2bae8     40 02 CE F7 | 	test	_var02, #64 wz
2baec     02 0D 02 56 |  if_ne	mov	_var07, _var03
2baf0     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2baf4     18 00 90 AD |  if_e	jmp	#LR__4384
2baf8     00 09 16 F2 | 	cmp	_var05, #256 wc
2bafc     00 FA 05 36 |  if_ae	mov	result1, #0
2bb00     10 00 90 3D |  if_ae	jmp	#LR__4385
2bb04     01 08 66 F0 | 	shl	_var05, #1
2bb08     00 09 02 F1 | 	add	_var05, _var01
2bb0c     04 01 58 FC | 	wrword	#0, _var05
2bb10                 | LR__4384
2bb10                 | ' 		lfnbuf[i] = 0;
2bb10                 | ' 	}
2bb10                 | ' 
2bb10                 | ' 	return 1;
2bb10     01 FA 05 F6 | 	mov	result1, #1
2bb14                 | LR__4385
2bb14                 | _fatfs_cc_pick_lfn_ret
2bb14     2D 00 64 FD | 	ret
2bb18                 | 
2bb18                 | _fatfs_cc_put_lfn
2bb18     0D 14 06 F1 | 	add	arg02, #13
2bb1c     0A 19 42 FC | 	wrbyte	arg04, arg02
2bb20     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2bb24     01 18 86 F1 | 	sub	arg04, #1
2bb28     0D 18 06 FD | 	qmul	arg04, #13
2bb2c     09 01 02 F6 | 	mov	_var01, arg01
2bb30     02 14 86 F1 | 	sub	arg02, #2
2bb34     0A 1F 48 FC | 	wrbyte	#15, arg02
2bb38     01 14 06 F1 | 	add	arg02, #1
2bb3c     0A 01 48 FC | 	wrbyte	#0, arg02
2bb40     0C 14 86 F1 | 	sub	arg02, #12
2bb44     0A 13 02 F6 | 	mov	arg01, arg02
2bb48     1A 12 06 F1 | 	add	arg01, #26
2bb4c     09 01 58 FC | 	wrword	#0, arg01
2bb50     00 02 06 F6 | 	mov	_var02, #0
2bb54     00 04 06 F6 | 	mov	_var03, #0
2bb58                 | ' 	BYTE* dir,
2bb58                 | ' 	BYTE ord,
2bb58                 | ' 	BYTE sum
2bb58                 | ' )
2bb58                 | ' {
2bb58                 | ' 	UINT i, s;
2bb58                 | ' 	WCHAR wc;
2bb58                 | ' 
2bb58                 | ' 
2bb58                 | ' 	dir[ 13 ] = sum;
2bb58                 | ' 	dir[ 11 ] =  0x0F ;
2bb58                 | ' 	dir[ 12 ] = 0;
2bb58                 | ' 	st_word(dir +  26 , 0);
2bb58                 | ' 
2bb58                 | ' 	i = (ord - 1) * 13;
2bb58                 | ' 	s = wc = 0;
2bb58                 | ' 	do {
2bb58     01 00 00 FF 
2bb5c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2bb60     18 06 62 FD | 	getqx	_var04
2bb64     97 2A 48 FB | 	callpa	#(@LR__4391-@LR__4390)>>2,fcache_load_ptr_
2bb68                 | LR__4390
2bb68     01 19 32 F9 | 	getword	arg04, _var02, #0
2bb6c     7F 00 00 FF 
2bb70     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2bb74     03 13 02 56 |  if_ne	mov	arg01, _var04
2bb78     01 06 06 51 |  if_ne	add	_var04, #1
2bb7c     01 12 66 50 |  if_ne	shl	arg01, #1
2bb80     00 13 02 51 |  if_ne	add	arg01, _var01
2bb84     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2bb88     0A 13 02 F6 | 	mov	arg01, arg02
2bb8c     02 19 02 F6 | 	mov	arg04, _var03
2bb90     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2bb94     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bb98     01 18 06 FA | 	mul	arg04, #1
2bb9c     0C 13 02 F1 | 	add	arg01, arg04
2bba0     09 03 52 FC | 	wrword	_var02, arg01
2bba4     01 19 02 F6 | 	mov	arg04, _var02
2bba8     0F 18 4E F7 | 	zerox	arg04, #15 wz
2bbac     0F 02 CE A9 |  if_e	bmask	_var02, #15
2bbb0     01 04 06 F1 | 	add	_var03, #1
2bbb4     0D 04 16 F2 | 	cmp	_var03, #13 wc
2bbb8     AC FF 9F CD |  if_b	jmp	#LR__4390
2bbbc                 | LR__4391
2bbbc     01 00 00 FF 
2bbc0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2bbc4     01 03 32 F9 | 	getword	_var02, _var02, #0
2bbc8     7F 00 00 FF 
2bbcc     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2bbd0     01 06 66 50 |  if_ne	shl	_var04, #1
2bbd4     00 07 02 51 |  if_ne	add	_var04, _var01
2bbd8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2bbdc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2bbe0     40 16 46 A5 |  if_e	or	arg03, #64
2bbe4     0A 17 42 FC | 	wrbyte	arg03, arg02
2bbe8                 | _fatfs_cc_put_lfn_ret
2bbe8     2D 00 64 FD | 	ret
2bbec                 | 
2bbec                 | _fatfs_cc_gen_numname
2bbec     08 4A 05 F6 | 	mov	COUNT_, #8
2bbf0     A8 00 A0 FD | 	call	#pushregs_
2bbf4     2C F0 07 F1 | 	add	ptra, #44
2bbf8     09 27 02 F6 | 	mov	local01, arg01
2bbfc     0A 29 02 F6 | 	mov	local02, arg02
2bc00     0B 2B 02 F6 | 	mov	local03, arg03
2bc04     0C 2D 02 F6 | 	mov	local04, arg04
2bc08     13 13 02 F6 | 	mov	arg01, local01
2bc0c     14 15 02 F6 | 	mov	arg02, local02
2bc10     0B 16 06 F6 | 	mov	arg03, #11
2bc14     9C 72 BF FD | 	call	#__system____builtin_memmove
2bc18     06 2C 16 F2 | 	cmp	local04, #6 wc
2bc1c     48 00 90 CD |  if_b	jmp	#LR__4405
2bc20     16 2F 02 F6 | 	mov	local05, local04
2bc24     97 1E 48 FB | 	callpa	#(@LR__4403-@LR__4400)>>2,fcache_load_ptr_
2bc28                 | ' 		sreg = seq;
2bc28                 | ' 		while (*lfn) {
2bc28                 | LR__4400
2bc28     15 31 EA FA | 	rdword	local06, local03 wz
2bc2c     34 00 90 AD |  if_e	jmp	#LR__4404
2bc30     15 33 E2 FA | 	rdword	local07, local03
2bc34                 | ' 			wc = *lfn++;
2bc34                 | ' 			for (i = 0; i < 16; i++) {
2bc34     02 2A 06 F1 | 	add	local03, #2
2bc38     10 12 DC FC | 	rep	@LR__4402, #16
2bc3c                 | LR__4401
2bc3c     01 2E 66 F0 | 	shl	local05, #1
2bc40     19 31 32 F9 | 	getword	local06, local07, #0
2bc44     01 30 06 F5 | 	and	local06, #1
2bc48     18 2F 02 F1 | 	add	local05, local06
2bc4c     19 33 32 F9 | 	getword	local07, local07, #0
2bc50     01 32 46 F0 | 	shr	local07, #1
2bc54     10 2E 2E F4 | 	testbn	local05, #16 wz
2bc58     88 00 00 5F 
2bc5c     21 2E 66 55 |  if_ne	xor	local05, ##69665
2bc60                 | LR__4402
2bc60     C4 FF 9F FD | 	jmp	#LR__4400
2bc64                 | LR__4403
2bc64                 | LR__4404
2bc64     17 2D 02 F6 | 	mov	local04, local05
2bc68                 | LR__4405
2bc68     07 32 06 F6 | 	mov	local07, #7
2bc6c                 | ' 			}
2bc6c                 | ' 		}
2bc6c                 | ' 		seq = (UINT)sreg;
2bc6c                 | ' 	}
2bc6c                 | ' 
2bc6c                 | ' 
2bc6c                 | ' 	i = 7;
2bc6c                 | ' 	do {
2bc6c     10 4E 05 F1 | 	add	fp, #16
2bc70     97 1A 48 FB | 	callpa	#(@LR__4407-@LR__4406)>>2,fcache_load_ptr_
2bc74                 | LR__4406
2bc74     16 2F 42 F8 | 	getnib	local05, local04, #0
2bc78     30 2E 06 F1 | 	add	local05, #48
2bc7c     04 2C 46 F0 | 	shr	local04, #4
2bc80     17 31 E2 F8 | 	getbyte	local06, local05, #0
2bc84     3A 30 16 F2 | 	cmp	local06, #58 wc
2bc88     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2bc8c     07 2E 06 31 |  if_ae	add	local05, #7
2bc90     19 31 02 F6 | 	mov	local06, local07
2bc94     01 32 8E F1 | 	sub	local07, #1 wz
2bc98     A7 30 02 F1 | 	add	local06, fp
2bc9c     18 2F 42 FC | 	wrbyte	local05, local06
2bca0     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2bca4     CC FF 9F 5D |  if_ne	jmp	#LR__4406
2bca8                 | LR__4407
2bca8     19 31 02 F6 | 	mov	local06, local07
2bcac     A7 30 02 F1 | 	add	local06, fp
2bcb0     18 FD 48 FC | 	wrbyte	#126, local06
2bcb4                 | ' 	ns[i] = '~';
2bcb4                 | ' 
2bcb4                 | ' 
2bcb4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2bcb4     00 2E 06 F6 | 	mov	local05, #0
2bcb8     10 4E 85 F1 | 	sub	fp, #16
2bcbc     97 2A 48 FB | 	callpa	#(@LR__4410-@LR__4408)>>2,fcache_load_ptr_
2bcc0                 | LR__4408
2bcc0     19 2F 12 F2 | 	cmp	local05, local07 wc
2bcc4     4C 00 90 3D |  if_ae	jmp	#LR__4411
2bcc8     17 31 02 F6 | 	mov	local06, local05
2bccc     13 31 02 F1 | 	add	local06, local01
2bcd0     18 31 C2 FA | 	rdbyte	local06, local06
2bcd4     20 30 0E F2 | 	cmp	local06, #32 wz
2bcd8     38 00 90 AD |  if_e	jmp	#LR__4411
2bcdc     17 13 02 F6 | 	mov	arg01, local05
2bce0     13 13 02 F1 | 	add	arg01, local01
2bce4     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2bce8     00 FA 05 56 |  if_ne	mov	result1, #0
2bcec                 | ' 
2bcec                 | ' 	return 0;
2bcec     00 FA 05 A6 |  if_e	mov	result1, #0
2bcf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bcf4     14 00 90 AD |  if_e	jmp	#LR__4409
2bcf8     19 31 02 F6 | 	mov	local06, local07
2bcfc     01 30 86 F1 | 	sub	local06, #1
2bd00     18 2F 0A F2 | 	cmp	local05, local06 wz
2bd04     0C 00 90 AD |  if_e	jmp	#LR__4411
2bd08     01 2E 06 F1 | 	add	local05, #1
2bd0c                 | LR__4409
2bd0c     01 2E 06 F1 | 	add	local05, #1
2bd10     AC FF 9F FD | 	jmp	#LR__4408
2bd14                 | LR__4410
2bd14                 | LR__4411
2bd14     97 20 48 FB | 	callpa	#(@LR__4415-@LR__4412)>>2,fcache_load_ptr_
2bd18                 | ' 			j++;
2bd18                 | ' 		}
2bd18                 | ' 	}
2bd18                 | ' 	do {
2bd18                 | LR__4412
2bd18     17 31 02 F6 | 	mov	local06, local05
2bd1c     13 31 02 F1 | 	add	local06, local01
2bd20     08 32 16 F2 | 	cmp	local07, #8 wc
2bd24     01 2E 06 F1 | 	add	local05, #1
2bd28     1C 00 90 3D |  if_ae	jmp	#LR__4413
2bd2c     19 2D 02 F6 | 	mov	local04, local07
2bd30     10 4E 05 F1 | 	add	fp, #16
2bd34     A7 2C 02 F1 | 	add	local04, fp
2bd38     16 35 C2 FA | 	rdbyte	local08, local04
2bd3c     01 32 06 F1 | 	add	local07, #1
2bd40     10 4E 85 F1 | 	sub	fp, #16
2bd44     04 00 90 FD | 	jmp	#LR__4414
2bd48                 | LR__4413
2bd48     20 34 06 F6 | 	mov	local08, #32
2bd4c                 | LR__4414
2bd4c     18 35 42 FC | 	wrbyte	local08, local06
2bd50     08 2E 16 F2 | 	cmp	local05, #8 wc
2bd54     C0 FF 9F CD |  if_b	jmp	#LR__4412
2bd58                 | LR__4415
2bd58     A7 F0 03 F6 | 	mov	ptra, fp
2bd5c     B2 00 A0 FD | 	call	#popregs_
2bd60                 | _fatfs_cc_gen_numname_ret
2bd60     2D 00 64 FD | 	ret
2bd64                 | 
2bd64                 | _fatfs_cc_sum_sfn
2bd64     00 00 06 F6 | 	mov	_var01, #0
2bd68                 | ' )
2bd68                 | ' {
2bd68                 | ' 	BYTE sum = 0;
2bd68                 | ' 	UINT n = 11;
2bd68                 | ' 
2bd68                 | ' 	do {
2bd68     97 12 48 FB | 	callpa	#(@LR__4422-@LR__4420)>>2,fcache_load_ptr_
2bd6c                 | LR__4420
2bd6c     0B 10 DC FC | 	rep	@LR__4423, #11
2bd70                 | LR__4421
2bd70     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2bd74     01 FA 45 F0 | 	shr	result1, #1
2bd78     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2bd7c     07 00 66 F0 | 	shl	_var01, #7
2bd80     00 FB 01 F1 | 	add	result1, _var01
2bd84     09 01 C2 FA | 	rdbyte	_var01, arg01
2bd88     FD 00 02 F1 | 	add	_var01, result1
2bd8c     01 12 06 F1 | 	add	arg01, #1
2bd90                 | LR__4422
2bd90                 | LR__4423
2bd90                 | ' 	return sum;
2bd90     00 FB 01 F6 | 	mov	result1, _var01
2bd94                 | _fatfs_cc_sum_sfn_ret
2bd94     2D 00 64 FD | 	ret
2bd98                 | 
2bd98                 | _fatfs_cc_dir_read
2bd98     0C 4A 05 F6 | 	mov	COUNT_, #12
2bd9c     A8 00 A0 FD | 	call	#pushregs_
2bda0     09 27 02 F6 | 	mov	local01, arg01
2bda4     0A 29 02 F6 | 	mov	local02, arg02
2bda8     04 2A 06 F6 | 	mov	local03, #4
2bdac     13 2D 02 FB | 	rdlong	local04, local01
2bdb0     FF 2E 06 F6 | 	mov	local05, #255
2bdb4     FF 30 06 F6 | 	mov	local06, #255
2bdb8                 | ' )
2bdb8                 | ' {
2bdb8                 | ' 	FRESULT res = FR_NO_FILE;
2bdb8                 | ' 	FATFS *fs = dp->obj.fs;
2bdb8                 | ' 	BYTE attr, b;
2bdb8                 | ' 
2bdb8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2bdb8                 | ' 
2bdb8                 | ' 
2bdb8                 | ' 	while (dp->sect) {
2bdb8                 | LR__4430
2bdb8     18 26 06 F1 | 	add	local01, #24
2bdbc     13 FB 09 FB | 	rdlong	result1, local01 wz
2bdc0     18 26 86 F1 | 	sub	local01, #24
2bdc4     AC 01 90 AD |  if_e	jmp	#LR__4440
2bdc8     18 26 06 F1 | 	add	local01, #24
2bdcc     13 15 02 FB | 	rdlong	arg02, local01
2bdd0     18 26 86 F1 | 	sub	local01, #24
2bdd4     16 13 02 F6 | 	mov	arg01, local04
2bdd8     AC ED BF FD | 	call	#_fatfs_cc_move_window
2bddc     FD 2A 0A F6 | 	mov	local03, result1 wz
2bde0     90 01 90 5D |  if_ne	jmp	#LR__4440
2bde4     1C 26 06 F1 | 	add	local01, #28
2bde8     13 FB 01 FB | 	rdlong	result1, local01
2bdec     1C 26 86 F1 | 	sub	local01, #28
2bdf0     FD 32 C2 FA | 	rdbyte	local07, result1
2bdf4     19 FB 01 F6 | 	mov	result1, local07
2bdf8     07 FA 4D F7 | 	zerox	result1, #7 wz
2bdfc     04 2A 06 A6 |  if_e	mov	local03, #4
2be00                 | ' 			res = FR_NO_FILE; break;
2be00     70 01 90 AD |  if_e	jmp	#LR__4440
2be04     1C 26 06 F1 | 	add	local01, #28
2be08     13 35 02 FB | 	rdlong	local08, local01
2be0c     0B 34 06 F1 | 	add	local08, #11
2be10     1A 37 C2 FA | 	rdbyte	local09, local08
2be14     3F 36 06 F5 | 	and	local09, #63
2be18     16 26 86 F1 | 	sub	local01, #22
2be1c     13 37 42 FC | 	wrbyte	local09, local01
2be20     06 26 86 F1 | 	sub	local01, #6
2be24     19 FB E1 F8 | 	getbyte	result1, local07, #0
2be28     E5 FA 0D F2 | 	cmp	result1, #229 wz
2be2c     19 35 02 56 |  if_ne	mov	local08, local07
2be30     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2be34     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2be38     1C 00 90 AD |  if_e	jmp	#LR__4431
2be3c     00 38 06 F6 | 	mov	local10, #0
2be40     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2be44     20 34 26 F5 | 	andn	local08, #32
2be48     08 34 0E F2 | 	cmp	local08, #8 wz
2be4c     01 38 06 A6 |  if_e	mov	local10, #1
2be50     14 39 0A F2 | 	cmp	local10, local02 wz
2be54     08 00 90 AD |  if_e	jmp	#LR__4432
2be58                 | LR__4431
2be58     FF 2E 06 F6 | 	mov	local05, #255
2be5c     00 01 90 FD | 	jmp	#LR__4439
2be60                 | LR__4432
2be60     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2be64     0F 36 0E F2 | 	cmp	local09, #15 wz
2be68     B4 00 90 5D |  if_ne	jmp	#LR__4436
2be6c     19 3B E2 F8 | 	getbyte	local11, local07, #0
2be70     40 3A CE F7 | 	test	local11, #64 wz
2be74     30 00 90 AD |  if_e	jmp	#LR__4433
2be78     1C 26 06 F1 | 	add	local01, #28
2be7c     13 3B 02 FB | 	rdlong	local11, local01
2be80     0D 3A 06 F1 | 	add	local11, #13
2be84     1D 31 C2 FA | 	rdbyte	local06, local11
2be88     19 33 E2 F8 | 	getbyte	local07, local07, #0
2be8c     BF 32 06 F5 | 	and	local07, #191
2be90     19 2F 02 F6 | 	mov	local05, local07
2be94     0C 26 86 F1 | 	sub	local01, #12
2be98     13 3B 02 FB | 	rdlong	local11, local01
2be9c     1C 26 06 F1 | 	add	local01, #28
2bea0     13 3B 62 FC | 	wrlong	local11, local01
2bea4     2C 26 86 F1 | 	sub	local01, #44
2bea8                 | LR__4433
2bea8     19 35 E2 F8 | 	getbyte	local08, local07, #0
2beac     17 39 E2 F8 | 	getbyte	local10, local05, #0
2beb0     1C 35 0A F2 | 	cmp	local08, local10 wz
2beb4     5C 00 90 5D |  if_ne	jmp	#LR__4434
2beb8     18 39 E2 F8 | 	getbyte	local10, local06, #0
2bebc     1C 26 06 F1 | 	add	local01, #28
2bec0     13 37 02 FB | 	rdlong	local09, local01
2bec4     1C 26 86 F1 | 	sub	local01, #28
2bec8     0D 36 06 F1 | 	add	local09, #13
2becc     1B 35 C2 FA | 	rdbyte	local08, local09
2bed0     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2bed4     1B 39 0A F2 | 	cmp	local10, local09 wz
2bed8     38 00 90 5D |  if_ne	jmp	#LR__4434
2bedc     0C 2C 06 F1 | 	add	local04, #12
2bee0     16 13 02 FB | 	rdlong	arg01, local04
2bee4     0C 2C 86 F1 | 	sub	local04, #12
2bee8     1C 26 06 F1 | 	add	local01, #28
2beec     13 3D 02 FB | 	rdlong	local12, local01
2bef0     1C 26 86 F1 | 	sub	local01, #28
2bef4     1E 15 02 F6 | 	mov	arg02, local12
2bef8     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2befc     00 FA 4D F2 | 	cmps	result1, #0 wz
2bf00     17 3D 02 56 |  if_ne	mov	local12, local05
2bf04     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2bf08     01 3C 86 51 |  if_ne	sub	local12, #1
2bf0c     1E 3B 02 56 |  if_ne	mov	local11, local12
2bf10     04 00 90 5D |  if_ne	jmp	#LR__4435
2bf14                 | LR__4434
2bf14     FF 3A 06 F6 | 	mov	local11, #255
2bf18                 | LR__4435
2bf18     1D 2F 02 F6 | 	mov	local05, local11
2bf1c     40 00 90 FD | 	jmp	#LR__4438
2bf20                 | LR__4436
2bf20     17 3B 02 F6 | 	mov	local11, local05
2bf24     07 3A 4E F7 | 	zerox	local11, #7 wz
2bf28     20 00 90 5D |  if_ne	jmp	#LR__4437
2bf2c     18 31 E2 F8 | 	getbyte	local06, local06, #0
2bf30     1C 26 06 F1 | 	add	local01, #28
2bf34     13 13 02 FB | 	rdlong	arg01, local01
2bf38     1C 26 86 F1 | 	sub	local01, #28
2bf3c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2bf40     FD FA E1 F8 | 	getbyte	result1, result1, #0
2bf44     FD 30 0A F2 | 	cmp	local06, result1 wz
2bf48     28 00 90 AD |  if_e	jmp	#LR__4440
2bf4c                 | LR__4437
2bf4c     2C 26 06 F1 | 	add	local01, #44
2bf50     FF FF FF FF 
2bf54     13 FF 6B FC | 	wrlong	##-1, local01
2bf58     2C 26 86 F1 | 	sub	local01, #44
2bf5c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2bf5c                 | ' 					}
2bf5c                 | ' 					break;
2bf5c     14 00 90 FD | 	jmp	#LR__4440
2bf60                 | LR__4438
2bf60                 | LR__4439
2bf60     13 13 02 F6 | 	mov	arg01, local01
2bf64     00 14 06 F6 | 	mov	arg02, #0
2bf68     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2bf6c     FD 2A 0A F6 | 	mov	local03, result1 wz
2bf70     44 FE 9F AD |  if_e	jmp	#LR__4430
2bf74                 | LR__4440
2bf74     00 2A 0E F2 | 	cmp	local03, #0 wz
2bf78     18 26 06 51 |  if_ne	add	local01, #24
2bf7c     13 01 68 5C |  if_ne	wrlong	#0, local01
2bf80                 | ' 	return res;
2bf80     15 FB 01 F6 | 	mov	result1, local03
2bf84     A7 F0 03 F6 | 	mov	ptra, fp
2bf88     B2 00 A0 FD | 	call	#popregs_
2bf8c                 | _fatfs_cc_dir_read_ret
2bf8c     2D 00 64 FD | 	ret
2bf90                 | 
2bf90                 | _fatfs_cc_dir_find
2bf90     0B 4A 05 F6 | 	mov	COUNT_, #11
2bf94     A8 00 A0 FD | 	call	#pushregs_
2bf98     09 27 02 F6 | 	mov	local01, arg01
2bf9c     13 29 02 FB | 	rdlong	local02, local01
2bfa0     13 13 02 F6 | 	mov	arg01, local01
2bfa4     00 14 06 F6 | 	mov	arg02, #0
2bfa8     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2bfac     00 FA 0D F2 | 	cmp	result1, #0 wz
2bfb0     18 02 90 5D |  if_ne	jmp	#LR__4462
2bfb4     FF 2A 06 F6 | 	mov	local03, #255
2bfb8     FF 2C 06 F6 | 	mov	local04, #255
2bfbc     2C 26 06 F1 | 	add	local01, #44
2bfc0     FF FF FF FF 
2bfc4     13 FF 6B FC | 	wrlong	##-1, local01
2bfc8     2C 26 86 F1 | 	sub	local01, #44
2bfcc                 | ' #line 2404 "ff.c"
2bfcc                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2bfcc                 | ' 
2bfcc                 | ' 	do {
2bfcc                 | LR__4450
2bfcc     18 26 06 F1 | 	add	local01, #24
2bfd0     13 15 02 FB | 	rdlong	arg02, local01
2bfd4     18 26 86 F1 | 	sub	local01, #24
2bfd8     14 13 02 F6 | 	mov	arg01, local02
2bfdc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2bfe0     FD 2E 0A F6 | 	mov	local05, result1 wz
2bfe4     E0 01 90 5D |  if_ne	jmp	#LR__4461
2bfe8     1C 26 06 F1 | 	add	local01, #28
2bfec     13 17 02 FB | 	rdlong	arg03, local01
2bff0     1C 26 86 F1 | 	sub	local01, #28
2bff4     0B 31 C2 FA | 	rdbyte	local06, arg03
2bff8     18 17 02 F6 | 	mov	arg03, local06
2bffc     07 16 4E F7 | 	zerox	arg03, #7 wz
2c000     04 2E 06 A6 |  if_e	mov	local05, #4
2c004     C0 01 90 AD |  if_e	jmp	#LR__4461
2c008     1C 26 06 F1 | 	add	local01, #28
2c00c     13 33 02 FB | 	rdlong	local07, local01
2c010     19 17 02 F6 | 	mov	arg03, local07
2c014     0B 16 06 F1 | 	add	arg03, #11
2c018     0B 35 C2 FA | 	rdbyte	local08, arg03
2c01c     3F 34 06 F5 | 	and	local08, #63
2c020     16 26 86 F1 | 	sub	local01, #22
2c024     13 35 42 FC | 	wrbyte	local08, local01
2c028     06 26 86 F1 | 	sub	local01, #6
2c02c     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2c030     E5 16 0E F2 | 	cmp	arg03, #229 wz
2c034     18 00 90 AD |  if_e	jmp	#LR__4451
2c038     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2c03c     08 16 CE F7 | 	test	arg03, #8 wz
2c040     1A 33 02 56 |  if_ne	mov	local07, local08
2c044     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2c048     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2c04c     18 00 90 AD |  if_e	jmp	#LR__4452
2c050                 | LR__4451
2c050     FF 2C 06 F6 | 	mov	local04, #255
2c054     2C 26 06 F1 | 	add	local01, #44
2c058     FF FF FF FF 
2c05c     13 FF 6B FC | 	wrlong	##-1, local01
2c060     2C 26 86 F1 | 	sub	local01, #44
2c064     4C 01 90 FD | 	jmp	#LR__4460
2c068                 | LR__4452
2c068     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2c06c     0F 34 0E F2 | 	cmp	local08, #15 wz
2c070     C8 00 90 5D |  if_ne	jmp	#LR__4456
2c074     2B 26 06 F1 | 	add	local01, #43
2c078     13 35 C2 FA | 	rdbyte	local08, local01
2c07c     2B 26 86 F1 | 	sub	local01, #43
2c080     40 34 CE F7 | 	test	local08, #64 wz
2c084     2C 01 90 5D |  if_ne	jmp	#LR__4459
2c088     18 37 E2 F8 | 	getbyte	local09, local06, #0
2c08c     40 36 CE F7 | 	test	local09, #64 wz
2c090     30 00 90 AD |  if_e	jmp	#LR__4453
2c094     1C 26 06 F1 | 	add	local01, #28
2c098     13 37 02 FB | 	rdlong	local09, local01
2c09c     0D 36 06 F1 | 	add	local09, #13
2c0a0     1B 2B C2 FA | 	rdbyte	local03, local09
2c0a4     18 31 E2 F8 | 	getbyte	local06, local06, #0
2c0a8     BF 30 06 F5 | 	and	local06, #191
2c0ac     18 2D 02 F6 | 	mov	local04, local06
2c0b0     0C 26 86 F1 | 	sub	local01, #12
2c0b4     13 37 02 FB | 	rdlong	local09, local01
2c0b8     1C 26 06 F1 | 	add	local01, #28
2c0bc     13 37 62 FC | 	wrlong	local09, local01
2c0c0     2C 26 86 F1 | 	sub	local01, #44
2c0c4                 | LR__4453
2c0c4     18 39 E2 F8 | 	getbyte	local10, local06, #0
2c0c8     16 33 E2 F8 | 	getbyte	local07, local04, #0
2c0cc     19 39 0A F2 | 	cmp	local10, local07 wz
2c0d0     5C 00 90 5D |  if_ne	jmp	#LR__4454
2c0d4     15 35 E2 F8 | 	getbyte	local08, local03, #0
2c0d8     1C 26 06 F1 | 	add	local01, #28
2c0dc     13 33 02 FB | 	rdlong	local07, local01
2c0e0     1C 26 86 F1 | 	sub	local01, #28
2c0e4     0D 32 06 F1 | 	add	local07, #13
2c0e8     19 31 C2 FA | 	rdbyte	local06, local07
2c0ec     18 33 E2 F8 | 	getbyte	local07, local06, #0
2c0f0     19 35 0A F2 | 	cmp	local08, local07 wz
2c0f4     38 00 90 5D |  if_ne	jmp	#LR__4454
2c0f8     0C 28 06 F1 | 	add	local02, #12
2c0fc     14 13 02 FB | 	rdlong	arg01, local02
2c100     0C 28 86 F1 | 	sub	local02, #12
2c104     1C 26 06 F1 | 	add	local01, #28
2c108     13 3B 02 FB | 	rdlong	local11, local01
2c10c     1C 26 86 F1 | 	sub	local01, #28
2c110     1D 15 02 F6 | 	mov	arg02, local11
2c114     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2c118     00 FA 4D F2 | 	cmps	result1, #0 wz
2c11c     16 3B 02 56 |  if_ne	mov	local11, local04
2c120     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2c124     01 3A 86 51 |  if_ne	sub	local11, #1
2c128     1D 37 02 56 |  if_ne	mov	local09, local11
2c12c     04 00 90 5D |  if_ne	jmp	#LR__4455
2c130                 | LR__4454
2c130     FF 36 06 F6 | 	mov	local09, #255
2c134                 | LR__4455
2c134     1B 2D 02 F6 | 	mov	local04, local09
2c138     78 00 90 FD | 	jmp	#LR__4459
2c13c                 | LR__4456
2c13c     16 37 02 F6 | 	mov	local09, local04
2c140     07 36 4E F7 | 	zerox	local09, #7 wz
2c144     20 00 90 5D |  if_ne	jmp	#LR__4457
2c148     15 39 E2 F8 | 	getbyte	local10, local03, #0
2c14c     1C 26 06 F1 | 	add	local01, #28
2c150     13 13 02 FB | 	rdlong	arg01, local01
2c154     1C 26 86 F1 | 	sub	local01, #28
2c158     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2c15c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2c160     FD 38 0A F2 | 	cmp	local10, result1 wz
2c164     60 00 90 AD |  if_e	jmp	#LR__4461
2c168                 | LR__4457
2c168     2B 26 06 F1 | 	add	local01, #43
2c16c     13 37 C2 FA | 	rdbyte	local09, local01
2c170     2B 26 86 F1 | 	sub	local01, #43
2c174     01 36 CE F7 | 	test	local09, #1 wz
2c178     24 00 90 5D |  if_ne	jmp	#LR__4458
2c17c     1C 26 06 F1 | 	add	local01, #28
2c180     13 13 02 FB | 	rdlong	arg01, local01
2c184     04 26 06 F1 | 	add	local01, #4
2c188     13 15 02 F6 | 	mov	arg02, local01
2c18c     20 26 86 F1 | 	sub	local01, #32
2c190     0B 16 06 F6 | 	mov	arg03, #11
2c194     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2c198     00 FA 0D F2 | 	cmp	result1, #0 wz
2c19c     28 00 90 AD |  if_e	jmp	#LR__4461
2c1a0                 | LR__4458
2c1a0     FF 2C 06 F6 | 	mov	local04, #255
2c1a4     2C 26 06 F1 | 	add	local01, #44
2c1a8     FF FF FF FF 
2c1ac     13 FF 6B FC | 	wrlong	##-1, local01
2c1b0     2C 26 86 F1 | 	sub	local01, #44
2c1b4                 | LR__4459
2c1b4                 | LR__4460
2c1b4     13 13 02 F6 | 	mov	arg01, local01
2c1b8     00 14 06 F6 | 	mov	arg02, #0
2c1bc     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2c1c0     FD 2E 0A F6 | 	mov	local05, result1 wz
2c1c4     04 FE 9F AD |  if_e	jmp	#LR__4450
2c1c8                 | LR__4461
2c1c8                 | ' 
2c1c8                 | ' 	return res;
2c1c8     17 FB 01 F6 | 	mov	result1, local05
2c1cc                 | LR__4462
2c1cc     A7 F0 03 F6 | 	mov	ptra, fp
2c1d0     B2 00 A0 FD | 	call	#popregs_
2c1d4                 | _fatfs_cc_dir_find_ret
2c1d4     2D 00 64 FD | 	ret
2c1d8                 | 
2c1d8                 | _fatfs_cc_dir_register
2c1d8     0A 4A 05 F6 | 	mov	COUNT_, #10
2c1dc     A8 00 A0 FD | 	call	#pushregs_
2c1e0     2C F0 07 F1 | 	add	ptra, #44
2c1e4     04 4E 05 F1 | 	add	fp, #4
2c1e8     A7 12 62 FC | 	wrlong	arg01, fp
2c1ec     09 27 02 FB | 	rdlong	local01, arg01
2c1f0     08 4E 05 F1 | 	add	fp, #8
2c1f4     A7 26 62 FC | 	wrlong	local01, fp
2c1f8     08 4E 85 F1 | 	sub	fp, #8
2c1fc     A7 28 02 FB | 	rdlong	local02, fp
2c200     04 4E 85 F1 | 	sub	fp, #4
2c204     2B 28 06 F1 | 	add	local02, #43
2c208     14 29 C2 FA | 	rdbyte	local02, local02
2c20c     A0 28 CE F7 | 	test	local02, #160 wz
2c210     06 FA 05 56 |  if_ne	mov	result1, #6
2c214     F8 03 90 5D |  if_ne	jmp	#LR__4485
2c218                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2c218     14 4E 05 F1 | 	add	fp, #20
2c21c     A7 00 68 FC | 	wrlong	#0, fp
2c220     14 4E 85 F1 | 	sub	fp, #20
2c224     97 28 48 FB | 	callpa	#(@LR__4471-@LR__4470)>>2,fcache_load_ptr_
2c228                 | LR__4470
2c228     0C 4E 05 F1 | 	add	fp, #12
2c22c     A7 28 02 FB | 	rdlong	local02, fp
2c230     0C 28 06 F1 | 	add	local02, #12
2c234     14 2B 02 FB | 	rdlong	local03, local02
2c238     08 4E 05 F1 | 	add	fp, #8
2c23c     A7 2C 02 FB | 	rdlong	local04, fp
2c240     14 4E 85 F1 | 	sub	fp, #20
2c244     01 2C 66 F0 | 	shl	local04, #1
2c248     15 2D 02 F1 | 	add	local04, local03
2c24c     16 29 EA FA | 	rdword	local02, local04 wz
2c250     24 00 90 AD |  if_e	jmp	#LR__4472
2c254     14 4E 05 F1 | 	add	fp, #20
2c258     A7 2E 02 FB | 	rdlong	local05, fp
2c25c     17 31 02 F6 | 	mov	local06, local05
2c260     17 33 02 F6 | 	mov	local07, local05
2c264     19 35 02 F6 | 	mov	local08, local07
2c268     01 34 06 F1 | 	add	local08, #1
2c26c     A7 34 62 FC | 	wrlong	local08, fp
2c270     14 4E 85 F1 | 	sub	fp, #20
2c274     B0 FF 9F FD | 	jmp	#LR__4470
2c278                 | LR__4471
2c278                 | LR__4472
2c278     1C 4E 05 F1 | 	add	fp, #28
2c27c     A7 12 02 F6 | 	mov	arg01, fp
2c280     18 4E 85 F1 | 	sub	fp, #24
2c284     A7 14 02 FB | 	rdlong	arg02, fp
2c288     04 4E 85 F1 | 	sub	fp, #4
2c28c     20 14 06 F1 | 	add	arg02, #32
2c290     0C 16 06 F6 | 	mov	arg03, #12
2c294     1C 6C BF FD | 	call	#__system____builtin_memmove
2c298     27 4E 05 F1 | 	add	fp, #39
2c29c     A7 36 C2 FA | 	rdbyte	local09, fp
2c2a0     27 4E 85 F1 | 	sub	fp, #39
2c2a4     01 36 CE F7 | 	test	local09, #1 wz
2c2a8     F4 00 90 AD |  if_e	jmp	#LR__4475
2c2ac     04 4E 05 F1 | 	add	fp, #4
2c2b0     A7 38 02 FB | 	rdlong	local10, fp
2c2b4     2B 38 06 F1 | 	add	local10, #43
2c2b8     1C 81 48 FC | 	wrbyte	#64, local10
2c2bc                 | ' 		dp->fn[ 11 ] =  0x40 ;
2c2bc                 | ' 		for (n = 1; n < 100; n++) {
2c2bc     0C 4E 05 F1 | 	add	fp, #12
2c2c0     A7 02 68 FC | 	wrlong	#1, fp
2c2c4     10 4E 85 F1 | 	sub	fp, #16
2c2c8                 | LR__4473
2c2c8     10 4E 05 F1 | 	add	fp, #16
2c2cc     A7 28 02 FB | 	rdlong	local02, fp
2c2d0     10 4E 85 F1 | 	sub	fp, #16
2c2d4     64 28 16 F2 | 	cmp	local02, #100 wc
2c2d8     70 00 90 3D |  if_ae	jmp	#LR__4474
2c2dc     04 4E 05 F1 | 	add	fp, #4
2c2e0     A7 12 02 FB | 	rdlong	arg01, fp
2c2e4     20 12 06 F1 | 	add	arg01, #32
2c2e8     18 4E 05 F1 | 	add	fp, #24
2c2ec     A7 14 02 F6 | 	mov	arg02, fp
2c2f0     10 4E 85 F1 | 	sub	fp, #16
2c2f4     A7 38 02 FB | 	rdlong	local10, fp
2c2f8     0C 38 06 F1 | 	add	local10, #12
2c2fc     1C 17 02 FB | 	rdlong	arg03, local10
2c300     04 4E 05 F1 | 	add	fp, #4
2c304     A7 18 02 FB | 	rdlong	arg04, fp
2c308     10 4E 85 F1 | 	sub	fp, #16
2c30c     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2c310     04 4E 05 F1 | 	add	fp, #4
2c314     A7 12 02 FB | 	rdlong	arg01, fp
2c318     04 4E 85 F1 | 	sub	fp, #4
2c31c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2c320     08 4E 05 F1 | 	add	fp, #8
2c324     A7 FA 61 FC | 	wrlong	result1, fp
2c328     00 FA 4D F2 | 	cmps	result1, #0 wz
2c32c     08 4E 85 F1 | 	sub	fp, #8
2c330     18 00 90 5D |  if_ne	jmp	#LR__4474
2c334     10 4E 05 F1 | 	add	fp, #16
2c338     A7 38 02 FB | 	rdlong	local10, fp
2c33c     01 38 06 F1 | 	add	local10, #1
2c340     A7 38 62 FC | 	wrlong	local10, fp
2c344     10 4E 85 F1 | 	sub	fp, #16
2c348     7C FF 9F FD | 	jmp	#LR__4473
2c34c                 | LR__4474
2c34c     10 4E 05 F1 | 	add	fp, #16
2c350     A7 38 02 FB | 	rdlong	local10, fp
2c354     10 4E 85 F1 | 	sub	fp, #16
2c358     64 38 0E F2 | 	cmp	local10, #100 wz
2c35c     07 FA 05 A6 |  if_e	mov	result1, #7
2c360     AC 02 90 AD |  if_e	jmp	#LR__4485
2c364     08 4E 05 F1 | 	add	fp, #8
2c368     A7 38 02 FB | 	rdlong	local10, fp
2c36c     08 4E 85 F1 | 	sub	fp, #8
2c370     04 38 0E F2 | 	cmp	local10, #4 wz
2c374     08 4E 05 51 |  if_ne	add	fp, #8
2c378     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2c37c     08 4E 85 51 |  if_ne	sub	fp, #8
2c380     8C 02 90 5D |  if_ne	jmp	#LR__4485
2c384     04 4E 05 F1 | 	add	fp, #4
2c388     A7 38 02 FB | 	rdlong	local10, fp
2c38c     23 4E 05 F1 | 	add	fp, #35
2c390     A7 26 C2 FA | 	rdbyte	local01, fp
2c394     27 4E 85 F1 | 	sub	fp, #39
2c398     2B 38 06 F1 | 	add	local10, #43
2c39c     1C 27 42 FC | 	wrbyte	local01, local10
2c3a0                 | LR__4475
2c3a0     27 4E 05 F1 | 	add	fp, #39
2c3a4     A7 28 C2 FA | 	rdbyte	local02, fp
2c3a8     27 4E 85 F1 | 	sub	fp, #39
2c3ac     02 28 CE F7 | 	test	local02, #2 wz
2c3b0     20 00 90 AD |  if_e	jmp	#LR__4476
2c3b4     14 4E 05 F1 | 	add	fp, #20
2c3b8     A7 38 02 FB | 	rdlong	local10, fp
2c3bc     0C 38 06 F1 | 	add	local10, #12
2c3c0     0D 38 16 FD | 	qdiv	local10, #13
2c3c4     14 4E 85 F1 | 	sub	fp, #20
2c3c8     18 38 62 FD | 	getqx	local10
2c3cc     01 38 06 F1 | 	add	local10, #1
2c3d0     04 00 90 FD | 	jmp	#LR__4477
2c3d4                 | LR__4476
2c3d4     01 38 06 F6 | 	mov	local10, #1
2c3d8                 | LR__4477
2c3d8     18 4E 05 F1 | 	add	fp, #24
2c3dc     A7 38 62 FC | 	wrlong	local10, fp
2c3e0     14 4E 85 F1 | 	sub	fp, #20
2c3e4     A7 12 02 FB | 	rdlong	arg01, fp
2c3e8     1C 15 02 F6 | 	mov	arg02, local10
2c3ec     04 4E 85 F1 | 	sub	fp, #4
2c3f0     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2c3f4     08 4E 05 F1 | 	add	fp, #8
2c3f8     A7 FA 61 FC | 	wrlong	result1, fp
2c3fc     08 4E 85 F1 | 	sub	fp, #8
2c400     00 FA 0D F2 | 	cmp	result1, #0 wz
2c404     38 01 90 5D |  if_ne	jmp	#LR__4482
2c408     18 4E 05 F1 | 	add	fp, #24
2c40c     A7 38 02 FB | 	rdlong	local10, fp
2c410     01 38 8E F1 | 	sub	local10, #1 wz
2c414     A7 38 62 FC | 	wrlong	local10, fp
2c418     18 4E 85 F1 | 	sub	fp, #24
2c41c     20 01 90 AD |  if_e	jmp	#LR__4482
2c420     04 4E 05 F1 | 	add	fp, #4
2c424     A7 38 02 FB | 	rdlong	local10, fp
2c428     1C 13 02 F6 | 	mov	arg01, local10
2c42c     14 4E 05 F1 | 	add	fp, #20
2c430     A7 18 02 FB | 	rdlong	arg04, fp
2c434     18 4E 85 F1 | 	sub	fp, #24
2c438     05 18 66 F0 | 	shl	arg04, #5
2c43c     10 38 06 F1 | 	add	local10, #16
2c440     1C 15 02 FB | 	rdlong	arg02, local10
2c444     0C 15 82 F1 | 	sub	arg02, arg04
2c448     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2c44c     08 4E 05 F1 | 	add	fp, #8
2c450     A7 FA 61 FC | 	wrlong	result1, fp
2c454     08 4E 85 F1 | 	sub	fp, #8
2c458     00 FA 0D F2 | 	cmp	result1, #0 wz
2c45c     E0 00 90 5D |  if_ne	jmp	#LR__4481
2c460     04 4E 05 F1 | 	add	fp, #4
2c464     A7 12 02 FB | 	rdlong	arg01, fp
2c468     04 4E 85 F1 | 	sub	fp, #4
2c46c     20 12 06 F1 | 	add	arg01, #32
2c470     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2c474     FD 38 02 F6 | 	mov	local10, result1
2c478     28 4E 05 F1 | 	add	fp, #40
2c47c     A7 38 42 FC | 	wrbyte	local10, fp
2c480     28 4E 85 F1 | 	sub	fp, #40
2c484                 | ' 			sum = sum_sfn(dp->fn);
2c484                 | ' 			do {
2c484                 | LR__4478
2c484     0C 4E 05 F1 | 	add	fp, #12
2c488     A7 12 02 FB | 	rdlong	arg01, fp
2c48c     08 4E 85 F1 | 	sub	fp, #8
2c490     A7 26 02 FB | 	rdlong	local01, fp
2c494     04 4E 85 F1 | 	sub	fp, #4
2c498     18 26 06 F1 | 	add	local01, #24
2c49c     13 15 02 FB | 	rdlong	arg02, local01
2c4a0     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2c4a4     08 4E 05 F1 | 	add	fp, #8
2c4a8     A7 FA 61 FC | 	wrlong	result1, fp
2c4ac     00 FA 4D F2 | 	cmps	result1, #0 wz
2c4b0     08 4E 85 F1 | 	sub	fp, #8
2c4b4     88 00 90 5D |  if_ne	jmp	#LR__4480
2c4b8     0C 4E 05 F1 | 	add	fp, #12
2c4bc     A7 28 02 FB | 	rdlong	local02, fp
2c4c0     0C 28 06 F1 | 	add	local02, #12
2c4c4     14 13 02 FB | 	rdlong	arg01, local02
2c4c8     08 4E 85 F1 | 	sub	fp, #8
2c4cc     A7 26 02 FB | 	rdlong	local01, fp
2c4d0     1C 26 06 F1 | 	add	local01, #28
2c4d4     13 15 02 FB | 	rdlong	arg02, local01
2c4d8     14 4E 05 F1 | 	add	fp, #20
2c4dc     A7 16 02 FB | 	rdlong	arg03, fp
2c4e0     10 4E 05 F1 | 	add	fp, #16
2c4e4     A7 18 C2 FA | 	rdbyte	arg04, fp
2c4e8     28 4E 85 F1 | 	sub	fp, #40
2c4ec     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2c4f0     0C 4E 05 F1 | 	add	fp, #12
2c4f4     A7 38 02 FB | 	rdlong	local10, fp
2c4f8     03 38 06 F1 | 	add	local10, #3
2c4fc     1C 03 48 FC | 	wrbyte	#1, local10
2c500     08 4E 85 F1 | 	sub	fp, #8
2c504     A7 12 02 FB | 	rdlong	arg01, fp
2c508     04 4E 85 F1 | 	sub	fp, #4
2c50c     00 14 06 F6 | 	mov	arg02, #0
2c510     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2c514     08 4E 05 F1 | 	add	fp, #8
2c518     A7 FA 61 FC | 	wrlong	result1, fp
2c51c     00 FA 4D F2 | 	cmps	result1, #0 wz
2c520     08 4E 85 F1 | 	sub	fp, #8
2c524     18 00 90 5D |  if_ne	jmp	#LR__4479
2c528     18 4E 05 F1 | 	add	fp, #24
2c52c     A7 38 02 FB | 	rdlong	local10, fp
2c530     01 38 8E F1 | 	sub	local10, #1 wz
2c534     A7 38 62 FC | 	wrlong	local10, fp
2c538     18 4E 85 F1 | 	sub	fp, #24
2c53c     44 FF 9F 5D |  if_ne	jmp	#LR__4478
2c540                 | LR__4479
2c540                 | LR__4480
2c540                 | LR__4481
2c540                 | LR__4482
2c540     08 4E 05 F1 | 	add	fp, #8
2c544     A7 38 0A FB | 	rdlong	local10, fp wz
2c548     08 4E 85 F1 | 	sub	fp, #8
2c54c     B4 00 90 5D |  if_ne	jmp	#LR__4484
2c550     0C 4E 05 F1 | 	add	fp, #12
2c554     A7 12 02 FB | 	rdlong	arg01, fp
2c558     08 4E 85 F1 | 	sub	fp, #8
2c55c     A7 26 02 FB | 	rdlong	local01, fp
2c560     04 4E 85 F1 | 	sub	fp, #4
2c564     18 26 06 F1 | 	add	local01, #24
2c568     13 15 02 FB | 	rdlong	arg02, local01
2c56c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2c570     08 4E 05 F1 | 	add	fp, #8
2c574     A7 FA 61 FC | 	wrlong	result1, fp
2c578     08 4E 85 F1 | 	sub	fp, #8
2c57c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c580     80 00 90 5D |  if_ne	jmp	#LR__4483
2c584     04 4E 05 F1 | 	add	fp, #4
2c588     A7 28 02 FB | 	rdlong	local02, fp
2c58c     04 4E 85 F1 | 	sub	fp, #4
2c590     1C 28 06 F1 | 	add	local02, #28
2c594     14 13 02 FB | 	rdlong	arg01, local02
2c598     00 14 06 F6 | 	mov	arg02, #0
2c59c     20 16 06 F6 | 	mov	arg03, #32
2c5a0     98 00 A0 FD | 	call	#\builtin_bytefill_
2c5a4     04 4E 05 F1 | 	add	fp, #4
2c5a8     A7 14 02 FB | 	rdlong	arg02, fp
2c5ac     0A 27 02 F6 | 	mov	local01, arg02
2c5b0     1C 26 06 F1 | 	add	local01, #28
2c5b4     13 13 02 FB | 	rdlong	arg01, local01
2c5b8     04 4E 85 F1 | 	sub	fp, #4
2c5bc     20 14 06 F1 | 	add	arg02, #32
2c5c0     0B 16 06 F6 | 	mov	arg03, #11
2c5c4     EC 68 BF FD | 	call	#__system____builtin_memmove
2c5c8     04 4E 05 F1 | 	add	fp, #4
2c5cc     A7 36 02 FB | 	rdlong	local09, fp
2c5d0     1B 39 02 F6 | 	mov	local10, local09
2c5d4     1C 38 06 F1 | 	add	local10, #28
2c5d8     1C 27 02 FB | 	rdlong	local01, local10
2c5dc     2B 36 06 F1 | 	add	local09, #43
2c5e0     1B 39 C2 FA | 	rdbyte	local10, local09
2c5e4     18 38 06 F5 | 	and	local10, #24
2c5e8     0C 26 06 F1 | 	add	local01, #12
2c5ec     13 39 42 FC | 	wrbyte	local10, local01
2c5f0     08 4E 05 F1 | 	add	fp, #8
2c5f4     A7 38 02 FB | 	rdlong	local10, fp
2c5f8     0C 4E 85 F1 | 	sub	fp, #12
2c5fc     03 38 06 F1 | 	add	local10, #3
2c600     1C 03 48 FC | 	wrbyte	#1, local10
2c604                 | LR__4483
2c604                 | LR__4484
2c604                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2c604                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2c604                 | ' 
2c604                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2c604                 | ' 
2c604                 | ' 			fs->wflag = 1;
2c604                 | ' 		}
2c604                 | ' 	}
2c604                 | ' 
2c604                 | ' 	return res;
2c604     08 4E 05 F1 | 	add	fp, #8
2c608     A7 FA 01 FB | 	rdlong	result1, fp
2c60c     08 4E 85 F1 | 	sub	fp, #8
2c610                 | LR__4485
2c610     A7 F0 03 F6 | 	mov	ptra, fp
2c614     B2 00 A0 FD | 	call	#popregs_
2c618                 | _fatfs_cc_dir_register_ret
2c618     2D 00 64 FD | 	ret
2c61c                 | 
2c61c                 | _fatfs_cc_dir_remove
2c61c     05 4A 05 F6 | 	mov	COUNT_, #5
2c620     A8 00 A0 FD | 	call	#pushregs_
2c624     09 27 02 F6 | 	mov	local01, arg01
2c628     13 29 02 FB | 	rdlong	local02, local01
2c62c     10 26 06 F1 | 	add	local01, #16
2c630     13 2B 02 FB | 	rdlong	local03, local01
2c634     1C 26 06 F1 | 	add	local01, #28
2c638     13 15 02 FB | 	rdlong	arg02, local01
2c63c     2C 26 86 F1 | 	sub	local01, #44
2c640     FF FF 7F FF 
2c644     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2c648     00 2C 06 A6 |  if_e	mov	local04, #0
2c64c     18 00 90 AD |  if_e	jmp	#LR__4490
2c650     13 13 02 F6 | 	mov	arg01, local01
2c654     2C 26 06 F1 | 	add	local01, #44
2c658     13 15 02 FB | 	rdlong	arg02, local01
2c65c     2C 26 86 F1 | 	sub	local01, #44
2c660     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2c664     FD 2C 02 F6 | 	mov	local04, result1
2c668                 | LR__4490
2c668     16 2F 0A F6 | 	mov	local05, local04 wz
2c66c     64 00 90 5D |  if_ne	jmp	#LR__4493
2c670                 | ' 		do {
2c670                 | LR__4491
2c670     18 26 06 F1 | 	add	local01, #24
2c674     13 15 02 FB | 	rdlong	arg02, local01
2c678     18 26 86 F1 | 	sub	local01, #24
2c67c     14 13 02 F6 | 	mov	arg01, local02
2c680     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2c684     FD 2E 0A F6 | 	mov	local05, result1 wz
2c688     40 00 90 5D |  if_ne	jmp	#LR__4492
2c68c     1C 26 06 F1 | 	add	local01, #28
2c690     13 2D 02 FB | 	rdlong	local04, local01
2c694     16 CB 49 FC | 	wrbyte	#229, local04
2c698     03 28 06 F1 | 	add	local02, #3
2c69c     14 03 48 FC | 	wrbyte	#1, local02
2c6a0     03 28 86 F1 | 	sub	local02, #3
2c6a4     0C 26 86 F1 | 	sub	local01, #12
2c6a8     13 2D 02 FB | 	rdlong	local04, local01
2c6ac     10 26 86 F1 | 	sub	local01, #16
2c6b0     15 2D 12 F2 | 	cmp	local04, local03 wc
2c6b4     14 00 90 3D |  if_ae	jmp	#LR__4492
2c6b8     13 13 02 F6 | 	mov	arg01, local01
2c6bc     00 14 06 F6 | 	mov	arg02, #0
2c6c0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2c6c4     FD 2E 0A F6 | 	mov	local05, result1 wz
2c6c8     A4 FF 9F AD |  if_e	jmp	#LR__4491
2c6cc                 | LR__4492
2c6cc     04 2E 0E F2 | 	cmp	local05, #4 wz
2c6d0     02 2E 06 A6 |  if_e	mov	local05, #2
2c6d4                 | LR__4493
2c6d4                 | ' 	}
2c6d4                 | ' #line 2590 "ff.c"
2c6d4                 | ' 	return res;
2c6d4     17 FB 01 F6 | 	mov	result1, local05
2c6d8     A7 F0 03 F6 | 	mov	ptra, fp
2c6dc     B2 00 A0 FD | 	call	#popregs_
2c6e0                 | _fatfs_cc_dir_remove_ret
2c6e0     2D 00 64 FD | 	ret
2c6e4                 | 
2c6e4                 | _fatfs_cc_get_fileinfo
2c6e4     0F 4A 05 F6 | 	mov	COUNT_, #15
2c6e8     A8 00 A0 FD | 	call	#pushregs_
2c6ec     09 27 02 F6 | 	mov	local01, arg01
2c6f0     0A 29 02 F6 | 	mov	local02, arg02
2c6f4     13 2B 02 FB | 	rdlong	local03, local01
2c6f8     1C 28 06 F1 | 	add	local02, #28
2c6fc     14 01 48 FC | 	wrbyte	#0, local02
2c700     1C 28 86 F1 | 	sub	local02, #28
2c704     18 26 06 F1 | 	add	local01, #24
2c708     13 2D 0A FB | 	rdlong	local04, local01 wz
2c70c     18 26 86 F1 | 	sub	local01, #24
2c710     90 03 90 AD |  if_e	jmp	#LR__4514
2c714     2C 26 06 F1 | 	add	local01, #44
2c718     13 2D 02 FB | 	rdlong	local04, local01
2c71c     2C 26 86 F1 | 	sub	local01, #44
2c720     FF FF 7F FF 
2c724     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2c728     D8 00 90 AD |  if_e	jmp	#LR__4503
2c72c     00 2E 06 F6 | 	mov	local05, #0
2c730     00 30 06 F6 | 	mov	local06, #0
2c734     00 32 06 F6 | 	mov	local07, #0
2c738                 | ' 			si = di = 0;
2c738                 | ' 			hs = 0;
2c738                 | ' 			while (fs->lfnbuf[si] != 0) {
2c738                 | LR__4500
2c738     0C 2A 06 F1 | 	add	local03, #12
2c73c     15 2D 02 FB | 	rdlong	local04, local03
2c740     0C 2A 86 F1 | 	sub	local03, #12
2c744     18 35 02 F6 | 	mov	local08, local06
2c748     01 34 66 F0 | 	shl	local08, #1
2c74c     16 35 02 F1 | 	add	local08, local04
2c750     1A 2D EA FA | 	rdword	local04, local08 wz
2c754     90 00 90 AD |  if_e	jmp	#LR__4502
2c758     0C 2A 06 F1 | 	add	local03, #12
2c75c     15 37 02 FB | 	rdlong	local09, local03
2c760     0C 2A 86 F1 | 	sub	local03, #12
2c764     18 39 02 F6 | 	mov	local10, local06
2c768     01 38 66 F0 | 	shl	local10, #1
2c76c     1B 39 02 F1 | 	add	local10, local09
2c770     1C 3B E2 FA | 	rdword	local11, local10
2c774     19 2D 02 F6 | 	mov	local04, local07
2c778     0F 2C 4E F7 | 	zerox	local04, #15 wz
2c77c     01 30 06 F1 | 	add	local06, #1
2c780     24 00 90 5D |  if_ne	jmp	#LR__4501
2c784     1D 3D 32 F9 | 	getword	local12, local11, #0
2c788     6C 00 00 FF 
2c78c     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2c790     14 00 90 CD |  if_b	jmp	#LR__4501
2c794     1D 3F 32 F9 | 	getword	local13, local11, #0
2c798     70 00 00 FF 
2c79c     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2c7a0     1D 33 02 C6 |  if_b	mov	local07, local11
2c7a4                 | ' 					hs = wc; continue;
2c7a4     90 FF 9F CD |  if_b	jmp	#LR__4500
2c7a8                 | LR__4501
2c7a8     19 13 32 F9 | 	getword	arg01, local07, #0
2c7ac     10 12 66 F0 | 	shl	arg01, #16
2c7b0     1D 3B 32 F9 | 	getword	local11, local11, #0
2c7b4     1D 13 42 F5 | 	or	arg01, local11
2c7b8     17 15 02 F6 | 	mov	arg02, local05
2c7bc     1C 28 06 F1 | 	add	local02, #28
2c7c0     14 15 02 F1 | 	add	arg02, local02
2c7c4     FF 16 06 F6 | 	mov	arg03, #255
2c7c8     17 17 82 F1 | 	sub	arg03, local05
2c7cc     1C 28 86 F1 | 	sub	local02, #28
2c7d0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2c7d4     FD 40 0A F6 | 	mov	local14, result1 wz
2c7d8     00 2E 06 A6 |  if_e	mov	local05, #0
2c7dc     20 2F 02 51 |  if_ne	add	local05, local14
2c7e0     00 32 06 56 |  if_ne	mov	local07, #0
2c7e4     50 FF 9F 5D |  if_ne	jmp	#LR__4500
2c7e8                 | LR__4502
2c7e8     19 2D 02 F6 | 	mov	local04, local07
2c7ec     0F 2C 4E F7 | 	zerox	local04, #15 wz
2c7f0     00 2E 06 56 |  if_ne	mov	local05, #0
2c7f4     1C 28 06 F1 | 	add	local02, #28
2c7f8     14 2F 02 F1 | 	add	local05, local02
2c7fc     17 01 48 FC | 	wrbyte	#0, local05
2c800     1C 28 86 F1 | 	sub	local02, #28
2c804                 | LR__4503
2c804     00 2E 06 F6 | 	mov	local05, #0
2c808     00 30 06 F6 | 	mov	local06, #0
2c80c                 | ' 			fno->fname[di] = 0;
2c80c                 | ' 		}
2c80c                 | ' 	}
2c80c                 | ' 
2c80c                 | ' 	si = di = 0;
2c80c                 | ' 	while (si < 11) {
2c80c                 | LR__4504
2c80c     0B 30 16 F2 | 	cmp	local06, #11 wc
2c810     20 01 90 3D |  if_ae	jmp	#LR__4507
2c814     1C 26 06 F1 | 	add	local01, #28
2c818     13 37 02 FB | 	rdlong	local09, local01
2c81c     1C 26 86 F1 | 	sub	local01, #28
2c820     18 39 02 F6 | 	mov	local10, local06
2c824     1B 39 02 F1 | 	add	local10, local09
2c828     1C 3B C2 FA | 	rdbyte	local11, local10
2c82c     1D 2D 32 F9 | 	getword	local04, local11, #0
2c830     20 2C 0E F2 | 	cmp	local04, #32 wz
2c834     01 30 06 F1 | 	add	local06, #1
2c838     D0 FF 9F AD |  if_e	jmp	#LR__4504
2c83c     1D 2D 32 F9 | 	getword	local04, local11, #0
2c840     05 2C 0E F2 | 	cmp	local04, #5 wz
2c844     E5 3A 06 A6 |  if_e	mov	local11, #229
2c848     09 30 0E F2 | 	cmp	local06, #9 wz
2c84c     20 00 90 5D |  if_ne	jmp	#LR__4505
2c850     0C 2E 16 F2 | 	cmp	local05, #12 wc
2c854     18 00 90 3D |  if_ae	jmp	#LR__4505
2c858     17 3F 02 F6 | 	mov	local13, local05
2c85c     0C 28 06 F1 | 	add	local02, #12
2c860     14 3F 02 F1 | 	add	local13, local02
2c864     1F 5D 48 FC | 	wrbyte	#46, local13
2c868     01 2E 06 F1 | 	add	local05, #1
2c86c     0C 28 86 F1 | 	sub	local02, #12
2c870                 | LR__4505
2c870     1D 13 32 F9 | 	getword	arg01, local11, #0
2c874     07 12 4E F7 | 	zerox	arg01, #7 wz
2c878     00 FA 05 56 |  if_ne	mov	result1, #0
2c87c                 | ' 
2c87c                 | ' 	return 0;
2c87c     00 FA 05 A6 |  if_e	mov	result1, #0
2c880     00 FA 0D F2 | 	cmp	result1, #0 wz
2c884     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2c888     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2c88c     50 00 90 AD |  if_e	jmp	#LR__4506
2c890     1C 26 06 F1 | 	add	local01, #28
2c894     13 39 02 FB | 	rdlong	local10, local01
2c898     1C 26 86 F1 | 	sub	local01, #28
2c89c     18 35 02 F6 | 	mov	local08, local06
2c8a0     1C 35 02 F1 | 	add	local08, local10
2c8a4     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2c8a8     00 FA 05 56 |  if_ne	mov	result1, #0
2c8ac                 | ' 
2c8ac                 | ' 	return 0;
2c8ac     00 FA 05 A6 |  if_e	mov	result1, #0
2c8b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8b4     28 00 90 AD |  if_e	jmp	#LR__4506
2c8b8     1D 3B 32 F9 | 	getword	local11, local11, #0
2c8bc     08 3A 66 F0 | 	shl	local11, #8
2c8c0     1C 26 06 F1 | 	add	local01, #28
2c8c4     13 41 02 FB | 	rdlong	local14, local01
2c8c8     1C 26 86 F1 | 	sub	local01, #28
2c8cc     18 37 02 F6 | 	mov	local09, local06
2c8d0     20 37 02 F1 | 	add	local09, local14
2c8d4     1B 3D C2 FA | 	rdbyte	local12, local09
2c8d8     1E 3B 42 F5 | 	or	local11, local12
2c8dc     01 30 06 F1 | 	add	local06, #1
2c8e0                 | LR__4506
2c8e0     1D 13 02 F6 | 	mov	arg01, local11
2c8e4     01 00 00 FF 
2c8e8     52 15 06 F6 | 	mov	arg02, ##850
2c8ec     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2c8f0     FD 3A 02 F6 | 	mov	local11, result1
2c8f4     1D 2D 02 F6 | 	mov	local04, local11
2c8f8     0F 2C 4E F7 | 	zerox	local04, #15 wz
2c8fc     00 2E 06 A6 |  if_e	mov	local05, #0
2c900     30 00 90 AD |  if_e	jmp	#LR__4507
2c904     1D 13 32 F9 | 	getword	arg01, local11, #0
2c908     17 15 02 F6 | 	mov	arg02, local05
2c90c     0C 28 06 F1 | 	add	local02, #12
2c910     14 15 02 F1 | 	add	arg02, local02
2c914     0C 16 06 F6 | 	mov	arg03, #12
2c918     17 17 82 F1 | 	sub	arg03, local05
2c91c     0C 28 86 F1 | 	sub	local02, #12
2c920     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2c924     FD 40 0A F6 | 	mov	local14, result1 wz
2c928     00 2E 06 A6 |  if_e	mov	local05, #0
2c92c     20 2F 02 51 |  if_ne	add	local05, local14
2c930     D8 FE 9F 5D |  if_ne	jmp	#LR__4504
2c934                 | LR__4507
2c934     17 2D 02 F6 | 	mov	local04, local05
2c938     0C 28 06 F1 | 	add	local02, #12
2c93c     14 2D 02 F1 | 	add	local04, local02
2c940     16 01 48 FC | 	wrbyte	#0, local04
2c944     10 28 06 F1 | 	add	local02, #16
2c948     14 2D CA FA | 	rdbyte	local04, local02 wz
2c94c     1C 28 86 F1 | 	sub	local02, #28
2c950     F8 00 90 5D |  if_ne	jmp	#LR__4513
2c954     00 2E 0E F2 | 	cmp	local05, #0 wz
2c958     1C 00 90 5D |  if_ne	jmp	#LR__4508
2c95c     17 3F 02 F6 | 	mov	local13, local05
2c960     1C 28 06 F1 | 	add	local02, #28
2c964     14 3F 02 F1 | 	add	local13, local02
2c968     1F 7F 48 FC | 	wrbyte	#63, local13
2c96c     01 2E 06 F1 | 	add	local05, #1
2c970     1C 28 86 F1 | 	sub	local02, #28
2c974     A4 00 90 FD | 	jmp	#LR__4512
2c978                 | LR__4508
2c978                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2c978     00 2E 06 F6 | 	mov	local05, #0
2c97c     00 30 06 F6 | 	mov	local06, #0
2c980     08 42 06 F6 | 	mov	local15, #8
2c984                 | LR__4509
2c984     18 2D 02 F6 | 	mov	local04, local06
2c988     0C 28 06 F1 | 	add	local02, #12
2c98c     14 2D 02 F1 | 	add	local04, local02
2c990     16 3F CA FA | 	rdbyte	local13, local04 wz
2c994     0C 28 86 F1 | 	sub	local02, #12
2c998     80 00 90 AD |  if_e	jmp	#LR__4511
2c99c     18 35 02 F6 | 	mov	local08, local06
2c9a0     0C 28 06 F1 | 	add	local02, #12
2c9a4     14 35 02 F1 | 	add	local08, local02
2c9a8     1A 3B C2 FA | 	rdbyte	local11, local08
2c9ac     1D 41 32 F9 | 	getword	local14, local11, #0
2c9b0     2E 40 0E F2 | 	cmp	local14, #46 wz
2c9b4     0C 28 86 F1 | 	sub	local02, #12
2c9b8     10 42 06 A6 |  if_e	mov	local15, #16
2c9bc     1D 41 32 F9 | 	getword	local14, local11, #0
2c9c0     41 40 16 F2 | 	cmp	local14, #65 wc
2c9c4     30 00 90 CD |  if_b	jmp	#LR__4510
2c9c8     1D 35 32 F9 | 	getword	local08, local11, #0
2c9cc     5B 34 16 F2 | 	cmp	local08, #91 wc
2c9d0     24 00 90 3D |  if_ae	jmp	#LR__4510
2c9d4     1C 26 06 F1 | 	add	local01, #28
2c9d8     13 37 02 FB | 	rdlong	local09, local01
2c9dc     1C 26 86 F1 | 	sub	local01, #28
2c9e0     0C 36 06 F1 | 	add	local09, #12
2c9e4     1B 39 C2 FA | 	rdbyte	local10, local09
2c9e8     21 41 E2 F8 | 	getbyte	local14, local15, #0
2c9ec     20 39 CA F7 | 	test	local10, local14 wz
2c9f0     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2c9f4     20 3A 06 51 |  if_ne	add	local11, #32
2c9f8                 | LR__4510
2c9f8     17 41 02 F6 | 	mov	local14, local05
2c9fc     1C 28 06 F1 | 	add	local02, #28
2ca00     14 41 02 F1 | 	add	local14, local02
2ca04     1D 3B 32 F9 | 	getword	local11, local11, #0
2ca08     20 3B 42 FC | 	wrbyte	local11, local14
2ca0c     01 30 06 F1 | 	add	local06, #1
2ca10     01 2E 06 F1 | 	add	local05, #1
2ca14     1C 28 86 F1 | 	sub	local02, #28
2ca18     68 FF 9F FD | 	jmp	#LR__4509
2ca1c                 | LR__4511
2ca1c                 | LR__4512
2ca1c     1C 28 06 F1 | 	add	local02, #28
2ca20     14 2F 02 F1 | 	add	local05, local02
2ca24     17 01 48 FC | 	wrbyte	#0, local05
2ca28     1C 26 06 F1 | 	add	local01, #28
2ca2c     13 2D 02 FB | 	rdlong	local04, local01
2ca30     1C 26 86 F1 | 	sub	local01, #28
2ca34     0C 2C 06 F1 | 	add	local04, #12
2ca38     16 3F CA FA | 	rdbyte	local13, local04 wz
2ca3c     1C 28 86 F1 | 	sub	local02, #28
2ca40     0C 28 06 A1 |  if_e	add	local02, #12
2ca44     14 01 48 AC |  if_e	wrbyte	#0, local02
2ca48     0C 28 86 A1 |  if_e	sub	local02, #12
2ca4c                 | LR__4513
2ca4c     1C 26 06 F1 | 	add	local01, #28
2ca50     13 3D 02 FB | 	rdlong	local12, local01
2ca54     0B 3C 06 F1 | 	add	local12, #11
2ca58     1E 2D C2 FA | 	rdbyte	local04, local12
2ca5c     3F 2C 06 F5 | 	and	local04, #63
2ca60     08 28 06 F1 | 	add	local02, #8
2ca64     14 2D 42 FC | 	wrbyte	local04, local02
2ca68     08 28 86 F1 | 	sub	local02, #8
2ca6c     13 13 02 FB | 	rdlong	arg01, local01
2ca70     1C 12 06 F1 | 	add	arg01, #28
2ca74                 | ' {
2ca74                 | ' 
2ca74                 | ' 	return *((DWORD*)ptr);
2ca74     09 FB 01 FB | 	rdlong	result1, arg01
2ca78     14 FB 61 FC | 	wrlong	result1, local02
2ca7c     13 13 02 FB | 	rdlong	arg01, local01
2ca80     16 12 06 F1 | 	add	arg01, #22
2ca84                 | ' {
2ca84                 | ' 
2ca84                 | ' 	return *((WORD*)ptr);
2ca84     09 FB E1 FA | 	rdword	result1, arg01
2ca88     06 28 06 F1 | 	add	local02, #6
2ca8c     14 FB 51 FC | 	wrword	result1, local02
2ca90     13 13 02 FB | 	rdlong	arg01, local01
2ca94     18 12 06 F1 | 	add	arg01, #24
2ca98                 | ' {
2ca98                 | ' 
2ca98                 | ' 	return *((WORD*)ptr);
2ca98     09 FB E1 FA | 	rdword	result1, arg01
2ca9c     02 28 86 F1 | 	sub	local02, #2
2caa0     14 FB 51 FC | 	wrword	result1, local02
2caa4                 | LR__4514
2caa4     A7 F0 03 F6 | 	mov	ptra, fp
2caa8     B2 00 A0 FD | 	call	#popregs_
2caac                 | _fatfs_cc_get_fileinfo_ret
2caac     2D 00 64 FD | 	ret
2cab0                 | 
2cab0                 | _fatfs_cc_create_name
2cab0     0D 4A 05 F6 | 	mov	COUNT_, #13
2cab4     A8 00 A0 FD | 	call	#pushregs_
2cab8     34 F0 07 F1 | 	add	ptra, #52
2cabc     04 4E 05 F1 | 	add	fp, #4
2cac0     A7 12 62 FC | 	wrlong	arg01, fp
2cac4     04 4E 05 F1 | 	add	fp, #4
2cac8     A7 14 62 FC | 	wrlong	arg02, fp
2cacc     0A FB 01 FB | 	rdlong	result1, arg02
2cad0     28 4E 05 F1 | 	add	fp, #40
2cad4     A7 FA 61 FC | 	wrlong	result1, fp
2cad8     2C 4E 85 F1 | 	sub	fp, #44
2cadc     A7 FA 01 FB | 	rdlong	result1, fp
2cae0     FD 26 02 FB | 	rdlong	local01, result1
2cae4     0C 26 06 F1 | 	add	local01, #12
2cae8     13 29 02 FB | 	rdlong	local02, local01
2caec     14 4E 05 F1 | 	add	fp, #20
2caf0     A7 28 62 FC | 	wrlong	local02, fp
2caf4     14 4E 05 F1 | 	add	fp, #20
2caf8     A7 00 68 FC | 	wrlong	#0, fp
2cafc     2C 4E 85 F1 | 	sub	fp, #44
2cb00                 | ' 
2cb00                 | ' 
2cb00                 | ' 
2cb00                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2cb00                 | ' 	for (;;) {
2cb00                 | LR__4520
2cb00     30 4E 05 F1 | 	add	fp, #48
2cb04     A7 12 02 F6 | 	mov	arg01, fp
2cb08     30 4E 85 F1 | 	sub	fp, #48
2cb0c     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2cb10     1C 4E 05 F1 | 	add	fp, #28
2cb14     A7 FA 61 FC | 	wrlong	result1, fp
2cb18     1C 4E 85 F1 | 	sub	fp, #28
2cb1c     FF FF 7F FF 
2cb20     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2cb24     06 FA 05 A6 |  if_e	mov	result1, #6
2cb28     74 08 90 AD |  if_e	jmp	#LR__4560
2cb2c     1C 4E 05 F1 | 	add	fp, #28
2cb30     A7 26 02 FB | 	rdlong	local01, fp
2cb34     1C 4E 85 F1 | 	sub	fp, #28
2cb38     80 00 00 FF 
2cb3c     00 26 16 F2 | 	cmp	local01, ##65536 wc
2cb40     3C 00 90 CD |  if_b	jmp	#LR__4521
2cb44     18 4E 05 F1 | 	add	fp, #24
2cb48     A7 2A 02 FB | 	rdlong	local03, fp
2cb4c     14 4E 05 F1 | 	add	fp, #20
2cb50     A7 26 02 FB | 	rdlong	local01, fp
2cb54     13 2D 02 F6 | 	mov	local04, local01
2cb58     01 2C 06 F1 | 	add	local04, #1
2cb5c     A7 2C 62 FC | 	wrlong	local04, fp
2cb60     01 26 66 F0 | 	shl	local01, #1
2cb64     15 27 02 F1 | 	add	local01, local03
2cb68     10 4E 85 F1 | 	sub	fp, #16
2cb6c     A7 2E 02 FB | 	rdlong	local05, fp
2cb70     1C 4E 85 F1 | 	sub	fp, #28
2cb74     17 31 02 F6 | 	mov	local06, local05
2cb78     10 30 46 F0 | 	shr	local06, #16
2cb7c     13 31 52 FC | 	wrword	local06, local01
2cb80                 | LR__4521
2cb80     1C 4E 05 F1 | 	add	fp, #28
2cb84     A7 26 02 FB | 	rdlong	local01, fp
2cb88     08 4E 85 F1 | 	sub	fp, #8
2cb8c     A7 26 52 FC | 	wrword	local01, fp
2cb90     A7 26 E2 FA | 	rdword	local01, fp
2cb94     14 4E 85 F1 | 	sub	fp, #20
2cb98     20 26 16 F2 | 	cmp	local01, #32 wc
2cb9c     B0 00 90 CD |  if_b	jmp	#LR__4523
2cba0     14 4E 05 F1 | 	add	fp, #20
2cba4     A7 26 E2 FA | 	rdword	local01, fp
2cba8     14 4E 85 F1 | 	sub	fp, #20
2cbac     2F 26 0E F2 | 	cmp	local01, #47 wz
2cbb0     14 4E 05 51 |  if_ne	add	fp, #20
2cbb4     A7 2C E2 5A |  if_ne	rdword	local04, fp
2cbb8     14 4E 85 51 |  if_ne	sub	fp, #20
2cbbc     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2cbc0     8C 00 90 AD |  if_e	jmp	#LR__4523
2cbc4     14 4E 05 F1 | 	add	fp, #20
2cbc8     A7 12 E2 FA | 	rdword	arg01, fp
2cbcc     14 4E 85 F1 | 	sub	fp, #20
2cbd0     80 12 16 F2 | 	cmp	arg01, #128 wc
2cbd4     24 00 90 3D |  if_ae	jmp	#LR__4522
2cbd8     95 01 00 FF 
2cbdc     14 13 06 F6 | 	mov	arg01, ##@LR__5182
2cbe0     14 4E 05 F1 | 	add	fp, #20
2cbe4     A7 14 E2 FA | 	rdword	arg02, fp
2cbe8     14 4E 85 F1 | 	sub	fp, #20
2cbec     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2cbf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbf4     06 FA 05 56 |  if_ne	mov	result1, #6
2cbf8     A4 07 90 5D |  if_ne	jmp	#LR__4560
2cbfc                 | LR__4522
2cbfc     2C 4E 05 F1 | 	add	fp, #44
2cc00     A7 30 02 FB | 	rdlong	local06, fp
2cc04     2C 4E 85 F1 | 	sub	fp, #44
2cc08     FF 30 16 F2 | 	cmp	local06, #255 wc
2cc0c     06 FA 05 36 |  if_ae	mov	result1, #6
2cc10     8C 07 90 3D |  if_ae	jmp	#LR__4560
2cc14     18 4E 05 F1 | 	add	fp, #24
2cc18     A7 2A 02 FB | 	rdlong	local03, fp
2cc1c     14 4E 05 F1 | 	add	fp, #20
2cc20     A7 28 02 FB | 	rdlong	local02, fp
2cc24     14 2D 02 F6 | 	mov	local04, local02
2cc28     01 2C 06 F1 | 	add	local04, #1
2cc2c     A7 2C 62 FC | 	wrlong	local04, fp
2cc30     14 27 02 F6 | 	mov	local01, local02
2cc34     01 26 66 F0 | 	shl	local01, #1
2cc38     15 27 02 F1 | 	add	local01, local03
2cc3c     18 4E 85 F1 | 	sub	fp, #24
2cc40     A7 30 E2 FA | 	rdword	local06, fp
2cc44     14 4E 85 F1 | 	sub	fp, #20
2cc48     13 31 52 FC | 	wrword	local06, local01
2cc4c     B0 FE 9F FD | 	jmp	#LR__4520
2cc50                 | LR__4523
2cc50     14 4E 05 F1 | 	add	fp, #20
2cc54     A7 32 E2 FA | 	rdword	local07, fp
2cc58     14 4E 85 F1 | 	sub	fp, #20
2cc5c     20 32 16 F2 | 	cmp	local07, #32 wc
2cc60     10 4E 05 C1 |  if_b	add	fp, #16
2cc64     A7 08 48 CC |  if_b	wrbyte	#4, fp
2cc68     10 4E 85 C1 |  if_b	sub	fp, #16
2cc6c     74 00 90 CD |  if_b	jmp	#LR__4528
2cc70     97 24 48 FB | 	callpa	#(@LR__4526-@LR__4524)>>2,fcache_load_ptr_
2cc74                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2cc74                 | LR__4524
2cc74     30 4E 05 F1 | 	add	fp, #48
2cc78     A7 2C 02 FB | 	rdlong	local04, fp
2cc7c     30 4E 85 F1 | 	sub	fp, #48
2cc80     16 33 C2 FA | 	rdbyte	local07, local04
2cc84     2F 32 0E F2 | 	cmp	local07, #47 wz
2cc88     18 00 90 AD |  if_e	jmp	#LR__4525
2cc8c     30 4E 05 F1 | 	add	fp, #48
2cc90     A7 2C 02 FB | 	rdlong	local04, fp
2cc94     30 4E 85 F1 | 	sub	fp, #48
2cc98     16 29 C2 FA | 	rdbyte	local02, local04
2cc9c     5C 28 0E F2 | 	cmp	local02, #92 wz
2cca0     18 00 90 5D |  if_ne	jmp	#LR__4527
2cca4                 | LR__4525
2cca4     30 4E 05 F1 | 	add	fp, #48
2cca8     A7 26 02 FB | 	rdlong	local01, fp
2ccac     01 26 06 F1 | 	add	local01, #1
2ccb0     A7 26 62 FC | 	wrlong	local01, fp
2ccb4     30 4E 85 F1 | 	sub	fp, #48
2ccb8     B8 FF 9F FD | 	jmp	#LR__4524
2ccbc                 | LR__4526
2ccbc                 | LR__4527
2ccbc     10 4E 05 F1 | 	add	fp, #16
2ccc0     A7 00 48 FC | 	wrbyte	#0, fp
2ccc4     20 4E 05 F1 | 	add	fp, #32
2ccc8     A7 30 02 FB | 	rdlong	local06, fp
2cccc     30 4E 85 F1 | 	sub	fp, #48
2ccd0     18 33 C2 FA | 	rdbyte	local07, local06
2ccd4     20 32 16 F2 | 	cmp	local07, #32 wc
2ccd8     10 4E 05 C1 |  if_b	add	fp, #16
2ccdc     A7 08 48 CC |  if_b	wrbyte	#4, fp
2cce0     10 4E 85 C1 |  if_b	sub	fp, #16
2cce4                 | LR__4528
2cce4     08 4E 05 F1 | 	add	fp, #8
2cce8     A7 32 02 FB | 	rdlong	local07, fp
2ccec     28 4E 05 F1 | 	add	fp, #40
2ccf0     A7 26 02 FB | 	rdlong	local01, fp
2ccf4     30 4E 85 F1 | 	sub	fp, #48
2ccf8     19 27 62 FC | 	wrlong	local01, local07
2ccfc     97 38 48 FB | 	callpa	#(@LR__4530-@LR__4529)>>2,fcache_load_ptr_
2cd00                 | ' 	}
2cd00                 | ' 	*path = p;
2cd00                 | ' #line 2862 "ff.c"
2cd00                 | ' 	while (di) {
2cd00                 | LR__4529
2cd00     2C 4E 05 F1 | 	add	fp, #44
2cd04     A7 32 0A FB | 	rdlong	local07, fp wz
2cd08     2C 4E 85 F1 | 	sub	fp, #44
2cd0c     60 00 90 AD |  if_e	jmp	#LR__4531
2cd10     18 4E 05 F1 | 	add	fp, #24
2cd14     A7 30 02 FB | 	rdlong	local06, fp
2cd18     14 4E 05 F1 | 	add	fp, #20
2cd1c     A7 2C 02 FB | 	rdlong	local04, fp
2cd20     01 2C 86 F1 | 	sub	local04, #1
2cd24     01 2C 66 F0 | 	shl	local04, #1
2cd28     18 2D 02 F1 | 	add	local04, local06
2cd2c     16 31 E2 FA | 	rdword	local06, local04
2cd30     18 4E 85 F1 | 	sub	fp, #24
2cd34     A7 30 52 FC | 	wrword	local06, fp
2cd38     A7 32 E2 FA | 	rdword	local07, fp
2cd3c     14 4E 85 F1 | 	sub	fp, #20
2cd40     20 32 0E F2 | 	cmp	local07, #32 wz
2cd44     14 4E 05 51 |  if_ne	add	fp, #20
2cd48     A7 26 E2 5A |  if_ne	rdword	local01, fp
2cd4c     14 4E 85 51 |  if_ne	sub	fp, #20
2cd50     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2cd54     18 00 90 5D |  if_ne	jmp	#LR__4531
2cd58     2C 4E 05 F1 | 	add	fp, #44
2cd5c     A7 26 02 FB | 	rdlong	local01, fp
2cd60     01 26 86 F1 | 	sub	local01, #1
2cd64     A7 26 62 FC | 	wrlong	local01, fp
2cd68     2C 4E 85 F1 | 	sub	fp, #44
2cd6c     90 FF 9F FD | 	jmp	#LR__4529
2cd70                 | LR__4530
2cd70                 | LR__4531
2cd70     18 4E 05 F1 | 	add	fp, #24
2cd74     A7 34 02 FB | 	rdlong	local08, fp
2cd78     14 4E 05 F1 | 	add	fp, #20
2cd7c     A7 2C 02 FB | 	rdlong	local04, fp
2cd80     01 2C 66 F0 | 	shl	local04, #1
2cd84     1A 2D 02 F1 | 	add	local04, local08
2cd88     16 01 58 FC | 	wrword	#0, local04
2cd8c     A7 32 0A FB | 	rdlong	local07, fp wz
2cd90     2C 4E 85 F1 | 	sub	fp, #44
2cd94     06 FA 05 A6 |  if_e	mov	result1, #6
2cd98     04 06 90 AD |  if_e	jmp	#LR__4560
2cd9c                 | ' 
2cd9c                 | ' 
2cd9c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2cd9c     28 4E 05 F1 | 	add	fp, #40
2cda0     A7 00 68 FC | 	wrlong	#0, fp
2cda4     28 4E 85 F1 | 	sub	fp, #40
2cda8     97 22 48 FB | 	callpa	#(@LR__4533-@LR__4532)>>2,fcache_load_ptr_
2cdac                 | LR__4532
2cdac     18 4E 05 F1 | 	add	fp, #24
2cdb0     A7 36 02 FB | 	rdlong	local09, fp
2cdb4     10 4E 05 F1 | 	add	fp, #16
2cdb8     A7 38 02 FB | 	rdlong	local10, fp
2cdbc     28 4E 85 F1 | 	sub	fp, #40
2cdc0     01 38 66 F0 | 	shl	local10, #1
2cdc4     1B 39 02 F1 | 	add	local10, local09
2cdc8     1C 3B E2 FA | 	rdword	local11, local10
2cdcc     20 3A 0E F2 | 	cmp	local11, #32 wz
2cdd0     1C 00 90 5D |  if_ne	jmp	#LR__4534
2cdd4     28 4E 05 F1 | 	add	fp, #40
2cdd8     A7 3C 02 FB | 	rdlong	local12, fp
2cddc     1E 2F 02 F6 | 	mov	local05, local12
2cde0     01 2E 06 F1 | 	add	local05, #1
2cde4     A7 2E 62 FC | 	wrlong	local05, fp
2cde8     28 4E 85 F1 | 	sub	fp, #40
2cdec     BC FF 9F FD | 	jmp	#LR__4532
2cdf0                 | LR__4533
2cdf0                 | LR__4534
2cdf0     28 4E 05 F1 | 	add	fp, #40
2cdf4     A7 32 02 FB | 	rdlong	local07, fp
2cdf8     28 4E 85 F1 | 	sub	fp, #40
2cdfc     01 32 16 F2 | 	cmp	local07, #1 wc
2ce00     28 00 90 3D |  if_ae	jmp	#LR__4535
2ce04     18 4E 05 F1 | 	add	fp, #24
2ce08     A7 2A 02 FB | 	rdlong	local03, fp
2ce0c     10 4E 05 F1 | 	add	fp, #16
2ce10     A7 36 02 FB | 	rdlong	local09, fp
2ce14     28 4E 85 F1 | 	sub	fp, #40
2ce18     01 36 66 F0 | 	shl	local09, #1
2ce1c     15 37 02 F1 | 	add	local09, local03
2ce20     1B 27 E2 FA | 	rdword	local01, local09
2ce24     2E 26 0E F2 | 	cmp	local01, #46 wz
2ce28     14 00 90 5D |  if_ne	jmp	#LR__4536
2ce2c                 | LR__4535
2ce2c     10 4E 05 F1 | 	add	fp, #16
2ce30     A7 32 C2 FA | 	rdbyte	local07, fp
2ce34     03 32 46 F5 | 	or	local07, #3
2ce38     A7 32 42 FC | 	wrbyte	local07, fp
2ce3c     10 4E 85 F1 | 	sub	fp, #16
2ce40                 | LR__4536
2ce40     97 2C 48 FB | 	callpa	#(@LR__4538-@LR__4537)>>2,fcache_load_ptr_
2ce44                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2ce44                 | LR__4537
2ce44     2C 4E 05 F1 | 	add	fp, #44
2ce48     A7 32 02 FB | 	rdlong	local07, fp
2ce4c     2C 4E 85 F1 | 	sub	fp, #44
2ce50     01 32 16 F2 | 	cmp	local07, #1 wc
2ce54     44 00 90 CD |  if_b	jmp	#LR__4539
2ce58     18 4E 05 F1 | 	add	fp, #24
2ce5c     A7 30 02 FB | 	rdlong	local06, fp
2ce60     14 4E 05 F1 | 	add	fp, #20
2ce64     A7 2A 02 FB | 	rdlong	local03, fp
2ce68     2C 4E 85 F1 | 	sub	fp, #44
2ce6c     01 2A 86 F1 | 	sub	local03, #1
2ce70     01 2A 66 F0 | 	shl	local03, #1
2ce74     18 2B 02 F1 | 	add	local03, local06
2ce78     15 27 E2 FA | 	rdword	local01, local03
2ce7c     2E 26 0E F2 | 	cmp	local01, #46 wz
2ce80     18 00 90 AD |  if_e	jmp	#LR__4539
2ce84     2C 4E 05 F1 | 	add	fp, #44
2ce88     A7 26 02 FB | 	rdlong	local01, fp
2ce8c     01 26 86 F1 | 	sub	local01, #1
2ce90     A7 26 62 FC | 	wrlong	local01, fp
2ce94     2C 4E 85 F1 | 	sub	fp, #44
2ce98     A8 FF 9F FD | 	jmp	#LR__4537
2ce9c                 | LR__4538
2ce9c                 | LR__4539
2ce9c     04 4E 05 F1 | 	add	fp, #4
2cea0     A7 12 02 FB | 	rdlong	arg01, fp
2cea4     04 4E 85 F1 | 	sub	fp, #4
2cea8     20 12 06 F1 | 	add	arg01, #32
2ceac     20 14 06 F6 | 	mov	arg02, #32
2ceb0     0B 16 06 F6 | 	mov	arg03, #11
2ceb4     09 3F 02 F6 | 	mov	local13, arg01
2ceb8     98 00 A0 FD | 	call	#\builtin_bytefill_
2cebc     1F FB 01 F6 | 	mov	result1, local13
2cec0     0C 4E 05 F1 | 	add	fp, #12
2cec4     A7 00 48 FC | 	wrbyte	#0, fp
2cec8     A7 32 C2 FA | 	rdbyte	local07, fp
2cecc     14 4E 05 F1 | 	add	fp, #20
2ced0     A7 32 62 FC | 	wrlong	local07, fp
2ced4     04 4E 05 F1 | 	add	fp, #4
2ced8     A7 10 68 FC | 	wrlong	#8, fp
2cedc     24 4E 85 F1 | 	sub	fp, #36
2cee0                 | ' 
2cee0                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2cee0                 | ' 	i = b = 0; ni = 8;
2cee0                 | ' 	for (;;) {
2cee0                 | LR__4540
2cee0     18 4E 05 F1 | 	add	fp, #24
2cee4     A7 2A 02 FB | 	rdlong	local03, fp
2cee8     10 4E 05 F1 | 	add	fp, #16
2ceec     A7 36 02 FB | 	rdlong	local09, fp
2cef0     1B 2D 02 F6 | 	mov	local04, local09
2cef4     01 2C 06 F1 | 	add	local04, #1
2cef8     A7 2C 62 FC | 	wrlong	local04, fp
2cefc     01 36 66 F0 | 	shl	local09, #1
2cf00     15 37 02 F1 | 	add	local09, local03
2cf04     1B 31 E2 FA | 	rdword	local06, local09
2cf08     14 4E 85 F1 | 	sub	fp, #20
2cf0c     A7 30 52 FC | 	wrword	local06, fp
2cf10     A7 32 EA FA | 	rdword	local07, fp wz
2cf14     14 4E 85 F1 | 	sub	fp, #20
2cf18     74 03 90 AD |  if_e	jmp	#LR__4556
2cf1c     14 4E 05 F1 | 	add	fp, #20
2cf20     A7 32 E2 FA | 	rdword	local07, fp
2cf24     14 4E 85 F1 | 	sub	fp, #20
2cf28     20 32 0E F2 | 	cmp	local07, #32 wz
2cf2c     30 00 90 AD |  if_e	jmp	#LR__4541
2cf30     14 4E 05 F1 | 	add	fp, #20
2cf34     A7 26 E2 FA | 	rdword	local01, fp
2cf38     14 4E 85 F1 | 	sub	fp, #20
2cf3c     2E 26 0E F2 | 	cmp	local01, #46 wz
2cf40     34 00 90 5D |  if_ne	jmp	#LR__4542
2cf44     28 4E 05 F1 | 	add	fp, #40
2cf48     A7 2C 02 FB | 	rdlong	local04, fp
2cf4c     04 4E 05 F1 | 	add	fp, #4
2cf50     A7 38 02 FB | 	rdlong	local10, fp
2cf54     2C 4E 85 F1 | 	sub	fp, #44
2cf58     1C 2D 0A F2 | 	cmp	local04, local10 wz
2cf5c     18 00 90 AD |  if_e	jmp	#LR__4542
2cf60                 | LR__4541
2cf60     10 4E 05 F1 | 	add	fp, #16
2cf64     A7 32 C2 FA | 	rdbyte	local07, fp
2cf68     03 32 46 F5 | 	or	local07, #3
2cf6c     A7 32 42 FC | 	wrbyte	local07, fp
2cf70     10 4E 85 F1 | 	sub	fp, #16
2cf74                 | ' 			cf |=  0x01  |  0x02 ;
2cf74                 | ' 			continue;
2cf74     68 FF 9F FD | 	jmp	#LR__4540
2cf78                 | LR__4542
2cf78     20 4E 05 F1 | 	add	fp, #32
2cf7c     A7 32 02 FB | 	rdlong	local07, fp
2cf80     04 4E 05 F1 | 	add	fp, #4
2cf84     A7 26 02 FB | 	rdlong	local01, fp
2cf88     24 4E 85 F1 | 	sub	fp, #36
2cf8c     13 33 12 F2 | 	cmp	local07, local01 wc
2cf90     1C 00 90 3D |  if_ae	jmp	#LR__4543
2cf94     28 4E 05 F1 | 	add	fp, #40
2cf98     A7 34 02 FB | 	rdlong	local08, fp
2cf9c     04 4E 05 F1 | 	add	fp, #4
2cfa0     A7 38 02 FB | 	rdlong	local10, fp
2cfa4     2C 4E 85 F1 | 	sub	fp, #44
2cfa8     1C 35 0A F2 | 	cmp	local08, local10 wz
2cfac     B0 00 90 5D |  if_ne	jmp	#LR__4545
2cfb0                 | LR__4543
2cfb0     24 4E 05 F1 | 	add	fp, #36
2cfb4     A7 32 02 FB | 	rdlong	local07, fp
2cfb8     24 4E 85 F1 | 	sub	fp, #36
2cfbc     0B 32 0E F2 | 	cmp	local07, #11 wz
2cfc0     18 00 90 5D |  if_ne	jmp	#LR__4544
2cfc4     10 4E 05 F1 | 	add	fp, #16
2cfc8     A7 32 C2 FA | 	rdbyte	local07, fp
2cfcc     03 32 46 F5 | 	or	local07, #3
2cfd0     A7 32 42 FC | 	wrbyte	local07, fp
2cfd4     10 4E 85 F1 | 	sub	fp, #16
2cfd8                 | ' 				cf |=  0x01  |  0x02 ;
2cfd8                 | ' 				break;
2cfd8     B4 02 90 FD | 	jmp	#LR__4556
2cfdc                 | LR__4544
2cfdc     28 4E 05 F1 | 	add	fp, #40
2cfe0     A7 32 02 FB | 	rdlong	local07, fp
2cfe4     04 4E 05 F1 | 	add	fp, #4
2cfe8     A7 26 02 FB | 	rdlong	local01, fp
2cfec     2C 4E 85 F1 | 	sub	fp, #44
2cff0     13 33 0A F2 | 	cmp	local07, local01 wz
2cff4     10 4E 05 51 |  if_ne	add	fp, #16
2cff8     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2cffc     03 32 46 55 |  if_ne	or	local07, #3
2d000     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2d004     10 4E 85 51 |  if_ne	sub	fp, #16
2d008     28 4E 05 F1 | 	add	fp, #40
2d00c     A7 32 02 FB | 	rdlong	local07, fp
2d010     04 4E 05 F1 | 	add	fp, #4
2d014     A7 28 02 FB | 	rdlong	local02, fp
2d018     2C 4E 85 F1 | 	sub	fp, #44
2d01c     14 33 1A F2 | 	cmp	local07, local02 wcz
2d020     6C 02 90 1D |  if_a	jmp	#LR__4556
2d024     2C 4E 05 F1 | 	add	fp, #44
2d028     A7 32 02 FB | 	rdlong	local07, fp
2d02c     04 4E 85 F1 | 	sub	fp, #4
2d030     A7 32 62 FC | 	wrlong	local07, fp
2d034     08 4E 85 F1 | 	sub	fp, #8
2d038     A7 10 68 FC | 	wrlong	#8, fp
2d03c     04 4E 05 F1 | 	add	fp, #4
2d040     A7 16 68 FC | 	wrlong	#11, fp
2d044     18 4E 85 F1 | 	sub	fp, #24
2d048     A7 3A C2 FA | 	rdbyte	local11, fp
2d04c     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2d050     02 32 66 F0 | 	shl	local07, #2
2d054     A7 32 42 FC | 	wrbyte	local07, fp
2d058     0C 4E 85 F1 | 	sub	fp, #12
2d05c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2d05c                 | ' 			continue;
2d05c     80 FE 9F FD | 	jmp	#LR__4540
2d060                 | LR__4545
2d060     14 4E 05 F1 | 	add	fp, #20
2d064     A7 32 E2 FA | 	rdword	local07, fp
2d068     14 4E 85 F1 | 	sub	fp, #20
2d06c     80 32 16 F2 | 	cmp	local07, #128 wc
2d070     6C 00 90 CD |  if_b	jmp	#LR__4547
2d074     10 4E 05 F1 | 	add	fp, #16
2d078     A7 32 C2 FA | 	rdbyte	local07, fp
2d07c     02 32 46 F5 | 	or	local07, #2
2d080     A7 32 42 FC | 	wrbyte	local07, fp
2d084     04 4E 05 F1 | 	add	fp, #4
2d088     A7 12 E2 FA | 	rdword	arg01, fp
2d08c     14 4E 85 F1 | 	sub	fp, #20
2d090     01 00 00 FF 
2d094     52 15 06 F6 | 	mov	arg02, ##850
2d098     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2d09c     14 4E 05 F1 | 	add	fp, #20
2d0a0     A7 FA 51 FC | 	wrword	result1, fp
2d0a4     A7 32 E2 FA | 	rdword	local07, fp
2d0a8     14 4E 85 F1 | 	sub	fp, #20
2d0ac     80 32 CE F7 | 	test	local07, #128 wz
2d0b0     2C 00 90 AD |  if_e	jmp	#LR__4546
2d0b4     14 4E 05 F1 | 	add	fp, #20
2d0b8     A7 28 E2 FA | 	rdword	local02, fp
2d0bc     7F 28 06 F5 | 	and	local02, #127
2d0c0     01 00 00 FF 
2d0c4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2d0c8     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2d0cc     14 33 C2 FA | 	rdbyte	local07, local02
2d0d0     A7 32 52 FC | 	wrword	local07, fp
2d0d4     14 4E 85 F1 | 	sub	fp, #20
2d0d8     01 00 00 FF 
2d0dc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2d0e0                 | LR__4546
2d0e0                 | LR__4547
2d0e0     14 4E 05 F1 | 	add	fp, #20
2d0e4     A7 32 E2 FA | 	rdword	local07, fp
2d0e8     14 4E 85 F1 | 	sub	fp, #20
2d0ec     00 33 16 F2 | 	cmp	local07, #256 wc
2d0f0     88 00 90 CD |  if_b	jmp	#LR__4549
2d0f4     24 4E 05 F1 | 	add	fp, #36
2d0f8     A7 32 02 FB | 	rdlong	local07, fp
2d0fc     01 32 86 F1 | 	sub	local07, #1
2d100     04 4E 85 F1 | 	sub	fp, #4
2d104     A7 28 02 FB | 	rdlong	local02, fp
2d108     20 4E 85 F1 | 	sub	fp, #32
2d10c     19 29 12 F2 | 	cmp	local02, local07 wc
2d110     2C 00 90 CD |  if_b	jmp	#LR__4548
2d114     10 4E 05 F1 | 	add	fp, #16
2d118     A7 3A C2 FA | 	rdbyte	local11, fp
2d11c     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2d120     03 32 46 F5 | 	or	local07, #3
2d124     A7 32 42 FC | 	wrbyte	local07, fp
2d128     14 4E 05 F1 | 	add	fp, #20
2d12c     A7 32 02 FB | 	rdlong	local07, fp
2d130     04 4E 85 F1 | 	sub	fp, #4
2d134     A7 32 62 FC | 	wrlong	local07, fp
2d138     20 4E 85 F1 | 	sub	fp, #32
2d13c                 | ' 				cf |=  0x01  |  0x02 ;
2d13c                 | ' 				i = ni; continue;
2d13c     A0 FD 9F FD | 	jmp	#LR__4540
2d140                 | LR__4548
2d140     04 4E 05 F1 | 	add	fp, #4
2d144     A7 36 02 FB | 	rdlong	local09, fp
2d148     1C 4E 05 F1 | 	add	fp, #28
2d14c     A7 38 02 FB | 	rdlong	local10, fp
2d150     1C 2D 02 F6 | 	mov	local04, local10
2d154     01 2C 06 F1 | 	add	local04, #1
2d158     A7 2C 62 FC | 	wrlong	local04, fp
2d15c     20 36 06 F1 | 	add	local09, #32
2d160     1B 39 02 F1 | 	add	local10, local09
2d164     0C 4E 85 F1 | 	sub	fp, #12
2d168     A7 2A E2 FA | 	rdword	local03, fp
2d16c     14 4E 85 F1 | 	sub	fp, #20
2d170     08 2A 46 F0 | 	shr	local03, #8
2d174     1C 2B 42 FC | 	wrbyte	local03, local10
2d178     D4 00 90 FD | 	jmp	#LR__4555
2d17c                 | LR__4549
2d17c     14 4E 05 F1 | 	add	fp, #20
2d180     A7 32 EA FA | 	rdword	local07, fp wz
2d184     14 4E 85 F1 | 	sub	fp, #20
2d188     20 00 90 AD |  if_e	jmp	#LR__4550
2d18c     95 01 00 FF 
2d190     1D 13 06 F6 | 	mov	arg01, ##@LR__5183
2d194     14 4E 05 F1 | 	add	fp, #20
2d198     A7 14 E2 FA | 	rdword	arg02, fp
2d19c     14 4E 85 F1 | 	sub	fp, #20
2d1a0     48 CB BF FD | 	call	#_fatfs_cc_strchr
2d1a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d1a8     20 00 90 AD |  if_e	jmp	#LR__4551
2d1ac                 | LR__4550
2d1ac     14 4E 05 F1 | 	add	fp, #20
2d1b0     A7 BE 58 FC | 	wrword	#95, fp
2d1b4     04 4E 85 F1 | 	sub	fp, #4
2d1b8     A7 32 C2 FA | 	rdbyte	local07, fp
2d1bc     03 32 46 F5 | 	or	local07, #3
2d1c0     A7 32 42 FC | 	wrbyte	local07, fp
2d1c4     10 4E 85 F1 | 	sub	fp, #16
2d1c8     84 00 90 FD | 	jmp	#LR__4554
2d1cc                 | LR__4551
2d1cc     14 4E 05 F1 | 	add	fp, #20
2d1d0     A7 32 E2 FA | 	rdword	local07, fp
2d1d4     14 4E 85 F1 | 	sub	fp, #20
2d1d8     41 32 16 F2 | 	cmp	local07, #65 wc
2d1dc     24 00 90 CD |  if_b	jmp	#LR__4552
2d1e0     14 4E 05 F1 | 	add	fp, #20
2d1e4     A7 26 E2 FA | 	rdword	local01, fp
2d1e8     14 4E 85 F1 | 	sub	fp, #20
2d1ec     5B 26 16 F2 | 	cmp	local01, #91 wc
2d1f0     0C 4E 05 C1 |  if_b	add	fp, #12
2d1f4     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2d1f8     02 32 46 C5 |  if_b	or	local07, #2
2d1fc     A7 32 42 CC |  if_b	wrbyte	local07, fp
2d200     0C 4E 85 C1 |  if_b	sub	fp, #12
2d204                 | LR__4552
2d204     14 4E 05 F1 | 	add	fp, #20
2d208     A7 32 E2 FA | 	rdword	local07, fp
2d20c     14 4E 85 F1 | 	sub	fp, #20
2d210     61 32 16 F2 | 	cmp	local07, #97 wc
2d214     38 00 90 CD |  if_b	jmp	#LR__4553
2d218     14 4E 05 F1 | 	add	fp, #20
2d21c     A7 26 E2 FA | 	rdword	local01, fp
2d220     14 4E 85 F1 | 	sub	fp, #20
2d224     7B 26 16 F2 | 	cmp	local01, #123 wc
2d228     24 00 90 3D |  if_ae	jmp	#LR__4553
2d22c     0C 4E 05 F1 | 	add	fp, #12
2d230     A7 32 C2 FA | 	rdbyte	local07, fp
2d234     01 32 46 F5 | 	or	local07, #1
2d238     A7 32 42 FC | 	wrbyte	local07, fp
2d23c     08 4E 05 F1 | 	add	fp, #8
2d240     A7 32 E2 FA | 	rdword	local07, fp
2d244     20 32 86 F1 | 	sub	local07, #32
2d248     A7 32 52 FC | 	wrword	local07, fp
2d24c     14 4E 85 F1 | 	sub	fp, #20
2d250                 | LR__4553
2d250                 | LR__4554
2d250                 | LR__4555
2d250     04 4E 05 F1 | 	add	fp, #4
2d254     A7 3A 02 FB | 	rdlong	local11, fp
2d258     1D 37 02 F6 | 	mov	local09, local11
2d25c     1C 4E 05 F1 | 	add	fp, #28
2d260     A7 28 02 FB | 	rdlong	local02, fp
2d264     14 2D 02 F6 | 	mov	local04, local02
2d268     01 2C 06 F1 | 	add	local04, #1
2d26c     A7 2C 62 FC | 	wrlong	local04, fp
2d270     14 39 02 F6 | 	mov	local10, local02
2d274     20 36 06 F1 | 	add	local09, #32
2d278     1B 39 02 F1 | 	add	local10, local09
2d27c     0C 4E 85 F1 | 	sub	fp, #12
2d280     A7 2A E2 FA | 	rdword	local03, fp
2d284     14 4E 85 F1 | 	sub	fp, #20
2d288     1C 2B 42 FC | 	wrbyte	local03, local10
2d28c     50 FC 9F FD | 	jmp	#LR__4540
2d290                 | LR__4556
2d290     04 4E 05 F1 | 	add	fp, #4
2d294     A7 3A 02 FB | 	rdlong	local11, fp
2d298     04 4E 85 F1 | 	sub	fp, #4
2d29c     20 3A 06 F1 | 	add	local11, #32
2d2a0     1D 33 C2 FA | 	rdbyte	local07, local11
2d2a4     E5 32 0E F2 | 	cmp	local07, #229 wz
2d2a8     04 4E 05 A1 |  if_e	add	fp, #4
2d2ac     A7 32 02 AB |  if_e	rdlong	local07, fp
2d2b0     04 4E 85 A1 |  if_e	sub	fp, #4
2d2b4     20 32 06 A1 |  if_e	add	local07, #32
2d2b8     19 0B 48 AC |  if_e	wrbyte	#5, local07
2d2bc     24 4E 05 F1 | 	add	fp, #36
2d2c0     A7 32 02 FB | 	rdlong	local07, fp
2d2c4     24 4E 85 F1 | 	sub	fp, #36
2d2c8     08 32 0E F2 | 	cmp	local07, #8 wz
2d2cc     0C 4E 05 A1 |  if_e	add	fp, #12
2d2d0     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2d2d4     02 32 66 A0 |  if_e	shl	local07, #2
2d2d8     A7 32 42 AC |  if_e	wrbyte	local07, fp
2d2dc     0C 4E 85 A1 |  if_e	sub	fp, #12
2d2e0     0C 4E 05 F1 | 	add	fp, #12
2d2e4     A7 32 C2 FA | 	rdbyte	local07, fp
2d2e8     0C 4E 85 F1 | 	sub	fp, #12
2d2ec     0C 32 06 F5 | 	and	local07, #12
2d2f0     0C 32 0E F2 | 	cmp	local07, #12 wz
2d2f4     18 00 90 AD |  if_e	jmp	#LR__4557
2d2f8     0C 4E 05 F1 | 	add	fp, #12
2d2fc     A7 26 C2 FA | 	rdbyte	local01, fp
2d300     0C 4E 85 F1 | 	sub	fp, #12
2d304     03 26 06 F5 | 	and	local01, #3
2d308     03 26 0E F2 | 	cmp	local01, #3 wz
2d30c     14 00 90 5D |  if_ne	jmp	#LR__4558
2d310                 | LR__4557
2d310     10 4E 05 F1 | 	add	fp, #16
2d314     A7 32 C2 FA | 	rdbyte	local07, fp
2d318     02 32 46 F5 | 	or	local07, #2
2d31c     A7 32 42 FC | 	wrbyte	local07, fp
2d320     10 4E 85 F1 | 	sub	fp, #16
2d324                 | LR__4558
2d324     10 4E 05 F1 | 	add	fp, #16
2d328     A7 32 C2 FA | 	rdbyte	local07, fp
2d32c     10 4E 85 F1 | 	sub	fp, #16
2d330     02 32 CE F7 | 	test	local07, #2 wz
2d334     48 00 90 5D |  if_ne	jmp	#LR__4559
2d338     0C 4E 05 F1 | 	add	fp, #12
2d33c     A7 32 C2 FA | 	rdbyte	local07, fp
2d340     0C 4E 85 F1 | 	sub	fp, #12
2d344     01 32 CE F7 | 	test	local07, #1 wz
2d348     10 4E 05 51 |  if_ne	add	fp, #16
2d34c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2d350     10 32 46 55 |  if_ne	or	local07, #16
2d354     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2d358     10 4E 85 51 |  if_ne	sub	fp, #16
2d35c     0C 4E 05 F1 | 	add	fp, #12
2d360     A7 32 C2 FA | 	rdbyte	local07, fp
2d364     0C 4E 85 F1 | 	sub	fp, #12
2d368     04 32 CE F7 | 	test	local07, #4 wz
2d36c     10 4E 05 51 |  if_ne	add	fp, #16
2d370     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2d374     08 32 46 55 |  if_ne	or	local07, #8
2d378     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2d37c     10 4E 85 51 |  if_ne	sub	fp, #16
2d380                 | LR__4559
2d380     04 4E 05 F1 | 	add	fp, #4
2d384     A7 32 02 FB | 	rdlong	local07, fp
2d388     0C 4E 05 F1 | 	add	fp, #12
2d38c     A7 26 C2 FA | 	rdbyte	local01, fp
2d390     10 4E 85 F1 | 	sub	fp, #16
2d394     2B 32 06 F1 | 	add	local07, #43
2d398     19 27 42 FC | 	wrbyte	local01, local07
2d39c                 | ' 	}
2d39c                 | ' 
2d39c                 | ' 	dp->fn[ 11 ] = cf;
2d39c                 | ' 
2d39c                 | ' 	return FR_OK;
2d39c     00 FA 05 F6 | 	mov	result1, #0
2d3a0                 | LR__4560
2d3a0     A7 F0 03 F6 | 	mov	ptra, fp
2d3a4     B2 00 A0 FD | 	call	#popregs_
2d3a8                 | _fatfs_cc_create_name_ret
2d3a8     2D 00 64 FD | 	ret
2d3ac                 | 
2d3ac                 | _fatfs_cc_follow_path
2d3ac     02 4A 05 F6 | 	mov	COUNT_, #2
2d3b0     A8 00 A0 FD | 	call	#pushregs_
2d3b4     18 F0 07 F1 | 	add	ptra, #24
2d3b8     04 4E 05 F1 | 	add	fp, #4
2d3bc     A7 12 62 FC | 	wrlong	arg01, fp
2d3c0     04 4E 05 F1 | 	add	fp, #4
2d3c4     A7 14 62 FC | 	wrlong	arg02, fp
2d3c8     04 4E 85 F1 | 	sub	fp, #4
2d3cc     A7 FA 01 FB | 	rdlong	result1, fp
2d3d0     FD 26 02 FB | 	rdlong	local01, result1
2d3d4     10 4E 05 F1 | 	add	fp, #16
2d3d8     A7 26 62 FC | 	wrlong	local01, fp
2d3dc     14 4E 85 F1 | 	sub	fp, #20
2d3e0     97 24 48 FB | 	callpa	#(@LR__4572-@LR__4570)>>2,fcache_load_ptr_
2d3e4                 | ' )
2d3e4                 | ' {
2d3e4                 | ' 	FRESULT res;
2d3e4                 | ' 	BYTE ns;
2d3e4                 | ' 	FATFS *fs = dp->obj.fs;
2d3e4                 | ' #line 3034 "ff.c"
2d3e4                 | ' 	{
2d3e4                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2d3e4                 | LR__4570
2d3e4     08 4E 05 F1 | 	add	fp, #8
2d3e8     A7 26 02 FB | 	rdlong	local01, fp
2d3ec     08 4E 85 F1 | 	sub	fp, #8
2d3f0     13 27 C2 FA | 	rdbyte	local01, local01
2d3f4     2F 26 0E F2 | 	cmp	local01, #47 wz
2d3f8     18 00 90 AD |  if_e	jmp	#LR__4571
2d3fc     08 4E 05 F1 | 	add	fp, #8
2d400     A7 26 02 FB | 	rdlong	local01, fp
2d404     08 4E 85 F1 | 	sub	fp, #8
2d408     13 27 C2 FA | 	rdbyte	local01, local01
2d40c     5C 26 0E F2 | 	cmp	local01, #92 wz
2d410     18 00 90 5D |  if_ne	jmp	#LR__4573
2d414                 | LR__4571
2d414     08 4E 05 F1 | 	add	fp, #8
2d418     A7 26 02 FB | 	rdlong	local01, fp
2d41c     01 26 06 F1 | 	add	local01, #1
2d420     A7 26 62 FC | 	wrlong	local01, fp
2d424     08 4E 85 F1 | 	sub	fp, #8
2d428     B8 FF 9F FD | 	jmp	#LR__4570
2d42c                 | LR__4572
2d42c                 | LR__4573
2d42c     04 4E 05 F1 | 	add	fp, #4
2d430     A7 26 02 FB | 	rdlong	local01, fp
2d434     08 26 06 F1 | 	add	local01, #8
2d438     13 01 68 FC | 	wrlong	#0, local01
2d43c     04 4E 05 F1 | 	add	fp, #4
2d440     A7 26 02 FB | 	rdlong	local01, fp
2d444     08 4E 85 F1 | 	sub	fp, #8
2d448     13 27 C2 FA | 	rdbyte	local01, local01
2d44c     20 26 16 F2 | 	cmp	local01, #32 wc
2d450     30 00 90 3D |  if_ae	jmp	#LR__4574
2d454     04 4E 05 F1 | 	add	fp, #4
2d458     A7 26 02 FB | 	rdlong	local01, fp
2d45c     2B 26 06 F1 | 	add	local01, #43
2d460     13 01 49 FC | 	wrbyte	#128, local01
2d464     A7 12 02 FB | 	rdlong	arg01, fp
2d468     04 4E 85 F1 | 	sub	fp, #4
2d46c     00 14 06 F6 | 	mov	arg02, #0
2d470     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2d474     0C 4E 05 F1 | 	add	fp, #12
2d478     A7 FA 61 FC | 	wrlong	result1, fp
2d47c     0C 4E 85 F1 | 	sub	fp, #12
2d480     1C 01 90 FD | 	jmp	#LR__4578
2d484                 | LR__4574
2d484                 | ' 		for (;;) {
2d484                 | LR__4575
2d484     04 4E 05 F1 | 	add	fp, #4
2d488     A7 12 02 FB | 	rdlong	arg01, fp
2d48c     04 4E 05 F1 | 	add	fp, #4
2d490     A7 14 02 F6 | 	mov	arg02, fp
2d494     08 4E 85 F1 | 	sub	fp, #8
2d498     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2d49c     0C 4E 05 F1 | 	add	fp, #12
2d4a0     A7 FA 61 FC | 	wrlong	result1, fp
2d4a4     00 FA 4D F2 | 	cmps	result1, #0 wz
2d4a8     0C 4E 85 F1 | 	sub	fp, #12
2d4ac     F0 00 90 5D |  if_ne	jmp	#LR__4577
2d4b0     04 4E 05 F1 | 	add	fp, #4
2d4b4     A7 12 02 FB | 	rdlong	arg01, fp
2d4b8     04 4E 85 F1 | 	sub	fp, #4
2d4bc     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2d4c0     0C 4E 05 F1 | 	add	fp, #12
2d4c4     A7 FA 61 FC | 	wrlong	result1, fp
2d4c8     08 4E 85 F1 | 	sub	fp, #8
2d4cc     A7 26 02 FB | 	rdlong	local01, fp
2d4d0     2B 26 06 F1 | 	add	local01, #43
2d4d4     13 27 C2 FA | 	rdbyte	local01, local01
2d4d8     0C 4E 05 F1 | 	add	fp, #12
2d4dc     A7 26 42 FC | 	wrbyte	local01, fp
2d4e0     04 4E 85 F1 | 	sub	fp, #4
2d4e4     A7 26 0A FB | 	rdlong	local01, fp wz
2d4e8     0C 4E 85 F1 | 	sub	fp, #12
2d4ec     34 00 90 AD |  if_e	jmp	#LR__4576
2d4f0     0C 4E 05 F1 | 	add	fp, #12
2d4f4     A7 26 02 FB | 	rdlong	local01, fp
2d4f8     0C 4E 85 F1 | 	sub	fp, #12
2d4fc     04 26 0E F2 | 	cmp	local01, #4 wz
2d500     9C 00 90 5D |  if_ne	jmp	#LR__4577
2d504     10 4E 05 F1 | 	add	fp, #16
2d508     A7 26 C2 FA | 	rdbyte	local01, fp
2d50c     10 4E 85 F1 | 	sub	fp, #16
2d510     04 26 CE F7 | 	test	local01, #4 wz
2d514     0C 4E 05 A1 |  if_e	add	fp, #12
2d518     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d51c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d520                 | ' 					}
2d520                 | ' 				}
2d520                 | ' 				break;
2d520     7C 00 90 FD | 	jmp	#LR__4577
2d524                 | LR__4576
2d524     10 4E 05 F1 | 	add	fp, #16
2d528     A7 26 C2 FA | 	rdbyte	local01, fp
2d52c     10 4E 85 F1 | 	sub	fp, #16
2d530     04 26 CE F7 | 	test	local01, #4 wz
2d534     68 00 90 5D |  if_ne	jmp	#LR__4577
2d538     04 4E 05 F1 | 	add	fp, #4
2d53c     A7 26 02 FB | 	rdlong	local01, fp
2d540     04 4E 85 F1 | 	sub	fp, #4
2d544     06 26 06 F1 | 	add	local01, #6
2d548     13 27 C2 FA | 	rdbyte	local01, local01
2d54c     10 26 CE F7 | 	test	local01, #16 wz
2d550     0C 4E 05 A1 |  if_e	add	fp, #12
2d554     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d558     0C 4E 85 A1 |  if_e	sub	fp, #12
2d55c                 | ' 				res = FR_NO_PATH; break;
2d55c     40 00 90 AD |  if_e	jmp	#LR__4577
2d560     04 4E 05 F1 | 	add	fp, #4
2d564     A7 28 02 FB | 	rdlong	local02, fp
2d568     14 27 02 F6 | 	mov	local01, local02
2d56c     10 4E 05 F1 | 	add	fp, #16
2d570     A7 14 02 FB | 	rdlong	arg02, fp
2d574     0A 13 02 F6 | 	mov	arg01, arg02
2d578     34 14 06 F1 | 	add	arg02, #52
2d57c     14 4E 85 F1 | 	sub	fp, #20
2d580     10 28 06 F1 | 	add	local02, #16
2d584     14 29 02 FB | 	rdlong	local02, local02
2d588     FF 29 06 F5 | 	and	local02, #511
2d58c     14 15 02 F1 | 	add	arg02, local02
2d590     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2d594     08 26 06 F1 | 	add	local01, #8
2d598     13 FB 61 FC | 	wrlong	result1, local01
2d59c     E4 FE 9F FD | 	jmp	#LR__4575
2d5a0                 | LR__4577
2d5a0                 | LR__4578
2d5a0                 | ' 			}
2d5a0                 | ' #line 3090 "ff.c"
2d5a0                 | ' 			{
2d5a0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2d5a0                 | ' 			}
2d5a0                 | ' 		}
2d5a0                 | ' 	}
2d5a0                 | ' 
2d5a0                 | ' 	return res;
2d5a0     0C 4E 05 F1 | 	add	fp, #12
2d5a4     A7 FA 01 FB | 	rdlong	result1, fp
2d5a8     0C 4E 85 F1 | 	sub	fp, #12
2d5ac     A7 F0 03 F6 | 	mov	ptra, fp
2d5b0     B2 00 A0 FD | 	call	#popregs_
2d5b4                 | _fatfs_cc_follow_path_ret
2d5b4     2D 00 64 FD | 	ret
2d5b8                 | 
2d5b8                 | _fatfs_cc_get_ldnumber
2d5b8     01 00 66 F6 | 	neg	_var01, #1
2d5bc     09 03 0A FB | 	rdlong	_var02, arg01 wz
2d5c0     01 05 02 F6 | 	mov	_var03, _var02
2d5c4     01 FA 65 A6 |  if_e	neg	result1, #1
2d5c8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2d5cc     97 10 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2d5d0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2d5d0                 | LR__4580
2d5d0     02 07 C2 FA | 	rdbyte	_var04, _var03
2d5d4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2d5d8     20 FA 15 F2 | 	cmp	result1, #32 wc
2d5dc     01 04 06 F1 | 	add	_var03, #1
2d5e0     03 09 02 36 |  if_ae	mov	_var05, _var04
2d5e4     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2d5e8     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2d5ec     E0 FF 9F 1D |  if_a	jmp	#LR__4580
2d5f0                 | LR__4581
2d5f0     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2d5f4     3A 06 0E F2 | 	cmp	_var04, #58 wz
2d5f8     40 00 90 5D |  if_ne	jmp	#LR__4583
2d5fc     01 0A 06 F6 | 	mov	_var06, #1
2d600     01 09 C2 FA | 	rdbyte	_var05, _var02
2d604     30 08 16 F2 | 	cmp	_var05, #48 wc
2d608     1C 00 90 CD |  if_b	jmp	#LR__4582
2d60c     01 09 C2 FA | 	rdbyte	_var05, _var02
2d610     3A 08 16 F2 | 	cmp	_var05, #58 wc
2d614     01 0D 02 C6 |  if_b	mov	_var07, _var02
2d618     02 0C 06 C1 |  if_b	add	_var07, #2
2d61c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2d620     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2d624     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2d628                 | LR__4582
2d628     01 0A 56 F2 | 	cmps	_var06, #1 wc
2d62c     05 01 02 C6 |  if_b	mov	_var01, _var06
2d630     09 05 62 CC |  if_b	wrlong	_var03, arg01
2d634                 | ' 			vol = i;
2d634                 | ' 			*path = tt;
2d634                 | ' 		}
2d634                 | ' 		return vol;
2d634     00 FB 01 F6 | 	mov	result1, _var01
2d638     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2d63c                 | LR__4583
2d63c                 | ' 	}
2d63c                 | ' #line 3170 "ff.c"
2d63c                 | ' 	vol = 0;
2d63c                 | ' 
2d63c                 | ' 	return vol;
2d63c     00 FA 05 F6 | 	mov	result1, #0
2d640                 | _fatfs_cc_get_ldnumber_ret
2d640     2D 00 64 FD | 	ret
2d644                 | 
2d644                 | _fatfs_cc_check_fs
2d644     04 4A 05 F6 | 	mov	COUNT_, #4
2d648     A8 00 A0 FD | 	call	#pushregs_
2d64c     09 27 02 F6 | 	mov	local01, arg01
2d650     03 26 06 F1 | 	add	local01, #3
2d654     13 01 48 FC | 	wrbyte	#0, local01
2d658     2D 26 06 F1 | 	add	local01, #45
2d65c     FF FF FF FF 
2d660     13 FF 6B FC | 	wrlong	##-1, local01
2d664     30 26 86 F1 | 	sub	local01, #48
2d668     13 13 02 F6 | 	mov	arg01, local01
2d66c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2d670     00 FA 0D F2 | 	cmp	result1, #0 wz
2d674     04 FA 05 56 |  if_ne	mov	result1, #4
2d678     94 01 90 5D |  if_ne	jmp	#LR__4594
2d67c     34 26 06 F1 | 	add	local01, #52
2d680     13 13 02 F6 | 	mov	arg01, local01
2d684     FE 13 06 F1 | 	add	arg01, #510
2d688                 | ' {
2d688                 | ' 
2d688                 | ' 	return *((WORD*)ptr);
2d688     09 29 E2 FA | 	rdword	local02, arg01
2d68c     13 2B C2 FA | 	rdbyte	local03, local01
2d690     34 26 86 F1 | 	sub	local01, #52
2d694     15 2D E2 F8 | 	getbyte	local04, local03, #0
2d698     EB 2C 0E F2 | 	cmp	local04, #235 wz
2d69c     15 17 02 56 |  if_ne	mov	arg03, local03
2d6a0     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2d6a4     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2d6a8     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2d6ac     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2d6b0     44 01 90 5D |  if_ne	jmp	#LR__4593
2d6b4     14 2D 32 F9 | 	getword	local04, local02, #0
2d6b8     55 00 00 FF 
2d6bc     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2d6c0     2C 00 90 5D |  if_ne	jmp	#LR__4590
2d6c4     34 26 06 F1 | 	add	local01, #52
2d6c8     13 13 02 F6 | 	mov	arg01, local01
2d6cc     34 26 86 F1 | 	sub	local01, #52
2d6d0     52 12 06 F1 | 	add	arg01, #82
2d6d4     95 01 00 FF 
2d6d8     24 15 06 F6 | 	mov	arg02, ##@LR__5184
2d6dc     08 16 06 F6 | 	mov	arg03, #8
2d6e0     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2d6e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6e8                 | ' 			return 0;
2d6e8     00 FA 05 A6 |  if_e	mov	result1, #0
2d6ec     20 01 90 AD |  if_e	jmp	#LR__4594
2d6f0                 | LR__4590
2d6f0     34 26 06 F1 | 	add	local01, #52
2d6f4     13 13 02 F6 | 	mov	arg01, local01
2d6f8     0B 12 06 F1 | 	add	arg01, #11
2d6fc                 | ' {
2d6fc                 | ' 
2d6fc                 | ' 	return *((WORD*)ptr);
2d6fc     09 FB E1 FA | 	rdword	result1, arg01
2d700     0D 26 06 F1 | 	add	local01, #13
2d704     13 2B C2 FA | 	rdbyte	local03, local01
2d708     41 26 86 F1 | 	sub	local01, #65
2d70c     FD 2C 32 F9 | 	getword	local04, result1, #0
2d710     FD 14 32 F9 | 	getword	arg02, result1, #0
2d714     01 14 86 F1 | 	sub	arg02, #1
2d718     0A 2D CA F7 | 	test	local04, arg02 wz
2d71c     D8 00 90 5D |  if_ne	jmp	#LR__4592
2d720     FD 14 32 F9 | 	getword	arg02, result1, #0
2d724     01 00 00 FF 
2d728     00 14 16 F2 | 	cmp	arg02, ##512 wc
2d72c     C8 00 90 CD |  if_b	jmp	#LR__4592
2d730     FD 14 32 F9 | 	getword	arg02, result1, #0
2d734     01 00 00 FF 
2d738     01 14 16 F2 | 	cmp	arg02, ##513 wc
2d73c     B8 00 90 3D |  if_ae	jmp	#LR__4592
2d740     15 13 02 F6 | 	mov	arg01, local03
2d744     07 12 4E F7 | 	zerox	arg01, #7 wz
2d748     AC 00 90 AD |  if_e	jmp	#LR__4592
2d74c     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2d750     15 2B E2 F8 | 	getbyte	local03, local03, #0
2d754     01 2A 86 F1 | 	sub	local03, #1
2d758     15 13 CA F7 | 	test	arg01, local03 wz
2d75c     98 00 90 5D |  if_ne	jmp	#LR__4592
2d760     34 26 06 F1 | 	add	local01, #52
2d764     13 13 02 F6 | 	mov	arg01, local01
2d768     34 26 86 F1 | 	sub	local01, #52
2d76c     0E 12 06 F1 | 	add	arg01, #14
2d770                 | ' {
2d770                 | ' 
2d770                 | ' 	return *((WORD*)ptr);
2d770     09 FB E9 FA | 	rdword	result1, arg01 wz
2d774     80 00 90 AD |  if_e	jmp	#LR__4592
2d778     44 26 06 F1 | 	add	local01, #68
2d77c     13 13 C2 FA | 	rdbyte	arg01, local01
2d780     44 26 86 F1 | 	sub	local01, #68
2d784     01 12 86 F1 | 	sub	arg01, #1
2d788     02 12 16 F2 | 	cmp	arg01, #2 wc
2d78c     68 00 90 3D |  if_ae	jmp	#LR__4592
2d790     34 26 06 F1 | 	add	local01, #52
2d794     13 13 02 F6 | 	mov	arg01, local01
2d798     34 26 86 F1 | 	sub	local01, #52
2d79c     11 12 06 F1 | 	add	arg01, #17
2d7a0                 | ' {
2d7a0                 | ' 
2d7a0                 | ' 	return *((WORD*)ptr);
2d7a0     09 FB E9 FA | 	rdword	result1, arg01 wz
2d7a4     50 00 90 AD |  if_e	jmp	#LR__4592
2d7a8     34 26 06 F1 | 	add	local01, #52
2d7ac     13 13 02 F6 | 	mov	arg01, local01
2d7b0     34 26 86 F1 | 	sub	local01, #52
2d7b4     13 12 06 F1 | 	add	arg01, #19
2d7b8                 | ' {
2d7b8                 | ' 
2d7b8                 | ' 	return *((WORD*)ptr);
2d7b8     09 FB E1 FA | 	rdword	result1, arg01
2d7bc     FD 2A 32 F9 | 	getword	local03, result1, #0
2d7c0     80 2A 16 F2 | 	cmp	local03, #128 wc
2d7c4     20 00 90 3D |  if_ae	jmp	#LR__4591
2d7c8     34 26 06 F1 | 	add	local01, #52
2d7cc     13 13 02 F6 | 	mov	arg01, local01
2d7d0     34 26 86 F1 | 	sub	local01, #52
2d7d4     20 12 06 F1 | 	add	arg01, #32
2d7d8                 | ' {
2d7d8                 | ' 
2d7d8                 | ' 	return *((DWORD*)ptr);
2d7d8     09 FB 01 FB | 	rdlong	result1, arg01
2d7dc     80 00 00 FF 
2d7e0     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2d7e4     10 00 90 CD |  if_b	jmp	#LR__4592
2d7e8                 | LR__4591
2d7e8     4A 26 06 F1 | 	add	local01, #74
2d7ec                 | ' {
2d7ec                 | ' 
2d7ec                 | ' 	return *((WORD*)ptr);
2d7ec     13 FB E9 FA | 	rdword	result1, local01 wz
2d7f0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2d7f0                 | ' 			&& ld_word(fs->win +  14 ) != 0
2d7f0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2d7f0                 | ' 			&& ld_word(fs->win +  17 ) != 0
2d7f0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2d7f0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2d7f0                 | ' 				return 0;
2d7f0     00 FA 05 56 |  if_ne	mov	result1, #0
2d7f4     18 00 90 5D |  if_ne	jmp	#LR__4594
2d7f8                 | LR__4592
2d7f8                 | LR__4593
2d7f8                 | ' 		}
2d7f8                 | ' 	}
2d7f8                 | ' 	return sign == 0xAA55 ? 2 : 3;
2d7f8     14 2B 32 F9 | 	getword	local03, local02, #0
2d7fc     55 00 00 FF 
2d800     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2d804     02 2C 06 A6 |  if_e	mov	local04, #2
2d808     03 2C 06 56 |  if_ne	mov	local04, #3
2d80c     16 FB 01 F6 | 	mov	result1, local04
2d810                 | LR__4594
2d810     A7 F0 03 F6 | 	mov	ptra, fp
2d814     B2 00 A0 FD | 	call	#popregs_
2d818                 | _fatfs_cc_check_fs_ret
2d818     2D 00 64 FD | 	ret
2d81c                 | 
2d81c                 | _fatfs_cc_find_volume
2d81c     05 4A 05 F6 | 	mov	COUNT_, #5
2d820     A8 00 A0 FD | 	call	#pushregs_
2d824     24 F0 07 F1 | 	add	ptra, #36
2d828     09 27 02 F6 | 	mov	local01, arg01
2d82c     0A 29 02 F6 | 	mov	local02, arg02
2d830     13 13 02 F6 | 	mov	arg01, local01
2d834     00 14 06 F6 | 	mov	arg02, #0
2d838     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2d83c     02 FA 0D F2 | 	cmp	result1, #2 wz
2d840     0C 00 90 AD |  if_e	jmp	#LR__4600
2d844     03 FA 15 F2 | 	cmp	result1, #3 wc
2d848     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2d84c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4608
2d850                 | LR__4600
2d850                 | ' 	for (i = 0; i < 4; i++) {
2d850     00 2A 06 F6 | 	mov	local03, #0
2d854     97 26 48 FB | 	callpa	#(@LR__4602-@LR__4601)>>2,fcache_load_ptr_
2d858                 | LR__4601
2d858     04 2A 16 F2 | 	cmp	local03, #4 wc
2d85c     44 00 90 3D |  if_ae	jmp	#LR__4603
2d860     15 2D 02 F6 | 	mov	local04, local03
2d864     02 2C 66 F0 | 	shl	local04, #2
2d868     14 4E 05 F1 | 	add	fp, #20
2d86c     A7 2C 02 F1 | 	add	local04, fp
2d870     34 26 06 F1 | 	add	local01, #52
2d874     13 13 02 F6 | 	mov	arg01, local01
2d878     34 26 86 F1 | 	sub	local01, #52
2d87c     BE 13 06 F1 | 	add	arg01, #446
2d880     15 15 02 F6 | 	mov	arg02, local03
2d884     04 14 66 F0 | 	shl	arg02, #4
2d888     0A 13 02 F1 | 	add	arg01, arg02
2d88c     08 12 06 F1 | 	add	arg01, #8
2d890                 | ' {
2d890                 | ' 
2d890                 | ' 	return *((DWORD*)ptr);
2d890     09 FB 01 FB | 	rdlong	result1, arg01
2d894     14 4E 85 F1 | 	sub	fp, #20
2d898     16 FB 61 FC | 	wrlong	result1, local04
2d89c     01 2A 06 F1 | 	add	local03, #1
2d8a0     B4 FF 9F FD | 	jmp	#LR__4601
2d8a4                 | LR__4602
2d8a4                 | LR__4603
2d8a4     00 28 0E F2 | 	cmp	local02, #0 wz
2d8a8     14 2D 02 56 |  if_ne	mov	local04, local02
2d8ac     01 2C 86 51 |  if_ne	sub	local04, #1
2d8b0     00 2C 06 A6 |  if_e	mov	local04, #0
2d8b4     16 2B 02 F6 | 	mov	local03, local04
2d8b8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2d8b8                 | ' 	}
2d8b8                 | ' 	i = part ? part - 1 : 0;
2d8b8                 | ' 	do {
2d8b8                 | LR__4604
2d8b8     15 2D 02 F6 | 	mov	local04, local03
2d8bc     02 2C 66 F0 | 	shl	local04, #2
2d8c0     14 4E 05 F1 | 	add	fp, #20
2d8c4     A7 2C 02 F1 | 	add	local04, fp
2d8c8     16 2D 0A FB | 	rdlong	local04, local04 wz
2d8cc     14 4E 85 F1 | 	sub	fp, #20
2d8d0     28 00 90 AD |  if_e	jmp	#LR__4605
2d8d4     15 2D 02 F6 | 	mov	local04, local03
2d8d8     02 2C 66 F0 | 	shl	local04, #2
2d8dc     14 4E 05 F1 | 	add	fp, #20
2d8e0     A7 2C 02 F1 | 	add	local04, fp
2d8e4     16 15 02 FB | 	rdlong	arg02, local04
2d8e8     13 13 02 F6 | 	mov	arg01, local01
2d8ec     14 4E 85 F1 | 	sub	fp, #20
2d8f0     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2d8f4     FD 2C 02 F6 | 	mov	local04, result1
2d8f8     04 00 90 FD | 	jmp	#LR__4606
2d8fc                 | LR__4605
2d8fc     03 2C 06 F6 | 	mov	local04, #3
2d900                 | LR__4606
2d900     16 2F 02 F6 | 	mov	local05, local04
2d904     00 28 0E F2 | 	cmp	local02, #0 wz
2d908     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2d90c     0C 00 90 8D |  if_c_and_z	jmp	#LR__4607
2d910     01 2A 06 A1 |  if_e	add	local03, #1
2d914     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2d918     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4604
2d91c                 | LR__4607
2d91c                 | ' 	return fmt;
2d91c     17 FB 01 F6 | 	mov	result1, local05
2d920                 | LR__4608
2d920     A7 F0 03 F6 | 	mov	ptra, fp
2d924     B2 00 A0 FD | 	call	#popregs_
2d928                 | _fatfs_cc_find_volume_ret
2d928     2D 00 64 FD | 	ret
2d92c                 | 
2d92c                 | _fatfs_cc_mount_volume
2d92c     0B 4A 05 F6 | 	mov	COUNT_, #11
2d930     A8 00 A0 FD | 	call	#pushregs_
2d934     0A 27 02 F6 | 	mov	local01, arg02
2d938     0B 29 02 F6 | 	mov	local02, arg03
2d93c     13 01 68 FC | 	wrlong	#0, local01
2d940     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2d944     FD 2A 02 F6 | 	mov	local03, result1
2d948     00 2A 56 F2 | 	cmps	local03, #0 wc
2d94c     0B FA 05 C6 |  if_b	mov	result1, #11
2d950     3C 05 90 CD |  if_b	jmp	#LR__4620
2d954     15 17 02 F6 | 	mov	arg03, local03
2d958     02 16 66 F0 | 	shl	arg03, #2
2d95c     F2 16 02 F1 | 	add	arg03, objptr
2d960     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2d964     0C FA 05 A6 |  if_e	mov	result1, #12
2d968     24 05 90 AD |  if_e	jmp	#LR__4620
2d96c     13 2D 62 FC | 	wrlong	local04, local01
2d970     14 29 E2 F8 | 	getbyte	local02, local02, #0
2d974     FE 28 06 F5 | 	and	local02, #254
2d978     16 17 CA FA | 	rdbyte	arg03, local04 wz
2d97c     4C 00 90 AD |  if_e	jmp	#LR__4611
2d980     01 2C 06 F1 | 	add	local04, #1
2d984     16 13 CA FA | 	rdbyte	arg01, local04 wz
2d988     01 2C 86 F1 | 	sub	local04, #1
2d98c     01 FA 05 56 |  if_ne	mov	result1, #1
2d990                 | ' 
2d990                 | ' 	return Stat;
2d990     01 00 00 AF 
2d994     20 E4 05 A1 |  if_e	add	objptr, ##544
2d998     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d99c     01 00 00 AF 
2d9a0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d9a4     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2d9a8     01 16 CE F7 | 	test	arg03, #1 wz
2d9ac     1C 00 90 5D |  if_ne	jmp	#LR__4610
2d9b0     00 28 0E F2 | 	cmp	local02, #0 wz
2d9b4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2d9b8     04 FA CD 57 |  if_ne	test	result1, #4 wz
2d9bc                 | ' 				return FR_WRITE_PROTECTED;
2d9bc     0A FA 05 56 |  if_ne	mov	result1, #10
2d9c0     CC 04 90 5D |  if_ne	jmp	#LR__4620
2d9c4                 | ' 			}
2d9c4                 | ' 			return FR_OK;
2d9c4     00 FA 05 F6 | 	mov	result1, #0
2d9c8     C4 04 90 FD | 	jmp	#LR__4620
2d9cc                 | LR__4610
2d9cc                 | LR__4611
2d9cc     16 01 48 FC | 	wrbyte	#0, local04
2d9d0     01 2C 06 F1 | 	add	local04, #1
2d9d4     16 2B 42 FC | 	wrbyte	local03, local04
2d9d8     16 13 C2 FA | 	rdbyte	arg01, local04
2d9dc     01 2C 86 F1 | 	sub	local04, #1
2d9e0     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2d9e4     FD 16 02 F6 | 	mov	arg03, result1
2d9e8     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2d9ec     01 2E CE F7 | 	test	local05, #1 wz
2d9f0                 | ' 		return FR_NOT_READY;
2d9f0     03 FA 05 56 |  if_ne	mov	result1, #3
2d9f4     98 04 90 5D |  if_ne	jmp	#LR__4620
2d9f8     00 28 0E F2 | 	cmp	local02, #0 wz
2d9fc     0B 2F 02 56 |  if_ne	mov	local05, arg03
2da00     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2da04     04 2E CE 57 |  if_ne	test	local05, #4 wz
2da08                 | ' 		return FR_WRITE_PROTECTED;
2da08     0A FA 05 56 |  if_ne	mov	result1, #10
2da0c     80 04 90 5D |  if_ne	jmp	#LR__4620
2da10     16 13 02 F6 | 	mov	arg01, local04
2da14     00 14 06 F6 | 	mov	arg02, #0
2da18     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2da1c     FD 12 02 F6 | 	mov	arg01, result1
2da20     04 12 0E F2 | 	cmp	arg01, #4 wz
2da24     01 FA 05 A6 |  if_e	mov	result1, #1
2da28     64 04 90 AD |  if_e	jmp	#LR__4620
2da2c     02 12 16 F2 | 	cmp	arg01, #2 wc
2da30     0D FA 05 36 |  if_ae	mov	result1, #13
2da34     58 04 90 3D |  if_ae	jmp	#LR__4620
2da38     30 2C 06 F1 | 	add	local04, #48
2da3c     16 31 02 FB | 	rdlong	local06, local04
2da40     04 2C 06 F1 | 	add	local04, #4
2da44     16 13 02 F6 | 	mov	arg01, local04
2da48     34 2C 86 F1 | 	sub	local04, #52
2da4c     0B 12 06 F1 | 	add	arg01, #11
2da50                 | ' {
2da50                 | ' 
2da50                 | ' 	return *((WORD*)ptr);
2da50     09 FB E1 FA | 	rdword	result1, arg01
2da54     01 00 00 FF 
2da58     00 FA 0D F2 | 	cmp	result1, ##512 wz
2da5c     0D FA 05 56 |  if_ne	mov	result1, #13
2da60     2C 04 90 5D |  if_ne	jmp	#LR__4620
2da64     34 2C 06 F1 | 	add	local04, #52
2da68     16 13 02 F6 | 	mov	arg01, local04
2da6c     34 2C 86 F1 | 	sub	local04, #52
2da70     16 12 06 F1 | 	add	arg01, #22
2da74                 | ' {
2da74                 | ' 
2da74                 | ' 	return *((WORD*)ptr);
2da74     09 FB E1 FA | 	rdword	result1, arg01
2da78     FD 32 0A F6 | 	mov	local07, result1 wz
2da7c     18 00 90 5D |  if_ne	jmp	#LR__4612
2da80     34 2C 06 F1 | 	add	local04, #52
2da84     16 13 02 F6 | 	mov	arg01, local04
2da88     34 2C 86 F1 | 	sub	local04, #52
2da8c     24 12 06 F1 | 	add	arg01, #36
2da90                 | ' {
2da90                 | ' 
2da90                 | ' 	return *((DWORD*)ptr);
2da90     09 FB 01 FB | 	rdlong	result1, arg01
2da94     FD 32 02 F6 | 	mov	local07, result1
2da98                 | LR__4612
2da98     1C 2C 06 F1 | 	add	local04, #28
2da9c     16 33 62 FC | 	wrlong	local07, local04
2daa0     28 2C 06 F1 | 	add	local04, #40
2daa4     16 2F C2 FA | 	rdbyte	local05, local04
2daa8     42 2C 86 F1 | 	sub	local04, #66
2daac     16 2F 42 FC | 	wrbyte	local05, local04
2dab0     16 2F C2 FA | 	rdbyte	local05, local04
2dab4     02 2C 86 F1 | 	sub	local04, #2
2dab8     01 2E 0E F2 | 	cmp	local05, #1 wz
2dabc     02 2C 06 51 |  if_ne	add	local04, #2
2dac0     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2dac4     02 2C 86 51 |  if_ne	sub	local04, #2
2dac8     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2dacc     0D FA 05 56 |  if_ne	mov	result1, #13
2dad0     BC 03 90 5D |  if_ne	jmp	#LR__4620
2dad4     02 2C 06 F1 | 	add	local04, #2
2dad8     16 2F C2 FA | 	rdbyte	local05, local04
2dadc     17 33 02 FD | 	qmul	local07, local05
2dae0     3F 2C 06 F1 | 	add	local04, #63
2dae4     16 2F C2 FA | 	rdbyte	local05, local04
2dae8     37 2C 86 F1 | 	sub	local04, #55
2daec     16 2F 52 FC | 	wrword	local05, local04
2daf0     16 2F EA FA | 	rdword	local05, local04 wz
2daf4     0A 2C 86 F1 | 	sub	local04, #10
2daf8     18 32 62 FD | 	getqx	local07
2dafc     20 00 90 AD |  if_e	jmp	#LR__4613
2db00     0A 2C 06 F1 | 	add	local04, #10
2db04     16 2F E2 FA | 	rdword	local05, local04
2db08     17 2B 32 F9 | 	getword	local03, local05, #0
2db0c     0A 2C 86 F1 | 	sub	local04, #10
2db10     17 2F 32 F9 | 	getword	local05, local05, #0
2db14     01 2E 86 F1 | 	sub	local05, #1
2db18     17 2B CA F7 | 	test	local03, local05 wz
2db1c     08 00 90 AD |  if_e	jmp	#LR__4614
2db20                 | LR__4613
2db20     0D FA 05 F6 | 	mov	result1, #13
2db24     68 03 90 FD | 	jmp	#LR__4620
2db28                 | LR__4614
2db28     34 2C 06 F1 | 	add	local04, #52
2db2c     16 13 02 F6 | 	mov	arg01, local04
2db30     11 12 06 F1 | 	add	arg01, #17
2db34                 | ' {
2db34                 | ' 
2db34                 | ' 	return *((WORD*)ptr);
2db34     09 FB E1 FA | 	rdword	result1, arg01
2db38     2C 2C 86 F1 | 	sub	local04, #44
2db3c     16 FB 51 FC | 	wrword	result1, local04
2db40     16 2F E2 FA | 	rdword	local05, local04
2db44     08 2C 86 F1 | 	sub	local04, #8
2db48     17 13 52 F6 | 	abs	arg01, local05 wc
2db4c     09 13 42 F8 | 	getnib	arg01, arg01, #0
2db50     09 13 8A F6 | 	negc	arg01, arg01 wz
2db54     0D FA 05 56 |  if_ne	mov	result1, #13
2db58     34 03 90 5D |  if_ne	jmp	#LR__4620
2db5c     34 2C 06 F1 | 	add	local04, #52
2db60     16 13 02 F6 | 	mov	arg01, local04
2db64     34 2C 86 F1 | 	sub	local04, #52
2db68     13 12 06 F1 | 	add	arg01, #19
2db6c                 | ' {
2db6c                 | ' 
2db6c                 | ' 	return *((WORD*)ptr);
2db6c     09 FB E1 FA | 	rdword	result1, arg01
2db70     FD 34 0A F6 | 	mov	local08, result1 wz
2db74     34 2C 06 A1 |  if_e	add	local04, #52
2db78     16 13 02 A6 |  if_e	mov	arg01, local04
2db7c     34 2C 86 A1 |  if_e	sub	local04, #52
2db80     20 12 06 A1 |  if_e	add	arg01, #32
2db84                 | ' {
2db84                 | ' 
2db84                 | ' 	return *((DWORD*)ptr);
2db84     09 35 02 AB |  if_e	rdlong	local08, arg01
2db88     34 2C 06 F1 | 	add	local04, #52
2db8c     16 13 02 F6 | 	mov	arg01, local04
2db90     34 2C 86 F1 | 	sub	local04, #52
2db94     0E 12 06 F1 | 	add	arg01, #14
2db98                 | ' {
2db98                 | ' 
2db98                 | ' 	return *((WORD*)ptr);
2db98     09 FB E1 FA | 	rdword	result1, arg01
2db9c     FD 12 02 F6 | 	mov	arg01, result1
2dba0     09 2F 02 F6 | 	mov	local05, arg01
2dba4     0F 2E 4E F7 | 	zerox	local05, #15 wz
2dba8     0D FA 05 A6 |  if_e	mov	result1, #13
2dbac     E0 02 90 AD |  if_e	jmp	#LR__4620
2dbb0     09 37 32 F9 | 	getword	local09, arg01, #0
2dbb4     19 37 02 F1 | 	add	local09, local07
2dbb8     08 2C 06 F1 | 	add	local04, #8
2dbbc     16 2F E2 FA | 	rdword	local05, local04
2dbc0     08 2C 86 F1 | 	sub	local04, #8
2dbc4     17 2F 52 F6 | 	abs	local05, local05 wc
2dbc8     04 2E 46 F0 | 	shr	local05, #4
2dbcc     17 37 82 F3 | 	sumc	local09, local05
2dbd0     1B 35 12 F2 | 	cmp	local08, local09 wc
2dbd4     0D FA 05 C6 |  if_b	mov	result1, #13
2dbd8     B4 02 90 CD |  if_b	jmp	#LR__4620
2dbdc     1B 35 82 F1 | 	sub	local08, local09
2dbe0     0A 2C 06 F1 | 	add	local04, #10
2dbe4     16 2F E2 FA | 	rdword	local05, local04
2dbe8     17 35 12 FD | 	qdiv	local08, local05
2dbec     0A 2C 86 F1 | 	sub	local04, #10
2dbf0     18 2E 62 FD | 	getqx	local05
2dbf4     00 2E 0E F2 | 	cmp	local05, #0 wz
2dbf8     0D FA 05 A6 |  if_e	mov	result1, #13
2dbfc     90 02 90 AD |  if_e	jmp	#LR__4620
2dc00     00 38 06 F6 | 	mov	local10, #0
2dc04     FF FF 07 FF 
2dc08     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2dc0c     03 38 06 C6 |  if_b	mov	local10, #3
2dc10     7F 00 00 FF 
2dc14     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2dc18     02 38 06 C6 |  if_b	mov	local10, #2
2dc1c     07 00 00 FF 
2dc20     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2dc24     01 38 06 C6 |  if_b	mov	local10, #1
2dc28     00 38 0E F2 | 	cmp	local10, #0 wz
2dc2c     0D FA 05 A6 |  if_e	mov	result1, #13
2dc30     5C 02 90 AD |  if_e	jmp	#LR__4620
2dc34     02 2E 06 F1 | 	add	local05, #2
2dc38     18 2C 06 F1 | 	add	local04, #24
2dc3c     16 2F 62 FC | 	wrlong	local05, local04
2dc40     08 2C 06 F1 | 	add	local04, #8
2dc44     16 31 62 FC | 	wrlong	local06, local04
2dc48     18 2F 02 F6 | 	mov	local05, local06
2dc4c     09 13 32 F9 | 	getword	arg01, arg01, #0
2dc50     09 2F 02 F1 | 	add	local05, arg01
2dc54     04 2C 06 F1 | 	add	local04, #4
2dc58     16 2F 62 FC | 	wrlong	local05, local04
2dc5c     18 2F 02 F6 | 	mov	local05, local06
2dc60     1B 2F 02 F1 | 	add	local05, local09
2dc64     08 2C 06 F1 | 	add	local04, #8
2dc68     16 2F 62 FC | 	wrlong	local05, local04
2dc6c     2C 2C 86 F1 | 	sub	local04, #44
2dc70     03 38 0E F2 | 	cmp	local10, #3 wz
2dc74     5C 00 90 5D |  if_ne	jmp	#LR__4615
2dc78     34 2C 06 F1 | 	add	local04, #52
2dc7c     16 13 02 F6 | 	mov	arg01, local04
2dc80     34 2C 86 F1 | 	sub	local04, #52
2dc84     2A 12 06 F1 | 	add	arg01, #42
2dc88                 | ' {
2dc88                 | ' 
2dc88                 | ' 	return *((WORD*)ptr);
2dc88     09 FB E9 FA | 	rdword	result1, arg01 wz
2dc8c     0D FA 05 56 |  if_ne	mov	result1, #13
2dc90     FC 01 90 5D |  if_ne	jmp	#LR__4620
2dc94     08 2C 06 F1 | 	add	local04, #8
2dc98     16 2F EA FA | 	rdword	local05, local04 wz
2dc9c     08 2C 86 F1 | 	sub	local04, #8
2dca0     0D FA 05 56 |  if_ne	mov	result1, #13
2dca4     E8 01 90 5D |  if_ne	jmp	#LR__4620
2dca8     34 2C 06 F1 | 	add	local04, #52
2dcac     16 13 02 F6 | 	mov	arg01, local04
2dcb0     2C 12 06 F1 | 	add	arg01, #44
2dcb4                 | ' {
2dcb4                 | ' 
2dcb4                 | ' 	return *((DWORD*)ptr);
2dcb4     09 FB 01 FB | 	rdlong	result1, arg01
2dcb8     0C 2C 86 F1 | 	sub	local04, #12
2dcbc     16 FB 61 FC | 	wrlong	result1, local04
2dcc0     10 2C 86 F1 | 	sub	local04, #16
2dcc4     16 3B 02 FB | 	rdlong	local11, local04
2dcc8     18 2C 86 F1 | 	sub	local04, #24
2dccc     02 3A 66 F0 | 	shl	local11, #2
2dcd0     6C 00 90 FD | 	jmp	#LR__4617
2dcd4                 | LR__4615
2dcd4     08 2C 06 F1 | 	add	local04, #8
2dcd8     16 2F EA FA | 	rdword	local05, local04 wz
2dcdc     08 2C 86 F1 | 	sub	local04, #8
2dce0     0D FA 05 A6 |  if_e	mov	result1, #13
2dce4     A8 01 90 AD |  if_e	jmp	#LR__4620
2dce8     24 2C 06 F1 | 	add	local04, #36
2dcec     16 2F 02 FB | 	rdlong	local05, local04
2dcf0     19 2F 02 F1 | 	add	local05, local07
2dcf4     04 2C 06 F1 | 	add	local04, #4
2dcf8     16 2F 62 FC | 	wrlong	local05, local04
2dcfc     28 2C 86 F1 | 	sub	local04, #40
2dd00     02 38 0E F2 | 	cmp	local10, #2 wz
2dd04     18 2C 06 A1 |  if_e	add	local04, #24
2dd08     16 2F 02 AB |  if_e	rdlong	local05, local04
2dd0c     18 2C 86 A1 |  if_e	sub	local04, #24
2dd10     01 2E 66 A0 |  if_e	shl	local05, #1
2dd14     24 00 90 AD |  if_e	jmp	#LR__4616
2dd18     18 2C 06 F1 | 	add	local04, #24
2dd1c     16 3B 02 FB | 	rdlong	local11, local04
2dd20     1D 2F 02 F6 | 	mov	local05, local11
2dd24     01 2E 66 F0 | 	shl	local05, #1
2dd28     1D 2F 02 F1 | 	add	local05, local11
2dd2c     01 2E 46 F0 | 	shr	local05, #1
2dd30     18 2C 86 F1 | 	sub	local04, #24
2dd34     01 3A 06 F5 | 	and	local11, #1
2dd38     1D 2F 02 F1 | 	add	local05, local11
2dd3c                 | LR__4616
2dd3c     17 3B 02 F6 | 	mov	local11, local05
2dd40                 | LR__4617
2dd40     FF 3B 06 F1 | 	add	local11, #511
2dd44     09 3A 46 F0 | 	shr	local11, #9
2dd48     1C 2C 06 F1 | 	add	local04, #28
2dd4c     16 17 02 FB | 	rdlong	arg03, local04
2dd50     1C 2C 86 F1 | 	sub	local04, #28
2dd54     1D 17 12 F2 | 	cmp	arg03, local11 wc
2dd58     0D FA 05 C6 |  if_b	mov	result1, #13
2dd5c     30 01 90 CD |  if_b	jmp	#LR__4620
2dd60     14 2C 06 F1 | 	add	local04, #20
2dd64     FF FF FF FF 
2dd68     16 FF 6B FC | 	wrlong	##-1, local04
2dd6c     04 2C 86 F1 | 	sub	local04, #4
2dd70     FF FF FF FF 
2dd74     16 FF 6B FC | 	wrlong	##-1, local04
2dd78     0C 2C 86 F1 | 	sub	local04, #12
2dd7c     16 01 49 FC | 	wrbyte	#128, local04
2dd80     04 2C 86 F1 | 	sub	local04, #4
2dd84     03 38 0E F2 | 	cmp	local10, #3 wz
2dd88     D0 00 90 5D |  if_ne	jmp	#LR__4619
2dd8c     34 2C 06 F1 | 	add	local04, #52
2dd90     16 13 02 F6 | 	mov	arg01, local04
2dd94     34 2C 86 F1 | 	sub	local04, #52
2dd98     30 12 06 F1 | 	add	arg01, #48
2dd9c                 | ' {
2dd9c                 | ' 
2dd9c                 | ' 	return *((WORD*)ptr);
2dd9c     09 FB E1 FA | 	rdword	result1, arg01
2dda0     FD 2E 32 F9 | 	getword	local05, result1, #0
2dda4     01 2E 0E F2 | 	cmp	local05, #1 wz
2dda8     B0 00 90 5D |  if_ne	jmp	#LR__4619
2ddac     01 30 06 F1 | 	add	local06, #1
2ddb0     16 13 02 F6 | 	mov	arg01, local04
2ddb4     18 15 02 F6 | 	mov	arg02, local06
2ddb8     CC CD BF FD | 	call	#_fatfs_cc_move_window
2ddbc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddc0     98 00 90 5D |  if_ne	jmp	#LR__4619
2ddc4     04 2C 06 F1 | 	add	local04, #4
2ddc8     16 01 48 FC | 	wrbyte	#0, local04
2ddcc     30 2C 06 F1 | 	add	local04, #48
2ddd0     16 13 02 F6 | 	mov	arg01, local04
2ddd4     34 2C 86 F1 | 	sub	local04, #52
2ddd8     FE 13 06 F1 | 	add	arg01, #510
2dddc                 | ' {
2dddc                 | ' 
2dddc                 | ' 	return *((WORD*)ptr);
2dddc     09 FB E1 FA | 	rdword	result1, arg01
2dde0     FD 2E 32 F9 | 	getword	local05, result1, #0
2dde4     55 00 00 FF 
2dde8     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2ddec     34 2C 06 A1 |  if_e	add	local04, #52
2ddf0     16 13 02 A6 |  if_e	mov	arg01, local04
2ddf4     34 2C 86 A1 |  if_e	sub	local04, #52
2ddf8                 | ' {
2ddf8                 | ' 
2ddf8                 | ' 	return *((DWORD*)ptr);
2ddf8     09 FB 01 AB |  if_e	rdlong	result1, arg01
2ddfc     A9 B0 20 AF 
2de00     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2de04     54 00 90 5D |  if_ne	jmp	#LR__4618
2de08     34 2C 06 F1 | 	add	local04, #52
2de0c     16 13 02 F6 | 	mov	arg01, local04
2de10     34 2C 86 F1 | 	sub	local04, #52
2de14     E4 13 06 F1 | 	add	arg01, #484
2de18                 | ' {
2de18                 | ' 
2de18                 | ' 	return *((DWORD*)ptr);
2de18     09 FB 01 FB | 	rdlong	result1, arg01
2de1c     B9 A0 30 FF 
2de20     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2de24     34 00 90 5D |  if_ne	jmp	#LR__4618
2de28     34 2C 06 F1 | 	add	local04, #52
2de2c     16 13 02 F6 | 	mov	arg01, local04
2de30     E8 13 06 F1 | 	add	arg01, #488
2de34                 | ' {
2de34                 | ' 
2de34                 | ' 	return *((DWORD*)ptr);
2de34     09 FB 01 FB | 	rdlong	result1, arg01
2de38     20 2C 86 F1 | 	sub	local04, #32
2de3c     16 FB 61 FC | 	wrlong	result1, local04
2de40     20 2C 06 F1 | 	add	local04, #32
2de44     16 13 02 F6 | 	mov	arg01, local04
2de48     EC 13 06 F1 | 	add	arg01, #492
2de4c                 | ' {
2de4c                 | ' 
2de4c                 | ' 	return *((DWORD*)ptr);
2de4c     09 FB 01 FB | 	rdlong	result1, arg01
2de50     24 2C 86 F1 | 	sub	local04, #36
2de54     16 FB 61 FC | 	wrlong	result1, local04
2de58     10 2C 86 F1 | 	sub	local04, #16
2de5c                 | LR__4618
2de5c                 | LR__4619
2de5c     16 39 42 FC | 	wrbyte	local10, local04
2de60     04 E4 05 F1 | 	add	objptr, #4
2de64     F2 2E E2 FA | 	rdword	local05, objptr
2de68     01 2E 06 F1 | 	add	local05, #1
2de6c     F2 2E 52 FC | 	wrword	local05, objptr
2de70     F2 3A E2 FA | 	rdword	local11, objptr
2de74     06 2C 06 F1 | 	add	local04, #6
2de78     16 3B 52 FC | 	wrword	local11, local04
2de7c     04 E4 05 F1 | 	add	objptr, #4
2de80     06 2C 06 F1 | 	add	local04, #6
2de84     16 E5 61 FC | 	wrlong	objptr, local04
2de88                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2de88                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2de88                 | ' 			{
2de88                 | ' 
2de88                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2de88                 | ' 
2de88                 | ' 
2de88                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2de88                 | ' 
2de88                 | ' 			}
2de88                 | ' 		}
2de88                 | ' 
2de88                 | ' 
2de88                 | ' 	}
2de88                 | ' 
2de88                 | ' 	fs->fs_type = (BYTE)fmt;
2de88                 | ' 	fs->id = ++Fsid;
2de88                 | ' 
2de88                 | ' 	fs->lfnbuf = LfnBuf;
2de88                 | ' #line 3567 "ff.c"
2de88                 | ' 	return FR_OK;
2de88     00 FA 05 F6 | 	mov	result1, #0
2de8c     08 E4 85 F1 | 	sub	objptr, #8
2de90                 | LR__4620
2de90     A7 F0 03 F6 | 	mov	ptra, fp
2de94     B2 00 A0 FD | 	call	#popregs_
2de98                 | _fatfs_cc_mount_volume_ret
2de98     2D 00 64 FD | 	ret
2de9c                 | 
2de9c                 | _fatfs_cc_validate
2de9c     09 01 0A F6 | 	mov	_var01, arg01 wz
2dea0     09 02 06 F6 | 	mov	_var02, #9
2dea4     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2dea8     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2deac     50 00 90 AD |  if_e	jmp	#LR__4630
2deb0     04 00 06 F1 | 	add	_var01, #4
2deb4     00 07 E2 FA | 	rdword	_var04, _var01
2deb8     04 00 86 F1 | 	sub	_var01, #4
2debc     00 13 02 FB | 	rdlong	arg01, _var01
2dec0     06 12 06 F1 | 	add	arg01, #6
2dec4     09 FB E1 FA | 	rdword	result1, arg01
2dec8     FD 06 0A F2 | 	cmp	_var04, result1 wz
2decc     30 00 90 5D |  if_ne	jmp	#LR__4630
2ded0     00 07 02 FB | 	rdlong	_var04, _var01
2ded4     01 06 06 F1 | 	add	_var04, #1
2ded8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2dedc     01 FA 05 56 |  if_ne	mov	result1, #1
2dee0                 | ' 
2dee0                 | ' 	return Stat;
2dee0     01 00 00 AF 
2dee4     20 E4 05 A1 |  if_e	add	objptr, ##544
2dee8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2deec     01 00 00 AF 
2def0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2def4     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2def8     01 04 CE F7 | 	test	_var03, #1 wz
2defc     00 02 06 A6 |  if_e	mov	_var02, #0
2df00                 | LR__4630
2df00     00 02 0E F2 | 	cmp	_var02, #0 wz
2df04     00 05 02 AB |  if_e	rdlong	_var03, _var01
2df08     00 04 06 56 |  if_ne	mov	_var03, #0
2df0c     0A 05 62 FC | 	wrlong	_var03, arg02
2df10                 | ' 			res = FR_OK;
2df10                 | ' 		}
2df10                 | ' 
2df10                 | ' 	}
2df10                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2df10                 | ' 	return res;
2df10     01 FB 01 F6 | 	mov	result1, _var02
2df14                 | _fatfs_cc_validate_ret
2df14     2D 00 64 FD | 	ret
2df18                 | 
2df18                 | _fatfs_cc_f_mount
2df18     01 4A 05 F6 | 	mov	COUNT_, #1
2df1c     A8 00 A0 FD | 	call	#pushregs_
2df20     20 F0 07 F1 | 	add	ptra, #32
2df24     04 4E 05 F1 | 	add	fp, #4
2df28     A7 12 62 FC | 	wrlong	arg01, fp
2df2c     04 4E 05 F1 | 	add	fp, #4
2df30     A7 14 62 FC | 	wrlong	arg02, fp
2df34     04 4E 05 F1 | 	add	fp, #4
2df38     A7 16 42 FC | 	wrbyte	arg03, fp
2df3c     04 4E 85 F1 | 	sub	fp, #4
2df40     A7 16 02 FB | 	rdlong	arg03, fp
2df44     14 4E 05 F1 | 	add	fp, #20
2df48     A7 16 62 FC | 	wrlong	arg03, fp
2df4c     A7 12 02 F6 | 	mov	arg01, fp
2df50     1C 4E 85 F1 | 	sub	fp, #28
2df54     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2df58     14 4E 05 F1 | 	add	fp, #20
2df5c     A7 FA 61 FC | 	wrlong	result1, fp
2df60     14 4E 85 F1 | 	sub	fp, #20
2df64     00 FA 55 F2 | 	cmps	result1, #0 wc
2df68     0B FA 05 C6 |  if_b	mov	result1, #11
2df6c     C0 00 90 CD |  if_b	jmp	#LR__4641
2df70     14 4E 05 F1 | 	add	fp, #20
2df74     A7 16 02 FB | 	rdlong	arg03, fp
2df78     02 16 66 F0 | 	shl	arg03, #2
2df7c     F2 16 02 F1 | 	add	arg03, objptr
2df80     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2df84     04 4E 85 F1 | 	sub	fp, #4
2df88     A7 16 62 FC | 	wrlong	arg03, fp
2df8c     10 4E 85 F1 | 	sub	fp, #16
2df90     28 00 90 AD |  if_e	jmp	#LR__4640
2df94     10 4E 05 F1 | 	add	fp, #16
2df98     A7 16 02 FB | 	rdlong	arg03, fp
2df9c     10 4E 85 F1 | 	sub	fp, #16
2dfa0     01 16 06 F1 | 	add	arg03, #1
2dfa4     0B 13 C2 FA | 	rdbyte	arg01, arg03
2dfa8     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2dfac     10 4E 05 F1 | 	add	fp, #16
2dfb0     A7 16 02 FB | 	rdlong	arg03, fp
2dfb4     10 4E 85 F1 | 	sub	fp, #16
2dfb8     0B 01 48 FC | 	wrbyte	#0, arg03
2dfbc                 | LR__4640
2dfbc     04 4E 05 F1 | 	add	fp, #4
2dfc0     A7 26 0A FB | 	rdlong	local01, fp wz
2dfc4     04 4E 85 F1 | 	sub	fp, #4
2dfc8     04 4E 05 51 |  if_ne	add	fp, #4
2dfcc     A7 26 02 5B |  if_ne	rdlong	local01, fp
2dfd0     04 4E 85 51 |  if_ne	sub	fp, #4
2dfd4     13 01 48 5C |  if_ne	wrbyte	#0, local01
2dfd8     14 4E 05 F1 | 	add	fp, #20
2dfdc     A7 26 02 FB | 	rdlong	local01, fp
2dfe0     02 26 66 F0 | 	shl	local01, #2
2dfe4     F2 26 02 F1 | 	add	local01, objptr
2dfe8     10 4E 85 F1 | 	sub	fp, #16
2dfec     A7 16 02 FB | 	rdlong	arg03, fp
2dff0     13 17 62 FC | 	wrlong	arg03, local01
2dff4     08 4E 05 F1 | 	add	fp, #8
2dff8     A7 26 CA FA | 	rdbyte	local01, fp wz
2dffc     0C 4E 85 F1 | 	sub	fp, #12
2e000     00 FA 05 A6 |  if_e	mov	result1, #0
2e004     28 00 90 AD |  if_e	jmp	#LR__4641
2e008     08 4E 05 F1 | 	add	fp, #8
2e00c     A7 12 02 F6 | 	mov	arg01, fp
2e010     04 4E 85 F1 | 	sub	fp, #4
2e014     A7 14 02 F6 | 	mov	arg02, fp
2e018     04 4E 85 F1 | 	sub	fp, #4
2e01c     00 16 06 F6 | 	mov	arg03, #0
2e020     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2e024     18 4E 05 F1 | 	add	fp, #24
2e028     A7 FA 61 FC | 	wrlong	result1, fp
2e02c                 | ' 
2e02c                 | ' 	res = mount_volume(&path, &fs, 0);
2e02c                 | ' 	return res ;
2e02c     18 4E 85 F1 | 	sub	fp, #24
2e030                 | LR__4641
2e030     A7 F0 03 F6 | 	mov	ptra, fp
2e034     B2 00 A0 FD | 	call	#popregs_
2e038                 | _fatfs_cc_f_mount_ret
2e038     2D 00 64 FD | 	ret
2e03c                 | 
2e03c                 | _fatfs_cc_f_open
2e03c     02 4A 05 F6 | 	mov	COUNT_, #2
2e040     A8 00 A0 FD | 	call	#pushregs_
2e044     60 F0 07 F1 | 	add	ptra, #96
2e048     04 4E 05 F1 | 	add	fp, #4
2e04c     A7 12 62 FC | 	wrlong	arg01, fp
2e050     04 4E 05 F1 | 	add	fp, #4
2e054     A7 14 62 FC | 	wrlong	arg02, fp
2e058     04 4E 05 F1 | 	add	fp, #4
2e05c     A7 16 42 FC | 	wrbyte	arg03, fp
2e060     08 4E 85 F1 | 	sub	fp, #8
2e064     A7 18 0A FB | 	rdlong	arg04, fp wz
2e068     04 4E 85 F1 | 	sub	fp, #4
2e06c     09 FA 05 A6 |  if_e	mov	result1, #9
2e070     98 06 90 AD |  if_e	jmp	#LR__4667
2e074     0C 4E 05 F1 | 	add	fp, #12
2e078     A7 18 C2 FA | 	rdbyte	arg04, fp
2e07c     3F 18 06 F5 | 	and	arg04, #63
2e080     A7 18 42 FC | 	wrbyte	arg04, fp
2e084     04 4E 85 F1 | 	sub	fp, #4
2e088     A7 12 02 F6 | 	mov	arg01, fp
2e08c     3C 4E 05 F1 | 	add	fp, #60
2e090     A7 14 02 F6 | 	mov	arg02, fp
2e094     38 4E 85 F1 | 	sub	fp, #56
2e098     A7 16 C2 FA | 	rdbyte	arg03, fp
2e09c     0C 4E 85 F1 | 	sub	fp, #12
2e0a0     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2e0a4     10 4E 05 F1 | 	add	fp, #16
2e0a8     A7 FA 61 FC | 	wrlong	result1, fp
2e0ac     10 4E 85 F1 | 	sub	fp, #16
2e0b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0b4     2C 06 90 5D |  if_ne	jmp	#LR__4666
2e0b8     44 4E 05 F1 | 	add	fp, #68
2e0bc     A7 18 02 FB | 	rdlong	arg04, fp
2e0c0     30 4E 85 F1 | 	sub	fp, #48
2e0c4     A7 18 62 FC | 	wrlong	arg04, fp
2e0c8     A7 12 02 F6 | 	mov	arg01, fp
2e0cc     0C 4E 85 F1 | 	sub	fp, #12
2e0d0     A7 26 02 FB | 	rdlong	local01, fp
2e0d4     08 4E 85 F1 | 	sub	fp, #8
2e0d8     13 15 02 F6 | 	mov	arg02, local01
2e0dc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2e0e0     10 4E 05 F1 | 	add	fp, #16
2e0e4     A7 FA 61 FC | 	wrlong	result1, fp
2e0e8     10 4E 85 F1 | 	sub	fp, #16
2e0ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0f0     1C 00 90 5D |  if_ne	jmp	#LR__4650
2e0f4     3F 4E 05 F1 | 	add	fp, #63
2e0f8     A7 18 C2 FA | 	rdbyte	arg04, fp
2e0fc     3F 4E 85 F1 | 	sub	fp, #63
2e100     80 18 CE F7 | 	test	arg04, #128 wz
2e104     10 4E 05 51 |  if_ne	add	fp, #16
2e108     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e10c     10 4E 85 51 |  if_ne	sub	fp, #16
2e110                 | LR__4650
2e110     0C 4E 05 F1 | 	add	fp, #12
2e114     A7 18 C2 FA | 	rdbyte	arg04, fp
2e118     0C 4E 85 F1 | 	sub	fp, #12
2e11c     1C 18 CE F7 | 	test	arg04, #28 wz
2e120     F0 01 90 AD |  if_e	jmp	#LR__4655
2e124     10 4E 05 F1 | 	add	fp, #16
2e128     A7 26 0A FB | 	rdlong	local01, fp wz
2e12c     10 4E 85 F1 | 	sub	fp, #16
2e130     48 00 90 AD |  if_e	jmp	#LR__4652
2e134     10 4E 05 F1 | 	add	fp, #16
2e138     A7 18 02 FB | 	rdlong	arg04, fp
2e13c     10 4E 85 F1 | 	sub	fp, #16
2e140     04 18 0E F2 | 	cmp	arg04, #4 wz
2e144     1C 00 90 5D |  if_ne	jmp	#LR__4651
2e148     14 4E 05 F1 | 	add	fp, #20
2e14c     A7 12 02 F6 | 	mov	arg01, fp
2e150     14 4E 85 F1 | 	sub	fp, #20
2e154     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2e158     10 4E 05 F1 | 	add	fp, #16
2e15c     A7 FA 61 FC | 	wrlong	result1, fp
2e160     10 4E 85 F1 | 	sub	fp, #16
2e164                 | LR__4651
2e164     0C 4E 05 F1 | 	add	fp, #12
2e168     A7 26 C2 FA | 	rdbyte	local01, fp
2e16c     08 26 46 F5 | 	or	local01, #8
2e170     A7 26 42 FC | 	wrbyte	local01, fp
2e174     0C 4E 85 F1 | 	sub	fp, #12
2e178     3C 00 90 FD | 	jmp	#LR__4654
2e17c                 | LR__4652
2e17c     1A 4E 05 F1 | 	add	fp, #26
2e180     A7 26 C2 FA | 	rdbyte	local01, fp
2e184     1A 4E 85 F1 | 	sub	fp, #26
2e188     11 26 CE F7 | 	test	local01, #17 wz
2e18c     10 4E 05 51 |  if_ne	add	fp, #16
2e190     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2e194     10 4E 85 51 |  if_ne	sub	fp, #16
2e198     1C 00 90 5D |  if_ne	jmp	#LR__4653
2e19c     0C 4E 05 F1 | 	add	fp, #12
2e1a0     A7 26 C2 FA | 	rdbyte	local01, fp
2e1a4     0C 4E 85 F1 | 	sub	fp, #12
2e1a8     04 26 CE F7 | 	test	local01, #4 wz
2e1ac     10 4E 05 51 |  if_ne	add	fp, #16
2e1b0     A7 10 68 5C |  if_ne	wrlong	#8, fp
2e1b4     10 4E 85 51 |  if_ne	sub	fp, #16
2e1b8                 | LR__4653
2e1b8                 | LR__4654
2e1b8     10 4E 05 F1 | 	add	fp, #16
2e1bc     A7 26 0A FB | 	rdlong	local01, fp wz
2e1c0     10 4E 85 F1 | 	sub	fp, #16
2e1c4     A8 01 90 5D |  if_ne	jmp	#LR__4658
2e1c8     0C 4E 05 F1 | 	add	fp, #12
2e1cc     A7 26 C2 FA | 	rdbyte	local01, fp
2e1d0     0C 4E 85 F1 | 	sub	fp, #12
2e1d4     08 26 CE F7 | 	test	local01, #8 wz
2e1d8     94 01 90 AD |  if_e	jmp	#LR__4658
2e1dc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2e1e0     54 4E 05 F1 | 	add	fp, #84
2e1e4     A7 FA 61 FC | 	wrlong	result1, fp
2e1e8     24 4E 85 F1 | 	sub	fp, #36
2e1ec     A7 12 02 FB | 	rdlong	arg01, fp
2e1f0     0E 12 06 F1 | 	add	arg01, #14
2e1f4     09 FB 61 FC | 	wrlong	result1, arg01
2e1f8     A7 12 02 FB | 	rdlong	arg01, fp
2e1fc     16 12 06 F1 | 	add	arg01, #22
2e200     24 4E 05 F1 | 	add	fp, #36
2e204     A7 14 02 FB | 	rdlong	arg02, fp
2e208     09 15 62 FC | 	wrlong	arg02, arg01
2e20c     10 4E 85 F1 | 	sub	fp, #16
2e210     A7 12 02 FB | 	rdlong	arg01, fp
2e214     14 4E 85 F1 | 	sub	fp, #20
2e218     A7 14 02 FB | 	rdlong	arg02, fp
2e21c     30 4E 85 F1 | 	sub	fp, #48
2e220     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2e224     48 4E 05 F1 | 	add	fp, #72
2e228     A7 FA 61 FC | 	wrlong	result1, fp
2e22c     18 4E 85 F1 | 	sub	fp, #24
2e230     A7 26 02 FB | 	rdlong	local01, fp
2e234     0B 26 06 F1 | 	add	local01, #11
2e238     13 41 48 FC | 	wrbyte	#32, local01
2e23c     14 4E 05 F1 | 	add	fp, #20
2e240     A7 12 02 FB | 	rdlong	arg01, fp
2e244     14 4E 85 F1 | 	sub	fp, #20
2e248     A7 14 02 FB | 	rdlong	arg02, fp
2e24c     30 4E 85 F1 | 	sub	fp, #48
2e250     00 16 06 F6 | 	mov	arg03, #0
2e254     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2e258     30 4E 05 F1 | 	add	fp, #48
2e25c     A7 12 02 FB | 	rdlong	arg01, fp
2e260     1C 12 06 F1 | 	add	arg01, #28
2e264     09 01 68 FC | 	wrlong	#0, arg01
2e268     14 4E 05 F1 | 	add	fp, #20
2e26c     A7 26 02 FB | 	rdlong	local01, fp
2e270     03 26 06 F1 | 	add	local01, #3
2e274     13 03 48 FC | 	wrbyte	#1, local01
2e278     04 4E 05 F1 | 	add	fp, #4
2e27c     A7 26 0A FB | 	rdlong	local01, fp wz
2e280     48 4E 85 F1 | 	sub	fp, #72
2e284     E8 00 90 AD |  if_e	jmp	#LR__4658
2e288     44 4E 05 F1 | 	add	fp, #68
2e28c     A7 26 02 FB | 	rdlong	local01, fp
2e290     30 26 06 F1 | 	add	local01, #48
2e294     13 27 02 FB | 	rdlong	local01, local01
2e298     14 4E 05 F1 | 	add	fp, #20
2e29c     A7 26 62 FC | 	wrlong	local01, fp
2e2a0     44 4E 85 F1 | 	sub	fp, #68
2e2a4     A7 12 02 F6 | 	mov	arg01, fp
2e2a8     34 4E 05 F1 | 	add	fp, #52
2e2ac     A7 14 02 FB | 	rdlong	arg02, fp
2e2b0     48 4E 85 F1 | 	sub	fp, #72
2e2b4     00 16 06 F6 | 	mov	arg03, #0
2e2b8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2e2bc     10 4E 05 F1 | 	add	fp, #16
2e2c0     A7 FA 61 FC | 	wrlong	result1, fp
2e2c4     10 4E 85 F1 | 	sub	fp, #16
2e2c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e2cc     A0 00 90 5D |  if_ne	jmp	#LR__4658
2e2d0     44 4E 05 F1 | 	add	fp, #68
2e2d4     A7 12 02 FB | 	rdlong	arg01, fp
2e2d8     14 4E 05 F1 | 	add	fp, #20
2e2dc     A7 14 02 FB | 	rdlong	arg02, fp
2e2e0     58 4E 85 F1 | 	sub	fp, #88
2e2e4     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2e2e8     10 4E 05 F1 | 	add	fp, #16
2e2ec     A7 FA 61 FC | 	wrlong	result1, fp
2e2f0     34 4E 05 F1 | 	add	fp, #52
2e2f4     A7 18 02 FB | 	rdlong	arg04, fp
2e2f8     04 4E 05 F1 | 	add	fp, #4
2e2fc     A7 26 02 FB | 	rdlong	local01, fp
2e300     48 4E 85 F1 | 	sub	fp, #72
2e304     01 26 86 F1 | 	sub	local01, #1
2e308     10 18 06 F1 | 	add	arg04, #16
2e30c     0C 27 62 FC | 	wrlong	local01, arg04
2e310     5C 00 90 FD | 	jmp	#LR__4658
2e314                 | LR__4655
2e314     10 4E 05 F1 | 	add	fp, #16
2e318     A7 18 0A FB | 	rdlong	arg04, fp wz
2e31c     10 4E 85 F1 | 	sub	fp, #16
2e320     4C 00 90 5D |  if_ne	jmp	#LR__4657
2e324     1A 4E 05 F1 | 	add	fp, #26
2e328     A7 18 C2 FA | 	rdbyte	arg04, fp
2e32c     1A 4E 85 F1 | 	sub	fp, #26
2e330     10 18 CE F7 | 	test	arg04, #16 wz
2e334     10 4E 05 51 |  if_ne	add	fp, #16
2e338     A7 08 68 5C |  if_ne	wrlong	#4, fp
2e33c     10 4E 85 51 |  if_ne	sub	fp, #16
2e340     2C 00 90 5D |  if_ne	jmp	#LR__4656
2e344     0C 4E 05 F1 | 	add	fp, #12
2e348     A7 18 C2 FA | 	rdbyte	arg04, fp
2e34c     0C 4E 85 F1 | 	sub	fp, #12
2e350     02 18 CE F7 | 	test	arg04, #2 wz
2e354     1A 4E 05 51 |  if_ne	add	fp, #26
2e358     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
2e35c     1A 4E 85 51 |  if_ne	sub	fp, #26
2e360     01 26 CE 57 |  if_ne	test	local01, #1 wz
2e364     10 4E 05 51 |  if_ne	add	fp, #16
2e368     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2e36c     10 4E 85 51 |  if_ne	sub	fp, #16
2e370                 | LR__4656
2e370                 | LR__4657
2e370                 | LR__4658
2e370     10 4E 05 F1 | 	add	fp, #16
2e374     A7 26 0A FB | 	rdlong	local01, fp wz
2e378     10 4E 85 F1 | 	sub	fp, #16
2e37c     60 00 90 5D |  if_ne	jmp	#LR__4659
2e380     0C 4E 05 F1 | 	add	fp, #12
2e384     A7 28 C2 FA | 	rdbyte	local02, fp
2e388     0C 4E 85 F1 | 	sub	fp, #12
2e38c     08 28 CE F7 | 	test	local02, #8 wz
2e390     0C 4E 05 51 |  if_ne	add	fp, #12
2e394     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
2e398     40 28 46 55 |  if_ne	or	local02, #64
2e39c     A7 28 42 5C |  if_ne	wrbyte	local02, fp
2e3a0     0C 4E 85 51 |  if_ne	sub	fp, #12
2e3a4     04 4E 05 F1 | 	add	fp, #4
2e3a8     A7 28 02 FB | 	rdlong	local02, fp
2e3ac     40 4E 05 F1 | 	add	fp, #64
2e3b0     A7 26 02 FB | 	rdlong	local01, fp
2e3b4     30 26 06 F1 | 	add	local01, #48
2e3b8     13 27 02 FB | 	rdlong	local01, local01
2e3bc     20 28 06 F1 | 	add	local02, #32
2e3c0     14 27 62 FC | 	wrlong	local01, local02
2e3c4     40 4E 85 F1 | 	sub	fp, #64
2e3c8     A7 28 02 FB | 	rdlong	local02, fp
2e3cc     2C 4E 05 F1 | 	add	fp, #44
2e3d0     A7 26 02 FB | 	rdlong	local01, fp
2e3d4     30 4E 85 F1 | 	sub	fp, #48
2e3d8     24 28 06 F1 | 	add	local02, #36
2e3dc     14 27 62 FC | 	wrlong	local01, local02
2e3e0                 | LR__4659
2e3e0     10 4E 05 F1 | 	add	fp, #16
2e3e4     A7 28 0A FB | 	rdlong	local02, fp wz
2e3e8     10 4E 85 F1 | 	sub	fp, #16
2e3ec     F4 02 90 5D |  if_ne	jmp	#LR__4665
2e3f0     04 4E 05 F1 | 	add	fp, #4
2e3f4     A7 28 02 FB | 	rdlong	local02, fp
2e3f8     40 4E 05 F1 | 	add	fp, #64
2e3fc     A7 12 02 FB | 	rdlong	arg01, fp
2e400     14 4E 85 F1 | 	sub	fp, #20
2e404     A7 14 02 FB | 	rdlong	arg02, fp
2e408     30 4E 85 F1 | 	sub	fp, #48
2e40c     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2e410     08 28 06 F1 | 	add	local02, #8
2e414     14 FB 61 FC | 	wrlong	result1, local02
2e418     04 4E 05 F1 | 	add	fp, #4
2e41c     A7 28 02 FB | 	rdlong	local02, fp
2e420     2C 4E 05 F1 | 	add	fp, #44
2e424     A7 12 02 FB | 	rdlong	arg01, fp
2e428     1C 12 06 F1 | 	add	arg01, #28
2e42c                 | ' {
2e42c                 | ' 
2e42c                 | ' 	return *((DWORD*)ptr);
2e42c     09 FB 01 FB | 	rdlong	result1, arg01
2e430     0C 28 06 F1 | 	add	local02, #12
2e434     14 FB 61 FC | 	wrlong	result1, local02
2e438     2C 4E 85 F1 | 	sub	fp, #44
2e43c     A7 28 02 FB | 	rdlong	local02, fp
2e440     40 4E 05 F1 | 	add	fp, #64
2e444     A7 26 02 FB | 	rdlong	local01, fp
2e448     14 27 62 FC | 	wrlong	local01, local02
2e44c     40 4E 85 F1 | 	sub	fp, #64
2e450     A7 28 02 FB | 	rdlong	local02, fp
2e454     40 4E 05 F1 | 	add	fp, #64
2e458     A7 26 02 FB | 	rdlong	local01, fp
2e45c     06 26 06 F1 | 	add	local01, #6
2e460     13 27 E2 FA | 	rdword	local01, local01
2e464     04 28 06 F1 | 	add	local02, #4
2e468     14 27 52 FC | 	wrword	local01, local02
2e46c     40 4E 85 F1 | 	sub	fp, #64
2e470     A7 28 02 FB | 	rdlong	local02, fp
2e474     08 4E 05 F1 | 	add	fp, #8
2e478     A7 26 C2 FA | 	rdbyte	local01, fp
2e47c     10 28 06 F1 | 	add	local02, #16
2e480     14 27 42 FC | 	wrbyte	local01, local02
2e484     08 4E 85 F1 | 	sub	fp, #8
2e488     A7 28 02 FB | 	rdlong	local02, fp
2e48c     11 28 06 F1 | 	add	local02, #17
2e490     14 01 48 FC | 	wrbyte	#0, local02
2e494     A7 28 02 FB | 	rdlong	local02, fp
2e498     1C 28 06 F1 | 	add	local02, #28
2e49c     14 01 68 FC | 	wrlong	#0, local02
2e4a0     A7 28 02 FB | 	rdlong	local02, fp
2e4a4     14 28 06 F1 | 	add	local02, #20
2e4a8     14 01 68 FC | 	wrlong	#0, local02
2e4ac     A7 12 02 FB | 	rdlong	arg01, fp
2e4b0     04 4E 85 F1 | 	sub	fp, #4
2e4b4     28 12 06 F1 | 	add	arg01, #40
2e4b8     00 14 06 F6 | 	mov	arg02, #0
2e4bc     09 16 C6 F9 | 	decod	arg03, #9
2e4c0     98 00 A0 FD | 	call	#\builtin_bytefill_
2e4c4     0C 4E 05 F1 | 	add	fp, #12
2e4c8     A7 28 C2 FA | 	rdbyte	local02, fp
2e4cc     0C 4E 85 F1 | 	sub	fp, #12
2e4d0     20 28 CE F7 | 	test	local02, #32 wz
2e4d4     0C 02 90 AD |  if_e	jmp	#LR__4664
2e4d8     04 4E 05 F1 | 	add	fp, #4
2e4dc     A7 26 02 FB | 	rdlong	local01, fp
2e4e0     04 4E 85 F1 | 	sub	fp, #4
2e4e4     0C 26 06 F1 | 	add	local01, #12
2e4e8     13 29 02 FB | 	rdlong	local02, local01
2e4ec     01 28 16 F2 | 	cmp	local02, #1 wc
2e4f0     F0 01 90 CD |  if_b	jmp	#LR__4664
2e4f4     04 4E 05 F1 | 	add	fp, #4
2e4f8     A7 26 02 FB | 	rdlong	local01, fp
2e4fc     13 29 02 F6 | 	mov	local02, local01
2e500     0C 26 06 F1 | 	add	local01, #12
2e504     13 27 02 FB | 	rdlong	local01, local01
2e508     14 28 06 F1 | 	add	local02, #20
2e50c     14 27 62 FC | 	wrlong	local01, local02
2e510     40 4E 05 F1 | 	add	fp, #64
2e514     A7 28 02 FB | 	rdlong	local02, fp
2e518     0A 28 06 F1 | 	add	local02, #10
2e51c     14 29 E2 FA | 	rdword	local02, local02
2e520     09 28 66 F0 | 	shl	local02, #9
2e524     08 4E 05 F1 | 	add	fp, #8
2e528     A7 28 62 FC | 	wrlong	local02, fp
2e52c     48 4E 85 F1 | 	sub	fp, #72
2e530     A7 28 02 FB | 	rdlong	local02, fp
2e534     08 28 06 F1 | 	add	local02, #8
2e538     14 27 02 FB | 	rdlong	local01, local02
2e53c     4C 4E 05 F1 | 	add	fp, #76
2e540     A7 26 62 FC | 	wrlong	local01, fp
2e544                 | ' 				fp->fptr = fp->obj.objsize;
2e544                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2e544                 | ' 				clst = fp->obj.sclust;
2e544                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2e544     4C 4E 85 F1 | 	sub	fp, #76
2e548     A7 28 02 FB | 	rdlong	local02, fp
2e54c     0C 28 06 F1 | 	add	local02, #12
2e550     14 27 02 FB | 	rdlong	local01, local02
2e554     58 4E 05 F1 | 	add	fp, #88
2e558     A7 26 62 FC | 	wrlong	local01, fp
2e55c     5C 4E 85 F1 | 	sub	fp, #92
2e560                 | LR__4660
2e560     10 4E 05 F1 | 	add	fp, #16
2e564     A7 28 0A FB | 	rdlong	local02, fp wz
2e568     10 4E 85 F1 | 	sub	fp, #16
2e56c     94 00 90 5D |  if_ne	jmp	#LR__4661
2e570     5C 4E 05 F1 | 	add	fp, #92
2e574     A7 28 02 FB | 	rdlong	local02, fp
2e578     10 4E 85 F1 | 	sub	fp, #16
2e57c     A7 26 02 FB | 	rdlong	local01, fp
2e580     4C 4E 85 F1 | 	sub	fp, #76
2e584     13 29 1A F2 | 	cmp	local02, local01 wcz
2e588     78 00 90 ED |  if_be	jmp	#LR__4661
2e58c     04 4E 05 F1 | 	add	fp, #4
2e590     A7 12 02 FB | 	rdlong	arg01, fp
2e594     4C 4E 05 F1 | 	add	fp, #76
2e598     A7 14 02 FB | 	rdlong	arg02, fp
2e59c     50 4E 85 F1 | 	sub	fp, #80
2e5a0     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2e5a4     50 4E 05 F1 | 	add	fp, #80
2e5a8     A7 FA 61 FC | 	wrlong	result1, fp
2e5ac     50 4E 85 F1 | 	sub	fp, #80
2e5b0     02 FA 15 F2 | 	cmp	result1, #2 wc
2e5b4     10 4E 05 C1 |  if_b	add	fp, #16
2e5b8     A7 04 68 CC |  if_b	wrlong	#2, fp
2e5bc     10 4E 85 C1 |  if_b	sub	fp, #16
2e5c0     50 4E 05 F1 | 	add	fp, #80
2e5c4     A7 28 02 FB | 	rdlong	local02, fp
2e5c8     50 4E 85 F1 | 	sub	fp, #80
2e5cc     FF FF 7F FF 
2e5d0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
2e5d4     10 4E 05 A1 |  if_e	add	fp, #16
2e5d8     A7 02 68 AC |  if_e	wrlong	#1, fp
2e5dc     10 4E 85 A1 |  if_e	sub	fp, #16
2e5e0     5C 4E 05 F1 | 	add	fp, #92
2e5e4     A7 28 02 FB | 	rdlong	local02, fp
2e5e8     10 4E 85 F1 | 	sub	fp, #16
2e5ec     A7 26 02 FB | 	rdlong	local01, fp
2e5f0     13 29 82 F1 | 	sub	local02, local01
2e5f4     10 4E 05 F1 | 	add	fp, #16
2e5f8     A7 28 62 FC | 	wrlong	local02, fp
2e5fc     5C 4E 85 F1 | 	sub	fp, #92
2e600     5C FF 9F FD | 	jmp	#LR__4660
2e604                 | LR__4661
2e604     04 4E 05 F1 | 	add	fp, #4
2e608     A7 28 02 FB | 	rdlong	local02, fp
2e60c     4C 4E 05 F1 | 	add	fp, #76
2e610     A7 26 02 FB | 	rdlong	local01, fp
2e614     18 28 06 F1 | 	add	local02, #24
2e618     14 27 62 FC | 	wrlong	local01, local02
2e61c     40 4E 85 F1 | 	sub	fp, #64
2e620     A7 28 0A FB | 	rdlong	local02, fp wz
2e624     10 4E 85 F1 | 	sub	fp, #16
2e628     B8 00 90 5D |  if_ne	jmp	#LR__4663
2e62c     5C 4E 05 F1 | 	add	fp, #92
2e630     A7 26 02 FB | 	rdlong	local01, fp
2e634     5C 4E 85 F1 | 	sub	fp, #92
2e638     FF 27 CE F7 | 	test	local01, #511 wz
2e63c     A4 00 90 AD |  if_e	jmp	#LR__4663
2e640     44 4E 05 F1 | 	add	fp, #68
2e644     A7 12 02 FB | 	rdlong	arg01, fp
2e648     0C 4E 05 F1 | 	add	fp, #12
2e64c     A7 14 02 FB | 	rdlong	arg02, fp
2e650     50 4E 85 F1 | 	sub	fp, #80
2e654     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2e658     58 4E 05 F1 | 	add	fp, #88
2e65c     A7 FA 61 FC | 	wrlong	result1, fp
2e660     00 FA 4D F2 | 	cmps	result1, #0 wz
2e664     58 4E 85 F1 | 	sub	fp, #88
2e668     10 4E 05 A1 |  if_e	add	fp, #16
2e66c     A7 04 68 AC |  if_e	wrlong	#2, fp
2e670     10 4E 85 A1 |  if_e	sub	fp, #16
2e674     6C 00 90 AD |  if_e	jmp	#LR__4662
2e678     04 4E 05 F1 | 	add	fp, #4
2e67c     A7 28 02 FB | 	rdlong	local02, fp
2e680     54 4E 05 F1 | 	add	fp, #84
2e684     A7 26 02 FB | 	rdlong	local01, fp
2e688     04 4E 05 F1 | 	add	fp, #4
2e68c     A7 18 02 FB | 	rdlong	arg04, fp
2e690     09 18 46 F0 | 	shr	arg04, #9
2e694     0C 27 02 F1 | 	add	local01, arg04
2e698     1C 28 06 F1 | 	add	local02, #28
2e69c     14 27 62 FC | 	wrlong	local01, local02
2e6a0     18 4E 85 F1 | 	sub	fp, #24
2e6a4     A7 28 02 FB | 	rdlong	local02, fp
2e6a8     01 28 06 F1 | 	add	local02, #1
2e6ac     14 13 C2 FA | 	rdbyte	arg01, local02
2e6b0     40 4E 85 F1 | 	sub	fp, #64
2e6b4     A7 28 02 FB | 	rdlong	local02, fp
2e6b8     14 15 02 F6 | 	mov	arg02, local02
2e6bc     28 14 06 F1 | 	add	arg02, #40
2e6c0     04 4E 85 F1 | 	sub	fp, #4
2e6c4     1C 28 06 F1 | 	add	local02, #28
2e6c8     14 17 02 FB | 	rdlong	arg03, local02
2e6cc     01 18 06 F6 | 	mov	arg04, #1
2e6d0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2e6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6d8     10 4E 05 51 |  if_ne	add	fp, #16
2e6dc     A7 02 68 5C |  if_ne	wrlong	#1, fp
2e6e0     10 4E 85 51 |  if_ne	sub	fp, #16
2e6e4                 | LR__4662
2e6e4                 | LR__4663
2e6e4                 | LR__4664
2e6e4                 | LR__4665
2e6e4                 | LR__4666
2e6e4     10 4E 05 F1 | 	add	fp, #16
2e6e8     A7 28 0A FB | 	rdlong	local02, fp wz
2e6ec     10 4E 85 F1 | 	sub	fp, #16
2e6f0     04 4E 05 51 |  if_ne	add	fp, #4
2e6f4     A7 28 02 5B |  if_ne	rdlong	local02, fp
2e6f8     04 4E 85 51 |  if_ne	sub	fp, #4
2e6fc     14 01 68 5C |  if_ne	wrlong	#0, local02
2e700                 | ' 
2e700                 | ' 	return res ;
2e700     10 4E 05 F1 | 	add	fp, #16
2e704     A7 FA 01 FB | 	rdlong	result1, fp
2e708     10 4E 85 F1 | 	sub	fp, #16
2e70c                 | LR__4667
2e70c     A7 F0 03 F6 | 	mov	ptra, fp
2e710     B2 00 A0 FD | 	call	#popregs_
2e714                 | _fatfs_cc_f_open_ret
2e714     2D 00 64 FD | 	ret
2e718                 | 
2e718                 | _fatfs_cc_f_read
2e718     0E 4A 05 F6 | 	mov	COUNT_, #14
2e71c     A8 00 A0 FD | 	call	#pushregs_
2e720     38 F0 07 F1 | 	add	ptra, #56
2e724     04 4E 05 F1 | 	add	fp, #4
2e728     A7 12 62 FC | 	wrlong	arg01, fp
2e72c     04 4E 05 F1 | 	add	fp, #4
2e730     A7 14 62 FC | 	wrlong	arg02, fp
2e734     04 4E 05 F1 | 	add	fp, #4
2e738     A7 16 62 FC | 	wrlong	arg03, fp
2e73c     04 4E 05 F1 | 	add	fp, #4
2e740     A7 18 62 FC | 	wrlong	arg04, fp
2e744     08 4E 85 F1 | 	sub	fp, #8
2e748     A7 FA 01 FB | 	rdlong	result1, fp
2e74c     2C 4E 05 F1 | 	add	fp, #44
2e750     A7 FA 61 FC | 	wrlong	result1, fp
2e754     24 4E 85 F1 | 	sub	fp, #36
2e758     A7 FA 01 FB | 	rdlong	result1, fp
2e75c     FD 00 68 FC | 	wrlong	#0, result1
2e760     0C 4E 85 F1 | 	sub	fp, #12
2e764     A7 12 02 FB | 	rdlong	arg01, fp
2e768     14 4E 05 F1 | 	add	fp, #20
2e76c     A7 14 02 F6 | 	mov	arg02, fp
2e770     18 4E 85 F1 | 	sub	fp, #24
2e774     24 F7 BF FD | 	call	#_fatfs_cc_validate
2e778     14 4E 05 F1 | 	add	fp, #20
2e77c     A7 FA 61 FC | 	wrlong	result1, fp
2e780     00 FA 4D F2 | 	cmps	result1, #0 wz
2e784     14 4E 85 F1 | 	sub	fp, #20
2e788     20 00 90 5D |  if_ne	jmp	#LR__4670
2e78c     04 4E 05 F1 | 	add	fp, #4
2e790     A7 14 02 FB | 	rdlong	arg02, fp
2e794     11 14 06 F1 | 	add	arg02, #17
2e798     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2e79c     10 4E 05 F1 | 	add	fp, #16
2e7a0     A7 14 62 FC | 	wrlong	arg02, fp
2e7a4     14 4E 85 F1 | 	sub	fp, #20
2e7a8     10 00 90 AD |  if_e	jmp	#LR__4671
2e7ac                 | LR__4670
2e7ac     14 4E 05 F1 | 	add	fp, #20
2e7b0     A7 FA 01 FB | 	rdlong	result1, fp
2e7b4     14 4E 85 F1 | 	sub	fp, #20
2e7b8     EC 05 90 FD | 	jmp	#LR__4690
2e7bc                 | LR__4671
2e7bc     04 4E 05 F1 | 	add	fp, #4
2e7c0     A7 18 02 FB | 	rdlong	arg04, fp
2e7c4     04 4E 85 F1 | 	sub	fp, #4
2e7c8     10 18 06 F1 | 	add	arg04, #16
2e7cc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e7d0     01 18 CE F7 | 	test	arg04, #1 wz
2e7d4     07 FA 05 A6 |  if_e	mov	result1, #7
2e7d8     CC 05 90 AD |  if_e	jmp	#LR__4690
2e7dc     04 4E 05 F1 | 	add	fp, #4
2e7e0     A7 26 02 FB | 	rdlong	local01, fp
2e7e4     13 29 02 F6 | 	mov	local02, local01
2e7e8     0C 28 06 F1 | 	add	local02, #12
2e7ec     14 2B 02 FB | 	rdlong	local03, local02
2e7f0     14 26 06 F1 | 	add	local01, #20
2e7f4     13 27 02 FB | 	rdlong	local01, local01
2e7f8     13 2B 82 F1 | 	sub	local03, local01
2e7fc     20 4E 05 F1 | 	add	fp, #32
2e800     A7 2A 62 FC | 	wrlong	local03, fp
2e804     18 4E 85 F1 | 	sub	fp, #24
2e808     A7 2C 02 FB | 	rdlong	local04, fp
2e80c     0C 4E 85 F1 | 	sub	fp, #12
2e810     15 2D 1A F2 | 	cmp	local04, local03 wcz
2e814     24 4E 05 11 |  if_a	add	fp, #36
2e818     A7 2C 02 1B |  if_a	rdlong	local04, fp
2e81c     18 4E 85 11 |  if_a	sub	fp, #24
2e820     A7 2C 62 1C |  if_a	wrlong	local04, fp
2e824     0C 4E 85 11 |  if_a	sub	fp, #12
2e828                 | ' 
2e828                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2e828                 | LR__4672
2e828     0C 4E 05 F1 | 	add	fp, #12
2e82c     A7 28 02 FB | 	rdlong	local02, fp
2e830     0C 4E 85 F1 | 	sub	fp, #12
2e834     14 2D 02 F6 | 	mov	local04, local02
2e838     01 2C 16 F2 | 	cmp	local04, #1 wc
2e83c     64 05 90 CD |  if_b	jmp	#LR__4689
2e840     04 4E 05 F1 | 	add	fp, #4
2e844     A7 2A 02 FB | 	rdlong	local03, fp
2e848     04 4E 85 F1 | 	sub	fp, #4
2e84c     14 2A 06 F1 | 	add	local03, #20
2e850     15 2B 02 FB | 	rdlong	local03, local03
2e854     FF 2B CE F7 | 	test	local03, #511 wz
2e858     3C 04 90 5D |  if_ne	jmp	#LR__4687
2e85c     04 4E 05 F1 | 	add	fp, #4
2e860     A7 26 02 FB | 	rdlong	local01, fp
2e864     14 26 06 F1 | 	add	local01, #20
2e868     13 2B 02 FB | 	rdlong	local03, local01
2e86c     09 2A 46 F0 | 	shr	local03, #9
2e870     14 4E 05 F1 | 	add	fp, #20
2e874     A7 2E 02 FB | 	rdlong	local05, fp
2e878     17 31 02 F6 | 	mov	local06, local05
2e87c     0A 30 06 F1 | 	add	local06, #10
2e880     18 33 E2 FA | 	rdword	local07, local06
2e884     0A 30 86 F1 | 	sub	local06, #10
2e888     19 35 32 F9 | 	getword	local08, local07, #0
2e88c     01 34 86 F1 | 	sub	local08, #1
2e890     1A 2B 0A F5 | 	and	local03, local08 wz
2e894     18 4E 05 F1 | 	add	fp, #24
2e898     A7 2A 62 FC | 	wrlong	local03, fp
2e89c     30 4E 85 F1 | 	sub	fp, #48
2e8a0     E0 00 90 5D |  if_ne	jmp	#LR__4677
2e8a4     04 4E 05 F1 | 	add	fp, #4
2e8a8     A7 2A 02 FB | 	rdlong	local03, fp
2e8ac     04 4E 85 F1 | 	sub	fp, #4
2e8b0     14 2A 06 F1 | 	add	local03, #20
2e8b4     15 2B 0A FB | 	rdlong	local03, local03 wz
2e8b8     20 00 90 5D |  if_ne	jmp	#LR__4673
2e8bc     04 4E 05 F1 | 	add	fp, #4
2e8c0     A7 2A 02 FB | 	rdlong	local03, fp
2e8c4     08 2A 06 F1 | 	add	local03, #8
2e8c8     15 2B 02 FB | 	rdlong	local03, local03
2e8cc     18 4E 05 F1 | 	add	fp, #24
2e8d0     A7 2A 62 FC | 	wrlong	local03, fp
2e8d4     1C 4E 85 F1 | 	sub	fp, #28
2e8d8     28 00 90 FD | 	jmp	#LR__4674
2e8dc                 | LR__4673
2e8dc     04 4E 05 F1 | 	add	fp, #4
2e8e0     A7 34 02 FB | 	rdlong	local08, fp
2e8e4     1A 13 02 F6 | 	mov	arg01, local08
2e8e8     04 4E 85 F1 | 	sub	fp, #4
2e8ec     18 34 06 F1 | 	add	local08, #24
2e8f0     1A 15 02 FB | 	rdlong	arg02, local08
2e8f4     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2e8f8     1C 4E 05 F1 | 	add	fp, #28
2e8fc     A7 FA 61 FC | 	wrlong	result1, fp
2e900     1C 4E 85 F1 | 	sub	fp, #28
2e904                 | LR__4674
2e904     1C 4E 05 F1 | 	add	fp, #28
2e908     A7 2A 02 FB | 	rdlong	local03, fp
2e90c     1C 4E 85 F1 | 	sub	fp, #28
2e910     02 2A 16 F2 | 	cmp	local03, #2 wc
2e914     1C 00 90 3D |  if_ae	jmp	#LR__4675
2e918     04 4E 05 F1 | 	add	fp, #4
2e91c     A7 2A 02 FB | 	rdlong	local03, fp
2e920     04 4E 85 F1 | 	sub	fp, #4
2e924     11 2A 06 F1 | 	add	local03, #17
2e928     15 05 48 FC | 	wrbyte	#2, local03
2e92c     02 FA 05 F6 | 	mov	result1, #2
2e930     74 04 90 FD | 	jmp	#LR__4690
2e934                 | LR__4675
2e934     1C 4E 05 F1 | 	add	fp, #28
2e938     A7 2A 02 FB | 	rdlong	local03, fp
2e93c     1C 4E 85 F1 | 	sub	fp, #28
2e940     FF FF 7F FF 
2e944     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
2e948     1C 00 90 5D |  if_ne	jmp	#LR__4676
2e94c     04 4E 05 F1 | 	add	fp, #4
2e950     A7 2A 02 FB | 	rdlong	local03, fp
2e954     04 4E 85 F1 | 	sub	fp, #4
2e958     11 2A 06 F1 | 	add	local03, #17
2e95c     15 03 48 FC | 	wrbyte	#1, local03
2e960     01 FA 05 F6 | 	mov	result1, #1
2e964     40 04 90 FD | 	jmp	#LR__4690
2e968                 | LR__4676
2e968     04 4E 05 F1 | 	add	fp, #4
2e96c     A7 2A 02 FB | 	rdlong	local03, fp
2e970     18 4E 05 F1 | 	add	fp, #24
2e974     A7 34 02 FB | 	rdlong	local08, fp
2e978     1C 4E 85 F1 | 	sub	fp, #28
2e97c     18 2A 06 F1 | 	add	local03, #24
2e980     15 35 62 FC | 	wrlong	local08, local03
2e984                 | LR__4677
2e984     18 4E 05 F1 | 	add	fp, #24
2e988     A7 12 02 FB | 	rdlong	arg01, fp
2e98c     14 4E 85 F1 | 	sub	fp, #20
2e990     A7 2A 02 FB | 	rdlong	local03, fp
2e994     04 4E 85 F1 | 	sub	fp, #4
2e998     18 2A 06 F1 | 	add	local03, #24
2e99c     15 15 02 FB | 	rdlong	arg02, local03
2e9a0     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2e9a4     20 4E 05 F1 | 	add	fp, #32
2e9a8     A7 FA 61 FC | 	wrlong	result1, fp
2e9ac     20 4E 85 F1 | 	sub	fp, #32
2e9b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e9b4     1C 00 90 5D |  if_ne	jmp	#LR__4678
2e9b8     04 4E 05 F1 | 	add	fp, #4
2e9bc     A7 2A 02 FB | 	rdlong	local03, fp
2e9c0     04 4E 85 F1 | 	sub	fp, #4
2e9c4     11 2A 06 F1 | 	add	local03, #17
2e9c8     15 05 48 FC | 	wrbyte	#2, local03
2e9cc     02 FA 05 F6 | 	mov	result1, #2
2e9d0     D4 03 90 FD | 	jmp	#LR__4690
2e9d4                 | LR__4678
2e9d4     20 4E 05 F1 | 	add	fp, #32
2e9d8     A7 2A 02 FB | 	rdlong	local03, fp
2e9dc     10 4E 05 F1 | 	add	fp, #16
2e9e0     A7 34 02 FB | 	rdlong	local08, fp
2e9e4     1A 2B 02 F1 | 	add	local03, local08
2e9e8     10 4E 85 F1 | 	sub	fp, #16
2e9ec     A7 2A 62 FC | 	wrlong	local03, fp
2e9f0     14 4E 85 F1 | 	sub	fp, #20
2e9f4     A7 2A 02 FB | 	rdlong	local03, fp
2e9f8     09 2A 46 F0 | 	shr	local03, #9
2e9fc     20 4E 05 F1 | 	add	fp, #32
2ea00     A7 2A 62 FC | 	wrlong	local03, fp
2ea04     2C 4E 85 F1 | 	sub	fp, #44
2ea08     01 2A 16 F2 | 	cmp	local03, #1 wc
2ea0c     5C 01 90 CD |  if_b	jmp	#LR__4682
2ea10     30 4E 05 F1 | 	add	fp, #48
2ea14     A7 2A 02 FB | 	rdlong	local03, fp
2ea18     04 4E 85 F1 | 	sub	fp, #4
2ea1c     A7 34 02 FB | 	rdlong	local08, fp
2ea20     1A 2B 02 F1 | 	add	local03, local08
2ea24     14 4E 85 F1 | 	sub	fp, #20
2ea28     A7 34 02 FB | 	rdlong	local08, fp
2ea2c     18 4E 85 F1 | 	sub	fp, #24
2ea30     0A 34 06 F1 | 	add	local08, #10
2ea34     1A 35 E2 FA | 	rdword	local08, local08
2ea38     1A 2B 1A F2 | 	cmp	local03, local08 wcz
2ea3c     28 00 90 ED |  if_be	jmp	#LR__4679
2ea40     18 4E 05 F1 | 	add	fp, #24
2ea44     A7 26 02 FB | 	rdlong	local01, fp
2ea48     0A 26 06 F1 | 	add	local01, #10
2ea4c     13 2B E2 FA | 	rdword	local03, local01
2ea50     18 4E 05 F1 | 	add	fp, #24
2ea54     A7 34 02 FB | 	rdlong	local08, fp
2ea58     1A 2B 82 F1 | 	sub	local03, local08
2ea5c     04 4E 85 F1 | 	sub	fp, #4
2ea60     A7 2A 62 FC | 	wrlong	local03, fp
2ea64     2C 4E 85 F1 | 	sub	fp, #44
2ea68                 | LR__4679
2ea68     18 4E 05 F1 | 	add	fp, #24
2ea6c     A7 26 02 FB | 	rdlong	local01, fp
2ea70     01 26 06 F1 | 	add	local01, #1
2ea74     13 13 C2 FA | 	rdbyte	arg01, local01
2ea78     1C 4E 05 F1 | 	add	fp, #28
2ea7c     A7 14 02 FB | 	rdlong	arg02, fp
2ea80     14 4E 85 F1 | 	sub	fp, #20
2ea84     A7 16 02 FB | 	rdlong	arg03, fp
2ea88     0C 4E 05 F1 | 	add	fp, #12
2ea8c     A7 18 02 FB | 	rdlong	arg04, fp
2ea90     2C 4E 85 F1 | 	sub	fp, #44
2ea94     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2ea98     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea9c     1C 00 90 AD |  if_e	jmp	#LR__4680
2eaa0     04 4E 05 F1 | 	add	fp, #4
2eaa4     A7 2A 02 FB | 	rdlong	local03, fp
2eaa8     04 4E 85 F1 | 	sub	fp, #4
2eaac     11 2A 06 F1 | 	add	local03, #17
2eab0     15 03 48 FC | 	wrbyte	#1, local03
2eab4     01 FA 05 F6 | 	mov	result1, #1
2eab8     EC 02 90 FD | 	jmp	#LR__4690
2eabc                 | LR__4680
2eabc     04 4E 05 F1 | 	add	fp, #4
2eac0     A7 26 02 FB | 	rdlong	local01, fp
2eac4     04 4E 85 F1 | 	sub	fp, #4
2eac8     10 26 06 F1 | 	add	local01, #16
2eacc     13 2B C2 FA | 	rdbyte	local03, local01
2ead0     80 2A CE F7 | 	test	local03, #128 wz
2ead4     78 00 90 AD |  if_e	jmp	#LR__4681
2ead8     04 4E 05 F1 | 	add	fp, #4
2eadc     A7 34 02 FB | 	rdlong	local08, fp
2eae0     1C 34 06 F1 | 	add	local08, #28
2eae4     1A 35 02 FB | 	rdlong	local08, local08
2eae8     1C 4E 05 F1 | 	add	fp, #28
2eaec     A7 36 02 FB | 	rdlong	local09, fp
2eaf0     1B 35 82 F1 | 	sub	local08, local09
2eaf4     0C 4E 05 F1 | 	add	fp, #12
2eaf8     A7 38 02 FB | 	rdlong	local10, fp
2eafc     2C 4E 85 F1 | 	sub	fp, #44
2eb00     1C 3B 02 F6 | 	mov	local11, local10
2eb04     1D 35 12 F2 | 	cmp	local08, local11 wc
2eb08     44 00 90 3D |  if_ae	jmp	#LR__4681
2eb0c     34 4E 05 F1 | 	add	fp, #52
2eb10     A7 12 02 FB | 	rdlong	arg01, fp
2eb14     30 4E 85 F1 | 	sub	fp, #48
2eb18     A7 14 02 FB | 	rdlong	arg02, fp
2eb1c     0A 3B 02 F6 | 	mov	local11, arg02
2eb20     1C 3A 06 F1 | 	add	local11, #28
2eb24     1D 37 02 FB | 	rdlong	local09, local11
2eb28     1C 4E 05 F1 | 	add	fp, #28
2eb2c     A7 2E 02 FB | 	rdlong	local05, fp
2eb30     17 37 82 F1 | 	sub	local09, local05
2eb34     09 36 66 F0 | 	shl	local09, #9
2eb38     1B 3B 02 F6 | 	mov	local11, local09
2eb3c     1B 13 02 F1 | 	add	arg01, local09
2eb40     20 4E 85 F1 | 	sub	fp, #32
2eb44     28 14 06 F1 | 	add	arg02, #40
2eb48     09 16 C6 F9 | 	decod	arg03, #9
2eb4c     64 43 BF FD | 	call	#__system____builtin_memmove
2eb50                 | LR__4681
2eb50     2C 4E 05 F1 | 	add	fp, #44
2eb54     A7 2A 02 FB | 	rdlong	local03, fp
2eb58     09 2A 66 F0 | 	shl	local03, #9
2eb5c     04 4E 85 F1 | 	sub	fp, #4
2eb60     A7 2A 62 FC | 	wrlong	local03, fp
2eb64     28 4E 85 F1 | 	sub	fp, #40
2eb68                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2eb68                 | ' 				}
2eb68                 | ' 
2eb68                 | ' 
2eb68                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2eb68                 | ' 				continue;
2eb68     B4 01 90 FD | 	jmp	#LR__4688
2eb6c                 | LR__4682
2eb6c     04 4E 05 F1 | 	add	fp, #4
2eb70     A7 2A 02 FB | 	rdlong	local03, fp
2eb74     1C 2A 06 F1 | 	add	local03, #28
2eb78     15 2B 02 FB | 	rdlong	local03, local03
2eb7c     1C 4E 05 F1 | 	add	fp, #28
2eb80     A7 26 02 FB | 	rdlong	local01, fp
2eb84     20 4E 85 F1 | 	sub	fp, #32
2eb88     13 2B 0A F2 | 	cmp	local03, local01 wz
2eb8c     EC 00 90 AD |  if_e	jmp	#LR__4686
2eb90     04 4E 05 F1 | 	add	fp, #4
2eb94     A7 26 02 FB | 	rdlong	local01, fp
2eb98     04 4E 85 F1 | 	sub	fp, #4
2eb9c     10 26 06 F1 | 	add	local01, #16
2eba0     13 2B C2 FA | 	rdbyte	local03, local01
2eba4     80 2A CE F7 | 	test	local03, #128 wz
2eba8     7C 00 90 AD |  if_e	jmp	#LR__4684
2ebac     18 4E 05 F1 | 	add	fp, #24
2ebb0     A7 26 02 FB | 	rdlong	local01, fp
2ebb4     01 26 06 F1 | 	add	local01, #1
2ebb8     13 13 C2 FA | 	rdbyte	arg01, local01
2ebbc     14 4E 85 F1 | 	sub	fp, #20
2ebc0     A7 2A 02 FB | 	rdlong	local03, fp
2ebc4     15 15 02 F6 | 	mov	arg02, local03
2ebc8     28 14 06 F1 | 	add	arg02, #40
2ebcc     04 4E 85 F1 | 	sub	fp, #4
2ebd0     1C 2A 06 F1 | 	add	local03, #28
2ebd4     15 17 02 FB | 	rdlong	arg03, local03
2ebd8     01 18 06 F6 | 	mov	arg04, #1
2ebdc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2ebe0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebe4     1C 00 90 AD |  if_e	jmp	#LR__4683
2ebe8     04 4E 05 F1 | 	add	fp, #4
2ebec     A7 2A 02 FB | 	rdlong	local03, fp
2ebf0     04 4E 85 F1 | 	sub	fp, #4
2ebf4     11 2A 06 F1 | 	add	local03, #17
2ebf8     15 03 48 FC | 	wrbyte	#1, local03
2ebfc     01 FA 05 F6 | 	mov	result1, #1
2ec00     A4 01 90 FD | 	jmp	#LR__4690
2ec04                 | LR__4683
2ec04     04 4E 05 F1 | 	add	fp, #4
2ec08     A7 3A 02 FB | 	rdlong	local11, fp
2ec0c     1D 2B 02 F6 | 	mov	local03, local11
2ec10     04 4E 85 F1 | 	sub	fp, #4
2ec14     10 3A 06 F1 | 	add	local11, #16
2ec18     1D 3B C2 FA | 	rdbyte	local11, local11
2ec1c     7F 3A 06 F5 | 	and	local11, #127
2ec20     10 2A 06 F1 | 	add	local03, #16
2ec24     15 3B 42 FC | 	wrbyte	local11, local03
2ec28                 | LR__4684
2ec28     18 4E 05 F1 | 	add	fp, #24
2ec2c     A7 26 02 FB | 	rdlong	local01, fp
2ec30     01 26 06 F1 | 	add	local01, #1
2ec34     13 13 C2 FA | 	rdbyte	arg01, local01
2ec38     14 4E 85 F1 | 	sub	fp, #20
2ec3c     A7 14 02 FB | 	rdlong	arg02, fp
2ec40     28 14 06 F1 | 	add	arg02, #40
2ec44     1C 4E 05 F1 | 	add	fp, #28
2ec48     A7 16 02 FB | 	rdlong	arg03, fp
2ec4c     20 4E 85 F1 | 	sub	fp, #32
2ec50     01 18 06 F6 | 	mov	arg04, #1
2ec54     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2ec58     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec5c     1C 00 90 AD |  if_e	jmp	#LR__4685
2ec60     04 4E 05 F1 | 	add	fp, #4
2ec64     A7 2A 02 FB | 	rdlong	local03, fp
2ec68     04 4E 85 F1 | 	sub	fp, #4
2ec6c     11 2A 06 F1 | 	add	local03, #17
2ec70     15 03 48 FC | 	wrbyte	#1, local03
2ec74     01 FA 05 F6 | 	mov	result1, #1
2ec78     2C 01 90 FD | 	jmp	#LR__4690
2ec7c                 | LR__4685
2ec7c                 | LR__4686
2ec7c     04 4E 05 F1 | 	add	fp, #4
2ec80     A7 2A 02 FB | 	rdlong	local03, fp
2ec84     1C 4E 05 F1 | 	add	fp, #28
2ec88     A7 3A 02 FB | 	rdlong	local11, fp
2ec8c     20 4E 85 F1 | 	sub	fp, #32
2ec90     1C 2A 06 F1 | 	add	local03, #28
2ec94     15 3B 62 FC | 	wrlong	local11, local03
2ec98                 | LR__4687
2ec98     04 4E 05 F1 | 	add	fp, #4
2ec9c     A7 26 02 FB | 	rdlong	local01, fp
2eca0     14 26 06 F1 | 	add	local01, #20
2eca4     13 3B 02 FB | 	rdlong	local11, local01
2eca8     FF 3B 06 F5 | 	and	local11, #511
2ecac     09 2A C6 F9 | 	decod	local03, #9
2ecb0     1D 2B 82 F1 | 	sub	local03, local11
2ecb4     24 4E 05 F1 | 	add	fp, #36
2ecb8     A7 2A 62 FC | 	wrlong	local03, fp
2ecbc     1C 4E 85 F1 | 	sub	fp, #28
2ecc0     A7 3A 02 FB | 	rdlong	local11, fp
2ecc4     0C 4E 85 F1 | 	sub	fp, #12
2ecc8     1D 2B 1A F2 | 	cmp	local03, local11 wcz
2eccc     0C 4E 05 11 |  if_a	add	fp, #12
2ecd0     A7 2A 02 1B |  if_a	rdlong	local03, fp
2ecd4     1C 4E 05 11 |  if_a	add	fp, #28
2ecd8     A7 2A 62 1C |  if_a	wrlong	local03, fp
2ecdc     28 4E 85 11 |  if_a	sub	fp, #40
2ece0     34 4E 05 F1 | 	add	fp, #52
2ece4     A7 12 02 FB | 	rdlong	arg01, fp
2ece8     30 4E 85 F1 | 	sub	fp, #48
2ecec     A7 30 02 FB | 	rdlong	local06, fp
2ecf0     18 15 02 F6 | 	mov	arg02, local06
2ecf4     28 14 06 F1 | 	add	arg02, #40
2ecf8     14 30 06 F1 | 	add	local06, #20
2ecfc     18 3B 02 FB | 	rdlong	local11, local06
2ed00     1D 37 02 F6 | 	mov	local09, local11
2ed04     1B 39 02 F6 | 	mov	local10, local09
2ed08     FF 39 06 F5 | 	and	local10, #511
2ed0c     1C 15 02 F1 | 	add	arg02, local10
2ed10     24 4E 05 F1 | 	add	fp, #36
2ed14     A7 16 02 FB | 	rdlong	arg03, fp
2ed18     28 4E 85 F1 | 	sub	fp, #40
2ed1c     94 41 BF FD | 	call	#__system____builtin_memmove
2ed20                 | LR__4688
2ed20     0C 4E 05 F1 | 	add	fp, #12
2ed24     A7 2A 02 FB | 	rdlong	local03, fp
2ed28     1C 4E 05 F1 | 	add	fp, #28
2ed2c     A7 34 02 FB | 	rdlong	local08, fp
2ed30     1A 2B 82 F1 | 	sub	local03, local08
2ed34     1C 4E 85 F1 | 	sub	fp, #28
2ed38     A7 2A 62 FC | 	wrlong	local03, fp
2ed3c     04 4E 05 F1 | 	add	fp, #4
2ed40     A7 26 02 FB | 	rdlong	local01, fp
2ed44     13 33 02 FB | 	rdlong	local07, local01
2ed48     18 4E 05 F1 | 	add	fp, #24
2ed4c     A7 34 02 FB | 	rdlong	local08, fp
2ed50     1A 33 02 F1 | 	add	local07, local08
2ed54     13 33 62 FC | 	wrlong	local07, local01
2ed58     0C 4E 05 F1 | 	add	fp, #12
2ed5c     A7 2A 02 FB | 	rdlong	local03, fp
2ed60     0C 4E 85 F1 | 	sub	fp, #12
2ed64     A7 3C 02 FB | 	rdlong	local12, fp
2ed68     1E 2B 02 F1 | 	add	local03, local12
2ed6c     0C 4E 05 F1 | 	add	fp, #12
2ed70     A7 2A 62 FC | 	wrlong	local03, fp
2ed74     30 4E 85 F1 | 	sub	fp, #48
2ed78     A7 3E 02 FB | 	rdlong	local13, fp
2ed7c     1F 2B 02 F6 | 	mov	local03, local13
2ed80     14 3E 06 F1 | 	add	local13, #20
2ed84     1F 41 02 FB | 	rdlong	local14, local13
2ed88     24 4E 05 F1 | 	add	fp, #36
2ed8c     A7 30 02 FB | 	rdlong	local06, fp
2ed90     28 4E 85 F1 | 	sub	fp, #40
2ed94     18 41 02 F1 | 	add	local14, local06
2ed98     14 2A 06 F1 | 	add	local03, #20
2ed9c     15 41 62 FC | 	wrlong	local14, local03
2eda0     84 FA 9F FD | 	jmp	#LR__4672
2eda4                 | LR__4689
2eda4                 | ' 
2eda4                 | ' 
2eda4                 | ' 
2eda4                 | ' 
2eda4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2eda4                 | ' 
2eda4                 | ' 	}
2eda4                 | ' 
2eda4                 | ' 	return FR_OK ;
2eda4     00 FA 05 F6 | 	mov	result1, #0
2eda8                 | LR__4690
2eda8     A7 F0 03 F6 | 	mov	ptra, fp
2edac     B2 00 A0 FD | 	call	#popregs_
2edb0                 | _fatfs_cc_f_read_ret
2edb0     2D 00 64 FD | 	ret
2edb4                 | 
2edb4                 | _fatfs_cc_f_write
2edb4     15 4A 05 F6 | 	mov	COUNT_, #21
2edb8     A8 00 A0 FD | 	call	#pushregs_
2edbc     34 F0 07 F1 | 	add	ptra, #52
2edc0     04 4E 05 F1 | 	add	fp, #4
2edc4     A7 12 62 FC | 	wrlong	arg01, fp
2edc8     04 4E 05 F1 | 	add	fp, #4
2edcc     A7 14 62 FC | 	wrlong	arg02, fp
2edd0     04 4E 05 F1 | 	add	fp, #4
2edd4     A7 16 62 FC | 	wrlong	arg03, fp
2edd8     04 4E 05 F1 | 	add	fp, #4
2eddc     A7 18 62 FC | 	wrlong	arg04, fp
2ede0     08 4E 85 F1 | 	sub	fp, #8
2ede4     A7 FA 01 FB | 	rdlong	result1, fp
2ede8     28 4E 05 F1 | 	add	fp, #40
2edec     A7 FA 61 FC | 	wrlong	result1, fp
2edf0     20 4E 85 F1 | 	sub	fp, #32
2edf4     A7 FA 01 FB | 	rdlong	result1, fp
2edf8     FD 00 68 FC | 	wrlong	#0, result1
2edfc     0C 4E 85 F1 | 	sub	fp, #12
2ee00     A7 12 02 FB | 	rdlong	arg01, fp
2ee04     14 4E 05 F1 | 	add	fp, #20
2ee08     A7 14 02 F6 | 	mov	arg02, fp
2ee0c     18 4E 85 F1 | 	sub	fp, #24
2ee10     88 F0 BF FD | 	call	#_fatfs_cc_validate
2ee14     14 4E 05 F1 | 	add	fp, #20
2ee18     A7 FA 61 FC | 	wrlong	result1, fp
2ee1c     00 FA 4D F2 | 	cmps	result1, #0 wz
2ee20     14 4E 85 F1 | 	sub	fp, #20
2ee24     20 00 90 5D |  if_ne	jmp	#LR__4700
2ee28     04 4E 05 F1 | 	add	fp, #4
2ee2c     A7 14 02 FB | 	rdlong	arg02, fp
2ee30     11 14 06 F1 | 	add	arg02, #17
2ee34     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2ee38     10 4E 05 F1 | 	add	fp, #16
2ee3c     A7 14 62 FC | 	wrlong	arg02, fp
2ee40     14 4E 85 F1 | 	sub	fp, #20
2ee44     10 00 90 AD |  if_e	jmp	#LR__4701
2ee48                 | LR__4700
2ee48     14 4E 05 F1 | 	add	fp, #20
2ee4c     A7 FA 01 FB | 	rdlong	result1, fp
2ee50     14 4E 85 F1 | 	sub	fp, #20
2ee54     44 07 90 FD | 	jmp	#LR__4723
2ee58                 | LR__4701
2ee58     04 4E 05 F1 | 	add	fp, #4
2ee5c     A7 14 02 FB | 	rdlong	arg02, fp
2ee60     04 4E 85 F1 | 	sub	fp, #4
2ee64     10 14 06 F1 | 	add	arg02, #16
2ee68     0A 15 C2 FA | 	rdbyte	arg02, arg02
2ee6c     02 14 CE F7 | 	test	arg02, #2 wz
2ee70     07 FA 05 A6 |  if_e	mov	result1, #7
2ee74     24 07 90 AD |  if_e	jmp	#LR__4723
2ee78     04 4E 05 F1 | 	add	fp, #4
2ee7c     A7 14 02 FB | 	rdlong	arg02, fp
2ee80     0A 13 02 F6 | 	mov	arg01, arg02
2ee84     14 12 06 F1 | 	add	arg01, #20
2ee88     09 13 02 FB | 	rdlong	arg01, arg01
2ee8c     08 4E 05 F1 | 	add	fp, #8
2ee90     A7 FA 01 FB | 	rdlong	result1, fp
2ee94     FD 12 02 F1 | 	add	arg01, result1
2ee98     0C 4E 85 F1 | 	sub	fp, #12
2ee9c     14 14 06 F1 | 	add	arg02, #20
2eea0     0A FB 01 FB | 	rdlong	result1, arg02
2eea4     FD 12 12 F2 | 	cmp	arg01, result1 wc
2eea8     24 00 90 3D |  if_ae	jmp	#LR__4702
2eeac     04 4E 05 F1 | 	add	fp, #4
2eeb0     A7 14 02 FB | 	rdlong	arg02, fp
2eeb4     01 FA 65 F6 | 	neg	result1, #1
2eeb8     14 14 06 F1 | 	add	arg02, #20
2eebc     0A 15 02 FB | 	rdlong	arg02, arg02
2eec0     0A FB 81 F1 | 	sub	result1, arg02
2eec4     08 4E 05 F1 | 	add	fp, #8
2eec8     A7 FA 61 FC | 	wrlong	result1, fp
2eecc     0C 4E 85 F1 | 	sub	fp, #12
2eed0                 | LR__4702
2eed0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2eed0                 | ' 	}
2eed0                 | ' 
2eed0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2eed0                 | LR__4703
2eed0     0C 4E 05 F1 | 	add	fp, #12
2eed4     A7 FA 01 FB | 	rdlong	result1, fp
2eed8     0C 4E 85 F1 | 	sub	fp, #12
2eedc     01 FA 15 F2 | 	cmp	result1, #1 wc
2eee0     90 06 90 CD |  if_b	jmp	#LR__4722
2eee4     04 4E 05 F1 | 	add	fp, #4
2eee8     A7 FA 01 FB | 	rdlong	result1, fp
2eeec     04 4E 85 F1 | 	sub	fp, #4
2eef0     14 FA 05 F1 | 	add	result1, #20
2eef4     FD FA 01 FB | 	rdlong	result1, result1
2eef8     FF FB CD F7 | 	test	result1, #511 wz
2eefc     D8 04 90 5D |  if_ne	jmp	#LR__4718
2ef00     04 4E 05 F1 | 	add	fp, #4
2ef04     A7 FA 01 FB | 	rdlong	result1, fp
2ef08     14 FA 05 F1 | 	add	result1, #20
2ef0c     FD FA 01 FB | 	rdlong	result1, result1
2ef10     09 FA 45 F0 | 	shr	result1, #9
2ef14     14 4E 05 F1 | 	add	fp, #20
2ef18     A7 14 02 FB | 	rdlong	arg02, fp
2ef1c     0A 14 06 F1 | 	add	arg02, #10
2ef20     0A 19 E2 FA | 	rdword	arg04, arg02
2ef24     0C 15 32 F9 | 	getword	arg02, arg04, #0
2ef28     01 14 86 F1 | 	sub	arg02, #1
2ef2c     0A FB 09 F5 | 	and	result1, arg02 wz
2ef30     14 4E 05 F1 | 	add	fp, #20
2ef34     A7 FA 61 FC | 	wrlong	result1, fp
2ef38     2C 4E 85 F1 | 	sub	fp, #44
2ef3c     44 01 90 5D |  if_ne	jmp	#LR__4709
2ef40     04 4E 05 F1 | 	add	fp, #4
2ef44     A7 FA 01 FB | 	rdlong	result1, fp
2ef48     04 4E 85 F1 | 	sub	fp, #4
2ef4c     14 FA 05 F1 | 	add	result1, #20
2ef50     FD 14 0A FB | 	rdlong	arg02, result1 wz
2ef54     44 00 90 5D |  if_ne	jmp	#LR__4704
2ef58     04 4E 05 F1 | 	add	fp, #4
2ef5c     A7 14 02 FB | 	rdlong	arg02, fp
2ef60     08 14 06 F1 | 	add	arg02, #8
2ef64     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2ef68     18 4E 05 F1 | 	add	fp, #24
2ef6c     A7 14 62 FC | 	wrlong	arg02, fp
2ef70     1C 4E 85 F1 | 	sub	fp, #28
2ef74     4C 00 90 5D |  if_ne	jmp	#LR__4705
2ef78     04 4E 05 F1 | 	add	fp, #4
2ef7c     A7 12 02 FB | 	rdlong	arg01, fp
2ef80     04 4E 85 F1 | 	sub	fp, #4
2ef84     00 14 06 F6 | 	mov	arg02, #0
2ef88     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2ef8c     1C 4E 05 F1 | 	add	fp, #28
2ef90     A7 FA 61 FC | 	wrlong	result1, fp
2ef94     1C 4E 85 F1 | 	sub	fp, #28
2ef98     28 00 90 FD | 	jmp	#LR__4705
2ef9c                 | LR__4704
2ef9c     04 4E 05 F1 | 	add	fp, #4
2efa0     A7 18 02 FB | 	rdlong	arg04, fp
2efa4     0C 13 02 F6 | 	mov	arg01, arg04
2efa8     04 4E 85 F1 | 	sub	fp, #4
2efac     18 18 06 F1 | 	add	arg04, #24
2efb0     0C 15 02 FB | 	rdlong	arg02, arg04
2efb4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2efb8     1C 4E 05 F1 | 	add	fp, #28
2efbc     A7 FA 61 FC | 	wrlong	result1, fp
2efc0     1C 4E 85 F1 | 	sub	fp, #28
2efc4                 | LR__4705
2efc4     1C 4E 05 F1 | 	add	fp, #28
2efc8     A7 FA 09 FB | 	rdlong	result1, fp wz
2efcc     1C 4E 85 F1 | 	sub	fp, #28
2efd0     A0 05 90 AD |  if_e	jmp	#LR__4722
2efd4     1C 4E 05 F1 | 	add	fp, #28
2efd8     A7 FA 01 FB | 	rdlong	result1, fp
2efdc     1C 4E 85 F1 | 	sub	fp, #28
2efe0     01 FA 0D F2 | 	cmp	result1, #1 wz
2efe4     1C 00 90 5D |  if_ne	jmp	#LR__4706
2efe8     04 4E 05 F1 | 	add	fp, #4
2efec     A7 FA 01 FB | 	rdlong	result1, fp
2eff0     04 4E 85 F1 | 	sub	fp, #4
2eff4     11 FA 05 F1 | 	add	result1, #17
2eff8     FD 04 48 FC | 	wrbyte	#2, result1
2effc     02 FA 05 F6 | 	mov	result1, #2
2f000     98 05 90 FD | 	jmp	#LR__4723
2f004                 | LR__4706
2f004     1C 4E 05 F1 | 	add	fp, #28
2f008     A7 FA 01 FB | 	rdlong	result1, fp
2f00c     1C 4E 85 F1 | 	sub	fp, #28
2f010     FF FF 7F FF 
2f014     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2f018     1C 00 90 5D |  if_ne	jmp	#LR__4707
2f01c     04 4E 05 F1 | 	add	fp, #4
2f020     A7 FA 01 FB | 	rdlong	result1, fp
2f024     04 4E 85 F1 | 	sub	fp, #4
2f028     11 FA 05 F1 | 	add	result1, #17
2f02c     FD 02 48 FC | 	wrbyte	#1, result1
2f030     01 FA 05 F6 | 	mov	result1, #1
2f034     64 05 90 FD | 	jmp	#LR__4723
2f038                 | LR__4707
2f038     04 4E 05 F1 | 	add	fp, #4
2f03c     A7 FA 01 FB | 	rdlong	result1, fp
2f040     18 4E 05 F1 | 	add	fp, #24
2f044     A7 18 02 FB | 	rdlong	arg04, fp
2f048     18 FA 05 F1 | 	add	result1, #24
2f04c     FD 18 62 FC | 	wrlong	arg04, result1
2f050     18 4E 85 F1 | 	sub	fp, #24
2f054     A7 FA 01 FB | 	rdlong	result1, fp
2f058     04 4E 85 F1 | 	sub	fp, #4
2f05c     08 FA 05 F1 | 	add	result1, #8
2f060     FD FA 09 FB | 	rdlong	result1, result1 wz
2f064     1C 00 90 5D |  if_ne	jmp	#LR__4708
2f068     04 4E 05 F1 | 	add	fp, #4
2f06c     A7 18 02 FB | 	rdlong	arg04, fp
2f070     18 4E 05 F1 | 	add	fp, #24
2f074     A7 FA 01 FB | 	rdlong	result1, fp
2f078     1C 4E 85 F1 | 	sub	fp, #28
2f07c     08 18 06 F1 | 	add	arg04, #8
2f080     0C FB 61 FC | 	wrlong	result1, arg04
2f084                 | LR__4708
2f084                 | LR__4709
2f084     04 4E 05 F1 | 	add	fp, #4
2f088     A7 18 02 FB | 	rdlong	arg04, fp
2f08c     04 4E 85 F1 | 	sub	fp, #4
2f090     10 18 06 F1 | 	add	arg04, #16
2f094     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f098     80 18 CE F7 | 	test	arg04, #128 wz
2f09c     7C 00 90 AD |  if_e	jmp	#LR__4711
2f0a0     18 4E 05 F1 | 	add	fp, #24
2f0a4     A7 18 02 FB | 	rdlong	arg04, fp
2f0a8     01 18 06 F1 | 	add	arg04, #1
2f0ac     0C 13 C2 FA | 	rdbyte	arg01, arg04
2f0b0     14 4E 85 F1 | 	sub	fp, #20
2f0b4     A7 18 02 FB | 	rdlong	arg04, fp
2f0b8     0C 15 02 F6 | 	mov	arg02, arg04
2f0bc     28 14 06 F1 | 	add	arg02, #40
2f0c0     04 4E 85 F1 | 	sub	fp, #4
2f0c4     1C 18 06 F1 | 	add	arg04, #28
2f0c8     0C 17 02 FB | 	rdlong	arg03, arg04
2f0cc     01 18 06 F6 | 	mov	arg04, #1
2f0d0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2f0d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f0d8     1C 00 90 AD |  if_e	jmp	#LR__4710
2f0dc     04 4E 05 F1 | 	add	fp, #4
2f0e0     A7 FA 01 FB | 	rdlong	result1, fp
2f0e4     04 4E 85 F1 | 	sub	fp, #4
2f0e8     11 FA 05 F1 | 	add	result1, #17
2f0ec     FD 02 48 FC | 	wrbyte	#1, result1
2f0f0     01 FA 05 F6 | 	mov	result1, #1
2f0f4     A4 04 90 FD | 	jmp	#LR__4723
2f0f8                 | LR__4710
2f0f8     04 4E 05 F1 | 	add	fp, #4
2f0fc     A7 18 02 FB | 	rdlong	arg04, fp
2f100     0C FB 01 F6 | 	mov	result1, arg04
2f104     04 4E 85 F1 | 	sub	fp, #4
2f108     10 18 06 F1 | 	add	arg04, #16
2f10c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f110     7F 18 06 F5 | 	and	arg04, #127
2f114     10 FA 05 F1 | 	add	result1, #16
2f118     FD 18 42 FC | 	wrbyte	arg04, result1
2f11c                 | LR__4711
2f11c     18 4E 05 F1 | 	add	fp, #24
2f120     A7 12 02 FB | 	rdlong	arg01, fp
2f124     14 4E 85 F1 | 	sub	fp, #20
2f128     A7 14 02 FB | 	rdlong	arg02, fp
2f12c     04 4E 85 F1 | 	sub	fp, #4
2f130     18 14 06 F1 | 	add	arg02, #24
2f134     0A 15 02 FB | 	rdlong	arg02, arg02
2f138     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2f13c     20 4E 05 F1 | 	add	fp, #32
2f140     A7 FA 61 FC | 	wrlong	result1, fp
2f144     20 4E 85 F1 | 	sub	fp, #32
2f148     00 FA 0D F2 | 	cmp	result1, #0 wz
2f14c     1C 00 90 5D |  if_ne	jmp	#LR__4712
2f150     04 4E 05 F1 | 	add	fp, #4
2f154     A7 FA 01 FB | 	rdlong	result1, fp
2f158     04 4E 85 F1 | 	sub	fp, #4
2f15c     11 FA 05 F1 | 	add	result1, #17
2f160     FD 04 48 FC | 	wrbyte	#2, result1
2f164     02 FA 05 F6 | 	mov	result1, #2
2f168     30 04 90 FD | 	jmp	#LR__4723
2f16c                 | LR__4712
2f16c     20 4E 05 F1 | 	add	fp, #32
2f170     A7 FA 01 FB | 	rdlong	result1, fp
2f174     0C 4E 05 F1 | 	add	fp, #12
2f178     A7 26 02 FB | 	rdlong	local01, fp
2f17c     13 FB 01 F1 | 	add	result1, local01
2f180     0C 4E 85 F1 | 	sub	fp, #12
2f184     A7 FA 61 FC | 	wrlong	result1, fp
2f188     14 4E 85 F1 | 	sub	fp, #20
2f18c     A7 FA 01 FB | 	rdlong	result1, fp
2f190     09 FA 45 F0 | 	shr	result1, #9
2f194     1C 4E 05 F1 | 	add	fp, #28
2f198     A7 FA 61 FC | 	wrlong	result1, fp
2f19c     28 4E 85 F1 | 	sub	fp, #40
2f1a0     01 FA 15 F2 | 	cmp	result1, #1 wc
2f1a4     60 01 90 CD |  if_b	jmp	#LR__4716
2f1a8     2C 4E 05 F1 | 	add	fp, #44
2f1ac     A7 FA 01 FB | 	rdlong	result1, fp
2f1b0     04 4E 85 F1 | 	sub	fp, #4
2f1b4     A7 18 02 FB | 	rdlong	arg04, fp
2f1b8     0C FB 01 F1 | 	add	result1, arg04
2f1bc     10 4E 85 F1 | 	sub	fp, #16
2f1c0     A7 18 02 FB | 	rdlong	arg04, fp
2f1c4     18 4E 85 F1 | 	sub	fp, #24
2f1c8     0A 18 06 F1 | 	add	arg04, #10
2f1cc     0C 19 E2 FA | 	rdword	arg04, arg04
2f1d0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2f1d4     28 00 90 ED |  if_be	jmp	#LR__4713
2f1d8     18 4E 05 F1 | 	add	fp, #24
2f1dc     A7 FA 01 FB | 	rdlong	result1, fp
2f1e0     0A FA 05 F1 | 	add	result1, #10
2f1e4     FD FA E1 FA | 	rdword	result1, result1
2f1e8     14 4E 05 F1 | 	add	fp, #20
2f1ec     A7 18 02 FB | 	rdlong	arg04, fp
2f1f0     0C FB 81 F1 | 	sub	result1, arg04
2f1f4     04 4E 85 F1 | 	sub	fp, #4
2f1f8     A7 FA 61 FC | 	wrlong	result1, fp
2f1fc     28 4E 85 F1 | 	sub	fp, #40
2f200                 | LR__4713
2f200     18 4E 05 F1 | 	add	fp, #24
2f204     A7 18 02 FB | 	rdlong	arg04, fp
2f208     01 18 06 F1 | 	add	arg04, #1
2f20c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2f210     18 4E 05 F1 | 	add	fp, #24
2f214     A7 14 02 FB | 	rdlong	arg02, fp
2f218     10 4E 85 F1 | 	sub	fp, #16
2f21c     A7 16 02 FB | 	rdlong	arg03, fp
2f220     08 4E 05 F1 | 	add	fp, #8
2f224     A7 18 02 FB | 	rdlong	arg04, fp
2f228     28 4E 85 F1 | 	sub	fp, #40
2f22c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2f230     00 FA 0D F2 | 	cmp	result1, #0 wz
2f234     1C 00 90 AD |  if_e	jmp	#LR__4714
2f238     04 4E 05 F1 | 	add	fp, #4
2f23c     A7 26 02 FB | 	rdlong	local01, fp
2f240     04 4E 85 F1 | 	sub	fp, #4
2f244     11 26 06 F1 | 	add	local01, #17
2f248     13 03 48 FC | 	wrbyte	#1, local01
2f24c     01 FA 05 F6 | 	mov	result1, #1
2f250     48 03 90 FD | 	jmp	#LR__4723
2f254                 | LR__4714
2f254     04 4E 05 F1 | 	add	fp, #4
2f258     A7 FA 01 FB | 	rdlong	result1, fp
2f25c     1C FA 05 F1 | 	add	result1, #28
2f260     FD FA 01 FB | 	rdlong	result1, result1
2f264     1C 4E 05 F1 | 	add	fp, #28
2f268     A7 28 02 FB | 	rdlong	local02, fp
2f26c     14 FB 81 F1 | 	sub	result1, local02
2f270     08 4E 05 F1 | 	add	fp, #8
2f274     A7 18 02 FB | 	rdlong	arg04, fp
2f278     28 4E 85 F1 | 	sub	fp, #40
2f27c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2f280     68 00 90 3D |  if_ae	jmp	#LR__4715
2f284     04 4E 05 F1 | 	add	fp, #4
2f288     A7 12 02 FB | 	rdlong	arg01, fp
2f28c     28 12 06 F1 | 	add	arg01, #40
2f290     2C 4E 05 F1 | 	add	fp, #44
2f294     A7 14 02 FB | 	rdlong	arg02, fp
2f298     2C 4E 85 F1 | 	sub	fp, #44
2f29c     A7 FA 01 FB | 	rdlong	result1, fp
2f2a0     1C FA 05 F1 | 	add	result1, #28
2f2a4     FD 2A 02 FB | 	rdlong	local03, result1
2f2a8     1C 4E 05 F1 | 	add	fp, #28
2f2ac     A7 18 02 FB | 	rdlong	arg04, fp
2f2b0     20 4E 85 F1 | 	sub	fp, #32
2f2b4     0C 2B 82 F1 | 	sub	local03, arg04
2f2b8     09 2A 66 F0 | 	shl	local03, #9
2f2bc     15 15 02 F1 | 	add	arg02, local03
2f2c0     09 16 C6 F9 | 	decod	arg03, #9
2f2c4     EC 3B BF FD | 	call	#__system____builtin_memmove
2f2c8     04 4E 05 F1 | 	add	fp, #4
2f2cc     A7 18 02 FB | 	rdlong	arg04, fp
2f2d0     0C FB 01 F6 | 	mov	result1, arg04
2f2d4     04 4E 85 F1 | 	sub	fp, #4
2f2d8     10 18 06 F1 | 	add	arg04, #16
2f2dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f2e0     7F 18 06 F5 | 	and	arg04, #127
2f2e4     10 FA 05 F1 | 	add	result1, #16
2f2e8     FD 18 42 FC | 	wrbyte	arg04, result1
2f2ec                 | LR__4715
2f2ec     28 4E 05 F1 | 	add	fp, #40
2f2f0     A7 FA 01 FB | 	rdlong	result1, fp
2f2f4     09 FA 65 F0 | 	shl	result1, #9
2f2f8     04 4E 85 F1 | 	sub	fp, #4
2f2fc     A7 FA 61 FC | 	wrlong	result1, fp
2f300     24 4E 85 F1 | 	sub	fp, #36
2f304                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2f304                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2f304                 | ' 				}
2f304                 | ' 
2f304                 | ' 
2f304                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2f304                 | ' 				continue;
2f304     74 01 90 FD | 	jmp	#LR__4719
2f308                 | LR__4716
2f308     04 4E 05 F1 | 	add	fp, #4
2f30c     A7 28 02 FB | 	rdlong	local02, fp
2f310     1C 28 06 F1 | 	add	local02, #28
2f314     14 FB 01 FB | 	rdlong	result1, local02
2f318     1C 4E 05 F1 | 	add	fp, #28
2f31c     A7 28 02 FB | 	rdlong	local02, fp
2f320     20 4E 85 F1 | 	sub	fp, #32
2f324     14 FB 09 F2 | 	cmp	result1, local02 wz
2f328     90 00 90 AD |  if_e	jmp	#LR__4717
2f32c     04 4E 05 F1 | 	add	fp, #4
2f330     A7 FA 01 FB | 	rdlong	result1, fp
2f334     FD 2A 02 F6 | 	mov	local03, result1
2f338     04 4E 85 F1 | 	sub	fp, #4
2f33c     14 2A 06 F1 | 	add	local03, #20
2f340     15 2B 02 FB | 	rdlong	local03, local03
2f344     0C FA 05 F1 | 	add	result1, #12
2f348     FD 2C 02 FB | 	rdlong	local04, result1
2f34c     16 2F 02 F6 | 	mov	local05, local04
2f350     17 2B 12 F2 | 	cmp	local03, local05 wc
2f354     64 00 90 3D |  if_ae	jmp	#LR__4717
2f358     18 4E 05 F1 | 	add	fp, #24
2f35c     A7 18 02 FB | 	rdlong	arg04, fp
2f360     01 18 06 F1 | 	add	arg04, #1
2f364     0C 13 C2 FA | 	rdbyte	arg01, arg04
2f368     14 4E 85 F1 | 	sub	fp, #20
2f36c     A7 30 02 FB | 	rdlong	local06, fp
2f370     28 30 06 F1 | 	add	local06, #40
2f374     18 33 02 F6 | 	mov	local07, local06
2f378     1C 4E 05 F1 | 	add	fp, #28
2f37c     A7 34 02 FB | 	rdlong	local08, fp
2f380     20 4E 85 F1 | 	sub	fp, #32
2f384     01 36 06 F6 | 	mov	local09, #1
2f388     19 15 02 F6 | 	mov	arg02, local07
2f38c     1A 17 02 F6 | 	mov	arg03, local08
2f390     01 18 06 F6 | 	mov	arg04, #1
2f394     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2f398     FD 38 0A F6 | 	mov	local10, result1 wz
2f39c     1C 00 90 AD |  if_e	jmp	#LR__4717
2f3a0     04 4E 05 F1 | 	add	fp, #4
2f3a4     A7 38 02 FB | 	rdlong	local10, fp
2f3a8     04 4E 85 F1 | 	sub	fp, #4
2f3ac     11 38 06 F1 | 	add	local10, #17
2f3b0     1C 03 48 FC | 	wrbyte	#1, local10
2f3b4                 | ' 				fp->fptr < fp->obj.objsize &&
2f3b4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2f3b4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2f3b4     01 FA 05 F6 | 	mov	result1, #1
2f3b8     E0 01 90 FD | 	jmp	#LR__4723
2f3bc                 | LR__4717
2f3bc     04 4E 05 F1 | 	add	fp, #4
2f3c0     A7 18 02 FB | 	rdlong	arg04, fp
2f3c4     1C 4E 05 F1 | 	add	fp, #28
2f3c8     A7 FA 01 FB | 	rdlong	result1, fp
2f3cc     20 4E 85 F1 | 	sub	fp, #32
2f3d0     1C 18 06 F1 | 	add	arg04, #28
2f3d4     0C FB 61 FC | 	wrlong	result1, arg04
2f3d8                 | LR__4718
2f3d8     04 4E 05 F1 | 	add	fp, #4
2f3dc     A7 FA 01 FB | 	rdlong	result1, fp
2f3e0     14 FA 05 F1 | 	add	result1, #20
2f3e4     FD FA 01 FB | 	rdlong	result1, result1
2f3e8     FF FB 05 F5 | 	and	result1, #511
2f3ec     09 3A C6 F9 | 	decod	local11, #9
2f3f0     FD 3A 82 F1 | 	sub	local11, result1
2f3f4     20 4E 05 F1 | 	add	fp, #32
2f3f8     A7 3A 62 FC | 	wrlong	local11, fp
2f3fc     18 4E 85 F1 | 	sub	fp, #24
2f400     A7 FA 01 FB | 	rdlong	result1, fp
2f404     0C 4E 85 F1 | 	sub	fp, #12
2f408     FD 3A 1A F2 | 	cmp	local11, result1 wcz
2f40c     0C 4E 05 11 |  if_a	add	fp, #12
2f410     A7 3A 02 1B |  if_a	rdlong	local11, fp
2f414     18 4E 05 11 |  if_a	add	fp, #24
2f418     A7 3A 62 1C |  if_a	wrlong	local11, fp
2f41c     24 4E 85 11 |  if_a	sub	fp, #36
2f420     04 4E 05 F1 | 	add	fp, #4
2f424     A7 3A 02 FB | 	rdlong	local11, fp
2f428     1D 13 02 F6 | 	mov	arg01, local11
2f42c     28 12 06 F1 | 	add	arg01, #40
2f430     14 3A 06 F1 | 	add	local11, #20
2f434     1D 3B 02 FB | 	rdlong	local11, local11
2f438     FF 3B 06 F5 | 	and	local11, #511
2f43c     1D 13 02 F1 | 	add	arg01, local11
2f440     2C 4E 05 F1 | 	add	fp, #44
2f444     A7 14 02 FB | 	rdlong	arg02, fp
2f448     0C 4E 85 F1 | 	sub	fp, #12
2f44c     A7 16 02 FB | 	rdlong	arg03, fp
2f450     24 4E 85 F1 | 	sub	fp, #36
2f454     5C 3A BF FD | 	call	#__system____builtin_memmove
2f458     04 4E 05 F1 | 	add	fp, #4
2f45c     A7 FA 01 FB | 	rdlong	result1, fp
2f460     FD 3A 02 F6 | 	mov	local11, result1
2f464     04 4E 85 F1 | 	sub	fp, #4
2f468     10 FA 05 F1 | 	add	result1, #16
2f46c     FD FA C1 FA | 	rdbyte	result1, result1
2f470     80 FA 45 F5 | 	or	result1, #128
2f474     10 3A 06 F1 | 	add	local11, #16
2f478     1D FB 41 FC | 	wrbyte	result1, local11
2f47c                 | LR__4719
2f47c     0C 4E 05 F1 | 	add	fp, #12
2f480     A7 3A 02 FB | 	rdlong	local11, fp
2f484     18 4E 05 F1 | 	add	fp, #24
2f488     A7 FA 01 FB | 	rdlong	result1, fp
2f48c     FD 3A 82 F1 | 	sub	local11, result1
2f490     18 4E 85 F1 | 	sub	fp, #24
2f494     A7 3A 62 FC | 	wrlong	local11, fp
2f498     04 4E 05 F1 | 	add	fp, #4
2f49c     A7 3C 02 FB | 	rdlong	local12, fp
2f4a0     1E 3B 02 FB | 	rdlong	local11, local12
2f4a4     14 4E 05 F1 | 	add	fp, #20
2f4a8     A7 3E 02 FB | 	rdlong	local13, fp
2f4ac     1F 3B 02 F1 | 	add	local11, local13
2f4b0     1E 3B 62 FC | 	wrlong	local11, local12
2f4b4     0C 4E 05 F1 | 	add	fp, #12
2f4b8     A7 3A 02 FB | 	rdlong	local11, fp
2f4bc     0C 4E 85 F1 | 	sub	fp, #12
2f4c0     A7 40 02 FB | 	rdlong	local14, fp
2f4c4     20 3B 02 F1 | 	add	local11, local14
2f4c8     0C 4E 05 F1 | 	add	fp, #12
2f4cc     A7 3A 62 FC | 	wrlong	local11, fp
2f4d0     2C 4E 85 F1 | 	sub	fp, #44
2f4d4     A7 42 02 FB | 	rdlong	local15, fp
2f4d8     21 3B 02 F6 | 	mov	local11, local15
2f4dc     14 42 06 F1 | 	add	local15, #20
2f4e0     21 43 02 FB | 	rdlong	local15, local15
2f4e4     20 4E 05 F1 | 	add	fp, #32
2f4e8     A7 44 02 FB | 	rdlong	local16, fp
2f4ec     22 43 02 F1 | 	add	local15, local16
2f4f0     14 3A 06 F1 | 	add	local11, #20
2f4f4     1D 43 62 FC | 	wrlong	local15, local11
2f4f8     20 4E 85 F1 | 	sub	fp, #32
2f4fc     A7 46 02 FB | 	rdlong	local17, fp
2f500     23 3B 02 F6 | 	mov	local11, local17
2f504     23 49 02 F6 | 	mov	local18, local17
2f508     04 4E 85 F1 | 	sub	fp, #4
2f50c     14 46 06 F1 | 	add	local17, #20
2f510     23 4B 02 FB | 	rdlong	local19, local17
2f514     0C 48 06 F1 | 	add	local18, #12
2f518     24 4D 02 FB | 	rdlong	local20, local18
2f51c     26 4B 1A F2 | 	cmp	local19, local20 wcz
2f520     24 00 90 ED |  if_be	jmp	#LR__4720
2f524     04 4E 05 F1 | 	add	fp, #4
2f528     A7 2E 02 FB | 	rdlong	local05, fp
2f52c     04 4E 85 F1 | 	sub	fp, #4
2f530     17 2B 02 F6 | 	mov	local03, local05
2f534     14 2A 06 F1 | 	add	local03, #20
2f538     15 2D 02 FB | 	rdlong	local04, local03
2f53c     14 2A 86 F1 | 	sub	local03, #20
2f540     16 4F 02 F6 | 	mov	local21, local04
2f544     20 00 90 FD | 	jmp	#LR__4721
2f548                 | LR__4720
2f548     04 4E 05 F1 | 	add	fp, #4
2f54c     A7 32 02 FB | 	rdlong	local07, fp
2f550     04 4E 85 F1 | 	sub	fp, #4
2f554     19 39 02 F6 | 	mov	local10, local07
2f558     0C 38 06 F1 | 	add	local10, #12
2f55c     1C 35 02 FB | 	rdlong	local08, local10
2f560     0C 38 86 F1 | 	sub	local10, #12
2f564     1A 4F 02 F6 | 	mov	local21, local08
2f568                 | LR__4721
2f568     0C 3A 06 F1 | 	add	local11, #12
2f56c     1D 4F 62 FC | 	wrlong	local21, local11
2f570     5C F9 9F FD | 	jmp	#LR__4703
2f574                 | LR__4722
2f574     04 4E 05 F1 | 	add	fp, #4
2f578     A7 3C 02 FB | 	rdlong	local12, fp
2f57c     1E 27 02 F6 | 	mov	local01, local12
2f580     04 4E 85 F1 | 	sub	fp, #4
2f584     10 3C 06 F1 | 	add	local12, #16
2f588     1E 3B C2 FA | 	rdbyte	local11, local12
2f58c     40 3A 46 F5 | 	or	local11, #64
2f590     10 26 06 F1 | 	add	local01, #16
2f594     13 3B 42 FC | 	wrbyte	local11, local01
2f598                 | ' 
2f598                 | ' 
2f598                 | ' 
2f598                 | ' 
2f598                 | ' 
2f598                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2f598                 | ' 		fp->flag |=  0x80 ;
2f598                 | ' 
2f598                 | ' 	}
2f598                 | ' 
2f598                 | ' 	fp->flag |=  0x40 ;
2f598                 | ' 
2f598                 | ' 	return FR_OK ;
2f598     00 FA 05 F6 | 	mov	result1, #0
2f59c                 | LR__4723
2f59c     A7 F0 03 F6 | 	mov	ptra, fp
2f5a0     B2 00 A0 FD | 	call	#popregs_
2f5a4                 | _fatfs_cc_f_write_ret
2f5a4     2D 00 64 FD | 	ret
2f5a8                 | 
2f5a8                 | _fatfs_cc_f_sync
2f5a8     00 4A 05 F6 | 	mov	COUNT_, #0
2f5ac     A8 00 A0 FD | 	call	#pushregs_
2f5b0     18 F0 07 F1 | 	add	ptra, #24
2f5b4     04 4E 05 F1 | 	add	fp, #4
2f5b8     A7 12 62 FC | 	wrlong	arg01, fp
2f5bc     08 4E 05 F1 | 	add	fp, #8
2f5c0     A7 14 02 F6 | 	mov	arg02, fp
2f5c4     0C 4E 85 F1 | 	sub	fp, #12
2f5c8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2f5cc     08 4E 05 F1 | 	add	fp, #8
2f5d0     A7 FA 61 FC | 	wrlong	result1, fp
2f5d4     08 4E 85 F1 | 	sub	fp, #8
2f5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5dc     C0 01 90 5D |  if_ne	jmp	#LR__4733
2f5e0     04 4E 05 F1 | 	add	fp, #4
2f5e4     A7 18 02 FB | 	rdlong	arg04, fp
2f5e8     04 4E 85 F1 | 	sub	fp, #4
2f5ec     10 18 06 F1 | 	add	arg04, #16
2f5f0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f5f4     40 18 CE F7 | 	test	arg04, #64 wz
2f5f8     A4 01 90 AD |  if_e	jmp	#LR__4732
2f5fc     04 4E 05 F1 | 	add	fp, #4
2f600     A7 18 02 FB | 	rdlong	arg04, fp
2f604     04 4E 85 F1 | 	sub	fp, #4
2f608     10 18 06 F1 | 	add	arg04, #16
2f60c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f610     80 18 CE F7 | 	test	arg04, #128 wz
2f614     64 00 90 AD |  if_e	jmp	#LR__4730
2f618     0C 4E 05 F1 | 	add	fp, #12
2f61c     A7 18 02 FB | 	rdlong	arg04, fp
2f620     01 18 06 F1 | 	add	arg04, #1
2f624     0C 13 C2 FA | 	rdbyte	arg01, arg04
2f628     08 4E 85 F1 | 	sub	fp, #8
2f62c     A7 18 02 FB | 	rdlong	arg04, fp
2f630     0C 15 02 F6 | 	mov	arg02, arg04
2f634     28 14 06 F1 | 	add	arg02, #40
2f638     04 4E 85 F1 | 	sub	fp, #4
2f63c     1C 18 06 F1 | 	add	arg04, #28
2f640     0C 17 02 FB | 	rdlong	arg03, arg04
2f644     01 18 06 F6 | 	mov	arg04, #1
2f648     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2f64c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f650     01 FA 05 56 |  if_ne	mov	result1, #1
2f654     54 01 90 5D |  if_ne	jmp	#LR__4734
2f658     04 4E 05 F1 | 	add	fp, #4
2f65c     A7 18 02 FB | 	rdlong	arg04, fp
2f660     0C 17 02 F6 | 	mov	arg03, arg04
2f664     04 4E 85 F1 | 	sub	fp, #4
2f668     10 18 06 F1 | 	add	arg04, #16
2f66c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f670     7F 18 06 F5 | 	and	arg04, #127
2f674     10 16 06 F1 | 	add	arg03, #16
2f678     0B 19 42 FC | 	wrbyte	arg04, arg03
2f67c                 | LR__4730
2f67c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2f680     10 4E 05 F1 | 	add	fp, #16
2f684     A7 FA 61 FC | 	wrlong	result1, fp
2f688     04 4E 85 F1 | 	sub	fp, #4
2f68c     A7 12 02 FB | 	rdlong	arg01, fp
2f690     08 4E 85 F1 | 	sub	fp, #8
2f694     A7 18 02 FB | 	rdlong	arg04, fp
2f698     04 4E 85 F1 | 	sub	fp, #4
2f69c     20 18 06 F1 | 	add	arg04, #32
2f6a0     0C 15 02 FB | 	rdlong	arg02, arg04
2f6a4     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2f6a8     08 4E 05 F1 | 	add	fp, #8
2f6ac     A7 FA 61 FC | 	wrlong	result1, fp
2f6b0     08 4E 85 F1 | 	sub	fp, #8
2f6b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6b8     E4 00 90 5D |  if_ne	jmp	#LR__4731
2f6bc     04 4E 05 F1 | 	add	fp, #4
2f6c0     A7 18 02 FB | 	rdlong	arg04, fp
2f6c4     24 18 06 F1 | 	add	arg04, #36
2f6c8     0C 19 02 FB | 	rdlong	arg04, arg04
2f6cc     10 4E 05 F1 | 	add	fp, #16
2f6d0     A7 18 62 FC | 	wrlong	arg04, fp
2f6d4     0C 17 02 F6 | 	mov	arg03, arg04
2f6d8     0B 16 06 F1 | 	add	arg03, #11
2f6dc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2f6e0     20 16 46 F5 | 	or	arg03, #32
2f6e4     0B 18 06 F1 | 	add	arg04, #11
2f6e8     0C 17 42 FC | 	wrbyte	arg03, arg04
2f6ec     10 4E 85 F1 | 	sub	fp, #16
2f6f0     A7 18 02 FB | 	rdlong	arg04, fp
2f6f4     0C 13 02 FB | 	rdlong	arg01, arg04
2f6f8     10 4E 05 F1 | 	add	fp, #16
2f6fc     A7 14 02 FB | 	rdlong	arg02, fp
2f700     14 4E 85 F1 | 	sub	fp, #20
2f704     08 18 06 F1 | 	add	arg04, #8
2f708     0C 17 02 FB | 	rdlong	arg03, arg04
2f70c     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2f710     14 4E 05 F1 | 	add	fp, #20
2f714     A7 12 02 FB | 	rdlong	arg01, fp
2f718     1C 12 06 F1 | 	add	arg01, #28
2f71c     10 4E 85 F1 | 	sub	fp, #16
2f720     A7 18 02 FB | 	rdlong	arg04, fp
2f724     0C 18 06 F1 | 	add	arg04, #12
2f728     0C 15 02 FB | 	rdlong	arg02, arg04
2f72c     09 15 62 FC | 	wrlong	arg02, arg01
2f730     10 4E 05 F1 | 	add	fp, #16
2f734     A7 12 02 FB | 	rdlong	arg01, fp
2f738     16 12 06 F1 | 	add	arg01, #22
2f73c     04 4E 85 F1 | 	sub	fp, #4
2f740     A7 14 02 FB | 	rdlong	arg02, fp
2f744     09 15 62 FC | 	wrlong	arg02, arg01
2f748     04 4E 05 F1 | 	add	fp, #4
2f74c     A7 12 02 FB | 	rdlong	arg01, fp
2f750     12 12 06 F1 | 	add	arg01, #18
2f754     09 01 58 FC | 	wrword	#0, arg01
2f758     08 4E 85 F1 | 	sub	fp, #8
2f75c     A7 18 02 FB | 	rdlong	arg04, fp
2f760     03 18 06 F1 | 	add	arg04, #3
2f764     0C 03 48 FC | 	wrbyte	#1, arg04
2f768     A7 12 02 FB | 	rdlong	arg01, fp
2f76c     0C 4E 85 F1 | 	sub	fp, #12
2f770     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2f774     08 4E 05 F1 | 	add	fp, #8
2f778     A7 FA 61 FC | 	wrlong	result1, fp
2f77c     04 4E 85 F1 | 	sub	fp, #4
2f780     A7 18 02 FB | 	rdlong	arg04, fp
2f784     0C 17 02 F6 | 	mov	arg03, arg04
2f788     04 4E 85 F1 | 	sub	fp, #4
2f78c     10 18 06 F1 | 	add	arg04, #16
2f790     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f794     BF 18 06 F5 | 	and	arg04, #191
2f798     10 16 06 F1 | 	add	arg03, #16
2f79c     0B 19 42 FC | 	wrbyte	arg04, arg03
2f7a0                 | LR__4731
2f7a0                 | LR__4732
2f7a0                 | LR__4733
2f7a0                 | ' 					dir = fp->dir_ptr;
2f7a0                 | ' 					dir[ 11 ] |=  0x20 ;
2f7a0                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2f7a0                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2f7a0                 | ' 					st_dword(dir +  22 , tm);
2f7a0                 | ' 					st_word(dir +  18 , 0);
2f7a0                 | ' 					fs->wflag = 1;
2f7a0                 | ' 					res = sync_fs(fs);
2f7a0                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2f7a0                 | ' 				}
2f7a0                 | ' 			}
2f7a0                 | ' 		}
2f7a0                 | ' 	}
2f7a0                 | ' 
2f7a0                 | ' 	return res ;
2f7a0     08 4E 05 F1 | 	add	fp, #8
2f7a4     A7 FA 01 FB | 	rdlong	result1, fp
2f7a8     08 4E 85 F1 | 	sub	fp, #8
2f7ac                 | LR__4734
2f7ac     A7 F0 03 F6 | 	mov	ptra, fp
2f7b0     B2 00 A0 FD | 	call	#popregs_
2f7b4                 | _fatfs_cc_f_sync_ret
2f7b4     2D 00 64 FD | 	ret
2f7b8                 | 
2f7b8                 | _fatfs_cc_f_close
2f7b8     01 4A 05 F6 | 	mov	COUNT_, #1
2f7bc     A8 00 A0 FD | 	call	#pushregs_
2f7c0     10 F0 07 F1 | 	add	ptra, #16
2f7c4     04 4E 05 F1 | 	add	fp, #4
2f7c8     A7 12 62 FC | 	wrlong	arg01, fp
2f7cc     04 4E 85 F1 | 	sub	fp, #4
2f7d0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2f7d4     08 4E 05 F1 | 	add	fp, #8
2f7d8     A7 FA 61 FC | 	wrlong	result1, fp
2f7dc     08 4E 85 F1 | 	sub	fp, #8
2f7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7e4     38 00 90 5D |  if_ne	jmp	#LR__4740
2f7e8     04 4E 05 F1 | 	add	fp, #4
2f7ec     A7 12 02 FB | 	rdlong	arg01, fp
2f7f0     08 4E 05 F1 | 	add	fp, #8
2f7f4     A7 14 02 F6 | 	mov	arg02, fp
2f7f8     0C 4E 85 F1 | 	sub	fp, #12
2f7fc     9C E6 BF FD | 	call	#_fatfs_cc_validate
2f800     08 4E 05 F1 | 	add	fp, #8
2f804     A7 FA 61 FC | 	wrlong	result1, fp
2f808     08 4E 85 F1 | 	sub	fp, #8
2f80c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f810     04 4E 05 A1 |  if_e	add	fp, #4
2f814     A7 26 02 AB |  if_e	rdlong	local01, fp
2f818     04 4E 85 A1 |  if_e	sub	fp, #4
2f81c     13 01 68 AC |  if_e	wrlong	#0, local01
2f820                 | LR__4740
2f820                 | ' 
2f820                 | ' 
2f820                 | ' 
2f820                 | ' 
2f820                 | ' 			fp->obj.fs = 0;
2f820                 | ' #line 4192 "ff.c"
2f820                 | ' 		}
2f820                 | ' 	}
2f820                 | ' 	return res;
2f820     08 4E 05 F1 | 	add	fp, #8
2f824     A7 FA 01 FB | 	rdlong	result1, fp
2f828     08 4E 85 F1 | 	sub	fp, #8
2f82c     A7 F0 03 F6 | 	mov	ptra, fp
2f830     B2 00 A0 FD | 	call	#popregs_
2f834                 | _fatfs_cc_f_close_ret
2f834     2D 00 64 FD | 	ret
2f838                 | 
2f838                 | _fatfs_cc_f_lseek
2f838     00 4A 05 F6 | 	mov	COUNT_, #0
2f83c     A8 00 A0 FD | 	call	#pushregs_
2f840     24 F0 07 F1 | 	add	ptra, #36
2f844     04 4E 05 F1 | 	add	fp, #4
2f848     A7 12 62 FC | 	wrlong	arg01, fp
2f84c     04 4E 05 F1 | 	add	fp, #4
2f850     A7 14 62 FC | 	wrlong	arg02, fp
2f854     04 4E 85 F1 | 	sub	fp, #4
2f858     A7 12 02 FB | 	rdlong	arg01, fp
2f85c     0C 4E 05 F1 | 	add	fp, #12
2f860     A7 14 02 F6 | 	mov	arg02, fp
2f864     10 4E 85 F1 | 	sub	fp, #16
2f868     30 E6 BF FD | 	call	#_fatfs_cc_validate
2f86c     0C 4E 05 F1 | 	add	fp, #12
2f870     A7 FA 61 FC | 	wrlong	result1, fp
2f874     0C 4E 85 F1 | 	sub	fp, #12
2f878     00 FA 0D F2 | 	cmp	result1, #0 wz
2f87c     1C 00 90 5D |  if_ne	jmp	#LR__4750
2f880     04 4E 05 F1 | 	add	fp, #4
2f884     A7 18 02 FB | 	rdlong	arg04, fp
2f888     11 18 06 F1 | 	add	arg04, #17
2f88c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f890     08 4E 05 F1 | 	add	fp, #8
2f894     A7 18 62 FC | 	wrlong	arg04, fp
2f898     0C 4E 85 F1 | 	sub	fp, #12
2f89c                 | LR__4750
2f89c     0C 4E 05 F1 | 	add	fp, #12
2f8a0     A7 18 0A FB | 	rdlong	arg04, fp wz
2f8a4     0C 4E 85 F1 | 	sub	fp, #12
2f8a8     0C 4E 05 51 |  if_ne	add	fp, #12
2f8ac     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2f8b0     0C 4E 85 51 |  if_ne	sub	fp, #12
2f8b4     40 06 90 5D |  if_ne	jmp	#LR__4773
2f8b8     04 4E 05 F1 | 	add	fp, #4
2f8bc     A7 18 02 FB | 	rdlong	arg04, fp
2f8c0     04 4E 05 F1 | 	add	fp, #4
2f8c4     A7 16 02 FB | 	rdlong	arg03, fp
2f8c8     08 4E 85 F1 | 	sub	fp, #8
2f8cc     0C 18 06 F1 | 	add	arg04, #12
2f8d0     0C 19 02 FB | 	rdlong	arg04, arg04
2f8d4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2f8d8     3C 00 90 ED |  if_be	jmp	#LR__4751
2f8dc     04 4E 05 F1 | 	add	fp, #4
2f8e0     A7 16 02 FB | 	rdlong	arg03, fp
2f8e4     04 4E 85 F1 | 	sub	fp, #4
2f8e8     10 16 06 F1 | 	add	arg03, #16
2f8ec     0B 17 C2 FA | 	rdbyte	arg03, arg03
2f8f0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2f8f4     02 16 CE F7 | 	test	arg03, #2 wz
2f8f8     1C 00 90 5D |  if_ne	jmp	#LR__4751
2f8fc     04 4E 05 F1 | 	add	fp, #4
2f900     A7 16 02 FB | 	rdlong	arg03, fp
2f904     0C 16 06 F1 | 	add	arg03, #12
2f908     0B 17 02 FB | 	rdlong	arg03, arg03
2f90c     04 4E 05 F1 | 	add	fp, #4
2f910     A7 16 62 FC | 	wrlong	arg03, fp
2f914     08 4E 85 F1 | 	sub	fp, #8
2f918                 | LR__4751
2f918     04 4E 05 F1 | 	add	fp, #4
2f91c     A7 16 02 FB | 	rdlong	arg03, fp
2f920     14 16 06 F1 | 	add	arg03, #20
2f924     0B 17 02 FB | 	rdlong	arg03, arg03
2f928     1C 4E 05 F1 | 	add	fp, #28
2f92c     A7 16 62 FC | 	wrlong	arg03, fp
2f930     1C 4E 85 F1 | 	sub	fp, #28
2f934     A7 16 02 FB | 	rdlong	arg03, fp
2f938     18 4E 05 F1 | 	add	fp, #24
2f93c     A7 00 68 FC | 	wrlong	#0, fp
2f940     14 16 06 F1 | 	add	arg03, #20
2f944     0B 01 68 FC | 	wrlong	#0, arg03
2f948     14 4E 85 F1 | 	sub	fp, #20
2f94c     A7 16 02 FB | 	rdlong	arg03, fp
2f950     08 4E 85 F1 | 	sub	fp, #8
2f954     01 16 16 F2 | 	cmp	arg03, #1 wc
2f958     E4 03 90 CD |  if_b	jmp	#LR__4767
2f95c     10 4E 05 F1 | 	add	fp, #16
2f960     A7 16 02 FB | 	rdlong	arg03, fp
2f964     0A 16 06 F1 | 	add	arg03, #10
2f968     0B 19 E2 FA | 	rdword	arg04, arg03
2f96c     09 18 66 F0 | 	shl	arg04, #9
2f970     08 4E 05 F1 | 	add	fp, #8
2f974     A7 18 62 FC | 	wrlong	arg04, fp
2f978     08 4E 05 F1 | 	add	fp, #8
2f97c     A7 18 02 FB | 	rdlong	arg04, fp
2f980     20 4E 85 F1 | 	sub	fp, #32
2f984     01 18 16 F2 | 	cmp	arg04, #1 wc
2f988     AC 00 90 CD |  if_b	jmp	#LR__4752
2f98c     08 4E 05 F1 | 	add	fp, #8
2f990     A7 18 02 FB | 	rdlong	arg04, fp
2f994     01 18 86 F1 | 	sub	arg04, #1
2f998     10 4E 05 F1 | 	add	fp, #16
2f99c     A7 16 02 FB | 	rdlong	arg03, fp
2f9a0     0B 19 12 FD | 	qdiv	arg04, arg03
2f9a4     08 4E 05 F1 | 	add	fp, #8
2f9a8     A7 FA 01 FB | 	rdlong	result1, fp
2f9ac     01 FA 85 F1 | 	sub	result1, #1
2f9b0     18 18 62 FD | 	getqx	arg04
2f9b4     0B FB 11 FD | 	qdiv	result1, arg03
2f9b8     20 4E 85 F1 | 	sub	fp, #32
2f9bc     18 16 62 FD | 	getqx	arg03
2f9c0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2f9c4     70 00 90 CD |  if_b	jmp	#LR__4752
2f9c8     04 4E 05 F1 | 	add	fp, #4
2f9cc     A7 16 02 FB | 	rdlong	arg03, fp
2f9d0     1C 4E 05 F1 | 	add	fp, #28
2f9d4     A7 FA 01 FB | 	rdlong	result1, fp
2f9d8     01 FA 85 F1 | 	sub	result1, #1
2f9dc     08 4E 85 F1 | 	sub	fp, #8
2f9e0     A7 18 02 FB | 	rdlong	arg04, fp
2f9e4     01 18 86 F1 | 	sub	arg04, #1
2f9e8     0C FB 21 F5 | 	andn	result1, arg04
2f9ec     14 16 06 F1 | 	add	arg03, #20
2f9f0     0B FB 61 FC | 	wrlong	result1, arg03
2f9f4     10 4E 85 F1 | 	sub	fp, #16
2f9f8     A7 16 02 FB | 	rdlong	arg03, fp
2f9fc     04 4E 85 F1 | 	sub	fp, #4
2fa00     A7 18 02 FB | 	rdlong	arg04, fp
2fa04     14 18 06 F1 | 	add	arg04, #20
2fa08     0C 19 02 FB | 	rdlong	arg04, arg04
2fa0c     0C 17 82 F1 | 	sub	arg03, arg04
2fa10     04 4E 05 F1 | 	add	fp, #4
2fa14     A7 16 62 FC | 	wrlong	arg03, fp
2fa18     04 4E 85 F1 | 	sub	fp, #4
2fa1c     A7 16 02 FB | 	rdlong	arg03, fp
2fa20     18 16 06 F1 | 	add	arg03, #24
2fa24     0B 17 02 FB | 	rdlong	arg03, arg03
2fa28     10 4E 05 F1 | 	add	fp, #16
2fa2c     A7 16 62 FC | 	wrlong	arg03, fp
2fa30     14 4E 85 F1 | 	sub	fp, #20
2fa34     D0 00 90 FD | 	jmp	#LR__4756
2fa38                 | LR__4752
2fa38     04 4E 05 F1 | 	add	fp, #4
2fa3c     A7 16 02 FB | 	rdlong	arg03, fp
2fa40     08 16 06 F1 | 	add	arg03, #8
2fa44     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2fa48     10 4E 05 F1 | 	add	fp, #16
2fa4c     A7 16 62 FC | 	wrlong	arg03, fp
2fa50     14 4E 85 F1 | 	sub	fp, #20
2fa54     94 00 90 5D |  if_ne	jmp	#LR__4755
2fa58     04 4E 05 F1 | 	add	fp, #4
2fa5c     A7 12 02 FB | 	rdlong	arg01, fp
2fa60     04 4E 85 F1 | 	sub	fp, #4
2fa64     00 14 06 F6 | 	mov	arg02, #0
2fa68     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2fa6c     14 4E 05 F1 | 	add	fp, #20
2fa70     A7 FA 61 FC | 	wrlong	result1, fp
2fa74     14 4E 85 F1 | 	sub	fp, #20
2fa78     01 FA 0D F2 | 	cmp	result1, #1 wz
2fa7c     1C 00 90 5D |  if_ne	jmp	#LR__4753
2fa80     04 4E 05 F1 | 	add	fp, #4
2fa84     A7 16 02 FB | 	rdlong	arg03, fp
2fa88     04 4E 85 F1 | 	sub	fp, #4
2fa8c     11 16 06 F1 | 	add	arg03, #17
2fa90     0B 05 48 FC | 	wrbyte	#2, arg03
2fa94     02 FA 05 F6 | 	mov	result1, #2
2fa98     5C 04 90 FD | 	jmp	#LR__4773
2fa9c                 | LR__4753
2fa9c     14 4E 05 F1 | 	add	fp, #20
2faa0     A7 FA 01 FB | 	rdlong	result1, fp
2faa4     14 4E 85 F1 | 	sub	fp, #20
2faa8     FF FF 7F FF 
2faac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2fab0     1C 00 90 5D |  if_ne	jmp	#LR__4754
2fab4     04 4E 05 F1 | 	add	fp, #4
2fab8     A7 16 02 FB | 	rdlong	arg03, fp
2fabc     04 4E 85 F1 | 	sub	fp, #4
2fac0     11 16 06 F1 | 	add	arg03, #17
2fac4     0B 03 48 FC | 	wrbyte	#1, arg03
2fac8     01 FA 05 F6 | 	mov	result1, #1
2facc     28 04 90 FD | 	jmp	#LR__4773
2fad0                 | LR__4754
2fad0     04 4E 05 F1 | 	add	fp, #4
2fad4     A7 16 02 FB | 	rdlong	arg03, fp
2fad8     10 4E 05 F1 | 	add	fp, #16
2fadc     A7 18 02 FB | 	rdlong	arg04, fp
2fae0     14 4E 85 F1 | 	sub	fp, #20
2fae4     08 16 06 F1 | 	add	arg03, #8
2fae8     0B 19 62 FC | 	wrlong	arg04, arg03
2faec                 | LR__4755
2faec     04 4E 05 F1 | 	add	fp, #4
2faf0     A7 16 02 FB | 	rdlong	arg03, fp
2faf4     10 4E 05 F1 | 	add	fp, #16
2faf8     A7 18 02 FB | 	rdlong	arg04, fp
2fafc     14 4E 85 F1 | 	sub	fp, #20
2fb00     18 16 06 F1 | 	add	arg03, #24
2fb04     0B 19 62 FC | 	wrlong	arg04, arg03
2fb08                 | LR__4756
2fb08     14 4E 05 F1 | 	add	fp, #20
2fb0c     A7 16 0A FB | 	rdlong	arg03, fp wz
2fb10     14 4E 85 F1 | 	sub	fp, #20
2fb14     28 02 90 AD |  if_e	jmp	#LR__4766
2fb18                 | ' 				while (ofs > bcs) {
2fb18                 | LR__4757
2fb18     08 4E 05 F1 | 	add	fp, #8
2fb1c     A7 18 02 FB | 	rdlong	arg04, fp
2fb20     10 4E 05 F1 | 	add	fp, #16
2fb24     A7 16 02 FB | 	rdlong	arg03, fp
2fb28     18 4E 85 F1 | 	sub	fp, #24
2fb2c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2fb30     68 01 90 ED |  if_be	jmp	#LR__4763
2fb34     08 4E 05 F1 | 	add	fp, #8
2fb38     A7 18 02 FB | 	rdlong	arg04, fp
2fb3c     10 4E 05 F1 | 	add	fp, #16
2fb40     A7 16 02 FB | 	rdlong	arg03, fp
2fb44     0B 19 82 F1 | 	sub	arg04, arg03
2fb48     10 4E 85 F1 | 	sub	fp, #16
2fb4c     A7 18 62 FC | 	wrlong	arg04, fp
2fb50     04 4E 85 F1 | 	sub	fp, #4
2fb54     A7 18 02 FB | 	rdlong	arg04, fp
2fb58     0C FB 01 F6 | 	mov	result1, arg04
2fb5c     14 18 06 F1 | 	add	arg04, #20
2fb60     0C 19 02 FB | 	rdlong	arg04, arg04
2fb64     14 4E 05 F1 | 	add	fp, #20
2fb68     A7 16 02 FB | 	rdlong	arg03, fp
2fb6c     0B 19 02 F1 | 	add	arg04, arg03
2fb70     14 FA 05 F1 | 	add	result1, #20
2fb74     FD 18 62 FC | 	wrlong	arg04, result1
2fb78     14 4E 85 F1 | 	sub	fp, #20
2fb7c     A7 16 02 FB | 	rdlong	arg03, fp
2fb80     04 4E 85 F1 | 	sub	fp, #4
2fb84     10 16 06 F1 | 	add	arg03, #16
2fb88     0B 17 C2 FA | 	rdbyte	arg03, arg03
2fb8c     02 16 CE F7 | 	test	arg03, #2 wz
2fb90     3C 00 90 AD |  if_e	jmp	#LR__4758
2fb94     04 4E 05 F1 | 	add	fp, #4
2fb98     A7 12 02 FB | 	rdlong	arg01, fp
2fb9c     10 4E 05 F1 | 	add	fp, #16
2fba0     A7 14 02 FB | 	rdlong	arg02, fp
2fba4     14 4E 85 F1 | 	sub	fp, #20
2fba8     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2fbac     14 4E 05 F1 | 	add	fp, #20
2fbb0     A7 FA 61 FC | 	wrlong	result1, fp
2fbb4     00 FA 4D F2 | 	cmps	result1, #0 wz
2fbb8     14 4E 85 F1 | 	sub	fp, #20
2fbbc     08 4E 05 A1 |  if_e	add	fp, #8
2fbc0     A7 00 68 AC |  if_e	wrlong	#0, fp
2fbc4     08 4E 85 A1 |  if_e	sub	fp, #8
2fbc8                 | ' 							ofs = 0; break;
2fbc8     D0 00 90 AD |  if_e	jmp	#LR__4763
2fbcc     24 00 90 FD | 	jmp	#LR__4759
2fbd0                 | LR__4758
2fbd0     04 4E 05 F1 | 	add	fp, #4
2fbd4     A7 12 02 FB | 	rdlong	arg01, fp
2fbd8     10 4E 05 F1 | 	add	fp, #16
2fbdc     A7 14 02 FB | 	rdlong	arg02, fp
2fbe0     14 4E 85 F1 | 	sub	fp, #20
2fbe4     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2fbe8     14 4E 05 F1 | 	add	fp, #20
2fbec     A7 FA 61 FC | 	wrlong	result1, fp
2fbf0     14 4E 85 F1 | 	sub	fp, #20
2fbf4                 | LR__4759
2fbf4     14 4E 05 F1 | 	add	fp, #20
2fbf8     A7 16 02 FB | 	rdlong	arg03, fp
2fbfc     14 4E 85 F1 | 	sub	fp, #20
2fc00     FF FF 7F FF 
2fc04     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2fc08     1C 00 90 5D |  if_ne	jmp	#LR__4760
2fc0c     04 4E 05 F1 | 	add	fp, #4
2fc10     A7 16 02 FB | 	rdlong	arg03, fp
2fc14     04 4E 85 F1 | 	sub	fp, #4
2fc18     11 16 06 F1 | 	add	arg03, #17
2fc1c     0B 03 48 FC | 	wrbyte	#1, arg03
2fc20     01 FA 05 F6 | 	mov	result1, #1
2fc24     D0 02 90 FD | 	jmp	#LR__4773
2fc28                 | LR__4760
2fc28     14 4E 05 F1 | 	add	fp, #20
2fc2c     A7 16 02 FB | 	rdlong	arg03, fp
2fc30     14 4E 85 F1 | 	sub	fp, #20
2fc34     02 16 16 F2 | 	cmp	arg03, #2 wc
2fc38     24 00 90 CD |  if_b	jmp	#LR__4761
2fc3c     10 4E 05 F1 | 	add	fp, #16
2fc40     A7 18 02 FB | 	rdlong	arg04, fp
2fc44     04 4E 05 F1 | 	add	fp, #4
2fc48     A7 16 02 FB | 	rdlong	arg03, fp
2fc4c     14 4E 85 F1 | 	sub	fp, #20
2fc50     18 18 06 F1 | 	add	arg04, #24
2fc54     0C 19 02 FB | 	rdlong	arg04, arg04
2fc58     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2fc5c     1C 00 90 CD |  if_b	jmp	#LR__4762
2fc60                 | LR__4761
2fc60     04 4E 05 F1 | 	add	fp, #4
2fc64     A7 16 02 FB | 	rdlong	arg03, fp
2fc68     04 4E 85 F1 | 	sub	fp, #4
2fc6c     11 16 06 F1 | 	add	arg03, #17
2fc70     0B 05 48 FC | 	wrbyte	#2, arg03
2fc74     02 FA 05 F6 | 	mov	result1, #2
2fc78     7C 02 90 FD | 	jmp	#LR__4773
2fc7c                 | LR__4762
2fc7c     04 4E 05 F1 | 	add	fp, #4
2fc80     A7 18 02 FB | 	rdlong	arg04, fp
2fc84     10 4E 05 F1 | 	add	fp, #16
2fc88     A7 16 02 FB | 	rdlong	arg03, fp
2fc8c     14 4E 85 F1 | 	sub	fp, #20
2fc90     18 18 06 F1 | 	add	arg04, #24
2fc94     0C 17 62 FC | 	wrlong	arg03, arg04
2fc98     7C FE 9F FD | 	jmp	#LR__4757
2fc9c                 | LR__4763
2fc9c     04 4E 05 F1 | 	add	fp, #4
2fca0     A7 16 02 FB | 	rdlong	arg03, fp
2fca4     0B 13 02 F6 | 	mov	arg01, arg03
2fca8     14 16 06 F1 | 	add	arg03, #20
2fcac     0B 15 02 FB | 	rdlong	arg02, arg03
2fcb0     04 4E 05 F1 | 	add	fp, #4
2fcb4     A7 16 02 FB | 	rdlong	arg03, fp
2fcb8     0B 15 02 F1 | 	add	arg02, arg03
2fcbc     14 12 06 F1 | 	add	arg01, #20
2fcc0     09 15 62 FC | 	wrlong	arg02, arg01
2fcc4     A7 16 02 FB | 	rdlong	arg03, fp
2fcc8     08 4E 85 F1 | 	sub	fp, #8
2fccc     FF 17 CE F7 | 	test	arg03, #511 wz
2fcd0     6C 00 90 AD |  if_e	jmp	#LR__4765
2fcd4     10 4E 05 F1 | 	add	fp, #16
2fcd8     A7 12 02 FB | 	rdlong	arg01, fp
2fcdc     04 4E 05 F1 | 	add	fp, #4
2fce0     A7 14 02 FB | 	rdlong	arg02, fp
2fce4     14 4E 85 F1 | 	sub	fp, #20
2fce8     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2fcec     1C 4E 05 F1 | 	add	fp, #28
2fcf0     A7 FA 61 FC | 	wrlong	result1, fp
2fcf4     1C 4E 85 F1 | 	sub	fp, #28
2fcf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2fcfc     1C 00 90 5D |  if_ne	jmp	#LR__4764
2fd00     04 4E 05 F1 | 	add	fp, #4
2fd04     A7 16 02 FB | 	rdlong	arg03, fp
2fd08     04 4E 85 F1 | 	sub	fp, #4
2fd0c     11 16 06 F1 | 	add	arg03, #17
2fd10     0B 05 48 FC | 	wrbyte	#2, arg03
2fd14     02 FA 05 F6 | 	mov	result1, #2
2fd18     DC 01 90 FD | 	jmp	#LR__4773
2fd1c                 | LR__4764
2fd1c     1C 4E 05 F1 | 	add	fp, #28
2fd20     A7 18 02 FB | 	rdlong	arg04, fp
2fd24     14 4E 85 F1 | 	sub	fp, #20
2fd28     A7 16 02 FB | 	rdlong	arg03, fp
2fd2c     09 16 46 F0 | 	shr	arg03, #9
2fd30     0B 19 02 F1 | 	add	arg04, arg03
2fd34     14 4E 05 F1 | 	add	fp, #20
2fd38     A7 18 62 FC | 	wrlong	arg04, fp
2fd3c     1C 4E 85 F1 | 	sub	fp, #28
2fd40                 | LR__4765
2fd40                 | LR__4766
2fd40                 | LR__4767
2fd40     04 4E 05 F1 | 	add	fp, #4
2fd44     A7 18 02 FB | 	rdlong	arg04, fp
2fd48     0C 17 02 F6 | 	mov	arg03, arg04
2fd4c     04 4E 85 F1 | 	sub	fp, #4
2fd50     14 16 06 F1 | 	add	arg03, #20
2fd54     0B 17 02 FB | 	rdlong	arg03, arg03
2fd58     0C 18 06 F1 | 	add	arg04, #12
2fd5c     0C 19 02 FB | 	rdlong	arg04, arg04
2fd60     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2fd64     3C 00 90 ED |  if_be	jmp	#LR__4768
2fd68     04 4E 05 F1 | 	add	fp, #4
2fd6c     A7 18 02 FB | 	rdlong	arg04, fp
2fd70     0C 17 02 F6 | 	mov	arg03, arg04
2fd74     14 18 06 F1 | 	add	arg04, #20
2fd78     0C 19 02 FB | 	rdlong	arg04, arg04
2fd7c     0C 16 06 F1 | 	add	arg03, #12
2fd80     0B 19 62 FC | 	wrlong	arg04, arg03
2fd84     A7 18 02 FB | 	rdlong	arg04, fp
2fd88     0C 17 02 F6 | 	mov	arg03, arg04
2fd8c     04 4E 85 F1 | 	sub	fp, #4
2fd90     10 18 06 F1 | 	add	arg04, #16
2fd94     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fd98     40 18 46 F5 | 	or	arg04, #64
2fd9c     10 16 06 F1 | 	add	arg03, #16
2fda0     0B 19 42 FC | 	wrbyte	arg04, arg03
2fda4                 | LR__4768
2fda4     04 4E 05 F1 | 	add	fp, #4
2fda8     A7 16 02 FB | 	rdlong	arg03, fp
2fdac     04 4E 85 F1 | 	sub	fp, #4
2fdb0     14 16 06 F1 | 	add	arg03, #20
2fdb4     0B 17 02 FB | 	rdlong	arg03, arg03
2fdb8     FF 17 CE F7 | 	test	arg03, #511 wz
2fdbc     2C 01 90 AD |  if_e	jmp	#LR__4772
2fdc0     04 4E 05 F1 | 	add	fp, #4
2fdc4     A7 18 02 FB | 	rdlong	arg04, fp
2fdc8     18 4E 05 F1 | 	add	fp, #24
2fdcc     A7 16 02 FB | 	rdlong	arg03, fp
2fdd0     1C 4E 85 F1 | 	sub	fp, #28
2fdd4     1C 18 06 F1 | 	add	arg04, #28
2fdd8     0C 19 02 FB | 	rdlong	arg04, arg04
2fddc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2fde0     08 01 90 AD |  if_e	jmp	#LR__4772
2fde4     04 4E 05 F1 | 	add	fp, #4
2fde8     A7 16 02 FB | 	rdlong	arg03, fp
2fdec     04 4E 85 F1 | 	sub	fp, #4
2fdf0     10 16 06 F1 | 	add	arg03, #16
2fdf4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2fdf8     80 16 CE F7 | 	test	arg03, #128 wz
2fdfc     7C 00 90 AD |  if_e	jmp	#LR__4770
2fe00     10 4E 05 F1 | 	add	fp, #16
2fe04     A7 16 02 FB | 	rdlong	arg03, fp
2fe08     01 16 06 F1 | 	add	arg03, #1
2fe0c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2fe10     0C 4E 85 F1 | 	sub	fp, #12
2fe14     A7 16 02 FB | 	rdlong	arg03, fp
2fe18     0B 15 02 F6 | 	mov	arg02, arg03
2fe1c     28 14 06 F1 | 	add	arg02, #40
2fe20     04 4E 85 F1 | 	sub	fp, #4
2fe24     1C 16 06 F1 | 	add	arg03, #28
2fe28     0B 17 02 FB | 	rdlong	arg03, arg03
2fe2c     01 18 06 F6 | 	mov	arg04, #1
2fe30     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2fe34     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe38     1C 00 90 AD |  if_e	jmp	#LR__4769
2fe3c     04 4E 05 F1 | 	add	fp, #4
2fe40     A7 16 02 FB | 	rdlong	arg03, fp
2fe44     04 4E 85 F1 | 	sub	fp, #4
2fe48     11 16 06 F1 | 	add	arg03, #17
2fe4c     0B 03 48 FC | 	wrbyte	#1, arg03
2fe50     01 FA 05 F6 | 	mov	result1, #1
2fe54     A0 00 90 FD | 	jmp	#LR__4773
2fe58                 | LR__4769
2fe58     04 4E 05 F1 | 	add	fp, #4
2fe5c     A7 18 02 FB | 	rdlong	arg04, fp
2fe60     0C 17 02 F6 | 	mov	arg03, arg04
2fe64     04 4E 85 F1 | 	sub	fp, #4
2fe68     10 18 06 F1 | 	add	arg04, #16
2fe6c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fe70     7F 18 06 F5 | 	and	arg04, #127
2fe74     10 16 06 F1 | 	add	arg03, #16
2fe78     0B 19 42 FC | 	wrbyte	arg04, arg03
2fe7c                 | LR__4770
2fe7c     10 4E 05 F1 | 	add	fp, #16
2fe80     A7 16 02 FB | 	rdlong	arg03, fp
2fe84     01 16 06 F1 | 	add	arg03, #1
2fe88     0B 13 C2 FA | 	rdbyte	arg01, arg03
2fe8c     0C 4E 85 F1 | 	sub	fp, #12
2fe90     A7 14 02 FB | 	rdlong	arg02, fp
2fe94     28 14 06 F1 | 	add	arg02, #40
2fe98     18 4E 05 F1 | 	add	fp, #24
2fe9c     A7 16 02 FB | 	rdlong	arg03, fp
2fea0     1C 4E 85 F1 | 	sub	fp, #28
2fea4     01 18 06 F6 | 	mov	arg04, #1
2fea8     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2feac     00 FA 0D F2 | 	cmp	result1, #0 wz
2feb0     1C 00 90 AD |  if_e	jmp	#LR__4771
2feb4     04 4E 05 F1 | 	add	fp, #4
2feb8     A7 16 02 FB | 	rdlong	arg03, fp
2febc     04 4E 85 F1 | 	sub	fp, #4
2fec0     11 16 06 F1 | 	add	arg03, #17
2fec4     0B 03 48 FC | 	wrbyte	#1, arg03
2fec8     01 FA 05 F6 | 	mov	result1, #1
2fecc     28 00 90 FD | 	jmp	#LR__4773
2fed0                 | LR__4771
2fed0     04 4E 05 F1 | 	add	fp, #4
2fed4     A7 18 02 FB | 	rdlong	arg04, fp
2fed8     18 4E 05 F1 | 	add	fp, #24
2fedc     A7 16 02 FB | 	rdlong	arg03, fp
2fee0     1C 4E 85 F1 | 	sub	fp, #28
2fee4     1C 18 06 F1 | 	add	arg04, #28
2fee8     0C 17 62 FC | 	wrlong	arg03, arg04
2feec                 | LR__4772
2feec                 | ' 
2feec                 | ' 			fp->sect = nsect;
2feec                 | ' 		}
2feec                 | ' 	}
2feec                 | ' 
2feec                 | ' 	return res ;
2feec     0C 4E 05 F1 | 	add	fp, #12
2fef0     A7 FA 01 FB | 	rdlong	result1, fp
2fef4     0C 4E 85 F1 | 	sub	fp, #12
2fef8                 | LR__4773
2fef8     A7 F0 03 F6 | 	mov	ptra, fp
2fefc     B2 00 A0 FD | 	call	#popregs_
2ff00                 | _fatfs_cc_f_lseek_ret
2ff00     2D 00 64 FD | 	ret
2ff04                 | 
2ff04                 | _fatfs_cc_f_opendir
2ff04     01 4A 05 F6 | 	mov	COUNT_, #1
2ff08     A8 00 A0 FD | 	call	#pushregs_
2ff0c     14 F0 07 F1 | 	add	ptra, #20
2ff10     04 4E 05 F1 | 	add	fp, #4
2ff14     A7 12 62 FC | 	wrlong	arg01, fp
2ff18     04 4E 05 F1 | 	add	fp, #4
2ff1c     A7 14 62 FC | 	wrlong	arg02, fp
2ff20     04 4E 85 F1 | 	sub	fp, #4
2ff24     A7 16 0A FB | 	rdlong	arg03, fp wz
2ff28     04 4E 85 F1 | 	sub	fp, #4
2ff2c     09 FA 05 A6 |  if_e	mov	result1, #9
2ff30     78 01 90 AD |  if_e	jmp	#LR__4786
2ff34     08 4E 05 F1 | 	add	fp, #8
2ff38     A7 12 02 F6 | 	mov	arg01, fp
2ff3c     08 4E 05 F1 | 	add	fp, #8
2ff40     A7 14 02 F6 | 	mov	arg02, fp
2ff44     10 4E 85 F1 | 	sub	fp, #16
2ff48     00 16 06 F6 | 	mov	arg03, #0
2ff4c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2ff50     0C 4E 05 F1 | 	add	fp, #12
2ff54     A7 FA 61 FC | 	wrlong	result1, fp
2ff58     0C 4E 85 F1 | 	sub	fp, #12
2ff5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff60     20 01 90 5D |  if_ne	jmp	#LR__4785
2ff64     04 4E 05 F1 | 	add	fp, #4
2ff68     A7 16 02 FB | 	rdlong	arg03, fp
2ff6c     0C 4E 05 F1 | 	add	fp, #12
2ff70     A7 FA 01 FB | 	rdlong	result1, fp
2ff74     0B FB 61 FC | 	wrlong	result1, arg03
2ff78     0C 4E 85 F1 | 	sub	fp, #12
2ff7c     A7 12 02 FB | 	rdlong	arg01, fp
2ff80     04 4E 05 F1 | 	add	fp, #4
2ff84     A7 14 02 FB | 	rdlong	arg02, fp
2ff88     08 4E 85 F1 | 	sub	fp, #8
2ff8c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2ff90     0C 4E 05 F1 | 	add	fp, #12
2ff94     A7 FA 61 FC | 	wrlong	result1, fp
2ff98     0C 4E 85 F1 | 	sub	fp, #12
2ff9c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ffa0     C4 00 90 5D |  if_ne	jmp	#LR__4784
2ffa4     04 4E 05 F1 | 	add	fp, #4
2ffa8     A7 16 02 FB | 	rdlong	arg03, fp
2ffac     04 4E 85 F1 | 	sub	fp, #4
2ffb0     2B 16 06 F1 | 	add	arg03, #43
2ffb4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ffb8     80 16 CE F7 | 	test	arg03, #128 wz
2ffbc     58 00 90 5D |  if_ne	jmp	#LR__4782
2ffc0     04 4E 05 F1 | 	add	fp, #4
2ffc4     A7 16 02 FB | 	rdlong	arg03, fp
2ffc8     04 4E 85 F1 | 	sub	fp, #4
2ffcc     06 16 06 F1 | 	add	arg03, #6
2ffd0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ffd4     10 16 CE F7 | 	test	arg03, #16 wz
2ffd8     30 00 90 AD |  if_e	jmp	#LR__4780
2ffdc     04 4E 05 F1 | 	add	fp, #4
2ffe0     A7 16 02 FB | 	rdlong	arg03, fp
2ffe4     0B 27 02 F6 | 	mov	local01, arg03
2ffe8     0C 4E 05 F1 | 	add	fp, #12
2ffec     A7 12 02 FB | 	rdlong	arg01, fp
2fff0     10 4E 85 F1 | 	sub	fp, #16
2fff4     1C 16 06 F1 | 	add	arg03, #28
2fff8     0B 15 02 FB | 	rdlong	arg02, arg03
2fffc     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
30000     08 26 06 F1 | 	add	local01, #8
30004     13 FB 61 FC | 	wrlong	result1, local01
30008     0C 00 90 FD | 	jmp	#LR__4781
3000c                 | LR__4780
3000c     0C 4E 05 F1 | 	add	fp, #12
30010     A7 0A 68 FC | 	wrlong	#5, fp
30014     0C 4E 85 F1 | 	sub	fp, #12
30018                 | LR__4781
30018                 | LR__4782
30018     0C 4E 05 F1 | 	add	fp, #12
3001c     A7 26 0A FB | 	rdlong	local01, fp wz
30020     0C 4E 85 F1 | 	sub	fp, #12
30024     40 00 90 5D |  if_ne	jmp	#LR__4783
30028     04 4E 05 F1 | 	add	fp, #4
3002c     A7 26 02 FB | 	rdlong	local01, fp
30030     0C 4E 05 F1 | 	add	fp, #12
30034     A7 16 02 FB | 	rdlong	arg03, fp
30038     06 16 06 F1 | 	add	arg03, #6
3003c     0B 17 E2 FA | 	rdword	arg03, arg03
30040     04 26 06 F1 | 	add	local01, #4
30044     13 17 52 FC | 	wrword	arg03, local01
30048     0C 4E 85 F1 | 	sub	fp, #12
3004c     A7 12 02 FB | 	rdlong	arg01, fp
30050     04 4E 85 F1 | 	sub	fp, #4
30054     00 14 06 F6 | 	mov	arg02, #0
30058     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
3005c     0C 4E 05 F1 | 	add	fp, #12
30060     A7 FA 61 FC | 	wrlong	result1, fp
30064     0C 4E 85 F1 | 	sub	fp, #12
30068                 | LR__4783
30068                 | LR__4784
30068     0C 4E 05 F1 | 	add	fp, #12
3006c     A7 26 02 FB | 	rdlong	local01, fp
30070     0C 4E 85 F1 | 	sub	fp, #12
30074     04 26 0E F2 | 	cmp	local01, #4 wz
30078     0C 4E 05 A1 |  if_e	add	fp, #12
3007c     A7 0A 68 AC |  if_e	wrlong	#5, fp
30080     0C 4E 85 A1 |  if_e	sub	fp, #12
30084                 | LR__4785
30084     0C 4E 05 F1 | 	add	fp, #12
30088     A7 26 0A FB | 	rdlong	local01, fp wz
3008c     0C 4E 85 F1 | 	sub	fp, #12
30090     04 4E 05 51 |  if_ne	add	fp, #4
30094     A7 26 02 5B |  if_ne	rdlong	local01, fp
30098     04 4E 85 51 |  if_ne	sub	fp, #4
3009c     13 01 68 5C |  if_ne	wrlong	#0, local01
300a0                 | ' 
300a0                 | ' 	return res ;
300a0     0C 4E 05 F1 | 	add	fp, #12
300a4     A7 FA 01 FB | 	rdlong	result1, fp
300a8     0C 4E 85 F1 | 	sub	fp, #12
300ac                 | LR__4786
300ac     A7 F0 03 F6 | 	mov	ptra, fp
300b0     B2 00 A0 FD | 	call	#popregs_
300b4                 | _fatfs_cc_f_opendir_ret
300b4     2D 00 64 FD | 	ret
300b8                 | 
300b8                 | _fatfs_cc_f_closedir
300b8     00 4A 05 F6 | 	mov	COUNT_, #0
300bc     A8 00 A0 FD | 	call	#pushregs_
300c0     10 F0 07 F1 | 	add	ptra, #16
300c4     04 4E 05 F1 | 	add	fp, #4
300c8     A7 12 62 FC | 	wrlong	arg01, fp
300cc     08 4E 05 F1 | 	add	fp, #8
300d0     A7 14 02 F6 | 	mov	arg02, fp
300d4     0C 4E 85 F1 | 	sub	fp, #12
300d8     C0 DD BF FD | 	call	#_fatfs_cc_validate
300dc     08 4E 05 F1 | 	add	fp, #8
300e0     A7 FA 61 FC | 	wrlong	result1, fp
300e4     08 4E 85 F1 | 	sub	fp, #8
300e8     00 FA 0D F2 | 	cmp	result1, #0 wz
300ec     04 4E 05 A1 |  if_e	add	fp, #4
300f0     A7 FA 01 AB |  if_e	rdlong	result1, fp
300f4     04 4E 85 A1 |  if_e	sub	fp, #4
300f8     FD 00 68 AC |  if_e	wrlong	#0, result1
300fc                 | ' 
300fc                 | ' 
300fc                 | ' 
300fc                 | ' 
300fc                 | ' 		dp->obj.fs = 0;
300fc                 | ' #line 4633 "ff.c"
300fc                 | ' 	}
300fc                 | ' 	return res;
300fc     08 4E 05 F1 | 	add	fp, #8
30100     A7 FA 01 FB | 	rdlong	result1, fp
30104     08 4E 85 F1 | 	sub	fp, #8
30108     A7 F0 03 F6 | 	mov	ptra, fp
3010c     B2 00 A0 FD | 	call	#popregs_
30110                 | _fatfs_cc_f_closedir_ret
30110     2D 00 64 FD | 	ret
30114                 | 
30114                 | _fatfs_cc_f_readdir
30114     00 4A 05 F6 | 	mov	COUNT_, #0
30118     A8 00 A0 FD | 	call	#pushregs_
3011c     14 F0 07 F1 | 	add	ptra, #20
30120     04 4E 05 F1 | 	add	fp, #4
30124     A7 12 62 FC | 	wrlong	arg01, fp
30128     04 4E 05 F1 | 	add	fp, #4
3012c     A7 14 62 FC | 	wrlong	arg02, fp
30130     04 4E 85 F1 | 	sub	fp, #4
30134     A7 12 02 FB | 	rdlong	arg01, fp
30138     0C 4E 05 F1 | 	add	fp, #12
3013c     A7 14 02 F6 | 	mov	arg02, fp
30140     10 4E 85 F1 | 	sub	fp, #16
30144     54 DD BF FD | 	call	#_fatfs_cc_validate
30148     0C 4E 05 F1 | 	add	fp, #12
3014c     A7 FA 61 FC | 	wrlong	result1, fp
30150     0C 4E 85 F1 | 	sub	fp, #12
30154     00 FA 0D F2 | 	cmp	result1, #0 wz
30158     BC 00 90 5D |  if_ne	jmp	#LR__4793
3015c     08 4E 05 F1 | 	add	fp, #8
30160     A7 FA 09 FB | 	rdlong	result1, fp wz
30164     08 4E 85 F1 | 	sub	fp, #8
30168     24 00 90 5D |  if_ne	jmp	#LR__4790
3016c     04 4E 05 F1 | 	add	fp, #4
30170     A7 12 02 FB | 	rdlong	arg01, fp
30174     04 4E 85 F1 | 	sub	fp, #4
30178     00 14 06 F6 | 	mov	arg02, #0
3017c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
30180     0C 4E 05 F1 | 	add	fp, #12
30184     A7 FA 61 FC | 	wrlong	result1, fp
30188     0C 4E 85 F1 | 	sub	fp, #12
3018c     88 00 90 FD | 	jmp	#LR__4792
30190                 | LR__4790
30190     04 4E 05 F1 | 	add	fp, #4
30194     A7 12 02 FB | 	rdlong	arg01, fp
30198     04 4E 85 F1 | 	sub	fp, #4
3019c     00 14 06 F6 | 	mov	arg02, #0
301a0     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
301a4     0C 4E 05 F1 | 	add	fp, #12
301a8     A7 FA 61 FC | 	wrlong	result1, fp
301ac     0C 4E 85 F1 | 	sub	fp, #12
301b0     04 FA 0D F2 | 	cmp	result1, #4 wz
301b4     0C 4E 05 A1 |  if_e	add	fp, #12
301b8     A7 00 68 AC |  if_e	wrlong	#0, fp
301bc     0C 4E 85 A1 |  if_e	sub	fp, #12
301c0     0C 4E 05 F1 | 	add	fp, #12
301c4     A7 FA 09 FB | 	rdlong	result1, fp wz
301c8     0C 4E 85 F1 | 	sub	fp, #12
301cc     48 00 90 5D |  if_ne	jmp	#LR__4791
301d0     04 4E 05 F1 | 	add	fp, #4
301d4     A7 12 02 FB | 	rdlong	arg01, fp
301d8     04 4E 05 F1 | 	add	fp, #4
301dc     A7 14 02 FB | 	rdlong	arg02, fp
301e0     08 4E 85 F1 | 	sub	fp, #8
301e4     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
301e8     04 4E 05 F1 | 	add	fp, #4
301ec     A7 12 02 FB | 	rdlong	arg01, fp
301f0     04 4E 85 F1 | 	sub	fp, #4
301f4     00 14 06 F6 | 	mov	arg02, #0
301f8     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
301fc     0C 4E 05 F1 | 	add	fp, #12
30200     A7 FA 61 FC | 	wrlong	result1, fp
30204     0C 4E 85 F1 | 	sub	fp, #12
30208     04 FA 0D F2 | 	cmp	result1, #4 wz
3020c     0C 4E 05 A1 |  if_e	add	fp, #12
30210     A7 00 68 AC |  if_e	wrlong	#0, fp
30214     0C 4E 85 A1 |  if_e	sub	fp, #12
30218                 | LR__4791
30218                 | LR__4792
30218                 | LR__4793
30218                 | ' 			}
30218                 | ' 			;
30218                 | ' 		}
30218                 | ' 	}
30218                 | ' 	return res ;
30218     0C 4E 05 F1 | 	add	fp, #12
3021c     A7 FA 01 FB | 	rdlong	result1, fp
30220     0C 4E 85 F1 | 	sub	fp, #12
30224     A7 F0 03 F6 | 	mov	ptra, fp
30228     B2 00 A0 FD | 	call	#popregs_
3022c                 | _fatfs_cc_f_readdir_ret
3022c     2D 00 64 FD | 	ret
30230                 | 
30230                 | _fatfs_cc_f_stat
30230     00 4A 05 F6 | 	mov	COUNT_, #0
30234     A8 00 A0 FD | 	call	#pushregs_
30238     40 F0 07 F1 | 	add	ptra, #64
3023c     04 4E 05 F1 | 	add	fp, #4
30240     A7 12 62 FC | 	wrlong	arg01, fp
30244     04 4E 05 F1 | 	add	fp, #4
30248     A7 14 62 FC | 	wrlong	arg02, fp
3024c     04 4E 85 F1 | 	sub	fp, #4
30250     A7 12 02 F6 | 	mov	arg01, fp
30254     0C 4E 05 F1 | 	add	fp, #12
30258     A7 14 02 F6 | 	mov	arg02, fp
3025c     10 4E 85 F1 | 	sub	fp, #16
30260     00 16 06 F6 | 	mov	arg03, #0
30264     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
30268     0C 4E 05 F1 | 	add	fp, #12
3026c     A7 FA 61 FC | 	wrlong	result1, fp
30270     0C 4E 85 F1 | 	sub	fp, #12
30274     00 FA 0D F2 | 	cmp	result1, #0 wz
30278     74 00 90 5D |  if_ne	jmp	#LR__4803
3027c     10 4E 05 F1 | 	add	fp, #16
30280     A7 12 02 F6 | 	mov	arg01, fp
30284     0C 4E 85 F1 | 	sub	fp, #12
30288     A7 14 02 FB | 	rdlong	arg02, fp
3028c     04 4E 85 F1 | 	sub	fp, #4
30290     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
30294     0C 4E 05 F1 | 	add	fp, #12
30298     A7 FA 61 FC | 	wrlong	result1, fp
3029c     0C 4E 85 F1 | 	sub	fp, #12
302a0     00 FA 0D F2 | 	cmp	result1, #0 wz
302a4     48 00 90 5D |  if_ne	jmp	#LR__4802
302a8     3B 4E 05 F1 | 	add	fp, #59
302ac     A7 FA C1 FA | 	rdbyte	result1, fp
302b0     3B 4E 85 F1 | 	sub	fp, #59
302b4     80 FA CD F7 | 	test	result1, #128 wz
302b8     0C 4E 05 51 |  if_ne	add	fp, #12
302bc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
302c0     0C 4E 85 51 |  if_ne	sub	fp, #12
302c4     28 00 90 5D |  if_ne	jmp	#LR__4801
302c8     08 4E 05 F1 | 	add	fp, #8
302cc     A7 FA 09 FB | 	rdlong	result1, fp wz
302d0     08 4E 85 F1 | 	sub	fp, #8
302d4     18 00 90 AD |  if_e	jmp	#LR__4800
302d8     10 4E 05 F1 | 	add	fp, #16
302dc     A7 12 02 F6 | 	mov	arg01, fp
302e0     08 4E 85 F1 | 	sub	fp, #8
302e4     A7 14 02 FB | 	rdlong	arg02, fp
302e8     08 4E 85 F1 | 	sub	fp, #8
302ec     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
302f0                 | LR__4800
302f0                 | LR__4801
302f0                 | LR__4802
302f0                 | LR__4803
302f0                 | ' 			}
302f0                 | ' 		}
302f0                 | ' 		;
302f0                 | ' 	}
302f0                 | ' 
302f0                 | ' 	return res ;
302f0     0C 4E 05 F1 | 	add	fp, #12
302f4     A7 FA 01 FB | 	rdlong	result1, fp
302f8     0C 4E 85 F1 | 	sub	fp, #12
302fc     A7 F0 03 F6 | 	mov	ptra, fp
30300     B2 00 A0 FD | 	call	#popregs_
30304                 | _fatfs_cc_f_stat_ret
30304     2D 00 64 FD | 	ret
30308                 | 
30308                 | _fatfs_cc_f_unlink
30308     00 4A 05 F6 | 	mov	COUNT_, #0
3030c     A8 00 A0 FD | 	call	#pushregs_
30310     74 F0 07 F1 | 	add	ptra, #116
30314     04 4E 05 F1 | 	add	fp, #4
30318     A7 12 62 FC | 	wrlong	arg01, fp
3031c     68 4E 05 F1 | 	add	fp, #104
30320     A7 00 68 FC | 	wrlong	#0, fp
30324     68 4E 85 F1 | 	sub	fp, #104
30328     A7 12 02 F6 | 	mov	arg01, fp
3032c     6C 4E 05 F1 | 	add	fp, #108
30330     A7 14 02 F6 | 	mov	arg02, fp
30334     70 4E 85 F1 | 	sub	fp, #112
30338     02 16 06 F6 | 	mov	arg03, #2
3033c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
30340     08 4E 05 F1 | 	add	fp, #8
30344     A7 FA 61 FC | 	wrlong	result1, fp
30348     08 4E 85 F1 | 	sub	fp, #8
3034c     00 FA 0D F2 | 	cmp	result1, #0 wz
30350     E4 01 90 5D |  if_ne	jmp	#LR__4818
30354     70 4E 05 F1 | 	add	fp, #112
30358     A7 16 02 FB | 	rdlong	arg03, fp
3035c     64 4E 85 F1 | 	sub	fp, #100
30360     A7 16 62 FC | 	wrlong	arg03, fp
30364     A7 12 02 F6 | 	mov	arg01, fp
30368     08 4E 85 F1 | 	sub	fp, #8
3036c     A7 14 02 FB | 	rdlong	arg02, fp
30370     04 4E 85 F1 | 	sub	fp, #4
30374     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
30378     08 4E 05 F1 | 	add	fp, #8
3037c     A7 FA 61 FC | 	wrlong	result1, fp
30380     00 FA 4D F2 | 	cmps	result1, #0 wz
30384     08 4E 85 F1 | 	sub	fp, #8
30388     AC 01 90 5D |  if_ne	jmp	#LR__4817
3038c     37 4E 05 F1 | 	add	fp, #55
30390     A7 FA C1 FA | 	rdbyte	result1, fp
30394     37 4E 85 F1 | 	sub	fp, #55
30398     80 FA CD F7 | 	test	result1, #128 wz
3039c     08 4E 05 51 |  if_ne	add	fp, #8
303a0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
303a4     08 4E 85 51 |  if_ne	sub	fp, #8
303a8     1C 00 90 5D |  if_ne	jmp	#LR__4810
303ac     12 4E 05 F1 | 	add	fp, #18
303b0     A7 FA C1 FA | 	rdbyte	result1, fp
303b4     12 4E 85 F1 | 	sub	fp, #18
303b8     01 FA CD F7 | 	test	result1, #1 wz
303bc     08 4E 05 51 |  if_ne	add	fp, #8
303c0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
303c4     08 4E 85 51 |  if_ne	sub	fp, #8
303c8                 | LR__4810
303c8     08 4E 05 F1 | 	add	fp, #8
303cc     A7 FA 09 FB | 	rdlong	result1, fp wz
303d0     08 4E 85 F1 | 	sub	fp, #8
303d4     C8 00 90 5D |  if_ne	jmp	#LR__4813
303d8     70 4E 05 F1 | 	add	fp, #112
303dc     A7 12 02 FB | 	rdlong	arg01, fp
303e0     48 4E 85 F1 | 	sub	fp, #72
303e4     A7 14 02 FB | 	rdlong	arg02, fp
303e8     28 4E 85 F1 | 	sub	fp, #40
303ec     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
303f0     6C 4E 05 F1 | 	add	fp, #108
303f4     A7 FA 61 FC | 	wrlong	result1, fp
303f8     5A 4E 85 F1 | 	sub	fp, #90
303fc     A7 FA C1 FA | 	rdbyte	result1, fp
30400     12 4E 85 F1 | 	sub	fp, #18
30404     10 FA CD F7 | 	test	result1, #16 wz
30408     94 00 90 AD |  if_e	jmp	#LR__4812
3040c     70 4E 05 F1 | 	add	fp, #112
30410     A7 FA 01 FB | 	rdlong	result1, fp
30414     34 4E 85 F1 | 	sub	fp, #52
30418     A7 FA 61 FC | 	wrlong	result1, fp
3041c     30 4E 05 F1 | 	add	fp, #48
30420     A7 16 02 FB | 	rdlong	arg03, fp
30424     28 4E 85 F1 | 	sub	fp, #40
30428     A7 16 62 FC | 	wrlong	arg03, fp
3042c     08 4E 85 F1 | 	sub	fp, #8
30430     A7 12 02 F6 | 	mov	arg01, fp
30434     3C 4E 85 F1 | 	sub	fp, #60
30438     00 14 06 F6 | 	mov	arg02, #0
3043c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
30440     08 4E 05 F1 | 	add	fp, #8
30444     A7 FA 61 FC | 	wrlong	result1, fp
30448     08 4E 85 F1 | 	sub	fp, #8
3044c     00 FA 0D F2 | 	cmp	result1, #0 wz
30450     4C 00 90 5D |  if_ne	jmp	#LR__4811
30454     3C 4E 05 F1 | 	add	fp, #60
30458     A7 12 02 F6 | 	mov	arg01, fp
3045c     3C 4E 85 F1 | 	sub	fp, #60
30460     00 14 06 F6 | 	mov	arg02, #0
30464     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
30468     08 4E 05 F1 | 	add	fp, #8
3046c     A7 FA 61 FC | 	wrlong	result1, fp
30470     00 FA 4D F2 | 	cmps	result1, #0 wz
30474     08 4E 85 F1 | 	sub	fp, #8
30478     08 4E 05 A1 |  if_e	add	fp, #8
3047c     A7 0E 68 AC |  if_e	wrlong	#7, fp
30480     08 4E 85 A1 |  if_e	sub	fp, #8
30484     08 4E 05 F1 | 	add	fp, #8
30488     A7 FA 01 FB | 	rdlong	result1, fp
3048c     08 4E 85 F1 | 	sub	fp, #8
30490     04 FA 0D F2 | 	cmp	result1, #4 wz
30494     08 4E 05 A1 |  if_e	add	fp, #8
30498     A7 00 68 AC |  if_e	wrlong	#0, fp
3049c     08 4E 85 A1 |  if_e	sub	fp, #8
304a0                 | LR__4811
304a0                 | LR__4812
304a0                 | LR__4813
304a0     08 4E 05 F1 | 	add	fp, #8
304a4     A7 FA 09 FB | 	rdlong	result1, fp wz
304a8     08 4E 85 F1 | 	sub	fp, #8
304ac     88 00 90 5D |  if_ne	jmp	#LR__4816
304b0     0C 4E 05 F1 | 	add	fp, #12
304b4     A7 12 02 F6 | 	mov	arg01, fp
304b8     0C 4E 85 F1 | 	sub	fp, #12
304bc     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
304c0     08 4E 05 F1 | 	add	fp, #8
304c4     A7 FA 61 FC | 	wrlong	result1, fp
304c8     08 4E 85 F1 | 	sub	fp, #8
304cc     00 FA 0D F2 | 	cmp	result1, #0 wz
304d0     38 00 90 5D |  if_ne	jmp	#LR__4814
304d4     6C 4E 05 F1 | 	add	fp, #108
304d8     A7 FA 09 FB | 	rdlong	result1, fp wz
304dc     6C 4E 85 F1 | 	sub	fp, #108
304e0     28 00 90 AD |  if_e	jmp	#LR__4814
304e4     0C 4E 05 F1 | 	add	fp, #12
304e8     A7 12 02 F6 | 	mov	arg01, fp
304ec     60 4E 05 F1 | 	add	fp, #96
304f0     A7 14 02 FB | 	rdlong	arg02, fp
304f4     6C 4E 85 F1 | 	sub	fp, #108
304f8     00 16 06 F6 | 	mov	arg03, #0
304fc     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
30500     08 4E 05 F1 | 	add	fp, #8
30504     A7 FA 61 FC | 	wrlong	result1, fp
30508     08 4E 85 F1 | 	sub	fp, #8
3050c                 | LR__4814
3050c     08 4E 05 F1 | 	add	fp, #8
30510     A7 FA 09 FB | 	rdlong	result1, fp wz
30514     08 4E 85 F1 | 	sub	fp, #8
30518     1C 00 90 5D |  if_ne	jmp	#LR__4815
3051c     70 4E 05 F1 | 	add	fp, #112
30520     A7 12 02 FB | 	rdlong	arg01, fp
30524     70 4E 85 F1 | 	sub	fp, #112
30528     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
3052c     08 4E 05 F1 | 	add	fp, #8
30530     A7 FA 61 FC | 	wrlong	result1, fp
30534     08 4E 85 F1 | 	sub	fp, #8
30538                 | LR__4815
30538                 | LR__4816
30538                 | LR__4817
30538                 | LR__4818
30538                 | ' 			}
30538                 | ' 		}
30538                 | ' 		;
30538                 | ' 	}
30538                 | ' 
30538                 | ' 	return res ;
30538     08 4E 05 F1 | 	add	fp, #8
3053c     A7 FA 01 FB | 	rdlong	result1, fp
30540     08 4E 85 F1 | 	sub	fp, #8
30544     A7 F0 03 F6 | 	mov	ptra, fp
30548     B2 00 A0 FD | 	call	#popregs_
3054c                 | _fatfs_cc_f_unlink_ret
3054c     2D 00 64 FD | 	ret
30550                 | 
30550                 | _fatfs_cc_f_mkdir
30550     00 4A 05 F6 | 	mov	COUNT_, #0
30554     A8 00 A0 FD | 	call	#pushregs_
30558     5C F0 07 F1 | 	add	ptra, #92
3055c     04 4E 05 F1 | 	add	fp, #4
30560     A7 12 62 FC | 	wrlong	arg01, fp
30564     A7 12 02 F6 | 	mov	arg01, fp
30568     48 4E 05 F1 | 	add	fp, #72
3056c     A7 14 02 F6 | 	mov	arg02, fp
30570     4C 4E 85 F1 | 	sub	fp, #76
30574     02 16 06 F6 | 	mov	arg03, #2
30578     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
3057c     08 4E 05 F1 | 	add	fp, #8
30580     A7 FA 61 FC | 	wrlong	result1, fp
30584     08 4E 85 F1 | 	sub	fp, #8
30588     00 FA 0D F2 | 	cmp	result1, #0 wz
3058c     C4 02 90 5D |  if_ne	jmp	#LR__4825
30590     4C 4E 05 F1 | 	add	fp, #76
30594     A7 16 02 FB | 	rdlong	arg03, fp
30598     40 4E 85 F1 | 	sub	fp, #64
3059c     A7 16 62 FC | 	wrlong	arg03, fp
305a0     A7 12 02 F6 | 	mov	arg01, fp
305a4     08 4E 85 F1 | 	sub	fp, #8
305a8     A7 14 02 FB | 	rdlong	arg02, fp
305ac     04 4E 85 F1 | 	sub	fp, #4
305b0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
305b4     08 4E 05 F1 | 	add	fp, #8
305b8     A7 FA 61 FC | 	wrlong	result1, fp
305bc     00 FA 4D F2 | 	cmps	result1, #0 wz
305c0     08 4E 85 F1 | 	sub	fp, #8
305c4     08 4E 05 A1 |  if_e	add	fp, #8
305c8     A7 10 68 AC |  if_e	wrlong	#8, fp
305cc     08 4E 85 A1 |  if_e	sub	fp, #8
305d0     08 4E 05 F1 | 	add	fp, #8
305d4     A7 FA 01 FB | 	rdlong	result1, fp
305d8     08 4E 85 F1 | 	sub	fp, #8
305dc     04 FA 0D F2 | 	cmp	result1, #4 wz
305e0     70 02 90 5D |  if_ne	jmp	#LR__4824
305e4     4C 4E 05 F1 | 	add	fp, #76
305e8     A7 16 02 FB | 	rdlong	arg03, fp
305ec     10 4E 85 F1 | 	sub	fp, #16
305f0     A7 16 62 FC | 	wrlong	arg03, fp
305f4     A7 12 02 F6 | 	mov	arg01, fp
305f8     3C 4E 85 F1 | 	sub	fp, #60
305fc     00 14 06 F6 | 	mov	arg02, #0
30600     04 AC BF FD | 	call	#_fatfs_cc_create_chain
30604     50 4E 05 F1 | 	add	fp, #80
30608     A7 FA 61 FC | 	wrlong	result1, fp
3060c     48 4E 85 F1 | 	sub	fp, #72
30610     A7 00 68 FC | 	wrlong	#0, fp
30614     48 4E 05 F1 | 	add	fp, #72
30618     A7 FA 09 FB | 	rdlong	result1, fp wz
3061c     50 4E 85 F1 | 	sub	fp, #80
30620     08 4E 05 A1 |  if_e	add	fp, #8
30624     A7 0E 68 AC |  if_e	wrlong	#7, fp
30628     08 4E 85 A1 |  if_e	sub	fp, #8
3062c     50 4E 05 F1 | 	add	fp, #80
30630     A7 FA 01 FB | 	rdlong	result1, fp
30634     50 4E 85 F1 | 	sub	fp, #80
30638     01 FA 0D F2 | 	cmp	result1, #1 wz
3063c     08 4E 05 A1 |  if_e	add	fp, #8
30640     A7 04 68 AC |  if_e	wrlong	#2, fp
30644     08 4E 85 A1 |  if_e	sub	fp, #8
30648     50 4E 05 F1 | 	add	fp, #80
3064c     A7 16 02 FB | 	rdlong	arg03, fp
30650     50 4E 85 F1 | 	sub	fp, #80
30654     FF FF 7F FF 
30658     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
3065c     08 4E 05 A1 |  if_e	add	fp, #8
30660     A7 02 68 AC |  if_e	wrlong	#1, fp
30664     08 4E 85 A1 |  if_e	sub	fp, #8
30668     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
3066c     58 4E 05 F1 | 	add	fp, #88
30670     A7 FA 61 FC | 	wrlong	result1, fp
30674     50 4E 85 F1 | 	sub	fp, #80
30678     A7 FA 09 FB | 	rdlong	result1, fp wz
3067c     08 4E 85 F1 | 	sub	fp, #8
30680     1C 01 90 5D |  if_ne	jmp	#LR__4821
30684     4C 4E 05 F1 | 	add	fp, #76
30688     A7 12 02 FB | 	rdlong	arg01, fp
3068c     04 4E 05 F1 | 	add	fp, #4
30690     A7 14 02 FB | 	rdlong	arg02, fp
30694     50 4E 85 F1 | 	sub	fp, #80
30698     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
3069c     08 4E 05 F1 | 	add	fp, #8
306a0     A7 FA 61 FC | 	wrlong	result1, fp
306a4     00 FA 4D F2 | 	cmps	result1, #0 wz
306a8     08 4E 85 F1 | 	sub	fp, #8
306ac     F0 00 90 5D |  if_ne	jmp	#LR__4820
306b0     4C 4E 05 F1 | 	add	fp, #76
306b4     A7 12 02 FB | 	rdlong	arg01, fp
306b8     4C 4E 85 F1 | 	sub	fp, #76
306bc     34 12 06 F1 | 	add	arg01, #52
306c0     20 14 06 F6 | 	mov	arg02, #32
306c4     0B 16 06 F6 | 	mov	arg03, #11
306c8     98 00 A0 FD | 	call	#\builtin_bytefill_
306cc     4C 4E 05 F1 | 	add	fp, #76
306d0     A7 FA 01 FB | 	rdlong	result1, fp
306d4     34 FA 05 F1 | 	add	result1, #52
306d8     FD 5C 48 FC | 	wrbyte	#46, result1
306dc     A7 16 02 FB | 	rdlong	arg03, fp
306e0     3F 16 06 F1 | 	add	arg03, #63
306e4     0B 21 48 FC | 	wrbyte	#16, arg03
306e8     A7 12 02 FB | 	rdlong	arg01, fp
306ec     4A 12 06 F1 | 	add	arg01, #74
306f0     0C 4E 05 F1 | 	add	fp, #12
306f4     A7 14 02 FB | 	rdlong	arg02, fp
306f8     09 15 62 FC | 	wrlong	arg02, arg01
306fc     0C 4E 85 F1 | 	sub	fp, #12
30700     A7 14 02 FB | 	rdlong	arg02, fp
30704     0A 13 02 F6 | 	mov	arg01, arg02
30708     34 14 06 F1 | 	add	arg02, #52
3070c     04 4E 05 F1 | 	add	fp, #4
30710     A7 16 02 FB | 	rdlong	arg03, fp
30714     50 4E 85 F1 | 	sub	fp, #80
30718     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
3071c     4C 4E 05 F1 | 	add	fp, #76
30720     A7 14 02 FB | 	rdlong	arg02, fp
30724     0A 13 02 F6 | 	mov	arg01, arg02
30728     54 12 06 F1 | 	add	arg01, #84
3072c     4C 4E 85 F1 | 	sub	fp, #76
30730     34 14 06 F1 | 	add	arg02, #52
30734     20 16 06 F6 | 	mov	arg03, #32
30738     78 27 BF FD | 	call	#__system____builtin_memmove
3073c     4C 4E 05 F1 | 	add	fp, #76
30740     A7 16 02 FB | 	rdlong	arg03, fp
30744     55 16 06 F1 | 	add	arg03, #85
30748     0B 5D 48 FC | 	wrbyte	#46, arg03
3074c     38 4E 85 F1 | 	sub	fp, #56
30750     A7 16 02 FB | 	rdlong	arg03, fp
30754     40 4E 05 F1 | 	add	fp, #64
30758     A7 16 62 FC | 	wrlong	arg03, fp
3075c     08 4E 85 F1 | 	sub	fp, #8
30760     A7 14 02 FB | 	rdlong	arg02, fp
30764     0A 13 02 F6 | 	mov	arg01, arg02
30768     54 14 06 F1 | 	add	arg02, #84
3076c     4C 4E 85 F1 | 	sub	fp, #76
30770     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
30774     4C 4E 05 F1 | 	add	fp, #76
30778     A7 16 02 FB | 	rdlong	arg03, fp
3077c     03 16 06 F1 | 	add	arg03, #3
30780     0B 03 48 FC | 	wrbyte	#1, arg03
30784     40 4E 85 F1 | 	sub	fp, #64
30788     A7 12 02 F6 | 	mov	arg01, fp
3078c     0C 4E 85 F1 | 	sub	fp, #12
30790     44 BA BF FD | 	call	#_fatfs_cc_dir_register
30794     08 4E 05 F1 | 	add	fp, #8
30798     A7 FA 61 FC | 	wrlong	result1, fp
3079c     08 4E 85 F1 | 	sub	fp, #8
307a0                 | LR__4820
307a0                 | LR__4821
307a0     08 4E 05 F1 | 	add	fp, #8
307a4     A7 FA 09 FB | 	rdlong	result1, fp wz
307a8     08 4E 85 F1 | 	sub	fp, #8
307ac     88 00 90 5D |  if_ne	jmp	#LR__4822
307b0     28 4E 05 F1 | 	add	fp, #40
307b4     A7 12 02 FB | 	rdlong	arg01, fp
307b8     16 12 06 F1 | 	add	arg01, #22
307bc     30 4E 05 F1 | 	add	fp, #48
307c0     A7 14 02 FB | 	rdlong	arg02, fp
307c4     09 15 62 FC | 	wrlong	arg02, arg01
307c8     0C 4E 85 F1 | 	sub	fp, #12
307cc     A7 12 02 FB | 	rdlong	arg01, fp
307d0     24 4E 85 F1 | 	sub	fp, #36
307d4     A7 14 02 FB | 	rdlong	arg02, fp
307d8     28 4E 05 F1 | 	add	fp, #40
307dc     A7 16 02 FB | 	rdlong	arg03, fp
307e0     50 4E 85 F1 | 	sub	fp, #80
307e4     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
307e8     28 4E 05 F1 | 	add	fp, #40
307ec     A7 FA 01 FB | 	rdlong	result1, fp
307f0     0B FA 05 F1 | 	add	result1, #11
307f4     FD 20 48 FC | 	wrbyte	#16, result1
307f8     24 4E 05 F1 | 	add	fp, #36
307fc     A7 FA 01 FB | 	rdlong	result1, fp
30800     03 FA 05 F1 | 	add	result1, #3
30804     FD 02 48 FC | 	wrbyte	#1, result1
30808     44 4E 85 F1 | 	sub	fp, #68
3080c     A7 FA 09 FB | 	rdlong	result1, fp wz
30810     08 4E 85 F1 | 	sub	fp, #8
30814     3C 00 90 5D |  if_ne	jmp	#LR__4823
30818     4C 4E 05 F1 | 	add	fp, #76
3081c     A7 12 02 FB | 	rdlong	arg01, fp
30820     4C 4E 85 F1 | 	sub	fp, #76
30824     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
30828     08 4E 05 F1 | 	add	fp, #8
3082c     A7 FA 61 FC | 	wrlong	result1, fp
30830     08 4E 85 F1 | 	sub	fp, #8
30834     1C 00 90 FD | 	jmp	#LR__4823
30838                 | LR__4822
30838     3C 4E 05 F1 | 	add	fp, #60
3083c     A7 12 02 F6 | 	mov	arg01, fp
30840     14 4E 05 F1 | 	add	fp, #20
30844     A7 14 02 FB | 	rdlong	arg02, fp
30848     50 4E 85 F1 | 	sub	fp, #80
3084c     00 16 06 F6 | 	mov	arg03, #0
30850     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
30854                 | LR__4823
30854                 | LR__4824
30854                 | LR__4825
30854                 | ' 				remove_chain(&sobj, dcl, 0);
30854                 | ' 			}
30854                 | ' 		}
30854                 | ' 		;
30854                 | ' 	}
30854                 | ' 
30854                 | ' 	return res ;
30854     08 4E 05 F1 | 	add	fp, #8
30858     A7 FA 01 FB | 	rdlong	result1, fp
3085c     08 4E 85 F1 | 	sub	fp, #8
30860     A7 F0 03 F6 | 	mov	ptra, fp
30864     B2 00 A0 FD | 	call	#popregs_
30868                 | _fatfs_cc_f_mkdir_ret
30868     2D 00 64 FD | 	ret
3086c                 | 
3086c                 | _fatfs_cc_f_rename
3086c     01 4A 05 F6 | 	mov	COUNT_, #1
30870     A8 00 A0 FD | 	call	#pushregs_
30874     9C F0 07 F1 | 	add	ptra, #156
30878     04 4E 05 F1 | 	add	fp, #4
3087c     A7 12 62 FC | 	wrlong	arg01, fp
30880     04 4E 05 F1 | 	add	fp, #4
30884     A7 14 62 FC | 	wrlong	arg02, fp
30888     A7 12 02 F6 | 	mov	arg01, fp
3088c     08 4E 85 F1 | 	sub	fp, #8
30890     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
30894     04 4E 05 F1 | 	add	fp, #4
30898     A7 12 02 F6 | 	mov	arg01, fp
3089c     6C 4E 05 F1 | 	add	fp, #108
308a0     A7 14 02 F6 | 	mov	arg02, fp
308a4     70 4E 85 F1 | 	sub	fp, #112
308a8     02 16 06 F6 | 	mov	arg03, #2
308ac     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
308b0     0C 4E 05 F1 | 	add	fp, #12
308b4     A7 FA 61 FC | 	wrlong	result1, fp
308b8     0C 4E 85 F1 | 	sub	fp, #12
308bc     00 FA 0D F2 | 	cmp	result1, #0 wz
308c0     44 03 90 5D |  if_ne	jmp	#LR__4843
308c4     70 4E 05 F1 | 	add	fp, #112
308c8     A7 16 02 FB | 	rdlong	arg03, fp
308cc     60 4E 85 F1 | 	sub	fp, #96
308d0     A7 16 62 FC | 	wrlong	arg03, fp
308d4     A7 12 02 F6 | 	mov	arg01, fp
308d8     0C 4E 85 F1 | 	sub	fp, #12
308dc     A7 14 02 FB | 	rdlong	arg02, fp
308e0     04 4E 85 F1 | 	sub	fp, #4
308e4     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
308e8     0C 4E 05 F1 | 	add	fp, #12
308ec     A7 FA 61 FC | 	wrlong	result1, fp
308f0     00 FA 4D F2 | 	cmps	result1, #0 wz
308f4     0C 4E 85 F1 | 	sub	fp, #12
308f8     1C 00 90 5D |  if_ne	jmp	#LR__4830
308fc     3B 4E 05 F1 | 	add	fp, #59
30900     A7 FA C1 FA | 	rdbyte	result1, fp
30904     3B 4E 85 F1 | 	sub	fp, #59
30908     A0 FA CD F7 | 	test	result1, #160 wz
3090c     0C 4E 05 51 |  if_ne	add	fp, #12
30910     A7 0C 68 5C |  if_ne	wrlong	#6, fp
30914     0C 4E 85 51 |  if_ne	sub	fp, #12
30918                 | LR__4830
30918     0C 4E 05 F1 | 	add	fp, #12
3091c     A7 26 0A FB | 	rdlong	local01, fp wz
30920     0C 4E 85 F1 | 	sub	fp, #12
30924     E0 02 90 5D |  if_ne	jmp	#LR__4842
30928     74 4E 05 F1 | 	add	fp, #116
3092c     A7 12 02 F6 | 	mov	arg01, fp
30930     48 4E 85 F1 | 	sub	fp, #72
30934     A7 14 02 FB | 	rdlong	arg02, fp
30938     2C 4E 85 F1 | 	sub	fp, #44
3093c     20 16 06 F6 | 	mov	arg03, #32
30940     70 25 BF FD | 	call	#__system____builtin_memmove
30944     40 4E 05 F1 | 	add	fp, #64
30948     A7 12 02 F6 | 	mov	arg01, fp
3094c     30 4E 85 F1 | 	sub	fp, #48
30950     A7 14 02 F6 | 	mov	arg02, fp
30954     10 4E 85 F1 | 	sub	fp, #16
30958     30 16 06 F6 | 	mov	arg03, #48
3095c     54 25 BF FD | 	call	#__system____builtin_memmove
30960     40 4E 05 F1 | 	add	fp, #64
30964     A7 12 02 F6 | 	mov	arg01, fp
30968     38 4E 85 F1 | 	sub	fp, #56
3096c     A7 14 02 FB | 	rdlong	arg02, fp
30970     08 4E 85 F1 | 	sub	fp, #8
30974     34 CA BF FD | 	call	#_fatfs_cc_follow_path
30978     0C 4E 05 F1 | 	add	fp, #12
3097c     A7 FA 61 FC | 	wrlong	result1, fp
30980     0C 4E 85 F1 | 	sub	fp, #12
30984     00 FA 0D F2 | 	cmp	result1, #0 wz
30988     4C 00 90 5D |  if_ne	jmp	#LR__4833
3098c     48 4E 05 F1 | 	add	fp, #72
30990     A7 FA 01 FB | 	rdlong	result1, fp
30994     30 4E 85 F1 | 	sub	fp, #48
30998     A7 16 02 FB | 	rdlong	arg03, fp
3099c     18 4E 85 F1 | 	sub	fp, #24
309a0     0B FB 09 F2 | 	cmp	result1, arg03 wz
309a4     20 00 90 5D |  if_ne	jmp	#LR__4831
309a8     50 4E 05 F1 | 	add	fp, #80
309ac     A7 FA 01 FB | 	rdlong	result1, fp
309b0     30 4E 85 F1 | 	sub	fp, #48
309b4     A7 16 02 FB | 	rdlong	arg03, fp
309b8     20 4E 85 F1 | 	sub	fp, #32
309bc     0B FB 09 F2 | 	cmp	result1, arg03 wz
309c0     04 26 06 A6 |  if_e	mov	local01, #4
309c4     04 00 90 AD |  if_e	jmp	#LR__4832
309c8                 | LR__4831
309c8     08 26 06 F6 | 	mov	local01, #8
309cc                 | LR__4832
309cc     0C 4E 05 F1 | 	add	fp, #12
309d0     A7 26 62 FC | 	wrlong	local01, fp
309d4     0C 4E 85 F1 | 	sub	fp, #12
309d8                 | LR__4833
309d8     0C 4E 05 F1 | 	add	fp, #12
309dc     A7 26 02 FB | 	rdlong	local01, fp
309e0     0C 4E 85 F1 | 	sub	fp, #12
309e4     04 26 0E F2 | 	cmp	local01, #4 wz
309e8     CC 01 90 5D |  if_ne	jmp	#LR__4839
309ec     40 4E 05 F1 | 	add	fp, #64
309f0     A7 12 02 F6 | 	mov	arg01, fp
309f4     40 4E 85 F1 | 	sub	fp, #64
309f8     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
309fc     0C 4E 05 F1 | 	add	fp, #12
30a00     A7 FA 61 FC | 	wrlong	result1, fp
30a04     0C 4E 85 F1 | 	sub	fp, #12
30a08     00 FA 0D F2 | 	cmp	result1, #0 wz
30a0c     A8 01 90 5D |  if_ne	jmp	#LR__4838
30a10     5C 4E 05 F1 | 	add	fp, #92
30a14     A7 12 02 FB | 	rdlong	arg01, fp
30a18     38 4E 05 F1 | 	add	fp, #56
30a1c     A7 12 62 FC | 	wrlong	arg01, fp
30a20     0D 12 06 F1 | 	add	arg01, #13
30a24     20 4E 85 F1 | 	sub	fp, #32
30a28     A7 14 02 F6 | 	mov	arg02, fp
30a2c     74 4E 85 F1 | 	sub	fp, #116
30a30     0D 14 06 F1 | 	add	arg02, #13
30a34     13 16 06 F6 | 	mov	arg03, #19
30a38     78 24 BF FD | 	call	#__system____builtin_memmove
30a3c     94 4E 05 F1 | 	add	fp, #148
30a40     A7 26 02 FB | 	rdlong	local01, fp
30a44     15 4E 85 F1 | 	sub	fp, #21
30a48     A7 FA C1 FA | 	rdbyte	result1, fp
30a4c     0B 26 06 F1 | 	add	local01, #11
30a50     13 FB 41 FC | 	wrbyte	result1, local01
30a54     15 4E 05 F1 | 	add	fp, #21
30a58     A7 26 02 FB | 	rdlong	local01, fp
30a5c     94 4E 85 F1 | 	sub	fp, #148
30a60     0B 26 06 F1 | 	add	local01, #11
30a64     13 27 C2 FA | 	rdbyte	local01, local01
30a68     10 26 CE F7 | 	test	local01, #16 wz
30a6c     24 00 90 5D |  if_ne	jmp	#LR__4834
30a70     94 4E 05 F1 | 	add	fp, #148
30a74     A7 FA 01 FB | 	rdlong	result1, fp
30a78     FD 26 02 F6 | 	mov	local01, result1
30a7c     94 4E 85 F1 | 	sub	fp, #148
30a80     0B FA 05 F1 | 	add	result1, #11
30a84     FD FA C1 FA | 	rdbyte	result1, result1
30a88     20 FA 45 F5 | 	or	result1, #32
30a8c     0B 26 06 F1 | 	add	local01, #11
30a90     13 FB 41 FC | 	wrbyte	result1, local01
30a94                 | LR__4834
30a94     70 4E 05 F1 | 	add	fp, #112
30a98     A7 26 02 FB | 	rdlong	local01, fp
30a9c     03 26 06 F1 | 	add	local01, #3
30aa0     13 03 48 FC | 	wrbyte	#1, local01
30aa4     24 4E 05 F1 | 	add	fp, #36
30aa8     A7 26 02 FB | 	rdlong	local01, fp
30aac     94 4E 85 F1 | 	sub	fp, #148
30ab0     0B 26 06 F1 | 	add	local01, #11
30ab4     13 27 C2 FA | 	rdbyte	local01, local01
30ab8     10 26 CE F7 | 	test	local01, #16 wz
30abc     F8 00 90 AD |  if_e	jmp	#LR__4837
30ac0     18 4E 05 F1 | 	add	fp, #24
30ac4     A7 16 02 FB | 	rdlong	arg03, fp
30ac8     30 4E 05 F1 | 	add	fp, #48
30acc     A7 26 02 FB | 	rdlong	local01, fp
30ad0     48 4E 85 F1 | 	sub	fp, #72
30ad4     13 17 0A F2 | 	cmp	arg03, local01 wz
30ad8     DC 00 90 AD |  if_e	jmp	#LR__4837
30adc     70 4E 05 F1 | 	add	fp, #112
30ae0     A7 12 02 FB | 	rdlong	arg01, fp
30ae4     09 27 02 F6 | 	mov	local01, arg01
30ae8     24 4E 05 F1 | 	add	fp, #36
30aec     A7 14 02 FB | 	rdlong	arg02, fp
30af0     94 4E 85 F1 | 	sub	fp, #148
30af4     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
30af8     FD 14 02 F6 | 	mov	arg02, result1
30afc     13 13 02 F6 | 	mov	arg01, local01
30b00     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
30b04     98 4E 05 F1 | 	add	fp, #152
30b08     A7 FA 61 FC | 	wrlong	result1, fp
30b0c     00 FA 4D F2 | 	cmps	result1, #0 wz
30b10     98 4E 85 F1 | 	sub	fp, #152
30b14     0C 4E 05 A1 |  if_e	add	fp, #12
30b18     A7 04 68 AC |  if_e	wrlong	#2, fp
30b1c     0C 4E 85 A1 |  if_e	sub	fp, #12
30b20     94 00 90 AD |  if_e	jmp	#LR__4836
30b24     70 4E 05 F1 | 	add	fp, #112
30b28     A7 12 02 FB | 	rdlong	arg01, fp
30b2c     28 4E 05 F1 | 	add	fp, #40
30b30     A7 14 02 FB | 	rdlong	arg02, fp
30b34     98 4E 85 F1 | 	sub	fp, #152
30b38     4C A0 BF FD | 	call	#_fatfs_cc_move_window
30b3c     0C 4E 05 F1 | 	add	fp, #12
30b40     A7 FA 61 FC | 	wrlong	result1, fp
30b44     64 4E 05 F1 | 	add	fp, #100
30b48     A7 26 02 FB | 	rdlong	local01, fp
30b4c     54 26 06 F1 | 	add	local01, #84
30b50     24 4E 05 F1 | 	add	fp, #36
30b54     A7 26 62 FC | 	wrlong	local01, fp
30b58     88 4E 85 F1 | 	sub	fp, #136
30b5c     A7 26 0A FB | 	rdlong	local01, fp wz
30b60     0C 4E 85 F1 | 	sub	fp, #12
30b64     50 00 90 5D |  if_ne	jmp	#LR__4835
30b68     94 4E 05 F1 | 	add	fp, #148
30b6c     A7 26 02 FB | 	rdlong	local01, fp
30b70     94 4E 85 F1 | 	sub	fp, #148
30b74     01 26 06 F1 | 	add	local01, #1
30b78     13 27 C2 FA | 	rdbyte	local01, local01
30b7c     2E 26 0E F2 | 	cmp	local01, #46 wz
30b80     34 00 90 5D |  if_ne	jmp	#LR__4835
30b84     70 4E 05 F1 | 	add	fp, #112
30b88     A7 12 02 FB | 	rdlong	arg01, fp
30b8c     24 4E 05 F1 | 	add	fp, #36
30b90     A7 14 02 FB | 	rdlong	arg02, fp
30b94     4C 4E 85 F1 | 	sub	fp, #76
30b98     A7 16 02 FB | 	rdlong	arg03, fp
30b9c     48 4E 85 F1 | 	sub	fp, #72
30ba0     50 AD BF FD | 	call	#_fatfs_cc_st_clust
30ba4     70 4E 05 F1 | 	add	fp, #112
30ba8     A7 26 02 FB | 	rdlong	local01, fp
30bac     70 4E 85 F1 | 	sub	fp, #112
30bb0     03 26 06 F1 | 	add	local01, #3
30bb4     13 03 48 FC | 	wrbyte	#1, local01
30bb8                 | LR__4835
30bb8                 | LR__4836
30bb8                 | LR__4837
30bb8                 | LR__4838
30bb8                 | LR__4839
30bb8     0C 4E 05 F1 | 	add	fp, #12
30bbc     A7 26 0A FB | 	rdlong	local01, fp wz
30bc0     0C 4E 85 F1 | 	sub	fp, #12
30bc4     40 00 90 5D |  if_ne	jmp	#LR__4841
30bc8     10 4E 05 F1 | 	add	fp, #16
30bcc     A7 12 02 F6 | 	mov	arg01, fp
30bd0     10 4E 85 F1 | 	sub	fp, #16
30bd4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
30bd8     0C 4E 05 F1 | 	add	fp, #12
30bdc     A7 FA 61 FC | 	wrlong	result1, fp
30be0     0C 4E 85 F1 | 	sub	fp, #12
30be4     00 FA 0D F2 | 	cmp	result1, #0 wz
30be8     1C 00 90 5D |  if_ne	jmp	#LR__4840
30bec     70 4E 05 F1 | 	add	fp, #112
30bf0     A7 12 02 FB | 	rdlong	arg01, fp
30bf4     70 4E 85 F1 | 	sub	fp, #112
30bf8     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
30bfc     0C 4E 05 F1 | 	add	fp, #12
30c00     A7 FA 61 FC | 	wrlong	result1, fp
30c04     0C 4E 85 F1 | 	sub	fp, #12
30c08                 | LR__4840
30c08                 | LR__4841
30c08                 | LR__4842
30c08                 | LR__4843
30c08                 | ' 					res = sync_fs(fs);
30c08                 | ' 				}
30c08                 | ' 			}
30c08                 | ' 
30c08                 | ' 		}
30c08                 | ' 		;
30c08                 | ' 	}
30c08                 | ' 
30c08                 | ' 	return res ;
30c08     0C 4E 05 F1 | 	add	fp, #12
30c0c     A7 FA 01 FB | 	rdlong	result1, fp
30c10     0C 4E 85 F1 | 	sub	fp, #12
30c14     A7 F0 03 F6 | 	mov	ptra, fp
30c18     B2 00 A0 FD | 	call	#popregs_
30c1c                 | _fatfs_cc_f_rename_ret
30c1c     2D 00 64 FD | 	ret
30c20                 | 
30c20                 | _fatfs_cc_time
30c20     00 4A 05 F6 | 	mov	COUNT_, #0
30c24     A8 00 A0 FD | 	call	#pushregs_
30c28     14 F0 07 F1 | 	add	ptra, #20
30c2c     04 4E 05 F1 | 	add	fp, #4
30c30     A7 12 62 FC | 	wrlong	arg01, fp
30c34     04 4E 05 F1 | 	add	fp, #4
30c38     A7 12 02 F6 | 	mov	arg01, fp
30c3c     08 4E 85 F1 | 	sub	fp, #8
30c40     00 14 06 F6 | 	mov	arg02, #0
30c44     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
30c48     08 4E 05 F1 | 	add	fp, #8
30c4c     A7 FA 01 FB | 	rdlong	result1, fp
30c50     08 4E 05 F1 | 	add	fp, #8
30c54     A7 FA 61 FC | 	wrlong	result1, fp
30c58     0C 4E 85 F1 | 	sub	fp, #12
30c5c     A7 FA 09 FB | 	rdlong	result1, fp wz
30c60     04 4E 85 F1 | 	sub	fp, #4
30c64     18 00 90 AD |  if_e	jmp	#LR__4850
30c68     04 4E 05 F1 | 	add	fp, #4
30c6c     A7 FA 01 FB | 	rdlong	result1, fp
30c70     0C 4E 05 F1 | 	add	fp, #12
30c74     A7 14 02 FB | 	rdlong	arg02, fp
30c78     10 4E 85 F1 | 	sub	fp, #16
30c7c     FD 14 62 FC | 	wrlong	arg02, result1
30c80                 | LR__4850
30c80                 | '         *tp = now;
30c80                 | '     return now;
30c80     10 4E 05 F1 | 	add	fp, #16
30c84     A7 FA 01 FB | 	rdlong	result1, fp
30c88     10 4E 85 F1 | 	sub	fp, #16
30c8c     A7 F0 03 F6 | 	mov	ptra, fp
30c90     B2 00 A0 FD | 	call	#popregs_
30c94                 | _fatfs_cc_time_ret
30c94     2D 00 64 FD | 	ret
30c98                 | 
30c98                 | _fatfs_cc_mktime
30c98     06 4A 05 F6 | 	mov	COUNT_, #6
30c9c     A8 00 A0 FD | 	call	#pushregs_
30ca0     09 27 02 F6 | 	mov	local01, arg01
30ca4     14 26 06 F1 | 	add	local01, #20
30ca8     13 13 02 FB | 	rdlong	arg01, local01
30cac     14 26 86 F1 | 	sub	local01, #20
30cb0     46 12 56 F2 | 	cmps	arg01, #70 wc
30cb4                 | '                 return (time_t) -1;
30cb4     01 FA 65 C6 |  if_b	neg	result1, #1
30cb8     7C 01 90 CD |  if_b	jmp	#LR__4864
30cbc     03 00 00 FF 
30cc0     6C 29 06 F6 | 	mov	local02, ##1900
30cc4     14 26 06 F1 | 	add	local01, #20
30cc8     13 FB 01 FB | 	rdlong	result1, local01
30ccc     FD 28 02 F1 | 	add	local02, result1
30cd0     08 26 86 F1 | 	sub	local01, #8
30cd4     13 2B 02 FB | 	rdlong	local03, local01
30cd8     01 2A 86 F1 | 	sub	local03, #1
30cdc     04 26 06 F1 | 	add	local01, #4
30ce0     13 13 02 FB | 	rdlong	arg01, local01
30ce4     10 26 86 F1 | 	sub	local01, #16
30ce8     02 12 66 F0 | 	shl	arg01, #2
30cec     02 00 00 FF 
30cf0     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
30cf4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30cf8     09 FB 01 FB | 	rdlong	result1, arg01
30cfc     FD 2A 02 F1 | 	add	local03, result1
30d00     14 13 02 F6 | 	mov	arg01, local02
30d04     02 00 00 FF 
30d08     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
30d0c     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
30d10     00 FA 0D F2 | 	cmp	result1, #0 wz
30d14     1C 00 90 AD |  if_e	jmp	#LR__4860
30d18     00 2C 06 F6 | 	mov	local04, #0
30d1c     10 26 06 F1 | 	add	local01, #16
30d20     13 FB 01 FB | 	rdlong	result1, local01
30d24     10 26 86 F1 | 	sub	local01, #16
30d28     02 FA 55 F2 | 	cmps	result1, #2 wc
30d2c     01 2C 06 36 |  if_ae	mov	local04, #1
30d30     04 00 90 FD | 	jmp	#LR__4861
30d34                 | LR__4860
30d34     00 2C 06 F6 | 	mov	local04, #0
30d38                 | LR__4861
30d38     04 26 06 F1 | 	add	local01, #4
30d3c     13 FB 01 FB | 	rdlong	result1, local01
30d40     04 26 86 F1 | 	sub	local01, #4
30d44     13 2F 02 FB | 	rdlong	local05, local01
30d48     08 26 06 F1 | 	add	local01, #8
30d4c     13 13 02 FB | 	rdlong	arg01, local01
30d50     07 00 00 FF 
30d54     10 12 06 FD | 	qmul	arg01, ##3600
30d58     16 2B 02 F1 | 	add	local03, local04
30d5c     FD 2C 02 F6 | 	mov	local04, result1
30d60     04 2C 66 F0 | 	shl	local04, #4
30d64     FD 2C 82 F1 | 	sub	local04, result1
30d68     02 2C 66 F0 | 	shl	local04, #2
30d6c     16 2F 02 F1 | 	add	local05, local04
30d70     08 26 86 F1 | 	sub	local01, #8
30d74     18 2C 62 FD | 	getqx	local04
30d78     A8 00 00 FF 
30d7c     80 2B 06 FD | 	qmul	local03, ##86400
30d80     16 2F 02 F1 | 	add	local05, local04
30d84     14 2B 02 F6 | 	mov	local03, local02
30d88     03 00 00 FF 
30d8c     B2 2B 86 F1 | 	sub	local03, ##1970
30d90     18 2C 62 FD | 	getqx	local04
30d94     99 F0 00 FF 
30d98     80 2B 06 FD | 	qmul	local03, ##31536000
30d9c     16 2F 02 F1 | 	add	local05, local04
30da0     14 2B 02 F6 | 	mov	local03, local02
30da4     03 00 00 FF 
30da8     B1 2B 86 F1 | 	sub	local03, ##1969
30dac     15 31 52 F6 | 	abs	local06, local03 wc
30db0     02 30 46 F0 | 	shr	local06, #2
30db4     18 31 82 F6 | 	negc	local06, local06
30db8     03 00 00 FF 
30dbc     D1 29 56 F2 | 	cmps	local02, ##2001 wc
30dc0     18 2C 62 FD | 	getqx	local04
30dc4     16 2F 02 F1 | 	add	local05, local04
30dc8     18 00 90 CD |  if_b	jmp	#LR__4862
30dcc     03 00 00 FF 
30dd0     D0 29 86 F1 | 	sub	local02, ##2000
30dd4     14 2D 52 F6 | 	abs	local04, local02 wc
30dd8     64 2C 16 FD | 	qdiv	local04, #100
30ddc     18 2C 62 FD | 	getqx	local04
30de0     16 31 A2 F3 | 	sumnc	local06, local04
30de4                 | LR__4862
30de4     A8 00 00 FF 
30de8     80 31 06 FD | 	qmul	local06, ##86400
30dec     18 30 62 FD | 	getqx	local06
30df0     18 2F 02 F1 | 	add	local05, local06
30df4     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
30df8     02 00 00 FF 
30dfc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
30e00     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
30e04     18 2F 02 F1 | 	add	local05, local06
30e08     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
30e0c     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
30e10     02 00 00 FF 
30e14     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
30e18     01 2A 0E F2 | 	cmp	local03, #1 wz
30e1c     14 00 90 5D |  if_ne	jmp	#LR__4863
30e20     13 13 02 F6 | 	mov	arg01, local01
30e24     DC 19 B0 FD | 	call	#_fatfs_cc___indst
30e28     00 FA 0D F2 | 	cmp	result1, #0 wz
30e2c     07 00 00 5F 
30e30     10 2E 86 51 |  if_ne	sub	local05, ##3600
30e34                 | LR__4863
30e34                 | '                 s -=  (3600L) ;
30e34                 | ' 
30e34                 | '         return s;
30e34     17 FB 01 F6 | 	mov	result1, local05
30e38                 | LR__4864
30e38     A7 F0 03 F6 | 	mov	ptra, fp
30e3c     B2 00 A0 FD | 	call	#popregs_
30e40                 | _fatfs_cc_mktime_ret
30e40     2D 00 64 FD | 	ret
30e44                 | 
30e44                 | _fatfs_cc__gmtime_r
30e44     03 4A 05 F6 | 	mov	COUNT_, #3
30e48     A8 00 A0 FD | 	call	#pushregs_
30e4c     09 27 02 FB | 	rdlong	local01, arg01
30e50     A8 00 00 FF 
30e54     80 27 16 FD | 	qdiv	local01, ##86400
30e58     18 FA 61 FD | 	getqx	result1
30e5c     04 FA 05 F1 | 	add	result1, #4
30e60     07 FA 15 FD | 	qdiv	result1, #7
30e64     18 14 06 F1 | 	add	arg02, #24
30e68     D1 7F 27 FF 
30e6c     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
30e70     D1 7F 27 3F 
30e74     00 26 86 31 |  if_ae	sub	local01, ##1325376000
30e78     03 00 00 3F 
30e7c     DC 29 06 36 |  if_ae	mov	local02, ##2012
30e80     03 00 00 CF 
30e84     B2 29 06 C6 |  if_b	mov	local02, ##1970
30e88                 | ' 	  year = 1970;
30e88                 | ' 	}
30e88                 | ' 
30e88                 | ' 	for(;;) {
30e88     19 FA 61 FD | 	getqy	result1
30e8c     0A FB 61 FC | 	wrlong	result1, arg02
30e90     18 14 86 F1 | 	sub	arg02, #24
30e94                 | LR__4870
30e94     14 13 02 F6 | 	mov	arg01, local02
30e98     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
30e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
30ea0     42 F1 00 5F 
30ea4     00 2B 06 56 |  if_ne	mov	local03, ##31622400
30ea8     99 F0 00 AF 
30eac     80 2B 06 A6 |  if_e	mov	local03, ##31536000
30eb0     15 27 12 F2 | 	cmp	local01, local03 wc
30eb4                 | ' 	    break;
30eb4     01 28 06 31 |  if_ae	add	local02, #1
30eb8     15 27 82 31 |  if_ae	sub	local01, local03
30ebc     D4 FF 9F 3D |  if_ae	jmp	#LR__4870
30ec0     A8 00 00 FF 
30ec4     80 27 16 FD | 	qdiv	local01, ##86400
30ec8     14 2B 02 F6 | 	mov	local03, local02
30ecc     03 00 00 FF 
30ed0     6C 2B 86 F1 | 	sub	local03, ##1900
30ed4     14 14 06 F1 | 	add	arg02, #20
30ed8     0A 2B 62 FC | 	wrlong	local03, arg02
30edc     08 14 06 F1 | 	add	arg02, #8
30ee0     14 13 02 F6 | 	mov	arg01, local02
30ee4     18 28 62 FD | 	getqx	local02
30ee8     0A 29 62 FC | 	wrlong	local02, arg02
30eec     1C 14 86 F1 | 	sub	arg02, #28
30ef0     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
30ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
30ef8     1D 2A 06 56 |  if_ne	mov	local03, #29
30efc     1C 2A 06 A6 |  if_e	mov	local03, #28
30f00     02 00 00 FF 
30f04     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
30f08     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
30f0c     02 00 00 FF 
30f10     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
30f14                 | ' 
30f14                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
30f14                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
30f14     00 12 06 F6 | 	mov	arg01, #0
30f18     97 2A 48 FB | 	callpa	#(@LR__4872-@LR__4871)>>2,fcache_load_ptr_
30f1c                 | LR__4871
30f1c     09 2B 02 F6 | 	mov	local03, arg01
30f20     02 2A 66 F0 | 	shl	local03, #2
30f24     02 00 00 FF 
30f28     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
30f2c     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
30f30     15 2B 02 FB | 	rdlong	local03, local03
30f34     15 29 52 F2 | 	cmps	local02, local03 wc
30f38     02 00 00 FF 
30f3c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
30f40     2C 00 90 CD |  if_b	jmp	#LR__4873
30f44     09 2B 02 F6 | 	mov	local03, arg01
30f48     02 2A 66 F0 | 	shl	local03, #2
30f4c     02 00 00 FF 
30f50     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
30f54     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
30f58     15 2B 02 FB | 	rdlong	local03, local03
30f5c     15 29 82 F1 | 	sub	local02, local03
30f60     01 12 06 F1 | 	add	arg01, #1
30f64     02 00 00 FF 
30f68     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
30f6c     AC FF 9F FD | 	jmp	#LR__4871
30f70                 | LR__4872
30f70                 | LR__4873
30f70     A8 00 00 FF 
30f74     80 27 16 FD | 	qdiv	local01, ##86400
30f78     10 14 06 F1 | 	add	arg02, #16
30f7c     0A 13 62 FC | 	wrlong	arg01, arg02
30f80     01 28 06 F1 | 	add	local02, #1
30f84     04 14 86 F1 | 	sub	arg02, #4
30f88     0A 29 62 FC | 	wrlong	local02, arg02
30f8c     19 26 62 FD | 	getqy	local01
30f90     07 00 00 FF 
30f94     10 26 16 FD | 	qdiv	local01, ##3600
30f98     18 2A 62 FD | 	getqx	local03
30f9c     07 00 00 FF 
30fa0     10 26 16 FD | 	qdiv	local01, ##3600
30fa4     04 14 86 F1 | 	sub	arg02, #4
30fa8     0A 2B 62 FC | 	wrlong	local03, arg02
30fac     19 26 62 FD | 	getqy	local01
30fb0     3C 26 16 FD | 	qdiv	local01, #60
30fb4     18 2A 62 FD | 	getqx	local03
30fb8     3C 26 16 FD | 	qdiv	local01, #60
30fbc     04 14 86 F1 | 	sub	arg02, #4
30fc0     0A 2B 62 FC | 	wrlong	local03, arg02
30fc4     04 14 86 F1 | 	sub	arg02, #4
30fc8                 | '         stm->tm_isdst = 0;
30fc8                 | ' 
30fc8                 | ' ;
30fc8                 | '         return stm;
30fc8     0A FB 01 F6 | 	mov	result1, arg02
30fcc     19 2A 62 FD | 	getqy	local03
30fd0     0A 2B 62 FC | 	wrlong	local03, arg02
30fd4     20 14 06 F1 | 	add	arg02, #32
30fd8     0A 01 68 FC | 	wrlong	#0, arg02
30fdc     A7 F0 03 F6 | 	mov	ptra, fp
30fe0     B2 00 A0 FD | 	call	#popregs_
30fe4                 | _fatfs_cc__gmtime_r_ret
30fe4     2D 00 64 FD | 	ret
30fe8                 | 
30fe8                 | _fatfs_cc__tzset
30fe8     95 01 00 FF 
30fec     2D 13 06 F6 | 	mov	arg01, ##@LR__5185
30ff0     34 00 B0 FD | 	call	#_fatfs_cc_getenv
30ff4     FD 12 02 F6 | 	mov	arg01, result1
30ff8     02 00 00 FF 
30ffc     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
31000     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
31004     02 00 00 FF 
31008     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
3100c     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
31010     02 00 00 FF 
31014     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
31018     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
3101c     02 00 00 FF 
31020     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
31024                 | _fatfs_cc__tzset_ret
31024     2D 00 64 FD | 	ret
31028                 | 
31028                 | _fatfs_cc_getenv
31028     06 4A 05 F6 | 	mov	COUNT_, #6
3102c     A8 00 A0 FD | 	call	#pushregs_
31030     09 27 02 F6 | 	mov	local01, arg01
31034     09 29 02 F6 | 	mov	local02, arg01
31038     97 06 48 FB | 	callpa	#(@LR__4881-@LR__4880)>>2,fcache_load_ptr_
3103c                 | LR__4880
3103c     14 FB C9 FA | 	rdbyte	result1, local02 wz
31040     01 28 06 51 |  if_ne	add	local02, #1
31044     F4 FF 9F 5D |  if_ne	jmp	#LR__4880
31048                 | LR__4881
31048     09 29 82 F1 | 	sub	local02, arg01
3104c     14 FB 01 F6 | 	mov	result1, local02
31050     02 00 00 FF 
31054     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
31058     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
3105c     02 00 00 FF 
31060     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
31064                 | '             return 0;
31064     00 FA 05 A6 |  if_e	mov	result1, #0
31068     5C 00 90 AD |  if_e	jmp	#LR__4884
3106c                 | ' 
3106c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
3106c     02 00 00 FF 
31070     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
31074     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
31078     02 00 00 FF 
3107c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
31080                 | LR__4882
31080     15 2D 0A FB | 	rdlong	local04, local03 wz
31084     3C 00 90 AD |  if_e	jmp	#LR__4883
31088     16 13 02 F6 | 	mov	arg01, local04
3108c     13 15 02 F6 | 	mov	arg02, local01
31090     14 17 02 F6 | 	mov	arg03, local02
31094     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
31098     00 FA 0D F2 | 	cmp	result1, #0 wz
3109c     14 2F 02 A6 |  if_e	mov	local05, local02
310a0     16 2F 02 A1 |  if_e	add	local05, local04
310a4     17 31 C2 AA |  if_e	rdbyte	local06, local05
310a8     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
310ac                 | ' 			return name+len+1;
310ac     14 2D 02 A1 |  if_e	add	local04, local02
310b0     01 2C 06 A1 |  if_e	add	local04, #1
310b4     16 FB 01 A6 |  if_e	mov	result1, local04
310b8     0C 00 90 AD |  if_e	jmp	#LR__4884
310bc     04 2A 06 F1 | 	add	local03, #4
310c0     BC FF 9F FD | 	jmp	#LR__4882
310c4                 | LR__4883
310c4                 | ' 	}
310c4                 | ' 	return 0;
310c4     00 FA 05 F6 | 	mov	result1, #0
310c8                 | LR__4884
310c8     A7 F0 03 F6 | 	mov	ptra, fp
310cc     B2 00 A0 FD | 	call	#popregs_
310d0                 | _fatfs_cc_getenv_ret
310d0     2D 00 64 FD | 	ret
310d4                 | 
310d4                 | _fatfs_cc__get_fattime
310d4     00 4A 05 F6 | 	mov	COUNT_, #0
310d8     A8 00 A0 FD | 	call	#pushregs_
310dc     34 F0 07 F1 | 	add	ptra, #52
310e0     00 12 06 F6 | 	mov	arg01, #0
310e4     38 FB BF FD | 	call	#_fatfs_cc_time
310e8     04 4E 05 F1 | 	add	fp, #4
310ec     A7 FA 61 FC | 	wrlong	result1, fp
310f0     A7 12 02 F6 | 	mov	arg01, fp
310f4     0C 4E 05 F1 | 	add	fp, #12
310f8     A7 14 02 F6 | 	mov	arg02, fp
310fc     10 4E 85 F1 | 	sub	fp, #16
31100     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
31104     24 4E 05 F1 | 	add	fp, #36
31108     A7 14 02 FB | 	rdlong	arg02, fp
3110c     50 14 86 F1 | 	sub	arg02, #80
31110     09 14 66 F0 | 	shl	arg02, #9
31114     04 4E 85 F1 | 	sub	fp, #4
31118     A7 FA 01 FB | 	rdlong	result1, fp
3111c     01 FA 05 F1 | 	add	result1, #1
31120     05 FA 65 F0 | 	shl	result1, #5
31124     FD 14 42 F5 | 	or	arg02, result1
31128     04 4E 85 F1 | 	sub	fp, #4
3112c     A7 FA 01 FB | 	rdlong	result1, fp
31130     FD 14 42 F5 | 	or	arg02, result1
31134     14 4E 85 F1 | 	sub	fp, #20
31138     A7 14 62 FC | 	wrlong	arg02, fp
3113c     10 4E 05 F1 | 	add	fp, #16
31140     A7 14 02 FB | 	rdlong	arg02, fp
31144     0B 14 66 F0 | 	shl	arg02, #11
31148     04 4E 85 F1 | 	sub	fp, #4
3114c     A7 FA 01 FB | 	rdlong	result1, fp
31150     05 FA 65 F0 | 	shl	result1, #5
31154     FD 14 42 F5 | 	or	arg02, result1
31158     04 4E 85 F1 | 	sub	fp, #4
3115c     A7 FA 01 FB | 	rdlong	result1, fp
31160     FD 14 42 F5 | 	or	arg02, result1
31164     04 4E 85 F1 | 	sub	fp, #4
31168     A7 14 62 FC | 	wrlong	arg02, fp
3116c                 | ' 
3116c                 | '     now = time(0);
3116c                 | '     _gmtime_r (&now, &date);
3116c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
3116c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
3116c                 | '     return (ffdate << 16) | fftime;
3116c     04 4E 85 F1 | 	sub	fp, #4
31170     A7 FA 01 FB | 	rdlong	result1, fp
31174     10 FA 65 F0 | 	shl	result1, #16
31178     08 4E 85 F1 | 	sub	fp, #8
3117c     0A FB 41 F5 | 	or	result1, arg02
31180     A7 F0 03 F6 | 	mov	ptra, fp
31184     B2 00 A0 FD | 	call	#popregs_
31188                 | _fatfs_cc__get_fattime_ret
31188     2D 00 64 FD | 	ret
3118c                 | 
3118c                 | _fatfs_cc_unixtime_0984
3118c     00 4A 05 F6 | 	mov	COUNT_, #0
31190     A8 00 A0 FD | 	call	#pushregs_
31194     34 F0 07 F1 | 	add	ptra, #52
31198     04 4E 05 F1 | 	add	fp, #4
3119c     A7 12 62 FC | 	wrlong	arg01, fp
311a0     04 4E 05 F1 | 	add	fp, #4
311a4     A7 14 62 FC | 	wrlong	arg02, fp
311a8     04 4E 85 F1 | 	sub	fp, #4
311ac     A7 14 02 FB | 	rdlong	arg02, fp
311b0     09 14 46 F0 | 	shr	arg02, #9
311b4     7F 14 06 F5 | 	and	arg02, #127
311b8     50 FA 05 F6 | 	mov	result1, #80
311bc     0A FB 01 F1 | 	add	result1, arg02
311c0     20 4E 05 F1 | 	add	fp, #32
311c4     A7 FA 61 FC | 	wrlong	result1, fp
311c8     20 4E 85 F1 | 	sub	fp, #32
311cc     A7 FA 01 FB | 	rdlong	result1, fp
311d0     05 FA 45 F0 | 	shr	result1, #5
311d4     FD FA 41 F8 | 	getnib	result1, result1, #0
311d8     01 FA 85 F1 | 	sub	result1, #1
311dc     1C 4E 05 F1 | 	add	fp, #28
311e0     A7 FA 61 FC | 	wrlong	result1, fp
311e4     1C 4E 85 F1 | 	sub	fp, #28
311e8     A7 FA 01 FB | 	rdlong	result1, fp
311ec     1F FA 05 F5 | 	and	result1, #31
311f0     18 4E 05 F1 | 	add	fp, #24
311f4     A7 FA 61 FC | 	wrlong	result1, fp
311f8     14 4E 85 F1 | 	sub	fp, #20
311fc     A7 FA 01 FB | 	rdlong	result1, fp
31200     0B FA 45 F0 | 	shr	result1, #11
31204     1F FA 05 F5 | 	and	result1, #31
31208     10 4E 05 F1 | 	add	fp, #16
3120c     A7 FA 61 FC | 	wrlong	result1, fp
31210     10 4E 85 F1 | 	sub	fp, #16
31214     A7 FA 01 FB | 	rdlong	result1, fp
31218     05 FA 45 F0 | 	shr	result1, #5
3121c     3F FA 05 F5 | 	and	result1, #63
31220     0C 4E 05 F1 | 	add	fp, #12
31224     A7 FA 61 FC | 	wrlong	result1, fp
31228     0C 4E 85 F1 | 	sub	fp, #12
3122c     A7 14 02 FB | 	rdlong	arg02, fp
31230     1F 14 06 F5 | 	and	arg02, #31
31234     01 14 66 F0 | 	shl	arg02, #1
31238     08 4E 05 F1 | 	add	fp, #8
3123c     A7 14 62 FC | 	wrlong	arg02, fp
31240     A7 12 02 F6 | 	mov	arg01, fp
31244     10 4E 85 F1 | 	sub	fp, #16
31248     4C FA BF FD | 	call	#_fatfs_cc_mktime
3124c     0C 4E 05 F1 | 	add	fp, #12
31250     A7 FA 61 FC | 	wrlong	result1, fp
31254                 | ' 
31254                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
31254                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
31254                 | '     date.tm_mday = (dosdate & 0x1f);
31254                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
31254                 | '     date.tm_min = (dostime >> 5) & 0x3f;
31254                 | '     date.tm_sec = (dostime & 0x1f) << 1;
31254                 | ' 
31254                 | '     t = mktime(&date);
31254                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31254                 | '     return t;
31254     0C 4E 85 F1 | 	sub	fp, #12
31258     A7 F0 03 F6 | 	mov	ptra, fp
3125c     B2 00 A0 FD | 	call	#popregs_
31260                 | _fatfs_cc_unixtime_0984_ret
31260     2D 00 64 FD | 	ret
31264                 | 
31264                 | _fatfs_cc__set_dos_error_0986
31264     09 01 02 F6 | 	mov	_var01, arg01
31268                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31268                 | '     switch (derr) {
31268     14 00 26 F3 | 	fle	_var01, #20
3126c     30 00 62 FD | 	jmprel	_var01
31270                 | LR__4890
31270     50 00 90 FD | 	jmp	#LR__4891
31274     84 00 90 FD | 	jmp	#LR__4905
31278     80 00 90 FD | 	jmp	#LR__4906
3127c     7C 00 90 FD | 	jmp	#LR__4907
31280     48 00 90 FD | 	jmp	#LR__4892
31284     44 00 90 FD | 	jmp	#LR__4893
31288     40 00 90 FD | 	jmp	#LR__4894
3128c     44 00 90 FD | 	jmp	#LR__4895
31290     48 00 90 FD | 	jmp	#LR__4897
31294     54 00 90 FD | 	jmp	#LR__4900
31298     38 00 90 FD | 	jmp	#LR__4896
3129c     4C 00 90 FD | 	jmp	#LR__4901
312a0     48 00 90 FD | 	jmp	#LR__4902
312a4     44 00 90 FD | 	jmp	#LR__4903
312a8     50 00 90 FD | 	jmp	#LR__4908
312ac     4C 00 90 FD | 	jmp	#LR__4908
312b0     48 00 90 FD | 	jmp	#LR__4908
312b4     2C 00 90 FD | 	jmp	#LR__4898
312b8     38 00 90 FD | 	jmp	#LR__4904
312bc     2C 00 90 FD | 	jmp	#LR__4899
312c0     38 00 90 FD | 	jmp	#LR__4908
312c4                 | LR__4891
312c4     00 02 06 F6 | 	mov	_var02, #0
312c8                 | '         r = 0;
312c8                 | '         break;
312c8     34 00 90 FD | 	jmp	#LR__4909
312cc                 | LR__4892
312cc                 | LR__4893
312cc                 | LR__4894
312cc     04 02 06 F6 | 	mov	_var02, #4
312d0                 | '         r =  4 ;
312d0                 | '         break;
312d0     2C 00 90 FD | 	jmp	#LR__4909
312d4                 | LR__4895
312d4                 | LR__4896
312d4     06 02 06 F6 | 	mov	_var02, #6
312d8                 | '         r =  6 ;
312d8                 | '         break;
312d8     24 00 90 FD | 	jmp	#LR__4909
312dc                 | LR__4897
312dc     09 02 06 F6 | 	mov	_var02, #9
312e0                 | '         r =  9 ;
312e0                 | '         break;
312e0     1C 00 90 FD | 	jmp	#LR__4909
312e4                 | LR__4898
312e4     07 02 06 F6 | 	mov	_var02, #7
312e8                 | '         r =  7 ;
312e8                 | '         break;
312e8     14 00 90 FD | 	jmp	#LR__4909
312ec                 | LR__4899
312ec                 | LR__4900
312ec                 | LR__4901
312ec                 | LR__4902
312ec                 | LR__4903
312ec     0A 02 06 F6 | 	mov	_var02, #10
312f0                 | '         r =  10 ;
312f0                 | '         break;
312f0     0C 00 90 FD | 	jmp	#LR__4909
312f4                 | LR__4904
312f4     0B 02 06 F6 | 	mov	_var02, #11
312f8                 | '         r =  11 ;
312f8                 | '         break;
312f8     04 00 90 FD | 	jmp	#LR__4909
312fc                 | LR__4905
312fc                 | LR__4906
312fc                 | LR__4907
312fc                 | LR__4908
312fc     0C 02 06 F6 | 	mov	_var02, #12
31300                 | '         r =  12 ;
31300                 | '         break;
31300                 | LR__4909
31300                 | '     }
31300                 | '     return _seterror(r);
31300     00 02 4E F2 | 	cmps	_var02, #0 wz
31304     20 E6 05 F1 | 	add	ptr___system__dat__, #32
31308     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
3130c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
31310     01 FA 65 56 |  if_ne	neg	result1, #1
31314     00 FA 05 A6 |  if_e	mov	result1, #0
31318                 | _fatfs_cc__set_dos_error_0986_ret
31318     2D 00 64 FD | 	ret
3131c                 | 
3131c                 | _fatfs_cc_v_creat
3131c     04 4A 05 F6 | 	mov	COUNT_, #4
31320     A8 00 A0 FD | 	call	#pushregs_
31324     09 27 02 F6 | 	mov	local01, arg01
31328     0A 29 02 F6 | 	mov	local02, arg02
3132c     03 00 00 FF 
31330     3C 12 06 F6 | 	mov	arg01, ##1596
31334                 | '     return _gc_alloc(size);
31334     10 14 06 F6 | 	mov	arg02, #16
31338     28 5E BF FD | 	call	#__system___gc_doalloc
3133c     FD 2A 0A F6 | 	mov	local03, result1 wz
31340                 | '       return _seterror( 7 );
31340     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31344     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31348     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3134c     01 FA 65 A6 |  if_e	neg	result1, #1
31350     58 00 90 AD |  if_e	jmp	#LR__4911
31354     15 13 02 F6 | 	mov	arg01, local03
31358     00 14 06 F6 | 	mov	arg02, #0
3135c     03 00 00 FF 
31360     3C 16 06 F6 | 	mov	arg03, ##1596
31364     98 00 A0 FD | 	call	#\builtin_bytefill_
31368     02 00 00 FF 
3136c     14 2A 06 F1 | 	add	local03, ##1044
31370     15 13 02 F6 | 	mov	arg01, local03
31374     02 00 00 FF 
31378     14 2A 86 F1 | 	sub	local03, ##1044
3137c     14 15 02 F6 | 	mov	arg02, local02
31380     07 16 06 F6 | 	mov	arg03, #7
31384     B4 CC BF FD | 	call	#_fatfs_cc_f_open
31388     FD 2C 0A F6 | 	mov	local04, result1 wz
3138c     14 00 90 AD |  if_e	jmp	#LR__4910
31390     15 13 02 F6 | 	mov	arg01, local03
31394                 | '     return _gc_free(ptr);
31394     D8 5E BF FD | 	call	#__system___gc_free
31398                 | '     free(f);
31398                 | '     return _set_dos_error(r);
31398     16 13 02 F6 | 	mov	arg01, local04
3139c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0986
313a0     08 00 90 FD | 	jmp	#LR__4911
313a4                 | LR__4910
313a4     13 2B 62 FC | 	wrlong	local03, local01
313a8                 | '   }
313a8                 | '   fil->vfsdata = f;
313a8                 | '   return 0;
313a8     00 FA 05 F6 | 	mov	result1, #0
313ac                 | LR__4911
313ac     A7 F0 03 F6 | 	mov	ptra, fp
313b0     B2 00 A0 FD | 	call	#popregs_
313b4                 | _fatfs_cc_v_creat_ret
313b4     2D 00 64 FD | 	ret
313b8                 | 
313b8                 | _fatfs_cc_v_close
313b8     02 4A 05 F6 | 	mov	COUNT_, #2
313bc     A8 00 A0 FD | 	call	#pushregs_
313c0     09 27 02 FB | 	rdlong	local01, arg01
313c4     02 00 00 FF 
313c8     14 26 06 F1 | 	add	local01, ##1044
313cc     13 13 02 F6 | 	mov	arg01, local01
313d0     02 00 00 FF 
313d4     14 26 86 F1 | 	sub	local01, ##1044
313d8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
313dc     FD 28 02 F6 | 	mov	local02, result1
313e0     13 13 02 F6 | 	mov	arg01, local01
313e4                 | '     return _gc_free(ptr);
313e4     88 5E BF FD | 	call	#__system___gc_free
313e8                 | '     FAT_FIL *f = fil->vfsdata;
313e8                 | '     r=f_close(&f->fil);
313e8                 | '     free(f);
313e8                 | '     return _set_dos_error(r);
313e8     14 13 02 F6 | 	mov	arg01, local02
313ec     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0986
313f0     A7 F0 03 F6 | 	mov	ptra, fp
313f4     B2 00 A0 FD | 	call	#popregs_
313f8                 | _fatfs_cc_v_close_ret
313f8     2D 00 64 FD | 	ret
313fc                 | 
313fc                 | _fatfs_cc_v_opendir
313fc     04 4A 05 F6 | 	mov	COUNT_, #4
31400     A8 00 A0 FD | 	call	#pushregs_
31404     09 27 02 F6 | 	mov	local01, arg01
31408     0A 29 02 F6 | 	mov	local02, arg02
3140c     30 12 06 F6 | 	mov	arg01, #48
31410                 | '     return _gc_alloc(size);
31410     10 14 06 F6 | 	mov	arg02, #16
31414     4C 5D BF FD | 	call	#__system___gc_doalloc
31418     FD 2A 0A F6 | 	mov	local03, result1 wz
3141c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3141c                 | '       return _seterror( 7 );
3141c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31420     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31424     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
31428     01 FA 65 A6 |  if_e	neg	result1, #1
3142c     34 00 90 AD |  if_e	jmp	#LR__4921
31430     14 15 02 F6 | 	mov	arg02, local02
31434     15 13 02 F6 | 	mov	arg01, local03
31438     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
3143c     FD 2C 0A F6 | 	mov	local04, result1 wz
31440     14 00 90 AD |  if_e	jmp	#LR__4920
31444     15 13 02 F6 | 	mov	arg01, local03
31448                 | '     return _gc_free(ptr);
31448     24 5E BF FD | 	call	#__system___gc_free
3144c                 | '         free(f);
3144c                 | '         return _set_dos_error(r);
3144c     16 13 02 F6 | 	mov	arg01, local04
31450     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31454     0C 00 90 FD | 	jmp	#LR__4921
31458                 | LR__4920
31458     04 26 06 F1 | 	add	local01, #4
3145c     13 2B 62 FC | 	wrlong	local03, local01
31460                 | '     }
31460                 | '     dir->vfsdata = f;
31460                 | '     return 0;
31460     00 FA 05 F6 | 	mov	result1, #0
31464                 | LR__4921
31464     A7 F0 03 F6 | 	mov	ptra, fp
31468     B2 00 A0 FD | 	call	#popregs_
3146c                 | _fatfs_cc_v_opendir_ret
3146c     2D 00 64 FD | 	ret
31470                 | 
31470                 | _fatfs_cc_v_closedir
31470     02 4A 05 F6 | 	mov	COUNT_, #2
31474     A8 00 A0 FD | 	call	#pushregs_
31478     04 12 06 F1 | 	add	arg01, #4
3147c     09 27 02 FB | 	rdlong	local01, arg01
31480     13 13 02 F6 | 	mov	arg01, local01
31484     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
31488     FD 28 02 F6 | 	mov	local02, result1
3148c     13 13 02 F6 | 	mov	arg01, local01
31490                 | '     return _gc_free(ptr);
31490     DC 5D BF FD | 	call	#__system___gc_free
31494     00 28 0E F2 | 	cmp	local02, #0 wz
31498     14 13 02 56 |  if_ne	mov	arg01, local02
3149c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0986
314a0                 | '     return r;
314a0     14 FB 01 F6 | 	mov	result1, local02
314a4     A7 F0 03 F6 | 	mov	ptra, fp
314a8     B2 00 A0 FD | 	call	#popregs_
314ac                 | _fatfs_cc_v_closedir_ret
314ac     2D 00 64 FD | 	ret
314b0                 | 
314b0                 | _fatfs_cc_v_readdir
314b0     01 4A 05 F6 | 	mov	COUNT_, #1
314b4     A8 00 A0 FD | 	call	#pushregs_
314b8     2C F1 07 F1 | 	add	ptra, #300
314bc     04 4E 05 F1 | 	add	fp, #4
314c0     A7 12 62 FC | 	wrlong	arg01, fp
314c4     04 4E 05 F1 | 	add	fp, #4
314c8     A7 14 62 FC | 	wrlong	arg02, fp
314cc     04 4E 85 F1 | 	sub	fp, #4
314d0     A7 16 02 FB | 	rdlong	arg03, fp
314d4     04 16 06 F1 | 	add	arg03, #4
314d8     0B 13 02 FB | 	rdlong	arg01, arg03
314dc     08 4E 05 F1 | 	add	fp, #8
314e0     A7 14 02 F6 | 	mov	arg02, fp
314e4     0C 4E 85 F1 | 	sub	fp, #12
314e8     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
314ec     28 4F 05 F1 | 	add	fp, #296
314f0     A7 FA 61 FC | 	wrlong	result1, fp
314f4     28 4F 85 F1 | 	sub	fp, #296
314f8     00 FA 0D F2 | 	cmp	result1, #0 wz
314fc     14 00 90 AD |  if_e	jmp	#LR__4930
31500                 | '         return _set_dos_error(r);
31500     28 4F 05 F1 | 	add	fp, #296
31504     A7 12 02 FB | 	rdlong	arg01, fp
31508     28 4F 85 F1 | 	sub	fp, #296
3150c     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31510     C4 00 90 FD | 	jmp	#LR__4933
31514                 | LR__4930
31514     28 4E 05 F1 | 	add	fp, #40
31518     A7 16 CA FA | 	rdbyte	arg03, fp wz
3151c     28 4E 85 F1 | 	sub	fp, #40
31520                 | '         return -1;
31520     01 FA 65 A6 |  if_e	neg	result1, #1
31524     B0 00 90 AD |  if_e	jmp	#LR__4933
31528     08 4E 05 F1 | 	add	fp, #8
3152c     A7 12 02 FB | 	rdlong	arg01, fp
31530     20 4E 05 F1 | 	add	fp, #32
31534     A7 14 02 F6 | 	mov	arg02, fp
31538     28 4E 85 F1 | 	sub	fp, #40
3153c     3F 16 06 F6 | 	mov	arg03, #63
31540     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
31544     08 4E 05 F1 | 	add	fp, #8
31548     A7 16 02 FB | 	rdlong	arg03, fp
3154c     3F 16 06 F1 | 	add	arg03, #63
31550     0B 01 48 FC | 	wrbyte	#0, arg03
31554     0C 4E 05 F1 | 	add	fp, #12
31558     A7 16 C2 FA | 	rdbyte	arg03, fp
3155c     14 4E 85 F1 | 	sub	fp, #20
31560     10 16 CE F7 | 	test	arg03, #16 wz
31564     18 00 90 AD |  if_e	jmp	#LR__4931
31568     08 4E 05 F1 | 	add	fp, #8
3156c     A7 16 02 FB | 	rdlong	arg03, fp
31570     08 4E 85 F1 | 	sub	fp, #8
31574     50 16 06 F1 | 	add	arg03, #80
31578     0B 03 48 FC | 	wrbyte	#1, arg03
3157c     14 00 90 FD | 	jmp	#LR__4932
31580                 | LR__4931
31580     08 4E 05 F1 | 	add	fp, #8
31584     A7 16 02 FB | 	rdlong	arg03, fp
31588     08 4E 85 F1 | 	sub	fp, #8
3158c     50 16 06 F1 | 	add	arg03, #80
31590     0B 01 48 FC | 	wrbyte	#0, arg03
31594                 | LR__4932
31594     08 4E 05 F1 | 	add	fp, #8
31598     A7 16 02 FB | 	rdlong	arg03, fp
3159c     04 4E 05 F1 | 	add	fp, #4
315a0     A7 14 02 FB | 	rdlong	arg02, fp
315a4     48 16 06 F1 | 	add	arg03, #72
315a8     0B 15 62 FC | 	wrlong	arg02, arg03
315ac     04 4E 85 F1 | 	sub	fp, #4
315b0     A7 26 02 FB | 	rdlong	local01, fp
315b4     08 4E 05 F1 | 	add	fp, #8
315b8     A7 12 E2 FA | 	rdword	arg01, fp
315bc     02 4E 05 F1 | 	add	fp, #2
315c0     A7 14 E2 FA | 	rdword	arg02, fp
315c4     12 4E 85 F1 | 	sub	fp, #18
315c8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0984
315cc     4C 26 06 F1 | 	add	local01, #76
315d0     13 FB 61 FC | 	wrlong	result1, local01
315d4                 | '         ent->d_type =  (0) ;
315d4                 | '     }
315d4                 | '     ent->d_size = finfo.fsize;
315d4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
315d4                 | '     return 0;
315d4     00 FA 05 F6 | 	mov	result1, #0
315d8                 | LR__4933
315d8     A7 F0 03 F6 | 	mov	ptra, fp
315dc     B2 00 A0 FD | 	call	#popregs_
315e0                 | _fatfs_cc_v_readdir_ret
315e0     2D 00 64 FD | 	ret
315e4                 | 
315e4                 | _fatfs_cc_v_stat
315e4     03 4A 05 F6 | 	mov	COUNT_, #3
315e8     A8 00 A0 FD | 	call	#pushregs_
315ec     30 F1 07 F1 | 	add	ptra, #304
315f0     04 4E 05 F1 | 	add	fp, #4
315f4     A7 12 62 FC | 	wrlong	arg01, fp
315f8     04 4E 05 F1 | 	add	fp, #4
315fc     A7 14 62 FC | 	wrlong	arg02, fp
31600     08 4E 85 F1 | 	sub	fp, #8
31604     0A 13 02 F6 | 	mov	arg01, arg02
31608     00 14 06 F6 | 	mov	arg02, #0
3160c     30 16 06 F6 | 	mov	arg03, #48
31610     98 00 A0 FD | 	call	#\builtin_bytefill_
31614     04 4E 05 F1 | 	add	fp, #4
31618     A7 FA 01 FB | 	rdlong	result1, fp
3161c     04 4E 85 F1 | 	sub	fp, #4
31620     FD FA C9 FA | 	rdbyte	result1, result1 wz
31624     2C 00 90 AD |  if_e	jmp	#LR__4940
31628     04 4E 05 F1 | 	add	fp, #4
3162c     A7 FA 01 FB | 	rdlong	result1, fp
31630     04 4E 85 F1 | 	sub	fp, #4
31634     FD FA C1 FA | 	rdbyte	result1, result1
31638     2E FA 0D F2 | 	cmp	result1, #46 wz
3163c     04 4E 05 A1 |  if_e	add	fp, #4
31640     A7 26 02 AB |  if_e	rdlong	local01, fp
31644     04 4E 85 A1 |  if_e	sub	fp, #4
31648     01 26 06 A1 |  if_e	add	local01, #1
3164c     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
31650     18 00 90 5D |  if_ne	jmp	#LR__4941
31654                 | LR__4940
31654     18 4E 05 F1 | 	add	fp, #24
31658     A7 20 48 FC | 	wrbyte	#16, fp
3165c     0C 4E 85 F1 | 	sub	fp, #12
31660     A7 00 68 FC | 	wrlong	#0, fp
31664     0C 4E 85 F1 | 	sub	fp, #12
31668     24 00 90 FD | 	jmp	#LR__4942
3166c                 | LR__4941
3166c     04 4E 05 F1 | 	add	fp, #4
31670     A7 12 02 FB | 	rdlong	arg01, fp
31674     0C 4E 05 F1 | 	add	fp, #12
31678     A7 14 02 F6 | 	mov	arg02, fp
3167c     10 4E 85 F1 | 	sub	fp, #16
31680     AC EB BF FD | 	call	#_fatfs_cc_f_stat
31684     0C 4E 05 F1 | 	add	fp, #12
31688     A7 FA 61 FC | 	wrlong	result1, fp
3168c     0C 4E 85 F1 | 	sub	fp, #12
31690                 | LR__4942
31690     0C 4E 05 F1 | 	add	fp, #12
31694     A7 28 0A FB | 	rdlong	local02, fp wz
31698     0C 4E 85 F1 | 	sub	fp, #12
3169c     14 00 90 AD |  if_e	jmp	#LR__4943
316a0                 | '         return _set_dos_error(r);
316a0     0C 4E 05 F1 | 	add	fp, #12
316a4     A7 12 02 FB | 	rdlong	arg01, fp
316a8     0C 4E 85 F1 | 	sub	fp, #12
316ac     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0986
316b0     14 01 90 FD | 	jmp	#LR__4944
316b4                 | LR__4943
316b4     2C 4F 05 F1 | 	add	fp, #300
316b8     A7 48 6A FC | 	wrlong	#292, fp
316bc     14 4F 85 F1 | 	sub	fp, #276
316c0     A7 2A C2 FA | 	rdbyte	local03, fp
316c4     18 4E 85 F1 | 	sub	fp, #24
316c8     01 2A CE F7 | 	test	local03, #1 wz
316cc     2C 4F 05 A1 |  if_e	add	fp, #300
316d0     A7 2A 02 AB |  if_e	rdlong	local03, fp
316d4     92 2A 46 A5 |  if_e	or	local03, #146
316d8     A7 2A 62 AC |  if_e	wrlong	local03, fp
316dc     2C 4F 85 A1 |  if_e	sub	fp, #300
316e0     18 4E 05 F1 | 	add	fp, #24
316e4     A7 2A C2 FA | 	rdbyte	local03, fp
316e8     18 4E 85 F1 | 	sub	fp, #24
316ec     10 2A CE F7 | 	test	local03, #16 wz
316f0     2C 4F 05 51 |  if_ne	add	fp, #300
316f4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
316f8     08 00 00 5F 
316fc     49 2A 46 55 |  if_ne	or	local03, ##4169
31700     A7 2A 62 5C |  if_ne	wrlong	local03, fp
31704     2C 4F 85 51 |  if_ne	sub	fp, #300
31708     08 4E 05 F1 | 	add	fp, #8
3170c     A7 2A 02 FB | 	rdlong	local03, fp
31710     24 4F 05 F1 | 	add	fp, #292
31714     A7 28 02 FB | 	rdlong	local02, fp
31718     08 2A 06 F1 | 	add	local03, #8
3171c     15 29 62 FC | 	wrlong	local02, local03
31720     24 4F 85 F1 | 	sub	fp, #292
31724     A7 2A 02 FB | 	rdlong	local03, fp
31728     0C 2A 06 F1 | 	add	local03, #12
3172c     15 03 68 FC | 	wrlong	#1, local03
31730     A7 2A 02 FB | 	rdlong	local03, fp
31734     08 4E 05 F1 | 	add	fp, #8
31738     A7 28 02 FB | 	rdlong	local02, fp
3173c     18 2A 06 F1 | 	add	local03, #24
31740     15 29 62 FC | 	wrlong	local02, local03
31744     08 4E 85 F1 | 	sub	fp, #8
31748     A7 2A 02 FB | 	rdlong	local03, fp
3174c     1C 2A 06 F1 | 	add	local03, #28
31750     01 00 80 FF 
31754     15 01 68 FC | 	wrlong	##512, local03
31758     A7 28 02 FB | 	rdlong	local02, fp
3175c     14 2B 02 F6 | 	mov	local03, local02
31760     18 28 06 F1 | 	add	local02, #24
31764     14 29 02 FB | 	rdlong	local02, local02
31768     FF 29 06 F1 | 	add	local02, #511
3176c     14 29 52 F6 | 	abs	local02, local02 wc
31770     09 28 46 F0 | 	shr	local02, #9
31774     14 29 82 F6 | 	negc	local02, local02
31778     20 2A 06 F1 | 	add	local03, #32
3177c     15 29 62 FC | 	wrlong	local02, local03
31780     A7 28 02 FB | 	rdlong	local02, fp
31784     14 2B 02 F6 | 	mov	local03, local02
31788     14 27 02 F6 | 	mov	local01, local02
3178c     0C 4E 05 F1 | 	add	fp, #12
31790     A7 12 E2 FA | 	rdword	arg01, fp
31794     02 4E 05 F1 | 	add	fp, #2
31798     A7 14 E2 FA | 	rdword	arg02, fp
3179c     16 4E 85 F1 | 	sub	fp, #22
317a0     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0984
317a4     2C 26 06 F1 | 	add	local01, #44
317a8     13 FB 61 FC | 	wrlong	result1, local01
317ac     28 28 06 F1 | 	add	local02, #40
317b0     14 FB 61 FC | 	wrlong	result1, local02
317b4     24 2A 06 F1 | 	add	local03, #36
317b8     15 FB 61 FC | 	wrlong	result1, local03
317bc                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
317bc                 | '     }
317bc                 | '     buf->st_mode = mode;
317bc                 | '     buf->st_nlink = 1;
317bc                 | '     buf->st_size = finfo.fsize;
317bc                 | '     buf->st_blksize = 512;
317bc                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
317bc                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
317bc                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
317bc                 | '     return r;
317bc     0C 4E 05 F1 | 	add	fp, #12
317c0     A7 FA 01 FB | 	rdlong	result1, fp
317c4     0C 4E 85 F1 | 	sub	fp, #12
317c8                 | LR__4944
317c8     A7 F0 03 F6 | 	mov	ptra, fp
317cc     B2 00 A0 FD | 	call	#popregs_
317d0                 | _fatfs_cc_v_stat_ret
317d0     2D 00 64 FD | 	ret
317d4                 | 
317d4                 | _fatfs_cc_v_read
317d4     00 4A 05 F6 | 	mov	COUNT_, #0
317d8     A8 00 A0 FD | 	call	#pushregs_
317dc     1C F0 07 F1 | 	add	ptra, #28
317e0     04 4E 05 F1 | 	add	fp, #4
317e4     A7 12 62 FC | 	wrlong	arg01, fp
317e8     04 4E 05 F1 | 	add	fp, #4
317ec     A7 14 62 FC | 	wrlong	arg02, fp
317f0     04 4E 05 F1 | 	add	fp, #4
317f4     A7 16 62 FC | 	wrlong	arg03, fp
317f8     08 4E 85 F1 | 	sub	fp, #8
317fc     A7 12 02 FB | 	rdlong	arg01, fp
31800     09 13 0A FB | 	rdlong	arg01, arg01 wz
31804     0C 4E 05 F1 | 	add	fp, #12
31808     A7 12 62 FC | 	wrlong	arg01, fp
3180c     10 4E 85 F1 | 	sub	fp, #16
31810                 | '         return _seterror( 5 );
31810     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31814     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31818     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3181c     01 FA 65 A6 |  if_e	neg	result1, #1
31820     B8 00 90 AD |  if_e	jmp	#LR__4952
31824     10 4E 05 F1 | 	add	fp, #16
31828     A7 12 02 FB | 	rdlong	arg01, fp
3182c     02 00 00 FF 
31830     14 12 06 F1 | 	add	arg01, ##1044
31834     08 4E 85 F1 | 	sub	fp, #8
31838     A7 14 02 FB | 	rdlong	arg02, fp
3183c     04 4E 05 F1 | 	add	fp, #4
31840     A7 16 02 FB | 	rdlong	arg03, fp
31844     0C 4E 05 F1 | 	add	fp, #12
31848     A7 18 02 F6 | 	mov	arg04, fp
3184c     18 4E 85 F1 | 	sub	fp, #24
31850     C4 CE BF FD | 	call	#_fatfs_cc_f_read
31854     14 4E 05 F1 | 	add	fp, #20
31858     A7 FA 61 FC | 	wrlong	result1, fp
3185c     14 4E 85 F1 | 	sub	fp, #20
31860     00 FA 0D F2 | 	cmp	result1, #0 wz
31864     34 00 90 AD |  if_e	jmp	#LR__4950
31868     04 4E 05 F1 | 	add	fp, #4
3186c     A7 18 02 FB | 	rdlong	arg04, fp
31870     0C 17 02 F6 | 	mov	arg03, arg04
31874     08 18 06 F1 | 	add	arg04, #8
31878     0C 19 02 FB | 	rdlong	arg04, arg04
3187c     20 18 46 F5 | 	or	arg04, #32
31880     08 16 06 F1 | 	add	arg03, #8
31884     0B 19 62 FC | 	wrlong	arg04, arg03
31888                 | '         fil->state |=  (0x20) ;
31888                 | '         return _set_dos_error(r);
31888     10 4E 05 F1 | 	add	fp, #16
3188c     A7 12 02 FB | 	rdlong	arg01, fp
31890     14 4E 85 F1 | 	sub	fp, #20
31894     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31898     40 00 90 FD | 	jmp	#LR__4952
3189c                 | LR__4950
3189c     18 4E 05 F1 | 	add	fp, #24
318a0     A7 FA 09 FB | 	rdlong	result1, fp wz
318a4     18 4E 85 F1 | 	sub	fp, #24
318a8     24 00 90 5D |  if_ne	jmp	#LR__4951
318ac     04 4E 05 F1 | 	add	fp, #4
318b0     A7 FA 01 FB | 	rdlong	result1, fp
318b4     FD 18 02 F6 | 	mov	arg04, result1
318b8     04 4E 85 F1 | 	sub	fp, #4
318bc     08 FA 05 F1 | 	add	result1, #8
318c0     FD FA 01 FB | 	rdlong	result1, result1
318c4     10 FA 45 F5 | 	or	result1, #16
318c8     08 18 06 F1 | 	add	arg04, #8
318cc     0C FB 61 FC | 	wrlong	result1, arg04
318d0                 | LR__4951
318d0                 | '         fil->state |=  (0x10) ;
318d0                 | '     }
318d0                 | '     return x;
318d0     18 4E 05 F1 | 	add	fp, #24
318d4     A7 FA 01 FB | 	rdlong	result1, fp
318d8     18 4E 85 F1 | 	sub	fp, #24
318dc                 | LR__4952
318dc     A7 F0 03 F6 | 	mov	ptra, fp
318e0     B2 00 A0 FD | 	call	#popregs_
318e4                 | _fatfs_cc_v_read_ret
318e4     2D 00 64 FD | 	ret
318e8                 | 
318e8                 | _fatfs_cc_v_write
318e8     00 4A 05 F6 | 	mov	COUNT_, #0
318ec     A8 00 A0 FD | 	call	#pushregs_
318f0     1C F0 07 F1 | 	add	ptra, #28
318f4     04 4E 05 F1 | 	add	fp, #4
318f8     A7 12 62 FC | 	wrlong	arg01, fp
318fc     04 4E 05 F1 | 	add	fp, #4
31900     A7 14 62 FC | 	wrlong	arg02, fp
31904     04 4E 05 F1 | 	add	fp, #4
31908     A7 16 62 FC | 	wrlong	arg03, fp
3190c     08 4E 85 F1 | 	sub	fp, #8
31910     A7 12 02 FB | 	rdlong	arg01, fp
31914     09 13 0A FB | 	rdlong	arg01, arg01 wz
31918     0C 4E 05 F1 | 	add	fp, #12
3191c     A7 12 62 FC | 	wrlong	arg01, fp
31920     10 4E 85 F1 | 	sub	fp, #16
31924                 | '         return _seterror( 5 );
31924     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31928     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3192c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
31930     01 FA 65 A6 |  if_e	neg	result1, #1
31934     84 00 90 AD |  if_e	jmp	#LR__4961
31938     10 4E 05 F1 | 	add	fp, #16
3193c     A7 12 02 FB | 	rdlong	arg01, fp
31940     02 00 00 FF 
31944     14 12 06 F1 | 	add	arg01, ##1044
31948     08 4E 85 F1 | 	sub	fp, #8
3194c     A7 14 02 FB | 	rdlong	arg02, fp
31950     04 4E 05 F1 | 	add	fp, #4
31954     A7 16 02 FB | 	rdlong	arg03, fp
31958     0C 4E 05 F1 | 	add	fp, #12
3195c     A7 18 02 F6 | 	mov	arg04, fp
31960     18 4E 85 F1 | 	sub	fp, #24
31964     4C D4 BF FD | 	call	#_fatfs_cc_f_write
31968     14 4E 05 F1 | 	add	fp, #20
3196c     A7 FA 61 FC | 	wrlong	result1, fp
31970     14 4E 85 F1 | 	sub	fp, #20
31974     00 FA 0D F2 | 	cmp	result1, #0 wz
31978     34 00 90 AD |  if_e	jmp	#LR__4960
3197c     04 4E 05 F1 | 	add	fp, #4
31980     A7 18 02 FB | 	rdlong	arg04, fp
31984     0C 17 02 F6 | 	mov	arg03, arg04
31988     08 18 06 F1 | 	add	arg04, #8
3198c     0C 19 02 FB | 	rdlong	arg04, arg04
31990     20 18 46 F5 | 	or	arg04, #32
31994     08 16 06 F1 | 	add	arg03, #8
31998     0B 19 62 FC | 	wrlong	arg04, arg03
3199c                 | '         fil->state |=  (0x20) ;
3199c                 | '         return _set_dos_error(r);
3199c     10 4E 05 F1 | 	add	fp, #16
319a0     A7 12 02 FB | 	rdlong	arg01, fp
319a4     14 4E 85 F1 | 	sub	fp, #20
319a8     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
319ac     0C 00 90 FD | 	jmp	#LR__4961
319b0                 | LR__4960
319b0                 | '     }
319b0                 | '     return x;
319b0     18 4E 05 F1 | 	add	fp, #24
319b4     A7 FA 01 FB | 	rdlong	result1, fp
319b8     18 4E 85 F1 | 	sub	fp, #24
319bc                 | LR__4961
319bc     A7 F0 03 F6 | 	mov	ptra, fp
319c0     B2 00 A0 FD | 	call	#popregs_
319c4                 | _fatfs_cc_v_write_ret
319c4     2D 00 64 FD | 	ret
319c8                 | 
319c8                 | _fatfs_cc_v_lseek
319c8     04 4A 05 F6 | 	mov	COUNT_, #4
319cc     A8 00 A0 FD | 	call	#pushregs_
319d0     0A 27 02 F6 | 	mov	local01, arg02
319d4     0B 29 02 F6 | 	mov	local02, arg03
319d8     09 2B 02 FB | 	rdlong	local03, arg01
319dc     02 00 00 FF 
319e0     14 2A 0E F1 | 	add	local03, ##1044 wz
319e4                 | '         return _seterror( 5 );
319e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
319e8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
319ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
319f0     01 FA 65 A6 |  if_e	neg	result1, #1
319f4     4C 00 90 AD |  if_e	jmp	#LR__4972
319f8     00 28 0E F2 | 	cmp	local02, #0 wz
319fc     24 00 90 AD |  if_e	jmp	#LR__4970
31a00     01 28 0E F2 | 	cmp	local02, #1 wz
31a04     14 2A 06 A1 |  if_e	add	local03, #20
31a08     15 2D 02 AB |  if_e	rdlong	local04, local03
31a0c     14 2A 86 A1 |  if_e	sub	local03, #20
31a10     16 27 02 A1 |  if_e	add	local01, local04
31a14     0C 2A 06 51 |  if_ne	add	local03, #12
31a18     15 2D 02 5B |  if_ne	rdlong	local04, local03
31a1c     0C 2A 86 51 |  if_ne	sub	local03, #12
31a20     16 27 02 51 |  if_ne	add	local01, local04
31a24                 | LR__4970
31a24     13 15 02 F6 | 	mov	arg02, local01
31a28     15 13 02 F6 | 	mov	arg01, local03
31a2c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
31a30     FD 12 0A F6 | 	mov	arg01, result1 wz
31a34     08 00 90 AD |  if_e	jmp	#LR__4971
31a38                 | '         return _set_dos_error(result);
31a38     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31a3c     04 00 90 FD | 	jmp	#LR__4972
31a40                 | LR__4971
31a40                 | '     }
31a40                 | '     return offset;
31a40     13 FB 01 F6 | 	mov	result1, local01
31a44                 | LR__4972
31a44     A7 F0 03 F6 | 	mov	ptra, fp
31a48     B2 00 A0 FD | 	call	#popregs_
31a4c                 | _fatfs_cc_v_lseek_ret
31a4c     2D 00 64 FD | 	ret
31a50                 | 
31a50                 | _fatfs_cc_v_ioctl
31a50                 | ' {
31a50                 | '     return _seterror( 10 );
31a50     20 E6 05 F1 | 	add	ptr___system__dat__, #32
31a54     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
31a58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
31a5c     01 FA 65 F6 | 	neg	result1, #1
31a60                 | _fatfs_cc_v_ioctl_ret
31a60     2D 00 64 FD | 	ret
31a64                 | 
31a64                 | _fatfs_cc_v_mkdir
31a64     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
31a68     FD 12 02 F6 | 	mov	arg01, result1
31a6c                 | ' 
31a6c                 | '     r = f_mkdir(name);
31a6c                 | '     return _set_dos_error(r);
31a6c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31a70                 | _fatfs_cc_v_mkdir_ret
31a70     2D 00 64 FD | 	ret
31a74                 | 
31a74                 | _fatfs_cc_v_remove
31a74     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
31a78     FD 12 02 F6 | 	mov	arg01, result1
31a7c                 | ' 
31a7c                 | '     r = f_unlink(name);
31a7c                 | '     return _set_dos_error(r);
31a7c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31a80                 | _fatfs_cc_v_remove_ret
31a80     2D 00 64 FD | 	ret
31a84                 | 
31a84                 | _fatfs_cc_v_rmdir
31a84     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
31a88     FD 12 02 F6 | 	mov	arg01, result1
31a8c                 | ' 
31a8c                 | '     r = f_unlink(name);
31a8c                 | '     return _set_dos_error(r);
31a8c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31a90                 | _fatfs_cc_v_rmdir_ret
31a90     2D 00 64 FD | 	ret
31a94                 | 
31a94                 | _fatfs_cc_v_rename
31a94     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
31a98     FD 12 02 F6 | 	mov	arg01, result1
31a9c                 | '     return _set_dos_error(r);
31a9c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31aa0                 | _fatfs_cc_v_rename_ret
31aa0     2D 00 64 FD | 	ret
31aa4                 | 
31aa4                 | _fatfs_cc_v_open
31aa4     07 4A 05 F6 | 	mov	COUNT_, #7
31aa8     A8 00 A0 FD | 	call	#pushregs_
31aac     09 27 02 F6 | 	mov	local01, arg01
31ab0     0A 29 02 F6 | 	mov	local02, arg02
31ab4     0B 2B 02 F6 | 	mov	local03, arg03
31ab8     03 00 00 FF 
31abc     3C 12 06 F6 | 	mov	arg01, ##1596
31ac0                 | '     return _gc_alloc(size);
31ac0     10 14 06 F6 | 	mov	arg02, #16
31ac4     9C 56 BF FD | 	call	#__system___gc_doalloc
31ac8     FD 2C 0A F6 | 	mov	local04, result1 wz
31acc                 | '       return _seterror( 7 );
31acc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31ad0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31ad4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
31ad8     01 FA 65 A6 |  if_e	neg	result1, #1
31adc     98 00 90 AD |  if_e	jmp	#LR__4986
31ae0     16 13 02 F6 | 	mov	arg01, local04
31ae4     00 14 06 F6 | 	mov	arg02, #0
31ae8     03 00 00 FF 
31aec     3C 16 06 F6 | 	mov	arg03, ##1596
31af0     98 00 A0 FD | 	call	#\builtin_bytefill_
31af4                 | '   switch (flags & 3) {
31af4     15 2F 02 F6 | 	mov	local05, local03
31af8     03 2E 0E F5 | 	and	local05, #3 wz
31afc     0C 00 90 AD |  if_e	jmp	#LR__4980
31b00     01 2E 0E F2 | 	cmp	local05, #1 wz
31b04     0C 00 90 AD |  if_e	jmp	#LR__4981
31b08     10 00 90 FD | 	jmp	#LR__4982
31b0c                 | LR__4980
31b0c     01 30 06 F6 | 	mov	local06, #1
31b10                 | '       fs_flags =  0x01 ;
31b10                 | '       break;
31b10     0C 00 90 FD | 	jmp	#LR__4983
31b14                 | LR__4981
31b14     02 30 06 F6 | 	mov	local06, #2
31b18                 | '       fs_flags =  0x02 ;
31b18                 | '       break;
31b18     04 00 90 FD | 	jmp	#LR__4983
31b1c                 | LR__4982
31b1c     03 30 06 F6 | 	mov	local06, #3
31b20                 | '       fs_flags =  0x01  |  0x02 ;
31b20                 | '       break;
31b20                 | LR__4983
31b20     08 2A CE F7 | 	test	local03, #8 wz
31b24     18 30 46 55 |  if_ne	or	local06, #24
31b28     08 00 90 5D |  if_ne	jmp	#LR__4984
31b2c     20 2A CE F7 | 	test	local03, #32 wz
31b30     30 30 46 55 |  if_ne	or	local06, #48
31b34                 | LR__4984
31b34     02 00 00 FF 
31b38     14 2C 06 F1 | 	add	local04, ##1044
31b3c     16 13 02 F6 | 	mov	arg01, local04
31b40     02 00 00 FF 
31b44     14 2C 86 F1 | 	sub	local04, ##1044
31b48     14 15 02 F6 | 	mov	arg02, local02
31b4c     18 17 02 F6 | 	mov	arg03, local06
31b50     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
31b54     FD 32 0A F6 | 	mov	local07, result1 wz
31b58     14 00 90 AD |  if_e	jmp	#LR__4985
31b5c     16 13 02 F6 | 	mov	arg01, local04
31b60                 | '     return _gc_free(ptr);
31b60     0C 57 BF FD | 	call	#__system___gc_free
31b64                 | '     free(f);
31b64                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31b64                 | '     return _set_dos_error(r);
31b64     19 13 02 F6 | 	mov	arg01, local07
31b68     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31b6c     08 00 90 FD | 	jmp	#LR__4986
31b70                 | LR__4985
31b70     13 2D 62 FC | 	wrlong	local04, local01
31b74                 | '   }
31b74                 | '   fil->vfsdata = f;
31b74                 | '   return 0;
31b74     00 FA 05 F6 | 	mov	result1, #0
31b78                 | LR__4986
31b78     A7 F0 03 F6 | 	mov	ptra, fp
31b7c     B2 00 A0 FD | 	call	#popregs_
31b80                 | _fatfs_cc_v_open_ret
31b80     2D 00 64 FD | 	ret
31b84                 | 
31b84                 | _fatfs_cc_v_flush
31b84     09 13 02 FB | 	rdlong	arg01, arg01
31b88     02 00 00 FF 
31b8c     14 12 0E F1 | 	add	arg01, ##1044 wz
31b90                 | '         return _seterror( 5 );
31b90     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31b94     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31b98     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
31b9c     01 FA 65 A6 |  if_e	neg	result1, #1
31ba0     0C 00 90 AD |  if_e	jmp	#LR__4990
31ba4     00 DA BF FD | 	call	#_fatfs_cc_f_sync
31ba8     FD 12 02 F6 | 	mov	arg01, result1
31bac                 | '     }
31bac                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31bac                 | '     result = f_sync(f);
31bac                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31bac                 | '     return _set_dos_error(result);
31bac     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0986
31bb0                 | LR__4990
31bb0                 | _fatfs_cc_v_flush_ret
31bb0     2D 00 64 FD | 	ret
31bb4                 | 
31bb4                 | _fatfs_cc_v_init
31bb4                 | ' {
31bb4                 | '     return 0;
31bb4     00 FA 05 F6 | 	mov	result1, #0
31bb8                 | _fatfs_cc_v_init_ret
31bb8     2D 00 64 FD | 	ret
31bbc                 | 
31bbc                 | _fatfs_cc_v_deinit
31bbc     95 01 00 FF 
31bc0     30 15 06 F6 | 	mov	arg02, ##@LR__5186
31bc4     00 12 06 F6 | 	mov	arg01, #0
31bc8     00 16 06 F6 | 	mov	arg03, #0
31bcc     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
31bd0     01 00 00 FF 
31bd4     08 E4 05 F1 | 	add	objptr, ##520
31bd8     F2 12 02 FB | 	rdlong	arg01, objptr
31bdc     04 E4 05 F1 | 	add	objptr, #4
31be0     F2 14 02 FB | 	rdlong	arg02, objptr
31be4     01 00 00 FF 
31be8     0C E4 85 F1 | 	sub	objptr, ##524
31bec     F0 3D BF FD | 	call	#__system___freepins
31bf0                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31bf0                 | '     _freepins(f_pinmask);
31bf0                 | '     return 0;
31bf0     00 FA 05 F6 | 	mov	result1, #0
31bf4                 | _fatfs_cc_v_deinit_ret
31bf4     2D 00 64 FD | 	ret
31bf8                 | 
31bf8                 | _fatfs_cc_get_vfs
31bf8     01 4A 05 F6 | 	mov	COUNT_, #1
31bfc     A8 00 A0 FD | 	call	#pushregs_
31c00     09 27 02 F6 | 	mov	local01, arg01
31c04     50 12 06 F6 | 	mov	arg01, #80
31c08     28 55 BF FD | 	call	#__system___gc_alloc_managed
31c0c     FD 12 02 F6 | 	mov	arg01, result1
31c10     F2 FA 01 F6 | 	mov	result1, objptr
31c14     00 20 05 FF 
31c18     00 FA 45 F5 | 	or	result1, ##171966464
31c1c     09 FB 61 FC | 	wrlong	result1, arg01
31c20     F2 FA 01 F6 | 	mov	result1, objptr
31c24     00 28 05 FF 
31c28     00 FA 45 F5 | 	or	result1, ##173015040
31c2c     04 12 06 F1 | 	add	arg01, #4
31c30     09 FB 61 FC | 	wrlong	result1, arg01
31c34     F2 FA 01 F6 | 	mov	result1, objptr
31c38     00 30 05 FF 
31c3c     00 FA 45 F5 | 	or	result1, ##174063616
31c40     04 12 06 F1 | 	add	arg01, #4
31c44     09 FB 61 FC | 	wrlong	result1, arg01
31c48     F2 FA 01 F6 | 	mov	result1, objptr
31c4c     00 38 05 FF 
31c50     00 FA 45 F5 | 	or	result1, ##175112192
31c54     04 12 06 F1 | 	add	arg01, #4
31c58     09 FB 61 FC | 	wrlong	result1, arg01
31c5c     F2 FA 01 F6 | 	mov	result1, objptr
31c60     00 40 05 FF 
31c64     00 FA 45 F5 | 	or	result1, ##176160768
31c68     04 12 06 F1 | 	add	arg01, #4
31c6c     09 FB 61 FC | 	wrlong	result1, arg01
31c70     04 12 06 F1 | 	add	arg01, #4
31c74     09 01 68 FC | 	wrlong	#0, arg01
31c78     04 12 06 F1 | 	add	arg01, #4
31c7c     09 27 62 FC | 	wrlong	local01, arg01
31c80     04 12 06 F1 | 	add	arg01, #4
31c84     09 01 68 FC | 	wrlong	#0, arg01
31c88     F2 FA 01 F6 | 	mov	result1, objptr
31c8c     00 48 05 FF 
31c90     00 FA 45 F5 | 	or	result1, ##177209344
31c94     04 12 06 F1 | 	add	arg01, #4
31c98     09 FB 61 FC | 	wrlong	result1, arg01
31c9c     F2 FA 01 F6 | 	mov	result1, objptr
31ca0     00 50 05 FF 
31ca4     00 FA 45 F5 | 	or	result1, ##178257920
31ca8     04 12 06 F1 | 	add	arg01, #4
31cac     09 FB 61 FC | 	wrlong	result1, arg01
31cb0     F2 FA 01 F6 | 	mov	result1, objptr
31cb4     00 58 05 FF 
31cb8     00 FA 45 F5 | 	or	result1, ##179306496
31cbc     04 12 06 F1 | 	add	arg01, #4
31cc0     09 FB 61 FC | 	wrlong	result1, arg01
31cc4     F2 FA 01 F6 | 	mov	result1, objptr
31cc8     00 60 05 FF 
31ccc     00 FA 45 F5 | 	or	result1, ##180355072
31cd0     04 12 06 F1 | 	add	arg01, #4
31cd4     09 FB 61 FC | 	wrlong	result1, arg01
31cd8     F2 FA 01 F6 | 	mov	result1, objptr
31cdc     00 68 05 FF 
31ce0     00 FA 45 F5 | 	or	result1, ##181403648
31ce4     04 12 06 F1 | 	add	arg01, #4
31ce8     09 FB 61 FC | 	wrlong	result1, arg01
31cec     F2 FA 01 F6 | 	mov	result1, objptr
31cf0     00 70 05 FF 
31cf4     00 FA 45 F5 | 	or	result1, ##182452224
31cf8     04 12 06 F1 | 	add	arg01, #4
31cfc     09 FB 61 FC | 	wrlong	result1, arg01
31d00     F2 FA 01 F6 | 	mov	result1, objptr
31d04     00 78 05 FF 
31d08     00 FA 45 F5 | 	or	result1, ##183500800
31d0c     04 12 06 F1 | 	add	arg01, #4
31d10     09 FB 61 FC | 	wrlong	result1, arg01
31d14     F2 FA 01 F6 | 	mov	result1, objptr
31d18     00 80 05 FF 
31d1c     00 FA 45 F5 | 	or	result1, ##184549376
31d20     04 12 06 F1 | 	add	arg01, #4
31d24     09 FB 61 FC | 	wrlong	result1, arg01
31d28     F2 FA 01 F6 | 	mov	result1, objptr
31d2c     00 88 05 FF 
31d30     00 FA 45 F5 | 	or	result1, ##185597952
31d34     04 12 06 F1 | 	add	arg01, #4
31d38     09 FB 61 FC | 	wrlong	result1, arg01
31d3c     F2 FA 01 F6 | 	mov	result1, objptr
31d40     00 90 05 FF 
31d44     00 FA 45 F5 | 	or	result1, ##186646528
31d48     04 12 06 F1 | 	add	arg01, #4
31d4c     09 FB 61 FC | 	wrlong	result1, arg01
31d50     F2 FA 01 F6 | 	mov	result1, objptr
31d54     00 98 05 FF 
31d58     00 FA 45 F5 | 	or	result1, ##187695104
31d5c     04 12 06 F1 | 	add	arg01, #4
31d60     09 FB 61 FC | 	wrlong	result1, arg01
31d64     F2 FA 01 F6 | 	mov	result1, objptr
31d68     00 A0 05 FF 
31d6c     00 FA 45 F5 | 	or	result1, ##188743680
31d70     04 12 06 F1 | 	add	arg01, #4
31d74     09 FB 61 FC | 	wrlong	result1, arg01
31d78     4C 12 86 F1 | 	sub	arg01, #76
31d7c                 | ' 
31d7c                 | '     v->close = &v_close;
31d7c                 | '     v->read = &v_read;
31d7c                 | '     v->write = &v_write;
31d7c                 | '     v->lseek = &v_lseek;
31d7c                 | '     v->ioctl = &v_ioctl;
31d7c                 | '     v->flush = 0;
31d7c                 | '     v->vfs_data = ptr;
31d7c                 | '     v->reserved = 0;
31d7c                 | ' 
31d7c                 | '     v->open = &v_open;
31d7c                 | '     v->creat = &v_creat;
31d7c                 | '     v->opendir = &v_opendir;
31d7c                 | '     v->closedir = &v_closedir;
31d7c                 | '     v->readdir = &v_readdir;
31d7c                 | '     v->stat = &v_stat;
31d7c                 | ' 
31d7c                 | '     v->mkdir = &v_mkdir;
31d7c                 | '     v->rmdir = &v_rmdir;
31d7c                 | ' 
31d7c                 | '     v->remove = &v_remove;
31d7c                 | '     v->rename = &v_rename;
31d7c                 | ' 
31d7c                 | '     v->init = &v_init;
31d7c                 | '     v->deinit = &v_deinit;
31d7c                 | ' 
31d7c                 | '     return v;
31d7c     09 FB 01 F6 | 	mov	result1, arg01
31d80     A7 F0 03 F6 | 	mov	ptra, fp
31d84     B2 00 A0 FD | 	call	#popregs_
31d88                 | _fatfs_cc_get_vfs_ret
31d88     2D 00 64 FD | 	ret
31d8c                 | 
31d8c                 | _fatfs_cc_xmit_mmc_1137
31d8c     01 00 00 FF 
31d90     10 E4 05 F1 | 	add	objptr, ##528
31d94     F2 00 02 FB | 	rdlong	_var01, objptr
31d98     08 E4 05 F1 | 	add	objptr, #8
31d9c     F2 02 02 FB | 	rdlong	_var02, objptr
31da0     01 00 00 FF 
31da4     18 E4 85 F1 | 	sub	objptr, ##536
31da8     40 02 62 FD | 	dirl	_var02
31dac     28 02 64 FD | 	setq	#1
31db0     09 05 02 FB | 	rdlong	_var03, arg01
31db4     69 04 62 FD | 	rev	_var03
31db8     1B 04 FE F9 | 	movbyts	_var03, #27
31dbc     01 05 22 FC | 	wypin	_var03, _var02
31dc0     0A 05 02 F6 | 	mov	_var03, arg02
31dc4     02 14 4E F0 | 	shr	arg02, #2 wz
31dc8     03 04 66 F0 | 	shl	_var03, #3
31dcc     00 05 22 FC | 	wypin	_var03, _var01
31dd0     41 02 62 FD | 	dirh	_var02
31dd4     08 12 06 F1 | 	add	arg01, #8
31dd8     69 06 62 FD | 	rev	_var04
31ddc     1B 06 FE F9 | 	movbyts	_var04, #27
31de0                 | LR__5000
31de0     01 07 22 5C |  if_ne	wypin	_var04, _var02
31de4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
31de8     04 12 06 51 |  if_ne	add	arg01, #4
31dec     69 06 62 5D |  if_ne	rev	_var04
31df0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
31df4                 | LR__5001
31df4     40 02 72 5D |  if_ne	testp	_var02 wc
31df8     F8 FF 9F 1D |  if_a	jmp	#LR__5001
31dfc     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5000
31e00                 | LR__5002
31e00     40 00 72 FD | 	testp	_var01 wc
31e04     F8 FF 9F 3D |  if_ae	jmp	#LR__5002
31e08     40 02 62 FD | 	dirl	_var02
31e0c     FF FF FF FF 
31e10     01 FF 2B FC | 	wypin	##-1, _var02
31e14     41 02 62 FD | 	dirh	_var02
31e18                 | _fatfs_cc_xmit_mmc_1137_ret
31e18     2D 00 64 FD | 	ret
31e1c                 | 
31e1c                 | _fatfs_cc_rcvr_mmc_1144
31e1c     01 00 00 FF 
31e20     10 E4 05 F1 | 	add	objptr, ##528
31e24     F2 00 02 FB | 	rdlong	_var01, objptr
31e28     0C E4 05 F1 | 	add	objptr, #12
31e2c     F2 02 02 FB | 	rdlong	_var02, objptr
31e30     01 00 00 FF 
31e34     1C E4 85 F1 | 	sub	objptr, ##540
31e38     01 03 08 FC | 	akpin	_var02
31e3c     0A 05 0A F6 | 	mov	_var03, arg02 wz
31e40     02 04 4E F0 | 	shr	_var03, #2 wz
31e44     30 00 90 AD |  if_e	jmp	#LR__5012
31e48     02 07 02 F6 | 	mov	_var04, _var03
31e4c     05 06 66 F0 | 	shl	_var04, #5
31e50     00 07 22 FC | 	wypin	_var04, _var01
31e54     01 7F 18 FC | 	wxpin	#63, _var02
31e58                 | LR__5010
31e58                 | LR__5011
31e58     40 02 72 FD | 	testp	_var02 wc
31e5c     F8 FF 9F 3D |  if_ae	jmp	#LR__5011
31e60     01 07 8A FA | 	rdpin	_var04, _var02
31e64     69 06 62 FD | 	rev	_var04
31e68     1B 06 FE F9 | 	movbyts	_var04, #27
31e6c     09 07 62 FC | 	wrlong	_var04, arg01
31e70     04 12 06 F1 | 	add	arg01, #4
31e74     F8 05 6E FB | 	djnz	_var03, #LR__5010
31e78                 | LR__5012
31e78     03 14 0E F5 | 	and	arg02, #3 wz
31e7c     24 00 90 AD |  if_e	jmp	#LR__5015
31e80     01 4F 18 FC | 	wxpin	#39, _var02
31e84                 | LR__5013
31e84     00 11 28 FC | 	wypin	#8, _var01
31e88                 | LR__5014
31e88     40 02 72 FD | 	testp	_var02 wc
31e8c     F8 FF 9F 3D |  if_ae	jmp	#LR__5014
31e90     01 07 8A FA | 	rdpin	_var04, _var02
31e94     69 06 62 FD | 	rev	_var04
31e98     09 07 42 FC | 	wrbyte	_var04, arg01
31e9c     01 12 06 F1 | 	add	arg01, #1
31ea0     F8 15 6E FB | 	djnz	arg02, #LR__5013
31ea4                 | LR__5015
31ea4                 | _fatfs_cc_rcvr_mmc_1144_ret
31ea4     2D 00 64 FD | 	ret
31ea8                 | 
31ea8                 | _fatfs_cc_wait_ready_1148
31ea8     01 4A 05 F6 | 	mov	COUNT_, #1
31eac     A8 00 A0 FD | 	call	#pushregs_
31eb0     10 F0 07 F1 | 	add	ptra, #16
31eb4     1A FA 61 FD | 	getct	result1
31eb8     08 4E 05 F1 | 	add	fp, #8
31ebc     A7 FA 61 FC | 	wrlong	result1, fp
31ec0     14 26 06 FB | 	rdlong	local01, #20
31ec4     01 26 46 F0 | 	shr	local01, #1
31ec8     04 4E 05 F1 | 	add	fp, #4
31ecc     A7 26 62 FC | 	wrlong	local01, fp
31ed0     0C 4E 85 F1 | 	sub	fp, #12
31ed4                 | ' {
31ed4                 | ' 	BYTE d;
31ed4                 | ' 	UINT tmr, tmout;
31ed4                 | ' 
31ed4                 | ' 	tmr = _cnt();
31ed4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
31ed4                 | ' 	for(;;) {
31ed4                 | LR__5020
31ed4     04 4E 05 F1 | 	add	fp, #4
31ed8     A7 12 02 F6 | 	mov	arg01, fp
31edc     04 4E 85 F1 | 	sub	fp, #4
31ee0     01 14 06 F6 | 	mov	arg02, #1
31ee4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
31ee8     04 4E 05 F1 | 	add	fp, #4
31eec     A7 26 C2 FA | 	rdbyte	local01, fp
31ef0     04 4E 85 F1 | 	sub	fp, #4
31ef4     FF 26 0E F2 | 	cmp	local01, #255 wz
31ef8     01 FA 05 A6 |  if_e	mov	result1, #1
31efc     28 00 90 AD |  if_e	jmp	#LR__5021
31f00     1A FA 61 FD | 	getct	result1
31f04     08 4E 05 F1 | 	add	fp, #8
31f08     A7 26 02 FB | 	rdlong	local01, fp
31f0c     13 FB 81 F1 | 	sub	result1, local01
31f10     04 4E 05 F1 | 	add	fp, #4
31f14     A7 26 02 FB | 	rdlong	local01, fp
31f18     0C 4E 85 F1 | 	sub	fp, #12
31f1c     13 FB 11 F2 | 	cmp	result1, local01 wc
31f20     00 FA 05 36 |  if_ae	mov	result1, #0
31f24     AC FF 9F CD |  if_b	jmp	#LR__5020
31f28                 | LR__5021
31f28     A7 F0 03 F6 | 	mov	ptra, fp
31f2c     B2 00 A0 FD | 	call	#popregs_
31f30                 | _fatfs_cc_wait_ready_1148_ret
31f30     2D 00 64 FD | 	ret
31f34                 | 
31f34                 | _fatfs_cc_deselect_1154
31f34     00 4A 05 F6 | 	mov	COUNT_, #0
31f38     A8 00 A0 FD | 	call	#pushregs_
31f3c     14 F0 07 F1 | 	add	ptra, #20
31f40     01 00 00 FF 
31f44     14 E4 05 F1 | 	add	objptr, ##532
31f48     F2 14 02 FB | 	rdlong	arg02, objptr
31f4c     04 4E 05 F1 | 	add	fp, #4
31f50     A7 14 62 FC | 	wrlong	arg02, fp
31f54     04 E4 85 F1 | 	sub	objptr, #4
31f58     F2 14 02 FB | 	rdlong	arg02, objptr
31f5c     04 4E 05 F1 | 	add	fp, #4
31f60     A7 14 62 FC | 	wrlong	arg02, fp
31f64     08 E4 05 F1 | 	add	objptr, #8
31f68     F2 14 02 FB | 	rdlong	arg02, objptr
31f6c     04 4E 05 F1 | 	add	fp, #4
31f70     A7 14 62 FC | 	wrlong	arg02, fp
31f74     04 E4 05 F1 | 	add	objptr, #4
31f78     F2 14 02 FB | 	rdlong	arg02, objptr
31f7c     01 00 00 FF 
31f80     1C E4 85 F1 | 	sub	objptr, ##540
31f84     04 4E 05 F1 | 	add	fp, #4
31f88     A7 14 62 FC | 	wrlong	arg02, fp
31f8c     0C 4E 85 F1 | 	sub	fp, #12
31f90     A7 12 02 FB | 	rdlong	arg01, fp
31f94     04 4E 85 F1 | 	sub	fp, #4
31f98     59 12 62 FD | 	drvh	arg01
31f9c     1F 20 64 FD | 	waitx	#16
31fa0     A7 12 02 F6 | 	mov	arg01, fp
31fa4     01 14 06 F6 | 	mov	arg02, #1
31fa8     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
31fac     A7 F0 03 F6 | 	mov	ptra, fp
31fb0     B2 00 A0 FD | 	call	#popregs_
31fb4                 | _fatfs_cc_deselect_1154_ret
31fb4     2D 00 64 FD | 	ret
31fb8                 | 
31fb8                 | _fatfs_cc_select_1158
31fb8     00 4A 05 F6 | 	mov	COUNT_, #0
31fbc     A8 00 A0 FD | 	call	#pushregs_
31fc0     10 F0 07 F1 | 	add	ptra, #16
31fc4     01 00 00 FF 
31fc8     14 E4 05 F1 | 	add	objptr, ##532
31fcc     F2 14 02 FB | 	rdlong	arg02, objptr
31fd0     08 4E 05 F1 | 	add	fp, #8
31fd4     A7 14 62 FC | 	wrlong	arg02, fp
31fd8     08 E4 05 F1 | 	add	objptr, #8
31fdc     F2 12 02 FB | 	rdlong	arg01, objptr
31fe0     01 00 00 FF 
31fe4     1C E4 85 F1 | 	sub	objptr, ##540
31fe8     04 4E 05 F1 | 	add	fp, #4
31fec     A7 12 62 FC | 	wrlong	arg01, fp
31ff0     50 12 62 FD | 	fltl	arg01
31ff4     04 4E 85 F1 | 	sub	fp, #4
31ff8     A7 12 02 FB | 	rdlong	arg01, fp
31ffc     58 12 62 FD | 	drvl	arg01
32000     1F 20 64 FD | 	waitx	#16
32004     04 4E 05 F1 | 	add	fp, #4
32008     A7 12 02 FB | 	rdlong	arg01, fp
3200c     41 12 62 FD | 	dirh	arg01
32010     08 4E 85 F1 | 	sub	fp, #8
32014     A7 12 02 F6 | 	mov	arg01, fp
32018     04 4E 85 F1 | 	sub	fp, #4
3201c     01 14 06 F6 | 	mov	arg02, #1
32020     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
32024     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1148
32028     00 FA 0D F2 | 	cmp	result1, #0 wz
3202c     01 FA 05 56 |  if_ne	mov	result1, #1
32030     08 00 90 5D |  if_ne	jmp	#LR__5030
32034     FC FE BF FD | 	call	#_fatfs_cc_deselect_1154
32038                 | ' 
32038                 | ' 	deselect();
32038                 | ' 	return 0;
32038     00 FA 05 F6 | 	mov	result1, #0
3203c                 | LR__5030
3203c     A7 F0 03 F6 | 	mov	ptra, fp
32040     B2 00 A0 FD | 	call	#popregs_
32044                 | _fatfs_cc_select_1158_ret
32044     2D 00 64 FD | 	ret
32048                 | 
32048                 | _fatfs_cc_rcvr_datablock_1162
32048     01 4A 05 F6 | 	mov	COUNT_, #1
3204c     A8 00 A0 FD | 	call	#pushregs_
32050     18 F0 07 F1 | 	add	ptra, #24
32054     04 4E 05 F1 | 	add	fp, #4
32058     A7 12 62 FC | 	wrlong	arg01, fp
3205c     04 4E 05 F1 | 	add	fp, #4
32060     A7 14 62 FC | 	wrlong	arg02, fp
32064     1A FA 61 FD | 	getct	result1
32068     08 4E 05 F1 | 	add	fp, #8
3206c     A7 FA 61 FC | 	wrlong	result1, fp
32070     14 26 06 FB | 	rdlong	local01, #20
32074     03 26 46 F0 | 	shr	local01, #3
32078     04 4E 05 F1 | 	add	fp, #4
3207c     A7 26 62 FC | 	wrlong	local01, fp
32080     14 4E 85 F1 | 	sub	fp, #20
32084                 | ' 	BYTE *buff,
32084                 | ' 	UINT btr
32084                 | ' )
32084                 | ' {
32084                 | ' 	BYTE d[2];
32084                 | ' 	UINT tmr, tmout;
32084                 | ' 
32084                 | ' 	tmr = _cnt();
32084                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
32084                 | ' 	for(;;) {
32084                 | LR__5040
32084     0C 4E 05 F1 | 	add	fp, #12
32088     A7 12 02 F6 | 	mov	arg01, fp
3208c     0C 4E 85 F1 | 	sub	fp, #12
32090     01 14 06 F6 | 	mov	arg02, #1
32094     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
32098     0C 4E 05 F1 | 	add	fp, #12
3209c     A7 26 C2 FA | 	rdbyte	local01, fp
320a0     0C 4E 85 F1 | 	sub	fp, #12
320a4     FF 26 0E F2 | 	cmp	local01, #255 wz
320a8     28 00 90 5D |  if_ne	jmp	#LR__5041
320ac     1A FA 61 FD | 	getct	result1
320b0     FD 26 02 F6 | 	mov	local01, result1
320b4     10 4E 05 F1 | 	add	fp, #16
320b8     A7 14 02 FB | 	rdlong	arg02, fp
320bc     0A 27 82 F1 | 	sub	local01, arg02
320c0     04 4E 05 F1 | 	add	fp, #4
320c4     A7 14 02 FB | 	rdlong	arg02, fp
320c8     14 4E 85 F1 | 	sub	fp, #20
320cc     0A 27 12 F2 | 	cmp	local01, arg02 wc
320d0     B0 FF 9F CD |  if_b	jmp	#LR__5040
320d4                 | LR__5041
320d4     0C 4E 05 F1 | 	add	fp, #12
320d8     A7 26 C2 FA | 	rdbyte	local01, fp
320dc     0C 4E 85 F1 | 	sub	fp, #12
320e0     FE 26 0E F2 | 	cmp	local01, #254 wz
320e4     00 FA 05 56 |  if_ne	mov	result1, #0
320e8     30 00 90 5D |  if_ne	jmp	#LR__5042
320ec     04 4E 05 F1 | 	add	fp, #4
320f0     A7 12 02 FB | 	rdlong	arg01, fp
320f4     04 4E 05 F1 | 	add	fp, #4
320f8     A7 14 02 FB | 	rdlong	arg02, fp
320fc     08 4E 85 F1 | 	sub	fp, #8
32100     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
32104     0C 4E 05 F1 | 	add	fp, #12
32108     A7 12 02 F6 | 	mov	arg01, fp
3210c     0C 4E 85 F1 | 	sub	fp, #12
32110     02 14 06 F6 | 	mov	arg02, #2
32114     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
32118                 | ' 
32118                 | ' 	rcvr_mmc(buff, btr);
32118                 | ' 	rcvr_mmc(d, 2);
32118                 | ' 
32118                 | ' 	return 1;
32118     01 FA 05 F6 | 	mov	result1, #1
3211c                 | LR__5042
3211c     A7 F0 03 F6 | 	mov	ptra, fp
32120     B2 00 A0 FD | 	call	#popregs_
32124                 | _fatfs_cc_rcvr_datablock_1162_ret
32124     2D 00 64 FD | 	ret
32128                 | 
32128                 | _fatfs_cc_xmit_datablock_1164
32128     00 4A 05 F6 | 	mov	COUNT_, #0
3212c     A8 00 A0 FD | 	call	#pushregs_
32130     10 F0 07 F1 | 	add	ptra, #16
32134     04 4E 05 F1 | 	add	fp, #4
32138     A7 12 62 FC | 	wrlong	arg01, fp
3213c     04 4E 05 F1 | 	add	fp, #4
32140     A7 14 42 FC | 	wrbyte	arg02, fp
32144     08 4E 85 F1 | 	sub	fp, #8
32148     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1148
3214c     00 FA 0D F2 | 	cmp	result1, #0 wz
32150     00 FA 05 A6 |  if_e	mov	result1, #0
32154     90 00 90 AD |  if_e	jmp	#LR__5051
32158     08 4E 05 F1 | 	add	fp, #8
3215c     A7 14 C2 FA | 	rdbyte	arg02, fp
32160     04 4E 05 F1 | 	add	fp, #4
32164     A7 14 42 FC | 	wrbyte	arg02, fp
32168     A7 12 02 F6 | 	mov	arg01, fp
3216c     0C 4E 85 F1 | 	sub	fp, #12
32170     01 14 06 F6 | 	mov	arg02, #1
32174     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1137
32178     08 4E 05 F1 | 	add	fp, #8
3217c     A7 14 C2 FA | 	rdbyte	arg02, fp
32180     08 4E 85 F1 | 	sub	fp, #8
32184     FD 14 0E F2 | 	cmp	arg02, #253 wz
32188     58 00 90 AD |  if_e	jmp	#LR__5050
3218c     04 4E 05 F1 | 	add	fp, #4
32190     A7 12 02 FB | 	rdlong	arg01, fp
32194     04 4E 85 F1 | 	sub	fp, #4
32198     09 14 C6 F9 | 	decod	arg02, #9
3219c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1137
321a0     0C 4E 05 F1 | 	add	fp, #12
321a4     A7 12 02 F6 | 	mov	arg01, fp
321a8     0C 4E 85 F1 | 	sub	fp, #12
321ac     02 14 06 F6 | 	mov	arg02, #2
321b0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
321b4     0C 4E 05 F1 | 	add	fp, #12
321b8     A7 12 02 F6 | 	mov	arg01, fp
321bc     0C 4E 85 F1 | 	sub	fp, #12
321c0     01 14 06 F6 | 	mov	arg02, #1
321c4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
321c8     0C 4E 05 F1 | 	add	fp, #12
321cc     A7 14 C2 FA | 	rdbyte	arg02, fp
321d0     0C 4E 85 F1 | 	sub	fp, #12
321d4     1F 14 06 F5 | 	and	arg02, #31
321d8     05 14 0E F2 | 	cmp	arg02, #5 wz
321dc                 | ' 			return 0;
321dc     00 FA 05 56 |  if_ne	mov	result1, #0
321e0     04 00 90 5D |  if_ne	jmp	#LR__5051
321e4                 | LR__5050
321e4                 | ' 	}
321e4                 | ' 
321e4                 | ' 	return 1;
321e4     01 FA 05 F6 | 	mov	result1, #1
321e8                 | LR__5051
321e8     A7 F0 03 F6 | 	mov	ptra, fp
321ec     B2 00 A0 FD | 	call	#popregs_
321f0                 | _fatfs_cc_xmit_datablock_1164_ret
321f0     2D 00 64 FD | 	ret
321f4                 | 
321f4                 | _fatfs_cc_send_cmd_1168
321f4     01 4A 05 F6 | 	mov	COUNT_, #1
321f8     A8 00 A0 FD | 	call	#pushregs_
321fc     1C F0 07 F1 | 	add	ptra, #28
32200                 | _fatfs_cc_send_cmd_1168_enter
32200     04 4E 05 F1 | 	add	fp, #4
32204     A7 12 42 FC | 	wrbyte	arg01, fp
32208     04 4E 05 F1 | 	add	fp, #4
3220c     A7 14 62 FC | 	wrlong	arg02, fp
32210     04 4E 85 F1 | 	sub	fp, #4
32214     A7 FA C1 FA | 	rdbyte	result1, fp
32218     04 4E 85 F1 | 	sub	fp, #4
3221c     80 FA CD F7 | 	test	result1, #128 wz
32220     44 00 90 AD |  if_e	jmp	#LR__5060
32224     04 4E 05 F1 | 	add	fp, #4
32228     A7 14 C2 FA | 	rdbyte	arg02, fp
3222c     7F 14 06 F5 | 	and	arg02, #127
32230     A7 14 42 FC | 	wrbyte	arg02, fp
32234     04 4E 85 F1 | 	sub	fp, #4
32238     37 12 06 F6 | 	mov	arg01, #55
3223c     00 14 06 F6 | 	mov	arg02, #0
32240     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1168
32244     0C 4E 05 F1 | 	add	fp, #12
32248     A7 FA 41 FC | 	wrbyte	result1, fp
3224c     A7 14 C2 FA | 	rdbyte	arg02, fp
32250     0C 4E 85 F1 | 	sub	fp, #12
32254     02 14 16 F2 | 	cmp	arg02, #2 wc
32258     0C 4E 05 31 |  if_ae	add	fp, #12
3225c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
32260     0C 4E 85 31 |  if_ae	sub	fp, #12
32264     6C 01 90 3D |  if_ae	jmp	#LR__5064
32268                 | LR__5060
32268     04 4E 05 F1 | 	add	fp, #4
3226c     A7 14 C2 FA | 	rdbyte	arg02, fp
32270     04 4E 85 F1 | 	sub	fp, #4
32274     0C 14 0E F2 | 	cmp	arg02, #12 wz
32278     14 00 90 AD |  if_e	jmp	#LR__5061
3227c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1154
32280     34 FD BF FD | 	call	#_fatfs_cc_select_1158
32284     00 FA 0D F2 | 	cmp	result1, #0 wz
32288     FF FA 05 A6 |  if_e	mov	result1, #255
3228c     44 01 90 AD |  if_e	jmp	#LR__5064
32290                 | LR__5061
32290     04 4E 05 F1 | 	add	fp, #4
32294     A7 14 C2 FA | 	rdbyte	arg02, fp
32298     40 FA 05 F6 | 	mov	result1, #64
3229c     0A FB 41 F5 | 	or	result1, arg02
322a0     10 4E 05 F1 | 	add	fp, #16
322a4     A7 FA 41 FC | 	wrbyte	result1, fp
322a8     0C 4E 85 F1 | 	sub	fp, #12
322ac     A7 FA 01 FB | 	rdlong	result1, fp
322b0     18 FA 45 F0 | 	shr	result1, #24
322b4     0D 4E 05 F1 | 	add	fp, #13
322b8     A7 FA 41 FC | 	wrbyte	result1, fp
322bc     0D 4E 85 F1 | 	sub	fp, #13
322c0     A7 FA 01 FB | 	rdlong	result1, fp
322c4     10 FA 45 F0 | 	shr	result1, #16
322c8     0E 4E 05 F1 | 	add	fp, #14
322cc     A7 FA 41 FC | 	wrbyte	result1, fp
322d0     0E 4E 85 F1 | 	sub	fp, #14
322d4     A7 FA 01 FB | 	rdlong	result1, fp
322d8     08 FA 45 F0 | 	shr	result1, #8
322dc     0F 4E 05 F1 | 	add	fp, #15
322e0     A7 FA 41 FC | 	wrbyte	result1, fp
322e4     0F 4E 85 F1 | 	sub	fp, #15
322e8     A7 FA 01 FB | 	rdlong	result1, fp
322ec     10 4E 05 F1 | 	add	fp, #16
322f0     A7 FA 41 FC | 	wrbyte	result1, fp
322f4     0C 4E 85 F1 | 	sub	fp, #12
322f8     A7 02 48 FC | 	wrbyte	#1, fp
322fc     08 4E 85 F1 | 	sub	fp, #8
32300     A7 FA C9 FA | 	rdbyte	result1, fp wz
32304     04 4E 85 F1 | 	sub	fp, #4
32308     0C 4E 05 A1 |  if_e	add	fp, #12
3230c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
32310     0C 4E 85 A1 |  if_e	sub	fp, #12
32314     04 4E 05 F1 | 	add	fp, #4
32318     A7 FA C1 FA | 	rdbyte	result1, fp
3231c     04 4E 85 F1 | 	sub	fp, #4
32320     08 FA 0D F2 | 	cmp	result1, #8 wz
32324     0C 4E 05 A1 |  if_e	add	fp, #12
32328     A7 0E 49 AC |  if_e	wrbyte	#135, fp
3232c     0C 4E 85 A1 |  if_e	sub	fp, #12
32330     0C 4E 05 F1 | 	add	fp, #12
32334     A7 14 C2 FA | 	rdbyte	arg02, fp
32338     0D 4E 05 F1 | 	add	fp, #13
3233c     A7 14 42 FC | 	wrbyte	arg02, fp
32340     05 4E 85 F1 | 	sub	fp, #5
32344     A7 12 02 F6 | 	mov	arg01, fp
32348     14 4E 85 F1 | 	sub	fp, #20
3234c     06 14 06 F6 | 	mov	arg02, #6
32350     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1137
32354     04 4E 05 F1 | 	add	fp, #4
32358     A7 26 C2 FA | 	rdbyte	local01, fp
3235c     04 4E 85 F1 | 	sub	fp, #4
32360     0C 26 0E F2 | 	cmp	local01, #12 wz
32364     10 4E 05 A1 |  if_e	add	fp, #16
32368     A7 12 02 A6 |  if_e	mov	arg01, fp
3236c     10 4E 85 A1 |  if_e	sub	fp, #16
32370     01 14 06 A6 |  if_e	mov	arg02, #1
32374     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1144
32378     0C 4E 05 F1 | 	add	fp, #12
3237c     A7 14 48 FC | 	wrbyte	#10, fp
32380     0C 4E 85 F1 | 	sub	fp, #12
32384                 | ' 	n = 10;
32384                 | ' 	do
32384                 | LR__5062
32384     10 4E 05 F1 | 	add	fp, #16
32388     A7 12 02 F6 | 	mov	arg01, fp
3238c     10 4E 85 F1 | 	sub	fp, #16
32390     01 14 06 F6 | 	mov	arg02, #1
32394     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1144
32398     10 4E 05 F1 | 	add	fp, #16
3239c     A7 26 C2 FA | 	rdbyte	local01, fp
323a0     10 4E 85 F1 | 	sub	fp, #16
323a4     80 26 CE F7 | 	test	local01, #128 wz
323a8     1C 00 90 AD |  if_e	jmp	#LR__5063
323ac     0C 4E 05 F1 | 	add	fp, #12
323b0     A7 26 C2 FA | 	rdbyte	local01, fp
323b4     01 26 86 F1 | 	sub	local01, #1
323b8     A7 26 42 FC | 	wrbyte	local01, fp
323bc     A7 26 CA FA | 	rdbyte	local01, fp wz
323c0     0C 4E 85 F1 | 	sub	fp, #12
323c4     BC FF 9F 5D |  if_ne	jmp	#LR__5062
323c8                 | LR__5063
323c8                 | ' 
323c8                 | ' 	return d;
323c8     10 4E 05 F1 | 	add	fp, #16
323cc     A7 FA C1 FA | 	rdbyte	result1, fp
323d0     10 4E 85 F1 | 	sub	fp, #16
323d4                 | LR__5064
323d4     A7 F0 03 F6 | 	mov	ptra, fp
323d8     B2 00 A0 FD | 	call	#popregs_
323dc                 | _fatfs_cc_send_cmd_1168_ret
323dc     2D 00 64 FD | 	ret
323e0                 | 
323e0                 | _fatfs_cc_disk_deinitialize
323e0     03 4A 05 F6 | 	mov	COUNT_, #3
323e4     A8 00 A0 FD | 	call	#pushregs_
323e8     00 12 4E F2 | 	cmps	arg01, #0 wz
323ec     01 00 00 FF 
323f0     14 E4 05 F1 | 	add	objptr, ##532
323f4     F2 12 02 FB | 	rdlong	arg01, objptr
323f8     04 E4 85 F1 | 	sub	objptr, #4
323fc     F2 26 02 FB | 	rdlong	local01, objptr
32400     08 E4 05 F1 | 	add	objptr, #8
32404     F2 28 02 FB | 	rdlong	local02, objptr
32408     04 E4 05 F1 | 	add	objptr, #4
3240c     F2 2A 02 FB | 	rdlong	local03, objptr
32410     01 00 00 FF 
32414     1C E4 85 F1 | 	sub	objptr, ##540
32418                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
32418                 | '         return RES_NOTRDY;
32418     03 FA 05 56 |  if_ne	mov	result1, #3
3241c     2C 00 90 5D |  if_ne	jmp	#LR__5070
32420     50 12 62 FD | 	fltl	arg01
32424     09 01 08 FC | 	wrpin	#0, arg01
32428     50 26 62 FD | 	fltl	local01
3242c     13 01 08 FC | 	wrpin	#0, local01
32430     50 28 62 FD | 	fltl	local02
32434     14 01 08 FC | 	wrpin	#0, local02
32438     50 2A 62 FD | 	fltl	local03
3243c     15 01 08 FC | 	wrpin	#0, local03
32440     0A 12 06 F6 | 	mov	arg01, #10
32444     40 0E BF FD | 	call	#__system___waitms
32448                 | '     }
32448                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
32448                 | '     _pinclear(PIN_SS);
32448                 | '     _pinclear(PIN_CLK);
32448                 | '     _pinclear(PIN_DI);
32448                 | '     _pinclear(PIN_DO);
32448                 | ' 
32448                 | '     _waitms(10);
32448                 | ' 
32448                 | '     return 0;
32448     00 FA 05 F6 | 	mov	result1, #0
3244c                 | LR__5070
3244c     A7 F0 03 F6 | 	mov	ptra, fp
32450     B2 00 A0 FD | 	call	#popregs_
32454                 | _fatfs_cc_disk_deinitialize_ret
32454     2D 00 64 FD | 	ret
32458                 | 
32458                 | _fatfs_cc_gettimeofday
32458     04 4A 05 F6 | 	mov	COUNT_, #4
3245c     A8 00 A0 FD | 	call	#pushregs_
32460     09 27 02 F6 | 	mov	local01, arg01
32464     FC 09 BF FD | 	call	#__system___getus
32468     FD 12 02 F6 | 	mov	arg01, result1
3246c     02 00 00 FF 
32470     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
32474     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
32478     09 FB 01 F6 | 	mov	result1, arg01
3247c     14 FB 81 F1 | 	sub	result1, local02
32480     A1 07 00 FF 
32484     40 FA 15 FD | 	qdiv	result1, ##1000000
32488     02 00 00 FF 
3248c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
32490     18 28 62 FD | 	getqx	local02
32494     A1 07 00 FF 
32498     40 FA 15 FD | 	qdiv	result1, ##1000000
3249c     00 28 0E F2 | 	cmp	local02, #0 wz
324a0     19 2A 62 FD | 	getqy	local03
324a4     28 00 90 AD |  if_e	jmp	#LR__5080
324a8     02 00 00 FF 
324ac     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
324b0     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
324b4     14 2D 02 F1 | 	add	local04, local02
324b8     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
324bc     15 13 82 F1 | 	sub	arg01, local03
324c0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
324c4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
324c8     02 00 00 FF 
324cc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
324d0                 | LR__5080
324d0     02 00 00 FF 
324d4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
324d8     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
324dc     02 00 00 FF 
324e0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
324e4     13 2D 62 FC | 	wrlong	local04, local01
324e8     04 26 06 F1 | 	add	local01, #4
324ec     13 2B 62 FC | 	wrlong	local03, local01
324f0                 | '         lastsec += secs;
324f0                 | '         lastus = now - leftover;
324f0                 | '     }
324f0                 | '     tv->tv_sec = lastsec;
324f0                 | '     tv->tv_usec = leftover;
324f0                 | '     return 0;
324f0     00 FA 05 F6 | 	mov	result1, #0
324f4     A7 F0 03 F6 | 	mov	ptra, fp
324f8     B2 00 A0 FD | 	call	#popregs_
324fc                 | _fatfs_cc_gettimeofday_ret
324fc     2D 00 64 FD | 	ret
32500                 | 
32500                 | _fatfs_cc__is_leap_year
32500     09 FB 51 F6 | 	abs	result1, arg01 wc
32504     03 FA 05 F5 | 	and	result1, #3
32508     FD FA 89 F6 | 	negc	result1, result1 wz
3250c     38 00 90 5D |  if_ne	jmp	#LR__5091
32510     09 FB 51 F6 | 	abs	result1, arg01 wc
32514     64 FA 15 FD | 	qdiv	result1, #100
32518     19 FA 61 FD | 	getqy	result1
3251c     FD FA 89 F6 | 	negc	result1, result1 wz
32520     1C 00 90 5D |  if_ne	jmp	#LR__5090
32524     09 FB 51 F6 | 	abs	result1, arg01 wc
32528     90 FB 15 FD | 	qdiv	result1, #400
3252c                 | '       return (0 == y % 400);
3252c     00 FA 05 F6 | 	mov	result1, #0
32530     19 00 62 FD | 	getqy	_var01
32534     00 01 8A F6 | 	negc	_var01, _var01 wz
32538     01 FA 05 A6 |  if_e	mov	result1, #1
3253c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
32540                 | LR__5090
32540                 | '     return 1;
32540     01 FA 05 F6 | 	mov	result1, #1
32544     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
32548                 | LR__5091
32548                 | '   }
32548                 | '   return 0;
32548     00 FA 05 F6 | 	mov	result1, #0
3254c                 | _fatfs_cc__is_leap_year_ret
3254c     2D 00 64 FD | 	ret
32550                 | 
32550                 | _fatfs_cc___tzoffset
32550     09 01 0A F6 | 	mov	_var01, arg01 wz
32554     FF FF FF FF 
32558     0A FF 6B FC | 	wrlong	##-1, arg02
3255c     01 02 06 F6 | 	mov	_var02, #1
32560     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
32564                 | '                 return 0;
32564     00 FA 05 A6 |  if_e	mov	result1, #0
32568     94 02 90 AD |  if_e	jmp	#LR__5117
3256c     0A 01 68 FC | 	wrlong	#0, arg02
32570     02 00 00 FF 
32574     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
32578     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3257c                 | ' 
3257c                 | '        *hasdst = 0;
3257c                 | ' 
3257c                 | ' 	n = stdname;
3257c                 | '         while (*s && isalpha(*s)) {
3257c     02 00 00 FF 
32580     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
32584     97 28 48 FB | 	callpa	#(@LR__5101-@LR__5100)>>2,fcache_load_ptr_
32588                 | LR__5100
32588     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3258c     48 00 90 AD |  if_e	jmp	#LR__5102
32590     00 13 C2 FA | 	rdbyte	arg01, _var01
32594                 | ' {
32594                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
32594     80 12 36 F3 | 	fle	arg01, #128 wc
32598                 | '     return __ctype[c];
32598     02 00 00 FF 
3259c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
325a0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
325a4     09 FB C1 FA | 	rdbyte	result1, arg01
325a8     02 00 00 FF 
325ac     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
325b0     0C FA CD F7 | 	test	result1, #12 wz
325b4     20 00 90 AD |  if_e	jmp	#LR__5102
325b8     00 09 02 F6 | 	mov	_var05, _var01
325bc     00 0B 02 F6 | 	mov	_var06, _var01
325c0     01 0A 06 F1 | 	add	_var06, #1
325c4     04 0D C2 FA | 	rdbyte	_var07, _var05
325c8     05 01 02 F6 | 	mov	_var01, _var06
325cc     03 0D 42 FC | 	wrbyte	_var07, _var04
325d0     01 06 06 F1 | 	add	_var04, #1
325d4     B0 FF 9F FD | 	jmp	#LR__5100
325d8                 | LR__5101
325d8                 | LR__5102
325d8     03 01 48 FC | 	wrbyte	#0, _var04
325dc     00 0E 06 F6 | 	mov	_var08, #0
325e0     00 05 C2 FA | 	rdbyte	_var03, _var01
325e4     2D 04 0E F2 | 	cmp	_var03, #45 wz
325e8     01 02 66 A6 |  if_e	neg	_var02, #1
325ec     01 00 06 A1 |  if_e	add	_var01, #1
325f0     97 28 48 FB | 	callpa	#(@LR__5104-@LR__5103)>>2,fcache_load_ptr_
325f4                 | '                 sgn = -1;
325f4                 | '                 s++;
325f4                 | '         }
325f4                 | '         while (isdigit(*s)) {
325f4                 | LR__5103
325f4     00 13 C2 FA | 	rdbyte	arg01, _var01
325f8                 | ' {
325f8                 | '   return  (__ctype_get(c) & 0x02 ) ;
325f8     80 12 36 F3 | 	fle	arg01, #128 wc
325fc                 | '     return __ctype[c];
325fc     02 00 00 FF 
32600     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
32604     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
32608     09 FB C1 FA | 	rdbyte	result1, arg01
3260c     02 00 00 FF 
32610     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
32614     02 FA CD F7 | 	test	result1, #2 wz
32618     28 00 90 AD |  if_e	jmp	#LR__5105
3261c     07 05 02 F6 | 	mov	_var03, _var08
32620     02 04 66 F0 | 	shl	_var03, #2
32624     07 05 02 F1 | 	add	_var03, _var08
32628     01 04 66 F0 | 	shl	_var03, #1
3262c     00 09 C2 FA | 	rdbyte	_var05, _var01
32630     30 08 86 F1 | 	sub	_var05, #48
32634     04 05 02 F1 | 	add	_var03, _var05
32638     02 0F 02 F6 | 	mov	_var08, _var03
3263c     01 00 06 F1 | 	add	_var01, #1
32640     B0 FF 9F FD | 	jmp	#LR__5103
32644                 | LR__5104
32644                 | LR__5105
32644     07 00 00 FF 
32648     10 0E 06 FD | 	qmul	_var08, ##3600
3264c     00 05 C2 FA | 	rdbyte	_var03, _var01
32650     3A 04 0E F2 | 	cmp	_var03, #58 wz
32654     18 10 62 FD | 	getqx	_var09
32658     70 00 90 5D |  if_ne	jmp	#LR__5109
3265c     00 0E 06 F6 | 	mov	_var08, #0
32660     01 00 06 F1 | 	add	_var01, #1
32664     97 28 48 FB | 	callpa	#(@LR__5107-@LR__5106)>>2,fcache_load_ptr_
32668                 | '                 x = 0;
32668                 | '                 s++;
32668                 | '                 while (isdigit(*s)) {
32668                 | LR__5106
32668     00 13 C2 FA | 	rdbyte	arg01, _var01
3266c                 | ' {
3266c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3266c     80 12 36 F3 | 	fle	arg01, #128 wc
32670                 | '     return __ctype[c];
32670     02 00 00 FF 
32674     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
32678     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3267c     09 FB C1 FA | 	rdbyte	result1, arg01
32680     02 00 00 FF 
32684     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
32688     02 FA CD F7 | 	test	result1, #2 wz
3268c     28 00 90 AD |  if_e	jmp	#LR__5108
32690     07 05 02 F6 | 	mov	_var03, _var08
32694     02 04 66 F0 | 	shl	_var03, #2
32698     07 05 02 F1 | 	add	_var03, _var08
3269c     01 04 66 F0 | 	shl	_var03, #1
326a0     00 09 C2 FA | 	rdbyte	_var05, _var01
326a4     30 08 86 F1 | 	sub	_var05, #48
326a8     04 05 02 F1 | 	add	_var03, _var05
326ac     02 0F 02 F6 | 	mov	_var08, _var03
326b0     01 00 06 F1 | 	add	_var01, #1
326b4     B0 FF 9F FD | 	jmp	#LR__5106
326b8                 | LR__5107
326b8                 | LR__5108
326b8     07 0D 02 F6 | 	mov	_var07, _var08
326bc     04 0C 66 F0 | 	shl	_var07, #4
326c0     07 0D 82 F1 | 	sub	_var07, _var08
326c4     02 0C 66 F0 | 	shl	_var07, #2
326c8     06 11 02 F1 | 	add	_var09, _var07
326cc                 | LR__5109
326cc     02 00 00 FF 
326d0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
326d4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
326d8     00 13 C2 FA | 	rdbyte	arg01, _var01
326dc                 | ' {
326dc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
326dc     80 12 36 F3 | 	fle	arg01, #128 wc
326e0                 | '     return __ctype[c];
326e0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
326e4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
326e8     09 FB C1 FA | 	rdbyte	result1, arg01
326ec     02 00 00 FF 
326f0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
326f4     0C FA CD F7 | 	test	result1, #12 wz
326f8     50 00 90 AD |  if_e	jmp	#LR__5112
326fc     0A 03 68 FC | 	wrlong	#1, arg02
32700                 | '                 *hasdst = 1;
32700                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
32700                 | LR__5110
32700     00 05 CA FA | 	rdbyte	_var03, _var01 wz
32704     44 00 90 AD |  if_e	jmp	#LR__5111
32708     00 13 C2 FA | 	rdbyte	arg01, _var01
3270c                 | ' {
3270c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3270c     80 12 36 F3 | 	fle	arg01, #128 wc
32710                 | '     return __ctype[c];
32710     02 00 00 FF 
32714     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
32718     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3271c     09 FB C1 FA | 	rdbyte	result1, arg01
32720     02 00 00 FF 
32724     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
32728     0C FA CD F7 | 	test	result1, #12 wz
3272c     1C 00 90 AD |  if_e	jmp	#LR__5111
32730     00 0B 02 F6 | 	mov	_var06, _var01
32734     01 0A 06 F1 | 	add	_var06, #1
32738     00 0D C2 FA | 	rdbyte	_var07, _var01
3273c     05 01 02 F6 | 	mov	_var01, _var06
32740     03 0D 42 FC | 	wrbyte	_var07, _var04
32744     01 06 06 F1 | 	add	_var04, #1
32748     B4 FF 9F FD | 	jmp	#LR__5110
3274c                 | LR__5111
3274c                 | LR__5112
3274c     03 01 48 FC | 	wrbyte	#0, _var04
32750     02 00 00 FF 
32754     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
32758     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
3275c     02 00 00 FF 
32760     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
32764     20 00 90 AD |  if_e	jmp	#LR__5113
32768     02 00 00 FF 
3276c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
32770     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32774     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
32778     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3277c     02 00 00 FF 
32780     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
32784     1C 00 90 FD | 	jmp	#LR__5114
32788                 | LR__5113
32788     02 00 00 FF 
3278c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
32790     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
32794     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
32798     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3279c     02 00 00 FF 
327a0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
327a4                 | LR__5114
327a4     02 00 00 FF 
327a8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
327ac     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
327b0     02 00 00 FF 
327b4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
327b8     20 00 90 AD |  if_e	jmp	#LR__5115
327bc     02 00 00 FF 
327c0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
327c4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
327c8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
327cc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
327d0     02 00 00 FF 
327d4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
327d8     1C 00 90 FD | 	jmp	#LR__5116
327dc                 | LR__5115
327dc     02 00 00 FF 
327e0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
327e4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
327e8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
327ec     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
327f0     02 00 00 FF 
327f4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
327f8                 | LR__5116
327f8     08 03 02 FD | 	qmul	_var02, _var09
327fc                 | ' 		_tzname[1] = stdname;
327fc                 | ' 
327fc                 | '         return sgn * off;
327fc     18 FA 61 FD | 	getqx	result1
32800                 | LR__5117
32800                 | _fatfs_cc___tzoffset_ret
32800     2D 00 64 FD | 	ret
32804                 | 
32804                 | _fatfs_cc___indst
32804     10 12 06 F1 | 	add	arg01, #16
32808     09 01 02 FB | 	rdlong	_var01, arg01
3280c     10 12 86 F1 | 	sub	arg01, #16
32810     02 00 0E F2 | 	cmp	_var01, #2 wz
32814     30 00 90 5D |  if_ne	jmp	#LR__5120
32818     07 00 06 F6 | 	mov	_var01, #7
3281c     18 12 06 F1 | 	add	arg01, #24
32820     09 03 02 FB | 	rdlong	_var02, arg01
32824     01 01 02 F1 | 	add	_var01, _var02
32828     0C 12 86 F1 | 	sub	arg01, #12
3282c     09 05 02 FB | 	rdlong	_var03, arg01
32830     02 01 82 F1 | 	sub	_var01, _var03
32834     00 00 56 F2 | 	cmps	_var01, #0 wc
32838                 | '                         return 1;
32838     01 FA 05 C6 |  if_b	mov	result1, #1
3283c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
32840                 | '                 return 0;
32840     00 FA 05 F6 | 	mov	result1, #0
32844     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
32848                 | LR__5120
32848     10 12 06 F1 | 	add	arg01, #16
3284c     09 01 02 FB | 	rdlong	_var01, arg01
32850     10 12 86 F1 | 	sub	arg01, #16
32854     0A 00 0E F2 | 	cmp	_var01, #10 wz
32858     28 00 90 5D |  if_ne	jmp	#LR__5121
3285c     18 12 06 F1 | 	add	arg01, #24
32860     09 01 02 FB | 	rdlong	_var01, arg01
32864     0C 12 86 F1 | 	sub	arg01, #12
32868     09 07 02 FB | 	rdlong	_var04, arg01
3286c     03 01 82 F1 | 	sub	_var01, _var04
32870     00 00 56 F2 | 	cmps	_var01, #0 wc
32874                 | '                         return 0;
32874     00 FA 05 C6 |  if_b	mov	result1, #0
32878     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
3287c                 | '                 return 1;
3287c     01 FA 05 F6 | 	mov	result1, #1
32880     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
32884                 | LR__5121
32884                 | '         }
32884                 | ' 
32884                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
32884     00 00 06 F6 | 	mov	_var01, #0
32888     10 12 06 F1 | 	add	arg01, #16
3288c     09 03 02 FB | 	rdlong	_var02, arg01
32890     10 12 86 F1 | 	sub	arg01, #16
32894     03 02 56 F2 | 	cmps	_var02, #3 wc
32898     10 00 90 CD |  if_b	jmp	#LR__5122
3289c     10 12 06 F1 | 	add	arg01, #16
328a0     09 05 02 FB | 	rdlong	_var03, arg01
328a4     0A 04 56 F2 | 	cmps	_var03, #10 wc
328a8     01 00 06 C6 |  if_b	mov	_var01, #1
328ac                 | LR__5122
328ac     00 FB 01 F6 | 	mov	result1, _var01
328b0                 | _fatfs_cc___indst_ret
328b0     2D 00 64 FD | 	ret
328b4                 | 
328b4                 | ' 	
328b4                 | ' 	FUNCTION pfunc(c as integer) as integer
328b4                 | ___strs_cl_pfunc
328b4                 | ' 		if (i < 16) then
328b4     04 E4 05 F1 | 	add	objptr, #4
328b8     F2 FA 01 FB | 	rdlong	result1, objptr
328bc     04 E4 85 F1 | 	sub	objptr, #4
328c0     10 FA 55 F2 | 	cmps	result1, #16 wc
328c4     2C 00 90 3D |  if_ae	jmp	#LR__5130
328c8     F2 FA 01 FB | 	rdlong	result1, objptr
328cc     04 E4 05 F1 | 	add	objptr, #4
328d0     F2 00 02 FB | 	rdlong	_var01, objptr
328d4     FD 00 02 F1 | 	add	_var01, result1
328d8     00 13 42 FC | 	wrbyte	arg01, _var01
328dc     F2 FA 01 FB | 	rdlong	result1, objptr
328e0     01 FA 05 F1 | 	add	result1, #1
328e4     F2 FA 61 FC | 	wrlong	result1, objptr
328e8     04 E4 85 F1 | 	sub	objptr, #4
328ec                 | ' 			p(i) = c
328ec                 | ' 			i = i+1
328ec                 | ' 			return 1
328ec     01 FA 05 F6 | 	mov	result1, #1
328f0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
328f4                 | LR__5130
328f4                 | ' 			return -1
328f4     01 FA 65 F6 | 	neg	result1, #1
328f8                 | ___strs_cl_pfunc_ret
328f8     2D 00 64 FD | 	ret
328fc                 | 
328fc                 | __struct__s_vfs_file_t_putchar
328fc     04 4A 05 F6 | 	mov	COUNT_, #4
32900     A8 00 A0 FD | 	call	#pushregs_
32904     1C E4 05 F1 | 	add	objptr, #28
32908     F2 26 0A FB | 	rdlong	local01, objptr wz
3290c     1C E4 85 F1 | 	sub	objptr, #28
32910     00 FA 05 A6 |  if_e	mov	result1, #0
32914     48 00 90 AD |  if_e	jmp	#LR__5140
32918     1C E4 05 F1 | 	add	objptr, #28
3291c     F2 28 02 FB | 	rdlong	local02, objptr
32920     14 2B 02 F6 | 	mov	local03, local02
32924     1C E4 85 F1 | 	sub	objptr, #28
32928     13 2A 46 F7 | 	zerox	local03, #19
3292c     14 28 46 F0 | 	shr	local02, #20
32930     02 28 66 F0 | 	shl	local02, #2
32934     ED 28 02 F1 | 	add	local02, __methods__
32938     14 29 02 FB | 	rdlong	local02, local02
3293c     F2 14 02 F6 | 	mov	arg02, objptr
32940     F2 2C 02 F6 | 	mov	local04, objptr
32944     15 E5 01 F6 | 	mov	objptr, local03
32948     2D 28 62 FD | 	call	local02
3294c     16 E5 01 F6 | 	mov	objptr, local04
32950                 | '     return (i < 0) ? 0 : 1;
32950     00 FA 55 F2 | 	cmps	result1, #0 wc
32954     00 26 06 C6 |  if_b	mov	local01, #0
32958     01 26 06 36 |  if_ae	mov	local01, #1
3295c     13 FB 01 F6 | 	mov	result1, local01
32960                 | LR__5140
32960     A7 F0 03 F6 | 	mov	ptra, fp
32964     B2 00 A0 FD | 	call	#popregs_
32968                 | __struct__s_vfs_file_t_putchar_ret
32968     2D 00 64 FD | 	ret
3296c                 | 
3296c                 | __struct__s_vfs_file_t_getchar
3296c     03 4A 05 F6 | 	mov	COUNT_, #3
32970     A8 00 A0 FD | 	call	#pushregs_
32974     20 E4 05 F1 | 	add	objptr, #32
32978     F2 12 0A FB | 	rdlong	arg01, objptr wz
3297c     20 E4 85 F1 | 	sub	objptr, #32
32980     01 FA 65 A6 |  if_e	neg	result1, #1
32984     38 00 90 AD |  if_e	jmp	#LR__5150
32988                 | '     return getcf(__this);
32988     20 E4 05 F1 | 	add	objptr, #32
3298c     F2 26 02 FB | 	rdlong	local01, objptr
32990     13 29 02 F6 | 	mov	local02, local01
32994     20 E4 85 F1 | 	sub	objptr, #32
32998     13 28 46 F7 | 	zerox	local02, #19
3299c     14 26 46 F0 | 	shr	local01, #20
329a0     02 26 66 F0 | 	shl	local01, #2
329a4     ED 26 02 F1 | 	add	local01, __methods__
329a8     13 27 02 FB | 	rdlong	local01, local01
329ac     F2 12 02 F6 | 	mov	arg01, objptr
329b0     F2 2A 02 F6 | 	mov	local03, objptr
329b4     14 E5 01 F6 | 	mov	objptr, local02
329b8     2D 26 62 FD | 	call	local01
329bc     15 E5 01 F6 | 	mov	objptr, local03
329c0                 | LR__5150
329c0     A7 F0 03 F6 | 	mov	ptra, fp
329c4     B2 00 A0 FD | 	call	#popregs_
329c8                 | __struct__s_vfs_file_t_getchar_ret
329c8     2D 00 64 FD | 	ret
329cc                 | 
329cc                 | __struct___bas_wrap_sender_tx
329cc     03 4A 05 F6 | 	mov	COUNT_, #3
329d0     A8 00 A0 FD | 	call	#pushregs_
329d4     F2 26 02 FB | 	rdlong	local01, objptr
329d8     13 29 02 F6 | 	mov	local02, local01
329dc     13 26 46 F7 | 	zerox	local01, #19
329e0     14 28 46 F0 | 	shr	local02, #20
329e4     02 28 66 F0 | 	shl	local02, #2
329e8     ED 28 02 F1 | 	add	local02, __methods__
329ec     14 29 02 FB | 	rdlong	local02, local02
329f0     F2 2A 02 F6 | 	mov	local03, objptr
329f4     13 E5 01 F6 | 	mov	objptr, local01
329f8     2D 28 62 FD | 	call	local02
329fc     15 E5 01 F6 | 	mov	objptr, local03
32a00     01 FA 05 F6 | 	mov	result1, #1
32a04     A7 F0 03 F6 | 	mov	ptra, fp
32a08     B2 00 A0 FD | 	call	#popregs_
32a0c                 | __struct___bas_wrap_sender_tx_ret
32a0c     2D 00 64 FD | 	ret
32a10                 | 
32a10                 | __struct___bas_wrap_sender_rx
32a10     03 4A 05 F6 | 	mov	COUNT_, #3
32a14     A8 00 A0 FD | 	call	#pushregs_
32a18     04 E4 05 F1 | 	add	objptr, #4
32a1c     F2 26 02 FB | 	rdlong	local01, objptr
32a20     13 29 02 F6 | 	mov	local02, local01
32a24     04 E4 85 F1 | 	sub	objptr, #4
32a28     13 28 46 F7 | 	zerox	local02, #19
32a2c     14 26 46 F0 | 	shr	local01, #20
32a30     02 26 66 F0 | 	shl	local01, #2
32a34     ED 26 02 F1 | 	add	local01, __methods__
32a38     13 27 02 FB | 	rdlong	local01, local01
32a3c     F2 2A 02 F6 | 	mov	local03, objptr
32a40     14 E5 01 F6 | 	mov	objptr, local02
32a44     2D 26 62 FD | 	call	local01
32a48     15 E5 01 F6 | 	mov	objptr, local03
32a4c     A7 F0 03 F6 | 	mov	ptra, fp
32a50     B2 00 A0 FD | 	call	#popregs_
32a54                 | __struct___bas_wrap_sender_rx_ret
32a54     2D 00 64 FD | 	ret
32a58                 | 
32a58                 | __struct___bas_wrap_sender_close
32a58     03 4A 05 F6 | 	mov	COUNT_, #3
32a5c     A8 00 A0 FD | 	call	#pushregs_
32a60     08 E4 05 F1 | 	add	objptr, #8
32a64     F2 26 02 FB | 	rdlong	local01, objptr
32a68     13 29 02 F6 | 	mov	local02, local01
32a6c     08 E4 85 F1 | 	sub	objptr, #8
32a70     13 28 46 F7 | 	zerox	local02, #19
32a74     14 26 46 F0 | 	shr	local01, #20
32a78     02 26 66 F0 | 	shl	local01, #2
32a7c     ED 26 02 F1 | 	add	local01, __methods__
32a80     13 27 02 FB | 	rdlong	local01, local01
32a84     F2 2A 02 F6 | 	mov	local03, objptr
32a88     14 E5 01 F6 | 	mov	objptr, local02
32a8c     2D 26 62 FD | 	call	local01
32a90     15 E5 01 F6 | 	mov	objptr, local03
32a94     A7 F0 03 F6 | 	mov	ptra, fp
32a98     B2 00 A0 FD | 	call	#popregs_
32a9c                 | __struct___bas_wrap_sender_close_ret
32a9c     2D 00 64 FD | 	ret
32aa0                 | 
32aa0                 | LR__5160
32aa0     2F          | 	byte	"/"
32aa1     00          | 	byte	0
32aa2                 | LR__5161
32aa2     69 6E 66    | 	byte	"inf"
32aa5     00          | 	byte	0
32aa6                 | LR__5162
32aa6     6E 61 6E    | 	byte	"nan"
32aa9     00          | 	byte	0
32aaa                 | LR__5163
32aaa                 | 	byte	
32aaa     00          | 	byte	0
32aab                 | LR__5164
32aab                 | 	byte	
32aab     00          | 	byte	0
32aac                 | LR__5165
32aac                 | 	byte	
32aac     00          | 	byte	0
32aad                 | LR__5166
32aad                 | 	byte	
32aad     00          | 	byte	0
32aae                 | LR__5167
32aae                 | 	byte	
32aae     00          | 	byte	0
32aaf                 | LR__5168
32aaf                 | 	byte	
32aaf     00          | 	byte	0
32ab0                 | LR__5169
32ab0                 | 	byte	
32ab0     00          | 	byte	0
32ab1                 | LR__5170
32ab1                 | 	byte	
32ab1     00          | 	byte	0
32ab2                 | LR__5171
32ab2     00          | 	byte	0
32ab3     00          | 	byte	0
32ab4                 | LR__5172
32ab4     00          | 	byte	0
32ab5     00          | 	byte	0
32ab6                 | LR__5173
32ab6     00          | 	byte	0
32ab7     00          | 	byte	0
32ab8                 | LR__5174
32ab8     20 21 21 21 
32abc     20 63 6F 72 
32ac0     72 75 70 74 
32ac4     65 64 20 68 
32ac8     65 61 70 3F 
32acc     3F 3F 20 21 
32ad0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
32ad3     00          | 	byte	0
32ad4                 | LR__5175
32ad4     20 21 21 21 
32ad8     20 6F 75 74 
32adc     20 6F 66 20 
32ae0     68 65 61 70 
32ae4     20 6D 65 6D 
32ae8     6F 72 79 20 
32aec     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
32af0     00          | 	byte	0
32af1                 | LR__5176
32af1     20 21 21 21 
32af5     20 63 6F 72 
32af9     72 75 70 74 
32afd     65 64 20 68 
32b01     65 61 70 20 
32b05     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
32b09     00          | 	byte	0
32b0a                 | LR__5177
32b0a     00          | 	byte	0
32b0b     00          | 	byte	0
32b0c                 | LR__5178
32b0c     2E          | 	byte	"."
32b0d     00          | 	byte	0
32b0e                 | LR__5179
32b0e     00          | 	byte	0
32b0f     00          | 	byte	0
32b10                 | LR__5180
32b10     00          | 	byte	0
32b11     00          | 	byte	0
32b12                 | LR__5181
32b12     00          | 	byte	0
32b13     00          | 	byte	0
32b14                 | LR__5182
32b14     2A 3A 3C 3E 
32b18     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
32b1c     00          | 	byte	0
32b1d                 | LR__5183
32b1d     2B 2C 3B 3D 
32b21     5B 5D       | 	byte	"+,;=[]"
32b23     00          | 	byte	0
32b24                 | LR__5184
32b24     46 41 54 33 
32b28     32 20 20 20 | 	byte	"FAT32   "
32b2c     00          | 	byte	0
32b2d                 | LR__5185
32b2d     54 5A       | 	byte	"TZ"
32b2f     00          | 	byte	0
32b30                 | LR__5186
32b30     00          | 	byte	0
32b31     00          | 	byte	0
32b32                 | LR__5187
32b32                 | 	byte	
32b32     00          | 	byte	0
32b33                 | LR__5188
32b33                 | 	byte	
32b33     00          | 	byte	0
32b34                 | LR__5189
32b34                 | 	byte	
32b34     00          | 	byte	0
32b35                 | LR__5190
32b35                 | 	byte	
32b35     00          | 	byte	0
32b36                 | LR__5191
32b36     22          | 	byte	34
32b37     00          | 	byte	0
32b38                 | LR__5192
32b38     22          | 	byte	34
32b39     00          | 	byte	0
32b3a                 | LR__5193
32b3a     3A          | 	byte	":"
32b3b     00          | 	byte	0
32b3c                 | LR__5194
32b3c                 | 	byte	
32b3c     00          | 	byte	0
32b3d                 | LR__5195
32b3d                 | 	byte	
32b3d     00          | 	byte	0
32b3e                 | LR__5196
32b3e                 | 	byte	
32b3e     00          | 	byte	0
32b3f                 | LR__5197
32b3f                 | 	byte	
32b3f     00          | 	byte	0
32b40                 | LR__5198
32b40                 | 	byte	
32b40     00          | 	byte	0
32b41                 | LR__5199
32b41                 | 	byte	
32b41     00          | 	byte	0
32b42                 | LR__5200
32b42                 | 	byte	
32b42     00          | 	byte	0
32b43                 | LR__5201
32b43     30          | 	byte	"0"
32b44     00          | 	byte	0
32b45                 | LR__5202
32b45     22          | 	byte	34
32b46     00          | 	byte	0
32b47                 | LR__5203
32b47     22          | 	byte	34
32b48     00          | 	byte	0
32b49                 | LR__5204
32b49     22          | 	byte	34
32b4a     00          | 	byte	0
32b4b                 | LR__5205
32b4b     22          | 	byte	34
32b4c     00          | 	byte	0
32b4d                 | LR__5206
32b4d     22          | 	byte	34
32b4e     00          | 	byte	0
32b4f                 | LR__5207
32b4f     3E          | 	byte	">"
32b50     00          | 	byte	0
32b51                 | LR__5208
32b51     3C          | 	byte	"<"
32b52     00          | 	byte	0
32b53                 | LR__5209
32b53     2B          | 	byte	"+"
32b54     00          | 	byte	0
32b55                 | LR__5210
32b55     2D          | 	byte	"-"
32b56     00          | 	byte	0
32b57                 | LR__5211
32b57     2A          | 	byte	"*"
32b58     00          | 	byte	0
32b59                 | LR__5212
32b59     2F          | 	byte	"/"
32b5a     00          | 	byte	0
32b5b                 | LR__5213
32b5b     5E          | 	byte	"^"
32b5c     00          | 	byte	0
32b5d                 | LR__5214
32b5d     3D          | 	byte	"="
32b5e     00          | 	byte	0
32b5f                 | LR__5215
32b5f     2B          | 	byte	"+"
32b60     00          | 	byte	0
32b61                 | LR__5216
32b61     2B          | 	byte	"+"
32b62     00          | 	byte	0
32b63                 | LR__5217
32b63     2D          | 	byte	"-"
32b64     00          | 	byte	0
32b65                 | LR__5218
32b65     2D          | 	byte	"-"
32b66     00          | 	byte	0
32b67                 | LR__5219
32b67     3C          | 	byte	"<"
32b68     00          | 	byte	0
32b69                 | LR__5220
32b69     3E          | 	byte	">"
32b6a     00          | 	byte	0
32b6b                 | LR__5221
32b6b     22          | 	byte	34
32b6c     00          | 	byte	0
32b6d                 | LR__5222
32b6d     22          | 	byte	34
32b6e     00          | 	byte	0
32b6f                 | LR__5223
32b6f     65 6C 73 65 | 	byte	"else"
32b73     00          | 	byte	0
32b74                 | LR__5224
32b74     74 68 65 6E | 	byte	"then"
32b78     00          | 	byte	0
32b79                 | LR__5225
32b79     2E          | 	byte	"."
32b7a     00          | 	byte	0
32b7b                 | LR__5226
32b7b     3F          | 	byte	"?"
32b7c     00          | 	byte	0
32b7d                 | LR__5227
32b7d     3F          | 	byte	"?"
32b7e     00          | 	byte	0
32b7f                 | LR__5228
32b7f     6D 6F 75 73 
32b83     65          | 	byte	"mouse"
32b84     00          | 	byte	0
32b85                 | LR__5229
32b85     63 75 72 73 
32b89     6F 72       | 	byte	"cursor"
32b8b     00          | 	byte	0
32b8c                 | LR__5230
32b8c     63 6C 69 63 
32b90     6B          | 	byte	"click"
32b91     00          | 	byte	0
32b92                 | LR__5231
32b92     6F 6E       | 	byte	"on"
32b94     00          | 	byte	0
32b95                 | LR__5232
32b95     31          | 	byte	"1"
32b96     00          | 	byte	0
32b97                 | LR__5233
32b97     6F 66 66    | 	byte	"off"
32b9a     00          | 	byte	0
32b9b                 | LR__5234
32b9b     30          | 	byte	"0"
32b9c     00          | 	byte	0
32b9d                 | LR__5235
32b9d     6D 6F 64 65 | 	byte	"mode"
32ba1     00          | 	byte	0
32ba2                 | LR__5236
32ba2     6D 2E       | 	byte	"m."
32ba4     00          | 	byte	0
32ba5                 | LR__5237
32ba5     61 74 61 72 
32ba9     69          | 	byte	"atari"
32baa     00          | 	byte	0
32bab                 | LR__5238
32bab     30          | 	byte	"0"
32bac     00          | 	byte	0
32bad                 | LR__5239
32bad     70 63 5F 61 
32bb1     6D 62 65 72 | 	byte	"pc_amber"
32bb5     00          | 	byte	0
32bb6                 | LR__5240
32bb6     31          | 	byte	"1"
32bb7     00          | 	byte	0
32bb8                 | LR__5241
32bb8     70 63 5F 67 
32bbc     72 65 65 6E | 	byte	"pc_green"
32bc0     00          | 	byte	0
32bc1                 | LR__5242
32bc1     32          | 	byte	"2"
32bc2     00          | 	byte	0
32bc3                 | LR__5243
32bc3     70 63 5F 77 
32bc7     68 69 74 65 | 	byte	"pc_white"
32bcb     00          | 	byte	0
32bcc                 | LR__5244
32bcc     33          | 	byte	"3"
32bcd     00          | 	byte	0
32bce                 | LR__5245
32bce     73 74       | 	byte	"st"
32bd0     00          | 	byte	0
32bd1                 | LR__5246
32bd1     34          | 	byte	"4"
32bd2     00          | 	byte	0
32bd3                 | LR__5247
32bd3                 | 	byte	
32bd3     00          | 	byte	0
32bd4                 | LR__5248
32bd4     6C 6F 61 64 | 	byte	"load"
32bd8     00          | 	byte	0
32bd9                 | LR__5249
32bd9     73 61 76 65 | 	byte	"save"
32bdd     00          | 	byte	0
32bde                 | LR__5250
32bde     62 72 75 6E | 	byte	"brun"
32be2     00          | 	byte	0
32be3                 | LR__5251
32be3     72 75 6E    | 	byte	"run"
32be6     00          | 	byte	0
32be7                 | LR__5252
32be7     6C 6F 2E    | 	byte	"lo."
32bea     00          | 	byte	0
32beb                 | LR__5253
32beb     73 2E       | 	byte	"s."
32bed     00          | 	byte	0
32bee                 | LR__5254
32bee     62 72 2E    | 	byte	"br."
32bf1     00          | 	byte	0
32bf2                 | LR__5255
32bf2     65 6E 74 65 
32bf6     72          | 	byte	"enter"
32bf7     00          | 	byte	0
32bf8                 | LR__5256
32bf8     65 2E       | 	byte	"e."
32bfa     00          | 	byte	0
32bfb                 | LR__5257
32bfb     64 65 6C 65 
32bff     74 65       | 	byte	"delete"
32c01     00          | 	byte	0
32c02                 | LR__5258
32c02     6D 6B 64 69 
32c06     72          | 	byte	"mkdir"
32c07     00          | 	byte	0
32c08                 | LR__5259
32c08     63 64       | 	byte	"cd"
32c0a     00          | 	byte	0
32c0b                 | LR__5260
32c0b     63 64 2E    | 	byte	"cd."
32c0e     00          | 	byte	0
32c0f                 | LR__5261
32c0f     2E          | 	byte	"."
32c10     00          | 	byte	0
32c11                 | LR__5262
32c11     2E 2E       | 	byte	".."
32c13     00          | 	byte	0
32c14                 | LR__5263
32c14     63 64       | 	byte	"cd"
32c16     00          | 	byte	0
32c17                 | LR__5264
32c17     2F          | 	byte	"/"
32c18     00          | 	byte	0
32c19                 | LR__5265
32c19                 | 	byte	
32c19     00          | 	byte	0
32c1a                 | LR__5266
32c1a                 | 	byte	
32c1a     00          | 	byte	0
32c1b                 | LR__5267
32c1b                 | 	byte	
32c1b     00          | 	byte	0
32c1c                 | LR__5268
32c1c                 | 	byte	
32c1c     00          | 	byte	0
32c1d                 | LR__5269
32c1d                 | 	byte	
32c1d     00          | 	byte	0
32c1e                 | LR__5270
32c1e     52 65 61 64 
32c22     79          | 	byte	"Ready"
32c23     00          | 	byte	0
32c24                 | LR__5271
32c24     2B          | 	byte	"+"
32c25     00          | 	byte	0
32c26                 | LR__5272
32c26     2D          | 	byte	"-"
32c27     00          | 	byte	0
32c28                 | LR__5273
32c28     6F 72       | 	byte	"or"
32c2a     00          | 	byte	0
32c2b                 | LR__5274
32c2b     78 6F 72    | 	byte	"xor"
32c2e     00          | 	byte	0
32c2f                 | LR__5275
32c2f     2A          | 	byte	"*"
32c30     00          | 	byte	0
32c31                 | LR__5276
32c31     2F          | 	byte	"/"
32c32     00          | 	byte	0
32c33                 | LR__5277
32c33     61 6E 64    | 	byte	"and"
32c36     00          | 	byte	0
32c37                 | LR__5278
32c37     64 69 76    | 	byte	"div"
32c3a     00          | 	byte	0
32c3b                 | LR__5279
32c3b     6D 6F 64    | 	byte	"mod"
32c3e     00          | 	byte	0
32c3f                 | LR__5280
32c3f     73 68 6C    | 	byte	"shl"
32c42     00          | 	byte	0
32c43                 | LR__5281
32c43     73 68 72    | 	byte	"shr"
32c46     00          | 	byte	0
32c47                 | LR__5282
32c47     5E          | 	byte	"^"
32c48     00          | 	byte	0
32c49                 | LR__5283
32c49     6E 6F 74    | 	byte	"not"
32c4c     00          | 	byte	0
32c4d                 | LR__5284
32c4d     40          | 	byte	"@"
32c4e     00          | 	byte	0
32c4f                 | LR__5285
32c4f     3D          | 	byte	"="
32c50     00          | 	byte	0
32c51                 | LR__5286
32c51     3E 3D       | 	byte	">="
32c53     00          | 	byte	0
32c54                 | LR__5287
32c54     3C 3D       | 	byte	"<="
32c56     00          | 	byte	0
32c57                 | LR__5288
32c57     3C          | 	byte	"<"
32c58     00          | 	byte	0
32c59                 | LR__5289
32c59     3E          | 	byte	">"
32c5a     00          | 	byte	0
32c5b                 | LR__5290
32c5b     3C 3E       | 	byte	"<>"
32c5d     00          | 	byte	0
32c5e                 | LR__5291
32c5e     2B 2B       | 	byte	"++"
32c60     00          | 	byte	0
32c61                 | LR__5292
32c61     2D 2D       | 	byte	"--"
32c63     00          | 	byte	0
32c64                 | LR__5293
32c64     23          | 	byte	"#"
32c65     00          | 	byte	0
32c66                 | LR__5294
32c66     30          | 	byte	"0"
32c67     00          | 	byte	0
32c68                 | LR__5295
32c68     39          | 	byte	"9"
32c69     00          | 	byte	0
32c6a                 | LR__5296
32c6a     23 72 65 61 
32c6e     64          | 	byte	"#read"
32c6f     00          | 	byte	0
32c70                 | LR__5297
32c70     23 77 72 69 
32c74     74 65       | 	byte	"#write"
32c76     00          | 	byte	0
32c77                 | LR__5298
32c77     23 61 70 70 
32c7b     65 6E 64    | 	byte	"#append"
32c7e     00          | 	byte	0
32c7f                 | LR__5299
32c7f     23          | 	byte	"#"
32c80     00          | 	byte	0
32c81                 | LR__5300
32c81     23          | 	byte	"#"
32c82     00          | 	byte	0
32c83                 | LR__5301
32c83     2D          | 	byte	"-"
32c84     00          | 	byte	0
32c85                 | LR__5302
32c85     30          | 	byte	"0"
32c86     00          | 	byte	0
32c87                 | LR__5303
32c87     63          | 	byte	"c"
32c88     00          | 	byte	0
32c89                 | LR__5304
32c89     63 23       | 	byte	"c#"
32c8b     00          | 	byte	0
32c8c                 | LR__5305
32c8c     64          | 	byte	"d"
32c8d     00          | 	byte	0
32c8e                 | LR__5306
32c8e     64 23       | 	byte	"d#"
32c90     00          | 	byte	0
32c91                 | LR__5307
32c91     65          | 	byte	"e"
32c92     00          | 	byte	0
32c93                 | LR__5308
32c93     66          | 	byte	"f"
32c94     00          | 	byte	0
32c95                 | LR__5309
32c95     66 23       | 	byte	"f#"
32c97     00          | 	byte	0
32c98                 | LR__5310
32c98     67          | 	byte	"g"
32c99     00          | 	byte	0
32c9a                 | LR__5311
32c9a     67 23       | 	byte	"g#"
32c9c     00          | 	byte	0
32c9d                 | LR__5312
32c9d     61          | 	byte	"a"
32c9e     00          | 	byte	0
32c9f                 | LR__5313
32c9f     61 23       | 	byte	"a#"
32ca1     00          | 	byte	0
32ca2                 | LR__5314
32ca2     68          | 	byte	"h"
32ca3     00          | 	byte	0
32ca4                 | LR__5315
32ca4     62          | 	byte	"b"
32ca5     00          | 	byte	0
32ca6                 | LR__5316
32ca6     2B          | 	byte	"+"
32ca7     00          | 	byte	0
32ca8                 | LR__5317
32ca8     2D          | 	byte	"-"
32ca9     00          | 	byte	0
32caa                 | LR__5318
32caa     3D          | 	byte	"="
32cab     00          | 	byte	0
32cac                 | LR__5319
32cac     2C          | 	byte	","
32cad     00          | 	byte	0
32cae                 | LR__5320
32cae     2A          | 	byte	"*"
32caf     00          | 	byte	0
32cb0                 | LR__5321
32cb0     2F          | 	byte	"/"
32cb1     00          | 	byte	0
32cb2                 | LR__5322
32cb2     3B          | 	byte	";"
32cb3     00          | 	byte	0
32cb4                 | LR__5323
32cb4     22          | 	byte	34
32cb5     00          | 	byte	0
32cb6                 | LR__5324
32cb6     5E          | 	byte	"^"
32cb7     00          | 	byte	0
32cb8                 | LR__5325
32cb8     29          | 	byte	")"
32cb9     00          | 	byte	0
32cba                 | LR__5326
32cba     28          | 	byte	"("
32cbb     00          | 	byte	0
32cbc                 | LR__5327
32cbc     3A          | 	byte	":"
32cbd     00          | 	byte	0
32cbe                 | LR__5328
32cbe     20          | 	byte	" "
32cbf     00          | 	byte	0
32cc0                 | LR__5329
32cc0     3E          | 	byte	">"
32cc1     00          | 	byte	0
32cc2                 | LR__5330
32cc2     3C          | 	byte	"<"
32cc3     00          | 	byte	0
32cc4                 | LR__5331
32cc4     3D          | 	byte	"="
32cc5     00          | 	byte	0
32cc6                 | LR__5332
32cc6     62 65 65 70 | 	byte	"beep"
32cca     00          | 	byte	0
32ccb                 | LR__5333
32ccb     62 2E       | 	byte	"b."
32ccd     00          | 	byte	0
32cce                 | LR__5334
32cce     62 6C 69 74 | 	byte	"blit"
32cd2     00          | 	byte	0
32cd3                 | LR__5335
32cd3     62 6F 78    | 	byte	"box"
32cd6     00          | 	byte	0
32cd7                 | LR__5336
32cd7     62 72 75 6E | 	byte	"brun"
32cdb     00          | 	byte	0
32cdc                 | LR__5337
32cdc     62 72 2E    | 	byte	"br."
32cdf     00          | 	byte	0
32ce0                 | LR__5338
32ce0     63 64       | 	byte	"cd"
32ce2     00          | 	byte	0
32ce3                 | LR__5339
32ce3     63 68 61 6E 
32ce7     67 65 66 72 
32ceb     65 71       | 	byte	"changefreq"
32ced     00          | 	byte	0
32cee                 | LR__5340
32cee     63 66 2E    | 	byte	"cf."
32cf1     00          | 	byte	0
32cf2                 | LR__5341
32cf2     63 68 61 6E 
32cf6     67 65 70 61 
32cfa     6E          | 	byte	"changepan"
32cfb     00          | 	byte	0
32cfc                 | LR__5342
32cfc     63 70 2E    | 	byte	"cp."
32cff     00          | 	byte	0
32d00                 | LR__5343
32d00     63 68 61 6E 
32d04     67 65 76 6F 
32d08     6C          | 	byte	"changevol"
32d09     00          | 	byte	0
32d0a                 | LR__5344
32d0a     63 76 2E    | 	byte	"cv."
32d0d     00          | 	byte	0
32d0e                 | LR__5345
32d0e     63 68 61 6E 
32d12     67 65 77 61 
32d16     76 65       | 	byte	"changewave"
32d18     00          | 	byte	0
32d19                 | LR__5346
32d19     63 77 2E    | 	byte	"cw."
32d1c     00          | 	byte	0
32d1d                 | LR__5347
32d1d     63 69 72 63 
32d21     6C 65       | 	byte	"circle"
32d23     00          | 	byte	0
32d24                 | LR__5348
32d24     63 69 2E    | 	byte	"ci."
32d27     00          | 	byte	0
32d28                 | LR__5349
32d28     63 6C 69 63 
32d2c     6B          | 	byte	"click"
32d2d     00          | 	byte	0
32d2e                 | LR__5350
32d2e     63 6C 6F 73 
32d32     65          | 	byte	"close"
32d33     00          | 	byte	0
32d34                 | LR__5351
32d34     63 6C 73    | 	byte	"cls"
32d37     00          | 	byte	0
32d38                 | LR__5352
32d38     63 6F 6C 6F 
32d3c     72          | 	byte	"color"
32d3d     00          | 	byte	0
32d3e                 | LR__5353
32d3e     63 2E       | 	byte	"c."
32d40     00          | 	byte	0
32d41                 | LR__5354
32d41     63 73 61 76 
32d45     65          | 	byte	"csave"
32d46     00          | 	byte	0
32d47                 | LR__5355
32d47     63 73 2E    | 	byte	"cs."
32d4a     00          | 	byte	0
32d4b                 | LR__5356
32d4b     63 75 72 73 
32d4f     6F 72       | 	byte	"cursor"
32d51     00          | 	byte	0
32d52                 | LR__5357
32d52     64 65 66 73 
32d56     6E 64       | 	byte	"defsnd"
32d58     00          | 	byte	0
32d59                 | LR__5358
32d59     64 65 66 65 
32d5d     6E 76       | 	byte	"defenv"
32d5f     00          | 	byte	0
32d60                 | LR__5359
32d60     64 65 66 73 
32d64     70 72 69 74 
32d68     65          | 	byte	"defsprite"
32d69     00          | 	byte	0
32d6a                 | LR__5360
32d6a     64 73 2E    | 	byte	"ds."
32d6d     00          | 	byte	0
32d6e                 | LR__5361
32d6e     64 65 67    | 	byte	"deg"
32d71     00          | 	byte	0
32d72                 | LR__5362
32d72     64 65 6C 65 
32d76     74 65       | 	byte	"delete"
32d78     00          | 	byte	0
32d79                 | LR__5363
32d79     64 69 6D    | 	byte	"dim"
32d7c     00          | 	byte	0
32d7d                 | LR__5364
32d7d     64 69 72    | 	byte	"dir"
32d80     00          | 	byte	0
32d81                 | LR__5365
32d81     64 70 6F 6B 
32d85     65          | 	byte	"dpoke"
32d86     00          | 	byte	0
32d87                 | LR__5366
32d87     64 72 61 77 | 	byte	"draw"
32d8b     00          | 	byte	0
32d8c                 | LR__5367
32d8c     64 72 61 77 
32d90     74 6F       | 	byte	"drawto"
32d92     00          | 	byte	0
32d93                 | LR__5368
32d93     64 72 2E    | 	byte	"dr."
32d96     00          | 	byte	0
32d97                 | LR__5369
32d97     65 6C 73 65 | 	byte	"else"
32d9b     00          | 	byte	0
32d9c                 | LR__5370
32d9c     65 6E 64    | 	byte	"end"
32d9f     00          | 	byte	0
32da0                 | LR__5371
32da0     65 6E 74 65 
32da4     72          | 	byte	"enter"
32da5     00          | 	byte	0
32da6                 | LR__5372
32da6     65 2E       | 	byte	"e."
32da8     00          | 	byte	0
32da9                 | LR__5373
32da9     66 63 69 72 
32dad     63 6C 65    | 	byte	"fcircle"
32db0     00          | 	byte	0
32db1                 | LR__5374
32db1     66 63 2E    | 	byte	"fc."
32db4     00          | 	byte	0
32db5                 | LR__5375
32db5     66 69 6C 6C | 	byte	"fill"
32db9     00          | 	byte	0
32dba                 | LR__5376
32dba     66 69 2E    | 	byte	"fi."
32dbd     00          | 	byte	0
32dbe                 | LR__5377
32dbe     66 6F 6E 74 | 	byte	"font"
32dc2     00          | 	byte	0
32dc3                 | LR__5378
32dc3     66 6F 72    | 	byte	"for"
32dc6     00          | 	byte	0
32dc7                 | LR__5379
32dc7     66 2E       | 	byte	"f."
32dc9     00          | 	byte	0
32dca                 | LR__5380
32dca     66 72 61 6D 
32dce     65          | 	byte	"frame"
32dcf     00          | 	byte	0
32dd0                 | LR__5381
32dd0     66 72 2E    | 	byte	"fr."
32dd3     00          | 	byte	0
32dd4                 | LR__5382
32dd4     67 65 74    | 	byte	"get"
32dd7     00          | 	byte	0
32dd8                 | LR__5383
32dd8     67 6F 73 75 
32ddc     62          | 	byte	"gosub"
32ddd     00          | 	byte	0
32dde                 | LR__5384
32dde     67 6F 74 6F | 	byte	"goto"
32de2     00          | 	byte	0
32de3                 | LR__5385
32de3     67 2E       | 	byte	"g."
32de5     00          | 	byte	0
32de6                 | LR__5386
32de6     69 66       | 	byte	"if"
32de8     00          | 	byte	0
32de9                 | LR__5387
32de9     69 6E 6B    | 	byte	"ink"
32dec     00          | 	byte	0
32ded                 | LR__5388
32ded     69 2E       | 	byte	"i."
32def     00          | 	byte	0
32df0                 | LR__5389
32df0     69 6E 70 75 
32df4     74          | 	byte	"input"
32df5     00          | 	byte	0
32df6                 | LR__5390
32df6     6C 69 73 74 | 	byte	"list"
32dfa     00          | 	byte	0
32dfb                 | LR__5391
32dfb     6C 2E       | 	byte	"l."
32dfd     00          | 	byte	0
32dfe                 | LR__5392
32dfe     6C 6F 61 64 | 	byte	"load"
32e02     00          | 	byte	0
32e03                 | LR__5393
32e03     6C 6F 2E    | 	byte	"lo."
32e06     00          | 	byte	0
32e07                 | LR__5394
32e07     6C 70 6F 6B 
32e0b     65          | 	byte	"lpoke"
32e0c     00          | 	byte	0
32e0d                 | LR__5395
32e0d     6D 6B 64 69 
32e11     72          | 	byte	"mkdir"
32e12     00          | 	byte	0
32e13                 | LR__5396
32e13     6D 6F 64 65 | 	byte	"mode"
32e17     00          | 	byte	0
32e18                 | LR__5397
32e18     6D 2E       | 	byte	"m."
32e1a     00          | 	byte	0
32e1b                 | LR__5398
32e1b     6D 6F 75 73 
32e1f     65          | 	byte	"mouse"
32e20     00          | 	byte	0
32e21                 | LR__5399
32e21     6E 65 77    | 	byte	"new"
32e24     00          | 	byte	0
32e25                 | LR__5400
32e25     6E 65 78 74 | 	byte	"next"
32e29     00          | 	byte	0
32e2a                 | LR__5401
32e2a     6E 2E       | 	byte	"n."
32e2c     00          | 	byte	0
32e2d                 | LR__5402
32e2d     6F 6E       | 	byte	"on"
32e2f     00          | 	byte	0
32e30                 | LR__5403
32e30     6F 70 65 6E | 	byte	"open"
32e34     00          | 	byte	0
32e35                 | LR__5404
32e35     70 61 70 65 
32e39     72          | 	byte	"paper"
32e3a     00          | 	byte	0
32e3b                 | LR__5405
32e3b     70 61 2E    | 	byte	"pa."
32e3e     00          | 	byte	0
32e3f                 | LR__5406
32e3f     70 69 6E 66 
32e43     6C 6F 61 74 | 	byte	"pinfloat"
32e47     00          | 	byte	0
32e48                 | LR__5407
32e48     70 69 6E 68 
32e4c     69          | 	byte	"pinhi"
32e4d     00          | 	byte	0
32e4e                 | LR__5408
32e4e     70 69 6E 6C 
32e52     6F          | 	byte	"pinlo"
32e53     00          | 	byte	0
32e54                 | LR__5409
32e54     70 69 6E 73 
32e58     74 61 72 74 | 	byte	"pinstart"
32e5c     00          | 	byte	0
32e5d                 | LR__5410
32e5d     70 69 6E 74 
32e61     6F 67 67 6C 
32e65     65          | 	byte	"pintoggle"
32e66     00          | 	byte	0
32e67                 | LR__5411
32e67     70 69 6E 77 
32e6b     72 69 74 65 | 	byte	"pinwrite"
32e6f     00          | 	byte	0
32e70                 | LR__5412
32e70     70 6C 61 79 | 	byte	"play"
32e74     00          | 	byte	0
32e75                 | LR__5413
32e75     70 2E       | 	byte	"p."
32e77     00          | 	byte	0
32e78                 | LR__5414
32e78     70 6C 6F 74 | 	byte	"plot"
32e7c     00          | 	byte	0
32e7d                 | LR__5415
32e7d     70 6C 2E    | 	byte	"pl."
32e80     00          | 	byte	0
32e81                 | LR__5416
32e81     70 6F 6B 65 | 	byte	"poke"
32e85     00          | 	byte	0
32e86                 | LR__5417
32e86     70 6F 70    | 	byte	"pop"
32e89     00          | 	byte	0
32e8a                 | LR__5418
32e8a     70 6F 73 69 
32e8e     74 69 6F 6E | 	byte	"position"
32e92     00          | 	byte	0
32e93                 | LR__5419
32e93     70 6F 73 2E | 	byte	"pos."
32e97     00          | 	byte	0
32e98                 | LR__5420
32e98     70 72 69 6E 
32e9c     74          | 	byte	"print"
32e9d     00          | 	byte	0
32e9e                 | LR__5421
32e9e     3F          | 	byte	"?"
32e9f     00          | 	byte	0
32ea0                 | LR__5422
32ea0     70 75 74    | 	byte	"put"
32ea3     00          | 	byte	0
32ea4                 | LR__5423
32ea4     72 61 64    | 	byte	"rad"
32ea7     00          | 	byte	0
32ea8                 | LR__5424
32ea8     72 65 6C 65 
32eac     61 73 65    | 	byte	"release"
32eaf     00          | 	byte	0
32eb0                 | LR__5425
32eb0     72 65 6D    | 	byte	"rem"
32eb3     00          | 	byte	0
32eb4                 | LR__5426
32eb4     27          | 	byte	"'"
32eb5     00          | 	byte	0
32eb6                 | LR__5427
32eb6     72 65 74 75 
32eba     72 6E       | 	byte	"return"
32ebc     00          | 	byte	0
32ebd                 | LR__5428
32ebd     72 75 6E    | 	byte	"run"
32ec0     00          | 	byte	0
32ec1                 | LR__5429
32ec1     73 61 76 65 | 	byte	"save"
32ec5     00          | 	byte	0
32ec6                 | LR__5430
32ec6     73 2E       | 	byte	"s."
32ec8     00          | 	byte	0
32ec9                 | LR__5431
32ec9     73 65 74 64 
32ecd     65 6C 61 79 | 	byte	"setdelay"
32ed1     00          | 	byte	0
32ed2                 | LR__5432
32ed2     73 64 2E    | 	byte	"sd."
32ed5     00          | 	byte	0
32ed6                 | LR__5433
32ed6     73 65 74 65 
32eda     6E 76       | 	byte	"setenv"
32edc     00          | 	byte	0
32edd                 | LR__5434
32edd     73 65 2E    | 	byte	"se."
32ee0     00          | 	byte	0
32ee1                 | LR__5435
32ee1     73 65 74 6C 
32ee5     65 6E       | 	byte	"setlen"
32ee7     00          | 	byte	0
32ee8                 | LR__5436
32ee8     73 6C 2E    | 	byte	"sl."
32eeb     00          | 	byte	0
32eec                 | LR__5437
32eec     73 65 74 70 
32ef0     61 6E       | 	byte	"setpan"
32ef2     00          | 	byte	0
32ef3                 | LR__5438
32ef3     73 70 2E    | 	byte	"sp."
32ef6     00          | 	byte	0
32ef7                 | LR__5439
32ef7     73 65 74 73 
32efb     75 73 74 61 
32eff     69 6E       | 	byte	"setsustain"
32f01     00          | 	byte	0
32f02                 | LR__5440
32f02     73 73 2E    | 	byte	"ss."
32f05     00          | 	byte	0
32f06                 | LR__5441
32f06     73 65 74 76 
32f0a     6F 6C       | 	byte	"setvol"
32f0c     00          | 	byte	0
32f0d                 | LR__5442
32f0d     73 76 2E    | 	byte	"sv."
32f10     00          | 	byte	0
32f11                 | LR__5443
32f11     73 65 74 77 
32f15     61 76 65    | 	byte	"setwave"
32f18     00          | 	byte	0
32f19                 | LR__5444
32f19     73 77 2E    | 	byte	"sw."
32f1c     00          | 	byte	0
32f1d                 | LR__5445
32f1d     73 65 74 77 
32f21     61 76       | 	byte	"setwav"
32f23     00          | 	byte	0
32f24                 | LR__5446
32f24     73 68 75 74 
32f28     75 70       | 	byte	"shutup"
32f2a     00          | 	byte	0
32f2b                 | LR__5447
32f2b     73 68 2E    | 	byte	"sh."
32f2e     00          | 	byte	0
32f2f                 | LR__5448
32f2f     73 6F 75 6E 
32f33     64          | 	byte	"sound"
32f34     00          | 	byte	0
32f35                 | LR__5449
32f35     73 6F 2E    | 	byte	"so."
32f38     00          | 	byte	0
32f39                 | LR__5450
32f39     73 70 72 69 
32f3d     74 65       | 	byte	"sprite"
32f3f     00          | 	byte	0
32f40                 | LR__5451
32f40     73 70 72 2E | 	byte	"spr."
32f44     00          | 	byte	0
32f45                 | LR__5452
32f45     74 68 65 6E | 	byte	"then"
32f49     00          | 	byte	0
32f4a                 | LR__5453
32f4a     77 61 69 74 
32f4e     6D 73       | 	byte	"waitms"
32f50     00          | 	byte	0
32f51                 | LR__5454
32f51     77 2E       | 	byte	"w."
32f53     00          | 	byte	0
32f54                 | LR__5455
32f54     77 61 69 74 
32f58     63 6C 6F 63 
32f5c     6B          | 	byte	"waitclock"
32f5d     00          | 	byte	0
32f5e                 | LR__5456
32f5e     77 63 2E    | 	byte	"wc."
32f61     00          | 	byte	0
32f62                 | LR__5457
32f62     77 61 69 74 
32f66     76 62 6C    | 	byte	"waitvbl"
32f69     00          | 	byte	0
32f6a                 | LR__5458
32f6a     77 76 2E    | 	byte	"wv."
32f6d     00          | 	byte	0
32f6e                 | LR__5459
32f6e     77 72 70 69 
32f72     6E          | 	byte	"wrpin"
32f73     00          | 	byte	0
32f74                 | LR__5460
32f74     77 78 70 69 
32f78     6E          | 	byte	"wxpin"
32f79     00          | 	byte	0
32f7a                 | LR__5461
32f7a     77 79 70 69 
32f7e     6E          | 	byte	"wypin"
32f7f     00          | 	byte	0
32f80                 | LR__5462
32f80     61 62 73    | 	byte	"abs"
32f83     00          | 	byte	0
32f84                 | LR__5463
32f84     61 63 6F 73 | 	byte	"acos"
32f88     00          | 	byte	0
32f89                 | LR__5464
32f89     61 64 72    | 	byte	"adr"
32f8c     00          | 	byte	0
32f8d                 | LR__5465
32f8d     61 64 64 72 | 	byte	"addr"
32f91     00          | 	byte	0
32f92                 | LR__5466
32f92     61 73 63    | 	byte	"asc"
32f95     00          | 	byte	0
32f96                 | LR__5467
32f96     61 73 69 6E | 	byte	"asin"
32f9a     00          | 	byte	0
32f9b                 | LR__5468
32f9b     61 74 6E    | 	byte	"atn"
32f9e     00          | 	byte	0
32f9f                 | LR__5469
32f9f     62 69 6E 24 | 	byte	"bin$"
32fa3     00          | 	byte	0
32fa4                 | LR__5470
32fa4     63 68 72 24 | 	byte	"chr$"
32fa8     00          | 	byte	0
32fa9                 | LR__5471
32fa9     63 6F 73    | 	byte	"cos"
32fac     00          | 	byte	0
32fad                 | LR__5472
32fad     64 70 65 65 
32fb1     6B          | 	byte	"dpeek"
32fb2     00          | 	byte	0
32fb3                 | LR__5473
32fb3     66 72 61 6D 
32fb7     65 62 75 66 | 	byte	"framebuf"
32fbb     00          | 	byte	0
32fbc                 | LR__5474
32fbc     66 62 2E    | 	byte	"fb."
32fbf     00          | 	byte	0
32fc0                 | LR__5475
32fc0     66 72 65    | 	byte	"fre"
32fc3     00          | 	byte	0
32fc4                 | LR__5476
32fc4     67 65 74 70 
32fc8     69 78 65 6C | 	byte	"getpixel"
32fcc     00          | 	byte	0
32fcd                 | LR__5477
32fcd     67 65 2E    | 	byte	"ge."
32fd0     00          | 	byte	0
32fd1                 | LR__5478
32fd1     67 65 74 65 
32fd5     6E 76 73 75 
32fd9     73 74 61 69 
32fdd     6E          | 	byte	"getenvsustain"
32fde     00          | 	byte	0
32fdf                 | LR__5479
32fdf     67 65 74 6E 
32fe3     6F 74 65 76 
32fe7     61 6C 75 65 | 	byte	"getnotevalue"
32feb     00          | 	byte	0
32fec                 | LR__5480
32fec     67 65 74 74 
32ff0     69 6D 65    | 	byte	"gettime"
32ff3     00          | 	byte	0
32ff4                 | LR__5481
32ff4     68 65 78 24 | 	byte	"hex$"
32ff8     00          | 	byte	0
32ff9                 | LR__5482
32ff9     69 6E 6B 65 
32ffd     79 24       | 	byte	"inkey$"
32fff     00          | 	byte	0
33000                 | LR__5483
33000     69 6E 74    | 	byte	"int"
33003     00          | 	byte	0
33004                 | LR__5484
33004     6C 65 66 74 
33008     24          | 	byte	"left$"
33009     00          | 	byte	0
3300a                 | LR__5485
3300a     6C 65 6E    | 	byte	"len"
3300d     00          | 	byte	0
3300e                 | LR__5486
3300e     6C 6F 67    | 	byte	"log"
33011     00          | 	byte	0
33012                 | LR__5487
33012     6C 70 65 65 
33016     6B          | 	byte	"lpeek"
33017     00          | 	byte	0
33018                 | LR__5488
33018     6D 69 64 24 | 	byte	"mid$"
3301c     00          | 	byte	0
3301d                 | LR__5489
3301d     6D 6F 75 73 
33021     65 6B       | 	byte	"mousek"
33023     00          | 	byte	0
33024                 | LR__5490
33024     6D 6F 75 73 
33028     65 77       | 	byte	"mousew"
3302a     00          | 	byte	0
3302b                 | LR__5491
3302b     6D 6F 75 73 
3302f     65 78       | 	byte	"mousex"
33031     00          | 	byte	0
33032                 | LR__5492
33032     6D 6F 75 73 
33036     65 79       | 	byte	"mousey"
33038     00          | 	byte	0
33039                 | LR__5493
33039     70 65 65 6B | 	byte	"peek"
3303d     00          | 	byte	0
3303e                 | LR__5494
3303e     70 69 6E 72 
33042     65 61 64    | 	byte	"pinread"
33045     00          | 	byte	0
33046                 | LR__5495
33046     72 64 70 69 
3304a     6E          | 	byte	"rdpin"
3304b     00          | 	byte	0
3304c                 | LR__5496
3304c     72 69 67 68 
33050     74 24       | 	byte	"right$"
33052     00          | 	byte	0
33053                 | LR__5497
33053     72 71 70 69 
33057     6E          | 	byte	"rqpin"
33058     00          | 	byte	0
33059                 | LR__5498
33059     72 6F 75 6E 
3305d     64          | 	byte	"round"
3305e     00          | 	byte	0
3305f                 | LR__5499
3305f     72 6E 64    | 	byte	"rnd"
33062     00          | 	byte	0
33063                 | LR__5500
33063     73 69 6E    | 	byte	"sin"
33066     00          | 	byte	0
33067                 | LR__5501
33067     73 71 72    | 	byte	"sqr"
3306a     00          | 	byte	0
3306b                 | LR__5502
3306b     73 74 69 63 
3306f     6B          | 	byte	"stick"
33070     00          | 	byte	0
33071                 | LR__5503
33071     73 74 72 69 
33075     67          | 	byte	"strig"
33076     00          | 	byte	0
33077                 | LR__5504
33077     73 74 72 24 | 	byte	"str$"
3307b     00          | 	byte	0
3307c                 | LR__5505
3307c     74 61 6E    | 	byte	"tan"
3307f     00          | 	byte	0
33080                 | LR__5506
33080     76 61 6C    | 	byte	"val"
33083     00          | 	byte	0
33084                 | LR__5507
33084     76 61 72 70 
33088     74 72       | 	byte	"varptr"
3308a     00          | 	byte	0
3308b                 | LR__5508
3308b     61          | 	byte	"a"
3308c     00          | 	byte	0
3308d                 | LR__5509
3308d     7A          | 	byte	"z"
3308e     00          | 	byte	0
3308f                 | LR__5510
3308f     5F          | 	byte	"_"
33090     00          | 	byte	0
33091                 | LR__5511
33091     61          | 	byte	"a"
33092     00          | 	byte	0
33093                 | LR__5512
33093     7A          | 	byte	"z"
33094     00          | 	byte	0
33095                 | LR__5513
33095     30          | 	byte	"0"
33096     00          | 	byte	0
33097                 | LR__5514
33097     39          | 	byte	"9"
33098     00          | 	byte	0
33099                 | LR__5515
33099     5F          | 	byte	"_"
3309a     00          | 	byte	0
3309b                 | LR__5516
3309b     2E          | 	byte	"."
3309c     00          | 	byte	0
3309d                 | LR__5517
3309d     61          | 	byte	"a"
3309e     00          | 	byte	0
3309f                 | LR__5518
3309f     7A          | 	byte	"z"
330a0     00          | 	byte	0
330a1                 | LR__5519
330a1     30          | 	byte	"0"
330a2     00          | 	byte	0
330a3                 | LR__5520
330a3     39          | 	byte	"9"
330a4     00          | 	byte	0
330a5                 | LR__5521
330a5     5F          | 	byte	"_"
330a6     00          | 	byte	0
330a7                 | LR__5522
330a7     24          | 	byte	"$"
330a8     00          | 	byte	0
330a9                 | LR__5523
330a9     25          | 	byte	"%"
330aa     00          | 	byte	0
330ab                 | LR__5524
330ab     21          | 	byte	"!"
330ac     00          | 	byte	0
330ad                 | LR__5525
330ad     30          | 	byte	"0"
330ae     00          | 	byte	0
330af                 | LR__5526
330af     39          | 	byte	"9"
330b0     00          | 	byte	0
330b1                 | LR__5527
330b1     2E          | 	byte	"."
330b2     00          | 	byte	0
330b3                 | LR__5528
330b3     24          | 	byte	"$"
330b4     00          | 	byte	0
330b5                 | LR__5529
330b5     25          | 	byte	"%"
330b6     00          | 	byte	0
330b7                 | LR__5530
330b7     2D          | 	byte	"-"
330b8     00          | 	byte	0
330b9                 | LR__5531
330b9     2E          | 	byte	"."
330ba     00          | 	byte	0
330bb                 | LR__5532
330bb     24          | 	byte	"$"
330bc     00          | 	byte	0
330bd                 | LR__5533
330bd     25          | 	byte	"%"
330be     00          | 	byte	0
330bf                 | LR__5534
330bf     30          | 	byte	"0"
330c0     00          | 	byte	0
330c1                 | LR__5535
330c1     39          | 	byte	"9"
330c2     00          | 	byte	0
330c3                 | LR__5536
330c3     5F          | 	byte	"_"
330c4     00          | 	byte	0
330c5                 | LR__5537
330c5     2E          | 	byte	"."
330c6     00          | 	byte	0
330c7                 | LR__5538
330c7     45          | 	byte	"E"
330c8     00          | 	byte	0
330c9                 | LR__5539
330c9     65          | 	byte	"e"
330ca     00          | 	byte	0
330cb                 | LR__5540
330cb     2D          | 	byte	"-"
330cc     00          | 	byte	0
330cd                 | LR__5541
330cd     61          | 	byte	"a"
330ce     00          | 	byte	0
330cf                 | LR__5542
330cf     66          | 	byte	"f"
330d0     00          | 	byte	0
330d1                 | LR__5543
330d1     30          | 	byte	"0"
330d2     00          | 	byte	0
330d3                 | LR__5544
330d3     31          | 	byte	"1"
330d4     00          | 	byte	0
330d5                 | LR__5545
330d5     5F          | 	byte	"_"
330d6     00          | 	byte	0
330d7                 | LR__5546
330d7     2D          | 	byte	"-"
330d8     00          | 	byte	0
330d9                 | LR__5547
330d9     65          | 	byte	"e"
330da     00          | 	byte	0
330db                 | LR__5548
330db     2E          | 	byte	"."
330dc     00          | 	byte	0
330dd                 | LR__5549
330dd     45          | 	byte	"E"
330de     00          | 	byte	0
330df                 | LR__5550
330df     65          | 	byte	"e"
330e0     00          | 	byte	0
330e1                 | LR__5551
330e1     30          | 	byte	"0"
330e2     00          | 	byte	0
330e3                 | LR__5552
330e3     39          | 	byte	"9"
330e4     00          | 	byte	0
330e5                 | LR__5553
330e5     24          | 	byte	"$"
330e6     00          | 	byte	0
330e7                 | LR__5554
330e7     25          | 	byte	"%"
330e8     00          | 	byte	0
330e9                 | LR__5555
330e9     2D          | 	byte	"-"
330ea     00          | 	byte	0
330eb                 | LR__5556
330eb     24          | 	byte	"$"
330ec     00          | 	byte	0
330ed                 | LR__5557
330ed     25          | 	byte	"%"
330ee     00          | 	byte	0
330ef                 | LR__5558
330ef     30          | 	byte	"0"
330f0     00          | 	byte	0
330f1                 | LR__5559
330f1     39          | 	byte	"9"
330f2     00          | 	byte	0
330f3                 | LR__5560
330f3     5F          | 	byte	"_"
330f4     00          | 	byte	0
330f5                 | LR__5561
330f5     30          | 	byte	"0"
330f6     00          | 	byte	0
330f7                 | LR__5562
330f7     39          | 	byte	"9"
330f8     00          | 	byte	0
330f9                 | LR__5563
330f9     61          | 	byte	"a"
330fa     00          | 	byte	0
330fb                 | LR__5564
330fb     66          | 	byte	"f"
330fc     00          | 	byte	0
330fd                 | LR__5565
330fd     5F          | 	byte	"_"
330fe     00          | 	byte	0
330ff                 | LR__5566
330ff     30          | 	byte	"0"
33100     00          | 	byte	0
33101                 | LR__5567
33101     31          | 	byte	"1"
33102     00          | 	byte	0
33103                 | LR__5568
33103     5F          | 	byte	"_"
33104     00          | 	byte	0
33105                 | LR__5569
33105     30          | 	byte	"0"
33106     00          | 	byte	0
33107                 | LR__5570
33107     39          | 	byte	"9"
33108     00          | 	byte	0
33109                 | LR__5571
33109     5F          | 	byte	"_"
3310a     00          | 	byte	0
3310b                 | LR__5572
3310b     22          | 	byte	34
3310c     00          | 	byte	0
3310d                 | LR__5573
3310d     22          | 	byte	34
3310e     00          | 	byte	0
3310f                 | LR__5574
3310f     44 69 6D 3A 
33113     20 61 74 20 
33117     6C 69 6E 65 
3311b     20          | 	byte	"Dim: at line "
3311c     00          | 	byte	0
3311d                 | LR__5575
3311d     3A 20 77 61 
33121     72 6E 69 6E 
33125     67 3A 20 74 
33129     68 65 20 76 
3312d     61 72 69 61 
33131     62 6C 65 20 
33135     65 78 69 73 
33139     74 65 64 2E | 	byte	": warning: the variable existed."
3313d     00          | 	byte	0
3313e                 | LR__5576
3313e     28          | 	byte	"("
3313f     00          | 	byte	0
33140                 | LR__5577
33140     61 73       | 	byte	"as"
33142     00          | 	byte	0
33143                 | LR__5578
33143     61 73       | 	byte	"as"
33145     00          | 	byte	0
33146                 | LR__5579
33146     2C          | 	byte	","
33147     00          | 	byte	0
33148                 | LR__5580
33148     29          | 	byte	")"
33149     00          | 	byte	0
3314a                 | LR__5581
3314a     29          | 	byte	")"
3314b     00          | 	byte	0
3314c                 | LR__5582
3314c     61 73       | 	byte	"as"
3314e     00          | 	byte	0
3314f                 | LR__5583
3314f     62 79 74 65 | 	byte	"byte"
33153     00          | 	byte	0
33154                 | LR__5584
33154     75 62 79 74 
33158     65          | 	byte	"ubyte"
33159     00          | 	byte	0
3315a                 | LR__5585
3315a     73 68 6F 72 
3315e     74          | 	byte	"short"
3315f     00          | 	byte	0
33160                 | LR__5586
33160     75 73 68 6F 
33164     72 74       | 	byte	"ushort"
33166     00          | 	byte	0
33167                 | LR__5587
33167     6C 6F 6E 67 | 	byte	"long"
3316b     00          | 	byte	0
3316c                 | LR__5588
3316c     69 6E 74 65 
33170     67 65 72    | 	byte	"integer"
33173     00          | 	byte	0
33174                 | LR__5589
33174     75 6C 6F 6E 
33178     67          | 	byte	"ulong"
33179     00          | 	byte	0
3317a                 | LR__5590
3317a     69 6E 74 36 
3317e     34          | 	byte	"int64"
3317f     00          | 	byte	0
33180                 | LR__5591
33180     75 69 6E 74 
33184     36 34       | 	byte	"uint64"
33186     00          | 	byte	0
33187                 | LR__5592
33187     73 69 6E 67 
3318b     6C 65       | 	byte	"single"
3318d     00          | 	byte	0
3318e                 | LR__5593
3318e     64 6F 75 62 
33192     6C 65       | 	byte	"double"
33194     00          | 	byte	0
33195                 | LR__5594
33195     73 74 72 69 
33199     6E 67       | 	byte	"string"
3319b     00          | 	byte	0
3319c                 | LR__5595
3319c     74 6F       | 	byte	"to"
3319e     00          | 	byte	0
3319f                 | LR__5596
3319f     73 74 65 70 | 	byte	"step"
331a3     00          | 	byte	0
331a4                 | LR__5597
331a4     73 2E       | 	byte	"s."
331a6     00          | 	byte	0
331a7                 | LR__5598
331a7     67 6F 74 6F | 	byte	"goto"
331ab     00          | 	byte	0
331ac                 | LR__5599
331ac     67 6F 73 75 
331b0     62          | 	byte	"gosub"
331b1     00          | 	byte	0
331b2                 | LR__5600
331b2     24          | 	byte	"$"
331b3     00          | 	byte	0
331b4                 | LR__5601
331b4     26 68       | 	byte	"&h"
331b6     00          | 	byte	0
331b7                 | LR__5602
331b7     25          | 	byte	"%"
331b8     00          | 	byte	0
331b9                 | LR__5603
331b9     26 62       | 	byte	"&b"
331bb     00          | 	byte	0
331bc                 | LR__5604
331bc                 | 	byte	
331bc     00          | 	byte	0
331bd                 | LR__5605
331bd     61 63 6F 73 
331c1     3A 20       | 	byte	"acos: "
331c3     00          | 	byte	0
331c4                 | LR__5606
331c4     61 73 63 3A 
331c8     20          | 	byte	"asc: "
331c9     00          | 	byte	0
331ca                 | LR__5607
331ca     61 73 63 3A 
331ce     20          | 	byte	"asc: "
331cf     00          | 	byte	0
331d0                 | LR__5608
331d0     61 73 69 6E 
331d4     3A 20       | 	byte	"asin: "
331d6     00          | 	byte	0
331d7                 | LR__5609
331d7     61 74 6E 3A 
331db     20          | 	byte	"atn: "
331dc     00          | 	byte	0
331dd                 | LR__5610
331dd     62 6C 69 74 
331e1     3A 20       | 	byte	"blit: "
331e3     00          | 	byte	0
331e4                 | LR__5611
331e4     62 69 6E 24 
331e8     3A 20       | 	byte	"bin$: "
331ea     00          | 	byte	0
331eb                 | LR__5612
331eb     2F          | 	byte	"/"
331ec     00          | 	byte	0
331ed                 | LR__5613
331ed     2F 73 64 2F 
331f1     62 69 6E 2F | 	byte	"/sd/bin/"
331f5     00          | 	byte	0
331f6                 | LR__5614
331f6     53 79 73 74 
331fa     65 6D 20 65 
331fe     72 72 6F 72 
33202     20          | 	byte	"System error "
33203     00          | 	byte	0
33204                 | LR__5615
33204     3A 20       | 	byte	": "
33206     00          | 	byte	0
33207                 | LR__5616
33207     2A          | 	byte	"*"
33208     00          | 	byte	0
33209                 | LR__5617
33209     2E 2E       | 	byte	".."
3320b     00          | 	byte	0
3320c                 | LR__5618
3320c     2F          | 	byte	"/"
3320d     00          | 	byte	0
3320e                 | LR__5619
3320e     2F          | 	byte	"/"
3320f     00          | 	byte	0
33210                 | LR__5620
33210     53 79 73 74 
33214     65 6D 20 65 
33218     72 72 6F 72 
3321c     20          | 	byte	"System error "
3321d     00          | 	byte	0
3321e                 | LR__5621
3321e     3A 20       | 	byte	": "
33220     00          | 	byte	0
33221                 | LR__5622
33221     43 75 72 72 
33225     65 6E 74 20 
33229     64 69 72 65 
3322d     63 74 6F 72 
33231     79 3A 20    | 	byte	"Current directory: "
33234     00          | 	byte	0
33235                 | LR__5623
33235     2F          | 	byte	"/"
33236     00          | 	byte	0
33237                 | LR__5624
33237     53 79 73 74 
3323b     65 6D 20 65 
3323f     72 72 6F 72 
33243     20          | 	byte	"System error "
33244     00          | 	byte	0
33245                 | LR__5625
33245     3A 20       | 	byte	": "
33247     00          | 	byte	0
33248                 | LR__5626
33248     43 75 72 72 
3324c     65 6E 74 20 
33250     64 69 72 65 
33254     63 74 6F 72 
33258     79 3A 20    | 	byte	"Current directory: "
3325b     00          | 	byte	0
3325c                 | LR__5627
3325c     2F          | 	byte	"/"
3325d     00          | 	byte	0
3325e                 | LR__5628
3325e     2F          | 	byte	"/"
3325f     00          | 	byte	0
33260                 | LR__5629
33260     2F          | 	byte	"/"
33261     00          | 	byte	0
33262                 | LR__5630
33262     53 79 73 74 
33266     65 6D 20 65 
3326a     72 72 6F 72 
3326e     20          | 	byte	"System error "
3326f     00          | 	byte	0
33270                 | LR__5631
33270     3A 20       | 	byte	": "
33272     00          | 	byte	0
33273                 | LR__5632
33273     43 75 72 72 
33277     65 6E 74 20 
3327b     64 69 72 65 
3327f     63 74 6F 72 
33283     79 3A 20    | 	byte	"Current directory: "
33286     00          | 	byte	0
33287                 | LR__5633
33287     63 68 72 24 
3328b     3A 20       | 	byte	"chr$: "
3328d     00          | 	byte	0
3328e                 | LR__5634
3328e     63 68 61 6E 
33292     6E 65 6C 23 
33296     20 65 78 70 
3329a     65 63 74 65 
3329e     64          | 	byte	"channel# expected"
3329f     00          | 	byte	0
332a0                 | LR__5635
332a0     63 6F 73 3A 
332a4     20          | 	byte	"cos: "
332a5     00          | 	byte	0
332a6                 | LR__5636
332a6                 | 	byte	
332a6     00          | 	byte	0
332a7                 | LR__5637
332a7                 | 	byte	
332a7     00          | 	byte	0
332a8                 | LR__5638
332a8     2F 73 64 2F 
332ac     6D 65 64 69 
332b0     61 2F 68 2F | 	byte	"/sd/media/h/"
332b4     00          | 	byte	0
332b5                 | LR__5639
332b5     53 79 73 74 
332b9     65 6D 20 65 
332bd     72 72 6F 72 
332c1     20          | 	byte	"System error "
332c2     00          | 	byte	0
332c3                 | LR__5640
332c3     3A 20       | 	byte	": "
332c5     00          | 	byte	0
332c6                 | LR__5641
332c6                 | 	byte	
332c6     00          | 	byte	0
332c7                 | LR__5642
332c7                 | 	byte	
332c7     00          | 	byte	0
332c8                 | LR__5643
332c8     2F 73 64 2F 
332cc     6D 65 64 69 
332d0     61 2F 73 2F | 	byte	"/sd/media/s/"
332d4     00          | 	byte	0
332d5                 | LR__5644
332d5     53 79 73 74 
332d9     65 6D 20 65 
332dd     72 72 6F 72 
332e1     20          | 	byte	"System error "
332e2     00          | 	byte	0
332e3                 | LR__5645
332e3     3A 20       | 	byte	": "
332e5     00          | 	byte	0
332e6                 | LR__5646
332e6     2F          | 	byte	"/"
332e7     00          | 	byte	0
332e8                 | LR__5647
332e8     2F          | 	byte	"/"
332e9     00          | 	byte	0
332ea                 | LR__5648
332ea     2F          | 	byte	"/"
332eb     00          | 	byte	0
332ec                 | LR__5649
332ec     43 61 6E 6E 
332f0     6F 74 20 64 
332f4     65 6C 65 74 
332f8     65 20 66 69 
332fc     6C 65 20 6F 
33300     72 20 66 69 
33304     6C 65 20 64 
33308     6F 65 73 6E 
3330c     27 74 20 65 
33310     78 69 73 74 
33314     3A 20 73 79 
33318     73 74 65 6D 
3331c     20 65 72 72 
33320     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
33323     00          | 	byte	0
33324                 | LR__5650
33324     43 75 72 72 
33328     65 6E 74 20 
3332c     64 69 72 65 
33330     63 74 6F 72 
33334     79 3A 20    | 	byte	"Current directory: "
33337     00          | 	byte	0
33338                 | LR__5651
33338                 | 	byte	
33338     00          | 	byte	0
33339                 | LR__5652
33339     2A          | 	byte	"*"
3333a     00          | 	byte	0
3333b                 | LR__5653
3333b                 | 	byte	
3333b     00          | 	byte	0
3333c                 | LR__5654
3333c     5B 64 69 72 
33340     5D 20       | 	byte	"[dir] "
33342     00          | 	byte	0
33343                 | LR__5655
33343     4D 6F 72 65 
33347     20 74 68 61 
3334b     6E 20 31 32 
3334f     38 20 65 6E 
33353     74 72 69 65 
33357     73 20 66 6F 
3335b     75 6E 64 3A 
3335f     20 63 6C 65 
33363     61 6E 20 79 
33367     6F 75 72 20 
3336b     64 69 72 65 
3336f     63 74 6F 72 
33373     79          | 	byte	"More than 128 entries found: clean your directory"
33374     00          | 	byte	0
33375                 | LR__5656
33375     2A          | 	byte	"*"
33376     00          | 	byte	0
33377                 | LR__5657
33377                 | 	byte	
33377     00          | 	byte	0
33378                 | LR__5658
33378     4D 6F 72 65 
3337c     20 74 68 61 
33380     6E 20 31 32 
33384     38 20 65 6E 
33388     74 72 69 65 
3338c     73 20 66 6F 
33390     75 6E 64 3A 
33394     20 63 6C 65 
33398     61 6E 20 79 
3339c     6F 75 72 20 
333a0     64 69 72 65 
333a4     63 74 6F 72 
333a8     79          | 	byte	"More than 128 entries found: clean your directory"
333a9     00          | 	byte	0
333aa                 | LR__5659
333aa     45 72 72 6F 
333ae     72 20       | 	byte	"Error "
333b0     00          | 	byte	0
333b1                 | LR__5660
333b1     3A 20       | 	byte	": "
333b3     00          | 	byte	0
333b4                 | LR__5661
333b4     67 65 74 65 
333b8     6E 76 73 75 
333bc     73 74 61 69 
333c0     6E 3A 20    | 	byte	"getenvsustain: "
333c3     00          | 	byte	0
333c4                 | LR__5662
333c4     67 65 74 70 
333c8     69 78 65 6C 
333cc     3A 20       | 	byte	"getpixel: "
333ce     00          | 	byte	0
333cf                 | LR__5663
333cf     68 65 78 24 
333d3     3A 20       | 	byte	"hex$: "
333d5     00          | 	byte	0
333d6                 | LR__5664
333d6                 | 	byte	
333d6     00          | 	byte	0
333d7                 | LR__5665
333d7     6C 65 66 74 
333db     24 3A 20    | 	byte	"left$: "
333de     00          | 	byte	0
333df                 | LR__5666
333df     6C 65 66 74 
333e3     24 3A 20    | 	byte	"left$: "
333e6     00          | 	byte	0
333e7                 | LR__5667
333e7     6C 65 6E 3A 
333eb     20          | 	byte	"len: "
333ec     00          | 	byte	0
333ed                 | LR__5668
333ed     6C 65 6E 3A 
333f1     20          | 	byte	"len: "
333f2     00          | 	byte	0
333f3                 | LR__5669
333f3                 | 	byte	
333f3     00          | 	byte	0
333f4                 | LR__5670
333f4     2F          | 	byte	"/"
333f5     00          | 	byte	0
333f6                 | LR__5671
333f6     2F          | 	byte	"/"
333f7     00          | 	byte	0
333f8                 | LR__5672
333f8     2E 62 61 73 | 	byte	".bas"
333fc     00          | 	byte	0
333fd                 | LR__5673
333fd     53 79 73 74 
33401     65 6D 20 65 
33405     72 72 6F 72 
33409     20          | 	byte	"System error "
3340a     00          | 	byte	0
3340b                 | LR__5674
3340b     3A 20       | 	byte	": "
3340d     00          | 	byte	0
3340e                 | LR__5675
3340e     2E 62 61 73 | 	byte	".bas"
33412     00          | 	byte	0
33413                 | LR__5676
33413     2F          | 	byte	"/"
33414     00          | 	byte	0
33415                 | LR__5677
33415                 | 	byte	
33415     00          | 	byte	0
33416                 | LR__5678
33416     4C 6F 61 64 
3341a     65 64 20    | 	byte	"Loaded "
3341d     00          | 	byte	0
3341e                 | LR__5679
3341e     2F          | 	byte	"/"
3341f     00          | 	byte	0
33420                 | LR__5680
33420     6C 6F 67 3A 
33424     20          | 	byte	"log: "
33425     00          | 	byte	0
33426                 | LR__5681
33426     6D 69 64 24 
3342a     3A 20       | 	byte	"mid$: "
3342c     00          | 	byte	0
3342d                 | LR__5682
3342d     6D 69 64 24 
33431     3A 20       | 	byte	"mid$: "
33433     00          | 	byte	0
33434                 | LR__5683
33434     43 61 6E 6E 
33438     6F 74 20 63 
3343c     72 65 61 74 
33440     65 20 61 20 
33444     64 69 72 65 
33448     63 74 6F 72 
3344c     79 3A 20 73 
33450     79 73 74 65 
33454     6D 20 65 72 
33458     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
3345c     00          | 	byte	0
3345d                 | LR__5684
3345d     20 42 41 53 
33461     49 43 20 62 
33465     79 74 65 73 
33469     20 66 72 65 
3346d     65          | 	byte	" BASIC bytes free"
3346e     00          | 	byte	0
3346f                 | LR__5685
3346f                 | 	byte	
3346f     00          | 	byte	0
33470                 | LR__5686
33470                 | 	byte	
33470     00          | 	byte	0
33471                 | LR__5687
33471     6E 6F 6E 61 
33475     6D 65 2E 62 
33479     61 73       | 	byte	"noname.bas"
3347b     00          | 	byte	0
3347c                 | LR__5688
3347c     66 69 6C 65 
33480     6E 61 6D 65 
33484     20 65 78 70 
33488     65 63 74 65 
3348c     64          | 	byte	"filename expected"
3348d     00          | 	byte	0
3348e                 | LR__5689
3348e     72 65 61 64 | 	byte	"read"
33492     00          | 	byte	0
33493                 | LR__5690
33493     77 72 69 74 
33497     65          | 	byte	"write"
33498     00          | 	byte	0
33499                 | LR__5691
33499     61 70 70 65 
3349d     6E 64       | 	byte	"append"
3349f     00          | 	byte	0
334a0                 | LR__5692
334a0     63 68 61 6E 
334a4     6E 65 6C 23 
334a8     20 65 78 70 
334ac     65 63 74 65 
334b0     64          | 	byte	"channel# expected"
334b1     00          | 	byte	0
334b2                 | LR__5693
334b2     4F 70 65 6E 
334b6     3A 20 69 6E 
334ba     76 61 6C 69 
334be     64 20 6D 6F 
334c2     64 65       | 	byte	"Open: invalid mode"
334c4     00          | 	byte	0
334c5                 | LR__5694
334c5     50 72 69 6E 
334c9     74 20 74 6F 
334cd     20 63 68 61 
334d1     6E 6E 65 6C 
334d5     20 28 6E 6F 
334d9     74 20 79 65 
334dd     74 20 69 6D 
334e1     70 6C 65 6D 
334e5     65 6E 74 65 
334e9     64 29       | 	byte	"Print to channel (not yet implemented)"
334eb     00          | 	byte	0
334ec                 | LR__5695
334ec     72 69 67 68 
334f0     74 24 3A 20 | 	byte	"right$: "
334f4     00          | 	byte	0
334f5                 | LR__5696
334f5     72 69 67 68 
334f9     74 24 3A 20 | 	byte	"right$: "
334fd     00          | 	byte	0
334fe                 | LR__5697
334fe     72 6E 64 3A 
33502     20          | 	byte	"rnd: "
33503     00          | 	byte	0
33504                 | LR__5698
33504     72 6E 64 3A 
33508     20          | 	byte	"rnd: "
33509     00          | 	byte	0
3350a                 | LR__5699
3350a     53 74 6F 70 
3350e     70 65 64 20 
33512     61 74 20 6C 
33516     69 6E 65 20 | 	byte	"Stopped at line "
3351a     00          | 	byte	0
3351b                 | LR__5700
3351b                 | 	byte	
3351b     00          | 	byte	0
3351c                 | LR__5701
3351c     2F          | 	byte	"/"
3351d     00          | 	byte	0
3351e                 | LR__5702
3351e                 | 	byte	
3351e     00          | 	byte	0
3351f                 | LR__5703
3351f     53 61 76 65 
33523     64 20 61 73 
33527     20          | 	byte	"Saved as "
33528     00          | 	byte	0
33529                 | LR__5704
33529     2F          | 	byte	"/"
3352a     00          | 	byte	0
3352b                 | LR__5705
3352b     73 69 6E 3A 
3352f     20          | 	byte	"sin: "
33530     00          | 	byte	0
33531                 | LR__5706
33531     73 71 72 3A 
33535     20          | 	byte	"sqr: "
33536     00          | 	byte	0
33537                 | LR__5707
33537     73 74 69 63 
3353b     6B 3A 20    | 	byte	"stick: "
3353e     00          | 	byte	0
3353f                 | LR__5708
3353f     73 74 72 69 
33543     67 3A 20    | 	byte	"strig: "
33546     00          | 	byte	0
33547                 | LR__5709
33547     74 61 6E 3A 
3354b     20          | 	byte	"tan: "
3354c     00          | 	byte	0
3354d                 | LR__5710
3354d     76 61 6C 3A 
33551     20          | 	byte	"val: "
33552     00          | 	byte	0
33553                 | LR__5711
33553     76 61 6C 3A 
33557     20          | 	byte	"val: "
33558     00          | 	byte	0
33559                 | LR__5712
33559     24          | 	byte	"$"
3355a     00          | 	byte	0
3355b                 | LR__5713
3355b     26 68       | 	byte	"&h"
3355d     00          | 	byte	0
3355e                 | LR__5714
3355e     25          | 	byte	"%"
3355f     00          | 	byte	0
33560                 | LR__5715
33560     26 62       | 	byte	"&b"
33562     00          | 	byte	0
33563                 | LR__5716
33563                 | 	byte	
33563     00          | 	byte	0
33564                 | LR__5717
33564     45 78 70 65 
33568     63 74 65 64 
3356c     20 6E 75 6D 
33570     62 65 72 2C 
33574     20 67 6F 74 
33578     20 73 6F 6D 
3357c     65 74 68 69 
33580     6E 67 20 65 
33584     6C 73 65    | 	byte	"Expected number, got something else"
33587     00          | 	byte	0
33588                 | LR__5718
33588     43 61 6E 6E 
3358c     6F 74 20 61 
33590     64 64 20 61 
33594     20 6E 75 6D 
33598     62 65 72 20 
3359c     74 6F 20 61 
335a0     20 73 74 72 
335a4     69 6E 67    | 	byte	"Cannot add a number to a string"
335a7     00          | 	byte	0
335a8                 | LR__5719
335a8     43 61 6E 6E 
335ac     6F 74 20 73 
335b0     75 62 73 74 
335b4     72 61 63 74 
335b8     20 73 74 72 
335bc     69 6E 67 73 | 	byte	"Cannot substract strings"
335c0     00          | 	byte	0
335c1                 | LR__5720
335c1     55 6E 6B 6E 
335c5     6F 77 6E 20 
335c9     65 72 72 6F 
335cd     72 20 77 68 
335d1     69 6C 65 20 
335d5     61 64 64 69 
335d9     6E 67       | 	byte	"Unknown error while adding"
335db     00          | 	byte	0
335dc                 | LR__5721
335dc     55 6E 6B 6E 
335e0     6F 77 6E 20 
335e4     65 72 72 6F 
335e8     72 20 77 68 
335ec     69 6C 65 20 
335f0     73 75 62 73 
335f4     74 72 61 63 
335f8     74 69 6E 67 | 	byte	"Unknown error while substracting"
335fc     00          | 	byte	0
335fd                 | LR__5722
335fd     43 61 6E 6E 
33601     6F 74 20 64 
33605     6F 20 6C 6F 
33609     67 69 63 20 
3360d     6F 70 65 72 
33611     61 74 69 6F 
33615     6E 20 6F 6E 
33619     20 73 74 72 
3361d     69 6E 67 20 
33621     6F 72 20 66 
33625     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
33629     00          | 	byte	0
3362a                 | LR__5723
3362a     55 6E 6B 6E 
3362e     6F 77 6E 20 
33632     65 72 72 6F 
33636     72 20 77 68 
3363a     69 6C 65 20 
3363e     64 6F 69 6E 
33642     67 20 6C 6F 
33646     67 69 63 20 
3364a     6F 70 65 72 
3364e     61 74 69 6F 
33652     6E          | 	byte	"Unknown error while doing logic operation"
33653     00          | 	byte	0
33654                 | LR__5724
33654     43 61 6E 6E 
33658     6F 74 20 6D 
3365c     75 6C 74 69 
33660     70 6C 79 20 
33664     73 74 72 69 
33668     6E 67 73    | 	byte	"Cannot multiply strings"
3366b     00          | 	byte	0
3366c                 | LR__5725
3366c     55 6E 6B 6E 
33670     6F 77 6E 20 
33674     65 72 72 6F 
33678     72 20 77 68 
3367c     69 6C 65 20 
33680     6D 75 6C 74 
33684     69 70 6C 79 
33688     69 6E 67    | 	byte	"Unknown error while multiplying"
3368b     00          | 	byte	0
3368c                 | LR__5726
3368c     43 61 6E 6E 
33690     6F 74 20 64 
33694     69 76 69 64 
33698     65 20 73 74 
3369c     72 69 6E 67 
336a0     73          | 	byte	"Cannot divide strings"
336a1     00          | 	byte	0
336a2                 | LR__5727
336a2     55 6E 6B 6E 
336a6     6F 77 6E 20 
336aa     65 72 72 6F 
336ae     72 20 77 68 
336b2     69 6C 65 20 
336b6     64 69 76 69 
336ba     64 69 6E 67 | 	byte	"Unknown error while dividing"
336be     00          | 	byte	0
336bf                 | LR__5728
336bf     43 61 6E 6E 
336c3     6F 74 20 63 
336c7     6F 6D 70 75 
336cb     74 65 20 61 
336cf     20 70 6F 77 
336d3     65 72 20 6F 
336d7     66 20 61 20 
336db     73 74 72 69 
336df     6E 67       | 	byte	"Cannot compute a power of a string"
336e1     00          | 	byte	0
336e2                 | LR__5729
336e2     55 6E 6B 6E 
336e6     6F 77 6E 20 
336ea     65 72 72 6F 
336ee     72 20 77 68 
336f2     69 6C 65 20 
336f6     63 6F 6D 70 
336fa     75 74 69 6E 
336fe     67 20 61 20 
33702     70 6F 77 65 
33706     72          | 	byte	"Unknown error while computing a power"
33707     00          | 	byte	0
33708                 | LR__5730
33708     52 69 67 68 
3370c     74 20 70 61 
33710     72 65 6E 74 
33714     68 65 73 69 
33718     73 20 65 78 
3371c     70 65 63 74 
33720     65 64       | 	byte	"Right parenthesis expected"
33722     00          | 	byte	0
33723                 | LR__5731
33723     45 78 70 65 
33727     63 74 65 64 
3372b     20 73 74 72 
3372f     69 6E 67    | 	byte	"Expected string"
33732     00          | 	byte	0
33733                 | LR__5732
33733     45 78 70 65 
33737     63 74 65 64 
3373b     20 66 6C 6F 
3373f     61 74       | 	byte	"Expected float"
33741     00          | 	byte	0
33742                 | LR__5733
33742     45 78 70 65 
33746     63 74 65 64 
3374a     20 75 6E 73 
3374e     69 67 6E 65 
33752     64 20 69 6E 
33756     74 65 67 65 
3375a     72          | 	byte	"Expected unsigned integer"
3375b     00          | 	byte	0
3375c                 | LR__5734
3375c     45 78 70 65 
33760     63 74 65 64 
33764     20 69 6E 74 
33768     65 67 65 72 | 	byte	"Expected integer"
3376c     00          | 	byte	0
3376d                 | LR__5735
3376d     4E 6F 20 6D 
33771     6F 72 65 20 
33775     76 61 72 69 
33779     61 62 6C 65 
3377d     20 73 6C 6F 
33781     74 73       | 	byte	"No more variable slots"
33783     00          | 	byte	0
33784                 | LR__5736
33784     56 61 72 69 
33788     61 62 6C 65 
3378c     20 6E 6F 74 
33790     20 66 6F 75 
33794     6E 64       | 	byte	"Variable not found"
33796     00          | 	byte	0
33797                 | LR__5737
33797     43 6F 6D 6D 
3379b     61 20 65 78 
3379f     70 65 63 74 
337a3     65 64       | 	byte	"Comma expected"
337a5     00          | 	byte	0
337a6                 | LR__5738
337a6     43 6F 6D 6D 
337aa     61 20 6F 72 
337ae     20 73 65 6D 
337b2     69 63 6F 6C 
337b6     6F 6E 20 65 
337ba     78 70 65 63 
337be     74 65 64    | 	byte	"Comma or semicolon expected"
337c1     00          | 	byte	0
337c2                 | LR__5739
337c2     55 6E 6B 6E 
337c6     6F 77 6E 20 
337ca     63 6F 6D 6D 
337ce     61 6E 64    | 	byte	"Unknown command"
337d1     00          | 	byte	0
337d2                 | LR__5740
337d2     53 74 61 63 
337d6     6B 20 75 6E 
337da     64 65 72 66 
337de     6C 6F 77    | 	byte	"Stack underflow"
337e1     00          | 	byte	0
337e2                 | LR__5741
337e2     43 61 6E 6E 
337e6     6F 74 20 65 
337ea     78 65 63 75 
337ee     74 65 20 67 
337f2     6F 74 6F 20 
337f6     6F 72 20 67 
337fa     6F 73 75 62 
337fe     20 69 6E 20 
33802     74 68 65 20 
33806     69 6D 6D 65 
3380a     64 69 61 74 
3380e     65 20 6D 6F 
33812     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
33814     00          | 	byte	0
33815                 | LR__5742
33815     43 61 6E 6E 
33819     6F 74 20 6C 
3381d     6F 61 64 20 
33821     66 72 6F 6D 
33825     20 74 68 69 
33829     73 20 66 69 
3382d     6C 65       | 	byte	"Cannot load from this file"
3382f     00          | 	byte	0
33830                 | LR__5743
33830     54 68 65 20 
33834     70 72 6F 67 
33838     72 61 6D 20 
3383c     69 73 20 65 
33840     6D 70 74 79 | 	byte	"The program is empty"
33844     00          | 	byte	0
33845                 | LR__5744
33845     49 66 20 61 
33849     66 74 65 72 
3384d     20 69 66    | 	byte	"If after if"
33850     00          | 	byte	0
33851                 | LR__5745
33851     45 6D 70 74 
33855     79 20 65 78 
33859     70 72 65 73 
3385d     73 69 6F 6E | 	byte	"Empty expression"
33861     00          | 	byte	0
33862                 | LR__5746
33862     53 74 72 69 
33866     6E 67 20 65 
3386a     78 70 65 63 
3386e     74 65 64    | 	byte	"String expected"
33871     00          | 	byte	0
33872                 | LR__5747
33872     49 6E 74 65 
33876     72 70 72 65 
3387a     74 65 72 20 
3387e     69 6E 74 65 
33882     72 6E 61 6C 
33886     20 65 72 72 
3388a     6F 72       | 	byte	"Interpreter internal error"
3388c     00          | 	byte	0
3388d                 | LR__5748
3388d     45 78 70 65 
33891     63 74 65 64 
33895     20 61 73 73 
33899     69 67 6E    | 	byte	"Expected assign"
3389c     00          | 	byte	0
3389d                 | LR__5749
3389d     45 78 70 65 
338a1     63 74 65 64 
338a5     20 27 74 6F 
338a9     27          | 	byte	"Expected 'to'"
338aa     00          | 	byte	0
338ab                 | LR__5750
338ab     45 78 70 65 
338af     63 74 65 64 
338b3     20 69 6E 74 
338b7     65 67 65 72 
338bb     20 76 61 72 
338bf     69 61 62 6C 
338c3     65          | 	byte	"Expected integer variable"
338c4     00          | 	byte	0
338c5                 | LR__5751
338c5     55 6E 69 6E 
338c9     69 74 69 61 
338cd     6C 69 7A 65 
338d1     64 20 76 61 
338d5     72 69 61 62 
338d9     6C 65 20 69 
338dd     6E 20 27 6E 
338e1     65 78 74 27 
338e5     2C 20 75 73 
338e9     65 20 27 66 
338ed     6F 72 27 20 
338f1     62 65 66 6F 
338f5     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
338f7     00          | 	byte	0
338f8                 | LR__5752
338f8     4E 6F 20 6D 
338fc     6F 72 65 20 
33900     73 6C 6F 74 
33904     73 20 66 6F 
33908     72 20 27 66 
3390c     6F 72 27    | 	byte	"No more slots for 'for'"
3390f     00          | 	byte	0
33910                 | LR__5753
33910     27 4E 65 78 
33914     74 27 20 64 
33918     6F 65 73 6E 
3391c     27 74 20 6D 
33920     61 74 63 68 
33924     20 27 66 6F 
33928     72 27       | 	byte	"'Next' doesn't match 'for'"
3392a     00          | 	byte	0
3392b                 | LR__5754
3392b     27 47 6F 74 
3392f     6F 27 20 74 
33933     61 72 67 65 
33937     74 20 6C 69 
3393b     6E 65 20 6E 
3393f     6F 74 20 66 
33943     6F 75 6E 64 | 	byte	"'Goto' target line not found"
33947     00          | 	byte	0
33948                 | LR__5755
33948     42 61 64 20 
3394c     6E 75 6D 62 
33950     65 72 20 6F 
33954     66 20 70 61 
33958     72 61 6D 65 
3395c     74 65 72 73 | 	byte	"Bad number of parameters"
33960     00          | 	byte	0
33961                 | LR__5756
33961     46 75 6E 63 
33965     74 69 6F 6E 
33969     20 75 6E 64 
3396d     65 66 69 6E 
33971     65 64 20 66 
33975     6F 72 20 73 
33979     74 72 69 6E 
3397d     67 73       | 	byte	"Function undefined for strings"
3397f     00          | 	byte	0
33980                 | LR__5757
33980     42 61 64 20 
33984     70 61 72 61 
33988     6D 65 74 65 
3398c     72          | 	byte	"Bad parameter"
3398d     00          | 	byte	0
3398e                 | LR__5758
3398e     43 61 6E 6E 
33992     6F 74 20 64 
33996     65 63 6C 61 
3399a     72 65 20 61 
3399e     6E 20 61 72 
339a2     72 61 79 3A 
339a6     20 74 68 65 
339aa     20 76 61 72 
339ae     69 61 62 6C 
339b2     65 20 65 78 
339b6     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
339ba     00          | 	byte	0
339bb                 | LR__5759
339bb     45 78 70 65 
339bf     63 74 65 64 
339c3     20 27 28 27 | 	byte	"Expected '('"
339c7     00          | 	byte	0
339c8                 | LR__5760
339c8     45 78 70 65 
339cc     63 74 65 64 
339d0     20 27 29 27 
339d4     20 6F 72 20 
339d8     27 2C 27    | 	byte	"Expected ')' or ','"
339db     00          | 	byte	0
339dc                 | LR__5761
339dc     4E 6F 20 6D 
339e0     6F 72 65 20 
339e4     74 68 61 6E 
339e8     20 33 20 64 
339ec     69 6D 65 6E 
339f0     73 69 6F 6E 
339f4     73 20 73 75 
339f8     70 70 6F 72 
339fc     74 65 64    | 	byte	"No more than 3 dimensions supported"
339ff     00          | 	byte	0
33a00                 | LR__5762
33a00     56 61 72 69 
33a04     61 62 6C 65 
33a08     20 6E 61 6D 
33a0c     65 20 65 78 
33a10     70 65 63 74 
33a14     65 64       | 	byte	"Variable name expected"
33a16     00          | 	byte	0
33a17                 | LR__5763
33a17     54 79 70 65 
33a1b     20 6E 61 6D 
33a1f     65 20 65 78 
33a23     70 65 63 74 
33a27     65 64       | 	byte	"Type name expected"
33a29     00          | 	byte	0
33a2a                 | LR__5764
33a2a     54 79 70 65 
33a2e     20 6E 6F 74 
33a32     20 73 75 70 
33a36     70 6F 72 74 
33a3a     65 64 20 79 
33a3e     65 74       | 	byte	"Type not supported yet"
33a40     00          | 	byte	0
33a41                 | LR__5765
33a41     41 72 72 61 
33a45     79 20 69 6E 
33a49     64 65 78 20 
33a4d     6F 75 74 20 
33a51     6F 66 20 72 
33a55     61 6E 67 65 | 	byte	"Array index out of range"
33a59     00          | 	byte	0
33a5a                 | LR__5766
33a5a     42 61 64 20 
33a5e     74 79 70 65 
33a62     20 77 68 69 
33a66     6C 65 20 61 
33a6a     73 73 69 67 
33a6e     6E 69 6E 67 
33a72     20 74 6F 20 
33a76     61 72 72 61 
33a7a     79          | 	byte	"Bad type while assigning to array"
33a7b     00          | 	byte	0
33a7c                 | LR__5767
33a7c     54 6F 6F 20 
33a80     6D 61 6E 79 
33a84     20 76 61 72 
33a88     69 61 62 6C 
33a8c     65 73       | 	byte	"Too many variables"
33a8e     00          | 	byte	0
33a8f                 | LR__5768
33a8f     27 54 68 65 
33a93     6E 27 20 65 
33a97     78 70 65 63 
33a9b     74 65 64    | 	byte	"'Then' expected"
33a9e     00          | 	byte	0
33a9f                 | LR__5769
33a9f     44 69 72 65 
33aa3     63 74 6F 72 
33aa7     79 20 64 6F 
33aab     65 73 6E 27 
33aaf     74 20 65 78 
33ab3     69 73 74    | 	byte	"Directory doesn't exist"
33ab6     00          | 	byte	0
33ab7                 | LR__5770
33ab7     45 72 72 6F 
33abb     72 20       | 	byte	"Error "
33abd     00          | 	byte	0
33abe                 | LR__5771
33abe     20 2D 20    | 	byte	" - "
33ac1     00          | 	byte	0
33ac2                 | LR__5772
33ac2     20 69 6E 20 
33ac6     6C 69 6E 65 
33aca     20          | 	byte	" in line "
33acb     00          | 	byte	0
33acc                 | LR__5773
33acc     2F 73 64    | 	byte	"/sd"
33acf     00          | 	byte	0
33ad0                 | LR__5774
33ad0     2F 73 64 2F 
33ad4     62 61 73    | 	byte	"/sd/bas"
33ad7     00          | 	byte	0
33ad8                 | LR__5775
33ad8     2F 73 64 2F 
33adc     62 61 73    | 	byte	"/sd/bas"
33adf     00          | 	byte	0
33ae0                 | LR__5776
33ae0     20 42 41 53 
33ae4     49 43 20 62 
33ae8     79 74 65 73 
33aec     20 66 72 65 
33af0     65          | 	byte	" BASIC bytes free"
33af1     00          | 	byte	0
33af2                 | LR__5777
33af2     52 65 61 64 
33af6     79          | 	byte	"Ready"
33af7     00          | 	byte	0
33af8                 | LR__5778
33af8     6E 6F 6E 61 
33afc     6D 65 2E 62 
33b00     61 73       | 	byte	"noname.bas"
33b02     00          | 	byte	0
33b03                 | LR__5779
33b03     2F 73 64 2F 
33b07     62 61 73 2F 
33b0b     61 75 74 6F 
33b0f     72 75 6E 2E 
33b13     62 61 73    | 	byte	"/sd/bas/autorun.bas"
33b16     00          | 	byte	0
33b17                 | LR__5780
33b17     72 75 6E 20 
33b1b     61 75 74 6F 
33b1f     72 75 6E 2E 
33b23     62 61 73    | 	byte	"run autorun.bas"
33b26     00          | 	byte	0
33b27                 | LR__5781
33b27                 | 	byte	
33b27     00          | 	byte	0
33b28                 | 	alignl
33b28                 | _dat_
33b28     00 00 00 00 
33b2c     00 00 00 00 
33b30     00 00 00 00 
33b34     00 00 00 00 | 	byte	$00[16]
33b38     61 41 17 0E 
33b3c     62 42 00 00 
33b40     63 43 19 10 
33b44     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
33b48     65 45 18 0F 
33b4c     66 46 00 00 
33b50     67 47 00 00 
33b54     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
33b58     69 49 00 00 
33b5c     6A 4A 00 00 
33b60     6B 4B 00 00 
33b64     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
33b68     6D 4D 00 00 
33b6c     6E 4E 1A 11 
33b70     6F 4F 1E 15 
33b74     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
33b78     71 51 00 00 
33b7c     72 52 00 00 
33b80     73 53 1B 12 
33b84     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
33b88     75 55 00 00 
33b8c     76 56 00 00 
33b90     77 57 00 00 
33b94     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
33b98     79 59 00 00 
33b9c     7A 5A 1D 14 
33ba0     31 21 04 00 
33ba4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
33ba8     33 23 06 00 
33bac     34 24 07 00 
33bb0     35 25 08 00 
33bb4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
33bb8     37 26 0A 00 
33bbc     38 2A 0B 00 
33bc0     39 28 0C 00 
33bc4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
33bc8     8D 8D 00 00 
33bcc     9B 9B 00 00 
33bd0     88 88 00 00 
33bd4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
33bd8     20 20 00 00 
33bdc     2D 5F 00 00 
33be0     3D 2B 00 00 
33be4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
33be8     5D 7D 00 00 
33bec     5C 7C 00 00 
33bf0     23 7E 00 00 
33bf4     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33bf8     27 22 00 00 
33bfc     60 7E 03 00 
33c00     2C 3C 00 00 
33c04     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33c08     2F 3F 00 00 
33c0c     B9 B9 00 00 
33c10     BA 00 00 00 
33c14     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33c18     BC 00 00 00 
33c1c     BD 00 00 00 
33c20     BE 00 00 00 
33c24     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
33c28     C0 00 00 00 
33c2c     C1 00 00 00 
33c30     C2 00 00 00 
33c34     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
33c38     C4 00 00 00 
33c3c     C5 00 00 00 
33c40     C6 00 00 00 
33c44     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
33c48     C8 00 00 00 
33c4c     C9 00 00 00 
33c50     CA 00 00 00 
33c54     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
33c58     7F 7F 00 00 
33c5c     CC 00 00 00 
33c60     CD 00 00 00 
33c64     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
33c68     CF 00 00 00 
33c6c     D0 00 00 00 
33c70     D1 00 00 00 
33c74     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
33c78     2F 2F 00 00 
33c7c     2A 2A 00 00 
33c80     2D 2D 00 00 
33c84     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
33c88     8D 8D 00 00 
33c8c     31 31 00 00 
33c90     32 32 00 00 
33c94     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
33c98     34 34 00 00 
33c9c     35 35 00 00 
33ca0     36 36 00 00 
33ca4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
33ca8     38 38 00 00 
33cac     39 39 00 00 
33cb0     30 30 00 00 
33cb4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
33cb8     5C 7C 00 00 
33cbc     00 00 00 00 
33cc0     00 00 00 00 
33cc4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
33cc8     00 00 00 00 
      ...             
33d20     00 00 00 00 
33d24     00 00 00 00 | 	byte	$00[96]
33d28     2B 00 A6 F2 
33d2c     24 A7 09 80 
33d30     5B 88 4D 89 
33d34     80 88 A5 88 | atari_spl file "atari.spl"
33d38     6D 88 B8 88 
33d3c     80 88 CB 88 
33d40     92 88 A5 88 
33d44     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
33d48     A5 88 CA 88 
33d4c     A6 88 DD 88 
33d50     B8 88 AB 89 
33d54     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
33d58     C8 AD C6 F1 
33d5c     91 06 B6 FF 
33d60     13 00 4A 00 
33d64     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
33d68     5D 00 5E 00 
33d6c     5D 00 5E 00 
33d70     5E 00 5D 00 
33d74     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
33d78     38 00 83 00 
33d7c     25 00 83 00 
33d80     C3 FE D1 04 
33d84     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
33d88     48 88 38 85 
33d8c     41 8A CB 88 
33d90     28 89 B8 88 
33d94     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
33d98     15 89 03 89 
33d9c     02 89 15 89 
33da0     16 89 15 89 
33da4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
33da8     15 89 3A 89 
33dac     72 89 E3 89 
33db0     52 83 AD 97 
33db4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
33db8     0C 02 B6 FF 
33dbc     E1 00 A8 00 
33dc0     F3 00 A8 00 
33dc4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
33dc8     CE 00 CD 00 
33dcc     CD 00 BA 00 
33dd0     E1 00 BB 00 
33dd4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33dd8     DF 00 C9 FF 
33ddc     E6 01 B6 06 
33de0     EE DD 8D 98 
33de4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33de8     97 89 73 89 
33dec     3B 89 60 89 
33df0     60 89 60 89 
33df4     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33df8     73 89 72 89 
33dfc     85 89 73 89 
33e00     AA 89 60 89 
33e04     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33e08     E8 8A 18 86 
33e0c     92 88 A5 C2 
33e10     E0 00 C3 05 
33e14     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33e18     F2 00 64 01 
33e1c     06 01 3E 01 
33e20     2B 01 2B 01 
33e24     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
33e28     2B 01 2A 01 
33e2c     2B 01 2B 01 
33e30     2B 01 18 01 
33e34     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
33e38     39 07 61 F3 
33e3c     C0 AF 37 85 
33e40     0F 88 8B 8A 
33e44     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
33e48     AB 89 D0 89 
33e4c     AB 89 D0 89 
33e50     D0 89 CF 89 
33e54     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
33e58     D0 89 F5 89 
33e5c     BD 89 08 8A 
33e60     CF 89 E8 8A 
33e64     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
33e68     53 B3 0D F8 
33e6c     F4 07 38 00 
33e70     63 01 63 01 
33e74     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
33e78     88 01 88 01 
33e7c     76 01 88 01 
33e80     88 01 89 01 
33e84     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33e88     75 01 AE 01 
33e8c     76 01 88 01 
33e90     4A 00 46 06 
33e94     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33e98     08 8A 9A 86 
33e9c     33 8B 08 8A 
33ea0     2D 8A F5 89 
33ea4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33ea8     2D 8A 2D 8A 
33eac     2E 8A 1B 8A 
33eb0     40 8A 2D 8A 
33eb4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33eb8     2E 8A 79 8A 
33ebc     66 8A C8 8B 
33ec0     72 82 2B 97 
33ec4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33ec8     1D 02 05 01 
33ecc     F8 01 C0 01 
33ed0     0B 02 C0 01 
33ed4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33ed8     F9 01 D3 01 
33edc     F8 01 D3 01 
33ee0     F8 01 D2 01 
33ee4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33ee8     E6 01 2B 01 
33eec     8E 02 5F 07 
33ef0     F7 E2 ED 9C 
33ef4     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33ef8     E8 8A 78 8A 
33efc     78 8A 65 8A 
33f00     8B 8A 78 8A 
33f04     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33f08     8B 8A 9D 8A 
33f0c     9D 8A 8B 8A 
33f10     C2 8A 78 8A 
33f14     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33f18     70 8C 18 86 
33f1c     8B 8A 23 C9 
33f20     CB 03 C4 05 
33f24     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
33f28     0B 02 7B 02 
33f2c     1E 02 55 02 
33f30     30 02 43 02 
33f34     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
33f38     43 02 44 02 
33f3c     43 02 30 02 
33f40     68 02 31 02 
33f44     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
33f48     07 08 3F F7 
33f4c     73 B2 13 85 
33f50     15 89 ED 8B 
33f54     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
33f58     B0 8A FB 8A 
33f5c     D5 8A FA 8A 
33f60     E8 8A FB 8A 
33f64     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
33f68     E8 8A 21 8B 
33f6c     E7 8A 33 8B 
33f70     E8 8A 26 8C 
33f74     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
33f78     8D B0 27 F6 
33f7c     9C 08 AD 01 
33f80     7B 02 8D 02 
33f84     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33f88     A1 02 A0 02 
33f8c     A1 02 A0 02 
33f90     A0 02 A0 02 
33f94     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33f98     7B 02 D8 02 
33f9c     7B 02 C6 02 
33fa0     3E 01 C3 05 
33fa4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33fa8     00 8C 2A 86 
33fac     E0 8C FA 8A 
33fb0     6A 8B FB 8A 
33fb4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33fb8     45 8B 45 8B 
33fbc     45 8B 6B 8B 
33fc0     46 8B 59 8B 
33fc4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33fc8     6B 8B 6B 8B 
33fcc     6B 8B 6B 8B 
33fd0     7D 8B 7D 8B 
33fd4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33fd8     90 8B 91 8B 
33fdc     90 8B 90 8B 
33fe0     A3 8B A3 8B 
33fe4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33fe8     B5 8B B6 8B 
33fec     B5 8B B5 8B 
33ff0     B6 8B C8 8B 
33ff4     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33ff8     C8 8B DA 8B 
33ffc     DB 8B DB 8B 
34000     DB 8B DC 8B 
34004     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
34008     EE 8B EE 8B 
3400c     00 8C 01 8C 
34010     00 8C 01 8C 
34014     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
34018     12 8C 13 8C 
3401c     13 8C 26 8C 
34020     26 8C 26 8C 
34024     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
34028     38 8C 38 8C 
3402c     38 8C 38 8C 
34030     4B 8C 4B 8C 
34034     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
34038     5E 8C 5E 8C 
3403c     5E 8C 5E 8C 
34040     70 8C 70 8C 
34044     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
34048     70 8C 83 8C 
3404c     83 8C 83 8C 
34050     83 8C 96 8C 
34054     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
34058     95 8C A9 8C 
3405c     A9 8C A8 8C 
34060     A8 8C A8 8C 
34064     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
34068     BB 8C BB 8C 
3406c     BB 8C CE 8C 
34070     CE 8C CE 8C 
34074     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
34078     E0 8C E1 8C 
3407c     E1 8C E0 8C 
34080     F4 8C F2 8C 
34084     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
34088     05 8D 05 8D 
3408c     06 8D 06 8D 
34090     19 8D 19 8D 
34094     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
34098     18 8D 2B 8D 
3409c     2B 8D 2B 8D 
340a0     2A 8D 3E 8D 
340a4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
340a8     3E 8D 51 8D 
340ac     50 8D 50 8D 
340b0     50 8D 51 8D 
340b4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
340b8     63 8D 64 8D 
340bc     76 8D 75 8D 
340c0     75 8D 76 8D 
340c4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
340c8     88 8D 88 8D 
340cc     89 8D 9B 8D 
340d0     9A 8D 9B 8D 
340d4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
340d8     AD 8D AE 8D 
340dc     AD 8D AE 8D 
340e0     C1 8D C1 8D 
340e4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
340e8     D3 8D D3 8D 
340ec     D3 8D D3 8D 
340f0     D3 8D E6 8D 
340f4     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
340f8     E6 8D E6 8D 
340fc     F9 8D F9 8D 
34100     F9 8D F8 8D 
34104     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
34108     0B 8E 0B 8E 
3410c     1D 8E 1D 8E 
34110     1E 8E 1E 8E 
34114     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
34118     31 8E 31 8E 
3411c     31 8E 42 8E 
34120     43 8E 43 8E 
34124     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
34128     56 8E 56 8E 
3412c     55 8E 56 8E 
34130     68 8E 69 8E 
34134     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
34138     69 8E 7B 8E 
3413c     7C 8E 7B 8E 
34140     7B 8E 8D 8E 
34144     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
34148     8D 8E A1 8E 
3414c     A0 8E A1 8E 
34150     A1 8E A0 8E 
34154     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
34158     B3 8E B3 8E 
3415c     C6 8E C5 8E 
34160     C6 8E C6 8E 
34164     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
34168     D8 8E D9 8E 
3416c     D8 8E EC 8E 
34170     EB 8E EC 8E 
34174     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
34178     FE 8E FE 8E 
3417c     FE 8E FE 8E 
34180     10 8F 10 8F 
34184     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
34188     11 8F 23 8F 
3418c     24 8F 23 8F 
34190     24 8F 37 8F 
34194     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
34198     36 8F 36 8F 
3419c     48 8F 49 8F 
341a0     49 8F 49 8F 
341a4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
341a8     5B 8F 5C 8F 
341ac     5B 8F 6E 8F 
341b0     6E 8F 6E 8F 
341b4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
341b8     81 8F 81 8F 
341bc     81 8F 81 8F 
341c0     93 8F 93 8F 
341c4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
341c8     93 8F A6 8F 
341cc     A6 8F A6 8F 
341d0     A6 8F B9 8F 
341d4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
341d8     B9 8F B9 8F 
341dc     CC 8F CB 8F 
341e0     CB 8F CC 8F 
341e4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
341e8     DF 8F DE 8F 
341ec     DE 8F F1 8F 
341f0     F1 8F F1 8F 
341f4     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
341f8     03 90 04 90 
341fc     04 90 04 90 
34200     16 90 17 90 
34204     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
34208     29 90 28 90 
3420c     29 90 28 90 
34210     29 90 3C 90 
34214     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
34218     3C 90 4F 90 
3421c     4E 90 4E 90 
34220     4E 90 4E 90 
34224     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
34228     61 90 61 90 
3422c     73 90 74 90 
34230     74 90 74 90 
34234     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
34238     87 90 86 90 
3423c     87 90 86 90 
34240     99 90 99 90 
34244     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
34248     AB 90 AB 90 
3424c     AC 90 AB 90 
34250     AB 90 BF 90 
34254     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
34258     BE 90 D1 90 
3425c     D0 90 D1 90 
34260     D1 90 D1 90 
34264     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
34268     E3 90 E4 90 
3426c     F6 90 F6 90 
34270     F6 90 F6 90 
34274     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
34278     09 91 0A 91 
3427c     0A 91 1C 91 
34280     1C 91 1C 91 
34284     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
34288     2F 91 2E 91 
3428c     2F 91 2F 91 
34290     2E 91 41 91 
34294     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
34298     41 91 53 91 
3429c     54 91 54 91 
342a0     53 91 54 91 
342a4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
342a8     67 91 67 91 
342ac     79 91 7A 91 
342b0     79 91 78 91 
342b4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
342b8     8C 91 8B 91 
342bc     8C 91 8C 91 
342c0     9E 91 9E 91 
342c4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
342c8     B1 91 B1 91 
342cc     B2 91 B1 91 
342d0     B1 91 C4 91 
342d4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
342d8     C4 91 D6 91 
342dc     D7 91 D7 91 
342e0     D7 91 D6 91 
342e4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
342e8     EA 91 EA 91 
342ec     EA 91 FC 91 
342f0     FC 91 FB 91 
342f4     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
342f8     0E 92 0F 92 
342fc     0F 92 0E 92 
34300     21 92 21 92 
34304     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
34308     21 92 34 92 
3430c     33 92 34 92 
34310     34 92 47 92 
34314     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
34318     46 92 47 92 
3431c     59 92 59 92 
34320     59 92 59 92 
34324     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
34328     6C 92 6C 92 
3432c     6B 92 7E 92 
34330     7E 92 7E 92 
34334     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
34338     92 92 91 92 
3433c     91 92 90 92 
34340     91 92 A4 92 
34344     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
34348     A3 92 B6 92 
3434c     B6 92 B7 92 
34350     B7 92 B6 92 
34354     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
34358     CA 92 C9 92 
3435c     CA 92 DC 92 
34360     DC 92 DC 92 
34364     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
34368     EF 92 EF 92 
3436c     EF 92 EF 92 
34370     01 93 01 93 
34374     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
34378     15 93 14 93 
3437c     14 93 14 93 
34380     14 93 27 93 
34384     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
34388     27 93 39 93 
3438c     3A 93 39 93 
34390     39 93 39 93 
34394     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
34398     4B 93 4C 93 
3439c     5F 93 5F 93 
343a0     5F 93 5E 93 
343a4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
343a8     5F 93 84 93 
343ac     4C 93 96 93 
343b0     5F 93 AE 94 
343b4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
343b8     7B C1 00 00 
343bc     00 00 00 00 
343c0     00 00 00 00 
343c4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
343c8     00 00 00 00 | 	byte	$00, $00, $00, $00
343cc     7A D7 00 80 
343d0     87 8A 48 8F 
343d4     EC 8C 76 8D 
343d8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
343dc     3C 8D 82 8D 
343e0     42 8D 88 8D 
343e4     8C 8D 8E 8D 
343e8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
343ec     97 8D DE 8D 
343f0     E1 8D F1 8E 
343f4     D8 8C A3 83 
343f8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
343fc     65 71 C9 65 
34400     FC 64 C4 65 
34404     C1 65 BF 65 
34408     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
3440c     B6 65 B4 65 
34410     B2 65 AE 65 
34414     AC 65 ED 65 
34418     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
3441c     5E 65 25 66 
34420     FA 62 23 6B 
34424     B5 6C 61 0A 
34428     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
3442c     5D 90 BE 8D 
34430     47 8E C3 8D 
34434     09 8E C9 8D 
34438     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
3443c     15 8E 19 8E 
34440     1B 8E 62 8E 
34444     64 8E 68 8E 
34448     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
3444c     B5 8E 4C 90 
34450     FA 84 3C 9D 
34454     98 13 79 6D 
34458     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
3445c     D9 66 50 66 
34460     D4 66 4B 66 
34464     8C 66 46 66 
34468     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
3446c     81 66 3A 66 
34470     7C 66 36 66 
34474     76 66 30 66 
34478     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
3447c     6B 66 88 72 
34480     BF 37 E7 B7 
34484     75 83 8B 8E 
34488     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
3448c     94 8E 96 8E 
34490     DD 8E 9C 8E 
34494     E2 8E A2 8E 
34498     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
3449c     EE 8E AE 8E 
344a0     38 8F B5 8E 
344a4     3F 8F FD 8E 
344a8     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
344ac     A5 87 1E E3 
344b0     6D 5D FA 71 
344b4     41 64 25 67 
344b8     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
344bc     D9 66 1A 67 
344c0     18 67 15 67 
344c4     12 67 0F 67 
344c8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
344cc     07 67 C0 66 
344d0     01 67 BC 66 
344d4     B8 66 DE 64 
344d8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
344dc     43 E5 1F 8B 
344e0     14 8A F1 90 
344e4     1C 8F 63 8F 
344e8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
344ec     29 8F 6E 8F 
344f0     72 8F 75 8F 
344f4     34 8F BE 8F 
344f8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
344fc     84 8F 87 8F 
34500     CC 8F 56 90 
34504     67 91 49 80 
34508     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
3450c     46 77 A6 66 
34510     E8 66 B0 67 
34514     AD 67 ED 67 
34518     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
3451c     A2 67 E3 67 
34520     9D 67 9A 67 
34524     98 67 94 67 
34528     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
3452c     49 67 CD 67 
34530     28 65 5F 6E 
34534     82 67 3A 01 
34538     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
3453c     C2 91 A9 8F 
34540     EF 8F AE 8F 
34544     F4 8F B5 8F 
34548     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
3454c     01 90 03 90 
34550     07 90 09 90 
34554     0C 90 53 90 
34558     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
3455c     18 90 44 93 
34560     85 84 D6 9D 
34564     87 1F 2F 75 
34568     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
3456c     C4 68 F6 67 
34570     BE 68 F1 67 
34574     76 68 2E 68 
34578     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
3457c     27 68 24 68 
34580     64 68 1E 68 
34584     5F 68 19 68 
34588     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
3458c     DC 68 56 72 
34590     7E 36 C2 B8 
34594     D7 84 73 90 
34598     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
3459c     7B 90 7F 90 
345a0     82 90 84 90 
345a4     CB 90 8B 90 
345a8     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
345ac     D7 90 96 90 
345b0     20 91 59 90 
345b4     25 91 A2 90 
345b8     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
345bc     D0 89 40 EE 
345c0     12 64 C4 71 
345c4     29 66 0C 69 
345c8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
345cc     C0 68 02 69 
345d0     FE 68 FB 68 
345d4     F9 68 F6 68 
345d8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
345dc     EE 68 A8 68 
345e0     2C 69 5F 68 
345e4     E2 68 81 66 
345e8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
345ec     1E EB A6 8A 
345f0     73 8B 5E 93 
345f4     7B 90 48 91 
345f8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
345fc     0D 91 11 91 
34600     14 91 16 91 
34604     5C 91 1C 91 
34608     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
3460c     68 91 AF 91 
34610     2A 91 B5 91 
34614     75 91 1A 94 
34618     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
3461c     70 0E CB 6C 
34620     5D 6E C4 67 
34624     99 69 54 69 
34628     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
3462c     D2 69 49 69 
34630     89 69 86 69 
34634     40 69 C4 69 
34638     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
3463c     35 69 76 69 
34640     58 67 EB 6D 
34644     E9 6D 89 0F 
34648     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
3464c     33 94 94 91 
34650     D9 91 56 91 
34654     E0 91 9F 91 
34658     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
3465c     EC 91 EE 91 
34660     F1 91 F4 91 
34664     F7 91 3D 92 
34668     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
3466c     46 92 21 94 
34670     11 89 A4 9D 
34674     FD 0E 8F 6C 
34678     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
3467c     28 6A E1 69 
34680     65 6A 1F 6A 
34684     5F 6A 1A 6A 
34688     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
3468c     54 6A 0F 6A 
34690     4F 6A 09 6A 
34694     06 6A 03 6A 
34698     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
3469c     23 68 69 77 
346a0     3A 4D 38 CA 
346a4     38 86 4E 91 
346a8     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
346ac     64 92 24 92 
346b0     6A 92 2A 92 
346b4     70 92 30 92 
346b8     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
346bc     7B 92 7E 92 
346c0     C5 92 84 92 
346c4     CB 92 8A 92 
346c8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
346cc     4D 8D F9 E2 
346d0     97 59 FE 74 
346d4     DB 68 6D 6A 
346d8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
346dc     A8 6A A5 6A 
346e0     A3 6A 9F 6A 
346e4     9D 6A 9B 6A 
346e8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
346ec     D6 6A 8F 6A 
346f0     CF 6A 46 6A 
346f4     CA 6A E1 67 
346f8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
346fc     D3 F7 15 92 
34700     90 8C BF 94 
34704     A6 92 EB 92 
34708     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
3470c     B1 92 F7 92 
34710     FA 92 FD 92 
34714     00 93 02 93 
34718     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
3471c     4F 93 52 93 
34720     54 93 22 94 
34724     5A 93 8F 88 
34728     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
3472c     1C 77 07 6C 
34730     E8 69 7A 6B 
34734     34 6B 75 6B 
34738     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
3473c     29 6B 26 6B 
34740     24 6B 21 6B 
34744     1D 6B 5E 6B 
34748     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
3474c     12 6B 52 6B 
34750     34 69 34 6E 
34754     BA 73 A4 24 
34758     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
3475c     7A 94 B3 93 
34760     72 93 31 93 
34764     78 93 7A 93 
34768     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
3476c     83 93 86 93 
34770     89 93 D0 93 
34774     D2 93 D5 93 
34778     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
3477c     DD 93 40 96 
34780     30 8B 99 9C 
34784     52 10 94 71 
34788     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
3478c     46 6C 79 6B 
34790     40 6C B7 6B 
34794     F7 6B B1 6B 
34798     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
3479c     EC 6B A5 6B 
347a0     A2 6B 9F 6B 
347a4     9D 6B 9A 6B 
347a8     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
347ac     C8 6A E4 76 
347b0     20 4B F9 CE 
347b4     2E 8A 1A 92 
347b8     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
347bc     FB 93 BA 93 
347c0     01 94 03 94 
347c4     4A 94 09 94 
347c8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
347cc     55 94 14 94 
347d0     9E 94 1A 94 
347d4     61 94 20 94 
347d8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
347dc     3E 87 E5 CD 
347e0     5F 50 6C 78 
347e4     B5 6A 04 6C 
347e8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
347ec     83 6C 7F 6C 
347f0     7C 6C 36 6C 
347f4     76 6C 74 6C 
347f8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
347fc     6B 6C 25 6C 
34800     66 6C 1F 6C 
34804     1D 6C 41 6A 
34808     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
3480c     BA FA FC 94 
34810     5B 8D 97 96 
34814     3B 94 C5 94 
34818     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
3481c     89 94 8C 94 
34820     8F 94 92 94 
34824     94 94 DB 94 
34828     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
3482c     E4 94 E7 94 
34830     2D 95 74 95 
34834     C8 96 15 89 
34838     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
3483c     CB 75 31 6F 
34840     7E 6B 10 6D 
34844     C9 6C 0A 6D 
34848     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
3484c     BD 6C FF 6C 
34850     FB 6C F9 6C 
34854     B2 6C F3 6C 
34858     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
3485c     A7 6C E8 6C 
34860     0D 6B 85 6F 
34864     C7 74 10 28 
34868     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
3486c     96 96 47 95 
34870     06 95 0A 95 
34874     0C 95 0F 95 
34878     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
3487c     17 95 5E 95 
34880     61 95 63 95 
34884     22 95 AC 95 
34888     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
3488c     72 95 17 98 
34890     59 8E 01 96 
34894     CF FC 5A 68 
34898     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
3489c     96 6D 50 6D 
348a0     D5 6D 4A 6D 
348a4     8C 6D 89 6D 
348a8     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
348ac     80 6D 3A 6D 
348b0     7A 6D 77 6D 
348b4     75 6D 71 6D 
348b8     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
348bc     18 6C BC 78 
348c0     9A 4F 7E CF 
348c4     1F 89 F1 93 
348c8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
348cc     D2 95 4E 95 
348d0     D7 95 53 95 
348d4     DD 95 E0 95 
348d8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
348dc     A5 95 EB 95 
348e0     EE 95 F0 95 
348e4     37 96 B3 95 
348e8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
348ec     1A 98 D5 8D 
348f0     C5 9F CD 0F 
348f4     0F 71 F3 73 
348f8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
348fc     D9 6D 5E 6E 
34900     D3 6D 58 6E 
34904     12 6E 0F 6E 
34908     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
3490c     49 6E BF 6D 
34910     87 6E 76 6D 
34914     81 6E 11 6B 
34918     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
3491c     3F 09 44 95 
34920     E5 8D 3F 99 
34924     D4 95 A2 96 
34928     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
3492c     23 96 69 96 
34930     6B 96 6E 96 
34934     71 96 74 96 
34938     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
3493c     BF 96 3C 96 
34940     C6 96 C8 96 
34944     A3 98 51 8D 
34948     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
3494c     CF 75 29 73 
34950     90 6C EC 6E 
34954     62 6E E7 6E 
34958     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3495c     9A 6E 98 6E 
34960     95 6E 91 6E 
34964     8E 6E CF 6E 
34968     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3496c     40 6E C3 6E 
34970     E8 6C 45 6F 
34974     A5 7B C9 35 
34978     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
3497c     2D 98 23 97 
34980     E1 96 A0 96 
34984     A4 96 EA 96 
34988     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
3498c     AF 96 F4 96 
34990     F8 96 3E 97 
34994     FD 96 43 97 
34998     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
3499c     08 97 6B 99 
349a0     D6 92 88 91 
349a4     D8 EE 84 66 
349a8     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
349ac     2E 6F E7 6E 
349b0     6C 6F 24 6F 
349b4     21 6F 1F 6F 
349b8     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
349bc     17 6F 13 6F 
349c0     54 6F 0E 6F 
349c4     0B 6F 4B 6F 
349c8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
349cc     27 6D 1C 7B 
349d0     19 59 9F DB 
349d4     66 8E BC 94 
349d8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
349dc     67 97 26 97 
349e0     6D 97 2B 97 
349e4     72 97 32 97 
349e8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
349ec     C1 97 7F 97 
349f0     C6 97 85 97 
349f4     CB 97 CE 97 
349f8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
349fc     EC 8A C4 C6 
34a00     68 4C F4 7D 
34a04     63 6E E8 6E 
34a08     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
34a0c     ED 6F A7 6F 
34a10     E7 6F A0 6F 
34a14     E1 6F 9B 6F 
34a18     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
34a1c     D5 6F 8F 6F 
34a20     CE 6F 45 6F 
34a24     86 6F 68 6D 
34a28     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
34a2c     C0 13 AD A2 
34a30     A7 8E 79 99 
34a34     E6 97 E8 97 
34a38     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
34a3c     F1 97 F3 97 
34a40     F6 97 F9 97 
34a44     FB 97 FE 97 
34a48     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
34a4c     4A 98 0A 98 
34a50     93 98 0F 98 
34a54     7F 9B BF 8C 
34a58     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
34a5c     91 7B 62 73 
34a60     1A 6E B9 70 
34a64     EB 6F B3 70 
34a68     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
34a6c     25 70 20 70 
34a70     1E 70 1B 70 
34a74     18 70 15 70 
34a78     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
34a7c     0D 70 09 70 
34a80     07 70 03 70 
34a84     01 70 FD 6F 
34a88     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
34a8c     F6 6F F2 6F 
34a90     EF 6F EC 6F 
34a94     2C 70 E6 6F 
34a98     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
34a9c     DD 6F 97 6F 
34aa0     D7 6F 84 6E 
34aa4     8F 6F 3F 7D 
34aa8     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
34aaa     FF FF FF FF 
34aae     FF FF       | atarist_spl file "atarist.spl" '512
34ab0     00 00 00 00 
34ab4     00 00 00 00 
34ab8     00 00       | 	byte	$00[10]
34aba     17 7F F2 7F 
34abe     B2 7F 72 7F 
34ac2     33 7F F4 7E 
34ac6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
34aca     36 7E F5 7D 
34ace     E9 51 F2 0D 
34ad2     8E 00 F3 FD 
34ad6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
34ada     57 FD 58 FD 
34ade     5B FD 5C FD 
34ae2     5C FD 60 7D 
34ae6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
34aea     D6 7C 98 7C 
34aee     59 7C 1A 7C 
34af2     DC 7B 9E 7B 
34af6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
34afa     F3 05 00 FD 
34afe     41 FB EA FA 
34b02     D9 FA DB FA 
34b06     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
34b0a     E4 FA 9B 36 
34b0e     F8 7A C0 7A 
34b12     84 7A 45 7A 
34b16     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
34b1a     8E 79 51 79 
34b1e     15 79 D7 78 
34b22     3C 1F EB FF 
34b26     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
34b2a     6D F8 65 F8 
34b2e     68 F8 6D F8 
34b32     70 F8 74 F8 
34b36     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
34b3a     AB 60 79 60 
34b3e     4B 60 1A 60 
34b42     E9 5F B9 5F 
34b46     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
34b4a     FB 59 B2 0B 
34b4e     92 FA 3A F7 
34b52     96 F6 79 F6 
34b56     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
34b5a     82 F6 86 F6 
34b5e     8C F6 DB 5D 
34b62     F1 5E C1 5E 
34b66     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
34b6a     34 5E 04 5E 
34b6e     D6 5D A6 5D 
34b72     78 5D D4 3E 
34b76     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
34b7a     27 F5 BA F4 
34b7e     AB F4 AD F4 
34b82     B2 F4 B8 F4 
34b86     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
34b8a     26 5D 2B 5D 
34b8e     FC 5C CD 5C 
34b92     9F 5C 70 5C 
34b96     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
34b9a     E5 5B B8 5B 
34b9e     DB 24 A7 FC 
34ba2     D1 F4 4D F3 
34ba6     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
34baa     04 F3 0B F3 
34bae     11 F3 16 F3 
34bb2     DE 18 98 5B 
34bb6     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
34bba     4E 4A 29 48 
34bbe     A0 47 6A 47 
34bc2     43 47 20 47 
34bc6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
34bca     E2 F6 98 F2 
34bce     C5 F1 A3 F1 
34bd2     A3 F1 A8 F1 
34bd6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
34bda     BF F1 00 3D 
34bde     EF 46 CD 46 
34be2     AA 46 86 46 
34be6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
34bea     1C 46 F9 45 
34bee     D7 45 EE 43 
34bf2     DE 02 E8 F3 
34bf6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34bfa     61 F0 65 F0 
34bfe     6D F0 74 F0 
34c02     7C F0 84 F0 
34c06     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34c0a     8E 45 6D 45 
34c0e     49 45 27 45 
34c12     05 45 E1 44 
34c16     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34c1a     F1 2F A9 FB 
34c1e     8B F1 9B EF 
34c22     40 EF 36 EF 
34c26     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
34c2a     4D EF 56 EF 
34c2e     5E EF 7B 44 
34c32     8C 44 69 44 
34c36     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
34c3a     03 44 E1 43 
34c3e     C0 43 F5 37 
34c42     69 33 0F 11 
34c46     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
34c4a     66 EE 37 EE 
34c4e     38 EE 40 EE 
34c52     48 EE 51 EE 
34c56     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
34c5a     7D 32 6A 32 
34c5e     51 32 37 32 
34c62     1F 32 05 32 
34c66     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
34c6a     B9 31 A1 31 
34c6e     F1 04 F4 F1 
34c72     50 EE A0 ED 
34c76     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
34c7a     93 ED 9A ED 
34c7e     A4 ED AD ED 
34c82     F4 27 C1 31 
34c86     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
34c8a     78 31 5F 31 
34c8e     46 31 2E 31 
34c92     15 31 FC 30 
34c96     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
34c9a     C4 EF 4A ED 
34c9e     DC EC CB EC 
34ca2     D2 EC DA EC 
34ca6     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
34caa     F9 EC 64 2F 
34cae     0A 31 F1 30 
34cb2     D9 30 C0 30 
34cb6     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
34cba     78 30 5F 30 
34cbe     46 30 38 23 
34cc2     A6 F6 19 EE 
34cc6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
34cca     20 EC 28 EC 
34cce     32 EC 3C EC 
34cd2     47 EC 51 EC 
34cd6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34cda     A3 22 93 22 
34cde     7F 22 6E 22 
34ce2     5D 22 4C 22 
34ce6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34cea     77 09 76 F1 
34cee     CC EC F0 EB 
34cf2     CD EB CE EB 
34cf6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34cfa     ED EB F5 EB 
34cfe     3E F6 6B 22 
34d02     5F 22 4E 22 
34d06     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34d0a     1B 22 0B 22 
34d0e     FA 21 E9 21 
34d12     D8 21 4D FF 
34d16     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34d1a     92 EB 7B EB 
34d1e     82 EB 8C EB 
34d22     97 EB A1 EB 
34d26     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
34d2a     15 22 04 22 
34d2e     F3 21 E3 21 
34d32     D2 21 C0 21 
34d36     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
34d3a     8E 21 7D 21 
34d3e     9A F8 A4 ED 
34d42     8E EB 2F EB 
34d46     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
34d4a     37 EB 42 EB 
34d4e     4C EB 57 EB 
34d52     B2 17 22 19 
34d56     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
34d5a     FD 18 EF 18 
34d5e     E3 18 D6 18 
34d62     CA 18 BD 18 
34d66     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
34d6a     60 EC 35 EB 
34d6e     01 EB 01 EB 
34d72     0C EB 16 EB 
34d76     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
34d7a     34 EB D0 18 
34d7e     00 19 F4 18 
34d82     E8 18 DA 18 
34d86     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
34d8a     B6 18 A9 18 
34d8e     9D 18 91 05 
34d92     F0 EF CA EB 
34d96     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
34d9a     E8 EA F2 EA 
34d9e     FE EA 07 EB 
34da2     12 EB C2 EF 
34da6     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
34daa     D9 18 CD 18 
34dae     C0 18 B3 18 
34db2     A7 18 9B 18 
34db6     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
34dba     B8 FC 30 EE 
34dbe     61 EB DC EA 
34dc2     CD EA D2 EA 
34dc6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
34dca     F3 EA FE EA 
34dce     D2 09 D1 18 
34dd2     C3 18 17 18 
34dd6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34dda     66 11 52 11 
34dde     49 11 41 11 
34de2     38 11 E0 F4 
34de6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34dea     C9 EA C5 EA 
34dee     CF EA DB EA 
34df2     E6 EA EF EA 
34df6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34dfa     89 11 80 11 
34dfe     78 11 6E 11 
34e02     67 11 5D 11 
34e06     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34e0a     43 11 32 0D 
34e0e     9C F1 07 EC 
34e12     F8 EA CD EA 
34e16     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34e1a     E4 EA ED EA 
34e1e     F8 EA 02 EB 
34e22     55 11 91 11 
34e26     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
34e2a     75 11 6E 11 
34e2e     64 11 5E 11 
34e32     54 11 4A 11 
34e36     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
34e3a     A8 EB F1 EA 
34e3e     D9 EA DC EA 
34e42     E8 EA F1 EA 
34e46     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
34e4a     A6 EB 9E 11 
34e4e     A0 11 96 11 
34e52     8D 11 85 11 
34e56     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
34e5a     6A 11 CA 0D 
34e5e     36 0B 57 F8 
34e62     6C ED 57 EB 
34e66     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
34e6a     F4 EA FF EA 
34e6e     09 EB 15 EB 
34e72     1E EB 1A FD 
34e76     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
34e7a     ED 0A E8 0A 
34e7e     E2 0A DC 0A 
34e82     D6 0A D1 0A 
34e86     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34e8a     F8 F3 BC EC 
34e8e     57 EB 1E EB 
34e92     18 EB 24 EB 
34e96     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34e9a     42 EB 4D EB 
34e9e     08 09 20 0B 
34ea2     1A 0B 14 0B 
34ea6     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34eaa     04 0B FE 0A 
34eae     F9 0A F2 0A 
34eb2     84 08 3A F1 
34eb6     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34eba     42 EB 42 EB 
34ebe     4E EB 57 EB 
34ec2     62 EB 6B EB 
34ec6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34eca     48 0B 43 0B 
34ece     3C 0B 36 0B 
34ed2     31 0B 2C 0B 
34ed6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34eda     1B 0B 5C 00 
34ede     6A EF 1B EC 
34ee2     81 EB 6A EB 
34ee6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34eea     85 EB 8E EB 
34eee     99 EB A3 EB 
34ef2     DD 05 E5 05 
34ef6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34efa     DB 05 D8 05 
34efe     D5 05 D1 05 
34f02     D0 05 CB 05 
34f06     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34f0a     0C EC BB EB 
34f0e     B3 EB BB EB 
34f12     C5 EB D0 EB 
34f16     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34f1a     E4 F7 2C 06 
34f1e     28 06 24 06 
34f22     22 06 1F 06 
34f26     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
34f2a     16 06 14 06 
34f2e     0F 06 D0 F3 
34f32     65 ED 2D EC 
34f36     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
34f3a     01 EC 0A EC 
34f3e     14 EC 1E EC 
34f42     29 EC FB 03 
34f46     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
34f4a     63 06 60 06 
34f4e     5E 06 59 06 
34f52     58 06 54 06 
34f56     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
34f5a     69 F1 21 ED 
34f5e     55 EC 33 EC 
34f62     36 EC 40 EC 
34f66     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
34f6a     5C EC 68 EC 
34f6e     92 02 D9 02 
34f72     D7 02 D7 02 
34f76     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
34f7a     D1 02 D1 02 
34f7e     CE 02 CD 02 
34f82     5D FC 80 EF 
34f86     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34f8a     83 EC 8A EC 
34f8e     93 EC 9C EC 
34f92     A5 EC B1 EC 
34f96     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34f9a     2B 03 2A 03 
34f9e     29 03 26 03 
34fa2     25 03 24 03 
34fa6     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34faa     1F 03 70 F7 
34fae     D0 EE 27 ED 
34fb2     DB EC D4 EC 
34fb6     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34fba     F0 EC FA EC 
34fbe     02 ED F9 F4 
34fc2     7B 03 7C 03 
34fc6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34fca     75 03 73 03 
34fce     72 03 70 03 
34fd2     6D 03 6C 03 
34fd6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34fda     54 ED 22 ED 
34fde     22 ED 2C ED 
34fe2     35 ED 3F ED 
34fe6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34fea     14 01 C3 03 
34fee     C1 03 C0 03 
34ff2     5F 01 A5 00 
34ff6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34ffa     7B 00 7C 00 
34ffe     20 00 85 F1 
35002     2A EE 89 ED 
35006     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3500a     80 ED 87 ED 
3500e     90 ED 9A ED 
35012     A3 ED 73 00 
35016     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3501a     D0 00 D0 00 
3501e     D0 00 D0 00 
35022     D0 00 CF 00 
35026     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3502a     80 F0 3D EE 
3502e     D5 ED C7 ED 
35032     CD ED D6 ED 
35036     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3503a     F2 ED FA ED 
3503e     1D 01 29 01 
35042     27 01 27 01 
35046     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3504a     25 01 26 01 
3504e     26 01 23 01 
35052     D0 F7 EC EF 
35056     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3505a     1C EE 24 EE 
3505e     2D EE 37 EE 
35062     40 EE 47 EE 
35066     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3506a     7D 01 7B 01 
3506e     7A 01 7A 01 
35072     79 01 78 01 
35076     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3507a     84 FE DE F3 
3507e     6C EF 93 EE 
35082     72 EE 72 EE 
35086     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3508a     8B EE 95 EE 
3508e     9E EE 15 FC 
35092     67 FE 67 FE 
35096     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3509a     6B FE 6B FE 
3509e     6D FE 6D FE 
350a2     6D FE 6F FE 
350a6     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
350aa     DF EE CC EE 
350ae     CF EE D9 EE 
350b2     E1 EE EA EE 
350b6     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
350ba     5A FE C4 FE 
350be     C3 FE C5 FE 
350c2     C6 FE C6 FE 
350c6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
350ca     C8 FE C7 FE 
350ce     DA FB 85 F1 
350d2     8D EF 31 EF 
350d6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
350da     34 EF 3E EF 
350de     46 EF 4F EF 
350e2     57 EF 0D FF 
350e6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
350ea     1F FF 1F FF 
350ee     21 FF 21 FF 
350f2     21 FF 21 FF 
350f6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
350fa     15 F1 BE EF 
350fe     84 EF 7E EF 
35102     88 EF 8F EF 
35106     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3510a     A9 EF 06 F2 
3510e     A6 FC AB FC 
35112     AD FC AE FC 
35116     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3511a     B2 FC B4 FC 
3511e     B6 FC B7 FC 
35122     8B F4 BD F0 
35126     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3512a     E4 EF EE EF 
3512e     F6 EF FD EF 
35132     04 F0 0E F0 
35136     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3513a     0B FD 0D FD 
3513e     0F FD 11 FD 
35142     11 FD 13 FD 
35146     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3514a     17 FD 64 F3 
3514e     CD F0 52 F0 
35152     41 F0 45 F0 
35156     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3515a     5B F0 64 F0 
3515e     6D F0 FB FC 
35162     65 FD 68 FD 
35166     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3516a     6C FD 6D FD 
3516e     6F FD 70 FD 
35172     72 FD B3 FB 
35176     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3517a     A4 F0 99 F0 
3517e     A0 F0 A8 F0 
35182     AE F0 B9 F0 
35186     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3518a     CB FB DD FB 
3518e     DE FB E0 FB 
35192     E3 FB E3 FB 
35196     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3519a     E9 FB EC FB 
3519e     62 F7 27 F2 
351a2     2A F1 FF F0 
351a6     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
351aa     0C F1 13 F1 
351ae     1B F1 23 F1 
351b2     33 F2 3C FC 
351b6     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
351ba     42 FC 45 FC 
351be     47 FC 48 FC 
351c2     4A FC 4C FC 
351c6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
351ca     20 F2 77 F1 
351ce     5C F1 5F F1 
351d2     64 F1 6C F1 
351d6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
351da     83 F1 DC F8 
351de     9A FC 9A FC 
351e2     9B FC 9E FC 
351e6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
351ea     A3 FC A4 FC 
351ee     A6 FC A9 FC 
351f2     90 F4 33 F2 
351f6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
351fa     BA F1 BF F1 
351fe     C7 F1 CE F1 
35202     D6 F1 DC F1 
35206     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3520a     F3 FC F5 FC 
3520e     FE FB 79 FB 
35212     62 FB 5F FB 
35216     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3521a     6F FA AF F3 
3521e     53 F2 12 F2 
35222     0F F2 15 F2 
35226     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3522a     2A F2 32 F2 
3522e     38 F2 9A FB 
35232     AF FB B1 FB 
35236     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3523a     B7 FB B8 FB 
3523e     BA FB BC FB 
35242     C1 FB 3B F8 
35246     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3524a     6E F2 6C F2 
3524e     74 F2 7A F2 
35252     81 F2 87 F2 
35256     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3525a     06 FC 09 FC 
3525e     0C FC 0E FC 
35262     0F FC 12 FC 
35266     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3526a     17 FC 1A FC 
3526e     B2 F6 7B F3 
35272     DD F2 C5 F2 
35276     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3527a     D4 F2 DB F2 
3527e     E0 F2 E8 F2 
35282     28 F8 60 FC 
35286     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3528a     64 FC 66 FC 
3528e     68 FC 6A FC 
35292     6D FC 52 FC 
35296     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3529a     78 F3 24 F3 
3529e     1A F3 1E F3 
352a2     24 F3 2A F3 
352a6     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
352aa     3D F3 80 FA 
352ae     0C FB 0F FB 
352b2     10 FB 14 FB 
352b6     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
352ba     1B FB 1D FB 
352be     1F FB 92 FA 
352c2     DE F4 AE F3 
352c6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
352ca     79 F3 7E F3 
352ce     84 F3 8C F3 
352d2     92 F3 97 F3 
352d6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
352da     67 FB 69 FB 
352de     6B FB 6F FB 
352e2     71 FB 72 FB 
352e6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
352ea     E3 F8 BA F4 
352ee     EE F3 CC F3 
352f2     CA F3 CF F3 
352f6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
352fa     E2 F3 E8 F3 
352fe     ED F3 B7 FB 
35302     BC FB BE FB 
35306     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3530a     C4 FB C6 FB 
3530e     C8 FB C9 FB 
35312     CC FB 8F F7 
35316     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3531a     1E F4 1E F4 
3531e     24 F4 2A F4 
35322     30 F4 38 F4 
35326     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3532a     AD FA B1 FA 
3532e     B4 FA B6 FA 
35332     BA FA BB FA 
35336     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3533a     C2 FA C6 FA 
3533e     55 F6 C6 F4 
35342     7D F4 72 F4 
35346     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3534a     83 F4 89 F4 
3534e     8F F4 94 F4 
35352     66 FA 03 FB 
35356     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3535a     0A FB 0E FB 
3535e     10 FB 11 FB 
35362     16 FB 18 FB 
35366     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3536a     F9 F4 CA F4 
3536e     C5 F4 CB F4 
35372     D1 F4 D7 F4 
35376     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3537a     E8 F4 3F FB 
3537e     56 FB 58 FB 
35382     5A FB 5E FB 
35386     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3538a     64 FB 64 FB 
3538e     69 FB 99 F9 
35392     E9 F5 33 F5 
35396     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3539a     1D F5 22 F5 
3539e     27 F5 2E F5 
353a2     32 F5 37 F5 
353a6     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
353aa     BC FA BC FA 
353ae     C1 FA C2 FA 
353b2     C4 FA C8 FA 
353b6     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
353ba     F9 F7 DB F5 
353be     78 F5 69 F5 
353c2     6A F5 70 F5 
353c6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
353ca     7F F5 85 F5 
353ce     6E F7 06 FB 
353d2     0A FB 0B FB 
353d6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
353da     14 FB 15 FB 
353de     18 FB 1B FB 
353e2     1D FB 70 F7 
353e6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
353ea     B6 F5 BB F5 
353ee     C0 F5 C6 F5 
353f2     CA F5 CF F5 
353f6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
353fa     54 FB 56 FB 
353fe     5A FB 5B FB 
35402     5E FB 5F FB 
35406     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3540a     67 FB 52 FB 
3540e     29 F7 33 F6 
35412     06 F6 02 F6 
35416     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3541a     10 F6 16 F6 
3541e     1A F6 1F F6 
35422     81 FB 9F FB 
35426     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3542a     51 FB F2 FA 
3542e     E3 FA E3 FA 
35432     E5 FA E9 FA 
35436     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3543a     64 F6 4D F6 
3543e     4D F6 53 F6 
35442     57 F6 5C F6 
35446     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3544a     6A F6 19 FB 
3544e     1E FB 22 FB 
35452     23 FB 24 FB 
35456     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3545a     2C FB 2E FB 
3545e     32 FB F0 F8 
35462     01 F7 A5 F6 
35466     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3546a     9F F6 A3 F6 
3546e     A6 F6 AC F6 
35472     B0 F6 EB F7 
35476     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3547a     68 FB 6C FB 
3547e     6E FB 71 FB 
35482     72 FB 74 FB 
35486     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3548a     71 F8 21 F7 
3548e     E5 F6 DD F6 
35492     E1 F6 E6 F6 
35496     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3549a     F5 F6 F7 F6 
3549e     F7 FA AB FB 
354a2     AD FB AF FB 
354a6     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
354aa     B6 FB B9 FB 
354ae     BB FB BC FB 
354b2     21 FB 07 F8 
354b6     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
354ba     22 F7 26 F7 
354be     2B F7 2E F7 
354c2     34 F7 38 F7 
354c6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
354ca     13 FB 16 FB 
354ce     17 FB 1B FB 
354d2     1E FB 20 FB 
354d6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
354da     26 FB 77 FA 
354de     F3 F7 7C F7 
354e2     67 F7 6A F7 
354e6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
354ea     74 F7 7A F7 
354ee     7E F7 82 F7 
354f2     53 FB 5A FB 
354f6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
354fa     5F FB 63 FB 
354fe     65 FB 67 FB 
35502     69 FB 6A FB 
35506     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3550a     B5 F7 A9 F7 
3550e     AD F7 B0 F7 
35512     B5 F7 B8 F7 
35516     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3551a     6E F8 99 FB 
3551e     9C FB 9D FB 
35522     9F FB A4 FB 
35526     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3552a     A9 FB AB FB 
3552e     AD FB 46 F9 
35532     26 F8 F0 F7 
35536     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3553a     F4 F7 F8 F7 
3553e     FB F7 FF F7 
35542     03 F8 65 FA 
35546     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3554a     2B FB 2F FB 
3554e     30 FB 32 FB 
35552     34 FB 38 FB 
35556     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3555a     E9 F8 4A F8 
3555e     2E F8 2C F8 
35562     2F F8 36 F8 
35566     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3556a     41 F8 44 F8 
3556e     4A FB 67 FB 
35572     68 FB 6B FB 
35576     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3557a     73 FB 74 FB 
3557e     78 FB 7A FB 
35582     14 FB E7 F8 
35586     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3558a     6D F8 70 F8 
3558e     73 F8 78 F8 
35592     7C F8 80 F8 
35596     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3559a     A6 FB A7 FB 
3559e     A9 FB AC FB 
355a2     AF FB B1 FB 
355a6     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
355aa     B7 FB 73 FA 
355ae     F8 F8 B4 F8 
355b2     A9 F8 AB F8 
355b6     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
355ba     B4 F8 B8 F8 
355be     BB F8 FA F8 
355c2     64 FB 65 FB 
355c6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
355ca     6D FB 6F FB 
355ce     70 FB 74 FB 
355d2     77 FB 77 FB 
355d6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
355da     E9 F8 E4 F8 
355de     E8 F8 EB F8 
355e2     EE F8 F2 F8 
355e6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
355ea     B5 FA 9F FB 
355ee     A1 FB A4 FB 
355f2     A5 FB A9 FB 
355f6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
355fa     AE FB B1 FB 
355fe     B2 FB C7 F9 
35602     39 F9 22 F9 
35606     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3560a     26 F9 2A F9 
3560e     2E F9 32 F9 
35612     33 F9 BA FB 
35616     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3561a     DE FB E1 FB 
3561e     E2 FB E4 FB 
35622     E5 FB E7 FB 
35626     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3562a     C5 F9 67 F9 
3562e     57 F9 56 F9 
35632     5B F9 5F F9 
35636     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3563a     68 F9 6C F9 
3563e     0B FC 11 FC 
35642     14 FC 15 FC 
35646     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3564a     B5 FB B5 FB 
3564e     B6 FB B8 FB 
35652     E9 FA C8 F9 
35656     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3565a     90 F9 94 F9 
3565e     95 F9 99 F9 
35662     9D F9 9F F9 
35666     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3566a     DE FB DF FB 
3566e     E2 FB E4 FB 
35672     E6 FB E8 FB 
35676     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3567a     EF FB AC FA 
3567e     E9 F9 C7 F9 
35682     C3 F9 C8 F9 
35686     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3568a     D0 F9 D4 F9 
3568e     D6 F9 0E FB 
35692     11 FC 13 FC 
35696     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3569a     19 FC 1B FC 
3569e     1D FC 1E FC 
356a2     21 FC 22 FC 
356a6     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
356aa     F7 F9 F7 F9 
356ae     FB F9 FE F9 
356b2     00 FA 03 FA 
356b6     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
356ba     1B FC 45 FC 
356be     46 FC 48 FC 
356c2     4A FC 4B FC 
356c6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
356ca     52 FC 54 FC 
356ce     F3 FB 82 FA 
356d2     35 FA 28 FA 
356d6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
356da     31 FA 32 FA 
356de     37 FA 37 FA 
356e2     3C FA 00 FC 
356e6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
356ea     09 FC 0B FC 
356ee     0F FC 12 FC 
356f2     12 FC 15 FC 
356f6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
356fa     8D FA 60 FA 
356fe     5B FA 5C FA 
35702     60 FA 61 FA 
35706     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3570a     6C FA 6D FA 
3570e     37 FC 3A FC 
35712     3B FC 3D FC 
35716     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3571a     43 FC 44 FC 
3571e     45 FC 47 FC 
35722     51 FB AB FA 
35726     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3572a     8E FA 91 FA 
3572e     93 FA 95 FA 
35732     98 FA 9B FA 
35736     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3573a     68 FC 6A FC 
3573e     6C FC 6E FC 
35742     70 FC 72 FC 
35746     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3574a     76 FC 3B FB 
3574e     D0 FA BB FA 
35752     B9 FA BD FA 
35756     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3575a     C4 FA C6 FA 
3575e     CA FA 13 FC 
35762     3A FC 3A FC 
35766     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3576a     41 FC 43 FC 
3576e     44 FC 47 FC 
35772     48 FC 3C FC 
35776     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3577a     E6 FA E8 FA 
3577e     EB FA EE FA 
35782     F0 FA F2 FA 
35786     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3578a     61 FC 66 FC 
3578e     68 FC 6B FC 
35792     6C FC 6E FC 
35796     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3579a     73 FC 75 FC 
3579e     13 FC 3F FB 
357a2     17 FB 12 FB 
357a6     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
357aa     1A FB 1D FB 
357ae     1F FB 20 FB 
357b2     23 FB 92 FC 
357b6     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
357ba     96 FC 97 FC 
357be     9A FC 9C FC 
357c2     9E FC 9F FC 
357c6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
357ca     5A FB 41 FB 
357ce     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
357d2     73 32 00 04 
357d6     00 00 10 00 
357da     00 00 00 00 
357de     00 00 00 00 | atari2 file "atari2.s2"
357e2     43 87 43 87 
357e6     43 87 44 87 
357ea     43 87 44 87 
357ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
357f2     43 87 43 87 
357f6     43 87 44 87 
357fa     43 87 43 87 
357fe     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35802     44 87 43 87 
35806     44 87 43 87 
3580a     43 87 43 87 
3580e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35812     43 87 43 87 
35816     44 87 43 87 
3581a     44 87 44 87 
3581e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
35822     43 87 43 87 
35826     44 87 43 87 
3582a     43 87 42 87 
3582e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
35832     43 87 43 87 
35836     43 87 43 87 
3583a     44 87 43 87 
3583e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
35842     44 87 44 87 
35846     43 87 44 87 
3584a     43 87 44 87 
3584e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
35852     44 87 43 87 
35856     44 87 44 87 
3585a     43 87 43 87 
3585e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35862     43 87 44 87 
35866     44 87 43 87 
3586a     43 87 44 87 
3586e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35872     43 87 43 87 
35876     43 87 43 87 
3587a     43 87 43 87 
3587e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
35882     42 87 43 87 
35886     44 87 42 87 
3588a     43 87 43 87 
3588e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
35892     43 87 44 87 
35896     44 87 43 87 
3589a     43 87 43 87 
3589e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
358a2     43 87 5C 87 
358a6     EE 86 AC 87 
358aa     4C 7C A3 78 
358ae     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
358b2     BC 78 BB 78 
358b6     BD 78 BC 78 
358ba     BB 78 BD 78 
358be     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
358c2     BB 78 BB 78 
358c6     BC 78 BC 78 
358ca     BC 78 BB 78 
358ce     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
358d2     BC 78 BC 78 
358d6     BC 78 BC 78 
358da     BC 78 BC 78 
358de     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
358e2     BB 78 BC 78 
358e6     A0 78 4C 7C 
358ea     11 7A 29 89 
358ee     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
358f2     44 87 43 87 
358f6     44 87 43 87 
358fa     43 87 42 87 
358fe     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
35902     43 87 43 87 
35906     44 87 ED 85 
3590a     71 85 52 79 
3590e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
35912     BC 78 BC 78 
35916     BC 78 BC 78 
3591a     BC 78 BC 78 
3591e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35922     BC 78 BC 78 
35926     BC 78 A0 78 
3592a     CF 7A B9 81 
3592e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
35932     44 87 43 87 
35936     43 87 44 87 
3593a     43 87 44 87 
3593e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
35942     43 87 43 87 
35946     43 87 43 87 
3594a     44 87 43 87 
3594e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
35952     43 87 43 87 
35956     44 87 43 87 
3595a     44 87 43 87 
3595e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35962     44 87 43 87 
35966     43 87 43 87 
3596a     5A 87 39 81 
3596e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
35972     A5 78 BC 78 
35976     BB 78 BC 78 
3597a     BB 78 BC 78 
3597e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
35982     BC 78 BC 78 
35986     BC 78 BC 78 
3598a     BC 78 8F 79 
3598e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
35992     09 85 47 87 
35996     43 87 43 87 
3599a     42 87 42 87 
3599e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
359a2     43 87 43 87 
359a6     43 87 43 87 
359aa     43 87 44 87 
359ae     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
359b2     43 87 43 87 
359b6     44 87 43 87 
359ba     42 87 43 87 
359be     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
359c2     44 87 43 87 
359c6     43 87 43 87 
359ca     44 87 44 87 
359ce     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
359d2     94 78 55 7A 
359d6     B9 78 BC 78 
359da     BC 78 BC 78 
359de     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
359e2     BC 78 BB 78 
359e6     BC 78 BC 78 
359ea     BC 78 BC 78 
359ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
359f2     BB 78 BC 78 
359f6     BC 78 BC 78 
359fa     BB 78 BC 78 
359fe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35a02     BC 78 BC 78 
35a06     BD 78 BC 78 
35a0a     BC 78 BB 78 
35a0e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
35a12     94 78 B3 84 
35a16     36 84 4A 87 
35a1a     43 87 43 87 
35a1e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
35a22     43 87 44 87 
35a26     43 87 43 87 
35a2a     43 87 43 87 
35a2e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35a32     43 87 44 87 
35a36     43 87 44 87 
35a3a     43 87 43 87 
35a3e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
35a42     43 87 43 87 
35a46     43 87 45 87 
35a4a     43 87 43 87 
35a4e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
35a52     43 87 44 87 
35a56     44 87 44 87 
35a5a     43 87 43 87 
35a5e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
35a62     43 87 42 87 
35a66     43 87 43 87 
35a6a     44 87 43 87 
35a6e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35a72     54 87 3C 82 
35a76     36 83 52 79 
35a7a     C6 78 BC 78 
35a7e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
35a82     BB 78 BB 78 
35a86     BC 78 BC 78 
35a8a     BC 78 BC 78 
35a8e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35a92     BD 78 ED 78 
35a96     1B 79 F4 83 
35a9a     4D 83 4E 87 
35a9e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
35aa2     44 87 43 87 
35aa6     42 87 44 87 
35aaa     43 87 42 87 
35aae     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
35ab2     43 87 54 87 
35ab6     26 82 B3 84 
35aba     D6 77 BB 78 
35abe     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
35ac2     BC 78 BB 78 
35ac6     BB 78 BB 78 
35aca     BB 78 BB 78 
35ace     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
35ad2     BC 78 BC 78 
35ad6     26 79 18 75 
35ada     36 83 1F 84 
35ade     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
35ae2     43 87 43 87 
35ae6     43 87 43 87 
35aea     43 87 44 87 
35aee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35af2     43 87 44 87 
35af6     44 87 43 87 
35afa     43 87 43 87 
35afe     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
35b02     43 87 43 87 
35b06     43 87 43 87 
35b0a     44 87 44 87 
35b0e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
35b12     44 87 43 87 
35b16     43 87 43 87 
35b1a     43 87 44 87 
35b1e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35b22     44 87 44 87 
35b26     44 87 43 87 
35b2a     44 87 43 87 
35b2e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35b32     43 87 43 87 
35b36     43 87 44 87 
35b3a     44 87 43 87 
35b3e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35b42     43 87 43 87 
35b46     43 87 43 87 
35b4a     43 87 44 87 
35b4e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35b52     43 87 44 87 
35b56     43 87 44 87 
35b5a     19 87 7D 86 
35b5e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
35b62     B1 78 BC 78 
35b66     BC 78 BC 78 
35b6a     BC 78 BC 78 
35b6e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35b72     BC 78 BC 78 
35b76     BD 78 BC 78 
35b7a     B7 78 3B 7B 
35b7e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
35b82     96 86 44 87 
35b86     43 87 43 87 
35b8a     43 87 43 87 
35b8e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
35b92     44 87 44 87 
35b96     43 87 44 87 
35b9a     43 87 44 87 
35b9e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
35ba2     43 87 44 87 
35ba6     43 87 44 87 
35baa     43 87 44 87 
35bae     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
35bb2     43 87 44 87 
35bb6     43 87 43 87 
35bba     44 87 43 87 
35bbe     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35bc2     44 87 44 87 
35bc6     43 87 43 87 
35bca     43 87 44 87 
35bce     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
35bd2     43 87 43 87 
35bd6     43 87 43 87 
35bda     44 87 44 87 
35bde     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
35be2     36 83 CF 7A 
35be6     AB 78 BB 78 
35bea     BC 78 BC 78 
35bee     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
35bf2     BB 78 BC 78 
35bf6     BC 78 BC 78 
35bfa     BC 78 BC 78 
35bfe     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35c02     BC 78 BC 78 
35c06     BC 78 BB 78 
35c0a     BC 78 BC 78 
35c0e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
35c12     BB 78 BC 78 
35c16     BB 78 BC 78 
35c1a     BC 78 BD 78 
35c1e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
35c22     BC 78 BC 78 
35c26     BC 78 BC 78 
35c2a     BC 78 BD 78 
35c2e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
35c32     BC 78 BB 78 
35c36     BC 78 BB 78 
35c3a     BB 78 BC 78 
35c3e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
35c42     BC 78 BC 78 
35c46     BC 78 BC 78 
35c4a     BC 78 BB 78 
35c4e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
35c52     BC 78 BC 78 
35c56     BC 78 BD 78 
35c5a     BB 78 BC 78 
35c5e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35c62     BC 78 BC 78 
35c66     BC 78 BB 78 
35c6a     BC 78 BB 78 
35c6e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35c72     BB 78 BC 78 
35c76     BC 78 BC 78 
35c7a     BC 78 BB 78 
35c7e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c82     BC 78 BC 78 
35c86     BC 78 BB 78 
35c8a     BC 78 BB 78 
35c8e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35c92     BC 78 BC 78 
35c96     BC 78 BC 78 
35c9a     BB 78 BC 78 
35c9e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35ca2     BC 78 9F 78 
35ca6     52 79 B3 84 
35caa     2F 86 60 87 
35cae     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
35cb2     44 87 43 87 
35cb6     43 87 43 87 
35cba     43 87 43 87 
35cbe     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
35cc2     43 87 43 87 
35cc6     43 87 44 87 
35cca     43 87 43 87 
35cce     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35cd2     43 87 43 87 
35cd6     43 87 43 87 
35cda     43 87 44 87 
35cde     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35ce2     44 87 44 87 
35ce6     5E 87 BC 80 
35cea     FB 80 94 78 
35cee     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
35cf2     BD 78 BC 78 
35cf6     BB 78 BC 78 
35cfa     BB 78 BB 78 
35cfe     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
35d02     BC 78 BB 78 
35d06     BB 78 6B 79 
35d0a     D6 77 AC 87 
35d0e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
35d12     43 87 44 87 
35d16     43 87 43 87 
35d1a     44 87 43 87 
35d1e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
35d22     43 87 44 87 
35d26     43 87 5C 87 
35d2a     E7 80 00 80 
35d2e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
35d32     BC 78 BD 78 
35d36     BC 78 BC 78 
35d3a     BC 78 BB 78 
35d3e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35d42     BC 78 BC 78 
35d46     BB 78 BC 78 
35d4a     BB 78 BC 78 
35d4e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35d52     BB 78 BC 78 
35d56     BC 78 BC 78 
35d5a     BC 78 BC 78 
35d5e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35d62     BC 78 BC 78 
35d66     BC 78 BC 78 
35d6a     A0 78 8D 7B 
35d6e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
35d72     60 87 43 87 
35d76     44 87 44 87 
35d7a     43 87 43 87 
35d7e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
35d82     44 87 43 87 
35d86     43 87 43 87 
35d8a     44 87 73 86 
35d8e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
35d92     51 7B B6 78 
35d96     BC 78 BD 78 
35d9a     BC 78 BC 78 
35d9e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35da2     BB 78 BC 78 
35da6     BD 78 BB 78 
35daa     BC 78 BB 78 
35dae     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35db2     BC 78 BC 78 
35db6     BC 78 BC 78 
35dba     BB 78 BC 78 
35dbe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35dc2     BC 78 BB 78 
35dc6     BB 78 BC 78 
35dca     BC 78 BB 78 
35dce     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
35dd2     22 8C AF 84 
35dd6     48 87 43 87 
35dda     44 87 43 87 
35dde     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
35de2     43 87 42 87 
35de6     43 87 43 87 
35dea     44 87 43 87 
35dee     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
35df2     43 87 43 87 
35df6     44 87 44 87 
35dfa     43 87 43 87 
35dfe     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
35e02     43 87 43 87 
35e06     43 87 43 87 
35e0a     44 87 43 87 
35e0e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
35e12     9F 8B D6 77 
35e16     16 7C B3 78 
35e1a     BC 78 BB 78 
35e1e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
35e22     BB 78 BC 78 
35e26     BB 78 BC 78 
35e2a     BC 78 BC 78 
35e2e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35e32     BC 78 BB 78 
35e36     BB 78 BC 78 
35e3a     BB 78 BC 78 
35e3e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
35e42     BB 78 BB 78 
35e46     BC 78 BC 78 
35e4a     BC 78 BB 78 
35e4e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
35e52     BC 78 BC 78 
35e56     BC 78 BD 78 
35e5a     BB 78 BC 78 
35e5e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
35e62     BC 78 BC 78 
35e66     BC 78 BB 78 
35e6a     BC 78 BC 78 
35e6e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35e72     A8 78 54 7E 
35e76     F4 83 17 82 
35e7a     50 87 43 87 
35e7e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
35e82     44 87 43 87 
35e86     44 87 43 87 
35e8a     43 87 44 87 
35e8e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
35e92     43 87 28 87 
35e96     20 85 CF 7A 
35e9a     70 7D AD 78 
35e9e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
35ea2     BB 78 BC 78 
35ea6     BC 78 BC 78 
35eaa     BB 78 BB 78 
35eae     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
35eb2     BB 78 B2 78 
35eb6     9A 7C CF 7A 
35eba     4A 87 0D 87 
35ebe     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
35ec2     43 87 44 87 
35ec6     43 87 44 87 
35eca     43 87 43 87 
35ece     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
35ed2     44 87 43 87 
35ed6     28 87 51 85 
35eda     11 7A 1E 7D 
35ede     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
35ee2     BC 78 BB 78 
35ee6     BC 78 BC 78 
35eea     BC 78 BC 78 
35eee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
35ef2     BB 78 BC 78 
35ef6     BB 78 BC 78 
35efa     BC 78 BC 78 
35efe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
35f02     BB 78 BC 78 
35f06     BC 78 BC 78 
35f0a     BD 78 BB 78 
35f0e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
35f12     BC 78 BB 78 
35f16     BC 78 BC 78 
35f1a     BC 78 BB 78 
35f1e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35f22     BC 78 BC 78 
35f26     BC 78 BC 78 
35f2a     BB 78 BC 78 
35f2e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35f32     BC 78 BD 78 
35f36     BC 78 BC 78 
35f3a     BC 78 BB 78 
35f3e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35f42     BC 78 BB 78 
35f46     BB 78 BC 78 
35f4a     BC 78 BB 78 
35f4e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35f52     BB 78 BB 78 
35f56     BB 78 BC 78 
35f5a     B6 78 48 7D 
35f5e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
35f62     56 87 43 87 
35f66     42 87 44 87 
35f6a     44 87 43 87 
35f6e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
35f72     43 87 44 87 
35f76     43 87 44 87 
35f7a     4C 87 7E 83 
35f7e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
35f82     F7 78 BC 78 
35f86     BC 78 BB 78 
35f8a     BB 78 BC 78 
35f8e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
35f92     BC 78 BB 78 
35f96     BC 78 BC 78 
35f9a     BB 78 BC 78 
35f9e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
35fa2     BB 78 BC 78 
35fa6     BC 78 BC 78 
35faa     BC 78 BB 78 
35fae     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35fb2     BC 78 BC 78 
35fb6     BC 78 BC 78 
35fba     BC 78 BB 78 
35fbe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35fc2     BC 78 BB 78 
35fc6     BB 78 BC 78 
35fca     BC 78 BB 78 
35fce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
35fd2     BC 78 BC 78 
35fd6     BB 78 BC 78 
35fda     BC 78 BC 78 
35fde     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
35fe2     73 32 00 04 
35fe6     00 00 10 00 
35fea     00 00 00 00 
35fee     00 00 00 00 | atari12 file "atari12.s2"
35ff2     00 6D 00 6D 
35ff6     00 6D 00 6D 
35ffa     00 6D 00 6D 
35ffe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36002     00 6D 00 6D 
36006     00 6D 00 6D 
3600a     00 6D 00 6D 
3600e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36012     00 6D 00 6D 
36016     00 6D 00 6D 
3601a     00 6D 00 6D 
3601e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36022     00 6D 00 6D 
36026     00 6D 00 6D 
3602a     00 6D 00 6D 
3602e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36032     00 6D 00 6D 
36036     00 6D 00 6D 
3603a     00 6D 00 6D 
3603e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
36042     00 6C 00 6C 
36046     00 6C 00 6C 
3604a     00 6C 00 6C 
3604e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36052     00 6C 00 6C 
36056     00 6C 00 6C 
3605a     00 6C 00 6C 
3605e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36062     00 6C 00 6C 
36066     00 6C 00 6C 
3606a     00 6C 00 6C 
3606e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36072     00 6C 00 6C 
36076     00 6C 00 6C 
3607a     00 6C 00 6C 
3607e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36082     00 6C 00 6C 
36086     00 6C 00 6C 
3608a     00 6C 00 6C 
3608e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36092     00 6C 00 6C 
36096     00 6C 00 6C 
3609a     00 6C 00 6C 
3609e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
360a2     00 6C 00 6C 
360a6     00 6C 00 6C 
360aa     00 6C 00 6C 
360ae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
360b2     00 6C 00 6C 
360b6     00 6C 00 6C 
360ba     00 6C 00 6C 
360be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
360c2     00 6C 00 6C 
360c6     00 6C 00 6C 
360ca     00 6C 00 6C 
360ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
360d2     00 6C 00 6C 
360d6     00 6C 00 6C 
360da     00 6C 00 6C 
360de     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
360e2     00 6C 00 6C 
360e6     00 6C 00 6C 
360ea     00 6C 00 6C 
360ee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
360f2     00 6C 00 6B 
360f6     00 6B 00 6B 
360fa     00 6B 00 6B 
360fe     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36102     00 6B 00 6B 
36106     00 6B 00 6B 
3610a     00 6B 00 6B 
3610e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36112     00 6B 00 6B 
36116     00 6B 00 6B 
3611a     00 6B 00 6B 
3611e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36122     00 6B 00 6B 
36126     00 6B 00 6B 
3612a     00 6B 00 6B 
3612e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36132     00 6B 00 6B 
36136     00 6B 00 6B 
3613a     00 6B 00 6B 
3613e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36142     00 6B 00 6B 
36146     00 6B 00 6B 
3614a     00 6B 00 6B 
3614e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36152     00 6B 00 6B 
36156     00 6B 00 6B 
3615a     00 6B 00 6B 
3615e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36162     00 6B 00 6B 
36166     00 6B 00 6B 
3616a     00 6B 00 6B 
3616e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36172     00 6B 00 6B 
36176     00 6B 00 6B 
3617a     00 6B 00 6B 
3617e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
36182     00 6B 00 6B 
36186     00 6B 00 6B 
3618a     00 6A 00 9D 
3618e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
36192     00 9E 00 9E 
36196     00 9E 00 9E 
3619a     00 9E 00 9E 
3619e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
361a2     00 9E 00 9E 
361a6     00 9E 00 9E 
361aa     00 9E 00 9E 
361ae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
361b2     00 9E 00 9E 
361b6     00 9E 00 9E 
361ba     00 9E 00 9E 
361be     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
361c2     00 9E 00 9E 
361c6     00 9E 00 9E 
361ca     00 9E 00 9E 
361ce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
361d2     00 9E 00 9E 
361d6     00 9E 00 9E 
361da     00 9E 00 9E 
361de     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
361e2     00 9E 00 9E 
361e6     00 9E 00 9E 
361ea     00 9E 00 9E 
361ee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
361f2     00 9E 00 9E 
361f6     00 9E 00 9E 
361fa     00 9E 00 9E 
361fe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36202     00 9E 00 9E 
36206     00 9E 00 9E 
3620a     00 9E 00 9E 
3620e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
36212     00 9E 00 9E 
36216     00 9E 00 9E 
3621a     00 9E 00 9E 
3621e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
36222     00 9F 00 9F 
36226     00 9F 00 9F 
3622a     00 9F 00 9F 
3622e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36232     00 9F 00 9F 
36236     00 9F 00 9F 
3623a     00 9F 00 9F 
3623e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36242     00 9F 00 9F 
36246     00 9F 00 9F 
3624a     00 9F 00 9F 
3624e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36252     00 9F 00 9F 
36256     00 9F 00 9F 
3625a     00 9F 00 9F 
3625e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36262     00 9F 00 9F 
36266     00 9F 00 9F 
3626a     00 9F 00 9F 
3626e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36272     00 9F 00 9F 
36276     00 9F 00 9F 
3627a     00 9F 00 9F 
3627e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36282     00 9F 00 9F 
36286     00 9F 00 9F 
3628a     00 9F 00 9F 
3628e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
36292     00 9F 00 9F 
36296     00 9F 00 9F 
3629a     00 9F 00 9F 
3629e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
362a2     00 9F 00 9F 
362a6     00 9F 00 9F 
362aa     00 9F 00 9F 
362ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
362b2     00 9F 00 9F 
362b6     00 9F 00 9F 
362ba     00 9F 00 9F 
362be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
362c2     00 9F 00 9F 
362c6     00 9F 00 9F 
362ca     00 9F 00 9F 
362ce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
362d2     00 9F 00 9F 
362d6     00 9F 00 9F 
362da     00 9F 00 9F 
362de     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
362e2     00 9F 00 9F 
362e6     00 9F 00 A0 
362ea     00 A0 00 A0 
362ee     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
362f2     00 A0 00 A0 
362f6     00 A0 00 A0 
362fa     00 A0 00 A0 
362fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36302     00 A0 00 A0 
36306     00 A0 00 A0 
3630a     00 A0 00 A0 
3630e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36312     00 A0 00 A0 
36316     00 A0 00 A0 
3631a     00 A0 00 A0 
3631e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36322     00 A0 00 A0 
36326     00 A0 00 A0 
3632a     00 A0 00 A0 
3632e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36332     00 A0 00 A0 
36336     00 A0 00 A0 
3633a     00 A0 00 A0 
3633e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36342     00 A0 00 A0 
36346     00 A0 00 A0 
3634a     00 A0 00 A0 
3634e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36352     00 A0 00 A0 
36356     00 A0 00 A0 
3635a     00 A0 00 A0 
3635e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36362     00 A0 00 A0 
36366     00 A0 00 A0 
3636a     00 A0 00 A0 
3636e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36372     00 A0 00 A0 
36376     00 A0 00 A0 
3637a     00 A0 00 A0 
3637e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36382     00 A0 00 A0 
36386     00 A0 00 A0 
3638a     00 A0 00 A0 
3638e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36392     00 A0 00 A0 
36396     00 A0 00 A0 
3639a     00 A0 00 A0 
3639e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
363a2     00 A0 00 A0 
363a6     00 A0 00 A0 
363aa     00 A0 00 A0 
363ae     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
363b2     00 6D 00 6D 
363b6     00 6D 00 6D 
363ba     00 6D 00 6D 
363be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
363c2     00 6D 00 6D 
363c6     00 6D 00 6D 
363ca     00 6D 00 6D 
363ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
363d2     00 6D 00 6D 
363d6     00 6D 00 6D 
363da     00 6D 00 6D 
363de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
363e2     00 6D 00 6D 
363e6     00 6D 00 6D 
363ea     00 6D 00 6D 
363ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
363f2     00 6D 00 6D 
363f6     00 6D 00 6D 
363fa     00 6D 00 6D 
363fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36402     00 6D 00 6D 
36406     00 6D 00 6D 
3640a     00 6D 00 6D 
3640e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36412     00 6D 00 6D 
36416     00 6D 00 6D 
3641a     00 6D 00 6D 
3641e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36422     00 6D 00 6D 
36426     00 6D 00 6D 
3642a     00 6D 00 6D 
3642e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36432     00 6D 00 6D 
36436     00 A0 00 A0 
3643a     00 A0 00 A0 
3643e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36442     00 A0 00 A0 
36446     00 A0 00 A0 
3644a     00 A0 00 A0 
3644e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36452     00 A0 00 A0 
36456     00 A0 00 A0 
3645a     00 A0 00 A0 
3645e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36462     00 A0 00 A0 
36466     00 A0 00 A0 
3646a     00 A0 00 A0 
3646e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36472     00 A0 00 A0 
36476     00 A0 00 A0 
3647a     00 A0 00 A0 
3647e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36482     00 A0 00 A0 
36486     00 A0 00 A0 
3648a     00 A0 00 A0 
3648e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36492     00 A0 00 A0 
36496     00 A0 00 A0 
3649a     00 A0 00 A0 
3649e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
364a2     00 A0 00 A0 
364a6     00 A0 00 A0 
364aa     00 A0 00 A0 
364ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
364b2     00 A0 00 A0 
364b6     00 A0 00 A0 
364ba     00 A0 00 A0 
364be     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
364c2     00 6D 00 6D 
364c6     00 6D 00 6D 
364ca     00 6D 00 6D 
364ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364d2     00 6D 00 6D 
364d6     00 6D 00 6D 
364da     00 6D 00 6D 
364de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364e2     00 6D 00 6D 
364e6     00 6D 00 6D 
364ea     00 6D 00 6D 
364ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
364f2     00 6D 00 6D 
364f6     00 6D 00 6D 
364fa     00 6D 00 6D 
364fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36502     00 6D 00 6D 
36506     00 6D 00 6D 
3650a     00 6D 00 6D 
3650e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36512     00 6D 00 6D 
36516     00 6D 00 6D 
3651a     00 6D 00 6D 
3651e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36522     00 6D 00 6D 
36526     00 6D 00 6D 
3652a     00 6D 00 6D 
3652e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36532     00 6D 00 6D 
36536     00 6D 00 6D 
3653a     00 6D 00 6D 
3653e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36542     00 6D 00 6D 
36546     00 6C 00 A0 
3654a     00 9F 00 A0 
3654e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
36552     00 A0 00 A0 
36556     00 A0 00 A0 
3655a     00 A0 00 A0 
3655e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36562     00 A0 00 A0 
36566     00 A0 00 A0 
3656a     00 A0 00 A0 
3656e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36572     00 A0 00 A0 
36576     00 A0 00 A0 
3657a     00 A0 00 A0 
3657e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36582     00 A0 00 A0 
36586     00 A0 00 A0 
3658a     00 A0 00 A0 
3658e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36592     00 A0 00 A0 
36596     00 A0 00 A0 
3659a     00 A0 00 A0 
3659e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365a2     00 A0 00 A0 
365a6     00 A0 00 A0 
365aa     00 A0 00 A0 
365ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365b2     00 A0 00 A0 
365b6     00 A0 00 A0 
365ba     00 A0 00 A0 
365be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365c2     00 A0 00 A0 
365c6     00 A0 00 A0 
365ca     00 A0 00 A0 
365ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365d2     00 A0 00 A0 
365d6     00 A0 00 A0 
365da     00 A0 00 A0 
365de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365e2     00 A0 00 A0 
365e6     00 A0 00 A0 
365ea     00 A0 00 A0 
365ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
365f2     00 A0 00 A0 
365f6     00 A0 00 A0 
365fa     00 A0 00 A0 
365fe     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
36602     00 A1 00 A1 
36606     00 A1 00 A1 
3660a     00 A1 00 A1 
3660e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36612     00 A1 00 A1 
36616     00 A1 00 A1 
3661a     00 A1 00 A1 
3661e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36622     00 A1 00 A1 
36626     00 A1 00 A1 
3662a     00 A1 00 A1 
3662e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36632     00 A1 00 A1 
36636     00 A1 00 A1 
3663a     00 A1 00 A1 
3663e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36642     00 A1 00 A1 
36646     00 A1 00 A1 
3664a     00 A1 00 A1 
3664e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
36652     00 A1 00 A1 
36656     00 A1 00 A1 
3665a     00 6E 00 6E 
3665e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36662     00 6E 00 6E 
36666     00 6E 00 6E 
3666a     00 6E 00 6E 
3666e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36672     00 6E 00 6E 
36676     00 6E 00 6E 
3667a     00 6E 00 6E 
3667e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36682     00 6E 00 6E 
36686     00 6E 00 6E 
3668a     00 6E 00 6E 
3668e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
36692     00 6E 00 6D 
36696     00 6D 00 6D 
3669a     00 6D 00 6D 
3669e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366a2     00 6D 00 6D 
366a6     00 6D 00 6D 
366aa     00 6D 00 6D 
366ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366b2     00 6D 00 6D 
366b6     00 6D 00 6D 
366ba     00 6D 00 6D 
366be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366c2     00 6D 00 6D 
366c6     00 6D 00 6D 
366ca     00 6D 00 6D 
366ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366d2     00 6D 00 6D 
366d6     00 6D 00 6D 
366da     00 6D 00 6D 
366de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366e2     00 6D 00 6D 
366e6     00 6D 00 6D 
366ea     00 6D 00 6D 
366ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
366f2     00 6D 00 6D 
366f6     00 6D 00 6D 
366fa     00 6D 00 6D 
366fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36702     00 6D 00 6D 
36706     00 6D 00 6D 
3670a     00 6D 00 6D 
3670e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36712     00 6D 00 6D 
36716     00 6D 00 6D 
3671a     00 6D 00 6D 
3671e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36722     00 6D 00 6D 
36726     00 6D 00 6D 
3672a     00 6D 00 6D 
3672e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36732     00 6D 00 6D 
36736     00 6D 00 6D 
3673a     00 6D 00 6D 
3673e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
36742     00 6D 00 6D 
36746     00 6C 00 6C 
3674a     00 6C 00 6C 
3674e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36752     00 6C 00 6C 
36756     00 6C 00 6C 
3675a     00 6C 00 6C 
3675e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
36762     00 6C 00 6C 
36766     00 6C 00 6C 
3676a     00 9D 00 9F 
3676e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
36772     00 9F 00 9F 
36776     00 9F 00 9F 
3677a     00 A0 00 A0 
3677e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36782     00 A0 00 A0 
36786     00 A0 00 A0 
3678a     00 A0 00 A0 
3678e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
36792     00 A0 00 A0 
36796     00 A0 00 A0 
3679a     00 A0 00 A0 
3679e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
367a2     00 A0 00 A0 
367a6     00 A0 00 A0 
367aa     00 A0 00 A0 
367ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
367b2     00 A0 00 A0 
367b6     00 A0 00 A0 
367ba     00 A0 00 A0 
367be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
367c2     00 A0 00 A0 
367c6     00 A0 00 A0 
367ca     00 A0 00 A0 
367ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
367d2     00 A0 00 A0 
367d6     00 A0 00 A0 
367da     00 A0 00 A0 
367de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
367e2     00 A0 00 A0 
367e6     00 A0 00 A0 
367ea     00 A0 00 A0 
367ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
367f2     01 00 00 00 
367f6     00 00 00 00 
367fa     00 00 00 00 
367fe     00 00 00 00 | mouse  file "mouse2.def"
36802     00 00 00 00 
36806     00 00 00 00 
3680a     00 00 00 00 
3680e     00 00 00 00 | 	byte	$00[16]
36812     01 01 00 00 
36816     00 00 00 00 
3681a     00 00 00 00 
3681e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36822     00 00 00 00 
36826     00 00 00 00 
3682a     00 00 00 00 
3682e     00 00 00 00 | 	byte	$00[16]
36832     01 0D 01 00 
36836     00 00 00 00 
3683a     00 00 00 00 
3683e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36842     00 00 00 00 
36846     00 00 00 00 
3684a     00 00 00 00 
3684e     00 00 00 00 | 	byte	$00[16]
36852     01 0D 0D 01 
36856     00 00 00 00 
3685a     00 00 00 00 
3685e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36862     00 00 00 00 
36866     00 00 00 00 
3686a     00 00 00 00 
3686e     00 00 00 00 | 	byte	$00[16]
36872     01 0D 0D 0D 
36876     01 00 00 00 
3687a     00 00 00 00 
3687e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36882     00 00 00 00 
36886     00 00 00 00 
3688a     00 00 00 00 
3688e     00 00 00 00 | 	byte	$00[16]
36892     01 0D 0D 0D 
36896     0D 01 00 00 
3689a     00 00 00 00 
3689e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
368a2     00 00 00 00 
368a6     00 00 00 00 
368aa     00 00 00 00 
368ae     00 00 00 00 | 	byte	$00[16]
368b2     01 0D 0D 0D 
368b6     0D 0D 01 00 
368ba     00 00 00 00 
368be     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
368c2     00 00 00 00 
368c6     00 00 00 00 
368ca     00 00 00 00 
368ce     00 00 00 00 | 	byte	$00[16]
368d2     01 0D 0D 0D 
368d6     0D 0D 0D 01 
368da     00 00 00 00 
368de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
368e2     00 00 00 00 
368e6     00 00 00 00 
368ea     00 00 00 00 
368ee     00 00 00 00 | 	byte	$00[16]
368f2     01 0D 0D 0D 
368f6     0D 0D 0D 0C 
368fa     01 00 00 00 
368fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
36902     00 00 00 00 
36906     00 00 00 00 
3690a     00 00 00 00 
3690e     00 00 00 00 | 	byte	$00[16]
36912     01 0D 0D 0D 
36916     0D 0D 0D 0D 
3691a     0C 01 00 00 
3691e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
36922     00 00 00 00 
36926     00 00 00 00 
3692a     00 00 00 00 
3692e     00 00 00 00 | 	byte	$00[16]
36932     01 0D 0D 0D 
36936     0D 0D 0D 0D 
3693a     0D 0C 01 00 
3693e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
36942     00 00 00 00 
36946     00 00 00 00 
3694a     00 00 00 00 
3694e     00 00 00 00 | 	byte	$00[16]
36952     01 0D 0D 0D 
36956     0D 0D 0D 0D 
3695a     0D 0D 0B 01 
3695e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
36962     00 00 00 00 
36966     00 00 00 00 
3696a     00 00 00 00 
3696e     00 00 00 00 | 	byte	$00[16]
36972     01 0D 0D 0D 
36976     0C 0D 0D 03 
3697a     01 01 01 01 
3697e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
36982     00 00 00 00 
36986     00 00 00 00 
3698a     00 00 00 00 
3698e     00 00 00 00 | 	byte	$00[16]
36992     01 0D 0D 0C 
36996     01 09 0D 03 
3699a     00 00 00 00 
3699e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
369a2     00 00 00 00 
369a6     00 00 00 00 
369aa     00 00 00 00 
369ae     00 00 00 00 | 	byte	$00[16]
369b2     01 0D 0C 01 
369b6     00 01 0D 0B 
369ba     01 00 00 00 
369be     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
369c2     00 00 00 00 
369c6     00 00 00 00 
369ca     00 00 00 00 
369ce     00 00 00 00 | 	byte	$00[16]
369d2     01 0C 01 00 
369d6     00 01 0A 0D 
369da     01 00 00 00 
369de     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
369e2     00 00 00 00 
369e6     00 00 00 00 
369ea     00 00 00 00 
369ee     00 00 00 00 | 	byte	$00[16]
369f2     01 01 00 00 
369f6     00 00 01 0D 
369fa     0B 01 00 00 
369fe     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
36a02     00 00 00 00 
36a06     00 00 00 00 
36a0a     00 00 00 00 
36a0e     00 00 00 00 
36a12     00 00 00 00 
36a16     00 00       | 	byte	$00[22]
36a18     01 0B 0D 01 
36a1c     00 00 00 00 
36a20     00 00 00 00 
36a24     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36a28     00 00 00 00 
36a2c     00 00 00 00 
36a30     00 00 00 00 
36a34     00 00 00 00 
36a38     00          | 	byte	$00[17]
36a39     01 01 00 00 
36a3d     00 00 00 00 
36a41     00 00 00 00 
36a45     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36a49     00 00 00 00 
      ...             
36bed     00 00 00 00 
36bf1     00          | 	byte	$00[425]
36bf2                 | 
36bf2     00 00       |              	org
36bf4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36bf8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36bfc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
36c00 003             | 
36c00 003 00 30 04 F6 |                 mov     psramaddr,#0
36c04 004             | 
36c04 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36c08 005 20 00 00 FF 
36c0c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
36c10 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
36c14 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36c18 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36c1c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
36c20 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
36c24 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
36c28 00d             | 
36c28 00d 20 00 00 FF 
36c2c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
36c30 00f E0 03 00 FF 
36c34 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
36c38 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
36c3c 012             | 
36c3c 012             |                 
36c3c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
36c40 013             |     
36c40 013 01 2C 60 FD |                 cogid 	t11				' get id
36c44 014 00 00 EC FC |                 coginit #0,#0				' start the new program
36c48 015 03 2C 60 FD |                 cogstop t11				' stop the loader
36c4c 016             | 
36c4c 016 00 00 00 00 | t11 		long 	0
36c50 017 00 FF 07 00 | mailbox 	long 	$7FF00
36c54 018 00 00 00 00 | psramaddr 	long 	0
36c58 019 00 00 00 00 | pslockval	long 	0
36c5c 01a 00 00 00 00 | cmd             long    0
36c60 01b 00 00 00 00 | buf1            long    0
36c64 01c 00 40 00 00 | buf2            long    16384
36c68 01d 6C 6C 03 00 | 	long	@@@_dat_ + 12612
36c6c 01e 50 32 20 52 
36c70 01f 65 74 72 6F 
36c74 020 6D 61 63 68 
36c78 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
36c7c 022 42 41 53 49 
36c80 023 43 20 76 65 
36c84 024 72 73 69 6F 
36c88 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
36c8c 026 33 32 00 00 | 	byte	$33, $32, $00, $00
36c90 027             | 	alignl
36c90 027             | _hg010b_spin2_dat_
36c90 027             | 
36c90 027 00 00 00 00 
36c94 028 00 00 00 00 
36c98 029 00 00 00 00 
36c9c 02a 00 00 00 00 
36ca0 02b 00 00 00    | vga_font       file "vgafont.def"
36ca3 02b 7E 81 A5 81 
36ca7 02c 81 BD 99 81 
36cab 02d 81 7E 00 00 
36caf 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
36cb3 02f 7E FF DB FF 
36cb7 030 FF C3 E7 FF 
36cbb 031 FF 7E 00 00 
36cbf 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
36cc3 033 00 36 7F 7F 
36cc7 034 7F 7F 3E 1C 
36ccb 035 08 00 00 00 
36ccf 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
36cd3 037 00 08 1C 3E 
36cd7 038 7F 3E 1C 08 
36cdb 039 00 00 00 00 
36cdf 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
36ce3 03b 18 3C 3C E7 
36ce7 03c E7 E7 18 18 
36ceb 03d 3C 00 00 00 
36cef 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
36cf3 03f 18 3C 7E FF 
36cf7 040 FF 7E 18 18 
36cfb 041 3C 00 00 00 
36cff 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
36d03 043 00 00 00 18 
36d07 044 3C 3C 18 00 
36d0b 045 00 00 00 00 
36d0f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
36d13 047 FF FF FF E7 
36d17 048 C3 C3 E7 FF 
36d1b 049 FF FF FF FF 
36d1f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36d23 04b 00 00 3C 66 
36d27 04c 42 42 66 3C 
36d2b 04d 00 00 00 00 
36d2f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
36d33 04f FF FF C3 99 
36d37 050 BD BD 99 C3 
36d3b 051 FF FF FF FF 
36d3f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
36d43 053 78 70 58 4C 
36d47 054 1E 33 33 33 
36d4b 055 33 1E 00 00 
36d4f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
36d53 057 3C 66 66 66 
36d57 058 66 3C 18 7E 
36d5b 059 18 18 00 00 
36d5f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
36d63 05b FC CC FC 0C 
36d67 05c 0C 0C 0C 0E 
36d6b 05d 0F 07 00 00 
36d6f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
36d73 05f FE C6 FE C6 
36d77 060 C6 C6 C6 E6 
36d7b 061 E7 67 03 00 
36d7f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
36d83 063 18 18 DB 3C 
36d87 064 E7 3C DB 18 
36d8b 065 18 00 00 00 
36d8f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
36d93 067 03 07 0F 1F 
36d97 068 7F 1F 0F 07 
36d9b 069 03 01 00 00 
36d9f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
36da3 06b 60 70 78 7C 
36da7 06c 7F 7C 78 70 
36dab 06d 60 40 00 00 
36daf 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
36db3 06f 18 3C 7E 18 
36db7 070 18 18 7E 3C 
36dbb 071 18 00 00 00 
36dbf 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
36dc3 073 66 66 66 66 
36dc7 074 66 66 66    | 	byte	$66[7]
36dca 075 00 66 66 00 
36dce 076 00 00 00 00 
36dd2 077 00 FE DB DB 
36dd6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36dda 079 D8 D8 D8 00 
36dde 07a 00 00 00 3E 
36de2 07b 63 06 1C 36 
36de6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36dea 07d 30 63 3E 00 
36dee 07e 00 00 00 00 
36df2 07f 00 00 00 00 
36df6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36dfa 081 7F 7F 7F 00 
36dfe 082 00 00 00 00 
36e02 083 00 18 3C 7E 
36e06 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36e0a 085 3C 18 7E 00 
36e0e 086 00 00 00 00 
36e12 087 00 18 3C 7E 
36e16 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36e1a 089 18 18 18 00 
36e1e 08a 00 00 00 00 
36e22 08b 00 18 18 18 
36e26 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36e2a 08d 7E 3C 18 00 
36e2e 08e 00 00 00 00 
36e32 08f 00 00 00 18 
36e36 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
36e3a 091 00 00 00 00 
36e3e 092 00 00 00 00 
36e42 093 00 00 00    | 	byte	$00[11]
36e45 094 0C 06 7F 06 
36e49 095 0C 00 00 00 
36e4d 096 00 00 00 00 
36e51 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e55 098 00 03 03 03 
36e59 099 7F 00 00 00 
36e5d 09a 00 00 00 00 
36e61 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e65 09c 14 36 7F 36 
36e69 09d 14 00 00 00 
36e6d 09e 00 00 00 00 
36e71 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
36e75 0a0 1C 1C 3E 3E 
36e79 0a1 7F 7F 00 00 
36e7d 0a2 00 00 00 00 
36e81 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36e85 0a4 7F 3E 3E 1C 
36e89 0a5 1C 08 00 00 
36e8d 0a6 00 00 00 00 
36e91 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e95 0a8 00 00 00 00 
36e99 0a9 00 00 00 00 
36e9d 0aa 00 00 00 00 
36ea1 0ab 00 00       | 	byte	$00[14]
36ea3 0ab 18 3C 3C 3C 
36ea7 0ac 18 18 18 00 
36eab 0ad 18 18 00 00 
36eaf 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
36eb3 0af 66 24 00 00 
36eb7 0b0 00 00 00 00 
36ebb 0b1 00 00 00 00 
36ebf 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ec3 0b3 00 36 36 7F 
36ec7 0b4 36 36 36 7F 
36ecb 0b5 36 36 00 00 
36ecf 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
36ed3 0b7 3E 63 43 03 
36ed7 0b8 3E 60 60 61 
36edb 0b9 63 3E 18 18 
36edf 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
36ee3 0bb 00 00 43 63 
36ee7 0bc 30 18 0C 06 
36eeb 0bd 63 61 00 00 
36eef 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
36ef3 0bf 1C 36 36 1C 
36ef7 0c0 6E 3B 33 33 
36efb 0c1 33 6E 00 00 
36eff 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
36f03 0c3 0C 0C 0C 06 
36f07 0c4 00 00 00 00 
36f0b 0c5 00 00 00 00 
36f0f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f13 0c7 30 18 0C 0C 
36f17 0c8 0C 0C 0C 0C 
36f1b 0c9 18 30 00 00 
36f1f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
36f23 0cb 0C 18 30 30 
36f27 0cc 30 30 30 30 
36f2b 0cd 18 0C 00 00 
36f2f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
36f33 0cf 00 00 00 66 
36f37 0d0 3C FF 3C 66 
36f3b 0d1 00 00 00 00 
36f3f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
36f43 0d3 00 00 00 18 
36f47 0d4 18 7E 18 18 
36f4b 0d5 00 00 00 00 
36f4f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
36f53 0d7 00 00 00 00 
36f57 0d8 00 00 00 00 | 	byte	$00[8]
36f5b 0d9 18 18 18 0C 
36f5f 0da 00 00 00 00 
36f63 0db 00 00 00 00 
36f67 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
36f6b 0dd 00 00 00 00 
36f6f 0de 00 00 00 00 
36f73 0df 00 00 00 00 
36f77 0e0 00 00 00 00 | 	byte	$00[16]
36f7b 0e1 18 18 00 00 
36f7f 0e2 00 00 00 00 
36f83 0e3 00 00 40 60 
36f87 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36f8b 0e5 03 01 00 00 
36f8f 0e6 00 00 00 00 
36f93 0e7 1C 36 63 63 
36f97 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36f9b 0e9 36 1C 00 00 
36f9f 0ea 00 00 00 00 
36fa3 0eb 18 1C 1E 18 
36fa7 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36fab 0ed 18 7E 00 00 
36faf 0ee 00 00 00 00 
36fb3 0ef 3E 63 60 30 
36fb7 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36fbb 0f1 63 7F 00 00 
36fbf 0f2 00 00 00 00 
36fc3 0f3 3E 63 60 60 
36fc7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36fcb 0f5 63 3E 00 00 
36fcf 0f6 00 00 00 00 
36fd3 0f7 30 38 3C 36 
36fd7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36fdb 0f9 30 78 00 00 
36fdf 0fa 00 00 00 00 
36fe3 0fb 7F 03 03 03 
36fe7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36feb 0fd 63 3E 00 00 
36fef 0fe 00 00 00 00 
36ff3 0ff 1C 06 03 03 
36ff7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36ffb 101 63 3E 00 00 
36fff 102 00 00 00 00 
37003 103 7F 63 60 60 
37007 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3700b 105 0C 0C 00 00 
3700f 106 00 00 00 00 
37013 107 3E 63 63 63 
37017 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3701b 109 63 3E 00 00 
3701f 10a 00 00 00 00 
37023 10b 3E 63 63 63 
37027 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3702b 10d 30 1E 00 00 
3702f 10e 00 00 00 00 
37033 10f 00 00 00 18 
37037 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3703b 111 18 18 00 00 
3703f 112 00 00 00 00 
37043 113 00 00 00 18 
37047 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3704b 115 18 18 0C 00 
3704f 116 00 00 00 00 
37053 117 00 60 30 18 
37057 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3705b 119 30 60 00 00 
3705f 11a 00 00 00 00 
37063 11b 00 00 00 7E 
37067 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3706b 11d 00 00 00 00 
3706f 11e 00 00 00 00 
37073 11f 00          | 	byte	$00[9]
37074 120 06 0C 18 30 
37078 121 60 30 18 0C 
3707c 122 06 00 00 00 
37080 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
37084 124 63 63 30 18 
37088 125 18 18 00 18 
3708c 126 18 00 00 00 
37090 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
37094 128 3E 63 63 7B 
37098 129 7B 7B 3B 03 
3709c 12a 3E 00 00 00 
370a0 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
370a4 12c 1C 36 63 63 
370a8 12d 7F 63 63 63 
370ac 12e 63 00 00 00 
370b0 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
370b4 130 66 66 66 3E 
370b8 131 66 66 66 66 
370bc 132 3F 00 00 00 
370c0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
370c4 134 66 43 03 03 
370c8 135 03 03 43 66 
370cc 136 3C 00 00 00 
370d0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
370d4 138 36 66 66 66 
370d8 139 66 66 66 36 
370dc 13a 1F 00 00 00 
370e0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
370e4 13c 66 46 16 1E 
370e8 13d 16 06 46 66 
370ec 13e 7F 00 00 00 
370f0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
370f4 140 66 46 16 1E 
370f8 141 16 06 06 06 
370fc 142 0F 00 00 00 
37100 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
37104 144 66 43 03 03 
37108 145 7B 63 63 66 
3710c 146 5C 00 00 00 
37110 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
37114 148 63 63 63 7F 
37118 149 63 63 63 63 
3711c 14a 63 00 00 00 
37120 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
37124 14c 18 18 18 18 
37128 14d 18 18 18 18 | 	byte	$18[8]
3712c 14e 3C 00 00 00 
37130 14f 00 00 00 78 
37134 150 30 30 30 30 
37138 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3713c 152 1E 00 00 00 
37140 153 00 00 00 67 
37144 154 66 66 36 1E 
37148 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3714c 156 67 00 00 00 
37150 157 00 00 00 0F 
37154 158 06 06 06 06 
37158 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3715c 15a 7F 00 00 00 
37160 15b 00 00 00 63 
37164 15c 77 7F 7F 6B 
37168 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3716c 15e 63 00 00 00 
37170 15f 00 00 00 63 
37174 160 67 6F 7F 7B 
37178 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3717c 162 63 00 00 00 
37180 163 00 00 00 3E 
37184 164 63 63 63 63 
37188 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3718c 166 3E 00 00 00 
37190 167 00 00 00 3F 
37194 168 66 66 66 3E 
37198 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3719c 16a 0F 00 00 00 
371a0 16b 00 00 00 3E 
371a4 16c 63 63 63 63 
371a8 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
371ac 16e 3E 30 70 00 
371b0 16f 00 00 00 3F 
371b4 170 66 66 66 3E 
371b8 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
371bc 172 67 00 00 00 
371c0 173 00 00 00 3E 
371c4 174 63 63 06 1C 
371c8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
371cc 176 3E 00 00 00 
371d0 177 00 00 00 7E 
371d4 178 7E 5A 18 18 
371d8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
371dc 17a 3C 00 00 00 
371e0 17b 00 00 00 63 
371e4 17c 63 63 63 63 
371e8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
371ec 17e 3E 00 00 00 
371f0 17f 00 00 00 63 
371f4 180 63 63 63 63 
371f8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
371fc 182 08 00 00 00 
37200 183 00 00 00 63 
37204 184 63 63 63 6B 
37208 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3720c 186 36 00 00 00 
37210 187 00 00 00 63 
37214 188 63 36 3E 1C 
37218 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3721c 18a 63 00 00 00 
37220 18b 00 00 00 66 
37224 18c 66 66 66 3C 
37228 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3722c 18e 3C 00 00 00 
37230 18f 00 00 00 7F 
37234 190 63 61 30 18 
37238 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3723c 192 7F 00 00 00 
37240 193 00 00 00 3C 
37244 194 0C 0C 0C 0C 
37248 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3724c 196 3C 00 00 00 
37250 197 00 00 00 00 
37254 198 01 03 07 0E 
37258 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3725c 19a 40 00 00 00 
37260 19b 00 00 00 3C 
37264 19c 30 30 30 30 
37268 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3726c 19e 3C 00 00 00 
37270 19f 1C 36 00 00 
37274 1a0 00 00 00 00 
37278 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3727c 1a2 00 00 00 00 
37280 1a3 00 00 00 00 
37284 1a4 00 00 00 00 
37288 1a5 00 00 00 00 
3728c 1a6 00          | 	byte	$00[17]
3728d 1a6 FF 00 00 0C 
37291 1a7 18 00 00 00 
37295 1a8 00 00 00 00 
37299 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3729d 1aa 00 00 00 00 
372a1 1ab 00 00 00 00 
372a5 1ac 00          | 	byte	$00[9]
372a6 1ac 1E 30 3E 33 
372aa 1ad 33 33 6E 00 
372ae 1ae 00 00 00 00 
372b2 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
372b6 1b0 1E 36 66 66 
372ba 1b1 66 66 3E 00 
372be 1b2 00 00 00 00 
372c2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
372c6 1b4 3E 63 03 03 
372ca 1b5 03 63 3E 00 
372ce 1b6 00 00 00 00 
372d2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
372d6 1b8 3C 36 33 33 
372da 1b9 33 33 6E 00 
372de 1ba 00 00 00 00 
372e2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
372e6 1bc 3E 63 7F 03 
372ea 1bd 03 63 3E 00 
372ee 1be 00 00 00 00 
372f2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
372f6 1c0 0C 1E 0C 0C 
372fa 1c1 0C 0C 1E 00 
372fe 1c2 00 00 00 00 
37302 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
37306 1c4 6E 33 33 33 
3730a 1c5 33 33 3E 30 
3730e 1c6 33 1E 00 00 
37312 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
37316 1c8 36 6E 66 66 
3731a 1c9 66 66 67 00 
3731e 1ca 00 00 00 00 
37322 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
37326 1cc 1C 18 18 18 
3732a 1cd 18 18 3C 00 
3732e 1ce 00 00 00 00 
37332 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
37336 1d0 70 60 60 60 
3733a 1d1 60 60 60 66 
3733e 1d2 66 3C 00 00 
37342 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
37346 1d4 66 36 1E 1E 
3734a 1d5 36 66 67 00 
3734e 1d6 00 00 00 00 
37352 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
37356 1d8 18 18 18 18 
3735a 1d9 18 18       | 	byte	$18[6]
3735c 1da 3C 00 00 00 
37360 1db 00 00 00 00 
37364 1dc 00 00 37 7F 
37368 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3736c 1de 63 00 00 00 
37370 1df 00 00 00 00 
37374 1e0 00 00 3B 66 
37378 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3737c 1e2 66 00 00 00 
37380 1e3 00 00 00 00 
37384 1e4 00 00 3E 63 
37388 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3738c 1e6 3E 00 00 00 
37390 1e7 00 00 00 00 
37394 1e8 00 00 3B 66 
37398 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3739c 1ea 3E 06 06 0F 
373a0 1eb 00 00 00 00 
373a4 1ec 00 00 6E 33 
373a8 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
373ac 1ee 3E 30 30 78 
373b0 1ef 00 00 00 00 
373b4 1f0 00 00 3B 6E 
373b8 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
373bc 1f2 0F 00 00 00 
373c0 1f3 00 00 00 00 
373c4 1f4 00 00 3E 63 
373c8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
373cc 1f6 3E 00 00 00 
373d0 1f7 00 00 00 08 
373d4 1f8 0C 0C 3F 0C 
373d8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
373dc 1fa 38 00 00 00 
373e0 1fb 00 00 00 00 
373e4 1fc 00 00 33 33 
373e8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
373ec 1fe 6E 00 00 00 
373f0 1ff 00 00 00 00 
373f4 200 00 00 63 63 
373f8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
373fc 202 1C 00 00 00 
37400 203 00 00 00 00 
37404 204 00 00 63 63 
37408 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3740c 206 36 00 00 00 
37410 207 00 00 00 00 
37414 208 00 00 63 36 
37418 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3741c 20a 63 00 00 00 
37420 20b 00 00 00 00 
37424 20c 00 00 63 63 
37428 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3742c 20e 7E 60 30 1F 
37430 20f 00 00 00 00 
37434 210 00 00 7F 33 
37438 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3743c 212 7F 00 00 00 
37440 213 00 00 00 70 
37444 214 18 18 18 0E 
37448 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3744c 216 70 00 00 00 
37450 217 00 00 00 18 
37454 218 18 18 18 18 
37458 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3745c 21a 18 00 00 00 
37460 21b 00 00 00 0E 
37464 21c 18 18 18 70 
37468 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3746c 21e 0E 00 00 00 
37470 21f 6E 3B 00 00 
37474 220 00 00 00 00 
37478 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3747c 222 00 00 00 00 
37480 223 00 00 00 00 
37484 224 00 00       | 	byte	$00[10]
37486 224 08 1C 36 63 
3748a 225 63 63 7F 00 
3748e 226 00 00 00 00 
37492 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
37496 228 03 03 03 03 
3749a 229 43 66 3C 18 
3749e 22a 30 1E 00 00 
374a2 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
374a6 22c 33 33 33 33 
374aa 22d 33 33       | 	byte	$33[6]
374ac 22e 6E 00 00 00 
374b0 22f 00 00 60 30 
374b4 230 18 00 3E 63 
374b8 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
374bc 232 3E 00 00 00 
374c0 233 00 00 08 1C 
374c4 234 36 00 1E 30 
374c8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
374cc 236 6E 00 00 00 
374d0 237 00 00 00 00 
374d4 238 33 00 1E 30 
374d8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
374dc 23a 6E 00 00 00 
374e0 23b 00 00 1C 36 
374e4 23c 1C 00 33 33 
374e8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
374ec 23e 6E 00 00 00 
374f0 23f 00 00 60 30 
374f4 240 18 00 3E 63 
374f8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
374fc 242 3E 00 00 00 
37500 243 00 00 00 00 
37504 244 00 00 3E 63 
37508 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3750c 246 3E 18 30 1E 
37510 247 00 00 00 1C 
37514 248 58 78 38 18 
37518 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3751c 24a 3C 00 00 00 
37520 24b 00 00 00 00 
37524 24c 63 00 3E 63 
37528 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3752c 24e 3E 00 00 00 
37530 24f 66 33 00 3E 
37534 250 63 63 63 63 
37538 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3753c 252 3E 00 00 00 
37540 253 00 00 CC 66 
37544 254 33 00 3E 63 
37548 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3754c 256 3E 00 00 00 
37550 257 00 00 18 3C 
37554 258 66 00 1C 18 
37558 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3755c 25a 3C 00 00 00 
37560 25b 30 18 00 7F 
37564 25c 63 61 30 18 
37568 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3756c 25e 7F 00 00 00 
37570 25f 00 63 00 08 
37574 260 1C 36 63 63 
37578 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3757c 262 63 00 00 00 
37580 263 30 18 00 3C 
37584 264 66 43 03 03 
37588 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3758c 266 3C 00 00 00 
37590 267 30 18 00 7F 
37594 268 66 46 16 1E 
37598 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3759c 26a 7F 00 00 00 
375a0 26b 0C 06 00 0F 
375a4 26c 06 06 06 06 
375a8 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
375ac 26e 7F 00 00 00 
375b0 26f 30 18 00 1C 
375b4 270 18 18 18 18 
375b8 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
375bc 272 3C 00 00 00 
375c0 273 00 00 08 1C 
375c4 274 36 00 3E 63 
375c8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
375cc 276 3E 00 00 00 
375d0 277 00 00 00 00 
375d4 278 63 00 3E 63 
375d8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
375dc 27a 3E 00 00 00 
375e0 27b 00 00 00 6F 
375e4 27c 46 26 06 06 
375e8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
375ec 27e 7F 00 00 00 
375f0 27f 00 00 00 6E 
375f4 280 4C 2C 0C 0C 
375f8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
375fc 282 1E 00 00 00 
37600 283 30 18 00 3E 
37604 284 63 63 06 1C 
37608 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3760c 286 3E 00 00 00 
37610 287 00 00 60 30 
37614 288 18 00 3E 63 
37618 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3761c 28a 3E 00 00 00 
37620 28b 00 63 00 3E 
37624 28c 63 63 63 63 
37628 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3762c 28e 3E 00 00 00 
37630 28f 00 63 00 63 
37634 290 63 63 63 63 
37638 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3763c 292 3E 00 00 00 
37640 293 6C 38 00 7E 
37644 294 7E 5A 18 18 
37648 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3764c 296 3C 00 00 00 
37650 297 00 00 60 48 
37654 298 2C 0C 3F 0C 
37658 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3765c 29a 38 00 00 00 
37660 29b 00 00 00 0F 
37664 29c 26 36 1E 0E 
37668 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3766c 29e 7F 00 00 00 
37670 29f 00 00 00 00 
37674 2a0 00 63 36 1C 
37678 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3767c 2a2 00 00 00 00 
37680 2a3 00 00       | 	byte	$00[6]
37682 2a3 36 1C 08 00 
37686 2a4 3E 63 03 03 
3768a 2a5 03 63 3E 00 
3768e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
37692 2a7 30 18 0C 00 
37696 2a8 1E 30 3E 33 
3769a 2a9 33 33 6E 00 
3769e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
376a2 2ab 60 30 18 00 
376a6 2ac 1C 18 18 18 
376aa 2ad 18 18 3C 00 
376ae 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
376b2 2af 60 30 18 00 
376b6 2b0 3E 63 63 63 
376ba 2b1 63 63 3E 00 
376be 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
376c2 2b3 30 18 0C 00 
376c6 2b4 33 33 33 33 
376ca 2b5 33 33 6E 00 
376ce 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
376d2 2b7 00 08 1C 36 
376d6 2b8 63 63 7F 63 
376da 2b9 63 63 63 18 
376de 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
376e2 2bb 00 00 00 00 
376e6 2bc 1E 30 3E 33 
376ea 2bd 33 33 6E 18 
376ee 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
376f2 2bf 00 7F 63 61 
376f6 2c0 30 18 0C 06 
376fa 2c1 43 63 7F 00 
376fe 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
37702 2c3 36 1C 08 00 
37706 2c4 7F 33 18 0C 
3770a 2c5 06 63 7F 00 
3770e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
37712 2c7 00 7F 66 46 
37716 2c8 16 1E 16 06 
3771a 2c9 46 66 7F 18 
3771e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
37722 2cb 00 00 00 00 
37726 2cc 3E 63 7F 03 
3772a 2cd 03 63 3E 18 
3772e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
37732 2cf 00 3C 66 03 
37736 2d0 1F 03 0F 03 
3773a 2d1 03 66 3C 00 
3773e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
37742 2d3 60 30 18 00 
37746 2d4 7F 33 18 0C 
3774a 2d5 06 63 7F 00 
3774e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
37752 2d7 00 3C 66 43 
37756 2d8 03 03 03 03 
3775a 2d9 43 66 3C 00 
3775e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
37762 2db 00 00 00 00 
37766 2dc 3E 63 06 1C 
3776a 2dd 30 63 3E 18 
3776e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
37772 2df 00 00 00 00 
37776 2e0 00 00       | 	byte	$00[6]
37778 2e1 6C 36 1B 36 
3777c 2e2 6C 00 00 00 
37780 2e3 00 00 00 00 
37784 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37788 2e5 1B 36 6C 36 
3778c 2e6 1B 00 00 00 
37790 2e7 88 22 88 22 
37794 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
37798 2e9 88 22 88 22 
3779c 2ea 88 22 88 22 
377a0 2eb AA 55 AA 55 
377a4 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
377a8 2ed AA 55 AA 55 
377ac 2ee AA 55 AA 55 
377b0 2ef BB EE BB EE 
377b4 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
377b8 2f1 BB EE BB EE 
377bc 2f2 BB EE BB EE 
377c0 2f3 18 18 18 18 
377c4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
377c8 2f5 18 18 18 18 
377cc 2f6 18 18 18 18 
377d0 2f7 18 18 18 18 
377d4 2f8 18 18 18    | 	byte	$18[15]
377d7 2f8 1F 18 18 18 
377db 2f9 18 18 18 18 
377df 2fa 18 30 18 00 
377e3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
377e7 2fc 63 7F 63 63 
377eb 2fd 63 63 00 00 
377ef 2fe 00 1C 36 00 
377f3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
377f7 300 63 7F 63 63 
377fb 301 63 63 00 00 
377ff 302 00 36 1C 00 
37803 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
37807 304 1E 16 06 46 
3780b 305 66 7F 00 00 
3780f 306 00 00 00 00 
37813 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
37817 308 1C 30 60 63 
3781b 309 63 3E 18 30 
3781f 30a 1E 6C 6C 6C 
37823 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
37827 30c 6F 6C 6C 6C 
3782b 30d 6C 6C 6C 6C 
3782f 30e 6C 6C 6C 6C 
37833 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37837 310 6C 6C 6C 6C 
3783b 311 6C 6C 6C 6C 
3783f 312 6C          | 	byte	$6c[9]
37840 313 00 00 00 00 
37844 314 00          | 	byte	$00[5]
37845 314 7F 60 6F 6C 
37849 315 6C 6C 6C 6C 
3784d 316 6C 6C 6C 6C 
37851 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37855 318 6F 60 7F 00 
37859 319 00 00 00 00 
3785d 31a 00 00 00 18 
37861 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
37865 31c 61 30 18 0C 
37869 31d 06 43 63 7F 
3786d 31e 00 00 00 00 
37871 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
37875 320 00 7F 33 18 
37879 321 0C 06 63 7F 
3787d 322 00 00 00 00 
37881 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
37885 324 00 00 1F 18 
37889 325 18 18 18 18 
3788d 326 18 18 18 18 
37891 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37895 328 18 18 F8 00 
37899 329 00 00 00 00 
3789d 32a 00 00 00 18 
378a1 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
378a5 32c 18 18 FF 00 
378a9 32d 00 00 00 00 
378ad 32e 00 00 00 00 
378b1 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
378b5 330 00 00 FF 18 
378b9 331 18 18 18 18 
378bd 332 18 18 18 18 
378c1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
378c5 334 18 18 F8 18 
378c9 335 18 18 18 18 
378cd 336 18 18 18 00 
378d1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
378d5 338 00 00 FF 00 
378d9 339 00 00 00 00 
378dd 33a 00 00 00 18 
378e1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
378e5 33c 18 18 FF 18 
378e9 33d 18 18 18 18 
378ed 33e 18 18 18 63 
378f1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
378f5 340 36 63 63 7F 
378f9 341 63 63 63 63 
378fd 342 00 00 00 00 
37901 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
37905 344 00 1E 30 3E 
37909 345 33 33 33 6E 
3790d 346 00 00 00 6C 
37911 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37915 348 EC 0C FC 00 
37919 349 00 00 00 00 
3791d 34a 00 00 00 00 
37921 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37925 34c FC 0C EC 6C 
37929 34d 6C 6C 6C 6C 
3792d 34e 6C 6C 6C 6C 
37931 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37935 350 EF 00 FF 00 
37939 351 00 00 00 00 
3793d 352 00 00 00 00 
37941 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37945 354 FF 00 EF 6C 
37949 355 6C 6C 6C 6C 
3794d 356 6C 6C 6C 6C 
37951 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
37955 358 EC 0C EC 6C 
37959 359 6C 6C 6C 6C 
3795d 35a 6C 6C 6C 00 
37961 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
37965 35c FF 00 FF 00 
37969 35d 00 00 00 00 
3796d 35e 00 00 00 6C 
37971 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
37975 360 EF 00 EF 6C 
37979 361 6C 6C 6C 6C 
3797d 362 6C 6C 6C 00 
37981 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
37985 364 63 3E 63 63 
37989 365 63 63 3E 63 
3798d 366 00 00 00 00 
37991 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
37995 368 30 3C 36 33 
37999 369 33 33 33 6E 
3799d 36a 00 00 00 00 
379a1 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
379a5 36c 66 66 6F 66 
379a9 36d 66 66 36 1F 
379ad 36e 00 00 00 36 
379b1 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
379b5 370 66 66 66 66 
379b9 371 66 66       | 	byte	$66[6]
379bb 371 36 1F 00 00 
379bf 372 00 00 63 00 
379c3 373 7F 66 46 16 
379c7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
379cb 375 66 7F 00 00 
379cf 376 00 6C 38 00 
379d3 377 38 30 30 3C 
379d7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
379db 379 33 6E 00 00 
379df 37a 00 36 1C 00 
379e3 37b 63 67 6F 7F 
379e7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
379eb 37d 63 63 00 00 
379ef 37e 00 30 18 00 
379f3 37f 3C 18 18 18 
379f7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
379fb 381 18 3C 00 00 
379ff 382 00 3C 66 00 
37a03 383 3C 18 18 18 
37a07 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
37a0b 385 18 3C 00 00 
37a0f 386 00 00 00 36 
37a13 387 1C 08 00 3E 
37a17 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
37a1b 389 63 3E 00 00 
37a1f 38a 00 18 18 18 
37a23 38b 18 18 18 18 
37a27 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
37a2b 38d 00 00 00 00 
37a2f 38e 00 00 00 00 
37a33 38f 00 00 00 00 | 	byte	$00[12]
37a37 390 F8 18 18 18 
37a3b 391 18 18 18 18 
37a3f 392 18 FF FF FF 
37a43 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
37a47 394 FF FF FF FF 
37a4b 395 FF FF FF FF 
37a4f 396 FF          | 	byte	$ff[9]
37a50 397 00 00 00 00 
37a54 398 00 00 00    | 	byte	$00[7]
37a57 398 FF FF FF FF 
37a5b 399 FF FF FF FF 
37a5f 39a FF          | 	byte	$ff[9]
37a60 39b 00 00 00 7E 
37a64 39c 7E 5A 18 18 
37a68 39d 18 18 18 18 
37a6c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
37a70 39f 1C 36 1C 63 
37a74 3a0 63 63 63 63 
37a78 3a1 63 63 63 63 
37a7c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37a80 3a3 FF FF FF FF 
37a84 3a4 FF FF FF    | 	byte	$ff[7]
37a87 3a4 00 00 00 00 
37a8b 3a5 00 00 00 00 
37a8f 3a6 00          | 	byte	$00[9]
37a90 3a7 30 18 00 3E 
37a94 3a8 63 63 63 63 
37a98 3a9 63 63 63 63 
37a9c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37aa0 3ab 00 00 00 1E 
37aa4 3ac 33 33 33 1B 
37aa8 3ad 33 63 63 63 
37aac 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
37ab0 3af 1C 36 00 3E 
37ab4 3b0 63 63 63 63 
37ab8 3b1 63 63 63 63 
37abc 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37ac0 3b3 30 18 00 63 
37ac4 3b4 67 6F 7F 7B 
37ac8 3b5 73 63 63 63 
37acc 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
37ad0 3b7 00 00 60 30 
37ad4 3b8 18 00 3B 66 
37ad8 3b9 66 66 66 66 
37adc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37ae0 3bb 00 00 36 1C 
37ae4 3bc 08 00 3B 66 
37ae8 3bd 66 66 66 66 
37aec 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37af0 3bf 36 1C 00 3E 
37af4 3c0 63 63 06 1C 
37af8 3c1 30 60 63 63 
37afc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
37b00 3c3 00 00 36 1C 
37b04 3c4 08 00 3E 63 
37b08 3c5 06 1C 30 63 
37b0c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
37b10 3c7 30 18 00 3F 
37b14 3c8 66 66 66 3E 
37b18 3c9 36 66 66 66 
37b1c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
37b20 3cb 30 18 00 63 
37b24 3cc 63 63 63 63 
37b28 3cd 63 63 63 63 
37b2c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37b30 3cf 00 00 60 30 
37b34 3d0 18 00 3B 6E 
37b38 3d1 66 06 06 06 
37b3c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
37b40 3d3 66 33 00 63 
37b44 3d4 63 63 63 63 
37b48 3d5 63 63 63 63 
37b4c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37b50 3d7 00 00 60 30 
37b54 3d8 18 00 63 63 
37b58 3d9 63 63 63 63 
37b5c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
37b60 3db 30 18 00 66 
37b64 3dc 66 66 66 3C 
37b68 3dd 18 18 18 18 
37b6c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
37b70 3df 00 00 00 08 
37b74 3e0 0C 0C 3F 0C 
37b78 3e1 0C 0C 0C 6C 
37b7c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
37b80 3e3 30 18 00 00 
37b84 3e4 00 00 00 00 
37b88 3e5 00 00 00 00 
37b8c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37b90 3e7 00 00 00 00 
37b94 3e8 00 00 00 00 | 	byte	$00[8]
37b98 3e9 7F 00 00 00 
37b9c 3ea 00 00 00 00 
37ba0 3eb 66 33 00 00 
37ba4 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
37ba8 3ed 00 00 00 00 
37bac 3ee 00 00 00 00 
37bb0 3ef 00 00 00 00 
37bb4 3f0 00 00 00 00 
37bb8 3f1 00 00 00 00 
37bbc 3f2 00          | 	byte	$00[21]
37bbd 3f2 0C 06 3C 36 
37bc1 3f3 1C 00 00 00 
37bc5 3f4 00 00 00 00 
37bc9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37bcd 3f6 00 00 00 63 
37bd1 3f7 3E 00 00 00 
37bd5 3f8 00 00 00 00 
37bd9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37bdd 3fa 00 00 00 00 
37be1 3fb 3E 63 06 1C 
37be5 3fc 36 63 63 36 
37be9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37bed 3fe 00 00 00 00 
37bf1 3ff 00 00 00 00 | 	byte	$00[8]
37bf5 400 18 00 7E 00 
37bf9 401 18 00 00 00 
37bfd 402 00 00 00 00 
37c01 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c05 404 00 00 00 00 
37c09 405 00 00 00 00 | 	byte	$00[8]
37c0d 406 18 30 1E 00 
37c11 407 00 00 1C 36 
37c15 408 36 1C 00 00 
37c19 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37c1d 40a 00 00 00 00 
37c21 40b 63 00 00 00 
37c25 40c 00 00 00 00 
37c29 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c2d 40e 00 00 00 18 
37c31 40f 18 00 00 00 
37c35 410 00 00 00 00 
37c39 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c3d 412 00 00 00 00 
37c41 413 00          | 	byte	$00[5]
37c42 413 CC 66 33 00 
37c46 414 33 33 33 33 
37c4a 415 33 33 6E 00 
37c4e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
37c52 417 00 3F 66 66 
37c56 418 66 3E 36 66 
37c5a 419 66 66 6F 00 
37c5e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
37c62 41b 36 1C 08 00 
37c66 41c 3B 6E 66 06 
37c6a 41d 06 06 0F 00 
37c6e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
37c72 41f 00 00 00 7E 
37c76 420 7E 7E 7E 7E 
37c7a 421 7E 7E 00 00 
37c7e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
37c82 423 00 00 00 00 
37c86 424 00 00 00 00 
37c8a 425 00 00 00 00 
37c8e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37c90 427             | 'vga_font       file "vgafont.def"
37c90 427 00 00 00 00 
      ...             
37cc0 433 00 00 00 00 
37cc4 434 00 00 00    | st_font        file "st4font.def"
37cc7 434 FF FF 00 00 
37ccb 435 00 00 00 00 
37ccf 436 00 18 18 18 
37cd3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37cd7 438 18 18 18 18 
37cdb 439 18 18 18 18 
37cdf 43a 18          | 	byte	$18[9]
37ce0 43b 00 00 00 00 
37ce4 43c 00 00 00    | 	byte	$00[7]
37ce7 43c FF FF 18 18 
37ceb 43d 18 18 18 18 
37cef 43e 18 18 18 18 
37cf3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37cf7 440 FF FF 00 00 
37cfb 441 00 00 00 00 
37cff 442 00 18 18 18 
37d03 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37d07 444 1F 1F 18 18 
37d0b 445 18 18 18 18 
37d0f 446 18 18 18 18 
37d13 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37d17 448 F8 F8 18 18 
37d1b 449 18 18 18 18 
37d1f 44a 18 00 00 00 
37d23 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37d27 44c 1F 1F 18 18 
37d2b 44d 18 18 18 18 
37d2f 44e 18 00 00 00 
37d33 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37d37 450 F8 F8 18 18 
37d3b 451 18 18 18 18 
37d3f 452 18 18 18 18 
37d43 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
37d47 454 1F 1F 00 00 
37d4b 455 00 00 00 00 
37d4f 456 00 18 18 18 
37d53 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37d57 458 F8 F8 00 00 
37d5b 459 00 00 00 00 
37d5f 45a 00 18 18 18 
37d63 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
37d67 45c FF FF 18 18 
37d6b 45d 18 18 18 18 
37d6f 45e 18 00 00 18 
37d73 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
37d77 460 66 7E 7E 66 
37d7b 461 66 66 66 30 
37d7f 462 18 00 00 7E 
37d83 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
37d87 464 3E 06 06 06 
37d8b 465 06 7E 7E 18 
37d8f 466 0C 30 18 3C 
37d93 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
37d97 468 06 06 06 66 
37d9b 469 66 7E 3C 00 
37d9f 46a 00 30 18 66 
37da3 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
37da7 46c 7E 7E 76 76 
37dab 46d 66 66 66 00 
37daf 46e 00 30 18 7C 
37db3 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
37db7 470 1C 38 70 60 
37dbb 471 60 7E 3E 00 
37dbf 472 00 30 18 7E 
37dc3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
37dc7 474 18 0C 0C 06 
37dcb 475 06 7E 7E 00 
37dcf 476 00 18 18 00 
37dd3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
37dd7 478 18 18 0C 0C 
37ddb 479 06 7E 7E 00 
37ddf 47a 00 30 18 3C 
37de3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
37de7 47c 66 66 66 66 
37deb 47d 66          | 	byte	$66[5]
37dec 47e 7E 3C 00 00 
37df0 47f 00 00 06 06 
37df4 480 06 06 16 1E 
37df8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37dfc 482 7E 7E 00 00 
37e00 483 00 00 00 00 
37e04 484 00 3C 7C 60 
37e08 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37e0c 486 7E 7C 30 18 
37e10 487 00 00 00 00 
37e14 488 00 3C 7E 66 
37e18 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37e1c 48a 7E 7C 18 0C 
37e20 48b 00 00 30 18 
37e24 48c 00 3C 3E 06 
37e28 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
37e2c 48e 7E 7C 00 00 
37e30 48f 00 00 30 18 
37e34 490 00 3E 7E 66 
37e38 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
37e3c 492 66 66 00 00 
37e40 493 00 00 30 18 
37e44 494 00 7C 7E 06 
37e48 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
37e4c 496 7E 3E 00 00 
37e50 497 00 00 30 18 
37e54 498 00 7E 7E 30 
37e58 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37e5c 49a 7E 7E 00 00 
37e60 49b 00 00 18 18 
37e64 49c 00 7E 7E 30 
37e68 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37e6c 49e 7E 7E 00 00 
37e70 49f 00 00 30 18 
37e74 4a0 00 3C 7E 66 
37e78 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
37e7c 4a2 7E 3C 00 00 
37e80 4a3 00 00 1C 1C 
37e84 4a4 18 18 38 3C 
37e88 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37e8c 4a6 3C 3C 00 00 
37e90 4a7 00 00 00 00 
37e94 4a8 00 00 00 00 
37e98 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e9c 4aa 00 00 00 00 
37ea0 4ab 00 00       | 	byte	$00[6]
37ea2 4ab 18 18 18 18 
37ea6 4ac 18 18 18 18 | 	byte	$18[8]
37eaa 4ad 00 00 18 18 
37eae 4ae 00 00 00 00 
37eb2 4af 66 66 66 66 
37eb6 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37eba 4b1 00 00 00 00 
37ebe 4b2 00 00 00 00 
37ec2 4b3 00          | 	byte	$00[9]
37ec3 4b3 66 66 FF FF 
37ec7 4b4 66 66 FF FF 
37ecb 4b5 66 66 00 00 
37ecf 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
37ed3 4b7 7C 7E 06 06 
37ed7 4b8 3E 7C 60 60 
37edb 4b9 7E 3E 18 18 
37edf 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
37ee3 4bb 66 30 30 18 
37ee7 4bc 18 0C 0C 66 
37eeb 4bd 66 00 00 00 
37eef 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
37ef3 4bf 66 66 3C 1C 
37ef7 4c0 1C FC FE 66 
37efb 4c1 66 FE FC 00 
37eff 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
37f03 4c3 18 18 18 18 
37f07 4c4 00 00 00 00 
37f0b 4c5 00 00 00 00 
37f0f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
37f13 4c7 18 1C 0C 0C 
37f17 4c8 0C 0C 0C 0C 
37f1b 4c9 1C 18 30 00 
37f1f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
37f23 4cb 18 38 30 30 
37f27 4cc 30 30 30 30 
37f2b 4cd 38 18 0C 00 
37f2f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
37f33 4cf 66 66 3C 3C 
37f37 4d0 FF FF 3C 3C 
37f3b 4d1 66 66 00 00 
37f3f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
37f43 4d3 00 18 18 18 
37f47 4d4 7E 7E 18 18 
37f4b 4d5 18 00 00 00 
37f4f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37f53 4d7 00 00 00 00 
37f57 4d8 00 00       | 	byte	$00[6]
37f59 4d9 18 18 18 18 
37f5d 4da 18          | 	byte	$18[5]
37f5e 4da 0C 04 00 00 
37f62 4db 00 00 00 00 
37f66 4dc 7E 7E 00 00 
37f6a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
37f6e 4de 00 00 00 00 
37f72 4df 00 00 00 00 
37f76 4e0 00 00 00 00 
37f7a 4e1 00          | 	byte	$00[13]
37f7b 4e1 18 18 18 00 
37f7f 4e2 00 00 00 60 
37f83 4e3 60 60 30 30 
37f87 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37f8b 4e5 06 06 06 00 
37f8f 4e6 00 00 00 3C 
37f93 4e7 7E 66 66 66 
37f97 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37f9b 4e9 66 7E 3C 00 
37f9f 4ea 00 00 00 18 
37fa3 4eb 18 1C 1C 18 
37fa7 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37fab 4ed 18 7E 7E 00 
37faf 4ee 00 00 00 3C 
37fb3 4ef 7E 66 66 30 
37fb7 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37fbb 4f1 0C 7E 7E 00 
37fbf 4f2 00 00 00 7E 
37fc3 4f3 7E 30 30 18 
37fc7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37fcb 4f5 66 7E 3C 00 
37fcf 4f6 00 00 00 30 
37fd3 4f7 30 38 38 3C 
37fd7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37fdb 4f9 7E 30 30 00 
37fdf 4fa 00 00 00 7E 
37fe3 4fb 7E 06 06 3E 
37fe7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37feb 4fd 66 7E 3C 00 
37fef 4fe 00 00 00 38 
37ff3 4ff 3C 0E 06 06 
37ff7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37ffb 501 66 7E 3C 00 
37fff 502 00 00 00 7E 
38003 503 7E 60 60 30 
38007 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3800b 505 0C 0C 0C 00 
3800f 506 00 00 00 3C 
38013 507 7E 66 66 3C 
38017 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3801b 509 66 7E 3C 00 
3801f 50a 00 00 00 3C 
38023 50b 7E 66 66 7E 
38027 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3802b 50d 70 3C 1C 00 
3802f 50e 00 00 00 00 
38033 50f 00 00 18 18 
38037 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3803b 511 18 18 18 00 
3803f 512 00 00 00 00 
38043 513 00 00 18 18 
38047 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3804b 515 18 18 18 0C 
3804f 516 04 00 00 00 
38053 517 70 38 1C 0E 
38057 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3805b 519 70 00 00 00 
3805f 51a 00 00 00 00 
38063 51b 00 00 7E 7E 
38067 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3806b 51d 00 00 00 00 
3806f 51e 00 00 00 00 | 	byte	$00[8]
38073 51f 0E 1C 38 70 
38077 520 E0 70 38 1C 
3807b 521 0E 00 00 00 
3807f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
38083 523 7E 66 66 30 
38087 524 30 18 18 18 
3808b 525 00 18 18 00 
3808f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
38093 527 7E 66 66 66 
38097 528 66 36 06 66 
3809b 529 66 7E 3C 00 
3809f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
380a3 52b 3C 7E 66 66 
380a7 52c 66 7E 7E 66 
380ab 52d 66 66 66 00 
380af 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
380b3 52f 7E 66 66 7E 
380b7 530 3E 66 66 66 
380bb 531 66 7E 3E 00 
380bf 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
380c3 533 7E 66 66 06 
380c7 534 06 06 06 66 
380cb 535 66 7E 3C 00 
380cf 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
380d3 537 7E 66 66 66 
380d7 538 66 66 66 66 
380db 539 66 7E 3E 00 
380df 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
380e3 53b 7E 06 06 3E 
380e7 53c 3E 06 06 06 
380eb 53d 06 7E 7E 00 
380ef 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
380f3 53f 7E 06 06 3E 
380f7 540 3E 06 06 06 
380fb 541 06 06 06 00 
380ff 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
38103 543 7E 06 06 76 
38107 544 76 66 66 66 
3810b 545 66 7E 3C 00 
3810f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
38113 547 66 66 66 7E 
38117 548 7E 66 66 66 
3811b 549 66 66 66 00 
3811f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
38123 54b 7E 18 18 18 
38127 54c 18 18 18 18 
3812b 54d 18 7E 7E 00 
3812f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
38133 54f 60 60 60 60 
38137 550 60 60 60    | 	byte	$60[7]
3813a 551 66 66 7E 3C 
3813e 552 00 00 00 00 
38142 553 66 66 36 36 
38146 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3814a 555 66 66 C6 C6 
3814e 556 00 00 00 00 
38152 557 06 06 06 06 
38156 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3815a 559 06 06 7E 7E 
3815e 55a 00 00 00 00 
38162 55b C6 C6 EE EE 
38166 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3816a 55d C6 C6 C6 C6 
3816e 55e 00 00 00 00 
38172 55f 66 66 66 6E 
38176 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3817a 561 76 66 66 66 
3817e 562 00 00 00 00 
38182 563 3C 7E 66 66 
38186 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3818a 565 66 66 7E 3C 
3818e 566 00 00 00 00 
38192 567 3E 7E 66 66 
38196 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3819a 569 06 06 06 06 
3819e 56a 00 00 00 00 
381a2 56b 3C 7E 66 66 
381a6 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
381aa 56d 66 56 3E 6C 
381ae 56e 00 00 00 00 
381b2 56f 3E 7E 66 66 
381b6 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
381ba 571 66 66 C6 C6 
381be 572 00 00 00 00 
381c2 573 7C 7E 06 06 
381c6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
381ca 575 60 60 7E 3E 
381ce 576 00 00 00 00 
381d2 577 7E 7E 18 18 
381d6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
381da 579 18 18 18 18 
381de 57a 00 00 00 00 
381e2 57b 66 66 66 66 
381e6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
381ea 57d 66 66 7E 3C 
381ee 57e 00 00 00 00 
381f2 57f 66 66 66 66 
381f6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
381fa 581 3C 3C 18 18 
381fe 582 00 00 00 00 
38202 583 C6 C6 C6 C6 
38206 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3820a 585 FE EE C6 82 
3820e 586 00 00 00 00 
38212 587 66 66 66 3C 
38216 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3821a 589 3C 66 66 66 
3821e 58a 00 00 00 00 
38222 58b 66 66 66 66 
38226 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3822a 58d 18 18 18 18 
3822e 58e 00 00 00 00 
38232 58f 7E 7E 30 30 
38236 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3823a 591 06 06 7E 7E 
3823e 592 00 00 00 00 
38242 593 3C 3C 0C 0C 
38246 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3824a 595 0C 0C 3C 3C 
3824e 596 00 00 00 00 
38252 597 06 06 0C 0C 
38256 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3825a 599 60 60 C0 C0 
3825e 59a 00 00 00 00 
38262 59b 3C 3C 30 30 
38266 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3826a 59d 30 30 3C 3C 
3826e 59e 00 00 00 00 
38272 59f 18 18 3C 3C 
38276 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3827a 5a1 00 00 00 00 
3827e 5a2 00 00 00 00 
38282 5a3 00 00 00 00 
38286 5a4 00 00 00 00 
3828a 5a5 00 00       | 	byte	$00[18]
3828c 5a6 FE FE 00 00 
38290 5a7 00 00 0C 0C 
38294 5a8 18 18 00 00 
38298 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3829c 5aa 00 00 00 00 
382a0 5ab 00 00 00 00 
382a4 5ac 00          | 	byte	$00[9]
382a5 5ac 3C 7C 60 7C 
382a9 5ad 7E 66 66 7E 
382ad 5ae 7C 00 00 00 
382b1 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
382b5 5b0 3E 7E 66 66 
382b9 5b1 66 66 66 7E 
382bd 5b2 3E 00 00 00 
382c1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
382c5 5b4 3C 3E 06 06 
382c9 5b5 06 06 06 7E 
382cd 5b6 7C 00 00 00 
382d1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
382d5 5b8 7C 7E 66 66 
382d9 5b9 66 66 66 7E 
382dd 5ba 7C 00 00 00 
382e1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
382e5 5bc 3C 7E 66 66 
382e9 5bd 7E 06 06 7E 
382ed 5be 7C 00 00 00 
382f1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
382f5 5c0 18 7E 7E 18 
382f9 5c1 18 18 18 18 
382fd 5c2 18 00 00 00 
38301 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
38305 5c4 7C 7E 66 66 
38309 5c5 66 66 7E 7C 
3830d 5c6 60 7E 3E 00 
38311 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
38315 5c8 3E 7E 66 66 
38319 5c9 66 66 66 66 
3831d 5ca 66 00 00 00 
38321 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
38325 5cc 1C 1C 18 18 
38329 5cd 18 18 18 3C 
3832d 5ce 3C 00 00 00 
38331 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
38335 5d0 30 30 30 30 
38339 5d1 30 30 30 30 
3833d 5d2 30          | 	byte	$30[9]
3833e 5d2 3E 1E 00 00 
38342 5d3 06 06 06 36 
38346 5d4 36 1E 1E 1E 
3834a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3834e 5d6 00 00 00 00 
38352 5d7 1C 1C 18 18 
38356 5d8 18 18 18 18 
3835a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3835e 5da 00 00 00 00 
38362 5db 00 00 00    | 	byte	$00[7]
38365 5dc 6C FE FE D6 
38369 5dd D6 C6 C6 C6 
3836d 5de C6 00 00 00 
38371 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
38375 5e0 3E 7E 66 66 
38379 5e1 66 66 66 66 
3837d 5e2 66 00 00 00 
38381 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
38385 5e4 3C 7E 66 66 
38389 5e5 66 66 66 7E 
3838d 5e6 3C 00 00 00 
38391 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
38395 5e8 3E 7E 66 66 
38399 5e9 66 66 66 7E 
3839d 5ea 3E 06 06 00 
383a1 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
383a5 5ec 7C 7E 66 66 
383a9 5ed 66 66 66 7E 
383ad 5ee 7C 60 60 00 
383b1 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
383b5 5f0 3E 7E 66 06 
383b9 5f1 06 06 06 06 
383bd 5f2 06 00 00 00 
383c1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
383c5 5f4 7C 7E 06 0E 
383c9 5f5 3C 70 60 7E 
383cd 5f6 3E 00 00 00 
383d1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
383d5 5f8 7E 7E 18 18 
383d9 5f9 18 18 18 78 
383dd 5fa 70 00 00 00 
383e1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
383e5 5fc 66 66 66 66 
383e9 5fd 66 66 66    | 	byte	$66[7]
383ec 5fe 7E 7C 00 00 
383f0 5ff 00 00 00 00 
383f4 600 00 66 66 66 
383f8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
383fc 602 18 18 00 00 
38400 603 00 00 00 00 
38404 604 00 C6 C6 D6 
38408 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3840c 606 C6 82 00 00 
38410 607 00 00 00 00 
38414 608 00 66 66 3C 
38418 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3841c 60a 66 66 00 00 
38420 60b 00 00 00 00 
38424 60c 00 66 66 66 
38428 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3842c 60e 7C 60 7E 3E 
38430 60f 00 00 00 00 
38434 610 00 7E 7E 30 
38438 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3843c 612 7E 7E 00 00 
38440 613 00 00 30 18 
38444 614 18 18 18 0C 
38448 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3844c 616 18 30 00 00 
38450 617 00 00 18 18 
38454 618 18 18 18 18 
38458 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3845c 61a 18 18 00 00 
38460 61b 00 00 0C 18 
38464 61c 18 18 18 30 
38468 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3846c 61e 18 0C 00 00 
38470 61f 00 00 6C 7E 
38474 620 36 00 00 00 
38478 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3847c 622 00 00 00 00 
38480 623 00 00 00 00 
38484 624 00          | 	byte	$00[9]
38485 624 18 18 18 18 
38489 625 18 18 00 00 
3848d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
38490 627             | 'amiga_font     file "amigafont.def"
38490 627 00 6C FE FE 
38494 628 7C 38 10 00 
38498 629 18 18 18 F8 
3849c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
384a0 62b C0 C0 C0 C0 
384a4 62c C0 C0 C0 C0 | 	byte	$c0[8]
384a8 62d 18 18 18 1F 
384ac 62e 1F 00 00 00 
384b0 62f 18 18 18 1F 
384b4 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
384b8 631 00 00 00 1F 
384bc 632 1F 18 18 18 
384c0 633 C0 E0 70 38 
384c4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
384c8 635 03 07 0E 1C 
384cc 636 38 70 E0 C0 
384d0 637 80 C0 E0 F0 
384d4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
384d8 639 00 00 00 00 
384dc 63a F0 F0 F0 F0 
384e0 63b 01 03 07 0F 
384e4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
384e8 63d F0 F0 F0 F0 
384ec 63e 00 00 00 00 
384f0 63f 0F 0F 0F 0F 
384f4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
384f8 641 FF FF 00 00 
384fc 642 00 00 00 00 
38500 643 00 00 00 00 
38504 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
38508 645 00 00 00 00 
3850c 646 0F 0F 0F 0F 
38510 647 00 38 38 EE 
38514 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
38518 649 00 00 00 F8 
3851c 64a F8 18 18 18 
38520 64b 00 00 00 FF 
38524 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
38528 64d 18 18 18 FF 
3852c 64e FF 18 18 18 
38530 64f 00 00 3C 7E 
38534 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
38538 651 00 00 00 00 
3853c 652 FF FF FF FF 
38540 653 03 03 03 03 
38544 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
38548 655 00 00 00 FF 
3854c 656 FF 18 18 18 
38550 657 18 18 18 FF 
38554 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
38558 659 0F 0F 0F 0F 
3855c 65a 0F 0F 0F 0F | 	byte	$0f[8]
38560 65b 18 18 18 F8 
38564 65c F8 00 00 00 
38568 65d 1E 06 1E 06 
3856c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
38570 65f 00 18 3C 7E 
38574 660 18 18 18 00 
38578 661 00 18 18 18 
3857c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
38580 663 00 18 0C 7E 
38584 664 0C 18 00 00 
38588 665 00 18 30 7E 
3858c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
38590 667 00 00 00 00 
38594 668 00 00 00 00 
38598 669 00          | 	byte	$00[9]
38599 669 18 18 18 18 
3859d 66a 00 18 00 00 
385a1 66b 66 66 66 00 
385a5 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
385a9 66d 66 FF 66 66 
385ad 66e FF 66 00 18 
385b1 66f 7C 06 3C 60 
385b5 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
385b9 671 66 36 18 0C 
385bd 672 66 62 00 38 
385c1 673 6C 38 1C F6 
385c5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
385c9 675 18 18 18 00 
385cd 676 00 00 00 00 
385d1 677 70 38 18 18 
385d5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
385d9 679 0E 1C 18 18 
385dd 67a 1C 0E 00 00 
385e1 67b 66 3C FF 3C 
385e5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
385e9 67d 18 18 7E 18 
385ed 67e 18 00 00 00 
385f1 67f 00 00 00 00 
385f5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
385f9 681 00 00 7E 00 
385fd 682 00 00 00 00 
38601 683 00 00 00 00 
38605 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
38609 685 60 30 18 0C 
3860d 686 06 02 00 00 
38611 687 3C 66 76 6E 
38615 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
38619 689 18 1C 18 18 
3861d 68a 18 7E 00 00 
38621 68b 3C 66 30 18 
38625 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
38629 68d 7E 30 18 30 
3862d 68e 66 3C 00 00 
38631 68f 30 38 3C 36 
38635 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
38639 691 7E 06 3E 60 
3863d 692 66 3C 00 00 
38641 693 3C 06 3E 66 
38645 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
38649 695 7E 60 30 18 
3864d 696 0C 0C 00 00 
38651 697 3C 66 3C 66 
38655 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
38659 699 3C 66 7C 60 
3865d 69a 30 1C 00 00 
38661 69b 00 18 18 00 
38665 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
38669 69d 00 18 18 00 
3866d 69e 18 18 0C 60 
38671 69f 30 18 0C 18 
38675 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
38679 6a1 00 7E 00 00 
3867d 6a2 7E 00 00 06 
38681 6a3 0C 18 30 18 
38685 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
38689 6a5 3C 66 30 18 
3868d 6a6 00 18 00 00 
38691 6a7 3C 66 76 76 
38695 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
38699 6a9 18 3C 66 66 
3869d 6aa 7E 66 00 00 
386a1 6ab 3E 66 3E 66 
386a5 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
386a9 6ad 3C 66 06 06 
386ad 6ae 66 3C 00 00 
386b1 6af 1E 36 66 66 
386b5 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
386b9 6b1 7E 06 3E 06 
386bd 6b2 06 7E 00 00 
386c1 6b3 7E 06 3E 06 
386c5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
386c9 6b5 7C 06 06 76 
386cd 6b6 66 7C 00 00 
386d1 6b7 66 66 7E 66 
386d5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
386d9 6b9 7E 18 18 18 
386dd 6ba 18 7E 00 00 
386e1 6bb 60 60 60 60 
386e5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
386e9 6bd 66 36 1E 1E 
386ed 6be 36 66 00 00 
386f1 6bf 06 06 06 06 
386f5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
386f9 6c1 C6 EE FE D6 
386fd 6c2 C6 C6 00 00 
38701 6c3 66 6E 7E 7E 
38705 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
38709 6c5 3C 66 66 66 
3870d 6c6 66 3C 00 00 
38711 6c7 3E 66 66 3E 
38715 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
38719 6c9 3C 66 66 66 
3871d 6ca 36 6C 00 00 
38721 6cb 3E 66 66 3E 
38725 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
38729 6cd 3C 06 3C 60 
3872d 6ce 60 3C 00 00 
38731 6cf 7E 18 18 18 
38735 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
38739 6d1 66 66 66 66 
3873d 6d2 66          | 	byte	$66[5]
3873e 6d2 7E 00 00 66 
38742 6d3 66 66 66 3C 
38746 6d4 18 00 00 C6 
3874a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3874e 6d6 C6 00 00 66 
38752 6d7 66 3C 3C 66 
38756 6d8 66 00 00 66 
3875a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3875e 6da 18 00 00 7E 
38762 6db 30 18 0C 06 
38766 6dc 7E 00 00 78 
3876a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3876e 6de 78 00 00 02 
38772 6df 06 0C 18 30 
38776 6e0 60 00 00 1E 
3877a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3877e 6e2 1E 00 00 10 
38782 6e3 38 6C C6 00 
38786 6e4 00 00 00 00 
3878a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3878e 6e6 FF 00 00 18 
38792 6e7 3C 7E 7E 3C 
38796 6e8 18 00 00 00 
3879a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3879e 6ea 7C 00 00 06 
387a2 6eb 06 3E 66 66 
387a6 6ec 3E 00 00 00 
387aa 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
387ae 6ee 3C 00 00 60 
387b2 6ef 60 7C 66 66 
387b6 6f0 7C 00 00 00 
387ba 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
387be 6f2 3C 00 00 70 
387c2 6f3 18 7C 18 18 
387c6 6f4 18 00 00 00 
387ca 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
387ce 6f6 60 3E 00 06 
387d2 6f7 06 3E 66 66 
387d6 6f8 66 00 00 18 
387da 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
387de 6fa 3C 00 00 60 
387e2 6fb 00 60 60 60 
387e6 6fc 60 3C 00 06 
387ea 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
387ee 6fe 66 00 00 1C 
387f2 6ff 18 18 18 18 
387f6 700 3C 00 00 00 
387fa 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
387fe 702 C6 00 00 00 
38802 703 3E 66 66 66 
38806 704 66 00 00 00 
3880a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3880e 706 3C 00 00 00 
38812 707 3E 66 66 3E 
38816 708 06 06 00 00 
3881a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3881e 70a 60 60 00 00 
38822 70b 3E 66 06 06 
38826 70c 06 00 00 00 
3882a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3882e 70e 3E 00 00 18 
38832 70f 7E 18 18 18 
38836 710 70 00 00 00 
3883a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3883e 712 7C 00 00 00 
38842 713 66 66 66 3C 
38846 714 18 00 00 00 
3884a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3884e 716 6C 00 00 00 
38852 717 66 3C 18 3C 
38856 718 66 00 00 00 
3885a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3885e 71a 30 1E 00 00 
38862 71b 7E 30 18 0C 
38866 71c 7E 00 00 18 
3886a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3886e 71e 3C 00 18 18 
38872 71f 18 18 18 18 
38876 720 18 18 00 7E 
3887a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3887e 722 60 00 10 18 
38882 723 1C 1E 1C 18 
38886 724 10 00 08 18 
3888a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3888e 726 08 00       | 	byte	$08, $00
38890 727 00 00 00 00 
38894 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
38895 728 80 00 00 00 
38899 729 00 80 00 00 
3889d 72a 80 80 00 00 
388a1 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
388a5 72c 80 00 80 00 
388a9 72d 00 40 80 00 
388ad 72e AA AA AA 00 
388b1 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
388b5 730 FF 00 00 00 
388b9 731 00 FF 00 00 
388bd 732 FF FF 00 00 
388c1 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
388c5 734 FF 00 FF 00 
388c9 735 00 FF FF 00 
388cd 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
388d0 737 00 00 00 00 
388d4 738 00          | ataripalette   file "ataripalettep2.def"
388d5 738 11 11 11 00 
388d9 739 22 22 22 00 
388dd 73a 33 33 33 00 
388e1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
388e5 73c 55 55 55 00 
388e9 73d 66 66 66 00 
388ed 73e 77 77 77 00 
388f1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
388f5 740 99 99 99 00 
388f9 741 AA AA AA 00 
388fd 742 BB BB BB 00 
38901 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
38905 744 DD DD DD 00 
38909 745 EE EE EE 00 
3890d 746 FF FF FF 00 
38911 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
38915 748 00 14 40 00 
38919 749 00 1E 60 00 
3891d 74a 00 28 80 00 
38921 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
38925 74c 00 3C BF 00 
38929 74d 00 46 DF 00 
3892d 74e 00 50 FF 00 
38931 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
38935 750 39 77 FF 00 
38939 751 55 8A FF 00 
3893d 752 71 9E FF 00 
38941 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
38945 754 AA C5 FF 00 
38949 755 C6 D8 FF 00 
3894d 756 E3 EC FF 00 
38951 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
38955 758 00 00 40 00 
38959 759 00 00 60 00 
3895d 75a 00 00 80 00 
38961 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
38965 75c 00 00 BF 00 
38969 75d 00 00 DF 00 
3896d 75e 00 00 FF 00 
38971 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
38975 760 39 39 FF 00 
38979 761 55 55 FF 00 
3897d 762 71 71 FF 00 
38981 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
38985 764 AA AA FF 00 
38989 765 C6 C6 FF 00 
3898d 766 E3 E3 FF 00 
38991 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
38995 768 20 00 40 00 
38999 769 30 00 60 00 
3899d 76a 40 00 80 00 
389a1 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
389a5 76c 60 00 BF 00 
389a9 76d 70 00 DF 00 
389ad 76e 80 00 FF 00 
389b1 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
389b5 770 9C 39 FF 00 
389b9 771 AA 55 FF 00 
389bd 772 B8 71 FF 00 
389c1 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
389c5 774 D5 AA FF 00 
389c9 775 E3 C6 FF 00 
389cd 776 F1 E3 FF 00 
389d1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
389d5 778 40 00 40 00 
389d9 779 60 00 60 00 
389dd 77a 80 00 80 00 
389e1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
389e5 77c BF 00 BF 00 
389e9 77d DF 00 DF 00 
389ed 77e FF 00 FF 00 
389f1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
389f5 780 FF 39 FF 00 
389f9 781 FF 55 FF 00 
389fd 782 FF 71 FF 00 
38a01 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
38a05 784 FF AA FF 00 
38a09 785 FF C6 FF 00 
38a0d 786 FF E3 FF 00 
38a11 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
38a15 788 40 00 20 00 
38a19 789 60 00 30 00 
38a1d 78a 80 00 40 00 
38a21 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
38a25 78c BF 00 60 00 
38a29 78d DF 00 70 00 
38a2d 78e FF 00 80 00 
38a31 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
38a35 790 FF 39 9C 00 
38a39 791 FF 55 AA 00 
38a3d 792 FF 71 B8 00 
38a41 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
38a45 794 FF AA D5 00 
38a49 795 FF C6 E3 00 
38a4d 796 FF E3 F1 00 
38a51 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
38a55 798 40 00 00 00 
38a59 799 60 00 00 00 
38a5d 79a 80 00 00 00 
38a61 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
38a65 79c BF 00 00 00 
38a69 79d DF 00 00 00 
38a6d 79e FF 00 00 00 
38a71 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
38a75 7a0 FF 39 39 00 
38a79 7a1 FF 55 55 00 
38a7d 7a2 FF 71 71 00 
38a81 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
38a85 7a4 FF AA AA 00 
38a89 7a5 FF C6 C6 00 
38a8d 7a6 FF E3 E3 00 
38a91 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
38a95 7a8 40 10 00 00 
38a99 7a9 60 18 00 00 
38a9d 7aa 80 20 00 00 
38aa1 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
38aa5 7ac BF 30 00 00 
38aa9 7ad DF 38 00 00 
38aad 7ae FF 40 00 00 
38ab1 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
38ab5 7b0 FF 6A 39 00 
38ab9 7b1 FF 80 55 00 
38abd 7b2 FF 95 71 00 
38ac1 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
38ac5 7b4 FF BF AA 00 
38ac9 7b5 FF D5 C6 00 
38acd 7b6 FF EA E3 00 
38ad1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
38ad5 7b8 40 20 00 00 
38ad9 7b9 60 30 00 00 
38add 7ba 80 40 00 00 
38ae1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
38ae5 7bc BF 60 00 00 
38ae9 7bd DF 70 00 00 
38aed 7be FF 80 00 00 
38af1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
38af5 7c0 FF 9C 39 00 
38af9 7c1 FF AA 55 00 
38afd 7c2 FF B8 71 00 
38b01 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
38b05 7c4 FF D5 AA 00 
38b09 7c5 FF E3 C6 00 
38b0d 7c6 FF F1 E3 00 
38b11 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
38b15 7c8 40 30 00 00 
38b19 7c9 60 48 00 00 
38b1d 7ca 80 60 00 00 
38b21 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
38b25 7cc BF 90 00 00 
38b29 7cd DF A8 00 00 
38b2d 7ce FF C0 00 00 
38b31 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
38b35 7d0 FF CE 39 00 
38b39 7d1 FF D5 55 00 
38b3d 7d2 FF DC 71 00 
38b41 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
38b45 7d4 FF EA AA 00 
38b49 7d5 FF F1 C6 00 
38b4d 7d6 FF F8 E3 00 
38b51 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
38b55 7d8 30 40 00 00 
38b59 7d9 48 60 00 00 
38b5d 7da 60 80 00 00 
38b61 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
38b65 7dc 90 BF 00 00 
38b69 7dd A8 DF 00 00 
38b6d 7de C0 FF 00 00 
38b71 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
38b75 7e0 CE FF 39 00 
38b79 7e1 D5 FF 55 00 
38b7d 7e2 DC FF 71 00 
38b81 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
38b85 7e4 EA FF AA 00 
38b89 7e5 F1 FF C6 00 
38b8d 7e6 F8 FF E3 00 
38b91 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
38b95 7e8 00 40 00 00 
38b99 7e9 00 60 00 00 
38b9d 7ea 00 80 00 00 
38ba1 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
38ba5 7ec 00 BF 00 00 
38ba9 7ed 00 DF 00 00 
38bad 7ee 00 FF 00 00 
38bb1 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
38bb5 7f0 39 FF 39 00 
38bb9 7f1 55 FF 55 00 
38bbd 7f2 71 FF 71 00 
38bc1 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
38bc5 7f4 AA FF AA 00 
38bc9 7f5 C6 FF C6 00 
38bcd 7f6 E3 FF E3 00 
38bd1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
38bd5 7f8 00 40 14 00 
38bd9 7f9 00 60 1E 00 
38bdd 7fa 00 80 28 00 
38be1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
38be5 7fc 00 BF 3C 00 
38be9 7fd 00 DF 46 00 
38bed 7fe 00 FF 50 00 
38bf1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
38bf5 800 39 FF 77 00 
38bf9 801 55 FF 8A 00 
38bfd 802 71 FF 9E 00 
38c01 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
38c05 804 AA FF C5 00 
38c09 805 C6 FF D8 00 
38c0d 806 E3 FF EC 00 
38c11 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
38c15 808 00 40 28 00 
38c19 809 00 60 3C 00 
38c1d 80a 00 80 50 00 
38c21 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
38c25 80c 00 BF 78 00 
38c29 80d 00 DF 8C 00 
38c2d 80e 00 FF A0 00 
38c31 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
38c35 810 39 FF B5 00 
38c39 811 55 FF C0 00 
38c3d 812 71 FF CA 00 
38c41 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
38c45 814 AA FF DF 00 
38c49 815 C6 FF EA 00 
38c4d 816 E3 FF F4 00 
38c51 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
38c55 818 00 40 40 00 
38c59 819 00 60 60 00 
38c5d 81a 00 80 80 00 
38c61 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
38c65 81c 00 BF BF 00 
38c69 81d 00 DF DF 00 
38c6d 81e 00 FF FF 00 
38c71 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
38c75 820 39 FF FF 00 
38c79 821 55 FF FF 00 
38c7d 822 71 FF FF 00 
38c81 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
38c85 824 AA FF FF 00 
38c89 825 C6 FF FF 00 
38c8d 826 E3 FF FF 00 
38c91 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
38c95 828 00 28 40 00 
38c99 829 00 3C 60 00 
38c9d 82a 00 50 80 00 
38ca1 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
38ca5 82c 00 78 BF 00 
38ca9 82d 00 8C DF 00 
38cad 82e 00 A0 FF 00 
38cb1 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
38cb5 830 39 B5 FF 00 
38cb9 831 55 C0 FF 00 
38cbd 832 71 CA FF 00 
38cc1 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
38cc5 834 AA DF FF 00 
38cc9 835 C6 EA FF 00 
38ccd 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
38cd0 837             | 
38cd0 837             | '**********************************************************************************
38cd0 837             | '
38cd0 837             | '        Timings and colors definitions
38cd0 837             | '
38cd0 837             | '**********************************************************************************
38cd0 837             | 
38cd0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
38cd0 837 08 00 00 00 
38cd4 838 3C 00 00 00 
38cd8 839 08 00 00 00 
38cdc 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
38ce0 83b 07 00 00 00 
38ce4 83c 04 00 00 00 
38ce8 83d 01 00 00 00 
38cec 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
38cf0 83f 58 02 00 00 
38cf4 840 20 9E 4B 14 
38cf8 841 FB A8 9E 01 
38cfc 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
38d00 843 00 00 00 00 
38d04 844 C0 00 00 00 
38d08 845 00 00 00 00 
38d0c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38d10 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
38d10 847 00 75 C7 97 
38d14 848 27 47 F6 0A 
38d18 849 05 79 CB 9B 
38d1c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
38d20 84b             | 
38d20 84b             | ''--------  Initialization  ----------------------------------------------------------------
38d20 84b             | 
38d20 84b 28 0C 64 FD | hdmi            setq    #6
38d24 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
38d28 84d 28 10 64 FD |                 setq    #8
38d2c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
38d30 84f             | 
38d30 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
38d34 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
38d38 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
38d3c 852 D6 C6 01 F1 |                 add     t1,hbase
38d40 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
38d44 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
38d48 855 7B 0B 80 5F 
38d4c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
38d50 857 66 66 86 FF 
38d54 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
38d58 859             | '
38d58 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
38d5c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
38d60 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
38d64 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
38d68 85d             | 
38d68 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
38d6c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
38d70 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
38d74 860             | 
38d74 860             | ''--------  frame rendering main loop  ---------------------------------------------------
38d74 860             | 
38d74 860 28 06 64 FD | p101            setq 	#3
38d78 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
38d7c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
38d80 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
38d84 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
38d88 865 00 A0 05 F6 |                 mov     dlinum, #0
38d8c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
38d90 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
38d94 868             | 
38d94 868             | 
38d94 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
38d98 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
38d9c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
38da0 86b             |                 
38da0 86b             | 
38da0 86b             | 
38da0 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
38da0 86b             |   
38da0 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
38da4 86c 29 FE 65 3D |          if_nc  setq2   #255
38da8 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
38dac 86e             | 
38dac 86e             | '' -----   up porch (before the picture)
38dac 86e             | 
38dac 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
38db0 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
38db4 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
38db8 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
38dbc 872             |  
38dbc 872             |    
38dbc 872             |  
38dbc 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
38dc0 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
38dc4 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
38dc8 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
38dcc 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
38dd0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
38dd4 878             | 
38dd4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
38dd8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
38ddc 87a 48 00 B0 FD | 		call    #dli
38de0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
38de4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
38de8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
38dec 87e             |                 	
38dec 87e             |                 
38dec 87e             | 
38dec 87e             |  
38dec 87e             | '' ------- the main screen drawing starts here
38dec 87e             | 
38dec 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
38df0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
38df4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
38df8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
38dfc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
38e00 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
38e04 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
38e08 885             |               
38e08 885             | 
38e08 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
38e0c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
38e10 887             | 
38e10 887             | ' ---------------- All visible lines displayed now, start vblank  
38e10 887             | 
38e10 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
38e14 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
38e18 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
38e1c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
38e20 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
38e24 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
38e28 88d             | 
38e28 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
38e28 88d             | 
38e28 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
38e28 88d             | 
38e28 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
38e2c 88e             | 
38e2c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
38e30 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
38e34 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
38e38 891             | 
38e38 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
38e3c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
38e40 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
38e44 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
38e48 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
38e4c 896             | 
38e4c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
38e50 897 DD C6 41 F8 |                 getnib  t1,dl,#0
38e54 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
38e58 899 70 00 90 AD |     if_z        jmp     #preload
38e5c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
38e60 89b 94 00 90 AD |     if_z        jmp     #preload2
38e64 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
38e68 89d 0C 00 90 AD |     if_z        jmp     #p390
38e6c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
38e70 89f 28 00 90 AD |     if_z        jmp     #p391  
38e74 8a0             | 
38e74 8a0 2D 00 64 FD | p308            ret
38e78 8a1             |    
38e78 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
38e7c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
38e80 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
38e84 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
38e88 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
38e8c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
38e90 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
38e94 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
38e98 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
38e9c 8aa             |  
38e9c 8aa             | '' --------  Reload palette. To do 
38e9c 8aa             | 
38e9c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
38ea0 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
38ea4 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
38ea8 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
38eac 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
38eb0 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
38eb4 8b0 70 FF 9F FD |         	jmp     #dli                
38eb8 8b1             |       
38eb8 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
38eb8 8b1             | 
38eb8 8b1             | 
38eb8 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
38eb8 8b1             | 
38eb8 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
38ebc 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
38ec0 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
38ec4 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
38ec8 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
38ecc 8b6             |         
38ecc 8b6             | '' -------------- Preload a line from PSRAM        
38ecc 8b6             |         
38ecc 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
38ed0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
38ed4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
38ed8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
38edc 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
38ee0 8bb             | 
38ee0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
38ee4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
38ee8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
38eec 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
38ef0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
38ef4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
38ef8 8c1             |  
38ef8 8c1             |  
38ef8 8c1             | preload2      '  incmod  dlinum,#3
38ef8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
38efc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
38f00 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
38f04 8c4 28 02 64 FD |                 setq	#1
38f08 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
38f0c 8c6             |                 
38f0c 8c6             | 
38f0c 8c6             | '' -------------- Draw sprites
38f0c 8c6             | 
38f0c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
38f10 8c7 10 5C 0E F5 | 		and t8,#16 wz
38f14 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
38f18 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
38f1c 8ca             | 		
38f1c 8ca             | 
38f1c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
38f20 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
38f24 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
38f28 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
38f2c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
38f30 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
38f34 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
38f38 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
38f3c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
38f40 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
38f44 8d4 01 52 86 F1 |                 sub     sprite_h,#1
38f48 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
38f4c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
38f50 8d7             | 
38f50 8d7             | 
38f50 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
38f54 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
38f58 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
38f5c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
38f60 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
38f64 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
38f68 8dd 00 5E 06 F6 |                 mov 	t9,#0
38f6c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
38f70 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
38f74 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
38f78 8e1             |      
38f78 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
38f7c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
38f80 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
38f84 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
38f88 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
38f8c 8e6             |                 
38f8c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
38f90 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
38f94 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
38f98 8e9             |   		
38f98 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
38f9c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
38fa0 8eb             | 
38fa0 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
38fa4 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
38fa8 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
38fac 8ee             |  
38fac 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
38fb0 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
38fb4 8f0 10 00 90 CD |      if_c 	jmp     #p899		
38fb8 8f1             | 	
38fb8 8f1             | 	
38fb8 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
38fbc 8f2 28 CD 01 F1 | 		add	t4,sprite_w
38fc0 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
38fc4 8f4             | 
38fc4 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
38fc8 8f5             | 
38fc8 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
38fcc 8f6 01 58 86 F1 | 	 	sub     t6,#1
38fd0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
38fd4 8f8             | 
38fd4 8f8 28 58 62 FD |                 setq   	t6
38fd8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
38fdc 8fa 28 5D 02 F6 |                 mov t8,sprite_w
38fe0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
38fe4 8fc 24 00 90 AD |         if_z    jmp #p898
38fe8 8fd             |          
38fe8 8fd             |         
38fe8 8fd 70 5F 06 F6 |                 mov  t9,#368
38fec 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
38ff0 8ff             | 
38ff0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
38ff4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
38ff8 901 FF FF 7F FF 
38ffc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
39000 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
39004 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
39008 905 2D 01 00 F5 |                 and 0-0, t7
3900c 906             |                
3900c 906             | 
3900c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
39010 907 E5 E0 7A FA |                 wmlong 368,t3				
39014 908             |                 
39014 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
39018 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3901c 90a 2D 00 64 FD |                 ret
39020 90b             | 	
39020 90b             | 	
39020 90b             |                
39020 90b             |  
39020 90b             | '' -------------- Graphics line ------------------------------------------------------------
39020 90b             |  
39020 90b             | 
39020 90b             | '' consts and vars
39020 90b             | 
39020 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
39024 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
39028 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3902c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
39030 90f             | 
39030 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
39034 910             | 
39034 910             | '------ these longs will be set by setmode function
39034 910             | 
39034 910 00 00 00 00 | m_bs            long    0        'blanks before sync
39038 911 00 00 00 00 | m_sn            long    0        'sync
3903c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
39040 913 00 00 00 00 | m_vi            long    0        'visible pixels #
39044 914             | 'm_border        long    0        'left/right borders
39044 914 00 00 00 00 | i_upporch       long    0        'up porch lines
39048 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3904c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
39050 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
39054 918 00 00 00 00 | i_totalvis      long    0
39058 919             | 
39058 919             | '-------------------------------------
39058 919             |  
39058 919 00 00 00 00 | linenum         long    0
3905c 91a 00 00 00 00 | frames          long    0
39060 91b 00 00 00 00 | dlinum long 0
39064 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
39068 91d             | 
39068 91d 00 00 00 00 | vblankptr       long    0
3906c 91e 00 00 00 00 | modeptr         long    0
39070 91f 00 00 00 00 | paletteptr      long    0
39074 920 00 00 00 00 | dlptr           long    0
39078 921 01 00 00 00 | hbase           long    1
3907c 922 00 00 00 00 | mailbox         long    0
39080 923 00 00 00 00 | spriteptr          long 0
39084 924             | 
39084 924 00 00 00 00 | cmd             long    0
39088 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3908c 926 00 04 00 00 | buf2            long    1024
39090 927 01 00 00 00 | dlptr2          long    1
39094 928 01 00 00 00 | dl              long    1
39098 929             | 
39098 929 00 00 00 00 | buf1c long 0
3909c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
390a0 92b 01 00 00 00 | framebuf2       long    1
390a4 92c 01 00 00 00 | hsync0          long    1
390a8 92d 01 00 00 00 | hsync1          long    1
390ac 92e             | 
390ac 92e 01 00 00 00 | t1              long    1
390b0 92f 00 00 00 00 | t2 long 0
390b4 930 00 00 00 00 | t3 long 0
390b8 931 00 00 00 00 | t4 long 0
390bc 932             | 
390bc 932 00 00 00 00 | rcnt            long    0  'dl repeat count
390c0 933 00 00 00 00 | rcnt2           long    0
390c4 934 00 00 00 00 | rcnt2a          long    0
390c8 935 00 00 00 00 | roffset         long    0
390cc 936 00 00 00 00 | rdl             long    0  'dl repeat line
390d0 937 00 00 00 00 | dlc             long    0  'dl command
390d4 938             | 
390d4 938 FF FF FF FF | affffffff       long    $ffffffff
390d8 939 00 00 00 00 | sprite1pointer long 0
390dc 93a 00 00 00 00 | sprite1xy      long 0
390e0 93b 00 00 00 00 | sprite1wh      long 0
390e4 93c 00 00 00 00 | sprite2pointer long 0
390e8 93d 00 00 00 00 | sprite2xy      long 0
390ec 93e 00 00 00 00 | sprite2wh      long 0
390f0 93f 00 00 00 00 | sprite3pointer long 0
390f4 940 00 00 00 00 | sprite3xy      long 0
390f8 941 00 00 00 00 | sprite3wh      long 0
390fc 942 00 00 00 00 | sprite4pointer long 0
39100 943 00 00 00 00 | sprite4xy      long 0
39104 944 00 00 00 00 | sprite4wh      long 0
39108 945 00 00 00 00 | sprite5pointer long 0
3910c 946 00 00 00 00 | sprite5xy      long 0
39110 947 00 00 00 00 | sprite5wh      long 0
39114 948 00 00 00 00 | sprite6pointer long 0
39118 949 00 00 00 00 | sprite6xy      long 0
3911c 94a 00 00 00 00 | sprite6wh      long 0
39120 94b 00 00 00 00 | sprite7pointer long 0
39124 94c 00 00 00 00 | sprite7xy      long 0
39128 94d 00 00 00 00 | sprite7wh      long 0
3912c 94e 00 00 00 00 | sprite8pointer long 0
39130 94f 00 00 00 00 | sprite8xy      long 0
39134 950 00 00 00 00 | sprite8wh      long 0
39138 951 00 00 00 00 | sprite9pointer long 0
3913c 952 00 00 00 00 | sprite9xy      long 0
39140 953 00 00 00 00 | sprite9wh      long 0
39144 954 00 00 00 00 | sprite10pointer long 0
39148 955 00 00 00 00 | sprite10xy      long 0
3914c 956 00 00 00 00 | sprite10wh      long 0
39150 957 00 00 00 00 | sprite11pointer long 0
39154 958 00 00 00 00 | sprite11xy      long 0
39158 959 00 00 00 00 | sprite11wh      long 0
3915c 95a 00 00 00 00 | sprite12pointer long 0
39160 95b 00 00 00 00 | sprite12xy      long 0
39164 95c 00 00 00 00 | sprite12wh      long 0
39168 95d 00 00 00 00 | sprite13pointer long 0
3916c 95e 00 00 00 00 | sprite13xy      long 0
39170 95f 00 00 00 00 | sprite13wh      long 0
39174 960 00 00 00 00 | sprite14pointer long 0
39178 961 00 00 00 00 | sprite14xy      long 0
3917c 962 00 00 00 00 | sprite14wh      long 0
39180 963 00 00 00 00 | sprite15pointer long 0
39184 964 00 00 00 00 | sprite15xy      long 0
39188 965 00 00 00 00 | sprite15wh      long 0
3918c 966 00 00 00 00 | sprite16pointer long 0
39190 967 00 00 00 00 | sprite16xy      long 0
39194 968 00 00 00 00 | sprite16wh      long 0
39198 969 00 00 00 00 | sprite17pointer long 0
3919c 96a 00 00 00 00 | sprite17xy      long 0
391a0 96b 00 00 00 00 | sprite17wh      long 0
391a4 96c 00 00 00 00 | sprite18pointer long 0
391a8 96d 00 00 00 00 | sprite18xy      long 0
391ac 96e 00 00 00 00 | sprite18wh      long 0
391b0 96f 00 00 00 00 | spritenum long 0
391b4 970             | 
391b4 970 00 00 00 00 | spriteline long 0
391b8 971 84 03 00 00 | sprite_x long 900
391bc 972 00 00 00 00 | sprite_y long 0
391c0 973 10 00 00 00 | sprite_w long 16
391c4 974 40 00 00 00 | sprite_h long 64
391c8 975 00 00 00 00 | l2 long 0
391cc 976 00 00 00 00 | t5 long 0
391d0 977 00 00 00 00 | t6 long 0
391d4 978 00 00 00 00 | t7 long 0
391d8 979 00 00 00 00 | t8 long 0
391dc 97a 00 00 00 00 | t9 long 0
391e0 97b 00 00 00 00 | preloadaddr long 0
391e4 97c 00 00 00 00 | preloadlineaddr long 0
391e8 97d 00 04 00 00 | a1024 long 1024
391ec 97e             | 
391ec 97e E0 03 00 00 | aa long 992
391f0 97f FF 03 00 00 | a1023 long 1023
391f4 980 00 10 00 00 | a4096 long 4096
391f8 981             |  fit 368
391f8 981             | _psram_spin2_dat_
391f8 981 00 00 00 00 
      ...             
392f0 9bf 00 00 00 00 
392f4 9c0 00 00 00 00 |     listdata long 0[8*8]
392f8 9c1             |             orgh
392f8                 | 
392f8                 | ' driver state
392f8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
392fc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
39300                 | 
39300                 | ' delay profile
39300     07 00 00 00 
39304     00 CF 7B 05 
39308     80 D1 F0 08 
3930c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
39310     80 C4 60 0F 
39314     80 39 7A 12 
39318     40 2D D9 13 
3931c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
39320                 | 
39320                 | ' data to be passed to driver when starting it
39320                 | startupData
39320     00 00 00 00 |     long    0           ' current frequency
39324     00 00 00 00 |     long    FLAGS       ' optional flags for driver
39328     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3932c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
39330     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
39334     40 93 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
39338     C0 93 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3933c     E0 93 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
39340                 | 
39340                 | ' data for memory
39340                 | deviceData
39340                 |     ' 16 bank parameters follow (16MB per bank)
39340     00 00 00 00 
      ...             
39378     00 00 00 00 
3937c     00 00 00 00 |     long    0[16]                               ' banks 0-15
39380                 |     ' 16 banks of pin parameters follow
39380     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
39384     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
39388     FF FF FF FF 
      ...             
393b8     FF FF FF FF 
393bc     FF FF FF FF |     long    -1[14]                              ' banks 2-15
393c0                 | 
393c0                 | ' data for COG polling
393c0                 | qosData 
393c0     00 00 FF FF 
393c4     00 00 FF FF 
393c8     00 00 FF FF 
393cc     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
393d0     00 00 FF FF 
393d4     00 00 FF FF 
393d8     00 00 FF FF 
393dc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
393e0                 |     
393e0                 | ' mailbox storage
393e0                 | 
393e0                 | mailboxes
393e0     00 00 00 00 
      ...             
39438     00 00 00 00 
3943c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
39440                 | 	alignl
39440                 | _psram16drv_spin2_dat_
39440                 |                             orgh
39440     00 00 00 00 
      ...             
39458     00 00 00 00 
3945c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
39460                 | 
39460                 | driver_start
39460                 |                             org
39460 000             | '..................................................................................................
39460 000             | ' Memory layout for COG RAM once operational:
39460 000             | '
39460 000             | '  COG RAM address      Usage
39460 000             | '  ---------------      ----
39460 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
39460 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
39460 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
39460 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
39460 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
39460 000             | '  ~$198-$1F3           State and register variables
39460 000             | '
39460 000             | ' Also during driver COG startup:
39460 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
39460 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
39460 000             | '..................................................................................................
39460 000             |                             
39460 000             | ' Mailbox storage after vector initialization
39460 000             | 
39460 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
39464 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
39468 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3946c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
39470 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
39474 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
39478 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3947c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
39480 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
39484 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
39488 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3948c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
39490 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
39494 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
39498 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3949c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
394a0 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
394a4 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
394a8 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
394ac 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
394b0 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
394b4 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
394b8 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
394bc 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
394c0 018             | 
394c0 018             | ' Mailbox parameter addresses per COG once patched
394c0 018             |                             
394c0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
394c4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
394c8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
394cc 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
394d0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
394d4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
394d8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
394dc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
394e0 020             | 
394e0 020             | '..................................................................................................
394e0 020             | ' Per COG request and state setup and service branching
394e0 020             |         
394e0 020             | cog0                 
394e0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
394e4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
394e8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
394ec 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
394f0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
394f4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
394f8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
394fc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
39500 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
39504 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39508 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3950c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
39510 02c             | cog1                        
39510 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
39514 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
39518 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3951c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
39520 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
39524 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
39528 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3952c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
39530 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
39534 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39538 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3953c 037 33 CA 63 FD |                             execf   request-0               'jump to service
39540 038             | cog2                         
39540 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
39544 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
39548 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3954c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
39550 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
39554 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
39558 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3955c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
39560 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
39564 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39568 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3956c 043 33 CA 63 FD |                             execf   request-0               'jump to service
39570 044             | cog3                        
39570 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
39574 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
39578 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3957c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
39580 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
39584 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
39588 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3958c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
39590 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
39594 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39598 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3959c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
395a0 050             | cog4                        
395a0 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
395a4 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
395a8 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
395ac 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
395b0 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
395b4 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
395b8 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
395bc 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
395c0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
395c4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
395c8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
395cc 05b 33 CA 63 FD |                             execf   request-0               'jump to service
395d0 05c             | cog5                        
395d0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
395d4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
395d8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
395dc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
395e0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
395e4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
395e8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
395ec 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
395f0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
395f4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
395f8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
395fc 067 33 CA 63 FD |                             execf   request-0               'jump to service
39600 068             | cog6                        
39600 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
39604 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
39608 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3960c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
39610 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
39614 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
39618 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3961c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
39620 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
39624 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39628 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3962c 073 33 CA 63 FD |                             execf   request-0               'jump to service
39630 074             | cog7                        
39630 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
39634 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
39638 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3963c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
39640 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
39644 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
39648 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3964c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
39650 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
39654 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
39658 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3965c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
39660 080             |                             fit     128
39660 080             | 
39660 080             |                             fit     128
39660 080             | pad                         long    0[128-$]                'align init code to $80
39660 080             | 
39660 080             | '..................................................................................................
39660 080             | 
39660 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
39660 080             | 
39660 080             | init                        
39660 080             |                             ' get driver scratch long address in hub
39660 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
39664 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
39668 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3966c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
39670 084             |                     
39670 084             |                             ' read in the additional LUT RAM code
39670 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
39674 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
39678 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3967c 087             | 
3967c 087             |                             ' read the startup parameters
3967c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
39680 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
39684 089             | 
39684 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
39684 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
39688 08a             | 
39688 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3968c 08b 01 00 00 5F 
39690 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
39694 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
39698 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3969c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
396a0 090             | 
396a0 090             |                             ' setup data pin modes and data bus pin group in streamer commands
396a0 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
396a4 091 01 00 00 FF 
396a8 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
396ac 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
396b0 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
396b4 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
396b8 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
396bc 097 08 DE 47 F5 |                             or      a, #8
396c0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
396c4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
396c8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
396cc 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
396d0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
396d4 09d 01 DE 07 F1 |                             add     a, #1
396d8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
396dc 09f             |  
396dc 09f             |                             ' setup device control pin states
396dc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
396e0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
396e4 0a1 01 00 00 FF 
396e8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
396ec 0a3             | 
396ec 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
396f0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
396f4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
396f8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
396fc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
39700 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
39704 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
39708 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3970c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
39710 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
39714 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
39718 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3971c 0af             | pinloop
3971c 0af             |                             ' generate minimum CE high time before access
3971c 0af A1 07 00 FF 
39720 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
39724 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
39728 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3972c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
39730 0b4 1F DE 63 FD |                             waitx   a                       'delay
39734 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
39738 0b6             | 
39738 0b6             |                             ' setup the COG mailboxes and addresses 
39738 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3973c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
39740 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
39744 0b9             | 
39744 0b9 28 2E 64 FD |                             setq    #24-1
39748 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3974c 0bb             | 
3974c 0bb             |                             ' setup the polling loop for active COGs 
3974c 0bb 01 C2 63 FD |                             cogid   id
39750 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
39754 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
39758 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3975c 0bf 0A F0 07 F6 |                             mov     ptra, #10
39760 0c0 E1 F1 03 FA |                             mul     ptra, id
39764 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
39768 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3976c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
39770 0c4 03 C2 07 FA |                             mul     id, #3
39774 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
39778 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3977c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
39780 0c8 D8 01 B0 FD |                             call    #reloadcogs
39784 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
39788 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3978c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3978c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
39790 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
39794 0cd 08 04 DC FC |                             rep     #2, #8
39798 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3979c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
397a0 0d0             | 
397a0 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
397a0 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
397a0 0d0 01 C2 63 FD |                             cogid   id
397a4 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
397a8 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
397ac 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
397b0 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
397b4 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
397b8 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
397bc 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
397c0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
397c4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
397c8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
397cc 0db 3F E4 A7 F9 |                             alti    d, #%111_111
397d0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
397d4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
397d8 0de A5 E5 03 F1 |                             add     d, const512
397dc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
397e0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
397e4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
397e8 0e2             |                             
397e8 0e2             |                             ' setup register values for control vector loop setup after we return
397e8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
397ec 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
397f0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
397f4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
397f8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
397fc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
39800 0e8 D0 C3 8F F9 |                             altd    id, #id0
39804 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
39808 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3980c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
39810 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
39814 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
39818 0ee             |  
39818 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3981c 0ef 07 CA 07 F5 |                             and     request, #7
39820 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
39824 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
39828 0f2             |                             fit     $100                    'ensure all init code fits this space
39828 0f2             | 
39828 0f2             |                             fit     $100                    'ensure all init code fits this space
39828 0f2             | 
39828 0f2 00 00 00 00 
      ...             
39858 0fe 00 00 00 00 
3985c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
39860 100             | 
39860 100             | '..................................................................................................
39860 100             | ' Error result handling and COG notification of request completion
39860 100             | 
39860 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
39864 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
39868 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3986c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
39870 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
39874 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
39878 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3987c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
39880 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
39884 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
39888 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3988c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
39890 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
39894 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
39898 10e             | ' Poller re-starts here after a COG is serviced
39898 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3989c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
398a0 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
398a4 111             | ' Main dynamic polling loop repeats until a request arrives
398a4 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
398a8 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
398ac 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
398b0 114             | 
398b0 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
398b4 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
398b8 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
398bc 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
398c0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
398c4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
398c8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
398cc 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
398d0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
398d4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
398d8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
398dc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
398e0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
398e4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
398e8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
398ec 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
398f0 124             | 
398f0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
398f4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
398f8 126             |  
398f8 126             | '..................................................................................................
398f8 126             | ' List handler                               
398f8 126             | 
398f8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
398fc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
39900 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
39904 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
39908 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3990c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
39910 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
39914 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
39918 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3991c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
39920 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
39924 131 33 00 60 FD |                             execf   0-0                     'process the request 
39928 132             | 
39928 132             | '..................................................................................................
39928 132             | ' Restoring per COG state and resuming where we left off
39928 132             | 
39928 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3992c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
39930 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
39934 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
39938 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3993c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
39940 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
39944 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
39948 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3994c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
39950 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
39954 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
39958 13e             |                    
39958 13e             | '..................................................................................................
39958 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
39958 13e             | 
39958 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3995c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
39960 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
39964 141 D0 DF B7 F9 |                             setd    a, #id0
39968 142 D8 DF BF F9 |                             sets    a, #addr1
3996c 143 FE FF FF FF 
39970 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
39974 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
39978 146 3F DE A7 F9 |                             alti    a, #%111_111 
3997c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
39980 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
39984 149 01 E2 63 FD |                             cogid   c
39988 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3998c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
39990 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
39994 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
39998 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3999c 14f 00 E0 03 F6 |                             mov     b, 0-0
399a0 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
399a4 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
399a8 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
399ac 153 0C 00 90 AD |             if_z            jmp     #excluded               
399b0 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
399b4 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
399b8 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
399bc 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
399c0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
399c4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
399c8 15a             | 
399c8 15a             | 'determine priority cogs and build instructions for the polling sequence
399c8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
399cc 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
399d0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
399d4 15d             | 
399d4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
399d8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
399dc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
399e0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
399e4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
399e8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
399ec 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
399f0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
399f4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
399f8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
399fc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
39a00 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
39a04 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
39a08 16a             | endprioloop
39a08 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
39a0c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
39a10 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
39a14 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
39a18 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
39a1c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
39a20 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
39a24 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
39a28 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
39a2c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
39a30 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
39a34 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
39a38 176             | 
39a38 176             | ' populate the round robin COG polling instructions
39a38 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
39a3c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
39a40 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
39a44 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
39a48 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
39a4c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
39a50 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
39a54 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
39a58 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
39a5c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
39a60 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
39a64 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
39a68 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
39a6c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
39a70 184             | '..................................................................................................
39a70 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
39a70 184             | 
39a70 184             | set_latency                                                 '            (a) set latency
39a70 184             | get_latency                                                 '            (b) get latency
39a70 184             | set_burst                                                   '            (c) set burst size of bank
39a70 184             | get_burst                                                   '            (d) get burst size of bank
39a70 184             |                                                             '            (e) dump state
39a70 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
39a74 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
39a78 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
39a7c 187             |                                                             ' | | | | e  account for following AUGS
39a7c 187 04 00 00 FF 
39a80 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
39a84 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
39a88 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
39a8c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
39a90 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
39a94 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
39a98 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
39a9c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
39aa0 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
39aa4 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
39aa8 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
39aac 193             | 
39aac 193             | '..................................................................................................
39aac 193             | ' Misc EXECF code
39aac 193             | 
39aac 193 33 72 63 FD | start_read_exec             execf   newburstr
39ab0 194 33 7C 63 FD | start_write_exec            execf   resumewrites
39ab4 195 33 78 63 FD | continue_read_exec          execf   lockedreads
39ab8 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
39abc 197             | 
39abc 197             | '..................................................................................................
39abc 197             | ' Variables
39abc 197             | 
39abc 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
39ac0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
39ac4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
39ac8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
39acc 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
39ad0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
39ad4 19d             | 
39ad4 19d 00 00 00 80 | xfreq1          long    $80000000
39ad8 19e 00 00 00 40 | xfreq2          long    $40000000
39adc 19f 03 00 00 00 | delay           long    3
39ae0 1a0             | 
39ae0 1a0             | lutcodeaddr                 
39ae0 1a0             | startupparams
39ae0 1a0             | excludedcogs                                    'careful: shared register use!
39ae0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
39ae4 1a1 00 00 00 00 | flags           long    0
39ae8 1a2             | mask                                            'careful: shared register use!
39ae8 1a2 00 00 00 00 | resetmaskA      long    0
39aec 1a3             | limit                                           'careful: shared register use!
39aec 1a3 00 00 00 00 | resetmaskB      long    0
39af0 1a4 00 00 00 00 | datapins        long    0
39af4 1a5             | const512                                        'careful: shared register use!
39af4 1a5 00 00 00 00 | devicelist      long    0
39af8 1a6 00 00 00 00 | coglist         long    0
39afc 1a7 00 00 00 00 | mbox            long    0 
39b00 1a8             | 
39b00 1a8             | clkpin                                          'shared with code patched during init
39b00 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
39b04 1a9             | cspin                                           'shared with code patched during init
39b04 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
39b08 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
39b0c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
39b10 1ac 01 00 00 00 | clkdelay        long    1
39b14 1ad 00 00 00 00 | regdatabus      long    0
39b18 1ae             | 
39b18 1ae 10 00 00 00 | deviceaddr      long    $10
39b1c 1af             | rrcounter
39b1c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
39b20 1b0             | 
39b20 1b0             | ' jump addresses for the per COG handlers
39b20 1b0 20 00 00 00 | cog0_handler    long    cog0
39b24 1b1 2C 00 00 00 | cog1_handler    long    cog1
39b28 1b2 38 00 00 00 | cog2_handler    long    cog2
39b2c 1b3 44 00 00 00 | cog3_handler    long    cog3
39b30 1b4 50 00 00 00 | cog4_handler    long    cog4
39b34 1b5 5C 00 00 00 | cog5_handler    long    cog5
39b38 1b6 68 00 00 00 | cog6_handler    long    cog6
39b3c 1b7 74 00 00 00 | cog7_handler    long    cog7
39b40 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
39b44 1b9             | 
39b44 1b9             | ' EXECF sequences
39b44 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
39b48 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
39b4c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
39b50 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
39b54 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
39b58 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
39b5c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
39b60 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
39b60 1c0             | 
39b60 1c0             | 
39b60 1c0             | ' SKIPF sequences
39b60 1c0             | skiptable
39b60 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
39b64 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
39b68 1c2 00 00 00 00 |                 long    0                      ' read modify write long
39b6c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
39b70 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
39b74 1c5 00 00 00 00 | pattern2        long    0
39b78 1c6 00 00 00 00 | pattern3        long    0
39b7c 1c7 77 02 00 00 | singlelong      long    %1001110111  
39b80 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
39b84 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
39b88 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
39b8c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
39b90 1cc             | 
39b90 1cc             | ' LUT RAM address values
39b90 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
39b94 1cd DD 02 00 00 | continue_read   long    continue_read_lut
39b98 1ce DB 02 00 00 | continue_write  long    continue_write_lut
39b9c 1cf F6 02 00 00 | noread          long    noread_lut
39ba0 1d0             | 
39ba0 1d0 00 00 00 00 | id0             long    0
39ba4 1d1 01 00 00 00 | id1             long    1
39ba8 1d2 02 00 00 00 | id2             long    2
39bac 1d3 03 00 00 00 | id3             long    3
39bb0 1d4 04 00 00 00 | id4             long    4
39bb4 1d5 05 00 00 00 | id5             long    5
39bb8 1d6 06 00 00 00 | id6             long    6
39bbc 1d7 07 00 00 00 | id7             long    7
39bc0 1d8             | 
39bc0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
39bc0 1d8             | 'and COG updates and need to follow immediately after id0-id7
39bc0 1d8 00 00 00 00 | addr1           long    0
39bc4 1d9 00 00 00 00 | hubdata         long    0
39bc8 1da 00 00 00 00 | count           long    0
39bcc 1db 00 00 00 00 | addr2           long    0
39bd0 1dc 00 00 00 00 | total           long    0
39bd4 1dd 00 00 00 00 | offset1         long    0
39bd8 1de 00 00 00 00 | offset2         long    0
39bdc 1df 00 00 00 00 | link            long    0
39be0 1e0             | 
39be0 1e0             | burstwrite                                      'note shared register use during init
39be0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
39be4 1e1 00 00 00 00 | id              long    0
39be8 1e2             | 
39be8 1e2 00 00 00 00 | header          long    0
39bec 1e3 00 00 00 00 | trailer         long    0
39bf0 1e4 00 00 00 00 | cmdaddr         long    0
39bf4 1e5 00 00 00 00 | request         long    0
39bf8 1e6 00 00 00 00 | rrlimit         long    0
39bfc 1e7 00 00 00 00 | pinconfig       long    0
39c00 1e8 00 00 00 00 | clks            long    0
39c04 1e9 00 00 00 00 | resume          long    0
39c08 1ea 00 00 00 00 | orighubsize     long    0
39c0c 1eb 00 00 00 00 | wrclks          long    0
39c10 1ec             | 
39c10 1ec 00 00 00 00 | pattern         long    0
39c14 1ed 00 00 00 00 | hubscratch      long    0
39c18 1ee 00 10 00 00 | val4k           long    4096
39c1c 1ef             | 
39c1c 1ef             | ' temporary general purpose regs
39c1c 1ef 00 00 00 00 | a               long    0
39c20 1f0 00 00 00 00 | b               long    0
39c24 1f1 00 00 00 00 | c               long    0
39c28 1f2 00 00 00 00 | d               long    0
39c2c 1f3             |                 fit     502
39c2c 1f3             | 
39c2c 1f3             |                 fit     502
39c2c 1f3             | 
39c2c 1f3             | '..................................................................................................
39c2c 1f3             | 
39c2c 1f3             |             orgh
39c2c                 | 
39c2c                 | lut_code
39c2c                 | 'HW init code up to 80 longs
39c2c                 | 
39c2c                 | '..................................................................................................
39c2c                 | ' Memory layout for LUT RAM once operational:
39c2c                 | '
39c2c                 | '  LUT RAM address      Usage
39c2c                 | '  ---------------      ----
39c2c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
39c2c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
39c2c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
39c2c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
39c2c                 | '
39c2c                 | ' Also during driver COG startup:
39c2c                 | ' $230-$24F is used for HW init setup
39c2c                 | ' $250-$26F is used as temporary vector storage 
39c2c                 | '..................................................................................................
39c2c                 | 
39c2c                 |                 org $230    
39c2c 230             | 
39c2c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
39c2c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
39c30 231 24 16 60 FD |                             pollxfi
39c34 232 FF AA 2A FF 
39c38 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
39c3c 234 28 00 B0 FD |                             call    #sendqspi
39c40 235 07 F8 07 FF 
39c44 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
39c48 237 28 00 B0 FD |                             call    #sendspi
39c4c 238 F8 07 78 FF 
39c50 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
39c54 23a 1C 00 B0 FD |                             call    #sendspi
39c58 23b 7F 78 78 FF 
39c5c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
39c60 23d 10 00 B0 FD |                             call    #sendspi 
39c64 23e 2D 00 64 FD |                             ret
39c68 23f             | 
39c68 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
39c6c 240 32 0C 64 FD |                             skipf   #%110
39c70 241 9C EF 03 F6 |                             mov     pb, xsendimm
39c74 242             | 
39c74 242 10 D0 07 F6 | sendspi                     mov     clks, #16
39c78 243 97 EF 03 F6 |                             mov     pb, ximm8lut
39c7c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
39c80 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
39c84 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
39c88 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
39c8c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
39c90 249 50 48 63 FD |                             fltl    datapins                'float data bus
39c94 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
39c98 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
39c9c 24c             | 
39c9c 24c 00 00 00 00 
39ca0 24d 00 00 00 00 
39ca4 24e 00 00 00 00 
39ca8 24f 00 00 00 00 |                 long    0[$270-32-$]
39cac 250             |                 fit     $270-32  ' keep room for 32 vector longs
39cac 250             |     
39cac 250             |                 fit     $270-32  ' keep room for 32 vector longs
39cac 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
39cac 250             | rw_vect ' PSRAM jump vectors
39cac 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
39cb0 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
39cb4 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
39cb8 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
39cbc 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
39cc0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
39cc4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
39cc8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
39ccc 258             | ro_vect ' R/O PSRAM jump vectors
39ccc 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
39cd0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
39cd4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
39cd8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
39cdc 25c 00 01 00 00 |                 long    unsupported
39ce0 25d 00 01 00 00 |                 long    unsupported
39ce4 25e 00 01 00 00 |                 long    unsupported
39ce8 25f 00 01 00 00 |                 long    unsupported
39cec 260             | ctrl_vect ' Control jump vectors
39cec 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
39cf0 261 00 01 00 00 |                 long    unsupported
39cf4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
39cf8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
39cfc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
39d00 265 00 01 00 00 |                 long    unsupported
39d04 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
39d08 267 3E 01 00 00 |                 long    reconfig 
39d0c 268             | no_vect ' Invalid bank jump vectors
39d0c 268 01 01 00 00 |                 long    invalidbank
39d10 269 01 01 00 00 |                 long    invalidbank
39d14 26a 01 01 00 00 |                 long    invalidbank
39d18 26b 01 01 00 00 |                 long    invalidbank
39d1c 26c 01 01 00 00 |                 long    invalidbank
39d20 26d 01 01 00 00 |                 long    invalidbank
39d24 26e 01 01 00 00 |                 long    invalidbank
39d28 26f 01 01 00 00 |                 long    invalidbank
39d2c 270             |                 fit     $270
39d2c 270             | 
39d2c 270             |                 fit     $270
39d2c 270             | '..................................................................................................
39d2c 270             | ' PSRAM READS
39d2c 270             |                                                             ' a b c d e f
39d2c 270             |                                                             ' B W L B R L  (a) byte read
39d2c 270             |                                                             ' Y O O U E O  (b) word read
39d2c 270             |                                                             ' T R N R S C  (c) long read
39d2c 270             |                                                             ' E D G S U K  (d) new burst read
39d2c 270             |                                                             '       T M E  (e) resumed sub-burst
39d2c 270             |                                                             '         E D  (f) locked sub-burst
39d2c 270             | 
39d2c 270             | 
39d2c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
39d30 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
39d34 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
39d38 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
39d3c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
39d40 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
39d44 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
39d48 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
39d4c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
39d50 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
39d54 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
39d58 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
39d5c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
39d60 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
39d64 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
39d68 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
39d6c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
39d70 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
39d74 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
39d78 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
39d7c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
39d80 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
39d84 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
39d88 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
39d8c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
39d90 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
39d94 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
39d98 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
39d9c 28c             | 
39d9c 28c             |                             ' fall through to read bursts
39d9c 28c             |                         
39d9c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
39d9c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
39da0 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
39da4 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
39da8 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
39dac 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
39db0 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
39db4 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
39db8 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
39dbc 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
39dc0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
39dc4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
39dc8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
39dcc 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
39dd0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
39dd4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
39dd8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
39ddc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
39de0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
39de4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
39de8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
39dec 2a0 E8 D1 03 F1 |                             add     clks, clks
39df0 2a1             | readcommon
39df0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
39df4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
39df8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
39dfc 2a4             | 
39dfc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
39e00 2a5 69 C8 63 FD |                             rev     cmdaddr
39e04 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
39e08 2a7 61 C8 63 FD |                             mergeb  cmdaddr
39e0c 2a8             | 
39e0c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
39e10 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
39e14 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
39e14 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
39e18 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
39e1c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
39e20 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
39e24 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
39e24 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
39e28 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
39e2c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
39e30 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
39e34 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
39e38 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
39e3c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
39e3c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
39e40 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
39e44 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
39e48 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
39e4c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
39e50 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
39e54 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
39e58 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
39e5c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
39e60 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
39e64 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
39e68 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
39e6c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
39e70 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
39e74 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
39e74 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
39e78 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
39e7c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
39e80 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
39e84 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
39e88 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
39e8c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
39e90 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
39e94 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
39e98 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
39e9c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
39ea0 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
39ea4 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
39ea8 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
39eac 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
39eb0 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
39eb4 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
39eb8 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
39ebc 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
39ec0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
39ec4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
39ec8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
39ecc 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
39ed0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
39ed4 2da 10 03 90 FD |                             jmp     #writecommon
39ed8 2db             | 
39ed8 2db             | '..................................................................................................
39ed8 2db             | ' Burst continuation testing
39ed8 2db             | 
39ed8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
39edc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
39ee0 2dd             | continue_read_lut          
39ee0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
39ee4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
39ee8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
39eec 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
39ef0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
39ef4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
39ef8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
39efc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
39f00 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
39f04 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
39f08 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
39f0c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
39f10 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
39f14 2ea             | 
39f14 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
39f18 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
39f1c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
39f20 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
39f24 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
39f28 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
39f2c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
39f30 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
39f34 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
39f38 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
39f3c 2f4 2A 1C 66 0D |             _ret_           push    #poller
39f40 2f5             | 
39f40 2f5             | 
39f40 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
39f44 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
39f44 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
39f48 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
39f4c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
39f50 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
39f54 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
39f58 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
39f5c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
39f60 2fd 2D 00 64 FD |                             ret                             ' | continue processing
39f64 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
39f68 2ff             | '..................................................................................................
39f68 2ff             | ' Completion of requests
39f68 2ff             | 
39f68 2ff             | complete_rw_lut             
39f68 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
39f6c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
39f70 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
39f74 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
39f78 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
39f7c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
39f80 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
39f84 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
39f88 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
39f8c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
39f90 309 32 62 64 AD |             if_z            skipf   #%110001
39f94 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
39f98 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
39f9c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
39fa0 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
39fa4 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
39fa8 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
39fac 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
39fb0 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
39fb4 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
39fb8 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
39fbc 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
39fc0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
39fc4 316             |                                                             ' skipcase (a) gfx copy to/from hub
39fc4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
39fc4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
39fc4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
39fc8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
39fcc 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
39fd0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
39fd4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
39fd8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
39fdc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
39fe0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
39fe4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
39fe8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
39fec 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
39ff0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
39ff4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
39ff8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
39ffc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3a000 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3a004 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3a008 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3a00c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3a010 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3a014 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3a018 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3a01c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3a020 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3a024 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3a028 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3a02c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3a030 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3a034 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3a038 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3a03c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3a040 335 DF B7 03 A6 |             if_z            mov     addr2, link
3a044 336 34 FF 9F AD |             if_z            jmp     #checknext
3a048 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3a04c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3a050 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3a054 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3a058 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3a05c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3a060 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3a064 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3a068 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3a06c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3a070 341             | 
3a070 341             | '..................................................................................................
3a070 341             | ' PSRAM WRITES
3a070 341             |                                                             '  a b c d e f g h
3a070 341             | 
3a070 341             |                                                             '  B W L F B R L L (a) byte write(s)
3a070 341             |                                                             '  Y O O I U E O O (b) word write(s)
3a070 341             |                                                             '  T R N L R S C C (c) long write(s)
3a070 341             |                                                             '  E D G L S U K K (d) resumed fill
3a070 341             |                                                             '          T M E E (e) new burst write
3a070 341             |                                                             '            E D D (f) resumed burst
3a070 341             |                                                             '              F B (g) locked fill
3a070 341             |                                                             '              I U (h) locked burst write
3a070 341             |                                                             '              L R 
3a070 341             |                                                             '              L S 
3a070 341             |                                                             '                T 
3a070 341             | 
3a070 341             | w_single                   
3a070 341             | w_fill_cont           
3a070 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3a074 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3a078 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3a07c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3a080 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3a084 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3a088 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3a08c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3a090 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3a094 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3a098 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3a09c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3a0a0 34d             |                ' disable call to r_resume_burst for single longs when z=0
3a0a0 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3a0a4 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3a0a8 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3a0ac 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3a0b0 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3a0b4 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3a0b8 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3a0bc 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3a0c0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3a0c4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3a0c8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3a0cc 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3a0d0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3a0d4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3a0d8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3a0dc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3a0e0 35d             |         
3a0e0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3a0e0 35d             |             '
3a0e0 35d             |             '  At least one of these 3 optional components will be sent
3a0e0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3a0e0 35d             |             '     body - N x full longs of data
3a0e0 35d             |             '     trailer - last partial long of data
3a0e0 35d             |             '
3a0e0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3a0e0 35d             |             '
3a0e0 35d             |             'Case    Type                           Sends
3a0e0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3a0e0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3a0e0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3a0e0 35d             |             ' 4)     Multiple long fill             body only
3a0e0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3a0e0 35d             | 
3a0e0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3a0e0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3a0e4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3a0e8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3a0ec 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3a0f0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3a0f4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3a0f8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3a0fc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3a100 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3a104 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3a108 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3a10c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3a110 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3a114 36a             |                             
3a114 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3a118 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3a11c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3a120 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3a124 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3a128 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3a12c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3a130 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3a134 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3a138 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3a13c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3a140 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3a144 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3a148 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3a14c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3a150 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3a154 37a             | 
3a154 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3a158 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3a15c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3a160 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3a164 37e             |                  
3a164 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3a168 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3a16c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3a170 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3a174 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3a178 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3a17c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3a180 385             | 
3a180 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3a184 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3a188 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3a18c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3a190 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3a194 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3a198 38b             | 
3a198 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3a198 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3a19c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3a1a0 38d 2A B0 63 FD |                             push    addr1                   'save address
3a1a4 38e             | 
3a1a4 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3a1a4 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3a1a8 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3a1ac 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3a1b0 391             |             
3a1b0 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3a1b4 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3a1b8 393 2B B0 63 FD |                             pop     addr1                   'restore address
3a1bc 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3a1c0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3a1c4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3a1c8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3a1cc 398             | 
3a1cc 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3a1d0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3a1d4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3a1d8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3a1dc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3a1e0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3a1e4 39e             | 
3a1e4 39e             |                             'trailer is done
3a1e4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3a1e8 39f             | 
3a1e8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3a1ec 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3a1f0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3a1f4 3a2             | 
3a1f4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3a1f8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3a1fc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3a200 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3a204 3a6             |                             
3a204 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3a208 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3a20c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3a210 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3a214 3aa             |                                                          
3a214 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3a218 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3a21c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3a220 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3a224 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3a228 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3a22c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3a230 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3a234 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3a238 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3a23c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3a240 3b5             |  
3a240 3b5 59 52 63 FD |                             drvh    cspin
3a244 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3a248 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3a24c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3a250 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3a254 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3a258 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3a25c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3a260 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3a264 3be EA E5 03 F6 |                             mov     d, orighubsize
3a268 3bf EF E5 63 F0 |                             shl     d, a
3a26c 3c0 F2 E3 83 F1 |                             sub     c, d
3a270 3c1 DD E3 03 F1 |                             add     c, offset1
3a274 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3a278 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3a27c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3a280 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3a284 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3a288 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3a28c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3a290 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3a294 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3a298 3cb BB D3 03 F6 |                             mov     resume, restorefill
3a29c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3a2a0 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3a2a4 3ce 6C FC BF CD |             if_c            call    #yield
3a2a8 3cf 2D 00 64 FD |                             ret
3a2ac 3d0             |                            
3a2ac 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3a2ac 3d0             |                       '     rczl    pa                      'rotate left into address offset
3a2ac 3d0             |                       '     rczl    c wcz                   'restore count and flags
3a2ac 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3a2b0 3d1 02 EC 67 F0 |                             shl     pa, #2
3a2b4 3d2 28 06 64 AD |             if_z            setq    #3
3a2b8 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3a2bc 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3a2c0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3a2c4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3a2c8 3d7             | 
3a2c8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3a2cc 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3a2d0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3a2d4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3a2d8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3a2dc 3dc             |                 fit 1024-32
3a2dc 3dc             |         
3a2dc 3dc             | 
3a2dc 3dc             | '..................................................................................................
3a2dc 3dc             | 
3a2dc 3dc             |                 fit 1024-32
3a2dc 3dc 00 00 00 00 
3a2e0 3dd 00 00 00 00 
3a2e4 3de 00 00 00 00 
3a2e8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3a2ec 3e0             |                 org 1024-32
3a2ec 000             | 
3a2ec 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3a2ec 000 00 00 00 00 |                 long $0000
3a2f0 001 11 11 00 00 |                 long $1111
3a2f4 002 22 22 00 00 |                 long $2222
3a2f8 003 33 33 00 00 |                 long $3333
3a2fc 004 44 44 00 00 |                 long $4444
3a300 005 55 55 00 00 |                 long $5555
3a304 006 66 66 00 00 |                 long $6666
3a308 007 77 77 00 00 |                 long $7777
3a30c 008 88 88 00 00 |                 long $8888
3a310 009 99 99 00 00 |                 long $9999
3a314 00a AA AA 00 00 |                 long $aaaa
3a318 00b BB BB 00 00 |                 long $bbbb
3a31c 00c CC CC 00 00 |                 long $cccc
3a320 00d DD DD 00 00 |                 long $dddd
3a324 00e EE EE 00 00 |                 long $eeee
3a328 00f FF FF 00 00 |                 long $ffff
3a32c 010             | 
3a32c 010             | 'masks
3a32c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3a330 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3a334 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3a338 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3a33c 014             | 
3a33c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3a340 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3a344 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3a348 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3a34c 018             | 
3a34c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3a350 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3a354 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3a358 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3a35c 01c             | 
3a35c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3a360 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3a364 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3a368 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3a36c 020             |         fit 1024
3a36c 020             | 
3a36c 020             |         fit 1024
3a36c 020             | 
3a36c 020             | '--------------------------------------------------------------------------------------------------
3a36c 020             |         orgh
3a36c                 | 
3a36c                 | gfxexpansion
3a36c                 |                             'simple line drawing graphics expansion of memory driver
3a36c                 |                             'jmp     #donerepeats                'just return for now
3a36c                 | 
3a36c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3a370     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3a374     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3a378     DD E1 03 F6 |                             mov     b, offset1              'get error term
3a37c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3a380     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3a384     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3a388     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3a38c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3a390     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3a394     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3a398     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3a39c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3a3a0     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3a3a4     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3a3a8     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3a3ac     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3a3b0     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3a3b4     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3a3b8     DC E5 33 F9 |                             getword d, total, #0            'get line width
3a3bc     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3a3c0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3a3c4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3a3c8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3a3cc     C3 03 80 FD |                             jmp     #readmask               'continue filling
3a3d0                 | 	alignl
3a3d0                 | _usbnew_spin2_dat_
3a3d0                 |                 org     $000
3a3d0 000             | 
3a3d0 000             | usb_host_start
3a3d0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3a3d4 001             | 
3a3d4 001 03 00 00 FF 
3a3d8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3a3dc 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3a3e0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3a3e4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3a3e8 006 29 70 63 FD |                 setq2   htmp
3a3ec 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3a3f0 008             | 
3a3f0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3a3f4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3a3f8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3a3fc 00b             | 
3a3fc 00b             | '------------------------------------------------------------------------------
3a3fc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3a3fc 00b             | ' special because the receiving function must not respond with either STALL or
3a3fc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3a3fc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3a3fc 00b             | ' corrupt packet, it must ignore the transaction
3a3fc 00b             | '------------------------------------------------------------------------------
3a3fc 00b             | ' On entry:
3a3fc 00b             | '   PTRA - start address of the SETUP data struct.
3a3fc 00b             | ' On exit:
3a3fc 00b             | '   retval - PID_ACK on success, otherwise error code.
3a3fc 00b             | '------------------------------------------------------------------------------
3a3fc 00b             | txn_setup
3a3fc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3a400 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3a404 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3a408 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3a40c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3a410 010             | .setup
3a410 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3a414 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a418 012 2D 00 64 AD |         if_z    ret
3a41c 013 7C 0B B0 FD |                 call    #retry_wait
3a420 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3a424 015 2D 00 64 AD |         if_z    ret
3a428 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3a42c 017 E0 FF 9F FD |                 jmp     #.setup
3a430 018             | 
3a430 018             | '------------------------------------------------------------------------------
3a430 018             | ' IN/INTERRUPT transaction.
3a430 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3a430 018             | '------------------------------------------------------------------------------
3a430 018             | ' On entry:
3a430 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3a430 018             | '     CRC(b19..23).
3a430 018             | ' On exit:
3a430 018             | '------------------------------------------------------------------------------
3a430 018             | txn_in
3a430 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3a434 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3a438 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3a43c 01b             | 
3a43c 01b             |                 ' Fall through to urx_packet
3a43c 01b             | 
3a43c 01b             | '------------------------------------------------------------------------------
3a43c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3a43c 01b             | ' received are handshakes and IN DATAx.
3a43c 01b             | '------------------------------------------------------------------------------
3a43c 01b             | ' On entry:
3a43c 01b             | ' On exit:
3a43c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3a43c 01b             | '     returned.
3a43c 01b             | '------------------------------------------------------------------------------
3a43c 01b             | urx_packet
3a43c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3a440 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3a444 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3a448 01e 1A 92 63 FD |                 getct   hct2
3a44c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3a450 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3a454 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3a458 022             | .wait_sop
3a458 022 22 A7 8A FA |                 rdpin   urx, dm
3a45c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3a460 024 08 00 90 CD |         if_c    jmp     #.get_pid
3a464 025 FC 25 CC FB |                 jnct2   #.wait_sop
3a468 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3a46c 027             | .get_pid
3a46c 027 28 02 B0 FD |                 call    #urx_next
3a470 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3a474 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3a478 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3a47c 02b             | .chk_pid
3a47c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a480 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3a484 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3a488 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3a48c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3a490 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3a494 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3a498 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3a49c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3a4a0 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3a4a4 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3a4a8 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3a4ac 037             | .ack_resend
3a4ac 037 22 A7 82 FA |                 rqpin   urx, dm
3a4b0 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3a4b4 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3a4b8 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3a4bc 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3a4c0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3a4c4 03d             | .chk_eop
3a4c4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3a4c8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3a4cc 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3a4d0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3a4d4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3a4d8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3a4dc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3a4e0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3a4e4 045 2D 00 64 FD |                 ret
3a4e8 046             | .idle
3a4e8 046 22 A7 82 FA |                 rqpin   urx, dm
3a4ec 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3a4f0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3a4f4 049 2D 00 64 FD |                 ret
3a4f8 04a             | 
3a4f8 04a             | '------------------------------------------------------------------------------
3a4f8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3a4f8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3a4f8 04a             | ' if one is required.
3a4f8 04a             | '------------------------------------------------------------------------------
3a4f8 04a             | ' On entry:
3a4f8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3a4f8 04a             | ' On exit:
3a4f8 04a             | '------------------------------------------------------------------------------
3a4f8 04a             | utx_token
3a4f8 04a 22 A7 82 FA |                 rqpin   urx, dm
3a4fc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3a500 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3a504 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3a508 04e 34 0D B0 CD |         if_c    call    #utx_pre
3a50c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3a510 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3a514 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3a518 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3a51c 053             | .next_byte
3a51c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3a520 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3a524 055             | .wait
3a524 055 40 46 72 FD |                 testp   dp                      wc
3a528 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3a52c 057 23 03 08 FC |                 akpin   dp
3a530 058 22 A5 22 FC |                 wypin   utx, dm
3a534 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3a538 05a             | 
3a538 05a             | '------------------------------------------------------------------------------
3a538 05a             | ' SETUP/OUT/INTERRUPT transaction.
3a538 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3a538 05a             | '------------------------------------------------------------------------------
3a538 05a             | ' On entry:
3a538 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3a538 05a             | '     CRC(b19..23).
3a538 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3a538 05a             | '   pkt_data - count of DATAx payload bytes to send.
3a538 05a             | ' On exit:
3a538 05a             | '------------------------------------------------------------------------------
3a538 05a             | txn_out
3a538 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3a53c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3a540 05c 00 00 C0 FF 
3a544 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3a548 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3a54c 05f             | 
3a54c 05f             |                 ' Fall through to utx_data
3a54c 05f             | 
3a54c 05f             | '------------------------------------------------------------------------------
3a54c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3a54c 05f             | ' calculated while the data byte is being shifted out. Since data stage
3a54c 05f             | ' success/fail is not determined until the status stage of the transaction,
3a54c 05f             | ' this routine is only concerned about the current DATAx packet.
3a54c 05f             | '------------------------------------------------------------------------------
3a54c 05f             | ' On entry:
3a54c 05f             | '   PTRA - hub start address of the data to read.
3a54c 05f             | '   pkt_cnt - data payload size.
3a54c 05f             | ' On exit:
3a54c 05f             | '------------------------------------------------------------------------------
3a54c 05f             | utx_data
3a54c 05f 22 A7 82 FA |                 rqpin   urx, dm
3a550 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3a554 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3a558 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3a55c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3a560 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3a564 065 D8 0C B0 CD |         if_c    call    #utx_pre
3a568 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3a56c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3a570 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3a574 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3a578 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3a57c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3a580 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3a584 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3a588 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3a58c 06f             | .read_byte
3a58c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3a590 070 F0 00 B0 FD |                 call    #utx_byte
3a594 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3a598 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3a59c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3a5a0 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3a5a4 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3a5a8 076             | .send_crc
3a5a8 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3a5ac 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3a5b0 078 D0 00 B0 FD |                 call    #utx_byte
3a5b4 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3a5b8 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3a5bc 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3a5c0 07c             | 
3a5c0 07c             | '------------------------------------------------------------------------------
3a5c0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3a5c0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3a5c0 07c             | ' expects that the packet includes at least the CRC word.
3a5c0 07c             | '
3a5c0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3a5c0 07c             | ' was requested, which makes it difficult to determine where the data stops
3a5c0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3a5c0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3a5c0 07c             | ' USB-16 expected residual value of 0xB001.
3a5c0 07c             | '
3a5c0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3a5c0 07c             | ' so the caller can verify IN success before writing the data to its final
3a5c0 07c             | ' destination.
3a5c0 07c             | '------------------------------------------------------------------------------
3a5c0 07c             | ' On entry:
3a5c0 07c             | '   pkt_data - max byte count expected to be in the packet.
3a5c0 07c             | '   newb_flg - signals new byte ready when toggled.
3a5c0 07c             | ' On exit:
3a5c0 07c             | '   pkt_cnt - actual number of bytes read.
3a5c0 07c             | '------------------------------------------------------------------------------
3a5c0 07c             | urx_data
3a5c0 07c F7 75 03 F6 |                 mov     htmp2, pb
3a5c4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3a5c8 07e 00 00 C0 FF 
3a5cc 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3a5d0 080 BA EF 03 F6 |                 mov     pb, htmp2
3a5d4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3a5d8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3a5dc 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3a5e0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3a5e4 085             | .wait_byte
3a5e4 085             | ' In-line rx for max speed
3a5e4 085 22 A7 82 FA |                 rqpin   urx, dm
3a5e8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3a5ec 087 53 A5 02 F5 |                 and     utx, urx
3a5f0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3a5f4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3a5f8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3a5fc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3a600 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3a604 08d DC FF 9F FD |                 jmp     #.wait_byte
3a608 08e             | .get_byte
3a608 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3a60c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3a610 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3a614 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3a618 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3a61c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3a620 094             | .end_crc
3a620 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3a624 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3a628 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3a62c 097 2D 00 64 1D |         if_a    ret
3a630 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3a630 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3a630 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3a630 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3a630 098 22 A7 82 FA |                 rqpin   urx, dm
3a634 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3a638 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3a63c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3a63c 09b             | .chk_crc
3a63c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3a640 09c 58 00 00 FF 
3a644 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3a648 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3a64c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3a650 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3a654 0a1 34 09 B0 FD |                 call    #poll_waitx
3a658 0a2             | 
3a658 0a2             |                 ' Fall through to utx_handshake
3a658 0a2             | 
3a658 0a2             | '------------------------------------------------------------------------------
3a658 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3a658 0a2             | ' the appropriate IP delay has been inserted.
3a658 0a2             | '------------------------------------------------------------------------------
3a658 0a2             | ' On entry:
3a658 0a2             | '   retval - handshake PID to send.
3a658 0a2             | ' On exit:
3a658 0a2             | '   retval unchanged.
3a658 0a2             | '------------------------------------------------------------------------------
3a658 0a2             | utx_handshake
3a658 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3a65c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3a660 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3a664 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3a668 0a6 5F A5 02 F6 |                 mov     utx, retval
3a66c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3a670 0a8             | .idle
3a670 0a8 22 A7 82 FA |                 rqpin   urx, dm
3a674 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3a678 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3a67c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3a680 0ac 08 09 90 FD |                 jmp     #poll_waitx
3a684 0ad             | 
3a684 0ad             | '------------------------------------------------------------------------------
3a684 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3a684 0ad             | '------------------------------------------------------------------------------
3a684 0ad             | ' On entry:
3a684 0ad             | '   utx - byte to transmit.
3a684 0ad             | ' On exit:
3a684 0ad             | '------------------------------------------------------------------------------
3a684 0ad             | utx_byte
3a684 0ad 40 46 72 FD |                 testp   dp                      wc
3a688 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3a68c 0af 23 03 08 FC |                 akpin   dp
3a690 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3a694 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3a698 0b2             | 
3a698 0b2             | '------------------------------------------------------------------------------
3a698 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3a698 0b2             | '------------------------------------------------------------------------------
3a698 0b2             | ' On entry:
3a698 0b2             | ' On exit:
3a698 0b2             | '   retval - the byte read.
3a698 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3a698 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3a698 0b2             | '     received.
3a698 0b2             | '------------------------------------------------------------------------------
3a698 0b2             | urx_next
3a698 0b2 22 A7 8A FA |                 rdpin   urx, dm
3a69c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3a6a0 0b4 53 A5 02 F5 |                 and     utx, urx
3a6a4 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3a6a8 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3a6ac 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3a6b0 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3a6b4 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3a6b8 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3a6bc 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3a6c0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3a6c4 0bd 2D 00 64 FD |                 ret
3a6c8 0be             | 
3a6c8 0be             | '------------------------------------------------------------------------------
3a6c8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3a6c8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3a6c8 0be             | ' length, and the PID is not included in the CRC calculation:
3a6c8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3a6c8 0be             | '  CRC5  ENDP ADDRESS PID
3a6c8 0be             | ' %00000_1111_1111111_xxxxxxxx
3a6c8 0be             | '------------------------------------------------------------------------------
3a6c8 0be             | ' On entry:
3a6c8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3a6c8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3a6c8 0be             | ' On exit:
3a6c8 0be             | '   ep_addr_pid - CRC value appended to the packet.
3a6c8 0be             | '------------------------------------------------------------------------------
3a6c8 0be             | calc_crc5
3a6c8 0be FF 03 00 FF 
3a6cc 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3a6d0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3a6d4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3a6d8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3a6dc 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3a6e0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3a6e4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3a6e8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3a6ec 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3a6f0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3a6f4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3a6f8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3a6fc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3a700 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3a704 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3a708 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3a70c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3a710 0d0             | 
3a710 0d0             | '------------------------------------------------------------------------------
3a710 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3a710 0d0             | '------------------------------------------------------------------------------
3a710 0d0             | isr1_fsframe
3a710 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3a714 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3a718 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3a71c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3a720 0d4             | .wait
3a720 0d4 40 46 72 FD |                 testp   dp                      wc
3a724 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3a728 0d6 23 03 08 FC |                 akpin   dp
3a72c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3a730 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3a734 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3a738 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3a73c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3a740 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3a744 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3a748 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3a74c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3a750 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3a754 0e1 2C FF BF FD |                 call    #utx_byte
3a758 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3a75c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3a760 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3a764 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3a768 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3a76c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3a770 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3a774 0e9 5B A5 42 F5 |                 or      utx, icrc
3a778 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3a77c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3a780 0ec 20 00 90 FD |                 jmp     #isr1_wait
3a784 0ed             | isr1_lsframe
3a784 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3a788 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3a78c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3a790 0f0             | .wait
3a790 0f0 40 46 72 FD |                 testp   dp                      wc
3a794 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3a798 0f2 23 03 08 FC |                 akpin   dp
3a79c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3a7a0 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3a7a4 0f5             | isr1_wait
3a7a4 0f5 22 A5 82 FA |                 rqpin   utx, dm
3a7a8 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3a7ac 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3a7b0 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3a7b4 0f9 03 00 00 FF 
3a7b8 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3a7bc 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3a7c0 0fc F5 FF 3B FB |                 reti1
3a7c4 0fd             | 
3a7c4 0fd             | '------------------------------------------------------------------------------
3a7c4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3a7c4 0fd             | ' transaction will complete before the next frame is triggered.
3a7c4 0fd             | '------------------------------------------------------------------------------
3a7c4 0fd             | ' On entry:
3a7c4 0fd             | ' On exit:
3a7c4 0fd             | '------------------------------------------------------------------------------
3a7c4 0fd             | wait_txn_ok
3a7c4 0fd 1A 74 63 FD |                 getct   htmp2
3a7c8 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3a7cc 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3a7d0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3a7d4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3a7d8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3a7dc 103 2D 00 64 FD |                 ret
3a7e0 104             | 
3a7e0 104             | '------------------------------------------------------------------------------
3a7e0 104             | ' A device connection was detected, or a bus reset was requested by the USB
3a7e0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3a7e0 104             | ' and perform a reset sequence prior to device enumeration.
3a7e0 104             | '------------------------------------------------------------------------------
3a7e0 104             | dev_reset
3a7e0 104 22 A7 82 FA |                 rqpin   urx, dm
3a7e4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3a7e8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3a7ec 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3a7f0 108             | reset
3a7f0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3a7f4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3a7f8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3a7fc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3a800 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3a804 10d 1A 92 62 FD |                 getct   iframe_ct_base
3a808 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3a80c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3a810 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3a814 111 24 70 07 F1 |                 add     htmp, #36
3a818 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3a81c 113             | .framewait
3a81c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3a820 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3a824 115 2D 00 64 FD |                 ret
3a828 116             | 
3a828 116             | '------------------------------------------------------------------------------
3a828 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3a828 116             | '------------------------------------------------------------------------------
3a828 116             | ' On entry:
3a828 116             | '   PTRA - source address.
3a828 116             | '   PB - destination address.
3a828 116             | '   hr0 - length of copy, in bytes.
3a828 116             | ' On exit:
3a828 116             | '------------------------------------------------------------------------------
3a828 116             | hmemcpy
3a828 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3a82c 117 F7 71 43 FC |                 wrbyte  htmp, pb
3a830 118 01 EE 07 F1 |                 add     pb, #1
3a834 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3a838 11a             | 
3a838 11a             | '------------------------------------------------------------------------------
3a838 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3a838 11a             | ' loop until the errant device is disconnected.
3a838 11a             | '------------------------------------------------------------------------------
3a838 11a             | ' On entry:
3a838 11a             | ' On exit:
3a838 11a             | '------------------------------------------------------------------------------
3a838 11a             | host_error
3a838 11a             |           if ERROR_LED >= 0
3a838 11a             |           end
3a838 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3a83c 11b             | 
3a83c 11b             | '------------------------------------------------------------------------------
3a83c 11b             | ' Get HID descriptor buffer for current port
3a83c 11b             | '------------------------------------------------------------------------------
3a83c 11b             | ' On entry:
3a83c 11b             | ' On exit:
3a83c 11b             | '   PB - HID descriptor buffer pointer
3a83c 11b             | '------------------------------------------------------------------------------
3a83c 11b             | get_hid_descr_buffer
3a83c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3a840 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3a844 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3a848 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3a84c 11f             | 
3a84c 11f             | 
3a84c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3a850 120             | 
3a850 120             | ' USB commands and error codes
3a850 120 00 00 00 00 | cmd_data        long    0
3a854 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3a858 122             | 
3a858 122             | ' Parameters block assigned at cog startup
3a858 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3a85c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3a860 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3a864 125             | if ACTIVITY_LED >= 0
3a864 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3a864 125             | end
3a864 125             | if ERROR_LED >= 0
3a864 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3a864 125             | end
3a864 125 00 00 00 00 | hid_descr_p     long    0
3a868 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3a868 126             | 'hkbd_report_p   long    0
3a868 126 00 00 00 00 | hub_descr_p     long    0
3a86c 127 00 00 00 00 | urx_buff_p      long    0
3a870 128 00 00 00 00 | dev_desc_buff_p long    0
3a874 129 00 00 00 00 | con_desc_buff_p long    0
3a878 12a 00 00 00 00 | cache_start_p   long    0
3a87c 12b 00 00 00 00 | cache_end_p     long    0
3a880 12c             | if EMUPAD_MAX_PLAYER > 0
3a880 12c             | emupad_out_ptr  long    0
3a880 12c             | end
3a880 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3a884 12d             | 
3a884 12d             | hdev_init_start
3a884 12d             | hdev_port       res     1
3a884 12d             | hdev_port       res     1
3a884 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3a884 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3a884 12d             | kbm_next_datax  res     1
3a884 12d             | kbm_next_datax  res     1
3a884 12d             | hub_intf_num    res     1
3a884 12d             | hub_intf_num    res     1
3a884 12d             | hub_next_datax  res     1
3a884 12d             | hub_next_datax  res     1
3a884 12d             | hub_status_chg  res     1
3a884 12d             | hub_status_chg  res     1
3a884 12d             | hub_port_status res     1
3a884 12d             | hub_port_status res     1
3a884 12d             | if HAVE_MOUSE
3a884 12d             | ms_intf_num     res     1
3a884 12d             | ms_intf_num     res     1
3a884 12d             | ms_in_max_pkt   res     1
3a884 12d             | ms_in_max_pkt   res     1
3a884 12d             | end
3a884 12d             | kb_intf_num     res     1
3a884 12d             | kb_intf_num     res     1
3a884 12d             | kb_interval     res     1
3a884 12d             | kb_interval     res     1
3a884 12d             | kb_in_max_pkt   res     1
3a884 12d             | kb_in_max_pkt   res     1
3a884 12d             | kb_max_index    res     1
3a884 12d             | kb_max_index    res     1
3a884 12d             | kb_led_states   res     1
3a884 12d             | kb_led_states   res     1
3a884 12d             | gp_intf_num     res     1
3a884 12d             | gp_intf_num     res     1
3a884 12d             | gp_interval     res     1
3a884 12d             | gp_interval     res     1
3a884 12d             | gp_max_index    res     1
3a884 12d             | gp_max_index    res     1
3a884 12d             | gp_descr_len    res     1+MAX_DEVICES
3a884 12d             | gp_descr_len    res     1+MAX_DEVICES
3a884 12d             | hdev_init_end
3a884 12d             | 
3a884 12d             | ' Initialized at cog startup:
3a884 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3a884 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3a884 12d             | iframe_ct_new   res     1
3a884 12d             | iframe_ct_new   res     1
3a884 12d             | iframe_ct_base  res     1
3a884 12d             | iframe_ct_base  res     1
3a884 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3a884 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3a884 12d             | 
3a884 12d             | ' This register block is reset to zero when a USB device connects
3a884 12d             | hreg_init_start
3a884 12d             | hstatus         res     1         ' Host status flags
3a884 12d             | hstatus         res     1         ' Host status flags
3a884 12d             | hctwait         res     1         ' Poll-based wait clocks
3a884 12d             | hctwait         res     1         ' Poll-based wait clocks
3a884 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3a884 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3a884 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3a884 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3a884 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3a884 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3a884 12d             | xfer_retry      res     1         ' Control transfer retry count
3a884 12d             | xfer_retry      res     1         ' Control transfer retry count
3a884 12d             | retry           res     1         ' Transaction retry count
3a884 12d             | retry           res     1         ' Transaction retry count
3a884 12d             | utx             res     1         ' Byte to transmit on USB
3a884 12d             | utx             res     1         ' Byte to transmit on USB
3a884 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3a884 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3a884 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3a884 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3a884 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3a884 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3a884 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3a884 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3a884 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3a884 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3a884 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3a884 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3a884 12d             | frame           res     1         ' USB 1ms frame counter value
3a884 12d             | frame           res     1         ' USB 1ms frame counter value
3a884 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3a884 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3a884 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3a884 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3a884 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3a884 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3a884 12d             | crc             res     1         ' Used for CRC16 calculation
3a884 12d             | crc             res     1         ' Used for CRC16 calculation
3a884 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3a884 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3a884 12d             | retval          res     1         ' Global success/fail return parameter
3a884 12d             | retval          res     1         ' Global success/fail return parameter
3a884 12d             | context_retval  res     1         ' Operation contextual return parameter
3a884 12d             | context_retval  res     1         ' Operation contextual return parameter
3a884 12d             | ' Device stuff
3a884 12d             | hdev_id         res     1+MAX_DEVICES
3a884 12d             | hdev_id         res     1+MAX_DEVICES
3a884 12d             | hdev_bcd        res     1
3a884 12d             | hdev_bcd        res     1
3a884 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3a884 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3a884 12d             | ' Keyboard/mouse stuff
3a884 12d             | hctrl_ep_addr   res     1
3a884 12d             | hctrl_ep_addr   res     1
3a884 12d             | hctrl_max_pkt   res     1
3a884 12d             | hctrl_max_pkt   res     1
3a884 12d             | hconfig_base    res     1
3a884 12d             | hconfig_base    res     1
3a884 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3a884 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3a884 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3a884 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3a884 12d             | hdev_class      res     1
3a884 12d             | hdev_class      res     1
3a884 12d             | hdev_subclass   res     1
3a884 12d             | hdev_subclass   res     1
3a884 12d             | hdev_protocol   res     1
3a884 12d             | hdev_protocol   res     1
3a884 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3a884 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3a884 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3a884 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3a884 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3a884 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3a884 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3a884 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3a884 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3a884 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3a884 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3a884 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3a884 12d             | if HAVE_MOUSE
3a884 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3a884 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3a884 12d             | end
3a884 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3a884 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3a884 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3a884 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3a884 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3a884 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3a884 12d             | hdev_out_addr   res     1
3a884 12d             | hdev_out_addr   res     1
3a884 12d             | 
3a884 12d             | if EMUPAD_MAX_PLAYER > 0
3a884 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3a884 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3a884 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3a884 12d             | end
3a884 12d             | 
3a884 12d             | hreg_init_end
3a884 12d             | 
3a884 12d             | hidr_start
3a884 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3a884 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3a884 12d             | hidr_flags      res     1
3a884 12d             | hidr_flags      res     1
3a884 12d             | hidr_axis       res     3
3a884 12d             | hidr_axis       res     3
3a884 12d             | hidr_buttons    res     1
3a884 12d             | hidr_buttons    res     1
3a884 12d             | hidr_hats       res     1
3a884 12d             | hidr_hats       res     1
3a884 12d             | '' Above are actually useful values, 6 longs
3a884 12d             | hidr_id         res     1
3a884 12d             | hidr_id         res     1
3a884 12d             | hidr_state      res     1
3a884 12d             | hidr_state      res     1
3a884 12d             | hidr_size       res     1
3a884 12d             | hidr_size       res     1
3a884 12d             | hidr_count      res     1
3a884 12d             | hidr_count      res     1
3a884 12d             | hidr_offset     res     1
3a884 12d             | hidr_offset     res     1
3a884 12d             | hidr_usage_idx  res     1
3a884 12d             | hidr_usage_idx  res     1
3a884 12d             | hidr_lminmax    res     1
3a884 12d             | hidr_lminmax    res     1
3a884 12d             | hidr_pminmax    res     1
3a884 12d             | hidr_pminmax    res     1
3a884 12d             | hidr_type       res     1
3a884 12d             | hidr_type       res     1
3a884 12d             | hidr_end
3a884 12d             | 
3a884 12d             | ' Variables dependent on the system freqency
3a884 12d             | _var_64_lower_  res     1
3a884 12d             | _var_64_lower_  res     1
3a884 12d             | _var_64_upper_  res     1
3a884 12d             | _var_64_upper_  res     1
3a884 12d             | _12Mbps_        res     1
3a884 12d             | _12Mbps_        res     1
3a884 12d             | _1_5Mbps_       res     1
3a884 12d             | _1_5Mbps_       res     1
3a884 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3a884 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3a884 12d             | _1us_           res     1         ' 1us
3a884 12d             | _1us_           res     1         ' 1us
3a884 12d             | _10us_          res     1         ' 10us
3a884 12d             | _10us_          res     1         ' 10us
3a884 12d             | _33us_          res     1         ' 33us
3a884 12d             | _33us_          res     1         ' 33us
3a884 12d             | _txn_err_       res     1         ' 250us
3a884 12d             | _txn_err_       res     1         ' 250us
3a884 12d             | _500us_         res     1         ' 500us
3a884 12d             | _500us_         res     1         ' 500us
3a884 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3a884 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3a884 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3a884 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3a884 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3a884 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3a884 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3a884 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3a884 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3a884 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3a884 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3a884 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3a884 12d             | _preamble_wait_ res     1
3a884 12d             | _preamble_wait_ res     1
3a884 12d             | _1ms_           res     1         ' 1ms
3a884 12d             | _1ms_           res     1         ' 1ms
3a884 12d             | _2ms_           res     1         ' 2ms
3a884 12d             | _2ms_           res     1         ' 2ms
3a884 12d             | _suspend_wait_  res     1         ' 3ms
3a884 12d             | _suspend_wait_  res     1         ' 3ms
3a884 12d             | _4ms_           res     1         ' 4ms
3a884 12d             | _4ms_           res     1         ' 4ms
3a884 12d             | _xfer_wait_     res     1         ' 5ms
3a884 12d             | _xfer_wait_     res     1         ' 5ms
3a884 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3a884 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3a884 12d             | _reset_hold_    res     1         ' 15ms
3a884 12d             | _reset_hold_    res     1         ' 15ms
3a884 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3a884 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3a884 12d             | _21ms_          res     1         ' 21ms
3a884 12d             | _21ms_          res     1         ' 21ms
3a884 12d             | _100ms_         res     1         ' 100ms
3a884 12d             | _100ms_         res     1         ' 100ms
3a884 12d             | _500ms_         res     1         ' 500ms
3a884 12d             | _500ms_         res     1         ' 500ms
3a884 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3a884 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3a884 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3a884 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3a884 12d             | '------------------------------------------------------------------------------
3a884 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3a884 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3a884 12d             | _usb_d_ls_nco_  res     1
3a884 12d             | _usb_d_ls_nco_  res     1
3a884 12d             | _usb_h_fs_nco_  res     1
3a884 12d             | _usb_h_fs_nco_  res     1
3a884 12d             | _usb_d_fs_nco_  res     1
3a884 12d             | _usb_d_fs_nco_  res     1
3a884 12d             | '------------------------------------------------------------------------------
3a884 12d             | ' Scratch registers
3a884 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3a884 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3a884 12d             | htmp1           res     1
3a884 12d             | htmp1           res     1
3a884 12d             | htmp2           res     1
3a884 12d             | htmp2           res     1
3a884 12d             | htmp3           res     1
3a884 12d             | htmp3           res     1
3a884 12d             | hrep            res     1         ' Repeat count
3a884 12d             | hrep            res     1         ' Repeat count
3a884 12d             | hsave0          res     1         ' Subroutine parameter saves
3a884 12d             | hsave0          res     1         ' Subroutine parameter saves
3a884 12d             | hsave1          res     1
3a884 12d             | hsave1          res     1
3a884 12d             | hsave2          res     1
3a884 12d             | hsave2          res     1
3a884 12d             | isrtmp1         res     1
3a884 12d             | isrtmp1         res     1
3a884 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3a884 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3a884 12d             | hr0             res     1         ' Multi-purpose registers
3a884 12d             | hr0             res     1         ' Multi-purpose registers
3a884 12d             | hr1             res     1
3a884 12d             | hr1             res     1
3a884 12d             | hr2             res     1
3a884 12d             | hr2             res     1
3a884 12d             | hr3             res     1
3a884 12d             | hr3             res     1
3a884 12d             | hpar1           res     1         ' Routine entry/exit parameters
3a884 12d             | hpar1           res     1         ' Routine entry/exit parameters
3a884 12d             | hpar2           res     1
3a884 12d             | hpar2           res     1
3a884 12d             | hpar3           res     1
3a884 12d             | hpar3           res     1
3a884 12d             | hct2            res     1         ' Function response bus turn-around timer
3a884 12d             | hct2            res     1         ' Function response bus turn-around timer
3a884 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3a884 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3a884 12d             | mod_cnt         res     1         ' Used in idle loops
3a884 12d             | mod_cnt         res     1         ' Used in idle loops
3a884 12d             |                 fit     $1F0
3a884 12d             |                 org     $200
3a884 200             | hlut_start
3a884 200             | 
3a884 200             | '------------------------------------------------------------------------------
3a884 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3a884 200             | ' settings to startup defaults.
3a884 200             | '------------------------------------------------------------------------------
3a884 200             | ' On entry:
3a884 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3a884 200             | '------------------------------------------------------------------------------
3a884 200             | set_speed_full
3a884 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3a888 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3a88c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3a890 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3a894 204             | '                ret                             wcz     ' Restore caller flags on exit
3a894 204             | 
3a894 204             | '------------------------------------------------------------------------------
3a894 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3a894 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3a894 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3a894 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3a894 204             | ' putting the smart pins into reset.
3a894 204             | '------------------------------------------------------------------------------
3a894 204             | ' On entry:
3a894 204             | ' On exit: CZ flags restored to caller states
3a894 204             | '------------------------------------------------------------------------------
3a894 204             | set_speed_low
3a894 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3a898 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3a89c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3a8a0 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3a8a4 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3a8a8 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3a8ac 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3a8b0 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3a8b4 20c             | 
3a8b4 20c             | '------------------------------------------------------------------------------
3a8b4 20c             | ' Perform configuration stuff required when a device intitially connects.
3a8b4 20c             | '------------------------------------------------------------------------------
3a8b4 20c             | ' On entry:
3a8b4 20c             | ' On exit:
3a8b4 20c             | '------------------------------------------------------------------------------
3a8b4 20c             | on_connect
3a8b4 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3a8b8 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3a8bc 20e             | .retry
3a8bc 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3a8c0 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3a8c4 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3a8c8 211 00 08 00 FF 
3a8cc 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3a8d0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3a8d4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3a8d8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3a8dc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3a8e0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3a8e4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a8e8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3a8ec 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3a8f0 21b 4C 03 B0 FD |                 call    #poll_waitx
3a8f4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3a8f8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3a8fc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3a900 21f B8 FF 9F FD |                 jmp     #.retry
3a904 220             | .get_dev_desc
3a904 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3a908 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3a90c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3a910 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3a914 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3a918 225 88 FB BF FD |                 call    #reset
3a91c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3a920 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3a924 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3a928 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3a92c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a930 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3a934 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3a938 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3a93c 22e 04 00 00 FF 
3a940 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3a944 230 34 FA BF FD |                 call    #calc_crc5
3a948 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3a94c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3a950 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3a954 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3a958 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3a95c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3a960 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a964 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3a968 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3a96c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3a970 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3a974 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3a978 23d C4 02 B0 FD |                 call    #poll_waitx
3a97c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3a980 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3a984 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3a988 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3a98c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3a990 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a994 244 2D 00 64 5D |         if_nz   ret
3a998 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3a99c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3a9a0 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3a9a4 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3a9a8 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3a9ac 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3a9b0 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3a9b4 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3a9b8 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3a9bc 24e 2C FB 9F CD |         if_b    jmp     #host_error
3a9c0 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3a9c4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3a9c8 251 2D EC 63 FD |                 call    pa
3a9cc 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3a9d0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3a9d4 254 2C EC 63 FD |                 jmp     pa
3a9d8 255             | 
3a9d8 255             | '------------------------------------------------------------------------------
3a9d8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3a9d8 255             | ' Status reporting is always in the function-to-host direction.
3a9d8 255             | '------------------------------------------------------------------------------
3a9d8 255             | ' On entry:
3a9d8 255             | '   PTRA - start address of the SETUP data in hub.
3a9d8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3a9d8 255             | '     stage.
3a9d8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3a9d8 255             | ' On exit:
3a9d8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3a9d8 255             | '     contains the count of data stage bytes actually received, which must
3a9d8 255             | '     always be <= the count requested.
3a9d8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3a9d8 255             | '     more specific USB operation error code.
3a9d8 255             | '------------------------------------------------------------------------------
3a9d8 255             | control_read
3a9d8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3a9dc 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3a9e0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3a9e4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3a9e8 259             | .xfer_start
3a9e8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3a9ec 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3a9f0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a9f4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3a9f8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3a9fc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3aa00 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3aa04 260 61 00 00 FF 
3aa08 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3aa0c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3aa10 263             | .data
3aa10 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3aa14 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3aa18 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3aa1c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3aa20 267             | .nak_retry
3aa20 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3aa24 268             | .in_retry
3aa24 268 BC F6 BF FD |                 call    #txn_in
3aa28 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3aa2c 26a 28 00 90 AD |         if_z    jmp     #.commit
3aa30 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3aa34 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3aa38 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3aa3c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3aa40 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3aa44 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3aa48 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3aa4c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3aa50 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3aa54 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3aa58 275             | .commit
3aa58 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3aa5c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3aa60 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3aa64 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3aa68 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3aa6c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3aa70 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3aa74 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3aa78 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3aa7c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3aa80 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3aa84 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3aa88 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3aa8c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3aa90 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3aa94 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3aa98 285             | .pre_status
3aa98 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3aa9c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3aaa0 287 00 B0 06 F6 |                 mov     pkt_data, #0
3aaa4 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3aaa8 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3aaac 28a 61 00 00 FF 
3aab0 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3aab4 28c             | .out_retry
3aab4 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3aab8 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3aabc 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3aac0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3aac4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3aac8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3aacc 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3aad0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3aad4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3aad8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3aadc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3aae0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3aae0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3aae0 297             | ' ControlRead() transfer gets things unstuck most of the time...
3aae0 297             | .xfer_retry
3aae0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3aae4 298 58 01 B0 FD |                 call    #poll_waitx
3aae8 299 8C F9 BF FD |                 call    #wait_txn_ok
3aaec 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3aaf0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3aaf4 29c C8 EF 03 F6 |                 mov     pb, hpar3
3aaf8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3aafc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3ab00 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3ab04 2a0             | 
3ab04 2a0             | '------------------------------------------------------------------------------
3ab04 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3ab04 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3ab04 2a0             | ' the SETUP data struct is filled with the required values.
3ab04 2a0             | '------------------------------------------------------------------------------
3ab04 2a0             | ' On entry:
3ab04 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3ab04 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3ab04 2a0             | '     stage.
3ab04 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3ab04 2a0             | ' On exit:
3ab04 2a0             | '   retval - used to convey the success/failure of each stage.
3ab04 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3ab04 2a0             | '     more specific USB operation error code.
3ab04 2a0             | '------------------------------------------------------------------------------
3ab04 2a0             | control_write
3ab04 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3ab08 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3ab0c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3ab10 2a3             | 
3ab10 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3ab14 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3ab18 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3ab1c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3ab20 2a7             | .xfer_start
3ab20 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3ab24 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3ab28 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3ab2c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ab30 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3ab34 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3ab38 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3ab3c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3ab40 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3ab44 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3ab48 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3ab4c 2b2             | .data
3ab4c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3ab50 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3ab54 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3ab58 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3ab5c 2b6             | .out_retry
3ab5c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3ab60 2b7 88 F6 BF FD |                 call    #txn_out
3ab64 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ab68 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3ab6c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3ab70 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3ab74 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3ab78 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3ab7c 2be             | .commit
3ab7c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3ab80 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3ab84 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3ab88 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3ab8c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3ab90 2c3             | pre_status_in
3ab90 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3ab94 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3ab98 2c5             | .status_retry
3ab98 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3ab9c 2c6 44 F5 BF FD |                 call    #txn_in
3aba0 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3aba4 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3aba8 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3abac 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3abb0 2cb 2D 00 64 AD |         if_z    ret
3abb4 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3abb8 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3abbc 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3abc0 2cf             | '               ret                                     ' Caller must handle transfer retirement
3abc0 2cf             | 
3abc0 2cf             | '------------------------------------------------------------------------------
3abc0 2cf             | ' Execute an IN interrupt transaction.
3abc0 2cf             | '------------------------------------------------------------------------------
3abc0 2cf             | ' On entry:
3abc0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3abc0 2cf             | '   hpar2 - Address of the IN data buffer
3abc0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3abc0 2cf             | ' On exit:
3abc0 2cf             | '   retval - the result of the operation.
3abc0 2cf             | '   hpar3 - the count of IN data bytes actually received.
3abc0 2cf             | '------------------------------------------------------------------------------
3abc0 2cf             | do_int_in
3abc0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3abc4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3abc8 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3abcc 2d2             | 
3abcc 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3abd0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3abd4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3abd8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3abdc 2d6             | .retry
3abdc 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3abe0 2d7 00 F5 BF FD |                 call    #txn_in
3abe4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3abe8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3abec 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3abf0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3abf4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3abf8 2dd 54 00 B0 FD |                 call    #retry_wait
3abfc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3ac00 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3ac04 2e0 D4 FF 9F FD |                 jmp     #.retry
3ac08 2e1             | .commit
3ac08 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3ac0c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3ac10 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3ac14 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3ac18 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3ac1c 2e6             | .post_ret
3ac1c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3ac20 2e7             | 
3ac20 2e7             | 
3ac20 2e7             | '------------------------------------------------------------------------------
3ac20 2e7             | ' Resets the downstream hub port to FS
3ac20 2e7             | '------------------------------------------------------------------------------
3ac20 2e7             | dwnstream_reset
3ac20 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3ac24 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3ac28 2e9             | 
3ac28 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3ac2c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3ac30 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3ac34 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3ac38 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3ac3c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3ac40 2ef             | 
3ac40 2ef             | '------------------------------------------------------------------------------
3ac40 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3ac40 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3ac40 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3ac40 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3ac40 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3ac40 2ef             | '------------------------------------------------------------------------------
3ac40 2ef             | ' On entry:
3ac40 2ef             | '   hctwait - wait interval in sysclocks.
3ac40 2ef             | ' On exit:
3ac40 2ef             | '------------------------------------------------------------------------------
3ac40 2ef             | poll_waitx
3ac40 2ef 1A 92 63 FD |                 getct   hct2
3ac44 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3ac48 2f1             | .wait
3ac48 2f1 FF 25 CC FB |                 jnct2   #.wait
3ac4c 2f2 2D 00 64 FD |                 ret
3ac50 2f3             | 
3ac50 2f3             | '------------------------------------------------------------------------------
3ac50 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3ac50 2f3             | '------------------------------------------------------------------------------
3ac50 2f3             | ' On entry:
3ac50 2f3             | '   retval - transaction response PID or error code.
3ac50 2f3             | ' On exit:
3ac50 2f3             | '------------------------------------------------------------------------------
3ac50 2f3             | retry_wait
3ac50 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3ac54 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3ac58 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3ac5c 2f6 14 00 90 AD |         if_z    jmp     #.nak
3ac60 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3ac64 2f8 D8 FF BF FD |                 call    #poll_waitx
3ac68 2f9             | .dec
3ac68 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3ac6c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3ac70 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3ac74 2fc             | .nak
3ac74 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3ac78 2fd C4 FF BF FD |                 call    #poll_waitx
3ac7c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3ac80 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3ac84 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3ac88 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3ac8c 302 2D 00 64 FD |                 ret
3ac90 303             | 
3ac90 303             | host_reset
3ac90 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3ac94 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3ac98 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3ac98 305 BD 01 05 FF 
3ac9c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3aca0 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3aca4 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3aca8 309             | ' Check to see if the system clock has been changed.
3aca8 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3acac 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3acb0 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3acb4 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3acb8 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3acbc 30e 40 46 62 FD |                 dirl    dp
3acc0 30f             | 
3acc0 30f 28 02 64 FD |                 setq    #1
3acc4 310 80 00 80 FF 
3acc8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3accc 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3acd0 313             | .enable
3acd0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3acd4 314 41 46 62 FD |                 dirh    dp
3acd8 315 1F 36 63 FD |                 waitx   _1us_
3acdc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ace0 317             | 
3ace0 317             |                 ' Handle Port protection enable and startup delay
3ace0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3ace4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3ace8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3acec 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3acf0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3acf4 31c             | 
3acf4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3acf8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3acfc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3ad00 31f 00 00 04 F6 |                 mov     0-0, #0
3ad04 320             | .regloop
3ad04 320             | 
3ad04 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3ad04 320             | 
3ad04 320             | discon_entry
3ad04 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3ad08 321             | 
3ad08 321             |               
3ad08 321             |         if HAVE_HIDPAD
3ad08 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3ad0c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3ad10 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3ad14 324 F7 01 68 FC |                 wrlong  #0,pb
3ad18 325             |         end
3ad18 325             |         if EMUPAD_MAX_PLAYER > 0
3ad18 325             |         end
3ad18 325             | 
3ad18 325             |                 ' Fall through to disconnected loop
3ad18 325             | 
3ad18 325             | '-----------------------------------------------------------------------------------------------------------------
3ad18 325             | ' Device connect handling (Section 7.1.7.3).
3ad18 325             | '-----------------------------------------------------------------------------------------------------------------
3ad18 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3ad18 325             | ' device to connect (Section 7.1.7.3).
3ad18 325             | '-----------------------------------------------------------------------------------------------------------------
3ad18 325             | disconnected
3ad18 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3ad1c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3ad20 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3ad24 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3ad28 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3ad2c 32a             |         if ACTIVITY_LED >= 0
3ad2c 32a             |         end
3ad2c 32a 22 A7 82 FA |                 rqpin   urx, dm
3ad30 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3ad34 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3ad38 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3ad3c 32e             | .se1_test
3ad3c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3ad40 32f FC FE BF FD |                 call    #poll_waitx
3ad44 330 22 A7 82 FA |                 rqpin   urx, dm
3ad48 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ad4c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3ad50 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3ad54 334             | .se1            'SE1 is a fatal error condition
3ad54 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3ad58 335 E4 FE BF FD |                 call    #poll_waitx
3ad5c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3ad60 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3ad64 338             | .connect_test                                           ' Test lines until stable J/K state seen
3ad64 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3ad68 339 22 A7 82 FA |                 rqpin   urx, dm
3ad6c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ad70 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3ad74 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3ad78 33d             | connected
3ad78 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3ad7c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3ad80 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3ad84 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3ad88 341             | .set_pulse
3ad88 341 1A 64 63 FD |                 getct   _pulse_time_
3ad8c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3ad90 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3ad90 343             | ' of 1ms and make a correction, if necessary.
3ad90 343             | '                mov     htmp, _1ms_
3ad90 343             | '                subs    htmp, iframe_delta
3ad90 343             | '                adds    _frame1ms_clks_, htmp
3ad90 343             | '                debug(udec(_frame1ms_clks_))
3ad90 343             | 
3ad90 343             |                 ' Fall through to idle/processing loop
3ad90 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3ad94 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3ad98 345             | 
3ad98 345             | hidle
3ad98 345 22 A7 82 FA |                 rqpin   urx, dm
3ad9c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3ada0 347 98 00 90 CD |         if_c    jmp     #.se0_test
3ada4 348 24 06 70 FD |                 pollct3                         wc
3ada8 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3adac 34a 1A 94 63 FD |                 getct   hct3
3adb0 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3adb4 34c             | 
3adb4 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3adb8 34d 00 70 E3 F8 |                 getbyte htmp
3adbc 34e             | 
3adbc 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3adc0 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3adc4 350 40 00 90 AD |         if_z    jmp     #.poll
3adc8 351             | 
3adc8 351             |         if _HAVE_GAMEPAD
3adc8 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3adcc 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3add0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3add4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3add8 355 2C 00 90 AD |         if_z    jmp     #.poll
3addc 356             |         end
3addc 356             | 
3addc 356             |         if HAVE_MOUSE
3addc 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3ade0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3ade4 358 20 00 90 AD |         if_z    jmp     #.poll
3ade8 359             |         end
3ade8 359             | 
3ade8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3adec 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3adf0 35b 14 00 90 AD |         if_z    jmp     #.poll
3adf4 35c             | 
3adf4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3adf8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3adfc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3ae00 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3ae04 360             |         if HAVE_MOUSE
3ae04 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3ae08 361             |         else
3ae08 361             |         end
3ae08 361             | 
3ae08 361             | .poll
3ae08 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3ae0c 362 2D EC 63 FD |                 call    pa
3ae10 363             | .skip_poll
3ae10 363             | 
3ae10 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3ae14 364             | 
3ae14 364             | .nopoll
3ae14 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3ae18 365 44 00 90 AD |         if_z    jmp     #hsuspend
3ae1c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3ae20 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3ae24 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3ae28 369 1A 84 63 FD |                 getct   hr0
3ae2c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3ae30 36b             |         if ACTIVITY_LED >= 0
3ae30 36b             |         end
3ae30 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3ae34 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3ae38 36d 5C FF 9F FD |                 jmp     #hidle
3ae3c 36e             | ' Check for extended SE0 state on the bus
3ae3c 36e             | .se0_test
3ae3c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3ae40 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3ae44 370 22 A7 82 FA |                 rqpin   urx, dm
3ae48 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3ae4c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3ae50 373 24 F6 BF FD |                 call    #wait_txn_ok
3ae54 374 00 00 80 FF 
3ae58 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3ae5c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3ae5c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3ae60 377             | 
3ae60 377             | hsuspend
3ae60 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3ae64 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3ae68 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3ae6c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3ae70 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3ae74 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3ae78 37d             | 
3ae78 37d             |                 ' Fall through to resume wait loop
3ae78 37d             | 
3ae78 37d             | hwait_resume
3ae78 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3ae7c 37e 02 86 47 F0 |                 shr     hr1, #2
3ae80 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3ae84 380             |         if ACTIVITY_LED >= 0
3ae84 380             |         end
3ae84 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3ae88 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3ae8c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3ae90 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3ae94 384 18 00 90 AD |         if_z    jmp     #.resume
3ae98 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3ae9c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3aea0 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3aea4 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3aea8 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3aeac 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3aeb0 38b             | .resume
3aeb0 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3aeb4 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3aeb8 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3aebc 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3aec0 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3aec4 390 1F 70 63 FD |                 waitx   htmp
3aec8 391 22 07 28 FC |                 wypin   #OUT_J, dm
3aecc 392 01 70 47 F0 |                 shr     htmp, #1
3aed0 393 1F 70 63 FD |                 waitx   htmp
3aed4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3aed8 395 1A 92 62 FD |                 getct   iframe_ct_base
3aedc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3aee0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3aee4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3aee8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3aeec 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3aef0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3aef4 39c             | 
3aef4 39c             | '------------------------------------------------------------------------------
3aef4 39c             | ' Send preamble to enable low-speed HUB ports
3aef4 39c             | '------------------------------------------------------------------------------
3aef4 39c             | ' On entry:
3aef4 39c             | ' On exit:
3aef4 39c             | '   USB baud rate set to low-speed
3aef4 39c             | '------------------------------------------------------------------------------
3aef4 39c             | utx_pre
3aef4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3aef8 39d 40 46 62 FD |                 dirl    dp
3aefc 39e 28 02 64 FD |                 setq    #1
3af00 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3af04 3a0 58 44 62 FD |                 drvl    dm
3af08 3a1 59 46 62 FD |                 drvh    dp
3af0c 3a2             | 
3af0c 3a2 1E 00 00 FF 
3af10 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3af14 3a4             | 
3af14 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3af18 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3af1c 3a6 28 02 64 3D |         if_nc   setq    #1
3af20 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3af24 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3af28 3a9             | .l1
3af28 3a9             | 
3af28 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3af2c 3aa 40 46 62 FD |                 dirl    dp
3af30 3ab 28 02 64 FD |                 setq    #1
3af34 3ac 80 00 80 FF 
3af38 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3af3c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3af40 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3af44 3b0 41 46 62 FD |                 dirh    dp
3af48 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3af4c 3b2             | 
3af4c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3af50 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3af54 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3af58 3b5             | 
3af58 3b5             | hlut_end
3af58 3b5             |                 fit     $400
3af58 3b5             |                 orgh
3af58                 | if OVERLAP_MEMORY
3af58                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3af58                 | end
3af58                 | '------------------------------------------------------------------------------
3af58                 | ' Routines called from cog space.
3af58                 | '------------------------------------------------------------------------------
3af58                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3af58                 | '------------------------------------------------------------------------------
3af58                 | 
3af58                 | '------------------------------------------------------------------------------
3af58                 | ' USB host cog initialization.
3af58                 | '------------------------------------------------------------------------------
3af58                 | usb_host_init
3af58                 |                 ' Initialize buffer pointers
3af58                 |         if OVERLAP_MEMORY
3af58                 |         else
3af58     40 15 B0 FE |                 loc     pb, #hid_descr
3af5c                 |         end
3af5c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3af60                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3af60                 |                 {
3af60                 |                 }
3af60                 |         
3af60                 |                 {
3af60                 |                 }
3af60                 |                 'loc     pb,#hkbd_report
3af60                 |                 'mov     hkbd_report_p,pb
3af60                 | 
3af60     08 1D B0 FE |                 loc     pb, #hub_descr
3af64     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3af68     1D 1D B0 FE |                 loc     pb, #urx_buff
3af6c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3af70     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3af74     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3af78     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3af7c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3af80     18 15 B0 FE |                 loc     pb, #usb_cache_start
3af84     F7 55 02 F6 |                 mov     cache_start_p, pb
3af88     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3af8c     F7 57 02 F6 |                 mov     cache_end_p, pb
3af90                 | 
3af90                 |         if ERROR_LED >= 0
3af90                 |         end
3af90                 | 
3af90                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3af90                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3af90                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3af90                 | ' Configure and enable the Serial Host USB port.
3af90     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3af94                 | 
3af94                 | '------------------------------------------------------------------------------
3af94                 | ' Timing calculations happen before any interrupt(s) are enabled.
3af94                 | '------------------------------------------------------------------------------
3af94                 | ' On entry:
3af94                 | '   htmp - current CLKFREQ value.
3af94                 | '------------------------------------------------------------------------------
3af94                 | hinit_usb_timings
3af94                 | '                getct   htmp2
3af94     B8 59 02 F6 |                 mov     save_sysclk, htmp
3af98     8D 5B 80 FF 
3af9c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3afa0     18 30 63 FD |                 getqx   _12Mbps_
3afa4     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3afa8     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3afac     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3afb0     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3afb4     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3afb8     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3afbc     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3afc0     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3afc4     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3afc8     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3afcc     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3afd0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3afd4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3afd8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3afdc     80 00 00 FF 
3afe0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3afe4     18 2C 63 FD |                 getqx   _var_64_lower_
3afe8     19 2E 63 FD |                 getqy   _var_64_upper_
3afec     28 2C 63 FD |                 setq    _var_64_lower_
3aff0     65 CD 1D FF 
3aff4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3aff8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3affc     01 00 00 FF 
3b000     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3b004     18 2C 63 FD |                 getqx   _var_64_lower_
3b008     19 2E 63 FD |                 getqy   _var_64_upper_
3b00c     28 2C 63 FD |                 setq    _var_64_lower_
3b010     A1 07 00 FF 
3b014     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3b018     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3b01c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3b020     09 36 57 F0 |                 shr     _1us_, #9               wc
3b024     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3b028     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3b02c     18 38 63 FD |                 getqx   _10us_
3b030     09 38 57 F0 |                 shr     _10us_, #9              wc
3b034     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3b038     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3b03c     18 3A 63 FD |                 getqx   _33us_
3b040     09 3A 57 F0 |                 shr     _33us_, #9              wc
3b044     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3b048     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3b04c     18 3C 63 FD |                 getqx   _txn_err_
3b050     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3b054     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3b058     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3b05c     18 3E 63 FD |                 getqx   _500us_
3b060     09 3E 57 F0 |                 shr     _500us_, #9             wc
3b064     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3b068     01 00 00 FF 
3b06c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3b070     18 40 63 FD |                 getqx   _txn_ok_ls_
3b074     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3b078     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3b07c     01 00 00 FF 
3b080     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3b084     18 42 63 FD |                 getqx   _txn_ok_fs_
3b088     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3b08c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3b090     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3b094     05 00 00 FF 
3b098     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3b09c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3b0a0     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3b0a4     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3b0a8     1C 00 00 FF 
3b0ac     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3b0b0     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3b0b4     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3b0b8     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3b0bc     00 00 00 FF 
3b0c0     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3b0c4     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3b0c8     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3b0cc     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3b0d0     04 00 00 FF 
3b0d4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3b0d8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3b0dc     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3b0e0     8D 5B 00 FF 
3b0e4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3b0e8     18 4C 63 FD |                 getqx   _preamble_wait_
3b0ec     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3b0f0     01 00 00 FF 
3b0f4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3b0f8     18 2C 63 FD |                 getqx   _var_64_lower_
3b0fc     19 2E 63 FD |                 getqy   _var_64_upper_
3b100     28 2C 63 FD |                 setq    _var_64_lower_
3b104     01 00 00 FF 
3b108     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3b10c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3b110     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3b114     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3b118     FF FF 7F FF 
3b11c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3b120     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3b124     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3b128     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3b12c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3b130     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3b134     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3b138     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3b13c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3b140     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3b144     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3b148     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3b14c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3b150     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3b154     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3b158     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3b15c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3b160     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3b164     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3b168     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3b16c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3b170     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3b174     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3b178     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3b17c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3b180     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3b184     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3b188                 | '        _ret_   mov     _1sec_, save_sysclk
3b188                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3b188                 | '                ret
3b188                 | {
3b188                 | }
3b188                 | 
3b188                 | '------------------------------------------------------------------------------
3b188                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3b188                 | ' one. If it is, start the task progression that will configure the device for
3b188                 | ' use.
3b188                 | '------------------------------------------------------------------------------
3b188                 | ' On entry:
3b188                 | '   hconfig_base - start address of the cached config descriptor chain.
3b188                 | ' On exit:
3b188                 | '------------------------------------------------------------------------------
3b188                 | hparse_con_desc
3b188     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3b18c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3b190     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3b194     4E 70 FF F9 |                 movbyts htmp,#%%1032
3b198     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3b19c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3b19c                 | 
3b19c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3b1a0     6E ED 03 F1 |                 add     pa, hconfig_base
3b1a4     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3b1a8                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3b1a8                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3b1a8                 | ' that defines a keyboard and/or mouse.
3b1a8     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3b1ac                 | .next_intf
3b1ac     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3b1b0     BC 01 90 3D |         if_ae   jmp     #hset_config
3b1b4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3b1b8     75 F3 03 F1 |                 add     ptrb, hnext_desc
3b1bc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3b1c0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3b1c4     0C 00 90 AD |         if_z    jmp     #.intf
3b1c8     80 71 C7 FA |                 rdbyte  htmp, ptrb
3b1cc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3b1d0     D8 FF 9F FD |                 jmp     #.next_intf
3b1d4                 | .intf
3b1d4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3b1d8     00 90 07 F6 |                 mov     hpar3, #0
3b1dc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3b1e0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3b1e4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3b1e8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3b1ec                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3b1ec                 | 
3b1ec                 | .endp
3b1ec     80 71 C7 FA |                 rdbyte  htmp, ptrb
3b1f0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3b1f4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3b1f8     78 00 90 3D |         if_ae   jmp     #.get_device
3b1fc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3b200     75 F3 03 F1 |                 add     ptrb, hnext_desc
3b204     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3b208     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3b20c     64 00 90 AD |         if_z    jmp     #.get_device
3b210     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3b214     04 00 90 AD |         if_z    jmp     #.get_ep
3b218     D0 FF 9F FD |                 jmp     #.endp
3b21c                 | .get_ep
3b21c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3b220     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3b224     0F 86 67 F0 |                 shl     hr1, #8 + 7
3b228     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3b22c     3F 00 00 FF 
3b230     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3b234     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3b238     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3b23c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3b240     00 90 0F F2 |                 cmp     hpar3, #0               wz
3b244     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3b248     A0 FF 9F FD |                 jmp     #.endp
3b24c                 | .in_ep
3b24c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3b250     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3b254                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3b254     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3b258     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3b25c     8C FF 9F FD |                 jmp     #.endp
3b260                 | .out_ep
3b260     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3b264     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3b268                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3b268     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3b26c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3b270     78 FF 9F FD |                 jmp     #.endp
3b274                 | 
3b274                 | .get_device
3b274     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3b278     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3b27c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3b280     68 00 90 AD |         if_z    jmp     #.gamepad
3b284     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3b288     AC 00 90 AD |         if_z    jmp     #.hub
3b28c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3b290     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3b294     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3b298     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3b29c     4C 00 90 AD |         if_z    jmp     #.gamepad
3b2a0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3b2a4     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3b2a8                 | .keyboard
3b2a8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3b2ac                 |         if HAVE_MOUSE
3b2ac     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3b2b0                 |         else
3b2b0                 |         end
3b2b0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3b2b4     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3b2b8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3b2bc     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3b2c0     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3b2c4     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3b2c8                 |                 'debug(udec(kb_intf_num))
3b2c8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3b2c8     E0 FE 9F FD |                 jmp     #.next_intf
3b2cc                 | if HAVE_MOUSE
3b2cc                 | .mouse
3b2cc     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3b2d0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3b2d4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3b2d8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3b2dc     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3b2e0                 |                 'getbyte ms_interval, hr2, #3
3b2e0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3b2e4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3b2e8                 |                 'debug(udec(kb_intf_num))
3b2e8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3b2e8     C0 FE 9F FD |                 jmp     #.next_intf
3b2ec                 | end
3b2ec                 | .gamepad
3b2ec     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3b2f0     C7 71 63 F5 |                 xor     htmp, hpar2
3b2f4     3F 00 00 FF 
3b2f8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3b2fc     AC FE 9F AD |         if_z    jmp     #.next_intf
3b300                 |         if HAVE_MOUSE
3b300     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3b304     C7 71 63 F5 |                 xor     htmp, hpar2
3b308     3F 00 00 FF 
3b30c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3b310     98 FE 9F AD |         if_z    jmp     #.next_intf
3b314                 |         end
3b314     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3b318     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3b31c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3b320                 | 
3b320     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3b324     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3b328     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3b32c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3b330     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3b334                 |                 'debug(udec(gp_intf_num))
3b334                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3b334     74 FE 9F FD |                 jmp     #.next_intf
3b338                 | .hub
3b338     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3b33c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3b340     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3b344     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3b348     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3b34c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3b350     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3b354     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3b358     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3b35c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3b360     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3b364     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3b368     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3b36c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3b36c     3C FE 9F FD |                 jmp     #.next_intf
3b370                 | 
3b370                 | '------------------------------------------------------------------------------
3b370                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3b370                 | ' it according to its function, or functions. In the case of this boot protocol
3b370                 | ' keyboard/mouse class driver:
3b370                 | ' - SetConfiguration(config_num)
3b370                 | ' - SetProtocol(boot)
3b370                 | ' - SetIdle(indefinite)
3b370                 | ' - Enter the device interrupt IN polling task stage.
3b370                 | '------------------------------------------------------------------------------
3b370                 | ' On entry:
3b370                 | ' On exit:
3b370                 | '------------------------------------------------------------------------------
3b370                 | hset_config
3b370                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3b370                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3b370     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3b374     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3b378     00 00 0C F2 |                 cmp     0-0, #0                 wz
3b37c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3b380                 |         if HAVE_MOUSE
3b380     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3b384                 |         end
3b384     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3b388     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3b38c                 | .set_config
3b38c     6C 0E D0 FE |                 loc     ptra, #set_config
3b390     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3b394     6E ED 03 F1 |                 add     pa, hconfig_base
3b398     F6 8D C3 FA |                 rdbyte  hpar1, pa
3b39c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3b3a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3b3a4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3b3a8     A0 02 A0 FD |                 call    #control_write
3b3ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b3b0     2D 00 64 5D |         if_nz   ret
3b3b4                 | .kbd_config
3b3b4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3b3b8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3b3bc                 | 
3b3bc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3b3c0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3b3c4     3F 00 00 FF 
3b3c8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3b3cc     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3b3d0                 | 
3b3d0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3b3d4     34 0E D0 FE |                 loc     ptra, #set_protocol
3b3d8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3b3dc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3b3e0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3b3e4     A0 02 A0 FD |                 call    #control_write
3b3e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b3ec     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3b3f0     E4 02 90 5D |         if_nz   jmp     #.notify_client
3b3f4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3b3f8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3b3fc     30 03 B0 FD |                 call    #hset_idle
3b400                 |                 'cmp     retval, #PID_ACK        wz
3b400                 |         'if_nz   mov     hkbd_ep_addr, #0
3b400                 |         'if_nz   jmp     #.notify_client
3b400     A8 99 02 F6 |                 mov     hctwait, _2ms_
3b404     EF 02 A0 FD |                 call    #poll_waitx
3b408     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3b40c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3b410     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3b414     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3b418     2C 03 B0 FD |                 call    #hset_kbdled_report
3b41c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b420     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3b424     B0 02 90 5D |         if_nz   jmp     #.notify_client
3b428     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3b42c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3b430     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3b434     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3b438     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3b43c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3b440     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3b444     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3b448     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3b44c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3b450     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3b454                 |         if !!HAVE_MOUSE
3b454                 |         end
3b454                 | 
3b454                 | .mouse_config
3b454                 | if HAVE_MOUSE
3b454     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3b458     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3b45c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3b460     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3b464     3F 00 00 FF 
3b468     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3b46c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3b470                 | 
3b470                 |                 debug("mouse passed addr check")
3b470                 | 
3b470     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3b474     00 00 80 FF 
3b478     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3b47c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3b480     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3b484     55 02 A0 FD |                 call    #control_read
3b488     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b48c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3b490     44 02 90 5D |         if_nz   jmp     #.notify_client
3b494     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3b498     56 01 00 F6 |                 mov     0-0, total_data
3b49c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3b4a0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3b4a0                 | 
3b4a0     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3b4a4     64 0D D0 FE |                 loc     ptra, #set_protocol
3b4a8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3b4ac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3b4b0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3b4b4     A0 02 A0 FD |                 call    #control_write
3b4b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b4bc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3b4c0     14 02 90 5D |         if_nz   jmp     #.notify_client
3b4c4                 |                 debug("mouse passed SetProtocol")
3b4c4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3b4c8     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3b4cc     60 02 B0 FD |                 call    #hset_idle
3b4d0                 |                 'cmp     retval, #PID_ACK        wz
3b4d0                 |         'if_nz   mov     hmouse_ep_addr, #0
3b4d0                 |         'if_nz   jmp     #.notify_client
3b4d0                 |                 debug("mouse passed SetIdle")
3b4d0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3b4d4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3b4d8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3b4dc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3b4e0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3b4e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3b4e8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3b4ec     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3b4f0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3b4f4     3F 00 00 FF 
3b4f8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3b4fc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3b500     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3b504     D0 01 90 FD |                 jmp     #.notify_client
3b508                 | end
3b508                 | .gamepad_config
3b508                 | if _HAVE_GAMEPAD
3b508     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3b50c     00 00 0C F2 |                 cmp     0-0, #0                 wz
3b510     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3b514     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3b518     00 70 03 F6 |                 mov     htmp, 0-0
3b51c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3b520     3F 00 00 FF 
3b524     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3b528     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3b52c                 | 
3b52c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3b530     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3b534     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3b538     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3b53c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3b540     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3b544     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3b548     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3b54c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3b550     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3b554     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3b558     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3b55c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3b560     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3b564                 | 
3b564                 |                 if EMUPAD_MAX_PLAYER > 0
3b564                 |                 
3b564                 | .rule_loop           
3b564                 |                 end
3b564                 | 
3b564     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3b568     5C 00 90 AD |         if_e    jmp     #.xinput
3b56c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3b570     00 70 03 F6 |                 mov     htmp,0-0
3b574     01 A6 02 FF 
3b578     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3b57c     7C 00 90 AD |         if_e    jmp     #.ps3
3b580                 | 
3b580     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3b584     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3b588     00 00 80 5F 
3b58c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3b590     03 00 80 AF 
3b594     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3b598     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3b59c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3b5a0     55 02 A0 FD |                 call    #control_read
3b5a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b5a8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3b5ac     00 00 04 56 |         if_nz   mov     0-0, #0
3b5b0     24 01 90 5D |         if_nz   jmp     #.notify_client
3b5b4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3b5b8     56 01 00 F6 |                 mov     0-0, total_data
3b5bc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3b5c0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3b5c0                 | 
3b5c0     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3b5c4     10 01 90 FD |                 jmp     #.notify_client
3b5c8                 | .xinput
3b5c8     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3b5cc     2D EF 03 F6 |                 mov     pb,hdev_port
3b5d0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3b5d4     03 EE 27 F3 |                 fle     pb,#3
3b5d8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3b5dc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3b5e0                 | 
3b5e0     03 B0 06 F6 |                 mov     pkt_data, #3
3b5e4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3b5e8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3b5ec     5A 00 A0 FD |                 call    #txn_out
3b5f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3b5f4                 | 
3b5f4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3b5f8     DC 00 90 FD |                 jmp     #.notify_client
3b5fc                 | .ps3
3b5fc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3b600     2D EF 03 F6 |                 mov     pb,hdev_port
3b604     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3b608     04 EE 27 F3 |                 fle     pb,#4
3b60c     F7 EF C3 F9 |                 decod   pb
3b610     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3b614                 | 
3b614     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3b618     00 0C D0 FE |                 loc     ptra, #set_report
3b61c     01 00 80 FF 
3b620     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3b624     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3b628     03 61 5C FC |                 wrword  #48, ptra[wLength]
3b62c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3b630     A0 02 A0 FD |                 call    #control_write
3b634                 | 
3b634     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3b638     E0 0B D0 FE |                 loc     ptra, #set_report
3b63c     01 00 80 FF 
3b640     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3b644     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3b648     03 09 5C FC |                 wrword  #4, ptra[wLength]
3b64c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3b650     A0 02 A0 FD |                 call    #control_write
3b654     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3b658     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3b65c     00 00 04 56 |         if_nz   mov     0-0, #0
3b660     74 00 90 5D |         if_nz   jmp     #.notify_client
3b664                 | 
3b664     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3b668     6C 00 90 FD |                 jmp     #.notify_client
3b66c                 | end
3b66c                 | 
3b66c                 | .hub_config
3b66c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3b670     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3b674     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3b678     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3b67c     3F 00 00 FF 
3b680     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3b684     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3b688                 | 
3b688     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3b68c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3b690     26 EF 03 F6 |                 mov     pb, hub_descr_p
3b694     55 02 A0 FD |                 call    #control_read
3b698     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b69c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3b6a0     34 00 90 5D |         if_nz   jmp     #.notify_client
3b6a4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3b6a4                 | 
3b6a4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3b6a8     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3b6ac     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3b6b0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3b6b0                 | .pwr_loop
3b6b0     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3b6b4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3b6b8     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3b6bc     A0 02 A0 FD |                 call    #control_write
3b6c0     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3b6c4                 | 
3b6c4     B1 99 02 F6 |                 mov     hctwait, _500ms_
3b6c8     B0 99 02 F1 |                 add     hctwait, _100ms_
3b6cc     EF 02 A0 FD |                 call    #poll_waitx
3b6d0                 | 
3b6d0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3b6d4     00 00 90 FD |                 jmp     #.notify_client
3b6d8                 | 
3b6d8                 | .notify_client
3b6d8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3b6dc     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3b6e0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3b6e0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3b6e0     2D 00 64 FD |                 ret
3b6e4                 | 
3b6e4                 | '------------------------------------------------------------------------------
3b6e4                 | ' Initialize the keyboard/mouse data area to start-up values.
3b6e4                 | '------------------------------------------------------------------------------
3b6e4                 | ' On entry:
3b6e4                 | ' On exit:
3b6e4                 | '------------------------------------------------------------------------------
3b6e4                 | init_kbdm_data
3b6e4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3b6e8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3b6ec                 | 
3b6ec     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3b6f0     2B ED 03 F6 |                 mov     pa, cache_end_p
3b6f4                 | .loop
3b6f4     61 01 4C FC |                 wrbyte  #0, ptra++
3b6f8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3b6fc     F4 FF 9F CD |         if_b    jmp     #.loop
3b700                 |         
3b700                 |         if EMUPAD_MAX_PLAYER > 0
3b700                 |         end
3b700                 | 
3b700                 | 
3b700     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3b704                 | .regloop
3b704     00 EC 8F F9 |                 altd    pa
3b708     00 00 04 F6 |                 mov     0-0, #0
3b70c     01 EC 07 F1 |                 add     pa, #1
3b710     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3b714     EC FF 9F 5D |         if_nz   jmp     #.regloop
3b718                 | 
3b718     E1 E1 61 FF 
3b71c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3b720     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3b724     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3b728     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3b72c                 | 
3b72c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3b730                 | 
3b730                 | '------------------------------------------------------------------------------
3b730                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3b730                 | ' function.
3b730                 | '------------------------------------------------------------------------------
3b730                 | ' On entry:
3b730                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3b730                 | '   hpar2 - index number of the target interface.
3b730                 | ' On exit:
3b730                 | '------------------------------------------------------------------------------
3b730                 | hset_idle
3b730     A8 99 02 F6 |                 mov     hctwait, _2ms_
3b734     EF 02 A0 FD |                 call    #poll_waitx
3b738     D8 0A D0 FE |                 loc     ptra, #set_idle
3b73c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3b740     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3b744     A0 02 80 FD |                 jmp     #control_write
3b748                 | 
3b748                 | '------------------------------------------------------------------------------
3b748                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3b748                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3b748                 | '------------------------------------------------------------------------------
3b748                 | ' On entry:
3b748                 | '   ep_addr_pid - device address and enpoint for the request.
3b748                 | ' On exit:
3b748                 | '   retval - transaction result.
3b748                 | '------------------------------------------------------------------------------
3b748                 | hset_kbdled_report
3b748     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3b74c     CC 0A D0 FE |                 loc     ptra, #set_report
3b750     01 00 80 FF 
3b754     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3b758     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3b75c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3b760     27 EF 03 F6 |                 mov     pb, urx_buff_p
3b764     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3b768     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3b76c                 | 
3b76c                 | '------------------------------------------------------------------------------
3b76c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3b76c                 | '------------------------------------------------------------------------------
3b76c                 | ' On entry:
3b76c                 | ' On exit:
3b76c                 | '------------------------------------------------------------------------------
3b76c                 | hget_kbd_in_report
3b76c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3b770     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3b774     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3b778     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3b77c     CF 02 A0 FD |                 call    #do_int_in
3b780     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b784     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3b788                 | 
3b788     00 90 0F F2 |                 cmp     hpar3, #0               wz
3b78c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3b790                 | 
3b790     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3b794     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3b798     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3b79c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3b7a0                 | 
3b7a0     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3b7a4     18 00 B0 FD |                 call    #hkbd_compare
3b7a8                 |         if EMUPAD_MAX_PLAYER > 0
3b7a8                 |         end
3b7a8                 | 
3b7a8                 | .led_check
3b7a8     3B 71 03 F6 |                 mov     htmp, kb_led_states
3b7ac     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3b7b0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3b7b4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3b7b8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3b7bc     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3b7c0                 | 
3b7c0                 | '------------------------------------------------------------------------------
3b7c0                 | ' Compare current and previous keyboard data buffers for keypress changes.
3b7c0                 | '------------------------------------------------------------------------------
3b7c0                 | hkbd_compare
3b7c0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3b7c4     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3b7c8     61 73 07 FB |                 rdlong  htmp1, ptra++
3b7cc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3b7d0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3b7d4     61 73 07 FB |                 rdlong  htmp1, ptra++
3b7d8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3b7dc     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3b7e0     2D 00 64 AD |         if_z    ret
3b7e4                 | 
3b7e4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3b7e8                 | 
3b7e8                 |                 ' Handle modifiers
3b7e8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3b7ec     00 87 C7 FA |                 rdbyte  hr1, ptra
3b7f0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3b7f4     63 86 63 FD |                 mergew  hr1
3b7f8     08 EC 07 F6 |                 mov     pa,#8
3b7fc                 | .modloop
3b7fc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3b800     E8 8C 07 F6 |                 mov     hpar1,#$E8
3b804     F6 8D 83 F1 |                 sub     hpar1,pa
3b808     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3b80c     FB ED 6F FB |                 djnz    pa,#.modloop
3b810                 | 
3b810     6F E0 75 FD | .release        modc    _set    wc
3b814                 |                 'alts    hdev_port, #hid_report_p
3b814                 |                 'mov     ptra, hid_report_p
3b814     02 F0 07 F1 |                 add     ptra, #2
3b818     06 EC 07 F6 |                 mov     pa, #6
3b81c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3b820     20 00 90 AD |         if_z    jmp     #.rl3
3b824     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3b828     02 F2 07 F1 |                 add     ptrb, #2
3b82c     06 EE 07 F6 |                 mov     pb, #6
3b830     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3b834     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3b838     08 00 90 AD |         if_z    jmp     #.rl3
3b83c     FC EF 6F FB |                 djnz    pb, #.rl2
3b840     68 00 B0 FD |                 call    #hkbd_translate
3b844     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3b848                 | 
3b848     00 90 07 F6 |                 mov     hpar3, #0
3b84c     1F 90 27 F4 |                 bith    hpar3, #31
3b850                 | 
3b850     6F 00 74 FD | .press          modc    _clr    wc
3b854     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3b858     02 F0 07 F1 |                 add     ptra, #2
3b85c     06 EC 07 F6 |                 mov     pa, #6
3b860     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3b864     20 00 90 AD |         if_z    jmp     #.pl3
3b868     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3b86c     02 F2 07 F1 |                 add     ptrb, #2
3b870     06 EE 07 F6 |                 mov     pb, #6
3b874     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3b878     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3b87c     08 00 90 AD |         if_z    jmp     #.pl3
3b880     FC EF 6F FB |                 djnz    pb, #.pl2
3b884     24 00 B0 FD |                 call    #hkbd_translate
3b888     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3b88c                 | 
3b88c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3b890     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3b894     28 02 64 FD |                 setq #1
3b898     61 73 07 FB |                 rdlong  htmp1, ptra++
3b89c     28 02 64 FD |                 setq #1
3b8a0     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3b8a4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3b8a8                 | 
3b8a8     2D 00 64 FD |                 ret
3b8ac                 | 
3b8ac                 | '------------------------------------------------------------------------------
3b8ac                 | ' Translate keyboard scancode to ASCII
3b8ac                 | '------------------------------------------------------------------------------
3b8ac                 | ' On entry:
3b8ac                 | '   hpar1 - scancode
3b8ac                 | '   hpar2 - key modifiers state
3b8ac                 | '       c - pressed (0) or released (1) flag
3b8ac                 | ' On exit:
3b8ac                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3b8ac                 | '               30..17 = unused
3b8ac                 | '                   18 = scroll-lock state 
3b8ac                 | '                   17 = caps-lock state
3b8ac                 | '                   16 = num-lock state 
3b8ac                 | '                15..8 = key modifiers state
3b8ac                 | '                 7..0 = scancode
3b8ac                 | '------------------------------------------------------------------------------
3b8ac                 | hkbd_translate
3b8ac     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3b8b0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3b8b4     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3b8b8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3b8bc     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3b8c0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3b8c4                 | 
3b8c4                 |         if EMUPAD_MAX_PLAYER > 0
3b8c4                 | 
3b8c4                 |         if EMUPAD_BT0_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT1_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT2_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT3_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT4_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT5_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT6_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT7_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT8_BIT >= 0
3b8c4                 |         end
3b8c4                 |         if EMUPAD_BT9_BIT >= 0
3b8c4                 |         end
3b8c4                 | 
3b8c4                 |         end
3b8c4     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3b8c8     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3b8cc     1F 8C 47 F4 |                 bitc    hpar1, #31
3b8d0                 |         if KEYQUEUE_SIZE > 0
3b8d0     C4 09 B0 FE |                 loc pb,#keyq_head
3b8d4     F7 71 E3 FA |                 rdword htmp,pb
3b8d8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3b8dc     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3b8e0     B8 75 03 F6 |                 mov htmp2,htmp
3b8e4     04 74 07 FA |                 mul htmp2,#4
3b8e8     F7 75 03 F1 |                 add htmp2,pb
3b8ec     02 74 07 F1 |                 add htmp2,#2
3b8f0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3b8f4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3b8f8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3b8fc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3b900                 |         end
3b900     2D 00 7C FD |                 ret wcz
3b904                 | 
3b904                 | if HAVE_MOUSE
3b904                 | '------------------------------------------------------------------------------
3b904                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3b904                 | '------------------------------------------------------------------------------
3b904                 | ' On entry:
3b904                 | ' On exit:
3b904                 | '------------------------------------------------------------------------------
3b904                 | hget_mouse_in_report
3b904     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3b908     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3b90c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3b910     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3b914     CF 02 A0 FD |                 call    #do_int_in
3b918     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b91c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3b920                 | 
3b920     00 90 0F F2 |                 cmp     hpar3, #0               wz
3b924     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3b928                 | 
3b928     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3b92c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3b930     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3b934     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3b938                 | 
3b938     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3b93c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3b940     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3b944     01 90 87 31 |         if_ae   sub     hpar3, #1
3b948                 | 
3b948     40 09 90 FE |                 loc     pa, #mouse_limits
3b94c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3b950                 | 
3b950                 |                 ' load xacc,yacc,zacc
3b950     28 04 64 FD |                 setq    #3-1
3b954     80 87 07 FB |                 rdlong  hr1,ptrb
3b958                 |                 ' load limits and outptr
3b958     28 04 64 FD |                 setq    #3-1
3b95c     F6 73 03 FB |                 rdlong  htmp1,pa
3b960                 | 
3b960     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3b964     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3b968     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3b96c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3b970     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3b974     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3b978     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3b97c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3b980                 |               
3b980                 | 
3b980     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3b984     07 70 67 F7 |                 signx   htmp, #7
3b988     B8 87 03 F1 |                 add     hr1,htmp
3b98c     00 72 0F F2 |                 cmp     htmp1,#0 wz
3b990     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3b994     00 86 47 53 |         if_ne   fges    hr1,#0
3b998                 | 
3b998     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3b99c     07 70 67 F7 |                 signx   htmp, #7
3b9a0     B8 89 03 F1 |                 add     hr2,htmp
3b9a4     00 74 0F F2 |                 cmp     htmp2,#0 wz
3b9a8     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3b9ac     00 88 47 53 |         if_ne   fges    hr2,#0
3b9b0                 |                 
3b9b0                 | 
3b9b0     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3b9b4     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3b9b8     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3b9bc     B8 8B 03 A1 |         if_z    add     hr3,htmp
3b9c0                 | 
3b9c0     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3b9c4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3b9c8                 | 
3b9c8                 |                 ' write back accumulators
3b9c8     28 04 64 FD |                 setq    #3-1
3b9cc     80 87 67 FC |                 wrlong  hr1,ptrb
3b9d0                 |                 ' if outptr set, write X/Y words
3b9d0     00 76 0F F2 |                 cmp htmp3,#0                    wz
3b9d4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3b9d8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3b9dc     2D 00 64 FD |                 ret
3b9e0                 | end
3b9e0                 | 
3b9e0                 | '------------------------------------------------------------------------------
3b9e0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3b9e0                 | '------------------------------------------------------------------------------
3b9e0                 | ' On entry:
3b9e0                 | ' On exit:
3b9e0                 | '------------------------------------------------------------------------------
3b9e0                 | if _HAVE_GAMEPAD
3b9e0                 | hget_gp_in_report
3b9e0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3b9e4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3b9e8                 | 
3b9e8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3b9ec     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3b9f0     00 90 E3 F8 |                 getbyte hpar3
3b9f4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3b9f8     CF 02 A0 FD |                 call    #do_int_in
3b9fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ba00     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ba04                 | 
3ba04     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ba08     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ba0c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3ba0c                 | 
3ba0c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3ba10     00 70 E3 F8 |                 getbyte htmp                            ' |
3ba14     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3ba18     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3ba1c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3ba20     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3ba24     B8 01 C0 F8 |                 setbyte htmp                            ' |
3ba28                 | 
3ba28                 | ' Note: the following code compares the current and previous reports
3ba28                 | ' and process the data if there are changes to ease the debug output.
3ba28                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3ba28                 | ' gpPreReport buffer.
3ba28                 | 
3ba28                 |                 ' ----- start of block to remove
3ba28                 |                 {
3ba28                 |                 }
3ba28                 |                 ' ----- end of block to remove
3ba28     F4 04 90 FE |                 loc pa,#hpad_translate
3ba2c     2A EC 63 FD |                 push pa
3ba30                 | 
3ba30                 |                 ' FALL THROUGH !!!!
3ba30                 | 
3ba30                 | '------------------------------------------------------------------------------
3ba30                 | ' Decode controller report
3ba30                 | '------------------------------------------------------------------------------
3ba30                 | hid_decode
3ba30                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3ba30     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3ba34     00 04 00 FF 
3ba38     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3ba3c                 | 
3ba3c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ba40                 | 
3ba40     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3ba44     00 2A E3 F8 |                 getbyte hidr_type
3ba48     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3ba4c     34 02 90 AD |         if_z    jmp     #hpad_xinput
3ba50     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3ba54     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3ba58     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3ba5c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3ba60     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3ba64                 |                 
3ba64                 | 
3ba64                 | '------------------------------------------------------------------------------
3ba64                 | ' Handle HID controller (or mouse now
3ba64                 | ' On entry:
3ba64                 | '   ptrb - controller report
3ba64                 | '------------------------------------------------------------------------------
3ba64                 | hpad_hid
3ba64     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ba68     F7 F1 03 F6 |                 mov     ptra, pb
3ba6c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3ba70     00 EC 03 F6 |                 mov     pa, 0-0
3ba74                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3ba74     19 2A 3B FF 
3ba78     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3ba7c                 | 
3ba7c                 | .next
3ba7c     00 EC 5F F2 |                 cmps    pa, #0      wcz
3ba80     2D 00 7C ED |         if_be   ret     wcz
3ba84                 | 
3ba84     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3ba88     01 EC 87 F1 |                 sub     pa, #1
3ba8c     00 8E 07 F6 |                 mov     hpar2, #0
3ba90                 | 
3ba90     C6 71 03 F6 |                 mov     htmp, hpar1
3ba94     03 70 07 F5 |                 and     htmp, #$03
3ba98     01 70 0F F2 |                 cmp     htmp, #1    wz
3ba9c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3baa0     07 8E 67 A7 |         if_z    signx   hpar2,#7
3baa4     01 EC 87 A1 |         if_z    sub     pa, #1
3baa8     02 70 0F F2 |                 cmp     htmp, #2    wz
3baac     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3bab0     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3bab4     02 EC 87 A1 |         if_z    sub     pa, #2
3bab8     03 70 0F F2 |                 cmp     htmp, #3    wz
3babc     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3bac0     04 EC 87 A1 |         if_z    sub     pa, #4
3bac4                 | 
3bac4     FC 8C 07 F5 |                 and     hpar1, #$FC
3bac8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3bac8                 | 
3bac8     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3bacc     0C 01 90 AD |         if_z    jmp     #.report_id
3bad0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3bad4     24 01 90 AD |         if_z    jmp     #.usage_page
3bad8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3badc     2C 01 90 AD |         if_z    jmp     #.usage
3bae0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3bae4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3bae8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3baec     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3baf0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3baf4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3baf8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3bafc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3bb00     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3bb04     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3bb08     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3bb0c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3bb10     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3bb14     64 FF 9F 5D |         if_nz   jmp     #.next
3bb18                 | 
3bb18     D8 1D A7 FB |                 tjf     hidr_state,#.next
3bb1c                 | 
3bb1c     03 8E 07 F5 |                 and     hpar2, #$03
3bb20     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3bb24     18 00 90 5D |         if_nz   jmp     #.skip
3bb28                 | 
3bb28     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3bb2c     20 00 90 AD |         if_z    jmp     #.axes
3bb30     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3bb34     5C 00 90 AD |         if_z    jmp     #.hats
3bb38     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3bb3c     70 00 90 AD |         if_z    jmp     #.buttons
3bb40                 | .skip
3bb40     8F 71 03 F6 |                 mov     htmp, hidr_size
3bb44     90 71 03 FA |                 mul     htmp, hidr_count
3bb48     B8 23 03 F1 |                 add     hidr_offset, htmp
3bb4c     2C FF 9F FD |                 jmp     #.next
3bb50                 | .axes
3bb50                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3bb50     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3bb54     90 87 03 F6 |                 mov     hr1, hidr_count
3bb58                 | .l1
3bb58     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3bb5c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3bb60     04 03 B0 FD |                 call    #hpad_getbits
3bb64     64 03 B0 FD |                 call    #hpad_normalize
3bb68     06 84 1F F2 |                 cmp     hr0, #6         wcz
3bb6c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3bb70     00 88 43 C8 |         if_b    getnib  hr2
3bb74     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3bb78     5F 01 20 C9 |         if_b    setword retval
3bb7c     01 84 07 C1 |         if_b    add     hr0, #1
3bb80     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3bb84     F4 87 6F FB |                 djnz    hr1, #.l1
3bb88                 | 
3bb88     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3bb8c     01 1C 07 F6 |                 mov     hidr_state, #1
3bb90     E8 FE 9F FD |                 jmp     #.next
3bb94                 | .hats
3bb94                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3bb94     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3bb98     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3bb9c     C8 02 B0 FD |                 call    #hpad_getbits
3bba0     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3bba4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3bba8     01 1C 07 F6 |                 mov     hidr_state, #1
3bbac     90 FF 9F FD |                 jmp     #.skip
3bbb0                 | .buttons
3bbb0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3bbb0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3bbb4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3bbb8     90 8F 03 FA |                 mul     hpar2, hidr_count
3bbbc     A8 02 B0 FD |                 call    #hpad_getbits
3bbc0     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3bbc4     B8 BF 62 F0 |                 shl     retval, htmp
3bbc8     5F 17 43 F5 |                 or      hidr_buttons, retval
3bbcc     90 71 03 F1 |                 add     htmp, hidr_count
3bbd0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3bbd4     01 1C 07 F6 |                 mov     hidr_state, #1
3bbd8     64 FF 9F FD |                 jmp     #.skip
3bbdc                 | .report_id
3bbdc     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3bbe0     2D 00 7C 5D |         if_nz   ret     wcz
3bbe4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3bbe8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3bbec     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3bbf0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3bbf4     01 F2 87 51 |         if_nz   sub     ptrb,#1
3bbf8     80 FE 9F FD |                 jmp     #.next
3bbfc                 | .usage_page
3bbfc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3bc00     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3bc04     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3bc08     70 FE 9F FD |                 jmp     #.next
3bc0c                 | .usage
3bc0c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3bc10     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3bc14     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3bc18     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3bc1c     5C FE 9F AD |         if_z    jmp     #.next
3bc20     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3bc24     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3bc28     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3bc2c     4C FE 9F AD |         if_z    jmp     #.next
3bc30     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3bc34     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3bc38     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3bc3c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3bc40     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3bc44     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3bc48     10 00 90 AD |         if_z    jmp     #.usage_axis
3bc4c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3bc50     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3bc54     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3bc58     20 FE 9F FD |                 jmp     #.next
3bc5c                 | .usage_axis
3bc5c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3bc60     18 FE 9F CD |         if_b    jmp     #.next
3bc64     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3bc68     C7 01 00 F8 |                 setnib  hpar2
3bc6c                 | 
3bc6c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3bc70     C7 8F C3 F9 |                 decod   hpar2
3bc74     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3bc78                 | 
3bc78     01 24 07 F1 |                 add     hidr_usage_idx, #1
3bc7c     02 1C 07 F6 |                 mov     hidr_state, #2
3bc80     F8 FD 9F FD |                 jmp     #.next
3bc84                 | 
3bc84                 | '------------------------------------------------------------------------------
3bc84                 | ' Handle XInput controller
3bc84                 | ' On entry:
3bc84                 | '   ptrb - controller report
3bc84                 | '------------------------------------------------------------------------------
3bc84                 | '   Default implementation translates the report to a pseudo-defacto hid
3bc84                 | '   standard and jumps to hpad_translate for actions.
3bc84                 | '   Implementors may take specific actions for this kind of controller.
3bc84                 | '------------------------------------------------------------------------------
3bc84                 | hpad_xinput
3bc84     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3bc88     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3bc8c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3bc90     14 70 0F F2 |                 cmp     htmp, #$14      wz
3bc94     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3bc98                 | 
3bc98                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3bc98                 | 
3bc98     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3bc9c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3bca0                 | 
3bca0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3bca4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3bca8     5F BF 22 F6 |                 not     retval
3bcac     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3bcb0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3bcb4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3bcb8     5F BF 22 F6 |                 not     retval
3bcbc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3bcc0                 | 
3bcc0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3bcc4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3bcc8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3bccc     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3bcd0     F8 01 B0 FD |                 call    #hpad_normalize
3bcd4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3bcd8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3bcdc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3bce0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3bce4     E4 01 B0 FD |                 call    #hpad_normalize
3bce8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3bcec                 | 
3bcec     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3bcf0     81 BF E6 FA |                 rdword  retval, ptrb[1]
3bcf4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3bcf8     00 16 47 F4 |                 bitc    hidr_buttons, #0
3bcfc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3bd00     01 16 47 F4 |                 bitc    hidr_buttons, #1
3bd04     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3bd08     02 16 47 F4 |                 bitc    hidr_buttons, #2
3bd0c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3bd10     03 16 47 F4 |                 bitc    hidr_buttons, #3
3bd14     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3bd18     04 16 47 F4 |                 bitc    hidr_buttons, #4
3bd1c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3bd20     05 16 47 F4 |                 bitc    hidr_buttons, #5
3bd24     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3bd28     08 16 47 F4 |                 bitc    hidr_buttons, #8
3bd2c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3bd30     09 16 47 F4 |                 bitc    hidr_buttons, #9
3bd34     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3bd38     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3bd3c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3bd40     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3bd44     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3bd48     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3bd4c                 | 
3bd4c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3bd50     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3bd54     7A BB 7A FF 
3bd58     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3bd5c     F9 FF 7F FF 
3bd60     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3bd64     B9 71 5F F9 |                 altgn   htmp, #htmp1
3bd68     00 70 43 F8 |                 getnib  htmp
3bd6c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3bd70                 | 
3bd70     AC 01 90 FD |                 jmp     #hpad_translate
3bd74                 | 
3bd74                 | '------------------------------------------------------------------------------
3bd74                 | ' Handle PS3 controller
3bd74                 | ' On entry:
3bd74                 | '   ptrb - controller report
3bd74                 | '------------------------------------------------------------------------------
3bd74                 | '   Default implementation translates the report to a pseudo-defacto hid
3bd74                 | '   standard and jumps to hpad_translate for actions.
3bd74                 | '   Implementors may take specific actions for this kind of controller.
3bd74                 | '------------------------------------------------------------------------------
3bd74                 | hpad_ps3
3bd74     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3bd78     01 70 0F F2 |                 cmp     htmp, #$01      wz
3bd7c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3bd80                 | 
3bd80                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3bd80                 | 
3bd80     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3bd84     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3bd88     40 01 B0 FD |                 call    #hpad_normalize
3bd8c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3bd90     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3bd94     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3bd98     30 01 B0 FD |                 call    #hpad_normalize
3bd9c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3bda0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3bda4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3bda8     20 01 B0 FD |                 call    #hpad_normalize
3bdac     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3bdb0     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3bdb4     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3bdb8     10 01 B0 FD |                 call    #hpad_normalize
3bdbc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3bdc0     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3bdc4     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3bdc8                 | 
3bdc8     08 8C 07 F6 |                 mov     hpar1, #8
3bdcc     13 8E 07 F6 |                 mov     hpar2, #19
3bdd0     94 00 B0 FD |                 call    #hpad_getbits
3bdd4                 | 
3bdd4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3bdd8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3bddc     00 16 47 F4 |                 bitc    hidr_buttons, #0
3bde0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3bde4     01 16 47 F4 |                 bitc    hidr_buttons, #1
3bde8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3bdec     02 16 47 F4 |                 bitc    hidr_buttons, #2
3bdf0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3bdf4     03 16 47 F4 |                 bitc    hidr_buttons, #3
3bdf8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3bdfc     04 16 47 F4 |                 bitc    hidr_buttons, #4
3be00     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3be04     05 16 47 F4 |                 bitc    hidr_buttons, #5
3be08     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3be0c     06 16 47 F4 |                 bitc    hidr_buttons, #6
3be10     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3be14     07 16 47 F4 |                 bitc    hidr_buttons, #7
3be18     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3be1c     08 16 47 F4 |                 bitc    hidr_buttons, #8
3be20     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3be24     09 16 47 F4 |                 bitc    hidr_buttons, #9
3be28     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3be2c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3be30     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3be34     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3be38     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3be3c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3be40                 | 
3be40     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3be44     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3be48     09 FA 79 FF 
3be4c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3be50     FF FA 7F FF 
3be54     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3be58     B9 71 5F F9 |                 altgn   htmp, #htmp1
3be5c     00 70 43 F8 |                 getnib  htmp
3be60     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3be64                 | 
3be64     B8 00 90 FD |                 jmp     #hpad_translate
3be68                 | 
3be68                 | '------------------------------------------------------------------------------
3be68                 | ' Read bits from report data buffer
3be68                 | '------------------------------------------------------------------------------
3be68                 | ' On entry:
3be68                 | '   PTRB - report buffer
3be68                 | '   hpar1 - start bit
3be68                 | '   hpar2 - number of bits
3be68                 | ' On exit:
3be68                 | '   retval - bits
3be68                 | '------------------------------------------------------------------------------
3be68                 | hpad_getbits
3be68     C6 71 03 F6 |                 mov     htmp, hpar1
3be6c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3be70     F9 71 03 F1 |                 add     htmp, ptrb
3be74     B8 BF 02 FB |                 rdlong  retval, htmp
3be78                 | 
3be78     C6 73 03 F6 |                 mov     htmp1, hpar1
3be7c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3be80     B9 BF 42 F0 |                 shr     retval, htmp1
3be84                 | 
3be84     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3be88     10 00 90 1D |         if_a    jmp     #.l1
3be8c                 | 
3be8c     C7 8F C3 F9 |                 decod   hpar2
3be90     01 8E 87 F1 |                 sub     hpar2, #1
3be94     C7 BF 02 F5 |                 and     retval, hpar2
3be98     2D 00 64 FD |                 ret
3be9c                 | .l1
3be9c     FF 7F 00 FF 
3bea0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3bea4     03 70 07 F1 |                 add     htmp, #3
3bea8     B8 75 03 FB |                 rdlong  htmp2, htmp
3beac     18 8E 87 F1 |                 sub     hpar2, #24
3beb0     C7 8F C3 F9 |                 decod   hpar2
3beb4     01 8E 87 F1 |                 sub     hpar2, #1
3beb8     B9 75 43 F0 |                 shr     htmp2, htmp1
3bebc     C7 75 03 F5 |                 and     htmp2, hpar2
3bec0     18 74 67 F0 |                 shl     htmp2, #24
3bec4     BA BF 42 F5 |                 or      retval, htmp2
3bec8     2D 00 64 FD |                 ret
3becc                 | 
3becc                 | '------------------------------------------------------------------------------
3becc                 | ' Normalize value to signed word (-32768 / 32767)
3becc                 | '------------------------------------------------------------------------------
3becc                 | ' On entry:
3becc                 | '   retval - value to normalize
3becc                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3becc                 | '   - or -
3becc                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3becc                 | '   hidr_size - value bits length
3becc                 | ' On exit:
3becc                 | '   retval - normalized value
3becc                 | '------------------------------------------------------------------------------
3becc                 | hpad_normalize
3becc     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3bed0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3bed4     2D 00 64 AD |         if_z    ret
3bed8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3bedc     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3bee0     0F 72 77 F7 |                 signx   htmp1, #15      wc
3bee4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3bee8     00 BE 66 C7 |         if_c    signx   retval, #0-0
3beec     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3bef0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3bef4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3bef8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3befc     B8 71 53 F6 |                 abs     htmp            wc
3bf00     1F BE 0E F4 |                 testb   retval, #31     wz
3bf04     5F BF 42 F6 |                 abs     retval
3bf08     B8 BF 12 FD |                 qdiv    retval, htmp
3bf0c     18 BE 62 FD |                 getqx   retval
3bf10     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3bf14     C0 FF 7F FF 
3bf18     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3bf1c     2D 00 64 FD |                 ret
3bf20                 | 
3bf20                 | '------------------------------------------------------------------------------
3bf20                 | ' Perform controller actions
3bf20                 | ' On entry:
3bf20                 | '    hidr_id        report id
3bf20                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3bf20                 | '                      X = hidr_axis+0, #0
3bf20                 | '                      Y = hidr_axis+0, #1
3bf20                 | '                      Z = hidr_axis+1, #0
3bf20                 | '                     RX = hidr_axis+1, #1
3bf20                 | '                     RY = hidr_axis+2, #0
3bf20                 | '                     RZ = hidr_axis+2, #1
3bf20                 | '    hidr_buttons   buttons state (bits 0 to 31)
3bf20                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3bf20                 | '
3bf20                 | '                     -------3 -------2 -------1 -------0 byte
3bf20                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3bf20                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3bf20                 | '                                zyx||| |||||||| ++++++++ n. buttons
3bf20                 | '                                |||||| ||||++++--------- n. axes
3bf20                 | '                                |||||| ++++------------- n. hats
3bf20                 | '                                ++++++------------------ valid axes
3bf20                 | '------------------------------------------------------------------------------
3bf20                 | hpad_translate
3bf20                 | 
3bf20                 | 
3bf20                 |         if HAVE_HIDPAD
3bf20     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3bf24     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3bf28     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3bf2c     01 70 E7 F2 |                 cmpsub  htmp,#1
3bf30     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3bf34     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3bf38     2D 00 7C 3D |         if_ae   ret     wcz
3bf3c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3bf40     B8 F3 03 F1 |                 add     ptrb,htmp
3bf44     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3bf48     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3bf4c     28 0C 64 FD |                 setq    #7-1
3bf50     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3bf54                 |         end
3bf54                 | 
3bf54                 | 
3bf54                 |         if EMUPAD_MAX_PLAYER > 0
3bf54                 | .emupad_no_hat
3bf54                 |         if EMUPAD_BT0_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT1_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT2_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT3_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT4_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT5_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT6_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT7_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT8_BIT >= 0
3bf54                 |         end
3bf54                 |         if EMUPAD_BT9_BIT >= 0
3bf54                 |         end
3bf54                 | .emupad_slot_over
3bf54                 |         end
3bf54                 | 
3bf54                 |         if 0
3bf54                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3bf54                 | 
3bf54                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3bf54                 | 
3bf54                 |         end
3bf54     2D 00 64 FD |                 ret
3bf58                 | end
3bf58                 | 
3bf58                 | if EMUPAD_MAX_PLAYER > 0
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | ' Clear EmuPad state
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | emupad_reset
3bf58                 | 
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | ' Get EmuPad Player number for current device (into retval)
3bf58                 | ' Z flag is also set if current device is valid
3bf58                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | emupad_getnum
3bf58                 | .loop
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | emupad_discon
3bf58                 | .loop         
3bf58                 |         
3bf58                 |         ' FALL THROUGH!!!
3bf58                 | 
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | ' Update EmuPad reports (all of them...)
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | emupad_write_reports
3bf58                 | .devloop
3bf58                 | 
3bf58                 | end
3bf58                 | 
3bf58                 | 
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | ' On entry:
3bf58                 | ' On exit:
3bf58                 | '------------------------------------------------------------------------------
3bf58                 | hget_hub_status
3bf58     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3bf5c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3bf60     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3bf64     01 90 2F F9 |                 setword hpar3, #1, #1
3bf68     CF 02 A0 FD |                 call    #do_int_in
3bf6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3bf70     0C 00 90 AD |         if_z    jmp     #.data
3bf74     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3bf78     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3bf7c     2D 00 64 FD |                 ret
3bf80                 | .data
3bf80     00 90 0F F2 |                 cmp     hpar3, #0               wz
3bf84     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3bf88                 | 
3bf88     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3bf8c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3bf90     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3bf94     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3bf98                 |                 debug(ubin_long(hub_status_chg))
3bf98                 | 
3bf98     01 5A 06 F6 |                 mov     hdev_port, #1
3bf9c                 | .loop
3bf9c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3bfa0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3bfa4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3bfa8     F0 FF 9F 3D |         if_nc   jmp     #.loop
3bfac     2D 00 64 FD |                 ret
3bfb0                 | 
3bfb0                 | hub_port_handler
3bfb0     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3bfb4     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3bfb8     27 EF 03 F6 |                 mov     pb, urx_buff_p
3bfbc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3bfc0     55 02 A0 FD |                 call    #control_read
3bfc4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3bfc8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3bfc8                 | 
3bfc8     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3bfcc     50 01 90 5D |         if_x0   jmp     #.other
3bfd0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3bfd4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3bfd8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3bfdc     A0 02 A0 FD |                 call    #control_write
3bfe0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3bfe4     7C 01 90 5D |         if_x0   jmp     #.disconnect
3bfe8     B0 99 02 F6 |                 mov     hctwait, _100ms_
3bfec     EF 02 A0 FD |                 call    #poll_waitx
3bff0                 | 
3bff0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3bff4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3bff8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3bffc     A0 02 A0 FD |                 call    #control_write
3c000                 | 
3c000     02 76 07 F6 |                 mov     htmp3, #2
3c004                 | .wait_reset
3c004     AC 99 02 F6 |                 mov     hctwait, _8ms_
3c008     EF 02 A0 FD |                 call    #poll_waitx
3c00c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3c010     27 EF 03 F6 |                 mov     pb, urx_buff_p
3c014     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3c018     55 02 A0 FD |                 call    #control_read
3c01c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3c020     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3c024     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3c028                 | 
3c028     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3c02c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3c030     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3c034     A0 02 A0 FD |                 call    #control_write
3c038                 | 
3c038     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3c03c                 | .wait_recover
3c03c     A7 99 02 F6 |                 mov     hctwait, _1ms_
3c040     EF 02 A0 FD |                 call    #poll_waitx
3c044     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3c048                 | 
3c048     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3c04c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3c050     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3c054                 | 
3c054     00 08 00 FF 
3c058     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3c05c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3c060     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3c064     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3c068     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3c06c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c070     48 01 90 5D |         if_nz   jmp     #.done
3c074                 | .get_dev_desc
3c074     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3c078     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3c07c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3c080     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3c084     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3c088     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3c08c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3c090     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c094     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3c098     AC 99 02 F6 |                 mov     hctwait, _8ms_
3c09c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3c0a0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3c0a4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3c0a8     BE 00 A0 FD |                 call    #calc_crc5
3c0ac     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3c0b0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3c0b4     F7 AD C2 FA |                 rdbyte  total_data, pb
3c0b8     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3c0bc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3c0c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c0c4     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3c0c8     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3c0cc     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3c0d0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3c0d0     9F 99 02 F6 |                 mov     hctwait, _500us_
3c0d4     EF 02 A0 FD |                 call    #poll_waitx
3c0d8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3c0dc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3c0e0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3c0e4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3c0e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3c0ec     CC 00 90 5D |         if_nz   jmp     #.done
3c0f0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3c0f4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3c0f8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3c0fc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3c100     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3c104     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3c108     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3c10c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3c110     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3c114     A4 00 90 CD |         if_b    jmp     #.done
3c118     6C F0 BF FD |                 call    #hparse_con_desc
3c11c     9C 00 90 FD |                 jmp     #.done
3c120                 | 
3c120                 | .other
3c120     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3c124     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3c128     28 00 90 AD |         if_x1   jmp     #.reset_feature
3c12c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3c130     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3c134     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3c138     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3c13c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3c140     10 00 90 AD |         if_x1   jmp     #.reset_feature
3c144     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3c148     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3c14c     04 00 90 AD |         if_x1   jmp     #.reset_feature
3c150     68 00 90 FD |                 jmp     #.done
3c154                 | .reset_feature
3c154     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3c158     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3c15c     A0 02 A0 FD |                 call    #control_write
3c160     58 00 90 FD |                 jmp     #.done
3c164                 | .disconnect
3c164                 | 
3c164     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3c168     00 70 E3 F8 |                 getbyte htmp
3c16c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3c170     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3c174     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3c178     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3c17c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3c180     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3c184                 |         if EMUPAD_MAX_PLAYER > 0
3c184                 |         end
3c184                 |         if HAVE_MOUSE
3c184     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3c188     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3c18c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3c190                 |         end
3c190                 |         if HAVE_HIDPAD
3c190     14 0A F0 FE |                 loc ptrb,#hidpad_report
3c194     2D 71 03 F6 |                 mov htmp,hdev_port
3c198     01 70 E7 F2 |                 cmpsub htmp,#1
3c19c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3c1a0     B8 F3 03 F1 |                 add ptrb,htmp
3c1a4     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3c1a8     80 01 6C FC |                 wrlong #0,ptrb
3c1ac                 |         end
3c1ac                 | 
3c1ac     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3c1b0     00 00 C4 F8 |                 setbyte #0
3c1b4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3c1b8     00 00 04 F6 |                 mov     0-0, #0
3c1bc                 | 
3c1bc                 | .done
3c1bc     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3c1c0     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3c1c4     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3c1c8     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3c1cc     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3c1d0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3c1d4                 | 
3c1d4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3c1d8     27 EF 03 F6 |                 mov     pb, urx_buff_p
3c1dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3c1e0     55 02 A0 FD |                 call    #control_read
3c1e4     00 69 06 FB |                 rdlong  hub_port_status, ptra
3c1e8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3c1e8     2D 00 64 FD |                 ret
3c1ec                 | 
3c1ec                 | '------------------------------------------------------------------------------
3c1ec                 | ' Partially populated SETUP packets
3c1ec                 | '------------------------------------------------------------------------------
3c1ec     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3c1ed     06          |                 byte    REQ_GET_DESC
3c1ee     00 01       |                 word    TYPE_DEVICE << 8
3c1f0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3c1f2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3c1f4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3c1f5     06          |                 byte    REQ_GET_DESC
3c1f6     00 02       |                 word    TYPE_CONFIG << 8
3c1f8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3c1fa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3c1fc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3c1fd     09          |                 byte    REQ_SET_CONFIG
3c1fe     00 00       |                 word    0       ' Configuration value
3c200     00 00       |                 word    0       ' Zero
3c202     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3c204     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3c205     05          |                 byte    REQ_SET_ADDR
3c206     00 00       |                 word    0       ' Zero
3c208     00 00       |                 word    0       ' Zero
3c20a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3c20c                 | '------------------------------------------------------------------------------
3c20c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3c20c                 | ' wValue field dictates which protocol should be used.
3c20c                 | '
3c20c                 | ' When initialized, all devices default to report protocol. However the host
3c20c                 | ' should not make any assumptions about the device state and should set the
3c20c                 | ' desired protocol whenever initializing a device.
3c20c                 | '------------------------------------------------------------------------------
3c20c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3c20d     0B          |                 byte    HID_SET_PROTO
3c20e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3c210                 |                                                 ' (HID 1.11 Section 7.2.6).
3c210     00 00       |                 word    0               ' Interface index number.
3c212     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3c214                 | '------------------------------------------------------------------------------
3c214     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3c215     0A          |                 byte    HID_SET_IDLE
3c216     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3c218                 |                                         ' reporting until a change is detected in the report data
3c218                 | 
3c218                 |                                         ' (HID 1.11 Section 7.2.4).
3c218     00 00       |                 word    0       ' Interface index number.
3c21a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3c21c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3c21d     09          |                 byte    HID_SET_REPORT
3c21e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3c220                 |                                         ' (HID 1.11 Section 7.2.2).
3c220     00 00       |                 word    0       ' Interface index number.
3c222     00 00       |                 word    0       ' Size of the report, in bytes.
3c224     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3c225     06          |                 byte    REQ_GET_DESC
3c226     00 22       |                 word    TYPE_REPORT << 8
3c228     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3c22a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3c22c                 | '------------------------------------------------------------------------------
3c22c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3c22d     06          |                 byte    REQ_GET_DESC
3c22e     00 29       |                 word    TYPE_HUB << 8
3c230     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3c232     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3c234     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3c235     03          |                 byte    REQ_SET_FEATURE
3c236     00 00       |                 word    0       ' port power
3c238     01 00       |                 word    1       ' Port index number (1+)
3c23a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3c23c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3c23d     01          |                 byte    REQ_CLEAR_FEATURE
3c23e     00 00       |                 word    0       ' port power
3c240     01 00       |                 word    1       ' Port index number (1+)
3c242     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3c244     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3c245     00          |                 byte    REQ_GET_STATUS
3c246     00 00       |                 word    0
3c248     01 00       |                 word    1       ' Port index number (1+)
3c24a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3c24c                 | '------------------------------------------------------------------------------
3c24c                 | if _HAVE_GAMEPAD
3c24c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3c250                 | ps3_command_buff
3c250     00 00 00 00 
3c254     00          |                 byte    $00, $00, $00, $00, $00
3c255     00 00 00 00 
3c259     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3c25a     FF 27 10 00 
3c25e     32          |                 byte    $FF, $27, $10, $00, $32
3c25f     FF 27 10 00 
3c263     32          |                 byte    $FF, $27, $10, $00, $32
3c264     FF 27 10 00 
3c268     32          |                 byte    $FF, $27, $10, $00, $32
3c269     FF 27 10 00 
3c26d     32          |                 byte    $FF, $27, $10, $00, $32
3c26e     00 00 00 00 
3c272     00          |                 byte    $00, $00, $00, $00, $00
3c273     00 00 00 00 
3c277     00          |                 byte    $00, $00, $00, $00, $00
3c278     00 00 00 00 
3c27c     00          |                 byte    $00, $00, $00, $00, $00
3c27d     00 00 00    |                 byte    $00, $00, $00
3c280                 | '------------------------------------------------------------------------------
3c280     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3c283                 |                                         ' 0x01 All blinking
3c283                 |                                         ' 0x02 1 flashes, then on
3c283                 |                                         ' 0x03 2 flashes, then on
3c283                 |                                         ' 0x04 3 flashes, then on
3c283                 |                                         ' 0x05 4 flashes, then on
3c283                 |                                         ' 0x06 1 on
3c283                 |                                         ' 0x07 2 on
3c283                 |                                         ' 0x08 3 on
3c283                 |                                         ' 0x09 4 on
3c283                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3c283                 |                                         ' 0x0B Blinking*
3c283                 |                                         ' 0x0C Slow blinking*
3c283                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3c283     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3c286     00          |                 byte    $00             ' Left rumble
3c287     00          |                 byte    $00             ' Right rumble
3c288     00 00 00    |                 byte    $00, $00, $00
3c28b     00          | end
3c28c                 | alignl
3c28c                 | 
3c28c                 | if HAVE_MOUSE
3c28c     00 00 00 00 
3c290     00 00 00 00 | mouse_limits long 0[2]
3c294     00 00 00 00 | mouse_outptr long 0
3c298                 | end
3c298                 | 
3c298                 | if KEYQUEUE_SIZE > 0
3c298     00          | keyq_head byte 0
3c299     00          | keyq_tail byte 0
3c29a     00 00 00 00 
      ...             
3c496     00 00 00 00 
3c49a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3c49c                 | alignl
3c49c                 | end
3c49c                 | 
3c49c                 | if EMUPAD_MAX_PLAYER > 0
3c49c                 | emupad_rule_buffer
3c49c                 | if EMUPAD_BUILTIN_RULES
3c49c                 | file "padmap_builtin.dat"
3c49c                 | end
3c49c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3c49c                 | '' Default rule directly follows!
3c49c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3c49c                 | end
3c49c                 | 
3c49c                 | '------------------------------------------------------------------------------
3c49c                 | ' The USB data cache area gets zero-filled at every device disconnect
3c49c                 | '------------------------------------------------------------------------------
3c49c                 | usb_cache_start
3c49c                 | 
3c49c                 | ' HID descriptor and report buffers
3c49c                 | if !!OVERLAP_MEMORY
3c49c     00 00 00 00 
      ...             
3cb94     00 00 00 00 
3cb98     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3cb9c                 | end
3cb9c     00 00 00 00 
3cba0     00 00 00 00 | hkbd_report     byte    0[8]
3cba4     00 00 00 00 | hkbd_led_rep    byte    0
3cba8                 | alignl
3cba8                 | 
3cba8                 | if HAVE_HIDPAD
3cba8     00 00 00 00 
      ...             
3cc64     00 00 00 00 
3cc68     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3cc6c                 | end
3cc6c                 | 
3cc6c                 | ' HUB descriptor
3cc6c     00          | hub_descr       byte    0   ' bDescLength
3cc6d     00          |                 byte    0   ' bDescriptorType
3cc6e     00          |                 byte    0   ' bNbrPorts
3cc6f     00 00       |                 word    0   ' wHubCharacteristics
3cc71     00          |                 byte    0   ' bPwrOn2PwrGood
3cc72     00          |                 byte    0   ' bHubContrCurrent
3cc73     00          |                 byte    0   ' DeviceRemoveable
3cc74     00          |                 byte    0   ' PortPwrCtrlMask
3cc75                 | 
3cc75                 | usb_cache_end
3cc75                 | 
3cc75                 | if HAVE_MOUSE
3cc75     00 00 00 00 | mouse_xacc      long 0
3cc79     00 00 00 00 | mouse_yacc      long 0
3cc7d     00 00 00 00 | mouse_zacc      long 0
3cc81     00          | mouse_bstate    byte 0
3cc82     00          | mouse_lpending  byte 0
3cc83     00          | mouse_rpending  byte 0
3cc84     00          | mouse_mpending  byte 0
3cc85     00          | mouse_lock      byte 0
3cc86     00 00 00    |                 byte 0[3] ' padding
3cc89                 | end
3cc89                 | 
3cc89     00 00 00 00 
      ...             
3cd01     00 00 00 00 
3cd05     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3cd09     00 00 00 00 
3cd0d     00 00 00 00 
3cd11     00 00 00 00 
3cd15     00 00 00 00 
3cd19     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3cd1b     00 00 00 00 
      ...             
3ce13     00 00 00 00 
3ce17     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3ce1b                 | 
3ce1b     00          | driver_cog      byte    0                       ' Current driver cog + 1
3ce1c                 | 	alignl
3ce1c                 | _audio096_spin2_dat_
3ce1c                 | 
3ce1c                 | audio       org     0
3ce1c                 | 
3ce1c     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3ce20     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3ce24     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3ce28                 |  
3ce28     01 EC 63 FD |             cogid   pa                   ' compute cogid
3ce2c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3ce30     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3ce34     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3ce38                 | 
3ce38     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3ce3c     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3ce40     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3ce44     0F 24 06 FC |             wrpin   dac2,#right
3ce48     0F 00 1E FC |             wxpin   #256,#right    
3ce4c     41 9C 64 FD |             dirh    #left addpins 1
3ce50     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3ce54     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3ce58     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3ce5c                 |             
3ce5c                 | '---------------------------------------------------------------------------------        
3ce5c                 | '----------------- The main loop -------------------------------------------------
3ce5c                 | '---------------------------------------------------------------------------------
3ce5c                 | 
3ce5c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3ce60     10 00 90 CD |       if_c  jmp     #loop1
3ce64                 |   
3ce64     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3ce68     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3ce6c     D5 00 80 F1 |             sub     0-0,a40000000
3ce70     FD 01 6E FB |             djnz    cn,#p402
3ce74                 |     
3ce74     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3ce78     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3ce7c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3ce80     01 00 06 C6 |     if_c    mov     cn,#1
3ce84     DA 02 3A F3 |             fle     ct,time3 wcz
3ce88     02 00 06 C6 |     if_c    mov     cn,#2     
3ce8c     DB 02 3A F3 |             fle     ct,time4 wcz
3ce90     03 00 06 C6 |     if_c    mov     cn,#3
3ce94     DC 02 3A F3 |             fle     ct,time5 wcz
3ce98     04 00 06 C6 |     if_c    mov     cn,#4
3ce9c     DD 02 3A F3 |             fle     ct,time6 wcz
3cea0     05 00 06 C6 |     if_c    mov     cn,#5
3cea4     DE 02 3A F3 |             fle     ct,time7 wcz
3cea8     06 00 06 C6 |     if_c    mov     cn,#6
3ceac     DF 02 3A F3 |             fle     ct,time8 wcz
3ceb0     07 00 06 C6 |     if_c    mov     cn,#7
3ceb4                 | 
3ceb4                 | 
3ceb4                 | '----------------------------------------------------------------------------------
3ceb4                 | '------------- Compute channel samples --------------------------------------------
3ceb4                 | '----------------------------------------------------------------------------------
3ceb4                 | 
3ceb4                 | 
3ceb4     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3ceb8     06 C0 65 F0 |             shl     channeladd,#6
3cebc     E0 F0 03 F1 |             add     ptra,channeladd
3cec0                 | 
3cec0     28 16 64 FD |             setq    #11                        	' read parameters
3cec4     00 D7 05 FB |             rdlong  pointer0,ptra
3cec8                 |     	    
3cec8     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3cecc     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3ced0     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3ced4     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3ced8     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3cedc     00 C4 0D F2 |             cmp     qq,#0 wz                         
3cee0     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3cee4     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3cee8                 |             
3cee8     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3ceec     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3cef0     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3cef4                 | 
3cef4     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3cef8     EC 08 3A F9 |             getword oldrs,sample0,#1
3cefc     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3cf00     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3cf04     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3cf08     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3cf0c                 | 
3cf0c     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3cf10     00 04 02 F6 |             mov     dt0,0-0    
3cf14     D7 04 82 F1 |             sub     dt0,time0
3cf18                 |             
3cf18     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3cf1c     FB 00 00 F1 |             add     0-0,afreq0  	
3cf20                 |             
3cf20                 | '---- envelopes
3cf20                 |             
3cf20     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3cf24     20 00 00 AF 
3cf28     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3cf2c     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3cf30                 | 
3cf30     FB 48 02 F6 |             mov     envs1,afreq0
3cf34     F5 48 02 FA |             mul     envs1,envspd0
3cf38     24 E7 01 F1 |             add     envph0,envs1 
3cf3c                 | 
3cf3c     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3cf40     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3cf44     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3cf48     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3cf4c     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3cf50     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3cf54     00 46 06 36 |     if_ge   mov     envlo,#0
3cf58     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3cf5c     16 E6 65 30 |     if_ge   shl     envph0,#22
3cf60                 | 
3cf60     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3cf64     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3cf68     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3cf6c     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3cf70     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3cf74     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3cf78     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3cf7c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3cf80     23 49 02 FA |             mul     envs1,envlo
3cf84     25 49 02 F1 |             add     envs1,envs2
3cf88     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3cf8c                 |             
3cf8c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3cf90     1B C6 61 AD |     if_z    getrnd  spl
3cf94     58 00 90 AD |     if_z    jmp     #p406
3cf98                 |  
3cf98     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3cf9c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3cfa0     08 D6 45 F0 |             shr     pointer0,#8
3cfa4                 |          
3cfa4     1F DA 0D F4 |             testb   sstart0,#31 wz            
3cfa8     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3cfac     1C DA 0D F4 |             testb   sstart0,#28 wz            
3cfb0     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3cfb4                 |         
3cfb4     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3cfb8     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3cfbc     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3cfc0                 |             
3cfc0     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3cfc4     ED C4 01 F1 |             add     qq,sstart0            
3cfc8                 | 
3cfc8     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3cfcc     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3cfd0     1C 01 B0 1D |     if_gt   call    #cache_read
3cfd4                 |          
3cfd4     1F DA 0D F4 |             testb   sstart0,#31 wz 
3cfd8     08 C6 65 50 |     if_nz   shl     spl,#8
3cfdc     08 D6 65 50 |     if_nz   shl     pointer0,#8
3cfe0     07 D6 65 A0 |     if_z    shl     pointer0,#7
3cfe4     1C DA 0D F4 |             testb   sstart0,#28 wz            
3cfe8     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3cfec     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3cff0                 | 
3cff0                 | 
3cff0     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3cff4     00 C6 01 F6 |             mov     spl,0-0
3cff8     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3cffc     00 C6 01 F6 |             mov     spl,0-0
3d000                 | 
3d000     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3d004     00 0A 02 F6 |             mov     ls0,0-0
3d008     20 00 00 FF 
3d00c     00 C4 05 F6 |             mov     qq,##16384
3d010     FE C4 81 F1 |             sub     qq,apan0
3d014     E2 C6 31 FA |             scas    spl,qq
3d018     00 0C 02 F6 |             mov     rs0, 0-0
3d01c                 | 
3d01c     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3d020     06 11 02 F1 |             add     rs,rs0
3d024     03 0F 82 F1 |             sub     ls,oldls
3d028     05 0F 02 F1 |             add     ls,ls0
3d02c                 |    
3d02c     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3d030     05 D9 21 F9 |             setword sample0,ls0,#0
3d034                 |             
3d034     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3d038     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3d03c     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3d040                 |   '  if_z    mov     sample0,#0
3d040     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3d044     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3d048     04 00 00 AF 
3d04c     00 B0 05 A1 |     if_z    add     time1,##2048
3d050     D8 B2 01 A6 |     if_z    mov     time2,time1
3d054     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3d058                 | 
3d058     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3d05c     00 D7 65 FC |             wrlong  pointer0,ptra
3d060     08 E7 65 FC |             wrlong  envph0,ptra[8]
3d064     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3d068                 |                       
3d068     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3d06c     FF C3 25 A7 |     if_z    decmod  front, #511          
3d070                 |          
3d070     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3d074     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3d078     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3d07c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3d080                 | 	    
3d080                 | 		    
3d080     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3d084     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3d088     04 15 02 F6 |             mov     newsample, oldrs       
3d08c                 | 
3d08c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3d090     02 AF 01 F1 |             add     time0,dt0    
3d094                 |                                      
3d094     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3d098     D8 FD 9F AD |     if_z    jmp     #loop1
3d09c     02 C5 01 F6 |             mov     qq,dt0
3d0a0                 | 
3d0a0                 |     
3d0a0                 |             
3d0a0     01 4E 36 F0 | p301        rol     dropper,#1 wc
3d0a4     40 00 90 3D |     if_nc   jmp     #p399
3d0a8     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3d0ac     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3d0b0     F4 FF 9F AD |     if_e    jmp     #p398   
3d0b4                 | 		
3d0b4     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3d0b8     20 00 90 AD |     if_z    jmp     #p302	   
3d0bc                 |   
3d0bc     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3d0c0     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3d0c4     02 1E 66 C0 |     if_c    shl     scptr2,#2
3d0c8     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3d0cc     60 1E 66 FC |             wrlong  scptr2,#$60
3d0d0     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3d0d4     01 00 00 CF 
3d0d8     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3d0dc                 | 			    
3d0dc     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3d0e0     00 00 00 FF 
3d0e4     FF C3 05 F7 |             incmod  front, ##511
3d0e8     ED C5 6D FB | p399        djnz    qq,#p301
3d0ec                 |             
3d0ec     6C FD 9F FD |             jmp     #loop            'loop
3d0f0                 | 
3d0f0                 | '----------------------------------------------------------------------------------
3d0f0                 | '------------- This is the end of the main loop -----------------------------------
3d0f0                 | '----------------------------------------------------------------------------------
3d0f0                 | 
3d0f0                 | '----------------------------------------------------------------------------------
3d0f0                 | '------------- PSRAM cache ----------- --------------------------------------------
3d0f0                 | '----------------------------------------------------------------------------------
3d0f0                 | 
3d0f0                 | ' There are 8 cache pointers for 8 channels
3d0f0                 | ' if 24 higher bits of address=cache, then get a word from the cache
3d0f0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3d0f0                 | 
3d0f0                 | 
3d0f0     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3d0f4                 |             
3d0f4     E2 40 02 F6 | 	    mov     addrhi,qq		
3d0f8     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3d0fc     14 01 96 F9 | 	    alts    cn,#cache1            
3d100     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3d104     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3d108                 | 	
3d108     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3d10c     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3d110     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3d114     08 38 66 F0 | 	    shl     cmd,#8
3d118     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3d11c     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3d120     08 3A 66 F0 |             shl     hubaddr,#8                  '
3d124     13 3B 02 F1 |             add     hubaddr,hubptr 
3d128     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3d12c     28 04 64 FD |             setq    #2                          ' write 3 longs
3d130     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3d134     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3d138     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3d13c                 |             
3d13c                 | 	
3d13c     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3d140     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3d144     13 C5 01 F1 | 	    add     qq,hubptr
3d148     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3d14c     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3d150                 |           
3d150                 | 
3d150                 | '--------------------------------------------------------------------------
3d150                 | '------ Interrupt service -------------------------------------------------
3d150                 | '------ Output the sample, get the next one if exists ---------------------
3d150                 | '--------------------------------------------------------------------------
3d150                 | 
3d150     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3d154     0F D0 25 FC |             wypin   rsample,#right       '4
3d158     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3d15c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3d160     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3d164     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3d168     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3d16c                 |     
3d16c     F5 FF 3B FB |             reti1                        '17/19 
3d170                 |           
3d170                 | '---------------------------------------------------------------------------
3d170                 | '-------- End of interrupt -------------------------------------------------
3d170                 | '---------------------------------------------------------------------------    
3d170                 | 
3d170                 | 
3d170                 | '---------------------------------------------------------------------------
3d170                 | '------- Variables ---------------------------------------------------------
3d170                 | '---------------------------------------------------------------------------
3d170                 | 
3d170                 | ' constants
3d170                 | 
3d170     00 00 00 40 | a40000000   long $40000000
3d174     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3d178                 | 
3d178                 | ' Time variables
3d178                 | 
3d178     00 00 00 00 | time0       long 0    ' Global sample computing time
3d17c     01 00 00 00 | time1       long 1    ' Local channels time
3d180     02 00 00 00 | time2       long 2
3d184     03 00 00 00 | time3       long 3
3d188     04 00 00 00 | time4       long 4
3d18c     05 00 00 00 | time5       long 5
3d190     06 00 00 00 | time6       long 6
3d194     07 00 00 00 | time7       long 7
3d198     08 00 00 00 | time8       long 8
3d19c                 | 
3d19c     00 00 00 00 | channeladd long 0
3d1a0                 | 
3d1a0     00 00 00 00 | front       long 0
3d1a4                 | 
3d1a4                 | ' temporary variables 
3d1a4     00 00 00 00 | qq          long 0
3d1a8     00 00 00 00 | spl         long 0
3d1ac     00 00 00 00 | zero        long 0
3d1b0     00 00 00 00 | mailbox     long 0
3d1b4     00 00 00 00 | mailbox2 long 0
3d1b8                 | 
3d1b8                 | ' Interrupt ISR variables
3d1b8                 | 
3d1b8     00 00 00 00 | lsample     long 0
3d1bc     00 00 00 00 | rsample     long 0
3d1c0     00 00 00 00 | lsnext      long 0
3d1c4     00 00 00 00 | rsnext      long 0 
3d1c8                 | 
3d1c8                 | ' channel parameter block
3d1c8                 | 
3d1c8     00 00 00 00 | pointer0    long 0     
3d1cc     00 00 00 00 | sample0     long 0
3d1d0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3d1d4     00 00 00 00 | lstart0     long 0
3d1d8     00 00 00 00 | lend0       long 0
3d1dc     00 00 00 00 | volpan0     long 0
3d1e0     00 00 00 00 | freqskip0   long 0
3d1e4     00 00 00 00 | command0    long 0
3d1e8     00 00 00 00 | envph0	    long 0
3d1ec     00 00 00 00 | envptr0	    long 0
3d1f0     00 00 00 00 | envspd0	    long 0
3d1f4     00 00 00 00 | envlen0	    long 0
3d1f8     00 00 00 00 | res5	    long 0
3d1fc     00 00 00 00 | res6	    long 0
3d200     00 00 00 00 | res7	    long 0
3d204     00 00 00 00 | res8	    long 0
3d208                 | 
3d208     00 00 00 00 | afreq0      long 0
3d20c     00 00 00 00 | askip0      long 0
3d210     00 00 00 00 | avol0       long 0
3d214     00 00 00 00 | apan0       long 0
3d218                 | 
3d218     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3d21c     00 00 00 00 | cn          long 0
3d220     00 00 00 00 | ct          long 0
3d224     00 00 00 00 | dt0         long 0
3d228                 | 
3d228                 | ' Samples
3d228     00 00 00 00 | oldls       long 0
3d22c     00 00 00 00 | oldrs       long 0
3d230                 | 
3d230     00 00 00 00 | ls0         long 0
3d234     00 00 00 00 | rs0         long 0
3d238                 | 
3d238     00 00 00 00 | ls          long 0    
3d23c     00 00 00 00 | rs          long 0
3d240                 | 
3d240     00 00 00 00 | oldsample   long 0
3d244     00 00 00 00 | newsample   long 0
3d248                 | 
3d248     00 00 00 00 | nrsample    long 0
3d24c     00 00 00 00 | nlsample    long 0
3d250                 | 
3d250     00 00 00 00 | scbase long 0
3d254     00 00 00 00 | scptr long 0
3d258     00 00 00 00 | scptr2 long 0
3d25c     00 00 00 00 | scope long 0
3d260                 | 
3d260     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3d264     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3d268                 | 
3d268     00 18 07 00 | hubptr      long $71800
3d26c     00 00 00 00 | cache1      long 0
3d270     00 00 00 00 | cache2      long 0
3d274     00 00 00 00 | cache3      long 0
3d278     00 00 00 00 | cache4      long 0
3d27c     00 00 00 00 | cache5      long 0
3d280     00 00 00 00 | cache6      long 0
3d284     00 00 00 00 | cache7      long 0
3d288     00 00 00 00 | cache8      long 0
3d28c                 | 
3d28c                 | 
3d28c     00 00 00 00 | cmd         long 0
3d290     00 00 00 00 | hubaddr     long 0
3d294     00 01 00 00 | count       long 256
3d298     00 00 00 00 | addrlo long 0
3d29c     00 00 00 00 | addrhi long 0
3d2a0     00 00 00 00 | pointer00 long 0
3d2a4     00 00 00 00 | envhi long 0
3d2a8     00 00 00 00 | envlo long 0
3d2ac     00 00 00 00 | envs1 long 0
3d2b0     00 00 00 00 | envs2 long 0
3d2b4     00 00 00 00 | noise0 long 0
3d2b8     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3d2bc     00 00 00 00 
3d2c0     00 00 00 00 | null  			long 	0,0           ' for channel reset
3d2c4                 | 	alignl
3d2c4                 | __system__dat_
3d2c4     00 00 00 00 
3d2c8     00 00 00 00 | 	byte	$00[8]
3d2cc     03 00 00 00 
3d2d0     00 00 00 00 
3d2d4     00 00 00 00 
3d2d8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d2dc     00 00 00 00 
      ...             
3d568     00 00 00 00 
3d56c     00 00 00 00 | 	byte	$00[660]
3d570     00 00 D0 09 | 	long	(157 {__system____root_opendir})<<20
3d574     00 00 E0 09 | 	long	(158 {__system____root_closedir})<<20
3d578     00 00 F0 09 | 	long	(159 {__system____root_readdir})<<20
3d57c     00 00 00 0A | 	long	(160 {__system____root_stat})<<20
3d580     00 00 00 00 
3d584     00 00 00 00 
3d588     00 00 00 00 
3d58c     00 00 00 00 
3d590     00 00 00 00 
3d594     00 00 00 00 
3d598     00 00 00 00 | 	byte	$00[28]
3d59c     04 D6 03 00 | 	long	@@@__system__dat_ + 832
3d5a0     07 D6 03 00 | 	long	@@@__system__dat_ + 835
3d5a4     28 D6 03 00 | 	long	@@@__system__dat_ + 868
3d5a8     41 D6 03 00 | 	long	@@@__system__dat_ + 893
3d5ac     5C D6 03 00 | 	long	@@@__system__dat_ + 920
3d5b0     76 D6 03 00 | 	long	@@@__system__dat_ + 946
3d5b4     86 D6 03 00 | 	long	@@@__system__dat_ + 962
3d5b8     98 D6 03 00 | 	long	@@@__system__dat_ + 980
3d5bc     AA D6 03 00 | 	long	@@@__system__dat_ + 998
3d5c0     BC D6 03 00 | 	long	@@@__system__dat_ + 1016
3d5c4     C8 D6 03 00 | 	long	@@@__system__dat_ + 1028
3d5c8     D9 D6 03 00 | 	long	@@@__system__dat_ + 1045
3d5cc     ED D6 03 00 | 	long	@@@__system__dat_ + 1065
3d5d0     F7 D6 03 00 | 	long	@@@__system__dat_ + 1075
3d5d4     07 D7 03 00 | 	long	@@@__system__dat_ + 1091
3d5d8     16 D7 03 00 | 	long	@@@__system__dat_ + 1106
3d5dc     2C D7 03 00 | 	long	@@@__system__dat_ + 1128
3d5e0     45 D7 03 00 | 	long	@@@__system__dat_ + 1153
3d5e4     59 D7 03 00 | 	long	@@@__system__dat_ + 1173
3d5e8     67 D7 03 00 | 	long	@@@__system__dat_ + 1187
3d5ec     7B D7 03 00 | 	long	@@@__system__dat_ + 1207
3d5f0     87 D7 03 00 | 	long	@@@__system__dat_ + 1219
3d5f4     99 D7 03 00 | 	long	@@@__system__dat_ + 1237
3d5f8     B1 D7 03 00 | 	long	@@@__system__dat_ + 1261
3d5fc     C3 D7 03 00 | 	long	@@@__system__dat_ + 1279
3d600     D6 D7 03 00 | 	long	@@@__system__dat_ + 1298
3d604     4F 4B 00 4E 
3d608     75 6D 65 72 
3d60c     69 63 61 6C 
3d610     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3d614     75 6D 65 6E 
3d618     74 20 6F 75 
3d61c     74 20 6F 66 
3d620     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3d624     61 69 6E 00 
3d628     52 65 73 75 
3d62c     6C 74 20 6E 
3d630     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3d634     65 70 72 65 
3d638     73 65 6E 74 
3d63c     61 62 6C 65 
3d640     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3d644     65 67 61 6C 
3d648     20 6D 75 6C 
3d64c     74 69 62 79 
3d650     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3d654     65 71 75 65 
3d658     6E 63 65 00 
3d65c     4E 6F 20 73 
3d660     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3d664     66 69 6C 65 
3d668     20 6F 72 20 
3d66c     64 69 72 65 
3d670     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3d674     79 00 42 61 
3d678     64 20 66 69 
3d67c     6C 65 20 6E 
3d680     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3d684     72 00 50 65 
3d688     72 6D 69 73 
3d68c     73 69 6F 6E 
3d690     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3d694     69 65 64 00 
3d698     4E 6F 74 20 
3d69c     65 6E 6F 75 
3d6a0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3d6a4     65 6D 6F 72 
3d6a8     79 00 54 65 
3d6ac     6D 70 6F 72 
3d6b0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3d6b4     66 61 69 6C 
3d6b8     75 72 65 00 
3d6bc     46 69 6C 65 
3d6c0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3d6c4     73 74 73 00 
3d6c8     49 6E 76 61 
3d6cc     6C 69 64 20 
3d6d0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3d6d4     6D 65 6E 74 
3d6d8     00 54 6F 6F 
3d6dc     20 6D 61 6E 
3d6e0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3d6e4     65 6E 20 66 
3d6e8     69 6C 65 73 
3d6ec     00 49 2F 4F 
3d6f0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3d6f4     6F 72 00 4E 
3d6f8     6F 74 20 61 
3d6fc     20 64 69 72 
3d700     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3d704     72 79 00 49 
3d708     73 20 61 20 
3d70c     64 69 72 65 
3d710     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3d714     79 00 52 65 
3d718     61 64 20 6F 
3d71c     6E 6C 79 20 
3d720     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3d724     20 73 79 73 
3d728     74 65 6D 00 
3d72c     46 75 6E 63 
3d730     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3d734     20 6E 6F 74 
3d738     20 69 6D 70 
3d73c     6C 65 6D 65 
3d740     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3d744     00 44 69 72 
3d748     65 63 74 6F 
3d74c     72 79 20 6E 
3d750     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3d754     6D 70 74 79 
3d758     00 4E 61 6D 
3d75c     65 20 74 6F 
3d760     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3d764     6E 67 00 44 
3d768     65 76 69 63 
3d76c     65 20 6E 6F 
3d770     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3d774     65 6B 61 62 
3d778     6C 65 00 42 
3d77c     61 64 20 61 
3d780     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3d784     73 73 00 42 
3d788     72 6F 6B 65 
3d78c     6E 20 63 6F 
3d790     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3d794     74 69 6F 6E 
3d798     00 44 65 76 
3d79c     69 63 65 20 
3d7a0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3d7a4     65 73 6F 75 
3d7a8     72 63 65 20 
3d7ac     62 75 73 79 
3d7b0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3d7b4     73 73 20 64 
3d7b8     65 76 69 63 
3d7bc     65 20 6C 69 
3d7c0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3d7c4     6F 20 73 70 
3d7c8     61 63 65 20 
3d7cc     6F 6E 20 64 
3d7d0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3d7d4     65 00 55 6E 
3d7d8     6B 6E 6F 77 
3d7dc     6E 20 65 72 
3d7e0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3d7e4     00 00 00 00 
3d7e8     00 00 00 00 
3d7ec     00 00 00 00 | 	byte	$00[12]
3d7f0     05 00 00 00 
3d7f4     00 00 00 00 
3d7f8     00 00 00 00 
3d7fc     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d800     00 00 00 00 | 	byte	$00, $00, $00, $00
3d804     00 00 50 0B | 	long	(181 {__system___tx})<<20
3d808     00 00 60 0B | 	long	(182 {__system___rx})<<20
3d80c     00 00 00 00 | 	byte	$00, $00, $00, $00
3d810     00 00 70 0B | 	long	(183 {__system___rxtxioctl_0720})<<20
3d814     00 00 80 0B | 	long	(184 {__system____dummy_flush_0721})<<20
3d818     00 00 00 00 
3d81c     00 00 00 00 | 	byte	$00[8]
3d820     01 00 00 00 
3d824     06 00 00 00 
3d828     00 00 00 00 
3d82c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d830     00 00 00 00 
3d834     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3d838     00 00 50 0B | 	long	(181 {__system___tx})<<20
3d83c     00 00 60 0B | 	long	(182 {__system___rx})<<20
3d840     00 00 00 00 | 	byte	$00, $00, $00, $00
3d844     00 00 70 0B | 	long	(183 {__system___rxtxioctl_0720})<<20
3d848     00 00 80 0B | 	long	(184 {__system____dummy_flush_0721})<<20
3d84c     00 00 00 00 
3d850     00 00 00 00 | 	byte	$00[8]
3d854     01 00 00 00 
3d858     06 00 00 00 
3d85c     00 00 00 00 
3d860     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d864     00 00 00 00 
3d868     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3d86c     00 00 50 0B | 	long	(181 {__system___tx})<<20
3d870     00 00 60 0B | 	long	(182 {__system___rx})<<20
3d874     00 00 00 00 | 	byte	$00, $00, $00, $00
3d878     00 00 70 0B | 	long	(183 {__system___rxtxioctl_0720})<<20
3d87c     00 00 80 0B | 	long	(184 {__system____dummy_flush_0721})<<20
3d880     00 00 00 00 
      ...             
3d9f0     00 00 00 00 
3d9f4     00 00 00 00 | 	byte	$00[376]
3d9f8     FC D9 03 00 | 	long	@@@__system__dat_ + 1848
3d9fc     00 00 00 00 
3da00     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3da04                 | 	alignl
3da04                 | _fatfs_cc_dat_
3da04     C7 00 FC 00 
3da08     E9 00 E2 00 
3da0c     E4 00 E0 00 
3da10     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3da14     EA 00 EB 00 
3da18     E8 00 EF 00 
3da1c     EE 00 EC 00 
3da20     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3da24     C9 00 E6 00 
3da28     C6 00 F4 00 
3da2c     F6 00 F2 00 
3da30     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3da34     FF 00 D6 00 
3da38     DC 00 F8 00 
3da3c     A3 00 D8 00 
3da40     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3da44     E1 00 ED 00 
3da48     F3 00 FA 00 
3da4c     F1 00 D1 00 
3da50     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3da54     BF 00 AE 00 
3da58     AC 00 BD 00 
3da5c     BC 00 A1 00 
3da60     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3da64     91 25 92 25 
3da68     93 25 02 25 
3da6c     24 25 C1 00 
3da70     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3da74     A9 00 63 25 
3da78     51 25 57 25 
3da7c     5D 25 A2 00 
3da80     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3da84     14 25 34 25 
3da88     2C 25 1C 25 
3da8c     00 25 3C 25 
3da90     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3da94     5A 25 54 25 
3da98     69 25 66 25 
3da9c     60 25 50 25 
3daa0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3daa4     F0 00 D0 00 
3daa8     CA 00 CB 00 
3daac     C8 00 31 01 
3dab0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3dab4     CF 00 18 25 
3dab8     0C 25 88 25 
3dabc     84 25 A6 00 
3dac0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3dac4     D3 00 DF 00 
3dac8     D4 00 D2 00 
3dacc     F5 00 D5 00 
3dad0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3dad4     DE 00 DA 00 
3dad8     DB 00 D9 00 
3dadc     FD 00 DD 00 
3dae0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3dae4     AD 00 B1 00 
3dae8     17 20 BE 00 
3daec     B6 00 A7 00 
3daf0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3daf4     B0 00 A8 00 
3daf8     B7 00 B9 00 
3dafc     B3 00 B2 00 
3db00     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3db04     61 00 1A 03 
3db08     E0 00 17 03 
3db0c     F8 00 07 03 
3db10     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3db14     78 01 00 01 
3db18     30 01 32 01 
3db1c     06 01 39 01 
3db20     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3db24     2E 01 79 01 
3db28     06 01 80 01 
3db2c     4D 00 43 02 
3db30     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3db34     82 01 84 01 
3db38     84 01 86 01 
3db3c     87 01 87 01 
3db40     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3db44     8B 01 8B 01 
3db48     8D 01 8E 01 
3db4c     8F 01 90 01 
3db50     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3db54     93 01 94 01 
3db58     F6 01 96 01 
3db5c     97 01 98 01 
3db60     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3db64     9B 01 9C 01 
3db68     9D 01 20 02 
3db6c     9F 01 A0 01 
3db70     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3db74     A2 01 A4 01 
3db78     A4 01 A6 01 
3db7c     A7 01 A7 01 
3db80     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3db84     AB 01 AC 01 
3db88     AC 01 AE 01 
3db8c     AF 01 AF 01 
3db90     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3db94     B3 01 B3 01 
3db98     B5 01 B5 01 
3db9c     B7 01 B8 01 
3dba0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3dba4     BB 01 BC 01 
3dba8     BC 01 BE 01 
3dbac     F7 01 C0 01 
3dbb0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3dbb4     C3 01 C4 01 
3dbb8     C5 01 C4 01 
3dbbc     C7 01 C8 01 
3dbc0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3dbc4     CB 01 CA 01 
3dbc8     CD 01 10 01 
3dbcc     DD 01 01 00 
3dbd0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3dbd4     12 01 F3 01 
3dbd8     03 00 F1 01 
3dbdc     F4 01 F4 01 
3dbe0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3dbe4     22 02 12 01 
3dbe8     3A 02 09 00 
3dbec     65 2C 3B 02 
3dbf0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3dbf4     66 2C 3F 02 
3dbf8     40 02 41 02 
3dbfc     41 02 46 02 
3dc00     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3dc04     40 00 81 01 
3dc08     86 01 55 02 
3dc0c     89 01 8A 01 
3dc10     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3dc14     5A 02 90 01 
3dc18     5C 02 5D 02 
3dc1c     5E 02 5F 02 
3dc20     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3dc24     62 02 94 01 
3dc28     64 02 65 02 
3dc2c     66 02 67 02 
3dc30     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3dc34     6A 02 62 2C 
3dc38     6C 02 6D 02 
3dc3c     6E 02 9C 01 
3dc40     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3dc44     9D 01 73 02 
3dc48     74 02 9F 01 
3dc4c     76 02 77 02 
3dc50     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3dc54     7A 02 7B 02 
3dc58     7C 02 64 2C 
3dc5c     7E 02 7F 02 
3dc60     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3dc64     82 02 A9 01 
3dc68     84 02 85 02 
3dc6c     86 02 87 02 
3dc70     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3dc74     B1 01 B2 01 
3dc78     45 02 8D 02 
3dc7c     8E 02 8F 02 
3dc80     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3dc84     B7 01 7B 03 
3dc88     03 00 FD 03 
3dc8c     FE 03 FF 03 
3dc90     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3dc94     86 03 88 03 
3dc98     89 03 8A 03 
3dc9c     B1 03 11 03 
3dca0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3dca4     A3 03 A3 03 
3dca8     C4 03 08 03 
3dcac     CC 03 03 00 
3dcb0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3dcb4     8F 03 D8 03 
3dcb8     18 01 F2 03 
3dcbc     0A 00 F9 03 
3dcc0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3dcc4     F5 03 F6 03 
3dcc8     F7 03 F7 03 
3dccc     F9 03 FA 03 
3dcd0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3dcd4     20 03 50 04 
3dcd8     10 07 60 04 
3dcdc     22 01 8A 04 
3dce0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3dce4     0E 01 CF 04 
3dce8     01 00 C0 04 
3dcec     D0 04 44 01 
3dcf0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3dcf4     00 00 7D 1D 
3dcf8     01 00 63 2C 
3dcfc     00 1E 96 01 
3dd00     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3dd04     00 1F 08 06 
3dd08     10 1F 06 06 
3dd0c     20 1F 08 06 
3dd10     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3dd14     40 1F 06 06 
3dd18     51 1F 07 00 
3dd1c     59 1F 52 1F 
3dd20     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3dd24     5D 1F 56 1F 
3dd28     5F 1F 60 1F 
3dd2c     08 06 70 1F 
3dd30     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3dd34     BB 1F C8 1F 
3dd38     C9 1F CA 1F 
3dd3c     CB 1F DA 1F 
3dd40     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3dd44     F9 1F EA 1F 
3dd48     EB 1F FA 1F 
3dd4c     FB 1F 80 1F 
3dd50     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3dd54     08 06 A0 1F 
3dd58     08 06 B0 1F 
3dd5c     04 00 B8 1F 
3dd60     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3dd64     BC 1F CC 1F 
3dd68     01 00 C3 1F 
3dd6c     D0 1F 02 06 
3dd70     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3dd74     E5 1F 01 00 
3dd78     EC 1F F3 1F 
3dd7c     01 00 FC 1F 
3dd80     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3dd84     32 21 70 21 
3dd88     10 02 84 21 
3dd8c     01 00 83 21 
3dd90     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3dd94     30 2C 2F 04 
3dd98     60 2C 02 01 
3dd9c     67 2C 06 01 
3dda0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3dda4     80 2C 64 01 
3dda8     00 2D 26 08 
3ddac     41 FF 1A 03 
3ddb0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3ddb4     05 07 09 0E 
3ddb8     10 12 14 16 
3ddbc     18 1C 1E 43 
3ddc0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3ddc4     41 41 43 45 
3ddc8     45 45 49 49 
3ddcc     49 41 41 45 
3ddd0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3ddd4     4F 55 55 59 
3ddd8     4F 55 4F 9C 
3dddc     4F 9E 9F 41 
3dde0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3dde4     A5 A6 A7 A8 
3dde8     A9 AA AB AC 
3ddec     AD AE AF B0 
3ddf0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3ddf4     41 41 41 B8 
3ddf8     B9 BA BB BC 
3ddfc     BD BE BF C0 
3de00     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3de04     C5 41 41 C8 
3de08     C9 CA CB CC 
3de0c     CD CE CF D1 
3de10     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3de14     49 49 49 49 
3de18     D9 DA DB DC 
3de1c     DD 49 DF 4F 
3de20     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3de24     4F E6 E8 E8 
3de28     55 55 55 59 
3de2c     59 EE EF F0 
3de30     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3de34     F5 F6 F7 F8 
3de38     F9 FA FB FC 
3de3c     FD FE FF 00 
3de40     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3de44     00 00 00 00 | 	byte	$00, $00, $00, $00
3de48     00 00 40 0A | 	long	(164 {_fatfs_cc_v_close})<<20
3de4c     00 00 50 0A | 	long	(165 {_fatfs_cc_v_read})<<20
3de50     00 00 60 0A | 	long	(166 {_fatfs_cc_v_write})<<20
3de54     00 00 70 0A | 	long	(167 {_fatfs_cc_v_lseek})<<20
3de58     00 00 80 0A | 	long	(168 {_fatfs_cc_v_ioctl})<<20
3de5c     00 00 90 0B | 	long	(185 {_fatfs_cc_v_flush})<<20
3de60     00 00 00 00 
3de64     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3de68     00 00 90 0A | 	long	(169 {_fatfs_cc_v_open})<<20
3de6c     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_creat})<<20
3de70     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_opendir})<<20
3de74     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_closedir})<<20
3de78     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_readdir})<<20
3de7c     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_stat})<<20
3de80     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_mkdir})<<20
3de84     00 00 00 0B | 	long	(176 {_fatfs_cc_v_rmdir})<<20
3de88     00 00 10 0B | 	long	(177 {_fatfs_cc_v_remove})<<20
3de8c     00 00 20 0B | 	long	(178 {_fatfs_cc_v_rename})<<20
3de90     00 00 30 0B | 	long	(179 {_fatfs_cc_v_init})<<20
3de94     00 00 40 0B | 	long	(180 {_fatfs_cc_v_deinit})<<20
3de98     FF FF FF FF 
3de9c     1F 00 00 00 
3dea0     1C 00 00 00 
3dea4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3dea8     1E 00 00 00 
3deac     1F 00 00 00 
3deb0     1E 00 00 00 
3deb4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3deb8     1F 00 00 00 
3debc     1E 00 00 00 
3dec0     1F 00 00 00 
3dec4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3dec8     1F 00 00 00 
3decc     00 00 00 00 
3ded0     1F 00 00 00 
3ded4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3ded8     5A 00 00 00 
3dedc     78 00 00 00 
3dee0     97 00 00 00 
3dee4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3dee8     D4 00 00 00 
3deec     F3 00 00 00 
3def0     11 01 00 00 
3def4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3def8     4E 01 00 00 
3defc     6D 01 00 00 
3df00     FF FF FF FF 
3df04     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3df08     00 00 00 00 
      ...             
3df20     00 00 00 00 
3df24     00 00 00 00 | 	byte	$00[32]
3df28     46 DF 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3df2c     4A DF 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3df30     00 00 00 00 
3df34     00 00 00 00 
3df38     00 00 00 00 
3df3c     00 00 00 00 
3df40     00 00       | 	byte	$00[18]
3df42     3F 3F 3F 00 
3df46     55 43 54 00 
3df4a     55 43 54 00 
3df4e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3df52     00 00 00 00 
3df56     00 00 00    | 	byte	$00[7]
3df59     CA 9A 3B 00 
3df5d     00 00 00 01 
3df61     01 01 01 01 
3df65     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3df69     91 11 11 11 
3df6d     11 01 01 01 
3df71     01 01 01 01 
3df75     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3df79     01 01 01 01 
3df7d     01 01 01    | 	byte	$01[7]
3df80     90 20 20 20 
3df84     20 20 20 20 
3df88     20 20 20 20 
3df8c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3df90     42 42 42 42 
3df94     42 42 42 42 
3df98     42 42       | 	byte	$42[10]
3df9a     20 20 20 20 
3df9e     20 20 20    | 	byte	$20[7]
3dfa1     44 44 44 44 
3dfa5     44 44       | 	byte	$44[6]
3dfa7     04 04 04 04 
3dfab     04 04 04 04 
3dfaf     04 04 04 04 
3dfb3     04 04 04 04 
3dfb7     04 04 04 04 | 	byte	$04[20]
3dfbb     20 20 20 20 
3dfbf     20 20       | 	byte	$20[6]
3dfc1     48 48 48 48 
3dfc5     48 48       | 	byte	$48[6]
3dfc7     08 08 08 08 
3dfcb     08 08 08 08 
3dfcf     08 08 08 08 
3dfd3     08 08 08 08 
3dfd7     08 08 08 08 | 	byte	$08[20]
3dfdb     20 20 20 20 
3dfdf     01 00 00 00 
3dfe3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3dfe4                 | __methodtable__
3dfe4     B8 4C 01 00 | 	long	@_do_no_command
3dfe8     78 CD 01 00 | 	long	@_do_plus
3dfec     98 BD 01 00 | 	long	@_do_minus
3dff0     60 CC 01 00 | 	long	@_do_or
3dff4     18 C4 01 00 | 	long	@_do_mul
3dff8     5C A8 01 00 | 	long	@_do_fdiv
3dffc     48 A0 01 00 | 	long	@_do_and
3e000     60 A1 01 00 | 	long	@_do_div
3e004     F8 C1 01 00 | 	long	@_do_mod
3e008     2C D4 01 00 | 	long	@_do_shl
3e00c     44 D5 01 00 | 	long	@_do_shr
3e010     64 D2 01 00 | 	long	@_do_power
3e014     44 96 01 00 | 	long	@_do_getvar
3e018     54 69 01 00 | 	long	@_do_push
3e01c     3C 90 01 00 | 	long	@_do_assign
3e020     74 F1 00 00 | 	long	@_do_cls
3e024     A4 46 01 00 | 	long	@_do_new
3e028     98 61 01 00 | 	long	@_do_plot
3e02c     74 13 01 00 | 	long	@_do_draw
3e030     00 64 01 00 | 	long	@_do_print
3e034     54 EF 00 00 | 	long	@_do_circle
3e038     A8 15 01 00 | 	long	@_do_fcircle
3e03c     48 DE 00 00 | 	long	@_do_box
3e040     8C 1A 01 00 | 	long	@_do_frame
3e044     B4 F1 00 00 | 	long	@_do_color
3e048     1C 18 01 00 | 	long	@_do_for
3e04c     F0 48 01 00 | 	long	@_do_next
3e050     DC 34 01 00 | 	long	@_do_list
3e054     AC 75 01 00 | 	long	@_do_run
3e058     D0 14 01 00 | 	long	@_do_error
3e05c     D8 26 01 00 | 	long	@_do_fast_goto
3e060     C8 27 01 00 | 	long	@_do_find_goto
3e064     DC 29 01 00 | 	long	@_do_slow_goto
3e068     C8 4C 01 00 | 	long	@_do_nothing
3e06c     4C D1 00 00 | 	long	@_test_csave
3e070     98 79 01 00 | 	long	@_do_save
3e074     78 37 01 00 | 	long	@_do_load
3e078     D4 54 01 00 | 	long	@_do_pinwrite
3e07c     7C 8D 01 00 | 	long	@_do_waitms
3e080     B0 8E 01 00 | 	long	@_do_waitvbl
3e084     D0 2C 01 00 | 	long	@_do_if
3e088     68 14 01 00 | 	long	@_do_else
3e08c     80 A3 01 00 | 	long	@_do_eq
3e090     24 AA 01 00 | 	long	@_do_ge
3e094     F0 B3 01 00 | 	long	@_do_le
3e098     0C AF 01 00 | 	long	@_do_gt
3e09c     CC B8 01 00 | 	long	@_do_lt
3e0a0     84 C7 01 00 | 	long	@_do_ne
3e0a4     14 73 01 00 | 	long	@_do_rnd
3e0a8     30 E0 00 00 | 	long	@_do_brun
3e0ac     CC D9 00 00 | 	long	@_do_beep
3e0b0     04 0C 01 00 | 	long	@_do_dir
3e0b4     08 51 01 00 | 	long	@_do_paper
3e0b8     8C 30 01 00 | 	long	@_do_ink
3e0bc     A0 17 01 00 | 	long	@_do_font
3e0c0     B4 41 01 00 | 	long	@_do_mode
3e0c4     60 45 01 00 | 	long	@_do_mouse
3e0c8     58 25 01 00 | 	long	@_do_gettime
3e0cc     10 F3 00 00 | 	long	@_do_cursor
3e0d0     CC F0 00 00 | 	long	@_do_click
3e0d4     1C 46 01 00 | 	long	@_do_mousex
3e0d8     60 46 01 00 | 	long	@_do_mousey
3e0dc     94 45 01 00 | 	long	@_do_mousek
3e0e0     D8 45 01 00 | 	long	@_do_mousew
3e0e4     E4 82 01 00 | 	long	@_do_sin
3e0e8     1C 86 01 00 | 	long	@_do_stick
3e0ec     AC 87 01 00 | 	long	@_do_strig
3e0f0     3C 84 01 00 | 	long	@_do_sprite
3e0f4     2C 07 01 00 | 	long	@_do_defsprite
3e0f8     04 24 01 00 | 	long	@_do_getpixel
3e0fc     58 8D 01 00 | 	long	@_do_waitclock
3e100     48 C1 01 00 | 	long	@_do_negative
3e104     D8 6F 01 00 | 	long	@_do_rdpin
3e108     38 75 01 00 | 	long	@_do_rqpin
3e10c     00 53 01 00 | 	long	@_do_pinread
3e110     BC 8E 01 00 | 	long	@_do_wrpin
3e114     3C 8F 01 00 | 	long	@_do_wxpin
3e118     BC 8F 01 00 | 	long	@_do_wypin
3e11c     40 52 01 00 | 	long	@_do_pinfloat
3e120     C0 52 01 00 | 	long	@_do_pinlo
3e124     80 52 01 00 | 	long	@_do_pinhi
3e128     84 53 01 00 | 	long	@_do_pinstart
3e12c     94 54 01 00 | 	long	@_do_pintoggle
3e130     78 63 01 00 | 	long	@_do_position
3e134     EC F1 00 00 | 	long	@_do_cos
3e138     3C 89 01 00 | 	long	@_do_tan
3e13c     B4 D8 00 00 | 	long	@_do_atn
3e140     A4 D7 00 00 | 	long	@_do_asin
3e144     34 D5 00 00 | 	long	@_do_acos
3e148     28 85 01 00 | 	long	@_do_sqr
3e14c     8C 16 01 00 | 	long	@_do_fill
3e150     40 FE 00 00 | 	long	@_do_defsnd
3e154     44 F3 00 00 | 	long	@_do_defenv
3e158     B0 6F 01 00 | 	long	@_do_rad
3e15c     A0 0A 01 00 | 	long	@_do_deg
3e160     0C 31 01 00 | 	long	@_do_int
3e164     5C 55 01 00 | 	long	@_do_play
3e168     3C 7D 01 00 | 	long	@_do_setdelay
3e16c     E4 7D 01 00 | 	long	@_do_setenv
3e170     8C 7E 01 00 | 	long	@_do_setlen
3e174     34 7F 01 00 | 	long	@_do_setpan
3e178     84 80 01 00 | 	long	@_do_setvol
3e17c     2C 81 01 00 | 	long	@_do_setwave
3e180     DC 7F 01 00 | 	long	@_do_setsustain
3e184     44 70 01 00 | 	long	@_do_release
3e188     F0 21 01 00 | 	long	@_do_getenvsustain
3e18c     68 62 01 00 | 	long	@_do_poke
3e190     9C 12 01 00 | 	long	@_do_dpoke
3e194     50 3E 01 00 | 	long	@_do_lpoke
3e198     90 51 01 00 | 	long	@_do_peek
3e19c     F0 11 01 00 | 	long	@_do_dpeek
3e1a0     A4 3D 01 00 | 	long	@_do_lpeek
3e1a4     E8 1B 01 00 | 	long	@_do_fre
3e1a8     00 23 01 00 | 	long	@_do_getnotevalue
3e1ac     FC 9B 01 00 | 	long	@_do_getaddr
3e1b0     B4 2D 01 00 | 	long	@_do_inkey
3e1b4     B4 D4 00 00 | 	long	@_do_abs
3e1b8     6C 2B 01 00 | 	long	@_do_hex
3e1bc     E4 DC 00 00 | 	long	@_do_bin
3e1c0     4C 8A 01 00 | 	long	@_do_val
3e1c4     54 EE 00 00 | 	long	@_do_chr
3e1c8     44 D6 00 00 | 	long	@_do_asc
3e1cc     DC 31 01 00 | 	long	@_do_left
3e1d0     88 71 01 00 | 	long	@_do_right
3e1d4     28 3F 01 00 | 	long	@_do_mid
3e1d8     68 33 01 00 | 	long	@_do_len
3e1dc     C0 25 01 00 | 	long	@_do_gosub
3e1e0     DC 70 01 00 | 	long	@_do_return
3e1e4     8C 14 01 00 | 	long	@_do_end
3e1e8     40 63 01 00 | 	long	@_do_pop
3e1ec     28 3C 01 00 | 	long	@_do_log
3e1f0     48 EC 00 00 | 	long	@_do_changevol
3e1f4     28 ED 00 00 | 	long	@_do_changewav
3e1f8     38 EB 00 00 | 	long	@_do_changepan
3e1fc     1C E8 00 00 | 	long	@_do_changefreq
3e200     D4 81 01 00 | 	long	@_do_shutup
3e204     E4 74 01 00 | 	long	@_do_round
3e208     C0 14 01 00 | 	long	@_do_enter
3e20c     F0 4D 01 00 | 	long	@_do_open
3e210     F8 F0 00 00 | 	long	@_do_close
3e214     4C 1C 01 00 | 	long	@_do_get
3e218     70 6A 01 00 | 	long	@_do_put
3e21c     68 E2 00 00 | 	long	@_do_cd
3e220     C8 0A 01 00 | 	long	@_do_delete
3e224     F4 40 01 00 | 	long	@_do_mkdir
3e228     E0 DA 00 00 | 	long	@_do_blit
3e22c     B4 1B 01 00 | 	long	@_do_framebuf
3e230     CC 4C 01 00 | 	long	@_do_on
3e234     F4 83 01 00 | 	long	@_do_skip
3e238     C8 31 01 00 | 	long	@_do_input
3e23c     2C 14 02 00 | 	long	@_hg010b_spin2_putchar
3e240     CC 29 03 00 | 	long	@__struct___bas_wrap_sender_tx
3e244     10 2A 03 00 | 	long	@__struct___bas_wrap_sender_rx
3e248     58 2A 03 00 | 	long	@__struct___bas_wrap_sender_close
3e24c     FC 28 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3e250     6C 29 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3e254     B4 28 03 00 | 	long	@___strs_cl_pfunc
3e258     48 86 02 00 | 	long	@__system____root_opendir
3e25c     E4 86 02 00 | 	long	@__system____root_closedir
3e260     60 86 02 00 | 	long	@__system____root_readdir
3e264     EC 86 02 00 | 	long	@__system____root_stat
3e268     38 7F 02 00 | 	long	@__system____default_putc
3e26c     BC 7E 02 00 | 	long	@__system____default_getc
3e270     E0 7F 02 00 | 	long	@__system____default_flush
3e274     B8 13 03 00 | 	long	@_fatfs_cc_v_close
3e278     D4 17 03 00 | 	long	@_fatfs_cc_v_read
3e27c     E8 18 03 00 | 	long	@_fatfs_cc_v_write
3e280     C8 19 03 00 | 	long	@_fatfs_cc_v_lseek
3e284     50 1A 03 00 | 	long	@_fatfs_cc_v_ioctl
3e288     A4 1A 03 00 | 	long	@_fatfs_cc_v_open
3e28c     1C 13 03 00 | 	long	@_fatfs_cc_v_creat
3e290     FC 13 03 00 | 	long	@_fatfs_cc_v_opendir
3e294     70 14 03 00 | 	long	@_fatfs_cc_v_closedir
3e298     B0 14 03 00 | 	long	@_fatfs_cc_v_readdir
3e29c     E4 15 03 00 | 	long	@_fatfs_cc_v_stat
3e2a0     64 1A 03 00 | 	long	@_fatfs_cc_v_mkdir
3e2a4     84 1A 03 00 | 	long	@_fatfs_cc_v_rmdir
3e2a8     74 1A 03 00 | 	long	@_fatfs_cc_v_remove
3e2ac     94 1A 03 00 | 	long	@_fatfs_cc_v_rename
3e2b0     B4 1B 03 00 | 	long	@_fatfs_cc_v_init
3e2b4     BC 1B 03 00 | 	long	@_fatfs_cc_v_deinit
3e2b8     8C 30 02 00 | 	long	@__system___tx
3e2bc     CC 30 02 00 | 	long	@__system___rx
3e2c0     58 92 02 00 | 	long	@__system___rxtxioctl_0720
3e2c4     B0 92 02 00 | 	long	@__system____dummy_flush_0721
3e2c8     84 1B 03 00 | 	long	@_fatfs_cc_v_flush
3e2cc                 | __heap_base
3e2cc     00 00 00 00 
      ...             
559cc     00 00 00 00 
559d0     00 00 00 00 | 	long	0[24002]
559d4                 | objmem
559d4     00 00 00 00 
      ...             
5fdfc     00 00 00 00 
5fe00     00 00 00 00 | 	long	0[10508]
5fe04                 | stackspace
5fe04     00 00 00 00 | 	long	0[1]
5fe08 100             | 	org	COG_BSS_START
5fe08 100             | _var01
5fe08 100             | 	res	1
5fe08 101             | _var02
5fe08 101             | 	res	1
5fe08 102             | _var03
5fe08 102             | 	res	1
5fe08 103             | _var04
5fe08 103             | 	res	1
5fe08 104             | _var05
5fe08 104             | 	res	1
5fe08 105             | _var06
5fe08 105             | 	res	1
5fe08 106             | _var07
5fe08 106             | 	res	1
5fe08 107             | _var08
5fe08 107             | 	res	1
5fe08 108             | _var09
5fe08 108             | 	res	1
5fe08 109             | arg01
5fe08 109             | 	res	1
5fe08 10a             | arg02
5fe08 10a             | 	res	1
5fe08 10b             | arg03
5fe08 10b             | 	res	1
5fe08 10c             | arg04
5fe08 10c             | 	res	1
5fe08 10d             | arg05
5fe08 10d             | 	res	1
5fe08 10e             | arg06
5fe08 10e             | 	res	1
5fe08 10f             | arg07
5fe08 10f             | 	res	1
5fe08 110             | arg08
5fe08 110             | 	res	1
5fe08 111             | arg09
5fe08 111             | 	res	1
5fe08 112             | arg10
5fe08 112             | 	res	1
5fe08 113             | local01
5fe08 113             | 	res	1
5fe08 114             | local02
5fe08 114             | 	res	1
5fe08 115             | local03
5fe08 115             | 	res	1
5fe08 116             | local04
5fe08 116             | 	res	1
5fe08 117             | local05
5fe08 117             | 	res	1
5fe08 118             | local06
5fe08 118             | 	res	1
5fe08 119             | local07
5fe08 119             | 	res	1
5fe08 11a             | local08
5fe08 11a             | 	res	1
5fe08 11b             | local09
5fe08 11b             | 	res	1
5fe08 11c             | local10
5fe08 11c             | 	res	1
5fe08 11d             | local11
5fe08 11d             | 	res	1
5fe08 11e             | local12
5fe08 11e             | 	res	1
5fe08 11f             | local13
5fe08 11f             | 	res	1
5fe08 120             | local14
5fe08 120             | 	res	1
5fe08 121             | local15
5fe08 121             | 	res	1
5fe08 122             | local16
5fe08 122             | 	res	1
5fe08 123             | local17
5fe08 123             | 	res	1
5fe08 124             | local18
5fe08 124             | 	res	1
5fe08 125             | local19
5fe08 125             | 	res	1
5fe08 126             | local20
5fe08 126             | 	res	1
5fe08 127             | local21
5fe08 127             | 	res	1
5fe08 128             | local22
5fe08 128             | 	res	1
5fe08 129             | local23
5fe08 129             | 	res	1
5fe08 12a             | local24
5fe08 12a             | 	res	1
5fe08 12b             | local25
5fe08 12b             | 	res	1
5fe08 12c             | local26
5fe08 12c             | 	res	1
5fe08 12d             | local27
5fe08 12d             | 	res	1
5fe08 12e             | local28
5fe08 12e             | 	res	1
5fe08 12f             | local29
5fe08 12f             | 	res	1
5fe08 130             | local30
5fe08 130             | 	res	1
5fe08 131             | local31
5fe08 131             | 	res	1
5fe08 132             | local32
5fe08 132             | 	res	1
5fe08 133             | local33
5fe08 133             | 	res	1
5fe08 134             | local34
5fe08 134             | 	res	1
5fe08 135             | local35
5fe08 135             | 	res	1
5fe08 136             | local36
5fe08 136             | 	res	1
5fe08 137             | local37
5fe08 137             | 	res	1
5fe08 138             | local38
5fe08 138             | 	res	1
5fe08 139             | local39
5fe08 139             | 	res	1
5fe08 13a             | local40
5fe08 13a             | 	res	1
5fe08 13b             | local41
5fe08 13b             | 	res	1
5fe08 13c             | local42
5fe08 13c             | 	res	1
5fe08 13d             | local43
5fe08 13d             | 	res	1
5fe08 13e             | local44
5fe08 13e             | 	res	1
5fe08 13f             | local45
5fe08 13f             | 	res	1
5fe08 140             | local46
5fe08 140             | 	res	1
5fe08 141             | local47
5fe08 141             | 	res	1
5fe08 142             | local48
5fe08 142             | 	res	1
5fe08 143             | local49
5fe08 143             | 	res	1
5fe08 144             | muldiva_
5fe08 144             | 	res	1
5fe08 145             | muldivb_
5fe08 145             | 	res	1
5fe08 146             | 	fit	480
5fe08 146             | 
